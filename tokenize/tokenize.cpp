#include <filesystem>
#include <fstream>
#include <iostream>
#include <map>
#include <sstream>

namespace fs = std::filesystem;

void tokenize(const fs::path &token_folder, const fs::directory_entry &objdump_folder)
{
  std::stringstream ss;
  std::string line, addr, opcode;

  using d_itr = fs::directory_iterator;
  for (const auto &bf : d_itr{ objdump_folder }) {
    std::map<std::string, int> token;
    std::ifstream infile(bf.path());

    int lcnt = 0;
    while (std::getline(infile, line)) {
      if (lcnt >= 8) {
        ss << line;
        ss >> addr >> opcode;

        if (addr != "...") {
          if (token.find(opcode) != token.end())
            ++token[opcode];
          else
            token[opcode] = 0;
        }

        ss.str("");
        ss.clear();
      }

      ++lcnt;
    }

    std::ofstream outfile(token_folder / bf.path().filename());
    for (const auto &[opcode, cnt] : token)
      outfile << opcode << " " << cnt << '\n';
  }
}

int main()
{
  fs::path top(fs::current_path().parent_path());
  fs::directory_entry benign_objd{ top / "files/benign_objd" };
  fs::directory_entry malware_objd{ top / "files/malware_objd" };

  fs::path t_benign{ top / "token/benign" };
  fs::path t_malware{ top / "token/malware" };

  std::cout << "transforming benign-ware...\n";
  tokenize(t_benign, benign_objd);

  std::cout << "transforming malware...\n";
  tokenize(t_malware, malware_objd);
}