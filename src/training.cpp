/**
 * @file training_ball.cpp
 * @author Mes (mes900903@gmail.com) (Discord: Mes#0903)
 * @brief Traning the Adaboost to classified if an object is an ball, then stored the weighting.
 *        Execute it by command `rosrun mes_detect_ball Training_Ball` if you use ROS to build it.
 * @version 0.1
 * @date 2022-11-17
 */

#include "adaboost.h"
#include "logistic.h"
#include "normalize.h"
#include "file_handler.h"
#include "feature_num.h"
#include "Eigen/Dense"
#include "metric.h"

#include <filesystem>
#include <iostream>
#include <limits>

int main()
{
  namespace fs = std::filesystem;

  const fs::path top(FileHandler::get_filepath());
  const fs::path files(top / "files");

  int case_num = 0;
  int sample = 0;

  // std::cout << "Input 1 if training, others if loading\n>";
  //  std::cin >> case_num;

  // if (case_num == 1) {
  //   std::cout << "input sample numbers\n>";
  //   // std::cin >> sample;
  // }
  // std::cin.clear();
  // std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

  puts("read training data...");
  auto [train_X, train_Y] = LoadMatrix::readDataSet(files, "train", 5432);

  std::vector<Eigen::MatrixXf::Index> trmaxIndex(5432);
  Eigen::VectorXd trY(5432);
  for (int i = 0; i < 5432; ++i) {
    train_Y.row(i).maxCoeff(&trmaxIndex[i]);
    trY(i) = trmaxIndex[i] + 1;
  }

  puts("reading testing data...");
  auto [test_X, test_Y] = LoadMatrix::readDataSet(files, "test", 5436);

  std::vector<Eigen::MatrixXf::Index> temaxIndex(5436);
  Eigen::VectorXd teY(5436);
  for (int i = 0; i < 5436; ++i) {
    test_Y.row(i).maxCoeff(&temaxIndex[i]);
    teY(i) = temaxIndex[i] + 1;
  }

  //  if (case_num == 1) {
  /* fitting */

  Normalizer normalizer;
  normalizer.fit(train_X);
  train_X = normalizer.transform(train_X);
  test_X = normalizer.transform(test_X);

  // for (int i = 0; i < sample; ++i) {
  //   std::cout << "========================================================================================\n";
  //   std::cout << "training sample " << i + 1 << "...\n";
  //   puts("start tranning");
  logistic lg;
  lg.fit(train_X, train_Y, Eigen::VectorXd::Ones(5432), 100000);
  Eigen::VectorXd rpred_Y = lg.predict(train_X);

  int rcorrect = 0, rerr = 0;
  for (int i = 0; i < rpred_Y.size(); ++i) {
    if (rpred_Y(i) != trY(i))
      rerr++;
    else
      rcorrect++;
  }
  std::cout << "train correct:" << rcorrect << " err: " << rerr << std::endl;

  Eigen::VectorXd epred_Y = lg.predict(test_X);
  int ecorrect = 0, eerr = 0;
  for (int i = 0; i < epred_Y.size(); ++i) {
    if (epred_Y(i) != teY(i))
      eerr++;
    else
      ecorrect++;
  }
  std::cout << "test correct:" << ecorrect << " err: " << eerr << std::endl;

  // std::cout << pred_Y << std::endl;
  //        FileHandler::store_weight(confusion_matrix, filepath + "/dataset/weight_data/adaboost_ball_weight.txt", A, normalizer);
  //  }
  //  }
  //   else {
  //  }
}