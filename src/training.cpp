/**
 * @file training_ball.cpp
 * @author Mes
 * @brief Traning the Adaboost to classified if an object is an ball, then stored the weighting.
 *        Execute it by command `rosrun mes_detect_ball Training_Ball` if you use ROS to build it.
 * @version 0.1
 * @date 2022-11-17
 */

#include "adaboost.h"
#include "logistic.h"
#include "make_feature.h"
#include "segment.h"
#include "normalize.h"
#include "file_handler.h"
#include "metric.h"

#include <iostream>
#include <Eigen/Dense>
#include <limits>
#include <filesystem>

int main()
{
  //const std::string filepath = File_handler::get_filepath(argv[0]);
  namespace fs = std::filesystem;

  const std::string filepath = fs::current_path().parent_path().string();

  int case_num = 0;
  int sample = 0;

  std::cout << "Input 1 if training, others if loading\n>";
  std::cin >> case_num;

  if (case_num == 1) {
    std::cout << "input sample numbers\n>";
    std::cin >> sample;
  }
  std::cin.clear();
  std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

  /* fitting */
  puts("read training data...");
  Eigen::MatrixXd train_feature = Load_Matrix::readDataSet(filepath + "/include/dataset/training_feature2.txt", 4624, FEATURE_NUM);    // file, row, col

  puts("reading training label...");
  Eigen::VectorXd train_label = Load_Matrix::readLabel(filepath + "/include/dataset/training_label2.txt", 4624);    // file, segment num(row)

  puts("reading testing data...");
  Eigen::MatrixXd test_feature = Load_Matrix::readDataSet(filepath + "/include/dataset/testing_feature2.txt", 4622, FEATURE_NUM);

  puts("reading testing label...");
  const Eigen::VectorXd test_label = Load_Matrix::readLabel(filepath + "/include/dataset/testing_label2.txt", 4622);

  Eigen::MatrixXd demo_feature = Load_Matrix::readDataSet(filepath + "/demo/demo_feature.txt", 1, FEATURE_NUM);

  if (case_num == 1) {
    Normalizer normalizer;
    puts("Normalize");
    normalizer.fit(train_feature);
    // train_feature = normalizer.transform(train_feature);
    // test_feature = normalizer.transform(test_feature);

    for (int i = 0; i < sample; ++i) {
      std::cout << "training sample " << i + 1 << "...\n";
      puts("start tranning");
      Adaboost<logistic> A(100);
      A.fit(train_feature, train_label);

      // prediction
      puts("\nmake prediction");

      const Eigen::VectorXd pred_label = A.predict(test_feature);

      puts("cal confusion matrix");
      const Eigen::MatrixXd confusion_matrix = metric::cal_confusion_matrix(test_label, pred_label);
      A.set_confusion_matrix(confusion_matrix);
      A.print_confusion_matrix();

      File_handler::store_weight(confusion_matrix, filepath + "/include/weight_data/adaboost_weight.txt", A, normalizer);
    }
  }
  else {
    Normalizer normalizer;
    Adaboost<logistic> A;

    puts("Load Weighting...");
    File_handler::load_weight(filepath + "/include/weight_data/adaboost_weight.txt", A, normalizer);

    puts("Transforming test data...");
    // test_feature = normalizer.transform(test_feature);

    puts("make prediction");
    const Eigen::VectorXd pred_label = A.predict(test_feature);

    puts("cal confusion matrix");
    Eigen::MatrixXd confusion_matrix = metric::cal_confusion_matrix(test_label, pred_label);
    std::cout << confusion_matrix << "\n-----------\n";

    double TP = confusion_matrix(0, 0), FP = confusion_matrix(0, 1), FN = confusion_matrix(1, 0), TN = confusion_matrix(1, 1);
    double accuracy = static_cast<double>(TP + TN) / (TP + TN + FP + FN);
    double recall = static_cast<double>(TP) / (TP + FN);
    double precision = static_cast<double>(TP) / (TP + FP);
    double F1_Score = 2 * precision * recall / (precision + recall);

    std::cout << "Accuracy : " << accuracy << '\n'
              << "recall : " << recall << '\n'
              << "precision: " << precision << '\n'
              << "F1 Score: " << F1_Score << '\n';

    if (case_num == 2) {
      std::cout << "-----------\n";

      const Eigen::VectorXd demo_label = A.predict(demo_feature);
      std::cout << "demo: ";

      if (demo_label(0) == 1)
        std::cout << "Malware!\n";
      else
        std::cout << "Benign-ware~\n";
    }
  }
}