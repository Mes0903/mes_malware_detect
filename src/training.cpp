/**
 * @file training_ball.cpp
 * @author Mes (mes900903@gmail.com) (Discord: Mes#0903)
 * @brief Traning the Adaboost to classified if an object is an ball, then stored the weighting.
 *        Execute it by command `rosrun mes_detect_ball Training_Ball` if you use ROS to build it.
 * @version 0.1
 * @date 2022-11-17
 */

#include "adaboost.h"
#include "logistic.h"
#include "normalize.h"
#include "file_handler.h"
#include "feature_num.h"
#include "Eigen/Dense"
#include "metric.h"

#include <filesystem>
#include <iostream>
#include <limits>

int main()
{
  namespace fs = std::filesystem;

  const fs::path top(FileHandler::get_filepath());
  const fs::path files(top / "files");

  int case_num = 0;
  int sample = 0;

  puts("read training data...");
  auto [train_X, train_Y] = LoadMatrix::readDataSet(files, "train", 5432);

  Eigen::VectorXd trY(5432);
  for (int i = 0; i < 5432; ++i) {
    Eigen::MatrixXd::Index maxIndex;
    train_Y.row(i).maxCoeff(&maxIndex);
    trY(i) = maxIndex + 1;
  }

  puts("reading testing data...");
  auto [test_X, test_Y] = LoadMatrix::readDataSet(files, "test", 5436);

  Eigen::VectorXd teY(5436);
  for (int i = 0; i < 5436; ++i) {
    Eigen::MatrixXd::Index maxIndex;
    test_Y.row(i).maxCoeff(&maxIndex);
    teY(i) = maxIndex + 1;
  }

  Normalizer normalizer;
  normalizer.fit(train_X);
  train_X = normalizer.transform(train_X);
  test_X = normalizer.transform(test_X);

  puts("start tranning");
  {
    std::ofstream outfile(files / "adaboost");
    Adaboost<logistic> A(10);
    A.fit(train_X, train_Y);
    A.store_weight(outfile);
    const Eigen::VectorXd epred_Y = A.predict(test_X);
    const Eigen::VectorXd rpred_Y = A.predict(train_X);

    int rcorrect = 0, rerr = 0;
    for (int i = 0; i < rpred_Y.size(); ++i) {
      if (rpred_Y(i) != trY(i))
        rerr++;
      else
        rcorrect++;
    }
    std::cout << "\ntrain correct:" << rcorrect << " err: " << rerr << std::endl;

    int ecorrect = 0, eerr = 0;
    for (int i = 0; i < epred_Y.size(); ++i) {
      if (epred_Y(i) != teY(i))
        eerr++;
      else
        ecorrect++;
    }
    std::cout << "test correct:" << ecorrect << " err: " << eerr << std::endl;
  }
  // puts("start loading");
  //{
  //   std::ifstream infile(files / "adaboost");
  //   Adaboost<logistic> A;
  //   A.load_weight(infile);
  //   const Eigen::VectorXd epred_Y = A.predict(test_X);
  //   const Eigen::VectorXd rpred_Y = A.predict(train_X);
  //
  //  int rcorrect = 0, rerr = 0;
  //  for (int i = 0; i < rpred_Y.size(); ++i) {
  //    if (rpred_Y(i) != trY(i))
  //      rerr++;
  //    else
  //      rcorrect++;
  //  }
  //  std::cout << "\ntrain correct:" << rcorrect << " err: " << rerr << std::endl;
  //
  //  int ecorrect = 0, eerr = 0;
  //  for (int i = 0; i < epred_Y.size(); ++i) {
  //    if (epred_Y(i) != teY(i))
  //      eerr++;
  //    else
  //      ecorrect++;
  //  }
  //  std::cout << "test correct:" << ecorrect << " err: " << eerr << std::endl;
  //}
}