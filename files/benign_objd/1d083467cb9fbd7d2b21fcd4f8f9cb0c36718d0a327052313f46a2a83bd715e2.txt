
1d083467cb9fbd7d2b21fcd4f8f9cb0c36718d0a327052313f46a2a83bd715e2.exe:     file format pei-x86-64


Disassembly of section .text:

0000000001001000 <.text>:
 1001000:	mov    edx,0xd7
	...
 100100d:	add    BYTE PTR [rax],al
 100100f:	add    BYTE PTR [rax-0x2e],bl
 1001012:	add    BYTE PTR [rax],al
 1001014:	add    BYTE PTR [rax],al
 1001016:	add    BYTE PTR [rax],al
 1001018:	outs   dx,BYTE PTR ds:[rsi]
 1001019:	rol    BYTE PTR [rax],cl
 100101b:	add    BYTE PTR [rax],al
 100101d:	add    BYTE PTR [rax],al
 100101f:	add    BYTE PTR [rdx+rdx*8+0x0],bh
 1001023:	add    BYTE PTR [rax],al
 1001025:	add    BYTE PTR [rax],al
 1001027:	add    BYTE PTR [rsi+0xd2],cl
 100102d:	add    BYTE PTR [rax],al
 100102f:	add    BYTE PTR [rdx+rdx*8+0x0],bl
 1001036:	add    BYTE PTR [rax],al
 1001038:	stos   BYTE PTR es:[rdi],al
 1001039:	rol    BYTE PTR [rax],cl
 100103b:	add    BYTE PTR [rax],al
 100103d:	add    BYTE PTR [rax],al
 100103f:	add    BYTE PTR [rdx+0xd2],bh
 1001045:	add    BYTE PTR [rax],al
 1001047:	add    al,cl
 1001049:	rol    BYTE PTR [rax],cl
 100104b:	add    BYTE PTR [rax],al
 100104d:	add    BYTE PTR [rax],al
 100104f:	add    ah,dl
 1001051:	rol    BYTE PTR [rax],cl
 1001053:	add    BYTE PTR [rax],al
 1001055:	add    BYTE PTR [rax],al
 1001057:	add    dl,ah
 1001059:	rol    BYTE PTR [rax],cl
 100105b:	add    BYTE PTR [rax],al
 100105d:	add    BYTE PTR [rax],al
 100105f:	add    dl,dh
 1001061:	rol    BYTE PTR [rax],cl
 1001063:	add    BYTE PTR [rax],al
 1001065:	add    BYTE PTR [rax],al
 1001067:	add    BYTE PTR [rdx],al
 1001069:	rol    DWORD PTR [rax],cl
 100106b:	add    BYTE PTR [rax],al
 100106d:	add    BYTE PTR [rax],al
 100106f:	add    BYTE PTR [rdx],cl
 1001071:	rol    DWORD PTR [rax],cl
 1001073:	add    BYTE PTR [rax],al
 1001075:	add    BYTE PTR [rax],al
 1001077:	add    BYTE PTR [rax],bl
 1001079:	rol    DWORD PTR [rax],cl
 100107b:	add    BYTE PTR [rax],al
 100107d:	add    BYTE PTR [rax],al
 100107f:	add    BYTE PTR [rax],ch
 1001081:	rol    DWORD PTR [rax],cl
 1001083:	add    BYTE PTR [rax],al
 1001085:	add    BYTE PTR [rax],al
 1001087:	add    BYTE PTR [rsi],dh
 1001089:	rol    DWORD PTR [rax],cl
 100108b:	add    BYTE PTR [rax],al
 100108d:	add    BYTE PTR [rax],al
 100108f:	add    BYTE PTR [rax-0x2d],cl
 1001092:	add    BYTE PTR [rax],al
 1001094:	add    BYTE PTR [rax],al
 1001096:	add    BYTE PTR [rax],al
 1001098:	pop    rax
 1001099:	rol    DWORD PTR [rax],cl
 100109b:	add    BYTE PTR [rax],al
 100109d:	add    BYTE PTR [rax],al
 100109f:	add    BYTE PTR [rsi-0x2d],ch
 10010a2:	add    BYTE PTR [rax],al
 10010a4:	add    BYTE PTR [rax],al
 10010a6:	add    BYTE PTR [rax],al
 10010a8:	(bad)  
 10010a9:	rol    DWORD PTR [rax],cl
 10010ab:	add    BYTE PTR [rax],al
 10010ad:	add    BYTE PTR [rax],al
 10010af:	add    BYTE PTR [rbx+rdx*8+0x0],dl
 10010b6:	add    BYTE PTR [rax],al
 10010b8:	scas   al,BYTE PTR es:[rdi]
 10010b9:	rol    DWORD PTR [rax],cl
 10010bb:	add    BYTE PTR [rax],al
 10010bd:	add    BYTE PTR [rax],al
 10010bf:	add    ah,al
 10010c1:	rol    DWORD PTR [rax],cl
 10010c3:	add    BYTE PTR [rax],al
 10010c5:	add    BYTE PTR [rax],al
 10010c7:	add    BYTE PTR [rdx+rdx*8+0x0],cl
 10010cb:	add    BYTE PTR [rax],al
 10010cd:	add    BYTE PTR [rax],al
 10010cf:	add    dh,ah
 10010d1:	rol    DWORD PTR [rax],cl
 10010d3:	add    BYTE PTR [rax],al
 10010d5:	add    BYTE PTR [rax],al
 10010d7:	add    dh,dh
 10010d9:	rol    DWORD PTR [rax],cl
 10010db:	add    BYTE PTR [rax],al
 10010dd:	add    BYTE PTR [rax],al
 10010df:	add    BYTE PTR [rsp+rdx*8],cl
 10010e2:	add    BYTE PTR [rax],al
 10010e4:	add    BYTE PTR [rax],al
 10010e6:	add    BYTE PTR [rax],al
 10010e8:	(bad)  
 10010e9:	(bad)  
 10010ea:	add    BYTE PTR [rax],al
 10010ec:	add    BYTE PTR [rax],al
 10010ee:	add    BYTE PTR [rax],al
 10010f0:	cmp    al,0xd4
 10010f2:	add    BYTE PTR [rax],al
 10010f4:	add    BYTE PTR [rax],al
 10010f6:	add    BYTE PTR [rax],al
 10010f8:	rex.WRX (bad) 
 10010fa:	add    BYTE PTR [rax],al
 10010fc:	add    BYTE PTR [rax],al
 10010fe:	add    BYTE PTR [rax],al
 1001100:	rex.W fld DWORD PTR [rax]
 1001103:	add    BYTE PTR [rax],al
 1001105:	add    BYTE PTR [rax],al
 1001107:	add    BYTE PTR [rcx+rbx*8],dh
 100110a:	add    BYTE PTR [rax],al
 100110c:	add    BYTE PTR [rax],al
 100110e:	add    BYTE PTR [rax],al
 1001110:	sub    cl,bl
 1001112:	add    BYTE PTR [rax],al
 1001114:	add    BYTE PTR [rax],al
 1001116:	add    BYTE PTR [rax],al
 1001118:	(bad)  
 1001119:	fld    DWORD PTR [rax]
 100111b:	add    BYTE PTR [rax],al
 100111d:	add    BYTE PTR [rax],al
 100111f:	add    al,bh
 1001121:	fadd   DWORD PTR [rax]
 1001123:	add    BYTE PTR [rax],al
 1001125:	add    BYTE PTR [rax],al
 1001127:	add    dl,ah
 1001129:	fadd   DWORD PTR [rax]
 100112b:	add    BYTE PTR [rax],al
 100112d:	add    BYTE PTR [rax],al
 100112f:	add    dl,dl
 1001131:	fadd   DWORD PTR [rax]
 1001133:	add    BYTE PTR [rax],al
 1001135:	add    BYTE PTR [rax],al
 1001137:	add    BYTE PTR [rax+0xd8],bh
 100113d:	add    BYTE PTR [rax],al
 100113f:	add    BYTE PTR [rax+0xd8],ch
 1001145:	add    BYTE PTR [rax],al
 1001147:	add    BYTE PTR [rax+rbx*8+0x0],dl
 100114e:	add    BYTE PTR [rax],al
 1001150:	jp     0x100112a
 1001152:	add    BYTE PTR [rax],al
 1001154:	add    BYTE PTR [rax],al
 1001156:	add    BYTE PTR [rax],al
 1001158:	data16 fadd DWORD PTR [rax]
 100115b:	add    BYTE PTR [rax],al
 100115d:	add    BYTE PTR [rax],al
 100115f:	add    BYTE PTR [rdx-0x28],dl
 1001162:	add    BYTE PTR [rax],al
 1001164:	add    BYTE PTR [rax],al
 1001166:	add    BYTE PTR [rax],al
 1001168:	xor    al,0xd8
 100116a:	add    BYTE PTR [rax],al
 100116c:	add    BYTE PTR [rax],al
 100116e:	add    BYTE PTR [rax],al
 1001170:	sbb    al,bl
 1001172:	add    BYTE PTR [rax],al
 1001174:	add    BYTE PTR [rax],al
 1001176:	add    BYTE PTR [rax],al
 1001178:	add    al,0xd8
 100117a:	add    BYTE PTR [rax],al
 100117c:	add    BYTE PTR [rax],al
 100117e:	add    BYTE PTR [rax],al
 1001180:	lock xlat BYTE PTR ds:[rbx]
 1001182:	add    BYTE PTR [rax],al
 1001184:	add    BYTE PTR [rax],al
 1001186:	add    BYTE PTR [rax],al
 1001188:	loopne 0x1001161
 100118a:	add    BYTE PTR [rax],al
 100118c:	add    BYTE PTR [rax],al
 100118e:	add    BYTE PTR [rax],al
 1001190:	rcl    bl,cl
 1001192:	add    BYTE PTR [rax],al
 1001194:	add    BYTE PTR [rax],al
 1001196:	add    BYTE PTR [rax],al
 1001198:	rol    BYTE PTR [rax],cl
 100119b:	add    BYTE PTR [rax],al
 100119d:	add    BYTE PTR [rax],al
 100119f:	add    BYTE PTR [rdx-0x27],bl
	...
 10011ae:	add    BYTE PTR [rax],al
 10011b0:	rex.X (bad) 
 10011b2:	add    BYTE PTR [rax],al
 10011b4:	add    BYTE PTR [rax],al
 10011b6:	add    BYTE PTR [rax],al
 10011b8:	rex.WRX (bad) 
 10011ba:	add    BYTE PTR [rax],al
 10011bc:	add    BYTE PTR [rax],al
 10011be:	add    BYTE PTR [rax],al
 10011c0:	push   rsi
 10011c1:	(bad)  
 10011c2:	add    BYTE PTR [rax],al
 10011c4:	add    BYTE PTR [rax],al
 10011c6:	add    BYTE PTR [rax],al
 10011c8:	pop    rsi
 10011c9:	(bad)  
 10011ca:	add    BYTE PTR [rax],al
 10011cc:	add    BYTE PTR [rax],al
 10011ce:	add    BYTE PTR [rax],al
 10011d0:	push   0xd5
 10011d5:	add    BYTE PTR [rax],al
 10011d7:	add    BYTE PTR [rdx-0x2b],dh
 10011da:	add    BYTE PTR [rax],al
 10011dc:	add    BYTE PTR [rax],al
 10011de:	add    BYTE PTR [rax],al
 10011e0:	jl     0x10011b7
 10011e2:	add    BYTE PTR [rax],al
 10011e4:	add    BYTE PTR [rax],al
 10011e6:	add    BYTE PTR [rax],al
 10011e8:	test   ch,dl
 10011ea:	add    BYTE PTR [rax],al
 10011ec:	add    BYTE PTR [rax],al
 10011ee:	add    BYTE PTR [rax],al
 10011f0:	mov    ebp,ss
 10011f2:	add    BYTE PTR [rax],al
 10011f4:	add    BYTE PTR [rax],al
 10011f6:	add    BYTE PTR [rax],al
 10011f8:	xchg   esi,eax
 10011f9:	(bad)  
 10011fa:	add    BYTE PTR [rax],al
 10011fc:	add    BYTE PTR [rax],al
 10011fe:	add    BYTE PTR [rax],al
 1001200:	movabs al,ds:0xaa000000000000d5
 1001209:	(bad)  
 100120a:	add    BYTE PTR [rax],al
 100120c:	add    BYTE PTR [rax],al
 100120e:	add    BYTE PTR [rax],al
 1001210:	mov    eax,0xd5
 1001215:	add    BYTE PTR [rax],al
 1001217:	add    dl,al
 1001219:	(bad)  
 100121a:	add    BYTE PTR [rax],al
 100121c:	add    BYTE PTR [rax],al
 100121e:	add    BYTE PTR [rax],al
 1001220:	int3   
 1001221:	(bad)  
 1001222:	add    BYTE PTR [rax],al
 1001224:	add    BYTE PTR [rax],al
 1001226:	add    BYTE PTR [rax],al
 1001228:	fcom   st(5)
 100122a:	add    BYTE PTR [rax],al
 100122c:	add    BYTE PTR [rax],al
 100122e:	add    BYTE PTR [rax],al
 1001230:	loop   0x1001207
 1001232:	add    BYTE PTR [rax],al
 1001234:	add    BYTE PTR [rax],al
 1001236:	add    BYTE PTR [rax],al
 1001238:	out    dx,al
 1001239:	(bad)  
 100123a:	add    BYTE PTR [rax],al
 100123c:	add    BYTE PTR [rax],al
 100123e:	add    BYTE PTR [rax],al
 1001240:	clc    
 1001241:	(bad)  
 1001242:	add    BYTE PTR [rax],al
 1001244:	add    BYTE PTR [rax],al
 1001246:	add    BYTE PTR [rax],al
 1001248:	add    dh,dl
 100124a:	add    BYTE PTR [rax],al
 100124c:	add    BYTE PTR [rax],al
 100124e:	add    BYTE PTR [rax],al
 1001250:	cmp    ch,dl
 1001252:	add    BYTE PTR [rax],al
 1001254:	add    BYTE PTR [rax],al
 1001256:	add    BYTE PTR [rax],al
 1001258:	adc    al,0xd6
 100125a:	add    BYTE PTR [rax],al
 100125c:	add    BYTE PTR [rax],al
 100125e:	add    BYTE PTR [rax],al
 1001260:	sbb    al,0xd6
 1001262:	add    BYTE PTR [rax],al
 1001264:	add    BYTE PTR [rax],al
 1001266:	add    BYTE PTR [rax],al
 1001268:	es (bad) 
 100126a:	add    BYTE PTR [rax],al
 100126c:	add    BYTE PTR [rax],al
 100126e:	add    BYTE PTR [rax],al
 1001270:	xor    al,0xd6
 1001272:	add    BYTE PTR [rax],al
 1001274:	add    BYTE PTR [rax],al
 1001276:	add    BYTE PTR [rax],al
 1001278:	rex (bad) 
 100127a:	add    BYTE PTR [rax],al
 100127c:	add    BYTE PTR [rax],al
 100127e:	add    BYTE PTR [rax],al
 1001280:	rex.WX (bad) 
 1001282:	add    BYTE PTR [rax],al
 1001284:	add    BYTE PTR [rax],al
 1001286:	add    BYTE PTR [rax],al
 1001288:	pop    rax
 1001289:	(bad)  
 100128a:	add    BYTE PTR [rax],al
 100128c:	add    BYTE PTR [rax],al
 100128e:	add    BYTE PTR [rax],al
 1001290:	push   0xffffffffffffffd6
 1001292:	add    BYTE PTR [rax],al
 1001294:	add    BYTE PTR [rax],al
 1001296:	add    BYTE PTR [rax],al
 1001298:	(bad)  
 1001299:	(bad)  
 100129a:	add    BYTE PTR [rax],al
 100129c:	add    BYTE PTR [rax],al
 100129e:	add    BYTE PTR [rax],al
 10012a0:	nop
 10012a1:	(bad)  
 10012a2:	add    BYTE PTR [rax],al
 10012a4:	add    BYTE PTR [rax],al
 10012a6:	add    BYTE PTR [rax],al
 10012a8:	cwde   
 10012a9:	(bad)  
 10012aa:	add    BYTE PTR [rax],al
 10012ac:	add    BYTE PTR [rax],al
 10012ae:	add    BYTE PTR [rax],al
 10012b0:	movabs ds:0xaa000000000000d6,al
 10012b9:	(bad)  
 10012ba:	add    BYTE PTR [rax],al
 10012bc:	add    BYTE PTR [rax],al
 10012be:	add    BYTE PTR [rax],al
 10012c0:	mov    eax,0xd6
 10012c5:	add    BYTE PTR [rax],al
 10012c7:	add    ah,al
 10012c9:	(bad)  
 10012ca:	add    BYTE PTR [rax],al
 10012cc:	add    BYTE PTR [rax],al
 10012ce:	add    BYTE PTR [rax],al
 10012d0:	rcl    dh,cl
 10012d2:	add    BYTE PTR [rax],al
 10012d4:	add    BYTE PTR [rax],al
 10012d6:	add    BYTE PTR [rax],al
 10012d8:	call   0x10013b3
 10012dd:	add    BYTE PTR [rax],al
 10012df:	add    ah,bh
 10012e1:	(bad)  
 10012e2:	add    BYTE PTR [rax],al
 10012e4:	add    BYTE PTR [rax],al
 10012e6:	add    BYTE PTR [rax],al
 10012e8:	or     bh,dl
 10012ea:	add    BYTE PTR [rax],al
 10012ec:	add    BYTE PTR [rax],al
 10012ee:	add    BYTE PTR [rax],al
 10012f0:	adc    dl,bh
 10012f2:	add    BYTE PTR [rax],al
 10012f4:	add    BYTE PTR [rax],al
 10012f6:	add    BYTE PTR [rax],al
 10012f8:	xor    dl,bh
 10012fa:	add    BYTE PTR [rax],al
 10012fc:	add    BYTE PTR [rax],al
 10012fe:	add    BYTE PTR [rax],al
 1001300:	rex.W xlat BYTE PTR ds:[rbx]
 1001302:	add    BYTE PTR [rax],al
 1001304:	add    BYTE PTR [rax],al
 1001306:	add    BYTE PTR [rax],al
 1001308:	pop    rsp
 1001309:	xlat   BYTE PTR ds:[rbx]
 100130a:	add    BYTE PTR [rax],al
 100130c:	add    BYTE PTR [rax],al
 100130e:	add    BYTE PTR [rax],al
 1001310:	data16 xlat BYTE PTR ds:[rbx]
 1001312:	add    BYTE PTR [rax],al
 1001314:	add    BYTE PTR [rax],al
 1001316:	add    BYTE PTR [rax],al
 1001318:	je     0x10012f1
 100131a:	add    BYTE PTR [rax],al
 100131c:	add    BYTE PTR [rax],al
 100131e:	add    BYTE PTR [rax],al
 1001320:	jl     0x10012f9
 1001322:	add    BYTE PTR [rax],al
 1001324:	add    BYTE PTR [rax],al
 1001326:	add    BYTE PTR [rax],al
 1001328:	je     0x10012fe
 100132a:	add    BYTE PTR [rax],al
 100132c:	add    BYTE PTR [rax],al
 100132e:	add    BYTE PTR [rax],al
 1001330:	jle    0x1001306
 1001332:	add    BYTE PTR [rax],al
 1001334:	add    BYTE PTR [rax],al
 1001336:	add    BYTE PTR [rax],al
 1001338:	mov    dl,ah
 100133a:	add    BYTE PTR [rax],al
 100133c:	add    BYTE PTR [rax],al
 100133e:	add    BYTE PTR [rax],al
 1001340:	xchg   esi,eax
 1001341:	(bad)  
 1001342:	add    BYTE PTR [rax],al
 1001344:	add    BYTE PTR [rax],al
 1001346:	add    BYTE PTR [rax],al
 1001348:	movabs ds:0xaa000000000000d4,al
 1001351:	(bad)  
 1001352:	add    BYTE PTR [rax],al
 1001354:	add    BYTE PTR [rax],al
 1001356:	add    BYTE PTR [rax],al
 1001358:	mov    ah,0xd4
 100135a:	add    BYTE PTR [rax],al
 100135c:	add    BYTE PTR [rax],al
 100135e:	add    BYTE PTR [rax],al
 1001360:	ret    0xd4
 1001363:	add    BYTE PTR [rax],al
 1001365:	add    BYTE PTR [rax],al
 1001367:	add    ah,cl
 1001369:	(bad)  
 100136a:	add    BYTE PTR [rax],al
 100136c:	add    BYTE PTR [rax],al
 100136e:	add    BYTE PTR [rax],al
 1001370:	(bad)  
 1001371:	(bad)  
 1001372:	add    BYTE PTR [rax],al
 1001374:	add    BYTE PTR [rax],al
 1001376:	add    BYTE PTR [rax],al
 1001378:	loop   0x100134e
 100137a:	add    BYTE PTR [rax],al
 100137c:	add    BYTE PTR [rax],al
 100137e:	add    BYTE PTR [rax],al
 1001380:	out    dx,al
 1001381:	(bad)  
 1001382:	add    BYTE PTR [rax],al
 1001384:	add    BYTE PTR [rax],al
 1001386:	add    BYTE PTR [rax],al
 1001388:	clc    
 1001389:	(bad)  
 100138a:	add    BYTE PTR [rax],al
 100138c:	add    BYTE PTR [rax],al
 100138e:	add    BYTE PTR [rax],al
 1001390:	add    al,0xd5
 1001392:	add    BYTE PTR [rax],al
 1001394:	add    BYTE PTR [rax],al
 1001396:	add    BYTE PTR [rax],al
 1001398:	(bad)  
 1001399:	(bad)  
 100139a:	add    BYTE PTR [rax],al
 100139c:	add    BYTE PTR [rax],al
 100139e:	add    BYTE PTR [rax],al
 10013a0:	sbb    ch,dl
 10013a2:	add    BYTE PTR [rax],al
 10013a4:	add    BYTE PTR [rax],al
 10013a6:	add    BYTE PTR [rax],al
 10013a8:	and    al,0xd5
 10013aa:	add    BYTE PTR [rax],al
 10013ac:	add    BYTE PTR [rax],al
 10013ae:	add    BYTE PTR [rax],al
 10013b0:	cs (bad) 
 10013b2:	add    BYTE PTR [rax],al
 10013b4:	add    BYTE PTR [rax],al
 10013b6:	add    BYTE PTR [rax],al
 10013b8:	or     dh,dl
	...
 10013c6:	add    BYTE PTR [rax],al
 10013c8:	mov    BYTE PTR [rax],al
 10013ca:	add    BYTE PTR [rax],al
 10013cc:	add    BYTE PTR [rax],al
 10013ce:	add    BYTE PTR [rax+0x8b],al
 10013d4:	add    BYTE PTR [rax],al
 10013d6:	add    BYTE PTR [rax+0x96],al
 10013dc:	add    BYTE PTR [rax],al
 10013de:	add    BYTE PTR [rax+0x8d],al
 10013e4:	add    BYTE PTR [rax],al
 10013e6:	add    BYTE PTR [rax+0x9b],al
 10013ec:	add    BYTE PTR [rax],al
 10013ee:	add    BYTE PTR [rax+0x8a],al
 10013f4:	add    BYTE PTR [rax],al
 10013f6:	add    BYTE PTR [rax+0xb0],al
 10013fc:	add    BYTE PTR [rax],al
 10013fe:	add    BYTE PTR [rax+0x84],al
 1001404:	add    BYTE PTR [rax],al
 1001406:	add    BYTE PTR [rax+0x6f],al
 100140c:	add    BYTE PTR [rax],al
 100140e:	add    BYTE PTR [rax+0x48],al
 1001414:	add    BYTE PTR [rax],al
 1001416:	add    BYTE PTR [rax+0x40],al
 100141c:	add    BYTE PTR [rax],al
 100141e:	add    BYTE PTR [rax+0x3d],al
 1001424:	add    BYTE PTR [rax],al
 1001426:	add    BYTE PTR [rax+0x4b],al
 100142c:	add    BYTE PTR [rax],al
 100142e:	add    BYTE PTR [rax+0x14],al
 1001434:	add    BYTE PTR [rax],al
 1001436:	add    BYTE PTR [rax+0x10],al
 100143c:	add    BYTE PTR [rax],al
 100143e:	add    BYTE PTR [rax+0x1f],al
 1001444:	add    BYTE PTR [rax],al
 1001446:	add    BYTE PTR [rax+0x9],al
 100144c:	add    BYTE PTR [rax],al
 100144e:	add    BYTE PTR [rax+0x18],al
 1001454:	add    BYTE PTR [rax],al
 1001456:	add    BYTE PTR [rax+0x6e],al
 100145c:	add    BYTE PTR [rax],al
 100145e:	add    BYTE PTR [rax+0x6c],al
 1001464:	add    BYTE PTR [rax],al
 1001466:	add    BYTE PTR [rax+0x7f],al
 100146c:	add    BYTE PTR [rax],al
 100146e:	add    BYTE PTR [rax+0x2b],al
 1001474:	add    BYTE PTR [rax],al
 1001476:	add    BYTE PTR [rax+0xd],al
 100147c:	add    BYTE PTR [rax],al
 100147e:	add    BYTE PTR [rax+0x5],al
 1001484:	add    BYTE PTR [rax],al
 1001486:	add    BYTE PTR [rax+0x87],al
 100148c:	add    BYTE PTR [rax],al
 100148e:	add    BYTE PTR [rax+0x0],al
 1001494:	add    BYTE PTR [rax],al
 1001496:	add    BYTE PTR [rax],al
 1001498:	xchg   bh,dl
 100149a:	add    BYTE PTR [rax],al
 100149c:	add    BYTE PTR [rax],al
 100149e:	add    BYTE PTR [rax],al
 10014a0:	xchg   esp,eax
 10014a1:	xlat   BYTE PTR ds:[rbx]
	...
 10014b6:	add    BYTE PTR [rax],al
 10014b8:	mov    ah,0xa3
 10014ba:	add    BYTE PTR [rcx],al
	...
 10014d0:	test   al,0xa5
 10014d2:	add    BYTE PTR [rcx],al
 10014d4:	add    BYTE PTR [rax],al
 10014d6:	add    BYTE PTR [rax],al
 10014d8:	push   0x100a9
	...
 10014f1:	add    BYTE PTR [rax],al
 10014f3:	add    bl,dh
 10014f5:	(bad)  
 10014f6:	xor    eax,0x4f
 10014fb:	add    BYTE PTR [rdx],al
 10014fd:	add    BYTE PTR [rax],al
 10014ff:	add    BYTE PTR [rcx],ah
 1001501:	add    BYTE PTR [rax],al
 1001503:	add    BYTE PTR [rax-0x5fffffe5],ah
 1001509:	sldt   WORD PTR [rax]
 100150c:	add    BYTE PTR [rax],al
 100150e:	add    BYTE PTR [rax],al
 1001510:	or     eax,0x9000a00
 1001515:	add    BYTE PTR [rax],al
 1001517:	add    BYTE PTR [rip+0xa00],cl        # 0x1001f1d
 100151d:	add    BYTE PTR [rax],al
 100151f:	add    BYTE PTR [rax],ah
 1001521:	add    BYTE PTR [rax],al
 1001523:	add    BYTE PTR [rax],dh
 1001525:	add    BYTE PTR [rax+0x0],bh
	...
 1001530:	rex.WRX add BYTE PTR [rbp+0x0],r10b
 1001534:	rex.WR add BYTE PTR [rax+rax*1+0x0],r9b
 1001539:	add    BYTE PTR [rax],al
 100153b:	add    BYTE PTR [rdi],ah
 100153d:	add    BYTE PTR [rax],al
 100153f:	add    BYTE PTR [rsi+0x0],cl
 1001542:	(bad)  
 1001543:	add    BYTE PTR [rax],al
 1001545:	add    BYTE PTR [rax],al
 1001547:	add    BYTE PTR [rip+0x0],ch        # 0x100154d
 100154d:	add    BYTE PTR [rax],al
 100154f:	add    BYTE PTR [rax+0x0],cl
 1001552:	pop    rcx
 1001553:	add    BYTE PTR [rax],dh
 1001555:	add    BYTE PTR [rcx],dh
 1001557:	add    BYTE PTR [rax],dh
 1001559:	add    BYTE PTR [rax],al
 100155b:	add    BYTE PTR [rax],al
 100155d:	add    BYTE PTR [rax],al
 100155f:	add    BYTE PTR [rax+rax*1+0x4b],bl
 1001563:	add    BYTE PTR [rbp+0x0],al
 1001566:	push   rdx
 1001567:	add    BYTE PTR [rsi+0x0],cl
 100156a:	add    BYTE PTR [r8+rax*1+0x33],r9b
 100156f:	add    BYTE PTR [rdx],dh
 1001571:	add    BYTE PTR [rsi],ch
 1001573:	add    BYTE PTR [rax+rax*1+0x4c],al
 1001577:	add    BYTE PTR [rax+rax*1+0x0],cl
 100157b:	add    BYTE PTR [rax],al
 100157d:	add    BYTE PTR [rax],al
 100157f:	add    BYTE PTR [rax+0x65],cl
 1001582:	(bad)  
 1001583:	jo     0x10015d8
 1001585:	gs je  0x10015d1
 1001588:	outs   dx,BYTE PTR ds:[rsi]
 1001589:	outs   dx,WORD PTR ds:[rsi]
 100158b:	jb     0x10015fa
 100158d:	(bad)  
 100158e:	je     0x10015f9
 1001590:	outs   dx,DWORD PTR ds:[rsi]
 1001591:	outs   dx,BYTE PTR ds:[rsi]
 1001592:	add    BYTE PTR [rax],al
 1001594:	and    eax,0x7300
 1001599:	add    BYTE PTR [rax],al
 100159b:	add    BYTE PTR [rdx],cl
 100159d:	add    BYTE PTR [rax],al
 100159f:	add    BYTE PTR [rdi+0x0],cl
 10015a2:	push   rbx
 10015a3:	add    BYTE PTR [rcx+0x0],dl
 10015a6:	rex.WR add BYTE PTR [rbx+0x0],r8b
 10015aa:	rex.WRB add BYTE PTR [r8+rax*1+0x0],r8b
 10015af:	add    BYTE PTR [rsi],ch
 10015b1:	add    BYTE PTR [rdi+0x0],cl
 10015b4:	rex.XB add BYTE PTR [r8+0x0],dl
 10015b8:	add    BYTE PTR [rax],al
 10015ba:	add    BYTE PTR [rax],al
 10015bc:	sub    eax,0x5500
 10015c1:	add    BYTE PTR [rax],al
 10015c3:	add    BYTE PTR [rip+0x4400],ch        # 0x10059c9
 10015c9:	add    BYTE PTR [rax],al
 10015cb:	add    BYTE PTR [rip+0x4800],ch        # 0x1005dd1
 10015d1:	add    BYTE PTR [rax],al
 10015d3:	add    BYTE PTR [rsi],ch
 10015d5:	add    BYTE PTR [rax],al
 10015d7:	add    BYTE PTR [rax],ch
 10015d9:	add    BYTE PTR [rax+rax*1+0x6f],ch
 10015dd:	add    BYTE PTR [rbx+0x0],ah
 10015e0:	(bad)  
 10015e1:	add    BYTE PTR [rax+rax*1+0x29],ch
 10015e5:	add    BYTE PTR [rax],al
 10015e7:	add    BYTE PTR [rip+0x6900],ch        # 0x1007eed
 10015ed:	add    BYTE PTR [rax],al
 10015ef:	add    BYTE PTR [rip+0x6f00],ch        # 0x10084f5
 10015f5:	add    BYTE PTR [rax],al
 10015f7:	add    BYTE PTR [rdi+0x0],ah
 10015fa:	outs   dx,DWORD PTR ds:[rsi]
 10015fb:	add    BYTE PTR [rax],al
 10015fd:	add    BYTE PTR [rax],al
 10015ff:	add    BYTE PTR [rbp+0x0],al
 1001602:	add    BYTE PTR [rcx+0x0],r9b
 1001606:	push   rsp
 1001607:	add    BYTE PTR [rdi+0x0],cl
 100160a:	push   rdx
 100160b:	add    BYTE PTR [rax],al
 100160d:	add    BYTE PTR [rax],al
 100160f:	add    BYTE PTR [rbp+0x0],al
 1001612:	add    BYTE PTR [rcx+0x0],r9b
 1001616:	push   rsp
 1001617:	add    BYTE PTR [rax],al
 1001619:	add    BYTE PTR [rax],al
 100161b:	add    BYTE PTR [rdi+0x0],dh
 100161e:	je     0x1001620
 1001620:	add    BYTE PTR [rax],al
 1001622:	add    BYTE PTR [rax],al
 1001624:	ja     0x1001626
 1001626:	(bad)  
	...
 100162f:	add    BYTE PTR [rax+rax*1+0x53],al
 1001633:	add    BYTE PTR [rsi+0x0],cl
 1001636:	cmp    eax,0x0
 100163b:	add    BYTE PTR [rax],al
 100163d:	add    BYTE PTR [rax],al
 100163f:	add    BYTE PTR [rax+rax*1+0x72],al
 1001643:	add    BYTE PTR [rcx+0x0],ch
 1001646:	jbe    0x1001648
 1001648:	add    BYTE PTR gs:[rdx+0x0],dh
 100164c:	cmp    eax,0x7b00
 1001651:	add    BYTE PTR [rax],al
 1001653:	add    BYTE PTR [rax],al
 1001655:	add    BYTE PTR [rax],al
 1001657:	add    BYTE PTR [rdi+0x0],dl
 100165a:	imul   eax,DWORD PTR [rax],0x64006e
 1001660:	outs   dx,DWORD PTR ds:[rsi]
 1001661:	add    BYTE PTR [rdi+0x0],dh
 1001664:	jae    0x1001666
 1001666:	and    BYTE PTR [rax],al
 1001668:	rex.WB add BYTE PTR [r14+0x0],bpl
 100166c:	je     0x100166e
 100166e:	add    BYTE PTR gs:[rdx+0x0],dh
 1001672:	outs   dx,BYTE PTR ds:[rsi]
 1001673:	add    BYTE PTR [rcx+0x0],ah
 1001676:	ins    BYTE PTR es:[rdi],dx
 1001677:	add    BYTE PTR [rax],ah
 1001679:	add    BYTE PTR [rax+rax*1+0x61],al
 100167d:	add    BYTE PTR [rax+rax*1+0x61],dh
 1001681:	add    BYTE PTR [rdx+0x0],ah
 1001684:	(bad)  
 1001685:	add    BYTE PTR [rbx+0x0],dh
 1001688:	add    BYTE PTR gs:[rax],al
 100168b:	add    BYTE PTR [rax],al
 100168d:	add    BYTE PTR [rax],al
 100168f:	add    BYTE PTR [rbx+0x0],dl
 1001692:	push   rcx
 1001693:	add    BYTE PTR [rax+rax*1+0x20],cl
 1001697:	add    BYTE PTR [rbx+0x0],dl
 100169a:	add    BYTE PTR gs:[rdx+0x0],dh
 100169e:	jbe    0x10016a0
 10016a0:	add    BYTE PTR gs:[rdx+0x0],dh
 10016a4:	and    BYTE PTR [rax],al
 10016a6:	rex.WRX add BYTE PTR [rcx+0x0],r12b
 10016aa:	je     0x10016ac
 10016ac:	imul   eax,DWORD PTR [rax],0x650076
 10016b2:	and    BYTE PTR [rax],al
 10016b4:	add    BYTE PTR [r8+r8*1+0x69],bpl
 10016b9:	add    BYTE PTR [rbp+0x0],ah
 10016bc:	outs   dx,BYTE PTR ds:[rsi]
 10016bd:	add    BYTE PTR [rax+rax*1+0x20],dh
 10016c1:	add    BYTE PTR [rcx],dh
 10016c3:	add    BYTE PTR [rcx],dh
 10016c5:	add    BYTE PTR [rsi],ch
 10016c7:	add    BYTE PTR [rax],dh
 10016c9:	add    BYTE PTR [rax],al
 10016cb:	add    BYTE PTR [rax],al
 10016cd:	add    BYTE PTR [rax],al
 10016cf:	add    BYTE PTR [rbp+0x0],bh
 10016d2:	cmp    eax,DWORD PTR [rax]
 10016d4:	push   rbx
 10016d5:	add    BYTE PTR [rbp+0x0],ah
 10016d8:	jb     0x10016da
 10016da:	jbe    0x10016dc
 10016dc:	add    BYTE PTR gs:[rdx+0x0],dh
 10016e0:	cmp    eax,0x0
 10016e5:	add    BYTE PTR [rax],al
 10016e7:	add    BYTE PTR [rbx],bh
 10016e9:	add    BYTE PTR [rax+rax*1+0x72],dl
 10016ed:	add    BYTE PTR [rbp+0x0],dh
 10016f0:	jae    0x10016f2
 10016f2:	je     0x10016f4
 10016f4:	add    BYTE PTR gs:[rax+rax*1+0x5f],ah
 10016f9:	add    BYTE PTR [rbx+0x0],al
 10016fc:	outs   dx,DWORD PTR ds:[rsi]
 10016fd:	add    BYTE PTR [rsi+0x0],ch
 1001700:	outs   dx,BYTE PTR ds:[rsi]
 1001701:	add    BYTE PTR [rbp+0x0],ah
 1001704:	movsxd eax,DWORD PTR [rax]
 1001706:	je     0x1001708
 1001708:	imul   eax,DWORD PTR [rax],0x6e006f
 100170e:	cmp    eax,0x45005900
 1001713:	add    BYTE PTR [rbx+0x0],dl
 1001716:	add    BYTE PTR [rax],al
 1001718:	cmp    eax,DWORD PTR [rax]
 100171a:	push   rbp
 100171b:	add    BYTE PTR [rcx+0x0],cl
 100171e:	add    BYTE PTR [rip+0x61000000],r15b        # 0x62001725
 1001725:	add    BYTE PTR [rax],al
 1001727:	add    BYTE PTR [rbx],bh
 1001729:	add    BYTE PTR [rax+0x0],dl
 100172c:	push   rdi
 100172d:	add    BYTE PTR [rax+rax*1+0x3d],al
 1001731:	add    BYTE PTR [rax],al
 1001733:	add    BYTE PTR [rbp+0x0],bh
 1001736:	add    BYTE PTR [rax],al
 1001738:	cmp    eax,DWORD PTR [rax]
 100173a:	add    BYTE PTR [r8+0x0],dl
 100173e:	push   rax
 100173f:	add    BYTE PTR [rip+0x53004f00],bh        # 0x54006645
 1001745:	add    BYTE PTR [rcx+0x0],dl
 1001748:	rex.WR add BYTE PTR [rip+0x32003300],r13b        # 0x33004a4f
 100174f:	add    BYTE PTR [rbx],bh
 1001751:	add    BYTE PTR [rdi+0x0],dl
 1001754:	push   rbx
 1001755:	add    BYTE PTR [rcx+0x0],cl
 1001758:	add    BYTE PTR [rip+0x0],r15b        # 0x100175f
 100175f:	add    BYTE PTR [rbx+0x0],al
 1001762:	rex.WRXB add BYTE PTR [r13+0x0],r9b
 1001766:	push   rax
 1001767:	add    BYTE PTR [rbp+0x0],dl
 100176a:	push   rsp
 100176b:	add    BYTE PTR [rbp+0x0],al
 100176e:	push   rdx
 100176f:	add    BYTE PTR [rsi+0x0],cl
 1001772:	add    BYTE PTR [r13+0x0],cl
 1001776:	add    BYTE PTR [r8],r8b
 1001779:	add    BYTE PTR [rax],al
 100177b:	add    BYTE PTR [rax],al
 100177d:	add    BYTE PTR [rax],al
 100177f:	add    BYTE PTR [rdi+0x0],dl
 1001782:	imul   eax,DWORD PTR [rax],0x33006e
 1001788:	xor    al,BYTE PTR [rax]
 100178a:	and    BYTE PTR [rax],al
 100178c:	push   rax
 100178d:	add    BYTE PTR [rbx+0x0],al
 1001790:	and    BYTE PTR [rax],al
 1001792:	add    BYTE PTR [r8+r8*1+0x69],bpl
 1001797:	add    BYTE PTR [rbp+0x0],ah
 100179a:	outs   dx,BYTE PTR ds:[rsi]
 100179b:	add    BYTE PTR [rax+rax*1+0x0],dh
 100179f:	add    BYTE PTR [rbx],bh
 10017a1:	add    BYTE PTR [rax+rax*1+0x41],al
 10017a5:	add    BYTE PTR [rax+rax*1+0x41],dl
 10017a9:	add    BYTE PTR [rdx+0x0],al
 10017ac:	add    BYTE PTR [r11+0x0],dl
 10017b0:	add    BYTE PTR [rip+0x0],r15b        # 0x10017b7
 10017b7:	add    BYTE PTR [rbx],bh
 10017b9:	add    BYTE PTR [rax],al
 10017bb:	add    BYTE PTR [rax],al
 10017bd:	add    BYTE PTR [rax],al
 10017bf:	add    BYTE PTR [rbx+0x0],bh
 10017c2:	(bad)  
 10017c3:	add    BYTE PTR [rax],ah
 10017c5:	add    BYTE PTR [rip+0x63002000],bh        # 0x640037cb
 10017cb:	add    BYTE PTR [rcx+0x0],ah
 10017ce:	ins    BYTE PTR es:[rdi],dx
 10017cf:	add    BYTE PTR [rax+rax*1+0x20],ch
 10017d3:	add    BYTE PTR [rbp+0x0],ch
 10017d6:	(bad)  
 10017d7:	add    BYTE PTR [rbx+0x0],dh
 10017da:	je     0x10017dc
 10017dc:	add    BYTE PTR gs:[rdx+0x0],dh
 10017e0:	add    BYTE PTR cs:[rax+rax*1+0x62],ah
 10017e5:	add    BYTE PTR [rdi+0x0],ch
 10017e8:	add    BYTE PTR cs:[rbx+0x0],dh
 10017ec:	jo     0x10017ee
 10017ee:	pop    rdi
 10017ef:	add    BYTE PTR [rdx+0x0],ah
 10017f2:	imul   eax,DWORD PTR [rax],0x64006e
 10017f8:	jae    0x10017fa
 10017fa:	add    BYTE PTR gs:[rbx+0x0],dh
 10017fe:	jae    0x1001800
 1001800:	imul   eax,DWORD PTR [rax],0x6e006f
 1001806:	sub    BYTE PTR [rax],al
 1001808:	(bad)  
 1001809:	add    BYTE PTR [rcx],ch
 100180b:	add    BYTE PTR [rbp+0x0],bh
 100180e:	add    BYTE PTR [rax],al
 1001810:	jno    0x1001812
 1001812:	jne    0x1001814
 1001814:	imul   eax,DWORD PTR [rax],0x74
 100181a:	add    BYTE PTR [rax],al
 100181c:	add    BYTE PTR [rax],al
 100181e:	add    BYTE PTR [rax],al
 1001820:	and    eax,0x3e006400
 1001825:	add    BYTE PTR [rax],ah
	...
 100182f:	add    BYTE PTR [rbp+0x0],ah
 1001832:	js     0x1001834
 1001834:	imul   eax,DWORD PTR [rax],0x74
 100183a:	add    BYTE PTR [rax],al
 100183c:	and    DWORD PTR [rax],eax
 100183e:	and    DWORD PTR [rax],eax
 1001840:	add    BYTE PTR [rax],al
 1001842:	add    BYTE PTR [rax],al
 1001844:	add    BYTE PTR gs:[rax+rax*1+0x0],ah
 1001849:	add    BYTE PTR [rax],al
 100184b:	add    BYTE PTR [rdx],bh
 100184d:	add    BYTE PTR [rdx+0x0],dh
	...
 1001858:	jb     0x100185a
 100185a:	add    BYTE PTR gs:[rbx+0x0],dh
 100185e:	add    BYTE PTR gs:[rax+rax*1+0x0],dh
 1001863:	add    BYTE PTR [rdx+0x0],dh
 1001866:	(bad)  
	...
 100186f:	add    BYTE PTR [rax+rax*1+0x72],al
 1001873:	add    BYTE PTR [rcx+0x0],ch
 1001876:	jbe    0x1001878
 1001878:	add    BYTE PTR gs:[rdx+0x0],dh
 100187c:	cmp    eax,0x53007b00
 1001881:	add    BYTE PTR [rcx+0x0],dl
 1001884:	rex.WR add BYTE PTR [rax],r12b
 1001887:	add    BYTE PTR [rbx+0x0],dl
 100188a:	add    BYTE PTR gs:[rdx+0x0],dh
 100188e:	jbe    0x1001890
 1001890:	add    BYTE PTR gs:[rdx+0x0],dh
 1001894:	and    BYTE PTR [rax],al
 1001896:	rex.WRX add BYTE PTR [rcx+0x0],r12b
 100189a:	je     0x100189c
 100189c:	imul   eax,DWORD PTR [rax],0x650076
 10018a2:	and    BYTE PTR [rax],al
 10018a4:	add    BYTE PTR [r8+r8*1+0x69],bpl
 10018a9:	add    BYTE PTR [rbp+0x0],ah
 10018ac:	outs   dx,BYTE PTR ds:[rsi]
 10018ad:	add    BYTE PTR [rax+rax*1+0x20],dh
 10018b1:	add    BYTE PTR [rcx],dh
 10018b3:	add    BYTE PTR [rcx],dh
 10018b5:	add    BYTE PTR [rsi],ch
 10018b7:	add    BYTE PTR [rax],dh
 10018b9:	add    BYTE PTR [rbp+0x0],bh
 10018bc:	add    BYTE PTR [rax],al
 10018be:	add    BYTE PTR [rax],al
 10018c0:	and    BYTE PTR [rax],al
 10018c2:	and    BYTE PTR [rax],al
 10018c4:	and    BYTE PTR [rax],al
 10018c6:	and    BYTE PTR [rax],al
 10018c8:	and    eax,0xa007300
 10018cd:	add    BYTE PTR [rax],al
 10018cf:	add    BYTE PTR [rbx+0x0],bl
 10018d2:	push   rbx
 10018d3:	add    BYTE PTR [rcx+0x0],dl
 10018d6:	rex.WR add BYTE PTR [rax],r12b
 10018d9:	add    BYTE PTR [rbx+0x0],dl
 10018dc:	add    BYTE PTR gs:[rdx+0x0],dh
 10018e0:	jbe    0x10018e2
 10018e2:	add    BYTE PTR gs:[rdx+0x0],dh
 10018e6:	pop    rbp
	...
 10018ef:	add    BYTE PTR [rbx+0x0],bl
 10018f2:	rex.WRXB add BYTE PTR [r8+r8*1+0x42],r8b
 10018f7:	add    BYTE PTR [rbx+0x0],al
 10018fa:	and    BYTE PTR [rax],al
 10018fc:	push   rbx
 10018fd:	add    BYTE PTR [rcx+0x0],dl
 1001900:	rex.WR add BYTE PTR [rax],r12b
 1001903:	add    BYTE PTR [rbx+0x0],dl
 1001906:	add    BYTE PTR gs:[rdx+0x0],dh
 100190a:	jbe    0x100190c
 100190c:	add    BYTE PTR gs:[rdx+0x0],dh
 1001910:	and    BYTE PTR [rax],al
 1001912:	add    BYTE PTR [rdx+0x0],r14b
 1001916:	imul   eax,DWORD PTR [rax],0x650076
 100191c:	jb     0x100191e
 100191e:	pop    rbp
	...
 1001927:	add    BYTE PTR [rbx+0x0],bl
 100192a:	rex.WRB add BYTE PTR [r9+0x0],r13b
 100192e:	movsxd eax,DWORD PTR [rax]
 1001930:	jb     0x1001932
 1001932:	outs   dx,DWORD PTR ds:[rsi]
 1001933:	add    BYTE PTR [rbx+0x0],dh
 1001936:	outs   dx,DWORD PTR ds:[rsi]
 1001937:	add    BYTE PTR [rsi+0x0],ah
 100193a:	je     0x100193c
 100193c:	pop    rbp
 100193d:	add    BYTE PTR [rax],al
 100193f:	add    BYTE PTR [rcx],dh
 1001941:	add    BYTE PTR [rcx],dh
 1001943:	add    BYTE PTR [rsi],ch
 1001945:	add    BYTE PTR [rax],dh
	...
 100194f:	add    BYTE PTR [rsi+0x0],cl
 1001952:	push   rsp
 1001953:	add    BYTE PTR [rax],ah
 1001955:	add    BYTE PTR [rax+0x0],bh
 1001958:	add    BYTE PTR ss:[rax+rax*1],dh
 100195c:	add    BYTE PTR [rax],al
 100195e:	add    BYTE PTR [rax],al
 1001960:	push   rbx
 1001961:	add    BYTE PTR [rcx+0x0],dl
 1001964:	rex.WR add BYTE PTR [rax],r12b
 1001967:	add    BYTE PTR [rbx+0x0],dl
 100196a:	add    BYTE PTR gs:[rdx+0x0],dh
 100196e:	jbe    0x1001970
 1001970:	add    BYTE PTR gs:[rdx+0x0],dh
 1001974:	and    BYTE PTR [rax],al
 1001976:	xor    al,BYTE PTR [rax]
 1001978:	xor    BYTE PTR [rax],al
 100197a:	xor    DWORD PTR [rax],eax
 100197c:	xor    al,BYTE PTR [rax]
 100197e:	add    BYTE PTR [rax],al
 1001980:	rex.WRXB add BYTE PTR [r11+0x0],r10b
 1001984:	push   rcx
 1001985:	add    BYTE PTR [rax+rax*1+0x55],cl
 1001989:	add    BYTE PTR [rbx+0x0],dl
 100198c:	add    BYTE PTR [r10+0x0],r10b
	...
 1001998:	rex.WRXB add BYTE PTR [r11+0x0],r10b
 100199c:	push   rcx
 100199d:	add    BYTE PTR [rax+rax*1+0x50],cl
 10019a1:	add    BYTE PTR [rcx+0x0],al
 10019a4:	push   rbx
 10019a5:	add    BYTE PTR [rbx+0x0],dl
 10019a8:	push   rdi
 10019a9:	add    BYTE PTR [rdi+0x0],cl
 10019ac:	push   rdx
 10019ad:	add    BYTE PTR [rax+rax*1+0x0],al
 10019b1:	add    BYTE PTR [rax],al
 10019b3:	add    BYTE PTR [rax],al
 10019b5:	add    BYTE PTR [rax],al
 10019b7:	add    BYTE PTR [rdi+0x0],cl
 10019ba:	push   rbx
 10019bb:	add    BYTE PTR [rcx+0x0],dl
 10019be:	rex.WR add BYTE PTR [rbx+0x0],r10b
 10019c2:	add    BYTE PTR [r10+0x0],r10b
 10019c6:	push   rsi
 10019c7:	add    BYTE PTR [rbp+0x0],al
 10019ca:	push   rdx
 10019cb:	add    BYTE PTR [rax],al
 10019cd:	add    BYTE PTR [rax],al
 10019cf:	add    BYTE PTR [rax],ah
 10019d1:	add    BYTE PTR [rcx],cl
 10019d3:	add    BYTE PTR [rax],al
 10019d5:	add    BYTE PTR [rax],al
 10019d7:	add    BYTE PTR [rax],ah
 10019d9:	add    BYTE PTR [rcx],cl
 10019db:	add    BYTE PTR [rip+0xa00],cl        # 0x10023e1
	...
 10019ed:	add    BYTE PTR [rax],al
 10019ef:	add    BYTE PTR [rbx+0x0],bh
 10019f2:	(bad)  
 10019f3:	add    BYTE PTR [rax],ah
 10019f5:	add    BYTE PTR [rip+0x63002000],bh        # 0x640039fb
 10019fb:	add    BYTE PTR [rcx+0x0],ah
 10019fe:	ins    BYTE PTR es:[rdi],dx
 10019ff:	add    BYTE PTR [rax+rax*1+0x20],ch
 1001a03:	add    BYTE PTR [rbp+0x0],ch
 1001a06:	(bad)  
 1001a07:	add    BYTE PTR [rbx+0x0],dh
 1001a0a:	je     0x1001a0c
 1001a0c:	add    BYTE PTR gs:[rdx+0x0],dh
 1001a10:	add    BYTE PTR cs:[rax+rax*1+0x62],ah
 1001a15:	add    BYTE PTR [rdi+0x0],ch
 1001a18:	add    BYTE PTR cs:[rbx+0x0],dh
 1001a1c:	jo     0x1001a1e
 1001a1e:	pop    rdi
 1001a1f:	add    BYTE PTR [rdx+0x0],ah
 1001a22:	imul   eax,DWORD PTR [rax],0x64006e
 1001a28:	jae    0x1001a2a
 1001a2a:	add    BYTE PTR gs:[rbx+0x0],dh
 1001a2e:	jae    0x1001a30
 1001a30:	imul   eax,DWORD PTR [rax],0x6e006f
 1001a36:	sub    BYTE PTR [rax],al
 1001a38:	rex.WRX add BYTE PTR [rbp+0x0],r10b
 1001a3c:	rex.WR add BYTE PTR [rax+rax*1+0x29],r9b
 1001a41:	add    BYTE PTR [rbp+0x0],bh
 1001a44:	add    BYTE PTR [rax],al
 1001a46:	add    BYTE PTR [rax],al
 1001a48:	push   rbx
 1001a49:	add    BYTE PTR [rcx+0x0],dl
 1001a4c:	rex.WR add BYTE PTR [rdi+0x0],r8b
 1001a50:	add    BYTE PTR gs:[rax+rax*1+0x44],dh
 1001a55:	add    BYTE PTR [rcx+0x0],ch
 1001a58:	(bad)  
 1001a59:	add    BYTE PTR [rdi+0x0],ah
 1001a5c:	rex.RX add BYTE PTR [rcx+0x0],r13b
 1001a60:	add    BYTE PTR gs:[rax+rax*1+0x64],ch
 1001a65:	add    BYTE PTR [rax],ah
 1001a67:	add    BYTE PTR [rsi+0x0],ah
 1001a6a:	(bad)  
 1001a6b:	add    BYTE PTR [rcx+0x0],ch
 1001a6e:	ins    BYTE PTR es:[rdi],dx
 1001a6f:	add    BYTE PTR [rbp+0x0],ah
 1001a72:	add    BYTE PTR fs:[rip+0xa00],cl        # 0x1002479
 1001a79:	add    BYTE PTR [rax],al
 1001a7b:	add    BYTE PTR [rax],al
 1001a7d:	add    BYTE PTR [rax],al
 1001a7f:	add    BYTE PTR [rbx+0x0],dl
 1001a82:	push   rcx
 1001a83:	add    BYTE PTR [rax+rax*1+0x47],cl
 1001a87:	add    BYTE PTR [rbp+0x0],ah
 1001a8a:	je     0x1001a8c
 1001a8c:	add    BYTE PTR [rcx+0x0],r13b
 1001a90:	(bad)  
 1001a91:	add    BYTE PTR [rdi+0x0],ah
 1001a94:	push   rdx
 1001a95:	add    BYTE PTR [rbp+0x0],ah
 1001a98:	movsxd eax,DWORD PTR [rax]
 1001a9a:	and    BYTE PTR [rax],al
 1001a9c:	data16 add BYTE PTR [rcx+0x0],ah
 1001aa0:	imul   eax,DWORD PTR [rax],0x65006c
 1001aa6:	add    BYTE PTR fs:[rip+0xa00],cl        # 0x10024ad
 1001aad:	add    BYTE PTR [rax],al
 1001aaf:	add    BYTE PTR [rax],al
 1001ab1:	add    BYTE PTR [rdx+0x44],bh
 1001ab4:	add    BYTE PTR [rax],al
 1001ab6:	add    BYTE PTR [rax],al
 1001ab8:	lock loop 0x1001abb
 1001abb:	add    DWORD PTR [rax],eax
 1001abd:	add    BYTE PTR [rax],al
 1001abf:	add    BYTE PTR [rax+0x100e3],dl
 1001ac5:	add    BYTE PTR [rax],al
 1001ac7:	add    BYTE PTR [rcx+0x0],al
 1001aca:	add    BYTE PTR fs:[rsi+0x0],dh
 1001ace:	(bad)  
 1001acf:	add    BYTE PTR [rax+0x0],dh
 1001ad2:	imul   eax,DWORD PTR [rax],0x320033
 1001ad8:	add    BYTE PTR cs:[rax+rax*1+0x6c],ah
 1001add:	add    BYTE PTR [rax+rax*1+0x0],ch
 1001ae1:	add    BYTE PTR [rax],al
 1001ae3:	add    BYTE PTR [rax],al
 1001ae5:	add    BYTE PTR [rax],al
 1001ae7:	add    BYTE PTR [rbx+0x79],dl
 1001aea:	jae    0x1001b60
 1001aec:	gs ins DWORD PTR es:[rdi],dx
 1001aee:	rex.RX jne 0x1001b5f
 1001af1:	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
 1001af5:	outs   dx,BYTE PTR ds:[rsi]
 1001af6:	xor    BYTE PTR [rax+rsi*1],dh
 1001af9:	add    BYTE PTR [rax],al
 1001afb:	add    BYTE PTR [rax],al
 1001afd:	add    BYTE PTR [rax],al
 1001aff:	add    BYTE PTR [rbx+0x79],dl
 1001b02:	jae    0x1001b78
 1001b04:	gs ins DWORD PTR es:[rdi],dx
 1001b06:	rex.RX jne 0x1001b77
 1001b09:	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
 1001b0d:	outs   dx,BYTE PTR ds:[rsi]
 1001b0e:	xor    BYTE PTR [rcx+rsi*1],dh
 1001b11:	add    BYTE PTR [rax],al
 1001b13:	add    BYTE PTR [rax],al
 1001b15:	add    BYTE PTR [rax],al
 1001b17:	add    BYTE PTR [rsi+0x0],al
 1001b1a:	(bad)  
 1001b1b:	add    BYTE PTR [rcx+0x0],ch
 1001b1e:	ins    BYTE PTR es:[rdi],dx
 1001b1f:	add    BYTE PTR [rbp+0x0],ah
 1001b22:	add    BYTE PTR fs:[rax],ah
 1001b25:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1001b29:	add    BYTE PTR [rax],ah
 1001b2b:	add    BYTE PTR [rax+rax*1+0x6f],ch
 1001b2f:	add    BYTE PTR [rcx+0x0],ah
 1001b32:	add    BYTE PTR fs:[rax],ah
 1001b35:	add    BYTE PTR [rdx+0x0],dh
 1001b38:	add    BYTE PTR gs:[rbx+0x0],dh
 1001b3c:	outs   dx,DWORD PTR ds:[rsi]
 1001b3d:	add    BYTE PTR [rbp+0x0],dh
 1001b40:	jb     0x1001b42
 1001b42:	movsxd eax,DWORD PTR [rax]
 1001b44:	add    BYTE PTR gs:[rax],ah
 1001b47:	add    BYTE PTR [rsi+0x0],ah
 1001b4a:	imul   eax,DWORD PTR [rax],0x65006c
 1001b50:	and    BYTE PTR [rax],al
 1001b52:	add    BYTE PTR [rax],al
 1001b54:	add    BYTE PTR [rax],al
 1001b56:	add    BYTE PTR [rax],al
 1001b58:	add    BYTE PTR cs:[rdx+0x0],dh
 1001b5c:	ins    BYTE PTR es:[rdi],dx
 1001b5d:	add    BYTE PTR [rax+rax*1+0x0],ch
 1001b61:	add    BYTE PTR [rax],al
 1001b63:	add    BYTE PTR [rsi],ch
 1001b65:	add    BYTE PTR [rax],ah
	...
 1001b6f:	add    BYTE PTR [rdx+0x0],dh
 1001b72:	add    BYTE PTR gs:[rbx+0x0],dh
 1001b76:	outs   dx,DWORD PTR ds:[rsi]
 1001b77:	add    BYTE PTR [rbp+0x0],dh
 1001b7a:	jb     0x1001b7c
 1001b7c:	movsxd eax,DWORD PTR [rax]
 1001b7e:	add    BYTE PTR gs:[rbx+0x0],dh
 1001b82:	add    BYTE PTR [rax],al
 1001b84:	add    BYTE PTR [rax],al
 1001b86:	add    BYTE PTR [rax],al
 1001b88:	push   rdx
 1001b89:	add    BYTE PTR [rbp+0x0],ah
 1001b8c:	jae    0x1001b8e
 1001b8e:	outs   dx,DWORD PTR ds:[rsi]
 1001b8f:	add    BYTE PTR [rbp+0x0],dh
 1001b92:	jb     0x1001b94
 1001b94:	movsxd eax,DWORD PTR [rax]
 1001b96:	add    BYTE PTR gs:[rbx+0x0],dh
 1001b9a:	add    BYTE PTR [rax],al
 1001b9c:	pop    rsp
 1001b9d:	add    BYTE PTR [rax],al
 1001b9f:	add    BYTE PTR [rdx+0x53],dl
 1001ba2:	rex.R push rbx
 1001ba4:	(bad)  
 1001ba5:	add    DWORD PTR [rcx+rbp*8],edx
 1001ba8:	retf   
 1001ba9:	push   rbp
 1001baa:	(bad)  
 1001bab:	rex.WX movs BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1001bad:	mov    esp,0xd0b4c726
 1001bb2:	mov    ebp,0x124
 1001bb7:	add    BYTE PTR [rdi+0x53],cl
 1001bba:	push   rcx
 1001bbb:	rex.WR
 1001bbc:	cs jo  0x1001c23
 1001bbf:	(bad)  
	...
 1001c40:	mov    r11,rsp
 1001c43:	push   rbx
 1001c44:	push   r12
 1001c46:	push   r15
 1001c48:	sub    rsp,0x190
 1001c4f:	mov    rax,QWORD PTR [rip+0xc4da]        # 0x100e130
 1001c56:	xor    rax,rsp
 1001c59:	mov    QWORD PTR [rsp+0x160],rax
 1001c61:	mov    QWORD PTR [r11+0x18],rbp
 1001c65:	mov    QWORD PTR [r11-0x20],rsi
 1001c69:	mov    QWORD PTR [r11-0x28],rdi
 1001c6d:	lea    rax,[rsp+0x48]
 1001c72:	xor    r15d,r15d
 1001c75:	mov    rdi,rdx
 1001c78:	mov    QWORD PTR [rsp+0x30],rax
 1001c7d:	mov    r8d,0x3e9
 1001c83:	xor    r9d,r9d
 1001c86:	xor    edx,edx
 1001c88:	mov    QWORD PTR [rsp+0x28],r15
 1001c8d:	mov    QWORD PTR [r11-0x38],r14
 1001c91:	mov    WORD PTR [rsp+0x20],r15w
 1001c97:	mov    rbp,rcx
 1001c9a:	mov    QWORD PTR [rsp+0x58],rcx
 1001c9f:	call   0x100ad32
 1001ca4:	movzx  eax,WORD PTR [rip+0xc45d]        # 0x100e108
 1001cab:	mov    r12d,0x1
 1001cb1:	cmp    WORD PTR [rip+0xc44c],ax        # 0x100e104
 1001cb8:	movzx  r14d,r12w
 1001cbc:	lea    rcx,[rip+0xc441]        # 0x100e104
 1001cc3:	jne    0x1001cca
 1001cc5:	call   0x1002b60
 1001cca:	mov    esi,r12d
 1001ccd:	mov    DWORD PTR [rsp+0x40],r12d
 1001cd2:	lea    rbx,[rip+0xc507]        # 0x100e1e0
 1001cd9:	cmp    QWORD PTR [rsp+0x48],rsi
 1001cde:	jl     0x10020d4
 1001ce4:	mov    rbx,r12
 1001ce7:	mov    QWORD PTR [rsp+0x178],r13
 1001cef:	mov    QWORD PTR [rsp+0x50],rbx
 1001cf4:	mov    edx,esi
 1001cf6:	mov    rcx,rbp
 1001cf9:	call   0x1002850
 1001cfe:	mov    edx,DWORD PTR [rip+0xc3fc]        # 0x100e100
 1001d04:	movsx  ecx,r14w
 1001d08:	movsx  r13d,ax
 1001d0c:	add    ecx,r13d
 1001d0f:	mov    r12d,r13d
 1001d12:	cmp    ecx,edx
 1001d14:	jle    0x1001d35
 1001d16:	cmp    r14w,0x8
 1001d1b:	jl     0x1001d35
 1001d1d:	lea    rcx,[rip+0xfffffffffffff7ec]        # 0x1001510
 1001d24:	call   0x1002b60
 1001d29:	mov    edx,DWORD PTR [rip+0xc3d1]        # 0x100e100
 1001d2f:	mov    r14d,0x8
 1001d35:	test   r12d,r12d
 1001d38:	jle    0x1001f78
 1001d3e:	xchg   ax,ax
 1001d40:	movsx  eax,r15w
 1001d44:	mov    esi,r12d
 1001d47:	movsx  ebp,r14w
 1001d4b:	sub    esi,eax
 1001d4d:	lea    eax,[rsi+rbp*1]
 1001d50:	cmp    eax,edx
 1001d52:	jg     0x1001e0c
 1001d58:	xor    ebp,ebp
 1001d5a:	movzx  ebx,bp
 1001d5d:	test   esi,esi
 1001d5f:	jle    0x1001df7
 1001d65:	lea    r12,[rip+0xc474]        # 0x100e1e0
 1001d6c:	nop    DWORD PTR [rax+0x0]
 1001d70:	call   QWORD PTR [rip+0xfffffffffffff5e2]        # 0x1001358
 1001d76:	lea    rcx,[rax+0x60]
 1001d7a:	call   QWORD PTR [rip+0xfffffffffffff5e0]        # 0x1001360
 1001d80:	call   QWORD PTR [rip+0xfffffffffffff5d2]        # 0x1001358
 1001d86:	lea    rcx,[rax+0x30]
 1001d8a:	call   QWORD PTR [rip+0xfffffffffffff5d0]        # 0x1001360
 1001d90:	call   0x1006050
 1001d95:	test   eax,eax
 1001d97:	je     0x1001dc7
 1001d99:	or     rax,0xffffffffffffffff
 1001d9d:	nop    DWORD PTR [rax]
 1001da0:	inc    rax
 1001da3:	cmp    WORD PTR [rdi+rax*2],bp
 1001da7:	jne    0x1001da0
 1001da9:	mov    rcx,QWORD PTR [rip+0xd948]        # 0x100f6f8
 1001db0:	lea    r8d,[rax+rax*1]
 1001db4:	mov    r9,r12
 1001db7:	mov    rdx,rdi
 1001dba:	mov    QWORD PTR [rsp+0x20],rbp
 1001dbf:	call   QWORD PTR [rip+0xfffffffffffff3d3]        # 0x1001198
 1001dc5:	jmp    0x1001de3
 1001dc7:	mov    r9,QWORD PTR [rip+0xd92a]        # 0x100f6f8
 1001dce:	or     r8d,0xffffffff
 1001dd2:	mov    rdx,rdi
 1001dd5:	lea    ecx,[r8+0x2]
 1001dd9:	mov    QWORD PTR [rsp+0x20],r12
 1001dde:	call   0x1002c00
 1001de3:	inc    bx
 1001de6:	movsx  eax,bx
 1001de9:	cmp    eax,esi
 1001deb:	jl     0x1001d70
 1001ded:	mov    edx,DWORD PTR [rip+0xc30d]        # 0x100e100
 1001df3:	movsx  r12d,r13w
 1001df7:	movzx  eax,r13w
 1001dfb:	sub    ax,r15w
 1001dff:	movzx  r15d,r13w
 1001e03:	add    r14w,ax
 1001e07:	jmp    0x1001f59
 1001e0c:	xor    esi,esi
 1001e0e:	mov    eax,edx
 1001e10:	sub    eax,ebp
 1001e12:	movzx  ebx,si
 1001e15:	test   eax,eax
 1001e17:	jle    0x1001eb0
 1001e1d:	lea    r12,[rip+0xc3bc]        # 0x100e1e0
 1001e24:	call   QWORD PTR [rip+0xfffffffffffff52e]        # 0x1001358
 1001e2a:	lea    rcx,[rax+0x60]
 1001e2e:	call   QWORD PTR [rip+0xfffffffffffff52c]        # 0x1001360
 1001e34:	call   QWORD PTR [rip+0xfffffffffffff51e]        # 0x1001358
 1001e3a:	lea    rcx,[rax+0x30]
 1001e3e:	call   QWORD PTR [rip+0xfffffffffffff51c]        # 0x1001360
 1001e44:	call   0x1006050
 1001e49:	test   eax,eax
 1001e4b:	je     0x1001e78
 1001e4d:	or     rax,0xffffffffffffffff
 1001e51:	inc    rax
 1001e54:	cmp    WORD PTR [rdi+rax*2],si
 1001e58:	jne    0x1001e51
 1001e5a:	mov    rcx,QWORD PTR [rip+0xd897]        # 0x100f6f8
 1001e61:	lea    r8d,[rax+rax*1]
 1001e65:	mov    r9,r12
 1001e68:	mov    rdx,rdi
 1001e6b:	mov    QWORD PTR [rsp+0x20],rsi
 1001e70:	call   QWORD PTR [rip+0xfffffffffffff322]        # 0x1001198
 1001e76:	jmp    0x1001e94
 1001e78:	mov    r9,QWORD PTR [rip+0xd879]        # 0x100f6f8
 1001e7f:	or     r8d,0xffffffff
 1001e83:	mov    rdx,rdi
 1001e86:	lea    ecx,[r8+0x2]
 1001e8a:	mov    QWORD PTR [rsp+0x20],r12
 1001e8f:	call   0x1002c00
 1001e94:	mov    edx,DWORD PTR [rip+0xc266]        # 0x100e100
 1001e9a:	inc    bx
 1001e9d:	mov    ecx,edx
 1001e9f:	movsx  eax,bx
 1001ea2:	sub    ecx,ebp
 1001ea4:	cmp    eax,ecx
 1001ea6:	jl     0x1001e24
 1001eac:	movsx  r12d,r13w
 1001eb0:	sub    dx,r14w
 1001eb4:	mov    r14d,0x8
 1001eba:	add    r15w,dx
 1001ebe:	call   QWORD PTR [rip+0xfffffffffffff494]        # 0x1001358
 1001ec4:	lea    rcx,[rax+0x60]
 1001ec8:	call   QWORD PTR [rip+0xfffffffffffff492]        # 0x1001360
 1001ece:	call   QWORD PTR [rip+0xfffffffffffff484]        # 0x1001358
 1001ed4:	lea    rcx,[rax+0x30]
 1001ed8:	call   QWORD PTR [rip+0xfffffffffffff482]        # 0x1001360
 1001ede:	call   0x1006050
 1001ee3:	test   eax,eax
 1001ee5:	je     0x1001efb
 1001ee7:	mov    rcx,QWORD PTR [rip+0xd80a]        # 0x100f6f8
 1001eee:	lea    r8d,[r14-0x2]
 1001ef2:	lea    rdx,[rip+0xfffffffffffff617]        # 0x1001510
 1001ef9:	jmp    0x1001f41
 1001efb:	mov    rbx,QWORD PTR [rip+0xd7f6]        # 0x100f6f8
 1001f02:	mov    QWORD PTR [rsp+0x38],rsi
 1001f07:	xor    edx,edx
 1001f09:	lea    rax,[rsp+0x60]
 1001f0e:	mov    QWORD PTR [rsp+0x30],rsi
 1001f13:	lea    r8,[rip+0xfffffffffffff5f6]        # 0x1001510
 1001f1a:	lea    ecx,[rdx+0x1]
 1001f1d:	mov    r9d,0x3
 1001f23:	mov    DWORD PTR [rsp+0x28],0x100
 1001f2b:	mov    QWORD PTR [rsp+0x20],rax
 1001f30:	call   QWORD PTR [rip+0xfffffffffffff0da]        # 0x1001010
 1001f36:	lea    rdx,[rsp+0x60]
 1001f3b:	mov    r8d,eax
 1001f3e:	mov    rcx,rbx
 1001f41:	lea    r9,[rip+0xc298]        # 0x100e1e0
 1001f48:	mov    QWORD PTR [rsp+0x20],rsi
 1001f4d:	call   QWORD PTR [rip+0xfffffffffffff245]        # 0x1001198
 1001f53:	mov    edx,DWORD PTR [rip+0xc1a7]        # 0x100e100
 1001f59:	movsx  eax,r15w
 1001f5d:	mov    ecx,r12d
 1001f60:	sub    ecx,eax
 1001f62:	test   ecx,ecx
 1001f64:	jg     0x1001d40
 1001f6a:	mov    rbx,QWORD PTR [rsp+0x50]
 1001f6f:	mov    esi,DWORD PTR [rsp+0x40]
 1001f73:	mov    rbp,QWORD PTR [rsp+0x58]
 1001f78:	mov    eax,DWORD PTR [rip+0xc186]        # 0x100e104
 1001f7e:	movzx  ecx,WORD PTR [rip+0xc183]        # 0x100e108
 1001f85:	movsx  r8d,r14w
 1001f89:	cmp    r8d,edx
 1001f8c:	jge    0x10020a2
 1001f92:	cmp    ax,cx
 1001f95:	jne    0x1002000
 1001f97:	call   QWORD PTR [rip+0xfffffffffffff3bb]        # 0x1001358
 1001f9d:	lea    rcx,[rax+0x60]
 1001fa1:	call   QWORD PTR [rip+0xfffffffffffff3b9]        # 0x1001360
 1001fa7:	call   QWORD PTR [rip+0xfffffffffffff3ab]        # 0x1001358
 1001fad:	lea    rcx,[rax+0x30]
 1001fb1:	call   QWORD PTR [rip+0xfffffffffffff3a9]        # 0x1001360
 1001fb7:	call   0x1006050
 1001fbc:	lea    rdx,[rip+0xc141]        # 0x100e104
 1001fc3:	test   eax,eax
 1001fc5:	je     0x100207e
 1001fcb:	or     rax,0xffffffffffffffff
 1001fcf:	nop
 1001fd0:	inc    rax
 1001fd3:	cmp    WORD PTR [rdx+rax*2],0x0
 1001fd8:	jne    0x1001fd0
 1001fda:	mov    rcx,QWORD PTR [rip+0xd717]        # 0x100f6f8
 1001fe1:	lea    r8d,[rax+rax*1]
 1001fe5:	lea    r9,[rip+0xc1f4]        # 0x100e1e0
 1001fec:	mov    QWORD PTR [rsp+0x20],0x0
 1001ff5:	call   QWORD PTR [rip+0xfffffffffffff19d]        # 0x1001198
 1001ffb:	jmp    0x100209e
 1002000:	cmp    r8d,edx
 1002003:	jge    0x10020a2
 1002009:	cmp    ax,cx
 100200c:	je     0x10020a2
 1002012:	cmp    rbx,QWORD PTR [rsp+0x48]
 1002017:	jge    0x10020a2
 100201d:	call   QWORD PTR [rip+0xfffffffffffff335]        # 0x1001358
 1002023:	lea    rcx,[rax+0x60]
 1002027:	call   QWORD PTR [rip+0xfffffffffffff333]        # 0x1001360
 100202d:	call   QWORD PTR [rip+0xfffffffffffff325]        # 0x1001358
 1002033:	lea    rcx,[rax+0x30]
 1002037:	call   QWORD PTR [rip+0xfffffffffffff323]        # 0x1001360
 100203d:	call   0x1006050
 1002042:	lea    rdx,[rip+0xc0bb]        # 0x100e104
 1002049:	test   eax,eax
 100204b:	je     0x100207e
 100204d:	or     rax,0xffffffffffffffff
 1002051:	inc    rax
 1002054:	cmp    WORD PTR [rdx+rax*2],0x0
 1002059:	jne    0x1002051
 100205b:	mov    rcx,QWORD PTR [rip+0xd696]        # 0x100f6f8
 1002062:	lea    r8d,[rax+rax*1]
 1002066:	lea    r9,[rip+0xc173]        # 0x100e1e0
 100206d:	mov    QWORD PTR [rsp+0x20],0x0
 1002076:	call   QWORD PTR [rip+0xfffffffffffff11c]        # 0x1001198
 100207c:	jmp    0x100209e
 100207e:	mov    r9,QWORD PTR [rip+0xd673]        # 0x100f6f8
 1002085:	or     r8d,0xffffffff
 1002089:	lea    rax,[rip+0xc150]        # 0x100e1e0
 1002090:	lea    ecx,[r8+0x2]
 1002094:	mov    QWORD PTR [rsp+0x20],rax
 1002099:	call   0x1002c00
 100209e:	inc    r14w
 10020a2:	inc    esi
 10020a4:	mov    r15d,0x0
 10020aa:	movsxd rbx,esi
 10020ad:	mov    DWORD PTR [rsp+0x40],esi
 10020b1:	mov    QWORD PTR [rsp+0x50],rbx
 10020b6:	cmp    rbx,QWORD PTR [rsp+0x48]
 10020bb:	jle    0x1001cf4
 10020c1:	mov    r13,QWORD PTR [rsp+0x178]
 10020c9:	lea    rbx,[rip+0xc110]        # 0x100e1e0
 10020d0:	lea    r12d,[r15+0x1]
 10020d4:	call   QWORD PTR [rip+0xfffffffffffff27e]        # 0x1001358
 10020da:	lea    rcx,[rax+0x60]
 10020de:	call   QWORD PTR [rip+0xfffffffffffff27c]        # 0x1001360
 10020e4:	call   QWORD PTR [rip+0xfffffffffffff26e]        # 0x1001358
 10020ea:	lea    rcx,[rax+0x30]
 10020ee:	call   QWORD PTR [rip+0xfffffffffffff26c]        # 0x1001360
 10020f4:	call   0x1006050
 10020f9:	mov    r14,QWORD PTR [rsp+0x170]
 1002101:	mov    rdi,QWORD PTR [rsp+0x180]
 1002109:	mov    rsi,QWORD PTR [rsp+0x188]
 1002111:	mov    rbp,QWORD PTR [rsp+0x1c0]
 1002119:	lea    rdx,[rip+0xfffffffffffff3f8]        # 0x1001518
 1002120:	test   eax,eax
 1002122:	je     0x1002141
 1002124:	mov    rcx,QWORD PTR [rip+0xd5cd]        # 0x100f6f8
 100212b:	mov    r9,rbx
 100212e:	mov    r8d,0x4
 1002134:	mov    QWORD PTR [rsp+0x20],r15
 1002139:	call   QWORD PTR [rip+0xfffffffffffff059]        # 0x1001198
 100213f:	jmp    0x1002159
 1002141:	mov    r9,QWORD PTR [rip+0xd5b0]        # 0x100f6f8
 1002148:	or     r8d,0xffffffff
 100214c:	mov    ecx,r12d
 100214f:	mov    QWORD PTR [rsp+0x20],rbx
 1002154:	call   0x1002c00
 1002159:	mov    rcx,QWORD PTR [rsp+0x160]
 1002161:	xor    rcx,rsp
 1002164:	call   0x100a730
 1002169:	add    rsp,0x190
 1002170:	pop    r15
 1002172:	pop    r12
 1002174:	pop    rbx
 1002175:	ret    
 1002176:	int3   
 1002177:	int3   
 1002178:	int3   
 1002179:	int3   
 100217a:	int3   
 100217b:	int3   
 100217c:	int3   
 100217d:	int3   
 100217e:	int3   
 100217f:	int3   
 1002180:	mov    r11,rsp
 1002183:	mov    QWORD PTR [r11+0x8],rcx
 1002187:	push   rbp
 1002188:	push   rdi
 1002189:	push   r13
 100218b:	sub    rsp,0x70
 100218f:	lea    rax,[r11+0x20]
 1002193:	xor    ebp,ebp
 1002195:	xor    edx,edx
 1002197:	mov    QWORD PTR [r11-0x58],rax
 100219b:	mov    QWORD PTR [r11-0x60],rbp
 100219f:	mov    r8d,0x3e9
 10021a5:	xor    r9d,r9d
 10021a8:	mov    WORD PTR [rsp+0x20],bp
 10021ad:	mov    rdi,rcx
 10021b0:	call   0x100ad32
 10021b5:	test   ax,ax
 10021b8:	jne    0x10024f3
 10021be:	mov    rax,QWORD PTR [rsp+0xa8]
 10021c6:	test   rax,rax
 10021c9:	je     0x10024f3
 10021cf:	mov    QWORD PTR [rsp+0x68],rbx
 10021d4:	mov    QWORD PTR [rsp+0x60],rsi
 10021d9:	mov    QWORD PTR [rsp+0x58],r12
 10021de:	mov    r13d,0x1
 10021e4:	mov    QWORD PTR [rsp+0x50],r14
 10021e9:	movzx  esi,bp
 10021ec:	mov    ebx,r13d
 10021ef:	mov    QWORD PTR [rsp+0x48],r15
 10021f4:	mov    DWORD PTR [rsp+0xa0],ebx
 10021fb:	cmp    rax,rbx
 10021fe:	jl     0x1002491
 1002204:	mov    edx,ebx
 1002206:	mov    rcx,rdi
 1002209:	call   0x1002850
 100220e:	movzx  r15d,ax
 1002212:	lea    ecx,[r15+0x1]
 1002216:	cmp    cx,ax
 1002219:	jb     0x10024ee
 100221f:	movsx  rcx,cx
 1002223:	add    rcx,rcx
 1002226:	call   QWORD PTR [rip+0xfffffffffffff124]        # 0x1001350
 100222c:	mov    r12,rax
 100222f:	test   rax,rax
 1002232:	je     0x10024ee
 1002238:	lea    rax,[rsp+0x98]
 1002240:	mov    QWORD PTR [rsp+0x30],rbp
 1002245:	movsx  r14d,r15w
 1002249:	lea    ecx,[r14+0x1]
 100224d:	mov    QWORD PTR [rsp+0x28],rax
 1002252:	mov    r8d,0x3f3
 1002258:	add    cx,cx
 100225b:	mov    r9,r12
 100225e:	movzx  edx,bx
 1002261:	mov    WORD PTR [rsp+0x20],cx
 1002266:	mov    rcx,rdi
 1002269:	call   0x100ad32
 100226e:	movsx  rdx,WORD PTR [rsp+0x98]
 1002277:	shr    rdx,1
 100227a:	movsx  rcx,dx
 100227e:	cmp    ecx,r14d
 1002281:	jge    0x1002299
 1002283:	mov    eax,r14d
 1002286:	lea    rdi,[r12+rcx*2]
 100228a:	sub    eax,ecx
 100228c:	mov    ecx,eax
 100228e:	mov    eax,0x20
 1002293:	movzx  eax,ax
 1002296:	rep stos WORD PTR es:[rdi],ax
 1002299:	movsx  rax,r15w
 100229d:	movsx  edx,si
 10022a0:	mov    WORD PTR [r12+rax*2],bp
 10022a5:	mov    edi,DWORD PTR [rip+0xbe55]        # 0x100e100
 10022ab:	mov    eax,DWORD PTR [rip+0xbe53]        # 0x100e104
 10022b1:	movzx  ecx,WORD PTR [rip+0xbe50]        # 0x100e108
 10022b8:	cmp    edx,edi
 10022ba:	jge    0x10022e4
 10022bc:	cmp    ax,cx
 10022bf:	je     0x10022cf
 10022c1:	cmp    edx,edi
 10022c3:	jge    0x10022e4
 10022c5:	cmp    ax,cx
 10022c8:	je     0x10022e4
 10022ca:	cmp    ebx,r13d
 10022cd:	je     0x10022e4
 10022cf:	lea    rcx,[rip+0xbe2e]        # 0x100e104
 10022d6:	call   0x1002b60
 10022db:	mov    edi,DWORD PTR [rip+0xbe1f]        # 0x100e100
 10022e1:	inc    si
 10022e4:	movsx  eax,si
 10022e7:	add    eax,r14d
 10022ea:	cmp    eax,edi
 10022ec:	jle    0x100230b
 10022ee:	cmp    si,0x8
 10022f2:	jl     0x100230b
 10022f4:	lea    rcx,[rip+0xfffffffffffff215]        # 0x1001510
 10022fb:	call   0x1002b60
 1002300:	mov    edi,DWORD PTR [rip+0xbdfa]        # 0x100e100
 1002306:	mov    esi,0x8
 100230b:	movzx  ebx,bp
 100230e:	test   r14d,r14d
 1002311:	jle    0x100245f
 1002317:	nop    WORD PTR [rax+rax*1+0x0]
 1002320:	movsx  eax,bx
 1002323:	movsx  edx,si
 1002326:	mov    ecx,edx
 1002328:	sub    ecx,eax
 100232a:	movsx  rax,bx
 100232e:	add    ecx,r14d
 1002331:	cmp    ecx,edi
 1002333:	jg     0x1002351
 1002335:	lea    rcx,[r12+rax*2]
 1002339:	call   0x1002b60
 100233e:	movzx  edx,r15w
 1002342:	sub    dx,bx
 1002345:	movzx  ebx,r15w
 1002349:	add    si,dx
 100234c:	jmp    0x1002448
 1002351:	sub    edi,edx
 1002353:	lea    rbp,[r12+rax*2]
 1002357:	call   QWORD PTR [rip+0xffffffffffffeffb]        # 0x1001358
 100235d:	lea    rcx,[rax+0x60]
 1002361:	call   QWORD PTR [rip+0xffffffffffffeff9]        # 0x1001360
 1002367:	call   QWORD PTR [rip+0xffffffffffffefeb]        # 0x1001358
 100236d:	lea    rcx,[rax+0x30]
 1002371:	call   QWORD PTR [rip+0xffffffffffffefe9]        # 0x1001360
 1002377:	call   0x1006050
 100237c:	mov    rdx,rbp
 100237f:	test   eax,eax
 1002381:	je     0x10023a6
 1002383:	mov    rcx,QWORD PTR [rip+0xd36e]        # 0x100f6f8
 100238a:	lea    r8d,[rdi+rdi*1]
 100238e:	lea    r9,[rip+0xbe4f]        # 0x100e1e4
 1002395:	mov    QWORD PTR [rsp+0x20],0x0
 100239e:	call   QWORD PTR [rip+0xffffffffffffedf4]        # 0x1001198
 10023a4:	jmp    0x10023c4
 10023a6:	mov    r9,QWORD PTR [rip+0xd34b]        # 0x100f6f8
 10023ad:	lea    rax,[rip+0xbe30]        # 0x100e1e4
 10023b4:	mov    r8d,edi
 10023b7:	mov    ecx,r13d
 10023ba:	mov    QWORD PTR [rsp+0x20],rax
 10023bf:	call   0x1002c00
 10023c4:	movzx  eax,WORD PTR [rip+0xbd35]        # 0x100e100
 10023cb:	sub    ax,si
 10023ce:	mov    esi,0x8
 10023d3:	add    bx,ax
 10023d6:	call   QWORD PTR [rip+0xffffffffffffef7c]        # 0x1001358
 10023dc:	lea    rcx,[rax+0x60]
 10023e0:	call   QWORD PTR [rip+0xffffffffffffef7a]        # 0x1001360
 10023e6:	call   QWORD PTR [rip+0xffffffffffffef6c]        # 0x1001358
 10023ec:	lea    rcx,[rax+0x30]
 10023f0:	call   QWORD PTR [rip+0xffffffffffffef6a]        # 0x1001360
 10023f6:	call   0x1006050
 10023fb:	lea    rdx,[rip+0xfffffffffffff10e]        # 0x1001510
 1002402:	test   eax,eax
 1002404:	je     0x1002427
 1002406:	mov    rcx,QWORD PTR [rip+0xd2eb]        # 0x100f6f8
 100240d:	xor    ebp,ebp
 100240f:	lea    r9,[rip+0xbdca]        # 0x100e1e0
 1002416:	lea    r8d,[rsi-0x2]
 100241a:	mov    QWORD PTR [rsp+0x20],rbp
 100241f:	call   QWORD PTR [rip+0xffffffffffffed73]        # 0x1001198
 1002425:	jmp    0x1002448
 1002427:	mov    r9,QWORD PTR [rip+0xd2ca]        # 0x100f6f8
 100242e:	lea    rax,[rip+0xbdab]        # 0x100e1e0
 1002435:	or     r8d,0xffffffff
 1002439:	mov    ecx,r13d
 100243c:	mov    QWORD PTR [rsp+0x20],rax
 1002441:	call   0x1002c00
 1002446:	xor    ebp,ebp
 1002448:	movsx  eax,bx
 100244b:	mov    ecx,r14d
 100244e:	sub    ecx,eax
 1002450:	test   ecx,ecx
 1002452:	jle    0x100245f
 1002454:	mov    edi,DWORD PTR [rip+0xbca6]        # 0x100e100
 100245a:	jmp    0x1002320
 100245f:	mov    rcx,r12
 1002462:	call   QWORD PTR [rip+0xffffffffffffeee0]        # 0x1001348
 1002468:	mov    ebx,DWORD PTR [rsp+0xa0]
 100246f:	mov    rdi,QWORD PTR [rsp+0x90]
 1002477:	inc    ebx
 1002479:	movsxd rax,ebx
 100247c:	mov    DWORD PTR [rsp+0xa0],ebx
 1002483:	cmp    rax,QWORD PTR [rsp+0xa8]
 100248b:	jle    0x1002204
 1002491:	movzx  eax,WORD PTR [rip+0xbc70]        # 0x100e108
 1002498:	cmp    WORD PTR [rip+0xbc65],ax        # 0x100e104
 100249f:	jne    0x10024ad
 10024a1:	lea    rcx,[rip+0xbc5c]        # 0x100e104
 10024a8:	call   0x1002b60
 10024ad:	lea    rcx,[rip+0xfffffffffffff064]        # 0x1001518
 10024b4:	call   0x1002b60
 10024b9:	lea    rdx,[rip+0xfffffffffffff088]        # 0x1001548
 10024c0:	mov    rcx,rdi
 10024c3:	call   0x1001c40
 10024c8:	movzx  eax,r13w
 10024cc:	mov    r14,QWORD PTR [rsp+0x50]
 10024d1:	mov    r12,QWORD PTR [rsp+0x58]
 10024d6:	mov    rsi,QWORD PTR [rsp+0x60]
 10024db:	mov    rbx,QWORD PTR [rsp+0x68]
 10024e0:	mov    r15,QWORD PTR [rsp+0x48]
 10024e5:	add    rsp,0x70
 10024e9:	pop    r13
 10024eb:	pop    rdi
 10024ec:	pop    rbp
 10024ed:	ret    
 10024ee:	movzx  eax,bp
 10024f1:	jmp    0x10024cc
 10024f3:	mov    eax,0x1
 10024f8:	add    rsp,0x70
 10024fc:	pop    r13
 10024fe:	pop    rdi
 10024ff:	pop    rbp
 1002500:	ret    
 1002501:	int3   
 1002502:	int3   
 1002503:	int3   
 1002504:	int3   
 1002505:	int3   
 1002506:	int3   
 1002507:	int3   
 1002508:	int3   
 1002509:	int3   
 100250a:	int3   
 100250b:	int3   
 100250c:	int3   
 100250d:	int3   
 100250e:	int3   
 100250f:	int3   
 1002510:	rex push rbp
 1002512:	push   rbx
 1002513:	push   rsi
 1002514:	push   r12
 1002516:	push   r13
 1002518:	push   r15
 100251a:	lea    rbp,[rsp-0x388]
 1002522:	sub    rsp,0x488
 1002529:	mov    rax,QWORD PTR [rip+0xbc00]        # 0x100e130
 1002530:	xor    rax,rsp
 1002533:	mov    QWORD PTR [rbp+0x370],rax
 100253a:	mov    eax,0xfffffffa
 100253f:	mov    r12,rdx
 1002542:	xor    r13d,r13d
 1002545:	mov    WORD PTR [rsp+0x40],ax
 100254a:	lea    rax,[rsp+0x58]
 100254f:	xor    r9d,r9d
 1002552:	mov    QWORD PTR [rsp+0x30],rax
 1002557:	lea    rax,[rsp+0x40]
 100255c:	mov    r8w,0x4b6
 1002561:	mov    QWORD PTR [rsp+0x28],rax
 1002566:	mov    dx,0x1
 100256a:	mov    rbx,rcx
 100256d:	mov    WORD PTR [rsp+0x20],r13w
 1002573:	movzx  r15d,r13w
 1002577:	call   0x100ad32
 100257c:	mov    rcx,QWORD PTR [rsp+0x58]
 1002581:	test   ax,ax
 1002584:	cmovne rcx,r13
 1002588:	cmp    DWORD PTR [rip+0xbbd1],r13d        # 0x100e160
 100258f:	mov    QWORD PTR [rsp+0x58],rcx
 1002594:	jl     0x10025a3
 1002596:	test   rcx,rcx
 1002599:	jne    0x10025a3
 100259b:	mov    rcx,rbx
 100259e:	call   0x1002180
 10025a3:	lea    rax,[rsp+0x48]
 10025a8:	xor    edx,edx
 10025aa:	mov    r8d,0x3e9
 10025b0:	mov    QWORD PTR [rsp+0x30],rax
 10025b5:	xor    r9d,r9d
 10025b8:	mov    rcx,rbx
 10025bb:	mov    QWORD PTR [rsp+0x28],r13
 10025c0:	mov    QWORD PTR [rsp+0x480],r14
 10025c8:	mov    esi,r13d
 10025cb:	mov    WORD PTR [rsp+0x20],r13w
 10025d1:	call   0x100ad32
 10025d6:	test   ax,ax
 10025d9:	jne    0x100283c
 10025df:	cmp    QWORD PTR [rsp+0x48],rsi
 10025e4:	je     0x100283c
 10025ea:	mov    rcx,rbx
 10025ed:	mov    QWORD PTR [rsp+0x4d0],rdi
 10025f5:	call   0x100ad1a
 10025fa:	mov    r14d,0x1
 1002600:	movzx  edi,ax
 1002603:	cmp    ax,0x64
 1002607:	je     0x1002821
 100260d:	nop    DWORD PTR [rax]
 1002610:	test   di,di
 1002613:	je     0x1002681
 1002615:	mov    ecx,0x3
 100261a:	mov    rdx,rbx
 100261d:	call   0x1005660
 1002622:	lea    rax,[rsp+0x50]
 1002627:	lea    r9,[rsp+0x70]
 100262c:	mov    QWORD PTR [rsp+0x38],rax
 1002631:	mov    eax,0x100
 1002636:	mov    r8,rbx
 1002639:	mov    WORD PTR [rsp+0x30],ax
 100263e:	lea    rax,[rbp+0x170]
 1002645:	xor    edx,edx
 1002647:	mov    QWORD PTR [rsp+0x28],rax
 100264c:	lea    rax,[rsp+0x60]
 1002651:	xor    ecx,ecx
 1002653:	mov    QWORD PTR [rsp+0x20],rax
 1002658:	call   0x100ad4a
 100265d:	lea    rdx,[rip+0xffffffffffffeeec]        # 0x1001550
 1002664:	lea    rcx,[rsp+0x70]
 1002669:	call   QWORD PTR [rip+0xffffffffffffecd1]        # 0x1001340
 100266f:	test   eax,eax
 1002671:	je     0x1002821
 1002677:	cmp    di,r14w
 100267b:	jne    0x100280c
 1002681:	cmp    QWORD PTR [rsp+0x58],r13
 1002686:	jne    0x10027a7
 100268c:	test   esi,esi
 100268e:	je     0x10026aa
 1002690:	lea    rcx,[rip+0xffffffffffffee81]        # 0x1001518
 1002697:	call   0x1002b60
 100269c:	mov    rcx,rbx
 100269f:	call   0x1002180
 10026a4:	mov    r15d,r13d
 10026a7:	mov    esi,r13d
 10026aa:	mov    rdx,QWORD PTR [rsp+0x48]
 10026af:	movzx  eax,r14w
 10026b3:	mov    WORD PTR [rsp+0x44],r13w
 10026b9:	mov    WORD PTR [rsp+0x40],ax
 10026be:	cmp    rdx,r14
 10026c1:	jl     0x1002704
 10026c3:	data16 data16 data16 data16 nop WORD PTR [rax+rax*1+0x0]
 10026d0:	lea    r8,[rsp+0x44]
 10026d5:	movzx  edx,ax
 10026d8:	mov    rcx,rbx
 10026db:	call   0x10032a0
 10026e0:	test   ax,ax
 10026e3:	je     0x1002833
 10026e9:	movzx  eax,WORD PTR [rsp+0x40]
 10026ee:	mov    rdx,QWORD PTR [rsp+0x48]
 10026f3:	inc    ax
 10026f6:	movsx  rcx,ax
 10026fa:	mov    WORD PTR [rsp+0x40],ax
 10026ff:	cmp    rcx,rdx
 1002702:	jle    0x10026d0
 1002704:	mov    ecx,DWORD PTR [rip+0xba56]        # 0x100e160
 100270a:	test   ecx,ecx
 100270c:	jle    0x1002721
 100270e:	inc    r15w
 1002712:	movsx  eax,r15w
 1002716:	cmp    eax,ecx
 1002718:	jl     0x1002721
 100271a:	movzx  r15d,r13w
 100271e:	mov    esi,r14d
 1002721:	test   rdx,rdx
 1002724:	jle    0x100280c
 100272a:	movzx  eax,WORD PTR [rip+0xb9d7]        # 0x100e108
 1002731:	cmp    WORD PTR [rip+0xb9cc],ax        # 0x100e104
 1002738:	jne    0x1002746
 100273a:	lea    rcx,[rip+0xb9c3]        # 0x100e104
 1002741:	call   0x1002b60
 1002746:	lea    rcx,[rip+0xffffffffffffedcb]        # 0x1001518
 100274d:	call   0x1002b60
 1002752:	cmp    DWORD PTR [rip+0xbb0b],r13d        # 0x100e264
 1002759:	je     0x100280c
 100275f:	mov    rcx,rbx
 1002762:	call   0x100ad0e
 1002767:	lea    rcx,[rip+0xffffffffffffedaa]        # 0x1001518
 100276e:	call   0x1002b60
 1002773:	movzx  eax,r14w
 1002777:	mov    rdi,QWORD PTR [rsp+0x4d0]
 100277f:	mov    r14,QWORD PTR [rsp+0x480]
 1002787:	mov    rcx,QWORD PTR [rbp+0x370]
 100278e:	xor    rcx,rsp
 1002791:	call   0x100a730
 1002796:	add    rsp,0x488
 100279d:	pop    r15
 100279f:	pop    r13
 10027a1:	pop    r12
 10027a3:	pop    rsi
 10027a4:	pop    rbx
 10027a5:	pop    rbp
 10027a6:	ret    
 10027a7:	movzx  ecx,r14w
 10027ab:	mov    WORD PTR [rsp+0x40],cx
 10027b0:	cmp    QWORD PTR [rsp+0x48],r14
 10027b5:	jl     0x1002801
 10027b7:	movsx  edi,di
 10027ba:	nop    WORD PTR [rax+rax*1+0x0]
 10027c0:	movsx  edx,cx
 10027c3:	mov    r9,r12
 10027c6:	mov    r8d,edi
 10027c9:	mov    rcx,rbx
 10027cc:	call   0x1003850
 10027d1:	movzx  edx,WORD PTR [rsp+0x40]
 10027d6:	mov    r9,r12
 10027d9:	mov    r8d,edi
 10027dc:	mov    rcx,rbx
 10027df:	call   0x1002fa0
 10027e4:	test   ax,ax
 10027e7:	je     0x1002833
 10027e9:	movzx  ecx,WORD PTR [rsp+0x40]
 10027ee:	inc    cx
 10027f1:	movsx  rax,cx
 10027f5:	mov    WORD PTR [rsp+0x40],cx
 10027fa:	cmp    rax,QWORD PTR [rsp+0x48]
 10027ff:	jle    0x10027c0
 1002801:	cmp    DWORD PTR [rip+0xb958],r13d        # 0x100e160
 1002808:	cmovg  esi,r14d
 100280c:	mov    rcx,rbx
 100280f:	call   0x100ad1a
 1002814:	movzx  edi,ax
 1002817:	cmp    ax,0x64
 100281b:	jne    0x1002610
 1002821:	mov    ecx,0x3
 1002826:	mov    rdx,rbx
 1002829:	call   0x1005660
 100282e:	jmp    0x1002773
 1002833:	movzx  eax,r13w
 1002837:	jmp    0x1002777
 100283c:	mov    eax,0x1
 1002841:	jmp    0x100277f
 1002846:	int3   
 1002847:	int3   
 1002848:	int3   
 1002849:	int3   
 100284a:	int3   
 100284b:	int3   
 100284c:	int3   
 100284d:	int3   
 100284e:	int3   
 100284f:	int3   
 1002850:	mov    QWORD PTR [rsp+0x18],rbx
 1002855:	mov    QWORD PTR [rsp+0x20],rsi
 100285a:	push   rbp
 100285b:	push   rdi
 100285c:	push   r14
 100285e:	lea    rbp,[rsp-0x180]
 1002866:	sub    rsp,0x280
 100286d:	mov    rax,QWORD PTR [rip+0xb8bc]        # 0x100e130
 1002874:	xor    rax,rsp
 1002877:	mov    QWORD PTR [rbp+0x170],rax
 100287e:	xor    r14d,r14d
 1002881:	mov    rdi,rcx
 1002884:	mov    esi,edx
 1002886:	lea    rcx,[rsp+0x72]
 100288b:	xor    edx,edx
 100288d:	mov    r8d,0xfe
 1002893:	mov    WORD PTR [rsp+0x50],r14w
 1002899:	mov    WORD PTR [rsp+0x54],r14w
 100289f:	mov    QWORD PTR [rsp+0x60],r14
 10028a4:	mov    WORD PTR [rsp+0x58],r14w
 10028aa:	mov    WORD PTR [rsp+0x5c],r14w
 10028b0:	mov    WORD PTR [rsp+0x70],r14w
 10028b6:	call   0x100a756
 10028bb:	lea    rcx,[rbp+0x72]
 10028bf:	xor    edx,edx
 10028c1:	mov    r8d,0xfe
 10028c7:	mov    WORD PTR [rbp+0x70],r14w
 10028cc:	call   0x100a756
 10028d1:	lea    rax,[rsp+0x60]
 10028d6:	lea    r8d,[r14+0x6]
 10028da:	mov    QWORD PTR [rsp+0x30],rax
 10028df:	xor    r9d,r9d
 10028e2:	movzx  edx,si
 10028e5:	mov    rcx,rdi
 10028e8:	mov    QWORD PTR [rsp+0x28],r14
 10028ed:	mov    WORD PTR [rsp+0x20],r14w
 10028f3:	call   0x100ad32
 10028f8:	mov    QWORD PTR [rsp+0x40],r14
 10028fd:	mov    QWORD PTR [rsp+0x38],r14
 1002902:	lea    rax,[rsp+0x54]
 1002907:	mov    QWORD PTR [rsp+0x30],r14
 100290c:	xor    r9d,r9d
 100290f:	mov    QWORD PTR [rsp+0x28],rax
 1002914:	lea    rax,[rsp+0x50]
 1002919:	xor    r8d,r8d
 100291c:	movzx  edx,si
 100291f:	mov    rcx,rdi
 1002922:	mov    QWORD PTR [rsp+0x20],rax
 1002927:	call   0x100ad3e
 100292c:	lea    rax,[rsp+0x58]
 1002931:	mov    QWORD PTR [rsp+0x30],r14
 1002936:	mov    QWORD PTR [rsp+0x28],rax
 100293b:	lea    r8d,[r14+0x1b]
 100293f:	lea    r9,[rsp+0x70]
 1002944:	mov    ebx,0x80
 1002949:	movzx  edx,si
 100294c:	mov    rcx,rdi
 100294f:	mov    WORD PTR [rsp+0x20],bx
 1002954:	call   0x100ad32
 1002959:	lea    rax,[rsp+0x5c]
 100295e:	mov    QWORD PTR [rsp+0x30],r14
 1002963:	mov    QWORD PTR [rsp+0x28],rax
 1002968:	lea    r8d,[r14+0x1c]
 100296c:	lea    r9,[rbp+0x70]
 1002970:	movzx  edx,si
 1002973:	mov    rcx,rdi
 1002976:	mov    WORD PTR [rsp+0x20],bx
 100297b:	call   0x100ad32
 1002980:	movzx  eax,WORD PTR [rsp+0x58]
 1002985:	movzx  r11d,WORD PTR [rsp+0x5c]
 100298b:	test   ax,ax
 100298e:	je     0x10029f4
 1002990:	test   r11w,r11w
 1002994:	je     0x10029f4
 1002996:	lea    rsi,[rsp+0x70]
 100299b:	lea    rdi,[rip+0xffffffffffffeb9a]        # 0x100153c
 10029a2:	mov    ecx,0x2
 10029a7:	repz cmps WORD PTR ds:[rsi],WORD PTR es:[rdi]
 10029aa:	jne    0x10029c1
 10029ac:	lea    rsi,[rbp+0x70]
 10029b0:	lea    rdi,[rip+0xffffffffffffeb85]        # 0x100153c
 10029b7:	mov    ecx,0x2
 10029bc:	repz cmps WORD PTR ds:[rsi],WORD PTR es:[rdi]
 10029bf:	je     0x10029ec
 10029c1:	lea    rsi,[rsp+0x70]
 10029c6:	lea    rdi,[rip+0xffffffffffffeb73]        # 0x1001540
 10029cd:	mov    ecx,0x3
 10029d2:	repz cmps WORD PTR ds:[rsi],WORD PTR es:[rdi]
 10029d5:	jne    0x10029f4
 10029d7:	lea    rsi,[rbp+0x70]
 10029db:	lea    rdi,[rip+0xffffffffffffeb5a]        # 0x100153c
 10029e2:	mov    ecx,0x2
 10029e7:	repz cmps WORD PTR ds:[rsi],WORD PTR es:[rdi]
 10029ea:	jne    0x10029f4
 10029ec:	mov    r11d,r14d
 10029ef:	mov    eax,r14d
 10029f2:	jmp    0x1002a06
 10029f4:	cmp    ax,0x2
 10029f8:	jne    0x1002a06
 10029fa:	cmp    WORD PTR [rsp+0x70],0x24
 1002a00:	jne    0x1002a06
 1002a02:	movzx  eax,r14w
 1002a06:	movzx  edi,WORD PTR [rsp+0x54]
 1002a0b:	mov    ecx,0xffffff6a
 1002a10:	cmp    di,cx
 1002a13:	jne    0x1002a1f
 1002a15:	mov    eax,0x1f40
 1002a1a:	jmp    0x1002b29
 1002a1f:	mov    ecx,0xffffff69
 1002a24:	cmp    cx,di
 1002a27:	jne    0x1002a33
 1002a29:	mov    eax,0x31
 1002a2e:	jmp    0x1002b29
 1002a33:	mov    rdx,QWORD PTR [rsp+0x60]
 1002a38:	test   rdx,rdx
 1002a3b:	jne    0x1002a44
 1002a3d:	mov    edx,0xffffffff
 1002a42:	jmp    0x1002a7a
 1002a44:	test   ax,ax
 1002a47:	jne    0x1002a4f
 1002a49:	test   r11w,r11w
 1002a4d:	je     0x1002a7a
 1002a4f:	movsx  r8d,ax
 1002a53:	mov    ecx,0xffffffff
 1002a58:	movsx  esi,r11w
 1002a5c:	mov    eax,ecx
 1002a5e:	sub    eax,r8d
 1002a61:	sub    eax,esi
 1002a63:	cmp    rdx,rax
 1002a66:	jae    0x1002a77
 1002a68:	lea    eax,[r8+rsi*1]
 1002a6c:	movsxd rcx,eax
 1002a6f:	shr    rcx,1
 1002a72:	add    rdx,rcx
 1002a75:	jmp    0x1002a7a
 1002a77:	mov    rdx,rcx
 1002a7a:	cmp    di,0xfffd
 1002a7e:	je     0x1002ad0
 1002a80:	cmp    di,0xfffe
 1002a84:	je     0x1002ad0
 1002a86:	cmp    di,0xfffc
 1002a8a:	je     0x1002ad0
 1002a8c:	movzx  edi,WORD PTR [rsp+0x50]
 1002a91:	mov    ecx,0x4
 1002a96:	cmp    cx,di
 1002a99:	jle    0x1002a9f
 1002a9b:	mov    eax,ecx
 1002a9d:	jmp    0x1002aa2
 1002a9f:	movsx  eax,di
 1002aa2:	cmp    rax,rdx
 1002aa5:	jbe    0x1002ab5
 1002aa7:	mov    eax,ecx
 1002aa9:	cmp    cx,di
 1002aac:	jg     0x1002ab1
 1002aae:	movsx  eax,di
 1002ab1:	mov    esi,eax
 1002ab3:	jmp    0x1002ab8
 1002ab5:	mov    rsi,rdx
 1002ab8:	mov    eax,0x1f40
 1002abd:	cmp    rsi,rax
 1002ac0:	jae    0x1002acb
 1002ac2:	cmp    cx,di
 1002ac5:	jle    0x1002b0d
 1002ac7:	mov    eax,ecx
 1002ac9:	jmp    0x1002b10
 1002acb:	mov    rdx,rax
 1002ace:	jmp    0x1002b26
 1002ad0:	movzx  edi,WORD PTR [rsp+0x50]
 1002ad5:	mov    ecx,0x4
 1002ada:	cmp    cx,di
 1002add:	jle    0x1002ae3
 1002adf:	mov    eax,ecx
 1002ae1:	jmp    0x1002ae6
 1002ae3:	movsx  eax,di
 1002ae6:	cmp    rax,rdx
 1002ae9:	jbe    0x1002af9
 1002aeb:	cmp    cx,di
 1002aee:	jle    0x1002af4
 1002af0:	mov    eax,ecx
 1002af2:	jmp    0x1002afc
 1002af4:	movsx  eax,di
 1002af7:	jmp    0x1002afc
 1002af9:	mov    rax,rdx
 1002afc:	cmp    rax,0x3e82
 1002b02:	jae    0x1002b21
 1002b04:	cmp    cx,di
 1002b07:	jle    0x1002b0d
 1002b09:	mov    eax,ecx
 1002b0b:	jmp    0x1002b10
 1002b0d:	movsx  eax,di
 1002b10:	cmp    rax,rdx
 1002b13:	jbe    0x1002b26
 1002b15:	cmp    cx,di
 1002b18:	jg     0x1002b1d
 1002b1a:	movsx  ecx,di
 1002b1d:	mov    edx,ecx
 1002b1f:	jmp    0x1002b26
 1002b21:	mov    edx,0x3e82
 1002b26:	movzx  eax,dx
 1002b29:	mov    rcx,QWORD PTR [rbp+0x170]
 1002b30:	xor    rcx,rsp
 1002b33:	call   0x100a730
 1002b38:	lea    r11,[rsp+0x280]
 1002b40:	mov    rbx,QWORD PTR [r11+0x30]
 1002b44:	mov    rsi,QWORD PTR [r11+0x38]
 1002b48:	mov    rsp,r11
 1002b4b:	pop    r14
 1002b4d:	pop    rdi
 1002b4e:	pop    rbp
 1002b4f:	ret    
 1002b50:	int3   
 1002b51:	int3   
 1002b52:	int3   
 1002b53:	int3   
 1002b54:	int3   
 1002b55:	int3   
 1002b56:	int3   
 1002b57:	int3   
 1002b58:	int3   
 1002b59:	int3   
 1002b5a:	int3   
 1002b5b:	int3   
 1002b5c:	int3   
 1002b5d:	int3   
 1002b5e:	int3   
 1002b5f:	int3   
 1002b60:	rex push rbx
 1002b62:	sub    rsp,0x30
 1002b66:	mov    rbx,rcx
 1002b69:	call   QWORD PTR [rip+0xffffffffffffe7e9]        # 0x1001358
 1002b6f:	lea    rcx,[rax+0x60]
 1002b73:	call   QWORD PTR [rip+0xffffffffffffe7e7]        # 0x1001360
 1002b79:	call   QWORD PTR [rip+0xffffffffffffe7d9]        # 0x1001358
 1002b7f:	lea    rcx,[rax+0x30]
 1002b83:	call   QWORD PTR [rip+0xffffffffffffe7d7]        # 0x1001360
 1002b89:	call   0x1006050
 1002b8e:	test   eax,eax
 1002b90:	je     0x1002bca
 1002b92:	or     rax,0xffffffffffffffff
 1002b96:	inc    rax
 1002b99:	cmp    WORD PTR [rbx+rax*2],0x0
 1002b9e:	jne    0x1002b96
 1002ba0:	mov    rcx,QWORD PTR [rip+0xcb51]        # 0x100f6f8
 1002ba7:	lea    r8d,[rax+rax*1]
 1002bab:	lea    r9,[rip+0xb62e]        # 0x100e1e0
 1002bb2:	mov    rdx,rbx
 1002bb5:	mov    QWORD PTR [rsp+0x20],0x0
 1002bbe:	call   QWORD PTR [rip+0xffffffffffffe5d4]        # 0x1001198
 1002bc4:	add    rsp,0x30
 1002bc8:	pop    rbx
 1002bc9:	ret    
 1002bca:	mov    r9,QWORD PTR [rip+0xcb27]        # 0x100f6f8
 1002bd1:	lea    rcx,[rip+0xb608]        # 0x100e1e0
 1002bd8:	or     r8d,0xffffffff
 1002bdc:	mov    QWORD PTR [rsp+0x20],rcx
 1002be1:	lea    ecx,[r8+0x2]
 1002be5:	mov    rdx,rbx
 1002be8:	call   0x1002c00
 1002bed:	add    rsp,0x30
 1002bf1:	pop    rbx
 1002bf2:	ret    
 1002bf3:	int3   
 1002bf4:	int3   
 1002bf5:	int3   
 1002bf6:	int3   
 1002bf7:	int3   
 1002bf8:	int3   
 1002bf9:	int3   
 1002bfa:	int3   
 1002bfb:	int3   
 1002bfc:	int3   
 1002bfd:	int3   
 1002bfe:	int3   
 1002bff:	int3   
 1002c00:	rex push rbx
 1002c02:	push   rbp
 1002c03:	push   rsi
 1002c04:	push   r12
 1002c06:	push   r13
 1002c08:	push   r14
 1002c0a:	push   r15
 1002c0c:	sub    rsp,0x160
 1002c13:	mov    rax,QWORD PTR [rip+0xb516]        # 0x100e130
 1002c1a:	xor    rax,rsp
 1002c1d:	mov    QWORD PTR [rsp+0x140],rax
 1002c25:	mov    r13,QWORD PTR [rsp+0x1c0]
 1002c2d:	xor    r14d,r14d
 1002c30:	mov    r12,r9
 1002c33:	mov    ebx,r8d
 1002c36:	mov    rsi,rdx
 1002c39:	mov    r15d,ecx
 1002c3c:	mov    ebp,0x100
 1002c41:	cmp    r8d,0xffffffff
 1002c45:	jne    0x1002c5a
 1002c47:	or     rbx,0xffffffffffffffff
 1002c4b:	nop    DWORD PTR [rax+rax*1+0x0]
 1002c50:	inc    rbx
 1002c53:	cmp    WORD PTR [rdx+rbx*2],r14w
 1002c58:	jne    0x1002c50
 1002c5a:	lea    eax,[rbx+rbx*1]
 1002c5d:	mov    QWORD PTR [rsp+0x158],rdi
 1002c65:	cmp    eax,ebp
 1002c67:	jle    0x1002c85
 1002c69:	movsxd rbp,eax
 1002c6c:	mov    rcx,rbp
 1002c6f:	call   QWORD PTR [rip+0xffffffffffffe6db]        # 0x1001350
 1002c75:	mov    r14d,0x1
 1002c7b:	mov    rdi,rax
 1002c7e:	test   rax,rax
 1002c81:	jne    0x1002c8a
 1002c83:	jmp    0x1002ce4
 1002c85:	lea    rdi,[rsp+0x40]
 1002c8a:	mov    QWORD PTR [rsp+0x38],0x0
 1002c93:	mov    QWORD PTR [rsp+0x30],0x0
 1002c9c:	mov    r9d,ebx
 1002c9f:	mov    r8,rsi
 1002ca2:	xor    edx,edx
 1002ca4:	mov    ecx,r15d
 1002ca7:	mov    DWORD PTR [rsp+0x28],ebp
 1002cab:	mov    QWORD PTR [rsp+0x20],rdi
 1002cb0:	call   QWORD PTR [rip+0xffffffffffffe35a]        # 0x1001010
 1002cb6:	mov    r9,r13
 1002cb9:	mov    rdx,rdi
 1002cbc:	mov    rcx,r12
 1002cbf:	mov    r8d,eax
 1002cc2:	mov    QWORD PTR [rsp+0x20],0x0
 1002ccb:	call   QWORD PTR [rip+0xffffffffffffe4c7]        # 0x1001198
 1002cd1:	test   r14d,r14d
 1002cd4:	je     0x1002cdf
 1002cd6:	mov    rcx,rdi
 1002cd9:	call   QWORD PTR [rip+0xffffffffffffe669]        # 0x1001348
 1002cdf:	mov    eax,0x1
 1002ce4:	mov    rdi,QWORD PTR [rsp+0x158]
 1002cec:	mov    rcx,QWORD PTR [rsp+0x140]
 1002cf4:	xor    rcx,rsp
 1002cf7:	call   0x100a730
 1002cfc:	add    rsp,0x160
 1002d03:	pop    r15
 1002d05:	pop    r14
 1002d07:	pop    r13
 1002d09:	pop    r12
 1002d0b:	pop    rsi
 1002d0c:	pop    rbp
 1002d0d:	pop    rbx
 1002d0e:	ret    
 1002d0f:	int3   
 1002d10:	int3   
 1002d11:	int3   
 1002d12:	int3   
 1002d13:	int3   
 1002d14:	int3   
 1002d15:	int3   
 1002d16:	int3   
 1002d17:	int3   
 1002d18:	int3   
 1002d19:	int3   
 1002d1a:	int3   
 1002d1b:	int3   
 1002d1c:	int3   
 1002d1d:	int3   
 1002d1e:	int3   
 1002d1f:	int3   
 1002d20:	mov    QWORD PTR [rsp+0x8],rbx
 1002d25:	push   rdi
 1002d26:	sub    rsp,0x30
 1002d2a:	mov    ebx,edx
 1002d2c:	mov    rdi,rcx
 1002d2f:	call   QWORD PTR [rip+0xffffffffffffe623]        # 0x1001358
 1002d35:	lea    rcx,[rax+0x60]
 1002d39:	call   QWORD PTR [rip+0xffffffffffffe621]        # 0x1001360
 1002d3f:	call   QWORD PTR [rip+0xffffffffffffe613]        # 0x1001358
 1002d45:	lea    rcx,[rax+0x30]
 1002d49:	call   QWORD PTR [rip+0xffffffffffffe611]        # 0x1001360
 1002d4f:	call   0x1006050
 1002d54:	mov    rdx,rdi
 1002d57:	test   eax,eax
 1002d59:	je     0x1002d87
 1002d5b:	mov    rcx,QWORD PTR [rip+0xc996]        # 0x100f6f8
 1002d62:	lea    r8d,[rbx+rbx*1]
 1002d66:	lea    r9,[rip+0xb477]        # 0x100e1e4
 1002d6d:	mov    QWORD PTR [rsp+0x20],0x0
 1002d76:	call   QWORD PTR [rip+0xffffffffffffe41c]        # 0x1001198
 1002d7c:	mov    rbx,QWORD PTR [rsp+0x40]
 1002d81:	add    rsp,0x30
 1002d85:	pop    rdi
 1002d86:	ret    
 1002d87:	mov    r9,QWORD PTR [rip+0xc96a]        # 0x100f6f8
 1002d8e:	lea    rax,[rip+0xb44f]        # 0x100e1e4
 1002d95:	mov    r8d,ebx
 1002d98:	mov    ecx,0x1
 1002d9d:	mov    QWORD PTR [rsp+0x20],rax
 1002da2:	call   0x1002c00
 1002da7:	mov    rbx,QWORD PTR [rsp+0x40]
 1002dac:	add    rsp,0x30
 1002db0:	pop    rdi
 1002db1:	ret    
 1002db2:	int3   
 1002db3:	int3   
 1002db4:	int3   
 1002db5:	int3   
 1002db6:	int3   
 1002db7:	int3   
 1002db8:	int3   
 1002db9:	int3   
 1002dba:	int3   
 1002dbb:	int3   
 1002dbc:	int3   
 1002dbd:	int3   
 1002dbe:	int3   
 1002dbf:	int3   
 1002dc0:	mov    QWORD PTR [rsp+0x10],rbx
 1002dc5:	mov    QWORD PTR [rsp+0x18],rsi
 1002dca:	push   rdi
 1002dcb:	sub    rsp,0x20
 1002dcf:	add    rcx,0x98
 1002dd6:	movsxd rdi,r9d
 1002dd9:	movsxd rbx,r8d
 1002ddc:	mov    rsi,rdx
 1002ddf:	cmp    rcx,0xf5
 1002de6:	ja     0x1002e82
 1002dec:	lea    rdx,[rip+0xffffffffffffd20d]        # 0x1000000
 1002df3:	movzx  eax,BYTE PTR [rdx+rcx*1+0x2ea0]
 1002dfb:	mov    ecx,DWORD PTR [rdx+rax*4+0x2e94]
 1002e02:	add    rcx,rdx
 1002e05:	jmp    rcx
 1002e07:	cmp    ebx,edi
 1002e09:	jge    0x1002e82
 1002e0b:	mov    rdx,rdi
 1002e0e:	cmp    rbx,rdi
 1002e11:	jge    0x1002e28
 1002e13:	mov    rcx,rdx
 1002e16:	mov    eax,0x20
 1002e1b:	lea    rdi,[rsi+rbx*2]
 1002e1f:	sub    rcx,rbx
 1002e22:	movzx  eax,ax
 1002e25:	rep stos WORD PTR es:[rdi],ax
 1002e28:	xor    eax,eax
 1002e2a:	mov    WORD PTR [rsi+rdx*2],ax
 1002e2e:	mov    rbx,QWORD PTR [rsp+0x38]
 1002e33:	mov    rsi,QWORD PTR [rsp+0x40]
 1002e38:	add    rsp,0x20
 1002e3c:	pop    rdi
 1002e3d:	ret    
 1002e3e:	cmp    ebx,edi
 1002e40:	jge    0x1002e82
 1002e42:	mov    rax,rdi
 1002e45:	lea    r8,[rbx+rbx*1]
 1002e49:	mov    rdx,rsi
 1002e4c:	sub    rax,rbx
 1002e4f:	mov    QWORD PTR [rsp+0x30],rbp
 1002e54:	mov    rbp,rdi
 1002e57:	lea    rcx,[rsi+rax*2]
 1002e5b:	call   QWORD PTR [rip+0xffffffffffffe4c7]        # 0x1001328
 1002e61:	sub    edi,ebx
 1002e63:	test   edi,edi
 1002e65:	jle    0x1002e77
 1002e67:	mov    ecx,edi
 1002e69:	mov    eax,0x20
 1002e6e:	mov    rdi,rsi
 1002e71:	movzx  eax,ax
 1002e74:	rep stos WORD PTR es:[rdi],ax
 1002e77:	xor    eax,eax
 1002e79:	mov    WORD PTR [rsi+rbp*2],ax
 1002e7d:	mov    rbp,QWORD PTR [rsp+0x30]
 1002e82:	mov    rbx,QWORD PTR [rsp+0x38]
 1002e87:	mov    rsi,QWORD PTR [rsp+0x40]
 1002e8c:	add    rsp,0x20
 1002e90:	pop    rdi
 1002e91:	ret    
 1002e92:	xchg   ax,ax
 1002e94:	(bad)  
 1002e95:	add    BYTE PTR cs:[rax],al
 1002e98:	ds add BYTE PTR cs:[rax],al
 1002e9c:	(bad)  
 1002e9d:	add    BYTE PTR cs:[rax],al
 1002ea0:	add    BYTE PTR [rax],al
 1002ea2:	add    BYTE PTR [rdx],al
 1002ea4:	add    al,BYTE PTR [rdx]
 1002ea6:	add    al,BYTE PTR [rdx]
 1002ea8:	add    al,BYTE PTR [rdx]
 1002eaa:	add    al,BYTE PTR [rdx]
 1002eac:	add    al,BYTE PTR [rdx]
 1002eae:	add    al,BYTE PTR [rdx]
 1002eb0:	add    al,BYTE PTR [rdx]
 1002eb2:	add    al,BYTE PTR [rdx]
 1002eb4:	add    al,BYTE PTR [rdx]
 1002eb6:	add    al,BYTE PTR [rdx]
 1002eb8:	add    al,BYTE PTR [rdx]
 1002eba:	add    al,BYTE PTR [rdx]
 1002ebc:	add    al,BYTE PTR [rdx]
 1002ebe:	add    al,BYTE PTR [rdx]
 1002ec0:	add    al,BYTE PTR [rdx]
 1002ec2:	add    al,BYTE PTR [rdx]
 1002ec4:	add    al,BYTE PTR [rdx]
 1002ec6:	add    al,BYTE PTR [rdx]
 1002ec8:	add    al,BYTE PTR [rdx]
 1002eca:	add    al,BYTE PTR [rdx]
 1002ecc:	add    al,BYTE PTR [rdx]
 1002ece:	add    al,BYTE PTR [rdx]
 1002ed0:	add    al,BYTE PTR [rdx]
 1002ed2:	add    al,BYTE PTR [rdx]
 1002ed4:	add    al,BYTE PTR [rdx]
 1002ed6:	add    al,BYTE PTR [rdx]
 1002ed8:	add    al,BYTE PTR [rdx]
 1002eda:	add    al,BYTE PTR [rdx]
 1002edc:	add    al,BYTE PTR [rdx]
 1002ede:	add    al,BYTE PTR [rdx]
 1002ee0:	add    al,BYTE PTR [rdx]
 1002ee2:	add    al,BYTE PTR [rdx]
 1002ee4:	add    al,BYTE PTR [rdx]
 1002ee6:	add    al,BYTE PTR [rdx]
 1002ee8:	add    al,BYTE PTR [rdx]
 1002eea:	add    al,BYTE PTR [rdx]
 1002eec:	add    al,BYTE PTR [rdx]
 1002eee:	add    al,BYTE PTR [rdx]
 1002ef0:	add    al,BYTE PTR [rdx]
 1002ef2:	add    al,BYTE PTR [rdx]
 1002ef4:	add    al,BYTE PTR [rdx]
 1002ef6:	add    al,BYTE PTR [rdx]
 1002ef8:	add    al,BYTE PTR [rdx]
 1002efa:	add    al,BYTE PTR [rdx]
 1002efc:	add    al,BYTE PTR [rdx]
 1002efe:	add    al,BYTE PTR [rdx]
 1002f00:	add    al,BYTE PTR [rdx]
 1002f02:	add    al,BYTE PTR [rdx]
 1002f04:	add    al,BYTE PTR [rdx]
 1002f06:	add    al,BYTE PTR [rdx]
 1002f08:	add    al,BYTE PTR [rdx]
 1002f0a:	add    al,BYTE PTR [rdx]
 1002f0c:	add    al,BYTE PTR [rdx]
 1002f0e:	add    al,BYTE PTR [rdx]
 1002f10:	add    al,BYTE PTR [rdx]
 1002f12:	add    al,BYTE PTR [rdx]
 1002f14:	add    al,BYTE PTR [rdx]
 1002f16:	add    al,BYTE PTR [rdx]
 1002f18:	add    al,BYTE PTR [rdx]
 1002f1a:	add    al,BYTE PTR [rdx]
 1002f1c:	add    al,BYTE PTR [rdx]
 1002f1e:	add    al,BYTE PTR [rdx]
 1002f20:	add    al,BYTE PTR [rdx]
 1002f22:	add    al,BYTE PTR [rdx]
 1002f24:	add    al,BYTE PTR [rdx]
 1002f26:	add    al,BYTE PTR [rdx]
 1002f28:	add    al,BYTE PTR [rdx]
 1002f2a:	add    al,BYTE PTR [rdx]
 1002f2c:	add    al,BYTE PTR [rax]
 1002f2e:	add    BYTE PTR [rax],al
 1002f30:	add    BYTE PTR [rcx],al
 1002f32:	add    DWORD PTR [rcx],eax
 1002f34:	add    BYTE PTR [rax],al
 1002f36:	add    BYTE PTR [rax],al
 1002f38:	add    al,BYTE PTR [rax]
 1002f3a:	add    DWORD PTR [rcx],eax
 1002f3c:	add    DWORD PTR [rcx],eax
 1002f3e:	add    DWORD PTR [rcx],eax
 1002f40:	add    DWORD PTR [rdx],eax
 1002f42:	add    al,BYTE PTR [rdx]
 1002f44:	add    BYTE PTR [rdx],al
 1002f46:	add    al,BYTE PTR [rdx]
 1002f48:	add    al,BYTE PTR [rdx]
 1002f4a:	add    al,BYTE PTR [rdx]
 1002f4c:	add    al,BYTE PTR [rdx]
 1002f4e:	add    al,BYTE PTR [rdx]
 1002f50:	add    al,BYTE PTR [rdx]
 1002f52:	add    al,BYTE PTR [rdx]
 1002f54:	add    al,BYTE PTR [rdx]
 1002f56:	add    al,BYTE PTR [rdx]
 1002f58:	add    al,BYTE PTR [rdx]
 1002f5a:	add    al,BYTE PTR [rdx]
 1002f5c:	add    al,BYTE PTR [rdx]
 1002f5e:	add    al,BYTE PTR [rdx]
 1002f60:	add    al,BYTE PTR [rdx]
 1002f62:	add    al,BYTE PTR [rdx]
 1002f64:	add    al,BYTE PTR [rdx]
 1002f66:	add    al,BYTE PTR [rdx]
 1002f68:	add    al,BYTE PTR [rdx]
 1002f6a:	add    al,BYTE PTR [rdx]
 1002f6c:	add    al,BYTE PTR [rdx]
 1002f6e:	add    al,BYTE PTR [rdx]
 1002f70:	add    al,BYTE PTR [rdx]
 1002f72:	add    al,BYTE PTR [rdx]
 1002f74:	add    al,BYTE PTR [rdx]
 1002f76:	add    al,BYTE PTR [rdx]
 1002f78:	add    al,BYTE PTR [rdx]
 1002f7a:	add    al,BYTE PTR [rdx]
 1002f7c:	add    al,BYTE PTR [rdx]
 1002f7e:	add    al,BYTE PTR [rdx]
 1002f80:	add    al,BYTE PTR [rdx]
 1002f82:	add    al,BYTE PTR [rdx]
 1002f84:	add    al,BYTE PTR [rdx]
 1002f86:	add    al,BYTE PTR [rdx]
 1002f88:	add    al,BYTE PTR [rdx]
 1002f8a:	add    al,BYTE PTR [rdx]
 1002f8c:	add    al,BYTE PTR [rdx]
 1002f8e:	add    al,BYTE PTR [rdx]
 1002f90:	add    al,BYTE PTR [rdx]
 1002f92:	add    al,BYTE PTR [rdx]
 1002f94:	add    al,BYTE PTR [rcx]
 1002f96:	int3   
 1002f97:	int3   
 1002f98:	int3   
 1002f99:	int3   
 1002f9a:	int3   
 1002f9b:	int3   
 1002f9c:	int3   
 1002f9d:	int3   
 1002f9e:	int3   
 1002f9f:	int3   
 1002fa0:	mov    QWORD PTR [rsp+0x20],rbx
 1002fa5:	push   rsi
 1002fa6:	push   rdi
 1002fa7:	push   r12
 1002fa9:	push   r13
 1002fab:	push   r15
 1002fad:	sub    rsp,0x60
 1002fb1:	xor    ebx,ebx
 1002fb3:	mov    r12,rcx
 1002fb6:	lea    rcx,[rip+0xffffffffffffe563]        # 0x1001520
 1002fbd:	mov    r13,r9
 1002fc0:	movsx  r15d,dx
 1002fc4:	mov    QWORD PTR [rsp+0x48],rbx
 1002fc9:	mov    DWORD PTR [rsp+0x98],ebx
 1002fd0:	mov    QWORD PTR [rsp+0x40],rbx
 1002fd5:	call   0x1002b60
 1002fda:	lea    rax,[rsp+0x50]
 1002fdf:	mov    r8d,0x4b8
 1002fe5:	xor    r9d,r9d
 1002fe8:	mov    QWORD PTR [rsp+0x30],rax
 1002fed:	movzx  edx,r15w
 1002ff1:	mov    rcx,r12
 1002ff4:	mov    QWORD PTR [rsp+0x28],rbx
 1002ff9:	mov    WORD PTR [rsp+0x20],bx
 1002ffe:	call   0x100ad32
 1003003:	mov    rdx,QWORD PTR [rsp+0x50]
 1003008:	mov    r8,r13
 100300b:	mov    rcx,r12
 100300e:	call   0x1003f10
 1003013:	mov    edx,r15d
 1003016:	mov    rcx,r12
 1003019:	movzx  edi,ax
 100301c:	call   0x1002850
 1003021:	movsx  esi,ax
 1003024:	lea    eax,[rsi+0x1]
 1003027:	cmp    ax,si
 100302a:	jb     0x1003289
 1003030:	mov    QWORD PTR [rsp+0x90],rbp
 1003038:	mov    WORD PTR [rsp+0x98],ax
 1003040:	mov    QWORD PTR [rsp+0xa0],r14
 1003048:	movsxd rbp,DWORD PTR [rsp+0x98]
 1003050:	add    rbp,rbp
 1003053:	mov    rcx,rbp
 1003056:	call   QWORD PTR [rip+0xffffffffffffe2f4]        # 0x1001350
 100305c:	mov    r14,rax
 100305f:	test   rax,rax
 1003062:	jne    0x100308c
 1003064:	movzx  eax,bx
 1003067:	mov    rbp,QWORD PTR [rsp+0x90]
 100306f:	mov    r14,QWORD PTR [rsp+0xa0]
 1003077:	mov    rbx,QWORD PTR [rsp+0xa8]
 100307f:	add    rsp,0x60
 1003083:	pop    r15
 1003085:	pop    r13
 1003087:	pop    r12
 1003089:	pop    rdi
 100308a:	pop    rsi
 100308b:	ret    
 100308c:	lea    rax,[rsp+0x48]
 1003091:	mov    r8d,0x2
 1003097:	xor    r9d,r9d
 100309a:	mov    QWORD PTR [rsp+0x30],rax
 100309f:	movzx  edx,r15w
 10030a3:	mov    rcx,r12
 10030a6:	mov    QWORD PTR [rsp+0x28],rbx
 10030ab:	mov    WORD PTR [rsp+0x20],bx
 10030b0:	call   0x100ad32
 10030b5:	mov    r11,QWORD PTR [rsp+0x48]
 10030ba:	cmp    r11,0xfffffffffffffffe
 10030be:	je     0x10030fb
 10030c0:	cmp    r11,0xfffffffffffffffd
 10030c4:	je     0x10030fb
 10030c6:	lea    eax,[rsi*2+0x2]
 10030cd:	mov    r8d,0xfffffff8
 10030d3:	mov    r9,r14
 10030d6:	movsxd rcx,eax
 10030d9:	lea    rax,[rsp+0x40]
 10030de:	movzx  edx,r15w
 10030e2:	mov    QWORD PTR [rsp+0x28],rax
 10030e7:	mov    QWORD PTR [rsp+0x20],rcx
 10030ec:	mov    rcx,r12
 10030ef:	call   0x100ad26
 10030f4:	mov    r11,QWORD PTR [rsp+0x40]
 10030f9:	jmp    0x1003153
 10030fb:	mov    rdx,rbp
 10030fe:	lea    r8,[rip+0xffffffffffffe41f]        # 0x1001524
 1003105:	mov    rcx,r14
 1003108:	shr    rdx,1
 100310b:	call   QWORD PTR [rip+0xffffffffffffe21f]        # 0x1001330
 1003111:	lea    rcx,[rsp+0x40]
 1003116:	lea    eax,[rsi*2-0x2]
 100311d:	mov    QWORD PTR [rsp+0x28],rcx
 1003122:	cdqe   
 1003124:	lea    r9,[r14+0x4]
 1003128:	mov    rcx,r12
 100312b:	mov    r8d,0xfffffff8
 1003131:	movzx  edx,r15w
 1003135:	mov    QWORD PTR [rsp+0x20],rax
 100313a:	call   0x100ad26
 100313f:	mov    r11,QWORD PTR [rsp+0x40]
 1003144:	cmp    r11,0xffffffffffffffff
 1003148:	je     0x100315e
 100314a:	add    r11,0x4
 100314e:	mov    QWORD PTR [rsp+0x40],r11
 1003153:	cmp    r11,0xffffffffffffffff
 1003157:	je     0x100315e
 1003159:	shr    r11,1
 100315c:	jmp    0x1003180
 100315e:	shr    rbp,1
 1003161:	lea    r8,[rip+0xffffffffffffe3c8]        # 0x1001530
 1003168:	mov    rcx,r14
 100316b:	mov    rdx,rbp
 100316e:	call   QWORD PTR [rip+0xffffffffffffe1bc]        # 0x1001330
 1003174:	mov    rcx,r14
 1003177:	call   QWORD PTR [rip+0xffffffffffffdf4b]        # 0x10010c8
 100317d:	movsxd r11,eax
 1003180:	mov    rcx,QWORD PTR [rsp+0x48]
 1003185:	mov    r9d,esi
 1003188:	mov    r8d,r11d
 100318b:	mov    rdx,r14
 100318e:	call   0x1002dc0
 1003193:	mov    edx,DWORD PTR [rip+0xaf67]        # 0x100e100
 1003199:	movsx  r11d,di
 100319d:	add    r11d,esi
 10031a0:	mov    ebp,0x8
 10031a5:	cmp    r11d,edx
 10031a8:	jle    0x10031c3
 10031aa:	cmp    di,bp
 10031ad:	jl     0x10031c3
 10031af:	lea    rcx,[rip+0xffffffffffffe35a]        # 0x1001510
 10031b6:	call   0x1002b60
 10031bb:	mov    edx,DWORD PTR [rip+0xaf3f]        # 0x100e100
 10031c1:	mov    edi,ebp
 10031c3:	test   esi,esi
 10031c5:	jle    0x1003240
 10031c7:	nop    WORD PTR [rax+rax*1+0x0]
 10031d0:	movsx  r8d,di
 10031d4:	movsx  ecx,bx
 10031d7:	mov    eax,r8d
 10031da:	sub    eax,ecx
 10031dc:	add    eax,esi
 10031de:	cmp    eax,edx
 10031e0:	movsx  rax,bx
 10031e4:	jg     0x1003204
 10031e6:	mov    edx,esi
 10031e8:	sub    edx,ecx
 10031ea:	lea    rcx,[r14+rax*2]
 10031ee:	call   0x1002d20
 10031f3:	movzx  r11d,si
 10031f7:	sub    r11w,bx
 10031fb:	movzx  ebx,si
 10031fe:	add    di,r11w
 1003202:	jmp    0x100322f
 1003204:	lea    rcx,[r14+rax*2]
 1003208:	sub    edx,r8d
 100320b:	call   0x1002d20
 1003210:	movzx  r11d,WORD PTR [rip+0xaee8]        # 0x100e100
 1003218:	lea    rcx,[rip+0xffffffffffffe2f1]        # 0x1001510
 100321f:	sub    r11w,di
 1003223:	movzx  edi,bp
 1003226:	add    bx,r11w
 100322a:	call   0x1002b60
 100322f:	mov    edx,DWORD PTR [rip+0xaecb]        # 0x100e100
 1003235:	movsx  eax,bx
 1003238:	mov    ecx,esi
 100323a:	sub    ecx,eax
 100323c:	test   ecx,ecx
 100323e:	jg     0x10031d0
 1003240:	movsx  eax,di
 1003243:	cmp    eax,edx
 1003245:	jge    0x1003256
 1003247:	lea    rcx,[rip+0xffffffffffffe2c2]        # 0x1001510
 100324e:	call   0x1002b60
 1003253:	inc    di
 1003256:	mov    rdx,QWORD PTR [rsp+0x50]
 100325b:	movsx  r8d,di
 100325f:	mov    r9,r13
 1003262:	mov    rcx,r12
 1003265:	call   0x1004340
 100326a:	lea    rcx,[rip+0xffffffffffffe2a7]        # 0x1001518
 1003271:	call   0x1002b60
 1003276:	mov    rcx,r14
 1003279:	call   QWORD PTR [rip+0xffffffffffffe0c9]        # 0x1001348
 100327f:	mov    eax,0x1
 1003284:	jmp    0x1003067
 1003289:	movzx  eax,bx
 100328c:	jmp    0x1003077
 1003291:	int3   
 1003292:	int3   
 1003293:	int3   
 1003294:	int3   
 1003295:	int3   
 1003296:	int3   
 1003297:	int3   
 1003298:	int3   
 1003299:	int3   
 100329a:	int3   
 100329b:	int3   
 100329c:	int3   
 100329d:	int3   
 100329e:	int3   
 100329f:	int3   
 10032a0:	mov    QWORD PTR [rsp+0x20],rbx
 10032a5:	push   rbp
 10032a6:	push   rsi
 10032a7:	push   rdi
 10032a8:	push   r12
 10032aa:	push   r13
 10032ac:	push   r14
 10032ae:	push   r15
 10032b0:	lea    rbp,[rsp-0x190]
 10032b8:	sub    rsp,0x290
 10032bf:	mov    rax,QWORD PTR [rip+0xae6a]        # 0x100e130
 10032c6:	xor    rax,rsp
 10032c9:	mov    QWORD PTR [rbp+0x180],rax
 10032d0:	xor    ebx,ebx
 10032d2:	lea    rax,[rsp+0x58]
 10032d7:	mov    r12,r8
 10032da:	mov    QWORD PTR [rsp+0x30],rax
 10032df:	lea    r8d,[rbx+0x2]
 10032e3:	xor    r9d,r9d
 10032e6:	mov    QWORD PTR [rsp+0x28],rbx
 10032eb:	movzx  esi,dx
 10032ee:	mov    WORD PTR [rsp+0x48],dx
 10032f3:	mov    rdi,rcx
 10032f6:	mov    QWORD PTR [rsp+0x70],rcx
 10032fb:	mov    QWORD PTR [rsp+0x58],rbx
 1003300:	mov    r14d,ebx
 1003303:	mov    QWORD PTR [rsp+0x50],rbx
 1003308:	mov    WORD PTR [rsp+0x40],bx
 100330d:	mov    WORD PTR [rsp+0x44],bx
 1003312:	mov    WORD PTR [rsp+0x20],bx
 1003317:	call   0x100ad32
 100331c:	or     r13,0xffffffffffffffff
 1003320:	cmp    QWORD PTR [rsp+0x58],0xffffffffffffff6a
 1003329:	jne    0x1003357
 100332b:	lea    rax,[rsp+0x50]
 1003330:	lea    r8d,[rbx-0x2]
 1003334:	lea    r9,[rsp+0x50]
 1003339:	mov    QWORD PTR [rsp+0x28],rax
 100333e:	movzx  edx,si
 1003341:	mov    rcx,rdi
 1003344:	mov    QWORD PTR [rsp+0x20],rbx
 1003349:	call   0x100ad26
 100334e:	cmp    QWORD PTR [rsp+0x50],r13
 1003353:	cmove  r14,r13
 1003357:	mov    r15d,0x80
 100335d:	lea    rax,[rsp+0x40]
 1003362:	mov    QWORD PTR [rsp+0x30],rbx
 1003367:	mov    QWORD PTR [rsp+0x28],rax
 100336c:	lea    r9,[rbp-0x80]
 1003370:	lea    r8d,[r15-0x65]
 1003374:	movzx  edx,si
 1003377:	mov    rcx,rdi
 100337a:	mov    WORD PTR [rsp+0x20],r15w
 1003380:	call   0x100ad32
 1003385:	lea    rax,[rsp+0x44]
 100338a:	mov    QWORD PTR [rsp+0x30],rbx
 100338f:	mov    QWORD PTR [rsp+0x28],rax
 1003394:	lea    r8d,[r15-0x64]
 1003398:	lea    r9,[rbp+0x80]
 100339f:	movzx  edx,si
 10033a2:	mov    rcx,rdi
 10033a5:	mov    WORD PTR [rsp+0x20],r15w
 10033ab:	call   0x100ad32
 10033b0:	movsx  edx,si
 10033b3:	mov    rcx,rdi
 10033b6:	call   0x1002850
 10033bb:	cmp    r14,0xffffffffffffffff
 10033bf:	movsx  r15,ax
 10033c3:	cmovne r14,r15
 10033c7:	cmp    WORD PTR [rsp+0x40],bx
 10033cc:	je     0x1003436
 10033ce:	cmp    WORD PTR [rsp+0x44],bx
 10033d3:	je     0x1003436
 10033d5:	lea    rsi,[rbp-0x80]
 10033d9:	lea    rdi,[rip+0xffffffffffffe15c]        # 0x100153c
 10033e0:	mov    ecx,0x2
 10033e5:	repz cmps WORD PTR ds:[rsi],WORD PTR es:[rdi]
 10033e8:	jne    0x1003402
 10033ea:	lea    rsi,[rbp+0x80]
 10033f1:	lea    rdi,[rip+0xffffffffffffe144]        # 0x100153c
 10033f8:	mov    ecx,0x2
 10033fd:	repz cmps WORD PTR ds:[rsi],WORD PTR es:[rdi]
 1003400:	je     0x100342f
 1003402:	lea    rsi,[rbp-0x80]
 1003406:	lea    rdi,[rip+0xffffffffffffe133]        # 0x1001540
 100340d:	mov    ecx,0x3
 1003412:	repz cmps WORD PTR ds:[rsi],WORD PTR es:[rdi]
 1003415:	jne    0x1003436
 1003417:	lea    rsi,[rbp+0x80]
 100341e:	lea    rdi,[rip+0xffffffffffffe117]        # 0x100153c
 1003425:	mov    ecx,0x2
 100342a:	repz cmps WORD PTR ds:[rsi],WORD PTR es:[rdi]
 100342d:	jne    0x1003436
 100342f:	mov    WORD PTR [rsp+0x44],bx
 1003434:	jmp    0x1003445
 1003436:	cmp    WORD PTR [rsp+0x40],0x2
 100343c:	jne    0x100344a
 100343e:	cmp    WORD PTR [rbp-0x80],0x24
 1003443:	jne    0x100344a
 1003445:	mov    WORD PTR [rsp+0x40],bx
 100344a:	mov    rax,QWORD PTR [rsp+0x58]
 100344f:	cmp    rax,0xfffffffffffffff6
 1003453:	je     0x1003465
 1003455:	cmp    rax,0xfffffffffffffffc
 1003459:	je     0x1003465
 100345b:	cmp    rax,0xffffffffffffffff
 100345f:	jne    0x10034e8
 1003465:	mov    rdi,QWORD PTR [rsp+0x70]
 100346a:	movzx  edx,WORD PTR [rsp+0x48]
 100346f:	lea    rax,[rsp+0x50]
 1003474:	mov    QWORD PTR [rsp+0x28],rax
 1003479:	lea    r9,[rsp+0x50]
 100347e:	mov    rcx,rdi
 1003481:	mov    r8d,0xfffffff8
 1003487:	mov    QWORD PTR [rsp+0x50],rbx
 100348c:	mov    QWORD PTR [rsp+0x20],rbx
 1003491:	call   0x100ad26
 1003496:	cmp    r13w,ax
 100349a:	jne    0x10034b1
 100349c:	mov    ecx,0x3
 10034a1:	mov    rdx,rdi
 10034a4:	call   0x1005660
 10034a9:	movzx  eax,bx
 10034ac:	jmp    0x1003813
 10034b1:	mov    rax,QWORD PTR [rsp+0x50]
 10034b6:	cmp    rax,0xffffffffffffffff
 10034ba:	je     0x10034e5
 10034bc:	shr    rax,1
 10034bf:	cmp    QWORD PTR [rsp+0x58],0xfffffffffffffffc
 10034c5:	jne    0x10034d6
 10034c7:	mov    r14d,0x3e81
 10034cd:	cmp    rax,r14
 10034d0:	cmovb  r14,rax
 10034d4:	jmp    0x10034e8
 10034d6:	mov    r14d,0x1f40
 10034dc:	cmp    rax,r14
 10034df:	cmovb  r14,rax
 10034e3:	jmp    0x10034e8
 10034e5:	mov    r14,r13
 10034e8:	movsx  rax,WORD PTR [rsp+0x40]
 10034ee:	movsx  rdi,WORD PTR [rsp+0x44]
 10034f4:	add    rdi,0x2
 10034f8:	lea    rdi,[rdi+r15*2]
 10034fc:	add    rdi,rax
 10034ff:	mov    rcx,rdi
 1003502:	mov    QWORD PTR [rsp+0x60],rdi
 1003507:	call   QWORD PTR [rip+0xffffffffffffde43]        # 0x1001350
 100350d:	mov    rsi,rax
 1003510:	test   rax,rax
 1003513:	je     0x10034a9
 1003515:	mov    r8,rdi
 1003518:	xor    edx,edx
 100351a:	mov    rcx,rax
 100351d:	call   0x100a756
 1003522:	movsx  r11d,WORD PTR [r12]
 1003527:	mov    edx,DWORD PTR [rip+0xabd3]        # 0x100e100
 100352d:	mov    eax,DWORD PTR [rip+0xabd1]        # 0x100e104
 1003533:	movzx  ecx,WORD PTR [rip+0xabce]        # 0x100e108
 100353a:	cmp    r11d,edx
 100353d:	jge    0x1003567
 100353f:	cmp    ax,cx
 1003542:	je     0x1003556
 1003544:	cmp    r11d,edx
 1003547:	jge    0x1003567
 1003549:	cmp    ax,cx
 100354c:	je     0x1003567
 100354e:	cmp    WORD PTR [rsp+0x48],0x1
 1003554:	je     0x1003567
 1003556:	lea    rcx,[rip+0xaba7]        # 0x100e104
 100355d:	call   0x1002b60
 1003562:	inc    WORD PTR [r12]
 1003567:	test   r14,r14
 100356a:	jne    0x1003574
 100356c:	mov    WORD PTR [rsi],bx
 100356f:	jmp    0x10036e0
 1003574:	cmp    QWORD PTR [rsp+0x58],0xffffffffffffff69
 100357d:	jne    0x10035e8
 100357f:	cmp    bx,WORD PTR [rip+0xabea]        # 0x100e170
 1003586:	lea    r14,[rip+0xabe3]        # 0x100e170
 100358d:	jne    0x10035c1
 100358f:	mov    rcx,QWORD PTR [rip+0xad22]        # 0x100e2b8
 1003596:	mov    r9d,0x32
 100359c:	mov    r8,r14
 100359f:	lea    edx,[r9+0xe]
 10035a3:	mov    DWORD PTR [rsp+0x20],ebx
 10035a7:	call   0x1005f20
 10035ac:	nop    DWORD PTR [rax+0x0]
 10035b0:	inc    r13
 10035b3:	cmp    WORD PTR [r14+r13*2],bx
 10035b8:	jne    0x10035b0
 10035ba:	mov    QWORD PTR [rip+0xac17],r13        # 0x100e1d8
 10035c1:	shr    rdi,1
 10035c4:	mov    r8,r14
 10035c7:	mov    rcx,rsi
 10035ca:	lea    r9,[rdi-0x1]
 10035ce:	mov    rdx,rdi
 10035d1:	call   QWORD PTR [rip+0xffffffffffffdd61]        # 0x1001338
 10035d7:	mov    WORD PTR [rsi+rdi*2-0x2],bx
 10035dc:	mov    r14,QWORD PTR [rip+0xabf5]        # 0x100e1d8
 10035e3:	jmp    0x10036db
 10035e8:	cmp    r14,0xffffffffffffffff
 10035ec:	je     0x10036e0
 10035f2:	mov    rax,rsi
 10035f5:	mov    QWORD PTR [rsp+0x68],rax
 10035fa:	cmp    WORD PTR [rsp+0x40],bx
 10035ff:	je     0x1003626
 1003601:	lea    r8,[rbp-0x80]
 1003605:	mov    rcx,rsi
 1003608:	mov    rdx,rdi
 100360b:	shr    rdx,1
 100360e:	call   QWORD PTR [rip+0xffffffffffffdd1c]        # 0x1001330
 1003614:	movsx  rcx,WORD PTR [rsp+0x40]
 100361a:	lea    rax,[rcx+rsi*1]
 100361e:	sub    rdi,rcx
 1003621:	mov    QWORD PTR [rsp+0x68],rax
 1003626:	mov    r14,QWORD PTR [rsp+0x70]
 100362b:	movzx  edx,WORD PTR [rsp+0x48]
 1003630:	lea    rcx,[rsp+0x50]
 1003635:	mov    QWORD PTR [rsp+0x28],rcx
 100363a:	mov    r8d,0xfffffff8
 1003640:	mov    r9,rax
 1003643:	mov    rcx,r14
 1003646:	mov    QWORD PTR [rsp+0x20],rdi
 100364b:	call   0x100ad26
 1003650:	cmp    r13w,ax
 1003654:	jne    0x1003674
 1003656:	mov    ecx,0x3
 100365b:	mov    rdx,r14
 100365e:	call   0x1005660
 1003663:	mov    rcx,rsi
 1003666:	call   QWORD PTR [rip+0xffffffffffffdcdc]        # 0x1001348
 100366c:	movzx  eax,bx
 100366f:	jmp    0x1003813
 1003674:	mov    rcx,QWORD PTR [rsp+0x50]
 1003679:	movzx  eax,WORD PTR [rsp+0x44]
 100367e:	cmp    rcx,0xfffffffffffffffc
 1003682:	cmove  rcx,rdi
 1003686:	mov    QWORD PTR [rsp+0x50],rcx
 100368b:	test   ax,ax
 100368e:	je     0x10036b8
 1003690:	mov    rax,QWORD PTR [rsp+0x68]
 1003695:	sub    rdi,rcx
 1003698:	lea    r8,[rbp+0x80]
 100369f:	shr    rdi,1
 10036a2:	add    rcx,rax
 10036a5:	mov    rdx,rdi
 10036a8:	call   QWORD PTR [rip+0xffffffffffffdc82]        # 0x1001330
 10036ae:	mov    rcx,QWORD PTR [rsp+0x50]
 10036b3:	movzx  eax,WORD PTR [rsp+0x44]
 10036b8:	cmp    rcx,0xffffffffffffffff
 10036bc:	jne    0x10036c3
 10036be:	mov    r14,r13
 10036c1:	jmp    0x10036db
 10036c3:	movsx  r14,WORD PTR [rsp+0x40]
 10036c9:	movsx  rax,ax
 10036cd:	add    rax,rcx
 10036d0:	add    r14,rax
 10036d3:	shr    r14,1
 10036d6:	jne    0x10036db
 10036d8:	mov    WORD PTR [rsi],bx
 10036db:	mov    rdi,QWORD PTR [rsp+0x60]
 10036e0:	mov    edx,r14d
 10036e3:	mov    rcx,rsi
 10036e6:	call   0x10055d0
 10036eb:	cmp    r14,0xffffffffffffffff
 10036ef:	jne    0x1003713
 10036f1:	shr    rdi,1
 10036f4:	lea    r8,[rip+0xffffffffffffde35]        # 0x1001530
 10036fb:	mov    rcx,rsi
 10036fe:	mov    rdx,rdi
 1003701:	call   QWORD PTR [rip+0xffffffffffffdc29]        # 0x1001330
 1003707:	mov    rcx,rsi
 100370a:	call   QWORD PTR [rip+0xffffffffffffd9b8]        # 0x10010c8
 1003710:	movsxd r14,eax
 1003713:	mov    rcx,QWORD PTR [rsp+0x58]
 1003718:	mov    r9d,r15d
 100371b:	mov    r8d,r14d
 100371e:	mov    rdx,rsi
 1003721:	call   0x1002dc0
 1003726:	test   r15,r15
 1003729:	je     0x10037fd
 100372f:	movsxd rdx,DWORD PTR [rip+0xa9ca]        # 0x100e100
 1003736:	movsx  rdi,WORD PTR [r12]
 100373b:	mov    r14d,0x8
 1003741:	lea    rcx,[r15+rdi*1]
 1003745:	mov    rax,rdx
 1003748:	cmp    rcx,rdx
 100374b:	jle    0x100376a
 100374d:	cmp    di,r14w
 1003751:	jl     0x100376a
 1003753:	lea    rcx,[rip+0xffffffffffffddb6]        # 0x1001510
 100375a:	call   0x1002b60
 100375f:	mov    WORD PTR [r12],r14w
 1003764:	mov    edx,DWORD PTR [rip+0xa996]        # 0x100e100
 100376a:	test   r15,r15
 100376d:	jle    0x1003805
 1003773:	data16 data16 data16 data16 nop WORD PTR [rax+rax*1+0x0]
 1003780:	movsx  r8,WORD PTR [r12]
 1003785:	movzx  edi,bx
 1003788:	movsxd rax,edx
 100378b:	mov    rcx,r8
 100378e:	sub    rcx,rdi
 1003791:	add    rcx,r15
 1003794:	cmp    rcx,rax
 1003797:	lea    rcx,[rsi+rdi*2]
 100379b:	jg     0x10037bc
 100379d:	movzx  eax,bx
 10037a0:	mov    edx,r15d
 10037a3:	sub    edx,eax
 10037a5:	call   0x1002d20
 10037aa:	movzx  edx,r15w
 10037ae:	sub    dx,bx
 10037b1:	movzx  ebx,r15w
 10037b5:	add    WORD PTR [r12],dx
 10037ba:	jmp    0x10037e7
 10037bc:	movsx  eax,r8w
 10037c0:	sub    edx,eax
 10037c2:	call   0x1002d20
 10037c7:	movzx  edx,WORD PTR [rip+0xa932]        # 0x100e100
 10037ce:	lea    rcx,[rip+0xffffffffffffdd3b]        # 0x1001510
 10037d5:	sub    dx,WORD PTR [r12]
 10037da:	mov    WORD PTR [r12],r14w
 10037df:	add    bx,dx
 10037e2:	call   0x1002b60
 10037e7:	movzx  eax,bx
 10037ea:	mov    rcx,r15
 10037ed:	sub    rcx,rax
 10037f0:	test   rcx,rcx
 10037f3:	jle    0x1003805
 10037f5:	mov    edx,DWORD PTR [rip+0xa905]        # 0x100e100
 10037fb:	jmp    0x1003780
 10037fd:	mov    rcx,rsi
 1003800:	call   0x1002b60
 1003805:	mov    rcx,rsi
 1003808:	call   QWORD PTR [rip+0xffffffffffffdb3a]        # 0x1001348
 100380e:	mov    eax,0x1
 1003813:	mov    rcx,QWORD PTR [rbp+0x180]
 100381a:	xor    rcx,rsp
 100381d:	call   0x100a730
 1003822:	mov    rbx,QWORD PTR [rsp+0x2e8]
 100382a:	add    rsp,0x290
 1003831:	pop    r15
 1003833:	pop    r14
 1003835:	pop    r13
 1003837:	pop    r12
 1003839:	pop    rdi
 100383a:	pop    rsi
 100383b:	pop    rbp
 100383c:	ret    
 100383d:	int3   
 100383e:	int3   
 100383f:	int3   
 1003840:	int3   
 1003841:	int3   
 1003842:	int3   
 1003843:	int3   
 1003844:	int3   
 1003845:	int3   
 1003846:	int3   
 1003847:	int3   
 1003848:	int3   
 1003849:	int3   
 100384a:	int3   
 100384b:	int3   
 100384c:	int3   
 100384d:	int3   
 100384e:	int3   
 100384f:	int3   
 1003850:	mov    QWORD PTR [rsp+0x20],r9
 1003855:	mov    QWORD PTR [rsp+0x8],rcx
 100385a:	push   rbx
 100385b:	push   rsi
 100385c:	push   rdi
 100385d:	push   r12
 100385f:	push   r13
 1003861:	push   r14
 1003863:	sub    rsp,0x68
 1003867:	mov    r14,rcx
 100386a:	lea    rcx,[rip+0xffffffffffffdcaf]        # 0x1001520
 1003871:	xor    r13d,r13d
 1003874:	mov    rbx,r9
 1003877:	movsxd rdi,edx
 100387a:	mov    WORD PTR [rsp+0x40],r13w
 1003880:	call   0x1002b60
 1003885:	mov    eax,0xfffffffa
 100388a:	mov    r8d,0x4b8
 1003890:	mov    WORD PTR [rsp+0xa8],ax
 1003898:	lea    rax,[rsp+0x48]
 100389d:	xor    r9d,r9d
 10038a0:	mov    QWORD PTR [rsp+0x30],rax
 10038a5:	lea    rax,[rsp+0xa8]
 10038ad:	movzx  edx,di
 10038b0:	mov    QWORD PTR [rsp+0x28],rax
 10038b5:	mov    rcx,r14
 10038b8:	mov    WORD PTR [rsp+0x20],r13w
 10038be:	call   0x100ad32
 10038c3:	mov    rdx,QWORD PTR [rsp+0x48]
 10038c8:	mov    r8,rbx
 10038cb:	mov    rcx,r14
 10038ce:	call   0x1003f10
 10038d3:	mov    edx,edi
 10038d5:	mov    rcx,r14
 10038d8:	movzx  esi,ax
 10038db:	call   0x1002850
 10038e0:	movzx  ecx,WORD PTR [rbx+rdi*4-0x4]
 10038e5:	movzx  r12d,ax
 10038e9:	mov    rax,rdi
 10038ec:	cmp    r12w,cx
 10038f0:	cmovl  r12w,cx
 10038f5:	lea    ecx,[r12+0x1]
 10038fa:	cmp    cx,r12w
 10038fe:	jb     0x1003eeb
 1003904:	movsx  rcx,cx
 1003908:	mov    QWORD PTR [rsp+0x60],r15
 100390d:	add    rcx,rcx
 1003910:	call   QWORD PTR [rip+0xffffffffffffda3a]        # 0x1001350
 1003916:	mov    r15,rax
 1003919:	test   rax,rax
 100391c:	jne    0x1003935
 100391e:	movzx  eax,r13w
 1003922:	mov    r15,QWORD PTR [rsp+0x60]
 1003927:	add    rsp,0x68
 100392b:	pop    r14
 100392d:	pop    r13
 100392f:	pop    r12
 1003931:	pop    rdi
 1003932:	pop    rsi
 1003933:	pop    rbx
 1003934:	ret    
 1003935:	lea    rcx,[rsp+0x40]
 100393a:	mov    QWORD PTR [rsp+0x30],r13
 100393f:	mov    QWORD PTR [rsp+0xb0],rbp
 1003947:	mov    QWORD PTR [rsp+0x28],rcx
 100394c:	movsx  ebp,r12w
 1003950:	mov    r8d,0x3f3
 1003956:	lea    eax,[rbp+0x1]
 1003959:	mov    r9,r15
 100395c:	movzx  edx,di
 100395f:	add    ax,ax
 1003962:	mov    rcx,r14
 1003965:	mov    WORD PTR [rsp+0x20],ax
 100396a:	call   0x100ad32
 100396f:	movsx  rdx,WORD PTR [rsp+0x40]
 1003975:	shr    rdx,1
 1003978:	movsx  rcx,dx
 100397c:	cmp    ecx,ebp
 100397e:	jge    0x1003995
 1003980:	mov    eax,ebp
 1003982:	lea    rdi,[r15+rcx*2]
 1003986:	sub    eax,ecx
 1003988:	mov    ecx,eax
 100398a:	mov    eax,0x20
 100398f:	movzx  eax,ax
 1003992:	rep stos WORD PTR es:[rdi],ax
 1003995:	movsx  rax,r12w
 1003999:	xor    ebx,ebx
 100399b:	lea    r13,[r15+rax*2]
 100399f:	movsx  eax,si
 10039a2:	mov    WORD PTR [r13+0x0],bx
 10039a7:	mov    edi,DWORD PTR [rip+0xa753]        # 0x100e100
 10039ad:	add    eax,ebp
 10039af:	mov    QWORD PTR [rsp+0x58],r13
 10039b4:	cmp    eax,edi
 10039b6:	jle    0x10039d3
 10039b8:	cmp    si,0x8
 10039bc:	jl     0x10039d3
 10039be:	lea    rcx,[rip+0xffffffffffffdb4b]        # 0x1001510
 10039c5:	call   0x1002b60
 10039ca:	mov    edi,DWORD PTR [rip+0xa730]        # 0x100e100
 10039d0:	lea    esi,[rbx+0x8]
 10039d3:	test   ebp,ebp
 10039d5:	jle    0x1003b29
 10039db:	xor    r13d,r13d
 10039de:	xchg   ax,ax
 10039e0:	movsx  eax,bx
 10039e3:	movsx  edx,si
 10039e6:	mov    ecx,edx
 10039e8:	sub    ecx,eax
 10039ea:	movsx  rax,bx
 10039ee:	add    ecx,ebp
 10039f0:	cmp    ecx,edi
 10039f2:	jg     0x1003a10
 10039f4:	lea    rcx,[r15+rax*2]
 10039f8:	call   0x1002b60
 10039fd:	movzx  edx,r12w
 1003a01:	sub    dx,bx
 1003a04:	movzx  ebx,r12w
 1003a08:	add    si,dx
 1003a0b:	jmp    0x1003b07
 1003a10:	sub    edi,edx
 1003a12:	lea    r14,[r15+rax*2]
 1003a16:	call   QWORD PTR [rip+0xffffffffffffd93c]        # 0x1001358
 1003a1c:	lea    rcx,[rax+0x60]
 1003a20:	call   QWORD PTR [rip+0xffffffffffffd93a]        # 0x1001360
 1003a26:	call   QWORD PTR [rip+0xffffffffffffd92c]        # 0x1001358
 1003a2c:	lea    rcx,[rax+0x30]
 1003a30:	call   QWORD PTR [rip+0xffffffffffffd92a]        # 0x1001360
 1003a36:	call   0x1006050
 1003a3b:	mov    rdx,r14
 1003a3e:	test   eax,eax
 1003a40:	je     0x1003a66
 1003a42:	mov    rcx,QWORD PTR [rip+0xbcaf]        # 0x100f6f8
 1003a49:	lea    r8d,[rdi+rdi*1]
 1003a4d:	lea    r9,[rip+0xa790]        # 0x100e1e4
 1003a54:	mov    QWORD PTR [rsp+0x20],r13
 1003a59:	call   QWORD PTR [rip+0xffffffffffffd739]        # 0x1001198
 1003a5f:	mov    edi,0x1
 1003a64:	jmp    0x1003a88
 1003a66:	mov    r9,QWORD PTR [rip+0xbc8b]        # 0x100f6f8
 1003a6d:	mov    r8d,edi
 1003a70:	lea    rax,[rip+0xa76d]        # 0x100e1e4
 1003a77:	mov    edi,0x1
 1003a7c:	mov    QWORD PTR [rsp+0x20],rax
 1003a81:	mov    ecx,edi
 1003a83:	call   0x1002c00
 1003a88:	movzx  eax,WORD PTR [rip+0xa671]        # 0x100e100
 1003a8f:	sub    ax,si
 1003a92:	mov    esi,0x8
 1003a97:	add    bx,ax
 1003a9a:	call   QWORD PTR [rip+0xffffffffffffd8b8]        # 0x1001358
 1003aa0:	lea    rcx,[rax+0x60]
 1003aa4:	call   QWORD PTR [rip+0xffffffffffffd8b6]        # 0x1001360
 1003aaa:	call   QWORD PTR [rip+0xffffffffffffd8a8]        # 0x1001358
 1003ab0:	lea    rcx,[rax+0x30]
 1003ab4:	call   QWORD PTR [rip+0xffffffffffffd8a6]        # 0x1001360
 1003aba:	call   0x1006050
 1003abf:	lea    rdx,[rip+0xffffffffffffda4a]        # 0x1001510
 1003ac6:	test   eax,eax
 1003ac8:	je     0x1003ae9
 1003aca:	mov    rcx,QWORD PTR [rip+0xbc27]        # 0x100f6f8
 1003ad1:	lea    r9,[rip+0xa708]        # 0x100e1e0
 1003ad8:	lea    r8d,[rsi-0x2]
 1003adc:	mov    QWORD PTR [rsp+0x20],r13
 1003ae1:	call   QWORD PTR [rip+0xffffffffffffd6b1]        # 0x1001198
 1003ae7:	jmp    0x1003b07
 1003ae9:	mov    r9,QWORD PTR [rip+0xbc08]        # 0x100f6f8
 1003af0:	lea    rax,[rip+0xa6e9]        # 0x100e1e0
 1003af7:	or     r8d,0xffffffff
 1003afb:	mov    ecx,edi
 1003afd:	mov    QWORD PTR [rsp+0x20],rax
 1003b02:	call   0x1002c00
 1003b07:	mov    edi,DWORD PTR [rip+0xa5f3]        # 0x100e100
 1003b0d:	movsx  eax,bx
 1003b10:	mov    ecx,ebp
 1003b12:	sub    ecx,eax
 1003b14:	test   ecx,ecx
 1003b16:	jg     0x10039e0
 1003b1c:	mov    r13,QWORD PTR [rsp+0x58]
 1003b21:	mov    r14,QWORD PTR [rsp+0xa0]
 1003b29:	movsx  eax,si
 1003b2c:	cmp    eax,edi
 1003b2e:	jge    0x1003b45
 1003b30:	lea    rcx,[rip+0xffffffffffffd9e9]        # 0x1001520
 1003b37:	call   0x1002b60
 1003b3c:	mov    edi,DWORD PTR [rip+0xa5be]        # 0x100e100
 1003b42:	inc    si
 1003b45:	movsx  eax,si
 1003b48:	cmp    eax,edi
 1003b4a:	jge    0x1003b5b
 1003b4c:	lea    rcx,[rip+0xffffffffffffd9cd]        # 0x1001520
 1003b53:	call   0x1002b60
 1003b58:	inc    si
 1003b5b:	mov    rbx,QWORD PTR [rsp+0xb8]
 1003b63:	mov    rdx,QWORD PTR [rsp+0x48]
 1003b68:	movsx  r8d,si
 1003b6c:	add    r8d,ebp
 1003b6f:	mov    rcx,r14
 1003b72:	mov    r9,rbx
 1003b75:	call   0x1004340
 1003b7a:	lea    rcx,[rip+0xffffffffffffd997]        # 0x1001518
 1003b81:	call   0x1002b60
 1003b86:	cmp    DWORD PTR [rip+0xa6d7],0x0        # 0x100e264
 1003b8d:	jne    0x1003e48
 1003b93:	xor    ecx,ecx
 1003b95:	mov    eax,0xfffffffa
 1003b9a:	mov    r8d,0x4b7
 1003ba0:	lea    edx,[rax+0x7]
 1003ba3:	mov    WORD PTR [rsp+0xa8],ax
 1003bab:	lea    rax,[rsp+0x50]
 1003bb0:	mov    QWORD PTR [rsp+0x30],rax
 1003bb5:	lea    rax,[rsp+0xa8]
 1003bbd:	mov    QWORD PTR [rsp+0x50],rcx
 1003bc2:	mov    QWORD PTR [rsp+0x28],rax
 1003bc7:	mov    WORD PTR [rsp+0x20],cx
 1003bcc:	mov    rcx,r14
 1003bcf:	xor    r9d,r9d
 1003bd2:	call   0x100ad32
 1003bd7:	cmp    QWORD PTR [rsp+0x50],0x0
 1003bdd:	mov    edi,0x3d
 1003be2:	je     0x1003be9
 1003be4:	mov    edi,0x2d
 1003be9:	lea    rcx,[rip+0xffffffffffffd930]        # 0x1001520
 1003bf0:	call   0x1002b60
 1003bf5:	mov    rdx,QWORD PTR [rsp+0x48]
 1003bfa:	mov    r8,rbx
 1003bfd:	mov    rcx,r14
 1003c00:	call   0x1003f10
 1003c05:	movzx  esi,ax
 1003c08:	test   ebp,ebp
 1003c0a:	jle    0x1003c17
 1003c0c:	movzx  eax,di
 1003c0f:	mov    ecx,ebp
 1003c11:	mov    rdi,r15
 1003c14:	rep stos WORD PTR es:[rdi],ax
 1003c17:	xor    ebx,ebx
 1003c19:	movsx  ecx,si
 1003c1c:	mov    WORD PTR [r13+0x0],bx
 1003c21:	mov    edi,DWORD PTR [rip+0xa4d9]        # 0x100e100
 1003c27:	add    ecx,ebp
 1003c29:	cmp    ecx,edi
 1003c2b:	jle    0x1003c48
 1003c2d:	cmp    si,0x8
 1003c31:	jl     0x1003c48
 1003c33:	lea    rcx,[rip+0xffffffffffffd8d6]        # 0x1001510
 1003c3a:	call   0x1002b60
 1003c3f:	mov    edi,DWORD PTR [rip+0xa4bb]        # 0x100e100
 1003c45:	lea    esi,[rbx+0x8]
 1003c48:	xor    r13d,r13d
 1003c4b:	test   ebp,ebp
 1003c4d:	jle    0x1003da4
 1003c53:	data16 data16 data16 data16 nop WORD PTR [rax+rax*1+0x0]
 1003c60:	movsx  eax,bx
 1003c63:	movsx  edx,si
 1003c66:	mov    ecx,edx
 1003c68:	sub    ecx,eax
 1003c6a:	movsx  rax,bx
 1003c6e:	add    ecx,ebp
 1003c70:	cmp    ecx,edi
 1003c72:	jg     0x1003c90
 1003c74:	lea    rcx,[r15+rax*2]
 1003c78:	call   0x1002b60
 1003c7d:	movzx  edx,r12w
 1003c81:	sub    dx,bx
 1003c84:	movzx  ebx,r12w
 1003c88:	add    si,dx
 1003c8b:	jmp    0x1003d87
 1003c90:	sub    edi,edx
 1003c92:	lea    r14,[r15+rax*2]
 1003c96:	call   QWORD PTR [rip+0xffffffffffffd6bc]        # 0x1001358
 1003c9c:	lea    rcx,[rax+0x60]
 1003ca0:	call   QWORD PTR [rip+0xffffffffffffd6ba]        # 0x1001360
 1003ca6:	call   QWORD PTR [rip+0xffffffffffffd6ac]        # 0x1001358
 1003cac:	lea    rcx,[rax+0x30]
 1003cb0:	call   QWORD PTR [rip+0xffffffffffffd6aa]        # 0x1001360
 1003cb6:	call   0x1006050
 1003cbb:	mov    rdx,r14
 1003cbe:	test   eax,eax
 1003cc0:	je     0x1003ce6
 1003cc2:	mov    rcx,QWORD PTR [rip+0xba2f]        # 0x100f6f8
 1003cc9:	lea    r8d,[rdi+rdi*1]
 1003ccd:	lea    r9,[rip+0xa510]        # 0x100e1e4
 1003cd4:	mov    QWORD PTR [rsp+0x20],r13
 1003cd9:	call   QWORD PTR [rip+0xffffffffffffd4b9]        # 0x1001198
 1003cdf:	mov    edi,0x1
 1003ce4:	jmp    0x1003d08
 1003ce6:	mov    r9,QWORD PTR [rip+0xba0b]        # 0x100f6f8
 1003ced:	mov    r8d,edi
 1003cf0:	lea    rax,[rip+0xa4ed]        # 0x100e1e4
 1003cf7:	mov    edi,0x1
 1003cfc:	mov    QWORD PTR [rsp+0x20],rax
 1003d01:	mov    ecx,edi
 1003d03:	call   0x1002c00
 1003d08:	movzx  eax,WORD PTR [rip+0xa3f1]        # 0x100e100
 1003d0f:	sub    ax,si
 1003d12:	mov    esi,0x8
 1003d17:	add    bx,ax
 1003d1a:	call   QWORD PTR [rip+0xffffffffffffd638]        # 0x1001358
 1003d20:	lea    rcx,[rax+0x60]
 1003d24:	call   QWORD PTR [rip+0xffffffffffffd636]        # 0x1001360
 1003d2a:	call   QWORD PTR [rip+0xffffffffffffd628]        # 0x1001358
 1003d30:	lea    rcx,[rax+0x30]
 1003d34:	call   QWORD PTR [rip+0xffffffffffffd626]        # 0x1001360
 1003d3a:	call   0x1006050
 1003d3f:	lea    rdx,[rip+0xffffffffffffd7ca]        # 0x1001510
 1003d46:	test   eax,eax
 1003d48:	je     0x1003d69
 1003d4a:	mov    rcx,QWORD PTR [rip+0xb9a7]        # 0x100f6f8
 1003d51:	lea    r9,[rip+0xa488]        # 0x100e1e0
 1003d58:	lea    r8d,[rsi-0x2]
 1003d5c:	mov    QWORD PTR [rsp+0x20],r13
 1003d61:	call   QWORD PTR [rip+0xffffffffffffd431]        # 0x1001198
 1003d67:	jmp    0x1003d87
 1003d69:	mov    r9,QWORD PTR [rip+0xb988]        # 0x100f6f8
 1003d70:	lea    rax,[rip+0xa469]        # 0x100e1e0
 1003d77:	or     r8d,0xffffffff
 1003d7b:	mov    ecx,edi
 1003d7d:	mov    QWORD PTR [rsp+0x20],rax
 1003d82:	call   0x1002c00
 1003d87:	mov    edi,DWORD PTR [rip+0xa373]        # 0x100e100
 1003d8d:	movsx  eax,bx
 1003d90:	mov    ecx,ebp
 1003d92:	sub    ecx,eax
 1003d94:	test   ecx,ecx
 1003d96:	jg     0x1003c60
 1003d9c:	mov    r14,QWORD PTR [rsp+0xa0]
 1003da4:	movsx  eax,si
 1003da7:	cmp    eax,edi
 1003da9:	jge    0x1003dba
 1003dab:	lea    rcx,[rip+0xffffffffffffd76e]        # 0x1001520
 1003db2:	call   0x1002b60
 1003db7:	inc    si
 1003dba:	mov    r9,QWORD PTR [rsp+0xb8]
 1003dc2:	mov    rdx,QWORD PTR [rsp+0x48]
 1003dc7:	movsx  r8d,si
 1003dcb:	add    r8d,ebp
 1003dce:	mov    rcx,r14
 1003dd1:	call   0x1004340
 1003dd6:	call   QWORD PTR [rip+0xffffffffffffd57c]        # 0x1001358
 1003ddc:	lea    rcx,[rax+0x60]
 1003de0:	call   QWORD PTR [rip+0xffffffffffffd57a]        # 0x1001360
 1003de6:	call   QWORD PTR [rip+0xffffffffffffd56c]        # 0x1001358
 1003dec:	lea    rcx,[rax+0x30]
 1003df0:	call   QWORD PTR [rip+0xffffffffffffd56a]        # 0x1001360
 1003df6:	call   0x1006050
 1003dfb:	lea    rbx,[rip+0xa3de]        # 0x100e1e0
 1003e02:	lea    rdx,[rip+0xffffffffffffd70f]        # 0x1001518
 1003e09:	test   eax,eax
 1003e0b:	je     0x1003e2a
 1003e0d:	mov    rcx,QWORD PTR [rip+0xb8e4]        # 0x100f6f8
 1003e14:	mov    r9,rbx
 1003e17:	mov    r8d,0x4
 1003e1d:	mov    QWORD PTR [rsp+0x20],r13
 1003e22:	call   QWORD PTR [rip+0xffffffffffffd370]        # 0x1001198
 1003e28:	jmp    0x1003e52
 1003e2a:	mov    r9,QWORD PTR [rip+0xb8c7]        # 0x100f6f8
 1003e31:	mov    edi,0x1
 1003e36:	or     r8d,0xffffffff
 1003e3a:	mov    ecx,edi
 1003e3c:	mov    QWORD PTR [rsp+0x20],rbx
 1003e41:	call   0x1002c00
 1003e46:	jmp    0x1003e57
 1003e48:	xor    r13d,r13d
 1003e4b:	lea    rbx,[rip+0xa38e]        # 0x100e1e0
 1003e52:	mov    edi,0x1
 1003e57:	mov    rcx,r15
 1003e5a:	call   QWORD PTR [rip+0xffffffffffffd4e8]        # 0x1001348
 1003e60:	cmp    DWORD PTR [rip+0xa3fd],0x0        # 0x100e264
 1003e67:	mov    rbp,QWORD PTR [rsp+0xb0]
 1003e6f:	je     0x1003ee3
 1003e71:	mov    rcx,r14
 1003e74:	call   0x100ad0e
 1003e79:	call   QWORD PTR [rip+0xffffffffffffd4d9]        # 0x1001358
 1003e7f:	lea    rcx,[rax+0x60]
 1003e83:	call   QWORD PTR [rip+0xffffffffffffd4d7]        # 0x1001360
 1003e89:	call   QWORD PTR [rip+0xffffffffffffd4c9]        # 0x1001358
 1003e8f:	lea    rcx,[rax+0x30]
 1003e93:	call   QWORD PTR [rip+0xffffffffffffd4c7]        # 0x1001360
 1003e99:	call   0x1006050
 1003e9e:	lea    rdx,[rip+0xffffffffffffd673]        # 0x1001518
 1003ea5:	test   eax,eax
 1003ea7:	je     0x1003ecc
 1003ea9:	mov    rcx,QWORD PTR [rip+0xb848]        # 0x100f6f8
 1003eb0:	mov    r9,rbx
 1003eb3:	mov    r8d,0x4
 1003eb9:	mov    QWORD PTR [rsp+0x20],r13
 1003ebe:	call   QWORD PTR [rip+0xffffffffffffd2d4]        # 0x1001198
 1003ec4:	movzx  eax,di
 1003ec7:	jmp    0x1003922
 1003ecc:	mov    r9,QWORD PTR [rip+0xb825]        # 0x100f6f8
 1003ed3:	or     r8d,0xffffffff
 1003ed7:	mov    ecx,edi
 1003ed9:	mov    QWORD PTR [rsp+0x20],rbx
 1003ede:	call   0x1002c00
 1003ee3:	movzx  eax,di
 1003ee6:	jmp    0x1003922
 1003eeb:	movzx  eax,r13w
 1003eef:	add    rsp,0x68
 1003ef3:	pop    r14
 1003ef5:	pop    r13
 1003ef7:	pop    r12
 1003ef9:	pop    rdi
 1003efa:	pop    rsi
 1003efb:	pop    rbx
 1003efc:	ret    
 1003efd:	int3   
 1003efe:	int3   
 1003eff:	int3   
 1003f00:	int3   
 1003f01:	int3   
 1003f02:	int3   
 1003f03:	int3   
 1003f04:	int3   
 1003f05:	int3   
 1003f06:	int3   
 1003f07:	int3   
 1003f08:	int3   
 1003f09:	int3   
 1003f0a:	int3   
 1003f0b:	int3   
 1003f0c:	int3   
 1003f0d:	int3   
 1003f0e:	int3   
 1003f0f:	int3   
 1003f10:	mov    r11,rsp
 1003f13:	push   rbx
 1003f14:	push   rdi
 1003f15:	push   r14
 1003f17:	sub    rsp,0x180
 1003f1e:	mov    rax,QWORD PTR [rip+0xa20b]        # 0x100e130
 1003f25:	xor    rax,rsp
 1003f28:	mov    QWORD PTR [rsp+0x160],rax
 1003f30:	mov    eax,0x1
 1003f35:	mov    QWORD PTR [rsp+0x48],r8
 1003f3a:	mov    rdi,rdx
 1003f3d:	mov    QWORD PTR [rsp+0x58],rdx
 1003f42:	mov    QWORD PTR [rsp+0x50],rcx
 1003f47:	movzx  ebx,ax
 1003f4a:	mov    WORD PTR [rsp+0x40],ax
 1003f4f:	movzx  r14d,ax
 1003f53:	cmp    rdx,rax
 1003f56:	jle    0x1004319
 1003f5c:	mov    QWORD PTR [r11+0x10],rbp
 1003f60:	mov    QWORD PTR [r11+0x18],rsi
 1003f64:	mov    QWORD PTR [r11+0x20],r12
 1003f68:	mov    QWORD PTR [r11-0x20],r13
 1003f6c:	mov    QWORD PTR [r11-0x28],r15
 1003f70:	xor    esi,esi
 1003f72:	lea    r15d,[rax+0x7]
 1003f76:	lea    rbp,[rip+0xa263]        # 0x100e1e0
 1003f7d:	nop    DWORD PTR [rax]
 1003f80:	test   r8,r8
 1003f83:	je     0x1003f8d
 1003f85:	movzx  r12d,WORD PTR [r8+rax*4-0x4]
 1003f8b:	jmp    0x1003f99
 1003f8d:	movsx  edx,bx
 1003f90:	call   0x1002850
 1003f95:	movzx  r12d,ax
 1003f99:	movsx  r13d,r12w
 1003f9d:	movsx  ecx,r14w
 1003fa1:	add    ecx,r13d
 1003fa4:	cmp    ecx,DWORD PTR [rip+0xa156]        # 0x100e100
 1003faa:	jle    0x1003fc2
 1003fac:	cmp    r14w,0x8
 1003fb1:	jl     0x1003fc2
 1003fb3:	lea    rcx,[rip+0xffffffffffffd556]        # 0x1001510
 1003fba:	call   0x1002b60
 1003fbf:	mov    r14d,r15d
 1003fc2:	movzx  r15d,si
 1003fc6:	test   r13d,r13d
 1003fc9:	jle    0x1004256
 1003fcf:	nop
 1003fd0:	movsx  eax,r15w
 1003fd4:	mov    esi,r13d
 1003fd7:	movsx  ebp,r14w
 1003fdb:	sub    esi,eax
 1003fdd:	lea    eax,[rsi+rbp*1]
 1003fe0:	cmp    eax,DWORD PTR [rip+0xa11a]        # 0x100e100
 1003fe6:	jg     0x10040c4
 1003fec:	xor    ebp,ebp
 1003fee:	movzx  ebx,bp
 1003ff1:	test   esi,esi
 1003ff3:	jle    0x10040a6
 1003ff9:	lea    r13d,[rbp+0x1]
 1003ffd:	nop    DWORD PTR [rax]
 1004000:	call   QWORD PTR [rip+0xffffffffffffd352]        # 0x1001358
 1004006:	lea    rcx,[rax+0x60]
 100400a:	call   QWORD PTR [rip+0xffffffffffffd350]        # 0x1001360
 1004010:	call   QWORD PTR [rip+0xffffffffffffd342]        # 0x1001358
 1004016:	lea    rcx,[rax+0x30]
 100401a:	call   QWORD PTR [rip+0xffffffffffffd340]        # 0x1001360
 1004020:	call   0x1006050
 1004025:	test   eax,eax
 1004027:	je     0x100403f
 1004029:	mov    rcx,QWORD PTR [rip+0xb6c8]        # 0x100f6f8
 1004030:	mov    r8d,0x2
 1004036:	lea    rdx,[rip+0xffffffffffffd4e3]        # 0x1001520
 100403d:	jmp    0x1004082
 100403f:	mov    rdi,QWORD PTR [rip+0xb6b2]        # 0x100f6f8
 1004046:	mov    QWORD PTR [rsp+0x38],rbp
 100404b:	lea    rax,[rsp+0x60]
 1004050:	mov    QWORD PTR [rsp+0x30],rbp
 1004055:	lea    r8,[rip+0xffffffffffffd4c4]        # 0x1001520
 100405c:	mov    r9d,r13d
 100405f:	xor    edx,edx
 1004061:	mov    ecx,r13d
 1004064:	mov    DWORD PTR [rsp+0x28],0x100
 100406c:	mov    QWORD PTR [rsp+0x20],rax
 1004071:	call   QWORD PTR [rip+0xffffffffffffcf99]        # 0x1001010
 1004077:	lea    rdx,[rsp+0x60]
 100407c:	mov    r8d,eax
 100407f:	mov    rcx,rdi
 1004082:	lea    r9,[rip+0xa157]        # 0x100e1e0
 1004089:	mov    QWORD PTR [rsp+0x20],rbp
 100408e:	call   QWORD PTR [rip+0xffffffffffffd104]        # 0x1001198
 1004094:	inc    bx
 1004097:	movsx  eax,bx
 100409a:	cmp    eax,esi
 100409c:	jl     0x1004000
 10040a2:	movsx  r13d,r12w
 10040a6:	movzx  eax,r12w
 10040aa:	lea    rbp,[rip+0xa12f]        # 0x100e1e0
 10040b1:	sub    ax,r15w
 10040b5:	movzx  r15d,r12w
 10040b9:	add    r14w,ax
 10040bd:	xor    esi,esi
 10040bf:	jmp    0x100423b
 10040c4:	mov    eax,DWORD PTR [rip+0xa036]        # 0x100e100
 10040ca:	xor    esi,esi
 10040cc:	sub    eax,ebp
 10040ce:	movzx  edi,si
 10040d1:	test   eax,eax
 10040d3:	jle    0x100418e
 10040d9:	lea    r13d,[rsi+0x1]
 10040dd:	nop    DWORD PTR [rax]
 10040e0:	call   QWORD PTR [rip+0xffffffffffffd272]        # 0x1001358
 10040e6:	lea    rcx,[rax+0x60]
 10040ea:	call   QWORD PTR [rip+0xffffffffffffd270]        # 0x1001360
 10040f0:	call   QWORD PTR [rip+0xffffffffffffd262]        # 0x1001358
 10040f6:	lea    rcx,[rax+0x30]
 10040fa:	call   QWORD PTR [rip+0xffffffffffffd260]        # 0x1001360
 1004100:	call   0x1006050
 1004105:	test   eax,eax
 1004107:	je     0x100411f
 1004109:	mov    rcx,QWORD PTR [rip+0xb5e8]        # 0x100f6f8
 1004110:	mov    r8d,0x2
 1004116:	lea    rdx,[rip+0xffffffffffffd403]        # 0x1001520
 100411d:	jmp    0x1004162
 100411f:	mov    rbx,QWORD PTR [rip+0xb5d2]        # 0x100f6f8
 1004126:	mov    QWORD PTR [rsp+0x38],rsi
 100412b:	lea    rax,[rsp+0x60]
 1004130:	mov    QWORD PTR [rsp+0x30],rsi
 1004135:	lea    r8,[rip+0xffffffffffffd3e4]        # 0x1001520
 100413c:	mov    r9d,r13d
 100413f:	xor    edx,edx
 1004141:	mov    ecx,r13d
 1004144:	mov    DWORD PTR [rsp+0x28],0x100
 100414c:	mov    QWORD PTR [rsp+0x20],rax
 1004151:	call   QWORD PTR [rip+0xffffffffffffceb9]        # 0x1001010
 1004157:	lea    rdx,[rsp+0x60]
 100415c:	mov    r8d,eax
 100415f:	mov    rcx,rbx
 1004162:	lea    r9,[rip+0xa077]        # 0x100e1e0
 1004169:	mov    QWORD PTR [rsp+0x20],rsi
 100416e:	call   QWORD PTR [rip+0xffffffffffffd024]        # 0x1001198
 1004174:	mov    ecx,DWORD PTR [rip+0x9f86]        # 0x100e100
 100417a:	inc    di
 100417d:	sub    ecx,ebp
 100417f:	movsx  eax,di
 1004182:	cmp    eax,ecx
 1004184:	jl     0x10040e0
 100418a:	movsx  r13d,r12w
 100418e:	movzx  eax,WORD PTR [rip+0x9f6b]        # 0x100e100
 1004195:	sub    ax,r14w
 1004199:	mov    r14d,0x8
 100419f:	add    r15w,ax
 10041a3:	call   QWORD PTR [rip+0xffffffffffffd1af]        # 0x1001358
 10041a9:	lea    rcx,[rax+0x60]
 10041ad:	call   QWORD PTR [rip+0xffffffffffffd1ad]        # 0x1001360
 10041b3:	call   QWORD PTR [rip+0xffffffffffffd19f]        # 0x1001358
 10041b9:	lea    rcx,[rax+0x30]
 10041bd:	call   QWORD PTR [rip+0xffffffffffffd19d]        # 0x1001360
 10041c3:	call   0x1006050
 10041c8:	test   eax,eax
 10041ca:	je     0x10041e0
 10041cc:	mov    rcx,QWORD PTR [rip+0xb525]        # 0x100f6f8
 10041d3:	lea    r8d,[r14-0x2]
 10041d7:	lea    rdx,[rip+0xffffffffffffd332]        # 0x1001510
 10041de:	jmp    0x1004226
 10041e0:	mov    rbx,QWORD PTR [rip+0xb511]        # 0x100f6f8
 10041e7:	mov    QWORD PTR [rsp+0x38],rsi
 10041ec:	xor    edx,edx
 10041ee:	lea    rax,[rsp+0x60]
 10041f3:	mov    QWORD PTR [rsp+0x30],rsi
 10041f8:	lea    r8,[rip+0xffffffffffffd311]        # 0x1001510
 10041ff:	lea    ecx,[rdx+0x1]
 1004202:	mov    r9d,0x3
 1004208:	mov    DWORD PTR [rsp+0x28],0x100
 1004210:	mov    QWORD PTR [rsp+0x20],rax
 1004215:	call   QWORD PTR [rip+0xffffffffffffcdf5]        # 0x1001010
 100421b:	lea    rdx,[rsp+0x60]
 1004220:	mov    r8d,eax
 1004223:	mov    rcx,rbx
 1004226:	lea    rbp,[rip+0x9fb3]        # 0x100e1e0
 100422d:	mov    QWORD PTR [rsp+0x20],rsi
 1004232:	mov    r9,rbp
 1004235:	call   QWORD PTR [rip+0xffffffffffffcf5d]        # 0x1001198
 100423b:	movsx  eax,r15w
 100423f:	mov    ecx,r13d
 1004242:	sub    ecx,eax
 1004244:	test   ecx,ecx
 1004246:	jg     0x1003fd0
 100424c:	movzx  ebx,WORD PTR [rsp+0x40]
 1004251:	mov    rdi,QWORD PTR [rsp+0x58]
 1004256:	movsx  eax,r14w
 100425a:	cmp    eax,DWORD PTR [rip+0x9ea0]        # 0x100e100
 1004260:	jge    0x10042cc
 1004262:	call   QWORD PTR [rip+0xffffffffffffd0f0]        # 0x1001358
 1004268:	lea    rcx,[rax+0x60]
 100426c:	call   QWORD PTR [rip+0xffffffffffffd0ee]        # 0x1001360
 1004272:	call   QWORD PTR [rip+0xffffffffffffd0e0]        # 0x1001358
 1004278:	lea    rcx,[rax+0x30]
 100427c:	call   QWORD PTR [rip+0xffffffffffffd0de]        # 0x1001360
 1004282:	call   0x1006050
 1004287:	lea    rdx,[rip+0xffffffffffffd292]        # 0x1001520
 100428e:	test   eax,eax
 1004290:	je     0x10042af
 1004292:	mov    rcx,QWORD PTR [rip+0xb45f]        # 0x100f6f8
 1004299:	mov    r9,rbp
 100429c:	mov    r8d,0x2
 10042a2:	mov    QWORD PTR [rsp+0x20],rsi
 10042a7:	call   QWORD PTR [rip+0xffffffffffffceeb]        # 0x1001198
 10042ad:	jmp    0x10042c8
 10042af:	mov    r9,QWORD PTR [rip+0xb442]        # 0x100f6f8
 10042b6:	or     r8d,0xffffffff
 10042ba:	mov    QWORD PTR [rsp+0x20],rbp
 10042bf:	lea    ecx,[r8+0x2]
 10042c3:	call   0x1002c00
 10042c8:	inc    r14w
 10042cc:	mov    r8,QWORD PTR [rsp+0x48]
 10042d1:	mov    rcx,QWORD PTR [rsp+0x50]
 10042d6:	inc    bx
 10042d9:	movsx  rax,bx
 10042dd:	mov    WORD PTR [rsp+0x40],bx
 10042e2:	mov    r15d,0x8
 10042e8:	cmp    rax,rdi
 10042eb:	jl     0x1003f80
 10042f1:	mov    r15,QWORD PTR [rsp+0x170]
 10042f9:	mov    r13,QWORD PTR [rsp+0x178]
 1004301:	mov    r12,QWORD PTR [rsp+0x1b8]
 1004309:	mov    rsi,QWORD PTR [rsp+0x1b0]
 1004311:	mov    rbp,QWORD PTR [rsp+0x1a8]
 1004319:	movzx  eax,r14w
 100431d:	mov    rcx,QWORD PTR [rsp+0x160]
 1004325:	xor    rcx,rsp
 1004328:	call   0x100a730
 100432d:	add    rsp,0x180
 1004334:	pop    r14
 1004336:	pop    rdi
 1004337:	pop    rbx
 1004338:	ret    
 1004339:	int3   
 100433a:	int3   
 100433b:	int3   
 100433c:	int3   
 100433d:	int3   
 100433e:	int3   
 100433f:	int3   
 1004340:	rex push rbx
 1004342:	push   rbp
 1004343:	push   rsi
 1004344:	push   r14
 1004346:	push   r15
 1004348:	sub    rsp,0x190
 100434f:	mov    rax,QWORD PTR [rip+0x9dda]        # 0x100e130
 1004356:	xor    rax,rsp
 1004359:	mov    QWORD PTR [rsp+0x170],rax
 1004361:	lea    rax,[rsp+0x48]
 1004366:	xor    r15d,r15d
 1004369:	mov    rsi,r9
 100436c:	mov    QWORD PTR [rsp+0x30],rax
 1004371:	mov    QWORD PTR [rsp+0x58],r9
 1004376:	mov    r14d,r8d
 1004379:	movsx  ebx,dx
 100437c:	mov    r8d,0x3e9
 1004382:	xor    r9d,r9d
 1004385:	xor    edx,edx
 1004387:	mov    QWORD PTR [rsp+0x28],r15
 100438c:	mov    rbp,rcx
 100438f:	mov    WORD PTR [rsp+0x20],r15w
 1004395:	mov    QWORD PTR [rsp+0x60],rcx
 100439a:	call   0x100ad32
 100439f:	inc    ebx
 10043a1:	movsxd rax,ebx
 10043a4:	mov    DWORD PTR [rsp+0x40],ebx
 10043a8:	cmp    rax,QWORD PTR [rsp+0x48]
 10043ad:	jg     0x1004771
 10043b3:	mov    QWORD PTR [rsp+0x1d0],rdi
 10043bb:	lea    rdi,[rsi-0x4]
 10043bf:	mov    QWORD PTR [rsp+0x188],r12
 10043c7:	lea    rdi,[rdi+rax*4]
 10043cb:	mov    QWORD PTR [rsp+0x180],r13
 10043d3:	mov    QWORD PTR [rsp+0x50],rdi
 10043d8:	test   rsi,rsi
 10043db:	je     0x10043e3
 10043dd:	movzx  r12d,WORD PTR [rdi]
 10043e1:	jmp    0x10043f1
 10043e3:	mov    edx,ebx
 10043e5:	mov    rcx,rbp
 10043e8:	call   0x1002850
 10043ed:	movzx  r12d,ax
 10043f1:	movsx  r13d,r12w
 10043f5:	movsx  ecx,r14w
 10043f9:	add    ecx,r13d
 10043fc:	cmp    ecx,DWORD PTR [rip+0x9cfe]        # 0x100e100
 1004402:	jle    0x100441d
 1004404:	cmp    r14w,0x8
 1004409:	jl     0x100441d
 100440b:	lea    rcx,[rip+0xffffffffffffd0fe]        # 0x1001510
 1004412:	call   0x1002b60
 1004417:	mov    r14d,0x8
 100441d:	test   r13d,r13d
 1004420:	jle    0x10046b1
 1004426:	data16 nop WORD PTR [rax+rax*1+0x0]
 1004430:	movsx  eax,r15w
 1004434:	mov    esi,r13d
 1004437:	movsx  ebp,r14w
 100443b:	sub    esi,eax
 100443d:	lea    eax,[rsi+rbp*1]
 1004440:	cmp    eax,DWORD PTR [rip+0x9cba]        # 0x100e100
 1004446:	jg     0x100451a
 100444c:	xor    ebp,ebp
 100444e:	movzx  ebx,bp
 1004451:	test   esi,esi
 1004453:	jle    0x1004505
 1004459:	lea    r13,[rip+0x9d80]        # 0x100e1e0
 1004460:	call   QWORD PTR [rip+0xffffffffffffcef2]        # 0x1001358
 1004466:	lea    rcx,[rax+0x60]
 100446a:	call   QWORD PTR [rip+0xffffffffffffcef0]        # 0x1001360
 1004470:	call   QWORD PTR [rip+0xffffffffffffcee2]        # 0x1001358
 1004476:	lea    rcx,[rax+0x30]
 100447a:	call   QWORD PTR [rip+0xffffffffffffcee0]        # 0x1001360
 1004480:	call   0x1006050
 1004485:	test   eax,eax
 1004487:	je     0x100449f
 1004489:	mov    rcx,QWORD PTR [rip+0xb268]        # 0x100f6f8
 1004490:	mov    r8d,0x2
 1004496:	lea    rdx,[rip+0xffffffffffffd083]        # 0x1001520
 100449d:	jmp    0x10044e5
 100449f:	mov    rdi,QWORD PTR [rip+0xb252]        # 0x100f6f8
 10044a6:	mov    QWORD PTR [rsp+0x38],rbp
 10044ab:	lea    rax,[rsp+0x70]
 10044b0:	mov    r9d,0x1
 10044b6:	mov    QWORD PTR [rsp+0x30],rbp
 10044bb:	lea    r8,[rip+0xffffffffffffd05e]        # 0x1001520
 10044c2:	xor    edx,edx
 10044c4:	mov    ecx,r9d
 10044c7:	mov    DWORD PTR [rsp+0x28],0x100
 10044cf:	mov    QWORD PTR [rsp+0x20],rax
 10044d4:	call   QWORD PTR [rip+0xffffffffffffcb36]        # 0x1001010
 10044da:	lea    rdx,[rsp+0x70]
 10044df:	mov    r8d,eax
 10044e2:	mov    rcx,rdi
 10044e5:	mov    r9,r13
 10044e8:	mov    QWORD PTR [rsp+0x20],rbp
 10044ed:	call   QWORD PTR [rip+0xffffffffffffcca5]        # 0x1001198
 10044f3:	inc    bx
 10044f6:	movsx  eax,bx
 10044f9:	cmp    eax,esi
 10044fb:	jl     0x1004460
 1004501:	movsx  r13d,r12w
 1004505:	movzx  eax,r12w
 1004509:	sub    ax,r15w
 100450d:	movzx  r15d,r12w
 1004511:	add    r14w,ax
 1004515:	jmp    0x100468d
 100451a:	mov    eax,DWORD PTR [rip+0x9be0]        # 0x100e100
 1004520:	xor    esi,esi
 1004522:	sub    eax,ebp
 1004524:	movzx  edi,si
 1004527:	test   eax,eax
 1004529:	jle    0x10045e3
 100452f:	lea    r13,[rip+0x9caa]        # 0x100e1e0
 1004536:	call   QWORD PTR [rip+0xffffffffffffce1c]        # 0x1001358
 100453c:	lea    rcx,[rax+0x60]
 1004540:	call   QWORD PTR [rip+0xffffffffffffce1a]        # 0x1001360
 1004546:	call   QWORD PTR [rip+0xffffffffffffce0c]        # 0x1001358
 100454c:	lea    rcx,[rax+0x30]
 1004550:	call   QWORD PTR [rip+0xffffffffffffce0a]        # 0x1001360
 1004556:	call   0x1006050
 100455b:	test   eax,eax
 100455d:	je     0x1004575
 100455f:	mov    rcx,QWORD PTR [rip+0xb192]        # 0x100f6f8
 1004566:	mov    r8d,0x2
 100456c:	lea    rdx,[rip+0xffffffffffffcfad]        # 0x1001520
 1004573:	jmp    0x10045bb
 1004575:	mov    rbx,QWORD PTR [rip+0xb17c]        # 0x100f6f8
 100457c:	mov    QWORD PTR [rsp+0x38],rsi
 1004581:	lea    rax,[rsp+0x70]
 1004586:	mov    r9d,0x1
 100458c:	mov    QWORD PTR [rsp+0x30],rsi
 1004591:	lea    r8,[rip+0xffffffffffffcf88]        # 0x1001520
 1004598:	xor    edx,edx
 100459a:	mov    ecx,r9d
 100459d:	mov    DWORD PTR [rsp+0x28],0x100
 10045a5:	mov    QWORD PTR [rsp+0x20],rax
 10045aa:	call   QWORD PTR [rip+0xffffffffffffca60]        # 0x1001010
 10045b0:	lea    rdx,[rsp+0x70]
 10045b5:	mov    r8d,eax
 10045b8:	mov    rcx,rbx
 10045bb:	mov    r9,r13
 10045be:	mov    QWORD PTR [rsp+0x20],rsi
 10045c3:	call   QWORD PTR [rip+0xffffffffffffcbcf]        # 0x1001198
 10045c9:	mov    ecx,DWORD PTR [rip+0x9b31]        # 0x100e100
 10045cf:	inc    di
 10045d2:	sub    ecx,ebp
 10045d4:	movsx  eax,di
 10045d7:	cmp    eax,ecx
 10045d9:	jl     0x1004536
 10045df:	movsx  r13d,r12w
 10045e3:	movzx  eax,WORD PTR [rip+0x9b16]        # 0x100e100
 10045ea:	sub    ax,r14w
 10045ee:	mov    r14d,0x8
 10045f4:	add    r15w,ax
 10045f8:	call   QWORD PTR [rip+0xffffffffffffcd5a]        # 0x1001358
 10045fe:	lea    rcx,[rax+0x60]
 1004602:	call   QWORD PTR [rip+0xffffffffffffcd58]        # 0x1001360
 1004608:	call   QWORD PTR [rip+0xffffffffffffcd4a]        # 0x1001358
 100460e:	lea    rcx,[rax+0x30]
 1004612:	call   QWORD PTR [rip+0xffffffffffffcd48]        # 0x1001360
 1004618:	call   0x1006050
 100461d:	test   eax,eax
 100461f:	je     0x1004635
 1004621:	mov    rcx,QWORD PTR [rip+0xb0d0]        # 0x100f6f8
 1004628:	lea    r8d,[r14-0x2]
 100462c:	lea    rdx,[rip+0xffffffffffffcedd]        # 0x1001510
 1004633:	jmp    0x100467b
 1004635:	mov    rbx,QWORD PTR [rip+0xb0bc]        # 0x100f6f8
 100463c:	mov    QWORD PTR [rsp+0x38],rsi
 1004641:	xor    edx,edx
 1004643:	lea    rax,[rsp+0x70]
 1004648:	mov    QWORD PTR [rsp+0x30],rsi
 100464d:	lea    r8,[rip+0xffffffffffffcebc]        # 0x1001510
 1004654:	lea    ecx,[rdx+0x1]
 1004657:	mov    r9d,0x3
 100465d:	mov    DWORD PTR [rsp+0x28],0x100
 1004665:	mov    QWORD PTR [rsp+0x20],rax
 100466a:	call   QWORD PTR [rip+0xffffffffffffc9a0]        # 0x1001010
 1004670:	lea    rdx,[rsp+0x70]
 1004675:	mov    r8d,eax
 1004678:	mov    rcx,rbx
 100467b:	lea    r9,[rip+0x9b5e]        # 0x100e1e0
 1004682:	mov    QWORD PTR [rsp+0x20],rsi
 1004687:	call   QWORD PTR [rip+0xffffffffffffcb0b]        # 0x1001198
 100468d:	movsx  eax,r15w
 1004691:	mov    ecx,r13d
 1004694:	sub    ecx,eax
 1004696:	test   ecx,ecx
 1004698:	jg     0x1004430
 100469e:	mov    ebx,DWORD PTR [rsp+0x40]
 10046a2:	mov    rdi,QWORD PTR [rsp+0x50]
 10046a7:	mov    rsi,QWORD PTR [rsp+0x58]
 10046ac:	mov    rbp,QWORD PTR [rsp+0x60]
 10046b1:	movsx  eax,r14w
 10046b5:	cmp    eax,DWORD PTR [rip+0x9a45]        # 0x100e100
 10046bb:	jge    0x1004736
 10046bd:	call   QWORD PTR [rip+0xffffffffffffcc95]        # 0x1001358
 10046c3:	lea    rcx,[rax+0x60]
 10046c7:	call   QWORD PTR [rip+0xffffffffffffcc93]        # 0x1001360
 10046cd:	call   QWORD PTR [rip+0xffffffffffffcc85]        # 0x1001358
 10046d3:	lea    rcx,[rax+0x30]
 10046d7:	call   QWORD PTR [rip+0xffffffffffffcc83]        # 0x1001360
 10046dd:	call   0x1006050
 10046e2:	lea    rdx,[rip+0xffffffffffffce37]        # 0x1001520
 10046e9:	test   eax,eax
 10046eb:	je     0x1004712
 10046ed:	mov    rcx,QWORD PTR [rip+0xb004]        # 0x100f6f8
 10046f4:	lea    r9,[rip+0x9ae5]        # 0x100e1e0
 10046fb:	mov    r8d,0x2
 1004701:	mov    QWORD PTR [rsp+0x20],0x0
 100470a:	call   QWORD PTR [rip+0xffffffffffffca88]        # 0x1001198
 1004710:	jmp    0x1004732
 1004712:	mov    r9,QWORD PTR [rip+0xafdf]        # 0x100f6f8
 1004719:	or     r8d,0xffffffff
 100471d:	lea    rax,[rip+0x9abc]        # 0x100e1e0
 1004724:	lea    ecx,[r8+0x2]
 1004728:	mov    QWORD PTR [rsp+0x20],rax
 100472d:	call   0x1002c00
 1004732:	inc    r14w
 1004736:	inc    ebx
 1004738:	add    rdi,0x4
 100473c:	mov    r15d,0x0
 1004742:	movsxd rax,ebx
 1004745:	mov    DWORD PTR [rsp+0x40],ebx
 1004749:	mov    QWORD PTR [rsp+0x50],rdi
 100474e:	cmp    rax,QWORD PTR [rsp+0x48]
 1004753:	jle    0x10043d8
 1004759:	mov    r13,QWORD PTR [rsp+0x180]
 1004761:	mov    r12,QWORD PTR [rsp+0x188]
 1004769:	mov    rdi,QWORD PTR [rsp+0x1d0]
 1004771:	mov    rcx,QWORD PTR [rsp+0x170]
 1004779:	xor    rcx,rsp
 100477c:	call   0x100a730
 1004781:	add    rsp,0x190
 1004788:	pop    r15
 100478a:	pop    r14
 100478c:	pop    rsi
 100478d:	pop    rbp
 100478e:	pop    rbx
 100478f:	ret    
 1004790:	int3   
 1004791:	int3   
 1004792:	int3   
 1004793:	int3   
 1004794:	int3   
 1004795:	int3   
 1004796:	int3   
 1004797:	int3   
 1004798:	int3   
 1004799:	int3   
 100479a:	int3   
 100479b:	int3   
 100479c:	int3   
 100479d:	int3   
 100479e:	int3   
 100479f:	int3   
 10047a0:	mov    QWORD PTR [rsp+0x8],rbx
 10047a5:	mov    QWORD PTR [rsp+0x10],rdi
 10047aa:	push   rbp
 10047ab:	lea    rbp,[rsp-0x140]
 10047b3:	sub    rsp,0x240
 10047ba:	mov    rax,QWORD PTR [rip+0x996f]        # 0x100e130
 10047c1:	xor    rax,rsp
 10047c4:	mov    QWORD PTR [rbp+0x130],rax
 10047cb:	mov    rcx,QWORD PTR [rip+0x9ae6]        # 0x100e2b8
 10047d2:	lea    r8,[rsp+0x30]
 10047d7:	mov    r9d,0x100
 10047dd:	mov    edx,0x3b
 10047e2:	mov    DWORD PTR [rsp+0x20],0x1
 10047ea:	call   0x1005f20
 10047ef:	lea    rdx,[rsp+0x30]
 10047f4:	lea    rcx,[rip+0xffffffffffffcd99]        # 0x1001594
 10047fb:	call   QWORD PTR [rip+0xffffffffffffca27]        # 0x1001228
 1004801:	cmp    DWORD PTR [rip+0x9a44],0x0        # 0x100e24c
 1004808:	mov    rdi,QWORD PTR [rip+0x9aa9]        # 0x100e2b8
 100480f:	je     0x100482c
 1004811:	lea    r8,[rsp+0x30]
 1004816:	mov    r9d,0x100
 100481c:	mov    edx,0x3c
 1004821:	mov    rcx,rdi
 1004824:	call   QWORD PTR [rip+0xffffffffffffcc76]        # 0x10014a0
 100482a:	jmp    0x1004882
 100482c:	mov    edx,0x200
 1004831:	mov    ecx,0x40
 1004836:	call   QWORD PTR [rip+0xffffffffffffc7ec]        # 0x1001028
 100483c:	mov    r9d,0x100
 1004842:	mov    edx,0x3c
 1004847:	mov    r8,rax
 100484a:	mov    rcx,rdi
 100484d:	mov    rbx,rax
 1004850:	call   QWORD PTR [rip+0xffffffffffffcc42]        # 0x1001498
 1004856:	lea    rax,[rsp+0x30]
 100485b:	or     r9d,0xffffffff
 100485f:	mov    r8,rbx
 1004862:	xor    edx,edx
 1004864:	xor    ecx,ecx
 1004866:	mov    DWORD PTR [rsp+0x28],0x100
 100486e:	mov    QWORD PTR [rsp+0x20],rax
 1004873:	call   QWORD PTR [rip+0xffffffffffffc85f]        # 0x10010d8
 1004879:	mov    rcx,rbx
 100487c:	call   QWORD PTR [rip+0xffffffffffffc7be]        # 0x1001040
 1004882:	lea    rdx,[rsp+0x30]
 1004887:	lea    rcx,[rip+0xffffffffffffcd06]        # 0x1001594
 100488e:	call   QWORD PTR [rip+0xffffffffffffc994]        # 0x1001228
 1004894:	lea    rcx,[rip+0xffffffffffffd0a5]        # 0x1001940
 100489b:	call   QWORD PTR [rip+0xffffffffffffc987]        # 0x1001228
 10048a1:	lea    rcx,[rip+0xffffffffffffcc78]        # 0x1001520
 10048a8:	call   QWORD PTR [rip+0xffffffffffffc97a]        # 0x1001228
 10048ae:	lea    rcx,[rip+0xffffffffffffd09b]        # 0x1001950
 10048b5:	call   QWORD PTR [rip+0xffffffffffffc96d]        # 0x1001228
 10048bb:	mov    rcx,QWORD PTR [rip+0x99f6]        # 0x100e2b8
 10048c2:	lea    r8,[rsp+0x30]
 10048c7:	mov    r9d,0x100
 10048cd:	mov    edx,0x3d
 10048d2:	mov    DWORD PTR [rsp+0x20],0x1
 10048da:	call   0x1005f20
 10048df:	lea    rdx,[rsp+0x30]
 10048e4:	lea    rcx,[rip+0xffffffffffffcca9]        # 0x1001594
 10048eb:	call   QWORD PTR [rip+0xffffffffffffc937]        # 0x1001228
 10048f1:	cmp    DWORD PTR [rip+0x9954],0x0        # 0x100e24c
 10048f8:	mov    rdi,QWORD PTR [rip+0x99b9]        # 0x100e2b8
 10048ff:	je     0x100491c
 1004901:	lea    r8,[rsp+0x30]
 1004906:	mov    r9d,0x100
 100490c:	mov    edx,0x3e
 1004911:	mov    rcx,rdi
 1004914:	call   QWORD PTR [rip+0xffffffffffffcb86]        # 0x10014a0
 100491a:	jmp    0x1004972
 100491c:	mov    edx,0x200
 1004921:	mov    ecx,0x40
 1004926:	call   QWORD PTR [rip+0xffffffffffffc6fc]        # 0x1001028
 100492c:	mov    r9d,0x100
 1004932:	mov    edx,0x3e
 1004937:	mov    r8,rax
 100493a:	mov    rcx,rdi
 100493d:	mov    rbx,rax
 1004940:	call   QWORD PTR [rip+0xffffffffffffcb52]        # 0x1001498
 1004946:	lea    rax,[rsp+0x30]
 100494b:	or     r9d,0xffffffff
 100494f:	mov    r8,rbx
 1004952:	xor    edx,edx
 1004954:	xor    ecx,ecx
 1004956:	mov    DWORD PTR [rsp+0x28],0x100
 100495e:	mov    QWORD PTR [rsp+0x20],rax
 1004963:	call   QWORD PTR [rip+0xffffffffffffc76f]        # 0x10010d8
 1004969:	mov    rcx,rbx
 100496c:	call   QWORD PTR [rip+0xffffffffffffc6ce]        # 0x1001040
 1004972:	lea    rdx,[rsp+0x30]
 1004977:	lea    rcx,[rip+0xffffffffffffcc16]        # 0x1001594
 100497e:	call   QWORD PTR [rip+0xffffffffffffc8a4]        # 0x1001228
 1004984:	lea    rcx,[rip+0xffffffffffffcfd5]        # 0x1001960
 100498b:	call   QWORD PTR [rip+0xffffffffffffc897]        # 0x1001228
 1004991:	mov    rcx,QWORD PTR [rip+0x9920]        # 0x100e2b8
 1004998:	lea    r8,[rsp+0x30]
 100499d:	mov    r9d,0x100
 10049a3:	mov    edx,0x3f
 10049a8:	mov    DWORD PTR [rsp+0x20],0x1
 10049b0:	call   0x1005f20
 10049b5:	lea    rdx,[rsp+0x30]
 10049ba:	lea    rcx,[rip+0xffffffffffffcbd3]        # 0x1001594
 10049c1:	call   QWORD PTR [rip+0xffffffffffffc861]        # 0x1001228
 10049c7:	mov    rcx,QWORD PTR [rip+0x98ea]        # 0x100e2b8
 10049ce:	lea    r8,[rsp+0x30]
 10049d3:	mov    r9d,0x100
 10049d9:	mov    edx,0xe
 10049de:	mov    DWORD PTR [rsp+0x20],0x1
 10049e6:	call   0x1005f20
 10049eb:	lea    rdx,[rsp+0x30]
 10049f0:	lea    rcx,[rip+0xffffffffffffcb9d]        # 0x1001594
 10049f7:	call   QWORD PTR [rip+0xffffffffffffc82b]        # 0x1001228
 10049fd:	mov    rcx,QWORD PTR [rip+0x98b4]        # 0x100e2b8
 1004a04:	lea    r8,[rsp+0x30]
 1004a09:	mov    r9d,0x100
 1004a0f:	mov    edx,0xf
 1004a14:	mov    DWORD PTR [rsp+0x20],0x1
 1004a1c:	call   0x1005f20
 1004a21:	lea    rdx,[rsp+0x30]
 1004a26:	lea    rcx,[rip+0xffffffffffffcb67]        # 0x1001594
 1004a2d:	call   QWORD PTR [rip+0xffffffffffffc7f5]        # 0x1001228
 1004a33:	mov    rcx,QWORD PTR [rip+0x987e]        # 0x100e2b8
 1004a3a:	lea    r8,[rsp+0x30]
 1004a3f:	mov    r9d,0x100
 1004a45:	mov    edx,0x10
 1004a4a:	mov    DWORD PTR [rsp+0x20],0x1
 1004a52:	call   0x1005f20
 1004a57:	lea    rdx,[rsp+0x30]
 1004a5c:	lea    rcx,[rip+0xffffffffffffcb31]        # 0x1001594
 1004a63:	call   QWORD PTR [rip+0xffffffffffffc7bf]        # 0x1001228
 1004a69:	mov    rcx,QWORD PTR [rip+0x9848]        # 0x100e2b8
 1004a70:	lea    r8,[rsp+0x30]
 1004a75:	mov    r9d,0x100
 1004a7b:	mov    edx,0x11
 1004a80:	mov    DWORD PTR [rsp+0x20],0x1
 1004a88:	call   0x1005f20
 1004a8d:	lea    rdx,[rsp+0x30]
 1004a92:	lea    rcx,[rip+0xffffffffffffcafb]        # 0x1001594
 1004a99:	call   QWORD PTR [rip+0xffffffffffffc789]        # 0x1001228
 1004a9f:	mov    rcx,QWORD PTR [rip+0x9812]        # 0x100e2b8
 1004aa6:	lea    r8,[rsp+0x30]
 1004aab:	mov    r9d,0x100
 1004ab1:	mov    edx,0x12
 1004ab6:	mov    DWORD PTR [rsp+0x20],0x1
 1004abe:	call   0x1005f20
 1004ac3:	lea    rdx,[rsp+0x30]
 1004ac8:	lea    rcx,[rip+0xffffffffffffcac5]        # 0x1001594
 1004acf:	call   QWORD PTR [rip+0xffffffffffffc753]        # 0x1001228
 1004ad5:	mov    rcx,QWORD PTR [rip+0x97dc]        # 0x100e2b8
 1004adc:	lea    r8,[rsp+0x30]
 1004ae1:	mov    r9d,0x100
 1004ae7:	mov    edx,0x13
 1004aec:	mov    DWORD PTR [rsp+0x20],0x1
 1004af4:	call   0x1005f20
 1004af9:	lea    rdx,[rsp+0x30]
 1004afe:	lea    rcx,[rip+0xffffffffffffca8f]        # 0x1001594
 1004b05:	call   QWORD PTR [rip+0xffffffffffffc71d]        # 0x1001228
 1004b0b:	mov    rcx,QWORD PTR [rip+0x97a6]        # 0x100e2b8
 1004b12:	lea    r8,[rsp+0x30]
 1004b17:	mov    r9d,0x100
 1004b1d:	mov    edx,0x14
 1004b22:	mov    DWORD PTR [rsp+0x20],0x1
 1004b2a:	call   0x1005f20
 1004b2f:	lea    rdx,[rsp+0x30]
 1004b34:	lea    rcx,[rip+0xffffffffffffca59]        # 0x1001594
 1004b3b:	call   QWORD PTR [rip+0xffffffffffffc6e7]        # 0x1001228
 1004b41:	mov    DWORD PTR [rsp+0x20],0x1
 1004b49:	mov    r9d,0x100
 1004b4f:	lea    r8,[rsp+0x30]
 1004b54:	mov    edx,0x15
 1004b59:	mov    rcx,QWORD PTR [rip+0x9758]        # 0x100e2b8
 1004b60:	call   0x1005f20
 1004b65:	lea    rdx,[rsp+0x30]
 1004b6a:	lea    rcx,[rip+0xffffffffffffca23]        # 0x1001594
 1004b71:	call   QWORD PTR [rip+0xffffffffffffc6b1]        # 0x1001228
 1004b77:	mov    rcx,QWORD PTR [rip+0x973a]        # 0x100e2b8
 1004b7e:	lea    r8,[rsp+0x30]
 1004b83:	mov    r9d,0x100
 1004b89:	mov    edx,0x16
 1004b8e:	mov    DWORD PTR [rsp+0x20],0x1
 1004b96:	call   0x1005f20
 1004b9b:	lea    rdx,[rsp+0x30]
 1004ba0:	lea    rcx,[rip+0xffffffffffffc9ed]        # 0x1001594
 1004ba7:	call   QWORD PTR [rip+0xffffffffffffc67b]        # 0x1001228
 1004bad:	mov    rcx,QWORD PTR [rip+0x9704]        # 0x100e2b8
 1004bb4:	lea    r8,[rsp+0x30]
 1004bb9:	mov    r9d,0x100
 1004bbf:	mov    edx,0x17
 1004bc4:	mov    DWORD PTR [rsp+0x20],0x1
 1004bcc:	call   0x1005f20
 1004bd1:	lea    rdx,[rsp+0x30]
 1004bd6:	lea    rcx,[rip+0xffffffffffffc9b7]        # 0x1001594
 1004bdd:	call   QWORD PTR [rip+0xffffffffffffc645]        # 0x1001228
 1004be3:	mov    rcx,QWORD PTR [rip+0x96ce]        # 0x100e2b8
 1004bea:	lea    r8,[rsp+0x30]
 1004bef:	mov    r9d,0x100
 1004bf5:	mov    edx,0x3a
 1004bfa:	mov    DWORD PTR [rsp+0x20],0x1
 1004c02:	call   0x1005f20
 1004c07:	lea    rdx,[rsp+0x30]
 1004c0c:	lea    rcx,[rip+0xffffffffffffc981]        # 0x1001594
 1004c13:	call   QWORD PTR [rip+0xffffffffffffc60f]        # 0x1001228
 1004c19:	mov    rcx,QWORD PTR [rip+0x9698]        # 0x100e2b8
 1004c20:	lea    r8,[rsp+0x30]
 1004c25:	mov    r9d,0x100
 1004c2b:	mov    edx,0x18
 1004c30:	mov    DWORD PTR [rsp+0x20],0x1
 1004c38:	call   0x1005f20
 1004c3d:	lea    rdx,[rsp+0x30]
 1004c42:	lea    rcx,[rip+0xffffffffffffc94b]        # 0x1001594
 1004c49:	call   QWORD PTR [rip+0xffffffffffffc5d9]        # 0x1001228
 1004c4f:	mov    rcx,QWORD PTR [rip+0x9662]        # 0x100e2b8
 1004c56:	lea    r8,[rsp+0x30]
 1004c5b:	mov    r9d,0x100
 1004c61:	mov    edx,0x2f
 1004c66:	mov    DWORD PTR [rsp+0x20],0x1
 1004c6e:	call   0x1005f20
 1004c73:	lea    rdx,[rsp+0x30]
 1004c78:	lea    rcx,[rip+0xffffffffffffc915]        # 0x1001594
 1004c7f:	call   QWORD PTR [rip+0xffffffffffffc5a3]        # 0x1001228
 1004c85:	mov    rcx,QWORD PTR [rbp+0x130]
 1004c8c:	xor    rcx,rsp
 1004c8f:	call   0x100a730
 1004c94:	lea    r11,[rsp+0x240]
 1004c9c:	mov    rbx,QWORD PTR [r11+0x10]
 1004ca0:	mov    rdi,QWORD PTR [r11+0x18]
 1004ca4:	mov    rsp,r11
 1004ca7:	pop    rbp
 1004ca8:	ret    
 1004ca9:	int3   
 1004caa:	int3   
 1004cab:	int3   
 1004cac:	int3   
 1004cad:	int3   
 1004cae:	int3   
 1004caf:	int3   
 1004cb0:	mov    QWORD PTR [rsp+0x8],rbx
 1004cb5:	mov    QWORD PTR [rsp+0x10],rsi
 1004cba:	push   rdi
 1004cbb:	sub    rsp,0x30
 1004cbf:	mov    rdi,rcx
 1004cc2:	mov    rcx,QWORD PTR [rip+0x95ef]        # 0x100e2b8
 1004cc9:	lea    rsi,[rip+0xaa50]        # 0x100f720
 1004cd0:	mov    r9d,0x100
 1004cd6:	mov    edx,0x19
 1004cdb:	mov    r8,rsi
 1004cde:	xor    bl,bl
 1004ce0:	mov    DWORD PTR [rsp+0x20],0x1
 1004ce8:	call   0x1005f20
 1004ced:	movzx  r11d,WORD PTR [rip+0xaa2b]        # 0x100f720
 1004cf5:	test   r11w,r11w
 1004cf9:	je     0x1004d2c
 1004cfb:	nop    DWORD PTR [rax+rax*1+0x0]
 1004d00:	cmp    r11w,0xd
 1004d05:	je     0x1004d2c
 1004d07:	cmp    r11w,0xa
 1004d0c:	je     0x1004d2c
 1004d0e:	mov    rdx,rdi
 1004d11:	movzx  ecx,r11w
 1004d15:	call   QWORD PTR [rip+0xffffffffffffc4e5]        # 0x1001200
 1004d1b:	inc    bl
 1004d1d:	movsx  rax,bl
 1004d21:	movzx  r11d,WORD PTR [rsi+rax*2]
 1004d26:	test   r11w,r11w
 1004d2a:	jne    0x1004d00
 1004d2c:	mov    rcx,rdi
 1004d2f:	mov    rbx,QWORD PTR [rsp+0x40]
 1004d34:	mov    rsi,QWORD PTR [rsp+0x48]
 1004d39:	add    rsp,0x30
 1004d3d:	pop    rdi
 1004d3e:	rex.W jmp QWORD PTR [rip+0xffffffffffffc61b]        # 0x1001360
 1004d45:	int3   
 1004d46:	int3   
 1004d47:	int3   
 1004d48:	int3   
 1004d49:	int3   
 1004d4a:	int3   
 1004d4b:	int3   
 1004d4c:	int3   
 1004d4d:	int3   
 1004d4e:	int3   
 1004d4f:	int3   
 1004d50:	rex push rbx
 1004d52:	sub    rsp,0x20
 1004d56:	cmp    QWORD PTR [rip+0x94a2],0x0        # 0x100e200
 1004d5e:	mov    rbx,rcx
 1004d61:	je     0x1004e36
 1004d67:	mov    ecx,0xfffffff6
 1004d6c:	mov    QWORD PTR [rsp+0x30],rdi
 1004d71:	call   QWORD PTR [rip+0xffffffffffffc301]        # 0x1001078
 1004d77:	lea    rdx,[rsp+0x38]
 1004d7c:	mov    rcx,rax
 1004d7f:	mov    rdi,rax
 1004d82:	call   QWORD PTR [rip+0xffffffffffffc358]        # 0x10010e0
 1004d88:	mov    edx,0x3
 1004d8d:	mov    rcx,rdi
 1004d90:	call   QWORD PTR [rip+0xffffffffffffc35a]        # 0x10010f0
 1004d96:	call   QWORD PTR [rip+0xffffffffffffc5bc]        # 0x1001358
 1004d9c:	mov    edx,DWORD PTR [rip+0x945a]        # 0x100e1fc
 1004da2:	mov    rcx,QWORD PTR [rip+0x9457]        # 0x100e200
 1004da9:	mov    r8,rax
 1004dac:	call   QWORD PTR [rip+0xffffffffffffc45e]        # 0x1001210
 1004db2:	xor    r9d,r9d
 1004db5:	test   rax,rax
 1004db8:	jne    0x1004dc5
 1004dba:	mov    rax,QWORD PTR [rip+0x943f]        # 0x100e200
 1004dc1:	mov    WORD PTR [rax],r9w
 1004dc5:	mov    r8,QWORD PTR [rip+0x9434]        # 0x100e200
 1004dcc:	or     rcx,0xffffffffffffffff
 1004dd0:	inc    rcx
 1004dd3:	cmp    WORD PTR [r8+rcx*2],r9w
 1004dd8:	jne    0x1004dd0
 1004dda:	mov    rax,r9
 1004ddd:	test   rcx,rcx
 1004de0:	je     0x1004e02
 1004de2:	movzx  edx,WORD PTR [r8+rax*2]
 1004de7:	cmp    dx,0xd
 1004deb:	je     0x1004dfd
 1004ded:	cmp    dx,0xa
 1004df1:	je     0x1004dfd
 1004df3:	inc    rax
 1004df6:	cmp    rax,rcx
 1004df9:	jb     0x1004de2
 1004dfb:	jmp    0x1004e02
 1004dfd:	mov    WORD PTR [r8+rax*2],r9w
 1004e02:	call   0x1006c30
 1004e07:	test   eax,eax
 1004e09:	jne    0x1004e14
 1004e0b:	or     ecx,0xffffffff
 1004e0e:	call   0x10052f0
 1004e13:	int3   
 1004e14:	mov    edx,DWORD PTR [rsp+0x38]
 1004e18:	mov    rcx,rdi
 1004e1b:	call   QWORD PTR [rip+0xffffffffffffc2cf]        # 0x10010f0
 1004e21:	lea    rcx,[rip+0xffffffffffffc6f0]        # 0x1001518
 1004e28:	mov    rdx,rbx
 1004e2b:	call   QWORD PTR [rip+0xffffffffffffc3e7]        # 0x1001218
 1004e31:	mov    rdi,QWORD PTR [rsp+0x30]
 1004e36:	add    rsp,0x20
 1004e3a:	pop    rbx
 1004e3b:	ret    
 1004e3c:	int3   
 1004e3d:	int3   
 1004e3e:	int3   
 1004e3f:	int3   
 1004e40:	int3   
 1004e41:	int3   
 1004e42:	int3   
 1004e43:	int3   
 1004e44:	int3   
 1004e45:	int3   
 1004e46:	int3   
 1004e47:	int3   
 1004e48:	int3   
 1004e49:	int3   
 1004e4a:	int3   
 1004e4b:	int3   
 1004e4c:	int3   
 1004e4d:	int3   
 1004e4e:	int3   
 1004e4f:	int3   
 1004e50:	rex push rbx
 1004e52:	sub    rsp,0x40
 1004e56:	mov    ebx,DWORD PTR [rip+0xa08c]        # 0x100eee8
 1004e5c:	mov    rcx,QWORD PTR [rip+0x9425]        # 0x100e288
 1004e63:	movaps XMMWORD PTR [rsp+0x30],xmm6
 1004e68:	mov    r9d,0x4
 1004e6e:	lea    rax,[rsp+0x50]
 1004e73:	lea    r8,[rsp+0x58]
 1004e78:	movd   xmm6,ebx
 1004e7c:	lea    edx,[r9+0x6c]
 1004e80:	mov    DWORD PTR [rsp+0x50],0xfffffffa
 1004e88:	mov    QWORD PTR [rsp+0x20],rax
 1004e8d:	cvtdq2ps xmm6,xmm6
 1004e90:	divss  xmm6,DWORD PTR [rip+0xffffffffffffcc18]        # 0x1001ab0
 1004e98:	call   0x100adce
 1004e9d:	mov    rcx,QWORD PTR [rip+0x9414]        # 0x100e2b8
 1004ea4:	lea    r8,[rip+0xa875]        # 0x100f720
 1004eab:	mov    r9d,0x100
 1004eb1:	mov    edx,0x1e
 1004eb6:	mov    DWORD PTR [rsp+0x20],0x1
 1004ebe:	call   0x1005f20
 1004ec3:	mov    edx,DWORD PTR [rsp+0x58]
 1004ec7:	lea    rcx,[rip+0xa852]        # 0x100f720
 1004ece:	call   QWORD PTR [rip+0xffffffffffffc354]        # 0x1001228
 1004ed4:	mov    rcx,QWORD PTR [rip+0x93dd]        # 0x100e2b8
 1004edb:	xor    edx,edx
 1004edd:	cmp    WORD PTR [rip+0xa00f],0x1        # 0x100eef4
 1004ee5:	lea    r8,[rip+0xa834]        # 0x100f720
 1004eec:	mov    r9d,0x100
 1004ef2:	setg   dl
 1004ef5:	mov    DWORD PTR [rsp+0x20],0x1
 1004efd:	add    edx,0x1b
 1004f00:	call   0x1005f20
 1004f05:	movsx  edx,WORD PTR [rip+0x9fe8]        # 0x100eef4
 1004f0c:	lea    rcx,[rip+0xa80d]        # 0x100f720
 1004f13:	call   QWORD PTR [rip+0xffffffffffffc30f]        # 0x1001228
 1004f19:	mov    rcx,QWORD PTR [rip+0x9398]        # 0x100e2b8
 1004f20:	lea    r8,[rip+0xa7f9]        # 0x100f720
 1004f27:	mov    r9d,0x100
 1004f2d:	mov    edx,0x1d
 1004f32:	mov    DWORD PTR [rsp+0x20],0x1
 1004f3a:	call   0x1005f20
 1004f3f:	movsx  ecx,WORD PTR [rip+0x9fae]        # 0x100eef4
 1004f46:	xorps  xmm5,xmm5
 1004f49:	comiss xmm5,xmm6
 1004f4c:	movd   xmm0,ecx
 1004f50:	cvtdq2ps xmm0,xmm0
 1004f53:	jae    0x1004f59
 1004f55:	divss  xmm0,xmm6
 1004f59:	mov    eax,ebx
 1004f5b:	cvtps2pd xmm3,xmm0
 1004f5e:	cdq    
 1004f5f:	idiv   ecx
 1004f61:	movq   r9,xmm3
 1004f66:	lea    rcx,[rip+0xa7b3]        # 0x100f720
 1004f6d:	mov    edx,ebx
 1004f6f:	mov    r8d,eax
 1004f72:	call   QWORD PTR [rip+0xffffffffffffc2b0]        # 0x1001228
 1004f78:	movaps xmm6,XMMWORD PTR [rsp+0x30]
 1004f7d:	add    rsp,0x40
 1004f81:	pop    rbx
 1004f82:	ret    
 1004f83:	int3   
 1004f84:	int3   
 1004f85:	int3   
 1004f86:	int3   
 1004f87:	int3   
 1004f88:	int3   
 1004f89:	int3   
 1004f8a:	int3   
 1004f8b:	int3   
 1004f8c:	int3   
 1004f8d:	int3   
 1004f8e:	int3   
 1004f8f:	int3   
 1004f90:	sub    rsp,0x28
 1004f94:	lea    rdx,[rip+0xffffffffffffca35]        # 0x10019d0
 1004f9b:	lea    rcx,[rip+0x9f7e]        # 0x100ef20
 1004fa2:	call   QWORD PTR [rip+0xffffffffffffc3f0]        # 0x1001398
 1004fa8:	lea    rdx,[rip+0xffffffffffffca29]        # 0x10019d8
 1004faf:	xor    ecx,ecx
 1004fb1:	call   QWORD PTR [rip+0xffffffffffffc3e1]        # 0x1001398
 1004fb7:	test   rax,rax
 1004fba:	jne    0x1004fe1
 1004fbc:	lea    rdx,[rip+0xffffffffffffca0d]        # 0x10019d0
 1004fc3:	lea    rcx,[rip+0x9f5a]        # 0x100ef24
 1004fca:	call   QWORD PTR [rip+0xffffffffffffc3c8]        # 0x1001398
 1004fd0:	test   rax,rax
 1004fd3:	jne    0x1004fe1
 1004fd5:	mov    WORD PTR [rip+0x9d04],ax        # 0x100ece0
 1004fdc:	add    rsp,0x28
 1004fe0:	ret    
 1004fe1:	mov    r9d,0x103
 1004fe7:	lea    rcx,[rip+0x9cf2]        # 0x100ece0
 1004fee:	mov    r8,rax
 1004ff1:	lea    edx,[r9+0x1]
 1004ff5:	call   QWORD PTR [rip+0xffffffffffffc33d]        # 0x1001338
 1004ffb:	xor    eax,eax
 1004ffd:	mov    WORD PTR [rip+0x9ee2],ax        # 0x100eee6
 1005004:	add    rsp,0x28
 1005008:	ret    
 1005009:	int3   
 100500a:	int3   
 100500b:	int3   
 100500c:	int3   
 100500d:	int3   
 100500e:	int3   
 100500f:	int3   
 1005010:	rex push rbp
 1005012:	push   rsi
 1005013:	push   r15
 1005015:	sub    rsp,0x40
 1005019:	lea    r8,[rip+0xffffffffffffc844]        # 0x1001864
 1005020:	lea    rdx,[rip+0x9cb9]        # 0x100ece0
 1005027:	lea    rcx,[rsp+0x68]
 100502c:	xor    r15d,r15d
 100502f:	mov    WORD PTR [rsp+0x60],r15w
 1005035:	call   0x1006070
 100503a:	test   eax,eax
 100503c:	jne    0x10050a9
 100503e:	mov    rsi,QWORD PTR [rsp+0x68]
 1005043:	lea    edx,[rax+0x2]
 1005046:	lea    r8d,[r15+0x1]
 100504a:	lea    rcx,[rsp+0x60]
 100504f:	mov    r9,rsi
 1005052:	call   QWORD PTR [rip+0xffffffffffffc190]        # 0x10011e8
 1005058:	cmp    rax,0x1
 100505c:	jne    0x1005077
 100505e:	movzx  eax,WORD PTR [rsp+0x60]
 1005063:	mov    ecx,0xfffe
 1005068:	cmp    ax,cx
 100506b:	je     0x10050ec
 100506d:	mov    ecx,0xfeff
 1005072:	cmp    ax,cx
 1005075:	je     0x10050ec
 1005077:	mov    rcx,rsi
 100507a:	mov    ebp,0x3
 100507f:	call   QWORD PTR [rip+0xffffffffffffc173]        # 0x10011f8
 1005085:	mov    rcx,rsi
 1005088:	call   QWORD PTR [rip+0xffffffffffffc14a]        # 0x10011d8
 100508e:	mov    edx,0x4000
 1005093:	mov    ecx,eax
 1005095:	call   QWORD PTR [rip+0xffffffffffffc31d]        # 0x10013b8
 100509b:	cmp    eax,0xffffffff
 100509e:	jne    0x10050f1
 10050a0:	mov    rcx,rsi
 10050a3:	call   QWORD PTR [rip+0xffffffffffffc11f]        # 0x10011c8
 10050a9:	mov    rcx,QWORD PTR [rip+0x9208]        # 0x100e2b8
 10050b0:	lea    r8,[rip+0xa669]        # 0x100f720
 10050b7:	mov    r9d,0x100
 10050bd:	mov    edx,0x1f
 10050c2:	mov    DWORD PTR [rsp+0x20],0x1
 10050ca:	call   0x1005f20
 10050cf:	lea    rdx,[rip+0x9c0a]        # 0x100ece0
 10050d6:	lea    rcx,[rip+0xa643]        # 0x100f720
 10050dd:	add    rsp,0x40
 10050e1:	pop    r15
 10050e3:	pop    rsi
 10050e4:	pop    rbp
 10050e5:	rex.W jmp QWORD PTR [rip+0xffffffffffffc13c]        # 0x1001228
 10050ec:	mov    ebp,0x1
 10050f1:	mov    QWORD PTR [rsp+0x70],rbx
 10050f6:	mov    QWORD PTR [rsp+0x78],rdi
 10050fb:	mov    QWORD PTR [rsp+0x38],r12
 1005100:	mov    QWORD PTR [rsp+0x30],r14
 1005105:	lea    r14,[rip+0x9e14]        # 0x100ef20
 100510c:	mov    r8,rsi
 100510f:	mov    rcx,r14
 1005112:	mov    edx,0x3e8
 1005117:	call   QWORD PTR [rip+0xffffffffffffc0f3]        # 0x1001210
 100511d:	test   rax,rax
 1005120:	je     0x1005293
 1005126:	mov    r12d,0xd
 100512c:	nop    DWORD PTR [rax+0x0]
 1005130:	or     rax,0xffffffffffffffff
 1005134:	inc    rax
 1005137:	cmp    WORD PTR [r14+rax*2],r15w
 100513c:	jne    0x1005134
 100513e:	dec    eax
 1005140:	movsxd rdx,eax
 1005143:	lea    rcx,[rdx+rdx*1]
 1005147:	cmp    WORD PTR [rcx+r14*1],0xa
 100514d:	jne    0x100518c
 100514f:	cmp    ebp,0x1
 1005152:	jne    0x100517a
 1005154:	test   eax,eax
 1005156:	jle    0x100518c
 1005158:	cmp    r12w,WORD PTR [r14+rdx*2-0x2]
 100515e:	jne    0x100518c
 1005160:	dec    eax
 1005162:	cdqe   
 1005164:	add    rax,rax
 1005167:	cmp    rax,0x7d4
 100516d:	jae    0x10052b9
 1005173:	mov    WORD PTR [rax+r14*1],r15w
 1005178:	jmp    0x100518c
 100517a:	cmp    rcx,0x7d4
 1005181:	jae    0x10052c1
 1005187:	mov    WORD PTR [rcx+r14*1],r15w
 100518c:	or     rax,0xffffffffffffffff
 1005190:	inc    rax
 1005193:	cmp    WORD PTR [r14+rax*2],r15w
 1005198:	jne    0x1005190
 100519a:	cmp    rax,0x3e7
 10051a0:	je     0x10051c7
 10051a2:	cmp    DWORD PTR [rip+0x903f],r15d        # 0x100e1e8
 10051a9:	mov    edx,0x3ea
 10051ae:	mov    rcx,r14
 10051b1:	lea    r8,[rip+0xffffffffffffc3e4]        # 0x100159c
 10051b8:	jne    0x10051c1
 10051ba:	lea    r8,[rip+0xffffffffffffc357]        # 0x1001518
 10051c1:	call   QWORD PTR [rip+0xffffffffffffc1b1]        # 0x1001378
 10051c7:	or     rbx,0xffffffffffffffff
 10051cb:	nop    DWORD PTR [rax+rax*1+0x0]
 10051d0:	inc    rbx
 10051d3:	cmp    WORD PTR [r14+rbx*2],r15w
 10051d8:	jne    0x10051d0
 10051da:	mov    r9,QWORD PTR [rip+0x9d17]        # 0x100eef8
 10051e1:	add    ebx,ebx
 10051e3:	mov    eax,DWORD PTR [r9]
 10051e6:	sub    eax,DWORD PTR [r9+0x4]
 10051ea:	cmp    eax,ebx
 10051ec:	jge    0x1005251
 10051ee:	movzx  ecx,WORD PTR [r9+0x8]
 10051f3:	mov    eax,ebx
 10051f5:	sub    eax,DWORD PTR [r9]
 10051f8:	add    eax,DWORD PTR [r9+0x4]
 10051fc:	cdq    
 10051fd:	idiv   ecx
 10051ff:	lea    edi,[rax+0x1]
 1005202:	movzx  eax,WORD PTR [r9+0x8]
 1005207:	mov    ecx,eax
 1005209:	imul   ecx,edi
 100520c:	test   ecx,ecx
 100520e:	js     0x1005272
 1005210:	cmp    ecx,edi
 1005212:	jl     0x1005272
 1005214:	cmp    ecx,eax
 1005216:	jl     0x1005272
 1005218:	mov    eax,DWORD PTR [r9]
 100521b:	add    eax,0xc
 100521e:	lea    edx,[rax+rcx*1]
 1005221:	cmp    edx,eax
 1005223:	jb     0x1005272
 1005225:	movsxd rdx,edx
 1005228:	mov    rcx,r9
 100522b:	call   QWORD PTR [rip+0xffffffffffffc17f]        # 0x10013b0
 1005231:	test   rax,rax
 1005234:	je     0x10052c9
 100523a:	mov    QWORD PTR [rip+0x9cb7],rax        # 0x100eef8
 1005241:	movzx  ecx,WORD PTR [rax+0x8]
 1005245:	imul   ecx,edi
 1005248:	add    DWORD PTR [rax],ecx
 100524a:	mov    r9,QWORD PTR [rip+0x9ca7]        # 0x100eef8
 1005251:	movsxd rax,DWORD PTR [r9+0x4]
 1005255:	lea    rcx,[r9+0xc]
 1005259:	movsxd r8,ebx
 100525c:	add    rcx,rax
 100525f:	mov    rdx,r14
 1005262:	call   0x100a914
 1005267:	mov    r11,QWORD PTR [rip+0x9c8a]        # 0x100eef8
 100526e:	add    DWORD PTR [r11+0x4],ebx
 1005272:	inc    WORD PTR [rip+0x9c87]        # 0x100ef00
 1005279:	mov    r8,rsi
 100527c:	mov    edx,0x3e8
 1005281:	mov    rcx,r14
 1005284:	call   QWORD PTR [rip+0xffffffffffffbf86]        # 0x1001210
 100528a:	test   rax,rax
 100528d:	jne    0x1005130
 1005293:	mov    rcx,rsi
 1005296:	mov    r12,QWORD PTR [rsp+0x38]
 100529b:	mov    rdi,QWORD PTR [rsp+0x78]
 10052a0:	mov    rbx,QWORD PTR [rsp+0x70]
 10052a5:	mov    r14,QWORD PTR [rsp+0x30]
 10052aa:	add    rsp,0x40
 10052ae:	pop    r15
 10052b0:	pop    rsi
 10052b1:	pop    rbp
 10052b2:	rex.W jmp QWORD PTR [rip+0xffffffffffffbf0f]        # 0x10011c8
 10052b9:	xor    ecx,ecx
 10052bb:	call   0x100a764
 10052c0:	int3   
 10052c1:	xor    ecx,ecx
 10052c3:	call   0x100a764
 10052c8:	int3   
 10052c9:	mov    ecx,0x4
 10052ce:	call   0x1005d30
 10052d3:	or     ecx,0xffffffff
 10052d6:	call   0x10052f0
 10052db:	int3   
 10052dc:	int3   
 10052dd:	int3   
 10052de:	int3   
 10052df:	int3   
 10052e0:	int3   
 10052e1:	int3   
 10052e2:	int3   
 10052e3:	int3   
 10052e4:	int3   
 10052e5:	int3   
 10052e6:	int3   
 10052e7:	int3   
 10052e8:	int3   
 10052e9:	int3   
 10052ea:	int3   
 10052eb:	int3   
 10052ec:	int3   
 10052ed:	int3   
 10052ee:	int3   
 10052ef:	int3   
 10052f0:	mov    QWORD PTR [rsp+0x10],rbx
 10052f5:	push   rdi
 10052f6:	sub    rsp,0x840
 10052fd:	mov    rax,QWORD PTR [rip+0x8e2c]        # 0x100e130
 1005304:	xor    rax,rsp
 1005307:	mov    QWORD PTR [rsp+0x830],rax
 100530f:	cmp    DWORD PTR [rip+0x8efe],0x0        # 0x100e214
 1005316:	mov    ebx,ecx
 1005318:	je     0x100531f
 100531a:	call   0x100aee0
 100531f:	mov    rcx,QWORD PTR [rip+0x8ee2]        # 0x100e208
 1005326:	test   rcx,rcx
 1005329:	je     0x1005331
 100532b:	call   QWORD PTR [rip+0xffffffffffffc017]        # 0x1001348
 1005331:	mov    rcx,QWORD PTR [rip+0x8ec8]        # 0x100e200
 1005338:	test   rcx,rcx
 100533b:	je     0x1005343
 100533d:	call   QWORD PTR [rip+0xffffffffffffc005]        # 0x1001348
 1005343:	call   QWORD PTR [rip+0xffffffffffffc00f]        # 0x1001358
 1005349:	lea    rcx,[rax+0x30]
 100534d:	call   QWORD PTR [rip+0xffffffffffffc00d]        # 0x1001360
 1005353:	call   QWORD PTR [rip+0xffffffffffffbfff]        # 0x1001358
 1005359:	lea    rcx,[rax+0x60]
 100535d:	call   QWORD PTR [rip+0xffffffffffffbffd]        # 0x1001360
 1005363:	lea    rcx,[rip+0x6e6]        # 0x1005a50
 100536a:	xor    edx,edx
 100536c:	call   QWORD PTR [rip+0xffffffffffffbd86]        # 0x10010f8
 1005372:	xor    edi,edi
 1005374:	cmp    DWORD PTR [rip+0x8e6e],edi        # 0x100e1e8
 100537a:	jne    0x10053a5
 100537c:	cmp    ebx,0xffffffff
 100537f:	jne    0x100538f
 1005381:	cmp    DWORD PTR [rip+0x8ebc],0x7f        # 0x100e244
 1005388:	je     0x1005398
 100538a:	lea    ebx,[rdi+0x1]
 100538d:	jmp    0x10053ae
 100538f:	cmp    DWORD PTR [rip+0x8eae],0x7f        # 0x100e244
 1005396:	jne    0x10053a5
 1005398:	cmp    DWORD PTR [rip+0x8ea9],0xa        # 0x100e248
 100539f:	ja     0x10053a5
 10053a1:	mov    ebx,edi
 10053a3:	jmp    0x10053ae
 10053a5:	cmp    ebx,0xffffffff
 10053a8:	je     0x1005475
 10053ae:	mov    rcx,QWORD PTR [rip+0x8edb]        # 0x100e290
 10053b5:	test   rcx,rcx
 10053b8:	je     0x100549e
 10053be:	cmp    WORD PTR [rip+0xa57b],di        # 0x100f940
 10053c5:	je     0x100547c
 10053cb:	lea    rcx,[rsp+0x62]
 10053d0:	xor    edx,edx
 10053d2:	mov    r8d,0x7ce
 10053d8:	mov    WORD PTR [rsp+0x60],di
 10053dd:	call   0x100a756
 10053e2:	lea    r8,[rip+0xffffffffffffc607]        # 0x10019f0
 10053e9:	lea    rcx,[rsp+0x60]
 10053ee:	mov    edx,0x3e8
 10053f3:	mov    DWORD PTR [rsp+0x50],edi
 10053f7:	mov    QWORD PTR [rsp+0x58],rdi
 10053fc:	call   QWORD PTR [rip+0xffffffffffffbf2e]        # 0x1001330
 1005402:	mov    ecx,0x4
 1005407:	lea    rax,[rsp+0x58]
 100540c:	mov    r8d,ecx
 100540f:	lea    r9d,[rcx-0x14]
 1005413:	mov    QWORD PTR [rsp+0x48],rax
 1005418:	mov    QWORD PTR [rsp+0x40],rdi
 100541d:	lea    rax,[rsp+0x50]
 1005422:	mov    QWORD PTR [rsp+0x38],rax
 1005427:	mov    WORD PTR [rsp+0x30],di
 100542c:	lea    edx,[rcx-0x3]
 100542f:	mov    QWORD PTR [rsp+0x28],rdi
 1005434:	mov    WORD PTR [rsp+0x20],cx
 1005439:	mov    rcx,QWORD PTR [rip+0x8e50]        # 0x100e290
 1005440:	call   0x100adb6
 1005445:	mov    rcx,QWORD PTR [rip+0x8e44]        # 0x100e290
 100544c:	lea    rdx,[rsp+0x60]
 1005451:	mov    r8d,0xfffffffd
 1005457:	call   0x100adc2
 100545c:	or     ecx,0xffffffff
 100545f:	cmp    cx,ax
 1005462:	jne    0x1005475
 1005464:	mov    rdx,QWORD PTR [rip+0x8e25]        # 0x100e290
 100546b:	mov    ecx,0x3
 1005470:	call   0x1005660
 1005475:	mov    rcx,QWORD PTR [rip+0x8e14]        # 0x100e290
 100547c:	test   rcx,rcx
 100547f:	je     0x100549e
 1005481:	call   0x100ad0e
 1005486:	mov    rdx,QWORD PTR [rip+0x8e03]        # 0x100e290
 100548d:	mov    ecx,0x3
 1005492:	call   0x100ad6e
 1005497:	mov    QWORD PTR [rip+0x8df2],rdi        # 0x100e290
 100549e:	mov    rcx,QWORD PTR [rip+0x8de3]        # 0x100e288
 10054a5:	test   rcx,rcx
 10054a8:	je     0x10054c7
 10054aa:	call   0x100ad62
 10054af:	mov    rdx,QWORD PTR [rip+0x8dd2]        # 0x100e288
 10054b6:	mov    ecx,0x2
 10054bb:	call   0x100ad6e
 10054c0:	mov    QWORD PTR [rip+0x8dc1],rdi        # 0x100e288
 10054c7:	mov    rdx,QWORD PTR [rip+0x8db2]        # 0x100e280
 10054ce:	test   rdx,rdx
 10054d1:	je     0x10054e4
 10054d3:	mov    ecx,0x1
 10054d8:	call   0x100ad6e
 10054dd:	mov    QWORD PTR [rip+0x8d9c],rdi        # 0x100e280
 10054e4:	mov    ecx,DWORD PTR [rip+0x8dbe]        # 0x100e2a8
 10054ea:	test   ecx,ecx
 10054ec:	je     0x10054f9
 10054ee:	mov    eax,DWORD PTR [rip+0x8db8]        # 0x100e2ac
 10054f4:	cmp    eax,ecx
 10054f6:	cmovge ebx,eax
 10054f9:	mov    rcx,QWORD PTR [rip+0x8db0]        # 0x100e2b0
 1005500:	test   rcx,rcx
 1005503:	je     0x1005512
 1005505:	call   QWORD PTR [rip+0xffffffffffffbe3d]        # 0x1001348
 100550b:	mov    QWORD PTR [rip+0x8d9e],rdi        # 0x100e2b0
 1005512:	mov    rcx,QWORD PTR [rip+0x99df]        # 0x100eef8
 1005519:	test   rcx,rcx
 100551c:	je     0x100552b
 100551e:	call   QWORD PTR [rip+0xffffffffffffbe24]        # 0x1001348
 1005524:	mov    QWORD PTR [rip+0x99cd],rdi        # 0x100eef8
 100552b:	mov    rcx,QWORD PTR [rip+0x8d86]        # 0x100e2b8
 1005532:	test   rcx,rcx
 1005535:	je     0x100553c
 1005537:	call   0x100b9a0
 100553c:	mov    ecx,ebx
 100553e:	call   QWORD PTR [rip+0xffffffffffffbb0c]        # 0x1001050
 1005544:	int3   
 1005545:	int3   
 1005546:	int3   
 1005547:	int3   
 1005548:	int3   
 1005549:	int3   
 100554a:	int3   
 100554b:	int3   
 100554c:	int3   
 100554d:	int3   
 100554e:	int3   
 100554f:	int3   
 1005550:	rex push rbx
 1005552:	sub    rsp,0x30
 1005556:	mov    ebx,ecx
 1005558:	mov    edx,ecx
 100555a:	test   ecx,ecx
 100555c:	je     0x10055ac
 100555e:	dec    edx
 1005560:	je     0x100559d
 1005562:	mov    rcx,QWORD PTR [rip+0x8d4f]        # 0x100e2b8
 1005569:	lea    r8,[rip+0xa1b0]        # 0x100f720
 1005570:	mov    r9d,0x100
 1005576:	mov    edx,0xa
 100557b:	mov    DWORD PTR [rsp+0x20],0x1
 1005583:	call   0x1005f20
 1005588:	lea    rcx,[rip+0xa191]        # 0x100f720
 100558f:	mov    edx,ebx
 1005591:	add    rsp,0x30
 1005595:	pop    rbx
 1005596:	rex.W jmp QWORD PTR [rip+0xffffffffffffbc8b]        # 0x1001228
 100559d:	mov    ecx,0x9
 10055a2:	add    rsp,0x30
 10055a6:	pop    rbx
 10055a7:	jmp    0x1005d30
 10055ac:	mov    ecx,0x8
 10055b1:	add    rsp,0x30
 10055b5:	pop    rbx
 10055b6:	jmp    0x1005d30
 10055bb:	int3   
 10055bc:	int3   
 10055bd:	int3   
 10055be:	int3   
 10055bf:	int3   
 10055c0:	int3   
 10055c1:	int3   
 10055c2:	int3   
 10055c3:	int3   
 10055c4:	int3   
 10055c5:	int3   
 10055c6:	int3   
 10055c7:	int3   
 10055c8:	int3   
 10055c9:	int3   
 10055ca:	int3   
 10055cb:	int3   
 10055cc:	int3   
 10055cd:	int3   
 10055ce:	int3   
 10055cf:	int3   
 10055d0:	rex push rbx
 10055d2:	sub    rsp,0x20
 10055d6:	cmp    DWORD PTR [rip+0x8cc3],0x0        # 0x100e2a0
 10055dd:	mov    rbx,rcx
 10055e0:	je     0x1005645
 10055e2:	cmp    edx,0xffffffff
 10055e5:	jne    0x10055f7
 10055e7:	mov    DWORD PTR [rip+0x8cb3],0x0        # 0x100e2a4
 10055f1:	add    rsp,0x20
 10055f5:	pop    rbx
 10055f6:	ret    
 10055f7:	call   QWORD PTR [rip+0xffffffffffffbdab]        # 0x10013a8
 10055fd:	lea    rdx,[rsp+0x40]
 1005602:	mov    r8d,0xa
 1005608:	mov    rcx,rbx
 100560b:	mov    DWORD PTR [rax],0x0
 1005611:	call   QWORD PTR [rip+0xffffffffffffbc39]        # 0x1001250
 1005617:	mov    DWORD PTR [rip+0x8c87],eax        # 0x100e2a4
 100561d:	mov    rax,QWORD PTR [rsp+0x40]
 1005622:	movzx  ecx,WORD PTR [rax]
 1005625:	test   cx,cx
 1005628:	je     0x1005630
 100562a:	cmp    cx,0x2e
 100562e:	jne    0x100563b
 1005630:	call   QWORD PTR [rip+0xffffffffffffbd72]        # 0x10013a8
 1005636:	cmp    DWORD PTR [rax],0x0
 1005639:	je     0x1005645
 100563b:	mov    DWORD PTR [rip+0x8c5f],0xffffff9a        # 0x100e2a4
 1005645:	add    rsp,0x20
 1005649:	pop    rbx
 100564a:	ret    
 100564b:	int3   
 100564c:	int3   
 100564d:	int3   
 100564e:	int3   
 100564f:	int3   
 1005650:	int3   
 1005651:	int3   
 1005652:	int3   
 1005653:	int3   
 1005654:	int3   
 1005655:	int3   
 1005656:	int3   
 1005657:	int3   
 1005658:	int3   
 1005659:	int3   
 100565a:	int3   
 100565b:	int3   
 100565c:	int3   
 100565d:	int3   
 100565e:	int3   
 100565f:	int3   
 1005660:	rex push rbp
 1005662:	push   r12
 1005664:	push   r14
 1005666:	push   r15
 1005668:	lea    rbp,[rsp-0x5c8]
 1005670:	sub    rsp,0x6c8
 1005677:	mov    rax,QWORD PTR [rip+0x8ab2]        # 0x100e130
 100567e:	xor    rax,rsp
 1005681:	mov    QWORD PTR [rbp+0x5a0],rax
 1005688:	xor    r12d,r12d
 100568b:	mov    eax,0x4
 1005690:	xor    r8d,r8d
 1005693:	mov    QWORD PTR [rsp+0x30],r12
 1005698:	mov    WORD PTR [rsp+0x28],ax
 100569d:	lea    rax,[rsp+0x54]
 10056a2:	lea    r9d,[r12+0x2]
 10056a7:	mov    r15,rdx
 10056aa:	movzx  r14d,cx
 10056ae:	mov    QWORD PTR [rsp+0x20],rax
 10056b3:	mov    WORD PTR [rsp+0x44],r12w
 10056b9:	call   0x100adda
 10056be:	cmp    ax,0xffff
 10056c2:	jne    0x10056d5
 10056c4:	lea    rcx,[rip+0xffffffffffffc37d]        # 0x1001a48
 10056cb:	call   0x1002b60
 10056d0:	jmp    0x1005980
 10056d5:	mov    QWORD PTR [rsp+0x6b8],rdi
 10056dd:	mov    edi,0x1
 10056e2:	cmp    DWORD PTR [rsp+0x54],edi
 10056e6:	jl     0x1005978
 10056ec:	mov    QWORD PTR [rsp+0x6b0],r13
 10056f4:	mov    QWORD PTR [rsp+0x700],rbx
 10056fc:	mov    QWORD PTR [rsp+0x6c0],rsi
 1005704:	mov    r13d,0x201
 100570a:	nop    WORD PTR [rax+rax*1+0x0]
 1005710:	lea    rax,[rsp+0x44]
 1005715:	lea    r9,[rsp+0x60]
 100571a:	movzx  r8d,di
 100571e:	mov    QWORD PTR [rsp+0x38],rax
 1005723:	lea    rax,[rbp+0x190]
 100572a:	mov    WORD PTR [rsp+0x30],r13w
 1005730:	mov    QWORD PTR [rsp+0x28],rax
 1005735:	lea    rax,[rsp+0x50]
 100573a:	mov    rdx,r15
 100573d:	movzx  ecx,r14w
 1005741:	mov    QWORD PTR [rsp+0x20],rax
 1005746:	call   0x100ade6
 100574b:	cmp    ax,0xffff
 100574f:	jne    0x1005762
 1005751:	lea    rcx,[rip+0xffffffffffffc328]        # 0x1001a80
 1005758:	call   0x1002b60
 100575d:	jmp    0x1005954
 1005762:	movzx  esi,WORD PTR [rsp+0x44]
 1005767:	cmp    si,r13w
 100576b:	jb     0x10057d0
 100576d:	movsx  eax,si
 1005770:	inc    eax
 1005772:	movsxd rcx,eax
 1005775:	add    rcx,rcx
 1005778:	call   QWORD PTR [rip+0xffffffffffffbbd2]        # 0x1001350
 100577e:	mov    rbx,rax
 1005781:	test   rax,rax
 1005784:	je     0x10057d0
 1005786:	lea    rax,[rsp+0x58]
 100578b:	inc    si
 100578e:	lea    r9,[rsp+0x60]
 1005793:	mov    QWORD PTR [rsp+0x38],rax
 1005798:	lea    rax,[rsp+0x50]
 100579d:	mov    WORD PTR [rsp+0x30],si
 10057a2:	movzx  r8d,di
 10057a6:	mov    rdx,r15
 10057a9:	movzx  ecx,r14w
 10057ad:	mov    QWORD PTR [rsp+0x28],rbx
 10057b2:	mov    QWORD PTR [rsp+0x20],rax
 10057b7:	call   0x100ade6
 10057bc:	cmp    ax,0xffff
 10057c0:	jne    0x10057d7
 10057c2:	lea    rcx,[rip+0xffffffffffffc2b7]        # 0x1001a80
 10057c9:	call   0x1002b60
 10057ce:	jmp    0x10057d7
 10057d0:	lea    rbx,[rbp+0x190]
 10057d7:	lea    rax,[rsp+0x4c]
 10057dc:	mov    QWORD PTR [rsp+0x30],r12
 10057e1:	mov    r9w,0xfb82
 10057e6:	movzx  r8d,di
 10057ea:	mov    rdx,r15
 10057ed:	movzx  ecx,r14w
 10057f1:	mov    WORD PTR [rsp+0x28],0xfffa
 10057f8:	mov    QWORD PTR [rsp+0x20],rax
 10057fd:	call   0x100adda
 1005802:	mov    ecx,DWORD PTR [rsp+0x4c]
 1005806:	cmp    ax,0xffff
 100580a:	lea    rax,[rsp+0x48]
 100580f:	cmove  ecx,r12d
 1005813:	mov    QWORD PTR [rsp+0x30],r12
 1005818:	mov    r9w,0xfb81
 100581d:	mov    DWORD PTR [rsp+0x4c],ecx
 1005821:	movzx  r8d,di
 1005825:	mov    rdx,r15
 1005828:	movzx  ecx,r14w
 100582c:	mov    WORD PTR [rsp+0x28],0xfffa
 1005833:	mov    QWORD PTR [rsp+0x20],rax
 1005838:	call   0x100adda
 100583d:	mov    ecx,DWORD PTR [rsp+0x48]
 1005841:	mov    QWORD PTR [rsp+0x30],r12
 1005846:	cmp    ax,0xffff
 100584a:	lea    rax,[rsp+0x70]
 100584f:	mov    esi,0x102
 1005854:	cmove  ecx,r12d
 1005858:	mov    r9d,0xfffffb80
 100585e:	movzx  r8d,di
 1005862:	mov    DWORD PTR [rsp+0x48],ecx
 1005866:	mov    rdx,r15
 1005869:	movzx  ecx,r14w
 100586d:	mov    WORD PTR [rsp+0x28],si
 1005872:	mov    QWORD PTR [rsp+0x20],rax
 1005877:	call   0x100adda
 100587c:	cmp    ax,0xffff
 1005880:	jne    0x1005888
 1005882:	mov    WORD PTR [rsp+0x70],r12w
 1005888:	lea    rax,[rbp+0x80]
 100588f:	mov    QWORD PTR [rsp+0x30],r12
 1005894:	mov    r9d,0xfffffb7f
 100589a:	movzx  r8d,di
 100589e:	mov    rdx,r15
 10058a1:	movzx  ecx,r14w
 10058a5:	mov    WORD PTR [rsp+0x28],si
 10058aa:	mov    QWORD PTR [rsp+0x20],rax
 10058af:	call   0x100adda
 10058b4:	cmp    ax,0xffff
 10058b8:	jne    0x10058c2
 10058ba:	mov    WORD PTR [rbp+0x80],r12w
 10058c2:	mov    eax,0xfffffff8
 10058c7:	mov    QWORD PTR [rsp+0x30],r12
 10058cc:	mov    r9d,0xfffffb7e
 10058d2:	mov    WORD PTR [rsp+0x28],ax
 10058d7:	lea    rax,[rsp+0x40]
 10058dc:	movzx  r8d,di
 10058e0:	mov    rdx,r15
 10058e3:	movzx  ecx,r14w
 10058e7:	mov    QWORD PTR [rsp+0x20],rax
 10058ec:	call   0x100adda
 10058f1:	cmp    ax,0xffff
 10058f5:	jne    0x1005902
 10058f7:	movzx  eax,r12w
 10058fb:	mov    WORD PTR [rsp+0x40],ax
 1005900:	jmp    0x1005907
 1005902:	movzx  eax,WORD PTR [rsp+0x40]
 1005907:	mov    r9d,DWORD PTR [rsp+0x48]
 100590c:	mov    r8d,DWORD PTR [rsp+0x4c]
 1005911:	mov    edx,DWORD PTR [rsp+0x50]
 1005915:	mov    WORD PTR [rsp+0x38],ax
 100591a:	lea    rax,[rbp+0x80]
 1005921:	lea    rcx,[rsp+0x60]
 1005926:	mov    QWORD PTR [rsp+0x30],rax
 100592b:	lea    rax,[rsp+0x70]
 1005930:	mov    QWORD PTR [rsp+0x28],rax
 1005935:	mov    QWORD PTR [rsp+0x20],rbx
 100593a:	call   0x1009be0
 100593f:	lea    r11,[rbp+0x190]
 1005946:	cmp    rbx,r11
 1005949:	je     0x1005954
 100594b:	mov    rcx,rbx
 100594e:	call   QWORD PTR [rip+0xffffffffffffb9f4]        # 0x1001348
 1005954:	inc    edi
 1005956:	cmp    edi,DWORD PTR [rsp+0x54]
 100595a:	jle    0x1005710
 1005960:	mov    r13,QWORD PTR [rsp+0x6b0]
 1005968:	mov    rsi,QWORD PTR [rsp+0x6c0]
 1005970:	mov    rbx,QWORD PTR [rsp+0x700]
 1005978:	mov    rdi,QWORD PTR [rsp+0x6b8]
 1005980:	mov    rcx,QWORD PTR [rbp+0x5a0]
 1005987:	xor    rcx,rsp
 100598a:	call   0x100a730
 100598f:	add    rsp,0x6c8
 1005996:	pop    r15
 1005998:	pop    r14
 100599a:	pop    r12
 100599c:	pop    rbp
 100599d:	ret    
 100599e:	int3   
 100599f:	int3   
 10059a0:	int3   
 10059a1:	int3   
 10059a2:	int3   
 10059a3:	int3   
 10059a4:	int3   
 10059a5:	int3   
 10059a6:	int3   
 10059a7:	int3   
 10059a8:	int3   
 10059a9:	int3   
 10059aa:	int3   
 10059ab:	int3   
 10059ac:	int3   
 10059ad:	int3   
 10059ae:	int3   
 10059af:	int3   
 10059b0:	rex push rbx
 10059b2:	sub    rsp,0x40
 10059b6:	call   QWORD PTR [rip+0xffffffffffffb69c]        # 0x1001058
 10059bc:	mov    ebx,eax
 10059be:	xor    eax,eax
 10059c0:	mov    QWORD PTR [rsp+0x50],rax
 10059c5:	test   ebx,ebx
 10059c7:	je     0x1005a44
 10059c9:	mov    QWORD PTR [rsp+0x30],rax
 10059ce:	mov    DWORD PTR [rsp+0x28],eax
 10059d2:	lea    rax,[rsp+0x50]
 10059d7:	xor    r9d,r9d
 10059da:	mov    r8d,ebx
 10059dd:	xor    edx,edx
 10059df:	mov    ecx,0x3100
 10059e4:	mov    QWORD PTR [rsp+0x20],rax
 10059e9:	call   QWORD PTR [rip+0xffffffffffffb699]        # 0x1001088
 10059ef:	mov    rcx,QWORD PTR [rip+0x88c2]        # 0x100e2b8
 10059f6:	lea    r8,[rip+0x9d23]        # 0x100f720
 10059fd:	mov    r9d,0x100
 1005a03:	mov    edx,0x30
 1005a08:	mov    DWORD PTR [rsp+0x20],0x1
 1005a10:	call   0x1005f20
 1005a15:	call   QWORD PTR [rip+0xffffffffffffb93d]        # 0x1001358
 1005a1b:	mov    r9,QWORD PTR [rsp+0x50]
 1005a20:	lea    rcx,[rax+0x60]
 1005a24:	lea    rdx,[rip+0x9cf5]        # 0x100f720
 1005a2b:	mov    r8d,ebx
 1005a2e:	call   QWORD PTR [rip+0xffffffffffffb7ec]        # 0x1001220
 1005a34:	mov    rcx,QWORD PTR [rsp+0x50]
 1005a39:	test   rcx,rcx
 1005a3c:	je     0x1005a44
 1005a3e:	call   QWORD PTR [rip+0xffffffffffffb604]        # 0x1001048
 1005a44:	add    rsp,0x40
 1005a48:	pop    rbx
 1005a49:	ret    
 1005a4a:	int3   
 1005a4b:	int3   
 1005a4c:	int3   
 1005a4d:	int3   
 1005a4e:	int3   
 1005a4f:	int3   
 1005a50:	rex push rbx
 1005a52:	sub    rsp,0x20
 1005a56:	mov    ebx,0x1
 1005a5b:	test   ecx,ecx
 1005a5d:	je     0x1005a95
 1005a5f:	cmp    ecx,ebx
 1005a61:	je     0x1005a95
 1005a63:	cmp    ecx,0x2
 1005a66:	je     0x1005a80
 1005a68:	cmp    ecx,0x6
 1005a6b:	je     0x1005a80
 1005a6d:	cmp    ecx,0x5
 1005a70:	jne    0x1005b12
 1005a76:	xor    ecx,ecx
 1005a78:	mov    eax,ecx
 1005a7a:	add    rsp,0x20
 1005a7e:	pop    rbx
 1005a7f:	ret    
 1005a80:	mov    DWORD PTR [rip+0x87de],ebx        # 0x100e264
 1005a86:	xor    ecx,ecx
 1005a88:	call   0x10052f0
 1005a8d:	mov    eax,ebx
 1005a8f:	add    rsp,0x20
 1005a93:	pop    rbx
 1005a94:	ret    
 1005a95:	cmp    DWORD PTR [rip+0x875c],0x0        # 0x100e1f8
 1005a9c:	mov    DWORD PTR [rip+0x87c2],ebx        # 0x100e264
 1005aa2:	je     0x1005aab
 1005aa4:	xor    ecx,ecx
 1005aa6:	call   0x10052f0
 1005aab:	cmp    DWORD PTR [rip+0x8dd6],0x0        # 0x100e888
 1005ab2:	je     0x1005af8
 1005ab4:	cmp    WORD PTR [rip+0x8654],0x2        # 0x100e110
 1005abc:	je     0x1005a86
 1005abe:	lea    rcx,[rip+0xffffffffffffba53]        # 0x1001518
 1005ac5:	call   0x1002b60
 1005aca:	mov    rax,QWORD PTR [rip+0x9427]        # 0x100eef8
 1005ad1:	xor    ecx,ecx
 1005ad3:	mov    WORD PTR [rip+0x9446],cx        # 0x100ef20
 1005ada:	mov    WORD PTR [rip+0x862f],bx        # 0x100e110
 1005ae1:	mov    DWORD PTR [rip+0x87b1],ebx        # 0x100e298
 1005ae7:	mov    DWORD PTR [rax+0x4],ecx
 1005aea:	mov    DWORD PTR [rip+0x8774],ecx        # 0x100e264
 1005af0:	mov    eax,ebx
 1005af2:	add    rsp,0x20
 1005af6:	pop    rbx
 1005af7:	ret    
 1005af8:	mov    rcx,QWORD PTR [rip+0x8791]        # 0x100e290
 1005aff:	test   rcx,rcx
 1005b02:	je     0x1005b12
 1005b04:	cmp    DWORD PTR [rip+0x8729],0x0        # 0x100e234
 1005b0b:	je     0x1005b12
 1005b0d:	call   0x100ad0e
 1005b12:	mov    eax,ebx
 1005b14:	add    rsp,0x20
 1005b18:	pop    rbx
 1005b19:	ret    
 1005b1a:	int3   
 1005b1b:	int3   
 1005b1c:	int3   
 1005b1d:	int3   
 1005b1e:	int3   
 1005b1f:	int3   
 1005b20:	mov    QWORD PTR [rsp+0x8],rbx
 1005b25:	mov    QWORD PTR [rsp+0x10],rsi
 1005b2a:	push   rdi
 1005b2b:	sub    rsp,0x20
 1005b2f:	lea    eax,[rdx+0xc]
 1005b32:	movzx  esi,r8w
 1005b36:	mov    edi,edx
 1005b38:	mov    rbx,rcx
 1005b3b:	cmp    eax,0xc
 1005b3e:	jb     0x1005b82
 1005b40:	mov    ecx,eax
 1005b42:	call   QWORD PTR [rip+0xffffffffffffb808]        # 0x1001350
 1005b48:	mov    QWORD PTR [rbx],rax
 1005b4b:	test   rax,rax
 1005b4e:	jne    0x1005b61
 1005b50:	lea    ecx,[rax+0x4]
 1005b53:	call   0x1005d30
 1005b58:	or     ecx,0xffffffff
 1005b5b:	call   0x10052f0
 1005b60:	int3   
 1005b61:	mov    DWORD PTR [rax],edi
 1005b63:	mov    rax,QWORD PTR [rbx]
 1005b66:	mov    WORD PTR [rax+0x8],si
 1005b6a:	mov    rcx,QWORD PTR [rbx]
 1005b6d:	xor    eax,eax
 1005b6f:	mov    DWORD PTR [rcx+0x4],eax
 1005b72:	mov    rbx,QWORD PTR [rsp+0x30]
 1005b77:	mov    rsi,QWORD PTR [rsp+0x38]
 1005b7c:	add    rsp,0x20
 1005b80:	pop    rdi
 1005b81:	ret    
 1005b82:	mov    rbx,QWORD PTR [rsp+0x30]
 1005b87:	mov    rsi,QWORD PTR [rsp+0x38]
 1005b8c:	or     eax,0xffffffff
 1005b8f:	add    rsp,0x20
 1005b93:	pop    rdi
 1005b94:	ret    
 1005b95:	int3   
 1005b96:	int3   
 1005b97:	int3   
 1005b98:	int3   
 1005b99:	int3   
 1005b9a:	int3   
 1005b9b:	int3   
 1005b9c:	int3   
 1005b9d:	int3   
 1005b9e:	int3   
 1005b9f:	int3   
 1005ba0:	mov    QWORD PTR [rsp+0x10],rbx
 1005ba5:	mov    QWORD PTR [rsp+0x18],rsi
 1005baa:	mov    QWORD PTR [rsp+0x20],rdi
 1005baf:	push   r14
 1005bb1:	sub    rsp,0x20
 1005bb5:	or     r14,0xffffffffffffffff
 1005bb9:	mov    ebx,r8d
 1005bbc:	mov    rdi,rdx
 1005bbf:	mov    rsi,rcx
 1005bc2:	cmp    r8d,0xfffffffd
 1005bc6:	jne    0x1005bdc
 1005bc8:	mov    rbx,r14
 1005bcb:	nop    DWORD PTR [rax+rax*1+0x0]
 1005bd0:	inc    rbx
 1005bd3:	cmp    WORD PTR [rdx+rbx*2],0x0
 1005bd8:	jne    0x1005bd0
 1005bda:	add    ebx,ebx
 1005bdc:	mov    r8,QWORD PTR [rcx]
 1005bdf:	mov    QWORD PTR [rsp+0x30],rbp
 1005be4:	mov    eax,DWORD PTR [r8]
 1005be7:	sub    eax,DWORD PTR [r8+0x4]
 1005beb:	cmp    eax,ebx
 1005bed:	jge    0x1005c62
 1005bef:	movzx  ecx,WORD PTR [r8+0x8]
 1005bf4:	mov    eax,ebx
 1005bf6:	sub    eax,DWORD PTR [r8]
 1005bf9:	add    eax,DWORD PTR [r8+0x4]
 1005bfd:	cdq    
 1005bfe:	idiv   ecx
 1005c00:	lea    ebp,[rax+0x1]
 1005c03:	movzx  eax,WORD PTR [r8+0x8]
 1005c08:	mov    edx,eax
 1005c0a:	imul   edx,ebp
 1005c0d:	test   edx,edx
 1005c0f:	js     0x1005c9f
 1005c15:	cmp    edx,ebp
 1005c17:	jl     0x1005c9f
 1005c1d:	cmp    edx,eax
 1005c1f:	jl     0x1005c9f
 1005c21:	mov    eax,DWORD PTR [r8]
 1005c24:	add    eax,0xc
 1005c27:	lea    r9d,[rax+rdx*1]
 1005c2b:	cmp    r9d,eax
 1005c2e:	jb     0x1005c9f
 1005c30:	movsxd rdx,r9d
 1005c33:	mov    rcx,r8
 1005c36:	call   QWORD PTR [rip+0xffffffffffffb774]        # 0x10013b0
 1005c3c:	mov    r11,rax
 1005c3f:	test   rax,rax
 1005c42:	jne    0x1005c55
 1005c44:	lea    ecx,[rax+0x4]
 1005c47:	call   0x1005d30
 1005c4c:	mov    ecx,r14d
 1005c4f:	call   0x10052f0
 1005c54:	int3   
 1005c55:	mov    QWORD PTR [rsi],rax
 1005c58:	movzx  eax,WORD PTR [rax+0x8]
 1005c5c:	imul   eax,ebp
 1005c5f:	add    DWORD PTR [r11],eax
 1005c62:	mov    rcx,QWORD PTR [rsi]
 1005c65:	movsxd r8,ebx
 1005c68:	mov    rdx,rdi
 1005c6b:	movsxd rax,DWORD PTR [rcx+0x4]
 1005c6f:	add    rcx,0xc
 1005c73:	add    rcx,rax
 1005c76:	call   0x100a914
 1005c7b:	mov    r11,QWORD PTR [rsi]
 1005c7e:	add    DWORD PTR [r11+0x4],ebx
 1005c82:	xor    eax,eax
 1005c84:	mov    rbp,QWORD PTR [rsp+0x30]
 1005c89:	mov    rbx,QWORD PTR [rsp+0x38]
 1005c8e:	mov    rsi,QWORD PTR [rsp+0x40]
 1005c93:	mov    rdi,QWORD PTR [rsp+0x48]
 1005c98:	add    rsp,0x20
 1005c9c:	pop    r14
 1005c9e:	ret    
 1005c9f:	movzx  eax,r14w
 1005ca3:	jmp    0x1005c84
 1005ca5:	int3   
 1005ca6:	int3   
 1005ca7:	int3   
 1005ca8:	int3   
 1005ca9:	int3   
 1005caa:	int3   
 1005cab:	int3   
 1005cac:	int3   
 1005cad:	int3   
 1005cae:	int3   
 1005caf:	int3   
 1005cb0:	mov    DWORD PTR [rsp+0x8],ecx
 1005cb4:	mov    QWORD PTR [rsp+0x10],rdx
 1005cb9:	mov    QWORD PTR [rsp+0x18],r8
 1005cbe:	mov    QWORD PTR [rsp+0x20],r9
 1005cc3:	push   rbx
 1005cc4:	push   rdi
 1005cc5:	sub    rsp,0x38
 1005cc9:	mov    ebx,ecx
 1005ccb:	mov    ecx,0x402
 1005cd0:	call   QWORD PTR [rip+0xffffffffffffb67a]        # 0x1001350
 1005cd6:	mov    rcx,QWORD PTR [rip+0x85db]        # 0x100e2b8
 1005cdd:	mov    r9d,0x200
 1005ce3:	mov    edx,ebx
 1005ce5:	mov    r8,rax
 1005ce8:	mov    DWORD PTR [rsp+0x20],0x1
 1005cf0:	mov    rdi,rax
 1005cf3:	call   0x1005f20
 1005cf8:	lea    rbx,[rsp+0x58]
 1005cfd:	call   QWORD PTR [rip+0xffffffffffffb655]        # 0x1001358
 1005d03:	mov    r8,rbx
 1005d06:	mov    rdx,rdi
 1005d09:	lea    rcx,[rax+0x60]
 1005d0d:	call   QWORD PTR [rip+0xffffffffffffb51d]        # 0x1001230
 1005d13:	mov    rcx,rdi
 1005d16:	call   QWORD PTR [rip+0xffffffffffffb62c]        # 0x1001348
 1005d1c:	add    rsp,0x38
 1005d20:	pop    rdi
 1005d21:	pop    rbx
 1005d22:	ret    
 1005d23:	int3   
 1005d24:	int3   
 1005d25:	int3   
 1005d26:	int3   
 1005d27:	int3   
 1005d28:	int3   
 1005d29:	int3   
 1005d2a:	int3   
 1005d2b:	int3   
 1005d2c:	int3   
 1005d2d:	int3   
 1005d2e:	int3   
 1005d2f:	int3   
 1005d30:	sub    rsp,0x248
 1005d37:	mov    rax,QWORD PTR [rip+0x83f2]        # 0x100e130
 1005d3e:	xor    rax,rsp
 1005d41:	mov    QWORD PTR [rsp+0x230],rax
 1005d49:	mov    edx,ecx
 1005d4b:	mov    rcx,QWORD PTR [rip+0x8566]        # 0x100e2b8
 1005d52:	lea    r8,[rsp+0x30]
 1005d57:	mov    r9d,0x100
 1005d5d:	mov    DWORD PTR [rsp+0x20],0x1
 1005d65:	call   0x1005f20
 1005d6a:	lea    rdx,[rsp+0x30]
 1005d6f:	lea    rcx,[rip+0xffffffffffffb81e]        # 0x1001594
 1005d76:	call   QWORD PTR [rip+0xffffffffffffb4ac]        # 0x1001228
 1005d7c:	mov    rcx,QWORD PTR [rsp+0x230]
 1005d84:	xor    rcx,rsp
 1005d87:	call   0x100a730
 1005d8c:	add    rsp,0x248
 1005d93:	ret    
 1005d94:	int3   
 1005d95:	int3   
 1005d96:	int3   
 1005d97:	int3   
 1005d98:	int3   
 1005d99:	int3   
 1005d9a:	int3   
 1005d9b:	int3   
 1005d9c:	int3   
 1005d9d:	int3   
 1005d9e:	int3   
 1005d9f:	int3   
 1005da0:	mov    QWORD PTR [rsp+0x8],rbx
 1005da5:	push   rdi
 1005da6:	sub    rsp,0x20
 1005daa:	mov    rbx,rdx
 1005dad:	mov    rdi,r8
 1005db0:	xor    eax,eax
 1005db2:	mov    rdx,rcx
 1005db5:	lea    r8,[rip+0xffffffffffffbaa8]        # 0x1001864
 1005dbc:	mov    rcx,rbx
 1005dbf:	mov    WORD PTR [rsp+0x48],ax
 1005dc4:	call   0x1006070
 1005dc9:	test   eax,eax
 1005dcb:	jne    0x1005e47
 1005dcd:	mov    r9,QWORD PTR [rbx]
 1005dd0:	lea    edx,[rax+0x2]
 1005dd3:	lea    r8d,[rax+0x1]
 1005dd7:	lea    rcx,[rsp+0x48]
 1005ddc:	call   QWORD PTR [rip+0xffffffffffffb406]        # 0x10011e8
 1005de2:	cmp    rax,0x1
 1005de6:	jne    0x1005e14
 1005de8:	movzx  eax,WORD PTR [rsp+0x48]
 1005ded:	mov    ecx,0xfffe
 1005df2:	cmp    ax,cx
 1005df5:	je     0x1005e01
 1005df7:	mov    ecx,0xfeff
 1005dfc:	cmp    ax,cx
 1005dff:	jne    0x1005e14
 1005e01:	mov    DWORD PTR [rdi],0x1
 1005e07:	xor    eax,eax
 1005e09:	mov    rbx,QWORD PTR [rsp+0x30]
 1005e0e:	add    rsp,0x20
 1005e12:	pop    rdi
 1005e13:	ret    
 1005e14:	mov    DWORD PTR [rdi],0x3
 1005e1a:	mov    rcx,QWORD PTR [rbx]
 1005e1d:	call   QWORD PTR [rip+0xffffffffffffb3d5]        # 0x10011f8
 1005e23:	mov    rcx,QWORD PTR [rbx]
 1005e26:	call   QWORD PTR [rip+0xffffffffffffb3ac]        # 0x10011d8
 1005e2c:	mov    edx,0x4000
 1005e31:	mov    ecx,eax
 1005e33:	call   QWORD PTR [rip+0xffffffffffffb57f]        # 0x10013b8
 1005e39:	cmp    eax,0xffffffff
 1005e3c:	jne    0x1005e07
 1005e3e:	mov    rcx,QWORD PTR [rbx]
 1005e41:	call   QWORD PTR [rip+0xffffffffffffb381]        # 0x10011c8
 1005e47:	mov    eax,0x1
 1005e4c:	mov    rbx,QWORD PTR [rsp+0x30]
 1005e51:	add    rsp,0x20
 1005e55:	pop    rdi
 1005e56:	ret    
 1005e57:	int3   
 1005e58:	int3   
 1005e59:	int3   
 1005e5a:	int3   
 1005e5b:	int3   
 1005e5c:	int3   
 1005e5d:	int3   
 1005e5e:	int3   
 1005e5f:	int3   
 1005e60:	xor    eax,eax
 1005e62:	cmp    WORD PTR [rcx],ax
 1005e65:	je     0x1005e9d
 1005e67:	movzx  edx,WORD PTR [rcx]
 1005e6a:	cmp    edx,0x7b
 1005e6d:	je     0x1005e91
 1005e6f:	cmp    edx,0x7d
 1005e72:	jne    0x1005e7e
 1005e74:	cmp    WORD PTR [rcx+0x2],dx
 1005e78:	jne    0x1005e85
 1005e7a:	add    rcx,0x2
 1005e7e:	test   eax,eax
 1005e80:	jg     0x1005e93
 1005e82:	xor    eax,eax
 1005e84:	ret    
 1005e85:	add    rcx,0x2
 1005e89:	dec    eax
 1005e8b:	cmp    WORD PTR [rcx],0x0
 1005e8f:	jmp    0x1005e65
 1005e91:	inc    eax
 1005e93:	add    rcx,0x2
 1005e97:	cmp    WORD PTR [rcx],0x0
 1005e9b:	jmp    0x1005e65
 1005e9d:	mov    eax,0x1
 1005ea2:	ret    
 1005ea3:	int3   
 1005ea4:	int3   
 1005ea5:	int3   
 1005ea6:	int3   
 1005ea7:	int3   
 1005ea8:	int3   
 1005ea9:	int3   
 1005eaa:	int3   
 1005eab:	int3   
 1005eac:	int3   
 1005ead:	int3   
 1005eae:	int3   
 1005eaf:	int3   
 1005eb0:	sub    rsp,0xd8
 1005eb7:	mov    rax,QWORD PTR [rip+0x8272]        # 0x100e130
 1005ebe:	xor    rax,rsp
 1005ec1:	mov    QWORD PTR [rsp+0xc0],rax
 1005ec9:	lea    rcx,[rsp+0x20]
 1005ece:	mov    DWORD PTR [rsp+0x20],0x94
 1005ed6:	call   QWORD PTR [rip+0xffffffffffffb1f4]        # 0x10010d0
 1005edc:	xor    r11d,r11d
 1005edf:	cmp    DWORD PTR [rsp+0x30],0x1
 1005ee4:	mov    eax,r11d
 1005ee7:	setne  al
 1005eea:	test   eax,eax
 1005eec:	mov    DWORD PTR [rip+0x835a],eax        # 0x100e24c
 1005ef2:	sete   r11b
 1005ef6:	mov    DWORD PTR [rip+0x835b],r11d        # 0x100e258
 1005efd:	mov    rcx,QWORD PTR [rsp+0xc0]
 1005f05:	xor    rcx,rsp
 1005f08:	call   0x100a730
 1005f0d:	add    rsp,0xd8
 1005f14:	ret    
 1005f15:	int3   
 1005f16:	int3   
 1005f17:	int3   
 1005f18:	int3   
 1005f19:	int3   
 1005f1a:	int3   
 1005f1b:	int3   
 1005f1c:	int3   
 1005f1d:	int3   
 1005f1e:	int3   
 1005f1f:	int3   
 1005f20:	mov    QWORD PTR [rsp+0x10],rbx
 1005f25:	mov    QWORD PTR [rsp+0x18],rbp
 1005f2a:	push   rsi
 1005f2b:	push   r14
 1005f2d:	push   r15
 1005f2f:	sub    rsp,0x30
 1005f33:	or     rbx,0xffffffffffffffff
 1005f37:	cmp    DWORD PTR [rip+0x830e],0x0        # 0x100e24c
 1005f3e:	movsxd rbp,r9d
 1005f41:	mov    rsi,r8
 1005f44:	mov    r14d,edx
 1005f47:	mov    r15,rcx
 1005f4a:	je     0x1005f5a
 1005f4c:	mov    r9d,ebp
 1005f4f:	call   QWORD PTR [rip+0xffffffffffffb54b]        # 0x10014a0
 1005f55:	mov    r14d,eax
 1005f58:	jmp    0x1005fc2
 1005f5a:	mov    eax,ebp
 1005f5c:	mov    ecx,0xffffffff
 1005f61:	add    rax,rax
 1005f64:	cmp    rax,rcx
 1005f67:	jbe    0x1005f70
 1005f69:	xor    eax,eax
 1005f6b:	jmp    0x100602b
 1005f70:	movsxd rdx,eax
 1005f73:	mov    ecx,0x40
 1005f78:	mov    QWORD PTR [rsp+0x50],rdi
 1005f7d:	call   QWORD PTR [rip+0xffffffffffffb0a5]        # 0x1001028
 1005f83:	mov    r9d,ebp
 1005f86:	mov    edx,r14d
 1005f89:	mov    r8,rax
 1005f8c:	mov    rcx,r15
 1005f8f:	mov    rdi,rax
 1005f92:	call   QWORD PTR [rip+0xffffffffffffb500]        # 0x1001498
 1005f98:	mov    r9d,ebx
 1005f9b:	mov    r8,rdi
 1005f9e:	xor    edx,edx
 1005fa0:	xor    ecx,ecx
 1005fa2:	mov    DWORD PTR [rsp+0x28],ebp
 1005fa6:	mov    r14d,eax
 1005fa9:	mov    QWORD PTR [rsp+0x20],rsi
 1005fae:	call   QWORD PTR [rip+0xffffffffffffb124]        # 0x10010d8
 1005fb4:	mov    rcx,rdi
 1005fb7:	call   QWORD PTR [rip+0xffffffffffffb083]        # 0x1001040
 1005fbd:	mov    rdi,QWORD PTR [rsp+0x50]
 1005fc2:	test   r14d,r14d
 1005fc5:	je     0x1006028
 1005fc7:	cmp    DWORD PTR [rsp+0x70],0x0
 1005fcc:	je     0x1006028
 1005fce:	cmp    DWORD PTR [rip+0x8143],0x1        # 0x100e118
 1005fd5:	jne    0x1006000
 1005fd7:	nop    WORD PTR [rax+rax*1+0x0]
 1005fe0:	inc    rbx
 1005fe3:	cmp    WORD PTR [rsi+rbx*2],0x0
 1005fe8:	jne    0x1005fe0
 1005fea:	lea    eax,[rbp-0x2]
 1005fed:	movsxd rcx,eax
 1005ff0:	cmp    rbx,rcx
 1005ff3:	jae    0x1006028
 1005ff5:	lea    r8,[rip+0xffffffffffffb51c]        # 0x1001518
 1005ffc:	jmp    0x100601c
 1005ffe:	xchg   ax,ax
 1006000:	inc    rbx
 1006003:	cmp    WORD PTR [rsi+rbx*2],0x0
 1006008:	jne    0x1006000
 100600a:	lea    eax,[rbp-0x1]
 100600d:	movsxd rcx,eax
 1006010:	cmp    rbx,rcx
 1006013:	jae    0x1006028
 1006015:	lea    r8,[rip+0xffffffffffffb580]        # 0x100159c
 100601c:	mov    rdx,rbp
 100601f:	mov    rcx,rsi
 1006022:	call   QWORD PTR [rip+0xffffffffffffb350]        # 0x1001378
 1006028:	mov    eax,r14d
 100602b:	mov    rbx,QWORD PTR [rsp+0x58]
 1006030:	mov    rbp,QWORD PTR [rsp+0x60]
 1006035:	add    rsp,0x30
 1006039:	pop    r15
 100603b:	pop    r14
 100603d:	pop    rsi
 100603e:	ret    
 100603f:	int3   
 1006040:	int3   
 1006041:	int3   
 1006042:	int3   
 1006043:	int3   
 1006044:	int3   
 1006045:	int3   
 1006046:	int3   
 1006047:	int3   
 1006048:	int3   
 1006049:	int3   
 100604a:	int3   
 100604b:	int3   
 100604c:	int3   
 100604d:	int3   
 100604e:	int3   
 100604f:	int3   
 1006050:	xor    eax,eax
 1006052:	cmp    DWORD PTR [rip+0x80bf],0x1        # 0x100e118
 1006059:	sete   al
 100605c:	ret    
 100605d:	int3   
 100605e:	int3   
 100605f:	int3   
 1006060:	int3   
 1006061:	int3   
 1006062:	int3   
 1006063:	int3   
 1006064:	int3   
 1006065:	int3   
 1006066:	int3   
 1006067:	int3   
 1006068:	int3   
 1006069:	int3   
 100606a:	int3   
 100606b:	int3   
 100606c:	int3   
 100606d:	int3   
 100606e:	int3   
 100606f:	int3   
 1006070:	mov    QWORD PTR [rsp+0x20],rbx
 1006075:	push   rbp
 1006076:	push   rsi
 1006077:	push   rdi
 1006078:	sub    rsp,0x2d0
 100607f:	mov    rax,QWORD PTR [rip+0x80aa]        # 0x100e130
 1006086:	xor    rax,rsp
 1006089:	mov    QWORD PTR [rsp+0x2c0],rax
 1006091:	mov    rdi,rcx
 1006094:	mov    rcx,rdx
 1006097:	mov    rbp,r8
 100609a:	mov    rsi,rdx
 100609d:	call   0x1006e80
 10060a2:	test   eax,eax
 10060a4:	je     0x10060b5
 10060a6:	xor    ebx,ebx
 10060a8:	mov    QWORD PTR [rdi],rbx
 10060ab:	mov    eax,0x1
 10060b0:	jmp    0x100616b
 10060b5:	cmp    DWORD PTR [rip+0x819c],0x0        # 0x100e258
 10060bc:	je     0x1006151
 10060c2:	xor    ebx,ebx
 10060c4:	lea    rax,[rsp+0xb0]
 10060cc:	or     r9d,0xffffffff
 10060d0:	mov    QWORD PTR [rsp+0x38],rbx
 10060d5:	mov    QWORD PTR [rsp+0x30],rbx
 10060da:	lea    ecx,[rbx+0x1]
 10060dd:	mov    r8,rsi
 10060e0:	xor    edx,edx
 10060e2:	mov    DWORD PTR [rsp+0x28],0x207
 10060ea:	mov    QWORD PTR [rsp+0x20],rax
 10060ef:	call   QWORD PTR [rip+0xffffffffffffaf1b]        # 0x1001010
 10060f5:	mov    QWORD PTR [rsp+0x38],rbx
 10060fa:	lea    rax,[rsp+0x40]
 10060ff:	mov    QWORD PTR [rsp+0x30],rbx
 1006104:	lea    ecx,[rbx+0x1]
 1006107:	or     r9d,0xffffffff
 100610b:	mov    r8,rbp
 100610e:	xor    edx,edx
 1006110:	mov    DWORD PTR [rsp+0x28],0x63
 1006118:	mov    BYTE PTR [rsp+0x2b7],bl
 100611f:	mov    QWORD PTR [rsp+0x20],rax
 1006124:	call   QWORD PTR [rip+0xffffffffffffaee6]        # 0x1001010
 100612a:	lea    rdx,[rsp+0x40]
 100612f:	lea    rcx,[rsp+0xb0]
 1006137:	mov    BYTE PTR [rsp+0xa3],bl
 100613e:	call   QWORD PTR [rip+0xffffffffffffb09c]        # 0x10011e0
 1006144:	mov    QWORD PTR [rdi],rax
 1006147:	test   rax,rax
 100614a:	jne    0x1006169
 100614c:	lea    eax,[rbx+0x1]
 100614f:	jmp    0x100616b
 1006151:	mov    rdx,rbp
 1006154:	mov    rcx,rsi
 1006157:	call   QWORD PTR [rip+0xffffffffffffb0db]        # 0x1001238
 100615d:	mov    QWORD PTR [rdi],rax
 1006160:	test   rax,rax
 1006163:	je     0x10060ab
 1006169:	xor    eax,eax
 100616b:	mov    rcx,QWORD PTR [rsp+0x2c0]
 1006173:	xor    rcx,rsp
 1006176:	call   0x100a730
 100617b:	mov    rbx,QWORD PTR [rsp+0x308]
 1006183:	add    rsp,0x2d0
 100618a:	pop    rdi
 100618b:	pop    rsi
 100618c:	pop    rbp
 100618d:	ret    
 100618e:	int3   
 100618f:	int3   
 1006190:	int3   
 1006191:	int3   
 1006192:	int3   
 1006193:	int3   
 1006194:	int3   
 1006195:	int3   
 1006196:	int3   
 1006197:	int3   
 1006198:	int3   
 1006199:	int3   
 100619a:	int3   
 100619b:	int3   
 100619c:	int3   
 100619d:	int3   
 100619e:	int3   
 100619f:	int3   
 10061a0:	rex push rbx
 10061a2:	push   rbp
 10061a3:	push   rsi
 10061a4:	push   rdi
 10061a5:	push   r12
 10061a7:	push   r14
 10061a9:	push   r15
 10061ab:	sub    rsp,0x50
 10061af:	mov    rax,QWORD PTR [rip+0x7f7a]        # 0x100e130
 10061b6:	xor    rax,rsp
 10061b9:	mov    QWORD PTR [rsp+0x40],rax
 10061be:	movsxd rsi,r8d
 10061c1:	movzx  r8d,WORD PTR [rip+0x9757]        # 0x100f920
 10061c9:	mov    rbx,rcx
 10061cc:	lea    rcx,[rip+0x996d]        # 0x100fb40
 10061d3:	xor    r12d,r12d
 10061d6:	mov    rbp,rdx
 10061d9:	movzx  edi,r12w
 10061dd:	call   QWORD PTR [rip+0xffffffffffffb1bd]        # 0x10013a0
 10061e3:	movzx  ecx,WORD PTR [rbx]
 10061e6:	test   eax,eax
 10061e8:	lea    edx,[r12+0x8]
 10061ed:	mov    r14d,r12d
 10061f0:	mov    r15d,0x1
 10061f6:	cmove  r14d,r15d
 10061fa:	call   QWORD PTR [rip+0xffffffffffffb170]        # 0x1001370
 1006200:	test   eax,eax
 1006202:	je     0x1006227
 1006204:	data16 data16 data16 nop WORD PTR [rax+rax*1+0x0]
 1006210:	movzx  ecx,WORD PTR [rbx+0x2]
 1006214:	add    rbx,0x2
 1006218:	mov    edx,0x8
 100621d:	call   QWORD PTR [rip+0xffffffffffffb14d]        # 0x1001370
 1006223:	test   eax,eax
 1006225:	jne    0x1006210
 1006227:	mov    r8,rsi
 100622a:	mov    rdx,rbp
 100622d:	mov    rcx,rbx
 1006230:	call   QWORD PTR [rip+0xffffffffffffb16a]        # 0x10013a0
 1006236:	test   eax,eax
 1006238:	je     0x1006241
 100623a:	xor    eax,eax
 100623c:	jmp    0x1006340
 1006241:	movzx  ecx,WORD PTR [rip+0x7fd8]        # 0x100e220
 1006248:	test   cx,cx
 100624b:	je     0x1006269
 100624d:	movzx  r8d,cx
 1006251:	lea    rcx,[rip+0x9b68]        # 0x100fdc0
 1006258:	mov    rdx,rbp
 100625b:	call   QWORD PTR [rip+0xffffffffffffb13f]        # 0x10013a0
 1006261:	test   eax,eax
 1006263:	je     0x100633d
 1006269:	movzx  eax,WORD PTR [rbx+rsi*2]
 100626d:	lea    rbx,[rbx+rsi*2]
 1006271:	test   ax,ax
 1006274:	je     0x100633d
 100627a:	nop    WORD PTR [rax+rax*1+0x0]
 1006280:	mov    edx,0x8
 1006285:	movzx  ecx,ax
 1006288:	call   QWORD PTR [rip+0xffffffffffffb0e2]        # 0x1001370
 100628e:	test   eax,eax
 1006290:	jne    0x100632d
 1006296:	test   r14d,r14d
 1006299:	je     0x100623a
 100629b:	movzx  ecx,WORD PTR [rbx]
 100629e:	test   cx,cx
 10062a1:	je     0x10062f3
 10062a3:	lea    eax,[rcx-0x30]
 10062a6:	cmp    ax,0x9
 10062aa:	ja     0x10062c6
 10062ac:	movsx  rax,di
 10062b0:	add    rbx,0x2
 10062b4:	inc    di
 10062b7:	mov    WORD PTR [rsp+rax*2+0x20],cx
 10062bc:	movzx  ecx,WORD PTR [rbx]
 10062bf:	test   cx,cx
 10062c2:	jne    0x10062a3
 10062c4:	jmp    0x10062f3
 10062c6:	movzx  eax,WORD PTR [rbx]
 10062c9:	test   ax,ax
 10062cc:	je     0x10062f3
 10062ce:	xchg   ax,ax
 10062d0:	mov    edx,0x8
 10062d5:	movzx  ecx,ax
 10062d8:	call   QWORD PTR [rip+0xffffffffffffb092]        # 0x1001370
 10062de:	test   eax,eax
 10062e0:	je     0x100623a
 10062e6:	movzx  eax,WORD PTR [rbx+0x2]
 10062ea:	add    rbx,0x2
 10062ee:	test   ax,ax
 10062f1:	jne    0x10062d0
 10062f3:	test   di,di
 10062f6:	je     0x1006331
 10062f8:	movsx  rax,di
 10062fc:	add    rax,rax
 10062ff:	cmp    rax,0x1e
 1006303:	jae    0x100635c
 1006305:	lea    rcx,[rsp+0x20]
 100630a:	mov    WORD PTR [rsp+rax*1+0x20],r12w
 1006310:	call   QWORD PTR [rip+0xffffffffffffaea2]        # 0x10011b8
 1006316:	mov    WORD PTR [rip+0x8bd7],ax        # 0x100eef4
 100631d:	cmp    ax,r15w
 1006321:	jge    0x1006331
 1006323:	mov    WORD PTR [rip+0x8bc9],r15w        # 0x100eef4
 100632b:	jmp    0x1006331
 100632d:	add    rbx,0x2
 1006331:	movzx  eax,WORD PTR [rbx]
 1006334:	test   ax,ax
 1006337:	jne    0x1006280
 100633d:	mov    eax,r15d
 1006340:	mov    rcx,QWORD PTR [rsp+0x40]
 1006345:	xor    rcx,rsp
 1006348:	call   0x100a730
 100634d:	add    rsp,0x50
 1006351:	pop    r15
 1006353:	pop    r14
 1006355:	pop    r12
 1006357:	pop    rdi
 1006358:	pop    rsi
 1006359:	pop    rbp
 100635a:	pop    rbx
 100635b:	ret    
 100635c:	xor    ecx,ecx
 100635e:	call   0x100a764
 1006363:	int3   
 1006364:	int3   
 1006365:	int3   
 1006366:	int3   
 1006367:	int3   
 1006368:	int3   
 1006369:	int3   
 100636a:	int3   
 100636b:	int3   
 100636c:	int3   
 100636d:	int3   
 100636e:	int3   
 100636f:	int3   
 1006370:	mov    r11,rsp
 1006373:	push   rbp
 1006374:	sub    rsp,0x270
 100637b:	mov    rax,QWORD PTR [rip+0x7dae]        # 0x100e130
 1006382:	xor    rax,rsp
 1006385:	mov    QWORD PTR [rsp+0x240],rax
 100638d:	mov    rcx,QWORD PTR [rip+0x7ef4]        # 0x100e288
 1006394:	mov    QWORD PTR [r11+0x8],rbx
 1006398:	mov    QWORD PTR [r11-0x10],r12
 100639c:	xor    ebp,ebp
 100639e:	mov    QWORD PTR [r11-0x18],r13
 10063a2:	mov    QWORD PTR [r11-0x28],r15
 10063a6:	lea    r9d,[rbp-0x6]
 10063aa:	xor    r8d,r8d
 10063ad:	mov    edx,0x4d9
 10063b2:	mov    WORD PTR [rsp+0x30],bp
 10063b7:	mov    r15d,0x7532
 10063bd:	mov    r12d,ebp
 10063c0:	call   0x100adf2
 10063c5:	or     r13,0xffffffffffffffff
 10063c9:	lea    ebx,[rbp+0x1]
 10063cc:	cmp    bp,ax
 10063cf:	je     0x10063ec
 10063d1:	cmp    bx,ax
 10063d4:	je     0x10063ec
 10063d6:	mov    rdx,QWORD PTR [rip+0x7eab]        # 0x100e288
 10063dd:	mov    ecx,0x2
 10063e2:	call   0x1005660
 10063e7:	jmp    0x10067d4
 10063ec:	mov    rcx,QWORD PTR [rip+0x7e95]        # 0x100e288
 10063f3:	mov    r9d,0xfffffffa
 10063f9:	mov    r8,rbx
 10063fc:	mov    edx,0x4dd
 1006401:	call   0x100adf2
 1006406:	cmp    bp,ax
 1006409:	je     0x1006410
 100640b:	cmp    bx,ax
 100640e:	jne    0x10063d6
 1006410:	mov    ecx,0xea60
 1006415:	mov    QWORD PTR [rsp+0x258],r14
 100641d:	call   QWORD PTR [rip+0xffffffffffffaf2d]        # 0x1001350
 1006423:	mov    r14,rax
 1006426:	test   rax,rax
 1006429:	jne    0x1006438
 100642b:	lea    ecx,[rax+0x1a]
 100642e:	call   0x1005d30
 1006433:	jmp    0x10067cc
 1006438:	xor    edx,edx
 100643a:	mov    r8d,0xea60
 1006440:	mov    rcx,rax
 1006443:	call   0x100a756
 1006448:	mov    ecx,0xea64
 100644d:	call   QWORD PTR [rip+0xffffffffffffaefd]        # 0x1001350
 1006453:	mov    rbx,rax
 1006456:	test   rax,rax
 1006459:	jne    0x1006468
 100645b:	lea    ecx,[rax+0x1a]
 100645e:	call   0x1005d30
 1006463:	jmp    0x10067a7
 1006468:	xor    edx,edx
 100646a:	mov    r8d,0xea64
 1006470:	mov    rcx,rax
 1006473:	mov    QWORD PTR [rsp+0x288],rsi
 100647b:	mov    QWORD PTR [rsp+0x290],rdi
 1006483:	call   0x100a756
 1006488:	mov    rcx,QWORD PTR [rip+0x7df9]        # 0x100e288
 100648f:	lea    rax,[rsp+0x30]
 1006494:	lea    rdx,[rip+0xffffffffffffb3d5]        # 0x1001870
 100649b:	mov    QWORD PTR [rsp+0x28],rax
 10064a0:	mov    edi,0x7530
 10064a5:	mov    r8d,0xfffffffd
 10064ab:	mov    r9,r14
 10064ae:	mov    WORD PTR [rsp+0x20],di
 10064b3:	call   0x100ae16
 10064b8:	or     rdx,0xffffffffffffffff
 10064bc:	movzx  esi,ax
 10064bf:	cmp    dx,ax
 10064c2:	je     0x10064d9
 10064c4:	mov    r8d,0xea60
 10064ca:	mov    rdx,r14
 10064cd:	mov    rcx,rbx
 10064d0:	call   0x100a914
 10064d5:	or     rdx,0xffffffffffffffff
 10064d9:	mov    eax,0x63
 10064de:	cmp    ax,si
 10064e1:	jne    0x100663f
 10064e7:	lea    r13d,[rax-0x43]
 10064eb:	nop    DWORD PTR [rax+rax*1+0x0]
 10064f0:	cmp    WORD PTR [rsp+0x30],di
 10064f5:	jle    0x100663f
 10064fb:	movsxd rdi,r15d
 10064fe:	add    rdi,rdi
 1006501:	mov    rcx,rdi
 1006504:	call   QWORD PTR [rip+0xffffffffffffae46]        # 0x1001350
 100650a:	mov    r12,rax
 100650d:	test   rax,rax
 1006510:	je     0x100665e
 1006516:	mov    r8,rdi
 1006519:	mov    rdx,rbx
 100651c:	mov    rcx,rax
 100651f:	call   0x100a914
 1006524:	mov    rcx,rbx
 1006527:	call   QWORD PTR [rip+0xffffffffffffae1b]        # 0x1001348
 100652d:	mov    esi,0x7530
 1006532:	add    r15d,esi
 1006535:	movsxd rdi,r15d
 1006538:	add    rdi,rdi
 100653b:	mov    rcx,rdi
 100653e:	call   QWORD PTR [rip+0xffffffffffffae0c]        # 0x1001350
 1006544:	mov    rbx,rax
 1006547:	test   rax,rax
 100654a:	je     0x100665e
 1006550:	mov    r8,rdi
 1006553:	xor    edx,edx
 1006555:	mov    rcx,rax
 1006558:	call   0x100a756
 100655d:	shr    rdi,1
 1006560:	mov    r8,r12
 1006563:	mov    rdx,rdi
 1006566:	mov    rcx,rbx
 1006569:	call   QWORD PTR [rip+0xffffffffffffadc1]        # 0x1001330
 100656f:	mov    rcx,r12
 1006572:	call   QWORD PTR [rip+0xffffffffffffadd0]        # 0x1001348
 1006578:	xor    edx,edx
 100657a:	mov    r8d,0xea60
 1006580:	mov    rcx,r14
 1006583:	mov    r12,rbp
 1006586:	call   0x100a756
 100658b:	mov    rcx,QWORD PTR [rip+0x7cf6]        # 0x100e288
 1006592:	lea    rax,[rsp+0x30]
 1006597:	mov    QWORD PTR [rsp+0x28],rax
 100659c:	lea    rdx,[rip+0xffffffffffffb2cd]        # 0x1001870
 10065a3:	mov    r8d,0xfffffffd
 10065a9:	mov    r9,r14
 10065ac:	mov    WORD PTR [rsp+0x20],si
 10065b1:	call   0x100ae16
 10065b6:	or     rdx,0xffffffffffffffff
 10065ba:	movzx  esi,ax
 10065bd:	cmp    dx,ax
 10065c0:	je     0x100662c
 10065c2:	mov    rax,rdx
 10065c5:	inc    rax
 10065c8:	cmp    WORD PTR [rbx+rax*2],bp
 10065cc:	jne    0x10065c5
 10065ce:	dec    eax
 10065d0:	movsxd rcx,eax
 10065d3:	js     0x1006602
 10065d5:	cmp    r13w,WORD PTR [rbx+rcx*2]
 10065da:	jne    0x10065e9
 10065dc:	mov    WORD PTR [rbx+rcx*2],bp
 10065e0:	dec    eax
 10065e2:	dec    rcx
 10065e5:	jns    0x10065d5
 10065e7:	jmp    0x1006602
 10065e9:	movsxd rcx,eax
 10065ec:	mov    r8d,0x2c
 10065f2:	cmp    r8w,WORD PTR [rbx+rcx*2]
 10065f7:	je     0x1006602
 10065f9:	inc    eax
 10065fb:	movsxd rcx,eax
 10065fe:	mov    DWORD PTR [rbx+rcx*2],r8d
 1006602:	mov    rax,rdx
 1006605:	inc    rax
 1006608:	cmp    WORD PTR [r14+rax*2],bp
 100660d:	jne    0x1006605
 100660f:	mov    rdx,rdi
 1006612:	mov    rcx,rbx
 1006615:	lea    r8,[r14+0x1e]
 1006619:	cmp    rax,0xf
 100661d:	ja     0x1006622
 100661f:	mov    r8,r14
 1006622:	call   QWORD PTR [rip+0xffffffffffffad50]        # 0x1001378
 1006628:	or     rdx,0xffffffffffffffff
 100662c:	mov    eax,0x63
 1006631:	mov    edi,0x7530
 1006636:	cmp    ax,si
 1006639:	je     0x10064f0
 100663f:	cmp    dx,si
 1006642:	jne    0x1006671
 1006644:	mov    rdx,QWORD PTR [rip+0x7c3d]        # 0x100e288
 100664b:	mov    ecx,0x2
 1006650:	call   0x1005660
 1006655:	or     r13,0xffffffffffffffff
 1006659:	jmp    0x1006797
 100665e:	mov    ecx,0x1a
 1006663:	call   0x1005d30
 1006668:	or     r13,0xffffffffffffffff
 100666c:	jmp    0x1006797
 1006671:	mov    rcx,QWORD PTR [rip+0x7c40]        # 0x100e2b8
 1006678:	lea    r8,[rsp+0x40]
 100667d:	mov    r9d,0x100
 1006683:	mov    edx,0x27
 1006688:	mov    DWORD PTR [rsp+0x20],0x1
 1006690:	call   0x1005f20
 1006695:	lea    rdx,[rsp+0x40]
 100669a:	lea    rcx,[rip+0xffffffffffffaef3]        # 0x1001594
 10066a1:	call   QWORD PTR [rip+0xffffffffffffab81]        # 0x1001228
 10066a7:	mov    edx,0x7b
 10066ac:	mov    rcx,rbx
 10066af:	call   QWORD PTR [rip+0xffffffffffffaccb]        # 0x1001380
 10066b5:	cmp    WORD PTR [rax+0x2],0x7d
 10066ba:	lea    rdi,[rax+0x2]
 10066be:	jne    0x10066d3
 10066c0:	mov    ecx,0x26
 10066c5:	call   0x1005d30
 10066ca:	or     r13,0xffffffffffffffff
 10066ce:	jmp    0x1006797
 10066d3:	movzx  ecx,bp
 10066d6:	mov    rsi,rdi
 10066d9:	test   r15d,r15d
 10066dc:	jle    0x1006701
 10066de:	xchg   ax,ax
 10066e0:	movzx  eax,WORD PTR [rsi]
 10066e3:	cmp    ax,0x7d
 10066e7:	je     0x1006707
 10066e9:	cmp    ax,0x2c
 10066ed:	jne    0x10066f2
 10066ef:	mov    WORD PTR [rsi],bp
 10066f2:	inc    cx
 10066f5:	add    rsi,0x2
 10066f9:	movsx  eax,cx
 10066fc:	cmp    eax,r15d
 10066ff:	jl     0x10066e0
 1006701:	cmp    WORD PTR [rsi],0x7d
 1006705:	jne    0x100670c
 1006707:	mov    WORD PTR [rsi],bp
 100670a:	jmp    0x1006711
 100670c:	mov    ebp,0x1
 1006711:	or     r13,0xffffffffffffffff
 1006715:	cmp    WORD PTR [rdi],0x0
 1006719:	je     0x1006758
 100671b:	nop    DWORD PTR [rax+rax*1+0x0]
 1006720:	cmp    rdi,rsi
 1006723:	ja     0x1006758
 1006725:	lea    rcx,[rip+0xffffffffffffb194]        # 0x10018c0
 100672c:	mov    rdx,rdi
 100672f:	call   QWORD PTR [rip+0xffffffffffffaaf3]        # 0x1001228
 1006735:	mov    rax,r13
 1006738:	nop    DWORD PTR [rax+rax*1+0x0]
 1006740:	inc    rax
 1006743:	cmp    WORD PTR [rdi+rax*2],0x0
 1006748:	jne    0x1006740
 100674a:	lea    rdi,[rdi+rax*2]
 100674e:	add    rdi,0x2
 1006752:	cmp    WORD PTR [rdi],0x0
 1006756:	jne    0x1006720
 1006758:	test   ebp,ebp
 100675a:	je     0x1006792
 100675c:	mov    rcx,QWORD PTR [rip+0x7b55]        # 0x100e2b8
 1006763:	lea    r8,[rsp+0x40]
 1006768:	mov    r9d,0x100
 100676e:	mov    edx,0x32
 1006773:	mov    DWORD PTR [rsp+0x20],0x1
 100677b:	call   0x1005f20
 1006780:	lea    rdx,[rsp+0x40]
 1006785:	lea    rcx,[rip+0xffffffffffffae08]        # 0x1001594
 100678c:	call   QWORD PTR [rip+0xffffffffffffaa96]        # 0x1001228
 1006792:	mov    ebp,0x1
 1006797:	mov    rdi,QWORD PTR [rsp+0x290]
 100679f:	mov    rsi,QWORD PTR [rsp+0x288]
 10067a7:	mov    rcx,r14
 10067aa:	call   QWORD PTR [rip+0xffffffffffffab98]        # 0x1001348
 10067b0:	test   rbx,rbx
 10067b3:	je     0x10067be
 10067b5:	mov    rcx,rbx
 10067b8:	call   QWORD PTR [rip+0xffffffffffffab8a]        # 0x1001348
 10067be:	test   r12,r12
 10067c1:	je     0x10067cc
 10067c3:	mov    rcx,r12
 10067c6:	call   QWORD PTR [rip+0xffffffffffffab7c]        # 0x1001348
 10067cc:	mov    r14,QWORD PTR [rsp+0x258]
 10067d4:	mov    rcx,QWORD PTR [rip+0x7aad]        # 0x100e288
 10067db:	call   0x100ad62
 10067e0:	mov    r15,QWORD PTR [rsp+0x250]
 10067e8:	mov    r12,QWORD PTR [rsp+0x268]
 10067f0:	mov    rbx,QWORD PTR [rsp+0x280]
 10067f8:	cmp    r13w,ax
 10067fc:	mov    r13,QWORD PTR [rsp+0x260]
 1006804:	jne    0x1006817
 1006806:	mov    rdx,QWORD PTR [rip+0x7a7b]        # 0x100e288
 100680d:	mov    ecx,0x2
 1006812:	call   0x1005660
 1006817:	mov    eax,ebp
 1006819:	mov    rcx,QWORD PTR [rsp+0x240]
 1006821:	xor    rcx,rsp
 1006824:	call   0x100a730
 1006829:	add    rsp,0x270
 1006830:	pop    rbp
 1006831:	ret    
 1006832:	int3   
 1006833:	int3   
 1006834:	int3   
 1006835:	int3   
 1006836:	int3   
 1006837:	int3   
 1006838:	int3   
 1006839:	int3   
 100683a:	int3   
 100683b:	int3   
 100683c:	int3   
 100683d:	int3   
 100683e:	int3   
 100683f:	int3   
 1006840:	mov    QWORD PTR [rsp+0x10],rbx
 1006845:	push   rdi
 1006846:	sub    rsp,0x30
 100684a:	mov    rdi,rdx
 100684d:	mov    rbx,rcx
 1006850:	call   QWORD PTR [rip+0xffffffffffffab02]        # 0x1001358
 1006856:	add    rax,0x30
 100685a:	cmp    rbx,rax
 100685d:	jne    0x1006871
 100685f:	mov    rcx,rdi
 1006862:	mov    rbx,QWORD PTR [rsp+0x48]
 1006867:	add    rsp,0x30
 100686b:	pop    rdi
 100686c:	jmp    0x1002b60
 1006871:	call   QWORD PTR [rip+0xffffffffffffaae1]        # 0x1001358
 1006877:	add    rax,0x60
 100687b:	cmp    rbx,rax
 100687e:	jne    0x10068b0
 1006880:	mov    ecx,0xfffffff4
 1006885:	mov    DWORD PTR [rsp+0x40],0x0
 100688d:	call   QWORD PTR [rip+0xffffffffffffa7e5]        # 0x1001078
 1006893:	or     r8d,0xffffffff
 1006897:	mov    rdx,rdi
 100689a:	mov    r9,rax
 100689d:	lea    rax,[rsp+0x40]
 10068a2:	lea    ecx,[r8+0x2]
 10068a6:	mov    QWORD PTR [rsp+0x20],rax
 10068ab:	call   0x1002c00
 10068b0:	mov    rbx,QWORD PTR [rsp+0x48]
 10068b5:	add    rsp,0x30
 10068b9:	pop    rdi
 10068ba:	ret    
 10068bb:	int3   
 10068bc:	int3   
 10068bd:	int3   
 10068be:	int3   
 10068bf:	int3   
 10068c0:	int3   
 10068c1:	int3   
 10068c2:	int3   
 10068c3:	int3   
 10068c4:	int3   
 10068c5:	int3   
 10068c6:	int3   
 10068c7:	int3   
 10068c8:	int3   
 10068c9:	int3   
 10068ca:	int3   
 10068cb:	int3   
 10068cc:	int3   
 10068cd:	int3   
 10068ce:	int3   
 10068cf:	int3   
 10068d0:	mov    QWORD PTR [rsp+0x8],rbx
 10068d5:	mov    QWORD PTR [rsp+0x10],rbp
 10068da:	mov    QWORD PTR [rsp+0x18],rsi
 10068df:	mov    QWORD PTR [rsp+0x20],rdi
 10068e4:	push   r14
 10068e6:	mov    r11,QWORD PTR [rsp+0x30]
 10068eb:	xor    esi,esi
 10068ed:	mov    rdi,r9
 10068f0:	mov    DWORD PTR [r11],esi
 10068f3:	mov    rbx,rdx
 10068f6:	mov    r10,rcx
 10068f9:	mov    DWORD PTR [r9],0x1
 1006900:	test   rdx,rdx
 1006903:	je     0x100690c
 1006905:	mov    QWORD PTR [rdx],r8
 1006908:	add    rbx,0x8
 100690c:	cmp    WORD PTR [rcx],0x22
 1006910:	jne    0x1006970
 1006912:	movzx  eax,WORD PTR [r10+0x2]
 1006917:	add    r10,0x2
 100691b:	cmp    ax,0x22
 100691f:	je     0x100694b
 1006921:	test   ax,ax
 1006924:	je     0x100694b
 1006926:	add    DWORD PTR [r11],0x2
 100692a:	test   r8,r8
 100692d:	je     0x100693c
 100692f:	movzx  eax,WORD PTR [r10]
 1006933:	add    r8,0x2
 1006937:	mov    WORD PTR [r8-0x2],ax
 100693c:	movzx  eax,WORD PTR [r10+0x2]
 1006941:	add    r10,0x2
 1006945:	cmp    ax,0x22
 1006949:	jne    0x1006921
 100694b:	add    DWORD PTR [r11],0x2
 100694f:	test   r8,r8
 1006952:	je     0x100695c
 1006954:	mov    WORD PTR [r8],si
 1006958:	add    r8,0x2
 100695c:	cmp    WORD PTR [r10],0x22
 1006961:	jne    0x10069a9
 1006963:	add    r10,0x2
 1006967:	jmp    0x10069a9
 1006969:	nop    DWORD PTR [rax+0x0]
 1006970:	add    DWORD PTR [r11],0x2
 1006974:	test   r8,r8
 1006977:	je     0x1006986
 1006979:	movzx  eax,WORD PTR [r10]
 100697d:	add    r8,0x2
 1006981:	mov    WORD PTR [r8-0x2],ax
 1006986:	movzx  eax,WORD PTR [r10]
 100698a:	add    r10,0x2
 100698e:	cmp    ax,0x20
 1006992:	ja     0x1006970
 1006994:	test   ax,ax
 1006997:	jne    0x100699f
 1006999:	sub    r10,0x2
 100699d:	jmp    0x10069a9
 100699f:	test   r8,r8
 10069a2:	je     0x10069a9
 10069a4:	mov    WORD PTR [r8-0x2],si
 10069a9:	mov    r9d,esi
 10069ac:	mov    ebp,0xffff
 10069b1:	mov    r14d,0x5c
 10069b7:	nop    WORD PTR [rax+rax*1+0x0]
 10069c0:	cmp    WORD PTR [r10],si
 10069c4:	je     0x1006ac9
 10069ca:	nop    WORD PTR [rax+rax*1+0x0]
 10069d0:	movzx  eax,WORD PTR [r10]
 10069d4:	cmp    ax,0x20
 10069d8:	je     0x10069e0
 10069da:	cmp    ax,0x9
 10069de:	jne    0x10069e6
 10069e0:	add    r10,0x2
 10069e4:	jmp    0x10069d0
 10069e6:	cmp    WORD PTR [r10],si
 10069ea:	je     0x1006ac9
 10069f0:	test   rbx,rbx
 10069f3:	je     0x10069fc
 10069f5:	mov    QWORD PTR [rbx],r8
 10069f8:	add    rbx,0x8
 10069fc:	inc    DWORD PTR [rdi]
 10069fe:	xchg   ax,ax
 1006a00:	mov    edx,0x1
 1006a05:	movzx  eax,si
 1006a08:	cmp    WORD PTR [r10],r14w
 1006a0c:	jne    0x1006a1d
 1006a0e:	xchg   ax,ax
 1006a10:	add    r10,0x2
 1006a14:	inc    ax
 1006a17:	cmp    WORD PTR [r10],r14w
 1006a1b:	je     0x1006a10
 1006a1d:	cmp    WORD PTR [r10],0x22
 1006a22:	jne    0x1006a5d
 1006a24:	movzx  ecx,ax
 1006a27:	and    ecx,0x80000001
 1006a2d:	jge    0x1006a36
 1006a2f:	dec    ecx
 1006a31:	or     ecx,0xfffffffe
 1006a34:	inc    ecx
 1006a36:	test   ecx,ecx
 1006a38:	jne    0x1006a5a
 1006a3a:	test   r9d,r9d
 1006a3d:	je     0x1006a4d
 1006a3f:	cmp    WORD PTR [r10+0x2],0x22
 1006a45:	jne    0x1006a4d
 1006a47:	add    r10,0x2
 1006a4b:	jmp    0x1006a4f
 1006a4d:	mov    edx,esi
 1006a4f:	test   r9d,r9d
 1006a52:	mov    ecx,esi
 1006a54:	sete   cl
 1006a57:	mov    r9d,ecx
 1006a5a:	shr    ax,1
 1006a5d:	test   ax,ax
 1006a60:	je     0x1006a7b
 1006a62:	add    ax,bp
 1006a65:	test   r8,r8
 1006a68:	je     0x1006a72
 1006a6a:	mov    WORD PTR [r8],r14w
 1006a6e:	add    r8,0x2
 1006a72:	add    DWORD PTR [r11],0x2
 1006a76:	test   ax,ax
 1006a79:	jne    0x1006a62
 1006a7b:	movzx  eax,WORD PTR [r10]
 1006a7f:	test   ax,ax
 1006a82:	je     0x1006ab3
 1006a84:	test   r9d,r9d
 1006a87:	jne    0x1006a95
 1006a89:	cmp    ax,0x20
 1006a8d:	je     0x1006ab3
 1006a8f:	cmp    ax,0x9
 1006a93:	je     0x1006ab3
 1006a95:	test   edx,edx
 1006a97:	je     0x1006aaa
 1006a99:	test   r8,r8
 1006a9c:	je     0x1006aa6
 1006a9e:	mov    WORD PTR [r8],ax
 1006aa2:	add    r8,0x2
 1006aa6:	add    DWORD PTR [r11],0x2
 1006aaa:	add    r10,0x2
 1006aae:	jmp    0x1006a00
 1006ab3:	test   r8,r8
 1006ab6:	je     0x1006ac0
 1006ab8:	mov    WORD PTR [r8],si
 1006abc:	add    r8,0x2
 1006ac0:	add    DWORD PTR [r11],0x2
 1006ac4:	jmp    0x10069c0
 1006ac9:	mov    rbx,QWORD PTR [rsp+0x10]
 1006ace:	mov    rbp,QWORD PTR [rsp+0x18]
 1006ad3:	mov    rsi,QWORD PTR [rsp+0x20]
 1006ad8:	mov    rdi,QWORD PTR [rsp+0x28]
 1006add:	pop    r14
 1006adf:	ret    
 1006ae0:	int3   
 1006ae1:	int3   
 1006ae2:	int3   
 1006ae3:	int3   
 1006ae4:	int3   
 1006ae5:	int3   
 1006ae6:	int3   
 1006ae7:	int3   
 1006ae8:	int3   
 1006ae9:	int3   
 1006aea:	int3   
 1006aeb:	int3   
 1006aec:	int3   
 1006aed:	int3   
 1006aee:	int3   
 1006aef:	int3   
 1006af0:	mov    QWORD PTR [rsp+0x20],rbx
 1006af5:	push   rdi
 1006af6:	sub    rsp,0x260
 1006afd:	mov    rax,QWORD PTR [rip+0x762c]        # 0x100e130
 1006b04:	xor    rax,rsp
 1006b07:	mov    QWORD PTR [rsp+0x250],rax
 1006b0f:	mov    rdi,rdx
 1006b12:	mov    rbx,rcx
 1006b15:	mov    DWORD PTR [rsp+0x30],0x0
 1006b1d:	test   rdx,rdx
 1006b20:	jne    0x1006b32
 1006b22:	lea    ecx,[rdx+0x57]
 1006b25:	call   QWORD PTR [rip+0xffffffffffffa535]        # 0x1001060
 1006b2b:	xor    eax,eax
 1006b2d:	jmp    0x1006bc6
 1006b32:	lea    rdx,[rsp+0x40]
 1006b37:	mov    r8d,0x104
 1006b3d:	xor    ecx,ecx
 1006b3f:	mov    QWORD PTR [rsp+0x280],rsi
 1006b47:	call   QWORD PTR [rip+0xffffffffffffa54b]        # 0x1001098
 1006b4d:	cmp    WORD PTR [rbx],0x0
 1006b51:	lea    rax,[rsp+0x30]
 1006b56:	lea    rsi,[rsp+0x40]
 1006b5b:	mov    r9,rdi
 1006b5e:	cmovne rsi,rbx
 1006b62:	xor    r8d,r8d
 1006b65:	xor    edx,edx
 1006b67:	mov    rcx,rsi
 1006b6a:	mov    QWORD PTR [rsp+0x20],rax
 1006b6f:	call   0x10068d0
 1006b74:	mov    r11d,DWORD PTR [rdi]
 1006b77:	lea    eax,[r11+0x1]
 1006b7b:	cmp    eax,r11d
 1006b7e:	jb     0x1006bbc
 1006b80:	mov    ecx,eax
 1006b82:	mov    eax,0xffffffff
 1006b87:	shl    rcx,0x3
 1006b8b:	cmp    rcx,rax
 1006b8e:	ja     0x1006bbc
 1006b90:	mov    edx,DWORD PTR [rsp+0x30]
 1006b94:	add    edx,ecx
 1006b96:	cmp    edx,ecx
 1006b98:	jb     0x1006bbc
 1006b9a:	mov    ecx,0x40
 1006b9f:	call   QWORD PTR [rip+0xffffffffffffa483]        # 0x1001028
 1006ba5:	mov    QWORD PTR [rip+0x76a4],rax        # 0x100e250
 1006bac:	test   rax,rax
 1006baf:	jne    0x1006be7
 1006bb1:	mov    ecx,0x8
 1006bb6:	call   QWORD PTR [rip+0xffffffffffffa4a4]        # 0x1001060
 1006bbc:	xor    eax,eax
 1006bbe:	mov    rsi,QWORD PTR [rsp+0x280]
 1006bc6:	mov    rcx,QWORD PTR [rsp+0x250]
 1006bce:	xor    rcx,rsp
 1006bd1:	call   0x100a730
 1006bd6:	mov    rbx,QWORD PTR [rsp+0x288]
 1006bde:	add    rsp,0x260
 1006be5:	pop    rdi
 1006be6:	ret    
 1006be7:	mov    rcx,rax
 1006bea:	call   QWORD PTR [rip+0xffffffffffffa440]        # 0x1001030
 1006bf0:	mov    rbx,rax
 1006bf3:	test   rax,rax
 1006bf6:	je     0x1006bb1
 1006bf8:	movsxd rax,DWORD PTR [rdi]
 1006bfb:	mov    r9,rdi
 1006bfe:	mov    rdx,rbx
 1006c01:	lea    r8,[rbx+rax*8]
 1006c05:	lea    rax,[rsp+0x30]
 1006c0a:	mov    rcx,rsi
 1006c0d:	mov    QWORD PTR [rsp+0x20],rax
 1006c12:	call   0x10068d0
 1006c17:	mov    rax,rbx
 1006c1a:	jmp    0x1006bbe
 1006c1c:	int3   
 1006c1d:	int3   
 1006c1e:	int3   
 1006c1f:	int3   
 1006c20:	int3   
 1006c21:	int3   
 1006c22:	int3   
 1006c23:	int3   
 1006c24:	int3   
 1006c25:	int3   
 1006c26:	int3   
 1006c27:	int3   
 1006c28:	int3   
 1006c29:	int3   
 1006c2a:	int3   
 1006c2b:	int3   
 1006c2c:	int3   
 1006c2d:	int3   
 1006c2e:	int3   
 1006c2f:	int3   
 1006c30:	sub    rsp,0x28
 1006c34:	mov    rcx,QWORD PTR [rip+0x75c5]        # 0x100e200
 1006c3b:	mov    DWORD PTR [rsp+0x30],0x0
 1006c43:	test   rcx,rcx
 1006c46:	je     0x1006d96
 1006c4c:	mov    edx,DWORD PTR [rip+0x75aa]        # 0x100e1fc
 1006c52:	test   edx,edx
 1006c54:	je     0x1006d96
 1006c5a:	lea    r9,[rsp+0x30]
 1006c5f:	xor    r8d,r8d
 1006c62:	mov    QWORD PTR [rsp+0x38],rbx
 1006c67:	mov    QWORD PTR [rsp+0x20],rdi
 1006c6c:	call   0x100af20
 1006c71:	test   eax,eax
 1006c73:	js     0x1006d1f
 1006c79:	mov    ebx,DWORD PTR [rsp+0x30]
 1006c7d:	mov    edi,DWORD PTR [rip+0x758d]        # 0x100e210
 1006c83:	cmp    ebx,edi
 1006c85:	jbe    0x1006cc3
 1006c87:	mov    rcx,QWORD PTR [rip+0x757a]        # 0x100e208
 1006c8e:	test   rcx,rcx
 1006c91:	je     0x1006ca5
 1006c93:	call   QWORD PTR [rip+0xffffffffffffa6af]        # 0x1001348
 1006c99:	mov    ebx,DWORD PTR [rsp+0x30]
 1006c9d:	xor    edi,edi
 1006c9f:	mov    DWORD PTR [rip+0x756b],edi        # 0x100e210
 1006ca5:	mov    ecx,ebx
 1006ca7:	call   QWORD PTR [rip+0xffffffffffffa6a3]        # 0x1001350
 1006cad:	mov    QWORD PTR [rip+0x7554],rax        # 0x100e208
 1006cb4:	test   rax,rax
 1006cb7:	je     0x1006d2c
 1006cb9:	mov    edi,ebx
 1006cbb:	mov    DWORD PTR [rip+0x754f],ebx        # 0x100e210
 1006cc1:	jmp    0x1006cca
 1006cc3:	mov    rax,QWORD PTR [rip+0x753e]        # 0x100e208
 1006cca:	mov    ecx,edi
 1006ccc:	mov    rdi,rax
 1006ccf:	xor    eax,eax
 1006cd1:	rep stos BYTE PTR es:[rdi],al
 1006cd3:	mov    r8,QWORD PTR [rip+0x752e]        # 0x100e208
 1006cda:	mov    edx,DWORD PTR [rip+0x751c]        # 0x100e1fc
 1006ce0:	mov    rcx,QWORD PTR [rip+0x7519]        # 0x100e200
 1006ce7:	lea    r9,[rip+0x7522]        # 0x100e210
 1006cee:	call   0x100af20
 1006cf3:	test   eax,eax
 1006cf5:	js     0x1006d1f
 1006cf7:	mov    ecx,DWORD PTR [rip+0x74ff]        # 0x100e1fc
 1006cfd:	mov    rdi,QWORD PTR [rip+0x74fc]        # 0x100e200
 1006d04:	mov    rbx,QWORD PTR [rsp+0x38]
 1006d09:	add    rcx,rcx
 1006d0c:	xor    eax,eax
 1006d0e:	rep stos BYTE PTR es:[rdi],al
 1006d10:	mov    rdi,QWORD PTR [rsp+0x20]
 1006d15:	mov    eax,0x1
 1006d1a:	add    rsp,0x28
 1006d1e:	ret    
 1006d1f:	mov    edi,DWORD PTR [rip+0x74eb]        # 0x100e210
 1006d25:	mov    rax,QWORD PTR [rip+0x74dc]        # 0x100e208
 1006d2c:	mov    rdx,QWORD PTR [rip+0x74cd]        # 0x100e200
 1006d33:	test   rdx,rdx
 1006d36:	je     0x1006d55
 1006d38:	mov    ecx,DWORD PTR [rip+0x74be]        # 0x100e1fc
 1006d3e:	mov    rdi,rdx
 1006d41:	add    rcx,rcx
 1006d44:	xor    eax,eax
 1006d46:	rep stos BYTE PTR es:[rdi],al
 1006d48:	mov    edi,DWORD PTR [rip+0x74c2]        # 0x100e210
 1006d4e:	mov    rax,QWORD PTR [rip+0x74b3]        # 0x100e208
 1006d55:	test   rax,rax
 1006d58:	je     0x1006d85
 1006d5a:	mov    ecx,edi
 1006d5c:	mov    rdi,rax
 1006d5f:	xor    eax,eax
 1006d61:	rep stos BYTE PTR es:[rdi],al
 1006d63:	mov    rcx,QWORD PTR [rip+0x749e]        # 0x100e208
 1006d6a:	call   QWORD PTR [rip+0xffffffffffffa5d8]        # 0x1001348
 1006d70:	mov    QWORD PTR [rip+0x748d],0x0        # 0x100e208
 1006d7b:	mov    DWORD PTR [rip+0x748b],0x0        # 0x100e210
 1006d85:	mov    rbx,QWORD PTR [rsp+0x38]
 1006d8a:	mov    rdi,QWORD PTR [rsp+0x20]
 1006d8f:	xor    eax,eax
 1006d91:	add    rsp,0x28
 1006d95:	ret    
 1006d96:	xor    eax,eax
 1006d98:	add    rsp,0x28
 1006d9c:	ret    
 1006d9d:	int3   
 1006d9e:	int3   
 1006d9f:	int3   
 1006da0:	int3   
 1006da1:	int3   
 1006da2:	int3   
 1006da3:	int3   
 1006da4:	int3   
 1006da5:	int3   
 1006da6:	int3   
 1006da7:	int3   
 1006da8:	int3   
 1006da9:	int3   
 1006daa:	int3   
 1006dab:	int3   
 1006dac:	int3   
 1006dad:	int3   
 1006dae:	int3   
 1006daf:	int3   
 1006db0:	rex push rdi
 1006db2:	sub    rsp,0x20
 1006db6:	mov    rcx,QWORD PTR [rip+0x744b]        # 0x100e208
 1006dbd:	xor    edi,edi
 1006dbf:	mov    DWORD PTR [rsp+0x30],edi
 1006dc3:	test   rcx,rcx
 1006dc6:	je     0x1006de3
 1006dc8:	mov    edx,DWORD PTR [rip+0x7442]        # 0x100e210
 1006dce:	test   edx,edx
 1006dd0:	je     0x1006de3
 1006dd2:	lea    r9,[rsp+0x30]
 1006dd7:	xor    r8d,r8d
 1006dda:	call   0x100af30
 1006ddf:	test   eax,eax
 1006de1:	jns    0x1006deb
 1006de3:	xor    eax,eax
 1006de5:	add    rsp,0x20
 1006de9:	pop    rdi
 1006dea:	ret    
 1006deb:	mov    QWORD PTR [rsp+0x38],rbx
 1006df0:	mov    ebx,DWORD PTR [rsp+0x30]
 1006df4:	cmp    ebx,DWORD PTR [rip+0x7402]        # 0x100e1fc
 1006dfa:	jbe    0x1006e42
 1006dfc:	mov    rcx,QWORD PTR [rip+0x73fd]        # 0x100e200
 1006e03:	test   rcx,rcx
 1006e06:	je     0x1006e18
 1006e08:	call   QWORD PTR [rip+0xffffffffffffa53a]        # 0x1001348
 1006e0e:	mov    ebx,DWORD PTR [rsp+0x30]
 1006e12:	mov    DWORD PTR [rip+0x73e4],edi        # 0x100e1fc
 1006e18:	mov    ecx,ebx
 1006e1a:	add    rcx,rcx
 1006e1d:	call   QWORD PTR [rip+0xffffffffffffa52d]        # 0x1001350
 1006e23:	mov    QWORD PTR [rip+0x73d6],rax        # 0x100e200
 1006e2a:	test   rax,rax
 1006e2d:	jne    0x1006e3a
 1006e2f:	mov    rbx,QWORD PTR [rsp+0x38]
 1006e34:	add    rsp,0x20
 1006e38:	pop    rdi
 1006e39:	ret    
 1006e3a:	mov    DWORD PTR [rip+0x73bc],ebx        # 0x100e1fc
 1006e40:	jmp    0x1006e49
 1006e42:	mov    rax,QWORD PTR [rip+0x73b7]        # 0x100e200
 1006e49:	mov    edx,DWORD PTR [rip+0x73c1]        # 0x100e210
 1006e4f:	mov    rcx,QWORD PTR [rip+0x73b2]        # 0x100e208
 1006e56:	lea    r9,[rsp+0x30]
 1006e5b:	mov    r8,rax
 1006e5e:	call   0x100af30
 1006e63:	mov    rbx,QWORD PTR [rsp+0x38]
 1006e68:	test   eax,eax
 1006e6a:	setns  dil
 1006e6e:	mov    eax,edi
 1006e70:	add    rsp,0x20
 1006e74:	pop    rdi
 1006e75:	ret    
 1006e76:	int3   
 1006e77:	int3   
 1006e78:	int3   
 1006e79:	int3   
 1006e7a:	int3   
 1006e7b:	int3   
 1006e7c:	int3   
 1006e7d:	int3   
 1006e7e:	int3   
 1006e7f:	int3   
 1006e80:	sub    rsp,0x268
 1006e87:	mov    rax,QWORD PTR [rip+0x72a2]        # 0x100e130
 1006e8e:	xor    rax,rsp
 1006e91:	mov    QWORD PTR [rsp+0x250],rax
 1006e99:	mov    r10,rcx
 1006e9c:	test   rcx,rcx
 1006e9f:	jne    0x1006ebb
 1006ea1:	xor    eax,eax
 1006ea3:	mov    rcx,QWORD PTR [rsp+0x250]
 1006eab:	xor    rcx,rsp
 1006eae:	call   0x100a730
 1006eb3:	add    rsp,0x268
 1006eba:	ret    
 1006ebb:	or     r8,0xffffffffffffffff
 1006ebf:	mov    rax,r8
 1006ec2:	inc    rax
 1006ec5:	cmp    WORD PTR [rcx+rax*2],0x0
 1006eca:	jne    0x1006ec2
 1006ecc:	test   rax,rax
 1006ecf:	je     0x1006ea1
 1006ed1:	movzx  ecx,WORD PTR [rcx+rax*2-0x2]
 1006ed6:	mov    QWORD PTR [rsp+0x260],rbx
 1006ede:	xor    ebx,ebx
 1006ee0:	cmp    cx,0x2f
 1006ee4:	je     0x1006ef0
 1006ee6:	cmp    cx,0x5c
 1006eea:	jne    0x1006faa
 1006ef0:	lea    rax,[rsp+0x40]
 1006ef5:	mov    ecx,0x105
 1006efa:	lea    rdx,[rsp+0x40]
 1006eff:	sub    r10,rax
 1006f02:	mov    r9d,ecx
 1006f05:	mov    r11d,ebx
 1006f08:	nop    DWORD PTR [rax+rax*1+0x0]
 1006f10:	lea    rax,[r9+0x7ffffef9]
 1006f17:	test   rax,rax
 1006f1a:	je     0x1006f34
 1006f1c:	movzx  eax,WORD PTR [r10+rdx*1]
 1006f21:	test   ax,ax
 1006f24:	je     0x1006f34
 1006f26:	mov    WORD PTR [rdx],ax
 1006f29:	add    rdx,0x2
 1006f2d:	dec    r9
 1006f30:	jne    0x1006f10
 1006f32:	jmp    0x1006f39
 1006f34:	test   r9,r9
 1006f37:	jne    0x1006f43
 1006f39:	sub    rdx,0x2
 1006f3d:	mov    r11d,0x8007007a
 1006f43:	mov    WORD PTR [rdx],bx
 1006f46:	test   r11d,r11d
 1006f49:	js     0x1006ff8
 1006f4f:	mov    rdx,rcx
 1006f52:	lea    rax,[rsp+0x40]
 1006f57:	cmp    WORD PTR [rax],bx
 1006f5a:	je     0x1006f67
 1006f5c:	add    rax,0x2
 1006f60:	dec    rdx
 1006f63:	jne    0x1006f57
 1006f65:	jmp    0x1006f91
 1006f67:	test   rdx,rdx
 1006f6a:	je     0x1006f91
 1006f6c:	sub    rcx,rdx
 1006f6f:	je     0x1006f91
 1006f71:	lea    rax,[rsp+rcx*2+0x3e]
 1006f76:	movzx  edx,WORD PTR [rax]
 1006f79:	cmp    dx,0x2f
 1006f7d:	je     0x1006f85
 1006f7f:	cmp    dx,0x5c
 1006f83:	jne    0x1006f91
 1006f85:	mov    WORD PTR [rax],bx
 1006f88:	sub    rax,0x2
 1006f8c:	dec    rcx
 1006f8f:	jne    0x1006f76
 1006f91:	lea    rax,[rsp+0x40]
 1006f96:	inc    r8
 1006f99:	cmp    WORD PTR [rax+r8*2],bx
 1006f9e:	jne    0x1006f96
 1006fa0:	test   r8,r8
 1006fa3:	je     0x1007005
 1006fa5:	lea    r10,[rsp+0x40]
 1006faa:	mov    QWORD PTR [rsp+0x30],rbx
 1006faf:	xor    r9d,r9d
 1006fb2:	xor    r8d,r8d
 1006fb5:	mov    edx,0x80
 1006fba:	mov    rcx,r10
 1006fbd:	mov    DWORD PTR [rsp+0x28],0x100000
 1006fc5:	mov    DWORD PTR [rsp+0x20],0x3
 1006fcd:	call   QWORD PTR [rip+0xffffffffffffa0ed]        # 0x10010c0
 1006fd3:	mov    rbx,rax
 1006fd6:	cmp    rax,0xffffffffffffffff
 1006fda:	je     0x1007005
 1006fdc:	test   rax,rax
 1006fdf:	je     0x1007005
 1006fe1:	mov    rcx,rax
 1006fe4:	call   QWORD PTR [rip+0xffffffffffffa086]        # 0x1001070
 1006fea:	mov    rcx,rbx
 1006fed:	cmp    eax,0x3
 1006ff0:	jne    0x1006fff
 1006ff2:	call   QWORD PTR [rip+0xffffffffffffa088]        # 0x1001080
 1006ff8:	mov    eax,0x1
 1006ffd:	jmp    0x1007007
 1006fff:	call   QWORD PTR [rip+0xffffffffffffa07b]        # 0x1001080
 1007005:	xor    eax,eax
 1007007:	mov    rbx,QWORD PTR [rsp+0x260]
 100700f:	mov    rcx,QWORD PTR [rsp+0x250]
 1007017:	xor    rcx,rsp
 100701a:	call   0x100a730
 100701f:	add    rsp,0x268
 1007026:	ret    
 1007027:	int3   
 1007028:	int3   
 1007029:	int3   
 100702a:	int3   
 100702b:	int3   
 100702c:	int3   
 100702d:	int3   
 100702e:	int3   
 100702f:	int3   
 1007030:	mov    QWORD PTR [rsp+0x8],rbx
 1007035:	mov    QWORD PTR [rsp+0x10],rbp
 100703a:	mov    QWORD PTR [rsp+0x18],rsi
 100703f:	mov    QWORD PTR [rsp+0x20],rdi
 1007044:	push   r14
 1007046:	mov    rbp,r9
 1007049:	mov    esi,r8d
 100704c:	mov    r11,rdx
 100704f:	mov    r10,rcx
 1007052:	mov    rax,r9
 1007055:	test   rcx,rcx
 1007058:	je     0x1007124
 100705e:	cmp    WORD PTR [rcx],0x0
 1007062:	je     0x1007124
 1007068:	xor    r14d,r14d
 100706b:	test   rdx,rdx
 100706e:	je     0x1007076
 1007070:	cmp    r14w,WORD PTR [rdx]
 1007074:	jne    0x100707d
 1007076:	mov    r11,QWORD PTR [rip+0x70ab]        # 0x100e128
 100707d:	mov    edi,DWORD PTR [rsp+0x30]
 1007081:	mov    r8d,edi
 1007084:	shr    r8,1
 1007087:	or     rcx,0xffffffffffffffff
 100708b:	nop    DWORD PTR [rax+rax*1+0x0]
 1007090:	inc    rcx
 1007093:	cmp    WORD PTR [r10+rcx*2],r14w
 1007098:	jne    0x1007090
 100709a:	lea    rbx,[r10-0x2]
 100709e:	lea    rbx,[rbx+rcx*2]
 10070a2:	cmp    r10,rbx
 10070a5:	ja     0x100711b
 10070a7:	test   r8,r8
 10070aa:	je     0x100713e
 10070b0:	movzx  ecx,WORD PTR [r10]
 10070b4:	mov    WORD PTR [rax],cx
 10070b7:	movzx  edx,WORD PTR [r11]
 10070bb:	cmp    cx,dx
 10070be:	jne    0x10070d2
 10070c0:	dec    r8
 10070c3:	je     0x100713e
 10070c5:	mov    WORD PTR [rax+0x2],dx
 10070c9:	add    rax,0x4
 10070cd:	dec    r8
 10070d0:	jmp    0x1007112
 10070d2:	cmp    esi,0x1
 10070d5:	jne    0x100710b
 10070d7:	cmp    edi,0x3
 10070da:	jbe    0x100713e
 10070dc:	movzx  edx,WORD PTR [r10]
 10070e0:	add    rax,0x2
 10070e4:	mov    WORD PTR [rax-0x2],dx
 10070e8:	mov    rcx,QWORD PTR [rip+0x7039]        # 0x100e128
 10070ef:	movzx  r9d,WORD PTR [rcx]
 10070f3:	cmp    dx,r9w
 10070f7:	jne    0x1007112
 10070f9:	dec    r8
 10070fc:	je     0x100713e
 10070fe:	mov    WORD PTR [rax],r9w
 1007102:	add    rax,0x2
 1007106:	dec    r8
 1007109:	jmp    0x1007112
 100710b:	dec    r8
 100710e:	add    rax,0x2
 1007112:	add    r10,0x2
 1007116:	cmp    r10,rbx
 1007119:	jbe    0x10070a7
 100711b:	test   r8,r8
 100711e:	je     0x100713e
 1007120:	mov    WORD PTR [rax],r14w
 1007124:	mov    rax,rbp
 1007127:	mov    rbx,QWORD PTR [rsp+0x10]
 100712c:	mov    rbp,QWORD PTR [rsp+0x18]
 1007131:	mov    rsi,QWORD PTR [rsp+0x20]
 1007136:	mov    rdi,QWORD PTR [rsp+0x28]
 100713b:	pop    r14
 100713d:	ret    
 100713e:	xor    eax,eax
 1007140:	jmp    0x1007127
 1007142:	int3   
 1007143:	int3   
 1007144:	int3   
 1007145:	int3   
 1007146:	int3   
 1007147:	int3   
 1007148:	int3   
 1007149:	int3   
 100714a:	int3   
 100714b:	int3   
 100714c:	int3   
 100714d:	int3   
 100714e:	int3   
 100714f:	int3   
 1007150:	sub    rsp,0x248
 1007157:	mov    rax,QWORD PTR [rip+0x6fd2]        # 0x100e130
 100715e:	xor    rax,rsp
 1007161:	mov    QWORD PTR [rsp+0x230],rax
 1007169:	xor    eax,eax
 100716b:	lea    rcx,[rsp+0x22]
 1007170:	xor    edx,edx
 1007172:	mov    r8d,0x208
 1007178:	mov    WORD PTR [rsp+0x20],ax
 100717d:	call   0x100a756
 1007182:	lea    rcx,[rsp+0x20]
 1007187:	mov    edx,0x105
 100718c:	call   QWORD PTR [rip+0xffffffffffff9f26]        # 0x10010b8
 1007192:	test   eax,eax
 1007194:	je     0x100720b
 1007196:	cmp    eax,0x105
 100719b:	jae    0x100720b
 100719d:	lea    r8,[rip+0xffffffffffffa3bc]        # 0x1001560
 10071a4:	lea    rcx,[rsp+0x20]
 10071a9:	or     r9,0xffffffffffffffff
 10071ad:	mov    edx,0x105
 10071b2:	call   QWORD PTR [rip+0xffffffffffffa1d0]        # 0x1001388
 10071b8:	test   eax,eax
 10071ba:	jne    0x100720b
 10071bc:	lea    rcx,[rsp+0x20]
 10071c1:	mov    QWORD PTR [rsp+0x240],rbx
 10071c9:	call   QWORD PTR [rip+0xffffffffffff9ec1]        # 0x1001090
 10071cf:	mov    rbx,rax
 10071d2:	test   rax,rax
 10071d5:	je     0x1007203
 10071d7:	lea    rdx,[rip+0xffffffffffffa3a2]        # 0x1001580
 10071de:	mov    rcx,rax
 10071e1:	call   QWORD PTR [rip+0xffffffffffff9e39]        # 0x1001020
 10071e7:	test   rax,rax
 10071ea:	je     0x10071fa
 10071ec:	xor    r9d,r9d
 10071ef:	xor    r8d,r8d
 10071f2:	xor    ecx,ecx
 10071f4:	lea    edx,[r9+0x1]
 10071f8:	call   rax
 10071fa:	mov    rcx,rbx
 10071fd:	call   QWORD PTR [rip+0xffffffffffff9e15]        # 0x1001018
 1007203:	mov    rbx,QWORD PTR [rsp+0x240]
 100720b:	mov    rcx,QWORD PTR [rsp+0x230]
 1007213:	xor    rcx,rsp
 1007216:	call   0x100a730
 100721b:	add    rsp,0x248
 1007222:	ret    
 1007223:	int3   
 1007224:	int3   
 1007225:	int3   
 1007226:	int3   
 1007227:	int3   
 1007228:	int3   
 1007229:	int3   
 100722a:	int3   
 100722b:	int3   
 100722c:	int3   
 100722d:	int3   
 100722e:	int3   
 100722f:	int3   
 1007230:	rex push rbp
 1007232:	push   rbx
 1007233:	push   rsi
 1007234:	push   rdi
 1007235:	push   r13
 1007237:	lea    rbp,[rsp-0x1b70]
 100723f:	mov    eax,0x1c70
 1007244:	call   0x100a8c0
 1007249:	sub    rsp,rax
 100724c:	mov    rax,QWORD PTR [rip+0x6edd]        # 0x100e130
 1007253:	xor    rax,rsp
 1007256:	mov    QWORD PTR [rbp+0x1b60],rax
 100725d:	xor    edi,edi
 100725f:	mov    DWORD PTR [rbp-0x58],0x8
 1007266:	mov    DWORD PTR [rbp-0x78],edi
 1007269:	mov    DWORD PTR [rsp+0x70],edi
 100726d:	mov    DWORD PTR [rbp-0x60],edi
 1007270:	mov    DWORD PTR [rbp-0x68],edi
 1007273:	mov    DWORD PTR [rbp-0x74],edi
 1007276:	mov    DWORD PTR [rbp-0x6c],edi
 1007279:	mov    DWORD PTR [rsp+0x54],edi
 100727d:	mov    DWORD PTR [rbp-0x70],edi
 1007280:	mov    DWORD PTR [rsp+0x5c],edi
 1007284:	mov    DWORD PTR [rbp-0x64],edi
 1007287:	mov    r13d,edi
 100728a:	mov    QWORD PTR [rsp+0x78],rdi
 100728f:	mov    DWORD PTR [rsp+0x68],edi
 1007293:	mov    DWORD PTR [rbp-0x5c],edi
 1007296:	mov    DWORD PTR [rbp-0x50],edi
 1007299:	mov    QWORD PTR [rbp-0x80],rdi
 100729d:	mov    DWORD PTR [rsp+0x58],edi
 10072a1:	call   0x1007150
 10072a6:	mov    esi,0x1
 10072ab:	mov    DWORD PTR [rip+0x6f63],edi        # 0x100e214
 10072b1:	mov    ecx,esi
 10072b3:	call   QWORD PTR [rip+0xffffffffffff9f87]        # 0x1001240
 10072b9:	xor    ecx,ecx
 10072bb:	mov    DWORD PTR [rip+0x6e5f],eax        # 0x100e120
 10072c1:	call   QWORD PTR [rip+0xffffffffffff9dd9]        # 0x10010a0
 10072c7:	mov    rcx,rax
 10072ca:	call   0x100b150
 10072cf:	mov    QWORD PTR [rip+0x6fe2],rax        # 0x100e2b8
 10072d6:	test   rax,rax
 10072d9:	jne    0x1007366
 10072df:	call   QWORD PTR [rip+0xffffffffffff9d73]        # 0x1001058
 10072e5:	xor    ecx,ecx
 10072e7:	mov    ebx,eax
 10072e9:	call   QWORD PTR [rip+0xffffffffffff9db1]        # 0x10010a0
 10072ef:	xor    r9d,r9d
 10072f2:	xor    r8d,r8d
 10072f5:	mov    edx,ebx
 10072f7:	mov    rcx,rax
 10072fa:	call   0x100b9b0
 10072ff:	mov    ecx,eax
 1007301:	mov    esi,eax
 1007303:	add    rcx,rcx
 1007306:	call   QWORD PTR [rip+0xffffffffffffa044]        # 0x1001350
 100730c:	mov    rdi,rax
 100730f:	test   rax,rax
 1007312:	je     0x100735d
 1007314:	xor    ecx,ecx
 1007316:	call   QWORD PTR [rip+0xffffffffffff9d84]        # 0x10010a0
 100731c:	mov    r9d,esi
 100731f:	mov    r8,rdi
 1007322:	mov    rcx,rax
 1007325:	mov    edx,ebx
 1007327:	call   0x100b9b0
 100732c:	cmp    eax,esi
 100732e:	ja     0x1007354
 1007330:	lea    rcx,[rip+0xffffffffffffa25d]        # 0x1001594
 1007337:	mov    rdx,rdi
 100733a:	call   QWORD PTR [rip+0xffffffffffff9ee8]        # 0x1001228
 1007340:	lea    rdx,[rip+0xffffffffffffa255]        # 0x100159c
 1007347:	lea    rcx,[rip+0xffffffffffffa246]        # 0x1001594
 100734e:	call   QWORD PTR [rip+0xffffffffffff9ed4]        # 0x1001228
 1007354:	mov    rcx,rdi
 1007357:	call   QWORD PTR [rip+0xffffffffffff9feb]        # 0x1001348
 100735d:	or     ecx,0xffffffff
 1007360:	call   0x10052f0
 1007365:	int3   
 1007366:	call   0x100ae40
 100736b:	test   eax,eax
 100736d:	jns    0x1007378
 100736f:	or     ecx,0xffffffff
 1007372:	call   0x10052f0
 1007377:	int3   
 1007378:	mov    QWORD PTR [rsp+0x1ca0],r12
 1007380:	lea    rdx,[rbp+0x1360]
 1007387:	lea    rcx,[rip+0xffffffffffffa212]        # 0x10015a0
 100738e:	mov    r8d,0x3ff
 1007394:	mov    QWORD PTR [rsp+0x1ca8],r14
 100739c:	mov    DWORD PTR [rip+0x6e72],esi        # 0x100e214
 10073a2:	mov    QWORD PTR [rsp+0x1cb0],r15
 10073aa:	call   QWORD PTR [rip+0xffffffffffff9d00]        # 0x10010b0
 10073b0:	mov    r14d,eax
 10073b3:	test   eax,eax
 10073b5:	jne    0x10073c0
 10073b7:	mov    WORD PTR [rbp+0x1360],di
 10073be:	jmp    0x10073c7
 10073c0:	mov    WORD PTR [rbp+0x1b5e],di
 10073c7:	call   QWORD PTR [rip+0xffffffffffff9cdb]        # 0x10010a8
 10073cd:	mov    rdi,rax
 10073d0:	or     rax,0xffffffffffffffff
 10073d4:	inc    rax
 10073d7:	cmp    WORD PTR [rdi+rax*2],r13w
 10073dc:	jne    0x10073d4
 10073de:	add    eax,r14d
 10073e1:	lea    eax,[rax*2+0x4]
 10073e8:	mov    ecx,eax
 10073ea:	mov    r15d,eax
 10073ed:	call   QWORD PTR [rip+0xffffffffffff9f5d]        # 0x1001350
 10073f3:	mov    ebx,r15d
 10073f6:	mov    r8,rdi
 10073f9:	shr    rbx,1
 10073fc:	mov    rcx,rax
 10073ff:	mov    rsi,rax
 1007402:	mov    rdx,rbx
 1007405:	call   QWORD PTR [rip+0xffffffffffff9f25]        # 0x1001330
 100740b:	test   r14d,r14d
 100740e:	je     0x1007436
 1007410:	lea    r8,[rip+0xffffffffffffa109]        # 0x1001520
 1007417:	mov    rdx,rbx
 100741a:	mov    rcx,rsi
 100741d:	call   QWORD PTR [rip+0xffffffffffff9f55]        # 0x1001378
 1007423:	lea    r8,[rbp+0x1360]
 100742a:	mov    rdx,rbx
 100742d:	mov    rcx,rsi
 1007430:	call   QWORD PTR [rip+0xffffffffffff9f42]        # 0x1001378
 1007436:	lea    rdx,[rsp+0x58]
 100743b:	mov    rcx,rsi
 100743e:	call   0x1006af0
 1007443:	mov    r14d,DWORD PTR [rsp+0x58]
 1007448:	mov    rdi,rsi
 100744b:	mov    rbx,rax
 100744e:	xor    eax,eax
 1007450:	mov    rcx,r15
 1007453:	rep stos BYTE PTR es:[rdi],al
 1007455:	mov    rcx,rsi
 1007458:	mov    r12d,r14d
 100745b:	call   QWORD PTR [rip+0xffffffffffff9ee7]        # 0x1001348
 1007461:	call   0x1005eb0
 1007466:	lea    rdx,[rip+0xffffffffffffa143]        # 0x10015b0
 100746d:	xor    ecx,ecx
 100746f:	call   QWORD PTR [rip+0xffffffffffff9df3]        # 0x1001268
 1007475:	test   rax,rax
 1007478:	je     0x1009ad6
 100747e:	mov    ecx,0xfffffffe
 1007483:	call   QWORD PTR [rip+0xffffffffffff9de7]        # 0x1001270
 1007489:	cmp    eax,0xffffffff
 100748c:	je     0x1009ad6
 1007492:	mov    r15d,0x1
 1007498:	lea    r8,[rip+0x6de1]        # 0x100e280
 100749f:	xor    edx,edx
 10074a1:	mov    ecx,r15d
 10074a4:	call   0x100ad56
 10074a9:	cmp    ax,0xffff
 10074ad:	jne    0x10074c1
 10074af:	lea    ecx,[r15+0x27]
 10074b3:	call   0x1005d30
 10074b8:	or     ecx,0xffffffff
 10074bb:	call   0x10052f0
 10074c0:	int3   
 10074c1:	mov    rcx,QWORD PTR [rip+0x6db8]        # 0x100e280
 10074c8:	xor    r9d,r9d
 10074cb:	mov    edx,0xc8
 10074d0:	lea    r8d,[r9+0x3]
 10074d4:	call   0x100ad92
 10074d9:	xor    esi,esi
 10074db:	movzx  edi,ax
 10074de:	cmp    si,ax
 10074e1:	je     0x1007505
 10074e3:	mov    rdx,QWORD PTR [rip+0x6d96]        # 0x100e280
 10074ea:	mov    ecx,r15d
 10074ed:	call   0x1005660
 10074f2:	or     r15,0xffffffffffffffff
 10074f6:	cmp    r15w,di
 10074fa:	jne    0x1007509
 10074fc:	mov    ecx,r15d
 10074ff:	call   0x10052f0
 1007504:	int3   
 1007505:	or     r15,0xffffffffffffffff
 1007509:	mov    rdx,QWORD PTR [rip+0x6d70]        # 0x100e280
 1007510:	lea    r8,[rip+0x6d71]        # 0x100e288
 1007517:	mov    ecx,0x2
 100751c:	call   0x100ad56
 1007521:	movzx  edi,ax
 1007524:	cmp    si,ax
 1007527:	je     0x1007549
 1007529:	mov    rdx,QWORD PTR [rip+0x6d50]        # 0x100e280
 1007530:	mov    ecx,0x1
 1007535:	call   0x1005660
 100753a:	cmp    r15w,di
 100753e:	jne    0x1007549
 1007540:	mov    ecx,r15d
 1007543:	call   0x10052f0
 1007548:	int3   
 1007549:	mov    ecx,0x102
 100754e:	call   QWORD PTR [rip+0xffffffffffff9dfc]        # 0x1001350
 1007554:	mov    QWORD PTR [rip+0x6ca5],rax        # 0x100e200
 100755b:	test   rax,rax
 100755e:	jne    0x1007569
 1007560:	mov    ecx,r15d
 1007563:	call   0x10052f0
 1007568:	int3   
 1007569:	mov    rdi,rax
 100756c:	xor    eax,eax
 100756e:	mov    ecx,0x102
 1007573:	dec    r14d
 1007576:	mov    DWORD PTR [rip+0x6c7c],0x81        # 0x100e1fc
 1007580:	rep stos BYTE PTR es:[rdi],al
 1007582:	lea    rdi,[rip+0x7317]        # 0x100e8a0
 1007589:	lea    r9,[rip+0x7990]        # 0x100ef20
 1007590:	lea    rsi,[rip+0x7529]        # 0x100eac0
 1007597:	mov    r11d,0x100
 100759d:	lea    r10,[rip+0x839c]        # 0x100f940
 10075a4:	test   r14d,r14d
 10075a7:	jle    0x10080e3
 10075ad:	lea    r8,[rip+0xffffffffffff8a4c]        # 0x1000000
 10075b4:	data16 data16 data16 nop WORD PTR [rax+rax*1+0x0]
 10075c0:	mov    rdx,QWORD PTR [rbx+0x8]
 10075c4:	add    rbx,0x8
 10075c8:	movzx  eax,WORD PTR [rdx]
 10075cb:	cmp    ax,0x2d
 10075cf:	je     0x10075db
 10075d1:	cmp    ax,0x2f
 10075d5:	jne    0x10080e3
 10075db:	add    rdx,0x2
 10075df:	mov    QWORD PTR [rbx],rdx
 10075e2:	movzx  eax,WORD PTR [rdx]
 10075e5:	add    eax,0xffffffc1
 10075e8:	cmp    eax,0x39
 10075eb:	ja     0x1008188
 10075f1:	cdqe   
 10075f3:	mov    ecx,DWORD PTR [r8+rax*4+0x9aec]
 10075fb:	add    rcx,r8
 10075fe:	jmp    rcx
 1007600:	lea    rax,[rdx+0x2]
 1007604:	mov    QWORD PTR [rbx],rax
 1007607:	cmp    WORD PTR [rax],0x0
 100760b:	jne    0x100762f
 100760d:	lea    edi,[r14-0x1]
 1007611:	test   edi,edi
 1007613:	je     0x100762f
 1007615:	mov    rax,QWORD PTR [rbx+0x8]
 1007619:	movzx  ecx,WORD PTR [rax]
 100761c:	cmp    cx,0x2d
 1007620:	je     0x100762f
 1007622:	cmp    cx,0x2f
 1007626:	je     0x100762f
 1007628:	mov    r14d,edi
 100762b:	add    rbx,0x8
 100762f:	mov    r8,QWORD PTR [rbx]
 1007632:	mov    r9d,0x80
 1007638:	lea    rdi,[rip+0x8881]        # 0x100fec0
 100763f:	lea    edx,[r9+0x1]
 1007643:	mov    rcx,rdi
 1007646:	call   QWORD PTR [rip+0xffffffffffff9cec]        # 0x1001338
 100764c:	xor    eax,eax
 100764e:	mov    WORD PTR [rip+0x896b],ax        # 0x100ffc0
 1007655:	mov    rax,r15
 1007658:	nop    DWORD PTR [rax+rax*1+0x0]
 1007660:	inc    rax
 1007663:	cmp    WORD PTR [rdi+rax*2],0x0
 1007668:	jne    0x1007660
 100766a:	test   rax,rax
 100766d:	jne    0x10080ae
 1007673:	lea    rdx,[rip+0xffffffffffff9f42]        # 0x10015bc
 100767a:	lea    ecx,[rax+0x33]
 100767d:	call   0x1005cb0
 1007682:	mov    ecx,r15d
 1007685:	call   0x10052f0
 100768a:	int3   
 100768b:	lea    rax,[rdx+0x2]
 100768f:	mov    QWORD PTR [rbx],rax
 1007692:	cmp    WORD PTR [rax],0x0
 1007696:	jne    0x10076ba
 1007698:	lea    edi,[r14-0x1]
 100769c:	test   edi,edi
 100769e:	je     0x10076ba
 10076a0:	mov    rax,QWORD PTR [rbx+0x8]
 10076a4:	movzx  ecx,WORD PTR [rax]
 10076a7:	cmp    cx,0x2d
 10076ab:	je     0x10076ba
 10076ad:	cmp    cx,0x2f
 10076b1:	je     0x10076ba
 10076b3:	mov    r14d,edi
 10076b6:	add    rbx,0x8
 10076ba:	mov    r9d,DWORD PTR [rip+0x6b3b]        # 0x100e1fc
 10076c1:	mov    r8,QWORD PTR [rbx]
 10076c4:	mov    rcx,QWORD PTR [rip+0x6b35]        # 0x100e200
 10076cb:	dec    r9d
 10076ce:	mov    edx,0x81
 10076d3:	mov    DWORD PTR [rbp-0x78],0x1
 10076da:	call   QWORD PTR [rip+0xffffffffffff9c58]        # 0x1001338
 10076e0:	mov    ecx,DWORD PTR [rip+0x6b16]        # 0x100e1fc
 10076e6:	mov    rax,QWORD PTR [rip+0x6b13]        # 0x100e200
 10076ed:	dec    ecx
 10076ef:	xor    edx,edx
 10076f1:	mov    WORD PTR [rax+rcx*2],dx
 10076f5:	mov    rdi,QWORD PTR [rbx]
 10076f8:	mov    rcx,r15
 10076fb:	nop    DWORD PTR [rax+rax*1+0x0]
 1007700:	inc    rcx
 1007703:	cmp    WORD PTR [rdi+rcx*2],dx
 1007707:	jne    0x1007700
 1007709:	add    rcx,rcx
 100770c:	xor    eax,eax
 100770e:	rep stos BYTE PTR es:[rdi],al
 1007710:	call   0x1006c30
 1007715:	test   eax,eax
 1007717:	jne    0x10080ae
 100771d:	mov    ecx,r15d
 1007720:	call   0x10052f0
 1007725:	int3   
 1007726:	lea    rax,[rdx+0x2]
 100772a:	mov    QWORD PTR [rbx],rax
 100772d:	cmp    WORD PTR [rax],0x0
 1007731:	jne    0x1007755
 1007733:	lea    edi,[r14-0x1]
 1007737:	test   edi,edi
 1007739:	je     0x1007755
 100773b:	mov    rax,QWORD PTR [rbx+0x8]
 100773f:	movzx  ecx,WORD PTR [rax]
 1007742:	cmp    cx,0x2d
 1007746:	je     0x1007755
 1007748:	cmp    cx,0x2f
 100774c:	je     0x1007755
 100774e:	mov    r14d,edi
 1007751:	add    rbx,0x8
 1007755:	mov    DWORD PTR [rsp+0x70],0x1
 100775d:	jmp    0x10080c9
 1007762:	lea    rax,[rdx+0x2]
 1007766:	mov    QWORD PTR [rbx],rax
 1007769:	cmp    WORD PTR [rax],0x0
 100776d:	jne    0x1007791
 100776f:	lea    edi,[r14-0x1]
 1007773:	test   edi,edi
 1007775:	je     0x1007791
 1007777:	mov    rax,QWORD PTR [rbx+0x8]
 100777b:	movzx  ecx,WORD PTR [rax]
 100777e:	cmp    cx,0x2d
 1007782:	je     0x1007791
 1007784:	cmp    cx,0x2f
 1007788:	je     0x1007791
 100778a:	mov    r14d,edi
 100778d:	add    rbx,0x8
 1007791:	mov    r8,QWORD PTR [rbx]
 1007794:	mov    r9d,0x20
 100779a:	lea    rdi,[rip+0x86bf]        # 0x100fe60
 10077a1:	lea    edx,[r9+0x1]
 10077a5:	mov    rcx,rdi
 10077a8:	call   QWORD PTR [rip+0xffffffffffff9b8a]        # 0x1001338
 10077ae:	xor    eax,eax
 10077b0:	mov    WORD PTR [rip+0x86e9],ax        # 0x100fea0
 10077b7:	mov    rax,r15
 10077ba:	nop    WORD PTR [rax+rax*1+0x0]
 10077c0:	inc    rax
 10077c3:	cmp    WORD PTR [rdi+rax*2],0x0
 10077c8:	jne    0x10077c0
 10077ca:	test   rax,rax
 10077cd:	jne    0x10080ae
 10077d3:	lea    rdx,[rip+0xffffffffffff9dea]        # 0x10015c4
 10077da:	lea    ecx,[rax+0x33]
 10077dd:	call   0x1005cb0
 10077e2:	mov    ecx,r15d
 10077e5:	call   0x10052f0
 10077ea:	int3   
 10077eb:	lea    rax,[rdx+0x2]
 10077ef:	mov    QWORD PTR [rbx],rax
 10077f2:	cmp    WORD PTR [rax],0x0
 10077f6:	jne    0x100781a
 10077f8:	lea    edi,[r14-0x1]
 10077fc:	test   edi,edi
 10077fe:	je     0x100781a
 1007800:	mov    rax,QWORD PTR [rbx+0x8]
 1007804:	movzx  ecx,WORD PTR [rax]
 1007807:	cmp    cx,0x2d
 100780b:	je     0x100781a
 100780d:	cmp    cx,0x2f
 1007811:	je     0x100781a
 1007813:	mov    r14d,edi
 1007816:	add    rbx,0x8
 100781a:	mov    r8,QWORD PTR [rbx]
 100781d:	mov    r9d,0x80
 1007823:	lea    rdi,[rip+0x8356]        # 0x100fb80
 100782a:	lea    edx,[r9+0x1]
 100782e:	mov    rcx,rdi
 1007831:	call   QWORD PTR [rip+0xffffffffffff9b01]        # 0x1001338
 1007837:	xor    eax,eax
 1007839:	mov    WORD PTR [rip+0x8440],ax        # 0x100fc80
 1007840:	mov    rax,r15
 1007843:	inc    rax
 1007846:	cmp    WORD PTR [rdi+rax*2],0x0
 100784b:	jne    0x1007843
 100784d:	test   rax,rax
 1007850:	jne    0x10080ae
 1007856:	lea    rdx,[rip+0xffffffffffff9d6f]        # 0x10015cc
 100785d:	lea    ecx,[rax+0x33]
 1007860:	call   0x1005cb0
 1007865:	mov    ecx,r15d
 1007868:	call   0x10052f0
 100786d:	int3   
 100786e:	lea    rax,[rdx+0x2]
 1007872:	mov    QWORD PTR [rbx],rax
 1007875:	cmp    WORD PTR [rax],0x0
 1007879:	jne    0x100789d
 100787b:	lea    edi,[r14-0x1]
 100787f:	test   edi,edi
 1007881:	je     0x100789d
 1007883:	mov    rax,QWORD PTR [rbx+0x8]
 1007887:	movzx  ecx,WORD PTR [rax]
 100788a:	cmp    cx,0x2d
 100788e:	je     0x100789d
 1007890:	cmp    cx,0x2f
 1007894:	je     0x100789d
 1007896:	mov    r14d,edi
 1007899:	add    rbx,0x8
 100789d:	mov    rcx,QWORD PTR [rbx]
 10078a0:	call   QWORD PTR [rip+0xffffffffffff991a]        # 0x10011c0
 10078a6:	mov    r13d,eax
 10078a9:	cmp    eax,0x200
 10078ae:	jb     0x10078bb
 10078b0:	cmp    eax,0xffff
 10078b5:	jbe    0x10080ae
 10078bb:	mov    ecx,0x29
 10078c0:	call   0x1005d30
 10078c5:	xor    eax,eax
 10078c7:	mov    r13d,eax
 10078ca:	jmp    0x10080ae
 10078cf:	lea    rax,[rdx+0x2]
 10078d3:	mov    QWORD PTR [rbx],rax
 10078d6:	cmp    WORD PTR [rax],0x0
 10078da:	jne    0x10078fe
 10078dc:	lea    edi,[r14-0x1]
 10078e0:	test   edi,edi
 10078e2:	je     0x10078fe
 10078e4:	mov    rax,QWORD PTR [rbx+0x8]
 10078e8:	movzx  ecx,WORD PTR [rax]
 10078eb:	cmp    cx,0x2d
 10078ef:	je     0x10078fe
 10078f1:	cmp    cx,0x2f
 10078f5:	je     0x10078fe
 10078f7:	mov    r14d,edi
 10078fa:	add    rbx,0x8
 10078fe:	mov    rcx,QWORD PTR [rbx]
 1007901:	call   QWORD PTR [rip+0xffffffffffff98b9]        # 0x10011c0
 1007907:	mov    DWORD PTR [rsp+0x68],eax
 100790b:	jmp    0x10080ae
 1007910:	lea    rax,[rdx+0x2]
 1007914:	mov    QWORD PTR [rbx],rax
 1007917:	cmp    WORD PTR [rax],0x0
 100791b:	jne    0x100793f
 100791d:	lea    edi,[r14-0x1]
 1007921:	test   edi,edi
 1007923:	je     0x100793f
 1007925:	mov    rax,QWORD PTR [rbx+0x8]
 1007929:	movzx  ecx,WORD PTR [rax]
 100792c:	cmp    cx,0x2d
 1007930:	je     0x100793f
 1007932:	cmp    cx,0x2f
 1007936:	je     0x100793f
 1007938:	mov    r14d,edi
 100793b:	add    rbx,0x8
 100793f:	mov    rcx,QWORD PTR [rbx]
 1007942:	call   QWORD PTR [rip+0xffffffffffff9878]        # 0x10011c0
 1007948:	mov    DWORD PTR [rip+0x695a],eax        # 0x100e2a8
 100794e:	jmp    0x10080ae
 1007953:	mov    DWORD PTR [rip+0x688f],0x1        # 0x100e1ec
 100795d:	jmp    0x10080c9
 1007962:	mov    DWORD PTR [rip+0x6888],0x1        # 0x100e1f4
 100796c:	jmp    0x10080c9
 1007971:	lea    rax,[rdx+0x2]
 1007975:	mov    QWORD PTR [rbx],rax
 1007978:	cmp    WORD PTR [rax],0x0
 100797c:	jne    0x10079a0
 100797e:	lea    edi,[r14-0x1]
 1007982:	test   edi,edi
 1007984:	je     0x10079a0
 1007986:	mov    rax,QWORD PTR [rbx+0x8]
 100798a:	movzx  ecx,WORD PTR [rax]
 100798d:	cmp    cx,0x2d
 1007991:	je     0x10079a0
 1007993:	cmp    cx,0x2f
 1007997:	je     0x10079a0
 1007999:	mov    r14d,edi
 100799c:	add    rbx,0x8
 10079a0:	mov    r8,QWORD PTR [rbx]
 10079a3:	mov    r9d,0x3d
 10079a9:	lea    rdi,[rip+0x8430]        # 0x100fde0
 10079b0:	lea    edx,[r9+0x1]
 10079b4:	mov    rcx,rdi
 10079b7:	call   QWORD PTR [rip+0xffffffffffff997b]        # 0x1001338
 10079bd:	xor    eax,eax
 10079bf:	mov    WORD PTR [rip+0x8494],ax        # 0x100fe5a
 10079c6:	mov    rax,r15
 10079c9:	nop    DWORD PTR [rax+0x0]
 10079d0:	inc    rax
 10079d3:	cmp    WORD PTR [rdi+rax*2],0x0
 10079d8:	jne    0x10079d0
 10079da:	test   rax,rax
 10079dd:	je     0x10079fe
 10079df:	mov    rsi,rdi
 10079e2:	lea    rdi,[rip+0xffffffffffff9beb]        # 0x10015d4
 10079e9:	mov    ecx,0x2
 10079ee:	repz cmps WORD PTR ds:[rsi],WORD PTR es:[rdi]
 10079f1:	jne    0x10080ae
 10079f7:	lea    rdi,[rip+0x83e2]        # 0x100fde0
 10079fe:	lea    r8,[rip+0xffffffffffff9bd3]        # 0x10015d8
 1007a05:	mov    edx,0x3e
 1007a0a:	mov    rcx,rdi
 1007a0d:	call   QWORD PTR [rip+0xffffffffffff991d]        # 0x1001330
 1007a13:	jmp    0x10080ae
 1007a18:	lea    rax,[rdx+0x2]
 1007a1c:	mov    QWORD PTR [rbx],rax
 1007a1f:	cmp    WORD PTR [rax],0x0
 1007a23:	jne    0x1007a47
 1007a25:	lea    edi,[r14-0x1]
 1007a29:	test   edi,edi
 1007a2b:	je     0x1007a47
 1007a2d:	mov    rax,QWORD PTR [rbx+0x8]
 1007a31:	movzx  ecx,WORD PTR [rax]
 1007a34:	cmp    cx,0x2d
 1007a38:	je     0x1007a47
 1007a3a:	cmp    cx,0x2f
 1007a3e:	je     0x1007a47
 1007a40:	mov    r14d,edi
 1007a43:	add    rbx,0x8
 1007a47:	mov    rcx,QWORD PTR [rbx]
 1007a4a:	call   QWORD PTR [rip+0xffffffffffff9768]        # 0x10011b8
 1007a50:	mov    DWORD PTR [rbp-0x6c],eax
 1007a53:	jmp    0x10080ae
 1007a58:	lea    rax,[rdx+0x2]
 1007a5c:	mov    QWORD PTR [rbx],rax
 1007a5f:	cmp    WORD PTR [rax],0x0
 1007a63:	jne    0x1007a74
 1007a65:	lea    eax,[r14-0x1]
 1007a69:	test   eax,eax
 1007a6b:	je     0x1007a74
 1007a6d:	mov    r14d,eax
 1007a70:	add    rbx,0x8
 1007a74:	mov    r8,QWORD PTR [rbx]
 1007a77:	mov    r9d,0xa
 1007a7d:	lea    rsi,[rip+0x833c]        # 0x100fdc0
 1007a84:	lea    edx,[r9+0x1]
 1007a88:	mov    rcx,rsi
 1007a8b:	call   QWORD PTR [rip+0xffffffffffff98a7]        # 0x1001338
 1007a91:	xor    eax,eax
 1007a93:	mov    rcx,r15
 1007a96:	mov    WORD PTR [rip+0x8337],ax        # 0x100fdd4
 1007a9d:	mov    rdi,QWORD PTR [rbx]
 1007aa0:	inc    rcx
 1007aa3:	cmp    WORD PTR [rdi+rcx*2],ax
 1007aa7:	jne    0x1007aa0
 1007aa9:	add    rcx,rcx
 1007aac:	rep stos BYTE PTR es:[rdi],al
 1007aae:	mov    rax,r15
 1007ab1:	inc    rax
 1007ab4:	cmp    WORD PTR [rsi+rax*2],0x0
 1007ab9:	jne    0x1007ab1
 1007abb:	mov    WORD PTR [rip+0x675e],ax        # 0x100e220
 1007ac2:	jmp    0x10080ae
 1007ac7:	lea    rax,[rdx+0x2]
 1007acb:	mov    QWORD PTR [rbx],rax
 1007ace:	cmp    WORD PTR [rax],0x0
 1007ad2:	jne    0x1007af6
 1007ad4:	lea    edi,[r14-0x1]
 1007ad8:	test   edi,edi
 1007ada:	je     0x1007af6
 1007adc:	mov    rax,QWORD PTR [rbx+0x8]
 1007ae0:	movzx  ecx,WORD PTR [rax]
 1007ae3:	cmp    cx,0x2d
 1007ae7:	je     0x1007af6
 1007ae9:	cmp    cx,0x2f
 1007aed:	je     0x1007af6
 1007aef:	mov    r14d,edi
 1007af2:	add    rbx,0x8
 1007af6:	mov    rcx,QWORD PTR [rbx]
 1007af9:	call   QWORD PTR [rip+0xffffffffffff96b9]        # 0x10011b8
 1007aff:	mov    WORD PTR [rbp-0x58],ax
 1007b03:	jmp    0x10080ae
 1007b08:	mov    esi,0x1
 1007b0d:	mov    DWORD PTR [rbp-0x70],esi
 1007b10:	jmp    0x1007b17
 1007b12:	mov    esi,0x1
 1007b17:	lea    rax,[rdx+0x2]
 1007b1b:	mov    QWORD PTR [rbx],rax
 1007b1e:	cmp    WORD PTR [rax],0x0
 1007b22:	jne    0x1007b46
 1007b24:	lea    edi,[r14-0x1]
 1007b28:	test   edi,edi
 1007b2a:	je     0x1007b46
 1007b2c:	mov    rax,QWORD PTR [rbx+0x8]
 1007b30:	movzx  ecx,WORD PTR [rax]
 1007b33:	cmp    cx,0x2d
 1007b37:	je     0x1007b46
 1007b39:	cmp    cx,0x2f
 1007b3d:	je     0x1007b46
 1007b3f:	mov    r14d,edi
 1007b42:	add    rbx,0x8
 1007b46:	mov    r8,QWORD PTR [rbx]
 1007b49:	mov    rax,r15
 1007b4c:	lea    rcx,[rip+0x7fed]        # 0x100fb40
 1007b53:	inc    rax
 1007b56:	cmp    WORD PTR [rcx+rax*2],0x0
 1007b5b:	jne    0x1007b53
 1007b5d:	mov    ecx,0x3e8
 1007b62:	sub    rcx,rax
 1007b65:	mov    rax,r15
 1007b68:	nop    DWORD PTR [rax+rax*1+0x0]
 1007b70:	inc    rax
 1007b73:	cmp    WORD PTR [r8+rax*2],0x0
 1007b79:	jne    0x1007b70
 1007b7b:	cmp    rax,rcx
 1007b7e:	ja     0x1008121
 1007b84:	mov    edx,0x3ea
 1007b89:	mov    rcx,r9
 1007b8c:	call   QWORD PTR [rip+0xffffffffffff979e]        # 0x1001330
 1007b92:	mov    eax,esi
 1007b94:	mov    DWORD PTR [rsp+0x54],eax
 1007b98:	jmp    0x10080ae
 1007b9d:	xor    eax,eax
 1007b9f:	mov    DWORD PTR [rip+0x6567],eax        # 0x100e10c
 1007ba5:	jmp    0x10080c9
 1007baa:	mov    DWORD PTR [rip+0x66a8],0x1        # 0x100e25c
 1007bb4:	jmp    0x10080c9
 1007bb9:	lea    rax,[rdx+0x2]
 1007bbd:	mov    QWORD PTR [rbx],rax
 1007bc0:	cmp    WORD PTR [rax],0x0
 1007bc4:	jne    0x1007be8
 1007bc6:	lea    edi,[r14-0x1]
 1007bca:	test   edi,edi
 1007bcc:	je     0x1007be8
 1007bce:	mov    rax,QWORD PTR [rbx+0x8]
 1007bd2:	movzx  ecx,WORD PTR [rax]
 1007bd5:	cmp    cx,0x2d
 1007bd9:	je     0x1007be8
 1007bdb:	cmp    cx,0x2f
 1007bdf:	je     0x1007be8
 1007be1:	mov    r14d,edi
 1007be4:	add    rbx,0x8
 1007be8:	mov    rcx,QWORD PTR [rbx]
 1007beb:	movzx  eax,WORD PTR [rcx]
 1007bee:	test   ax,ax
 1007bf1:	je     0x1007c28
 1007bf3:	cmp    ax,0x2d
 1007bf7:	je     0x1007c28
 1007bf9:	cmp    ax,0x2f
 1007bfd:	je     0x1007c28
 1007bff:	call   QWORD PTR [rip+0xffffffffffff95b3]        # 0x10011b8
 1007c05:	mov    DWORD PTR [rip+0x662d],eax        # 0x100e238
 1007c0b:	cmp    eax,0x1
 1007c0e:	je     0x10080ae
 1007c14:	mov    edx,eax
 1007c16:	mov    ecx,0x38
 1007c1b:	call   0x1005cb0
 1007c20:	xor    ecx,ecx
 1007c22:	call   0x10052f0
 1007c27:	int3   
 1007c28:	mov    DWORD PTR [rip+0x6609],r15d        # 0x100e238
 1007c2f:	jmp    0x10080c9
 1007c34:	lea    rax,[rdx+0x2]
 1007c38:	mov    QWORD PTR [rbx],rax
 1007c3b:	cmp    WORD PTR [rax],0x0
 1007c3f:	jne    0x1007c63
 1007c41:	lea    edi,[r14-0x1]
 1007c45:	test   edi,edi
 1007c47:	je     0x1007c63
 1007c49:	mov    rax,QWORD PTR [rbx+0x8]
 1007c4d:	movzx  ecx,WORD PTR [rax]
 1007c50:	cmp    cx,0x2d
 1007c54:	je     0x1007c63
 1007c56:	cmp    cx,0x2f
 1007c5a:	je     0x1007c63
 1007c5c:	mov    r14d,edi
 1007c5f:	add    rbx,0x8
 1007c63:	mov    rcx,QWORD PTR [rbx]
 1007c66:	call   QWORD PTR [rip+0xffffffffffff9554]        # 0x10011c0
 1007c6c:	mov    DWORD PTR [rip+0x65a6],eax        # 0x100e218
 1007c72:	jmp    0x10080ae
 1007c77:	lea    rax,[rdx+0x2]
 1007c7b:	mov    QWORD PTR [rbx],rax
 1007c7e:	cmp    WORD PTR [rax],0x0
 1007c82:	jne    0x1007ca6
 1007c84:	lea    edi,[r14-0x1]
 1007c88:	test   edi,edi
 1007c8a:	je     0x1007ca6
 1007c8c:	mov    rax,QWORD PTR [rbx+0x8]
 1007c90:	movzx  ecx,WORD PTR [rax]
 1007c93:	cmp    cx,0x2d
 1007c97:	je     0x1007ca6
 1007c99:	cmp    cx,0x2f
 1007c9d:	je     0x1007ca6
 1007c9f:	mov    r14d,edi
 1007ca2:	add    rbx,0x8
 1007ca6:	mov    r8,QWORD PTR [rbx]
 1007ca9:	mov    r9d,0x14
 1007caf:	lea    rcx,[rip+0x7e8a]        # 0x100fb40
 1007cb6:	lea    edx,[r9+0x1]
 1007cba:	call   QWORD PTR [rip+0xffffffffffff9678]        # 0x1001338
 1007cc0:	xor    eax,eax
 1007cc2:	mov    WORD PTR [rip+0x7e9f],ax        # 0x100fb68
 1007cc9:	jmp    0x10080ae
 1007cce:	lea    rax,[rdx+0x2]
 1007cd2:	mov    QWORD PTR [rbx],rax
 1007cd5:	cmp    WORD PTR [rax],0x0
 1007cd9:	jne    0x1007cfd
 1007cdb:	lea    edi,[r14-0x1]
 1007cdf:	test   edi,edi
 1007ce1:	je     0x1007cfd
 1007ce3:	mov    rax,QWORD PTR [rbx+0x8]
 1007ce7:	movzx  ecx,WORD PTR [rax]
 1007cea:	cmp    cx,0x2d
 1007cee:	je     0x1007cfd
 1007cf0:	cmp    cx,0x2f
 1007cf4:	je     0x1007cfd
 1007cf6:	mov    r14d,edi
 1007cf9:	add    rbx,0x8
 1007cfd:	xor    eax,eax
 1007cff:	mov    DWORD PTR [rip+0x640f],eax        # 0x100e114
 1007d05:	mov    rcx,QWORD PTR [rbx]
 1007d08:	movzx  eax,WORD PTR [rcx]
 1007d0b:	test   ax,ax
 1007d0e:	je     0x10080c9
 1007d14:	cmp    ax,0x2d
 1007d18:	je     0x10080c9
 1007d1e:	cmp    ax,0x2f
 1007d22:	je     0x10080c9
 1007d28:	call   QWORD PTR [rip+0xffffffffffff948a]        # 0x10011b8
 1007d2e:	mov    DWORD PTR [rip+0x63e0],eax        # 0x100e114
 1007d34:	jmp    0x10080ae
 1007d39:	mov    DWORD PTR [rbp-0x60],0x1
 1007d40:	jmp    0x10080c9
 1007d45:	lea    rax,[rdx+0x2]
 1007d49:	mov    QWORD PTR [rbx],rax
 1007d4c:	cmp    WORD PTR [rax],0x0
 1007d50:	jne    0x1007d74
 1007d52:	lea    edi,[r14-0x1]
 1007d56:	test   edi,edi
 1007d58:	je     0x1007d74
 1007d5a:	mov    rax,QWORD PTR [rbx+0x8]
 1007d5e:	movzx  ecx,WORD PTR [rax]
 1007d61:	cmp    cx,0x2d
 1007d65:	je     0x1007d74
 1007d67:	cmp    cx,0x2f
 1007d6b:	je     0x1007d74
 1007d6d:	mov    r14d,edi
 1007d70:	add    rbx,0x8
 1007d74:	mov    rcx,QWORD PTR [rbx]
 1007d77:	call   QWORD PTR [rip+0xffffffffffff943b]        # 0x10011b8
 1007d7d:	mov    DWORD PTR [rip+0x64a1],0x1        # 0x100e228
 1007d87:	mov    WORD PTR [rip+0x6496],ax        # 0x100e224
 1007d8e:	jmp    0x10080ae
 1007d93:	mov    DWORD PTR [rbp-0x50],0x1
 1007d9a:	jmp    0x10080c9
 1007d9f:	lea    rax,[rdx+0x2]
 1007da3:	mov    QWORD PTR [rbx],rax
 1007da6:	cmp    WORD PTR [rax],0x0
 1007daa:	jne    0x1007dce
 1007dac:	lea    edi,[r14-0x1]
 1007db0:	test   edi,edi
 1007db2:	je     0x1007dce
 1007db4:	mov    rax,QWORD PTR [rbx+0x8]
 1007db8:	movzx  ecx,WORD PTR [rax]
 1007dbb:	cmp    cx,0x2d
 1007dbf:	je     0x1007dce
 1007dc1:	cmp    cx,0x2f
 1007dc5:	je     0x1007dce
 1007dc7:	mov    r14d,edi
 1007dca:	add    rbx,0x8
 1007dce:	mov    rcx,QWORD PTR [rbx]
 1007dd1:	call   QWORD PTR [rip+0xffffffffffff93e1]        # 0x10011b8
 1007dd7:	mov    DWORD PTR [rip+0x645b],0x1        # 0x100e23c
 1007de1:	mov    DWORD PTR [rip+0x6319],eax        # 0x100e100
 1007de7:	add    eax,0xfffffff7
 1007dea:	cmp    eax,0xfff7
 1007def:	jbe    0x10080ae
 1007df5:	mov    ecx,0x23
 1007dfa:	call   0x1005d30
 1007dff:	mov    ecx,r15d
 1007e02:	call   0x10052f0
 1007e07:	int3   
 1007e08:	lea    rax,[rdx+0x2]
 1007e0c:	mov    QWORD PTR [rbx],rax
 1007e0f:	cmp    WORD PTR [rax],0x0
 1007e13:	jne    0x1007e37
 1007e15:	lea    edi,[r14-0x1]
 1007e19:	test   edi,edi
 1007e1b:	je     0x1007e37
 1007e1d:	mov    rax,QWORD PTR [rbx+0x8]
 1007e21:	movzx  ecx,WORD PTR [rax]
 1007e24:	cmp    cx,0x2d
 1007e28:	je     0x1007e37
 1007e2a:	cmp    cx,0x2f
 1007e2e:	je     0x1007e37
 1007e30:	mov    r14d,edi
 1007e33:	add    rbx,0x8
 1007e37:	mov    r8,QWORD PTR [rbx]
 1007e3a:	mov    r9d,0x80
 1007e40:	lea    rcx,[rip+0x7e59]        # 0x100fca0
 1007e47:	lea    edx,[r9+0x1]
 1007e4b:	call   QWORD PTR [rip+0xffffffffffff94e7]        # 0x1001338
 1007e51:	xor    eax,eax
 1007e53:	mov    WORD PTR [rip+0x7f46],ax        # 0x100fda0
 1007e5a:	jmp    0x10080ae
 1007e5f:	lea    rax,[rdx+0x2]
 1007e63:	mov    QWORD PTR [rbx],rax
 1007e66:	cmp    WORD PTR [rax],0x0
 1007e6a:	jne    0x1007e8e
 1007e6c:	lea    edi,[r14-0x1]
 1007e70:	test   edi,edi
 1007e72:	je     0x1007e8e
 1007e74:	mov    rax,QWORD PTR [rbx+0x8]
 1007e78:	movzx  ecx,WORD PTR [rax]
 1007e7b:	cmp    cx,0x2d
 1007e7f:	je     0x1007e8e
 1007e81:	cmp    cx,0x2f
 1007e85:	je     0x1007e8e
 1007e87:	mov    r14d,edi
 1007e8a:	add    rbx,0x8
 1007e8e:	mov    r8,QWORD PTR [rbx]
 1007e91:	xor    eax,eax
 1007e93:	mov    edi,0x2
 1007e98:	lea    r9d,[rax+0x1]
 1007e9c:	lea    rcx,[rsp+0x58]
 1007ea1:	mov    edx,edi
 1007ea3:	mov    DWORD PTR [rsp+0x58],eax
 1007ea7:	call   QWORD PTR [rip+0xffffffffffff948b]        # 0x1001338
 1007ead:	lea    r8,[rsp+0x58]
 1007eb2:	lea    rcx,[rip+0x624b]        # 0x100e104
 1007eb9:	mov    edx,edi
 1007ebb:	call   QWORD PTR [rip+0xffffffffffff946f]        # 0x1001330
 1007ec1:	jmp    0x10080ae
 1007ec6:	lea    rax,[rdx+0x2]
 1007eca:	mov    QWORD PTR [rbx],rax
 1007ecd:	cmp    WORD PTR [rax],0x0
 1007ed1:	jne    0x1007ef5
 1007ed3:	lea    edi,[r14-0x1]
 1007ed7:	test   edi,edi
 1007ed9:	je     0x1007ef5
 1007edb:	mov    rax,QWORD PTR [rbx+0x8]
 1007edf:	movzx  ecx,WORD PTR [rax]
 1007ee2:	cmp    cx,0x2d
 1007ee6:	je     0x1007ef5
 1007ee8:	cmp    cx,0x2f
 1007eec:	je     0x1007ef5
 1007eee:	mov    r14d,edi
 1007ef1:	add    rbx,0x8
 1007ef5:	mov    rcx,QWORD PTR [rbx]
 1007ef8:	call   QWORD PTR [rip+0xffffffffffff92ba]        # 0x10011b8
 1007efe:	mov    DWORD PTR [rip+0x625c],eax        # 0x100e160
 1007f04:	jmp    0x10080ae
 1007f09:	lea    rax,[rdx+0x2]
 1007f0d:	mov    QWORD PTR [rbx],rax
 1007f10:	cmp    WORD PTR [rax],0x0
 1007f14:	jne    0x1007f38
 1007f16:	lea    edi,[r14-0x1]
 1007f1a:	test   edi,edi
 1007f1c:	je     0x1007f38
 1007f1e:	mov    rax,QWORD PTR [rbx+0x8]
 1007f22:	movzx  ecx,WORD PTR [rax]
 1007f25:	cmp    cx,0x2d
 1007f29:	je     0x1007f38
 1007f2b:	cmp    cx,0x2f
 1007f2f:	je     0x1007f38
 1007f31:	mov    r14d,edi
 1007f34:	add    rbx,0x8
 1007f38:	mov    r8,QWORD PTR [rbx]
 1007f3b:	mov    r9d,0x103
 1007f41:	mov    rcx,rsi
 1007f44:	lea    edx,[r9+0x1]
 1007f48:	call   QWORD PTR [rip+0xffffffffffff93ea]        # 0x1001338
 1007f4e:	xor    eax,eax
 1007f50:	mov    WORD PTR [rip+0x6d6f],ax        # 0x100ecc6
 1007f57:	mov    rax,r15
 1007f5a:	nop    WORD PTR [rax+rax*1+0x0]
 1007f60:	inc    rax
 1007f63:	cmp    WORD PTR [rsi+rax*2],0x0
 1007f68:	jne    0x1007f60
 1007f6a:	test   rax,rax
 1007f6d:	jne    0x10080ae
 1007f73:	lea    rdx,[rip+0xffffffffffff966e]        # 0x10015e8
 1007f7a:	lea    ecx,[rax+0x33]
 1007f7d:	call   0x1005cb0
 1007f82:	mov    ecx,r15d
 1007f85:	call   0x10052f0
 1007f8a:	int3   
 1007f8b:	lea    rax,[rdx+0x2]
 1007f8f:	mov    QWORD PTR [rbx],rax
 1007f92:	cmp    WORD PTR [rax],0x0
 1007f96:	jne    0x1007fc1
 1007f98:	lea    edi,[r14-0x1]
 1007f9c:	test   edi,edi
 1007f9e:	je     0x1007fba
 1007fa0:	mov    rax,QWORD PTR [rbx+0x8]
 1007fa4:	movzx  ecx,WORD PTR [rax]
 1007fa7:	cmp    cx,0x2d
 1007fab:	je     0x1007fba
 1007fad:	cmp    cx,0x2f
 1007fb1:	je     0x1007fba
 1007fb3:	mov    r14d,edi
 1007fb6:	add    rbx,0x8
 1007fba:	lea    rdi,[rip+0x68df]        # 0x100e8a0
 1007fc1:	mov    r8,QWORD PTR [rbx]
 1007fc4:	mov    r9d,0x103
 1007fca:	mov    rcx,rdi
 1007fcd:	lea    edx,[r9+0x1]
 1007fd1:	call   QWORD PTR [rip+0xffffffffffff9361]        # 0x1001338
 1007fd7:	xor    eax,eax
 1007fd9:	mov    WORD PTR [rip+0x6ac6],ax        # 0x100eaa6
 1007fe0:	mov    rax,r15
 1007fe3:	inc    rax
 1007fe6:	cmp    WORD PTR [rdi+rax*2],0x0
 1007feb:	jne    0x1007fe3
 1007fed:	test   rax,rax
 1007ff0:	je     0x1008133
 1007ff6:	mov    DWORD PTR [rip+0x6240],0x1        # 0x100e240
 1008000:	jmp    0x10080ae
 1008005:	lea    rax,[rdx+0x2]
 1008009:	mov    QWORD PTR [rbx],rax
 100800c:	cmp    WORD PTR [rax],0x0
 1008010:	jne    0x1008034
 1008012:	lea    edi,[r14-0x1]
 1008016:	test   edi,edi
 1008018:	je     0x1008034
 100801a:	mov    rax,QWORD PTR [rbx+0x8]
 100801e:	movzx  ecx,WORD PTR [rax]
 1008021:	cmp    cx,0x2d
 1008025:	je     0x1008034
 1008027:	cmp    cx,0x2f
 100802b:	je     0x1008034
 100802d:	mov    r14d,edi
 1008030:	add    rbx,0x8
 1008034:	mov    DWORD PTR [rip+0x61aa],0x1        # 0x100e1e8
 100803e:	jmp    0x10080c9
 1008043:	mov    DWORD PTR [rbp-0x68],0x1
 100804a:	jmp    0x10080c9
 100804c:	mov    DWORD PTR [rbp-0x5c],0x1
 1008053:	jmp    0x10080c9
 1008055:	mov    DWORD PTR [rip+0x6199],0x1        # 0x100e1f8
 100805f:	jmp    0x10080c9
 1008061:	lea    rax,[rdx+0x2]
 1008065:	mov    QWORD PTR [rbx],rax
 1008068:	cmp    WORD PTR [rax],0x0
 100806c:	jne    0x1008090
 100806e:	lea    edi,[r14-0x1]
 1008072:	test   edi,edi
 1008074:	je     0x1008090
 1008076:	mov    rax,QWORD PTR [rbx+0x8]
 100807a:	movzx  ecx,WORD PTR [rax]
 100807d:	cmp    cx,0x2d
 1008081:	je     0x1008090
 1008083:	cmp    cx,0x2f
 1008087:	je     0x1008090
 1008089:	mov    r14d,edi
 100808c:	add    rbx,0x8
 1008090:	mov    r8,QWORD PTR [rbx]
 1008093:	mov    r9d,0xff
 1008099:	mov    rdx,r11
 100809c:	mov    rcx,r10
 100809f:	call   QWORD PTR [rip+0xffffffffffff9293]        # 0x1001338
 10080a5:	xor    eax,eax
 10080a7:	mov    WORD PTR [rip+0x7a90],ax        # 0x100fb3e
 10080ae:	mov    r11d,0x100
 10080b4:	lea    r9,[rip+0x6e65]        # 0x100ef20
 10080bb:	lea    r10,[rip+0x787e]        # 0x100f940
 10080c2:	lea    r8,[rip+0xffffffffffff7f37]        # 0x1000000
 10080c9:	dec    r14d
 10080cc:	lea    rsi,[rip+0x69ed]        # 0x100eac0
 10080d3:	lea    rdi,[rip+0x67c6]        # 0x100e8a0
 10080da:	test   r14d,r14d
 10080dd:	jg     0x10075c0
 10080e3:	mov    rcx,QWORD PTR [rip+0x6166]        # 0x100e250
 10080ea:	call   QWORD PTR [rip+0xffffffffffff8f48]        # 0x1001038
 10080f0:	mov    rcx,QWORD PTR [rip+0x6159]        # 0x100e250
 10080f7:	call   QWORD PTR [rip+0xffffffffffff8f43]        # 0x1001040
 10080fd:	xor    r12d,r12d
 1008100:	mov    QWORD PTR [rip+0x6149],r12        # 0x100e250
 1008107:	test   r14d,r14d
 100810a:	jle    0x10081cc
 1008110:	mov    rcx,QWORD PTR [rbx]
 1008113:	call   0x10047a0
 1008118:	mov    ecx,r15d
 100811b:	call   0x10052f0
 1008120:	int3   
 1008121:	mov    ecx,0x37
 1008126:	call   0x1005d30
 100812b:	xor    ecx,ecx
 100812d:	call   0x10052f0
 1008132:	int3   
 1008133:	lea    rdx,[rip+0xffffffffffff94b6]        # 0x10015f0
 100813a:	mov    ecx,0x33
 100813f:	call   0x1005cb0
 1008144:	mov    ecx,r15d
 1008147:	call   0x10052f0
 100814c:	int3   
 100814d:	cmp    r12d,0x2
 1008151:	jne    0x1008176
 1008153:	mov    ecx,0xfffffff5
 1008158:	call   QWORD PTR [rip+0xffffffffffff8f1a]        # 0x1001078
 100815e:	xor    edx,edx
 1008160:	xor    ecx,ecx
 1008162:	mov    QWORD PTR [rip+0x758f],rax        # 0x100f6f8
 1008169:	call   0x1006370
 100816e:	xor    ecx,ecx
 1008170:	call   0x10052f0
 1008175:	int3   
 1008176:	mov    ecx,0x31
 100817b:	call   0x1005d30
 1008180:	xor    ecx,ecx
 1008182:	call   0x10052f0
 1008187:	int3   
 1008188:	mov    rcx,QWORD PTR [rip+0x6129]        # 0x100e2b8
 100818f:	lea    r8,[rip+0x758a]        # 0x100f720
 1008196:	mov    r9d,r11d
 1008199:	mov    edx,0xd
 100819e:	mov    DWORD PTR [rsp+0x20],0x1
 10081a6:	call   0x1005f20
 10081ab:	mov    rdx,QWORD PTR [rbx]
 10081ae:	lea    rcx,[rip+0x756b]        # 0x100f720
 10081b5:	call   QWORD PTR [rip+0xffffffffffff906d]        # 0x1001228
 10081bb:	mov    rcx,QWORD PTR [rbx]
 10081be:	call   0x10047a0
 10081c3:	mov    ecx,r15d
 10081c6:	call   0x10052f0
 10081cb:	int3   
 10081cc:	cmp    WORD PTR [rip+0x7c0c],r12w        # 0x100fde0
 10081d4:	jne    0x1008202
 10081d6:	cmp    WORD PTR [rip+0x7c82],r12w        # 0x100fe60
 10081de:	jne    0x1008202
 10081e0:	lea    rdx,[rip+0x7bf9]        # 0x100fde0
 10081e7:	lea    rcx,[rip+0xffffffffffff97ca]        # 0x10019b8
 10081ee:	mov    r8d,0x3d
 10081f4:	mov    WORD PTR [rip+0x7be4],r12w        # 0x100fde0
 10081fc:	call   QWORD PTR [rip+0xffffffffffff8eae]        # 0x10010b0
 1008202:	cmp    WORD PTR [rip+0x7936],r12w        # 0x100fb40
 100820a:	lea    rbx,[rip+0x792f]        # 0x100fb40
 1008211:	jne    0x1008228
 1008213:	lea    r8,[rip+0xffffffffffff93de]        # 0x10015f8
 100821a:	mov    edx,0x15
 100821f:	mov    rcx,rbx
 1008222:	call   QWORD PTR [rip+0xffffffffffff9108]        # 0x1001330
 1008228:	mov    rax,r15
 100822b:	nop    DWORD PTR [rax+rax*1+0x0]
 1008230:	inc    rax
 1008233:	cmp    WORD PTR [rbx+rax*2],r12w
 1008238:	jne    0x1008230
 100823a:	lea    rcx,[rip+0xffffffffffff93bf]        # 0x1001600
 1008241:	mov    WORD PTR [rip+0x76d8],ax        # 0x100f920
 1008248:	call   QWORD PTR [rip+0xffffffffffff8f62]        # 0x10011b0
 100824e:	lea    rcx,[rip+0xffffffffffff93bb]        # 0x1001610
 1008255:	test   rax,rax
 1008258:	cmovne rcx,rax
 100825c:	cmp    WORD PTR [rip+0x685c],r12w        # 0x100eac0
 1008264:	mov    QWORD PTR [rip+0x5ffd],rcx        # 0x100e268
 100826b:	je     0x10082d0
 100826d:	lea    r8,[rip+0x5ea8]        # 0x100e11c
 1008274:	lea    rdx,[rip+0x5ff5]        # 0x100e270
 100827b:	mov    rcx,rsi
 100827e:	call   0x1005da0
 1008283:	test   eax,eax
 1008285:	je     0x10082dd
 1008287:	mov    rcx,QWORD PTR [rip+0x602a]        # 0x100e2b8
 100828e:	lea    r8,[rip+0x748b]        # 0x100f720
 1008295:	mov    r9d,0x100
 100829b:	mov    edx,0x5
 10082a0:	mov    DWORD PTR [rsp+0x20],0x1
 10082a8:	call   0x1005f20
 10082ad:	lea    rcx,[rip+0x746c]        # 0x100f720
 10082b4:	mov    rdx,rsi
 10082b7:	call   QWORD PTR [rip+0xffffffffffff8f6b]        # 0x1001228
 10082bd:	mov    ecx,0x6
 10082c2:	call   0x1005d30
 10082c7:	mov    ecx,r15d
 10082ca:	call   0x10052f0
 10082cf:	int3   
 10082d0:	call   QWORD PTR [rip+0xffffffffffff9082]        # 0x1001358
 10082d6:	mov    QWORD PTR [rip+0x5f93],rax        # 0x100e270
 10082dd:	cmp    WORD PTR [rip+0x65bb],r12w        # 0x100e8a0
 10082e5:	je     0x1008417
 10082eb:	cmp    DWORD PTR [rbp-0x5c],r12d
 10082ef:	je     0x1008304
 10082f1:	mov    DWORD PTR [rip+0x5e1d],0x1        # 0x100e118
 10082fb:	lea    r8,[rip+0xffffffffffff9322]        # 0x1001624
 1008302:	jmp    0x1008381
 1008304:	mov    eax,DWORD PTR [rip+0x5e12]        # 0x100e11c
 100830a:	mov    DWORD PTR [rip+0x5e08],eax        # 0x100e118
 1008310:	cmp    eax,0x3
 1008313:	je     0x100837a
 1008315:	cmp    eax,0x2
 1008318:	je     0x100837a
 100831a:	cmp    eax,0x1
 100831d:	jne    0x1008328
 100831f:	lea    r8,[rip+0xffffffffffff92fe]        # 0x1001624
 1008326:	jmp    0x1008381
 1008328:	mov    QWORD PTR [rip+0x5f49],r12        # 0x100e278
 100832f:	mov    ebx,0x1
 1008334:	mov    r14d,0x2
 100833a:	mov    rcx,QWORD PTR [rip+0x5f77]        # 0x100e2b8
 1008341:	lea    r8,[rip+0x73d8]        # 0x100f720
 1008348:	mov    r9d,0x100
 100834e:	mov    edx,ebx
 1008350:	mov    DWORD PTR [rsp+0x20],ebx
 1008354:	call   0x1005f20
 1008359:	lea    rcx,[rip+0x73c0]        # 0x100f720
 1008360:	mov    rdx,rdi
 1008363:	call   QWORD PTR [rip+0xffffffffffff8ebf]        # 0x1001228
 1008369:	mov    ecx,r14d
 100836c:	call   0x1005d30
 1008371:	mov    ecx,r15d
 1008374:	call   0x10052f0
 1008379:	int3   
 100837a:	lea    r8,[rip+0xffffffffffff929b]        # 0x100161c
 1008381:	lea    rcx,[rip+0x5ef0]        # 0x100e278
 1008388:	mov    rdx,rdi
 100838b:	call   0x1006070
 1008390:	mov    rcx,QWORD PTR [rip+0x5ee1]        # 0x100e278
 1008397:	test   rcx,rcx
 100839a:	je     0x100832f
 100839c:	call   QWORD PTR [rip+0xffffffffffff8e36]        # 0x10011d8
 10083a2:	mov    ebx,0x1
 10083a7:	mov    ecx,eax
 10083a9:	mov    edx,ebx
 10083ab:	call   QWORD PTR [rip+0xffffffffffff8e97]        # 0x1001248
 10083b1:	test   eax,eax
 10083b3:	jne    0x1008334
 10083b9:	cmp    DWORD PTR [rip+0x5d59],ebx        # 0x100e118
 10083bf:	jne    0x1008426
 10083c1:	mov    eax,0xfeff
 10083c6:	mov    WORD PTR [rsp+0x58],ax
 10083cb:	call   QWORD PTR [rip+0xffffffffffff8f87]        # 0x1001358
 10083d1:	mov    r14d,0x2
 10083d7:	lea    rcx,[rsp+0x58]
 10083dc:	lea    r9,[rax+0x30]
 10083e0:	mov    r8d,ebx
 10083e3:	mov    edx,r14d
 10083e6:	call   QWORD PTR [rip+0xffffffffffff8e04]        # 0x10011f0
 10083ec:	cmp    rax,rbx
 10083ef:	jne    0x100833a
 10083f5:	call   QWORD PTR [rip+0xffffffffffff8f5d]        # 0x1001358
 10083fb:	lea    rcx,[rax+0x60]
 10083ff:	call   QWORD PTR [rip+0xffffffffffff8f5b]        # 0x1001360
 1008405:	call   QWORD PTR [rip+0xffffffffffff8f4d]        # 0x1001358
 100840b:	lea    rcx,[rax+0x30]
 100840f:	call   QWORD PTR [rip+0xffffffffffff8f4b]        # 0x1001360
 1008415:	jmp    0x100842c
 1008417:	mov    DWORD PTR [rip+0x5cf7],0x3        # 0x100e118
 1008421:	mov    ebx,0x1
 1008426:	mov    r14d,0x2
 100842c:	mov    ecx,0xfffffff5
 1008431:	call   QWORD PTR [rip+0xffffffffffff8c41]        # 0x1001078
 1008437:	movzx  r8d,WORD PTR [rbp-0x58]
 100843c:	mov    rcx,QWORD PTR [rip+0x5e45]        # 0x100e288
 1008443:	xor    r9d,r9d
 1008446:	mov    QWORD PTR [rip+0x72ab],rax        # 0x100f6f8
 100844d:	lea    edx,[r9+0x67]
 1008451:	call   0x100adf2
 1008456:	movzx  edi,ax
 1008459:	test   ax,ax
 100845c:	je     0x100847c
 100845e:	mov    rdx,QWORD PTR [rip+0x5e23]        # 0x100e288
 1008465:	mov    ecx,r14d
 1008468:	call   0x1005660
 100846d:	cmp    di,0xffff
 1008471:	jne    0x100847c
 1008473:	mov    ecx,r15d
 1008476:	call   0x10052f0
 100847b:	int3   
 100847c:	test   r13d,r13d
 100847f:	je     0x10084bd
 1008481:	mov    rcx,QWORD PTR [rip+0x5e00]        # 0x100e288
 1008488:	xor    r9d,r9d
 100848b:	mov    r8d,r13d
 100848e:	lea    edx,[r9+0x70]
 1008492:	call   0x100adf2
 1008497:	movzx  edi,ax
 100849a:	test   ax,ax
 100849d:	je     0x10084bd
 100849f:	mov    rdx,QWORD PTR [rip+0x5de2]        # 0x100e288
 10084a6:	mov    ecx,r14d
 10084a9:	call   0x1005660
 10084ae:	cmp    di,0xffff
 10084b2:	jne    0x10084bd
 10084b4:	mov    ecx,r15d
 10084b7:	call   0x10052f0
 10084bc:	int3   
 10084bd:	cmp    DWORD PTR [rip+0x5d30],r12d        # 0x100e1f4
 10084c4:	mov    rcx,QWORD PTR [rip+0x5dbd]        # 0x100e288
 10084cb:	mov    edx,0x4c1
 10084d0:	je     0x10084d7
 10084d2:	mov    r8,rbx
 10084d5:	jmp    0x10084da
 10084d7:	xor    r8d,r8d
 10084da:	call   0x100adfe
 10084df:	cmp    WORD PTR [rip+0x7979],r12w        # 0x100fe60
 10084e7:	mov    edx,0x364
 10084ec:	lea    rcx,[rbp+0xc0]
 10084f3:	je     0x100850b
 10084f5:	lea    r8,[rip+0xffffffffffff9134]        # 0x1001630
 10084fc:	call   QWORD PTR [rip+0xffffffffffff8e2e]        # 0x1001330
 1008502:	lea    r8,[rip+0x7957]        # 0x100fe60
 1008509:	jmp    0x1008560
 100850b:	lea    r8,[rip+0xffffffffffff912e]        # 0x1001640
 1008512:	call   QWORD PTR [rip+0xffffffffffff8e18]        # 0x1001330
 1008518:	cmp    DWORD PTR [rbp-0x50],r12d
 100851c:	lea    rax,[rip+0xffffffffffff9135]        # 0x1001658
 1008523:	lea    r8,[rip+0xffffffffffff9166]        # 0x1001690
 100852a:	lea    rcx,[rbp+0xc0]
 1008531:	mov    edx,0x364
 1008536:	cmovne r8,rax
 100853a:	call   QWORD PTR [rip+0xffffffffffff8e38]        # 0x1001378
 1008540:	lea    r8,[rip+0xffffffffffff9189]        # 0x10016d0
 1008547:	lea    rcx,[rbp+0xc0]
 100854e:	mov    edx,0x364
 1008553:	call   QWORD PTR [rip+0xffffffffffff8e1f]        # 0x1001378
 1008559:	lea    r8,[rip+0x7880]        # 0x100fde0
 1008560:	lea    rcx,[rbp+0xc0]
 1008567:	mov    edx,0x364
 100856c:	call   QWORD PTR [rip+0xffffffffffff8e06]        # 0x1001378
 1008572:	mov    edx,0x364
 1008577:	lea    rcx,[rbp+0xc0]
 100857e:	cmp    DWORD PTR [rsp+0x70],r12d
 1008583:	je     0x10085cc
 1008585:	lea    r8,[rip+0xffffffffffff915c]        # 0x10016e8
 100858c:	call   QWORD PTR [rip+0xffffffffffff8de6]        # 0x1001378
 1008592:	cmp    WORD PTR [rip+0x7926],r12w        # 0x100fec0
 100859a:	je     0x10085af
 100859c:	mov    ecx,0x35
 10085a1:	call   0x1005d30
 10085a6:	mov    ecx,r15d
 10085a9:	call   0x10052f0
 10085ae:	int3   
 10085af:	cmp    DWORD PTR [rbp-0x78],r12d
 10085b3:	je     0x10087e5
 10085b9:	mov    ecx,0x36
 10085be:	call   0x1005d30
 10085c3:	mov    ecx,r15d
 10085c6:	call   0x10052f0
 10085cb:	int3   
 10085cc:	lea    r8,[rip+0xffffffffffff9145]        # 0x1001718
 10085d3:	call   QWORD PTR [rip+0xffffffffffff8d9f]        # 0x1001378
 10085d9:	cmp    WORD PTR [rip+0x78df],r12w        # 0x100fec0
 10085e1:	jne    0x100861a
 10085e3:	lea    rdx,[rip+0x78d6]        # 0x100fec0
 10085ea:	lea    rcx,[rip+0xffffffffffff938f]        # 0x1001980
 10085f1:	mov    r8d,0x80
 10085f7:	mov    WORD PTR [rip+0x78c1],r12w        # 0x100fec0
 10085ff:	call   QWORD PTR [rip+0xffffffffffff8aab]        # 0x10010b0
 1008605:	test   eax,eax
 1008607:	jne    0x100861a
 1008609:	lea    ecx,[rax+0x34]
 100860c:	call   0x1005d30
 1008611:	mov    ecx,r15d
 1008614:	call   0x10052f0
 1008619:	int3   
 100861a:	lea    r8,[rip+0x789f]        # 0x100fec0
 1008621:	lea    rcx,[rbp+0xc0]
 1008628:	mov    edx,0x364
 100862d:	call   QWORD PTR [rip+0xffffffffffff8d45]        # 0x1001378
 1008633:	cmp    DWORD PTR [rbp-0x78],r12d
 1008637:	jne    0x10086e5
 100863d:	mov    rdi,QWORD PTR [rip+0x5bbc]        # 0x100e200
 1008644:	lea    rcx,[rip+0xffffffffffff934d]        # 0x1001998
 100864b:	mov    r8d,0x80
 1008651:	mov    rdx,rdi
 1008654:	mov    WORD PTR [rdi],r12w
 1008658:	call   QWORD PTR [rip+0xffffffffffff8a52]        # 0x10010b0
 100865e:	test   eax,eax
 1008660:	je     0x100868e
 1008662:	lea    rdx,[rip+0xffffffffffff8ec7]        # 0x1001530
 1008669:	mov    rcx,rdi
 100866c:	call   QWORD PTR [rip+0xffffffffffff8cce]        # 0x1001340
 1008672:	test   eax,eax
 1008674:	jne    0x100867c
 1008676:	mov    WORD PTR [rdi],r12w
 100867a:	jmp    0x10086e5
 100867c:	call   0x1006c30
 1008681:	test   eax,eax
 1008683:	jne    0x10086e5
 1008685:	mov    ecx,r15d
 1008688:	call   0x10052f0
 100868d:	int3   
 100868e:	cmp    WORD PTR [rip+0x77ca],r12w        # 0x100fe60
 1008696:	jne    0x10086e5
 1008698:	mov    ecx,DWORD PTR [rip+0x5a82]        # 0x100e120
 100869e:	lea    rdx,[rip+0xffffffffffff907f]        # 0x1001724
 10086a5:	call   QWORD PTR [rip+0xffffffffffff8b25]        # 0x10011d0
 10086ab:	mov    rdi,rax
 10086ae:	test   rax,rax
 10086b1:	jne    0x10086bd
 10086b3:	call   QWORD PTR [rip+0xffffffffffff8c9f]        # 0x1001358
 10086b9:	lea    rdi,[rax+0x30]
 10086bd:	mov    rcx,rdi
 10086c0:	call   0x1004cb0
 10086c5:	mov    rcx,rdi
 10086c8:	call   0x1004d50
 10086cd:	call   QWORD PTR [rip+0xffffffffffff8c85]        # 0x1001358
 10086d3:	add    rax,0x30
 10086d7:	cmp    rax,rdi
 10086da:	je     0x10086e5
 10086dc:	mov    rcx,rdi
 10086df:	call   QWORD PTR [rip+0xffffffffffff8ae3]        # 0x10011c8
 10086e5:	lea    r8,[rip+0xffffffffffff903c]        # 0x1001728
 10086ec:	lea    rcx,[rbp+0xc0]
 10086f3:	mov    edx,0x364
 10086f8:	call   QWORD PTR [rip+0xffffffffffff8c7a]        # 0x1001378
 10086fe:	call   0x1006db0
 1008703:	test   eax,eax
 1008705:	jne    0x1008710
 1008707:	mov    ecx,r15d
 100870a:	call   0x10052f0
 100870f:	int3   
 1008710:	mov    r8,QWORD PTR [rip+0x5ae9]        # 0x100e200
 1008717:	mov    rcx,r8
 100871a:	call   0x1005e60
 100871f:	test   eax,eax
 1008721:	jne    0x10087bf
 1008727:	mov    ecx,0x206
 100872c:	call   QWORD PTR [rip+0xffffffffffff8c1e]        # 0x1001350
 1008732:	mov    rsi,rax
 1008735:	test   rax,rax
 1008738:	jne    0x1008743
 100873a:	mov    ecx,r15d
 100873d:	call   0x10052f0
 1008742:	int3   
 1008743:	mov    eax,0x7b
 1008748:	lea    r9,[rsi+0x2]
 100874c:	lea    rdx,[rip+0xffffffffffff8fe1]        # 0x1001734
 1008753:	mov    WORD PTR [rsi],ax
 1008756:	mov    rcx,QWORD PTR [rip+0x5aa3]        # 0x100e200
 100875d:	xor    r8d,r8d
 1008760:	mov    DWORD PTR [rsp+0x20],0x204
 1008768:	call   0x1007030
 100876d:	lea    r8,[rip+0xffffffffffff8fc0]        # 0x1001734
 1008774:	mov    edx,0x103
 1008779:	mov    rcx,rsi
 100877c:	call   QWORD PTR [rip+0xffffffffffff8bf6]        # 0x1001378
 1008782:	lea    rcx,[rbp+0xc0]
 1008789:	mov    r8,rsi
 100878c:	mov    edx,0x364
 1008791:	call   QWORD PTR [rip+0xffffffffffff8be1]        # 0x1001378
 1008797:	mov    rcx,r15
 100879a:	nop    WORD PTR [rax+rax*1+0x0]
 10087a0:	inc    rcx
 10087a3:	cmp    WORD PTR [rsi+rcx*2],r12w
 10087a8:	jne    0x10087a0
 10087aa:	add    rcx,rcx
 10087ad:	xor    eax,eax
 10087af:	mov    rdi,rsi
 10087b2:	rep stos BYTE PTR es:[rdi],al
 10087b4:	mov    rcx,rsi
 10087b7:	call   QWORD PTR [rip+0xffffffffffff8b8b]        # 0x1001348
 10087bd:	jmp    0x10087d1
 10087bf:	lea    rcx,[rbp+0xc0]
 10087c6:	mov    edx,0x364
 10087cb:	call   QWORD PTR [rip+0xffffffffffff8ba7]        # 0x1001378
 10087d1:	mov    ecx,DWORD PTR [rip+0x5a25]        # 0x100e1fc
 10087d7:	mov    rdi,QWORD PTR [rip+0x5a22]        # 0x100e200
 10087de:	add    rcx,rcx
 10087e1:	xor    eax,eax
 10087e3:	rep stos BYTE PTR es:[rdi],al
 10087e5:	lea    r8,[rip+0xffffffffffff8f4c]        # 0x1001738
 10087ec:	lea    rcx,[rbp+0xc0]
 10087f3:	mov    edx,0x364
 10087f8:	call   QWORD PTR [rip+0xffffffffffff8b7a]        # 0x1001378
 10087fe:	cmp    WORD PTR [rip+0x737a],r12w        # 0x100fb80
 1008806:	je     0x1008811
 1008808:	lea    r8,[rip+0x7371]        # 0x100fb80
 100880f:	jmp    0x1008860
 1008811:	lea    rdx,[rbp-0x40]
 1008815:	lea    rcx,[rip+0xffffffffffff8f44]        # 0x1001760
 100881c:	mov    r8d,0x80
 1008822:	call   QWORD PTR [rip+0xffffffffffff8888]        # 0x10010b0
 1008828:	test   eax,eax
 100882a:	jne    0x1008854
 100882c:	lea    rdx,[rip+0x5a69]        # 0x100e29c
 1008833:	lea    rcx,[rbp-0x40]
 1008837:	mov    DWORD PTR [rip+0x5a5b],0x80        # 0x100e29c
 1008841:	call   QWORD PTR [rip+0xffffffffffff8949]        # 0x1001190
 1008847:	test   eax,eax
 1008849:	jne    0x1008872
 100884b:	lea    r8,[rip+0xffffffffffff8f2e]        # 0x1001780
 1008852:	jmp    0x1008860
 1008854:	mov    WORD PTR [rbp+0xbe],r12w
 100885c:	lea    r8,[rbp-0x40]
 1008860:	lea    rcx,[rbp+0xc0]
 1008867:	mov    edx,0x364
 100886c:	call   QWORD PTR [rip+0xffffffffffff8b06]        # 0x1001378
 1008872:	cmp    WORD PTR [rip+0x7426],r12w        # 0x100fca0
 100887a:	je     0x10088ae
 100887c:	lea    r8,[rip+0xffffffffffff8f1d]        # 0x10017a0
 1008883:	lea    rcx,[rbp+0xc0]
 100888a:	mov    edx,0x364
 100888f:	call   QWORD PTR [rip+0xffffffffffff8ae3]        # 0x1001378
 1008895:	lea    r8,[rip+0x7404]        # 0x100fca0
 100889c:	lea    rcx,[rbp+0xc0]
 10088a3:	mov    edx,0x364
 10088a8:	call   QWORD PTR [rip+0xffffffffffff8aca]        # 0x1001378
 10088ae:	lea    r8,[rip+0xffffffffffff8f03]        # 0x10017b8
 10088b5:	lea    rcx,[rbp+0xc0]
 10088bc:	mov    edx,0x364
 10088c1:	call   QWORD PTR [rip+0xffffffffffff8ab1]        # 0x1001378
 10088c7:	mov    rcx,QWORD PTR [rip+0x59ba]        # 0x100e288
 10088ce:	mov    WORD PTR [rsp+0x38],r12w
 10088d4:	mov    QWORD PTR [rsp+0x30],r12
 10088d9:	lea    r8,[rbp+0xc0]
 10088e0:	mov    r9d,0xfffffffd
 10088e6:	xor    edx,edx
 10088e8:	mov    WORD PTR [rsp+0x28],r12w
 10088ee:	mov    QWORD PTR [rsp+0x20],r12
 10088f3:	call   0x100ae0a
 10088f8:	lea    rdi,[rbp+0xc0]
 10088ff:	mov    ecx,0x6c8
 1008904:	movzx  esi,ax
 1008907:	xor    eax,eax
 1008909:	rep stos BYTE PTR es:[rdi],al
 100890b:	test   si,si
 100890e:	je     0x1008933
 1008910:	mov    rdx,QWORD PTR [rip+0x5971]        # 0x100e288
 1008917:	mov    ecx,r14d
 100891a:	call   0x1005660
 100891f:	cmp    si,0xffff
 1008923:	jne    0x1008933
 1008925:	call   0x10059b0
 100892a:	mov    ecx,r15d
 100892d:	call   0x10052f0
 1008932:	int3   
 1008933:	mov    eax,DWORD PTR [rsp+0x68]
 1008937:	test   eax,eax
 1008939:	je     0x100897b
 100893b:	mov    rcx,QWORD PTR [rip+0x5946]        # 0x100e288
 1008942:	mov    r8d,eax
 1008945:	mov    edx,0x91a7
 100894a:	mov    r9d,0xfffffffb
 1008950:	call   0x100adf2
 1008955:	movzx  edi,ax
 1008958:	test   ax,ax
 100895b:	je     0x100897b
 100895d:	mov    rdx,QWORD PTR [rip+0x5924]        # 0x100e288
 1008964:	mov    ecx,r14d
 1008967:	call   0x1005660
 100896c:	cmp    di,0xffff
 1008970:	jne    0x100897b
 1008972:	mov    ecx,r15d
 1008975:	call   0x10052f0
 100897a:	int3   
 100897b:	mov    rdx,QWORD PTR [rip+0x5906]        # 0x100e288
 1008982:	lea    r8,[rip+0x5907]        # 0x100e290
 1008989:	mov    ecx,0x3
 100898e:	call   0x100ad56
 1008993:	movzx  edi,ax
 1008996:	test   ax,ax
 1008999:	je     0x10089b9
 100899b:	mov    rdx,QWORD PTR [rip+0x58e6]        # 0x100e288
 10089a2:	mov    ecx,r14d
 10089a5:	call   0x1005660
 10089aa:	cmp    di,0xffff
 10089ae:	jne    0x10089b9
 10089b0:	mov    ecx,r15d
 10089b3:	call   0x10052f0
 10089b8:	int3   
 10089b9:	movsxd r15,DWORD PTR [rbp-0x6c]
 10089bd:	mov    rcx,QWORD PTR [rip+0x58cc]        # 0x100e290
 10089c4:	mov    r9d,0xfffffffb
 10089ca:	mov    r8,r15
 10089cd:	xor    edx,edx
 10089cf:	call   0x100ae2e
 10089d4:	movzx  edi,ax
 10089d7:	test   ax,ax
 10089da:	je     0x10089fc
 10089dc:	mov    rdx,QWORD PTR [rip+0x58ad]        # 0x100e290
 10089e3:	mov    ecx,0x3
 10089e8:	call   0x1005660
 10089ed:	cmp    di,0xffff
 10089f1:	jne    0x10089fc
 10089f3:	or     ecx,0xffffffff
 10089f6:	call   0x10052f0
 10089fb:	int3   
 10089fc:	movsxd rax,DWORD PTR [rip+0x5815]        # 0x100e218
 1008a03:	test   eax,eax
 1008a05:	je     0x1008a47
 1008a07:	mov    rcx,QWORD PTR [rip+0x5882]        # 0x100e290
 1008a0e:	mov    edx,0x3
 1008a13:	mov    r8,rax
 1008a16:	lea    r9d,[rdx-0x8]
 1008a1a:	call   0x100ae2e
 1008a1f:	movzx  edi,ax
 1008a22:	test   ax,ax
 1008a25:	je     0x1008a47
 1008a27:	mov    rdx,QWORD PTR [rip+0x5862]        # 0x100e290
 1008a2e:	mov    ecx,0x3
 1008a33:	call   0x1005660
 1008a38:	cmp    di,0xffff
 1008a3c:	jne    0x1008a47
 1008a3e:	or     ecx,0xffffffff
 1008a41:	call   0x10052f0
 1008a46:	int3   
 1008a47:	cmp    DWORD PTR [rip+0x580e],r12d        # 0x100e25c
 1008a4e:	je     0x1008a92
 1008a50:	mov    rcx,QWORD PTR [rip+0x5839]        # 0x100e290
 1008a57:	mov    r9d,0xfffffffb
 1008a5d:	mov    r8,rbx
 1008a60:	mov    edx,0x4cd
 1008a65:	call   0x100ae2e
 1008a6a:	movzx  edi,ax
 1008a6d:	test   ax,ax
 1008a70:	je     0x1008a92
 1008a72:	mov    rdx,QWORD PTR [rip+0x5817]        # 0x100e290
 1008a79:	mov    ecx,0x3
 1008a7e:	call   0x1005660
 1008a83:	cmp    di,0xffff
 1008a87:	jne    0x1008a92
 1008a89:	or     ecx,0xffffffff
 1008a8c:	call   0x10052f0
 1008a91:	int3   
 1008a92:	lea    rcx,[rip+0xffffffffffffcfb7]        # 0x1005a50
 1008a99:	mov    edx,ebx
 1008a9b:	call   QWORD PTR [rip+0xffffffffffff8657]        # 0x10010f8
 1008aa1:	test   eax,eax
 1008aa3:	jne    0x1008ab6
 1008aa5:	lea    ecx,[rax+0x3]
 1008aa8:	call   0x1005d30
 1008aad:	or     ecx,0xffffffff
 1008ab0:	call   0x10052f0
 1008ab5:	int3   
 1008ab6:	cmp    WORD PTR [rip+0x6e82],r12w        # 0x100f940
 1008abe:	mov    edi,0x4
 1008ac3:	je     0x1008bcb
 1008ac9:	lea    rcx,[rbp+0x992]
 1008ad0:	xor    edx,edx
 1008ad2:	mov    r8d,0x7ce
 1008ad8:	mov    WORD PTR [rbp+0x990],r12w
 1008ae0:	call   0x100a756
 1008ae5:	lea    r8,[rip+0xffffffffffff8cd4]        # 0x10017c0
 1008aec:	lea    rcx,[rbp+0x990]
 1008af3:	mov    edx,0x3e8
 1008af8:	mov    DWORD PTR [rsp+0x68],r12d
 1008afd:	mov    QWORD PTR [rsp+0x70],r12
 1008b02:	mov    QWORD PTR [rbp-0x50],0xfffffffffffffffd
 1008b0a:	call   QWORD PTR [rip+0xffffffffffff8820]        # 0x1001330
 1008b10:	mov    rcx,QWORD PTR [rip+0x5779]        # 0x100e290
 1008b17:	lea    rax,[rsp+0x70]
 1008b1c:	lea    r9d,[rdi-0x14]
 1008b20:	mov    QWORD PTR [rsp+0x48],rax
 1008b25:	mov    QWORD PTR [rsp+0x40],r12
 1008b2a:	lea    rax,[rsp+0x68]
 1008b2f:	mov    QWORD PTR [rsp+0x38],rax
 1008b34:	mov    WORD PTR [rsp+0x30],r12w
 1008b3a:	mov    r8d,edi
 1008b3d:	mov    edx,ebx
 1008b3f:	mov    QWORD PTR [rsp+0x28],r12
 1008b44:	mov    WORD PTR [rsp+0x20],di
 1008b49:	call   0x100adb6
 1008b4e:	mov    rcx,QWORD PTR [rip+0x573b]        # 0x100e290
 1008b55:	lea    rax,[rbp-0x50]
 1008b59:	mov    QWORD PTR [rsp+0x48],rax
 1008b5e:	mov    QWORD PTR [rsp+0x40],r12
 1008b63:	lea    rax,[rip+0x6dd6]        # 0x100f940
 1008b6a:	mov    QWORD PTR [rsp+0x38],rax
 1008b6f:	mov    WORD PTR [rsp+0x30],r12w
 1008b75:	lea    r9d,[rdi-0xc]
 1008b79:	mov    r8d,ebx
 1008b7c:	mov    edx,r14d
 1008b7f:	mov    QWORD PTR [rsp+0x28],0xff
 1008b88:	mov    WORD PTR [rsp+0x20],bx
 1008b8d:	call   0x100adb6
 1008b92:	mov    rcx,QWORD PTR [rip+0x56f7]        # 0x100e290
 1008b99:	lea    r8d,[rdi-0x7]
 1008b9d:	lea    rdx,[rbp+0x990]
 1008ba4:	call   0x100adc2
 1008ba9:	or     r12,0xffffffffffffffff
 1008bad:	cmp    r12w,ax
 1008bb1:	jne    0x1008bcf
 1008bb3:	mov    rdx,QWORD PTR [rip+0x56d6]        # 0x100e290
 1008bba:	lea    ecx,[rdi-0x1]
 1008bbd:	call   0x1005660
 1008bc2:	mov    ecx,r12d
 1008bc5:	call   0x10052f0
 1008bca:	int3   
 1008bcb:	or     r12,0xffffffffffffffff
 1008bcf:	lea    rcx,[rip+0x6322]        # 0x100eef8
 1008bd6:	mov    edx,0x400
 1008bdb:	mov    r8d,0x1000
 1008be1:	call   0x1005b20
 1008be6:	cmp    DWORD PTR [rip+0x5653],0x0        # 0x100e240
 1008bed:	jne    0x1008c26
 1008bef:	cmp    DWORD PTR [rip+0x5646],0x0        # 0x100e23c
 1008bf6:	jne    0x1008c26
 1008bf8:	cmp    DWORD PTR [rip+0x55e9],0x0        # 0x100e1e8
 1008bff:	jne    0x1008c26
 1008c01:	mov    rcx,QWORD PTR [rip+0x6af0]        # 0x100f6f8
 1008c08:	lea    rdx,[rip+0x6af1]        # 0x100f700
 1008c0f:	call   QWORD PTR [rip+0xffffffffffff84d3]        # 0x10010e8
 1008c15:	test   eax,eax
 1008c17:	je     0x1008c26
 1008c19:	movsx  eax,WORD PTR [rip+0x6ae0]        # 0x100f700
 1008c20:	mov    DWORD PTR [rip+0x54da],eax        # 0x100e100
 1008c26:	movsxd r14,DWORD PTR [rbp-0x68]
 1008c2a:	mov    rbx,QWORD PTR [rbp-0x80]
 1008c2e:	mov    esi,DWORD PTR [rbp-0x74]
 1008c31:	mov    r13d,0xd
 1008c37:	mov    edi,DWORD PTR [rsp+0x54]
 1008c3b:	xor    r8d,r8d
 1008c3e:	xchg   ax,ax
 1008c40:	mov    ecx,edi
 1008c42:	dec    ecx
 1008c44:	je     0x1008dbb
 1008c4a:	dec    ecx
 1008c4c:	je     0x1008d8f
 1008c52:	dec    ecx
 1008c54:	je     0x1008d69
 1008c5a:	cmp    DWORD PTR [rip+0x5587],0x0        # 0x100e1e8
 1008c61:	jne    0x1008d04
 1008c67:	cmp    DWORD PTR [rip+0x55f2],0x0        # 0x100e260
 1008c6e:	jne    0x1008c9f
 1008c70:	cmp    DWORD PTR [rip+0x5495],0x0        # 0x100e10c
 1008c77:	je     0x1008c94
 1008c79:	movzx  edx,WORD PTR [rip+0x5490]        # 0x100e110
 1008c80:	inc    WORD PTR [rip+0x5489]        # 0x100e110
 1008c87:	lea    rcx,[rip+0xffffffffffff8b92]        # 0x1001820
 1008c8e:	call   QWORD PTR [rip+0xffffffffffff8594]        # 0x1001228
 1008c94:	mov    eax,0x1
 1008c99:	mov    DWORD PTR [rip+0x5be9],eax        # 0x100e888
 1008c9f:	mov    r8,QWORD PTR [rip+0x55ca]        # 0x100e270
 1008ca6:	lea    rcx,[rip+0x6273]        # 0x100ef20
 1008cad:	mov    edx,0x3e8
 1008cb2:	call   QWORD PTR [rip+0xffffffffffff8558]        # 0x1001210
 1008cb8:	test   rax,rax
 1008cbb:	jne    0x1008cf5
 1008cbd:	cmp    DWORD PTR [rip+0x55d5],eax        # 0x100e298
 1008cc3:	jne    0x1008cf5
 1008cc5:	cmp    DWORD PTR [rip+0x5595],eax        # 0x100e260
 1008ccb:	jne    0x1009a6e
 1008cd1:	lea    r8,[rip+0x6e68]        # 0x100fb40
 1008cd8:	lea    rcx,[rip+0x6241]        # 0x100ef20
 1008cdf:	mov    edx,0x3ea
 1008ce4:	call   QWORD PTR [rip+0xffffffffffff8646]        # 0x1001330
 1008cea:	mov    eax,0x1
 1008cef:	mov    DWORD PTR [rip+0x556b],eax        # 0x100e260
 1008cf5:	xor    r8d,r8d
 1008cf8:	mov    DWORD PTR [rip+0x5599],r8d        # 0x100e298
 1008cff:	jmp    0x1008dc6
 1008d04:	cmp    DWORD PTR [rip+0x5401],0x0        # 0x100e10c
 1008d0b:	je     0x1008d28
 1008d0d:	movzx  edx,WORD PTR [rip+0x53fc]        # 0x100e110
 1008d14:	inc    WORD PTR [rip+0x53f5]        # 0x100e110
 1008d1b:	lea    rcx,[rip+0xffffffffffff8afe]        # 0x1001820
 1008d22:	call   QWORD PTR [rip+0xffffffffffff8500]        # 0x1001228
 1008d28:	mov    r8,QWORD PTR [rip+0x5541]        # 0x100e270
 1008d2f:	mov    eax,0x1
 1008d34:	lea    rcx,[rip+0x61e5]        # 0x100ef20
 1008d3b:	mov    edx,0x3e8
 1008d40:	mov    DWORD PTR [rip+0x5b42],eax        # 0x100e888
 1008d46:	call   QWORD PTR [rip+0xffffffffffff84c4]        # 0x1001210
 1008d4c:	test   rax,rax
 1008d4f:	jne    0x1008cf5
 1008d51:	cmp    DWORD PTR [rip+0x5541],eax        # 0x100e298
 1008d57:	je     0x1009a6e
 1008d5d:	xor    r8d,r8d
 1008d60:	mov    DWORD PTR [rip+0x5531],r8d        # 0x100e298
 1008d67:	jmp    0x1008dc6
 1008d69:	lea    r8,[rip+0xffffffffffff8aa0]        # 0x1001810
 1008d70:	lea    rcx,[rip+0x61a9]        # 0x100ef20
 1008d77:	mov    edx,0x3ea
 1008d7c:	call   QWORD PTR [rip+0xffffffffffff85ae]        # 0x1001330
 1008d82:	xor    r8d,r8d
 1008d85:	mov    edi,r8d
 1008d88:	mov    DWORD PTR [rsp+0x54],r8d
 1008d8d:	jmp    0x1008dc6
 1008d8f:	lea    r8,[rip+0x6daa]        # 0x100fb40
 1008d96:	lea    rcx,[rip+0x6183]        # 0x100ef20
 1008d9d:	mov    edx,0x3ea
 1008da2:	call   QWORD PTR [rip+0xffffffffffff8588]        # 0x1001330
 1008da8:	mov    edx,DWORD PTR [rbp-0x70]
 1008dab:	neg    edx
 1008dad:	sbb    edi,edi
 1008daf:	and    edi,0x3
 1008db2:	xor    r8d,r8d
 1008db5:	mov    DWORD PTR [rsp+0x54],edi
 1008db9:	jmp    0x1008dc6
 1008dbb:	mov    eax,0x2
 1008dc0:	mov    edi,eax
 1008dc2:	mov    DWORD PTR [rsp+0x54],eax
 1008dc6:	mov    rax,r12
 1008dc9:	lea    r9,[rip+0x6150]        # 0x100ef20
 1008dd0:	inc    rax
 1008dd3:	cmp    WORD PTR [r9+rax*2],0x0
 1008dd9:	jne    0x1008dd0
 1008ddb:	cmp    rax,0x3e8
 1008de1:	ja     0x1009ac3
 1008de7:	dec    eax
 1008de9:	mov    DWORD PTR [rip+0x5a98],r8d        # 0x100e888
 1008df0:	mov    DWORD PTR [rsp+0x50],eax
 1008df4:	js     0x1008e45
 1008df6:	movsxd rdx,eax
 1008df9:	lea    rcx,[rdx+rdx*1]
 1008dfd:	cmp    WORD PTR [rcx+r9*1],0xa
 1008e03:	jne    0x1008e45
 1008e05:	cmp    DWORD PTR [rip+0x5310],0x1        # 0x100e11c
 1008e0c:	jne    0x1008e33
 1008e0e:	test   eax,eax
 1008e10:	jle    0x1008e45
 1008e12:	cmp    r13w,WORD PTR [r9+rdx*2-0x2]
 1008e18:	jne    0x1008e45
 1008e1a:	dec    eax
 1008e1c:	movsxd rcx,eax
 1008e1f:	add    rcx,rcx
 1008e22:	cmp    rcx,0x7d4
 1008e29:	jb     0x1008e40
 1008e2b:	xor    ecx,ecx
 1008e2d:	call   0x100a764
 1008e32:	int3   
 1008e33:	cmp    rcx,0x7d4
 1008e3a:	jae    0x10099ff
 1008e40:	mov    WORD PTR [rcx+r9*1],r8w
 1008e45:	lea    rdx,[rip+0xffffffffffff89c4]        # 0x1001810
 1008e4c:	mov    r8d,0x4
 1008e52:	mov    rcx,r9
 1008e55:	call   0x10061a0
 1008e5a:	test   eax,eax
 1008e5c:	jne    0x10099cd
 1008e62:	lea    r8d,[rax+0x4]
 1008e66:	lea    rdx,[rip+0xffffffffffff89c3]        # 0x1001830
 1008e6d:	lea    rcx,[rip+0x60ac]        # 0x100ef20
 1008e74:	call   0x10061a0
 1008e79:	test   eax,eax
 1008e7b:	jne    0x10099cd
 1008e81:	cmp    DWORD PTR [rip+0x5419],eax        # 0x100e2a0
 1008e87:	jne    0x100910b
 1008e8d:	lea    r8d,[rax+0x4]
 1008e91:	lea    rdx,[rip+0xffffffffffff8998]        # 0x1001830
 1008e98:	lea    rcx,[rip+0x6081]        # 0x100ef20
 1008e9f:	call   QWORD PTR [rip+0xffffffffffff84fb]        # 0x10013a0
 1008ea5:	test   eax,eax
 1008ea7:	jne    0x1008f16
 1008ea9:	movzx  ecx,WORD PTR [rip+0x6078]        # 0x100ef28
 1008eb0:	lea    rax,[rip+0x6071]        # 0x100ef28
 1008eb7:	test   cx,cx
 1008eba:	je     0x1008ed9
 1008ebc:	nop    DWORD PTR [rax+0x0]
 1008ec0:	cmp    cx,0x20
 1008ec4:	je     0x1008ecc
 1008ec6:	cmp    cx,0x9
 1008eca:	jne    0x1008ed9
 1008ecc:	movzx  ecx,WORD PTR [rax+0x2]
 1008ed0:	add    rax,0x2
 1008ed4:	test   cx,cx
 1008ed7:	jne    0x1008ec0
 1008ed9:	cmp    WORD PTR [rax],0x28
 1008edd:	jne    0x1008f16
 1008edf:	lea    r9,[rip+0x603a]        # 0x100ef20
 1008ee6:	cmp    rax,r9
 1008ee9:	jb     0x1008efc
 1008eeb:	mov    ecx,0x20
 1008ef0:	mov    WORD PTR [rax],cx
 1008ef3:	sub    rax,0x2
 1008ef7:	cmp    rax,r9
 1008efa:	jae    0x1008ef0
 1008efc:	mov    r8d,0x1
 1008f02:	mov    DWORD PTR [rip+0x5397],r8d        # 0x100e2a0
 1008f09:	mov    edi,r8d
 1008f0c:	mov    DWORD PTR [rsp+0x5c],r8d
 1008f11:	jmp    0x100911c
 1008f16:	cmp    DWORD PTR [rip+0x5383],0x0        # 0x100e2a0
 1008f1d:	jne    0x100910b
 1008f23:	lea    rdx,[rip+0xffffffffffff8912]        # 0x100183c
 1008f2a:	lea    rcx,[rip+0x5fef]        # 0x100ef20
 1008f31:	mov    r8d,0x2
 1008f37:	call   QWORD PTR [rip+0xffffffffffff8463]        # 0x10013a0
 1008f3d:	test   eax,eax
 1008f3f:	jne    0x1008f67
 1008f41:	lea    ecx,[rax+0x39]
 1008f44:	call   0x1005d30
 1008f49:	cmp    DWORD PTR [rip+0x52e8],0x1        # 0x100e238
 1008f50:	je     0x1009a07
 1008f56:	mov    eax,0xffff
 1008f5b:	add    WORD PTR [rip+0x51ae],ax        # 0x100e110
 1008f62:	jmp    0x1008c3b
 1008f67:	lea    rdx,[rip+0xffffffffffff88d6]        # 0x1001844
 1008f6e:	lea    rcx,[rip+0x5fab]        # 0x100ef20
 1008f75:	mov    r8d,0x2
 1008f7b:	call   0x10061a0
 1008f80:	test   eax,eax
 1008f82:	je     0x1008fac
 1008f84:	mov    ecx,0x39
 1008f89:	call   0x1005d30
 1008f8e:	cmp    DWORD PTR [rip+0x52a3],0x1        # 0x100e238
 1008f95:	je     0x1009a10
 1008f9b:	mov    eax,0xffff
 1008fa0:	add    WORD PTR [rip+0x5169],ax        # 0x100e110
 1008fa7:	jmp    0x1008c3b
 1008fac:	lea    rdx,[rip+0xffffffffffff8899]        # 0x100184c
 1008fb3:	lea    rcx,[rip+0x5f66]        # 0x100ef20
 1008fba:	mov    r8d,0x2
 1008fc0:	call   QWORD PTR [rip+0xffffffffffff83da]        # 0x10013a0
 1008fc6:	test   eax,eax
 1008fc8:	jne    0x1009007
 1008fca:	test   esi,esi
 1008fcc:	je     0x1008fdc
 1008fce:	mov    rax,QWORD PTR [rip+0x5f23]        # 0x100eef8
 1008fd5:	xor    ecx,ecx
 1008fd7:	mov    DWORD PTR [rax+0x4],ecx
 1008fda:	mov    esi,ecx
 1008fdc:	call   0x1004f90
 1008fe1:	call   0x1005010
 1008fe6:	mov    rdx,QWORD PTR [rip+0x5f0b]        # 0x100eef8
 1008fed:	cmp    DWORD PTR [rdx+0x4],0x0
 1008ff1:	jne    0x1008c3b
 1008ff7:	xor    r8d,r8d
 1008ffa:	mov    WORD PTR [rip+0x5efe],r8w        # 0x100ef00
 1009002:	jmp    0x1008c40
 1009007:	lea    rdx,[rip+0xffffffffffff884a]        # 0x1001858
 100900e:	lea    rcx,[rip+0x5f0b]        # 0x100ef20
 1009015:	mov    r8d,0x5
 100901b:	call   0x10061a0
 1009020:	test   eax,eax
 1009022:	je     0x1009053
 1009024:	xor    r8d,r8d
 1009027:	mov    eax,0x1
 100902c:	mov    WORD PTR [rip+0x50dd],ax        # 0x100e110
 1009033:	mov    rax,QWORD PTR [rip+0x5ebe]        # 0x100eef8
 100903a:	mov    WORD PTR [rip+0x5ede],r8w        # 0x100ef20
 1009042:	mov    DWORD PTR [rax+0x4],r8d
 1009046:	mov    WORD PTR [rip+0x5eb2],r8w        # 0x100ef00
 100904e:	jmp    0x1008c40
 1009053:	movzx  eax,WORD PTR [rip+0x51c6]        # 0x100e220
 100905a:	test   ax,ax
 100905d:	je     0x100907e
 100905f:	lea    rdx,[rip+0x6d5a]        # 0x100fdc0
 1009066:	lea    rcx,[rip+0x5eb3]        # 0x100ef20
 100906d:	movzx  r8d,ax
 1009071:	call   0x10061a0
 1009076:	test   eax,eax
 1009078:	jne    0x1008c3b
 100907e:	movzx  r8d,WORD PTR [rip+0x689a]        # 0x100f920
 1009086:	lea    rdx,[rip+0x6ab3]        # 0x100fb40
 100908d:	lea    rcx,[rip+0x5e8c]        # 0x100ef20
 1009094:	call   0x10061a0
 1009099:	test   eax,eax
 100909b:	je     0x1009187
 10090a1:	cmp    DWORD PTR [rip+0x51b8],0x0        # 0x100e260
 10090a8:	je     0x100924f
 10090ae:	mov    ecx,0x19
 10090b3:	call   QWORD PTR [rip+0xffffffffffff7faf]        # 0x1001068
 10090b9:	cmp    DWORD PTR [rip+0x51a4],0x0        # 0x100e264
 10090c0:	je     0x100924f
 10090c6:	lea    rcx,[rip+0xffffffffffff844b]        # 0x1001518
 10090cd:	call   0x1002b60
 10090d2:	mov    edi,DWORD PTR [rsp+0x54]
 10090d6:	xor    r8d,r8d
 10090d9:	mov    eax,0x1
 10090de:	mov    WORD PTR [rip+0x5e3a],r8w        # 0x100ef20
 10090e6:	mov    WORD PTR [rip+0x5023],ax        # 0x100e110
 10090ed:	mov    rax,QWORD PTR [rip+0x5e04]        # 0x100eef8
 10090f4:	mov    DWORD PTR [rax+0x4],r8d
 10090f8:	mov    DWORD PTR [rip+0x5161],r8d        # 0x100e260
 10090ff:	mov    DWORD PTR [rip+0x515e],r8d        # 0x100e264
 1009106:	jmp    0x1008c40
 100910b:	mov    edi,DWORD PTR [rsp+0x5c]
 100910f:	lea    r9,[rip+0x5e0a]        # 0x100ef20
 1009116:	mov    r8d,0x1
 100911c:	cmp    WORD PTR [rip+0x5dfc],0x0        # 0x100ef20
 1009124:	mov    rdx,r9
 1009127:	je     0x1009164
 1009129:	nop    DWORD PTR [rax+0x0]
 1009130:	test   edi,edi
 1009132:	je     0x1009168
 1009134:	movzx  ecx,WORD PTR [rdx]
 1009137:	sub    ecx,0x9
 100913a:	je     0x100915a
 100913c:	sub    ecx,0x17
 100913f:	je     0x100915a
 1009141:	sub    ecx,0x8
 1009144:	je     0x1009154
 1009146:	dec    ecx
 1009148:	je     0x1009150
 100914a:	mov    DWORD PTR [rbp-0x64],r8d
 100914e:	jmp    0x100915a
 1009150:	dec    edi
 1009152:	jmp    0x1009156
 1009154:	inc    edi
 1009156:	mov    DWORD PTR [rsp+0x5c],edi
 100915a:	add    rdx,0x2
 100915e:	cmp    WORD PTR [rdx],0x0
 1009162:	jne    0x1009130
 1009164:	test   edi,edi
 1009166:	jne    0x1009192
 1009168:	xor    ecx,ecx
 100916a:	mov    WORD PTR [rdx-0x2],cx
 100916e:	cmp    DWORD PTR [rbp-0x64],ecx
 1009171:	jne    0x1009194
 1009173:	mov    DWORD PTR [rsp+0x54],0x2
 100917b:	mov    DWORD PTR [rbp-0x70],r8d
 100917f:	mov    DWORD PTR [rip+0x511b],ecx        # 0x100e2a0
 1009185:	jmp    0x1009194
 1009187:	mov    edi,DWORD PTR [rsp+0x5c]
 100918b:	lea    r9,[rip+0x5d8e]        # 0x100ef20
 1009192:	xor    ecx,ecx
 1009194:	test   esi,esi
 1009196:	je     0x10091a4
 1009198:	mov    rax,QWORD PTR [rip+0x5d59]        # 0x100eef8
 100919f:	mov    esi,ecx
 10091a1:	mov    DWORD PTR [rax+0x4],ecx
 10091a4:	mov    rax,r12
 10091a7:	nop    WORD PTR [rax+rax*1+0x0]
 10091b0:	inc    rax
 10091b3:	cmp    WORD PTR [r9+rax*2],0x0
 10091b9:	jne    0x10091b0
 10091bb:	cmp    rax,0x3e7
 10091c1:	je     0x10091ef
 10091c3:	cmp    DWORD PTR [rip+0x501e],0x0        # 0x100e1e8
 10091ca:	mov    edx,0x3ea
 10091cf:	mov    rcx,r9
 10091d2:	lea    r8,[rip+0xffffffffffff83c3]        # 0x100159c
 10091d9:	jne    0x10091e2
 10091db:	lea    r8,[rip+0xffffffffffff8336]        # 0x1001518
 10091e2:	call   QWORD PTR [rip+0xffffffffffff8190]        # 0x1001378
 10091e8:	lea    r9,[rip+0x5d31]        # 0x100ef20
 10091ef:	lea    rcx,[rip+0x5d02]        # 0x100eef8
 10091f6:	mov    r8d,0xfffffffd
 10091fc:	mov    rdx,r9
 10091ff:	call   0x1005ba0
 1009204:	inc    WORD PTR [rip+0x5cf5]        # 0x100ef00
 100920b:	xor    r8d,r8d
 100920e:	cmp    DWORD PTR [rip+0x504f],r8d        # 0x100e264
 1009215:	je     0x1009235
 1009217:	mov    rax,QWORD PTR [rip+0x5cda]        # 0x100eef8
 100921e:	mov    DWORD PTR [rax+0x4],r8d
 1009222:	mov    eax,0x2
 1009227:	mov    DWORD PTR [rip+0x5036],r8d        # 0x100e264
 100922e:	mov    WORD PTR [rip+0x4edb],ax        # 0x100e110
 1009235:	cmp    DWORD PTR [rip+0x5064],0x0        # 0x100e2a0
 100923c:	je     0x1009246
 100923e:	test   edi,edi
 1009240:	je     0x10090a1
 1009246:	mov    edi,DWORD PTR [rsp+0x54]
 100924a:	jmp    0x1008c40
 100924f:	mov    ecx,0x1
 1009254:	cmp    WORD PTR [rip+0x5c99],cx        # 0x100eef4
 100925b:	jge    0x1009264
 100925d:	mov    WORD PTR [rip+0x5c90],cx        # 0x100eef4
 1009264:	test   esi,esi
 1009266:	je     0x100928e
 1009268:	mov    rax,QWORD PTR [rip+0x5c89]        # 0x100eef8
 100926f:	mov    edi,DWORD PTR [rsp+0x54]
 1009273:	xor    r8d,r8d
 1009276:	mov    DWORD PTR [rax+0x4],r8d
 100927a:	mov    WORD PTR [rip+0x5c7e],r8w        # 0x100ef00
 1009282:	mov    WORD PTR [rip+0x4e87],cx        # 0x100e110
 1009289:	jmp    0x1008c40
 100928e:	cmp    WORD PTR [rip+0x5c6a],0x0        # 0x100ef00
 1009296:	jne    0x10092ab
 1009298:	mov    edi,DWORD PTR [rsp+0x54]
 100929c:	xor    r8d,r8d
 100929f:	mov    WORD PTR [rip+0x4e6a],cx        # 0x100e110
 10092a6:	jmp    0x1008c40
 10092ab:	call   QWORD PTR [rip+0xffffffffffff7fa7]        # 0x1001258
 10092b1:	cmp    DWORD PTR [rip+0x4f34],0x0        # 0x100e1ec
 10092b8:	mov    DWORD PTR [rip+0x5c32],eax        # 0x100eef0
 10092be:	je     0x10092cd
 10092c0:	cmp    DWORD PTR [rip+0x4f29],0x0        # 0x100e1f0
 10092c7:	jne    0x1009a19
 10092cd:	movsx  rdx,WORD PTR [rip+0x5c1f]        # 0x100eef4
 10092d5:	mov    rcx,QWORD PTR [rip+0x4fb4]        # 0x100e290
 10092dc:	xor    r8d,r8d
 10092df:	call   0x100adaa
 10092e4:	test   ax,ax
 10092e7:	je     0x10092fa
 10092e9:	mov    rdx,QWORD PTR [rip+0x4fa0]        # 0x100e290
 10092f0:	mov    ecx,0x3
 10092f5:	call   0x1005660
 10092fa:	xor    eax,eax
 10092fc:	mov    DWORD PTR [rip+0x4f1a],eax        # 0x100e21c
 1009302:	test   r15,r15
 1009305:	je     0x1009312
 1009307:	xor    ecx,ecx
 1009309:	call   QWORD PTR [rip+0xffffffffffff7f51]        # 0x1001260
 100930f:	mov    rbx,rax
 1009312:	mov    rcx,QWORD PTR [rip+0x4f77]        # 0x100e290
 1009319:	mov    esi,0x1
 100931e:	lea    r9d,[rsi-0x6]
 1009322:	lea    edx,[rsi+0x3]
 1009325:	mov    r8d,esi
 1009328:	call   0x100ae2e
 100932d:	movzx  edi,ax
 1009330:	test   ax,ax
 1009333:	je     0x100934e
 1009335:	mov    rdx,QWORD PTR [rip+0x4f54]        # 0x100e290
 100933c:	lea    ecx,[rsi+0x2]
 100933f:	call   0x1005660
 1009344:	cmp    di,0xffff
 1009348:	je     0x1009a22
 100934e:	mov    rdx,QWORD PTR [rip+0x5ba3]        # 0x100eef8
 1009355:	mov    edi,DWORD PTR [rip+0x4ed9]        # 0x100e234
 100935b:	mov    rcx,QWORD PTR [rip+0x4f2e]        # 0x100e290
 1009362:	mov    DWORD PTR [rip+0x4ecc],esi        # 0x100e234
 1009368:	movsxd r8,DWORD PTR [rdx+0x4]
 100936c:	add    rdx,0xc
 1009370:	shr    r8,1
 1009373:	call   0x100adc2
 1009378:	cmp    ax,0x2
 100937c:	jne    0x100942f
 1009382:	mov    r14d,DWORD PTR [rbp-0x6c]
 1009386:	data16 nop WORD PTR [rax+rax*1+0x0]
 1009390:	mov    rdx,QWORD PTR [rip+0x4ef9]        # 0x100e290
 1009397:	mov    ecx,0x3
 100939c:	mov    DWORD PTR [rip+0x4e92],edi        # 0x100e234
 10093a2:	call   0x1005660
 10093a7:	mov    ecx,esi
 10093a9:	call   QWORD PTR [rip+0xffffffffffff7cb9]        # 0x1001068
 10093af:	test   r15,r15
 10093b2:	je     0x10093e8
 10093b4:	xor    ecx,ecx
 10093b6:	call   QWORD PTR [rip+0xffffffffffff7ea4]        # 0x1001260
 10093bc:	sub    ax,bx
 10093bf:	movzx  eax,ax
 10093c2:	cmp    eax,r14d
 10093c5:	jle    0x10093e8
 10093c7:	xor    ecx,ecx
 10093c9:	call   QWORD PTR [rip+0xffffffffffff7e91]        # 0x1001260
 10093cf:	mov    ecx,0x7
 10093d4:	mov    rbx,rax
 10093d7:	call   0x1005d30
 10093dc:	mov    rcx,QWORD PTR [rip+0x4ead]        # 0x100e290
 10093e3:	call   0x100ad0e
 10093e8:	cmp    DWORD PTR [rip+0x4e75],0x0        # 0x100e264
 10093ef:	je     0x10093fd
 10093f1:	mov    rcx,QWORD PTR [rip+0x4e98]        # 0x100e290
 10093f8:	call   0x100ad0e
 10093fd:	mov    rdx,QWORD PTR [rip+0x5af4]        # 0x100eef8
 1009404:	mov    rcx,QWORD PTR [rip+0x4e85]        # 0x100e290
 100940b:	mov    DWORD PTR [rip+0x4e23],esi        # 0x100e234
 1009411:	movsxd r8,DWORD PTR [rdx+0x4]
 1009415:	add    rdx,0xc
 1009419:	shr    r8,1
 100941c:	call   0x100adc2
 1009421:	cmp    ax,0x2
 1009425:	je     0x1009390
 100942b:	movsxd r14,DWORD PTR [rbp-0x68]
 100942f:	mov    DWORD PTR [rip+0x4dff],edi        # 0x100e234
 1009435:	test   ax,ax
 1009438:	je     0x100944b
 100943a:	mov    rdx,QWORD PTR [rip+0x4e4f]        # 0x100e290
 1009441:	mov    ecx,0x3
 1009446:	call   0x1005660
 100944b:	mov    rcx,QWORD PTR [rip+0x4e3e]        # 0x100e290
 1009452:	mov    r9d,0xfffffffb
 1009458:	xor    r8d,r8d
 100945b:	lea    edx,[r9+0x9]
 100945f:	call   0x100ae2e
 1009464:	movzx  esi,ax
 1009467:	test   ax,ax
 100946a:	je     0x1009487
 100946c:	mov    rdx,QWORD PTR [rip+0x4e1d]        # 0x100e290
 1009473:	mov    ecx,0x3
 1009478:	call   0x1005660
 100947d:	cmp    si,0xffff
 1009481:	je     0x1009a2b
 1009487:	movsxd rax,DWORD PTR [rbp-0x60]
 100948b:	test   rax,rax
 100948e:	je     0x10094e4
 1009490:	mov    rdi,QWORD PTR [rip+0x5a61]        # 0x100eef8
 1009497:	xor    eax,eax
 1009499:	mov    ecx,eax
 100949b:	mov    DWORD PTR [rsp+0x50],eax
 100949f:	mov    eax,DWORD PTR [rdi+0x4]
 10094a2:	cdq    
 10094a3:	sub    eax,edx
 10094a5:	sar    eax,1
 10094a7:	test   eax,eax
 10094a9:	jle    0x10094e4
 10094ab:	nop    DWORD PTR [rax+rax*1+0x0]
 10094b0:	movsxd rax,ecx
 10094b3:	movzx  edx,WORD PTR [rdi+rax*2+0xc]
 10094b8:	cmp    dx,r13w
 10094bc:	je     0x10094d2
 10094be:	movzx  ecx,dx
 10094c1:	call   QWORD PTR [rip+0xffffffffffff7d41]        # 0x1001208
 10094c7:	mov    ecx,DWORD PTR [rsp+0x50]
 10094cb:	mov    rdi,QWORD PTR [rip+0x5a26]        # 0x100eef8
 10094d2:	inc    ecx
 10094d4:	mov    DWORD PTR [rsp+0x50],ecx
 10094d8:	mov    eax,DWORD PTR [rdi+0x4]
 10094db:	cdq    
 10094dc:	sub    eax,edx
 10094de:	sar    eax,1
 10094e0:	cmp    ecx,eax
 10094e2:	jl     0x10094b0
 10094e4:	mov    rcx,QWORD PTR [rip+0x4da5]        # 0x100e290
 10094eb:	lea    rax,[rsp+0x60]
 10094f0:	xor    edi,edi
 10094f2:	mov    QWORD PTR [rsp+0x30],rax
 10094f7:	lea    rax,[rsp+0x50]
 10094fc:	mov    edx,0x1
 1009501:	mov    QWORD PTR [rsp+0x28],rax
 1009506:	mov    r8d,0x4b5
 100950c:	xor    r9d,r9d
 100950f:	mov    WORD PTR [rsp+0x20],di
 1009514:	mov    DWORD PTR [rsp+0x50],0xfffffffa
 100951c:	call   0x100ad32
 1009521:	test   ax,ax
 1009524:	jne    0x10095fe
 100952a:	cmp    QWORD PTR [rsp+0x60],rdi
 100952f:	jle    0x10095fe
 1009535:	mov    rax,QWORD PTR [rsp+0x78]
 100953a:	test   rax,rax
 100953d:	je     0x1009548
 100953f:	mov    rcx,rax
 1009542:	call   QWORD PTR [rip+0xffffffffffff7e00]        # 0x1001348
 1009548:	mov    rcx,QWORD PTR [rip+0x4d41]        # 0x100e290
 100954f:	lea    rax,[rsp+0x60]
 1009554:	mov    edx,0x1
 1009559:	mov    QWORD PTR [rsp+0x30],rax
 100955e:	lea    rax,[rsp+0x50]
 1009563:	mov    r8d,0x3e9
 1009569:	mov    QWORD PTR [rsp+0x28],rax
 100956e:	xor    r9d,r9d
 1009571:	mov    DWORD PTR [rsp+0x50],0xfffffffa
 1009579:	mov    WORD PTR [rsp+0x20],di
 100957e:	call   0x100ad32
 1009583:	mov    rdx,QWORD PTR [rsp+0x60]
 1009588:	lea    rdi,[rdx*4+0x0]
 1009590:	mov    rcx,rdi
 1009593:	call   QWORD PTR [rip+0xffffffffffff7db7]        # 0x1001350
 1009599:	mov    r8,rdi
 100959c:	xor    edx,edx
 100959e:	mov    rcx,rax
 10095a1:	mov    QWORD PTR [rsp+0x78],rax
 10095a6:	mov    QWORD PTR [rip+0x4d03],rax        # 0x100e2b0
 10095ad:	mov    rdi,rax
 10095b0:	call   0x100a756
 10095b5:	mov    r8d,0x1
 10095bb:	mov    edx,r8d
 10095be:	mov    DWORD PTR [rsp+0x50],edx
 10095c2:	cmp    QWORD PTR [rsp+0x60],rdx
 10095c7:	jl     0x1009609
 10095c9:	nop    DWORD PTR [rax+0x0]
 10095d0:	mov    rcx,QWORD PTR [rip+0x4cb9]        # 0x100e290
 10095d7:	call   0x1002850
 10095dc:	movsx  ecx,ax
 10095df:	movsxd rax,DWORD PTR [rsp+0x50]
 10095e4:	mov    DWORD PTR [rdi+rax*4-0x4],ecx
 10095e8:	mov    edx,DWORD PTR [rsp+0x50]
 10095ec:	inc    edx
 10095ee:	movsxd rax,edx
 10095f1:	mov    DWORD PTR [rsp+0x50],edx
 10095f5:	cmp    rax,QWORD PTR [rsp+0x60]
 10095fa:	jle    0x10095d0
 10095fc:	jmp    0x1009603
 10095fe:	mov    rdi,QWORD PTR [rsp+0x78]
 1009603:	mov    r8d,0x1
 1009609:	xor    eax,eax
 100960b:	mov    QWORD PTR [rsp+0x60],rax
 1009610:	jmp    0x1009618
 1009612:	mov    r8d,0x1
 1009618:	test   si,si
 100961b:	je     0x1009627
 100961d:	cmp    si,0x1
 1009621:	jne    0x1009958
 1009627:	mov    eax,DWORD PTR [rip+0x4c77]        # 0x100e2a4
 100962d:	cmp    DWORD PTR [rip+0x4c6c],0x0        # 0x100e2a0
 1009634:	mov    ecx,0xffffff9c
 1009639:	cmovne eax,ecx
 100963c:	cmp    DWORD PTR [rip+0x4be9],0x0        # 0x100e22c
 1009643:	mov    DWORD PTR [rip+0x4c5b],eax        # 0x100e2a4
 1009649:	jne    0x1009aac
 100964f:	mov    ecx,DWORD PTR [rip+0x4bdb]        # 0x100e230
 1009655:	test   ecx,ecx
 1009657:	jne    0x1009aa6
 100965d:	mov    eax,DWORD PTR [rip+0x4c01]        # 0x100e264
 1009663:	test   eax,eax
 1009665:	jne    0x100994c
 100966b:	mov    QWORD PTR [rsp+0x60],r8
 1009670:	test   rdi,rdi
 1009673:	jne    0x100969d
 1009675:	lea    ecx,[rax+0x4]
 1009678:	call   QWORD PTR [rip+0xffffffffffff7cd2]        # 0x1001350
 100967e:	mov    rdi,rax
 1009681:	mov    QWORD PTR [rip+0x4c28],rax        # 0x100e2b0
 1009688:	mov    QWORD PTR [rsp+0x78],rax
 100968d:	xor    eax,eax
 100968f:	mov    DWORD PTR [rdi],eax
 1009691:	mov    eax,DWORD PTR [rip+0x4bcd]        # 0x100e264
 1009697:	mov    ecx,DWORD PTR [rip+0x4b93]        # 0x100e230
 100969d:	test   si,si
 10096a0:	je     0x10096ac
 10096a2:	cmp    si,0x1
 10096a6:	jne    0x100989b
 10096ac:	test   eax,eax
 10096ae:	jne    0x100994c
 10096b4:	test   ecx,ecx
 10096b6:	jne    0x1009a45
 10096bc:	cmp    si,0x1
 10096c0:	jne    0x10096d1
 10096c2:	mov    rdx,QWORD PTR [rip+0x4bc7]        # 0x100e290
 10096c9:	lea    ecx,[rax+0x3]
 10096cc:	call   0x1005660
 10096d1:	mov    rcx,QWORD PTR [rip+0x4bb8]        # 0x100e290
 10096d8:	lea    rax,[rsp+0x60]
 10096dd:	xor    esi,esi
 10096df:	mov    QWORD PTR [rsp+0x30],rax
 10096e4:	xor    r9d,r9d
 10096e7:	mov    r8w,0x3e9
 10096ec:	xor    edx,edx
 10096ee:	mov    QWORD PTR [rsp+0x28],rsi
 10096f3:	mov    WORD PTR [rsp+0x20],si
 10096f8:	call   0x100ad32
 10096fd:	mov    rcx,QWORD PTR [rsp+0x60]
 1009702:	test   ax,ax
 1009705:	cmovne rcx,rsi
 1009709:	cmp    DWORD PTR [rip+0x4b91],esi        # 0x100e2a0
 100970f:	mov    QWORD PTR [rsp+0x60],rcx
 1009714:	je     0x100972d
 1009716:	mov    eax,DWORD PTR [rip+0x4b88]        # 0x100e2a4
 100971c:	test   rcx,rcx
 100971f:	mov    ecx,0xffffff9b
 1009724:	cmovne eax,ecx
 1009727:	mov    DWORD PTR [rip+0x4b77],eax        # 0x100e2a4
 100972d:	mov    rcx,QWORD PTR [rip+0x4b5c]        # 0x100e290
 1009734:	mov    rdx,rdi
 1009737:	call   0x1002510
 100973c:	test   ax,ax
 100973f:	je     0x100993c
 1009745:	cmp    DWORD PTR [rip+0x4b19],esi        # 0x100e264
 100974b:	jne    0x100980f
 1009751:	cmp    QWORD PTR [rsp+0x60],rsi
 1009756:	je     0x10097bc
 1009758:	lea    rcx,[rip+0xffffffffffff7db9]        # 0x1001518
 100975f:	mov    QWORD PTR [rbp-0x80],rsi
 1009763:	call   0x1002b60
 1009768:	mov    rcx,QWORD PTR [rip+0x4b21]        # 0x100e290
 100976f:	lea    rdx,[rbp-0x80]
 1009773:	call   0x100ad86
 1009778:	cmp    QWORD PTR [rbp-0x80],0xffffffffffffffff
 100977d:	je     0x10097b4
 100977f:	mov    rcx,QWORD PTR [rip+0x4b0a]        # 0x100e290
 1009786:	lea    r8,[rsp+0x70]
 100978b:	mov    r9d,0xfffffffb
 1009791:	mov    edx,0x4cf
 1009796:	mov    QWORD PTR [rsp+0x70],rsi
 100979b:	mov    QWORD PTR [rsp+0x20],rsi
 10097a0:	call   0x100ae22
 10097a5:	cmp    QWORD PTR [rsp+0x70],rsi
 10097aa:	jne    0x10097b4
 10097ac:	mov    ecx,DWORD PTR [rbp-0x80]
 10097af:	call   0x1005550
 10097b4:	mov    DWORD PTR [rip+0x4a62],esi        # 0x100e21c
 10097ba:	jmp    0x1009829
 10097bc:	mov    rcx,QWORD PTR [rip+0x4acd]        # 0x100e290
 10097c3:	lea    rdx,[rbp-0x80]
 10097c7:	call   0x100ad86
 10097cc:	test   ax,ax
 10097cf:	jne    0x100980f
 10097d1:	cmp    QWORD PTR [rbp-0x80],0xffffffffffffffff
 10097d6:	je     0x100980f
 10097d8:	mov    rcx,QWORD PTR [rip+0x4ab1]        # 0x100e290
 10097df:	lea    r8,[rsp+0x70]
 10097e4:	mov    r9d,0xfffffffb
 10097ea:	mov    edx,0x4cf
 10097ef:	mov    QWORD PTR [rsp+0x70],rsi
 10097f4:	mov    QWORD PTR [rsp+0x20],rsi
 10097f9:	call   0x100ae22
 10097fe:	cmp    QWORD PTR [rsp+0x70],rsi
 1009803:	jne    0x1009829
 1009805:	mov    ecx,DWORD PTR [rbp-0x80]
 1009808:	call   0x1005550
 100980d:	jmp    0x1009829
 100980f:	cmp    DWORD PTR [rip+0x4a17],esi        # 0x100e22c
 1009815:	jne    0x1009a3a
 100981b:	mov    ecx,DWORD PTR [rip+0x4a0f]        # 0x100e230
 1009821:	test   ecx,ecx
 1009823:	jne    0x1009a34
 1009829:	cmp    WORD PTR [rip+0x56c3],0x1        # 0x100eef4
 1009831:	jle    0x1009871
 1009833:	test   r14,r14
 1009836:	jne    0x1009871
 1009838:	mov    rcx,QWORD PTR [rip+0x4a79]        # 0x100e2b8
 100983f:	mov    eax,0x1
 1009844:	lea    r8,[rip+0x5ed5]        # 0x100f720
 100984b:	lea    edx,[rax+0xa]
 100984e:	mov    r9d,0x100
 1009854:	mov    DWORD PTR [rsp+0x20],eax
 1009858:	call   0x1005f20
 100985d:	movsx  edx,WORD PTR [rip+0x5690]        # 0x100eef4
 1009864:	lea    rcx,[rip+0x5eb5]        # 0x100f720
 100986b:	call   QWORD PTR [rip+0xffffffffffff79b7]        # 0x1001228
 1009871:	cmp    DWORD PTR [rip+0x49ed],esi        # 0x100e264
 1009877:	jne    0x100989b
 1009879:	test   r14,r14
 100987c:	je     0x100989b
 100987e:	call   QWORD PTR [rip+0xffffffffffff79d4]        # 0x1001258
 1009884:	mov    DWORD PTR [rip+0x5662],eax        # 0x100eeec
 100988a:	sub    eax,DWORD PTR [rip+0x5660]        # 0x100eef0
 1009890:	mov    DWORD PTR [rip+0x5652],eax        # 0x100eee8
 1009896:	call   0x1004e50
 100989b:	mov    edi,DWORD PTR [rip+0x4993]        # 0x100e234
 10098a1:	mov    rcx,QWORD PTR [rip+0x49e8]        # 0x100e290
 10098a8:	mov    eax,0x1
 10098ad:	mov    DWORD PTR [rip+0x4981],eax        # 0x100e234
 10098b3:	call   0x100ad9e
 10098b8:	mov    DWORD PTR [rip+0x4976],edi        # 0x100e234
 10098be:	mov    rdi,QWORD PTR [rsp+0x78]
 10098c3:	movzx  esi,ax
 10098c6:	cmp    ax,0xffff
 10098ca:	jne    0x1009612
 10098d0:	mov    r8,QWORD PTR [rip+0x49b9]        # 0x100e290
 10098d7:	lea    rax,[rsp+0x58]
 10098dc:	lea    r9,[rbp+0x790]
 10098e3:	mov    QWORD PTR [rsp+0x38],rax
 10098e8:	mov    eax,0x100
 10098ed:	xor    edx,edx
 10098ef:	mov    WORD PTR [rsp+0x30],ax
 10098f4:	lea    rax,[rbp+0x1160]
 10098fb:	xor    ecx,ecx
 10098fd:	mov    QWORD PTR [rsp+0x28],rax
 1009902:	lea    rax,[rsp+0x68]
 1009907:	mov    QWORD PTR [rsp+0x20],rax
 100990c:	call   0x100ad4a
 1009911:	lea    rsi,[rbp+0x790]
 1009918:	lea    rdi,[rip+0xffffffffffff7c31]        # 0x1001550
 100991f:	mov    ecx,0x6
 1009924:	repz cmps WORD PTR ds:[rsi],WORD PTR es:[rdi]
 1009927:	je     0x1009958
 1009929:	mov    rdi,QWORD PTR [rsp+0x78]
 100992e:	mov    r8d,0x1
 1009934:	mov    esi,r8d
 1009937:	jmp    0x1009618
 100993c:	mov    rcx,QWORD PTR [rip+0x494d]        # 0x100e290
 1009943:	xor    edx,edx
 1009945:	call   0x100ad7a
 100994a:	jmp    0x100995a
 100994c:	mov    rcx,QWORD PTR [rip+0x493d]        # 0x100e290
 1009953:	call   0x100ad0e
 1009958:	xor    esi,esi
 100995a:	mov    ecx,DWORD PTR [rip+0x48d0]        # 0x100e230
 1009960:	test   ecx,ecx
 1009962:	jne    0x1009aa0
 1009968:	cmp    DWORD PTR [rip+0x4932],ecx        # 0x100e2a0
 100996e:	jne    0x1009a54
 1009974:	lea    r9d,[rcx+0x4]
 1009978:	mov    rcx,QWORD PTR [rip+0x4909]        # 0x100e288
 100997f:	lea    rax,[rbp-0x48]
 1009983:	lea    r8,[rsp+0x50]
 1009988:	mov    edi,0x1
 100998d:	mov    edx,0x4dc
 1009992:	mov    DWORD PTR [rbp-0x48],0xfffffffa
 1009999:	mov    QWORD PTR [rsp+0x20],rax
 100999e:	mov    WORD PTR [rip+0x554f],di        # 0x100eef4
 10099a5:	call   0x100adce
 10099aa:	test   ax,ax
 10099ad:	jne    0x10099b9
 10099af:	cmp    DWORD PTR [rsp+0x50],edi
 10099b3:	je     0x1009a4b
 10099b9:	mov    DWORD PTR [rip+0x48a5],esi        # 0x100e264
 10099bf:	mov    WORD PTR [rip+0x474a],di        # 0x100e110
 10099c6:	mov    esi,edi
 10099c8:	jmp    0x1008c37
 10099cd:	mov    rax,r12
 10099d0:	lea    rcx,[rip+0x5549]        # 0x100ef20
 10099d7:	nop    WORD PTR [rax+rax*1+0x0]
 10099e0:	inc    rax
 10099e3:	cmp    WORD PTR [rcx+rax*2],0x0
 10099e8:	jne    0x10099e0
 10099ea:	cmp    rax,0x4
 10099ee:	jbe    0x1009a6e
 10099f0:	cmp    WORD PTR [rip+0x5530],0x20        # 0x100ef28
 10099f8:	je     0x1009a6e
 10099fa:	jmp    0x1008c3b
 10099ff:	xor    ecx,ecx
 1009a01:	call   0x100a764
 1009a06:	int3   
 1009a07:	mov    ecx,r12d
 1009a0a:	call   0x10052f0
 1009a0f:	int3   
 1009a10:	mov    ecx,r12d
 1009a13:	call   0x10052f0
 1009a18:	int3   
 1009a19:	mov    ecx,r12d
 1009a1c:	call   0x10052f0
 1009a21:	int3   
 1009a22:	mov    ecx,r12d
 1009a25:	call   0x10052f0
 1009a2a:	int3   
 1009a2b:	mov    ecx,r12d
 1009a2e:	call   0x10052f0
 1009a33:	int3   
 1009a34:	call   0x10052f0
 1009a39:	int3   
 1009a3a:	mov    ecx,0x1776
 1009a3f:	call   0x10052f0
 1009a44:	int3   
 1009a45:	call   0x10052f0
 1009a4a:	int3   
 1009a4b:	mov    ecx,r12d
 1009a4e:	call   0x10052f0
 1009a53:	int3   
 1009a54:	mov    eax,DWORD PTR [rip+0x484a]        # 0x100e2a4
 1009a5a:	cmp    eax,0xffffff9a
 1009a5d:	je     0x1009a99
 1009a5f:	cmp    eax,0xffffff9b
 1009a62:	jne    0x1009a6e
 1009a64:	mov    ecx,0x24
 1009a69:	call   0x1005d30
 1009a6e:	call   QWORD PTR [rip+0xffffffffffff78e4]        # 0x1001358
 1009a74:	lea    rcx,[rax+0x30]
 1009a78:	call   QWORD PTR [rip+0xffffffffffff78e2]        # 0x1001360
 1009a7e:	cmp    DWORD PTR [rip+0x4767],0x0        # 0x100e1ec
 1009a85:	je     0x1009ab7
 1009a87:	cmp    DWORD PTR [rip+0x4762],0x0        # 0x100e1f0
 1009a8e:	je     0x1009ab7
 1009a90:	mov    ecx,r12d
 1009a93:	call   0x10052f0
 1009a98:	int3   
 1009a99:	mov    ecx,0x25
 1009a9e:	jmp    0x1009a69
 1009aa0:	call   0x10052f0
 1009aa5:	int3   
 1009aa6:	call   0x10052f0
 1009aab:	int3   
 1009aac:	mov    ecx,0x1776
 1009ab1:	call   0x10052f0
 1009ab6:	int3   
 1009ab7:	mov    ecx,DWORD PTR [rip+0x47e7]        # 0x100e2a4
 1009abd:	call   0x10052f0
 1009ac2:	int3   
 1009ac3:	mov    ecx,0x22
 1009ac8:	call   0x1005d30
 1009acd:	mov    ecx,r12d
 1009ad0:	call   0x10052f0
 1009ad5:	int3   
 1009ad6:	mov    ecx,0x2e
 1009adb:	call   0x1005d30
 1009ae0:	or     ecx,0xffffffff
 1009ae3:	call   0x10052f0
 1009ae8:	int3   
 1009ae9:	nop    DWORD PTR [rax]
 1009aec:	mov    ebx,0x88000081
 1009af1:	add    DWORD PTR [rax],0x818800
 1009af7:	add    BYTE PTR [rax+0x55000081],cl
 1009afd:	add    BYTE PTR [rax],0x0
 1009b00:	(bad)  
 1009b01:	ja     0x1009b03
 1009b03:	add    BYTE PTR [rsi],ah
 1009b05:	ja     0x1009b07
 1009b07:	add    BYTE PTR [rax-0x77ffff7f],cl
 1009b0d:	add    DWORD PTR [rax],0x77eb00
 1009b13:	add    BYTE PTR [rdx+0x79],ah
 1009b16:	add    BYTE PTR [rax],al
 1009b18:	mov    BYTE PTR [rcx-0x7e780000],al
 1009b1e:	add    BYTE PTR [rax],al
 1009b20:	rex.WRB add QWORD PTR [r8],0x818800
 1009b27:	add    BYTE PTR [rax+0x5000081],cl
 1009b2d:	add    BYTE PTR [rax],0x0
 1009b30:	mov    esi,DWORD PTR [rsi+0x0]
 1009b33:	add    BYTE PTR [rax],cl
 1009b35:	jnp    0x1009b37
 1009b37:	add    BYTE PTR [rdx+0x7100007b],ch
 1009b3d:	jns    0x1009b3f
 1009b3f:	add    BYTE PTR [rcx-0x80],ah
 1009b42:	add    BYTE PTR [rax],al
 1009b44:	add    BYTE PTR [rsi+0x0],dh
 1009b47:	add    BYTE PTR [rax],dl
 1009b49:	jns    0x1009b4b
 1009b4b:	add    BYTE PTR [rbx-0x46ffff83],dl
 1009b51:	jnp    0x1009b53
 1009b53:	add    BYTE PTR [rax-0x77ffff7f],cl
 1009b59:	add    DWORD PTR [rax],0x818800
 1009b5f:	add    BYTE PTR [rax-0x77ffff7f],cl
 1009b65:	add    DWORD PTR [rax],0x818800
 1009b6b:	add    BYTE PTR [rax-0x77ffff7f],cl
 1009b71:	add    DWORD PTR [rax],0x786e00
 1009b77:	add    BYTE PTR [rbx+0x79],dl
 1009b7a:	add    BYTE PTR [rax],al
 1009b7c:	ja     0x1009bfa
 1009b7e:	add    BYTE PTR [rax],al
 1009b80:	or     BYTE PTR [rsi+0x0],bh
 1009b83:	add    BYTE PTR [rcx],bh
 1009b85:	jge    0x1009b87
 1009b87:	add    BYTE PTR [rax+0x7a],bl
 1009b8a:	add    BYTE PTR [rax],al
 1009b8c:	mov    BYTE PTR [rcx+0x7ec60000],al
 1009b92:	add    BYTE PTR [rax],al
 1009b94:	or     DWORD PTR [rdi+0x0],edi
 1009b97:	add    BYTE PTR [rax-0x77ffff7f],cl
 1009b9d:	add    DWORD PTR [rax],0x7ac700
 1009ba3:	add    BYTE PTR [rbp+0x7d],al
 1009ba6:	add    BYTE PTR [rax],al
 1009ba8:	popf   
 1009ba9:	jnp    0x1009bab
 1009bab:	add    BYTE PTR [rbx+0x4300007f],cl
 1009bb1:	add    BYTE PTR [rax],0x0
 1009bb4:	adc    bh,BYTE PTR [rbx+0x0]
 1009bb7:	add    dh,cl
 1009bb9:	jl     0x1009bbb
 1009bbb:	add    BYTE PTR [rdi+0x7e],bl
 1009bbe:	add    BYTE PTR [rax],al
 1009bc0:	sbb    BYTE PTR [rdx+0x0],bh
 1009bc3:	add    BYTE PTR [rax+rax*4+0x0],cl
 1009bc7:	add    bh,cl
 1009bc9:	js     0x1009bcb
 1009bcb:	add    BYTE PTR [rdi+0x3400007d],bl
 1009bd1:	jl     0x1009bd3
 1009bd3:	add    ah,cl
 1009bd5:	int3   
 1009bd6:	int3   
 1009bd7:	int3   
 1009bd8:	int3   
 1009bd9:	int3   
 1009bda:	int3   
 1009bdb:	int3   
 1009bdc:	int3   
 1009bdd:	int3   
 1009bde:	int3   
 1009bdf:	int3   
 1009be0:	rex push rbx
 1009be2:	push   rbp
 1009be3:	push   rsi
 1009be4:	push   rdi
 1009be5:	push   r12
 1009be7:	push   r14
 1009be9:	push   r15
 1009beb:	sub    rsp,0x260
 1009bf2:	mov    rax,QWORD PTR [rip+0x4537]        # 0x100e130
 1009bf9:	xor    rax,rsp
 1009bfc:	mov    QWORD PTR [rsp+0x250],rax
 1009c04:	mov    r12,QWORD PTR [rsp+0x2c0]
 1009c0c:	mov    rsi,QWORD PTR [rsp+0x2c8]
 1009c14:	mov    rbp,QWORD PTR [rsp+0x2d0]
 1009c1c:	xor    eax,eax
 1009c1e:	mov    r15d,r9d
 1009c21:	mov    DWORD PTR [rsp+0x48],r9d
 1009c26:	mov    ebx,eax
 1009c28:	mov    edi,eax
 1009c2a:	mov    eax,DWORD PTR [rip+0x467c]        # 0x100e2ac
 1009c30:	cmp    r9d,eax
 1009c33:	mov    r14d,r8d
 1009c36:	mov    DWORD PTR [rsp+0x44],r8d
 1009c3b:	cmovg  eax,r9d
 1009c3f:	cmp    DWORD PTR [rip+0x45a7],ebx        # 0x100e1ec
 1009c45:	mov    DWORD PTR [rsp+0x40],edx
 1009c49:	mov    DWORD PTR [rip+0x465d],eax        # 0x100e2ac
 1009c4f:	lea    ecx,[rdi+0x1]
 1009c52:	je     0x1009c67
 1009c54:	mov    eax,DWORD PTR [rip+0x4596]        # 0x100e1f0
 1009c5a:	cmp    r9d,0xa
 1009c5e:	cmovg  eax,ecx
 1009c61:	mov    DWORD PTR [rip+0x4589],eax        # 0x100e1f0
 1009c67:	lea    rdx,[rip+0xffffffffffff7c62]        # 0x10018d0
 1009c6e:	mov    rcx,r12
 1009c71:	call   QWORD PTR [rip+0xffffffffffff7719]        # 0x1001390
 1009c77:	test   rax,rax
 1009c7a:	je     0x1009c82
 1009c7c:	lea    r12,[rax+0x18]
 1009c80:	jmp    0x1009cb6
 1009c82:	lea    rdx,[rip+0xffffffffffff7c67]        # 0x10018f0
 1009c89:	mov    rcx,r12
 1009c8c:	call   QWORD PTR [rip+0xffffffffffff76fe]        # 0x1001390
 1009c92:	test   rax,rax
 1009c95:	je     0x1009c9d
 1009c97:	lea    r12,[rax+0x30]
 1009c9b:	jmp    0x1009cb6
 1009c9d:	lea    rdx,[rip+0xffffffffffff7c84]        # 0x1001928
 1009ca4:	mov    rcx,r12
 1009ca7:	call   QWORD PTR [rip+0xffffffffffff76e3]        # 0x1001390
 1009cad:	test   rax,rax
 1009cb0:	je     0x1009cb6
 1009cb2:	lea    r12,[rax+0x16]
 1009cb6:	cmp    r14d,0x65
 1009cba:	jne    0x1009d0e
 1009cbc:	mov    eax,DWORD PTR [rip+0x4452]        # 0x100e114
 1009cc2:	test   eax,eax
 1009cc4:	jg     0x1009cec
 1009cc6:	jne    0x1009ce0
 1009cc8:	or     rax,0xffffffffffffffff
 1009ccc:	cmp    WORD PTR [rip+0x4551],bx        # 0x100e224
 1009cd3:	mov    ecx,0xa
 1009cd8:	cmovge eax,ecx
 1009cdb:	cmp    r15d,eax
 1009cde:	jg     0x1009cec
 1009ce0:	call   QWORD PTR [rip+0xffffffffffff7672]        # 0x1001358
 1009ce6:	add    rax,0x30
 1009cea:	jmp    0x1009cf6
 1009cec:	call   QWORD PTR [rip+0xffffffffffff7666]        # 0x1001358
 1009cf2:	add    rax,0x60
 1009cf6:	lea    rdx,[rip+0xffffffffffff7897]        # 0x1001594
 1009cfd:	mov    r8,r12
 1009d00:	mov    rcx,rax
 1009d03:	call   QWORD PTR [rip+0xffffffffffff7517]        # 0x1001220
 1009d09:	jmp    0x100a364
 1009d0e:	cmp    DWORD PTR [rip+0x4518],ebx        # 0x100e22c
 1009d14:	jne    0x100a364
 1009d1a:	mov    edx,DWORD PTR [rsp+0x40]
 1009d1e:	or     r14,0xffffffffffffffff
 1009d22:	mov    QWORD PTR [rsp+0x2a0],r13
 1009d2a:	lea    r13d,[r14+0xb]
 1009d2e:	cmp    edx,0x1776
 1009d34:	jne    0x1009d45
 1009d36:	mov    r8d,0x1
 1009d3c:	mov    DWORD PTR [rip+0x44e9],r8d        # 0x100e22c
 1009d43:	jmp    0x1009d6b
 1009d45:	cmp    edx,0x1645
 1009d4b:	je     0x100a32a
 1009d51:	cmp    edx,0x1647
 1009d57:	je     0x100a07b
 1009d5d:	test   edx,edx
 1009d5f:	jle    0x100a07b
 1009d65:	mov    r8d,0x1
 1009d6b:	movzx  ecx,WORD PTR [rip+0x44b2]        # 0x100e224
 1009d72:	mov    eax,r14d
 1009d75:	test   cx,cx
 1009d78:	cmovns eax,r13d
 1009d7c:	cmp    r15d,eax
 1009d7f:	jle    0x100a07b
 1009d85:	cmp    DWORD PTR [rip+0x449d],ebx        # 0x100e228
 1009d8b:	je     0x1009da3
 1009d8d:	cmp    cx,0xffff
 1009d91:	jle    0x1009d98
 1009d93:	movsx  eax,cx
 1009d96:	jmp    0x1009d9a
 1009d98:	xor    eax,eax
 1009d9a:	cmp    r15d,eax
 1009d9d:	jl     0x100a07b
 1009da3:	cmp    DWORD PTR [rip+0x443f],ebx        # 0x100e1e8
 1009da9:	je     0x1009df0
 1009dab:	mov    rcx,QWORD PTR [rip+0x4506]        # 0x100e2b8
 1009db2:	mov    DWORD PTR [rsp+0x20],r8d
 1009db7:	lea    r8,[rip+0x5962]        # 0x100f720
 1009dbe:	mov    r9d,0x100
 1009dc4:	mov    edx,0xc
 1009dc9:	call   0x1005f20
 1009dce:	mov    r11d,DWORD PTR [rip+0x433f]        # 0x100e114
 1009dd5:	test   r11d,r11d
 1009dd8:	jg     0x100a04d
 1009dde:	jne    0x100a041
 1009de4:	cmp    WORD PTR [rip+0x4439],bx        # 0x100e224
 1009deb:	jmp    0x100a035
 1009df0:	test   rsi,rsi
 1009df3:	je     0x1009e09
 1009df5:	mov    rdi,r14
 1009df8:	nop    DWORD PTR [rax+rax*1+0x0]
 1009e00:	inc    rdi
 1009e03:	cmp    WORD PTR [rsi+rdi*2],bx
 1009e07:	jne    0x1009e00
 1009e09:	test   rbp,rbp
 1009e0c:	je     0x1009e1c
 1009e0e:	mov    rbx,r14
 1009e11:	inc    rbx
 1009e14:	cmp    WORD PTR [rbp+rbx*2+0x0],0x0
 1009e1a:	jne    0x1009e11
 1009e1c:	mov    rcx,QWORD PTR [rip+0x4495]        # 0x100e2b8
 1009e23:	mov    DWORD PTR [rsp+0x20],r8d
 1009e28:	mov    r9d,0x100
 1009e2e:	lea    r8,[rip+0x58eb]        # 0x100f720
 1009e35:	test   rdi,rdi
 1009e38:	je     0x1009f32
 1009e3e:	test   rbx,rbx
 1009e41:	je     0x1009ebd
 1009e43:	mov    edx,0x2a
 1009e48:	call   0x1005f20
 1009e4d:	mov    r11d,DWORD PTR [rip+0x42c0]        # 0x100e114
 1009e54:	test   r11d,r11d
 1009e57:	jg     0x1009e7b
 1009e59:	jne    0x1009e6f
 1009e5b:	cmp    WORD PTR [rip+0x43c1],0x0        # 0x100e224
 1009e63:	mov    eax,r14d
 1009e66:	cmovge eax,r13d
 1009e6a:	cmp    r15d,eax
 1009e6d:	jg     0x1009e7b
 1009e6f:	call   QWORD PTR [rip+0xffffffffffff74e3]        # 0x1001358
 1009e75:	lea    rcx,[rax+0x30]
 1009e79:	jmp    0x1009e85
 1009e7b:	call   QWORD PTR [rip+0xffffffffffff74d7]        # 0x1001358
 1009e81:	lea    rcx,[rax+0x60]
 1009e85:	movzx  eax,WORD PTR [rsp+0x2d8]
 1009e8d:	mov    edx,DWORD PTR [rsp+0x44]
 1009e91:	mov    r8d,DWORD PTR [rsp+0x40]
 1009e96:	mov    DWORD PTR [rsp+0x38],eax
 1009e9a:	mov    QWORD PTR [rsp+0x30],rbp
 1009e9f:	mov    QWORD PTR [rsp+0x28],rsi
 1009ea4:	mov    DWORD PTR [rsp+0x20],edx
 1009ea8:	lea    rdx,[rip+0x5871]        # 0x100f720
 1009eaf:	mov    r9d,r15d
 1009eb2:	call   QWORD PTR [rip+0xffffffffffff7368]        # 0x1001220
 1009eb8:	jmp    0x100a077
 1009ebd:	mov    edx,0x2c
 1009ec2:	call   0x1005f20
 1009ec7:	mov    r11d,DWORD PTR [rip+0x4246]        # 0x100e114
 1009ece:	test   r11d,r11d
 1009ed1:	jg     0x1009ef5
 1009ed3:	jne    0x1009ee9
 1009ed5:	cmp    WORD PTR [rip+0x4347],0x0        # 0x100e224
 1009edd:	mov    eax,r14d
 1009ee0:	cmovge eax,r13d
 1009ee4:	cmp    r15d,eax
 1009ee7:	jg     0x1009ef5
 1009ee9:	call   QWORD PTR [rip+0xffffffffffff7469]        # 0x1001358
 1009eef:	lea    rcx,[rax+0x30]
 1009ef3:	jmp    0x1009eff
 1009ef5:	call   QWORD PTR [rip+0xffffffffffff745d]        # 0x1001358
 1009efb:	lea    rcx,[rax+0x60]
 1009eff:	movzx  eax,WORD PTR [rsp+0x2d8]
 1009f07:	mov    DWORD PTR [rsp+0x30],eax
 1009f0b:	mov    QWORD PTR [rsp+0x28],rsi
 1009f10:	mov    edx,DWORD PTR [rsp+0x44]
 1009f14:	mov    r8d,DWORD PTR [rsp+0x40]
 1009f19:	mov    r9d,r15d
 1009f1c:	mov    DWORD PTR [rsp+0x20],edx
 1009f20:	lea    rdx,[rip+0x57f9]        # 0x100f720
 1009f27:	call   QWORD PTR [rip+0xffffffffffff72f3]        # 0x1001220
 1009f2d:	jmp    0x100a077
 1009f32:	test   rbx,rbx
 1009f35:	je     0x1009fa0
 1009f37:	mov    edx,0x2b
 1009f3c:	call   0x1005f20
 1009f41:	mov    r11d,DWORD PTR [rip+0x41cc]        # 0x100e114
 1009f48:	test   r11d,r11d
 1009f4b:	jg     0x1009f80
 1009f4d:	jne    0x1009f63
 1009f4f:	cmp    WORD PTR [rip+0x42cd],0x0        # 0x100e224
 1009f57:	mov    eax,r14d
 1009f5a:	cmovge eax,r13d
 1009f5e:	cmp    r15d,eax
 1009f61:	jg     0x1009f80
 1009f63:	call   QWORD PTR [rip+0xffffffffffff73ef]        # 0x1001358
 1009f69:	lea    rcx,[rax+0x30]
 1009f6d:	movzx  eax,WORD PTR [rsp+0x2d8]
 1009f75:	mov    DWORD PTR [rsp+0x30],eax
 1009f79:	mov    QWORD PTR [rsp+0x28],rbp
 1009f7e:	jmp    0x1009f10
 1009f80:	call   QWORD PTR [rip+0xffffffffffff73d2]        # 0x1001358
 1009f86:	lea    rcx,[rax+0x60]
 1009f8a:	movzx  eax,WORD PTR [rsp+0x2d8]
 1009f92:	mov    DWORD PTR [rsp+0x30],eax
 1009f96:	mov    QWORD PTR [rsp+0x28],rbp
 1009f9b:	jmp    0x1009f10
 1009fa0:	movzx  ebx,WORD PTR [rsp+0x2d8]
 1009fa8:	test   bx,bx
 1009fab:	je     0x100a015
 1009fad:	mov    edx,0x2d
 1009fb2:	call   0x1005f20
 1009fb7:	mov    r11d,DWORD PTR [rip+0x4156]        # 0x100e114
 1009fbe:	test   r11d,r11d
 1009fc1:	jg     0x1009fe5
 1009fc3:	jne    0x1009fd9
 1009fc5:	cmp    WORD PTR [rip+0x4257],0x0        # 0x100e224
 1009fcd:	mov    eax,r14d
 1009fd0:	cmovge eax,r13d
 1009fd4:	cmp    r15d,eax
 1009fd7:	jg     0x1009fe5
 1009fd9:	call   QWORD PTR [rip+0xffffffffffff7379]        # 0x1001358
 1009fdf:	lea    rcx,[rax+0x30]
 1009fe3:	jmp    0x1009fef
 1009fe5:	call   QWORD PTR [rip+0xffffffffffff736d]        # 0x1001358
 1009feb:	lea    rcx,[rax+0x60]
 1009fef:	mov    edx,DWORD PTR [rsp+0x44]
 1009ff3:	mov    r8d,DWORD PTR [rsp+0x40]
 1009ff8:	movzx  eax,bx
 1009ffb:	mov    DWORD PTR [rsp+0x28],eax
 1009fff:	mov    DWORD PTR [rsp+0x20],edx
 100a003:	lea    rdx,[rip+0x5716]        # 0x100f720
 100a00a:	mov    r9d,r15d
 100a00d:	call   QWORD PTR [rip+0xffffffffffff720d]        # 0x1001220
 100a013:	jmp    0x100a077
 100a015:	mov    edx,0xc
 100a01a:	call   0x1005f20
 100a01f:	mov    r11d,DWORD PTR [rip+0x40ee]        # 0x100e114
 100a026:	test   r11d,r11d
 100a029:	jg     0x100a04d
 100a02b:	jne    0x100a041
 100a02d:	cmp    WORD PTR [rip+0x41ef],0x0        # 0x100e224
 100a035:	mov    eax,r14d
 100a038:	cmovge eax,r13d
 100a03c:	cmp    r15d,eax
 100a03f:	jg     0x100a04d
 100a041:	call   QWORD PTR [rip+0xffffffffffff7311]        # 0x1001358
 100a047:	add    rax,0x30
 100a04b:	jmp    0x100a057
 100a04d:	call   QWORD PTR [rip+0xffffffffffff7305]        # 0x1001358
 100a053:	add    rax,0x60
 100a057:	mov    edx,DWORD PTR [rsp+0x44]
 100a05b:	mov    r8d,DWORD PTR [rsp+0x40]
 100a060:	mov    r9d,r15d
 100a063:	mov    DWORD PTR [rsp+0x20],edx
 100a067:	lea    rdx,[rip+0x56b2]        # 0x100f720
 100a06e:	mov    rcx,rax
 100a071:	call   QWORD PTR [rip+0xffffffffffff71a9]        # 0x1001220
 100a077:	mov    edx,DWORD PTR [rsp+0x40]
 100a07b:	cmp    edx,0x1645
 100a081:	je     0x100a32a
 100a087:	cmp    edx,0x1647
 100a08d:	je     0x100a32a
 100a093:	test   r12,r12
 100a096:	je     0x100a32a
 100a09c:	movsx  eax,WORD PTR [rip+0x4181]        # 0x100e224
 100a0a3:	cmp    r15d,eax
 100a0a6:	jl     0x100a32a
 100a0ac:	cmp    DWORD PTR [rip+0x4189],0x0        # 0x100e23c
 100a0b3:	jne    0x100a0be
 100a0b5:	cmp    DWORD PTR [rip+0x4184],0x0        # 0x100e240
 100a0bc:	jne    0x100a0d5
 100a0be:	mov    eax,DWORD PTR [rip+0x403c]        # 0x100e100
 100a0c4:	mov    r13d,0xff
 100a0ca:	cmp    eax,r13d
 100a0cd:	jg     0x100a0db
 100a0cf:	lea    r13d,[rax-0x1]
 100a0d3:	jmp    0x100a0db
 100a0d5:	mov    r13d,0x46
 100a0db:	mov    r15,r14
 100a0de:	xchg   ax,ax
 100a0e0:	inc    r15
 100a0e3:	cmp    WORD PTR [r12+r15*2],0x0
 100a0e9:	jne    0x100a0e0
 100a0eb:	xor    eax,eax
 100a0ed:	movzx  ebx,ax
 100a0f0:	cmp    ax,r15w
 100a0f4:	jge    0x100a325
 100a0fa:	nop    WORD PTR [rax+rax*1+0x0]
 100a100:	movsx  r14,bx
 100a104:	mov    edx,0xa
 100a109:	lea    rsi,[r14+r14*1]
 100a10d:	lea    rbp,[rsi+r12*1]
 100a111:	mov    rcx,rbp
 100a114:	call   QWORD PTR [rip+0xffffffffffff7266]        # 0x1001380
 100a11a:	mov    rdi,rax
 100a11d:	test   rax,rax
 100a120:	je     0x100a136
 100a122:	sub    rdi,rsi
 100a125:	sub    rdi,r12
 100a128:	sar    rdi,1
 100a12b:	inc    di
 100a12e:	movsx  ecx,di
 100a131:	cmp    ecx,r13d
 100a134:	jle    0x100a13a
 100a136:	movzx  edi,r13w
 100a13a:	movsx  rsi,di
 100a13e:	lea    rcx,[rsp+0x50]
 100a143:	mov    r8,rbp
 100a146:	mov    r9,rsi
 100a149:	mov    edx,0x100
 100a14e:	call   QWORD PTR [rip+0xffffffffffff71e4]        # 0x1001338
 100a154:	lea    r11,[rsi+rsi*1]
 100a158:	cmp    r11,0x200
 100a15f:	jae    0x100a3a4
 100a165:	xor    edx,edx
 100a167:	movsx  ebp,di
 100a16a:	mov    WORD PTR [rsp+r11*1+0x50],dx
 100a170:	cmp    ebp,r13d
 100a173:	jne    0x100a1c7
 100a175:	movsx  ecx,bx
 100a178:	movsx  eax,r15w
 100a17c:	add    ecx,ebp
 100a17e:	cmp    ecx,eax
 100a180:	jge    0x100a1c7
 100a182:	lea    rax,[rsi+r14*1]
 100a186:	cmp    WORD PTR [r12+rax*2],0x20
 100a18c:	je     0x100a1c7
 100a18e:	movzx  ecx,di
 100a191:	test   cx,cx
 100a194:	jle    0x100a1c7
 100a196:	dec    cx
 100a199:	movsx  rax,cx
 100a19d:	cmp    WORD PTR [rsp+rax*2+0x50],0x20
 100a1a3:	jne    0x100a191
 100a1a5:	test   cx,cx
 100a1a8:	jle    0x100a1c7
 100a1aa:	inc    cx
 100a1ad:	movsx  rax,cx
 100a1b1:	add    rax,rax
 100a1b4:	cmp    rax,0x200
 100a1ba:	jae    0x100a394
 100a1c0:	mov    WORD PTR [rsp+rax*1+0x50],dx
 100a1c5:	jmp    0x100a1ca
 100a1c7:	movzx  ecx,di
 100a1ca:	add    bx,cx
 100a1cd:	or     r14,0xffffffffffffffff
 100a1d1:	lea    rax,[rsp+0x50]
 100a1d6:	mov    rcx,r14
 100a1d9:	nop    DWORD PTR [rax+0x0]
 100a1e0:	inc    rcx
 100a1e3:	cmp    WORD PTR [rax+rcx*2],dx
 100a1e7:	jne    0x100a1e0
 100a1e9:	nop    DWORD PTR [rax+0x0]
 100a1f0:	test   cx,cx
 100a1f3:	jle    0x100a204
 100a1f5:	dec    cx
 100a1f8:	movsx  rax,cx
 100a1fc:	cmp    WORD PTR [rsp+rax*2+0x50],0x20
 100a202:	je     0x100a1f0
 100a204:	movsx  eax,cx
 100a207:	inc    eax
 100a209:	movsxd rcx,eax
 100a20c:	add    rcx,rcx
 100a20f:	cmp    rcx,0x200
 100a216:	jae    0x100a39c
 100a21c:	mov    eax,DWORD PTR [rip+0x3ef2]        # 0x100e114
 100a222:	mov    esi,DWORD PTR [rsp+0x48]
 100a226:	mov    WORD PTR [rsp+rcx*1+0x50],dx
 100a22b:	test   eax,eax
 100a22d:	jg     0x100a253
 100a22f:	jne    0x100a247
 100a231:	cmp    WORD PTR [rip+0x3fec],dx        # 0x100e224
 100a238:	mov    eax,r14d
 100a23b:	mov    ecx,0xa
 100a240:	cmovge eax,ecx
 100a243:	cmp    esi,eax
 100a245:	jg     0x100a253
 100a247:	call   QWORD PTR [rip+0xffffffffffff710b]        # 0x1001358
 100a24d:	lea    rdi,[rax+0x30]
 100a251:	jmp    0x100a25d
 100a253:	call   QWORD PTR [rip+0xffffffffffff70ff]        # 0x1001358
 100a259:	lea    rdi,[rax+0x60]
 100a25d:	call   QWORD PTR [rip+0xffffffffffff70f5]        # 0x1001358
 100a263:	add    rax,0x30
 100a267:	cmp    rdi,rax
 100a26a:	jne    0x100a278
 100a26c:	lea    rcx,[rsp+0x50]
 100a271:	call   0x1002b60
 100a276:	jmp    0x100a2b7
 100a278:	call   QWORD PTR [rip+0xffffffffffff70da]        # 0x1001358
 100a27e:	add    rax,0x60
 100a282:	cmp    rdi,rax
 100a285:	jne    0x100a2b7
 100a287:	xor    eax,eax
 100a289:	mov    ecx,0xfffffff4
 100a28e:	mov    DWORD PTR [rsp+0x4c],eax
 100a292:	call   QWORD PTR [rip+0xffffffffffff6de0]        # 0x1001078
 100a298:	lea    rdx,[rsp+0x50]
 100a29d:	mov    r9,rax
 100a2a0:	lea    rax,[rsp+0x4c]
 100a2a5:	mov    r8d,r14d
 100a2a8:	mov    ecx,0x1
 100a2ad:	mov    QWORD PTR [rsp+0x20],rax
 100a2b2:	call   0x1002c00
 100a2b7:	cmp    ebp,r13d
 100a2ba:	jne    0x100a304
 100a2bc:	mov    eax,DWORD PTR [rip+0x3e52]        # 0x100e114
 100a2c2:	test   eax,eax
 100a2c4:	jg     0x100a2eb
 100a2c6:	jne    0x100a2df
 100a2c8:	cmp    WORD PTR [rip+0x3f54],0x0        # 0x100e224
 100a2d0:	mov    eax,r14d
 100a2d3:	mov    ecx,0xa
 100a2d8:	cmovge eax,ecx
 100a2db:	cmp    esi,eax
 100a2dd:	jg     0x100a2eb
 100a2df:	call   QWORD PTR [rip+0xffffffffffff7073]        # 0x1001358
 100a2e5:	add    rax,0x30
 100a2e9:	jmp    0x100a2f5
 100a2eb:	call   QWORD PTR [rip+0xffffffffffff7067]        # 0x1001358
 100a2f1:	add    rax,0x60
 100a2f5:	lea    rdx,[rip+0xffffffffffff721c]        # 0x1001518
 100a2fc:	mov    rcx,rax
 100a2ff:	call   0x1006840
 100a304:	cmp    bx,r15w
 100a308:	jge    0x100a325
 100a30a:	nop    WORD PTR [rax+rax*1+0x0]
 100a310:	movsx  rax,bx
 100a314:	cmp    WORD PTR [r12+rax*2],0x20
 100a31a:	jne    0x100a388
 100a31c:	inc    bx
 100a31f:	cmp    bx,r15w
 100a323:	jl     0x100a310
 100a325:	mov    r15d,DWORD PTR [rsp+0x48]
 100a32a:	mov    r12d,DWORD PTR [rsp+0x40]
 100a32f:	test   r12d,r12d
 100a332:	cmovne r14d,r12d
 100a336:	cmp    DWORD PTR [rsp+0x44],0x7f
 100a33b:	mov    DWORD PTR [rip+0x3eda],r14d        # 0x100e21c
 100a342:	jne    0x100a35c
 100a344:	mov    DWORD PTR [rip+0x3ee5],r12d        # 0x100e230
 100a34b:	mov    DWORD PTR [rip+0x3eef],0x7f        # 0x100e244
 100a355:	mov    DWORD PTR [rip+0x3eec],r15d        # 0x100e248
 100a35c:	mov    r13,QWORD PTR [rsp+0x2a0]
 100a364:	xor    eax,eax
 100a366:	mov    rcx,QWORD PTR [rsp+0x250]
 100a36e:	xor    rcx,rsp
 100a371:	call   0x100a730
 100a376:	add    rsp,0x260
 100a37d:	pop    r15
 100a37f:	pop    r14
 100a381:	pop    r12
 100a383:	pop    rdi
 100a384:	pop    rsi
 100a385:	pop    rbp
 100a386:	pop    rbx
 100a387:	ret    
 100a388:	cmp    bx,r15w
 100a38c:	jl     0x100a100
 100a392:	jmp    0x100a325
 100a394:	xor    ecx,ecx
 100a396:	call   0x100a764
 100a39b:	int3   
 100a39c:	xor    ecx,ecx
 100a39e:	call   0x100a764
 100a3a3:	int3   
 100a3a4:	xor    ecx,ecx
 100a3a6:	call   0x100a764
 100a3ab:	int3   
 100a3ac:	int3   
 100a3ad:	int3   
 100a3ae:	int3   
 100a3af:	int3   
 100a3b0:	int3   
 100a3b1:	int3   
 100a3b2:	int3   
 100a3b3:	int3   
 100a3b4:	sub    rsp,0x38
 100a3b8:	lea    rcx,[rip+0x6ed]        # 0x100aaac
 100a3bf:	call   0x100aa4c
 100a3c4:	mov    r11d,DWORD PTR [rip+0x4499]        # 0x100e864
 100a3cb:	mov    r9d,DWORD PTR [rip+0x448e]        # 0x100e860
 100a3d2:	lea    rax,[rip+0x3f03]        # 0x100e2dc
 100a3d9:	lea    r8,[rip+0x3ee8]        # 0x100e2c8
 100a3e0:	lea    rdx,[rip+0x3ee9]        # 0x100e2d0
 100a3e7:	lea    rcx,[rip+0x3ed2]        # 0x100e2c0
 100a3ee:	mov    DWORD PTR [rip+0x3ee7],r11d        # 0x100e2dc
 100a3f5:	mov    QWORD PTR [rsp+0x20],rax
 100a3fa:	call   QWORD PTR [rip+0xffffffffffff6e88]        # 0x1001288
 100a400:	mov    DWORD PTR [rip+0x3ed2],eax        # 0x100e2d8
 100a406:	test   eax,eax
 100a408:	jns    0x100a414
 100a40a:	mov    ecx,0x8
 100a40f:	call   0x100a986
 100a414:	add    rsp,0x38
 100a418:	ret    
 100a419:	int3   
 100a41a:	int3   
 100a41b:	int3   
 100a41c:	int3   
 100a41d:	int3   
 100a41e:	int3   
 100a41f:	int3   
 100a420:	mov    QWORD PTR [rsp+0x8],rbx
 100a425:	push   rdi
 100a426:	sub    rsp,0x20
 100a42a:	mov    rax,QWORD PTR gs:0x30
 100a433:	mov    rbx,QWORD PTR [rax+0x8]
 100a437:	xor    edi,edi
 100a439:	xor    eax,eax
 100a43b:	lock cmpxchg QWORD PTR [rip+0x5b84],rbx        # 0x100ffc8
 100a444:	je     0x100a461
 100a446:	cmp    rax,rbx
 100a449:	jne    0x100a454
 100a44b:	mov    ebx,0x1
 100a450:	mov    edi,ebx
 100a452:	jmp    0x100a466
 100a454:	mov    ecx,0x3e8
 100a459:	call   QWORD PTR [rip+0xffffffffffff6c09]        # 0x1001068
 100a45f:	jmp    0x100a439
 100a461:	mov    ebx,0x1
 100a466:	mov    eax,DWORD PTR [rip+0x5b58]        # 0x100ffc4
 100a46c:	cmp    eax,ebx
 100a46e:	jne    0x100a47c
 100a470:	mov    ecx,0x1f
 100a475:	call   0x100a986
 100a47a:	jmp    0x100a4b3
 100a47c:	mov    eax,DWORD PTR [rip+0x5b42]        # 0x100ffc4
 100a482:	test   eax,eax
 100a484:	jne    0x100a4ad
 100a486:	mov    DWORD PTR [rip+0x5b38],ebx        # 0x100ffc4
 100a48c:	lea    rdx,[rip+0xffffffffffff704d]        # 0x10014e0
 100a493:	lea    rcx,[rip+0xffffffffffff702e]        # 0x10014c8
 100a49a:	call   0x100abf4
 100a49f:	test   eax,eax
 100a4a1:	je     0x100a4b3
 100a4a3:	mov    eax,0xff
 100a4a8:	jmp    0x100a595
 100a4ad:	mov    DWORD PTR [rip+0x3e31],ebx        # 0x100e2e4
 100a4b3:	mov    eax,DWORD PTR [rip+0x5b0b]        # 0x100ffc4
 100a4b9:	cmp    eax,ebx
 100a4bb:	jne    0x100a4da
 100a4bd:	lea    rdx,[rip+0xffffffffffff6ffc]        # 0x10014c0
 100a4c4:	lea    rcx,[rip+0xffffffffffff6fe5]        # 0x10014b0
 100a4cb:	call   0x100abe8
 100a4d0:	mov    DWORD PTR [rip+0x5aea],0x2        # 0x100ffc4
 100a4da:	test   edi,edi
 100a4dc:	jne    0x100a4e7
 100a4de:	xor    eax,eax
 100a4e0:	xchg   QWORD PTR [rip+0x5ae1],rax        # 0x100ffc8
 100a4e7:	cmp    QWORD PTR [rip+0x5af1],0x0        # 0x100ffe0
 100a4ef:	je     0x100a510
 100a4f1:	lea    rcx,[rip+0x5ae8]        # 0x100ffe0
 100a4f8:	call   0x100aba0
 100a4fd:	test   eax,eax
 100a4ff:	je     0x100a510
 100a501:	xor    r8d,r8d
 100a504:	lea    edx,[r8+0x2]
 100a508:	xor    ecx,ecx
 100a50a:	call   QWORD PTR [rip+0x5ad0]        # 0x100ffe0
 100a510:	mov    rcx,QWORD PTR [rip+0xffffffffffff6da1]        # 0x10012b8
 100a517:	mov    rax,QWORD PTR [rip+0x3daa]        # 0x100e2c8
 100a51e:	mov    QWORD PTR [rcx],rax
 100a521:	mov    r8,QWORD PTR [rip+0x3da0]        # 0x100e2c8
 100a528:	mov    rdx,QWORD PTR [rip+0x3da1]        # 0x100e2d0
 100a52f:	mov    ecx,DWORD PTR [rip+0x3d8b]        # 0x100e2c0
 100a535:	call   0x1007230
 100a53a:	mov    DWORD PTR [rip+0x3da0],eax        # 0x100e2e0
 100a540:	cmp    DWORD PTR [rip+0x3d7d],0x0        # 0x100e2c4
 100a547:	jne    0x100a551
 100a549:	mov    ecx,eax
 100a54b:	call   QWORD PTR [rip+0xffffffffffff6d5f]        # 0x10012b0
 100a551:	cmp    DWORD PTR [rip+0x3d8c],0x0        # 0x100e2e4
 100a558:	jne    0x100a566
 100a55a:	call   QWORD PTR [rip+0xffffffffffff6d48]        # 0x10012a8
 100a560:	mov    eax,DWORD PTR [rip+0x3d7a]        # 0x100e2e0
 100a566:	jmp    0x100a595
 100a568:	mov    DWORD PTR [rip+0x3d72],eax        # 0x100e2e0
 100a56e:	cmp    DWORD PTR [rip+0x3d4f],0x0        # 0x100e2c4
 100a575:	jne    0x100a580
 100a577:	mov    ecx,eax
 100a579:	call   QWORD PTR [rip+0xffffffffffff6d21]        # 0x10012a0
 100a57f:	int3   
 100a580:	cmp    DWORD PTR [rip+0x3d5d],0x0        # 0x100e2e4
 100a587:	jne    0x100a595
 100a589:	call   QWORD PTR [rip+0xffffffffffff6d19]        # 0x10012a8
 100a58f:	mov    eax,DWORD PTR [rip+0x3d4b]        # 0x100e2e0
 100a595:	mov    rbx,QWORD PTR [rsp+0x30]
 100a59a:	add    rsp,0x20
 100a59e:	pop    rdi
 100a59f:	ret    
 100a5a0:	int3   
 100a5a1:	int3   
 100a5a2:	int3   
 100a5a3:	int3   
 100a5a4:	int3   
 100a5a5:	int3   
 100a5a6:	int3   
 100a5a7:	int3   
 100a5a8:	sub    rsp,0x28
 100a5ac:	mov    eax,0x5a4d
 100a5b1:	cmp    WORD PTR [rip+0xffffffffffff5a48],ax        # 0x1000000
 100a5b8:	je     0x100a5be
 100a5ba:	xor    ecx,ecx
 100a5bc:	jmp    0x100a5f6
 100a5be:	movsxd rax,DWORD PTR [rip+0xffffffffffff5a77]        # 0x100003c
 100a5c5:	lea    rcx,[rip+0xffffffffffff5a34]        # 0x1000000
 100a5cc:	add    rax,rcx
 100a5cf:	cmp    DWORD PTR [rax],0x4550
 100a5d5:	jne    0x100a5ba
 100a5d7:	mov    ecx,0x20b
 100a5dc:	cmp    WORD PTR [rax+0x18],cx
 100a5e0:	jne    0x100a5ba
 100a5e2:	xor    ecx,ecx
 100a5e4:	cmp    DWORD PTR [rax+0x84],0xe
 100a5eb:	jbe    0x100a5f6
 100a5ed:	cmp    DWORD PTR [rax+0xf8],ecx
 100a5f3:	setne  cl
 100a5f6:	mov    DWORD PTR [rip+0x3cc8],ecx        # 0x100e2c4
 100a5fc:	mov    ecx,0x1
 100a601:	call   QWORD PTR [rip+0xffffffffffff6ce9]        # 0x10012f0
 100a607:	or     rcx,0xffffffffffffffff
 100a60b:	call   QWORD PTR [rip+0xffffffffffff6b77]        # 0x1001188
 100a611:	mov    rcx,QWORD PTR [rip+0xffffffffffff6cd0]        # 0x10012e8
 100a618:	mov    QWORD PTR [rip+0x59b1],rax        # 0x100ffd0
 100a61f:	mov    QWORD PTR [rip+0x59b2],rax        # 0x100ffd8
 100a626:	mov    eax,DWORD PTR [rip+0x4240]        # 0x100e86c
 100a62c:	mov    DWORD PTR [rcx],eax
 100a62e:	mov    rdx,QWORD PTR [rip+0xffffffffffff6cab]        # 0x10012e0
 100a635:	mov    eax,DWORD PTR [rip+0x422d]        # 0x100e868
 100a63b:	mov    DWORD PTR [rdx],eax
 100a63d:	call   0x100aa6c
 100a642:	call   0x100ac0c
 100a647:	cmp    DWORD PTR [rip+0x3b02],0x0        # 0x100e150
 100a64e:	jne    0x100a65d
 100a650:	lea    rcx,[rip+0x5a9]        # 0x100ac00
 100a657:	call   QWORD PTR [rip+0xffffffffffff6c7b]        # 0x10012d8
 100a65d:	cmp    DWORD PTR [rip+0x3ae8],0xffffffff        # 0x100e14c
 100a664:	jne    0x100a66f
 100a666:	or     ecx,0xffffffff
 100a669:	call   QWORD PTR [rip+0xffffffffffff6c61]        # 0x10012d0
 100a66f:	xor    eax,eax
 100a671:	add    rsp,0x28
 100a675:	ret    
 100a676:	int3   
 100a677:	int3   
 100a678:	int3   
 100a679:	int3   
 100a67a:	int3   
 100a67b:	int3   
 100a67c:	sub    rsp,0x28
 100a680:	call   0x100ac18
 100a685:	add    rsp,0x28
 100a689:	jmp    0x100a420
 100a68e:	int3   
 100a68f:	int3   
 100a690:	int3   
 100a691:	int3   
 100a692:	int3   
 100a693:	int3   
 100a694:	rex push rbx
 100a696:	sub    rsp,0x20
 100a69a:	mov    r11d,DWORD PTR [r8]
 100a69d:	mov    rbx,rdx
 100a6a0:	mov    r9,rcx
 100a6a3:	and    r11d,0xfffffff8
 100a6a7:	test   BYTE PTR [r8],0x4
 100a6ab:	mov    r10,rcx
 100a6ae:	je     0x100a6c3
 100a6b0:	mov    eax,DWORD PTR [r8+0x8]
 100a6b4:	movsxd r10,DWORD PTR [r8+0x4]
 100a6b8:	neg    eax
 100a6ba:	add    r10,rcx
 100a6bd:	movsxd rcx,eax
 100a6c0:	and    r10,rcx
 100a6c3:	movsxd rax,r11d
 100a6c6:	mov    rdx,QWORD PTR [rax+r10*1]
 100a6ca:	mov    rax,QWORD PTR [rbx+0x10]
 100a6ce:	mov    ecx,DWORD PTR [rax+0x8]
 100a6d1:	add    rcx,QWORD PTR [rbx+0x8]
 100a6d5:	test   BYTE PTR [rcx+0x3],0xf
 100a6d9:	je     0x100a6e7
 100a6db:	movzx  eax,BYTE PTR [rcx+0x3]
 100a6df:	and    eax,0xfffffff0
 100a6e2:	cdqe   
 100a6e4:	add    r9,rax
 100a6e7:	xor    r9,rdx
 100a6ea:	mov    rcx,r9
 100a6ed:	add    rsp,0x20
 100a6f1:	pop    rbx
 100a6f2:	jmp    0x100a730
 100a6f7:	int3   
 100a6f8:	int3   
 100a6f9:	int3   
 100a6fa:	int3   
 100a6fb:	int3   
 100a6fc:	int3   
 100a6fd:	int3   
 100a6fe:	int3   
 100a6ff:	int3   
 100a700:	sub    rsp,0x28
 100a704:	mov    r8,QWORD PTR [r9+0x38]
 100a708:	mov    rcx,rdx
 100a70b:	mov    rdx,r9
 100a70e:	call   0x100a694
 100a713:	mov    eax,0x1
 100a718:	add    rsp,0x28
 100a71c:	ret    
 100a71d:	int3   
 100a71e:	int3   
 100a71f:	int3   
 100a720:	int3   
 100a721:	int3   
 100a722:	int3   
 100a723:	int3   
 100a724:	int3   
 100a725:	int3   
 100a726:	data16 nop WORD PTR [rax+rax*1+0x0]
 100a730:	cmp    rcx,QWORD PTR [rip+0x39f9]        # 0x100e130
 100a737:	jne    0x100a74a
 100a739:	rol    rcx,0x10
 100a73d:	test   cx,0xffff
 100a742:	jne    0x100a746
 100a744:	repz ret 
 100a746:	ror    rcx,0x10
 100a74a:	jmp    0x100a764
 100a74f:	int3   
 100a750:	int3   
 100a751:	int3   
 100a752:	int3   
 100a753:	int3   
 100a754:	int3   
 100a755:	int3   
 100a756:	jmp    QWORD PTR [rip+0xffffffffffff6c0c]        # 0x1001368
 100a75c:	int3   
 100a75d:	int3   
 100a75e:	int3   
 100a75f:	int3   
 100a760:	int3   
 100a761:	int3   
 100a762:	int3   
 100a763:	int3   
 100a764:	mov    QWORD PTR [rsp+0x8],rcx
 100a769:	sub    rsp,0x88
 100a770:	lea    rcx,[rip+0x3c19]        # 0x100e390
 100a777:	call   QWORD PTR [rip+0xffffffffffff69cb]        # 0x1001148
 100a77d:	mov    rax,QWORD PTR [rip+0x3d04]        # 0x100e488
 100a784:	mov    QWORD PTR [rsp+0x58],rax
 100a789:	xor    r8d,r8d
 100a78c:	lea    rdx,[rsp+0x60]
 100a791:	mov    rcx,QWORD PTR [rsp+0x58]
 100a796:	call   0x100c210
 100a79b:	mov    QWORD PTR [rsp+0x50],rax
 100a7a0:	cmp    QWORD PTR [rsp+0x50],0x0
 100a7a6:	je     0x100a7e9
 100a7a8:	mov    QWORD PTR [rsp+0x38],0x0
 100a7b1:	lea    rax,[rsp+0x48]
 100a7b6:	mov    QWORD PTR [rsp+0x30],rax
 100a7bb:	lea    rax,[rsp+0x40]
 100a7c0:	mov    QWORD PTR [rsp+0x28],rax
 100a7c5:	lea    rax,[rip+0x3bc4]        # 0x100e390
 100a7cc:	mov    QWORD PTR [rsp+0x20],rax
 100a7d1:	mov    r9,QWORD PTR [rsp+0x50]
 100a7d6:	mov    r8,QWORD PTR [rsp+0x58]
 100a7db:	mov    rdx,QWORD PTR [rsp+0x60]
 100a7e0:	xor    ecx,ecx
 100a7e2:	call   0x100c204
 100a7e7:	jmp    0x100a80b
 100a7e9:	mov    rax,QWORD PTR [rsp+0x88]
 100a7f1:	mov    QWORD PTR [rip+0x3c90],rax        # 0x100e488
 100a7f8:	lea    rax,[rsp+0x88]
 100a800:	add    rax,0x8
 100a804:	mov    QWORD PTR [rip+0x3c1d],rax        # 0x100e428
 100a80b:	mov    rax,QWORD PTR [rip+0x3c76]        # 0x100e488
 100a812:	mov    QWORD PTR [rip+0x3ae7],rax        # 0x100e300
 100a819:	mov    rax,QWORD PTR [rsp+0x90]
 100a821:	mov    QWORD PTR [rip+0x3be8],rax        # 0x100e410
 100a828:	mov    DWORD PTR [rip+0x3abe],0xc0000409        # 0x100e2f0
 100a832:	mov    DWORD PTR [rip+0x3ab8],0x1        # 0x100e2f4
 100a83c:	mov    rax,QWORD PTR [rip+0x38ed]        # 0x100e130
 100a843:	mov    QWORD PTR [rsp+0x68],rax
 100a848:	mov    rax,QWORD PTR [rip+0x38e9]        # 0x100e138
 100a84f:	mov    QWORD PTR [rsp+0x70],rax
 100a854:	call   QWORD PTR [rip+0xffffffffffff6906]        # 0x1001160
 100a85a:	mov    DWORD PTR [rip+0x3b28],eax        # 0x100e388
 100a860:	mov    ecx,0x1
 100a865:	call   0x100acd2
 100a86a:	xor    ecx,ecx
 100a86c:	call   QWORD PTR [rip+0xffffffffffff68f6]        # 0x1001168
 100a872:	lea    rcx,[rip+0xffffffffffff723f]        # 0x1001ab8
 100a879:	call   QWORD PTR [rip+0xffffffffffff68f1]        # 0x1001170
 100a87f:	cmp    DWORD PTR [rip+0x3b02],0x0        # 0x100e388
 100a886:	jne    0x100a892
 100a888:	mov    ecx,0x1
 100a88d:	call   0x100acd2
 100a892:	call   QWORD PTR [rip+0xffffffffffff68e0]        # 0x1001178
 100a898:	mov    edx,0xc0000409
 100a89d:	mov    rcx,rax
 100a8a0:	call   QWORD PTR [rip+0xffffffffffff68da]        # 0x1001180
 100a8a6:	add    rsp,0x88
 100a8ad:	ret    
 100a8ae:	int3   
 100a8af:	int3   
 100a8b0:	int3   
 100a8b1:	int3   
 100a8b2:	int3   
 100a8b3:	int3   
 100a8b4:	int3   
 100a8b5:	int3   
 100a8b6:	data16 nop WORD PTR [rax+rax*1+0x0]
 100a8c0:	sub    rsp,0x10
 100a8c4:	mov    QWORD PTR [rsp],r10
 100a8c8:	mov    QWORD PTR [rsp+0x8],r11
 100a8cd:	xor    r11,r11
 100a8d0:	lea    r10,[rsp+0x18]
 100a8d5:	sub    r10,rax
 100a8d8:	cmovb  r10,r11
 100a8dc:	mov    r11,QWORD PTR gs:0x10
 100a8e5:	cmp    r10,r11
 100a8e8:	jae    0x100a900
 100a8ea:	and    r10w,0xf000
 100a8f0:	lea    r11,[r11-0x1000]
 100a8f7:	mov    BYTE PTR [r11],0x0
 100a8fb:	cmp    r10,r11
 100a8fe:	jne    0x100a8f0
 100a900:	mov    r10,QWORD PTR [rsp]
 100a904:	mov    r11,QWORD PTR [rsp+0x8]
 100a909:	add    rsp,0x10
 100a90d:	ret    
 100a90e:	int3   
 100a90f:	int3   
 100a910:	int3   
 100a911:	int3   
 100a912:	int3   
 100a913:	int3   
 100a914:	jmp    QWORD PTR [rip+0xffffffffffff695e]        # 0x1001278
 100a91a:	int3   
 100a91b:	int3   
 100a91c:	int3   
 100a91d:	int3   
 100a91e:	int3   
 100a91f:	int3   
 100a920:	sub    rsp,0x28
 100a924:	mov    rax,QWORD PTR [rcx]
 100a927:	cmp    DWORD PTR [rax],0xe06d7363
 100a92d:	jne    0x100a95a
 100a92f:	cmp    DWORD PTR [rax+0x18],0x4
 100a933:	jne    0x100a95a
 100a935:	mov    eax,DWORD PTR [rax+0x20]
 100a938:	cmp    eax,0x19930520
 100a93d:	je     0x100a954
 100a93f:	cmp    eax,0x19930521
 100a944:	je     0x100a954
 100a946:	cmp    eax,0x19930522
 100a94b:	je     0x100a954
 100a94d:	cmp    eax,0x1994000
 100a952:	jne    0x100a95a
 100a954:	call   0x100acde
 100a959:	int3   
 100a95a:	xor    eax,eax
 100a95c:	add    rsp,0x28
 100a960:	ret    
 100a961:	int3   
 100a962:	int3   
 100a963:	int3   
 100a964:	int3   
 100a965:	int3   
 100a966:	int3   
 100a967:	int3   
 100a968:	sub    rsp,0x28
 100a96c:	lea    rcx,[rip+0xffffffffffffffad]        # 0x100a920
 100a973:	call   QWORD PTR [rip+0xffffffffffff67ef]        # 0x1001168
 100a979:	xor    eax,eax
 100a97b:	add    rsp,0x28
 100a97f:	ret    
 100a980:	int3   
 100a981:	int3   
 100a982:	int3   
 100a983:	int3   
 100a984:	int3   
 100a985:	int3   
 100a986:	jmp    QWORD PTR [rip+0xffffffffffff68f4]        # 0x1001280
 100a98c:	int3   
 100a98d:	int3   
 100a98e:	int3   
 100a98f:	int3   
 100a990:	int3   
 100a991:	int3   
 100a992:	int3   
 100a993:	int3   
 100a994:	rex push rbx
 100a996:	sub    rsp,0x20
 100a99a:	mov    rbx,rcx
 100a99d:	mov    rcx,QWORD PTR [rip+0x5634]        # 0x100ffd8
 100a9a4:	call   QWORD PTR [rip+0xffffffffffff6796]        # 0x1001140
 100a9aa:	mov    QWORD PTR [rsp+0x38],rax
 100a9af:	cmp    rax,0xffffffffffffffff
 100a9b3:	jne    0x100a9c0
 100a9b5:	mov    rcx,rbx
 100a9b8:	call   QWORD PTR [rip+0xffffffffffff6962]        # 0x1001320
 100a9be:	jmp    0x100aa3e
 100a9c0:	mov    ecx,0x8
 100a9c5:	call   0x100ad02
 100a9ca:	nop
 100a9cb:	mov    rcx,QWORD PTR [rip+0x5606]        # 0x100ffd8
 100a9d2:	call   QWORD PTR [rip+0xffffffffffff6768]        # 0x1001140
 100a9d8:	mov    QWORD PTR [rsp+0x38],rax
 100a9dd:	mov    rcx,QWORD PTR [rip+0x55ec]        # 0x100ffd0
 100a9e4:	call   QWORD PTR [rip+0xffffffffffff6756]        # 0x1001140
 100a9ea:	mov    QWORD PTR [rsp+0x40],rax
 100a9ef:	mov    rcx,rbx
 100a9f2:	call   QWORD PTR [rip+0xffffffffffff6790]        # 0x1001188
 100a9f8:	mov    rcx,rax
 100a9fb:	lea    r8,[rsp+0x40]
 100aa00:	lea    rdx,[rsp+0x38]
 100aa05:	call   0x100acf6
 100aa0a:	mov    rbx,rax
 100aa0d:	mov    rcx,QWORD PTR [rsp+0x38]
 100aa12:	call   QWORD PTR [rip+0xffffffffffff6770]        # 0x1001188
 100aa18:	mov    QWORD PTR [rip+0x55b9],rax        # 0x100ffd8
 100aa1f:	mov    rcx,QWORD PTR [rsp+0x40]
 100aa24:	call   QWORD PTR [rip+0xffffffffffff675e]        # 0x1001188
 100aa2a:	mov    QWORD PTR [rip+0x559f],rax        # 0x100ffd0
 100aa31:	mov    ecx,0x8
 100aa36:	call   0x100acea
 100aa3b:	mov    rax,rbx
 100aa3e:	add    rsp,0x20
 100aa42:	pop    rbx
 100aa43:	ret    
 100aa44:	int3   
 100aa45:	int3   
 100aa46:	int3   
 100aa47:	int3   
 100aa48:	int3   
 100aa49:	int3   
 100aa4a:	int3   
 100aa4b:	int3   
 100aa4c:	sub    rsp,0x28
 100aa50:	call   0x100a994
 100aa55:	neg    rax
 100aa58:	sbb    eax,eax
 100aa5a:	neg    eax
 100aa5c:	dec    eax
 100aa5e:	add    rsp,0x28
 100aa62:	ret    
 100aa63:	int3   
 100aa64:	int3   
 100aa65:	int3   
 100aa66:	int3   
 100aa67:	int3   
 100aa68:	int3   
 100aa69:	int3   
 100aa6a:	int3   
 100aa6b:	int3   
 100aa6c:	mov    QWORD PTR [rsp+0x8],rbx
 100aa71:	push   rdi
 100aa72:	sub    rsp,0x20
 100aa76:	lea    rbx,[rip+0xffffffffffff7193]        # 0x1001c10
 100aa7d:	lea    rdi,[rip+0xffffffffffff718c]        # 0x1001c10
 100aa84:	jmp    0x100aa94
 100aa86:	mov    rax,QWORD PTR [rbx]
 100aa89:	test   rax,rax
 100aa8c:	je     0x100aa90
 100aa8e:	call   rax
 100aa90:	add    rbx,0x8
 100aa94:	cmp    rbx,rdi
 100aa97:	jb     0x100aa86
 100aa99:	mov    rbx,QWORD PTR [rsp+0x30]
 100aa9e:	add    rsp,0x20
 100aaa2:	pop    rdi
 100aaa3:	ret    
 100aaa4:	int3   
 100aaa5:	int3   
 100aaa6:	int3   
 100aaa7:	int3   
 100aaa8:	int3   
 100aaa9:	int3   
 100aaaa:	int3   
 100aaab:	int3   
 100aaac:	mov    QWORD PTR [rsp+0x8],rbx
 100aab1:	push   rdi
 100aab2:	sub    rsp,0x20
 100aab6:	lea    rbx,[rip+0xffffffffffff7163]        # 0x1001c20
 100aabd:	lea    rdi,[rip+0xffffffffffff715c]        # 0x1001c20
 100aac4:	jmp    0x100aad4
 100aac6:	mov    rax,QWORD PTR [rbx]
 100aac9:	test   rax,rax
 100aacc:	je     0x100aad0
 100aace:	call   rax
 100aad0:	add    rbx,0x8
 100aad4:	cmp    rbx,rdi
 100aad7:	jb     0x100aac6
 100aad9:	mov    rbx,QWORD PTR [rsp+0x30]
 100aade:	add    rsp,0x20
 100aae2:	pop    rdi
 100aae3:	ret    
 100aae4:	int3   
 100aae5:	int3   
 100aae6:	int3   
 100aae7:	int3   
 100aae8:	int3   
 100aae9:	int3   
 100aaea:	jmp    QWORD PTR [rip+0xffffffffffff67a0]        # 0x1001290
 100aaf0:	int3   
 100aaf1:	int3   
 100aaf2:	int3   
 100aaf3:	int3   
 100aaf4:	int3   
 100aaf5:	int3   
 100aaf6:	jmp    QWORD PTR [rip+0xffffffffffff679c]        # 0x1001298
 100aafc:	int3   
 100aafd:	int3   
 100aafe:	int3   
 100aaff:	int3   
 100ab00:	int3   
 100ab01:	int3   
 100ab02:	int3   
 100ab03:	int3   
 100ab04:	int3   
 100ab05:	int3   
 100ab06:	int3   
 100ab07:	int3   
 100ab08:	int3   
 100ab09:	int3   
 100ab0a:	int3   
 100ab0b:	int3   
 100ab0c:	int3   
 100ab0d:	int3   
 100ab0e:	int3   
 100ab0f:	int3   
 100ab10:	mov    rax,rcx
 100ab13:	mov    ecx,0x5a4d
 100ab18:	cmp    WORD PTR [rax],cx
 100ab1b:	je     0x100ab20
 100ab1d:	xor    eax,eax
 100ab1f:	ret    
 100ab20:	movsxd rcx,DWORD PTR [rax+0x3c]
 100ab24:	add    rcx,rax
 100ab27:	xor    eax,eax
 100ab29:	cmp    DWORD PTR [rcx],0x4550
 100ab2f:	jne    0x100ab3d
 100ab31:	mov    edx,0x20b
 100ab36:	cmp    WORD PTR [rcx+0x18],dx
 100ab3a:	sete   al
 100ab3d:	repz ret 
 100ab3f:	int3   
 100ab40:	int3   
 100ab41:	int3   
 100ab42:	int3   
 100ab43:	int3   
 100ab44:	int3   
 100ab45:	int3   
 100ab46:	int3   
 100ab47:	int3   
 100ab48:	int3   
 100ab49:	int3   
 100ab4a:	int3   
 100ab4b:	int3   
 100ab4c:	int3   
 100ab4d:	int3   
 100ab4e:	int3   
 100ab4f:	int3   
 100ab50:	movsxd r8,DWORD PTR [rcx+0x3c]
 100ab54:	xor    r9d,r9d
 100ab57:	mov    r10,rdx
 100ab5a:	add    r8,rcx
 100ab5d:	movzx  eax,WORD PTR [r8+0x14]
 100ab62:	movzx  r11d,WORD PTR [r8+0x6]
 100ab67:	lea    rcx,[rax+r8*1+0x18]
 100ab6c:	test   r11d,r11d
 100ab6f:	je     0x100ab8f
 100ab71:	mov    edx,DWORD PTR [rcx+0xc]
 100ab74:	cmp    r10,rdx
 100ab77:	jb     0x100ab83
 100ab79:	mov    eax,DWORD PTR [rcx+0x8]
 100ab7c:	add    eax,edx
 100ab7e:	cmp    r10,rax
 100ab81:	jb     0x100ab92
 100ab83:	inc    r9d
 100ab86:	add    rcx,0x28
 100ab8a:	cmp    r9d,r11d
 100ab8d:	jb     0x100ab71
 100ab8f:	xor    eax,eax
 100ab91:	ret    
 100ab92:	mov    rax,rcx
 100ab95:	ret    
 100ab96:	int3   
 100ab97:	int3   
 100ab98:	int3   
 100ab99:	int3   
 100ab9a:	int3   
 100ab9b:	int3   
 100ab9c:	int3   
 100ab9d:	int3   
 100ab9e:	int3   
 100ab9f:	int3   
 100aba0:	sub    rsp,0x28
 100aba4:	mov    r8,rcx
 100aba7:	lea    r9,[rip+0xffffffffffff5452]        # 0x1000000
 100abae:	mov    rcx,r9
 100abb1:	call   0x100ab10
 100abb6:	test   eax,eax
 100abb8:	je     0x100abdc
 100abba:	sub    r8,r9
 100abbd:	mov    rdx,r8
 100abc0:	mov    rcx,r9
 100abc3:	call   0x100ab50
 100abc8:	test   rax,rax
 100abcb:	je     0x100abdc
 100abcd:	mov    eax,DWORD PTR [rax+0x24]
 100abd0:	shr    eax,0x1f
 100abd3:	not    eax
 100abd5:	and    eax,0x1
 100abd8:	jmp    0x100abdc
 100abda:	xor    eax,eax
 100abdc:	add    rsp,0x28
 100abe0:	ret    
 100abe1:	int3   
 100abe2:	int3   
 100abe3:	int3   
 100abe4:	int3   
 100abe5:	int3   
 100abe6:	int3   
 100abe7:	int3   
 100abe8:	jmp    QWORD PTR [rip+0xffffffffffff66d2]        # 0x10012c0
 100abee:	int3   
 100abef:	int3   
 100abf0:	int3   
 100abf1:	int3   
 100abf2:	int3   
 100abf3:	int3   
 100abf4:	jmp    QWORD PTR [rip+0xffffffffffff66ce]        # 0x10012c8
 100abfa:	int3   
 100abfb:	int3   
 100abfc:	int3   
 100abfd:	int3   
 100abfe:	int3   
 100abff:	int3   
 100ac00:	xor    eax,eax
 100ac02:	ret    
 100ac03:	int3   
 100ac04:	int3   
 100ac05:	int3   
 100ac06:	int3   
 100ac07:	int3   
 100ac08:	int3   
 100ac09:	int3   
 100ac0a:	int3   
 100ac0b:	int3   
 100ac0c:	xor    eax,eax
 100ac0e:	ret    
 100ac0f:	int3   
 100ac10:	int3   
 100ac11:	int3   
 100ac12:	int3   
 100ac13:	int3   
 100ac14:	int3   
 100ac15:	int3   
 100ac16:	int3   
 100ac17:	int3   
 100ac18:	mov    QWORD PTR [rsp+0x18],rbx
 100ac1d:	push   rdi
 100ac1e:	sub    rsp,0x20
 100ac22:	mov    rax,QWORD PTR [rip+0x3507]        # 0x100e130
 100ac29:	and    QWORD PTR [rsp+0x30],0x0
 100ac2f:	movabs rdi,0x2b992ddfa232
 100ac39:	cmp    rax,rdi
 100ac3c:	je     0x100ac4a
 100ac3e:	not    rax
 100ac41:	mov    QWORD PTR [rip+0x34f0],rax        # 0x100e138
 100ac48:	jmp    0x100acc0
 100ac4a:	lea    rcx,[rsp+0x30]
 100ac4f:	call   QWORD PTR [rip+0xffffffffffff64c3]        # 0x1001118
 100ac55:	mov    rbx,QWORD PTR [rsp+0x30]
 100ac5a:	call   QWORD PTR [rip+0xffffffffffff64c0]        # 0x1001120
 100ac60:	mov    r11d,eax
 100ac63:	xor    rbx,r11
 100ac66:	call   QWORD PTR [rip+0xffffffffffff64bc]        # 0x1001128
 100ac6c:	mov    r11d,eax
 100ac6f:	xor    rbx,r11
 100ac72:	call   QWORD PTR [rip+0xffffffffffff64b8]        # 0x1001130
 100ac78:	lea    rcx,[rsp+0x38]
 100ac7d:	mov    r11d,eax
 100ac80:	xor    rbx,r11
 100ac83:	call   QWORD PTR [rip+0xffffffffffff64af]        # 0x1001138
 100ac89:	mov    r11,QWORD PTR [rsp+0x38]
 100ac8e:	xor    r11,rbx
 100ac91:	movabs rax,0xffffffffffff
 100ac9b:	and    r11,rax
 100ac9e:	movabs rax,0x2b992ddfa233
 100aca8:	cmp    r11,rdi
 100acab:	cmove  r11,rax
 100acaf:	mov    QWORD PTR [rip+0x347a],r11        # 0x100e130
 100acb6:	not    r11
 100acb9:	mov    QWORD PTR [rip+0x3478],r11        # 0x100e138
 100acc0:	mov    rbx,QWORD PTR [rsp+0x40]
 100acc5:	add    rsp,0x20
 100acc9:	pop    rdi
 100acca:	ret    
 100accb:	int3   
 100accc:	int3   
 100accd:	int3   
 100acce:	int3   
 100accf:	int3   
 100acd0:	int3   
 100acd1:	int3   
 100acd2:	jmp    QWORD PTR [rip+0xffffffffffff6620]        # 0x10012f8
 100acd8:	int3   
 100acd9:	int3   
 100acda:	int3   
 100acdb:	int3   
 100acdc:	int3   
 100acdd:	int3   
 100acde:	jmp    QWORD PTR [rip+0xffffffffffff661c]        # 0x1001300
 100ace4:	int3   
 100ace5:	int3   
 100ace6:	int3   
 100ace7:	int3   
 100ace8:	int3   
 100ace9:	int3   
 100acea:	jmp    QWORD PTR [rip+0xffffffffffff6618]        # 0x1001308
 100acf0:	int3   
 100acf1:	int3   
 100acf2:	int3   
 100acf3:	int3   
 100acf4:	int3   
 100acf5:	int3   
 100acf6:	jmp    QWORD PTR [rip+0xffffffffffff6614]        # 0x1001310
 100acfc:	int3   
 100acfd:	int3   
 100acfe:	int3   
 100acff:	int3   
 100ad00:	int3   
 100ad01:	int3   
 100ad02:	jmp    QWORD PTR [rip+0xffffffffffff6610]        # 0x1001318
 100ad08:	int3   
 100ad09:	int3   
 100ad0a:	int3   
 100ad0b:	int3   
 100ad0c:	int3   
 100ad0d:	int3   
 100ad0e:	jmp    QWORD PTR [rip+0xffffffffffff676c]        # 0x1001480
 100ad14:	int3   
 100ad15:	int3   
 100ad16:	int3   
 100ad17:	int3   
 100ad18:	int3   
 100ad19:	int3   
 100ad1a:	jmp    QWORD PTR [rip+0xffffffffffff6758]        # 0x1001478
 100ad20:	int3   
 100ad21:	int3   
 100ad22:	int3   
 100ad23:	int3   
 100ad24:	int3   
 100ad25:	int3   
 100ad26:	jmp    QWORD PTR [rip+0xffffffffffff6744]        # 0x1001470
 100ad2c:	int3   
 100ad2d:	int3   
 100ad2e:	int3   
 100ad2f:	int3   
 100ad30:	int3   
 100ad31:	int3   
 100ad32:	jmp    QWORD PTR [rip+0xffffffffffff6730]        # 0x1001468
 100ad38:	int3   
 100ad39:	int3   
 100ad3a:	int3   
 100ad3b:	int3   
 100ad3c:	int3   
 100ad3d:	int3   
 100ad3e:	jmp    QWORD PTR [rip+0xffffffffffff671c]        # 0x1001460
 100ad44:	int3   
 100ad45:	int3   
 100ad46:	int3   
 100ad47:	int3   
 100ad48:	int3   
 100ad49:	int3   
 100ad4a:	jmp    QWORD PTR [rip+0xffffffffffff6708]        # 0x1001458
 100ad50:	int3   
 100ad51:	int3   
 100ad52:	int3   
 100ad53:	int3   
 100ad54:	int3   
 100ad55:	int3   
 100ad56:	jmp    QWORD PTR [rip+0xffffffffffff66f4]        # 0x1001450
 100ad5c:	int3   
 100ad5d:	int3   
 100ad5e:	int3   
 100ad5f:	int3   
 100ad60:	int3   
 100ad61:	int3   
 100ad62:	jmp    QWORD PTR [rip+0xffffffffffff66e0]        # 0x1001448
 100ad68:	int3   
 100ad69:	int3   
 100ad6a:	int3   
 100ad6b:	int3   
 100ad6c:	int3   
 100ad6d:	int3   
 100ad6e:	jmp    QWORD PTR [rip+0xffffffffffff66cc]        # 0x1001440
 100ad74:	int3   
 100ad75:	int3   
 100ad76:	int3   
 100ad77:	int3   
 100ad78:	int3   
 100ad79:	int3   
 100ad7a:	jmp    QWORD PTR [rip+0xffffffffffff66b8]        # 0x1001438
 100ad80:	int3   
 100ad81:	int3   
 100ad82:	int3   
 100ad83:	int3   
 100ad84:	int3   
 100ad85:	int3   
 100ad86:	jmp    QWORD PTR [rip+0xffffffffffff66a4]        # 0x1001430
 100ad8c:	int3   
 100ad8d:	int3   
 100ad8e:	int3   
 100ad8f:	int3   
 100ad90:	int3   
 100ad91:	int3   
 100ad92:	jmp    QWORD PTR [rip+0xffffffffffff6690]        # 0x1001428
 100ad98:	int3   
 100ad99:	int3   
 100ad9a:	int3   
 100ad9b:	int3   
 100ad9c:	int3   
 100ad9d:	int3   
 100ad9e:	jmp    QWORD PTR [rip+0xffffffffffff667c]        # 0x1001420
 100ada4:	int3   
 100ada5:	int3   
 100ada6:	int3   
 100ada7:	int3   
 100ada8:	int3   
 100ada9:	int3   
 100adaa:	jmp    QWORD PTR [rip+0xffffffffffff6668]        # 0x1001418
 100adb0:	int3   
 100adb1:	int3   
 100adb2:	int3   
 100adb3:	int3   
 100adb4:	int3   
 100adb5:	int3   
 100adb6:	jmp    QWORD PTR [rip+0xffffffffffff6654]        # 0x1001410
 100adbc:	int3   
 100adbd:	int3   
 100adbe:	int3   
 100adbf:	int3   
 100adc0:	int3   
 100adc1:	int3   
 100adc2:	jmp    QWORD PTR [rip+0xffffffffffff6640]        # 0x1001408
 100adc8:	int3   
 100adc9:	int3   
 100adca:	int3   
 100adcb:	int3   
 100adcc:	int3   
 100adcd:	int3   
 100adce:	jmp    QWORD PTR [rip+0xffffffffffff662c]        # 0x1001400
 100add4:	int3   
 100add5:	int3   
 100add6:	int3   
 100add7:	int3   
 100add8:	int3   
 100add9:	int3   
 100adda:	jmp    QWORD PTR [rip+0xffffffffffff66a8]        # 0x1001488
 100ade0:	int3   
 100ade1:	int3   
 100ade2:	int3   
 100ade3:	int3   
 100ade4:	int3   
 100ade5:	int3   
 100ade6:	jmp    QWORD PTR [rip+0xffffffffffff65dc]        # 0x10013c8
 100adec:	int3   
 100aded:	int3   
 100adee:	int3   
 100adef:	int3   
 100adf0:	int3   
 100adf1:	int3   
 100adf2:	jmp    QWORD PTR [rip+0xffffffffffff65d8]        # 0x10013d0
 100adf8:	int3   
 100adf9:	int3   
 100adfa:	int3   
 100adfb:	int3   
 100adfc:	int3   
 100adfd:	int3   
 100adfe:	jmp    QWORD PTR [rip+0xffffffffffff65d4]        # 0x10013d8
 100ae04:	int3   
 100ae05:	int3   
 100ae06:	int3   
 100ae07:	int3   
 100ae08:	int3   
 100ae09:	int3   
 100ae0a:	jmp    QWORD PTR [rip+0xffffffffffff65d0]        # 0x10013e0
 100ae10:	int3   
 100ae11:	int3   
 100ae12:	int3   
 100ae13:	int3   
 100ae14:	int3   
 100ae15:	int3   
 100ae16:	jmp    QWORD PTR [rip+0xffffffffffff65cc]        # 0x10013e8
 100ae1c:	int3   
 100ae1d:	int3   
 100ae1e:	int3   
 100ae1f:	int3   
 100ae20:	int3   
 100ae21:	int3   
 100ae22:	jmp    QWORD PTR [rip+0xffffffffffff65c8]        # 0x10013f0
 100ae28:	int3   
 100ae29:	int3   
 100ae2a:	int3   
 100ae2b:	int3   
 100ae2c:	int3   
 100ae2d:	int3   
 100ae2e:	jmp    QWORD PTR [rip+0xffffffffffff65c4]        # 0x10013f8
 100ae34:	int3   
 100ae35:	int3   
 100ae36:	int3   
 100ae37:	int3   
 100ae38:	int3   
 100ae39:	int3   
 100ae3a:	int3   
 100ae3b:	int3   
 100ae3c:	int3   
 100ae3d:	int3   
 100ae3e:	int3   
 100ae3f:	int3   
 100ae40:	sub    rsp,0x28
 100ae44:	mov    rcx,QWORD PTR [rip+0x3a25]        # 0x100e870
 100ae4b:	test   rcx,rcx
 100ae4e:	jne    0x100ae70
 100ae50:	lea    rcx,[rip+0xffffffffffff6c71]        # 0x1001ac8
 100ae57:	call   QWORD PTR [rip+0xffffffffffff6233]        # 0x1001090
 100ae5d:	test   rax,rax
 100ae60:	je     0x100aec4
 100ae62:	xchg   QWORD PTR [rip+0x3a07],rax        # 0x100e870
 100ae69:	mov    rcx,QWORD PTR [rip+0x3a00]        # 0x100e870
 100ae70:	cmp    QWORD PTR [rip+0x3a00],0x0        # 0x100e878
 100ae78:	jne    0x100ae9a
 100ae7a:	lea    rdx,[rip+0xffffffffffff6c67]        # 0x1001ae8
 100ae81:	call   QWORD PTR [rip+0xffffffffffff6199]        # 0x1001020
 100ae87:	test   rax,rax
 100ae8a:	je     0x100aec4
 100ae8c:	xchg   QWORD PTR [rip+0x39e5],rax        # 0x100e878
 100ae93:	mov    rcx,QWORD PTR [rip+0x39d6]        # 0x100e870
 100ae9a:	cmp    QWORD PTR [rip+0x39de],0x0        # 0x100e880
 100aea2:	jne    0x100aebd
 100aea4:	lea    rdx,[rip+0xffffffffffff6c55]        # 0x1001b00
 100aeab:	call   QWORD PTR [rip+0xffffffffffff616f]        # 0x1001020
 100aeb1:	test   rax,rax
 100aeb4:	je     0x100aec4
 100aeb6:	xchg   QWORD PTR [rip+0x39c3],rax        # 0x100e880
 100aebd:	xor    eax,eax
 100aebf:	add    rsp,0x28
 100aec3:	ret    
 100aec4:	call   QWORD PTR [rip+0xffffffffffff618e]        # 0x1001058
 100aeca:	or     eax,0x80070000
 100aecf:	add    rsp,0x28
 100aed3:	ret    
 100aed4:	int3   
 100aed5:	int3   
 100aed6:	int3   
 100aed7:	int3   
 100aed8:	int3   
 100aed9:	int3   
 100aeda:	int3   
 100aedb:	int3   
 100aedc:	int3   
 100aedd:	int3   
 100aede:	int3   
 100aedf:	int3   
 100aee0:	sub    rsp,0x28
 100aee4:	mov    rcx,QWORD PTR [rip+0x3985]        # 0x100e870
 100aeeb:	test   rcx,rcx
 100aeee:	je     0x100af0e
 100aef0:	call   QWORD PTR [rip+0xffffffffffff6122]        # 0x1001018
 100aef6:	xor    r11d,r11d
 100aef9:	mov    QWORD PTR [rip+0x3970],r11        # 0x100e870
 100af00:	mov    QWORD PTR [rip+0x3971],r11        # 0x100e878
 100af07:	mov    QWORD PTR [rip+0x3972],r11        # 0x100e880
 100af0e:	add    rsp,0x28
 100af12:	ret    
 100af13:	int3   
 100af14:	int3   
 100af15:	int3   
 100af16:	int3   
 100af17:	int3   
 100af18:	int3   
 100af19:	int3   
 100af1a:	int3   
 100af1b:	int3   
 100af1c:	int3   
 100af1d:	int3   
 100af1e:	int3   
 100af1f:	int3   
 100af20:	add    edx,edx
 100af22:	jmp    0x100af80
 100af27:	int3   
 100af28:	int3   
 100af29:	int3   
 100af2a:	int3   
 100af2b:	int3   
 100af2c:	int3   
 100af2d:	int3   
 100af2e:	int3   
 100af2f:	int3   
 100af30:	rex push rbx
 100af32:	sub    rsp,0x20
 100af36:	mov    rbx,r9
 100af39:	mov    DWORD PTR [rsp+0x48],0x0
 100af41:	test   r9,r9
 100af44:	je     0x100af4f
 100af46:	mov    eax,DWORD PTR [r9]
 100af49:	add    eax,eax
 100af4b:	mov    DWORD PTR [rsp+0x48],eax
 100af4f:	lea    r9,[rsp+0x48]
 100af54:	call   0x100b070
 100af59:	test   eax,eax
 100af5b:	js     0x100af6a
 100af5d:	test   rbx,rbx
 100af60:	je     0x100af6a
 100af62:	mov    ecx,DWORD PTR [rsp+0x48]
 100af66:	shr    ecx,1
 100af68:	mov    DWORD PTR [rbx],ecx
 100af6a:	add    rsp,0x20
 100af6e:	pop    rbx
 100af6f:	ret    
 100af70:	int3   
 100af71:	int3   
 100af72:	int3   
 100af73:	int3   
 100af74:	int3   
 100af75:	int3   
 100af76:	int3   
 100af77:	int3   
 100af78:	int3   
 100af79:	int3   
 100af7a:	int3   
 100af7b:	int3   
 100af7c:	int3   
 100af7d:	int3   
 100af7e:	int3   
 100af7f:	int3   
 100af80:	mov    QWORD PTR [rsp+0x10],rbx
 100af85:	push   rsi
 100af86:	sub    rsp,0x20
 100af8a:	mov    rbx,r9
 100af8d:	mov    rsi,r8
 100af90:	mov    r9,rcx
 100af93:	test   rbx,rbx
 100af96:	je     0x100b052
 100af9c:	test   rcx,rcx
 100af9f:	je     0x100b052
 100afa5:	test   r8,r8
 100afa8:	jne    0x100afd5
 100afaa:	cmp    DWORD PTR [rbx],r8d
 100afad:	jne    0x100b042
 100afb3:	mov    eax,edx
 100afb5:	and    edx,0x7
 100afb8:	and    eax,0xfffffff8
 100afbb:	test   dl,dl
 100afbd:	jne    0x100afc3
 100afbf:	test   eax,eax
 100afc1:	jne    0x100afc6
 100afc3:	add    eax,0x8
 100afc6:	mov    DWORD PTR [rbx],eax
 100afc8:	xor    eax,eax
 100afca:	mov    rbx,QWORD PTR [rsp+0x38]
 100afcf:	add    rsp,0x20
 100afd3:	pop    rsi
 100afd4:	ret    
 100afd5:	mov    eax,DWORD PTR [rbx]
 100afd7:	cmp    edx,eax
 100afd9:	ja     0x100b042
 100afdb:	mov    ecx,eax
 100afdd:	mov    QWORD PTR [rsp+0x30],rdi
 100afe2:	mov    rdi,r8
 100afe5:	xor    eax,eax
 100afe7:	mov    r8d,edx
 100afea:	mov    rdx,r9
 100afed:	rep stos BYTE PTR es:[rdi],al
 100afef:	mov    rcx,rsi
 100aff2:	call   0x100a914
 100aff7:	mov    edx,DWORD PTR [rbx]
 100aff9:	xor    r8d,r8d
 100affc:	mov    rcx,rsi
 100afff:	call   QWORD PTR [rip+0x3873]        # 0x100e878
 100b005:	mov    r11d,eax
 100b008:	test   eax,eax
 100b00a:	jne    0x100b01c
 100b00c:	mov    rdi,QWORD PTR [rsp+0x30]
 100b011:	mov    rbx,QWORD PTR [rsp+0x38]
 100b016:	add    rsp,0x20
 100b01a:	pop    rsi
 100b01b:	ret    
 100b01c:	mov    ecx,DWORD PTR [rbx]
 100b01e:	xor    eax,eax
 100b020:	mov    rdi,rsi
 100b023:	rep stos BYTE PTR es:[rdi],al
 100b025:	mov    ecx,r11d
 100b028:	call   0x100c1f8
 100b02d:	mov    rdi,QWORD PTR [rsp+0x30]
 100b032:	or     eax,0x80070000
 100b037:	mov    rbx,QWORD PTR [rsp+0x38]
 100b03c:	add    rsp,0x20
 100b040:	pop    rsi
 100b041:	ret    
 100b042:	mov    eax,0x80004005
 100b047:	mov    rbx,QWORD PTR [rsp+0x38]
 100b04c:	add    rsp,0x20
 100b050:	pop    rsi
 100b051:	ret    
 100b052:	mov    eax,0x80070057
 100b057:	mov    rbx,QWORD PTR [rsp+0x38]
 100b05c:	add    rsp,0x20
 100b060:	pop    rsi
 100b061:	ret    
 100b062:	int3   
 100b063:	int3   
 100b064:	int3   
 100b065:	int3   
 100b066:	int3   
 100b067:	int3   
 100b068:	int3   
 100b069:	int3   
 100b06a:	int3   
 100b06b:	int3   
 100b06c:	int3   
 100b06d:	int3   
 100b06e:	int3   
 100b06f:	int3   
 100b070:	mov    QWORD PTR [rsp+0x10],rbx
 100b075:	push   rsi
 100b076:	sub    rsp,0x20
 100b07a:	mov    rbx,r9
 100b07d:	mov    rsi,r8
 100b080:	mov    r9,rcx
 100b083:	test   rbx,rbx
 100b086:	je     0x100b12b
 100b08c:	test   rcx,rcx
 100b08f:	je     0x100b12b
 100b095:	test   r8,r8
 100b098:	jne    0x100b0ae
 100b09a:	cmp    DWORD PTR [rbx],r8d
 100b09d:	jne    0x100b11b
 100b09f:	mov    DWORD PTR [rbx],edx
 100b0a1:	xor    eax,eax
 100b0a3:	mov    rbx,QWORD PTR [rsp+0x38]
 100b0a8:	add    rsp,0x20
 100b0ac:	pop    rsi
 100b0ad:	ret    
 100b0ae:	mov    eax,DWORD PTR [rbx]
 100b0b0:	cmp    edx,eax
 100b0b2:	ja     0x100b11b
 100b0b4:	mov    ecx,eax
 100b0b6:	mov    QWORD PTR [rsp+0x30],rdi
 100b0bb:	mov    rdi,r8
 100b0be:	xor    eax,eax
 100b0c0:	mov    r8d,edx
 100b0c3:	mov    rdx,r9
 100b0c6:	rep stos BYTE PTR es:[rdi],al
 100b0c8:	mov    rcx,rsi
 100b0cb:	call   0x100a914
 100b0d0:	mov    edx,DWORD PTR [rbx]
 100b0d2:	xor    r8d,r8d
 100b0d5:	mov    rcx,rsi
 100b0d8:	call   QWORD PTR [rip+0x37a2]        # 0x100e880
 100b0de:	mov    r11d,eax
 100b0e1:	test   eax,eax
 100b0e3:	jne    0x100b0f5
 100b0e5:	mov    rdi,QWORD PTR [rsp+0x30]
 100b0ea:	mov    rbx,QWORD PTR [rsp+0x38]
 100b0ef:	add    rsp,0x20
 100b0f3:	pop    rsi
 100b0f4:	ret    
 100b0f5:	mov    ecx,DWORD PTR [rbx]
 100b0f7:	xor    eax,eax
 100b0f9:	mov    rdi,rsi
 100b0fc:	rep stos BYTE PTR es:[rdi],al
 100b0fe:	mov    ecx,r11d
 100b101:	call   0x100c1f8
 100b106:	mov    rdi,QWORD PTR [rsp+0x30]
 100b10b:	or     eax,0x80070000
 100b110:	mov    rbx,QWORD PTR [rsp+0x38]
 100b115:	add    rsp,0x20
 100b119:	pop    rsi
 100b11a:	ret    
 100b11b:	mov    eax,0x80004005
 100b120:	mov    rbx,QWORD PTR [rsp+0x38]
 100b125:	add    rsp,0x20
 100b129:	pop    rsi
 100b12a:	ret    
 100b12b:	mov    eax,0x80070057
 100b130:	mov    rbx,QWORD PTR [rsp+0x38]
 100b135:	add    rsp,0x20
 100b139:	pop    rsi
 100b13a:	ret    
 100b13b:	int3   
 100b13c:	int3   
 100b13d:	int3   
 100b13e:	int3   
 100b13f:	int3   
 100b140:	int3   
 100b141:	int3   
 100b142:	int3   
 100b143:	int3   
 100b144:	int3   
 100b145:	int3   
 100b146:	int3   
 100b147:	int3   
 100b148:	int3   
 100b149:	int3   
 100b14a:	int3   
 100b14b:	int3   
 100b14c:	int3   
 100b14d:	int3   
 100b14e:	int3   
 100b14f:	int3   
 100b150:	rex push rbx
 100b152:	sub    rsp,0x20
 100b156:	mov    rbx,rcx
 100b159:	call   QWORD PTR [rip+0xffffffffffff6041]        # 0x10011a0
 100b15f:	mov    rcx,rbx
 100b162:	movzx  edx,ax
 100b165:	add    rsp,0x20
 100b169:	pop    rbx
 100b16a:	jmp    0x100b180
 100b16f:	int3   
 100b170:	int3   
 100b171:	int3   
 100b172:	int3   
 100b173:	int3   
 100b174:	int3   
 100b175:	int3   
 100b176:	int3   
 100b177:	int3   
 100b178:	int3   
 100b179:	int3   
 100b17a:	int3   
 100b17b:	int3   
 100b17c:	int3   
 100b17d:	int3   
 100b17e:	int3   
 100b17f:	int3   
 100b180:	rex push rbp
 100b182:	push   rsi
 100b183:	push   r12
 100b185:	push   r14
 100b187:	lea    rbp,[rsp-0xf58]
 100b18f:	mov    eax,0x1058
 100b194:	call   0x100a8c0
 100b199:	sub    rsp,rax
 100b19c:	mov    rax,QWORD PTR [rip+0x2f8d]        # 0x100e130
 100b1a3:	xor    rax,rsp
 100b1a6:	mov    QWORD PTR [rbp+0xf40],rax
 100b1ad:	movzx  esi,dx
 100b1b0:	xor    r12d,r12d
 100b1b3:	mov    WORD PTR [rsp+0x30],r12w
 100b1b9:	mov    eax,esi
 100b1bb:	cmp    esi,0xc04
 100b1c1:	je     0x100b1d1
 100b1c3:	cmp    eax,0x1004
 100b1c8:	jne    0x100b1d6
 100b1ca:	mov    esi,0x804
 100b1cf:	jmp    0x100b1d6
 100b1d1:	mov    esi,0x404
 100b1d6:	mov    QWORD PTR [rsp+0x1088],rbx
 100b1de:	mov    r14d,0x105
 100b1e4:	mov    QWORD PTR [rsp+0x1090],rdi
 100b1ec:	lea    r9,[rsp+0x30]
 100b1f1:	lea    rdx,[rbp+0xd30]
 100b1f8:	mov    r8d,r14d
 100b1fb:	mov    QWORD PTR [rsp+0x1098],r13
 100b203:	mov    QWORD PTR [rsp+0x20],r14
 100b208:	mov    QWORD PTR [rsp+0x1050],r15
 100b210:	call   0x100ba40
 100b215:	test   al,al
 100b217:	je     0x100b952
 100b21d:	lea    rax,[rsp+0x30]
 100b222:	lea    r13,[rip+0xffffffffffff6947]        # 0x1001b70
 100b229:	lea    r9,[rbp+0xd30]
 100b230:	lea    rcx,[rbp+0xb20]
 100b237:	movzx  r8d,si
 100b23b:	mov    edx,r14d
 100b23e:	mov    QWORD PTR [rsp+0x28],r13
 100b243:	mov    QWORD PTR [rsp+0x20],rax
 100b248:	call   0x100c020
 100b24d:	lea    rdx,[rbp+0x3d0]
 100b254:	lea    rcx,[rbp+0xb20]
 100b25b:	call   QWORD PTR [rip+0xffffffffffff5e9f]        # 0x1001100
 100b261:	cmp    rax,0xffffffffffffffff
 100b265:	jne    0x100b93a
 100b26b:	mov    rax,r12
 100b26e:	xchg   ax,ax
 100b270:	movzx  ecx,WORD PTR [rbp+rax*2+0xd30]
 100b278:	cmp    r12w,cx
 100b27c:	je     0x100b291
 100b27e:	mov    WORD PTR [rbp+rax*2+0xb20],cx
 100b286:	inc    rax
 100b289:	cmp    rax,0x104
 100b28f:	jb     0x100b270
 100b291:	movzx  r15d,WORD PTR [rsp+0x30]
 100b297:	mov    WORD PTR [rbp+rax*2+0xb20],r12w
 100b2a0:	mov    edi,0x1
 100b2a5:	cmp    r12w,WORD PTR [rbp+rax*2+0xd30]
 100b2ae:	jne    0x100b4f7
 100b2b4:	movzx  r11d,si
 100b2b8:	lea    r9,[rbp+0xac0]
 100b2bf:	mov    WORD PTR [rbp+0xac0],r12w
 100b2c7:	lea    r8,[rbp+0xac2]
 100b2ce:	mov    r10d,edi
 100b2d1:	mov    eax,0xcccccccd
 100b2d6:	add    r8,0x2
 100b2da:	mul    r11d
 100b2dd:	shr    edx,0x3
 100b2e0:	movzx  eax,dx
 100b2e3:	shl    ax,0x2
 100b2e7:	lea    ecx,[rax+rdx*1]
 100b2ea:	add    cx,cx
 100b2ed:	sub    r11w,cx
 100b2f1:	add    r11w,0x30
 100b2f6:	mov    WORD PTR [r8-0x2],r11w
 100b2fb:	mov    r11d,edx
 100b2fe:	test   edx,edx
 100b300:	je     0x100b30b
 100b302:	inc    r10d
 100b305:	cmp    r10d,0x29
 100b309:	jb     0x100b2d1
 100b30b:	lea    rax,[rbp+0xac0]
 100b312:	sub    r8,0x2
 100b316:	cmp    rax,r8
 100b319:	jae    0x100b33e
 100b31b:	nop    DWORD PTR [rax+rax*1+0x0]
 100b320:	movzx  eax,WORD PTR [r8]
 100b324:	movzx  ecx,WORD PTR [r9]
 100b328:	sub    r8,0x2
 100b32c:	mov    WORD PTR [r9],ax
 100b330:	mov    WORD PTR [r8+0x2],cx
 100b335:	add    r9,0x2
 100b339:	cmp    r9,r8
 100b33c:	jb     0x100b320
 100b33e:	lea    rax,[rbp+0xb20]
 100b345:	mov    rbx,r12
 100b348:	cmp    r12w,WORD PTR [rbp+0xb20]
 100b350:	je     0x100b35f
 100b352:	add    rax,0x2
 100b356:	inc    rbx
 100b359:	cmp    r12w,WORD PTR [rax]
 100b35d:	jne    0x100b352
 100b35f:	mov    rax,rbx
 100b362:	test   rbx,rbx
 100b365:	je     0x100b36b
 100b367:	lea    rax,[rbx-0x1]
 100b36b:	movzx  ecx,WORD PTR [rbp+rax*2+0xb20]
 100b373:	mov    edx,0x5c
 100b378:	lea    r11d,[rdx-0x2d]
 100b37c:	cmp    dx,cx
 100b37f:	je     0x100b3c7
 100b381:	cmp    r11w,cx
 100b385:	je     0x100b3c7
 100b387:	movzx  eax,WORD PTR [rbp+0xac0]
 100b38e:	cmp    dx,ax
 100b391:	je     0x100b3c7
 100b393:	cmp    r11w,ax
 100b397:	je     0x100b3c7
 100b399:	lea    rcx,[rbp+0xb20]
 100b3a0:	mov    rdx,r14
 100b3a3:	lea    r8,[rip+0xffffffffffff67f2]        # 0x1001b9c
 100b3aa:	lea    rcx,[rcx+rbx*2]
 100b3ae:	sub    rdx,rbx
 100b3b1:	call   0x100c180
 100b3b6:	test   al,al
 100b3b8:	je     0x100b502
 100b3be:	inc    rbx
 100b3c1:	mov    r11d,0x2f
 100b3c7:	lea    r10,[rbp+0xb20]
 100b3ce:	mov    r9,r14
 100b3d1:	lea    r10,[r10+rbx*2]
 100b3d5:	sub    r9,rbx
 100b3d8:	je     0x100b4f7
 100b3de:	mov    rcx,r12
 100b3e1:	dec    r9
 100b3e4:	je     0x100b40d
 100b3e6:	lea    r8,[rbp+0xac0]
 100b3ed:	mov    rax,r10
 100b3f0:	sub    r8,r10
 100b3f3:	movzx  edx,WORD PTR [r8+rax*1]
 100b3f8:	cmp    r12w,dx
 100b3fc:	je     0x100b40d
 100b3fe:	inc    rcx
 100b401:	mov    WORD PTR [rax],dx
 100b404:	add    rax,0x2
 100b408:	cmp    rcx,r9
 100b40b:	jb     0x100b3f3
 100b40d:	mov    WORD PTR [r10+rcx*2],r12w
 100b412:	cmp    r12w,WORD PTR [rbp+rcx*2+0xac0]
 100b41b:	jne    0x100b4f7
 100b421:	lea    rax,[rbp+0xb20]
 100b428:	mov    rbx,r12
 100b42b:	cmp    r12w,WORD PTR [rbp+0xb20]
 100b433:	je     0x100b44d
 100b435:	data16 data16 nop WORD PTR [rax+rax*1+0x0]
 100b440:	add    rax,0x2
 100b444:	inc    rbx
 100b447:	cmp    r12w,WORD PTR [rax]
 100b44b:	jne    0x100b440
 100b44d:	mov    rax,rbx
 100b450:	test   rbx,rbx
 100b453:	je     0x100b459
 100b455:	lea    rax,[rbx-0x1]
 100b459:	movzx  ecx,WORD PTR [rbp+rax*2+0xb20]
 100b461:	mov    eax,0x5c
 100b466:	cmp    ax,cx
 100b469:	je     0x100b4a1
 100b46b:	cmp    r11w,cx
 100b46f:	je     0x100b4a1
 100b471:	cmp    ax,r15w
 100b475:	je     0x100b4a1
 100b477:	cmp    r11w,r15w
 100b47b:	je     0x100b4a1
 100b47d:	lea    rcx,[rbp+0xb20]
 100b484:	mov    rdx,r14
 100b487:	lea    r8,[rip+0xffffffffffff670e]        # 0x1001b9c
 100b48e:	lea    rcx,[rcx+rbx*2]
 100b492:	sub    rdx,rbx
 100b495:	call   0x100c180
 100b49a:	test   al,al
 100b49c:	je     0x100b502
 100b49e:	inc    rbx
 100b4a1:	lea    r10,[rbp+0xb20]
 100b4a8:	mov    r9,r14
 100b4ab:	lea    r10,[r10+rbx*2]
 100b4af:	sub    r9,rbx
 100b4b2:	je     0x100b4f7
 100b4b4:	mov    rcx,r12
 100b4b7:	dec    r9
 100b4ba:	je     0x100b4ea
 100b4bc:	lea    r8,[rsp+0x30]
 100b4c1:	mov    rax,r10
 100b4c4:	sub    r8,r10
 100b4c7:	nop    WORD PTR [rax+rax*1+0x0]
 100b4d0:	movzx  edx,WORD PTR [r8+rax*1]
 100b4d5:	cmp    r12w,dx
 100b4d9:	je     0x100b4ea
 100b4db:	inc    rcx
 100b4de:	mov    WORD PTR [rax],dx
 100b4e1:	add    rax,0x2
 100b4e5:	cmp    rcx,r9
 100b4e8:	jb     0x100b4d0
 100b4ea:	mov    WORD PTR [r10+rcx*2],r12w
 100b4ef:	cmp    r12w,WORD PTR [rsp+rcx*2+0x30]
 100b4f5:	je     0x100b502
 100b4f7:	mov    ecx,0x7a
 100b4fc:	call   QWORD PTR [rip+0xffffffffffff5b5e]        # 0x1001060
 100b502:	lea    rdx,[rbp+0x870]
 100b509:	lea    rcx,[rbp+0xb20]
 100b510:	call   QWORD PTR [rip+0xffffffffffff5bea]        # 0x1001100
 100b516:	cmp    rax,0xffffffffffffffff
 100b51a:	jne    0x100b93a
 100b520:	mov    ebx,0x409
 100b525:	cmp    bx,si
 100b528:	je     0x100b805
 100b52e:	lea    rax,[rsp+0x30]
 100b533:	lea    r9,[rbp+0xd30]
 100b53a:	lea    rcx,[rbp+0xb20]
 100b541:	mov    r8d,ebx
 100b544:	mov    rdx,r14
 100b547:	mov    QWORD PTR [rsp+0x28],r13
 100b54c:	mov    QWORD PTR [rsp+0x20],rax
 100b551:	call   0x100c020
 100b556:	lea    rdx,[rbp+0x620]
 100b55d:	lea    rcx,[rbp+0xb20]
 100b564:	call   QWORD PTR [rip+0xffffffffffff5b96]        # 0x1001100
 100b56a:	cmp    rax,0xffffffffffffffff
 100b56e:	jne    0x100b93a
 100b574:	mov    rax,r12
 100b577:	nop    WORD PTR [rax+rax*1+0x0]
 100b580:	movzx  ecx,WORD PTR [rbp+rax*2+0xd30]
 100b588:	cmp    r12w,cx
 100b58c:	je     0x100b5a1
 100b58e:	mov    WORD PTR [rbp+rax*2+0xb20],cx
 100b596:	inc    rax
 100b599:	cmp    rax,0x104
 100b59f:	jb     0x100b580
 100b5a1:	mov    WORD PTR [rbp+rax*2+0xb20],r12w
 100b5aa:	cmp    r12w,WORD PTR [rbp+rax*2+0xd30]
 100b5b3:	jne    0x100b7dc
 100b5b9:	lea    r9,[rbp+0xac0]
 100b5c0:	mov    WORD PTR [rbp+0xac0],r12w
 100b5c8:	lea    r8,[rbp+0xac2]
 100b5cf:	nop
 100b5d0:	mov    eax,0xcccccccd
 100b5d5:	add    r8,0x2
 100b5d9:	mul    ebx
 100b5db:	shr    edx,0x3
 100b5de:	movzx  eax,dx
 100b5e1:	shl    ax,0x2
 100b5e5:	lea    ecx,[rax+rdx*1]
 100b5e8:	add    cx,cx
 100b5eb:	sub    bx,cx
 100b5ee:	add    bx,0x30
 100b5f2:	mov    WORD PTR [r8-0x2],bx
 100b5f7:	mov    ebx,edx
 100b5f9:	test   edx,edx
 100b5fb:	je     0x100b604
 100b5fd:	inc    edi
 100b5ff:	cmp    edi,0x29
 100b602:	jb     0x100b5d0
 100b604:	lea    rax,[rbp+0xac0]
 100b60b:	sub    r8,0x2
 100b60f:	cmp    rax,r8
 100b612:	jae    0x100b63e
 100b614:	data16 data16 data16 nop WORD PTR [rax+rax*1+0x0]
 100b620:	movzx  eax,WORD PTR [r8]
 100b624:	movzx  ecx,WORD PTR [r9]
 100b628:	sub    r8,0x2
 100b62c:	mov    WORD PTR [r9],ax
 100b630:	mov    WORD PTR [r8+0x2],cx
 100b635:	add    r9,0x2
 100b639:	cmp    r9,r8
 100b63c:	jb     0x100b620
 100b63e:	lea    rax,[rbp+0xb20]
 100b645:	mov    rbx,r12
 100b648:	cmp    r12w,WORD PTR [rbp+0xb20]
 100b650:	je     0x100b65f
 100b652:	add    rax,0x2
 100b656:	inc    rbx
 100b659:	cmp    r12w,WORD PTR [rax]
 100b65d:	jne    0x100b652
 100b65f:	mov    rax,rbx
 100b662:	test   rbx,rbx
 100b665:	je     0x100b66b
 100b667:	lea    rax,[rbx-0x1]
 100b66b:	movzx  ecx,WORD PTR [rbp+rax*2+0xb20]
 100b673:	mov    edi,0x5c
 100b678:	lea    r11d,[rdi-0x2d]
 100b67c:	cmp    di,cx
 100b67f:	je     0x100b6c5
 100b681:	cmp    r11w,cx
 100b685:	je     0x100b6c5
 100b687:	movzx  eax,WORD PTR [rbp+0xac0]
 100b68e:	cmp    di,ax
 100b691:	je     0x100b6c5
 100b693:	cmp    r11w,ax
 100b697:	je     0x100b6c5
 100b699:	lea    rcx,[rbp+0xb20]
 100b6a0:	mov    rdx,r14
 100b6a3:	lea    r8,[rip+0xffffffffffff64f2]        # 0x1001b9c
 100b6aa:	lea    rcx,[rcx+rbx*2]
 100b6ae:	sub    rdx,rbx
 100b6b1:	call   0x100c180
 100b6b6:	test   al,al
 100b6b8:	je     0x100b7e7
 100b6be:	inc    rbx
 100b6c1:	lea    r11d,[rdi-0x2d]
 100b6c5:	lea    r10,[rbp+0xb20]
 100b6cc:	mov    r9,r14
 100b6cf:	lea    r10,[r10+rbx*2]
 100b6d3:	sub    r9,rbx
 100b6d6:	je     0x100b7dc
 100b6dc:	mov    rcx,r12
 100b6df:	dec    r9
 100b6e2:	je     0x100b70b
 100b6e4:	lea    r8,[rbp+0xac0]
 100b6eb:	mov    rax,r10
 100b6ee:	sub    r8,r10
 100b6f1:	movzx  edx,WORD PTR [r8+rax*1]
 100b6f6:	cmp    r12w,dx
 100b6fa:	je     0x100b70b
 100b6fc:	inc    rcx
 100b6ff:	mov    WORD PTR [rax],dx
 100b702:	add    rax,0x2
 100b706:	cmp    rcx,r9
 100b709:	jb     0x100b6f1
 100b70b:	mov    WORD PTR [r10+rcx*2],r12w
 100b710:	cmp    r12w,WORD PTR [rbp+rcx*2+0xac0]
 100b719:	jne    0x100b7dc
 100b71f:	lea    rax,[rbp+0xb20]
 100b726:	mov    rbx,r12
 100b729:	cmp    r12w,WORD PTR [rbp+0xb20]
 100b731:	je     0x100b740
 100b733:	add    rax,0x2
 100b737:	inc    rbx
 100b73a:	cmp    r12w,WORD PTR [rax]
 100b73e:	jne    0x100b733
 100b740:	mov    rax,rbx
 100b743:	test   rbx,rbx
 100b746:	je     0x100b74c
 100b748:	lea    rax,[rbx-0x1]
 100b74c:	movzx  ecx,WORD PTR [rbp+rax*2+0xb20]
 100b754:	cmp    di,cx
 100b757:	je     0x100b78f
 100b759:	cmp    r11w,cx
 100b75d:	je     0x100b78f
 100b75f:	cmp    di,r15w
 100b763:	je     0x100b78f
 100b765:	cmp    r11w,r15w
 100b769:	je     0x100b78f
 100b76b:	lea    rcx,[rbp+0xb20]
 100b772:	mov    rdx,r14
 100b775:	lea    r8,[rip+0xffffffffffff6420]        # 0x1001b9c
 100b77c:	lea    rcx,[rcx+rbx*2]
 100b780:	sub    rdx,rbx
 100b783:	call   0x100c180
 100b788:	test   al,al
 100b78a:	je     0x100b7e7
 100b78c:	inc    rbx
 100b78f:	lea    r10,[rbp+0xb20]
 100b796:	mov    r9,r14
 100b799:	lea    r10,[r10+rbx*2]
 100b79d:	sub    r9,rbx
 100b7a0:	je     0x100b7dc
 100b7a2:	mov    rcx,r12
 100b7a5:	dec    r9
 100b7a8:	je     0x100b7cf
 100b7aa:	lea    r8,[rsp+0x30]
 100b7af:	mov    rax,r10
 100b7b2:	sub    r8,r10
 100b7b5:	movzx  edx,WORD PTR [r8+rax*1]
 100b7ba:	cmp    r12w,dx
 100b7be:	je     0x100b7cf
 100b7c0:	inc    rcx
 100b7c3:	mov    WORD PTR [rax],dx
 100b7c6:	add    rax,0x2
 100b7ca:	cmp    rcx,r9
 100b7cd:	jb     0x100b7b5
 100b7cf:	mov    WORD PTR [r10+rcx*2],r12w
 100b7d4:	cmp    r12w,WORD PTR [rsp+rcx*2+0x30]
 100b7da:	je     0x100b7e7
 100b7dc:	mov    ecx,0x7a
 100b7e1:	call   QWORD PTR [rip+0xffffffffffff5879]        # 0x1001060
 100b7e7:	lea    rdx,[rbp+0x180]
 100b7ee:	lea    rcx,[rbp+0xb20]
 100b7f5:	call   QWORD PTR [rip+0xffffffffffff5905]        # 0x1001100
 100b7fb:	cmp    rax,0xffffffffffffffff
 100b7ff:	jne    0x100b93a
 100b805:	mov    rax,r12
 100b808:	nop    DWORD PTR [rax+rax*1+0x0]
 100b810:	movzx  edx,WORD PTR [rbp+rax*2+0xd30]
 100b818:	cmp    r12w,dx
 100b81c:	je     0x100b831
 100b81e:	mov    WORD PTR [rbp+rax*2+0xb20],dx
 100b826:	inc    rax
 100b829:	cmp    rax,0x104
 100b82f:	jb     0x100b810
 100b831:	mov    WORD PTR [rbp+rax*2+0xb20],r12w
 100b83a:	cmp    r12w,WORD PTR [rbp+rax*2+0xd30]
 100b843:	jne    0x100b917
 100b849:	lea    rax,[rbp+0xb20]
 100b850:	mov    rbx,r12
 100b853:	cmp    r12w,WORD PTR [rbp+0xb20]
 100b85b:	je     0x100b86d
 100b85d:	nop    DWORD PTR [rax]
 100b860:	add    rax,0x2
 100b864:	inc    rbx
 100b867:	cmp    r12w,WORD PTR [rax]
 100b86b:	jne    0x100b860
 100b86d:	mov    rax,rbx
 100b870:	test   rbx,rbx
 100b873:	je     0x100b879
 100b875:	lea    rax,[rbx-0x1]
 100b879:	movzx  ecx,WORD PTR [rbp+rax*2+0xb20]
 100b881:	mov    edx,0x5c
 100b886:	cmp    dx,cx
 100b889:	je     0x100b8c5
 100b88b:	mov    eax,0x2f
 100b890:	cmp    ax,cx
 100b893:	je     0x100b8c5
 100b895:	cmp    dx,r15w
 100b899:	je     0x100b8c5
 100b89b:	cmp    ax,r15w
 100b89f:	je     0x100b8c5
 100b8a1:	lea    rcx,[rbp+0xb20]
 100b8a8:	mov    rdx,r14
 100b8ab:	lea    r8,[rip+0xffffffffffff62ea]        # 0x1001b9c
 100b8b2:	lea    rcx,[rcx+rbx*2]
 100b8b6:	sub    rdx,rbx
 100b8b9:	call   0x100c180
 100b8be:	test   al,al
 100b8c0:	je     0x100b922
 100b8c2:	inc    rbx
 100b8c5:	lea    r10,[rbp+0xb20]
 100b8cc:	lea    r10,[r10+rbx*2]
 100b8d0:	sub    r14,rbx
 100b8d3:	je     0x100b917
 100b8d5:	lea    r9,[r14-0x1]
 100b8d9:	mov    rcx,r12
 100b8dc:	test   r9,r9
 100b8df:	je     0x100b90a
 100b8e1:	lea    r8,[rsp+0x30]
 100b8e6:	mov    rax,r10
 100b8e9:	sub    r8,r10
 100b8ec:	nop    DWORD PTR [rax+0x0]
 100b8f0:	movzx  edx,WORD PTR [r8+rax*1]
 100b8f5:	cmp    r12w,dx
 100b8f9:	je     0x100b90a
 100b8fb:	inc    rcx
 100b8fe:	mov    WORD PTR [rax],dx
 100b901:	add    rax,0x2
 100b905:	cmp    rcx,r9
 100b908:	jb     0x100b8f0
 100b90a:	mov    WORD PTR [r10+rcx*2],r12w
 100b90f:	cmp    r12w,WORD PTR [rsp+rcx*2+0x30]
 100b915:	je     0x100b922
 100b917:	mov    ecx,0x7a
 100b91c:	call   QWORD PTR [rip+0xffffffffffff573e]        # 0x1001060
 100b922:	lea    rdx,[rsp+0x30]
 100b927:	lea    rcx,[rbp+0xb20]
 100b92e:	call   QWORD PTR [rip+0xffffffffffff57cc]        # 0x1001100
 100b934:	cmp    rax,0xffffffffffffffff
 100b938:	je     0x100b952
 100b93a:	mov    rcx,rax
 100b93d:	call   QWORD PTR [rip+0xffffffffffff57cd]        # 0x1001110
 100b943:	lea    rcx,[rbp+0xb20]
 100b94a:	call   QWORD PTR [rip+0xffffffffffff5740]        # 0x1001090
 100b950:	jmp    0x100b954
 100b952:	xor    eax,eax
 100b954:	mov    r15,QWORD PTR [rsp+0x1050]
 100b95c:	mov    r13,QWORD PTR [rsp+0x1098]
 100b964:	mov    rdi,QWORD PTR [rsp+0x1090]
 100b96c:	mov    rbx,QWORD PTR [rsp+0x1088]
 100b974:	mov    rcx,QWORD PTR [rbp+0xf40]
 100b97b:	xor    rcx,rsp
 100b97e:	call   0x100a730
 100b983:	add    rsp,0x1058
 100b98a:	pop    r14
 100b98c:	pop    r12
 100b98e:	pop    rsi
 100b98f:	pop    rbp
 100b990:	ret    
 100b991:	int3   
 100b992:	int3   
 100b993:	int3   
 100b994:	int3   
 100b995:	int3   
 100b996:	int3   
 100b997:	int3   
 100b998:	int3   
 100b999:	int3   
 100b99a:	int3   
 100b99b:	int3   
 100b99c:	int3   
 100b99d:	int3   
 100b99e:	int3   
 100b99f:	int3   
 100b9a0:	rex.W jmp QWORD PTR [rip+0xffffffffffff5671]        # 0x1001018
 100b9a7:	int3   
 100b9a8:	int3   
 100b9a9:	int3   
 100b9aa:	int3   
 100b9ab:	int3   
 100b9ac:	int3   
 100b9ad:	int3   
 100b9ae:	int3   
 100b9af:	int3   
 100b9b0:	rex push rbx
 100b9b2:	push   rbp
 100b9b3:	push   rsi
 100b9b4:	push   rdi
 100b9b5:	sub    rsp,0x468
 100b9bc:	mov    rax,QWORD PTR [rip+0x276d]        # 0x100e130
 100b9c3:	xor    rax,rsp
 100b9c6:	mov    QWORD PTR [rsp+0x450],rax
 100b9ce:	mov    esi,r9d
 100b9d1:	mov    ebx,edx
 100b9d3:	mov    rdi,r8
 100b9d6:	lea    r9,[rsp+0x30]
 100b9db:	lea    rdx,[rsp+0x240]
 100b9e3:	xor    ebp,ebp
 100b9e5:	mov    r8d,0x105
 100b9eb:	mov    QWORD PTR [rsp+0x20],0x105
 100b9f4:	mov    WORD PTR [rsp+0x30],bp
 100b9f9:	call   0x100ba40
 100b9fe:	test   al,al
 100ba00:	jne    0x100ba07
 100ba02:	mov    WORD PTR [rsp+0x30],bp
 100ba07:	lea    rcx,[rsp+0x30]
 100ba0c:	mov    r9d,esi
 100ba0f:	mov    r8,rdi
 100ba12:	mov    edx,ebx
 100ba14:	mov    BYTE PTR [rsp+0x20],0x1
 100ba19:	call   0x100bc50
 100ba1e:	mov    rcx,QWORD PTR [rsp+0x450]
 100ba26:	xor    rcx,rsp
 100ba29:	call   0x100a730
 100ba2e:	add    rsp,0x468
 100ba35:	pop    rdi
 100ba36:	pop    rsi
 100ba37:	pop    rbp
 100ba38:	pop    rbx
 100ba39:	ret    
 100ba3a:	int3   
 100ba3b:	int3   
 100ba3c:	int3   
 100ba3d:	int3   
 100ba3e:	int3   
 100ba3f:	int3   
 100ba40:	rex push rbx
 100ba42:	push   rsi
 100ba43:	push   rdi
 100ba44:	sub    rsp,0x250
 100ba4b:	mov    rax,QWORD PTR [rip+0x26de]        # 0x100e130
 100ba52:	xor    rax,rsp
 100ba55:	mov    QWORD PTR [rsp+0x240],rax
 100ba5d:	mov    rsi,rdx
 100ba60:	mov    rdi,r8
 100ba63:	lea    rdx,[rsp+0x30]
 100ba68:	mov    r8d,0x105
 100ba6e:	mov    rbx,r9
 100ba71:	call   QWORD PTR [rip+0xffffffffffff5621]        # 0x1001098
 100ba77:	test   eax,eax
 100ba79:	je     0x100bb1e
 100ba7f:	lea    r9,[rsp+0x20]
 100ba84:	lea    rcx,[rsp+0x30]
 100ba89:	mov    r8,rsi
 100ba8c:	mov    edx,edi
 100ba8e:	call   QWORD PTR [rip+0xffffffffffff5674]        # 0x1001108
 100ba94:	test   eax,eax
 100ba96:	je     0x100bb1e
 100ba9c:	mov    eax,eax
 100ba9e:	cmp    rax,rdi
 100baa1:	ja     0x100bb1e
 100baa3:	mov    rdi,QWORD PTR [rsp+0x290]
 100baab:	xor    esi,esi
 100baad:	cmp    si,WORD PTR [rbx]
 100bab0:	jne    0x100bac6
 100bab2:	mov    r8,QWORD PTR [rsp+0x20]
 100bab7:	mov    rdx,rdi
 100baba:	mov    rcx,rbx
 100babd:	call   0x100c180
 100bac2:	test   al,al
 100bac4:	je     0x100bb1e
 100bac6:	mov    rax,QWORD PTR [rsp+0x20]
 100bacb:	mov    rcx,rsi
 100bace:	mov    WORD PTR [rax],si
 100bad1:	mov    rax,rbx
 100bad4:	cmp    si,WORD PTR [rbx]
 100bad7:	je     0x100baec
 100bad9:	nop    DWORD PTR [rax+0x0]
 100bae0:	add    rax,0x2
 100bae4:	inc    rcx
 100bae7:	cmp    si,WORD PTR [rax]
 100baea:	jne    0x100bae0
 100baec:	mov    rax,rcx
 100baef:	mov    edx,0x2e
 100baf4:	test   rax,rax
 100baf7:	je     0x100bb02
 100baf9:	dec    rax
 100bafc:	cmp    dx,WORD PTR [rbx+rax*2]
 100bb00:	jne    0x100baf4
 100bb02:	cmp    dx,WORD PTR [rbx+rax*2]
 100bb06:	cmovne rax,rcx
 100bb0a:	lea    r10,[rbx+rax*2]
 100bb0e:	sub    rdi,rax
 100bb11:	jne    0x100bb3b
 100bb13:	mov    ecx,0x7a
 100bb18:	call   QWORD PTR [rip+0xffffffffffff5542]        # 0x1001060
 100bb1e:	xor    al,al
 100bb20:	mov    rcx,QWORD PTR [rsp+0x240]
 100bb28:	xor    rcx,rsp
 100bb2b:	call   0x100a730
 100bb30:	add    rsp,0x250
 100bb37:	pop    rdi
 100bb38:	pop    rsi
 100bb39:	pop    rbx
 100bb3a:	ret    
 100bb3b:	lea    r9,[rdi-0x1]
 100bb3f:	mov    rcx,rsi
 100bb42:	lea    r11,[rip+0xffffffffffff600f]        # 0x1001b58
 100bb49:	test   r9,r9
 100bb4c:	je     0x100bb79
 100bb4e:	mov    r8,r11
 100bb51:	mov    rax,r10
 100bb54:	sub    r8,r10
 100bb57:	nop    WORD PTR [rax+rax*1+0x0]
 100bb60:	movzx  edx,WORD PTR [r8+rax*1]
 100bb65:	cmp    si,dx
 100bb68:	je     0x100bb79
 100bb6a:	inc    rcx
 100bb6d:	mov    WORD PTR [rax],dx
 100bb70:	add    rax,0x2
 100bb74:	cmp    rcx,r9
 100bb77:	jb     0x100bb60
 100bb79:	mov    WORD PTR [r10+rcx*2],si
 100bb7e:	cmp    si,WORD PTR [r11+rcx*2]
 100bb83:	jne    0x100bb13
 100bb85:	mov    al,0x1
 100bb87:	jmp    0x100bb20
 100bb89:	int3   
 100bb8a:	int3   
 100bb8b:	int3   
 100bb8c:	int3   
 100bb8d:	int3   
 100bb8e:	int3   
 100bb8f:	int3   
 100bb90:	mov    QWORD PTR [rsp+0x8],rbx
 100bb95:	mov    QWORD PTR [rsp+0x10],rsi
 100bb9a:	mov    QWORD PTR [rsp+0x18],rdi
 100bb9f:	push   r14
 100bba1:	sub    rsp,0x20
 100bba5:	mov    rax,rcx
 100bba8:	mov    rdi,rcx
 100bbab:	xor    ecx,ecx
 100bbad:	mov    r14,r8
 100bbb0:	mov    rsi,rdx
 100bbb3:	mov    ebx,ecx
 100bbb5:	cmp    cx,WORD PTR [rax]
 100bbb8:	je     0x100bbcc
 100bbba:	nop    WORD PTR [rax+rax*1+0x0]
 100bbc0:	add    rax,0x2
 100bbc4:	inc    rbx
 100bbc7:	cmp    cx,WORD PTR [rax]
 100bbca:	jne    0x100bbc0
 100bbcc:	mov    rax,rbx
 100bbcf:	test   rbx,rbx
 100bbd2:	je     0x100bbd8
 100bbd4:	lea    rax,[rbx-0x1]
 100bbd8:	movzx  ecx,WORD PTR [rdi+rax*2]
 100bbdc:	mov    r8d,0x5c
 100bbe2:	cmp    r8w,cx
 100bbe6:	je     0x100bc1e
 100bbe8:	mov    edx,0x2f
 100bbed:	cmp    dx,cx
 100bbf0:	je     0x100bc1e
 100bbf2:	movzx  eax,WORD PTR [r14]
 100bbf6:	cmp    r8w,ax
 100bbfa:	je     0x100bc1e
 100bbfc:	cmp    dx,ax
 100bbff:	je     0x100bc1e
 100bc01:	mov    rdx,rsi
 100bc04:	lea    rcx,[rdi+rbx*2]
 100bc08:	lea    r8,[rip+0xffffffffffff5f8d]        # 0x1001b9c
 100bc0f:	sub    rdx,rbx
 100bc12:	call   0x100c180
 100bc17:	test   al,al
 100bc19:	je     0x100bc30
 100bc1b:	inc    rbx
 100bc1e:	sub    rsi,rbx
 100bc21:	lea    rcx,[rdi+rbx*2]
 100bc25:	mov    r8,r14
 100bc28:	mov    rdx,rsi
 100bc2b:	call   0x100c180
 100bc30:	mov    rbx,QWORD PTR [rsp+0x30]
 100bc35:	mov    rsi,QWORD PTR [rsp+0x38]
 100bc3a:	mov    rdi,QWORD PTR [rsp+0x40]
 100bc3f:	add    rsp,0x20
 100bc43:	pop    r14
 100bc45:	ret    
 100bc46:	int3   
 100bc47:	int3   
 100bc48:	int3   
 100bc49:	int3   
 100bc4a:	int3   
 100bc4b:	int3   
 100bc4c:	int3   
 100bc4d:	int3   
 100bc4e:	int3   
 100bc4f:	int3   
 100bc50:	mov    QWORD PTR [rsp+0x8],rbx
 100bc55:	push   rbp
 100bc56:	push   rsi
 100bc57:	push   rdi
 100bc58:	push   r12
 100bc5a:	push   r13
 100bc5c:	push   r14
 100bc5e:	push   r15
 100bc60:	lea    rbp,[rsp-0x1b0]
 100bc68:	sub    rsp,0x2b0
 100bc6f:	mov    rax,QWORD PTR [rip+0x24ba]        # 0x100e130
 100bc76:	xor    rax,rsp
 100bc79:	mov    QWORD PTR [rbp+0x1a0],rax
 100bc80:	mov    rax,QWORD PTR [rip+0xffffffffffff5e91]        # 0x1001b18
 100bc87:	xor    r13d,r13d
 100bc8a:	movsxd r14,r9d
 100bc8d:	mov    QWORD PTR [rsp+0x48],rax
 100bc92:	mov    rax,QWORD PTR [rip+0xffffffffffff5e87]        # 0x1001b20
 100bc99:	mov    r15,r8
 100bc9c:	mov    QWORD PTR [rsp+0x50],rax
 100bca1:	mov    rax,QWORD PTR [rip+0xffffffffffff5e80]        # 0x1001b28
 100bca8:	mov    r12d,edx
 100bcab:	mov    QWORD PTR [rsp+0x58],rax
 100bcb0:	mov    rax,QWORD PTR [rip+0xffffffffffff5e79]        # 0x1001b30
 100bcb7:	mov    rsi,rcx
 100bcba:	mov    QWORD PTR [rsp+0x60],rax
 100bcbf:	mov    rax,QWORD PTR [rip+0xffffffffffff5e72]        # 0x1001b38
 100bcc6:	mov    QWORD PTR [rsp+0x68],rax
 100bccb:	mov    rax,QWORD PTR [rip+0xffffffffffff5e6e]        # 0x1001b40
 100bcd2:	mov    QWORD PTR [rsp+0x70],rax
 100bcd7:	mov    rax,QWORD PTR [rip+0xffffffffffff5e6a]        # 0x1001b48
 100bcde:	mov    QWORD PTR [rsp+0x78],rax
 100bce3:	mov    eax,DWORD PTR [rip+0xffffffffffff5e67]        # 0x1001b50
 100bce9:	mov    DWORD PTR [rbp-0x80],eax
 100bcec:	test   r8,r8
 100bcef:	je     0x100bcf5
 100bcf1:	mov    WORD PTR [r8],r13w
 100bcf5:	test   r9d,r9d
 100bcf8:	jle    0x100bd47
 100bcfa:	mov    r9,r14
 100bcfd:	test   r14d,r14d
 100bd00:	je     0x100bd3c
 100bd02:	mov    rcx,r13
 100bd05:	dec    r9
 100bd08:	je     0x100bd2f
 100bd0a:	mov    rax,r8
 100bd0d:	lea    r8,[rsp+0x48]
 100bd12:	sub    r8,r15
 100bd15:	movzx  edx,WORD PTR [r8+rax*1]
 100bd1a:	cmp    r13w,dx
 100bd1e:	je     0x100bd2f
 100bd20:	inc    rcx
 100bd23:	mov    WORD PTR [rax],dx
 100bd26:	add    rax,0x2
 100bd2a:	cmp    rcx,r9
 100bd2d:	jb     0x100bd15
 100bd2f:	mov    WORD PTR [r15+rcx*2],r13w
 100bd34:	cmp    r13w,WORD PTR [rsp+rcx*2+0x48]
 100bd3a:	je     0x100bd47
 100bd3c:	mov    ecx,0x7a
 100bd41:	call   QWORD PTR [rip+0xffffffffffff5319]        # 0x1001060
 100bd47:	lea    rax,[rsp+0x48]
 100bd4c:	mov    rbx,r13
 100bd4f:	cmp    r13w,WORD PTR [rsp+0x48]
 100bd55:	je     0x100bd6d
 100bd57:	nop    WORD PTR [rax+rax*1+0x0]
 100bd60:	add    rax,0x2
 100bd64:	inc    rbx
 100bd67:	cmp    r13w,WORD PTR [rax]
 100bd6b:	jne    0x100bd60
 100bd6d:	mov    edi,r14d
 100bd70:	sub    edi,ebx
 100bd72:	test   rsi,rsi
 100bd75:	je     0x100bef4
 100bd7b:	cmp    r13w,WORD PTR [rsi]
 100bd7f:	je     0x100bef4
 100bd85:	lea    rax,[rbp-0x70]
 100bd89:	mov    r8,rsi
 100bd8c:	mov    rcx,r13
 100bd8f:	sub    r8,rax
 100bd92:	data16 data16 data16 data16 data16 nop WORD PTR [rax+rax*1+0x0]
 100bda0:	lea    rax,[r8+rcx*2]
 100bda4:	movzx  edx,WORD PTR [rbp+rax*1-0x70]
 100bda9:	cmp    r13w,dx
 100bdad:	je     0x100bdc0
 100bdaf:	mov    WORD PTR [rbp+rcx*2-0x70],dx
 100bdb4:	inc    rcx
 100bdb7:	cmp    rcx,0x104
 100bdbe:	jb     0x100bda0
 100bdc0:	mov    WORD PTR [rbp+rcx*2-0x70],r13w
 100bdc6:	cmp    r13w,WORD PTR [rsi+rcx*2]
 100bdcb:	je     0x100bdd8
 100bdcd:	mov    ecx,0x7a
 100bdd2:	call   QWORD PTR [rip+0xffffffffffff5288]        # 0x1001060
 100bdd8:	cmp    BYTE PTR [rbp+0x210],r13b
 100bddf:	jne    0x100be81
 100bde5:	lea    rax,[rbp-0x70]
 100bde9:	mov    rcx,r13
 100bdec:	cmp    r13w,WORD PTR [rbp-0x70]
 100bdf1:	je     0x100be00
 100bdf3:	add    rax,0x2
 100bdf7:	inc    rcx
 100bdfa:	cmp    r13w,WORD PTR [rax]
 100bdfe:	jne    0x100bdf3
 100be00:	mov    rax,rcx
 100be03:	mov    edx,0x2e
 100be08:	test   rax,rax
 100be0b:	je     0x100be17
 100be0d:	dec    rax
 100be10:	cmp    dx,WORD PTR [rbp+rax*2-0x70]
 100be15:	jne    0x100be08
 100be17:	cmp    dx,WORD PTR [rbp+rax*2-0x70]
 100be1c:	lea    r10,[rbp-0x70]
 100be20:	mov    r9d,0x105
 100be26:	cmovne rax,rcx
 100be2a:	lea    r10,[r10+rax*2]
 100be2e:	sub    r9,rax
 100be31:	je     0x100be76
 100be33:	mov    rcx,r13
 100be36:	lea    r11,[rip+0xffffffffffff5d1b]        # 0x1001b58
 100be3d:	dec    r9
 100be40:	je     0x100be6a
 100be42:	mov    r8,r11
 100be45:	mov    rax,r10
 100be48:	sub    r8,r10
 100be4b:	nop    DWORD PTR [rax+rax*1+0x0]
 100be50:	movzx  edx,WORD PTR [r8+rax*1]
 100be55:	cmp    r13w,dx
 100be59:	je     0x100be6a
 100be5b:	inc    rcx
 100be5e:	mov    WORD PTR [rax],dx
 100be61:	add    rax,0x2
 100be65:	cmp    rcx,r9
 100be68:	jb     0x100be50
 100be6a:	mov    WORD PTR [r10+rcx*2],r13w
 100be6f:	cmp    r13w,WORD PTR [r11+rcx*2]
 100be74:	je     0x100be81
 100be76:	mov    ecx,0x7a
 100be7b:	call   QWORD PTR [rip+0xffffffffffff51df]        # 0x1001060
 100be81:	test   edi,edi
 100be83:	jle    0x100bed2
 100be85:	movsxd r9,edi
 100be88:	mov    eax,ebx
 100be8a:	mov    rcx,r13
 100be8d:	lea    r10,[r15+rax*2]
 100be91:	dec    r9
 100be94:	je     0x100beba
 100be96:	lea    r8,[rbp-0x70]
 100be9a:	mov    rax,r10
 100be9d:	sub    r8,r10
 100bea0:	movzx  edx,WORD PTR [r8+rax*1]
 100bea5:	cmp    r13w,dx
 100bea9:	je     0x100beba
 100beab:	inc    rcx
 100beae:	mov    WORD PTR [rax],dx
 100beb1:	add    rax,0x2
 100beb5:	cmp    rcx,r9
 100beb8:	jb     0x100bea0
 100beba:	mov    WORD PTR [r10+rcx*2],r13w
 100bebf:	cmp    r13w,WORD PTR [rbp+rcx*2-0x70]
 100bec5:	je     0x100bed2
 100bec7:	mov    ecx,0x7a
 100becc:	call   QWORD PTR [rip+0xffffffffffff518e]        # 0x1001060
 100bed2:	lea    rax,[rbp-0x70]
 100bed6:	mov    rcx,r13
 100bed9:	cmp    r13w,WORD PTR [rbp-0x70]
 100bede:	je     0x100beed
 100bee0:	add    rax,0x2
 100bee4:	inc    rcx
 100bee7:	cmp    r13w,WORD PTR [rax]
 100beeb:	jne    0x100bee0
 100beed:	add    ebx,ecx
 100beef:	mov    edi,r14d
 100bef2:	sub    edi,ebx
 100bef4:	test   r12d,r12d
 100bef7:	je     0x100bf8b
 100befd:	lea    rax,[rsp+0x40]
 100bf02:	mov    QWORD PTR [rsp+0x30],r13
 100bf07:	mov    r9d,0x400
 100bf0d:	mov    r8d,r12d
 100bf10:	xor    edx,edx
 100bf12:	mov    ecx,0x1300
 100bf17:	mov    DWORD PTR [rsp+0x28],r13d
 100bf1c:	mov    QWORD PTR [rsp+0x20],rax
 100bf21:	call   QWORD PTR [rip+0xffffffffffff5161]        # 0x1001088
 100bf27:	test   eax,eax
 100bf29:	je     0x100bf86
 100bf2b:	test   edi,edi
 100bf2d:	jle    0x100bf44
 100bf2f:	mov    eax,ebx
 100bf31:	lea    r8,[rip+0xffffffffffff5c2c]        # 0x1001b64
 100bf38:	movsxd rdx,edi
 100bf3b:	lea    rcx,[r15+rax*2]
 100bf3f:	call   0x100c180
 100bf44:	add    ebx,0x2
 100bf47:	sub    r14d,ebx
 100bf4a:	test   r14d,r14d
 100bf4d:	jle    0x100bf60
 100bf4f:	mov    r8,QWORD PTR [rsp+0x40]
 100bf54:	lea    rcx,[r15+rbx*2]
 100bf58:	movsxd rdx,r14d
 100bf5b:	call   0x100c180
 100bf60:	mov    rcx,QWORD PTR [rsp+0x40]
 100bf65:	mov    rdx,r13
 100bf68:	mov    rax,rcx
 100bf6b:	cmp    r13w,WORD PTR [rcx]
 100bf6f:	je     0x100bf7e
 100bf71:	add    rax,0x2
 100bf75:	inc    rdx
 100bf78:	cmp    r13w,WORD PTR [rax]
 100bf7c:	jne    0x100bf71
 100bf7e:	add    ebx,edx
 100bf80:	call   QWORD PTR [rip+0xffffffffffff50c2]        # 0x1001048
 100bf86:	lea    eax,[rbx+0x1]
 100bf89:	jmp    0x100bfe4
 100bf8b:	test   edi,edi
 100bf8d:	jle    0x100bfe1
 100bf8f:	movsxd r9,edi
 100bf92:	mov    eax,ebx
 100bf94:	mov    rcx,r13
 100bf97:	lea    r10,[r15+rax*2]
 100bf9b:	lea    r11,[rip+0xffffffffffff5632]        # 0x10015d4
 100bfa2:	dec    r9
 100bfa5:	je     0x100bfca
 100bfa7:	mov    r8,r11
 100bfaa:	mov    rax,r10
 100bfad:	sub    r8,r10
 100bfb0:	movzx  edx,WORD PTR [r8+rax*1]
 100bfb5:	cmp    r13w,dx
 100bfb9:	je     0x100bfca
 100bfbb:	inc    rcx
 100bfbe:	mov    WORD PTR [rax],dx
 100bfc1:	add    rax,0x2
 100bfc5:	cmp    rcx,r9
 100bfc8:	jb     0x100bfb0
 100bfca:	mov    WORD PTR [r10+rcx*2],r13w
 100bfcf:	cmp    r13w,WORD PTR [r11+rcx*2]
 100bfd4:	je     0x100bfe1
 100bfd6:	mov    ecx,0x7a
 100bfdb:	call   QWORD PTR [rip+0xffffffffffff507f]        # 0x1001060
 100bfe1:	lea    eax,[rbx+0x2]
 100bfe4:	mov    rcx,QWORD PTR [rbp+0x1a0]
 100bfeb:	xor    rcx,rsp
 100bfee:	call   0x100a730
 100bff3:	mov    rbx,QWORD PTR [rsp+0x2f0]
 100bffb:	add    rsp,0x2b0
 100c002:	pop    r15
 100c004:	pop    r14
 100c006:	pop    r13
 100c008:	pop    r12
 100c00a:	pop    rdi
 100c00b:	pop    rsi
 100c00c:	pop    rbp
 100c00d:	ret    
 100c00e:	int3   
 100c00f:	int3   
 100c010:	int3   
 100c011:	int3   
 100c012:	int3   
 100c013:	int3   
 100c014:	int3   
 100c015:	int3   
 100c016:	int3   
 100c017:	int3   
 100c018:	int3   
 100c019:	int3   
 100c01a:	int3   
 100c01b:	int3   
 100c01c:	int3   
 100c01d:	int3   
 100c01e:	int3   
 100c01f:	int3   
 100c020:	rex push rbx
 100c022:	push   rsi
 100c023:	push   rdi
 100c024:	sub    rsp,0x90
 100c02b:	mov    rax,QWORD PTR [rip+0x20fe]        # 0x100e130
 100c032:	xor    rax,rsp
 100c035:	mov    QWORD PTR [rsp+0x80],rax
 100c03d:	movzx  esi,r8w
 100c041:	mov    r8,r9
 100c044:	mov    rdi,rdx
 100c047:	mov    rbx,rcx
 100c04a:	call   0x100c180
 100c04f:	test   al,al
 100c051:	je     0x100c154
 100c057:	mov    rax,QWORD PTR [rsp+0xd8]
 100c05f:	mov    QWORD PTR [rsp+0xc0],rbp
 100c067:	xor    ebp,ebp
 100c069:	test   rax,rax
 100c06c:	je     0x100c08d
 100c06e:	cmp    bp,WORD PTR [rax]
 100c071:	je     0x100c08d
 100c073:	lea    r8,[rip+0xffffffffffff5b0e]        # 0x1001b88
 100c07a:	mov    rdx,rdi
 100c07d:	mov    rcx,rbx
 100c080:	call   0x100bb90
 100c085:	test   al,al
 100c087:	je     0x100c130
 100c08d:	movzx  r11d,si
 100c091:	lea    r9,[rsp+0x20]
 100c096:	mov    WORD PTR [rsp+0x20],bp
 100c09b:	lea    rcx,[rsp+0x22]
 100c0a0:	mov    r10d,0x1
 100c0a6:	data16 nop WORD PTR [rax+rax*1+0x0]
 100c0b0:	mov    eax,0xcccccccd
 100c0b5:	add    rcx,0x2
 100c0b9:	mul    r11d
 100c0bc:	mov    r8d,edx
 100c0bf:	shr    r8d,0x3
 100c0c3:	movzx  eax,r8w
 100c0c7:	shl    ax,0x2
 100c0cb:	lea    edx,[rax+r8*1]
 100c0cf:	add    dx,dx
 100c0d2:	sub    r11w,dx
 100c0d6:	add    r11w,0x30
 100c0db:	mov    WORD PTR [rcx-0x2],r11w
 100c0e0:	mov    r11d,r8d
 100c0e3:	test   r8d,r8d
 100c0e6:	je     0x100c0f1
 100c0e8:	inc    r10d
 100c0eb:	cmp    r10d,0x29
 100c0ef:	jb     0x100c0b0
 100c0f1:	lea    rax,[rsp+0x20]
 100c0f6:	sub    rcx,0x2
 100c0fa:	cmp    rax,rcx
 100c0fd:	jae    0x100c11c
 100c0ff:	nop
 100c100:	movzx  eax,WORD PTR [rcx]
 100c103:	movzx  edx,WORD PTR [r9]
 100c107:	sub    rcx,0x2
 100c10b:	mov    WORD PTR [r9],ax
 100c10f:	mov    WORD PTR [rcx+0x2],dx
 100c113:	add    r9,0x2
 100c117:	cmp    r9,rcx
 100c11a:	jb     0x100c100
 100c11c:	lea    r8,[rsp+0x20]
 100c121:	mov    rdx,rdi
 100c124:	mov    rcx,rbx
 100c127:	call   0x100bb90
 100c12c:	test   al,al
 100c12e:	jne    0x100c134
 100c130:	xor    al,al
 100c132:	jmp    0x100c14c
 100c134:	mov    r8,QWORD PTR [rsp+0xd0]
 100c13c:	mov    rdx,rdi
 100c13f:	mov    rcx,rbx
 100c142:	call   0x100bb90
 100c147:	test   al,al
 100c149:	setne  al
 100c14c:	mov    rbp,QWORD PTR [rsp+0xc0]
 100c154:	mov    rcx,QWORD PTR [rsp+0x80]
 100c15c:	xor    rcx,rsp
 100c15f:	call   0x100a730
 100c164:	add    rsp,0x90
 100c16b:	pop    rdi
 100c16c:	pop    rsi
 100c16d:	pop    rbx
 100c16e:	ret    
 100c16f:	int3   
 100c170:	int3   
 100c171:	int3   
 100c172:	int3   
 100c173:	int3   
 100c174:	int3   
 100c175:	int3   
 100c176:	int3   
 100c177:	int3   
 100c178:	int3   
 100c179:	int3   
 100c17a:	int3   
 100c17b:	int3   
 100c17c:	int3   
 100c17d:	int3   
 100c17e:	int3   
 100c17f:	int3   
 100c180:	sub    rsp,0x28
 100c184:	mov    r11,r8
 100c187:	mov    r10,rcx
 100c18a:	test   rdx,rdx
 100c18d:	jne    0x100c1a1
 100c18f:	mov    ecx,0x7a
 100c194:	call   QWORD PTR [rip+0xffffffffffff4ec6]        # 0x1001060
 100c19a:	xor    al,al
 100c19c:	add    rsp,0x28
 100c1a0:	ret    
 100c1a1:	lea    r8,[rdx-0x1]
 100c1a5:	mov    QWORD PTR [rsp+0x20],rbx
 100c1aa:	xor    ebx,ebx
 100c1ac:	mov    ecx,ebx
 100c1ae:	test   r8,r8
 100c1b1:	je     0x100c1d9
 100c1b3:	mov    r9,r11
 100c1b6:	mov    rax,r10
 100c1b9:	sub    r9,r10
 100c1bc:	nop    DWORD PTR [rax+0x0]
 100c1c0:	movzx  edx,WORD PTR [r9+rax*1]
 100c1c5:	cmp    bx,dx
 100c1c8:	je     0x100c1d9
 100c1ca:	inc    rcx
 100c1cd:	mov    WORD PTR [rax],dx
 100c1d0:	add    rax,0x2
 100c1d4:	cmp    rcx,r8
 100c1d7:	jb     0x100c1c0
 100c1d9:	mov    WORD PTR [r10+rcx*2],bx
 100c1de:	cmp    bx,WORD PTR [r11+rcx*2]
 100c1e3:	mov    rbx,QWORD PTR [rsp+0x20]
 100c1e8:	jne    0x100c18f
 100c1ea:	mov    al,0x1
 100c1ec:	add    rsp,0x28
 100c1f0:	ret    
 100c1f1:	int3   
 100c1f2:	int3   
 100c1f3:	int3   
 100c1f4:	int3   
 100c1f5:	int3   
 100c1f6:	int3   
 100c1f7:	int3   
 100c1f8:	jmp    QWORD PTR [rip+0xffffffffffff4e02]        # 0x1001000
 100c1fe:	int3   
 100c1ff:	int3   
 100c200:	int3   
 100c201:	int3   
 100c202:	int3   
 100c203:	int3   
 100c204:	jmp    QWORD PTR [rip+0xffffffffffff4f4e]        # 0x1001158
 100c20a:	int3   
 100c20b:	int3   
 100c20c:	int3   
 100c20d:	int3   
 100c20e:	int3   
 100c20f:	int3   
 100c210:	jmp    QWORD PTR [rip+0xffffffffffff4f3a]        # 0x1001150
 100c216:	int3   
 100c217:	int3   
 100c218:	int3   
 100c219:	int3   
 100c21a:	int3   
 100c21b:	int3   
 100c21c:	int3   
 100c21d:	int3   
 100c21e:	int3   
 100c21f:	int3   
 100c220:	int3   
 100c221:	int3   
 100c222:	int3   
 100c223:	int3   
 100c224:	int3   
 100c225:	int3   
 100c226:	rex push rbp
 100c228:	sub    rsp,0x20
 100c22c:	mov    rbp,rdx
 100c22f:	mov    rax,QWORD PTR [rcx]
 100c232:	mov    rdx,rcx
 100c235:	mov    ecx,DWORD PTR [rax]
 100c237:	call   0x100aaf6
 100c23c:	nop
 100c23d:	add    rsp,0x20
 100c241:	pop    rbp
 100c242:	ret    
 100c243:	int3   
 100c244:	int3   
 100c245:	int3   
 100c246:	int3   
 100c247:	int3   
 100c248:	int3   
 100c249:	int3   
 100c24a:	rex push rbp
 100c24c:	sub    rsp,0x20
 100c250:	mov    rbp,rdx
 100c253:	mov    ecx,0x8
 100c258:	call   0x100acea
 100c25d:	nop
 100c25e:	add    rsp,0x20
 100c262:	pop    rbp
 100c263:	ret    
 100c264:	int3   
 100c265:	int3   
 100c266:	int3   
 100c267:	int3   
 100c268:	int3   
 100c269:	int3   
 100c26a:	int3   
 100c26b:	int3   
 100c26c:	int3   
 100c26d:	int3   
 100c26e:	int3   
 100c26f:	int3   
 100c270:	rex push rbp
 100c272:	sub    rsp,0x20
 100c276:	mov    rbp,rdx
 100c279:	mov    rax,QWORD PTR [rcx]
 100c27c:	xor    ecx,ecx
 100c27e:	cmp    DWORD PTR [rax],0xc0000005
 100c284:	sete   cl
 100c287:	mov    eax,ecx
 100c289:	mov    eax,ecx
 100c28b:	add    rsp,0x20
 100c28f:	pop    rbp
 100c290:	ret    
 100c291:	int3   
 100c292:	int3   
 100c293:	int3   
 100c294:	int3   
 100c295:	int3   
 100c296:	int3   
 100c297:	int3   
 100c298:	sbb    DWORD PTR [rcx],esp
 100c29a:	add    eax,0x32010f00
 100c29f:	add    BYTE PTR [rax],cl
 100c2a1:	lock (bad) 
 100c2a3:	rol    BYTE PTR [rax+rsi*1],0x0
 100c2a7:	add    BYTE PTR [rax],al
 100c2a9:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 100c2aa:	add    BYTE PTR [rax],al
 100c2ac:	(bad)  
 100c2ad:	add    DWORD PTR [rax],eax
 100c2af:	add    BYTE PTR [rcx],ah
 100c2b1:	xor    BYTE PTR [rax],cl
 100c2b3:	add    BYTE PTR [rax],dh
 100c2b5:	in     al,0x2e
 100c2b7:	add    BYTE PTR [rsp+rsi*2],cl
 100c2ba:	xor    BYTE PTR [rax],al
 100c2bc:	or     BYTE PTR [rcx+rsi*1+0x0],ah
 100c2c0:	add    al,0x54
 100c2c2:	cmp    BYTE PTR [rax],al
 100c2c4:	sbb    al,0x0
 100c2c7:	add    BYTE PTR [rcx+0x1c],ah
 100c2ca:	add    BYTE PTR [rax],al
 100c2cc:	cwde   
 100c2cd:	ret    0x0
 100c2d0:	and    DWORD PTR [rax],ecx
 100c2d2:	add    al,BYTE PTR [rax]
 100c2d4:	or     ah,dl
 100c2d6:	(bad)  
 100c2d7:	add    BYTE PTR [rcx+0x1c],ah
 100c2da:	add    BYTE PTR [rax],al
 100c2dc:	out    0x1c,eax
 100c2de:	add    BYTE PTR [rax],al
 100c2e0:	mov    al,0xc2
 100c2e2:	add    BYTE PTR [rax],al
 100c2e4:	and    DWORD PTR [rax],eax
 100c2e6:	add    BYTE PTR [rax],al
 100c2e8:	(bad)  
 100c2e9:	sbb    al,0x0
 100c2eb:	add    bh,ah
 100c2ed:	sbb    al,0x0
 100c2ef:	add    BYTE PTR [rax+0x210000c2],dh
 100c2f5:	add    BYTE PTR [rax],al
 100c2f7:	add    BYTE PTR [rax+0x1c],al
 100c2fa:	add    BYTE PTR [rax],al
 100c2fc:	(bad)  
 100c2fd:	sbb    al,0x0
 100c2ff:	add    BYTE PTR [rax+0x10000c2],bl
 100c305:	(bad)  
 100c307:	add    BYTE PTR [rdi],cl
 100c309:	ror    BYTE PTR [rbx],cl
 100c30b:	ror    BYTE PTR [rcx],1
 100c30d:	jo     0x100c317
 100c30f:	push   rax
 100c310:	and    DWORD PTR [rip+0xfffffffff425000a],esp        # 0xfffffffff525c320
 100c316:	or     DWORD PTR [rax],eax
 100c318:	sbb    ah,ah
 100c31a:	or     al,BYTE PTR [rax]
 100c31c:	pinsrw mm1,WORD PTR [rbx],0x0
 100c320:	or     ah,BYTE PTR [rsp+rcx*1+0x0]
 100c324:	add    eax,0x80000d34
 100c329:	and    DWORD PTR [rax],eax
 100c32b:	add    bh,cl
 100c32d:	and    DWORD PTR [rax],eax
 100c32f:	add    BYTE PTR [rbx+rax*8],al
 100c332:	add    BYTE PTR [rax],al
 100c334:	and    DWORD PTR [rax],eax
 100c336:	or     al,BYTE PTR [rax]
 100c338:	add    ah,dh
 100c33a:	or     DWORD PTR [rax],eax
 100c33c:	add    ah,ah
 100c33e:	or     al,BYTE PTR [rax]
 100c340:	add    ah,al
 100c342:	or     eax,DWORD PTR [rax]
 100c344:	add    BYTE PTR [rsp+rcx*1+0x0],ah
 100c348:	add    BYTE PTR [rcx*1+0x218000],dh
 100c34f:	add    bh,cl
 100c351:	and    DWORD PTR [rax],eax
 100c353:	add    BYTE PTR [rbx+rax*8],al
 100c356:	add    BYTE PTR [rax],al
 100c358:	and    DWORD PTR [rax],eax
 100c35a:	add    BYTE PTR [rax],al
 100c35c:	and    BYTE PTR [rcx],0x0
 100c35f:	add    bh,cl
 100c361:	and    DWORD PTR [rax],eax
 100c363:	add    BYTE PTR [rbx+rax*8],al
 100c366:	add    BYTE PTR [rax],al
 100c368:	sbb    DWORD PTR [rax-0x1b47fff6],edi
 100c36e:	nop
 100c36f:	add    BYTE PTR [rcx],bl
 100c371:	add    DWORD PTR [rcx+0x8f00a00],edx
 100c377:	rol    BYTE PTR [rsi],1
 100c379:	rol    BYTE PTR [rax+riz*2],0x3
 100c37d:	xor    BYTE PTR [rdx],al
 100c37f:	push   rax
 100c380:	add    BYTE PTR [rdi+0x4700000],ah
 100c386:	add    BYTE PTR [rax],al
 100c388:	and    DWORD PTR [rax],ecx
 100c38a:	add    al,BYTE PTR [rax]
 100c38c:	or     BYTE PTR [rdx+rbx*4+0x0],dh
 100c390:	adc    BYTE PTR [rip+0x25ed0000],ah        # 0x26edc396
 100c396:	add    BYTE PTR [rax],al
 100c398:	push   0x210000c3
 100c39d:	add    BYTE PTR [rax],al
 100c39f:	add    BYTE PTR [rax],dl
 100c3a1:	and    eax,0x25ed0000
 100c3a6:	add    BYTE PTR [rax],al
 100c3a8:	push   0x210000c3
 100c3ad:	add    BYTE PTR [rdx],al
 100c3af:	add    BYTE PTR [rax],al
 100c3b1:	je     0x100c34d
 100c3b3:	add    BYTE PTR [rax],dl
 100c3b5:	and    eax,0x25ed0000
 100c3ba:	add    BYTE PTR [rax],al
 100c3bc:	push   0x210000c3
 100c3c1:	add    BYTE PTR [rax],al
 100c3c3:	add    BYTE PTR [rax],dl
 100c3c5:	and    eax,0x25ed0000
 100c3ca:	add    BYTE PTR [rax],al
 100c3cc:	push   0x190000c3
 100c3d1:	or     DWORD PTR cs:[rax],eax
 100c3d4:	sbb    eax,0x1d005764
 100c3d9:	xor    al,0x56
 100c3db:	add    BYTE PTR [rip+0xe005001],bl        # 0xf0113e2
 100c3e1:	loopne 0x100c3ef
 100c3e3:	jo     0x100c3f0
 100c3e5:	push   rax
 100c3e6:	add    BYTE PTR [rax],al
 100c3e8:	add    BYTE PTR [rdi+0x2700000],ah
 100c3ee:	add    BYTE PTR [rax],al
 100c3f0:	add    DWORD PTR [rsi],eax
 100c3f2:	add    al,BYTE PTR [rax]
 100c3f4:	(bad)  
 100c3f5:	push   rdx
 100c3f6:	add    dh,BYTE PTR [rax]
 100c3f8:	sbb    DWORD PTR [rbp+0xb],esp
 100c3fb:	add    BYTE PTR [rbp+0x74],ah
 100c3fe:	sub    eax,DWORD PTR [rax]
 100c400:	adc    eax,DWORD PTR [rcx]
 100c402:	sub    al,0x0
 100c404:	or     al,0xf0
 100c406:	or     ah,al
 100c408:	or     al,dl
 100c40a:	(bad)  
 100c40b:	rol    BYTE PTR [rax+riz*2],0x3
 100c40f:	push   rax
 100c410:	add    dh,BYTE PTR [rax]
 100c412:	add    BYTE PTR [rax],al
 100c414:	add    BYTE PTR [rdi+0x1400000],ah
 100c41a:	add    BYTE PTR [rax],al
 100c41c:	add    DWORD PTR [rdx],ecx
 100c41e:	add    al,0x0
 100c420:	or     dh,BYTE PTR [rax+rcx*1]
 100c423:	add    BYTE PTR [rdx],cl
 100c425:	push   rdx
 100c426:	(bad)  
 100c427:	jo     0x100c42a
 100c429:	clts   
 100c42b:	add    BYTE PTR [rdi],cl
 100c42d:	or     BYTE PTR fs:[rax],al
 100c430:	sysenter 
 100c432:	(bad)  
 100c433:	add    BYTE PTR [rdi],cl
 100c435:	xor    cl,BYTE PTR [rbx]
 100c437:	jo     0x100c45a
 100c439:	add    eax,0x54050002
 100c43e:	(bad)  
 100c43f:	add    al,al
 100c441:	sub    eax,0x2e4f0000
 100c446:	add    BYTE PTR [rax],al
 100c448:	sub    ah,al
 100c44a:	add    BYTE PTR [rax],al
 100c44c:	and    DWORD PTR [rax],eax
 100c44e:	add    BYTE PTR [rax],al
 100c450:	shr    BYTE PTR [rip+0x2e4f0000],0x0        # 0x2f4fc457
 100c457:	add    BYTE PTR [rax],ch
 100c459:	(bad)  
 100c45a:	add    BYTE PTR [rax],al
 100c45c:	add    DWORD PTR [rcx],edx
 100c45e:	or     BYTE PTR [rax],al
 100c460:	adc    DWORD PTR [rdx*1+0xdb21100],esi
 100c467:	lock or edx,eax
 100c46a:	or     eax,eax
 100c46c:	(bad)  
 100c46d:	jo     0x100c475
 100c46f:	(bad)  
 100c470:	and    DWORD PTR [rax],ebx
 100c472:	add    al,0x0
 100c474:	sbb    ah,ah
 100c476:	adc    al,0x0
 100c478:	or     BYTE PTR [rdx+rdx*1+0x0],dl
 100c47c:	movabs al,ds:0x5c0000303000002f
 100c485:	(bad)  
 100c486:	add    BYTE PTR [rax],al
 100c488:	and    DWORD PTR [rax],eax
 100c48a:	add    BYTE PTR [rax],al
 100c48c:	movabs al,ds:0x5c0000303000002f
 100c495:	(bad)  
 100c496:	add    BYTE PTR [rax],al
 100c498:	and    DWORD PTR [rax],eax
 100c49a:	add    al,0x0
 100c49c:	add    ah,ah
 100c49e:	adc    al,0x0
 100c4a0:	add    BYTE PTR [rdx+rdx*1+0x0],dl
 100c4a4:	movabs al,ds:0x5c0000303000002f
 100c4ad:	(bad)  
 100c4ae:	add    BYTE PTR [rax],al
 100c4b0:	and    DWORD PTR [rax],eax
 100c4b2:	add    BYTE PTR [rax],al
 100c4b4:	movabs al,ds:0x5c0000303000002f
 100c4bd:	(bad)  
 100c4be:	add    BYTE PTR [rax],al
 100c4c0:	sbb    DWORD PTR [rax],esi
 100c4c2:	or     eax,DWORD PTR [rax]
 100c4c4:	(bad)  
 100c4c5:	xor    al,0x5d
 100c4c7:	add    BYTE PTR [rdi],bl
 100c4c9:	add    DWORD PTR [rdx+0x0],edx
 100c4cc:	adc    al,dh
 100c4ce:	(bad)  
 100c4cf:	loopne 0x100c4dd
 100c4d1:	ror    BYTE PTR [rdx],1
 100c4d3:	ror    BYTE PTR [rax],0x70
 100c4d6:	(bad)  
 100c4d7:	(bad)  
 100c4d8:	(bad)  
 100c4d9:	push   rax
 100c4da:	add    BYTE PTR [rax],al
 100c4dc:	add    BYTE PTR [rdi+0x2800000],ah
 100c4e2:	add    BYTE PTR [rax],al
 100c4e4:	add    DWORD PTR [rdi],edx
 100c4e6:	(bad)  
 100c4e7:	add    BYTE PTR [rdi],dl
 100c4e9:	ret    0xe013
 100c4ec:	adc    eax,edx
 100c4ee:	xadd   BYTE PTR [rip+0xb600c70],cl        # 0xc60d165
 100c4f5:	xor    BYTE PTR [rax],al
 100c4f7:	add    BYTE PTR [rcx],ah
 100c4f9:	add    eax,0xf4050002
 100c4fe:	or     al,0x0
 100c500:	push   rax
 100c501:	cmp    BYTE PTR [rax],al
 100c503:	add    BYTE PTR [rax],cl
 100c505:	cmp    DWORD PTR [rax],eax
 100c507:	add    ah,ah
 100c509:	(bad)  
 100c50a:	add    BYTE PTR [rax],al
 100c50c:	and    DWORD PTR [rax],eax
 100c50e:	add    al,BYTE PTR [rax]
 100c510:	add    ah,dh
 100c512:	or     al,0x0
 100c514:	push   rax
 100c515:	cmp    BYTE PTR [rax],al
 100c517:	add    BYTE PTR [rax],cl
 100c519:	cmp    DWORD PTR [rax],eax
 100c51b:	add    ah,ah
 100c51d:	(bad)  
 100c51e:	add    BYTE PTR [rax],al
 100c520:	and    DWORD PTR [rax],ecx
 100c522:	add    al,BYTE PTR [rax]
 100c524:	or     BYTE PTR [rsi+rdx*1+0x0],dl
 100c528:	xor    eax,0x3f000039
 100c52d:	cmp    DWORD PTR [rax],eax
 100c52f:	add    BYTE PTR [rax*8+0x210000],cl
 100c536:	add    BYTE PTR [rax],al
 100c538:	xor    eax,0x3f000039
 100c53d:	cmp    DWORD PTR [rax],eax
 100c53f:	add    BYTE PTR [rax*8+0x210000],cl
 100c546:	add    BYTE PTR [rax],al
 100c548:	push   rax
 100c549:	cmp    BYTE PTR [rax],al
 100c54b:	add    BYTE PTR [rax],cl
 100c54d:	cmp    DWORD PTR [rax],eax
 100c54f:	add    ah,ah
 100c551:	(bad)  
 100c552:	add    BYTE PTR [rax],al
 100c554:	sbb    DWORD PTR [rax],esp
 100c556:	add    eax,0x30010e00
 100c55b:	add    BYTE PTR [rdi],al
 100c55d:	loopne 0x100c564
 100c55f:	jo     0x100c565
 100c561:	xor    BYTE PTR [rax],al
 100c563:	add    BYTE PTR [rax],al
 100c565:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 100c566:	add    BYTE PTR [rax],al
 100c568:	(bad)  
 100c569:	add    DWORD PTR [rax],eax
 100c56b:	add    BYTE PTR [rcx],ah
 100c56d:	adc    al,0xa
 100c56f:	add    BYTE PTR [rsp+rsi*8],dl
 100c572:	add    BYTE PTR cs:[rax],dl
 100c575:	(bad)  
 100c576:	(bad)  
 100c577:	add    BYTE PTR [rsp+rax*8],cl
 100c57a:	(bad)  
 100c57b:	add    BYTE PTR [rax],cl
 100c57d:	fs add BYTE PTR ss:[rsp+rdx*2],al
 100c582:	xor    eax,0x3f1000
 100c587:	add    BYTE PTR [rdi+rdi*1+0x0],bl
 100c58b:	add    BYTE PTR [rbp+rax*8+0x0],dl
 100c58f:	add    BYTE PTR [rcx],ah
 100c591:	add    BYTE PTR [rax],al
 100c593:	add    BYTE PTR [rax],dl
 100c595:	(bad)  
 100c596:	add    BYTE PTR [rax],al
 100c598:	pop    rsp
 100c599:	(bad)  
 100c59a:	add    BYTE PTR [rax],al
 100c59c:	push   rsp
 100c59d:	(bad)
 100c5a0:	sbb    DWORD PTR [rcx],esp
 100c5a2:	(bad)  
 100c5a3:	add    BYTE PTR [rdi],cl
 100c5a5:	add    DWORD PTR [rdx],esi
 100c5a7:	add    BYTE PTR [rax],cl
 100c5a9:	lock (bad) 
 100c5ab:	loopne 0x100c5b1
 100c5ad:	(bad)  
 100c5ae:	add    edx,DWORD PTR [rax+0x2]
 100c5b1:	xor    BYTE PTR [rax],al
 100c5b3:	add    BYTE PTR [rax],al
 100c5b5:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 100c5b6:	add    BYTE PTR [rax],al
 100c5b8:	jo     0x100c5bb
 100c5ba:	add    BYTE PTR [rax],al
 100c5bc:	and    DWORD PTR [rax],esp
 100c5be:	(bad)  
 100c5bf:	add    BYTE PTR [rax],ah
 100c5c1:	(bad)  
 100c5c2:	xor    BYTE PTR [rax],al
 100c5c4:	adc    al,0xc4
 100c5c6:	xor    DWORD PTR [rax],eax
 100c5c8:	or     BYTE PTR [rdx+rdi*1+0x0],dh
 100c5cc:	rex
 100c5cd:	rex.XB add BYTE PTR [r8],al
 100c5d0:	mov    bl,0x43
 100c5d2:	add    BYTE PTR [rax],al
 100c5d4:	movabs al,ds:0x40000000210000c5
 100c5dd:	rex.XB add BYTE PTR [r8],al
 100c5e0:	mov    bl,0x43
 100c5e2:	add    BYTE PTR [rax],al
 100c5e4:	movabs al,ds:0x1a00072b190000c5
 100c5ed:	je     0x100c63a
 100c5ef:	add    BYTE PTR [rdx],bl
 100c5f1:	xor    al,0x4a
 100c5f3:	add    BYTE PTR [rdx],bl
 100c5f5:	add    DWORD PTR [rax+0x0],ecx
 100c5f8:	or     edx,DWORD PTR [rax+0x0]
 100c5fb:	add    BYTE PTR [rax],al
 100c5fd:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 100c5fe:	add    BYTE PTR [rax],al
 100c600:	xor    BYTE PTR [rdx],al
 100c602:	add    BYTE PTR [rax],al
 100c604:	add    DWORD PTR [rdi],ecx
 100c606:	(bad)  
 100c607:	add    BYTE PTR [rdi],cl
 100c609:	or     DWORD PTR fs:[rax],eax
 100c60c:	sysenter 
 100c60e:	or     BYTE PTR [rax],al
 100c610:	rsqrtps xmm1,XMMWORD PTR [rbx]
 100c613:	jo     0x100c616
 100c615:	(bad)  
 100c616:	add    al,BYTE PTR [rax]
 100c618:	(bad)  
 100c619:	xor    al,BYTE PTR [rdx]
 100c61b:	xor    BYTE PTR [rcx],ah
 100c61d:	add    eax,0x74050002
 100c622:	(bad)  
 100c623:	add    BYTE PTR [rax+0x4d],dl
 100c626:	add    BYTE PTR [rax],al
 100c628:	ins    BYTE PTR es:[rdi],dx
 100c629:	rex.WRB add BYTE PTR [r8],r8b
 100c62c:	adc    al,0xc6
 100c62e:	add    BYTE PTR [rax],al
 100c630:	and    DWORD PTR [rax],eax
 100c632:	add    BYTE PTR [rax],al
 100c634:	push   rax
 100c635:	rex.WRB add BYTE PTR [r8],r8b
 100c638:	ins    BYTE PTR es:[rdi],dx
 100c639:	rex.WRB add BYTE PTR [r8],r8b
 100c63c:	adc    al,0xc6
 100c63e:	add    BYTE PTR [rax],al
 100c640:	add    DWORD PTR [rax],ebx
 100c642:	add    al,0x0
 100c644:	sbb    BYTE PTR [rax+0x3],ch
 100c647:	add    BYTE PTR [rsi],al
 100c649:	jb     0x100c64d
 100c64b:	xor    BYTE PTR [rcx],al
 100c64d:	add    al,0x1
 100c64f:	add    BYTE PTR [rdx+rax*2],al
 100c652:	add    BYTE PTR [rax],al
 100c654:	add    DWORD PTR [rcx],ecx
 100c656:	add    al,0x0
 100c658:	or     DWORD PTR [rdx+0x5],esi
 100c65b:	lock add esp,DWORD PTR [rax+0x2]
 100c65f:	push   rax
 100c660:	and    DWORD PTR [rax+rcx*1],edx
 100c663:	add    BYTE PTR [rsp+riz*8],dl
 100c666:	(bad)  
 100c667:	add    BYTE PTR [rdi],cl
 100c669:	(bad)  
 100c66a:	(bad)  
 100c66b:	add    BYTE PTR [rdx],cl
 100c66d:	je     0x100c67e
 100c66f:	add    BYTE PTR [rip+0x10000e34],al        # 0x1100d4a9
 100c675:	push   rax
 100c676:	add    BYTE PTR [rax],al
 100c678:	icebp  
 100c679:	push   rax
 100c67a:	add    BYTE PTR [rax],al
 100c67c:	push   rsp
 100c67d:	mov    BYTE PTR [rax],0x0
 100c680:	and    DWORD PTR [rax],eax
 100c682:	or     BYTE PTR [rax],al
 100c684:	add    ah,ah
 100c686:	(bad)  
 100c687:	add    BYTE PTR [rax],al
 100c689:	(bad)  
 100c68a:	(bad)  
 100c68b:	add    BYTE PTR [rax],al
 100c68d:	je     0x100c69e
 100c68f:	add    BYTE PTR [rax],al
 100c691:	xor    al,0xe
 100c693:	add    BYTE PTR [rax],dl
 100c695:	push   rax
 100c696:	add    BYTE PTR [rax],al
 100c698:	icebp  
 100c699:	push   rax
 100c69a:	add    BYTE PTR [rax],al
 100c69c:	push   rsp
 100c69d:	mov    BYTE PTR [rax],0x0
 100c6a0:	sbb    DWORD PTR [rdi],ebx
 100c6a2:	add    eax,0xb340d00
 100c6a7:	add    DWORD PTR [rip+0x6010801],ecx        # 0x701ceae
 100c6ad:	jo     0x100c6af
 100c6af:	add    BYTE PTR [rax],al
 100c6b1:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 100c6b2:	add    BYTE PTR [rax],al
 100c6b4:	xor    BYTE PTR [rax],cl
 100c6b6:	add    BYTE PTR [rax],al
 100c6b8:	add    DWORD PTR [rsi],eax
 100c6ba:	add    al,BYTE PTR [rax]
 100c6bc:	(bad)  
 100c6bd:	push   rdx
 100c6be:	add    dh,BYTE PTR [rax]
 100c6c0:	add    DWORD PTR [rsi],eax
 100c6c2:	add    al,BYTE PTR [rax]
 100c6c4:	(bad)  
 100c6c5:	xor    al,BYTE PTR [rdx]
 100c6c7:	xor    BYTE PTR [rcx],bl
 100c6c9:	sub    BYTE PTR [rsi],al
 100c6cb:	add    BYTE PTR [rdi],dl
 100c6cd:	add    ecx,ebx
 100c6cf:	add    BYTE PTR [rax],cl
 100c6d1:	lock (bad) 
 100c6d3:	loopne 0x100c6d9
 100c6d5:	rol    BYTE PTR [rdx],0x50
 100c6d8:	add    BYTE PTR [rdi+0x6a00000],ah
 100c6de:	add    BYTE PTR [rax],al
 100c6e0:	and    DWORD PTR [rax],ecx
 100c6e2:	add    al,BYTE PTR [rax]
 100c6e4:	or     BYTE PTR [rdi+rdx*8+0x0],dh
 100c6e8:	(bad)  
 100c6e9:	push   rsi
 100c6ea:	add    BYTE PTR [rax],al
 100c6ec:	(bad)  
 100c6ed:	push   rsi
 100c6ee:	add    BYTE PTR [rax],al
 100c6f0:	enter  0xc6,0x0
 100c6f4:	and    DWORD PTR [rax],ebx
 100c6f6:	(bad)  
 100c6f7:	add    BYTE PTR [rax],bl
 100c6f9:	fadd   DWORD PTR fs:[rax]
 100c6fc:	adc    BYTE PTR [rax+riz*8],dh
 100c6ff:	add    BYTE PTR [rax],cl
 100c701:	(bad)  
 100c702:	(bad)  
 100c703:	add    ch,dl
 100c705:	push   rsi
 100c706:	add    BYTE PTR [rax],al
 100c708:	in     al,dx
 100c709:	push   rsi
 100c70a:	add    BYTE PTR [rax],al
 100c70c:	loopne 0x100c6d4
 100c70e:	add    BYTE PTR [rax],al
 100c710:	and    DWORD PTR [rax],eax
 100c712:	add    BYTE PTR [rax],al
 100c714:	(bad)  
 100c715:	push   rsi
 100c716:	add    BYTE PTR [rax],al
 100c718:	in     al,dx
 100c719:	push   rsi
 100c71a:	add    BYTE PTR [rax],al
 100c71c:	loopne 0x100c6e4
 100c71e:	add    BYTE PTR [rax],al
 100c720:	and    DWORD PTR [rax],eax
 100c722:	add    BYTE PTR [rax],al
 100c724:	(bad)  
 100c725:	push   rsi
 100c726:	add    BYTE PTR [rax],al
 100c728:	(bad)  
 100c729:	push   rsi
 100c72a:	add    BYTE PTR [rax],al
 100c72c:	enter  0xc6,0x0
 100c730:	add    DWORD PTR [rsi],eax
 100c732:	add    al,BYTE PTR [rax]
 100c734:	(bad)  
 100c735:	jb     0x100c739
 100c737:	xor    BYTE PTR [rcx],al
 100c739:	(bad)  
 100c73a:	add    al,BYTE PTR [rax]
 100c73c:	(bad)  
 100c73d:	xor    al,BYTE PTR [rdx]
 100c73f:	xor    BYTE PTR [rcx],al
 100c741:	clts   
 100c743:	add    BYTE PTR [rdi],cl
 100c745:	fs (bad) 
 100c747:	add    BYTE PTR [rdi],cl
 100c749:	xor    al,0x6
 100c74b:	add    BYTE PTR [rdi],cl
 100c74d:	xor    cl,BYTE PTR [rbx]
 100c74f:	jo     0x100c752
 100c751:	or     r8b,BYTE PTR [rax]
 100c754:	rex.R push rsp
 100c756:	(bad)  
 100c757:	add    BYTE PTR [rip+0x15000974],dl        # 0x1600d0d1
 100c75d:	or     BYTE PTR fs:[rax],al
 100c760:	adc    eax,0x15000734
 100c765:	xor    dl,BYTE PTR [rcx]
 100c767:	loopne 0x100c76a
 100c769:	sbb    DWORD PTR [rbx],eax
 100c76b:	add    BYTE PTR [rcx],bl
 100c76d:	(bad)  
 100c76e:	adc    eax,0x301470
 100c773:	add    BYTE PTR [rcx],bl
 100c775:	sbb    DWORD PTR [rdx],eax
 100c777:	add    BYTE PTR [rdi],al
 100c779:	add    DWORD PTR [rcx+0x0],ecx
 100c77c:	add    BYTE PTR [rdi+0x2300000],ah
 100c782:	add    BYTE PTR [rax],al
 100c784:	add    DWORD PTR [rdx],ecx
 100c786:	add    al,0x0
 100c788:	or     dh,BYTE PTR [rsi+rax*1]
 100c78b:	add    BYTE PTR [rdx],cl
 100c78d:	xor    al,BYTE PTR [rsi]
 100c78f:	jo     0x100c7aa
 100c791:	sbb    DWORD PTR [rdx],eax
 100c793:	add    BYTE PTR [rdi],al
 100c795:	add    DWORD PTR [rbx],ebx
 100c797:	add    BYTE PTR [rax],al
 100c799:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 100c79a:	add    BYTE PTR [rax],al
 100c79c:	rol    BYTE PTR [rax],0x0
 100c79f:	add    BYTE PTR [rcx],al
 100c7a1:	adc    ecx,DWORD PTR [rax]
 100c7a3:	add    BYTE PTR [rbx],dl
 100c7a5:	push   rsp
 100c7a6:	or     al,0x0
 100c7a8:	adc    esi,DWORD PTR [rbx+rcx*1]
 100c7ab:	add    BYTE PTR [rbx],dl
 100c7ad:	push   rdx
 100c7ae:	(bad)  
 100c7b0:	or     eax,0x21600be0
 100c7b5:	add    eax,0x74050002
 100c7ba:	or     al,BYTE PTR [rax]
 100c7bc:	and    BYTE PTR [rdi+0x0],bl
 100c7bf:	add    BYTE PTR [rax+0x5f],bh
 100c7c2:	add    BYTE PTR [rax],al
 100c7c4:	movabs al,ds:0x20000000210000c7
 100c7cd:	pop    rdi
 100c7ce:	add    BYTE PTR [rax],al
 100c7d0:	js     0x100c831
 100c7d2:	add    BYTE PTR [rax],al
 100c7d4:	movabs al,ds:0xf000721190000c7
 100c7dd:	xor    al,0x61
 100c7df:	add    BYTE PTR [rdi],cl
 100c7e1:	add    DWORD PTR [rdx+0x0],ebx
 100c7e4:	or     BYTE PTR [rax+0x7],dh
 100c7e7:	(bad)  
 100c7e8:	(bad)  
 100c7e9:	push   rax
 100c7ea:	add    BYTE PTR [rax],al
 100c7ec:	add    BYTE PTR [rdi+0x2c00000],ah
 100c7f2:	add    BYTE PTR [rax],al
 100c7f4:	sbb    DWORD PTR [rsi],ebx
 100c7f6:	or     BYTE PTR [rax],al
 100c7f8:	setb   BYTE PTR [rbx]
 100c7fb:	lock or eax,esp
 100c7fe:	(bad)  
 100c7ff:	rol    BYTE PTR [rip+0x3600470],0x50        # 0x460cc76
 100c806:	add    dh,BYTE PTR [rax]
 100c808:	add    BYTE PTR [rdi+0x400000],ah
 100c80e:	add    BYTE PTR [rax],al
 100c810:	sbb    DWORD PTR [rip+0x10b0003],ebx        # 0x20bc819
 100c816:	rex.WRX add BYTE PTR [rax+r10*2],r8b
 100c81a:	add    BYTE PTR [rax],al
 100c81c:	add    BYTE PTR [rdi+0x2400000],ah
 100c822:	add    BYTE PTR [rax],al
 100c824:	and    DWORD PTR [rdx],edx
 100c826:	or     BYTE PTR [rax],al
 100c828:	adc    dh,ah
 100c82a:	rex.WX add BYTE PTR [rsi],cl
 100c82d:	(bad)  
 100c82e:	rex.WR add BYTE PTR [rax],r9b
 100c831:	(bad)  
 100c832:	rex.WRB add BYTE PTR [r12+rsi*1],r8b
 100c836:	push   rax
 100c837:	add    BYTE PTR [rax+0x63],dh
 100c83a:	add    BYTE PTR [rax],al
 100c83c:	xchg   esp,eax
 100c83d:	movsxd eax,DWORD PTR [rax]
 100c83f:	add    BYTE PTR [rax],dl
 100c841:	enter  0x0,0x21
 100c845:	or     BYTE PTR [rdx],al
 100c847:	add    BYTE PTR [rax],cl
 100c849:	in     al,0x4b
 100c84b:	add    BYTE PTR [rbx+riz*2+0x64150000],dl
 100c852:	add    BYTE PTR [rax],al
 100c854:	and    al,0xc8
 100c856:	add    BYTE PTR [rax],al
 100c858:	and    DWORD PTR [rax],edx
 100c85a:	add    al,0x0
 100c85c:	adc    BYTE PTR [rdx+rdx*2+0x0],dh
 100c860:	or     BYTE PTR [rcx+rdx*2+0x0],ah
 100c864:	adc    eax,0x73000064
 100c869:	add    BYTE PTR fs:[rax],al
 100c86c:	rex.R enter 0x0,0x21
 100c871:	add    BYTE PTR [rax],al
 100c873:	add    BYTE PTR [rip+0x73000064],dl        # 0x7400c8dd
 100c879:	add    BYTE PTR fs:[rax],al
 100c87c:	rex.R enter 0x0,0x21
 100c881:	add    BYTE PTR [rax],al
 100c883:	add    BYTE PTR [rbx+riz*2+0x64150000],dl
 100c88a:	add    BYTE PTR [rax],al
 100c88c:	and    al,0xc8
 100c88e:	add    BYTE PTR [rax],al
 100c890:	and    DWORD PTR [rax],eax
 100c892:	add    BYTE PTR [rax],al
 100c894:	jo     0x100c8f9
 100c896:	add    BYTE PTR [rax],al
 100c898:	xchg   esp,eax
 100c899:	movsxd eax,DWORD PTR [rax]
 100c89b:	add    BYTE PTR [rax],dl
 100c89d:	enter  0x0,0x1
 100c8a1:	or     al,BYTE PTR [rax+rax*1]
 100c8a4:	or     dh,BYTE PTR [rcx+rcx*1]
 100c8a7:	add    BYTE PTR [rdx],cl
 100c8a9:	push   rdx
 100c8aa:	(bad)  
 100c8ab:	jo     0x100c8ae
 100c8ad:	(bad)  
 100c8ae:	or     DWORD PTR [rax],eax
 100c8b0:	(bad)  
 100c8b1:	je     0x100c8b8
 100c8b3:	add    BYTE PTR [rsi],dl
 100c8b5:	fs add al,0x0
 100c8b8:	(bad)  
 100c8b9:	push   rsp
 100c8ba:	add    eax,DWORD PTR [rax]
 100c8bc:	(bad)  
 100c8bd:	xor    al,0x2
 100c8bf:	add    BYTE PTR [rsi],dl
 100c8c1:	loopne 0x100c8c3
 100c8c3:	add    BYTE PTR [rcx],bl
 100c8c5:	(bad)  
 100c8c6:	add    eax,0x51340d00
 100c8cb:	add    BYTE PTR [rip+0x6004c01],cl        # 0x70114d2
 100c8d1:	jo     0x100c8d3
 100c8d3:	add    BYTE PTR [rax],al
 100c8d5:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 100c8d6:	add    BYTE PTR [rax],al
 100c8d8:	push   rax
 100c8d9:	add    al,BYTE PTR [rax]
 100c8db:	add    BYTE PTR [rcx],ah
 100c8dd:	or     BYTE PTR [rdx],al
 100c8df:	add    BYTE PTR [rax],cl
 100c8e1:	fs push rax
 100c8e3:	add    al,dh
 100c8e5:	push   0x0
 100c8e7:	add    BYTE PTR [rdi],bh
 100c8e9:	imul   eax,DWORD PTR [rax],0x0
 100c8ec:	(bad)  
 100c8ed:	enter  0x0,0x21
 100c8f1:	add    BYTE PTR [rax],al
 100c8f3:	add    al,dh
 100c8f5:	push   0x0
 100c8f7:	add    BYTE PTR [rdi],bh
 100c8f9:	imul   eax,DWORD PTR [rax],0x0
 100c8fc:	(bad)  
 100c8fd:	enter  0x0,0x21
 100c901:	add    BYTE PTR [rdx],al
 100c903:	add    BYTE PTR [rax],al
 100c905:	fs push rax
 100c907:	add    al,dh
 100c909:	push   0x0
 100c90b:	add    BYTE PTR [rdi],bh
 100c90d:	imul   eax,DWORD PTR [rax],0x0
 100c910:	(bad)  
 100c911:	enter  0x0,0x1
 100c915:	add    al,0x1
 100c917:	add    BYTE PTR [rdx+rax*2],al
 100c91a:	add    BYTE PTR [rax],al
 100c91c:	and    DWORD PTR [rdx],ecx
 100c91e:	add    al,0x0
 100c920:	or     dh,BYTE PTR [rsp+rax*1+0x0]
 100c924:	add    eax,0x30000734
 100c929:	ins    BYTE PTR es:[rdi],dx
 100c92a:	add    BYTE PTR [rax],al
 100c92c:	(bad)  
 100c92d:	ins    BYTE PTR es:[rdi],dx
 100c92e:	add    BYTE PTR [rax],al
 100c930:	adc    al,0xc9
 100c932:	add    BYTE PTR [rax],al
 100c934:	and    DWORD PTR [rax],eax
 100c936:	add    al,0x0
 100c938:	add    BYTE PTR [rsp+rax*1+0x0],dh
 100c93c:	add    BYTE PTR [rdi+rax*1],dh
 100c93f:	add    BYTE PTR [rax],dh
 100c941:	ins    BYTE PTR es:[rdi],dx
 100c942:	add    BYTE PTR [rax],al
 100c944:	(bad)  
 100c945:	ins    BYTE PTR es:[rdi],dx
 100c946:	add    BYTE PTR [rax],al
 100c948:	adc    al,0xc9
 100c94a:	add    BYTE PTR [rax],al
 100c94c:	and    DWORD PTR [rax],eax
 100c94e:	add    BYTE PTR [rax],al
 100c950:	xor    BYTE PTR [rax+rax*1+0x0],ch
 100c954:	(bad)  
 100c955:	ins    BYTE PTR es:[rdi],dx
 100c956:	add    BYTE PTR [rax],al
 100c958:	adc    al,0xc9
 100c95a:	add    BYTE PTR [rax],al
 100c95c:	add    DWORD PTR [rsi],eax
 100c95e:	add    al,BYTE PTR [rax]
 100c960:	(bad)  
 100c961:	xor    al,BYTE PTR [rdx]
 100c963:	jo     0x100c986
 100c965:	add    eax,0x34050002
 100c96a:	(bad)  
 100c96b:	add    BYTE PTR [rax-0x14ffff93],dh
 100c971:	ins    DWORD PTR es:[rdi],dx
 100c972:	add    BYTE PTR [rax],al
 100c974:	pop    rsp
 100c975:	leave  
 100c976:	add    BYTE PTR [rax],al
 100c978:	and    DWORD PTR [rax],eax
 100c97a:	add    al,BYTE PTR [rax]
 100c97c:	add    BYTE PTR [rdi+rax*1],dh
 100c97f:	add    BYTE PTR [rax-0x14ffff93],dh
 100c985:	ins    DWORD PTR es:[rdi],dx
 100c986:	add    BYTE PTR [rax],al
 100c988:	pop    rsp
 100c989:	leave  
 100c98a:	add    BYTE PTR [rax],al
 100c98c:	sbb    DWORD PTR [rsi+0x4],ebx
 100c98f:	add    BYTE PTR [rsi+0x34],bl
 100c992:	rex.WR add BYTE PTR [rdi],r8b
 100c995:	add    DWORD PTR [rbp+0x0],ecx
 100c998:	add    BYTE PTR [rdi+0x2500000],ah
 100c99e:	add    BYTE PTR [rax],al
 100c9a0:	add    DWORD PTR [rsi],edx
 100c9a2:	or     DWORD PTR [rax],eax
 100c9a4:	(bad)  
 100c9a5:	je     0x100c9ac
 100c9a7:	add    BYTE PTR [rsi],dl
 100c9a9:	fs add al,0x0
 100c9ac:	(bad)  
 100c9ad:	push   rsp
 100c9ae:	add    eax,DWORD PTR [rax]
 100c9b0:	(bad)  
 100c9b1:	xor    al,0x2
 100c9b3:	add    BYTE PTR [rsi],dl
 100c9b5:	loopne 0x100c9b7
 100c9b7:	add    BYTE PTR [rcx],bl
 100c9b9:	sbb    DWORD PTR [rdx],eax
 100c9bb:	add    BYTE PTR [rdi],al
 100c9bd:	add    DWORD PTR [rcx+0x0],ecx
 100c9c0:	add    BYTE PTR [rdi+0x2300000],ah
 100c9c6:	add    BYTE PTR [rax],al
 100c9c8:	and    DWORD PTR [rax],ecx
 100c9ca:	add    al,BYTE PTR [rax]
 100c9cc:	or     BYTE PTR [rax+rcx*2],dh
 100c9cf:	add    BYTE PTR [rax+0x71],dl
 100c9d2:	add    BYTE PTR [rax],al
 100c9d4:	shl    DWORD PTR [rcx+0x0],0x0
 100c9d8:	mov    eax,0x210000c9
 100c9dd:	add    BYTE PTR [rax],al
 100c9df:	add    BYTE PTR [rax+0x71],dl
 100c9e2:	add    BYTE PTR [rax],al
 100c9e4:	shl    DWORD PTR [rcx+0x0],0x0
 100c9e8:	mov    eax,0x190000c9
 100c9ed:	sub    eax,0x11c0007
 100c9f2:	mov    es,WORD PTR [rbx]
 100c9f4:	(bad)  
 100c9f5:	rol    BYTE PTR [rip+0x3600470],1        # 0x460ce6b
 100c9fb:	xor    BYTE PTR [rdx],al
 100c9fd:	push   rax
 100c9fe:	add    BYTE PTR [rax],al
 100ca00:	add    BYTE PTR [rdi+0x1c600000],ah
 100ca06:	add    BYTE PTR [rax],al
 100ca08:	and    DWORD PTR [rdx],esi
 100ca0a:	(bad)  
 100ca0b:	add    BYTE PTR [rdx],dh
 100ca0d:	hlt    
 100ca0e:	xchg   esi,eax
 100ca0f:	add    esp,DWORD PTR [rsp+riz*8]
 100ca12:	xchg   ebp,eax
 100ca13:	add    ecx,DWORD PTR [rax]
 100ca15:	(bad)  
 100ca16:	xchg   esp,eax
 100ca17:	add    esi,DWORD PTR [rax]
 100ca19:	jb     0x100ca1b
 100ca1b:	add    BYTE PTR [rax+0x73],bh
 100ca1e:	add    BYTE PTR [rax],al
 100ca20:	in     al,dx
 100ca21:	leave  
 100ca22:	add    BYTE PTR [rax],al
 100ca24:	sbb    DWORD PTR [rcx+rcx*1],esp
 100ca27:	add    BYTE PTR [rdx],dl
 100ca29:	add    DWORD PTR [rax+rax*1+0xb],ecx
 100ca2d:	lock or eax,esp
 100ca30:	(bad)  
 100ca31:	rol    BYTE PTR [rip+0x3600470],0x50        # 0x460cea8
 100ca38:	add    dh,BYTE PTR [rax]
 100ca3a:	add    BYTE PTR [rax],al
 100ca3c:	add    BYTE PTR [rdi+0x2500000],ah
 100ca42:	add    BYTE PTR [rax],al
 100ca44:	and    DWORD PTR [rax],ecx
 100ca46:	add    al,BYTE PTR [rax]
 100ca48:	or     ah,dl
 100ca4a:	push   rsp
 100ca4b:	add    al,ah
 100ca4d:	fwait
 100ca4e:	add    BYTE PTR [rax],al
 100ca50:	and    bl,BYTE PTR [rbp-0x35dc0000]
 100ca56:	add    BYTE PTR [rax],al
 100ca58:	and    DWORD PTR [rax],eax
 100ca5a:	add    BYTE PTR [rax],al
 100ca5c:	loopne 0x100c9f9
 100ca5e:	add    BYTE PTR [rax],al
 100ca60:	and    bl,BYTE PTR [rbp-0x35dc0000]
 100ca66:	add    BYTE PTR [rax],al
 100ca68:	and    DWORD PTR [rax],eax
 100ca6a:	add    al,BYTE PTR [rax]
 100ca6c:	add    ah,dl
 100ca6e:	push   rsp
 100ca6f:	add    al,ah
 100ca71:	fwait
 100ca72:	add    BYTE PTR [rax],al
 100ca74:	and    bl,BYTE PTR [rbp-0x35dc0000]
 100ca7a:	add    BYTE PTR [rax],al
 100ca7c:	add    DWORD PTR [rcx+rax*1],eax
 100ca7f:	add    BYTE PTR [rdx+riz*2],al
 100ca82:	add    BYTE PTR [rax],al
 100ca84:	add    DWORD PTR [rsi],eax
 100ca86:	add    al,BYTE PTR [rax]
 100ca88:	(bad)  
 100ca89:	xor    al,BYTE PTR [rdx]
 100ca8b:	push   rax
 100ca8c:	or     DWORD PTR [rdx],ecx
 100ca8e:	add    al,0x0
 100ca90:	or     dh,BYTE PTR [rsi+rax*1]
 100ca93:	add    BYTE PTR [rdx],cl
 100ca95:	xor    al,BYTE PTR [rsi]
 100ca97:	jo     0x100ca83
 100ca99:	stos   BYTE PTR es:[rdi],al
 100ca9a:	add    BYTE PTR [rax],al
 100ca9c:	add    DWORD PTR [rax],eax
 100ca9e:	add    BYTE PTR [rax],al
 100caa0:	sub    ah,BYTE PTR [rax+rax*1+0xa56800]
 100caa7:	add    BYTE PTR [rsi],ah
 100caa9:	ret    0x0
 100caac:	push   0x10000a5
 100cab1:	add    al,0x1
 100cab3:	add    BYTE PTR [rdx+rax*2],al
 100cab6:	add    BYTE PTR [rax],al
 100cab8:	add    DWORD PTR [rcx+rax*1],eax
 100cabb:	add    BYTE PTR [rdx+rax*2],al
 100cabe:	add    BYTE PTR [rax],al
 100cac0:	add    DWORD PTR [rsi],eax
 100cac2:	add    al,BYTE PTR [rax]
 100cac4:	(bad)  
 100cac5:	xor    al,BYTE PTR [rdx]
 100cac7:	xor    BYTE PTR [rcx],al
 100cac9:	add    al,0x1
 100cacb:	add    BYTE PTR [rdx+rax*2],al
 100cace:	add    BYTE PTR [rax],al
 100cad0:	add    DWORD PTR [rax],eax
 100cad2:	add    BYTE PTR [rax],al
 100cad4:	add    DWORD PTR [rdx+rax*1],ecx
 100cad7:	add    BYTE PTR [rcx+rax*1],cl
 100cada:	adc    DWORD PTR [rax],eax
 100cadc:	add    BYTE PTR [rax],al
 100cade:	add    BYTE PTR [rax],al
 100cae0:	add    DWORD PTR [rcx+rax*1],eax
 100cae3:	add    BYTE PTR [rdx+rdx*1],al
 100cae6:	add    BYTE PTR [rax],al
 100cae8:	add    DWORD PTR [rcx+rax*1],eax
 100caeb:	add    BYTE PTR [rdx+rax*2],al
 100caee:	add    BYTE PTR [rax],al
 100caf0:	add    DWORD PTR [rcx+rax*1],eax
 100caf3:	add    BYTE PTR [rdx+rax*2],al
 100caf6:	add    BYTE PTR [rax],al
 100caf8:	add    DWORD PTR [rsi],eax
 100cafa:	add    al,BYTE PTR [rax]
 100cafc:	(bad)  
 100cafd:	xor    al,BYTE PTR [rdx]
 100caff:	push   rax
 100cb00:	adc    DWORD PTR [rsi],eax
 100cb02:	add    al,BYTE PTR [rax]
 100cb04:	(bad)  
 100cb05:	xor    al,BYTE PTR [rdx]
 100cb07:	xor    dl,ch
 100cb09:	stos   BYTE PTR es:[rdi],al
 100cb0a:	add    BYTE PTR [rax],al
 100cb0c:	add    DWORD PTR [rax],eax
 100cb0e:	add    BYTE PTR [rax],al
 100cb10:	retf   
 100cb11:	test   eax,0xaa310000
 100cb16:	add    BYTE PTR [rax],al
 100cb18:	rex.WX ret 0x0
 100cb1c:	add    BYTE PTR [rax],al
 100cb1e:	add    BYTE PTR [rax],al
 100cb20:	add    DWORD PTR [rcx+rax*1],eax
 100cb23:	add    BYTE PTR [rdx+rax*2],al
 100cb26:	add    BYTE PTR [rax],al
 100cb28:	add    DWORD PTR [rdx],ecx
 100cb2a:	add    al,0x0
 100cb2c:	or     dh,BYTE PTR [rsi+rax*1]
 100cb2f:	add    BYTE PTR [rdx],cl
 100cb31:	xor    al,BYTE PTR [rsi]
 100cb33:	jo     0x100cb36
 100cb35:	or     al,BYTE PTR [rax+rax*1]
 100cb38:	or     dh,BYTE PTR [rsi+rax*1]
 100cb3b:	add    BYTE PTR [rdx],cl
 100cb3d:	xor    al,BYTE PTR [rsi]
 100cb3f:	jo     0x100cb42
 100cb41:	(bad)  
 100cb42:	add    al,BYTE PTR [rax]
 100cb44:	(bad)  
 100cb45:	xor    al,BYTE PTR [rdx]
 100cb47:	push   rax
 100cb48:	or     DWORD PTR [rcx+rax*1],eax
 100cb4b:	add    BYTE PTR [rdx+rax*2],al
 100cb4e:	add    BYTE PTR [rax],al
 100cb50:	(bad)  
 100cb51:	stos   BYTE PTR es:[rdi],al
 100cb52:	add    BYTE PTR [rax],al
 100cb54:	add    DWORD PTR [rax],eax
 100cb56:	add    BYTE PTR [rax],al
 100cb58:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 100cb59:	stos   DWORD PTR es:[rdi],eax
 100cb5a:	add    BYTE PTR [rax],al
 100cb5c:	fisubr DWORD PTR [rbx-0x3d900000]
 100cb62:	add    BYTE PTR [rax],al
 100cb64:	fisubr DWORD PTR [rbx+0xa010000]
 100cb6a:	add    al,0x0
 100cb6c:	or     dh,BYTE PTR [rax+rcx*1]
 100cb6f:	add    BYTE PTR [rdx],cl
 100cb71:	xor    al,BYTE PTR [rsi]
 100cb73:	jo     0x100cb76
 100cb75:	add    al,0x1
 100cb77:	add    BYTE PTR [rdx+rax*2],al
 100cb7a:	add    BYTE PTR [rax],al
 100cb7c:	add    DWORD PTR [rcx+rax*1],eax
 100cb7f:	add    BYTE PTR [rdx+rax*2],al
 100cb82:	add    BYTE PTR [rax],al
 100cb84:	add    DWORD PTR [rsi],eax
 100cb86:	add    al,BYTE PTR [rax]
 100cb88:	(bad)  
 100cb89:	xor    al,BYTE PTR [rdx]
 100cb8b:	xor    BYTE PTR [rcx],al
 100cb8d:	or     al,BYTE PTR [rax+rax*1]
 100cb90:	or     dh,BYTE PTR [rdi+rax*1]
 100cb93:	add    BYTE PTR [rdx],cl
 100cb95:	xor    al,BYTE PTR [rsi]
 100cb97:	(bad)  
 100cb98:	and    DWORD PTR [rip+0x74050002],eax        # 0x7505cba0
 100cb9e:	(bad)  
 100cb9f:	add    BYTE PTR [rax-0x22ffff51],al
 100cba5:	scas   eax,DWORD PTR es:[rdi]
 100cba6:	add    BYTE PTR [rax],al
 100cba8:	mov    ebx,cs
 100cbaa:	add    BYTE PTR [rax],al
 100cbac:	and    DWORD PTR [rax],eax
 100cbae:	add    al,BYTE PTR [rax]
 100cbb0:	add    BYTE PTR [rsi+rax*1+0x0],dh
 100cbb4:	sub    BYTE PTR [rdi-0x50230000],0x0
 100cbbb:	add    BYTE PTR [rbx+rcx*8+0x210000],cl
 100cbc2:	add    BYTE PTR [rax],al
 100cbc4:	sub    BYTE PTR [rdi-0x50230000],0x0
 100cbcb:	add    BYTE PTR [rbx+rcx*8+0xa010000],cl
 100cbd2:	add    al,0x0
 100cbd4:	or     dh,BYTE PTR [rdi+rax*1]
 100cbd7:	add    BYTE PTR [rdx],cl
 100cbd9:	xor    al,BYTE PTR [rsi]
 100cbdb:	(bad)  
 100cbdc:	and    DWORD PTR [rip+0x74050002],eax        # 0x7505cbe4
 100cbe2:	(bad)  
 100cbe3:	add    BYTE PTR [rax-0x50],dh
 100cbe6:	add    BYTE PTR [rax],al
 100cbe8:	mov    dh,0xb0
 100cbea:	add    BYTE PTR [rax],al
 100cbec:	ror    bl,1
 100cbee:	add    BYTE PTR [rax],al
 100cbf0:	and    DWORD PTR [rax],eax
 100cbf2:	add    al,BYTE PTR [rax]
 100cbf4:	add    BYTE PTR [rsi+rax*1+0x0],dh
 100cbf8:	jo     0x100cbaa
 100cbfa:	add    BYTE PTR [rax],al
 100cbfc:	mov    dh,0xb0
 100cbfe:	add    BYTE PTR [rax],al
 100cc00:	ror    bl,1
 100cc02:	add    BYTE PTR [rax],al
 100cc04:	and    DWORD PTR [rax],eax
 100cc06:	add    BYTE PTR [rax],al
 100cc08:	jo     0x100cbba
 100cc0a:	add    BYTE PTR [rax],al
 100cc0c:	mov    dh,0xb0
 100cc0e:	add    BYTE PTR [rax],al
 100cc10:	ror    bl,1
 100cc12:	add    BYTE PTR [rax],al
 100cc14:	add    DWORD PTR [rsi],eax
 100cc16:	add    al,BYTE PTR [rax]
 100cc18:	(bad)  
 100cc19:	xor    al,BYTE PTR [rdx]
 100cc1b:	xor    BYTE PTR [rcx],bl
 100cc1d:	nop
 100cc1e:	(bad)  
 100cc1f:	add    BYTE PTR [rax-0x7cfdf50c],dl
 100cc25:	(bad)  
 100cc26:	adc    eax,DWORD PTR [rdx]
 100cc28:	ins    BYTE PTR es:[rdi],dx
 100cc29:	je     0x100cc3d
 100cc2b:	add    bl,BYTE PTR [rsi+0x34]
 100cc2e:	adc    DWORD PTR [rdx],eax
 100cc30:	sbb    al,0x1
 100cc32:	or     eax,DWORD PTR [rdx]
 100cc34:	(bad)  
 100cc35:	loopne 0x100cc3c
 100cc37:	rol    BYTE PTR [rbx],0x60
 100cc3a:	add    dl,BYTE PTR [rax+0x0]
 100cc3d:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 100cc3e:	add    BYTE PTR [rax],al
 100cc40:	adc    BYTE PTR [rax],al
 100cc43:	add    BYTE PTR [rcx],bl
 100cc45:	(bad)  
 100cc46:	(bad)  
 100cc47:	add    BYTE PTR [rcx+rax*1],cl
 100cc4a:	lea    eax,[rax]
 100cc4c:	add    eax,0x3600470
 100cc51:	push   rax
 100cc52:	add    dh,BYTE PTR [rax]
 100cc54:	add    BYTE PTR [rdi+0x4500000],ah
 100cc5a:	add    BYTE PTR [rax],al
 100cc5c:	sbb    DWORD PTR [rip+0x10b0005],ebx        # 0x20bcc67
 100cc62:	rex.WX add BYTE PTR [rax+r14*2],al
 100cc66:	add    esp,DWORD PTR [rax+0x2]
 100cc69:	xor    BYTE PTR [rax],al
 100cc6b:	add    BYTE PTR [rax],al
 100cc6d:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 100cc6e:	add    BYTE PTR [rax],al
 100cc70:	add    al,BYTE PTR [rax]
 100cc73:	add    BYTE PTR [rcx],al
 100cc75:	adc    eax,0x74150008
 100cc7a:	or     BYTE PTR [rax],al
 100cc7c:	adc    eax,0x15000764
 100cc81:	xor    al,0x6
 100cc83:	add    BYTE PTR [rip+0x19e01132],dl        # 0x1ae0ddbb
 100cc89:	xor    BYTE PTR [rbx],cl
 100cc8b:	add    BYTE PTR [rdi],bl
 100cc8d:	xor    al,0x5e
 100cc8f:	add    BYTE PTR [rdi],bl
 100cc91:	add    DWORD PTR [rsi+0x0],edx
 100cc94:	adc    al,dh
 100cc96:	(bad)  
 100cc97:	loopne 0x100cca5
 100cc99:	ror    BYTE PTR [rdx],1
 100cc9b:	ror    BYTE PTR [rax],0x70
 100cc9e:	(bad)  
 100cc9f:	(bad)  
 100cca0:	(bad)  
 100cca1:	push   rax
 100cca2:	add    BYTE PTR [rax],al
 100cca4:	add    BYTE PTR [rdi+0x2a00000],ah
 100ccaa:	add    BYTE PTR [rax],al
 100ccac:	sbb    DWORD PTR [rip+0x10b0005],ebx        # 0x20bccb7
 100ccb2:	adc    al,BYTE PTR [rax]
 100ccb4:	add    al,0x70
 100ccb6:	add    esp,DWORD PTR [rax+0x2]
 100ccb9:	xor    BYTE PTR [rax],al
 100ccbb:	add    BYTE PTR [rax],al
 100ccbd:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 100ccbe:	add    BYTE PTR [rax],al
 100ccc0:	add    BYTE PTR [rax],0x0
 100ccc3:	add    BYTE PTR [rcx],ah
 100ccc5:	or     BYTE PTR [rdx],al
 100ccc7:	add    BYTE PTR [rax],cl
 100ccc9:	push   rsp
 100ccca:	sbb    BYTE PTR [rax],al
 100cccc:	and    al,al
 100ccce:	add    BYTE PTR [rax],al
 100ccd0:	pop    rdi
 100ccd1:	rol    BYTE PTR [rax],0x0
 100ccd4:	lods   al,BYTE PTR ds:[rsi]
 100ccd5:	int3   
 100ccd6:	add    BYTE PTR [rax],al
 100ccd8:	and    DWORD PTR [rax],eax
 100ccda:	add    BYTE PTR [rax],al
 100ccdc:	and    al,al
 100ccde:	add    BYTE PTR [rax],al
 100cce0:	pop    rdi
 100cce1:	rol    BYTE PTR [rax],0x0
 100cce4:	lods   al,BYTE PTR ds:[rsi]
 100cce5:	int3   
 100cce6:	add    BYTE PTR [rax],al
 100cce8:	add    DWORD PTR [rcx+rax*1],eax
 100cceb:	add    BYTE PTR [rdx+rax*2],al
 100ccee:	add    BYTE PTR [rax],al
 100ccf0:	and    DWORD PTR [rip+0x34050002],eax        # 0x3505ccf8
 100ccf6:	add    al,0x0
 100ccf8:	add    cl,0x0
 100ccfb:	add    BYTE PTR [rbp-0x17ffff3f],ah
 100cd01:	int3   
 100cd02:	add    BYTE PTR [rax],al
 100cd04:	and    DWORD PTR [rax],eax
 100cd06:	add    BYTE PTR [rax],al
 100cd08:	add    cl,0x0
 100cd0b:	add    BYTE PTR [rbp-0x17ffff3f],ah
 100cd11:	int3   
 100cd12:	add    BYTE PTR [rax],al
 100cd14:	movabs al,ds:0xcd
 100cd1d:	add    BYTE PTR [rax],al
 100cd1f:	add    BYTE PTR [rsi-0x2c],ah
 100cd22:	add    BYTE PTR [rax],al
 100cd24:	adc    BYTE PTR [rax],dl
 100cd26:	add    BYTE PTR [rax],al
 100cd28:	rex iret 
	...
 100cd32:	add    BYTE PTR [rax],al
 100cd34:	and    al,0xd7
 100cd36:	add    BYTE PTR [rax],al
 100cd38:	mov    al,0x11
 100cd3a:	add    BYTE PTR [rax],al
 100cd3c:	sub    dl,dl
	...
 100cd46:	add    BYTE PTR [rax],al
 100cd48:	movabs ds:0x58000014980000d7,al
 100cd51:	rol    DWORD PTR [rax],1
	...
 100cd5b:	add    BYTE PTR [rsi-0x37ffff29],ch
 100cd61:	adc    eax,DWORD PTR [rax]
 100cd63:	add    BYTE PTR [rax+0xcd],dl
 100cd69:	add    BYTE PTR [rax],al
 100cd6b:	add    BYTE PTR [rax],al
 100cd6d:	add    BYTE PTR [rax],al
 100cd6f:	add    dl,dl
 100cd71:	xlat   BYTE PTR ds:[rbx]
 100cd72:	add    BYTE PTR [rax],al
 100cd74:	add    BYTE PTR [rax],dl
	...
 100cd8e:	add    BYTE PTR [rax],al
 100cd90:	mov    edx,0xd7
	...
 100cd9d:	add    BYTE PTR [rax],al
 100cd9f:	add    BYTE PTR [rax-0x2e],bl
 100cda2:	add    BYTE PTR [rax],al
 100cda4:	add    BYTE PTR [rax],al
 100cda6:	add    BYTE PTR [rax],al
 100cda8:	outs   dx,BYTE PTR ds:[rsi]
 100cda9:	rol    BYTE PTR [rax],cl
 100cdab:	add    BYTE PTR [rax],al
 100cdad:	add    BYTE PTR [rax],al
 100cdaf:	add    BYTE PTR [rdx+rdx*8+0x0],bh
 100cdb3:	add    BYTE PTR [rax],al
 100cdb5:	add    BYTE PTR [rax],al
 100cdb7:	add    BYTE PTR [rsi+0xd2],cl
 100cdbd:	add    BYTE PTR [rax],al
 100cdbf:	add    BYTE PTR [rdx+rdx*8+0x0],bl
 100cdc6:	add    BYTE PTR [rax],al
 100cdc8:	stos   BYTE PTR es:[rdi],al
 100cdc9:	rol    BYTE PTR [rax],cl
 100cdcb:	add    BYTE PTR [rax],al
 100cdcd:	add    BYTE PTR [rax],al
 100cdcf:	add    BYTE PTR [rdx+0xd2],bh
 100cdd5:	add    BYTE PTR [rax],al
 100cdd7:	add    al,cl
 100cdd9:	rol    BYTE PTR [rax],cl
 100cddb:	add    BYTE PTR [rax],al
 100cddd:	add    BYTE PTR [rax],al
 100cddf:	add    ah,dl
 100cde1:	rol    BYTE PTR [rax],cl
 100cde3:	add    BYTE PTR [rax],al
 100cde5:	add    BYTE PTR [rax],al
 100cde7:	add    dl,ah
 100cde9:	rol    BYTE PTR [rax],cl
 100cdeb:	add    BYTE PTR [rax],al
 100cded:	add    BYTE PTR [rax],al
 100cdef:	add    dl,dh
 100cdf1:	rol    BYTE PTR [rax],cl
 100cdf3:	add    BYTE PTR [rax],al
 100cdf5:	add    BYTE PTR [rax],al
 100cdf7:	add    BYTE PTR [rdx],al
 100cdf9:	rol    DWORD PTR [rax],cl
 100cdfb:	add    BYTE PTR [rax],al
 100cdfd:	add    BYTE PTR [rax],al
 100cdff:	add    BYTE PTR [rdx],cl
 100ce01:	rol    DWORD PTR [rax],cl
 100ce03:	add    BYTE PTR [rax],al
 100ce05:	add    BYTE PTR [rax],al
 100ce07:	add    BYTE PTR [rax],bl
 100ce09:	rol    DWORD PTR [rax],cl
 100ce0b:	add    BYTE PTR [rax],al
 100ce0d:	add    BYTE PTR [rax],al
 100ce0f:	add    BYTE PTR [rax],ch
 100ce11:	rol    DWORD PTR [rax],cl
 100ce13:	add    BYTE PTR [rax],al
 100ce15:	add    BYTE PTR [rax],al
 100ce17:	add    BYTE PTR [rsi],dh
 100ce19:	rol    DWORD PTR [rax],cl
 100ce1b:	add    BYTE PTR [rax],al
 100ce1d:	add    BYTE PTR [rax],al
 100ce1f:	add    BYTE PTR [rax-0x2d],cl
 100ce22:	add    BYTE PTR [rax],al
 100ce24:	add    BYTE PTR [rax],al
 100ce26:	add    BYTE PTR [rax],al
 100ce28:	pop    rax
 100ce29:	rol    DWORD PTR [rax],cl
 100ce2b:	add    BYTE PTR [rax],al
 100ce2d:	add    BYTE PTR [rax],al
 100ce2f:	add    BYTE PTR [rsi-0x2d],ch
 100ce32:	add    BYTE PTR [rax],al
 100ce34:	add    BYTE PTR [rax],al
 100ce36:	add    BYTE PTR [rax],al
 100ce38:	(bad)  
 100ce39:	rol    DWORD PTR [rax],cl
 100ce3b:	add    BYTE PTR [rax],al
 100ce3d:	add    BYTE PTR [rax],al
 100ce3f:	add    BYTE PTR [rbx+rdx*8+0x0],dl
 100ce46:	add    BYTE PTR [rax],al
 100ce48:	scas   al,BYTE PTR es:[rdi]
 100ce49:	rol    DWORD PTR [rax],cl
 100ce4b:	add    BYTE PTR [rax],al
 100ce4d:	add    BYTE PTR [rax],al
 100ce4f:	add    ah,al
 100ce51:	rol    DWORD PTR [rax],cl
 100ce53:	add    BYTE PTR [rax],al
 100ce55:	add    BYTE PTR [rax],al
 100ce57:	add    BYTE PTR [rdx+rdx*8+0x0],cl
 100ce5b:	add    BYTE PTR [rax],al
 100ce5d:	add    BYTE PTR [rax],al
 100ce5f:	add    dh,ah
 100ce61:	rol    DWORD PTR [rax],cl
 100ce63:	add    BYTE PTR [rax],al
 100ce65:	add    BYTE PTR [rax],al
 100ce67:	add    dh,dh
 100ce69:	rol    DWORD PTR [rax],cl
 100ce6b:	add    BYTE PTR [rax],al
 100ce6d:	add    BYTE PTR [rax],al
 100ce6f:	add    BYTE PTR [rsp+rdx*8],cl
 100ce72:	add    BYTE PTR [rax],al
 100ce74:	add    BYTE PTR [rax],al
 100ce76:	add    BYTE PTR [rax],al
 100ce78:	(bad)  
 100ce79:	(bad)  
 100ce7a:	add    BYTE PTR [rax],al
 100ce7c:	add    BYTE PTR [rax],al
 100ce7e:	add    BYTE PTR [rax],al
 100ce80:	cmp    al,0xd4
 100ce82:	add    BYTE PTR [rax],al
 100ce84:	add    BYTE PTR [rax],al
 100ce86:	add    BYTE PTR [rax],al
 100ce88:	rex.WRX (bad) 
 100ce8a:	add    BYTE PTR [rax],al
 100ce8c:	add    BYTE PTR [rax],al
 100ce8e:	add    BYTE PTR [rax],al
 100ce90:	rex.W fld DWORD PTR [rax]
 100ce93:	add    BYTE PTR [rax],al
 100ce95:	add    BYTE PTR [rax],al
 100ce97:	add    BYTE PTR [rcx+rbx*8],dh
 100ce9a:	add    BYTE PTR [rax],al
 100ce9c:	add    BYTE PTR [rax],al
 100ce9e:	add    BYTE PTR [rax],al
 100cea0:	sub    cl,bl
 100cea2:	add    BYTE PTR [rax],al
 100cea4:	add    BYTE PTR [rax],al
 100cea6:	add    BYTE PTR [rax],al
 100cea8:	(bad)  
 100cea9:	fld    DWORD PTR [rax]
 100ceab:	add    BYTE PTR [rax],al
 100cead:	add    BYTE PTR [rax],al
 100ceaf:	add    al,bh
 100ceb1:	fadd   DWORD PTR [rax]
 100ceb3:	add    BYTE PTR [rax],al
 100ceb5:	add    BYTE PTR [rax],al
 100ceb7:	add    dl,ah
 100ceb9:	fadd   DWORD PTR [rax]
 100cebb:	add    BYTE PTR [rax],al
 100cebd:	add    BYTE PTR [rax],al
 100cebf:	add    dl,dl
 100cec1:	fadd   DWORD PTR [rax]
 100cec3:	add    BYTE PTR [rax],al
 100cec5:	add    BYTE PTR [rax],al
 100cec7:	add    BYTE PTR [rax+0xd8],bh
 100cecd:	add    BYTE PTR [rax],al
 100cecf:	add    BYTE PTR [rax+0xd8],ch
 100ced5:	add    BYTE PTR [rax],al
 100ced7:	add    BYTE PTR [rax+rbx*8+0x0],dl
 100cede:	add    BYTE PTR [rax],al
 100cee0:	jp     0x100ceba
 100cee2:	add    BYTE PTR [rax],al
 100cee4:	add    BYTE PTR [rax],al
 100cee6:	add    BYTE PTR [rax],al
 100cee8:	data16 fadd DWORD PTR [rax]
 100ceeb:	add    BYTE PTR [rax],al
 100ceed:	add    BYTE PTR [rax],al
 100ceef:	add    BYTE PTR [rdx-0x28],dl
 100cef2:	add    BYTE PTR [rax],al
 100cef4:	add    BYTE PTR [rax],al
 100cef6:	add    BYTE PTR [rax],al
 100cef8:	xor    al,0xd8
 100cefa:	add    BYTE PTR [rax],al
 100cefc:	add    BYTE PTR [rax],al
 100cefe:	add    BYTE PTR [rax],al
 100cf00:	sbb    al,bl
 100cf02:	add    BYTE PTR [rax],al
 100cf04:	add    BYTE PTR [rax],al
 100cf06:	add    BYTE PTR [rax],al
 100cf08:	add    al,0xd8
 100cf0a:	add    BYTE PTR [rax],al
 100cf0c:	add    BYTE PTR [rax],al
 100cf0e:	add    BYTE PTR [rax],al
 100cf10:	lock xlat BYTE PTR ds:[rbx]
 100cf12:	add    BYTE PTR [rax],al
 100cf14:	add    BYTE PTR [rax],al
 100cf16:	add    BYTE PTR [rax],al
 100cf18:	loopne 0x100cef1
 100cf1a:	add    BYTE PTR [rax],al
 100cf1c:	add    BYTE PTR [rax],al
 100cf1e:	add    BYTE PTR [rax],al
 100cf20:	rcl    bl,cl
 100cf22:	add    BYTE PTR [rax],al
 100cf24:	add    BYTE PTR [rax],al
 100cf26:	add    BYTE PTR [rax],al
 100cf28:	rol    BYTE PTR [rax],cl
 100cf2b:	add    BYTE PTR [rax],al
 100cf2d:	add    BYTE PTR [rax],al
 100cf2f:	add    BYTE PTR [rdx-0x27],bl
	...
 100cf3e:	add    BYTE PTR [rax],al
 100cf40:	rex.X (bad) 
 100cf42:	add    BYTE PTR [rax],al
 100cf44:	add    BYTE PTR [rax],al
 100cf46:	add    BYTE PTR [rax],al
 100cf48:	rex.WRX (bad) 
 100cf4a:	add    BYTE PTR [rax],al
 100cf4c:	add    BYTE PTR [rax],al
 100cf4e:	add    BYTE PTR [rax],al
 100cf50:	push   rsi
 100cf51:	(bad)  
 100cf52:	add    BYTE PTR [rax],al
 100cf54:	add    BYTE PTR [rax],al
 100cf56:	add    BYTE PTR [rax],al
 100cf58:	pop    rsi
 100cf59:	(bad)  
 100cf5a:	add    BYTE PTR [rax],al
 100cf5c:	add    BYTE PTR [rax],al
 100cf5e:	add    BYTE PTR [rax],al
 100cf60:	push   0xd5
 100cf65:	add    BYTE PTR [rax],al
 100cf67:	add    BYTE PTR [rdx-0x2b],dh
 100cf6a:	add    BYTE PTR [rax],al
 100cf6c:	add    BYTE PTR [rax],al
 100cf6e:	add    BYTE PTR [rax],al
 100cf70:	jl     0x100cf47
 100cf72:	add    BYTE PTR [rax],al
 100cf74:	add    BYTE PTR [rax],al
 100cf76:	add    BYTE PTR [rax],al
 100cf78:	test   ch,dl
 100cf7a:	add    BYTE PTR [rax],al
 100cf7c:	add    BYTE PTR [rax],al
 100cf7e:	add    BYTE PTR [rax],al
 100cf80:	mov    ebp,ss
 100cf82:	add    BYTE PTR [rax],al
 100cf84:	add    BYTE PTR [rax],al
 100cf86:	add    BYTE PTR [rax],al
 100cf88:	xchg   esi,eax
 100cf89:	(bad)  
 100cf8a:	add    BYTE PTR [rax],al
 100cf8c:	add    BYTE PTR [rax],al
 100cf8e:	add    BYTE PTR [rax],al
 100cf90:	movabs al,ds:0xaa000000000000d5
 100cf99:	(bad)  
 100cf9a:	add    BYTE PTR [rax],al
 100cf9c:	add    BYTE PTR [rax],al
 100cf9e:	add    BYTE PTR [rax],al
 100cfa0:	mov    eax,0xd5
 100cfa5:	add    BYTE PTR [rax],al
 100cfa7:	add    dl,al
 100cfa9:	(bad)  
 100cfaa:	add    BYTE PTR [rax],al
 100cfac:	add    BYTE PTR [rax],al
 100cfae:	add    BYTE PTR [rax],al
 100cfb0:	int3   
 100cfb1:	(bad)  
 100cfb2:	add    BYTE PTR [rax],al
 100cfb4:	add    BYTE PTR [rax],al
 100cfb6:	add    BYTE PTR [rax],al
 100cfb8:	fcom   st(5)
 100cfba:	add    BYTE PTR [rax],al
 100cfbc:	add    BYTE PTR [rax],al
 100cfbe:	add    BYTE PTR [rax],al
 100cfc0:	loop   0x100cf97
 100cfc2:	add    BYTE PTR [rax],al
 100cfc4:	add    BYTE PTR [rax],al
 100cfc6:	add    BYTE PTR [rax],al
 100cfc8:	out    dx,al
 100cfc9:	(bad)  
 100cfca:	add    BYTE PTR [rax],al
 100cfcc:	add    BYTE PTR [rax],al
 100cfce:	add    BYTE PTR [rax],al
 100cfd0:	clc    
 100cfd1:	(bad)  
 100cfd2:	add    BYTE PTR [rax],al
 100cfd4:	add    BYTE PTR [rax],al
 100cfd6:	add    BYTE PTR [rax],al
 100cfd8:	add    dh,dl
 100cfda:	add    BYTE PTR [rax],al
 100cfdc:	add    BYTE PTR [rax],al
 100cfde:	add    BYTE PTR [rax],al
 100cfe0:	cmp    ch,dl
 100cfe2:	add    BYTE PTR [rax],al
 100cfe4:	add    BYTE PTR [rax],al
 100cfe6:	add    BYTE PTR [rax],al
 100cfe8:	adc    al,0xd6
 100cfea:	add    BYTE PTR [rax],al
 100cfec:	add    BYTE PTR [rax],al
 100cfee:	add    BYTE PTR [rax],al
 100cff0:	sbb    al,0xd6
 100cff2:	add    BYTE PTR [rax],al
 100cff4:	add    BYTE PTR [rax],al
 100cff6:	add    BYTE PTR [rax],al
 100cff8:	es (bad) 
 100cffa:	add    BYTE PTR [rax],al
 100cffc:	add    BYTE PTR [rax],al
 100cffe:	add    BYTE PTR [rax],al
 100d000:	xor    al,0xd6
 100d002:	add    BYTE PTR [rax],al
 100d004:	add    BYTE PTR [rax],al
 100d006:	add    BYTE PTR [rax],al
 100d008:	rex (bad) 
 100d00a:	add    BYTE PTR [rax],al
 100d00c:	add    BYTE PTR [rax],al
 100d00e:	add    BYTE PTR [rax],al
 100d010:	rex.WX (bad) 
 100d012:	add    BYTE PTR [rax],al
 100d014:	add    BYTE PTR [rax],al
 100d016:	add    BYTE PTR [rax],al
 100d018:	pop    rax
 100d019:	(bad)  
 100d01a:	add    BYTE PTR [rax],al
 100d01c:	add    BYTE PTR [rax],al
 100d01e:	add    BYTE PTR [rax],al
 100d020:	push   0xffffffffffffffd6
 100d022:	add    BYTE PTR [rax],al
 100d024:	add    BYTE PTR [rax],al
 100d026:	add    BYTE PTR [rax],al
 100d028:	(bad)  
 100d029:	(bad)  
 100d02a:	add    BYTE PTR [rax],al
 100d02c:	add    BYTE PTR [rax],al
 100d02e:	add    BYTE PTR [rax],al
 100d030:	nop
 100d031:	(bad)  
 100d032:	add    BYTE PTR [rax],al
 100d034:	add    BYTE PTR [rax],al
 100d036:	add    BYTE PTR [rax],al
 100d038:	cwde   
 100d039:	(bad)  
 100d03a:	add    BYTE PTR [rax],al
 100d03c:	add    BYTE PTR [rax],al
 100d03e:	add    BYTE PTR [rax],al
 100d040:	movabs ds:0xaa000000000000d6,al
 100d049:	(bad)  
 100d04a:	add    BYTE PTR [rax],al
 100d04c:	add    BYTE PTR [rax],al
 100d04e:	add    BYTE PTR [rax],al
 100d050:	mov    eax,0xd6
 100d055:	add    BYTE PTR [rax],al
 100d057:	add    ah,al
 100d059:	(bad)  
 100d05a:	add    BYTE PTR [rax],al
 100d05c:	add    BYTE PTR [rax],al
 100d05e:	add    BYTE PTR [rax],al
 100d060:	rcl    dh,cl
 100d062:	add    BYTE PTR [rax],al
 100d064:	add    BYTE PTR [rax],al
 100d066:	add    BYTE PTR [rax],al
 100d068:	call   0x100d143
 100d06d:	add    BYTE PTR [rax],al
 100d06f:	add    ah,bh
 100d071:	(bad)  
 100d072:	add    BYTE PTR [rax],al
 100d074:	add    BYTE PTR [rax],al
 100d076:	add    BYTE PTR [rax],al
 100d078:	or     bh,dl
 100d07a:	add    BYTE PTR [rax],al
 100d07c:	add    BYTE PTR [rax],al
 100d07e:	add    BYTE PTR [rax],al
 100d080:	adc    dl,bh
 100d082:	add    BYTE PTR [rax],al
 100d084:	add    BYTE PTR [rax],al
 100d086:	add    BYTE PTR [rax],al
 100d088:	xor    dl,bh
 100d08a:	add    BYTE PTR [rax],al
 100d08c:	add    BYTE PTR [rax],al
 100d08e:	add    BYTE PTR [rax],al
 100d090:	rex.W xlat BYTE PTR ds:[rbx]
 100d092:	add    BYTE PTR [rax],al
 100d094:	add    BYTE PTR [rax],al
 100d096:	add    BYTE PTR [rax],al
 100d098:	pop    rsp
 100d099:	xlat   BYTE PTR ds:[rbx]
 100d09a:	add    BYTE PTR [rax],al
 100d09c:	add    BYTE PTR [rax],al
 100d09e:	add    BYTE PTR [rax],al
 100d0a0:	data16 xlat BYTE PTR ds:[rbx]
 100d0a2:	add    BYTE PTR [rax],al
 100d0a4:	add    BYTE PTR [rax],al
 100d0a6:	add    BYTE PTR [rax],al
 100d0a8:	je     0x100d081
 100d0aa:	add    BYTE PTR [rax],al
 100d0ac:	add    BYTE PTR [rax],al
 100d0ae:	add    BYTE PTR [rax],al
 100d0b0:	jl     0x100d089
 100d0b2:	add    BYTE PTR [rax],al
 100d0b4:	add    BYTE PTR [rax],al
 100d0b6:	add    BYTE PTR [rax],al
 100d0b8:	je     0x100d08e
 100d0ba:	add    BYTE PTR [rax],al
 100d0bc:	add    BYTE PTR [rax],al
 100d0be:	add    BYTE PTR [rax],al
 100d0c0:	jle    0x100d096
 100d0c2:	add    BYTE PTR [rax],al
 100d0c4:	add    BYTE PTR [rax],al
 100d0c6:	add    BYTE PTR [rax],al
 100d0c8:	mov    dl,ah
 100d0ca:	add    BYTE PTR [rax],al
 100d0cc:	add    BYTE PTR [rax],al
 100d0ce:	add    BYTE PTR [rax],al
 100d0d0:	xchg   esi,eax
 100d0d1:	(bad)  
 100d0d2:	add    BYTE PTR [rax],al
 100d0d4:	add    BYTE PTR [rax],al
 100d0d6:	add    BYTE PTR [rax],al
 100d0d8:	movabs ds:0xaa000000000000d4,al
 100d0e1:	(bad)  
 100d0e2:	add    BYTE PTR [rax],al
 100d0e4:	add    BYTE PTR [rax],al
 100d0e6:	add    BYTE PTR [rax],al
 100d0e8:	mov    ah,0xd4
 100d0ea:	add    BYTE PTR [rax],al
 100d0ec:	add    BYTE PTR [rax],al
 100d0ee:	add    BYTE PTR [rax],al
 100d0f0:	ret    0xd4
 100d0f3:	add    BYTE PTR [rax],al
 100d0f5:	add    BYTE PTR [rax],al
 100d0f7:	add    ah,cl
 100d0f9:	(bad)  
 100d0fa:	add    BYTE PTR [rax],al
 100d0fc:	add    BYTE PTR [rax],al
 100d0fe:	add    BYTE PTR [rax],al
 100d100:	(bad)  
 100d101:	(bad)  
 100d102:	add    BYTE PTR [rax],al
 100d104:	add    BYTE PTR [rax],al
 100d106:	add    BYTE PTR [rax],al
 100d108:	loop   0x100d0de
 100d10a:	add    BYTE PTR [rax],al
 100d10c:	add    BYTE PTR [rax],al
 100d10e:	add    BYTE PTR [rax],al
 100d110:	out    dx,al
 100d111:	(bad)  
 100d112:	add    BYTE PTR [rax],al
 100d114:	add    BYTE PTR [rax],al
 100d116:	add    BYTE PTR [rax],al
 100d118:	clc    
 100d119:	(bad)  
 100d11a:	add    BYTE PTR [rax],al
 100d11c:	add    BYTE PTR [rax],al
 100d11e:	add    BYTE PTR [rax],al
 100d120:	add    al,0xd5
 100d122:	add    BYTE PTR [rax],al
 100d124:	add    BYTE PTR [rax],al
 100d126:	add    BYTE PTR [rax],al
 100d128:	(bad)  
 100d129:	(bad)  
 100d12a:	add    BYTE PTR [rax],al
 100d12c:	add    BYTE PTR [rax],al
 100d12e:	add    BYTE PTR [rax],al
 100d130:	sbb    ch,dl
 100d132:	add    BYTE PTR [rax],al
 100d134:	add    BYTE PTR [rax],al
 100d136:	add    BYTE PTR [rax],al
 100d138:	and    al,0xd5
 100d13a:	add    BYTE PTR [rax],al
 100d13c:	add    BYTE PTR [rax],al
 100d13e:	add    BYTE PTR [rax],al
 100d140:	cs (bad) 
 100d142:	add    BYTE PTR [rax],al
 100d144:	add    BYTE PTR [rax],al
 100d146:	add    BYTE PTR [rax],al
 100d148:	or     dh,dl
	...
 100d156:	add    BYTE PTR [rax],al
 100d158:	mov    BYTE PTR [rax],al
 100d15a:	add    BYTE PTR [rax],al
 100d15c:	add    BYTE PTR [rax],al
 100d15e:	add    BYTE PTR [rax+0x8b],al
 100d164:	add    BYTE PTR [rax],al
 100d166:	add    BYTE PTR [rax+0x96],al
 100d16c:	add    BYTE PTR [rax],al
 100d16e:	add    BYTE PTR [rax+0x8d],al
 100d174:	add    BYTE PTR [rax],al
 100d176:	add    BYTE PTR [rax+0x9b],al
 100d17c:	add    BYTE PTR [rax],al
 100d17e:	add    BYTE PTR [rax+0x8a],al
 100d184:	add    BYTE PTR [rax],al
 100d186:	add    BYTE PTR [rax+0xb0],al
 100d18c:	add    BYTE PTR [rax],al
 100d18e:	add    BYTE PTR [rax+0x84],al
 100d194:	add    BYTE PTR [rax],al
 100d196:	add    BYTE PTR [rax+0x6f],al
 100d19c:	add    BYTE PTR [rax],al
 100d19e:	add    BYTE PTR [rax+0x48],al
 100d1a4:	add    BYTE PTR [rax],al
 100d1a6:	add    BYTE PTR [rax+0x40],al
 100d1ac:	add    BYTE PTR [rax],al
 100d1ae:	add    BYTE PTR [rax+0x3d],al
 100d1b4:	add    BYTE PTR [rax],al
 100d1b6:	add    BYTE PTR [rax+0x4b],al
 100d1bc:	add    BYTE PTR [rax],al
 100d1be:	add    BYTE PTR [rax+0x14],al
 100d1c4:	add    BYTE PTR [rax],al
 100d1c6:	add    BYTE PTR [rax+0x10],al
 100d1cc:	add    BYTE PTR [rax],al
 100d1ce:	add    BYTE PTR [rax+0x1f],al
 100d1d4:	add    BYTE PTR [rax],al
 100d1d6:	add    BYTE PTR [rax+0x9],al
 100d1dc:	add    BYTE PTR [rax],al
 100d1de:	add    BYTE PTR [rax+0x18],al
 100d1e4:	add    BYTE PTR [rax],al
 100d1e6:	add    BYTE PTR [rax+0x6e],al
 100d1ec:	add    BYTE PTR [rax],al
 100d1ee:	add    BYTE PTR [rax+0x6c],al
 100d1f4:	add    BYTE PTR [rax],al
 100d1f6:	add    BYTE PTR [rax+0x7f],al
 100d1fc:	add    BYTE PTR [rax],al
 100d1fe:	add    BYTE PTR [rax+0x2b],al
 100d204:	add    BYTE PTR [rax],al
 100d206:	add    BYTE PTR [rax+0xd],al
 100d20c:	add    BYTE PTR [rax],al
 100d20e:	add    BYTE PTR [rax+0x5],al
 100d214:	add    BYTE PTR [rax],al
 100d216:	add    BYTE PTR [rax+0x87],al
 100d21c:	add    BYTE PTR [rax],al
 100d21e:	add    BYTE PTR [rax+0x0],al
 100d224:	add    BYTE PTR [rax],al
 100d226:	add    BYTE PTR [rax],al
 100d228:	xchg   bh,dl
 100d22a:	add    BYTE PTR [rax],al
 100d22c:	add    BYTE PTR [rax],al
 100d22e:	add    BYTE PTR [rax],al
 100d230:	xchg   esp,eax
 100d231:	xlat   BYTE PTR ds:[rbx]
	...
 100d23e:	add    BYTE PTR [rax],al
 100d240:	xor    al,0x5
 100d242:	push   rdi
 100d243:	jb     0x100d2ae
 100d245:	je     0x100d2ac
 100d247:	imul   r13d,DWORD PTR [rbp+r12*2+0x0],0x736c0561
 100d250:	je     0x100d2c4
 100d252:	ins    BYTE PTR es:[rdi],dx
 100d253:	outs   dx,BYTE PTR gs:[rsi]
 100d255:	push   rdi
 100d256:	add    BYTE PTR [rax],al
 100d258:	and    BYTE PTR [rip+0x65646957],al        # 0x66653bb5
 100d25e:	rex.XB push 0x6f547261
 100d264:	rex.WRB jne 0x100d2d3
 100d267:	je     0x100d2d2
 100d269:	rex.X jns 0x100d2e0
 100d26c:	add    BYTE PTR gs:[rax+0x1],ch
 100d270:	rex.RX jb 0x100d2d8
 100d273:	imul   r12,QWORD PTR gs:[rdx+0x72],0x797261
 100d27c:	rex.WR add r8b,BYTE PTR [rdi+0x65]
 100d280:	je     0x100d2d2
 100d282:	jb     0x100d2f3
 100d284:	movsxd eax,DWORD PTR [rcx+0x64]
 100d287:	fs jb  0x100d2ef
 100d28a:	jae    0x100d2ff
 100d28c:	add    BYTE PTR [rax],al
 100d28e:	mov    ebx,0x6f6c4702
 100d293:	(bad)
 100d298:	ins    BYTE PTR es:[rdi],dx
 100d299:	outs   dx,DWORD PTR ds:[rsi]
 100d29a:	movsxd eax,DWORD PTR [rax]
 100d29c:	mov    BYTE PTR [rdx],0x47
 100d29f:	ins    BYTE PTR es:[rdi],dx
 100d2a0:	outs   dx,DWORD PTR ds:[rsi]
 100d2a1:	(bad)
 100d2a6:	movsxd ebp,DWORD PTR [rbx+0x0]
 100d2a9:	add    ch,cl
 100d2ab:	add    al,BYTE PTR [rdi+0x6c]
 100d2ae:	outs   dx,DWORD PTR ds:[rsi]
 100d2af:	(bad)
 100d2b4:	ins    BYTE PTR es:[rdi],dx
 100d2b5:	outs   dx,DWORD PTR ds:[rsi]
 100d2b6:	movsxd ebp,DWORD PTR [rbx+0x0]
 100d2b9:	add    dl,al
 100d2bb:	add    al,BYTE PTR [rdi+0x6c]
 100d2be:	outs   dx,DWORD PTR ds:[rsi]
 100d2bf:	(bad)
 100d2c4:	gs add BYTE PTR gs:[rax],al
 100d2c8:	add    rcx,QWORD PTR [rdi+r13*2+0x63]
 100d2cd:	(bad)  
 100d2ce:	ins    BYTE PTR es:[rdi],dx
 100d2cf:	rex.RX jb 0x100d337
 100d2d2:	add    BYTE PTR gs:[rdi],bl
 100d2d5:	add    DWORD PTR [rbp+0x78],eax
 100d2d8:	imul   esi,DWORD PTR [rax+rdx*2+0x72],0x7365636f
 100d2e0:	jae    0x100d2e2
 100d2e2:	or     BYTE PTR [rdx],al
 100d2e4:	rex.RXB
 100d2e5:	gs je  0x100d334
 100d2e8:	(bad)  
 100d2e9:	jae    0x100d35f
 100d2eb:	rex.RB jb 0x100d360
 100d2ee:	outs   dx,DWORD PTR ds:[rsi]
 100d2ef:	jb     0x100d2f1
 100d2f1:	add    BYTE PTR [rax+0x74655304],al
 100d2f7:	rex.WR (bad) 
 100d2f9:	jae    0x100d36f
 100d2fb:	rex.RB jb 0x100d370
 100d2fe:	outs   dx,DWORD PTR ds:[rsi]
 100d2ff:	jb     0x100d301
 100d301:	add    al,al
 100d303:	add    al,0x53
 100d305:	ins    BYTE PTR es:[rdi],dx
 100d306:	gs gs jo 0x100d30a
 100d30a:	cli    
 100d30b:	add    DWORD PTR [rdi+0x65],eax
 100d30e:	je     0x100d356
 100d310:	imul   ebp,DWORD PTR [rbp+riz*2+0x54],0x657079
 100d318:	imul   eax,DWORD PTR [rdx],0x47
 100d31b:	gs je  0x100d371
 100d31e:	je     0x100d384
 100d320:	rex.W (bad) 
 100d322:	outs   dx,BYTE PTR ds:[rsi]
 100d323:	fs ins BYTE PTR es:[rdi],dx
 100d325:	add    BYTE PTR gs:[rax],al
 100d328:	push   rdx
 100d329:	add    BYTE PTR [rbx+0x6c],al
 100d32c:	outs   dx,DWORD PTR ds:[rsi]
 100d32d:	jae    0x100d394
 100d32f:	rex.W (bad) 
 100d331:	outs   dx,BYTE PTR ds:[rsi]
 100d332:	fs ins BYTE PTR es:[rdi],dx
 100d334:	add    BYTE PTR gs:[rcx+rax*1+0x46],ah
 100d339:	outs   dx,DWORD PTR ds:[rsi]
 100d33a:	jb     0x100d3a9
 100d33c:	(bad)  
 100d33d:	je     0x100d38c
 100d33f:	gs jae 0x100d3b5
 100d342:	(bad)  
 100d343:	addr32 gs push rdi
 100d346:	add    BYTE PTR [rax],al
 100d348:	add    ecx,DWORD PTR [r15+rbp*2+0x61]
 100d34d:	imul   r12,QWORD PTR fs:[rdx+0x72],0x57797261
 100d356:	add    BYTE PTR [rax],al
 100d358:	sbb    al,BYTE PTR [rdx]
 100d35a:	rex.RXB
 100d35b:	gs je  0x100d3ab
 100d35e:	outs   dx,DWORD PTR ds:[rsi]
 100d35f:	fs jne 0x100d3ce
 100d362:	imul   r13d,DWORD PTR gs:[rbp+r12*2+0x4e],0x57656d61
 100d36c:	add    BYTE PTR [rax],al
 100d36e:	(bad)  
 100d36f:	add    al,BYTE PTR [rdi+0x65]
 100d372:	je     0x100d3c1
 100d374:	outs   dx,DWORD PTR ds:[rsi]
 100d375:	fs jne 0x100d3e4
 100d378:	gs rex.W (bad) 
 100d37b:	outs   dx,BYTE PTR ds:[rsi]
 100d37c:	fs ins BYTE PTR es:[rdi],dx
 100d37e:	gs push rdi
 100d380:	add    BYTE PTR [rax],al
 100d382:	lea    eax,[rcx]
 100d384:	rex.RXB
 100d385:	gs je  0x100d3cb
 100d388:	outs   dx,DWORD PTR ds:[rsi]
 100d389:	ins    DWORD PTR es:[rdi],dx
 100d38a:	ins    DWORD PTR es:[rdi],dx
 100d38b:	(bad)  
 100d38c:	outs   dx,BYTE PTR ds:[rsi]
 100d38d:	imul   r13,QWORD PTR fs:[rsi+0x65],0x1e30057
 100d396:	rex.RXB
 100d397:	gs je  0x100d3df
 100d39a:	outs   dx,BYTE PTR ds:[rsi]
 100d39b:	jbe    0x100d406
 100d39d:	jb     0x100d40e
 100d39f:	outs   dx,BYTE PTR ds:[rsi]
 100d3a0:	ins    DWORD PTR es:[rdi],dx
 100d3a1:	outs   dx,BYTE PTR gs:[rsi]
 100d3a3:	je     0x100d3fb
 100d3a5:	(bad)  
 100d3a6:	jb     0x100d411
 100d3a8:	(bad)  
 100d3a9:	(bad)  
 100d3aa:	ins    BYTE PTR es:[rdi],dx
 100d3ab:	gs push rdi
 100d3ad:	add    BYTE PTR [rdi+0x2],dh
 100d3b0:	rex.RXB
 100d3b1:	gs je  0x100d407
 100d3b4:	jns    0x100d429
 100d3b6:	je     0x100d41d
 100d3b8:	ins    DWORD PTR es:[rdi],dx
 100d3b9:	imul   r14d,DWORD PTR [rdx+0x65],0x726f7463
 100d3c1:	jns    0x100d41a
 100d3c3:	add    BYTE PTR [rdi+0x65724300],cl
 100d3c9:	(bad)  
 100d3ca:	je     0x100d431
 100d3cc:	imul   r13d,DWORD PTR [rbp+r12*2+0x57],0x47019500
 100d3d5:	gs je  0x100d41b
 100d3d8:	outs   dx,DWORD PTR ds:[rsi]
 100d3d9:	ins    DWORD PTR es:[rdi],dx
 100d3da:	jo     0x100d451
 100d3dc:	je     0x100d443
 100d3de:	jb     0x100d42e
 100d3e0:	(bad)  
 100d3e1:	ins    DWORD PTR es:[rdi],dx
 100d3e2:	gs push rdi
 100d3e4:	add    BYTE PTR [rax],al
 100d3e6:	stos   DWORD PTR es:[rdi],eax
 100d3e7:	add    al,BYTE PTR [rdi+0x65]
 100d3ea:	je     0x100d442
 100d3ec:	gs jb  0x100d462
 100d3ef:	imul   ebp,DWORD PTR [rdi+0x6e],0x417845
 100d3f6:	imul   eax,DWORD PTR [rbx],0x746c754d
 100d3fc:	imul   eax,DWORD PTR [rdx+0x79],0x6f546574
 100d403:	push   rdi
 100d404:	imul   esp,DWORD PTR [rbp+riz*2+0x43],0x726168
 100d40c:	mov    dl,0x1
 100d40e:	rex.RXB
 100d40f:	gs je  0x100d455
 100d412:	outs   dx,DWORD PTR ds:[rsi]
 100d413:	outs   dx,BYTE PTR ds:[rsi]
 100d414:	jae    0x100d485
 100d416:	ins    BYTE PTR es:[rdi],dx
 100d417:	rex.WRB outs dx,DWORD PTR gs:[rsi]
 100d41a:	fs add BYTE PTR gs:[rax],al
 100d41e:	mov    eax,0x74654701
 100d423:	rex.XB outs dx,DWORD PTR ds:[rsi]
 100d425:	outs   dx,BYTE PTR ds:[rsi]
 100d426:	jae    0x100d497
 100d428:	ins    BYTE PTR es:[rdi],dx
 100d429:	gs push rbx
 100d42b:	movsxd esi,DWORD PTR [rdx+0x65]
 100d42e:	outs   dx,BYTE PTR gs:[rsi]
 100d430:	rex.X jne 0x100d499
 100d433:	data16 gs jb 0x100d480
 100d437:	outs   dx,BYTE PTR ds:[rsi]
 100d438:	outs   dx,WORD PTR ds:[rsi]
 100d43a:	add    BYTE PTR [rax],al
 100d43c:	rex.WXB add al,0x53
 100d43f:	gs je  0x100d485
 100d442:	outs   dx,DWORD PTR ds:[rsi]
 100d443:	outs   dx,BYTE PTR ds:[rsi]
 100d444:	jae    0x100d4b5
 100d446:	ins    BYTE PTR es:[rdi],dx
 100d447:	rex.WRB outs dx,DWORD PTR gs:[rsi]
 100d44a:	fs add BYTE PTR gs:[rax],al
 100d44e:	cmp    eax,DWORD PTR [rbx+rdx*2]
 100d451:	gs je  0x100d497
 100d454:	outs   dx,DWORD PTR ds:[rsi]
 100d455:	outs   dx,BYTE PTR ds:[rsi]
 100d456:	jae    0x100d4c7
 100d458:	ins    BYTE PTR es:[rdi],dx
 100d459:	gs rex.XB je 0x100d4cf
 100d45d:	ins    BYTE PTR es:[rdi],dx
 100d45e:	rex.W (bad) 
 100d460:	outs   dx,BYTE PTR ds:[rsi]
 100d461:	fs ins BYTE PTR es:[rdi],dx
 100d463:	gs jb  0x100d466
 100d466:	rex.WXB
 100d467:	rex.RB push r10
 100d469:	rex.WRX
 100d46a:	rex.RB
 100d46b:	xor    r14,QWORD PTR [rdx]
 100d46e:	cs fs ins BYTE PTR es:[rdi],dx
 100d471:	ins    BYTE PTR es:[rdi],dx
 100d472:	add    BYTE PTR [rax],al
 100d474:	stos   DWORD PTR es:[rdi],eax
 100d475:	add    eax,0x6d6d656d
 100d47a:	outs   dx,DWORD PTR ds:[rsi]
 100d47b:	jbe    0x100d4e2
 100d47d:	add    BYTE PTR [rsi],dl
 100d47f:	(bad)  
 100d480:	ja     0x100d4e5
 100d482:	jae    0x100d4e7
 100d484:	jo     0x100d4ff
 100d486:	pop    rdi
 100d487:	jae    0x100d489
 100d489:	add    BYTE PTR [rsi],bl
 100d48b:	(bad)  
 100d48c:	ja     0x100d4f1
 100d48e:	jae    0x100d4fe
 100d490:	movsxd esi,DWORD PTR [rax+0x79]
 100d493:	pop    rdi
 100d494:	jae    0x100d496
 100d496:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 100d497:	add    al,0x5f
 100d499:	ja     0x100d4fe
 100d49b:	jae    0x100d506
 100d49d:	movsxd ebp,DWORD PTR [rbp+0x70]
 100d4a0:	add    BYTE PTR [rax],al
 100d4a2:	movsxd eax,DWORD PTR [rip+0x65657266]        # 0x6666470e
 100d4a8:	add    BYTE PTR [rax],al
 100d4aa:	sahf   
 100d4ab:	add    eax,0x6c6c616d
 100d4b0:	outs   dx,DWORD PTR ds:[rsi]
 100d4b1:	movsxd eax,DWORD PTR [rax]
 100d4b3:	add    BYTE PTR [rcx+rax*1+0x5f],dl
 100d4b7:	pop    rdi
 100d4b8:	imul   ebp,DWORD PTR [rdi+0x62],0x6e75665f
 100d4bf:	movsxd eax,DWORD PTR [rax]
 100d4c1:	add    BYTE PTR [rdi+0x5],cl
 100d4c4:	data16 data16 ins BYTE PTR es:[rdi],dx
 100d4c7:	jne    0x100d53c
 100d4c9:	push   0x5ad0000
 100d4ce:	ins    DWORD PTR es:[rdi],dx
 100d4cf:	gs ins DWORD PTR es:[rdi],dx
 100d4d1:	jae    0x100d538
 100d4d3:	je     0x100d4d5
 100d4d5:	add    BYTE PTR [rcx+0x77736905],cl
 100d4db:	movsxd esi,DWORD PTR [rcx+rdi*2+0x70]
 100d4df:	add    BYTE PTR gs:[rax],al
 100d4e2:	adc    DWORD PTR [rsi],eax
 100d4e4:	ja     0x100d549
 100d4e6:	jae    0x100d54b
 100d4e8:	(bad)  
 100d4e9:	je     0x100d54a
 100d4eb:	jae    0x100d4ed
 100d4ed:	add    BYTE PTR [rdx],dl
 100d4ef:	(bad)  
 100d4f0:	ja     0x100d555
 100d4f2:	jae    0x100d557
 100d4f4:	push   0x1b000072
 100d4f9:	(bad)  
 100d4fa:	ja     0x100d55f
 100d4fc:	jae    0x100d56c
 100d4fe:	movsxd esp,DWORD PTR [rcx+0x74]
 100d501:	pop    rdi
 100d502:	jae    0x100d504
 100d504:	and    eax,0x73637706
 100d509:	jae    0x100d57f
 100d50b:	jb     0x100d50d
 100d50d:	add    BYTE PTR [rdi],ah
 100d50f:	(bad)  
 100d510:	ja     0x100d575
 100d512:	jae    0x100d588
 100d514:	outs   dx,DWORD PTR ds:[rsi]
 100d515:	imul   eax,DWORD PTR [rax],0x0
 100d518:	mov    al,0x4
 100d51a:	pop    rdi
 100d51b:	ja     0x100d580
 100d51d:	jae    0x100d58d
 100d51f:	imul   esp,DWORD PTR [rbx+0x6d],0x1f70070
 100d526:	pop    rdi
 100d527:	gs jb  0x100d59c
 100d52a:	outs   dx,BYTE PTR ds:[rsi]
 100d52b:	outs   dx,DWORD PTR ds:[rsi]
 100d52c:	add    BYTE PTR [rax],al
 100d52e:	mov    edi,0x61657205
 100d533:	ins    BYTE PTR es:[rdi],dx
 100d534:	ins    BYTE PTR es:[rdi],dx
 100d535:	outs   dx,DWORD PTR ds:[rsi]
 100d536:	movsxd eax,DWORD PTR [rax]
 100d538:	sub    DWORD PTR [rsi],eax
 100d53a:	ja     0x100d59f
 100d53c:	jae    0x100d5b2
 100d53e:	outs   dx,DWORD PTR ds:[rsi]
 100d53f:	ins    BYTE PTR es:[rdi],dx
 100d540:	add    BYTE PTR [rax],al
 100d542:	(bad)  
 100d543:	add    al,0x5f
 100d545:	ja     0x100d5ae
 100d547:	gs je  0x100d5af
 100d54a:	outs   dx,BYTE PTR ds:[rsi]
 100d54b:	jbe    0x100d54d
 100d54d:	add    BYTE PTR [rsi],bl
 100d54f:	add    eax,0x6f74775f
 100d554:	imul   eax,DWORD PTR [rax],0x775f0522
 100d55a:	je     0x100d5cb
 100d55c:	ins    BYTE PTR es:[rdi],dx
 100d55d:	add    BYTE PTR [rbp+rax*1+0x66],cl
 100d561:	movsxd ebp,DWORD PTR [rdi+rbp*2+0x73]
 100d565:	add    BYTE PTR gs:[rax],al
 100d568:	(bad)  
 100d569:	add    bl,BYTE PTR [rdi+0x66]
 100d56c:	outs   dx,DWORD PTR fs:[rsi]
 100d56e:	jo     0x100d5d5
 100d570:	outs   dx,BYTE PTR ds:[rsi]
 100d571:	add    BYTE PTR [rsi],cl
 100d573:	add    bl,BYTE PTR [rdi+0x66]
 100d576:	imul   ebp,DWORD PTR [rbp+riz*2+0x6e],0x559006f
 100d57e:	outs   dx,WORD PTR ds:[rsi]
 100d580:	jo     0x100d5e7
 100d582:	outs   dx,BYTE PTR ds:[rsi]
 100d583:	add    BYTE PTR [rcx+0x5],ah
 100d586:	data16 jb 0x100d5ee
 100d589:	(bad)  
 100d58a:	add    BYTE PTR fs:[rsi+0x5],ch
 100d58e:	data16 ja 0x100d603
 100d591:	imul   esi,DWORD PTR [rbp+riz*2+0x0],0x7205c200
 100d599:	gs ja  0x100d605
 100d59c:	outs   dx,BYTE PTR ds:[rsi]
 100d59d:	add    BYTE PTR fs:[rax],al
 100d5a0:	pop    rdi
 100d5a1:	add    eax,0x74757066
 100d5a6:	ja     0x100d60b
 100d5a8:	add    BYTE PTR [rax],al
 100d5aa:	(bad)  
 100d5ab:	add    bl,BYTE PTR [rdi+0x66]
 100d5ae:	jo     0x100d625
 100d5b0:	je     0x100d629
 100d5b2:	movsxd ebp,DWORD PTR [rax+0x61]
 100d5b5:	jb     0x100d5b7
 100d5b7:	add    BYTE PTR [rbp+rax*1+0x66],dl
 100d5bb:	addr32 gs je 0x100d636
 100d5bf:	jae    0x100d5c1
 100d5c1:	add    BYTE PTR [rax+0x5],ah
 100d5c4:	data16 jo 0x100d63c
 100d5c7:	je     0x100d640
 100d5c9:	jae    0x100d5cb
 100d5cb:	add    BYTE PTR [rbp+rax*1+0x66],ch
 100d5cf:	ja     0x100d641
 100d5d1:	jb     0x100d63c
 100d5d3:	outs   dx,BYTE PTR ds:[rsi]
 100d5d4:	je     0x100d63c
 100d5d6:	add    BYTE PTR [rax],al
 100d5d8:	xor    eax,DWORD PTR [rsi]
 100d5da:	ja     0x100d64c
 100d5dc:	jb     0x100d647
 100d5de:	outs   dx,BYTE PTR ds:[rsi]
 100d5df:	je     0x100d647
 100d5e1:	add    BYTE PTR [rip+0x77667606],al        # 0x78674bed
 100d5e7:	jo     0x100d65b
 100d5e9:	imul   ebp,DWORD PTR [rsi+0x74],0x4e10066
 100d5f0:	pop    rdi
 100d5f1:	ja     0x100d659
 100d5f3:	outs   dx,DWORD PTR ds:[rsi]
 100d5f4:	jo     0x100d65b
 100d5f6:	outs   dx,BYTE PTR ds:[rsi]
 100d5f7:	add    ch,ch
 100d5f9:	add    DWORD PTR [rdi+0x64],ebx
 100d5fc:	jne    0x100d66e
 100d5fe:	add    BYTE PTR [rax],al
 100d600:	out    dx,al
 100d601:	add    DWORD PTR [rdi+0x64],ebx
 100d604:	jne    0x100d676
 100d606:	xor    al,BYTE PTR [rax]
 100d608:	fadd   QWORD PTR [rbx]
 100d60a:	pop    rdi
 100d60b:	jae    0x100d672
 100d60d:	je     0x100d67c
 100d60f:	outs   dx,DWORD PTR ds:[rsi]
 100d610:	fs add BYTE PTR gs:[rax],al
 100d614:	rex.X add eax,0x636f6c63
 100d61a:	imul   eax,DWORD PTR [rax],0x3f
 100d61d:	add    al,0x5f
 100d61f:	je     0x100d68a
 100d621:	ins    DWORD PTR es:[rdi],dx
 100d622:	gs ss xor al,0x0
 100d626:	add    eax,DWORD PTR [rip+0x6573775f]        # 0x66744d8b
 100d62c:	je     0x100d69a
 100d62e:	outs   dx,DWORD PTR ds:[rsi]
 100d62f:	movsxd esp,DWORD PTR [rcx+0x6c]
 100d632:	gs add bl,bl
 100d635:	add    ebx,DWORD PTR [rdi+0x73]
 100d638:	gs je  0x100d6a8
 100d63b:	(bad)  
 100d63d:	jo     0x100d63f
 100d63f:	add    BYTE PTR [rcx+0x6d656d05],ch
 100d645:	movsxd esi,DWORD PTR [rax+0x79]
 100d648:	add    BYTE PTR [rax],al
 100d64a:	sahf   
 100d64b:	add    DWORD PTR [rdi+0x61],ebx
 100d64e:	ins    DWORD PTR es:[rdi],dx
 100d64f:	jae    0x100d6b8
 100d651:	pop    rdi
 100d652:	gs js  0x100d6be
 100d655:	je     0x100d657
 100d657:	add    BYTE PTR [rax+0x775f5f01],dl
 100d65d:	addr32 gs je 0x100d6ce
 100d661:	(bad)  
 100d662:	imul   ebp,DWORD PTR [rsi+0x61],0x736772
 100d669:	add    BYTE PTR [rsi],bl
 100d66b:	add    DWORD PTR [rdi+0x5f],ebx
 100d66e:	rex.XB pop r15
 100d670:	jae    0x100d6e2
 100d672:	movsxd ebp,DWORD PTR gs:[rcx+0x66]
 100d676:	imul   esp,DWORD PTR [rbx+0x5f],0x646e6168
 100d67d:	ins    BYTE PTR es:[rdi],dx
 100d67e:	gs jb  0x100d681
 100d681:	add    BYTE PTR [rdx],bl
 100d683:	add    DWORD PTR [rdi+0x58],ebx
 100d686:	movsxd esi,DWORD PTR [rax+0x74]
 100d689:	imul   r13d,DWORD PTR [rsp+r14*2+0x65],0x2000072
 100d692:	pop    rdi
 100d693:	gs js  0x100d6ff
 100d696:	je     0x100d698
 100d698:	mov    ch,0x1
 100d69a:	pop    rdi
 100d69b:	movsxd esp,DWORD PTR [rbp+0x78]
 100d69e:	imul   esi,DWORD PTR [rax+rax*1+0x0],0x78650548
 100d6a6:	imul   esi,DWORD PTR [rax+rax*1+0x0],0x5f5f0191
 100d6ae:	ja     0x100d719
 100d6b0:	outs   dx,BYTE PTR ds:[rsi]
 100d6b1:	imul   esi,DWORD PTR [rbp+riz*2+0x6e],0x86000076
 100d6b9:	add    bl,BYTE PTR [rdi+0x69]
 100d6bc:	outs   dx,BYTE PTR ds:[rsi]
 100d6bd:	imul   esi,DWORD PTR [rsp+rsi*2+0x65],0x87006d72
 100d6c5:	add    bl,BYTE PTR [rdi+0x69]
 100d6c8:	outs   dx,BYTE PTR ds:[rsi]
 100d6c9:	imul   esi,DWORD PTR [rsp+rsi*2+0x65],0x655f6d72
 100d6d1:	add    ch,al
 100d6d3:	add    DWORD PTR [rdi+0x63],ebx
 100d6d6:	outs   dx,DWORD PTR ds:[rsi]
 100d6d7:	outs   dx,BYTE PTR ds:[rsi]
 100d6d8:	imul   sp,WORD PTR [rdi+0x74],0x7268
 100d6de:	gs (bad) 
 100d6e0:	fs ins BYTE PTR es:[rdi],dx
 100d6e2:	outs   dx,DWORD PTR ds:[rsi]
 100d6e3:	movsxd esp,DWORD PTR [rcx+0x6c]
 100d6e6:	add    BYTE PTR gs:[rcx+rax*1+0x5f],bh
 100d6eb:	pop    rdi
 100d6ec:	jae    0x100d753
 100d6ee:	je     0x100d765
 100d6f0:	jae    0x100d757
 100d6f2:	jb     0x100d761
 100d6f4:	(bad)  
 100d6f5:	je     0x100d75f
 100d6f7:	gs jb  0x100d76c
 100d6fa:	add    BYTE PTR [rax],al
 100d6fc:	(bad)
 100d700:	outs   dx,DWORD PTR ds:[rsi]
 100d701:	ins    DWORD PTR es:[rdi],dx
 100d702:	ins    DWORD PTR es:[rdi],dx
 100d703:	outs   dx,DWORD PTR ds:[rsi]
 100d704:	fs add BYTE PTR gs:[rax],al
 100d708:	sbb    al,0x2
 100d70a:	pop    rdi
 100d70b:	ins    WORD PTR es:[rdi],dx
 100d70d:	outs   dx,DWORD PTR ds:[rsi]
 100d70e:	fs add BYTE PTR gs:[rax],al
 100d712:	jns    0x100d715
 100d714:	pop    rdi
 100d715:	pop    rdi
 100d716:	jae    0x100d77d
 100d718:	je     0x100d779
 100d71a:	(bad)  
 100d71b:	jo     0x100d78d
 100d71d:	pop    rdi
 100d71e:	je     0x100d799
 100d720:	jo     0x100d787
 100d722:	add    BYTE PTR [rax],al
 100d724:	rex.WRB push r11
 100d726:	push   rsi
 100d727:	rex.XB push r10
 100d729:	xor    DWORD PTR [rax],esi
 100d72b:	xor    BYTE PTR [rsi],ch
 100d72d:	fs ins BYTE PTR es:[rdi],dx
 100d72f:	ins    BYTE PTR es:[rdi],dx
 100d730:	add    BYTE PTR [rax],al
 100d732:	rex.RX add DWORD PTR [rdi+0x5f],r11d
 100d736:	movsxd esi,DWORD PTR [rdx+0x74]
 100d739:	pop    rdi
 100d73a:	fs gs (bad) 
 100d73d:	jne    0x100d7a6
 100d73f:	addr32 gs jb 0x100d7a2
 100d743:	push   0x6b6f6f
 100d748:	add    BYTE PTR [rcx],al
 100d74a:	(bad)  
 100d74b:	je     0x100d7b2
 100d74d:	jb     0x100d7bc
 100d74f:	imul   ebp,DWORD PTR [rsi+0x61],0x40406574
 100d756:	pop    rcx
 100d757:	pop    r8
 100d759:	pop    rax
 100d75a:	pop    rdx
 100d75b:	add    BYTE PTR [rbx+0x4],bl
 100d75e:	pop    rdi
 100d75f:	jne    0x100d7cf
 100d761:	ins    BYTE PTR es:[rdi],dx
 100d762:	outs   dx,DWORD PTR ds:[rsi]
 100d763:	movsxd ebp,DWORD PTR [rbx+0x0]
 100d766:	add    QWORD PTR [rdi+0x5f],rbx
 100d76a:	fs ins BYTE PTR es:[rdi],dx
 100d76c:	ins    BYTE PTR es:[rdi],dx
 100d76d:	outs   dx,DWORD PTR ds:[rsi]
 100d76e:	outs   dx,BYTE PTR ds:[rsi]
 100d76f:	gs js  0x100d7db
 100d772:	je     0x100d774
 100d774:	test   BYTE PTR [rdx],0x5f
 100d777:	ins    BYTE PTR es:[rdi],dx
 100d778:	outs   dx,DWORD PTR ds:[rsi]
 100d779:	movsxd ebp,DWORD PTR [rbx+0x0]
 100d77c:	popf   
 100d77d:	add    ebx,DWORD PTR [rdi+0x6f]
 100d780:	outs   dx,BYTE PTR ds:[rsi]
 100d781:	gs js  0x100d7ed
 100d784:	je     0x100d786
 100d786:	inc    DWORD PTR [rcx]
 100d788:	rex.WR outs dx,DWORD PTR ds:[rsi]
 100d78a:	(bad)  
 100d78b:	fs push rbx
 100d78d:	je     0x100d801
 100d78f:	imul   ebp,DWORD PTR [rsi+0x67],0x2000041
 100d796:	rex.WR outs dx,DWORD PTR ds:[rsi]
 100d798:	(bad)  
 100d799:	fs push rbx
 100d79b:	je     0x100d80f
 100d79d:	imul   ebp,DWORD PTR [rsi+0x67],0x53550057
 100d7a4:	rex.RB push r10
 100d7a6:	xor    esi,DWORD PTR [rdx]
 100d7a8:	cs fs ins BYTE PTR es:[rdi],dx
 100d7ab:	ins    BYTE PTR es:[rdi],dx
 100d7ac:	add    BYTE PTR [rax],al
 100d7ae:	rex.WRXB
 100d7af:	rex.R
 100d7b0:	rex.X
 100d7b1:	rex.XB xor esi,DWORD PTR [r10]
 100d7b4:	cs fs ins BYTE PTR es:[rdi],dx
 100d7b7:	ins    BYTE PTR es:[rdi],dx
 100d7b8:	add    BYTE PTR [rax],al
 100d7ba:	mov    ebx,0x61734c01
 100d7bf:	rex.WRX je 0x100d815
 100d7c2:	je     0x100d825
 100d7c4:	je     0x100d83b
 100d7c6:	jae    0x100d81c
 100d7c8:	outs   dx,DWORD PTR ds:[rsi]
 100d7c9:	push   rdi
 100d7ca:	imul   ebp,DWORD PTR [rsi+0x45],0x726f7272
 100d7d1:	add    BYTE PTR [rcx+0x44],al
 100d7d4:	push   rsi
 100d7d5:	push   r8
 100d7d7:	xor    rsi,QWORD PTR [r10]
 100d7da:	cs fs ins BYTE PTR es:[rdi],dx
 100d7dd:	ins    BYTE PTR es:[rdi],dx
 100d7de:	add    BYTE PTR [rax],al
 100d7e0:	out    dx,al
 100d7e1:	add    BYTE PTR [rbp+0x6e],al
 100d7e4:	movsxd ebp,DWORD PTR [rdi+0x64]
 100d7e7:	gs push rax
 100d7e9:	outs   dx,DWORD PTR ds:[rsi]
 100d7ea:	imul   ebp,DWORD PTR [rsi+0x74],0xce007265
 100d7f1:	add    al,0x54
 100d7f3:	gs jb  0x100d863
 100d7f6:	imul   ebp,DWORD PTR [rsi+0x61],0x72506574
 100d7fd:	outs   dx,DWORD PTR ds:[rsi]
 100d7fe:	movsxd esp,DWORD PTR [rbp+0x73]
 100d801:	jae    0x100d803
 100d803:	add    dh,al
 100d805:	add    DWORD PTR [rdi+0x65],eax
 100d808:	je     0x100d84d
 100d80a:	jne    0x100d87e
 100d80c:	jb     0x100d873
 100d80e:	outs   dx,BYTE PTR ds:[rsi]
 100d80f:	je     0x100d861
 100d811:	jb     0x100d882
 100d813:	movsxd esp,DWORD PTR [rbp+0x73]
 100d816:	jae    0x100d818
 100d818:	loop   0x100d81e
 100d81a:	push   rbp
 100d81b:	outs   dx,BYTE PTR ds:[rsi]
 100d81c:	push   0x6c646e61
 100d821:	gs fs rex.RB js 0x100d889
 100d826:	gs jo  0x100d89d
 100d829:	imul   ebp,DWORD PTR [rdi+0x6e],0x746c6946
 100d830:	gs jb  0x100d833
 100d833:	add    BYTE PTR [rbx+0x74655304],dh
 100d839:	push   rbp
 100d83a:	outs   dx,BYTE PTR ds:[rsi]
 100d83b:	push   0x6c646e61
 100d840:	gs fs rex.RB js 0x100d8a8
 100d845:	gs jo  0x100d8bc
 100d848:	imul   ebp,DWORD PTR [rdi+0x6e],0x746c6946
 100d84f:	gs jb  0x100d852
 100d852:	add    al,BYTE PTR [rbx]
 100d854:	rex.WB jae 0x100d89b
 100d857:	gs (bad) 
 100d859:	jne    0x100d8c2
 100d85b:	addr32 gs jb 0x100d8af
 100d85f:	jb     0x100d8c6
 100d861:	jae    0x100d8c8
 100d863:	outs   dx,BYTE PTR ds:[rsi]
 100d864:	je     0x100d866
 100d866:	es add al,0x52
 100d869:	je     0x100d8d7
 100d86b:	push   rsi
 100d86c:	imul   esi,DWORD PTR [rdx+0x74],0x556c6175
 100d873:	outs   dx,BYTE PTR ds:[rsi]
 100d874:	ja     0x100d8df
 100d876:	outs   dx,BYTE PTR ds:[rsi]
 100d877:	add    BYTE PTR fs:[rax],al
 100d87a:	(bad)  
 100d87b:	add    al,0x52
 100d87d:	je     0x100d8eb
 100d87f:	rex.WR outs dx,DWORD PTR ds:[rsi]
 100d881:	outs   dx,DWORD PTR ds:[rsi]
 100d882:	imul   esi,DWORD PTR [rbp+0x70],0x46
 100d886:	jne    0x100d8f6
 100d888:	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
 100d88c:	outs   dx,BYTE PTR ds:[rsi]
 100d88d:	rex.RB outs dx,BYTE PTR ds:[rsi]
 100d88f:	je     0x100d903
 100d891:	jns    0x100d893
 100d893:	add    BYTE PTR [rax],bl
 100d895:	add    al,0x52
 100d897:	je     0x100d905
 100d899:	rex.XB (bad) 
 100d89b:	jo     0x100d911
 100d89d:	jne    0x100d911
 100d89f:	rex.XB outs dx,DWORD PTR gs:[rsi]
 100d8a2:	outs   dx,BYTE PTR ds:[rsi]
 100d8a3:	je     0x100d90a
 100d8a5:	js     0x100d91b
 100d8a7:	add    bl,cl
 100d8a9:	add    BYTE PTR [rbp+riz*2+0x63],al
 100d8ad:	outs   dx,DWORD PTR ds:[rsi]
 100d8ae:	fs gs push rax
 100d8b1:	outs   dx,DWORD PTR ds:[rsi]
 100d8b2:	imul   ebp,DWORD PTR [rsi+0x74],0xa9007265
 100d8b9:	add    edx,DWORD PTR [rcx+0x75]
 100d8bc:	gs jb  0x100d938
 100d8bf:	push   rax
 100d8c0:	gs jb  0x100d929
 100d8c3:	outs   dx,DWORD PTR ds:[rsi]
 100d8c4:	jb     0x100d933
 100d8c6:	(bad)  
 100d8c7:	outs   dx,BYTE PTR ds:[rsi]
 100d8c8:	movsxd esp,DWORD PTR [rbp+0x43]
 100d8cb:	outs   dx,DWORD PTR ds:[rsi]
 100d8cc:	jne    0x100d93c
 100d8ce:	je     0x100d935
 100d8d0:	jb     0x100d8d2
 100d8d2:	(bad)  
 100d8d3:	add    al,BYTE PTR [rdi+0x65]
 100d8d6:	je     0x100d92c
 100d8d8:	imul   esp,DWORD PTR [rbx+0x6b],0x6e756f43
 100d8df:	je     0x100d8e1
 100d8e1:	add    bl,cl
 100d8e3:	add    DWORD PTR [rdi+0x65],eax
 100d8e6:	je     0x100d92b
 100d8e8:	jne    0x100d95c
 100d8ea:	jb     0x100d951
 100d8ec:	outs   dx,BYTE PTR ds:[rsi]
 100d8ed:	je     0x100d943
 100d8ef:	push   0x64616572
 100d8f4:	rex.WB
 100d8f5:	add    BYTE PTR fs:[rax],al
 100d8f8:	mov    DWORD PTR [rcx],0x43746547
 100d8fe:	jne    0x100d972
 100d900:	jb     0x100d967
 100d902:	outs   dx,BYTE PTR ds:[rsi]
 100d903:	je     0x100d955
 100d905:	jb     0x100d976
 100d907:	movsxd esp,DWORD PTR [rbp+0x73]
 100d90a:	jae    0x100d955
 100d90c:	add    BYTE PTR fs:[rax+0x74654702],al
 100d913:	push   rbx
 100d914:	jns    0x100d989
 100d916:	je     0x100d97d
 100d918:	ins    DWORD PTR es:[rdi],dx
 100d919:	push   rsp
 100d91a:	imul   ebp,DWORD PTR [rbp+0x65],0x69467341
 100d921:	ins    BYTE PTR es:[rdi],dx
 100d922:	gs push rsp
 100d924:	imul   ebp,DWORD PTR [rbp+0x65],0x46013400
 100d92b:	imul   ebp,DWORD PTR [rsi+0x64],0x736f6c43
 100d932:	add    BYTE PTR gs:[rdx],al
 100d935:	add    al,BYTE PTR [rdi+0x65]
 100d938:	je     0x100d980
 100d93a:	jne    0x100d9a8
 100d93c:	ins    BYTE PTR es:[rdi],dx
 100d93d:	push   rax
 100d93e:	(bad)  
 100d93f:	je     0x100d9a9
 100d941:	rex.WRX (bad) 
 100d943:	ins    DWORD PTR es:[rdi],dx
 100d944:	gs push rdi
 100d946:	add    BYTE PTR [rax],al
 100d948:	(bad)  
 100d949:	add    DWORD PTR [rsi+0x69],eax
 100d94c:	outs   dx,BYTE PTR ds:[rsi]
 100d94d:	rex.RX imul r14d,DWORD PTR fs:[rdx+0x73],0x6c694674
 100d956:	gs push rdi
 100d958:	add    BYTE PTR [rax],al
 100d95a:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 100d95b:	add    al,BYTE PTR [rdi+0x65]
 100d95e:	je     0x100d9b5
 100d960:	jae    0x100d9c7
 100d962:	jb     0x100d9a8
 100d964:	gs data16 (bad) 
 100d967:	jne    0x100d9d5
 100d969:	je     0x100d9c0
 100d96b:	rex.WB
 100d96c:	rex.WR (bad) 
 100d96e:	outs   dx,BYTE PTR ds:[rsi]
 100d96f:	addr32 jne 0x100d9d3
 100d972:	add    BYTE PTR gs:[eax],al

Disassembly of section .data:

000000000100e000 <.data>:
 100e000:	add    BYTE PTR [rax],al
 100e002:	add    BYTE PTR [rax],al
 100e004:	add    BYTE PTR [rcx],al
	...
 100e0fe:	add    BYTE PTR [rax],al
 100e100:	rex.WRXB add BYTE PTR [r8],r8b
 100e103:	add    BYTE PTR [rax],ah
 100e105:	add    BYTE PTR [rax],al
 100e107:	add    BYTE PTR [rax],ah
 100e109:	add    BYTE PTR [rax],al
 100e10b:	add    BYTE PTR [rcx],al
 100e10d:	add    BYTE PTR [rax],al
 100e10f:	add    BYTE PTR [rcx],al
 100e111:	add    BYTE PTR [rax],al
 100e113:	add    bh,bh
 100e115:	(bad)  
 100e116:	(bad)  
 100e117:	inc    DWORD PTR [rbx]
 100e119:	add    BYTE PTR [rax],al
 100e11b:	add    BYTE PTR [rbx],al
 100e11d:	add    BYTE PTR [rax],al
 100e11f:	add    bh,bh
 100e121:	(bad)  
 100e122:	(bad)  
 100e123:	inc    DWORD PTR [rax]
 100e125:	add    BYTE PTR [rax],al
 100e127:	add    BYTE PTR [rdx*1+0x100],bh
 100e12e:	add    BYTE PTR [rax],al
 100e130:	xor    ah,BYTE PTR [rdx+0x2b992ddf]
 100e136:	add    BYTE PTR [rax],al
 100e138:	int    0x5d
 100e13a:	and    dl,dl
 100e13c:	data16 (bad) 
 100e13e:	(bad)  
 100e13f:	push   QWORD PTR [rbp-0x68]
 100e142:	add    BYTE PTR [rax],al
 100e144:	(bad)  
 100e145:	(bad)  
 100e146:	(bad)  
 100e147:	(bad)  
 100e148:	(bad)  
 100e149:	(bad)  
 100e14a:	(bad)  
 100e14b:	(bad)  
 100e14c:	(bad)  
 100e14d:	(bad)  
 100e14e:	(bad)  
 100e14f:	inc    DWORD PTR [rcx]
	...

Disassembly of section .pdata:

0000000001010000 <.pdata>:
 1010000:	sbb    al,0x0
 1010003:	add    BYTE PTR [rcx+0x1c],ah
 1010006:	add    BYTE PTR [rax],al
 1010008:	cwde   
 1010009:	ret    0x0
 101000c:	(bad)  
 101000d:	sbb    al,0x0
 101000f:	add    bh,ah
 1010011:	sbb    al,0x0
 1010013:	add    BYTE PTR [rax-0x18ffff3e],dh
 1010019:	sbb    al,0x0
 101001b:	add    ah,dl
 101001d:	and    BYTE PTR [rax],al
 101001f:	add    al,dl
 1010021:	ret    0x0
 1010024:	(bad)  
 1010025:	and    BYTE PTR [rax],al
 1010027:	add    BYTE PTR [rcx+riz*1],ah
 101002a:	add    BYTE PTR [rax],al
 101002c:	in     al,0xc2
 101002e:	add    BYTE PTR [rax],al
 1010030:	and    al,0x21
 1010032:	add    BYTE PTR [rax],al
 1010034:	jbe    0x1010057
 1010036:	add    BYTE PTR [rax],al
 1010038:	hlt    
 1010039:	ret    0x0
 101003c:	and    BYTE PTR [rcx],0x0
 101003f:	add    bh,cl
 1010041:	and    DWORD PTR [rax],eax
 1010043:	add    BYTE PTR [rbx+rax*8],al
 1010046:	add    BYTE PTR [rax],al
 1010048:	iret   
 1010049:	and    DWORD PTR [rax],eax
 101004b:	add    dh,ch
 101004d:	and    al,0x0
 101004f:	add    BYTE PTR [rax],dl
 1010051:	ret    
 1010052:	add    BYTE PTR [rax],al
 1010054:	out    dx,al
 1010055:	and    al,0x0
 1010057:	add    bl,dh
 1010059:	and    al,0x0
 101005b:	add    BYTE PTR [rbx+rax*8],dh
 101005e:	add    BYTE PTR [rax],al
 1010060:	repz and al,0x0
 1010063:	add    BYTE PTR [rcx],al
 1010065:	and    eax,0xc3580000
 101006a:	add    BYTE PTR [rax],al
 101006c:	adc    BYTE PTR [rip+0x25ed0000],ah        # 0x26ee0072
 1010072:	add    BYTE PTR [rax],al
 1010074:	push   0xffffffffed0000c3
 1010079:	and    eax,0x277f0000
 101007e:	add    BYTE PTR [rax],al
 1010080:	mov    bl,al
 1010082:	add    BYTE PTR [rax],al
 1010084:	jg     0x10100ad
 1010086:	add    BYTE PTR [rax],al
 1010088:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1010089:	(bad)  
 101008a:	add    BYTE PTR [rax],al
 101008c:	pushf  
 101008d:	ret    
 101008e:	add    BYTE PTR [rax],al
 1010090:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1010091:	(bad)  
 1010092:	add    BYTE PTR [rax],al
 1010094:	cmp    al,0x28
 1010096:	add    BYTE PTR [rax],al
 1010098:	lods   al,BYTE PTR ds:[rsi]
 1010099:	ret    
 101009a:	add    BYTE PTR [rax],al
 101009c:	cmp    al,0x28
 101009e:	add    BYTE PTR [rax],al
 10100a0:	rex.RX sub BYTE PTR [rax],r8b
 10100a3:	add    al,al
 10100a5:	ret    
 10100a6:	add    BYTE PTR [rax],al
 10100a8:	push   rax
 10100a9:	sub    BYTE PTR [rax],al
 10100ab:	add    BYTE PTR [rax+0x2b],dl
 10100ae:	add    BYTE PTR [rax],al
 10100b0:	rol    bl,1
 10100b2:	add    BYTE PTR [rax],al
 10100b4:	(bad)  
 10100b5:	sub    eax,DWORD PTR [rax]
 10100b7:	add    bl,dh
 10100b9:	sub    eax,DWORD PTR [rax]
 10100bb:	add    al,dh
 10100bd:	ret    
 10100be:	add    BYTE PTR [rax],al
 10100c0:	add    BYTE PTR [rax+rax*1],ch
 10100c3:	add    BYTE PTR [rdi],cl
 10100c5:	sub    eax,0xc3f80000
 10100ca:	add    BYTE PTR [rax],al
 10100cc:	and    BYTE PTR [rip+0x2db20000],ch        # 0x2eb300d2
 10100d2:	add    BYTE PTR [rax],al
 10100d4:	sbb    al,0xc4
 10100d6:	add    BYTE PTR [rax],al
 10100d8:	shr    BYTE PTR [rip+0x2e4f0000],0x0        # 0x2f5000df
 10100df:	add    BYTE PTR [rax],ch
 10100e1:	(bad)  
 10100e2:	add    BYTE PTR [rax],al
 10100e4:	rex.WRXB
 10100e5:	add    BYTE PTR cs:[rax],al
 10100e8:	(bad)  
 10100e9:	add    BYTE PTR cs:[rax],al
 10100ec:	cmp    ah,al
 10100ee:	add    BYTE PTR [rax],al
 10100f0:	(bad)  
 10100f1:	add    BYTE PTR cs:[rax],al
 10100f4:	xchg   esi,eax
 10100f5:	(bad)  
 10100f6:	add    BYTE PTR [rax],al
 10100f8:	rex.WR (bad) 
 10100fa:	add    BYTE PTR [rax],al
 10100fc:	movabs al,ds:0x5c0000303000002f
 1010105:	(bad)  
 1010106:	add    BYTE PTR [rax],al
 1010108:	xor    BYTE PTR [rax],dh
 101010a:	add    BYTE PTR [rax],al
 101010c:	ja     0x101013e
 101010e:	add    BYTE PTR [rax],al
 1010110:	jo     0x10100d6
 1010112:	add    BYTE PTR [rax],al
 1010114:	ja     0x1010146
 1010116:	add    BYTE PTR [rax],al
 1010118:	mov    WORD PTR [rax],?
 101011a:	add    BYTE PTR [rax],al
 101011c:	mov    ah,al
 101011e:	add    BYTE PTR [rax],al
 1010120:	mov    WORD PTR [rax],?
 1010122:	add    BYTE PTR [rax],al
 1010124:	mov    DWORD PTR [rdx],esi
 1010126:	add    BYTE PTR [rax],al
 1010128:	cwde   
 1010129:	(bad)  
 101012a:	add    BYTE PTR [rax],al
 101012c:	mov    DWORD PTR [rdx],esi
 101012e:	add    BYTE PTR [rax],al
 1010130:	xchg   ecx,eax
 1010131:	xor    al,BYTE PTR [rax]
 1010133:	add    BYTE PTR [rax-0x5fffff3c],dh
 1010139:	xor    al,BYTE PTR [rax]
 101013b:	add    BYTE PTR [rip+0xffffffffc0000038],bh        # 0xffffffffc1010179
 1010141:	(bad)  
 1010142:	add    BYTE PTR [rax],al
 1010144:	push   rax
 1010145:	cmp    BYTE PTR [rax],al
 1010147:	add    BYTE PTR [rax],cl
 1010149:	cmp    DWORD PTR [rax],eax
 101014b:	add    ah,ah
 101014d:	(bad)  
 101014e:	add    BYTE PTR [rax],al
 1010150:	or     BYTE PTR [rcx],bh
 1010152:	add    BYTE PTR [rax],al
 1010154:	xor    eax,0xf8000039
 1010159:	(bad)  
 101015a:	add    BYTE PTR [rax],al
 101015c:	xor    eax,0x3f000039
 1010161:	cmp    DWORD PTR [rax],eax
 1010163:	add    BYTE PTR [rax*8+0x393f0000],cl
 101016a:	add    BYTE PTR [rax],al
 101016c:	jno    0x10101ac
 101016e:	add    BYTE PTR [rax],al
 1010170:	and    ch,al
 1010172:	add    BYTE PTR [rax],al
 1010174:	jno    0x10101b4
 1010176:	add    BYTE PTR [rax],al
 1010178:	jmp    0x10101b8
 101017a:	add    BYTE PTR [rax],al
 101017c:	xor    al,0xc5
 101017e:	add    BYTE PTR [rax],al
 1010180:	jmp    0x10101c0
 1010182:	add    BYTE PTR [rax],al
 1010184:	std    
 1010185:	add    BYTE PTR ds:[rax],al
 1010188:	(bad)
 101018c:	adc    BYTE PTR [rdi],bh
 101018e:	add    BYTE PTR [rax],al
 1010190:	pop    rsp
 1010191:	(bad)  
 1010192:	add    BYTE PTR [rax],al
 1010194:	push   rsp
 1010195:	(bad)
 1010198:	pop    rsp
 1010199:	(bad)  
 101019a:	add    BYTE PTR [rax],al
 101019c:	sbb    DWORD PTR [rbx+0x0],eax
 101019f:	add    BYTE PTR [rbp+rax*8+0x0],ch
 10101a3:	add    BYTE PTR [rcx],bl
 10101a5:	rex.XB add BYTE PTR [r8],al
 10101a8:	cmp    DWORD PTR [rbx+0x0],eax
 10101ab:	add    BYTE PTR [rax+0x400000c5],dl
 10101b1:	rex.XB add BYTE PTR [r8],al
 10101b4:	mov    bl,0x43
 10101b6:	add    BYTE PTR [rax],al
 10101b8:	movabs al,ds:0x71000043b30000c5
 10101c1:	rex.RXB add BYTE PTR [r8],r8b
 10101c4:	mov    esp,0x710000c5
 10101c9:	rex.RXB add BYTE PTR [r8],r8b
 10101cc:	nop
 10101cd:	rex.RXB add BYTE PTR [r8],r8b
 10101d0:	fadd   st,st(5)
 10101d2:	add    BYTE PTR [rax],al
 10101d4:	movabs al,ds:0xe800004ca9000047
 10101dd:	(bad)
 10101e0:	mov    al,0x4c
 10101e2:	add    BYTE PTR [rax],al
 10101e4:	rex.RB
 10101e5:	rex.WRB add BYTE PTR [r8],r8b
 10101e8:	add    al,0xc6
 10101ea:	add    BYTE PTR [rax],al
 10101ec:	push   rax
 10101ed:	rex.WRB add BYTE PTR [r8],r8b
 10101f0:	ins    BYTE PTR es:[rdi],dx
 10101f1:	rex.WRB add BYTE PTR [r8],r8b
 10101f4:	adc    al,0xc6
 10101f6:	add    BYTE PTR [rax],al
 10101f8:	ins    BYTE PTR es:[rdi],dx
 10101f9:	rex.WRB add BYTE PTR [r8],r8b
 10101fc:	rex.WRX add BYTE PTR ss:[rax],r8b
 1010200:	sbb    al,0xc6
 1010202:	add    BYTE PTR [rax],al
 1010204:	rex.WRX add BYTE PTR ss:[rax],r8b
 1010208:	cmp    al,0x4e
 101020a:	add    BYTE PTR [rax],al
 101020c:	xor    dh,al
 101020e:	add    BYTE PTR [rax],al
 1010210:	push   rax
 1010211:	rex.WRX add BYTE PTR [rax],r8b
 1010214:	or     DWORD PTR [rdi+0x0],0x0
 1010218:	rex mov BYTE PTR [rax],0x0
 101021c:	nop
 101021d:	rex.WRXB add BYTE PTR [r8],r8b
 1010220:	or     DWORD PTR [rax+0x0],edx
 1010223:	add    BYTE PTR [rsi+rax*8+0x0],cl
 1010227:	add    BYTE PTR [rax],dl
 1010229:	push   rax
 101022a:	add    BYTE PTR [rax],al
 101022c:	icebp  
 101022d:	push   rax
 101022e:	add    BYTE PTR [rax],al
 1010230:	push   rsp
 1010231:	mov    BYTE PTR [rax],0x0
 1010234:	icebp  
 1010235:	push   rax
 1010236:	add    BYTE PTR [rax],al
 1010238:	mov    ecx,0x60000052
 101023d:	mov    BYTE PTR [rax],0x0
 1010240:	mov    ecx,0xdc000052
 1010245:	push   rdx
 1010246:	add    BYTE PTR [rax],al
 1010248:	add    dh,0x0
 101024b:	add    al,dh
 101024d:	push   rdx
 101024e:	add    BYTE PTR [rax],al
 1010250:	rex.RB push r13
 1010252:	add    BYTE PTR [rax],al
 1010254:	movabs al,ds:0xbb000055500000c6
 101025d:	push   rbp
 101025e:	add    BYTE PTR [rax],al
 1010260:	mov    eax,0xd00000c6
 1010265:	push   rbp
 1010266:	add    BYTE PTR [rax],al
 1010268:	rex.WXB push r14
 101026a:	add    BYTE PTR [rax],al
 101026c:	rol    dh,0x0
 101026f:	add    BYTE PTR [rax+0x56],ah
 1010272:	add    BYTE PTR [rax],al
 1010274:	(bad)  
 1010275:	push   rsi
 1010276:	add    BYTE PTR [rax],al
 1010278:	enter  0xc6,0x0
 101027c:	(bad)  
 101027d:	push   rsi
 101027e:	add    BYTE PTR [rax],al
 1010280:	in     al,dx
 1010281:	push   rsi
 1010282:	add    BYTE PTR [rax],al
 1010284:	loopne 0x101024c
 1010286:	add    BYTE PTR [rax],al
 1010288:	in     al,dx
 1010289:	push   rsi
 101028a:	add    BYTE PTR [rax],al
 101028c:	js     0x10102e7
 101028e:	add    BYTE PTR [rax],al
 1010290:	hlt    
 1010291:	mov    BYTE PTR [rax],0x0
 1010294:	js     0x10102ef
 1010296:	add    BYTE PTR [rax],al
 1010298:	sbb    BYTE PTR [rcx+0x0],0x0
 101029c:	adc    bh,al
 101029e:	add    BYTE PTR [rax],al
 10102a0:	sbb    BYTE PTR [rcx+0x0],0x0
 10102a4:	sahf   
 10102a5:	pop    rcx
 10102a6:	add    BYTE PTR [rax],al
 10102a8:	and    bh,al
 10102aa:	add    BYTE PTR [rax],al
 10102ac:	mov    al,0x59
 10102ae:	add    BYTE PTR [rax],al
 10102b0:	rex.WX pop rdx
 10102b2:	add    BYTE PTR [rax],al
 10102b4:	xor    bh,al
 10102b6:	add    BYTE PTR [rax],al
 10102b8:	push   rax
 10102b9:	pop    rdx
 10102ba:	add    BYTE PTR [rax],al
 10102bc:	sbb    bl,BYTE PTR [rbx+0x0]
 10102bf:	add    BYTE PTR [rax],bh
 10102c1:	mov    DWORD PTR [rax],0x5b2000
 10102c7:	add    BYTE PTR [rbp+0x4000005b],dl
 10102cd:	mov    DWORD PTR [rax],0x5ba000
 10102d3:	add    BYTE PTR [rbp+0x5000005c],ah
 10102d9:	mov    DWORD PTR [rax],0x5cb000
 10102df:	add    BYTE PTR [rbx],ah
 10102e1:	pop    rbp
 10102e2:	add    BYTE PTR [rax],al
 10102e4:	push   0x300000c7
 10102e9:	pop    rbp
 10102ea:	add    BYTE PTR [rax],al
 10102ec:	xchg   esp,eax
 10102ed:	pop    rbp
 10102ee:	add    BYTE PTR [rax],al
 10102f0:	je     0x10102b9
 10102f2:	add    BYTE PTR [rax],al
 10102f4:	movabs al,ds:0x8400005e5700005d
 10102fd:	mov    DWORD PTR [rax],0x5eb000
 1010303:	add    BYTE PTR [rip+0xffffffff9000005f],dl        # 0xffffffff91010368
 1010309:	mov    DWORD PTR [rax],0x5f2000
 101030f:	add    BYTE PTR [rax+0x5f],bh
 1010312:	add    BYTE PTR [rax],al
 1010314:	movabs al,ds:0xc200005f780000c7
 101031d:	pop    rdi
 101031e:	add    BYTE PTR [rax],al
 1010320:	mov    ah,0xc7
 1010322:	add    BYTE PTR [rax],al
 1010324:	ret    0x5f
 1010327:	add    BYTE PTR [rdi],bh
 1010329:	(bad)  
 101032a:	add    BYTE PTR [rax],al
 101032c:	enter  0xc7,0x0
 1010330:	jo     0x1010392
 1010332:	add    BYTE PTR [rax],al
 1010334:	mov    fs,WORD PTR [rcx+0x0]
 1010337:	add    al,bl
 1010339:	mov    DWORD PTR [rax],0x61a000
 101033f:	add    BYTE PTR [rbx+riz*2+0x0],ah
 1010343:	add    ah,dh
 1010345:	mov    DWORD PTR [rax],0x637000
 101034b:	add    BYTE PTR [rbx+riz*2-0x37f00000],dl
 1010352:	add    BYTE PTR [rax],al
 1010354:	xchg   esp,eax
 1010355:	movsxd eax,DWORD PTR [rax]
 1010357:	add    BYTE PTR [rip+0x24000064],dl        # 0x250103c1
 101035d:	enter  0x0,0x15
 1010361:	add    BYTE PTR fs:[rax],al
 1010364:	jae    0x10103ca
 1010366:	add    BYTE PTR [rax],al
 1010368:	rex.R enter 0x0,0x73
 101036d:	add    BYTE PTR fs:[rax],al
 1010370:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1010371:	add    BYTE PTR [eax],al
 1010374:	pop    rax
 1010375:	enter  0x0,0xa7
 1010379:	add    BYTE PTR [eax],al
 101037c:	(bad)  
 101037d:	add    BYTE PTR [eax],al
 1010380:	jo     0x101034a
 1010382:	add    BYTE PTR [rax],al
 1010384:	(bad)  
 1010385:	add    BYTE PTR [eax],al
 1010388:	(bad)  
 1010389:	push   0xffffffffc8800000
 101038e:	add    BYTE PTR [rax],al
 1010390:	(bad)  
 1010391:	push   0x68320000
 1010396:	add    BYTE PTR [rax],al
 1010398:	nop
 1010399:	enter  0x0,0x40
 101039d:	push   0x68bb0000
 10103a2:	add    BYTE PTR [rax],al
 10103a4:	movabs al,ds:0xe0000068d00000c8
 10103ad:	push   0x0
 10103af:	add    BYTE PTR [rax+rcx*8+0x6af00000],ch
 10103b6:	add    BYTE PTR [rax],al
 10103b8:	(bad)  
 10103b9:	imul   eax,DWORD PTR [rax],0x0
 10103bc:	(bad)  
 10103bd:	enter  0x0,0x3f
 10103c1:	imul   eax,DWORD PTR [rax],0x0
 10103c4:	(bad)  
 10103c5:	imul   eax,DWORD PTR [rax],0x0
 10103c8:	fmul   st(0),st
 10103ca:	add    BYTE PTR [rax],al
 10103cc:	(bad)  
 10103cd:	imul   eax,DWORD PTR [rax],0x0
 10103d0:	out    0x6b,eax
 10103d2:	add    BYTE PTR [rax],al
 10103d4:	lock enter 0x0,0xe7
 10103d9:	imul   eax,DWORD PTR [rax],0x0
 10103dc:	sbb    al,0x6c
 10103de:	add    BYTE PTR [rax],al
 10103e0:	add    cl,cl
 10103e2:	add    BYTE PTR [rax],al
 10103e4:	xor    BYTE PTR [rax+rax*1+0x0],ch
 10103e8:	(bad)  
 10103e9:	ins    BYTE PTR es:[rdi],dx
 10103ea:	add    BYTE PTR [rax],al
 10103ec:	adc    al,0xc9
 10103ee:	add    BYTE PTR [rax],al
 10103f0:	(bad)  
 10103f1:	ins    BYTE PTR es:[rdi],dx
 10103f2:	add    BYTE PTR [rax],al
 10103f4:	(bad)  
 10103f5:	ins    DWORD PTR es:[rdi],dx
 10103f6:	add    BYTE PTR [rax],al
 10103f8:	sbb    al,0xc9
 10103fa:	add    BYTE PTR [rax],al
 10103fc:	(bad)  
 10103fd:	ins    DWORD PTR es:[rdi],dx
 10103fe:	add    BYTE PTR [rax],al
 1010400:	xchg   esi,eax
 1010401:	ins    DWORD PTR es:[rdi],dx
 1010402:	add    BYTE PTR [rax],al
 1010404:	xor    al,0xc9
 1010406:	add    BYTE PTR [rax],al
 1010408:	xchg   esi,eax
 1010409:	ins    DWORD PTR es:[rdi],dx
 101040a:	add    BYTE PTR [rax],al
 101040c:	popf   
 101040d:	ins    DWORD PTR es:[rdi],dx
 101040e:	add    BYTE PTR [rax],al
 1010410:	rex.WR leave 
 1010412:	add    BYTE PTR [rax],al
 1010414:	mov    al,0x6d
 1010416:	add    BYTE PTR [rax],al
 1010418:	jmp    0x1010487
 101041a:	add    BYTE PTR [rax],al
 101041c:	pop    rsp
 101041d:	leave  
 101041e:	add    BYTE PTR [rax],al
 1010420:	jmp    0x101048f
 1010422:	add    BYTE PTR [rax],al
 1010424:	cmp    ch,BYTE PTR [rsi+0x0]
 1010427:	add    BYTE PTR [rcx+rcx*8+0x0],ah
 101042b:	add    BYTE PTR [rdx],bh
 101042d:	outs   dx,BYTE PTR ds:[rsi]
 101042e:	add    BYTE PTR [rax],al
 1010430:	jbe    0x10104a0
 1010432:	add    BYTE PTR [rax],al
 1010434:	js     0x10103ff
 1010436:	add    BYTE PTR [rax],al
 1010438:	sub    BYTE PTR [rsi+0x0],0x0
 101043c:	(bad)  
 101043d:	jo     0x101043f
 101043f:	add    BYTE PTR [rcx+rcx*8+0x70300000],cl
 1010446:	add    BYTE PTR [rax],al
 1010448:	rex.X jno 0x101044b
 101044b:	add    BYTE PTR [rax+0x500000c9],ah
 1010451:	jno    0x1010453
 1010453:	add    cl,al
 1010455:	jno    0x1010457
 1010457:	add    BYTE PTR [rax-0x3effff37],bh
 101045d:	jno    0x101045f
 101045f:	add    BYTE PTR [rbx],cl
 1010461:	jb     0x1010463
 1010463:	add    al,cl
 1010465:	leave  
 1010466:	add    BYTE PTR [rax],al
 1010468:	or     esi,DWORD PTR [rdx+0x0]
 101046b:	add    BYTE PTR [rbx],ah
 101046d:	jb     0x101046f
 101046f:	add    ah,bl
 1010471:	leave  
 1010472:	add    BYTE PTR [rax],al
 1010474:	xor    BYTE PTR [rdx+0x0],dh
 1010477:	add    BYTE PTR [rax+0x73],bh
 101047a:	add    BYTE PTR [rax],al
 101047c:	in     al,dx
 101047d:	leave  
 101047e:	add    BYTE PTR [rax],al
 1010480:	js     0x10104f5
 1010482:	add    BYTE PTR [rax],al
 1010484:	(bad)  
 1010485:	fwait
 1010486:	add    BYTE PTR [rax],al
 1010488:	or     dl,cl
 101048a:	add    BYTE PTR [rax],al
 101048c:	loopne 0x1010429
 101048e:	add    BYTE PTR [rax],al
 1010490:	and    bl,BYTE PTR [rbp-0x35dc0000]
 1010496:	add    BYTE PTR [rax],al
 1010498:	and    bl,BYTE PTR [rbp-0x5c9c0000]
 101049e:	add    BYTE PTR [rax],al
 10104a0:	rex.R retf 0x0
 10104a4:	movabs fs:0xca580000a3880000,eax
 10104ae:	add    BYTE PTR [rax],al
 10104b0:	mov    BYTE PTR [rbx-0x5c540000],ah
 10104b6:	add    BYTE PTR [rax],al
 10104b8:	push   0xffffffffb40000ca
 10104bd:	movabs ds:0xca7c0000a4190000,eax
 10104c6:	add    BYTE PTR [rax],al
 10104c8:	and    BYTE PTR [rax+rax*1+0xa5a000],ah
 10104cf:	add    BYTE PTR [rdx+rcx*8-0x5a580000],cl
 10104d6:	add    BYTE PTR [rax],al
 10104d8:	jbe    0x1010480
 10104da:	add    BYTE PTR [rax],al
 10104dc:	mov    al,0xca
 10104de:	add    BYTE PTR [rax],al
 10104e0:	jl     0x1010488
 10104e2:	add    BYTE PTR [rax],al
 10104e4:	mov    fs,WORD PTR [rsi-0x35480000]
 10104ea:	add    BYTE PTR [rax],al
 10104ec:	xchg   esp,eax
 10104ed:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 10104ee:	add    BYTE PTR [rax],al
 10104f0:	mul    DWORD PTR [rsi-0x35400000]
 10104f6:	add    BYTE PTR [rax],al
 10104f8:	add    BYTE PTR [rdi-0x58e30000],ah
 10104fe:	add    BYTE PTR [rax],al
 1010500:	enter  0xca,0x0
 1010504:	xor    BYTE PTR [rdi-0x58b10000],ah
 101050a:	add    BYTE PTR [rax],al
 101050c:	ror    dl,1
 101050e:	add    BYTE PTR [rax],al
 1010510:	cmps   DWORD PTR fs:[rsi],DWORD PTR es:[rdi]
 1010512:	add    BYTE PTR [rax],al
 1010514:	scas   al,BYTE PTR es:[rdi]
 1010515:	test   al,0x0
 1010517:	add    ah,dl
 1010519:	retf   0x0
 101051c:	shr    BYTE PTR [rax-0x56f20000],0x0
 1010523:	add    al,ah
 1010525:	retf   0x0
 1010528:	and    BYTE PTR [rcx-0x569f0000],ch
 101052e:	add    BYTE PTR [rax],al
 1010530:	call   0x690105ff
 1010535:	test   eax,0xa9800000
 101053a:	add    BYTE PTR [rax],al
 101053c:	lock retf 0x0
 1010540:	xchg   esp,eax
 1010541:	test   eax,0xaa440000
 1010546:	add    BYTE PTR [rax],al
 1010548:	add    bl,cl
 101054a:	add    BYTE PTR [rax],al
 101054c:	rex.WR stos BYTE PTR es:[rdi],al
 101054e:	add    BYTE PTR [rax],al
 1010550:	movsxd ebp,DWORD PTR [rdx-0x34e00000]
 1010556:	add    BYTE PTR [rax],al
 1010558:	ins    BYTE PTR es:[rdi],dx
 1010559:	stos   BYTE PTR es:[rdi],al
 101055a:	add    BYTE PTR [rax],al
 101055c:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 101055d:	stos   BYTE PTR es:[rdi],al
 101055e:	add    BYTE PTR [rax],al
 1010560:	sub    bl,cl
 1010562:	add    BYTE PTR [rax],al
 1010564:	lods   al,BYTE PTR ds:[rsi]
 1010565:	stos   BYTE PTR es:[rdi],al
 1010566:	add    BYTE PTR [rax],al
 1010568:	in     al,0xaa
 101056a:	add    BYTE PTR [rax],al
 101056c:	xor    al,0xcb
 101056e:	add    BYTE PTR [rax],al
 1010570:	movabs al,ds:0x480000abe10000ab
 1010579:	retf   
 101057a:	add    BYTE PTR [rax],al
 101057c:	sbb    BYTE PTR [rax+rax*1+0xaccb00],ch
 1010583:	add    BYTE PTR [rax-0x35],ch
 1010586:	add    BYTE PTR [rax],al
 1010588:	scas   al,BYTE PTR es:[rdi]
 101058a:	add    BYTE PTR [rax],al
 101058c:	(bad)  
 101058d:	scas   al,BYTE PTR es:[rdi]
 101058e:	add    BYTE PTR [rax],al
 1010590:	je     0x101055d
 1010592:	add    BYTE PTR [rax],al
 1010594:	loopne 0x1010544
 1010596:	add    BYTE PTR [rax],al
 1010598:	adc    ebp,DWORD PTR [rdi-0x34840000]
 101059e:	add    BYTE PTR [rax],al
 10105a0:	xor    BYTE PTR [rdi-0x50900000],ch
 10105a6:	add    BYTE PTR [rax],al
 10105a8:	test   bl,cl
 10105aa:	add    BYTE PTR [rax],al
 10105ac:	sub    BYTE PTR [rdi-0x50230000],0x0
 10105b3:	add    BYTE PTR [rbx+rcx*8-0x50230000],cl
 10105ba:	add    BYTE PTR [rax],al
 10105bc:	sbb    al,0xb0
 10105be:	add    BYTE PTR [rax],al
 10105c0:	cwde   
 10105c1:	retf   
 10105c2:	add    BYTE PTR [rax],al
 10105c4:	sbb    al,0xb0
 10105c6:	add    BYTE PTR [rax],al
 10105c8:	rex.X mov al,0x0
 10105cb:	add    BYTE PTR [rbx+rcx*8-0x4fbe0000],ch
 10105d2:	add    BYTE PTR [rax],al
 10105d4:	(bad)  
 10105d5:	mov    al,0x0
 10105d7:	add    al,al
 10105d9:	retf   
 10105da:	add    BYTE PTR [rax],al
 10105dc:	jo     0x101058e
 10105de:	add    BYTE PTR [rax],al
 10105e0:	mov    dh,0xb0
 10105e2:	add    BYTE PTR [rax],al
 10105e4:	ror    bl,1
 10105e6:	add    BYTE PTR [rax],al
 10105e8:	mov    dh,0xb0
 10105ea:	add    BYTE PTR [rax],al
 10105ec:	cmc    
 10105ed:	mov    al,0x0
 10105ef:	add    ah,bl
 10105f1:	retf   
 10105f2:	add    BYTE PTR [rax],al
 10105f4:	cmc    
 10105f5:	mov    al,0x0
 10105f7:	add    BYTE PTR [rbx],bl
 10105f9:	mov    cl,0x0
 10105fb:	add    al,dh
 10105fd:	retf   
 10105fe:	add    BYTE PTR [rax],al
 1010600:	sbb    esi,DWORD PTR [rcx-0x4ec50000]
 1010606:	add    BYTE PTR [rax],al
 1010608:	add    al,0xcc
 101060a:	add    BYTE PTR [rax],al
 101060c:	push   rax
 101060d:	mov    cl,0x0
 101060f:	add    BYTE PTR [rdi-0x4f],ch
 1010612:	add    BYTE PTR [rax],al
 1010614:	adc    al,0xcc
 1010616:	add    BYTE PTR [rax],al
 1010618:	xor    BYTE PTR [rcx-0x466f0000],0x0
 101061f:	add    BYTE PTR [rsp+rcx*8],bl
 1010622:	add    BYTE PTR [rax],al
 1010624:	mov    al,0xb9
 1010626:	add    BYTE PTR [rax],al
 1010628:	cmp    bh,BYTE PTR [rdx-0x33bc0000]
 101062e:	add    BYTE PTR [rax],al
 1010630:	rex mov edx,0xbb890000
 1010636:	add    BYTE PTR [rax],al
 1010638:	pop    rsp
 1010639:	int3   
 101063a:	add    BYTE PTR [rax],al
 101063c:	nop
 101063d:	mov    ebx,0xbc460000
 1010642:	add    BYTE PTR [rax],al
 1010644:	je     0x1010612
 1010646:	add    BYTE PTR [rax],al
 1010648:	push   rax
 1010649:	mov    esp,0xc00e0000
 101064e:	add    BYTE PTR [rax],al
 1010650:	mov    ah,cl
 1010652:	add    BYTE PTR [rax],al
 1010654:	and    al,al
 1010656:	add    BYTE PTR [rax],al
 1010658:	pop    rdi
 1010659:	rol    BYTE PTR [rax],0x0
 101065c:	lods   al,BYTE PTR ds:[rsi]
 101065d:	int3   
 101065e:	add    BYTE PTR [rax],al
 1010660:	pop    rdi
 1010661:	rol    BYTE PTR [rax],0x0
 1010664:	push   rsp
 1010665:	rol    DWORD PTR [rax],0x0
 1010668:	(bad)  
 1010669:	int3   
 101066a:	add    BYTE PTR [rax],al
 101066c:	push   rsp
 101066d:	rol    DWORD PTR [rax],0x0
 1010670:	outs   dx,DWORD PTR ds:[rsi]
 1010671:	rol    DWORD PTR [rax],0x0
 1010674:	fmul   st,st(4)
 1010676:	add    BYTE PTR [rax],al
 1010678:	add    cl,0x0
 101067b:	add    BYTE PTR [rbp-0x17ffff3f],ah
 1010681:	int3   
 1010682:	add    BYTE PTR [rax],al
 1010684:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1010685:	rol    DWORD PTR [rax],0x0
 1010688:	(bad)  
 1010689:	rol    DWORD PTR [rax],0x0
 101068c:	lock int3 
 101068e:	add    BYTE PTR [rax],al
 1010690:	(bad)  
 1010691:	rol    DWORD PTR [rax],0x0
 1010694:	icebp  
 1010695:	rol    DWORD PTR [rax],0x0
 1010698:	add    al,0xcd
 101069a:	add    BYTE PTR [rax],al
 101069c:	es ret 0x0
 10106a0:	rex.R ret 0x0
 10106a4:	test   dl,cl
 10106a6:	add    BYTE PTR [rax],al
 10106a8:	rex.WX ret 0x0
 10106ac:	gs ret 0x0
 10106b0:	clc    
 10106b1:	retf   0x0
 10106b4:	jo     0x1010678
 10106b6:	add    BYTE PTR [rax],al
 10106b8:	xchg   edx,eax
 10106b9:	ret    0x0
 10106bc:	rex retf 
	...

Disassembly of section .rsrc:

0000000001011000 <.rsrc>:
	...
 1011008:	add    al,0x0
 101100a:	add    BYTE PTR [rax],al
 101100c:	add    BYTE PTR [rax],al
 101100e:	add    eax,DWORD PTR [rax]
 1011010:	(bad)  
 1011011:	add    BYTE PTR [rax],al
 1011013:	add    BYTE PTR [rax],ch
 1011015:	add    BYTE PTR [rax],al
 1011017:	adc    BYTE PTR [rax],0x0
 101101a:	add    BYTE PTR [rax],al
 101101c:	pop    rax
 101101d:	add    BYTE PTR [rax],al
 101101f:	sbb    BYTE PTR [rax],0x0
 1011022:	add    BYTE PTR [rax],al
 1011024:	jo     0x1011026
 1011026:	add    BYTE PTR [rax+0x0],al
 101102c:	add    BYTE PTR [rax],al
 101102e:	add    BYTE PTR [rax],al
 1011030:	add    al,0x0
 1011032:	add    BYTE PTR [rax],al
 1011034:	add    BYTE PTR [rax],al
 1011036:	add    al,0x0
 1011038:	add    DWORD PTR [rax],eax
 101103a:	add    BYTE PTR [rax],al
 101103c:	mov    BYTE PTR [rax],al
 101103e:	add    BYTE PTR [rax+0x2],al
 1011044:	movabs al,ds:0xb800000003800000
 101104d:	add    BYTE PTR [rax],al
 101104f:	add    BYTE PTR [rax+rax*1],0x0
 1011053:	add    al,dl
 1011055:	add    BYTE PTR [rax],al
 1011057:	add    BYTE PTR [rax],0x0
 101105a:	add    BYTE PTR [rax],al
 101105c:	add    BYTE PTR [rax],al
 101105e:	add    BYTE PTR [rax],al
 1011060:	add    al,0x0
 1011062:	add    BYTE PTR [rax],al
 1011064:	add    BYTE PTR [rax],al
 1011066:	add    DWORD PTR [rax],eax
 1011068:	add    DWORD PTR [rax],eax
 101106a:	add    BYTE PTR [rax],al
 101106c:	call   0x1811071
 1011071:	add    BYTE PTR [rax],al
 1011073:	add    BYTE PTR [rax],al
 1011075:	add    BYTE PTR [rax],al
 1011077:	add    BYTE PTR [rax+rax*1],al
 101107a:	add    BYTE PTR [rax],al
 101107c:	add    BYTE PTR [rax],al
 101107e:	add    DWORD PTR [rax],eax
 1011080:	add    DWORD PTR [rax],eax
 1011082:	add    BYTE PTR [rax],al
 1011084:	add    BYTE PTR [rcx],al
 1011086:	add    BYTE PTR [rax+0x0],al
 101108c:	add    BYTE PTR [rax],al
 101108e:	add    BYTE PTR [rax],al
 1011090:	add    al,0x0
 1011092:	add    BYTE PTR [rax],al
 1011094:	add    BYTE PTR [rax],al
 1011096:	add    DWORD PTR [rax],eax
 1011098:	or     DWORD PTR [rax+rax*1],eax
 101109b:	add    BYTE PTR [rax],bl
 101109d:	add    DWORD PTR [rax],eax
	...
 10110a7:	add    BYTE PTR [rax+rax*1],al
 10110aa:	add    BYTE PTR [rax],al
 10110ac:	add    BYTE PTR [rax],al
 10110ae:	add    DWORD PTR [rax],eax
 10110b0:	or     DWORD PTR [rax+rax*1],eax
 10110b3:	add    BYTE PTR [rax],ch
 10110b5:	add    DWORD PTR [rax],eax
	...
 10110bf:	add    BYTE PTR [rax+rax*1],al
 10110c2:	add    BYTE PTR [rax],al
 10110c4:	add    BYTE PTR [rax],al
 10110c6:	add    DWORD PTR [rax],eax
 10110c8:	or     DWORD PTR [rax+rax*1],eax
 10110cb:	add    BYTE PTR [rax],bh
 10110cd:	add    DWORD PTR [rax],eax
	...
 10110d7:	add    BYTE PTR [rax+rax*1],al
 10110da:	add    BYTE PTR [rax],al
 10110dc:	add    BYTE PTR [rax],al
 10110de:	add    DWORD PTR [rax],eax
 10110e0:	or     DWORD PTR [rax+rax*1],eax
 10110e3:	add    BYTE PTR [rax+0x1],cl
	...
 10110ee:	add    BYTE PTR [rax],al
 10110f0:	add    al,0x0
 10110f2:	add    BYTE PTR [rax],al
 10110f4:	add    BYTE PTR [rax],al
 10110f6:	add    DWORD PTR [rax],eax
 10110f8:	or     DWORD PTR [rax+rax*1],eax
 10110fb:	add    BYTE PTR [rax+0x1],bl
	...
 1011106:	add    BYTE PTR [rax],al
 1011108:	add    al,0x0
 101110a:	add    BYTE PTR [rax],al
 101110c:	add    BYTE PTR [rax],al
 101110e:	add    DWORD PTR [rax],eax
 1011110:	or     DWORD PTR [rax+rax*1],eax
 1011113:	add    BYTE PTR [rax+0x1],ch
 1011116:	add    BYTE PTR [rax],al
 1011118:	js     0x101112b
 101111a:	add    DWORD PTR [rax],eax
 101111c:	(bad)  
 101111d:	add    eax,DWORD PTR [rax]
 101111f:	add    ah,ah
 1011121:	add    al,0x0
 1011123:	add    BYTE PTR [rax],al
 1011125:	add    BYTE PTR [rax],al
 1011127:	add    BYTE PTR [rax+0x15],cl
 101112a:	add    DWORD PTR [rax],eax
 101112c:	sbb    al,BYTE PTR [rsi]
 101112e:	add    BYTE PTR [rax],al
 1011130:	in     al,0x4
 1011132:	add    BYTE PTR [rax],al
 1011134:	add    BYTE PTR [rax],al
 1011136:	add    BYTE PTR [rax],al
 1011138:	sbb    eax,DWORD PTR fs:[rcx]
 101113b:	add    al,bh
 101113d:	add    eax,0x4e40000
 1011142:	add    BYTE PTR [rax],al
 1011144:	add    BYTE PTR [rax],al
 1011146:	add    BYTE PTR [rax],al
 1011148:	pop    rsp
 1011149:	and    DWORD PTR [rcx],eax
 101114b:	add    dh,bh
 101114d:	add    eax,0x4e40000
 1011152:	add    BYTE PTR [rax],al
 1011154:	add    BYTE PTR [rax],al
 1011156:	add    BYTE PTR [rax],al
 1011158:	pop    rsp
 1011159:	(bad)  
 101115a:	add    DWORD PTR [rax],eax
 101115c:	mov    BYTE PTR [rax+rax*1],al
 101115f:	add    ah,ah
 1011161:	add    al,0x0
 1011163:	add    BYTE PTR [rax],al
 1011165:	add    BYTE PTR [rax],al
 1011167:	add    ah,ah
 1011169:	sub    eax,DWORD PTR [rcx]
 101116b:	add    BYTE PTR [rdx+0x1],bl
 101116e:	add    BYTE PTR [rax],al
 1011170:	in     al,0x4
	...
 101117a:	sbb    al,0x0
 101117c:	rex.XB add BYTE PTR [r9+0x0],spl
 1011180:	outs   dx,BYTE PTR ds:[rsi]
 1011181:	add    BYTE PTR [rsi+0x0],ch
 1011184:	outs   dx,DWORD PTR ds:[rsi]
 1011185:	add    BYTE PTR [rax+rax*1+0x20],dh
 1011189:	add    BYTE PTR [rdi+0x0],ch
 101118c:	jo     0x101118e
 101118e:	add    BYTE PTR gs:[rsi+0x0],ch
 1011192:	and    BYTE PTR [rax],al
 1011194:	outs   dx,DWORD PTR ds:[rsi]
 1011195:	add    BYTE PTR [rbp+0x0],dh
 1011198:	je     0x101119a
 101119a:	jo     0x101119c
 101119c:	jne    0x101119e
 101119e:	je     0x10111a0
 10111a0:	and    BYTE PTR [rax],al
 10111a2:	data16 add BYTE PTR [rcx+0x0],ch
 10111a6:	ins    BYTE PTR es:[rdi],dx
 10111a7:	add    BYTE PTR [rbp+0x0],ah
 10111aa:	and    BYTE PTR [rax],al
 10111ac:	sub    eax,0x25002000
 10111b1:	add    BYTE PTR [rbx+0x0],dh
 10111b4:	sbb    DWORD PTR [rax],eax
 10111b6:	rex.WRX add BYTE PTR [rdi+0x0],r13b
 10111ba:	and    BYTE PTR [rax],al
 10111bc:	jae    0x10111be
 10111be:	jne    0x10111c0
 10111c0:	movsxd eax,DWORD PTR [rax]
 10111c2:	push   0x66002000
 10111c7:	add    BYTE PTR [rcx+0x0],ch
 10111ca:	ins    BYTE PTR es:[rdi],dx
 10111cb:	add    BYTE PTR [rbp+0x0],ah
 10111ce:	and    BYTE PTR [rax],al
 10111d0:	outs   dx,DWORD PTR ds:[rsi]
 10111d1:	add    BYTE PTR [rdx+0x0],dh
 10111d4:	and    BYTE PTR [rax],al
 10111d6:	add    BYTE PTR fs:[rcx+0x0],ch
 10111da:	jb     0x10111dc
 10111dc:	add    BYTE PTR gs:[rbx+0x0],ah
 10111e0:	je     0x10111e2
 10111e2:	outs   dx,DWORD PTR ds:[rsi]
 10111e3:	add    BYTE PTR [rdx+0x0],dh
 10111e6:	jns    0x10111e8
 10111e8:	sub    eax,DWORD PTR [rax]
 10111ea:	add    BYTE PTR [r10+0x0],r14b
 10111ee:	jb     0x10111f0
 10111f0:	outs   dx,DWORD PTR ds:[rsi]
 10111f1:	add    BYTE PTR [rdx+0x0],dh
 10111f4:	and    BYTE PTR [rax],al
 10111f6:	imul   eax,DWORD PTR [rax],0x20006e
 10111fc:	jae    0x10111fe
 10111fe:	imul   eax,DWORD PTR [rax],0x6e0067
 1011204:	(bad)  
 1011205:	add    BYTE PTR [rax+rax*1+0x20],ch
 1011209:	add    BYTE PTR [rax+0x0],ch
 101120c:	(bad)  
 101120d:	add    BYTE PTR [rsi+0x0],ch
 1011210:	add    BYTE PTR fs:[rax+rax*1+0x69],ch
 1011215:	add    BYTE PTR [rsi+0x0],ch
 1011218:	add    BYTE PTR [eax],ah
 101121b:	add    BYTE PTR [rbx+0x0],dh
 101121e:	je     0x1011220
 1011220:	(bad)  
 1011221:	add    BYTE PTR [rdx+0x0],dh
 1011224:	je     0x1011226
 1011226:	jne    0x1011228
 1011228:	jo     0x101122a
 101122a:	sub    al,0x0
 101122c:	and    BYTE PTR [rax],al
 101122e:	(bad)  
 101122f:	add    BYTE PTR [rdx+0x0],ah
 1011232:	outs   dx,DWORD PTR ds:[rsi]
 1011233:	add    BYTE PTR [rdx+0x0],dh
 1011236:	je     0x1011238
 1011238:	imul   eax,DWORD PTR [rax],0x67006e
 101123e:	and    DWORD PTR [rax],eax
 1011240:	xor    BYTE PTR [rax],al
 1011242:	add    BYTE PTR [r10+0x0],r14b
 1011246:	jb     0x1011248
 1011248:	outs   dx,DWORD PTR ds:[rsi]
 1011249:	add    BYTE PTR [rdx+0x0],dh
 101124c:	cmp    al,BYTE PTR [rax]
 101124e:	and    BYTE PTR [rax],al
 1011250:	movsxd eax,DWORD PTR [rax]
 1011252:	(bad)  
 1011253:	add    BYTE PTR [rsi+0x0],ch
 1011256:	outs   dx,BYTE PTR ds:[rsi]
 1011257:	add    BYTE PTR [rdi+0x0],ch
 101125a:	je     0x101125c
 101125c:	and    BYTE PTR [rax],al
 101125e:	(bad)  
 101125f:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1011263:	add    BYTE PTR [rdi+0x0],ch
 1011266:	movsxd eax,DWORD PTR [rax]
 1011268:	(bad)  
 1011269:	add    BYTE PTR [rax+rax*1+0x65],dh
 101126d:	add    BYTE PTR [rax],ah
 101126f:	add    BYTE PTR [rbp+0x0],ch
 1011272:	add    BYTE PTR gs:[rbp+0x0],ch
 1011276:	outs   dx,DWORD PTR ds:[rsi]
 1011277:	add    BYTE PTR [rdx+0x0],dh
 101127a:	jns    0x101127c
 101127c:	and    BYTE PTR [rax],al
 101127e:	data16 add BYTE PTR [rdi+0x0],ch
 1011282:	jb     0x1011284
 1011284:	and    BYTE PTR [rax],al
 1011286:	movsxd eax,DWORD PTR [rax]
 1011288:	outs   dx,DWORD PTR ds:[rsi]
 1011289:	add    BYTE PTR [rbp+0x0],ch
 101128c:	ins    DWORD PTR es:[rdi],dx
 101128d:	add    BYTE PTR [rcx+0x0],ah
 1011290:	outs   dx,BYTE PTR ds:[rsi]
 1011291:	add    BYTE PTR [rax+rax*1+0x20],ah
 1011295:	add    BYTE PTR [rdx+0x0],ah
 1011298:	jne    0x101129a
 101129a:	data16 add BYTE PTR [rsi+0x0],ah
 101129e:	add    BYTE PTR gs:[rdx+0x0],dh
 10112a2:	sbb    eax,DWORD PTR [rax]
 10112a4:	rex.XB add BYTE PTR [r9+0x0],spl
 10112a8:	outs   dx,BYTE PTR ds:[rsi]
 10112a9:	add    BYTE PTR [rsi+0x0],ch
 10112ac:	outs   dx,DWORD PTR ds:[rsi]
 10112ad:	add    BYTE PTR [rax+rax*1+0x20],dh
 10112b1:	add    BYTE PTR [rdi+0x0],ch
 10112b4:	jo     0x10112b6
 10112b6:	add    BYTE PTR gs:[rsi+0x0],ch
 10112ba:	and    BYTE PTR [rax],al
 10112bc:	imul   eax,DWORD PTR [rax],0x70006e
 10112c2:	jne    0x10112c4
 10112c4:	je     0x10112c6
 10112c6:	and    BYTE PTR [rax],al
 10112c8:	data16 add BYTE PTR [rcx+0x0],ch
 10112cc:	ins    BYTE PTR es:[rdi],dx
 10112cd:	add    BYTE PTR [rbp+0x0],ah
 10112d0:	and    BYTE PTR [rax],al
 10112d2:	sub    eax,0x25002000
 10112d7:	add    BYTE PTR [rbx+0x0],dh
 10112da:	sbb    DWORD PTR [rax],eax
 10112dc:	rex.WRX add BYTE PTR [rdi+0x0],r13b
 10112e0:	and    BYTE PTR [rax],al
 10112e2:	jae    0x10112e4
 10112e4:	jne    0x10112e6
 10112e6:	movsxd eax,DWORD PTR [rax]
 10112e8:	push   0x66002000
 10112ed:	add    BYTE PTR [rcx+0x0],ch
 10112f0:	ins    BYTE PTR es:[rdi],dx
 10112f1:	add    BYTE PTR [rbp+0x0],ah
 10112f4:	and    BYTE PTR [rax],al
 10112f6:	outs   dx,DWORD PTR ds:[rsi]
 10112f7:	add    BYTE PTR [rdx+0x0],dh
 10112fa:	and    BYTE PTR [rax],al
 10112fc:	add    BYTE PTR fs:[rcx+0x0],ch
 1011300:	jb     0x1011302
 1011302:	add    BYTE PTR gs:[rbx+0x0],ah
 1011306:	je     0x1011308
 1011308:	outs   dx,DWORD PTR ds:[rsi]
 1011309:	add    BYTE PTR [rdx+0x0],dh
 101130c:	jns    0x101130e
 101130e:	(bad)  
 101130f:	add    BYTE PTR [rbx+0x0],dl
 1011312:	push   rcx
 1011313:	add    BYTE PTR [rax+rax*1+0x20],cl
 1011317:	add    BYTE PTR [rbx+0x0],dl
 101131a:	add    BYTE PTR gs:[rdx+0x0],dh
 101131e:	jbe    0x1011320
 1011320:	add    BYTE PTR gs:[rdx+0x0],dh
 1011324:	and    BYTE PTR [rax],al
 1011326:	movsxd eax,DWORD PTR [rax]
 1011328:	outs   dx,DWORD PTR ds:[rsi]
 1011329:	add    BYTE PTR [rsi+0x0],ch
 101132c:	outs   dx,BYTE PTR ds:[rsi]
 101132d:	add    BYTE PTR [rbp+0x0],ah
 1011330:	movsxd eax,DWORD PTR [rax]
 1011332:	je     0x1011334
 1011334:	imul   eax,DWORD PTR [rax],0x6e006f
 101133a:	and    BYTE PTR [rax],al
 101133c:	je     0x101133e
 101133e:	imul   eax,DWORD PTR [rax],0x65006d
 1011344:	add    BYTE PTR fs:[rax],ah
 1011347:	add    BYTE PTR [rdi+0x0],ch
 101134a:	jne    0x101134c
 101134c:	je     0x101134e
 101134e:	adc    DWORD PTR [rax],eax
 1011350:	sub    BYTE PTR [rax],al
 1011352:	xor    BYTE PTR [rax],al
 1011354:	and    BYTE PTR [rax],al
 1011356:	jb     0x1011358
 1011358:	outs   dx,DWORD PTR ds:[rsi]
 1011359:	add    BYTE PTR [rdi+0x0],dh
 101135c:	jae    0x101135e
 101135e:	and    BYTE PTR [rax],al
 1011360:	(bad)  
 1011361:	add    BYTE PTR [rsi+0x0],ah
 1011364:	data16 add BYTE PTR [rbp+0x0],ah
 1011368:	movsxd eax,DWORD PTR [rax]
 101136a:	je     0x101136c
 101136c:	add    BYTE PTR gs:[rax+rax*1+0x29],ah
 1011371:	add    BYTE PTR [rax],dl
 1011373:	add    BYTE PTR [rax],ch
 1011375:	add    BYTE PTR [rcx],dh
 1011377:	add    BYTE PTR [rax],ah
 1011379:	add    BYTE PTR [rdx+0x0],dh
 101137c:	outs   dx,DWORD PTR ds:[rsi]
 101137d:	add    BYTE PTR [rdi+0x0],dh
 1011380:	and    BYTE PTR [rax],al
 1011382:	(bad)  
 1011383:	add    BYTE PTR [rsi+0x0],ah
 1011386:	data16 add BYTE PTR [rbp+0x0],ah
 101138a:	movsxd eax,DWORD PTR [rax]
 101138c:	je     0x101138e
 101138e:	add    BYTE PTR gs:[rax+rax*1+0x29],ah
 1011393:	add    BYTE PTR [rbx],dl
 1011395:	add    BYTE PTR [rax],ch
 1011397:	add    BYTE PTR [rip+0x64006c00],ah        # 0x65017f9d
 101139d:	add    BYTE PTR [rax],ah
 101139f:	add    BYTE PTR [rdx+0x0],dh
 10113a2:	outs   dx,DWORD PTR ds:[rsi]
 10113a3:	add    BYTE PTR [rdi+0x0],dh
 10113a6:	jae    0x10113a8
 10113a8:	and    BYTE PTR [rax],al
 10113aa:	(bad)  
 10113ab:	add    BYTE PTR [rsi+0x0],ah
 10113ae:	data16 add BYTE PTR [rbp+0x0],ah
 10113b2:	movsxd eax,DWORD PTR [rax]
 10113b4:	je     0x10113b6
 10113b6:	add    BYTE PTR gs:[rax+rax*1+0x29],ah
 10113bb:	add    BYTE PTR [rcx],cl
 10113bd:	add    BYTE PTR [rip+0x20006400],ah        # 0x210177c3
 10113c3:	add    BYTE PTR [rax+0x0],bh
 10113c6:	(bad)  
 10113c7:	add    BYTE PTR [rbx+0x0],ah
 10113ca:	je     0x10113cc
 10113cc:	jae    0x10113ce
 10113ce:	cmp    al,BYTE PTR [rax]
 10113d0:	sbb    al,0x0
 10113d2:	rex.WRB add BYTE PTR [r11+0x0],r14b
 10113d6:	add    BYTE PTR [eax],ah
 10113d9:	add    BYTE PTR [rip+0x64006c00],ah        # 0x65017fdf
 10113df:	add    BYTE PTR [rax+rax*1],ch
 10113e2:	and    BYTE PTR [rax],al
 10113e4:	rex.WR add BYTE PTR [rbp+0x0],r12b
 10113e8:	jbe    0x10113ea
 10113ea:	add    BYTE PTR gs:[rax+rax*1+0x20],ch
 10113ef:	add    BYTE PTR [rip+0x2c006400],ah        # 0x2d0177f5
 10113f5:	add    BYTE PTR [rax],ah
 10113f7:	add    BYTE PTR [rbx+0x0],dl
 10113fa:	je     0x10113fc
 10113fc:	(bad)  
 10113fd:	add    BYTE PTR [rax+rax*1+0x65],dh
 1011401:	add    BYTE PTR [rax],ah
 1011403:	add    BYTE PTR [rip+0x3a006400],ah        # 0x3b017809
 1011409:	add    BYTE PTR [rdi],dl
 101140b:	add    BYTE PTR [rdi+0x0],ch
 101140e:	jae    0x1011410
 1011410:	jno    0x1011412
 1011412:	ins    BYTE PTR es:[rdi],dx
 1011413:	add    BYTE PTR [rdx],bh
 1011415:	add    BYTE PTR [rax],ah
 1011417:	add    BYTE PTR [rbp+0x0],dh
 101141a:	outs   dx,BYTE PTR ds:[rsi]
 101141b:	add    BYTE PTR [rbx+0x0],ch
 101141e:	outs   dx,BYTE PTR ds:[rsi]
 101141f:	add    BYTE PTR [rdi+0x0],ch
 1011422:	ja     0x1011424
 1011424:	outs   dx,BYTE PTR ds:[rsi]
 1011425:	add    BYTE PTR [rax],ah
 1011427:	add    BYTE PTR [rdi+0x0],ch
 101142a:	jo     0x101142c
 101142c:	je     0x101142e
 101142e:	imul   eax,DWORD PTR [rax],0x6e006f
 1011434:	and    BYTE PTR [rax],al
 1011436:	and    eax,0x3d007300
 101143b:	add    BYTE PTR [rbp+0x0],dh
 101143e:	jae    0x1011440
 1011440:	(bad)  
 1011441:	add    BYTE PTR [rdi+0x0],ah
 1011444:	add    BYTE PTR gs:[rdx],bh
 1011447:	add    BYTE PTR [rax],ah
 1011449:	add    BYTE PTR [rdi+0x0],ch
 101144c:	jae    0x101144e
 101144e:	jno    0x1011450
 1011450:	ins    BYTE PTR es:[rdi],dx
 1011451:	add    BYTE PTR [rax],ah
 1011453:	add    BYTE PTR [rax],ah
 1011455:	add    BYTE PTR [rax],ah
 1011457:	add    BYTE PTR [rax],ah
 1011459:	add    BYTE PTR [rax],ah
 101145b:	add    BYTE PTR [rax],ah
 101145d:	add    BYTE PTR [rax],ah
 101145f:	add    BYTE PTR [rax],ah
 1011461:	add    BYTE PTR [rax],ah
 1011463:	add    BYTE PTR [rax],ah
 1011465:	add    BYTE PTR [rax],ah
 1011467:	add    BYTE PTR [rax],ah
 1011469:	add    BYTE PTR [rax],ah
 101146b:	add    BYTE PTR [rax],ah
 101146d:	add    BYTE PTR [rbx+0x0],bl
 1011470:	sub    eax,0x20005500
 1011475:	add    BYTE PTR [rax+rax*1+0x6f],ch
 1011479:	add    BYTE PTR [rdi+0x0],ah
 101147c:	imul   eax,DWORD PTR [rax],0x20006e
 1011482:	imul   eax,DWORD PTR [rax],0x5d0064
 1011488:	and    BYTE PTR [rax],al
 101148a:	and    BYTE PTR [rax],al
 101148c:	and    BYTE PTR [rax],al
 101148e:	and    BYTE PTR [rax],al
 1011490:	and    BYTE PTR [rax],al
 1011492:	and    BYTE PTR [rax],al
 1011494:	and    BYTE PTR [rax],al
 1011496:	and    BYTE PTR [rax],al
 1011498:	and    BYTE PTR [rax],al
 101149a:	and    BYTE PTR [rax],al
 101149c:	pop    rbx
 101149d:	add    BYTE PTR [rip+0x20005000],ch        # 0x210164a3
 10114a3:	add    BYTE PTR [rax+0x0],dh
 10114a6:	(bad)  
 10114a7:	add    BYTE PTR [rbx+0x0],dh
 10114aa:	jae    0x10114ac
 10114ac:	ja     0x10114ae
 10114ae:	outs   dx,DWORD PTR ds:[rsi]
 10114af:	add    BYTE PTR [rdx+0x0],dh
 10114b2:	add    BYTE PTR fs:[rbp+0x0],bl
 10114b6:	rex.RXB add BYTE PTR [r8],r12b
 10114b9:	add    BYTE PTR [rax],ah
 10114bb:	add    BYTE PTR [rbx+0x0],bl
 10114be:	sub    eax,0x20005300
 10114c3:	add    BYTE PTR [rbx+0x0],dh
 10114c6:	add    BYTE PTR gs:[rdx+0x0],dh
 10114ca:	jbe    0x10114cc
 10114cc:	add    BYTE PTR gs:[rdx+0x0],dh
 10114d0:	pop    rbp
 10114d1:	add    BYTE PTR [rax],ah
 10114d3:	add    BYTE PTR [rax],ah
 10114d5:	add    BYTE PTR [rax],ah
 10114d7:	add    BYTE PTR [rax],ah
 10114d9:	add    BYTE PTR [rax],ah
 10114db:	add    BYTE PTR [rax],ah
 10114dd:	add    BYTE PTR [rax],ah
 10114df:	add    BYTE PTR [rax],ah
 10114e1:	add    BYTE PTR [rax],ah
 10114e3:	add    BYTE PTR [rax],ah
 10114e5:	add    BYTE PTR [rax],ah
 10114e7:	add    BYTE PTR [rax],ah
 10114e9:	add    BYTE PTR [rbx+0x0],bl
 10114ec:	sub    eax,0x20004800
 10114f1:	add    BYTE PTR [rax+0x0],ch
 10114f4:	outs   dx,DWORD PTR ds:[rsi]
 10114f5:	add    BYTE PTR [rbx+0x0],dh
 10114f8:	je     0x10114fa
 10114fa:	outs   dx,BYTE PTR ds:[rsi]
 10114fb:	add    BYTE PTR [rcx+0x0],ah
 10114fe:	ins    DWORD PTR es:[rdi],dx
 10114ff:	add    BYTE PTR [rbp+0x0],ah
 1011502:	pop    rbp
 1011503:	add    BYTE PTR [rax],ah
 1011505:	add    BYTE PTR [rax],ah
 1011507:	add    BYTE PTR [rax],ah
 1011509:	add    BYTE PTR [rax],ah
 101150b:	add    BYTE PTR [rax],ah
 101150d:	add    BYTE PTR [rax],ah
 101150f:	add    BYTE PTR [rax],ah
 1011511:	add    BYTE PTR [rax],ah
 1011513:	add    BYTE PTR [rax],ah
 1011515:	add    BYTE PTR [rax],ah
 1011517:	add    BYTE PTR [rbx+0x0],bl
 101151a:	sub    eax,0x20004500
 101151f:	add    BYTE PTR [rax+rax*1+0x72],dh
 1011523:	add    BYTE PTR [rbp+0x0],dh
 1011526:	jae    0x1011528
 1011528:	je     0x101152a
 101152a:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 101152f:	add    BYTE PTR [rbx+0x0],ah
 1011532:	outs   dx,DWORD PTR ds:[rsi]
 1011533:	add    BYTE PTR [rsi+0x0],ch
 1011536:	outs   dx,BYTE PTR ds:[rsi]
 1011537:	add    BYTE PTR [rbp+0x0],ah
 101153a:	movsxd eax,DWORD PTR [rax]
 101153c:	je     0x101153e
 101153e:	imul   eax,DWORD PTR [rax],0x6e006f
 1011544:	pop    rbp
 1011545:	add    BYTE PTR [rax+0x41],dl
 1011548:	rex.X add BYTE PTR [rax],spl
 101154b:	add    BYTE PTR [rax],ah
 101154d:	add    BYTE PTR [rbx+0x0],bl
 1011550:	sub    eax,0x20006400
 1011555:	add    BYTE PTR [rbp+0x0],dh
 1011558:	jae    0x101155a
 101155a:	add    BYTE PTR gs:[rax],ah
 101155d:	add    BYTE PTR [rax+rax*1+0x61],ah
 1011561:	add    BYTE PTR [rax+rax*1+0x61],dh
 1011565:	add    BYTE PTR [rdx+0x0],ah
 1011568:	(bad)  
 1011569:	add    BYTE PTR [rbx+0x0],dh
 101156c:	add    BYTE PTR gs:[rax],ah
 101156f:	add    BYTE PTR [rsi+0x0],ch
 1011572:	(bad)  
 1011573:	add    BYTE PTR [rbp+0x0],ch
 1011576:	add    BYTE PTR gs:[rbp+0x0],bl
 101157a:	and    BYTE PTR [rax],al
 101157c:	pop    rbx
 101157d:	add    BYTE PTR [rip+0x20006c00],ch        # 0x21018183
 1011583:	add    BYTE PTR [rax+rax*1+0x6f],ch
 1011587:	add    BYTE PTR [rdi+0x0],ah
 101158a:	imul   eax,DWORD PTR [rax],0x20006e
 1011590:	je     0x1011592
 1011592:	imul   eax,DWORD PTR [rax],0x65006d
 1011598:	outs   dx,DWORD PTR ds:[rsi]
 1011599:	add    BYTE PTR [rbp+0x0],dh
 101159c:	je     0x101159e
 101159e:	pop    rbp
 101159f:	add    BYTE PTR [rax],ah
 10115a1:	add    BYTE PTR [rax],ah
 10115a3:	add    BYTE PTR [rax],ah
 10115a5:	add    BYTE PTR [rax],ah
 10115a7:	add    BYTE PTR [rax],ah
 10115a9:	add    BYTE PTR [rbx+0x0],bl
 10115ac:	sub    eax,0x20007400
 10115b1:	add    BYTE PTR [rcx+0x0],dh
 10115b4:	jne    0x10115b6
 10115b6:	add    BYTE PTR gs:[rdx+0x0],dh
 10115ba:	jns    0x10115bc
 10115bc:	and    BYTE PTR [rax],al
 10115be:	je     0x10115c0
 10115c0:	imul   eax,DWORD PTR [rax],0x65006d
 10115c6:	outs   dx,DWORD PTR ds:[rsi]
 10115c7:	add    BYTE PTR [rbp+0x0],dh
 10115ca:	je     0x10115cc
 10115cc:	pop    rbp
 10115cd:	add    BYTE PTR [rax+0x0],al
 10115d0:	and    BYTE PTR [rax],al
 10115d2:	and    BYTE PTR [rax],al
 10115d4:	pop    rbx
 10115d5:	add    BYTE PTR [rip+0x20006800],ch        # 0x21017ddb
 10115db:	add    BYTE PTR [rax+0x0],ch
 10115de:	add    BYTE PTR gs:[rcx+0x0],ah
 10115e2:	add    BYTE PTR fs:[rbp+0x0],ah
 10115e6:	jb     0x10115e8
 10115e8:	jae    0x10115ea
 10115ea:	pop    rbp
 10115eb:	add    BYTE PTR [rax],ah
 10115ed:	add    BYTE PTR [rax],ah
 10115ef:	add    BYTE PTR [rax],ah
 10115f1:	add    BYTE PTR [rax],ah
 10115f3:	add    BYTE PTR [rax],ah
 10115f5:	add    BYTE PTR [rax],ah
 10115f7:	add    BYTE PTR [rax],ah
 10115f9:	add    BYTE PTR [rax],ah
 10115fb:	add    BYTE PTR [rax],ah
 10115fd:	add    BYTE PTR [rax],ah
 10115ff:	add    BYTE PTR [rax],ah
 1011601:	add    BYTE PTR [rbx+0x0],bl
 1011604:	sub    eax,0x20007300
 1011609:	add    BYTE PTR [rbx+0x0],ah
 101160c:	outs   dx,DWORD PTR ds:[rsi]
 101160d:	add    BYTE PTR [rax+rax*1+0x73],ch
 1011611:	add    BYTE PTR [rbp+0x0],ah
 1011614:	jo     0x1011616
 1011616:	(bad)  
 1011617:	add    BYTE PTR [rdx+0x0],dh
 101161a:	(bad)  
 101161b:	add    BYTE PTR [rax+rax*1+0x6f],dh
 101161f:	add    BYTE PTR [rdx+0x0],dh
 1011622:	pop    rbp
 1011623:	add    BYTE PTR [rax],ah
 1011625:	add    BYTE PTR [rax],ah
 1011627:	add    BYTE PTR [rax],ah
 1011629:	add    BYTE PTR [rax],ah
 101162b:	add    BYTE PTR [rax],ah
 101162d:	add    BYTE PTR [rax],ah
 101162f:	add    BYTE PTR [rbx+0x0],bl
 1011632:	sub    eax,0x20007700
 1011637:	add    BYTE PTR [rbx+0x0],ah
 101163a:	outs   dx,DWORD PTR ds:[rsi]
 101163b:	add    BYTE PTR [rax+rax*1+0x75],ch
 101163f:	add    BYTE PTR [rbp+0x0],ch
 1011642:	outs   dx,BYTE PTR ds:[rsi]
 1011643:	add    BYTE PTR [rdi+0x0],dh
 1011646:	imul   eax,DWORD PTR [rax],0x740064
 101164c:	push   0x4e005d00
 1011651:	add    BYTE PTR [rax],ah
 1011653:	add    BYTE PTR [rax],ah
 1011655:	add    BYTE PTR [rbx+0x0],bl
 1011658:	sub    eax,0x20006100
 101165d:	add    BYTE PTR [rax+0x0],dh
 1011660:	(bad)  
 1011661:	add    BYTE PTR [rbx+0x0],ah
 1011664:	imul   eax,DWORD PTR [rax],0x65
 1011667:	add    BYTE PTR [rax+rax*1+0x73],dh
 101166b:	add    BYTE PTR [rcx+0x0],ch
 101166e:	jp     0x1011670
 1011670:	add    BYTE PTR gs:[rbp+0x0],bl
 1011674:	and    BYTE PTR [rax],al
 1011676:	and    BYTE PTR [rax],al
 1011678:	and    BYTE PTR [rax],al
 101167a:	and    BYTE PTR [rax],al
 101167c:	and    BYTE PTR [rax],al
 101167e:	and    BYTE PTR [rax],al
 1011680:	and    BYTE PTR [rax],al
 1011682:	and    BYTE PTR [rax],al
 1011684:	pop    rbx
 1011685:	add    BYTE PTR [rip+0x20006500],ch        # 0x21017b8b
 101168b:	add    BYTE PTR [rbp+0x0],ah
 101168e:	movsxd eax,DWORD PTR [rax]
 1011690:	push   0x20006f00
 1011695:	add    BYTE PTR [rcx+0x0],ch
 1011698:	outs   dx,BYTE PTR ds:[rsi]
 1011699:	add    BYTE PTR [rax+0x0],dh
 101169c:	jne    0x101169e
 101169e:	je     0x10116a0
 10116a0:	pop    rbp
 10116a1:	add    BYTE PTR [rax],ah
 10116a3:	add    BYTE PTR [rax],ah
 10116a5:	add    BYTE PTR [rax],ah
 10116a7:	add    BYTE PTR [rax],ah
 10116a9:	add    BYTE PTR [rax],ah
 10116ab:	add    BYTE PTR [rax],ah
 10116ad:	add    BYTE PTR [rax],ah
 10116af:	add    BYTE PTR [rax],ah
 10116b1:	add    BYTE PTR [rbx+0x0],bl
 10116b4:	sub    eax,0x20004900
 10116b9:	add    BYTE PTR [rbp+0x0],al
 10116bc:	outs   dx,BYTE PTR ds:[rsi]
 10116bd:	add    BYTE PTR [rcx+0x0],ah
 10116c0:	(bad)  
 10116c1:	add    BYTE PTR [rax+rax*1+0x65],ch
 10116c5:	add    BYTE PTR [rax],ah
 10116c7:	add    BYTE PTR [rcx+0x0],dl
 10116ca:	jne    0x10116cc
 10116cc:	outs   dx,DWORD PTR ds:[rsi]
 10116cd:	add    BYTE PTR [rax+rax*1+0x65],dh
 10116d1:	add    BYTE PTR [rax+rax*1+0x20],ah
 10116d5:	add    BYTE PTR [rcx+0x0],cl
 10116d8:	add    BYTE PTR fs:[rbp+0x0],ah
 10116dc:	outs   dx,BYTE PTR ds:[rsi]
 10116dd:	add    BYTE PTR [rax+rax*1+0x69],dh
 10116e1:	add    BYTE PTR [rsi+0x0],ah
 10116e4:	imul   eax,DWORD PTR [rax],0x720065
 10116ea:	jae    0x10116ec
 10116ec:	pop    rbp
 10116ed:	add    BYTE PTR [rdx+0x0],al
 10116f0:	and    BYTE PTR [rax],al
 10116f2:	and    BYTE PTR [rax],al
 10116f4:	pop    rbx
 10116f5:	add    BYTE PTR [rip+0x20004c00],ch        # 0x210162fb
 10116fb:	add    BYTE PTR [rax+rax*1+0x69],ch
 10116ff:	add    BYTE PTR [rbx+0x0],dh
 1011702:	je     0x1011704
 1011704:	and    BYTE PTR [rax],al
 1011706:	jae    0x1011708
 1011708:	add    BYTE PTR gs:[rdx+0x0],dh
 101170c:	jbe    0x101170e
 101170e:	add    BYTE PTR gs:[rdx+0x0],dh
 1011712:	jae    0x1011714
 1011714:	pop    rbp
 1011715:	add    BYTE PTR [rax],ah
 1011717:	add    BYTE PTR [rax],ah
 1011719:	add    BYTE PTR [rax],ah
 101171b:	add    BYTE PTR [rax],ah
 101171d:	add    BYTE PTR [rax],ah
 101171f:	add    BYTE PTR [rax],ah
 1011721:	add    BYTE PTR [rbx+0x0],bl
 1011724:	sub    eax,0x20006300
 1011729:	add    BYTE PTR [rbx+0x0],ah
 101172c:	ins    DWORD PTR es:[rdi],dx
 101172d:	add    BYTE PTR [rax+rax*1+0x65],ah
 1011731:	add    BYTE PTR [rsi+0x0],ch
 1011734:	add    BYTE PTR fs:[rbp+0x0],bl
 1011738:	and    BYTE PTR [rax],al
 101173a:	and    BYTE PTR [rax],al
 101173c:	and    BYTE PTR [rax],al
 101173e:	and    BYTE PTR [rax],al
 1011740:	and    BYTE PTR [rax],al
 1011742:	and    BYTE PTR [rax],al
 1011744:	and    BYTE PTR [rax],al
 1011746:	and    BYTE PTR [rax],al
 1011748:	and    BYTE PTR [rax],al
 101174a:	and    BYTE PTR [rax],al
 101174c:	and    BYTE PTR [rax],al
 101174e:	and    BYTE PTR [rax],al
 1011750:	pop    rbx
 1011751:	add    BYTE PTR [rip+0x20004400],ch        # 0x21015b57
 1011757:	add    BYTE PTR [rdi+0x0],cl
 101175a:	add    BYTE PTR [rdx+0x0],r8b
 101175e:	rex.XB add BYTE PTR [r8],spl
 1011761:	add    BYTE PTR [rax+rax*1+0x53],al
 1011765:	add    BYTE PTR [rsi+0x0],cl
 1011768:	and    BYTE PTR [rax],al
 101176a:	outs   dx,BYTE PTR ds:[rsi]
 101176b:	add    BYTE PTR [rcx+0x0],ah
 101176e:	ins    DWORD PTR es:[rdi],dx
 101176f:	add    BYTE PTR [rbp+0x0],ah
 1011772:	pop    rbp
 1011773:	add    BYTE PTR [rsi],dh
 1011775:	add    BYTE PTR [rax],ah
 1011777:	add    BYTE PTR [rax],ah
 1011779:	add    BYTE PTR [rbx+0x0],bl
 101177c:	sub    eax,0x20007100
 1011781:	add    BYTE PTR [rdx],ah
 1011783:	add    BYTE PTR [rbx+0x0],ah
 1011786:	ins    DWORD PTR es:[rdi],dx
 1011787:	add    BYTE PTR [rax+rax*1+0x6c],ah
 101178b:	add    BYTE PTR [rcx+0x0],ch
 101178e:	outs   dx,BYTE PTR ds:[rsi]
 101178f:	add    BYTE PTR [rbp+0x0],ah
 1011792:	and    BYTE PTR [rax],al
 1011794:	jno    0x1011796
 1011796:	jne    0x1011798
 1011798:	add    BYTE PTR gs:[rdx+0x0],dh
 101179c:	jns    0x101179e
 101179e:	and    al,BYTE PTR [rax]
 10117a0:	pop    rbp
 10117a1:	add    BYTE PTR [rax],ah
 10117a3:	add    BYTE PTR [rax],ah
 10117a5:	add    BYTE PTR [rax],ah
 10117a7:	add    BYTE PTR [rbx+0x0],bl
 10117aa:	sub    eax,0x20005100
 10117af:	add    BYTE PTR [rdx],ah
 10117b1:	add    BYTE PTR [rbx+0x0],ah
 10117b4:	ins    DWORD PTR es:[rdi],dx
 10117b5:	add    BYTE PTR [rax+rax*1+0x6c],ah
 10117b9:	add    BYTE PTR [rcx+0x0],ch
 10117bc:	outs   dx,BYTE PTR ds:[rsi]
 10117bd:	add    BYTE PTR [rbp+0x0],ah
 10117c0:	and    BYTE PTR [rax],al
 10117c2:	jno    0x10117c4
 10117c4:	jne    0x10117c6
 10117c6:	add    BYTE PTR gs:[rdx+0x0],dh
 10117ca:	jns    0x10117cc
 10117cc:	and    al,BYTE PTR [rax]
 10117ce:	and    BYTE PTR [rax],al
 10117d0:	(bad)  
 10117d1:	add    BYTE PTR [rsi+0x0],ch
 10117d4:	add    BYTE PTR fs:[rax],ah
 10117d7:	add    BYTE PTR [rbp+0x0],ah
 10117da:	js     0x10117dc
 10117dc:	imul   eax,DWORD PTR [rax],0x5d0074
 10117e2:	sub    BYTE PTR [rax],al
 10117e4:	and    BYTE PTR [rax],al
 10117e6:	and    BYTE PTR [rax],al
 10117e8:	pop    rbx
 10117e9:	add    BYTE PTR [rip+0x20006e00],ch        # 0x210185ef
 10117ef:	add    BYTE PTR [rdx+0x0],dh
 10117f2:	add    BYTE PTR gs:[rbp+0x0],ch
 10117f6:	outs   dx,DWORD PTR ds:[rsi]
 10117f7:	add    BYTE PTR [rsi+0x0],dh
 10117fa:	add    BYTE PTR gs:[rax],ah
 10117fd:	add    BYTE PTR [rsi+0x0],ch
 1011800:	jne    0x1011802
 1011802:	ins    DWORD PTR es:[rdi],dx
 1011803:	add    BYTE PTR [rdx+0x0],ah
 1011806:	add    BYTE PTR gs:[rdx+0x0],dh
 101180a:	imul   eax,DWORD PTR [rax],0x67006e
 1011810:	pop    rbp
 1011811:	add    BYTE PTR [rax],ah
 1011813:	add    BYTE PTR [rax],ah
 1011815:	add    BYTE PTR [rbx+0x0],bl
 1011818:	sub    eax,0x20006d00
 101181d:	add    BYTE PTR [rbp+0x0],ah
 1011820:	jb     0x1011822
 1011822:	jb     0x1011824
 1011824:	outs   dx,DWORD PTR ds:[rsi]
 1011825:	add    BYTE PTR [rdx+0x0],dh
 1011828:	ins    BYTE PTR es:[rdi],dx
 1011829:	add    BYTE PTR [rbp+0x0],ah
 101182c:	jbe    0x101182e
 101182e:	add    BYTE PTR gs:[rax+rax*1+0x5d],ch
 1011833:	add    BYTE PTR [rbx],ch
 1011835:	add    BYTE PTR [rax],ah
 1011837:	add    BYTE PTR [rax],ah
 1011839:	add    BYTE PTR [rbx+0x0],bl
 101183c:	sub    eax,0x20007200
 1011841:	add    BYTE PTR [rbp+0x0],ch
 1011844:	jae    0x1011846
 1011846:	add    BYTE PTR [ebx+0x0],dh
 101184a:	and    BYTE PTR [rax],al
 101184c:	je     0x101184e
 101184e:	outs   dx,DWORD PTR ds:[rsi]
 101184f:	add    BYTE PTR [rax],ah
 1011851:	add    BYTE PTR [rbx+0x0],dh
 1011854:	je     0x1011856
 1011856:	add    BYTE PTR fs:[rbp+0x0],ah
 101185a:	jb     0x101185c
 101185c:	jb     0x101185e
 101185e:	pop    rbp
 101185f:	add    BYTE PTR [rax],ah
 1011861:	add    BYTE PTR [rax],ah
 1011863:	add    BYTE PTR [rax],ah
 1011865:	add    BYTE PTR [rax],ah
 1011867:	add    BYTE PTR [rbx+0x0],bl
 101186a:	sub    eax,0x20005600
 101186f:	add    BYTE PTR [rbx+0x0],dh
 1011872:	add    BYTE PTR gs:[rsi+0x0],dh
 1011876:	add    BYTE PTR gs:[rdx+0x0],dh
 101187a:	imul   eax,DWORD PTR [rax],0x790074
 1011880:	ins    BYTE PTR es:[rdi],dx
 1011881:	add    BYTE PTR [rbp+0x0],ah
 1011884:	jbe    0x1011886
 1011886:	add    BYTE PTR gs:[rax+rax*1+0x5d],ch
 101188b:	add    BYTE PTR [rax],ch
 101188d:	add    BYTE PTR [rax],ah
 101188f:	add    BYTE PTR [rax],ah
 1011891:	add    BYTE PTR [rbx+0x0],bl
 1011894:	sub    eax,0x20006900
 1011899:	add    BYTE PTR [rcx+0x0],ch
 101189c:	outs   dx,BYTE PTR ds:[rsi]
 101189d:	add    BYTE PTR [rax+0x0],dh
 10118a0:	jne    0x10118a2
 10118a2:	je     0x10118a4
 10118a4:	data16 add BYTE PTR [rcx+0x0],ch
 10118a8:	ins    BYTE PTR es:[rdi],dx
 10118a9:	add    BYTE PTR [rbp+0x0],ah
 10118ac:	pop    rbp
 10118ad:	add    BYTE PTR [rax],ah
 10118af:	add    BYTE PTR [rax],ah
 10118b1:	add    BYTE PTR [rax],ah
 10118b3:	add    BYTE PTR [rax],ah
 10118b5:	add    BYTE PTR [rax],ah
 10118b7:	add    BYTE PTR [rax],ah
 10118b9:	add    BYTE PTR [rax],ah
 10118bb:	add    BYTE PTR [rax],ah
 10118bd:	add    BYTE PTR [rax],ah
 10118bf:	add    BYTE PTR [rbx+0x0],bl
 10118c2:	sub    eax,0x20006f00
 10118c7:	add    BYTE PTR [rdi+0x0],ch
 10118ca:	jne    0x10118cc
 10118cc:	je     0x10118ce
 10118ce:	jo     0x10118d0
 10118d0:	jne    0x10118d2
 10118d2:	je     0x10118d4
 10118d4:	data16 add BYTE PTR [rcx+0x0],ch
 10118d8:	ins    BYTE PTR es:[rdi],dx
 10118d9:	add    BYTE PTR [rbp+0x0],ah
 10118dc:	pop    rbp
 10118dd:	add    BYTE PTR [rbx+0x20002000],al
 10118e3:	add    BYTE PTR [rbx+0x0],bl
 10118e6:	sub    eax,0x5b005800
 10118eb:	add    BYTE PTR [rcx],dh
 10118ed:	add    BYTE PTR [rbp+0x0],bl
 10118f0:	and    BYTE PTR [rax],al
 10118f2:	add    BYTE PTR fs:[rcx+0x0],ch
 10118f6:	jae    0x10118f8
 10118f8:	(bad)  
 10118f9:	add    BYTE PTR [rdx+0x0],ah
 10118fc:	ins    BYTE PTR es:[rdi],dx
 10118fd:	add    BYTE PTR [rbp+0x0],ah
 1011900:	and    BYTE PTR [rax],al
 1011902:	movsxd eax,DWORD PTR [rax]
 1011904:	outs   dx,DWORD PTR ds:[rsi]
 1011905:	add    BYTE PTR [rbp+0x0],ch
 1011908:	ins    DWORD PTR es:[rdi],dx
 1011909:	add    BYTE PTR [rcx+0x0],ah
 101190c:	outs   dx,BYTE PTR ds:[rsi]
 101190d:	add    BYTE PTR [rax+rax*1+0x73],ah
 1011911:	add    BYTE PTR [rax],ah
 1011913:	add    BYTE PTR [rbx+0x0],bl
 1011916:	(bad)  
 1011917:	add    BYTE PTR [rsi+0x0],ch
 101191a:	add    BYTE PTR fs:[rax],ah
 101191d:	add    BYTE PTR [rbp+0x0],ah
 1011920:	js     0x1011922
 1011922:	imul   eax,DWORD PTR [rax],0x200074
 1011928:	ja     0x101192a
 101192a:	imul   eax,DWORD PTR [rax],0x680074
 1011930:	and    BYTE PTR [rax],al
 1011932:	ja     0x1011934
 1011934:	(bad)  
 1011935:	add    BYTE PTR [rdx+0x0],dh
 1011938:	outs   dx,BYTE PTR ds:[rsi]
 1011939:	add    BYTE PTR [rcx+0x0],ch
 101193c:	outs   dx,BYTE PTR ds:[rsi]
 101193d:	add    BYTE PTR [rdi+0x0],ah
 1011940:	pop    rbp
 1011941:	add    BYTE PTR [rbp+0x0],bl
 1011944:	or     al,BYTE PTR [rax]
 1011946:	and    BYTE PTR [rax],al
 1011948:	and    BYTE PTR [rax],al
 101194a:	pop    rbx
 101194b:	add    BYTE PTR [rip+0x20004f00],ch        # 0x21016851
 1011951:	add    BYTE PTR [rbp+0x0],dh
 1011954:	jae    0x1011956
 1011956:	add    BYTE PTR gs:[rax],ah
 1011959:	add    BYTE PTR [rdi+0x0],cl
 101195c:	ins    BYTE PTR es:[rdi],dx
 101195d:	add    BYTE PTR [rax+rax*1+0x20],ah
 1011961:	add    BYTE PTR [rcx+0x0],cl
 1011964:	push   rbx
 1011965:	add    BYTE PTR [rcx+0x0],dl
 1011968:	rex.WR add BYTE PTR [rax],r12b
 101196b:	add    BYTE PTR [rdx+0x0],ah
 101196e:	add    BYTE PTR gs:[rax+0x0],ch
 1011972:	(bad)  
 1011973:	add    BYTE PTR [rsi+0x0],dh
 1011976:	imul   eax,DWORD PTR [rax],0x72006f
 101197c:	and    BYTE PTR [rax],al
 101197e:	add    BYTE PTR fs:[rcx+0x0],ch
 1011982:	jae    0x1011984
 1011984:	(bad)  
 1011985:	add    BYTE PTR [rdx+0x0],ah
 1011988:	ins    BYTE PTR es:[rdi],dx
 1011989:	add    BYTE PTR [rbp+0x0],ah
 101198c:	jae    0x101198e
 101198e:	and    BYTE PTR [rax],al
 1011990:	je     0x1011992
 1011992:	push   0x20006500
 1011997:	add    BYTE PTR [rsi+0x0],ah
 101199a:	outs   dx,DWORD PTR ds:[rsi]
 101199b:	add    BYTE PTR [rax+rax*1+0x6c],ch
 101199f:	add    BYTE PTR [rdi+0x0],ch
 10119a2:	ja     0x10119a4
 10119a4:	imul   eax,DWORD PTR [rax],0x67006e
 10119aa:	pop    rbp
 10119ab:	add    BYTE PTR [rdx],cl
 10119ad:	add    BYTE PTR [rax],ah
 10119af:	add    BYTE PTR [rax],ah
 10119b1:	add    BYTE PTR [rax],ah
 10119b3:	add    BYTE PTR [rax],ah
 10119b5:	add    BYTE PTR [rax],ah
 10119b7:	add    BYTE PTR [rax],ah
 10119b9:	add    BYTE PTR [rax+rax*1],bh
 10119bc:	add    BYTE PTR [r15+0x0],r9b
 10119c0:	rex.RX add BYTE PTR [rsi],r15b
 10119c3:	add    BYTE PTR [rax],ah
 10119c5:	add    BYTE PTR [rdx+0x0],ah
 10119c8:	(bad)  
 10119c9:	add    BYTE PTR [rax+rax*1+0x63],dh
 10119cd:	add    BYTE PTR [rax+0x0],ch
 10119d0:	and    BYTE PTR [rax],al
 10119d2:	jo     0x10119d4
 10119d4:	jb     0x10119d6
 10119d6:	outs   dx,DWORD PTR ds:[rsi]
 10119d7:	add    BYTE PTR [rbx+0x0],ah
 10119da:	add    BYTE PTR gs:[rbx+0x0],dh
 10119de:	jae    0x10119e0
 10119e0:	imul   eax,DWORD PTR [rax],0x67006e
 10119e6:	or     al,BYTE PTR [rax]
 10119e8:	push   rax
 10119e9:	add    BYTE PTR [rcx+0x0],ah
 10119ec:	jae    0x10119ee
 10119ee:	jae    0x10119f0
 10119f0:	ja     0x10119f2
 10119f2:	outs   dx,DWORD PTR ds:[rsi]
 10119f3:	add    BYTE PTR [rdx+0x0],dh
 10119f6:	add    BYTE PTR fs:[rdx],bh
 10119f9:	add    BYTE PTR [rax],ah
 10119fb:	add    BYTE PTR [rdi],ah
 10119fd:	add    BYTE PTR [rbp+0x0],al
 1011a00:	jb     0x1011a02
 1011a02:	jb     0x1011a04
 1011a04:	outs   dx,DWORD PTR ds:[rsi]
 1011a05:	add    BYTE PTR [rdx+0x0],dh
 1011a08:	cmp    al,BYTE PTR [rax]
 1011a0a:	and    BYTE PTR [rax],al
 1011a0c:	rex.WB add BYTE PTR [r14+0x0],bpl
 1011a10:	jae    0x1011a12
 1011a12:	jne    0x1011a14
 1011a14:	data16 add BYTE PTR [rsi+0x0],ah
 1011a18:	imul   eax,DWORD PTR [rax],0x690063
 1011a1e:	add    BYTE PTR gs:[rsi+0x0],ch
 1011a22:	je     0x1011a24
 1011a24:	and    BYTE PTR [rax],al
 1011a26:	ins    DWORD PTR es:[rdi],dx
 1011a27:	add    BYTE PTR [rbp+0x0],ah
 1011a2a:	ins    DWORD PTR es:[rdi],dx
 1011a2b:	add    BYTE PTR [rdi+0x0],ch
 1011a2e:	jb     0x1011a30
 1011a30:	jns    0x1011a32
 1011a32:	and    BYTE PTR [rax],al
 1011a34:	je     0x1011a36
 1011a36:	outs   dx,DWORD PTR ds:[rsi]
 1011a37:	add    BYTE PTR [rax],ah
 1011a39:	add    BYTE PTR [rbx+0x0],ah
 1011a3c:	outs   dx,DWORD PTR ds:[rsi]
 1011a3d:	add    BYTE PTR [rsi+0x0],ch
 1011a40:	je     0x1011a42
 1011a42:	imul   eax,DWORD PTR [rax],0x75006e
 1011a48:	add    BYTE PTR gs:[rsi],ch
 1011a4b:	add    BYTE PTR [rax],cl
 1011a4d:	add    BYTE PTR [rip+0x20006400],ah        # 0x21017e53
 1011a53:	add    BYTE PTR [rax+0x0],bh
 1011a56:	(bad)  
 1011a57:	add    BYTE PTR [rbx+0x0],ah
 1011a5a:	je     0x1011a5c
 1011a5c:	cmp    al,BYTE PTR [rax]
 1011a5e:	or     DWORD PTR [rax],eax
 1011a60:	and    eax,0x20006400
 1011a65:	add    BYTE PTR [rax+0x0],bh
 1011a68:	(bad)  
 1011a69:	add    BYTE PTR [rbx+0x0],ah
 1011a6c:	je     0x1011a6e
 1011a6e:	jae    0x1011a70
 1011a70:	cmp    al,BYTE PTR [rax]
 1011a72:	add    BYTE PTR [r11+0x0],al
 1011a76:	ins    BYTE PTR es:[rdi],dx
 1011a77:	add    BYTE PTR [rdi+0x0],ch
 1011a7a:	movsxd eax,DWORD PTR [rax]
 1011a7c:	imul   eax,DWORD PTR [rax],0x20
 1011a7f:	add    BYTE PTR [rax+rax*1+0x69],dl
 1011a83:	add    BYTE PTR [rbp+0x0],ch
 1011a86:	add    BYTE PTR gs:[rax],ah
 1011a89:	add    BYTE PTR [rax],ch
 1011a8b:	add    BYTE PTR [rbp+0x0],ch
 1011a8e:	jae    0x1011a90
 1011a90:	add    BYTE PTR cs:[rcx],ch
 1011a93:	add    BYTE PTR [rdx],bh
 1011a95:	add    BYTE PTR [rax],ah
 1011a97:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1011a9b:	add    BYTE PTR [rax+rax*1+0x61],dh
 1011a9f:	add    BYTE PTR [rax+rax*1+0x20],ch
 1011aa3:	add    BYTE PTR [rax],ah
 1011aa5:	add    BYTE PTR [rax],ah
 1011aa7:	add    BYTE PTR [rip+0x6c003700],ah        # 0x6d0151ad
 1011aad:	add    BYTE PTR [rax+rax*1+0x20],ah
 1011ab1:	add    BYTE PTR [rax],ah
 1011ab3:	add    BYTE PTR [rcx+0x0],ah
 1011ab6:	jbe    0x1011ab8
 1011ab8:	add    BYTE PTR [eax],ah
 1011abb:	add    BYTE PTR [rax],ah
 1011abd:	add    BYTE PTR [rax],ah
 1011abf:	add    BYTE PTR [rip+0x6c003700],ah        # 0x6d0151c5
 1011ac5:	add    BYTE PTR [rax+rax*1+0x20],ah
 1011ac9:	add    BYTE PTR [rax],ch
 1011acb:	add    BYTE PTR [rip+0x2e003300],ah        # 0x2f014dd1
 1011ad1:	add    BYTE PTR [rdx],dh
 1011ad3:	add    BYTE PTR [rsi+0x0],ah
 1011ad6:	and    BYTE PTR [rax],al
 1011ad8:	js     0x1011ada
 1011ada:	(bad)  
 1011adb:	add    BYTE PTR [rbx+0x0],ah
 1011ade:	je     0x1011ae0
 1011ae0:	jae    0x1011ae2
 1011ae2:	and    BYTE PTR [rax],al
 1011ae4:	jo     0x1011ae6
 1011ae6:	add    BYTE PTR gs:[rdx+0x0],dh
 1011aea:	and    BYTE PTR [rax],al
 1011aec:	jae    0x1011aee
 1011aee:	add    BYTE PTR gs:[rbx+0x0],ah
 1011af2:	add    BYTE PTR cs:[rcx],ch
 1011af5:	add    BYTE PTR [rdi],bl
 1011af7:	add    BYTE PTR [rsi+0x0],cl
 1011afa:	add    BYTE PTR gs:[rax+rax*1+0x77],dh
 1011aff:	add    BYTE PTR [rdi+0x0],ch
 1011b02:	jb     0x1011b04
 1011b04:	imul   eax,DWORD PTR [rax],0x20
 1011b07:	add    BYTE PTR [rax+0x0],dh
 1011b0a:	(bad)  
 1011b0b:	add    BYTE PTR [rbx+0x0],ah
 1011b0e:	imul   eax,DWORD PTR [rax],0x65
 1011b11:	add    BYTE PTR [rax+rax*1+0x20],dh
 1011b15:	add    BYTE PTR [rbx+0x0],dh
 1011b18:	imul   eax,DWORD PTR [rax],0x65007a
 1011b1e:	and    BYTE PTR [rax],al
 1011b20:	sub    BYTE PTR [rax],al
 1011b22:	(bad)  
 1011b23:	add    BYTE PTR [rcx+0x0],bh
 1011b26:	je     0x1011b28
 1011b28:	add    BYTE PTR gs:[rbx+0x0],dh
 1011b2c:	sub    DWORD PTR [rax],eax
 1011b2e:	cmp    al,BYTE PTR [rax]
 1011b30:	and    BYTE PTR [rax],al
 1011b32:	and    eax,0x15006400
 1011b37:	add    BYTE PTR [rbx+0x0],ah
 1011b3a:	(bad)  
 1011b3b:	add    BYTE PTR [rsi+0x0],ch
 1011b3e:	outs   dx,BYTE PTR ds:[rsi]
 1011b3f:	add    BYTE PTR [rdi+0x0],ch
 1011b42:	je     0x1011b44
 1011b44:	and    BYTE PTR [rax],al
 1011b46:	outs   dx,DWORD PTR ds:[rsi]
 1011b47:	add    BYTE PTR [rax+0x0],dh
 1011b4a:	add    BYTE PTR gs:[rsi+0x0],ch
 1011b4e:	and    BYTE PTR [rax],al
 1011b50:	data16 add BYTE PTR [rcx+0x0],ch
 1011b54:	ins    BYTE PTR es:[rdi],dx
 1011b55:	add    BYTE PTR [rbp+0x0],ah
 1011b58:	and    BYTE PTR [rax],al
 1011b5a:	(bad)  
 1011b5b:	add    BYTE PTR [rip+0x27007300],ah        # 0x28018e61
 1011b61:	add    BYTE PTR [rax+0x41],dl
 1011b64:	(bad)  
 1011b65:	add    BYTE PTR [rbp+0x0],ch
 1011b68:	(bad)  
 1011b69:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1011b6d:	add    BYTE PTR [rdi+0x0],ch
 1011b70:	movsxd eax,DWORD PTR [rax]
 1011b72:	and    BYTE PTR [rax],al
 1011b74:	data16 add BYTE PTR [rcx+0x0],ah
 1011b78:	imul   eax,DWORD PTR [rax],0x65006c
 1011b7e:	add    BYTE PTR fs:[rax],ah
 1011b81:	add    BYTE PTR [rcx+0x0],ch
 1011b84:	outs   dx,BYTE PTR ds:[rsi]
 1011b85:	add    BYTE PTR [rax],ah
 1011b87:	add    BYTE PTR [rax+rax*1+0x62],ah
 1011b8b:	add    BYTE PTR [rbp+0x0],ah
 1011b8e:	add    BYTE PTR fs:[rcx+0x0],ch
 1011b92:	je     0x1011b94
 1011b94:	sbb    eax,0x79007300
 1011b99:	add    BYTE PTR [rbx+0x0],dh
 1011b9c:	je     0x1011b9e
 1011b9e:	add    BYTE PTR gs:[rbp+0x0],ch
 1011ba2:	sub    BYTE PTR [rax],al
 1011ba4:	sub    DWORD PTR [rax],eax
 1011ba6:	and    BYTE PTR [rax],al
 1011ba8:	data16 add BYTE PTR [rcx+0x0],ah
 1011bac:	imul   eax,DWORD PTR [rax],0x65006c
 1011bb2:	add    BYTE PTR fs:[rax],ah
 1011bb5:	add    BYTE PTR [rcx+0x0],ch
 1011bb8:	outs   dx,BYTE PTR ds:[rsi]
 1011bb9:	add    BYTE PTR [rax],ah
 1011bbb:	add    BYTE PTR [rax+rax*1+0x62],ah
 1011bbf:	add    BYTE PTR [rbp+0x0],ah
 1011bc2:	add    BYTE PTR fs:[rcx+0x0],ch
 1011bc6:	je     0x1011bc8
 1011bc8:	cmp    al,BYTE PTR [rax]
 1011bca:	and    BYTE PTR [rax],al
 1011bcc:	and    eax,0x3d007300
 1011bd1:	add    BYTE PTR [rbx+0x0],al
 1011bd4:	outs   dx,DWORD PTR ds:[rsi]
 1011bd5:	add    BYTE PTR [rbp+0x0],ch
 1011bd8:	ins    DWORD PTR es:[rdi],dx
 1011bd9:	add    BYTE PTR [rcx+0x0],ah
 1011bdc:	outs   dx,BYTE PTR ds:[rsi]
 1011bdd:	add    BYTE PTR [rax+rax*1+0x20],ah
 1011be1:	add    BYTE PTR [rcx+0x0],cl
 1011be4:	outs   dx,BYTE PTR ds:[rsi]
 1011be5:	add    BYTE PTR [rax+0x0],dh
 1011be8:	jne    0x1011bea
 1011bea:	je     0x1011bec
 1011bec:	and    BYTE PTR [rax],al
 1011bee:	je     0x1011bf0
 1011bf0:	outs   dx,DWORD PTR ds:[rsi]
 1011bf1:	add    BYTE PTR [rdi+0x0],ch
 1011bf4:	and    BYTE PTR [rax],al
 1011bf6:	ins    BYTE PTR es:[rdi],dx
 1011bf7:	add    BYTE PTR [rdi+0x0],ch
 1011bfa:	outs   dx,BYTE PTR ds:[rsi]
 1011bfb:	add    BYTE PTR [rdi+0x0],ah
 1011bfe:	add    BYTE PTR cs:[rax],ah
 1011c01:	add    BYTE PTR [rbx+0x0],dl
 1011c04:	jo     0x1011c06
 1011c06:	ins    BYTE PTR es:[rdi],dx
 1011c07:	add    BYTE PTR [rcx+0x0],ch
 1011c0a:	je     0x1011c0c
 1011c0c:	and    BYTE PTR [rax],al
 1011c0e:	je     0x1011c10
 1011c10:	push   0x20006500
 1011c15:	add    BYTE PTR [rcx+0x0],dh
 1011c18:	jne    0x1011c1a
 1011c1a:	add    BYTE PTR gs:[rdx+0x0],dh
 1011c1e:	jns    0x1011c20
 1011c20:	and    BYTE PTR [rax],al
 1011c22:	imul   eax,DWORD PTR [rax],0x20006e
 1011c28:	ins    DWORD PTR es:[rdi],dx
 1011c29:	add    BYTE PTR [rdi+0x0],ch
 1011c2c:	jb     0x1011c2e
 1011c2e:	add    BYTE PTR gs:[rax],ah
 1011c31:	add    BYTE PTR [rax+rax*1+0x68],dh
 1011c35:	add    BYTE PTR [rcx+0x0],ah
 1011c38:	outs   dx,BYTE PTR ds:[rsi]
 1011c39:	add    BYTE PTR [rax],ah
 1011c3b:	add    BYTE PTR [rdi+0x0],ch
 1011c3e:	outs   dx,BYTE PTR ds:[rsi]
 1011c3f:	add    BYTE PTR [rbp+0x0],ah
 1011c42:	and    BYTE PTR [rax],al
 1011c44:	ins    BYTE PTR es:[rdi],dx
 1011c45:	add    BYTE PTR [rcx+0x0],ch
 1011c48:	outs   dx,BYTE PTR ds:[rsi]
 1011c49:	add    BYTE PTR [rbp+0x0],ah
 1011c4c:	rex.XB add BYTE PTR [r11+0x0],al
 1011c50:	outs   dx,DWORD PTR ds:[rsi]
 1011c51:	add    BYTE PTR [rax+rax*1+0x75],ch
 1011c55:	add    BYTE PTR [rbp+0x0],ch
 1011c58:	outs   dx,BYTE PTR ds:[rsi]
 1011c59:	add    BYTE PTR [rax],ah
 1011c5b:	add    BYTE PTR [rdi+0x0],dh
 1011c5e:	imul   eax,DWORD PTR [rax],0x740064
 1011c64:	push   0x5b002000
 1011c69:	add    BYTE PTR [rip+0x5d007700],ch        # 0x5e01936f
 1011c6f:	add    BYTE PTR [rax],ah
 1011c71:	add    BYTE PTR [rsi+0x0],dh
 1011c74:	(bad)  
 1011c75:	add    BYTE PTR [rax+rax*1+0x75],ch
 1011c79:	add    BYTE PTR [rbp+0x0],ah
 1011c7c:	and    BYTE PTR [rax],al
 1011c7e:	ins    DWORD PTR es:[rdi],dx
 1011c7f:	add    BYTE PTR [rbp+0x0],dh
 1011c82:	jae    0x1011c84
 1011c84:	je     0x1011c86
 1011c86:	and    BYTE PTR [rax],al
 1011c88:	(bad)  
 1011c89:	add    BYTE PTR [rbp+0x0],ah
 1011c8c:	and    BYTE PTR [rax],al
 1011c8e:	add    BYTE PTR [edx+0x0],dh
 1011c92:	add    BYTE PTR gs:[rcx+0x0],ah
 1011c96:	je     0x1011c98
 1011c98:	add    BYTE PTR gs:[rdx+0x0],dh
 1011c9c:	and    BYTE PTR [rax],al
 1011c9e:	je     0x1011ca0
 1011ca0:	push   0x6e006100
 1011ca5:	add    BYTE PTR [rax],ah
 1011ca7:	add    BYTE PTR [rax],bh
 1011ca9:	add    BYTE PTR [rax],ah
 1011cab:	add    BYTE PTR [rcx+0x0],ah
 1011cae:	outs   dx,BYTE PTR ds:[rsi]
 1011caf:	add    BYTE PTR [rax+rax*1+0x20],ah
 1011cb3:	add    BYTE PTR [rax+rax*1+0x65],ch
 1011cb7:	add    BYTE PTR [rbx+0x0],dh
 1011cba:	jae    0x1011cbc
 1011cbc:	and    BYTE PTR [rax],al
 1011cbe:	je     0x1011cc0
 1011cc0:	push   0x6e006100
 1011cc5:	add    BYTE PTR [rax],ah
 1011cc7:	add    BYTE PTR [rsi],dh
 1011cc9:	add    BYTE PTR [rip+0x33003500],dh        # 0x340151cf
 1011ccf:	add    BYTE PTR [rsi],dh
 1011cd1:	add    BYTE PTR [rsi],ch
 1011cd3:	add    BYTE PTR [rdi],ch
 1011cd5:	add    BYTE PTR [rdi+0x0],ch
 1011cd8:	jae    0x1011cda
 1011cda:	jno    0x1011cdc
 1011cdc:	ins    BYTE PTR es:[rdi],dx
 1011cdd:	add    BYTE PTR [rdx],bh
 1011cdf:	add    BYTE PTR [rax],ah
 1011ce1:	add    BYTE PTR [rax],ah
 1011ce3:	add    BYTE PTR [rsi+0x0],cl
 1011ce6:	outs   dx,DWORD PTR ds:[rsi]
 1011ce7:	add    BYTE PTR [rax],ah
 1011ce9:	add    BYTE PTR [rdx+0x0],dh
 1011cec:	outs   dx,DWORD PTR ds:[rsi]
 1011ced:	add    BYTE PTR [rdi+0x0],dh
 1011cf0:	jae    0x1011cf2
 1011cf2:	and    BYTE PTR [rax],al
 1011cf4:	data16 add BYTE PTR [rdi+0x0],ch
 1011cf8:	jne    0x1011cfa
 1011cfa:	outs   dx,BYTE PTR ds:[rsi]
 1011cfb:	add    BYTE PTR [rax+rax*1+0x20],ah
 1011cff:	add    BYTE PTR [rdi+0x0],dh
 1011d02:	push   0x6e006500
 1011d07:	add    BYTE PTR [rax],ah
 1011d09:	add    BYTE PTR [rbx+0x0],dh
 1011d0c:	add    BYTE PTR gs:[rax+rax*1+0x65],ch
 1011d11:	add    BYTE PTR [rbx+0x0],ah
 1011d14:	je     0x1011d16
 1011d16:	imul   eax,DWORD PTR [rax],0x67006e
 1011d1c:	and    BYTE PTR [rax],al
 1011d1e:	add    BYTE PTR gs:[rax+0x0],bh
 1011d22:	imul   eax,DWORD PTR [rax],0x200074
 1011d28:	jbe    0x1011d2a
 1011d2a:	(bad)  
 1011d2b:	add    BYTE PTR [rax+rax*1+0x75],ch
 1011d2f:	add    BYTE PTR [rbp+0x0],ah
 1011d32:	add    BYTE PTR cs:[rbx],ah
 1011d35:	add    BYTE PTR [rdi+0x0],ch
 1011d38:	jae    0x1011d3a
 1011d3a:	jno    0x1011d3c
 1011d3c:	ins    BYTE PTR es:[rdi],dx
 1011d3d:	add    BYTE PTR [rdx],bh
 1011d3f:	add    BYTE PTR [rax],ah
 1011d41:	add    BYTE PTR [rax],ah
 1011d43:	add    BYTE PTR [rbp+0x0],al
 1011d46:	jb     0x1011d48
 1011d48:	jb     0x1011d4a
 1011d4a:	outs   dx,DWORD PTR ds:[rsi]
 1011d4b:	add    BYTE PTR [rdx+0x0],dh
 1011d4e:	and    BYTE PTR [rax],al
 1011d50:	movsxd eax,DWORD PTR [rax]
 1011d52:	outs   dx,DWORD PTR ds:[rsi]
 1011d53:	add    BYTE PTR [rsi+0x0],ch
 1011d56:	jbe    0x1011d58
 1011d58:	add    BYTE PTR gs:[rdx+0x0],dh
 1011d5c:	je     0x1011d5e
 1011d5e:	imul   eax,DWORD PTR [rax],0x67006e
 1011d64:	and    BYTE PTR [rax],al
 1011d66:	add    BYTE PTR gs:[rax+0x0],bh
 1011d6a:	imul   eax,DWORD PTR [rax],0x200074
 1011d70:	jbe    0x1011d72
 1011d72:	(bad)  
 1011d73:	add    BYTE PTR [rax+rax*1+0x75],ch
 1011d77:	add    BYTE PTR [rbp+0x0],ah
 1011d7a:	add    BYTE PTR cs:[rsi],cl
 1011d7d:	add    BYTE PTR [rax],ah
 1011d7f:	add    BYTE PTR [rax],ah
 1011d81:	add    BYTE PTR [rax],ah
 1011d83:	add    BYTE PTR [rax],ah
 1011d85:	add    BYTE PTR [rip+0x20002d00],ch        # 0x21014a8b
 1011d8b:	add    BYTE PTR [rsi+0x0],cl
 1011d8e:	rex.WRXB add BYTE PTR [r14+0x0],r9b
 1011d92:	add    BYTE PTR [r8],r12b
 1011d95:	add    BYTE PTR [rip+0x9002d00],ch        # 0xa014a9b
 1011d9b:	add    BYTE PTR [rdx],cl
 1011d9d:	add    BYTE PTR [rbx+0x0],dl
 1011da0:	add    BYTE PTR gs:[rdx+0x0],dh
 1011da4:	jbe    0x1011da6
 1011da6:	add    BYTE PTR gs:[rdx+0x0],dh
 1011daa:	jae    0x1011dac
 1011dac:	cmp    al,BYTE PTR [rax]
 1011dae:	and    DWORD PTR [rax],eax
 1011db0:	rex.WB add BYTE PTR [r14+0x0],bpl
 1011db4:	jbe    0x1011db6
 1011db6:	(bad)  
 1011db7:	add    BYTE PTR [rax+rax*1+0x69],ch
 1011dbb:	add    BYTE PTR [rax+rax*1+0x20],ah
 1011dbf:	add    BYTE PTR [rax+rax*1+0x6f],ch
 1011dc3:	add    BYTE PTR [rdi+0x0],ah
 1011dc6:	imul   eax,DWORD PTR [rax],0x20006e
 1011dcc:	je     0x1011dce
 1011dce:	imul   eax,DWORD PTR [rax],0x65006d
 1011dd4:	outs   dx,DWORD PTR ds:[rsi]
 1011dd5:	add    BYTE PTR [rbp+0x0],dh
 1011dd8:	je     0x1011dda
 1011dda:	and    BYTE PTR [rax],al
 1011ddc:	pop    rbx
 1011ddd:	add    BYTE PTR [rip+0x5d006c00],ch        # 0x5e0189e3
 1011de3:	add    BYTE PTR [rax],ah
 1011de5:	add    BYTE PTR [rsi+0x0],dh
 1011de8:	(bad)  
 1011de9:	add    BYTE PTR [rax+rax*1+0x75],ch
 1011ded:	add    BYTE PTR [rbp+0x0],ah
 1011df0:	add    BYTE PTR cs:[rcx],bh
 1011df3:	add    BYTE PTR [rdi+0x0],dl
 1011df6:	(bad)  
 1011df7:	add    BYTE PTR [rdx+0x0],dh
 1011dfa:	outs   dx,BYTE PTR ds:[rsi]
 1011dfb:	add    BYTE PTR [rcx+0x0],ch
 1011dfe:	outs   dx,BYTE PTR ds:[rsi]
 1011dff:	add    BYTE PTR [rdi+0x0],ah
 1011e02:	cmp    al,BYTE PTR [rax]
 1011e04:	and    BYTE PTR [rax],al
 1011e06:	push   rax
 1011e07:	add    BYTE PTR [rcx+0x0],ah
 1011e0a:	movsxd eax,DWORD PTR [rax]
 1011e0c:	imul   eax,DWORD PTR [rax],0x65
 1011e0f:	add    BYTE PTR [rax+rax*1+0x73],dh
 1011e13:	add    BYTE PTR [rcx+0x0],ch
 1011e16:	jp     0x1011e18
 1011e18:	add    BYTE PTR gs:[rax],ah
 1011e1b:	add    BYTE PTR [rbx+0x0],dh
 1011e1e:	imul   eax,DWORD PTR [rax],0x65007a
 1011e24:	and    BYTE PTR [rax],al
 1011e26:	imul   eax,DWORD PTR [rax],0x76006e
 1011e2c:	(bad)  
 1011e2d:	add    BYTE PTR [rax+rax*1+0x69],ch
 1011e31:	add    BYTE PTR [rax+rax*1+0x20],ah
 1011e35:	add    BYTE PTR [rip+0x20002d00],ch        # 0x21014b3b
 1011e3b:	add    BYTE PTR [rbp+0x0],dh
 1011e3e:	jae    0x1011e40
 1011e40:	imul   eax,DWORD PTR [rax],0x67006e
 1011e46:	and    BYTE PTR [rax],al
 1011e48:	jae    0x1011e4a
 1011e4a:	add    BYTE PTR gs:[rdx+0x0],dh
 1011e4e:	jbe    0x1011e50
 1011e50:	add    BYTE PTR gs:[rdx+0x0],dh
 1011e54:	and    BYTE PTR [rax],al
 1011e56:	add    BYTE PTR fs:[rbp+0x0],ah
 1011e5a:	data16 add BYTE PTR [rcx+0x0],ah
 1011e5e:	jne    0x1011e60
 1011e60:	ins    BYTE PTR es:[rdi],dx
 1011e61:	add    BYTE PTR [rax+rax*1+0x2e],dh
 1011e65:	add    BYTE PTR [rip+0x73004d00],bh        # 0x74016b6b
 1011e6b:	add    BYTE PTR [rdi+0x0],ah
 1011e6e:	and    BYTE PTR [rax],al
 1011e70:	and    eax,0x64006c00
 1011e75:	add    BYTE PTR [rax+rax*1],ch
 1011e78:	and    BYTE PTR [rax],al
 1011e7a:	rex.WR add BYTE PTR [rbp+0x0],r12b
 1011e7e:	jbe    0x1011e80
 1011e80:	add    BYTE PTR gs:[rax+rax*1+0x20],ch
 1011e85:	add    BYTE PTR [rip+0x2c006400],ah        # 0x2d01828b
 1011e8b:	add    BYTE PTR [rax],ah
 1011e8d:	add    BYTE PTR [rbx+0x0],dl
 1011e90:	je     0x1011e92
 1011e92:	(bad)  
 1011e93:	add    BYTE PTR [rax+rax*1+0x65],dh
 1011e97:	add    BYTE PTR [rax],ah
 1011e99:	add    BYTE PTR [rip+0x2c006400],ah        # 0x2d01829f
 1011e9f:	add    BYTE PTR [rax],ah
 1011ea1:	add    BYTE PTR [rbx+0x0],dl
 1011ea4:	add    BYTE PTR gs:[rdx+0x0],dh
 1011ea8:	jbe    0x1011eaa
 1011eaa:	add    BYTE PTR gs:[rdx+0x0],dh
 1011eae:	and    BYTE PTR [rax],al
 1011eb0:	and    eax,0x2c007300
 1011eb5:	add    BYTE PTR [rax],ah
 1011eb7:	add    BYTE PTR [rax+0x0],dl
 1011eba:	jb     0x1011ebc
 1011ebc:	outs   dx,DWORD PTR ds:[rsi]
 1011ebd:	add    BYTE PTR [rbx+0x0],ah
 1011ec0:	add    BYTE PTR gs:[rax+rax*1+0x75],ah
 1011ec5:	add    BYTE PTR [rdx+0x0],dh
 1011ec8:	add    BYTE PTR gs:[rax],ah
 1011ecb:	add    BYTE PTR [rip+0x2c007300],ah        # 0x2d0191d1
 1011ed1:	add    BYTE PTR [rax],ah
 1011ed3:	add    BYTE PTR [rax+rax*1+0x69],cl
 1011ed7:	add    BYTE PTR [rsi+0x0],ch
 1011eda:	add    BYTE PTR gs:[rax],ah
 1011edd:	add    BYTE PTR [rip+0x32006900],ah        # 0x330187e3
 1011ee3:	add    BYTE PTR [rbp+0x0],cl
 1011ee6:	jae    0x1011ee8
 1011ee8:	add    BYTE PTR [eax],ah
 1011eeb:	add    BYTE PTR [rip+0x64006c00],ah        # 0x65018af1
 1011ef1:	add    BYTE PTR [rax+rax*1],ch
 1011ef4:	and    BYTE PTR [rax],al
 1011ef6:	rex.WR add BYTE PTR [rbp+0x0],r12b
 1011efa:	jbe    0x1011efc
 1011efc:	add    BYTE PTR gs:[rax+rax*1+0x20],ch
 1011f01:	add    BYTE PTR [rip+0x2c006400],ah        # 0x2d018307
 1011f07:	add    BYTE PTR [rax],ah
 1011f09:	add    BYTE PTR [rbx+0x0],dl
 1011f0c:	je     0x1011f0e
 1011f0e:	(bad)  
 1011f0f:	add    BYTE PTR [rax+rax*1+0x65],dh
 1011f13:	add    BYTE PTR [rax],ah
 1011f15:	add    BYTE PTR [rip+0x2c006400],ah        # 0x2d01831b
 1011f1b:	add    BYTE PTR [rax],ah
 1011f1d:	add    BYTE PTR [rax+0x0],dl
 1011f20:	jb     0x1011f22
 1011f22:	outs   dx,DWORD PTR ds:[rsi]
 1011f23:	add    BYTE PTR [rbx+0x0],ah
 1011f26:	add    BYTE PTR gs:[rax+rax*1+0x75],ah
 1011f2b:	add    BYTE PTR [rdx+0x0],dh
 1011f2e:	add    BYTE PTR gs:[rax],ah
 1011f31:	add    BYTE PTR [rip+0x2c007300],ah        # 0x2d019237
 1011f37:	add    BYTE PTR [rax],ah
 1011f39:	add    BYTE PTR [rax+rax*1+0x69],cl
 1011f3d:	add    BYTE PTR [rsi+0x0],ch
 1011f40:	add    BYTE PTR gs:[rax],ah
 1011f43:	add    BYTE PTR [rip+0x2f006900],ah        # 0x30018849
 1011f49:	add    BYTE PTR [rbp+0x0],cl
 1011f4c:	jae    0x1011f4e
 1011f4e:	add    BYTE PTR [eax],ah
 1011f51:	add    BYTE PTR [rip+0x64006c00],ah        # 0x65018b57
 1011f57:	add    BYTE PTR [rax+rax*1],ch
 1011f5a:	and    BYTE PTR [rax],al
 1011f5c:	rex.WR add BYTE PTR [rbp+0x0],r12b
 1011f60:	jbe    0x1011f62
 1011f62:	add    BYTE PTR gs:[rax+rax*1+0x20],ch
 1011f67:	add    BYTE PTR [rip+0x2c006400],ah        # 0x2d01836d
 1011f6d:	add    BYTE PTR [rax],ah
 1011f6f:	add    BYTE PTR [rbx+0x0],dl
 1011f72:	je     0x1011f74
 1011f74:	(bad)  
 1011f75:	add    BYTE PTR [rax+rax*1+0x65],dh
 1011f79:	add    BYTE PTR [rax],ah
 1011f7b:	add    BYTE PTR [rip+0x2c006400],ah        # 0x2d018381
 1011f81:	add    BYTE PTR [rax],ah
 1011f83:	add    BYTE PTR [rbx+0x0],dl
 1011f86:	add    BYTE PTR gs:[rdx+0x0],dh
 1011f8a:	jbe    0x1011f8c
 1011f8c:	add    BYTE PTR gs:[rdx+0x0],dh
 1011f90:	and    BYTE PTR [rax],al
 1011f92:	and    eax,0x2c007300
 1011f97:	add    BYTE PTR [rax],ah
 1011f99:	add    BYTE PTR [rax+rax*1+0x69],cl
 1011f9d:	add    BYTE PTR [rsi+0x0],ch
 1011fa0:	add    BYTE PTR gs:[rax],ah
 1011fa3:	add    BYTE PTR [rip+0x24006900],ah        # 0x250188a9
 1011fa9:	add    BYTE PTR [rbp+0x0],cl
 1011fac:	jae    0x1011fae
 1011fae:	add    BYTE PTR [eax],ah
 1011fb1:	add    BYTE PTR [rip+0x64006c00],ah        # 0x65018bb7
 1011fb7:	add    BYTE PTR [rax+rax*1],ch
 1011fba:	and    BYTE PTR [rax],al
 1011fbc:	rex.WR add BYTE PTR [rbp+0x0],r12b
 1011fc0:	jbe    0x1011fc2
 1011fc2:	add    BYTE PTR gs:[rax+rax*1+0x20],ch
 1011fc7:	add    BYTE PTR [rip+0x2c006400],ah        # 0x2d0183cd
 1011fcd:	add    BYTE PTR [rax],ah
 1011fcf:	add    BYTE PTR [rbx+0x0],dl
 1011fd2:	je     0x1011fd4
 1011fd4:	(bad)  
 1011fd5:	add    BYTE PTR [rax+rax*1+0x65],dh
 1011fd9:	add    BYTE PTR [rax],ah
 1011fdb:	add    BYTE PTR [rip+0x2c006400],ah        # 0x2d0183e1
 1011fe1:	add    BYTE PTR [rax],ah
 1011fe3:	add    BYTE PTR [rax+rax*1+0x69],cl
 1011fe7:	add    BYTE PTR [rsi+0x0],ch
 1011fea:	add    BYTE PTR gs:[rax],ah
 1011fed:	add    BYTE PTR [rip+0x40006900],ah        # 0x410188f3
 1011ff3:	add    BYTE PTR [rbp+0x0],al
 1011ff6:	jb     0x1011ff8
 1011ff8:	jb     0x1011ffa
 1011ffa:	outs   dx,DWORD PTR ds:[rsi]
 1011ffb:	add    BYTE PTR [rdx+0x0],dh
 1011ffe:	cmp    al,BYTE PTR [rax]
 1012000:	and    BYTE PTR [rax],al
 1012002:	rex.WR add BYTE PTR [rdi+0x0],r13b
 1012006:	movsxd eax,DWORD PTR [rax]
 1012008:	(bad)  
 1012009:	add    BYTE PTR [rax+rax*1+0x65],ch
 101200d:	add    BYTE PTR [rax],ah
 101200f:	add    BYTE PTR [rdi+0x0],ch
 1012012:	jb     0x1012014
 1012014:	and    BYTE PTR [rax],al
 1012016:	rex.XB add BYTE PTR [r15+0x0],bpl
 101201a:	add    BYTE PTR fs:[rbp+0x0],ah
 101201e:	jo     0x1012020
 1012020:	(bad)  
 1012021:	add    BYTE PTR [rdi+0x0],ah
 1012024:	add    BYTE PTR gs:[rax],ah
 1012027:	add    BYTE PTR [rsi+0x0],ch
 101202a:	outs   dx,DWORD PTR ds:[rsi]
 101202b:	add    BYTE PTR [rax+rax*1+0x20],dh
 101202f:	add    BYTE PTR [rax+0x0],dh
 1012032:	jb     0x1012034
 1012034:	outs   dx,DWORD PTR ds:[rsi]
 1012035:	add    BYTE PTR [rax+0x0],dh
 1012038:	add    BYTE PTR gs:[rdx+0x0],dh
 101203c:	ins    BYTE PTR es:[rdi],dx
 101203d:	add    BYTE PTR [rcx+0x0],bh
 1012040:	and    BYTE PTR [rax],al
 1012042:	imul   eax,DWORD PTR [rax],0x73006e
 1012048:	je     0x101204a
 101204a:	(bad)  
 101204b:	add    BYTE PTR [rax+rax*1+0x6c],ch
 101204f:	add    BYTE PTR [rbp+0x0],ah
 1012052:	add    BYTE PTR fs:[rax],ah
 1012055:	add    BYTE PTR [rdi+0x0],ch
 1012058:	outs   dx,BYTE PTR ds:[rsi]
 1012059:	add    BYTE PTR [rax],ah
 101205b:	add    BYTE PTR [rax+rax*1+0x68],dh
 101205f:	add    BYTE PTR [rcx+0x0],ch
 1012062:	jae    0x1012064
 1012064:	and    BYTE PTR [rax],al
 1012066:	ins    DWORD PTR es:[rdi],dx
 1012067:	add    BYTE PTR [rcx+0x0],ah
 101206a:	movsxd eax,DWORD PTR [rax]
 101206c:	push   0x6e006900
 1012071:	add    BYTE PTR [rbp+0x0],ah
 1012074:	jae    0x1012076
 1012076:	and    BYTE PTR [rax],al
 1012078:	and    BYTE PTR [rax],al
 101207a:	and    BYTE PTR [rax],al
 101207c:	and    BYTE PTR [rax],al
 101207e:	and    BYTE PTR [rax],al
 1012080:	and    BYTE PTR [rax],al
 1012082:	add    BYTE PTR [r13+0x0],sil
 1012086:	je     0x1012088
 1012088:	outs   dx,DWORD PTR ds:[rsi]
 1012089:	add    BYTE PTR [rax],ah
 101208b:	add    BYTE PTR [rbx+0x0],ah
 101208e:	outs   dx,DWORD PTR ds:[rsi]
 101208f:	add    BYTE PTR [rsi+0x0],ch
 1012092:	jae    0x1012094
 1012094:	outs   dx,DWORD PTR ds:[rsi]
 1012095:	add    BYTE PTR [rax+rax*1+0x65],ch
 1012099:	add    BYTE PTR [rax],ah
 101209b:	add    BYTE PTR [rdi+0x0],dh
 101209e:	imul   eax,DWORD PTR [rax],0x740064
 10120a4:	push   0x73002000
 10120a9:	add    BYTE PTR [rbx+0x0],ah
 10120ac:	(bad)  
 10120ad:	add    BYTE PTR [rax+rax*1+0x69],ch
 10120b1:	add    BYTE PTR [rsi+0x0],ch
 10120b4:	add    BYTE PTR [edx],cl
 10120b7:	add    BYTE PTR [rax],ah
 10120b9:	add    BYTE PTR [rax],ah
 10120bb:	add    BYTE PTR [rax],ah
 10120bd:	add    BYTE PTR [rax],ah
 10120bf:	add    BYTE PTR [rax],ah
 10120c1:	add    BYTE PTR [rax],ah
 10120c3:	add    BYTE PTR [rdi+0x0],dl
 10120c6:	imul   eax,DWORD PTR [rax],0x650064
 10120cc:	and    BYTE PTR [rax],al
 10120ce:	ins    DWORD PTR es:[rdi],dx
 10120cf:	add    BYTE PTR [rbp+0x0],ah
 10120d2:	jae    0x10120d4
 10120d4:	jae    0x10120d6
 10120d6:	(bad)  
 10120d7:	add    BYTE PTR [rdi+0x0],ah
 10120da:	add    BYTE PTR gs:[rbx+0x0],dh
 10120de:	or     al,BYTE PTR [rax]
 10120e0:	and    BYTE PTR [rax],al
 10120e2:	and    BYTE PTR [rax],al
 10120e4:	and    BYTE PTR [rax],al
 10120e6:	and    BYTE PTR [rax],al
 10120e8:	and    BYTE PTR [rax],al
 10120ea:	and    BYTE PTR [rax],al
 10120ec:	add    BYTE PTR fs:[rbp+0x0],ah
 10120f0:	data16 add BYTE PTR [rcx+0x0],ah
 10120f4:	jne    0x10120f6
 10120f6:	ins    BYTE PTR es:[rdi],dx
 10120f7:	add    BYTE PTR [rax+rax*1+0x20],dh
 10120fb:	add    BYTE PTR [rbp+0x0],ah
 10120fe:	jb     0x1012100
 1012100:	jb     0x1012102
 1012102:	outs   dx,DWORD PTR ds:[rsi]
 1012103:	add    BYTE PTR [rdx+0x0],dh
 1012106:	ins    BYTE PTR es:[rdi],dx
 1012107:	add    BYTE PTR [rbp+0x0],ah
 101210a:	jbe    0x101210c
 101210c:	add    BYTE PTR gs:[rax+rax*1+0x20],ch
 1012111:	add    BYTE PTR [rcx+0x0],ch
 1012114:	jae    0x1012116
 1012116:	and    BYTE PTR [rax],al
 1012118:	sub    eax,0x20003100
 101211d:	add    BYTE PTR [rsi+0x0],dh
 1012120:	jae    0x1012122
 1012122:	and    BYTE PTR [rax],al
 1012124:	xor    DWORD PTR [rax],eax
 1012126:	or     al,BYTE PTR [rax]
 1012128:	and    BYTE PTR [rax],al
 101212a:	and    BYTE PTR [rax],al
 101212c:	pop    rbx
 101212d:	add    BYTE PTR [rip+0x20003f00],ch        # 0x21016033
 1012133:	add    BYTE PTR [rbx+0x0],dh
 1012136:	push   0x77006f00
 101213b:	add    BYTE PTR [rax],ah
 101213d:	add    BYTE PTR [rbx+0x0],dh
 1012140:	jns    0x1012142
 1012142:	outs   dx,BYTE PTR ds:[rsi]
 1012143:	add    BYTE PTR [rax+rax*1+0x61],dh
 1012147:	add    BYTE PTR [rax+0x0],bh
 101214a:	and    BYTE PTR [rax],al
 101214c:	jae    0x101214e
 101214e:	jne    0x1012150
 1012150:	ins    DWORD PTR es:[rdi],dx
 1012151:	add    BYTE PTR [rbp+0x0],ch
 1012154:	(bad)  
 1012155:	add    BYTE PTR [rdx+0x0],dh
 1012158:	jns    0x101215a
 101215a:	pop    rbp
 101215b:	add    BYTE PTR [rsi],cl
 101215d:	add    BYTE PTR [rdi+0x0],cl
 1012160:	push   rbx
 1012161:	add    BYTE PTR [rax],ah
 1012163:	add    BYTE PTR [rbp+0x0],al
 1012166:	jb     0x1012168
 1012168:	jb     0x101216a
 101216a:	outs   dx,DWORD PTR ds:[rsi]
 101216b:	add    BYTE PTR [rdx+0x0],dh
 101216e:	and    BYTE PTR [rax],al
 1012170:	and    eax,0x20006400
 1012175:	add    BYTE PTR [rip+0x45007300],ah        # 0x4601947b
 101217b:	add    BYTE PTR [rax+rax*1+0x68],dl
 101217f:	add    BYTE PTR [rbp+0x0],ah
 1012182:	and    BYTE PTR [rax],al
 1012184:	sub    eax,0x20004c00
 1012189:	add    BYTE PTR [rax+0x0],dh
 101218c:	(bad)  
 101218d:	add    BYTE PTR [rdx+0x0],dh
 1012190:	(bad)  
 1012191:	add    BYTE PTR [rbp+0x0],ch
 1012194:	add    BYTE PTR gs:[rax+rax*1+0x65],dh
 1012199:	add    BYTE PTR [rdx+0x0],dh
 101219c:	and    BYTE PTR [rax],al
 101219e:	movsxd eax,DWORD PTR [rax]
 10121a0:	(bad)  
 10121a1:	add    BYTE PTR [rsi+0x0],ch
 10121a4:	outs   dx,BYTE PTR ds:[rsi]
 10121a5:	add    BYTE PTR [rdi+0x0],ch
 10121a8:	je     0x10121aa
 10121aa:	and    BYTE PTR [rax],al
 10121ac:	(bad)  
 10121ad:	add    BYTE PTR [rbp+0x0],ah
 10121b0:	and    BYTE PTR [rax],al
 10121b2:	jne    0x10121b4
 10121b4:	jae    0x10121b6
 10121b6:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 10121bb:	add    BYTE PTR [rcx+0x0],ch
 10121be:	outs   dx,BYTE PTR ds:[rsi]
 10121bf:	add    BYTE PTR [rax],ah
 10121c1:	add    BYTE PTR [rbx+0x0],ah
 10121c4:	outs   dx,DWORD PTR ds:[rsi]
 10121c5:	add    BYTE PTR [rbp+0x0],ch
 10121c8:	(bad)  
 10121c9:	add    BYTE PTR [rcx+0x0],ch
 10121cc:	outs   dx,BYTE PTR ds:[rsi]
 10121cd:	add    BYTE PTR [rcx+0x0],ah
 10121d0:	je     0x10121d2
 10121d2:	imul   eax,DWORD PTR [rax],0x6e006f
 10121d8:	and    BYTE PTR [rax],al
 10121da:	ja     0x10121dc
 10121dc:	imul   eax,DWORD PTR [rax],0x680074
 10121e2:	and    BYTE PTR [rax],al
 10121e4:	outs   dx,DWORD PTR ds:[rsi]
 10121e5:	add    BYTE PTR [rax+rax*1+0x68],dh
 10121e9:	add    BYTE PTR [rbp+0x0],ah
 10121ec:	jb     0x10121ee
 10121ee:	and    BYTE PTR [rax],al
 10121f0:	jo     0x10121f2
 10121f2:	(bad)  
 10121f3:	add    BYTE PTR [rdx+0x0],dh
 10121f6:	(bad)  
 10121f7:	add    BYTE PTR [rbp+0x0],ch
 10121fa:	add    BYTE PTR gs:[rax+rax*1+0x65],dh
 10121ff:	add    BYTE PTR [rdx+0x0],dh
 1012202:	jae    0x1012204
 1012204:	add    BYTE PTR cs:[rbx],dh
 1012207:	add    BYTE PTR [rdi+0x0],dl
 101220a:	(bad)  
 101220b:	add    BYTE PTR [rdx+0x0],dh
 101220e:	outs   dx,BYTE PTR ds:[rsi]
 101220f:	add    BYTE PTR [rcx+0x0],ch
 1012212:	outs   dx,BYTE PTR ds:[rsi]
 1012213:	add    BYTE PTR [rdi+0x0],ah
 1012216:	cmp    al,BYTE PTR [rax]
 1012218:	and    BYTE PTR [rax],al
 101221a:	push   rbx
 101221b:	add    BYTE PTR [rbp+0x0],ah
 101221e:	jb     0x1012220
 1012220:	jbe    0x1012222
 1012222:	add    BYTE PTR gs:[rdx+0x0],dh
 1012226:	and    BYTE PTR [rax],al
 1012228:	ins    BYTE PTR es:[rdi],dx
 1012229:	add    BYTE PTR [rcx+0x0],ch
 101222c:	jae    0x101222e
 101222e:	je     0x1012230
 1012230:	and    BYTE PTR [rax],al
 1012232:	imul   eax,DWORD PTR [rax],0x200073
 1012238:	je     0x101223a
 101223a:	jb     0x101223c
 101223c:	jne    0x101223e
 101223e:	outs   dx,BYTE PTR ds:[rsi]
 101223f:	add    BYTE PTR [rbx+0x0],ah
 1012242:	(bad)  
 1012243:	add    BYTE PTR [rax+rax*1+0x65],dh
 1012247:	add    BYTE PTR [rax+rax*1+0x2c],ah
 101224b:	add    BYTE PTR [rax],ah
 101224d:	add    BYTE PTR [rax+rax*1+0x61],ch
 1012251:	add    BYTE PTR [rdx+0x0],dh
 1012254:	add    BYTE PTR [ebp+0x0],ah
 1012258:	jb     0x101225a
 101225a:	and    BYTE PTR [rax],al
 101225c:	je     0x101225e
 101225e:	push   0x6e006500
 1012263:	add    BYTE PTR [rax],ah
 1012265:	add    BYTE PTR [rbx],dh
 1012267:	add    BYTE PTR [rdx],dh
 1012269:	add    BYTE PTR [rbx+0x0],cl
 101226c:	add    BYTE PTR cs:[rip+0x72004500],ah        # 0x73016773
 1012273:	add    BYTE PTR [rdx+0x0],dh
 1012276:	outs   dx,DWORD PTR ds:[rsi]
 1012277:	add    BYTE PTR [rdx+0x0],dh
 101227a:	cmp    al,BYTE PTR [rax]
 101227c:	and    BYTE PTR [rax],al
 101227e:	rex.WB add BYTE PTR [r14+0x0],bpl
 1012282:	jbe    0x1012284
 1012284:	(bad)  
 1012285:	add    BYTE PTR [rax+rax*1+0x69],ch
 1012289:	add    BYTE PTR [rax+rax*1+0x20],ah
 101228d:	add    BYTE PTR [rbp+0x0],dh
 1012290:	jae    0x1012292
 1012292:	(bad)  
 1012293:	add    BYTE PTR [rdi+0x0],ah
 1012296:	add    BYTE PTR gs:[rax],ah
 1012299:	add    BYTE PTR [rdi+0x0],ch
 101229c:	data16 add BYTE PTR [rax],ah
 101229f:	add    BYTE PTR [rax+0x0],dh
 10122a2:	(bad)  
 10122a3:	add    BYTE PTR [rdx+0x0],dh
 10122a6:	(bad)  
 10122a7:	add    BYTE PTR [rbp+0x0],ch
 10122aa:	add    BYTE PTR gs:[rax+rax*1+0x65],dh
 10122af:	add    BYTE PTR [rdx+0x0],dh
 10122b2:	and    BYTE PTR [rax],al
 10122b4:	and    eax,0x2e007300
 10122b9:	add    BYTE PTR [rbx],dh
 10122bb:	add    BYTE PTR [rbp+0x0],al
 10122be:	jb     0x10122c0
 10122c0:	jb     0x10122c2
 10122c2:	outs   dx,DWORD PTR ds:[rsi]
 10122c3:	add    BYTE PTR [rdx+0x0],dh
 10122c6:	cmp    al,BYTE PTR [rax]
 10122c8:	and    BYTE PTR [rax],al
 10122ca:	rex.WRX add BYTE PTR [rdi+0x0],r13b
 10122ce:	and    BYTE PTR [rax],al
 10122d0:	jne    0x10122d2
 10122d2:	jae    0x10122d4
 10122d4:	add    BYTE PTR gs:[rdx+0x0],dh
 10122d8:	and    BYTE PTR [rax],al
 10122da:	jae    0x10122dc
 10122dc:	add    BYTE PTR gs:[rax+rax*1+0x65],ch
 10122e1:	add    BYTE PTR [rbx+0x0],ah
 10122e4:	je     0x10122e6
 10122e6:	add    BYTE PTR gs:[rax+rax*1+0x2e],ah
 10122eb:	add    BYTE PTR [rax],ah
 10122ed:	add    BYTE PTR [rax+rax*1+0x72],dl
 10122f1:	add    BYTE PTR [rcx+0x0],bh
 10122f4:	and    BYTE PTR [rax],al
 10122f6:	ja     0x10122f8
 10122f8:	imul   eax,DWORD PTR [rax],0x680074
 10122fe:	and    BYTE PTR [rax],al
 1012300:	sub    eax,0x20005500
 1012305:	add    BYTE PTR [rdi+0x0],ch
 1012308:	jb     0x101230a
 101230a:	and    BYTE PTR [rax],al
 101230c:	sub    eax,0x20004500
 1012311:	add    BYTE PTR [rbx+0x0],dh
 1012314:	ja     0x1012316
 1012316:	imul   eax,DWORD PTR [rax],0x630074
 101231c:	push   0x73006500
 1012321:	add    BYTE PTR [rax],ch
 1012323:	add    BYTE PTR [rbp+0x0],al
 1012326:	jb     0x1012328
 1012328:	jb     0x101232a
 101232a:	outs   dx,DWORD PTR ds:[rsi]
 101232b:	add    BYTE PTR [rdx+0x0],dh
 101232e:	cmp    al,BYTE PTR [rax]
 1012330:	and    BYTE PTR [rax],al
 1012332:	rex.XB add BYTE PTR [r15+0x0],bpl
 1012336:	outs   dx,BYTE PTR ds:[rsi]
 1012337:	add    BYTE PTR [rsi+0x0],ah
 101233a:	ins    BYTE PTR es:[rdi],dx
 101233b:	add    BYTE PTR [rcx+0x0],ch
 101233e:	movsxd eax,DWORD PTR [rax]
 1012340:	je     0x1012342
 1012342:	imul   eax,DWORD PTR [rax],0x67006e
 1012348:	and    BYTE PTR [rax],al
 101234a:	jae    0x101234c
 101234c:	ja     0x101234e
 101234e:	imul   eax,DWORD PTR [rax],0x630074
 1012354:	push   0x73006500
 1012359:	add    BYTE PTR [rax],ah
 101235b:	add    BYTE PTR [rdx],bh
 101235d:	add    BYTE PTR [rax],ah
 101235f:	add    BYTE PTR [rip+0x20005500],ch        # 0x21017865
 1012365:	add    BYTE PTR [rcx+0x0],ah
 1012368:	outs   dx,BYTE PTR ds:[rsi]
 1012369:	add    BYTE PTR [rax+rax*1+0x20],ah
 101236d:	add    BYTE PTR [rip+0x20004500],ch        # 0x21016873
 1012373:	add    BYTE PTR [rax],ch
 1012375:	add    BYTE PTR [rbp+0x0],al
 1012378:	jb     0x101237a
 101237a:	jb     0x101237c
 101237c:	outs   dx,DWORD PTR ds:[rsi]
 101237d:	add    BYTE PTR [rdx+0x0],dh
 1012380:	cmp    al,BYTE PTR [rax]
 1012382:	and    BYTE PTR [rax],al
 1012384:	rex.XB add BYTE PTR [r15+0x0],bpl
 1012388:	outs   dx,BYTE PTR ds:[rsi]
 1012389:	add    BYTE PTR [rsi+0x0],ah
 101238c:	ins    BYTE PTR es:[rdi],dx
 101238d:	add    BYTE PTR [rcx+0x0],ch
 1012390:	movsxd eax,DWORD PTR [rax]
 1012392:	je     0x1012394
 1012394:	imul   eax,DWORD PTR [rax],0x67006e
 101239a:	and    BYTE PTR [rax],al
 101239c:	jae    0x101239e
 101239e:	ja     0x10123a0
 10123a0:	imul   eax,DWORD PTR [rax],0x630074
 10123a6:	push   0x73006500
 10123ab:	add    BYTE PTR [rax],ah
 10123ad:	add    BYTE PTR [rdx],bh
 10123af:	add    BYTE PTR [rax],ah
 10123b1:	add    BYTE PTR [rip+0x20004500],ch        # 0x210168b7
 10123b7:	add    BYTE PTR [rcx+0x0],ah
 10123ba:	outs   dx,BYTE PTR ds:[rsi]
 10123bb:	add    BYTE PTR [rax+rax*1+0x20],ah
 10123bf:	add    BYTE PTR [rip+0x20005000],ch        # 0x210173c5
 10123c5:	add    BYTE PTR [rsi],bl
 10123c7:	add    BYTE PTR [rbp+0x0],al
 10123ca:	jb     0x10123cc
 10123cc:	jb     0x10123ce
 10123ce:	outs   dx,DWORD PTR ds:[rsi]
 10123cf:	add    BYTE PTR [rdx+0x0],dh
 10123d2:	cmp    al,BYTE PTR [rax]
 10123d4:	and    BYTE PTR [rax],al
 10123d6:	imul   eax,DWORD PTR [rax],0x70006e
 10123dc:	jne    0x10123de
 10123de:	je     0x10123e0
 10123e0:	and    BYTE PTR [rax],al
 10123e2:	jno    0x10123e4
 10123e4:	jne    0x10123e6
 10123e6:	add    BYTE PTR gs:[rdx+0x0],dh
 10123ea:	jns    0x10123ec
 10123ec:	and    BYTE PTR [rax],al
 10123ee:	imul   eax,DWORD PTR [rax],0x200073
 10123f4:	je     0x10123f6
 10123f6:	outs   dx,DWORD PTR ds:[rsi]
 10123f7:	add    BYTE PTR [rdi+0x0],ch
 10123fa:	and    BYTE PTR [rax],al
 10123fc:	ins    BYTE PTR es:[rdi],dx
 10123fd:	add    BYTE PTR [rdi+0x0],ch
 1012400:	outs   dx,BYTE PTR ds:[rsi]
 1012401:	add    BYTE PTR [rdi+0x0],ah
 1012404:	and    DWORD PTR [rax],eax
 1012406:	add    BYTE PTR [r10+0x0],r14b
 101240a:	jb     0x101240c
 101240c:	outs   dx,DWORD PTR ds:[rsi]
 101240d:	add    BYTE PTR [rdx+0x0],dh
 1012410:	cmp    al,BYTE PTR [rax]
 1012412:	and    BYTE PTR [rax],al
 1012414:	sub    eax,0x3a005800
 1012419:	add    BYTE PTR [rax],ah
 101241b:	add    BYTE PTR [rcx+0x0],cl
 101241e:	outs   dx,BYTE PTR ds:[rsi]
 101241f:	add    BYTE PTR [rsi+0x0],dh
 1012422:	(bad)  
 1012423:	add    BYTE PTR [rax+rax*1+0x69],ch
 1012427:	add    BYTE PTR [rax+rax*1+0x20],ah
 101242b:	add    BYTE PTR [rcx+0x0],ah
 101242e:	jb     0x1012430
 1012430:	add    BYTE PTR [ebp+0x0],dh
 1012434:	ins    DWORD PTR es:[rdi],dx
 1012435:	add    BYTE PTR [rbp+0x0],ah
 1012438:	outs   dx,BYTE PTR ds:[rsi]
 1012439:	add    BYTE PTR [rax+rax*1+0x20],dh
 101243d:	add    BYTE PTR [rdi],ah
 101243f:	add    BYTE PTR [rip+0x27006400],ah        # 0x28018845
 1012445:	add    BYTE PTR [rsi],ch
 1012447:	add    BYTE PTR [rbx+0x72004500],al
 101244d:	add    BYTE PTR [rdx+0x0],dh
 1012450:	outs   dx,DWORD PTR ds:[rsi]
 1012451:	add    BYTE PTR [rdx+0x0],dh
 1012454:	cmp    al,BYTE PTR [rax]
 1012456:	and    BYTE PTR [rax],al
 1012458:	and    BYTE PTR [rax],al
 101245a:	push   rsp
 101245b:	add    BYTE PTR [rax+0x0],ch
 101245e:	add    BYTE PTR gs:[rax],ah
 1012461:	add    BYTE PTR [rbp+0x0],al
 1012464:	add    BYTE PTR [rax],r12b
 1012467:	add    BYTE PTR [rcx+0x0],ah
 101246a:	outs   dx,BYTE PTR ds:[rsi]
 101246b:	add    BYTE PTR [rax+rax*1+0x20],ah
 101246f:	add    BYTE PTR [rcx],ah
 1012471:	add    BYTE PTR [rcx],ah
 1012473:	add    BYTE PTR [rax+rax*1],bh
 1012476:	movsxd eax,DWORD PTR [rax]
 1012478:	outs   dx,DWORD PTR ds:[rsi]
 1012479:	add    BYTE PTR [rbp+0x0],ch
 101247c:	ins    DWORD PTR es:[rdi],dx
 101247d:	add    BYTE PTR [rcx+0x0],ah
 1012480:	outs   dx,BYTE PTR ds:[rsi]
 1012481:	add    BYTE PTR [rax+rax*1+0x3e],ah
 1012485:	add    BYTE PTR [rax],ah
 1012487:	add    BYTE PTR [rbx+0x0],ah
 101248a:	outs   dx,DWORD PTR ds:[rsi]
 101248b:	add    BYTE PTR [rbp+0x0],ch
 101248e:	ins    DWORD PTR es:[rdi],dx
 101248f:	add    BYTE PTR [rcx+0x0],ah
 1012492:	outs   dx,BYTE PTR ds:[rsi]
 1012493:	add    BYTE PTR [rax+rax*1+0x73],ah
 1012497:	add    BYTE PTR [rax],ah
 1012499:	add    BYTE PTR [rcx+0x0],ah
 101249c:	jb     0x101249e
 101249e:	add    BYTE PTR gs:[rax],ah
 10124a1:	add    BYTE PTR [rsi+0x0],ch
 10124a4:	outs   dx,DWORD PTR ds:[rsi]
 10124a5:	add    BYTE PTR [rax+rax*1+0x20],dh
 10124a9:	add    BYTE PTR [rbx+0x0],dh
 10124ac:	jne    0x10124ae
 10124ae:	jo     0x10124b0
 10124b0:	jo     0x10124b2
 10124b2:	outs   dx,DWORD PTR ds:[rsi]
 10124b3:	add    BYTE PTR [rdx+0x0],dh
 10124b6:	je     0x10124b8
 10124b8:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 10124bd:	add    BYTE PTR [rcx+0x0],ch
 10124c0:	outs   dx,BYTE PTR ds:[rsi]
 10124c1:	add    BYTE PTR [rax],ah
 10124c3:	add    BYTE PTR [rdi+0x0],ch
 10124c6:	jae    0x10124c8
 10124c8:	jno    0x10124ca
 10124ca:	ins    BYTE PTR es:[rdi],dx
 10124cb:	add    BYTE PTR [rax],ah
 10124cd:	add    BYTE PTR [rsi+0x0],ah
 10124d0:	outs   dx,DWORD PTR ds:[rsi]
 10124d1:	add    BYTE PTR [rdx+0x0],dh
 10124d4:	and    BYTE PTR [rax],al
 10124d6:	push   rbx
 10124d7:	add    BYTE PTR [rcx+0x0],dl
 10124da:	rex.WR add BYTE PTR [rax],r12b
 10124dd:	add    BYTE PTR [rbx+0x0],dl
 10124e0:	add    BYTE PTR gs:[rdx+0x0],dh
 10124e4:	jbe    0x10124e6
 10124e6:	add    BYTE PTR gs:[rdx+0x0],dh
 10124ea:	and    BYTE PTR [rax],al
 10124ec:	xor    al,BYTE PTR [rax]
 10124ee:	xor    BYTE PTR [rax],al
 10124f0:	xor    BYTE PTR [rax],al
 10124f2:	xor    eax,0x6f002000
 10124f7:	add    BYTE PTR [rdx+0x0],dh
 10124fa:	and    BYTE PTR [rax],al
 10124fc:	ins    BYTE PTR es:[rdi],dx
 10124fd:	add    BYTE PTR [rcx+0x0],ah
 1012500:	je     0x1012502
 1012502:	add    BYTE PTR gs:[rdx+0x0],dh
 1012506:	add    BYTE PTR cs:[rax],ah
 1012509:	add    BYTE PTR [rax],ah
 101250b:	add    BYTE PTR [rbx+0x0],al
 101250e:	outs   dx,DWORD PTR ds:[rsi]
 101250f:	add    BYTE PTR [rsi+0x0],ch
 1012512:	jae    0x1012514
 1012514:	imul   eax,DWORD PTR [rax],0x650064
 101251a:	jb     0x101251c
 101251c:	and    BYTE PTR [rax],al
 101251e:	jne    0x1012520
 1012520:	jae    0x1012522
 1012522:	imul   eax,DWORD PTR [rax],0x67006e
 1012528:	and    BYTE PTR [rax],al
 101252a:	jae    0x101252c
 101252c:	jno    0x101252e
 101252e:	ins    BYTE PTR es:[rdi],dx
 101252f:	add    BYTE PTR [rbx+0x0],ah
 1012532:	ins    DWORD PTR es:[rdi],dx
 1012533:	add    BYTE PTR [rax+rax*1+0x2e],ah
 1012537:	add    BYTE PTR [rbp+0x0],ah
 101253a:	js     0x101253c
 101253c:	add    BYTE PTR gs:[rax],ah
 101253f:	add    BYTE PTR [rcx+0x0],ch
 1012542:	outs   dx,BYTE PTR ds:[rsi]
 1012543:	add    BYTE PTR [rbx+0x0],dh
 1012546:	je     0x1012548
 1012548:	add    BYTE PTR gs:[rcx+0x0],ah
 101254c:	add    BYTE PTR fs:[rsi],ch
 101254f:	add    BYTE PTR [rdx],dh
 1012551:	add    BYTE PTR [rax],ah
 1012553:	add    BYTE PTR [rax],ah
 1012555:	add    BYTE PTR [rbx+0x0],bl
 1012558:	sub    eax,0x20007000
 101255d:	add    BYTE PTR [rax+0x0],dh
 1012560:	jb     0x1012562
 1012562:	imul   eax,DWORD PTR [rax],0x74006e
 1012568:	and    BYTE PTR [rax],al
 101256a:	jae    0x101256c
 101256c:	je     0x101256e
 101256e:	(bad)  
 101256f:	add    BYTE PTR [rax+rax*1+0x69],dh
 1012573:	add    BYTE PTR [rbx+0x0],dh
 1012576:	je     0x1012578
 1012578:	imul   eax,DWORD PTR [rax],0x730063
 101257e:	pop    rbp
 101257f:	add    BYTE PTR [rax],ah
 1012581:	add    BYTE PTR [rax],ah
 1012583:	add    BYTE PTR [rbx+0x0],bl
 1012586:	sub    eax,0x20006200
 101258b:	add    BYTE PTR [rdi+0x0],cl
 101258e:	outs   dx,BYTE PTR ds:[rsi]
 101258f:	add    BYTE PTR [rax],ah
 1012591:	add    BYTE PTR [rbp+0x0],ah
 1012594:	jb     0x1012596
 1012596:	jb     0x1012598
 1012598:	outs   dx,DWORD PTR ds:[rsi]
 1012599:	add    BYTE PTR [rdx+0x0],dh
 101259c:	and    BYTE PTR [rax],al
 101259e:	(bad)  
 101259f:	add    BYTE PTR [rcx+0x0],ah
 10125a2:	je     0x10125a4
 10125a4:	movsxd eax,DWORD PTR [rax]
 10125a6:	push   0x61002000
 10125ab:	add    BYTE PTR [rdx+0x0],ah
 10125ae:	outs   dx,DWORD PTR ds:[rsi]
 10125af:	add    BYTE PTR [rdx+0x0],dh
 10125b2:	je     0x10125b4
 10125b4:	pop    rbp
 10125b5:	add    BYTE PTR [rdx],ch
 10125b7:	add    BYTE PTR [rbp+0x0],cl
 10125ba:	imul   eax,DWORD PTR [rax],0x720063
 10125c0:	outs   dx,DWORD PTR ds:[rsi]
 10125c1:	add    BYTE PTR [rbx+0x0],dh
 10125c4:	outs   dx,DWORD PTR ds:[rsi]
 10125c5:	add    BYTE PTR [rsi+0x0],ah
 10125c8:	je     0x10125ca
 10125ca:	and    BYTE PTR [rax],al
 10125cc:	sub    BYTE PTR [rax],al
 10125ce:	push   rdx
 10125cf:	add    BYTE PTR [rcx],ch
 10125d1:	add    BYTE PTR [rax],ah
 10125d3:	add    BYTE PTR [rbx+0x0],dl
 10125d6:	push   rcx
 10125d7:	add    BYTE PTR [rax+rax*1+0x20],cl
 10125db:	add    BYTE PTR [rbx+0x0],dl
 10125de:	add    BYTE PTR gs:[rdx+0x0],dh
 10125e2:	jbe    0x10125e4
 10125e4:	add    BYTE PTR gs:[rdx+0x0],dh
 10125e8:	and    BYTE PTR [rax],al
 10125ea:	rex.XB add BYTE PTR [r15+0x0],bpl
 10125ee:	ins    DWORD PTR es:[rdi],dx
 10125ef:	add    BYTE PTR [rbp+0x0],ch
 10125f2:	(bad)  
 10125f3:	add    BYTE PTR [rsi+0x0],ch
 10125f6:	add    BYTE PTR fs:[rax],ah
 10125f9:	add    BYTE PTR [rax+rax*1+0x69],cl
 10125fd:	add    BYTE PTR [rsi+0x0],ch
 1012600:	add    BYTE PTR gs:[rax],ah
 1012603:	add    BYTE PTR [rax+rax*1+0x6f],dl
 1012607:	add    BYTE PTR [rdi+0x0],ch
 101260a:	ins    BYTE PTR es:[rdi],dx
 101260b:	add    BYTE PTR [rax],cl
 101260d:	add    BYTE PTR [rsi+0x0],dl
 1012610:	add    BYTE PTR gs:[rdx+0x0],dh
 1012614:	jae    0x1012616
 1012616:	imul   eax,DWORD PTR [rax],0x6e006f
 101261c:	and    BYTE PTR [rax],al
 101261e:	xor    BYTE PTR [rax],al
 1012620:	or     al,BYTE PTR [rax]
 1012622:	rex.XB add BYTE PTR [r15+0x0],bpl
 1012626:	jo     0x1012628
 1012628:	jns    0x101262a
 101262a:	jb     0x101262c
 101262c:	imul   eax,DWORD PTR [rax],0x680067
 1012632:	je     0x1012634
 1012634:	and    BYTE PTR [rax],al
 1012636:	sub    BYTE PTR [rax],al
 1012638:	movsxd eax,DWORD PTR [rax]
 101263a:	sub    DWORD PTR [rax],eax
 101263c:	and    BYTE PTR [rax],al
 101263e:	rex.WRB add BYTE PTR [r9+0x0],r13b
 1012642:	movsxd eax,DWORD PTR [rax]
 1012644:	jb     0x1012646
 1012646:	outs   dx,DWORD PTR ds:[rsi]
 1012647:	add    BYTE PTR [rbx+0x0],dh
 101264a:	outs   dx,DWORD PTR ds:[rsi]
 101264b:	add    BYTE PTR [rsi+0x0],ah
 101264e:	je     0x1012650
 1012650:	add    BYTE PTR cs:[rax],ah
 1012653:	add    BYTE PTR [rax],ah
 1012655:	add    BYTE PTR [rcx+0x0],al
 1012658:	ins    BYTE PTR es:[rdi],dx
 1012659:	add    BYTE PTR [rax+rax*1+0x20],ch
 101265d:	add    BYTE PTR [rdx+0x0],dh
 1012660:	imul   eax,DWORD PTR [rax],0x680067
 1012666:	je     0x1012668
 1012668:	jae    0x101266a
 101266a:	and    BYTE PTR [rax],al
 101266c:	jb     0x101266e
 101266e:	add    BYTE PTR gs:[rbx+0x0],dh
 1012672:	add    BYTE PTR gs:[rdx+0x0],dh
 1012676:	jbe    0x1012678
 1012678:	add    BYTE PTR gs:[rax+rax*1+0x2e],ah
 101267d:	add    BYTE PTR [rdx],cl
 101267f:	add    BYTE PTR [rax+rax*1],ch
 1012682:	rex.WRX add BYTE PTR [rdi+0x0],r13b
 1012686:	je     0x1012688
 1012688:	add    BYTE PTR gs:[rdx],bh
 101268b:	add    BYTE PTR [rax],ah
 101268d:	add    BYTE PTR [rdi+0x0],ch
 1012690:	jae    0x1012692
 1012692:	jno    0x1012694
 1012694:	ins    BYTE PTR es:[rdi],dx
 1012695:	add    BYTE PTR [rax],ah
 1012697:	add    BYTE PTR [rax+rax*1+0x6f],ah
 101269b:	add    BYTE PTR [rbp+0x0],ah
 101269e:	jae    0x10126a0
 10126a0:	and    BYTE PTR [rax],al
 10126a2:	outs   dx,BYTE PTR ds:[rsi]
 10126a3:	add    BYTE PTR [rdi+0x0],ch
 10126a6:	je     0x10126a8
 10126a8:	and    BYTE PTR [rax],al
 10126aa:	jae    0x10126ac
 10126ac:	jne    0x10126ae
 10126ae:	jo     0x10126b0
 10126b0:	jo     0x10126b2
 10126b2:	outs   dx,DWORD PTR ds:[rsi]
 10126b3:	add    BYTE PTR [rdx+0x0],dh
 10126b6:	je     0x10126b8
 10126b8:	and    BYTE PTR [rax],al
 10126ba:	(bad)  
 10126bb:	add    BYTE PTR [rax+rax*1+0x6c],ch
 10126bf:	add    BYTE PTR [rax],ah
 10126c1:	add    BYTE PTR [rsi+0x0],ah
 10126c4:	add    BYTE PTR gs:[rcx+0x0],ah
 10126c8:	je     0x10126ca
 10126ca:	jne    0x10126cc
 10126cc:	jb     0x10126ce
 10126ce:	add    BYTE PTR gs:[rbx+0x0],dh
 10126d2:	and    BYTE PTR [rax],al
 10126d4:	outs   dx,DWORD PTR ds:[rsi]
 10126d5:	add    BYTE PTR [rsi+0x0],ah
 10126d8:	and    BYTE PTR [rax],al
 10126da:	(bad)  
 10126db:	add    BYTE PTR [rsi],ch
 10126dd:	add    BYTE PTR [rdx],cl
 10126df:	add    BYTE PTR [rbp+0x0],dl
 10126e2:	jae    0x10126e4
 10126e4:	add    BYTE PTR gs:[rax],ah
 10126e7:	add    BYTE PTR [rbx+0x0],dh
 10126ea:	jno    0x10126ec
 10126ec:	ins    BYTE PTR es:[rdi],dx
 10126ed:	add    BYTE PTR [rbx+0x0],ah
 10126f0:	ins    DWORD PTR es:[rdi],dx
 10126f1:	add    BYTE PTR [rax+rax*1+0x20],ah
 10126f5:	add    BYTE PTR [rcx+0x0],ch
 10126f8:	outs   dx,BYTE PTR ds:[rsi]
 10126f9:	add    BYTE PTR [rbx+0x0],dh
 10126fc:	je     0x10126fe
 10126fe:	add    BYTE PTR gs:[rcx+0x0],ah
 1012702:	add    BYTE PTR fs:[rsi],ch
 1012705:	add    BYTE PTR [rax],ah
 1012707:	add    BYTE PTR [rbx+0x0],dl
 101270a:	add    BYTE PTR gs:[rbp+0x0],ah
 101270e:	and    BYTE PTR [rax],al
 1012710:	push   rbx
 1012711:	add    BYTE PTR [rcx+0x0],dl
 1012714:	rex.WR add BYTE PTR [rax],r12b
 1012717:	add    BYTE PTR [rbx+0x0],dl
 101271a:	add    BYTE PTR gs:[rdx+0x0],dh
 101271e:	jbe    0x1012720
 1012720:	add    BYTE PTR gs:[rdx+0x0],dh
 1012724:	and    BYTE PTR [rax],al
 1012726:	rex.X add BYTE PTR [rdi+0x0],bpl
 101272a:	outs   dx,DWORD PTR ds:[rsi]
 101272b:	add    BYTE PTR [rbx+0x0],ch
 101272e:	jae    0x1012730
 1012730:	and    BYTE PTR [rax],al
 1012732:	rex.WRXB add BYTE PTR [r14+0x0],r13b
 1012736:	ins    BYTE PTR es:[rdi],dx
 1012737:	add    BYTE PTR [rcx+0x0],ch
 101273a:	outs   dx,BYTE PTR ds:[rsi]
 101273b:	add    BYTE PTR [rbp+0x0],ah
 101273e:	and    BYTE PTR [rax],al
 1012740:	data16 add BYTE PTR [rdi+0x0],ch
 1012744:	jb     0x1012746
 1012746:	and    BYTE PTR [rax],al
 1012748:	add    BYTE PTR fs:[rbp+0x0],ah
 101274c:	je     0x101274e
 101274e:	(bad)  
 101274f:	add    BYTE PTR [rcx+0x0],ch
 1012752:	ins    BYTE PTR es:[rdi],dx
 1012753:	add    BYTE PTR [rbx+0x0],dh
 1012756:	add    BYTE PTR cs:[rdx],cl
 1012759:	add    BYTE PTR [rax+0x41],dl
 101275c:	mov    BYTE PTR [rsp+rsi*1],al
 101275f:	add    BYTE PTR [rax],al
 1012761:	add    BYTE PTR [rsi+0x0],dl
 1012764:	push   rbx
 1012765:	add    BYTE PTR [rdi+0x0],bl
 1012768:	push   rsi
 1012769:	add    BYTE PTR [rbp+0x0],al
 101276c:	push   rdx
 101276d:	add    BYTE PTR [rbx+0x0],dl
 1012770:	rex.WB add BYTE PTR [r15+0x0],cl
 1012774:	rex.WRX add BYTE PTR [rdi+0x0],r11b
 1012778:	rex.WB add BYTE PTR [r14+0x0],cl
 101277c:	rex.RX add BYTE PTR [rdi+0x0],r9b
 1012780:	add    BYTE PTR [rax],al
 1012782:	add    BYTE PTR [rax],al
 1012784:	mov    ebp,0xfeef04
 1012789:	add    BYTE PTR [rcx],al
 101278b:	add    BYTE PTR [rsi+0x0],ch
 101278e:	fild   DWORD PTR [rdi]
 1012790:	cmp    al,0x0
 1012792:	xor    al,0x8
 1012794:	add    BYTE PTR [rax],al
 1012796:	or     eax,DWORD PTR [rax]
 1012798:	cmp    al,0x0
 101279a:	xor    al,0x8
 101279c:	(bad)  
 101279d:	add    BYTE PTR [rax],al
 101279f:	add    BYTE PTR [rax],cl
 10127a1:	add    BYTE PTR [rax],al
 10127a3:	add    BYTE PTR [rax],al
 10127a5:	add    BYTE PTR [rax+rax*1],al
 10127a8:	add    DWORD PTR [rax],eax
	...
 10127b6:	add    BYTE PTR [rax],al
 10127b8:	out    0x3,al
 10127ba:	add    BYTE PTR [rax],al
 10127bc:	add    DWORD PTR [rax],eax
 10127be:	push   rbx
 10127bf:	add    BYTE PTR [rax+rax*1+0x72],dh
 10127c3:	add    BYTE PTR [rcx+0x0],ch
 10127c6:	outs   dx,BYTE PTR ds:[rsi]
 10127c7:	add    BYTE PTR [rdi+0x0],ah
 10127ca:	rex.RX add BYTE PTR [rcx+0x0],r13b
 10127ce:	ins    BYTE PTR es:[rdi],dx
 10127cf:	add    BYTE PTR [rbp+0x0],ah
 10127d2:	rex.WB add BYTE PTR [r14+0x0],bpl
 10127d6:	data16 add BYTE PTR [rdi+0x0],ch
 10127da:	add    BYTE PTR [rax],al
 10127dc:	ret    0x3
 10127df:	add    BYTE PTR [rcx],al
 10127e1:	add    BYTE PTR [rax],dh
 10127e3:	add    BYTE PTR [rax+rax*1],dh
 10127e6:	xor    BYTE PTR [rax],al
 10127e8:	cmp    DWORD PTR [rax],eax
 10127ea:	xor    BYTE PTR [rax],al
 10127ec:	xor    al,0x0
 10127ee:	rex.X add BYTE PTR [rax],sil
 10127f1:	add    BYTE PTR [rax],al
 10127f3:	add    BYTE PTR [rsi],ah
 10127f5:	add    BYTE PTR [rdi],al
 10127f7:	add    BYTE PTR [rcx],al
 10127f9:	add    BYTE PTR [rax+0x0],dl
 10127fc:	ins    BYTE PTR es:[rdi],dx
 10127fd:	add    BYTE PTR [rcx+0x0],ah
 1012800:	je     0x1012802
 1012802:	data16 add BYTE PTR [rdi+0x0],ch
 1012806:	jb     0x1012808
 1012808:	ins    DWORD PTR es:[rdi],dx
 1012809:	add    BYTE PTR [rax],al
 101280b:	add    BYTE PTR [rsi+0x0],cl
 101280e:	push   rsp
 101280f:	add    BYTE PTR [rax],ah
 1012811:	add    BYTE PTR [rax+0x0],bh
 1012814:	add    BYTE PTR ss:[rax+rax*1],dh
 1012818:	add    BYTE PTR [rax],al
 101281a:	add    BYTE PTR [rax],al
 101281c:	mov    edx,0x1004900
 1012821:	add    BYTE PTR [rax+rax*1+0x65],cl
 1012825:	add    BYTE PTR [rdi+0x0],ah
 1012828:	(bad)  
 1012829:	add    BYTE PTR [rax+rax*1+0x54],ch
 101282d:	add    BYTE PTR [rdx+0x0],dh
 1012830:	(bad)  
 1012831:	add    BYTE PTR [rax+rax*1+0x65],ah
 1012835:	add    BYTE PTR [rbp+0x0],ch
 1012838:	(bad)  
 1012839:	add    BYTE PTR [rdx+0x0],dh
 101283c:	imul   eax,DWORD PTR [rax],0x73
 101283f:	add    BYTE PTR [rax],al
 1012841:	add    BYTE PTR [rax],al
 1012843:	add    BYTE PTR [rbp+0x0],cl
 1012846:	imul   eax,DWORD PTR [rax],0x720063
 101284c:	outs   dx,DWORD PTR ds:[rsi]
 101284d:	add    BYTE PTR [rbx+0x0],dh
 1012850:	outs   dx,DWORD PTR ds:[rsi]
 1012851:	add    BYTE PTR [rsi+0x0],ah
 1012854:	je     0x1012856
 1012856:	and    BYTE PTR [rax],al
 1012858:	push   rbx
 1012859:	add    BYTE PTR [rcx+0x0],dl
 101285c:	rex.WR add BYTE PTR [rax],r12b
 101285f:	add    BYTE PTR [rbx+0x0],dl
 1012862:	add    BYTE PTR gs:[rdx+0x0],dh
 1012866:	jbe    0x1012868
 1012868:	add    BYTE PTR gs:[rdx+0x0],dh
 101286c:	and    BYTE PTR [rax],al
 101286e:	imul   eax,DWORD PTR [rax],0x200073
 1012874:	(bad)  
 1012875:	add    BYTE PTR [rax],ah
 1012877:	add    BYTE PTR [rdx+0x0],dh
 101287a:	add    BYTE PTR gs:[rdi+0x0],ah
 101287e:	imul   eax,DWORD PTR [rax],0x740073
 1012884:	add    BYTE PTR gs:[rdx+0x0],dh
 1012888:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 101288d:	add    BYTE PTR [rax+rax*1+0x72],dh
 1012891:	add    BYTE PTR [rcx+0x0],ah
 1012894:	add    BYTE PTR fs:[rbp+0x0],ah
 1012898:	ins    DWORD PTR es:[rdi],dx
 1012899:	add    BYTE PTR [rcx+0x0],ah
 101289c:	jb     0x101289e
 101289e:	imul   eax,DWORD PTR [rax],0x20
 10128a1:	add    BYTE PTR [rdi+0x0],ch
 10128a4:	data16 add BYTE PTR [rax],ah
 10128a7:	add    BYTE PTR [rbp+0x0],cl
 10128aa:	imul   eax,DWORD PTR [rax],0x720063
 10128b0:	outs   dx,DWORD PTR ds:[rsi]
 10128b1:	add    BYTE PTR [rbx+0x0],dh
 10128b4:	outs   dx,DWORD PTR ds:[rsi]
 10128b5:	add    BYTE PTR [rsi+0x0],ah
 10128b8:	je     0x10128ba
 10128ba:	and    BYTE PTR [rax],al
 10128bc:	rex.XB add BYTE PTR [r15+0x0],bpl
 10128c0:	jb     0x10128c2
 10128c2:	jo     0x10128c4
 10128c4:	outs   dx,DWORD PTR ds:[rsi]
 10128c5:	add    BYTE PTR [rdx+0x0],dh
 10128c8:	(bad)  
 10128c9:	add    BYTE PTR [rax+rax*1+0x69],dh
 10128cd:	add    BYTE PTR [rdi+0x0],ch
 10128d0:	outs   dx,BYTE PTR ds:[rsi]
 10128d1:	add    BYTE PTR [rsi],ch
 10128d3:	add    BYTE PTR [rax],al
 10128d5:	add    BYTE PTR [rax],al
 10128d7:	add    BYTE PTR [rax],ah
 10128d9:	add    BYTE PTR [rax+rax*1],al
 10128dc:	add    DWORD PTR [rax],eax
 10128de:	rex.XB add BYTE PTR [r15+0x0],bpl
 10128e2:	ins    DWORD PTR es:[rdi],dx
 10128e3:	add    BYTE PTR [rbp+0x0],ch
 10128e6:	add    BYTE PTR gs:[rsi+0x0],ch
 10128ea:	je     0x10128ec
 10128ec:	jae    0x10128ee
 10128ee:	add    BYTE PTR [rax],al
 10128f0:	push   rbx
 10128f1:	add    BYTE PTR [rcx+0x0],dl
 10128f4:	rex.WR add BYTE PTR [rax],r8b
 10128f7:	add    BYTE PTR [rsi],ah
 10128f9:	add    BYTE PTR [rip+0x47000100],al        # 0x480129ff
 10128ff:	add    BYTE PTR [rdi+0x0],ch
 1012902:	ins    BYTE PTR es:[rdi],dx
 1012903:	add    BYTE PTR [rax+rax*1+0x65],ah
 1012907:	add    BYTE PTR [rsi+0x0],ch
 101290a:	rex.X add BYTE PTR [rcx+0x0],bpl
 101290e:	je     0x1012910
 1012910:	jae    0x1012912
 1012912:	add    BYTE PTR [rax],al
 1012914:	push   rsp
 1012915:	add    BYTE PTR [rdx+0x0],dh
 1012918:	jne    0x101291a
 101291a:	add    BYTE PTR gs:[rax],al
 101291d:	add    BYTE PTR [rax],al
 101291f:	add    BYTE PTR [rax+rax*1+0x16],cl
 1012923:	add    BYTE PTR [rcx],al
 1012925:	add    BYTE PTR [rbx+0x0],al
 1012928:	outs   dx,DWORD PTR ds:[rsi]
 1012929:	add    BYTE PTR [rbp+0x0],ch
 101292c:	jo     0x101292e
 101292e:	(bad)  
 101292f:	add    BYTE PTR [rsi+0x0],ch
 1012932:	jns    0x1012934
 1012934:	rex.WRX add BYTE PTR [rcx+0x0],r12b
 1012938:	ins    DWORD PTR es:[rdi],dx
 1012939:	add    BYTE PTR [rbp+0x0],ah
 101293c:	add    BYTE PTR [rax],al
 101293e:	add    BYTE PTR [rax],al
 1012940:	rex.WRB add BYTE PTR [r9+0x0],r13b
 1012944:	movsxd eax,DWORD PTR [rax]
 1012946:	jb     0x1012948
 1012948:	outs   dx,DWORD PTR ds:[rsi]
 1012949:	add    BYTE PTR [rbx+0x0],dh
 101294c:	outs   dx,DWORD PTR ds:[rsi]
 101294d:	add    BYTE PTR [rsi+0x0],ah
 1012950:	je     0x1012952
 1012952:	and    BYTE PTR [rax],al
 1012954:	rex.XB add BYTE PTR [r15+0x0],bpl
 1012958:	jb     0x101295a
 101295a:	jo     0x101295c
 101295c:	outs   dx,DWORD PTR ds:[rsi]
 101295d:	add    BYTE PTR [rdx+0x0],dh
 1012960:	(bad)  
 1012961:	add    BYTE PTR [rax+rax*1+0x69],dh
 1012965:	add    BYTE PTR [rdi+0x0],ch
 1012968:	outs   dx,BYTE PTR ds:[rsi]
 1012969:	add    BYTE PTR [rax],al
 101296b:	add    BYTE PTR [rax+rax*1+0x16],dl
 101296f:	add    BYTE PTR [rcx],al
 1012971:	add    BYTE PTR [rsi+0x0],al
 1012974:	imul   eax,DWORD PTR [rax],0x65006c
 101297a:	add    BYTE PTR [rbp+0x0],r12b
 101297e:	jae    0x1012980
 1012980:	movsxd eax,DWORD PTR [rax]
 1012982:	jb     0x1012984
 1012984:	imul   eax,DWORD PTR [rax],0x740070
 101298a:	imul   eax,DWORD PTR [rax],0x6e006f
 1012990:	add    BYTE PTR [rax],al
 1012992:	add    BYTE PTR [rax],al
 1012994:	rex.WRXB add BYTE PTR [r11+0x0],r10b
 1012998:	push   rcx
 1012999:	add    BYTE PTR [rax+rax*1+0x20],cl
 101299d:	add    BYTE PTR [rip+0x53002000],ch        # 0x540149a3
 10129a3:	add    BYTE PTR [rcx+0x0],dl
 10129a6:	rex.WR add BYTE PTR [rax],r12b
 10129a9:	add    BYTE PTR [rcx+0x0],dh
 10129ac:	jne    0x10129ae
 10129ae:	add    BYTE PTR gs:[rdx+0x0],dh
 10129b2:	jns    0x10129b4
 10129b4:	and    BYTE PTR [rax],al
 10129b6:	je     0x10129b8
 10129b8:	outs   dx,DWORD PTR ds:[rsi]
 10129b9:	add    BYTE PTR [rdi+0x0],ch
 10129bc:	ins    BYTE PTR es:[rdi],dx
 10129bd:	add    BYTE PTR [rax],al
 10129bf:	add    BYTE PTR [rax+rax*1+0x2e],bh
 10129c3:	add    BYTE PTR [rcx],al
 10129c5:	add    BYTE PTR [rsi+0x0],al
 10129c8:	imul   eax,DWORD PTR [rax],0x65006c
 10129ce:	push   rsi
 10129cf:	add    BYTE PTR [rbp+0x0],ah
 10129d2:	jb     0x10129d4
 10129d4:	jae    0x10129d6
 10129d6:	imul   eax,DWORD PTR [rax],0x6e006f
 10129dc:	add    BYTE PTR [rax],al
 10129de:	add    BYTE PTR [rax],al
 10129e0:	xor    al,BYTE PTR [rax]
 10129e2:	xor    BYTE PTR [rax],al
 10129e4:	xor    DWORD PTR [rax],eax
 10129e6:	xor    DWORD PTR [rax],eax
 10129e8:	add    BYTE PTR cs:[rax],dh
 10129eb:	add    BYTE PTR [rcx],dh
 10129ed:	add    BYTE PTR [rcx],dh
 10129ef:	add    BYTE PTR [rax],dh
 10129f1:	add    BYTE PTR [rsi],ch
 10129f3:	add    BYTE PTR [rdx],dh
 10129f5:	add    BYTE PTR [rcx],dh
 10129f7:	add    BYTE PTR [rax],dh
 10129f9:	add    BYTE PTR [rax],dh
 10129fb:	add    BYTE PTR [rsi],ch
 10129fd:	add    BYTE PTR [rax],dh
 10129ff:	add    BYTE PTR [rsi],dh
 1012a01:	add    BYTE PTR [rax],dh
 1012a03:	add    BYTE PTR [rax],ah
 1012a05:	add    BYTE PTR [rax],ch
 1012a07:	add    BYTE PTR [rax],ch
 1012a09:	add    BYTE PTR [rbx+0x0],dl
 1012a0c:	push   rcx
 1012a0d:	add    BYTE PTR [rax+rax*1+0x31],cl
 1012a11:	add    BYTE PTR [rcx],dh
 1012a13:	add    BYTE PTR [rdi+0x0],bl
 1012a16:	push   rdx
 1012a17:	add    BYTE PTR [rax+rax*1+0x4d],dl
 1012a1b:	add    BYTE PTR [rcx],ch
 1012a1d:	add    BYTE PTR [rsi],ch
 1012a1f:	add    BYTE PTR [rcx],dh
 1012a21:	add    BYTE PTR [rdx],dh
 1012a23:	add    BYTE PTR [rax],dh
 1012a25:	add    BYTE PTR [rdx],dh
 1012a27:	add    BYTE PTR [rcx],dh
 1012a29:	add    BYTE PTR [rax],dh
 1012a2b:	add    BYTE PTR [rip+0x39003100],ch        # 0x3a015b31
 1012a31:	add    BYTE PTR [rcx],dh
 1012a33:	add    BYTE PTR [rdi],dh
 1012a35:	add    BYTE PTR [rax],ah
 1012a37:	add    BYTE PTR [rcx],ch
 1012a39:	add    BYTE PTR [rax],al
 1012a3b:	add    BYTE PTR [rdx],ch
 1012a3d:	add    BYTE PTR [rip+0x49000100],al        # 0x4a012b43
 1012a43:	add    BYTE PTR [rsi+0x0],ch
 1012a46:	je     0x1012a48
 1012a48:	add    BYTE PTR gs:[rdx+0x0],dh
 1012a4c:	outs   dx,BYTE PTR ds:[rsi]
 1012a4d:	add    BYTE PTR [rcx+0x0],ah
 1012a50:	ins    BYTE PTR es:[rdi],dx
 1012a51:	add    BYTE PTR [rsi+0x0],cl
 1012a54:	(bad)  
 1012a55:	add    BYTE PTR [rbp+0x0],ch
 1012a58:	add    BYTE PTR gs:[rax],al
 1012a5b:	add    BYTE PTR [rdi+0x0],ch
 1012a5e:	jae    0x1012a60
 1012a60:	jno    0x1012a62
 1012a62:	ins    BYTE PTR es:[rdi],dx
 1012a63:	add    BYTE PTR [rax],al
 1012a65:	add    BYTE PTR [rax],al
 1012a67:	add    BYTE PTR [rsi+0x0],ch
 1012a6a:	and    eax,0x4c000100
 1012a6f:	add    BYTE PTR [rbp+0x0],ah
 1012a72:	add    BYTE PTR [ecx+0x0],ah
 1012a76:	ins    BYTE PTR es:[rdi],dx
 1012a77:	add    BYTE PTR [rbx+0x0],al
 1012a7a:	outs   dx,DWORD PTR ds:[rsi]
 1012a7b:	add    BYTE PTR [rax+0x0],dh
 1012a7e:	jns    0x1012a80
 1012a80:	jb     0x1012a82
 1012a82:	imul   eax,DWORD PTR [rax],0x680067
 1012a88:	je     0x1012a8a
 1012a8a:	add    BYTE PTR [rax],al
 1012a8c:	rex.WRB add BYTE PTR [r9+0x0],r13b
 1012a90:	movsxd eax,DWORD PTR [rax]
 1012a92:	jb     0x1012a94
 1012a94:	outs   dx,DWORD PTR ds:[rsi]
 1012a95:	add    BYTE PTR [rbx+0x0],dh
 1012a98:	outs   dx,DWORD PTR ds:[rsi]
 1012a99:	add    BYTE PTR [rsi+0x0],ah
 1012a9c:	je     0x1012a9e
 1012a9e:	and    BYTE PTR [rax],al
 1012aa0:	rex.XB add BYTE PTR [r15+0x0],bpl
 1012aa4:	jb     0x1012aa6
 1012aa6:	jo     0x1012aa8
 1012aa8:	add    BYTE PTR cs:[rax],ah
 1012aab:	add    BYTE PTR [rcx+0x0],al
 1012aae:	ins    BYTE PTR es:[rdi],dx
 1012aaf:	add    BYTE PTR [rax+rax*1+0x20],ch
 1012ab3:	add    BYTE PTR [rdx+0x0],dh
 1012ab6:	imul   eax,DWORD PTR [rax],0x680067
 1012abc:	je     0x1012abe
 1012abe:	jae    0x1012ac0
 1012ac0:	and    BYTE PTR [rax],al
 1012ac2:	jb     0x1012ac4
 1012ac4:	add    BYTE PTR gs:[rbx+0x0],dh
 1012ac8:	add    BYTE PTR gs:[rdx+0x0],dh
 1012acc:	jbe    0x1012ace
 1012ace:	add    BYTE PTR gs:[rax+rax*1+0x2e],ah
 1012ad3:	add    BYTE PTR [rax],al
 1012ad5:	add    BYTE PTR [rax],al
 1012ad7:	add    BYTE PTR [rdx],bh
 1012ad9:	add    BYTE PTR [rcx],cl
 1012adb:	add    BYTE PTR [rcx],al
 1012add:	add    BYTE PTR [rdi+0x0],cl
 1012ae0:	jb     0x1012ae2
 1012ae2:	imul   eax,DWORD PTR [rax],0x690067
 1012ae8:	outs   dx,BYTE PTR ds:[rsi]
 1012ae9:	add    BYTE PTR [rcx+0x0],ah
 1012aec:	ins    BYTE PTR es:[rdi],dx
 1012aed:	add    BYTE PTR [rsi+0x0],al
 1012af0:	imul   eax,DWORD PTR [rax],0x65006c
 1012af6:	outs   dx,BYTE PTR ds:[rsi]
 1012af7:	add    BYTE PTR [rcx+0x0],ah
 1012afa:	ins    DWORD PTR es:[rdi],dx
 1012afb:	add    BYTE PTR [rbp+0x0],ah
 1012afe:	add    BYTE PTR [rax],al
 1012b00:	outs   dx,DWORD PTR ds:[rsi]
 1012b01:	add    BYTE PTR [rbx+0x0],dh
 1012b04:	jno    0x1012b06
 1012b06:	ins    BYTE PTR es:[rdi],dx
 1012b07:	add    BYTE PTR [rsi],ch
 1012b09:	add    BYTE PTR [rbp+0x0],ah
 1012b0c:	js     0x1012b0e
 1012b0e:	add    BYTE PTR gs:[rax],al
 1012b11:	add    BYTE PTR [rax],al
 1012b13:	add    BYTE PTR [rdx+0x0],cl
 1012b16:	adc    eax,0x50000100
 1012b1b:	add    BYTE PTR [rdx+0x0],dh
 1012b1e:	outs   dx,DWORD PTR ds:[rsi]
 1012b1f:	add    BYTE PTR [rax+rax*1+0x75],ah
 1012b23:	add    BYTE PTR [rbx+0x0],ah
 1012b26:	je     0x1012b28
 1012b28:	rex.WRX add BYTE PTR [rcx+0x0],r12b
 1012b2c:	ins    DWORD PTR es:[rdi],dx
 1012b2d:	add    BYTE PTR [rbp+0x0],ah
 1012b30:	add    BYTE PTR [rax],al
 1012b32:	add    BYTE PTR [rax],al
 1012b34:	rex.WRB add BYTE PTR [r9+0x0],r13b
 1012b38:	movsxd eax,DWORD PTR [rax]
 1012b3a:	jb     0x1012b3c
 1012b3c:	outs   dx,DWORD PTR ds:[rsi]
 1012b3d:	add    BYTE PTR [rbx+0x0],dh
 1012b40:	outs   dx,DWORD PTR ds:[rsi]
 1012b41:	add    BYTE PTR [rsi+0x0],ah
 1012b44:	je     0x1012b46
 1012b46:	and    BYTE PTR [rax],al
 1012b48:	push   rbx
 1012b49:	add    BYTE PTR [rcx+0x0],dl
 1012b4c:	rex.WR add BYTE PTR [rax],r12b
 1012b4f:	add    BYTE PTR [rbx+0x0],dl
 1012b52:	add    BYTE PTR gs:[rdx+0x0],dh
 1012b56:	jbe    0x1012b58
 1012b58:	add    BYTE PTR gs:[rdx+0x0],dh
 1012b5c:	add    BYTE PTR [rax],al
 1012b5e:	add    BYTE PTR [rax],al
 1012b60:	add    BYTE PTR ds:[rip+0x50000100],cl        # 0x51012c67
 1012b67:	add    BYTE PTR [rdx+0x0],dh
 1012b6a:	outs   dx,DWORD PTR ds:[rsi]
 1012b6b:	add    BYTE PTR [rax+rax*1+0x75],ah
 1012b6f:	add    BYTE PTR [rbx+0x0],ah
 1012b72:	je     0x1012b74
 1012b74:	push   rsi
 1012b75:	add    BYTE PTR [rbp+0x0],ah
 1012b78:	jb     0x1012b7a
 1012b7a:	jae    0x1012b7c
 1012b7c:	imul   eax,DWORD PTR [rax],0x6e006f
 1012b82:	add    BYTE PTR [rax],al
 1012b84:	xor    DWORD PTR [rax],eax
 1012b86:	xor    DWORD PTR [rax],eax
 1012b88:	add    BYTE PTR cs:[rax],dh
 1012b8b:	add    BYTE PTR [rsi],ch
 1012b8d:	add    BYTE PTR [rdx],dh
 1012b8f:	add    BYTE PTR [rcx],dh
 1012b91:	add    BYTE PTR [rax],dh
 1012b93:	add    BYTE PTR [rax],dh
 1012b95:	add    BYTE PTR [rsi],ch
 1012b97:	add    BYTE PTR [rsi],dh
 1012b99:	add    BYTE PTR [rax],dh
 1012b9b:	add    BYTE PTR [rax],al
 1012b9d:	add    BYTE PTR [rax],al
 1012b9f:	add    BYTE PTR [rax+rax*1+0x0],al
 1012ba3:	add    BYTE PTR [rcx],al
 1012ba5:	add    BYTE PTR [rsi+0x0],dl
 1012ba8:	(bad)  
 1012ba9:	add    BYTE PTR [rdx+0x0],dh
 1012bac:	rex.RX add BYTE PTR [rcx+0x0],r13b
 1012bb0:	ins    BYTE PTR es:[rdi],dx
 1012bb1:	add    BYTE PTR [rbp+0x0],ah
 1012bb4:	rex.WB add BYTE PTR [r14+0x0],bpl
 1012bb8:	data16 add BYTE PTR [rdi+0x0],ch
 1012bbc:	add    BYTE PTR [rax],al
 1012bbe:	add    BYTE PTR [rax],al
 1012bc0:	and    al,0x0
 1012bc2:	add    al,0x0
 1012bc4:	add    BYTE PTR [rax],al
 1012bc6:	push   rsp
 1012bc7:	add    BYTE PTR [rdx+0x0],dh
 1012bca:	(bad)  
 1012bcb:	add    BYTE PTR [rsi+0x0],ch
 1012bce:	jae    0x1012bd0
 1012bd0:	ins    BYTE PTR es:[rdi],dx
 1012bd1:	add    BYTE PTR [rcx+0x0],ah
 1012bd4:	je     0x1012bd6
 1012bd6:	imul   eax,DWORD PTR [rax],0x6e006f
 1012bdc:	add    BYTE PTR [rax],al
 1012bde:	add    BYTE PTR [rax],al
 1012be0:	or     DWORD PTR [rax+rsi*4],eax
 1012be3:	add    al,0x3c
 1012be5:	(bad)  
 1012be6:	jae    0x1012c5b
 1012be8:	gs ins DWORD PTR es:[rdi],dx
 1012bea:	(bad)  
 1012beb:	ins    BYTE PTR es:[rdi],dx
 1012bec:	jns    0x1012c0e
 1012bee:	js     0x1012c5d
 1012bf0:	ins    BYTE PTR es:[rdi],dx
 1012bf1:	outs   dx,BYTE PTR ds:[rsi]
 1012bf2:	jae    0x1012c31
 1012bf4:	and    dh,BYTE PTR [rbp+0x72]
 1012bf7:	outs   dx,BYTE PTR ds:[rsi]
 1012bf8:	cmp    dh,BYTE PTR [rbx+0x63]
 1012bfb:	push   0x73616d65
 1012c00:	sub    eax,0x7263696d
 1012c05:	outs   dx,DWORD PTR ds:[rsi]
 1012c06:	jae    0x1012c77
 1012c08:	data16 je 0x1012c38
 1012c0b:	movsxd ebp,DWORD PTR [rdi+0x6d]
 1012c0e:	cmp    ah,BYTE PTR [rcx+0x73]
 1012c11:	ins    DWORD PTR es:[rdi],dx
 1012c12:	cs jbe 0x1012c46
 1012c15:	and    ah,BYTE PTR [rax]
 1012c17:	ins    DWORD PTR es:[rdi],dx
 1012c18:	(bad)  
 1012c19:	outs   dx,BYTE PTR ds:[rsi]
 1012c1a:	imul   esp,DWORD PTR [rsi+0x65],0x65567473
 1012c21:	jb     0x1012c96
 1012c23:	imul   ebp,DWORD PTR [rdi+0x6e],0x2e31223d
 1012c2a:	xor    BYTE PTR [rdx],ah
 1012c2c:	ds or  eax,0x3c20200a
 1012c32:	je     0x1012ca6
 1012c34:	jne    0x1012ca9
 1012c36:	je     0x1012c81
 1012c38:	outs   dx,BYTE PTR ds:[rsi]
 1012c39:	outs   dx,WORD PTR ds:[rsi]
 1012c3b:	and    BYTE PTR [rax+0x6d],bh
 1012c3e:	ins    BYTE PTR es:[rdi],dx
 1012c3f:	outs   dx,BYTE PTR ds:[rsi]
 1012c40:	jae    0x1012c7f
 1012c42:	and    dh,BYTE PTR [rbp+0x72]
 1012c45:	outs   dx,BYTE PTR ds:[rsi]
 1012c46:	cmp    dh,BYTE PTR [rbx+0x63]
 1012c49:	push   0x73616d65
 1012c4e:	sub    eax,0x7263696d
 1012c53:	outs   dx,DWORD PTR ds:[rsi]
 1012c54:	jae    0x1012cc5
 1012c56:	data16 je 0x1012c86
 1012c59:	movsxd ebp,DWORD PTR [rdi+0x6d]
 1012c5c:	cmp    ah,BYTE PTR [rcx+0x73]
 1012c5f:	ins    DWORD PTR es:[rdi],dx
 1012c60:	cs jbe 0x1012c96
 1012c63:	and    bh,BYTE PTR [rsi]
 1012c65:	or     eax,0x2020200a
 1012c6a:	and    BYTE PTR [rbx+rsi*2],bh
 1012c6d:	movsxd esi,DWORD PTR gs:[rbp+0x72]
 1012c71:	imul   esi,DWORD PTR [rcx+rdi*2+0x3e],0x20200a0d
 1012c79:	and    BYTE PTR [rax],ah
 1012c7b:	and    BYTE PTR [rax],ah
 1012c7d:	cmp    al,0x72
 1012c7f:	gs jno 0x1012cf7
 1012c82:	gs jae 0x1012cf9
 1012c85:	gs fs push rax
 1012c88:	jb     0x1012cf3
 1012c8a:	jbe    0x1012cf5
 1012c8c:	ins    BYTE PTR es:[rdi],dx
 1012c8d:	gs addr32 gs jae 0x1012cd0
 1012c92:	or     eax,0x2020200a
 1012c97:	and    BYTE PTR [rax],ah
 1012c99:	and    BYTE PTR [rax],ah
 1012c9b:	and    BYTE PTR [rdx+rsi*2],bh
 1012c9e:	gs jno 0x1012d16
 1012ca1:	gs jae 0x1012d18
 1012ca4:	gs fs rex.RB js 0x1012d0e
 1012ca9:	movsxd esi,DWORD PTR [rbp+0x74]
 1012cac:	imul   ebp,DWORD PTR [rdi+0x6e],0x6576654c
 1012cb3:	ins    BYTE PTR es:[rdi],dx
 1012cb4:	and    BYTE PTR [rbp+riz*2+0x76],ch
 1012cb8:	gs ins BYTE PTR es:[rdi],dx
 1012cba:	cmp    eax,0x49736122
 1012cbf:	outs   dx,BYTE PTR ds:[rsi]
 1012cc0:	jbe    0x1012d31
 1012cc2:	imul   esp,DWORD PTR [rbp+0x72],0x22
 1012cc6:	and    BYTE PTR [rbp+0x69],dh
 1012cc9:	movsxd esp,DWORD PTR [r11+0x65]
 1012ccd:	jae    0x1012d42
 1012ccf:	cmp    eax,0x6c616622
 1012cd4:	jae    0x1012d3b
 1012cd6:	and    bh,BYTE PTR [rsi]
 1012cd8:	cmp    al,0x2f
 1012cda:	jb     0x1012d41
 1012cdc:	jno    0x1012d53
 1012cde:	gs jae 0x1012d55
 1012ce1:	gs fs rex.RB js 0x1012d4b
 1012ce6:	movsxd esi,DWORD PTR [rbp+0x74]
 1012ce9:	imul   ebp,DWORD PTR [rdi+0x6e],0x6576654c
 1012cf0:	ins    BYTE PTR es:[rdi],dx
 1012cf1:	ds or  eax,0x2020200a
 1012cf7:	and    BYTE PTR [rax],ah
 1012cf9:	and    BYTE PTR [rdi+rbp*1],bh
 1012cfc:	jb     0x1012d63
 1012cfe:	jno    0x1012d75
 1012d00:	gs jae 0x1012d77
 1012d03:	gs fs push rax
 1012d06:	jb     0x1012d71
 1012d08:	jbe    0x1012d73
 1012d0a:	ins    BYTE PTR es:[rdi],dx
 1012d0b:	gs addr32 gs jae 0x1012d4e
 1012d10:	or     eax,0x2020200a
 1012d15:	and    BYTE PTR [rdi+rbp*1],bh
 1012d18:	jae    0x1012d7f
 1012d1a:	movsxd esi,DWORD PTR [rbp+0x72]
 1012d1d:	imul   esi,DWORD PTR [rcx+rdi*2+0x3e],0x20200a0d
 1012d25:	cmp    al,0x2f
 1012d27:	je     0x1012d9b
 1012d29:	jne    0x1012d9e
 1012d2b:	je     0x1012d76
 1012d2d:	outs   dx,BYTE PTR ds:[rsi]
 1012d2e:	outs   dx,WORD PTR ds:[rsi]
 1012d30:	ds or  eax,0x612f3c0a
 1012d36:	jae    0x1012dab
 1012d38:	gs ins DWORD PTR es:[rdi],dx
 1012d3a:	(bad)  
 1012d3b:	ins    BYTE PTR es:[rdi],dx
 1012d3c:	jns    0x1012d7c
 1012d3e:	push   rax
 1012d3f:	rex.B

Disassembly of section .reloc:

0000000001013000 <.reloc>:
 1013000:	add    BYTE PTR [rax],dl
 1013002:	add    BYTE PTR [rax],al
 1013004:	adc    al,0x0
 1013006:	add    BYTE PTR [rax],al
 1013008:	mov    eax,0xd8a4d0a4
 101300d:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 101300e:	mov    eax,0xaac0aa
 1013013:	add    BYTE PTR [rax],al
 1013015:	loopne 0x1013017
 1013017:	add    BYTE PTR [rax+rax*1],cl
 101301a:	add    BYTE PTR [rax],al
 101301c:	sub    BYTE PTR [rcx+0x0],ah
	...
