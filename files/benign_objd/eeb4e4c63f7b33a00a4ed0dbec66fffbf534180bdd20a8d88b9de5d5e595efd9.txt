
eeb4e4c63f7b33a00a4ed0dbec66fffbf534180bdd20a8d88b9de5d5e595efd9.exe:     file format pei-x86-64


Disassembly of section .text:

0000000001001000 <.text>:
 1001000:	add    BYTE PTR ss:[rcx],al
 1001003:	add    BYTE PTR [rax],al
 1001005:	add    BYTE PTR [rax],al
 1001007:	add    BYTE PTR [rsi+0x0],al
 100100a:	add    DWORD PTR [rax],eax
 100100c:	add    BYTE PTR [rax],al
 100100e:	add    BYTE PTR [rax],al
 1001010:	sub    BYTE PTR [rax],al
 1001012:	add    DWORD PTR [rax],eax
	...
 1001020:	or     BYTE PTR [rdi],al
 1001022:	add    DWORD PTR [rax],eax
 1001024:	add    BYTE PTR [rax],al
 1001026:	add    BYTE PTR [rax],al
 1001028:	nop
 1001029:	(bad)  
 100102a:	add    DWORD PTR [rax],eax
	...
 1001038:	call   0x100113d
 100103d:	add    BYTE PTR [rax],al
 100103f:	add    al,bh
 1001041:	add    BYTE PTR [rcx],al
 1001043:	add    BYTE PTR [rax],al
 1001045:	add    BYTE PTR [rax],al
 1001047:	add    BYTE PTR [rsi],cl
 1001049:	add    DWORD PTR [rcx],eax
 100104b:	add    BYTE PTR [rax],al
 100104d:	add    BYTE PTR [rax],al
 100104f:	add    BYTE PTR [rax],ch
 1001051:	add    DWORD PTR [rcx],eax
 1001053:	add    BYTE PTR [rax],al
 1001055:	add    BYTE PTR [rax],al
 1001057:	add    BYTE PTR [rax],bh
 1001059:	add    DWORD PTR [rcx],eax
 100105b:	add    BYTE PTR [rax],al
 100105d:	add    BYTE PTR [rax],al
 100105f:	add    BYTE PTR [rdx+0x1],cl
 1001062:	add    DWORD PTR [rax],eax
 1001064:	add    BYTE PTR [rax],al
 1001066:	add    BYTE PTR [rax],al
 1001068:	pop    rax
 1001069:	add    DWORD PTR [rcx],eax
 100106b:	add    BYTE PTR [rax],al
 100106d:	add    BYTE PTR [rax],al
 100106f:	add    BYTE PTR [rax+0x1],ch
 1001072:	add    DWORD PTR [rax],eax
 1001074:	add    BYTE PTR [rax],al
 1001076:	add    BYTE PTR [rax],al
 1001078:	je     0x100107b
 100107a:	add    DWORD PTR [rax],eax
 100107c:	add    BYTE PTR [rax],al
 100107e:	add    BYTE PTR [rax],al
 1001080:	(bad)  
 1001081:	add    DWORD PTR [rcx],eax
 1001083:	add    BYTE PTR [rax],al
 1001085:	add    BYTE PTR [rax],al
 1001087:	add    BYTE PTR [rcx+rax*1+0x1],dl
 100108e:	add    BYTE PTR [rax],al
 1001090:	movabs ds:0xb200000000000101,al
 1001099:	add    DWORD PTR [rcx],eax
 100109b:	add    BYTE PTR [rax],al
 100109d:	add    BYTE PTR [rax],al
 100109f:	add    ah,al
 10010a1:	add    DWORD PTR [rcx],eax
 10010a3:	add    BYTE PTR [rax],al
 10010a5:	add    BYTE PTR [rax],al
 10010a7:	add    dl,bl
 10010a9:	add    DWORD PTR [rcx],eax
 10010ab:	add    BYTE PTR [rax],al
 10010ad:	add    BYTE PTR [rax],al
 10010af:	add    dl,dh
 10010b1:	add    DWORD PTR [rcx],eax
 10010b3:	add    BYTE PTR [rax],al
 10010b5:	add    BYTE PTR [rax],al
 10010b7:	add    BYTE PTR [rdx+rax*1],al
 10010ba:	add    DWORD PTR [rax],eax
 10010bc:	add    BYTE PTR [rax],al
 10010be:	add    BYTE PTR [rax],al
 10010c0:	and    al,BYTE PTR [rdx]
 10010c2:	add    DWORD PTR [rax],eax
 10010c4:	add    BYTE PTR [rax],al
 10010c6:	add    BYTE PTR [rax],al
 10010c8:	xor    al,0x2
 10010ca:	add    DWORD PTR [rax],eax
 10010cc:	add    BYTE PTR [rax],al
 10010ce:	add    BYTE PTR [rax],al
 10010d0:	add    r8b,BYTE PTR [rcx]
 10010d3:	add    BYTE PTR [rax],al
 10010d5:	add    BYTE PTR [rax],al
 10010d7:	add    BYTE PTR [rdx+rax*1+0x1],dl
 10010db:	add    BYTE PTR [rax],al
 10010dd:	add    BYTE PTR [rax],al
 10010df:	add    BYTE PTR [rdx+0x2],ah
 10010e2:	add    DWORD PTR [rax],eax
 10010e4:	add    BYTE PTR [rax],al
 10010e6:	add    BYTE PTR [rax],al
 10010e8:	js     0x10010ec
 10010ea:	add    DWORD PTR [rax],eax
 10010ec:	add    BYTE PTR [rax],al
 10010ee:	add    BYTE PTR [rax],al
 10010f0:	xchg   esi,eax
 10010f1:	add    al,BYTE PTR [rcx]
 10010f3:	add    BYTE PTR [rax],al
 10010f5:	add    BYTE PTR [rax],al
 10010f7:	add    BYTE PTR [rdx+rax*1+0x1],ch
 10010fe:	add    BYTE PTR [rax],al
 1001100:	enter  0x102,0x0
 1001104:	add    BYTE PTR [rax],al
 1001106:	add    BYTE PTR [rax],al
 1001108:	loopne 0x100110c
 100110a:	add    DWORD PTR [rax],eax
 100110c:	add    BYTE PTR [rax],al
 100110e:	add    BYTE PTR [rax],al
 1001110:	clc    
 1001111:	add    al,BYTE PTR [rcx]
 1001113:	add    BYTE PTR [rax],al
 1001115:	add    BYTE PTR [rax],al
 1001117:	add    BYTE PTR [rax],cl
 1001119:	add    eax,DWORD PTR [rcx]
 100111b:	add    BYTE PTR [rax],al
 100111d:	add    BYTE PTR [rax],al
 100111f:	add    BYTE PTR [rdx],bl
 1001121:	add    eax,DWORD PTR [rcx]
 1001123:	add    BYTE PTR [rax],al
 1001125:	add    BYTE PTR [rax],al
 1001127:	add    BYTE PTR [rax],dh
 1001129:	add    eax,DWORD PTR [rcx]
 100112b:	add    BYTE PTR [rax],al
 100112d:	add    BYTE PTR [rax],al
 100112f:	add    BYTE PTR [rax],cl
 1001131:	or     eax,DWORD PTR [rcx]
 1001133:	add    BYTE PTR [rax],al
 1001135:	add    BYTE PTR [rax],al
 1001137:	add    ah,dh
 1001139:	or     al,BYTE PTR [rcx]
 100113b:	add    BYTE PTR [rax],al
 100113d:	add    BYTE PTR [rax],al
 100113f:	add    al,ah
 1001141:	or     al,BYTE PTR [rcx]
 1001143:	add    BYTE PTR [rax],al
 1001145:	add    BYTE PTR [rax],al
 1001147:	add    dh,cl
 1001149:	or     al,BYTE PTR [rcx]
 100114b:	add    BYTE PTR [rax],al
 100114d:	add    BYTE PTR [rax],al
 100114f:	add    BYTE PTR [rdx+rcx*1+0x1],bh
 1001156:	add    BYTE PTR [rax],al
 1001158:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1001159:	or     al,BYTE PTR [rcx]
 100115b:	add    BYTE PTR [rax],al
 100115d:	add    BYTE PTR [rax],al
 100115f:	add    ah,dl
 1001161:	add    BYTE PTR [rcx],al
 1001163:	add    BYTE PTR [rax],al
 1001165:	add    BYTE PTR [rax],al
 1001167:	add    BYTE PTR [rdx+rcx*1+0x1],al
 100116e:	add    BYTE PTR [rax],al
 1001170:	je     0x100117c
 1001172:	add    DWORD PTR [rax],eax
 1001174:	add    BYTE PTR [rax],al
 1001176:	add    BYTE PTR [rax],al
 1001178:	or     al,BYTE PTR fs:[rcx]
 100117b:	add    BYTE PTR [rax],al
 100117d:	add    BYTE PTR [rax],al
 100117f:	add    BYTE PTR [rdx+rcx*1+0x1],dl
 1001183:	add    BYTE PTR [rax],al
 1001185:	add    BYTE PTR [rax],al
 1001187:	add    BYTE PTR [rdx+rcx*1],bh
 100118a:	add    DWORD PTR [rax],eax
 100118c:	add    BYTE PTR [rax],al
 100118e:	add    BYTE PTR [rax],al
 1001190:	sub    al,0xa
 1001192:	add    DWORD PTR [rax],eax
 1001194:	add    BYTE PTR [rax],al
 1001196:	add    BYTE PTR [rax],al
 1001198:	sbb    cl,BYTE PTR [rdx]
 100119a:	add    DWORD PTR [rax],eax
 100119c:	add    BYTE PTR [rax],al
 100119e:	add    BYTE PTR [rax],al
 10011a0:	or     BYTE PTR [rdx],cl
 10011a2:	add    DWORD PTR [rax],eax
 10011a4:	add    BYTE PTR [rax],al
 10011a6:	add    BYTE PTR [rax],al
 10011a8:	test   BYTE PTR [rcx],0x1
 10011ab:	add    BYTE PTR [rax],al
 10011ad:	add    BYTE PTR [rax],al
 10011af:	add    dh,ah
 10011b1:	or     DWORD PTR [rcx],eax
 10011b3:	add    BYTE PTR [rax],al
 10011b5:	add    BYTE PTR [rax],al
 10011b7:	add    dl,dl
 10011b9:	or     DWORD PTR [rcx],eax
 10011bb:	add    BYTE PTR [rax],al
 10011bd:	add    BYTE PTR [rax],al
 10011bf:	add    BYTE PTR [rcx+rcx*1+0x1],bh
 10011c6:	add    BYTE PTR [rax],al
 10011c8:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 10011c9:	or     DWORD PTR [rcx],eax
 10011cb:	add    BYTE PTR [rax],al
 10011cd:	add    BYTE PTR [rax],al
 10011cf:	add    BYTE PTR [rdx+0x109],cl
 10011d5:	add    BYTE PTR [rax],al
 10011d7:	add    BYTE PTR [rax+0x9],bh
 10011da:	add    DWORD PTR [rax],eax
 10011dc:	add    BYTE PTR [rax],al
 10011de:	add    BYTE PTR [rax],al
 10011e0:	or     DWORD PTR fs:[rcx],eax
 10011e3:	add    BYTE PTR [rax],al
 10011e5:	add    BYTE PTR [rax],al
 10011e7:	add    BYTE PTR [rsi+0x9],cl
 10011ea:	add    DWORD PTR [rax],eax
 10011ec:	add    BYTE PTR [rax],al
 10011ee:	add    BYTE PTR [rax],al
 10011f0:	rex.X or DWORD PTR [rcx],eax
 10011f3:	add    BYTE PTR [rax],al
 10011f5:	add    BYTE PTR [rax],al
 10011f7:	add    BYTE PTR [rdx],dh
 10011f9:	or     DWORD PTR [rcx],eax
 10011fb:	add    BYTE PTR [rax],al
 10011fd:	add    BYTE PTR [rax],al
 10011ff:	add    BYTE PTR [rax],ah
 1001201:	or     DWORD PTR [rcx],eax
 1001203:	add    BYTE PTR [rax],al
 1001205:	add    BYTE PTR [rax],al
 1001207:	add    BYTE PTR [rcx+rcx*1],dl
 100120a:	add    DWORD PTR [rax],eax
 100120c:	add    BYTE PTR [rax],al
 100120e:	add    BYTE PTR [rax],al
 1001210:	(bad)  
 1001211:	or     DWORD PTR [rcx],eax
 1001213:	add    BYTE PTR [rax],al
 1001215:	add    BYTE PTR [rax],al
 1001217:	add    dl,bh
 1001219:	or     BYTE PTR [rcx],al
 100121b:	add    BYTE PTR [rax],al
 100121d:	add    BYTE PTR [rax],al
 100121f:	add    dh,ch
 1001221:	or     BYTE PTR [rcx],al
 1001223:	add    BYTE PTR [rax],al
 1001225:	add    BYTE PTR [rax],al
 1001227:	add    al,ah
 1001229:	or     BYTE PTR [rcx],al
 100122b:	add    BYTE PTR [rax],al
 100122d:	add    BYTE PTR [rax],al
 100122f:	add    BYTE PTR [rax+0x108],bh
 1001235:	add    BYTE PTR [rax],al
 1001237:	add    BYTE PTR [rsi+0x108],bl
 100123d:	add    BYTE PTR [rax],al
 100123f:	add    BYTE PTR [rax+0x108],cl
 1001245:	add    BYTE PTR [rax],al
 1001247:	add    BYTE PTR [rax+0x8],bh
 100124a:	add    DWORD PTR [rax],eax
 100124c:	add    BYTE PTR [rax],al
 100124e:	add    BYTE PTR [rax],al
 1001250:	pop    rsi
 1001251:	or     BYTE PTR [rcx],al
 1001253:	add    BYTE PTR [rax],al
 1001255:	add    BYTE PTR [rax],al
 1001257:	add    BYTE PTR [rsi+0x8],cl
 100125a:	add    DWORD PTR [rax],eax
 100125c:	add    BYTE PTR [rax],al
 100125e:	add    BYTE PTR [rax],al
 1001260:	cmp    cl,BYTE PTR [rax]
 1001262:	add    DWORD PTR [rax],eax
 1001264:	add    BYTE PTR [rax],al
 1001266:	add    BYTE PTR [rax],al
 1001268:	and    BYTE PTR [rax],cl
 100126a:	add    DWORD PTR [rax],eax
 100126c:	add    BYTE PTR [rax],al
 100126e:	add    BYTE PTR [rax],al
 1001270:	or     al,0x8
 1001272:	add    DWORD PTR [rax],eax
 1001274:	add    BYTE PTR [rax],al
 1001276:	add    BYTE PTR [rax],al
 1001278:	enter  0x100,0x0
 100127c:	add    BYTE PTR [rax],al
 100127e:	add    BYTE PTR [rax],al
 1001280:	mov    eax,0x100
 1001285:	add    BYTE PTR [rax],al
 1001287:	add    BYTE PTR [rax+rax*1+0x1],ah
 100128e:	add    BYTE PTR [rax],al
 1001290:	mov    WORD PTR [rax],es
 1001292:	add    DWORD PTR [rax],eax
 1001294:	add    BYTE PTR [rax],al
 1001296:	add    BYTE PTR [rax],al
 1001298:	clc    
 1001299:	(bad)  
 100129a:	add    DWORD PTR [rax],eax
 100129c:	add    BYTE PTR [rax],al
 100129e:	add    BYTE PTR [rax],al
 10012a0:	fadd   QWORD PTR [rdi]
 10012a2:	add    DWORD PTR [rax],eax
 10012a4:	add    BYTE PTR [rax],al
 10012a6:	add    BYTE PTR [rax],al
 10012a8:	enter  0x107,0x0
 10012ac:	add    BYTE PTR [rax],al
 10012ae:	add    BYTE PTR [rax],al
 10012b0:	mov    ah,0x7
 10012b2:	add    DWORD PTR [rax],eax
 10012b4:	add    BYTE PTR [rax],al
 10012b6:	add    BYTE PTR [rax],al
 10012b8:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 10012b9:	(bad)  
 10012ba:	add    DWORD PTR [rax],eax
 10012bc:	add    BYTE PTR [rax],al
 10012be:	add    BYTE PTR [rax],al
 10012c0:	pushf  
 10012c1:	(bad)  
 10012c2:	add    DWORD PTR [rax],eax
 10012c4:	add    BYTE PTR [rax],al
 10012c6:	add    BYTE PTR [rax],al
 10012c8:	jp     0x10012ca
 10012ca:	add    DWORD PTR [rax],eax
 10012cc:	add    BYTE PTR [rax],al
 10012ce:	add    BYTE PTR [rax],al
 10012d0:	push   0x100
 10012d5:	add    BYTE PTR [rax],al
 10012d7:	add    BYTE PTR [rdx+0x10a],dl
 10012dd:	add    BYTE PTR [rax],al
 10012df:	add    BYTE PTR [rax+0xc],dl
 10012e2:	add    DWORD PTR [rax],eax
	...
 10012f0:	stos   BYTE PTR es:[rdi],al
 10012f1:	or     eax,DWORD PTR [rcx]
 10012f3:	add    BYTE PTR [rax],al
 10012f5:	add    BYTE PTR [rax],al
 10012f7:	add    BYTE PTR [rax+0x10b],dl
 10012fd:	add    BYTE PTR [rax],al
 10012ff:	add    BYTE PTR [rbx+rcx*1+0x1],dh
	...
 100130f:	add    BYTE PTR [rbx+rax*1+0x1],cl
 1001316:	add    BYTE PTR [rax],al
 1001318:	jbe    0x100131d
 100131a:	add    DWORD PTR [rax],eax
 100131c:	add    BYTE PTR [rax],al
 100131e:	add    BYTE PTR [rax],al
 1001320:	add    eax,DWORD PTR fs:[rcx]
 1001323:	add    BYTE PTR [rax],al
 1001325:	add    BYTE PTR [rax],al
 1001327:	add    BYTE PTR [rbx+rax*1+0x1],bl
 100132b:	add    BYTE PTR [rax],al
 100132d:	add    BYTE PTR [rax],al
 100132f:	add    BYTE PTR [rdx+0x103],ah
 1001335:	add    BYTE PTR [rax],al
 1001337:	add    BYTE PTR [rbx+rcx*1],bl
 100133a:	add    DWORD PTR [rax],eax
 100133c:	add    BYTE PTR [rax],al
 100133e:	add    BYTE PTR [rax],al
 1001340:	sub    cl,BYTE PTR [rbx]
 1001342:	add    DWORD PTR [rax],eax
 1001344:	add    BYTE PTR [rax],al
 1001346:	add    BYTE PTR [rax],al
 1001348:	xor    al,0xb
 100134a:	add    DWORD PTR [rax],eax
 100134c:	add    BYTE PTR [rax],al
 100134e:	add    BYTE PTR [rax],al
 1001350:	or     r8d,DWORD PTR [rcx]
 1001353:	add    BYTE PTR [rax],al
 1001355:	add    BYTE PTR [rax],al
 1001357:	add    BYTE PTR [rbx+rcx*1+0x1],dl
 100135b:	add    BYTE PTR [rax],al
 100135d:	add    BYTE PTR [rax],al
 100135f:	add    BYTE PTR [rbx+rcx*1+0x1],ah
 1001363:	add    BYTE PTR [rax],al
 1001365:	add    BYTE PTR [rax],al
 1001367:	add    BYTE PTR [rdx+0x103],ch
 100136d:	add    BYTE PTR [rax],al
 100136f:	add    BYTE PTR [rsi+0x103],dh
 1001375:	add    BYTE PTR [rax],al
 1001377:	add    dl,al
 1001379:	add    eax,DWORD PTR [rcx]
 100137b:	add    BYTE PTR [rax],al
 100137d:	add    BYTE PTR [rax],al
 100137f:	add    ah,cl
 1001381:	add    eax,DWORD PTR [rcx]
 1001383:	add    BYTE PTR [rax],al
 1001385:	add    BYTE PTR [rax],al
 1001387:	add    dl,bl
 1001389:	add    eax,DWORD PTR [rcx]
 100138b:	add    BYTE PTR [rax],al
 100138d:	add    BYTE PTR [rax],al
 100138f:	add    al,ch
 1001391:	add    eax,DWORD PTR [rcx]
 1001393:	add    BYTE PTR [rax],al
 1001395:	add    BYTE PTR [rax],al
 1001397:	add    ah,dh
 1001399:	add    eax,DWORD PTR [rcx]
 100139b:	add    BYTE PTR [rax],al
 100139d:	add    BYTE PTR [rax],al
 100139f:	add    BYTE PTR [rsi],al
 10013a1:	add    al,0x1
 10013a3:	add    BYTE PTR [rax],al
 10013a5:	add    BYTE PTR [rax],al
 10013a7:	add    BYTE PTR [rax],dl
 10013a9:	add    al,0x1
 10013ab:	add    BYTE PTR [rax],al
 10013ad:	add    BYTE PTR [rax],al
 10013af:	add    BYTE PTR [rsp+rax*1],bl
 10013b2:	add    DWORD PTR [rax],eax
 10013b4:	add    BYTE PTR [rax],al
 10013b6:	add    BYTE PTR [rax],al
 10013b8:	sub    al,BYTE PTR [rcx+rax*1]
 10013bb:	add    BYTE PTR [rax],al
 10013bd:	add    BYTE PTR [rax],al
 10013bf:	add    BYTE PTR [rax],bh
 10013c1:	add    al,0x1
 10013c3:	add    BYTE PTR [rax],al
 10013c5:	add    BYTE PTR [rax],al
 10013c7:	add    BYTE PTR [rdx+0x4],cl
 10013ca:	add    DWORD PTR [rax],eax
 10013cc:	add    BYTE PTR [rax],al
 10013ce:	add    BYTE PTR [rax],al
 10013d0:	(bad)  
 10013d1:	add    al,0x1
 10013d3:	add    BYTE PTR [rax],al
 10013d5:	add    BYTE PTR [rax],al
 10013d7:	add    BYTE PTR [rax+0x4],dh
 10013da:	add    DWORD PTR [rax],eax
 10013dc:	add    BYTE PTR [rax],al
 10013de:	add    BYTE PTR [rax],al
 10013e0:	js     0x10013e6
 10013e2:	add    DWORD PTR [rax],eax
 10013e4:	add    BYTE PTR [rax],al
 10013e6:	add    BYTE PTR [rax],al
 10013e8:	(bad)  
 10013e9:	add    al,0x1
 10013eb:	add    BYTE PTR [rax],al
 10013ed:	add    BYTE PTR [rax],al
 10013ef:	add    BYTE PTR [rdx+0x104],cl
 10013f5:	add    BYTE PTR [rax],al
 10013f7:	add    BYTE PTR [rax+0x104],bl
 10013fd:	add    BYTE PTR [rax],al
 10013ff:	add    BYTE PTR [rsp+rax*1+0x1],ah
 1001406:	add    BYTE PTR [rax],al
 1001408:	mov    dl,0x4
 100140a:	add    DWORD PTR [rax],eax
 100140c:	add    BYTE PTR [rax],al
 100140e:	add    BYTE PTR [rax],al
 1001410:	enter  0x104,0x0
 1001414:	add    BYTE PTR [rax],al
 1001416:	add    BYTE PTR [rax],al
 1001418:	fadd   QWORD PTR [rcx+rax*1]
 100141b:	add    BYTE PTR [rax],al
 100141d:	add    BYTE PTR [rax],al
 100141f:	add    al,ch
 1001421:	add    al,0x1
 1001423:	add    BYTE PTR [rax],al
 1001425:	add    BYTE PTR [rax],al
 1001427:	add    dl,dh
 1001429:	add    al,0x1
 100142b:	add    BYTE PTR [rax],al
 100142d:	add    BYTE PTR [rax],al
 100142f:	add    BYTE PTR [rdx],dl
 1001431:	add    eax,0x1
 1001436:	add    BYTE PTR [rax],al
 1001438:	es add eax,0x1
 100143e:	add    BYTE PTR [rax],al
 1001440:	cmp    al,0x5
 1001442:	add    DWORD PTR [rax],eax
 1001444:	add    BYTE PTR [rax],al
 1001446:	add    BYTE PTR [rax],al
 1001448:	rex.RX add eax,0x1
 100144e:	add    BYTE PTR [rax],al
 1001450:	push   rsp
 1001451:	add    eax,0x1
 1001456:	add    BYTE PTR [rax],al
 1001458:	pop    rsp
 1001459:	add    eax,0x1
 100145e:	add    BYTE PTR [rax],al
 1001460:	add    ax,0x1
 1001464:	add    BYTE PTR [rax],al
 1001466:	add    BYTE PTR [rax],al
 1001468:	pushf  
 1001469:	add    eax,0x1
 100146e:	add    BYTE PTR [rax],al
 1001470:	add    r8,QWORD PTR [rcx]
	...
 100147f:	add    BYTE PTR [rax+rax*1],al
 1001482:	add    BYTE PTR [rax],al
 1001484:	add    BYTE PTR [rax],al
 1001486:	add    BYTE PTR [rax+0x6],al
 100148c:	add    BYTE PTR [rax],al
 100148e:	add    BYTE PTR [rax+0x0],al
 1001494:	add    BYTE PTR [rax],al
 1001496:	add    BYTE PTR [rax],al
 1001498:	cli    
 1001499:	or     eax,DWORD PTR [rcx]
 100149b:	add    BYTE PTR [rax],al
 100149d:	add    BYTE PTR [rax],al
 100149f:	add    ah,ah
 10014a1:	or     eax,DWORD PTR [rcx]
	...
 10014af:	add    BYTE PTR [rsi+0x105],ch
	...
 10014bd:	add    BYTE PTR [rax],al
 10014bf:	add    BYTE PTR [rax+0x6],bl
 10014c2:	add    DWORD PTR [rax],eax
 10014c4:	add    BYTE PTR [rax],al
 10014c6:	add    BYTE PTR [rax],al
 10014c8:	ds (bad) 
 10014ca:	add    DWORD PTR [rax],eax
 10014cc:	add    BYTE PTR [rax],al
 10014ce:	add    BYTE PTR [rax],al
 10014d0:	or     al,0x6
 10014d2:	add    DWORD PTR [rax],eax
	...
 10014e0:	xor    cl,BYTE PTR [rcx+rax*1]
 10014e3:	add    BYTE PTR [rax],al
 10014e5:	add    BYTE PTR [rax],al
 10014e7:	add    BYTE PTR [rsp+rcx*1],bl
 10014ea:	add    DWORD PTR [rax],eax
	...
 10014f8:	loop   0x10014ff
 10014fa:	add    DWORD PTR [rax],eax
 10014fc:	add    BYTE PTR [rax],al
 10014fe:	add    BYTE PTR [rax],al
 1001500:	rol    BYTE PTR [rip+0x1],1        # 0x1001507
	...
 1001516:	add    BYTE PTR [rax],al
 1001518:	fsub   QWORD PTR [rbp+0x0]
 100151b:	add    DWORD PTR [rax],eax
 100151d:	add    BYTE PTR [rax],al
 100151f:	add    BYTE PTR [rsp+rbx*8+0x0],ch
 1001523:	add    DWORD PTR [rax],eax
 1001525:	add    BYTE PTR [rax],al
 1001527:	add    BYTE PTR [rax+0x100dc],bl
 100152d:	add    BYTE PTR [rax],al
 100152f:	add    ah,bl
 1001531:	fadd   QWORD PTR [rax]
 1001533:	add    DWORD PTR [rax],eax
 1001535:	add    BYTE PTR [rax],al
 1001537:	add    ah,bh
 1001539:	fadd   QWORD PTR [rax]
 100153b:	add    DWORD PTR [rax],eax
 100153d:	add    BYTE PTR [rax],al
 100153f:	add    al,dl
 1001541:	(bad)  
 1001542:	add    BYTE PTR [rcx],al
 1001544:	add    BYTE PTR [rax],al
 1001546:	add    BYTE PTR [rax],al
 1001548:	adc    ah,dl
 100154a:	add    BYTE PTR [rcx],al
 100154c:	add    BYTE PTR [rax],al
 100154e:	add    BYTE PTR [rax],al
 1001550:	movabs al,ds:0x60000000000100d4
 1001559:	(bad)  
 100155a:	add    BYTE PTR [rcx],al
 100155c:	add    BYTE PTR [rax],al
 100155e:	add    BYTE PTR [rax],al
 1001560:	sbb    al,0x0
 1001563:	add    DWORD PTR [rax],eax
 1001565:	add    BYTE PTR [rax],al
 1001567:	add    BYTE PTR [rax],dl
 1001569:	fld    DWORD PTR [rax]
 100156b:	add    DWORD PTR [rax],eax
 100156d:	add    BYTE PTR [rax],al
 100156f:	add    BYTE PTR [rax+0x100d9],ah
 1001575:	add    BYTE PTR [rax],al
 1001577:	add    BYTE PTR [rax],dh
 1001579:	fiadd  DWORD PTR [rax]
 100157b:	add    DWORD PTR [rax],eax
 100157d:	add    BYTE PTR [rax],al
 100157f:	add    al,al
 1001581:	fiadd  DWORD PTR [rax]
 1001583:	add    DWORD PTR [rax],eax
 1001585:	add    BYTE PTR [rax],al
 1001587:	add    BYTE PTR [rax-0x25],dl
 100158a:	add    BYTE PTR [rcx],al
 100158c:	add    BYTE PTR [rax],al
 100158e:	add    BYTE PTR [rax],al
 1001590:	loopne 0x100156d
 1001592:	add    BYTE PTR [rcx],al
	...
 10015a8:	shl    BYTE PTR [rdi+0x0],1
 10015ab:	add    DWORD PTR [rax],eax
 10015ad:	add    BYTE PTR [rax],al
 10015af:	add    BYTE PTR [rax+0x1006e],ch
	...
 10015c1:	add    BYTE PTR [rax],al
 10015c3:	add    cl,dh
 10015c5:	(bad)  
 10015c6:	xor    eax,0x4f
 10015cb:	add    BYTE PTR [rdx],al
 10015cd:	add    BYTE PTR [rax],al
 10015cf:	add    BYTE PTR [rbx],ah
 10015d1:	add    BYTE PTR [rax],al
 10015d3:	add    BYTE PTR [rax+0x3c],cl
 10015d6:	add    BYTE PTR [rax],al
 10015d8:	rex.W xor BYTE PTR [rax],al
 10015db:	add    BYTE PTR [rax],al
 10015dd:	add    BYTE PTR [rax],al
 10015df:	add    BYTE PTR [rdx],ah
 10015e1:	add    eax,0x11993
 10015e6:	add    BYTE PTR [rax],al
 10015e8:	jo     0x10015cb
	...
 10015f2:	add    BYTE PTR [rax],al
 10015f4:	add    eax,0x78000000
 10015f9:	loope  0x10015fb
 10015fb:	add    BYTE PTR [rax],ah
	...
 1001605:	add    BYTE PTR [rax],al
 1001607:	add    BYTE PTR [rdx],ah
 1001609:	add    eax,0x11993
 100160e:	add    BYTE PTR [rax],al
 1001610:	mov    al,0xe1
	...
 100161a:	add    BYTE PTR [rax],al
 100161c:	add    DWORD PTR [rax],eax
 100161e:	add    BYTE PTR [rax],al
 1001620:	mov    eax,0x200000e1
	...
 100162d:	add    BYTE PTR [rax],al
 100162f:	add    BYTE PTR [rdx],ah
 1001631:	add    eax,0x21993
 1001636:	add    BYTE PTR [rax],al
 1001638:	cmp    al,0xe2
	...
 1001642:	add    BYTE PTR [rax],al
 1001644:	add    al,BYTE PTR [rax]
 1001646:	add    BYTE PTR [rax],al
 1001648:	rex.WR loop 0x100164b
 100164b:	add    BYTE PTR [rax],bh
	...
 1001655:	add    BYTE PTR [rax],al
 1001657:	add    BYTE PTR [rdx],ah
 1001659:	add    eax,0x41993
 100165e:	add    BYTE PTR [rax],al
 1001660:	js     0x1001644
	...
 100166a:	add    BYTE PTR [rax],al
 100166c:	add    al,0x0
 100166e:	add    BYTE PTR [rax],al
 1001670:	cwde   
 1001671:	loop   0x1001673
 1001673:	add    BYTE PTR [rax],ah
	...
 100167d:	add    BYTE PTR [rax],al
 100167f:	add    BYTE PTR [rdx],ah
 1001681:	add    eax,0x41993
 1001686:	add    BYTE PTR [rax],al
 1001688:	int3   
 1001689:	loop   0x100168b
	...
 1001693:	add    BYTE PTR [rbx],al
 1001695:	add    BYTE PTR [rax],al
 1001697:	add    ah,ch
 1001699:	loop   0x100169b
 100169b:	add    BYTE PTR [rax],ah
	...
 10016a5:	add    BYTE PTR [rax],al
 10016a7:	add    BYTE PTR [rdx],ah
 10016a9:	add    eax,0x31993
 10016ae:	add    BYTE PTR [rax],al
 10016b0:	sbb    bl,ah
	...
 10016ba:	add    BYTE PTR [rax],al
 10016bc:	or     eax,DWORD PTR [rax]
 10016be:	add    BYTE PTR [rax],al
 10016c0:	xor    bl,ah
 10016c2:	add    BYTE PTR [rax],al
 10016c4:	xor    BYTE PTR [rax],al
	...
 10016ce:	add    BYTE PTR [rax],al
 10016d0:	and    al,BYTE PTR [rip+0x21993]        # 0x1023069
 10016d6:	add    BYTE PTR [rax],al
 10016d8:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 10016d9:	jrcxz  0x10016db
	...
 10016e3:	add    BYTE PTR [rdi],al
 10016e5:	add    BYTE PTR [rax],al
 10016e7:	add    BYTE PTR [rbx+riz*8+0x300000],dh
	...
 10016f6:	add    BYTE PTR [rax],al
 10016f8:	and    al,BYTE PTR [rip+0x11993]        # 0x1013091
 10016fe:	add    BYTE PTR [rax],al
 1001700:	or     al,0xe4
	...
 100170a:	add    BYTE PTR [rax],al
 100170c:	(bad)  
 100170d:	add    BYTE PTR [rax],al
 100170f:	add    BYTE PTR [rsp+riz*8],dl
 1001712:	add    BYTE PTR [rax],al
 1001714:	xor    BYTE PTR [rax],al
	...
 100171e:	add    BYTE PTR [rax],al
 1001720:	and    al,BYTE PTR [rip+0x21993]        # 0x10230b9
 1001726:	add    BYTE PTR [rax],al
 1001728:	fs in  al,0x0
	...
 1001733:	add    BYTE PTR [rdx],al
 1001735:	add    BYTE PTR [rax],al
 1001737:	add    BYTE PTR [rsp+riz*8+0x0],dh
 100173b:	add    BYTE PTR [rax+0x0],dl
	...
 1001746:	add    BYTE PTR [rax],al
 1001748:	and    al,BYTE PTR [rip+0xa1993]        # 0x10a30e1
 100174e:	add    BYTE PTR [rax],al
 1001750:	mov    al,0xe4
	...
 100175a:	add    BYTE PTR [rax],al
 100175c:	sldt   WORD PTR [rax]
 100175f:	add    BYTE PTR [rax],al
 1001761:	in     eax,0x0
 1001763:	add    BYTE PTR [rax+0x0],bl
	...
 100176e:	add    BYTE PTR [rax],al
 1001770:	and    al,BYTE PTR [rip+0x21993]        # 0x1023109
 1001776:	add    BYTE PTR [rax],al
 1001778:	mov    ebp,fs
	...
 1001782:	add    BYTE PTR [rax],al
 1001784:	add    eax,DWORD PTR [rax]
 1001786:	add    BYTE PTR [rax],al
 1001788:	pushf  
 1001789:	in     eax,0x0
 100178b:	add    BYTE PTR [rax],dh
	...
 1001795:	add    BYTE PTR [rax],al
 1001797:	add    BYTE PTR [rdx],ah
 1001799:	add    eax,0x21993
 100179e:	add    BYTE PTR [rax],al
 10017a0:	int3   
 10017a1:	in     eax,0x0
	...
 10017ab:	add    BYTE PTR [rbx],al
 10017ad:	add    BYTE PTR [rax],al
 10017af:	add    ah,bl
 10017b1:	in     eax,0x0
 10017b3:	add    BYTE PTR [rax],dh
	...
 10017bd:	add    BYTE PTR [rax],al
 10017bf:	add    BYTE PTR [rdx],ah
 10017c1:	add    eax,0x21993
 10017c6:	add    BYTE PTR [rax],al
 10017c8:	or     al,0xe6
	...
 10017d2:	add    BYTE PTR [rax],al
 10017d4:	add    al,BYTE PTR [rax]
 10017d6:	add    BYTE PTR [rax],al
 10017d8:	sbb    al,0xe6
 10017da:	add    BYTE PTR [rax],al
 10017dc:	rex.W add BYTE PTR [rax],al
	...
 10017e7:	add    BYTE PTR [rdx],ah
 10017e9:	add    eax,0x11993
 10017ee:	add    BYTE PTR [rax],al
 10017f0:	rex.R out 0x0,al
	...
 10017fb:	add    BYTE PTR [rbx],al
 10017fd:	add    BYTE PTR [rax],al
 10017ff:	add    BYTE PTR [rsi+riz*8+0x0],cl
 1001803:	add    BYTE PTR [rax],dh
	...
 100180d:	add    BYTE PTR [rax],al
 100180f:	add    BYTE PTR [rdx],ah
 1001811:	add    eax,0x191993
 1001816:	add    BYTE PTR [rax],al
 1001818:	je     0x1001800
	...
 1001822:	add    BYTE PTR [rax],al
 1001824:	sbb    eax,DWORD PTR [rax]
 1001826:	add    BYTE PTR [rax],al
 1001828:	cmp    al,0xe7
 100182a:	add    BYTE PTR [rax],al
 100182c:	and    BYTE PTR [rax],al
	...
 1001836:	add    BYTE PTR [rax],al
 1001838:	and    al,BYTE PTR [rip+0x11993]        # 0x10131d1
 100183e:	add    BYTE PTR [rax],al
 1001840:	and    al,0xe8
	...
 100184a:	add    BYTE PTR [rax],al
 100184c:	add    eax,DWORD PTR [rax]
 100184e:	add    BYTE PTR [rax],al
 1001850:	sub    al,0xe8
 1001852:	add    BYTE PTR [rax],al
 1001854:	and    BYTE PTR [rax],al
	...
 100185e:	add    BYTE PTR [rax],al
 1001860:	and    al,BYTE PTR [rip+0x71993]        # 0x10731f9
 1001866:	add    BYTE PTR [rax],al
 1001868:	push   rsp
 1001869:	call   0x100186e
 100186e:	add    BYTE PTR [rax],al
 1001870:	add    BYTE PTR [rax],al
 1001872:	add    BYTE PTR [rax],al
 1001874:	or     DWORD PTR [rax],eax
 1001876:	add    BYTE PTR [rax],al
 1001878:	mov    eax,gs
 100187a:	add    BYTE PTR [rax],al
 100187c:	and    BYTE PTR [rax],al
	...
 1001886:	add    BYTE PTR [rax],al
 1001888:	and    al,BYTE PTR [rip+0x91993]        # 0x1093221
 100188e:	add    BYTE PTR [rax],al
 1001890:	in     al,0xe8
	...
 100189a:	add    BYTE PTR [rax],al
 100189c:	or     eax,DWORD PTR [rax]
 100189e:	add    BYTE PTR [rax],al
 10018a0:	sub    al,0xe9
 10018a2:	add    BYTE PTR [rax],al
 10018a4:	and    BYTE PTR [rax],al
	...
 10018ae:	add    BYTE PTR [rax],al
 10018b0:	and    al,BYTE PTR [rip+0x11993]        # 0x1013249
 10018b6:	add    BYTE PTR [rax],al
 10018b8:	xchg   esp,eax
 10018b9:	jmp    0x10018be
 10018be:	add    BYTE PTR [rax],al
 10018c0:	add    BYTE PTR [rax],al
 10018c2:	add    BYTE PTR [rax],al
 10018c4:	add    eax,DWORD PTR [rax]
 10018c6:	add    BYTE PTR [rax],al
 10018c8:	pushf  
 10018c9:	jmp    0x12018ce
	...
 10018d6:	add    BYTE PTR [rax],al
 10018d8:	and    al,BYTE PTR [rip+0x11993]        # 0x1013271
 10018de:	add    BYTE PTR [rax],al
 10018e0:	(bad)  
 10018e1:	jmp    0x10018e6
 10018e6:	add    BYTE PTR [rax],al
 10018e8:	add    BYTE PTR [rax],al
 10018ea:	add    BYTE PTR [rax],al
 10018ec:	add    DWORD PTR [rax],eax
 10018ee:	add    BYTE PTR [rax],al
 10018f0:	int3   
 10018f1:	jmp    0x12018f6
	...
 10018fe:	add    BYTE PTR [rax],al
 1001900:	and    al,BYTE PTR [rip+0x11993]        # 0x1013299
 1001906:	add    BYTE PTR [rax],al
 1001908:	in     al,0xe9
	...
 1001912:	add    BYTE PTR [rax],al
 1001914:	add    eax,DWORD PTR [rax]
 1001916:	add    BYTE PTR [rax],al
 1001918:	in     al,dx
 1001919:	jmp    0x120191e
	...
 1001926:	add    BYTE PTR [rax],al
 1001928:	and    al,BYTE PTR [rip+0x11993]        # 0x10132c1
 100192e:	add    BYTE PTR [rax],al
 1001930:	adc    al,0xea
	...
 100193a:	add    BYTE PTR [rax],al
 100193c:	add    DWORD PTR [rax],eax
 100193e:	add    BYTE PTR [rax],al
 1001940:	sbb    al,0xea
 1001942:	add    BYTE PTR [rax],al
 1001944:	and    BYTE PTR [rax],al
	...
 100194e:	add    BYTE PTR [rax],al
 1001950:	and    al,BYTE PTR [rip+0x11993]        # 0x10132e9
 1001956:	add    BYTE PTR [rax],al
 1001958:	xor    al,0xea
	...
 1001962:	add    BYTE PTR [rax],al
 1001964:	add    eax,DWORD PTR [rax]
 1001966:	add    BYTE PTR [rax],al
 1001968:	cmp    al,0xea
 100196a:	add    BYTE PTR [rax],al
 100196c:	and    BYTE PTR [rax],al
	...
 1001976:	add    BYTE PTR [rax],al
 1001978:	and    al,BYTE PTR [rip+0x11993]        # 0x1013311
 100197e:	add    BYTE PTR [rax],al
 1001980:	fs (bad) 
	...
 100198a:	add    BYTE PTR [rax],al
 100198c:	add    DWORD PTR [rax],eax
 100198e:	add    BYTE PTR [rax],al
 1001990:	ins    BYTE PTR es:[rdi],dx
 1001991:	(bad)  
 1001992:	add    BYTE PTR [rax],al
 1001994:	and    BYTE PTR [rax],al
	...
 100199e:	add    BYTE PTR [rax],al
 10019a0:	and    al,BYTE PTR [rip+0x11993]        # 0x1013339
 10019a6:	add    BYTE PTR [rax],al
 10019a8:	test   dl,ch
	...
 10019b2:	add    BYTE PTR [rax],al
 10019b4:	add    eax,DWORD PTR [rax]
 10019b6:	add    BYTE PTR [rax],al
 10019b8:	mov    edx,gs
 10019ba:	add    BYTE PTR [rax],al
 10019bc:	and    BYTE PTR [rax],al
	...
 10019c6:	add    BYTE PTR [rax],al
 10019c8:	and    al,BYTE PTR [rip+0x11993]        # 0x1013361
 10019ce:	add    BYTE PTR [rax],al
 10019d0:	mov    ah,0xea
	...
 10019da:	add    BYTE PTR [rax],al
 10019dc:	add    DWORD PTR [rax],eax
 10019de:	add    BYTE PTR [rax],al
 10019e0:	mov    esp,0x200000ea
	...
 10019ed:	add    BYTE PTR [rax],al
 10019ef:	add    BYTE PTR [rdx],ah
 10019f1:	add    eax,0x11993
 10019f6:	add    BYTE PTR [rax],al
 10019f8:	(bad)  
 10019f9:	(bad)  
	...
 1001a02:	add    BYTE PTR [rax],al
 1001a04:	add    eax,DWORD PTR [rax]
 1001a06:	add    BYTE PTR [rax],al
 1001a08:	fsub   st(2),st
 1001a0a:	add    BYTE PTR [rax],al
 1001a0c:	and    BYTE PTR [rax],al
	...
 1001a16:	add    BYTE PTR [rax],al
 1001a18:	and    al,BYTE PTR [rip+0x11993]        # 0x10133b1
 1001a1e:	add    BYTE PTR [rax],al
 1001a20:	add    al,0xeb
	...
 1001a2a:	add    BYTE PTR [rax],al
 1001a2c:	add    DWORD PTR [rax],eax
 1001a2e:	add    BYTE PTR [rax],al
 1001a30:	or     al,0xeb
 1001a32:	add    BYTE PTR [rax],al
 1001a34:	and    BYTE PTR [rax],al
	...
 1001a3e:	add    BYTE PTR [rax],al
 1001a40:	and    al,BYTE PTR [rip+0x11993]        # 0x10133d9
 1001a46:	add    BYTE PTR [rax],al
 1001a48:	and    al,0xeb
	...
 1001a52:	add    BYTE PTR [rax],al
 1001a54:	add    eax,DWORD PTR [rax]
 1001a56:	add    BYTE PTR [rax],al
 1001a58:	sub    al,0xeb
 1001a5a:	add    BYTE PTR [rax],al
 1001a5c:	and    BYTE PTR [rax],al
	...
 1001a66:	add    BYTE PTR [rax],al
 1001a68:	and    al,BYTE PTR [rip+0x11993]        # 0x1013401
 1001a6e:	add    BYTE PTR [rax],al
 1001a70:	push   rsp
 1001a71:	jmp    0x1001a73
	...
 1001a7b:	add    BYTE PTR [rcx],al
 1001a7d:	add    BYTE PTR [rax],al
 1001a7f:	add    BYTE PTR [rbx+rbp*8+0x0],bl
 1001a83:	add    BYTE PTR [rax],ah
	...
 1001a8d:	add    BYTE PTR [rax],al
 1001a8f:	add    BYTE PTR [rdx],ah
 1001a91:	add    eax,0x11993
 1001a96:	add    BYTE PTR [rax],al
 1001a98:	je     0x1001a85
	...
 1001aa2:	add    BYTE PTR [rax],al
 1001aa4:	add    eax,DWORD PTR [rax]
 1001aa6:	add    BYTE PTR [rax],al
 1001aa8:	jl     0x1001a95
 1001aaa:	add    BYTE PTR [rax],al
 1001aac:	and    BYTE PTR [rax],al
	...
 1001ab6:	add    BYTE PTR [rax],al
 1001ab8:	and    al,BYTE PTR [rip+0x11993]        # 0x1013451
 1001abe:	add    BYTE PTR [rax],al
 1001ac0:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1001ac1:	jmp    0x1001ac3
	...
 1001acb:	add    BYTE PTR [rcx],al
 1001acd:	add    BYTE PTR [rax],al
 1001acf:	add    BYTE PTR [rbx+rbp*8+0x200000],ch
	...
 1001ae6:	add    BYTE PTR [rax],al
 1001ae8:	rex.XB add BYTE PTR [r9+0x0],spl
 1001aec:	movsxd eax,DWORD PTR [rax]
 1001aee:	push   0x44006500
 1001af3:	add    BYTE PTR [rcx+0x0],ch
 1001af6:	jb     0x1001af8
 1001af8:	add    BYTE PTR gs:[rbx+0x0],ah
 1001afc:	je     0x1001afe
 1001afe:	outs   dx,DWORD PTR ds:[rsi]
 1001aff:	add    BYTE PTR [rdx+0x0],dh
 1001b02:	jns    0x1001b04
 1001b04:	add    BYTE PTR [rax],al
 1001b06:	add    BYTE PTR [rax],al
 1001b08:	rex.XB add BYTE PTR [r9+0x0],spl
 1001b0c:	movsxd eax,DWORD PTR [rax]
 1001b0e:	push   0x57006500
 1001b13:	add    BYTE PTR [rcx+0x0],ch
 1001b16:	outs   dx,BYTE PTR ds:[rsi]
 1001b17:	add    BYTE PTR [rax+rax*1+0x6f],ah
 1001b1b:	add    BYTE PTR [rdi+0x0],dh
 1001b1e:	add    BYTE PTR [rax],al
 1001b20:	add    BYTE PTR [r8+0x0],r15b
 1001b24:	imul   eax,DWORD PTR [rax],0x450074
 1001b2a:	jbe    0x1001b2c
 1001b2c:	add    BYTE PTR gs:[rsi+0x0],ch
 1001b30:	je     0x1001b32
 1001b32:	rex.WRX add BYTE PTR [rcx+0x0],r12b
 1001b36:	ins    DWORD PTR es:[rdi],dx
 1001b37:	add    BYTE PTR [rbp+0x0],ah
 1001b3a:	add    BYTE PTR [rax],al
 1001b3c:	add    BYTE PTR [rax],al
 1001b3e:	add    BYTE PTR [rax],al
 1001b40:	rex.WR add BYTE PTR [rdi+0x0],r13b
 1001b44:	add    BYTE PTR [edi+0x0],ah
 1001b48:	imul   eax,DWORD PTR [rax],0x67006e
 1001b4e:	rex.WR add BYTE PTR [rbp+0x0],r12b
 1001b52:	jbe    0x1001b54
 1001b54:	add    BYTE PTR gs:[rax+rax*1+0x0],ch
 1001b59:	add    BYTE PTR [rax],al
 1001b5b:	add    BYTE PTR [rax],al
 1001b5d:	add    BYTE PTR [rax],al
 1001b5f:	add    BYTE PTR [rax+0x0],dl
 1001b62:	(bad)  
 1001b63:	add    BYTE PTR [rdx+0x0],dh
 1001b66:	add    BYTE PTR gs:[rsi+0x0],ch
 1001b6a:	je     0x1001b6c
 1001b6c:	rex.WR add BYTE PTR [rdi+0x0],r13b
 1001b70:	add    BYTE PTR [ecx+0x0],cl
 1001b74:	add    BYTE PTR [rax],r8b
 1001b77:	add    BYTE PTR [rbx+0x0],al
 1001b7a:	outs   dx,DWORD PTR ds:[rsi]
 1001b7b:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1001b7f:	add    BYTE PTR [rbp+0x0],ah
 1001b82:	movsxd eax,DWORD PTR [rax]
 1001b84:	je     0x1001b86
 1001b86:	imul   eax,DWORD PTR [rax],0x6e006f
 1001b8c:	push   rbx
 1001b8d:	add    BYTE PTR [rbp+0x0],ah
 1001b90:	je     0x1001b92
 1001b92:	push   rbp
 1001b93:	add    BYTE PTR [rcx+0x0],cl
 1001b96:	add    BYTE PTR [rax],r8b
 1001b99:	add    BYTE PTR [rax],al
 1001b9b:	add    BYTE PTR [rax],al
 1001b9d:	add    BYTE PTR [rax],al
 1001b9f:	add    BYTE PTR [rcx+0x0],cl
 1001ba2:	outs   dx,BYTE PTR ds:[rsi]
 1001ba3:	add    BYTE PTR [rbx+0x0],dh
 1001ba6:	je     0x1001ba8
 1001ba8:	(bad)  
 1001ba9:	add    BYTE PTR [rsi+0x0],ch
 1001bac:	movsxd eax,DWORD PTR [rax]
 1001bae:	add    BYTE PTR gs:[rcx+0x0],cl
 1001bb2:	add    BYTE PTR [rax],r8b
 1001bb5:	add    BYTE PTR [rax],al
 1001bb7:	add    BYTE PTR [rcx+0x0],cl
 1001bba:	outs   dx,BYTE PTR ds:[rsi]
 1001bbb:	add    BYTE PTR [rbx+0x0],dh
 1001bbe:	je     0x1001bc0
 1001bc0:	(bad)  
 1001bc1:	add    BYTE PTR [rsi+0x0],ch
 1001bc4:	movsxd eax,DWORD PTR [rax]
 1001bc6:	add    BYTE PTR gs:[rsi+0x0],cl
 1001bca:	(bad)  
 1001bcb:	add    BYTE PTR [rbp+0x0],ch
 1001bce:	add    BYTE PTR gs:[rax],al
 1001bd1:	add    BYTE PTR [rax],al
 1001bd3:	add    BYTE PTR [rax],al
 1001bd5:	add    BYTE PTR [rax],al
 1001bd7:	add    BYTE PTR [rax+rax*1+0x61],al
 1001bdb:	add    BYTE PTR [rcx+0x0],bh
 1001bde:	jae    0x1001be0
 1001be0:	push   rbp
 1001be1:	add    BYTE PTR [rsi+0x0],ch
 1001be4:	je     0x1001be6
 1001be6:	imul   eax,DWORD PTR [rax],0x45006c
 1001bec:	js     0x1001bee
 1001bee:	jo     0x1001bf0
 1001bf0:	imul   eax,DWORD PTR [rax],0x610072
 1001bf6:	je     0x1001bf8
 1001bf8:	imul   eax,DWORD PTR [rax],0x6e006f
 1001bfe:	add    BYTE PTR [rax],al
 1001c00:	push   rdx
 1001c01:	add    BYTE PTR [rbp+0x0],dh
 1001c04:	outs   dx,BYTE PTR ds:[rsi]
 1001c05:	add    BYTE PTR [rax+rax*1+0x69],dh
 1001c09:	add    BYTE PTR [rbp+0x0],ch
 1001c0c:	add    BYTE PTR gs:[rbp+0x0],al
 1001c10:	js     0x1001c12
 1001c12:	add    BYTE PTR gs:[rbx+0x0],ah
 1001c16:	jne    0x1001c18
 1001c18:	je     0x1001c1a
 1001c1a:	imul   eax,DWORD PTR [rax],0x6e006f
 1001c20:	rex.WRB add BYTE PTR [r15+0x0],r13b
 1001c24:	add    BYTE PTR fs:[rbp+0x0],ah
	...
 1001c30:	rex.WB add BYTE PTR [r11+0x0],sil
 1001c34:	push   rbx
 1001c35:	add    BYTE PTR [rcx+0x0],bh
 1001c38:	jae    0x1001c3a
 1001c3a:	je     0x1001c3c
 1001c3c:	add    BYTE PTR gs:[rbp+0x0],ch
	...
 1001c48:	rex.XB add BYTE PTR [r15+0x0],bpl
 1001c4c:	outs   dx,BYTE PTR ds:[rsi]
 1001c4d:	add    BYTE PTR [rsi+0x0],ah
 1001c50:	imul   eax,DWORD PTR [rax],0x430067
 1001c56:	outs   dx,DWORD PTR ds:[rsi]
 1001c57:	add    BYTE PTR [rsi+0x0],ch
 1001c5a:	outs   dx,BYTE PTR ds:[rsi]
 1001c5b:	add    BYTE PTR [rbp+0x0],ah
 1001c5e:	movsxd eax,DWORD PTR [rax]
 1001c60:	je     0x1001c62
 1001c62:	imul   eax,DWORD PTR [rax],0x6e006f
 1001c68:	push   rbx
 1001c69:	add    BYTE PTR [rax+rax*1+0x72],dh
 1001c6d:	add    BYTE PTR [rcx+0x0],ch
 1001c70:	outs   dx,BYTE PTR ds:[rsi]
 1001c71:	add    BYTE PTR [rdi+0x0],ah
 1001c74:	add    BYTE PTR [rax],al
 1001c76:	add    BYTE PTR [rax],al
 1001c78:	push   rsp
 1001c79:	add    BYTE PTR [rcx+0x0],ah
 1001c7c:	jb     0x1001c7e
 1001c7e:	add    BYTE PTR [ebp+0x0],ah
 1001c82:	je     0x1001c84
 1001c84:	rex.XB add BYTE PTR [r15+0x0],bpl
 1001c88:	outs   dx,BYTE PTR ds:[rsi]
 1001c89:	add    BYTE PTR [rsi+0x0],ch
 1001c8c:	add    BYTE PTR gs:[rbx+0x0],ah
 1001c90:	je     0x1001c92
 1001c92:	imul   eax,DWORD PTR [rax],0x6e006f
 1001c98:	push   rbx
 1001c99:	add    BYTE PTR [rax+rax*1+0x72],dh
 1001c9d:	add    BYTE PTR [rcx+0x0],ch
 1001ca0:	outs   dx,BYTE PTR ds:[rsi]
 1001ca1:	add    BYTE PTR [rdi+0x0],ah
 1001ca4:	add    BYTE PTR [rax],al
 1001ca6:	add    BYTE PTR [rax],al
 1001ca8:	rex.WRB add BYTE PTR [r8+rax*1+0x57],r8b
 1001cad:	add    BYTE PTR [rbx+0x0],al
 1001cb0:	outs   dx,DWORD PTR ds:[rsi]
 1001cb1:	add    BYTE PTR [rsi+0x0],ch
 1001cb4:	outs   dx,BYTE PTR ds:[rsi]
 1001cb5:	add    BYTE PTR [rbp+0x0],ah
 1001cb8:	movsxd eax,DWORD PTR [rax]
 1001cba:	je     0x1001cbc
 1001cbc:	imul   eax,DWORD PTR [rax],0x6e006f
 1001cc2:	push   rbx
 1001cc3:	add    BYTE PTR [rax+rax*1+0x72],dh
 1001cc7:	add    BYTE PTR [rcx+0x0],ch
 1001cca:	outs   dx,BYTE PTR ds:[rsi]
 1001ccb:	add    BYTE PTR [rdi+0x0],ah
 1001cce:	add    BYTE PTR [rax],al
 1001cd0:	rex.WB add BYTE PTR [r14+0x0],bpl
 1001cd4:	jo     0x1001cd6
 1001cd6:	jne    0x1001cd8
 1001cd8:	je     0x1001cda
 1001cda:	push   rax
 1001cdb:	add    BYTE PTR [rcx+0x0],ah
 1001cde:	jb     0x1001ce0
 1001ce0:	(bad)  
 1001ce1:	add    BYTE PTR [rbp+0x0],ch
 1001ce4:	add    BYTE PTR gs:[rax+rax*1+0x65],dh
 1001ce9:	add    BYTE PTR [rdx+0x0],dh
 1001cec:	jae    0x1001cee
 1001cee:	add    BYTE PTR [rax],al
 1001cf0:	rex.WR add BYTE PTR [rdi+0x0],r13b
 1001cf4:	outs   dx,DWORD PTR ds:[rsi]
 1001cf5:	add    BYTE PTR [rax+0x0],dh
 1001cf8:	add    BYTE PTR [r14+0x0],r14b
 1001cfc:	add    BYTE PTR gs:[rsi+0x0],ch
 1001d00:	je     0x1001d02
 1001d02:	rex.WRX add BYTE PTR [rcx+0x0],r12b
 1001d06:	ins    DWORD PTR es:[rdi],dx
 1001d07:	add    BYTE PTR [rbp+0x0],ah
 1001d0a:	add    BYTE PTR [rax],al
 1001d0c:	add    BYTE PTR [rax],al
 1001d0e:	add    BYTE PTR [rax],al
 1001d10:	rex.WB add BYTE PTR [r8+rax*1+0x65],sil
 1001d15:	add    BYTE PTR [rbp+0x0],ch
 1001d18:	rex.WB add BYTE PTR [r8+rax*1+0x0],al
 1001d1d:	add    BYTE PTR [rax],al
 1001d1f:	add    BYTE PTR [rbx+0x0],al
 1001d22:	outs   dx,DWORD PTR ds:[rsi]
 1001d23:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1001d27:	add    BYTE PTR [rbp+0x0],ah
 1001d2a:	movsxd eax,DWORD PTR [rax]
 1001d2c:	je     0x1001d2e
 1001d2e:	outs   dx,DWORD PTR ds:[rsi]
 1001d2f:	add    BYTE PTR [rdx+0x0],dh
 1001d32:	push   rsp
 1001d33:	add    BYTE PTR [rcx+0x0],bh
 1001d36:	jo     0x1001d38
 1001d38:	add    BYTE PTR gs:[rbp+0x0],dl
 1001d3c:	rex.WB add BYTE PTR [r8+rax*1+0x0],al
 1001d41:	add    BYTE PTR [rax],al
 1001d43:	add    BYTE PTR [rax],al
 1001d45:	add    BYTE PTR [rax],al
 1001d47:	add    BYTE PTR [rdi+0x0],cl
 1001d4a:	outs   dx,BYTE PTR ds:[rsi]
 1001d4b:	add    BYTE PTR [rbp+0x0],al
 1001d4e:	jb     0x1001d50
 1001d50:	jb     0x1001d52
 1001d52:	outs   dx,DWORD PTR ds:[rsi]
 1001d53:	add    BYTE PTR [rdx+0x0],dh
 1001d56:	add    BYTE PTR [rax],al
 1001d58:	rex.WRXB add BYTE PTR [r14+0x0],r13b
 1001d5c:	push   rdi
 1001d5d:	add    BYTE PTR [rcx+0x0],ah
 1001d60:	jb     0x1001d62
 1001d62:	outs   dx,BYTE PTR ds:[rsi]
 1001d63:	add    BYTE PTR [rcx+0x0],ch
 1001d66:	outs   dx,BYTE PTR ds:[rsi]
 1001d67:	add    BYTE PTR [rdi+0x0],ah
 1001d6a:	add    BYTE PTR [rax],al
 1001d6c:	add    BYTE PTR [rax],al
 1001d6e:	add    BYTE PTR [rax],al
 1001d70:	rex.WRXB add BYTE PTR [r14+0x0],r13b
 1001d74:	push   rax
 1001d75:	add    BYTE PTR [rdx+0x0],dh
 1001d78:	add    BYTE PTR gs:[rbp+0x0],al
 1001d7c:	js     0x1001d7e
 1001d7e:	add    BYTE PTR gs:[rbx+0x0],ah
 1001d82:	jne    0x1001d84
 1001d84:	je     0x1001d86
 1001d86:	add    BYTE PTR gs:[rax],al
 1001d89:	add    BYTE PTR [rax],al
 1001d8b:	add    BYTE PTR [rax],al
 1001d8d:	add    BYTE PTR [rax],al
 1001d8f:	add    BYTE PTR [rdi+0x0],cl
 1001d92:	outs   dx,BYTE PTR ds:[rsi]
 1001d93:	add    BYTE PTR [rax+0x0],dl
 1001d96:	outs   dx,DWORD PTR ds:[rsi]
 1001d97:	add    BYTE PTR [rbx+0x0],dh
 1001d9a:	je     0x1001d9c
 1001d9c:	add    BYTE PTR [r8+0x0],r15b
 1001da0:	add    BYTE PTR gs:[rbx+0x0],ah
 1001da4:	jne    0x1001da6
 1001da6:	je     0x1001da8
 1001da8:	add    BYTE PTR gs:[rax],al
 1001dab:	add    BYTE PTR [rax],al
 1001dad:	add    BYTE PTR [rax],al
 1001daf:	add    BYTE PTR [rdi+0x0],cl
 1001db2:	outs   dx,BYTE PTR ds:[rsi]
 1001db3:	add    BYTE PTR [rax+0x0],dl
 1001db6:	jb     0x1001db8
 1001db8:	outs   dx,DWORD PTR ds:[rsi]
 1001db9:	add    BYTE PTR [rdi+0x0],ah
 1001dbc:	jb     0x1001dbe
 1001dbe:	add    BYTE PTR gs:[rbx+0x0],dh
 1001dc2:	jae    0x1001dc4
 1001dc4:	add    BYTE PTR [rax],al
 1001dc6:	add    BYTE PTR [rax],al
 1001dc8:	push   rbx
 1001dc9:	add    BYTE PTR [rcx+0x0],bh
 1001dcc:	outs   dx,BYTE PTR ds:[rsi]
 1001dcd:	add    BYTE PTR [rbx+0x0],ah
 1001dd0:	push   rdx
 1001dd1:	add    BYTE PTR [rdi+0x0],ch
 1001dd4:	outs   dx,DWORD PTR ds:[rsi]
 1001dd5:	add    BYTE PTR [rax+rax*1+0x0],dh
 1001dd9:	add    BYTE PTR [rax],al
 1001ddb:	add    BYTE PTR [rax],al
 1001ddd:	add    BYTE PTR [rax],al
 1001ddf:	add    BYTE PTR [rbp+0x0],cl
 1001de2:	imul   eax,DWORD PTR [rax],0x720063
 1001de8:	outs   dx,DWORD PTR ds:[rsi]
 1001de9:	add    BYTE PTR [rbx+0x0],dh
 1001dec:	outs   dx,DWORD PTR ds:[rsi]
 1001ded:	add    BYTE PTR [rsi+0x0],ah
 1001df0:	je     0x1001df2
 1001df2:	pop    rdi
 1001df3:	add    BYTE PTR [rax+rax*1+0x61],al
 1001df7:	add    BYTE PTR [rax+rax*1+0x61],dh
 1001dfb:	add    BYTE PTR [rbx+0x0],al
 1001dfe:	outs   dx,DWORD PTR ds:[rsi]
 1001dff:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1001e03:	add    BYTE PTR [rbp+0x0],ah
 1001e06:	movsxd eax,DWORD PTR [rax]
 1001e08:	je     0x1001e0a
 1001e0a:	outs   dx,DWORD PTR ds:[rsi]
 1001e0b:	add    BYTE PTR [rdx+0x0],dh
 1001e0e:	pop    rdi
 1001e0f:	add    BYTE PTR [rbp+0x0],cl
 1001e12:	add    BYTE PTR [rdi+0x0],r10b
 1001e16:	pop    rdi
 1001e17:	add    BYTE PTR [rsi+0x0],dl
 1001e1a:	add    BYTE PTR gs:[rdx+0x0],dh
 1001e1e:	jae    0x1001e20
 1001e20:	imul   eax,DWORD PTR [rax],0x6e006f
 1001e26:	add    BYTE PTR [rax],al
 1001e28:	push   rbx
 1001e29:	add    BYTE PTR [rcx+0x0],bh
 1001e2c:	jae    0x1001e2e
 1001e2e:	je     0x1001e30
 1001e30:	add    BYTE PTR gs:[rbp+0x0],ch
 1001e34:	cmp    al,BYTE PTR [rax]
 1001e36:	cmp    al,BYTE PTR [rax]
 1001e38:	add    BYTE PTR [r8+0x0],r15b
 1001e3c:	add    BYTE PTR gs:[rbx+0x0],ah
 1001e40:	jne    0x1001e42
 1001e42:	je     0x1001e44
 1001e44:	imul   eax,DWORD PTR [rax],0x6e006f
 1001e4a:	rex.WB add BYTE PTR [r14+0x0],bpl
 1001e4e:	jae    0x1001e50
 1001e50:	je     0x1001e52
 1001e52:	(bad)  
 1001e53:	add    BYTE PTR [rsi+0x0],ch
 1001e56:	movsxd eax,DWORD PTR [rax]
 1001e58:	add    BYTE PTR gs:[rdi+0x0],al
 1001e5c:	push   rbp
 1001e5d:	add    BYTE PTR [rcx+0x0],cl
 1001e60:	add    BYTE PTR [rax],r8b
 1001e63:	add    BYTE PTR [rax],al
 1001e65:	add    BYTE PTR [rax],al
 1001e67:	add    BYTE PTR [rbx+0x0],dl
 1001e6a:	jns    0x1001e6c
 1001e6c:	jae    0x1001e6e
 1001e6e:	je     0x1001e70
 1001e70:	add    BYTE PTR gs:[rbp+0x0],ch
 1001e74:	cmp    al,BYTE PTR [rax]
 1001e76:	cmp    al,BYTE PTR [rax]
 1001e78:	push   rax
 1001e79:	add    BYTE PTR [rcx+0x0],ah
 1001e7c:	movsxd eax,DWORD PTR [rax]
 1001e7e:	imul   eax,DWORD PTR [rax],0x61
 1001e81:	add    BYTE PTR [rdi+0x0],ah
 1001e84:	add    BYTE PTR gs:[rcx+0x0],cl
 1001e88:	add    BYTE PTR [rax],r8b
 1001e8b:	add    BYTE PTR [rax],al
 1001e8d:	add    BYTE PTR [rax],al
 1001e8f:	add    BYTE PTR [rbx+0x0],dl
 1001e92:	jns    0x1001e94
 1001e94:	jae    0x1001e96
 1001e96:	je     0x1001e98
 1001e98:	add    BYTE PTR gs:[rbp+0x0],ch
 1001e9c:	cmp    al,BYTE PTR [rax]
 1001e9e:	cmp    al,BYTE PTR [rax]
 1001ea0:	push   rax
 1001ea1:	add    BYTE PTR [rcx+0x0],ah
 1001ea4:	movsxd eax,DWORD PTR [rax]
 1001ea6:	imul   eax,DWORD PTR [rax],0x61
 1001ea9:	add    BYTE PTR [rdi+0x0],ah
 1001eac:	add    BYTE PTR gs:[rsi+0x0],cl
 1001eb0:	(bad)  
 1001eb1:	add    BYTE PTR [rbp+0x0],ch
 1001eb4:	add    BYTE PTR gs:[rax],al
 1001eb7:	add    BYTE PTR [rbp+0x0],dl
 1001eba:	jae    0x1001ebc
 1001ebc:	add    BYTE PTR gs:[rdx+0x0],dh
 1001ec0:	cmp    al,BYTE PTR [rax]
 1001ec2:	cmp    al,BYTE PTR [rax]
 1001ec4:	rex.WR add BYTE PTR [rdi+0x0],r13b
 1001ec8:	add    BYTE PTR [ecx+0x0],cl
 1001ecc:	add    BYTE PTR [rax],r8b
 1001ecf:	add    BYTE PTR [rax],bh
 1001ed1:	add    BYTE PTR [rax+rax*1],dh
 1001ed4:	rex.XB add BYTE PTR [r13+0x0],al
 1001ed8:	rex.XB add BYTE PTR [r8],dil
 1001edb:	add    BYTE PTR [rsi],dh
 1001edd:	add    BYTE PTR [rcx],dh
 1001edf:	add    BYTE PTR [rip+0x36004400],ch        # 0x370062e5
 1001ee5:	add    BYTE PTR [rcx],dh
 1001ee7:	add    BYTE PTR [rcx],bh
 1001ee9:	add    BYTE PTR [rip+0x33003400],ch        # 0x340052ef
 1001eef:	add    BYTE PTR [rbx],dh
 1001ef1:	add    BYTE PTR [rax+rax*1+0x2d],al
 1001ef5:	add    BYTE PTR [rax],bh
 1001ef7:	add    BYTE PTR [rsi],dh
 1001ef9:	add    BYTE PTR [rsi+0x0],al
 1001efc:	rex.X add BYTE PTR [rip+0x42003000],bpl        # 0x43004f03
 1001f03:	add    BYTE PTR [rdx+0x0],al
 1001f06:	cmp    BYTE PTR [rax],al
 1001f08:	xor    eax,0x41003100
 1001f0d:	add    BYTE PTR [rsi+0x0],al
 1001f10:	xor    al,0x0
 1001f12:	xor    eax,0x41003400
	...
 1001f1f:	add    BYTE PTR [rcx+0x0],al
 1001f22:	jo     0x1001f24
 1001f24:	jo     0x1001f26
 1001f26:	ins    BYTE PTR es:[rdi],dx
 1001f27:	add    BYTE PTR [rcx+0x0],ch
 1001f2a:	movsxd eax,DWORD PTR [rax]
 1001f2c:	(bad)  
 1001f2d:	add    BYTE PTR [rax+rax*1+0x69],dh
 1001f31:	add    BYTE PTR [rdi+0x0],ch
 1001f34:	outs   dx,BYTE PTR ds:[rsi]
 1001f35:	add    BYTE PTR [rdx],bh
 1001f37:	add    BYTE PTR [rdx],bh
 1001f39:	add    BYTE PTR [rcx+0x0],cl
 1001f3c:	outs   dx,BYTE PTR ds:[rsi]
 1001f3d:	add    BYTE PTR [rcx+0x0],ch
 1001f40:	je     0x1001f42
 1001f42:	add    BYTE PTR [rax],al
 1001f44:	add    BYTE PTR [rax],al
 1001f46:	add    BYTE PTR [rax],al
 1001f48:	add    BYTE PTR [rbx+0x0],r8b
 1001f4c:	add    BYTE PTR [r8+0x0],r11b
 1001f50:	add    BYTE PTR [r11+0x0],r8b
	...
 1001f60:	rex.XB add BYTE PTR [r15+0x0],bpl
 1001f64:	outs   dx,BYTE PTR ds:[rsi]
 1001f65:	add    BYTE PTR [rbx+0x0],dh
 1001f68:	outs   dx,DWORD PTR ds:[rsi]
 1001f69:	add    BYTE PTR [rax+rax*1+0x65],ch
 1001f6d:	add    BYTE PTR [rax],ah
 1001f6f:	add    BYTE PTR [rbx+0x0],ah
 1001f72:	outs   dx,DWORD PTR ds:[rsi]
 1001f73:	add    BYTE PTR [rax+rax*1+0x65],ah
 1001f77:	add    BYTE PTR [rax],ah
 1001f79:	add    BYTE PTR [rax+0x0],dh
 1001f7c:	(bad)  
 1001f7d:	add    BYTE PTR [rdi+0x0],ah
 1001f80:	add    BYTE PTR gs:[rax],ah
 1001f83:	add    BYTE PTR [rax],ch
 1001f85:	add    BYTE PTR [rbp+0x0],ch
 1001f88:	pop    rdi
 1001f89:	add    BYTE PTR [rbx+0x0],ah
 1001f8c:	outs   dx,DWORD PTR ds:[rsi]
 1001f8d:	add    BYTE PTR [rax+rax*1+0x65],ah
 1001f91:	add    BYTE PTR [rax+0x0],dl
 1001f94:	(bad)  
 1001f95:	add    BYTE PTR [rdi+0x0],ah
 1001f98:	add    BYTE PTR gs:[rcx],ch
 1001f9b:	add    BYTE PTR [rdx],bh
 1001f9d:	add    BYTE PTR [rax],ah
 1001f9f:	add    BYTE PTR [rip+0x6400],ah        # 0x10083a5
	...
 1001fad:	add    BYTE PTR [rax],al
 1001faf:	add    BYTE PTR [rbp+0x0],dl
 1001fb2:	outs   dx,BYTE PTR ds:[rsi]
 1001fb3:	add    BYTE PTR [rcx+0x0],ah
 1001fb6:	(bad)  
 1001fb7:	add    BYTE PTR [rax+rax*1+0x65],ch
 1001fbb:	add    BYTE PTR [rax],ah
 1001fbd:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1001fc1:	add    BYTE PTR [rax],ah
 1001fc3:	add    BYTE PTR [rdx+0x0],dh
 1001fc6:	add    BYTE PTR gs:[rax+rax*1+0x72],dh
 1001fcb:	add    BYTE PTR [rcx+0x0],ch
 1001fce:	add    BYTE PTR gs:[rsi+0x0],dh
 1001fd2:	add    BYTE PTR gs:[rax],ah
 1001fd5:	add    BYTE PTR [rbx+0x0],dh
 1001fd8:	je     0x1001fda
 1001fda:	add    BYTE PTR fs:[rdi+0x0],ch
 1001fde:	jne    0x1001fe0
 1001fe0:	je     0x1001fe2
 1001fe2:	and    BYTE PTR [rax],al
 1001fe4:	push   0x6e006100
 1001fe9:	add    BYTE PTR [rax+rax*1+0x6c],ah
 1001fed:	add    BYTE PTR [rbp+0x0],ah
 1001ff0:	and    BYTE PTR [rax],al
 1001ff2:	sub    BYTE PTR [rax],al
 1001ff4:	rex.RXB add BYTE PTR [r13+0x0],r12b
 1001ff8:	je     0x1001ffa
 1001ffa:	push   rbx
 1001ffb:	add    BYTE PTR [rax+rax*1+0x64],dh
 1001fff:	add    BYTE PTR [rax+0x0],cl
 1002002:	(bad)  
 1002003:	add    BYTE PTR [rsi+0x0],ch
 1002006:	add    BYTE PTR fs:[rax+rax*1+0x65],ch
 100200b:	add    BYTE PTR [rax],ah
 100200d:	add    BYTE PTR [rdx+0x0],dh
 1002010:	add    BYTE PTR gs:[rax+rax*1+0x75],dh
 1002015:	add    BYTE PTR [rdx+0x0],dh
 1002018:	outs   dx,BYTE PTR ds:[rsi]
 1002019:	add    BYTE PTR [rbp+0x0],ah
 100201c:	add    BYTE PTR fs:[rax],ah
 100201f:	add    BYTE PTR [rip+0x38003000],ah        # 0x39005025
 1002025:	add    BYTE PTR [rax+0x0],bh
 1002028:	sub    DWORD PTR [rax],eax
 100202a:	add    BYTE PTR [rax],al
 100202c:	add    BYTE PTR [rax],al
 100202e:	add    BYTE PTR [rax],al
 1002030:	rex.RXB add BYTE PTR [r13+0x0],r12b
 1002034:	je     0x1002036
 1002036:	rex.XB add BYTE PTR [r15+0x0],bpl
 100203a:	outs   dx,BYTE PTR ds:[rsi]
 100203b:	add    BYTE PTR [rbx+0x0],dh
 100203e:	outs   dx,DWORD PTR ds:[rsi]
 100203f:	add    BYTE PTR [rax+rax*1+0x65],ch
 1002043:	add    BYTE PTR [rbp+0x0],cl
 1002046:	outs   dx,DWORD PTR ds:[rsi]
 1002047:	add    BYTE PTR [rax+rax*1+0x65],ah
 100204b:	add    BYTE PTR [rax],ah
 100204d:	add    BYTE PTR [rsi+0x0],ah
 1002050:	(bad)  
 1002051:	add    BYTE PTR [rcx+0x0],ch
 1002054:	ins    BYTE PTR es:[rdi],dx
 1002055:	add    BYTE PTR [rbp+0x0],ah
 1002058:	add    BYTE PTR fs:[rsi],ch
 100205b:	add    BYTE PTR [rax],al
 100205d:	add    BYTE PTR [rax],al
 100205f:	add    BYTE PTR [rbx+0x0],dl
 1002062:	add    BYTE PTR gs:[rax+rax*1+0x43],dh
 1002067:	add    BYTE PTR [rdi+0x0],ch
 100206a:	outs   dx,BYTE PTR ds:[rsi]
 100206b:	add    BYTE PTR [rbx+0x0],dh
 100206e:	outs   dx,DWORD PTR ds:[rsi]
 100206f:	add    BYTE PTR [rax+rax*1+0x65],ch
 1002073:	add    BYTE PTR [rbp+0x0],cl
 1002076:	outs   dx,DWORD PTR ds:[rsi]
 1002077:	add    BYTE PTR [rax+rax*1+0x65],ah
 100207b:	add    BYTE PTR [rax],ah
 100207d:	add    BYTE PTR [rsi+0x0],ah
 1002080:	(bad)  
 1002081:	add    BYTE PTR [rcx+0x0],ch
 1002084:	ins    BYTE PTR es:[rdi],dx
 1002085:	add    BYTE PTR [rbp+0x0],ah
 1002088:	add    BYTE PTR fs:[rsi],ch
 100208b:	add    BYTE PTR [rax],al
 100208d:	add    BYTE PTR [rax],al
 100208f:	add    BYTE PTR [rcx+0x0],al
 1002092:	jo     0x1002094
 1002094:	jo     0x1002096
 1002096:	ins    BYTE PTR es:[rdi],dx
 1002097:	add    BYTE PTR [rcx+0x0],ch
 100209a:	movsxd eax,DWORD PTR [rax]
 100209c:	(bad)  
 100209d:	add    BYTE PTR [rax+rax*1+0x69],dh
 10020a1:	add    BYTE PTR [rdi+0x0],ch
 10020a4:	outs   dx,BYTE PTR ds:[rsi]
 10020a5:	add    BYTE PTR [rdx],bh
 10020a7:	add    BYTE PTR [rdx],bh
 10020a9:	add    BYTE PTR [rbp+0x0],cl
 10020ac:	(bad)  
 10020ad:	add    BYTE PTR [rcx+0x0],ch
 10020b0:	outs   dx,BYTE PTR ds:[rsi]
	...
 10020bd:	add    BYTE PTR [rax],al
 10020bf:	add    BYTE PTR [rbx+0x0],al
 10020c2:	outs   dx,DWORD PTR ds:[rsi]
 10020c3:	add    BYTE PTR [rcx+0x0],cl
 10020c6:	outs   dx,BYTE PTR ds:[rsi]
 10020c7:	add    BYTE PTR [rcx+0x0],ch
 10020ca:	je     0x10020cc
 10020cc:	imul   eax,DWORD PTR [rax],0x6c0061
 10020d2:	imul   eax,DWORD PTR [rax],0x65007a
 10020d8:	add    BYTE PTR [r8+0x0],r15b
 10020dc:	sub    BYTE PTR [rax],al
 10020de:	rex.WRX add BYTE PTR [rbp+0x0],r10b
 10020e2:	rex.WR add BYTE PTR [rax+rax*1+0x2c],r9b
 10020e7:	add    BYTE PTR [rax],ah
 10020e9:	add    BYTE PTR [rbx+0x0],al
 10020ec:	rex.WRXB add BYTE PTR [r9+0x0],r9b
 10020f0:	rex.WRX add BYTE PTR [rcx+0x0],r9b
 10020f4:	push   rsp
 10020f5:	add    BYTE PTR [rdi+0x0],bl
 10020f8:	rex.WRB add BYTE PTR [r13+0x0],r10b
 10020fc:	rex.WR add BYTE PTR [rax+rax*1+0x49],r10b
 1002101:	add    BYTE PTR [rax+rax*1+0x48],dl
 1002105:	add    BYTE PTR [rdx+0x0],dl
 1002108:	add    BYTE PTR [r9+0x0],r8b
 100210c:	add    BYTE PTR [rbp+0x0],r8b
 1002110:	add    BYTE PTR [rcx],r13b
 1002113:	add    BYTE PTR [rax],ah
 1002115:	add    BYTE PTR [rsi+0x0],ah
 1002118:	(bad)  
 1002119:	add    BYTE PTR [rcx+0x0],ch
 100211c:	ins    BYTE PTR es:[rdi],dx
 100211d:	add    BYTE PTR [rbp+0x0],ah
 1002120:	add    BYTE PTR fs:[rax],al
 1002123:	add    BYTE PTR [rax],al
 1002125:	add    BYTE PTR [rax],al
 1002127:	add    BYTE PTR [rbp+0x0],cl
 100212a:	(bad)  
 100212b:	add    BYTE PTR [rcx+0x0],ch
 100212e:	outs   dx,BYTE PTR ds:[rsi]
	...
 1002137:	add    BYTE PTR [rdi+0x0],bl
 100213a:	(bad)  
 100213b:	add    BYTE PTR [rbp+0x0],ah
 100213e:	add    BYTE PTR [ecx+0x0],ch
 1002142:	outs   dx,BYTE PTR ds:[rsi]
 1002143:	add    BYTE PTR [rax+rax*1+0x68],dh
 1002147:	add    BYTE PTR [rdx+0x0],dh
 100214a:	add    BYTE PTR gs:[rcx+0x0],ah
 100214e:	add    BYTE PTR fs:[rbp+0x0],ah
 1002152:	js     0x1002154
 1002154:	and    BYTE PTR [rax],al
 1002156:	data16 add BYTE PTR [rcx+0x0],ah
 100215a:	imul   eax,DWORD PTR [rax],0x65006c
 1002160:	add    BYTE PTR fs:[rax],al
	...
 100216f:	add    BYTE PTR [rbx+0x0],dl
 1002172:	je     0x1002174
 1002174:	(bad)  
 1002175:	add    BYTE PTR [rdx+0x0],dh
 1002178:	je     0x100217a
 100217a:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 100217f:	add    BYTE PTR [rbx+0x0],ah
 1002182:	outs   dx,DWORD PTR ds:[rsi]
 1002183:	add    BYTE PTR [rsi+0x0],ch
 1002186:	je     0x1002188
 1002188:	imul   eax,DWORD PTR [rax],0x75006e
 100218e:	outs   dx,DWORD PTR ds:[rsi]
 100218f:	add    BYTE PTR [rbp+0x0],dh
 1002192:	jae    0x1002194
 1002194:	and    BYTE PTR [rax],al
 1002196:	ins    DWORD PTR es:[rdi],dx
 1002197:	add    BYTE PTR [rdi+0x0],ch
 100219a:	add    BYTE PTR fs:[rbp+0x0],ah
 100219e:	and    BYTE PTR [rax],al
 10021a0:	movsxd eax,DWORD PTR [rax]
 10021a2:	outs   dx,DWORD PTR ds:[rsi]
 10021a3:	add    BYTE PTR [rax+rax*1+0x6c],ch
 10021a7:	add    BYTE PTR [rbp+0x0],ah
 10021aa:	movsxd eax,DWORD PTR [rax]
 10021ac:	je     0x10021ae
 10021ae:	imul   eax,DWORD PTR [rax],0x6e006f
 10021b4:	and    BYTE PTR [rax],al
 10021b6:	outs   dx,DWORD PTR ds:[rsi]
 10021b7:	add    BYTE PTR [rsi+0x0],ch
 10021ba:	and    BYTE PTR [rax],al
 10021bc:	je     0x10021be
 10021be:	push   0x65007200
 10021c3:	add    BYTE PTR [rcx+0x0],ah
 10021c6:	add    BYTE PTR fs:[rax],ah
 10021c9:	add    BYTE PTR [rip+0x6400],ah        # 0x10085cf
 10021cf:	add    BYTE PTR [rdi+0x0],dl
 10021d2:	(bad)  
 10021d3:	add    BYTE PTR [rcx+0x0],ch
 10021d6:	je     0x10021d8
 10021d8:	imul   eax,DWORD PTR [rax],0x67006e
 10021de:	and    BYTE PTR [rax],al
 10021e0:	data16 add BYTE PTR [rdi+0x0],ch
 10021e4:	jb     0x10021e6
 10021e6:	and    BYTE PTR [rax],al
 10021e8:	movsxd eax,DWORD PTR [rax]
 10021ea:	outs   dx,DWORD PTR ds:[rsi]
 10021eb:	add    BYTE PTR [rax+rax*1+0x6c],ch
 10021ef:	add    BYTE PTR [rbp+0x0],ah
 10021f2:	movsxd eax,DWORD PTR [rax]
 10021f4:	je     0x10021f6
 10021f6:	imul   eax,DWORD PTR [rax],0x6e006f
 10021fc:	and    BYTE PTR [rax],al
 10021fe:	je     0x1002200
 1002200:	outs   dx,DWORD PTR ds:[rsi]
 1002201:	add    BYTE PTR [rax],ah
 1002203:	add    BYTE PTR [rbp+0x0],ah
 1002206:	js     0x1002208
 1002208:	imul   eax,DWORD PTR [rax],0x200074
 100220e:	outs   dx,DWORD PTR ds:[rsi]
 100220f:	add    BYTE PTR [rdx+0x0],dh
 1002212:	and    BYTE PTR [rax],al
 1002214:	jae    0x1002216
 1002216:	je     0x1002218
 1002218:	outs   dx,DWORD PTR ds:[rsi]
 1002219:	add    BYTE PTR [rax+0x0],dh
 100221c:	and    BYTE PTR [rax],al
 100221e:	add    BYTE PTR gs:[rsi+0x0],dh
 1002222:	add    BYTE PTR gs:[rsi+0x0],ch
 1002226:	je     0x1002228
 1002228:	and    BYTE PTR [rax],al
 100222a:	je     0x100222c
 100222c:	outs   dx,DWORD PTR ds:[rsi]
 100222d:	add    BYTE PTR [rax],ah
 100222f:	add    BYTE PTR [rdx+0x0],ah
 1002232:	add    BYTE PTR gs:[rax],ah
 1002235:	add    BYTE PTR [rbx+0x0],dh
 1002238:	imul   eax,DWORD PTR [rax],0x6e0067
 100223e:	(bad)  
 100223f:	add    BYTE PTR [rax+rax*1+0x65],ch
 1002243:	add    BYTE PTR [rax+rax*1+0x0],ah
	...
 100224f:	add    BYTE PTR [rbx+0x0],al
 1002252:	outs   dx,DWORD PTR ds:[rsi]
 1002253:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1002257:	add    BYTE PTR [rbp+0x0],ah
 100225a:	movsxd eax,DWORD PTR [rax]
 100225c:	je     0x100225e
 100225e:	imul   eax,DWORD PTR [rax],0x6e006f
 1002264:	and    BYTE PTR [rax],al
 1002266:	je     0x1002268
 1002268:	push   0x65007200
 100226d:	add    BYTE PTR [rcx+0x0],ah
 1002270:	add    BYTE PTR fs:[rax],ah
 1002273:	add    BYTE PTR [rdx+0x0],dh
 1002276:	add    BYTE PTR gs:[rax+rax*1+0x75],dh
 100227b:	add    BYTE PTR [rdx+0x0],dh
 100227e:	outs   dx,BYTE PTR ds:[rsi]
 100227f:	add    BYTE PTR [rbp+0x0],ah
 1002282:	add    BYTE PTR fs:[rax],ah
 1002285:	add    BYTE PTR [rax],ch
 1002287:	add    BYTE PTR [rip+0x38003000],ah        # 0x3900528d
 100228d:	add    BYTE PTR [rax+0x0],bh
 1002290:	sub    DWORD PTR [rax],eax
 1002292:	add    BYTE PTR [rax],al
 1002294:	add    BYTE PTR [rax],al
 1002296:	add    BYTE PTR [rax],al
 1002298:	add    BYTE PTR [r15+0x0],spl
 100229c:	add    BYTE PTR gs:[rsi+0x0],ch
 10022a0:	je     0x10022a2
 10022a2:	and    BYTE PTR [rax],al
 10022a4:	jae    0x10022a6
 10022a6:	je     0x10022a8
 10022a8:	outs   dx,DWORD PTR ds:[rsi]
 10022a9:	add    BYTE PTR [rax+0x0],dh
 10022ac:	and    BYTE PTR [rax],al
 10022ae:	add    BYTE PTR gs:[rsi+0x0],dh
 10022b2:	add    BYTE PTR gs:[rsi+0x0],ch
 10022b6:	je     0x10022b8
 10022b8:	and    BYTE PTR [rax],al
 10022ba:	jae    0x10022bc
 10022bc:	imul   eax,DWORD PTR [rax],0x6e0067
 10022c2:	(bad)  
 10022c3:	add    BYTE PTR [rax+rax*1+0x65],ch
 10022c7:	add    BYTE PTR [rax+rax*1+0x0],ah
 10022cb:	add    BYTE PTR [rax],al
 10022cd:	add    BYTE PTR [rax],al
 10022cf:	add    BYTE PTR [rdi+0x0],dl
 10022d2:	(bad)  
 10022d3:	add    BYTE PTR [rcx+0x0],ch
 10022d6:	je     0x10022d8
 10022d8:	rex.RX add BYTE PTR [rdi+0x0],r13b
 10022dc:	jb     0x10022de
 10022de:	rex.WRB add BYTE PTR [r13+0x0],r14b
 10022e2:	ins    BYTE PTR es:[rdi],dx
 10022e3:	add    BYTE PTR [rax+rax*1+0x69],dh
 10022e7:	add    BYTE PTR [rax+0x0],dh
 10022ea:	ins    BYTE PTR es:[rdi],dx
 10022eb:	add    BYTE PTR [rbp+0x0],ah
 10022ee:	rex.WRXB add BYTE PTR [r10+0x0],r12b
 10022f2:	push   0x0
 10022f4:	add    BYTE PTR gs:[rbx+0x0],ah
 10022f8:	je     0x10022fa
 10022fa:	jae    0x10022fc
 10022fc:	and    BYTE PTR [rax],al
 10022fe:	data16 add BYTE PTR [rcx+0x0],ah
 1002302:	imul   eax,DWORD PTR [rax],0x65006c
 1002308:	add    BYTE PTR fs:[rax],al
 100230b:	add    BYTE PTR [rax],al
 100230d:	add    BYTE PTR [rax],al
 100230f:	add    BYTE PTR [rdi+0x0],dl
 1002312:	(bad)  
 1002313:	add    BYTE PTR [rcx+0x0],ch
 1002316:	je     0x1002318
 1002318:	imul   eax,DWORD PTR [rax],0x67006e
 100231e:	and    BYTE PTR [rax],al
 1002320:	data16 add BYTE PTR [rdi+0x0],ch
 1002324:	jb     0x1002326
 1002326:	and    BYTE PTR [rax],al
 1002328:	movsxd eax,DWORD PTR [rax]
 100232a:	outs   dx,DWORD PTR ds:[rsi]
 100232b:	add    BYTE PTR [rax+rax*1+0x6c],ch
 100232f:	add    BYTE PTR [rbp+0x0],ah
 1002332:	movsxd eax,DWORD PTR [rax]
 1002334:	je     0x1002336
 1002336:	imul   eax,DWORD PTR [rax],0x6e006f
 100233c:	and    BYTE PTR [rax],al
 100233e:	je     0x1002340
 1002340:	push   0x65007200
 1002345:	add    BYTE PTR [rcx+0x0],ah
 1002348:	add    BYTE PTR fs:[rax],ah
 100234b:	add    BYTE PTR [rax+rax*1+0x6f],dh
 100234f:	add    BYTE PTR [rax],ah
 1002351:	add    BYTE PTR [rbp+0x0],ah
 1002354:	js     0x1002356
 1002356:	imul   eax,DWORD PTR [rax],0x74
 100235c:	add    BYTE PTR [rax],al
 100235e:	add    BYTE PTR [rax],al
 1002360:	rex.XB add BYTE PTR [r15+0x0],bpl
 1002364:	ins    BYTE PTR es:[rdi],dx
 1002365:	add    BYTE PTR [rax+rax*1+0x65],ch
 1002369:	add    BYTE PTR [rbx+0x0],ah
 100236c:	je     0x100236e
 100236e:	imul   eax,DWORD PTR [rax],0x6e006f
 1002374:	and    BYTE PTR [rax],al
 1002376:	je     0x1002378
 1002378:	push   0x65007200
 100237d:	add    BYTE PTR [rcx+0x0],ah
 1002380:	add    BYTE PTR fs:[rax],ah
 1002383:	add    BYTE PTR [rbx+0x0],dh
 1002386:	imul   eax,DWORD PTR [rax],0x6e0067
 100238c:	(bad)  
 100238d:	add    BYTE PTR [rax+rax*1+0x65],ch
 1002391:	add    BYTE PTR [rax+rax*1+0x0],ah
 1002395:	add    BYTE PTR [rax],al
 1002397:	add    BYTE PTR [rdi+0x0],dl
 100239a:	(bad)  
 100239b:	add    BYTE PTR [rcx+0x0],ch
 100239e:	je     0x10023a0
 10023a0:	rex.RX add BYTE PTR [rdi+0x0],r13b
 10023a4:	jb     0x10023a6
 10023a6:	push   rbx
 10023a7:	add    BYTE PTR [rcx+0x0],ch
 10023aa:	outs   dx,BYTE PTR ds:[rsi]
 10023ab:	add    BYTE PTR [rdi+0x0],ah
 10023ae:	ins    BYTE PTR es:[rdi],dx
 10023af:	add    BYTE PTR [rbp+0x0],ah
 10023b2:	rex.WRXB add BYTE PTR [r10+0x0],r12b
 10023b6:	push   0x0
 10023b8:	add    BYTE PTR gs:[rbx+0x0],ah
 10023bc:	je     0x10023be
 10023be:	and    BYTE PTR [rax],al
 10023c0:	data16 add BYTE PTR [rcx+0x0],ah
 10023c4:	imul   eax,DWORD PTR [rax],0x65006c
 10023ca:	add    BYTE PTR fs:[rax],al
 10023cd:	add    BYTE PTR [rax],al
 10023cf:	add    BYTE PTR [rbx+0x0],al
 10023d2:	ins    BYTE PTR es:[rdi],dx
 10023d3:	add    BYTE PTR [rdi+0x0],ch
 10023d6:	jae    0x10023d8
 10023d8:	add    BYTE PTR gs:[rax+0x0],cl
 10023dc:	(bad)  
 10023dd:	add    BYTE PTR [rsi+0x0],ch
 10023e0:	add    BYTE PTR fs:[rax+rax*1+0x65],ch
 10023e5:	add    BYTE PTR [rax],ah
 10023e7:	add    BYTE PTR [rsi+0x0],ah
 10023ea:	(bad)  
 10023eb:	add    BYTE PTR [rcx+0x0],ch
 10023ee:	ins    BYTE PTR es:[rdi],dx
 10023ef:	add    BYTE PTR [rbp+0x0],ah
 10023f2:	add    BYTE PTR fs:[rax],al
	...
 10023fd:	add    BYTE PTR [rax],al
 10023ff:	add    BYTE PTR [rbx+0x0],dl
 1002402:	je     0x1002404
 1002404:	(bad)  
 1002405:	add    BYTE PTR [rdx+0x0],dh
 1002408:	je     0x100240a
 100240a:	imul   eax,DWORD PTR [rax],0x67006e
 1002410:	and    BYTE PTR [rax],al
 1002412:	movsxd eax,DWORD PTR [rax]
 1002414:	outs   dx,DWORD PTR ds:[rsi]
 1002415:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1002419:	add    BYTE PTR [rbp+0x0],ah
 100241c:	movsxd eax,DWORD PTR [rax]
 100241e:	je     0x1002420
 1002420:	imul   eax,DWORD PTR [rax],0x6e006f
 1002426:	and    BYTE PTR [rax],al
 1002428:	outs   dx,DWORD PTR ds:[rsi]
 1002429:	add    BYTE PTR [rsi+0x0],ch
 100242c:	and    BYTE PTR [rax],al
 100242e:	ins    DWORD PTR es:[rdi],dx
 100242f:	add    BYTE PTR [rcx+0x0],ah
 1002432:	imul   eax,DWORD PTR [rax],0x20006e
 1002438:	je     0x100243a
 100243a:	push   0x65007200
 100243f:	add    BYTE PTR [rcx+0x0],ah
 1002442:	add    BYTE PTR fs:[rax],ah
 1002445:	add    BYTE PTR [rax],ch
 1002447:	add    BYTE PTR [rsi+0x0],ch
 100244a:	outs   dx,DWORD PTR ds:[rsi]
 100244b:	add    BYTE PTR [rax+rax*1+0x20],dh
 100244f:	add    BYTE PTR [rbx+0x0],ah
 1002452:	outs   dx,DWORD PTR ds:[rsi]
 1002453:	add    BYTE PTR [rsi+0x0],ch
 1002456:	je     0x1002458
 1002458:	imul   eax,DWORD PTR [rax],0x75006e
 100245e:	outs   dx,DWORD PTR ds:[rsi]
 100245f:	add    BYTE PTR [rbp+0x0],dh
 1002462:	jae    0x1002464
 1002464:	and    BYTE PTR [rax],al
 1002466:	ins    DWORD PTR es:[rdi],dx
 1002467:	add    BYTE PTR [rdi+0x0],ch
 100246a:	add    BYTE PTR fs:[rbp+0x0],ah
 100246e:	sub    DWORD PTR [rax],eax
	...
 1002478:	push   rbx
 1002479:	add    BYTE PTR [rax+rax*1+0x61],dh
 100247d:	add    BYTE PTR [rdx+0x0],dh
 1002480:	je     0x1002482
 1002482:	imul   eax,DWORD PTR [rax],0x67006e
 1002488:	and    BYTE PTR [rax],al
 100248a:	jne    0x100248c
 100248c:	jo     0x100248e
 100248e:	ins    BYTE PTR es:[rdi],dx
 100248f:	add    BYTE PTR [rdi+0x0],ch
 1002492:	(bad)  
 1002493:	add    BYTE PTR [rax+rax*1+0x0],ah
	...
 100249f:	add    BYTE PTR [rbx+0x0],al
 10024a2:	add    BYTE PTR [rcx+0x0],r12b
 10024a6:	je     0x10024a8
 10024a8:	(bad)  
 10024a9:	add    BYTE PTR [rbx+0x0],al
 10024ac:	outs   dx,DWORD PTR ds:[rsi]
 10024ad:	add    BYTE PTR [rax+rax*1+0x6c],ch
 10024b1:	add    BYTE PTR [rbp+0x0],ah
 10024b4:	movsxd eax,DWORD PTR [rax]
 10024b6:	je     0x10024b8
 10024b8:	outs   dx,DWORD PTR ds:[rsi]
 10024b9:	add    BYTE PTR [rdx+0x0],dh
 10024bc:	rex.XB add BYTE PTR [r15+0x0],bpl
 10024c0:	outs   dx,BYTE PTR ds:[rsi]
 10024c1:	add    BYTE PTR [rax+rax*1+0x72],dh
 10024c5:	add    BYTE PTR [rdi+0x0],ch
 10024c8:	ins    BYTE PTR es:[rdi],dx
 10024c9:	add    BYTE PTR [rax+rax*1+0x65],ch
 10024cd:	add    BYTE PTR [rdx+0x0],dh
 10024d0:	rex.RX add BYTE PTR [rcx+0x0],r12b
 10024d4:	movsxd eax,DWORD PTR [rax]
 10024d6:	je     0x10024d8
 10024d8:	outs   dx,DWORD PTR ds:[rsi]
 10024d9:	add    BYTE PTR [rdx+0x0],dh
 10024dc:	jns    0x10024de
 10024de:	cmp    al,BYTE PTR [rax]
 10024e0:	cmp    al,BYTE PTR [rax]
 10024e2:	rex.XB add BYTE PTR [r10+0x0],sil
 10024e6:	add    BYTE PTR gs:[rcx+0x0],ah
 10024ea:	je     0x10024ec
 10024ec:	add    BYTE PTR gs:[rbx+0x0],al
 10024f0:	outs   dx,DWORD PTR ds:[rsi]
 10024f1:	add    BYTE PTR [rsi+0x0],ch
 10024f4:	je     0x10024f6
 10024f6:	jb     0x10024f8
 10024f8:	outs   dx,DWORD PTR ds:[rsi]
 10024f9:	add    BYTE PTR [rax+rax*1+0x6c],ch
 10024fd:	add    BYTE PTR [rbp+0x0],ah
 1002500:	jb     0x1002502
 1002502:	rex.WB add BYTE PTR [r14+0x0],bpl
 1002506:	jae    0x1002508
 1002508:	je     0x100250a
 100250a:	(bad)  
 100250b:	add    BYTE PTR [rsi+0x0],ch
 100250e:	movsxd eax,DWORD PTR [rax]
 1002510:	add    BYTE PTR gs:[rax],ah
 1002513:	add    BYTE PTR [rsi+0x0],ah
 1002516:	(bad)  
 1002517:	add    BYTE PTR [rcx+0x0],ch
 100251a:	ins    BYTE PTR es:[rdi],dx
 100251b:	add    BYTE PTR [rbp+0x0],ah
 100251e:	add    BYTE PTR fs:[rax],ah
 1002521:	add    BYTE PTR [rax],ch
 1002523:	add    BYTE PTR [rip+0x38003000],ah        # 0x39005529
 1002529:	add    BYTE PTR [rax+0x0],bh
 100252c:	sub    DWORD PTR [rax],eax
 100252e:	add    BYTE PTR [rax],al
 1002530:	add    BYTE PTR [r8+0x0],sil
 1002534:	jo     0x1002536
 1002536:	ins    BYTE PTR es:[rdi],dx
 1002537:	add    BYTE PTR [rcx+0x0],ch
 100253a:	movsxd eax,DWORD PTR [rax]
 100253c:	(bad)  
 100253d:	add    BYTE PTR [rax+rax*1+0x69],dh
 1002541:	add    BYTE PTR [rdi+0x0],ch
 1002544:	outs   dx,BYTE PTR ds:[rsi]
 1002545:	add    BYTE PTR [rdx],bh
 1002547:	add    BYTE PTR [rdx],bh
 1002549:	add    BYTE PTR [rax+0x0],dl
 100254c:	(bad)  
 100254d:	add    BYTE PTR [rdx+0x0],dh
 1002550:	jae    0x1002552
 1002552:	add    BYTE PTR gs:[rbx+0x0],al
 1002556:	outs   dx,DWORD PTR ds:[rsi]
 1002557:	add    BYTE PTR [rbp+0x0],ch
 100255a:	ins    DWORD PTR es:[rdi],dx
 100255b:	add    BYTE PTR [rcx+0x0],ah
 100255e:	outs   dx,BYTE PTR ds:[rsi]
 100255f:	add    BYTE PTR [rax+rax*1+0x4c],ah
 1002563:	add    BYTE PTR [rcx+0x0],ch
 1002566:	outs   dx,BYTE PTR ds:[rsi]
 1002567:	add    BYTE PTR [rbp+0x0],ah
 100256a:	add    BYTE PTR [rax],al
 100256c:	add    BYTE PTR [rax],al
 100256e:	add    BYTE PTR [rax],al
 1002570:	push   rax
 1002571:	add    BYTE PTR [rdx+0x0],dh
 1002574:	imul   eax,DWORD PTR [rax],0x74006e
 100257a:	rex.XB add BYTE PTR [r15+0x0],bpl
 100257e:	outs   dx,BYTE PTR ds:[rsi]
 100257f:	add    BYTE PTR [rbx+0x0],dh
 1002582:	outs   dx,DWORD PTR ds:[rsi]
 1002583:	add    BYTE PTR [rax+rax*1+0x65],ch
 1002587:	add    BYTE PTR [rbp+0x0],cl
 100258a:	jae    0x100258c
 100258c:	add    BYTE PTR [edx],bh
 100258f:	add    BYTE PTR [rax],ah
 1002591:	add    BYTE PTR [rip+0x7300],ah        # 0x1009897
 1002597:	add    BYTE PTR [rip+0xa00],cl        # 0x1002f9d
 100259d:	add    BYTE PTR [rax],al
 100259f:	add    BYTE PTR [rax],ah
 10025a1:	add    BYTE PTR [rip+0x2e000a00],cl        # 0x2f002fa7
	...
 10025af:	add    BYTE PTR [rdi+0x0],ch
 10025b2:	js     0x10025b4
 10025b4:	and    eax,0x7800
 10025b9:	add    BYTE PTR [rax],al
 10025bb:	add    BYTE PTR [rax],al
 10025bd:	add    BYTE PTR [rax],al
 10025bf:	add    BYTE PTR [rbx+0x0],dl
 10025c2:	je     0x10025c4
 10025c4:	(bad)  
 10025c5:	add    BYTE PTR [rdx+0x0],dh
 10025c8:	je     0x10025ca
 10025ca:	rex.XB add BYTE PTR [r9+0x0],spl
 10025ce:	movsxd eax,DWORD PTR [rax]
 10025d0:	push   0x64006500
 10025d5:	add    BYTE PTR [rbx+0x0],al
 10025d8:	outs   dx,DWORD PTR ds:[rsi]
 10025d9:	add    BYTE PTR [rax+rax*1+0x6c],ch
 10025dd:	add    BYTE PTR [rbp+0x0],ah
 10025e0:	movsxd eax,DWORD PTR [rax]
 10025e2:	je     0x10025e4
 10025e4:	imul   eax,DWORD PTR [rax],0x6e006f
 10025ea:	push   rdi
 10025eb:	add    BYTE PTR [rdx+0x0],dh
 10025ee:	(bad)  
 10025ef:	add    BYTE PTR [rax+0x0],dh
 10025f2:	jo     0x10025f4
 10025f4:	add    BYTE PTR gs:[rdx+0x0],dh
	...
 1002600:	add    BYTE PTR fs:[rax+rax*1+0x73],dh
 1002605:	add    BYTE PTR [rax+0x0],dh
 1002608:	imul   eax,DWORD PTR [rax],0x650070
 100260e:	ins    BYTE PTR es:[rdi],dx
 100260f:	add    BYTE PTR [rcx+0x0],ch
 1002612:	outs   dx,BYTE PTR ds:[rsi]
 1002613:	add    BYTE PTR [rbp+0x0],ah
 1002616:	add    BYTE PTR cs:[rax+rax*1+0x6c],ah
 100261b:	add    BYTE PTR [rax+rax*1+0x0],ch
 100261f:	add    BYTE PTR [rdx],ah
 1002621:	add    eax,0x11993
 1002626:	add    BYTE PTR [rax],al
 1002628:	sub    ah,ch
	...
 1002632:	add    BYTE PTR [rax],al
 1002634:	add    eax,DWORD PTR [rax]
 1002636:	add    BYTE PTR [rax],al
 1002638:	xor    ah,ch
 100263a:	add    BYTE PTR [rax],al
 100263c:	xor    BYTE PTR [rax],al
	...
 1002646:	add    BYTE PTR [rax],al
 1002648:	and    al,BYTE PTR [rip+0x21993]        # 0x1023fe1
 100264e:	add    BYTE PTR [rax],al
 1002650:	cwde   
 1002651:	in     al,dx
	...
 100265a:	add    BYTE PTR [rax],al
 100265c:	or     al,BYTE PTR [rax]
 100265e:	add    BYTE PTR [rax],al
 1002660:	test   al,0xec
 1002662:	add    BYTE PTR [rax],al
 1002664:	xor    BYTE PTR [rax],al
	...
 100266e:	add    BYTE PTR [rax],al
 1002670:	add    BYTE PTR [r8+rax*1+0x76],spl
 1002675:	add    BYTE PTR [rcx+0x0],ah
 1002678:	jo     0x100267a
 100267a:	imul   eax,DWORD PTR [rax],0x320033
 1002680:	add    BYTE PTR cs:[rax+rax*1+0x6c],ah
 1002685:	add    BYTE PTR [rax+rax*1+0x0],ch
 1002689:	add    BYTE PTR [rax],al
 100268b:	add    BYTE PTR [rax],al
 100268d:	add    BYTE PTR [rax],al
 100268f:	add    BYTE PTR [rdx+0x65],dl
 1002692:	addr32 rex.WRXB jo 0x10026fb
 1002696:	outs   dx,BYTE PTR ds:[rsi]
 1002697:	rex.WXB
 1002698:	gs jns 0x10026ef
 100269b:	jb     0x10026fe
 100269d:	outs   dx,BYTE PTR ds:[rsi]
 100269e:	jae    0x1002701
 10026a0:	movsxd esi,DWORD PTR [rbp+riz*2+0x64]
 10026a4:	push   rdi
 10026a5:	add    BYTE PTR [rax],al
 10026a7:	add    BYTE PTR [rbp+rbp*2+0x70],al
 10026ab:	rex.RXB
 10026ac:	gs je  0x10026f2
 10026af:	ins    BYTE PTR es:[rdi],dx
 10026b0:	imul   esp,DWORD PTR [rbp+0x6e],0x70784574
 10026b7:	outs   dx,DWORD PTR ds:[rsi]
 10026b8:	jb     0x100272e
 10026ba:	add    BYTE PTR [rax],al
 10026bc:	add    BYTE PTR [rax],al
 10026be:	add    BYTE PTR [rax],al
 10026c0:	and    eax,0x25007300
 10026c5:	add    BYTE PTR [rbx+0x0],dh
 10026c8:	pop    rdi
 10026c9:	add    BYTE PTR [rip+0x2e006400],ah        # 0x2f008acf
 10026cf:	add    BYTE PTR [rax+rax*1+0x6d],dh
 10026d3:	add    BYTE PTR [rax+0x0],dh
 10026d6:	add    BYTE PTR [rax],al
 10026d8:	and    eax,0x25007300
 10026dd:	add    BYTE PTR [rbx+0x0],dh
 10026e0:	pop    rdi
 10026e1:	add    BYTE PTR [rip+0x2e006400],ah        # 0x2f008ae7
 10026e7:	add    BYTE PTR [rbp+0x0],ch
 10026ea:	add    BYTE PTR fs:[rbp+0x0],ch
 10026ee:	jo     0x10026f0
	...
 1002700:	push   rbx
 1002701:	add    BYTE PTR [rdi+0x0],cl
 1002704:	add    BYTE PTR [rax+r8*1+0x57],r10b
 1002709:	add    BYTE PTR [rcx+0x0],al
 100270c:	push   rdx
 100270d:	add    BYTE PTR [rbp+0x0],al
 1002710:	pop    rsp
 1002711:	add    BYTE PTR [rbp+0x0],cl
 1002714:	imul   eax,DWORD PTR [rax],0x720063
 100271a:	outs   dx,DWORD PTR ds:[rsi]
 100271b:	add    BYTE PTR [rbx+0x0],dh
 100271e:	outs   dx,DWORD PTR ds:[rsi]
 100271f:	add    BYTE PTR [rsi+0x0],ah
 1002722:	je     0x1002724
 1002724:	pop    rsp
 1002725:	add    BYTE PTR [rbp+0x0],cl
 1002728:	imul   eax,DWORD PTR [rax],0x720063
 100272e:	outs   dx,DWORD PTR ds:[rsi]
 100272f:	add    BYTE PTR [rbx+0x0],dh
 1002732:	outs   dx,DWORD PTR ds:[rsi]
 1002733:	add    BYTE PTR [rsi+0x0],ah
 1002736:	je     0x1002738
 1002738:	and    BYTE PTR [rax],al
 100273a:	push   rbx
 100273b:	add    BYTE PTR [rcx+0x0],dl
 100273e:	rex.WR add BYTE PTR [rax],r12b
 1002741:	add    BYTE PTR [rbx+0x0],dl
 1002744:	add    BYTE PTR gs:[rdx+0x0],dh
 1002748:	jbe    0x100274a
 100274a:	add    BYTE PTR gs:[rdx+0x0],dh
 100274e:	pop    rsp
 100274f:	add    BYTE PTR [rcx],dh
 1002751:	add    BYTE PTR [rcx],dh
 1002753:	add    BYTE PTR [rax],dh
 1002755:	add    BYTE PTR [rax+rax*1+0x53],bl
 1002759:	add    BYTE PTR [rbx+0x0],dl
 100275c:	rex.WB add BYTE PTR [r11+0x0],dl
 1002760:	pop    rsp
 1002761:	add    BYTE PTR [rbx+0x0],dl
 1002764:	add    BYTE PTR gs:[rax+rax*1+0x75],dh
 1002769:	add    BYTE PTR [rax+0x0],dh
 100276c:	pop    rsp
 100276d:	add    BYTE PTR [rax+rax*1+0x74],al
 1002771:	add    BYTE PTR [rbx+0x0],dh
 1002774:	push   rax
 1002775:	add    BYTE PTR [rcx+0x0],ah
 1002778:	je     0x100277a
 100277a:	push   0x0
 100277f:	add    BYTE PTR [rbx+0x0],dl
 1002782:	jno    0x1002784
 1002784:	ins    BYTE PTR es:[rdi],dx
 1002785:	add    BYTE PTR [rax+rax*1+0x75],al
 1002789:	add    BYTE PTR [rbp+0x0],ch
 100278c:	jo     0x100278e
 100278e:	add    BYTE PTR gs:[rdx+0x0],dh
 1002792:	add    BYTE PTR [rax+r8*1+0x61],r13b
 1002797:	add    BYTE PTR [rdi+0x0],ah
 100279a:	jae    0x100279c
 100279c:	add    BYTE PTR [rax],al
 100279e:	add    BYTE PTR [rax],al
 10027a0:	push   rbx
 10027a1:	add    BYTE PTR [rcx+0x0],dh
 10027a4:	ins    BYTE PTR es:[rdi],dx
 10027a5:	add    BYTE PTR [rax+rax*1+0x75],al
 10027a9:	add    BYTE PTR [rbp+0x0],ch
 10027ac:	jo     0x10027ae
 10027ae:	add    BYTE PTR gs:[rdx+0x0],dh
 10027b2:	rex.WRB add BYTE PTR [r9+0x0],r13b
 10027b6:	outs   dx,BYTE PTR ds:[rsi]
 10027b7:	add    BYTE PTR [rcx+0x0],ch
 10027ba:	add    BYTE PTR fs:[rbp+0x0],dh
 10027be:	ins    DWORD PTR es:[rdi],dx
 10027bf:	add    BYTE PTR [rax+0x0],dh
 10027c2:	add    BYTE PTR [rax+r8*1+0x61],r13b
 10027c7:	add    BYTE PTR [rdi+0x0],ah
 10027ca:	jae    0x10027cc
 10027cc:	add    BYTE PTR [rax],al
 10027ce:	add    BYTE PTR [rax],al
 10027d0:	pop    rsp
 10027d1:	add    BYTE PTR [rbx+0x0],cl
 10027d4:	add    BYTE PTR [r10+0x0],r10b
 10027d8:	rex.WRX add BYTE PTR [rbp+0x0],r8b
 10027dc:	rex.WR add BYTE PTR [rbx],r14b
 10027df:	add    BYTE PTR [rdx],dh
 10027e1:	add    BYTE PTR [rsi],ch
 10027e3:	add    BYTE PTR [rax+rax*1+0x4c],al
 10027e7:	add    BYTE PTR [rax+rax*1+0x0],cl
 10027eb:	add    BYTE PTR [rax],al
 10027ed:	add    BYTE PTR [rax],al
 10027ef:	add    BYTE PTR [rax+0x65],cl
 10027f2:	(bad)  
 10027f3:	jo     0x1002848
 10027f5:	gs je  0x1002841
 10027f8:	outs   dx,BYTE PTR ds:[rsi]
 10027f9:	outs   dx,WORD PTR ds:[rsi]
 10027fb:	jb     0x100286a
 10027fd:	(bad)  
 10027fe:	je     0x1002869
 1002800:	outs   dx,DWORD PTR ds:[rsi]
 1002801:	outs   dx,BYTE PTR ds:[rsi]
 1002802:	add    BYTE PTR [rax],al
 1002804:	add    BYTE PTR [rax],al
 1002806:	add    BYTE PTR [rax],al
 1002808:	ja     0x100280a
 100280a:	ins    DWORD PTR es:[rdi],dx
 100280b:	add    BYTE PTR [rcx+0x0],ah
 100280e:	imul   eax,DWORD PTR [rax],0x6e
 1002814:	add    BYTE PTR [rax],al
 1002816:	add    BYTE PTR [rax],al
 1002818:	rex.XB add BYTE PTR [r15+0x0],bpl
 100281c:	ins    DWORD PTR es:[rdi],dx
 100281d:	add    BYTE PTR [rbp+0x0],ch
 1002820:	(bad)  
 1002821:	add    BYTE PTR [rsi+0x0],ch
 1002824:	add    BYTE PTR fs:[rax],ah
 1002827:	add    BYTE PTR [rax+rax*1+0x69],ch
 100282b:	add    BYTE PTR [rsi+0x0],ch
 100282e:	add    BYTE PTR gs:[rdx],bh
 1002831:	add    BYTE PTR [rax],ah
 1002833:	add    BYTE PTR [rip+0x7300],ah        # 0x1009b39
 1002839:	add    BYTE PTR [rax],al
 100283b:	add    BYTE PTR [rax],al
 100283d:	add    BYTE PTR [rax],al
 100283f:	add    BYTE PTR [rax+rax*1+0x63],ah
 1002843:	add    BYTE PTR [rbp+0x0],ah
 1002846:	js     0x1002848
 1002848:	add    BYTE PTR gs:[rbx+0x0],ah
 100284c:	add    BYTE PTR [rax],al
 100284e:	add    BYTE PTR [rax],al
 1002850:	rex adc eax,0x101
 1002856:	add    BYTE PTR [rax],al
 1002858:	loopne 0x100286f
 100285a:	add    DWORD PTR [rcx],eax
 100285c:	add    BYTE PTR [rax],al
 100285e:	add    BYTE PTR [rax],al
 1002860:	sar    BYTE PTR [rax+rax*1],0x1
 1002864:	add    BYTE PTR [rax],al
 1002866:	add    BYTE PTR [rax],al
 1002868:	enter  0x6b,0x1
 100286c:	add    BYTE PTR [rax],al
 100286e:	add    BYTE PTR [rax],al
 1002870:	and    al,BYTE PTR [rip+0x21993]        # 0x1024209
 1002876:	add    BYTE PTR [rax],al
 1002878:	shr    dh,1
 100287a:	add    BYTE PTR [rax],al
 100287c:	add    DWORD PTR [rax],eax
 100287e:	add    BYTE PTR [rax],al
 1002880:	test   al,0xee
 1002882:	add    BYTE PTR [rax],al
 1002884:	(bad)  
 1002885:	add    BYTE PTR [rax],al
 1002887:	add    al,ah
 1002889:	out    dx,al
 100288a:	add    BYTE PTR [rax],al
 100288c:	and    BYTE PTR [rax],al
 100288e:	add    BYTE PTR [rax],al
 1002890:	add    BYTE PTR [rax],al
 1002892:	add    BYTE PTR [rax],al
 1002894:	add    DWORD PTR [rax],eax
 1002896:	add    BYTE PTR [rax],al
 1002898:	adc    BYTE PTR [rcx+0x2f],bl
 100289b:	mov    dh,0x28
 100289d:	rcl    DWORD PTR gs:[rcx],1
 10028a0:	xchg   esi,eax
 10028a1:	adc    DWORD PTR [rax],eax
 10028a3:	add    al,bh
 10028a5:	(bad)  
 10028a6:	or     eax,0x4c3de00d
 10028ab:	cmp    DWORD PTR [rdi+0x3c],ebp
 10028ae:	rcl    BYTE PTR [rcx],cl
 10028b0:	cmp    DWORD PTR [rbx+0x0],0x7a794fc0
 10028b7:	mov    bh,0xca
 10028b9:	test   eax,0x92a25dc0
 10028be:	add    al,0x42
 10028c0:	nop
 10028c1:	add    esp,esp
 10028c3:	(bad)  
 10028c4:	pop    rdi
 10028c5:	adc    ecx,esp
 10028c7:	test   al,0x38
 10028c9:	jae    0x10028cb
 10028cb:	add    DWORD PTR [rax],eax
 10028cd:	add    BYTE PTR [rax],al
 10028cf:	add    BYTE PTR [rbx+rsi*2+0x0],bl
 10028d3:	add    DWORD PTR [rax],eax
 10028d5:	add    BYTE PTR [rax],al
 10028d7:	add    BYTE PTR [rbx+rsi*2+0x100],al
 10028de:	add    BYTE PTR [rax],al
 10028e0:	(bad)  
 10028e1:	jae    0x10028e3
 10028e3:	add    DWORD PTR [rax],eax
 10028e5:	add    BYTE PTR [rax],al
 10028e7:	add    al,bh
 10028e9:	jae    0x10028eb
 10028eb:	add    DWORD PTR [rax],eax
 10028ed:	add    BYTE PTR [rax],al
 10028ef:	add    al,bl
 10028f1:	je     0x10028f3
 10028f3:	add    DWORD PTR [rax],eax
 10028f5:	add    BYTE PTR [rax],al
 10028f7:	add    BYTE PTR [rax+0x74],bl
 10028fa:	add    BYTE PTR [rcx],al
 10028fc:	add    BYTE PTR [rax],al
 10028fe:	add    BYTE PTR [rax],al
 1002900:	(bad)  
 1002901:	jne    0x1002903
 1002903:	add    DWORD PTR [rax],eax
 1002905:	add    BYTE PTR [rax],al
 1002907:	add    BYTE PTR [rax+0x74],bh
 100290a:	add    BYTE PTR [rcx],al
 100290c:	add    BYTE PTR [rax],al
 100290e:	add    BYTE PTR [rax],al
 1002910:	nop
 1002911:	je     0x1002913
 1002913:	add    DWORD PTR [rax],eax
 1002915:	add    BYTE PTR [rax],al
 1002917:	add    BYTE PTR [rax+0x10074],ah
 100291d:	add    BYTE PTR [rax],al
 100291f:	add    BYTE PTR [rsi],ch
 1002921:	add    BYTE PTR [rdx+0x0],dh
 1002924:	ins    BYTE PTR es:[rdi],dx
 1002925:	add    BYTE PTR [rax+rax*1+0x0],ch
 1002929:	add    BYTE PTR [rax],al
 100292b:	add    BYTE PTR [rsi],ch
 100292d:	add    BYTE PTR [rax],al
 100292f:	add    BYTE PTR [rdx+0x0],dh
 1002932:	add    BYTE PTR gs:[rbx+0x0],dh
 1002936:	outs   dx,DWORD PTR ds:[rsi]
 1002937:	add    BYTE PTR [rbp+0x0],dh
 100293a:	jb     0x100293c
 100293c:	movsxd eax,DWORD PTR [rax]
 100293e:	add    BYTE PTR gs:[rbx+0x0],dh
 1002942:	add    BYTE PTR [rax],al
 1002944:	add    BYTE PTR [rax],al
 1002946:	add    BYTE PTR [rax],al
 1002948:	push   rdx
 1002949:	add    BYTE PTR [rbp+0x0],ah
 100294c:	jae    0x100294e
 100294e:	outs   dx,DWORD PTR ds:[rsi]
 100294f:	add    BYTE PTR [rbp+0x0],dh
 1002952:	jb     0x1002954
 1002954:	movsxd eax,DWORD PTR [rax]
 1002956:	add    BYTE PTR gs:[rbx+0x0],dh
 100295a:	add    BYTE PTR [rax],al
 100295c:	pop    rsp
 100295d:	add    BYTE PTR [rax],al
 100295f:	add    BYTE PTR [rbx+0x53],dl
 1002962:	rex.WB push r11
 1002964:	rex.X
 1002965:	imul   ebp,DWORD PTR gs:[esi+0x44],0x706d75
 100296e:	add    BYTE PTR [rax],al
 1002970:	push   rbx
 1002971:	push   rbx
 1002972:	rex.WB push r11
 1002974:	rex.RXB
 1002975:	gs je  0x10029bd
 1002978:	js     0x10029ee
 100297a:	jb     0x10029dd
 100297c:	rex.R jne 0x10029ec
 100297f:	jo     0x10029c7
 1002981:	imul   ebp,DWORD PTR [rbp+riz*2+0x48],0x6c646e61
 1002989:	add    BYTE PTR gs:[rax],al
	...
 1002998:	rol    BYTE PTR [rax],0x0
 100299b:	add    BYTE PTR [rax],al
 100299d:	add    BYTE PTR [rax],al
 100299f:	rex.RX xor al,0x11
 10029a2:	sbb    ecx,esp
 10029a4:	jmp    0x1002935
 10029a6:	pop    rdi
 10029a7:	rex.WX cdqe 
 10029a9:	xor    DWORD PTR [rax+0x60],esi
 10029ac:	xchg   ecx,eax
 10029ad:	rex.W jns 0x10029b7
 10029b0:	push   rbx
 10029b1:	add    BYTE PTR [rdi+0x0],cl
 10029b4:	add    BYTE PTR [rax+r8*1+0x57],r10b
 10029b9:	add    BYTE PTR [rcx+0x0],al
 10029bc:	push   rdx
 10029bd:	add    BYTE PTR [rbp+0x0],al
 10029c0:	pop    rsp
 10029c1:	add    BYTE PTR [rbp+0x0],cl
 10029c4:	imul   eax,DWORD PTR [rax],0x720063
 10029ca:	outs   dx,DWORD PTR ds:[rsi]
 10029cb:	add    BYTE PTR [rbx+0x0],dh
 10029ce:	outs   dx,DWORD PTR ds:[rsi]
 10029cf:	add    BYTE PTR [rsi+0x0],ah
 10029d2:	je     0x10029d4
 10029d4:	pop    rsp
 10029d5:	add    BYTE PTR [rbp+0x0],cl
 10029d8:	imul   eax,DWORD PTR [rax],0x720063
 10029de:	outs   dx,DWORD PTR ds:[rsi]
 10029df:	add    BYTE PTR [rbx+0x0],dh
 10029e2:	outs   dx,DWORD PTR ds:[rsi]
 10029e3:	add    BYTE PTR [rsi+0x0],ah
 10029e6:	je     0x10029e8
 10029e8:	and    BYTE PTR [rax],al
 10029ea:	push   rbx
 10029eb:	add    BYTE PTR [rcx+0x0],dl
 10029ee:	rex.WR add BYTE PTR [rax],r12b
 10029f1:	add    BYTE PTR [rbx+0x0],dl
 10029f4:	add    BYTE PTR gs:[rdx+0x0],dh
 10029f8:	jbe    0x10029fa
 10029fa:	add    BYTE PTR gs:[rdx+0x0],dh
 10029fe:	pop    rsp
 10029ff:	add    BYTE PTR [rcx],dh
 1002a01:	add    BYTE PTR [rcx],dh
 1002a03:	add    BYTE PTR [rax],dh
 1002a05:	add    BYTE PTR [rax],al
 1002a07:	add    BYTE PTR [rbp+0x0],al
 1002a0a:	jb     0x1002a0c
 1002a0c:	jb     0x1002a0e
 1002a0e:	outs   dx,DWORD PTR ds:[rsi]
 1002a0f:	add    BYTE PTR [rdx+0x0],dh
 1002a12:	push   rdx
 1002a13:	add    BYTE PTR [rbp+0x0],ah
 1002a16:	jo     0x1002a18
 1002a18:	outs   dx,DWORD PTR ds:[rsi]
 1002a19:	add    BYTE PTR [rdx+0x0],dh
 1002a1c:	je     0x1002a1e
 1002a1e:	imul   eax,DWORD PTR [rax],0x67006e
 1002a24:	add    BYTE PTR [rcx+0x0],r13b
 1002a28:	jb     0x1002a2a
 1002a2a:	add    BYTE PTR [rax],al
 1002a2c:	add    BYTE PTR [rax],al
 1002a2e:	add    BYTE PTR [rax],al
 1002a30:	rex.WB add BYTE PTR [r11+0x0],dl
 1002a34:	add    BYTE PTR [rax],r8b
 1002a37:	add    BYTE PTR [rcx+0x0],bh
 1002a3a:	jns    0x1002a3c
 1002a3c:	jns    0x1002a3e
 1002a3e:	jns    0x1002a40
 1002a40:	sub    eax,0x4d004d00
 1002a45:	add    BYTE PTR [rip+0x64006400],ch        # 0x65008e4b
 1002a4b:	add    BYTE PTR [rax],al
 1002a4d:	add    BYTE PTR [rax],al
 1002a4f:	add    BYTE PTR [rax+0x0],cl
 1002a52:	rex.W add BYTE PTR [rdx],dil
 1002a55:	add    BYTE PTR [rbp+0x0],ch
 1002a58:	ins    DWORD PTR es:[rdi],dx
 1002a59:	add    BYTE PTR [rdx],bh
 1002a5b:	add    BYTE PTR [rbx+0x0],dh
 1002a5e:	jae    0x1002a60
	...
 1002a70:	and    eax,DWORD PTR [rax]
 1002a72:	and    BYTE PTR [rax],al
 1002a74:	push   rbx
 1002a75:	add    BYTE PTR [rbx+0x0],dl
 1002a78:	rex.WB add BYTE PTR [r11+0x0],dl
 1002a7c:	and    BYTE PTR [rax],al
 1002a7e:	push   rsp
 1002a7f:	add    BYTE PTR [rbp+0x0],ah
 1002a82:	js     0x1002a84
 1002a84:	je     0x1002a86
 1002a86:	jne    0x1002a88
 1002a88:	(bad)  
 1002a89:	add    BYTE PTR [rax+rax*1+0x20],ch
 1002a8d:	add    BYTE PTR [rax+rax*1+0x75],al
 1002a91:	add    BYTE PTR [rbp+0x0],ch
 1002a94:	jo     0x1002a96
 1002a96:	and    BYTE PTR [rax],al
 1002a98:	je     0x1002a9a
 1002a9a:	(bad)  
 1002a9b:	add    BYTE PTR [rbx+0x0],ch
 1002a9e:	add    BYTE PTR gs:[rsi+0x0],ch
 1002aa2:	and    BYTE PTR [rax],al
 1002aa4:	(bad)  
 1002aa5:	add    BYTE PTR [rax+rax*1+0x20],dh
 1002aa9:	add    BYTE PTR [rip+0x20007300],ah        # 0x21009daf
 1002aaf:	add    BYTE PTR [rip+0xd007300],ah        # 0xe009db5
 1002ab5:	add    BYTE PTR [rdx],cl
	...
 1002abf:	add    BYTE PTR [rbx],ah
 1002ac1:	add    BYTE PTR [rax],ah
 1002ac3:	add    BYTE PTR [rax+0x0],dl
 1002ac6:	rex.WB add BYTE PTR [r8+rax*1+0x20],al
 1002acb:	add    BYTE PTR [rip+0xd006400],ah        # 0xe008ed1
 1002ad1:	add    BYTE PTR [rdx],cl
 1002ad3:	add    BYTE PTR [rax],al
 1002ad5:	add    BYTE PTR [rax],al
 1002ad7:	add    BYTE PTR [rbx],ah
 1002ad9:	add    BYTE PTR [rax],ah
 1002adb:	add    BYTE PTR [rcx+0x0],cl
 1002ade:	ins    DWORD PTR es:[rdi],dx
 1002adf:	add    BYTE PTR [rcx+0x0],ah
 1002ae2:	add    BYTE PTR [ebp+0x0],ah
 1002ae6:	and    BYTE PTR [rax],al
 1002ae8:	rex.WRX add BYTE PTR [rcx+0x0],r12b
 1002aec:	ins    DWORD PTR es:[rdi],dx
 1002aed:	add    BYTE PTR [rbp+0x0],ah
 1002af0:	and    BYTE PTR [rax],al
 1002af2:	pop    rbx
 1002af3:	add    BYTE PTR [rip+0x5d007300],ah        # 0x5e009df9
 1002af9:	add    BYTE PTR [rip+0xa00],cl        # 0x10034ff
 1002aff:	add    BYTE PTR [rbx],ah
 1002b01:	add    BYTE PTR [rax],ah
 1002b03:	add    BYTE PTR [rdi+0x0],cl
 1002b06:	push   rbx
 1002b07:	add    BYTE PTR [rax],ah
 1002b09:	add    BYTE PTR [rbp+0x0],ch
 1002b0c:	(bad)  
 1002b0d:	add    BYTE PTR [rdx+0x0],ch
 1002b10:	outs   dx,DWORD PTR ds:[rsi]
 1002b11:	add    BYTE PTR [rdx+0x0],dh
 1002b14:	cmp    eax,0x64002500
 1002b19:	add    BYTE PTR [rax],ah
 1002b1b:	add    BYTE PTR [rbp+0x0],ch
 1002b1e:	imul   eax,DWORD PTR [rax],0x6f006e
 1002b24:	jb     0x1002b26
 1002b26:	cmp    eax,0x64002500
 1002b2b:	add    BYTE PTR [rax],ah
 1002b2d:	add    BYTE PTR [rdx+0x0],ah
 1002b30:	jne    0x1002b32
 1002b32:	imul   eax,DWORD PTR [rax],0x64006c
 1002b38:	cmp    eax,0x64002500
 1002b3d:	add    BYTE PTR [rax],ah
 1002b3f:	add    BYTE PTR [rip+0xd007300],ah        # 0xe009e45
 1002b45:	add    BYTE PTR [rdx],cl
	...
 1002b4f:	add    BYTE PTR [rcx+0x0],ah
 1002b52:	ins    DWORD PTR es:[rdi],dx
 1002b53:	add    BYTE PTR [rax+rax*1+0x36],ah
 1002b57:	add    BYTE PTR [rax+rax*1],dh
 1002b5a:	add    BYTE PTR [rax],al
 1002b5c:	add    BYTE PTR [rax],al
 1002b5e:	add    BYTE PTR [rax],al
 1002b60:	imul   eax,DWORD PTR [rax],0x360061
 1002b66:	xor    al,0x0
	...
 1002b70:	js     0x1002b72
 1002b72:	cmp    BYTE PTR [rax],al
 1002b74:	add    BYTE PTR ss:[rax],al
 1002b77:	add    BYTE PTR [rbp+0x0],dh
 1002b7a:	outs   dx,BYTE PTR ds:[rsi]
 1002b7b:	add    BYTE PTR [rbx+0x0],ch
 1002b7e:	outs   dx,BYTE PTR ds:[rsi]
 1002b7f:	add    BYTE PTR [rdi+0x0],ch
 1002b82:	ja     0x1002b84
 1002b84:	outs   dx,BYTE PTR ds:[rsi]
 1002b85:	add    BYTE PTR [rdi],bh
	...
 1002b8f:	add    BYTE PTR [rbp+0x0],dh
 1002b92:	outs   dx,BYTE PTR ds:[rsi]
 1002b93:	add    BYTE PTR [rax+rax*1+0x65],ah
 1002b97:	add    BYTE PTR [rdx+0x0],dh
 1002b9a:	and    BYTE PTR [rax],al
 1002b9c:	push   rdi
 1002b9d:	add    BYTE PTR [rdi+0x0],cl
 1002ba0:	push   rdi
 1002ba1:	add    BYTE PTR [rsi],dh
 1002ba3:	add    BYTE PTR [rax+rax*1],dh
 1002ba6:	add    BYTE PTR [rax],al
 1002ba8:	jo     0x1002baa
 1002baa:	jb     0x1002bac
 1002bac:	outs   dx,DWORD PTR ds:[rsi]
 1002bad:	add    BYTE PTR [rbx+0x0],ah
 1002bb0:	add    BYTE PTR gs:[rbx+0x0],dh
 1002bb4:	jae    0x1002bb6
 1002bb6:	outs   dx,DWORD PTR ds:[rsi]
 1002bb7:	add    BYTE PTR [rdx+0x0],dh
 1002bba:	jae    0x1002bbc
 1002bbc:	add    BYTE PTR [rax],al
 1002bbe:	add    BYTE PTR [rax],al
 1002bc0:	jo     0x1002bc2
 1002bc2:	jb     0x1002bc4
 1002bc4:	outs   dx,DWORD PTR ds:[rsi]
 1002bc5:	add    BYTE PTR [rbx+0x0],ah
 1002bc8:	add    BYTE PTR gs:[rbx+0x0],dh
 1002bcc:	jae    0x1002bce
 1002bce:	outs   dx,DWORD PTR ds:[rsi]
 1002bcf:	add    BYTE PTR [rdx+0x0],dh
 1002bd2:	add    BYTE PTR [rax],al
 1002bd4:	add    BYTE PTR [rax],al
 1002bd6:	add    BYTE PTR [rax],al
 1002bd8:	and    eax,DWORD PTR [rax]
 1002bda:	and    BYTE PTR [rax],al
 1002bdc:	push   rdx
 1002bdd:	add    BYTE PTR [rbp+0x0],dh
 1002be0:	outs   dx,BYTE PTR ds:[rsi]
 1002be1:	add    BYTE PTR [rsi+0x0],ch
 1002be4:	imul   eax,DWORD PTR [rax],0x67006e
 1002bea:	and    BYTE PTR [rax],al
 1002bec:	outs   dx,DWORD PTR ds:[rsi]
 1002bed:	add    BYTE PTR [rsi+0x0],ch
 1002bf0:	and    BYTE PTR [rax],al
 1002bf2:	and    eax,0x20006400
 1002bf7:	add    BYTE PTR [rip+0x20007300],ah        # 0x21009efd
 1002bfd:	add    BYTE PTR [rip+0x20007300],ah        # 0x21009f03
 1002c03:	add    BYTE PTR [rip+0xd007300],ah        # 0xe009f09
 1002c09:	add    BYTE PTR [rdx],cl
 1002c0b:	add    BYTE PTR [rax],al
 1002c0d:	add    BYTE PTR [rax],al
 1002c0f:	add    BYTE PTR [rbx],ah
 1002c11:	add    BYTE PTR [rax],ah
 1002c13:	add    BYTE PTR [rbp+0x0],cl
 1002c16:	add    BYTE PTR gs:[rbp+0x0],ch
 1002c1a:	outs   dx,DWORD PTR ds:[rsi]
 1002c1b:	add    BYTE PTR [rdx+0x0],dh
 1002c1e:	jns    0x1002c20
 1002c20:	cmp    al,BYTE PTR [rax]
 1002c22:	and    BYTE PTR [rax],al
 1002c24:	and    eax,0x25006400
 1002c29:	add    BYTE PTR [rip+0x69002000],ah        # 0x6a004c2f
 1002c2f:	add    BYTE PTR [rsi+0x0],ch
 1002c32:	and    BYTE PTR [rax],al
 1002c34:	jne    0x1002c36
 1002c36:	jae    0x1002c38
 1002c38:	add    BYTE PTR gs:[rsi],ch
 1002c3b:	add    BYTE PTR [rax],ah
 1002c3d:	add    BYTE PTR [rax+0x0],dl
 1002c40:	push   0x73007900
 1002c45:	add    BYTE PTR [rcx+0x0],ch
 1002c48:	movsxd eax,DWORD PTR [rax]
 1002c4a:	(bad)  
 1002c4b:	add    BYTE PTR [rax+rax*1+0x3a],ch
 1002c4f:	add    BYTE PTR [rax],ah
 1002c51:	add    BYTE PTR [rip+0x64006c00],ah        # 0x65009857
 1002c57:	add    BYTE PTR [rbp+0x0],cl
 1002c5a:	(bad)  
 1002c5b:	add    BYTE PTR [rip+0x64006c00],ah        # 0x65009861
 1002c61:	add    BYTE PTR [rbp+0x0],cl
 1002c64:	and    BYTE PTR [rax],al
 1002c66:	and    BYTE PTR [rax],al
 1002c68:	push   rax
 1002c69:	add    BYTE PTR [rcx+0x0],ah
 1002c6c:	add    BYTE PTR [ecx+0x0],ch
 1002c70:	outs   dx,BYTE PTR ds:[rsi]
 1002c71:	add    BYTE PTR [rdi+0x0],ah
 1002c74:	cmp    al,BYTE PTR [rax]
 1002c76:	and    BYTE PTR [rax],al
 1002c78:	and    eax,0x4d006400
 1002c7d:	add    BYTE PTR [rdi],ch
 1002c7f:	add    BYTE PTR [rip+0x4d006400],ah        # 0x4e009085
 1002c85:	add    BYTE PTR [rax],ah
 1002c87:	add    BYTE PTR [rax],ch
 1002c89:	add    BYTE PTR [rcx+0x0],ah
 1002c8c:	jbe    0x1002c8e
 1002c8e:	(bad)  
 1002c8f:	add    BYTE PTR [rcx+0x0],ch
 1002c92:	ins    BYTE PTR es:[rdi],dx
 1002c93:	add    BYTE PTR [rdi],ch
 1002c95:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1002c99:	add    BYTE PTR [rax+rax*1+0x61],dh
 1002c9d:	add    BYTE PTR [rax+rax*1+0x29],ch
 1002ca1:	add    BYTE PTR [rip+0xa00],cl        # 0x10036a7
	...
 1002caf:	add    BYTE PTR [rbx],ah
 1002cb1:	add    BYTE PTR [rax],ah
 1002cb3:	add    BYTE PTR [rax+rax*1+0x6f],cl
 1002cb7:	add    BYTE PTR [rcx+0x0],ah
 1002cba:	add    BYTE PTR fs:[rbp+0x0],ah
 1002cbe:	add    BYTE PTR fs:[rax],ah
 1002cc1:	add    BYTE PTR [rbp+0x0],cl
 1002cc4:	outs   dx,DWORD PTR ds:[rsi]
 1002cc5:	add    BYTE PTR [rax+rax*1+0x75],ah
 1002cc9:	add    BYTE PTR [rax+rax*1+0x65],ch
 1002ccd:	add    BYTE PTR [rdx],bh
 1002ccf:	add    BYTE PTR [rax],ah
 1002cd1:	add    BYTE PTR [rip+0x20007300],ah        # 0x21009fd7
 1002cd7:	add    BYTE PTR [rax],ch
 1002cd9:	add    BYTE PTR [rip+0x64006c00],ah        # 0x650098df
 1002cdf:	add    BYTE PTR [rsi],ch
 1002ce1:	add    BYTE PTR [rip+0x64006c00],ah        # 0x650098e7
 1002ce7:	add    BYTE PTR [rsi],ch
 1002ce9:	add    BYTE PTR [rip+0x64006c00],ah        # 0x650098ef
 1002cef:	add    BYTE PTR [rsi],ch
 1002cf1:	add    BYTE PTR [rip+0x64006c00],ah        # 0x650098f7
 1002cf7:	add    BYTE PTR [rcx],ch
 1002cf9:	add    BYTE PTR [rip+0xa00],cl        # 0x10036ff
 1002cff:	add    BYTE PTR [rbx],ah
 1002d01:	add    BYTE PTR [rax],ah
 1002d03:	add    BYTE PTR [rax+rax*1+0x6f],cl
 1002d07:	add    BYTE PTR [rcx+0x0],ah
 1002d0a:	add    BYTE PTR fs:[rbp+0x0],ah
 1002d0e:	add    BYTE PTR fs:[rax],ah
 1002d11:	add    BYTE PTR [rbp+0x0],cl
 1002d14:	outs   dx,DWORD PTR ds:[rsi]
 1002d15:	add    BYTE PTR [rax+rax*1+0x75],ah
 1002d19:	add    BYTE PTR [rax+rax*1+0x65],ch
 1002d1d:	add    BYTE PTR [rdx],bh
 1002d1f:	add    BYTE PTR [rax],ah
 1002d21:	add    BYTE PTR [rip+0x20007300],ah        # 0x2100a027
 1002d27:	add    BYTE PTR [rax],ch
 1002d29:	add    BYTE PTR [rbp+0x0],dh
 1002d2c:	outs   dx,BYTE PTR ds:[rsi]
 1002d2d:	add    BYTE PTR [rbx+0x0],ch
 1002d30:	outs   dx,BYTE PTR ds:[rsi]
 1002d31:	add    BYTE PTR [rdi+0x0],ch
 1002d34:	ja     0x1002d36
 1002d36:	outs   dx,BYTE PTR ds:[rsi]
 1002d37:	add    BYTE PTR [rax],ah
 1002d39:	add    BYTE PTR [rsi+0x0],dh
 1002d3c:	add    BYTE PTR gs:[rdx+0x0],dh
 1002d40:	jae    0x1002d42
 1002d42:	imul   eax,DWORD PTR [rax],0x6e006f
 1002d48:	sub    DWORD PTR [rax],eax
 1002d4a:	or     eax,0xa00
	...
 1002d5f:	add    BYTE PTR [rbx+0x0],dl
 1002d62:	rex.WRXB add BYTE PTR [r14+0x0],r8b
 1002d66:	push   rsp
 1002d67:	add    BYTE PTR [rdi+0x0],dl
 1002d6a:	add    BYTE PTR [r10+0x0],dl
 1002d6e:	add    BYTE PTR [r8+rax*1+0x4d],r11b
 1002d73:	add    BYTE PTR [rcx+0x0],ch
 1002d76:	movsxd eax,DWORD PTR [rax]
 1002d78:	jb     0x1002d7a
 1002d7a:	outs   dx,DWORD PTR ds:[rsi]
 1002d7b:	add    BYTE PTR [rbx+0x0],dh
 1002d7e:	outs   dx,DWORD PTR ds:[rsi]
 1002d7f:	add    BYTE PTR [rsi+0x0],ah
 1002d82:	je     0x1002d84
 1002d84:	pop    rsp
 1002d85:	add    BYTE PTR [rbp+0x0],cl
 1002d88:	imul   eax,DWORD PTR [rax],0x720063
 1002d8e:	outs   dx,DWORD PTR ds:[rsi]
 1002d8f:	add    BYTE PTR [rbx+0x0],dh
 1002d92:	outs   dx,DWORD PTR ds:[rsi]
 1002d93:	add    BYTE PTR [rsi+0x0],ah
 1002d96:	je     0x1002d98
 1002d98:	and    BYTE PTR [rax],al
 1002d9a:	push   rbx
 1002d9b:	add    BYTE PTR [rcx+0x0],dl
 1002d9e:	rex.WR add BYTE PTR [rax],r12b
 1002da1:	add    BYTE PTR [rbx+0x0],dl
 1002da4:	add    BYTE PTR gs:[rdx+0x0],dh
 1002da8:	jbe    0x1002daa
 1002daa:	add    BYTE PTR gs:[rdx+0x0],dh
 1002dae:	pop    rsp
 1002daf:	add    BYTE PTR [rcx],dh
 1002db1:	add    BYTE PTR [rcx],dh
 1002db3:	add    BYTE PTR [rax],dh
 1002db5:	add    BYTE PTR [rax],al
 1002db7:	add    BYTE PTR [rbx+0x0],dl
 1002dba:	push   rcx
 1002dbb:	add    BYTE PTR [rax+rax*1+0x44],cl
 1002dbf:	add    BYTE PTR [rbp+0x0],dl
 1002dc2:	rex.WRB add BYTE PTR [r8+0x0],r10b
 1002dc6:	add    BYTE PTR [r10+0x0],r10b
 1002dca:	add    BYTE PTR cs:[rbp+0x0],al
 1002dce:	pop    rax
 1002dcf:	add    BYTE PTR [rbp+0x0],al
 1002dd2:	add    BYTE PTR [rax],al
 1002dd4:	add    BYTE PTR [rax],al
 1002dd6:	add    BYTE PTR [rax],al
 1002dd8:	ja     0x1002dc6
 1002dda:	enter  0x7bf4,0x7d
 1002dde:	mov    ecx,0x42cd8c4d
 1002de3:	rex (bad) 
 1002de5:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1002de6:	pop    rdx
 1002de7:	stc    
 1002de8:	and    eax,0x73006c00
 1002ded:	add    BYTE PTR [rax+rax*1+0x25],bl
 1002df1:	add    BYTE PTR [rax+rax*1+0x73],ch
	...
 1002dfd:	add    BYTE PTR [rax],al
 1002dff:	add    BYTE PTR [rax],dh
 1002e01:	xchg   ebx,eax
 1002e02:	add    BYTE PTR [rcx],al
 1002e04:	add    BYTE PTR [rax],al
 1002e06:	add    BYTE PTR [rax],al
 1002e08:	rcl    BYTE PTR [rbx+0x100],1
 1002e0e:	add    BYTE PTR [rax],al
 1002e10:	loopne 0x1002da5
 1002e12:	add    BYTE PTR [rcx],al
 1002e14:	add    BYTE PTR [rax],al
 1002e16:	add    BYTE PTR [rax],al
 1002e18:	and    BYTE PTR [rdi+0x100],bl
 1002e1e:	add    BYTE PTR [rax],al
 1002e20:	rcl    BYTE PTR [rdx+0x100],1
 1002e26:	add    BYTE PTR [rax],al
 1002e28:	add    BYTE PTR [rbx+0x100],bl
 1002e2e:	add    BYTE PTR [rax],al
 1002e30:	nop
 1002e31:	movabs eax,ds:0x9580000000000100
 1002e3a:	add    BYTE PTR [rcx],al
 1002e3c:	add    BYTE PTR [rax],al
 1002e3e:	add    BYTE PTR [rax],al
 1002e40:	lock xchg ebx,eax
 1002e42:	add    BYTE PTR [rcx],al
 1002e44:	add    BYTE PTR [rax],al
 1002e46:	add    BYTE PTR [rax],al
 1002e48:	xor    BYTE PTR [rax+rax*1+0x1],dl
 1002e4f:	add    BYTE PTR [rax],dh
 1002e51:	(bad)  
 1002e52:	add    BYTE PTR [rcx],al
 1002e54:	add    BYTE PTR [rax],al
 1002e56:	add    BYTE PTR [rax],al
 1002e58:	push   rbx
 1002e59:	add    BYTE PTR [rax+0x0],ch
 1002e5c:	(bad)  
 1002e5d:	add    BYTE PTR [rdx+0x0],dh
 1002e60:	add    BYTE PTR gs:[rax+rax*1+0x43],ah
 1002e65:	add    BYTE PTR [rdi+0x0],ch
 1002e68:	add    BYTE PTR fs:[rbp+0x0],ah
	...
 1002e74:	xchg   esi,eax
 1002e75:	xor    BYTE PTR [rdi],al
 1002e77:	ja     0x1002ea5
 1002e79:	(bad)  
 1002e7a:	(bad)  
 1002e7b:	out    dx,al
 1002e7c:	mov    edx,0x19990951
 1002e81:	(bad)  
 1002e82:	ins    DWORD PTR es:[rdi],dx
 1002e83:	(bad)  
 1002e84:	(bad)  
 1002e85:	hlt    
 1002e86:	push   0x70
 1002e88:	xor    eax,0xa3e963a5
 1002e8d:	xchg   ebp,eax
 1002e8e:	fs sahf 
 1002e90:	xor    cl,BYTE PTR [rax-0x475bf125]
 1002e96:	fdivr  QWORD PTR [rcx+0x1e]
 1002e99:	jmp    0xffffffffda890f73
 1002e9e:	rcl    BYTE PTR [rdi+0x9b64c2b],cl
 1002ea4:	mov    ebp,0x77eb17c
 1002ea9:	sub    eax,0x1d91e7b8
 1002eae:	mov    edi,0xb7106490
 1002eb3:	sbb    eax,0x6ab020f2
 1002eb8:	rex.W jno 0x1002e74
 1002ebb:	repz fiadd WORD PTR [rcx-0x42]
 1002ebf:	test   BYTE PTR [rbp-0x2c],bh
 1002ec2:	ficomp DWORD PTR [rdx]
 1002ec4:	jmp    0x1002eaa
 1002ec6:	(bad)  [rbp+0x51]
 1002ec9:	mov    ch,0xd4
 1002ecb:	hlt    
 1002ecc:	mov    DWORD PTR [rbp-0x67a97c2d],0xa8c0136c
 1002ed6:	imul   esp,DWORD PTR [rdx+rdi*2-0x7],0x62
 1002edb:	std    
 1002edc:	in     al,dx
 1002edd:	leave  
 1002ede:	mov    cl,BYTE PTR gs:[rdi+0x5c]
 1002ee2:	add    DWORD PTR [rcx+rbx*8],edx
 1002ee5:	ins    BYTE PTR es:[rdi],dx
 1002ee6:	(bad)  
 1002ee7:	movsxd esp,DWORD PTR [rbx+0x3d]
 1002eea:	psubd  mm6,mm5
 1002eed:	or     eax,0x20c88d08
 1002ef2:	outs   dx,BYTE PTR ds:[rsi]
 1002ef3:	cmp    ebx,DWORD PTR [rsi+0x10]
 1002ef6:	imul   ecx,DWORD PTR [rsp+riz*8+0x41],0x7172d560
 1002efe:	addr32 mov ds:0x3c03e4d1,al
 1002f04:	rex.RXB (bad) 
 1002f06:	add    al,0x4b
 1002f08:	std    
 1002f09:	test   DWORD PTR [rip+0xab56bd2],ecx        # 0xbb59ae1
 1002f0f:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1002f10:	cli    
 1002f11:	test   al,0xb5
 1002f13:	xor    eax,0x42b2986c
 1002f18:	(bad)  
 1002f19:	leave  
 1002f1a:	mov    ebx,0xbcf940db
 1002f1f:	lods   al,BYTE PTR ds:[rsi]
 1002f20:	jrcxz  0x1002f8e
 1002f22:	fdiv   DWORD PTR [rdx]
 1002f24:	jne    0x1002f82
 1002f26:	fild   WORD PTR [rbp-0x31]
 1002f29:	or     eax,0x3d59dcd6
 1002f2e:	shr    DWORD PTR [rbx+0x26d930ac],1
 1002f34:	cmp    al,BYTE PTR [rax]
 1002f36:	ficom  WORD PTR [rcx-0x80]
 1002f39:	push   rcx
 1002f3a:	xlat   BYTE PTR ds:[rbx]
 1002f3b:	enter  0x6116,0xd0
 1002f3f:	mov    edi,0x21b4f4b5
 1002f44:	and    eax,esp
 1002f46:	mov    bl,0x56
 1002f48:	cdq    
 1002f49:	xchg   ebp,eax
 1002f4a:	mov    edx,0xbda50fcf
 1002f4f:	mov    eax,0x2802b89e
 1002f54:	or     BYTE PTR [rax-0x264da0fb],cl
 1002f5a:	or     al,0xc6
 1002f5c:	and    al,0xe9
 1002f5e:	or     esi,DWORD PTR [rcx+0x2f6f7c87]
 1002f64:	adc    DWORD PTR [rax+rbp*2+0x58],ecx
 1002f68:	stos   DWORD PTR es:[rdi],eax
 1002f69:	sbb    eax,0x2d3dc161
 1002f6e:	data16 mov dh,0x90
 1002f71:	fdiv   QWORD PTR [r14+0x6]
 1002f75:	jno    0x1002f52
 1002f77:	add    DWORD PTR [rax+riz*1+0x102a98d2],edi
 1002f7e:	(bad)  
 1002f7f:	out    dx,eax
 1002f80:	mov    DWORD PTR [rbp-0x4ae08e4f],eax
 1002f86:	mov    dh,0x6
 1002f88:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1002f89:	in     al,0xbf
 1002f8b:	lahf   
 1002f8c:	xor    edx,esp
 1002f8e:	mov    eax,0x7c9a2e8
 1002f93:	js     0x1002fc9
 1002f95:	stc    
 1002f96:	add    BYTE PTR [rdi],cl
 1002f98:	mov    gs,WORD PTR [rax-0x67e769f7]
 1002f9e:	(bad)  
 1002f9f:	loope  0x1002f5c
 1002fa1:	or     eax,0x3d2d7f6a
 1002fa6:	ins    DWORD PTR es:[rdi],dx
 1002fa7:	or     BYTE PTR [rdi+0x191646c],dl
 1002fad:	pop    rsp
 1002fae:	movsxd esp,esi
 1002fb0:	hlt    
 1002fb1:	push   rcx
 1002fb2:	imul   ebp,DWORD PTR [rbx+0x62],0x61
 1002fb6:	ins    BYTE PTR es:[rdi],dx
 1002fb7:	sbb    al,0xd8
 1002fb9:	xor    BYTE PTR [rbp-0x7b],ah
 1002fbc:	rex.WRX add BYTE PTR [rdx-0xe],r12b
 1002fc0:	in     eax,dx
 1002fc1:	xchg   ebp,eax
 1002fc2:	(bad)  
 1002fc3:	ins    BYTE PTR es:[rdi],dx
 1002fc4:	jnp    0x1002f6b
 1002fc6:	add    DWORD PTR [rbx],ebx
 1002fc8:	shl    esp,0x8
 1002fcb:	(bad)  
 1002fcc:	push   rdi
 1002fcd:	(bad)  
 1002fce:	pmaddwd mm0,mm6
 1002fd1:	fnstenv [rax-0x4816af9b]
 1002fd7:	adc    ch,dl
 1002fd9:	mov    eax,0x887c8bbe
 1002fde:	mov    ecx,0xdd1ddffc
 1002fe3:	(bad)  
 1002fe4:	rex.WB sub rax,0x7cf315da
 1002fea:	ror    DWORD PTR [rbp+riz*2+0x58fbd44c],cl
 1002ff1:	(bad)  
 1002ff2:	mov    dl,0x4d
 1002ff4:	(bad)  
 1002ff5:	push   rcx
 1002ff6:	mov    ch,0x3a
 1002ff8:	je     0x1002ffa
 1002ffa:	mov    esp,0xbb30e2a3
 1002fff:	(bad)  
 1003000:	rex.B movs DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1003002:	fisttp WORD PTR [rdx-0x29]
 1003005:	xchg   ebp,eax
 1003006:	fdivr  DWORD PTR [rip+0xffffffffa4d1c46d]        # 0xffffffffa5d1f479
 100300c:	sti    
 100300d:	hlt    
 100300e:	(bad)  
 100300f:	shr    DWORD PTR [rdx-0x17],cl
 1003012:	imul   eax,DWORD PTR [rbx-0x4],0x46346ed9
 1003019:	mov    BYTE PTR [rdi-0x53],ah
 100301c:	sar    BYTE PTR [rax+0x2d73da60],1
 1003022:	add    al,0x44
 1003024:	in     eax,0x1d
 1003026:	add    esi,DWORD PTR [rbx]
 1003028:	pop    rdi
 1003029:	rex.WR or r13b,BYTE PTR [rdx-0x22f28337]
 1003030:	cmp    al,0x71
 1003032:	add    eax,0x241aa50
 1003037:	(bad)  
 1003038:	adc    BYTE PTR [rax],dl
 100303a:	or     edi,DWORD PTR [rsi-0x36f3df7a]
 1003040:	and    eax,0xb35768b5
 1003045:	test   DWORD PTR [rdi+0x20],ebp
 1003048:	or     esp,edx
 100304a:	mov    cx,0xe49f
 100304e:	(bad)  
 100304f:	(bad)  
 1003050:	(bad)  
 1003051:	stc    
 1003052:	ficomp WORD PTR [rsi-0x68]
 1003055:	leave  
 1003056:	fldcw  WORD PTR [rcx]
 1003058:	and    bl,BYTE PTR [rax-0x574b4f30]
 100305e:	xlat   BYTE PTR ds:[rbx]
 100305f:	(bad)  
 1003060:	(bad)  
 1003061:	cmp    eax,0xd8159b3
 1003066:	mov    ah,0x2e
 1003068:	cmp    ebx,DWORD PTR [rbp+rdi*4-0x49]
 100306c:	lods   eax,DWORD PTR ds:[rsi]
 100306d:	ins    BYTE PTR es:[rdi],dx
 100306e:	mov    edx,0xb88320c0
 1003073:	in     eax,dx
 1003074:	mov    dh,0xb3
 1003076:	mov    edi,0xb6e20c9a
 100307b:	add    ebx,DWORD PTR [rdx+0x3974b1d2]
 1003081:	rex.RXB (bad) 
 1003083:	(bad)  
 1003084:	scas   eax,DWORD PTR es:[rdi]
 1003085:	ja     0x1003059
 1003087:	popf   
 1003088:	adc    eax,0x8304db26
 100308d:	(bad)  
 100308e:	fdiv   QWORD PTR [rbx+0x12]
 1003091:	or     esp,DWORD PTR [rbx-0x1d]
 1003094:	test   BYTE PTR [rbx],bh
 1003096:	fs xchg esp,eax
 1003098:	ds push 0x6d
 100309b:	or     eax,0x7a6a5aa8
 10030a0:	or     ecx,edi
 10030a2:	(bad)  
 10030a3:	in     al,0x9d
 10030a5:	dec    DWORD PTR [rcx]
 10030a7:	xchg   ebx,eax
 10030a8:	(bad)  
 10030a9:	scas   al,BYTE PTR es:[rdi]
 10030aa:	add    BYTE PTR [rdx],cl
 10030ac:	mov    cl,0x9e
 10030ae:	(bad)  
 10030af:	jge    0x10030f5
 10030b1:	xchg   ebx,eax
 10030b2:	(bad)  
 10030b4:	shl    BYTE PTR [rbx-0xd9778f8],cl
 10030ba:	add    DWORD PTR [rsi],ebx
 10030bc:	inc    dl
 10030be:	(bad)  
 10030bf:	imul   ebx,DWORD PTR [rbp+0x57],0x67cbf762
 10030c6:	xor    BYTE PTR gs:[rcx+0x36],0x6c
 10030cb:	sbb    edi,esp
 10030cd:	(bad)  
 10030ce:	imul   ebp,DWORD PTR [rsi+0x76],0x1b
 10030d2:	(bad)  
 10030d3:	(bad)  
 10030d4:	loopne 0x1003101
 10030d6:	ror    DWORD PTR [rcx+0x10da7a5a],cl
 10030dc:	int3   
 10030dd:	rex.WX frstor [rdi+0x6f]
 10030e1:	fistp  QWORD PTR [rcx-0x41100607]
 10030e7:	mov    es,WORD PTR [rbx-0x42]
 10030ea:	mov    bh,0x17
 10030ec:	(bad)  
 10030ed:	mov    ?,WORD PTR [rax-0x295c17a0]
 10030f3:	(bad)  
 10030f4:	jle    0x1003089
 10030f6:	shl    DWORD PTR [rcx+0x38d8c2c4],1
 10030fc:	push   rdx
 10030fd:	repnz fisttp WORD PTR [rdi-0xf]
 1003101:	addr32 mov ebx,0xbc5767d1
 1003107:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1003108:	fld    QWORD PTR [rsi]
 100310a:	mov    ch,0x3f
 100310c:	rex.WXB
 100310d:	ss mov dl,0x48
 1003110:	fisubr DWORD PTR [rbx]
 1003112:	or     eax,0xa1b4cd8
 1003117:	scas   eax,DWORD PTR es:[rdi]
 1003118:	test   BYTE PTR [rdx+0x3],0x36
 100311c:	(bad)  
 100311d:	jp     0x1003123
 100311f:	rex.B ret 
 1003121:	out    dx,eax
 1003122:	(bad)  
 1003123:	fist   WORD PTR [rbp-0x21]
 1003126:	addr32 test al,0xef
 1003129:	mov    gs,WORD PTR [rsi+0x31]
 100312c:	jns    0x10030ec
 100312e:	imul   eax,DWORD PTR [rsi-0x74],0x1acb61b3
 1003135:	and    DWORD PTR [rsi-0x44],0xffffffa0
 1003139:	shr    BYTE PTR [rdi+0x25],cl
 100313c:	ss loop 0x10031a7
 100313f:	push   rdx
 1003140:	xchg   ebp,eax
 1003141:	ja     0x100314f
 1003143:	int3   
 1003144:	add    eax,DWORD PTR [rdi+0xb]
 1003147:	mov    ebx,0x220216b9
 100314c:	(bad)  
 100314d:	es add eax,0xba3bbe55
 1003153:	(bad)
 1003156:	mov    ebp,0xb45a92b2
 100315b:	sub    eax,DWORD PTR [rdx+rbp*2]
 100315e:	mov    bl,0x5c
 1003160:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1003161:	call   rdi
 1003163:	ret    0xcf31
 1003166:	shl    BYTE PTR [rbp+0x2cd99e8b],1
 100316c:	sbb    eax,0xb05bdeae
 1003171:	ret    0x9b64
 1003174:	es repnz movsxd ebp,esp
 1003178:	pushf  
 1003179:	movabs ds:0x6a9026d930a756a,eax
 1003182:	or     DWORD PTR [rdi+rdi*1-0x7a14f1ca],ebx
 1003189:	addr32 (bad) 
 100318b:	jb     0x10031a0
 100318d:	push   rdi
 100318e:	add    BYTE PTR [rip+0xffffffff95bf4a82],al        # 0xffffffff96bf7c16
 1003194:	adc    al,0x7a
 1003196:	mov    eax,0xb12baee2
 100319b:	jnp    0x10031d5
 100319d:	sbb    esi,DWORD PTR [rsi-0x2d7164f4]
 10031a3:	xchg   edx,eax
 10031a4:	or     eax,0xb7e5d5be
 10031a9:	out    dx,eax
 10031aa:	fdivr  QWORD PTR [rcx+riz*1-0x21]
 10031ae:	fisttp DWORD PTR [rbx]
 10031b0:	(bad)  
 10031b1:	rcl    bl,cl
 10031b3:	xchg   BYTE PTR [rdx-0x1e],al
 10031b6:	(bad)  
 10031b7:	icebp  
 10031b8:	clc    
 10031b9:	mov    bl,0xdd
 10031bb:	push   0x1fda836e
 10031c0:	int    0x16
 10031c2:	mov    esi,0xb9265b81
 10031c7:	mul    cl
 10031c9:	ja     0x100317b
 10031cb:	outs   dx,DWORD PTR ds:[rsi]
 10031cc:	ja     0x1003215
 10031ce:	mov    bh,0x18
 10031d0:	out    0x5a,al
 10031d2:	or     BYTE PTR [rax-0xf09590],cl
 10031d8:	retf   0x63b
 10031db:	pop    sp
 10031dd:	or     eax,DWORD PTR [rcx]
 10031df:	adc    edi,edi
 10031e1:	sahf   
 10031e2:	(bad)
 10031e7:	clc    
 10031e8:	sar    edi,cl
 10031ea:	imul   esp,DWORD PTR [rcx+0x45],0xffffffcf
 10031ee:	ins    BYTE PTR es:[rdi],dx
 10031ef:	(bad)  
 10031f0:	js     0x10031d4
 10031f2:	or     ah,BYTE PTR [rax-0x28f22d12]
 10031f8:	push   rsp
 10031f9:	add    DWORD PTR [rsi+rcx*2],0xffffffc2
 10031fd:	mov    bl,0x3
 10031ff:	cmp    DWORD PTR [rcx+0x26],esp
 1003202:	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
 1003204:	not    DWORD PTR [rsi]
 1003206:	(bad)  
 1003207:	ror    BYTE PTR [rbp+0x47],1
 100320a:	imul   ecx,DWORD PTR [rcx-0x25],0x4a3e6e77
 1003211:	push   0xffffffffffffffd1
 1003213:	scas   al,BYTE PTR es:[rdi]
 1003214:	fcomp  QWORD PTR [rdx-0x2a]
 1003217:	fldenv [rsi+0xb]
 100321a:	fild   WORD PTR [rax-0x10]
 100321d:	cmp    ebx,eax
 100321f:	(bad)  
 1003220:	push   rbx
 1003221:	scas   al,BYTE PTR es:[rdi]
 1003222:	mov    esp,0xbb9ec5a9
 1003227:	fidivr WORD PTR [rdi-0x31]
 100322a:	mov    dl,0x47
 100322c:	jmp    0x1d30e830
 1003231:	repnz mov ebp,0xbac28abd
 1003237:	retf   0x9330
 100323a:	mov    bl,0x53
 100323c:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 100323d:	movabs ds:0x693bad0360524b4,eax
 1003246:	xlat   BYTE PTR ds:[rbx]
 1003247:	int    0x29
 1003249:	push   rdi
 100324a:	ficom  WORD PTR [rdi+rdi*4+0x67]
 100324e:	fldenv [rbx]
 1003250:	cs jp  0x10032b9
 1003253:	mov    bl,0xb8
 1003255:	rex.WX (bad) 
 1003257:	(bad)
 100325b:	pop    rbp
 100325c:	xchg   esp,eax
 100325d:	sub    ebp,DWORD PTR [rdi+0x2a]
 1003260:	(bad)  
 1003261:	mov    esi,0x8ea1b40b
 1003266:	or     al,0xc3
 1003268:	sbb    ebx,edi
 100326a:	add    eax,0x2ef8d5a
 100326f:	sub    eax,0x72657551
 1003274:	jns    0x10032cd
 1003276:	outs   dx,DWORD PTR ds:[rsi]
 1003277:	jb     0x10032e4
 1003279:	imul   ebp,DWORD PTR [rsi+0x67],0x45746553
 1003280:	js     0x1003282
 1003282:	add    BYTE PTR [rax],al
 1003284:	add    BYTE PTR [rax],al
 1003286:	add    BYTE PTR [rax],al
 1003288:	jo     0x100328a
 100328a:	jae    0x100328c
 100328c:	(bad)  
 100328d:	add    BYTE PTR [rax+0x0],dh
 1003290:	imul   eax,DWORD PTR [rax],0x64002e
 1003296:	ins    BYTE PTR es:[rdi],dx
 1003297:	add    BYTE PTR [rax+rax*1+0x0],ch
	...
 10032a7:	add    BYTE PTR [rbx+0x0],dl
 10032aa:	push   rcx
 10032ab:	add    BYTE PTR [rax+rax*1+0x44],cl
 10032af:	add    BYTE PTR [rbp+0x0],dl
 10032b2:	rex.WRB add BYTE PTR [r8+0x0],r10b
 10032b6:	add    BYTE PTR [r10+0x0],r10b
 10032ba:	add    BYTE PTR cs:[rbp+0x0],al
 10032be:	pop    rax
 10032bf:	add    BYTE PTR [rbp+0x0],al
 10032c2:	add    BYTE PTR [rax],al
 10032c4:	add    BYTE PTR [rax],al
 10032c6:	add    BYTE PTR [rax],al
 10032c8:	(bad)  
 10032c9:	(bad)  
 10032ca:	ret    
 10032cb:	sbb    edx,DWORD PTR [rcx-0x61b65b7b]
 10032d1:	movabs ds:0xe6b57640b44f,al
 10032da:	add    BYTE PTR [rax],al
 10032dc:	add    BYTE PTR [rax],al
 10032de:	add    BYTE PTR [rax],al
 10032e0:	add    BYTE PTR [rax],dl
 10032e2:	add    BYTE PTR [rax],ah
 10032e4:	add    BYTE PTR [rax],al
 10032e6:	add    BYTE PTR [rax],al
 10032e8:	adc    BYTE PTR [rip+0x100],dh        # 0x10033ee
 10032ee:	add    BYTE PTR [rax],al
 10032f0:	add    al,BYTE PTR [rax]
 10032f2:	add    BYTE PTR [rax],ah
 10032f4:	add    BYTE PTR [rax],al
 10032f6:	add    BYTE PTR [rax],al
 10032f8:	(bad)  
 10032f9:	xor    eax,0x100
 10032fe:	add    BYTE PTR [rax],al
 1003300:	add    al,0x0
 1003302:	add    BYTE PTR [rax],ah
 1003304:	add    BYTE PTR [rax],al
 1003306:	add    BYTE PTR [rax],al
 1003308:	mov    al,0x35
 100330a:	add    BYTE PTR [rcx],al
 100330c:	add    BYTE PTR [rax],al
 100330e:	add    BYTE PTR [rax],al
 1003310:	or     BYTE PTR [rax],al
 1003312:	add    BYTE PTR [rax],ah
 1003314:	add    BYTE PTR [rax],al
 1003316:	add    BYTE PTR [rax],al
 1003318:	adc    BYTE PTR [rsi],dh
 100331a:	add    BYTE PTR [rcx],al
 100331c:	add    BYTE PTR [rax],al
 100331e:	add    BYTE PTR [rax],al
 1003320:	adc    BYTE PTR [rax],al
 1003322:	add    BYTE PTR [rax],ah
 1003324:	add    BYTE PTR [rax],al
 1003326:	add    BYTE PTR [rax],al
 1003328:	(bad)  
 1003329:	add    BYTE PTR ss:[rcx],al
 100332c:	add    BYTE PTR [rax],al
 100332e:	add    BYTE PTR [rax],al
 1003330:	and    BYTE PTR [rax],al
 1003332:	add    BYTE PTR [rax],ah
 1003334:	add    BYTE PTR [rax],al
 1003336:	add    BYTE PTR [rax],al
 1003338:	shl    BYTE PTR [rsi],0x0
 100333b:	add    DWORD PTR [rax],eax
 100333d:	add    BYTE PTR [rax],al
 100333f:	add    BYTE PTR [rax+0x0],al
 1003342:	add    BYTE PTR [rax],ah
 1003344:	add    BYTE PTR [rax],al
 1003346:	add    BYTE PTR [rax],al
 1003348:	adc    BYTE PTR [rdi],dh
 100334a:	add    BYTE PTR [rcx],al
 100334c:	add    BYTE PTR [rax],al
 100334e:	add    BYTE PTR [rax],al
 1003350:	add    BYTE PTR [rax],0x0
 1003353:	and    BYTE PTR [rax],al
 1003355:	add    BYTE PTR [rax],al
 1003357:	add    BYTE PTR [rax+0x37],dh
 100335a:	add    BYTE PTR [rcx],al
 100335c:	add    BYTE PTR [rax],al
 100335e:	add    BYTE PTR [rax],al
 1003360:	add    BYTE PTR [rcx],al
 1003362:	add    BYTE PTR [rax],ah
 1003364:	add    BYTE PTR [rax],al
 1003366:	add    BYTE PTR [rax],al
 1003368:	shl    BYTE PTR [rdi],1
 100336a:	add    BYTE PTR [rcx],al
 100336c:	add    BYTE PTR [rax],al
 100336e:	add    BYTE PTR [rax],al
 1003370:	add    BYTE PTR [rdx],al
 1003372:	add    BYTE PTR [rax],ah
 1003374:	add    BYTE PTR [rax],al
 1003376:	add    BYTE PTR [rax],al
 1003378:	and    BYTE PTR [rax],bh
 100337a:	add    BYTE PTR [rcx],al
 100337c:	add    BYTE PTR [rax],al
 100337e:	add    BYTE PTR [rax],al
 1003380:	add    BYTE PTR [rax+rax*1],al
 1003383:	and    BYTE PTR [rax],al
 1003385:	add    BYTE PTR [rax],al
 1003387:	add    BYTE PTR [rax+0x38],dh
 100338a:	add    BYTE PTR [rcx],al
 100338c:	add    BYTE PTR [rax],al
 100338e:	add    BYTE PTR [rax],al
 1003390:	add    BYTE PTR [rax],cl
 1003392:	add    BYTE PTR [rax],ah
 1003394:	add    BYTE PTR [rax],al
 1003396:	add    BYTE PTR [rax],al
 1003398:	sar    BYTE PTR [rax],1
 100339a:	add    BYTE PTR [rcx],al
 100339c:	add    BYTE PTR [rax],al
 100339e:	add    BYTE PTR [rax],al
 10033a0:	add    BYTE PTR [rax],ah
 10033a2:	add    BYTE PTR [rax],ah
 10033a4:	add    BYTE PTR [rax],al
 10033a6:	add    BYTE PTR [rax],al
 10033a8:	xor    BYTE PTR [rcx],bh
 10033aa:	add    BYTE PTR [rcx],al
 10033ac:	add    BYTE PTR [rax],al
 10033ae:	add    BYTE PTR [rax],al
 10033b0:	add    BYTE PTR [rax+0x2000],al
 10033b6:	add    BYTE PTR [rax],al
 10033b8:	sar    BYTE PTR [rcx],0x0
 10033bb:	add    DWORD PTR [rax],eax
 10033bd:	add    BYTE PTR [rax],al
 10033bf:	add    BYTE PTR [rbp+0x0],al
 10033c2:	jb     0x10033c4
 10033c4:	jb     0x10033c6
 10033c6:	outs   dx,DWORD PTR ds:[rsi]
 10033c7:	add    BYTE PTR [rdx+0x0],dh
 10033ca:	and    BYTE PTR [rax],al
 10033cc:	sub    eax,0x44002000
 10033d1:	add    BYTE PTR [rbp+0x0],dh
 10033d4:	ins    DWORD PTR es:[rdi],dx
 10033d5:	add    BYTE PTR [rax+0x0],dh
 10033d8:	imul   eax,DWORD PTR [rax],0x67006e
 10033de:	and    BYTE PTR [rax],al
 10033e0:	jo     0x10033e2
 10033e2:	jb     0x10033e4
 10033e4:	outs   dx,DWORD PTR ds:[rsi]
 10033e5:	add    BYTE PTR [rbx+0x0],ah
 10033e8:	add    BYTE PTR gs:[rbx+0x0],dh
 10033ec:	jae    0x10033ee
 10033ee:	and    BYTE PTR [rax],al
 10033f0:	ja     0x10033f2
 10033f2:	(bad)  
 10033f3:	add    BYTE PTR [rbx+0x0],dh
 10033f6:	and    BYTE PTR [rax],al
 10033f8:	outs   dx,BYTE PTR ds:[rsi]
 10033f9:	add    BYTE PTR [rdi+0x0],ch
 10033fc:	je     0x10033fe
 10033fe:	and    BYTE PTR [rax],al
 1003400:	jae    0x1003402
 1003402:	je     0x1003404
 1003404:	(bad)  
 1003405:	add    BYTE PTR [rdx+0x0],dh
 1003408:	je     0x100340a
 100340a:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 100340f:	add    BYTE PTR [rdi+0x0],ch
 1003412:	jb     0x1003414
 1003414:	and    BYTE PTR [rax],al
 1003416:	je     0x1003418
 1003418:	add    BYTE PTR gs:[rdx+0x0],dh
 100341c:	ins    DWORD PTR es:[rdi],dx
 100341d:	add    BYTE PTR [rcx+0x0],ch
 1003420:	outs   dx,BYTE PTR ds:[rsi]
 1003421:	add    BYTE PTR [rcx+0x0],ah
 1003424:	je     0x1003426
 1003426:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 100342b:	add    BYTE PTR [rax+0x0],dh
 100342e:	jb     0x1003430
 1003430:	add    BYTE PTR gs:[rbp+0x0],ch
 1003434:	(bad)  
 1003435:	add    BYTE PTR [rax+rax*1+0x75],dh
 1003439:	add    BYTE PTR [rdx+0x0],dh
 100343c:	add    BYTE PTR gs:[rax+rax*1+0x79],ch
 1003441:	add    BYTE PTR [rsi],ch
 1003443:	add    BYTE PTR [rip+0xa00],cl        # 0x1003e49
 1003449:	add    BYTE PTR [rax],al
 100344b:	add    BYTE PTR [rax],al
 100344d:	add    BYTE PTR [rax],al
 100344f:	add    BYTE PTR [rbp+0x0],al
 1003452:	js     0x1003454
 1003454:	je     0x1003456
 1003456:	add    BYTE PTR gs:[rdx+0x0],dh
 100345a:	outs   dx,BYTE PTR ds:[rsi]
 100345b:	add    BYTE PTR [rcx+0x0],ah
 100345e:	ins    BYTE PTR es:[rdi],dx
 100345f:	add    BYTE PTR [rax],ah
 1003461:	add    BYTE PTR [rax+rax*1+0x75],ah
 1003465:	add    BYTE PTR [rbp+0x0],ch
 1003468:	jo     0x100346a
 100346a:	and    BYTE PTR [rax],al
 100346c:	jo     0x100346e
 100346e:	jb     0x1003470
 1003470:	outs   dx,DWORD PTR ds:[rsi]
 1003471:	add    BYTE PTR [rbx+0x0],ah
 1003474:	add    BYTE PTR gs:[rbx+0x0],dh
 1003478:	jae    0x100347a
 100347a:	and    BYTE PTR [rax],al
 100347c:	jb     0x100347e
 100347e:	add    BYTE PTR gs:[rax+rax*1+0x75],dh
 1003483:	add    BYTE PTR [rdx+0x0],dh
 1003486:	outs   dx,BYTE PTR ds:[rsi]
 1003487:	add    BYTE PTR [rbp+0x0],ah
 100348a:	add    BYTE PTR fs:[rax],ah
 100348d:	add    BYTE PTR [rsi+0x0],ch
 1003490:	outs   dx,DWORD PTR ds:[rsi]
 1003491:	add    BYTE PTR [rax],ah
 1003493:	add    BYTE PTR [rbp+0x0],ah
 1003496:	jb     0x1003498
 1003498:	jb     0x100349a
 100349a:	outs   dx,DWORD PTR ds:[rsi]
 100349b:	add    BYTE PTR [rdx+0x0],dh
 100349e:	jae    0x10034a0
 10034a0:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x1003ea7
	...
 10034af:	add    BYTE PTR [rbp+0x0],al
 10034b2:	js     0x10034b4
 10034b4:	je     0x10034b6
 10034b6:	add    BYTE PTR gs:[rdx+0x0],dh
 10034ba:	outs   dx,BYTE PTR ds:[rsi]
 10034bb:	add    BYTE PTR [rcx+0x0],ah
 10034be:	ins    BYTE PTR es:[rdi],dx
 10034bf:	add    BYTE PTR [rax],ah
 10034c1:	add    BYTE PTR [rax+rax*1+0x75],ah
 10034c5:	add    BYTE PTR [rbp+0x0],ch
 10034c8:	jo     0x10034ca
 10034ca:	and    BYTE PTR [rax],al
 10034cc:	jo     0x10034ce
 10034ce:	jb     0x10034d0
 10034d0:	outs   dx,DWORD PTR ds:[rsi]
 10034d1:	add    BYTE PTR [rbx+0x0],ah
 10034d4:	add    BYTE PTR gs:[rbx+0x0],dh
 10034d8:	jae    0x10034da
 10034da:	and    BYTE PTR [rax],al
 10034dc:	jb     0x10034de
 10034de:	add    BYTE PTR gs:[rax+rax*1+0x75],dh
 10034e3:	add    BYTE PTR [rdx+0x0],dh
 10034e6:	outs   dx,BYTE PTR ds:[rsi]
 10034e7:	add    BYTE PTR [rax],ah
 10034e9:	add    BYTE PTR [rbx+0x0],ah
 10034ec:	outs   dx,DWORD PTR ds:[rsi]
 10034ed:	add    BYTE PTR [rax+rax*1+0x65],ah
 10034f1:	add    BYTE PTR [rax],ah
 10034f3:	add    BYTE PTR [rax],dh
 10034f5:	add    BYTE PTR [rax+0x0],bh
 10034f8:	and    eax,0x2e007800
 10034fd:	add    BYTE PTR [rip+0xa00],cl        # 0x1003f03
	...
 100350f:	add    BYTE PTR [rbp+0x0],al
 1003512:	jb     0x1003514
 1003514:	jb     0x1003516
 1003516:	outs   dx,DWORD PTR ds:[rsi]
 1003517:	add    BYTE PTR [rdx+0x0],dh
 100351a:	and    BYTE PTR [rax],al
 100351c:	sub    eax,0x49002000
 1003521:	add    BYTE PTR [rsi+0x0],ch
 1003524:	jo     0x1003526
 1003526:	jne    0x1003528
 1003528:	je     0x100352a
 100352a:	and    BYTE PTR [rax],al
 100352c:	jo     0x100352e
 100352e:	(bad)  
 100352f:	add    BYTE PTR [rdx+0x0],dh
 1003532:	(bad)  
 1003533:	add    BYTE PTR [rbp+0x0],ch
 1003536:	add    BYTE PTR gs:[rax+rax*1+0x65],dh
 100353b:	add    BYTE PTR [rdx+0x0],dh
 100353e:	jae    0x1003540
 1003540:	and    BYTE PTR [rax],al
 1003542:	imul   eax,DWORD PTR [rax],0x76006e
 1003548:	(bad)  
 1003549:	add    BYTE PTR [rax+rax*1+0x69],ch
 100354d:	add    BYTE PTR [rax+rax*1+0x2e],ah
 1003551:	add    BYTE PTR [rip+0xa00],cl        # 0x1003f57
	...
 100355f:	add    BYTE PTR [rbp+0x0],al
 1003562:	jb     0x1003564
 1003564:	jb     0x1003566
 1003566:	outs   dx,DWORD PTR ds:[rsi]
 1003567:	add    BYTE PTR [rdx+0x0],dh
 100356a:	and    BYTE PTR [rax],al
 100356c:	sub    eax,0x46002000
 1003571:	add    BYTE PTR [rcx+0x0],ah
 1003574:	imul   eax,DWORD PTR [rax],0x65006c
 100357a:	add    BYTE PTR fs:[rax],ah
 100357d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1003581:	add    BYTE PTR [rax],ah
 1003583:	add    BYTE PTR [rbx+0x0],ah
 1003586:	jb     0x1003588
 1003588:	add    BYTE PTR gs:[rcx+0x0],ah
 100358c:	je     0x100358e
 100358e:	add    BYTE PTR gs:[rax],ah
 1003591:	add    BYTE PTR [rax+rax*1+0x75],ah
 1003595:	add    BYTE PTR [rbp+0x0],ch
 1003598:	jo     0x100359a
 100359a:	and    BYTE PTR [rax],al
 100359c:	data16 add BYTE PTR [rcx+0x0],ch
 10035a0:	ins    BYTE PTR es:[rdi],dx
 10035a1:	add    BYTE PTR [rbp+0x0],ah
 10035a4:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x1003fab
 10035ab:	add    BYTE PTR [rax],al
 10035ad:	add    BYTE PTR [rax],al
 10035af:	add    BYTE PTR [rbp+0x0],al
 10035b2:	jb     0x10035b4
 10035b4:	jb     0x10035b6
 10035b6:	outs   dx,DWORD PTR ds:[rsi]
 10035b7:	add    BYTE PTR [rdx+0x0],dh
 10035ba:	and    BYTE PTR [rax],al
 10035bc:	sub    eax,0x46002000
 10035c1:	add    BYTE PTR [rcx+0x0],ah
 10035c4:	imul   eax,DWORD PTR [rax],0x65006c
 10035ca:	add    BYTE PTR fs:[rax],ah
 10035cd:	add    BYTE PTR [rax+rax*1+0x6f],dh
 10035d1:	add    BYTE PTR [rax],ah
 10035d3:	add    BYTE PTR [rbx+0x0],ah
 10035d6:	jb     0x10035d8
 10035d8:	add    BYTE PTR gs:[rcx+0x0],ah
 10035dc:	je     0x10035de
 10035de:	add    BYTE PTR gs:[rax],ah
 10035e1:	add    BYTE PTR [rbp+0x0],ch
 10035e4:	(bad)  
 10035e5:	add    BYTE PTR [rsi+0x0],ch
 10035e8:	imul   eax,DWORD PTR [rax],0x650066
 10035ee:	jae    0x10035f0
 10035f0:	je     0x10035f2
 10035f2:	and    BYTE PTR [rax],al
 10035f4:	data16 add BYTE PTR [rcx+0x0],ch
 10035f8:	ins    BYTE PTR es:[rdi],dx
 10035f9:	add    BYTE PTR [rbp+0x0],ah
 10035fc:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x1004003
	...
 100360f:	add    BYTE PTR [rbp+0x0],al
 1003612:	jb     0x1003614
 1003614:	jb     0x1003616
 1003616:	outs   dx,DWORD PTR ds:[rsi]
 1003617:	add    BYTE PTR [rdx+0x0],dh
 100361a:	and    BYTE PTR [rax],al
 100361c:	sub    eax,0x46002000
 1003621:	add    BYTE PTR [rcx+0x0],ah
 1003624:	imul   eax,DWORD PTR [rax],0x65006c
 100362a:	add    BYTE PTR fs:[rax],ah
 100362d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1003631:	add    BYTE PTR [rax],ah
 1003633:	add    BYTE PTR [rdi+0x0],ch
 1003636:	jo     0x1003638
 1003638:	add    BYTE PTR gs:[rsi+0x0],ch
 100363c:	and    BYTE PTR [rax],al
 100363e:	add    BYTE PTR fs:[rbp+0x0],ah
 1003642:	(bad)  
 1003643:	add    BYTE PTR [rbp+0x0],dh
 1003646:	add    BYTE PTR [eax],ah
 1003649:	add    BYTE PTR [rax+0x0],dh
 100364c:	jb     0x100364e
 100364e:	outs   dx,DWORD PTR ds:[rsi]
 100364f:	add    BYTE PTR [rbx+0x0],ah
 1003652:	add    BYTE PTR gs:[rbx+0x0],dh
 1003656:	jae    0x1003658
 1003658:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x100405f
 100365f:	add    BYTE PTR [rbp+0x0],al
 1003662:	jb     0x1003664
 1003664:	jb     0x1003666
 1003666:	outs   dx,DWORD PTR ds:[rsi]
 1003667:	add    BYTE PTR [rdx+0x0],dh
 100366a:	and    BYTE PTR [rax],al
 100366c:	sub    eax,0x46002000
 1003671:	add    BYTE PTR [rcx+0x0],ah
 1003674:	imul   eax,DWORD PTR [rax],0x65006c
 100367a:	add    BYTE PTR fs:[rax],ah
 100367d:	add    BYTE PTR [rdi+0x0],dh
 1003680:	push   0x6c006900
 1003685:	add    BYTE PTR [rbp+0x0],ah
 1003688:	and    BYTE PTR [rax],al
 100368a:	ja     0x100368c
 100368c:	jb     0x100368e
 100368e:	imul   eax,DWORD PTR [rax],0x690074
 1003694:	outs   dx,BYTE PTR ds:[rsi]
 1003695:	add    BYTE PTR [rdi+0x0],ah
 1003698:	and    BYTE PTR [rax],al
 100369a:	ins    DWORD PTR es:[rdi],dx
 100369b:	add    BYTE PTR [rcx+0x0],ch
 100369e:	outs   dx,BYTE PTR ds:[rsi]
 100369f:	add    BYTE PTR [rcx+0x0],ch
 10036a2:	and    BYTE PTR [rax],al
 10036a4:	add    BYTE PTR fs:[rbp+0x0],dh
 10036a8:	ins    DWORD PTR es:[rdi],dx
 10036a9:	add    BYTE PTR [rax+0x0],dh
 10036ac:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x10040b3
	...
 10036bf:	add    BYTE PTR [rbp+0x0],al
 10036c2:	jb     0x10036c4
 10036c4:	jb     0x10036c6
 10036c6:	outs   dx,DWORD PTR ds:[rsi]
 10036c7:	add    BYTE PTR [rdx+0x0],dh
 10036ca:	and    BYTE PTR [rax],al
 10036cc:	sub    eax,0x46002000
 10036d1:	add    BYTE PTR [rcx+0x0],ah
 10036d4:	imul   eax,DWORD PTR [rax],0x65006c
 10036da:	add    BYTE PTR fs:[rax],ah
 10036dd:	add    BYTE PTR [rdx+0x0],dh
 10036e0:	add    BYTE PTR gs:[rcx+0x0],ah
 10036e4:	add    BYTE PTR fs:[rcx+0x0],ch
 10036e8:	outs   dx,BYTE PTR ds:[rsi]
 10036e9:	add    BYTE PTR [rdi+0x0],ah
 10036ec:	and    BYTE PTR [rax],al
 10036ee:	jb     0x10036f0
 10036f0:	add    BYTE PTR gs:[rdi+0x0],ah
 10036f4:	imul   eax,DWORD PTR [rax],0x740073
 10036fa:	jb     0x10036fc
 10036fc:	jns    0x10036fe
 10036fe:	and    BYTE PTR [rax],al
 1003700:	imul   eax,DWORD PTR [rax],0x65
 1003703:	add    BYTE PTR [rcx+0x0],bh
 1003706:	jae    0x1003708
 1003708:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x100410f
 100370f:	add    BYTE PTR [rbp+0x0],al
 1003712:	jb     0x1003714
 1003714:	jb     0x1003716
 1003716:	outs   dx,DWORD PTR ds:[rsi]
 1003717:	add    BYTE PTR [rdx+0x0],dh
 100371a:	and    BYTE PTR [rax],al
 100371c:	sub    eax,0x46002000
 1003721:	add    BYTE PTR [rcx+0x0],ah
 1003724:	imul   eax,DWORD PTR [rax],0x65006c
 100372a:	add    BYTE PTR fs:[rax],ah
 100372d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1003731:	add    BYTE PTR [rax],ah
 1003733:	add    BYTE PTR [rbx+0x0],dh
 1003736:	je     0x1003738
 1003738:	(bad)  
 1003739:	add    BYTE PTR [rdx+0x0],dh
 100373c:	je     0x100373e
 100373e:	and    BYTE PTR [rax],al
 1003740:	push   rdi
 1003741:	add    BYTE PTR [rcx+0x0],ah
 1003744:	je     0x1003746
 1003746:	jae    0x1003748
 1003748:	outs   dx,DWORD PTR ds:[rsi]
 1003749:	add    BYTE PTR [rsi+0x0],ch
 100374c:	and    BYTE PTR [rax],al
 100374e:	jo     0x1003750
 1003750:	jb     0x1003752
 1003752:	outs   dx,DWORD PTR ds:[rsi]
 1003753:	add    BYTE PTR [rbx+0x0],ah
 1003756:	add    BYTE PTR gs:[rbx+0x0],dh
 100375a:	jae    0x100375c
 100375c:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x1004163
	...
 100376f:	add    BYTE PTR [rbp+0x0],al
 1003772:	jb     0x1003774
 1003774:	jb     0x1003776
 1003776:	outs   dx,DWORD PTR ds:[rsi]
 1003777:	add    BYTE PTR [rdx+0x0],dh
 100377a:	and    BYTE PTR [rax],al
 100377c:	sub    eax,0x46002000
 1003781:	add    BYTE PTR [rcx+0x0],ah
 1003784:	imul   eax,DWORD PTR [rax],0x65006c
 100378a:	add    BYTE PTR fs:[rax],ah
 100378d:	add    BYTE PTR [rdi+0x0],dh
 1003790:	jb     0x1003792
 1003792:	imul   eax,DWORD PTR [rax],0x690074
 1003798:	outs   dx,BYTE PTR ds:[rsi]
 1003799:	add    BYTE PTR [rdi+0x0],ah
 100379c:	and    BYTE PTR [rax],al
 100379e:	je     0x10037a0
 10037a0:	push   0x20006500
 10037a5:	add    BYTE PTR [rdi+0x0],dl
 10037a8:	(bad)  
 10037a9:	add    BYTE PTR [rax+rax*1+0x73],dh
 10037ad:	add    BYTE PTR [rdi+0x0],ch
 10037b0:	outs   dx,BYTE PTR ds:[rsi]
 10037b1:	add    BYTE PTR [rax],ah
 10037b3:	add    BYTE PTR [rbp+0x0],ch
 10037b6:	(bad)  
 10037b7:	add    BYTE PTR [rsi+0x0],ch
 10037ba:	imul   eax,DWORD PTR [rax],0x650066
 10037c0:	jae    0x10037c2
 10037c2:	je     0x10037c4
 10037c4:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x10041cb
 10037cb:	add    BYTE PTR [rax],al
 10037cd:	add    BYTE PTR [rax],al
 10037cf:	add    BYTE PTR [rbp+0x0],al
 10037d2:	jb     0x10037d4
 10037d4:	jb     0x10037d6
 10037d6:	outs   dx,DWORD PTR ds:[rsi]
 10037d7:	add    BYTE PTR [rdx+0x0],dh
 10037da:	and    BYTE PTR [rax],al
 10037dc:	sub    eax,0x56002000
 10037e1:	add    BYTE PTR [rbp+0x0],ah
 10037e4:	jb     0x10037e6
 10037e6:	jae    0x10037e8
 10037e8:	imul   eax,DWORD PTR [rax],0x6e006f
 10037ee:	and    BYTE PTR [rax],al
 10037f0:	ins    DWORD PTR es:[rdi],dx
 10037f1:	add    BYTE PTR [rcx+0x0],ch
 10037f4:	jae    0x10037f6
 10037f6:	ins    DWORD PTR es:[rdi],dx
 10037f7:	add    BYTE PTR [rcx+0x0],ah
 10037fa:	je     0x10037fc
 10037fc:	movsxd eax,DWORD PTR [rax]
 10037fe:	push   0x64002000
 1003803:	add    BYTE PTR [rbp+0x0],ah
 1003806:	je     0x1003808
 1003808:	add    BYTE PTR gs:[rbx+0x0],ah
 100380c:	je     0x100380e
 100380e:	add    BYTE PTR gs:[rax+rax*1+0x2e],ah
 1003813:	add    BYTE PTR [rip+0xa00],cl        # 0x1004219
 1003819:	add    BYTE PTR [rax],al
 100381b:	add    BYTE PTR [rax],al
 100381d:	add    BYTE PTR [rax],al
 100381f:	add    BYTE PTR [rbp+0x0],al
 1003822:	jb     0x1003824
 1003824:	jb     0x1003826
 1003826:	outs   dx,DWORD PTR ds:[rsi]
 1003827:	add    BYTE PTR [rdx+0x0],dh
 100382a:	and    BYTE PTR [rax],al
 100382c:	sub    eax,0x52002000
 1003831:	add    BYTE PTR [rbp+0x0],ah
 1003834:	ins    DWORD PTR es:[rdi],dx
 1003835:	add    BYTE PTR [rdi+0x0],ch
 1003838:	je     0x100383a
 100383a:	add    BYTE PTR gs:[rax],ah
 100383d:	add    BYTE PTR [rbp+0x0],ch
 1003840:	add    BYTE PTR gs:[rbp+0x0],ch
 1003844:	outs   dx,DWORD PTR ds:[rsi]
 1003845:	add    BYTE PTR [rdx+0x0],dh
 1003848:	jns    0x100384a
 100384a:	and    BYTE PTR [rax],al
 100384c:	jb     0x100384e
 100384e:	add    BYTE PTR gs:[rcx+0x0],ah
 1003852:	add    BYTE PTR fs:[rax],ah
 1003855:	add    BYTE PTR [rsi+0x0],ah
 1003858:	(bad)  
 1003859:	add    BYTE PTR [rcx+0x0],ch
 100385c:	ins    BYTE PTR es:[rdi],dx
 100385d:	add    BYTE PTR [rbp+0x0],ah
 1003860:	add    BYTE PTR fs:[rsi],ch
 1003863:	add    BYTE PTR [rip+0xa00],cl        # 0x1004269
 1003869:	add    BYTE PTR [rax],al
 100386b:	add    BYTE PTR [rax],al
 100386d:	add    BYTE PTR [rax],al
 100386f:	add    BYTE PTR [rbp+0x0],al
 1003872:	jb     0x1003874
 1003874:	jb     0x1003876
 1003876:	outs   dx,DWORD PTR ds:[rsi]
 1003877:	add    BYTE PTR [rdx+0x0],dh
 100387a:	and    BYTE PTR [rax],al
 100387c:	sub    eax,0x52002000
 1003881:	add    BYTE PTR [rbp+0x0],ah
 1003884:	ins    DWORD PTR es:[rdi],dx
 1003885:	add    BYTE PTR [rdi+0x0],ch
 1003888:	je     0x100388a
 100388a:	add    BYTE PTR gs:[rax],ah
 100388d:	add    BYTE PTR [rbp+0x0],ch
 1003890:	add    BYTE PTR gs:[rbp+0x0],ch
 1003894:	outs   dx,DWORD PTR ds:[rsi]
 1003895:	add    BYTE PTR [rdx+0x0],dh
 1003898:	jns    0x100389a
 100389a:	and    BYTE PTR [rax],al
 100389c:	data16 add BYTE PTR [rcx+0x0],ah
 10038a0:	imul   eax,DWORD PTR [rax],0x65006c
 10038a6:	add    BYTE PTR fs:[rax],ah
 10038a9:	add    BYTE PTR [rbx+0x0],ah
 10038ac:	push   0x63006500
 10038b1:	add    BYTE PTR [rbx+0x0],ch
 10038b4:	jae    0x10038b6
 10038b6:	jne    0x10038b8
 10038b8:	ins    DWORD PTR es:[rdi],dx
 10038b9:	add    BYTE PTR [rsi],ch
 10038bb:	add    BYTE PTR [rip+0xa00],cl        # 0x10042c1
	...
 10038cd:	add    BYTE PTR [rax],al
 10038cf:	add    BYTE PTR [rbp+0x0],al
 10038d2:	jb     0x10038d4
 10038d4:	jb     0x10038d6
 10038d6:	outs   dx,DWORD PTR ds:[rsi]
 10038d7:	add    BYTE PTR [rdx+0x0],dh
 10038da:	and    BYTE PTR [rax],al
 10038dc:	sub    eax,0x52002000
 10038e1:	add    BYTE PTR [rbp+0x0],ah
 10038e4:	ins    DWORD PTR es:[rdi],dx
 10038e5:	add    BYTE PTR [rdi+0x0],ch
 10038e8:	je     0x10038ea
 10038ea:	add    BYTE PTR gs:[rax],ah
 10038ed:	add    BYTE PTR [rbp+0x0],ch
 10038f0:	add    BYTE PTR gs:[rbp+0x0],ch
 10038f4:	outs   dx,DWORD PTR ds:[rsi]
 10038f5:	add    BYTE PTR [rdx+0x0],dh
 10038f8:	jns    0x10038fa
 10038fa:	and    BYTE PTR [rax],al
 10038fc:	data16 add BYTE PTR [rcx+0x0],ah
 1003900:	imul   eax,DWORD PTR [rax],0x65006c
 1003906:	add    BYTE PTR fs:[rax],ah
 1003909:	add    BYTE PTR [rbx+0x0],dh
 100390c:	(bad)  
 100390d:	add    BYTE PTR [rsi+0x0],ch
 1003910:	imul   eax,DWORD PTR [rax],0x790074
 1003916:	and    BYTE PTR [rax],al
 1003918:	movsxd eax,DWORD PTR [rax]
 100391a:	push   0x63006500
 100391f:	add    BYTE PTR [rbx+0x0],ch
 1003922:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x1004329
 1003929:	add    BYTE PTR [rax],al
 100392b:	add    BYTE PTR [rax],al
 100392d:	add    BYTE PTR [rax],al
 100392f:	add    BYTE PTR [rax+rax*1+0x68],dl
 1003933:	add    BYTE PTR [rbp+0x0],ah
 1003936:	and    BYTE PTR [rax],al
 1003938:	add    BYTE PTR gs:[rdx+0x0],dh
 100393c:	jb     0x100393e
 100393e:	outs   dx,DWORD PTR ds:[rsi]
 100393f:	add    BYTE PTR [rdx+0x0],dh
 1003942:	and    BYTE PTR [rax],al
 1003944:	imul   eax,DWORD PTR [rax],0x66006e
 100394a:	outs   dx,DWORD PTR ds:[rsi]
 100394b:	add    BYTE PTR [rdx+0x0],dh
 100394e:	ins    DWORD PTR es:[rdi],dx
 100394f:	add    BYTE PTR [rcx+0x0],ah
 1003952:	je     0x1003954
 1003954:	imul   eax,DWORD PTR [rax],0x6e006f
 100395a:	and    BYTE PTR [rax],al
 100395c:	push   0x73006100
 1003961:	add    BYTE PTR [rax],ah
 1003963:	add    BYTE PTR [rdx+0x0],ah
 1003966:	add    BYTE PTR gs:[rbp+0x0],ah
 100396a:	outs   dx,BYTE PTR ds:[rsi]
 100396b:	add    BYTE PTR [rax],ah
 100396d:	add    BYTE PTR [rbx+0x0],dh
 1003970:	jne    0x1003972
 1003972:	(bad)  
 1003973:	add    BYTE PTR [rbp+0x0],ch
 1003976:	imul   eax,DWORD PTR [rax],0x740074
 100397c:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1003981:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1003985:	add    BYTE PTR [rax],ah
 1003987:	add    BYTE PTR [rdi+0x0],dl
 100398a:	(bad)  
 100398b:	add    BYTE PTR [rax+rax*1+0x73],dh
 100398f:	add    BYTE PTR [rdi+0x0],ch
 1003992:	outs   dx,BYTE PTR ds:[rsi]
 1003993:	add    BYTE PTR [rax],ah
 1003995:	add    BYTE PTR [rbp+0x0],ah
 1003998:	jb     0x100399a
 100399a:	jb     0x100399c
 100399c:	outs   dx,DWORD PTR ds:[rsi]
 100399d:	add    BYTE PTR [rdx+0x0],dh
 10039a0:	and    BYTE PTR [rax],al
 10039a2:	jb     0x10039a4
 10039a4:	add    BYTE PTR gs:[rax+0x0],dh
 10039a8:	outs   dx,DWORD PTR ds:[rsi]
 10039a9:	add    BYTE PTR [rdx+0x0],dh
 10039ac:	je     0x10039ae
 10039ae:	imul   eax,DWORD PTR [rax],0x67006e
 10039b4:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x10043bb
 10039bb:	add    BYTE PTR [rax],al
 10039bd:	add    BYTE PTR [rax],al
 10039bf:	add    BYTE PTR [rbp+0x0],al
 10039c2:	jb     0x10039c4
 10039c4:	jb     0x10039c6
 10039c6:	outs   dx,DWORD PTR ds:[rsi]
 10039c7:	add    BYTE PTR [rdx+0x0],dh
 10039ca:	and    BYTE PTR [rax],al
 10039cc:	sub    eax,0x73002000
 10039d1:	add    BYTE PTR [rdi+0x0],ch
 10039d4:	ins    DWORD PTR es:[rdi],dx
 10039d5:	add    BYTE PTR [rbp+0x0],ah
 10039d8:	and    BYTE PTR [rax],al
 10039da:	outs   dx,DWORD PTR ds:[rsi]
 10039db:	add    BYTE PTR [rsi+0x0],ah
 10039de:	and    BYTE PTR [rax],al
 10039e0:	je     0x10039e2
 10039e2:	push   0x20006500
 10039e7:	add    BYTE PTR [rax+rax*1+0x75],ah
 10039eb:	add    BYTE PTR [rbp+0x0],ch
 10039ee:	jo     0x10039f0
 10039f0:	and    BYTE PTR [rax],al
 10039f2:	data16 add BYTE PTR [rcx+0x0],ch
 10039f6:	ins    BYTE PTR es:[rdi],dx
 10039f7:	add    BYTE PTR [rbp+0x0],ah
 10039fa:	jae    0x10039fc
 10039fc:	and    BYTE PTR [rax],al
 10039fe:	ja     0x1003a00
 1003a00:	add    BYTE PTR gs:[rdx+0x0],dh
 1003a04:	add    BYTE PTR gs:[rax],ah
 1003a07:	add    BYTE PTR [rsi+0x0],ch
 1003a0a:	outs   dx,DWORD PTR ds:[rsi]
 1003a0b:	add    BYTE PTR [rax+rax*1+0x20],dh
 1003a0f:	add    BYTE PTR [rdi+0x0],ah
 1003a12:	add    BYTE PTR gs:[rsi+0x0],ch
 1003a16:	add    BYTE PTR gs:[rdx+0x0],dh
 1003a1a:	(bad)  
 1003a1b:	add    BYTE PTR [rax+rax*1+0x65],dh
 1003a1f:	add    BYTE PTR [rax+rax*1+0x20],ah
 1003a23:	add    BYTE PTR [rdi+0x0],ch
 1003a26:	outs   dx,BYTE PTR ds:[rsi]
 1003a27:	add    BYTE PTR [rax],ah
 1003a29:	add    BYTE PTR [rdx+0x0],dh
 1003a2c:	add    BYTE PTR gs:[rbp+0x0],ch
 1003a30:	outs   dx,DWORD PTR ds:[rsi]
 1003a31:	add    BYTE PTR [rax+rax*1+0x65],dh
 1003a35:	add    BYTE PTR [rax],ah
 1003a37:	add    BYTE PTR [rsi+0x0],ch
 1003a3a:	outs   dx,DWORD PTR ds:[rsi]
 1003a3b:	add    BYTE PTR [rax+rax*1+0x65],ah
 1003a3f:	add    BYTE PTR [rbx+0x0],dh
 1003a42:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x1004449
 1003a49:	add    BYTE PTR [rax],al
 1003a4b:	add    BYTE PTR [rax],al
 1003a4d:	add    BYTE PTR [rax],al
 1003a4f:	add    BYTE PTR [rax+0x100ad],dl
 1003a55:	add    BYTE PTR [rax],al
 1003a57:	add    BYTE PTR [rax],dh
 1003a59:	scas   al,BYTE PTR es:[rdi]
 1003a5a:	add    BYTE PTR [rcx],al
 1003a5c:	add    BYTE PTR [rax],al
 1003a5e:	add    BYTE PTR [rax],al
 1003a60:	push   rax
 1003a61:	scas   al,BYTE PTR es:[rdi]
 1003a62:	add    BYTE PTR [rcx],al
 1003a64:	add    BYTE PTR [rax],al
 1003a66:	add    BYTE PTR [rax],al
 1003a68:	mov    al,0xc1
 1003a6a:	add    BYTE PTR [rcx],al
 1003a6c:	add    BYTE PTR [rax],al
 1003a6e:	add    BYTE PTR [rax],al
 1003a70:	and    BYTE PTR [rax+rax*1+0x1],ch
 1003a77:	add    BYTE PTR [rax],al
 1003a79:	lods   al,BYTE PTR ds:[rsi]
 1003a7a:	add    BYTE PTR [rcx],al
 1003a7c:	add    BYTE PTR [rax],al
 1003a7e:	add    BYTE PTR [rax],al
 1003a80:	rex stos DWORD PTR es:[rdi],eax
 1003a82:	add    BYTE PTR [rcx],al
 1003a84:	add    BYTE PTR [rax],al
 1003a86:	add    BYTE PTR [rax],al
 1003a88:	jo     0x1003a39
 1003a8a:	add    BYTE PTR [rcx],al
 1003a8c:	add    BYTE PTR [rax],al
 1003a8e:	add    BYTE PTR [rax],al
 1003a90:	nop
 1003a91:	lods   al,BYTE PTR ds:[rsi]
 1003a92:	add    BYTE PTR [rcx],al
 1003a94:	add    BYTE PTR [rax],al
 1003a96:	add    BYTE PTR [rax],al
 1003a98:	and    BYTE PTR [rbx+0x100],ch
 1003a9e:	add    BYTE PTR [rax],al
 1003aa0:	(bad)  
 1003aa1:	mov    eax,0x100
 1003aa6:	add    BYTE PTR [rax],al
 1003aa8:	(bad)  
 1003aa9:	mov    ecx,0x100
 1003aae:	add    BYTE PTR [rax],al
 1003ab0:	push   rax
 1003ab1:	stos   DWORD PTR es:[rdi],eax
 1003ab2:	add    BYTE PTR [rcx],al
 1003ab4:	add    BYTE PTR [rax],al
 1003ab6:	add    BYTE PTR [rax],al
 1003ab8:	shr    BYTE PTR [rbx+0x100],1
 1003abe:	add    BYTE PTR [rax],al
 1003ac0:	sub    BYTE PTR [rax+rax*1+0x1],0x0
 1003ac8:	jo     0x1003a76
 1003aca:	add    BYTE PTR [rcx],al
 1003acc:	add    BYTE PTR [rax],al
 1003ace:	add    BYTE PTR [rax],al
 1003ad0:	lock lods al,BYTE PTR ds:[rsi]
 1003ad2:	add    BYTE PTR [rcx],al
 1003ad4:	add    BYTE PTR [rax],al
 1003ad6:	add    BYTE PTR [rax],al
 1003ad8:	add    BYTE PTR [rbp+0x100],ch
 1003ade:	add    BYTE PTR [rax],al
 1003ae0:	loopne 0x1003a8e
 1003ae2:	add    BYTE PTR [rcx],al
 1003ae4:	add    BYTE PTR [rax],al
 1003ae6:	add    BYTE PTR [rax],al
 1003ae8:	mov    al,0xac
 1003aea:	add    BYTE PTR [rcx],al
 1003aec:	add    BYTE PTR [rax],al
 1003aee:	add    BYTE PTR [rax],al
 1003af0:	shr    BYTE PTR [rax+rax*1+0x1],0x0
 1003af8:	shr    BYTE PTR [rax+rax*1+0x1],1
 1003aff:	add    al,al
 1003b01:	stos   DWORD PTR es:[rdi],eax
 1003b02:	add    BYTE PTR [rcx],al
 1003b04:	add    BYTE PTR [rax],al
 1003b06:	add    BYTE PTR [rax],al
 1003b08:	cmp    BYTE PTR [rdi+0x100],0x0
 1003b0f:	add    BYTE PTR [rax-0x53],dl
 1003b12:	add    BYTE PTR [rcx],al
 1003b14:	add    BYTE PTR [rax],al
 1003b16:	add    BYTE PTR [rax],al
 1003b18:	rex lods eax,DWORD PTR ds:[rsi]
 1003b1a:	add    BYTE PTR [rcx],al
 1003b1c:	add    BYTE PTR [rax],al
 1003b1e:	add    BYTE PTR [rax],al
 1003b20:	and    BYTE PTR [rbp+0x100],ch
 1003b26:	add    BYTE PTR [rax],al
 1003b28:	xor    BYTE PTR [rbp+0x100],ch
 1003b2e:	add    BYTE PTR [rax],al
 1003b30:	loopne 0x1003add
 1003b32:	add    BYTE PTR [rcx],al
 1003b34:	add    BYTE PTR [rax],al
 1003b36:	add    BYTE PTR [rax],al
 1003b38:	xor    BYTE PTR [rbx+0x100],dh
 1003b3e:	add    BYTE PTR [rax],al
 1003b40:	(bad)  
 1003b41:	mov    edx,0x100
 1003b46:	add    BYTE PTR [rax],al
 1003b48:	and    eax,0x73006c00
 1003b4d:	add    BYTE PTR [rax],ah
 1003b4f:	add    BYTE PTR [rip+0x64006c00],ah        # 0x6500a755
 1003b55:	add    BYTE PTR [rax],ah
 1003b57:	add    BYTE PTR [rax],dh
 1003b59:	add    BYTE PTR [rax],ah
 1003b5b:	add    BYTE PTR [rax],dh
 1003b5d:	add    BYTE PTR [rdx],bh
 1003b5f:	add    BYTE PTR [rax],dh
 1003b61:	add    BYTE PTR [rax],ah
 1003b63:	add    BYTE PTR [rip+0x7000],ah        # 0x100ab69
 1003b69:	add    BYTE PTR [rax],al
 1003b6b:	add    BYTE PTR [rax],al
 1003b6d:	add    BYTE PTR [rax],al
 1003b6f:	add    BYTE PTR [rax+rax*1+0x69],dl
 1003b73:	add    BYTE PTR [rbp+0x0],ch
 1003b76:	add    BYTE PTR gs:[rdi+0x0],ch
 1003b7a:	jne    0x1003b7c
 1003b7c:	je     0x1003b7e
 1003b7e:	and    BYTE PTR [rax],al
 1003b80:	ja     0x1003b82
 1003b82:	(bad)  
 1003b83:	add    BYTE PTR [rcx+0x0],ch
 1003b86:	je     0x1003b88
 1003b88:	imul   eax,DWORD PTR [rax],0x67006e
 1003b8e:	and    BYTE PTR [rax],al
 1003b90:	data16 add BYTE PTR [rdi+0x0],ch
 1003b94:	jb     0x1003b96
 1003b96:	and    BYTE PTR [rax],al
 1003b98:	add    BYTE PTR gs:[rax+0x0],bh
 1003b9c:	je     0x1003b9e
 1003b9e:	add    BYTE PTR gs:[rdx+0x0],dh
 1003ba2:	outs   dx,BYTE PTR ds:[rsi]
 1003ba3:	add    BYTE PTR [rcx+0x0],ah
 1003ba6:	ins    BYTE PTR es:[rdi],dx
 1003ba7:	add    BYTE PTR [rax],ah
 1003ba9:	add    BYTE PTR [rax+rax*1+0x75],ah
 1003bad:	add    BYTE PTR [rbp+0x0],ch
 1003bb0:	jo     0x1003bb2
 1003bb2:	and    BYTE PTR [rax],al
 1003bb4:	jo     0x1003bb6
 1003bb6:	jb     0x1003bb8
 1003bb8:	outs   dx,DWORD PTR ds:[rsi]
 1003bb9:	add    BYTE PTR [rbx+0x0],ah
 1003bbc:	add    BYTE PTR gs:[rbx+0x0],dh
 1003bc0:	jae    0x1003bc2
 1003bc2:	and    BYTE PTR [rax],al
 1003bc4:	and    eax,0x2e006400
 1003bc9:	add    BYTE PTR [rip+0xa00],cl        # 0x10045cf
 1003bcf:	add    BYTE PTR [rbp+0x0],al
 1003bd2:	js     0x1003bd4
 1003bd4:	je     0x1003bd6
 1003bd6:	add    BYTE PTR gs:[rdx+0x0],dh
 1003bda:	outs   dx,BYTE PTR ds:[rsi]
 1003bdb:	add    BYTE PTR [rcx+0x0],ah
 1003bde:	ins    BYTE PTR es:[rdi],dx
 1003bdf:	add    BYTE PTR [rax],ah
 1003be1:	add    BYTE PTR [rax+rax*1+0x75],ah
 1003be5:	add    BYTE PTR [rbp+0x0],ch
 1003be8:	jo     0x1003bea
 1003bea:	and    BYTE PTR [rax],al
 1003bec:	jo     0x1003bee
 1003bee:	jb     0x1003bf0
 1003bf0:	outs   dx,DWORD PTR ds:[rsi]
 1003bf1:	add    BYTE PTR [rbx+0x0],ah
 1003bf4:	add    BYTE PTR gs:[rbx+0x0],dh
 1003bf8:	jae    0x1003bfa
 1003bfa:	and    BYTE PTR [rax],al
 1003bfc:	outs   dx,BYTE PTR ds:[rsi]
 1003bfd:	add    BYTE PTR [rdi+0x0],ch
 1003c00:	je     0x1003c02
 1003c02:	and    BYTE PTR [rax],al
 1003c04:	add    BYTE PTR gs:[rax+0x0],bh
 1003c08:	add    BYTE PTR gs:[rbx+0x0],ah
 1003c0c:	jne    0x1003c0e
 1003c0e:	je     0x1003c10
 1003c10:	add    BYTE PTR gs:[rax+rax*1+0x2e],ah
 1003c15:	add    BYTE PTR [rip+0xa00],cl        # 0x100461b
 1003c1b:	add    BYTE PTR [rax],al
 1003c1d:	add    BYTE PTR [rax],al
 1003c1f:	add    BYTE PTR [rdx],ah
 1003c21:	add    eax,0x11993
 1003c26:	add    BYTE PTR [rax],al
 1003c28:	test   cl,bh
	...
 1003c32:	add    BYTE PTR [rax],al
 1003c34:	add    eax,DWORD PTR [rax]
 1003c36:	add    BYTE PTR [rax],al
 1003c38:	mov    ecx,?
 1003c3a:	add    BYTE PTR [rax],al
 1003c3c:	and    BYTE PTR [rax],al
 1003c3e:	add    BYTE PTR [rax],al
 1003c40:	add    BYTE PTR [rax],al
 1003c42:	add    BYTE PTR [rax],al
 1003c44:	add    DWORD PTR [rax],eax
 1003c46:	add    BYTE PTR [rax],al
 1003c48:	push   rdx
 1003c49:	push   rbx
 1003c4a:	rex.R push rbx
 1003c4c:	mov    bh,0x13
 1003c4e:	mov    WORD PTR [rax],?
 1003c50:	sbb    al,0x99
 1003c52:	fild   DWORD PTR [rcx-0x57]
 1003c55:	and    edi,DWORD PTR [rax-0x4f]
 1003c58:	or     esp,ebx
 1003c5a:	lods   eax,DWORD PTR ds:[rsi]
 1003c5b:	(bad)  
 1003c5d:	add    BYTE PTR [rax],al
 1003c5f:	add    BYTE PTR [rbx+rax*2+0x45],al
 1003c63:	pop    rax
 1003c64:	rex.RB
 1003c65:	rex.XB
 1003c66:	cs jo  0x1003ccd
 1003c69:	(bad)  
	...
 1003cbe:	add    BYTE PTR [rax],al
 1003cc0:	add    DWORD PTR [rax],eax
	...
 1003cca:	add    BYTE PTR [rax],al
 1003ccc:	rex adc DWORD PTR [rcx],eax
 1003ccf:	add    al,ch
 1003cd1:	cmp    al,0x0
 1003cd3:	add    al,al
 1003cd5:	cmp    al,0x0
	...
 1003cef:	add    BYTE PTR [rcx],al
 1003cf1:	add    BYTE PTR [rax],al
 1003cf3:	add    BYTE PTR [rax],al
 1003cf5:	cmp    eax,0x0
 1003cfa:	add    BYTE PTR [rax],al
 1003cfc:	add    BYTE PTR [rax],al
 1003cfe:	add    BYTE PTR [rax],al
 1003d00:	adc    BYTE PTR [rip+0x0],bh        # 0x1003d06
	...
 1003d0e:	add    BYTE PTR [rax],al
 1003d10:	rex adc DWORD PTR [rcx],eax
	...
 1003d1b:	add    bh,bh
 1003d1d:	(bad)  
 1003d1e:	(bad)  
 1003d1f:	inc    DWORD PTR [rax]
 1003d21:	add    BYTE PTR [rax],al
 1003d23:	add    BYTE PTR [rax+0x0],al
 1003d26:	add    BYTE PTR [rax],al
 1003d28:	call   0x1003d69
	...
 1003d6d:	add    BYTE PTR [rax],al
 1003d6f:	add    BYTE PTR [rax-0x7d],cl
 1003d72:	in     al,dx
 1003d73:	sub    BYTE PTR [rcx+0x4830244c],cl
 1003d79:	lea    edx,[rip+0xbc51]        # 0x100f9d0
 1003d7f:	lea    rcx,[rsp+0x30]
 1003d84:	call   0x1006ae4
 1003d89:	int3   
 1003d8a:	int3   
 1003d8b:	int3   
 1003d8c:	int3   
 1003d8d:	int3   
 1003d8e:	int3   
 1003d8f:	int3   
 1003d90:	mov    QWORD PTR [rsp+0x10],rbp
 1003d95:	mov    QWORD PTR [rsp+0x18],rsi
 1003d9a:	push   rdi
 1003d9b:	sub    rsp,0x20
 1003d9f:	mov    edi,r8d
 1003da2:	mov    rsi,rdx
 1003da5:	mov    rbp,rcx
 1003da8:	call   QWORD PTR [rip+0xffffffffffffd2a2]        # 0x1001050
 1003dae:	test   rax,rax
 1003db1:	jne    0x1003dc3
 1003db3:	mov    rbp,QWORD PTR [rsp+0x38]
 1003db8:	mov    rsi,QWORD PTR [rsp+0x40]
 1003dbd:	add    rsp,0x20
 1003dc1:	pop    rdi
 1003dc2:	ret    
 1003dc3:	mov    rcx,rax
 1003dc6:	mov    QWORD PTR [rsp+0x30],rbx
 1003dcb:	call   QWORD PTR [rip+0xffffffffffffd4af]        # 0x1001280
 1003dd1:	mov    rbx,rax
 1003dd4:	test   rax,rax
 1003dd7:	je     0x1003e09
 1003dd9:	mov    rdx,rsi
 1003ddc:	mov    rcx,rbp
 1003ddf:	call   QWORD PTR [rip+0xffffffffffffd273]        # 0x1001058
 1003de5:	mov    r11d,eax
 1003de8:	add    r11,rbx
 1003deb:	and    edi,0xf
 1003dee:	jbe    0x1003e04
 1003df0:	cmp    rbx,r11
 1003df3:	jae    0x1003e09
 1003df5:	movzx  eax,WORD PTR [rbx]
 1003df8:	lea    rbx,[rbx+rax*2]
 1003dfc:	add    rbx,0x2
 1003e00:	dec    edi
 1003e02:	jne    0x1003df0
 1003e04:	cmp    rbx,r11
 1003e07:	jb     0x1003e0d
 1003e09:	xor    eax,eax
 1003e0b:	jmp    0x1003e19
 1003e0d:	xor    eax,eax
 1003e0f:	cmp    WORD PTR [rbx],ax
 1003e12:	cmove  rbx,rax
 1003e16:	mov    rax,rbx
 1003e19:	mov    rbx,QWORD PTR [rsp+0x30]
 1003e1e:	mov    rbp,QWORD PTR [rsp+0x38]
 1003e23:	mov    rsi,QWORD PTR [rsp+0x40]
 1003e28:	add    rsp,0x20
 1003e2c:	pop    rdi
 1003e2d:	ret    
 1003e2e:	int3   
 1003e2f:	int3   
 1003e30:	int3   
 1003e31:	int3   
 1003e32:	int3   
 1003e33:	int3   
 1003e34:	int3   
 1003e35:	int3   
 1003e36:	int3   
 1003e37:	int3   
 1003e38:	int3   
 1003e39:	int3   
 1003e3a:	int3   
 1003e3b:	int3   
 1003e3c:	int3   
 1003e3d:	int3   
 1003e3e:	int3   
 1003e3f:	int3   
 1003e40:	mov    QWORD PTR [rsp+0x8],rbx
 1003e45:	mov    QWORD PTR [rsp+0x10],rbp
 1003e4a:	mov    QWORD PTR [rsp+0x18],rsi
 1003e4f:	mov    QWORD PTR [rsp+0x20],rdi
 1003e54:	push   r14
 1003e56:	sub    rsp,0x20
 1003e5a:	mov    ebp,ecx
 1003e5c:	movzx  r14d,dx
 1003e60:	lea    rcx,[rip+0xdc69]        # 0x1011ad0
 1003e67:	xor    edx,edx
 1003e69:	xor    ebx,ebx
 1003e6b:	call   0x10071f8
 1003e70:	lea    esi,[rbx+0x1]
 1003e73:	mov    rdi,rax
 1003e76:	test   rax,rax
 1003e79:	je     0x1003ed4
 1003e7b:	nop    DWORD PTR [rax+rax*1+0x0]
 1003e80:	test   rbx,rbx
 1003e83:	jne    0x1003ed4
 1003e85:	mov    eax,ebp
 1003e87:	lea    edx,[rbx+0x6]
 1003e8a:	movzx  r9d,r14w
 1003e8e:	shr    eax,0x4
 1003e91:	mov    rcx,rdi
 1003e94:	inc    ax
 1003e97:	movzx  r8d,ax
 1003e9b:	call   QWORD PTR [rip+0xffffffffffffd1f7]        # 0x1001098
 1003ea1:	test   rax,rax
 1003ea4:	je     0x1003ebc
 1003ea6:	mov    r8d,ebp
 1003ea9:	mov    rdx,rax
 1003eac:	mov    rcx,rdi
 1003eaf:	call   0x1003d90
 1003eb4:	mov    rbx,rax
 1003eb7:	test   rax,rax
 1003eba:	jne    0x1003ef1
 1003ebc:	lea    rcx,[rip+0xdc0d]        # 0x1011ad0
 1003ec3:	mov    edx,esi
 1003ec5:	call   0x10071f8
 1003eca:	inc    esi
 1003ecc:	mov    rdi,rax
 1003ecf:	test   rax,rax
 1003ed2:	jne    0x1003e80
 1003ed4:	xor    eax,eax
 1003ed6:	mov    rbx,QWORD PTR [rsp+0x30]
 1003edb:	mov    rbp,QWORD PTR [rsp+0x38]
 1003ee0:	mov    rsi,QWORD PTR [rsp+0x40]
 1003ee5:	mov    rdi,QWORD PTR [rsp+0x48]
 1003eea:	add    rsp,0x20
 1003eee:	pop    r14
 1003ef0:	ret    
 1003ef1:	mov    rax,rdi
 1003ef4:	jmp    0x1003ed6
 1003ef6:	int3   
 1003ef7:	int3   
 1003ef8:	int3   
 1003ef9:	int3   
 1003efa:	int3   
 1003efb:	int3   
 1003efc:	int3   
 1003efd:	int3   
 1003efe:	int3   
 1003eff:	int3   
 1003f00:	rex push rbx
 1003f02:	sub    rsp,0x20
 1003f06:	mov    rbx,rcx
 1003f09:	mov    rcx,QWORD PTR [rcx]
 1003f0c:	test   rcx,rcx
 1003f0f:	je     0x1003f1e
 1003f11:	call   QWORD PTR [rip+0xffffffffffffd161]        # 0x1001078
 1003f17:	mov    QWORD PTR [rbx],0x0
 1003f1e:	add    rsp,0x20
 1003f22:	pop    rbx
 1003f23:	ret    
 1003f24:	int3   
 1003f25:	int3   
 1003f26:	int3   
 1003f27:	int3   
 1003f28:	int3   
 1003f29:	int3   
 1003f2a:	int3   
 1003f2b:	int3   
 1003f2c:	int3   
 1003f2d:	int3   
 1003f2e:	int3   
 1003f2f:	int3   
 1003f30:	sub    rsp,0x28
 1003f34:	mov    rdx,QWORD PTR [rcx]
 1003f37:	sub    rdx,0x18
 1003f3b:	or     eax,0xffffffff
 1003f3e:	lock xadd DWORD PTR [rdx+0x10],eax
 1003f43:	dec    eax
 1003f45:	test   eax,eax
 1003f47:	jg     0x1003f52
 1003f49:	mov    rcx,QWORD PTR [rdx]
 1003f4c:	mov    rax,QWORD PTR [rcx]
 1003f4f:	call   QWORD PTR [rax+0x8]
 1003f52:	add    rsp,0x28
 1003f56:	ret    
 1003f57:	int3   
 1003f58:	int3   
 1003f59:	int3   
 1003f5a:	int3   
 1003f5b:	int3   
 1003f5c:	int3   
 1003f5d:	int3   
 1003f5e:	int3   
 1003f5f:	int3   
 1003f60:	mov    QWORD PTR [rsp+0x8],rbx
 1003f65:	push   rdi
 1003f66:	sub    rsp,0x20
 1003f6a:	mov    rax,QWORD PTR [rcx]
 1003f6d:	mov    rbx,rcx
 1003f70:	cmp    DWORD PTR [rax-0x10],0x0
 1003f74:	mov    rdi,QWORD PTR [rax-0x18]
 1003f78:	lea    rdx,[rax-0x18]
 1003f7c:	je     0x1003fd2
 1003f7e:	cmp    DWORD PTR [rdx+0x10],0x0
 1003f82:	jge    0x1003fab
 1003f84:	cmp    DWORD PTR [rax-0xc],0x0
 1003f88:	jge    0x1003f95
 1003f8a:	mov    ecx,0x80070057
 1003f8f:	call   0x1003d70
 1003f94:	int3   
 1003f95:	xor    ecx,ecx
 1003f97:	mov    DWORD PTR [rax-0x10],ecx
 1003f9a:	mov    rax,QWORD PTR [rbx]
 1003f9d:	mov    WORD PTR [rax],cx
 1003fa0:	mov    rbx,QWORD PTR [rsp+0x30]
 1003fa5:	add    rsp,0x20
 1003fa9:	pop    rdi
 1003faa:	ret    
 1003fab:	or     eax,0xffffffff
 1003fae:	lock xadd DWORD PTR [rdx+0x10],eax
 1003fb3:	dec    eax
 1003fb5:	test   eax,eax
 1003fb7:	jg     0x1003fc2
 1003fb9:	mov    rcx,QWORD PTR [rdx]
 1003fbc:	mov    rax,QWORD PTR [rcx]
 1003fbf:	call   QWORD PTR [rax+0x8]
 1003fc2:	mov    rax,QWORD PTR [rdi]
 1003fc5:	mov    rcx,rdi
 1003fc8:	call   QWORD PTR [rax+0x18]
 1003fcb:	add    rax,0x18
 1003fcf:	mov    QWORD PTR [rbx],rax
 1003fd2:	mov    rbx,QWORD PTR [rsp+0x30]
 1003fd7:	add    rsp,0x20
 1003fdb:	pop    rdi
 1003fdc:	ret    
 1003fdd:	int3   
 1003fde:	int3   
 1003fdf:	int3   
 1003fe0:	int3   
 1003fe1:	int3   
 1003fe2:	int3   
 1003fe3:	int3   
 1003fe4:	int3   
 1003fe5:	int3   
 1003fe6:	int3   
 1003fe7:	int3   
 1003fe8:	int3   
 1003fe9:	int3   
 1003fea:	int3   
 1003feb:	int3   
 1003fec:	int3   
 1003fed:	int3   
 1003fee:	int3   
 1003fef:	int3   
 1003ff0:	mov    QWORD PTR [rsp+0x8],rbx
 1003ff5:	push   rdi
 1003ff6:	sub    rsp,0x20
 1003ffa:	movsxd rbx,edx
 1003ffd:	mov    rdi,rcx
 1004000:	test   edx,edx
 1004002:	jns    0x100400f
 1004004:	mov    ecx,0x80070057
 1004009:	call   0x1003d70
 100400e:	int3   
 100400f:	mov    rax,QWORD PTR [rcx]
 1004012:	mov    ecx,0x1
 1004017:	sub    ecx,DWORD PTR [rax-0x8]
 100401a:	mov    eax,DWORD PTR [rax-0xc]
 100401d:	sub    eax,ebx
 100401f:	or     ecx,eax
 1004021:	jge    0x100402d
 1004023:	mov    edx,ebx
 1004025:	mov    rcx,rdi
 1004028:	call   0x1004320
 100402d:	mov    rax,QWORD PTR [rdi]
 1004030:	cmp    ebx,DWORD PTR [rax-0xc]
 1004033:	jg     0x100404c
 1004035:	mov    DWORD PTR [rax-0x10],ebx
 1004038:	mov    rax,QWORD PTR [rdi]
 100403b:	xor    edx,edx
 100403d:	mov    WORD PTR [rax+rbx*2],dx
 1004041:	mov    rbx,QWORD PTR [rsp+0x30]
 1004046:	add    rsp,0x20
 100404a:	pop    rdi
 100404b:	ret    
 100404c:	mov    ecx,0x80070057
 1004051:	call   0x1003d70
 1004056:	int3   
 1004057:	int3   
 1004058:	int3   
 1004059:	int3   
 100405a:	int3   
 100405b:	int3   
 100405c:	int3   
 100405d:	int3   
 100405e:	int3   
 100405f:	int3   
 1004060:	mov    QWORD PTR [rsp+0x18],rbx
 1004065:	mov    QWORD PTR [rsp+0x20],rbp
 100406a:	push   rdi
 100406b:	sub    rsp,0x20
 100406f:	movsxd rbx,r8d
 1004072:	mov    rbp,rdx
 1004075:	mov    rdi,rcx
 1004078:	test   r8d,r8d
 100407b:	jne    0x1004091
 100407d:	mov    rbx,QWORD PTR [rsp+0x40]
 1004082:	mov    rbp,QWORD PTR [rsp+0x48]
 1004087:	add    rsp,0x20
 100408b:	pop    rdi
 100408c:	jmp    0x1003f60
 1004091:	test   rdx,rdx
 1004094:	jne    0x10040a1
 1004096:	mov    ecx,0x80070057
 100409b:	call   0x1003d70
 10040a0:	int3   
 10040a1:	mov    rax,QWORD PTR [rcx]
 10040a4:	mov    QWORD PTR [rsp+0x30],rsi
 10040a9:	mov    rsi,rdx
 10040ac:	sub    rsi,rax
 10040af:	mov    QWORD PTR [rsp+0x38],r14
 10040b4:	mov    r14d,DWORD PTR [rax-0x10]
 10040b8:	sar    rsi,1
 10040bb:	test   r8d,r8d
 10040be:	jns    0x10040cb
 10040c0:	mov    ecx,0x80070057
 10040c5:	call   0x1003d70
 10040ca:	int3   
 10040cb:	mov    ecx,0x1
 10040d0:	sub    ecx,DWORD PTR [rax-0x8]
 10040d3:	mov    eax,DWORD PTR [rax-0xc]
 10040d6:	sub    eax,ebx
 10040d8:	or     ecx,eax
 10040da:	jge    0x10040e6
 10040dc:	mov    edx,ebx
 10040de:	mov    rcx,rdi
 10040e1:	call   0x1004320
 10040e6:	mov    rcx,QWORD PTR [rdi]
 10040e9:	movsxd rdx,DWORD PTR [rcx-0xc]
 10040ed:	add    rdx,rdx
 10040f0:	cmp    rsi,r14
 10040f3:	lea    r14,[rbx+rbx*1]
 10040f7:	mov    r9,r14
 10040fa:	ja     0x1004108
 10040fc:	lea    r8,[rcx+rsi*2]
 1004100:	call   QWORD PTR [rip+0xffffffffffffd26a]        # 0x1001370
 1004106:	jmp    0x1004111
 1004108:	mov    r8,rbp
 100410b:	call   QWORD PTR [rip+0xffffffffffffd257]        # 0x1001368
 1004111:	mov    rax,QWORD PTR [rdi]
 1004114:	cmp    ebx,DWORD PTR [rax-0xc]
 1004117:	jg     0x1004140
 1004119:	mov    rsi,QWORD PTR [rsp+0x30]
 100411e:	mov    rbp,QWORD PTR [rsp+0x48]
 1004123:	mov    DWORD PTR [rax-0x10],ebx
 1004126:	mov    rax,QWORD PTR [rdi]
 1004129:	mov    rbx,QWORD PTR [rsp+0x40]
 100412e:	xor    ecx,ecx
 1004130:	mov    WORD PTR [r14+rax*1],cx
 1004135:	mov    r14,QWORD PTR [rsp+0x38]
 100413a:	add    rsp,0x20
 100413e:	pop    rdi
 100413f:	ret    
 1004140:	mov    ecx,0x80070057
 1004145:	call   0x1003d70
 100414a:	int3   
 100414b:	int3   
 100414c:	int3   
 100414d:	int3   
 100414e:	int3   
 100414f:	int3   
 1004150:	int3   
 1004151:	int3   
 1004152:	int3   
 1004153:	int3   
 1004154:	int3   
 1004155:	int3   
 1004156:	int3   
 1004157:	int3   
 1004158:	int3   
 1004159:	int3   
 100415a:	int3   
 100415b:	int3   
 100415c:	int3   
 100415d:	int3   
 100415e:	int3   
 100415f:	int3   
 1004160:	mov    QWORD PTR [rsp+0x10],rbx
 1004165:	mov    QWORD PTR [rsp+0x18],rbp
 100416a:	mov    QWORD PTR [rsp+0x20],rsi
 100416f:	push   r12
 1004171:	push   r14
 1004173:	push   r15
 1004175:	sub    rsp,0x20
 1004179:	movsxd rbp,DWORD PTR [rsp+0x60]
 100417e:	movsxd rbx,r8d
 1004181:	mov    r15,r9
 1004184:	lea    esi,[rbx+rbp*1]
 1004187:	mov    r12,rdx
 100418a:	mov    r14,rcx
 100418d:	test   esi,esi
 100418f:	jns    0x100419c
 1004191:	mov    ecx,0x80070057
 1004196:	call   0x1003d70
 100419b:	int3   
 100419c:	mov    rax,QWORD PTR [rcx]
 100419f:	mov    ecx,0x1
 10041a4:	mov    QWORD PTR [rsp+0x40],rdi
 10041a9:	sub    ecx,DWORD PTR [rax-0x8]
 10041ac:	mov    eax,DWORD PTR [rax-0xc]
 10041af:	sub    eax,esi
 10041b1:	or     ecx,eax
 10041b3:	jge    0x10041bf
 10041b5:	mov    edx,esi
 10041b7:	mov    rcx,r14
 10041ba:	call   0x1004320
 10041bf:	mov    rdi,QWORD PTR [r14]
 10041c2:	add    rbx,rbx
 10041c5:	mov    r8,r12
 10041c8:	mov    rcx,rdi
 10041cb:	mov    r9,rbx
 10041ce:	mov    rdx,rbx
 10041d1:	call   QWORD PTR [rip+0xffffffffffffd191]        # 0x1001368
 10041d7:	mov    rdx,rbp
 10041da:	lea    rcx,[rbx+rdi*1]
 10041de:	add    rdx,rdx
 10041e1:	mov    r8,r15
 10041e4:	mov    r9,rdx
 10041e7:	call   QWORD PTR [rip+0xffffffffffffd17b]        # 0x1001368
 10041ed:	mov    r11,QWORD PTR [r14]
 10041f0:	mov    rdi,QWORD PTR [rsp+0x40]
 10041f5:	cmp    esi,DWORD PTR [r11-0xc]
 10041f9:	jg     0x1004225
 10041fb:	mov    rbx,QWORD PTR [rsp+0x48]
 1004200:	mov    rbp,QWORD PTR [rsp+0x50]
 1004205:	mov    DWORD PTR [r11-0x10],esi
 1004209:	mov    rax,QWORD PTR [r14]
 100420c:	movsxd rcx,esi
 100420f:	mov    rsi,QWORD PTR [rsp+0x58]
 1004214:	xor    edx,edx
 1004216:	mov    WORD PTR [rax+rcx*2],dx
 100421a:	add    rsp,0x20
 100421e:	pop    r15
 1004220:	pop    r14
 1004222:	pop    r12
 1004224:	ret    
 1004225:	mov    ecx,0x80070057
 100422a:	call   0x1003d70
 100422f:	int3   
 1004230:	int3   
 1004231:	int3   
 1004232:	int3   
 1004233:	int3   
 1004234:	int3   
 1004235:	int3   
 1004236:	int3   
 1004237:	int3   
 1004238:	int3   
 1004239:	int3   
 100423a:	int3   
 100423b:	int3   
 100423c:	int3   
 100423d:	int3   
 100423e:	int3   
 100423f:	int3   
 1004240:	sub    rsp,0x28
 1004244:	mov    ecx,0x8007000e
 1004249:	call   0x1003d70
 100424e:	int3   
 100424f:	int3   
 1004250:	int3   
 1004251:	int3   
 1004252:	int3   
 1004253:	int3   
 1004254:	int3   
 1004255:	int3   
 1004256:	int3   
 1004257:	int3   
 1004258:	int3   
 1004259:	int3   
 100425a:	int3   
 100425b:	int3   
 100425c:	int3   
 100425d:	int3   
 100425e:	int3   
 100425f:	int3   
 1004260:	mov    QWORD PTR [rsp+0x8],rbx
 1004265:	mov    QWORD PTR [rsp+0x10],rbp
 100426a:	mov    QWORD PTR [rsp+0x18],rsi
 100426f:	mov    QWORD PTR [rsp+0x20],rdi
 1004274:	push   r14
 1004276:	sub    rsp,0x20
 100427a:	mov    rbx,QWORD PTR [rcx]
 100427d:	mov    rsi,rcx
 1004280:	mov    edi,edx
 1004282:	mov    rcx,QWORD PTR [rbx-0x18]
 1004286:	mov    ebp,DWORD PTR [rbx-0x10]
 1004289:	mov    rax,QWORD PTR [rcx]
 100428c:	call   QWORD PTR [rax+0x20]
 100428f:	mov    r8d,0x2
 1004295:	mov    edx,edi
 1004297:	mov    r9,QWORD PTR [rax]
 100429a:	mov    rcx,rax
 100429d:	call   QWORD PTR [r9]
 10042a0:	mov    r14,rax
 10042a3:	test   rax,rax
 10042a6:	jne    0x10042ae
 10042a8:	call   0x1004240
 10042ad:	int3   
 10042ae:	cmp    ebp,edi
 10042b0:	mov    r8,rbx
 10042b3:	cmovl  edi,ebp
 10042b6:	inc    edi
 10042b8:	movsxd rdx,edi
 10042bb:	lea    rdi,[rax+0x18]
 10042bf:	add    rdx,rdx
 10042c2:	mov    rcx,rdi
 10042c5:	mov    r9,rdx
 10042c8:	call   QWORD PTR [rip+0xffffffffffffd09a]        # 0x1001368
 10042ce:	mov    DWORD PTR [r14+0x8],ebp
 10042d2:	or     eax,0xffffffff
 10042d5:	lock xadd DWORD PTR [rbx-0x8],eax
 10042da:	dec    eax
 10042dc:	test   eax,eax
 10042de:	jg     0x10042ee
 10042e0:	mov    rcx,QWORD PTR [rbx-0x18]
 10042e4:	lea    rdx,[rbx-0x18]
 10042e8:	mov    rax,QWORD PTR [rcx]
 10042eb:	call   QWORD PTR [rax+0x8]
 10042ee:	mov    rbx,QWORD PTR [rsp+0x30]
 10042f3:	mov    rbp,QWORD PTR [rsp+0x38]
 10042f8:	mov    QWORD PTR [rsi],rdi
 10042fb:	mov    rsi,QWORD PTR [rsp+0x40]
 1004300:	mov    rdi,QWORD PTR [rsp+0x48]
 1004305:	add    rsp,0x20
 1004309:	pop    r14
 100430b:	ret    
 100430c:	int3   
 100430d:	int3   
 100430e:	int3   
 100430f:	int3   
 1004310:	int3   
 1004311:	int3   
 1004312:	int3   
 1004313:	int3   
 1004314:	int3   
 1004315:	int3   
 1004316:	int3   
 1004317:	int3   
 1004318:	int3   
 1004319:	int3   
 100431a:	int3   
 100431b:	int3   
 100431c:	int3   
 100431d:	int3   
 100431e:	int3   
 100431f:	int3   
 1004320:	sub    rsp,0x28
 1004324:	mov    r8d,edx
 1004327:	mov    rdx,QWORD PTR [rcx]
 100432a:	mov    r9,rcx
 100432d:	mov    eax,DWORD PTR [rdx-0x10]
 1004330:	cmp    eax,r8d
 1004333:	cmovg  r8d,eax
 1004337:	cmp    DWORD PTR [rdx-0x8],0x1
 100433b:	jle    0x1004349
 100433d:	mov    edx,r8d
 1004340:	add    rsp,0x28
 1004344:	jmp    0x1004260
 1004349:	mov    ecx,DWORD PTR [rdx-0xc]
 100434c:	cmp    ecx,r8d
 100434f:	jge    0x100437b
 1004351:	cmp    ecx,0x40000000
 1004357:	jle    0x1004361
 1004359:	add    ecx,0x100000
 100435f:	jmp    0x100436a
 1004361:	mov    eax,ecx
 1004363:	cdq    
 1004364:	sub    eax,edx
 1004366:	sar    eax,1
 1004368:	add    ecx,eax
 100436a:	cmp    ecx,r8d
 100436d:	cmovl  ecx,r8d
 1004371:	mov    edx,ecx
 1004373:	mov    rcx,r9
 1004376:	call   0x1004390
 100437b:	add    rsp,0x28
 100437f:	ret    
 1004380:	int3   
 1004381:	int3   
 1004382:	int3   
 1004383:	int3   
 1004384:	int3   
 1004385:	int3   
 1004386:	int3   
 1004387:	int3   
 1004388:	int3   
 1004389:	int3   
 100438a:	int3   
 100438b:	int3   
 100438c:	int3   
 100438d:	int3   
 100438e:	int3   
 100438f:	int3   
 1004390:	rex push rbx
 1004392:	sub    rsp,0x20
 1004396:	mov    r8d,edx
 1004399:	mov    rdx,QWORD PTR [rcx]
 100439c:	mov    rbx,rcx
 100439f:	mov    rcx,QWORD PTR [rdx-0x18]
 10043a3:	sub    rdx,0x18
 10043a7:	cmp    DWORD PTR [rdx+0xc],r8d
 10043ab:	jge    0x10043d6
 10043ad:	test   r8d,r8d
 10043b0:	jle    0x10043d6
 10043b2:	mov    rax,QWORD PTR [rcx]
 10043b5:	mov    r9d,0x2
 10043bb:	call   QWORD PTR [rax+0x10]
 10043be:	test   rax,rax
 10043c1:	jne    0x10043c9
 10043c3:	call   0x1004240
 10043c8:	int3   
 10043c9:	add    rax,0x18
 10043cd:	mov    QWORD PTR [rbx],rax
 10043d0:	add    rsp,0x20
 10043d4:	pop    rbx
 10043d5:	ret    
 10043d6:	call   0x1004240
 10043db:	int3   
 10043dc:	int3   
 10043dd:	int3   
 10043de:	int3   
 10043df:	int3   
 10043e0:	int3   
 10043e1:	int3   
 10043e2:	int3   
 10043e3:	int3   
 10043e4:	int3   
 10043e5:	int3   
 10043e6:	int3   
 10043e7:	int3   
 10043e8:	int3   
 10043e9:	int3   
 10043ea:	int3   
 10043eb:	int3   
 10043ec:	int3   
 10043ed:	int3   
 10043ee:	int3   
 10043ef:	int3   
 10043f0:	mov    QWORD PTR [rsp+0x8],rbx
 10043f5:	push   rdi
 10043f6:	sub    rsp,0x20
 10043fa:	mov    rbx,rcx
 10043fd:	mov    rcx,QWORD PTR [rcx]
 1004400:	mov    rax,QWORD PTR [rcx]
 1004403:	call   QWORD PTR [rax+0x20]
 1004406:	cmp    DWORD PTR [rbx+0x10],0x0
 100440a:	mov    rcx,rax
 100440d:	jl     0x1004429
 100440f:	cmp    rax,QWORD PTR [rbx]
 1004412:	jne    0x1004429
 1004414:	mov    rdi,rbx
 1004417:	lock inc DWORD PTR [rbx+0x10]
 100441b:	mov    rax,rbx
 100441e:	mov    rbx,QWORD PTR [rsp+0x30]
 1004423:	add    rsp,0x20
 1004427:	pop    rdi
 1004428:	ret    
 1004429:	mov    rax,QWORD PTR [rax]
 100442c:	mov    edx,DWORD PTR [rbx+0x8]
 100442f:	mov    r8d,0x2
 1004435:	call   QWORD PTR [rax]
 1004437:	mov    rdi,rax
 100443a:	test   rax,rax
 100443d:	jne    0x1004445
 100443f:	call   0x1004240
 1004444:	int3   
 1004445:	mov    eax,DWORD PTR [rbx+0x8]
 1004448:	lea    r8,[rbx+0x18]
 100444c:	lea    rcx,[rdi+0x18]
 1004450:	mov    DWORD PTR [rdi+0x8],eax
 1004453:	mov    eax,DWORD PTR [rbx+0x8]
 1004456:	inc    eax
 1004458:	movsxd rdx,eax
 100445b:	add    rdx,rdx
 100445e:	mov    r9,rdx
 1004461:	call   QWORD PTR [rip+0xffffffffffffcf01]        # 0x1001368
 1004467:	mov    rbx,QWORD PTR [rsp+0x30]
 100446c:	mov    rax,rdi
 100446f:	add    rsp,0x20
 1004473:	pop    rdi
 1004474:	ret    
 1004475:	int3   
 1004476:	int3   
 1004477:	int3   
 1004478:	int3   
 1004479:	int3   
 100447a:	int3   
 100447b:	int3   
 100447c:	int3   
 100447d:	int3   
 100447e:	int3   
 100447f:	int3   
 1004480:	mov    QWORD PTR [rsp+0x8],rcx
 1004485:	push   rdi
 1004486:	sub    rsp,0x30
 100448a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1004493:	mov    QWORD PTR [rsp+0x48],rbx
 1004498:	mov    rbx,rdx
 100449b:	mov    rdi,rcx
 100449e:	lea    rcx,[rip+0xccdb]        # 0x1011180
 10044a5:	mov    rax,QWORD PTR [rip+0xccd4]        # 0x1011180
 10044ac:	call   QWORD PTR [rax+0x18]
 10044af:	add    rax,0x18
 10044b3:	mov    QWORD PTR [rdi],rax
 10044b6:	test   rbx,rbx
 10044b9:	je     0x10044fc
 10044bb:	test   rbx,0xffffffffffff0000
 10044c2:	jne    0x10044e8
 10044c4:	movzx  ebx,bx
 10044c7:	xor    edx,edx
 10044c9:	mov    ecx,ebx
 10044cb:	call   0x1003e40
 10044d0:	test   rax,rax
 10044d3:	je     0x10044e6
 10044d5:	mov    r8d,ebx
 10044d8:	mov    rdx,rax
 10044db:	mov    rcx,rdi
 10044de:	call   0x10046f0
 10044e3:	nop
 10044e4:	jmp    0x100450d
 10044e6:	jmp    0x100450d
 10044e8:	or     rax,0xffffffffffffffff
 10044ec:	nop    DWORD PTR [rax+0x0]
 10044f0:	inc    rax
 10044f3:	cmp    WORD PTR [rbx+rax*2],0x0
 10044f8:	jne    0x10044f0
 10044fa:	jmp    0x10044fe
 10044fc:	xor    eax,eax
 10044fe:	mov    r8d,eax
 1004501:	mov    rdx,rbx
 1004504:	mov    rcx,rdi
 1004507:	call   0x1004060
 100450c:	nop
 100450d:	mov    rax,rdi
 1004510:	mov    rbx,QWORD PTR [rsp+0x48]
 1004515:	add    rsp,0x30
 1004519:	pop    rdi
 100451a:	ret    
 100451b:	int3   
 100451c:	int3   
 100451d:	int3   
 100451e:	int3   
 100451f:	int3   
 1004520:	int3   
 1004521:	int3   
 1004522:	int3   
 1004523:	int3   
 1004524:	int3   
 1004525:	int3   
 1004526:	int3   
 1004527:	int3   
 1004528:	int3   
 1004529:	int3   
 100452a:	int3   
 100452b:	int3   
 100452c:	int3   
 100452d:	int3   
 100452e:	int3   
 100452f:	int3   
 1004530:	mov    QWORD PTR [rsp+0x8],rcx
 1004535:	sub    rsp,0x38
 1004539:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1004542:	mov    rdx,QWORD PTR [rcx]
 1004545:	sub    rdx,0x18
 1004549:	or     eax,0xffffffff
 100454c:	lock xadd DWORD PTR [rdx+0x10],eax
 1004551:	dec    eax
 1004553:	test   eax,eax
 1004555:	jg     0x1004560
 1004557:	mov    rcx,QWORD PTR [rdx]
 100455a:	mov    rax,QWORD PTR [rcx]
 100455d:	call   QWORD PTR [rax+0x8]
 1004560:	add    rsp,0x38
 1004564:	ret    
 1004565:	int3   
 1004566:	int3   
 1004567:	int3   
 1004568:	int3   
 1004569:	int3   
 100456a:	int3   
 100456b:	int3   
 100456c:	int3   
 100456d:	int3   
 100456e:	int3   
 100456f:	int3   
 1004570:	mov    QWORD PTR [rsp+0x18],rbp
 1004575:	push   rsi
 1004576:	sub    rsp,0x20
 100457a:	mov    rbp,rdx
 100457d:	mov    rsi,rcx
 1004580:	test   rdx,rdx
 1004583:	je     0x10045eb
 1004585:	cmp    WORD PTR [rdx],0x0
 1004589:	je     0x10045eb
 100458b:	mov    QWORD PTR [rsp+0x30],rbx
 1004590:	mov    QWORD PTR [rsp+0x38],rdi
 1004595:	mov    rdi,QWORD PTR [rcx]
 1004598:	movzx  eax,WORD PTR [rdi]
 100459b:	xor    ebx,ebx
 100459d:	test   ax,ax
 10045a0:	je     0x10045e1
 10045a2:	movzx  edx,ax
 10045a5:	mov    rcx,rbp
 10045a8:	call   QWORD PTR [rip+0xffffffffffffcdca]        # 0x1001378
 10045ae:	test   rax,rax
 10045b1:	je     0x10045bd
 10045b3:	test   rbx,rbx
 10045b6:	jne    0x10045bf
 10045b8:	mov    rbx,rdi
 10045bb:	jmp    0x10045bf
 10045bd:	xor    ebx,ebx
 10045bf:	movzx  eax,WORD PTR [rdi+0x2]
 10045c3:	add    rdi,0x2
 10045c7:	test   ax,ax
 10045ca:	jne    0x10045a2
 10045cc:	test   rbx,rbx
 10045cf:	je     0x10045e1
 10045d1:	sub    rbx,QWORD PTR [rsi]
 10045d4:	mov    rcx,rsi
 10045d7:	sar    rbx,1
 10045da:	mov    edx,ebx
 10045dc:	call   0x1003ff0
 10045e1:	mov    rdi,QWORD PTR [rsp+0x38]
 10045e6:	mov    rbx,QWORD PTR [rsp+0x30]
 10045eb:	mov    rax,rsi
 10045ee:	mov    rbp,QWORD PTR [rsp+0x40]
 10045f3:	add    rsp,0x20
 10045f7:	pop    rsi
 10045f8:	ret    
 10045f9:	int3   
 10045fa:	int3   
 10045fb:	int3   
 10045fc:	int3   
 10045fd:	int3   
 10045fe:	int3   
 10045ff:	int3   
 1004600:	mov    QWORD PTR [rsp+0x10],rdx
 1004605:	mov    QWORD PTR [rsp+0x18],r8
 100460a:	mov    QWORD PTR [rsp+0x20],r9
 100460f:	sub    rsp,0x28
 1004613:	lea    r8,[rsp+0x40]
 1004618:	call   0x1004630
 100461d:	add    rsp,0x28
 1004621:	ret    
 1004622:	int3   
 1004623:	int3   
 1004624:	int3   
 1004625:	int3   
 1004626:	int3   
 1004627:	int3   
 1004628:	int3   
 1004629:	int3   
 100462a:	int3   
 100462b:	int3   
 100462c:	int3   
 100462d:	int3   
 100462e:	int3   
 100462f:	int3   
 1004630:	mov    QWORD PTR [rsp+0x10],rbp
 1004635:	mov    QWORD PTR [rsp+0x18],rsi
 100463a:	push   rdi
 100463b:	sub    rsp,0x20
 100463f:	mov    rbp,r8
 1004642:	mov    rsi,rdx
 1004645:	mov    rdi,rcx
 1004648:	test   rdx,rdx
 100464b:	jne    0x1004658
 100464d:	mov    ecx,0x80070057
 1004652:	call   0x1003d70
 1004657:	int3   
 1004658:	mov    rdx,r8
 100465b:	mov    rcx,rsi
 100465e:	mov    QWORD PTR [rsp+0x30],rbx
 1004663:	call   QWORD PTR [rip+0xffffffffffffcd1f]        # 0x1001388
 1004669:	movsxd rbx,eax
 100466c:	test   eax,eax
 100466e:	jns    0x100467b
 1004670:	mov    ecx,0x80004005
 1004675:	call   0x1003d70
 100467a:	int3   
 100467b:	mov    rax,QWORD PTR [rdi]
 100467e:	mov    ecx,0x1
 1004683:	sub    ecx,DWORD PTR [rax-0x8]
 1004686:	mov    eax,DWORD PTR [rax-0xc]
 1004689:	sub    eax,ebx
 100468b:	or     ecx,eax
 100468d:	jge    0x1004699
 100468f:	mov    edx,ebx
 1004691:	mov    rcx,rdi
 1004694:	call   0x1004320
 1004699:	mov    rcx,QWORD PTR [rdi]
 100469c:	lea    eax,[rbx+0x1]
 100469f:	mov    r9,rbp
 10046a2:	movsxd rdx,eax
 10046a5:	mov    r8,rsi
 10046a8:	call   QWORD PTR [rip+0xffffffffffffccd2]        # 0x1001380
 10046ae:	mov    r11,QWORD PTR [rdi]
 10046b1:	cmp    ebx,DWORD PTR [r11-0xc]
 10046b5:	jg     0x10046d9
 10046b7:	mov    rbp,QWORD PTR [rsp+0x38]
 10046bc:	mov    rsi,QWORD PTR [rsp+0x40]
 10046c1:	mov    DWORD PTR [r11-0x10],ebx
 10046c5:	mov    rax,QWORD PTR [rdi]
 10046c8:	xor    edx,edx
 10046ca:	mov    WORD PTR [rax+rbx*2],dx
 10046ce:	mov    rbx,QWORD PTR [rsp+0x30]
 10046d3:	add    rsp,0x20
 10046d7:	pop    rdi
 10046d8:	ret    
 10046d9:	mov    ecx,0x80070057
 10046de:	call   0x1003d70
 10046e3:	int3   
 10046e4:	int3   
 10046e5:	int3   
 10046e6:	int3   
 10046e7:	int3   
 10046e8:	int3   
 10046e9:	int3   
 10046ea:	int3   
 10046eb:	int3   
 10046ec:	int3   
 10046ed:	int3   
 10046ee:	int3   
 10046ef:	int3   
 10046f0:	mov    QWORD PTR [rsp+0x8],rbx
 10046f5:	mov    QWORD PTR [rsp+0x10],rsi
 10046fa:	push   rdi
 10046fb:	sub    rsp,0x20
 10046ff:	mov    eax,r8d
 1004702:	mov    rdi,rdx
 1004705:	mov    ebx,r8d
 1004708:	shr    eax,0x4
 100470b:	mov    rsi,rcx
 100470e:	mov    r8d,0x6
 1004714:	inc    ax
 1004717:	mov    rcx,rdi
 100471a:	movzx  edx,ax
 100471d:	call   QWORD PTR [rip+0xffffffffffffc96d]        # 0x1001090
 1004723:	test   rax,rax
 1004726:	je     0x1004816
 100472c:	mov    r8d,ebx
 100472f:	mov    rdx,rax
 1004732:	mov    rcx,rdi
 1004735:	call   0x1003d90
 100473a:	mov    rdi,rax
 100473d:	test   rax,rax
 1004740:	je     0x1004816
 1004746:	movzx  ebx,WORD PTR [rax]
 1004749:	test   ebx,ebx
 100474b:	jns    0x1004758
 100474d:	mov    ecx,0x80070057
 1004752:	call   0x1003d70
 1004757:	int3   
 1004758:	mov    rax,QWORD PTR [rsi]
 100475b:	mov    ecx,0x1
 1004760:	sub    ecx,DWORD PTR [rax-0x8]
 1004763:	mov    eax,DWORD PTR [rax-0xc]
 1004766:	sub    eax,ebx
 1004768:	or     ecx,eax
 100476a:	jge    0x1004776
 100476c:	mov    edx,ebx
 100476e:	mov    rcx,rsi
 1004771:	call   0x1004320
 1004776:	movzx  eax,WORD PTR [rdi]
 1004779:	lea    r8,[rdi+0x2]
 100477d:	cmp    eax,0xffffffff
 1004780:	jne    0x100479d
 1004782:	or     rax,0xffffffffffffffff
 1004786:	data16 nop WORD PTR [rax+rax*1+0x0]
 1004790:	inc    rax
 1004793:	cmp    WORD PTR [r8+rax*2],0x0
 1004799:	jne    0x1004790
 100479b:	inc    eax
 100479d:	mov    rcx,QWORD PTR [rsi]
 10047a0:	movsxd r9,eax
 10047a3:	mov    rdx,rbx
 10047a6:	call   0x1006d0e
 10047ab:	test   eax,eax
 10047ad:	je     0x10047e4
 10047af:	cmp    eax,0xc
 10047b2:	je     0x10047d9
 10047b4:	cmp    eax,0x16
 10047b7:	je     0x10047ce
 10047b9:	cmp    eax,0x22
 10047bc:	je     0x10047ce
 10047be:	cmp    eax,0x50
 10047c1:	je     0x10047e4
 10047c3:	mov    ecx,0x80004005
 10047c8:	call   0x1003d70
 10047cd:	int3   
 10047ce:	mov    ecx,0x80070057
 10047d3:	call   0x1003d70
 10047d8:	int3   
 10047d9:	mov    ecx,0x8007000e
 10047de:	call   0x1003d70
 10047e3:	int3   
 10047e4:	mov    rcx,QWORD PTR [rsi]
 10047e7:	cmp    ebx,DWORD PTR [rcx-0xc]
 10047ea:	jg     0x100480b
 10047ec:	mov    DWORD PTR [rcx-0x10],ebx
 10047ef:	mov    rcx,QWORD PTR [rsi]
 10047f2:	xor    edx,edx
 10047f4:	mov    WORD PTR [rcx+rbx*2],dx
 10047f8:	lea    eax,[rdx+0x1]
 10047fb:	mov    rbx,QWORD PTR [rsp+0x30]
 1004800:	mov    rsi,QWORD PTR [rsp+0x38]
 1004805:	add    rsp,0x20
 1004809:	pop    rdi
 100480a:	ret    
 100480b:	mov    ecx,0x80070057
 1004810:	call   0x1003d70
 1004815:	int3   
 1004816:	mov    rbx,QWORD PTR [rsp+0x30]
 100481b:	mov    rsi,QWORD PTR [rsp+0x38]
 1004820:	xor    eax,eax
 1004822:	add    rsp,0x20
 1004826:	pop    rdi
 1004827:	ret    
 1004828:	int3   
 1004829:	int3   
 100482a:	int3   
 100482b:	int3   
 100482c:	int3   
 100482d:	int3   
 100482e:	int3   
 100482f:	int3   
 1004830:	mov    QWORD PTR [rsp+0x8],rcx
 1004835:	push   r14
 1004837:	sub    rsp,0x40
 100483b:	mov    QWORD PTR [rsp+0x38],0xfffffffffffffffe
 1004844:	mov    QWORD PTR [rsp+0x58],rbx
 1004849:	mov    QWORD PTR [rsp+0x60],rsi
 100484e:	mov    QWORD PTR [rsp+0x68],rdi
 1004853:	mov    r14,r8
 1004856:	mov    rdi,rdx
 1004859:	mov    rsi,rcx
 100485c:	xor    ebx,ebx
 100485e:	mov    DWORD PTR [rsp+0x30],ebx
 1004862:	mov    rax,QWORD PTR [r8]
 1004865:	mov    rcx,QWORD PTR [rax-0x18]
 1004869:	test   rcx,rcx
 100486c:	je     0x100487c
 100486e:	mov    rax,QWORD PTR [rcx]
 1004871:	call   QWORD PTR [rax+0x20]
 1004874:	mov    r11,rax
 1004877:	test   rax,rax
 100487a:	jne    0x1004890
 100487c:	lea    rcx,[rip+0xc8fd]        # 0x1011180
 1004883:	mov    rax,QWORD PTR [rip+0xc8f6]        # 0x1011180
 100488a:	call   QWORD PTR [rax+0x20]
 100488d:	mov    r11,rax
 1004890:	mov    ecx,ebx
 1004892:	test   r11,r11
 1004895:	setne  cl
 1004898:	test   ecx,ecx
 100489a:	jne    0x10048a7
 100489c:	mov    ecx,0x80004005
 10048a1:	call   0x1003d70
 10048a6:	int3   
 10048a7:	mov    rax,QWORD PTR [r11]
 10048aa:	mov    rcx,r11
 10048ad:	call   QWORD PTR [rax+0x18]
 10048b0:	add    rax,0x18
 10048b4:	mov    QWORD PTR [rsi],rax
 10048b7:	mov    DWORD PTR [rsp+0x30],0x1
 10048bf:	mov    r9,QWORD PTR [r14]
 10048c2:	mov    eax,DWORD PTR [r9-0x10]
 10048c6:	test   rdi,rdi
 10048c9:	je     0x10048da
 10048cb:	or     rbx,0xffffffffffffffff
 10048cf:	nop
 10048d0:	inc    rbx
 10048d3:	cmp    WORD PTR [rdi+rbx*2],0x0
 10048d8:	jne    0x10048d0
 10048da:	mov    DWORD PTR [rsp+0x20],eax
 10048de:	mov    r8d,ebx
 10048e1:	mov    rdx,rdi
 10048e4:	mov    rcx,rsi
 10048e7:	call   0x1004160
 10048ec:	mov    rax,rsi
 10048ef:	mov    rbx,QWORD PTR [rsp+0x58]
 10048f4:	mov    rsi,QWORD PTR [rsp+0x60]
 10048f9:	mov    rdi,QWORD PTR [rsp+0x68]
 10048fe:	add    rsp,0x40
 1004902:	pop    r14
 1004904:	ret    
 1004905:	int3   
 1004906:	int3   
 1004907:	int3   
 1004908:	int3   
 1004909:	int3   
 100490a:	int3   
 100490b:	int3   
 100490c:	int3   
 100490d:	int3   
 100490e:	int3   
 100490f:	int3   
 1004910:	mov    QWORD PTR [rsp+0x8],rcx
 1004915:	push   rdi
 1004916:	sub    rsp,0x30
 100491a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1004923:	mov    QWORD PTR [rsp+0x50],rbx
 1004928:	mov    rdi,rcx
 100492b:	lea    rbx,[rcx+0x8]
 100492f:	mov    QWORD PTR [rsp+0x48],rbx
 1004934:	lea    rcx,[rip+0xc845]        # 0x1011180
 100493b:	mov    rax,QWORD PTR [rip+0xc83e]        # 0x1011180
 1004942:	call   QWORD PTR [rax+0x18]
 1004945:	add    rax,0x18
 1004949:	mov    QWORD PTR [rbx],rax
 100494c:	lea    rbx,[rdi+0x20]
 1004950:	mov    QWORD PTR [rsp+0x48],rbx
 1004955:	lea    rcx,[rip+0xc824]        # 0x1011180
 100495c:	mov    rax,QWORD PTR [rip+0xc81d]        # 0x1011180
 1004963:	call   QWORD PTR [rax+0x18]
 1004966:	add    rax,0x18
 100496a:	mov    QWORD PTR [rbx],rax
 100496d:	mov    QWORD PTR [rdi+0x14],0xffffffffffffffff
 1004975:	mov    DWORD PTR [rdi+0x10],0xffffffff
 100497c:	xor    r8d,r8d
 100497f:	lea    rdx,[rip+0xffffffffffffd15a]        # 0x1001ae0
 1004986:	mov    rcx,rbx
 1004989:	call   0x1004060
 100498e:	mov    QWORD PTR [rdi+0x28],0x0
 1004996:	mov    rax,rdi
 1004999:	mov    rbx,QWORD PTR [rsp+0x50]
 100499e:	add    rsp,0x30
 10049a2:	pop    rdi
 10049a3:	ret    
 10049a4:	int3   
 10049a5:	int3   
 10049a6:	int3   
 10049a7:	int3   
 10049a8:	int3   
 10049a9:	int3   
 10049aa:	int3   
 10049ab:	int3   
 10049ac:	int3   
 10049ad:	int3   
 10049ae:	int3   
 10049af:	int3   
 10049b0:	mov    QWORD PTR [rsp+0x8],rcx
 10049b5:	push   rdi
 10049b6:	sub    rsp,0x30
 10049ba:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 10049c3:	mov    QWORD PTR [rsp+0x50],rbx
 10049c8:	mov    rdi,rcx
 10049cb:	lea    rax,[rcx+0x20]
 10049cf:	mov    QWORD PTR [rsp+0x48],rax
 10049d4:	mov    rdx,QWORD PTR [rax]
 10049d7:	sub    rdx,0x18
 10049db:	or     ebx,0xffffffff
 10049de:	mov    eax,ebx
 10049e0:	lock xadd DWORD PTR [rdx+0x10],eax
 10049e5:	dec    eax
 10049e7:	test   eax,eax
 10049e9:	jg     0x10049f5
 10049eb:	mov    rcx,QWORD PTR [rdx]
 10049ee:	mov    rax,QWORD PTR [rcx]
 10049f1:	call   QWORD PTR [rax+0x8]
 10049f4:	nop
 10049f5:	lea    rax,[rdi+0x8]
 10049f9:	mov    QWORD PTR [rsp+0x40],rax
 10049fe:	mov    rdx,QWORD PTR [rax]
 1004a01:	sub    rdx,0x18
 1004a05:	lock xadd DWORD PTR [rdx+0x10],ebx
 1004a0a:	dec    ebx
 1004a0c:	test   ebx,ebx
 1004a0e:	jg     0x1004a19
 1004a10:	mov    rcx,QWORD PTR [rdx]
 1004a13:	mov    rax,QWORD PTR [rcx]
 1004a16:	call   QWORD PTR [rax+0x8]
 1004a19:	mov    rbx,QWORD PTR [rsp+0x50]
 1004a1e:	add    rsp,0x30
 1004a22:	pop    rdi
 1004a23:	ret    
 1004a24:	int3   
 1004a25:	int3   
 1004a26:	int3   
 1004a27:	int3   
 1004a28:	int3   
 1004a29:	int3   
 1004a2a:	int3   
 1004a2b:	int3   
 1004a2c:	int3   
 1004a2d:	int3   
 1004a2e:	int3   
 1004a2f:	int3   
 1004a30:	mov    r11,rsp
 1004a33:	push   rbx
 1004a34:	push   rsi
 1004a35:	push   rdi
 1004a36:	sub    rsp,0x60
 1004a3a:	mov    QWORD PTR [r11-0x48],0xfffffffffffffffe
 1004a42:	mov    rsi,r8
 1004a45:	mov    rbx,rdx
 1004a48:	mov    rdi,rcx
 1004a4b:	lea    rax,[rip+0xffffffffffffd4ce]        # 0x1001f20
 1004a52:	mov    QWORD PTR [r11-0x50],rax
 1004a56:	mov    DWORD PTR [rsp+0x20],0x1
 1004a5e:	lea    r9,[r11+0x10]
 1004a62:	lea    r8,[rip+0xffffffffffffd4df]        # 0x1001f48
 1004a69:	xor    edx,edx
 1004a6b:	lea    rcx,[r11-0x40]
 1004a6f:	call   QWORD PTR [rip+0xffffffffffffca5b]        # 0x10014d0
 1004a75:	nop
 1004a76:	mov    QWORD PTR [rdi],rbx
 1004a79:	mov    ecx,0xfffffff5
 1004a7e:	call   QWORD PTR [rip+0xffffffffffffc5e4]        # 0x1001068
 1004a84:	mov    QWORD PTR [rdi+0x38],rax
 1004a88:	mov    ecx,0xfffffff4
 1004a8d:	call   QWORD PTR [rip+0xffffffffffffc5d5]        # 0x1001068
 1004a93:	mov    QWORD PTR [rdi+0x40],rax
 1004a97:	call   QWORD PTR [rip+0xffffffffffffc633]        # 0x10010d0
 1004a9d:	mov    DWORD PTR [rdi+0x48],eax
 1004aa0:	mov    r9d,eax
 1004aa3:	lea    r8,[rip+0xffffffffffffd4b6]        # 0x1001f60
 1004aaa:	mov    edx,0x1
 1004aaf:	lea    rcx,[rip+0xffffffffffffd492]        # 0x1001f48
 1004ab6:	call   QWORD PTR [rip+0xffffffffffffca04]        # 0x10014c0
 1004abc:	mov    r9,QWORD PTR [rdi+0x38]
 1004ac0:	cmp    r9,0xffffffffffffffff
 1004ac4:	je     0x1004bd7
 1004aca:	cmp    QWORD PTR [rdi+0x40],0xffffffffffffffff
 1004acf:	je     0x1004bd7
 1004ad5:	mov    rcx,r9
 1004ad8:	call   QWORD PTR [rip+0xffffffffffffc582]        # 0x1001060
 1004ade:	cmp    eax,0x2
 1004ae1:	jne    0x1004b83
 1004ae7:	mov    DWORD PTR [rsp+0x80],0x3
 1004af2:	lea    rdx,[rsp+0x80]
 1004afa:	mov    rcx,QWORD PTR [rdi+0x38]
 1004afe:	call   QWORD PTR [rip+0xffffffffffffc5ac]        # 0x10010b0
 1004b04:	test   eax,eax
 1004b06:	jne    0x1004b3b
 1004b08:	lea    r8,[rip+0xffffffffffffd521]        # 0x1002030
 1004b0f:	mov    edx,0x40000000
 1004b14:	lea    rcx,[rip+0xffffffffffffd42d]        # 0x1001f48
 1004b1b:	call   QWORD PTR [rip+0xffffffffffffc99f]        # 0x10014c0
 1004b21:	call   QWORD PTR [rip+0xffffffffffffc511]        # 0x1001038
 1004b27:	mov    ebx,eax
 1004b29:	test   eax,eax
 1004b2b:	jle    0x1004b36
 1004b2d:	movzx  ebx,ax
 1004b30:	or     ebx,0x80070000
 1004b36:	jmp    0x1004c05
 1004b3b:	mov    edx,DWORD PTR [rsp+0x80]
 1004b42:	mov    rcx,QWORD PTR [rdi+0x38]
 1004b46:	call   QWORD PTR [rip+0xffffffffffffc574]        # 0x10010c0
 1004b4c:	test   eax,eax
 1004b4e:	jne    0x1004b83
 1004b50:	lea    r8,[rip+0xffffffffffffd509]        # 0x1002060
 1004b57:	mov    edx,0x40000000
 1004b5c:	lea    rcx,[rip+0xffffffffffffd3e5]        # 0x1001f48
 1004b63:	call   QWORD PTR [rip+0xffffffffffffc957]        # 0x10014c0
 1004b69:	call   QWORD PTR [rip+0xffffffffffffc4c9]        # 0x1001038
 1004b6f:	mov    ebx,eax
 1004b71:	test   eax,eax
 1004b73:	jle    0x1004b7e
 1004b75:	movzx  ebx,ax
 1004b78:	or     ebx,0x80070000
 1004b7e:	jmp    0x1004c05
 1004b83:	mov    rdx,rsi
 1004b86:	lea    rcx,[rsp+0x98]
 1004b8e:	call   0x1004480
 1004b93:	nop
 1004b94:	lea    rdx,[rsp+0x98]
 1004b9c:	mov    rcx,rdi
 1004b9f:	call   0x1005050
 1004ba4:	mov    DWORD PTR [rsp+0x88],eax
 1004bab:	mov    rdx,QWORD PTR [rsp+0x98]
 1004bb3:	add    rdx,0xffffffffffffffe8
 1004bb7:	or     eax,0xffffffff
 1004bba:	lock xadd DWORD PTR [rdx+0x10],eax
 1004bbf:	dec    eax
 1004bc1:	test   eax,eax
 1004bc3:	jg     0x1004bce
 1004bc5:	mov    rcx,QWORD PTR [rdx]
 1004bc8:	mov    rax,QWORD PTR [rcx]
 1004bcb:	call   QWORD PTR [rax+0x8]
 1004bce:	mov    ebx,DWORD PTR [rsp+0x88]
 1004bd5:	jmp    0x1004c05
 1004bd7:	lea    r8,[rip+0xffffffffffffd3d2]        # 0x1001fb0
 1004bde:	mov    edx,0x40000000
 1004be3:	lea    rcx,[rip+0xffffffffffffd35e]        # 0x1001f48
 1004bea:	call   QWORD PTR [rip+0xffffffffffffc8d0]        # 0x10014c0
 1004bf0:	call   QWORD PTR [rip+0xffffffffffffc442]        # 0x1001038
 1004bf6:	mov    ebx,eax
 1004bf8:	test   eax,eax
 1004bfa:	jle    0x1004c05
 1004bfc:	movzx  ebx,ax
 1004bff:	or     ebx,0x80070000
 1004c05:	lea    rcx,[rsp+0x38]
 1004c0a:	call   QWORD PTR [rip+0xffffffffffffc8b8]        # 0x10014c8
 1004c10:	mov    eax,ebx
 1004c12:	add    rsp,0x60
 1004c16:	pop    rdi
 1004c17:	pop    rsi
 1004c18:	pop    rbx
 1004c19:	ret    
 1004c1a:	int3   
 1004c1b:	int3   
 1004c1c:	int3   
 1004c1d:	int3   
 1004c1e:	int3   
 1004c1f:	int3   
 1004c20:	mov    r11,rsp
 1004c23:	push   rbp
 1004c24:	push   rsi
 1004c25:	push   rdi
 1004c26:	push   r14
 1004c28:	push   r15
 1004c2a:	sub    rsp,0x70
 1004c2e:	mov    QWORD PTR [r11-0x68],0xfffffffffffffffe
 1004c36:	mov    QWORD PTR [r11+0x8],rbx
 1004c3a:	mov    rsi,rcx
 1004c3d:	lea    rax,[rip+0xffffffffffffd44c]        # 0x1002090
 1004c44:	mov    QWORD PTR [r11-0x70],rax
 1004c48:	mov    DWORD PTR [rsp+0x20],0x1
 1004c50:	xor    r9d,r9d
 1004c53:	lea    r8,[rip+0xffffffffffffd2ee]        # 0x1001f48
 1004c5a:	xor    edx,edx
 1004c5c:	lea    rcx,[r11-0x50]
 1004c60:	call   QWORD PTR [rip+0xffffffffffffc86a]        # 0x10014d0
 1004c66:	nop
 1004c67:	xor    r15d,r15d
 1004c6a:	mov    ebx,r15d
 1004c6d:	mov    QWORD PTR [rsp+0xb0],rbx
 1004c75:	xor    edx,edx
 1004c77:	xor    ecx,ecx
 1004c79:	call   QWORD PTR [rip+0xffffffffffffc879]        # 0x10014f8
 1004c7f:	test   eax,eax
 1004c81:	jns    0x1004cc1
 1004c83:	lea    r8,[rip+0xffffffffffffd436]        # 0x10020c0
 1004c8a:	mov    edx,0x40000000
 1004c8f:	lea    rcx,[rip+0xffffffffffffd2b2]        # 0x1001f48
 1004c96:	call   QWORD PTR [rip+0xffffffffffffc824]        # 0x10014c0
 1004c9c:	lea    r8d,[r15+0xe]
 1004ca0:	mov    rdx,QWORD PTR [rsi+0x40]
 1004ca4:	mov    rcx,rsi
 1004ca7:	call   0x1005a30
 1004cac:	nop
 1004cad:	lea    rcx,[rsp+0x48]
 1004cb2:	call   QWORD PTR [rip+0xffffffffffffc810]        # 0x10014c8
 1004cb8:	lea    eax,[r15+0x2]
 1004cbc:	jmp    0x1005028
 1004cc1:	lea    rcx,[rsi+0x30]
 1004cc5:	call   QWORD PTR [rip+0xffffffffffffc35d]        # 0x1001028
 1004ccb:	mov    edi,eax
 1004ccd:	test   eax,eax
 1004ccf:	jne    0x1004fe2
 1004cd5:	mov    eax,DWORD PTR [rsi+0x10]
 1004cd8:	cmp    eax,0x2
 1004cdb:	jne    0x1004f9f
 1004ce1:	cmp    DWORD PTR [rsi+0x14],edi
 1004ce4:	jne    0x1004f66
 1004cea:	mov    r8,QWORD PTR [rsi+0x20]
 1004cee:	cmp    DWORD PTR [r8-0x10],edi
 1004cf2:	jne    0x1004d0e
 1004cf4:	lea    r8d,[rdi+0xf]
 1004cf8:	mov    rdx,QWORD PTR [rsi+0x40]
 1004cfc:	mov    rcx,rsi
 1004cff:	call   0x1005a30
 1004d04:	mov    edi,0x5
 1004d09:	jmp    0x1004f14
 1004d0e:	xor    edx,edx
 1004d10:	mov    ecx,0x100000
 1004d15:	call   QWORD PTR [rip+0xffffffffffffc36d]        # 0x1001088
 1004d1b:	mov    QWORD PTR [rsi+0x28],rax
 1004d1f:	test   rax,rax
 1004d22:	jne    0x1004d45
 1004d24:	call   QWORD PTR [rip+0xffffffffffffc30e]        # 0x1001038
 1004d2a:	mov    edx,eax
 1004d2c:	lea    r8,[rip+0xffffffffffffd3f5]        # 0x1002128
 1004d33:	mov    rcx,rsi
 1004d36:	call   0x1005ab0
 1004d3b:	mov    edi,0x5
 1004d40:	jmp    0x1004f14
 1004d45:	lea    rax,[rsp+0xa8]
 1004d4d:	mov    QWORD PTR [rsp+0x28],rax
 1004d52:	mov    DWORD PTR [rsp+0x20],r15d
 1004d57:	mov    r9,rsi
 1004d5a:	lea    r8,[rip+0xeef]        # 0x1005c50
 1004d61:	xor    edx,edx
 1004d63:	xor    ecx,ecx
 1004d65:	call   QWORD PTR [rip+0xffffffffffffc62d]        # 0x1001398
 1004d6b:	mov    rbp,rax
 1004d6e:	lea    rcx,[rip+0xffffffffffffd1d3]        # 0x1001f48
 1004d75:	test   rax,rax
 1004d78:	jne    0x1004d86
 1004d7a:	lea    r8,[rip+0xffffffffffffd3b7]        # 0x1002138
 1004d81:	jmp    0x1004ed2
 1004d86:	mov    r9d,DWORD PTR [rsp+0xa8]
 1004d8e:	lea    r8,[rip+0xffffffffffffd3db]        # 0x1002170
 1004d95:	mov    edx,0x1
 1004d9a:	call   QWORD PTR [rip+0xffffffffffffc720]        # 0x10014c0
 1004da0:	mov    rbx,rbp
 1004da3:	mov    QWORD PTR [rsp+0xb0],rbx
 1004dab:	mov    QWORD PTR [rsp+0x38],rbp
 1004db0:	mov    rax,QWORD PTR [rsi+0x28]
 1004db4:	mov    QWORD PTR [rsp+0x40],rax
 1004db9:	lea    r8,[rip+0xffffffffffffd410]        # 0x10021d0
 1004dc0:	mov    edx,0x1
 1004dc5:	lea    rcx,[rip+0xffffffffffffd17c]        # 0x1001f48
 1004dcc:	call   QWORD PTR [rip+0xffffffffffffc6ee]        # 0x10014c0
 1004dd2:	or     r9d,0xffffffff
 1004dd6:	xor    r8d,r8d
 1004dd9:	lea    rdx,[rsp+0x38]
 1004dde:	lea    ecx,[r8+0x2]
 1004de2:	call   QWORD PTR [rip+0xffffffffffffc260]        # 0x1001048
 1004de8:	test   eax,eax
 1004dea:	je     0x1004e3c
 1004dec:	cmp    eax,0x1
 1004def:	je     0x1004e15
 1004df1:	cmp    eax,0xffffffff
 1004df4:	jne    0x1004e96
 1004dfa:	lea    r8,[rip+0xffffffffffffd4cf]        # 0x10022d0
 1004e01:	mov    edx,0x40000000
 1004e06:	lea    rcx,[rip+0xffffffffffffd13b]        # 0x1001f48
 1004e0d:	call   QWORD PTR [rip+0xffffffffffffc6ad]        # 0x10014c0
 1004e13:	jmp    0x1004e71
 1004e15:	lea    r8,[rip+0xffffffffffffd47c]        # 0x1002298
 1004e1c:	mov    edx,0x1
 1004e21:	lea    rcx,[rip+0xffffffffffffd120]        # 0x1001f48
 1004e28:	call   QWORD PTR [rip+0xffffffffffffc692]        # 0x10014c0
 1004e2e:	mov    rcx,QWORD PTR [rsi+0x30]
 1004e32:	mov    rax,QWORD PTR [rcx]
 1004e35:	call   QWORD PTR [rax+0x18]
 1004e38:	mov    edi,eax
 1004e3a:	jmp    0x1004e96
 1004e3c:	lea    rdx,[rsp+0xa8]
 1004e44:	mov    rcx,QWORD PTR [rsp+0x38]
 1004e49:	call   QWORD PTR [rip+0xffffffffffffc311]        # 0x1001160
 1004e4f:	mov    edi,eax
 1004e51:	mov    r9d,eax
 1004e54:	lea    r8,[rip+0xffffffffffffd3f5]        # 0x1002250
 1004e5b:	mov    edx,0x1
 1004e60:	lea    rcx,[rip+0xffffffffffffd0e1]        # 0x1001f48
 1004e67:	call   QWORD PTR [rip+0xffffffffffffc653]        # 0x10014c0
 1004e6d:	test   edi,edi
 1004e6f:	jne    0x1004e8f
 1004e71:	call   QWORD PTR [rip+0xffffffffffffc1c1]        # 0x1001038
 1004e77:	mov    edx,eax
 1004e79:	lea    r8,[rip+0xffffffffffffd2a8]        # 0x1002128
 1004e80:	mov    rcx,rsi
 1004e83:	call   0x1005ab0
 1004e88:	mov    edi,0x4
 1004e8d:	jmp    0x1004e96
 1004e8f:	mov    edi,DWORD PTR [rsp+0xa8]
 1004e96:	lea    r8,[rip+0xffffffffffffd473]        # 0x1002310
 1004e9d:	mov    edx,0x1
 1004ea2:	lea    rcx,[rip+0xffffffffffffd09f]        # 0x1001f48
 1004ea9:	call   QWORD PTR [rip+0xffffffffffffc611]        # 0x10014c0
 1004eaf:	or     edx,0xffffffff
 1004eb2:	mov    rcx,rbp
 1004eb5:	call   QWORD PTR [rip+0xffffffffffffc185]        # 0x1001040
 1004ebb:	test   eax,eax
 1004ebd:	je     0x1004efb
 1004ebf:	cmp    eax,0xffffffff
 1004ec2:	jne    0x1004f14
 1004ec4:	lea    r8,[rip+0xffffffffffffd4cd]        # 0x1002398
 1004ecb:	lea    rcx,[rip+0xffffffffffffd076]        # 0x1001f48
 1004ed2:	mov    edx,0x40000000
 1004ed7:	call   QWORD PTR [rip+0xffffffffffffc5e3]        # 0x10014c0
 1004edd:	call   QWORD PTR [rip+0xffffffffffffc155]        # 0x1001038
 1004ee3:	mov    edx,eax
 1004ee5:	lea    r8,[rip+0xffffffffffffd23c]        # 0x1002128
 1004eec:	mov    rcx,rsi
 1004eef:	call   0x1005ab0
 1004ef4:	mov    edi,0x4
 1004ef9:	jmp    0x1004f14
 1004efb:	lea    r8,[rip+0xffffffffffffd45e]        # 0x1002360
 1004f02:	mov    edx,0x1
 1004f07:	lea    rcx,[rip+0xffffffffffffd03a]        # 0x1001f48
 1004f0e:	call   QWORD PTR [rip+0xffffffffffffc5ac]        # 0x10014c0
 1004f14:	mov    rcx,QWORD PTR [rsi+0x28]
 1004f18:	test   rcx,rcx
 1004f1b:	je     0x1004fd6
 1004f21:	call   QWORD PTR [rip+0xffffffffffffc151]        # 0x1001078
 1004f27:	test   eax,eax
 1004f29:	jne    0x1004fd6
 1004f2f:	lea    r8,[rip+0xffffffffffffd49a]        # 0x10023d0
 1004f36:	mov    edx,0x40000000
 1004f3b:	lea    rcx,[rip+0xffffffffffffd006]        # 0x1001f48
 1004f42:	call   QWORD PTR [rip+0xffffffffffffc578]        # 0x10014c0
 1004f48:	call   QWORD PTR [rip+0xffffffffffffc0ea]        # 0x1001038
 1004f4e:	mov    edx,eax
 1004f50:	lea    r8,[rip+0xffffffffffffd1d1]        # 0x1002128
 1004f57:	mov    rcx,rsi
 1004f5a:	call   0x1005ab0
 1004f5f:	mov    edi,0x4
 1004f64:	jmp    0x1004fd6
 1004f66:	lea    r8,[rip+0xffffffffffffd493]        # 0x1002400
 1004f6d:	mov    edx,0x1
 1004f72:	lea    rcx,[rip+0xffffffffffffcfcf]        # 0x1001f48
 1004f79:	call   QWORD PTR [rip+0xffffffffffffc541]        # 0x10014c0
 1004f7f:	mov    r9,QWORD PTR [rsi+0x8]
 1004f83:	cmp    DWORD PTR [r9-0x10],0x0
 1004f88:	cmove  r9,r15
 1004f8c:	mov    rcx,QWORD PTR [rsi+0x30]
 1004f90:	mov    rax,QWORD PTR [rcx]
 1004f93:	mov    r8d,DWORD PTR [rsi+0x14]
 1004f97:	mov    edx,DWORD PTR [rsi+0x18]
 1004f9a:	call   QWORD PTR [rax+0x8]
 1004f9d:	jmp    0x1004fd4
 1004f9f:	cmp    eax,0x1
 1004fa2:	jne    0x1004fd6
 1004fa4:	lea    r8,[rip+0xffffffffffffd4cd]        # 0x1002478
 1004fab:	mov    edx,eax
 1004fad:	lea    rcx,[rip+0xffffffffffffcf94]        # 0x1001f48
 1004fb4:	call   QWORD PTR [rip+0xffffffffffffc506]        # 0x10014c0
 1004fba:	mov    r8,QWORD PTR [rsi+0x8]
 1004fbe:	cmp    DWORD PTR [r8-0x10],0x0
 1004fc3:	cmove  r8,r15
 1004fc7:	mov    rcx,QWORD PTR [rsi+0x30]
 1004fcb:	mov    rax,QWORD PTR [rcx]
 1004fce:	mov    edx,DWORD PTR [rsi+0x18]
 1004fd1:	call   QWORD PTR [rax+0x10]
 1004fd4:	mov    edi,eax
 1004fd6:	lea    rcx,[rsi+0x30]
 1004fda:	call   QWORD PTR [rip+0xffffffffffffc040]        # 0x1001020
 1004fe0:	jmp    0x1004ffe
 1004fe2:	mov    r9d,eax
 1004fe5:	lea    r8,[rip+0xffffffffffffd4b4]        # 0x10024a0
 1004fec:	mov    edx,0x40000000
 1004ff1:	lea    rcx,[rip+0xffffffffffffcf50]        # 0x1001f48
 1004ff8:	call   QWORD PTR [rip+0xffffffffffffc4c2]        # 0x10014c0
 1004ffe:	call   QWORD PTR [rip+0xffffffffffffc4fc]        # 0x1001500
 1005004:	nop
 1005005:	test   rbx,rbx
 1005008:	je     0x100501b
 100500a:	mov    rcx,rbx
 100500d:	call   QWORD PTR [rip+0xffffffffffffc065]        # 0x1001078
 1005013:	mov    QWORD PTR [rsp+0xb0],r15
 100501b:	lea    rcx,[rsp+0x48]
 1005020:	call   QWORD PTR [rip+0xffffffffffffc4a2]        # 0x10014c8
 1005026:	mov    eax,edi
 1005028:	mov    rbx,QWORD PTR [rsp+0xa0]
 1005030:	add    rsp,0x70
 1005034:	pop    r15
 1005036:	pop    r14
 1005038:	pop    rdi
 1005039:	pop    rsi
 100503a:	pop    rbp
 100503b:	ret    
 100503c:	int3   
 100503d:	int3   
 100503e:	int3   
 100503f:	int3   
 1005040:	int3   
 1005041:	int3   
 1005042:	int3   
 1005043:	int3   
 1005044:	int3   
 1005045:	int3   
 1005046:	int3   
 1005047:	int3   
 1005048:	int3   
 1005049:	int3   
 100504a:	int3   
 100504b:	int3   
 100504c:	int3   
 100504d:	int3   
 100504e:	int3   
 100504f:	int3   
 1005050:	rex push rbp
 1005052:	push   rsi
 1005053:	push   rdi
 1005054:	push   r12
 1005056:	push   r13
 1005058:	push   r14
 100505a:	push   r15
 100505c:	mov    rbp,rsp
 100505f:	sub    rsp,0x60
 1005063:	mov    QWORD PTR [rbp-0x30],0xfffffffffffffffe
 100506b:	mov    QWORD PTR [rsp+0xa0],rbx
 1005073:	mov    rbx,rdx
 1005076:	mov    rdi,rcx
 1005079:	xor    esi,esi
 100507b:	mov    DWORD PTR [rbp+0x48],esi
 100507e:	lea    rax,[rip+0xffffffffffffd4ab]        # 0x1002530
 1005085:	mov    QWORD PTR [rsp+0x28],rax
 100508a:	mov    DWORD PTR [rsp+0x20],0x1
 1005092:	lea    r9,[rbp+0x48]
 1005096:	lea    r8,[rip+0xffffffffffffceab]        # 0x1001f48
 100509d:	xor    edx,edx
 100509f:	lea    rcx,[rbp-0x28]
 10050a3:	call   QWORD PTR [rip+0xffffffffffffc427]        # 0x10014d0
 10050a9:	nop
 10050aa:	mov    DWORD PTR [rbp+0x50],esi
 10050ad:	lea    rdx,[rbp+0x50]
 10050b1:	mov    rcx,QWORD PTR [rbx]
 10050b4:	call   QWORD PTR [rip+0xffffffffffffc3f6]        # 0x10014b0
 10050ba:	mov    r13,rax
 10050bd:	mov    QWORD PTR [rbp+0x58],rax
 10050c1:	test   rax,rax
 10050c4:	je     0x1005434
 10050ca:	cmp    DWORD PTR [rbp+0x50],0x1
 10050ce:	jle    0x100512c
 10050d0:	mov    rcx,QWORD PTR [rax+0x8]
 10050d4:	movzx  eax,WORD PTR [rcx]
 10050d7:	cmp    ax,0x3f
 10050db:	je     0x10050ea
 10050dd:	cmp    WORD PTR [rcx+0x2],0x3f
 10050e2:	jne    0x100512c
 10050e4:	cmp    ax,0x2d
 10050e8:	jne    0x100512c
 10050ea:	mov    rcx,r13
 10050ed:	call   QWORD PTR [rip+0xffffffffffffc185]        # 0x1001278
 10050f3:	mov    r8d,0x1
 10050f9:	mov    rdx,QWORD PTR [rdi+0x38]
 10050fd:	mov    rcx,rdi
 1005100:	call   0x1005a30
 1005105:	mov    r8d,0x2
 100510b:	mov    rdx,QWORD PTR [rdi+0x38]
 100510f:	mov    rcx,rdi
 1005112:	call   0x1005a30
 1005117:	nop
 1005118:	lea    rcx,[rbp-0x28]
 100511c:	call   QWORD PTR [rip+0xffffffffffffc3a6]        # 0x10014c8
 1005122:	mov    eax,0x1
 1005127:	jmp    0x1005443
 100512c:	xor    bl,bl
 100512e:	mov    r12d,0x1
 1005134:	movzx  r15d,si
 1005138:	cmp    DWORD PTR [rbp+0x48],0x0
 100513c:	jne    0x10053a3
 1005142:	lea    r14,[r13+0x8]
 1005146:	lea    r8,[rip+0xffffffffffffaeb3]        # 0x1000000
 100514d:	xor    r13d,r13d
 1005150:	cmp    r12d,DWORD PTR [rbp+0x50]
 1005154:	jge    0x100539f
 100515a:	test   bl,bl
 100515c:	jne    0x1005294
 1005162:	mov    r9,QWORD PTR [r14]
 1005165:	cmp    WORD PTR [r9],0x2d
 100516a:	jne    0x1005280
 1005170:	movzx  r15d,WORD PTR [r9+0x2]
 1005175:	mov    edx,r15d
 1005178:	cmp    r15d,0x75
 100517c:	ja     0x100525f
 1005182:	movzx  eax,BYTE PTR [r8+rdx*1+0x547c]
 100518b:	mov    ecx,DWORD PTR [r8+rax*4+0x545c]
 1005193:	add    rcx,r8
 1005196:	jmp    rcx
 1005198:	cmp    DWORD PTR [rdi+0x10],0x2
 100519c:	jne    0x10051ca
 100519e:	mov    DWORD PTR [rsp+0x20],0x63
 10051a6:	mov    r9d,0x75
 10051ac:	mov    r8d,0x6
 10051b2:	mov    rdx,QWORD PTR [rdi+0x40]
 10051b6:	mov    rcx,rdi
 10051b9:	call   0x1005a30
 10051be:	mov    DWORD PTR [rbp+0x48],0x80070057
 10051c5:	jmp    0x1005387
 10051ca:	mov    DWORD PTR [rdi+0x10],0x1
 10051d1:	jmp    0x1005387
 10051d6:	cmp    DWORD PTR [rdi+0x10],0x1
 10051da:	jne    0x10051ec
 10051dc:	mov    DWORD PTR [rsp+0x20],0x75
 10051e4:	mov    r9d,0x63
 10051ea:	jmp    0x10051ac
 10051ec:	mov    DWORD PTR [rdi+0x10],0x2
 10051f3:	jmp    0x1005387
 10051f8:	cmp    DWORD PTR [rdi+0x18],0xffffffff
 10051fc:	je     0x100520a
 10051fe:	mov    r9d,0x73
 1005204:	lea    r8d,[r9-0x66]
 1005208:	jmp    0x1005268
 100520a:	mov    bl,0x1
 100520c:	jmp    0x1005387
 1005211:	cmp    DWORD PTR [rdi+0x14],0xffffffff
 1005215:	je     0x100520a
 1005217:	mov    r9d,0x6d
 100521d:	lea    r8d,[r9-0x60]
 1005221:	jmp    0x1005268
 1005223:	mov    rax,QWORD PTR [rdi+0x8]
 1005227:	cmp    DWORD PTR [rax-0x10],r13d
 100522b:	je     0x100520a
 100522d:	mov    r9d,0x69
 1005233:	lea    r8d,[r9-0x5c]
 1005237:	jmp    0x1005268
 1005239:	cmp    QWORD PTR [rdi+0x28],r13
 100523d:	je     0x100520a
 100523f:	mov    r9d,0x65
 1005245:	lea    r8d,[r9-0x58]
 1005249:	jmp    0x1005268
 100524b:	mov    r8d,0xc
 1005251:	mov    rdx,QWORD PTR [rdi+0x40]
 1005255:	mov    rcx,rdi
 1005258:	call   0x1005a30
 100525d:	jmp    0x1005274
 100525f:	mov    r9d,edx
 1005262:	mov    r8d,0x3
 1005268:	mov    rdx,QWORD PTR [rdi+0x40]
 100526c:	mov    rcx,rdi
 100526f:	call   0x1005a30
 1005274:	mov    DWORD PTR [rbp+0x48],0x80070057
 100527b:	jmp    0x1005387
 1005280:	mov    r8d,0x8
 1005286:	mov    rdx,QWORD PTR [rdi+0x40]
 100528a:	mov    rcx,rdi
 100528d:	call   0x1005a30
 1005292:	jmp    0x1005274
 1005294:	mov    rbx,QWORD PTR [r14]
 1005297:	movzx  esi,r15w
 100529b:	cmp    esi,0x65
 100529e:	je     0x100535c
 10052a4:	cmp    esi,0x69
 10052a7:	je     0x100533d
 10052ad:	cmp    esi,0x6d
 10052b0:	je     0x10052f2
 10052b2:	cmp    esi,0x73
 10052b5:	jne    0x1005385
 10052bb:	mov    rcx,rbx
 10052be:	call   QWORD PTR [rip+0xffffffffffffc06c]        # 0x1001330
 10052c4:	mov    DWORD PTR [rdi+0x18],eax
 10052c7:	test   eax,eax
 10052c9:	jg     0x1005385
 10052cf:	mov    DWORD PTR [rsp+0x20],esi
 10052d3:	mov    r9,rbx
 10052d6:	lea    r8d,[rsi-0x6a]
 10052da:	mov    rdx,QWORD PTR [rdi+0x40]
 10052de:	mov    rcx,rdi
 10052e1:	call   0x1005a30
 10052e6:	mov    DWORD PTR [rbp+0x48],0x80070057
 10052ed:	jmp    0x1005385
 10052f2:	cmp    WORD PTR [rbx],0x30
 10052f6:	jne    0x1005301
 10052f8:	mov    DWORD PTR [rdi+0x14],r13d
 10052fc:	jmp    0x1005385
 1005301:	mov    rcx,rbx
 1005304:	call   QWORD PTR [rip+0xffffffffffffc026]        # 0x1001330
 100530a:	mov    DWORD PTR [rdi+0x14],eax
 100530d:	cmp    eax,0x1
 1005310:	je     0x1005385
 1005312:	mov    DWORD PTR [rsp+0x28],0x1
 100531a:	mov    QWORD PTR [rsp+0x20],r13
 100531f:	mov    r9,rbx
 1005322:	mov    r8d,0x5
 1005328:	mov    rdx,QWORD PTR [rdi+0x40]
 100532c:	mov    rcx,rdi
 100532f:	call   0x1005a30
 1005334:	mov    DWORD PTR [rbp+0x48],0x80070057
 100533b:	jmp    0x1005385
 100533d:	lea    rcx,[rdi+0x8]
 1005341:	test   rbx,rbx
 1005344:	jne    0x100534b
 1005346:	mov    eax,r13d
 1005349:	jmp    0x100537a
 100534b:	or     rax,0xffffffffffffffff
 100534f:	nop
 1005350:	inc    rax
 1005353:	cmp    WORD PTR [rbx+rax*2],r13w
 1005358:	jne    0x1005350
 100535a:	jmp    0x100537a
 100535c:	lea    rcx,[rdi+0x20]
 1005360:	test   rbx,rbx
 1005363:	jne    0x100536a
 1005365:	mov    eax,r13d
 1005368:	jmp    0x100537a
 100536a:	or     rax,0xffffffffffffffff
 100536e:	xchg   ax,ax
 1005370:	inc    rax
 1005373:	cmp    WORD PTR [rbx+rax*2],r13w
 1005378:	jne    0x1005370
 100537a:	mov    r8d,eax
 100537d:	mov    rdx,rbx
 1005380:	call   0x1004060
 1005385:	xor    bl,bl
 1005387:	inc    r12d
 100538a:	add    r14,0x8
 100538e:	cmp    DWORD PTR [rbp+0x48],r13d
 1005392:	lea    r8,[rip+0xffffffffffffac67]        # 0x1000000
 1005399:	je     0x1005150
 100539f:	mov    r13,QWORD PTR [rbp+0x58]
 10053a3:	mov    rcx,r13
 10053a6:	call   QWORD PTR [rip+0xffffffffffffbecc]        # 0x1001278
 10053ac:	test   bl,bl
 10053ae:	je     0x10053cd
 10053b0:	movzx  r9d,r15w
 10053b4:	mov    r8d,0x4
 10053ba:	mov    rdx,QWORD PTR [rdi+0x40]
 10053be:	mov    rcx,rdi
 10053c1:	call   0x1005a30
 10053c6:	mov    DWORD PTR [rbp+0x48],0x80070057
 10053cd:	cmp    DWORD PTR [rdi+0x10],0xffffffff
 10053d1:	jne    0x10053ec
 10053d3:	mov    r8d,0xa
 10053d9:	mov    rdx,QWORD PTR [rdi+0x40]
 10053dd:	mov    rcx,rdi
 10053e0:	call   0x1005a30
 10053e5:	mov    DWORD PTR [rbp+0x48],0x80070057
 10053ec:	cmp    DWORD PTR [rdi+0x18],0xffffffff
 10053f0:	jne    0x100540b
 10053f2:	mov    r8d,0xb
 10053f8:	mov    rdx,QWORD PTR [rdi+0x40]
 10053fc:	mov    rcx,rdi
 10053ff:	call   0x1005a30
 1005404:	mov    DWORD PTR [rbp+0x48],0x80070057
 100540b:	cmp    DWORD PTR [rdi+0x10],0x2
 100540f:	jne    0x1005434
 1005411:	cmp    DWORD PTR [rdi+0x14],0xffffffff
 1005415:	jne    0x1005434
 1005417:	mov    r9d,0x6d
 100541d:	lea    r8d,[r9-0x69]
 1005421:	mov    rdx,QWORD PTR [rdi+0x40]
 1005425:	mov    rcx,rdi
 1005428:	call   0x1005a30
 100542d:	mov    DWORD PTR [rbp+0x48],0x80070057
 1005434:	mov    ebx,DWORD PTR [rbp+0x48]
 1005437:	lea    rcx,[rbp-0x28]
 100543b:	call   QWORD PTR [rip+0xffffffffffffc087]        # 0x10014c8
 1005441:	mov    eax,ebx
 1005443:	mov    rbx,QWORD PTR [rsp+0xa0]
 100544b:	add    rsp,0x60
 100544f:	pop    r15
 1005451:	pop    r14
 1005453:	pop    r13
 1005455:	pop    r12
 1005457:	pop    rdi
 1005458:	pop    rsi
 1005459:	pop    rbp
 100545a:	ret    
 100545b:	nop
 100545c:	rex.WXB push r10
 100545e:	add    BYTE PTR [rax],al
 1005460:	(bad)  
 1005461:	push   rcx
 1005462:	add    BYTE PTR [rax],al
 1005464:	cmp    DWORD PTR [rdx+0x0],edx
 1005467:	add    BYTE PTR [rbx],ah
 1005469:	push   rdx
 100546a:	add    BYTE PTR [rax],al
 100546c:	adc    DWORD PTR [rdx+0x0],edx
 100546f:	add    al,bh
 1005471:	push   rcx
 1005472:	add    BYTE PTR [rax],al
 1005474:	cwde   
 1005475:	push   rcx
 1005476:	add    BYTE PTR [rax],al
 1005478:	pop    rdi
 1005479:	push   rdx
 100547a:	add    BYTE PTR [rax],al
 100547c:	add    BYTE PTR [rdi],al
 100547e:	(bad)  
 100547f:	(bad)  
 1005480:	(bad)  
 1005481:	(bad)  
 1005482:	(bad)  
 1005483:	(bad)  
 1005484:	(bad)  
 1005485:	(bad)  
 1005486:	(bad)  
 1005487:	(bad)  
 1005488:	(bad)  
 1005489:	(bad)  
 100548a:	(bad)  
 100548b:	(bad)  
 100548c:	(bad)  
 100548d:	(bad)  
 100548e:	(bad)  
 100548f:	(bad)  
 1005490:	(bad)  
 1005491:	(bad)  
 1005492:	(bad)  
 1005493:	(bad)  
 1005494:	(bad)  
 1005495:	(bad)  
 1005496:	(bad)  
 1005497:	(bad)  
 1005498:	(bad)  
 1005499:	(bad)  
 100549a:	(bad)  
 100549b:	(bad)  
 100549c:	(bad)  
 100549d:	(bad)  
 100549e:	(bad)  
 100549f:	(bad)  
 10054a0:	(bad)  
 10054a1:	(bad)  
 10054a2:	(bad)  
 10054a3:	(bad)  
 10054a4:	(bad)  
 10054a5:	(bad)  
 10054a6:	(bad)  
 10054a7:	(bad)  
 10054a8:	(bad)  
 10054a9:	(bad)  
 10054aa:	(bad)  
 10054ab:	(bad)  
 10054ac:	(bad)  
 10054ad:	(bad)  
 10054ae:	(bad)  
 10054af:	(bad)  
 10054b0:	(bad)  
 10054b1:	(bad)  
 10054b2:	(bad)  
 10054b3:	(bad)  
 10054b4:	(bad)  
 10054b5:	(bad)  
 10054b6:	(bad)  
 10054b7:	(bad)  
 10054b8:	(bad)  
 10054b9:	(bad)  
 10054ba:	(bad)  
 10054bb:	(bad)  
 10054bc:	(bad)  
 10054bd:	(bad)  
 10054be:	(bad)  
 10054bf:	(bad)  
 10054c0:	(bad)  
 10054c1:	(bad)  
 10054c2:	(bad)  
 10054c3:	(bad)  
 10054c4:	(bad)  
 10054c5:	(bad)  
 10054c6:	(bad)  
 10054c7:	(bad)  
 10054c8:	(bad)  
 10054c9:	(bad)  
 10054ca:	(bad)  
 10054cb:	(bad)  
 10054cc:	(bad)  
 10054cd:	(bad)  
 10054ce:	(bad)  
 10054cf:	(bad)  
 10054d0:	(bad)  
 10054d1:	(bad)  
 10054d2:	(bad)  
 10054d3:	(bad)  
 10054d4:	(bad)  
 10054d5:	(bad)  
 10054d6:	(bad)  
 10054d7:	(bad)  
 10054d8:	(bad)  
 10054d9:	(bad)  
 10054da:	(bad)  
 10054db:	(bad)  
 10054dc:	(bad)  
 10054dd:	(bad)  
 10054de:	(bad)  
 10054df:	add    DWORD PTR [rdi],eax
 10054e1:	add    al,BYTE PTR [rdi]
 10054e3:	(bad)  
 10054e4:	(bad)  
 10054e5:	add    eax,DWORD PTR [rdi]
 10054e7:	(bad)  
 10054e8:	(bad)  
 10054e9:	add    al,0x7
 10054eb:	(bad)  
 10054ec:	(bad)  
 10054ed:	(bad)  
 10054ee:	(bad)  
 10054ef:	add    eax,0xcccc0607
 10054f4:	int3   
 10054f5:	int3   
 10054f6:	int3   
 10054f7:	int3   
 10054f8:	int3   
 10054f9:	int3   
 10054fa:	int3   
 10054fb:	int3   
 10054fc:	int3   
 10054fd:	int3   
 10054fe:	int3   
 10054ff:	int3   
 1005500:	mov    rax,rsp
 1005503:	mov    QWORD PTR [rax+0x10],rdx
 1005507:	push   rdi
 1005508:	push   r14
 100550a:	push   r15
 100550c:	sub    rsp,0x60
 1005510:	mov    QWORD PTR [rax-0x28],0xfffffffffffffffe
 1005518:	mov    QWORD PTR [rax+0x8],rbx
 100551c:	mov    QWORD PTR [rax+0x18],rbp
 1005520:	mov    QWORD PTR [rax+0x20],rsi
 1005524:	mov    rsi,r9
 1005527:	mov    edi,r8d
 100552a:	mov    rbx,rdx
 100552d:	mov    r14,rcx
 1005530:	xor    r15d,r15d
 1005533:	mov    DWORD PTR [rax-0x38],r15d
 1005537:	mov    QWORD PTR [rax-0x30],r15
 100553b:	call   QWORD PTR [rip+0xffffffffffffbb67]        # 0x10010a8
 1005541:	movzx  ebp,ax
 1005544:	lea    rcx,[rip+0xbc35]        # 0x1011180
 100554b:	mov    rax,QWORD PTR [rip+0xbc2e]        # 0x1011180
 1005552:	call   QWORD PTR [rax+0x18]
 1005555:	add    rax,0x18
 1005559:	mov    QWORD PTR [rbx],rax
 100555c:	mov    DWORD PTR [rsp+0x40],0x1
 1005564:	mov    r8d,edi
 1005567:	mov    rdx,QWORD PTR [r14]
 100556a:	mov    rcx,rbx
 100556d:	call   0x10046f0
 1005572:	mov    QWORD PTR [rsp+0x30],rsi
 1005577:	mov    r9d,ebp
 100557a:	mov    r8d,edi
 100557d:	mov    DWORD PTR [rsp+0x28],r15d
 1005582:	test   eax,eax
 1005584:	lea    rax,[rsp+0x48]
 1005589:	mov    QWORD PTR [rsp+0x20],rax
 100558e:	je     0x10055b6
 1005590:	mov    rdx,QWORD PTR [rbx]
 1005593:	mov    ecx,0x500
 1005598:	call   QWORD PTR [rip+0xffffffffffffbae2]        # 0x1001080
 100559e:	test   eax,eax
 10055a0:	je     0x10055ac
 10055a2:	mov    rdx,QWORD PTR [rsp+0x48]
 10055a7:	test   rdx,rdx
 10055aa:	jne    0x1005602
 10055ac:	mov    rdx,QWORD PTR [rbx]
 10055af:	mov    ecx,0x500
 10055b4:	jmp    0x10055da
 10055b6:	mov    rdx,QWORD PTR [r14]
 10055b9:	mov    ecx,0x900
 10055be:	call   QWORD PTR [rip+0xffffffffffffbabc]        # 0x1001080
 10055c4:	test   eax,eax
 10055c6:	je     0x10055d2
 10055c8:	mov    rdx,QWORD PTR [rsp+0x48]
 10055cd:	test   rdx,rdx
 10055d0:	jne    0x1005602
 10055d2:	mov    rdx,QWORD PTR [r14]
 10055d5:	mov    ecx,0x900
 10055da:	mov    QWORD PTR [rsp+0x30],rsi
 10055df:	mov    DWORD PTR [rsp+0x28],r15d
 10055e4:	lea    rax,[rsp+0x48]
 10055e9:	mov    QWORD PTR [rsp+0x20],rax
 10055ee:	mov    r9d,0x400
 10055f4:	mov    r8d,edi
 10055f7:	call   QWORD PTR [rip+0xffffffffffffba83]        # 0x1001080
 10055fd:	mov    rdx,QWORD PTR [rsp+0x48]
 1005602:	test   eax,eax
 1005604:	je     0x1005637
 1005606:	test   rdx,rdx
 1005609:	je     0x1005637
 100560b:	or     rax,0xffffffffffffffff
 100560f:	nop
 1005610:	inc    rax
 1005613:	cmp    WORD PTR [rdx+rax*2],0x0
 1005618:	jne    0x1005610
 100561a:	mov    r8d,eax
 100561d:	mov    rcx,rbx
 1005620:	call   0x1004060
 1005625:	mov    rcx,QWORD PTR [rsp+0x48]
 100562a:	call   QWORD PTR [rip+0xffffffffffffbc48]        # 0x1001278
 1005630:	mov    QWORD PTR [rsp+0x48],r15
 1005635:	jmp    0x100563f
 1005637:	mov    rcx,rbx
 100563a:	call   0x1003f60
 100563f:	mov    rax,rbx
 1005642:	lea    r11,[rsp+0x60]
 1005647:	mov    rbx,QWORD PTR [r11+0x20]
 100564b:	mov    rbp,QWORD PTR [r11+0x30]
 100564f:	mov    rsi,QWORD PTR [r11+0x38]
 1005653:	mov    rsp,r11
 1005656:	pop    r15
 1005658:	pop    r14
 100565a:	pop    rdi
 100565b:	ret    
 100565c:	int3   
 100565d:	int3   
 100565e:	int3   
 100565f:	int3   
 1005660:	int3   
 1005661:	int3   
 1005662:	int3   
 1005663:	int3   
 1005664:	int3   
 1005665:	int3   
 1005666:	int3   
 1005667:	int3   
 1005668:	int3   
 1005669:	int3   
 100566a:	int3   
 100566b:	int3   
 100566c:	int3   
 100566d:	int3   
 100566e:	int3   
 100566f:	int3   
 1005670:	rex push rbp
 1005672:	push   rsi
 1005673:	push   rdi
 1005674:	push   r12
 1005676:	push   r13
 1005678:	push   r14
 100567a:	push   r15
 100567c:	sub    rsp,0x80
 1005683:	mov    QWORD PTR [rsp+0x58],0xfffffffffffffffe
 100568c:	mov    QWORD PTR [rsp+0xd8],rbx
 1005694:	mov    rax,QWORD PTR [rip+0xbac5]        # 0x1011160
 100569b:	xor    rax,rsp
 100569e:	mov    QWORD PTR [rsp+0x78],rax
 10056a3:	mov    r12,r8
 10056a6:	mov    r14,rdx
 10056a9:	mov    r13,rcx
 10056ac:	lea    rcx,[rip+0xbacd]        # 0x1011180
 10056b3:	mov    rax,QWORD PTR [rip+0xbac6]        # 0x1011180
 10056ba:	call   QWORD PTR [rax+0x18]
 10056bd:	lea    rbx,[rax+0x18]
 10056c1:	mov    QWORD PTR [rsp+0x40],rbx
 10056c6:	xor    r15d,r15d
 10056c9:	mov    ebp,r15d
 10056cc:	mov    rdx,QWORD PTR [r12]
 10056d0:	lea    rcx,[rdx-0x18]
 10056d4:	lea    rsi,[rbx-0x18]
 10056d8:	or     rdi,0xffffffffffffffff
 10056dc:	cmp    rcx,rsi
 10056df:	je     0x100572e
 10056e1:	cmp    DWORD PTR [rsi+0x10],ebp
 10056e4:	jl     0x100571b
 10056e6:	mov    rax,QWORD PTR [rsi]
 10056e9:	cmp    QWORD PTR [rcx],rax
 10056ec:	jne    0x100571b
 10056ee:	call   0x10043f0
 10056f3:	mov    rbx,rax
 10056f6:	mov    ecx,edi
 10056f8:	lock xadd DWORD PTR [rsi+0x10],ecx
 10056fd:	dec    ecx
 10056ff:	test   ecx,ecx
 1005701:	jg     0x1005710
 1005703:	mov    rcx,QWORD PTR [rsi]
 1005706:	mov    r8,QWORD PTR [rcx]
 1005709:	mov    rdx,rsi
 100570c:	call   QWORD PTR [r8+0x8]
 1005710:	add    rbx,0x18
 1005714:	mov    QWORD PTR [rsp+0x40],rbx
 1005719:	jmp    0x100572e
 100571b:	mov    r8d,DWORD PTR [rdx-0x10]
 100571f:	lea    rcx,[rsp+0x40]
 1005724:	call   0x1004060
 1005729:	mov    rbx,QWORD PTR [rsp+0x40]
 100572e:	mov    DWORD PTR [rsp+0x4c],r15d
 1005733:	mov    r9,rbx
 1005736:	lea    r8,[rip+0xffffffffffffce33]        # 0x1002570
 100573d:	mov    edx,0x1
 1005742:	lea    rcx,[rip+0xffffffffffffc7ff]        # 0x1001f48
 1005749:	call   QWORD PTR [rip+0xffffffffffffbd71]        # 0x10014c0
 100574f:	mov    rcx,r14
 1005752:	call   QWORD PTR [rip+0xffffffffffffb908]        # 0x1001060
 1005758:	cmp    eax,0x2
 100575b:	je     0x10058c6
 1005761:	mov    DWORD PTR [rsp+0x48],r15d
 1005766:	mov    r8,QWORD PTR [r12]
 100576a:	test   r8,r8
 100576d:	jne    0x1005774
 100576f:	mov    eax,r15d
 1005772:	jmp    0x100578a
 1005774:	mov    rax,rdi
 1005777:	nop    WORD PTR [rax+rax*1+0x0]
 1005780:	inc    rax
 1005783:	cmp    WORD PTR [r8+rax*2],bp
 1005788:	jne    0x1005780
 100578a:	mov    QWORD PTR [rsp+0x38],r15
 100578f:	mov    QWORD PTR [rsp+0x30],r15
 1005794:	mov    DWORD PTR [rsp+0x28],r15d
 1005799:	mov    QWORD PTR [rsp+0x20],r15
 100579e:	mov    r9d,eax
 10057a1:	xor    edx,edx
 10057a3:	mov    ecx,DWORD PTR [r13+0x48]
 10057a7:	call   QWORD PTR [rip+0xffffffffffffb8f3]        # 0x10010a0
 10057ad:	mov    r15d,eax
 10057b0:	lea    ecx,[rax+0x1]
 10057b3:	mov    esi,ecx
 10057b5:	lea    rdx,[rip+0xc2f4]        # 0x1011ab0
 10057bc:	call   0x1006d1c
 10057c1:	mov    rbp,rax
 10057c4:	test   rax,rax
 10057c7:	jne    0x10057fe
 10057c9:	call   QWORD PTR [rip+0xffffffffffffb869]        # 0x1001038
 10057cf:	mov    esi,eax
 10057d1:	test   eax,eax
 10057d3:	jle    0x10057de
 10057d5:	movzx  esi,ax
 10057d8:	or     esi,0x80070000
 10057de:	lea    rdx,[rbx-0x18]
 10057e2:	lock xadd DWORD PTR [rdx+0x10],edi
 10057e7:	dec    edi
 10057e9:	test   edi,edi
 10057eb:	jg     0x10057f7
 10057ed:	mov    rcx,QWORD PTR [rdx]
 10057f0:	mov    r8,QWORD PTR [rcx]
 10057f3:	call   QWORD PTR [r8+0x8]
 10057f7:	mov    eax,esi
 10057f9:	jmp    0x10059ff
 10057fe:	mov    r8,rsi
 1005801:	xor    edx,edx
 1005803:	mov    rcx,rax
 1005806:	call   0x1006d28
 100580b:	mov    r8,QWORD PTR [r12]
 100580f:	test   r8,r8
 1005812:	jne    0x100581a
 1005814:	xor    esi,esi
 1005816:	mov    eax,esi
 1005818:	jmp    0x100582d
 100581a:	mov    rax,rdi
 100581d:	nop    DWORD PTR [rax]
 1005820:	inc    rax
 1005823:	cmp    WORD PTR [r8+rax*2],0x0
 1005829:	jne    0x1005820
 100582b:	xor    esi,esi
 100582d:	mov    QWORD PTR [rsp+0x38],rsi
 1005832:	mov    QWORD PTR [rsp+0x30],rsi
 1005837:	mov    DWORD PTR [rsp+0x28],r15d
 100583c:	mov    QWORD PTR [rsp+0x20],rbp
 1005841:	mov    r9d,eax
 1005844:	xor    edx,edx
 1005846:	mov    ecx,DWORD PTR [r13+0x48]
 100584a:	call   QWORD PTR [rip+0xffffffffffffb850]        # 0x10010a0
 1005850:	mov    DWORD PTR [rsp+0x48],eax
 1005854:	test   eax,eax
 1005856:	jne    0x1005883
 1005858:	mov    rcx,rbp
 100585b:	call   0x1006ad8
 1005860:	nop
 1005861:	lea    rdx,[rbx-0x18]
 1005865:	lock xadd DWORD PTR [rdx+0x10],edi
 100586a:	dec    edi
 100586c:	test   edi,edi
 100586e:	jg     0x1005879
 1005870:	mov    rcx,QWORD PTR [rdx]
 1005873:	mov    rax,QWORD PTR [rcx]
 1005876:	call   QWORD PTR [rax+0x8]
 1005879:	mov    eax,0x8007000e
 100587e:	jmp    0x10059ff
 1005883:	mov    QWORD PTR [rsp+0x20],rsi
 1005888:	lea    r9,[rsp+0x48]
 100588d:	mov    r8d,r15d
 1005890:	mov    rdx,rbp
 1005893:	mov    rcx,r14
 1005896:	call   QWORD PTR [rip+0xffffffffffffb7d4]        # 0x1001070
 100589c:	test   eax,eax
 100589e:	jne    0x10059dc
 10058a4:	mov    rcx,rbp
 10058a7:	call   0x1006ad8
 10058ac:	call   QWORD PTR [rip+0xffffffffffffb786]        # 0x1001038
 10058b2:	mov    esi,eax
 10058b4:	test   eax,eax
 10058b6:	jle    0x10058c1
 10058b8:	movzx  esi,ax
 10058bb:	or     esi,0x80070000
 10058c1:	jmp    0x10057de
 10058c6:	mov    rcx,r14
 10058c9:	call   QWORD PTR [rip+0xffffffffffffb791]        # 0x1001060
 10058cf:	cmp    eax,0x2
 10058d2:	jne    0x10059a4
 10058d8:	lea    rdx,[rsp+0x60]
 10058dd:	mov    rcx,r14
 10058e0:	call   QWORD PTR [rip+0xffffffffffffb7d2]        # 0x10010b8
 10058e6:	test   eax,eax
 10058e8:	jne    0x1005904
 10058ea:	call   QWORD PTR [rip+0xffffffffffffb748]        # 0x1001038
 10058f0:	mov    esi,eax
 10058f2:	test   eax,eax
 10058f4:	jle    0x10058ff
 10058f6:	movzx  esi,ax
 10058f9:	or     esi,0x80070000
 10058ff:	jmp    0x10057de
 1005904:	cmp    WORD PTR [rsp+0x64],bp
 1005909:	je     0x10059a4
 100590f:	lea    r8,[rsp+0x40]
 1005914:	lea    rdx,[rip+0xffffffffffffcc7d]        # 0x1002598
 100591b:	lea    rcx,[rsp+0x50]
 1005920:	call   0x1004830
 1005925:	nop
 1005926:	mov    rdx,QWORD PTR [rax]
 1005929:	lea    rcx,[rdx-0x18]
 100592d:	add    rbx,0xffffffffffffffe8
 1005931:	cmp    rcx,rbx
 1005934:	je     0x1005980
 1005936:	cmp    DWORD PTR [rbx+0x10],0x0
 100593a:	jl     0x1005971
 100593c:	mov    rax,QWORD PTR [rbx]
 100593f:	cmp    QWORD PTR [rcx],rax
 1005942:	jne    0x1005971
 1005944:	call   0x10043f0
 1005949:	mov    rsi,rax
 100594c:	mov    ecx,edi
 100594e:	lock xadd DWORD PTR [rbx+0x10],ecx
 1005953:	dec    ecx
 1005955:	test   ecx,ecx
 1005957:	jg     0x1005966
 1005959:	mov    rcx,QWORD PTR [rbx]
 100595c:	mov    r8,QWORD PTR [rcx]
 100595f:	mov    rdx,rbx
 1005962:	call   QWORD PTR [r8+0x8]
 1005966:	lea    rax,[rsi+0x18]
 100596a:	mov    QWORD PTR [rsp+0x40],rax
 100596f:	jmp    0x1005980
 1005971:	mov    r8d,DWORD PTR [rdx-0x10]
 1005975:	lea    rcx,[rsp+0x40]
 100597a:	call   0x1004060
 100597f:	nop
 1005980:	mov    rdx,QWORD PTR [rsp+0x50]
 1005985:	add    rdx,0xffffffffffffffe8
 1005989:	mov    eax,edi
 100598b:	lock xadd DWORD PTR [rdx+0x10],eax
 1005990:	dec    eax
 1005992:	test   eax,eax
 1005994:	jg     0x100599f
 1005996:	mov    rcx,QWORD PTR [rdx]
 1005999:	mov    rax,QWORD PTR [rcx]
 100599c:	call   QWORD PTR [rax+0x8]
 100599f:	mov    rbx,QWORD PTR [rsp+0x40]
 10059a4:	mov    QWORD PTR [rsp+0x20],r15
 10059a9:	lea    r9,[rsp+0x4c]
 10059ae:	mov    r8d,DWORD PTR [rbx-0x10]
 10059b2:	mov    rdx,rbx
 10059b5:	mov    rcx,r14
 10059b8:	call   QWORD PTR [rip+0xffffffffffffb70a]        # 0x10010c8
 10059be:	test   eax,eax
 10059c0:	jne    0x10059dc
 10059c2:	call   QWORD PTR [rip+0xffffffffffffb670]        # 0x1001038
 10059c8:	mov    esi,eax
 10059ca:	test   eax,eax
 10059cc:	jle    0x10059d7
 10059ce:	movzx  esi,ax
 10059d1:	or     esi,0x80070000
 10059d7:	jmp    0x10057de
 10059dc:	mov    rcx,rbp
 10059df:	call   0x1006ad8
 10059e4:	nop
 10059e5:	lea    rdx,[rbx-0x18]
 10059e9:	lock xadd DWORD PTR [rdx+0x10],edi
 10059ee:	dec    edi
 10059f0:	test   edi,edi
 10059f2:	jg     0x10059fd
 10059f4:	mov    rcx,QWORD PTR [rdx]
 10059f7:	mov    rax,QWORD PTR [rcx]
 10059fa:	call   QWORD PTR [rax+0x8]
 10059fd:	xor    eax,eax
 10059ff:	mov    rcx,QWORD PTR [rsp+0x78]
 1005a04:	xor    rcx,rsp
 1005a07:	call   0x1006ba0
 1005a0c:	mov    rbx,QWORD PTR [rsp+0xd8]
 1005a14:	add    rsp,0x80
 1005a1b:	pop    r15
 1005a1d:	pop    r14
 1005a1f:	pop    r13
 1005a21:	pop    r12
 1005a23:	pop    rdi
 1005a24:	pop    rsi
 1005a25:	pop    rbp
 1005a26:	ret    
 1005a27:	int3   
 1005a28:	int3   
 1005a29:	int3   
 1005a2a:	int3   
 1005a2b:	int3   
 1005a2c:	int3   
 1005a2d:	int3   
 1005a2e:	int3   
 1005a2f:	int3   
 1005a30:	mov    r11,rsp
 1005a33:	mov    DWORD PTR [r11+0x18],r8d
 1005a37:	mov    QWORD PTR [r11+0x20],r9
 1005a3b:	push   rbx
 1005a3c:	push   rdi
 1005a3d:	sub    rsp,0x48
 1005a41:	mov    QWORD PTR [r11-0x28],0xfffffffffffffffe
 1005a49:	mov    rbx,rdx
 1005a4c:	mov    rdi,rcx
 1005a4f:	lea    rax,[r11+0x20]
 1005a53:	mov    QWORD PTR [r11-0x38],rax
 1005a57:	lea    r9,[r11-0x38]
 1005a5b:	lea    rdx,[r11-0x30]
 1005a5f:	call   0x1005500
 1005a64:	nop
 1005a65:	mov    QWORD PTR [rsp+0x20],0x0
 1005a6e:	lea    r8,[rsp+0x28]
 1005a73:	mov    rdx,rbx
 1005a76:	mov    rcx,rdi
 1005a79:	call   0x1005670
 1005a7e:	mov    ebx,eax
 1005a80:	mov    rdx,QWORD PTR [rsp+0x28]
 1005a85:	add    rdx,0xffffffffffffffe8
 1005a89:	or     ecx,0xffffffff
 1005a8c:	lock xadd DWORD PTR [rdx+0x10],ecx
 1005a91:	dec    ecx
 1005a93:	test   ecx,ecx
 1005a95:	jg     0x1005aa2
 1005a97:	mov    rcx,QWORD PTR [rdx]
 1005a9a:	mov    rax,QWORD PTR [rcx]
 1005a9d:	call   QWORD PTR [rax+0x8]
 1005aa0:	mov    eax,ebx
 1005aa2:	add    rsp,0x48
 1005aa6:	pop    rdi
 1005aa7:	pop    rbx
 1005aa8:	ret    
 1005aa9:	int3   
 1005aaa:	int3   
 1005aab:	int3   
 1005aac:	int3   
 1005aad:	int3   
 1005aae:	int3   
 1005aaf:	int3   
 1005ab0:	rex push rdi
 1005ab2:	sub    rsp,0x40
 1005ab6:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
 1005abf:	mov    QWORD PTR [rsp+0x58],rbx
 1005ac4:	mov    QWORD PTR [rsp+0x60],rsi
 1005ac9:	mov    rbx,r8
 1005acc:	mov    esi,edx
 1005ace:	mov    rdi,rcx
 1005ad1:	mov    r8d,edx
 1005ad4:	lea    rdx,[rsp+0x50]
 1005ad9:	call   0x1005b50
 1005ade:	nop
 1005adf:	mov    rax,QWORD PTR [rsp+0x50]
 1005ae4:	mov    QWORD PTR [rsp+0x20],rax
 1005ae9:	mov    r9,rbx
 1005aec:	mov    r8d,0x7
 1005af2:	mov    rdx,QWORD PTR [rdi+0x40]
 1005af6:	mov    rcx,rdi
 1005af9:	call   0x1005a30
 1005afe:	test   esi,esi
 1005b00:	jle    0x1005b0b
 1005b02:	movzx  esi,si
 1005b05:	or     esi,0x80070000
 1005b0b:	mov    rdx,QWORD PTR [rsp+0x50]
 1005b10:	add    rdx,0xffffffffffffffe8
 1005b14:	or     ecx,0xffffffff
 1005b17:	lock xadd DWORD PTR [rdx+0x10],ecx
 1005b1c:	dec    ecx
 1005b1e:	test   ecx,ecx
 1005b20:	jg     0x1005b2c
 1005b22:	mov    rcx,QWORD PTR [rdx]
 1005b25:	mov    r8,QWORD PTR [rcx]
 1005b28:	call   QWORD PTR [r8+0x8]
 1005b2c:	mov    eax,esi
 1005b2e:	mov    rbx,QWORD PTR [rsp+0x58]
 1005b33:	mov    rsi,QWORD PTR [rsp+0x60]
 1005b38:	add    rsp,0x40
 1005b3c:	pop    rdi
 1005b3d:	ret    
 1005b3e:	int3   
 1005b3f:	int3   
 1005b40:	int3   
 1005b41:	int3   
 1005b42:	int3   
 1005b43:	int3   
 1005b44:	int3   
 1005b45:	int3   
 1005b46:	int3   
 1005b47:	int3   
 1005b48:	int3   
 1005b49:	int3   
 1005b4a:	int3   
 1005b4b:	int3   
 1005b4c:	int3   
 1005b4d:	int3   
 1005b4e:	int3   
 1005b4f:	int3   
 1005b50:	mov    QWORD PTR [rsp+0x10],rdx
 1005b55:	push   rdi
 1005b56:	sub    rsp,0x50
 1005b5a:	mov    QWORD PTR [rsp+0x48],0xfffffffffffffffe
 1005b63:	mov    QWORD PTR [rsp+0x60],rbx
 1005b68:	mov    QWORD PTR [rsp+0x70],rsi
 1005b6d:	mov    edi,r8d
 1005b70:	mov    rbx,rdx
 1005b73:	xor    esi,esi
 1005b75:	mov    DWORD PTR [rsp+0x40],esi
 1005b79:	lea    rcx,[rip+0xb600]        # 0x1011180
 1005b80:	mov    rax,QWORD PTR [rip+0xb5f9]        # 0x1011180
 1005b87:	call   QWORD PTR [rax+0x18]
 1005b8a:	add    rax,0x18
 1005b8e:	mov    QWORD PTR [rbx],rax
 1005b91:	mov    DWORD PTR [rsp+0x40],0x1
 1005b99:	test   edi,edi
 1005b9b:	je     0x1005c12
 1005b9d:	mov    QWORD PTR [rsp+0x78],rsi
 1005ba2:	mov    QWORD PTR [rsp+0x30],rsi
 1005ba7:	mov    DWORD PTR [rsp+0x28],esi
 1005bab:	lea    rax,[rsp+0x78]
 1005bb0:	mov    QWORD PTR [rsp+0x20],rax
 1005bb5:	mov    r9d,0x400
 1005bbb:	mov    r8d,edi
 1005bbe:	xor    edx,edx
 1005bc0:	mov    ecx,0x1100
 1005bc5:	call   QWORD PTR [rip+0xffffffffffffb4b5]        # 0x1001080
 1005bcb:	mov    rcx,QWORD PTR [rsp+0x78]
 1005bd0:	test   rcx,rcx
 1005bd3:	je     0x1005c12
 1005bd5:	test   eax,eax
 1005bd7:	je     0x1005bfd
 1005bd9:	or     rax,0xffffffffffffffff
 1005bdd:	nop    DWORD PTR [rax]
 1005be0:	inc    rax
 1005be3:	cmp    WORD PTR [rcx+rax*2],0x0
 1005be8:	jne    0x1005be0
 1005bea:	mov    r8d,eax
 1005bed:	mov    rdx,rcx
 1005bf0:	mov    rcx,rbx
 1005bf3:	call   0x1004060
 1005bf8:	mov    rcx,QWORD PTR [rsp+0x78]
 1005bfd:	call   QWORD PTR [rip+0xffffffffffffb675]        # 0x1001278
 1005c03:	lea    rdx,[rip+0xffffffffffffc996]        # 0x10025a0
 1005c0a:	mov    rcx,rbx
 1005c0d:	call   0x1004570
 1005c12:	mov    rax,QWORD PTR [rbx]
 1005c15:	cmp    DWORD PTR [rax-0x10],0x0
 1005c19:	jne    0x1005c2d
 1005c1b:	mov    r8d,edi
 1005c1e:	lea    rdx,[rip+0xffffffffffffc98b]        # 0x10025b0
 1005c25:	mov    rcx,rbx
 1005c28:	call   0x1004600
 1005c2d:	mov    rax,rbx
 1005c30:	mov    rbx,QWORD PTR [rsp+0x60]
 1005c35:	mov    rsi,QWORD PTR [rsp+0x70]
 1005c3a:	add    rsp,0x50
 1005c3e:	pop    rdi
 1005c3f:	ret    
 1005c40:	int3   
 1005c41:	int3   
 1005c42:	int3   
 1005c43:	int3   
 1005c44:	int3   
 1005c45:	int3   
 1005c46:	int3   
 1005c47:	int3   
 1005c48:	int3   
 1005c49:	int3   
 1005c4a:	int3   
 1005c4b:	int3   
 1005c4c:	int3   
 1005c4d:	int3   
 1005c4e:	int3   
 1005c4f:	int3   
 1005c50:	rex push rbx
 1005c52:	sub    rsp,0x60
 1005c56:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
 1005c5f:	mov    rbx,rcx
 1005c62:	lea    rax,[rip+0xffffffffffffc957]        # 0x10025c0
 1005c69:	mov    QWORD PTR [rsp+0x28],rax
 1005c6e:	mov    DWORD PTR [rsp+0x20],0x1
 1005c76:	lea    r9,[rsp+0x70]
 1005c7b:	lea    r8,[rip+0xffffffffffffc2c6]        # 0x1001f48
 1005c82:	xor    edx,edx
 1005c84:	lea    rcx,[rsp+0x38]
 1005c89:	call   QWORD PTR [rip+0xffffffffffffb841]        # 0x10014d0
 1005c8f:	nop
 1005c90:	mov    r9,QWORD PTR [rbx+0x8]
 1005c94:	xor    eax,eax
 1005c96:	cmp    DWORD PTR [r9-0x10],eax
 1005c9a:	cmove  r9,rax
 1005c9e:	mov    rcx,QWORD PTR [rbx+0x30]
 1005ca2:	mov    rax,QWORD PTR [rcx]
 1005ca5:	mov    r8d,DWORD PTR [rbx+0x14]
 1005ca9:	mov    edx,DWORD PTR [rbx+0x18]
 1005cac:	call   QWORD PTR [rax+0x8]
 1005caf:	mov    ebx,eax
 1005cb1:	mov    DWORD PTR [rsp+0x70],eax
 1005cb5:	lea    rcx,[rsp+0x38]
 1005cba:	call   QWORD PTR [rip+0xffffffffffffb808]        # 0x10014c8
 1005cc0:	mov    eax,ebx
 1005cc2:	add    rsp,0x60
 1005cc6:	pop    rbx
 1005cc7:	ret    
 1005cc8:	int3   
 1005cc9:	int3   
 1005cca:	int3   
 1005ccb:	int3   
 1005ccc:	int3   
 1005ccd:	int3   
 1005cce:	int3   
 1005ccf:	int3   
 1005cd0:	rex push rbx
 1005cd2:	sub    rsp,0x20
 1005cd6:	mov    rbx,rcx
 1005cd9:	mov    rcx,QWORD PTR [rcx]
 1005cdc:	test   rcx,rcx
 1005cdf:	je     0x1005cf7
 1005ce1:	call   QWORD PTR [rip+0xffffffffffffb329]        # 0x1001010
 1005ce7:	xor    r11d,r11d
 1005cea:	mov    QWORD PTR [rbx],r11
 1005ced:	mov    DWORD PTR [rbx+0x8],r11d
 1005cf1:	add    rsp,0x20
 1005cf5:	pop    rbx
 1005cf6:	ret    
 1005cf7:	xor    r11d,r11d
 1005cfa:	mov    DWORD PTR [rbx+0x8],r11d
 1005cfe:	add    rsp,0x20
 1005d02:	pop    rbx
 1005d03:	ret    
 1005d04:	int3   
 1005d05:	int3   
 1005d06:	int3   
 1005d07:	int3   
 1005d08:	int3   
 1005d09:	int3   
 1005d0a:	int3   
 1005d0b:	int3   
 1005d0c:	int3   
 1005d0d:	int3   
 1005d0e:	int3   
 1005d0f:	int3   
 1005d10:	mov    QWORD PTR [rsp+0x10],rbx
 1005d15:	mov    QWORD PTR [rsp+0x18],rbp
 1005d1a:	mov    QWORD PTR [rsp+0x20],rsi
 1005d1f:	push   rdi
 1005d20:	push   r14
 1005d22:	push   r15
 1005d24:	sub    rsp,0x40
 1005d28:	mov    rdi,QWORD PTR [rcx+0x10]
 1005d2c:	xor    r15d,r15d
 1005d2f:	mov    esi,r9d
 1005d32:	mov    rbp,r8
 1005d35:	mov    r14,rdx
 1005d38:	mov    rbx,rcx
 1005d3b:	mov    QWORD PTR [rsp+0x60],r15
 1005d40:	test   rdi,rdi
 1005d43:	je     0x1005dab
 1005d45:	cmp    QWORD PTR [rdi],r15
 1005d48:	je     0x1005d9e
 1005d4a:	lea    rcx,[rip+0xffffffffffffc91f]        # 0x1002670
 1005d51:	call   QWORD PTR [rip+0xffffffffffffb531]        # 0x1001288
 1005d57:	test   rax,rax
 1005d5a:	jne    0x1005d62
 1005d5c:	lea    eax,[r15+0x1]
 1005d60:	jmp    0x1005dc4
 1005d62:	lea    rdx,[rip+0xffffffffffffc927]        # 0x1002690
 1005d69:	mov    rcx,rax
 1005d6c:	call   QWORD PTR [rip+0xffffffffffffb55e]        # 0x10012d0
 1005d72:	test   rax,rax
 1005d75:	je     0x1005da4
 1005d77:	mov    rcx,QWORD PTR [rdi]
 1005d7a:	mov    QWORD PTR [rsp+0x30],r15
 1005d7f:	mov    r9d,esi
 1005d82:	mov    QWORD PTR [rsp+0x28],rcx
 1005d87:	lea    rcx,[rsp+0x60]
 1005d8c:	xor    r8d,r8d
 1005d8f:	mov    QWORD PTR [rsp+0x20],rcx
 1005d94:	mov    rcx,r14
 1005d97:	mov    rdx,rbp
 1005d9a:	call   rax
 1005d9c:	jmp    0x1005dc4
 1005d9e:	cmp    DWORD PTR [rdi+0x8],r15d
 1005da2:	jne    0x1005dab
 1005da4:	mov    eax,0x1
 1005da9:	jmp    0x1005dc4
 1005dab:	lea    rax,[rsp+0x60]
 1005db0:	xor    r8d,r8d
 1005db3:	mov    rdx,rbp
 1005db6:	mov    rcx,r14
 1005db9:	mov    QWORD PTR [rsp+0x20],rax
 1005dbe:	call   QWORD PTR [rip+0xffffffffffffb23c]        # 0x1001000
 1005dc4:	test   eax,eax
 1005dc6:	jne    0x1005de8
 1005dc8:	mov    rcx,QWORD PTR [rbx]
 1005dcb:	mov    eax,r15d
 1005dce:	test   rcx,rcx
 1005dd1:	je     0x1005ddc
 1005dd3:	call   QWORD PTR [rip+0xffffffffffffb237]        # 0x1001010
 1005dd9:	mov    QWORD PTR [rbx],r15
 1005ddc:	mov    rcx,QWORD PTR [rsp+0x60]
 1005de1:	mov    DWORD PTR [rbx+0x8],r15d
 1005de5:	mov    QWORD PTR [rbx],rcx
 1005de8:	mov    rbx,QWORD PTR [rsp+0x68]
 1005ded:	mov    rbp,QWORD PTR [rsp+0x70]
 1005df2:	mov    rsi,QWORD PTR [rsp+0x78]
 1005df7:	add    rsp,0x40
 1005dfb:	pop    r15
 1005dfd:	pop    r14
 1005dff:	pop    rdi
 1005e00:	ret    
 1005e01:	int3   
 1005e02:	int3   
 1005e03:	int3   
 1005e04:	int3   
 1005e05:	int3   
 1005e06:	int3   
 1005e07:	int3   
 1005e08:	int3   
 1005e09:	int3   
 1005e0a:	int3   
 1005e0b:	int3   
 1005e0c:	int3   
 1005e0d:	int3   
 1005e0e:	int3   
 1005e0f:	int3   
 1005e10:	xor    r11d,r11d
 1005e13:	mov    eax,r11d
 1005e16:	test   rdx,rdx
 1005e19:	je     0x1005e24
 1005e1b:	cmp    rdx,0x7fffffff
 1005e22:	jbe    0x1005e29
 1005e24:	mov    eax,0x80070057
 1005e29:	test   eax,eax
 1005e2b:	js     0x1005e88
 1005e2d:	mov    r10d,r11d
 1005e30:	test   rdx,rdx
 1005e33:	je     0x1005e77
 1005e35:	mov    r9d,0x7ffffffe
 1005e3b:	sub    r9,rdx
 1005e3e:	sub    r8,rcx
 1005e41:	lea    rax,[r9+rdx*1]
 1005e45:	test   rax,rax
 1005e48:	je     0x1005e72
 1005e4a:	movzx  eax,WORD PTR [r8+rcx*1]
 1005e4f:	test   ax,ax
 1005e52:	je     0x1005e72
 1005e54:	mov    WORD PTR [rcx],ax
 1005e57:	add    rcx,0x2
 1005e5b:	dec    rdx
 1005e5e:	jne    0x1005e41
 1005e60:	sub    rcx,0x2
 1005e64:	mov    r10d,0x8007007a
 1005e6a:	mov    WORD PTR [rcx],r11w
 1005e6e:	mov    eax,r10d
 1005e71:	ret    
 1005e72:	test   rdx,rdx
 1005e75:	jne    0x1005e81
 1005e77:	sub    rcx,0x2
 1005e7b:	mov    r10d,0x8007007a
 1005e81:	mov    WORD PTR [rcx],r11w
 1005e85:	mov    eax,r10d
 1005e88:	repz ret 
 1005e8a:	int3   
 1005e8b:	int3   
 1005e8c:	int3   
 1005e8d:	int3   
 1005e8e:	int3   
 1005e8f:	int3   
 1005e90:	mov    QWORD PTR [rsp+0x18],rbx
 1005e95:	mov    QWORD PTR [rsp+0x20],rsi
 1005e9a:	push   rdi
 1005e9b:	push   r14
 1005e9d:	push   r15
 1005e9f:	sub    rsp,0x6a0
 1005ea6:	mov    rax,QWORD PTR [rip+0xb2b3]        # 0x1011160
 1005ead:	xor    rax,rsp
 1005eb0:	mov    QWORD PTR [rsp+0x690],rax
 1005eb8:	mov    rdi,rdx
 1005ebb:	mov    rsi,rcx
 1005ebe:	mov    r14,QWORD PTR [rip+0xb40b]        # 0x10112d0
 1005ec5:	test   r14,r14
 1005ec8:	je     0x1006152
 1005ece:	xor    r15d,r15d
 1005ed1:	mov    QWORD PTR [rsp+0x40],r15
 1005ed6:	mov    QWORD PTR [rsp+0x48],r15
 1005edb:	mov    rax,QWORD PTR [r14]
 1005ede:	lea    rdx,[rsp+0x40]
 1005ee3:	mov    rcx,r14
 1005ee6:	call   QWORD PTR [rax+0x28]
 1005ee9:	mov    DWORD PTR [rsp+0x50],eax
 1005eed:	test   eax,eax
 1005eef:	js     0x1006152
 1005ef5:	lea    rcx,[rip+0xb3e4]        # 0x10112e0
 1005efc:	call   QWORD PTR [rip+0xffffffffffffb1fe]        # 0x1001100
 1005f02:	nop
 1005f03:	lea    r8,[rsp+0x48]
 1005f08:	lea    edx,[r15+0x1]
 1005f0c:	mov    rcx,QWORD PTR [rip+0xbbc5]        # 0x1011ad8
 1005f13:	call   0x10087a0
 1005f18:	mov    rdx,QWORD PTR [rsp+0x48]
 1005f1d:	test   rdx,rdx
 1005f20:	je     0x1005f30
 1005f22:	mov    rcx,QWORD PTR [rsp+0x40]
 1005f27:	mov    rax,QWORD PTR [rcx]
 1005f2a:	call   QWORD PTR [rax+0x90]
 1005f30:	mov    rcx,QWORD PTR [rsp+0x40]
 1005f35:	mov    edx,DWORD PTR [rip+0xb1ed]        # 0x1011128
 1005f3b:	mov    rax,QWORD PTR [rcx]
 1005f3e:	test   rsi,rsi
 1005f41:	je     0x1005f48
 1005f43:	xor    r8d,r8d
 1005f46:	jmp    0x1005f52
 1005f48:	btr    edx,0xa
 1005f4c:	mov    r8d,0x400
 1005f52:	call   QWORD PTR [rax+0x20]
 1005f55:	mov    edx,DWORD PTR [rip+0xb1d1]        # 0x101112c
 1005f5b:	test   edx,edx
 1005f5d:	je     0x1005f6d
 1005f5f:	mov    rcx,QWORD PTR [rsp+0x40]
 1005f64:	mov    rax,QWORD PTR [rcx]
 1005f67:	xor    r8d,r8d
 1005f6a:	call   QWORD PTR [rax+0x28]
 1005f6d:	test   rsi,rsi
 1005f70:	je     0x1005f93
 1005f72:	mov    rax,QWORD PTR [rsp+0x40]
 1005f77:	mov    rbx,QWORD PTR [rax]
 1005f7a:	call   QWORD PTR [rip+0xffffffffffffb170]        # 0x10010f0
 1005f80:	mov    edx,eax
 1005f82:	mov    r9,QWORD PTR [rsi+0x8]
 1005f86:	mov    r8,QWORD PTR [rsi]
 1005f89:	mov    rcx,QWORD PTR [rsp+0x40]
 1005f8e:	call   QWORD PTR [rbx+0x40]
 1005f91:	jmp    0x1005fa9
 1005f93:	mov    rcx,QWORD PTR [rsp+0x40]
 1005f98:	mov    rax,QWORD PTR [rcx]
 1005f9b:	mov    rdx,QWORD PTR [rsp+0x6b8]
 1005fa3:	call   QWORD PTR [rax+0xc8]
 1005fa9:	mov    edx,0x104
 1005fae:	cmp    WORD PTR [rip+0xb35a],0x0        # 0x1011310
 1005fb6:	je     0x1006069
 1005fbc:	lea    rcx,[rsp+0x270]
 1005fc4:	call   0x1008910
 1005fc9:	mov    r11d,DWORD PTR [rip+0xb338]        # 0x1011308
 1005fd0:	mov    DWORD PTR [rsp+0x28],r11d
 1005fd5:	lea    rbx,[rip+0xb334]        # 0x1011310
 1005fdc:	mov    QWORD PTR [rsp+0x20],rbx
 1005fe1:	lea    r9,[rsp+0x270]
 1005fe9:	lea    r8,[rip+0xffffffffffffc6d0]        # 0x10026c0
 1005ff0:	mov    edx,0x104
 1005ff5:	lea    rcx,[rsp+0x60]
 1005ffa:	call   QWORD PTR [rip+0xffffffffffffb3b0]        # 0x10013b0
 1006000:	mov    r11d,DWORD PTR [rip+0xb301]        # 0x1011308
 1006007:	mov    DWORD PTR [rsp+0x28],r11d
 100600c:	mov    QWORD PTR [rsp+0x20],rbx
 1006011:	lea    r9,[rsp+0x270]
 1006019:	lea    r8,[rip+0xffffffffffffc6b8]        # 0x10026d8
 1006020:	mov    edx,0x104
 1006025:	lea    rcx,[rsp+0x480]
 100602d:	call   QWORD PTR [rip+0xffffffffffffb37d]        # 0x10013b0
 1006033:	mov    rcx,QWORD PTR [rsp+0x40]
 1006038:	mov    rax,QWORD PTR [rcx]
 100603b:	lea    rdx,[rsp+0x480]
 1006043:	call   QWORD PTR [rax+0x70]
 1006046:	test   rdi,rdi
 1006049:	je     0x1006060
 100604b:	lea    r8,[rsp+0x480]
 1006053:	mov    edx,0x104
 1006058:	mov    rcx,rdi
 100605b:	call   0x1005e10
 1006060:	lock inc DWORD PTR [rip+0xb2a1]        # 0x1011308
 1006067:	jmp    0x1006073
 1006069:	lea    rcx,[rsp+0x60]
 100606e:	call   0x1008a80
 1006073:	mov    QWORD PTR [rsp+0x30],r15
 1006078:	mov    DWORD PTR [rsp+0x28],0x80
 1006080:	mov    DWORD PTR [rsp+0x20],0x2
 1006088:	xor    r9d,r9d
 100608b:	mov    edx,0x40000000
 1006090:	lea    r8d,[r9+0x1]
 1006094:	lea    rcx,[rsp+0x60]
 1006099:	call   QWORD PTR [rip+0xffffffffffffb089]        # 0x1001128
 100609f:	mov    QWORD PTR [rip+0xb232],rax        # 0x10112d8
 10060a6:	test   rax,rax
 10060a9:	je     0x10060e2
 10060ab:	mov    rcx,QWORD PTR [rsp+0x40]
 10060b0:	mov    rax,QWORD PTR [rcx]
 10060b3:	lea    rdx,[rsp+0x60]
 10060b8:	call   QWORD PTR [rax+0x68]
 10060bb:	mov    rcx,QWORD PTR [rip+0xb216]        # 0x10112d8
 10060c2:	call   0x1008b80
 10060c7:	test   rdi,rdi
 10060ca:	je     0x10060e2
 10060cc:	lea    rcx,[rdi+0x208]
 10060d3:	lea    r8,[rsp+0x60]
 10060d8:	mov    edx,0x104
 10060dd:	call   0x1005e10
 10060e2:	test   DWORD PTR [rip+0xb03c],0x8000        # 0x1011128
 10060ec:	je     0x10060fb
 10060ee:	mov    rdx,QWORD PTR [rsp+0x40]
 10060f3:	mov    rcx,r14
 10060f6:	call   0x1009940
 10060fb:	mov    rcx,QWORD PTR [rsp+0x40]
 1006100:	mov    rax,QWORD PTR [rcx]
 1006103:	call   QWORD PTR [rax+0x18]
 1006106:	test   rdi,rdi
 1006109:	je     0x1006111
 100610b:	mov    DWORD PTR [rdi+0x410],eax
 1006111:	mov    rcx,QWORD PTR [rsp+0x40]
 1006116:	mov    rax,QWORD PTR [rcx]
 1006119:	call   QWORD PTR [rax+0x10]
 100611c:	mov    rcx,QWORD PTR [rsp+0x48]
 1006121:	test   rcx,rcx
 1006124:	je     0x1006131
 1006126:	call   QWORD PTR [rip+0xffffffffffffb35c]        # 0x1001488
 100612c:	mov    QWORD PTR [rsp+0x48],r15
 1006131:	mov    rcx,QWORD PTR [rip+0xb1a0]        # 0x10112d8
 1006138:	call   QWORD PTR [rip+0xffffffffffffaf3a]        # 0x1001078
 100613e:	mov    QWORD PTR [rip+0xb193],r15        # 0x10112d8
 1006145:	lea    rcx,[rip+0xb194]        # 0x10112e0
 100614c:	call   QWORD PTR [rip+0xffffffffffffafb6]        # 0x1001108
 1006152:	mov    eax,0x1
 1006157:	mov    rcx,QWORD PTR [rsp+0x690]
 100615f:	xor    rcx,rsp
 1006162:	call   0x1006ba0
 1006167:	lea    r11,[rsp+0x6a0]
 100616f:	mov    rbx,QWORD PTR [r11+0x30]
 1006173:	mov    rsi,QWORD PTR [r11+0x38]
 1006177:	mov    rsp,r11
 100617a:	pop    r15
 100617c:	pop    r14
 100617e:	pop    rdi
 100617f:	ret    
 1006180:	int3   
 1006181:	int3   
 1006182:	int3   
 1006183:	int3   
 1006184:	int3   
 1006185:	int3   
 1006186:	int3   
 1006187:	int3   
 1006188:	int3   
 1006189:	int3   
 100618a:	int3   
 100618b:	int3   
 100618c:	int3   
 100618d:	int3   
 100618e:	int3   
 100618f:	int3   
 1006190:	xor    edx,edx
 1006192:	jmp    0x1005e90
 1006197:	int3   
 1006198:	int3   
 1006199:	int3   
 100619a:	int3   
 100619b:	int3   
 100619c:	int3   
 100619d:	int3   
 100619e:	int3   
 100619f:	int3   
 10061a0:	rex push rbp
 10061a2:	push   rsi
 10061a3:	push   rdi
 10061a4:	mov    rbp,rsp
 10061a7:	sub    rsp,0x50
 10061ab:	mov    QWORD PTR [rbp-0x20],0xfffffffffffffffe
 10061b3:	mov    QWORD PTR [rsp+0x70],rbx
 10061b8:	mov    rdi,rcx
 10061bb:	xor    r9d,r9d
 10061be:	xor    r8d,r8d
 10061c1:	lea    edx,[r9+0x1]
 10061c5:	xor    ecx,ecx
 10061c7:	call   QWORD PTR [rip+0xffffffffffffaf13]        # 0x10010e0
 10061cd:	lea    rcx,[rip+0xb10c]        # 0x10112e0
 10061d4:	call   QWORD PTR [rip+0xffffffffffffaf1e]        # 0x10010f8
 10061da:	xor    esi,esi
 10061dc:	mov    QWORD PTR [rip+0xb0f5],rsi        # 0x10112d8
 10061e3:	xor    edx,edx
 10061e5:	mov    r8d,0x208
 10061eb:	lea    rcx,[rip+0xb11e]        # 0x1011310
 10061f2:	call   0x1006d28
 10061f7:	mov    QWORD PTR [rbp+0x38],rsi
 10061fb:	xor    ecx,ecx
 10061fd:	call   QWORD PTR [rip+0xffffffffffffb085]        # 0x1001288
 1006203:	test   rax,rax
 1006206:	je     0x1006227
 1006208:	lea    rdx,[rip+0xffffffffffffc499]        # 0x10026a8
 100620f:	mov    rcx,rax
 1006212:	call   QWORD PTR [rip+0xffffffffffffb0b8]        # 0x10012d0
 1006218:	test   rax,rax
 100621b:	je     0x1006227
 100621d:	lea    rcx,[rbp+0x38]
 1006221:	call   rax
 1006223:	mov    ebx,eax
 1006225:	jmp    0x100623c
 1006227:	call   QWORD PTR [rip+0xffffffffffffae0b]        # 0x1001038
 100622d:	test   eax,eax
 100622f:	mov    ebx,eax
 1006231:	jle    0x100623c
 1006233:	movzx  ebx,ax
 1006236:	or     ebx,0x80070000
 100623c:	test   ebx,ebx
 100623e:	js     0x100634d
 1006244:	mov    rcx,QWORD PTR [rbp+0x38]
 1006248:	mov    rax,QWORD PTR [rcx]
 100624b:	call   QWORD PTR [rax+0x20]
 100624e:	mov    ebx,eax
 1006250:	mov    rcx,QWORD PTR [rbp+0x38]
 1006254:	test   eax,eax
 1006256:	js     0x1006347
 100625c:	mov    QWORD PTR [rip+0xb06d],rcx        # 0x10112d0
 1006263:	test   rdi,rdi
 1006266:	je     0x1006299
 1006268:	mov    DWORD PTR [rbp+0x28],esi
 100626b:	mov    DWORD PTR [rbp+0x30],esi
 100626e:	lea    rdx,[rbp+0x30]
 1006272:	lea    rcx,[rbp+0x28]
 1006276:	call   rdi
 1006278:	mov    ebx,eax
 100627a:	test   eax,eax
 100627c:	js     0x100634d
 1006282:	mov    eax,DWORD PTR [rbp+0x28]
 1006285:	mov    DWORD PTR [rip+0xae9d],eax        # 0x1011128
 100628b:	mov    eax,DWORD PTR [rbp+0x30]
 100628e:	mov    DWORD PTR [rip+0xae98],eax        # 0x101112c
 1006294:	jmp    0x100634d
 1006299:	mov    QWORD PTR [rbp-0x18],rsi
 100629d:	mov    DWORD PTR [rbp-0x10],esi
 10062a0:	mov    QWORD PTR [rbp-0x8],rsi
 10062a4:	mov    r9d,0x20019
 10062aa:	lea    r8,[rip+0xffffffffffffc44f]        # 0x1002700
 10062b1:	mov    rdx,0xffffffff80000002
 10062b8:	lea    rcx,[rbp-0x18]
 10062bc:	call   0x1005d10
 10062c1:	mov    rdi,QWORD PTR [rbp-0x18]
 10062c5:	test   eax,eax
 10062c7:	jne    0x1006330
 10062c9:	mov    DWORD PTR [rbp+0x28],0x4
 10062d0:	lea    rax,[rbp+0x28]
 10062d4:	mov    QWORD PTR [rsp+0x28],rax
 10062d9:	lea    rax,[rip+0xae48]        # 0x1011128
 10062e0:	mov    QWORD PTR [rsp+0x20],rax
 10062e5:	lea    r9,[rbp+0x30]
 10062e9:	xor    r8d,r8d
 10062ec:	lea    rdx,[rip+0xffffffffffffc48d]        # 0x1002780
 10062f3:	mov    rcx,rdi
 10062f6:	call   QWORD PTR [rip+0xffffffffffffad0c]        # 0x1001008
 10062fc:	mov    DWORD PTR [rbp+0x28],0x4
 1006303:	lea    rax,[rbp+0x28]
 1006307:	mov    QWORD PTR [rsp+0x28],rax
 100630c:	lea    rax,[rip+0xae19]        # 0x101112c
 1006313:	mov    QWORD PTR [rsp+0x20],rax
 1006318:	lea    r9,[rbp+0x30]
 100631c:	xor    r8d,r8d
 100631f:	lea    rdx,[rip+0xffffffffffffc47a]        # 0x10027a0
 1006326:	mov    rcx,rdi
 1006329:	call   QWORD PTR [rip+0xffffffffffffacd9]        # 0x1001008
 100632f:	nop
 1006330:	test   rdi,rdi
 1006333:	je     0x1006342
 1006335:	mov    rcx,rdi
 1006338:	call   QWORD PTR [rip+0xffffffffffffacd2]        # 0x1001010
 100633e:	mov    QWORD PTR [rbp-0x18],rsi
 1006342:	mov    DWORD PTR [rbp-0x10],esi
 1006345:	jmp    0x100634d
 1006347:	mov    rax,QWORD PTR [rcx]
 100634a:	call   QWORD PTR [rax+0x10]
 100634d:	lea    rcx,[rip+0xfffffffffffffe3c]        # 0x1006190
 1006354:	call   QWORD PTR [rip+0xffffffffffffad8e]        # 0x10010e8
 100635a:	mov    eax,ebx
 100635c:	mov    rbx,QWORD PTR [rsp+0x70]
 1006361:	add    rsp,0x50
 1006365:	pop    rdi
 1006366:	pop    rsi
 1006367:	pop    rbp
 1006368:	ret    
 1006369:	int3   
 100636a:	int3   
 100636b:	int3   
 100636c:	int3   
 100636d:	int3   
 100636e:	int3   
 100636f:	int3   
 1006370:	mov    rdx,rcx
 1006373:	xor    ecx,ecx
 1006375:	jmp    0x1005e90
 100637a:	int3   
 100637b:	int3   
 100637c:	int3   
 100637d:	int3   
 100637e:	int3   
 100637f:	int3   
 1006380:	mov    rax,QWORD PTR [rip+0xaf51]        # 0x10112d8
 1006387:	ret    
 1006388:	int3   
 1006389:	int3   
 100638a:	int3   
 100638b:	int3   
 100638c:	int3   
 100638d:	int3   
 100638e:	int3   
 100638f:	int3   
 1006390:	sub    rsp,0x248
 1006397:	mov    rax,QWORD PTR [rip+0xadc2]        # 0x1011160
 100639e:	xor    rax,rsp
 10063a1:	mov    QWORD PTR [rsp+0x230],rax
 10063a9:	xor    eax,eax
 10063ab:	lea    rcx,[rsp+0x22]
 10063b0:	xor    edx,edx
 10063b2:	mov    r8d,0x208
 10063b8:	mov    WORD PTR [rsp+0x20],ax
 10063bd:	call   0x1006d28
 10063c2:	lea    rcx,[rsp+0x20]
 10063c7:	mov    edx,0x105
 10063cc:	call   QWORD PTR [rip+0xffffffffffffad4e]        # 0x1001120
 10063d2:	test   eax,eax
 10063d4:	je     0x100644b
 10063d6:	cmp    eax,0x105
 10063db:	jae    0x100644b
 10063dd:	lea    r8,[rip+0xffffffffffffc3ec]        # 0x10027d0
 10063e4:	lea    rcx,[rsp+0x20]
 10063e9:	or     r9,0xffffffffffffffff
 10063ed:	mov    edx,0x105
 10063f2:	call   QWORD PTR [rip+0xffffffffffffafb0]        # 0x10013a8
 10063f8:	test   eax,eax
 10063fa:	jne    0x100644b
 10063fc:	lea    rcx,[rsp+0x20]
 1006401:	mov    QWORD PTR [rsp+0x240],rbx
 1006409:	call   QWORD PTR [rip+0xffffffffffffad01]        # 0x1001110
 100640f:	mov    rbx,rax
 1006412:	test   rax,rax
 1006415:	je     0x1006443
 1006417:	lea    rdx,[rip+0xffffffffffffc3d2]        # 0x10027f0
 100641e:	mov    rcx,rax
 1006421:	call   QWORD PTR [rip+0xffffffffffffaea9]        # 0x10012d0
 1006427:	test   rax,rax
 100642a:	je     0x100643a
 100642c:	xor    r9d,r9d
 100642f:	xor    r8d,r8d
 1006432:	xor    ecx,ecx
 1006434:	lea    edx,[r9+0x1]
 1006438:	call   rax
 100643a:	mov    rcx,rbx
 100643d:	call   QWORD PTR [rip+0xffffffffffffac95]        # 0x10010d8
 1006443:	mov    rbx,QWORD PTR [rsp+0x240]
 100644b:	mov    rcx,QWORD PTR [rsp+0x230]
 1006453:	xor    rcx,rsp
 1006456:	call   0x1006ba0
 100645b:	add    rsp,0x248
 1006462:	ret    
 1006463:	int3   
 1006464:	int3   
 1006465:	int3   
 1006466:	int3   
 1006467:	int3   
 1006468:	int3   
 1006469:	int3   
 100646a:	int3   
 100646b:	int3   
 100646c:	int3   
 100646d:	int3   
 100646e:	int3   
 100646f:	int3   
 1006470:	xor    eax,eax
 1006472:	ret    
 1006473:	int3   
 1006474:	int3   
 1006475:	int3   
 1006476:	int3   
 1006477:	int3   
 1006478:	int3   
 1006479:	int3   
 100647a:	int3   
 100647b:	int3   
 100647c:	int3   
 100647d:	int3   
 100647e:	int3   
 100647f:	int3   
 1006480:	mov    rax,rsp
 1006483:	push   rdi
 1006484:	sub    rsp,0xb0
 100648b:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
 1006494:	mov    QWORD PTR [rax+0x18],rbx
 1006498:	mov    QWORD PTR [rax+0x20],rsi
 100649c:	call   0x1006390
 10064a1:	lea    r11,[rip+0xffffffffffffc360]        # 0x1002808
 10064a8:	mov    QWORD PTR [rsp+0x28],r11
 10064ad:	mov    DWORD PTR [rsp+0x20],0x1
 10064b5:	lea    r9,[rsp+0xc0]
 10064bd:	lea    r8,[rip+0xffffffffffffba84]        # 0x1001f48
 10064c4:	xor    edx,edx
 10064c6:	lea    rcx,[rsp+0x38]
 10064cb:	call   QWORD PTR [rip+0xffffffffffffafff]        # 0x10014d0
 10064d1:	nop
 10064d2:	xor    ecx,ecx
 10064d4:	call   QWORD PTR [rip+0xffffffffffffadae]        # 0x1001288
 10064da:	mov    rsi,rax
 10064dd:	call   QWORD PTR [rip+0xffffffffffffac35]        # 0x1001118
 10064e3:	mov    rdi,rax
 10064e6:	mov    r9,rax
 10064e9:	lea    r8,[rip+0xffffffffffffc328]        # 0x1002818
 10064f0:	mov    edx,0x1
 10064f5:	lea    rcx,[rip+0xffffffffffffba4c]        # 0x1001f48
 10064fc:	call   QWORD PTR [rip+0xffffffffffffafbe]        # 0x10014c0
 1006502:	lea    rdx,[rip+0xffffffffffffc337]        # 0x1002840
 1006509:	mov    rcx,rsi
 100650c:	call   0x1007600
 1006511:	mov    rbx,rax
 1006514:	mov    QWORD PTR [rsp+0xc8],0x0
 1006520:	lea    r8,[rsp+0xc8]
 1006528:	mov    edx,0x1
 100652d:	mov    rcx,rax
 1006530:	call   0x10087a0
 1006535:	xor    ecx,ecx
 1006537:	call   0x10061a0
 100653c:	lea    rcx,[rsp+0x60]
 1006541:	call   0x1004910
 1006546:	nop
 1006547:	mov    r8,rdi
 100654a:	mov    rdx,rbx
 100654d:	lea    rcx,[rsp+0x60]
 1006552:	call   0x1004a30
 1006557:	mov    ebx,eax
 1006559:	test   eax,eax
 100655b:	je     0x1006589
 100655d:	cmp    eax,0x1
 1006560:	jne    0x100657c
 1006562:	lea    rcx,[rsp+0x60]
 1006567:	call   0x10049b0
 100656c:	nop
 100656d:	lea    rcx,[rsp+0x38]
 1006572:	call   QWORD PTR [rip+0xffffffffffffaf50]        # 0x10014c8
 1006578:	xor    eax,eax
 100657a:	jmp    0x10065c1
 100657c:	lea    rcx,[rsp+0x60]
 1006581:	call   0x10049b0
 1006586:	nop
 1006587:	jmp    0x10065b4
 1006589:	lea    rcx,[rsp+0x60]
 100658e:	call   0x1004c20
 1006593:	mov    DWORD PTR [rsp+0xc0],eax
 100659a:	mov    rcx,rsi
 100659d:	call   0x1007ea0
 10065a2:	mov    ebx,DWORD PTR [rsp+0xc0]
 10065a9:	lea    rcx,[rsp+0x60]
 10065ae:	call   0x10049b0
 10065b3:	nop
 10065b4:	lea    rcx,[rsp+0x38]
 10065b9:	call   QWORD PTR [rip+0xffffffffffffaf09]        # 0x10014c8
 10065bf:	mov    eax,ebx
 10065c1:	lea    r11,[rsp+0xb0]
 10065c9:	mov    rbx,QWORD PTR [r11+0x20]
 10065cd:	mov    rsi,QWORD PTR [r11+0x28]
 10065d1:	mov    rsp,r11
 10065d4:	pop    rdi
 10065d5:	ret    
 10065d6:	int3   
 10065d7:	int3   
 10065d8:	int3   
 10065d9:	int3   
 10065da:	int3   
 10065db:	int3   
 10065dc:	sub    rsp,0x38
 10065e0:	lea    rcx,[rip+0x92d]        # 0x1006f14
 10065e7:	call   0x1006cf0
 10065ec:	mov    r11d,DWORD PTR [rip+0xb4c5]        # 0x1011ab8
 10065f3:	mov    r9d,DWORD PTR [rip+0xb4ba]        # 0x1011ab4
 10065fa:	lea    rax,[rip+0xaf33]        # 0x1011534
 1006601:	lea    r8,[rip+0xaf18]        # 0x1011520
 1006608:	lea    rdx,[rip+0xaf19]        # 0x1011528
 100660f:	lea    rcx,[rip+0xaf02]        # 0x1011518
 1006616:	mov    DWORD PTR [rip+0xaf17],r11d        # 0x1011534
 100661d:	mov    QWORD PTR [rsp+0x20],rax
 1006622:	call   QWORD PTR [rip+0xffffffffffffad98]        # 0x10013c0
 1006628:	mov    DWORD PTR [rip+0xaf02],eax        # 0x1011530
 100662e:	test   eax,eax
 1006630:	jns    0x100663c
 1006632:	mov    ecx,0x8
 1006637:	call   0x1006ec6
 100663c:	add    rsp,0x38
 1006640:	ret    
 1006641:	int3   
 1006642:	int3   
 1006643:	int3   
 1006644:	int3   
 1006645:	int3   
 1006646:	int3   
 1006647:	int3   
 1006648:	mov    QWORD PTR [rsp+0x8],rbx
 100664d:	push   rdi
 100664e:	sub    rsp,0x20
 1006652:	mov    rax,QWORD PTR gs:0x30
 100665b:	mov    rbx,QWORD PTR [rax+0x8]
 100665f:	xor    edi,edi
 1006661:	xor    eax,eax
 1006663:	lock cmpxchg QWORD PTR [rip+0xd08c],rbx        # 0x10136f8
 100666c:	je     0x1006689
 100666e:	cmp    rax,rbx
 1006671:	jne    0x100667c
 1006673:	mov    ebx,0x1
 1006678:	mov    edi,ebx
 100667a:	jmp    0x100668e
 100667c:	mov    ecx,0x3e8
 1006681:	call   QWORD PTR [rip+0xffffffffffffac39]        # 0x10012c0
 1006687:	jmp    0x1006661
 1006689:	mov    ebx,0x1
 100668e:	mov    eax,DWORD PTR [rip+0xd05c]        # 0x10136f0
 1006694:	cmp    eax,ebx
 1006696:	jne    0x10066a4
 1006698:	mov    ecx,0x1f
 100669d:	call   0x1006ec6
 10066a2:	jmp    0x10066db
 10066a4:	mov    eax,DWORD PTR [rip+0xd046]        # 0x10136f0
 10066aa:	test   eax,eax
 10066ac:	jne    0x10066d5
 10066ae:	mov    DWORD PTR [rip+0xd03c],ebx        # 0x10136f0
 10066b4:	lea    rdx,[rip+0xffffffffffffaefd]        # 0x10015b8
 10066bb:	lea    rcx,[rip+0xffffffffffffaede]        # 0x10015a0
 10066c2:	call   0x1007054
 10066c7:	test   eax,eax
 10066c9:	je     0x10066db
 10066cb:	mov    eax,0xff
 10066d0:	jmp    0x10067bd
 10066d5:	mov    DWORD PTR [rip+0xae61],ebx        # 0x101153c
 10066db:	mov    eax,DWORD PTR [rip+0xd00f]        # 0x10136f0
 10066e1:	cmp    eax,ebx
 10066e3:	jne    0x1006702
 10066e5:	lea    rdx,[rip+0xffffffffffffaeac]        # 0x1001598
 10066ec:	lea    rcx,[rip+0xffffffffffffae1d]        # 0x1001510
 10066f3:	call   0x1007048
 10066f8:	mov    DWORD PTR [rip+0xcfee],0x2        # 0x10136f0
 1006702:	test   edi,edi
 1006704:	jne    0x100670f
 1006706:	xor    eax,eax
 1006708:	xchg   QWORD PTR [rip+0xcfe9],rax        # 0x10136f8
 100670f:	cmp    QWORD PTR [rip+0xcff9],0x0        # 0x1013710
 1006717:	je     0x1006738
 1006719:	lea    rcx,[rip+0xcff0]        # 0x1013710
 1006720:	call   0x1007000
 1006725:	test   eax,eax
 1006727:	je     0x1006738
 1006729:	xor    r8d,r8d
 100672c:	lea    edx,[r8+0x2]
 1006730:	xor    ecx,ecx
 1006732:	call   QWORD PTR [rip+0xcfd8]        # 0x1013710
 1006738:	mov    rcx,QWORD PTR [rip+0xffffffffffffacb1]        # 0x10013f0
 100673f:	mov    rax,QWORD PTR [rip+0xadda]        # 0x1011520
 1006746:	mov    QWORD PTR [rcx],rax
 1006749:	mov    r8,QWORD PTR [rip+0xadd0]        # 0x1011520
 1006750:	mov    rdx,QWORD PTR [rip+0xadd1]        # 0x1011528
 1006757:	mov    ecx,DWORD PTR [rip+0xadbb]        # 0x1011518
 100675d:	call   0x1006480
 1006762:	mov    DWORD PTR [rip+0xadd0],eax        # 0x1011538
 1006768:	cmp    DWORD PTR [rip+0xadad],0x0        # 0x101151c
 100676f:	jne    0x1006779
 1006771:	mov    ecx,eax
 1006773:	call   QWORD PTR [rip+0xffffffffffffac6f]        # 0x10013e8
 1006779:	cmp    DWORD PTR [rip+0xadbc],0x0        # 0x101153c
 1006780:	jne    0x100678e
 1006782:	call   QWORD PTR [rip+0xffffffffffffac58]        # 0x10013e0
 1006788:	mov    eax,DWORD PTR [rip+0xadaa]        # 0x1011538
 100678e:	jmp    0x10067bd
 1006790:	mov    DWORD PTR [rip+0xada2],eax        # 0x1011538
 1006796:	cmp    DWORD PTR [rip+0xad7f],0x0        # 0x101151c
 100679d:	jne    0x10067a8
 100679f:	mov    ecx,eax
 10067a1:	call   QWORD PTR [rip+0xffffffffffffac31]        # 0x10013d8
 10067a7:	int3   
 10067a8:	cmp    DWORD PTR [rip+0xad8d],0x0        # 0x101153c
 10067af:	jne    0x10067bd
 10067b1:	call   QWORD PTR [rip+0xffffffffffffac29]        # 0x10013e0
 10067b7:	mov    eax,DWORD PTR [rip+0xad7b]        # 0x1011538
 10067bd:	mov    rbx,QWORD PTR [rsp+0x30]
 10067c2:	add    rsp,0x20
 10067c6:	pop    rdi
 10067c7:	ret    
 10067c8:	int3   
 10067c9:	int3   
 10067ca:	int3   
 10067cb:	int3   
 10067cc:	int3   
 10067cd:	int3   
 10067ce:	int3   
 10067cf:	int3   
 10067d0:	sub    rsp,0x28
 10067d4:	mov    eax,0x5a4d
 10067d9:	cmp    WORD PTR [rip+0xffffffffffff9820],ax        # 0x1000000
 10067e0:	je     0x10067e6
 10067e2:	xor    ecx,ecx
 10067e4:	jmp    0x100681e
 10067e6:	movsxd rax,DWORD PTR [rip+0xffffffffffff984f]        # 0x100003c
 10067ed:	lea    rcx,[rip+0xffffffffffff980c]        # 0x1000000
 10067f4:	add    rax,rcx
 10067f7:	cmp    DWORD PTR [rax],0x4550
 10067fd:	jne    0x10067e2
 10067ff:	mov    ecx,0x20b
 1006804:	cmp    WORD PTR [rax+0x18],cx
 1006808:	jne    0x10067e2
 100680a:	xor    ecx,ecx
 100680c:	cmp    DWORD PTR [rax+0x84],0xe
 1006813:	jbe    0x100681e
 1006815:	cmp    DWORD PTR [rax+0xf8],ecx
 100681b:	setne  cl
 100681e:	mov    DWORD PTR [rip+0xacf8],ecx        # 0x101151c
 1006824:	mov    ecx,0x1
 1006829:	call   QWORD PTR [rip+0xffffffffffffabf9]        # 0x1001428
 100682f:	or     rcx,0xffffffffffffffff
 1006833:	call   QWORD PTR [rip+0xffffffffffffaa7f]        # 0x10012b8
 1006839:	mov    rcx,QWORD PTR [rip+0xffffffffffffabe0]        # 0x1001420
 1006840:	mov    QWORD PTR [rip+0xceb9],rax        # 0x1013700
 1006847:	mov    QWORD PTR [rip+0xceba],rax        # 0x1013708
 100684e:	mov    eax,DWORD PTR [rip+0xb26c]        # 0x1011ac0
 1006854:	mov    DWORD PTR [rcx],eax
 1006856:	mov    rdx,QWORD PTR [rip+0xffffffffffffabbb]        # 0x1001418
 100685d:	mov    eax,DWORD PTR [rip+0xb259]        # 0x1011abc
 1006863:	mov    DWORD PTR [rdx],eax
 1006865:	call   0x1006ed4
 100686a:	call   0x100706c
 100686f:	cmp    DWORD PTR [rip+0xa906],0x0        # 0x101117c
 1006876:	jne    0x1006885
 1006878:	lea    rcx,[rip+0x7e1]        # 0x1007060
 100687f:	call   QWORD PTR [rip+0xffffffffffffab8b]        # 0x1001410
 1006885:	cmp    DWORD PTR [rip+0xa8ec],0xffffffff        # 0x1011178
 100688c:	jne    0x1006897
 100688e:	or     ecx,0xffffffff
 1006891:	call   QWORD PTR [rip+0xffffffffffffab71]        # 0x1001408
 1006897:	xor    eax,eax
 1006899:	add    rsp,0x28
 100689d:	ret    
 100689e:	int3   
 100689f:	int3   
 10068a0:	int3   
 10068a1:	int3   
 10068a2:	int3   
 10068a3:	int3   
 10068a4:	sub    rsp,0x28
 10068a8:	call   0x1007078
 10068ad:	add    rsp,0x28
 10068b1:	jmp    0x1006648
 10068b6:	int3   
 10068b7:	int3   
 10068b8:	int3   
 10068b9:	int3   
 10068ba:	int3   
 10068bb:	int3   
 10068bc:	jmp    QWORD PTR [rip+0xffffffffffffabae]        # 0x1001470
 10068c2:	int3   
 10068c3:	int3   
 10068c4:	int3   
 10068c5:	int3   
 10068c6:	int3   
 10068c7:	int3   
 10068c8:	mov    QWORD PTR [rsp+0x10],rbx
 10068cd:	mov    DWORD PTR [rsp+0x18],r8d
 10068d2:	mov    QWORD PTR [rsp+0x8],rcx
 10068d7:	push   rsi
 10068d8:	push   rdi
 10068d9:	push   r12
 10068db:	sub    rsp,0x40
 10068df:	mov    rsi,r9
 10068e2:	mov    edi,r8d
 10068e5:	mov    r12,rdx
 10068e8:	mov    rbx,rcx
 10068eb:	dec    edi
 10068ed:	mov    DWORD PTR [rsp+0x70],edi
 10068f1:	js     0x1006902
 10068f3:	sub    rbx,r12
 10068f6:	mov    QWORD PTR [rsp+0x60],rbx
 10068fb:	mov    rcx,rbx
 10068fe:	call   rsi
 1006900:	jmp    0x10068eb
 1006902:	jmp    0x1006904
 1006904:	mov    rbx,QWORD PTR [rsp+0x68]
 1006909:	add    rsp,0x40
 100690d:	pop    r12
 100690f:	pop    rdi
 1006910:	pop    rsi
 1006911:	ret    
 1006912:	int3   
 1006913:	int3   
 1006914:	int3   
 1006915:	int3   
 1006916:	int3   
 1006917:	int3   
 1006918:	mov    rax,rsp
 100691b:	mov    QWORD PTR [rax+0x20],r9
 100691f:	mov    DWORD PTR [rax+0x18],r8d
 1006923:	mov    QWORD PTR [rax+0x10],rdx
 1006927:	push   rbx
 1006928:	push   rsi
 1006929:	push   rdi
 100692a:	push   r12
 100692c:	sub    rsp,0x38
 1006930:	mov    r12,r9
 1006933:	movsxd rdi,r8d
 1006936:	mov    rsi,rdx
 1006939:	and    DWORD PTR [rax-0x38],0x0
 100693d:	mov    rbx,rdi
 1006940:	imul   rbx,rdx
 1006944:	add    rbx,rcx
 1006947:	mov    QWORD PTR [rax+0x8],rbx
 100694b:	dec    edi
 100694d:	mov    DWORD PTR [rsp+0x70],edi
 1006951:	js     0x1006963
 1006953:	sub    rbx,rsi
 1006956:	mov    QWORD PTR [rsp+0x60],rbx
 100695b:	mov    rcx,rbx
 100695e:	call   r12
 1006961:	jmp    0x100694b
 1006963:	mov    DWORD PTR [rsp+0x20],0x1
 100696b:	add    rsp,0x38
 100696f:	pop    r12
 1006971:	pop    rdi
 1006972:	pop    rsi
 1006973:	pop    rbx
 1006974:	ret    
 1006975:	int3   
 1006976:	int3   
 1006977:	int3   
 1006978:	int3   
 1006979:	int3   
 100697a:	int3   
 100697b:	int3   
 100697c:	mov    QWORD PTR [rsp+0x8],rcx
 1006981:	sub    rsp,0x88
 1006988:	lea    rcx,[rip+0xac51]        # 0x10115e0
 100698f:	call   QWORD PTR [rip+0xffffffffffffa8cb]        # 0x1001260
 1006995:	mov    rax,QWORD PTR [rip+0xad3c]        # 0x10116d8
 100699c:	mov    QWORD PTR [rsp+0x58],rax
 10069a1:	xor    r8d,r8d
 10069a4:	lea    rdx,[rsp+0x60]
 10069a9:	mov    rcx,QWORD PTR [rsp+0x58]
 10069ae:	call   0x100c242
 10069b3:	mov    QWORD PTR [rsp+0x50],rax
 10069b8:	cmp    QWORD PTR [rsp+0x50],0x0
 10069be:	je     0x1006a01
 10069c0:	mov    QWORD PTR [rsp+0x38],0x0
 10069c9:	lea    rax,[rsp+0x48]
 10069ce:	mov    QWORD PTR [rsp+0x30],rax
 10069d3:	lea    rax,[rsp+0x40]
 10069d8:	mov    QWORD PTR [rsp+0x28],rax
 10069dd:	lea    rax,[rip+0xabfc]        # 0x10115e0
 10069e4:	mov    QWORD PTR [rsp+0x20],rax
 10069e9:	mov    r9,QWORD PTR [rsp+0x50]
 10069ee:	mov    r8,QWORD PTR [rsp+0x58]
 10069f3:	mov    rdx,QWORD PTR [rsp+0x60]
 10069f8:	xor    ecx,ecx
 10069fa:	call   0x100c236
 10069ff:	jmp    0x1006a23
 1006a01:	mov    rax,QWORD PTR [rsp+0x88]
 1006a09:	mov    QWORD PTR [rip+0xacc8],rax        # 0x10116d8
 1006a10:	lea    rax,[rsp+0x88]
 1006a18:	add    rax,0x8
 1006a1c:	mov    QWORD PTR [rip+0xac55],rax        # 0x1011678
 1006a23:	mov    rax,QWORD PTR [rip+0xacae]        # 0x10116d8
 1006a2a:	mov    QWORD PTR [rip+0xab1f],rax        # 0x1011550
 1006a31:	mov    rax,QWORD PTR [rsp+0x90]
 1006a39:	mov    QWORD PTR [rip+0xac20],rax        # 0x1011660
 1006a40:	mov    DWORD PTR [rip+0xaaf6],0xc0000409        # 0x1011540
 1006a4a:	mov    DWORD PTR [rip+0xaaf0],0x1        # 0x1011544
 1006a54:	mov    rax,QWORD PTR [rip+0xa705]        # 0x1011160
 1006a5b:	mov    QWORD PTR [rsp+0x68],rax
 1006a60:	mov    rax,QWORD PTR [rip+0xa701]        # 0x1011168
 1006a67:	mov    QWORD PTR [rsp+0x70],rax
 1006a6c:	call   QWORD PTR [rip+0xffffffffffffa826]        # 0x1001298
 1006a72:	mov    DWORD PTR [rip+0xab60],eax        # 0x10115d8
 1006a78:	mov    ecx,0x1
 1006a7d:	call   0x100713e
 1006a82:	xor    ecx,ecx
 1006a84:	call   QWORD PTR [rip+0xffffffffffffa65e]        # 0x10010e8
 1006a8a:	lea    rcx,[rip+0xffffffffffffbdbf]        # 0x1002850
 1006a91:	call   QWORD PTR [rip+0xffffffffffffa809]        # 0x10012a0
 1006a97:	cmp    DWORD PTR [rip+0xab3a],0x0        # 0x10115d8
 1006a9e:	jne    0x1006aaa
 1006aa0:	mov    ecx,0x1
 1006aa5:	call   0x100713e
 1006aaa:	call   QWORD PTR [rip+0xffffffffffffa7f8]        # 0x10012a8
 1006ab0:	mov    edx,0xc0000409
 1006ab5:	mov    rcx,rax
 1006ab8:	call   QWORD PTR [rip+0xffffffffffffa7f2]        # 0x10012b0
 1006abe:	add    rsp,0x88
 1006ac5:	ret    
 1006ac6:	int3   
 1006ac7:	int3   
 1006ac8:	int3   
 1006ac9:	int3   
 1006aca:	int3   
 1006acb:	int3   
 1006acc:	jmp    QWORD PTR [rip+0xffffffffffffa856]        # 0x1001328
 1006ad2:	int3   
 1006ad3:	int3   
 1006ad4:	int3   
 1006ad5:	int3   
 1006ad6:	int3   
 1006ad7:	int3   
 1006ad8:	jmp    QWORD PTR [rip+0xffffffffffffa842]        # 0x1001320
 1006ade:	int3   
 1006adf:	int3   
 1006ae0:	int3   
 1006ae1:	int3   
 1006ae2:	int3   
 1006ae3:	int3   
 1006ae4:	jmp    QWORD PTR [rip+0xffffffffffffa82e]        # 0x1001318
 1006aea:	int3   
 1006aeb:	int3   
 1006aec:	int3   
 1006aed:	int3   
 1006aee:	int3   
 1006aef:	int3   
 1006af0:	jmp    QWORD PTR [rip+0xffffffffffffa81a]        # 0x1001310
 1006af6:	int3   
 1006af7:	int3   
 1006af8:	int3   
 1006af9:	int3   
 1006afa:	int3   
 1006afb:	int3   
 1006afc:	mov    rax,rsp
 1006aff:	mov    QWORD PTR [rax+0x8],rbx
 1006b03:	mov    QWORD PTR [rax+0x10],rbp
 1006b07:	mov    QWORD PTR [rax+0x18],rsi
 1006b0b:	mov    QWORD PTR [rax+0x20],rdi
 1006b0f:	push   r12
 1006b11:	sub    rsp,0x20
 1006b15:	mov    rbx,QWORD PTR [r9+0x38]
 1006b19:	mov    rsi,rdx
 1006b1c:	mov    r12,r8
 1006b1f:	mov    rbp,rcx
 1006b22:	lea    r8,[rbx+0x4]
 1006b26:	mov    rdx,r9
 1006b29:	mov    rcx,rsi
 1006b2c:	mov    rdi,r9
 1006b2f:	call   0x1006d34
 1006b34:	mov    r11d,DWORD PTR [rbx+0x4]
 1006b38:	mov    r10d,DWORD PTR [rbp+0x4]
 1006b3c:	mov    eax,r11d
 1006b3f:	and    r11d,0x2
 1006b43:	mov    r8d,0x1
 1006b49:	and    eax,r8d
 1006b4c:	and    r10b,0x66
 1006b50:	cmove  r11d,eax
 1006b54:	test   r11d,r11d
 1006b57:	je     0x1006b6d
 1006b59:	mov    r9,rdi
 1006b5c:	mov    r8,r12
 1006b5f:	mov    rdx,rsi
 1006b62:	mov    rcx,rbp
 1006b65:	call   0x1006af0
 1006b6a:	mov    r8d,eax
 1006b6d:	mov    rbx,QWORD PTR [rsp+0x30]
 1006b72:	mov    rbp,QWORD PTR [rsp+0x38]
 1006b77:	mov    rsi,QWORD PTR [rsp+0x40]
 1006b7c:	mov    rdi,QWORD PTR [rsp+0x48]
 1006b81:	mov    eax,r8d
 1006b84:	add    rsp,0x20
 1006b88:	pop    r12
 1006b8a:	ret    
 1006b8b:	int3   
 1006b8c:	int3   
 1006b8d:	int3   
 1006b8e:	int3   
 1006b8f:	int3   
 1006b90:	int3   
 1006b91:	int3   
 1006b92:	int3   
 1006b93:	int3   
 1006b94:	int3   
 1006b95:	int3   
 1006b96:	data16 nop WORD PTR [rax+rax*1+0x0]
 1006ba0:	cmp    rcx,QWORD PTR [rip+0xa5b9]        # 0x1011160
 1006ba7:	jne    0x1006bba
 1006ba9:	rol    rcx,0x10
 1006bad:	test   cx,0xffff
 1006bb2:	jne    0x1006bb6
 1006bb4:	repz ret 
 1006bb6:	ror    rcx,0x10
 1006bba:	jmp    0x100697c
 1006bbf:	int3   
 1006bc0:	int3   
 1006bc1:	int3   
 1006bc2:	int3   
 1006bc3:	int3   
 1006bc4:	int3   
 1006bc5:	int3   
 1006bc6:	int3   
 1006bc7:	int3   
 1006bc8:	mov    QWORD PTR [rsp+0x8],rbx
 1006bcd:	mov    QWORD PTR [rsp+0x10],rsi
 1006bd2:	push   rdi
 1006bd3:	sub    rsp,0x20
 1006bd7:	mov    esi,edx
 1006bd9:	mov    rbx,rcx
 1006bdc:	test   dl,0x2
 1006bdf:	je     0x1006c0b
 1006be1:	mov    r8d,DWORD PTR [rcx-0x8]
 1006be5:	lea    r9,[rip+0x5aa]        # 0x1007196
 1006bec:	mov    edx,0x18
 1006bf1:	call   0x1006918
 1006bf6:	test   sil,0x1
 1006bfa:	je     0x1006c05
 1006bfc:	lea    rcx,[rbx-0x8]
 1006c00:	call   0x10068bc
 1006c05:	lea    rax,[rbx-0x8]
 1006c09:	jmp    0x1006c21
 1006c0b:	call   0x1007196
 1006c10:	test   sil,0x1
 1006c14:	je     0x1006c1e
 1006c16:	mov    rcx,rbx
 1006c19:	call   0x10068bc
 1006c1e:	mov    rax,rbx
 1006c21:	mov    rbx,QWORD PTR [rsp+0x30]
 1006c26:	mov    rsi,QWORD PTR [rsp+0x38]
 1006c2b:	add    rsp,0x20
 1006c2f:	pop    rdi
 1006c30:	ret    
 1006c31:	int3   
 1006c32:	int3   
 1006c33:	int3   
 1006c34:	int3   
 1006c35:	int3   
 1006c36:	int3   
 1006c37:	int3   
 1006c38:	rex push rbx
 1006c3a:	sub    rsp,0x20
 1006c3e:	mov    rbx,rcx
 1006c41:	mov    rcx,QWORD PTR [rip+0xcac0]        # 0x1013708
 1006c48:	call   QWORD PTR [rip+0xffffffffffffa60a]        # 0x1001258
 1006c4e:	mov    QWORD PTR [rsp+0x38],rax
 1006c53:	cmp    rax,0xffffffffffffffff
 1006c57:	jne    0x1006c64
 1006c59:	mov    rcx,rbx
 1006c5c:	call   QWORD PTR [rip+0xffffffffffffa7f6]        # 0x1001458
 1006c62:	jmp    0x1006ce2
 1006c64:	mov    ecx,0x8
 1006c69:	call   0x1007162
 1006c6e:	nop
 1006c6f:	mov    rcx,QWORD PTR [rip+0xca92]        # 0x1013708
 1006c76:	call   QWORD PTR [rip+0xffffffffffffa5dc]        # 0x1001258
 1006c7c:	mov    QWORD PTR [rsp+0x38],rax
 1006c81:	mov    rcx,QWORD PTR [rip+0xca78]        # 0x1013700
 1006c88:	call   QWORD PTR [rip+0xffffffffffffa5ca]        # 0x1001258
 1006c8e:	mov    QWORD PTR [rsp+0x40],rax
 1006c93:	mov    rcx,rbx
 1006c96:	call   QWORD PTR [rip+0xffffffffffffa61c]        # 0x10012b8
 1006c9c:	mov    rcx,rax
 1006c9f:	lea    r8,[rsp+0x40]
 1006ca4:	lea    rdx,[rsp+0x38]
 1006ca9:	call   0x1007156
 1006cae:	mov    rbx,rax
 1006cb1:	mov    rcx,QWORD PTR [rsp+0x38]
 1006cb6:	call   QWORD PTR [rip+0xffffffffffffa5fc]        # 0x10012b8
 1006cbc:	mov    QWORD PTR [rip+0xca45],rax        # 0x1013708
 1006cc3:	mov    rcx,QWORD PTR [rsp+0x40]
 1006cc8:	call   QWORD PTR [rip+0xffffffffffffa5ea]        # 0x10012b8
 1006cce:	mov    QWORD PTR [rip+0xca2b],rax        # 0x1013700
 1006cd5:	mov    ecx,0x8
 1006cda:	call   0x100714a
 1006cdf:	mov    rax,rbx
 1006ce2:	add    rsp,0x20
 1006ce6:	pop    rbx
 1006ce7:	ret    
 1006ce8:	int3   
 1006ce9:	int3   
 1006cea:	int3   
 1006ceb:	int3   
 1006cec:	int3   
 1006ced:	int3   
 1006cee:	int3   
 1006cef:	int3   
 1006cf0:	sub    rsp,0x28
 1006cf4:	call   0x1006c38
 1006cf9:	neg    rax
 1006cfc:	sbb    eax,eax
 1006cfe:	neg    eax
 1006d00:	dec    eax
 1006d02:	add    rsp,0x28
 1006d06:	ret    
 1006d07:	int3   
 1006d08:	int3   
 1006d09:	int3   
 1006d0a:	int3   
 1006d0b:	int3   
 1006d0c:	int3   
 1006d0d:	int3   
 1006d0e:	jmp    QWORD PTR [rip+0xffffffffffffa67c]        # 0x1001390
 1006d14:	int3   
 1006d15:	int3   
 1006d16:	int3   
 1006d17:	int3   
 1006d18:	int3   
 1006d19:	int3   
 1006d1a:	int3   
 1006d1b:	int3   
 1006d1c:	jmp    0x1007170
 1006d21:	int3   
 1006d22:	int3   
 1006d23:	int3   
 1006d24:	int3   
 1006d25:	int3   
 1006d26:	int3   
 1006d27:	int3   
 1006d28:	jmp    QWORD PTR [rip+0xffffffffffffa672]        # 0x10013a0
 1006d2e:	int3   
 1006d2f:	int3   
 1006d30:	int3   
 1006d31:	int3   
 1006d32:	int3   
 1006d33:	int3   
 1006d34:	rex push rbx
 1006d36:	sub    rsp,0x20
 1006d3a:	mov    r11d,DWORD PTR [r8]
 1006d3d:	mov    rbx,rdx
 1006d40:	mov    r9,rcx
 1006d43:	and    r11d,0xfffffff8
 1006d47:	test   BYTE PTR [r8],0x4
 1006d4b:	mov    r10,rcx
 1006d4e:	je     0x1006d63
 1006d50:	mov    eax,DWORD PTR [r8+0x8]
 1006d54:	movsxd r10,DWORD PTR [r8+0x4]
 1006d58:	neg    eax
 1006d5a:	add    r10,rcx
 1006d5d:	movsxd rcx,eax
 1006d60:	and    r10,rcx
 1006d63:	movsxd rax,r11d
 1006d66:	mov    rdx,QWORD PTR [rax+r10*1]
 1006d6a:	mov    rax,QWORD PTR [rbx+0x10]
 1006d6e:	mov    ecx,DWORD PTR [rax+0x8]
 1006d71:	add    rcx,QWORD PTR [rbx+0x8]
 1006d75:	test   BYTE PTR [rcx+0x3],0xf
 1006d79:	je     0x1006d87
 1006d7b:	movzx  eax,BYTE PTR [rcx+0x3]
 1006d7f:	and    eax,0xfffffff0
 1006d82:	cdqe   
 1006d84:	add    r9,rax
 1006d87:	xor    r9,rdx
 1006d8a:	mov    rcx,r9
 1006d8d:	add    rsp,0x20
 1006d91:	pop    rbx
 1006d92:	jmp    0x1006ba0
 1006d97:	int3   
 1006d98:	int3   
 1006d99:	int3   
 1006d9a:	int3   
 1006d9b:	int3   
 1006d9c:	int3   
 1006d9d:	int3   
 1006d9e:	int3   
 1006d9f:	int3   
 1006da0:	sub    rsp,0x28
 1006da4:	mov    r8,QWORD PTR [r9+0x38]
 1006da8:	mov    rcx,rdx
 1006dab:	mov    rdx,r9
 1006dae:	call   0x1006d34
 1006db3:	mov    eax,0x1
 1006db8:	add    rsp,0x28
 1006dbc:	ret    
 1006dbd:	int3   
 1006dbe:	int3   
 1006dbf:	int3   
 1006dc0:	int3   
 1006dc1:	int3   
 1006dc2:	int3   
 1006dc3:	int3   
 1006dc4:	mov    rax,rsp
 1006dc7:	mov    QWORD PTR [rax+0x8],rbx
 1006dcb:	mov    QWORD PTR [rax+0x10],rbp
 1006dcf:	mov    QWORD PTR [rax+0x18],rsi
 1006dd3:	mov    QWORD PTR [rax+0x20],rdi
 1006dd7:	push   r12
 1006dd9:	sub    rsp,0x20
 1006ddd:	mov    r10,QWORD PTR [r9+0x38]
 1006de1:	mov    rsi,rdx
 1006de4:	mov    r12,r8
 1006de7:	mov    eax,DWORD PTR [r10]
 1006dea:	mov    rbp,rcx
 1006ded:	mov    rdx,r9
 1006df0:	add    rax,rax
 1006df3:	mov    rcx,rsi
 1006df6:	mov    rdi,r9
 1006df9:	lea    rbx,[r10+rax*8+0x4]
 1006dfe:	mov    r8,rbx
 1006e01:	call   0x1006d34
 1006e06:	mov    r11d,DWORD PTR [rbx]
 1006e09:	mov    r10d,DWORD PTR [rbp+0x4]
 1006e0d:	mov    eax,r11d
 1006e10:	and    r11d,0x2
 1006e14:	mov    edx,0x1
 1006e19:	and    eax,edx
 1006e1b:	and    r10b,0x66
 1006e1f:	cmove  r11d,eax
 1006e23:	test   r11d,r11d
 1006e26:	je     0x1006e3b
 1006e28:	mov    r9,rdi
 1006e2b:	mov    r8,r12
 1006e2e:	mov    rdx,rsi
 1006e31:	mov    rcx,rbp
 1006e34:	call   0x1006f52
 1006e39:	mov    edx,eax
 1006e3b:	mov    rbx,QWORD PTR [rsp+0x30]
 1006e40:	mov    rbp,QWORD PTR [rsp+0x38]
 1006e45:	mov    rsi,QWORD PTR [rsp+0x40]
 1006e4a:	mov    rdi,QWORD PTR [rsp+0x48]
 1006e4f:	mov    eax,edx
 1006e51:	add    rsp,0x20
 1006e55:	pop    r12
 1006e57:	ret    
 1006e58:	int3   
 1006e59:	int3   
 1006e5a:	int3   
 1006e5b:	int3   
 1006e5c:	int3   
 1006e5d:	int3   
 1006e5e:	int3   
 1006e5f:	int3   
 1006e60:	sub    rsp,0x28
 1006e64:	mov    rax,QWORD PTR [rcx]
 1006e67:	cmp    DWORD PTR [rax],0xe06d7363
 1006e6d:	jne    0x1006e9a
 1006e6f:	cmp    DWORD PTR [rax+0x18],0x4
 1006e73:	jne    0x1006e9a
 1006e75:	mov    eax,DWORD PTR [rax+0x20]
 1006e78:	cmp    eax,0x19930520
 1006e7d:	je     0x1006e94
 1006e7f:	cmp    eax,0x19930521
 1006e84:	je     0x1006e94
 1006e86:	cmp    eax,0x19930522
 1006e8b:	je     0x1006e94
 1006e8d:	cmp    eax,0x1994000
 1006e92:	jne    0x1006e9a
 1006e94:	call   0x1007132
 1006e99:	int3   
 1006e9a:	xor    eax,eax
 1006e9c:	add    rsp,0x28
 1006ea0:	ret    
 1006ea1:	int3   
 1006ea2:	int3   
 1006ea3:	int3   
 1006ea4:	int3   
 1006ea5:	int3   
 1006ea6:	int3   
 1006ea7:	int3   
 1006ea8:	sub    rsp,0x28
 1006eac:	lea    rcx,[rip+0xffffffffffffffad]        # 0x1006e60
 1006eb3:	call   QWORD PTR [rip+0xffffffffffffa22f]        # 0x10010e8
 1006eb9:	xor    eax,eax
 1006ebb:	add    rsp,0x28
 1006ebf:	ret    
 1006ec0:	int3   
 1006ec1:	int3   
 1006ec2:	int3   
 1006ec3:	int3   
 1006ec4:	int3   
 1006ec5:	int3   
 1006ec6:	jmp    QWORD PTR [rip+0xffffffffffffa4ec]        # 0x10013b8
 1006ecc:	int3   
 1006ecd:	int3   
 1006ece:	int3   
 1006ecf:	int3   
 1006ed0:	int3   
 1006ed1:	int3   
 1006ed2:	int3   
 1006ed3:	int3   
 1006ed4:	mov    QWORD PTR [rsp+0x8],rbx
 1006ed9:	push   rdi
 1006eda:	sub    rsp,0x20
 1006ede:	lea    rbx,[rip+0xffffffffffffce5b]        # 0x1003d40
 1006ee5:	lea    rdi,[rip+0xffffffffffffce54]        # 0x1003d40
 1006eec:	jmp    0x1006efc
 1006eee:	mov    rax,QWORD PTR [rbx]
 1006ef1:	test   rax,rax
 1006ef4:	je     0x1006ef8
 1006ef6:	call   rax
 1006ef8:	add    rbx,0x8
 1006efc:	cmp    rbx,rdi
 1006eff:	jb     0x1006eee
 1006f01:	mov    rbx,QWORD PTR [rsp+0x30]
 1006f06:	add    rsp,0x20
 1006f0a:	pop    rdi
 1006f0b:	ret    
 1006f0c:	int3   
 1006f0d:	int3   
 1006f0e:	int3   
 1006f0f:	int3   
 1006f10:	int3   
 1006f11:	int3   
 1006f12:	int3   
 1006f13:	int3   
 1006f14:	mov    QWORD PTR [rsp+0x8],rbx
 1006f19:	push   rdi
 1006f1a:	sub    rsp,0x20
 1006f1e:	lea    rbx,[rip+0xffffffffffffce2b]        # 0x1003d50
 1006f25:	lea    rdi,[rip+0xffffffffffffce24]        # 0x1003d50
 1006f2c:	jmp    0x1006f3c
 1006f2e:	mov    rax,QWORD PTR [rbx]
 1006f31:	test   rax,rax
 1006f34:	je     0x1006f38
 1006f36:	call   rax
 1006f38:	add    rbx,0x8
 1006f3c:	cmp    rbx,rdi
 1006f3f:	jb     0x1006f2e
 1006f41:	mov    rbx,QWORD PTR [rsp+0x30]
 1006f46:	add    rsp,0x20
 1006f4a:	pop    rdi
 1006f4b:	ret    
 1006f4c:	int3   
 1006f4d:	int3   
 1006f4e:	int3   
 1006f4f:	int3   
 1006f50:	int3   
 1006f51:	int3   
 1006f52:	jmp    QWORD PTR [rip+0xffffffffffffa470]        # 0x10013c8
 1006f58:	int3   
 1006f59:	int3   
 1006f5a:	int3   
 1006f5b:	int3   
 1006f5c:	int3   
 1006f5d:	int3   
 1006f5e:	jmp    QWORD PTR [rip+0xffffffffffffa46c]        # 0x10013d0
 1006f64:	int3   
 1006f65:	int3   
 1006f66:	int3   
 1006f67:	int3   
 1006f68:	int3   
 1006f69:	int3   
 1006f6a:	int3   
 1006f6b:	int3   
 1006f6c:	int3   
 1006f6d:	int3   
 1006f6e:	int3   
 1006f6f:	int3   
 1006f70:	mov    rax,rcx
 1006f73:	mov    ecx,0x5a4d
 1006f78:	cmp    WORD PTR [rax],cx
 1006f7b:	je     0x1006f80
 1006f7d:	xor    eax,eax
 1006f7f:	ret    
 1006f80:	movsxd rcx,DWORD PTR [rax+0x3c]
 1006f84:	add    rcx,rax
 1006f87:	xor    eax,eax
 1006f89:	cmp    DWORD PTR [rcx],0x4550
 1006f8f:	jne    0x1006f9d
 1006f91:	mov    edx,0x20b
 1006f96:	cmp    WORD PTR [rcx+0x18],dx
 1006f9a:	sete   al
 1006f9d:	repz ret 
 1006f9f:	int3   
 1006fa0:	int3   
 1006fa1:	int3   
 1006fa2:	int3   
 1006fa3:	int3   
 1006fa4:	int3   
 1006fa5:	int3   
 1006fa6:	int3   
 1006fa7:	int3   
 1006fa8:	int3   
 1006fa9:	int3   
 1006faa:	int3   
 1006fab:	int3   
 1006fac:	int3   
 1006fad:	int3   
 1006fae:	int3   
 1006faf:	int3   
 1006fb0:	movsxd r8,DWORD PTR [rcx+0x3c]
 1006fb4:	xor    r9d,r9d
 1006fb7:	mov    r10,rdx
 1006fba:	add    r8,rcx
 1006fbd:	movzx  eax,WORD PTR [r8+0x14]
 1006fc2:	movzx  r11d,WORD PTR [r8+0x6]
 1006fc7:	lea    rcx,[rax+r8*1+0x18]
 1006fcc:	test   r11d,r11d
 1006fcf:	je     0x1006fef
 1006fd1:	mov    edx,DWORD PTR [rcx+0xc]
 1006fd4:	cmp    r10,rdx
 1006fd7:	jb     0x1006fe3
 1006fd9:	mov    eax,DWORD PTR [rcx+0x8]
 1006fdc:	add    eax,edx
 1006fde:	cmp    r10,rax
 1006fe1:	jb     0x1006ff2
 1006fe3:	inc    r9d
 1006fe6:	add    rcx,0x28
 1006fea:	cmp    r9d,r11d
 1006fed:	jb     0x1006fd1
 1006fef:	xor    eax,eax
 1006ff1:	ret    
 1006ff2:	mov    rax,rcx
 1006ff5:	ret    
 1006ff6:	int3   
 1006ff7:	int3   
 1006ff8:	int3   
 1006ff9:	int3   
 1006ffa:	int3   
 1006ffb:	int3   
 1006ffc:	int3   
 1006ffd:	int3   
 1006ffe:	int3   
 1006fff:	int3   
 1007000:	sub    rsp,0x28
 1007004:	mov    r8,rcx
 1007007:	lea    r9,[rip+0xffffffffffff8ff2]        # 0x1000000
 100700e:	mov    rcx,r9
 1007011:	call   0x1006f70
 1007016:	test   eax,eax
 1007018:	je     0x100703c
 100701a:	sub    r8,r9
 100701d:	mov    rdx,r8
 1007020:	mov    rcx,r9
 1007023:	call   0x1006fb0
 1007028:	test   rax,rax
 100702b:	je     0x100703c
 100702d:	mov    eax,DWORD PTR [rax+0x24]
 1007030:	shr    eax,0x1f
 1007033:	not    eax
 1007035:	and    eax,0x1
 1007038:	jmp    0x100703c
 100703a:	xor    eax,eax
 100703c:	add    rsp,0x28
 1007040:	ret    
 1007041:	int3   
 1007042:	int3   
 1007043:	int3   
 1007044:	int3   
 1007045:	int3   
 1007046:	int3   
 1007047:	int3   
 1007048:	jmp    QWORD PTR [rip+0xffffffffffffa3aa]        # 0x10013f8
 100704e:	int3   
 100704f:	int3   
 1007050:	int3   
 1007051:	int3   
 1007052:	int3   
 1007053:	int3   
 1007054:	jmp    QWORD PTR [rip+0xffffffffffffa3a6]        # 0x1001400
 100705a:	int3   
 100705b:	int3   
 100705c:	int3   
 100705d:	int3   
 100705e:	int3   
 100705f:	int3   
 1007060:	xor    eax,eax
 1007062:	ret    
 1007063:	int3   
 1007064:	int3   
 1007065:	int3   
 1007066:	int3   
 1007067:	int3   
 1007068:	int3   
 1007069:	int3   
 100706a:	int3   
 100706b:	int3   
 100706c:	xor    eax,eax
 100706e:	ret    
 100706f:	int3   
 1007070:	int3   
 1007071:	int3   
 1007072:	int3   
 1007073:	int3   
 1007074:	int3   
 1007075:	int3   
 1007076:	int3   
 1007077:	int3   
 1007078:	mov    QWORD PTR [rsp+0x18],rbx
 100707d:	push   rdi
 100707e:	sub    rsp,0x20
 1007082:	mov    rax,QWORD PTR [rip+0xa0d7]        # 0x1011160
 1007089:	and    QWORD PTR [rsp+0x30],0x0
 100708f:	movabs rdi,0x2b992ddfa232
 1007099:	cmp    rax,rdi
 100709c:	je     0x10070aa
 100709e:	not    rax
 10070a1:	mov    QWORD PTR [rip+0xa0c0],rax        # 0x1011168
 10070a8:	jmp    0x1007120
 10070aa:	lea    rcx,[rsp+0x30]
 10070af:	call   QWORD PTR [rip+0xffffffffffffa183]        # 0x1001238
 10070b5:	mov    rbx,QWORD PTR [rsp+0x30]
 10070ba:	call   QWORD PTR [rip+0xffffffffffffa180]        # 0x1001240
 10070c0:	mov    r11d,eax
 10070c3:	xor    rbx,r11
 10070c6:	call   QWORD PTR [rip+0xffffffffffffa024]        # 0x10010f0
 10070cc:	mov    r11d,eax
 10070cf:	xor    rbx,r11
 10070d2:	call   QWORD PTR [rip+0xffffffffffffa170]        # 0x1001248
 10070d8:	lea    rcx,[rsp+0x38]
 10070dd:	mov    r11d,eax
 10070e0:	xor    rbx,r11
 10070e3:	call   QWORD PTR [rip+0xffffffffffffa167]        # 0x1001250
 10070e9:	mov    r11,QWORD PTR [rsp+0x38]
 10070ee:	xor    r11,rbx
 10070f1:	movabs rax,0xffffffffffff
 10070fb:	and    r11,rax
 10070fe:	movabs rax,0x2b992ddfa233
 1007108:	cmp    r11,rdi
 100710b:	cmove  r11,rax
 100710f:	mov    QWORD PTR [rip+0xa04a],r11        # 0x1011160
 1007116:	not    r11
 1007119:	mov    QWORD PTR [rip+0xa048],r11        # 0x1011168
 1007120:	mov    rbx,QWORD PTR [rsp+0x40]
 1007125:	add    rsp,0x20
 1007129:	pop    rdi
 100712a:	ret    
 100712b:	int3   
 100712c:	int3   
 100712d:	int3   
 100712e:	int3   
 100712f:	int3   
 1007130:	int3   
 1007131:	int3   
 1007132:	jmp    QWORD PTR [rip+0xffffffffffffa2f8]        # 0x1001430
 1007138:	int3   
 1007139:	int3   
 100713a:	int3   
 100713b:	int3   
 100713c:	int3   
 100713d:	int3   
 100713e:	jmp    QWORD PTR [rip+0xffffffffffffa2f4]        # 0x1001438
 1007144:	int3   
 1007145:	int3   
 1007146:	int3   
 1007147:	int3   
 1007148:	int3   
 1007149:	int3   
 100714a:	jmp    QWORD PTR [rip+0xffffffffffffa2f0]        # 0x1001440
 1007150:	int3   
 1007151:	int3   
 1007152:	int3   
 1007153:	int3   
 1007154:	int3   
 1007155:	int3   
 1007156:	jmp    QWORD PTR [rip+0xffffffffffffa2ec]        # 0x1001448
 100715c:	int3   
 100715d:	int3   
 100715e:	int3   
 100715f:	int3   
 1007160:	int3   
 1007161:	int3   
 1007162:	jmp    QWORD PTR [rip+0xffffffffffffa2e8]        # 0x1001450
 1007168:	int3   
 1007169:	int3   
 100716a:	int3   
 100716b:	int3   
 100716c:	int3   
 100716d:	int3   
 100716e:	int3   
 100716f:	int3   
 1007170:	sub    rsp,0x38
 1007174:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100717d:	call   0x10071a2
 1007182:	nop
 1007183:	jmp    0x100718a
 1007185:	mov    rax,QWORD PTR [rsp+0x50]
 100718a:	add    rsp,0x38
 100718e:	ret    
 100718f:	int3   
 1007190:	int3   
 1007191:	int3   
 1007192:	int3   
 1007193:	int3   
 1007194:	int3   
 1007195:	int3   
 1007196:	jmp    QWORD PTR [rip+0xffffffffffffa2c4]        # 0x1001460
 100719c:	int3   
 100719d:	int3   
 100719e:	int3   
 100719f:	int3   
 10071a0:	int3   
 10071a1:	int3   
 10071a2:	jmp    QWORD PTR [rip+0xffffffffffffa2c0]        # 0x1001468
 10071a8:	int3   
 10071a9:	int3   
 10071aa:	int3   
 10071ab:	int3   
 10071ac:	int3   
 10071ad:	int3   
 10071ae:	int3   
 10071af:	int3   
 10071b0:	mov    QWORD PTR [rsp+0x8],rbx
 10071b5:	push   rbp
 10071b6:	mov    rbp,rsp
 10071b9:	sub    rsp,0x20
 10071bd:	mov    rbx,rcx
 10071c0:	add    rcx,0x28
 10071c4:	call   QWORD PTR [rip+0xffffffffffffa0c6]        # 0x1001290
 10071ca:	mov    rcx,QWORD PTR [rbx+0x50]
 10071ce:	test   rcx,rcx
 10071d1:	je     0x10071dd
 10071d3:	call   0x1006acc
 10071d8:	and    QWORD PTR [rbx+0x50],0x0
 10071dd:	and    DWORD PTR [rbx+0x58],0x0
 10071e1:	and    DWORD PTR [rbx+0x5c],0x0
 10071e5:	mov    rbx,QWORD PTR [rsp+0x30]
 10071ea:	add    rsp,0x20
 10071ee:	pop    rbp
 10071ef:	ret    
 10071f0:	int3   
 10071f1:	int3   
 10071f2:	int3   
 10071f3:	int3   
 10071f4:	int3   
 10071f5:	int3   
 10071f6:	int3   
 10071f7:	int3   
 10071f8:	mov    QWORD PTR [rsp+0x8],rbx
 10071fd:	mov    QWORD PTR [rsp+0x10],rsi
 1007202:	mov    QWORD PTR [rsp+0x18],rdi
 1007207:	push   rbp
 1007208:	mov    rbp,rsp
 100720b:	sub    rsp,0x20
 100720f:	mov    rdi,rcx
 1007212:	add    rcx,0x28
 1007216:	movsxd rbx,edx
 1007219:	call   QWORD PTR [rip+0xffffffffffff9ee1]        # 0x1001100
 100721f:	cmp    ebx,DWORD PTR [rdi+0x58]
 1007222:	jg     0x1007262
 1007224:	test   ebx,ebx
 1007226:	js     0x1007262
 1007228:	cmp    ebx,DWORD PTR [rdi+0x58]
 100722b:	jne    0x1007240
 100722d:	mov    rbx,QWORD PTR [rdi+0x10]
 1007231:	lea    rcx,[rdi+0x28]
 1007235:	call   QWORD PTR [rip+0xffffffffffff9ecd]        # 0x1001108
 100723b:	mov    rax,rbx
 100723e:	jmp    0x100726e
 1007240:	jge    0x100724c
 1007242:	mov    rax,QWORD PTR [rdi+0x50]
 1007246:	mov    rbx,QWORD PTR [rax+rbx*8]
 100724a:	jmp    0x1007231
 100724c:	xor    r9d,r9d
 100724f:	xor    r8d,r8d
 1007252:	mov    ecx,0xc000008c
 1007257:	lea    edx,[r9+0x1]
 100725b:	call   QWORD PTR [rip+0xffffffffffffa067]        # 0x10012c8
 1007261:	int3   
 1007262:	lea    rcx,[rdi+0x28]
 1007266:	call   QWORD PTR [rip+0xffffffffffff9e9c]        # 0x1001108
 100726c:	xor    eax,eax
 100726e:	mov    rbx,QWORD PTR [rsp+0x30]
 1007273:	mov    rsi,QWORD PTR [rsp+0x38]
 1007278:	mov    rdi,QWORD PTR [rsp+0x40]
 100727d:	add    rsp,0x20
 1007281:	pop    rbp
 1007282:	ret    
 1007283:	int3   
 1007284:	int3   
 1007285:	int3   
 1007286:	int3   
 1007287:	int3   
 1007288:	int3   
 1007289:	int3   
 100728a:	int3   
 100728b:	int3   
 100728c:	mov    QWORD PTR [rsp+0x8],rbx
 1007291:	mov    QWORD PTR [rsp+0x10],rdi
 1007296:	push   rbp
 1007297:	mov    rbp,rsp
 100729a:	sub    rsp,0x20
 100729e:	xor    edx,edx
 10072a0:	mov    rdi,rcx
 10072a3:	lea    r8d,[rdx+0x28]
 10072a7:	add    rcx,r8
 10072aa:	call   0x1006d28
 10072af:	and    QWORD PTR [rdi+0x50],0x0
 10072b4:	and    DWORD PTR [rdi+0x58],0x0
 10072b8:	and    DWORD PTR [rdi+0x5c],0x0
 10072bc:	lea    rax,[rip+0xffffffffffff8d3d]        # 0x1000000
 10072c3:	lea    rcx,[rdi+0x28]
 10072c7:	mov    QWORD PTR [rdi+0x10],rax
 10072cb:	mov    QWORD PTR [rdi+0x8],rax
 10072cf:	lea    rax,[rip+0xffffffffffffb5e2]        # 0x10028b8
 10072d6:	xor    edx,edx
 10072d8:	mov    DWORD PTR [rdi],0x60
 10072de:	mov    DWORD PTR [rdi+0x18],0xa00
 10072e5:	mov    QWORD PTR [rdi+0x20],rax
 10072e9:	call   QWORD PTR [rip+0xffffffffffff9f41]        # 0x1001230
 10072ef:	test   eax,eax
 10072f1:	jne    0x100731e
 10072f3:	call   QWORD PTR [rip+0xffffffffffff9d3f]        # 0x1001038
 10072f9:	mov    edx,0x1
 10072fe:	movzx  ecx,ax
 1007301:	or     ecx,0x80070000
 1007307:	test   eax,eax
 1007309:	cmovle ecx,eax
 100730c:	movzx  eax,BYTE PTR [rip+0x9ec1]        # 0x10111d4
 1007313:	test   ecx,ecx
 1007315:	cmovs  eax,edx
 1007318:	mov    BYTE PTR [rip+0x9eb6],al        # 0x10111d4
 100731e:	mov    rbx,QWORD PTR [rsp+0x30]
 1007323:	mov    rax,rdi
 1007326:	mov    rdi,QWORD PTR [rsp+0x38]
 100732b:	add    rsp,0x20
 100732f:	pop    rbp
 1007330:	ret    
 1007331:	int3   
 1007332:	int3   
 1007333:	int3   
 1007334:	int3   
 1007335:	int3   
 1007336:	int3   
 1007337:	int3   
 1007338:	rex push rbp
 100733a:	mov    rbp,rsp
 100733d:	sub    rsp,0x20
 1007341:	mov    rcx,QWORD PTR [rcx+0x8]
 1007345:	mov    r8,rdx
 1007348:	xor    edx,edx
 100734a:	add    rsp,0x20
 100734e:	pop    rbp
 100734f:	rex.W jmp QWORD PTR [rip+0xffffffffffff9eca]        # 0x1001220
 1007356:	int3   
 1007357:	int3   
 1007358:	int3   
 1007359:	int3   
 100735a:	int3   
 100735b:	int3   
 100735c:	test   rdx,rdx
 100735f:	je     0x100737d
 1007361:	push   rbp
 1007362:	mov    rbp,rsp
 1007365:	sub    rsp,0x20
 1007369:	mov    rcx,QWORD PTR [rcx+0x8]
 100736d:	mov    r8,rdx
 1007370:	xor    edx,edx
 1007372:	call   QWORD PTR [rip+0xffffffffffff9ea0]        # 0x1001218
 1007378:	add    rsp,0x20
 100737c:	pop    rbp
 100737d:	ret    
 100737e:	int3   
 100737f:	int3   
 1007380:	int3   
 1007381:	int3   
 1007382:	int3   
 1007383:	int3   
 1007384:	rex push rbp
 1007386:	mov    rbp,rsp
 1007389:	sub    rsp,0x20
 100738d:	test   rdx,rdx
 1007390:	jne    0x10073a0
 1007392:	mov    rax,QWORD PTR [rcx]
 1007395:	mov    rdx,r8
 1007398:	add    rsp,0x20
 100739c:	pop    rbp
 100739d:	rex.W jmp QWORD PTR [rax]
 10073a0:	test   r8,r8
 10073a3:	jne    0x10073b3
 10073a5:	mov    rax,QWORD PTR [rcx]
 10073a8:	call   QWORD PTR [rax+0x8]
 10073ab:	xor    eax,eax
 10073ad:	add    rsp,0x20
 10073b1:	pop    rbp
 10073b2:	ret    
 10073b3:	mov    rcx,QWORD PTR [rcx+0x8]
 10073b7:	mov    r9,r8
 10073ba:	mov    r8,rdx
 10073bd:	xor    edx,edx
 10073bf:	add    rsp,0x20
 10073c3:	pop    rbp
 10073c4:	rex.W jmp QWORD PTR [rip+0xffffffffffff9e45]        # 0x1001210
 10073cb:	int3   
 10073cc:	int3   
 10073cd:	int3   
 10073ce:	int3   
 10073cf:	int3   
 10073d0:	int3   
 10073d1:	int3   
 10073d2:	int3   
 10073d3:	int3   
 10073d4:	rex push rbp
 10073d6:	mov    rbp,rsp
 10073d9:	sub    rsp,0x20
 10073dd:	mov    rcx,QWORD PTR [rcx+0x8]
 10073e1:	mov    r8,rdx
 10073e4:	xor    edx,edx
 10073e6:	add    rsp,0x20
 10073ea:	pop    rbp
 10073eb:	rex.W jmp QWORD PTR [rip+0xffffffffffff9e16]        # 0x1001208
 10073f2:	int3   
 10073f3:	int3   
 10073f4:	int3   
 10073f5:	int3   
 10073f6:	int3   
 10073f7:	int3   
 10073f8:	mov    QWORD PTR [rsp+0x8],rbx
 10073fd:	mov    QWORD PTR [rsp+0x10],rdi
 1007402:	push   rbp
 1007403:	mov    rbp,rsp
 1007406:	sub    rsp,0x20
 100740a:	cmp    BYTE PTR [rcx+0x10],0x0
 100740e:	lea    rax,[rip+0xffffffffffffb4b3]        # 0x10028c8
 1007415:	mov    edi,edx
 1007417:	mov    QWORD PTR [rcx],rax
 100741a:	mov    rbx,rcx
 100741d:	je     0x100742e
 100741f:	mov    rcx,QWORD PTR [rcx+0x8]
 1007423:	test   rcx,rcx
 1007426:	je     0x100742e
 1007428:	call   QWORD PTR [rip+0xffffffffffff9dfa]        # 0x1001228
 100742e:	test   dil,0x1
 1007432:	je     0x100743c
 1007434:	mov    rcx,rbx
 1007437:	call   0x10068bc
 100743c:	mov    rdi,QWORD PTR [rsp+0x38]
 1007441:	mov    rax,rbx
 1007444:	mov    rbx,QWORD PTR [rsp+0x30]
 1007449:	add    rsp,0x20
 100744d:	pop    rbp
 100744e:	ret    
 100744f:	int3   
 1007450:	int3   
 1007451:	int3   
 1007452:	int3   
 1007453:	int3   
 1007454:	int3   
 1007455:	int3   
 1007456:	int3   
 1007457:	int3   
 1007458:	rex push rbp
 100745a:	mov    rbp,rsp
 100745d:	sub    rsp,0x20
 1007461:	mov    rcx,QWORD PTR [rcx+0x8]
 1007465:	mov    rax,QWORD PTR [rcx]
 1007468:	add    rsp,0x20
 100746c:	pop    rbp
 100746d:	rex.W jmp QWORD PTR [rax+0x8]
 1007471:	int3   
 1007472:	int3   
 1007473:	int3   
 1007474:	int3   
 1007475:	int3   
 1007476:	int3   
 1007477:	int3   
 1007478:	rex push rbp
 100747a:	mov    rbp,rsp
 100747d:	lock inc DWORD PTR [rcx+0x20]
 1007481:	lea    rax,[rcx+0x10]
 1007485:	pop    rbp
 1007486:	ret    
 1007487:	int3   
 1007488:	int3   
 1007489:	int3   
 100748a:	int3   
 100748b:	int3   
 100748c:	int3   
 100748d:	int3   
 100748e:	int3   
 100748f:	int3   
 1007490:	rex push rbp
 1007492:	mov    rbp,rsp
 1007495:	mov    rax,rcx
 1007498:	pop    rbp
 1007499:	ret    
 100749a:	int3   
 100749b:	int3   
 100749c:	int3   
 100749d:	int3   
 100749e:	int3   
 100749f:	int3   
 10074a0:	mov    QWORD PTR [rsp+0x8],rbx
 10074a5:	push   rbp
 10074a6:	mov    rbp,rsp
 10074a9:	sub    rsp,0x20
 10074ad:	lea    rax,[rip+0xffffffffffffb43c]        # 0x10028f0
 10074b4:	mov    rbx,rcx
 10074b7:	mov    QWORD PTR [rcx],rax
 10074ba:	test   dl,0x1
 10074bd:	je     0x10074c4
 10074bf:	call   0x10068bc
 10074c4:	mov    rax,rbx
 10074c7:	mov    rbx,QWORD PTR [rsp+0x30]
 10074cc:	add    rsp,0x20
 10074d0:	pop    rbp
 10074d1:	ret    
 10074d2:	int3   
 10074d3:	int3   
 10074d4:	int3   
 10074d5:	int3   
 10074d6:	int3   
 10074d7:	int3   
 10074d8:	mov    QWORD PTR [rsp+0x8],rbx
 10074dd:	mov    QWORD PTR [rsp+0x10],rdi
 10074e2:	push   rbp
 10074e3:	mov    rbp,rsp
 10074e6:	sub    rsp,0x20
 10074ea:	lea    ebx,[rdx+0x8]
 10074ed:	movsxd r9,r8d
 10074f0:	mov    rdi,rcx
 10074f3:	and    ebx,0xfffffff8
 10074f6:	movsxd r8,ebx
 10074f9:	jne    0x1007500
 10074fb:	xor    r8d,r8d
 10074fe:	jmp    0x1007518
 1007500:	xor    edx,edx
 1007502:	or     rax,0xffffffffffffffff
 1007506:	div    r8
 1007509:	cmp    rax,r9
 100750c:	jb     0x1007548
 100750e:	imul   r8,r9
 1007512:	cmp    r8,0xffffffffffffffe7
 1007516:	ja     0x1007548
 1007518:	mov    rcx,QWORD PTR [rcx+0x8]
 100751c:	lea    rdx,[r8+0x18]
 1007520:	mov    rax,QWORD PTR [rcx]
 1007523:	call   QWORD PTR [rax]
 1007525:	mov    r11,rax
 1007528:	test   rax,rax
 100752b:	je     0x1007548
 100752d:	and    DWORD PTR [r11+0x8],0x0
 1007532:	mov    QWORD PTR [rax],rdi
 1007535:	mov    DWORD PTR [rax+0x10],0x1
 100753c:	lea    eax,[rbx-0x1]
 100753f:	mov    DWORD PTR [r11+0xc],eax
 1007543:	mov    rax,r11
 1007546:	jmp    0x100754a
 1007548:	xor    eax,eax
 100754a:	mov    rbx,QWORD PTR [rsp+0x30]
 100754f:	mov    rdi,QWORD PTR [rsp+0x38]
 1007554:	add    rsp,0x20
 1007558:	pop    rbp
 1007559:	ret    
 100755a:	int3   
 100755b:	int3   
 100755c:	int3   
 100755d:	int3   
 100755e:	int3   
 100755f:	int3   
 1007560:	mov    QWORD PTR [rsp+0x8],rbx
 1007565:	push   rbp
 1007566:	mov    rbp,rsp
 1007569:	sub    rsp,0x20
 100756d:	lea    ebx,[r8+0x8]
 1007571:	mov    eax,r9d
 1007574:	and    ebx,0xfffffff8
 1007577:	mov    r8d,ebx
 100757a:	imul   r8,rax
 100757e:	mov    eax,0xffffffff
 1007583:	cmp    r8,rax
 1007586:	ja     0x10075b1
 1007588:	cmp    r8d,0xffffffe7
 100758c:	ja     0x10075b1
 100758e:	mov    rcx,QWORD PTR [rcx+0x8]
 1007592:	add    r8d,0x18
 1007596:	mov    r9,QWORD PTR [rcx]
 1007599:	call   QWORD PTR [r9+0x10]
 100759d:	mov    r11,rax
 10075a0:	test   rax,rax
 10075a3:	je     0x10075b1
 10075a5:	lea    eax,[rbx-0x1]
 10075a8:	mov    DWORD PTR [r11+0xc],eax
 10075ac:	mov    rax,r11
 10075af:	jmp    0x10075b3
 10075b1:	xor    eax,eax
 10075b3:	mov    rbx,QWORD PTR [rsp+0x30]
 10075b8:	add    rsp,0x20
 10075bc:	pop    rbp
 10075bd:	ret    
 10075be:	int3   
 10075bf:	int3   
 10075c0:	int3   
 10075c1:	int3   
 10075c2:	int3   
 10075c3:	int3   
 10075c4:	int3   
 10075c5:	int3   
 10075c6:	int3   
 10075c7:	int3   
 10075c8:	int3   
 10075c9:	int3   
 10075ca:	int3   
 10075cb:	int3   
 10075cc:	int3   
 10075cd:	int3   
 10075ce:	int3   
 10075cf:	int3   
 10075d0:	rex push rbx
 10075d2:	sub    rsp,0x20
 10075d6:	mov    rbx,rcx
 10075d9:	call   QWORD PTR [rip+0xffffffffffff9bf1]        # 0x10011d0
 10075df:	mov    rcx,rbx
 10075e2:	movzx  edx,ax
 10075e5:	add    rsp,0x20
 10075e9:	pop    rbx
 10075ea:	jmp    0x1007680
 10075ef:	int3   
 10075f0:	int3   
 10075f1:	int3   
 10075f2:	int3   
 10075f3:	int3   
 10075f4:	int3   
 10075f5:	int3   
 10075f6:	int3   
 10075f7:	int3   
 10075f8:	int3   
 10075f9:	int3   
 10075fa:	int3   
 10075fb:	int3   
 10075fc:	int3   
 10075fd:	int3   
 10075fe:	int3   
 10075ff:	int3   
 1007600:	mov    QWORD PTR [rsp+0x18],rbx
 1007605:	push   rdi
 1007606:	sub    rsp,0x250
 100760d:	mov    rax,QWORD PTR [rip+0x9b4c]        # 0x1011160
 1007614:	xor    rax,rsp
 1007617:	mov    QWORD PTR [rsp+0x240],rax
 100761f:	mov    rbx,rdx
 1007622:	mov    rdi,rcx
 1007625:	call   QWORD PTR [rip+0xffffffffffff9ba5]        # 0x10011d0
 100762b:	lea    r8,[rsp+0x30]
 1007630:	mov    r9d,0x105
 1007636:	mov    rcx,rdi
 1007639:	movzx  edx,ax
 100763c:	mov    QWORD PTR [rsp+0x20],rbx
 1007641:	call   0x1008000
 1007646:	test   al,al
 1007648:	jne    0x100764e
 100764a:	xor    eax,eax
 100764c:	jmp    0x1007659
 100764e:	lea    rcx,[rsp+0x30]
 1007653:	call   QWORD PTR [rip+0xffffffffffff9ab7]        # 0x1001110
 1007659:	mov    rcx,QWORD PTR [rsp+0x240]
 1007661:	xor    rcx,rsp
 1007664:	call   0x1006ba0
 1007669:	mov    rbx,QWORD PTR [rsp+0x270]
 1007671:	add    rsp,0x250
 1007678:	pop    rdi
 1007679:	ret    
 100767a:	int3   
 100767b:	int3   
 100767c:	int3   
 100767d:	int3   
 100767e:	int3   
 100767f:	int3   
 1007680:	rex push rbp
 1007682:	push   rsi
 1007683:	push   r12
 1007685:	push   r14
 1007687:	lea    rbp,[rsp-0xf58]
 100768f:	mov    eax,0x1058
 1007694:	call   0x100c260
 1007699:	sub    rsp,rax
 100769c:	mov    rax,QWORD PTR [rip+0x9abd]        # 0x1011160
 10076a3:	xor    rax,rsp
 10076a6:	mov    QWORD PTR [rbp+0xf40],rax
 10076ad:	movzx  esi,dx
 10076b0:	xor    r12d,r12d
 10076b3:	mov    WORD PTR [rsp+0x30],r12w
 10076b9:	mov    eax,esi
 10076bb:	cmp    esi,0xc04
 10076c1:	je     0x10076d1
 10076c3:	cmp    eax,0x1004
 10076c8:	jne    0x10076d6
 10076ca:	mov    esi,0x804
 10076cf:	jmp    0x10076d6
 10076d1:	mov    esi,0x404
 10076d6:	mov    QWORD PTR [rsp+0x1088],rbx
 10076de:	mov    r14d,0x105
 10076e4:	mov    QWORD PTR [rsp+0x1090],rdi
 10076ec:	lea    r9,[rsp+0x30]
 10076f1:	lea    rdx,[rbp+0xd30]
 10076f8:	mov    r8d,r14d
 10076fb:	mov    QWORD PTR [rsp+0x1098],r13
 1007703:	mov    QWORD PTR [rsp+0x20],r14
 1007708:	mov    QWORD PTR [rsp+0x1050],r15
 1007710:	call   0x1007eb0
 1007715:	test   al,al
 1007717:	je     0x1007e52
 100771d:	lea    rax,[rsp+0x30]
 1007722:	lea    r13,[rip+0xffffffffffffb207]        # 0x1002930
 1007729:	lea    r9,[rbp+0xd30]
 1007730:	lea    rcx,[rbp+0xb20]
 1007737:	movzx  r8d,si
 100773b:	mov    edx,r14d
 100773e:	mov    QWORD PTR [rsp+0x28],r13
 1007743:	mov    QWORD PTR [rsp+0x20],rax
 1007748:	call   0x10085c0
 100774d:	lea    rdx,[rbp+0x3d0]
 1007754:	lea    rcx,[rbp+0xb20]
 100775b:	call   QWORD PTR [rip+0xffffffffffff9a77]        # 0x10011d8
 1007761:	cmp    rax,0xffffffffffffffff
 1007765:	jne    0x1007e3a
 100776b:	mov    rax,r12
 100776e:	xchg   ax,ax
 1007770:	movzx  ecx,WORD PTR [rbp+rax*2+0xd30]
 1007778:	cmp    r12w,cx
 100777c:	je     0x1007791
 100777e:	mov    WORD PTR [rbp+rax*2+0xb20],cx
 1007786:	inc    rax
 1007789:	cmp    rax,0x104
 100778f:	jb     0x1007770
 1007791:	movzx  r15d,WORD PTR [rsp+0x30]
 1007797:	mov    WORD PTR [rbp+rax*2+0xb20],r12w
 10077a0:	mov    edi,0x1
 10077a5:	cmp    r12w,WORD PTR [rbp+rax*2+0xd30]
 10077ae:	jne    0x10079f7
 10077b4:	movzx  r11d,si
 10077b8:	lea    r9,[rbp+0xac0]
 10077bf:	mov    WORD PTR [rbp+0xac0],r12w
 10077c7:	lea    r8,[rbp+0xac2]
 10077ce:	mov    r10d,edi
 10077d1:	mov    eax,0xcccccccd
 10077d6:	add    r8,0x2
 10077da:	mul    r11d
 10077dd:	shr    edx,0x3
 10077e0:	movzx  eax,dx
 10077e3:	shl    ax,0x2
 10077e7:	lea    ecx,[rax+rdx*1]
 10077ea:	add    cx,cx
 10077ed:	sub    r11w,cx
 10077f1:	add    r11w,0x30
 10077f6:	mov    WORD PTR [r8-0x2],r11w
 10077fb:	mov    r11d,edx
 10077fe:	test   edx,edx
 1007800:	je     0x100780b
 1007802:	inc    r10d
 1007805:	cmp    r10d,0x29
 1007809:	jb     0x10077d1
 100780b:	lea    rax,[rbp+0xac0]
 1007812:	sub    r8,0x2
 1007816:	cmp    rax,r8
 1007819:	jae    0x100783e
 100781b:	nop    DWORD PTR [rax+rax*1+0x0]
 1007820:	movzx  eax,WORD PTR [r8]
 1007824:	movzx  ecx,WORD PTR [r9]
 1007828:	sub    r8,0x2
 100782c:	mov    WORD PTR [r9],ax
 1007830:	mov    WORD PTR [r8+0x2],cx
 1007835:	add    r9,0x2
 1007839:	cmp    r9,r8
 100783c:	jb     0x1007820
 100783e:	lea    rax,[rbp+0xb20]
 1007845:	mov    rbx,r12
 1007848:	cmp    r12w,WORD PTR [rbp+0xb20]
 1007850:	je     0x100785f
 1007852:	add    rax,0x2
 1007856:	inc    rbx
 1007859:	cmp    r12w,WORD PTR [rax]
 100785d:	jne    0x1007852
 100785f:	mov    rax,rbx
 1007862:	test   rbx,rbx
 1007865:	je     0x100786b
 1007867:	lea    rax,[rbx-0x1]
 100786b:	movzx  ecx,WORD PTR [rbp+rax*2+0xb20]
 1007873:	mov    edx,0x5c
 1007878:	lea    r11d,[rdx-0x2d]
 100787c:	cmp    dx,cx
 100787f:	je     0x10078c7
 1007881:	cmp    r11w,cx
 1007885:	je     0x10078c7
 1007887:	movzx  eax,WORD PTR [rbp+0xac0]
 100788e:	cmp    dx,ax
 1007891:	je     0x10078c7
 1007893:	cmp    r11w,ax
 1007897:	je     0x10078c7
 1007899:	lea    rcx,[rbp+0xb20]
 10078a0:	mov    rdx,r14
 10078a3:	lea    r8,[rip+0xffffffffffffb0b2]        # 0x100295c
 10078aa:	lea    rcx,[rcx+rbx*2]
 10078ae:	sub    rdx,rbx
 10078b1:	call   0x1008720
 10078b6:	test   al,al
 10078b8:	je     0x1007a02
 10078be:	inc    rbx
 10078c1:	mov    r11d,0x2f
 10078c7:	lea    r10,[rbp+0xb20]
 10078ce:	mov    r9,r14
 10078d1:	lea    r10,[r10+rbx*2]
 10078d5:	sub    r9,rbx
 10078d8:	je     0x10079f7
 10078de:	mov    rcx,r12
 10078e1:	dec    r9
 10078e4:	je     0x100790d
 10078e6:	lea    r8,[rbp+0xac0]
 10078ed:	mov    rax,r10
 10078f0:	sub    r8,r10
 10078f3:	movzx  edx,WORD PTR [r8+rax*1]
 10078f8:	cmp    r12w,dx
 10078fc:	je     0x100790d
 10078fe:	inc    rcx
 1007901:	mov    WORD PTR [rax],dx
 1007904:	add    rax,0x2
 1007908:	cmp    rcx,r9
 100790b:	jb     0x10078f3
 100790d:	mov    WORD PTR [r10+rcx*2],r12w
 1007912:	cmp    r12w,WORD PTR [rbp+rcx*2+0xac0]
 100791b:	jne    0x10079f7
 1007921:	lea    rax,[rbp+0xb20]
 1007928:	mov    rbx,r12
 100792b:	cmp    r12w,WORD PTR [rbp+0xb20]
 1007933:	je     0x100794d
 1007935:	data16 data16 nop WORD PTR [rax+rax*1+0x0]
 1007940:	add    rax,0x2
 1007944:	inc    rbx
 1007947:	cmp    r12w,WORD PTR [rax]
 100794b:	jne    0x1007940
 100794d:	mov    rax,rbx
 1007950:	test   rbx,rbx
 1007953:	je     0x1007959
 1007955:	lea    rax,[rbx-0x1]
 1007959:	movzx  ecx,WORD PTR [rbp+rax*2+0xb20]
 1007961:	mov    eax,0x5c
 1007966:	cmp    ax,cx
 1007969:	je     0x10079a1
 100796b:	cmp    r11w,cx
 100796f:	je     0x10079a1
 1007971:	cmp    ax,r15w
 1007975:	je     0x10079a1
 1007977:	cmp    r11w,r15w
 100797b:	je     0x10079a1
 100797d:	lea    rcx,[rbp+0xb20]
 1007984:	mov    rdx,r14
 1007987:	lea    r8,[rip+0xffffffffffffafce]        # 0x100295c
 100798e:	lea    rcx,[rcx+rbx*2]
 1007992:	sub    rdx,rbx
 1007995:	call   0x1008720
 100799a:	test   al,al
 100799c:	je     0x1007a02
 100799e:	inc    rbx
 10079a1:	lea    r10,[rbp+0xb20]
 10079a8:	mov    r9,r14
 10079ab:	lea    r10,[r10+rbx*2]
 10079af:	sub    r9,rbx
 10079b2:	je     0x10079f7
 10079b4:	mov    rcx,r12
 10079b7:	dec    r9
 10079ba:	je     0x10079ea
 10079bc:	lea    r8,[rsp+0x30]
 10079c1:	mov    rax,r10
 10079c4:	sub    r8,r10
 10079c7:	nop    WORD PTR [rax+rax*1+0x0]
 10079d0:	movzx  edx,WORD PTR [r8+rax*1]
 10079d5:	cmp    r12w,dx
 10079d9:	je     0x10079ea
 10079db:	inc    rcx
 10079de:	mov    WORD PTR [rax],dx
 10079e1:	add    rax,0x2
 10079e5:	cmp    rcx,r9
 10079e8:	jb     0x10079d0
 10079ea:	mov    WORD PTR [r10+rcx*2],r12w
 10079ef:	cmp    r12w,WORD PTR [rsp+rcx*2+0x30]
 10079f5:	je     0x1007a02
 10079f7:	mov    ecx,0x7a
 10079fc:	call   QWORD PTR [rip+0xffffffffffff97f6]        # 0x10011f8
 1007a02:	lea    rdx,[rbp+0x870]
 1007a09:	lea    rcx,[rbp+0xb20]
 1007a10:	call   QWORD PTR [rip+0xffffffffffff97c2]        # 0x10011d8
 1007a16:	cmp    rax,0xffffffffffffffff
 1007a1a:	jne    0x1007e3a
 1007a20:	mov    ebx,0x409
 1007a25:	cmp    bx,si
 1007a28:	je     0x1007d05
 1007a2e:	lea    rax,[rsp+0x30]
 1007a33:	lea    r9,[rbp+0xd30]
 1007a3a:	lea    rcx,[rbp+0xb20]
 1007a41:	mov    r8d,ebx
 1007a44:	mov    rdx,r14
 1007a47:	mov    QWORD PTR [rsp+0x28],r13
 1007a4c:	mov    QWORD PTR [rsp+0x20],rax
 1007a51:	call   0x10085c0
 1007a56:	lea    rdx,[rbp+0x620]
 1007a5d:	lea    rcx,[rbp+0xb20]
 1007a64:	call   QWORD PTR [rip+0xffffffffffff976e]        # 0x10011d8
 1007a6a:	cmp    rax,0xffffffffffffffff
 1007a6e:	jne    0x1007e3a
 1007a74:	mov    rax,r12
 1007a77:	nop    WORD PTR [rax+rax*1+0x0]
 1007a80:	movzx  ecx,WORD PTR [rbp+rax*2+0xd30]
 1007a88:	cmp    r12w,cx
 1007a8c:	je     0x1007aa1
 1007a8e:	mov    WORD PTR [rbp+rax*2+0xb20],cx
 1007a96:	inc    rax
 1007a99:	cmp    rax,0x104
 1007a9f:	jb     0x1007a80
 1007aa1:	mov    WORD PTR [rbp+rax*2+0xb20],r12w
 1007aaa:	cmp    r12w,WORD PTR [rbp+rax*2+0xd30]
 1007ab3:	jne    0x1007cdc
 1007ab9:	lea    r9,[rbp+0xac0]
 1007ac0:	mov    WORD PTR [rbp+0xac0],r12w
 1007ac8:	lea    r8,[rbp+0xac2]
 1007acf:	nop
 1007ad0:	mov    eax,0xcccccccd
 1007ad5:	add    r8,0x2
 1007ad9:	mul    ebx
 1007adb:	shr    edx,0x3
 1007ade:	movzx  eax,dx
 1007ae1:	shl    ax,0x2
 1007ae5:	lea    ecx,[rax+rdx*1]
 1007ae8:	add    cx,cx
 1007aeb:	sub    bx,cx
 1007aee:	add    bx,0x30
 1007af2:	mov    WORD PTR [r8-0x2],bx
 1007af7:	mov    ebx,edx
 1007af9:	test   edx,edx
 1007afb:	je     0x1007b04
 1007afd:	inc    edi
 1007aff:	cmp    edi,0x29
 1007b02:	jb     0x1007ad0
 1007b04:	lea    rax,[rbp+0xac0]
 1007b0b:	sub    r8,0x2
 1007b0f:	cmp    rax,r8
 1007b12:	jae    0x1007b3e
 1007b14:	data16 data16 data16 nop WORD PTR [rax+rax*1+0x0]
 1007b20:	movzx  eax,WORD PTR [r8]
 1007b24:	movzx  ecx,WORD PTR [r9]
 1007b28:	sub    r8,0x2
 1007b2c:	mov    WORD PTR [r9],ax
 1007b30:	mov    WORD PTR [r8+0x2],cx
 1007b35:	add    r9,0x2
 1007b39:	cmp    r9,r8
 1007b3c:	jb     0x1007b20
 1007b3e:	lea    rax,[rbp+0xb20]
 1007b45:	mov    rbx,r12
 1007b48:	cmp    r12w,WORD PTR [rbp+0xb20]
 1007b50:	je     0x1007b5f
 1007b52:	add    rax,0x2
 1007b56:	inc    rbx
 1007b59:	cmp    r12w,WORD PTR [rax]
 1007b5d:	jne    0x1007b52
 1007b5f:	mov    rax,rbx
 1007b62:	test   rbx,rbx
 1007b65:	je     0x1007b6b
 1007b67:	lea    rax,[rbx-0x1]
 1007b6b:	movzx  ecx,WORD PTR [rbp+rax*2+0xb20]
 1007b73:	mov    edi,0x5c
 1007b78:	lea    r11d,[rdi-0x2d]
 1007b7c:	cmp    di,cx
 1007b7f:	je     0x1007bc5
 1007b81:	cmp    r11w,cx
 1007b85:	je     0x1007bc5
 1007b87:	movzx  eax,WORD PTR [rbp+0xac0]
 1007b8e:	cmp    di,ax
 1007b91:	je     0x1007bc5
 1007b93:	cmp    r11w,ax
 1007b97:	je     0x1007bc5
 1007b99:	lea    rcx,[rbp+0xb20]
 1007ba0:	mov    rdx,r14
 1007ba3:	lea    r8,[rip+0xffffffffffffadb2]        # 0x100295c
 1007baa:	lea    rcx,[rcx+rbx*2]
 1007bae:	sub    rdx,rbx
 1007bb1:	call   0x1008720
 1007bb6:	test   al,al
 1007bb8:	je     0x1007ce7
 1007bbe:	inc    rbx
 1007bc1:	lea    r11d,[rdi-0x2d]
 1007bc5:	lea    r10,[rbp+0xb20]
 1007bcc:	mov    r9,r14
 1007bcf:	lea    r10,[r10+rbx*2]
 1007bd3:	sub    r9,rbx
 1007bd6:	je     0x1007cdc
 1007bdc:	mov    rcx,r12
 1007bdf:	dec    r9
 1007be2:	je     0x1007c0b
 1007be4:	lea    r8,[rbp+0xac0]
 1007beb:	mov    rax,r10
 1007bee:	sub    r8,r10
 1007bf1:	movzx  edx,WORD PTR [r8+rax*1]
 1007bf6:	cmp    r12w,dx
 1007bfa:	je     0x1007c0b
 1007bfc:	inc    rcx
 1007bff:	mov    WORD PTR [rax],dx
 1007c02:	add    rax,0x2
 1007c06:	cmp    rcx,r9
 1007c09:	jb     0x1007bf1
 1007c0b:	mov    WORD PTR [r10+rcx*2],r12w
 1007c10:	cmp    r12w,WORD PTR [rbp+rcx*2+0xac0]
 1007c19:	jne    0x1007cdc
 1007c1f:	lea    rax,[rbp+0xb20]
 1007c26:	mov    rbx,r12
 1007c29:	cmp    r12w,WORD PTR [rbp+0xb20]
 1007c31:	je     0x1007c40
 1007c33:	add    rax,0x2
 1007c37:	inc    rbx
 1007c3a:	cmp    r12w,WORD PTR [rax]
 1007c3e:	jne    0x1007c33
 1007c40:	mov    rax,rbx
 1007c43:	test   rbx,rbx
 1007c46:	je     0x1007c4c
 1007c48:	lea    rax,[rbx-0x1]
 1007c4c:	movzx  ecx,WORD PTR [rbp+rax*2+0xb20]
 1007c54:	cmp    di,cx
 1007c57:	je     0x1007c8f
 1007c59:	cmp    r11w,cx
 1007c5d:	je     0x1007c8f
 1007c5f:	cmp    di,r15w
 1007c63:	je     0x1007c8f
 1007c65:	cmp    r11w,r15w
 1007c69:	je     0x1007c8f
 1007c6b:	lea    rcx,[rbp+0xb20]
 1007c72:	mov    rdx,r14
 1007c75:	lea    r8,[rip+0xfffffffffffface0]        # 0x100295c
 1007c7c:	lea    rcx,[rcx+rbx*2]
 1007c80:	sub    rdx,rbx
 1007c83:	call   0x1008720
 1007c88:	test   al,al
 1007c8a:	je     0x1007ce7
 1007c8c:	inc    rbx
 1007c8f:	lea    r10,[rbp+0xb20]
 1007c96:	mov    r9,r14
 1007c99:	lea    r10,[r10+rbx*2]
 1007c9d:	sub    r9,rbx
 1007ca0:	je     0x1007cdc
 1007ca2:	mov    rcx,r12
 1007ca5:	dec    r9
 1007ca8:	je     0x1007ccf
 1007caa:	lea    r8,[rsp+0x30]
 1007caf:	mov    rax,r10
 1007cb2:	sub    r8,r10
 1007cb5:	movzx  edx,WORD PTR [r8+rax*1]
 1007cba:	cmp    r12w,dx
 1007cbe:	je     0x1007ccf
 1007cc0:	inc    rcx
 1007cc3:	mov    WORD PTR [rax],dx
 1007cc6:	add    rax,0x2
 1007cca:	cmp    rcx,r9
 1007ccd:	jb     0x1007cb5
 1007ccf:	mov    WORD PTR [r10+rcx*2],r12w
 1007cd4:	cmp    r12w,WORD PTR [rsp+rcx*2+0x30]
 1007cda:	je     0x1007ce7
 1007cdc:	mov    ecx,0x7a
 1007ce1:	call   QWORD PTR [rip+0xffffffffffff9511]        # 0x10011f8
 1007ce7:	lea    rdx,[rbp+0x180]
 1007cee:	lea    rcx,[rbp+0xb20]
 1007cf5:	call   QWORD PTR [rip+0xffffffffffff94dd]        # 0x10011d8
 1007cfb:	cmp    rax,0xffffffffffffffff
 1007cff:	jne    0x1007e3a
 1007d05:	mov    rax,r12
 1007d08:	nop    DWORD PTR [rax+rax*1+0x0]
 1007d10:	movzx  edx,WORD PTR [rbp+rax*2+0xd30]
 1007d18:	cmp    r12w,dx
 1007d1c:	je     0x1007d31
 1007d1e:	mov    WORD PTR [rbp+rax*2+0xb20],dx
 1007d26:	inc    rax
 1007d29:	cmp    rax,0x104
 1007d2f:	jb     0x1007d10
 1007d31:	mov    WORD PTR [rbp+rax*2+0xb20],r12w
 1007d3a:	cmp    r12w,WORD PTR [rbp+rax*2+0xd30]
 1007d43:	jne    0x1007e17
 1007d49:	lea    rax,[rbp+0xb20]
 1007d50:	mov    rbx,r12
 1007d53:	cmp    r12w,WORD PTR [rbp+0xb20]
 1007d5b:	je     0x1007d6d
 1007d5d:	nop    DWORD PTR [rax]
 1007d60:	add    rax,0x2
 1007d64:	inc    rbx
 1007d67:	cmp    r12w,WORD PTR [rax]
 1007d6b:	jne    0x1007d60
 1007d6d:	mov    rax,rbx
 1007d70:	test   rbx,rbx
 1007d73:	je     0x1007d79
 1007d75:	lea    rax,[rbx-0x1]
 1007d79:	movzx  ecx,WORD PTR [rbp+rax*2+0xb20]
 1007d81:	mov    edx,0x5c
 1007d86:	cmp    dx,cx
 1007d89:	je     0x1007dc5
 1007d8b:	mov    eax,0x2f
 1007d90:	cmp    ax,cx
 1007d93:	je     0x1007dc5
 1007d95:	cmp    dx,r15w
 1007d99:	je     0x1007dc5
 1007d9b:	cmp    ax,r15w
 1007d9f:	je     0x1007dc5
 1007da1:	lea    rcx,[rbp+0xb20]
 1007da8:	mov    rdx,r14
 1007dab:	lea    r8,[rip+0xffffffffffffabaa]        # 0x100295c
 1007db2:	lea    rcx,[rcx+rbx*2]
 1007db6:	sub    rdx,rbx
 1007db9:	call   0x1008720
 1007dbe:	test   al,al
 1007dc0:	je     0x1007e22
 1007dc2:	inc    rbx
 1007dc5:	lea    r10,[rbp+0xb20]
 1007dcc:	lea    r10,[r10+rbx*2]
 1007dd0:	sub    r14,rbx
 1007dd3:	je     0x1007e17
 1007dd5:	lea    r9,[r14-0x1]
 1007dd9:	mov    rcx,r12
 1007ddc:	test   r9,r9
 1007ddf:	je     0x1007e0a
 1007de1:	lea    r8,[rsp+0x30]
 1007de6:	mov    rax,r10
 1007de9:	sub    r8,r10
 1007dec:	nop    DWORD PTR [rax+0x0]
 1007df0:	movzx  edx,WORD PTR [r8+rax*1]
 1007df5:	cmp    r12w,dx
 1007df9:	je     0x1007e0a
 1007dfb:	inc    rcx
 1007dfe:	mov    WORD PTR [rax],dx
 1007e01:	add    rax,0x2
 1007e05:	cmp    rcx,r9
 1007e08:	jb     0x1007df0
 1007e0a:	mov    WORD PTR [r10+rcx*2],r12w
 1007e0f:	cmp    r12w,WORD PTR [rsp+rcx*2+0x30]
 1007e15:	je     0x1007e22
 1007e17:	mov    ecx,0x7a
 1007e1c:	call   QWORD PTR [rip+0xffffffffffff93d6]        # 0x10011f8
 1007e22:	lea    rdx,[rsp+0x30]
 1007e27:	lea    rcx,[rbp+0xb20]
 1007e2e:	call   QWORD PTR [rip+0xffffffffffff93a4]        # 0x10011d8
 1007e34:	cmp    rax,0xffffffffffffffff
 1007e38:	je     0x1007e52
 1007e3a:	mov    rcx,rax
 1007e3d:	call   QWORD PTR [rip+0xffffffffffff93ad]        # 0x10011f0
 1007e43:	lea    rcx,[rbp+0xb20]
 1007e4a:	call   QWORD PTR [rip+0xffffffffffff92c0]        # 0x1001110
 1007e50:	jmp    0x1007e54
 1007e52:	xor    eax,eax
 1007e54:	mov    r15,QWORD PTR [rsp+0x1050]
 1007e5c:	mov    r13,QWORD PTR [rsp+0x1098]
 1007e64:	mov    rdi,QWORD PTR [rsp+0x1090]
 1007e6c:	mov    rbx,QWORD PTR [rsp+0x1088]
 1007e74:	mov    rcx,QWORD PTR [rbp+0xf40]
 1007e7b:	xor    rcx,rsp
 1007e7e:	call   0x1006ba0
 1007e83:	add    rsp,0x1058
 1007e8a:	pop    r14
 1007e8c:	pop    r12
 1007e8e:	pop    rsi
 1007e8f:	pop    rbp
 1007e90:	ret    
 1007e91:	int3   
 1007e92:	int3   
 1007e93:	int3   
 1007e94:	int3   
 1007e95:	int3   
 1007e96:	int3   
 1007e97:	int3   
 1007e98:	int3   
 1007e99:	int3   
 1007e9a:	int3   
 1007e9b:	int3   
 1007e9c:	int3   
 1007e9d:	int3   
 1007e9e:	int3   
 1007e9f:	int3   
 1007ea0:	rex.W jmp QWORD PTR [rip+0xffffffffffff9231]        # 0x10010d8
 1007ea7:	int3   
 1007ea8:	int3   
 1007ea9:	int3   
 1007eaa:	int3   
 1007eab:	int3   
 1007eac:	int3   
 1007ead:	int3   
 1007eae:	int3   
 1007eaf:	int3   
 1007eb0:	rex push rbx
 1007eb2:	push   rsi
 1007eb3:	push   rdi
 1007eb4:	sub    rsp,0x250
 1007ebb:	mov    rax,QWORD PTR [rip+0x929e]        # 0x1011160
 1007ec2:	xor    rax,rsp
 1007ec5:	mov    QWORD PTR [rsp+0x240],rax
 1007ecd:	mov    rsi,rdx
 1007ed0:	mov    rdi,r8
 1007ed3:	lea    rdx,[rsp+0x30]
 1007ed8:	mov    r8d,0x105
 1007ede:	mov    rbx,r9
 1007ee1:	call   QWORD PTR [rip+0xffffffffffff9301]        # 0x10011e8
 1007ee7:	test   eax,eax
 1007ee9:	je     0x1007f8e
 1007eef:	lea    r9,[rsp+0x20]
 1007ef4:	lea    rcx,[rsp+0x30]
 1007ef9:	mov    r8,rsi
 1007efc:	mov    edx,edi
 1007efe:	call   QWORD PTR [rip+0xffffffffffff92dc]        # 0x10011e0
 1007f04:	test   eax,eax
 1007f06:	je     0x1007f8e
 1007f0c:	mov    eax,eax
 1007f0e:	cmp    rax,rdi
 1007f11:	ja     0x1007f8e
 1007f13:	mov    rdi,QWORD PTR [rsp+0x290]
 1007f1b:	xor    esi,esi
 1007f1d:	cmp    si,WORD PTR [rbx]
 1007f20:	jne    0x1007f36
 1007f22:	mov    r8,QWORD PTR [rsp+0x20]
 1007f27:	mov    rdx,rdi
 1007f2a:	mov    rcx,rbx
 1007f2d:	call   0x1008720
 1007f32:	test   al,al
 1007f34:	je     0x1007f8e
 1007f36:	mov    rax,QWORD PTR [rsp+0x20]
 1007f3b:	mov    rcx,rsi
 1007f3e:	mov    WORD PTR [rax],si
 1007f41:	mov    rax,rbx
 1007f44:	cmp    si,WORD PTR [rbx]
 1007f47:	je     0x1007f5c
 1007f49:	nop    DWORD PTR [rax+0x0]
 1007f50:	add    rax,0x2
 1007f54:	inc    rcx
 1007f57:	cmp    si,WORD PTR [rax]
 1007f5a:	jne    0x1007f50
 1007f5c:	mov    rax,rcx
 1007f5f:	mov    edx,0x2e
 1007f64:	test   rax,rax
 1007f67:	je     0x1007f72
 1007f69:	dec    rax
 1007f6c:	cmp    dx,WORD PTR [rbx+rax*2]
 1007f70:	jne    0x1007f64
 1007f72:	cmp    dx,WORD PTR [rbx+rax*2]
 1007f76:	cmovne rax,rcx
 1007f7a:	lea    r10,[rbx+rax*2]
 1007f7e:	sub    rdi,rax
 1007f81:	jne    0x1007fab
 1007f83:	mov    ecx,0x7a
 1007f88:	call   QWORD PTR [rip+0xffffffffffff926a]        # 0x10011f8
 1007f8e:	xor    al,al
 1007f90:	mov    rcx,QWORD PTR [rsp+0x240]
 1007f98:	xor    rcx,rsp
 1007f9b:	call   0x1006ba0
 1007fa0:	add    rsp,0x250
 1007fa7:	pop    rdi
 1007fa8:	pop    rsi
 1007fa9:	pop    rbx
 1007faa:	ret    
 1007fab:	lea    r9,[rdi-0x1]
 1007faf:	mov    rcx,rsi
 1007fb2:	lea    r11,[rip+0xffffffffffffa967]        # 0x1002920
 1007fb9:	test   r9,r9
 1007fbc:	je     0x1007fe9
 1007fbe:	mov    r8,r11
 1007fc1:	mov    rax,r10
 1007fc4:	sub    r8,r10
 1007fc7:	nop    WORD PTR [rax+rax*1+0x0]
 1007fd0:	movzx  edx,WORD PTR [r8+rax*1]
 1007fd5:	cmp    si,dx
 1007fd8:	je     0x1007fe9
 1007fda:	inc    rcx
 1007fdd:	mov    WORD PTR [rax],dx
 1007fe0:	add    rax,0x2
 1007fe4:	cmp    rcx,r9
 1007fe7:	jb     0x1007fd0
 1007fe9:	mov    WORD PTR [r10+rcx*2],si
 1007fee:	cmp    si,WORD PTR [r11+rcx*2]
 1007ff3:	jne    0x1007f83
 1007ff5:	mov    al,0x1
 1007ff7:	jmp    0x1007f90
 1007ff9:	int3   
 1007ffa:	int3   
 1007ffb:	int3   
 1007ffc:	int3   
 1007ffd:	int3   
 1007ffe:	int3   
 1007fff:	int3   
 1008000:	rex push rbp
 1008002:	push   rdi
 1008003:	push   r12
 1008005:	push   r14
 1008007:	push   r15
 1008009:	lea    rbp,[rsp-0x3d0]
 1008011:	sub    rsp,0x4d0
 1008018:	mov    rax,QWORD PTR [rip+0x9141]        # 0x1011160
 100801f:	xor    rax,rsp
 1008022:	mov    QWORD PTR [rbp+0x3b0],rax
 1008029:	xor    r12d,r12d
 100802c:	mov    r14,r9
 100802f:	mov    r9,QWORD PTR [rbp+0x420]
 1008036:	mov    rdi,r8
 1008039:	movzx  r15d,dx
 100803d:	mov    r10,rcx
 1008040:	mov    WORD PTR [rbp-0x70],r12w
 1008045:	test   r9,r9
 1008048:	je     0x100809f
 100804a:	lea    rax,[rbp-0x70]
 100804e:	mov    r8,r9
 1008051:	mov    ecx,r12d
 1008054:	sub    r8,rax
 1008057:	nop    WORD PTR [rax+rax*1+0x0]
 1008060:	lea    rax,[r8+rcx*2]
 1008064:	movzx  edx,WORD PTR [rbp+rax*1-0x70]
 1008069:	cmp    r12w,dx
 100806d:	je     0x1008080
 100806f:	mov    WORD PTR [rbp+rcx*2-0x70],dx
 1008074:	inc    rcx
 1008077:	cmp    rcx,0x104
 100807e:	jb     0x1008060
 1008080:	mov    WORD PTR [rbp+rcx*2-0x70],r12w
 1008086:	cmp    r12w,WORD PTR [r9+rcx*2]
 100808b:	je     0x100809f
 100808d:	mov    ecx,0x7a
 1008092:	call   QWORD PTR [rip+0xffffffffffff9160]        # 0x10011f8
 1008098:	xor    al,al
 100809a:	jmp    0x100845e
 100809f:	movzx  eax,r15w
 10080a3:	cmp    eax,0xc04
 10080a8:	je     0x10080b9
 10080aa:	cmp    eax,0x1004
 10080af:	jne    0x10080bf
 10080b1:	mov    r15d,0x804
 10080b7:	jmp    0x10080bf
 10080b9:	mov    r15d,0x404
 10080bf:	lea    r9,[rbp-0x70]
 10080c3:	lea    rdx,[rbp+0x1a0]
 10080ca:	mov    r8d,0x105
 10080d0:	mov    rcx,r10
 10080d3:	mov    QWORD PTR [rsp+0x20],0x105
 10080dc:	call   0x1007eb0
 10080e1:	test   al,al
 10080e3:	je     0x1008098
 10080e5:	lea    rax,[rbp-0x70]
 10080e9:	mov    QWORD PTR [rsp+0x4c0],r13
 10080f1:	lea    r13,[rip+0xffffffffffffa838]        # 0x1002930
 10080f8:	lea    r9,[rbp+0x1a0]
 10080ff:	movzx  r8d,r15w
 1008103:	mov    rdx,r14
 1008106:	mov    rcx,rdi
 1008109:	mov    QWORD PTR [rsp+0x28],r13
 100810e:	mov    QWORD PTR [rsp+0x20],rax
 1008113:	call   0x10085c0
 1008118:	mov    rcx,rdi
 100811b:	call   0x1008490
 1008120:	test   al,al
 1008122:	je     0x100812b
 1008124:	mov    al,0x1
 1008126:	jmp    0x1008456
 100812b:	mov    QWORD PTR [rsp+0x4c8],rsi
 1008133:	mov    esi,0x1
 1008138:	test   r14,r14
 100813b:	jne    0x100814b
 100813d:	lea    ecx,[rsi+0x79]
 1008140:	call   QWORD PTR [rip+0xffffffffffff90b2]        # 0x10011f8
 1008146:	jmp    0x1008251
 100814b:	lea    r9,[r14-0x1]
 100814f:	mov    rcx,r12
 1008152:	test   r9,r9
 1008155:	je     0x100817e
 1008157:	lea    r8,[rbp+0x1a0]
 100815e:	mov    rax,rdi
 1008161:	sub    r8,rdi
 1008164:	movzx  edx,WORD PTR [r8+rax*1]
 1008169:	cmp    r12w,dx
 100816d:	je     0x100817e
 100816f:	inc    rcx
 1008172:	mov    WORD PTR [rax],dx
 1008175:	add    rax,0x2
 1008179:	cmp    rcx,r9
 100817c:	jb     0x1008164
 100817e:	mov    WORD PTR [rdi+rcx*2],r12w
 1008183:	cmp    r12w,WORD PTR [rbp+rcx*2+0x1a0]
 100818c:	je     0x100819e
 100818e:	mov    ecx,0x7a
 1008193:	call   QWORD PTR [rip+0xffffffffffff905f]        # 0x10011f8
 1008199:	jmp    0x1008251
 100819e:	movzx  r11d,r15w
 10081a2:	lea    r9,[rsp+0x30]
 10081a7:	mov    WORD PTR [rsp+0x30],r12w
 10081ad:	lea    r8,[rsp+0x32]
 10081b2:	mov    r10d,esi
 10081b5:	data16 data16 nop WORD PTR [rax+rax*1+0x0]
 10081c0:	mov    eax,0xcccccccd
 10081c5:	add    r8,0x2
 10081c9:	mul    r11d
 10081cc:	shr    edx,0x3
 10081cf:	movzx  eax,dx
 10081d2:	shl    ax,0x2
 10081d6:	lea    ecx,[rax+rdx*1]
 10081d9:	add    cx,cx
 10081dc:	sub    r11w,cx
 10081e0:	add    r11w,0x30
 10081e5:	mov    WORD PTR [r8-0x2],r11w
 10081ea:	mov    r11d,edx
 10081ed:	test   edx,edx
 10081ef:	je     0x10081fa
 10081f1:	inc    r10d
 10081f4:	cmp    r10d,0x29
 10081f8:	jb     0x10081c0
 10081fa:	lea    rax,[rsp+0x30]
 10081ff:	sub    r8,0x2
 1008203:	cmp    rax,r8
 1008206:	jae    0x100822e
 1008208:	nop    DWORD PTR [rax+rax*1+0x0]
 1008210:	movzx  eax,WORD PTR [r8]
 1008214:	movzx  ecx,WORD PTR [r9]
 1008218:	sub    r8,0x2
 100821c:	mov    WORD PTR [r9],ax
 1008220:	mov    WORD PTR [r8+0x2],cx
 1008225:	add    r9,0x2
 1008229:	cmp    r9,r8
 100822c:	jb     0x1008210
 100822e:	lea    r8,[rsp+0x30]
 1008233:	mov    rdx,r14
 1008236:	mov    rcx,rdi
 1008239:	call   0x1008500
 100823e:	test   al,al
 1008240:	je     0x1008251
 1008242:	lea    r8,[rbp-0x70]
 1008246:	mov    rdx,r14
 1008249:	mov    rcx,rdi
 100824c:	call   0x1008500
 1008251:	mov    rcx,rdi
 1008254:	call   0x1008490
 1008259:	test   al,al
 100825b:	je     0x1008266
 100825d:	movzx  eax,sil
 1008261:	jmp    0x100844e
 1008266:	mov    QWORD PTR [rsp+0x508],rbx
 100826e:	mov    ebx,0x409
 1008273:	cmp    bx,r15w
 1008277:	je     0x10083d1
 100827d:	lea    rax,[rbp-0x70]
 1008281:	lea    r9,[rbp+0x1a0]
 1008288:	mov    r8d,ebx
 100828b:	mov    rdx,r14
 100828e:	mov    rcx,rdi
 1008291:	mov    QWORD PTR [rsp+0x28],r13
 1008296:	mov    QWORD PTR [rsp+0x20],rax
 100829b:	call   0x10085c0
 10082a0:	mov    rcx,rdi
 10082a3:	call   0x1008490
 10082a8:	test   al,al
 10082aa:	je     0x10082b5
 10082ac:	movzx  eax,sil
 10082b0:	jmp    0x1008446
 10082b5:	test   r14,r14
 10082b8:	jne    0x10082c9
 10082ba:	lea    ecx,[r14+0x7a]
 10082be:	call   QWORD PTR [rip+0xffffffffffff8f34]        # 0x10011f8
 10082c4:	jmp    0x10083c1
 10082c9:	lea    r9,[r14-0x1]
 10082cd:	mov    rcx,r12
 10082d0:	test   r9,r9
 10082d3:	je     0x10082fc
 10082d5:	lea    r8,[rbp+0x1a0]
 10082dc:	mov    rax,rdi
 10082df:	sub    r8,rdi
 10082e2:	movzx  edx,WORD PTR [rax+r8*1]
 10082e7:	cmp    r12w,dx
 10082eb:	je     0x10082fc
 10082ed:	inc    rcx
 10082f0:	mov    WORD PTR [rax],dx
 10082f3:	add    rax,0x2
 10082f7:	cmp    rcx,r9
 10082fa:	jb     0x10082e2
 10082fc:	mov    WORD PTR [rdi+rcx*2],r12w
 1008301:	cmp    r12w,WORD PTR [rbp+rcx*2+0x1a0]
 100830a:	je     0x100831c
 100830c:	mov    ecx,0x7a
 1008311:	call   QWORD PTR [rip+0xffffffffffff8ee1]        # 0x10011f8
 1008317:	jmp    0x10083c1
 100831c:	lea    r9,[rsp+0x30]
 1008321:	mov    WORD PTR [rsp+0x30],r12w
 1008327:	lea    r8,[rsp+0x32]
 100832c:	nop    DWORD PTR [rax+0x0]
 1008330:	mov    eax,0xcccccccd
 1008335:	add    r8,0x2
 1008339:	mul    ebx
 100833b:	shr    edx,0x3
 100833e:	movzx  eax,dx
 1008341:	shl    ax,0x2
 1008345:	lea    ecx,[rax+rdx*1]
 1008348:	add    cx,cx
 100834b:	sub    bx,cx
 100834e:	add    bx,0x30
 1008352:	mov    WORD PTR [r8-0x2],bx
 1008357:	mov    ebx,edx
 1008359:	test   edx,edx
 100835b:	je     0x1008364
 100835d:	inc    esi
 100835f:	cmp    esi,0x29
 1008362:	jb     0x1008330
 1008364:	lea    rax,[rsp+0x30]
 1008369:	sub    r8,0x2
 100836d:	cmp    rax,r8
 1008370:	jae    0x100839e
 1008372:	data16 data16 data16 data16 data16 nop WORD PTR [rax+rax*1+0x0]
 1008380:	movzx  eax,WORD PTR [r8]
 1008384:	movzx  ecx,WORD PTR [r9]
 1008388:	sub    r8,0x2
 100838c:	mov    WORD PTR [r9],ax
 1008390:	mov    WORD PTR [r8+0x2],cx
 1008395:	add    r9,0x2
 1008399:	cmp    r9,r8
 100839c:	jb     0x1008380
 100839e:	lea    r8,[rsp+0x30]
 10083a3:	mov    rdx,r14
 10083a6:	mov    rcx,rdi
 10083a9:	call   0x1008500
 10083ae:	test   al,al
 10083b0:	je     0x10083c1
 10083b2:	lea    r8,[rbp-0x70]
 10083b6:	mov    rdx,r14
 10083b9:	mov    rcx,rdi
 10083bc:	call   0x1008500
 10083c1:	mov    rcx,rdi
 10083c4:	call   0x1008490
 10083c9:	test   al,al
 10083cb:	je     0x10083d1
 10083cd:	mov    al,0x1
 10083cf:	jmp    0x1008446
 10083d1:	test   r14,r14
 10083d4:	jne    0x10083e3
 10083d6:	mov    ecx,0x7a
 10083db:	call   QWORD PTR [rip+0xffffffffffff8e17]        # 0x10011f8
 10083e1:	jmp    0x1008439
 10083e3:	lea    r9,[r14-0x1]
 10083e7:	mov    rcx,r12
 10083ea:	test   r9,r9
 10083ed:	je     0x100841a
 10083ef:	lea    r8,[rbp+0x1a0]
 10083f6:	mov    rax,rdi
 10083f9:	sub    r8,rdi
 10083fc:	nop    DWORD PTR [rax+0x0]
 1008400:	movzx  edx,WORD PTR [rax+r8*1]
 1008405:	cmp    r12w,dx
 1008409:	je     0x100841a
 100840b:	inc    rcx
 100840e:	mov    WORD PTR [rax],dx
 1008411:	add    rax,0x2
 1008415:	cmp    rcx,r9
 1008418:	jb     0x1008400
 100841a:	mov    WORD PTR [rdi+rcx*2],r12w
 100841f:	cmp    r12w,WORD PTR [rbp+rcx*2+0x1a0]
 1008428:	jne    0x10083d6
 100842a:	lea    r8,[rbp-0x70]
 100842e:	mov    rdx,r14
 1008431:	mov    rcx,rdi
 1008434:	call   0x1008500
 1008439:	mov    rcx,rdi
 100843c:	call   0x1008490
 1008441:	test   al,al
 1008443:	setne  al
 1008446:	mov    rbx,QWORD PTR [rsp+0x508]
 100844e:	mov    rsi,QWORD PTR [rsp+0x4c8]
 1008456:	mov    r13,QWORD PTR [rsp+0x4c0]
 100845e:	mov    rcx,QWORD PTR [rbp+0x3b0]
 1008465:	xor    rcx,rsp
 1008468:	call   0x1006ba0
 100846d:	add    rsp,0x4d0
 1008474:	pop    r15
 1008476:	pop    r14
 1008478:	pop    r12
 100847a:	pop    rdi
 100847b:	pop    rbp
 100847c:	ret    
 100847d:	int3   
 100847e:	int3   
 100847f:	int3   
 1008480:	int3   
 1008481:	int3   
 1008482:	int3   
 1008483:	int3   
 1008484:	int3   
 1008485:	int3   
 1008486:	int3   
 1008487:	int3   
 1008488:	int3   
 1008489:	int3   
 100848a:	int3   
 100848b:	int3   
 100848c:	int3   
 100848d:	int3   
 100848e:	int3   
 100848f:	int3   
 1008490:	sub    rsp,0x288
 1008497:	mov    rax,QWORD PTR [rip+0x8cc2]        # 0x1011160
 100849e:	xor    rax,rsp
 10084a1:	mov    QWORD PTR [rsp+0x270],rax
 10084a9:	lea    rdx,[rsp+0x20]
 10084ae:	call   QWORD PTR [rip+0xffffffffffff8d24]        # 0x10011d8
 10084b4:	cmp    rax,0xffffffffffffffff
 10084b8:	jne    0x10084d4
 10084ba:	xor    al,al
 10084bc:	mov    rcx,QWORD PTR [rsp+0x270]
 10084c4:	xor    rcx,rsp
 10084c7:	call   0x1006ba0
 10084cc:	add    rsp,0x288
 10084d3:	ret    
 10084d4:	mov    rcx,rax
 10084d7:	call   QWORD PTR [rip+0xffffffffffff8d13]        # 0x10011f0
 10084dd:	mov    al,0x1
 10084df:	mov    rcx,QWORD PTR [rsp+0x270]
 10084e7:	xor    rcx,rsp
 10084ea:	call   0x1006ba0
 10084ef:	add    rsp,0x288
 10084f6:	ret    
 10084f7:	int3   
 10084f8:	int3   
 10084f9:	int3   
 10084fa:	int3   
 10084fb:	int3   
 10084fc:	int3   
 10084fd:	int3   
 10084fe:	int3   
 10084ff:	int3   
 1008500:	mov    QWORD PTR [rsp+0x8],rbx
 1008505:	mov    QWORD PTR [rsp+0x10],rsi
 100850a:	mov    QWORD PTR [rsp+0x18],rdi
 100850f:	push   r14
 1008511:	sub    rsp,0x20
 1008515:	mov    rax,rcx
 1008518:	mov    rdi,rcx
 100851b:	xor    ecx,ecx
 100851d:	mov    r14,r8
 1008520:	mov    rsi,rdx
 1008523:	mov    ebx,ecx
 1008525:	cmp    cx,WORD PTR [rax]
 1008528:	je     0x100853c
 100852a:	nop    WORD PTR [rax+rax*1+0x0]
 1008530:	add    rax,0x2
 1008534:	inc    rbx
 1008537:	cmp    cx,WORD PTR [rax]
 100853a:	jne    0x1008530
 100853c:	mov    rax,rbx
 100853f:	test   rbx,rbx
 1008542:	je     0x1008548
 1008544:	lea    rax,[rbx-0x1]
 1008548:	movzx  ecx,WORD PTR [rdi+rax*2]
 100854c:	mov    r8d,0x5c
 1008552:	cmp    r8w,cx
 1008556:	je     0x100858e
 1008558:	mov    edx,0x2f
 100855d:	cmp    dx,cx
 1008560:	je     0x100858e
 1008562:	movzx  eax,WORD PTR [r14]
 1008566:	cmp    r8w,ax
 100856a:	je     0x100858e
 100856c:	cmp    dx,ax
 100856f:	je     0x100858e
 1008571:	mov    rdx,rsi
 1008574:	lea    rcx,[rdi+rbx*2]
 1008578:	lea    r8,[rip+0xffffffffffffa3dd]        # 0x100295c
 100857f:	sub    rdx,rbx
 1008582:	call   0x1008720
 1008587:	test   al,al
 1008589:	je     0x10085a0
 100858b:	inc    rbx
 100858e:	sub    rsi,rbx
 1008591:	lea    rcx,[rdi+rbx*2]
 1008595:	mov    r8,r14
 1008598:	mov    rdx,rsi
 100859b:	call   0x1008720
 10085a0:	mov    rbx,QWORD PTR [rsp+0x30]
 10085a5:	mov    rsi,QWORD PTR [rsp+0x38]
 10085aa:	mov    rdi,QWORD PTR [rsp+0x40]
 10085af:	add    rsp,0x20
 10085b3:	pop    r14
 10085b5:	ret    
 10085b6:	int3   
 10085b7:	int3   
 10085b8:	int3   
 10085b9:	int3   
 10085ba:	int3   
 10085bb:	int3   
 10085bc:	int3   
 10085bd:	int3   
 10085be:	int3   
 10085bf:	int3   
 10085c0:	rex push rbx
 10085c2:	push   rsi
 10085c3:	push   rdi
 10085c4:	sub    rsp,0x90
 10085cb:	mov    rax,QWORD PTR [rip+0x8b8e]        # 0x1011160
 10085d2:	xor    rax,rsp
 10085d5:	mov    QWORD PTR [rsp+0x80],rax
 10085dd:	movzx  esi,r8w
 10085e1:	mov    r8,r9
 10085e4:	mov    rdi,rdx
 10085e7:	mov    rbx,rcx
 10085ea:	call   0x1008720
 10085ef:	test   al,al
 10085f1:	je     0x10086f4
 10085f7:	mov    rax,QWORD PTR [rsp+0xd8]
 10085ff:	mov    QWORD PTR [rsp+0xc0],rbp
 1008607:	xor    ebp,ebp
 1008609:	test   rax,rax
 100860c:	je     0x100862d
 100860e:	cmp    bp,WORD PTR [rax]
 1008611:	je     0x100862d
 1008613:	lea    r8,[rip+0xffffffffffffa32e]        # 0x1002948
 100861a:	mov    rdx,rdi
 100861d:	mov    rcx,rbx
 1008620:	call   0x1008500
 1008625:	test   al,al
 1008627:	je     0x10086d0
 100862d:	movzx  r11d,si
 1008631:	lea    r9,[rsp+0x20]
 1008636:	mov    WORD PTR [rsp+0x20],bp
 100863b:	lea    rcx,[rsp+0x22]
 1008640:	mov    r10d,0x1
 1008646:	data16 nop WORD PTR [rax+rax*1+0x0]
 1008650:	mov    eax,0xcccccccd
 1008655:	add    rcx,0x2
 1008659:	mul    r11d
 100865c:	mov    r8d,edx
 100865f:	shr    r8d,0x3
 1008663:	movzx  eax,r8w
 1008667:	shl    ax,0x2
 100866b:	lea    edx,[rax+r8*1]
 100866f:	add    dx,dx
 1008672:	sub    r11w,dx
 1008676:	add    r11w,0x30
 100867b:	mov    WORD PTR [rcx-0x2],r11w
 1008680:	mov    r11d,r8d
 1008683:	test   r8d,r8d
 1008686:	je     0x1008691
 1008688:	inc    r10d
 100868b:	cmp    r10d,0x29
 100868f:	jb     0x1008650
 1008691:	lea    rax,[rsp+0x20]
 1008696:	sub    rcx,0x2
 100869a:	cmp    rax,rcx
 100869d:	jae    0x10086bc
 100869f:	nop
 10086a0:	movzx  eax,WORD PTR [rcx]
 10086a3:	movzx  edx,WORD PTR [r9]
 10086a7:	sub    rcx,0x2
 10086ab:	mov    WORD PTR [r9],ax
 10086af:	mov    WORD PTR [rcx+0x2],dx
 10086b3:	add    r9,0x2
 10086b7:	cmp    r9,rcx
 10086ba:	jb     0x10086a0
 10086bc:	lea    r8,[rsp+0x20]
 10086c1:	mov    rdx,rdi
 10086c4:	mov    rcx,rbx
 10086c7:	call   0x1008500
 10086cc:	test   al,al
 10086ce:	jne    0x10086d4
 10086d0:	xor    al,al
 10086d2:	jmp    0x10086ec
 10086d4:	mov    r8,QWORD PTR [rsp+0xd0]
 10086dc:	mov    rdx,rdi
 10086df:	mov    rcx,rbx
 10086e2:	call   0x1008500
 10086e7:	test   al,al
 10086e9:	setne  al
 10086ec:	mov    rbp,QWORD PTR [rsp+0xc0]
 10086f4:	mov    rcx,QWORD PTR [rsp+0x80]
 10086fc:	xor    rcx,rsp
 10086ff:	call   0x1006ba0
 1008704:	add    rsp,0x90
 100870b:	pop    rdi
 100870c:	pop    rsi
 100870d:	pop    rbx
 100870e:	ret    
 100870f:	int3   
 1008710:	int3   
 1008711:	int3   
 1008712:	int3   
 1008713:	int3   
 1008714:	int3   
 1008715:	int3   
 1008716:	int3   
 1008717:	int3   
 1008718:	int3   
 1008719:	int3   
 100871a:	int3   
 100871b:	int3   
 100871c:	int3   
 100871d:	int3   
 100871e:	int3   
 100871f:	int3   
 1008720:	sub    rsp,0x28
 1008724:	mov    r11,r8
 1008727:	mov    r10,rcx
 100872a:	test   rdx,rdx
 100872d:	jne    0x1008741
 100872f:	mov    ecx,0x7a
 1008734:	call   QWORD PTR [rip+0xffffffffffff8abe]        # 0x10011f8
 100873a:	xor    al,al
 100873c:	add    rsp,0x28
 1008740:	ret    
 1008741:	lea    r8,[rdx-0x1]
 1008745:	mov    QWORD PTR [rsp+0x20],rbx
 100874a:	xor    ebx,ebx
 100874c:	mov    ecx,ebx
 100874e:	test   r8,r8
 1008751:	je     0x1008779
 1008753:	mov    r9,r11
 1008756:	mov    rax,r10
 1008759:	sub    r9,r10
 100875c:	nop    DWORD PTR [rax+0x0]
 1008760:	movzx  edx,WORD PTR [r9+rax*1]
 1008765:	cmp    bx,dx
 1008768:	je     0x1008779
 100876a:	inc    rcx
 100876d:	mov    WORD PTR [rax],dx
 1008770:	add    rax,0x2
 1008774:	cmp    rcx,r8
 1008777:	jb     0x1008760
 1008779:	mov    WORD PTR [r10+rcx*2],bx
 100877e:	cmp    bx,WORD PTR [r11+rcx*2]
 1008783:	mov    rbx,QWORD PTR [rsp+0x20]
 1008788:	jne    0x100872f
 100878a:	mov    al,0x1
 100878c:	add    rsp,0x28
 1008790:	ret    
 1008791:	int3   
 1008792:	int3   
 1008793:	int3   
 1008794:	int3   
 1008795:	int3   
 1008796:	int3   
 1008797:	int3   
 1008798:	int3   
 1008799:	int3   
 100879a:	int3   
 100879b:	int3   
 100879c:	int3   
 100879d:	int3   
 100879e:	int3   
 100879f:	int3   
 10087a0:	mov    QWORD PTR [rsp+0x8],rbx
 10087a5:	mov    QWORD PTR [rsp+0x10],rbp
 10087aa:	mov    QWORD PTR [rsp+0x18],rsi
 10087af:	push   rdi
 10087b0:	push   r14
 10087b2:	push   r15
 10087b4:	sub    rsp,0x20
 10087b8:	cmp    BYTE PTR [rip+0x9391],0x0        # 0x1011b50
 10087bf:	mov    r14,r8
 10087c2:	mov    ebp,edx
 10087c4:	mov    rsi,rcx
 10087c7:	jne    0x100880e
 10087c9:	call   QWORD PTR [rip+0xffffffffffff8a01]        # 0x10011d0
 10087cf:	mov    ecx,0x409
 10087d4:	cmp    ax,cx
 10087d7:	jne    0x10087ec
 10087d9:	mov    rbx,rsi
 10087dc:	mov    BYTE PTR [rip+0x936d],0x1        # 0x1011b50
 10087e3:	mov    QWORD PTR [rip+0x935e],rbx        # 0x1011b48
 10087ea:	jmp    0x1008815
 10087ec:	mov    rcx,rsi
 10087ef:	call   0x10075d0
 10087f4:	mov    BYTE PTR [rip+0x9355],0x1        # 0x1011b50
 10087fb:	mov    rbx,rax
 10087fe:	test   rax,rax
 1008801:	cmove  rbx,rsi
 1008805:	mov    QWORD PTR [rip+0x933c],rbx        # 0x1011b48
 100880c:	jmp    0x1008815
 100880e:	mov    rbx,QWORD PTR [rip+0x9333]        # 0x1011b48
 1008815:	xor    ecx,ecx
 1008817:	call   QWORD PTR [rip+0xffffffffffff8c6b]        # 0x1001488
 100881d:	mov    r11d,ebp
 1008820:	mov    r8d,0x6
 1008826:	shr    r11d,0x4
 100882a:	mov    rcx,rbx
 100882d:	inc    r11w
 1008831:	movzx  r15d,r11w
 1008835:	mov    edx,r15d
 1008838:	call   QWORD PTR [rip+0xffffffffffff8852]        # 0x1001090
 100883e:	xor    edi,edi
 1008840:	test   rax,rax
 1008843:	je     0x1008867
 1008845:	mov    r8d,ebp
 1008848:	mov    rdx,rax
 100884b:	mov    rcx,rbx
 100884e:	call   0x1003d90
 1008853:	test   rax,rax
 1008856:	je     0x1008867
 1008858:	movzx  edx,WORD PTR [rax]
 100885b:	lea    rcx,[rax+0x2]
 100885f:	call   QWORD PTR [rip+0xffffffffffff8c1b]        # 0x1001480
 1008865:	jmp    0x100886a
 1008867:	mov    rax,rdi
 100886a:	test   rax,rax
 100886d:	setne  bl
 1008870:	test   bl,bl
 1008872:	jne    0x10088c8
 1008874:	mov    rcx,rax
 1008877:	call   QWORD PTR [rip+0xffffffffffff8c0b]        # 0x1001488
 100887d:	mov    r8d,0x6
 1008883:	mov    rdx,r15
 1008886:	mov    rcx,rsi
 1008889:	call   QWORD PTR [rip+0xffffffffffff8801]        # 0x1001090
 100888f:	test   rax,rax
 1008892:	je     0x10088b6
 1008894:	mov    r8d,ebp
 1008897:	mov    rdx,rax
 100889a:	mov    rcx,rsi
 100889d:	call   0x1003d90
 10088a2:	test   rax,rax
 10088a5:	je     0x10088b6
 10088a7:	movzx  edx,WORD PTR [rax]
 10088aa:	lea    rcx,[rax+0x2]
 10088ae:	call   QWORD PTR [rip+0xffffffffffff8bcc]        # 0x1001480
 10088b4:	jmp    0x10088b9
 10088b6:	mov    rax,rdi
 10088b9:	test   rax,rax
 10088bc:	setne  bl
 10088bf:	test   bl,bl
 10088c1:	jne    0x10088c8
 10088c3:	mov    QWORD PTR [r14],rdi
 10088c6:	jmp    0x10088d1
 10088c8:	mov    rcx,rax
 10088cb:	mov    rax,rdi
 10088ce:	mov    QWORD PTR [r14],rcx
 10088d1:	mov    rcx,rax
 10088d4:	call   QWORD PTR [rip+0xffffffffffff8bae]        # 0x1001488
 10088da:	mov    rbp,QWORD PTR [rsp+0x48]
 10088df:	mov    rsi,QWORD PTR [rsp+0x50]
 10088e4:	test   bl,bl
 10088e6:	mov    rbx,QWORD PTR [rsp+0x40]
 10088eb:	setne  dil
 10088ef:	mov    eax,edi
 10088f1:	add    rsp,0x20
 10088f5:	pop    r15
 10088f7:	pop    r14
 10088f9:	pop    rdi
 10088fa:	ret    
 10088fb:	int3   
 10088fc:	int3   
 10088fd:	int3   
 10088fe:	int3   
 10088ff:	int3   
 1008900:	int3   
 1008901:	int3   
 1008902:	int3   
 1008903:	int3   
 1008904:	int3   
 1008905:	int3   
 1008906:	int3   
 1008907:	int3   
 1008908:	int3   
 1008909:	int3   
 100890a:	int3   
 100890b:	int3   
 100890c:	int3   
 100890d:	int3   
 100890e:	int3   
 100890f:	int3   
 1008910:	rex push rbx
 1008912:	push   rbp
 1008913:	push   rsi
 1008914:	sub    rsp,0x50
 1008918:	xor    ebp,ebp
 100891a:	mov    rbx,rcx
 100891d:	mov    esi,edx
 100891f:	lea    rcx,[rsp+0x30]
 1008924:	lea    r8,[rip+0xffffffffffffa085]        # 0x10029b0
 100892b:	mov    r9d,0x20019
 1008931:	mov    rdx,0xffffffff80000002
 1008938:	mov    QWORD PTR [rsp+0x30],rbp
 100893d:	mov    DWORD PTR [rsp+0x38],ebp
 1008941:	mov    QWORD PTR [rsp+0x40],rbp
 1008946:	call   0x1005d10
 100894b:	test   eax,eax
 100894d:	je     0x10089b9
 100894f:	mov    ecx,esi
 1008951:	test   esi,esi
 1008953:	je     0x100899d
 1008955:	cmp    rcx,0x7fffffff
 100895c:	ja     0x100899d
 100895e:	lea    r8,[rip+0xffffffffffff9fc7]        # 0x100292c
 1008965:	mov    edx,0x7ffffffe
 100896a:	sub    rdx,rcx
 100896d:	sub    r8,rbx
 1008970:	lea    rax,[rdx+rcx*1]
 1008974:	test   rax,rax
 1008977:	je     0x1008991
 1008979:	movzx  eax,WORD PTR [r8+rbx*1]
 100897e:	test   ax,ax
 1008981:	je     0x1008991
 1008983:	mov    WORD PTR [rbx],ax
 1008986:	add    rbx,0x2
 100898a:	dec    rcx
 100898d:	jne    0x1008970
 100898f:	jmp    0x1008996
 1008991:	test   rcx,rcx
 1008994:	jne    0x100899a
 1008996:	sub    rbx,0x2
 100899a:	mov    WORD PTR [rbx],bp
 100899d:	mov    rcx,QWORD PTR [rsp+0x30]
 10089a2:	test   rcx,rcx
 10089a5:	je     0x1008a55
 10089ab:	add    rsp,0x50
 10089af:	pop    rsi
 10089b0:	pop    rbp
 10089b1:	pop    rbx
 10089b2:	rex.W jmp QWORD PTR [rip+0xffffffffffff8657]        # 0x1001010
 10089b9:	lea    eax,[rsi+rsi*1]
 10089bc:	mov    QWORD PTR [rsp+0x70],rdi
 10089c1:	mov    rdi,QWORD PTR [rsp+0x30]
 10089c6:	mov    DWORD PTR [rsp+0x80],eax
 10089cd:	lea    rax,[rsp+0x80]
 10089d5:	lea    r9,[rsp+0x88]
 10089dd:	mov    QWORD PTR [rsp+0x28],rax
 10089e2:	lea    rdx,[rip+0xffffffffffffa01f]        # 0x1002a08
 10089e9:	xor    r8d,r8d
 10089ec:	mov    rcx,rdi
 10089ef:	mov    QWORD PTR [rsp+0x20],rbx
 10089f4:	call   QWORD PTR [rip+0xffffffffffff860e]        # 0x1001008
 10089fa:	test   eax,eax
 10089fc:	jne    0x1008a30
 10089fe:	mov    eax,DWORD PTR [rsp+0x88]
 1008a05:	cmp    eax,0x1
 1008a08:	je     0x1008a0f
 1008a0a:	cmp    eax,0x2
 1008a0d:	jne    0x1008a30
 1008a0f:	mov    ecx,DWORD PTR [rsp+0x80]
 1008a16:	test   rbx,rbx
 1008a19:	je     0x1008a60
 1008a1b:	test   ecx,ecx
 1008a1d:	je     0x1008a5d
 1008a1f:	test   cl,0x1
 1008a22:	jne    0x1008a30
 1008a24:	mov    eax,ecx
 1008a26:	shr    rax,1
 1008a29:	cmp    WORD PTR [rbx+rax*2-0x2],bp
 1008a2e:	je     0x1008a60
 1008a30:	lea    r8,[rip+0xffffffffffff9ef5]        # 0x100292c
 1008a37:	mov    rdx,rsi
 1008a3a:	mov    rcx,rbx
 1008a3d:	call   0x1005e10
 1008a42:	test   rdi,rdi
 1008a45:	je     0x1008a50
 1008a47:	mov    rcx,rdi
 1008a4a:	call   QWORD PTR [rip+0xffffffffffff85c0]        # 0x1001010
 1008a50:	mov    rdi,QWORD PTR [rsp+0x70]
 1008a55:	add    rsp,0x50
 1008a59:	pop    rsi
 1008a5a:	pop    rbp
 1008a5b:	pop    rbx
 1008a5c:	ret    
 1008a5d:	mov    WORD PTR [rbx],bp
 1008a60:	shr    ecx,1
 1008a62:	cmp    ecx,esi
 1008a64:	jae    0x1008a30
 1008a66:	mov    WORD PTR [rbx+rcx*2],bp
 1008a6a:	jmp    0x1008a42
 1008a6c:	int3   
 1008a6d:	int3   
 1008a6e:	int3   
 1008a6f:	int3   
 1008a70:	int3   
 1008a71:	int3   
 1008a72:	int3   
 1008a73:	int3   
 1008a74:	int3   
 1008a75:	int3   
 1008a76:	int3   
 1008a77:	int3   
 1008a78:	int3   
 1008a79:	int3   
 1008a7a:	int3   
 1008a7b:	int3   
 1008a7c:	int3   
 1008a7d:	int3   
 1008a7e:	int3   
 1008a7f:	int3   
 1008a80:	mov    QWORD PTR [rsp+0x18],rbx
 1008a85:	push   rdi
 1008a86:	sub    rsp,0x240
 1008a8d:	mov    rax,QWORD PTR [rip+0x86cc]        # 0x1011160
 1008a94:	xor    rax,rsp
 1008a97:	mov    QWORD PTR [rsp+0x230],rax
 1008a9f:	mov    edi,edx
 1008aa1:	mov    rbx,rcx
 1008aa4:	cmp    edx,0x104
 1008aaa:	jae    0x1008b0f
 1008aac:	mov    ecx,edi
 1008aae:	test   edx,edx
 1008ab0:	je     0x1008b4c
 1008ab6:	cmp    rcx,0x7fffffff
 1008abd:	ja     0x1008b4c
 1008ac3:	lea    r8,[rip+0xffffffffffff9016]        # 0x1001ae0
 1008aca:	mov    edx,0x7ffffffe
 1008acf:	sub    rdx,rcx
 1008ad2:	sub    r8,rbx
 1008ad5:	lea    rax,[rdx+rcx*1]
 1008ad9:	test   rax,rax
 1008adc:	je     0x1008aff
 1008ade:	movzx  eax,WORD PTR [r8+rbx*1]
 1008ae3:	test   ax,ax
 1008ae6:	je     0x1008aff
 1008ae8:	mov    WORD PTR [rbx],ax
 1008aeb:	add    rbx,0x2
 1008aef:	dec    rcx
 1008af2:	jne    0x1008ad5
 1008af4:	sub    rbx,0x2
 1008af8:	xor    eax,eax
 1008afa:	mov    WORD PTR [rbx],ax
 1008afd:	jmp    0x1008b4c
 1008aff:	test   rcx,rcx
 1008b02:	jne    0x1008b08
 1008b04:	sub    rbx,0x2
 1008b08:	xor    eax,eax
 1008b0a:	mov    WORD PTR [rbx],ax
 1008b0d:	jmp    0x1008b4c
 1008b0f:	lea    rcx,[rsp+0x20]
 1008b14:	mov    edx,0x104
 1008b19:	call   0x1008910
 1008b1e:	lea    rdx,[rip+0xffffffffffff9f0b]        # 0x1002a30
 1008b25:	lea    rcx,[rsp+0x20]
 1008b2a:	mov    r9,rbx
 1008b2d:	xor    r8d,r8d
 1008b30:	call   QWORD PTR [rip+0xffffffffffff8682]        # 0x10011b8
 1008b36:	test   eax,eax
 1008b38:	jne    0x1008b4c
 1008b3a:	lea    r8,[rip+0xffffffffffff8f9f]        # 0x1001ae0
 1008b41:	mov    rdx,rdi
 1008b44:	mov    rcx,rbx
 1008b47:	call   0x1005e10
 1008b4c:	mov    rcx,QWORD PTR [rsp+0x230]
 1008b54:	xor    rcx,rsp
 1008b57:	call   0x1006ba0
 1008b5c:	mov    rbx,QWORD PTR [rsp+0x260]
 1008b64:	add    rsp,0x240
 1008b6b:	pop    rdi
 1008b6c:	ret    
 1008b6d:	int3   
 1008b6e:	int3   
 1008b6f:	int3   
 1008b70:	int3   
 1008b71:	int3   
 1008b72:	int3   
 1008b73:	int3   
 1008b74:	int3   
 1008b75:	int3   
 1008b76:	int3   
 1008b77:	int3   
 1008b78:	int3   
 1008b79:	int3   
 1008b7a:	int3   
 1008b7b:	int3   
 1008b7c:	int3   
 1008b7d:	int3   
 1008b7e:	int3   
 1008b7f:	int3   
 1008b80:	mov    QWORD PTR [rsp+0x10],rbx
 1008b85:	mov    QWORD PTR [rsp+0x18],rsi
 1008b8a:	mov    QWORD PTR [rsp+0x20],rdi
 1008b8f:	push   rbp
 1008b90:	lea    rbp,[rsp-0x3110]
 1008b98:	mov    eax,0x3210
 1008b9d:	call   0x100c260
 1008ba2:	sub    rsp,rax
 1008ba5:	mov    rax,QWORD PTR [rip+0x85b4]        # 0x1011160
 1008bac:	xor    rax,rsp
 1008baf:	mov    QWORD PTR [rbp+0x3100],rax
 1008bb6:	xor    esi,esi
 1008bb8:	lea    r9,[rsp+0x40]
 1008bbd:	lea    rdx,[rsp+0x44]
 1008bc2:	lea    r8d,[rsi+0x2]
 1008bc6:	mov    rdi,rcx
 1008bc9:	mov    WORD PTR [rsp+0x44],0xfeff
 1008bd0:	mov    QWORD PTR [rsp+0x20],rsi
 1008bd5:	call   QWORD PTR [rip+0xffffffffffff8495]        # 0x1001070
 1008bdb:	lea    rcx,[rbp+0x22f2]
 1008be2:	xor    edx,edx
 1008be4:	mov    r8d,0x7fe
 1008bea:	mov    WORD PTR [rbp+0x22f0],si
 1008bf1:	call   0x1006d28
 1008bf6:	lea    rcx,[rbp+0x20f2]
 1008bfd:	xor    edx,edx
 1008bff:	mov    r8d,0xfe
 1008c05:	mov    WORD PTR [rbp+0x20f0],si
 1008c0c:	call   0x1006d28
 1008c11:	lea    rcx,[rbp+0x21f2]
 1008c18:	xor    edx,edx
 1008c1a:	mov    r8d,0xfe
 1008c20:	mov    WORD PTR [rbp+0x21f0],si
 1008c27:	call   0x1006d28
 1008c2c:	lea    rax,[rbp+0x20f0]
 1008c33:	mov    ebx,0x80
 1008c38:	lea    r9,[rip+0xffffffffffff9df9]        # 0x1002a38
 1008c3f:	xor    r8d,r8d
 1008c42:	xor    edx,edx
 1008c44:	mov    ecx,0x400
 1008c49:	mov    DWORD PTR [rsp+0x28],ebx
 1008c4d:	mov    QWORD PTR [rsp+0x20],rax
 1008c52:	call   QWORD PTR [rip+0xffffffffffff8540]        # 0x1001198
 1008c58:	test   eax,eax
 1008c5a:	je     0x1008ce9
 1008c60:	lea    rax,[rbp+0x21f0]
 1008c67:	lea    r9,[rip+0xffffffffffff9de2]        # 0x1002a50
 1008c6e:	xor    r8d,r8d
 1008c71:	xor    edx,edx
 1008c73:	mov    ecx,0x400
 1008c78:	mov    DWORD PTR [rsp+0x28],ebx
 1008c7c:	mov    QWORD PTR [rsp+0x20],rax
 1008c81:	call   QWORD PTR [rip+0xffffffffffff8519]        # 0x10011a0
 1008c87:	test   eax,eax
 1008c89:	je     0x1008ce9
 1008c8b:	lea    rax,[rbp+0x21f0]
 1008c92:	lea    r9,[rbp+0x20f0]
 1008c99:	lea    r8,[rip+0xffffffffffff9dd0]        # 0x1002a70
 1008ca0:	lea    rcx,[rbp+0x22f0]
 1008ca7:	mov    edx,0x400
 1008cac:	mov    QWORD PTR [rsp+0x20],rax
 1008cb1:	call   0x1009240
 1008cb6:	lea    r11,[rbp+0x22f0]
 1008cbd:	or     rax,0xffffffffffffffff
 1008cc1:	inc    rax
 1008cc4:	cmp    WORD PTR [r11+rax*2],si
 1008cc9:	jne    0x1008cc1
 1008ccb:	lea    r8d,[rax+rax*1]
 1008ccf:	lea    r9,[rsp+0x40]
 1008cd4:	lea    rdx,[rbp+0x22f0]
 1008cdb:	mov    rcx,rdi
 1008cde:	mov    QWORD PTR [rsp+0x20],rsi
 1008ce3:	call   QWORD PTR [rip+0xffffffffffff8387]        # 0x1001070
 1008ce9:	call   QWORD PTR [rip+0xffffffffffff8551]        # 0x1001240
 1008cef:	lea    r8,[rip+0xffffffffffff9dca]        # 0x1002ac0
 1008cf6:	lea    rcx,[rbp+0x22f0]
 1008cfd:	mov    r9d,eax
 1008d00:	mov    edx,0x400
 1008d05:	call   0x1009240
 1008d0a:	lea    r11,[rbp+0x22f0]
 1008d11:	or     rax,0xffffffffffffffff
 1008d15:	inc    rax
 1008d18:	cmp    WORD PTR [r11+rax*2],si
 1008d1d:	jne    0x1008d15
 1008d1f:	lea    r8d,[rax+rax*1]
 1008d23:	lea    r9,[rsp+0x40]
 1008d28:	lea    rdx,[rbp+0x22f0]
 1008d2f:	mov    rcx,rdi
 1008d32:	mov    QWORD PTR [rsp+0x20],rsi
 1008d37:	call   QWORD PTR [rip+0xffffffffffff8333]        # 0x1001070
 1008d3d:	lea    rdx,[rbp+0x20f0]
 1008d44:	mov    r8d,ebx
 1008d47:	xor    ecx,ecx
 1008d49:	call   QWORD PTR [rip+0xffffffffffff8499]        # 0x10011e8
 1008d4f:	test   eax,eax
 1008d51:	je     0x1008da8
 1008d53:	lea    r9,[rbp+0x20f0]
 1008d5a:	lea    r8,[rip+0xffffffffffff9d77]        # 0x1002ad8
 1008d61:	lea    rcx,[rbp+0x22f0]
 1008d68:	mov    edx,0x400
 1008d6d:	call   0x1009240
 1008d72:	lea    r11,[rbp+0x22f0]
 1008d79:	or     rax,0xffffffffffffffff
 1008d7d:	nop    DWORD PTR [rax]
 1008d80:	inc    rax
 1008d83:	cmp    WORD PTR [r11+rax*2],si
 1008d88:	jne    0x1008d80
 1008d8a:	lea    r8d,[rax+rax*1]
 1008d8e:	lea    r9,[rsp+0x40]
 1008d93:	lea    rdx,[rbp+0x22f0]
 1008d9a:	mov    rcx,rdi
 1008d9d:	mov    QWORD PTR [rsp+0x20],rsi
 1008da2:	call   QWORD PTR [rip+0xffffffffffff82c8]        # 0x1001070
 1008da8:	lea    rcx,[rbp+0x1fd0]
 1008daf:	xor    edx,edx
 1008db1:	mov    r8d,0x11c
 1008db7:	call   0x1006d28
 1008dbc:	lea    rcx,[rbp+0x1fd0]
 1008dc3:	mov    DWORD PTR [rbp+0x1fd0],0x11c
 1008dcd:	call   QWORD PTR [rip+0xffffffffffff83dd]        # 0x10011b0
 1008dd3:	test   eax,eax
 1008dd5:	je     0x1008e49
 1008dd7:	mov    r9d,DWORD PTR [rbp+0x1fd4]
 1008dde:	lea    rax,[rbp+0x1fe4]
 1008de5:	lea    r8,[rip+0xffffffffffff9d14]        # 0x1002b00
 1008dec:	mov    QWORD PTR [rsp+0x30],rax
 1008df1:	mov    eax,DWORD PTR [rbp+0x1fdc]
 1008df7:	lea    rcx,[rbp+0x22f0]
 1008dfe:	mov    DWORD PTR [rsp+0x28],eax
 1008e02:	mov    eax,DWORD PTR [rbp+0x1fd8]
 1008e08:	mov    edx,0x400
 1008e0d:	mov    DWORD PTR [rsp+0x20],eax
 1008e11:	call   0x1009240
 1008e16:	lea    r11,[rbp+0x22f0]
 1008e1d:	or     rax,0xffffffffffffffff
 1008e21:	inc    rax
 1008e24:	cmp    WORD PTR [r11+rax*2],si
 1008e29:	jne    0x1008e21
 1008e2b:	lea    r8d,[rax+rax*1]
 1008e2f:	lea    r9,[rsp+0x40]
 1008e34:	lea    rdx,[rbp+0x22f0]
 1008e3b:	mov    rcx,rdi
 1008e3e:	mov    QWORD PTR [rsp+0x20],rsi
 1008e43:	call   QWORD PTR [rip+0xffffffffffff8227]        # 0x1001070
 1008e49:	lea    rcx,[rsp+0x60]
 1008e4e:	call   QWORD PTR [rip+0xffffffffffff836c]        # 0x10011c0
 1008e54:	movzx  r11d,WORD PTR [rsp+0x60]
 1008e5a:	lea    rcx,[rbp+0x20f0]
 1008e61:	lea    rax,[rbp+0x20f0]
 1008e68:	test   r11d,r11d
 1008e6b:	je     0x1008f23
 1008e71:	cmp    r11d,0x6
 1008e75:	je     0x1008ef3
 1008e77:	cmp    r11d,0x9
 1008e7b:	je     0x1008ebe
 1008e7d:	lea    rdx,[rip+0xffffffffffff9cf4]        # 0x1002b78
 1008e84:	sub    rdx,rax
 1008e87:	nop    WORD PTR [rax+rax*1+0x0]
 1008e90:	lea    rax,[rbx+0x7fffff7e]
 1008e97:	test   rax,rax
 1008e9a:	je     0x1008f53
 1008ea0:	movzx  eax,WORD PTR [rdx+rcx*1]
 1008ea4:	test   ax,ax
 1008ea7:	je     0x1008f53
 1008ead:	mov    WORD PTR [rcx],ax
 1008eb0:	add    rcx,0x2
 1008eb4:	dec    rbx
 1008eb7:	jne    0x1008e90
 1008eb9:	jmp    0x1008f58
 1008ebe:	lea    rdx,[rip+0xffffffffffff9c8b]        # 0x1002b50
 1008ec5:	sub    rdx,rax
 1008ec8:	nop    DWORD PTR [rax+rax*1+0x0]
 1008ed0:	lea    rax,[rbx+0x7fffff7e]
 1008ed7:	test   rax,rax
 1008eda:	je     0x1008f53
 1008edc:	movzx  eax,WORD PTR [rdx+rcx*1]
 1008ee0:	test   ax,ax
 1008ee3:	je     0x1008f53
 1008ee5:	mov    WORD PTR [rcx],ax
 1008ee8:	add    rcx,0x2
 1008eec:	dec    rbx
 1008eef:	jne    0x1008ed0
 1008ef1:	jmp    0x1008f58
 1008ef3:	lea    rdx,[rip+0xffffffffffff9c66]        # 0x1002b60
 1008efa:	sub    rdx,rax
 1008efd:	nop    DWORD PTR [rax]
 1008f00:	lea    rax,[rbx+0x7fffff7e]
 1008f07:	test   rax,rax
 1008f0a:	je     0x1008f53
 1008f0c:	movzx  eax,WORD PTR [rdx+rcx*1]
 1008f10:	test   ax,ax
 1008f13:	je     0x1008f53
 1008f15:	mov    WORD PTR [rcx],ax
 1008f18:	add    rcx,0x2
 1008f1c:	dec    rbx
 1008f1f:	jne    0x1008f00
 1008f21:	jmp    0x1008f58
 1008f23:	lea    rdx,[rip+0xffffffffffff9c46]        # 0x1002b70
 1008f2a:	sub    rdx,rax
 1008f2d:	nop    DWORD PTR [rax]
 1008f30:	lea    rax,[rbx+0x7fffff7e]
 1008f37:	test   rax,rax
 1008f3a:	je     0x1008f53
 1008f3c:	movzx  eax,WORD PTR [rdx+rcx*1]
 1008f40:	test   ax,ax
 1008f43:	je     0x1008f53
 1008f45:	mov    WORD PTR [rcx],ax
 1008f48:	add    rcx,0x2
 1008f4c:	dec    rbx
 1008f4f:	jne    0x1008f30
 1008f51:	jmp    0x1008f58
 1008f53:	test   rbx,rbx
 1008f56:	jne    0x1008f5c
 1008f58:	sub    rcx,0x2
 1008f5c:	mov    WORD PTR [rcx],si
 1008f5f:	mov    DWORD PTR [rsp+0x4c],esi
 1008f63:	call   QWORD PTR [rip+0xffffffffffff833f]        # 0x10012a8
 1008f69:	lea    rdx,[rsp+0x4c]
 1008f6e:	mov    rcx,rax
 1008f71:	call   QWORD PTR [rip+0xffffffffffff8231]        # 0x10011a8
 1008f77:	cmp    DWORD PTR [rsp+0x4c],esi
 1008f7b:	mov    r9d,DWORD PTR [rbp-0x80]
 1008f7f:	lea    rax,[rip+0xffffffffffff9c0a]        # 0x1002b90
 1008f86:	lea    rdx,[rip+0xffffffffffff9c1b]        # 0x1002ba8
 1008f8d:	lea    rcx,[rip+0xffffffffffff8b4c]        # 0x1001ae0
 1008f94:	cmovne rcx,rax
 1008f98:	cmp    r9d,0x1
 1008f9c:	lea    rax,[rip+0xffffffffffff9c1d]        # 0x1002bc0
 1008fa3:	cmova  rax,rdx
 1008fa7:	mov    QWORD PTR [rsp+0x30],rcx
 1008fac:	lea    r8,[rip+0xffffffffffff9c25]        # 0x1002bd8
 1008fb3:	mov    QWORD PTR [rsp+0x28],rax
 1008fb8:	lea    rax,[rbp+0x20f0]
 1008fbf:	lea    rcx,[rbp+0x22f0]
 1008fc6:	mov    edx,0x400
 1008fcb:	mov    QWORD PTR [rsp+0x20],rax
 1008fd0:	call   0x1009240
 1008fd5:	lea    r11,[rbp+0x22f0]
 1008fdc:	or     rax,0xffffffffffffffff
 1008fe0:	inc    rax
 1008fe3:	cmp    WORD PTR [r11+rax*2],si
 1008fe8:	jne    0x1008fe0
 1008fea:	lea    r8d,[rax+rax*1]
 1008fee:	lea    r9,[rsp+0x40]
 1008ff3:	lea    rdx,[rbp+0x22f0]
 1008ffa:	mov    rcx,rdi
 1008ffd:	mov    QWORD PTR [rsp+0x20],rsi
 1009002:	call   QWORD PTR [rip+0xffffffffffff8068]        # 0x1001070
 1009008:	lea    rcx,[rbp+0x1f90]
 100900f:	call   QWORD PTR [rip+0xffffffffffff81b3]        # 0x10011c8
 1009015:	mov    r11,QWORD PTR [rbp+0x1fa8]
 100901c:	mov    rdx,QWORD PTR [rbp+0x1fb0]
 1009023:	mov    rcx,QWORD PTR [rbp+0x1f98]
 100902a:	mov    rax,QWORD PTR [rbp+0x1fa0]
 1009031:	mov    r9d,DWORD PTR [rbp+0x1f94]
 1009038:	shr    rdx,0x14
 100903c:	shr    rcx,0x14
 1009040:	shr    r11,0x14
 1009044:	mov    QWORD PTR [rsp+0x38],r11
 1009049:	mov    QWORD PTR [rsp+0x30],rdx
 100904e:	mov    QWORD PTR [rsp+0x28],rcx
 1009053:	shr    rax,0x14
 1009057:	lea    rcx,[rbp+0x22f0]
 100905e:	lea    r8,[rip+0xffffffffffff9bab]        # 0x1002c10
 1009065:	mov    edx,0x400
 100906a:	mov    QWORD PTR [rsp+0x20],rax
 100906f:	call   0x1009240
 1009074:	lea    r11,[rbp+0x22f0]
 100907b:	or     rax,0xffffffffffffffff
 100907f:	nop
 1009080:	inc    rax
 1009083:	cmp    WORD PTR [r11+rax*2],si
 1009088:	jne    0x1009080
 100908a:	lea    r8d,[rax+rax*1]
 100908e:	lea    r9,[rsp+0x40]
 1009093:	lea    rdx,[rbp+0x22f0]
 100909a:	mov    rcx,rdi
 100909d:	mov    QWORD PTR [rsp+0x20],rsi
 10090a2:	call   QWORD PTR [rip+0xffffffffffff7fc8]        # 0x1001070
 10090a8:	mov    DWORD PTR [rsp+0x48],esi
 10090ac:	call   QWORD PTR [rip+0xffffffffffff81f6]        # 0x10012a8
 10090b2:	lea    r9,[rsp+0x48]
 10090b7:	lea    rdx,[rbp-0x70]
 10090bb:	mov    rcx,rax
 10090be:	mov    r8d,0x400
 10090c4:	call   0x100c33e
 10090c9:	test   eax,eax
 10090cb:	je     0x100920c
 10090d1:	mov    eax,DWORD PTR [rsp+0x48]
 10090d5:	mov    ecx,0x2000
 10090da:	mov    rbx,rsi
 10090dd:	cmp    eax,ecx
 10090df:	cmova  eax,ecx
 10090e2:	mov    DWORD PTR [rsp+0x48],eax
 10090e6:	test   rax,0xfffffffffffffff8
 10090ec:	jbe    0x100920c
 10090f2:	call   QWORD PTR [rip+0xffffffffffff81b0]        # 0x10012a8
 10090f8:	mov    rdx,QWORD PTR [rbp+rbx*8-0x70]
 10090fd:	lea    r8,[rbp+0x2af0]
 1009104:	mov    rcx,rax
 1009107:	mov    r9d,0x104
 100910d:	call   0x100c34a
 1009112:	test   eax,eax
 1009114:	je     0x10091f8
 100911a:	lea    r9,[rbp+0x2d00]
 1009121:	lea    rcx,[rbp+0x2af0]
 1009128:	xor    edx,edx
 100912a:	mov    r8d,0x400
 1009130:	mov    QWORD PTR [rsp+0x50],rsi
 1009135:	call   0x100c356
 100913a:	test   eax,eax
 100913c:	je     0x10091a7
 100913e:	lea    r9,[rsp+0x58]
 1009143:	lea    r8,[rsp+0x50]
 1009148:	lea    rdx,[rip+0xffffffffffff980d]        # 0x100295c
 100914f:	lea    rcx,[rbp+0x2d00]
 1009156:	call   0x100c362
 100915b:	test   eax,eax
 100915d:	je     0x10091a7
 100915f:	mov    rcx,QWORD PTR [rsp+0x50]
 1009164:	lea    r9,[rbp+0x2af0]
 100916b:	movzx  edx,WORD PTR [rcx+0x14]
 100916f:	movzx  r8d,WORD PTR [rcx+0x16]
 1009174:	movzx  eax,WORD PTR [rcx+0x10]
 1009178:	movzx  ecx,WORD PTR [rcx+0x12]
 100917c:	mov    DWORD PTR [rsp+0x38],edx
 1009180:	mov    DWORD PTR [rsp+0x30],r8d
 1009185:	mov    DWORD PTR [rsp+0x28],eax
 1009189:	mov    DWORD PTR [rsp+0x20],ecx
 100918d:	lea    r8,[rip+0xffffffffffff9b1c]        # 0x1002cb0
 1009194:	lea    rcx,[rbp+0x22f0]
 100919b:	mov    edx,0x400
 10091a0:	call   0x1009240
 10091a5:	jmp    0x10091c6
 10091a7:	lea    r9,[rbp+0x2af0]
 10091ae:	lea    r8,[rip+0xffffffffffff9b4b]        # 0x1002d00
 10091b5:	lea    rcx,[rbp+0x22f0]
 10091bc:	mov    edx,0x400
 10091c1:	call   0x1009240
 10091c6:	lea    rcx,[rbp+0x22f0]
 10091cd:	or     rax,0xffffffffffffffff
 10091d1:	inc    rax
 10091d4:	cmp    WORD PTR [rcx+rax*2],si
 10091d8:	jne    0x10091d1
 10091da:	lea    r8d,[rax+rax*1]
 10091de:	lea    r9,[rsp+0x40]
 10091e3:	lea    rdx,[rbp+0x22f0]
 10091ea:	mov    rcx,rdi
 10091ed:	mov    QWORD PTR [rsp+0x20],rsi
 10091f2:	call   QWORD PTR [rip+0xffffffffffff7e78]        # 0x1001070
 10091f8:	mov    eax,DWORD PTR [rsp+0x48]
 10091fc:	inc    rbx
 10091ff:	shr    rax,0x3
 1009203:	cmp    rbx,rax
 1009206:	jb     0x10090f2
 100920c:	mov    rcx,QWORD PTR [rbp+0x3100]
 1009213:	xor    rcx,rsp
 1009216:	call   0x1006ba0
 100921b:	lea    r11,[rsp+0x3210]
 1009223:	mov    rbx,QWORD PTR [r11+0x18]
 1009227:	mov    rsi,QWORD PTR [r11+0x20]
 100922b:	mov    rdi,QWORD PTR [r11+0x28]
 100922f:	mov    rsp,r11
 1009232:	pop    rbp
 1009233:	ret    
 1009234:	int3   
 1009235:	int3   
 1009236:	int3   
 1009237:	int3   
 1009238:	int3   
 1009239:	int3   
 100923a:	int3   
 100923b:	int3   
 100923c:	int3   
 100923d:	int3   
 100923e:	int3   
 100923f:	int3   
 1009240:	mov    QWORD PTR [rsp+0x18],r8
 1009245:	mov    QWORD PTR [rsp+0x20],r9
 100924a:	push   rbx
 100924b:	push   rsi
 100924c:	sub    rsp,0x28
 1009250:	xor    ebx,ebx
 1009252:	mov    rsi,rcx
 1009255:	mov    eax,ebx
 1009257:	test   rdx,rdx
 100925a:	je     0x1009265
 100925c:	cmp    rdx,0x7fffffff
 1009263:	jbe    0x100926a
 1009265:	mov    eax,0x80070057
 100926a:	test   eax,eax
 100926c:	js     0x10092b4
 100926e:	mov    QWORD PTR [rsp+0x20],rdi
 1009273:	lea    rdi,[rdx-0x1]
 1009277:	lea    r9,[rsp+0x58]
 100927c:	mov    rdx,rdi
 100927f:	call   QWORD PTR [rip+0xffffffffffff80b3]        # 0x1001338
 1009285:	test   eax,eax
 1009287:	js     0x10092a4
 1009289:	cdqe   
 100928b:	cmp    rax,rdi
 100928e:	ja     0x10092a4
 1009290:	jne    0x10092ad
 1009292:	mov    WORD PTR [rsi+rdi*2],bx
 1009296:	mov    rdi,QWORD PTR [rsp+0x20]
 100929b:	mov    eax,ebx
 100929d:	add    rsp,0x28
 10092a1:	pop    rsi
 10092a2:	pop    rbx
 10092a3:	ret    
 10092a4:	mov    WORD PTR [rsi+rdi*2],bx
 10092a8:	mov    ebx,0x8007007a
 10092ad:	mov    rdi,QWORD PTR [rsp+0x20]
 10092b2:	mov    eax,ebx
 10092b4:	add    rsp,0x28
 10092b8:	pop    rsi
 10092b9:	pop    rbx
 10092ba:	ret    
 10092bb:	int3   
 10092bc:	int3   
 10092bd:	int3   
 10092be:	int3   
 10092bf:	int3   
 10092c0:	int3   
 10092c1:	int3   
 10092c2:	int3   
 10092c3:	int3   
 10092c4:	int3   
 10092c5:	int3   
 10092c6:	int3   
 10092c7:	int3   
 10092c8:	int3   
 10092c9:	int3   
 10092ca:	int3   
 10092cb:	int3   
 10092cc:	int3   
 10092cd:	int3   
 10092ce:	int3   
 10092cf:	int3   
 10092d0:	mov    rax,QWORD PTR [rcx]
 10092d3:	xor    edx,edx
 10092d5:	rex.W jmp QWORD PTR [rax+0x18]
 10092d9:	int3   
 10092da:	int3   
 10092db:	int3   
 10092dc:	int3   
 10092dd:	int3   
 10092de:	int3   
 10092df:	int3   
 10092e0:	lea    rax,[rcx+0x10]
 10092e4:	ret    
 10092e5:	int3   
 10092e6:	int3   
 10092e7:	int3   
 10092e8:	int3   
 10092e9:	int3   
 10092ea:	int3   
 10092eb:	int3   
 10092ec:	int3   
 10092ed:	int3   
 10092ee:	int3   
 10092ef:	int3   
 10092f0:	rex push rbx
 10092f2:	sub    rsp,0x20
 10092f6:	mov    rax,rdx
 10092f9:	xor    ebx,ebx
 10092fb:	xor    edx,edx
 10092fd:	mov    rcx,rax
 1009300:	call   0x100a3c0
 1009305:	jmp    0x1009320
 1009307:	mov    ebx,eax
 1009309:	cmp    eax,0xc00000fd
 100930e:	jne    0x1009316
 1009310:	call   QWORD PTR [rip+0xffffffffffff8032]        # 0x1001348
 1009316:	mov    eax,0x80004005
 100931b:	test   ebx,ebx
 100931d:	cmovns ebx,eax
 1009320:	mov    eax,ebx
 1009322:	add    rsp,0x20
 1009326:	pop    rbx
 1009327:	ret    
 1009328:	int3   
 1009329:	int3   
 100932a:	int3   
 100932b:	int3   
 100932c:	int3   
 100932d:	int3   
 100932e:	int3   
 100932f:	int3   
 1009330:	rex push rbx
 1009332:	sub    rsp,0x20
 1009336:	xor    r9d,r9d
 1009339:	lea    rbx,[rip+0xffffffffffff6cc0]        # 0x1000000
 1009340:	mov    r10,r8
 1009343:	mov    QWORD PTR [r8],r9
 1009346:	mov    r11,QWORD PTR [rbx+0x2990]
 100934d:	cmp    r11,QWORD PTR [rdx]
 1009350:	jne    0x1009364
 1009352:	mov    r11,QWORD PTR [rbx+0x2998]
 1009359:	cmp    r11,QWORD PTR [rdx+0x8]
 100935d:	jne    0x1009364
 100935f:	mov    eax,r9d
 1009362:	jmp    0x1009369
 1009364:	sbb    eax,eax
 1009366:	sbb    eax,0xffffffff
 1009369:	test   eax,eax
 100936b:	jne    0x100937e
 100936d:	mov    QWORD PTR [r8],rcx
 1009370:	mov    rax,QWORD PTR [rcx]
 1009373:	call   QWORD PTR [rax+0x8]
 1009376:	xor    eax,eax
 1009378:	add    rsp,0x20
 100937c:	pop    rbx
 100937d:	ret    
 100937e:	mov    r8,QWORD PTR [rbx+0x2dd8]
 1009385:	cmp    r8,QWORD PTR [rdx]
 1009388:	jne    0x1009397
 100938a:	mov    r8,QWORD PTR [rbx+0x2de0]
 1009391:	cmp    r8,QWORD PTR [rdx+0x8]
 1009395:	je     0x100939f
 1009397:	sbb    eax,eax
 1009399:	sbb    eax,0xffffffff
 100939c:	mov    r9d,eax
 100939f:	test   r9d,r9d
 10093a2:	jne    0x10093b5
 10093a4:	mov    QWORD PTR [r10],rcx
 10093a7:	mov    rax,QWORD PTR [rcx]
 10093aa:	call   QWORD PTR [rax+0x8]
 10093ad:	xor    eax,eax
 10093af:	add    rsp,0x20
 10093b3:	pop    rbx
 10093b4:	ret    
 10093b5:	mov    eax,0x80004002
 10093ba:	add    rsp,0x20
 10093be:	pop    rbx
 10093bf:	ret    
 10093c0:	int3   
 10093c1:	int3   
 10093c2:	int3   
 10093c3:	int3   
 10093c4:	int3   
 10093c5:	int3   
 10093c6:	int3   
 10093c7:	int3   
 10093c8:	int3   
 10093c9:	int3   
 10093ca:	int3   
 10093cb:	int3   
 10093cc:	int3   
 10093cd:	int3   
 10093ce:	int3   
 10093cf:	int3   
 10093d0:	mov    eax,0x1
 10093d5:	ret    
 10093d6:	int3   
 10093d7:	int3   
 10093d8:	int3   
 10093d9:	int3   
 10093da:	int3   
 10093db:	int3   
 10093dc:	int3   
 10093dd:	int3   
 10093de:	int3   
 10093df:	int3   
 10093e0:	mov    eax,0x1
 10093e5:	ret    
 10093e6:	int3   
 10093e7:	int3   
 10093e8:	int3   
 10093e9:	int3   
 10093ea:	int3   
 10093eb:	int3   
 10093ec:	int3   
 10093ed:	int3   
 10093ee:	int3   
 10093ef:	int3   
 10093f0:	rex push rbx
 10093f2:	sub    rsp,0x20
 10093f6:	add    rcx,0x8
 10093fa:	mov    rbx,rdx
 10093fd:	call   0x100a530
 1009402:	mov    DWORD PTR [rbx],eax
 1009404:	xor    eax,eax
 1009406:	add    rsp,0x20
 100940a:	pop    rbx
 100940b:	ret    
 100940c:	int3   
 100940d:	int3   
 100940e:	int3   
 100940f:	int3   
 1009410:	int3   
 1009411:	int3   
 1009412:	int3   
 1009413:	int3   
 1009414:	int3   
 1009415:	int3   
 1009416:	int3   
 1009417:	int3   
 1009418:	int3   
 1009419:	int3   
 100941a:	int3   
 100941b:	int3   
 100941c:	int3   
 100941d:	int3   
 100941e:	int3   
 100941f:	int3   
 1009420:	mov    eax,DWORD PTR [rcx+0x1b50]
 1009426:	ret    
 1009427:	int3   
 1009428:	int3   
 1009429:	int3   
 100942a:	int3   
 100942b:	int3   
 100942c:	int3   
 100942d:	int3   
 100942e:	int3   
 100942f:	int3   
 1009430:	mov    QWORD PTR [rcx+0x1b58],rdx
 1009437:	xor    eax,eax
 1009439:	ret    
 100943a:	int3   
 100943b:	int3   
 100943c:	int3   
 100943d:	int3   
 100943e:	int3   
 100943f:	int3   
 1009440:	mov    rax,QWORD PTR [rcx+0x1b58]
 1009447:	test   rax,rax
 100944a:	je     0x1009452
 100944c:	mov    rcx,rdx
 100944f:	rex.W jmp rax
 1009452:	mov    eax,0x80004001
 1009457:	ret    
 1009458:	int3   
 1009459:	int3   
 100945a:	int3   
 100945b:	int3   
 100945c:	int3   
 100945d:	int3   
 100945e:	int3   
 100945f:	int3   
 1009460:	lea    rax,[rcx+0x1740]
 1009467:	ret    
 1009468:	int3   
 1009469:	int3   
 100946a:	int3   
 100946b:	int3   
 100946c:	int3   
 100946d:	int3   
 100946e:	int3   
 100946f:	int3   
 1009470:	mov    QWORD PTR [rsp+0x8],rbx
 1009475:	mov    QWORD PTR [rsp+0x10],rsi
 100947a:	push   rdi
 100947b:	push   r12
 100947d:	push   r13
 100947f:	sub    rsp,0x30
 1009483:	mov    r12,r8
 1009486:	mov    r13,rdx
 1009489:	mov    rdi,rcx
 100948c:	xor    esi,esi
 100948e:	mov    ebx,esi
 1009490:	mov    DWORD PTR [rsp+0x20],ebx
 1009494:	mov    DWORD PTR [rsp+0x68],esi
 1009498:	call   0x100a430
 100949d:	test   rax,rax
 10094a0:	je     0x100953a
 10094a6:	mov    QWORD PTR [rsp+0x28],rsi
 10094ab:	mov    rcx,rdi
 10094ae:	call   0x100a430
 10094b3:	mov    r9,QWORD PTR [rax]
 10094b6:	lea    r8,[rsp+0x28]
 10094bb:	lea    rdx,[rip+0xffffffffffff94de]        # 0x10029a0
 10094c2:	mov    rcx,rax
 10094c5:	call   QWORD PTR [r9]
 10094c8:	mov    ebx,eax
 10094ca:	mov    DWORD PTR [rsp+0x20],eax
 10094ce:	test   eax,eax
 10094d0:	js     0x100953a
 10094d2:	mov    rcx,QWORD PTR [rsp+0x28]
 10094d7:	test   rcx,rcx
 10094da:	je     0x1009531
 10094dc:	mov    edi,esi
 10094de:	mov    DWORD PTR [rsp+0x24],esi
 10094e2:	mov    rax,QWORD PTR [rcx]
 10094e5:	mov    r8,r12
 10094e8:	mov    rdx,r13
 10094eb:	call   QWORD PTR [rax+0x18]
 10094ee:	mov    ebx,eax
 10094f0:	mov    DWORD PTR [rsp+0x20],eax
 10094f4:	jmp    0x100951b
 10094f6:	mov    edi,eax
 10094f8:	cmp    eax,0xc00000fd
 10094fd:	jne    0x1009505
 10094ff:	call   QWORD PTR [rip+0xffffffffffff7e43]        # 0x1001348
 1009505:	mov    eax,0x80004005
 100950a:	test   edi,edi
 100950c:	cmovns edi,eax
 100950f:	mov    DWORD PTR [rsp+0x24],edi
 1009513:	mov    ebx,DWORD PTR [rsp+0x20]
 1009517:	mov    esi,DWORD PTR [rsp+0x68]
 100951b:	test   ebx,ebx
 100951d:	cmovns ebx,edi
 1009520:	mov    DWORD PTR [rsp+0x20],ebx
 1009524:	mov    rcx,QWORD PTR [rsp+0x28]
 1009529:	mov    rax,QWORD PTR [rcx]
 100952c:	call   QWORD PTR [rax+0x10]
 100952f:	jmp    0x100953a
 1009531:	mov    ebx,0x80070057
 1009536:	mov    DWORD PTR [rsp+0x20],ebx
 100953a:	jmp    0x100955b
 100953c:	mov    ebx,eax
 100953e:	cmp    eax,0xc00000fd
 1009543:	jne    0x100954b
 1009545:	call   QWORD PTR [rip+0xffffffffffff7dfd]        # 0x1001348
 100954b:	mov    eax,0x80004005
 1009550:	test   ebx,ebx
 1009552:	cmovns ebx,eax
 1009555:	mov    esi,ebx
 1009557:	mov    ebx,DWORD PTR [rsp+0x20]
 100955b:	test   ebx,ebx
 100955d:	cmovns ebx,esi
 1009560:	mov    eax,ebx
 1009562:	mov    rbx,QWORD PTR [rsp+0x50]
 1009567:	mov    rsi,QWORD PTR [rsp+0x58]
 100956c:	add    rsp,0x30
 1009570:	pop    r13
 1009572:	pop    r12
 1009574:	pop    rdi
 1009575:	ret    
 1009576:	int3   
 1009577:	int3   
 1009578:	int3   
 1009579:	int3   
 100957a:	int3   
 100957b:	int3   
 100957c:	int3   
 100957d:	int3   
 100957e:	int3   
 100957f:	int3   
 1009580:	mov    QWORD PTR [rsp+0x10],rbx
 1009585:	mov    QWORD PTR [rsp+0x18],rsi
 100958a:	mov    QWORD PTR [rsp+0x20],rdi
 100958f:	mov    QWORD PTR [rsp+0x8],rcx
 1009594:	push   r12
 1009596:	sub    rsp,0x30
 100959a:	mov    r12,rdx
 100959d:	mov    rsi,rcx
 10095a0:	xor    edi,edi
 10095a2:	mov    DWORD PTR [rsp+0x20],edi
 10095a6:	add    rcx,0x8
 10095aa:	call   0x100a530
 10095af:	test   eax,eax
 10095b1:	je     0x1009632
 10095b3:	mov    edx,0x4e20
 10095b8:	mov    rcx,QWORD PTR [rsi+0x18]
 10095bc:	call   QWORD PTR [rip+0xffffffffffff7a7e]        # 0x1001040
 10095c2:	test   eax,eax
 10095c4:	je     0x10095ec
 10095c6:	cmp    eax,0x80
 10095cb:	je     0x10095ec
 10095cd:	call   QWORD PTR [rip+0xffffffffffff7a65]        # 0x1001038
 10095d3:	mov    ebx,eax
 10095d5:	test   eax,eax
 10095d7:	jle    0x10095e2
 10095d9:	movzx  ebx,ax
 10095dc:	or     ebx,0x80070000
 10095e2:	mov    rcx,r12
 10095e5:	call   0x100a420
 10095ea:	jmp    0x100963f
 10095ec:	mov    rdx,r12
 10095ef:	mov    rcx,rsi
 10095f2:	call   0x10092f0
 10095f7:	mov    ebx,eax
 10095f9:	mov    DWORD PTR [rsp+0x20],eax
 10095fd:	jmp    0x1009621
 10095ff:	mov    edi,eax
 1009601:	cmp    eax,0xc00000fd
 1009606:	jne    0x100960e
 1009608:	call   QWORD PTR [rip+0xffffffffffff7d3a]        # 0x1001348
 100960e:	mov    eax,0x80004005
 1009613:	test   edi,edi
 1009615:	cmovns edi,eax
 1009618:	mov    rsi,QWORD PTR [rsp+0x40]
 100961d:	mov    ebx,DWORD PTR [rsp+0x20]
 1009621:	test   ebx,ebx
 1009623:	cmovns ebx,edi
 1009626:	mov    rcx,QWORD PTR [rsi+0x18]
 100962a:	call   QWORD PTR [rip+0xffffffffffff7b60]        # 0x1001190
 1009630:	jmp    0x100963f
 1009632:	mov    rdx,r12
 1009635:	mov    rcx,rsi
 1009638:	call   0x10092f0
 100963d:	mov    ebx,eax
 100963f:	mov    eax,ebx
 1009641:	mov    rbx,QWORD PTR [rsp+0x48]
 1009646:	mov    rsi,QWORD PTR [rsp+0x50]
 100964b:	mov    rdi,QWORD PTR [rsp+0x58]
 1009650:	add    rsp,0x30
 1009654:	pop    r12
 1009656:	ret    
 1009657:	int3   
 1009658:	int3   
 1009659:	int3   
 100965a:	int3   
 100965b:	int3   
 100965c:	int3   
 100965d:	int3   
 100965e:	int3   
 100965f:	int3   
 1009660:	mov    QWORD PTR [rsp+0x10],rbx
 1009665:	mov    QWORD PTR [rsp+0x18],rsi
 100966a:	mov    QWORD PTR [rsp+0x8],rcx
 100966f:	push   rdi
 1009670:	sub    rsp,0x30
 1009674:	mov    rsi,rcx
 1009677:	xor    ebx,ebx
 1009679:	mov    DWORD PTR [rsp+0x20],ebx
 100967d:	lea    rax,[rcx+0xe8]
 1009684:	cmp    rdx,rax
 1009687:	jne    0x10096ce
 1009689:	mov    edi,ebx
 100968b:	mov    rcx,rdx
 100968e:	call   0x100b150
 1009693:	mov    ebx,eax
 1009695:	mov    DWORD PTR [rsp+0x20],eax
 1009699:	jmp    0x10096bd
 100969b:	mov    edi,eax
 100969d:	cmp    eax,0xc00000fd
 10096a2:	jne    0x10096aa
 10096a4:	call   QWORD PTR [rip+0xffffffffffff7c9e]        # 0x1001348
 10096aa:	mov    eax,0x80004005
 10096af:	test   edi,edi
 10096b1:	cmovns edi,eax
 10096b4:	mov    rsi,QWORD PTR [rsp+0x40]
 10096b9:	mov    ebx,DWORD PTR [rsp+0x20]
 10096bd:	test   ebx,ebx
 10096bf:	cmovns ebx,edi
 10096c2:	mov    rcx,QWORD PTR [rsi+0x20]
 10096c6:	call   QWORD PTR [rip+0xffffffffffff7ac4]        # 0x1001190
 10096cc:	jmp    0x10096dc
 10096ce:	test   rdx,rdx
 10096d1:	je     0x10096dc
 10096d3:	add    rcx,0x10
 10096d7:	call   0x100a310
 10096dc:	mov    eax,ebx
 10096de:	mov    rbx,QWORD PTR [rsp+0x48]
 10096e3:	mov    rsi,QWORD PTR [rsp+0x50]
 10096e8:	add    rsp,0x30
 10096ec:	pop    rdi
 10096ed:	ret    
 10096ee:	int3   
 10096ef:	int3   
 10096f0:	int3   
 10096f1:	int3   
 10096f2:	int3   
 10096f3:	int3   
 10096f4:	int3   
 10096f5:	int3   
 10096f6:	int3   
 10096f7:	int3   
 10096f8:	int3   
 10096f9:	int3   
 10096fa:	int3   
 10096fb:	int3   
 10096fc:	int3   
 10096fd:	int3   
 10096fe:	int3   
 10096ff:	int3   
 1009700:	mov    rdx,QWORD PTR [rcx]
 1009703:	test   rdx,rdx
 1009706:	je     0x1009741
 1009708:	mov    eax,DWORD PTR [rdx+0xc]
 100970b:	cmp    QWORD PTR [rcx+0x8],rax
 100970f:	jb     0x100971f
 1009711:	mov    rax,QWORD PTR [rdx]
 1009714:	mov    QWORD PTR [rcx+0x8],0x0
 100971c:	mov    QWORD PTR [rcx],rax
 100971f:	mov    rdx,QWORD PTR [rcx]
 1009722:	test   rdx,rdx
 1009725:	je     0x1009741
 1009727:	mov    r8,QWORD PTR [rcx+0x8]
 100972b:	mov    eax,DWORD PTR [rdx+0xc]
 100972e:	cmp    r8,rax
 1009731:	jae    0x1009741
 1009733:	lea    rax,[r8+0x1]
 1009737:	mov    QWORD PTR [rcx+0x8],rax
 100973b:	lea    rax,[rdx+r8*8+0x18]
 1009740:	ret    
 1009741:	xor    eax,eax
 1009743:	ret    
 1009744:	int3   
 1009745:	int3   
 1009746:	int3   
 1009747:	int3   
 1009748:	int3   
 1009749:	int3   
 100974a:	int3   
 100974b:	int3   
 100974c:	int3   
 100974d:	int3   
 100974e:	int3   
 100974f:	int3   
 1009750:	mov    QWORD PTR [rsp+0x20],r9
 1009755:	push   rsi
 1009756:	push   rdi
 1009757:	sub    rsp,0x38
 100975b:	xor    edi,edi
 100975d:	test   rdx,rdx
 1009760:	mov    rsi,rcx
 1009763:	mov    eax,edi
 1009765:	je     0x1009770
 1009767:	cmp    rdx,0x7fffffff
 100976e:	jbe    0x1009775
 1009770:	mov    eax,0x80070057
 1009775:	test   eax,eax
 1009777:	js     0x10097c7
 1009779:	lea    rax,[rsp+0x70]
 100977e:	mov    QWORD PTR [rsp+0x30],rbx
 1009783:	lea    rbx,[rdx-0x1]
 1009787:	mov    rdx,rbx
 100978a:	mov    QWORD PTR [rsp+0x20],rax
 100978f:	call   QWORD PTR [rip+0xffffffffffff7bbb]        # 0x1001350
 1009795:	test   eax,eax
 1009797:	js     0x10097b7
 1009799:	cdqe   
 100979b:	cmp    rax,rbx
 100979e:	ja     0x10097b7
 10097a0:	cmp    rax,rbx
 10097a3:	jne    0x10097c0
 10097a5:	mov    WORD PTR [rsi+rbx*2],di
 10097a9:	mov    rbx,QWORD PTR [rsp+0x30]
 10097ae:	mov    eax,edi
 10097b0:	add    rsp,0x38
 10097b4:	pop    rdi
 10097b5:	pop    rsi
 10097b6:	ret    
 10097b7:	mov    WORD PTR [rsi+rbx*2],di
 10097bb:	mov    edi,0x8007007a
 10097c0:	mov    rbx,QWORD PTR [rsp+0x30]
 10097c5:	mov    eax,edi
 10097c7:	add    rsp,0x38
 10097cb:	pop    rdi
 10097cc:	pop    rsi
 10097cd:	ret    
 10097ce:	int3   
 10097cf:	int3   
 10097d0:	int3   
 10097d1:	int3   
 10097d2:	int3   
 10097d3:	int3   
 10097d4:	int3   
 10097d5:	int3   
 10097d6:	int3   
 10097d7:	int3   
 10097d8:	int3   
 10097d9:	int3   
 10097da:	int3   
 10097db:	int3   
 10097dc:	int3   
 10097dd:	int3   
 10097de:	int3   
 10097df:	int3   
 10097e0:	rex push rdi
 10097e2:	sub    rsp,0xab0
 10097e9:	mov    rax,QWORD PTR [rip+0x7970]        # 0x1011160
 10097f0:	xor    rax,rsp
 10097f3:	mov    QWORD PTR [rsp+0xaa0],rax
 10097fb:	mov    rdi,rcx
 10097fe:	xor    ecx,ecx
 1009800:	call   QWORD PTR [rip+0xffffffffffff7a82]        # 0x1001288
 1009806:	lea    rdx,[rsp+0x260]
 100980e:	mov    r8d,0x104
 1009814:	mov    rcx,rax
 1009817:	call   QWORD PTR [rip+0xffffffffffff79cb]        # 0x10011e8
 100981d:	test   eax,eax
 100981f:	je     0x100991b
 1009825:	mov    QWORD PTR [rsp+0x40],0x105
 100982e:	lea    rax,[rsp+0x680]
 1009836:	lea    r9,[rsp+0x470]
 100983e:	mov    QWORD PTR [rsp+0x38],rax
 1009843:	lea    rax,[rsp+0x890]
 100984b:	mov    QWORD PTR [rsp+0x30],0x105
 1009854:	mov    QWORD PTR [rsp+0x28],rax
 1009859:	lea    rdx,[rsp+0x50]
 100985e:	lea    rcx,[rsp+0x260]
 1009866:	mov    r8d,0x105
 100986c:	mov    QWORD PTR [rsp+0x20],0x105
 1009875:	mov    QWORD PTR [rsp+0xac8],rbx
 100987d:	mov    WORD PTR [rsp+0x468],0x0
 1009887:	call   QWORD PTR [rip+0xffffffffffff7ad3]        # 0x1001360
 100988d:	lea    rbx,[rdi+0x1948]
 1009894:	lea    r9,[rsp+0x470]
 100989c:	lea    r8,[rsp+0x50]
 10098a1:	mov    rcx,rbx
 10098a4:	mov    edx,0x104
 10098a9:	mov    QWORD PTR [rsp+0x28],0x0
 10098b2:	mov    WORD PTR [rsp+0x56],0x0
 10098b9:	mov    WORD PTR [rsp+0x670],0x0
 10098c3:	mov    WORD PTR [rbx],0x0
 10098c8:	mov    QWORD PTR [rsp+0x20],0x0
 10098d1:	call   QWORD PTR [rip+0xffffffffffff7a81]        # 0x1001358
 10098d7:	mov    WORD PTR [rdi+0x1b4e],0x0
 10098e0:	call   0x1006470
 10098e5:	mov    r9,rax
 10098e8:	lea    rax,[rip+0xffffffffffff94c9]        # 0x1002db8
 10098ef:	lea    rcx,[rdi+0x1740]
 10098f6:	mov    QWORD PTR [rsp+0x28],rax
 10098fb:	lea    r8,[rip+0xffffffffffff94e6]        # 0x1002de8
 1009902:	mov    edx,0x104
 1009907:	mov    QWORD PTR [rsp+0x20],rbx
 100990c:	call   0x1009750
 1009911:	mov    rbx,QWORD PTR [rsp+0xac8]
 1009919:	jmp    0x100991d
 100991b:	xor    eax,eax
 100991d:	mov    rcx,QWORD PTR [rsp+0xaa0]
 1009925:	xor    rcx,rsp
 1009928:	call   0x1006ba0
 100992d:	add    rsp,0xab0
 1009934:	pop    rdi
 1009935:	ret    
 1009936:	int3   
 1009937:	int3   
 1009938:	int3   
 1009939:	int3   
 100993a:	int3   
 100993b:	int3   
 100993c:	int3   
 100993d:	int3   
 100993e:	int3   
 100993f:	int3   
 1009940:	mov    QWORD PTR [rsp+0x10],rbx
 1009945:	mov    QWORD PTR [rsp+0x18],rsi
 100994a:	mov    QWORD PTR [rsp+0x20],rdi
 100994f:	mov    QWORD PTR [rsp+0x8],rcx
 1009954:	push   r12
 1009956:	sub    rsp,0x40
 100995a:	mov    r12,rdx
 100995d:	mov    rsi,rcx
 1009960:	xor    ebx,ebx
 1009962:	mov    DWORD PTR [rsp+0x20],ebx
 1009966:	mov    edx,0x4e20
 100996b:	mov    rcx,QWORD PTR [rcx+0x18]
 100996f:	call   QWORD PTR [rip+0xffffffffffff76cb]        # 0x1001040
 1009975:	test   eax,eax
 1009977:	je     0x1009997
 1009979:	cmp    eax,0x80
 100997e:	je     0x1009997
 1009980:	call   QWORD PTR [rip+0xffffffffffff76b2]        # 0x1001038
 1009986:	mov    ebx,eax
 1009988:	test   eax,eax
 100998a:	jle    0x1009a0b
 100998c:	movzx  ebx,ax
 100998f:	or     ebx,0x80070000
 1009995:	jmp    0x1009a0b
 1009997:	mov    edi,ebx
 1009999:	lea    rax,[rsi+0x28]
 100999d:	mov    QWORD PTR [rsp+0x28],rax
 10099a2:	mov    QWORD PTR [rsp+0x30],rbx
 10099a7:	data16 xchg ax,ax
 10099aa:	data16 xchg ax,ax
 10099ad:	data16 xchg ax,ax
 10099b0:	lea    rcx,[rsp+0x28]
 10099b5:	call   0x1009700
 10099ba:	test   rax,rax
 10099bd:	je     0x10099d8
 10099bf:	mov    r8,r12
 10099c2:	mov    rdx,rsi
 10099c5:	mov    rcx,rax
 10099c8:	call   0x1009470
 10099cd:	test   ebx,ebx
 10099cf:	cmovns ebx,eax
 10099d2:	mov    DWORD PTR [rsp+0x20],ebx
 10099d6:	jmp    0x10099b0
 10099d8:	jmp    0x10099fc
 10099da:	mov    edi,eax
 10099dc:	cmp    eax,0xc00000fd
 10099e1:	jne    0x10099e9
 10099e3:	call   QWORD PTR [rip+0xffffffffffff795f]        # 0x1001348
 10099e9:	mov    eax,0x80004005
 10099ee:	test   edi,edi
 10099f0:	cmovns edi,eax
 10099f3:	mov    rsi,QWORD PTR [rsp+0x50]
 10099f8:	mov    ebx,DWORD PTR [rsp+0x20]
 10099fc:	mov    rcx,QWORD PTR [rsi+0x18]
 1009a00:	call   QWORD PTR [rip+0xffffffffffff778a]        # 0x1001190
 1009a06:	test   ebx,ebx
 1009a08:	cmovns ebx,edi
 1009a0b:	mov    eax,ebx
 1009a0d:	mov    rbx,QWORD PTR [rsp+0x58]
 1009a12:	mov    rsi,QWORD PTR [rsp+0x60]
 1009a17:	mov    rdi,QWORD PTR [rsp+0x68]
 1009a1c:	add    rsp,0x40
 1009a20:	pop    r12
 1009a22:	ret    
 1009a23:	int3   
 1009a24:	int3   
 1009a25:	int3   
 1009a26:	int3   
 1009a27:	int3   
 1009a28:	int3   
 1009a29:	int3   
 1009a2a:	int3   
 1009a2b:	int3   
 1009a2c:	int3   
 1009a2d:	int3   
 1009a2e:	int3   
 1009a2f:	int3   
 1009a30:	rex push rbx
 1009a32:	sub    rsp,0x30
 1009a36:	test   rdx,rdx
 1009a39:	mov    rbx,rcx
 1009a3c:	je     0x1009aea
 1009a42:	mov    QWORD PTR [rsp+0x40],rdi
 1009a47:	lea    rdi,[rcx+0x1948]
 1009a4e:	xor    r10d,r10d
 1009a51:	mov    r8,rdi
 1009a54:	sub    rdx,rdi
 1009a57:	mov    r9d,0x104
 1009a5d:	data16 xchg ax,ax
 1009a60:	lea    rax,[r9+0x7ffffefa]
 1009a67:	test   rax,rax
 1009a6a:	je     0x1009a86
 1009a6c:	movzx  eax,WORD PTR [rdx+r8*1]
 1009a71:	test   ax,ax
 1009a74:	je     0x1009a86
 1009a76:	mov    WORD PTR [r8],ax
 1009a7a:	add    r8,0x2
 1009a7e:	sub    r9,0x1
 1009a82:	jne    0x1009a60
 1009a84:	jmp    0x1009a8b
 1009a86:	test   r9,r9
 1009a89:	jne    0x1009a95
 1009a8b:	sub    r8,0x2
 1009a8f:	mov    r10d,0x8007007a
 1009a95:	test   r10d,r10d
 1009a98:	mov    WORD PTR [r8],0x0
 1009a9e:	js     0x1009adc
 1009aa0:	call   0x1006470
 1009aa5:	lea    rcx,[rbx+0x1740]
 1009aac:	lea    r8,[rip+0xffffffffffff9335]        # 0x1002de8
 1009ab3:	mov    r9,rax
 1009ab6:	lea    rax,[rip+0xffffffffffff92fb]        # 0x1002db8
 1009abd:	mov    edx,0x104
 1009ac2:	mov    QWORD PTR [rsp+0x28],rax
 1009ac7:	mov    QWORD PTR [rsp+0x20],rdi
 1009acc:	call   0x1009750
 1009ad1:	mov    rdi,QWORD PTR [rsp+0x40]
 1009ad6:	add    rsp,0x30
 1009ada:	pop    rbx
 1009adb:	ret    
 1009adc:	mov    eax,r10d
 1009adf:	mov    rdi,QWORD PTR [rsp+0x40]
 1009ae4:	add    rsp,0x30
 1009ae8:	pop    rbx
 1009ae9:	ret    
 1009aea:	mov    eax,0x80070057
 1009aef:	add    rsp,0x30
 1009af3:	pop    rbx
 1009af4:	ret    
 1009af5:	int3   
 1009af6:	int3   
 1009af7:	int3   
 1009af8:	int3   
 1009af9:	int3   
 1009afa:	int3   
 1009afb:	int3   
 1009afc:	int3   
 1009afd:	int3   
 1009afe:	int3   
 1009aff:	int3   
 1009b00:	mov    QWORD PTR [rsp+0x20],rbx
 1009b05:	mov    QWORD PTR [rsp+0x10],rdx
 1009b0a:	mov    QWORD PTR [rsp+0x8],rcx
 1009b0f:	push   rsi
 1009b10:	push   rdi
 1009b11:	push   r12
 1009b13:	push   r13
 1009b15:	push   r14
 1009b17:	sub    rsp,0x20
 1009b1b:	mov    r14,rdx
 1009b1e:	mov    r13,rcx
 1009b21:	xor    esi,esi
 1009b23:	mov    r12,rsi
 1009b26:	mov    QWORD PTR [rsp+0x60],rsi
 1009b2b:	mov    QWORD PTR [rdx],rsi
 1009b2e:	add    rcx,0x8
 1009b32:	call   0x100a530
 1009b37:	test   eax,eax
 1009b39:	je     0x1009c3f
 1009b3f:	lea    rcx,[r13+0x8]
 1009b43:	call   0x100a550
 1009b48:	test   eax,eax
 1009b4a:	js     0x1009c3f
 1009b50:	call   QWORD PTR [rip+0xffffffffffff77f2]        # 0x1001348
 1009b56:	mov    edx,0x7530
 1009b5b:	mov    rcx,QWORD PTR [r13+0x20]
 1009b5f:	call   QWORD PTR [rip+0xffffffffffff74db]        # 0x1001040
 1009b65:	mov    edi,eax
 1009b67:	test   eax,eax
 1009b69:	je     0x1009b9e
 1009b6b:	cmp    eax,0x80
 1009b70:	je     0x1009b9e
 1009b72:	call   QWORD PTR [rip+0xffffffffffff74c0]        # 0x1001038
 1009b78:	mov    ebx,eax
 1009b7a:	test   eax,eax
 1009b7c:	jle    0x1009b87
 1009b7e:	movzx  ebx,ax
 1009b81:	or     ebx,0x80070000
 1009b87:	test   ebx,ebx
 1009b89:	js     0x1009bf8
 1009b8b:	test   edi,edi
 1009b8d:	jg     0x1009b93
 1009b8f:	mov    ebx,edi
 1009b91:	jmp    0x1009bf8
 1009b93:	movzx  ebx,di
 1009b96:	or     ebx,0x80070000
 1009b9c:	jmp    0x1009bf8
 1009b9e:	mov    ebx,esi
 1009ba0:	lea    rcx,[r13+0xe8]
 1009ba7:	mov    r8d,0x4e20
 1009bad:	mov    rdx,r13
 1009bb0:	call   0x100c070
 1009bb5:	jmp    0x1009be1
 1009bb7:	mov    ebx,eax
 1009bb9:	cmp    eax,0xc00000fd
 1009bbe:	jne    0x1009bc6
 1009bc0:	call   QWORD PTR [rip+0xffffffffffff7782]        # 0x1001348
 1009bc6:	mov    eax,0x80004005
 1009bcb:	test   ebx,ebx
 1009bcd:	cmovns ebx,eax
 1009bd0:	xor    esi,esi
 1009bd2:	mov    r13,QWORD PTR [rsp+0x50]
 1009bd7:	mov    r14,QWORD PTR [rsp+0x58]
 1009bdc:	mov    r12,QWORD PTR [rsp+0x60]
 1009be1:	test   ebx,ebx
 1009be3:	js     0x1009bee
 1009be5:	lea    r12,[r13+0xe8]
 1009bec:	jmp    0x1009bf8
 1009bee:	mov    rcx,QWORD PTR [r13+0x20]
 1009bf2:	call   QWORD PTR [rip+0xffffffffffff7598]        # 0x1001190
 1009bf8:	test   r12,r12
 1009bfb:	jne    0x1009c38
 1009bfd:	lea    rcx,[r13+0x10]
 1009c01:	mov    edx,0x1658
 1009c06:	call   0x100a2b0
 1009c0b:	test   rax,rax
 1009c0e:	je     0x1009c2b
 1009c10:	mov    r8d,0x4e20
 1009c16:	mov    rdx,r13
 1009c19:	mov    rcx,rax
 1009c1c:	call   0x100b6f0
 1009c21:	mov    r12,rax
 1009c24:	test   rax,rax
 1009c27:	jne    0x1009c33
 1009c29:	jmp    0x1009c2e
 1009c2b:	mov    r12,rsi
 1009c2e:	mov    esi,0x8007000e
 1009c33:	test   esi,esi
 1009c35:	cmovns ebx,esi
 1009c38:	mov    QWORD PTR [r14],r12
 1009c3b:	mov    eax,ebx
 1009c3d:	jmp    0x1009c44
 1009c3f:	mov    eax,0x80004005
 1009c44:	mov    rbx,QWORD PTR [rsp+0x68]
 1009c49:	add    rsp,0x20
 1009c4d:	pop    r14
 1009c4f:	pop    r13
 1009c51:	pop    r12
 1009c53:	pop    rdi
 1009c54:	pop    rsi
 1009c55:	ret    
 1009c56:	int3   
 1009c57:	int3   
 1009c58:	int3   
 1009c59:	int3   
 1009c5a:	int3   
 1009c5b:	int3   
 1009c5c:	int3   
 1009c5d:	int3   
 1009c5e:	int3   
 1009c5f:	int3   
 1009c60:	mov    QWORD PTR [rsp+0x8],rbx
 1009c65:	push   rdi
 1009c66:	sub    rsp,0x20
 1009c6a:	mov    rdx,QWORD PTR [rcx+0x20]
 1009c6e:	mov    rbx,rcx
 1009c71:	mov    eax,DWORD PTR [rdx+0x10]
 1009c74:	cmp    DWORD PTR [rdx+0xc],eax
 1009c77:	jb     0x1009cb0
 1009c79:	mov    rcx,QWORD PTR [rcx+0x10]
 1009c7d:	test   rcx,rcx
 1009c80:	je     0x1009cd6
 1009c82:	mov    rdi,QWORD PTR [rbx]
 1009c85:	lea    rdx,[rdi*8+0x18]
 1009c8d:	call   0x100a2b0
 1009c92:	test   rax,rax
 1009c95:	je     0x1009cd6
 1009c97:	xor    ecx,ecx
 1009c99:	mov    DWORD PTR [rax+0x10],edi
 1009c9c:	mov    QWORD PTR [rax],rcx
 1009c9f:	mov    DWORD PTR [rax+0x8],ecx
 1009ca2:	mov    DWORD PTR [rax+0xc],ecx
 1009ca5:	mov    rcx,QWORD PTR [rbx+0x20]
 1009ca9:	mov    QWORD PTR [rcx],rax
 1009cac:	mov    QWORD PTR [rbx+0x20],rax
 1009cb0:	mov    rcx,QWORD PTR [rbx+0x20]
 1009cb4:	mov    edx,DWORD PTR [rcx+0xc]
 1009cb7:	lea    eax,[rdx+0x1]
 1009cba:	mov    DWORD PTR [rcx+0xc],eax
 1009cbd:	mov    rax,QWORD PTR [rbx+0x20]
 1009cc1:	add    QWORD PTR [rbx+0x8],0x1
 1009cc6:	lea    rax,[rax+rdx*8+0x18]
 1009ccb:	mov    rbx,QWORD PTR [rsp+0x30]
 1009cd0:	add    rsp,0x20
 1009cd4:	pop    rdi
 1009cd5:	ret    
 1009cd6:	xor    eax,eax
 1009cd8:	mov    rbx,QWORD PTR [rsp+0x30]
 1009cdd:	add    rsp,0x20
 1009ce1:	pop    rdi
 1009ce2:	ret    
 1009ce3:	int3   
 1009ce4:	int3   
 1009ce5:	int3   
 1009ce6:	int3   
 1009ce7:	int3   
 1009ce8:	int3   
 1009ce9:	int3   
 1009cea:	int3   
 1009ceb:	int3   
 1009cec:	int3   
 1009ced:	int3   
 1009cee:	int3   
 1009cef:	int3   
 1009cf0:	mov    QWORD PTR [rsp+0x8],rbx
 1009cf5:	mov    QWORD PTR [rsp+0x10],rsi
 1009cfa:	push   rdi
 1009cfb:	sub    rsp,0x20
 1009cff:	lea    rax,[rip+0xffffffffffff90fa]        # 0x1002e00
 1009d06:	mov    rdi,rcx
 1009d09:	add    rcx,0x8
 1009d0d:	mov    QWORD PTR [rcx-0x8],rax
 1009d11:	call   0x100a510
 1009d16:	lea    rcx,[rdi+0x10]
 1009d1a:	call   0x100a290
 1009d1f:	lea    rbx,[rdi+0x28]
 1009d23:	xor    esi,esi
 1009d25:	mov    QWORD PTR [rdi+0x18],rsi
 1009d29:	mov    QWORD PTR [rdi+0x20],rsi
 1009d2d:	lea    rcx,[rbx+0x18]
 1009d31:	xor    edx,edx
 1009d33:	mov    r8d,0x80
 1009d39:	mov    QWORD PTR [rbx],rsi
 1009d3c:	mov    DWORD PTR [rbx+0x8],esi
 1009d3f:	mov    DWORD PTR [rbx+0xc],esi
 1009d42:	mov    DWORD PTR [rbx+0x10],0x10
 1009d49:	mov    DWORD PTR [rbx+0x14],esi
 1009d4c:	call   0x1006d28
 1009d51:	lea    rcx,[rdi+0xe8]
 1009d58:	xor    edx,edx
 1009d5a:	mov    r8d,0x4e20
 1009d60:	mov    QWORD PTR [rdi+0xc0],0x10
 1009d6b:	mov    QWORD PTR [rdi+0xc8],rsi
 1009d72:	mov    QWORD PTR [rdi+0xd0],rsi
 1009d79:	mov    QWORD PTR [rdi+0xd8],rbx
 1009d80:	mov    QWORD PTR [rdi+0xe0],rbx
 1009d87:	call   0x100b6f0
 1009d8c:	lea    rcx,[rdi+0x1740]
 1009d93:	xor    edx,edx
 1009d95:	mov    r8d,0x208
 1009d9b:	mov    DWORD PTR [rdi+0x1b50],esi
 1009da1:	mov    QWORD PTR [rdi+0x1b58],rsi
 1009da8:	call   0x1006d28
 1009dad:	lea    rcx,[rdi+0x1948]
 1009db4:	xor    edx,edx
 1009db6:	mov    r8d,0x208
 1009dbc:	call   0x1006d28
 1009dc1:	lea    rcx,[rdi+0xe8]
 1009dc8:	mov    rdx,rdi
 1009dcb:	call   0x100af00
 1009dd0:	mov    rbx,QWORD PTR [rsp+0x30]
 1009dd5:	mov    rsi,QWORD PTR [rsp+0x38]
 1009dda:	mov    rax,rdi
 1009ddd:	add    rsp,0x20
 1009de1:	pop    rdi
 1009de2:	ret    
 1009de3:	int3   
 1009de4:	int3   
 1009de5:	int3   
 1009de6:	int3   
 1009de7:	int3   
 1009de8:	int3   
 1009de9:	int3   
 1009dea:	int3   
 1009deb:	int3   
 1009dec:	int3   
 1009ded:	int3   
 1009dee:	int3   
 1009def:	int3   
 1009df0:	mov    QWORD PTR [rsp+0x18],rbx
 1009df5:	push   rdi
 1009df6:	sub    rsp,0x30
 1009dfa:	test   rdx,rdx
 1009dfd:	mov    rdi,rcx
 1009e00:	mov    QWORD PTR [rsp+0x48],0x0
 1009e09:	je     0x1009ed7
 1009e0f:	lea    rax,[rsp+0x48]
 1009e14:	mov    r9d,0x1
 1009e1a:	xor    r8d,r8d
 1009e1d:	mov    rcx,0xffffffff80000002
 1009e24:	mov    QWORD PTR [rsp+0x20],rax
 1009e29:	call   QWORD PTR [rip+0xffffffffffff71d1]        # 0x1001000
 1009e2f:	test   eax,eax
 1009e31:	jne    0x1009ecb
 1009e37:	mov    rcx,QWORD PTR [rsp+0x48]
 1009e3c:	mov    QWORD PTR [rsp+0x40],rsi
 1009e41:	lea    rsi,[rdi+0x1948]
 1009e48:	lea    rdx,[rip+0xffffffffffff9009]        # 0x1002e58
 1009e4f:	mov    r8,rsi
 1009e52:	mov    r9d,0x104
 1009e58:	call   0x100aa00
 1009e5d:	test   eax,eax
 1009e5f:	mov    ebx,eax
 1009e61:	js     0x1009ea8
 1009e63:	call   0x1006470
 1009e68:	lea    rcx,[rdi+0x1740]
 1009e6f:	lea    r8,[rip+0xffffffffffff8f72]        # 0x1002de8
 1009e76:	mov    r9,rax
 1009e79:	lea    rax,[rip+0xffffffffffff8f38]        # 0x1002db8
 1009e80:	mov    edx,0x104
 1009e85:	mov    QWORD PTR [rsp+0x28],rax
 1009e8a:	mov    QWORD PTR [rsp+0x20],rsi
 1009e8f:	call   0x1009750
 1009e94:	mov    rcx,QWORD PTR [rsp+0x48]
 1009e99:	mov    ebx,eax
 1009e9b:	call   QWORD PTR [rip+0xffffffffffff716f]        # 0x1001010
 1009ea1:	mov    rsi,QWORD PTR [rsp+0x40]
 1009ea6:	jmp    0x1009ede
 1009ea8:	cmp    eax,0x80070002
 1009ead:	jne    0x1009eb9
 1009eaf:	mov    rcx,rdi
 1009eb2:	call   0x10097e0
 1009eb7:	mov    ebx,eax
 1009eb9:	mov    rcx,QWORD PTR [rsp+0x48]
 1009ebe:	call   QWORD PTR [rip+0xffffffffffff714c]        # 0x1001010
 1009ec4:	mov    rsi,QWORD PTR [rsp+0x40]
 1009ec9:	jmp    0x1009ede
 1009ecb:	mov    rcx,rdi
 1009ece:	call   0x10097e0
 1009ed3:	mov    ebx,eax
 1009ed5:	jmp    0x1009ede
 1009ed7:	call   0x10097e0
 1009edc:	mov    ebx,eax
 1009ede:	test   ebx,ebx
 1009ee0:	jns    0x1009f0a
 1009ee2:	lea    rcx,[rdi+0x1948]
 1009ee9:	xor    edx,edx
 1009eeb:	mov    r8d,0x208
 1009ef1:	call   0x1006d28
 1009ef6:	lea    rcx,[rdi+0x1740]
 1009efd:	xor    edx,edx
 1009eff:	mov    r8d,0x208
 1009f05:	call   0x1006d28
 1009f0a:	mov    eax,ebx
 1009f0c:	mov    rbx,QWORD PTR [rsp+0x50]
 1009f11:	add    rsp,0x30
 1009f15:	pop    rdi
 1009f16:	ret    
 1009f17:	int3   
 1009f18:	int3   
 1009f19:	int3   
 1009f1a:	int3   
 1009f1b:	int3   
 1009f1c:	int3   
 1009f1d:	int3   
 1009f1e:	int3   
 1009f1f:	int3   
 1009f20:	mov    QWORD PTR [rsp+0x18],rbp
 1009f25:	push   rdi
 1009f26:	sub    rsp,0x20
 1009f2a:	test   edx,edx
 1009f2c:	mov    rdi,rcx
 1009f2f:	je     0x1009f3b
 1009f31:	mov    DWORD PTR [rcx+0x1b50],0x1
 1009f3b:	add    rcx,0x8
 1009f3f:	call   0x100a790
 1009f44:	test   eax,eax
 1009f46:	je     0x100a066
 1009f4c:	mov    QWORD PTR [rsp+0x30],rbx
 1009f51:	mov    QWORD PTR [rsp+0x38],rsi
 1009f56:	lea    rsi,[rdi+0x10]
 1009f5a:	mov    rcx,rsi
 1009f5d:	call   0x100a700
 1009f62:	test   eax,eax
 1009f64:	mov    ebx,eax
 1009f66:	js     0x100a051
 1009f6c:	xor    r8d,r8d
 1009f6f:	xor    edx,edx
 1009f71:	xor    ecx,ecx
 1009f73:	mov    QWORD PTR [rdi+0xd0],rsi
 1009f7a:	call   QWORD PTR [rip+0xffffffffffff7200]        # 0x1001180
 1009f80:	test   rax,rax
 1009f83:	mov    QWORD PTR [rdi+0x18],rax
 1009f87:	jne    0x1009f9e
 1009f89:	call   QWORD PTR [rip+0xffffffffffff70a9]        # 0x1001038
 1009f8f:	test   eax,eax
 1009f91:	mov    ebx,eax
 1009f93:	jle    0x1009f9e
 1009f95:	movzx  ebx,ax
 1009f98:	or     ebx,0x80070000
 1009f9e:	test   ebx,ebx
 1009fa0:	js     0x100a051
 1009fa6:	mov    rcx,QWORD PTR [rdi+0x18]
 1009faa:	mov    edx,0x2
 1009faf:	mov    r8d,edx
 1009fb2:	call   QWORD PTR [rip+0xffffffffffff71d0]        # 0x1001188
 1009fb8:	test   eax,eax
 1009fba:	jne    0x1009fd1
 1009fbc:	call   QWORD PTR [rip+0xffffffffffff7076]        # 0x1001038
 1009fc2:	test   eax,eax
 1009fc4:	mov    ebx,eax
 1009fc6:	jle    0x1009fd1
 1009fc8:	movzx  ebx,ax
 1009fcb:	or     ebx,0x80070000
 1009fd1:	test   ebx,ebx
 1009fd3:	js     0x100a051
 1009fd5:	xor    r8d,r8d
 1009fd8:	xor    edx,edx
 1009fda:	xor    ecx,ecx
 1009fdc:	call   QWORD PTR [rip+0xffffffffffff719e]        # 0x1001180
 1009fe2:	test   rax,rax
 1009fe5:	mov    QWORD PTR [rdi+0x20],rax
 1009fe9:	jne    0x100a000
 1009feb:	call   QWORD PTR [rip+0xffffffffffff7047]        # 0x1001038
 1009ff1:	test   eax,eax
 1009ff3:	mov    ebx,eax
 1009ff5:	jle    0x100a000
 1009ff7:	movzx  ebx,ax
 1009ffa:	or     ebx,0x80070000
 100a000:	test   ebx,ebx
 100a002:	js     0x100a051
 100a004:	mov    rcx,QWORD PTR [rdi+0x20]
 100a008:	mov    edx,0x2
 100a00d:	mov    r8d,edx
 100a010:	call   QWORD PTR [rip+0xffffffffffff7172]        # 0x1001188
 100a016:	test   eax,eax
 100a018:	jne    0x100a02f
 100a01a:	call   QWORD PTR [rip+0xffffffffffff7018]        # 0x1001038
 100a020:	test   eax,eax
 100a022:	mov    ebx,eax
 100a024:	jle    0x100a02f
 100a026:	movzx  ebx,ax
 100a029:	or     ebx,0x80070000
 100a02f:	test   ebx,ebx
 100a031:	js     0x100a051
 100a033:	cmp    DWORD PTR [rdi+0x1b50],0x0
 100a03a:	je     0x100a040
 100a03c:	xor    edx,edx
 100a03e:	jmp    0x100a047
 100a040:	lea    rdx,[rip+0xffffffffffff8d19]        # 0x1002d60
 100a047:	mov    rcx,rdi
 100a04a:	call   0x1009df0
 100a04f:	mov    ebx,eax
 100a051:	lea    rcx,[rdi+0x8]
 100a055:	mov    edx,ebx
 100a057:	call   0x100a7f0
 100a05c:	mov    rsi,QWORD PTR [rsp+0x38]
 100a061:	mov    rbx,QWORD PTR [rsp+0x30]
 100a066:	call   0x100a560
 100a06b:	lea    rcx,[rdi+0x8]
 100a06f:	mov    rbp,QWORD PTR [rsp+0x40]
 100a074:	add    rsp,0x20
 100a078:	pop    rdi
 100a079:	jmp    0x100a550
 100a07e:	int3   
 100a07f:	int3   
 100a080:	int3   
 100a081:	int3   
 100a082:	int3   
 100a083:	int3   
 100a084:	int3   
 100a085:	int3   
 100a086:	int3   
 100a087:	int3   
 100a088:	int3   
 100a089:	int3   
 100a08a:	int3   
 100a08b:	int3   
 100a08c:	int3   
 100a08d:	int3   
 100a08e:	int3   
 100a08f:	int3   
 100a090:	mov    r11,rsp
 100a093:	mov    QWORD PTR [r11+0x8],rbx
 100a097:	mov    QWORD PTR [r11+0x10],rsi
 100a09b:	mov    QWORD PTR [r11+0x20],rdi
 100a09f:	mov    QWORD PTR [r11+0x18],r8
 100a0a3:	push   r12
 100a0a5:	push   r13
 100a0a7:	push   r14
 100a0a9:	sub    rsp,0x40
 100a0ad:	mov    r13,r8
 100a0b0:	mov    r14,rdx
 100a0b3:	mov    r12,rcx
 100a0b6:	xor    esi,esi
 100a0b8:	mov    DWORD PTR [rsp+0x20],esi
 100a0bc:	mov    QWORD PTR [r11-0x30],rsi
 100a0c0:	mov    edi,esi
 100a0c2:	lea    rax,[rcx+0x28]
 100a0c6:	mov    QWORD PTR [r11-0x28],rax
 100a0ca:	mov    QWORD PTR [r11-0x20],rsi
 100a0ce:	xchg   ax,ax
 100a0d0:	lea    rcx,[rsp+0x30]
 100a0d5:	call   0x1009700
 100a0da:	mov    rbx,rax
 100a0dd:	test   rax,rax
 100a0e0:	je     0x100a0f1
 100a0e2:	mov    rcx,rax
 100a0e5:	call   0x100a430
 100a0ea:	test   rax,rax
 100a0ed:	je     0x100a0f1
 100a0ef:	jmp    0x100a0d0
 100a0f1:	test   rbx,rbx
 100a0f4:	jne    0x100a106
 100a0f6:	lea    rcx,[r12+0xc0]
 100a0fe:	call   0x1009c60
 100a103:	mov    rbx,rax
 100a106:	test   rbx,rbx
 100a109:	je     0x100a131
 100a10b:	xor    eax,eax
 100a10d:	mov    QWORD PTR [rbx],rax
 100a110:	mov    rcx,rbx
 100a113:	call   0x100a340
 100a118:	mov    rdx,r14
 100a11b:	mov    rcx,rbx
 100a11e:	call   0x100a3c0
 100a123:	mov    DWORD PTR [rsp+0x20],eax
 100a127:	mov    rsi,rbx
 100a12a:	mov    QWORD PTR [rsp+0x28],rbx
 100a12f:	jmp    0x100a13a
 100a131:	mov    eax,0x8007000e
 100a136:	mov    DWORD PTR [rsp+0x20],eax
 100a13a:	jmp    0x100a163
 100a13c:	mov    edi,eax
 100a13e:	cmp    eax,0xc00000fd
 100a143:	jne    0x100a14b
 100a145:	call   QWORD PTR [rip+0xffffffffffff71fd]        # 0x1001348
 100a14b:	mov    eax,0x80004005
 100a150:	test   edi,edi
 100a152:	cmovns edi,eax
 100a155:	mov    r13,QWORD PTR [rsp+0x70]
 100a15a:	mov    eax,DWORD PTR [rsp+0x20]
 100a15e:	mov    rsi,QWORD PTR [rsp+0x28]
 100a163:	mov    QWORD PTR [r13+0x0],rsi
 100a167:	test   eax,eax
 100a169:	cmovns eax,edi
 100a16c:	mov    rbx,QWORD PTR [rsp+0x60]
 100a171:	mov    rsi,QWORD PTR [rsp+0x68]
 100a176:	mov    rdi,QWORD PTR [rsp+0x78]
 100a17b:	add    rsp,0x40
 100a17f:	pop    r14
 100a181:	pop    r13
 100a183:	pop    r12
 100a185:	ret    
 100a186:	int3   
 100a187:	int3   
 100a188:	int3   
 100a189:	int3   
 100a18a:	int3   
 100a18b:	int3   
 100a18c:	int3   
 100a18d:	int3   
 100a18e:	int3   
 100a18f:	int3   
 100a190:	mov    QWORD PTR [rsp+0x10],rbx
 100a195:	mov    QWORD PTR [rsp+0x18],r8
 100a19a:	mov    QWORD PTR [rsp+0x8],rcx
 100a19f:	push   rsi
 100a1a0:	push   rdi
 100a1a1:	push   r12
 100a1a3:	sub    rsp,0x30
 100a1a7:	mov    rsi,r8
 100a1aa:	mov    rbx,rdx
 100a1ad:	mov    rdi,rcx
 100a1b0:	xor    r12d,r12d
 100a1b3:	mov    DWORD PTR [rsp+0x20],r12d
 100a1b8:	mov    QWORD PTR [rsp+0x68],r12
 100a1bd:	add    rcx,0x8
 100a1c1:	call   0x100a530
 100a1c6:	test   eax,eax
 100a1c8:	je     0x100a251
 100a1ce:	or     edx,0xffffffff
 100a1d1:	mov    rcx,QWORD PTR [rdi+0x18]
 100a1d5:	call   QWORD PTR [rip+0xffffffffffff6e65]        # 0x1001040
 100a1db:	test   eax,eax
 100a1dd:	je     0x100a1fd
 100a1df:	cmp    eax,0x80
 100a1e4:	je     0x100a1fd
 100a1e6:	call   QWORD PTR [rip+0xffffffffffff6e4c]        # 0x1001038
 100a1ec:	mov    ebx,eax
 100a1ee:	test   eax,eax
 100a1f0:	jle    0x100a263
 100a1f2:	movzx  ebx,ax
 100a1f5:	or     ebx,0x80070000
 100a1fb:	jmp    0x100a263
 100a1fd:	lea    r8,[rsp+0x68]
 100a202:	mov    rdx,rbx
 100a205:	mov    rcx,rdi
 100a208:	call   0x100a090
 100a20d:	mov    ebx,eax
 100a20f:	mov    DWORD PTR [rsp+0x20],eax
 100a213:	jmp    0x100a23f
 100a215:	mov    ebx,eax
 100a217:	cmp    eax,0xc00000fd
 100a21c:	jne    0x100a224
 100a21e:	call   QWORD PTR [rip+0xffffffffffff7124]        # 0x1001348
 100a224:	mov    eax,0x80004005
 100a229:	test   ebx,ebx
 100a22b:	cmovns ebx,eax
 100a22e:	mov    r12d,ebx
 100a231:	mov    rdi,QWORD PTR [rsp+0x50]
 100a236:	mov    rsi,QWORD PTR [rsp+0x60]
 100a23b:	mov    ebx,DWORD PTR [rsp+0x20]
 100a23f:	test   ebx,ebx
 100a241:	cmovns ebx,r12d
 100a245:	mov    rcx,QWORD PTR [rdi+0x18]
 100a249:	call   QWORD PTR [rip+0xffffffffffff6f41]        # 0x1001190
 100a24f:	jmp    0x100a263
 100a251:	lea    r8,[rsp+0x68]
 100a256:	mov    rdx,rbx
 100a259:	mov    rcx,rdi
 100a25c:	call   0x100a090
 100a261:	mov    ebx,eax
 100a263:	mov    rcx,QWORD PTR [rsp+0x68]
 100a268:	mov    QWORD PTR [rsi],rcx
 100a26b:	mov    eax,ebx
 100a26d:	mov    rbx,QWORD PTR [rsp+0x58]
 100a272:	add    rsp,0x30
 100a276:	pop    r12
 100a278:	pop    rdi
 100a279:	pop    rsi
 100a27a:	ret    
 100a27b:	int3   
 100a27c:	int3   
 100a27d:	int3   
 100a27e:	int3   
 100a27f:	int3   
 100a280:	int3   
 100a281:	int3   
 100a282:	int3   
 100a283:	int3   
 100a284:	int3   
 100a285:	int3   
 100a286:	int3   
 100a287:	int3   
 100a288:	int3   
 100a289:	int3   
 100a28a:	int3   
 100a28b:	int3   
 100a28c:	int3   
 100a28d:	int3   
 100a28e:	int3   
 100a28f:	int3   
 100a290:	mov    QWORD PTR [rcx],0x0
 100a297:	mov    rax,rcx
 100a29a:	ret    
 100a29b:	int3   
 100a29c:	int3   
 100a29d:	int3   
 100a29e:	int3   
 100a29f:	int3   
 100a2a0:	int3   
 100a2a1:	int3   
 100a2a2:	int3   
 100a2a3:	int3   
 100a2a4:	int3   
 100a2a5:	int3   
 100a2a6:	int3   
 100a2a7:	int3   
 100a2a8:	int3   
 100a2a9:	int3   
 100a2aa:	int3   
 100a2ab:	int3   
 100a2ac:	int3   
 100a2ad:	int3   
 100a2ae:	int3   
 100a2af:	int3   
 100a2b0:	mov    QWORD PTR [rsp+0x8],rbx
 100a2b5:	push   rdi
 100a2b6:	sub    rsp,0x30
 100a2ba:	xor    edi,edi
 100a2bc:	mov    QWORD PTR [rsp+0x20],rdi
 100a2c1:	mov    ebx,edi
 100a2c3:	mov    r8,rdx
 100a2c6:	xor    edx,edx
 100a2c8:	mov    rcx,QWORD PTR [rcx]
 100a2cb:	call   QWORD PTR [rip+0xffffffffffff6f4f]        # 0x1001220
 100a2d1:	mov    QWORD PTR [rsp+0x20],rax
 100a2d6:	jmp    0x100a2f8
 100a2d8:	mov    ebx,eax
 100a2da:	cmp    eax,0xc00000fd
 100a2df:	jne    0x100a2e7
 100a2e1:	call   QWORD PTR [rip+0xffffffffffff7061]        # 0x1001348
 100a2e7:	mov    eax,0x80004005
 100a2ec:	test   ebx,ebx
 100a2ee:	cmovns ebx,eax
 100a2f1:	xor    edi,edi
 100a2f3:	mov    rax,QWORD PTR [rsp+0x20]
 100a2f8:	test   ebx,ebx
 100a2fa:	cmovs  rax,rdi
 100a2fe:	mov    rbx,QWORD PTR [rsp+0x40]
 100a303:	add    rsp,0x30
 100a307:	pop    rdi
 100a308:	ret    
 100a309:	int3   
 100a30a:	int3   
 100a30b:	int3   
 100a30c:	int3   
 100a30d:	int3   
 100a30e:	int3   
 100a30f:	int3   
 100a310:	sub    rsp,0x28
 100a314:	mov    r8,rdx
 100a317:	xor    edx,edx
 100a319:	mov    rcx,QWORD PTR [rcx]
 100a31c:	call   QWORD PTR [rip+0xffffffffffff6ef6]        # 0x1001218
 100a322:	jmp    0x100a332
 100a324:	cmp    eax,0xc00000fd
 100a329:	jne    0x100a332
 100a32b:	call   QWORD PTR [rip+0xffffffffffff7017]        # 0x1001348
 100a331:	nop
 100a332:	add    rsp,0x28
 100a336:	ret    
 100a337:	int3   
 100a338:	int3   
 100a339:	int3   
 100a33a:	int3   
 100a33b:	int3   
 100a33c:	int3   
 100a33d:	int3   
 100a33e:	int3   
 100a33f:	int3   
 100a340:	mov    QWORD PTR [rcx],0x0
 100a347:	mov    rax,rcx
 100a34a:	ret    
 100a34b:	int3   
 100a34c:	int3   
 100a34d:	int3   
 100a34e:	int3   
 100a34f:	int3   
 100a350:	int3   
 100a351:	int3   
 100a352:	int3   
 100a353:	int3   
 100a354:	int3   
 100a355:	int3   
 100a356:	int3   
 100a357:	int3   
 100a358:	int3   
 100a359:	int3   
 100a35a:	int3   
 100a35b:	int3   
 100a35c:	int3   
 100a35d:	int3   
 100a35e:	int3   
 100a35f:	int3   
 100a360:	mov    QWORD PTR [rsp+0x10],rbx
 100a365:	mov    QWORD PTR [rsp+0x8],rcx
 100a36a:	push   rdi
 100a36b:	sub    rsp,0x20
 100a36f:	mov    rdi,rcx
 100a372:	xor    ebx,ebx
 100a374:	mov    rcx,QWORD PTR [rcx]
 100a377:	test   rcx,rcx
 100a37a:	je     0x100a382
 100a37c:	mov    rax,QWORD PTR [rcx]
 100a37f:	call   QWORD PTR [rax+0x10]
 100a382:	jmp    0x100a3a2
 100a384:	mov    ebx,eax
 100a386:	cmp    eax,0xc00000fd
 100a38b:	jne    0x100a393
 100a38d:	call   QWORD PTR [rip+0xffffffffffff6fb5]        # 0x1001348
 100a393:	mov    eax,0x80004005
 100a398:	test   ebx,ebx
 100a39a:	cmovns ebx,eax
 100a39d:	mov    rdi,QWORD PTR [rsp+0x30]
 100a3a2:	mov    QWORD PTR [rdi],0x0
 100a3a9:	mov    eax,ebx
 100a3ab:	mov    rbx,QWORD PTR [rsp+0x38]
 100a3b0:	add    rsp,0x20
 100a3b4:	pop    rdi
 100a3b5:	ret    
 100a3b6:	int3   
 100a3b7:	int3   
 100a3b8:	int3   
 100a3b9:	int3   
 100a3ba:	int3   
 100a3bb:	int3   
 100a3bc:	int3   
 100a3bd:	int3   
 100a3be:	int3   
 100a3bf:	int3   
 100a3c0:	mov    QWORD PTR [rsp+0x8],rbx
 100a3c5:	mov    QWORD PTR [rsp+0x10],rsi
 100a3ca:	push   rdi
 100a3cb:	sub    rsp,0x20
 100a3cf:	mov    rdi,rdx
 100a3d2:	mov    rsi,rcx
 100a3d5:	call   0x100a360
 100a3da:	xor    ebx,ebx
 100a3dc:	test   rdi,rdi
 100a3df:	je     0x100a3ea
 100a3e1:	mov    rax,QWORD PTR [rdi]
 100a3e4:	mov    rcx,rdi
 100a3e7:	call   QWORD PTR [rax+0x8]
 100a3ea:	mov    QWORD PTR [rsi],rdi
 100a3ed:	jmp    0x100a408
 100a3ef:	mov    ebx,eax
 100a3f1:	cmp    eax,0xc00000fd
 100a3f6:	jne    0x100a3fe
 100a3f8:	call   QWORD PTR [rip+0xffffffffffff6f4a]        # 0x1001348
 100a3fe:	mov    eax,0x80004005
 100a403:	test   ebx,ebx
 100a405:	cmovns ebx,eax
 100a408:	mov    eax,ebx
 100a40a:	mov    rbx,QWORD PTR [rsp+0x30]
 100a40f:	mov    rsi,QWORD PTR [rsp+0x38]
 100a414:	add    rsp,0x20
 100a418:	pop    rdi
 100a419:	ret    
 100a41a:	int3   
 100a41b:	int3   
 100a41c:	int3   
 100a41d:	int3   
 100a41e:	int3   
 100a41f:	int3   
 100a420:	mov    QWORD PTR [rcx],0x0
 100a427:	ret    
 100a428:	int3   
 100a429:	int3   
 100a42a:	int3   
 100a42b:	int3   
 100a42c:	int3   
 100a42d:	int3   
 100a42e:	int3   
 100a42f:	int3   
 100a430:	mov    rax,QWORD PTR [rcx]
 100a433:	ret    
 100a434:	int3   
 100a435:	int3   
 100a436:	int3   
 100a437:	int3   
 100a438:	int3   
 100a439:	int3   
 100a43a:	int3   
 100a43b:	int3   
 100a43c:	int3   
 100a43d:	int3   
 100a43e:	int3   
 100a43f:	int3   
 100a440:	or     r9d,0xffffffff
 100a444:	test   rdx,rdx
 100a447:	mov    r10,rcx
 100a44a:	je     0x100a482
 100a44c:	lea    r11,[rip+0xffffffffffff8a1d]        # 0x1002e70
 100a453:	nop
 100a454:	data16 data16 xchg ax,ax
 100a458:	data16 data16 xchg ax,ax
 100a45c:	data16 data16 xchg ax,ax
 100a460:	movzx  r8d,BYTE PTR [r10]
 100a464:	mov    ecx,r9d
 100a467:	add    r10,0x1
 100a46b:	xor    r8b,r9b
 100a46e:	shr    ecx,0x8
 100a471:	movzx  eax,r8b
 100a475:	mov    r9d,DWORD PTR [r11+rax*4]
 100a479:	xor    r9d,ecx
 100a47c:	sub    rdx,0x1
 100a480:	jne    0x100a460
 100a482:	mov    eax,r9d
 100a485:	ret    
 100a486:	int3   
 100a487:	int3   
 100a488:	int3   
 100a489:	int3   
 100a48a:	int3   
 100a48b:	int3   
 100a48c:	int3   
 100a48d:	int3   
 100a48e:	int3   
 100a48f:	int3   
 100a490:	sub    rsp,0x8
 100a494:	test   rcx,rcx
 100a497:	mov    r8,rcx
 100a49a:	je     0x100a4fa
 100a49c:	mov    QWORD PTR [rsp],rdi
 100a4a0:	or     rcx,0xffffffffffffffff
 100a4a4:	xor    eax,eax
 100a4a6:	mov    rdi,r8
 100a4a9:	repnz scas ax,WORD PTR es:[rdi]
 100a4ac:	mov    edi,0xffffffff
 100a4b1:	not    rcx
 100a4b4:	lea    r9,[rcx-0x1]
 100a4b8:	add    r9,r9
 100a4bb:	je     0x100a4ef
 100a4bd:	lea    r10,[rip+0xffffffffffff89ac]        # 0x1002e70
 100a4c4:	data16 data16 xchg ax,ax
 100a4c8:	data16 data16 xchg ax,ax
 100a4cc:	data16 data16 xchg ax,ax
 100a4d0:	movzx  edx,BYTE PTR [r8]
 100a4d4:	mov    eax,edi
 100a4d6:	add    r8,0x1
 100a4da:	xor    dl,dil
 100a4dd:	shr    eax,0x8
 100a4e0:	movzx  ecx,dl
 100a4e3:	mov    edi,DWORD PTR [r10+rcx*4]
 100a4e7:	xor    edi,eax
 100a4e9:	sub    r9,0x1
 100a4ed:	jne    0x100a4d0
 100a4ef:	mov    eax,edi
 100a4f1:	mov    rdi,QWORD PTR [rsp]
 100a4f5:	add    rsp,0x8
 100a4f9:	ret    
 100a4fa:	xor    eax,eax
 100a4fc:	add    rsp,0x8
 100a500:	ret    
 100a501:	int3   
 100a502:	int3   
 100a503:	int3   
 100a504:	int3   
 100a505:	int3   
 100a506:	int3   
 100a507:	int3   
 100a508:	int3   
 100a509:	int3   
 100a50a:	int3   
 100a50b:	int3   
 100a50c:	int3   
 100a50d:	int3   
 100a50e:	int3   
 100a50f:	int3   
 100a510:	xor    eax,eax
 100a512:	mov    DWORD PTR [rcx],eax
 100a514:	mov    DWORD PTR [rcx+0x4],eax
 100a517:	mov    rax,rcx
 100a51a:	ret    
 100a51b:	int3   
 100a51c:	int3   
 100a51d:	int3   
 100a51e:	int3   
 100a51f:	int3   
 100a520:	int3   
 100a521:	int3   
 100a522:	int3   
 100a523:	int3   
 100a524:	int3   
 100a525:	int3   
 100a526:	int3   
 100a527:	int3   
 100a528:	int3   
 100a529:	int3   
 100a52a:	int3   
 100a52b:	int3   
 100a52c:	int3   
 100a52d:	int3   
 100a52e:	int3   
 100a52f:	int3   
 100a530:	mov    edx,DWORD PTR [rcx]
 100a532:	xor    eax,eax
 100a534:	cmp    edx,0x2
 100a537:	sete   al
 100a53a:	ret    
 100a53b:	int3   
 100a53c:	int3   
 100a53d:	int3   
 100a53e:	int3   
 100a53f:	int3   
 100a540:	int3   
 100a541:	int3   
 100a542:	int3   
 100a543:	int3   
 100a544:	int3   
 100a545:	int3   
 100a546:	int3   
 100a547:	int3   
 100a548:	int3   
 100a549:	int3   
 100a54a:	int3   
 100a54b:	int3   
 100a54c:	int3   
 100a54d:	int3   
 100a54e:	int3   
 100a54f:	int3   
 100a550:	mov    eax,DWORD PTR [rcx+0x4]
 100a553:	ret    
 100a554:	int3   
 100a555:	int3   
 100a556:	int3   
 100a557:	int3   
 100a558:	int3   
 100a559:	int3   
 100a55a:	int3   
 100a55b:	int3   
 100a55c:	int3   
 100a55d:	int3   
 100a55e:	int3   
 100a55f:	int3   
 100a560:	rex push rbx
 100a562:	sub    rsp,0x50
 100a566:	lea    rcx,[rip+0xffffffffffff8d1b]        # 0x1003288
 100a56d:	call   QWORD PTR [rip+0xffffffffffff6b9d]        # 0x1001110
 100a573:	lea    rdx,[rip+0xffffffffffff8cf6]        # 0x1003270
 100a57a:	mov    rcx,rax
 100a57d:	mov    rbx,rax
 100a580:	call   QWORD PTR [rip+0xffffffffffff6d4a]        # 0x10012d0
 100a586:	test   rax,rax
 100a589:	mov    QWORD PTR [rip+0x75d0],rax        # 0x1011b60
 100a590:	jne    0x100a59b
 100a592:	mov    rcx,rbx
 100a595:	call   QWORD PTR [rip+0xffffffffffff6b3d]        # 0x10010d8
 100a59b:	lea    rcx,[rsp+0x20]
 100a5a0:	call   QWORD PTR [rip+0xffffffffffff6bd2]        # 0x1001178
 100a5a6:	mov    r11d,DWORD PTR [rsp+0x24]
 100a5ab:	mov    DWORD PTR [rip+0x75b6],r11d        # 0x1011b68
 100a5b2:	add    rsp,0x50
 100a5b6:	pop    rbx
 100a5b7:	ret    
 100a5b8:	int3   
 100a5b9:	int3   
 100a5ba:	int3   
 100a5bb:	int3   
 100a5bc:	int3   
 100a5bd:	int3   
 100a5be:	int3   
 100a5bf:	int3   
 100a5c0:	mov    QWORD PTR [rsp+0x18],rsi
 100a5c5:	push   rdi
 100a5c6:	sub    rsp,0x60
 100a5ca:	test   rcx,rcx
 100a5cd:	mov    rsi,rdx
 100a5d0:	mov    rdi,rcx
 100a5d3:	jne    0x100a5e5
 100a5d5:	xor    eax,eax
 100a5d7:	mov    rsi,QWORD PTR [rsp+0x80]
 100a5df:	add    rsp,0x60
 100a5e3:	pop    rdi
 100a5e4:	ret    
 100a5e5:	mov    QWORD PTR [rsp+0x70],rbx
 100a5ea:	mov    QWORD PTR [rsp+0x78],rbp
 100a5ef:	mov    eax,0xee
 100a5f4:	mov    ebp,0xcc
 100a5f9:	test   r8d,r8d
 100a5fc:	mov    rbx,rcx
 100a5ff:	cmovne ebp,eax
 100a602:	cmp    QWORD PTR [rip+0x7556],0x0        # 0x1011b60
 100a60a:	je     0x100a67a
 100a60c:	mov    QWORD PTR [rsp+0x20],rbx
 100a611:	call   QWORD PTR [rip+0xffffffffffff6c91]        # 0x10012a8
 100a617:	lea    rdx,[rsp+0x20]
 100a61c:	mov    rcx,rax
 100a61f:	mov    r8d,0x10
 100a625:	call   QWORD PTR [rip+0x7535]        # 0x1011b60
 100a62b:	test   eax,eax
 100a62d:	je     0x100a67a
 100a62f:	mov    rax,QWORD PTR [rsp+0x28]
 100a634:	test   al,0x1
 100a636:	je     0x100a67a
 100a638:	shr    rax,0x4
 100a63c:	and    eax,0x7ff
 100a641:	test   ebp,eax
 100a643:	je     0x100a6df
 100a649:	mov    edx,DWORD PTR [rip+0x7519]        # 0x1011b68
 100a64f:	lea    ecx,[rdx-0x1]
 100a652:	not    rcx
 100a655:	and    rbx,rcx
 100a658:	mov    rcx,rsi
 100a65b:	add    rbx,rdx
 100a65e:	mov    rax,rbx
 100a661:	sub    rax,rdi
 100a664:	cmp    rax,rsi
 100a667:	cmovb  rcx,rax
 100a66b:	add    rdi,rcx
 100a66e:	sub    rsi,rcx
 100a671:	jne    0x100a6d6
 100a673:	mov    eax,0x1
 100a678:	jmp    0x100a6e1
 100a67a:	lea    rdx,[rsp+0x30]
 100a67f:	mov    r8d,0x30
 100a685:	mov    rcx,rbx
 100a688:	call   QWORD PTR [rip+0xffffffffffff6ae2]        # 0x1001170
 100a68e:	cmp    rax,0x30
 100a692:	jne    0x100a6df
 100a694:	mov    rcx,QWORD PTR [rsp+0x30]
 100a699:	mov    rbx,QWORD PTR [rsp+0x48]
 100a69e:	add    rbx,rcx
 100a6a1:	cmp    rdi,rbx
 100a6a4:	jae    0x100a6d6
 100a6a6:	cmp    DWORD PTR [rsp+0x50],0x1000
 100a6ae:	jne    0x100a6df
 100a6b0:	mov    eax,DWORD PTR [rsp+0x54]
 100a6b4:	test   ebp,eax
 100a6b6:	je     0x100a6df
 100a6b8:	bt     eax,0x8
 100a6bc:	jb     0x100a6df
 100a6be:	mov    rcx,rsi
 100a6c1:	mov    rax,rbx
 100a6c4:	sub    rax,rdi
 100a6c7:	cmp    rax,rsi
 100a6ca:	cmovb  rcx,rax
 100a6ce:	add    rdi,rcx
 100a6d1:	sub    rsi,rcx
 100a6d4:	je     0x100a673
 100a6d6:	cmp    rbx,rdi
 100a6d9:	jbe    0x100a602
 100a6df:	xor    eax,eax
 100a6e1:	mov    rbx,QWORD PTR [rsp+0x70]
 100a6e6:	mov    rbp,QWORD PTR [rsp+0x78]
 100a6eb:	mov    rsi,QWORD PTR [rsp+0x80]
 100a6f3:	add    rsp,0x60
 100a6f7:	pop    rdi
 100a6f8:	ret    
 100a6f9:	int3   
 100a6fa:	int3   
 100a6fb:	int3   
 100a6fc:	int3   
 100a6fd:	int3   
 100a6fe:	int3   
 100a6ff:	int3   
 100a700:	mov    QWORD PTR [rsp+0x8],rbx
 100a705:	mov    QWORD PTR [rsp+0x10],rsi
 100a70a:	push   rdi
 100a70b:	sub    rsp,0x30
 100a70f:	mov    rsi,rcx
 100a712:	xor    ebx,ebx
 100a714:	mov    DWORD PTR [rsp+0x20],ebx
 100a718:	mov    edi,ebx
 100a71a:	cmp    QWORD PTR [rcx],rbx
 100a71d:	jne    0x100a750
 100a71f:	xor    r8d,r8d
 100a722:	mov    edx,0x10000
 100a727:	xor    ecx,ecx
 100a729:	call   QWORD PTR [rip+0xffffffffffff6a39]        # 0x1001168
 100a72f:	mov    QWORD PTR [rsi],rax
 100a732:	test   rax,rax
 100a735:	jne    0x100a750
 100a737:	call   QWORD PTR [rip+0xffffffffffff68fb]        # 0x1001038
 100a73d:	mov    ebx,eax
 100a73f:	test   eax,eax
 100a741:	jle    0x100a74c
 100a743:	movzx  ebx,ax
 100a746:	or     ebx,0x80070000
 100a74c:	mov    DWORD PTR [rsp+0x20],ebx
 100a750:	jmp    0x100a76f
 100a752:	mov    edi,eax
 100a754:	cmp    eax,0xc00000fd
 100a759:	jne    0x100a761
 100a75b:	call   QWORD PTR [rip+0xffffffffffff6be7]        # 0x1001348
 100a761:	mov    eax,0x80004005
 100a766:	test   edi,edi
 100a768:	cmovns edi,eax
 100a76b:	mov    ebx,DWORD PTR [rsp+0x20]
 100a76f:	test   ebx,ebx
 100a771:	cmovns ebx,edi
 100a774:	mov    eax,ebx
 100a776:	mov    rbx,QWORD PTR [rsp+0x40]
 100a77b:	mov    rsi,QWORD PTR [rsp+0x48]
 100a780:	add    rsp,0x30
 100a784:	pop    rdi
 100a785:	ret    
 100a786:	int3   
 100a787:	int3   
 100a788:	int3   
 100a789:	int3   
 100a78a:	int3   
 100a78b:	int3   
 100a78c:	int3   
 100a78d:	int3   
 100a78e:	int3   
 100a78f:	int3   
 100a790:	mov    QWORD PTR [rsp+0x8],rbx
 100a795:	push   rdi
 100a796:	sub    rsp,0x20
 100a79a:	mov    rbx,rcx
 100a79d:	mov    edi,0x1
 100a7a2:	xor    eax,eax
 100a7a4:	lock cmpxchg DWORD PTR [rcx],edi
 100a7a8:	jne    0x100a7b7
 100a7aa:	mov    eax,edi
 100a7ac:	mov    rbx,QWORD PTR [rsp+0x30]
 100a7b1:	add    rsp,0x20
 100a7b5:	pop    rdi
 100a7b6:	ret    
 100a7b7:	mov    eax,DWORD PTR [rcx]
 100a7b9:	cmp    eax,0x2
 100a7bc:	je     0x100a7d1
 100a7be:	xchg   ax,ax
 100a7c0:	mov    ecx,edi
 100a7c2:	call   QWORD PTR [rip+0xffffffffffff6af8]        # 0x10012c0
 100a7c8:	mov    r11d,DWORD PTR [rbx]
 100a7cb:	cmp    r11d,0x2
 100a7cf:	jne    0x100a7c0
 100a7d1:	xor    eax,eax
 100a7d3:	mov    rbx,QWORD PTR [rsp+0x30]
 100a7d8:	add    rsp,0x20
 100a7dc:	pop    rdi
 100a7dd:	ret    
 100a7de:	int3   
 100a7df:	int3   
 100a7e0:	int3   
 100a7e1:	int3   
 100a7e2:	int3   
 100a7e3:	int3   
 100a7e4:	int3   
 100a7e5:	int3   
 100a7e6:	int3   
 100a7e7:	int3   
 100a7e8:	int3   
 100a7e9:	int3   
 100a7ea:	int3   
 100a7eb:	int3   
 100a7ec:	int3   
 100a7ed:	int3   
 100a7ee:	int3   
 100a7ef:	int3   
 100a7f0:	mov    DWORD PTR [rcx+0x4],edx
 100a7f3:	mov    eax,0x1
 100a7f8:	mov    edx,0x2
 100a7fd:	lock cmpxchg DWORD PTR [rcx],edx
 100a801:	ret    
 100a802:	int3   
 100a803:	int3   
 100a804:	int3   
 100a805:	int3   
 100a806:	int3   
 100a807:	int3   
 100a808:	int3   
 100a809:	int3   
 100a80a:	int3   
 100a80b:	int3   
 100a80c:	int3   
 100a80d:	int3   
 100a80e:	int3   
 100a80f:	int3   
 100a810:	mov    QWORD PTR [rsp+0x8],rbx
 100a815:	mov    QWORD PTR [rsp+0x18],rbp
 100a81a:	mov    QWORD PTR [rsp+0x20],rsi
 100a81f:	push   rdi
 100a820:	sub    rsp,0x30
 100a824:	xor    ebp,ebp
 100a826:	test   rdx,rdx
 100a829:	mov    rbx,r8
 100a82c:	mov    rdi,rdx
 100a82f:	mov    rsi,rcx
 100a832:	mov    QWORD PTR [rsp+0x48],rbp
 100a837:	je     0x100a8a6
 100a839:	test   rcx,rcx
 100a83c:	je     0x100a8a6
 100a83e:	test   rbx,rbx
 100a841:	je     0x100a8a6
 100a843:	lea    r8d,[rbp+0x1]
 100a847:	mov    rdx,rbx
 100a84a:	mov    rcx,rdi
 100a84d:	call   0x100a5c0
 100a852:	test   eax,eax
 100a854:	jne    0x100a85d
 100a856:	mov    eax,0x800703e6
 100a85b:	jmp    0x100a8ab
 100a85d:	call   QWORD PTR [rip+0xffffffffffff6a45]        # 0x10012a8
 100a863:	mov    r9,rbx
 100a866:	mov    r8,rsi
 100a869:	mov    rcx,rax
 100a86c:	lea    rax,[rsp+0x48]
 100a871:	mov    rdx,rdi
 100a874:	mov    QWORD PTR [rsp+0x20],rax
 100a879:	call   QWORD PTR [rip+0xffffffffffff6a59]        # 0x10012d8
 100a87f:	test   eax,eax
 100a881:	je     0x100a892
 100a883:	cmp    QWORD PTR [rsp+0x48],rbx
 100a888:	mov    eax,0x8007012b
 100a88d:	cmove  eax,ebp
 100a890:	jmp    0x100a8ab
 100a892:	call   QWORD PTR [rip+0xffffffffffff67a0]        # 0x1001038
 100a898:	test   eax,eax
 100a89a:	jle    0x100a8ab
 100a89c:	movzx  eax,ax
 100a89f:	or     eax,0x80070000
 100a8a4:	jmp    0x100a8ab
 100a8a6:	mov    eax,0x80070057
 100a8ab:	mov    rbx,QWORD PTR [rsp+0x40]
 100a8b0:	mov    rbp,QWORD PTR [rsp+0x50]
 100a8b5:	mov    rsi,QWORD PTR [rsp+0x58]
 100a8ba:	add    rsp,0x30
 100a8be:	pop    rdi
 100a8bf:	ret    
 100a8c0:	int3   
 100a8c1:	int3   
 100a8c2:	int3   
 100a8c3:	int3   
 100a8c4:	int3   
 100a8c5:	int3   
 100a8c6:	int3   
 100a8c7:	int3   
 100a8c8:	int3   
 100a8c9:	int3   
 100a8ca:	int3   
 100a8cb:	int3   
 100a8cc:	int3   
 100a8cd:	int3   
 100a8ce:	int3   
 100a8cf:	int3   
 100a8d0:	mov    QWORD PTR [rsp+0x18],r8
 100a8d5:	mov    QWORD PTR [rsp+0x20],r9
 100a8da:	push   rsi
 100a8db:	push   rdi
 100a8dc:	sub    rsp,0x48
 100a8e0:	cmp    rdx,0x7fffffff
 100a8e7:	mov    rsi,rdx
 100a8ea:	mov    rdi,rcx
 100a8ed:	jbe    0x100a8fb
 100a8ef:	mov    eax,0x80070057
 100a8f4:	add    rsp,0x48
 100a8f8:	pop    rdi
 100a8f9:	pop    rsi
 100a8fa:	ret    
 100a8fb:	test   rcx,rcx
 100a8fe:	mov    QWORD PTR [rsp+0x40],rbx
 100a903:	je     0x100a93b
 100a905:	mov    rcx,rdx
 100a908:	xor    edx,edx
 100a90a:	test   rsi,rsi
 100a90d:	mov    rax,rdi
 100a910:	je     0x100a921
 100a912:	cmp    WORD PTR [rax],dx
 100a915:	je     0x100a92e
 100a917:	add    rax,0x2
 100a91b:	sub    rcx,0x1
 100a91f:	jne    0x100a912
 100a921:	mov    edx,0x80070057
 100a926:	xor    ebx,ebx
 100a928:	test   edx,edx
 100a92a:	jns    0x100a942
 100a92c:	jmp    0x100a940
 100a92e:	test   rcx,rcx
 100a931:	je     0x100a921
 100a933:	mov    rbx,rsi
 100a936:	sub    rbx,rcx
 100a939:	jmp    0x100a928
 100a93b:	mov    edx,0x80070057
 100a940:	xor    ebx,ebx
 100a942:	test   edx,edx
 100a944:	js     0x100a9ec
 100a94a:	mov    QWORD PTR [rsp+0x38],rbp
 100a94f:	mov    QWORD PTR [rsp+0x30],r12
 100a954:	lea    r12,[rsp+0x78]
 100a959:	call   0x1006470
 100a95e:	sub    rsi,rbx
 100a961:	lea    rbp,[rdi+rbx*2]
 100a965:	mov    edi,0x0
 100a96a:	je     0x100a975
 100a96c:	cmp    rsi,0x7fffffff
 100a973:	jbe    0x100a97a
 100a975:	mov    edi,0x80070057
 100a97a:	test   edi,edi
 100a97c:	js     0x100a9d4
 100a97e:	mov    r8,QWORD PTR [rsp+0x70]
 100a983:	lea    rbx,[rsi-0x1]
 100a987:	mov    r9,rax
 100a98a:	mov    rcx,rbp
 100a98d:	mov    rdx,rbx
 100a990:	xor    edi,edi
 100a992:	mov    QWORD PTR [rsp+0x20],r12
 100a997:	call   QWORD PTR [rip+0xffffffffffff69b3]        # 0x1001350
 100a99d:	test   eax,eax
 100a99f:	js     0x100a9ca
 100a9a1:	cdqe   
 100a9a3:	cmp    rax,rbx
 100a9a6:	ja     0x100a9ca
 100a9a8:	cmp    rax,rbx
 100a9ab:	jne    0x100a9d4
 100a9ad:	mov    r12,QWORD PTR [rsp+0x30]
 100a9b2:	mov    WORD PTR [rbp+rbx*2+0x0],di
 100a9b7:	mov    rbp,QWORD PTR [rsp+0x38]
 100a9bc:	mov    rbx,QWORD PTR [rsp+0x40]
 100a9c1:	mov    eax,edi
 100a9c3:	add    rsp,0x48
 100a9c7:	pop    rdi
 100a9c8:	pop    rsi
 100a9c9:	ret    
 100a9ca:	mov    WORD PTR [rbp+rbx*2+0x0],di
 100a9cf:	mov    edi,0x8007007a
 100a9d4:	mov    r12,QWORD PTR [rsp+0x30]
 100a9d9:	mov    rbp,QWORD PTR [rsp+0x38]
 100a9de:	mov    rbx,QWORD PTR [rsp+0x40]
 100a9e3:	mov    eax,edi
 100a9e5:	add    rsp,0x48
 100a9e9:	pop    rdi
 100a9ea:	pop    rsi
 100a9eb:	ret    
 100a9ec:	mov    eax,edx
 100a9ee:	mov    rbx,QWORD PTR [rsp+0x40]
 100a9f3:	add    rsp,0x48
 100a9f7:	pop    rdi
 100a9f8:	pop    rsi
 100a9f9:	ret    
 100a9fa:	int3   
 100a9fb:	int3   
 100a9fc:	int3   
 100a9fd:	int3   
 100a9fe:	int3   
 100a9ff:	int3   
 100aa00:	mov    QWORD PTR [rsp+0x8],rbx
 100aa05:	mov    QWORD PTR [rsp+0x10],rbp
 100aa0a:	mov    QWORD PTR [rsp+0x18],rsi
 100aa0f:	push   rdi
 100aa10:	sub    rsp,0x40
 100aa14:	xor    ebx,ebx
 100aa16:	test   r9,r9
 100aa19:	lea    r10d,[r9+r9*1]
 100aa1d:	mov    rdi,r9
 100aa20:	mov    rsi,r8
 100aa23:	mov    r11,rdx
 100aa26:	mov    DWORD PTR [rsp+0x30],r10d
 100aa2b:	mov    rbp,rcx
 100aa2e:	mov    DWORD PTR [rsp+0x68],ebx
 100aa32:	je     0x100aa83
 100aa34:	cmp    r9,0x7fffffff
 100aa3b:	ja     0x100aa83
 100aa3d:	mov    r8,r9
 100aa40:	mov    ecx,0x7ffffffe
 100aa45:	mov    rdx,rsi
 100aa48:	sub    rcx,r9
 100aa4b:	lea    r9,[rip+0xffffffffffff708e]        # 0x1001ae0
 100aa52:	sub    r9,rsi
 100aa55:	lea    rax,[rcx+r8*1]
 100aa59:	test   rax,rax
 100aa5c:	je     0x100aa77
 100aa5e:	movzx  eax,WORD PTR [r9+rdx*1]
 100aa63:	test   ax,ax
 100aa66:	je     0x100aa77
 100aa68:	mov    WORD PTR [rdx],ax
 100aa6b:	add    rdx,0x2
 100aa6f:	sub    r8,0x1
 100aa73:	jne    0x100aa55
 100aa75:	jmp    0x100aa7c
 100aa77:	test   r8,r8
 100aa7a:	jne    0x100aa80
 100aa7c:	sub    rdx,0x2
 100aa80:	mov    WORD PTR [rdx],bx
 100aa83:	mov    eax,r10d
 100aa86:	cmp    rax,rdi
 100aa89:	jae    0x100aa92
 100aa8b:	mov    eax,0x80070057
 100aa90:	jmp    0x100ab01
 100aa92:	lea    rax,[rsp+0x30]
 100aa97:	lea    r9,[rsp+0x68]
 100aa9c:	xor    r8d,r8d
 100aa9f:	mov    QWORD PTR [rsp+0x28],rax
 100aaa4:	mov    rdx,r11
 100aaa7:	mov    rcx,rbp
 100aaaa:	mov    QWORD PTR [rsp+0x20],rsi
 100aaaf:	call   QWORD PTR [rip+0xffffffffffff6553]        # 0x1001008
 100aab5:	test   eax,eax
 100aab7:	jne    0x100aaf0
 100aab9:	cmp    DWORD PTR [rsp+0x68],0x1
 100aabe:	jne    0x100aae9
 100aac0:	mov    eax,DWORD PTR [rsp+0x30]
 100aac4:	test   al,0x1
 100aac6:	jne    0x100aae9
 100aac8:	cmp    eax,0x2
 100aacb:	jb     0x100aae9
 100aacd:	shr    rax,1
 100aad0:	cmp    WORD PTR [rsi+rax*2-0x2],bx
 100aad5:	je     0x100aaff
 100aad7:	cmp    rax,rdi
 100aada:	jae    0x100aae2
 100aadc:	mov    WORD PTR [rsi+rax*2],bx
 100aae0:	jmp    0x100aaff
 100aae2:	mov    ebx,0x8007007a
 100aae7:	jmp    0x100aaff
 100aae9:	mov    ebx,0x8007000b
 100aaee:	jmp    0x100aaff
 100aaf0:	jg     0x100aaf6
 100aaf2:	mov    ebx,eax
 100aaf4:	jmp    0x100aaff
 100aaf6:	movzx  ebx,ax
 100aaf9:	or     ebx,0x80070000
 100aaff:	mov    eax,ebx
 100ab01:	mov    rbx,QWORD PTR [rsp+0x50]
 100ab06:	mov    rbp,QWORD PTR [rsp+0x58]
 100ab0b:	mov    rsi,QWORD PTR [rsp+0x60]
 100ab10:	add    rsp,0x40
 100ab14:	pop    rdi
 100ab15:	ret    
 100ab16:	int3   
 100ab17:	int3   
 100ab18:	int3   
 100ab19:	int3   
 100ab1a:	int3   
 100ab1b:	int3   
 100ab1c:	int3   
 100ab1d:	int3   
 100ab1e:	int3   
 100ab1f:	int3   
 100ab20:	mov    rax,r8
 100ab23:	mov    rcx,rdx
 100ab26:	mov    r8,r9
 100ab29:	mov    rdx,rax
 100ab2c:	jmp    0x100a810
 100ab31:	int3   
 100ab32:	int3   
 100ab33:	int3   
 100ab34:	int3   
 100ab35:	int3   
 100ab36:	int3   
 100ab37:	int3   
 100ab38:	int3   
 100ab39:	int3   
 100ab3a:	int3   
 100ab3b:	int3   
 100ab3c:	int3   
 100ab3d:	int3   
 100ab3e:	int3   
 100ab3f:	int3   
 100ab40:	mov    DWORD PTR [rcx+0x74],edx
 100ab43:	xor    eax,eax
 100ab45:	ret    
 100ab46:	int3   
 100ab47:	int3   
 100ab48:	int3   
 100ab49:	int3   
 100ab4a:	int3   
 100ab4b:	int3   
 100ab4c:	int3   
 100ab4d:	int3   
 100ab4e:	int3   
 100ab4f:	int3   
 100ab50:	mov    QWORD PTR [rsp+0x8],rbx
 100ab55:	push   rdi
 100ab56:	sub    rsp,0x20
 100ab5a:	cmp    DWORD PTR [rcx+0x74],0x0
 100ab5e:	mov    rdi,rdx
 100ab61:	mov    rbx,rcx
 100ab64:	je     0x100aba4
 100ab66:	mov    eax,DWORD PTR [rcx+0xac]
 100ab6c:	not    eax
 100ab6e:	and    eax,DWORD PTR [rcx+0xa8]
 100ab74:	test   al,0x20
 100ab76:	jne    0x100aba4
 100ab78:	call   QWORD PTR [rip+0xffffffffffff6572]        # 0x10010f0
 100ab7e:	cmp    eax,DWORD PTR [rbx+0x74]
 100ab81:	je     0x100aba4
 100ab83:	call   QWORD PTR [rip+0xffffffffffff6567]        # 0x10010f0
 100ab89:	cmp    eax,DWORD PTR [rbx+0xa4]
 100ab8f:	je     0x100aba4
 100ab91:	mov    DWORD PTR [rdi],0x0
 100ab97:	xor    eax,eax
 100ab99:	mov    rbx,QWORD PTR [rsp+0x30]
 100ab9e:	add    rsp,0x20
 100aba2:	pop    rdi
 100aba3:	ret    
 100aba4:	mov    rbx,QWORD PTR [rsp+0x30]
 100aba9:	mov    DWORD PTR [rdi],0x1
 100abaf:	xor    eax,eax
 100abb1:	add    rsp,0x20
 100abb5:	pop    rdi
 100abb6:	ret    
 100abb7:	int3   
 100abb8:	int3   
 100abb9:	int3   
 100abba:	int3   
 100abbb:	int3   
 100abbc:	int3   
 100abbd:	int3   
 100abbe:	int3   
 100abbf:	int3   
 100abc0:	mov    DWORD PTR [rcx+0x13b0],edx
 100abc6:	xor    eax,eax
 100abc8:	ret    
 100abc9:	int3   
 100abca:	int3   
 100abcb:	int3   
 100abcc:	int3   
 100abcd:	int3   
 100abce:	int3   
 100abcf:	int3   
 100abd0:	mov    QWORD PTR [rcx+0x90],rdx
 100abd7:	xor    eax,eax
 100abd9:	ret    
 100abda:	int3   
 100abdb:	int3   
 100abdc:	int3   
 100abdd:	int3   
 100abde:	int3   
 100abdf:	int3   
 100abe0:	mov    QWORD PTR [rcx+0x98],rdx
 100abe7:	mov    DWORD PTR [rcx+0xa0],r8d
 100abee:	xor    eax,eax
 100abf0:	ret    
 100abf1:	int3   
 100abf2:	int3   
 100abf3:	int3   
 100abf4:	int3   
 100abf5:	int3   
 100abf6:	int3   
 100abf7:	int3   
 100abf8:	int3   
 100abf9:	int3   
 100abfa:	int3   
 100abfb:	int3   
 100abfc:	int3   
 100abfd:	int3   
 100abfe:	int3   
 100abff:	int3   
 100ac00:	mov    DWORD PTR [rcx+0xb0],edx
 100ac06:	mov    DWORD PTR [rcx+0xb4],r8d
 100ac0d:	xor    eax,eax
 100ac0f:	ret    
 100ac10:	int3   
 100ac11:	int3   
 100ac12:	int3   
 100ac13:	int3   
 100ac14:	int3   
 100ac15:	int3   
 100ac16:	int3   
 100ac17:	int3   
 100ac18:	int3   
 100ac19:	int3   
 100ac1a:	int3   
 100ac1b:	int3   
 100ac1c:	int3   
 100ac1d:	int3   
 100ac1e:	int3   
 100ac1f:	int3   
 100ac20:	rex push rbx
 100ac22:	sub    rsp,0x20
 100ac26:	mov    rbx,rcx
 100ac29:	mov    DWORD PTR [rcx+0xa8],edx
 100ac2f:	mov    DWORD PTR [rcx+0xac],r8d
 100ac36:	mov    rcx,QWORD PTR [rcx+0x10]
 100ac3a:	test   rcx,rcx
 100ac3d:	je     0x100ac5c
 100ac3f:	call   0x1009420
 100ac44:	test   eax,eax
 100ac46:	je     0x100ac5c
 100ac48:	bt     DWORD PTR [rbx+0xac],0x11
 100ac50:	jb     0x100ac5c
 100ac52:	or     DWORD PTR [rbx+0xa8],0x20000
 100ac5c:	xor    eax,eax
 100ac5e:	add    rsp,0x20
 100ac62:	pop    rbx
 100ac63:	ret    
 100ac64:	int3   
 100ac65:	int3   
 100ac66:	int3   
 100ac67:	int3   
 100ac68:	int3   
 100ac69:	int3   
 100ac6a:	int3   
 100ac6b:	int3   
 100ac6c:	int3   
 100ac6d:	int3   
 100ac6e:	int3   
 100ac6f:	int3   
 100ac70:	mov    QWORD PTR [rcx+0x40],rdx
 100ac74:	xor    eax,eax
 100ac76:	ret    
 100ac77:	int3   
 100ac78:	int3   
 100ac79:	int3   
 100ac7a:	int3   
 100ac7b:	int3   
 100ac7c:	int3   
 100ac7d:	int3   
 100ac7e:	int3   
 100ac7f:	int3   
 100ac80:	mov    QWORD PTR [rcx+0x38],rdx
 100ac84:	xor    eax,eax
 100ac86:	ret    
 100ac87:	int3   
 100ac88:	int3   
 100ac89:	int3   
 100ac8a:	int3   
 100ac8b:	int3   
 100ac8c:	int3   
 100ac8d:	int3   
 100ac8e:	int3   
 100ac8f:	int3   
 100ac90:	mov    DWORD PTR [rcx+0xa4],edx
 100ac96:	mov    QWORD PTR [rcx+0x30],r8
 100ac9a:	mov    QWORD PTR [rcx+0x28],r9
 100ac9e:	xor    eax,eax
 100aca0:	ret    
 100aca1:	int3   
 100aca2:	int3   
 100aca3:	int3   
 100aca4:	int3   
 100aca5:	int3   
 100aca6:	int3   
 100aca7:	int3   
 100aca8:	int3   
 100aca9:	int3   
 100acaa:	int3   
 100acab:	int3   
 100acac:	int3   
 100acad:	int3   
 100acae:	int3   
 100acaf:	int3   
 100acb0:	mov    QWORD PTR [rcx+0x80],rdx
 100acb7:	xor    eax,eax
 100acb9:	ret    
 100acba:	int3   
 100acbb:	int3   
 100acbc:	int3   
 100acbd:	int3   
 100acbe:	int3   
 100acbf:	int3   
 100acc0:	mov    QWORD PTR [rcx+0x50],rdx
 100acc4:	xor    eax,eax
 100acc6:	ret    
 100acc7:	int3   
 100acc8:	int3   
 100acc9:	int3   
 100acca:	int3   
 100accb:	int3   
 100accc:	int3   
 100accd:	int3   
 100acce:	int3   
 100accf:	int3   
 100acd0:	mov    QWORD PTR [rcx+0x48],rdx
 100acd4:	xor    eax,eax
 100acd6:	ret    
 100acd7:	int3   
 100acd8:	int3   
 100acd9:	int3   
 100acda:	int3   
 100acdb:	int3   
 100acdc:	int3   
 100acdd:	int3   
 100acde:	int3   
 100acdf:	int3   
 100ace0:	mov    QWORD PTR [rcx+0x20],rdx
 100ace4:	xor    eax,eax
 100ace6:	ret    
 100ace7:	int3   
 100ace8:	int3   
 100ace9:	int3   
 100acea:	int3   
 100aceb:	int3   
 100acec:	int3   
 100aced:	int3   
 100acee:	int3   
 100acef:	int3   
 100acf0:	mov    QWORD PTR [rcx+0x58],rdx
 100acf4:	xor    eax,eax
 100acf6:	ret    
 100acf7:	int3   
 100acf8:	int3   
 100acf9:	int3   
 100acfa:	int3   
 100acfb:	int3   
 100acfc:	int3   
 100acfd:	int3   
 100acfe:	int3   
 100acff:	int3   
 100ad00:	mov    DWORD PTR [rcx+0x88],edx
 100ad06:	mov    DWORD PTR [rcx+0x8c],r8d
 100ad0d:	xor    eax,eax
 100ad0f:	ret    
 100ad10:	int3   
 100ad11:	int3   
 100ad12:	int3   
 100ad13:	int3   
 100ad14:	int3   
 100ad15:	int3   
 100ad16:	int3   
 100ad17:	int3   
 100ad18:	int3   
 100ad19:	int3   
 100ad1a:	int3   
 100ad1b:	int3   
 100ad1c:	int3   
 100ad1d:	int3   
 100ad1e:	int3   
 100ad1f:	int3   
 100ad20:	mov    QWORD PTR [rcx+0x60],rdx
 100ad24:	xor    eax,eax
 100ad26:	ret    
 100ad27:	int3   
 100ad28:	int3   
 100ad29:	int3   
 100ad2a:	int3   
 100ad2b:	int3   
 100ad2c:	int3   
 100ad2d:	int3   
 100ad2e:	int3   
 100ad2f:	int3   
 100ad30:	mov    QWORD PTR [rcx+0x68],rdx
 100ad34:	xor    eax,eax
 100ad36:	ret    
 100ad37:	int3   
 100ad38:	int3   
 100ad39:	int3   
 100ad3a:	int3   
 100ad3b:	int3   
 100ad3c:	int3   
 100ad3d:	int3   
 100ad3e:	int3   
 100ad3f:	int3   
 100ad40:	mov    QWORD PTR [rcx+0x13c8],rdx
 100ad47:	xor    eax,eax
 100ad49:	ret    
 100ad4a:	int3   
 100ad4b:	int3   
 100ad4c:	int3   
 100ad4d:	int3   
 100ad4e:	int3   
 100ad4f:	int3   
 100ad50:	cmp    DWORD PTR [rcx+0x13c0],0x0
 100ad57:	je     0x100ad76
 100ad59:	cmp    DWORD PTR [rcx+0x13bc],0x0
 100ad60:	jne    0x100ad76
 100ad62:	cmp    DWORD PTR [rcx+0x13b8],0x0
 100ad69:	je     0x100ad76
 100ad6b:	mov    eax,DWORD PTR [rcx+0x13b4]
 100ad71:	mov    DWORD PTR [rdx],eax
 100ad73:	xor    eax,eax
 100ad75:	ret    
 100ad76:	mov    eax,0x80004005
 100ad7b:	ret    
 100ad7c:	int3   
 100ad7d:	int3   
 100ad7e:	int3   
 100ad7f:	int3   
 100ad80:	int3   
 100ad81:	int3   
 100ad82:	int3   
 100ad83:	int3   
 100ad84:	int3   
 100ad85:	int3   
 100ad86:	int3   
 100ad87:	int3   
 100ad88:	int3   
 100ad89:	int3   
 100ad8a:	int3   
 100ad8b:	int3   
 100ad8c:	int3   
 100ad8d:	int3   
 100ad8e:	int3   
 100ad8f:	int3   
 100ad90:	rex push rbx
 100ad92:	sub    rsp,0x20
 100ad96:	xor    r9d,r9d
 100ad99:	lea    rbx,[rip+0xffffffffffff5260]        # 0x1000000
 100ada0:	mov    r10,r8
 100ada3:	mov    QWORD PTR [r8],r9
 100ada6:	mov    r11,QWORD PTR [rbx+0x2990]
 100adad:	cmp    r11,QWORD PTR [rdx]
 100adb0:	jne    0x100adc4
 100adb2:	mov    r11,QWORD PTR [rbx+0x2998]
 100adb9:	cmp    r11,QWORD PTR [rdx+0x8]
 100adbd:	jne    0x100adc4
 100adbf:	mov    eax,r9d
 100adc2:	jmp    0x100adc9
 100adc4:	sbb    eax,eax
 100adc6:	sbb    eax,0xffffffff
 100adc9:	test   eax,eax
 100adcb:	jne    0x100adde
 100adcd:	mov    QWORD PTR [r8],rcx
 100add0:	mov    rax,QWORD PTR [rcx]
 100add3:	call   QWORD PTR [rax+0x8]
 100add6:	xor    eax,eax
 100add8:	add    rsp,0x20
 100addc:	pop    rbx
 100addd:	ret    
 100adde:	mov    r8,QWORD PTR [rbx+0x32c8]
 100ade5:	cmp    r8,QWORD PTR [rdx]
 100ade8:	jne    0x100adf7
 100adea:	mov    r8,QWORD PTR [rbx+0x32d0]
 100adf1:	cmp    r8,QWORD PTR [rdx+0x8]
 100adf5:	je     0x100adff
 100adf7:	sbb    eax,eax
 100adf9:	sbb    eax,0xffffffff
 100adfc:	mov    r9d,eax
 100adff:	test   r9d,r9d
 100ae02:	jne    0x100ae15
 100ae04:	mov    QWORD PTR [r10],rcx
 100ae07:	mov    rax,QWORD PTR [rcx]
 100ae0a:	call   QWORD PTR [rax+0x8]
 100ae0d:	xor    eax,eax
 100ae0f:	add    rsp,0x20
 100ae13:	pop    rbx
 100ae14:	ret    
 100ae15:	mov    eax,0x80004002
 100ae1a:	add    rsp,0x20
 100ae1e:	pop    rbx
 100ae1f:	ret    
 100ae20:	int3   
 100ae21:	int3   
 100ae22:	int3   
 100ae23:	int3   
 100ae24:	int3   
 100ae25:	int3   
 100ae26:	int3   
 100ae27:	int3   
 100ae28:	int3   
 100ae29:	int3   
 100ae2a:	int3   
 100ae2b:	int3   
 100ae2c:	int3   
 100ae2d:	int3   
 100ae2e:	int3   
 100ae2f:	int3   
 100ae30:	mov    eax,0x1
 100ae35:	lock xadd DWORD PTR [rcx+0x8],eax
 100ae3a:	add    eax,0x1
 100ae3d:	ret    
 100ae3e:	int3   
 100ae3f:	int3   
 100ae40:	int3   
 100ae41:	int3   
 100ae42:	int3   
 100ae43:	int3   
 100ae44:	int3   
 100ae45:	int3   
 100ae46:	int3   
 100ae47:	int3   
 100ae48:	int3   
 100ae49:	int3   
 100ae4a:	int3   
 100ae4b:	int3   
 100ae4c:	int3   
 100ae4d:	int3   
 100ae4e:	int3   
 100ae4f:	int3   
 100ae50:	rex push rbx
 100ae52:	sub    rsp,0x20
 100ae56:	or     ebx,0xffffffff
 100ae59:	lock xadd DWORD PTR [rcx+0x8],ebx
 100ae5e:	add    ebx,0xffffffff
 100ae61:	jne    0x100ae6f
 100ae63:	mov    rdx,rcx
 100ae66:	mov    rcx,QWORD PTR [rcx+0x10]
 100ae6a:	call   0x1009660
 100ae6f:	mov    eax,ebx
 100ae71:	add    rsp,0x20
 100ae75:	pop    rbx
 100ae76:	ret    
 100ae77:	int3   
 100ae78:	int3   
 100ae79:	int3   
 100ae7a:	int3   
 100ae7b:	int3   
 100ae7c:	int3   
 100ae7d:	int3   
 100ae7e:	int3   
 100ae7f:	int3   
 100ae80:	mov    QWORD PTR [rsp+0x8],rbx
 100ae85:	mov    QWORD PTR [rsp+0x10],rbp
 100ae8a:	mov    QWORD PTR [rsp+0x18],rsi
 100ae8f:	push   rdi
 100ae90:	sub    rsp,0x20
 100ae94:	mov    ebx,DWORD PTR [rcx+0x228]
 100ae9a:	mov    edx,0x220
 100ae9f:	mov    rbp,rcx
 100aea2:	call   0x100a440
 100aea7:	xor    esi,esi
 100aea9:	test   ebx,ebx
 100aeab:	lea    edi,[rbx+rax*1]
 100aeae:	je     0x100aed7
 100aeb0:	mov    ecx,esi
 100aeb2:	mov    edx,0xb3c
 100aeb7:	imul   rcx,rcx,0xb3c
 100aebe:	add    rcx,QWORD PTR [rbp+0x220]
 100aec5:	call   0x100a440
 100aeca:	add    esi,0x1
 100aecd:	add    edi,eax
 100aecf:	cmp    esi,DWORD PTR [rbp+0x228]
 100aed5:	jb     0x100aeb0
 100aed7:	mov    rbx,QWORD PTR [rsp+0x30]
 100aedc:	mov    rbp,QWORD PTR [rsp+0x38]
 100aee1:	mov    rsi,QWORD PTR [rsp+0x40]
 100aee6:	mov    eax,edi
 100aee8:	add    rsp,0x20
 100aeec:	pop    rdi
 100aeed:	ret    
 100aeee:	int3   
 100aeef:	int3   
 100aef0:	int3   
 100aef1:	int3   
 100aef2:	int3   
 100aef3:	int3   
 100aef4:	int3   
 100aef5:	int3   
 100aef6:	int3   
 100aef7:	int3   
 100aef8:	int3   
 100aef9:	int3   
 100aefa:	int3   
 100aefb:	int3   
 100aefc:	int3   
 100aefd:	int3   
 100aefe:	int3   
 100aeff:	int3   
 100af00:	mov    QWORD PTR [rsp+0x8],rbx
 100af05:	push   rdi
 100af06:	sub    rsp,0x20
 100af0a:	mov    rbx,rcx
 100af0d:	mov    rcx,QWORD PTR [rcx+0x10]
 100af11:	mov    rdi,rdx
 100af14:	test   rcx,rcx
 100af17:	je     0x100af27
 100af19:	mov    rax,QWORD PTR [rcx]
 100af1c:	call   QWORD PTR [rax+0x10]
 100af1f:	mov    QWORD PTR [rbx+0x10],0x0
 100af27:	mov    QWORD PTR [rbx+0x10],rdi
 100af2b:	mov    rax,QWORD PTR [rdi]
 100af2e:	mov    rcx,rdi
 100af31:	call   QWORD PTR [rax+0x8]
 100af34:	mov    rcx,QWORD PTR [rbx+0x10]
 100af38:	call   0x10092e0
 100af3d:	mov    rcx,QWORD PTR [rbx+0x10]
 100af41:	mov    QWORD PTR [rbx+0x1370],rax
 100af48:	call   0x10092e0
 100af4d:	mov    QWORD PTR [rbx+0x1398],rax
 100af54:	mov    rbx,QWORD PTR [rsp+0x30]
 100af59:	add    rsp,0x20
 100af5d:	pop    rdi
 100af5e:	ret    
 100af5f:	int3   
 100af60:	int3   
 100af61:	int3   
 100af62:	int3   
 100af63:	int3   
 100af64:	int3   
 100af65:	int3   
 100af66:	int3   
 100af67:	int3   
 100af68:	int3   
 100af69:	int3   
 100af6a:	int3   
 100af6b:	int3   
 100af6c:	int3   
 100af6d:	int3   
 100af6e:	int3   
 100af6f:	int3   
 100af70:	test   rdx,rdx
 100af73:	jne    0x100af7b
 100af75:	mov    eax,0x80070057
 100af7a:	ret    
 100af7b:	mov    eax,DWORD PTR [rcx+0xa4]
 100af81:	test   eax,eax
 100af83:	je     0x100af8f
 100af85:	bt     DWORD PTR [rcx+0xa8],0x15
 100af8d:	jae    0x100af92
 100af8f:	mov    eax,DWORD PTR [rcx+0x74]
 100af92:	mov    DWORD PTR [rdx],eax
 100af94:	xor    eax,eax
 100af96:	ret    
 100af97:	int3   
 100af98:	int3   
 100af99:	int3   
 100af9a:	int3   
 100af9b:	int3   
 100af9c:	int3   
 100af9d:	int3   
 100af9e:	int3   
 100af9f:	int3   
 100afa0:	mov    QWORD PTR [rsp+0x18],rbx
 100afa5:	mov    QWORD PTR [rsp+0x20],rsi
 100afaa:	mov    QWORD PTR [rsp+0x8],rcx
 100afaf:	push   rdi
 100afb0:	push   r12
 100afb2:	push   r13
 100afb4:	sub    rsp,0x20
 100afb8:	mov    rsi,rcx
 100afbb:	xor    r12d,r12d
 100afbe:	mov    ebx,r12d
 100afc1:	mov    r13d,r12d
 100afc4:	mov    rax,QWORD PTR [rcx+0x18]
 100afc8:	mov    rdx,QWORD PTR [rax]
 100afcb:	xchg   ax,ax
 100afcd:	data16 xchg ax,ax
 100afd0:	test   rdx,rdx
 100afd3:	je     0x100afe6
 100afd5:	mov    rdi,QWORD PTR [rdx]
 100afd8:	mov    rcx,QWORD PTR [rsi+0x10]
 100afdc:	call   0x100a310
 100afe1:	mov    rdx,rdi
 100afe4:	jmp    0x100afd0
 100afe6:	jmp    0x100b00f
 100afe8:	mov    r13d,eax
 100afeb:	cmp    eax,0xc00000fd
 100aff0:	jne    0x100aff8
 100aff2:	call   QWORD PTR [rip+0xffffffffffff6350]        # 0x1001348
 100aff8:	mov    ecx,0x80004005
 100affd:	test   r13d,r13d
 100b000:	cmovns r13d,ecx
 100b004:	xor    r12d,r12d
 100b007:	mov    rsi,QWORD PTR [rsp+0x40]
 100b00c:	mov    ebx,r12d
 100b00f:	test   ebx,ebx
 100b011:	cmovns ebx,r13d
 100b015:	mov    DWORD PTR [rsp+0x48],ebx
 100b019:	mov    rax,QWORD PTR [rsi+0x18]
 100b01d:	mov    QWORD PTR [rax],r12
 100b020:	mov    rax,QWORD PTR [rsi+0x18]
 100b024:	mov    QWORD PTR [rsi+0x20],rax
 100b028:	jmp    0x100b04a
 100b02a:	mov    ebx,eax
 100b02c:	cmp    eax,0xc00000fd
 100b031:	jne    0x100b039
 100b033:	call   QWORD PTR [rip+0xffffffffffff630f]        # 0x1001348
 100b039:	mov    ecx,0x80004005
 100b03e:	test   ebx,ebx
 100b040:	cmovns ebx,ecx
 100b043:	mov    r12d,ebx
 100b046:	mov    ebx,DWORD PTR [rsp+0x48]
 100b04a:	test   ebx,ebx
 100b04c:	cmovns ebx,r12d
 100b050:	mov    eax,ebx
 100b052:	mov    rbx,QWORD PTR [rsp+0x50]
 100b057:	mov    rsi,QWORD PTR [rsp+0x58]
 100b05c:	add    rsp,0x20
 100b060:	pop    r13
 100b062:	pop    r12
 100b064:	pop    rdi
 100b065:	ret    
 100b066:	int3   
 100b067:	int3   
 100b068:	int3   
 100b069:	int3   
 100b06a:	int3   
 100b06b:	int3   
 100b06c:	int3   
 100b06d:	int3   
 100b06e:	int3   
 100b06f:	int3   
 100b070:	mov    QWORD PTR [rsp+0x8],rbx
 100b075:	mov    QWORD PTR [rsp+0x10],rdi
 100b07a:	xor    r10d,r10d
 100b07d:	test   rdx,rdx
 100b080:	mov    rbx,r8
 100b083:	mov    r11,rdx
 100b086:	mov    rdi,rcx
 100b089:	mov    r9d,r10d
 100b08c:	je     0x100b097
 100b08e:	cmp    rdx,0x7fffffff
 100b095:	jbe    0x100b09d
 100b097:	mov    r9d,0x80070057
 100b09d:	test   r9d,r9d
 100b0a0:	js     0x100b0c6
 100b0a2:	test   rdx,rdx
 100b0a5:	mov    rcx,rdx
 100b0a8:	mov    rax,rdi
 100b0ab:	mov    r9d,r10d
 100b0ae:	je     0x100b0c0
 100b0b0:	cmp    WORD PTR [rax],r9w
 100b0b4:	je     0x100b109
 100b0b6:	add    rax,0x2
 100b0ba:	sub    rcx,0x1
 100b0be:	jne    0x100b0b0
 100b0c0:	mov    r9d,0x80070057
 100b0c6:	mov    r8,r10
 100b0c9:	test   r9d,r9d
 100b0cc:	js     0x100b138
 100b0ce:	sub    rdx,r8
 100b0d1:	lea    rcx,[rdi+r8*2]
 100b0d5:	je     0x100b11b
 100b0d7:	mov    rax,rdx
 100b0da:	sub    rax,r11
 100b0dd:	sub    rbx,rcx
 100b0e0:	lea    r8,[rax+r8*1+0x7fffffff]
 100b0e8:	test   r8,r8
 100b0eb:	je     0x100b116
 100b0ed:	movzx  eax,WORD PTR [rbx+rcx*1]
 100b0f1:	test   ax,ax
 100b0f4:	je     0x100b116
 100b0f6:	mov    WORD PTR [rcx],ax
 100b0f9:	add    rcx,0x2
 100b0fd:	sub    r8,0x1
 100b101:	sub    rdx,0x1
 100b105:	jne    0x100b0e8
 100b107:	jmp    0x100b11b
 100b109:	test   rcx,rcx
 100b10c:	je     0x100b0c0
 100b10e:	mov    r8,rdx
 100b111:	sub    r8,rcx
 100b114:	jmp    0x100b0c9
 100b116:	test   rdx,rdx
 100b119:	jne    0x100b125
 100b11b:	sub    rcx,0x2
 100b11f:	mov    r10d,0x8007007a
 100b125:	mov    WORD PTR [rcx],0x0
 100b12a:	mov    eax,r10d
 100b12d:	mov    rbx,QWORD PTR [rsp+0x8]
 100b132:	mov    rdi,QWORD PTR [rsp+0x10]
 100b137:	ret    
 100b138:	mov    rbx,QWORD PTR [rsp+0x8]
 100b13d:	mov    rdi,QWORD PTR [rsp+0x10]
 100b142:	mov    eax,r9d
 100b145:	ret    
 100b146:	int3   
 100b147:	int3   
 100b148:	int3   
 100b149:	int3   
 100b14a:	int3   
 100b14b:	int3   
 100b14c:	int3   
 100b14d:	int3   
 100b14e:	int3   
 100b14f:	int3   
 100b150:	rex push rbx
 100b152:	sub    rsp,0x20
 100b156:	mov    rbx,rcx
 100b159:	add    rcx,0x1360
 100b160:	call   0x100afa0
 100b165:	test   eax,eax
 100b167:	jne    0x100b175
 100b169:	lea    rcx,[rbx+0x1388]
 100b170:	call   0x100afa0
 100b175:	add    rsp,0x20
 100b179:	pop    rbx
 100b17a:	ret    
 100b17b:	int3   
 100b17c:	int3   
 100b17d:	int3   
 100b17e:	int3   
 100b17f:	int3   
 100b180:	int3   
 100b181:	int3   
 100b182:	int3   
 100b183:	int3   
 100b184:	int3   
 100b185:	int3   
 100b186:	int3   
 100b187:	int3   
 100b188:	int3   
 100b189:	int3   
 100b18a:	int3   
 100b18b:	int3   
 100b18c:	int3   
 100b18d:	int3   
 100b18e:	int3   
 100b18f:	int3   
 100b190:	mov    QWORD PTR [rsp+0x8],rbx
 100b195:	mov    DWORD PTR [rcx+0x22c],edx
 100b19b:	lea    rdx,[rcx+0x14]
 100b19f:	mov    rbx,r9
 100b1a2:	xor    r11d,r11d
 100b1a5:	mov    r9,rcx
 100b1a8:	mov    r10d,0x105
 100b1ae:	sub    r8,rdx
 100b1b1:	lea    rax,[r10+0x7ffffef9]
 100b1b8:	test   rax,rax
 100b1bb:	je     0x100b1d6
 100b1bd:	movzx  eax,WORD PTR [r8+rdx*1]
 100b1c2:	test   ax,ax
 100b1c5:	je     0x100b1d6
 100b1c7:	mov    WORD PTR [rdx],ax
 100b1ca:	add    rdx,0x2
 100b1ce:	sub    r10,0x1
 100b1d2:	jne    0x100b1b1
 100b1d4:	jmp    0x100b1db
 100b1d6:	test   r10,r10
 100b1d9:	jne    0x100b1e5
 100b1db:	sub    rdx,0x2
 100b1df:	mov    r11d,0x8007007a
 100b1e5:	test   r11d,r11d
 100b1e8:	mov    WORD PTR [rdx],0x0
 100b1ed:	mov    eax,r11d
 100b1f0:	jne    0x100b218
 100b1f2:	mov    ecx,DWORD PTR [rbx]
 100b1f4:	mov    DWORD PTR [r9],ecx
 100b1f7:	mov    ecx,DWORD PTR [rbx+0x4]
 100b1fa:	mov    DWORD PTR [r9+0x4],ecx
 100b1fe:	mov    ecx,DWORD PTR [rbx+0x8]
 100b201:	mov    DWORD PTR [r9+0x8],ecx
 100b205:	mov    ecx,DWORD PTR [rbx+0xc]
 100b208:	mov    DWORD PTR [r9+0xc],ecx
 100b20c:	mov    rcx,QWORD PTR [rsp+0x28]
 100b211:	mov    QWORD PTR [r9+0x220],rcx
 100b218:	mov    rbx,QWORD PTR [rsp+0x8]
 100b21d:	ret    
 100b21e:	int3   
 100b21f:	int3   
 100b220:	int3   
 100b221:	int3   
 100b222:	int3   
 100b223:	int3   
 100b224:	int3   
 100b225:	int3   
 100b226:	int3   
 100b227:	int3   
 100b228:	int3   
 100b229:	int3   
 100b22a:	int3   
 100b22b:	int3   
 100b22c:	int3   
 100b22d:	int3   
 100b22e:	int3   
 100b22f:	int3   
 100b230:	rex push rsi
 100b232:	mov    eax,DWORD PTR [rcx+0x228]
 100b238:	movzx  esi,r9w
 100b23c:	mov    r11,r8
 100b23f:	cmp    eax,DWORD PTR [rcx+0x22c]
 100b245:	mov    r10,rdx
 100b248:	jne    0x100b251
 100b24a:	mov    eax,0x80004005
 100b24f:	pop    rsi
 100b250:	ret    
 100b251:	mov    QWORD PTR [rsp+0x10],rbx
 100b256:	mov    QWORD PTR [rsp+0x18],rdi
 100b25b:	mov    rdi,rax
 100b25e:	add    eax,0x1
 100b261:	xor    ebx,ebx
 100b263:	mov    edx,0x105
 100b268:	imul   rdi,rdi,0xb3c
 100b26f:	add    rdi,QWORD PTR [rcx+0x220]
 100b276:	mov    DWORD PTR [rcx+0x228],eax
 100b27c:	mov    r8,rdx
 100b27f:	lea    rcx,[rdi+0x6]
 100b283:	mov    r9d,ebx
 100b286:	sub    r10,rcx
 100b289:	data16 xchg ax,ax
 100b28c:	data16 data16 xchg ax,ax
 100b290:	lea    rax,[r8+0x7ffffef9]
 100b297:	test   rax,rax
 100b29a:	je     0x100b2b5
 100b29c:	movzx  eax,WORD PTR [r10+rcx*1]
 100b2a1:	test   ax,ax
 100b2a4:	je     0x100b2b5
 100b2a6:	mov    WORD PTR [rcx],ax
 100b2a9:	add    rcx,0x2
 100b2ad:	sub    r8,0x1
 100b2b1:	jne    0x100b290
 100b2b3:	jmp    0x100b2ba
 100b2b5:	test   r8,r8
 100b2b8:	jne    0x100b2c4
 100b2ba:	sub    rcx,0x2
 100b2be:	mov    r9d,0x8007007a
 100b2c4:	mov    WORD PTR [rcx],bx
 100b2c7:	lea    rcx,[rdi+0x316]
 100b2ce:	sub    r11,rcx
 100b2d1:	lea    rax,[rdx+0x7ffffef9]
 100b2d8:	test   rax,rax
 100b2db:	je     0x100b2f6
 100b2dd:	movzx  eax,WORD PTR [r11+rcx*1]
 100b2e2:	test   ax,ax
 100b2e5:	je     0x100b2f6
 100b2e7:	mov    WORD PTR [rcx],ax
 100b2ea:	add    rcx,0x2
 100b2ee:	sub    rdx,0x1
 100b2f2:	jne    0x100b2d1
 100b2f4:	jmp    0x100b2fb
 100b2f6:	test   rdx,rdx
 100b2f9:	jne    0x100b304
 100b2fb:	sub    rcx,0x2
 100b2ff:	mov    ebx,0x8007007a
 100b304:	test   r9d,r9d
 100b307:	mov    WORD PTR [rcx],0x0
 100b30c:	mov    WORD PTR [rdi+0x4],si
 100b310:	mov    rdi,QWORD PTR [rsp+0x18]
 100b315:	cmovns r9d,ebx
 100b319:	mov    rbx,QWORD PTR [rsp+0x10]
 100b31e:	mov    eax,r9d
 100b321:	pop    rsi
 100b322:	ret    
 100b323:	int3   
 100b324:	int3   
 100b325:	int3   
 100b326:	int3   
 100b327:	int3   
 100b328:	int3   
 100b329:	int3   
 100b32a:	int3   
 100b32b:	int3   
 100b32c:	int3   
 100b32d:	int3   
 100b32e:	int3   
 100b32f:	int3   
 100b330:	mov    QWORD PTR [rsp+0x8],rbx
 100b335:	mov    QWORD PTR [rsp+0x10],rsi
 100b33a:	mov    QWORD PTR [rsp+0x18],rdi
 100b33f:	mov    QWORD PTR [rsp+0x20],r12
 100b344:	push   r13
 100b346:	sub    rsp,0x40
 100b34a:	mov    r12,r9
 100b34d:	mov    r13,r8
 100b350:	mov    edi,edx
 100b352:	mov    rsi,rcx
 100b355:	xor    ebx,ebx
 100b357:	mov    DWORD PTR [rsp+0x30],ebx
 100b35b:	mov    rcx,QWORD PTR [rcx+0x10]
 100b35f:	call   0x10092e0
 100b364:	mov    rcx,rax
 100b367:	mov    eax,0xb3c
 100b36c:	mul    rdi
 100b36f:	mov    rdx,0xffffffffffffffff
 100b376:	cmovo  rax,rdx
 100b37a:	mov    rdx,rax
 100b37d:	call   0x100a2b0
 100b382:	test   rax,rax
 100b385:	jne    0x100b392
 100b387:	mov    eax,0x8007000e
 100b38c:	mov    DWORD PTR [rsp+0x30],eax
 100b390:	jmp    0x100b3af
 100b392:	lea    rcx,[rsi+0x1120]
 100b399:	mov    QWORD PTR [rsp+0x20],rax
 100b39e:	mov    r9,r12
 100b3a1:	mov    r8,r13
 100b3a4:	mov    edx,edi
 100b3a6:	call   0x100b190
 100b3ab:	mov    DWORD PTR [rsp+0x30],eax
 100b3af:	jmp    0x100b3ce
 100b3b1:	mov    ebx,eax
 100b3b3:	cmp    eax,0xc00000fd
 100b3b8:	jne    0x100b3c0
 100b3ba:	call   QWORD PTR [rip+0xffffffffffff5f88]        # 0x1001348
 100b3c0:	mov    eax,0x80004005
 100b3c5:	test   ebx,ebx
 100b3c7:	cmovns ebx,eax
 100b3ca:	mov    eax,DWORD PTR [rsp+0x30]
 100b3ce:	test   eax,eax
 100b3d0:	cmovns eax,ebx
 100b3d3:	mov    rbx,QWORD PTR [rsp+0x50]
 100b3d8:	mov    rsi,QWORD PTR [rsp+0x58]
 100b3dd:	mov    rdi,QWORD PTR [rsp+0x60]
 100b3e2:	mov    r12,QWORD PTR [rsp+0x68]
 100b3e7:	add    rsp,0x40
 100b3eb:	pop    r13
 100b3ed:	ret    
 100b3ee:	int3   
 100b3ef:	int3   
 100b3f0:	int3   
 100b3f1:	int3   
 100b3f2:	int3   
 100b3f3:	int3   
 100b3f4:	int3   
 100b3f5:	int3   
 100b3f6:	int3   
 100b3f7:	int3   
 100b3f8:	int3   
 100b3f9:	int3   
 100b3fa:	int3   
 100b3fb:	int3   
 100b3fc:	int3   
 100b3fd:	int3   
 100b3fe:	int3   
 100b3ff:	int3   
 100b400:	mov    QWORD PTR [rsp+0x18],rbp
 100b405:	mov    QWORD PTR [rsp+0x20],rsi
 100b40a:	push   rdi
 100b40b:	sub    rsp,0x20
 100b40f:	cmp    DWORD PTR [rcx+0x13b8],0x0
 100b416:	mov    rsi,r8
 100b419:	mov    rbp,rdx
 100b41c:	mov    rdi,rcx
 100b41f:	jne    0x100b433
 100b421:	xor    eax,eax
 100b423:	mov    rbp,QWORD PTR [rsp+0x40]
 100b428:	mov    rsi,QWORD PTR [rsp+0x48]
 100b42d:	add    rsp,0x20
 100b431:	pop    rdi
 100b432:	ret    
 100b433:	mov    r9d,DWORD PTR [rcx+0x13b4]
 100b43a:	lea    r8,[rip+0xffffffffffff806f]        # 0x10034b0
 100b441:	mov    rdx,rsi
 100b444:	mov    rcx,rbp
 100b447:	call   0x100a8d0
 100b44c:	test   eax,eax
 100b44e:	mov    r11d,eax
 100b451:	js     0x100b501
 100b457:	mov    eax,DWORD PTR [rdi+0x13b4]
 100b45d:	cmp    eax,0x20000001
 100b462:	jne    0x100b485
 100b464:	lea    r8,[rip+0xffffffffffff7fe5]        # 0x1003450
 100b46b:	mov    rdx,rsi
 100b46e:	mov    rcx,rbp
 100b471:	mov    rbp,QWORD PTR [rsp+0x40]
 100b476:	mov    rsi,QWORD PTR [rsp+0x48]
 100b47b:	add    rsp,0x20
 100b47f:	pop    rdi
 100b480:	jmp    0x100b070
 100b485:	test   eax,eax
 100b487:	jne    0x100b4aa
 100b489:	lea    r8,[rip+0xffffffffffff7f30]        # 0x10033c0
 100b490:	mov    rdx,rsi
 100b493:	mov    rcx,rbp
 100b496:	mov    rbp,QWORD PTR [rsp+0x40]
 100b49b:	mov    rsi,QWORD PTR [rsp+0x48]
 100b4a0:	add    rsp,0x20
 100b4a4:	pop    rdi
 100b4a5:	jmp    0x100b070
 100b4aa:	mov    QWORD PTR [rsp+0x30],rbx
 100b4af:	mov    QWORD PTR [rsp+0x38],r12
 100b4b4:	lea    r12,[rip+0xffffffffffff7e25]        # 0x10032e0
 100b4bb:	xor    ebx,ebx
 100b4bd:	data16 xchg ax,ax
 100b4c0:	mov    ecx,DWORD PTR [rbx+r12*1]
 100b4c4:	mov    eax,ecx
 100b4c6:	and    eax,DWORD PTR [rdi+0x13b4]
 100b4cc:	cmp    ecx,eax
 100b4ce:	jne    0x100b4e7
 100b4d0:	mov    r8,QWORD PTR [rbx+r12*1+0x8]
 100b4d5:	mov    rdx,rsi
 100b4d8:	mov    rcx,rbp
 100b4db:	call   0x100b070
 100b4e0:	test   eax,eax
 100b4e2:	mov    r11d,eax
 100b4e5:	js     0x100b4f7
 100b4e7:	add    rbx,0x10
 100b4eb:	cmp    rbx,0xe0
 100b4f2:	jb     0x100b4c0
 100b4f4:	mov    eax,r11d
 100b4f7:	mov    rbx,QWORD PTR [rsp+0x30]
 100b4fc:	mov    r12,QWORD PTR [rsp+0x38]
 100b501:	mov    rbp,QWORD PTR [rsp+0x40]
 100b506:	mov    rsi,QWORD PTR [rsp+0x48]
 100b50b:	add    rsp,0x20
 100b50f:	pop    rdi
 100b510:	ret    
 100b511:	int3   
 100b512:	int3   
 100b513:	int3   
 100b514:	int3   
 100b515:	int3   
 100b516:	int3   
 100b517:	int3   
 100b518:	int3   
 100b519:	int3   
 100b51a:	int3   
 100b51b:	int3   
 100b51c:	int3   
 100b51d:	int3   
 100b51e:	int3   
 100b51f:	int3   
 100b520:	mov    QWORD PTR [rsp+0x8],rbx
 100b525:	push   rdi
 100b526:	sub    rsp,0x30
 100b52a:	xor    edi,edi
 100b52c:	mov    rbx,QWORD PTR [rcx+0x18]
 100b530:	mov    QWORD PTR [rsp+0x20],rbx
 100b535:	test   rbx,rbx
 100b538:	je     0x100b55a
 100b53a:	lea    rcx,[rbx+0xc]
 100b53e:	mov    edx,DWORD PTR [rcx]
 100b540:	shl    rdx,0x4
 100b544:	add    rdx,0xc
 100b548:	call   0x100a440
 100b54d:	mov    DWORD PTR [rbx+0x8],eax
 100b550:	mov    rbx,QWORD PTR [rbx]
 100b553:	mov    QWORD PTR [rsp+0x20],rbx
 100b558:	jmp    0x100b535
 100b55a:	jmp    0x100b575
 100b55c:	mov    edi,eax
 100b55e:	cmp    eax,0xc00000fd
 100b563:	jne    0x100b56b
 100b565:	call   QWORD PTR [rip+0xffffffffffff5ddd]        # 0x1001348
 100b56b:	mov    eax,0x80004005
 100b570:	test   edi,edi
 100b572:	cmovns edi,eax
 100b575:	mov    eax,edi
 100b577:	mov    rbx,QWORD PTR [rsp+0x40]
 100b57c:	add    rsp,0x30
 100b580:	pop    rdi
 100b581:	ret    
 100b582:	int3   
 100b583:	int3   
 100b584:	int3   
 100b585:	int3   
 100b586:	int3   
 100b587:	int3   
 100b588:	int3   
 100b589:	int3   
 100b58a:	int3   
 100b58b:	int3   
 100b58c:	int3   
 100b58d:	int3   
 100b58e:	int3   
 100b58f:	int3   
 100b590:	mov    QWORD PTR [rsp+0x8],rbx
 100b595:	push   rdi
 100b596:	sub    rsp,0x20
 100b59a:	xor    edi,edi
 100b59c:	mov    DWORD PTR [rcx],0x2
 100b5a2:	mov    rbx,rcx
 100b5a5:	mov    DWORD PTR [rcx+0x4],edi
 100b5a8:	mov    QWORD PTR [rcx+0x8],rdi
 100b5ac:	mov    QWORD PTR [rcx+0x10],rdi
 100b5b0:	mov    QWORD PTR [rcx+0x18],rdi
 100b5b4:	mov    QWORD PTR [rcx+0x20],rdi
 100b5b8:	mov    QWORD PTR [rcx+0x28],rdi
 100b5bc:	mov    QWORD PTR [rcx+0x30],rdi
 100b5c0:	mov    QWORD PTR [rcx+0x38],rdi
 100b5c4:	mov    QWORD PTR [rcx+0x40],rdi
 100b5c8:	mov    QWORD PTR [rcx+0x48],rdi
 100b5cc:	mov    QWORD PTR [rcx+0x50],rdi
 100b5d0:	mov    DWORD PTR [rcx+0x58],edi
 100b5d3:	mov    DWORD PTR [rcx+0x5c],edi
 100b5d6:	mov    DWORD PTR [rcx+0x60],edi
 100b5d9:	mov    DWORD PTR [rcx+0x64],edi
 100b5dc:	mov    QWORD PTR [rcx+0x68],rdi
 100b5e0:	mov    QWORD PTR [rcx+0x78],rdi
 100b5e4:	mov    QWORD PTR [rcx+0x80],rdi
 100b5eb:	mov    DWORD PTR [rcx+0x88],edi
 100b5f1:	mov    DWORD PTR [rcx+0x8c],edi
 100b5f7:	mov    DWORD PTR [rcx+0x90],edi
 100b5fd:	mov    DWORD PTR [rcx+0x94],edi
 100b603:	mov    DWORD PTR [rcx+0x98],edi
 100b609:	mov    DWORD PTR [rcx+0x9c],edi
 100b60f:	mov    DWORD PTR [rcx+0xa0],edi
 100b615:	mov    DWORD PTR [rcx+0xa4],edi
 100b61b:	mov    DWORD PTR [rcx+0xa8],edi
 100b621:	mov    DWORD PTR [rcx+0xac],edi
 100b627:	mov    DWORD PTR [rcx+0xb0],edi
 100b62d:	mov    DWORD PTR [rcx+0xb4],edi
 100b633:	mov    DWORD PTR [rcx+0xb8],edi
 100b639:	mov    DWORD PTR [rcx+0xbc],edi
 100b63f:	mov    DWORD PTR [rcx+0xc4],edi
 100b645:	mov    DWORD PTR [rcx+0xc8],edi
 100b64b:	mov    DWORD PTR [rcx+0xcc],edi
 100b651:	mov    QWORD PTR [rcx+0xd0],rdi
 100b658:	mov    DWORD PTR [rcx+0xd8],edi
 100b65e:	mov    DWORD PTR [rcx+0xdc],edi
 100b664:	mov    DWORD PTR [rcx+0xe0],0x80
 100b66e:	mov    DWORD PTR [rcx+0xe4],edi
 100b674:	add    rcx,0xe8
 100b67b:	xor    edx,edx
 100b67d:	mov    r8d,0x800
 100b683:	call   0x1006d28
 100b688:	lea    rcx,[rbx+0x900]
 100b68f:	xor    edx,edx
 100b691:	mov    r8d,0x800
 100b697:	mov    QWORD PTR [rbx+0x8e8],rdi
 100b69e:	mov    DWORD PTR [rbx+0x8f0],edi
 100b6a4:	mov    DWORD PTR [rbx+0x8f4],edi
 100b6aa:	mov    DWORD PTR [rbx+0x8f8],0x80
 100b6b4:	mov    DWORD PTR [rbx+0x8fc],edi
 100b6ba:	call   0x1006d28
 100b6bf:	lea    rcx,[rbx+0x1108]
 100b6c6:	xor    edx,edx
 100b6c8:	mov    r8d,0x230
 100b6ce:	call   0x1006d28
 100b6d3:	mov    DWORD PTR [rbx+0x70],edi
 100b6d6:	mov    DWORD PTR [rbx+0x74],edi
 100b6d9:	mov    rax,rbx
 100b6dc:	mov    rbx,QWORD PTR [rsp+0x30]
 100b6e1:	add    rsp,0x20
 100b6e5:	pop    rdi
 100b6e6:	ret    
 100b6e7:	int3   
 100b6e8:	int3   
 100b6e9:	int3   
 100b6ea:	int3   
 100b6eb:	int3   
 100b6ec:	int3   
 100b6ed:	int3   
 100b6ee:	int3   
 100b6ef:	int3   
 100b6f0:	mov    QWORD PTR [rsp+0x8],rbx
 100b6f5:	mov    QWORD PTR [rsp+0x10],rbp
 100b6fa:	mov    QWORD PTR [rsp+0x18],rsi
 100b6ff:	push   rdi
 100b700:	sub    rsp,0x20
 100b704:	lea    rax,[rip+0xffffffffffff8345]        # 0x1003a50
 100b70b:	mov    rdi,rcx
 100b70e:	mov    DWORD PTR [rcx+0x8],0x1
 100b715:	mov    QWORD PTR [rcx],rax
 100b718:	xor    ebp,ebp
 100b71a:	add    rcx,0x18
 100b71e:	mov    QWORD PTR [rcx-0x8],rbp
 100b722:	mov    ebx,r8d
 100b725:	mov    rsi,rdx
 100b728:	call   0x100b590
 100b72d:	test   rsi,rsi
 100b730:	mov    QWORD PTR [rdi+0x1360],0x200
 100b73b:	mov    QWORD PTR [rdi+0x1368],rbp
 100b742:	mov    QWORD PTR [rdi+0x1370],rbp
 100b749:	lea    r11,[rdi+0xe8]
 100b750:	mov    QWORD PTR [rdi+0x1378],r11
 100b757:	mov    QWORD PTR [rdi+0x1380],r11
 100b75e:	mov    QWORD PTR [rdi+0x1388],0x200
 100b769:	mov    QWORD PTR [rdi+0x1390],rbp
 100b770:	mov    QWORD PTR [rdi+0x1398],rbp
 100b777:	lea    rax,[rdi+0x900]
 100b77e:	mov    QWORD PTR [rdi+0x13a0],rax
 100b785:	mov    QWORD PTR [rdi+0x13a8],rax
 100b78c:	mov    DWORD PTR [rdi+0x13b0],ebx
 100b792:	mov    DWORD PTR [rdi+0x13b4],ebp
 100b798:	mov    DWORD PTR [rdi+0x13b8],ebp
 100b79e:	mov    DWORD PTR [rdi+0x13bc],ebp
 100b7a4:	mov    DWORD PTR [rdi+0x13c0],ebp
 100b7aa:	mov    QWORD PTR [rdi+0x13c8],rbp
 100b7b1:	je     0x100b7f3
 100b7b3:	mov    rcx,QWORD PTR [rdi+0x10]
 100b7b7:	test   rcx,rcx
 100b7ba:	je     0x100b7c6
 100b7bc:	mov    rax,QWORD PTR [rcx]
 100b7bf:	call   QWORD PTR [rax+0x10]
 100b7c2:	mov    QWORD PTR [rdi+0x10],rbp
 100b7c6:	mov    QWORD PTR [rdi+0x10],rsi
 100b7ca:	mov    rax,QWORD PTR [rsi]
 100b7cd:	mov    rcx,rsi
 100b7d0:	call   QWORD PTR [rax+0x8]
 100b7d3:	mov    rcx,QWORD PTR [rdi+0x10]
 100b7d7:	call   0x10092e0
 100b7dc:	mov    rcx,QWORD PTR [rdi+0x10]
 100b7e0:	mov    QWORD PTR [rdi+0x1370],rax
 100b7e7:	call   0x10092e0
 100b7ec:	mov    QWORD PTR [rdi+0x1398],rax
 100b7f3:	call   QWORD PTR [rip+0xffffffffffff58f7]        # 0x10010f0
 100b7f9:	lea    rcx,[rdi+0x13d0]
 100b800:	xor    edx,edx
 100b802:	mov    r8d,0x208
 100b808:	mov    DWORD PTR [rdi+0x74],eax
 100b80b:	call   0x1006d28
 100b810:	xor    edx,edx
 100b812:	lea    rcx,[rdi+0x15d8]
 100b819:	lea    r8d,[rdx+0x68]
 100b81d:	call   0x1006d28
 100b822:	mov    rbx,QWORD PTR [rsp+0x30]
 100b827:	mov    rbp,QWORD PTR [rsp+0x38]
 100b82c:	mov    rsi,QWORD PTR [rsp+0x40]
 100b831:	xor    eax,eax
 100b833:	mov    QWORD PTR [rdi+0x1640],rax
 100b83a:	mov    QWORD PTR [rdi+0x1648],rax
 100b841:	mov    QWORD PTR [rdi+0x1650],rax
 100b848:	mov    rax,rdi
 100b84b:	add    rsp,0x20
 100b84f:	pop    rdi
 100b850:	ret    
 100b851:	int3   
 100b852:	int3   
 100b853:	int3   
 100b854:	int3   
 100b855:	int3   
 100b856:	int3   
 100b857:	int3   
 100b858:	int3   
 100b859:	int3   
 100b85a:	int3   
 100b85b:	int3   
 100b85c:	int3   
 100b85d:	int3   
 100b85e:	int3   
 100b85f:	int3   
 100b860:	mov    QWORD PTR [rsp+0x10],rbx
 100b865:	mov    QWORD PTR [rsp+0x18],rbp
 100b86a:	mov    QWORD PTR [rsp+0x20],rsi
 100b86f:	push   rdi
 100b870:	sub    rsp,0x20
 100b874:	xor    ebx,ebx
 100b876:	test   rdx,rdx
 100b879:	mov    rsi,r8
 100b87c:	mov    rbp,rdx
 100b87f:	mov    rdi,rcx
 100b882:	je     0x100b93a
 100b888:	test   r8,r8
 100b88b:	je     0x100b93a
 100b891:	mov    r9,QWORD PTR [rcx+0x1380]
 100b898:	mov    QWORD PTR [rsp+0x30],r12
 100b89d:	mov    eax,DWORD PTR [r9+0x10]
 100b8a1:	cmp    DWORD PTR [r9+0xc],eax
 100b8a5:	jb     0x100b8f0
 100b8a7:	mov    rcx,QWORD PTR [rcx+0x1370]
 100b8ae:	test   rcx,rcx
 100b8b1:	je     0x100b92c
 100b8b3:	mov    r12,QWORD PTR [rdi+0x1360]
 100b8ba:	mov    rdx,r12
 100b8bd:	shl    rdx,0x4
 100b8c1:	add    rdx,0x18
 100b8c5:	call   0x100a2b0
 100b8ca:	test   rax,rax
 100b8cd:	mov    r11,rax
 100b8d0:	je     0x100b92c
 100b8d2:	mov    QWORD PTR [rax],rbx
 100b8d5:	mov    DWORD PTR [rax+0x8],ebx
 100b8d8:	mov    DWORD PTR [rax+0xc],ebx
 100b8db:	mov    DWORD PTR [rax+0x10],r12d
 100b8df:	mov    rax,QWORD PTR [rdi+0x1380]
 100b8e6:	mov    QWORD PTR [rax],r11
 100b8e9:	mov    QWORD PTR [rdi+0x1380],r11
 100b8f0:	mov    rcx,QWORD PTR [rdi+0x1380]
 100b8f7:	mov    edx,DWORD PTR [rcx+0xc]
 100b8fa:	lea    eax,[rdx+0x1]
 100b8fd:	add    rdx,rdx
 100b900:	mov    DWORD PTR [rcx+0xc],eax
 100b903:	mov    rax,QWORD PTR [rdi+0x1380]
 100b90a:	add    QWORD PTR [rdi+0x1368],0x1
 100b912:	lea    rcx,[rax+rdx*8+0x18]
 100b917:	test   rcx,rcx
 100b91a:	je     0x100b92c
 100b91c:	mov    r12,QWORD PTR [rsp+0x30]
 100b921:	mov    QWORD PTR [rcx],rbp
 100b924:	mov    QWORD PTR [rcx+0x8],rsi
 100b928:	mov    eax,ebx
 100b92a:	jmp    0x100b93c
 100b92c:	mov    r12,QWORD PTR [rsp+0x30]
 100b931:	mov    ebx,0x8007000e
 100b936:	mov    eax,ebx
 100b938:	jmp    0x100b93c
 100b93a:	xor    eax,eax
 100b93c:	mov    rbx,QWORD PTR [rsp+0x38]
 100b941:	mov    rbp,QWORD PTR [rsp+0x40]
 100b946:	mov    rsi,QWORD PTR [rsp+0x48]
 100b94b:	add    rsp,0x20
 100b94f:	pop    rdi
 100b950:	ret    
 100b951:	int3   
 100b952:	int3   
 100b953:	int3   
 100b954:	int3   
 100b955:	int3   
 100b956:	int3   
 100b957:	int3   
 100b958:	int3   
 100b959:	int3   
 100b95a:	int3   
 100b95b:	int3   
 100b95c:	int3   
 100b95d:	int3   
 100b95e:	int3   
 100b95f:	int3   
 100b960:	mov    QWORD PTR [rsp+0x10],rbx
 100b965:	mov    QWORD PTR [rsp+0x18],rbp
 100b96a:	mov    QWORD PTR [rsp+0x20],rsi
 100b96f:	push   rdi
 100b970:	sub    rsp,0x20
 100b974:	xor    ebx,ebx
 100b976:	test   rdx,rdx
 100b979:	mov    rsi,r8
 100b97c:	mov    rbp,rdx
 100b97f:	mov    rdi,rcx
 100b982:	je     0x100ba3a
 100b988:	test   r8,r8
 100b98b:	je     0x100ba3a
 100b991:	mov    r9,QWORD PTR [rcx+0x13a8]
 100b998:	mov    QWORD PTR [rsp+0x30],r12
 100b99d:	mov    eax,DWORD PTR [r9+0x10]
 100b9a1:	cmp    DWORD PTR [r9+0xc],eax
 100b9a5:	jb     0x100b9f0
 100b9a7:	mov    rcx,QWORD PTR [rcx+0x1398]
 100b9ae:	test   rcx,rcx
 100b9b1:	je     0x100ba2c
 100b9b3:	mov    r12,QWORD PTR [rdi+0x1388]
 100b9ba:	mov    rdx,r12
 100b9bd:	shl    rdx,0x4
 100b9c1:	add    rdx,0x18
 100b9c5:	call   0x100a2b0
 100b9ca:	test   rax,rax
 100b9cd:	mov    r11,rax
 100b9d0:	je     0x100ba2c
 100b9d2:	mov    QWORD PTR [rax],rbx
 100b9d5:	mov    DWORD PTR [rax+0x8],ebx
 100b9d8:	mov    DWORD PTR [rax+0xc],ebx
 100b9db:	mov    DWORD PTR [rax+0x10],r12d
 100b9df:	mov    rax,QWORD PTR [rdi+0x13a8]
 100b9e6:	mov    QWORD PTR [rax],r11
 100b9e9:	mov    QWORD PTR [rdi+0x13a8],r11
 100b9f0:	mov    rcx,QWORD PTR [rdi+0x13a8]
 100b9f7:	mov    edx,DWORD PTR [rcx+0xc]
 100b9fa:	lea    eax,[rdx+0x1]
 100b9fd:	add    rdx,rdx
 100ba00:	mov    DWORD PTR [rcx+0xc],eax
 100ba03:	mov    rax,QWORD PTR [rdi+0x13a8]
 100ba0a:	add    QWORD PTR [rdi+0x1390],0x1
 100ba12:	lea    rcx,[rax+rdx*8+0x18]
 100ba17:	test   rcx,rcx
 100ba1a:	je     0x100ba2c
 100ba1c:	mov    r12,QWORD PTR [rsp+0x30]
 100ba21:	mov    QWORD PTR [rcx],rbp
 100ba24:	mov    QWORD PTR [rcx+0x8],rsi
 100ba28:	mov    eax,ebx
 100ba2a:	jmp    0x100ba3c
 100ba2c:	mov    r12,QWORD PTR [rsp+0x30]
 100ba31:	mov    ebx,0x8007000e
 100ba36:	mov    eax,ebx
 100ba38:	jmp    0x100ba3c
 100ba3a:	xor    eax,eax
 100ba3c:	mov    rbx,QWORD PTR [rsp+0x38]
 100ba41:	mov    rbp,QWORD PTR [rsp+0x40]
 100ba46:	mov    rsi,QWORD PTR [rsp+0x48]
 100ba4b:	add    rsp,0x20
 100ba4f:	pop    rdi
 100ba50:	ret    
 100ba51:	int3   
 100ba52:	int3   
 100ba53:	int3   
 100ba54:	int3   
 100ba55:	int3   
 100ba56:	int3   
 100ba57:	int3   
 100ba58:	int3   
 100ba59:	int3   
 100ba5a:	int3   
 100ba5b:	int3   
 100ba5c:	int3   
 100ba5d:	int3   
 100ba5e:	int3   
 100ba5f:	int3   
 100ba60:	rex push rbx
 100ba62:	sub    rsp,0x30
 100ba66:	xor    ebx,ebx
 100ba68:	mov    DWORD PTR [rsp+0x20],ebx
 100ba6c:	add    rcx,0x1120
 100ba73:	call   0x100b230
 100ba78:	mov    DWORD PTR [rsp+0x20],eax
 100ba7c:	jmp    0x100ba9b
 100ba7e:	mov    ebx,eax
 100ba80:	cmp    eax,0xc00000fd
 100ba85:	jne    0x100ba8d
 100ba87:	call   QWORD PTR [rip+0xffffffffffff58bb]        # 0x1001348
 100ba8d:	mov    eax,0x80004005
 100ba92:	test   ebx,ebx
 100ba94:	cmovns ebx,eax
 100ba97:	mov    eax,DWORD PTR [rsp+0x20]
 100ba9b:	test   eax,eax
 100ba9d:	cmovns eax,ebx
 100baa0:	add    rsp,0x30
 100baa4:	pop    rbx
 100baa5:	ret    
 100baa6:	int3   
 100baa7:	int3   
 100baa8:	int3   
 100baa9:	int3   
 100baaa:	int3   
 100baab:	int3   
 100baac:	int3   
 100baad:	int3   
 100baae:	int3   
 100baaf:	int3   
 100bab0:	mov    QWORD PTR [rsp+0x8],rbx
 100bab5:	mov    QWORD PTR [rsp+0x10],rsi
 100baba:	push   rdi
 100babb:	sub    rsp,0x30
 100babf:	mov    rsi,rcx
 100bac2:	xor    edi,edi
 100bac4:	mov    DWORD PTR [rsp+0x20],edi
 100bac8:	add    rcx,0x18
 100bacc:	mov    edx,0xa0
 100bad1:	call   0x100a440
 100bad6:	mov    DWORD PTR [rsi+0xb8],eax
 100badc:	mov    rcx,QWORD PTR [rsi+0x38]
 100bae0:	call   0x100a490
 100bae5:	mov    DWORD PTR [rsi+0xc0],eax
 100baeb:	mov    rcx,QWORD PTR [rsi+0x40]
 100baef:	call   0x100a490
 100baf4:	mov    DWORD PTR [rsi+0xc4],eax
 100bafa:	lea    rcx,[rsi+0x1360]
 100bb01:	call   0x100b520
 100bb06:	mov    ebx,eax
 100bb08:	mov    DWORD PTR [rsp+0x20],eax
 100bb0c:	test   eax,eax
 100bb0e:	jne    0x100bb22
 100bb10:	lea    rcx,[rsi+0x1388]
 100bb17:	call   0x100b520
 100bb1c:	mov    ebx,eax
 100bb1e:	mov    DWORD PTR [rsp+0x20],eax
 100bb22:	mov    rcx,QWORD PTR [rsi+0x90]
 100bb29:	call   0x100a490
 100bb2e:	mov    DWORD PTR [rsi+0xd4],eax
 100bb34:	mov    rcx,QWORD PTR [rsi+0x98]
 100bb3b:	call   0x100a490
 100bb40:	mov    DWORD PTR [rsi+0xd8],eax
 100bb46:	mov    rcx,QWORD PTR [rsi+0x58]
 100bb4a:	call   0x100a490
 100bb4f:	mov    DWORD PTR [rsi+0xd0],eax
 100bb55:	mov    rcx,QWORD PTR [rsi+0x20]
 100bb59:	call   0x100a490
 100bb5e:	mov    DWORD PTR [rsi+0xbc],eax
 100bb64:	mov    rcx,QWORD PTR [rsi+0x48]
 100bb68:	call   0x100a490
 100bb6d:	mov    DWORD PTR [rsi+0xc8],eax
 100bb73:	mov    rcx,QWORD PTR [rsi+0x50]
 100bb77:	call   0x100a490
 100bb7c:	mov    DWORD PTR [rsi+0xcc],eax
 100bb82:	mov    rcx,QWORD PTR [rsi+0x60]
 100bb86:	call   0x100a490
 100bb8b:	mov    DWORD PTR [rsi+0xdc],eax
 100bb91:	mov    rcx,QWORD PTR [rsi+0x68]
 100bb95:	call   0x100a490
 100bb9a:	mov    DWORD PTR [rsi+0xe0],eax
 100bba0:	lea    rcx,[rsi+0x1120]
 100bba7:	call   0x100ae80
 100bbac:	mov    DWORD PTR [rsi+0x1350],eax
 100bbb2:	jmp    0x100bbd1
 100bbb4:	mov    edi,eax
 100bbb6:	cmp    eax,0xc00000fd
 100bbbb:	jne    0x100bbc3
 100bbbd:	call   QWORD PTR [rip+0xffffffffffff5785]        # 0x1001348
 100bbc3:	mov    eax,0x80004005
 100bbc8:	test   edi,edi
 100bbca:	cmovns edi,eax
 100bbcd:	mov    ebx,DWORD PTR [rsp+0x20]
 100bbd1:	test   ebx,ebx
 100bbd3:	cmovns ebx,edi
 100bbd6:	mov    eax,ebx
 100bbd8:	mov    rbx,QWORD PTR [rsp+0x40]
 100bbdd:	mov    rsi,QWORD PTR [rsp+0x48]
 100bbe2:	add    rsp,0x30
 100bbe6:	pop    rdi
 100bbe7:	ret    
 100bbe8:	int3   
 100bbe9:	int3   
 100bbea:	int3   
 100bbeb:	int3   
 100bbec:	int3   
 100bbed:	int3   
 100bbee:	int3   
 100bbef:	int3   
 100bbf0:	mov    QWORD PTR [rsp+0x8],rcx
 100bbf5:	push   rbx
 100bbf6:	push   rsi
 100bbf7:	push   rdi
 100bbf8:	push   r12
 100bbfa:	push   r13
 100bbfc:	push   r14
 100bbfe:	push   r15
 100bc00:	sub    rsp,0x60
 100bc04:	mov    rsi,rcx
 100bc07:	xor    r12d,r12d
 100bc0a:	mov    ebx,r12d
 100bc0d:	mov    DWORD PTR [rsp+0x50],ebx
 100bc11:	call   QWORD PTR [rip+0xffffffffffff5519]        # 0x1001130
 100bc17:	mov    rcx,rax
 100bc1a:	call   QWORD PTR [rip+0xffffffffffff5518]        # 0x1001138
 100bc20:	mov    r15d,eax
 100bc23:	mov    DWORD PTR [rsp+0xa8],eax
 100bc2a:	cmp    eax,0x7fffffff
 100bc2f:	je     0x100bc45
 100bc31:	call   QWORD PTR [rip+0xffffffffffff54f9]        # 0x1001130
 100bc37:	mov    rcx,rax
 100bc3a:	lea    edx,[r12+0x1]
 100bc3f:	call   QWORD PTR [rip+0xffffffffffff54fb]        # 0x1001140
 100bc45:	mov    r13d,r12d
 100bc48:	mov    edi,DWORD PTR [rsi+0xa4]
 100bc4e:	call   QWORD PTR [rip+0xffffffffffff549c]        # 0x10010f0
 100bc54:	cmp    edi,eax
 100bc56:	jne    0x100bc64
 100bc58:	mov    rax,QWORD PTR [rsi+0x30]
 100bc5c:	cmp    DWORD PTR [rax],0xc00000fd
 100bc62:	je     0x100bc88
 100bc64:	mov    eax,DWORD PTR [rsi+0xa8]
 100bc6a:	bt     eax,0xc
 100bc6e:	jb     0x100bc88
 100bc70:	bt     eax,0xf
 100bc74:	jb     0x100bc88
 100bc76:	mov    rdx,rsi
 100bc79:	mov    rcx,QWORD PTR [rsi+0x10]
 100bc7d:	call   0x1009940
 100bc82:	mov    ebx,eax
 100bc84:	mov    DWORD PTR [rsp+0x50],eax
 100bc88:	mov    rax,QWORD PTR [rsi]
 100bc8b:	mov    r8d,0x1658
 100bc91:	mov    rdx,rsi
 100bc94:	mov    rcx,rsi
 100bc97:	call   QWORD PTR [rax+0x50]
 100bc9a:	test   ebx,ebx
 100bc9c:	cmovns ebx,eax
 100bc9f:	mov    DWORD PTR [rsp+0x50],ebx
 100bca3:	mov    rdx,QWORD PTR [rsi+0x50]
 100bca7:	test   rdx,rdx
 100bcaa:	je     0x100bcd3
 100bcac:	mov    r9,QWORD PTR [rsi]
 100bcaf:	xor    eax,eax
 100bcb1:	or     rcx,0xffffffffffffffff
 100bcb5:	mov    rdi,rdx
 100bcb8:	repnz scas ax,WORD PTR es:[rdi]
 100bcbb:	not    rcx
 100bcbe:	lea    r8,[rcx+rcx*1-0x2]
 100bcc3:	mov    rcx,rsi
 100bcc6:	call   QWORD PTR [r9+0x50]
 100bcca:	test   ebx,ebx
 100bccc:	cmovns ebx,eax
 100bccf:	mov    DWORD PTR [rsp+0x50],ebx
 100bcd3:	mov    rdx,QWORD PTR [rsi+0x48]
 100bcd7:	test   rdx,rdx
 100bcda:	je     0x100bd03
 100bcdc:	mov    r9,QWORD PTR [rsi]
 100bcdf:	xor    eax,eax
 100bce1:	or     rcx,0xffffffffffffffff
 100bce5:	mov    rdi,rdx
 100bce8:	repnz scas ax,WORD PTR es:[rdi]
 100bceb:	not    rcx
 100bcee:	lea    r8,[rcx+rcx*1-0x2]
 100bcf3:	mov    rcx,rsi
 100bcf6:	call   QWORD PTR [r9+0x50]
 100bcfa:	test   ebx,ebx
 100bcfc:	cmovns ebx,eax
 100bcff:	mov    DWORD PTR [rsp+0x50],ebx
 100bd03:	call   QWORD PTR [rip+0xffffffffffff5537]        # 0x1001240
 100bd09:	mov    DWORD PTR [rsi+0x78],eax
 100bd0c:	mov    rcx,rsi
 100bd0f:	call   0x100bab0
 100bd14:	test   ebx,ebx
 100bd16:	cmovns ebx,eax
 100bd19:	mov    DWORD PTR [rsp+0x50],ebx
 100bd1d:	lea    rdi,[rsi+0x18]
 100bd21:	call   0x1006470
 100bd26:	mov    r9,rax
 100bd29:	mov    QWORD PTR [rsp+0x30],rdi
 100bd2e:	mov    eax,DWORD PTR [rsi+0x78]
 100bd31:	mov    DWORD PTR [rsp+0x28],eax
 100bd35:	lea    rax,[rip+0xffffffffffff756c]        # 0x10032a8
 100bd3c:	mov    QWORD PTR [rsp+0x20],rax
 100bd41:	lea    r8,[rip+0xffffffffffff7e00]        # 0x1003b48
 100bd48:	mov    edx,0x104
 100bd4d:	lea    rcx,[rsi+0x13d0]
 100bd54:	call   0x1009750
 100bd59:	test   eax,eax
 100bd5b:	js     0x100bf0a
 100bd61:	lea    rdi,[rsi+0x15d8]
 100bd68:	mov    rcx,rdi
 100bd6b:	call   QWORD PTR [rip+0xffffffffffff53d7]        # 0x1001148
 100bd71:	mov    QWORD PTR [rsi+0x15e0],r12
 100bd78:	mov    QWORD PTR [rsi+0x15f0],r12
 100bd7f:	lea    r14,[rsi+0x1640]
 100bd86:	mov    rcx,QWORD PTR [rsi+0x10]
 100bd8a:	call   0x1009460
 100bd8f:	mov    rcx,rax
 100bd92:	mov    QWORD PTR [rsp+0x48],r14
 100bd97:	mov    QWORD PTR [rsp+0x40],rdi
 100bd9c:	mov    QWORD PTR [rsp+0x38],r12
 100bda1:	mov    QWORD PTR [rsp+0x30],r12
 100bda6:	mov    DWORD PTR [rsp+0x28],0xc008010
 100bdae:	mov    DWORD PTR [rsp+0x20],r12d
 100bdb3:	xor    r9d,r9d
 100bdb6:	xor    r8d,r8d
 100bdb9:	lea    rdx,[rsi+0x13d0]
 100bdc0:	call   QWORD PTR [rip+0xffffffffffff538a]        # 0x1001150
 100bdc6:	test   eax,eax
 100bdc8:	je     0x100beed
 100bdce:	mov    edi,r12d
 100bdd1:	mov    DWORD PTR [rsp+0x54],r12d
 100bdd6:	call   QWORD PTR [rip+0xffffffffffff546c]        # 0x1001248
 100bddc:	mov    DWORD PTR [rsp+0xb0],eax
 100bde3:	nop
 100bde4:	data16 data16 xchg ax,ax
 100bde8:	data16 data16 xchg ax,ax
 100bdec:	data16 data16 xchg ax,ax
 100bdf0:	mov    edx,0x64
 100bdf5:	mov    rcx,QWORD PTR [r14]
 100bdf8:	call   QWORD PTR [rip+0xffffffffffff5242]        # 0x1001040
 100bdfe:	mov    r14d,eax
 100be01:	cmp    eax,0x102
 100be06:	jne    0x100be2f
 100be08:	cmp    DWORD PTR [rsi+0x13b0],0xffffffff
 100be0f:	je     0x100be26
 100be11:	call   QWORD PTR [rip+0xffffffffffff5431]        # 0x1001248
 100be17:	sub    eax,DWORD PTR [rsp+0xb0]
 100be1e:	cmp    eax,DWORD PTR [rsi+0x13b0]
 100be24:	jae    0x100be2f
 100be26:	lea    r14,[rsi+0x1640]
 100be2d:	jmp    0x100bdf0
 100be2f:	mov    eax,r12d
 100be32:	cmp    r14d,0x102
 100be39:	sete   al
 100be3c:	mov    DWORD PTR [rsi+0x13bc],eax
 100be42:	mov    DWORD PTR [rsi+0x13c0],0x1
 100be4c:	lea    rdx,[rsi+0x13b4]
 100be53:	mov    rcx,QWORD PTR [rsi+0x1640]
 100be5a:	call   QWORD PTR [rip+0xffffffffffff52f8]        # 0x1001158
 100be60:	test   eax,eax
 100be62:	je     0x100be81
 100be64:	cmp    DWORD PTR [rsi+0x13b4],0x103
 100be6e:	je     0x100be81
 100be70:	mov    DWORD PTR [rsi+0x13b8],0x1
 100be7a:	mov    DWORD PTR [rsi+0x13bc],r12d
 100be81:	jmp    0x100beba
 100be83:	mov    edi,eax
 100be85:	cmp    eax,0xc00000fd
 100be8a:	jne    0x100be92
 100be8c:	call   QWORD PTR [rip+0xffffffffffff54b6]        # 0x1001348
 100be92:	mov    eax,0x80004005
 100be97:	test   edi,edi
 100be99:	cmovns edi,eax
 100be9c:	mov    DWORD PTR [rsp+0x54],edi
 100bea0:	xor    r12d,r12d
 100bea3:	mov    rsi,QWORD PTR [rsp+0xa0]
 100beab:	mov    ebx,DWORD PTR [rsp+0x50]
 100beaf:	mov    r15d,DWORD PTR [rsp+0xa8]
 100beb7:	mov    r13d,r12d
 100beba:	test   ebx,ebx
 100bebc:	cmovns ebx,edi
 100bebf:	mov    DWORD PTR [rsp+0x50],ebx
 100bec3:	mov    rcx,QWORD PTR [rsi+0x1648]
 100beca:	call   QWORD PTR [rip+0xffffffffffff51a8]        # 0x1001078
 100bed0:	mov    QWORD PTR [rsi+0x1648],r12
 100bed7:	mov    rcx,QWORD PTR [rsi+0x1640]
 100bede:	call   QWORD PTR [rip+0xffffffffffff5194]        # 0x1001078
 100bee4:	mov    QWORD PTR [rsi+0x1640],r12
 100beeb:	jmp    0x100bf13
 100beed:	call   QWORD PTR [rip+0xffffffffffff5145]        # 0x1001038
 100bef3:	test   eax,eax
 100bef5:	jle    0x100beff
 100bef7:	movzx  eax,ax
 100befa:	or     eax,0x80070000
 100beff:	test   ebx,ebx
 100bf01:	cmovns ebx,eax
 100bf04:	mov    DWORD PTR [rsp+0x50],ebx
 100bf08:	jmp    0x100bf13
 100bf0a:	test   ebx,ebx
 100bf0c:	cmovns ebx,eax
 100bf0f:	mov    DWORD PTR [rsp+0x50],ebx
 100bf13:	jmp    0x100bf3d
 100bf15:	mov    r13d,eax
 100bf18:	cmp    eax,0xc00000fd
 100bf1d:	jne    0x100bf25
 100bf1f:	call   QWORD PTR [rip+0xffffffffffff5423]        # 0x1001348
 100bf25:	mov    eax,0x80004005
 100bf2a:	test   r13d,r13d
 100bf2d:	cmovns r13d,eax
 100bf31:	mov    ebx,DWORD PTR [rsp+0x50]
 100bf35:	mov    r15d,DWORD PTR [rsp+0xa8]
 100bf3d:	cmp    r15d,0x7fffffff
 100bf44:	je     0x100bf58
 100bf46:	call   QWORD PTR [rip+0xffffffffffff51e4]        # 0x1001130
 100bf4c:	mov    rcx,rax
 100bf4f:	mov    edx,r15d
 100bf52:	call   QWORD PTR [rip+0xffffffffffff51e8]        # 0x1001140
 100bf58:	test   ebx,ebx
 100bf5a:	cmovns ebx,r13d
 100bf5e:	mov    eax,ebx
 100bf60:	add    rsp,0x60
 100bf64:	pop    r15
 100bf66:	pop    r14
 100bf68:	pop    r13
 100bf6a:	pop    r12
 100bf6c:	pop    rdi
 100bf6d:	pop    rsi
 100bf6e:	pop    rbx
 100bf6f:	ret    
 100bf70:	int3   
 100bf71:	int3   
 100bf72:	int3   
 100bf73:	int3   
 100bf74:	int3   
 100bf75:	int3   
 100bf76:	int3   
 100bf77:	int3   
 100bf78:	int3   
 100bf79:	int3   
 100bf7a:	int3   
 100bf7b:	int3   
 100bf7c:	int3   
 100bf7d:	int3   
 100bf7e:	int3   
 100bf7f:	int3   
 100bf80:	mov    QWORD PTR [rsp+0x8],rbx
 100bf85:	mov    QWORD PTR [rsp+0x10],rsi
 100bf8a:	mov    QWORD PTR [rsp+0x18],rdi
 100bf8f:	push   r12
 100bf91:	sub    rsp,0x30
 100bf95:	mov    rsi,r8
 100bf98:	mov    r12,rdx
 100bf9b:	mov    rdi,rcx
 100bf9e:	xor    ebx,ebx
 100bfa0:	mov    DWORD PTR [rsp+0x20],ebx
 100bfa4:	lea    r8,[rip+0xffffffffffff5b35]        # 0x1001ae0
 100bfab:	mov    rdx,rsi
 100bfae:	mov    rcx,r12
 100bfb1:	call   0x1005e10
 100bfb6:	mov    DWORD PTR [rsp+0x20],eax
 100bfba:	test   eax,eax
 100bfbc:	js     0x100c054
 100bfc2:	cmp    DWORD PTR [rdi+0x1650],0x0
 100bfc9:	jne    0x100bfe5
 100bfcb:	lea    r8,[rip+0xffffffffffff7bfe]        # 0x1003bd0
 100bfd2:	mov    rdx,rsi
 100bfd5:	mov    rcx,r12
 100bfd8:	call   0x100b070
 100bfdd:	mov    DWORD PTR [rsp+0x20],eax
 100bfe1:	test   eax,eax
 100bfe3:	js     0x100c054
 100bfe5:	cmp    DWORD PTR [rdi+0x13c0],0x0
 100bfec:	je     0x100c030
 100bfee:	cmp    DWORD PTR [rdi+0x13bc],0x0
 100bff5:	je     0x100c01a
 100bff7:	mov    r9d,DWORD PTR [rdi+0x1650]
 100bffe:	lea    r8,[rip+0xffffffffffff7b6b]        # 0x1003b70
 100c005:	mov    rdx,rsi
 100c008:	mov    rcx,r12
 100c00b:	call   0x100a8d0
 100c010:	mov    DWORD PTR [rsp+0x20],eax
 100c014:	test   eax,eax
 100c016:	jns    0x100c030
 100c018:	jmp    0x100c054
 100c01a:	mov    r8,rsi
 100c01d:	mov    rdx,r12
 100c020:	mov    rcx,rdi
 100c023:	call   0x100b400
 100c028:	mov    DWORD PTR [rsp+0x20],eax
 100c02c:	test   eax,eax
 100c02e:	js     0x100c054
 100c030:	jmp    0x100c04f
 100c032:	mov    ebx,eax
 100c034:	cmp    eax,0xc00000fd
 100c039:	jne    0x100c041
 100c03b:	call   QWORD PTR [rip+0xffffffffffff5307]        # 0x1001348
 100c041:	mov    eax,0x80004005
 100c046:	test   ebx,ebx
 100c048:	cmovns ebx,eax
 100c04b:	mov    eax,DWORD PTR [rsp+0x20]
 100c04f:	test   eax,eax
 100c051:	cmovns eax,ebx
 100c054:	mov    rbx,QWORD PTR [rsp+0x40]
 100c059:	mov    rsi,QWORD PTR [rsp+0x48]
 100c05e:	mov    rdi,QWORD PTR [rsp+0x50]
 100c063:	add    rsp,0x30
 100c067:	pop    r12
 100c069:	ret    
 100c06a:	int3   
 100c06b:	int3   
 100c06c:	int3   
 100c06d:	int3   
 100c06e:	int3   
 100c06f:	int3   
 100c070:	mov    QWORD PTR [rsp+0x8],rbx
 100c075:	mov    QWORD PTR [rsp+0x10],rsi
 100c07a:	push   rdi
 100c07b:	sub    rsp,0x20
 100c07f:	cmp    QWORD PTR [rcx+0x1340],0x0
 100c087:	lea    rax,[rip+0xffffffffffff79c2]        # 0x1003a50
 100c08e:	mov    edi,r8d
 100c091:	mov    rsi,rdx
 100c094:	mov    rbx,rcx
 100c097:	mov    QWORD PTR [rcx],rax
 100c09a:	je     0x100c0b9
 100c09c:	mov    rcx,QWORD PTR [rcx+0x10]
 100c0a0:	call   0x10092e0
 100c0a5:	mov    rdx,QWORD PTR [rbx+0x1340]
 100c0ac:	test   rdx,rdx
 100c0af:	je     0x100c0b9
 100c0b1:	mov    rcx,rax
 100c0b4:	call   0x100a310
 100c0b9:	mov    rcx,QWORD PTR [rbx+0x10]
 100c0bd:	test   rcx,rcx
 100c0c0:	je     0x100c0d0
 100c0c2:	mov    rax,QWORD PTR [rcx]
 100c0c5:	call   QWORD PTR [rax+0x10]
 100c0c8:	mov    QWORD PTR [rbx+0x10],0x0
 100c0d0:	lea    rcx,[rbx+0x1388]
 100c0d7:	call   0x100afa0
 100c0dc:	lea    rcx,[rbx+0x1360]
 100c0e3:	call   0x100afa0
 100c0e8:	xor    edx,edx
 100c0ea:	mov    r8d,0x1658
 100c0f0:	mov    rcx,rbx
 100c0f3:	call   0x1006d28
 100c0f8:	mov    r8d,edi
 100c0fb:	mov    rdx,rsi
 100c0fe:	mov    rcx,rbx
 100c101:	mov    rbx,QWORD PTR [rsp+0x30]
 100c106:	mov    rsi,QWORD PTR [rsp+0x38]
 100c10b:	add    rsp,0x20
 100c10f:	pop    rdi
 100c110:	jmp    0x100b6f0
 100c115:	int3   
 100c116:	int3   
 100c117:	int3   
 100c118:	int3   
 100c119:	int3   
 100c11a:	int3   
 100c11b:	int3   
 100c11c:	int3   
 100c11d:	int3   
 100c11e:	int3   
 100c11f:	int3   
 100c120:	mov    QWORD PTR [rsp+0x8],rbx
 100c125:	mov    QWORD PTR [rsp+0x10],rbp
 100c12a:	mov    QWORD PTR [rsp+0x18],rsi
 100c12f:	push   rdi
 100c130:	sub    rsp,0xc0
 100c137:	mov    rdi,rdx
 100c13a:	mov    rdx,QWORD PTR [rdx]
 100c13d:	mov    rsi,rcx
 100c140:	mov    rbp,r8
 100c143:	lea    rcx,[rsp+0x20]
 100c148:	mov    r8d,0x98
 100c14e:	call   0x100c2b4
 100c153:	mov    r11,QWORD PTR [rsi+0x13c8]
 100c15a:	mov    rbx,QWORD PTR [rsi]
 100c15d:	mov    QWORD PTR [rsp+0x30],r11
 100c162:	call   QWORD PTR [rip+0xffffffffffff4f88]        # 0x10010f0
 100c168:	mov    r9,QWORD PTR [rdi+0x8]
 100c16c:	lea    r8,[rsp+0x20]
 100c171:	mov    edx,eax
 100c173:	mov    rcx,rsi
 100c176:	call   QWORD PTR [rbx+0x40]
 100c179:	mov    rcx,rsi
 100c17c:	mov    DWORD PTR [rbp+0x0],eax
 100c17f:	call   0x100bbf0
 100c184:	lea    r11,[rsp+0xc0]
 100c18c:	mov    rbx,QWORD PTR [r11+0x10]
 100c190:	mov    rsi,QWORD PTR [r11+0x20]
 100c194:	mov    DWORD PTR [rbp+0x0],eax
 100c197:	mov    rbp,QWORD PTR [r11+0x18]
 100c19b:	mov    eax,0x1
 100c1a0:	mov    rsp,r11
 100c1a3:	pop    rdi
 100c1a4:	ret    
 100c1a5:	int3   
 100c1a6:	int3   
 100c1a7:	int3   
 100c1a8:	int3   
 100c1a9:	int3   
 100c1aa:	int3   
 100c1ab:	int3   
 100c1ac:	int3   
 100c1ad:	int3   
 100c1ae:	int3   
 100c1af:	int3   
 100c1b0:	mov    QWORD PTR [rsp+0x8],rcx
 100c1b5:	push   rbx
 100c1b6:	sub    rsp,0x30
 100c1ba:	mov    ebx,0x80004005
 100c1bf:	mov    DWORD PTR [rsp+0x20],ebx
 100c1c3:	mov    rax,QWORD PTR [rsp+0x38]
 100c1c8:	cmp    QWORD PTR [rcx+0x30],0x0
 100c1cd:	je     0x100c1d8
 100c1cf:	call   0x100bbf0
 100c1d4:	mov    ebx,eax
 100c1d6:	jmp    0x100c202
 100c1d8:	cmp    QWORD PTR [rcx+0x13c8],0x0
 100c1e0:	jne    0x100c1e9
 100c1e2:	mov    QWORD PTR [rcx+0x13c8],rax
 100c1e9:	xor    r9d,r9d
 100c1ec:	xor    r8d,r8d
 100c1ef:	xor    edx,edx
 100c1f1:	mov    ecx,0x42ac
 100c1f6:	call   QWORD PTR [rip+0xffffffffffff50cc]        # 0x10012c8
 100c1fc:	jmp    0x100c202
 100c1fe:	mov    ebx,DWORD PTR [rsp+0x20]
 100c202:	mov    eax,ebx
 100c204:	add    rsp,0x30
 100c208:	pop    rbx
 100c209:	ret    
 100c20a:	int3   
 100c20b:	int3   
 100c20c:	int3   
 100c20d:	int3   
 100c20e:	int3   
 100c20f:	int3   
 100c210:	rex push rbp
 100c212:	sub    rsp,0x20
 100c216:	mov    rbp,rdx
 100c219:	mov    rdx,rcx
 100c21c:	lea    r8,[rbp+0x20]
 100c220:	mov    rcx,QWORD PTR [rbp+0x40]
 100c224:	call   0x100c120
 100c229:	add    rsp,0x20
 100c22d:	pop    rbp
 100c22e:	ret    
 100c22f:	int3   
 100c230:	int3   
 100c231:	int3   
 100c232:	int3   
 100c233:	int3   
 100c234:	int3   
 100c235:	int3   
 100c236:	jmp    QWORD PTR [rip+0xffffffffffff5034]        # 0x1001270
 100c23c:	int3   
 100c23d:	int3   
 100c23e:	int3   
 100c23f:	int3   
 100c240:	int3   
 100c241:	int3   
 100c242:	jmp    QWORD PTR [rip+0xffffffffffff5020]        # 0x1001268
 100c248:	int3   
 100c249:	int3   
 100c24a:	int3   
 100c24b:	int3   
 100c24c:	int3   
 100c24d:	int3   
 100c24e:	int3   
 100c24f:	int3   
 100c250:	int3   
 100c251:	int3   
 100c252:	int3   
 100c253:	int3   
 100c254:	int3   
 100c255:	int3   
 100c256:	data16 nop WORD PTR [rax+rax*1+0x0]
 100c260:	sub    rsp,0x10
 100c264:	mov    QWORD PTR [rsp],r10
 100c268:	mov    QWORD PTR [rsp+0x8],r11
 100c26d:	xor    r11,r11
 100c270:	lea    r10,[rsp+0x18]
 100c275:	sub    r10,rax
 100c278:	cmovb  r10,r11
 100c27c:	mov    r11,QWORD PTR gs:0x10
 100c285:	cmp    r10,r11
 100c288:	jae    0x100c2a0
 100c28a:	and    r10w,0xf000
 100c290:	lea    r11,[r11-0x1000]
 100c297:	mov    BYTE PTR [r11],0x0
 100c29b:	cmp    r10,r11
 100c29e:	jne    0x100c290
 100c2a0:	mov    r10,QWORD PTR [rsp]
 100c2a4:	mov    r11,QWORD PTR [rsp+0x8]
 100c2a9:	add    rsp,0x10
 100c2ad:	ret    
 100c2ae:	int3   
 100c2af:	int3   
 100c2b0:	int3   
 100c2b1:	int3   
 100c2b2:	int3   
 100c2b3:	int3   
 100c2b4:	jmp    QWORD PTR [rip+0xffffffffffff5086]        # 0x1001340
 100c2ba:	int3   
 100c2bb:	int3   
 100c2bc:	int3   
 100c2bd:	int3   
 100c2be:	int3   
 100c2bf:	int3   
 100c2c0:	rex push rbp
 100c2c2:	mov    rbp,rsp
 100c2c5:	sub    rsp,0x30
 100c2c9:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100c2d2:	mov    QWORD PTR [rsp+0x40],rbx
 100c2d7:	xor    edx,edx
 100c2d9:	lea    rcx,[rsp+0x48]
 100c2de:	call   QWORD PTR [rip+0xffffffffffff501c]        # 0x1001300
 100c2e4:	nop
 100c2e5:	jmp    0x100c316
 100c2e7:	mov    rax,QWORD PTR [rbx]
 100c2ea:	mov    QWORD PTR [rip+0x587f],rax        # 0x1011b70
 100c2f1:	mov    rcx,QWORD PTR [rbx+0x8]
 100c2f5:	call   QWORD PTR [rip+0xffffffffffff4ff5]        # 0x10012f0
 100c2fb:	test   rax,rax
 100c2fe:	je     0x100c30e
 100c300:	mov    r8,QWORD PTR [rax]
 100c303:	mov    edx,0x1
 100c308:	mov    rcx,rax
 100c30b:	call   QWORD PTR [r8]
 100c30e:	mov    rcx,rbx
 100c311:	call   0x10068bc
 100c316:	mov    rbx,QWORD PTR [rip+0x5853]        # 0x1011b70
 100c31d:	test   rbx,rbx
 100c320:	jne    0x100c2e7
 100c322:	lea    rcx,[rsp+0x48]
 100c327:	call   QWORD PTR [rip+0xffffffffffff4fcb]        # 0x10012f8
 100c32d:	mov    rbx,QWORD PTR [rsp+0x40]
 100c332:	add    rsp,0x30
 100c336:	pop    rbp
 100c337:	ret    
 100c338:	int3   
 100c339:	int3   
 100c33a:	int3   
 100c33b:	int3   
 100c33c:	int3   
 100c33d:	int3   
 100c33e:	jmp    QWORD PTR [rip+0xffffffffffff515c]        # 0x10014a0
 100c344:	int3   
 100c345:	int3   
 100c346:	int3   
 100c347:	int3   
 100c348:	int3   
 100c349:	int3   
 100c34a:	jmp    QWORD PTR [rip+0xffffffffffff5148]        # 0x1001498
 100c350:	int3   
 100c351:	int3   
 100c352:	int3   
 100c353:	int3   
 100c354:	int3   
 100c355:	int3   
 100c356:	jmp    QWORD PTR [rip+0xffffffffffff518c]        # 0x10014e8
 100c35c:	int3   
 100c35d:	int3   
 100c35e:	int3   
 100c35f:	int3   
 100c360:	int3   
 100c361:	int3   
 100c362:	jmp    QWORD PTR [rip+0xffffffffffff5178]        # 0x10014e0
 100c368:	int3   
 100c369:	int3   
 100c36a:	int3   
 100c36b:	int3   
 100c36c:	int3   
 100c36d:	int3   
 100c36e:	int3   
 100c36f:	int3   
 100c370:	mov    QWORD PTR [rsp+0x8],rbx
 100c375:	push   rdi
 100c376:	sub    rsp,0x20
 100c37a:	mov    rdi,rcx
 100c37d:	lea    rcx,[rip+0x57fc]        # 0x1011b80
 100c384:	call   0x100a530
 100c389:	test   eax,eax
 100c38b:	jne    0x100c3d2
 100c38d:	lea    rcx,[rip+0x57ec]        # 0x1011b80
 100c394:	call   0x100a790
 100c399:	test   eax,eax
 100c39b:	je     0x100c3d2
 100c39d:	lea    rcx,[rip+0x57ec]        # 0x1011b90
 100c3a4:	xor    edx,edx
 100c3a6:	mov    r8d,0x1b60
 100c3ac:	call   0x1006d28
 100c3b1:	lea    rcx,[rip+0x57d8]        # 0x1011b90
 100c3b8:	call   0x1009cf0
 100c3bd:	lea    rcx,[rip+0x57bc]        # 0x1011b80
 100c3c4:	xor    edx,edx
 100c3c6:	mov    QWORD PTR [rip+0x57bb],rax        # 0x1011b88
 100c3cd:	call   0x100a7f0
 100c3d2:	lea    rcx,[rip+0x57a7]        # 0x1011b80
 100c3d9:	call   0x100a550
 100c3de:	test   eax,eax
 100c3e0:	mov    ebx,eax
 100c3e2:	js     0x100c401
 100c3e4:	mov    rcx,QWORD PTR [rip+0x579d]        # 0x1011b88
 100c3eb:	mov    QWORD PTR [rdi],rcx
 100c3ee:	mov    rdx,QWORD PTR [rcx]
 100c3f1:	call   QWORD PTR [rdx+0x8]
 100c3f4:	mov    eax,ebx
 100c3f6:	mov    rbx,QWORD PTR [rsp+0x30]
 100c3fb:	add    rsp,0x20
 100c3ff:	pop    rdi
 100c400:	ret    
 100c401:	mov    QWORD PTR [rdi],0x0
 100c408:	mov    rbx,QWORD PTR [rsp+0x30]
 100c40d:	add    rsp,0x20
 100c411:	pop    rdi
 100c412:	ret    
 100c413:	int3   
 100c414:	int3   
 100c415:	int3   
 100c416:	int3   
 100c417:	int3   
 100c418:	int3   
 100c419:	int3   
 100c41a:	int3   
 100c41b:	int3   
 100c41c:	int3   
 100c41d:	int3   
 100c41e:	int3   
 100c41f:	int3   
 100c420:	mov    QWORD PTR [rsp+0x10],rsi
 100c425:	push   rdi
 100c426:	sub    rsp,0x20
 100c42a:	mov    rsi,rcx
 100c42d:	lea    rcx,[rip+0x574c]        # 0x1011b80
 100c434:	call   0x100a530
 100c439:	test   eax,eax
 100c43b:	jne    0x100c482
 100c43d:	lea    rcx,[rip+0x573c]        # 0x1011b80
 100c444:	call   0x100a790
 100c449:	test   eax,eax
 100c44b:	je     0x100c482
 100c44d:	lea    rcx,[rip+0x573c]        # 0x1011b90
 100c454:	xor    edx,edx
 100c456:	mov    r8d,0x1b60
 100c45c:	call   0x1006d28
 100c461:	lea    rcx,[rip+0x5728]        # 0x1011b90
 100c468:	call   0x1009cf0
 100c46d:	lea    rcx,[rip+0x570c]        # 0x1011b80
 100c474:	xor    edx,edx
 100c476:	mov    QWORD PTR [rip+0x570b],rax        # 0x1011b88
 100c47d:	call   0x100a7f0
 100c482:	lea    rcx,[rip+0x56f7]        # 0x1011b80
 100c489:	mov    QWORD PTR [rsp+0x30],rbx
 100c48e:	call   0x100a550
 100c493:	test   eax,eax
 100c495:	mov    edi,eax
 100c497:	js     0x100c4ab
 100c499:	mov    rbx,QWORD PTR [rip+0x56e8]        # 0x1011b88
 100c4a0:	mov    rcx,rbx
 100c4a3:	mov    rax,QWORD PTR [rbx]
 100c4a6:	call   QWORD PTR [rax+0x8]
 100c4a9:	jmp    0x100c4ad
 100c4ab:	xor    ebx,ebx
 100c4ad:	test   edi,edi
 100c4af:	jne    0x100c4c7
 100c4b1:	mov    rdx,rsi
 100c4b4:	mov    rcx,rbx
 100c4b7:	call   0x1009440
 100c4bc:	mov    rdx,QWORD PTR [rbx]
 100c4bf:	mov    rcx,rbx
 100c4c2:	mov    edi,eax
 100c4c4:	call   QWORD PTR [rdx+0x10]
 100c4c7:	xor    edx,edx
 100c4c9:	mov    r8d,0x8000
 100c4cf:	mov    rcx,rsi
 100c4d2:	call   QWORD PTR [rip+0xffffffffffff4e08]        # 0x10012e0
 100c4d8:	mov    rbx,QWORD PTR [rsp+0x30]
 100c4dd:	mov    rsi,QWORD PTR [rsp+0x38]
 100c4e2:	mov    eax,edi
 100c4e4:	add    rsp,0x20
 100c4e8:	pop    rdi
 100c4e9:	ret    
 100c4ea:	int3   
 100c4eb:	int3   
 100c4ec:	int3   
 100c4ed:	int3   
 100c4ee:	int3   
 100c4ef:	int3   
 100c4f0:	int3   
 100c4f1:	int3   
 100c4f2:	int3   
 100c4f3:	int3   
 100c4f4:	int3   
 100c4f5:	int3   
 100c4f6:	int3   
 100c4f7:	int3   
 100c4f8:	int3   
 100c4f9:	int3   
 100c4fa:	int3   
 100c4fb:	int3   
 100c4fc:	int3   
 100c4fd:	int3   
 100c4fe:	int3   
 100c4ff:	int3   
 100c500:	mov    rcx,QWORD PTR [rdx+0x40]
 100c507:	jmp    0x1003f30
 100c50c:	int3   
 100c50d:	int3   
 100c50e:	int3   
 100c50f:	int3   
 100c510:	int3   
 100c511:	int3   
 100c512:	int3   
 100c513:	int3   
 100c514:	int3   
 100c515:	int3   
 100c516:	int3   
 100c517:	int3   
 100c518:	int3   
 100c519:	int3   
 100c51a:	int3   
 100c51b:	int3   
 100c51c:	int3   
 100c51d:	int3   
 100c51e:	int3   
 100c51f:	int3   
 100c520:	mov    rcx,QWORD PTR [rdx+0x48]
 100c527:	jmp    0x1003f30
 100c52c:	int3   
 100c52d:	int3   
 100c52e:	int3   
 100c52f:	int3   
 100c530:	mov    rcx,QWORD PTR [rdx+0x40]
 100c537:	add    rcx,0x8
 100c53b:	jmp    0x1004530
 100c540:	mov    rcx,QWORD PTR [rdx+0x48]
 100c547:	jmp    0x1003f30
 100c54c:	int3   
 100c54d:	int3   
 100c54e:	int3   
 100c54f:	int3   
 100c550:	mov    rcx,QWORD PTR [rdx+0x40]
 100c557:	add    rcx,0x20
 100c55b:	jmp    0x1004530
 100c560:	int3   
 100c561:	int3   
 100c562:	int3   
 100c563:	int3   
 100c564:	int3   
 100c565:	int3   
 100c566:	int3   
 100c567:	int3   
 100c568:	int3   
 100c569:	int3   
 100c56a:	int3   
 100c56b:	int3   
 100c56c:	int3   
 100c56d:	int3   
 100c56e:	int3   
 100c56f:	int3   
 100c570:	mov    rcx,QWORD PTR [rdx+0x40]
 100c577:	jmp    0x1003f30
 100c57c:	int3   
 100c57d:	int3   
 100c57e:	int3   
 100c57f:	int3   
 100c580:	int3   
 100c581:	int3   
 100c582:	int3   
 100c583:	int3   
 100c584:	int3   
 100c585:	int3   
 100c586:	int3   
 100c587:	int3   
 100c588:	int3   
 100c589:	int3   
 100c58a:	int3   
 100c58b:	int3   
 100c58c:	int3   
 100c58d:	int3   
 100c58e:	int3   
 100c58f:	int3   
 100c590:	mov    rcx,QWORD PTR [rdx+0x40]
 100c597:	add    rcx,0x8
 100c59b:	jmp    0x1004530
 100c5a0:	mov    rcx,QWORD PTR [rdx+0x40]
 100c5a7:	add    rcx,0x20
 100c5ab:	jmp    0x1004530
 100c5b0:	mov    rcx,QWORD PTR [rdx+0x48]
 100c5b7:	jmp    0x1003f30
 100c5bc:	int3   
 100c5bd:	int3   
 100c5be:	int3   
 100c5bf:	int3   
 100c5c0:	mov    rcx,QWORD PTR [rdx+0x40]
 100c5c7:	jmp    0x1003f30
 100c5cc:	int3   
 100c5cd:	int3   
 100c5ce:	int3   
 100c5cf:	int3   
 100c5d0:	int3   
 100c5d1:	int3   
 100c5d2:	int3   
 100c5d3:	int3   
 100c5d4:	int3   
 100c5d5:	int3   
 100c5d6:	int3   
 100c5d7:	int3   
 100c5d8:	int3   
 100c5d9:	int3   
 100c5da:	int3   
 100c5db:	int3   
 100c5dc:	int3   
 100c5dd:	int3   
 100c5de:	int3   
 100c5df:	int3   
 100c5e0:	mov    rcx,QWORD PTR [rdx+0x50]
 100c5e7:	jmp    0x1003f30
 100c5ec:	int3   
 100c5ed:	int3   
 100c5ee:	int3   
 100c5ef:	int3   
 100c5f0:	rex push rbp
 100c5f2:	sub    rsp,0x20
 100c5f6:	mov    rbp,rdx
 100c5f9:	mov    eax,DWORD PTR [rbp+0x30]
 100c5fc:	and    eax,0x1
 100c5ff:	test   eax,eax
 100c601:	je     0x100c610
 100c603:	and    DWORD PTR [rbp+0x30],0xfffffffe
 100c607:	mov    rcx,QWORD PTR [rbp+0x50]
 100c60b:	call   0x1004530
 100c610:	add    rsp,0x20
 100c614:	pop    rbp
 100c615:	ret    
 100c616:	int3   
 100c617:	int3   
 100c618:	int3   
 100c619:	int3   
 100c61a:	int3   
 100c61b:	int3   
 100c61c:	int3   
 100c61d:	int3   
 100c61e:	int3   
 100c61f:	int3   
 100c620:	lea    rcx,[rip+0x4c49]        # 0x1011270
 100c627:	jmp    0x1003f30
 100c62c:	int3   
 100c62d:	int3   
 100c62e:	int3   
 100c62f:	int3   
 100c630:	lea    rcx,[rip+0x4c39]        # 0x1011270
 100c637:	jmp    0x1004530
 100c63c:	int3   
 100c63d:	int3   
 100c63e:	int3   
 100c63f:	int3   
 100c640:	lea    rcx,[rip+0x4c31]        # 0x1011278
 100c647:	jmp    0x1003f30
 100c64c:	int3   
 100c64d:	int3   
 100c64e:	int3   
 100c64f:	int3   
 100c650:	lea    rcx,[rip+0x4c21]        # 0x1011278
 100c657:	jmp    0x1004530
 100c65c:	int3   
 100c65d:	int3   
 100c65e:	int3   
 100c65f:	int3   
 100c660:	lea    rcx,[rip+0x4c19]        # 0x1011280
 100c667:	jmp    0x1003f30
 100c66c:	int3   
 100c66d:	int3   
 100c66e:	int3   
 100c66f:	int3   
 100c670:	lea    rcx,[rip+0x4c09]        # 0x1011280
 100c677:	jmp    0x1004530
 100c67c:	int3   
 100c67d:	int3   
 100c67e:	int3   
 100c67f:	int3   
 100c680:	lea    rcx,[rip+0x4c01]        # 0x1011288
 100c687:	jmp    0x1003f30
 100c68c:	int3   
 100c68d:	int3   
 100c68e:	int3   
 100c68f:	int3   
 100c690:	lea    rcx,[rip+0x4bf1]        # 0x1011288
 100c697:	jmp    0x1004530
 100c69c:	int3   
 100c69d:	int3   
 100c69e:	int3   
 100c69f:	int3   
 100c6a0:	lea    rcx,[rip+0x4be9]        # 0x1011290
 100c6a7:	jmp    0x1003f30
 100c6ac:	int3   
 100c6ad:	int3   
 100c6ae:	int3   
 100c6af:	int3   
 100c6b0:	int3   
 100c6b1:	int3   
 100c6b2:	int3   
 100c6b3:	int3   
 100c6b4:	int3   
 100c6b5:	int3   
 100c6b6:	int3   
 100c6b7:	int3   
 100c6b8:	int3   
 100c6b9:	int3   
 100c6ba:	int3   
 100c6bb:	int3   
 100c6bc:	int3   
 100c6bd:	int3   
 100c6be:	int3   
 100c6bf:	int3   
 100c6c0:	lea    rcx,[rip+0x4be1]        # 0x10112a8
 100c6c7:	jmp    0x1003f30
 100c6cc:	int3   
 100c6cd:	int3   
 100c6ce:	int3   
 100c6cf:	int3   
 100c6d0:	int3   
 100c6d1:	int3   
 100c6d2:	int3   
 100c6d3:	int3   
 100c6d4:	int3   
 100c6d5:	int3   
 100c6d6:	int3   
 100c6d7:	int3   
 100c6d8:	int3   
 100c6d9:	int3   
 100c6da:	int3   
 100c6db:	int3   
 100c6dc:	int3   
 100c6dd:	int3   
 100c6de:	int3   
 100c6df:	int3   
 100c6e0:	lea    rcx,[rip+0x4bd9]        # 0x10112c0
 100c6e7:	jmp    0x1003f30
 100c6ec:	int3   
 100c6ed:	int3   
 100c6ee:	int3   
 100c6ef:	int3   
 100c6f0:	int3   
 100c6f1:	int3   
 100c6f2:	int3   
 100c6f3:	int3   
 100c6f4:	int3   
 100c6f5:	int3   
 100c6f6:	int3   
 100c6f7:	int3   
 100c6f8:	int3   
 100c6f9:	int3   
 100c6fa:	int3   
 100c6fb:	int3   
 100c6fc:	int3   
 100c6fd:	int3   
 100c6fe:	int3   
 100c6ff:	int3   
 100c700:	lea    rcx,[rip+0x4bc1]        # 0x10112c8
 100c707:	jmp    0x1003f30
 100c70c:	int3   
 100c70d:	int3   
 100c70e:	int3   
 100c70f:	int3   
 100c710:	int3   
 100c711:	int3   
 100c712:	int3   
 100c713:	int3   
 100c714:	int3   
 100c715:	int3   
 100c716:	int3   
 100c717:	int3   
 100c718:	int3   
 100c719:	int3   
 100c71a:	int3   
 100c71b:	int3   
 100c71c:	int3   
 100c71d:	int3   
 100c71e:	int3   
 100c71f:	int3   
 100c720:	lea    rcx,[rip+0x4b79]        # 0x10112a0
 100c727:	jmp    0x1003f30
 100c72c:	int3   
 100c72d:	int3   
 100c72e:	int3   
 100c72f:	int3   
 100c730:	int3   
 100c731:	int3   
 100c732:	int3   
 100c733:	int3   
 100c734:	int3   
 100c735:	int3   
 100c736:	int3   
 100c737:	int3   
 100c738:	int3   
 100c739:	int3   
 100c73a:	int3   
 100c73b:	int3   
 100c73c:	int3   
 100c73d:	int3   
 100c73e:	int3   
 100c73f:	int3   
 100c740:	lea    rcx,[rip+0x4b69]        # 0x10112b0
 100c747:	jmp    0x1003f30
 100c74c:	int3   
 100c74d:	int3   
 100c74e:	int3   
 100c74f:	int3   
 100c750:	int3   
 100c751:	int3   
 100c752:	int3   
 100c753:	int3   
 100c754:	int3   
 100c755:	int3   
 100c756:	int3   
 100c757:	int3   
 100c758:	int3   
 100c759:	int3   
 100c75a:	int3   
 100c75b:	int3   
 100c75c:	int3   
 100c75d:	int3   
 100c75e:	int3   
 100c75f:	int3   
 100c760:	lea    rcx,[rip+0x4b51]        # 0x10112b8
 100c767:	jmp    0x1003f30
 100c76c:	int3   
 100c76d:	int3   
 100c76e:	int3   
 100c76f:	int3   
 100c770:	int3   
 100c771:	int3   
 100c772:	int3   
 100c773:	int3   
 100c774:	int3   
 100c775:	int3   
 100c776:	int3   
 100c777:	int3   
 100c778:	int3   
 100c779:	int3   
 100c77a:	int3   
 100c77b:	int3   
 100c77c:	int3   
 100c77d:	int3   
 100c77e:	int3   
 100c77f:	int3   
 100c780:	lea    rcx,[rip+0x4b11]        # 0x1011298
 100c787:	jmp    0x1003f30
 100c78c:	int3   
 100c78d:	int3   
 100c78e:	int3   
 100c78f:	int3   
 100c790:	int3   
 100c791:	int3   
 100c792:	int3   
 100c793:	int3   
 100c794:	int3   
 100c795:	int3   
 100c796:	int3   
 100c797:	int3   
 100c798:	int3   
 100c799:	int3   
 100c79a:	int3   
 100c79b:	int3   
 100c79c:	int3   
 100c79d:	int3   
 100c79e:	int3   
 100c79f:	int3   
 100c7a0:	lea    rcx,[rip+0x4aa9]        # 0x1011250
 100c7a7:	jmp    0x1003f30
 100c7ac:	int3   
 100c7ad:	int3   
 100c7ae:	int3   
 100c7af:	int3   
 100c7b0:	lea    rcx,[rip+0x4a99]        # 0x1011250
 100c7b7:	jmp    0x1004530
 100c7bc:	int3   
 100c7bd:	int3   
 100c7be:	int3   
 100c7bf:	int3   
 100c7c0:	lea    rcx,[rip+0x4a91]        # 0x1011258
 100c7c7:	jmp    0x1003f30
 100c7cc:	int3   
 100c7cd:	int3   
 100c7ce:	int3   
 100c7cf:	int3   
 100c7d0:	lea    rcx,[rip+0x4a81]        # 0x1011258
 100c7d7:	jmp    0x1004530
 100c7dc:	int3   
 100c7dd:	int3   
 100c7de:	int3   
 100c7df:	int3   
 100c7e0:	lea    rcx,[rip+0x4a79]        # 0x1011260
 100c7e7:	jmp    0x1003f30
 100c7ec:	int3   
 100c7ed:	int3   
 100c7ee:	int3   
 100c7ef:	int3   
 100c7f0:	lea    rcx,[rip+0x4a69]        # 0x1011260
 100c7f7:	jmp    0x1004530
 100c7fc:	int3   
 100c7fd:	int3   
 100c7fe:	int3   
 100c7ff:	int3   
 100c800:	lea    rcx,[rip+0x4a61]        # 0x1011268
 100c807:	jmp    0x1003f30
 100c80c:	int3   
 100c80d:	int3   
 100c80e:	int3   
 100c80f:	int3   
 100c810:	int3   
 100c811:	int3   
 100c812:	int3   
 100c813:	int3   
 100c814:	int3   
 100c815:	int3   
 100c816:	int3   
 100c817:	int3   
 100c818:	int3   
 100c819:	int3   
 100c81a:	int3   
 100c81b:	int3   
 100c81c:	int3   
 100c81d:	int3   
 100c81e:	int3   
 100c81f:	int3   
 100c820:	lea    rcx,[rip+0x49b9]        # 0x10111e0
 100c827:	jmp    0x1003f30
 100c82c:	int3   
 100c82d:	int3   
 100c82e:	int3   
 100c82f:	int3   
 100c830:	lea    rcx,[rip+0x49a9]        # 0x10111e0
 100c837:	jmp    0x1004530
 100c83c:	int3   
 100c83d:	int3   
 100c83e:	int3   
 100c83f:	int3   
 100c840:	lea    rcx,[rip+0x49a1]        # 0x10111e8
 100c847:	jmp    0x1003f30
 100c84c:	int3   
 100c84d:	int3   
 100c84e:	int3   
 100c84f:	int3   
 100c850:	lea    rcx,[rip+0x4991]        # 0x10111e8
 100c857:	jmp    0x1004530
 100c85c:	int3   
 100c85d:	int3   
 100c85e:	int3   
 100c85f:	int3   
 100c860:	lea    rcx,[rip+0x4989]        # 0x10111f0
 100c867:	jmp    0x1003f30
 100c86c:	int3   
 100c86d:	int3   
 100c86e:	int3   
 100c86f:	int3   
 100c870:	lea    rcx,[rip+0x4979]        # 0x10111f0
 100c877:	jmp    0x1004530
 100c87c:	int3   
 100c87d:	int3   
 100c87e:	int3   
 100c87f:	int3   
 100c880:	lea    rcx,[rip+0x4971]        # 0x10111f8
 100c887:	jmp    0x1003f30
 100c88c:	int3   
 100c88d:	int3   
 100c88e:	int3   
 100c88f:	int3   
 100c890:	lea    rcx,[rip+0x4961]        # 0x10111f8
 100c897:	jmp    0x1004530
 100c89c:	int3   
 100c89d:	int3   
 100c89e:	int3   
 100c89f:	int3   
 100c8a0:	lea    rcx,[rip+0x4959]        # 0x1011200
 100c8a7:	jmp    0x1003f30
 100c8ac:	int3   
 100c8ad:	int3   
 100c8ae:	int3   
 100c8af:	int3   
 100c8b0:	lea    rcx,[rip+0x4949]        # 0x1011200
 100c8b7:	jmp    0x1004530
 100c8bc:	int3   
 100c8bd:	int3   
 100c8be:	int3   
 100c8bf:	int3   
 100c8c0:	lea    rcx,[rip+0x4941]        # 0x1011208
 100c8c7:	jmp    0x1003f30
 100c8cc:	int3   
 100c8cd:	int3   
 100c8ce:	int3   
 100c8cf:	int3   
 100c8d0:	lea    rcx,[rip+0x4931]        # 0x1011208
 100c8d7:	jmp    0x1004530
 100c8dc:	int3   
 100c8dd:	int3   
 100c8de:	int3   
 100c8df:	int3   
 100c8e0:	lea    rcx,[rip+0x4929]        # 0x1011210
 100c8e7:	jmp    0x1003f30
 100c8ec:	int3   
 100c8ed:	int3   
 100c8ee:	int3   
 100c8ef:	int3   
 100c8f0:	lea    rcx,[rip+0x4919]        # 0x1011210
 100c8f7:	jmp    0x1004530
 100c8fc:	int3   
 100c8fd:	int3   
 100c8fe:	int3   
 100c8ff:	int3   
 100c900:	lea    rcx,[rip+0x4911]        # 0x1011218
 100c907:	jmp    0x1003f30
 100c90c:	int3   
 100c90d:	int3   
 100c90e:	int3   
 100c90f:	int3   
 100c910:	lea    rcx,[rip+0x4901]        # 0x1011218
 100c917:	jmp    0x1004530
 100c91c:	int3   
 100c91d:	int3   
 100c91e:	int3   
 100c91f:	int3   
 100c920:	lea    rcx,[rip+0x48f9]        # 0x1011220
 100c927:	jmp    0x1003f30
 100c92c:	int3   
 100c92d:	int3   
 100c92e:	int3   
 100c92f:	int3   
 100c930:	lea    rcx,[rip+0x48e9]        # 0x1011220
 100c937:	jmp    0x1004530
 100c93c:	int3   
 100c93d:	int3   
 100c93e:	int3   
 100c93f:	int3   
 100c940:	lea    rcx,[rip+0x48e1]        # 0x1011228
 100c947:	jmp    0x1003f30
 100c94c:	int3   
 100c94d:	int3   
 100c94e:	int3   
 100c94f:	int3   
 100c950:	lea    rcx,[rip+0x48d1]        # 0x1011228
 100c957:	jmp    0x1004530
 100c95c:	int3   
 100c95d:	int3   
 100c95e:	int3   
 100c95f:	int3   
 100c960:	lea    rcx,[rip+0x48c9]        # 0x1011230
 100c967:	jmp    0x1003f30
 100c96c:	int3   
 100c96d:	int3   
 100c96e:	int3   
 100c96f:	int3   
 100c970:	lea    rcx,[rip+0x48b9]        # 0x1011230
 100c977:	jmp    0x1004530
 100c97c:	int3   
 100c97d:	int3   
 100c97e:	int3   
 100c97f:	int3   
 100c980:	lea    rcx,[rip+0x48b1]        # 0x1011238
 100c987:	jmp    0x1003f30
 100c98c:	int3   
 100c98d:	int3   
 100c98e:	int3   
 100c98f:	int3   
 100c990:	lea    rcx,[rip+0x48a1]        # 0x1011238
 100c997:	jmp    0x1004530
 100c99c:	int3   
 100c99d:	int3   
 100c99e:	int3   
 100c99f:	int3   
 100c9a0:	lea    rcx,[rip+0x4899]        # 0x1011240
 100c9a7:	jmp    0x1003f30
 100c9ac:	int3   
 100c9ad:	int3   
 100c9ae:	int3   
 100c9af:	int3   
 100c9b0:	int3   
 100c9b1:	int3   
 100c9b2:	int3   
 100c9b3:	int3   
 100c9b4:	int3   
 100c9b5:	int3   
 100c9b6:	int3   
 100c9b7:	int3   
 100c9b8:	int3   
 100c9b9:	int3   
 100c9ba:	int3   
 100c9bb:	int3   
 100c9bc:	int3   
 100c9bd:	int3   
 100c9be:	int3   
 100c9bf:	int3   
 100c9c0:	lea    rcx,[rip+0x48e1]        # 0x10112a8
 100c9c7:	jmp    0x1003f30
 100c9cc:	int3   
 100c9cd:	int3   
 100c9ce:	int3   
 100c9cf:	int3   
 100c9d0:	int3   
 100c9d1:	int3   
 100c9d2:	int3   
 100c9d3:	int3   
 100c9d4:	int3   
 100c9d5:	int3   
 100c9d6:	int3   
 100c9d7:	int3   
 100c9d8:	int3   
 100c9d9:	int3   
 100c9da:	int3   
 100c9db:	int3   
 100c9dc:	int3   
 100c9dd:	int3   
 100c9de:	int3   
 100c9df:	int3   
 100c9e0:	lea    rcx,[rip+0x48d9]        # 0x10112c0
 100c9e7:	jmp    0x1003f30
 100c9ec:	int3   
 100c9ed:	int3   
 100c9ee:	int3   
 100c9ef:	int3   
 100c9f0:	int3   
 100c9f1:	int3   
 100c9f2:	int3   
 100c9f3:	int3   
 100c9f4:	int3   
 100c9f5:	int3   
 100c9f6:	int3   
 100c9f7:	int3   
 100c9f8:	int3   
 100c9f9:	int3   
 100c9fa:	int3   
 100c9fb:	int3   
 100c9fc:	int3   
 100c9fd:	int3   
 100c9fe:	int3   
 100c9ff:	int3   
 100ca00:	lea    rcx,[rip+0x48c1]        # 0x10112c8
 100ca07:	jmp    0x1003f30
 100ca0c:	int3   
 100ca0d:	int3   
 100ca0e:	int3   
 100ca0f:	int3   
 100ca10:	int3   
 100ca11:	int3   
 100ca12:	int3   
 100ca13:	int3   
 100ca14:	int3   
 100ca15:	int3   
 100ca16:	int3   
 100ca17:	int3   
 100ca18:	int3   
 100ca19:	int3   
 100ca1a:	int3   
 100ca1b:	int3   
 100ca1c:	int3   
 100ca1d:	int3   
 100ca1e:	int3   
 100ca1f:	int3   
 100ca20:	lea    rcx,[rip+0x4879]        # 0x10112a0
 100ca27:	jmp    0x1003f30
 100ca2c:	int3   
 100ca2d:	int3   
 100ca2e:	int3   
 100ca2f:	int3   
 100ca30:	int3   
 100ca31:	int3   
 100ca32:	int3   
 100ca33:	int3   
 100ca34:	int3   
 100ca35:	int3   
 100ca36:	int3   
 100ca37:	int3   
 100ca38:	int3   
 100ca39:	int3   
 100ca3a:	int3   
 100ca3b:	int3   
 100ca3c:	int3   
 100ca3d:	int3   
 100ca3e:	int3   
 100ca3f:	int3   
 100ca40:	lea    rcx,[rip+0x4869]        # 0x10112b0
 100ca47:	jmp    0x1003f30
 100ca4c:	int3   
 100ca4d:	int3   
 100ca4e:	int3   
 100ca4f:	int3   
 100ca50:	int3   
 100ca51:	int3   
 100ca52:	int3   
 100ca53:	int3   
 100ca54:	int3   
 100ca55:	int3   
 100ca56:	int3   
 100ca57:	int3   
 100ca58:	int3   
 100ca59:	int3   
 100ca5a:	int3   
 100ca5b:	int3   
 100ca5c:	int3   
 100ca5d:	int3   
 100ca5e:	int3   
 100ca5f:	int3   
 100ca60:	lea    rcx,[rip+0x4851]        # 0x10112b8
 100ca67:	jmp    0x1003f30
 100ca6c:	int3   
 100ca6d:	int3   
 100ca6e:	int3   
 100ca6f:	int3   
 100ca70:	int3   
 100ca71:	int3   
 100ca72:	int3   
 100ca73:	int3   
 100ca74:	int3   
 100ca75:	int3   
 100ca76:	int3   
 100ca77:	int3   
 100ca78:	int3   
 100ca79:	int3   
 100ca7a:	int3   
 100ca7b:	int3   
 100ca7c:	int3   
 100ca7d:	int3   
 100ca7e:	int3   
 100ca7f:	int3   
 100ca80:	lea    rcx,[rip+0x4811]        # 0x1011298
 100ca87:	jmp    0x1003f30
 100ca8c:	int3   
 100ca8d:	int3   
 100ca8e:	int3   
 100ca8f:	int3   
 100ca90:	int3   
 100ca91:	int3   
 100ca92:	int3   
 100ca93:	int3   
 100ca94:	int3   
 100ca95:	int3   
 100ca96:	int3   
 100ca97:	int3   
 100ca98:	int3   
 100ca99:	int3   
 100ca9a:	int3   
 100ca9b:	int3   
 100ca9c:	int3   
 100ca9d:	int3   
 100ca9e:	int3   
 100ca9f:	int3   
 100caa0:	mov    rcx,QWORD PTR [rdx+0x88]
 100caa7:	jmp    0x1003f30
 100caac:	int3   
 100caad:	int3   
 100caae:	int3   
 100caaf:	int3   
 100cab0:	rex push rbp
 100cab2:	sub    rsp,0x20
 100cab6:	mov    rbp,rdx
 100cab9:	mov    eax,DWORD PTR [rbp+0x40]
 100cabc:	and    eax,0x1
 100cabf:	test   eax,eax
 100cac1:	je     0x100cad3
 100cac3:	and    DWORD PTR [rbp+0x40],0xfffffffe
 100cac7:	mov    rcx,QWORD PTR [rbp+0x88]
 100cace:	call   0x1004530
 100cad3:	add    rsp,0x20
 100cad7:	pop    rbp
 100cad8:	ret    
 100cad9:	int3   
 100cada:	int3   
 100cadb:	int3   
 100cadc:	int3   
 100cadd:	int3   
 100cade:	int3   
 100cadf:	int3   
 100cae0:	mov    rcx,QWORD PTR [rdx+0x68]
 100cae7:	jmp    0x1003f30
 100caec:	int3   
 100caed:	int3   
 100caee:	int3   
 100caef:	int3   
 100caf0:	rex push rbp
 100caf2:	sub    rsp,0x20
 100caf6:	mov    rbp,rdx
 100caf9:	mov    eax,DWORD PTR [rbp+0x40]
 100cafc:	and    eax,0x1
 100caff:	test   eax,eax
 100cb01:	je     0x100cb10
 100cb03:	and    DWORD PTR [rbp+0x40],0xfffffffe
 100cb07:	mov    rcx,QWORD PTR [rbp+0x68]
 100cb0b:	call   0x1004530
 100cb10:	add    rsp,0x20
 100cb14:	pop    rbp
 100cb15:	ret    
 100cb16:	int3   
 100cb17:	int3   
 100cb18:	int3   
 100cb19:	int3   
 100cb1a:	int3   
 100cb1b:	int3   
 100cb1c:	int3   
 100cb1d:	int3   
 100cb1e:	int3   
 100cb1f:	int3   
 100cb20:	lea    rcx,[rdx+0x38]
 100cb27:	rex.W jmp QWORD PTR [rip+0xffffffffffff499a]        # 0x10014c8
 100cb2e:	int3   
 100cb2f:	int3   
 100cb30:	lea    rcx,[rdx+0x98]
 100cb37:	jmp    0x1004530
 100cb3c:	int3   
 100cb3d:	int3   
 100cb3e:	int3   
 100cb3f:	int3   
 100cb40:	lea    rcx,[rdx+0x98]
 100cb47:	jmp    0x1003f30
 100cb4c:	int3   
 100cb4d:	int3   
 100cb4e:	int3   
 100cb4f:	int3   
 100cb50:	int3   
 100cb51:	int3   
 100cb52:	int3   
 100cb53:	int3   
 100cb54:	int3   
 100cb55:	int3   
 100cb56:	int3   
 100cb57:	int3   
 100cb58:	int3   
 100cb59:	int3   
 100cb5a:	int3   
 100cb5b:	int3   
 100cb5c:	int3   
 100cb5d:	int3   
 100cb5e:	int3   
 100cb5f:	int3   
 100cb60:	lea    rcx,[rdx+0x48]
 100cb67:	rex.W jmp QWORD PTR [rip+0xffffffffffff495a]        # 0x10014c8
 100cb6e:	int3   
 100cb6f:	int3   
 100cb70:	lea    rcx,[rdx+0xb0]
 100cb77:	jmp    0x1003f00
 100cb7c:	int3   
 100cb7d:	int3   
 100cb7e:	int3   
 100cb7f:	int3   
 100cb80:	int3   
 100cb81:	int3   
 100cb82:	int3   
 100cb83:	int3   
 100cb84:	int3   
 100cb85:	int3   
 100cb86:	int3   
 100cb87:	int3   
 100cb88:	int3   
 100cb89:	int3   
 100cb8a:	int3   
 100cb8b:	int3   
 100cb8c:	int3   
 100cb8d:	int3   
 100cb8e:	int3   
 100cb8f:	int3   
 100cb90:	lea    rcx,[rdx+0x38]
 100cb97:	rex.W jmp QWORD PTR [rip+0xffffffffffff492a]        # 0x10014c8
 100cb9e:	int3   
 100cb9f:	int3   
 100cba0:	int3   
 100cba1:	int3   
 100cba2:	int3   
 100cba3:	int3   
 100cba4:	int3   
 100cba5:	int3   
 100cba6:	int3   
 100cba7:	int3   
 100cba8:	int3   
 100cba9:	int3   
 100cbaa:	int3   
 100cbab:	int3   
 100cbac:	int3   
 100cbad:	int3   
 100cbae:	int3   
 100cbaf:	int3   
 100cbb0:	lea    rcx,[rdx+0x40]
 100cbb7:	jmp    0x1003f30
 100cbbc:	int3   
 100cbbd:	int3   
 100cbbe:	int3   
 100cbbf:	int3   
 100cbc0:	lea    rcx,[rdx+0x40]
 100cbc7:	jmp    0x1004530
 100cbcc:	int3   
 100cbcd:	int3   
 100cbce:	int3   
 100cbcf:	int3   
 100cbd0:	lea    rcx,[rdx+0x40]
 100cbd7:	jmp    0x1003f30
 100cbdc:	int3   
 100cbdd:	int3   
 100cbde:	int3   
 100cbdf:	int3   
 100cbe0:	lea    rcx,[rdx+0x40]
 100cbe7:	jmp    0x1003f30
 100cbec:	int3   
 100cbed:	int3   
 100cbee:	int3   
 100cbef:	int3   
 100cbf0:	lea    rcx,[rdx+0x40]
 100cbf7:	jmp    0x1003f30
 100cbfc:	int3   
 100cbfd:	int3   
 100cbfe:	int3   
 100cbff:	int3   
 100cc00:	lea    rcx,[rdx+0x40]
 100cc07:	jmp    0x1003f30
 100cc0c:	int3   
 100cc0d:	int3   
 100cc0e:	int3   
 100cc0f:	int3   
 100cc10:	lea    rcx,[rdx+0x50]
 100cc17:	jmp    0x1004530
 100cc1c:	int3   
 100cc1d:	int3   
 100cc1e:	int3   
 100cc1f:	int3   
 100cc20:	lea    rcx,[rdx+0x50]
 100cc27:	jmp    0x1003f30
 100cc2c:	int3   
 100cc2d:	int3   
 100cc2e:	int3   
 100cc2f:	int3   
 100cc30:	lea    rcx,[rdx+0x40]
 100cc37:	jmp    0x1003f30
 100cc3c:	int3   
 100cc3d:	int3   
 100cc3e:	int3   
 100cc3f:	int3   
 100cc40:	lea    rcx,[rdx+0x40]
 100cc47:	jmp    0x1003f30
 100cc4c:	int3   
 100cc4d:	int3   
 100cc4e:	int3   
 100cc4f:	int3   
 100cc50:	int3   
 100cc51:	int3   
 100cc52:	int3   
 100cc53:	int3   
 100cc54:	int3   
 100cc55:	int3   
 100cc56:	int3   
 100cc57:	int3   
 100cc58:	int3   
 100cc59:	int3   
 100cc5a:	int3   
 100cc5b:	int3   
 100cc5c:	int3   
 100cc5d:	int3   
 100cc5e:	int3   
 100cc5f:	int3   
 100cc60:	lea    rcx,[rdx+0x28]
 100cc67:	jmp    0x1004530
 100cc6c:	int3   
 100cc6d:	int3   
 100cc6e:	int3   
 100cc6f:	int3   
 100cc70:	lea    rcx,[rdx+0x28]
 100cc77:	jmp    0x1003f30
 100cc7c:	int3   
 100cc7d:	int3   
 100cc7e:	int3   
 100cc7f:	int3   
 100cc80:	int3   
 100cc81:	int3   
 100cc82:	int3   
 100cc83:	int3   
 100cc84:	int3   
 100cc85:	int3   
 100cc86:	int3   
 100cc87:	int3   
 100cc88:	int3   
 100cc89:	int3   
 100cc8a:	int3   
 100cc8b:	int3   
 100cc8c:	int3   
 100cc8d:	int3   
 100cc8e:	int3   
 100cc8f:	int3   
 100cc90:	lea    rcx,[rdx+0x50]
 100cc97:	jmp    0x1004530
 100cc9c:	int3   
 100cc9d:	int3   
 100cc9e:	int3   
 100cc9f:	int3   
 100cca0:	lea    rcx,[rdx+0x50]
 100cca7:	jmp    0x1003f30
 100ccac:	int3   
 100ccad:	int3   
 100ccae:	int3   
 100ccaf:	int3   
 100ccb0:	int3   
 100ccb1:	int3   
 100ccb2:	int3   
 100ccb3:	int3   
 100ccb4:	int3   
 100ccb5:	int3   
 100ccb6:	int3   
 100ccb7:	int3   
 100ccb8:	int3   
 100ccb9:	int3   
 100ccba:	int3   
 100ccbb:	int3   
 100ccbc:	int3   
 100ccbd:	int3   
 100ccbe:	int3   
 100ccbf:	int3   
 100ccc0:	lea    rcx,[rdx+0x38]
 100ccc7:	rex.W jmp QWORD PTR [rip+0xffffffffffff47fa]        # 0x10014c8
 100ccce:	int3   
 100cccf:	int3   
 100ccd0:	int3   
 100ccd1:	int3   
 100ccd2:	int3   
 100ccd3:	int3   
 100ccd4:	int3   
 100ccd5:	int3   
 100ccd6:	int3   
 100ccd7:	int3   
 100ccd8:	int3   
 100ccd9:	int3   
 100ccda:	int3   
 100ccdb:	int3   
 100ccdc:	int3   
 100ccdd:	int3   
 100ccde:	int3   
 100ccdf:	int3   
 100cce0:	lea    rcx,[rip+0x4561]        # 0x1011248
 100cce7:	jmp    0x1003f30
 100ccec:	int3   
 100cced:	int3   
 100ccee:	int3   
 100ccef:	int3   
 100ccf0:	int3   
 100ccf1:	int3   
 100ccf2:	int3   
 100ccf3:	int3   
 100ccf4:	int3   
 100ccf5:	int3   
 100ccf6:	int3   
 100ccf7:	int3   
 100ccf8:	int3   
 100ccf9:	int3   
 100ccfa:	int3   
 100ccfb:	int3   
 100ccfc:	int3   
 100ccfd:	int3   
 100ccfe:	int3   
 100ccff:	int3   
 100cd00:	lea    rcx,[rdx+0x38]
 100cd07:	jmp    0x1005cd0
 100cd0c:	int3   
 100cd0d:	int3   
 100cd0e:	int3   
 100cd0f:	int3   
 100cd10:	int3   
 100cd11:	int3   
 100cd12:	int3   
 100cd13:	int3   
 100cd14:	int3   
 100cd15:	int3   
 100cd16:	int3   
 100cd17:	int3   
 100cd18:	int3   
 100cd19:	int3   
 100cd1a:	int3   
 100cd1b:	int3   
 100cd1c:	int3   
 100cd1d:	int3   
 100cd1e:	int3   
 100cd1f:	int3   
 100cd20:	rex push rbp
 100cd22:	sub    rsp,0x40
 100cd26:	mov    rbp,rdx
 100cd29:	mov    rcx,QWORD PTR [rbp+0x40]
 100cd2d:	mov    rax,QWORD PTR [rcx]
 100cd30:	call   QWORD PTR [rax+0x10]
 100cd33:	mov    rcx,QWORD PTR [rbp+0x48]
 100cd37:	test   rcx,rcx
 100cd3a:	je     0x100cd4a
 100cd3c:	call   QWORD PTR [rip+0xffffffffffff4746]        # 0x1001488
 100cd42:	mov    QWORD PTR [rbp+0x48],0x0
 100cd4a:	mov    rcx,QWORD PTR [rip+0x4587]        # 0x10112d8
 100cd51:	call   QWORD PTR [rip+0xffffffffffff4321]        # 0x1001078
 100cd57:	mov    QWORD PTR [rip+0x4576],0x0        # 0x10112d8
 100cd62:	lea    rcx,[rip+0x4577]        # 0x10112e0
 100cd69:	call   QWORD PTR [rip+0xffffffffffff4399]        # 0x1001108
 100cd6f:	nop
 100cd70:	add    rsp,0x40
 100cd74:	pop    rbp
 100cd75:	ret    
 100cd76:	int3   
 100cd77:	int3   
 100cd78:	int3   
 100cd79:	int3   
 100cd7a:	int3   
 100cd7b:	int3   
 100cd7c:	int3   
 100cd7d:	int3   
 100cd7e:	int3   
 100cd7f:	int3   
 100cd80:	lea    rcx,[rdx+0x38]
 100cd87:	rex.W jmp QWORD PTR [rip+0xffffffffffff473a]        # 0x10014c8
 100cd8e:	int3   
 100cd8f:	int3   
 100cd90:	lea    rcx,[rdx+0x60]
 100cd97:	jmp    0x10049b0
 100cd9c:	int3   
 100cd9d:	int3   
 100cd9e:	int3   
 100cd9f:	int3   
 100cda0:	int3   
 100cda1:	int3   
 100cda2:	rex push rbp
 100cda4:	sub    rsp,0x20
 100cda8:	mov    rbp,rdx
 100cdab:	mov    rax,QWORD PTR [rcx]
 100cdae:	mov    rdx,rcx
 100cdb1:	mov    ecx,DWORD PTR [rax]
 100cdb3:	call   0x1006f5e
 100cdb8:	nop
 100cdb9:	add    rsp,0x20
 100cdbd:	pop    rbp
 100cdbe:	ret    
 100cdbf:	int3   
 100cdc0:	int3   
 100cdc1:	int3   
 100cdc2:	int3   
 100cdc3:	int3   
 100cdc4:	int3   
 100cdc5:	int3   
 100cdc6:	rex push rbp
 100cdc8:	sub    rsp,0x20
 100cdcc:	mov    rbp,rdx
 100cdcf:	mov    QWORD PTR [rbp+0x38],rcx
 100cdd3:	mov    QWORD PTR [rbp+0x28],rcx
 100cdd7:	mov    rax,QWORD PTR [rbp+0x28]
 100cddb:	mov    rcx,QWORD PTR [rax]
 100cdde:	mov    QWORD PTR [rbp+0x30],rcx
 100cde2:	mov    rax,QWORD PTR [rbp+0x30]
 100cde6:	cmp    DWORD PTR [rax],0xe06d7363
 100cdec:	je     0x100cdfa
 100cdee:	mov    DWORD PTR [rbp+0x20],0x0
 100cdf5:	mov    eax,DWORD PTR [rbp+0x20]
 100cdf8:	jmp    0x100ce00
 100cdfa:	call   0x1007132
 100cdff:	nop
 100ce00:	add    rsp,0x20
 100ce04:	pop    rbp
 100ce05:	ret    
 100ce06:	int3   
 100ce07:	int3   
 100ce08:	int3   
 100ce09:	int3   
 100ce0a:	int3   
 100ce0b:	int3   
 100ce0c:	int3   
 100ce0d:	rex push rbp
 100ce0f:	sub    rsp,0x20
 100ce13:	mov    rbp,rdx
 100ce16:	cmp    DWORD PTR [rbp+0x20],0x0
 100ce1a:	jne    0x100ce32
 100ce1c:	mov    r9,QWORD PTR [rbp+0x78]
 100ce20:	mov    r8d,DWORD PTR [rbp+0x70]
 100ce24:	mov    rdx,QWORD PTR [rbp+0x68]
 100ce28:	mov    rcx,QWORD PTR [rbp+0x60]
 100ce2c:	call   0x10068c8
 100ce31:	nop
 100ce32:	add    rsp,0x20
 100ce36:	pop    rbp
 100ce37:	ret    
 100ce38:	int3   
 100ce39:	int3   
 100ce3a:	int3   
 100ce3b:	int3   
 100ce3c:	int3   
 100ce3d:	int3   
 100ce3e:	int3   
 100ce3f:	rex push rbp
 100ce41:	sub    rsp,0x20
 100ce45:	mov    rbp,rdx
 100ce48:	mov    ecx,0x8
 100ce4d:	call   0x100714a
 100ce52:	nop
 100ce53:	add    rsp,0x20
 100ce57:	pop    rbp
 100ce58:	ret    
 100ce59:	int3   
 100ce5a:	int3   
 100ce5b:	int3   
 100ce5c:	int3   
 100ce5d:	int3   
 100ce5e:	int3   
 100ce5f:	int3   
 100ce60:	rex push rbp
 100ce62:	sub    rsp,0x20
 100ce66:	mov    rbp,rdx
 100ce69:	mov    rax,QWORD PTR [rcx]
 100ce6c:	xor    ecx,ecx
 100ce6e:	cmp    DWORD PTR [rax],0xc0000005
 100ce74:	sete   cl
 100ce77:	mov    eax,ecx
 100ce79:	mov    eax,ecx
 100ce7b:	add    rsp,0x20
 100ce7f:	pop    rbp
 100ce80:	ret    
 100ce81:	int3   
 100ce82:	int3   
 100ce83:	int3   
 100ce84:	int3   
 100ce85:	int3   
 100ce86:	int3   
 100ce87:	int3   
 100ce88:	mov    QWORD PTR [rsp+0x10],rdx
 100ce8d:	push   rbp
 100ce8e:	sub    rsp,0x20
 100ce92:	mov    rbp,rdx
 100ce95:	and    QWORD PTR [rbp+0x50],0x0
 100ce9a:	lea    rax,[rip+0xffffffffffffa2e4]        # 0x1007185
 100cea1:	add    rsp,0x20
 100cea5:	pop    rbp
 100cea6:	ret    
 100cea7:	int3   
 100cea8:	int3   
 100cea9:	int3   
 100ceaa:	int3   
 100ceab:	int3   
 100ceac:	int3   
 100cead:	int3   
 100ceae:	lea    rcx,[rdx+0x48]
 100ceb5:	rex.W jmp QWORD PTR [rip+0xffffffffffff443c]        # 0x10012f8
 100cebc:	int3   
 100cebd:	int3   
 100cebe:	int3   
 100cebf:	int3   
 100cec0:	int3   
 100cec1:	int3   
 100cec2:	int3   
 100cec3:	int3   
 100cec4:	int3   
 100cec5:	int3   
 100cec6:	int3   
 100cec7:	int3   
 100cec8:	int3   
 100cec9:	int3   
 100ceca:	int3   
 100cecb:	int3   
 100cecc:	int3   
 100cecd:	int3   
 100cece:	int3   
 100cecf:	int3   
 100ced0:	rex push rbx
 100ced2:	sub    rsp,0x30
 100ced6:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100cedf:	lea    rcx,[rip+0x429a]        # 0x1011180
 100cee6:	mov    rax,QWORD PTR [rip+0x4293]        # 0x1011180
 100ceed:	call   QWORD PTR [rax+0x18]
 100cef0:	add    rax,0x18
 100cef4:	mov    QWORD PTR [rip+0x42e5],rax        # 0x10111e0
 100cefb:	lea    rdx,[rip+0xffffffffffff4be6]        # 0x1001ae8
 100cf02:	test   rdx,0xffffffffffff0000
 100cf09:	jne    0x100cf30
 100cf0b:	movzx  ebx,dx
 100cf0e:	xor    edx,edx
 100cf10:	mov    ecx,ebx
 100cf12:	call   0x1003e40
 100cf17:	test   rax,rax
 100cf1a:	je     0x100cf43
 100cf1c:	mov    r8d,ebx
 100cf1f:	mov    rdx,rax
 100cf22:	lea    rcx,[rip+0x42b7]        # 0x10111e0
 100cf29:	call   0x10046f0
 100cf2e:	jmp    0x100cf43
 100cf30:	mov    r8d,0xe
 100cf36:	lea    rcx,[rip+0x42a3]        # 0x10111e0
 100cf3d:	call   0x1004060
 100cf42:	nop
 100cf43:	lea    rcx,[rip+0x4236]        # 0x1011180
 100cf4a:	mov    rax,QWORD PTR [rip+0x422f]        # 0x1011180
 100cf51:	call   QWORD PTR [rax+0x18]
 100cf54:	add    rax,0x18
 100cf58:	mov    QWORD PTR [rip+0x4289],rax        # 0x10111e8
 100cf5f:	lea    rdx,[rip+0xffffffffffff4ba2]        # 0x1001b08
 100cf66:	test   rdx,0xffffffffffff0000
 100cf6d:	jne    0x100cf94
 100cf6f:	movzx  ebx,dx
 100cf72:	xor    edx,edx
 100cf74:	mov    ecx,ebx
 100cf76:	call   0x1003e40
 100cf7b:	test   rax,rax
 100cf7e:	je     0x100cfa7
 100cf80:	mov    r8d,ebx
 100cf83:	mov    rdx,rax
 100cf86:	lea    rcx,[rip+0x425b]        # 0x10111e8
 100cf8d:	call   0x10046f0
 100cf92:	jmp    0x100cfa7
 100cf94:	mov    r8d,0xb
 100cf9a:	lea    rcx,[rip+0x4247]        # 0x10111e8
 100cfa1:	call   0x1004060
 100cfa6:	nop
 100cfa7:	lea    rcx,[rip+0x41d2]        # 0x1011180
 100cfae:	mov    rax,QWORD PTR [rip+0x41cb]        # 0x1011180
 100cfb5:	call   QWORD PTR [rax+0x18]
 100cfb8:	add    rax,0x18
 100cfbc:	mov    QWORD PTR [rip+0x422d],rax        # 0x10111f0
 100cfc3:	lea    rdx,[rip+0xffffffffffff4b56]        # 0x1001b20
 100cfca:	test   rdx,0xffffffffffff0000
 100cfd1:	jne    0x100cff8
 100cfd3:	movzx  ebx,dx
 100cfd6:	xor    edx,edx
 100cfd8:	mov    ecx,ebx
 100cfda:	call   0x1003e40
 100cfdf:	test   rax,rax
 100cfe2:	je     0x100d00b
 100cfe4:	mov    r8d,ebx
 100cfe7:	mov    rdx,rax
 100cfea:	lea    rcx,[rip+0x41ff]        # 0x10111f0
 100cff1:	call   0x10046f0
 100cff6:	jmp    0x100d00b
 100cff8:	mov    r8d,0xd
 100cffe:	lea    rcx,[rip+0x41eb]        # 0x10111f0
 100d005:	call   0x1004060
 100d00a:	nop
 100d00b:	lea    rcx,[rip+0x416e]        # 0x1011180
 100d012:	mov    rax,QWORD PTR [rip+0x4167]        # 0x1011180
 100d019:	call   QWORD PTR [rax+0x18]
 100d01c:	add    rax,0x18
 100d020:	mov    QWORD PTR [rip+0x41d1],rax        # 0x10111f8
 100d027:	lea    rdx,[rip+0xffffffffffff4b12]        # 0x1001b40
 100d02e:	test   rdx,0xffffffffffff0000
 100d035:	jne    0x100d05c
 100d037:	movzx  ebx,dx
 100d03a:	xor    edx,edx
 100d03c:	mov    ecx,ebx
 100d03e:	call   0x1003e40
 100d043:	test   rax,rax
 100d046:	je     0x100d06f
 100d048:	mov    r8d,ebx
 100d04b:	mov    rdx,rax
 100d04e:	lea    rcx,[rip+0x41a3]        # 0x10111f8
 100d055:	call   0x10046f0
 100d05a:	jmp    0x100d06f
 100d05c:	mov    r8d,0xc
 100d062:	lea    rcx,[rip+0x418f]        # 0x10111f8
 100d069:	call   0x1004060
 100d06e:	nop
 100d06f:	lea    rcx,[rip+0x410a]        # 0x1011180
 100d076:	mov    rax,QWORD PTR [rip+0x4103]        # 0x1011180
 100d07d:	call   QWORD PTR [rax+0x18]
 100d080:	add    rax,0x18
 100d084:	mov    QWORD PTR [rip+0x4175],rax        # 0x1011200
 100d08b:	lea    rdx,[rip+0xffffffffffff4ace]        # 0x1001b60
 100d092:	test   rdx,0xffffffffffff0000
 100d099:	jne    0x100d0c0
 100d09b:	movzx  ebx,dx
 100d09e:	xor    edx,edx
 100d0a0:	mov    ecx,ebx
 100d0a2:	call   0x1003e40
 100d0a7:	test   rax,rax
 100d0aa:	je     0x100d0d3
 100d0ac:	mov    r8d,ebx
 100d0af:	mov    rdx,rax
 100d0b2:	lea    rcx,[rip+0x4147]        # 0x1011200
 100d0b9:	call   0x10046f0
 100d0be:	jmp    0x100d0d3
 100d0c0:	mov    r8d,0xb
 100d0c6:	lea    rcx,[rip+0x4133]        # 0x1011200
 100d0cd:	call   0x1004060
 100d0d2:	nop
 100d0d3:	lea    rcx,[rip+0x40a6]        # 0x1011180
 100d0da:	mov    rax,QWORD PTR [rip+0x409f]        # 0x1011180
 100d0e1:	call   QWORD PTR [rax+0x18]
 100d0e4:	add    rax,0x18
 100d0e8:	mov    QWORD PTR [rip+0x4119],rax        # 0x1011208
 100d0ef:	lea    rdx,[rip+0xffffffffffff4a82]        # 0x1001b78
 100d0f6:	test   rdx,0xffffffffffff0000
 100d0fd:	jne    0x100d124
 100d0ff:	movzx  ebx,dx
 100d102:	xor    edx,edx
 100d104:	mov    ecx,ebx
 100d106:	call   0x1003e40
 100d10b:	test   rax,rax
 100d10e:	je     0x100d137
 100d110:	mov    r8d,ebx
 100d113:	mov    rdx,rax
 100d116:	lea    rcx,[rip+0x40eb]        # 0x1011208
 100d11d:	call   0x10046f0
 100d122:	jmp    0x100d137
 100d124:	mov    r8d,0x10
 100d12a:	lea    rcx,[rip+0x40d7]        # 0x1011208
 100d131:	call   0x1004060
 100d136:	nop
 100d137:	lea    rcx,[rip+0x4042]        # 0x1011180
 100d13e:	mov    rax,QWORD PTR [rip+0x403b]        # 0x1011180
 100d145:	call   QWORD PTR [rax+0x18]
 100d148:	add    rax,0x18
 100d14c:	mov    QWORD PTR [rip+0x40bd],rax        # 0x1011210
 100d153:	lea    rdx,[rip+0xffffffffffff4a46]        # 0x1001ba0
 100d15a:	test   rdx,0xffffffffffff0000
 100d161:	jne    0x100d188
 100d163:	movzx  ebx,dx
 100d166:	xor    edx,edx
 100d168:	mov    ecx,ebx
 100d16a:	call   0x1003e40
 100d16f:	test   rax,rax
 100d172:	je     0x100d19b
 100d174:	mov    r8d,ebx
 100d177:	mov    rdx,rax
 100d17a:	lea    rcx,[rip+0x408f]        # 0x1011210
 100d181:	call   0x10046f0
 100d186:	jmp    0x100d19b
 100d188:	mov    r8d,0xa
 100d18e:	lea    rcx,[rip+0x407b]        # 0x1011210
 100d195:	call   0x1004060
 100d19a:	nop
 100d19b:	lea    rcx,[rip+0x3fde]        # 0x1011180
 100d1a2:	mov    rax,QWORD PTR [rip+0x3fd7]        # 0x1011180
 100d1a9:	call   QWORD PTR [rax+0x18]
 100d1ac:	add    rax,0x18
 100d1b0:	mov    QWORD PTR [rip+0x4061],rax        # 0x1011218
 100d1b7:	lea    rdx,[rip+0xffffffffffff49fa]        # 0x1001bb8
 100d1be:	test   rdx,0xffffffffffff0000
 100d1c5:	jne    0x100d1ec
 100d1c7:	movzx  ebx,dx
 100d1ca:	xor    edx,edx
 100d1cc:	mov    ecx,ebx
 100d1ce:	call   0x1003e40
 100d1d3:	test   rax,rax
 100d1d6:	je     0x100d1ff
 100d1d8:	mov    r8d,ebx
 100d1db:	mov    rdx,rax
 100d1de:	lea    rcx,[rip+0x4033]        # 0x1011218
 100d1e5:	call   0x10046f0
 100d1ea:	jmp    0x100d1ff
 100d1ec:	mov    r8d,0xc
 100d1f2:	lea    rcx,[rip+0x401f]        # 0x1011218
 100d1f9:	call   0x1004060
 100d1fe:	nop
 100d1ff:	lea    rcx,[rip+0x3f7a]        # 0x1011180
 100d206:	mov    rax,QWORD PTR [rip+0x3f73]        # 0x1011180
 100d20d:	call   QWORD PTR [rax+0x18]
 100d210:	add    rax,0x18
 100d214:	mov    QWORD PTR [rip+0x4005],rax        # 0x1011220
 100d21b:	lea    rdx,[rip+0xffffffffffff49b6]        # 0x1001bd8
 100d222:	test   rdx,0xffffffffffff0000
 100d229:	jne    0x100d250
 100d22b:	movzx  ebx,dx
 100d22e:	xor    edx,edx
 100d230:	mov    ecx,ebx
 100d232:	call   0x1003e40
 100d237:	test   rax,rax
 100d23a:	je     0x100d263
 100d23c:	mov    r8d,ebx
 100d23f:	mov    rdx,rax
 100d242:	lea    rcx,[rip+0x3fd7]        # 0x1011220
 100d249:	call   0x10046f0
 100d24e:	jmp    0x100d263
 100d250:	mov    r8d,0x13
 100d256:	lea    rcx,[rip+0x3fc3]        # 0x1011220
 100d25d:	call   0x1004060
 100d262:	nop
 100d263:	lea    rcx,[rip+0x3f16]        # 0x1011180
 100d26a:	mov    rax,QWORD PTR [rip+0x3f0f]        # 0x1011180
 100d271:	call   QWORD PTR [rax+0x18]
 100d274:	add    rax,0x18
 100d278:	mov    QWORD PTR [rip+0x3fa9],rax        # 0x1011228
 100d27f:	lea    rdx,[rip+0xffffffffffff497a]        # 0x1001c00
 100d286:	test   rdx,0xffffffffffff0000
 100d28d:	jne    0x100d2b4
 100d28f:	movzx  ebx,dx
 100d292:	xor    edx,edx
 100d294:	mov    ecx,ebx
 100d296:	call   0x1003e40
 100d29b:	test   rax,rax
 100d29e:	je     0x100d2c7
 100d2a0:	mov    r8d,ebx
 100d2a3:	mov    rdx,rax
 100d2a6:	lea    rcx,[rip+0x3f7b]        # 0x1011228
 100d2ad:	call   0x10046f0
 100d2b2:	jmp    0x100d2c7
 100d2b4:	mov    r8d,0x14
 100d2ba:	lea    rcx,[rip+0x3f67]        # 0x1011228
 100d2c1:	call   0x1004060
 100d2c6:	nop
 100d2c7:	lea    rcx,[rip+0x3eb2]        # 0x1011180
 100d2ce:	mov    rax,QWORD PTR [rip+0x3eab]        # 0x1011180
 100d2d5:	call   QWORD PTR [rax+0x18]
 100d2d8:	add    rax,0x18
 100d2dc:	mov    QWORD PTR [rip+0x3f4d],rax        # 0x1011230
 100d2e3:	lea    rdx,[rip+0xffffffffffff4946]        # 0x1001c30
 100d2ea:	test   rdx,0xffffffffffff0000
 100d2f1:	jne    0x100d318
 100d2f3:	movzx  ebx,dx
 100d2f6:	xor    edx,edx
 100d2f8:	mov    ecx,ebx
 100d2fa:	call   0x1003e40
 100d2ff:	test   rax,rax
 100d302:	je     0x100d32b
 100d304:	mov    r8d,ebx
 100d307:	mov    rdx,rax
 100d30a:	lea    rcx,[rip+0x3f1f]        # 0x1011230
 100d311:	call   0x10046f0
 100d316:	jmp    0x100d32b
 100d318:	mov    r8d,0x8
 100d31e:	lea    rcx,[rip+0x3f0b]        # 0x1011230
 100d325:	call   0x1004060
 100d32a:	nop
 100d32b:	lea    rcx,[rip+0x3e4e]        # 0x1011180
 100d332:	mov    rax,QWORD PTR [rip+0x3e47]        # 0x1011180
 100d339:	call   QWORD PTR [rax+0x18]
 100d33c:	add    rax,0x18
 100d340:	mov    QWORD PTR [rip+0x3ef1],rax        # 0x1011238
 100d347:	lea    rdx,[rip+0xffffffffffff48fa]        # 0x1001c48
 100d34e:	test   rdx,0xffffffffffff0000
 100d355:	jne    0x100d37c
 100d357:	movzx  ebx,dx
 100d35a:	xor    edx,edx
 100d35c:	mov    ecx,ebx
 100d35e:	call   0x1003e40
 100d363:	test   rax,rax
 100d366:	je     0x100d38f
 100d368:	mov    r8d,ebx
 100d36b:	mov    rdx,rax
 100d36e:	lea    rcx,[rip+0x3ec3]        # 0x1011238
 100d375:	call   0x10046f0
 100d37a:	jmp    0x100d38f
 100d37c:	mov    r8d,0x16
 100d382:	lea    rcx,[rip+0x3eaf]        # 0x1011238
 100d389:	call   0x1004060
 100d38e:	nop
 100d38f:	lea    rcx,[rip+0x3dea]        # 0x1011180
 100d396:	mov    rax,QWORD PTR [rip+0x3de3]        # 0x1011180
 100d39d:	call   QWORD PTR [rax+0x18]
 100d3a0:	add    rax,0x18
 100d3a4:	mov    QWORD PTR [rip+0x3e95],rax        # 0x1011240
 100d3ab:	lea    rdx,[rip+0xffffffffffff48c6]        # 0x1001c78
 100d3b2:	test   rdx,0xffffffffffff0000
 100d3b9:	jne    0x100d3e0
 100d3bb:	movzx  ebx,dx
 100d3be:	xor    edx,edx
 100d3c0:	mov    ecx,ebx
 100d3c2:	call   0x1003e40
 100d3c7:	test   rax,rax
 100d3ca:	je     0x100d3f3
 100d3cc:	mov    r8d,ebx
 100d3cf:	mov    rdx,rax
 100d3d2:	lea    rcx,[rip+0x3e67]        # 0x1011240
 100d3d9:	call   0x10046f0
 100d3de:	jmp    0x100d3f3
 100d3e0:	mov    r8d,0x16
 100d3e6:	lea    rcx,[rip+0x3e53]        # 0x1011240
 100d3ed:	call   0x1004060
 100d3f2:	nop
 100d3f3:	lea    rcx,[rip+0x936]        # 0x100dd30
 100d3fa:	add    rsp,0x30
 100d3fe:	pop    rbx
 100d3ff:	jmp    0x1006cf0
 100d404:	int3   
 100d405:	int3   
 100d406:	int3   
 100d407:	int3   
 100d408:	int3   
 100d409:	int3   
 100d40a:	int3   
 100d40b:	int3   
 100d40c:	int3   
 100d40d:	int3   
 100d40e:	int3   
 100d40f:	int3   
 100d410:	rex push rbx
 100d412:	sub    rsp,0x30
 100d416:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100d41f:	lea    rcx,[rip+0x3d5a]        # 0x1011180
 100d426:	mov    rax,QWORD PTR [rip+0x3d53]        # 0x1011180
 100d42d:	call   QWORD PTR [rax+0x18]
 100d430:	add    rax,0x18
 100d434:	mov    QWORD PTR [rip+0x3e0d],rax        # 0x1011248
 100d43b:	lea    rdx,[rip+0xffffffffffff4866]        # 0x1001ca8
 100d442:	test   rdx,0xffffffffffff0000
 100d449:	jne    0x100d470
 100d44b:	movzx  ebx,dx
 100d44e:	xor    edx,edx
 100d450:	mov    ecx,ebx
 100d452:	call   0x1003e40
 100d457:	test   rax,rax
 100d45a:	je     0x100d483
 100d45c:	mov    r8d,ebx
 100d45f:	mov    rdx,rax
 100d462:	lea    rcx,[rip+0x3ddf]        # 0x1011248
 100d469:	call   0x10046f0
 100d46e:	jmp    0x100d483
 100d470:	mov    r8d,0x13
 100d476:	lea    rcx,[rip+0x3dcb]        # 0x1011248
 100d47d:	call   0x1004060
 100d482:	nop
 100d483:	lea    rcx,[rip+0x8d6]        # 0x100dd60
 100d48a:	add    rsp,0x30
 100d48e:	pop    rbx
 100d48f:	jmp    0x1006cf0
 100d494:	int3   
 100d495:	int3   
 100d496:	int3   
 100d497:	int3   
 100d498:	int3   
 100d499:	int3   
 100d49a:	int3   
 100d49b:	int3   
 100d49c:	int3   
 100d49d:	int3   
 100d49e:	int3   
 100d49f:	int3   
 100d4a0:	rex push rbx
 100d4a2:	sub    rsp,0x30
 100d4a6:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100d4af:	lea    rcx,[rip+0x3cca]        # 0x1011180
 100d4b6:	mov    rax,QWORD PTR [rip+0x3cc3]        # 0x1011180
 100d4bd:	call   QWORD PTR [rax+0x18]
 100d4c0:	add    rax,0x18
 100d4c4:	mov    QWORD PTR [rip+0x3d85],rax        # 0x1011250
 100d4cb:	lea    rdx,[rip+0xffffffffffff47fe]        # 0x1001cd0
 100d4d2:	test   rdx,0xffffffffffff0000
 100d4d9:	jne    0x100d500
 100d4db:	movzx  ebx,dx
 100d4de:	xor    edx,edx
 100d4e0:	mov    ecx,ebx
 100d4e2:	call   0x1003e40
 100d4e7:	test   rax,rax
 100d4ea:	je     0x100d513
 100d4ec:	mov    r8d,ebx
 100d4ef:	mov    rdx,rax
 100d4f2:	lea    rcx,[rip+0x3d57]        # 0x1011250
 100d4f9:	call   0x10046f0
 100d4fe:	jmp    0x100d513
 100d500:	mov    r8d,0xf
 100d506:	lea    rcx,[rip+0x3d43]        # 0x1011250
 100d50d:	call   0x1004060
 100d512:	nop
 100d513:	lea    rcx,[rip+0x3c66]        # 0x1011180
 100d51a:	mov    rax,QWORD PTR [rip+0x3c5f]        # 0x1011180
 100d521:	call   QWORD PTR [rax+0x18]
 100d524:	add    rax,0x18
 100d528:	mov    QWORD PTR [rip+0x3d29],rax        # 0x1011258
 100d52f:	lea    rdx,[rip+0xffffffffffff47ba]        # 0x1001cf0
 100d536:	test   rdx,0xffffffffffff0000
 100d53d:	jne    0x100d564
 100d53f:	movzx  ebx,dx
 100d542:	xor    edx,edx
 100d544:	mov    ecx,ebx
 100d546:	call   0x1003e40
 100d54b:	test   rax,rax
 100d54e:	je     0x100d577
 100d550:	mov    r8d,ebx
 100d553:	mov    rdx,rax
 100d556:	lea    rcx,[rip+0x3cfb]        # 0x1011258
 100d55d:	call   0x10046f0
 100d562:	jmp    0x100d577
 100d564:	mov    r8d,0xd
 100d56a:	lea    rcx,[rip+0x3ce7]        # 0x1011258
 100d571:	call   0x1004060
 100d576:	nop
 100d577:	lea    rcx,[rip+0x3c02]        # 0x1011180
 100d57e:	mov    rax,QWORD PTR [rip+0x3bfb]        # 0x1011180
 100d585:	call   QWORD PTR [rax+0x18]
 100d588:	add    rax,0x18
 100d58c:	mov    QWORD PTR [rip+0x3ccd],rax        # 0x1011260
 100d593:	lea    rdx,[rip+0xffffffffffff4776]        # 0x1001d10
 100d59a:	test   rdx,0xffffffffffff0000
 100d5a1:	jne    0x100d5c8
 100d5a3:	movzx  ebx,dx
 100d5a6:	xor    edx,edx
 100d5a8:	mov    ecx,ebx
 100d5aa:	call   0x1003e40
 100d5af:	test   rax,rax
 100d5b2:	je     0x100d5db
 100d5b4:	mov    r8d,ebx
 100d5b7:	mov    rdx,rax
 100d5ba:	lea    rcx,[rip+0x3c9f]        # 0x1011260
 100d5c1:	call   0x10046f0
 100d5c6:	jmp    0x100d5db
 100d5c8:	mov    r8d,0x6
 100d5ce:	lea    rcx,[rip+0x3c8b]        # 0x1011260
 100d5d5:	call   0x1004060
 100d5da:	nop
 100d5db:	lea    rcx,[rip+0x3b9e]        # 0x1011180
 100d5e2:	mov    rax,QWORD PTR [rip+0x3b97]        # 0x1011180
 100d5e9:	call   QWORD PTR [rax+0x18]
 100d5ec:	add    rax,0x18
 100d5f0:	mov    QWORD PTR [rip+0x3c71],rax        # 0x1011268
 100d5f7:	lea    rdx,[rip+0xffffffffffff4722]        # 0x1001d20
 100d5fe:	test   rdx,0xffffffffffff0000
 100d605:	jne    0x100d62c
 100d607:	movzx  ebx,dx
 100d60a:	xor    edx,edx
 100d60c:	mov    ecx,ebx
 100d60e:	call   0x1003e40
 100d613:	test   rax,rax
 100d616:	je     0x100d63f
 100d618:	mov    r8d,ebx
 100d61b:	mov    rdx,rax
 100d61e:	lea    rcx,[rip+0x3c43]        # 0x1011268
 100d625:	call   0x10046f0
 100d62a:	jmp    0x100d63f
 100d62c:	mov    r8d,0x10
 100d632:	lea    rcx,[rip+0x3c2f]        # 0x1011268
 100d639:	call   0x1004060
 100d63e:	nop
 100d63f:	lea    rcx,[rip+0x74a]        # 0x100dd90
 100d646:	add    rsp,0x30
 100d64a:	pop    rbx
 100d64b:	jmp    0x1006cf0
 100d650:	int3   
 100d651:	int3   
 100d652:	int3   
 100d653:	int3   
 100d654:	int3   
 100d655:	int3   
 100d656:	int3   
 100d657:	int3   
 100d658:	int3   
 100d659:	int3   
 100d65a:	int3   
 100d65b:	int3   
 100d65c:	int3   
 100d65d:	int3   
 100d65e:	int3   
 100d65f:	int3   
 100d660:	rex push rbx
 100d662:	sub    rsp,0x30
 100d666:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100d66f:	lea    rcx,[rip+0x3b0a]        # 0x1011180
 100d676:	mov    rax,QWORD PTR [rip+0x3b03]        # 0x1011180
 100d67d:	call   QWORD PTR [rax+0x18]
 100d680:	add    rax,0x18
 100d684:	mov    QWORD PTR [rip+0x3be5],rax        # 0x1011270
 100d68b:	lea    rdx,[rip+0xffffffffffff46b6]        # 0x1001d48
 100d692:	test   rdx,0xffffffffffff0000
 100d699:	jne    0x100d6c0
 100d69b:	movzx  ebx,dx
 100d69e:	xor    edx,edx
 100d6a0:	mov    ecx,ebx
 100d6a2:	call   0x1003e40
 100d6a7:	test   rax,rax
 100d6aa:	je     0x100d6d3
 100d6ac:	mov    r8d,ebx
 100d6af:	mov    rdx,rax
 100d6b2:	lea    rcx,[rip+0x3bb7]        # 0x1011270
 100d6b9:	call   0x10046f0
 100d6be:	jmp    0x100d6d3
 100d6c0:	mov    r8d,0x7
 100d6c6:	lea    rcx,[rip+0x3ba3]        # 0x1011270
 100d6cd:	call   0x1004060
 100d6d2:	nop
 100d6d3:	lea    rcx,[rip+0x3aa6]        # 0x1011180
 100d6da:	mov    rax,QWORD PTR [rip+0x3a9f]        # 0x1011180
 100d6e1:	call   QWORD PTR [rax+0x18]
 100d6e4:	add    rax,0x18
 100d6e8:	mov    QWORD PTR [rip+0x3b89],rax        # 0x1011278
 100d6ef:	lea    rdx,[rip+0xffffffffffff4662]        # 0x1001d58
 100d6f6:	test   rdx,0xffffffffffff0000
 100d6fd:	jne    0x100d724
 100d6ff:	movzx  ebx,dx
 100d702:	xor    edx,edx
 100d704:	mov    ecx,ebx
 100d706:	call   0x1003e40
 100d70b:	test   rax,rax
 100d70e:	je     0x100d737
 100d710:	mov    r8d,ebx
 100d713:	mov    rdx,rax
 100d716:	lea    rcx,[rip+0x3b5b]        # 0x1011278
 100d71d:	call   0x10046f0
 100d722:	jmp    0x100d737
 100d724:	mov    r8d,0x9
 100d72a:	lea    rcx,[rip+0x3b47]        # 0x1011278
 100d731:	call   0x1004060
 100d736:	nop
 100d737:	lea    rcx,[rip+0x3a42]        # 0x1011180
 100d73e:	mov    rax,QWORD PTR [rip+0x3a3b]        # 0x1011180
 100d745:	call   QWORD PTR [rax+0x18]
 100d748:	add    rax,0x18
 100d74c:	mov    QWORD PTR [rip+0x3b2d],rax        # 0x1011280
 100d753:	lea    rdx,[rip+0xffffffffffff4616]        # 0x1001d70
 100d75a:	test   rdx,0xffffffffffff0000
 100d761:	jne    0x100d788
 100d763:	movzx  ebx,dx
 100d766:	xor    edx,edx
 100d768:	mov    ecx,ebx
 100d76a:	call   0x1003e40
 100d76f:	test   rax,rax
 100d772:	je     0x100d79b
 100d774:	mov    r8d,ebx
 100d777:	mov    rdx,rax
 100d77a:	lea    rcx,[rip+0x3aff]        # 0x1011280
 100d781:	call   0x10046f0
 100d786:	jmp    0x100d79b
 100d788:	mov    r8d,0xc
 100d78e:	lea    rcx,[rip+0x3aeb]        # 0x1011280
 100d795:	call   0x1004060
 100d79a:	nop
 100d79b:	lea    rcx,[rip+0x39de]        # 0x1011180
 100d7a2:	mov    rax,QWORD PTR [rip+0x39d7]        # 0x1011180
 100d7a9:	call   QWORD PTR [rax+0x18]
 100d7ac:	add    rax,0x18
 100d7b0:	mov    QWORD PTR [rip+0x3ad1],rax        # 0x1011288
 100d7b7:	lea    rdx,[rip+0xffffffffffff45d2]        # 0x1001d90
 100d7be:	test   rdx,0xffffffffffff0000
 100d7c5:	jne    0x100d7ec
 100d7c7:	movzx  ebx,dx
 100d7ca:	xor    edx,edx
 100d7cc:	mov    ecx,ebx
 100d7ce:	call   0x1003e40
 100d7d3:	test   rax,rax
 100d7d6:	je     0x100d7ff
 100d7d8:	mov    r8d,ebx
 100d7db:	mov    rdx,rax
 100d7de:	lea    rcx,[rip+0x3aa3]        # 0x1011288
 100d7e5:	call   0x10046f0
 100d7ea:	jmp    0x100d7ff
 100d7ec:	mov    r8d,0xd
 100d7f2:	lea    rcx,[rip+0x3a8f]        # 0x1011288
 100d7f9:	call   0x1004060
 100d7fe:	nop
 100d7ff:	lea    rcx,[rip+0x397a]        # 0x1011180
 100d806:	mov    rax,QWORD PTR [rip+0x3973]        # 0x1011180
 100d80d:	call   QWORD PTR [rax+0x18]
 100d810:	add    rax,0x18
 100d814:	mov    QWORD PTR [rip+0x3a75],rax        # 0x1011290
 100d81b:	lea    rdx,[rip+0xffffffffffff458e]        # 0x1001db0
 100d822:	test   rdx,0xffffffffffff0000
 100d829:	jne    0x100d850
 100d82b:	movzx  ebx,dx
 100d82e:	xor    edx,edx
 100d830:	mov    ecx,ebx
 100d832:	call   0x1003e40
 100d837:	test   rax,rax
 100d83a:	je     0x100d863
 100d83c:	mov    r8d,ebx
 100d83f:	mov    rdx,rax
 100d842:	lea    rcx,[rip+0x3a47]        # 0x1011290
 100d849:	call   0x10046f0
 100d84e:	jmp    0x100d863
 100d850:	mov    r8d,0xa
 100d856:	lea    rcx,[rip+0x3a33]        # 0x1011290
 100d85d:	call   0x1004060
 100d862:	nop
 100d863:	lea    rcx,[rip+0x556]        # 0x100ddc0
 100d86a:	add    rsp,0x30
 100d86e:	pop    rbx
 100d86f:	jmp    0x1006cf0
 100d874:	int3   
 100d875:	int3   
 100d876:	int3   
 100d877:	int3   
 100d878:	int3   
 100d879:	int3   
 100d87a:	int3   
 100d87b:	int3   
 100d87c:	int3   
 100d87d:	int3   
 100d87e:	int3   
 100d87f:	int3   
 100d880:	rex push rbx
 100d882:	sub    rsp,0x30
 100d886:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100d88f:	lea    rcx,[rip+0x38ea]        # 0x1011180
 100d896:	mov    rax,QWORD PTR [rip+0x38e3]        # 0x1011180
 100d89d:	call   QWORD PTR [rax+0x18]
 100d8a0:	add    rax,0x18
 100d8a4:	mov    QWORD PTR [rip+0x39ed],rax        # 0x1011298
 100d8ab:	lea    rdx,[rip+0xffffffffffff4516]        # 0x1001dc8
 100d8b2:	test   rdx,0xffffffffffff0000
 100d8b9:	jne    0x100d8e0
 100d8bb:	movzx  ebx,dx
 100d8be:	xor    edx,edx
 100d8c0:	mov    ecx,ebx
 100d8c2:	call   0x1003e40
 100d8c7:	test   rax,rax
 100d8ca:	je     0x100d8f3
 100d8cc:	mov    r8d,ebx
 100d8cf:	mov    rdx,rax
 100d8d2:	lea    rcx,[rip+0x39bf]        # 0x1011298
 100d8d9:	call   0x10046f0
 100d8de:	jmp    0x100d8f3
 100d8e0:	mov    r8d,0x8
 100d8e6:	lea    rcx,[rip+0x39ab]        # 0x1011298
 100d8ed:	call   0x1004060
 100d8f2:	nop
 100d8f3:	lea    rcx,[rip+0x4f6]        # 0x100ddf0
 100d8fa:	add    rsp,0x30
 100d8fe:	pop    rbx
 100d8ff:	jmp    0x1006cf0
 100d904:	int3   
 100d905:	int3   
 100d906:	int3   
 100d907:	int3   
 100d908:	int3   
 100d909:	int3   
 100d90a:	int3   
 100d90b:	int3   
 100d90c:	int3   
 100d90d:	int3   
 100d90e:	int3   
 100d90f:	int3   
 100d910:	rex push rbx
 100d912:	sub    rsp,0x30
 100d916:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100d91f:	lea    rcx,[rip+0x385a]        # 0x1011180
 100d926:	mov    rax,QWORD PTR [rip+0x3853]        # 0x1011180
 100d92d:	call   QWORD PTR [rax+0x18]
 100d930:	add    rax,0x18
 100d934:	mov    QWORD PTR [rip+0x3965],rax        # 0x10112a0
 100d93b:	lea    rdx,[rip+0xffffffffffff449e]        # 0x1001de0
 100d942:	test   rdx,0xffffffffffff0000
 100d949:	jne    0x100d970
 100d94b:	movzx  ebx,dx
 100d94e:	xor    edx,edx
 100d950:	mov    ecx,ebx
 100d952:	call   0x1003e40
 100d957:	test   rax,rax
 100d95a:	je     0x100d983
 100d95c:	mov    r8d,ebx
 100d95f:	mov    rdx,rax
 100d962:	lea    rcx,[rip+0x3937]        # 0x10112a0
 100d969:	call   0x10046f0
 100d96e:	jmp    0x100d983
 100d970:	mov    r8d,0x23
 100d976:	lea    rcx,[rip+0x3923]        # 0x10112a0
 100d97d:	call   0x1004060
 100d982:	nop
 100d983:	lea    rcx,[rip+0x4a6]        # 0x100de30
 100d98a:	add    rsp,0x30
 100d98e:	pop    rbx
 100d98f:	jmp    0x1006cf0
 100d994:	int3   
 100d995:	int3   
 100d996:	int3   
 100d997:	int3   
 100d998:	int3   
 100d999:	int3   
 100d99a:	int3   
 100d99b:	int3   
 100d99c:	int3   
 100d99d:	int3   
 100d99e:	int3   
 100d99f:	int3   
 100d9a0:	rex push rbx
 100d9a2:	sub    rsp,0x30
 100d9a6:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100d9af:	lea    rcx,[rip+0x37ca]        # 0x1011180
 100d9b6:	mov    rax,QWORD PTR [rip+0x37c3]        # 0x1011180
 100d9bd:	call   QWORD PTR [rax+0x18]
 100d9c0:	add    rax,0x18
 100d9c4:	mov    QWORD PTR [rip+0x38dd],rax        # 0x10112a8
 100d9cb:	lea    rdx,[rip+0xffffffffffff4456]        # 0x1001e28
 100d9d2:	test   rdx,0xffffffffffff0000
 100d9d9:	jne    0x100da00
 100d9db:	movzx  ebx,dx
 100d9de:	xor    edx,edx
 100d9e0:	mov    ecx,ebx
 100d9e2:	call   0x1003e40
 100d9e7:	test   rax,rax
 100d9ea:	je     0x100da13
 100d9ec:	mov    r8d,ebx
 100d9ef:	mov    rdx,rax
 100d9f2:	lea    rcx,[rip+0x38af]        # 0x10112a8
 100d9f9:	call   0x10046f0
 100d9fe:	jmp    0x100da13
 100da00:	mov    r8d,0x1d
 100da06:	lea    rcx,[rip+0x389b]        # 0x10112a8
 100da0d:	call   0x1004060
 100da12:	nop
 100da13:	lea    rcx,[rip+0x456]        # 0x100de70
 100da1a:	add    rsp,0x30
 100da1e:	pop    rbx
 100da1f:	jmp    0x1006cf0
 100da24:	int3   
 100da25:	int3   
 100da26:	int3   
 100da27:	int3   
 100da28:	int3   
 100da29:	int3   
 100da2a:	int3   
 100da2b:	int3   
 100da2c:	int3   
 100da2d:	int3   
 100da2e:	int3   
 100da2f:	int3   
 100da30:	rex push rbx
 100da32:	sub    rsp,0x30
 100da36:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100da3f:	lea    rcx,[rip+0x373a]        # 0x1011180
 100da46:	mov    rax,QWORD PTR [rip+0x3733]        # 0x1011180
 100da4d:	call   QWORD PTR [rax+0x18]
 100da50:	add    rax,0x18
 100da54:	mov    QWORD PTR [rip+0x3855],rax        # 0x10112b0
 100da5b:	lea    rdx,[rip+0xffffffffffff4406]        # 0x1001e68
 100da62:	test   rdx,0xffffffffffff0000
 100da69:	jne    0x100da90
 100da6b:	movzx  ebx,dx
 100da6e:	xor    edx,edx
 100da70:	mov    ecx,ebx
 100da72:	call   0x1003e40
 100da77:	test   rax,rax
 100da7a:	je     0x100daa3
 100da7c:	mov    r8d,ebx
 100da7f:	mov    rdx,rax
 100da82:	lea    rcx,[rip+0x3827]        # 0x10112b0
 100da89:	call   0x10046f0
 100da8e:	jmp    0x100daa3
 100da90:	mov    r8d,0x11
 100da96:	lea    rcx,[rip+0x3813]        # 0x10112b0
 100da9d:	call   0x1004060
 100daa2:	nop
 100daa3:	lea    rcx,[rip+0x406]        # 0x100deb0
 100daaa:	add    rsp,0x30
 100daae:	pop    rbx
 100daaf:	jmp    0x1006cf0
 100dab4:	int3   
 100dab5:	int3   
 100dab6:	int3   
 100dab7:	int3   
 100dab8:	int3   
 100dab9:	int3   
 100daba:	int3   
 100dabb:	int3   
 100dabc:	int3   
 100dabd:	int3   
 100dabe:	int3   
 100dabf:	int3   
 100dac0:	rex push rbx
 100dac2:	sub    rsp,0x30
 100dac6:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100dacf:	lea    rcx,[rip+0x36aa]        # 0x1011180
 100dad6:	mov    rax,QWORD PTR [rip+0x36a3]        # 0x1011180
 100dadd:	call   QWORD PTR [rax+0x18]
 100dae0:	add    rax,0x18
 100dae4:	mov    QWORD PTR [rip+0x37cd],rax        # 0x10112b8
 100daeb:	lea    rdx,[rip+0xffffffffffff439e]        # 0x1001e90
 100daf2:	test   rdx,0xffffffffffff0000
 100daf9:	jne    0x100db20
 100dafb:	movzx  ebx,dx
 100dafe:	xor    edx,edx
 100db00:	mov    ecx,ebx
 100db02:	call   0x1003e40
 100db07:	test   rax,rax
 100db0a:	je     0x100db33
 100db0c:	mov    r8d,ebx
 100db0f:	mov    rdx,rax
 100db12:	lea    rcx,[rip+0x379f]        # 0x10112b8
 100db19:	call   0x10046f0
 100db1e:	jmp    0x100db33
 100db20:	mov    r8d,0x13
 100db26:	lea    rcx,[rip+0x378b]        # 0x10112b8
 100db2d:	call   0x1004060
 100db32:	nop
 100db33:	lea    rcx,[rip+0x3b6]        # 0x100def0
 100db3a:	add    rsp,0x30
 100db3e:	pop    rbx
 100db3f:	jmp    0x1006cf0
 100db44:	int3   
 100db45:	int3   
 100db46:	int3   
 100db47:	int3   
 100db48:	int3   
 100db49:	int3   
 100db4a:	int3   
 100db4b:	int3   
 100db4c:	int3   
 100db4d:	int3   
 100db4e:	int3   
 100db4f:	int3   
 100db50:	rex push rbx
 100db52:	sub    rsp,0x30
 100db56:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100db5f:	lea    rcx,[rip+0x361a]        # 0x1011180
 100db66:	mov    rax,QWORD PTR [rip+0x3613]        # 0x1011180
 100db6d:	call   QWORD PTR [rax+0x18]
 100db70:	add    rax,0x18
 100db74:	mov    QWORD PTR [rip+0x3745],rax        # 0x10112c0
 100db7b:	lea    rdx,[rip+0xffffffffffff4336]        # 0x1001eb8
 100db82:	test   rdx,0xffffffffffff0000
 100db89:	jne    0x100dbb0
 100db8b:	movzx  ebx,dx
 100db8e:	xor    edx,edx
 100db90:	mov    ecx,ebx
 100db92:	call   0x1003e40
 100db97:	test   rax,rax
 100db9a:	je     0x100dbc3
 100db9c:	mov    r8d,ebx
 100db9f:	mov    rdx,rax
 100dba2:	lea    rcx,[rip+0x3717]        # 0x10112c0
 100dba9:	call   0x10046f0
 100dbae:	jmp    0x100dbc3
 100dbb0:	mov    r8d,0xb
 100dbb6:	lea    rcx,[rip+0x3703]        # 0x10112c0
 100dbbd:	call   0x1004060
 100dbc2:	nop
 100dbc3:	lea    rcx,[rip+0x366]        # 0x100df30
 100dbca:	add    rsp,0x30
 100dbce:	pop    rbx
 100dbcf:	jmp    0x1006cf0
 100dbd4:	int3   
 100dbd5:	int3   
 100dbd6:	int3   
 100dbd7:	int3   
 100dbd8:	int3   
 100dbd9:	int3   
 100dbda:	int3   
 100dbdb:	int3   
 100dbdc:	int3   
 100dbdd:	int3   
 100dbde:	int3   
 100dbdf:	int3   
 100dbe0:	rex push rbx
 100dbe2:	sub    rsp,0x30
 100dbe6:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100dbef:	lea    rcx,[rip+0x358a]        # 0x1011180
 100dbf6:	mov    rax,QWORD PTR [rip+0x3583]        # 0x1011180
 100dbfd:	call   QWORD PTR [rax+0x18]
 100dc00:	add    rax,0x18
 100dc04:	mov    QWORD PTR [rip+0x36bd],rax        # 0x10112c8
 100dc0b:	lea    rdx,[rip+0xffffffffffff42be]        # 0x1001ed0
 100dc12:	test   rdx,0xffffffffffff0000
 100dc19:	jne    0x100dc40
 100dc1b:	movzx  ebx,dx
 100dc1e:	xor    edx,edx
 100dc20:	mov    ecx,ebx
 100dc22:	call   0x1003e40
 100dc27:	test   rax,rax
 100dc2a:	je     0x100dc53
 100dc2c:	mov    r8d,ebx
 100dc2f:	mov    rdx,rax
 100dc32:	lea    rcx,[rip+0x368f]        # 0x10112c8
 100dc39:	call   0x10046f0
 100dc3e:	jmp    0x100dc53
 100dc40:	mov    r8d,0x24
 100dc46:	lea    rcx,[rip+0x367b]        # 0x10112c8
 100dc4d:	call   0x1004060
 100dc52:	nop
 100dc53:	lea    rcx,[rip+0x316]        # 0x100df70
 100dc5a:	add    rsp,0x30
 100dc5e:	pop    rbx
 100dc5f:	jmp    0x1006cf0
 100dc64:	int3   
 100dc65:	int3   
 100dc66:	int3   
 100dc67:	int3   
 100dc68:	int3   
 100dc69:	int3   
 100dc6a:	int3   
 100dc6b:	int3   
 100dc6c:	rex push rbp
 100dc6e:	mov    rbp,rsp
 100dc71:	sub    rsp,0x20
 100dc75:	lea    rcx,[rip+0x3e54]        # 0x1011ad0
 100dc7c:	call   0x100728c
 100dc81:	lea    rcx,[rip+0x324]        # 0x100dfac
 100dc88:	add    rsp,0x20
 100dc8c:	pop    rbp
 100dc8d:	jmp    0x1006cf0
 100dc92:	int3   
 100dc93:	int3   
 100dc94:	int3   
 100dc95:	int3   
 100dc96:	int3   
 100dc97:	int3   
 100dc98:	rex push rbp
 100dc9a:	mov    rbp,rsp
 100dc9d:	sub    rsp,0x20
 100dca1:	call   QWORD PTR [rip+0xffffffffffff3559]        # 0x1001200
 100dca7:	lea    rcx,[rip+0xffffffffffff4c1a]        # 0x10028c8
 100dcae:	mov    BYTE PTR [rip+0x3e8b],0x0        # 0x1011b40
 100dcb5:	mov    QWORD PTR [rip+0x3e74],rcx        # 0x1011b30
 100dcbc:	lea    rcx,[rip+0x309]        # 0x100dfcc
 100dcc3:	mov    QWORD PTR [rip+0x3e6e],rax        # 0x1011b38
 100dcca:	add    rsp,0x20
 100dcce:	pop    rbp
 100dccf:	jmp    0x1006cf0
 100dcd4:	int3   
 100dcd5:	int3   
 100dcd6:	int3   
 100dcd7:	int3   
 100dcd8:	int3   
 100dcd9:	int3   
 100dcda:	int3   
 100dcdb:	int3   
 100dcdc:	rex push rbp
 100dcde:	mov    rbp,rsp
 100dce1:	sub    rsp,0x20
 100dce5:	lea    rcx,[rip+0x320]        # 0x100e00c
 100dcec:	add    rsp,0x20
 100dcf0:	pop    rbp
 100dcf1:	jmp    0x1006cf0
 100dcf6:	int3   
 100dcf7:	int3   
 100dcf8:	int3   
 100dcf9:	int3   
 100dcfa:	int3   
 100dcfb:	int3   
 100dcfc:	rex push rbp
 100dcfe:	mov    rbp,rsp
 100dd01:	sub    rsp,0x20
 100dd05:	lea    rcx,[rip+0x31c]        # 0x100e028
 100dd0c:	add    rsp,0x20
 100dd10:	pop    rbp
 100dd11:	jmp    0x1006cf0
 100dd16:	int3   
 100dd17:	int3   
 100dd18:	int3   
 100dd19:	int3   
 100dd1a:	int3   
 100dd1b:	int3   
 100dd1c:	int3   
 100dd1d:	int3   
 100dd1e:	int3   
 100dd1f:	int3   
 100dd20:	int3   
 100dd21:	int3   
 100dd22:	int3   
 100dd23:	int3   
 100dd24:	int3   
 100dd25:	int3   
 100dd26:	int3   
 100dd27:	int3   
 100dd28:	int3   
 100dd29:	int3   
 100dd2a:	int3   
 100dd2b:	int3   
 100dd2c:	int3   
 100dd2d:	int3   
 100dd2e:	int3   
 100dd2f:	int3   
 100dd30:	mov    edx,0x8
 100dd35:	lea    r9,[rip+0xffffffffffff67f4]        # 0x1004530
 100dd3c:	lea    rcx,[rip+0x349d]        # 0x10111e0
 100dd43:	lea    r8d,[rdx+0x5]
 100dd47:	jmp    0x1006918
 100dd4c:	int3   
 100dd4d:	int3   
 100dd4e:	int3   
 100dd4f:	int3   
 100dd50:	int3   
 100dd51:	int3   
 100dd52:	int3   
 100dd53:	int3   
 100dd54:	int3   
 100dd55:	int3   
 100dd56:	int3   
 100dd57:	int3   
 100dd58:	int3   
 100dd59:	int3   
 100dd5a:	int3   
 100dd5b:	int3   
 100dd5c:	int3   
 100dd5d:	int3   
 100dd5e:	int3   
 100dd5f:	int3   
 100dd60:	mov    edx,0x8
 100dd65:	lea    r9,[rip+0xffffffffffff67c4]        # 0x1004530
 100dd6c:	lea    rcx,[rip+0x34d5]        # 0x1011248
 100dd73:	lea    r8d,[rdx-0x7]
 100dd77:	jmp    0x1006918
 100dd7c:	int3   
 100dd7d:	int3   
 100dd7e:	int3   
 100dd7f:	int3   
 100dd80:	int3   
 100dd81:	int3   
 100dd82:	int3   
 100dd83:	int3   
 100dd84:	int3   
 100dd85:	int3   
 100dd86:	int3   
 100dd87:	int3   
 100dd88:	int3   
 100dd89:	int3   
 100dd8a:	int3   
 100dd8b:	int3   
 100dd8c:	int3   
 100dd8d:	int3   
 100dd8e:	int3   
 100dd8f:	int3   
 100dd90:	mov    edx,0x8
 100dd95:	lea    r9,[rip+0xffffffffffff6794]        # 0x1004530
 100dd9c:	lea    rcx,[rip+0x34ad]        # 0x1011250
 100dda3:	lea    r8d,[rdx-0x4]
 100dda7:	jmp    0x1006918
 100ddac:	int3   
 100ddad:	int3   
 100ddae:	int3   
 100ddaf:	int3   
 100ddb0:	int3   
 100ddb1:	int3   
 100ddb2:	int3   
 100ddb3:	int3   
 100ddb4:	int3   
 100ddb5:	int3   
 100ddb6:	int3   
 100ddb7:	int3   
 100ddb8:	int3   
 100ddb9:	int3   
 100ddba:	int3   
 100ddbb:	int3   
 100ddbc:	int3   
 100ddbd:	int3   
 100ddbe:	int3   
 100ddbf:	int3   
 100ddc0:	mov    edx,0x8
 100ddc5:	lea    r9,[rip+0xffffffffffff6764]        # 0x1004530
 100ddcc:	lea    rcx,[rip+0x349d]        # 0x1011270
 100ddd3:	lea    r8d,[rdx-0x3]
 100ddd7:	jmp    0x1006918
 100dddc:	int3   
 100dddd:	int3   
 100ddde:	int3   
 100dddf:	int3   
 100dde0:	int3   
 100dde1:	int3   
 100dde2:	int3   
 100dde3:	int3   
 100dde4:	int3   
 100dde5:	int3   
 100dde6:	int3   
 100dde7:	int3   
 100dde8:	int3   
 100dde9:	int3   
 100ddea:	int3   
 100ddeb:	int3   
 100ddec:	int3   
 100dded:	int3   
 100ddee:	int3   
 100ddef:	int3   
 100ddf0:	sub    rsp,0x38
 100ddf4:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100ddfd:	mov    rdx,QWORD PTR [rip+0x3494]        # 0x1011298
 100de04:	add    rdx,0xffffffffffffffe8
 100de08:	or     eax,0xffffffff
 100de0b:	lock xadd DWORD PTR [rdx+0x10],eax
 100de10:	dec    eax
 100de12:	test   eax,eax
 100de14:	jg     0x100de1f
 100de16:	mov    rcx,QWORD PTR [rdx]
 100de19:	mov    rax,QWORD PTR [rcx]
 100de1c:	call   QWORD PTR [rax+0x8]
 100de1f:	add    rsp,0x38
 100de23:	ret    
 100de24:	int3   
 100de25:	int3   
 100de26:	int3   
 100de27:	int3   
 100de28:	int3   
 100de29:	int3   
 100de2a:	int3   
 100de2b:	int3   
 100de2c:	int3   
 100de2d:	int3   
 100de2e:	int3   
 100de2f:	int3   
 100de30:	sub    rsp,0x38
 100de34:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100de3d:	mov    rdx,QWORD PTR [rip+0x345c]        # 0x10112a0
 100de44:	add    rdx,0xffffffffffffffe8
 100de48:	or     eax,0xffffffff
 100de4b:	lock xadd DWORD PTR [rdx+0x10],eax
 100de50:	dec    eax
 100de52:	test   eax,eax
 100de54:	jg     0x100de5f
 100de56:	mov    rcx,QWORD PTR [rdx]
 100de59:	mov    rax,QWORD PTR [rcx]
 100de5c:	call   QWORD PTR [rax+0x8]
 100de5f:	add    rsp,0x38
 100de63:	ret    
 100de64:	int3   
 100de65:	int3   
 100de66:	int3   
 100de67:	int3   
 100de68:	int3   
 100de69:	int3   
 100de6a:	int3   
 100de6b:	int3   
 100de6c:	int3   
 100de6d:	int3   
 100de6e:	int3   
 100de6f:	int3   
 100de70:	sub    rsp,0x38
 100de74:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100de7d:	mov    rdx,QWORD PTR [rip+0x3424]        # 0x10112a8
 100de84:	add    rdx,0xffffffffffffffe8
 100de88:	or     eax,0xffffffff
 100de8b:	lock xadd DWORD PTR [rdx+0x10],eax
 100de90:	dec    eax
 100de92:	test   eax,eax
 100de94:	jg     0x100de9f
 100de96:	mov    rcx,QWORD PTR [rdx]
 100de99:	mov    rax,QWORD PTR [rcx]
 100de9c:	call   QWORD PTR [rax+0x8]
 100de9f:	add    rsp,0x38
 100dea3:	ret    
 100dea4:	int3   
 100dea5:	int3   
 100dea6:	int3   
 100dea7:	int3   
 100dea8:	int3   
 100dea9:	int3   
 100deaa:	int3   
 100deab:	int3   
 100deac:	int3   
 100dead:	int3   
 100deae:	int3   
 100deaf:	int3   
 100deb0:	sub    rsp,0x38
 100deb4:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100debd:	mov    rdx,QWORD PTR [rip+0x33ec]        # 0x10112b0
 100dec4:	add    rdx,0xffffffffffffffe8
 100dec8:	or     eax,0xffffffff
 100decb:	lock xadd DWORD PTR [rdx+0x10],eax
 100ded0:	dec    eax
 100ded2:	test   eax,eax
 100ded4:	jg     0x100dedf
 100ded6:	mov    rcx,QWORD PTR [rdx]
 100ded9:	mov    rax,QWORD PTR [rcx]
 100dedc:	call   QWORD PTR [rax+0x8]
 100dedf:	add    rsp,0x38
 100dee3:	ret    
 100dee4:	int3   
 100dee5:	int3   
 100dee6:	int3   
 100dee7:	int3   
 100dee8:	int3   
 100dee9:	int3   
 100deea:	int3   
 100deeb:	int3   
 100deec:	int3   
 100deed:	int3   
 100deee:	int3   
 100deef:	int3   
 100def0:	sub    rsp,0x38
 100def4:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100defd:	mov    rdx,QWORD PTR [rip+0x33b4]        # 0x10112b8
 100df04:	add    rdx,0xffffffffffffffe8
 100df08:	or     eax,0xffffffff
 100df0b:	lock xadd DWORD PTR [rdx+0x10],eax
 100df10:	dec    eax
 100df12:	test   eax,eax
 100df14:	jg     0x100df1f
 100df16:	mov    rcx,QWORD PTR [rdx]
 100df19:	mov    rax,QWORD PTR [rcx]
 100df1c:	call   QWORD PTR [rax+0x8]
 100df1f:	add    rsp,0x38
 100df23:	ret    
 100df24:	int3   
 100df25:	int3   
 100df26:	int3   
 100df27:	int3   
 100df28:	int3   
 100df29:	int3   
 100df2a:	int3   
 100df2b:	int3   
 100df2c:	int3   
 100df2d:	int3   
 100df2e:	int3   
 100df2f:	int3   
 100df30:	sub    rsp,0x38
 100df34:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100df3d:	mov    rdx,QWORD PTR [rip+0x337c]        # 0x10112c0
 100df44:	add    rdx,0xffffffffffffffe8
 100df48:	or     eax,0xffffffff
 100df4b:	lock xadd DWORD PTR [rdx+0x10],eax
 100df50:	dec    eax
 100df52:	test   eax,eax
 100df54:	jg     0x100df5f
 100df56:	mov    rcx,QWORD PTR [rdx]
 100df59:	mov    rax,QWORD PTR [rcx]
 100df5c:	call   QWORD PTR [rax+0x8]
 100df5f:	add    rsp,0x38
 100df63:	ret    
 100df64:	int3   
 100df65:	int3   
 100df66:	int3   
 100df67:	int3   
 100df68:	int3   
 100df69:	int3   
 100df6a:	int3   
 100df6b:	int3   
 100df6c:	int3   
 100df6d:	int3   
 100df6e:	int3   
 100df6f:	int3   
 100df70:	sub    rsp,0x38
 100df74:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100df7d:	mov    rdx,QWORD PTR [rip+0x3344]        # 0x10112c8
 100df84:	add    rdx,0xffffffffffffffe8
 100df88:	or     eax,0xffffffff
 100df8b:	lock xadd DWORD PTR [rdx+0x10],eax
 100df90:	dec    eax
 100df92:	test   eax,eax
 100df94:	jg     0x100df9f
 100df96:	mov    rcx,QWORD PTR [rdx]
 100df99:	mov    rax,QWORD PTR [rcx]
 100df9c:	call   QWORD PTR [rax+0x8]
 100df9f:	add    rsp,0x38
 100dfa3:	ret    
 100dfa4:	int3   
 100dfa5:	int3   
 100dfa6:	int3   
 100dfa7:	int3   
 100dfa8:	int3   
 100dfa9:	int3   
 100dfaa:	int3   
 100dfab:	int3   
 100dfac:	rex push rbp
 100dfae:	mov    rbp,rsp
 100dfb1:	sub    rsp,0x20
 100dfb5:	lea    rcx,[rip+0x3b14]        # 0x1011ad0
 100dfbc:	add    rsp,0x20
 100dfc0:	pop    rbp
 100dfc1:	jmp    0x10071b0
 100dfc6:	int3   
 100dfc7:	int3   
 100dfc8:	int3   
 100dfc9:	int3   
 100dfca:	int3   
 100dfcb:	int3   
 100dfcc:	rex push rbp
 100dfce:	mov    rbp,rsp
 100dfd1:	sub    rsp,0x20
 100dfd5:	cmp    BYTE PTR [rip+0x3b64],0x0        # 0x1011b40
 100dfdc:	lea    rax,[rip+0xffffffffffff48e5]        # 0x10028c8
 100dfe3:	mov    QWORD PTR [rip+0x3b46],rax        # 0x1011b30
 100dfea:	je     0x100dffe
 100dfec:	mov    rcx,QWORD PTR [rip+0x3b45]        # 0x1011b38
 100dff3:	test   rcx,rcx
 100dff6:	je     0x100dffe
 100dff8:	call   QWORD PTR [rip+0xffffffffffff322a]        # 0x1001228
 100dffe:	add    rsp,0x20
 100e002:	pop    rbp
 100e003:	ret    
 100e004:	int3   
 100e005:	int3   
 100e006:	int3   
 100e007:	int3   
 100e008:	int3   
 100e009:	int3   
 100e00a:	int3   
 100e00b:	int3   
 100e00c:	rex push rbp
 100e00e:	mov    rbp,rsp
 100e011:	lea    rax,[rip+0xffffffffffff48d8]        # 0x10028f0
 100e018:	mov    QWORD PTR [rip+0x3161],rax        # 0x1011180
 100e01f:	pop    rbp
 100e020:	ret    
 100e021:	int3   
 100e022:	int3   
 100e023:	int3   
 100e024:	int3   
 100e025:	int3   
 100e026:	int3   
 100e027:	int3   
 100e028:	rex push rbp
 100e02a:	mov    rbp,rsp
 100e02d:	sub    rsp,0x20
 100e031:	lea    rcx,[rip+0x3b40]        # 0x1011b78
 100e038:	add    rsp,0x20
 100e03c:	pop    rbp
 100e03d:	jmp    0x100c2c0
 100e042:	int3   
 100e043:	int3   
 100e044:	int3   
 100e045:	int3   
 100e046:	int3   
 100e047:	int3   
 100e048:	add    DWORD PTR [rcx+rax*1],eax
 100e04b:	add    BYTE PTR [rdx+rax*2],al
 100e04e:	add    BYTE PTR [rax],al
 100e050:	add    DWORD PTR [rbx],edi
 100e052:	or     BYTE PTR [rax],al
 100e054:	cmp    esi,DWORD PTR [rsi+rax*1]
 100e057:	add    BYTE PTR [rdi],cl
 100e059:	or     BYTE PTR fs:[rax],al
 100e05c:	andps  xmm0,XMMWORD PTR [rdi]
 100e05f:	add    BYTE PTR [rdi],cl
 100e061:	xor    cl,BYTE PTR [rbx]
 100e063:	jo     0x100e066
 100e065:	sbb    cl,BYTE PTR [rdx]
 100e067:	add    BYTE PTR [rdx],bl
 100e069:	je     0x100e074
 100e06b:	add    BYTE PTR [rdx],bl
 100e06d:	or     BYTE PTR fs:[rax],al
 100e070:	sbb    dl,BYTE PTR [rdi+rax*1+0x0]
 100e074:	sbb    dh,BYTE PTR [rsi+rax*1]
 100e077:	add    BYTE PTR [rdx],bl
 100e079:	xor    dl,BYTE PTR [rsi]
 100e07b:	loopne 0x100e07e
 100e07d:	(bad)  
 100e07e:	add    al,BYTE PTR [rax]
 100e080:	(bad)  
 100e081:	xor    al,BYTE PTR [rdx]
 100e083:	xor    BYTE PTR [rcx],al
 100e085:	add    al,0x1
 100e087:	add    BYTE PTR [rdx+rax*2],al
 100e08a:	add    BYTE PTR [rax],al
 100e08c:	add    DWORD PTR [rdx],ecx
 100e08e:	add    al,0x0
 100e090:	or     dh,BYTE PTR [rsi+rax*1]
 100e093:	add    BYTE PTR [rdx],cl
 100e095:	xor    al,BYTE PTR [rsi]
 100e097:	jo     0x100e09a
 100e099:	or     al,BYTE PTR [rax+rax*1]
 100e09c:	or     dh,BYTE PTR [rsi+rax*1]
 100e09f:	add    BYTE PTR [rdx],cl
 100e0a1:	xor    al,BYTE PTR [rsi]
 100e0a3:	jo     0x100e0a6
 100e0a5:	clts   
 100e0a7:	add    BYTE PTR [rdi],cl
 100e0a9:	push   rsp
 100e0aa:	or     DWORD PTR [rax],eax
 100e0ac:	sysenter 
 100e0ae:	or     BYTE PTR [rax],al
 100e0b0:	rdmsr  
 100e0b2:	or     esi,DWORD PTR [rax+0x21]
 100e0b5:	adc    BYTE PTR [rax+rax*1],al
 100e0b8:	adc    ah,ah
 100e0ba:	(bad)  
 100e0bb:	add    BYTE PTR [rip+0x60000664],al        # 0x6100e725
 100e0c1:	add    BYTE PTR [rax],al
 100e0c4:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 100e0c5:	add    BYTE PTR [rax],al
 100e0c8:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 100e0c9:	loopne 0x100e0cb
 100e0cb:	add    BYTE PTR [rcx],ah
 100e0cd:	add    BYTE PTR [rax+rax*1],al
 100e0d0:	add    ah,ah
 100e0d2:	(bad)  
 100e0d3:	add    BYTE PTR [rax],al
 100e0d5:	fs (bad) 
 100e0d7:	add    BYTE PTR [rax+0x40],ah
 100e0da:	add    BYTE PTR [rax],al
 100e0dc:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 100e0dd:	add    BYTE PTR [rax],al
 100e0e0:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 100e0e1:	loopne 0x100e0e3
 100e0e3:	add    BYTE PTR [rcx],al
 100e0e5:	sbb    DWORD PTR [rdx],ecx
 100e0e7:	add    BYTE PTR [rcx],bl
 100e0e9:	or     eax,DWORD PTR fs:[rax]
 100e0ec:	sbb    DWORD PTR [rdx+rcx*1+0x0],edx
 100e0f0:	sbb    DWORD PTR [rcx+rcx*1],esi
 100e0f3:	add    BYTE PTR [rcx],bl
 100e0f5:	xor    dl,BYTE PTR [rip+0x11e013f0]        # 0x12e0f4eb
 100e0fb:	shl    BYTE PTR [rcx],0x5
 100e0fe:	add    al,BYTE PTR [rax]
 100e100:	add    eax,0x60000874
 100e105:	add    BYTE PTR [r8],al
 100e108:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 100e109:	add    BYTE PTR [r8],al
 100e10c:	in     al,0xe0
 100e10e:	add    BYTE PTR [rax],al
 100e110:	and    DWORD PTR [rax],eax
 100e112:	add    BYTE PTR [rax],al
 100e114:	(bad)  
 100e115:	add    BYTE PTR [r8],al
 100e118:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 100e119:	add    BYTE PTR [r8],al
 100e11c:	in     al,0xe0
 100e11e:	add    BYTE PTR [rax],al
 100e120:	add    DWORD PTR [rcx+rax*1],eax
 100e123:	add    BYTE PTR [rdx+rax*2],al
 100e126:	add    BYTE PTR [rax],al
 100e128:	add    DWORD PTR [rdx],ebx
 100e12a:	or     al,BYTE PTR [rax]
 100e12c:	sbb    dh,BYTE PTR [rcx+rcx*1+0x0]
 100e130:	sbb    ah,BYTE PTR [rax+rcx*1+0x0]
 100e134:	sbb    dl,BYTE PTR [rdi+rax*1+0x0]
 100e138:	sbb    dh,BYTE PTR [rsi+rax*1]
 100e13b:	add    BYTE PTR [rdx],bl
 100e13d:	xor    dl,BYTE PTR [rsi]
 100e13f:	loopne 0x100e142
 100e141:	add    al,0x1
 100e143:	add    BYTE PTR [rdx+rax*2],al
 100e146:	add    BYTE PTR [rax],al
 100e148:	add    DWORD PTR [rsi],eax
 100e14a:	add    al,BYTE PTR [rax]
 100e14c:	(bad)  
 100e14d:	xor    al,BYTE PTR [rdx]
 100e14f:	xor    BYTE PTR [rcx],al
 100e151:	or     al,BYTE PTR [rax+rax*1]
 100e154:	or     dh,BYTE PTR [rsi+rax*1]
 100e157:	add    BYTE PTR [rdx],cl
 100e159:	xor    al,BYTE PTR [rsi]
 100e15b:	jo     0x100e16e
 100e15d:	sbb    BYTE PTR [rax+rax*1],al
 100e160:	sbb    BYTE PTR [rcx+rcx*1],dh
 100e163:	add    BYTE PTR [rdx],cl
 100e165:	push   rdx
 100e166:	(bad)  
 100e167:	jo     0x100e159
 100e169:	push   0x0
 100e16b:	add    al,ah
 100e16d:	adc    eax,0xffff0000
 100e172:	(bad)  
 100e173:	inc    DWORD PTR [rax]
 100e175:	(bad)
 100e178:	add    BYTE PTR [rax+rax*1+0x0],0xff
 100e17d:	(bad)  
 100e17e:	(bad)  
 100e17f:	push   QWORD PTR [rsi+0x44]
 100e185:	add    BYTE PTR [rax],al
 100e187:	add    ah,ah
 100e189:	add    BYTE PTR [rax],r8b
 100e18c:	(bad)  
 100e18d:	(bad)  
 100e18e:	(bad)  
 100e18f:	(bad)  
 100e190:	call   0x100e1d9
 100e195:	add    BYTE PTR [rax],al
 100e197:	add    BYTE PTR [rip+0xffffffffff000045],cl        # 0xe1e2
 100e19d:	(bad)  
 100e19e:	(bad)  
 100e19f:	call   QWORD PTR [rcx]
 100e1a1:	adc    al,BYTE PTR [rcx]
 100e1a3:	add    BYTE PTR [rcx],cl
 100e1a5:	(bad)  
 100e1a6:	add    BYTE PTR [rax],al
 100e1a8:	lock push 0x0
 100e1ab:	add    BYTE PTR [rax],cl
 100e1ad:	(bad)  
 100e1ae:	add    BYTE PTR [rax],al
 100e1b0:	(bad)  
 100e1b1:	(bad)  
 100e1b2:	(bad)  
 100e1b3:	push   QWORD PTR [rax-0x3b]
 100e1b6:	add    BYTE PTR [rax],al
 100e1b8:	xor    BYTE PTR [rbp+0x0],al
 100e1bb:	add    bh,bh
 100e1bd:	(bad)  
 100e1be:	(bad)  
 100e1bf:	inc    DWORD PTR [rcx]
 100e1c1:	or     al,BYTE PTR [rax+rax*1]
 100e1c4:	or     dl,BYTE PTR [rax+rcx*1+0x0]
 100e1c8:	or     dh,BYTE PTR [rdx]
 100e1ca:	(bad)  
 100e1cb:	(bad)  
 100e1cc:	and    DWORD PTR [rdx],ecx
 100e1ce:	add    al,0x0
 100e1d0:	or     dh,BYTE PTR [rdi+rax*1+0x0]
 100e1d4:	add    eax,0x70000634
 100e1d9:	add    BYTE PTR [r8],r8b
 100e1dc:	mov    eax,DWORD PTR [rbp+0x0]
 100e1df:	add    al,al
 100e1e1:	loope  0x100e1e3
 100e1e3:	add    BYTE PTR [rcx],ah
 100e1e5:	add    BYTE PTR [rax],al
 100e1e7:	add    BYTE PTR [rax+0x45],dh
 100e1ea:	add    BYTE PTR [rax],al
 100e1ec:	mov    eax,DWORD PTR [rbp+0x0]
 100e1ef:	add    al,al
 100e1f1:	loope  0x100e1f3
 100e1f3:	add    BYTE PTR [rcx],al
 100e1f5:	adc    eax,DWORD PTR [rcx]
 100e1f7:	add    BYTE PTR [rbx],dl
 100e1f9:	rex.X add BYTE PTR [rax],al
 100e1fc:	add    DWORD PTR [rbx],esi
 100e1fe:	or     BYTE PTR [rax],al
 100e200:	xor    esi,DWORD PTR [rsi+rax*1]
 100e203:	add    BYTE PTR [rdi],cl
 100e205:	or     BYTE PTR fs:[rax],al
 100e208:	andps  xmm0,XMMWORD PTR [rdi]
 100e20b:	add    BYTE PTR [rdi],cl
 100e20d:	xor    cl,BYTE PTR [rbx]
 100e20f:	jo     0x100e212
 100e211:	clts   
 100e213:	add    BYTE PTR [rdi],cl
 100e215:	fs (bad) 
 100e217:	add    BYTE PTR [rdi],cl
 100e219:	xor    al,0x6
 100e21b:	add    BYTE PTR [rdi],cl
 100e21d:	xor    cl,BYTE PTR [rbx]
 100e21f:	jo     0x100e232
 100e221:	and    ecx,DWORD PTR [rax]
 100e223:	add    BYTE PTR [rbx],ah
 100e225:	je     0x100e234
 100e227:	add    BYTE PTR [rsi],bl
 100e229:	fs or  al,0x0
 100e22c:	sbb    DWORD PTR [rbx+rcx*1],esi
 100e22f:	add    BYTE PTR [rbx],cl
 100e231:	jb     0x100e23a
 100e233:	loopne 0x100e225
 100e235:	push   0x0
 100e237:	add    BYTE PTR [rax],dh
 100e239:	(bad)  
 100e23a:	add    BYTE PTR [rax],al
 100e23c:	(bad)  
 100e23d:	(bad)  
 100e23e:	(bad)  
 100e23f:	push   rax
 100e241:	(bad)
 100e244:	add    BYTE PTR [rax],al
 100e246:	add    BYTE PTR [rax],al
 100e248:	loopne 0x100e20f
 100e24a:	add    BYTE PTR [rax],al
 100e24c:	xor    BYTE PTR [rax+0x0],cl
 100e24f:	add    bh,bh
 100e251:	(bad)  
 100e252:	(bad)  
 100e253:	call   FWORD PTR [rax+rcx*2+0x0]
 100e257:	add    BYTE PTR [rax],al
 100e259:	add    BYTE PTR [rax],al
 100e25b:	add    BYTE PTR [rcx],al
 100e25d:	(bad)  
 100e25e:	add    al,BYTE PTR [rax]
 100e260:	(bad)  
 100e261:	xor    al,BYTE PTR [rdx]
 100e263:	push   rax
 100e264:	adc    DWORD PTR [rax],ebx
 100e266:	add    al,0x0
 100e268:	sbb    BYTE PTR [rdx+rcx*1],dh
 100e26b:	add    BYTE PTR [rdx],cl
 100e26d:	push   rdx
 100e26e:	(bad)  
 100e26f:	jo     0x100e261
 100e271:	push   0x0
 100e273:	add    BYTE PTR [rax+0x16],bl
 100e276:	add    BYTE PTR [rax],al
 100e278:	(bad)  
 100e279:	(bad)  
 100e27a:	(bad)  
 100e27b:	jmp    QWORD PTR [rax]
 100e27d:	(bad)
 100e280:	(bad)  
 100e281:	(bad)  
 100e282:	(bad)  
 100e283:	push   QWORD PTR [rax]
 100e285:	(bad)
 100e288:	add    DWORD PTR [rax],eax
 100e28a:	add    BYTE PTR [rax],al
 100e28c:	(bad)
 100e290:	add    DWORD PTR [rax],eax
 100e292:	add    BYTE PTR [rax],al
 100e294:	push   rax
 100e295:	(bad)
 100e298:	adc    BYTE PTR [rcx+0x0],cl
 100e29b:	add    bh,bh
 100e29d:	(bad)  
 100e29e:	(bad)  
 100e29f:	dec    DWORD PTR [rcx+rcx*2+0x0]
 100e2a3:	add    BYTE PTR [rcx],al
 100e2a5:	add    BYTE PTR [rax],al
 100e2a7:	add    BYTE PTR [rbp+0x49],ch
 100e2aa:	add    BYTE PTR [rax],al
 100e2ac:	add    eax,DWORD PTR [rax]
 100e2ae:	add    BYTE PTR [rax],al
 100e2b0:	xchg   esi,eax
 100e2b1:	rex.WB add BYTE PTR [r8],al
 100e2b4:	(bad)  
 100e2b5:	(bad)  
 100e2b6:	(bad)  
 100e2b7:	call   QWORD PTR [rcx]
 100e2b9:	sbb    BYTE PTR [rax+rax*1],al
 100e2bc:	sbb    BYTE PTR [rdx+rcx*1],dh
 100e2bf:	add    BYTE PTR [rdx],cl
 100e2c1:	push   rdx
 100e2c2:	(bad)  
 100e2c3:	jo     0x100e2b5
 100e2c5:	push   0x0
 100e2c7:	add    BYTE PTR [rax-0xffffea],al
 100e2cd:	(bad)  
 100e2ce:	(bad)  
 100e2cf:	call   QWORD PTR [rax+0xc5]
 100e2d5:	add    BYTE PTR [rax],al
 100e2d7:	add    BYTE PTR [rax+0xc5],ah
 100e2dd:	add    BYTE PTR [rax],al
 100e2df:	add    BYTE PTR [rax-0xffff3b],dh
 100e2e5:	(bad)  
 100e2e6:	(bad)  
 100e2e7:	inc    eax
 100e2e9:	(bad)
 100e2ec:	mov    al,0x49
 100e2ee:	add    BYTE PTR [rax],al
 100e2f0:	(bad)  
 100e2f1:	(bad)  
 100e2f2:	(bad)  
 100e2f3:	dec    ebx
 100e2f5:	rex.WB add BYTE PTR [r8],al
 100e2f8:	add    BYTE PTR [rax],al
 100e2fa:	add    BYTE PTR [rax],al
 100e2fc:	cmc    
 100e2fd:	rex.WB add BYTE PTR [r8],al
 100e300:	(bad)  
 100e301:	(bad)  
 100e302:	(bad)  
 100e303:	call   QWORD PTR [rcx]
 100e305:	adc    al,BYTE PTR [rax+rax*1]
 100e308:	or     dh,BYTE PTR [rdx+0x60057006]
 100e30e:	add    al,0x30
 100e310:	lock push 0x0
 100e313:	add    BYTE PTR [rax-0xffffea],ch
 100e319:	(bad)  
 100e31a:	(bad)  
 100e31b:	jmp    QWORD PTR [rax]
 100e31d:	retf   
 100e31e:	add    BYTE PTR [rax],al
 100e320:	add    BYTE PTR [rax],al
 100e322:	add    BYTE PTR [rax],al
 100e324:	xor    bl,cl
 100e326:	add    BYTE PTR [rax],al
 100e328:	add    BYTE PTR [rax],al
 100e32a:	add    BYTE PTR [rax],al
 100e32c:	rex retf 
 100e32e:	add    BYTE PTR [rax],al
 100e330:	xor    BYTE PTR [rdx+0x0],cl
 100e333:	add    bh,bh
 100e335:	(bad)  
 100e336:	(bad)  
 100e337:	push   QWORD PTR [rsi+0x4a]
 100e33a:	add    BYTE PTR [rax],al
 100e33c:	add    BYTE PTR [rax],al
 100e33e:	add    BYTE PTR [rax],al
 100e340:	rex.WXB add BYTE PTR ss:[r8],al
 100e344:	(bad)  
 100e345:	(bad)  
 100e346:	(bad)  
 100e347:	(bad)  
 100e348:	cmp    ecx,DWORD PTR [rbx+0x0]
 100e34b:	add    BYTE PTR [rax],al
 100e34d:	add    BYTE PTR [rax],al
 100e34f:	add    BYTE PTR [rsi+0x4b],bh
 100e352:	add    BYTE PTR [rax],al
 100e354:	(bad)  
 100e355:	(bad)  
 100e356:	(bad)  
 100e357:	inc    DWORD PTR [rbx+0x4b]
 100e35d:	add    BYTE PTR [rax],al
 100e35f:	add    BYTE PTR [rbx+rcx*2+0x10000],dl
 100e366:	add    BYTE PTR [rax],al
 100e368:	stos   DWORD PTR es:[rdi],eax
 100e369:	rex.WXB add BYTE PTR [r8],al
 100e36c:	add    BYTE PTR [rax],al
 100e36e:	add    BYTE PTR [rax],al
 100e370:	(bad)  
 100e371:	rex.WXB add BYTE PTR [r8],al
 100e374:	(bad)  
 100e375:	(bad)  
 100e376:	(bad)  
 100e377:	call   rdi
 100e379:	rex.WXB add BYTE PTR [r8],al
 100e37c:	add    BYTE PTR [rax],al
 100e37e:	add    BYTE PTR [rax],al
 100e380:	add    eax,0xff00004c
 100e385:	(bad)  
 100e386:	(bad)  
 100e387:	call   QWORD PTR [rcx]
 100e389:	sbb    cl,BYTE PTR [rax]
 100e38b:	add    BYTE PTR [rdx],bl
 100e38d:	xor    al,0x14
 100e38f:	add    BYTE PTR [rsi],cl
 100e391:	ror    BYTE PTR [rdx],cl
 100e393:	lock or al,ah
 100e396:	(bad)  
 100e397:	jo     0x100e39e
 100e399:	(bad)  
 100e39a:	add    al,0x50
 100e39c:	lock push 0x0
 100e39f:	add    al,dl
 100e3a1:	(bad)  
 100e3a2:	add    BYTE PTR [rax],al
 100e3a4:	(bad)  
 100e3a5:	(bad)  
 100e3a6:	(bad)  
 100e3a7:	jmp    QWORD PTR [rax-0x35]
 100e3aa:	add    BYTE PTR [rax],al
 100e3ac:	add    BYTE PTR [rax],al
 100e3ae:	add    BYTE PTR [rax],al
 100e3b0:	jo     0x100e37d
 100e3b2:	add    BYTE PTR [rax],al
 100e3b4:	and    BYTE PTR [rax+rax*1+0x0],cl
 100e3b8:	(bad)  
 100e3b9:	(bad)  
 100e3ba:	(bad)  
 100e3bb:	jmp    QWORD PTR [rdi+0x4c]
 100e3be:	add    BYTE PTR [rax],al
 100e3c0:	add    BYTE PTR [rax],al
 100e3c2:	add    BYTE PTR [rax],al
 100e3c4:	jne    0x100e412
 100e3c6:	add    BYTE PTR [rax],al
 100e3c8:	add    DWORD PTR [rax],eax
 100e3ca:	add    BYTE PTR [rax],al
 100e3cc:	lods   eax,DWORD PTR ds:[rsi]
 100e3cd:	rex.WR add BYTE PTR [rax],r8b
 100e3d0:	(bad)  
 100e3d1:	(bad)  
 100e3d2:	(bad)  
 100e3d3:	inc    ecx
 100e3d5:	rex.WR add BYTE PTR [rax],r8b
 100e3d8:	add    DWORD PTR [rax],eax
 100e3da:	add    BYTE PTR [rax],al
 100e3dc:	add    eax,0x50
 100e3e1:	add    BYTE PTR [rax],al
 100e3e3:	add    BYTE PTR [rbx],bl
 100e3e5:	push   rax
 100e3e6:	add    BYTE PTR [rax],al
 100e3e8:	(bad)  
 100e3e9:	(bad)  
 100e3ea:	(bad)  
 100e3eb:	call   QWORD PTR [rcx]
 100e3ed:	and    ecx,DWORD PTR [rdx]
 100e3ef:	add    BYTE PTR [rbx],ah
 100e3f1:	xor    al,0x14
 100e3f3:	add    BYTE PTR [rbx],dl
 100e3f5:	mov    dl,0xc
 100e3f7:	lock or ah,al
 100e3fa:	or     al,dl
 100e3fc:	(bad)  
 100e3fd:	rol    BYTE PTR [rax+rsi*2],0x3
 100e401:	(bad)  
 100e402:	add    dl,BYTE PTR [rax-0x10]
 100e405:	push   0x0
 100e407:	add    al,bh
 100e409:	(bad)  
 100e40a:	add    BYTE PTR [rax],al
 100e40c:	(bad)  
 100e40d:	(bad)  
 100e40e:	(bad)  
 100e40f:	call   QWORD PTR [rax+0x500000cb]
 100e415:	push   rax
 100e416:	add    BYTE PTR [rax],al
 100e418:	(bad)  
 100e419:	(bad)  
 100e41a:	(bad)  
 100e41b:	jmp    FWORD PTR [rdx+0x50]
 100e421:	add    BYTE PTR [rax],al
 100e423:	add    BYTE PTR [rax],bl
 100e425:	push   rcx
 100e426:	add    BYTE PTR [rax],al
 100e428:	(bad)  
 100e429:	(bad)  
 100e42a:	(bad)  
 100e42b:	jmp    FWORD PTR [rcx+rdx*2]
 100e42e:	add    BYTE PTR [rax],al
 100e430:	add    BYTE PTR [rax],al
 100e432:	add    BYTE PTR [rax],al
 100e434:	(bad)  
 100e435:	push   rsp
 100e436:	add    BYTE PTR [rax],al
 100e438:	(bad)  
 100e439:	(bad)  
 100e43a:	(bad)  
 100e43b:	call   FWORD PTR [rsp+rdx*2+0x0]
 100e43f:	add    BYTE PTR [rax],al
 100e441:	add    BYTE PTR [rax],al
 100e443:	add    BYTE PTR [rcx],dl
 100e445:	and    al,0xa
 100e447:	add    BYTE PTR [rsp+riz*2],ah
 100e44a:	adc    eax,DWORD PTR [rax]
 100e44c:	and    BYTE PTR [rdx+rdx*1+0x0],dl
 100e450:	sbb    al,0x34
 100e452:	adc    BYTE PTR [rax],al
 100e454:	adc    BYTE PTR [rdx-0x1ff50ff4],dh
 100e45a:	or     BYTE PTR [rax-0x10],dh
 100e45d:	push   0x0
 100e45f:	add    BYTE PTR [rax],ah
 100e461:	(bad)  
 100e462:	add    BYTE PTR [rax],al
 100e464:	(bad)  
 100e465:	(bad)  
 100e466:	(bad)  
 100e467:	push   QWORD PTR [rax+0xca]
 100e46d:	add    BYTE PTR [rax],al
 100e46f:	add    BYTE PTR [rax+0xca],ah
 100e475:	push   rbp
 100e476:	add    BYTE PTR [rax],al
 100e478:	(bad)  
 100e479:	(bad)  
 100e47a:	(bad)  
 100e47b:	push   QWORD PTR [rax]
 100e47d:	push   rbp
 100e47e:	add    BYTE PTR [rax],al
 100e480:	add    BYTE PTR [rax],al
 100e482:	add    BYTE PTR [rax],al
 100e484:	add    DWORD PTR [rsi],eax
 100e486:	add    al,BYTE PTR [rax]
 100e488:	(bad)  
 100e489:	xor    al,BYTE PTR [rdx]
 100e48b:	push   rax
 100e48c:	sbb    DWORD PTR [rbx],esi
 100e48e:	or     al,BYTE PTR [rax]
 100e490:	and    al,0x34
 100e492:	sbb    eax,DWORD PTR [rax]
 100e494:	adc    esi,edx
 100e496:	or     al,0xf0
 100e498:	or     ah,al
 100e49a:	or     al,dl
 100e49c:	(bad)  
 100e49d:	rol    BYTE PTR [rax+rsi*2],0x3
 100e4a1:	(bad)  
 100e4a2:	add    dl,BYTE PTR [rax-0x4]
 100e4a5:	push   0x0
 100e4a7:	add    BYTE PTR [rax+0x17],cl
 100e4aa:	add    BYTE PTR [rax],al
 100e4ac:	jp     0x100e4ae
 100e4ae:	add    BYTE PTR [rax],al
 100e4b0:	(bad)  
 100e4b1:	(bad)  
 100e4b2:	(bad)  
 100e4b3:	push   QWORD PTR [rax-0xffff35]
 100e4b9:	(bad)  
 100e4ba:	(bad)  
 100e4bb:	inc    eax
 100e4bd:	retf   
 100e4be:	add    BYTE PTR [rax],al
 100e4c0:	(bad)  
 100e4c1:	(bad)  
 100e4c2:	(bad)  
 100e4c3:	call   rax
 100e4c5:	retf   
 100e4c6:	add    BYTE PTR [rax],al
 100e4c8:	(bad)  
 100e4c9:	(bad)  
 100e4ca:	(bad)  
 100e4cb:	jmp    rax
 100e4cd:	retf   
 100e4ce:	add    BYTE PTR [rax],al
 100e4d0:	(bad)  
 100e4d1:	(bad)  
 100e4d2:	(bad)  
 100e4d3:	push   rax
 100e4d5:	retf   
 100e4d6:	add    BYTE PTR [rax],al
 100e4d8:	(bad)  
 100e4d9:	(bad)  
 100e4da:	(bad)  
 100e4db:	inc    DWORD PTR [rax]
 100e4dd:	int3   
 100e4de:	add    BYTE PTR [rax],al
 100e4e0:	add    DWORD PTR [rax],eax
 100e4e2:	add    BYTE PTR [rax],al
 100e4e4:	adc    ah,cl
 100e4e6:	add    BYTE PTR [rax],al
 100e4e8:	add    DWORD PTR [rax],eax
 100e4ea:	add    BYTE PTR [rax],al
 100e4ec:	and    ah,cl
 100e4ee:	add    BYTE PTR [rax],al
 100e4f0:	(bad)  
 100e4f1:	(bad)  
 100e4f2:	(bad)  
 100e4f3:	push   QWORD PTR [rax]
 100e4f5:	int3   
 100e4f6:	add    BYTE PTR [rax],al
 100e4f8:	(bad)  
 100e4f9:	(bad)  
 100e4fa:	(bad)  
 100e4fb:	inc    DWORD PTR [rax-0x34]
 100e4fe:	add    BYTE PTR [rax],al
 100e500:	jo     0x100e558
 100e502:	add    BYTE PTR [rax],al
 100e504:	(bad)  
 100e505:	(bad)  
 100e506:	(bad)  
 100e507:	inc    esi
 100e509:	push   rsi
 100e50a:	add    BYTE PTR [rax],al
 100e50c:	add    DWORD PTR [rax],eax
 100e50e:	add    BYTE PTR [rax],al
 100e510:	ficom  WORD PTR [rdi+0x0]
 100e513:	add    bh,bh
 100e515:	(bad)  
 100e516:	(bad)  
 100e517:	(bad)  
 100e518:	(bad)  
 100e519:	push   rdi
 100e51a:	add    BYTE PTR [rax],al
 100e51c:	add    DWORD PTR [rax],eax
 100e51e:	add    BYTE PTR [rax],al
 100e520:	(bad)  
 100e521:	pop    rax
 100e522:	add    BYTE PTR [rax],al
 100e524:	(bad)  
 100e525:	(bad)  
 100e526:	(bad)  
 100e527:	inc    DWORD PTR [rbx+0x1000058]
 100e52d:	add    BYTE PTR [rax],al
 100e52f:	add    cl,al
 100e531:	pop    rax
 100e532:	add    BYTE PTR [rax],al
 100e534:	(bad)  
 100e535:	(bad)  
 100e536:	(bad)  
 100e537:	inc    esi
 100e539:	pop    rax
 100e53a:	add    BYTE PTR [rax],al
 100e53c:	add    DWORD PTR [rax],eax
 100e53e:	add    BYTE PTR [rax],al
 100e540:	call   FWORD PTR [rax+0x0]
 100e543:	add    bh,bh
 100e545:	(bad)  
 100e546:	(bad)  
 100e547:	inc    DWORD PTR [rcx+rbx*2]
 100e54a:	add    BYTE PTR [rax],al
 100e54c:	add    DWORD PTR [rax],eax
 100e54e:	add    BYTE PTR [rax],al
 100e550:	es pop rcx
 100e552:	add    BYTE PTR [rax],al
 100e554:	(bad)  
 100e555:	add    BYTE PTR [rax],al
 100e557:	add    BYTE PTR [rax+0x1000059],al
 100e55d:	add    BYTE PTR [rax],al
 100e55f:	add    bh,dl
 100e561:	pop    rcx
 100e562:	add    BYTE PTR [rax],al
 100e564:	(bad)  
 100e565:	(bad)  
 100e566:	(bad)  
 100e567:	(bad)  
 100e568:	fcomp  QWORD PTR [rcx+0x0]
 100e56b:	add    BYTE PTR [rcx],al
 100e56d:	add    BYTE PTR [rax],al
 100e56f:	add    ch,ah
 100e571:	pop    rcx
 100e572:	add    BYTE PTR [rax],al
 100e574:	(bad)  
 100e575:	(bad)  
 100e576:	(bad)  
 100e577:	call   QWORD PTR [rcx]
 100e579:	sbb    DWORD PTR [rbx],eax
 100e57b:	add    BYTE PTR [rcx],dl
 100e57d:	(bad)  
 100e57e:	or     eax,0x300c70
 100e583:	add    al,dh
 100e585:	push   0x0
 100e587:	add    BYTE PTR [rax+0x17],dh
 100e58a:	add    BYTE PTR [rax],al
 100e58c:	(bad)  
 100e58d:	(bad)  
 100e58e:	(bad)  
 100e58f:	jmp    QWORD PTR [rax-0x34]
 100e592:	add    BYTE PTR [rax],al
 100e594:	(bad)  
 100e595:	(bad)  
 100e596:	(bad)  
 100e597:	push   QWORD PTR [rax-0x34]
 100e59a:	add    BYTE PTR [rax],al
 100e59c:	xor    BYTE PTR [rdx+0x0],bl
 100e59f:	add    bh,bh
 100e5a1:	(bad)  
 100e5a2:	(bad)  
 100e5a3:	jmp    QWORD PTR [rbp+0x5a]
 100e5a6:	add    BYTE PTR [rax],al
 100e5a8:	add    BYTE PTR [rax],al
 100e5aa:	add    BYTE PTR [rax],al
 100e5ac:	sbb    BYTE PTR [rdx+0x0],0x0
 100e5b0:	(bad)  
 100e5b1:	(bad)  
 100e5b2:	(bad)  
 100e5b3:	call   QWORD PTR [rcx]
 100e5b5:	sbb    DWORD PTR [rsi],eax
 100e5b7:	add    BYTE PTR [rcx],bl
 100e5b9:	fs or  al,0x0
 100e5bc:	adc    al,0x34
 100e5be:	or     eax,DWORD PTR [rax]
 100e5c0:	(bad)  
 100e5c1:	jb     0x100e5c5
 100e5c3:	jo     0x100e5b5
 100e5c5:	push   0x0
 100e5c7:	add    BYTE PTR [rax-0xffffe9],bl
 100e5cd:	(bad)  
 100e5ce:	(bad)  
 100e5cf:	call   QWORD PTR [rax-0xffff34]
 100e5d5:	(bad)  
 100e5d6:	(bad)  
 100e5d7:	jmp    QWORD PTR [rax-0x4fffff34]
 100e5dd:	pop    rdx
 100e5de:	add    BYTE PTR [rax],al
 100e5e0:	(bad)  
 100e5e1:	(bad)  
 100e5e2:	(bad)  
 100e5e3:	(bad)  
 100e5e4:	fistp  WORD PTR [rdx+0x0]
 100e5e7:	add    BYTE PTR [rax],al
 100e5e9:	add    BYTE PTR [rax],al
 100e5eb:	add    BYTE PTR [rbx],cl
 100e5ed:	pop    rbx
 100e5ee:	add    BYTE PTR [rax],al
 100e5f0:	(bad)  
 100e5f1:	(bad)  
 100e5f2:	(bad)  
 100e5f3:	call   QWORD PTR [rcx]
 100e5f5:	sbb    eax,0x641d0006
 100e5fa:	(bad)  
 100e5fb:	add    BYTE PTR [rax],bl
 100e5fd:	xor    al,0xc
 100e5ff:	add    BYTE PTR [rdx],cl
 100e601:	xchg   edx,eax
 100e602:	(bad)  
 100e603:	jo     0x100e5f5
 100e605:	push   0x0
 100e607:	add    al,al
 100e609:	(bad)  
 100e60a:	add    BYTE PTR [rax],al
 100e60c:	(bad)  
 100e60d:	(bad)  
 100e60e:	(bad)  
 100e60f:	push   rax
 100e611:	retf   0x0
 100e614:	add    BYTE PTR [rax],al
 100e616:	add    BYTE PTR [rax],al
 100e618:	loopne 0x100e5e4
 100e61a:	add    BYTE PTR [rax],al
 100e61c:	push   rax
 100e61d:	pop    rbx
 100e61e:	add    BYTE PTR [rax],al
 100e620:	(bad)  
 100e621:	(bad)  
 100e622:	(bad)  
 100e623:	push   QWORD PTR [rbx+0x5b]
 100e626:	add    BYTE PTR [rax],al
 100e628:	add    BYTE PTR [rax],al
 100e62a:	add    BYTE PTR [rax],al
 100e62c:	add    DWORD PTR [rsi],eax
 100e62e:	add    al,BYTE PTR [rax]
 100e630:	(bad)  
 100e631:	xor    al,BYTE PTR [rdx]
 100e633:	push   rax
 100e634:	adc    DWORD PTR [rdi],ecx
 100e636:	add    al,BYTE PTR [rax]
 100e638:	(bad)  
 100e639:	mov    dl,0x2
 100e63b:	xor    al,dh
 100e63d:	push   0x0
 100e63f:	add    al,ch
 100e641:	(bad)  
 100e642:	add    BYTE PTR [rax],al
 100e644:	(bad)  
 100e645:	(bad)  
 100e646:	(bad)  
 100e647:	inc    eax
 100e649:	int3   
 100e64a:	add    BYTE PTR [rax],al
 100e64c:	push   rax
 100e64d:	pop    rsp
 100e64e:	add    BYTE PTR [rax],al
 100e650:	(bad)  
 100e651:	(bad)  
 100e652:	(bad)  
 100e653:	call   QWORD PTR [rax+0x5c]
 100e659:	add    BYTE PTR [rax],al
 100e65b:	add    BYTE PTR [rbp-0xffffa4],dh
 100e661:	(bad)  
 100e662:	(bad)  
 100e663:	call   QWORD PTR [rcx]
 100e665:	lar    eax,WORD PTR [rax]
 100e668:	(bad)  
 100e669:	push   rdx
 100e66a:	add    dh,BYTE PTR [rax]
 100e66c:	lock push 0x0
 100e66f:	add    BYTE PTR [rax],dl
 100e671:	sbb    BYTE PTR [rax],al
 100e673:	add    bh,bh
 100e675:	(bad)  
 100e676:	(bad)  
 100e677:	jmp    QWORD PTR [rax]
 100e679:	enter  0x0,0xff
 100e67d:	(bad)  
 100e67e:	(bad)  
 100e67f:	push   QWORD PTR [rax]
 100e681:	enter  0x0,0x1
 100e685:	add    BYTE PTR [rax],al
 100e687:	add    BYTE PTR [rax-0x38],al
 100e68a:	add    BYTE PTR [rax],al
 100e68c:	add    DWORD PTR [rax],eax
 100e68e:	add    BYTE PTR [rax],al
 100e690:	push   rax
 100e691:	enter  0x0,0x3
 100e695:	add    BYTE PTR [rax],al
 100e697:	add    BYTE PTR [rax-0x38],ah
 100e69a:	add    BYTE PTR [rax],al
 100e69c:	add    eax,DWORD PTR [rax]
 100e69e:	add    BYTE PTR [rax],al
 100e6a0:	jo     0x100e66a
 100e6a2:	add    BYTE PTR [rax],al
 100e6a4:	add    eax,0x80000000
 100e6a9:	enter  0x0,0x5
 100e6ad:	add    BYTE PTR [rax],al
 100e6af:	add    BYTE PTR [rax+0x70000c8],dl
 100e6b5:	add    BYTE PTR [rax],al
 100e6b7:	add    BYTE PTR [rax+0x70000c8],ah
 100e6bd:	add    BYTE PTR [rax],al
 100e6bf:	add    BYTE PTR [rax+0x90000c8],dh
 100e6c5:	add    BYTE PTR [rax],al
 100e6c7:	add    al,al
 100e6c9:	enter  0x0,0x9
 100e6cd:	add    BYTE PTR [rax],al
 100e6cf:	add    al,dl
 100e6d1:	enter  0x0,0xb
 100e6d5:	add    BYTE PTR [rax],al
 100e6d7:	add    al,ah
 100e6d9:	enter  0x0,0xb
 100e6dd:	add    BYTE PTR [rax],al
 100e6df:	add    al,dh
 100e6e1:	enter  0x0,0xd
 100e6e5:	add    BYTE PTR [rax],al
 100e6e7:	add    BYTE PTR [rax],al
 100e6e9:	leave  
 100e6ea:	add    BYTE PTR [rax],al
 100e6ec:	or     eax,0x10000000
 100e6f1:	leave  
 100e6f2:	add    BYTE PTR [rax],al
 100e6f4:	sldt   WORD PTR [rax]
 100e6f7:	add    BYTE PTR [rax],ah
 100e6f9:	leave  
 100e6fa:	add    BYTE PTR [rax],al
 100e6fc:	sldt   WORD PTR [rax]
 100e6ff:	add    BYTE PTR [rax],dh
 100e701:	leave  
 100e702:	add    BYTE PTR [rax],al
 100e704:	adc    DWORD PTR [rax],eax
 100e706:	add    BYTE PTR [rax],al
 100e708:	rex leave 
 100e70a:	add    BYTE PTR [rax],al
 100e70c:	adc    DWORD PTR [rax],eax
 100e70e:	add    BYTE PTR [rax],al
 100e710:	push   rax
 100e711:	leave  
 100e712:	add    BYTE PTR [rax],al
 100e714:	adc    eax,DWORD PTR [rax]
 100e716:	add    BYTE PTR [rax],al
 100e718:	(bad)  
 100e719:	leave  
 100e71a:	add    BYTE PTR [rax],al
 100e71c:	adc    eax,DWORD PTR [rax]
 100e71e:	add    BYTE PTR [rax],al
 100e720:	jo     0x100e6eb
 100e722:	add    BYTE PTR [rax],al
 100e724:	adc    eax,0x80000000
 100e729:	leave  
 100e72a:	add    BYTE PTR [rax],al
 100e72c:	adc    eax,0x90000000
 100e731:	leave  
 100e732:	add    BYTE PTR [rax],al
 100e734:	(bad)  
 100e735:	add    BYTE PTR [rax],al
 100e737:	add    BYTE PTR [rax-0x2fffff37],ah
 100e73d:	(bad)  
 100e73e:	add    BYTE PTR [rax],al
 100e740:	(bad)  
 100e741:	(bad)  
 100e742:	(bad)  
 100e743:	(bad)  
 100e744:	sti    
 100e745:	(bad)  
 100e746:	add    BYTE PTR [rax],al
 100e748:	add    BYTE PTR [rax],al
 100e74a:	add    BYTE PTR [rax],al
 100e74c:	rex.XB iret 
 100e74e:	add    BYTE PTR [rax],al
 100e750:	add    DWORD PTR [rax],eax
 100e752:	add    BYTE PTR [rax],al
 100e754:	pop    rdi
 100e755:	iret   
 100e756:	add    BYTE PTR [rax],al
 100e758:	add    al,BYTE PTR [rax]
 100e75a:	add    BYTE PTR [rax],al
 100e75c:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 100e75d:	iret   
 100e75e:	add    BYTE PTR [rax],al
 100e760:	add    eax,DWORD PTR [rax]
 100e762:	add    BYTE PTR [rax],al
 100e764:	ret    
 100e765:	iret   
 100e766:	add    BYTE PTR [rax],al
 100e768:	add    al,0x0
 100e76a:	add    BYTE PTR [rax],al
 100e76c:	or     edx,eax
 100e76e:	add    BYTE PTR [rax],al
 100e770:	add    eax,0x27000000
 100e775:	rol    BYTE PTR [rax],1
 100e777:	add    BYTE PTR [rsi],al
 100e779:	add    BYTE PTR [rax],al
 100e77b:	add    BYTE PTR [rdi-0x30],ch
 100e77e:	add    BYTE PTR [rax],al
 100e780:	(bad)  
 100e781:	add    BYTE PTR [rax],al
 100e783:	add    BYTE PTR [rbx+0x80000d0],cl
 100e789:	add    BYTE PTR [rax],al
 100e78b:	add    bl,dl
 100e78d:	rol    BYTE PTR [rax],1
 100e78f:	add    BYTE PTR [rcx],cl
 100e791:	add    BYTE PTR [rax],al
 100e793:	add    bh,ch
 100e795:	rol    BYTE PTR [rax],1
 100e797:	add    BYTE PTR [rdx],cl
 100e799:	add    BYTE PTR [rax],al
 100e79b:	add    BYTE PTR [rdi],dh
 100e79d:	rol    DWORD PTR [rax],1
 100e79f:	add    BYTE PTR [rbx],cl
 100e7a1:	add    BYTE PTR [rax],al
 100e7a3:	add    BYTE PTR [rbx-0x2f],dl
 100e7a6:	add    BYTE PTR [rax],al
 100e7a8:	or     al,0x0
 100e7aa:	add    BYTE PTR [rax],al
 100e7ac:	fwait
 100e7ad:	rol    DWORD PTR [rax],1
 100e7af:	add    BYTE PTR [rip+0xffffffffb7000000],cl        # 0xffffffffb800e7b5
 100e7b5:	rol    DWORD PTR [rax],1
 100e7b7:	add    BYTE PTR [rsi],cl
 100e7b9:	add    BYTE PTR [rax],al
 100e7bb:	add    bh,bh
 100e7bd:	rol    DWORD PTR [rax],1
 100e7bf:	add    BYTE PTR [rdi],cl
 100e7c1:	add    BYTE PTR [rax],al
 100e7c3:	add    BYTE PTR [rbx],bl
 100e7c5:	rol    BYTE PTR [rax],cl
 100e7c7:	add    BYTE PTR [rax],dl
 100e7c9:	add    BYTE PTR [rax],al
 100e7cb:	add    BYTE PTR [rbx-0x2e],ah
 100e7ce:	add    BYTE PTR [rax],al
 100e7d0:	adc    DWORD PTR [rax],eax
 100e7d2:	add    BYTE PTR [rax],al
 100e7d4:	jg     0x100e7a8
 100e7d6:	add    BYTE PTR [rax],al
 100e7d8:	adc    al,BYTE PTR [rax]
 100e7da:	add    BYTE PTR [rax],al
 100e7dc:	(bad)  
 100e7dd:	rol    BYTE PTR [rax],cl
 100e7df:	add    BYTE PTR [rbx],dl
 100e7e1:	add    BYTE PTR [rax],al
 100e7e3:	add    bl,ah
 100e7e5:	rol    BYTE PTR [rax],cl
 100e7e7:	add    BYTE PTR [rax+rax*1],dl
 100e7ea:	add    BYTE PTR [rax],al
 100e7ec:	sub    edx,ebx
 100e7ee:	add    BYTE PTR [rax],al
 100e7f0:	adc    eax,0x47000000
 100e7f5:	rol    DWORD PTR [rax],cl
 100e7f7:	add    BYTE PTR [rsi],dl
 100e7f9:	add    BYTE PTR [rax],al
 100e7fb:	add    BYTE PTR [rdi+0x170000d3],cl
 100e801:	add    BYTE PTR [rax],al
 100e803:	add    BYTE PTR [rbx+0x180000d3],ch
 100e809:	add    BYTE PTR [rax],al
 100e80b:	add    bl,dh
 100e80d:	rol    DWORD PTR [rax],cl
 100e80f:	add    bh,bh
 100e811:	(bad)  
 100e812:	(bad)  
 100e813:	call   QWORD PTR [rcx]
 100e815:	lar    eax,WORD PTR [rax]
 100e818:	(bad)  
 100e819:	push   rdx
 100e81a:	add    dh,BYTE PTR [rax]
 100e81c:	lock push 0x0
 100e81f:	add    BYTE PTR [rax],bh
 100e821:	sbb    BYTE PTR [rax],al
 100e823:	add    bh,bh
 100e825:	(bad)  
 100e826:	(bad)  
 100e827:	jmp    rax
 100e829:	int3   
 100e82a:	add    BYTE PTR [rax],al
 100e82c:	adc    ah,dl
 100e82e:	add    BYTE PTR [rax],al
 100e830:	(bad)  
 100e831:	(bad)  
 100e832:	(bad)  
 100e833:	(bad)  
 100e834:	cmp    edx,esp
 100e836:	add    BYTE PTR [rax],al
 100e838:	add    BYTE PTR [rax],al
 100e83a:	add    BYTE PTR [rax],al
 100e83c:	adc    esp,0x0
 100e83f:	add    bh,bh
 100e841:	(bad)  
 100e842:	(bad)  
 100e843:	call   QWORD PTR [rcx]
 100e845:	lar    eax,WORD PTR [rax]
 100e848:	(bad)  
 100e849:	push   rdx
 100e84a:	add    dh,BYTE PTR [rax]
 100e84c:	lock push 0x0
 100e84f:	add    BYTE PTR [rax+0x18],ah
 100e852:	add    BYTE PTR [rax],al
 100e854:	(bad)  
 100e855:	(bad)  
 100e856:	(bad)  
 100e857:	jmp    QWORD PTR [rax-0xffff39]
 100e85d:	(bad)  
 100e85e:	(bad)  
 100e85f:	push   QWORD PTR [rax+0x10000c7]
 100e865:	add    BYTE PTR [rax],al
 100e867:	add    al,al
 100e869:	mov    DWORD PTR [rax],0x100
 100e86f:	add    al,dl
 100e871:	mov    DWORD PTR [rax],0x300
 100e877:	add    al,ah
 100e879:	mov    DWORD PTR [rax],0x300
 100e87f:	add    al,dh
 100e881:	mov    DWORD PTR [rax],0x500
 100e887:	add    BYTE PTR [rax],al
 100e889:	enter  0x0,0xa0
 100e88d:	(bad)  
 100e88e:	add    BYTE PTR [rax],al
 100e890:	(bad)  
 100e891:	(bad)  
 100e892:	(bad)  
 100e893:	dec    ebx
 100e895:	(bad)  
 100e896:	add    BYTE PTR [rax],al
 100e898:	add    BYTE PTR [rax],al
 100e89a:	add    BYTE PTR [rax],al
 100e89c:	adc    edx,ebp
 100e89e:	add    BYTE PTR [rax],al
 100e8a0:	add    DWORD PTR [rax],eax
 100e8a2:	add    BYTE PTR [rax],al
 100e8a4:	(bad)  
 100e8a5:	(bad)  
 100e8a6:	add    BYTE PTR [rax],al
 100e8a8:	add    al,BYTE PTR [rax]
 100e8aa:	add    BYTE PTR [rax],al
 100e8ac:	ja     0x100e883
 100e8ae:	add    BYTE PTR [rax],al
 100e8b0:	add    eax,DWORD PTR [rax]
 100e8b2:	add    BYTE PTR [rax],al
 100e8b4:	xchg   ebx,eax
 100e8b5:	(bad)  
 100e8b6:	add    BYTE PTR [rax],al
 100e8b8:	add    al,0x0
 100e8ba:	add    BYTE PTR [rax],al
 100e8bc:	fcmovnbe st,st(5)
 100e8be:	add    BYTE PTR [rax],al
 100e8c0:	add    eax,0xf7000000
 100e8c5:	(bad)  
 100e8c6:	add    BYTE PTR [rax],al
 100e8c8:	(bad)  
 100e8c9:	add    BYTE PTR [rax],al
 100e8cb:	add    BYTE PTR [rdi],bh
 100e8cd:	(bad)  
 100e8ce:	add    BYTE PTR [rax],al
 100e8d0:	(bad)  
 100e8d1:	(bad)  
 100e8d2:	(bad)  
 100e8d3:	call   QWORD PTR [rcx]
 100e8d5:	lar    eax,WORD PTR [rax]
 100e8d8:	(bad)  
 100e8d9:	push   rdx
 100e8da:	add    dh,BYTE PTR [rax]
 100e8dc:	lock push 0x0
 100e8df:	add    BYTE PTR [rax-0xffffe8],cl
 100e8e5:	(bad)  
 100e8e6:	(bad)  
 100e8e7:	jmp    QWORD PTR [rax]
 100e8e9:	mov    BYTE PTR [rax],0x0
 100e8ec:	(bad)  
 100e8ed:	(bad)  
 100e8ee:	(bad)  
 100e8ef:	push   QWORD PTR [rax]
 100e8f1:	mov    BYTE PTR [rax],0x0
 100e8f4:	add    DWORD PTR [rax],eax
 100e8f6:	add    BYTE PTR [rax],al
 100e8f8:	rex mov BYTE PTR [rax],0x0
 100e8fc:	add    DWORD PTR [rax],eax
 100e8fe:	add    BYTE PTR [rax],al
 100e900:	push   rax
 100e901:	mov    BYTE PTR [rax],0x0
 100e904:	add    eax,DWORD PTR [rax]
 100e906:	add    BYTE PTR [rax],al
 100e908:	(bad)  
 100e909:	mov    BYTE PTR [rax],0x0
 100e90c:	add    eax,DWORD PTR [rax]
 100e90e:	add    BYTE PTR [rax],al
 100e910:	jo     0x100e8d8
 100e912:	add    BYTE PTR [rax],al
 100e914:	add    eax,0x80000000
 100e919:	mov    BYTE PTR [rax],0x0
 100e91c:	add    eax,0x90000000
 100e921:	mov    BYTE PTR [rax],0x0
 100e924:	(bad)  
 100e925:	add    BYTE PTR [rax],al
 100e927:	add    BYTE PTR [rax+0x600000c6],ah
 100e92d:	(bad)  
 100e92e:	add    BYTE PTR [rax],al
 100e930:	(bad)  
 100e931:	(bad)  
 100e932:	(bad)  
 100e933:	dec    DWORD PTR [rbx+0xd6]
 100e939:	add    BYTE PTR [rax],al
 100e93b:	add    bl,dl
 100e93d:	(bad)  
 100e93e:	add    BYTE PTR [rax],al
 100e940:	add    DWORD PTR [rax],eax
 100e942:	add    BYTE PTR [rax],al
 100e944:	out    dx,eax
 100e945:	(bad)  
 100e946:	add    BYTE PTR [rax],al
 100e948:	add    al,BYTE PTR [rax]
 100e94a:	add    BYTE PTR [rax],al
 100e94c:	(bad)  
 100e94d:	xlat   BYTE PTR ds:[rbx]
 100e94e:	add    BYTE PTR [rax],al
 100e950:	add    eax,DWORD PTR [rax]
 100e952:	add    BYTE PTR [rax],al
 100e954:	push   rbx
 100e955:	xlat   BYTE PTR ds:[rbx]
 100e956:	add    BYTE PTR [rax],al
 100e958:	add    al,0x0
 100e95a:	add    BYTE PTR [rax],al
 100e95c:	fwait
 100e95d:	xlat   BYTE PTR ds:[rbx]
 100e95e:	add    BYTE PTR [rax],al
 100e960:	add    eax,0xb7000000
 100e965:	xlat   BYTE PTR ds:[rbx]
 100e966:	add    BYTE PTR [rax],al
 100e968:	(bad)  
 100e969:	add    BYTE PTR [rax],al
 100e96b:	add    bh,bh
 100e96d:	xlat   BYTE PTR ds:[rbx]
 100e96e:	add    BYTE PTR [rax],al
 100e970:	(bad)  
 100e971:	add    BYTE PTR [rax],al
 100e973:	add    BYTE PTR [rbx],bl
 100e975:	fadd   DWORD PTR [rax]
 100e977:	add    BYTE PTR [rax],cl
 100e979:	add    BYTE PTR [rax],al
 100e97b:	add    BYTE PTR [rbx-0x28],ah
 100e97e:	add    BYTE PTR [rax],al
 100e980:	(bad)  
 100e981:	(bad)  
 100e982:	(bad)  
 100e983:	call   QWORD PTR [rcx]
 100e985:	lar    eax,WORD PTR [rax]
 100e988:	(bad)  
 100e989:	push   rdx
 100e98a:	add    dh,BYTE PTR [rax]
 100e98c:	lock push 0x0
 100e98f:	add    BYTE PTR [rax-0xffffe8],dh
 100e995:	(bad)  
 100e996:	(bad)  
 100e997:	inc    DWORD PTR [rax-0x7fffff39]
 100e99d:	fadd   DWORD PTR [rax]
 100e99f:	add    bh,bh
 100e9a1:	(bad)  
 100e9a2:	(bad)  
 100e9a3:	jmp    FWORD PTR [rbx+0xd8]
 100e9a9:	add    BYTE PTR [rax],al
 100e9ab:	add    bl,dh
 100e9ad:	fadd   DWORD PTR [rax]
 100e9af:	add    bh,bh
 100e9b1:	(bad)  
 100e9b2:	(bad)  
 100e9b3:	call   QWORD PTR [rcx]
 100e9b5:	or     eax,0x62040001
 100e9ba:	add    BYTE PTR [rax],al
 100e9bc:	lock push 0x0
 100e9bf:	add    al,bl
 100e9c1:	sbb    BYTE PTR [rax],al
 100e9c3:	add    bh,bh
 100e9c5:	(bad)  
 100e9c6:	(bad)  
 100e9c7:	inc    DWORD PTR [rax-0xfffff36]
 100e9cd:	fld    QWORD PTR [rax]
 100e9cf:	add    bh,bh
 100e9d1:	(bad)  
 100e9d2:	(bad)  
 100e9d3:	call   QWORD PTR [rcx]
 100e9d5:	lar    eax,WORD PTR [rax]
 100e9d8:	(bad)  
 100e9d9:	push   rdx
 100e9da:	add    dh,BYTE PTR [rax]
 100e9dc:	lock push 0x0
 100e9df:	add    BYTE PTR [rax],al
 100e9e1:	sbb    DWORD PTR [rax],eax
 100e9e3:	add    bh,bh
 100e9e5:	(bad)  
 100e9e6:	(bad)  
 100e9e7:	jmp    QWORD PTR [rax]
 100e9e9:	mov    DWORD PTR [rax],0xd91000
 100e9ef:	add    bh,bh
 100e9f1:	(bad)  
 100e9f2:	(bad)  
 100e9f3:	(bad)  
 100e9f4:	cmp    ebx,ecx
 100e9f6:	add    BYTE PTR [rax],al
 100e9f8:	add    BYTE PTR [rax],al
 100e9fa:	add    BYTE PTR [rax],al
 100e9fc:	sbb    ecx,0x0
 100e9ff:	add    bh,bh
 100ea01:	(bad)  
 100ea02:	(bad)  
 100ea03:	call   QWORD PTR [rcx]
 100ea05:	or     eax,0x62040001
 100ea0a:	add    BYTE PTR [rax],al
 100ea0c:	lock push 0x0
 100ea0f:	add    BYTE PTR [rax],ch
 100ea11:	sbb    DWORD PTR [rax],eax
 100ea13:	add    bh,bh
 100ea15:	(bad)  
 100ea16:	(bad)  
 100ea17:	jmp    QWORD PTR [rax]
 100ea19:	retf   0x0
 100ea1c:	xor    dh,bl
 100ea1e:	add    BYTE PTR [rax],al
 100ea20:	(bad)  
 100ea21:	(bad)  
 100ea22:	(bad)  
 100ea23:	call   QWORD PTR [rcx]
 100ea25:	lar    eax,WORD PTR [rax]
 100ea28:	(bad)  
 100ea29:	push   rdx
 100ea2a:	add    dh,BYTE PTR [rax]
 100ea2c:	lock push 0x0
 100ea2f:	add    BYTE PTR [rax+0x19],dl
 100ea32:	add    BYTE PTR [rax],al
 100ea34:	(bad)  
 100ea35:	(bad)  
 100ea36:	(bad)  
 100ea37:	inc    eax
 100ea39:	mov    BYTE PTR [rax],0x0
 100ea3c:	movabs al,ds:0xcbffffffff0000d9
 100ea45:	fld    DWORD PTR [rax]
 100ea47:	add    BYTE PTR [rax],al
 100ea49:	add    BYTE PTR [rax],al
 100ea4b:	add    BYTE PTR [rbx],dl
 100ea4d:	fiadd  DWORD PTR [rax]
 100ea4f:	add    bh,bh
 100ea51:	(bad)  
 100ea52:	(bad)  
 100ea53:	call   QWORD PTR [rcx]
 100ea55:	or     eax,0x62040001
 100ea5a:	add    BYTE PTR [rax],al
 100ea5c:	lock push 0x0
 100ea5f:	add    BYTE PTR [rax+0x19],bh
 100ea62:	add    BYTE PTR [rax],al
 100ea64:	(bad)  
 100ea65:	(bad)  
 100ea66:	(bad)  
 100ea67:	inc    eax
 100ea69:	leave  
 100ea6a:	add    BYTE PTR [rax],al
 100ea6c:	jo     0x100ea4c
 100ea6e:	add    BYTE PTR [rax],al
 100ea70:	(bad)  
 100ea71:	(bad)  
 100ea72:	(bad)  
 100ea73:	call   QWORD PTR [rcx]
 100ea75:	lar    eax,WORD PTR [rax]
 100ea78:	(bad)  
 100ea79:	push   rdx
 100ea7a:	add    dh,BYTE PTR [rax]
 100ea7c:	lock push 0x0
 100ea7f:	add    BYTE PTR [rax-0xffffe7],ah
 100ea85:	(bad)  
 100ea86:	(bad)  
 100ea87:	inc    DWORD PTR [rax-0x39]
 100ea8a:	add    BYTE PTR [rax],al
 100ea8c:	xor    dl,bl
 100ea8e:	add    BYTE PTR [rax],al
 100ea90:	(bad)  
 100ea91:	(bad)  
 100ea92:	(bad)  
 100ea93:	call   FWORD PTR [rbx-0x26]
 100ea96:	add    BYTE PTR [rax],al
 100ea98:	add    BYTE PTR [rax],al
 100ea9a:	add    BYTE PTR [rax],al
 100ea9c:	movabs ds:0x11ffffffff0000da,eax
 100eaa5:	or     eax,0x62040001
 100eaaa:	add    BYTE PTR [rax],al
 100eaac:	lock push 0x0
 100eaaf:	add    al,cl
 100eab1:	sbb    DWORD PTR [rax],eax
 100eab3:	add    bh,bh
 100eab5:	(bad)  
 100eab6:	(bad)  
 100eab7:	inc    DWORD PTR [rax-0x36]
 100eaba:	add    BYTE PTR [rax],al
 100eabc:	mov    al,0xde
 100eabe:	add    BYTE PTR [rax],al
 100eac0:	(bad)  
 100eac1:	(bad)  
 100eac2:	(bad)  
 100eac3:	call   QWORD PTR [rcx]
 100eac5:	lar    eax,WORD PTR [rax]
 100eac8:	(bad)  
 100eac9:	push   rdx
 100eaca:	add    dh,BYTE PTR [rax]
 100eacc:	lock push 0x0
 100eacf:	add    al,dh
 100ead1:	sbb    DWORD PTR [rax],eax
 100ead3:	add    bh,bh
 100ead5:	(bad)  
 100ead6:	(bad)  
 100ead7:	jmp    QWORD PTR [rax-0x39]
 100eada:	add    BYTE PTR [rax],al
 100eadc:	rcr    dl,0x0
 100eadf:	add    bh,bh
 100eae1:	(bad)  
 100eae2:	(bad)  
 100eae3:	(bad)  
 100eae4:	jmp    0x100eac0
 100eae6:	add    BYTE PTR [rax],al
 100eae8:	add    BYTE PTR [rax],al
 100eaea:	add    BYTE PTR [rax],al
 100eaec:	xor    ebx,ebx
 100eaee:	add    BYTE PTR [rax],al
 100eaf0:	(bad)  
 100eaf1:	(bad)  
 100eaf2:	(bad)  
 100eaf3:	call   QWORD PTR [rcx]
 100eaf5:	or     eax,0x62040001
 100eafa:	add    BYTE PTR [rax],al
 100eafc:	lock push 0x0
 100eaff:	add    BYTE PTR [rax],bl
 100eb01:	sbb    al,BYTE PTR [rax]
 100eb03:	add    bh,bh
 100eb05:	(bad)  
 100eb06:	(bad)  
 100eb07:	jmp    QWORD PTR [rax-0x36]
 100eb0a:	add    BYTE PTR [rax],al
 100eb0c:	lock fiadd WORD PTR [rax]
 100eb0f:	add    bh,bh
 100eb11:	(bad)  
 100eb12:	(bad)  
 100eb13:	call   QWORD PTR [rcx]
 100eb15:	lar    eax,WORD PTR [rax]
 100eb18:	(bad)  
 100eb19:	push   rdx
 100eb1a:	add    dh,BYTE PTR [rax]
 100eb1c:	lock push 0x0
 100eb1f:	add    BYTE PTR [rax+0x1a],al
 100eb22:	add    BYTE PTR [rax],al
 100eb24:	(bad)  
 100eb25:	(bad)  
 100eb26:	(bad)  
 100eb27:	jmp    rax
 100eb29:	mov    BYTE PTR [rax],0x0
 100eb2c:	push   rax
 100eb2d:	fild   DWORD PTR [rax]
 100eb2f:	add    bh,bh
 100eb31:	(bad)  
 100eb32:	(bad)  
 100eb33:	(bad)  
 100eb34:	jnp    0x100eb11
 100eb36:	add    BYTE PTR [rax],al
 100eb38:	add    BYTE PTR [rax],al
 100eb3a:	add    BYTE PTR [rax],al
 100eb3c:	ret    
 100eb3d:	fild   DWORD PTR [rax]
 100eb3f:	add    bh,bh
 100eb41:	(bad)  
 100eb42:	(bad)  
 100eb43:	call   QWORD PTR [rcx]
 100eb45:	or     eax,0x62040001
 100eb4a:	add    BYTE PTR [rax],al
 100eb4c:	lock push 0x0
 100eb4f:	add    BYTE PTR [rax+0x1a],ch
 100eb52:	add    BYTE PTR [rax],al
 100eb54:	(bad)  
 100eb55:	(bad)  
 100eb56:	(bad)  
 100eb57:	jmp    rax
 100eb59:	leave  
 100eb5a:	add    BYTE PTR [rax],al
 100eb5c:	xor    bh,bl
 100eb5e:	add    BYTE PTR [rax],al
 100eb60:	(bad)  
 100eb61:	(bad)  
 100eb62:	(bad)  
 100eb63:	call   QWORD PTR [rcx]
 100eb65:	lar    eax,WORD PTR [rax]
 100eb68:	(bad)  
 100eb69:	push   rdx
 100eb6a:	add    dh,BYTE PTR [rax]
 100eb6c:	lock push 0x0
 100eb6f:	add    BYTE PTR [rax-0xffffe6],dl
 100eb75:	(bad)  
 100eb76:	(bad)  
 100eb77:	inc    DWORD PTR [rax]
 100eb79:	mov    DWORD PTR [rax],0xdbe000
 100eb7f:	add    bh,bh
 100eb81:	(bad)  
 100eb82:	(bad)  
 100eb83:	dec    DWORD PTR [rbx]
 100eb85:	fadd   QWORD PTR [rax]
 100eb87:	add    BYTE PTR [rax],al
 100eb89:	add    BYTE PTR [rax],al
 100eb8b:	add    BYTE PTR [rbx-0x24],dl
 100eb8e:	add    BYTE PTR [rax],al
 100eb90:	(bad)  
 100eb91:	(bad)  
 100eb92:	(bad)  
 100eb93:	call   QWORD PTR [rcx]
 100eb95:	or     eax,0x62040001
 100eb9a:	add    BYTE PTR [rax],al
 100eb9c:	lock push 0x0
 100eb9f:	add    BYTE PTR [rax-0xffffe6],bh
 100eba5:	(bad)  
 100eba6:	(bad)  
 100eba7:	inc    DWORD PTR [rax]
 100eba9:	retf   0x0
 100ebac:	jo     0x100eb8d
 100ebae:	add    BYTE PTR [rax],al
 100ebb0:	(bad)  
 100ebb1:	(bad)  
 100ebb2:	(bad)  
 100ebb3:	inc    DWORD PTR [rcx]
 100ebb5:	(bad)  
 100ebb6:	add    al,BYTE PTR [rax]
 100ebb8:	(bad)  
 100ebb9:	xor    al,BYTE PTR [rdx]
 100ebbb:	xor    BYTE PTR [rcx],al
 100ebbd:	sbb    BYTE PTR [rdx],cl
 100ebbf:	add    BYTE PTR [rax],bl
 100ebc1:	ltr    WORD PTR fs:[rax]
 100ebc5:	push   rsp
 100ebc6:	(bad)  
 100ebc7:	add    BYTE PTR [rax],bl
 100ebc9:	xor    al,0xd
 100ebcb:	add    BYTE PTR [rax],bl
 100ebcd:	jb     0x100ebe3
 100ebcf:	lock adc ah,al
 100ebd2:	adc    BYTE PTR [rax+0x19],dh
 100ebd5:	sub    BYTE PTR [rcx],cl
 100ebd7:	add    BYTE PTR [rsi],dl
 100ebd9:	fild   DWORD PTR fs:[rax]
 100ebdc:	(bad)  
 100ebdd:	xor    al,0xda
 100ebdf:	add    BYTE PTR [rsi],dl
 100ebe1:	add    esp,edx
 100ebe3:	add    BYTE PTR [rdi],cl
 100ebe5:	lock or eax,0x700be0
 100ebeb:	add    ah,al
 100ebed:	ins    DWORD PTR es:[rdi],dx
 100ebee:	add    BYTE PTR [rax],al
 100ebf0:	add    DWORD PTR [rax],eax
 100ebf2:	add    BYTE PTR [rax],al
 100ebf4:	add    ebx,DWORD PTR [rdi+0x0]
 100ebf7:	add    BYTE PTR [rcx],dl
 100ebf9:	(bad)  
 100ebfa:	add    BYTE PTR [rax],al
 100ebfc:	and    ch,cl
 100ebfe:	add    BYTE PTR [rax],al
 100ec00:	add    BYTE PTR [rax],al
 100ec02:	add    BYTE PTR [rax],al
 100ec04:	xchg   edx,eax
 100ec05:	(bad)  
 100ec06:	add    BYTE PTR [rax],al
 100ec08:	add    DWORD PTR [rsi],eax
 100ec0a:	add    al,BYTE PTR [rax]
 100ec0c:	(bad)  
 100ec0d:	jb     0x100ec11
 100ec0f:	push   rax
 100ec10:	adc    DWORD PTR [rax],ebx
 100ec12:	(bad)  
 100ec13:	add    BYTE PTR [rax],bl
 100ec15:	xor    al,0xe
 100ec17:	add    BYTE PTR [rbx],cl
 100ec19:	xchg   edx,eax
 100ec1a:	add    al,0x70
 100ec1c:	add    esp,DWORD PTR [rax+0x2]
 100ec1f:	push   rax
 100ec20:	lock push 0x0
 100ec23:	add    BYTE PTR [rax],ah
 100ec25:	add    BYTE PTR es:[rax],al
 100ec28:	(bad)  
 100ec29:	(bad)  
 100ec2a:	(bad)  
 100ec2b:	inc    DWORD PTR [rax]
 100ec2d:	int    0x0
 100ec2f:	add    BYTE PTR [rax-0xffff9f],ah
 100ec35:	(bad)  
 100ec36:	(bad)  
 100ec37:	jmp    QWORD PTR [rdx+riz*2+0x0]
 100ec3e:	add    BYTE PTR [rax],al
 100ec40:	xor    BYTE PTR [rbx+0x0],ah
 100ec43:	add    bh,bh
 100ec45:	(bad)  
 100ec46:	(bad)  
 100ec47:	call   FWORD PTR [rcx]
 100ec49:	sbb    DWORD PTR [rdx],eax
 100ec4b:	add    BYTE PTR [rdi],al
 100ec4d:	add    DWORD PTR [rcx+0x0],ecx
 100ec50:	movabs al,ds:0x210000023000006d
 100ec59:	or     BYTE PTR [rdx],al
 100ec5b:	add    BYTE PTR [rax],cl
 100ec5d:	xor    al,0x48
 100ec5f:	add    BYTE PTR [rax+0x1000063],dl
 100ec65:	add    BYTE PTR fs:[rax],al
 100ec68:	rex.W in al,dx
 100ec6a:	add    BYTE PTR [rax],al
 100ec6c:	and    DWORD PTR [rax],eax
 100ec6e:	add    BYTE PTR [rax],al
 100ec70:	nop
 100ec71:	movsxd eax,DWORD PTR [rax]
 100ec73:	add    BYTE PTR [rcx],al
 100ec75:	add    BYTE PTR fs:[rax],al
 100ec78:	rex.W in al,dx
 100ec7a:	add    BYTE PTR [rax],al
 100ec7c:	adc    DWORD PTR [rdi+rax*1],ebx
 100ec7f:	add    BYTE PTR [rsp+riz*2],bl
 100ec82:	sbb    eax,DWORD PTR [rax]
 100ec84:	sbb    BYTE PTR [rdx+rbx*1],dh
 100ec87:	add    BYTE PTR [rbx],cl
 100ec89:	add    DWORD PTR [rsi],edx
 100ec8b:	add    BYTE PTR [rax+rsi*2],al
 100ec8e:	add    BYTE PTR [rax],al
 100ec90:	lock push 0x0
 100ec93:	add    BYTE PTR [rax+0x26],cl
 100ec96:	add    BYTE PTR [rax],al
 100ec98:	(bad)  
 100ec99:	(bad)  
 100ec9a:	(bad)  
 100ec9b:	inc    DWORD PTR [rax+0xcd]
 100eca1:	add    BYTE PTR [rax],al
 100eca3:	add    BYTE PTR [rax-0x7fffff33],dl
 100eca9:	add    BYTE PTR fs:[rax],al
 100ecac:	(bad)  
 100ecad:	(bad)  
 100ecae:	(bad)  
 100ecaf:	call   rdx
 100ecb1:	add    BYTE PTR fs:[rax],al
 100ecb4:	add    BYTE PTR [rax],al
 100ecb6:	add    BYTE PTR [rax],al
 100ecb8:	rex.RXB
 100ecb9:	add    BYTE PTR gs:[rax],al
 100ecbc:	add    DWORD PTR [rax],eax
 100ecbe:	add    BYTE PTR [rax],al
 100ecc0:	(bad)  
 100ecc1:	add    BYTE PTR gs:[rax],al
 100ecc4:	add    BYTE PTR [rax],al
 100ecc6:	add    BYTE PTR [rax],al
 100ecc8:	ins    DWORD PTR es:[rdi],dx
 100ecc9:	add    BYTE PTR gs:[rax],al
 100eccc:	(bad)  
 100eccd:	(bad)  
 100ecce:	(bad)  
 100eccf:	(bad)  
 100ecd0:	jl     0x100ed37
 100ecd2:	add    BYTE PTR [rax],al
 100ecd4:	add    BYTE PTR [rax],al
 100ecd6:	add    BYTE PTR [rax],al
 100ecd8:	xchg   DWORD PTR [rbp+0x0],esp
 100ecdb:	add    bh,bh
 100ecdd:	(bad)  
 100ecde:	(bad)  
 100ecdf:	dec    DWORD PTR [rcx+0x1000065]
 100ece5:	add    BYTE PTR [rax],al
 100ece7:	add    BYTE PTR [rcx+0x65],ch
 100eced:	add    BYTE PTR [rax],al
 100ecef:	add    BYTE PTR [rbp+riz*2-0x10000],dh
 100ecf6:	(bad)  
 100ecf7:	inc    DWORD PTR [rcx]
 100ecf9:	add    al,0x1
 100ecfb:	add    BYTE PTR [rdx+riz*2],al
 100ecfe:	add    BYTE PTR [rax],al
 100ed00:	add    DWORD PTR [rsi],eax
 100ed02:	add    al,BYTE PTR [rax]
 100ed04:	(bad)  
 100ed05:	xor    al,BYTE PTR [rdx]
 100ed07:	push   rax
 100ed08:	or     DWORD PTR [rdx],ecx
 100ed0a:	add    al,0x0
 100ed0c:	or     dh,BYTE PTR [rsi+rax*1]
 100ed0f:	add    BYTE PTR [rdx],cl
 100ed11:	xor    al,BYTE PTR [rsi]
 100ed13:	jo     0x100ed67
 100ed15:	outs   dx,DWORD PTR ds:[rsi]
 100ed16:	add    BYTE PTR [rax],al
 100ed18:	add    DWORD PTR [rax],eax
 100ed1a:	add    BYTE PTR [rax],al
 100ed1c:	push   rdx
 100ed1d:	data16 add BYTE PTR [rax],al
 100ed20:	nop
 100ed21:	add    BYTE PTR [eax],al
 100ed24:	movabs ds:0x1000067900000cd,al
 100ed2d:	add    al,0x1
 100ed2f:	add    BYTE PTR [rdx+rax*2],al
 100ed32:	add    BYTE PTR [rax],al
 100ed34:	add    DWORD PTR [rcx+rax*1],eax
 100ed37:	add    BYTE PTR [rdx+rax*2],al
 100ed3a:	add    BYTE PTR [rax],al
 100ed3c:	add    DWORD PTR [rsi],eax
 100ed3e:	add    al,BYTE PTR [rax]
 100ed40:	(bad)  
 100ed41:	xor    al,BYTE PTR [rdx]
 100ed43:	push   rax
 100ed44:	or     DWORD PTR [rdi],edx
 100ed46:	(bad)  
 100ed47:	add    BYTE PTR [rdi],dl
 100ed49:	xor    al,0xd
 100ed4b:	add    BYTE PTR [rdi],dl
 100ed4d:	jb     0x100ed62
 100ed4f:	rcl    BYTE PTR [rcx],0x70
 100ed52:	adc    BYTE PTR [rax+0x52],ah
 100ed55:	outs   dx,DWORD PTR ds:[rsi]
 100ed56:	add    BYTE PTR [rax],al
 100ed58:	add    DWORD PTR [rax],eax
 100ed5a:	add    BYTE PTR [rax],al
 100ed5c:	jmp    0x100edc6
 100ed5e:	add    BYTE PTR [rax],al
 100ed60:	add    al,0x69
 100ed62:	add    BYTE PTR [rax],al
 100ed64:	(bad)  
 100ed65:	int    0x0
 100ed67:	add    BYTE PTR [rcx+rbp*2],al
 100ed6a:	add    BYTE PTR [rax],al
 100ed6c:	add    DWORD PTR [rsi],eax
 100ed6e:	add    al,BYTE PTR [rax]
 100ed70:	(bad)  
 100ed71:	xor    al,BYTE PTR [rdx]
 100ed73:	push   rax
 100ed74:	adc    DWORD PTR [rax],ebx
 100ed76:	add    eax,0x14621800
 100ed7b:	rcl    BYTE PTR [rdx],0x70
 100ed7e:	adc    DWORD PTR [rax+0x10],esp
 100ed81:	xor    BYTE PTR [rax],al
 100ed83:	add    BYTE PTR [rdx+0x6f],dl
 100ed86:	add    BYTE PTR [rax],al
 100ed88:	add    DWORD PTR [rax],eax
 100ed8a:	add    BYTE PTR [rax],al
 100ed8c:	rex.WXB imul rax,QWORD PTR [r8],0x696b00
 100ed93:	add    BYTE PTR [rip+0xce],cl        # 0x100ee67
 100ed99:	add    BYTE PTR [rax],al
 100ed9b:	add    BYTE PTR [rcx],al
 100ed9d:	or     al,0x2
 100ed9f:	add    BYTE PTR [rcx+rax*1],cl
 100eda2:	adc    DWORD PTR [rax],eax
 100eda4:	add    DWORD PTR [rcx],ebx
 100eda6:	or     al,BYTE PTR [rax]
 100eda8:	sbb    DWORD PTR [rcx+rcx*1+0x0],esi
 100edac:	sbb    DWORD PTR [rax+rcx*1+0x0],esp
 100edb0:	sbb    DWORD PTR [rdi+rax*1+0x0],edx
 100edb4:	sbb    DWORD PTR [rsi+rax*1],esi
 100edb7:	add    BYTE PTR [rcx],bl
 100edb9:	xor    dl,BYTE PTR [rip+0xc0]        # 0x100ee7f
 100edbf:	add    BYTE PTR [rcx],al
 100edc1:	add    BYTE PTR [rax],al
 100edc3:	add    BYTE PTR [rcx],al
 100edc5:	clts   
 100edc7:	add    BYTE PTR [rdi],cl
 100edc9:	fs (bad) 
 100edcb:	add    BYTE PTR [rdi],cl
 100edcd:	xor    al,0x6
 100edcf:	add    BYTE PTR [rdi],cl
 100edd1:	xor    cl,BYTE PTR [rbx]
 100edd3:	jo     0x100edd6
 100edd5:	(bad)  
 100edd6:	add    al,BYTE PTR [rax]
 100edd8:	(bad)  
 100edd9:	xor    al,BYTE PTR [rdx]
 100eddb:	push   rax
 100eddc:	adc    DWORD PTR [rsi],eax
 100edde:	add    al,BYTE PTR [rax]
 100ede0:	(bad)  
 100ede1:	xor    al,BYTE PTR [rdx]
 100ede3:	xor    BYTE PTR [rdx+0x6f],dl
 100ede6:	add    BYTE PTR [rax],al
 100ede8:	add    DWORD PTR [rax],eax
 100edea:	add    BYTE PTR [rax],al
 100edec:	outs   dx,DWORD PTR ds:[rsi]
 100eded:	ins    BYTE PTR es:[rdi],dx
 100edee:	add    BYTE PTR [rax],al
 100edf0:	(bad)  
 100edf1:	ins    BYTE PTR es:[rdi],dx
 100edf2:	add    BYTE PTR [rax],al
 100edf4:	(bad)  
 100edf5:	(bad)  
 100edf6:	add    BYTE PTR [rax],al
 100edf8:	add    BYTE PTR [rax],al
 100edfa:	add    BYTE PTR [rax],al
 100edfc:	add    DWORD PTR [rcx+rax*1],eax
 100edff:	add    BYTE PTR [rdx+rax*2],al
 100ee02:	add    BYTE PTR [rax],al
 100ee04:	add    DWORD PTR [rsi],eax
 100ee06:	add    al,BYTE PTR [rax]
 100ee08:	(bad)  
 100ee09:	xor    al,BYTE PTR [rdx]
 100ee0b:	xor    BYTE PTR [rcx],al
 100ee0d:	add    al,0x1
 100ee0f:	add    BYTE PTR [rdx+rax*2],al
 100ee12:	add    BYTE PTR [rax],al
 100ee14:	add    DWORD PTR [rcx],ebx
 100ee16:	or     al,BYTE PTR [rax]
 100ee18:	sbb    DWORD PTR [rcx+rcx*1+0x0],esi
 100ee1c:	sbb    DWORD PTR [rax+rcx*1+0x0],esp
 100ee20:	sbb    DWORD PTR [rdi+rax*1+0x0],edx
 100ee24:	sbb    DWORD PTR [rsi+rax*1],esi
 100ee27:	add    BYTE PTR [rcx],bl
 100ee29:	xor    dl,BYTE PTR [rip+0x10401c0]        # 0x204efef
 100ee2f:	add    BYTE PTR [rdx+rax*2],al
 100ee32:	add    BYTE PTR [rax],al
 100ee34:	add    DWORD PTR [rcx+rax*1],eax
 100ee37:	add    BYTE PTR [rdx+rax*2],al
 100ee3a:	add    BYTE PTR [rax],al
 100ee3c:	add    DWORD PTR [rdx],ecx
 100ee3e:	add    al,0x0
 100ee40:	or     dh,BYTE PTR [rsi+rax*1]
 100ee43:	add    BYTE PTR [rdx],cl
 100ee45:	xor    al,BYTE PTR [rsi]
 100ee47:	jo     0x100ee4a
 100ee49:	or     al,BYTE PTR [rax+rax*1]
 100ee4c:	or     dh,BYTE PTR [rsi+rax*1]
 100ee4f:	add    BYTE PTR [rdx],cl
 100ee51:	xor    al,BYTE PTR [rsi]
 100ee53:	jo     0x100ee56
 100ee55:	(bad)  
 100ee56:	add    al,BYTE PTR [rax]
 100ee58:	(bad)  
 100ee59:	xor    al,BYTE PTR [rdx]
 100ee5b:	push   rax
 100ee5c:	or     DWORD PTR [rcx+rax*1],eax
 100ee5f:	add    BYTE PTR [rdx+rax*2],al
 100ee62:	add    BYTE PTR [rax],al
 100ee64:	push   rdx
 100ee65:	outs   dx,DWORD PTR ds:[rsi]
 100ee66:	add    BYTE PTR [rax],al
 100ee68:	add    DWORD PTR [rax],eax
 100ee6a:	add    BYTE PTR [rax],al
 100ee6c:	(bad)  
 100ee6d:	jo     0x100ee6f
 100ee6f:	add    BYTE PTR [rdx],bh
 100ee71:	jo     0x100ee73
 100ee73:	add    BYTE PTR [rax-0x32],ah
 100ee76:	add    BYTE PTR [rax],al
 100ee78:	cmp    dh,BYTE PTR [rax+0x0]
 100ee7b:	add    BYTE PTR [rcx],al
 100ee7d:	or     al,BYTE PTR [rax+rax*1]
 100ee80:	or     dh,BYTE PTR [rax+rcx*1]
 100ee83:	add    BYTE PTR [rdx],cl
 100ee85:	xor    al,BYTE PTR [rsi]
 100ee87:	jo     0x100eea2
 100ee89:	or     al,BYTE PTR [rdx]
 100ee8b:	add    BYTE PTR [rdx],cl
 100ee8d:	xor    al,BYTE PTR [rsi]
 100ee8f:	push   rax
 100ee90:	lock push 0x0
 100ee93:	add    BYTE PTR [rax+0x28],dh
 100ee96:	add    BYTE PTR [rax],al
 100ee98:	sbb    DWORD PTR [rip+0x62040001],ecx        # 0x6304ee9f
 100ee9e:	add    BYTE PTR [rax],al
 100eea0:	lock push 0x0
 100eea3:	add    BYTE PTR [rax+0x28],dh
	...
 100eeae:	add    BYTE PTR [rax],al
 100eeb0:	add    DWORD PTR [rax],eax
 100eeb2:	add    BYTE PTR [rax],al
 100eeb4:	add    DWORD PTR [rax],eax
 100eeb6:	add    BYTE PTR [rax],al
 100eeb8:	mov    esp,0x400000ee
	...
 100eec5:	add    BYTE PTR [rax],al
 100eec7:	add    BYTE PTR [rax+0x380000ce],cl
 100eecd:	add    BYTE PTR [rax],al
 100eecf:	add    bh,bh
 100eed1:	(bad)  
 100eed2:	(bad)  
 100eed3:	inc    DWORD PTR [rax]
 100eed5:	add    BYTE PTR [rax],al
 100eed7:	add    bh,bh
 100eed9:	(bad)  
 100eeda:	(bad)  
 100eedb:	inc    DWORD PTR [rax]
 100eedd:	add    BYTE PTR [rax],al
 100eedf:	add    BYTE PTR [rax+0x71],dh
 100eee2:	add    BYTE PTR [rax],al
 100eee4:	(bad)  
 100eee5:	(bad)  
 100eee6:	(bad)  
 100eee7:	(bad)  
 100eee8:	jge    0x100ef5b
 100eeea:	add    BYTE PTR [rax],al
 100eeec:	add    BYTE PTR [rax],al
 100eeee:	add    BYTE PTR [rax],al
 100eef0:	xor    DWORD PTR [rcx+0x0],0x0
 100eef4:	(bad)  
 100eef5:	(bad)  
 100eef6:	(bad)  
 100eef7:	dec    DWORD PTR [rax+0xce]
 100eefd:	add    BYTE PTR [rax],al
 100eeff:	add    BYTE PTR [rbp+0x10000ce],dl
 100ef05:	add    BYTE PTR [rax],al
 100ef07:	add    BYTE PTR [rdx+0xce],bl
 100ef0d:	add    BYTE PTR [rax],al
 100ef0f:	add    BYTE PTR [rcx],al
 100ef11:	or     eax,0x340d0004
 100ef16:	(bad)  
 100ef17:	add    BYTE PTR [rip+0x1500632],cl        # 0x250f54f
 100ef1d:	(bad)  
 100ef1e:	or     BYTE PTR [rax],al
 100ef20:	(bad)  
 100ef21:	je     0x100ef2b
 100ef23:	add    BYTE PTR [rdi],dl
 100ef25:	fs (bad) 
 100ef27:	add    BYTE PTR [rdi],dl
 100ef29:	xor    al,0x6
 100ef2b:	add    BYTE PTR [rdi],dl
 100ef2d:	xor    dl,BYTE PTR [rax]
 100ef2f:	push   rax
 100ef30:	add    DWORD PTR [rdx],edx
 100ef32:	(bad)  
 100ef33:	add    BYTE PTR [rdx],dl
 100ef35:	je     0x100ef3e
 100ef37:	add    BYTE PTR [rdx],dl
 100ef39:	xor    al,0x6
 100ef3b:	add    BYTE PTR [rdx],dl
 100ef3d:	xor    cl,BYTE PTR [rbx]
 100ef3f:	push   rax
 100ef40:	add    DWORD PTR [rcx],ecx
 100ef42:	add    al,BYTE PTR [rax]
 100ef44:	or     DWORD PTR [rdx],esi
 100ef46:	add    dl,BYTE PTR [rax+0x1]
 100ef49:	or     DWORD PTR [rdx],eax
 100ef4b:	add    BYTE PTR [rcx],cl
 100ef4d:	xor    al,BYTE PTR [rdx]
 100ef4f:	push   rax
 100ef50:	add    DWORD PTR [rcx],ecx
 100ef52:	add    al,BYTE PTR [rax]
 100ef54:	or     DWORD PTR [rdx],esi
 100ef56:	add    dl,BYTE PTR [rax+0x1]
 100ef59:	or     eax,0x320d0002
 100ef5e:	(bad)  
 100ef5f:	push   rax
 100ef60:	add    DWORD PTR [rcx],ecx
 100ef62:	add    al,BYTE PTR [rax]
 100ef64:	or     DWORD PTR [rdx],esi
 100ef66:	add    dl,BYTE PTR [rax+0x1]
 100ef69:	or     DWORD PTR [rdx],eax
 100ef6b:	add    BYTE PTR [rcx],cl
 100ef6d:	xor    al,BYTE PTR [rdx]
 100ef6f:	push   rax
 100ef70:	add    DWORD PTR [rdx],edx
 100ef72:	(bad)  
 100ef73:	add    BYTE PTR [rdx],dl
 100ef75:	je     0x100ef7e
 100ef77:	add    BYTE PTR [rdx],dl
 100ef79:	xor    al,0x6
 100ef7b:	add    BYTE PTR [rdx],dl
 100ef7d:	xor    cl,BYTE PTR [rbx]
 100ef7f:	push   rax
 100ef80:	add    DWORD PTR [rcx],ecx
 100ef82:	add    al,BYTE PTR [rax]
 100ef84:	or     DWORD PTR [rdx],esi
 100ef86:	add    dl,BYTE PTR [rax+0x1]
 100ef89:	add    eax,0x50020001
 100ef8e:	add    BYTE PTR [rax],al
 100ef90:	add    DWORD PTR [rip+0x50020001],eax        # 0x5102ef97
 100ef96:	add    BYTE PTR [rax],al
 100ef98:	add    DWORD PTR [rip+0x340d0004],ecx        # 0x350defa2
 100ef9e:	(bad)  
 100ef9f:	add    BYTE PTR [rip+0x1500632],cl        # 0x250f5d7
 100efa5:	adc    al,BYTE PTR [rsi]
 100efa7:	add    BYTE PTR [rdx],dl
 100efa9:	je     0x100efb2
 100efab:	add    BYTE PTR [rdx],dl
 100efad:	xor    al,0x6
 100efaf:	add    BYTE PTR [rdx],dl
 100efb1:	xor    cl,BYTE PTR [rbx]
 100efb3:	push   rax
 100efb4:	add    DWORD PTR [rip+0x340d0004],ecx        # 0x350defbe
 100efba:	(bad)  
 100efbb:	add    BYTE PTR [rip+0x1500632],cl        # 0x250f5f3
 100efc1:	or     DWORD PTR [rdx],eax
 100efc3:	add    BYTE PTR [rcx],cl
 100efc5:	xor    al,BYTE PTR [rdx]
 100efc7:	push   rax
 100efc8:	add    DWORD PTR [rcx],ecx
 100efca:	add    al,BYTE PTR [rax]
 100efcc:	or     DWORD PTR [rdx],esi
 100efce:	add    dl,BYTE PTR [rax+0x1]
 100efd1:	or     DWORD PTR [rdx],eax
 100efd3:	add    BYTE PTR [rcx],cl
 100efd5:	xor    al,BYTE PTR [rdx]
 100efd7:	push   rax
 100efd8:	add    DWORD PTR [rip+0x50020001],eax        # 0x5102efdf
 100efde:	add    BYTE PTR [rax],al
 100efe0:	add    DWORD PTR [rsi],eax
 100efe2:	add    al,BYTE PTR [rax]
 100efe4:	(bad)  
 100efe5:	xor    al,BYTE PTR [rdx]
 100efe7:	xor    BYTE PTR [rcx],bl
 100efe9:	(bad)  
 100efea:	add    eax,0x4e340d00
 100efef:	add    BYTE PTR [rip+0x6004a01],cl        # 0x70139f6
 100eff5:	jo     0x100eff7
 100eff7:	add    BYTE PTR [rax+0x4000006d],ah
 100effd:	add    al,BYTE PTR [rax]
 100efff:	add    BYTE PTR [rcx],bl
 100f001:	nop
 100f002:	(bad)  
 100f003:	add    BYTE PTR [rax-0x7cfdf50c],dl
 100f009:	(bad)  
 100f00a:	adc    eax,DWORD PTR [rdx]
 100f00c:	ins    BYTE PTR es:[rdi],dx
 100f00d:	je     0x100f021
 100f00f:	add    bl,BYTE PTR [rsi+0x34]
 100f012:	adc    DWORD PTR [rdx],eax
 100f014:	sbb    al,0x1
 100f016:	or     eax,DWORD PTR [rdx]
 100f018:	(bad)  
 100f019:	loopne 0x100f020
 100f01b:	rol    BYTE PTR [rbx],0x60
 100f01e:	add    dl,BYTE PTR [rax-0x60]
 100f021:	ins    DWORD PTR es:[rdi],dx
 100f022:	add    BYTE PTR [rax],al
 100f024:	adc    BYTE PTR [rax],al
 100f027:	add    BYTE PTR [rcx],bl
 100f029:	sbb    eax,0x10b0005
 100f02e:	rex.WX add BYTE PTR [rax+r14*2],al
 100f032:	add    esp,DWORD PTR [rax+0x2]
 100f035:	xor    BYTE PTR [rax],al
 100f037:	add    BYTE PTR [rax+0x4000006d],ah
 100f03d:	add    al,BYTE PTR [rax]
 100f03f:	add    BYTE PTR [rcx],bl
 100f041:	sub    DWORD PTR [rdi],eax
 100f043:	add    BYTE PTR [rax],bl
 100f045:	add    DWORD PTR [rdx+0x7f00900],ebx
 100f04b:	loopne 0x100f052
 100f04d:	rol    BYTE PTR [rbx],0x70
 100f050:	add    dl,BYTE PTR [rax+0x0]
 100f053:	add    BYTE PTR [rax-0x4fffff93],ah
 100f059:	add    al,0x0
 100f05b:	add    BYTE PTR [rcx],ah
 100f05d:	or     BYTE PTR [rdx],al
 100f05f:	add    BYTE PTR [rax],cl
 100f061:	(bad)  
 100f062:	cwde   
 100f063:	add    BYTE PTR [rax],al
 100f065:	add    BYTE PTR [rax],0x0
 100f068:	jmp    0x4100f0ed
 100f06d:	lock add BYTE PTR [rax],al
 100f070:	and    DWORD PTR [rax],ecx
 100f072:	add    al,BYTE PTR [rax]
 100f074:	or     BYTE PTR [rcx+rbx*4+0x0],ah
 100f078:	jmp    0x2c00f0fd
 100f07d:	add    DWORD PTR [rax],0xf05c00
 100f083:	add    BYTE PTR [rcx],ah
 100f085:	or     BYTE PTR [rdx],al
 100f087:	add    BYTE PTR [rax],cl
 100f089:	xor    al,0xa1
 100f08b:	add    BYTE PTR [rbx],ch
 100f08d:	add    DWORD PTR [rax],0x826600
 100f093:	add    BYTE PTR [rax-0x10],dh
 100f096:	add    BYTE PTR [rax],al
 100f098:	and    DWORD PTR [rax],eax
 100f09a:	add    BYTE PTR [rax],al
 100f09c:	sub    eax,DWORD PTR [rcx-0x7d9a0000]
 100f0a2:	add    BYTE PTR [rax],al
 100f0a4:	jo     0x100f096
 100f0a6:	add    BYTE PTR [rax],al
 100f0a8:	and    DWORD PTR [rax],eax
 100f0aa:	add    BYTE PTR [rax],al
 100f0ac:	jmp    0x2c00f131
 100f0b1:	add    DWORD PTR [rax],0xf05c00
 100f0b7:	add    BYTE PTR [rcx],ah
 100f0b9:	add    BYTE PTR [rax],al
 100f0bb:	add    BYTE PTR [rax],al
 100f0bd:	add    BYTE PTR [rax],0x0
 100f0c0:	jmp    0x4100f145
 100f0c5:	lock add BYTE PTR [rax],al
 100f0c8:	sbb    DWORD PTR [rcx],ebx
 100f0ca:	add    al,BYTE PTR [rax]
 100f0cc:	(bad)  
 100f0cd:	add    DWORD PTR [rcx+0x0],edx
 100f0d0:	movabs al,ds:0x10000027000006d
 100f0d9:	adc    eax,0x74150008
 100f0de:	or     BYTE PTR [rax],al
 100f0e0:	adc    eax,0x15000764
 100f0e5:	xor    al,0x6
 100f0e7:	add    BYTE PTR [rip+0x19e01132],dl        # 0x1ae1021f
 100f0ed:	sbb    eax,0x10b0005
 100f0f2:	adc    al,BYTE PTR [rax]
 100f0f4:	add    al,0x70
 100f0f6:	add    esp,DWORD PTR [rax+0x2]
 100f0f9:	xor    BYTE PTR [rax],al
 100f0fb:	add    BYTE PTR [rax-0x7fffff93],ah
 100f101:	add    BYTE PTR [rax],al
 100f103:	add    BYTE PTR [rcx],ah
 100f105:	or     BYTE PTR [rdx],al
 100f107:	add    BYTE PTR [rax],cl
 100f109:	push   rsp
 100f10a:	sbb    BYTE PTR [rax],al
 100f10c:	rol    BYTE PTR [rbp-0x7a010000],0x0
 100f113:	add    ah,ch
 100f115:	lock add BYTE PTR [rax],al
 100f118:	and    DWORD PTR [rax],eax
 100f11a:	add    BYTE PTR [rax],al
 100f11c:	rol    BYTE PTR [rbp-0x7a010000],0x0
 100f123:	add    ah,ch
 100f125:	lock add BYTE PTR [rax],al
 100f128:	add    DWORD PTR [rcx+rax*1],eax
 100f12b:	add    BYTE PTR [rdx+rax*2],al
 100f12e:	add    BYTE PTR [rax],al
 100f130:	and    DWORD PTR [rip+0x34050002],eax        # 0x3505f138
 100f136:	add    al,0x0
 100f138:	and    BYTE PTR [rdi-0x78bb0000],al
 100f13e:	add    BYTE PTR [rax],al
 100f140:	sub    cl,dh
 100f142:	add    BYTE PTR [rax],al
 100f144:	and    DWORD PTR [rax],eax
 100f146:	add    BYTE PTR [rax],al
 100f148:	and    BYTE PTR [rdi-0x78bb0000],al
 100f14e:	add    BYTE PTR [rax],al
 100f150:	sub    cl,dh
 100f152:	add    BYTE PTR [rax],al
 100f154:	add    DWORD PTR [rax],ebx
 100f156:	or     al,BYTE PTR [rax]
 100f158:	sbb    BYTE PTR [rdx+rcx*1+0x0],ah
 100f15c:	sbb    BYTE PTR [rcx+rcx*1+0x0],dl
 100f160:	sbb    BYTE PTR [rax+rcx*1],dh
 100f163:	add    BYTE PTR [rax],bl
 100f165:	xor    dl,BYTE PTR [rax+rsi*8]
 100f168:	adc    ah,al
 100f16a:	adc    BYTE PTR [rax+0x1],dh
 100f16d:	or     BYTE PTR [rax+rax*1],al
 100f170:	or     BYTE PTR [rdx+0x50036004],dl
 100f176:	add    dh,BYTE PTR [rax]
 100f178:	and    DWORD PTR [rip+0x74050002],eax        # 0x7505f180
 100f17e:	(bad)  
 100f17f:	add    BYTE PTR [rax],dl
 100f181:	mov    DWORD PTR [rax],eax
 100f183:	add    BYTE PTR [rcx+rcx*4-0xe940000],bh
 100f18a:	add    BYTE PTR [rax],al
 100f18c:	and    DWORD PTR [rax],eax
 100f18e:	add    BYTE PTR [rax],al
 100f190:	adc    BYTE PTR [rcx-0x76440000],cl
 100f196:	add    BYTE PTR [rax],al
 100f198:	ins    BYTE PTR es:[rdi],dx
 100f199:	icebp  
 100f19a:	add    BYTE PTR [rax],al
 100f19c:	and    DWORD PTR [rax],eax
 100f19e:	add    al,BYTE PTR [rax]
 100f1a0:	add    BYTE PTR [rsi+rcx*1+0x0],dh
 100f1a4:	adc    BYTE PTR [rcx-0x76440000],cl
 100f1aa:	add    BYTE PTR [rax],al
 100f1ac:	ins    BYTE PTR es:[rdi],dx
 100f1ad:	icebp  
 100f1ae:	add    BYTE PTR [rax],al
 100f1b0:	sbb    DWORD PTR [rdi],ebx
 100f1b2:	add    eax,0x4c340d00
 100f1b7:	add    BYTE PTR [rip+0x6004801],cl        # 0x70139be
 100f1bd:	jo     0x100f1bf
 100f1bf:	add    BYTE PTR [rax+0x3000006d],ah
 100f1c5:	add    al,BYTE PTR [rax]
 100f1c7:	add    BYTE PTR [rcx],bl
 100f1c9:	or     DWORD PTR ss:[rax],eax
 100f1cc:	and    eax,0x25064774
 100f1d1:	fs rex.RX (bad) 
 100f1d4:	and    eax,0x25064534
 100f1d9:	add    DWORD PTR [rdx+0x6],eax
 100f1dc:	adc    BYTE PTR [rax+0x0],dl
 100f1df:	add    BYTE PTR [rax+0x6d],ah
 100f1e5:	xor    al,BYTE PTR [rax]
 100f1e7:	add    BYTE PTR [rcx],al
 100f1e9:	adc    BYTE PTR [rbx],al
 100f1eb:	add    BYTE PTR [rax],dl
 100f1ed:	rex.X or al,0x60
 100f1f0:	or     esi,DWORD PTR [rax]
 100f1f2:	add    BYTE PTR [rax],al
 100f1f4:	and    DWORD PTR [rip+0x74050002],eax        # 0x7505f1fc
 100f1fa:	add    al,0x0
 100f1fc:	rex xchg edx,eax
 100f1fe:	add    BYTE PTR [rax],al
 100f200:	outs   dx,BYTE PTR ds:[rsi]
 100f201:	xchg   edx,eax
 100f202:	add    BYTE PTR [rax],al
 100f204:	call   0x2200f2fa
 100f209:	add    BYTE PTR [rdx],al
 100f20b:	add    BYTE PTR [rax],al
 100f20d:	je     0x100f213
 100f20f:	add    BYTE PTR [rax-0x6e],al
 100f212:	add    BYTE PTR [rax],al
 100f214:	outs   dx,BYTE PTR ds:[rsi]
 100f215:	xchg   edx,eax
 100f216:	add    BYTE PTR [rax],al
 100f218:	call   0x2200f30e
 100f21d:	add    BYTE PTR [rax],al
 100f21f:	add    BYTE PTR [rax-0x6e],al
 100f222:	add    BYTE PTR [rax],al
 100f224:	outs   dx,BYTE PTR ds:[rsi]
 100f225:	xchg   edx,eax
 100f226:	add    BYTE PTR [rax],al
 100f228:	call   0xa00f31e
 100f22d:	(bad)  
 100f22e:	add    al,BYTE PTR [rax]
 100f230:	(bad)  
 100f231:	xor    al,BYTE PTR [rdx]
 100f233:	xor    BYTE PTR [rdx+0x6f],dl
 100f236:	add    BYTE PTR [rax],al
 100f238:	add    DWORD PTR [rax],eax
 100f23a:	add    BYTE PTR [rax],al
 100f23c:	sti    
 100f23d:	xchg   edx,eax
 100f23e:	add    BYTE PTR [rax],al
 100f240:	(bad)  
 100f241:	xchg   ebx,eax
 100f242:	add    BYTE PTR [rax],al
 100f244:	add    DWORD PTR [rax],eax
 100f246:	add    BYTE PTR [rax],al
 100f248:	(bad)  
 100f249:	xchg   ebx,eax
 100f24a:	add    BYTE PTR [rax],al
 100f24c:	add    DWORD PTR [rsi],eax
 100f24e:	add    al,BYTE PTR [rax]
 100f250:	(bad)  
 100f251:	xor    al,BYTE PTR [rdx]
 100f253:	xor    BYTE PTR [rcx],al
 100f255:	(bad)  
 100f256:	add    al,BYTE PTR [rax]
 100f258:	(bad)  
 100f259:	xor    al,BYTE PTR [rdx]
 100f25b:	xor    BYTE PTR [rcx],cl
 100f25d:	adc    ecx,DWORD PTR [rax]
 100f25f:	add    BYTE PTR [rbx],dl
 100f261:	or     eax,DWORD PTR fs:[rax]
 100f264:	adc    esi,DWORD PTR [rdx+rcx*1]
 100f267:	add    BYTE PTR [rbx],dl
 100f269:	push   rdx
 100f26a:	(bad)  
 100f26c:	or     eax,0x52700bc0
 100f271:	outs   dx,DWORD PTR ds:[rsi]
 100f272:	add    BYTE PTR [rax],al
 100f274:	add    al,BYTE PTR [rax]
 100f276:	add    BYTE PTR [rax],al
 100f278:	loop   0x100f20e
 100f27a:	add    BYTE PTR [rax],al
 100f27c:	not    BYTE PTR [rax+rax*1+0x100]
 100f283:	add    dh,dh
 100f285:	xchg   esp,eax
 100f286:	add    BYTE PTR [rax],al
 100f288:	cwde   
 100f289:	xchg   esp,eax
 100f28a:	add    BYTE PTR [rax],al
 100f28c:	cmp    al,0x95
 100f28e:	add    BYTE PTR [rax],al
 100f290:	add    DWORD PTR [rax],eax
 100f292:	add    BYTE PTR [rax],al
 100f294:	cmp    al,0x95
 100f296:	add    BYTE PTR [rax],al
 100f298:	or     DWORD PTR [rdx],ebx
 100f29a:	or     BYTE PTR [rax],al
 100f29c:	sbb    dh,BYTE PTR [rbx+rcx*1+0x0]
 100f2a0:	sbb    ah,BYTE PTR [rdx+rcx*1+0x0]
 100f2a4:	sbb    dh,BYTE PTR [rcx+rcx*1]
 100f2a7:	add    BYTE PTR [rdx],bl
 100f2a9:	push   rdx
 100f2aa:	(bad)  
 100f2ab:	rcl    BYTE PTR [rdx+0x6f],0x0
 100f2af:	add    BYTE PTR [rcx],al
 100f2b1:	add    BYTE PTR [rax],al
 100f2b3:	add    ah,ch
 100f2b5:	xchg   ebp,eax
 100f2b6:	add    BYTE PTR [rax],al
 100f2b8:	call   QWORD PTR [rbp+0x10000]
 100f2be:	add    BYTE PTR [rax],al
 100f2c0:	call   QWORD PTR [rbp+0x14090000]
 100f2c6:	(bad)  
 100f2c7:	add    BYTE PTR [rsp+riz*2],dl
 100f2ca:	or     al,BYTE PTR [rax]
 100f2cc:	adc    al,0x34
 100f2ce:	or     DWORD PTR [rax],eax
 100f2d0:	adc    al,0x52
 100f2d2:	adc    BYTE PTR [rax+0x52],dh
 100f2d5:	outs   dx,DWORD PTR ds:[rsi]
 100f2d6:	add    BYTE PTR [rax],al
 100f2d8:	add    DWORD PTR [rax],eax
 100f2da:	add    BYTE PTR [rax],al
 100f2dc:	mov    edx,DWORD PTR [rsi-0x69650000]
 100f2e2:	add    BYTE PTR [rax],al
 100f2e4:	add    DWORD PTR [rax],eax
 100f2e6:	add    BYTE PTR [rax],al
 100f2e8:	fwait
 100f2e9:	xchg   esi,eax
 100f2ea:	add    BYTE PTR [rax],al
 100f2ec:	and    DWORD PTR [rax],eax
 100f2ee:	add    BYTE PTR [rax],al
 100f2f0:	push   rax
 100f2f1:	xchg   edi,eax
 100f2f2:	add    BYTE PTR [rax],al
 100f2f4:	jle    0x100f28d
 100f2f6:	add    BYTE PTR [rax],al
 100f2f8:	and    al,0xf3
 100f2fa:	add    BYTE PTR [rax],al
 100f2fc:	and    DWORD PTR [rax],eax
 100f2fe:	add    al,BYTE PTR [rax]
 100f300:	add    BYTE PTR [rsi+rax*1],dh
 100f303:	add    BYTE PTR [rax-0x69],dl
 100f306:	add    BYTE PTR [rax],al
 100f308:	jle    0x100f2a1
 100f30a:	add    BYTE PTR [rax],al
 100f30c:	and    al,0xf3
 100f30e:	add    BYTE PTR [rax],al
 100f310:	and    DWORD PTR [rip+0x34050002],eax        # 0x3505f318
 100f316:	(bad)  
 100f317:	add    BYTE PTR [rax-0x69],dl
 100f31a:	add    BYTE PTR [rax],al
 100f31c:	jle    0x100f2b5
 100f31e:	add    BYTE PTR [rax],al
 100f320:	and    al,0xf3
 100f322:	add    BYTE PTR [rax],al
 100f324:	add    DWORD PTR [rbx],ecx
 100f326:	add    eax,DWORD PTR [rax]
 100f328:	or     esp,DWORD PTR [rdx+0x7]
 100f32b:	jo     0x100f333
 100f32d:	(bad)  
 100f32e:	add    BYTE PTR [rax],al
 100f330:	and    DWORD PTR [rax],eax
 100f332:	add    BYTE PTR [rax],al
 100f334:	loopne 0x100f2cd
 100f336:	add    BYTE PTR [rax],al
 100f338:	jne    0x100f2d2
 100f33a:	add    BYTE PTR [rax],al
 100f33c:	push   rsp
 100f33d:	repz add BYTE PTR [rax],al
 100f340:	and    DWORD PTR [rax],ecx
 100f342:	add    al,BYTE PTR [rax]
 100f344:	or     BYTE PTR [rcx+rbx*2],dh
 100f347:	add    eax,esp
 100f349:	xchg   edi,eax
 100f34a:	add    BYTE PTR [rax],al
 100f34c:	jne    0x100f2e6
 100f34e:	add    BYTE PTR [rax],al
 100f350:	push   rsp
 100f351:	repz add BYTE PTR [rax],al
 100f354:	sbb    DWORD PTR [rbx],ebx
 100f356:	add    eax,DWORD PTR [rax]
 100f358:	or     DWORD PTR [rcx],eax
 100f35a:	push   rsi
 100f35b:	add    DWORD PTR [rdx],eax
 100f35d:	jo     0x100f35f
 100f35f:	add    BYTE PTR [rax-0x5fffff93],ah
 100f365:	or     al,BYTE PTR [rax]
 100f367:	add    BYTE PTR [rcx],cl
 100f369:	sbb    cl,BYTE PTR [rax]
 100f36b:	add    BYTE PTR [rdx],bl
 100f36d:	je     0x100f37c
 100f36f:	add    BYTE PTR [rdx],bl
 100f371:	fs or  al,0x0
 100f374:	sbb    dh,BYTE PTR [rbx+rcx*1]
 100f377:	add    BYTE PTR [rdx],bl
 100f379:	jb     0x100f391
 100f37b:	rcl    BYTE PTR [rdx+0x6f],0x0
 100f37f:	add    BYTE PTR [rcx],al
 100f381:	add    BYTE PTR [rax],al
 100f383:	add    BYTE PTR [rcx-0x25ffff67],bl
 100f389:	cdq    
 100f38a:	add    BYTE PTR [rax],al
 100f38c:	add    DWORD PTR [rax],eax
 100f38e:	add    BYTE PTR [rax],al
 100f390:	ficomp DWORD PTR [rcx+0x210000]
 100f396:	add    BYTE PTR [rax],al
 100f398:	xor    BYTE PTR [rdx-0x65be0000],bl
 100f39e:	add    BYTE PTR [rax],al
 100f3a0:	int3   
 100f3a1:	repz add BYTE PTR [rax],al
 100f3a4:	and    DWORD PTR [rax],eax
 100f3a6:	add    al,BYTE PTR [rax]
 100f3a8:	add    BYTE PTR [rax+rcx*1+0x0],dh
 100f3ac:	xor    BYTE PTR [rdx-0x65be0000],bl
 100f3b2:	add    BYTE PTR [rax],al
 100f3b4:	int3   
 100f3b5:	repz add BYTE PTR [rax],al
 100f3b8:	and    DWORD PTR [rip+0x74050002],eax        # 0x7505f3c0
 100f3be:	or     BYTE PTR [rax],al
 100f3c0:	xor    BYTE PTR [rdx-0x65be0000],bl
 100f3c6:	add    BYTE PTR [rax],al
 100f3c8:	int3   
 100f3c9:	repz add BYTE PTR [rax],al
 100f3cc:	add    DWORD PTR [rsi],eax
 100f3ce:	add    al,BYTE PTR [rax]
 100f3d0:	(bad)  
 100f3d1:	push   rdx
 100f3d2:	add    dh,BYTE PTR [rax]
 100f3d4:	or     DWORD PTR [rbx],ebx
 100f3d6:	or     BYTE PTR [rax],al
 100f3d8:	sbb    esi,DWORD PTR [rcx*1+0x17321b00]
 100f3df:	loopne 0x100f3f6
 100f3e1:	rcl    BYTE PTR [rbx],1
 100f3e3:	rcl    BYTE PTR [rcx],0x70
 100f3e6:	adc    BYTE PTR [rax+0x52],ah
 100f3e9:	outs   dx,DWORD PTR ds:[rsi]
 100f3ea:	add    BYTE PTR [rax],al
 100f3ec:	add    DWORD PTR [rax],eax
 100f3ee:	add    BYTE PTR [rax],al
 100f3f0:	movabs al,ds:0x100009bb700009b
 100f3f9:	add    BYTE PTR [rax],al
 100f3fb:	add    BYTE PTR [rdi+0x100009b],dh
 100f401:	or     al,BYTE PTR [rax+rax*1]
 100f404:	or     dh,BYTE PTR [rsi+rax*1]
 100f407:	add    BYTE PTR [rdx],cl
 100f409:	xor    al,BYTE PTR [rsi]
 100f40b:	jo     0x100f40e
 100f40d:	clts   
 100f40f:	add    BYTE PTR [rdi],cl
 100f411:	fs (bad) 
 100f413:	add    BYTE PTR [rdi],cl
 100f415:	xor    al,0x6
 100f417:	add    BYTE PTR [rdi],cl
 100f419:	xor    cl,BYTE PTR [rbx]
 100f41b:	jo     0x100f43e
 100f41d:	add    BYTE PTR [rax],al
 100f41f:	add    al,dh
 100f421:	popf   
 100f422:	add    BYTE PTR [rax],al
 100f424:	cmp    al,0x9e
 100f426:	add    BYTE PTR [rax],al
 100f428:	push   rsp
 100f429:	hlt    
 100f42a:	add    BYTE PTR [rax],al
 100f42c:	and    DWORD PTR [rax],eax
 100f42e:	add    al,BYTE PTR [rax]
 100f430:	add    BYTE PTR [rax+rcx*1+0x0],ah
 100f434:	lock popf 
 100f436:	add    BYTE PTR [rax],al
 100f438:	cmp    al,0x9e
 100f43a:	add    BYTE PTR [rax],al
 100f43c:	push   rsp
 100f43d:	hlt    
 100f43e:	add    BYTE PTR [rax],al
 100f440:	and    DWORD PTR [rip+0x64050002],eax        # 0x6505f448
 100f446:	or     BYTE PTR [rax],al
 100f448:	lock popf 
 100f44a:	add    BYTE PTR [rax],al
 100f44c:	cmp    al,0x9e
 100f44e:	add    BYTE PTR [rax],al
 100f450:	push   rsp
 100f451:	hlt    
 100f452:	add    BYTE PTR [rax],al
 100f454:	add    DWORD PTR [rdx],ecx
 100f456:	add    al,0x0
 100f458:	or     dh,BYTE PTR [rdx+rcx*1]
 100f45b:	add    BYTE PTR [rdx],cl
 100f45d:	push   rdx
 100f45e:	(bad)  
 100f45f:	jo     0x100f482
 100f461:	add    BYTE PTR [rax],al
 100f463:	add    BYTE PTR [rax],ah
 100f465:	lahf   
 100f466:	add    BYTE PTR [rax],al
 100f468:	rex.WR lahf 
 100f46a:	add    BYTE PTR [rax],al
 100f46c:	mov    ah,dh
 100f46e:	add    BYTE PTR [rax],al
 100f470:	and    DWORD PTR [rdx],ecx
 100f472:	add    al,0x0
 100f474:	or     ah,BYTE PTR [rdi+rax*1+0x0]
 100f478:	add    eax,0x20000634
 100f47d:	lahf   
 100f47e:	add    BYTE PTR [rax],al
 100f480:	rex.WR lahf 
 100f482:	add    BYTE PTR [rax],al
 100f484:	mov    ah,dh
 100f486:	add    BYTE PTR [rax],al
 100f488:	add    DWORD PTR [rdx],ecx
 100f48a:	add    al,0x0
 100f48c:	or     dl,BYTE PTR [rax+rcx*1+0x0]
 100f490:	or     dh,BYTE PTR [rdx]
 100f492:	(bad)  
 100f493:	jo     0x100f49e
 100f495:	sbb    eax,0x741d000a
 100f49a:	ltr    WORD PTR [rip+0x1d000d64]        # 0x1e010205
 100f4a1:	xor    al,0xc
 100f4a3:	add    BYTE PTR [rip+0x17e01972],bl        # 0x18e10e1b
 100f4a9:	rcl    BYTE PTR [rip+0x6f52c0],1        # 0x170476f
 100f4af:	add    BYTE PTR [rcx],al
 100f4b1:	add    BYTE PTR [rax],al
 100f4b3:	add    dl,al
 100f4b5:	movabs al,ds:0x10000a13c0000
 100f4be:	add    BYTE PTR [rax],al
 100f4c0:	cmp    al,0xa1
 100f4c2:	add    BYTE PTR [rax],al
 100f4c4:	or     DWORD PTR [rdi],edx
 100f4c6:	(bad)  
 100f4c7:	add    BYTE PTR [rdi],dl
 100f4c9:	xor    al,0xb
 100f4cb:	add    BYTE PTR [rdi],dl
 100f4cd:	push   rdx
 100f4ce:	adc    eax,eax
 100f4d0:	adc    DWORD PTR [rax+0x10],esi
 100f4d3:	(bad)  
 100f4d4:	push   rdx
 100f4d5:	outs   dx,DWORD PTR ds:[rsi]
 100f4d6:	add    BYTE PTR [rax],al
 100f4d8:	add    DWORD PTR [rax],eax
 100f4da:	add    BYTE PTR [rax],al
 100f4dc:	std    
 100f4dd:	movabs eax,ds:0x10000a2150000
 100f4e6:	add    BYTE PTR [rax],al
 100f4e8:	adc    eax,0x90000a2
 100f4ed:	or     al,BYTE PTR [rax+rax*1]
 100f4f0:	or     dh,BYTE PTR [rax+rcx*1]
 100f4f3:	add    BYTE PTR [rdx],cl
 100f4f5:	push   rdx
 100f4f6:	(bad)  
 100f4f7:	jo     0x100f54b
 100f4f9:	outs   dx,DWORD PTR ds:[rsi]
 100f4fa:	add    BYTE PTR [rax],al
 100f4fc:	add    DWORD PTR [rax],eax
 100f4fe:	add    BYTE PTR [rax],al
 100f500:	ret    
 100f501:	movabs ds:0x10000a2d80000,al
 100f50a:	add    BYTE PTR [rax],al
 100f50c:	fsub   DWORD PTR [rdx+0x4090000]
 100f512:	add    DWORD PTR [rax],eax
 100f514:	add    al,0x42
 100f516:	add    BYTE PTR [rax],al
 100f518:	push   rdx
 100f519:	outs   dx,DWORD PTR ds:[rsi]
 100f51a:	add    BYTE PTR [rax],al
 100f51c:	add    DWORD PTR [rax],eax
 100f51e:	add    BYTE PTR [rax],al
 100f520:	adc    al,0xa3
 100f522:	add    BYTE PTR [rax],al
 100f524:	and    al,0xa3
 100f526:	add    BYTE PTR [rax],al
 100f528:	add    DWORD PTR [rax],eax
 100f52a:	add    BYTE PTR [rax],al
 100f52c:	and    al,0xa3
 100f52e:	add    BYTE PTR [rax],al
 100f530:	or     DWORD PTR [rdi],ecx
 100f532:	add    al,0x0
 100f534:	sysenter 
 100f536:	(bad)  
 100f537:	add    BYTE PTR [rdi],cl
 100f539:	xor    cl,BYTE PTR [rbx]
 100f53b:	jo     0x100f58f
 100f53d:	outs   dx,DWORD PTR ds:[rsi]
 100f53e:	add    BYTE PTR [rax],al
 100f540:	add    DWORD PTR [rax],eax
 100f542:	add    BYTE PTR [rax],al
 100f544:	je     0x100f4e9
 100f546:	add    BYTE PTR [rax],al
 100f548:	test   BYTE PTR [rbx+0x10000],ah
 100f54e:	add    BYTE PTR [rax],al
 100f550:	test   BYTE PTR [rbx+0xf090000],ah
 100f556:	(bad)  
 100f557:	add    BYTE PTR [rdi],cl
 100f559:	fs (bad) 
 100f55b:	add    BYTE PTR [rdi],cl
 100f55d:	xor    al,0x6
 100f55f:	add    BYTE PTR [rdi],cl
 100f561:	xor    cl,BYTE PTR [rbx]
 100f563:	jo     0x100f5b7
 100f565:	outs   dx,DWORD PTR ds:[rsi]
 100f566:	add    BYTE PTR [rax],al
 100f568:	add    DWORD PTR [rax],eax
 100f56a:	add    BYTE PTR [rax],al
 100f56c:	fsub   QWORD PTR [rbx-0x5c110000]
 100f572:	add    BYTE PTR [rax],al
 100f574:	add    DWORD PTR [rax],eax
 100f576:	add    BYTE PTR [rax],al
 100f578:	out    dx,eax
 100f579:	movabs ds:0xa490000000210000,eax
 100f582:	add    BYTE PTR [rax],al
 100f584:	pushf  
 100f585:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 100f586:	add    BYTE PTR [rax],al
 100f588:	movabs al,ds:0x4000204210000f5
 100f591:	je     0x100f593
 100f593:	add    BYTE PTR [rax-0x63ffff5c],dl
 100f599:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 100f59a:	add    BYTE PTR [rax],al
 100f59c:	movabs al,ds:0x4000104010000f5
 100f5a5:	add    al,BYTE PTR [rax]
 100f5a7:	add    BYTE PTR [rcx],al
 100f5a9:	(bad)  
 100f5aa:	add    al,BYTE PTR [rax]
 100f5ac:	(bad)  
 100f5ad:	xchg   edx,eax
 100f5ae:	add    dh,BYTE PTR [rax]
 100f5b0:	add    DWORD PTR [rdi],ebp
 100f5b2:	or     BYTE PTR [rax],al
 100f5b4:	(bad)  
 100f5b5:	push   rsp
 100f5b6:	verw   WORD PTR [rdx]
 100f5b9:	xor    al,0xe
 100f5bb:	add    BYTE PTR [rdx],cl
 100f5bd:	adc    BYTE PTR fs:[rax],al
 100f5c0:	or     dh,BYTE PTR [rdx+0xf097006]
 100f5c6:	(bad)  
 100f5c7:	add    BYTE PTR [rdi],cl
 100f5c9:	or     DWORD PTR fs:[rax],eax
 100f5cc:	sysenter 
 100f5ce:	or     BYTE PTR [rax],al
 100f5d0:	rsqrtps xmm1,XMMWORD PTR [rbx]
 100f5d3:	jo     0x100f627
 100f5d5:	outs   dx,DWORD PTR ds:[rsi]
 100f5d6:	add    BYTE PTR [rax],al
 100f5d8:	add    DWORD PTR [rax],eax
 100f5da:	add    BYTE PTR [rax],al
 100f5dc:	sbb    ah,BYTE PTR [rdi-0x58ae0000]
 100f5e2:	add    BYTE PTR [rax],al
 100f5e4:	add    DWORD PTR [rax],eax
 100f5e6:	add    BYTE PTR [rax],al
 100f5e8:	push   rdx
 100f5e9:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 100f5ea:	add    BYTE PTR [rax],al
 100f5ec:	add    DWORD PTR [rdx],ecx
 100f5ee:	add    al,0x0
 100f5f0:	or     dh,BYTE PTR [rsi+rax*1]
 100f5f3:	add    BYTE PTR [rdx],cl
 100f5f5:	xor    al,BYTE PTR [rsi]
 100f5f7:	jo     0x100f5fa
 100f5f9:	adc    al,0x8
 100f5fb:	add    BYTE PTR [rsp+riz*2],dl
 100f5fe:	or     eax,DWORD PTR [rax]
 100f600:	adc    al,0x54
 100f602:	or     al,BYTE PTR [rax]
 100f604:	adc    al,0x34
 100f606:	or     BYTE PTR [rax],al
 100f608:	adc    al,0x52
 100f60a:	adc    BYTE PTR [rax+0x21],dh
 100f60d:	add    BYTE PTR [rdx],al
 100f60f:	add    BYTE PTR [rax],al
 100f611:	xor    al,0x8
 100f613:	add    al,dl
 100f615:	test   al,0x0
 100f617:	add    dh,bh
 100f619:	test   al,0x0
 100f61b:	add    BYTE PTR [rax-0xa],bl
 100f61e:	add    BYTE PTR [rax],al
 100f620:	and    DWORD PTR [rax],eax
 100f622:	(bad)  
 100f623:	add    BYTE PTR [rax],al
 100f625:	(bad)  
 100f626:	(bad)  
 100f627:	add    BYTE PTR [rax],al
 100f629:	push   rsp
 100f62a:	(bad)  
 100f62b:	add    BYTE PTR [rax],al
 100f62d:	xor    al,0x8
 100f62f:	add    al,dl
 100f631:	test   al,0x0
 100f633:	add    dh,bh
 100f635:	test   al,0x0
 100f637:	add    BYTE PTR [rax-0xa],bl
 100f63a:	add    BYTE PTR [rax],al
 100f63c:	and    DWORD PTR [rsi+0x6],edx
 100f63f:	add    BYTE PTR [rsi-0x3c],dl
 100f642:	(bad)  
 100f643:	add    BYTE PTR [rcx+0x54],dl
 100f646:	(bad)  
 100f647:	add    BYTE PTR [rip+0xffffffffd0000834],al        # 0xffffffffd100fe81
 100f64d:	test   al,0x0
 100f64f:	add    dh,bh
 100f651:	test   al,0x0
 100f653:	add    BYTE PTR [rax-0xa],bl
 100f656:	add    BYTE PTR [rax],al
 100f658:	add    DWORD PTR [rax],edx
 100f65a:	add    eax,DWORD PTR [rax]
 100f65c:	adc    BYTE PTR [rdx+0x600b700c],al
 100f662:	add    BYTE PTR [rax],al
 100f664:	add    DWORD PTR [rax+rcx*1],edx
 100f667:	add    BYTE PTR [rsp+riz*2],dl
 100f66a:	or     al,0x0
 100f66c:	adc    al,0x54
 100f66e:	or     eax,DWORD PTR [rax]
 100f670:	adc    al,0x34
 100f672:	or     al,BYTE PTR [rax]
 100f674:	adc    al,0x72
 100f676:	adc    BYTE PTR [rax+0x1],dh
 100f679:	or     al,BYTE PTR [rax+rax*1]
 100f67c:	or     dh,BYTE PTR [rsi+rax*1]
 100f67f:	add    BYTE PTR [rdx],cl
 100f681:	xor    al,BYTE PTR [rsi]
 100f683:	jo     0x100f686
 100f685:	(bad)  
 100f686:	add    al,BYTE PTR [rax]
 100f688:	(bad)  
 100f689:	xor    al,BYTE PTR [rdx]
 100f68b:	xor    BYTE PTR [rcx],al
 100f68d:	(bad)  
 100f68e:	add    al,BYTE PTR [rax]
 100f690:	(bad)  
 100f691:	xor    al,BYTE PTR [rdx]
 100f693:	xor    BYTE PTR [rcx],al
 100f695:	(bad)  
 100f696:	add    al,BYTE PTR [rax]
 100f698:	(bad)  
 100f699:	xor    al,BYTE PTR [rdx]
 100f69b:	xor    BYTE PTR [rcx],al
 100f69d:	adc    al,0x8
 100f69f:	add    BYTE PTR [rsp+riz*2],dl
 100f6a2:	or     BYTE PTR [rax],al
 100f6a4:	adc    al,0x54
 100f6a6:	(bad)  
 100f6a7:	add    BYTE PTR [rsp+rsi*1],dl
 100f6aa:	(bad)  
 100f6ab:	add    BYTE PTR [rdx+rsi*1],dl
 100f6ae:	adc    BYTE PTR [rax+0x1],dh
 100f6b1:	or     al,BYTE PTR [rax+rax*1]
 100f6b4:	or     dh,BYTE PTR [rsi+rax*1]
 100f6b7:	add    BYTE PTR [rdx],cl
 100f6b9:	xor    al,BYTE PTR [rsi]
 100f6bb:	jo     0x100f6c6
 100f6bd:	sbb    BYTE PTR [rax],cl
 100f6bf:	add    BYTE PTR [rax],bl
 100f6c1:	or     eax,DWORD PTR fs:[rax]
 100f6c4:	sbb    BYTE PTR [rdx+rcx*1],dh
 100f6c7:	add    BYTE PTR [rax],bl
 100f6c9:	xor    dl,BYTE PTR [rax+rdx*8]
 100f6cc:	adc    al,al
 100f6ce:	adc    BYTE PTR [rax+0x52],dh
 100f6d1:	outs   dx,DWORD PTR ds:[rsi]
 100f6d2:	add    BYTE PTR [rax],al
 100f6d4:	add    al,BYTE PTR [rax]
 100f6d6:	add    BYTE PTR [rax],al
 100f6d8:	(bad)  
 100f6d9:	scas   eax,DWORD PTR es:[rdi]
 100f6da:	add    BYTE PTR [rax],al
 100f6dc:	call   0x200f790
 100f6e1:	add    BYTE PTR [rax],al
 100f6e3:	add    al,ch
 100f6e5:	scas   eax,DWORD PTR es:[rdi]
 100f6e6:	add    BYTE PTR [rax],al
 100f6e8:	sbb    DWORD PTR [rax-0x4fd60000],esi
 100f6ee:	add    BYTE PTR [rax],al
 100f6f0:	add    DWORD PTR [rax],eax
 100f6f2:	add    BYTE PTR [rax],al
 100f6f4:	sub    dh,BYTE PTR [rax+0xa010000]
 100f6fa:	add    al,0x0
 100f6fc:	or     dh,BYTE PTR [rdx+rax*1+0x0]
 100f700:	add    eax,0x1000134
 100f705:	(bad)  
 100f706:	add    al,BYTE PTR [rax]
 100f708:	(bad)  
 100f709:	xor    al,BYTE PTR [rdx]
 100f70b:	xor    BYTE PTR [rcx],al
 100f70d:	add    eax,0x34050002
 100f712:	add    DWORD PTR [rax],eax
 100f714:	add    DWORD PTR [rbx],ebp
 100f716:	add    eax,0x3742b00
 100f71b:	add    BYTE PTR [rsi],ah
 100f71d:	xor    al,0x2
 100f71f:	add    BYTE PTR [rdx],al
 100f721:	(bad)  
 100f722:	add    BYTE PTR [rax],al
 100f724:	or     DWORD PTR [rdx],ebx
 100f726:	or     al,BYTE PTR [rax]
 100f728:	sbb    al,ah
 100f72a:	or     eax,0xc741a00
 100f72f:	add    BYTE PTR [rdx],bl
 100f731:	or     eax,DWORD PTR fs:[rax]
 100f734:	sbb    dh,BYTE PTR [rdx+rcx*1]
 100f737:	add    BYTE PTR [rdx],bl
 100f739:	jb     0x100f751
 100f73b:	rcl    BYTE PTR [rdx+0x6f],1
 100f73e:	add    BYTE PTR [rax],al
 100f740:	add    DWORD PTR [rax],eax
 100f742:	add    BYTE PTR [rax],al
 100f744:	pop    rbx
 100f745:	mov    bl,0x0
 100f747:	add    BYTE PTR [rcx+0x10000b3],dh
 100f74d:	add    BYTE PTR [rax],al
 100f74f:	add    BYTE PTR [rcx+0x210000b3],dh
 100f755:	add    BYTE PTR [rax],al
 100f757:	add    BYTE PTR [rax],al
 100f759:	mov    ah,0x0
 100f75b:	add    BYTE PTR [rdx+0x7c0000b4],ch
 100f761:	test   DWORD PTR [rax],0x40a2100
 100f767:	add    BYTE PTR [rdx],cl
 100f769:	(bad)  
 100f76a:	(bad)  
 100f76b:	add    BYTE PTR [rip+0x634],al        # 0x100fda5
 100f771:	mov    ah,0x0
 100f773:	add    BYTE PTR [rdx+0x7c0000b4],ch
 100f779:	test   DWORD PTR [rax],0x60f0100
 100f77f:	add    BYTE PTR [rdi],cl
 100f781:	or     DWORD PTR fs:[rax],eax
 100f784:	andps  xmm1,XMMWORD PTR [rax]
 100f787:	add    BYTE PTR [rdi],cl
 100f789:	xor    cl,BYTE PTR [rbx]
 100f78b:	jo     0x100f796
 100f78d:	or     al,BYTE PTR [rax+rax*1]
 100f790:	or     dh,BYTE PTR [rax+rcx*1]
 100f793:	add    BYTE PTR [rdx],cl
 100f795:	push   rdx
 100f796:	(bad)  
 100f797:	jo     0x100f7eb
 100f799:	outs   dx,DWORD PTR ds:[rsi]
 100f79a:	add    BYTE PTR [rax],al
 100f79c:	add    DWORD PTR [rax],eax
 100f79e:	add    BYTE PTR [rax],al
 100f7a0:	sub    al,0xb5
 100f7a2:	add    BYTE PTR [rax],al
 100f7a4:	pop    rsp
 100f7a5:	mov    ch,0x0
 100f7a7:	add    BYTE PTR [rcx],al
 100f7a9:	add    BYTE PTR [rax],al
 100f7ab:	add    BYTE PTR [rbp+rsi*4+0x0],bl
 100f7af:	add    BYTE PTR [rcx],al
 100f7b1:	or     al,BYTE PTR [rax+rax*1]
 100f7b4:	or     dh,BYTE PTR [rsi+rax*1]
 100f7b7:	add    BYTE PTR [rdx],cl
 100f7b9:	xor    al,BYTE PTR [rsi]
 100f7bb:	jo     0x100f7be
 100f7bd:	adc    al,0x8
 100f7bf:	add    BYTE PTR [rsp+riz*2],dl
 100f7c2:	or     BYTE PTR [rax],al
 100f7c4:	adc    al,0x54
 100f7c6:	(bad)  
 100f7c7:	add    BYTE PTR [rsp+rsi*1],dl
 100f7ca:	(bad)  
 100f7cb:	add    BYTE PTR [rdx+rsi*1],dl
 100f7ce:	adc    BYTE PTR [rax+0x21],dh
 100f7d1:	add    BYTE PTR [rax],al
 100f7d3:	add    BYTE PTR [rax-0x48],ah
 100f7d6:	add    BYTE PTR [rax],al
 100f7d8:	cwde   
 100f7d9:	mov    eax,0xf8080000
 100f7de:	add    BYTE PTR [rax],al
 100f7e0:	and    DWORD PTR [rax],eax
 100f7e2:	add    al,BYTE PTR [rax]
 100f7e4:	add    ah,al
 100f7e6:	(bad)  
 100f7e7:	add    BYTE PTR [rax-0x48],ah
 100f7ea:	add    BYTE PTR [rax],al
 100f7ec:	cwde   
 100f7ed:	mov    eax,0xf8080000
 100f7f2:	add    BYTE PTR [rax],al
 100f7f4:	and    DWORD PTR [rip+0xffffffffc4050002],eax        # 0xffffffffc505f7fc
 100f7fa:	(bad)  
 100f7fb:	add    BYTE PTR [rax-0x48],ah
 100f7fe:	add    BYTE PTR [rax],al
 100f800:	cwde   
 100f801:	mov    eax,0xf8080000
 100f806:	add    BYTE PTR [rax],al
 100f808:	add    DWORD PTR [rax+rcx*1],edx
 100f80b:	add    BYTE PTR [rsp+riz*2],dl
 100f80e:	or     DWORD PTR [rax],eax
 100f810:	adc    al,0x54
 100f812:	or     BYTE PTR [rax],al
 100f814:	adc    al,0x34
 100f816:	(bad)  
 100f817:	add    BYTE PTR [rdx+rsi*1],dl
 100f81a:	adc    BYTE PTR [rax+0x21],dh
 100f81d:	add    BYTE PTR [rax],al
 100f81f:	add    BYTE PTR [rax-0x47],ah
 100f822:	add    BYTE PTR [rax],al
 100f824:	cwde   
 100f825:	mov    ecx,0xf8540000
 100f82a:	add    BYTE PTR [rax],al
 100f82c:	and    DWORD PTR [rax],eax
 100f82e:	add    al,BYTE PTR [rax]
 100f830:	add    ah,al
 100f832:	(bad)  
 100f833:	add    BYTE PTR [rax-0x47],ah
 100f836:	add    BYTE PTR [rax],al
 100f838:	cwde   
 100f839:	mov    ecx,0xf8540000
 100f83e:	add    BYTE PTR [rax],al
 100f840:	and    DWORD PTR [rip+0xffffffffc4050002],eax        # 0xffffffffc505f848
 100f846:	(bad)  
 100f847:	add    BYTE PTR [rax-0x47],ah
 100f84a:	add    BYTE PTR [rax],al
 100f84c:	cwde   
 100f84d:	mov    ecx,0xf8540000
 100f852:	add    BYTE PTR [rax],al
 100f854:	add    DWORD PTR [rax+rcx*1],edx
 100f857:	add    BYTE PTR [rsp+riz*2],dl
 100f85a:	or     DWORD PTR [rax],eax
 100f85c:	adc    al,0x54
 100f85e:	or     BYTE PTR [rax],al
 100f860:	adc    al,0x34
 100f862:	(bad)  
 100f863:	add    BYTE PTR [rdx+rsi*1],dl
 100f866:	adc    BYTE PTR [rax+0x9],dh
 100f869:	(bad)  
 100f86a:	add    al,BYTE PTR [rax]
 100f86c:	(bad)  
 100f86d:	push   rdx
 100f86e:	add    dh,BYTE PTR [rax]
 100f870:	push   rdx
 100f871:	outs   dx,DWORD PTR ds:[rsi]
 100f872:	add    BYTE PTR [rax],al
 100f874:	add    DWORD PTR [rax],eax
 100f876:	add    BYTE PTR [rax],al
 100f878:	ins    BYTE PTR es:[rdi],dx
 100f879:	mov    edx,0xba7e0000
 100f87e:	add    BYTE PTR [rax],al
 100f880:	add    DWORD PTR [rax],eax
 100f882:	add    BYTE PTR [rax],al
 100f884:	jle    0x100f840
 100f886:	add    BYTE PTR [rax],al
 100f888:	or     DWORD PTR [rdi],ecx
 100f88a:	(bad)  
 100f88b:	add    BYTE PTR [rdi],cl
 100f88d:	or     DWORD PTR fs:[rax],eax
 100f890:	sysenter 
 100f892:	or     BYTE PTR [rax],al
 100f894:	rsqrtps xmm1,XMMWORD PTR [rbx]
 100f897:	jo     0x100f8eb
 100f899:	outs   dx,DWORD PTR ds:[rsi]
 100f89a:	add    BYTE PTR [rax],al
 100f89c:	add    DWORD PTR [rax],eax
 100f89e:	add    BYTE PTR [rax],al
 100f8a0:	enter  0xba,0x0
 100f8a4:	mov    ah,0xbb
 100f8a6:	add    BYTE PTR [rax],al
 100f8a8:	add    DWORD PTR [rax],eax
 100f8aa:	add    BYTE PTR [rax],al
 100f8ac:	mov    ah,0xbb
 100f8ae:	add    BYTE PTR [rax],al
 100f8b0:	or     DWORD PTR [rax+rcx*1],edx
 100f8b3:	add    BYTE PTR [rdx+rsi*4],dl
 100f8b6:	adc    al,dh
 100f8b8:	(bad)  
 100f8b9:	loopne 0x100f8c7
 100f8bb:	ror    BYTE PTR [rdx],1
 100f8bd:	ror    BYTE PTR [rax],0x70
 100f8c0:	(bad)  
 100f8c1:	(bad)  
 100f8c2:	(bad)  
 100f8c3:	xor    BYTE PTR [rdx+0x6f],dl
 100f8c6:	add    BYTE PTR [rax],al
 100f8c8:	add    al,BYTE PTR [rax]
 100f8ca:	add    BYTE PTR [rax],al
 100f8cc:	(bad)  
 100f8cd:	mov    ebp,0xbe830000
 100f8d2:	add    BYTE PTR [rax],al
 100f8d4:	add    DWORD PTR [rax],eax
 100f8d6:	add    BYTE PTR [rax],al
 100f8d8:	cmp    DWORD PTR [rsi-0x43b80000],0x0
 100f8df:	add    BYTE PTR [rip+0x10000bf],dl        # 0x200f9a4
 100f8e5:	add    BYTE PTR [rax],al
 100f8e7:	add    BYTE PTR [rip+0x90000bf],dl        # 0xa00f9ac
 100f8ed:	adc    eax,0x74150008
 100f8f2:	or     al,BYTE PTR [rax]
 100f8f4:	adc    eax,0x15000964
 100f8f9:	xor    al,0x8
 100f8fb:	add    BYTE PTR [rip+0x52c01152],dl        # 0x53c10a53
 100f901:	outs   dx,DWORD PTR ds:[rsi]
 100f902:	add    BYTE PTR [rax],al
 100f904:	add    DWORD PTR [rax],eax
 100f906:	add    BYTE PTR [rax],al
 100f908:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 100f909:	mov    edi,0xc0320000
 100f90e:	add    BYTE PTR [rax],al
 100f910:	add    DWORD PTR [rax],eax
 100f912:	add    BYTE PTR [rax],al
 100f914:	xor    al,al
 100f916:	add    BYTE PTR [rax],al
 100f918:	add    DWORD PTR [rdi],ecx
 100f91a:	(bad)  
 100f91b:	add    BYTE PTR [rdi],cl
 100f91d:	fs (bad) 
 100f91f:	add    BYTE PTR [rdi],cl
 100f921:	xor    al,0x6
 100f923:	add    BYTE PTR [rdi],cl
 100f925:	xor    cl,BYTE PTR [rbx]
 100f927:	jo     0x100f92a
 100f929:	(bad)  
 100f92a:	or     DWORD PTR [rax],eax
 100f92c:	(bad)  
 100f92d:	fs sbb al,0x0
 100f930:	(bad)  
 100f931:	push   rsp
 100f932:	sbb    eax,DWORD PTR [rax]
 100f934:	(bad)  
 100f935:	xor    al,0x1a
 100f937:	add    BYTE PTR [rdi],dl
 100f939:	add    DWORD PTR [rax],ebx
 100f93b:	add    BYTE PTR [rax],dl
 100f93d:	jo     0x100f93f
 100f93f:	add    BYTE PTR [rcx],al
 100f941:	(bad)  
 100f942:	add    al,BYTE PTR [rax]
 100f944:	(bad)  
 100f945:	xor    al,BYTE PTR [rdx]
 100f947:	push   rax
 100f948:	or     DWORD PTR [rdx],ecx
 100f94a:	add    al,BYTE PTR [rax]
 100f94c:	or     dl,BYTE PTR [rdx+0x6]
 100f94f:	xor    BYTE PTR [rdx+0x6f],dl
 100f952:	add    BYTE PTR [rax],al
 100f954:	add    DWORD PTR [rax],eax
 100f956:	add    BYTE PTR [rax],al
 100f958:	fadd   st,st(1)
 100f95a:	add    BYTE PTR [rax],al
 100f95c:	inc    cl
 100f95e:	add    BYTE PTR [rax],al
 100f960:	adc    dl,al
 100f962:	add    BYTE PTR [rax],al
 100f964:	inc    cl
 100f966:	add    BYTE PTR [rax],al
 100f968:	add    DWORD PTR [rcx+rax*1],eax
 100f96b:	add    BYTE PTR [rdx+rdx*1],al
 100f96e:	add    BYTE PTR [rax],al
 100f970:	adc    DWORD PTR [rdi],edx
 100f972:	add    al,0x0
 100f974:	(bad)  
 100f975:	xor    al,0x8
 100f977:	add    BYTE PTR [rcx],cl
 100f979:	push   rdx
 100f97a:	add    dl,BYTE PTR [rax-0x10]
 100f97d:	push   0x0
 100f97f:	add    BYTE PTR [rax],ah
 100f981:	cmp    al,0x0
 100f983:	add    bh,bh
 100f985:	(bad)  
 100f986:	(bad)  
 100f987:	jmp    FWORD PTR [rsi-0x3fffff32]
 100f98d:	ret    0x0
 100f990:	(bad)  
 100f991:	(bad)  
 100f992:	(bad)  
 100f993:	jmp    rbp
 100f995:	ret    0x0
 100f998:	add    BYTE PTR [rax],al
 100f99a:	add    BYTE PTR [rax],al
 100f99c:	and    al,bl
 100f99e:	add    BYTE PTR [rax],al
 100f9a0:	(bad)  
 100f9a1:	(bad)  
 100f9a2:	(bad)  
 100f9a3:	inc    DWORD PTR [rcx]
 100f9a5:	or     DWORD PTR [rdx],eax
 100f9a7:	add    BYTE PTR [rcx],cl
 100f9a9:	xor    al,BYTE PTR [rdx]
 100f9ab:	push   rax
 100f9ac:	add    DWORD PTR [rcx],ecx
 100f9ae:	add    al,BYTE PTR [rax]
 100f9b0:	or     DWORD PTR [rdx],esi
 100f9b2:	add    dl,BYTE PTR [rax+0x1]
 100f9b5:	or     al,BYTE PTR [rax+rax*1]
 100f9b8:	or     dh,BYTE PTR [rsi+rax*1]
 100f9bb:	add    BYTE PTR [rdx],cl
 100f9bd:	xor    al,BYTE PTR [rsi]
 100f9bf:	jo     0x100f9c2
 100f9c1:	outs   dx,BYTE PTR ds:[rsi]
 100f9c2:	(bad)  
 100f9c3:	add    BYTE PTR [rsi+0x34],ch
 100f9c6:	(bad)  
 100f9c7:	add    BYTE PTR [rdx],cl
 100f9c9:	fs (bad) 
 100f9cb:	add    BYTE PTR [rdx],cl
 100f9cd:	xor    al,BYTE PTR [rsi]
 100f9cf:	jo     0x100f9d1
	...
 100f9d9:	add    BYTE PTR [rax],al
 100f9db:	add    al,dh
 100f9dd:	stc    
	...
 100f9ee:	add    BYTE PTR [rax],al
 100f9f0:	add    DWORD PTR [rax],eax
 100f9f2:	add    BYTE PTR [rax],al
 100f9f4:	add    dl,bh
	...
 100fa02:	add    BYTE PTR [rax],al
 100fa04:	add    BYTE PTR [rcx],dl
 100fa06:	add    DWORD PTR [rax],eax
 100fa08:	add    BYTE PTR [rax],al
 100fa0a:	add    BYTE PTR [rax],al
 100fa0c:	(bad)  
 100fa0d:	(bad)  
 100fa0e:	(bad)  
 100fa0f:	inc    DWORD PTR [rax]
 100fa11:	add    BYTE PTR [rax],al
 100fa13:	add    BYTE PTR [rax+rax*1],al
	...
 100fa26:	add    BYTE PTR [rax],al
 100fa28:	sbb    bl,bh
	...
 100fa32:	add    BYTE PTR [rax],al
 100fa34:	pop    rdx
 100fa35:	add    BYTE PTR [rcx],al
 100fa37:	add    BYTE PTR [rax],al
 100fa39:	adc    BYTE PTR [rax],al
 100fa3b:	add    BYTE PTR [rax-0x5],dl
	...
 100fa46:	add    BYTE PTR [rax],al
 100fa48:	add    eax,DWORD PTR ds:[rcx]
 100fa4b:	add    BYTE PTR [rax],bh
 100fa4d:	adc    BYTE PTR [rax],al
 100fa4f:	add    BYTE PTR [rax],ch
 100fa51:	inc    BYTE PTR [rax]
	...
 100fa5b:	add    BYTE PTR [rax*1+0x13100001],al
 100fa62:	add    BYTE PTR [rax],al
 100fa64:	enter  0xff,0x0
	...
 100fa70:	(bad)  
 100fa71:	add    eax,0x14b00001
 100fa76:	add    BYTE PTR [rax],al
 100fa78:	adc    BYTE PTR [rax],al
 100fa7a:	add    DWORD PTR [rax],eax
	...
 100fa84:	hlt    
 100fa85:	add    eax,0x14f80001
 100fa8a:	add    BYTE PTR [rax],al
 100fa8c:	cwde   
 100fa8d:	inc    DWORD PTR [rax]
	...
 100fa97:	add    dh,bh
 100fa99:	add    eax,0x14800001
 100fa9e:	add    BYTE PTR [rax],al
 100faa0:	fdivr  st,st(7)
	...
 100faaa:	add    BYTE PTR [rax],al
 100faac:	(bad)  
 100faad:	(bad)  
 100faae:	add    DWORD PTR [rax],eax
 100fab0:	rcl    BYTE PTR [rax+rax*1],0x0
 100fab4:	cmp    bl,bh
	...
 100fabe:	add    BYTE PTR [rax],al
 100fac0:	add    BYTE PTR [rdi],0x1
 100fac3:	add    BYTE PTR [rax],ah
 100fac5:	adc    BYTE PTR [rax],al
 100fac7:	add    BYTE PTR [rax],cl
 100fac9:	inc    BYTE PTR [rax]
	...
 100fad3:	add    dh,dl
 100fad5:	or     eax,DWORD PTR [rcx]
 100fad7:	add    al,dh
 100fad9:	adc    al,BYTE PTR [rax]
 100fadb:	add    BYTE PTR [rax+0xff],dh
 100fae1:	add    BYTE PTR [rax],al
 100fae3:	add    BYTE PTR [rax],al
 100fae5:	add    BYTE PTR [rax],al
 100fae7:	add    BYTE PTR [rdx],dl
 100fae9:	or     al,0x1
 100faeb:	add    BYTE PTR [rax-0x7ffffec],bl
 100faf1:	inc    DWORD PTR [rax]
	...
 100fafb:	add    BYTE PTR [rsp+rcx*1+0x1],al
 100faff:	add    al,ah
 100fb01:	adc    al,0x0
	...
 100fb17:	add    BYTE PTR [rsi],dh
 100fb19:	add    BYTE PTR [rcx],al
 100fb1b:	add    BYTE PTR [rax],al
 100fb1d:	add    BYTE PTR [rax],al
 100fb1f:	add    BYTE PTR [rsi+0x0],al
 100fb22:	add    DWORD PTR [rax],eax
 100fb24:	add    BYTE PTR [rax],al
 100fb26:	add    BYTE PTR [rax],al
 100fb28:	sub    BYTE PTR [rax],al
 100fb2a:	add    DWORD PTR [rax],eax
	...
 100fb38:	or     BYTE PTR [rdi],al
 100fb3a:	add    DWORD PTR [rax],eax
 100fb3c:	add    BYTE PTR [rax],al
 100fb3e:	add    BYTE PTR [rax],al
 100fb40:	nop
 100fb41:	(bad)  
 100fb42:	add    DWORD PTR [rax],eax
	...
 100fb50:	call   0x100fc55
 100fb55:	add    BYTE PTR [rax],al
 100fb57:	add    al,bh
 100fb59:	add    BYTE PTR [rcx],al
 100fb5b:	add    BYTE PTR [rax],al
 100fb5d:	add    BYTE PTR [rax],al
 100fb5f:	add    BYTE PTR [rsi],cl
 100fb61:	add    DWORD PTR [rcx],eax
 100fb63:	add    BYTE PTR [rax],al
 100fb65:	add    BYTE PTR [rax],al
 100fb67:	add    BYTE PTR [rax],ch
 100fb69:	add    DWORD PTR [rcx],eax
 100fb6b:	add    BYTE PTR [rax],al
 100fb6d:	add    BYTE PTR [rax],al
 100fb6f:	add    BYTE PTR [rax],bh
 100fb71:	add    DWORD PTR [rcx],eax
 100fb73:	add    BYTE PTR [rax],al
 100fb75:	add    BYTE PTR [rax],al
 100fb77:	add    BYTE PTR [rdx+0x1],cl
 100fb7a:	add    DWORD PTR [rax],eax
 100fb7c:	add    BYTE PTR [rax],al
 100fb7e:	add    BYTE PTR [rax],al
 100fb80:	pop    rax
 100fb81:	add    DWORD PTR [rcx],eax
 100fb83:	add    BYTE PTR [rax],al
 100fb85:	add    BYTE PTR [rax],al
 100fb87:	add    BYTE PTR [rax+0x1],ch
 100fb8a:	add    DWORD PTR [rax],eax
 100fb8c:	add    BYTE PTR [rax],al
 100fb8e:	add    BYTE PTR [rax],al
 100fb90:	je     0x100fb93
 100fb92:	add    DWORD PTR [rax],eax
 100fb94:	add    BYTE PTR [rax],al
 100fb96:	add    BYTE PTR [rax],al
 100fb98:	(bad)  
 100fb99:	add    DWORD PTR [rcx],eax
 100fb9b:	add    BYTE PTR [rax],al
 100fb9d:	add    BYTE PTR [rax],al
 100fb9f:	add    BYTE PTR [rcx+rax*1+0x1],dl
 100fba6:	add    BYTE PTR [rax],al
 100fba8:	movabs ds:0xb200000000000101,al
 100fbb1:	add    DWORD PTR [rcx],eax
 100fbb3:	add    BYTE PTR [rax],al
 100fbb5:	add    BYTE PTR [rax],al
 100fbb7:	add    ah,al
 100fbb9:	add    DWORD PTR [rcx],eax
 100fbbb:	add    BYTE PTR [rax],al
 100fbbd:	add    BYTE PTR [rax],al
 100fbbf:	add    dl,bl
 100fbc1:	add    DWORD PTR [rcx],eax
 100fbc3:	add    BYTE PTR [rax],al
 100fbc5:	add    BYTE PTR [rax],al
 100fbc7:	add    dl,dh
 100fbc9:	add    DWORD PTR [rcx],eax
 100fbcb:	add    BYTE PTR [rax],al
 100fbcd:	add    BYTE PTR [rax],al
 100fbcf:	add    BYTE PTR [rdx+rax*1],al
 100fbd2:	add    DWORD PTR [rax],eax
 100fbd4:	add    BYTE PTR [rax],al
 100fbd6:	add    BYTE PTR [rax],al
 100fbd8:	and    al,BYTE PTR [rdx]
 100fbda:	add    DWORD PTR [rax],eax
 100fbdc:	add    BYTE PTR [rax],al
 100fbde:	add    BYTE PTR [rax],al
 100fbe0:	xor    al,0x2
 100fbe2:	add    DWORD PTR [rax],eax
 100fbe4:	add    BYTE PTR [rax],al
 100fbe6:	add    BYTE PTR [rax],al
 100fbe8:	add    r8b,BYTE PTR [rcx]
 100fbeb:	add    BYTE PTR [rax],al
 100fbed:	add    BYTE PTR [rax],al
 100fbef:	add    BYTE PTR [rdx+rax*1+0x1],dl
 100fbf3:	add    BYTE PTR [rax],al
 100fbf5:	add    BYTE PTR [rax],al
 100fbf7:	add    BYTE PTR [rdx+0x2],ah
 100fbfa:	add    DWORD PTR [rax],eax
 100fbfc:	add    BYTE PTR [rax],al
 100fbfe:	add    BYTE PTR [rax],al
 100fc00:	js     0x100fc04
 100fc02:	add    DWORD PTR [rax],eax
 100fc04:	add    BYTE PTR [rax],al
 100fc06:	add    BYTE PTR [rax],al
 100fc08:	xchg   esi,eax
 100fc09:	add    al,BYTE PTR [rcx]
 100fc0b:	add    BYTE PTR [rax],al
 100fc0d:	add    BYTE PTR [rax],al
 100fc0f:	add    BYTE PTR [rdx+rax*1+0x1],ch
 100fc16:	add    BYTE PTR [rax],al
 100fc18:	enter  0x102,0x0
 100fc1c:	add    BYTE PTR [rax],al
 100fc1e:	add    BYTE PTR [rax],al
 100fc20:	loopne 0x100fc24
 100fc22:	add    DWORD PTR [rax],eax
 100fc24:	add    BYTE PTR [rax],al
 100fc26:	add    BYTE PTR [rax],al
 100fc28:	clc    
 100fc29:	add    al,BYTE PTR [rcx]
 100fc2b:	add    BYTE PTR [rax],al
 100fc2d:	add    BYTE PTR [rax],al
 100fc2f:	add    BYTE PTR [rax],cl
 100fc31:	add    eax,DWORD PTR [rcx]
 100fc33:	add    BYTE PTR [rax],al
 100fc35:	add    BYTE PTR [rax],al
 100fc37:	add    BYTE PTR [rdx],bl
 100fc39:	add    eax,DWORD PTR [rcx]
 100fc3b:	add    BYTE PTR [rax],al
 100fc3d:	add    BYTE PTR [rax],al
 100fc3f:	add    BYTE PTR [rax],dh
 100fc41:	add    eax,DWORD PTR [rcx]
 100fc43:	add    BYTE PTR [rax],al
 100fc45:	add    BYTE PTR [rax],al
 100fc47:	add    BYTE PTR [rax],cl
 100fc49:	or     eax,DWORD PTR [rcx]
 100fc4b:	add    BYTE PTR [rax],al
 100fc4d:	add    BYTE PTR [rax],al
 100fc4f:	add    ah,dh
 100fc51:	or     al,BYTE PTR [rcx]
 100fc53:	add    BYTE PTR [rax],al
 100fc55:	add    BYTE PTR [rax],al
 100fc57:	add    al,ah
 100fc59:	or     al,BYTE PTR [rcx]
 100fc5b:	add    BYTE PTR [rax],al
 100fc5d:	add    BYTE PTR [rax],al
 100fc5f:	add    dh,cl
 100fc61:	or     al,BYTE PTR [rcx]
 100fc63:	add    BYTE PTR [rax],al
 100fc65:	add    BYTE PTR [rax],al
 100fc67:	add    BYTE PTR [rdx+rcx*1+0x1],bh
 100fc6e:	add    BYTE PTR [rax],al
 100fc70:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 100fc71:	or     al,BYTE PTR [rcx]
 100fc73:	add    BYTE PTR [rax],al
 100fc75:	add    BYTE PTR [rax],al
 100fc77:	add    ah,dl
 100fc79:	add    BYTE PTR [rcx],al
 100fc7b:	add    BYTE PTR [rax],al
 100fc7d:	add    BYTE PTR [rax],al
 100fc7f:	add    BYTE PTR [rdx+rcx*1+0x1],al
 100fc86:	add    BYTE PTR [rax],al
 100fc88:	je     0x100fc94
 100fc8a:	add    DWORD PTR [rax],eax
 100fc8c:	add    BYTE PTR [rax],al
 100fc8e:	add    BYTE PTR [rax],al
 100fc90:	or     al,BYTE PTR fs:[rcx]
 100fc93:	add    BYTE PTR [rax],al
 100fc95:	add    BYTE PTR [rax],al
 100fc97:	add    BYTE PTR [rdx+rcx*1+0x1],dl
 100fc9b:	add    BYTE PTR [rax],al
 100fc9d:	add    BYTE PTR [rax],al
 100fc9f:	add    BYTE PTR [rdx+rcx*1],bh
 100fca2:	add    DWORD PTR [rax],eax
 100fca4:	add    BYTE PTR [rax],al
 100fca6:	add    BYTE PTR [rax],al
 100fca8:	sub    al,0xa
 100fcaa:	add    DWORD PTR [rax],eax
 100fcac:	add    BYTE PTR [rax],al
 100fcae:	add    BYTE PTR [rax],al
 100fcb0:	sbb    cl,BYTE PTR [rdx]
 100fcb2:	add    DWORD PTR [rax],eax
 100fcb4:	add    BYTE PTR [rax],al
 100fcb6:	add    BYTE PTR [rax],al
 100fcb8:	or     BYTE PTR [rdx],cl
 100fcba:	add    DWORD PTR [rax],eax
 100fcbc:	add    BYTE PTR [rax],al
 100fcbe:	add    BYTE PTR [rax],al
 100fcc0:	test   BYTE PTR [rcx],0x1
 100fcc3:	add    BYTE PTR [rax],al
 100fcc5:	add    BYTE PTR [rax],al
 100fcc7:	add    dh,ah
 100fcc9:	or     DWORD PTR [rcx],eax
 100fccb:	add    BYTE PTR [rax],al
 100fccd:	add    BYTE PTR [rax],al
 100fccf:	add    dl,dl
 100fcd1:	or     DWORD PTR [rcx],eax
 100fcd3:	add    BYTE PTR [rax],al
 100fcd5:	add    BYTE PTR [rax],al
 100fcd7:	add    BYTE PTR [rcx+rcx*1+0x1],bh
 100fcde:	add    BYTE PTR [rax],al
 100fce0:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 100fce1:	or     DWORD PTR [rcx],eax
 100fce3:	add    BYTE PTR [rax],al
 100fce5:	add    BYTE PTR [rax],al
 100fce7:	add    BYTE PTR [rdx+0x109],cl
 100fced:	add    BYTE PTR [rax],al
 100fcef:	add    BYTE PTR [rax+0x9],bh
 100fcf2:	add    DWORD PTR [rax],eax
 100fcf4:	add    BYTE PTR [rax],al
 100fcf6:	add    BYTE PTR [rax],al
 100fcf8:	or     DWORD PTR fs:[rcx],eax
 100fcfb:	add    BYTE PTR [rax],al
 100fcfd:	add    BYTE PTR [rax],al
 100fcff:	add    BYTE PTR [rsi+0x9],cl
 100fd02:	add    DWORD PTR [rax],eax
 100fd04:	add    BYTE PTR [rax],al
 100fd06:	add    BYTE PTR [rax],al
 100fd08:	rex.X or DWORD PTR [rcx],eax
 100fd0b:	add    BYTE PTR [rax],al
 100fd0d:	add    BYTE PTR [rax],al
 100fd0f:	add    BYTE PTR [rdx],dh
 100fd11:	or     DWORD PTR [rcx],eax
 100fd13:	add    BYTE PTR [rax],al
 100fd15:	add    BYTE PTR [rax],al
 100fd17:	add    BYTE PTR [rax],ah
 100fd19:	or     DWORD PTR [rcx],eax
 100fd1b:	add    BYTE PTR [rax],al
 100fd1d:	add    BYTE PTR [rax],al
 100fd1f:	add    BYTE PTR [rcx+rcx*1],dl
 100fd22:	add    DWORD PTR [rax],eax
 100fd24:	add    BYTE PTR [rax],al
 100fd26:	add    BYTE PTR [rax],al
 100fd28:	(bad)  
 100fd29:	or     DWORD PTR [rcx],eax
 100fd2b:	add    BYTE PTR [rax],al
 100fd2d:	add    BYTE PTR [rax],al
 100fd2f:	add    dl,bh
 100fd31:	or     BYTE PTR [rcx],al
 100fd33:	add    BYTE PTR [rax],al
 100fd35:	add    BYTE PTR [rax],al
 100fd37:	add    dh,ch
 100fd39:	or     BYTE PTR [rcx],al
 100fd3b:	add    BYTE PTR [rax],al
 100fd3d:	add    BYTE PTR [rax],al
 100fd3f:	add    al,ah
 100fd41:	or     BYTE PTR [rcx],al
 100fd43:	add    BYTE PTR [rax],al
 100fd45:	add    BYTE PTR [rax],al
 100fd47:	add    BYTE PTR [rax+0x108],bh
 100fd4d:	add    BYTE PTR [rax],al
 100fd4f:	add    BYTE PTR [rsi+0x108],bl
 100fd55:	add    BYTE PTR [rax],al
 100fd57:	add    BYTE PTR [rax+0x108],cl
 100fd5d:	add    BYTE PTR [rax],al
 100fd5f:	add    BYTE PTR [rax+0x8],bh
 100fd62:	add    DWORD PTR [rax],eax
 100fd64:	add    BYTE PTR [rax],al
 100fd66:	add    BYTE PTR [rax],al
 100fd68:	pop    rsi
 100fd69:	or     BYTE PTR [rcx],al
 100fd6b:	add    BYTE PTR [rax],al
 100fd6d:	add    BYTE PTR [rax],al
 100fd6f:	add    BYTE PTR [rsi+0x8],cl
 100fd72:	add    DWORD PTR [rax],eax
 100fd74:	add    BYTE PTR [rax],al
 100fd76:	add    BYTE PTR [rax],al
 100fd78:	cmp    cl,BYTE PTR [rax]
 100fd7a:	add    DWORD PTR [rax],eax
 100fd7c:	add    BYTE PTR [rax],al
 100fd7e:	add    BYTE PTR [rax],al
 100fd80:	and    BYTE PTR [rax],cl
 100fd82:	add    DWORD PTR [rax],eax
 100fd84:	add    BYTE PTR [rax],al
 100fd86:	add    BYTE PTR [rax],al
 100fd88:	or     al,0x8
 100fd8a:	add    DWORD PTR [rax],eax
 100fd8c:	add    BYTE PTR [rax],al
 100fd8e:	add    BYTE PTR [rax],al
 100fd90:	enter  0x100,0x0
 100fd94:	add    BYTE PTR [rax],al
 100fd96:	add    BYTE PTR [rax],al
 100fd98:	mov    eax,0x100
 100fd9d:	add    BYTE PTR [rax],al
 100fd9f:	add    BYTE PTR [rax+rax*1+0x1],ah
 100fda6:	add    BYTE PTR [rax],al
 100fda8:	mov    WORD PTR [rax],es
 100fdaa:	add    DWORD PTR [rax],eax
 100fdac:	add    BYTE PTR [rax],al
 100fdae:	add    BYTE PTR [rax],al
 100fdb0:	clc    
 100fdb1:	(bad)  
 100fdb2:	add    DWORD PTR [rax],eax
 100fdb4:	add    BYTE PTR [rax],al
 100fdb6:	add    BYTE PTR [rax],al
 100fdb8:	fadd   QWORD PTR [rdi]
 100fdba:	add    DWORD PTR [rax],eax
 100fdbc:	add    BYTE PTR [rax],al
 100fdbe:	add    BYTE PTR [rax],al
 100fdc0:	enter  0x107,0x0
 100fdc4:	add    BYTE PTR [rax],al
 100fdc6:	add    BYTE PTR [rax],al
 100fdc8:	mov    ah,0x7
 100fdca:	add    DWORD PTR [rax],eax
 100fdcc:	add    BYTE PTR [rax],al
 100fdce:	add    BYTE PTR [rax],al
 100fdd0:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 100fdd1:	(bad)  
 100fdd2:	add    DWORD PTR [rax],eax
 100fdd4:	add    BYTE PTR [rax],al
 100fdd6:	add    BYTE PTR [rax],al
 100fdd8:	pushf  
 100fdd9:	(bad)  
 100fdda:	add    DWORD PTR [rax],eax
 100fddc:	add    BYTE PTR [rax],al
 100fdde:	add    BYTE PTR [rax],al
 100fde0:	jp     0x100fde2
 100fde2:	add    DWORD PTR [rax],eax
 100fde4:	add    BYTE PTR [rax],al
 100fde6:	add    BYTE PTR [rax],al
 100fde8:	push   0x100
 100fded:	add    BYTE PTR [rax],al
 100fdef:	add    BYTE PTR [rdx+0x10a],dl
 100fdf5:	add    BYTE PTR [rax],al
 100fdf7:	add    BYTE PTR [rax+0xc],dl
 100fdfa:	add    DWORD PTR [rax],eax
	...
 100fe08:	stos   BYTE PTR es:[rdi],al
 100fe09:	or     eax,DWORD PTR [rcx]
 100fe0b:	add    BYTE PTR [rax],al
 100fe0d:	add    BYTE PTR [rax],al
 100fe0f:	add    BYTE PTR [rax+0x10b],dl
 100fe15:	add    BYTE PTR [rax],al
 100fe17:	add    BYTE PTR [rbx+rcx*1+0x1],dh
	...
 100fe27:	add    BYTE PTR [rbx+rax*1+0x1],cl
 100fe2e:	add    BYTE PTR [rax],al
 100fe30:	jbe    0x100fe35
 100fe32:	add    DWORD PTR [rax],eax
 100fe34:	add    BYTE PTR [rax],al
 100fe36:	add    BYTE PTR [rax],al
 100fe38:	add    eax,DWORD PTR fs:[rcx]
 100fe3b:	add    BYTE PTR [rax],al
 100fe3d:	add    BYTE PTR [rax],al
 100fe3f:	add    BYTE PTR [rbx+rax*1+0x1],bl
 100fe43:	add    BYTE PTR [rax],al
 100fe45:	add    BYTE PTR [rax],al
 100fe47:	add    BYTE PTR [rdx+0x103],ah
 100fe4d:	add    BYTE PTR [rax],al
 100fe4f:	add    BYTE PTR [rbx+rcx*1],bl
 100fe52:	add    DWORD PTR [rax],eax
 100fe54:	add    BYTE PTR [rax],al
 100fe56:	add    BYTE PTR [rax],al
 100fe58:	sub    cl,BYTE PTR [rbx]
 100fe5a:	add    DWORD PTR [rax],eax
 100fe5c:	add    BYTE PTR [rax],al
 100fe5e:	add    BYTE PTR [rax],al
 100fe60:	xor    al,0xb
 100fe62:	add    DWORD PTR [rax],eax
 100fe64:	add    BYTE PTR [rax],al
 100fe66:	add    BYTE PTR [rax],al
 100fe68:	or     r8d,DWORD PTR [rcx]
 100fe6b:	add    BYTE PTR [rax],al
 100fe6d:	add    BYTE PTR [rax],al
 100fe6f:	add    BYTE PTR [rbx+rcx*1+0x1],dl
 100fe73:	add    BYTE PTR [rax],al
 100fe75:	add    BYTE PTR [rax],al
 100fe77:	add    BYTE PTR [rbx+rcx*1+0x1],ah
 100fe7b:	add    BYTE PTR [rax],al
 100fe7d:	add    BYTE PTR [rax],al
 100fe7f:	add    BYTE PTR [rdx+0x103],ch
 100fe85:	add    BYTE PTR [rax],al
 100fe87:	add    BYTE PTR [rsi+0x103],dh
 100fe8d:	add    BYTE PTR [rax],al
 100fe8f:	add    dl,al
 100fe91:	add    eax,DWORD PTR [rcx]
 100fe93:	add    BYTE PTR [rax],al
 100fe95:	add    BYTE PTR [rax],al
 100fe97:	add    ah,cl
 100fe99:	add    eax,DWORD PTR [rcx]
 100fe9b:	add    BYTE PTR [rax],al
 100fe9d:	add    BYTE PTR [rax],al
 100fe9f:	add    dl,bl
 100fea1:	add    eax,DWORD PTR [rcx]
 100fea3:	add    BYTE PTR [rax],al
 100fea5:	add    BYTE PTR [rax],al
 100fea7:	add    al,ch
 100fea9:	add    eax,DWORD PTR [rcx]
 100feab:	add    BYTE PTR [rax],al
 100fead:	add    BYTE PTR [rax],al
 100feaf:	add    ah,dh
 100feb1:	add    eax,DWORD PTR [rcx]
 100feb3:	add    BYTE PTR [rax],al
 100feb5:	add    BYTE PTR [rax],al
 100feb7:	add    BYTE PTR [rsi],al
 100feb9:	add    al,0x1
 100febb:	add    BYTE PTR [rax],al
 100febd:	add    BYTE PTR [rax],al
 100febf:	add    BYTE PTR [rax],dl
 100fec1:	add    al,0x1
 100fec3:	add    BYTE PTR [rax],al
 100fec5:	add    BYTE PTR [rax],al
 100fec7:	add    BYTE PTR [rsp+rax*1],bl
 100feca:	add    DWORD PTR [rax],eax
 100fecc:	add    BYTE PTR [rax],al
 100fece:	add    BYTE PTR [rax],al
 100fed0:	sub    al,BYTE PTR [rcx+rax*1]
 100fed3:	add    BYTE PTR [rax],al
 100fed5:	add    BYTE PTR [rax],al
 100fed7:	add    BYTE PTR [rax],bh
 100fed9:	add    al,0x1
 100fedb:	add    BYTE PTR [rax],al
 100fedd:	add    BYTE PTR [rax],al
 100fedf:	add    BYTE PTR [rdx+0x4],cl
 100fee2:	add    DWORD PTR [rax],eax
 100fee4:	add    BYTE PTR [rax],al
 100fee6:	add    BYTE PTR [rax],al
 100fee8:	(bad)  
 100fee9:	add    al,0x1
 100feeb:	add    BYTE PTR [rax],al
 100feed:	add    BYTE PTR [rax],al
 100feef:	add    BYTE PTR [rax+0x4],dh
 100fef2:	add    DWORD PTR [rax],eax
 100fef4:	add    BYTE PTR [rax],al
 100fef6:	add    BYTE PTR [rax],al
 100fef8:	js     0x100fefe
 100fefa:	add    DWORD PTR [rax],eax
 100fefc:	add    BYTE PTR [rax],al
 100fefe:	add    BYTE PTR [rax],al
 100ff00:	(bad)  
 100ff01:	add    al,0x1
 100ff03:	add    BYTE PTR [rax],al
 100ff05:	add    BYTE PTR [rax],al
 100ff07:	add    BYTE PTR [rdx+0x104],cl
 100ff0d:	add    BYTE PTR [rax],al
 100ff0f:	add    BYTE PTR [rax+0x104],bl
 100ff15:	add    BYTE PTR [rax],al
 100ff17:	add    BYTE PTR [rsp+rax*1+0x1],ah
 100ff1e:	add    BYTE PTR [rax],al
 100ff20:	mov    dl,0x4
 100ff22:	add    DWORD PTR [rax],eax
 100ff24:	add    BYTE PTR [rax],al
 100ff26:	add    BYTE PTR [rax],al
 100ff28:	enter  0x104,0x0
 100ff2c:	add    BYTE PTR [rax],al
 100ff2e:	add    BYTE PTR [rax],al
 100ff30:	fadd   QWORD PTR [rcx+rax*1]
 100ff33:	add    BYTE PTR [rax],al
 100ff35:	add    BYTE PTR [rax],al
 100ff37:	add    al,ch
 100ff39:	add    al,0x1
 100ff3b:	add    BYTE PTR [rax],al
 100ff3d:	add    BYTE PTR [rax],al
 100ff3f:	add    dl,dh
 100ff41:	add    al,0x1
 100ff43:	add    BYTE PTR [rax],al
 100ff45:	add    BYTE PTR [rax],al
 100ff47:	add    BYTE PTR [rdx],dl
 100ff49:	add    eax,0x1
 100ff4e:	add    BYTE PTR [rax],al
 100ff50:	es add eax,0x1
 100ff56:	add    BYTE PTR [rax],al
 100ff58:	cmp    al,0x5
 100ff5a:	add    DWORD PTR [rax],eax
 100ff5c:	add    BYTE PTR [rax],al
 100ff5e:	add    BYTE PTR [rax],al
 100ff60:	rex.RX add eax,0x1
 100ff66:	add    BYTE PTR [rax],al
 100ff68:	push   rsp
 100ff69:	add    eax,0x1
 100ff6e:	add    BYTE PTR [rax],al
 100ff70:	pop    rsp
 100ff71:	add    eax,0x1
 100ff76:	add    BYTE PTR [rax],al
 100ff78:	add    ax,0x1
 100ff7c:	add    BYTE PTR [rax],al
 100ff7e:	add    BYTE PTR [rax],al
 100ff80:	pushf  
 100ff81:	add    eax,0x1
 100ff86:	add    BYTE PTR [rax],al
 100ff88:	add    r8,QWORD PTR [rcx]
	...
 100ff97:	add    BYTE PTR [rax+rax*1],al
 100ff9a:	add    BYTE PTR [rax],al
 100ff9c:	add    BYTE PTR [rax],al
 100ff9e:	add    BYTE PTR [rax+0x6],al
 100ffa4:	add    BYTE PTR [rax],al
 100ffa6:	add    BYTE PTR [rax+0x0],al
 100ffac:	add    BYTE PTR [rax],al
 100ffae:	add    BYTE PTR [rax],al
 100ffb0:	cli    
 100ffb1:	or     eax,DWORD PTR [rcx]
 100ffb3:	add    BYTE PTR [rax],al
 100ffb5:	add    BYTE PTR [rax],al
 100ffb7:	add    ah,ah
 100ffb9:	or     eax,DWORD PTR [rcx]
	...
 100ffc7:	add    BYTE PTR [rsi+0x105],ch
	...
 100ffd5:	add    BYTE PTR [rax],al
 100ffd7:	add    BYTE PTR [rax+0x6],bl
 100ffda:	add    DWORD PTR [rax],eax
 100ffdc:	add    BYTE PTR [rax],al
 100ffde:	add    BYTE PTR [rax],al
 100ffe0:	ds (bad) 
 100ffe2:	add    DWORD PTR [rax],eax
 100ffe4:	add    BYTE PTR [rax],al
 100ffe6:	add    BYTE PTR [rax],al
 100ffe8:	or     al,0x6
 100ffea:	add    DWORD PTR [rax],eax
	...
 100fff8:	xor    cl,BYTE PTR [rcx+rax*1]
 100fffb:	add    BYTE PTR [rax],al
 100fffd:	add    BYTE PTR [rax],al
 100ffff:	add    BYTE PTR [rsp+rcx*1],bl
 1010002:	add    DWORD PTR [rax],eax
	...
 1010010:	loop   0x1010017
 1010012:	add    DWORD PTR [rax],eax
 1010014:	add    BYTE PTR [rax],al
 1010016:	add    BYTE PTR [rax],al
 1010018:	rol    BYTE PTR [rip+0x1],1        # 0x101001f
	...
 1010026:	add    BYTE PTR [rax],al
 1010028:	xor    BYTE PTR [rdx],al
 101002a:	push   rdx
 101002b:	gs rex.XB ins BYTE PTR es:[edi],dx
 101002f:	outs   dx,DWORD PTR ds:[rsi]
 1010030:	jae    0x1010097
 1010032:	rex.WXB
 1010033:	gs jns 0x1010036
 1010036:	(bad)  
 1010037:	add    dl,BYTE PTR [rdx+0x65]
 101003a:	addr32 rex.WRXB jo 0x10100a3
 101003e:	outs   dx,BYTE PTR ds:[rsi]
 101003f:	rex.WXB
 1010040:	gs jns 0x1010088
 1010043:	js     0x101009c
 1010045:	add    BYTE PTR [rsi+0x2],ch
 1010048:	push   rdx
 1010049:	gs addr32 push rcx
 101004c:	jne    0x10100b3
 101004e:	jb     0x10100c9
 1010050:	push   rsi
 1010051:	(bad)  
 1010052:	ins    BYTE PTR es:[rdi],dx
 1010053:	jne    0x10100ba
 1010055:	rex.RB js 0x10100af
 1010058:	add    BYTE PTR [rax],al
 101005a:	rex.B
 101005b:	rex.R push rsi
 101005d:	push   r8
 101005f:	xor    rsi,QWORD PTR [r10]
 1010062:	cs fs ins BYTE PTR es:[rdi],dx
 1010065:	ins    BYTE PTR es:[rdi],dx
 1010066:	add    BYTE PTR [rax],al
 1010068:	rex.WR add r8b,BYTE PTR [rdi+0x65]
 101006c:	je     0x10100be
 101006e:	jb     0x10100df
 1010070:	movsxd eax,DWORD PTR [rcx+0x64]
 1010073:	fs jb  0x10100db
 1010076:	jae    0x10100eb
 1010078:	add    BYTE PTR [rax],al
 101007a:	mov    ah,0x3
 101007c:	push   rdx
 101007d:	(bad)  
 101007e:	imul   esi,DWORD PTR [rbx+0x65],0x65637845
 1010085:	jo     0x10100fb
 1010087:	imul   ebp,DWORD PTR [rdi+0x6e],0xd20000
 101008e:	rex.R
 101008f:	gs ins BYTE PTR es:[rdi],dx
 1010091:	gs je  0x10100f9
 1010094:	rex.XB jb 0x1010100
 1010097:	je     0x1010102
 1010099:	movsxd esp,DWORD PTR [rcx+0x6c]
 101009c:	push   rbx
 101009d:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 10100a2:	outs   dx,BYTE PTR ds:[rsi]
 10100a3:	add    BYTE PTR [rsi],bl
 10100a5:	add    al,BYTE PTR [rdi+0x65]
 10100a8:	je     0x10100f7
 10100aa:	outs   dx,DWORD PTR ds:[rsi]
 10100ab:	fs jne 0x101011a
 10100ae:	gs rex.W (bad) 
 10100b1:	outs   dx,BYTE PTR ds:[rsi]
 10100b2:	fs ins BYTE PTR es:[rdi],dx
 10100b4:	gs push rdi
 10100b6:	add    BYTE PTR [rax],al
 10100b8:	push   rsi
 10100b9:	add    ecx,DWORD PTR [rdi+rbp*2+0x63]
 10100bd:	imul   edx,DWORD PTR [rdx+0x65],0x73
 10100c1:	outs   dx,DWORD PTR ds:[rsi]
 10100c2:	jne    0x1010136
 10100c4:	movsxd esp,DWORD PTR [rbp+0x0]
 10100c7:	add    BYTE PTR [rdx+0x3],cl
 10100ca:	rex.WR outs dx,DWORD PTR ds:[rsi]
 10100cc:	movsxd esp,DWORD PTR [rcx+0x6c]
 10100cf:	rex.RX jb 0x1010137
 10100d2:	gs add bh,ah
 10100d5:	add    DWORD PTR [rdi+0x65],eax
 10100d8:	je     0x101011f
 10100da:	js     0x1010145
 10100dc:	je     0x1010121
 10100de:	outs   dx,DWORD PTR ds:[rsi]
 10100df:	fs gs push rsp
 10100e2:	push   0x64616572
 10100e7:	add    BYTE PTR [rax],cl
 10100e9:	add    al,BYTE PTR [rdi+0x65]
 10100ec:	je     0x101013a
 10100ee:	(bad)  
 10100ef:	jae    0x1010165
 10100f1:	rex.RB jb 0x1010166
 10100f4:	outs   dx,DWORD PTR ds:[rsi]
 10100f5:	jb     0x10100f7
 10100f7:	add    BYTE PTR [rax],cl
 10100f9:	add    eax,0x74696157
 10100fe:	rex.RX outs dx,DWORD PTR ds:[rsi]
 1010100:	jb     0x1010155
 1010102:	imul   ebp,DWORD PTR [rsi+0x67],0x624f656c
 1010109:	push   0x65
 101010b:	movsxd esi,DWORD PTR [rax+rax*1+0x6]
 101010f:	add    eax,0x74696157
 1010114:	rex.RX outs dx,DWORD PTR ds:[rsi]
 1010116:	jb     0x1010165
 1010118:	jne    0x1010186
 101011a:	je     0x1010185
 101011c:	jo     0x101018a
 101011e:	gs rex.WRXB (bad) 
 1010121:	push   0x65
 1010123:	movsxd esi,DWORD PTR [rbx+rsi*2+0x0]
 1010127:	add    BYTE PTR [rbx+0x3],al
 101012a:	rex.WR outs dx,DWORD PTR ds:[rsi]
 101012c:	(bad)  
 101012d:	fs push rdx
 101012f:	gs jae 0x10101a1
 1010132:	jne    0x10101a6
 1010134:	movsxd esp,DWORD PTR [rbp+0x0]
 1010137:	add    BYTE PTR [rdi+0x7a695304],bh
 101013d:	outs   dx,DWORD PTR gs:[rsi]
 101013f:	push   dx
 1010141:	gs jae 0x10101b3
 1010144:	jne    0x10101b8
 1010146:	movsxd esp,DWORD PTR [rbp+0x0]
 1010149:	add    dl,bh
 101014b:	add    DWORD PTR [rdi+0x65],eax
 101014e:	je     0x1010196
 1010150:	imul   ebp,DWORD PTR [rbp+riz*2+0x54],0x657079
 1010158:	imul   eax,DWORD PTR [rdx],0x47
 101015b:	gs je  0x10101b1
 101015e:	je     0x10101c4
 1010160:	rex.W (bad) 
 1010162:	outs   dx,BYTE PTR ds:[rsi]
 1010163:	fs ins BYTE PTR es:[rdi],dx
 1010165:	add    BYTE PTR gs:[rax],al
 1010168:	xor    al,0x5
 101016a:	push   rdi
 101016b:	jb     0x10101d6
 101016d:	je     0x10101d4
 101016f:	imul   r13d,DWORD PTR [rbp+r12*2+0x0],0x6c430052
 1010178:	outs   dx,DWORD PTR ds:[rsi]
 1010179:	jae    0x10101e0
 101017b:	rex.W (bad) 
 101017d:	outs   dx,BYTE PTR ds:[rsi]
 101017e:	fs ins BYTE PTR es:[rdi],dx
 1010180:	add    BYTE PTR gs:[rcx+rax*1+0x46],ah
 1010185:	outs   dx,DWORD PTR ds:[rsi]
 1010186:	jb     0x10101f5
 1010188:	(bad)  
 1010189:	je     0x10101d8
 101018b:	gs jae 0x1010201
 101018e:	(bad)  
 101018f:	addr32 gs push rdi
 1010192:	add    BYTE PTR [rax],al
 1010194:	ja     0x1010199
 1010196:	rex.WRXB jo 0x10101fe
 1010199:	outs   dx,BYTE PTR ds:[rsi]
 101019a:	rex.RB jbe 0x1010202
 101019d:	outs   dx,BYTE PTR ds:[rsi]
 101019e:	je     0x10101f7
 10101a0:	add    BYTE PTR [rax],al
 10101a2:	push   rsp
 10101a3:	add    DWORD PTR [rsi+0x69],eax
 10101a6:	outs   dx,BYTE PTR ds:[rsi]
 10101a7:	fs push rdx
 10101a9:	gs jae 0x101021b
 10101ac:	jne    0x1010220
 10101ae:	movsxd esp,DWORD PTR [rbp+0x57]
 10101b1:	add    BYTE PTR [rbx+0x1],dl
 10101b4:	rex.RX imul r13d,DWORD PTR [rsi+0x64],0x6f736552
 10101bc:	jne    0x1010230
 10101be:	movsxd esp,DWORD PTR [rbp+0x45]
 10101c1:	js     0x101021a
 10101c3:	add    BYTE PTR [rax],ah
 10101c5:	add    eax,0x65646957
 10101ca:	rex.XB push 0x6f547261
 10101d0:	rex.WRB jne 0x101023f
 10101d3:	je     0x101023e
 10101d5:	rex.X jns 0x101024c
 10101d8:	add    BYTE PTR gs:[rdx+rax*1+0x55746547],ah
 10101e0:	jae    0x1010247
 10101e2:	jb     0x1010228
 10101e4:	gs data16 (bad) 
 10101e7:	jne    0x1010255
 10101e9:	je     0x1010237
 10101eb:	(bad)  
 10101ec:	outs   dx,BYTE PTR ds:[rsi]
 10101ed:	addr32 rex.WB
 10101ef:	add    BYTE PTR [rax],r8b
 10101f2:	mov    dl,0x1
 10101f4:	rex.RXB
 10101f5:	gs je  0x101023b
 10101f8:	outs   dx,DWORD PTR ds:[rsi]
 10101f9:	outs   dx,BYTE PTR ds:[rsi]
 10101fa:	jae    0x101026b
 10101fc:	ins    BYTE PTR es:[rdi],dx
 10101fd:	rex.WRB outs dx,DWORD PTR gs:[rsi]
 1010200:	fs add BYTE PTR gs:[rax],al
 1010204:	mov    eax,0x74654701
 1010209:	rex.XB outs dx,DWORD PTR ds:[rsi]
 101020b:	outs   dx,BYTE PTR ds:[rsi]
 101020c:	jae    0x101027d
 101020e:	ins    BYTE PTR es:[rdi],dx
 101020f:	gs push rbx
 1010211:	movsxd esi,DWORD PTR [rdx+0x65]
 1010214:	outs   dx,BYTE PTR gs:[rsi]
 1010216:	rex.X jne 0x101027f
 1010219:	data16 gs jb 0x1010266
 101021d:	outs   dx,BYTE PTR ds:[rsi]
 101021e:	outs   dx,WORD PTR ds:[rsi]
 1010220:	add    BYTE PTR [rax],al
 1010222:	rex.WXB add al,0x53
 1010225:	gs je  0x101026b
 1010228:	outs   dx,DWORD PTR ds:[rsi]
 1010229:	outs   dx,BYTE PTR ds:[rsi]
 101022a:	jae    0x101029b
 101022c:	ins    BYTE PTR es:[rdi],dx
 101022d:	rex.WRB outs dx,DWORD PTR gs:[rsi]
 1010230:	fs add BYTE PTR gs:[rax],al
 1010234:	xor    eax,DWORD PTR [rip+0x74697257]        # 0x756a7491
 101023a:	rex.XB outs dx,DWORD PTR gs:[rsi]
 101023d:	outs   dx,BYTE PTR ds:[rsi]
 101023e:	jae    0x10102af
 1010240:	ins    BYTE PTR es:[rdi],dx
 1010241:	gs push rdi
 1010243:	add    BYTE PTR [rax+0x74654701],ah
 1010249:	rex.XB outs dx,DWORD PTR ds:[rsi]
 101024b:	outs   dx,BYTE PTR ds:[rsi]
 101024c:	jae    0x10102bd
 101024e:	ins    BYTE PTR es:[rdi],dx
 101024f:	gs rex.XB push r8
 1010252:	add    BYTE PTR [rax],al
 1010254:	push   0x65724601
 1010259:	imul   r12,QWORD PTR gs:[rdx+0x72],0x797261
 1010262:	fild   DWORD PTR [rdx]
 1010264:	rex.W
 1010265:	gs (bad) 
 1010267:	jo     0x10102bc
 1010269:	gs je  0x10102b5
 101026c:	outs   dx,BYTE PTR ds:[rsi]
 101026d:	outs   dx,WORD PTR ds:[rsi]
 101026f:	jb     0x10102de
 1010271:	(bad)  
 1010272:	je     0x10102dd
 1010274:	outs   dx,DWORD PTR ds:[rsi]
 1010275:	outs   dx,BYTE PTR ds:[rsi]
 1010276:	add    BYTE PTR [rax],al
 1010278:	mov    bl,0x4
 101027a:	push   rbx
 101027b:	gs je  0x10102d3
 101027e:	outs   dx,BYTE PTR ds:[rsi]
 101027f:	push   0x6c646e61
 1010284:	gs fs rex.RB js 0x10102ec
 1010289:	gs jo  0x1010300
 101028c:	imul   ebp,DWORD PTR [rdi+0x6e],0x746c6946
 1010293:	gs jb  0x1010296
 1010296:	retf   
 1010297:	add    DWORD PTR [rdi+0x65],eax
 101029a:	je     0x10102df
 101029c:	jne    0x1010310
 101029e:	jb     0x1010305
 10102a0:	outs   dx,BYTE PTR ds:[rsi]
 10102a1:	je     0x10102f7
 10102a3:	push   0x64616572
 10102a8:	rex.WB
 10102a9:	add    BYTE PTR fs:[rax],al
 10102ac:	(bad)  
 10102ad:	add    cl,BYTE PTR [rcx+0x6e]
 10102b0:	imul   esi,DWORD PTR [rcx+rbp*2+0x61],0x657a696c
 10102b8:	rex.XB jb 0x1010324
 10102bb:	je     0x1010326
 10102bd:	movsxd esp,DWORD PTR [rcx+0x6c]
 10102c0:	push   rbx
 10102c1:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 10102c6:	outs   dx,BYTE PTR ds:[rsi]
 10102c7:	add    dl,dh
 10102c9:	add    BYTE PTR [rbp+0x6e],al
 10102cc:	je     0x1010333
 10102ce:	jb     0x1010313
 10102d0:	jb     0x101033b
 10102d2:	je     0x101033d
 10102d4:	movsxd esp,DWORD PTR [rcx+0x6c]
 10102d7:	push   rbx
 10102d8:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 10102dd:	outs   dx,BYTE PTR ds:[rsi]
 10102de:	add    BYTE PTR [rax],al
 10102e0:	cmp    eax,DWORD PTR [rbx]
 10102e2:	rex.WR
 10102e3:	gs (bad) 
 10102e5:	jbe    0x101034c
 10102e7:	rex.XB jb 0x1010353
 10102ea:	je     0x1010355
 10102ec:	movsxd esp,DWORD PTR [rcx+0x6c]
 10102ef:	push   rbx
 10102f0:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 10102f5:	outs   dx,BYTE PTR ds:[rsi]
 10102f6:	add    BYTE PTR [rax],al
 10102f8:	add    ecx,DWORD PTR [r15+rbp*2+0x61]
 10102fd:	imul   r12,QWORD PTR fs:[rdx+0x72],0x57797261
 1010306:	add    BYTE PTR [rax],al
 1010308:	lea    eax,[rcx]
 101030a:	rex.RXB
 101030b:	gs je  0x1010351
 101030e:	outs   dx,DWORD PTR ds:[rsi]
 101030f:	ins    DWORD PTR es:[rdi],dx
 1010310:	ins    DWORD PTR es:[rdi],dx
 1010311:	(bad)  
 1010312:	outs   dx,BYTE PTR ds:[rsi]
 1010313:	imul   r13,QWORD PTR fs:[rsi+0x65],0x2770057
 101031c:	rex.RXB
 101031d:	gs je  0x1010373
 1010320:	jns    0x1010395
 1010322:	je     0x1010389
 1010324:	ins    DWORD PTR es:[rdi],dx
 1010325:	imul   r14d,DWORD PTR [rdx+0x65],0x726f7463
 101032d:	jns    0x1010386
 101032f:	add    BYTE PTR [rdi+0x65724300],cl
 1010335:	(bad)  
 1010336:	je     0x101039d
 1010338:	imul   r13d,DWORD PTR [rbp+r12*2+0x57],0x52454b00
 1010341:	rex.WRX
 1010342:	rex.RB
 1010343:	xor    r14,QWORD PTR [rdx]
 1010346:	cs fs ins BYTE PTR es:[rdi],dx
 1010349:	ins    BYTE PTR es:[rdi],dx
 101034a:	add    BYTE PTR [rax],al
 101034c:	add    BYTE PTR gs:[rdi],bh
 101034f:	(bad)  
 1010350:	xor    eax,DWORD PTR [rax+0x59]
 1010353:	pop    r8
 1010355:	push   rax
 1010356:	rex.RB
 1010357:	pop    r8
 1010359:	rex pop rdx
 101035b:	add    BYTE PTR [rbx+0x5],ah
 101035e:	data16 jb 0x10103c6
 1010361:	add    BYTE PTR gs:[rax],al
 1010364:	jp     0x1010366
 1010366:	(bad)  
 1010367:	(bad)  
 1010368:	pop    rdi
 1010369:	push   rsi
 101036a:	rex pop rcx
 101036c:	pop    r8
 101036e:	push   rax
 101036f:	rex.RB
 1010370:	pop    r8
 1010372:	rex pop rdx
 1010374:	add    BYTE PTR [rax],al
 1010376:	(bad)  
 1010377:	add    DWORD PTR [rdi+0x43],ebx
 101037a:	js     0x10103f4
 101037c:	push   rsp
 101037d:	push   0x45776f72
 1010382:	js     0x10103e7
 1010384:	gs jo  0x10103fb
 1010387:	imul   ebp,DWORD PTR [rdi+0x6e],0x1280000
 101038e:	pop    rdi
 101038f:	pop    rdi
 1010390:	rex.XB js 0x101040b
 1010393:	rex.RX jb 0x10103f7
 1010396:	ins    DWORD PTR es:[rdi],dx
 1010397:	gs rex.W (bad) 
 101039a:	outs   dx,BYTE PTR ds:[rsi]
 101039b:	fs ins BYTE PTR es:[rdi],dx
 101039d:	gs jb  0x10103d3
 10103a0:	add    BYTE PTR [rax],al
 10103a2:	(bad)  
 10103a3:	add    eax,0x6f74775f
 10103a8:	imul   eax,DWORD PTR [rax],0x656d05aa
 10103ae:	ins    DWORD PTR es:[rdi],dx
 10103af:	movsxd esi,DWORD PTR [rax+0x79]
 10103b2:	pop    rdi
 10103b3:	jae    0x10103b5
 10103b5:	add    BYTE PTR [rbp+rax*1+0x6d6d656d],ch
 10103bc:	outs   dx,DWORD PTR ds:[rsi]
 10103bd:	jbe    0x1010424
 10103bf:	pop    rdi
 10103c0:	jae    0x10103c2
 10103c2:	adc    al,BYTE PTR [rsi]
 10103c4:	ja     0x1010429
 10103c6:	jae    0x101042b
 10103c8:	push   0xb000072
 10103cd:	(bad)  
 10103ce:	jbe    0x1010443
 10103d0:	ja     0x1010442
 10103d2:	jb     0x101043d
 10103d4:	outs   dx,BYTE PTR ds:[rsi]
 10103d5:	je     0x101043d
 10103d7:	pop    rdi
 10103d8:	jae    0x10103da
 10103da:	jnp    0x10103e0
 10103dc:	pop    rdi
 10103dd:	jbe    0x1010452
 10103df:	movsxd esi,DWORD PTR [rdi+0x70]
 10103e2:	jb     0x101044d
 10103e4:	outs   dx,BYTE PTR ds:[rsi]
 10103e5:	je     0x101044d
 10103e7:	add    BYTE PTR [rcx],dh
 10103e9:	(bad)  
 10103ea:	ja     0x1010459
 10103ec:	gs ins DWORD PTR es:[rdi],dx
 10103ee:	movsxd esi,DWORD PTR [rax+0x79]
 10103f1:	pop    rdi
 10103f2:	jae    0x10103f4
 10103f4:	lods   eax,DWORD PTR ds:[rsi]
 10103f5:	add    DWORD PTR [rdi+0x62],ebx
 10103f8:	imul   ebp,DWORD PTR gs:[esi+0x74],0x61657268
 1010401:	fs gs js 0x1010405
 1010405:	add    BYTE PTR [rbp+0x6d656d05],ch
 101040b:	jae    0x1010472
 101040d:	je     0x101040f
 101040f:	add    BYTE PTR [rbx],bl
 1010411:	(bad)  
 1010412:	ja     0x1010477
 1010414:	jae    0x1010484
 1010416:	movsxd esp,DWORD PTR [rcx+0x74]
 1010419:	pop    rdi
 101041a:	jae    0x101041c
 101041c:	icebp  
 101041d:	add    eax,0x72707773
 1010422:	imul   ebp,DWORD PTR [rsi+0x74],0x735f66
 1010429:	add    BYTE PTR [rsi+0x6d615f01],bl
 101042f:	jae    0x1010498
 1010431:	pop    rdi
 1010432:	gs js  0x101049e
 1010435:	je     0x1010437
 1010437:	add    BYTE PTR [rax+0x775f5f01],dl
 101043d:	addr32 gs je 0x10104ae
 1010441:	(bad)  
 1010442:	imul   ebp,DWORD PTR [rsi+0x61],0x736772
 1010449:	add    BYTE PTR [rsi],bl
 101044b:	add    DWORD PTR [rdi+0x5f],ebx
 101044e:	rex.XB pop r15
 1010450:	jae    0x10104c2
 1010452:	movsxd ebp,DWORD PTR gs:[rcx+0x66]
 1010456:	imul   esp,DWORD PTR [rbx+0x5f],0x646e6168
 101045d:	ins    BYTE PTR es:[rdi],dx
 101045e:	gs jb  0x1010461
 1010461:	add    BYTE PTR [rdx],bl
 1010463:	add    DWORD PTR [rdi+0x58],ebx
 1010466:	movsxd esi,DWORD PTR [rax+0x74]
 1010469:	imul   r13d,DWORD PTR [rsp+r14*2+0x65],0x2000072
 1010472:	pop    rdi
 1010473:	gs js  0x10104df
 1010476:	je     0x1010478
 1010478:	mov    ch,0x1
 101047a:	pop    rdi
 101047b:	movsxd esp,DWORD PTR [rbp+0x78]
 101047e:	imul   esi,DWORD PTR [rax+rax*1+0x0],0x78650548
 1010486:	imul   esi,DWORD PTR [rax+rax*1+0x0],0x5f5f0191
 101048e:	ja     0x10104f9
 1010490:	outs   dx,BYTE PTR ds:[rsi]
 1010491:	imul   esi,DWORD PTR [rbp+riz*2+0x6e],0x86000076
 1010499:	add    bl,BYTE PTR [rdi+0x69]
 101049c:	outs   dx,BYTE PTR ds:[rsi]
 101049d:	imul   esi,DWORD PTR [rsp+rsi*2+0x65],0x87006d72
 10104a5:	add    bl,BYTE PTR [rdi+0x69]
 10104a8:	outs   dx,BYTE PTR ds:[rsi]
 10104a9:	imul   esi,DWORD PTR [rsp+rsi*2+0x65],0x655f6d72
 10104b1:	add    ch,al
 10104b3:	add    DWORD PTR [rdi+0x63],ebx
 10104b6:	outs   dx,DWORD PTR ds:[rsi]
 10104b7:	outs   dx,BYTE PTR ds:[rsi]
 10104b8:	imul   sp,WORD PTR [rdi+0x74],0x7268
 10104be:	gs (bad) 
 10104c0:	fs ins BYTE PTR es:[rdi],dx
 10104c2:	outs   dx,DWORD PTR ds:[rsi]
 10104c3:	movsxd esp,DWORD PTR [rcx+0x6c]
 10104c6:	add    BYTE PTR gs:[rcx+rax*1+0x5f],bh
 10104cb:	pop    rdi
 10104cc:	jae    0x1010533
 10104ce:	je     0x1010545
 10104d0:	jae    0x1010537
 10104d2:	jb     0x1010541
 10104d4:	(bad)  
 10104d5:	je     0x101053f
 10104d7:	gs jb  0x101054c
 10104da:	add    BYTE PTR [rax],al
 10104dc:	(bad)
 10104e0:	outs   dx,DWORD PTR ds:[rsi]
 10104e1:	ins    DWORD PTR es:[rdi],dx
 10104e2:	ins    DWORD PTR es:[rdi],dx
 10104e3:	outs   dx,DWORD PTR ds:[rsi]
 10104e4:	fs add BYTE PTR gs:[rax],al
 10104e8:	sbb    al,0x2
 10104ea:	pop    rdi
 10104eb:	ins    WORD PTR es:[rdi],dx
 10104ed:	outs   dx,DWORD PTR ds:[rsi]
 10104ee:	fs add BYTE PTR gs:[rax],al
 10104f2:	jns    0x10104f5
 10104f4:	pop    rdi
 10104f5:	pop    rdi
 10104f6:	jae    0x101055d
 10104f8:	je     0x1010559
 10104fa:	(bad)  
 10104fb:	jo     0x101056d
 10104fd:	pop    rdi
 10104fe:	je     0x1010579
 1010500:	jo     0x1010567
 1010502:	add    BYTE PTR [rax],al
 1010504:	rex.WRB push r11
 1010506:	push   rsi
 1010507:	rex.XB push r10
 1010509:	xor    DWORD PTR [rax],esi
 101050b:	xor    BYTE PTR [rsi],ch
 101050d:	fs ins BYTE PTR es:[rdi],dx
 101050f:	ins    BYTE PTR es:[rdi],dx
 1010510:	add    BYTE PTR [rax],al
 1010512:	add    BYTE PTR [rcx],al
 1010514:	(bad)  
 1010515:	je     0x101057c
 1010517:	jb     0x1010586
 1010519:	imul   ebp,DWORD PTR [rsi+0x61],0x40406574
 1010520:	pop    rcx
 1010521:	pop    r8
 1010523:	pop    rax
 1010524:	pop    rdx
 1010525:	add    BYTE PTR [rsi+0x1],al
 1010528:	pop    rdi
 1010529:	pop    rdi
 101052a:	movsxd esi,DWORD PTR [rdx+0x74]
 101052d:	pop    rdi
 101052e:	fs gs (bad) 
 1010531:	jne    0x101059a
 1010533:	addr32 gs jb 0x1010596
 1010537:	push   0x6b6f6f
 101053c:	pop    rbx
 101053d:	add    al,0x5f
 101053f:	jne    0x10105af
 1010541:	ins    BYTE PTR es:[rdi],dx
 1010542:	outs   dx,DWORD PTR ds:[rsi]
 1010543:	movsxd ebp,DWORD PTR [rbx+0x0]
 1010546:	add    QWORD PTR [rdi+0x5f],rbx
 101054a:	fs ins BYTE PTR es:[rdi],dx
 101054c:	ins    BYTE PTR es:[rdi],dx
 101054d:	outs   dx,DWORD PTR ds:[rsi]
 101054e:	outs   dx,BYTE PTR ds:[rsi]
 101054f:	gs js  0x10105bb
 1010552:	je     0x1010554
 1010554:	test   BYTE PTR [rdx],0x5f
 1010557:	ins    BYTE PTR es:[rdi],dx
 1010558:	outs   dx,DWORD PTR ds:[rsi]
 1010559:	movsxd ebp,DWORD PTR [rbx+0x0]
 101055c:	popf   
 101055d:	add    ebx,DWORD PTR [rdi+0x6f]
 1010560:	outs   dx,BYTE PTR ds:[rsi]
 1010561:	gs js  0x10105cd
 1010564:	je     0x1010566
 1010566:	out    dx,al
 1010567:	add    BYTE PTR [rdi],bh
 1010569:	pop    rdi
 101056a:	je     0x10105e5
 101056c:	jo     0x10105d3
 101056e:	pop    rdi
 101056f:	imul   ebp,DWORD PTR [rsi+0x66],0x74645f6f
 1010576:	outs   dx,DWORD PTR ds:[rsi]
 1010577:	jb     0x10105d8
 1010579:	imul   ebp,DWORD PTR [rsi+0x74],0x616e7265
 1010580:	ins    BYTE PTR es:[rdi],dx
 1010581:	pop    rdi
 1010582:	ins    DWORD PTR es:[rdi],dx
 1010583:	gs je  0x10105ee
 1010586:	outs   dx,DWORD PTR ds:[rsi]
 1010587:	fs rex je 0x1010604
 101058b:	jo     0x10105f2
 101058d:	pop    rdi
 101058e:	imul   ebp,DWORD PTR [rsi+0x66],0x5140406f
 1010595:	rex.RB
 1010596:	rex.B
 1010597:	pop    r8
 1010599:	pop    rax
 101059a:	pop    rdx
 101059b:	add    BYTE PTR [rbx+0x0],ah
 101059e:	(bad)  
 101059f:	(bad)  
 10105a0:	xor    al,BYTE PTR [rax+0x59]
 10105a3:	push   r8
 10105a5:	rex.RB
 10105a6:	pop    r8
 10105a8:	pop    rdi
 10105a9:	rex.WXB
 10105aa:	rex pop rdx
 10105ac:	add    BYTE PTR [rax],al
 10105ae:	(bad)  
 10105af:	add    BYTE PTR [rbx+0x6f],al
 10105b2:	ins    DWORD PTR es:[rdi],dx
 10105b3:	ins    DWORD PTR es:[rdi],dx
 10105b4:	(bad)  
 10105b5:	outs   dx,BYTE PTR ds:[rsi]
 10105b6:	imul   r13,QWORD PTR fs:[rsi+0x65],0x72416f54
 10105bf:	addr32 jbe 0x1010619
 10105c2:	add    BYTE PTR [rax],al
 10105c4:	push   rbx
 10105c5:	rex.W
 10105c6:	rex.RB
 10105c7:	rex.WR
 10105c8:	xor    r14,QWORD PTR [rdx]
 10105cb:	cs fs ins BYTE PTR es:[rdi],dx
 10105ce:	ins    BYTE PTR es:[rdi],dx
 10105cf:	add    BYTE PTR [rax+0x0],dh
 10105d2:	rex.XB outs dx,DWORD PTR ds:[rsi]
 10105d4:	push   rbp
 10105d5:	outs   dx,BYTE PTR ds:[rsi]
 10105d6:	imul   ebp,DWORD PTR [rsi+0x69],0x6c616974
 10105dd:	imul   edi,DWORD PTR [rdx+0x65],0x430000
 10105e4:	rex.XB outs dx,DWORD PTR ds:[rsi]
 10105e6:	rex.WB outs dx,BYTE PTR ds:[rsi]
 10105e8:	imul   esi,DWORD PTR [rcx+rbp*2+0x61],0x657a696c
 10105f0:	rex.RB js 0x10105f3
 10105f3:	add    BYTE PTR [rdi+0x6c],ch
 10105f6:	xor    esi,DWORD PTR gs:[rdx]
 10105f9:	cs fs ins BYTE PTR es:[rdi],dx
 10105fc:	ins    BYTE PTR es:[rdi],dx
 10105fd:	add    BYTE PTR [rdi+0x4c],cl
 1010600:	rex.RB
 1010601:	push   r13
 1010603:	push   rsp
 1010604:	xor    esi,DWORD PTR [rdx]
 1010606:	cs fs ins BYTE PTR es:[rdi],dx
 1010609:	ins    BYTE PTR es:[rdi],dx
 101060a:	add    BYTE PTR [rax],al
 101060c:	add    BYTE PTR [rax],al
 101060e:	(bad)  
 101060f:	(bad)  
 1010610:	xor    BYTE PTR [rbx+0x45],al
 1010613:	outs   dx,BYTE PTR ds:[rsi]
 1010614:	je     0x1010688
 1010616:	jns    0x101065d
 1010618:	js     0x1010683
 101061a:	je     0x101065c
 101061c:	rex push rcx
 101061e:	rex.RB
 101061f:	rex.B
 1010620:	rex.B
 1010621:	rex push rax
 1010623:	rex.RB
 1010624:	push   r14
 1010626:	rex.XB
 1010627:	rex.R
 1010628:	gs (bad) 
 101062a:	jne    0x1010693
 101062c:	rex.WR outs dx,DWORD PTR ds:[rsi]
 101062e:	addr32 rex
 1010630:	rex push rax
 1010632:	rex.RB
 1010633:	rex.X
 1010634:	rex.RXB push r8
 1010636:	rex.RB
 1010637:	rex.B
 1010638:	rex.WX
 1010639:	rex.WXB xor QWORD PTR [r8+0x5a],rax
 101063d:	add    BYTE PTR [rbx],cl
 101063f:	add    BYTE PTR [rdi],bh
 1010641:	(bad)  
 1010642:	xor    DWORD PTR [rbx+0x45],eax
 1010645:	outs   dx,BYTE PTR ds:[rsi]
 1010646:	je     0x10106ba
 1010648:	jns    0x101068f
 101064a:	js     0x10106b5
 101064c:	je     0x101068e
 101064e:	rex push rcx
 1010650:	rex.RB
 1010651:	rex.B
 1010652:	rex.B
 1010653:	rex pop rax
 1010655:	pop    rdx
 1010656:	add    BYTE PTR [rax],al
 1010658:	add    BYTE PTR cs:[rdi],bh
 101065b:	push   rbx
 101065c:	push   rcx
 101065d:	rex.WR push rsp
 101065f:	outs   dx,DWORD PTR ds:[rsi]
 1010660:	outs   dx,DWORD PTR ds:[rsi]
 1010661:	ins    BYTE PTR es:[rdi],dx
 1010662:	jae    0x10106a8
 1010664:	imul   esp,DWORD PTR [rcx+0x67],0x6172545f
 101066b:	movsxd esp,DWORD PTR [rbp+0x4d]
 101066e:	jae    0x10106d7
 1010670:	rex
 1010671:	rex pop rcx
 1010673:	pop    r8
 1010675:	push   rax
 1010676:	rex.RB
 1010677:	rex.X
 1010678:	rex.RXB
 1010679:	rex.WXB push r8
 101067b:	rex.RB
 101067c:	rex.B
 101067d:	rex.RXB pop r10
 101067f:	pop    rdx
 1010680:	add    BYTE PTR [rax],al
 1010682:	push   rbx
 1010683:	jno    0x10106f1
 1010685:	push   rsp
 1010686:	imul   r12d,DWORD PTR [rcx+0x67],0x6c642e4e
 101068e:	ins    BYTE PTR es:[rdi],dx
 101068f:	add    BYTE PTR [rsi],al
 1010691:	add    BYTE PTR [rdi],bh
 1010693:	rex.XB jb 0x10106fb
 1010696:	(bad)  
 1010697:	je     0x10106fe
 1010699:	rex.XB outs dx,DWORD PTR ds:[rsi]
 101069b:	outs   dx,BYTE PTR ds:[rsi]
 101069c:	je     0x1010710
 101069e:	outs   dx,DWORD PTR ds:[rsi]
 101069f:	ins    BYTE PTR es:[rdi],dx
 10106a0:	ins    BYTE PTR es:[rdi],dx
 10106a1:	gs jb  0x10106ed
 10106a4:	outs   dx,BYTE PTR ds:[rsi]
 10106a5:	jae    0x101071b
 10106a7:	(bad)  
 10106a8:	outs   dx,BYTE PTR ds:[rsi]
 10106a9:	movsxd esp,DWORD PTR [rbp+0x40]
 10106ac:	rex.XB
 10106ad:	rex.R (bad) 
 10106af:	je     0x1010712
 10106b1:	rex.XB outs dx,DWORD PTR ds:[rsi]
 10106b3:	ins    BYTE PTR es:[rdi],dx
 10106b4:	ins    BYTE PTR es:[rdi],dx
 10106b5:	movsxd esi,DWORD PTR gs:[rdi+rbp*2+0x72]
 10106ba:	rex.XB outs dx,DWORD PTR ds:[rsi]
 10106bc:	outs   dx,BYTE PTR ds:[rsi]
 10106bd:	je     0x1010731
 10106bf:	outs   dx,DWORD PTR ds:[rsi]
 10106c0:	ins    BYTE PTR es:[rdi],dx
 10106c1:	ins    BYTE PTR es:[rdi],dx
 10106c2:	gs jb  0x101070b
 10106c5:	(bad)  
 10106c6:	movsxd esi,DWORD PTR [rdi+rbp*2+0x72]
 10106ca:	jns    0x101070c
 10106cc:	rex push rbx
 10106ce:	rex.B (bad) 
 10106d0:	push   r15
 10106d2:	xor    al,0x44
 10106d4:	rex.XB pop r15
 10106d6:	push   rdx
 10106d7:	rex.RB push r12
 10106d9:	push   rbp
 10106da:	push   rdx
 10106db:	rex.WRX pop rdi
 10106dd:	push   rsp
 10106de:	pop    rcx
 10106df:	push   rax
 10106e0:	rex.RB
 10106e1:	rex
 10106e2:	rex
 10106e3:	rex.B
 10106e4:	rex.RB
 10106e5:	push   r8
 10106e7:	rex.RB
 10106e8:	push   r14
 10106ea:	rex.WB
 10106eb:	rex.R (bad) 
 10106ed:	je     0x1010750
 10106ef:	rex.XB outs dx,DWORD PTR ds:[rsi]
 10106f1:	ins    BYTE PTR es:[rdi],dx
 10106f2:	ins    BYTE PTR es:[rdi],dx
 10106f3:	movsxd esi,DWORD PTR gs:[rdi+rbp*2+0x72]
 10106f8:	rex.XB outs dx,DWORD PTR ds:[rsi]
 10106fa:	outs   dx,BYTE PTR ds:[rsi]
 10106fb:	je     0x101076f
 10106fd:	outs   dx,DWORD PTR ds:[rsi]
 10106fe:	ins    BYTE PTR es:[rdi],dx
 10106ff:	ins    BYTE PTR es:[rdi],dx
 1010700:	gs jb  0x1010743
 1010703:	rex
 1010704:	rex pop rdx
 1010706:	add    BYTE PTR [rax],al
 1010708:	(bad)  
 1010709:	add    BYTE PTR [rdi],bh
 101070b:	rex.R
 101070c:	gs ins BYTE PTR es:[rdi],dx
 101070e:	gs je  0x1010776
 1010711:	rex.XB outs dx,DWORD PTR ds:[rsi]
 1010713:	outs   dx,BYTE PTR ds:[rsi]
 1010714:	je     0x1010788
 1010716:	outs   dx,DWORD PTR ds:[rsi]
 1010717:	ins    BYTE PTR es:[rdi],dx
 1010718:	ins    BYTE PTR es:[rdi],dx
 1010719:	gs jb  0x1010765
 101071c:	outs   dx,BYTE PTR ds:[rsi]
 101071d:	jae    0x1010793
 101071f:	(bad)  
 1010720:	outs   dx,BYTE PTR ds:[rsi]
 1010721:	movsxd esp,DWORD PTR [rbp+0x40]
 1010724:	rex.XB
 1010725:	rex.R (bad) 
 1010727:	je     0x101078a
 1010729:	rex.XB outs dx,DWORD PTR ds:[rsi]
 101072b:	ins    BYTE PTR es:[rdi],dx
 101072c:	ins    BYTE PTR es:[rdi],dx
 101072d:	movsxd esi,DWORD PTR gs:[rdi+rbp*2+0x72]
 1010732:	rex.XB outs dx,DWORD PTR ds:[rsi]
 1010734:	outs   dx,BYTE PTR ds:[rsi]
 1010735:	je     0x10107a9
 1010737:	outs   dx,DWORD PTR ds:[rsi]
 1010738:	ins    BYTE PTR es:[rdi],dx
 1010739:	ins    BYTE PTR es:[rdi],dx
 101073a:	gs jb  0x1010783
 101073d:	(bad)  
 101073e:	movsxd esi,DWORD PTR [rdi+rbp*2+0x72]
 1010742:	jns    0x1010784
 1010744:	rex push rbx
 1010746:	rex.B (bad) 
 1010748:	push   r15
 101074a:	xor    al,0x44
 101074c:	rex.XB pop r15
 101074e:	push   rdx
 101074f:	rex.RB push r12
 1010751:	push   rbp
 1010752:	push   rdx
 1010753:	rex.WRX pop rdi
 1010755:	push   rsp
 1010756:	pop    rcx
 1010757:	push   rax
 1010758:	rex.RB
 1010759:	rex
 101075a:	rex
 101075b:	rex.B
 101075c:	rex.RB
 101075d:	push   r8
 101075f:	rex.RB
 1010760:	push   r14
 1010762:	rex.WB
 1010763:	rex.R (bad) 
 1010765:	je     0x10107c8
 1010767:	rex.XB outs dx,DWORD PTR ds:[rsi]
 1010769:	ins    BYTE PTR es:[rdi],dx
 101076a:	ins    BYTE PTR es:[rdi],dx
 101076b:	movsxd esi,DWORD PTR gs:[rdi+rbp*2+0x72]
 1010770:	rex.XB outs dx,DWORD PTR ds:[rsi]
 1010772:	outs   dx,BYTE PTR ds:[rsi]
 1010773:	je     0x10107e7
 1010775:	outs   dx,DWORD PTR ds:[rsi]
 1010776:	ins    BYTE PTR es:[rdi],dx
 1010777:	ins    BYTE PTR es:[rdi],dx
 1010778:	gs jb  0x10107bb
 101077b:	rex
 101077c:	rex pop rdx
 101077e:	add    BYTE PTR [rax],al
 1010780:	rex.R (bad) 
 1010782:	je     0x10107e5
 1010784:	rex.XB outs dx,DWORD PTR ds:[rsi]
 1010786:	ins    BYTE PTR es:[rdi],dx
 1010787:	ins    BYTE PTR es:[rdi],dx
 1010788:	movsxd esi,DWORD PTR gs:[rdi+rbp*2+0x72]
 101078d:	rex.XB outs dx,DWORD PTR ds:[rsi]
 101078f:	outs   dx,BYTE PTR ds:[rsi]
 1010790:	je     0x1010804
 1010792:	outs   dx,DWORD PTR ds:[rsi]
 1010793:	ins    BYTE PTR es:[rdi],dx
 1010794:	ins    BYTE PTR es:[rdi],dx
 1010795:	gs jb  0x10107c6
 1010798:	rex.R
 1010799:	rex.WR
 101079a:	rex.WR add al,r8b
 101079d:	add    al,0x53
 101079f:	ins    BYTE PTR es:[rdi],dx
 10107a0:	gs gs jo 0x10107a4
 10107a4:	out    dx,al
 10107a5:	add    BYTE PTR [rbp+0x6e],al
 10107a8:	movsxd ebp,DWORD PTR [rdi+0x64]
 10107ab:	gs push rax
 10107ad:	outs   dx,DWORD PTR ds:[rsi]
 10107ae:	imul   ebp,DWORD PTR [rsi+0x74],0xce007265
 10107b5:	add    al,0x54
 10107b7:	gs jb  0x1010827
 10107ba:	imul   ebp,DWORD PTR [rsi+0x61],0x72506574
 10107c1:	outs   dx,DWORD PTR ds:[rsi]
 10107c2:	movsxd esp,DWORD PTR [rbp+0x73]
 10107c5:	jae    0x10107c7
 10107c7:	add    dh,al
 10107c9:	add    DWORD PTR [rdi+0x65],eax
 10107cc:	je     0x1010811
 10107ce:	jne    0x1010842
 10107d0:	jb     0x1010837
 10107d2:	outs   dx,BYTE PTR ds:[rsi]
 10107d3:	je     0x1010825
 10107d5:	jb     0x1010846
 10107d7:	movsxd esp,DWORD PTR [rbp+0x73]
 10107da:	jae    0x10107dc
 10107dc:	loop   0x10107e2
 10107de:	push   rbp
 10107df:	outs   dx,BYTE PTR ds:[rsi]
 10107e0:	push   0x6c646e61
 10107e5:	gs fs rex.RB js 0x101084d
 10107ea:	gs jo  0x1010861
 10107ed:	imul   ebp,DWORD PTR [rdi+0x6e],0x746c6946
 10107f4:	gs jb  0x10107f7
 10107f7:	add    BYTE PTR [rdx],al
 10107f9:	add    ecx,DWORD PTR [rcx+0x73]
 10107fc:	rex.R
 10107fd:	gs (bad) 
 10107ff:	jne    0x1010868
 1010801:	addr32 gs jb 0x1010855
 1010805:	jb     0x101086c
 1010807:	jae    0x101086e
 1010809:	outs   dx,BYTE PTR ds:[rsi]
 101080a:	je     0x101080c
 101080c:	es add al,0x52
 101080f:	je     0x101087d
 1010811:	push   rsi
 1010812:	imul   esi,DWORD PTR [rdx+0x74],0x556c6175
 1010819:	outs   dx,BYTE PTR ds:[rsi]
 101081a:	ja     0x1010885
 101081c:	outs   dx,BYTE PTR ds:[rsi]
 101081d:	add    BYTE PTR fs:[rax],al
 1010820:	(bad)  
 1010821:	add    al,0x52
 1010823:	je     0x1010891
 1010825:	rex.WR outs dx,DWORD PTR ds:[rsi]
 1010827:	outs   dx,DWORD PTR ds:[rsi]
 1010828:	imul   esi,DWORD PTR [rbp+0x70],0x46
 101082c:	jne    0x101089c
 101082e:	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
 1010832:	outs   dx,BYTE PTR ds:[rsi]
 1010833:	rex.RB outs dx,BYTE PTR ds:[rsi]
 1010835:	je     0x10108a9
 1010837:	jns    0x1010839
 1010839:	add    BYTE PTR [rax],bl
 101083b:	add    al,0x52
 101083d:	je     0x10108ab
 101083f:	rex.XB (bad) 
 1010841:	jo     0x10108b7
 1010843:	jne    0x10108b7
 1010845:	rex.XB outs dx,DWORD PTR gs:[rsi]
 1010848:	outs   dx,BYTE PTR ds:[rsi]
 1010849:	je     0x10108b0
 101084b:	js     0x10108c1
 101084d:	add    bl,cl
 101084f:	add    BYTE PTR [rbp+riz*2+0x63],al
 1010853:	outs   dx,DWORD PTR ds:[rsi]
 1010854:	fs gs push rax
 1010857:	outs   dx,DWORD PTR ds:[rsi]
 1010858:	imul   ebp,DWORD PTR [rsi+0x74],0xa9007265
 101085f:	add    edx,DWORD PTR [rcx+0x75]
 1010862:	gs jb  0x10108de
 1010865:	push   rax
 1010866:	gs jb  0x10108cf
 1010869:	outs   dx,DWORD PTR ds:[rsi]
 101086a:	jb     0x10108d9
 101086c:	(bad)  
 101086d:	outs   dx,BYTE PTR ds:[rsi]
 101086e:	movsxd esp,DWORD PTR [rbp+0x43]
 1010871:	outs   dx,DWORD PTR ds:[rsi]
 1010872:	jne    0x10108e2
 1010874:	je     0x10108db
 1010876:	jb     0x1010878
 1010878:	(bad)  
 1010879:	add    al,BYTE PTR [rdi+0x65]
 101087c:	je     0x10108d2
 101087e:	imul   esp,DWORD PTR [rbx+0x6b],0x6e756f43
 1010885:	je     0x1010887
 1010887:	add    bh,al
 1010889:	add    DWORD PTR [rdi+0x65],eax
 101088c:	je     0x10108d1
 101088e:	jne    0x1010902
 1010890:	jb     0x10108f7
 1010892:	outs   dx,BYTE PTR ds:[rsi]
 1010893:	je     0x10108e5
 1010895:	jb     0x1010906
 1010897:	movsxd esp,DWORD PTR [rbp+0x73]
 101089a:	jae    0x10108e5
 101089c:	add    BYTE PTR fs:[rax+0x74654702],al
 10108a3:	push   rbx
 10108a4:	jns    0x1010919
 10108a6:	je     0x101090d
 10108a8:	ins    DWORD PTR es:[rdi],dx
 10108a9:	push   rsp
 10108aa:	imul   ebp,DWORD PTR [rbp+0x65],0x69467341
 10108b1:	ins    BYTE PTR es:[rdi],dx
 10108b2:	gs push rsp
 10108b4:	imul   ebp,DWORD PTR [rbp+0x65],0x4902eb00
 10108bb:	outs   dx,BYTE PTR ds:[rsi]
 10108bc:	imul   esi,DWORD PTR [rcx+rbp*2+0x61],0x657a696c
 10108c4:	rex.XB jb 0x1010930
 10108c7:	je     0x1010932
 10108c9:	movsxd esp,DWORD PTR [rcx+0x6c]
 10108cc:	push   rbx
 10108cd:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 10108d2:	outs   dx,BYTE PTR ds:[rsi]
 10108d3:	rex.B outs dx,BYTE PTR ds:[rsi]
 10108d5:	fs push rbx
 10108d7:	jo     0x1010942
 10108d9:	outs   dx,BYTE PTR ds:[rsi]
 10108da:	rex.XB outs dx,DWORD PTR ds:[rsi]
 10108dc:	jne    0x101094c
 10108de:	je     0x10108e0
 10108e0:	(bad)  
 10108e1:	add    cl,BYTE PTR [rax+0x65]
 10108e4:	(bad)  
 10108e5:	jo     0x101092b
 10108e7:	gs jae 0x101095e
 10108ea:	jb     0x101095b
 10108ec:	jns    0x10108ee
 10108ee:	rol    DWORD PTR [rdx],cl
 10108f0:	rex.W
 10108f1:	gs (bad) 
 10108f3:	jo     0x1010936
 10108f5:	ins    BYTE PTR es:[rdi],dx
 10108f6:	ins    BYTE PTR es:[rdi],dx
 10108f7:	outs   dx,DWORD PTR ds:[rsi]
 10108f8:	movsxd eax,DWORD PTR [rax]
 10108fa:	xlat   BYTE PTR ds:[rbx]
 10108fb:	add    cl,BYTE PTR [rax+0x65]
 10108fe:	(bad)  
 10108ff:	jo     0x1010947
 1010901:	jb     0x1010968
 1010903:	add    BYTE PTR gs:[rax],al
 1010906:	fiadd  DWORD PTR [rdx]
 1010908:	rex.W
 1010909:	gs (bad) 
 101090b:	jo     0x101095f
 101090d:	gs rex.B ins BYTE PTR es:[rdi],dx
 1010910:	ins    BYTE PTR es:[rdi],dx
 1010911:	outs   dx,DWORD PTR ds:[rsi]
 1010912:	movsxd eax,DWORD PTR [rax]
 1010914:	fadd   QWORD PTR [rdx]
 1010916:	rex.W
 1010917:	gs (bad) 
 1010919:	jo     0x101096e
 101091b:	imul   edi,DWORD PTR [rdx+0x65],0x2510000
 1010922:	rex.RXB
 1010923:	gs je  0x1010976
 1010926:	jb     0x1010997
 1010928:	movsxd esp,DWORD PTR [rbp+0x73]
 101092b:	jae    0x1010975
 101092d:	gs (bad) 
 101092f:	jo     0x1010931
 1010931:	add    BYTE PTR [rax+0x74655304],al
 1010937:	rex.WR (bad) 
 1010939:	jae    0x10109af
 101093b:	rex.RB jb 0x10109b0
 101093e:	outs   dx,DWORD PTR ds:[rsi]
 101093f:	jb     0x1010941
 1010941:	add    BYTE PTR [rcx+rax*1],dh
 1010944:	rex.RX imul r13d,DWORD PTR [rsi+0x64],0x736f6c43
 101094c:	add    BYTE PTR gs:[rdx],bl
 101094f:	add    al,BYTE PTR [rdi+0x65]
 1010952:	je     0x10109a1
 1010954:	outs   dx,DWORD PTR ds:[rsi]
 1010955:	fs jne 0x10109c4
 1010958:	imul   r13d,DWORD PTR gs:[rbp+r12*2+0x4e],0x57656d61
 1010962:	add    BYTE PTR [rax],al
 1010964:	add    al,BYTE PTR [rdx]
 1010966:	rex.RXB
 1010967:	gs je  0x10109b0
 101096a:	jne    0x10109d8
 101096c:	ins    BYTE PTR es:[rdi],dx
 101096d:	push   rax
 101096e:	(bad)  
 101096f:	je     0x10109d9
 1010971:	rex.WRX (bad) 
 1010973:	ins    DWORD PTR es:[rdi],dx
 1010974:	gs push rdi
 1010976:	add    BYTE PTR [rax],al
 1010978:	(bad)  
 1010979:	add    DWORD PTR [rsi+0x69],eax
 101097c:	outs   dx,BYTE PTR ds:[rsi]
 101097d:	rex.RX imul r14d,DWORD PTR fs:[rdx+0x73],0x6c694674
 1010986:	gs push rdi
 1010988:	add    BYTE PTR [rax],al
 101098a:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 101098b:	add    al,BYTE PTR [rdi+0x65]
 101098e:	je     0x10109e5
 1010990:	jae    0x10109f7
 1010992:	jb     0x10109d8
 1010994:	gs data16 (bad) 
 1010997:	jne    0x1010a05
 1010999:	je     0x10109f0
 101099b:	rex.WB
 101099c:	rex.WR (bad) 
 101099e:	outs   dx,BYTE PTR ds:[rsi]
 101099f:	addr32 jne 0x1010a03
 10109a2:	add    BYTE PTR gs:[eax],al
 10109a6:	mov    DWORD PTR [rdx],0x626f6c47
 10109ac:	(bad)  
 10109ad:	ins    BYTE PTR es:[rdi],dx
 10109ae:	rex.WRB
 10109af:	gs ins DWORD PTR es:[rdi],dx
 10109b1:	outs   dx,DWORD PTR ds:[rsi]
 10109b2:	jb     0x1010a2d
 10109b4:	push   rbx
 10109b5:	je     0x1010a18
 10109b7:	je     0x1010a2e
 10109b9:	jae    0x10109bb
 10109bb:	add    BYTE PTR [rbx],ch
 10109bd:	add    al,BYTE PTR [rdi+0x65]
 10109c0:	je     0x1010a10
 10109c2:	(bad)  
 10109c3:	je     0x1010a2e
 10109c5:	jbe    0x1010a2c
 10109c7:	push   rbx
 10109c8:	jns    0x1010a3d
 10109ca:	je     0x1010a31
 10109cc:	ins    DWORD PTR es:[rdi],dx
 10109cd:	rex.WB outs dx,BYTE PTR ds:[rsi]
 10109cf:	outs   dx,WORD PTR ds:[rsi]
 10109d1:	add    BYTE PTR [rdx+0x74654702],cl
 10109d7:	push   rsp
 10109d8:	gs ins DWORD PTR es:[rdi],dx
 10109da:	jo     0x1010a22
 10109dc:	imul   ebp,DWORD PTR [rbp+riz*2+0x4e],0x57656d61
 10109e4:	add    BYTE PTR [rax],al
 10109e6:	lods   al,BYTE PTR ds:[rsi]
 10109e7:	add    al,BYTE PTR [rdi+0x65]
 10109ea:	je     0x1010a42
 10109ec:	gs jb  0x1010a62
 10109ef:	imul   ebp,DWORD PTR [rdi+0x6e],0x577845
 10109f6:	adc    BYTE PTR [rbx],al
 10109f8:	rex.WB jae 0x1010a52
 10109fb:	outs   dx,DWORD PTR ds:[rsi]
 10109fc:	ja     0x1010a34
 10109fe:	xor    al,0x50
 1010a00:	jb     0x1010a71
 1010a02:	movsxd esp,DWORD PTR [rbp+0x73]
 1010a05:	jae    0x1010a07
 1010a07:	add    BYTE PTR [rsi+0x74654702],bl
 1010a0d:	push   rsp
 1010a0e:	imul   ebp,DWORD PTR [rbp+0x65],0x6d726f46
 1010a15:	(bad)  
 1010a16:	je     0x1010a6f
 1010a18:	add    BYTE PTR [rax],al
 1010a1a:	iret   
 1010a1b:	add    DWORD PTR [rdi+0x65],eax
 1010a1e:	je     0x1010a64
 1010a20:	(bad)  
 1010a21:	je     0x1010a88
 1010a23:	rex.RX outs dx,DWORD PTR ds:[rsi]
 1010a25:	jb     0x1010a94
 1010a27:	(bad)  
 1010a28:	je     0x1010a81
 1010a2a:	add    BYTE PTR [rax],al
 1010a2c:	std    
 1010a2d:	add    edx,DWORD PTR [rdx+0x65]
 1010a30:	ins    BYTE PTR es:[rdi],dx
 1010a31:	gs (bad) 
 1010a33:	jae    0x1010a9a
 1010a35:	rex.WRB jne 0x1010aac
 1010a38:	gs js  0x1010a3b
 1010a3b:	add    BYTE PTR [rbp+0x4],bh
 1010a3e:	push   rbx
 1010a3f:	gs je  0x1010a8a
 1010a42:	(bad)  
 1010a43:	outs   dx,BYTE PTR ds:[rsi]
 1010a44:	fs ins BYTE PTR es:[rdi],dx
 1010a46:	rex.WB outs dx,BYTE PTR gs:[rsi]
 1010a49:	outs   dx,WORD PTR ds:[rsi]
 1010a4b:	jb     0x1010aba
 1010a4d:	(bad)  
 1010a4e:	je     0x1010ab9
 1010a50:	outs   dx,DWORD PTR ds:[rsi]
 1010a51:	outs   dx,BYTE PTR ds:[rsi]
 1010a52:	add    BYTE PTR [rax],al
 1010a54:	sahf   
 1010a55:	add    BYTE PTR [rbx+0x72],al
 1010a58:	gs (bad) 
 1010a5a:	je     0x1010ac1
 1010a5c:	rex.WRB jne 0x1010ad3
 1010a5f:	gs js  0x1010ab9
 1010a62:	add    BYTE PTR [rax],al
 1010a64:	jp     0x1010a68
 1010a66:	rex.RXB
 1010a67:	gs je  0x1010abd
 1010a6a:	jns    0x1010adf
 1010a6c:	je     0x1010ad3
 1010a6e:	ins    DWORD PTR es:[rdi],dx
 1010a6f:	rex.WB outs dx,BYTE PTR ds:[rsi]
 1010a71:	outs   dx,WORD PTR ds:[rsi]
 1010a73:	add    BYTE PTR [rax],al
 1010a75:	add    eax,0x74726956
 1010a7a:	jne    0x1010add
 1010a7c:	ins    BYTE PTR es:[rdi],dx
 1010a7d:	push   rcx
 1010a7e:	jne    0x1010ae5
 1010a80:	jb     0x1010afb
 1010a82:	add    BYTE PTR [rax],al
 1010a84:	(bad)  
 1010a85:	add    cl,BYTE PTR [rax+0x65]
 1010a88:	(bad)  
 1010a89:	jo     0x1010ace
 1010a8b:	jb     0x1010af2
 1010a8d:	(bad)  
 1010a8e:	je     0x1010af5
 1010a90:	add    BYTE PTR [rax],al
 1010a92:	mov    BYTE PTR [rbx],0x52
 1010a95:	gs (bad) 
 1010a97:	fs push rax
 1010a99:	jb     0x1010b0a
 1010a9b:	movsxd esp,DWORD PTR [rbp+0x73]
 1010a9e:	jae    0x1010aed
 1010aa0:	gs ins DWORD PTR es:[rdi],dx
 1010aa2:	outs   dx,DWORD PTR ds:[rsi]
 1010aa3:	jb     0x1010b1e
 1010aa5:	add    dh,ah
 1010aa7:	add    DWORD PTR [rdi+0x65],eax
 1010aaa:	je     0x1010af1
 1010aac:	js     0x1010b17
 1010aae:	je     0x1010af3
 1010ab0:	outs   dx,DWORD PTR ds:[rsi]
 1010ab1:	fs gs push rax
 1010ab4:	jb     0x1010b25
 1010ab6:	movsxd esp,DWORD PTR [rbp+0x73]
 1010ab9:	jae    0x1010abb
 1010abb:	add    BYTE PTR [rax+0x65724300],ch
 1010ac1:	(bad)  
 1010ac2:	je     0x1010b29
 1010ac4:	push   rax
 1010ac5:	jb     0x1010b36
 1010ac7:	movsxd esp,DWORD PTR [rbp+0x73]
 1010aca:	jae    0x1010b23
 1010acc:	add    BYTE PTR [rax],al
 1010ace:	push   0x2
 1010ad0:	rex.RXB
 1010ad1:	gs je  0x1010b27
 1010ad4:	je     0x1010b37
 1010ad6:	jb     0x1010b4c
 1010ad8:	jne    0x1010b4a
 1010ada:	rex.WB outs dx,BYTE PTR ds:[rsi]
 1010adc:	outs   dx,WORD PTR ds:[rsi]
 1010ade:	push   rdi
 1010adf:	add    BYTE PTR [rsi+0x74655304],ah
 1010ae5:	push   rsp
 1010ae6:	push   0x64616572
 1010aeb:	push   rax
 1010aec:	jb     0x1010b57
 1010aee:	outs   dx,DWORD PTR ds:[rsi]
 1010aef:	jb     0x1010b5a
 1010af1:	je     0x1010b6c
 1010af3:	add    BYTE PTR [rbp+0x74654702],dl
 1010af9:	push   rsp
 1010afa:	push   0x64616572
 1010aff:	push   rax
 1010b00:	jb     0x1010b6b
 1010b02:	outs   dx,DWORD PTR ds:[rsi]
 1010b03:	jb     0x1010b6e
 1010b05:	je     0x1010b80
 1010b07:	add    dl,cl
 1010b09:	add    DWORD PTR [rdi+0x65],eax
 1010b0c:	je     0x1010b51
 1010b0e:	jne    0x1010b82
 1010b10:	jb     0x1010b77
 1010b12:	outs   dx,BYTE PTR ds:[rsi]
 1010b13:	je     0x1010b69
 1010b15:	push   0x64616572
 1010b1a:	add    BYTE PTR [rax],al
 1010b1c:	test   DWORD PTR [rdi+rbx*2],eax
 1010b1f:	jbe    0x1010b94
 1010b21:	outs   dx,BYTE PTR ds:[rsi]
 1010b22:	ja     0x1010b94
 1010b24:	jb     0x1010b8f
 1010b26:	outs   dx,BYTE PTR ds:[rsi]
 1010b27:	je     0x1010b8f
 1010b29:	add    BYTE PTR [rcx+0x6d656d05],ch
 1010b2f:	movsxd esi,DWORD PTR [rax+0x79]
 1010b32:	add    BYTE PTR [rax],al
 1010b34:	mov    bh,0x3
 1010b36:	pop    rdi
 1010b37:	jb     0x1010b9e
 1010b39:	jae    0x1010ba0
 1010b3b:	je     0x1010bb0
 1010b3d:	je     0x1010baa
 1010b3f:	outs   dx,DWORD PTR ds:[rsi]
 1010b40:	data16 ins BYTE PTR es:[rdi],dx
 1010b42:	ja     0x1010b44
 1010b44:	xchg   BYTE PTR [rdi+rbx*2],al
 1010b47:	jbe    0x1010bbc
 1010b49:	outs   dx,BYTE PTR ds:[rsi]
 1010b4a:	ja     0x1010bbc
 1010b4c:	jb     0x1010bb7
 1010b4e:	outs   dx,BYTE PTR ds:[rsi]
 1010b4f:	je     0x1010bb7
 1010b51:	pop    rdi
 1010b52:	ins    BYTE PTR es:[rdi],dx
 1010b53:	add    ch,ch
 1010b55:	add    al,0x5f
 1010b57:	ja     0x1010bc6
 1010b59:	(bad)  
 1010b5a:	imul   esp,DWORD PTR [rbp+0x70],0x61
 1010b5e:	je     0x1010bc8
 1010b60:	pop    rdi
 1010b61:	jae    0x1010b63
 1010b63:	add    BYTE PTR [rdi],cl
 1010b65:	add    eax,0x7073775f
 1010b6a:	ins    BYTE PTR es:[rdi],dx
 1010b6b:	imul   esi,DWORD PTR [rax+rsi*2+0x61],0x735f6874
 1010b73:	add    BYTE PTR [rax+0x0],ah
 1010b76:	(bad)  
 1010b77:	(bad)  
 1010b78:	xor    BYTE PTR [rdi+0x4c],bl
 1010b7b:	outs   dx,DWORD PTR ds:[rsi]
 1010b7c:	movsxd ebp,DWORD PTR [rbx+0x69]
 1010b7f:	je     0x1010bc1
 1010b81:	jae    0x1010bf7
 1010b83:	fs rex
 1010b85:	rex push rcx
 1010b87:	rex.RB
 1010b88:	rex.B
 1010b89:	rex.B
 1010b8a:	rex
 1010b8b:	rex.W
 1010b8c:	rex pop rdx
 1010b8e:	add    BYTE PTR [rax],al
 1010b90:	sahf   
 1010b91:	add    BYTE PTR [rdi],bh
 1010b93:	(bad)  
 1010b94:	xor    DWORD PTR [rdi+0x4c],ebx
 1010b97:	outs   dx,DWORD PTR ds:[rsi]
 1010b98:	movsxd ebp,DWORD PTR [rbx+0x69]
 1010b9b:	je     0x1010bdd
 1010b9d:	jae    0x1010c13
 1010b9f:	fs rex
 1010ba1:	rex push rcx
 1010ba3:	rex.RB
 1010ba4:	rex.B
 1010ba5:	rex.B
 1010ba6:	rex pop rax
 1010ba8:	pop    rdx
 1010ba9:	add    BYTE PTR [rsi+0x445f3f01],bl
 1010baf:	movsxd esi,DWORD PTR gs:[rdx+0x65]
 1010bb3:	data16 rex
 1010bb5:	data16 (bad) 
 1010bb7:	movsxd esp,DWORD PTR [rbp+0x74]
 1010bba:	rex ins BYTE PTR es:[rdi],dx
 1010bbc:	outs   dx,DWORD PTR ds:[rsi]
 1010bbd:	movsxd esp,DWORD PTR [rcx+0x6c]
 1010bc0:	gs rex jae 0x1010c38
 1010bc4:	fs rex
 1010bc6:	rex push rcx
 1010bc8:	rex.RB
 1010bc9:	rex.B
 1010bca:	push   r8
 1010bcc:	rex.RB
 1010bcd:	push   r14
 1010bcf:	xor    DWORD PTR [rdx],esi
 1010bd1:	xor    eax,DWORD PTR [rax+0x58]
 1010bd4:	pop    rdx
 1010bd5:	add    BYTE PTR [rbp+0x53],cl
 1010bd8:	push   rsi
 1010bd9:	rex.XB push r8
 1010bdb:	xor    DWORD PTR [rax],esi
 1010bdd:	xor    BYTE PTR [rsi],ch
 1010bdf:	fs ins BYTE PTR es:[rdi],dx
 1010be1:	ins    BYTE PTR es:[rdi],dx
 1010be2:	add    BYTE PTR [rax],al
 1010be4:	add    al,0x0
 1010be6:	rex.RB outs dx,BYTE PTR ds:[rsi]
 1010be8:	jne    0x1010c57
 1010bea:	push   rax
 1010beb:	jb     0x1010c5c
 1010bed:	movsxd esp,DWORD PTR [rbp+0x73]
 1010bf0:	jae    0x1010c3f
 1010bf2:	outs   dx,DWORD PTR ds:[rsi]
 1010bf3:	fs jne 0x1010c62
 1010bf6:	gs jae 0x1010bf9
 1010bf9:	add    BYTE PTR [rax],dl
 1010bfb:	add    BYTE PTR [rdi+0x65],al
 1010bfe:	je     0x1010c4d
 1010c00:	outs   dx,DWORD PTR ds:[rsi]
 1010c01:	fs jne 0x1010c70
 1010c04:	imul   r13d,DWORD PTR gs:[rbp+r12*2+0x4e],0x45656d61
 1010c0e:	js     0x1010c67
 1010c10:	add    BYTE PTR [rax],al
 1010c12:	push   rax
 1010c13:	push   rbx
 1010c14:	push   r8
 1010c16:	rex.WB
 1010c17:	cs rex.R
 1010c19:	rex.WR
 1010c1a:	rex.WR add BYTE PTR [rsi],r8b
 1010c1d:	add    BYTE PTR [rdi+0x65],al
 1010c20:	je     0x1010c68
 1010c22:	imul   ebp,DWORD PTR [rbp+riz*2+0x56],0x69737265
 1010c2a:	outs   dx,DWORD PTR ds:[rsi]
 1010c2b:	outs   dx,BYTE PTR ds:[rsi]
 1010c2c:	rex.WB outs dx,BYTE PTR ds:[rsi]
 1010c2e:	outs   dx,WORD PTR ds:[rsi]
 1010c30:	push   rdi
 1010c31:	add    BYTE PTR [rsi],cl
 1010c33:	add    BYTE PTR [rsi+0x65],dl
 1010c36:	jb     0x1010c89
 1010c38:	jne    0x1010c9f
 1010c3a:	jb     0x1010cb5
 1010c3c:	push   rsi
 1010c3d:	(bad)  
 1010c3e:	ins    BYTE PTR es:[rdi],dx
 1010c3f:	jne    0x1010ca6
 1010c41:	push   rdi
 1010c42:	add    BYTE PTR [rax],al
 1010c44:	push   rsi
 1010c45:	rex.RB push r10
 1010c47:	push   rbx
 1010c48:	rex.WB
 1010c49:	rex.WRXB
 1010c4a:	rex.WRX
 1010c4b:	cs fs ins BYTE PTR es:[rdi],dx
 1010c4e:	ins    BYTE PTR es:[rdi],dx
 1010c4f:	add    bl,bh
 1010c51:	add    al,0x56
 1010c53:	imul   esi,DWORD PTR [rdx+0x74],0x466c6175
 1010c5a:	jb     0x1010cc1
 1010c5c:	add    BYTE PTR gs:[rax],al
 1010c5f:	add    BYTE PTR [rax],al
 1010c61:	add    BYTE PTR [rax],al
 1010c63:	add    cl,dh
 1010c65:	(bad)  
 1010c66:	xor    eax,0x4f
 1010c6b:	add    BYTE PTR [rax+0x100010c],dh
 1010c71:	add    BYTE PTR [rax],al
 1010c73:	add    BYTE PTR [rax+rax*1],al
 1010c76:	add    BYTE PTR [rax],al
 1010c78:	add    al,0x0
 1010c7a:	add    BYTE PTR [rax],al
 1010c7c:	mov    BYTE PTR [rcx+rax*1],cl
 1010c7f:	add    BYTE PTR [rax-0x57fffef4],bl
 1010c85:	or     al,0x1
 1010c87:	add    BYTE PTR [rax-0x3d],dh
 1010c8a:	add    BYTE PTR [rax],al
 1010c8c:	and    ah,al
 1010c8e:	add    BYTE PTR [rax],al
 1010c90:	jo     0x1010cf5
 1010c92:	add    BYTE PTR [rax],al
 1010c94:	and    BYTE PTR [rbx+0x0],0x0
 1010c98:	mov    ebx,0xce00010c
 1010c9d:	or     al,0x1
 1010c9f:	add    bl,ah
 1010ca1:	or     al,0x1
 1010ca3:	add    cl,dh
 1010ca5:	or     al,0x1
 1010ca7:	add    BYTE PTR [rax],al
 1010ca9:	add    BYTE PTR [rcx],al
 1010cab:	add    BYTE PTR [rdx],al
 1010cad:	add    BYTE PTR [rbx],al
 1010caf:	add    BYTE PTR [rbx+rax*2+0x45],al
 1010cb3:	pop    rax
 1010cb4:	rex.RB
 1010cb5:	rex.XB
 1010cb6:	cs gs js 0x1010d1f
 1010cba:	add    BYTE PTR [rbp+rbp*2+0x70],al
 1010cbe:	rex.RXB
 1010cbf:	gs je  0x1010d05
 1010cc2:	ins    BYTE PTR es:[rdi],dx
 1010cc3:	imul   esp,DWORD PTR [rbp+0x6e],0x70784574
 1010cca:	outs   dx,DWORD PTR ds:[rsi]
 1010ccb:	jb     0x1010d41
 1010ccd:	add    BYTE PTR [rbp+rbp*2+0x70],al
 1010cd1:	push   rdx
 1010cd2:	gs ins DWORD PTR es:[rdi],dx
 1010cd4:	outs   dx,DWORD PTR ds:[rsi]
 1010cd5:	je     0x1010d3c
 1010cd7:	rex.R jne 0x1010d47
 1010cda:	jo     0x1010d2e
 1010cdc:	gs jno 0x1010d54
 1010cdf:	gs jae 0x1010d56
 1010ce2:	add    BYTE PTR [rbx+0x53],dl
 1010ce5:	rex.WB push r11
 1010ce7:	rex.X
 1010ce8:	imul   ebp,DWORD PTR gs:[esi+0x44],0x706d75
 1010cf1:	push   rbx
 1010cf2:	push   rbx
 1010cf3:	rex.WB push r11
 1010cf5:	rex.RXB
 1010cf6:	gs je  0x1010d3e
 1010cf9:	js     0x1010d6f
 1010cfb:	jb     0x1010d5e
 1010cfd:	rex.R jne 0x1010d6d
 1010d00:	jo     0x1010d48
 1010d02:	imul   ebp,DWORD PTR [rbp+riz*2+0x48],0x6c646e61
 1010d0a:	gs
	...
