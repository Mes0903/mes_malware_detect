
4859684e359b34a60f11ee19532df88abfc16b151581951d263f72e070e83ac4.exe:     file format pei-x86-64


Disassembly of section .text:

0000000001001000 <.text>:
 1001000:	mov    al,0x16
 1001002:	(bad)  
 1001003:	add    BYTE PTR [rax],al
 1001005:	add    BYTE PTR [rax],al
 1001007:	add    al,al
 1001009:	(bad)  
 100100a:	(bad)  
 100100b:	add    BYTE PTR [rax],al
 100100d:	add    BYTE PTR [rax],al
 100100f:	add    al,bl
 1001011:	(bad)  
 1001012:	(bad)  
 1001013:	add    BYTE PTR [rax],al
 1001015:	add    BYTE PTR [rax],al
 1001017:	add    al,dh
 1001019:	(bad)  
 100101a:	(bad)  
 100101b:	add    BYTE PTR [rax],al
 100101d:	add    BYTE PTR [rax],al
 100101f:	add    BYTE PTR [rax],al
 1001021:	(bad)  
 1001022:	(bad)  
 1001023:	add    BYTE PTR [rax],al
 1001025:	add    BYTE PTR [rax],al
 1001027:	add    BYTE PTR [rsi],cl
 1001029:	(bad)  
 100102a:	(bad)  
 100102b:	add    BYTE PTR [rax],al
 100102d:	add    BYTE PTR [rax],al
 100102f:	add    BYTE PTR [rsi],bl
 1001031:	(bad)  
 1001032:	(bad)  
 1001033:	add    BYTE PTR [rax],al
 1001035:	add    BYTE PTR [rax],al
 1001037:	add    BYTE PTR [rax],dh
 1001039:	(bad)  
 100103a:	(bad)  
 100103b:	add    BYTE PTR [rax],al
 100103d:	add    BYTE PTR [rax],al
 100103f:	add    BYTE PTR [rax+0x17],al
 1001042:	(bad)  
 1001043:	add    BYTE PTR [rax],al
 1001045:	add    BYTE PTR [rax],al
 1001047:	add    BYTE PTR [rdi+rdx*1+0x6],dl
 100104b:	add    BYTE PTR [rax],al
 100104d:	add    BYTE PTR [rax],al
 100104f:	add    BYTE PTR [rsi+0x17],ah
 1001052:	(bad)  
 1001053:	add    BYTE PTR [rax],al
 1001055:	add    BYTE PTR [rax],al
 1001057:	add    BYTE PTR [rdi+rdx*1+0x6],bh
 100105b:	add    BYTE PTR [rax],al
 100105d:	add    BYTE PTR [rax],al
 100105f:	add    BYTE PTR [rax+0x617],cl
 1001065:	add    BYTE PTR [rax],al
 1001067:	add    BYTE PTR [rdi+rdx*1+0x6],ah
 100106e:	add    BYTE PTR [rax],al
 1001070:	scas   al,BYTE PTR es:[rdi]
 1001071:	(bad)  
 1001072:	(bad)  
 1001073:	add    BYTE PTR [rax],al
 1001075:	add    BYTE PTR [rax],al
 1001077:	add    ah,al
 1001079:	(bad)  
 100107a:	(bad)  
 100107b:	add    BYTE PTR [rax],al
 100107d:	add    BYTE PTR [rax],al
 100107f:	add    ah,dl
 1001081:	(bad)  
 1001082:	(bad)  
 1001083:	add    BYTE PTR [rax],al
 1001085:	add    BYTE PTR [rax],al
 1001087:	add    ah,ah
 1001089:	(bad)  
 100108a:	(bad)  
 100108b:	add    BYTE PTR [rax],al
 100108d:	add    BYTE PTR [rax],al
 100108f:	add    al,bh
 1001091:	(bad)  
 1001092:	(bad)  
 1001093:	add    BYTE PTR [rax],al
 1001095:	add    BYTE PTR [rax],al
 1001097:	add    BYTE PTR [rdx],cl
 1001099:	sbb    BYTE PTR [rsi],al
 100109b:	add    BYTE PTR [rax],al
 100109d:	add    BYTE PTR [rax],al
 100109f:	add    BYTE PTR [rax],ch
 10010a1:	sbb    BYTE PTR [rsi],al
 10010a3:	add    BYTE PTR [rax],al
 10010a5:	add    BYTE PTR [rax],al
 10010a7:	add    BYTE PTR [rax+rbx*1],bh
 10010aa:	(bad)  
 10010ab:	add    BYTE PTR [rax],al
 10010ad:	add    BYTE PTR [rax],al
 10010af:	add    BYTE PTR [rax+rbx*1+0x6],dl
 10010b3:	add    BYTE PTR [rax],al
 10010b5:	add    BYTE PTR [rax],al
 10010b7:	add    BYTE PTR [rax+rbx*1+0x6],ch
 10010bb:	add    BYTE PTR [rax],al
 10010bd:	add    BYTE PTR [rax],al
 10010bf:	add    BYTE PTR [rax+rbx*1+0x6],al
 10010c6:	add    BYTE PTR [rax],al
 10010c8:	xchg   esi,eax
 10010c9:	sbb    BYTE PTR [rsi],al
 10010cb:	add    BYTE PTR [rax],al
 10010cd:	add    BYTE PTR [rax],al
 10010cf:	add    BYTE PTR [rsi+0x618],ah
 10010d5:	add    BYTE PTR [rax],al
 10010d7:	add    BYTE PTR [rax+rbx*1+0x6],dh
 10010de:	add    BYTE PTR [rax],al
 10010e0:	retf   0x618
 10010e3:	add    BYTE PTR [rax],al
 10010e5:	add    BYTE PTR [rax],al
 10010e7:	add    ah,bl
 10010e9:	sbb    BYTE PTR [rsi],al
 10010eb:	add    BYTE PTR [rax],al
 10010ed:	add    BYTE PTR [rax],al
 10010ef:	add    dh,ch
 10010f1:	sbb    BYTE PTR [rsi],al
 10010f3:	add    BYTE PTR [rax],al
 10010f5:	add    BYTE PTR [rax],al
 10010f7:	add    dh,bh
 10010f9:	sbb    BYTE PTR [rsi],al
 10010fb:	add    BYTE PTR [rax],al
 10010fd:	add    BYTE PTR [rax],al
 10010ff:	add    BYTE PTR [rcx+rbx*1],dl
 1001102:	(bad)  
 1001103:	add    BYTE PTR [rax],al
 1001105:	add    BYTE PTR [rax],al
 1001107:	add    BYTE PTR [rsi],ah
 1001109:	sbb    DWORD PTR [rsi],eax
 100110b:	add    BYTE PTR [rax],al
 100110d:	add    BYTE PTR [rax],al
 100110f:	add    BYTE PTR [rsi],dh
 1001111:	sbb    DWORD PTR [rsi],eax
 1001113:	add    BYTE PTR [rax],al
 1001115:	add    BYTE PTR [rax],al
 1001117:	add    BYTE PTR [rsi+0x19],cl
 100111a:	(bad)  
 100111b:	add    BYTE PTR [rax],al
 100111d:	add    BYTE PTR [rax],al
 100111f:	add    BYTE PTR [rcx+rbx*1+0x6],ch
 1001123:	add    BYTE PTR [rax],al
 1001125:	add    BYTE PTR [rax],al
 1001127:	add    BYTE PTR [rcx+rbx*1+0x6],bh
 100112b:	add    BYTE PTR [rax],al
 100112d:	add    BYTE PTR [rax],al
 100112f:	add    BYTE PTR [rcx+rbx*1+0x6],dl
 1001136:	add    BYTE PTR [rax],al
 1001138:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1001139:	sbb    DWORD PTR [rsi],eax
 100113b:	add    BYTE PTR [rax],al
 100113d:	add    BYTE PTR [rax],al
 100113f:	add    dl,al
 1001141:	sbb    DWORD PTR [rsi],eax
 1001143:	add    BYTE PTR [rax],al
 1001145:	add    BYTE PTR [rax],al
 1001147:	add    ah,bl
 1001149:	sbb    DWORD PTR [rsi],eax
 100114b:	add    BYTE PTR [rax],al
 100114d:	add    BYTE PTR [rax],al
 100114f:	add    ah,ch
 1001151:	sbb    DWORD PTR [rsi],eax
	...
 100115f:	add    dl,bh
 1001161:	es (bad) 
 1001163:	add    BYTE PTR [rax],al
 1001165:	add    BYTE PTR [rax],al
 1001167:	add    dl,ah
 1001169:	es (bad) 
 100116b:	add    BYTE PTR [rax],al
 100116d:	add    BYTE PTR [rax],al
 100116f:	add    ah,cl
 1001171:	es (bad) 
 1001173:	add    BYTE PTR [rax],al
 1001175:	add    BYTE PTR [rax],al
 1001177:	add    BYTE PTR [rdi+riz*1],dl
 100117a:	(bad)  
 100117b:	add    BYTE PTR [rax],al
 100117d:	add    BYTE PTR [rax],al
 100117f:	add    BYTE PTR [rdx+0x626],ch
 1001185:	add    BYTE PTR [rax],al
 1001187:	add    BYTE PTR [rax+0x626],bl
 100118d:	add    BYTE PTR [rax],al
 100118f:	add    BYTE PTR [rax+0x626],cl
 1001195:	add    BYTE PTR [rax],al
 1001197:	add    BYTE PTR [rdx+0x26],bh
 100119a:	(bad)  
 100119b:	add    BYTE PTR [rax],al
 100119d:	add    BYTE PTR [rax],al
 100119f:	add    BYTE PTR [rax+0x626],bh
	...
 10011ad:	add    BYTE PTR [rax],al
 10011af:	add    BYTE PTR [rax+0x29],ah
 10011b2:	(bad)  
 10011b3:	add    BYTE PTR [rax],al
 10011b5:	add    BYTE PTR [rax],al
 10011b7:	add    BYTE PTR [rcx+rbp*1+0x6],cl
	...
 10011c7:	add    BYTE PTR [rsi],dh
 10011c9:	sbb    eax,DWORD PTR [rsi]
 10011cb:	add    BYTE PTR [rax],al
 10011cd:	add    BYTE PTR [rax],al
 10011cf:	add    BYTE PTR [rdx+0x1b],cl
 10011d2:	(bad)  
 10011d3:	add    BYTE PTR [rax],al
 10011d5:	add    BYTE PTR [rax],al
 10011d7:	add    BYTE PTR [rsi+0x1b],bl
 10011da:	(bad)  
 10011db:	add    BYTE PTR [rax],al
 10011dd:	add    BYTE PTR [rax],al
 10011df:	add    BYTE PTR [rbx+rbx*1+0x6],ch
 10011e3:	add    BYTE PTR [rax],al
 10011e5:	add    BYTE PTR [rax],al
 10011e7:	add    BYTE PTR [rdx+0x1b],bh
 10011ea:	(bad)  
 10011eb:	add    BYTE PTR [rax],al
 10011ed:	add    BYTE PTR [rax],al
 10011ef:	add    BYTE PTR [rax+0x61b],dl
 10011f5:	add    BYTE PTR [rax],al
 10011f7:	add    BYTE PTR [rsi+0x61b],ah
 10011fd:	add    BYTE PTR [rax],al
 10011ff:	add    BYTE PTR [rbx+rbx*1+0x6],dh
 1001206:	add    BYTE PTR [rax],al
 1001208:	(bad)  
 1001209:	sbb    eax,DWORD PTR [rsi]
 100120b:	add    BYTE PTR [rax],al
 100120d:	add    BYTE PTR [rax],al
 100120f:	add    dh,dl
 1001211:	sbb    eax,DWORD PTR [rsi]
 1001213:	add    BYTE PTR [rax],al
 1001215:	add    BYTE PTR [rax],al
 1001217:	add    ah,ah
 1001219:	sbb    eax,DWORD PTR [rsi]
 100121b:	add    BYTE PTR [rax],al
 100121d:	add    BYTE PTR [rax],al
 100121f:	add    dl,bh
 1001221:	sbb    eax,DWORD PTR [rsi]
 1001223:	add    BYTE PTR [rax],al
 1001225:	add    BYTE PTR [rax],al
 1001227:	add    BYTE PTR [rsi],cl
 1001229:	sbb    al,0x6
 100122b:	add    BYTE PTR [rax],al
 100122d:	add    BYTE PTR [rax],al
 100122f:	add    BYTE PTR [rdx],ch
 1001231:	sbb    al,0x6
 1001233:	add    BYTE PTR [rax],al
 1001235:	add    BYTE PTR [rax],al
 1001237:	add    BYTE PTR [rsi],dh
 1001239:	sbb    al,0x6
 100123b:	add    BYTE PTR [rax],al
 100123d:	add    BYTE PTR [rax],al
 100123f:	add    BYTE PTR [rsi+0x1c],cl
 1001242:	(bad)  
 1001243:	add    BYTE PTR [rax],al
 1001245:	add    BYTE PTR [rax],al
 1001247:	add    BYTE PTR [rsi+0x1c],ah
 100124a:	(bad)  
 100124b:	add    BYTE PTR [rax],al
 100124d:	add    BYTE PTR [rax],al
 100124f:	add    BYTE PTR [rsi+0x1c],dh
 1001252:	(bad)  
 1001253:	add    BYTE PTR [rax],al
 1001255:	add    BYTE PTR [rax],al
 1001257:	add    BYTE PTR [rdx+0x61c],al
 100125d:	add    BYTE PTR [rax],al
 100125f:	add    BYTE PTR [rsi+0x61c],dl
 1001265:	add    BYTE PTR [rax],al
 1001267:	add    BYTE PTR [rsi+0x61c],ah
 100126d:	add    BYTE PTR [rax],al
 100126f:	add    BYTE PTR [rax+0x61c],bh
 1001275:	add    BYTE PTR [rax],al
 1001277:	add    dh,cl
 1001279:	sbb    al,0x6
 100127b:	add    BYTE PTR [rax],al
 100127d:	add    BYTE PTR [rax],al
 100127f:	add    ah,ch
 1001281:	sbb    al,0x6
 1001283:	add    BYTE PTR [rax],al
 1001285:	add    BYTE PTR [rax],al
 1001287:	add    BYTE PTR [rsi],al
 1001289:	sbb    eax,0x6
 100128e:	add    BYTE PTR [rax],al
 1001290:	(bad)  
 1001291:	sbb    eax,0x6
 1001296:	add    BYTE PTR [rax],al
 1001298:	sub    al,0x1d
 100129a:	(bad)  
 100129b:	add    BYTE PTR [rax],al
 100129d:	add    BYTE PTR [rax],al
 100129f:	add    BYTE PTR [rdx],bh
 10012a1:	sbb    eax,0x6
 10012a6:	add    BYTE PTR [rax],al
 10012a8:	sbb    rax,0x6
 10012ae:	add    BYTE PTR [rax],al
 10012b0:	push   rsi
 10012b1:	sbb    eax,0x6
 10012b6:	add    BYTE PTR [rax],al
 10012b8:	push   0x1d
 10012ba:	(bad)  
 10012bb:	add    BYTE PTR [rax],al
 10012bd:	add    BYTE PTR [rax],al
 10012bf:	add    BYTE PTR [rax+0x61d],al
 10012c5:	add    BYTE PTR [rax],al
 10012c7:	add    BYTE PTR [rsi],ah
 10012c9:	sbb    eax,DWORD PTR [rsi]
 10012cb:	add    BYTE PTR [rax],al
 10012cd:	add    BYTE PTR [rax],al
 10012cf:	add    BYTE PTR [rbp+rbx*1+0x6],dh
 10012d6:	add    BYTE PTR [rax],al
 10012d8:	enter  0x61d,0x0
 10012dc:	add    BYTE PTR [rax],al
 10012de:	add    BYTE PTR [rax],al
 10012e0:	ficomp WORD PTR [rip+0x6]        # 0x10012ec
 10012e6:	add    BYTE PTR [rax],al
 10012e8:	repnz sbb eax,0x6
 10012ee:	add    BYTE PTR [rax],al
 10012f0:	add    al,0x1e
 10012f2:	(bad)  
 10012f3:	add    BYTE PTR [rax],al
 10012f5:	add    BYTE PTR [rax],al
 10012f7:	add    BYTE PTR [rax],bl
 10012f9:	(bad)  
 10012fa:	(bad)  
 10012fb:	add    BYTE PTR [rax],al
 10012fd:	add    BYTE PTR [rax],al
 10012ff:	add    BYTE PTR [rdx],dh
 1001301:	(bad)  
 1001302:	(bad)  
 1001303:	add    BYTE PTR [rax],al
 1001305:	add    BYTE PTR [rax],al
 1001307:	add    BYTE PTR [rax+0x1e],dl
 100130a:	(bad)  
 100130b:	add    BYTE PTR [rax],al
 100130d:	add    BYTE PTR [rax],al
 100130f:	add    BYTE PTR [rax+0x1e],ah
 1001312:	(bad)  
 1001313:	add    BYTE PTR [rax],al
 1001315:	add    BYTE PTR [rax],al
 1001317:	add    BYTE PTR [rax+0x1e],dh
 100131a:	(bad)  
 100131b:	add    BYTE PTR [rax],al
 100131d:	add    BYTE PTR [rax],al
 100131f:	add    BYTE PTR [rsi+rbx*1+0x6],cl
 1001326:	add    BYTE PTR [rax],al
 1001328:	mov    ah,0x1e
 100132a:	(bad)  
 100132b:	add    BYTE PTR [rax],al
 100132d:	add    BYTE PTR [rax],al
 100132f:	add    al,al
 1001331:	(bad)  
 1001332:	(bad)  
 1001333:	add    BYTE PTR [rax],al
 1001335:	add    BYTE PTR [rax],al
 1001337:	add    dh,cl
 1001339:	(bad)  
 100133a:	(bad)  
 100133b:	add    BYTE PTR [rax],al
 100133d:	add    BYTE PTR [rax],al
 100133f:	add    dl,ah
 1001341:	(bad)  
 1001342:	(bad)  
 1001343:	add    BYTE PTR [rax],al
 1001345:	add    BYTE PTR [rax],al
 1001347:	add    dl,dh
 1001349:	(bad)  
 100134a:	(bad)  
 100134b:	add    BYTE PTR [rax],al
 100134d:	add    BYTE PTR [rax],al
 100134f:	add    BYTE PTR [rax],cl
 1001351:	(bad)  
 1001352:	(bad)  
 1001353:	add    BYTE PTR [rax],al
 1001355:	add    BYTE PTR [rax],al
 1001357:	add    BYTE PTR [rdi+rbx*1],dl
 100135a:	(bad)  
 100135b:	add    BYTE PTR [rax],al
 100135d:	add    BYTE PTR [rax],al
 100135f:	add    BYTE PTR [rsi],ah
 1001361:	(bad)  
 1001362:	(bad)  
 1001363:	add    BYTE PTR [rax],al
 1001365:	add    BYTE PTR [rax],al
 1001367:	add    BYTE PTR [rax],bh
 1001369:	(bad)  
 100136a:	(bad)  
 100136b:	add    BYTE PTR [rax],al
 100136d:	add    BYTE PTR [rax],al
 100136f:	add    BYTE PTR [rax+0x1f],cl
 1001372:	(bad)  
 1001373:	add    BYTE PTR [rax],al
 1001375:	add    BYTE PTR [rax],al
 1001377:	add    BYTE PTR [rax+0x1f],ah
 100137a:	(bad)  
 100137b:	add    BYTE PTR [rax],al
 100137d:	add    BYTE PTR [rax],al
 100137f:	add    BYTE PTR [rdx+0x1f],bh
 1001382:	(bad)  
 1001383:	add    BYTE PTR [rax],al
 1001385:	add    BYTE PTR [rax],al
 1001387:	add    BYTE PTR [rsi+0x61f],cl
 100138d:	add    BYTE PTR [rax],al
 100138f:	add    BYTE PTR [rdi+rbx*1+0x6],ah
 1001396:	add    BYTE PTR [rax],al
 1001398:	mov    esp,0x61f
 100139d:	add    BYTE PTR [rax],al
 100139f:	add    al,bl
 10013a1:	(bad)  
 10013a2:	(bad)  
 10013a3:	add    BYTE PTR [rax],al
 10013a5:	add    BYTE PTR [rax],al
 10013a7:	add    al,ch
 10013a9:	(bad)  
 10013aa:	(bad)  
 10013ab:	add    BYTE PTR [rax],al
 10013ad:	add    BYTE PTR [rax],al
 10013af:	add    al,bh
 10013b1:	(bad)  
 10013b2:	(bad)  
 10013b3:	add    BYTE PTR [rax],al
 10013b5:	add    BYTE PTR [rax],al
 10013b7:	add    BYTE PTR [rax+riz*1],cl
 10013ba:	(bad)  
 10013bb:	add    BYTE PTR [rax],al
 10013bd:	add    BYTE PTR [rax],al
 10013bf:	add    BYTE PTR [rax+riz*1],ah
 10013c2:	(bad)  
 10013c3:	add    BYTE PTR [rax],al
 10013c5:	add    BYTE PTR [rax],al
 10013c7:	add    BYTE PTR [rax],bh
 10013c9:	and    BYTE PTR [rsi],al
 10013cb:	add    BYTE PTR [rax],al
 10013cd:	add    BYTE PTR [rax],al
 10013cf:	add    BYTE PTR [rax+0x20],cl
 10013d2:	(bad)  
 10013d3:	add    BYTE PTR [rax],al
 10013d5:	add    BYTE PTR [rax],al
 10013d7:	add    BYTE PTR [rax+riz*1+0x6],ah
 10013db:	add    BYTE PTR [rax],al
 10013dd:	add    BYTE PTR [rax],al
 10013df:	add    BYTE PTR [rdx+0x20],bh
 10013e2:	(bad)  
 10013e3:	add    BYTE PTR [rax],al
 10013e5:	add    BYTE PTR [rax],al
 10013e7:	add    BYTE PTR [rdx+0x620],dl
 10013ed:	add    BYTE PTR [rax],al
 10013ef:	add    BYTE PTR [rdx+0x620],ch
 10013f5:	add    BYTE PTR [rax],al
 10013f7:	add    al,al
 10013f9:	and    BYTE PTR [rsi],al
 10013fb:	add    BYTE PTR [rax],al
 10013fd:	add    BYTE PTR [rax],al
 10013ff:	add    ah,dl
 1001401:	and    BYTE PTR [rsi],al
 1001403:	add    BYTE PTR [rax],al
 1001405:	add    BYTE PTR [rax],al
 1001407:	add    al,ch
 1001409:	and    BYTE PTR [rsi],al
 100140b:	add    BYTE PTR [rax],al
 100140d:	add    BYTE PTR [rax],al
 100140f:	add    ah,dh
 1001411:	and    BYTE PTR [rsi],al
 1001413:	add    BYTE PTR [rax],al
 1001415:	add    BYTE PTR [rax],al
 1001417:	add    BYTE PTR [rax],al
 1001419:	and    DWORD PTR [rsi],eax
 100141b:	add    BYTE PTR [rax],al
 100141d:	add    BYTE PTR [rax],al
 100141f:	add    BYTE PTR [rcx+riz*1],dl
 1001422:	(bad)  
 1001423:	add    BYTE PTR [rax],al
 1001425:	add    BYTE PTR [rax],al
 1001427:	add    BYTE PTR [rcx+riz*1],ah
 100142a:	(bad)  
 100142b:	add    BYTE PTR [rax],al
 100142d:	add    BYTE PTR [rax],al
 100142f:	add    BYTE PTR [rdx],bh
 1001431:	and    DWORD PTR [rsi],eax
 1001433:	add    BYTE PTR [rax],al
 1001435:	add    BYTE PTR [rax],al
 1001437:	add    BYTE PTR [rax+0x21],dl
 100143a:	(bad)  
 100143b:	add    BYTE PTR [rax],al
 100143d:	add    BYTE PTR [rax],al
 100143f:	add    BYTE PTR [rax+0x21],ch
 1001442:	(bad)  
 1001443:	add    BYTE PTR [rax],al
 1001445:	add    BYTE PTR [rax],al
 1001447:	add    BYTE PTR [rcx+riz*1+0x6],bh
 100144b:	add    BYTE PTR [rax],al
 100144d:	add    BYTE PTR [rax],al
 100144f:	add    BYTE PTR [rax+0x621],dl
 1001455:	add    BYTE PTR [rax],al
 1001457:	add    BYTE PTR [rax+0x621],ah
 100145d:	add    BYTE PTR [rax],al
 100145f:	add    BYTE PTR [rsi+0x621],ch
 1001465:	add    BYTE PTR [rax],al
 1001467:	add    dl,al
 1001469:	and    DWORD PTR [rsi],eax
 100146b:	add    BYTE PTR [rax],al
 100146d:	add    BYTE PTR [rax],al
 100146f:	add    dl,dl
 1001471:	and    DWORD PTR [rsi],eax
 1001473:	add    BYTE PTR [rax],al
 1001475:	add    BYTE PTR [rax],al
 1001477:	add    dh,ch
 1001479:	and    DWORD PTR [rsi],eax
 100147b:	add    BYTE PTR [rax],al
 100147d:	add    BYTE PTR [rax],al
 100147f:	add    dh,bh
 1001481:	and    DWORD PTR [rsi],eax
 1001483:	add    BYTE PTR [rax],al
 1001485:	add    BYTE PTR [rax],al
 1001487:	add    BYTE PTR [rax],dl
 1001489:	and    al,BYTE PTR [rsi]
 100148b:	add    BYTE PTR [rax],al
 100148d:	add    BYTE PTR [rax],al
 100148f:	add    BYTE PTR [rdx],ah
 1001491:	and    al,BYTE PTR [rsi]
 1001493:	add    BYTE PTR [rax],al
 1001495:	add    BYTE PTR [rax],al
 1001497:	add    BYTE PTR [rdx],dh
 1001499:	and    al,BYTE PTR [rsi]
 100149b:	add    BYTE PTR [rax],al
 100149d:	add    BYTE PTR [rax],al
 100149f:	add    BYTE PTR [rax+0x22],al
 10014a2:	(bad)  
 10014a3:	add    BYTE PTR [rax],al
 10014a5:	add    BYTE PTR [rax],al
 10014a7:	add    BYTE PTR [rsi+0x22],cl
 10014aa:	(bad)  
 10014ab:	add    BYTE PTR [rax],al
 10014ad:	add    BYTE PTR [rax],al
 10014af:	add    BYTE PTR [rdx+riz*1+0x6],ah
 10014b3:	add    BYTE PTR [rax],al
 10014b5:	add    BYTE PTR [rax],al
 10014b7:	add    BYTE PTR [rax],dl
 10014b9:	sbb    eax,DWORD PTR [rsi]
 10014bb:	add    BYTE PTR [rax],al
 10014bd:	add    BYTE PTR [rax],al
 10014bf:	add    BYTE PTR [rsi],al
 10014c1:	sbb    eax,DWORD PTR [rsi]
 10014c3:	add    BYTE PTR [rax],al
 10014c5:	add    BYTE PTR [rax],al
 10014c7:	add    dh,ch
 10014c9:	sbb    al,BYTE PTR [rsi]
 10014cb:	add    BYTE PTR [rax],al
 10014cd:	add    BYTE PTR [rax],al
 10014cf:	add    ah,dl
 10014d1:	sbb    al,BYTE PTR [rsi]
 10014d3:	add    BYTE PTR [rax],al
 10014d5:	add    BYTE PTR [rax],al
 10014d7:	add    dh,al
 10014d9:	sbb    al,BYTE PTR [rsi]
 10014db:	add    BYTE PTR [rax],al
 10014dd:	add    BYTE PTR [rax],al
 10014df:	add    BYTE PTR [rax+0x62a],bh
 10014e5:	add    BYTE PTR [rax],al
 10014e7:	add    BYTE PTR [rsi+0x62a],bl
 10014ed:	add    BYTE PTR [rax],al
 10014ef:	add    BYTE PTR [rsi+0x62a],cl
 10014f5:	add    BYTE PTR [rax],al
 10014f7:	add    BYTE PTR [rdx+rbp*1+0x6],dh
 10014fb:	add    BYTE PTR [rax],al
 10014fd:	add    BYTE PTR [rax],al
 10014ff:	add    BYTE PTR [rdx+rbp*1+0x6],ah
 1001503:	add    BYTE PTR [rax],al
 1001505:	add    BYTE PTR [rax],al
 1001507:	add    BYTE PTR [rax+0x2a],dl
 100150a:	(bad)  
 100150b:	add    BYTE PTR [rax],al
 100150d:	add    BYTE PTR [rax],al
 100150f:	add    BYTE PTR [rsi],dh
 1001511:	sub    al,BYTE PTR [rsi]
 1001513:	add    BYTE PTR [rax],al
 1001515:	add    BYTE PTR [rax],al
 1001517:	add    BYTE PTR [rdx],ah
 1001519:	sub    al,BYTE PTR [rsi]
 100151b:	add    BYTE PTR [rax],al
 100151d:	add    BYTE PTR [rax],al
 100151f:	add    BYTE PTR [rsi],cl
 1001521:	sub    al,BYTE PTR [rsi]
 1001523:	add    BYTE PTR [rax],al
 1001525:	add    BYTE PTR [rax],al
 1001527:	add    dl,dh
 1001529:	sub    DWORD PTR [rsi],eax
 100152b:	add    BYTE PTR [rax],al
 100152d:	add    BYTE PTR [rax],al
 100152f:	add    dl,ah
 1001531:	sub    DWORD PTR [rsi],eax
 1001533:	add    BYTE PTR [rax],al
 1001535:	add    BYTE PTR [rax],al
 1001537:	add    BYTE PTR [rdx+0x61a],bh
 100153d:	add    BYTE PTR [rax],al
 100153f:	add    BYTE PTR [rdx+rbx*1+0x6],bl
 1001546:	add    BYTE PTR [rax],al
 1001548:	xchg   esp,eax
 1001549:	sbb    al,BYTE PTR [rsi]
 100154b:	add    BYTE PTR [rax],al
 100154d:	add    BYTE PTR [rax],al
 100154f:	add    BYTE PTR [rdx+rbx*1+0x6],al
 1001556:	add    BYTE PTR [rax],al
 1001558:	jb     0x1001574
 100155a:	(bad)  
 100155b:	add    BYTE PTR [rax],al
 100155d:	add    BYTE PTR [rax],al
 100155f:	add    BYTE PTR [rsi+0x1a],ah
 1001562:	(bad)  
 1001563:	add    BYTE PTR [rax],al
 1001565:	add    BYTE PTR [rax],al
 1001567:	add    BYTE PTR [rdx+0x1a],bl
 100156a:	(bad)  
 100156b:	add    BYTE PTR [rax],al
 100156d:	add    BYTE PTR [rax],al
 100156f:	add    BYTE PTR [rsi+0x1a],al
 1001572:	(bad)  
 1001573:	add    BYTE PTR [rax],al
 1001575:	add    BYTE PTR [rax],al
 1001577:	add    BYTE PTR [rsi],ch
 1001579:	sbb    al,BYTE PTR [rsi]
 100157b:	add    BYTE PTR [rax],al
 100157d:	add    BYTE PTR [rax],al
 100157f:	add    BYTE PTR [rdx+rbx*1],bl
 1001582:	(bad)  
 1001583:	add    BYTE PTR [rax],al
 1001585:	add    BYTE PTR [rax],al
 1001587:	add    BYTE PTR [rdx],cl
 1001589:	sbb    al,BYTE PTR [rsi]
 100158b:	add    BYTE PTR [rax],al
 100158d:	add    BYTE PTR [rax],al
 100158f:	add    BYTE PTR [rsi+0x61d],dl
	...
 100159d:	add    BYTE PTR [rax],al
 100159f:	add    BYTE PTR [rdi+riz*1+0x6],bl
	...
 10015af:	add    BYTE PTR [rbp+riz*1+0x6],dl
 10015b6:	add    BYTE PTR [rax],al
 10015b8:	(bad)  
 10015b9:	and    eax,0x6
 10015be:	add    BYTE PTR [rax],al
 10015c0:	js     0x10015e7
 10015c2:	(bad)  
 10015c3:	add    BYTE PTR [rax],al
 10015c5:	add    BYTE PTR [rax],al
 10015c7:	add    BYTE PTR [rbp+riz*1+0x6],ch
 10015cb:	add    BYTE PTR [rax],al
 10015cd:	add    BYTE PTR [rax],al
 10015cf:	add    BYTE PTR [rax+0x25],bl
 10015d2:	(bad)  
 10015d3:	add    BYTE PTR [rax],al
 10015d5:	add    BYTE PTR [rax],al
 10015d7:	add    BYTE PTR [rax+0x625],bh
 10015dd:	add    BYTE PTR [rax],al
 10015df:	add    BYTE PTR ds:0x6,dh
 10015e6:	add    BYTE PTR [rax],al
 10015e8:	sub    BYTE PTR [rip+0x6],ah        # 0x10015f4
 10015ee:	add    BYTE PTR [rax],al
 10015f0:	sbb    ah,BYTE PTR [rip+0x6]        # 0x10015fc
 10015f6:	add    BYTE PTR [rax],al
 10015f8:	adc    ah,BYTE PTR [rip+0x6]        # 0x1001604
 10015fe:	add    BYTE PTR [rax],al
 1001600:	or     BYTE PTR [rip+0x6],ah        # 0x100160c
 1001606:	add    BYTE PTR [rax],al
 1001608:	rex.X and eax,0x6
 100160e:	add    BYTE PTR [rax],al
 1001610:	cmp    ah,BYTE PTR [rbx]
 1001612:	(bad)  
 1001613:	add    BYTE PTR [rax],al
 1001615:	add    BYTE PTR [rax],al
 1001617:	add    BYTE PTR [rax],al
 1001619:	and    eax,0x6
 100161e:	add    BYTE PTR [rax],al
 1001620:	repnz and al,0x6
 1001623:	add    BYTE PTR [rax],al
 1001625:	add    BYTE PTR [rax],al
 1001627:	add    al,ah
 1001629:	and    al,0x6
 100162b:	add    BYTE PTR [rax],al
 100162d:	add    BYTE PTR [rax],al
 100162f:	add    dl,dl
 1001631:	and    al,0x6
 1001633:	add    BYTE PTR [rax],al
 1001635:	add    BYTE PTR [rax],al
 1001637:	add    dh,al
 1001639:	and    al,0x6
 100163b:	add    BYTE PTR [rax],al
 100163d:	add    BYTE PTR [rax],al
 100163f:	add    BYTE PTR [rsp+0x6],dh
 1001646:	add    BYTE PTR [rax],al
 1001648:	test   al,0x24
 100164a:	(bad)  
 100164b:	add    BYTE PTR [rax],al
 100164d:	add    BYTE PTR [rax],al
 100164f:	add    BYTE PTR [rax+0x624],bl
 1001655:	add    BYTE PTR [rax],al
 1001657:	add    BYTE PTR [rax+0x624],al
 100165d:	add    BYTE PTR [rax],al
 100165f:	add    ah,al
 1001661:	sub    al,BYTE PTR [rsi]
 1001663:	add    BYTE PTR [rax],al
 1001665:	add    BYTE PTR [rax],al
 1001667:	add    BYTE PTR [rsi+0x24],ch
 100166a:	(bad)  
 100166b:	add    BYTE PTR [rax],al
 100166d:	add    BYTE PTR [rax],al
 100166f:	add    BYTE PTR [rsp+0x6],ah
 1001673:	add    BYTE PTR [rax],al
 1001675:	add    BYTE PTR [rax],al
 1001677:	add    BYTE PTR [rsp+0x6],dl
 100167b:	add    BYTE PTR [rax],al
 100167d:	add    BYTE PTR [rax],al
 100167f:	add    BYTE PTR [rdx+0x24],cl
 1001682:	(bad)  
 1001683:	add    BYTE PTR [rax],al
 1001685:	add    BYTE PTR [rax],al
 1001687:	add    dh,dh
 1001689:	and    eax,0x6
 100168e:	add    BYTE PTR [rax],al
 1001690:	in     al,dx
 1001691:	and    eax,0x6
 1001696:	add    BYTE PTR [rax],al
 1001698:	in     al,0x25
 100169a:	(bad)  
 100169b:	add    BYTE PTR [rax],al
 100169d:	add    BYTE PTR [rax],al
 100169f:	add    dh,dl
 10016a1:	and    eax,0x6
 10016a6:	add    BYTE PTR [rax],al
 10016a8:	nop
 10016a9:	and    al,BYTE PTR [rsi]
 10016ab:	add    BYTE PTR [rax],al
 10016ad:	add    BYTE PTR [rax],al
 10016af:	add    BYTE PTR [rdx+riz*1+0x6],bl
 10016b6:	add    BYTE PTR [rax],al
 10016b8:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 10016b9:	and    al,BYTE PTR [rsi]
 10016bb:	add    BYTE PTR [rax],al
 10016bd:	add    BYTE PTR [rax],al
 10016bf:	add    BYTE PTR [rdx+0x622],bh
 10016c5:	add    BYTE PTR [rax],al
 10016c7:	add    dh,al
 10016c9:	and    al,BYTE PTR [rsi]
 10016cb:	add    BYTE PTR [rax],al
 10016cd:	add    BYTE PTR [rax],al
 10016cf:	add    al,dl
 10016d1:	and    al,BYTE PTR [rsi]
 10016d3:	add    BYTE PTR [rax],al
 10016d5:	add    BYTE PTR [rax],al
 10016d7:	add    ah,bl
 10016d9:	and    al,BYTE PTR [rsi]
 10016db:	add    BYTE PTR [rax],al
 10016dd:	add    BYTE PTR [rax],al
 10016df:	add    dh,ah
 10016e1:	and    al,BYTE PTR [rsi]
 10016e3:	add    BYTE PTR [rax],al
 10016e5:	add    BYTE PTR [rax],al
 10016e7:	add    ah,dh
 10016e9:	and    al,BYTE PTR [rsi]
 10016eb:	add    BYTE PTR [rax],al
 10016ed:	add    BYTE PTR [rax],al
 10016ef:	add    dh,bh
 10016f1:	and    al,BYTE PTR [rsi]
 10016f3:	add    BYTE PTR [rax],al
 10016f5:	add    BYTE PTR [rax],al
 10016f7:	add    BYTE PTR [rax],cl
 10016f9:	and    eax,DWORD PTR [rsi]
 10016fb:	add    BYTE PTR [rax],al
 10016fd:	add    BYTE PTR [rax],al
 10016ff:	add    BYTE PTR [rdx],dl
 1001701:	and    eax,DWORD PTR [rsi]
 1001703:	add    BYTE PTR [rax],al
 1001705:	add    BYTE PTR [rax],al
 1001707:	add    BYTE PTR [rdx],bl
 1001709:	and    eax,DWORD PTR [rsi]
 100170b:	add    BYTE PTR [rax],al
 100170d:	add    BYTE PTR [rax],al
 100170f:	add    BYTE PTR [rbx+riz*1],ah
 1001712:	(bad)  
 1001713:	add    BYTE PTR [rax],al
 1001715:	add    BYTE PTR [rax],al
 1001717:	add    ah,cl
 1001719:	and    eax,0x6
 100171e:	add    BYTE PTR [rax],al
 1001720:	push   rax
 1001721:	and    eax,DWORD PTR [rsi]
 1001723:	add    BYTE PTR [rax],al
 1001725:	add    BYTE PTR [rax],al
 1001727:	add    BYTE PTR [rdx+0x23],bl
 100172a:	(bad)  
 100172b:	add    BYTE PTR [rax],al
 100172d:	add    BYTE PTR [rax],al
 100172f:	add    BYTE PTR [rbx+riz*1+0x6],ah
 1001733:	add    BYTE PTR [rax],al
 1001735:	add    BYTE PTR [rax],al
 1001737:	add    BYTE PTR [rsi+0x23],ch
 100173a:	(bad)  
 100173b:	add    BYTE PTR [rax],al
 100173d:	add    BYTE PTR [rax],al
 100173f:	add    BYTE PTR [rdx+0x23],bh
 1001742:	(bad)  
 1001743:	add    BYTE PTR [rax],al
 1001745:	add    BYTE PTR [rax],al
 1001747:	add    BYTE PTR [rdx+0x623],al
 100174d:	add    BYTE PTR [rax],al
 100174f:	add    BYTE PTR [rdx+0x623],cl
 1001755:	add    BYTE PTR [rax],al
 1001757:	add    BYTE PTR [rdx+0x623],bl
 100175d:	add    BYTE PTR [rax],al
 100175f:	add    BYTE PTR [rsi+0x623],ah
 1001765:	add    BYTE PTR [rax],al
 1001767:	add    BYTE PTR [rdx+0x623],dh
 100176d:	add    BYTE PTR [rax],al
 100176f:	add    al,al
 1001771:	and    eax,DWORD PTR [rsi]
 1001773:	add    BYTE PTR [rax],al
 1001775:	add    BYTE PTR [rax],al
 1001777:	add    dl,cl
 1001779:	and    eax,DWORD PTR [rsi]
 100177b:	add    BYTE PTR [rax],al
 100177d:	add    BYTE PTR [rax],al
 100177f:	add    ah,dl
 1001781:	and    eax,DWORD PTR [rsi]
 1001783:	add    BYTE PTR [rax],al
 1001785:	add    BYTE PTR [rax],al
 1001787:	add    al,ah
 1001789:	and    eax,DWORD PTR [rsi]
 100178b:	add    BYTE PTR [rax],al
 100178d:	add    BYTE PTR [rax],al
 100178f:	add    ah,ch
 1001791:	and    eax,DWORD PTR [rsi]
 1001793:	add    BYTE PTR [rax],al
 1001795:	add    BYTE PTR [rax],al
 1001797:	add    al,bh
 1001799:	and    eax,DWORD PTR [rsi]
 100179b:	add    BYTE PTR [rax],al
 100179d:	add    BYTE PTR [rax],al
 100179f:	add    BYTE PTR [rsp],al
 10017a2:	(bad)  
 10017a3:	add    BYTE PTR [rax],al
 10017a5:	add    BYTE PTR [rax],al
 10017a7:	add    BYTE PTR [rsi],cl
 10017a9:	and    al,0x6
 10017ab:	add    BYTE PTR [rax],al
 10017ad:	add    BYTE PTR [rax],al
 10017af:	add    BYTE PTR [rdx],bl
 10017b1:	and    al,0x6
 10017b3:	add    BYTE PTR [rax],al
 10017b5:	add    BYTE PTR [rax],al
 10017b7:	add    BYTE PTR [rsp],ah
 10017ba:	(bad)  
 10017bb:	add    BYTE PTR [rax],al
 10017bd:	add    BYTE PTR [rax],al
 10017bf:	add    BYTE PTR [rax],dh
 10017c1:	and    al,0x6
 10017c3:	add    BYTE PTR [rax],al
 10017c5:	add    BYTE PTR [rax],al
 10017c7:	add    BYTE PTR [rsi],bh
 10017c9:	and    al,0x6
	...
 10017d7:	add    BYTE PTR [rdx],bl
 10017d9:	sub    DWORD PTR [rsi],eax
 10017db:	add    BYTE PTR [rax],al
 10017dd:	add    BYTE PTR [rax],al
 10017df:	add    BYTE PTR [rdx],ch
 10017e1:	sub    DWORD PTR [rsi],eax
	...
 10017ef:	add    BYTE PTR [rax],bl
 10017f1:	add    BYTE PTR [rax],al
 10017f3:	add    BYTE PTR [rax],al
 10017f5:	add    BYTE PTR [rax],al
 10017f7:	or     BYTE PTR [rbp+0x0],0x0
 10017fe:	add    BYTE PTR [rax+0x8b],al
 1001804:	add    BYTE PTR [rax],al
 1001806:	add    BYTE PTR [rax+0x88],al
 100180c:	add    BYTE PTR [rax],al
 100180e:	add    BYTE PTR [rax+0x87],al
 1001814:	add    BYTE PTR [rax],al
 1001816:	add    BYTE PTR [rax+0x4b],al
 100181c:	add    BYTE PTR [rax],al
 100181e:	add    BYTE PTR [rax+0x1f],al
 1001824:	add    BYTE PTR [rax],al
 1001826:	add    BYTE PTR [rax+0x9],al
 100182c:	add    BYTE PTR [rax],al
 100182e:	add    BYTE PTR [rax+0x0],al
 1001834:	add    BYTE PTR [rax],al
 1001836:	add    BYTE PTR [rax],al
 1001838:	(bad)  
 1001839:	add    BYTE PTR [rax],al
 100183b:	add    BYTE PTR [rax],al
 100183d:	add    BYTE PTR [rax],al
 100183f:	add    BYTE PTR [rdx],0x0
 1001842:	add    BYTE PTR [rax],al
 1001844:	add    BYTE PTR [rax],al
 1001846:	add    BYTE PTR [rax+0x9],al
 100184c:	add    BYTE PTR [rax],al
 100184e:	add    BYTE PTR [rax+0xc8],al
 1001854:	add    BYTE PTR [rax],al
 1001856:	add    BYTE PTR [rax+0x0],al
 100185c:	add    BYTE PTR [rax],al
 100185e:	add    BYTE PTR [rax],al
 1001860:	jl     0x1001889
 1001862:	(bad)  
	...
 100186f:	add    BYTE PTR [rsi],dh
 1001871:	(bad)  
 1001872:	(bad)  
	...
 100187f:	add    dl,ah
 1001881:	(bad)  
 1001882:	(bad)  
 1001883:	add    BYTE PTR [rax],al
 1001885:	add    BYTE PTR [rax],al
 1001887:	add    BYTE PTR [rax+rbp*1],cl
 100188a:	(bad)  
 100188b:	add    BYTE PTR [rax],al
 100188d:	add    BYTE PTR [rax],al
 100188f:	add    al,bh
 1001891:	(bad)  
 1001892:	(bad)  
	...
 100189f:	add    BYTE PTR [rcx+rbp*1+0x6],ch
	...
 10018ae:	add    BYTE PTR [rax],al
 10018b0:	mov    edx,0x627
 10018b5:	add    BYTE PTR [rax],al
 10018b7:	add    BYTE PTR [rsi+0x627],dl
 10018bd:	add    BYTE PTR [rax],al
 10018bf:	add    BYTE PTR [rdi+riz*1+0x6],ch
	...
 10018ce:	add    BYTE PTR [rax],al
 10018d0:	pop    rsp
 10018d1:	es (bad) 
 10018d3:	add    BYTE PTR [rax],al
 10018d5:	add    BYTE PTR [rax],al
 10018d7:	add    BYTE PTR [rsi+0x26],al
 10018da:	(bad)  
 10018db:	add    BYTE PTR [rax],al
 10018dd:	add    BYTE PTR [rax],al
 10018df:	add    BYTE PTR [rsi+riz*1],ch
 10018e2:	(bad)  
	...
 10018ef:	add    BYTE PTR [rax+0x629],dl
 10018f5:	add    BYTE PTR [rax],al
 10018f7:	add    BYTE PTR [rdx+0x629],al
	...
 1001905:	add    BYTE PTR [rax],al
 1001907:	add    BYTE PTR [rax+0xe],bh
 100190a:	add    BYTE PTR [rax],al
 100190c:	add    BYTE PTR [rax],al
 100190e:	add    BYTE PTR [rax+0x321e],al
 1001914:	add    BYTE PTR [rax],al
 1001916:	add    BYTE PTR [rax+0x1db9],al
 100191c:	add    BYTE PTR [rax],al
 100191e:	add    BYTE PTR [rax+0x1db8],al
 1001924:	add    BYTE PTR [rax],al
 1001926:	add    BYTE PTR [rax+0x2cfd],al
 100192c:	add    BYTE PTR [rax],al
 100192e:	add    BYTE PTR [rax+0x115],al
 1001934:	add    BYTE PTR [rax],al
 1001936:	add    BYTE PTR [rax+0x10dd],al
 100193c:	add    BYTE PTR [rax],al
 100193e:	add    BYTE PTR [rax+0x1b9c],al
 1001944:	add    BYTE PTR [rax],al
 1001946:	add    BYTE PTR [rax+0x125],al
 100194c:	add    BYTE PTR [rax],al
 100194e:	add    BYTE PTR [rax+0x5ac],al
 1001954:	add    BYTE PTR [rax],al
 1001956:	add    BYTE PTR [rax+0xf9d],al
 100195c:	add    BYTE PTR [rax],al
 100195e:	add    BYTE PTR [rax+0x1d95],al
 1001964:	add    BYTE PTR [rax],al
 1001966:	add    BYTE PTR [rax+0x50b],al
 100196c:	add    BYTE PTR [rax],al
 100196e:	add    BYTE PTR [rax+0xcda],al
 1001974:	add    BYTE PTR [rax],al
 1001976:	add    BYTE PTR [rax+0x1b0b],al
 100197c:	add    BYTE PTR [rax],al
 100197e:	add    BYTE PTR [rax+0x10c],al
 1001984:	add    BYTE PTR [rax],al
 1001986:	add    BYTE PTR [rax+0x4fe],al
 100198c:	add    BYTE PTR [rax],al
 100198e:	add    BYTE PTR [rax+0x1d90],al
 1001994:	add    BYTE PTR [rax],al
 1001996:	add    BYTE PTR [rax+0x7e7],al
 100199c:	add    BYTE PTR [rax],al
 100199e:	add    BYTE PTR [rax+0x169e],al
 10019a4:	add    BYTE PTR [rax],al
 10019a6:	add    BYTE PTR [rax+0x2b1b],al
 10019ac:	add    BYTE PTR [rax],al
 10019ae:	add    BYTE PTR [rax+0x2c63],al
 10019b4:	add    BYTE PTR [rax],al
 10019b6:	add    BYTE PTR [rax+0x118],al
 10019bc:	add    BYTE PTR [rax],al
 10019be:	add    BYTE PTR [rax+0x7e3],al
 10019c4:	add    BYTE PTR [rax],al
 10019c6:	add    BYTE PTR [rax+0x102],al
 10019cc:	add    BYTE PTR [rax],al
 10019ce:	add    BYTE PTR [rax+0x58a],al
 10019d4:	add    BYTE PTR [rax],al
 10019d6:	add    BYTE PTR [rax+0x5ae],al
 10019dc:	add    BYTE PTR [rax],al
 10019de:	add    BYTE PTR [rax+0x2ba7],al
 10019e4:	add    BYTE PTR [rax],al
 10019e6:	add    BYTE PTR [rax+0x10fc],al
 10019ec:	add    BYTE PTR [rax],al
 10019ee:	add    BYTE PTR [rax+0x105],al
 10019f4:	add    BYTE PTR [rax],al
 10019f6:	add    BYTE PTR [rax+0x32ec],al
 10019fc:	add    BYTE PTR [rax],al
 10019fe:	add    BYTE PTR [rax+0x9df],al
 1001a04:	add    BYTE PTR [rax],al
 1001a06:	add    BYTE PTR [rax+0xaaa],al
 1001a0c:	add    BYTE PTR [rax],al
 1001a0e:	add    BYTE PTR [rax+0x104b],al
 1001a14:	add    BYTE PTR [rax],al
 1001a16:	add    BYTE PTR [rax+0x109],al
 1001a1c:	add    BYTE PTR [rax],al
 1001a1e:	add    BYTE PTR [rax+0x10a],al
 1001a24:	add    BYTE PTR [rax],al
 1001a26:	add    BYTE PTR [rax+0x4fc],al
 1001a2c:	add    BYTE PTR [rax],al
 1001a2e:	add    BYTE PTR [rax+0x2b04],al
 1001a34:	add    BYTE PTR [rax],al
 1001a36:	add    BYTE PTR [rax+0x32d9],al
 1001a3c:	add    BYTE PTR [rax],al
 1001a3e:	add    BYTE PTR [rax+0x1023],al
 1001a44:	add    BYTE PTR [rax],al
 1001a46:	add    BYTE PTR [rax+0x1c36],al
 1001a4c:	add    BYTE PTR [rax],al
 1001a4e:	add    BYTE PTR [rax+0x2cd8],al
 1001a54:	add    BYTE PTR [rax],al
 1001a56:	add    BYTE PTR [rax+0xf9e],al
 1001a5c:	add    BYTE PTR [rax],al
 1001a5e:	add    BYTE PTR [rax+0x9e5],al
 1001a64:	add    BYTE PTR [rax],al
 1001a66:	add    BYTE PTR [rax+0x13bc],al
 1001a6c:	add    BYTE PTR [rax],al
 1001a6e:	add    BYTE PTR [rax+0x322a],al
 1001a74:	add    BYTE PTR [rax],al
 1001a76:	add    BYTE PTR [rax+0x3224],al
 1001a7c:	add    BYTE PTR [rax],al
 1001a7e:	add    BYTE PTR [rax+0x7e9],al
 1001a84:	add    BYTE PTR [rax],al
 1001a86:	add    BYTE PTR [rax+0xfdf],al
 1001a8c:	add    BYTE PTR [rax],al
 1001a8e:	add    BYTE PTR [rax+0x5b1],al
 1001a94:	add    BYTE PTR [rax],al
 1001a96:	add    BYTE PTR [rax+0x50a],al
 1001a9c:	add    BYTE PTR [rax],al
 1001a9e:	add    BYTE PTR [rax+0x508],al
 1001aa4:	add    BYTE PTR [rax],al
 1001aa6:	add    BYTE PTR [rax+0x37a],al
 1001aac:	add    BYTE PTR [rax],al
 1001aae:	add    BYTE PTR [rax+0x11e],al
 1001ab4:	add    BYTE PTR [rax],al
 1001ab6:	add    BYTE PTR [rax+0x11d],al
 1001abc:	add    BYTE PTR [rax],al
 1001abe:	add    BYTE PTR [rax+0x128],al
 1001ac4:	add    BYTE PTR [rax],al
 1001ac6:	add    BYTE PTR [rax+0x9ed],al
 1001acc:	add    BYTE PTR [rax],al
 1001ace:	add    BYTE PTR [rax+0x31d4],al
 1001ad4:	add    BYTE PTR [rax],al
 1001ad6:	add    BYTE PTR [rax+0xcdc],al
 1001adc:	add    BYTE PTR [rax],al
 1001ade:	add    BYTE PTR [rax+0x7ed],al
 1001ae4:	add    BYTE PTR [rax],al
 1001ae6:	add    BYTE PTR [rax+0x594],al
 1001aec:	add    BYTE PTR [rax],al
 1001aee:	add    BYTE PTR [rax+0x139b],al
 1001af4:	add    BYTE PTR [rax],al
 1001af6:	add    BYTE PTR [rax+0x0],al
 1001afc:	add    BYTE PTR [rax],al
 1001afe:	add    BYTE PTR [rax],al
 1001b00:	adc    al,BYTE PTR [rax]
 1001b02:	add    BYTE PTR [rax],al
 1001b04:	add    BYTE PTR [rax],al
 1001b06:	add    BYTE PTR [rax+0xe],al
 1001b0c:	add    BYTE PTR [rax],al
 1001b0e:	add    BYTE PTR [rax+0x9],al
 1001b14:	add    BYTE PTR [rax],al
 1001b16:	add    BYTE PTR [rax+0x6],al
 1001b1c:	add    BYTE PTR [rax],al
 1001b1e:	add    BYTE PTR [rax+0x3],al
 1001b24:	add    BYTE PTR [rax],al
 1001b26:	add    BYTE PTR [rax+0x2],al
 1001b2c:	add    BYTE PTR [rax],al
 1001b2e:	add    BYTE PTR [rax+0xa],al
 1001b34:	add    BYTE PTR [rax],al
 1001b36:	add    BYTE PTR [rax+0x0],al
 1001b3c:	add    BYTE PTR [rax],al
 1001b3e:	add    BYTE PTR [rax],al
 1001b40:	cmp    ch,BYTE PTR [rax]
 1001b42:	(bad)  
 1001b43:	add    BYTE PTR [rax],al
 1001b45:	add    BYTE PTR [rax],al
 1001b47:	add    BYTE PTR [rax+rbp*1+0x6],cl
 1001b4b:	add    BYTE PTR [rax],al
 1001b4d:	add    BYTE PTR [rax],al
 1001b4f:	add    BYTE PTR [rdx],ch
 1001b51:	sub    BYTE PTR [rsi],al
 1001b53:	add    BYTE PTR [rax],al
 1001b55:	add    BYTE PTR [rax],al
 1001b57:	add    BYTE PTR [rax+0x28],ah
 1001b5a:	(bad)  
	...
 1001b67:	add    BYTE PTR [rax+0x628],ch
 1001b6d:	add    BYTE PTR [rax],al
 1001b6f:	add    BYTE PTR [rdx+0x628],al
 1001b75:	add    BYTE PTR [rax],al
 1001b77:	add    al,cl
 1001b79:	sub    BYTE PTR [rsi],al
 1001b7b:	add    BYTE PTR [rax],al
 1001b7d:	add    BYTE PTR [rax],al
 1001b7f:	add    al,bl
 1001b81:	sub    BYTE PTR [rsi],al
 1001b83:	add    BYTE PTR [rax],al
 1001b85:	add    BYTE PTR [rax],al
 1001b87:	add    dl,bh
 1001b89:	sub    BYTE PTR [rsi],al
 1001b8b:	add    BYTE PTR [rax],al
 1001b8d:	add    BYTE PTR [rax],al
 1001b8f:	add    ah,ch
 1001b91:	sub    BYTE PTR [rsi],al
 1001b93:	add    BYTE PTR [rax],al
 1001b95:	add    BYTE PTR [rax],al
 1001b97:	add    BYTE PTR [rdx+0x628],bh
 1001b9d:	add    BYTE PTR [rax],al
 1001b9f:	add    BYTE PTR [rdx+0x628],dl
	...
 1001bb5:	add    BYTE PTR [rax],al
 1001bb7:	add    BYTE PTR [rax-0x6],bl
 1001bba:	add    eax,DWORD PTR [rcx]
 1001bbc:	add    BYTE PTR [rax],al
 1001bbe:	add    BYTE PTR [rax],al
 1001bc0:	loopne 0x1001be6
 1001bc2:	add    eax,0x1
 1001bc7:	add    BYTE PTR [rax],dl
 1001bc9:	and    eax,0x105
 1001bce:	add    BYTE PTR [rax],al
 1001bd0:	rex and eax,0x105
 1001bd6:	add    BYTE PTR [rax],al
 1001bd8:	jo     0x1001bff
 1001bda:	add    eax,0x1
	...
 1001bef:	add    BYTE PTR [rsp+rdi*8+0x3],cl
 1001bf3:	add    DWORD PTR [rax],eax
 1001bf5:	add    BYTE PTR [rax],al
 1001bf7:	add    al,bh
 1001bf9:	add    eax,DWORD PTR [rcx+rax*1]
	...
 1001c14:	(bad)  
 1001c15:	(bad)  
 1001c16:	xor    eax,0x4f
 1001c1b:	add    BYTE PTR [rdx],al
 1001c1d:	add    BYTE PTR [rax],al
 1001c1f:	add    BYTE PTR [rax+rax*1],ah
 1001c22:	add    BYTE PTR [rax],al
 1001c24:	adc    BYTE PTR [rbp-0x66f00000],ah
 1001c2a:	add    BYTE PTR [rax],al
 1001c2c:	add    BYTE PTR [rax],al
 1001c2e:	add    BYTE PTR [rax],al
 1001c30:	and    al,BYTE PTR [rip+0x11993]        # 0x10135c9
 1001c36:	add    BYTE PTR [rax],al
 1001c38:	cmp    al,0x26
 1001c3a:	add    eax,0x0
 1001c3f:	add    BYTE PTR [rax],al
 1001c41:	add    BYTE PTR [rax],al
 1001c43:	add    BYTE PTR [rdx],al
 1001c45:	add    BYTE PTR [rax],al
 1001c47:	add    BYTE PTR [rsi+riz*1+0x5],al
 1001c4b:	add    BYTE PTR [rax],bh
	...
 1001c55:	add    BYTE PTR [rax],al
 1001c57:	add    BYTE PTR [rdx],ah
 1001c59:	add    eax,0x61993
 1001c5e:	add    BYTE PTR [rax],al
 1001c60:	and    BYTE PTR [rsi],0x5
	...
 1001c6b:	add    BYTE PTR [rax],dl
 1001c6d:	add    BYTE PTR [rax],al
 1001c6f:	add    BYTE PTR [rax-0x7ffffada],dh
	...
 1001c7d:	add    BYTE PTR [rax],al
 1001c7f:	add    BYTE PTR [rdx],ah
 1001c81:	add    eax,0xf1993
 1001c86:	add    BYTE PTR [rax],al
 1001c88:	fs (bad) 
 1001c8a:	add    eax,0x0
 1001c8f:	add    BYTE PTR [rax],al
 1001c91:	add    BYTE PTR [rax],al
 1001c93:	add    BYTE PTR [rax],ch
 1001c95:	add    BYTE PTR [rax],al
 1001c97:	add    ah,bl
 1001c99:	(bad)  
 1001c9a:	add    eax,0xd000
	...
 1001ca7:	add    BYTE PTR [rdx],ah
 1001ca9:	add    eax,0x31993
 1001cae:	add    BYTE PTR [rax],al
 1001cb0:	cmp    al,0x29
 1001cb2:	add    eax,0x0
 1001cb7:	add    BYTE PTR [rax],al
 1001cb9:	add    BYTE PTR [rax],al
 1001cbb:	add    BYTE PTR [rip+0x54000000],cl        # 0x55001cc1
 1001cc1:	sub    DWORD PTR [rip+0x5000],eax        # 0x1006cc7
	...
 1001ccf:	add    BYTE PTR [rdx],ah
 1001cd1:	add    eax,0x21993
 1001cd6:	add    BYTE PTR [rax],al
 1001cd8:	fsubr  QWORD PTR [rcx]
 1001cda:	add    eax,0x0
 1001cdf:	add    BYTE PTR [rax],al
 1001ce1:	add    BYTE PTR [rax],al
 1001ce3:	add    BYTE PTR [rdi],al
 1001ce5:	add    BYTE PTR [rax],al
 1001ce7:	add    ah,ch
 1001ce9:	sub    DWORD PTR [rip+0x5000],eax        # 0x1006cef
	...
 1001cf7:	add    BYTE PTR [rdx],ah
 1001cf9:	add    eax,0x41993
 1001cfe:	add    BYTE PTR [rax],al
 1001d00:	pop    rsp
 1001d01:	sub    al,BYTE PTR [rip+0x0]        # 0x1001d07
 1001d07:	add    BYTE PTR [rax],al
 1001d09:	add    BYTE PTR [rax],al
 1001d0b:	add    BYTE PTR [rip+0x7c000000],cl        # 0x7d001d11
 1001d11:	sub    al,BYTE PTR [rip+0x5000]        # 0x1006d17
	...
 1001d1f:	add    BYTE PTR [rdx],ah
 1001d21:	add    eax,0x11993
 1001d26:	add    BYTE PTR [rax],al
 1001d28:	cmp    al,0x2b
 1001d2a:	add    eax,0x0
 1001d2f:	add    BYTE PTR [rax],al
 1001d31:	add    BYTE PTR [rax],al
 1001d33:	add    BYTE PTR [rbx],al
 1001d35:	add    BYTE PTR [rax],al
 1001d37:	add    BYTE PTR [rbx+rbp*1+0x5],al
 1001d3b:	add    BYTE PTR [rax],dh
	...
 1001d45:	add    BYTE PTR [rax],al
 1001d47:	add    BYTE PTR [rdx],ah
 1001d49:	add    eax,0x21993
 1001d4e:	add    BYTE PTR [rax],al
 1001d50:	pushf  
 1001d51:	sub    eax,DWORD PTR [rip+0x0]        # 0x1001d57
 1001d57:	add    BYTE PTR [rax],al
 1001d59:	add    BYTE PTR [rax],al
 1001d5b:	add    BYTE PTR [rip+0xffffffffac000000],al        # 0xffffffffad001d61
 1001d61:	sub    eax,DWORD PTR [rip+0x5000]        # 0x1006d67
	...
 1001d6f:	add    BYTE PTR [rdx],ah
 1001d71:	add    eax,0x11993
 1001d76:	add    BYTE PTR [rax],al
 1001d78:	xor    al,0x2c
 1001d7a:	add    eax,0x0
 1001d7f:	add    BYTE PTR [rax],al
 1001d81:	add    BYTE PTR [rax],al
 1001d83:	add    BYTE PTR [rbx],al
 1001d85:	add    BYTE PTR [rax],al
 1001d87:	add    BYTE PTR [rsp+rbp*1],bh
 1001d8a:	add    eax,0x5800
	...
 1001d97:	add    BYTE PTR [rdx],ah
 1001d99:	add    eax,0x31993
 1001d9e:	add    BYTE PTR [rax],al
 1001da0:	jo     0x1001dce
 1001da2:	add    eax,0x0
 1001da7:	add    BYTE PTR [rax],al
 1001da9:	add    BYTE PTR [rax],al
 1001dab:	add    BYTE PTR [rdi],al
 1001dad:	add    BYTE PTR [rax],al
 1001daf:	add    BYTE PTR [rax+0x4800052c],cl
	...
 1001dbd:	add    BYTE PTR [rax],al
 1001dbf:	add    BYTE PTR [rdx],ah
 1001dc1:	add    eax,0x21993
 1001dc6:	add    BYTE PTR [rax],al
 1001dc8:	(bad)  
 1001dc9:	sub    al,0x5
	...
 1001dd3:	add    BYTE PTR [rip+0xffffffffe4000000],al        # 0xffffffffe5001dd9
 1001dd9:	sub    al,0x5
 1001ddb:	add    BYTE PTR [rax+0x0],al
	...
 1001de6:	add    BYTE PTR [rax],al
 1001de8:	and    al,BYTE PTR [rip+0xb1993]        # 0x10b3781
 1001dee:	add    BYTE PTR [rax],al
 1001df0:	cmp    al,0x2d
 1001df2:	add    eax,0x0
 1001df7:	add    BYTE PTR [rax],al
 1001df9:	add    BYTE PTR [rax],al
 1001dfb:	add    BYTE PTR [rax],bl
 1001dfd:	add    BYTE PTR [rax],al
 1001dff:	add    BYTE PTR [rbp+rbp*1+0x600005],dl
	...
 1001e16:	add    BYTE PTR [rax],al
 1001e18:	shl    BYTE PTR [rbp+0x100],1
 1001e1e:	add    BYTE PTR [rax],al
 1001e20:	jle    0x1001e1b
 1001e22:	add    eax,DWORD PTR [rcx]
 1001e24:	add    BYTE PTR [rax],al
 1001e26:	add    BYTE PTR [rax],al
 1001e28:	mov    al,0xc6
 1001e2a:	add    BYTE PTR [rcx],al
 1001e2c:	add    BYTE PTR [rax],al
 1001e2e:	add    BYTE PTR [rax],al
 1001e30:	(bad)  
 1001e31:	(bad)
 1001e34:	add    BYTE PTR [rax],al
 1001e36:	add    BYTE PTR [rax],al
 1001e38:	lock scas al,BYTE PTR es:[rdi]
 1001e3a:	add    BYTE PTR [rcx],al
 1001e3c:	add    BYTE PTR [rax],al
 1001e3e:	add    BYTE PTR [rax],al
 1001e40:	add    BYTE PTR [rdi+0x100],ch
 1001e46:	add    BYTE PTR [rax],al
 1001e48:	and    eax,0x20007300
 1001e4d:	add    BYTE PTR [rip+0x31003000],ah        # 0x32004e53
 1001e53:	add    BYTE PTR [rdx],dh
 1001e55:	add    BYTE PTR [rcx+0x0],cl
 1001e58:	add    BYTE PTR ss:[rax+rax*1],dh
 1001e5c:	jne    0x1001e5e
 1001e5e:	and    BYTE PTR [rax],al
 1001e60:	(bad)  
 1001e61:	add    BYTE PTR [rcx+0x0],bh
 1001e64:	je     0x1001e66
 1001e66:	add    BYTE PTR gs:[rbx+0x0],dh
 1001e6a:	add    BYTE PTR [rax],al
 1001e6c:	add    BYTE PTR [rax],al
 1001e6e:	add    BYTE PTR [rax],al
 1001e70:	push   rax
 1001e71:	push   rbx
 1001e72:	push   rbx
 1001e73:	rex.R
 1001e74:	rex.WB
 1001e75:	rex.B
 1001e76:	rex.RXB and eax,0x41432e64
 1001e7c:	rex.X add BYTE PTR [rax],al
 1001e7f:	add    BYTE PTR [rax+rax*1+0x4d],dl
 1001e83:	add    BYTE PTR [rax+0x0],dl
 1001e86:	add    BYTE PTR [rax],al
 1001e88:	push   rsp
 1001e89:	add    BYTE PTR [rbp+0x0],cl
 1001e8c:	xor    al,BYTE PTR [rax]
 1001e8e:	add    BYTE PTR [rax],al
 1001e90:	push   rsp
 1001e91:	add    BYTE PTR [rbp+0x0],ah
 1001e94:	ins    DWORD PTR es:[rdi],dx
 1001e95:	add    BYTE PTR [rax+0x0],dh
 1001e98:	and    BYTE PTR [rax],al
 1001e9a:	movsxd eax,DWORD PTR [rax]
 1001e9c:	jb     0x1001e9e
 1001e9e:	add    BYTE PTR gs:[rcx+0x0],ah
 1001ea2:	je     0x1001ea4
 1001ea4:	imul   eax,DWORD PTR [rax],0x6e006f
 1001eaa:	and    BYTE PTR [rax],al
 1001eac:	data16 add BYTE PTR [rcx+0x0],ah
 1001eb0:	imul   eax,DWORD PTR [rax],0x65006c
 1001eb6:	add    BYTE PTR fs:[rsi],ch
 1001eb9:	add    BYTE PTR [rax],ah
 1001ebb:	add    BYTE PTR [rax],ah
 1001ebd:	add    BYTE PTR [rax+rax*1+0x61],cl
 1001ec1:	add    BYTE PTR [rbx+0x0],dh
 1001ec4:	je     0x1001ec6
 1001ec6:	and    BYTE PTR [rax],al
 1001ec8:	add    BYTE PTR [r10+0x0],r14b
 1001ecc:	jb     0x1001ece
 1001ece:	outs   dx,DWORD PTR ds:[rsi]
 1001ecf:	add    BYTE PTR [rdx+0x0],dh
 1001ed2:	cmp    eax,0x64002500
 1001ed7:	add    BYTE PTR [rsi],ch
 1001ed9:	add    BYTE PTR [rax],ah
 1001edb:	add    BYTE PTR [rax],ah
 1001edd:	add    BYTE PTR [rdx+0x0],al
 1001ee0:	jne    0x1001ee2
 1001ee2:	data16 add BYTE PTR [rbx+0x0],dh
 1001ee6:	imul   eax,DWORD PTR [rax],0x65007a
 1001eec:	cmp    eax,0x64002500
 1001ef1:	add    BYTE PTR [rax],al
 1001ef3:	add    BYTE PTR [rax],al
 1001ef5:	add    BYTE PTR [rax],al
 1001ef7:	add    BYTE PTR [rdx+0x0],ah
 1001efa:	(bad)  
 1001efb:	add    BYTE PTR [rbx+0x0],ah
 1001efe:	imul   eax,DWORD PTR [rax],0x75
 1001f01:	add    BYTE PTR [rax+0x0],dh
 1001f04:	pop    rsp
 1001f05:	add    BYTE PTR [rax],al
 1001f07:	add    BYTE PTR [rcx+0x0],ch
 1001f0a:	outs   dx,BYTE PTR ds:[rsi]
 1001f0b:	add    BYTE PTR [rax+rax*1+0x65],dh
 1001f0f:	add    BYTE PTR [rdx+0x0],dh
 1001f12:	outs   dx,BYTE PTR ds:[rsi]
 1001f13:	add    BYTE PTR [rcx+0x0],ah
 1001f16:	ins    BYTE PTR es:[rdi],dx
 1001f17:	add    BYTE PTR [rax+rax*1+0x0],bl
 1001f1b:	add    BYTE PTR [rax],al
 1001f1d:	add    BYTE PTR [rax],al
 1001f1f:	add    BYTE PTR [rax+rax*1+0x45],dl
 1001f23:	add    BYTE PTR [rbp+0x0],cl
 1001f26:	push   rax
	...
 1001f2f:	add    BYTE PTR [rsi],ch
 1001f31:	add    BYTE PTR [rbx+0x0],al
 1001f34:	add    BYTE PTR [r10+0x0],al
	...
 1001f40:	pop    rdi
 1001f41:	add    BYTE PTR [rcx+0x0],cl
 1001f44:	rex.WRX add BYTE PTR [rax+r8*1+0x45],r10b
 1001f49:	add    BYTE PTR [rdx+0x0],dl
 1001f4c:	rex.WRX add BYTE PTR [rcx+0x0],r8b
 1001f50:	rex.WR add BYTE PTR [rax],r8b
 1001f53:	add    BYTE PTR [rbx],ah
 1001f55:	add    BYTE PTR [rbx],ah
	...
 1001f5f:	add    BYTE PTR [rsi],ch
 1001f61:	add    BYTE PTR [rbx+0x0],dl
 1001f64:	push   rsp
 1001f65:	add    BYTE PTR [rdi+0x0],cl
 1001f68:	push   rax
 1001f69:	add    BYTE PTR [rax],al
 1001f6b:	add    BYTE PTR [rax],al
 1001f6d:	add    BYTE PTR [rax],al
 1001f6f:	add    BYTE PTR [rip+0x25007300],ah        # 0x26009275
 1001f75:	add    BYTE PTR [rbx+0x0],dh
	...
 1001f80:	and    al,BYTE PTR [rip+0x31993]        # 0x1033919
 1001f86:	add    BYTE PTR [rax],al
 1001f88:	pushf  
 1001f89:	cs add eax,0x0
 1001f8f:	add    BYTE PTR [rax],al
 1001f91:	add    BYTE PTR [rax],al
 1001f93:	add    BYTE PTR [rdi],al
 1001f95:	add    BYTE PTR [rax],al
 1001f97:	add    BYTE PTR [rsi+rbp*1+0x400005],dh
	...
 1001fa6:	add    BYTE PTR [rax],al
 1001fa8:	and    al,BYTE PTR [rip+0x21993]        # 0x1023941
 1001fae:	add    BYTE PTR [rax],al
 1001fb0:	adc    al,0x2f
 1001fb2:	add    eax,0x0
 1001fb7:	add    BYTE PTR [rax],al
 1001fb9:	add    BYTE PTR [rax],al
 1001fbb:	add    BYTE PTR [rip+0x24000000],al        # 0x25001fc1
 1001fc1:	(bad)  
 1001fc2:	add    eax,0x4000
	...
 1001fcf:	add    BYTE PTR [rdx],ah
 1001fd1:	add    eax,0x21993
 1001fd6:	add    BYTE PTR [rax],al
 1001fd8:	fs (bad) 
 1001fda:	add    eax,0x0
 1001fdf:	add    BYTE PTR [rax],al
 1001fe1:	add    BYTE PTR [rax],al
 1001fe3:	add    BYTE PTR [rip+0x74000000],al        # 0x75001fe9
 1001fe9:	(bad)  
 1001fea:	add    eax,0x4000
	...
 1001ff7:	add    BYTE PTR [rdx],ah
 1001ff9:	add    eax,0xa1993
 1001ffe:	add    BYTE PTR [rax],al
 1002000:	shr    BYTE PTR [rdi],0x5
	...
 100200b:	add    BYTE PTR [rip+0x10000000],dl        # 0x11002011
 1002011:	xor    BYTE PTR [rip+0x7000],al        # 0x1009017
	...
 100201f:	add    BYTE PTR [rdx],ah
 1002021:	add    eax,0x21993
 1002026:	add    BYTE PTR [rax],al
 1002028:	(bad)  
 1002029:	xor    BYTE PTR [rip+0x0],al        # 0x100202f
 100202f:	add    BYTE PTR [rax],al
 1002031:	add    BYTE PTR [rax],al
 1002033:	add    BYTE PTR [rip+0xffffffffe4000000],al        # 0xffffffffe5002039
 1002039:	xor    BYTE PTR [rip+0x4000],al        # 0x100603f
	...
 1002047:	add    BYTE PTR [rdx],ah
 1002049:	add    eax,0x61993
 100204e:	add    BYTE PTR [rax],al
 1002050:	and    BYTE PTR [rcx],dh
 1002052:	add    eax,0x0
 1002057:	add    BYTE PTR [rax],al
 1002059:	add    BYTE PTR [rax],al
 100205b:	add    BYTE PTR [rdi],cl
 100205d:	add    BYTE PTR [rax],al
 100205f:	add    BYTE PTR [rax+0x31],dl
 1002062:	add    eax,0x4000
	...
 100206f:	add    BYTE PTR [rdx],ah
 1002071:	add    eax,0x21993
 1002076:	add    BYTE PTR [rax],al
 1002078:	lock xor DWORD PTR [rip+0x0],eax        # 0x100207f
 100207f:	add    BYTE PTR [rax],al
 1002081:	add    BYTE PTR [rax],al
 1002083:	add    BYTE PTR [rax+rax*1],al
 1002086:	add    BYTE PTR [rax],al
 1002088:	add    BYTE PTR [rdx],dh
 100208a:	add    eax,0x7800
	...
 1002097:	add    BYTE PTR [rdx],ah
 1002099:	add    eax,0x51993
 100209e:	add    BYTE PTR [rax],al
 10020a0:	rex.W xor al,BYTE PTR [rip+0x0]        # 0x10020a7
 10020a7:	add    BYTE PTR [rax],al
 10020a9:	add    BYTE PTR [rax],al
 10020ab:	add    BYTE PTR [rbx],cl
 10020ad:	add    BYTE PTR [rax],al
 10020af:	add    BYTE PTR [rax+0x32],dh
 10020b2:	add    eax,0x4800
	...
 10020bf:	add    BYTE PTR [rdx],cl
 10020c1:	add    BYTE PTR [rax],al
 10020c3:	add    BYTE PTR [rax],al
 10020c5:	add    BYTE PTR [rax],al
 10020c7:	add    BYTE PTR [rax],ah
 10020c9:	add    BYTE PTR [rax],ah
 10020cb:	add    BYTE PTR [rax],ah
 10020cd:	add    BYTE PTR [rax+0x0],dh
 10020d0:	data16 add BYTE PTR [rsi+0x0],cl
 10020d4:	(bad)  
 10020d5:	add    BYTE PTR [rax+rax*1+0x69],dh
 10020d9:	add    BYTE PTR [rsi+0x0],dh
 10020dc:	add    BYTE PTR gs:[rbp+0x0],al
 10020e0:	jb     0x10020e2
 10020e2:	jb     0x10020e4
 10020e4:	outs   dx,DWORD PTR ds:[rsi]
 10020e5:	add    BYTE PTR [rdx+0x0],dh
 10020e8:	and    BYTE PTR [rax],al
 10020ea:	cmp    eax,0x25002000
 10020ef:	add    BYTE PTR [rax+rax*1+0xa],ah
 10020f3:	add    BYTE PTR [rax],al
 10020f5:	add    BYTE PTR [rax],al
 10020f7:	add    BYTE PTR [rax],ah
 10020f9:	add    BYTE PTR [rax],ah
 10020fb:	add    BYTE PTR [rax],ah
 10020fd:	add    BYTE PTR [rbx+0x0],dh
 1002100:	jp     0x1002102
 1002102:	add    BYTE PTR [r10+0x0],r14b
 1002106:	jb     0x1002108
 1002108:	outs   dx,DWORD PTR ds:[rsi]
 1002109:	add    BYTE PTR [rdx+0x0],dh
 100210c:	rex.WRB add BYTE PTR [r11+0x0],r14b
 1002110:	add    BYTE PTR [eax],ah
 1002113:	add    BYTE PTR [rip+0x25002000],bh        # 0x26004119
 1002119:	add    BYTE PTR [rbx+0x0],dh
 100211c:	or     al,BYTE PTR [rax]
 100211e:	add    BYTE PTR [rax],al
 1002120:	and    BYTE PTR [rax],al
 1002122:	and    BYTE PTR [rax],al
 1002124:	and    BYTE PTR [rax],al
 1002126:	jae    0x1002128
 1002128:	jp     0x100212a
 100212a:	push   rbx
 100212b:	add    BYTE PTR [rcx+0x0],dh
 100212e:	ins    BYTE PTR es:[rdi],dx
 100212f:	add    BYTE PTR [rbx+0x0],dl
 1002132:	je     0x1002134
 1002134:	(bad)  
 1002135:	add    BYTE PTR [rax+rax*1+0x65],dh
 1002139:	add    BYTE PTR [rax],ah
 100213b:	add    BYTE PTR [rip+0x25002000],bh        # 0x26004141
 1002141:	add    BYTE PTR [rbx+0x0],dh
 1002144:	or     al,BYTE PTR [rax]
 1002146:	add    BYTE PTR [rax],al
 1002148:	and    BYTE PTR [rax],al
 100214a:	and    BYTE PTR [rax],al
 100214c:	and    BYTE PTR [rax],al
 100214e:	rex.WRXB add BYTE PTR [r8+r8*1+0x42],r8b
 1002153:	add    BYTE PTR [rbx+0x0],al
 1002156:	push   rdx
 1002157:	add    BYTE PTR [rdi+0x0],ch
 100215a:	ja     0x100215c
 100215c:	rex.WRX add BYTE PTR [rbp+0x0],r14b
 1002160:	ins    DWORD PTR es:[rdi],dx
 1002161:	add    BYTE PTR [rdx+0x0],ah
 1002164:	add    BYTE PTR gs:[rdx+0x0],dh
 1002168:	and    BYTE PTR [rax],al
 100216a:	cmp    eax,0x25002000
 100216f:	add    BYTE PTR [rax+rax*1+0xa],ah
 1002173:	add    BYTE PTR [rax],al
 1002175:	add    BYTE PTR [rax],al
 1002177:	add    BYTE PTR [rax],ah
 1002179:	add    BYTE PTR [rax],ah
 100217b:	add    BYTE PTR [rax],ah
 100217d:	add    BYTE PTR [rbx+0x0],dl
 1002180:	push   rbx
 1002181:	add    BYTE PTR [rdx+0x0],dh
 1002184:	jbe    0x1002186
 1002186:	jb     0x1002188
 1002188:	rex.WR add BYTE PTR [rcx+0x0],r13b
 100218c:	outs   dx,BYTE PTR ds:[rsi]
 100218d:	add    BYTE PTR [rbp+0x0],ah
 1002190:	and    BYTE PTR [rax],al
 1002192:	cmp    eax,0x25002000
 1002197:	add    BYTE PTR [rax+rax*1+0xa],ah
 100219b:	add    BYTE PTR [rax],al
 100219d:	add    BYTE PTR [rax],al
 100219f:	add    BYTE PTR [rax],ah
 10021a1:	add    BYTE PTR [rax],ah
 10021a3:	add    BYTE PTR [rax],ah
 10021a5:	add    BYTE PTR [rbx+0x0],dl
 10021a8:	push   rbx
 10021a9:	add    BYTE PTR [rdx+0x0],dh
 10021ac:	jbe    0x10021ae
 10021ae:	jb     0x10021b0
 10021b0:	rex.WRB add BYTE PTR [r11+0x0],r14b
 10021b4:	add    BYTE PTR [ebx+0x0],dl
 10021b8:	je     0x10021ba
 10021ba:	(bad)  
 10021bb:	add    BYTE PTR [rax+rax*1+0x65],dh
 10021bf:	add    BYTE PTR [rax],ah
 10021c1:	add    BYTE PTR [rip+0x25002000],bh        # 0x260041c7
 10021c7:	add    BYTE PTR [rax+rax*1+0xa],ah
 10021cb:	add    BYTE PTR [rax],al
 10021cd:	add    BYTE PTR [rax],al
 10021cf:	add    BYTE PTR [rax],ah
 10021d1:	add    BYTE PTR [rax],ah
 10021d3:	add    BYTE PTR [rax],ah
 10021d5:	add    BYTE PTR [rbx+0x0],dl
 10021d8:	push   rbx
 10021d9:	add    BYTE PTR [rdx+0x0],dh
 10021dc:	jbe    0x10021de
 10021de:	jb     0x10021e0
 10021e0:	push   rbx
 10021e1:	add    BYTE PTR [rbp+0x0],ah
 10021e4:	jbe    0x10021e6
 10021e6:	add    BYTE PTR gs:[rdx+0x0],dh
 10021ea:	imul   eax,DWORD PTR [rax],0x790074
 10021f0:	and    BYTE PTR [rax],al
 10021f2:	cmp    eax,0x25002000
 10021f7:	add    BYTE PTR [rax+rax*1+0xa],ah
 10021fb:	add    BYTE PTR [rax],al
 10021fd:	add    BYTE PTR [rax],al
 10021ff:	add    BYTE PTR [rax+rax*1+0x52],al
 1002203:	add    BYTE PTR [rcx+0x0],cl
 1002206:	push   rsi
 1002207:	add    BYTE PTR [rbp+0x0],al
 100220a:	push   rdx
 100220b:	add    BYTE PTR [rip+0x53007b00],bh        # 0x54009d11
 1002211:	add    BYTE PTR [rcx+0x0],dl
 1002214:	rex.WR add BYTE PTR [rax],r12b
 1002217:	add    BYTE PTR [rbx+0x0],dl
 100221a:	add    BYTE PTR gs:[rdx+0x0],dh
 100221e:	jbe    0x1002220
 1002220:	add    BYTE PTR gs:[rdx+0x0],dh
 1002224:	jge    0x1002226
 1002226:	cmp    eax,DWORD PTR [rax]
 1002228:	add    BYTE PTR [r8+0x0],dl
 100222c:	push   rax
 100222d:	add    BYTE PTR [rip+0x51005300],bh        # 0x52007533
 1002233:	add    BYTE PTR [rax+rax*1+0x44],cl
 1002237:	add    BYTE PTR [rcx+0x0],cl
 100223a:	add    BYTE PTR [r15+0x0],al
 100223e:	add    BYTE PTR [rax],al
 1002240:	cmp    eax,DWORD PTR [rax]
 1002242:	push   rsp
 1002243:	add    BYTE PTR [rdx+0x0],dh
 1002246:	jne    0x1002248
 1002248:	jae    0x100224a
 100224a:	je     0x100224c
 100224c:	add    BYTE PTR gs:[rax+rax*1+0x5f],ah
 1002251:	add    BYTE PTR [rbx+0x0],al
 1002254:	outs   dx,DWORD PTR ds:[rsi]
 1002255:	add    BYTE PTR [rsi+0x0],ch
 1002258:	outs   dx,BYTE PTR ds:[rsi]
 1002259:	add    BYTE PTR [rbp+0x0],ah
 100225c:	movsxd eax,DWORD PTR [rax]
 100225e:	je     0x1002260
 1002260:	imul   eax,DWORD PTR [rax],0x6e006f
 1002266:	cmp    eax,0x65007900
 100226b:	add    BYTE PTR [rbx+0x0],dh
 100226e:	cmp    eax,DWORD PTR [rax]
	...
 1002278:	cmp    eax,DWORD PTR [rax]
 100227a:	push   rsp
 100227b:	add    BYTE PTR [rdx+0x0],dh
 100227e:	jne    0x1002280
 1002280:	jae    0x1002282
 1002282:	je     0x1002284
 1002284:	add    BYTE PTR gs:[rax+rax*1+0x5f],ah
 1002289:	add    BYTE PTR [rbx+0x0],al
 100228c:	outs   dx,DWORD PTR ds:[rsi]
 100228d:	add    BYTE PTR [rsi+0x0],ch
 1002290:	outs   dx,BYTE PTR ds:[rsi]
 1002291:	add    BYTE PTR [rbp+0x0],ah
 1002294:	movsxd eax,DWORD PTR [rax]
 1002296:	je     0x1002298
 1002298:	imul   eax,DWORD PTR [rax],0x6e006f
 100229e:	cmp    eax,0x6f006e00
 10022a3:	add    BYTE PTR [rbx],bh
 10022a5:	add    BYTE PTR [rbp+0x0],dl
 10022a8:	rex.WB add BYTE PTR [r8+rax*1+0x3d],al
 10022ad:	add    BYTE PTR [rax],al
 10022af:	add    BYTE PTR [rax+0x0],dl
 10022b2:	push   rdi
 10022b3:	add    BYTE PTR [rax+rax*1+0x3d],al
	...
 10022bf:	add    BYTE PTR [rbx],bh
 10022c1:	add    BYTE PTR [rbx+0x0],dl
 10022c4:	add    BYTE PTR [r10+0x0],r10b
 10022c8:	push   rsi
 10022c9:	add    BYTE PTR [rbp+0x0],al
 10022cc:	push   rdx
 10022cd:	add    BYTE PTR [rip+0x0],bh        # 0x10022d3
 10022d3:	add    BYTE PTR [rax],al
 10022d5:	add    BYTE PTR [rax],al
 10022d7:	add    BYTE PTR [rbx],bh
 10022d9:	add    BYTE PTR [rax+rax*1+0x41],al
 10022dd:	add    BYTE PTR [rax+rax*1+0x41],dl
 10022e1:	add    BYTE PTR [rdx+0x0],al
 10022e4:	add    BYTE PTR [r11+0x0],dl
 10022e8:	add    BYTE PTR [rip+0x0],r15b        # 0x10022ef
 10022ef:	add    BYTE PTR [rcx+0x0],bh
 10022f2:	add    BYTE PTR gs:[rbx+0x0],dh
 10022f6:	add    BYTE PTR [rax],al
 10022f8:	outs   dx,BYTE PTR ds:[rsi]
 10022f9:	add    BYTE PTR [rdi+0x0],ch
 10022fc:	add    BYTE PTR [rax],al
 10022fe:	add    BYTE PTR [rax],al
 1002300:	rex.X add BYTE PTR [rbx+0x0],al
 1002304:	push   rax
 1002305:	add    BYTE PTR [rbp+0x0],ah
 1002308:	jb     0x100230a
 100230a:	jb     0x100230c
 100230c:	pop    rdi
 100230d:	add    BYTE PTR [rip+0x2e007300],ah        # 0x2f009613
 1002313:	add    BYTE PTR [rbp+0x0],al
 1002316:	push   rdx
 1002317:	add    BYTE PTR [rdx+0x0],dl
 100231a:	add    BYTE PTR [rax],al
 100231c:	add    BYTE PTR [rax],al
 100231e:	add    BYTE PTR [rax],al
 1002320:	push   rsp
 1002321:	add    BYTE PTR [rcx+0x0],al
 1002324:	add    BYTE PTR [rax+r8*1+0x4f],cl
 1002329:	add    BYTE PTR [rbx+0x0],al
 100232c:	rex.WXB add BYTE PTR [r8],al
 100232f:	add    BYTE PTR [rdx],ah
 1002331:	add    eax,0x11993
 1002336:	add    BYTE PTR [rax],al
 1002338:	fdiv   DWORD PTR [rdx]
 100233a:	add    eax,0x0
 100233f:	add    BYTE PTR [rax],al
 1002341:	add    BYTE PTR [rax],al
 1002343:	add    BYTE PTR [rbx],al
 1002345:	add    BYTE PTR [rax],al
 1002347:	add    al,ah
 1002349:	xor    al,BYTE PTR [rip+0x2000]        # 0x100434f
	...
 1002357:	add    BYTE PTR [rdx],ah
 1002359:	add    eax,0x11993
 100235e:	add    BYTE PTR [rax],al
 1002360:	or     BYTE PTR [rbx],dh
 1002362:	add    eax,0x0
 1002367:	add    BYTE PTR [rax],al
 1002369:	add    BYTE PTR [rax],al
 100236b:	add    BYTE PTR [rbx],al
 100236d:	add    BYTE PTR [rax],al
 100236f:	add    BYTE PTR [rax],dl
 1002371:	xor    eax,DWORD PTR [rip+0x2000]        # 0x1004377
	...
 100237f:	add    BYTE PTR [rdx],ah
 1002381:	add    eax,0x11993
 1002386:	add    BYTE PTR [rax],al
 1002388:	cmp    al,0x33
 100238a:	add    eax,0x0
 100238f:	add    BYTE PTR [rax],al
 1002391:	add    BYTE PTR [rax],al
 1002393:	add    BYTE PTR [rdx],al
 1002395:	add    BYTE PTR [rax],al
 1002397:	add    BYTE PTR [rbx+rsi*1+0x5],al
 100239b:	add    BYTE PTR [rax],ch
	...
 10023a5:	add    BYTE PTR [rax],al
 10023a7:	add    BYTE PTR [rdx],ah
 10023a9:	add    eax,0x41993
 10023ae:	add    BYTE PTR [rax],al
 10023b0:	lock xor eax,DWORD PTR [rip+0x0]        # 0x10023b7
 10023b7:	add    BYTE PTR [rax],al
 10023b9:	add    BYTE PTR [rax],al
 10023bb:	add    BYTE PTR [rax+rax*1],al
 10023be:	add    BYTE PTR [rax],al
 10023c0:	adc    BYTE PTR [rax*1+0x2000],dh
	...
 10023cf:	add    BYTE PTR [rdx],ah
 10023d1:	add    eax,0x21993
 10023d6:	add    BYTE PTR [rax],al
 10023d8:	rex.W xor al,0x5
	...
 10023e3:	add    BYTE PTR [rbx],al
 10023e5:	add    BYTE PTR [rax],al
 10023e7:	add    BYTE PTR [rax+0x34],bl
 10023ea:	add    eax,0x2000
	...
 10023ff:	add    BYTE PTR [rax-0x5a],dl
 1002402:	add    BYTE PTR [rcx],al
 1002404:	add    BYTE PTR [rax],al
 1002406:	add    BYTE PTR [rax],al
 1002408:	lock add al,BYTE PTR [rcx+rax*1]
 100240c:	add    BYTE PTR [rax],al
 100240e:	add    BYTE PTR [rax],al
 1002410:	lock add al,BYTE PTR [rcx+rax*1]
 1002414:	add    BYTE PTR [rax],al
 1002416:	add    BYTE PTR [rax],al
 1002418:	lock add al,BYTE PTR [rcx+rax*1]
 100241c:	add    BYTE PTR [rax],al
 100241e:	add    BYTE PTR [rax],al
 1002420:	lock add al,BYTE PTR [rcx+rax*1]
 1002424:	add    BYTE PTR [rax],al
 1002426:	add    BYTE PTR [rax],al
 1002428:	lock add al,BYTE PTR [rcx+rax*1]
 100242c:	add    BYTE PTR [rax],al
 100242e:	add    BYTE PTR [rax],al
 1002430:	lock add al,BYTE PTR [rcx+rax*1]
 1002434:	add    BYTE PTR [rax],al
 1002436:	add    BYTE PTR [rax],al
 1002438:	lock in eax,0x0
 100243b:	add    DWORD PTR [rax],eax
 100243d:	add    BYTE PTR [rax],al
 100243f:	add    BYTE PTR [rax],dh
 1002441:	out    0x0,eax
 1002443:	add    DWORD PTR [rax],eax
 1002445:	add    BYTE PTR [rax],al
 1002447:	add    al,al
 1002449:	out    0x0,eax
 100244b:	add    DWORD PTR [rax],eax
 100244d:	add    BYTE PTR [rax],al
 100244f:	add    BYTE PTR [rax+0x100e8],ah
 1002455:	add    BYTE PTR [rax],al
 1002457:	add    BYTE PTR [rax+rax*1+0x73],dh
 100245b:	add    BYTE PTR [rcx+0x0],dh
 100245e:	ins    BYTE PTR es:[rdi],dx
 100245f:	add    BYTE PTR [rdi+0x0],bl
 1002462:	jae    0x1002464
 1002464:	movsxd eax,DWORD PTR [rax]
 1002466:	jb     0x1002468
 1002468:	imul   eax,DWORD PTR [rax],0x740070
 100246e:	add    BYTE PTR [rax],al
 1002470:	jne    0x1002472
 1002472:	je     0x1002474
 1002474:	imul   eax,DWORD PTR [rax],0x69006c
 100247a:	je     0x100247c
 100247c:	jns    0x100247e
 100247e:	add    BYTE PTR [rax],al
 1002480:	je     0x1002482
 1002482:	jae    0x1002484
 1002484:	jno    0x1002486
 1002486:	ins    BYTE PTR es:[rdi],dx
 1002487:	add    BYTE PTR [rdi+0x0],bl
 100248a:	movsxd eax,DWORD PTR [rax]
 100248c:	outs   dx,DWORD PTR ds:[rsi]
 100248d:	add    BYTE PTR [rbp+0x0],ch
 1002490:	ins    DWORD PTR es:[rdi],dx
 1002491:	add    BYTE PTR [rcx+0x0],ah
 1002494:	outs   dx,BYTE PTR ds:[rsi]
 1002495:	add    BYTE PTR [rax+rax*1+0x0],ah
 1002499:	add    BYTE PTR [rax],al
 100249b:	add    BYTE PTR [rax],al
 100249d:	add    BYTE PTR [rax],al
 100249f:	add    BYTE PTR [rsi+0x0],dh
 10024a2:	(bad)  
 10024a3:	add    BYTE PTR [rdi+0x0],bl
 10024a6:	jae    0x10024a8
 10024a8:	movsxd eax,DWORD PTR [rax]
 10024aa:	jb     0x10024ac
 10024ac:	imul   eax,DWORD PTR [rax],0x740070
 10024b2:	add    BYTE PTR [rax],al
 10024b4:	add    BYTE PTR [rax],al
 10024b6:	add    BYTE PTR [rax],al
 10024b8:	movsxd eax,DWORD PTR [rax]
 10024ba:	outs   dx,DWORD PTR ds:[rsi]
 10024bb:	add    BYTE PTR [rax+0x0],dh
 10024be:	jns    0x10024c0
 10024c0:	pop    rdi
 10024c1:	add    BYTE PTR [rsi+0x0],ah
 10024c4:	imul   eax,DWORD PTR [rax],0x65006c
 10024ca:	add    BYTE PTR [rax],al
 10024cc:	add    BYTE PTR [rax],al
 10024ce:	add    BYTE PTR [rax],al
 10024d0:	je     0x10024d2
 10024d2:	jns    0x10024d4
 10024d4:	jo     0x10024d6
 10024d6:	add    BYTE PTR gs:[rdi+0x0],bl
 10024da:	data16 add BYTE PTR [rcx+0x0],ch
 10024de:	ins    BYTE PTR es:[rdi],dx
 10024df:	add    BYTE PTR [rbp+0x0],ah
 10024e2:	add    BYTE PTR [rax],al
 10024e4:	add    BYTE PTR [rax],al
 10024e6:	add    BYTE PTR [rax],al
 10024e8:	je     0x10024ea
 10024ea:	(bad)  
 10024eb:	add    BYTE PTR [rcx+0x0],ch
 10024ee:	ins    BYTE PTR es:[rdi],dx
 10024ef:	add    BYTE PTR [rdi+0x0],bl
 10024f2:	data16 add BYTE PTR [rcx+0x0],ch
 10024f6:	ins    BYTE PTR es:[rdi],dx
 10024f7:	add    BYTE PTR [rbp+0x0],ah
 10024fa:	add    BYTE PTR [rax],al
 10024fc:	add    BYTE PTR [rax],al
 10024fe:	add    BYTE PTR [rax],al
 1002500:	jb     0x1002502
 1002502:	add    BYTE PTR gs:[rdi+0x0],ah
 1002506:	pop    rdi
 1002507:	add    BYTE PTR [rbx+0x0],dh
 100250a:	(bad)  
 100250b:	add    BYTE PTR [rsi+0x0],dh
 100250e:	add    BYTE PTR gs:[rax],al
 1002511:	add    BYTE PTR [rax],al
 1002513:	add    BYTE PTR [rax],al
 1002515:	add    BYTE PTR [rax],al
 1002517:	add    BYTE PTR [rdx+0x0],dh
 100251a:	add    BYTE PTR gs:[rdi+0x0],ah
 100251e:	pop    rdi
 100251f:	add    BYTE PTR [rcx+0x0],dh
 1002522:	jne    0x1002524
 1002524:	add    BYTE PTR gs:[rdx+0x0],dh
 1002528:	jns    0x100252a
 100252a:	add    BYTE PTR [rax],al
 100252c:	add    BYTE PTR [rax],al
 100252e:	add    BYTE PTR [rax],al
 1002530:	outs   dx,DWORD PTR ds:[rsi]
 1002531:	add    BYTE PTR [rsi+0x0],ch
 1002534:	ins    BYTE PTR es:[rdi],dx
 1002535:	add    BYTE PTR [rcx+0x0],bh
 1002538:	outs   dx,DWORD PTR ds:[rsi]
 1002539:	add    BYTE PTR [rsi+0x0],ch
 100253c:	jae    0x100253e
 100253e:	push   0x74007500
 1002543:	add    BYTE PTR [rax+rax*1+0x6f],ah
 1002547:	add    BYTE PTR [rdi+0x0],dh
 100254a:	outs   dx,BYTE PTR ds:[rsi]
 100254b:	add    BYTE PTR [rax],al
 100254d:	add    BYTE PTR [rax],al
 100254f:	add    BYTE PTR [rdx],ah
 1002551:	add    eax,0x51993
 1002556:	add    BYTE PTR [rax],al
 1002558:	mov    WORD PTR [rax*1+0x0],?
 100255f:	add    BYTE PTR [rax],al
 1002561:	add    BYTE PTR [rax],al
 1002563:	add    BYTE PTR [rdi],al
 1002565:	add    BYTE PTR [rax],al
 1002567:	add    BYTE PTR [rsp+rsi*1+0x200005],dh
	...
 1002576:	add    BYTE PTR [rax],al
 1002578:	and    al,BYTE PTR [rip+0x51993]        # 0x1053f11
 100257e:	add    BYTE PTR [rax],al
 1002580:	adc    BYTE PTR [rip+0x5],dh        # 0x100258b
 1002586:	add    BYTE PTR [rax],al
 1002588:	add    BYTE PTR [rax],al
 100258a:	add    BYTE PTR [rax],al
 100258c:	(bad)  
 100258d:	add    BYTE PTR [rax],al
 100258f:	add    BYTE PTR [rax],bh
 1002591:	xor    eax,0x200005
	...
 100259e:	add    BYTE PTR [rax],al
 10025a0:	and    al,BYTE PTR [rip+0x51993]        # 0x1053f39
 10025a6:	add    BYTE PTR [rax],al
 10025a8:	xchg   esp,eax
 10025a9:	xor    eax,0x5
 10025ae:	add    BYTE PTR [rax],al
 10025b0:	add    BYTE PTR [rax],al
 10025b2:	add    BYTE PTR [rax],al
 10025b4:	(bad)  
 10025b5:	add    BYTE PTR [rax],al
 10025b7:	add    BYTE PTR [rbp+rsi*1+0x200005],bh
	...
 10025c6:	add    BYTE PTR [rax],al
 10025c8:	and    al,BYTE PTR [rip+0x51993]        # 0x1053f61
 10025ce:	add    BYTE PTR [rax],al
 10025d0:	sbb    BYTE PTR [rsi],dh
 10025d2:	add    eax,0x0
 10025d7:	add    BYTE PTR [rax],al
 10025d9:	add    BYTE PTR [rax],al
 10025db:	add    BYTE PTR [rdi],al
 10025dd:	add    BYTE PTR [rax],al
 10025df:	add    BYTE PTR [rax+0x36],al
 10025e2:	add    eax,0x2000
	...
 10025ef:	add    BYTE PTR [rdx],ah
 10025f1:	add    eax,0x51993
 10025f6:	add    BYTE PTR [rax],al
 10025f8:	pushf  
 10025f9:	ss add eax,0x0
 10025ff:	add    BYTE PTR [rax],al
 1002601:	add    BYTE PTR [rax],al
 1002603:	add    BYTE PTR [rdi],al
 1002605:	add    BYTE PTR [rax],al
 1002607:	add    ah,al
 1002609:	ss add eax,0x2000
	...
 1002617:	add    BYTE PTR [rdx],ah
 1002619:	add    eax,0x51993
 100261e:	add    BYTE PTR [rax],al
 1002620:	and    BYTE PTR [rdi],dh
 1002622:	add    eax,0x0
 1002627:	add    BYTE PTR [rax],al
 1002629:	add    BYTE PTR [rax],al
 100262b:	add    BYTE PTR [rdi],al
 100262d:	add    BYTE PTR [rax],al
 100262f:	add    BYTE PTR [rax+0x37],cl
 1002632:	add    eax,0x2000
	...
 100263f:	add    BYTE PTR [rdx],ah
 1002641:	add    eax,0x51993
 1002646:	add    BYTE PTR [rax],al
 1002648:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1002649:	(bad)  
 100264a:	add    eax,0x0
 100264f:	add    BYTE PTR [rax],al
 1002651:	add    BYTE PTR [rax],al
 1002653:	add    BYTE PTR [rdi],al
 1002655:	add    BYTE PTR [rax],al
 1002657:	add    ah,cl
 1002659:	(bad)  
 100265a:	add    eax,0x2000
	...
 1002667:	add    BYTE PTR [rdx],ah
 1002669:	add    eax,0x51993
 100266e:	add    BYTE PTR [rax],al
 1002670:	sub    BYTE PTR [rax],bh
 1002672:	add    eax,0x0
 1002677:	add    BYTE PTR [rax],al
 1002679:	add    BYTE PTR [rax],al
 100267b:	add    BYTE PTR [rdi],al
 100267d:	add    BYTE PTR [rax],al
 100267f:	add    BYTE PTR [rax+0x38],dl
 1002682:	add    eax,0x2000
	...
 100268f:	add    BYTE PTR [rdx],ah
 1002691:	add    eax,0x51993
 1002696:	add    BYTE PTR [rax],al
 1002698:	cwde   
 1002699:	cmp    BYTE PTR [rip+0x0],al        # 0x100269f
 100269f:	add    BYTE PTR [rax],al
 10026a1:	add    BYTE PTR [rax],al
 10026a3:	add    BYTE PTR [rsi],al
 10026a5:	add    BYTE PTR [rax],al
 10026a7:	add    al,al
 10026a9:	cmp    BYTE PTR [rip+0x2000],al        # 0x10046af
	...
 10026b7:	add    BYTE PTR [rdx],ah
 10026b9:	add    eax,0x11993
 10026be:	add    BYTE PTR [rax],al
 10026c0:	or     al,0x39
 10026c2:	add    eax,0x0
 10026c7:	add    BYTE PTR [rax],al
 10026c9:	add    BYTE PTR [rax],al
 10026cb:	add    BYTE PTR [rbx],al
 10026cd:	add    BYTE PTR [rax],al
 10026cf:	add    BYTE PTR [rcx+rdi*1],dl
 10026d2:	add    eax,0x2000
	...
 10026df:	add    BYTE PTR [rdx],ah
 10026e1:	add    eax,0x61993
 10026e6:	add    BYTE PTR [rax],al
 10026e8:	cmp    QWORD PTR [rip+0x0],rax        # 0x10026ef
 10026ef:	add    BYTE PTR [rax],al
 10026f1:	add    BYTE PTR [rax],al
 10026f3:	add    BYTE PTR [rax],cl
 10026f5:	add    BYTE PTR [rax],al
 10026f7:	add    BYTE PTR [rax+0x39],bh
 10026fa:	add    eax,0x2000
	...
 1002707:	add    BYTE PTR [rdx],ah
 1002709:	add    eax,0x61993
 100270e:	add    BYTE PTR [rax],al
 1002710:	(bad)  
 1002711:	cmp    DWORD PTR [rip+0x0],eax        # 0x1002717
 1002717:	add    BYTE PTR [rax],al
 1002719:	add    BYTE PTR [rax],al
 100271b:	add    BYTE PTR [rax],cl
 100271d:	add    BYTE PTR [rax],al
 100271f:	add    BYTE PTR [rdx+rdi*1],al
 1002722:	add    eax,0x2000
	...
 100272f:	add    BYTE PTR [rdx],ah
 1002731:	add    eax,0x61993
 1002736:	add    BYTE PTR [rax],al
 1002738:	(bad)  
 1002739:	cmp    al,BYTE PTR [rip+0x0]        # 0x100273f
 100273f:	add    BYTE PTR [rax],al
 1002741:	add    BYTE PTR [rax],al
 1002743:	add    BYTE PTR [rax],cl
 1002745:	add    BYTE PTR [rax],al
 1002747:	add    BYTE PTR [rax+0x3000053a],dl
	...
 1002755:	add    BYTE PTR [rax],al
 1002757:	add    BYTE PTR [rdx],ah
 1002759:	add    eax,0x61993
 100275e:	add    BYTE PTR [rax],al
 1002760:	in     al,dx
 1002761:	cmp    al,BYTE PTR [rip+0x0]        # 0x1002767
 1002767:	add    BYTE PTR [rax],al
 1002769:	add    BYTE PTR [rax],al
 100276b:	add    BYTE PTR [rax],cl
 100276d:	add    BYTE PTR [rax],al
 100276f:	add    BYTE PTR [rbx+rdi*1],bl
 1002772:	add    eax,0x3000
	...
 100277f:	add    BYTE PTR [rdx],ah
 1002781:	add    eax,0x61993
 1002786:	add    BYTE PTR [rax],al
 1002788:	js     0x10027c5
 100278a:	add    eax,0x0
 100278f:	add    BYTE PTR [rax],al
 1002791:	add    BYTE PTR [rax],al
 1002793:	add    BYTE PTR [rax],cl
 1002795:	add    BYTE PTR [rax],al
 1002797:	add    BYTE PTR [rax+0x3000053b],ch
	...
 10027a5:	add    BYTE PTR [rax],al
 10027a7:	add    BYTE PTR [rdx],ah
 10027a9:	add    eax,0x61993
 10027ae:	add    BYTE PTR [rax],al
 10027b0:	add    al,0x3c
 10027b2:	add    eax,0x0
 10027b7:	add    BYTE PTR [rax],al
 10027b9:	add    BYTE PTR [rax],al
 10027bb:	add    BYTE PTR [rax],cl
 10027bd:	add    BYTE PTR [rax],al
 10027bf:	add    BYTE PTR [rsp+rdi*1],dh
 10027c2:	add    eax,0x3000
	...
 10027cf:	add    BYTE PTR [rdx],ah
 10027d1:	add    eax,0x61993
 10027d6:	add    BYTE PTR [rax],al
 10027d8:	nop
 10027d9:	cmp    al,0x5
	...
 10027e3:	add    BYTE PTR [rax],cl
 10027e5:	add    BYTE PTR [rax],al
 10027e7:	add    al,al
 10027e9:	cmp    al,0x5
 10027eb:	add    BYTE PTR [rax+0x0],dl
	...
 10027f6:	add    BYTE PTR [rax],al
 10027f8:	and    al,BYTE PTR [rip+0x51993]        # 0x1054191
 10027fe:	add    BYTE PTR [rax],al
 1002800:	sbb    BYTE PTR [rip+0x5],bh        # 0x100280b
 1002806:	add    BYTE PTR [rax],al
 1002808:	add    BYTE PTR [rax],al
 100280a:	add    BYTE PTR [rax],al
 100280c:	(bad)  
 100280d:	add    BYTE PTR [rax],al
 100280f:	add    BYTE PTR [rax+0x3d],al
 1002812:	add    eax,0x2000
	...
 100281f:	add    BYTE PTR [rdx],ah
 1002821:	add    eax,0x11993
 1002826:	add    BYTE PTR [rax],al
 1002828:	mov    BYTE PTR [rip+0x5],bh        # 0x1002833
 100282e:	add    BYTE PTR [rax],al
 1002830:	add    BYTE PTR [rax],al
 1002832:	add    BYTE PTR [rax],al
 1002834:	add    eax,DWORD PTR [rax]
 1002836:	add    BYTE PTR [rax],al
 1002838:	nop
 1002839:	cmp    eax,0x200005
	...
 1002846:	add    BYTE PTR [rax],al
 1002848:	and    al,BYTE PTR [rip+0x11993]        # 0x10141e1
 100284e:	add    BYTE PTR [rax],al
 1002850:	(bad)  
 1002851:	cmp    eax,0x5
 1002856:	add    BYTE PTR [rax],al
 1002858:	add    BYTE PTR [rax],al
 100285a:	add    BYTE PTR [rax],al
 100285c:	add    eax,0xdc000000
 1002861:	cmp    eax,0x300005
	...
 100286e:	add    BYTE PTR [rax],al
 1002870:	enter  0xa6,0x1
 1002874:	add    BYTE PTR [rax],al
 1002876:	add    BYTE PTR [rax],al
 1002878:	jle    0x1002873
 100287a:	add    eax,DWORD PTR [rcx]
 100287c:	add    BYTE PTR [rax],al
 100287e:	add    BYTE PTR [rax],al
 1002880:	jo     0x1002883
 1002882:	add    DWORD PTR [rcx],eax
 1002884:	add    BYTE PTR [rax],al
 1002886:	add    BYTE PTR [rax],al
 1002888:	movabs al,ds:0xf0000000000100fe
 1002891:	scas   al,BYTE PTR es:[rdi]
 1002892:	add    BYTE PTR [rcx],al
 1002894:	add    BYTE PTR [rax],al
 1002896:	add    BYTE PTR [rax],al
 1002898:	add    BYTE PTR [rdi+0x100],ch
 100289e:	add    BYTE PTR [rax],al
 10028a0:	and    al,BYTE PTR [rip+0x21993]        # 0x1024239
 10028a6:	add    BYTE PTR [rax],al
 10028a8:	xor    al,0x3e
 10028aa:	add    eax,0x0
 10028af:	add    BYTE PTR [rax],al
 10028b1:	add    BYTE PTR [rax],al
 10028b3:	add    BYTE PTR [rax+rax*1],al
 10028b6:	add    BYTE PTR [rax],al
 10028b8:	rex.R
 10028b9:	ds add eax,0x2000
	...
 10028c7:	add    BYTE PTR [rdx],ah
 10028c9:	add    eax,0xa1993
 10028ce:	add    BYTE PTR [rax],al
 10028d0:	mov    WORD PTR [rsi],?
 10028d2:	add    eax,0x0
 10028d7:	add    BYTE PTR [rax],al
 10028d9:	add    BYTE PTR [rax],al
 10028db:	add    BYTE PTR [rip+0xffffffffdc000000],cl        # 0xffffffffdd0028e1
 10028e1:	ds add eax,0xb800
	...
 10028ef:	add    BYTE PTR [rdx],ah
 10028f1:	add    eax,0x11993
 10028f6:	add    BYTE PTR [rax],al
 10028f8:	(bad)  
 10028f9:	(bad)  
 10028fa:	add    eax,0x0
 10028ff:	add    BYTE PTR [rax],al
 1002901:	add    BYTE PTR [rax],al
 1002903:	add    BYTE PTR [rbx],al
 1002905:	add    BYTE PTR [rax],al
 1002907:	add    BYTE PTR [rax+0x3f],ch
 100290a:	add    eax,0x3800
	...
 1002917:	add    BYTE PTR [rdx],ah
 1002919:	add    eax,0x2b1993
 100291e:	add    BYTE PTR [rax],al
 1002920:	test   al,0x3f
 1002922:	add    eax,0x0
 1002927:	add    BYTE PTR [rax],al
 1002929:	add    BYTE PTR [rax],al
 100292b:	add    BYTE PTR [rdx+0x0],bl
 1002931:	rex.B add eax,0x15800
	...
 100293f:	add    BYTE PTR [rdx],ah
 1002941:	add    eax,0x71993
 1002946:	add    BYTE PTR [rax],al
 1002948:	or     BYTE PTR [rsi+0x5],al
	...
 1002953:	add    BYTE PTR [rax],bl
 1002955:	add    BYTE PTR [rax],al
 1002957:	add    BYTE PTR [rax+0x46],al
 100295a:	add    eax,0x8000
	...
 1002967:	add    BYTE PTR [rdx],ah
 1002969:	add    eax,0x21993
 100296e:	add    BYTE PTR [rax],al
 1002970:	and    al,0x47
 1002972:	add    eax,0x0
 1002977:	add    BYTE PTR [rax],al
 1002979:	add    BYTE PTR [rax],al
 100297b:	add    BYTE PTR [rbx],al
 100297d:	add    BYTE PTR [rax],al
 100297f:	add    BYTE PTR [rdi+rax*2],dh
 1002982:	add    eax,0x2000
	...
 100298f:	add    BYTE PTR [rdx],ah
 1002991:	add    eax,0x31993
 1002996:	add    BYTE PTR [rax],al
 1002998:	push   0x547
 100299d:	add    BYTE PTR [rax],al
 100299f:	add    BYTE PTR [rax],al
 10029a1:	add    BYTE PTR [rax],al
 10029a3:	add    BYTE PTR [rbx],al
 10029a5:	add    BYTE PTR [rax],al
 10029a7:	add    BYTE PTR [rax+0x20000547],al
	...
 10029b5:	add    BYTE PTR [rax],al
 10029b7:	add    BYTE PTR [rdx],ah
 10029b9:	add    eax,0x21993
 10029be:	add    BYTE PTR [rax],al
 10029c0:	mov    ah,0x47
 10029c2:	add    eax,0x0
 10029c7:	add    BYTE PTR [rax],al
 10029c9:	add    BYTE PTR [rax],al
 10029cb:	add    BYTE PTR [rip+0xffffffffc4000000],al        # 0xffffffffc50029d1
 10029d1:	rex.RXB add eax,0x3000
	...
 10029df:	add    al,cl
 10029e1:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 10029e2:	add    BYTE PTR [rcx],al
 10029e4:	add    BYTE PTR [rax],al
 10029e6:	add    BYTE PTR [rax],al
 10029e8:	shr    BYTE PTR [rcx],0x1
 10029eb:	add    DWORD PTR [rax],eax
 10029ed:	add    BYTE PTR [rax],al
 10029ef:	add    BYTE PTR [rax],dh
 10029f1:	add    al,BYTE PTR [rcx]
 10029f3:	add    DWORD PTR [rax],eax
 10029f5:	add    BYTE PTR [rax],al
 10029f7:	add    BYTE PTR [rax+0x6],dl
 10029fa:	add    DWORD PTR [rcx],eax
 10029fc:	add    BYTE PTR [rax],al
 10029fe:	add    BYTE PTR [rax],al
 1002a00:	nop
 1002a01:	(bad)  
 1002a02:	add    DWORD PTR [rcx],eax
 1002a04:	add    BYTE PTR [rax],al
 1002a06:	add    BYTE PTR [rax],al
 1002a08:	shl    BYTE PTR [rip+0x101],1        # 0x1002b0f
 1002a0e:	add    BYTE PTR [rax],al
 1002a10:	loopne 0x1002a37
 1002a12:	add    DWORD PTR [rcx],eax
 1002a14:	add    BYTE PTR [rax],al
 1002a16:	add    BYTE PTR [rax],al
 1002a18:	lock in eax,0x0
 1002a1b:	add    DWORD PTR [rax],eax
 1002a1d:	add    BYTE PTR [rax],al
 1002a1f:	add    BYTE PTR [rax],dh
 1002a21:	out    0x0,eax
 1002a23:	add    DWORD PTR [rax],eax
 1002a25:	add    BYTE PTR [rax],al
 1002a27:	add    al,al
 1002a29:	out    0x0,eax
 1002a2b:	add    DWORD PTR [rax],eax
 1002a2d:	add    BYTE PTR [rax],al
 1002a2f:	add    BYTE PTR [rax+0x100e8],ah
 1002a35:	add    BYTE PTR [rax],al
 1002a37:	add    BYTE PTR [rax-0x59],cl
 1002a3a:	add    BYTE PTR [rcx],al
 1002a3c:	add    BYTE PTR [rax],al
 1002a3e:	add    BYTE PTR [rax],al
 1002a40:	jle    0x1002a3b
 1002a42:	add    eax,DWORD PTR [rcx]
 1002a44:	add    BYTE PTR [rax],al
 1002a46:	add    BYTE PTR [rax],al
 1002a48:	mov    al,0x2c
 1002a4a:	add    DWORD PTR [rcx],eax
 1002a4c:	add    BYTE PTR [rax],al
 1002a4e:	add    BYTE PTR [rax],al
 1002a50:	add    BYTE PTR [rbx],ch
 1002a52:	add    DWORD PTR [rcx],eax
 1002a54:	add    BYTE PTR [rax],al
 1002a56:	add    BYTE PTR [rax],al
 1002a58:	lock scas al,BYTE PTR es:[rdi]
 1002a5a:	add    BYTE PTR [rcx],al
 1002a5c:	add    BYTE PTR [rax],al
 1002a5e:	add    BYTE PTR [rax],al
 1002a60:	add    BYTE PTR [rdi+0x100],ch
 1002a66:	add    BYTE PTR [rax],al
 1002a68:	sub    al,BYTE PTR [rax]
 1002a6a:	add    BYTE PTR [rax],al
 1002a6c:	add    BYTE PTR cs:[rax],al
 1002a6f:	add    BYTE PTR [rsi+0x0],cl
 1002a72:	outs   dx,DWORD PTR ds:[rsi]
 1002a73:	add    BYTE PTR [rax],ah
 1002a75:	add    BYTE PTR [rsi+0x0],dl
 1002a78:	(bad)  
 1002a79:	add    BYTE PTR [rax+rax*1+0x75],ch
 1002a7d:	add    BYTE PTR [rbp+0x0],ah
	...
 1002a88:	rex.WB add BYTE PTR [r14+0x0],bpl
 1002a8c:	jae    0x1002a8e
 1002a8e:	je     0x1002a90
 1002a90:	(bad)  
 1002a91:	add    BYTE PTR [rsi+0x0],ch
 1002a94:	movsxd eax,DWORD PTR [rax]
 1002a96:	add    BYTE PTR gs:[rax],al
 1002a99:	add    BYTE PTR [rax],al
 1002a9b:	add    BYTE PTR [rax],al
 1002a9d:	add    BYTE PTR [rax],al
 1002a9f:	add    BYTE PTR [rbx+0x0],al
 1002aa2:	outs   dx,DWORD PTR ds:[rsi]
 1002aa3:	add    BYTE PTR [rbp+0x0],dh
 1002aa6:	outs   dx,BYTE PTR ds:[rsi]
 1002aa7:	add    BYTE PTR [rax+rax*1+0x65],dh
 1002aab:	add    BYTE PTR [rdx+0x0],dh
 1002aae:	and    eax,0x6400
 1002ab3:	add    BYTE PTR [rax],al
 1002ab5:	add    BYTE PTR [rax],al
 1002ab7:	add    BYTE PTR [rip+0x3d007300],ah        # 0x3e009dbd
 1002abd:	add    BYTE PTR [rip+0x7300],ah        # 0x1009dc3
 1002ac3:	add    BYTE PTR [rax],al
 1002ac5:	add    BYTE PTR [rax],al
 1002ac7:	add    BYTE PTR [rbx+0x0],dl
 1002aca:	add    BYTE PTR gs:[rax+rax*1+0x75],dh
 1002acf:	add    BYTE PTR [rax+0x0],dh
 1002ad2:	push   rsi
 1002ad3:	add    BYTE PTR [rbp+0x0],ah
 1002ad6:	jb     0x1002ad8
 1002ad8:	add    BYTE PTR [rax],al
 1002ada:	add    BYTE PTR [rax],al
 1002adc:	cmp    BYTE PTR [rax],al
 1002ade:	add    BYTE PTR [rax],al
 1002ae0:	push   rbx
 1002ae1:	add    BYTE PTR [rbx+0x0],dl
 1002ae4:	push   rsi
 1002ae5:	add    BYTE PTR [rbp+0x0],ah
 1002ae8:	jb     0x1002aea
 1002aea:	add    BYTE PTR [rax],al
 1002aec:	add    BYTE PTR [rax],al
 1002aee:	add    BYTE PTR [rax],al
 1002af0:	rex.XB add BYTE PTR [r9+0x0],spl
 1002af4:	jae    0x1002af6
 1002af6:	add    BYTE PTR gs:[rsi+0x0],cl
 1002afa:	jne    0x1002afc
 1002afc:	ins    DWORD PTR es:[rdi],dx
 1002afd:	add    BYTE PTR [rdx+0x0],ah
 1002b00:	add    BYTE PTR gs:[rdx+0x0],dh
 1002b04:	add    BYTE PTR [rax],al
 1002b06:	add    BYTE PTR [rax],al
 1002b08:	sub    BYTE PTR [rax],al
 1002b0a:	add    BYTE PTR [rbp+0x0],r12b
 1002b0e:	data16 add BYTE PTR [rcx+0x0],ah
 1002b12:	jne    0x1002b14
 1002b14:	ins    BYTE PTR es:[rdi],dx
 1002b15:	add    BYTE PTR [rax+rax*1+0x29],dh
 1002b19:	add    BYTE PTR [rax],al
 1002b1b:	add    BYTE PTR [rcx],dh
 1002b1d:	add    BYTE PTR [rax],al
 1002b1f:	add    BYTE PTR [rdi+0x0],dl
 1002b22:	imul   eax,DWORD PTR [rax],0x64006e
 1002b28:	outs   dx,DWORD PTR ds:[rsi]
 1002b29:	add    BYTE PTR [rdi+0x0],dh
 1002b2c:	jae    0x1002b2e
 1002b2e:	add    BYTE PTR [r13+0x0],sil
 1002b32:	je     0x1002b34
 1002b34:	push   0x55000000
 1002b39:	add    BYTE PTR [rbx+0x0],dh
 1002b3c:	add    BYTE PTR gs:[rdx+0x0],dh
 1002b40:	outs   dx,BYTE PTR ds:[rsi]
 1002b41:	add    BYTE PTR [rcx+0x0],ah
 1002b44:	ins    DWORD PTR es:[rdi],dx
 1002b45:	add    BYTE PTR [rbp+0x0],ah
 1002b48:	add    BYTE PTR [rax],al
 1002b4a:	add    BYTE PTR [rax],al
 1002b4c:	xor    BYTE PTR [rax],al
 1002b4e:	add    BYTE PTR [rax],al
 1002b50:	push   rax
 1002b51:	add    BYTE PTR [rdx+0x0],dh
 1002b54:	outs   dx,DWORD PTR ds:[rsi]
 1002b55:	add    BYTE PTR [rsi+0x0],ah
 1002b58:	imul   eax,DWORD PTR [rax],0x65006c
 1002b5e:	jb     0x1002b60
	...
 1002b68:	push   rax
 1002b69:	add    BYTE PTR [rdx+0x0],dh
 1002b6c:	outs   dx,DWORD PTR ds:[rsi]
 1002b6d:	add    BYTE PTR [rsi+0x0],ah
 1002b70:	imul   eax,DWORD PTR [rax],0x65006c
 1002b76:	jb     0x1002b78
 1002b78:	add    BYTE PTR [r14+0x0],r14b
 1002b7c:	add    BYTE PTR gs:[rsi+0x0],ch
 1002b80:	je     0x1002b82
 1002b82:	jae    0x1002b84
 1002b84:	add    BYTE PTR [rax],al
 1002b86:	add    BYTE PTR [rax],al
 1002b88:	sub    eax,0x3100
 1002b8d:	add    BYTE PTR [rax],al
 1002b8f:	add    BYTE PTR [rbp+0x0],cl
 1002b92:	(bad)  
 1002b93:	add    BYTE PTR [rax+0x0],bh
 1002b96:	push   rsp
 1002b97:	add    BYTE PTR [rdx+0x0],dh
 1002b9a:	(bad)  
 1002b9b:	add    BYTE PTR [rbx+0x0],ah
 1002b9e:	add    BYTE PTR gs:[rsi+0x0],al
 1002ba2:	imul   eax,DWORD PTR [rax],0x65006c
 1002ba8:	push   rbx
 1002ba9:	add    BYTE PTR [rcx+0x0],ch
 1002bac:	jp     0x1002bae
 1002bae:	add    BYTE PTR gs:[rax],al
 1002bb1:	add    BYTE PTR [rax],al
 1002bb3:	add    BYTE PTR [rip+0x50000000],dh        # 0x51002bb9
 1002bb9:	add    BYTE PTR [rdx+0x0],dh
 1002bbc:	outs   dx,DWORD PTR ds:[rsi]
 1002bbd:	add    BYTE PTR [rsi+0x0],ah
 1002bc0:	imul   eax,DWORD PTR [rax],0x65006c
 1002bc6:	jb     0x1002bc8
 1002bc8:	push   rax
 1002bc9:	add    BYTE PTR [rdi+0x0],ch
 1002bcc:	ins    BYTE PTR es:[rdi],dx
 1002bcd:	add    BYTE PTR [rax+rax*1+0x69],ch
 1002bd1:	add    BYTE PTR [rsi+0x0],ch
 1002bd4:	add    BYTE PTR [ecx+0x0],cl
 1002bd8:	outs   dx,BYTE PTR ds:[rsi]
 1002bd9:	add    BYTE PTR [rax+rax*1+0x65],dh
 1002bdd:	add    BYTE PTR [rdx+0x0],dh
 1002be0:	jbe    0x1002be2
 1002be2:	(bad)  
 1002be3:	add    BYTE PTR [rax+rax*1+0x0],ch
 1002be7:	add    BYTE PTR [rax+0x0],al
 1002bea:	rex.WRB add BYTE PTR [r9+0x0],r12b
 1002bee:	js     0x1002bf0
 1002bf0:	rex.RX add BYTE PTR [rcx+0x0],r13b
 1002bf4:	ins    BYTE PTR es:[rdi],dx
 1002bf5:	add    BYTE PTR [rbp+0x0],ah
 1002bf8:	push   rbx
 1002bf9:	add    BYTE PTR [rcx+0x0],ch
 1002bfc:	jp     0x1002bfe
 1002bfe:	add    BYTE PTR gs:[rip+0x64002500],bh        # 0x65005105
 1002c05:	add    BYTE PTR [rax],ah
	...
 1002c0f:	add    BYTE PTR [rbx+0x0],dl
 1002c12:	push   rcx
 1002c13:	add    BYTE PTR [rax+rax*1+0x44],cl
 1002c17:	add    BYTE PTR [rcx+0x0],ch
 1002c1a:	(bad)  
 1002c1b:	add    BYTE PTR [rdi+0x0],ah
 1002c1e:	add    BYTE PTR [rax],al
 1002c20:	push   rbx
 1002c21:	add    BYTE PTR [rcx+0x0],dl
 1002c24:	rex.WR add BYTE PTR [rax+rax*1+0x69],r8b
 1002c29:	add    BYTE PTR [rcx+0x0],ah
 1002c2c:	add    BYTE PTR [ebx+0x0],dl
 1002c30:	je     0x1002c32
 1002c32:	(bad)  
 1002c33:	add    BYTE PTR [rdx+0x0],dh
 1002c36:	je     0x1002c38
 1002c38:	jne    0x1002c3a
 1002c3a:	jo     0x1002c3c
 1002c3c:	add    BYTE PTR [rax],al
 1002c3e:	add    BYTE PTR [rax],al
 1002c40:	push   rbx
 1002c41:	add    BYTE PTR [rcx+0x0],dl
 1002c44:	rex.WR add BYTE PTR [rax+rax*1+0x69],r8b
 1002c49:	add    BYTE PTR [rcx+0x0],ah
 1002c4c:	add    BYTE PTR [ebx+0x0],dl
 1002c50:	push   0x74007500
 1002c55:	add    BYTE PTR [rax+rax*1+0x6f],ah
 1002c59:	add    BYTE PTR [rdi+0x0],dh
 1002c5c:	outs   dx,BYTE PTR ds:[rsi]
 1002c5d:	add    BYTE PTR [rax],al
 1002c5f:	add    BYTE PTR [rbx+0x0],dl
 1002c62:	push   rcx
 1002c63:	add    BYTE PTR [rax+rax*1+0x44],cl
 1002c67:	add    BYTE PTR [rcx+0x0],ch
 1002c6a:	(bad)  
 1002c6b:	add    BYTE PTR [rdi+0x0],ah
 1002c6e:	rex.X add BYTE PTR [rbp+0x0],spl
 1002c72:	data16 add BYTE PTR [rdi+0x0],ch
 1002c76:	jb     0x1002c78
 1002c78:	add    BYTE PTR gs:[rax],al
 1002c7b:	add    BYTE PTR [rax],al
 1002c7d:	add    BYTE PTR [rax],al
 1002c7f:	add    BYTE PTR [rbx+0x0],dl
 1002c82:	push   rcx
 1002c83:	add    BYTE PTR [rax+rax*1+0x44],cl
 1002c87:	add    BYTE PTR [rcx+0x0],ch
 1002c8a:	(bad)  
 1002c8b:	add    BYTE PTR [rdi+0x0],ah
 1002c8e:	add    BYTE PTR [r14+0x0],spl
 1002c92:	je     0x1002c94
 1002c94:	add    BYTE PTR gs:[rdx+0x0],dh
	...
 1002ca0:	add    BYTE PTR [rax+r8*1+0x6f],bpl
 1002ca5:	add    BYTE PTR [rbx+0x0],ah
 1002ca8:	imul   eax,DWORD PTR [rax],0x69
 1002cab:	add    BYTE PTR [rsi+0x0],ch
 1002cae:	add    BYTE PTR [ebx+0x0],dl
 1002cb2:	movsxd eax,DWORD PTR [rax]
 1002cb4:	jb     0x1002cb6
 1002cb6:	imul   eax,DWORD PTR [rax],0x740070
 1002cbc:	add    BYTE PTR [rax],al
 1002cbe:	add    BYTE PTR [rax],al
 1002cc0:	add    BYTE PTR [rax+r8*1+0x6f],bpl
 1002cc5:	add    BYTE PTR [rbx+0x0],ah
 1002cc8:	imul   eax,DWORD PTR [rax],0x65
 1002ccb:	add    BYTE PTR [rdx+0x0],dh
 1002cce:	rex.WR add BYTE PTR [rcx+0x0],r12b
 1002cd2:	je     0x1002cd4
 1002cd4:	movsxd eax,DWORD PTR [rax]
 1002cd6:	push   0x0
 1002cdb:	add    BYTE PTR [rax],al
 1002cdd:	add    BYTE PTR [rax],al
 1002cdf:	add    BYTE PTR [rdx+0x0],al
 1002ce2:	ins    BYTE PTR es:[rdi],dx
 1002ce3:	add    BYTE PTR [rdi+0x0],ch
 1002ce6:	movsxd eax,DWORD PTR [rax]
 1002ce8:	imul   eax,DWORD PTR [rax],0x65
 1002ceb:	add    BYTE PTR [rdx+0x0],dh
 1002cee:	rex.RX add BYTE PTR [rcx+0x0],r12b
 1002cf2:	jae    0x1002cf4
 1002cf4:	je     0x1002cf6
 1002cf6:	add    BYTE PTR [rax],al
 1002cf8:	add    BYTE PTR [rax+r8*1+0x6f],bpl
 1002cfd:	add    BYTE PTR [rbx+0x0],ah
 1002d00:	imul   eax,DWORD PTR [rax],0x69
 1002d03:	add    BYTE PTR [rsi+0x0],ch
 1002d06:	add    BYTE PTR [eax+0x0],dl
 1002d0a:	outs   dx,DWORD PTR ds:[rsi]
 1002d0b:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1002d0f:	add    BYTE PTR [rcx+0x0],ch
 1002d12:	outs   dx,BYTE PTR ds:[rsi]
 1002d13:	add    BYTE PTR [rdi+0x0],ah
 1002d16:	rex.WB add BYTE PTR [r14+0x0],bpl
 1002d1a:	je     0x1002d1c
 1002d1c:	add    BYTE PTR gs:[rdx+0x0],dh
 1002d20:	jbe    0x1002d22
 1002d22:	(bad)  
 1002d23:	add    BYTE PTR [rax+rax*1+0x0],ch
 1002d27:	add    BYTE PTR [rax+0x0],al
 1002d2a:	ins    BYTE PTR es:[rdi],dx
 1002d2b:	add    BYTE PTR [rcx+0x0],ah
 1002d2e:	je     0x1002d30
 1002d30:	movsxd eax,DWORD PTR [rax]
 1002d32:	push   0x25003d00
 1002d37:	add    BYTE PTR [rax+rax*1+0x2c],ah
 1002d3b:	add    BYTE PTR [rax],ah
 1002d3d:	add    BYTE PTR [rax+0x0],al
 1002d40:	data16 add BYTE PTR [rcx+0x0],ah
 1002d44:	jae    0x1002d46
 1002d46:	je     0x1002d48
 1002d48:	cmp    eax,0x64002500
 1002d4d:	add    BYTE PTR [rax],ah
	...
 1002d57:	add    BYTE PTR [rbp+0x0],al
 1002d5a:	jbe    0x1002d5c
 1002d5c:	add    BYTE PTR gs:[rsi+0x0],ch
 1002d60:	je     0x1002d62
 1002d62:	rex.WR add BYTE PTR [rdi+0x0],r13b
 1002d66:	add    BYTE PTR [ebx+0x0],dh
 1002d6a:	add    BYTE PTR [rax],al
 1002d6c:	add    BYTE PTR [rax],al
 1002d6e:	add    BYTE PTR [rax],al
 1002d70:	add    BYTE PTR [r14+0x0],r14b
 1002d74:	add    BYTE PTR gs:[rsi+0x0],ch
 1002d78:	je     0x1002d7a
 1002d7a:	rex.WR add BYTE PTR [rdi+0x0],r13b
 1002d7e:	add    BYTE PTR [ebx+0x0],dh
 1002d82:	push   rbx
 1002d83:	add    BYTE PTR [rax+rax*1+0x61],dh
 1002d87:	add    BYTE PTR [rdx+0x0],dh
 1002d8a:	je     0x1002d8c
 1002d8c:	jne    0x1002d8e
 1002d8e:	jo     0x1002d90
	...
 1002d98:	add    BYTE PTR [r14+0x0],r14b
 1002d9c:	add    BYTE PTR gs:[rsi+0x0],ch
 1002da0:	je     0x1002da2
 1002da2:	rex.WR add BYTE PTR [rdi+0x0],r13b
 1002da6:	add    BYTE PTR [ebx+0x0],dh
 1002daa:	push   rbx
 1002dab:	add    BYTE PTR [rax+0x0],ch
 1002dae:	jne    0x1002db0
 1002db0:	je     0x1002db2
 1002db2:	add    BYTE PTR fs:[rdi+0x0],ch
 1002db6:	ja     0x1002db8
 1002db8:	outs   dx,BYTE PTR ds:[rsi]
 1002db9:	add    BYTE PTR [rax],al
 1002dbb:	add    BYTE PTR [rax],al
 1002dbd:	add    BYTE PTR [rax],al
 1002dbf:	add    BYTE PTR [rbp+0x0],al
 1002dc2:	jbe    0x1002dc4
 1002dc4:	add    BYTE PTR gs:[rsi+0x0],ch
 1002dc8:	je     0x1002dca
 1002dca:	rex.WR add BYTE PTR [rdi+0x0],r13b
 1002dce:	add    BYTE PTR [ebx+0x0],dh
 1002dd2:	rex.X add BYTE PTR [rbp+0x0],spl
 1002dd6:	data16 add BYTE PTR [rdi+0x0],ch
 1002dda:	jb     0x1002ddc
 1002ddc:	add    BYTE PTR gs:[rax],al
 1002ddf:	add    BYTE PTR [rbp+0x0],al
 1002de2:	jbe    0x1002de4
 1002de4:	add    BYTE PTR gs:[rsi+0x0],ch
 1002de8:	je     0x1002dea
 1002dea:	rex.WR add BYTE PTR [rdi+0x0],r13b
 1002dee:	add    BYTE PTR [ebx+0x0],dh
 1002df2:	add    BYTE PTR [r14+0x0],spl
 1002df6:	je     0x1002df8
 1002df8:	add    BYTE PTR gs:[rdx+0x0],dh
 1002dfc:	add    BYTE PTR [rax],al
 1002dfe:	add    BYTE PTR [rax],al
 1002e00:	sub    al,0x0
 1002e02:	add    BYTE PTR [rax],al
 1002e04:	(bad)  
 1002e05:	add    BYTE PTR [rax],al
 1002e07:	add    BYTE PTR [rbx+0x0],al
 1002e0a:	jne    0x1002e0c
 1002e0c:	jae    0x1002e0e
 1002e0e:	je     0x1002e10
 1002e10:	outs   dx,DWORD PTR ds:[rsi]
 1002e11:	add    BYTE PTR [rbp+0x0],ch
 1002e14:	add    BYTE PTR [rcx+0x0],r13b
 1002e18:	(bad)  
 1002e19:	add    BYTE PTR [rdi+0x0],ah
 1002e1c:	outs   dx,BYTE PTR ds:[rsi]
 1002e1d:	add    BYTE PTR [rdi+0x0],ch
 1002e20:	jae    0x1002e22
 1002e22:	je     0x1002e24
 1002e24:	imul   eax,DWORD PTR [rax],0x63
 1002e2a:	add    BYTE PTR [rax],al
 1002e2c:	add    BYTE PTR [rax],al
 1002e2e:	add    BYTE PTR [rax],al
 1002e30:	and    eax,0x25007300
 1002e35:	add    BYTE PTR [rax+rax*1+0x0],ah
 1002e39:	add    BYTE PTR [rax],al
 1002e3b:	add    BYTE PTR [rax],al
 1002e3d:	add    BYTE PTR [rax],al
 1002e3f:	add    BYTE PTR [rbx+0x0],dh
 1002e42:	je     0x1002e44
 1002e44:	(bad)  
 1002e45:	add    BYTE PTR [rdx+0x0],dh
 1002e48:	je     0x1002e4a
 1002e4a:	jne    0x1002e4c
 1002e4c:	jo     0x1002e4e
 1002e4e:	add    BYTE PTR [rax],al
 1002e50:	(bad)  
 1002e51:	add    BYTE PTR [rax+0x0],ah
 1002e54:	add    BYTE PTR [rax],al
 1002e56:	add    BYTE PTR [rax],al
 1002e58:	push   rbx
 1002e59:	add    BYTE PTR [rax+rax*1+0x61],dh
 1002e5d:	add    BYTE PTR [rdx+0x0],dh
 1002e60:	je     0x1002e62
 1002e62:	jne    0x1002e64
 1002e64:	jo     0x1002e66
 1002e66:	push   rbx
 1002e67:	add    BYTE PTR [rbx+0x0],ah
 1002e6a:	jb     0x1002e6c
 1002e6c:	imul   eax,DWORD PTR [rax],0x740070
 1002e72:	add    BYTE PTR [rax],al
 1002e74:	add    BYTE PTR [rax],al
 1002e76:	add    BYTE PTR [rax],al
 1002e78:	push   rbx
 1002e79:	add    BYTE PTR [rax+rax*1+0x61],dh
 1002e7d:	add    BYTE PTR [rdx+0x0],dh
 1002e80:	je     0x1002e82
 1002e82:	jne    0x1002e84
 1002e84:	jo     0x1002e86
 1002e86:	push   rbx
 1002e87:	add    BYTE PTR [rbx+0x0],ah
 1002e8a:	jb     0x1002e8c
 1002e8c:	imul   eax,DWORD PTR [rax],0x740070
 1002e92:	rex.WRX add BYTE PTR [rcx+0x0],r12b
 1002e96:	ins    DWORD PTR es:[rdi],dx
 1002e97:	add    BYTE PTR [rbp+0x0],ah
 1002e9a:	add    BYTE PTR [rax],al
 1002e9c:	add    BYTE PTR [rax],al
 1002e9e:	add    BYTE PTR [rax],al
 1002ea0:	push   rbx
 1002ea1:	add    BYTE PTR [rax+0x0],ch
 1002ea4:	jne    0x1002ea6
 1002ea6:	je     0x1002ea8
 1002ea8:	add    BYTE PTR fs:[rdi+0x0],ch
 1002eac:	ja     0x1002eae
 1002eae:	outs   dx,BYTE PTR ds:[rsi]
 1002eaf:	add    BYTE PTR [rbx+0x0],dl
 1002eb2:	movsxd eax,DWORD PTR [rax]
 1002eb4:	jb     0x1002eb6
 1002eb6:	imul   eax,DWORD PTR [rax],0x740070
 1002ebc:	add    BYTE PTR [rax],al
 1002ebe:	add    BYTE PTR [rax],al
 1002ec0:	push   rbx
 1002ec1:	add    BYTE PTR [rax+0x0],ch
 1002ec4:	jne    0x1002ec6
 1002ec6:	je     0x1002ec8
 1002ec8:	add    BYTE PTR fs:[rdi+0x0],ch
 1002ecc:	ja     0x1002ece
 1002ece:	outs   dx,BYTE PTR ds:[rsi]
 1002ecf:	add    BYTE PTR [rbx+0x0],dl
 1002ed2:	movsxd eax,DWORD PTR [rax]
 1002ed4:	jb     0x1002ed6
 1002ed6:	imul   eax,DWORD PTR [rax],0x740070
 1002edc:	rex.WRX add BYTE PTR [rcx+0x0],r12b
 1002ee0:	ins    DWORD PTR es:[rdi],dx
 1002ee1:	add    BYTE PTR [rbp+0x0],ah
 1002ee4:	add    BYTE PTR [rax],al
 1002ee6:	add    BYTE PTR [rax],al
 1002ee8:	push   rbx
 1002ee9:	add    BYTE PTR [rax+rax*1+0x61],dh
 1002eed:	add    BYTE PTR [rdx+0x0],dh
 1002ef0:	je     0x1002ef2
 1002ef2:	jne    0x1002ef4
 1002ef4:	jo     0x1002ef6
 1002ef6:	push   rbp
 1002ef7:	add    BYTE PTR [rax+rax*1+0x69],dh
 1002efb:	add    BYTE PTR [rax+rax*1+0x69],ch
 1002eff:	add    BYTE PTR [rax+rax*1+0x79],dh
 1002f03:	add    BYTE PTR [rax],al
 1002f05:	add    BYTE PTR [rax],al
 1002f07:	add    BYTE PTR [rbx+0x0],dl
 1002f0a:	je     0x1002f0c
 1002f0c:	(bad)  
 1002f0d:	add    BYTE PTR [rdx+0x0],dh
 1002f10:	je     0x1002f12
 1002f12:	jne    0x1002f14
 1002f14:	jo     0x1002f16
 1002f16:	push   rbp
 1002f17:	add    BYTE PTR [rax+rax*1+0x69],dh
 1002f1b:	add    BYTE PTR [rax+rax*1+0x69],ch
 1002f1f:	add    BYTE PTR [rax+rax*1+0x79],dh
 1002f23:	add    BYTE PTR [rsi+0x0],cl
 1002f26:	(bad)  
 1002f27:	add    BYTE PTR [rbp+0x0],ch
 1002f2a:	add    BYTE PTR gs:[rax],al
 1002f2d:	add    BYTE PTR [rax],al
 1002f2f:	add    BYTE PTR [rbx+0x0],dl
 1002f32:	push   0x74007500
 1002f37:	add    BYTE PTR [rax+rax*1+0x6f],ah
 1002f3b:	add    BYTE PTR [rdi+0x0],dh
 1002f3e:	outs   dx,BYTE PTR ds:[rsi]
 1002f3f:	add    BYTE PTR [rbp+0x0],dl
 1002f42:	je     0x1002f44
 1002f44:	imul   eax,DWORD PTR [rax],0x69006c
 1002f4a:	je     0x1002f4c
 1002f4c:	jns    0x1002f4e
 1002f4e:	add    BYTE PTR [rax],al
 1002f50:	push   rbx
 1002f51:	add    BYTE PTR [rax+0x0],ch
 1002f54:	jne    0x1002f56
 1002f56:	je     0x1002f58
 1002f58:	add    BYTE PTR fs:[rdi+0x0],ch
 1002f5c:	ja     0x1002f5e
 1002f5e:	outs   dx,BYTE PTR ds:[rsi]
 1002f5f:	add    BYTE PTR [rbp+0x0],dl
 1002f62:	je     0x1002f64
 1002f64:	imul   eax,DWORD PTR [rax],0x69006c
 1002f6a:	je     0x1002f6c
 1002f6c:	jns    0x1002f6e
 1002f6e:	rex.WRX add BYTE PTR [rcx+0x0],r12b
 1002f72:	ins    DWORD PTR es:[rdi],dx
 1002f73:	add    BYTE PTR [rbp+0x0],ah
 1002f76:	add    BYTE PTR [rax],al
 1002f78:	push   rax
 1002f79:	add    BYTE PTR [rbp+0x0],ah
 1002f7c:	jb     0x1002f7e
 1002f7e:	data16 add BYTE PTR [rbp+0x0],ch
 1002f82:	outs   dx,DWORD PTR ds:[rsi]
 1002f83:	add    BYTE PTR [rsi+0x0],ch
 1002f86:	add    BYTE PTR [rax],al
 1002f88:	push   rax
 1002f89:	add    BYTE PTR [rbp+0x0],ah
 1002f8c:	jb     0x1002f8e
 1002f8e:	data16 add BYTE PTR [rbp+0x0],ch
 1002f92:	outs   dx,DWORD PTR ds:[rsi]
 1002f93:	add    BYTE PTR [rsi+0x0],ch
 1002f96:	push   rax
 1002f97:	add    BYTE PTR [rdi+0x0],ch
 1002f9a:	ins    BYTE PTR es:[rdi],dx
 1002f9b:	add    BYTE PTR [rax+rax*1+0x69],ch
 1002f9f:	add    BYTE PTR [rsi+0x0],ch
 1002fa2:	add    BYTE PTR [ecx+0x0],cl
 1002fa6:	outs   dx,BYTE PTR ds:[rsi]
 1002fa7:	add    BYTE PTR [rax+rax*1+0x65],dh
 1002fab:	add    BYTE PTR [rdx+0x0],dh
 1002fae:	jbe    0x1002fb0
 1002fb0:	(bad)  
 1002fb1:	add    BYTE PTR [rax+rax*1+0x0],ch
 1002fb5:	add    BYTE PTR [rax],al
 1002fb7:	add    BYTE PTR [rdx],dh
 1002fb9:	add    BYTE PTR [rip+0x3600],dh        # 0x10065bf
 1002fbf:	add    BYTE PTR [rbp+0x0],cl
 1002fc2:	(bad)  
 1002fc3:	add    BYTE PTR [rax+0x0],bh
 1002fc6:	push   rax
 1002fc7:	add    BYTE PTR [rbp+0x0],ah
 1002fca:	jb     0x1002fcc
 1002fcc:	data16 add BYTE PTR [rbp+0x0],ch
 1002fd0:	outs   dx,DWORD PTR ds:[rsi]
 1002fd1:	add    BYTE PTR [rsi+0x0],ch
 1002fd4:	rex.WR add BYTE PTR [rdi+0x0],r13b
 1002fd8:	add    BYTE PTR [ebx+0x0],dl
 1002fdc:	imul   eax,DWORD PTR [rax],0x65007a
 1002fe2:	add    BYTE PTR [rax],al
 1002fe4:	add    BYTE PTR [rax],al
 1002fe6:	add    BYTE PTR [rax],al
 1002fe8:	push   rbx
 1002fe9:	add    BYTE PTR [rcx+0x0],dl
 1002fec:	rex.WR add BYTE PTR [rax],r8b
 1002fef:	add    BYTE PTR [rbp+0x0],cl
 1002ff2:	push   rbx
 1002ff3:	add    BYTE PTR [rbx+0x0],dl
 1002ff6:	push   rcx
 1002ff7:	add    BYTE PTR [rax+rax*1+0x24],cl
 1002ffb:	add    BYTE PTR [rip+0x7300],ah        # 0x100a301
 1003001:	add    BYTE PTR [rax],al
 1003003:	add    BYTE PTR [rax],al
 1003005:	add    BYTE PTR [rax],al
 1003007:	add    BYTE PTR [rbx+0x0],dl
 100300a:	push   rcx
 100300b:	add    BYTE PTR [rax+rax*1+0x53],cl
 100300f:	add    BYTE PTR [rbp+0x0],ah
 1003012:	jb     0x1003014
 1003014:	jbe    0x1003016
 1003016:	add    BYTE PTR gs:[rdx+0x0],dh
 100301a:	add    BYTE PTR [rax],al
 100301c:	add    BYTE PTR [rax],al
 100301e:	add    BYTE PTR [rax],al
 1003020:	rex.WRXB add BYTE PTR [r8+r8*1+0x41],r9b
 1003025:	add    BYTE PTR [rax+0x0],dl
	...
 1003030:	rex.WRB add BYTE PTR [r11+0x0],r10b
 1003034:	rex.WRXB add BYTE PTR [r8+r8*1+0x41],r9b
 1003039:	add    BYTE PTR [rax+0x0],dl
 100303c:	and    al,0x0
 100303e:	and    eax,0x7300
 1003043:	add    BYTE PTR [rax],al
 1003045:	add    BYTE PTR [rax],al
 1003047:	add    BYTE PTR [rcx+0x0],al
 100304a:	outs   dx,BYTE PTR ds:[rsi]
 100304b:	add    BYTE PTR [rcx+0x0],ah
 100304e:	ins    BYTE PTR es:[rdi],dx
 100304f:	add    BYTE PTR [rcx+0x0],bh
 1003052:	jae    0x1003054
 1003054:	imul   eax,DWORD PTR [rax],0x200073
 100305a:	push   rbx
 100305b:	add    BYTE PTR [rbp+0x0],ah
 100305e:	jb     0x1003060
 1003060:	jbe    0x1003062
 1003062:	add    BYTE PTR gs:[rdx+0x0],dh
 1003066:	add    BYTE PTR [rax],al
 1003068:	push   rdx
 1003069:	add    BYTE PTR [rbx+0x0],dl
 100306c:	add    BYTE PTR [rax],al
 100306e:	add    BYTE PTR [rax],al
 1003070:	push   rdx
 1003071:	add    BYTE PTR [rbp+0x0],ah
 1003074:	jo     0x1003076
 1003076:	outs   dx,DWORD PTR ds:[rsi]
 1003077:	add    BYTE PTR [rdx+0x0],dh
 100307a:	je     0x100307c
 100307c:	push   rbx
 100307d:	add    BYTE PTR [rbp+0x0],ah
 1003080:	jb     0x1003082
 1003082:	jbe    0x1003084
 1003084:	add    BYTE PTR gs:[rdx+0x0],dh
 1003088:	and    al,0x0
 100308a:	and    eax,0x7300
 100308f:	add    BYTE PTR [rdx+0x0],dl
 1003092:	add    BYTE PTR gs:[rax+0x0],dh
 1003096:	outs   dx,DWORD PTR ds:[rsi]
 1003097:	add    BYTE PTR [rdx+0x0],dh
 100309a:	je     0x100309c
 100309c:	and    BYTE PTR [rax],al
 100309e:	push   rbx
 100309f:	add    BYTE PTR [rbp+0x0],ah
 10030a2:	jb     0x10030a4
 10030a4:	jbe    0x10030a6
 10030a6:	add    BYTE PTR gs:[rdx+0x0],dh
 10030aa:	add    BYTE PTR [rax],al
 10030ac:	add    BYTE PTR [rax],al
 10030ae:	add    BYTE PTR [rax],al
 10030b0:	and    al,BYTE PTR [rip+0x21993]        # 0x1024a49
 10030b6:	add    BYTE PTR [rax],al
 10030b8:	sub    BYTE PTR [rax+0x5],cl
	...
 10030c3:	add    BYTE PTR [rax+rax*1],al
 10030c6:	add    BYTE PTR [rax],al
 10030c8:	cmp    BYTE PTR [rax+0x5],cl
 10030cb:	add    BYTE PTR [rax],ah
	...
 10030d5:	add    BYTE PTR [rax],al
 10030d7:	add    BYTE PTR [rdx],ah
 10030d9:	add    eax,0x21993
 10030de:	add    BYTE PTR [rax],al
 10030e0:	push   0x548
 10030e5:	add    BYTE PTR [rax],al
 10030e7:	add    BYTE PTR [rax],al
 10030e9:	add    BYTE PTR [rax],al
 10030eb:	add    BYTE PTR [rbx],al
 10030ed:	add    BYTE PTR [rax],al
 10030ef:	add    BYTE PTR [rax+0x48],bh
 10030f2:	add    eax,0x2000
	...
 10030ff:	add    BYTE PTR [rdx],ah
 1003101:	add    eax,0x11993
 1003106:	add    BYTE PTR [rax],al
 1003108:	movabs al,ds:0x548
 1003111:	add    BYTE PTR [rax],al
 1003113:	add    BYTE PTR [rdx],al
 1003115:	add    BYTE PTR [rax],al
 1003117:	add    BYTE PTR [rax+0x28000548],ch
	...
 1003125:	add    BYTE PTR [rax],al
 1003127:	add    BYTE PTR [rdx],ah
 1003129:	add    eax,0x21993
 100312e:	add    BYTE PTR [rax],al
 1003130:	fmul   QWORD PTR [rax+0x5]
	...
 100313b:	add    BYTE PTR [rbx],al
 100313d:	add    BYTE PTR [rax],al
 100313f:	add    ah,ch
 1003141:	add    rax,0x4000
	...
 100314f:	add    BYTE PTR [rdx],ah
 1003151:	add    eax,0x11993
 1003156:	add    BYTE PTR [rax],al
 1003158:	sub    BYTE PTR [rcx+0x5],cl
	...
 1003163:	add    BYTE PTR [rbx],al
 1003165:	add    BYTE PTR [rax],al
 1003167:	add    BYTE PTR [rax],dh
 1003169:	rex.WB add rax,0x2000
	...
 1003177:	add    BYTE PTR [rbp+0x0],cl
 100317a:	push   rbx
 100317b:	add    BYTE PTR [rbx+0x0],dl
 100317e:	push   rcx
 100317f:	add    BYTE PTR [rax+rax*1+0x53],cl
 1003183:	add    BYTE PTR [rbp+0x0],ah
 1003186:	jb     0x1003188
 1003188:	jbe    0x100318a
 100318a:	add    BYTE PTR gs:[rdx+0x0],dh
 100318e:	add    BYTE PTR [rax],al
 1003190:	sub    BYTE PTR [rax],al
 1003192:	add    BYTE PTR [rbp+0x0],r12b
 1003196:	data16 add BYTE PTR [rcx+0x0],ah
 100319a:	jne    0x100319c
 100319c:	ins    BYTE PTR es:[rdi],dx
 100319d:	add    BYTE PTR [rax+rax*1+0x29],dh
 10031a1:	add    BYTE PTR [rax],ah
 10031a3:	add    BYTE PTR [rax],ch
 10031a5:	add    BYTE PTR [rip+0x2d006400],ah        # 0x2e0095ab
 10031ab:	add    BYTE PTR [rdx+0x0],ah
 10031ae:	imul   eax,DWORD PTR [rax],0x290074
 10031b4:	add    BYTE PTR [rax],al
 10031b6:	add    BYTE PTR [rax],al
 10031b8:	and    eax,0x20007300
 10031bd:	add    BYTE PTR [rax],ch
 10031bf:	add    BYTE PTR [rip+0x2d006400],ah        # 0x2e0095c5
 10031c5:	add    BYTE PTR [rdx+0x0],ah
 10031c8:	imul   eax,DWORD PTR [rax],0x290074
 10031ce:	add    BYTE PTR [rax],al
 10031d0:	and    al,BYTE PTR [rip+0x11993]        # 0x1014b69
 10031d6:	add    BYTE PTR [rax],al
 10031d8:	(bad)  
 10031d9:	rex.WB add rax,0x0
 10031df:	add    BYTE PTR [rax],al
 10031e1:	add    BYTE PTR [rax],al
 10031e3:	add    BYTE PTR [rdx],al
 10031e5:	add    BYTE PTR [rax],al
 10031e7:	add    ah,cl
 10031e9:	rex.WB add rax,0x4800
	...
 10031f7:	add    BYTE PTR [rdx],ah
 10031f9:	add    eax,0x11993
 10031fe:	add    BYTE PTR [rax],al
 1003200:	rex
 1003201:	rex.WX add rax,0x0
 1003207:	add    BYTE PTR [rax],al
 1003209:	add    BYTE PTR [rax],al
 100320b:	add    BYTE PTR [rbx],al
 100320d:	add    BYTE PTR [rax],al
 100320f:	add    BYTE PTR [rax+0x4a],cl
 1003212:	add    eax,0x4800
	...
 100321f:	add    BYTE PTR [rdx],ah
 1003221:	add    eax,0x31993
 1003226:	add    BYTE PTR [rax],al
 1003228:	nop
 1003229:	rex.WX add rax,0x0
 100322f:	add    BYTE PTR [rax],al
 1003231:	add    BYTE PTR [rax],al
 1003233:	add    BYTE PTR [rdi],al
 1003235:	add    BYTE PTR [rax],al
 1003237:	add    BYTE PTR [rax+0x5000054a],ch
	...
 1003245:	add    BYTE PTR [rax],al
 1003247:	add    BYTE PTR [rdx],ah
 1003249:	add    eax,0x31993
 100324e:	add    BYTE PTR [rax],al
 1003250:	cld    
 1003251:	rex.WX add rax,0x0
 1003257:	add    BYTE PTR [rax],al
 1003259:	add    BYTE PTR [rax],al
 100325b:	add    BYTE PTR [rdi],al
 100325d:	add    BYTE PTR [rax],al
 100325f:	add    BYTE PTR [rbx+rcx*2],dl
 1003262:	add    eax,0x2800
	...
 100326f:	add    BYTE PTR [rax+0x0],dl
 1003272:	add    BYTE PTR [rax+0x0],r9b
 1003276:	add    BYTE PTR cs:[rax+rax*1+0x4c],al
 100327b:	add    BYTE PTR [rax+rax*1+0x0],cl
 100327f:	add    BYTE PTR [rax+rax*1+0x6e],bl
	...
 100328f:	add    BYTE PTR [rbx+0x0],dl
 1003292:	pop    rcx
 1003293:	add    BYTE PTR [rbx+0x0],dl
 1003296:	push   rsp
 1003297:	add    BYTE PTR [rbp+0x0],al
 100329a:	rex.WRB add BYTE PTR [r8+rax*1+0x43],r11b
 100329f:	add    BYTE PTR [rbp+0x0],dh
 10032a2:	jb     0x10032a4
 10032a4:	jb     0x10032a6
 10032a6:	add    BYTE PTR gs:[rsi+0x0],ch
 10032aa:	je     0x10032ac
 10032ac:	rex.XB add BYTE PTR [r15+0x0],bpl
 10032b0:	outs   dx,BYTE PTR ds:[rsi]
 10032b1:	add    BYTE PTR [rax+rax*1+0x72],dh
 10032b5:	add    BYTE PTR [rdi+0x0],ch
 10032b8:	ins    BYTE PTR es:[rdi],dx
 10032b9:	add    BYTE PTR [rbx+0x0],dl
 10032bc:	add    BYTE PTR gs:[rax+rax*1+0x5c],dh
 10032c1:	add    BYTE PTR [rbx+0x0],dl
 10032c4:	add    BYTE PTR gs:[rdx+0x0],dh
 10032c8:	jbe    0x10032ca
 10032ca:	imul   eax,DWORD PTR [rax],0x650063
 10032d0:	jae    0x10032d2
 10032d2:	pop    rsp
 10032d3:	add    BYTE PTR [rbp+0x0],al
 10032d6:	jbe    0x10032d8
 10032d8:	add    BYTE PTR gs:[rsi+0x0],ch
 10032dc:	je     0x10032de
 10032de:	rex.WR add BYTE PTR [rdi+0x0],r13b
 10032e2:	add    BYTE PTR [eax+eax*1+0x41],bl
 10032e7:	add    BYTE PTR [rax+0x0],dh
 10032ea:	jo     0x10032ec
 10032ec:	ins    BYTE PTR es:[rdi],dx
 10032ed:	add    BYTE PTR [rcx+0x0],ch
 10032f0:	movsxd eax,DWORD PTR [rax]
 10032f2:	(bad)  
 10032f3:	add    BYTE PTR [rax+rax*1+0x69],dh
 10032f7:	add    BYTE PTR [rdi+0x0],ch
 10032fa:	outs   dx,BYTE PTR ds:[rsi]
 10032fb:	add    BYTE PTR [rax+rax*1+0x0],bl
 10032ff:	add    BYTE PTR [rbp+0x0],al
 1003302:	jbe    0x1003304
 1003304:	add    BYTE PTR gs:[rsi+0x0],ch
 1003308:	je     0x100330a
 100330a:	rex.WRB add BYTE PTR [r13+0x0],r12b
 100330e:	jae    0x1003310
 1003310:	jae    0x1003312
 1003312:	(bad)  
 1003313:	add    BYTE PTR [rdi+0x0],ah
 1003316:	add    BYTE PTR gs:[rsi+0x0],al
 100331a:	imul   eax,DWORD PTR [rax],0x65006c
	...
 1003328:	push   rsp
 1003329:	add    BYTE PTR [rcx+0x0],bh
 100332c:	jo     0x100332e
 100332e:	add    BYTE PTR gs:[rbx+0x0],dh
 1003332:	push   rbx
 1003333:	add    BYTE PTR [rbp+0x0],dh
 1003336:	jo     0x1003338
 1003338:	jo     0x100333a
 100333a:	outs   dx,DWORD PTR ds:[rsi]
 100333b:	add    BYTE PTR [rdx+0x0],dh
 100333e:	je     0x1003340
 1003340:	add    BYTE PTR gs:[rax+rax*1+0x0],ah
 1003345:	add    BYTE PTR [rax],al
 1003347:	add    BYTE PTR [rip+0xa00],cl        # 0x1003d4d
 100334d:	add    BYTE PTR [rax],al
 100334f:	add    BYTE PTR [rip+0x20007300],ah        # 0x2100a655
 1003355:	add    BYTE PTR [rip+0x20007300],ah        # 0x2100a65b
 100335b:	add    BYTE PTR [rip+0x25007300],ah        # 0x2600a661
 1003361:	add    BYTE PTR [rbx+0x0],dh
 1003364:	add    BYTE PTR [rax],al
 1003366:	add    BYTE PTR [rax],al
 1003368:	and    eax,0x7300
 100336d:	add    BYTE PTR [rax],al
 100336f:	add    BYTE PTR [rip+0x32003000],ah        # 0x33006375
 1003375:	add    BYTE PTR [rax+rax*1+0x2f],ah
 1003379:	add    BYTE PTR [rip+0x32003000],ah        # 0x3300637f
 100337f:	add    BYTE PTR [rax+rax*1+0x2f],ah
 1003383:	add    BYTE PTR [rip+0x32003000],ah        # 0x33006389
 1003389:	add    BYTE PTR [rax+rax*1+0x20],ah
 100338d:	add    BYTE PTR [rip+0x32003000],ah        # 0x33006393
 1003393:	add    BYTE PTR [rax+rax*1+0x3a],ah
 1003397:	add    BYTE PTR [rip+0x32003000],ah        # 0x3300639d
 100339d:	add    BYTE PTR [rax+rax*1+0x3a],ah
 10033a1:	add    BYTE PTR [rip+0x32003000],ah        # 0x330063a7
 10033a7:	add    BYTE PTR [rax+rax*1+0x2e],ah
 10033ab:	add    BYTE PTR [rip+0x32003000],ah        # 0x330063b1
 10033b1:	add    BYTE PTR [rax+rax*1+0x0],ah
	...
 10033bd:	add    BYTE PTR [rax],al
 10033bf:	add    BYTE PTR [rip+0x2e007300],ah        # 0x2f00a6c5
 10033c5:	add    BYTE PTR [rax],ah
 10033c7:	add    BYTE PTR [rsi+0x0],al
 10033ca:	jne    0x10033cc
 10033cc:	outs   dx,BYTE PTR ds:[rsi]
 10033cd:	add    BYTE PTR [rbx+0x0],ah
 10033d0:	je     0x10033d2
 10033d2:	imul   eax,DWORD PTR [rax],0x6e006f
 10033d8:	and    BYTE PTR [rax],al
 10033da:	jb     0x10033dc
 10033dc:	add    BYTE PTR gs:[rbx+0x0],dh
 10033e0:	jne    0x10033e2
 10033e2:	ins    BYTE PTR es:[rdi],dx
 10033e3:	add    BYTE PTR [rax+rax*1+0x3a],dh
 10033e7:	add    BYTE PTR [rax],ah
 10033e9:	add    BYTE PTR [rip+0x2e006400],ah        # 0x2f0097ef
 10033ef:	add    BYTE PTR [rax],ah
 10033f1:	add    BYTE PTR [rbp+0x0],cl
 10033f4:	add    BYTE PTR gs:[rbx+0x0],dh
 10033f8:	jae    0x10033fa
 10033fa:	(bad)  
 10033fb:	add    BYTE PTR [rdi+0x0],ah
 10033fe:	add    BYTE PTR gs:[rdx],bh
 1003401:	add    BYTE PTR [rax],ah
 1003403:	add    BYTE PTR [rip+0x7300],ah        # 0x100a709
 1003409:	add    BYTE PTR [rax],al
 100340b:	add    BYTE PTR [rax],al
 100340d:	add    BYTE PTR [rax],al
 100340f:	add    BYTE PTR [rdx],ah
 1003411:	add    eax,0x11993
 1003416:	add    BYTE PTR [rax],al
 1003418:	nop
 1003419:	rex.WXB add rax,0x0
 100341f:	add    BYTE PTR [rax],al
 1003421:	add    BYTE PTR [rax],al
 1003423:	add    BYTE PTR [rdx],al
 1003425:	add    BYTE PTR [rax],al
 1003427:	add    BYTE PTR [rax+0x3800054b],bl
	...
 1003435:	add    BYTE PTR [rax],al
 1003437:	add    BYTE PTR [rdx],ah
 1003439:	add    eax,0x11993
 100343e:	add    BYTE PTR [rax],al
 1003440:	int3   
 1003441:	rex.WXB add rax,0x0
 1003447:	add    BYTE PTR [rax],al
 1003449:	add    BYTE PTR [rax],al
 100344b:	add    BYTE PTR [rdx],al
 100344d:	add    BYTE PTR [rax],al
 100344f:	add    ah,dl
 1003451:	rex.WXB add rax,0x3800
	...
 100345f:	add    BYTE PTR [rdx],ah
 1003461:	add    eax,0x21993
 1003466:	add    BYTE PTR [rax],al
 1003468:	push   0x54c
 100346d:	add    BYTE PTR [rax],al
 100346f:	add    BYTE PTR [rax],al
 1003471:	add    BYTE PTR [rax],al
 1003473:	add    BYTE PTR [rbx],al
 1003475:	add    BYTE PTR [rax],al
 1003477:	add    BYTE PTR [rax+0x4c],bh
 100347a:	add    eax,0x2000
	...
 1003487:	add    BYTE PTR [rdx],ah
 1003489:	add    eax,0x91993
 100348e:	add    BYTE PTR [rax],al
 1003490:	mov    ah,0x4c
 1003492:	add    eax,0x0
 1003497:	add    BYTE PTR [rax],al
 1003499:	add    BYTE PTR [rax],al
 100349b:	add    BYTE PTR [rcx],cl
 100349d:	add    BYTE PTR [rax],al
 100349f:	add    ah,bh
 10034a1:	rex.WR add rax,0x7800
	...
 10034af:	add    BYTE PTR [rdx],ah
 10034b1:	add    eax,0xa1993
 10034b6:	add    BYTE PTR [rax],al
 10034b8:	fs rex.WRB add rax,0x0
 10034bf:	add    BYTE PTR [rax],al
 10034c1:	add    BYTE PTR [rax],al
 10034c3:	add    BYTE PTR [rax+rax*1],bl
 10034c6:	add    BYTE PTR [rax],al
 10034c8:	mov    ah,0x4d
 10034ca:	add    eax,0x5800
	...
 10034d7:	add    BYTE PTR [rdx],ah
 10034d9:	add    eax,0x91993
 10034de:	add    BYTE PTR [rax],al
 10034e0:	mov    ah,0x4e
 10034e2:	add    eax,0x0
 10034e7:	add    BYTE PTR [rax],al
 10034e9:	add    BYTE PTR [rax],al
 10034eb:	add    BYTE PTR [rip+0xfffffffffc000000],cl        # 0xfffffffffd0034f1
 10034f1:	rex.WRX add rax,0x2800
	...
 10034ff:	add    BYTE PTR [rdx],ah
 1003501:	add    eax,0x61993
 1003506:	add    BYTE PTR [rax],al
 1003508:	mov    WORD PTR [rdi+0x5],cs
	...
 1003513:	add    BYTE PTR [rax],cl
 1003515:	add    BYTE PTR [rax],al
 1003517:	add    BYTE PTR [rdi+rcx*2+0x200005],bh
	...
 1003526:	add    BYTE PTR [rax],al
 1003528:	and    al,BYTE PTR [rip+0xe1993]        # 0x10e4ec1
 100352e:	add    BYTE PTR [rax],al
 1003530:	and    al,0x50
 1003532:	add    eax,0x100
 1003537:	add    BYTE PTR [rax+rdx*2+0x1e0005],dl
 100353e:	add    BYTE PTR [rax],al
 1003540:	mov    esp,0xc0000550
	...
 100354d:	add    BYTE PTR [rax],al
 100354f:	add    BYTE PTR [rdx],ah
 1003551:	add    eax,0x11993
 1003556:	add    BYTE PTR [rax],al
 1003558:	fcom   DWORD PTR [rcx+0x5]
	...
 1003563:	add    BYTE PTR [rbx],al
 1003565:	add    BYTE PTR [rax],al
 1003567:	add    al,ah
 1003569:	push   rcx
 100356a:	add    eax,0x2000
	...
 1003577:	add    BYTE PTR [rdx],ah
 1003579:	add    eax,0x71993
 100357e:	add    BYTE PTR [rax],al
 1003580:	sbb    BYTE PTR [rdx+0x5],dl
	...
 100358b:	add    BYTE PTR [rdi],cl
 100358d:	add    BYTE PTR [rax],al
 100358f:	add    BYTE PTR [rax+0x52],dl
 1003592:	add    eax,0x6800
	...
 100359f:	add    BYTE PTR [rdx],ah
 10035a1:	add    eax,0x31993
 10035a6:	add    BYTE PTR [rax],al
 10035a8:	and    BYTE PTR [rbx+0x5],dl
	...
 10035b3:	add    BYTE PTR [rdi],al
 10035b5:	add    BYTE PTR [rax],al
 10035b7:	add    BYTE PTR [rax],bh
 10035b9:	push   rbx
 10035ba:	add    eax,0x2000
	...
 10035c7:	add    BYTE PTR [rdx],ah
 10035c9:	add    eax,0x11993
 10035ce:	add    BYTE PTR [rax],al
 10035d0:	adc    BYTE PTR [rbx+0x5],0x0
	...
 10035dc:	add    al,BYTE PTR [rax]
 10035de:	add    BYTE PTR [rax],al
 10035e0:	mov    BYTE PTR [rbx+0x5],dl
 10035e3:	add    BYTE PTR [rax],ch
	...
 10035ed:	add    BYTE PTR [rax],al
 10035ef:	add    BYTE PTR [rdx],ah
 10035f1:	add    eax,0x11993
 10035f6:	add    BYTE PTR [rax],al
 10035f8:	mov    al,0x53
 10035fa:	add    eax,0x0
 10035ff:	add    BYTE PTR [rax],al
 1003601:	add    BYTE PTR [rax],al
 1003603:	add    BYTE PTR [rdx],al
 1003605:	add    BYTE PTR [rax],al
 1003607:	add    BYTE PTR [rax+0x28000553],bh
	...
 1003615:	add    BYTE PTR [rax],al
 1003617:	add    BYTE PTR [rdx],ah
 1003619:	add    eax,0x11993
 100361e:	add    BYTE PTR [rax],al
 1003620:	loopne 0x1003675
 1003622:	add    eax,0x0
 1003627:	add    BYTE PTR [rax],al
 1003629:	add    BYTE PTR [rax],al
 100362b:	add    BYTE PTR [rdx],al
 100362d:	add    BYTE PTR [rax],al
 100362f:	add    al,ch
 1003631:	push   rbx
 1003632:	add    eax,0x2800
	...
 100363f:	add    BYTE PTR [rdx],ah
 1003641:	add    eax,0x11993
 1003646:	add    BYTE PTR [rax],al
 1003648:	adc    al,0x54
 100364a:	add    eax,0x0
 100364f:	add    BYTE PTR [rax],al
 1003651:	add    BYTE PTR [rax],al
 1003653:	add    BYTE PTR [rdx],al
 1003655:	add    BYTE PTR [rax],al
 1003657:	add    BYTE PTR [rsp+rdx*2],bl
 100365a:	add    eax,0x2800
	...
 1003667:	add    BYTE PTR [rdx],ah
 1003669:	add    eax,0x21993
 100366e:	add    BYTE PTR [rax],al
 1003670:	rex.W push rsp
 1003672:	add    eax,0x0
 1003677:	add    BYTE PTR [rax],al
 1003679:	add    BYTE PTR [rax],al
 100367b:	add    BYTE PTR [rbx],al
 100367d:	add    BYTE PTR [rax],al
 100367f:	add    BYTE PTR [rax+0x54],bl
 1003682:	add    eax,0x2000
	...
 100368f:	add    BYTE PTR [rdx],ah
 1003691:	add    eax,0x31993
 1003696:	add    BYTE PTR [rax],al
 1003698:	sbb    al,0x55
 100369a:	add    eax,0x100
 100369f:	add    BYTE PTR [rdx*2+0x80005],dh
 10036a6:	add    BYTE PTR [rax],al
 10036a8:	pop    rsp
 10036a9:	push   rbp
 10036aa:	add    eax,0x4800
	...
 10036b7:	add    BYTE PTR [rdx],ah
 10036b9:	add    eax,0x11993
 10036be:	add    BYTE PTR [rax],al
 10036c0:	enter  0x555,0x0
	...
 10036cc:	add    eax,DWORD PTR [rax]
 10036ce:	add    BYTE PTR [rax],al
 10036d0:	rcl    BYTE PTR [rbp+0x5],1
 10036d3:	add    BYTE PTR [rax+0x0],al
	...
 10036de:	add    BYTE PTR [rax],al
 10036e0:	and    al,BYTE PTR [rip+0x191993]        # 0x1195079
 10036e6:	add    BYTE PTR [rax],al
 10036e8:	or     al,0x56
 10036ea:	add    eax,0x0
 10036ef:	add    BYTE PTR [rax],al
 10036f1:	add    BYTE PTR [rax],al
 10036f3:	add    BYTE PTR [rip+0xffffffffd4000000],dh        # 0xffffffffd50036f9
 10036f9:	push   rsi
 10036fa:	add    eax,0x17000
	...
 1003707:	add    BYTE PTR [rdx],ah
 1003709:	add    eax,0xd1993
 100370e:	add    BYTE PTR [rax],al
 1003710:	lods   al,BYTE PTR ds:[rsi]
 1003711:	pop    rax
 1003712:	add    eax,0x0
 1003717:	add    BYTE PTR [rax],al
 1003719:	add    BYTE PTR [rax],al
 100371b:	add    BYTE PTR [rcx],ch
 100371d:	add    BYTE PTR [rax],al
 100371f:	add    BYTE PTR [rcx+rbx*2],dl
 1003722:	add    eax,0x15800
	...
 100372f:	add    BYTE PTR [rdx],ah
 1003731:	add    eax,0x81993
 1003736:	add    BYTE PTR [rax],al
 1003738:	jl     0x1003794
 100373a:	add    eax,0x0
 100373f:	add    BYTE PTR [rax],al
 1003741:	add    BYTE PTR [rax],al
 1003743:	add    BYTE PTR [rsi],cl
 1003745:	add    BYTE PTR [rax],al
 1003747:	add    BYTE PTR [rdx+rbx*2+0x480005],bh
	...
 1003756:	add    BYTE PTR [rax],al
 1003758:	and    al,BYTE PTR [rip+0x31993]        # 0x10350f1
 100375e:	add    BYTE PTR [rax],al
 1003760:	rex.R pop rbx
 1003762:	add    eax,0x0
 1003767:	add    BYTE PTR [rax],al
 1003769:	add    BYTE PTR [rax],al
 100376b:	add    BYTE PTR [rdi],al
 100376d:	add    BYTE PTR [rax],al
 100376f:	add    BYTE PTR [rbx+rbx*2+0x5],bl
 1003773:	add    BYTE PTR [rax+0x0],al
	...
 100377e:	add    BYTE PTR [rax],al
 1003780:	and    al,BYTE PTR [rip+0xa1993]        # 0x10a5119
 1003786:	add    BYTE PTR [rax],al
 1003788:	mov    ah,0x5b
 100378a:	add    eax,0x0
 100378f:	add    BYTE PTR [rax],al
 1003791:	add    BYTE PTR [rax],al
 1003793:	add    BYTE PTR [rip+0x4000000],dl        # 0x5003799
 1003799:	pop    rsp
 100379a:	add    eax,0x6800
	...
 10037a7:	add    BYTE PTR [rdx],ah
 10037a9:	add    eax,0x11993
 10037ae:	add    BYTE PTR [rax],al
 10037b0:	rcr    BYTE PTR [rbp+rax*1+0x0],0x0
 10037b5:	add    BYTE PTR [rax],al
 10037b7:	add    BYTE PTR [rax],al
 10037b9:	add    BYTE PTR [rax],al
 10037bb:	add    BYTE PTR [rip+0xffffffffc8000000],al        # 0xffffffffc90037c1
 10037c1:	pop    rsp
 10037c2:	add    eax,0x2000
	...
 10037cf:	add    BYTE PTR [rdx],ah
 10037d1:	add    eax,0x11993
 10037d6:	add    BYTE PTR [rax],al
 10037d8:	or     al,0x5d
 10037da:	add    eax,0x0
 10037df:	add    BYTE PTR [rax],al
 10037e1:	add    BYTE PTR [rax],al
 10037e3:	add    BYTE PTR [rbx],al
 10037e5:	add    BYTE PTR [rax],al
 10037e7:	add    BYTE PTR [rbx*2+0x300005],dl
	...
 10037f6:	add    BYTE PTR [rax],al
 10037f8:	and    al,BYTE PTR [rip+0x61993]        # 0x1065191
 10037fe:	add    BYTE PTR [rax],al
 1003800:	rex.R pop rbp
 1003802:	add    eax,0x0
 1003807:	add    BYTE PTR [rax],al
 1003809:	add    BYTE PTR [rax],al
 100380b:	add    BYTE PTR [rsi],cl
 100380d:	add    BYTE PTR [rax],al
 100380f:	add    BYTE PTR [rbp+rbx*2+0x5],dh
 1003813:	add    BYTE PTR [rax+0x0],cl
	...
 100381e:	add    BYTE PTR [rax],al
 1003820:	and    al,BYTE PTR [rip+0xb1993]        # 0x10b51b9
 1003826:	add    BYTE PTR [rax],al
 1003828:	fs pop rsi
 100382a:	add    eax,0x0
 100382f:	add    BYTE PTR [rax],al
 1003831:	add    BYTE PTR [rax],al
 1003833:	add    BYTE PTR [rcx],bh
 1003835:	add    BYTE PTR [rax],al
 1003837:	add    BYTE PTR [rsi+rbx*2+0x980005],bh
	...
 1003846:	add    BYTE PTR [rax],al
 1003848:	and    al,BYTE PTR [rip+0x51993]        # 0x10551e1
 100384e:	add    BYTE PTR [rax],al
 1003850:	lods   al,BYTE PTR ds:[rsi]
 1003851:	(bad)  
 1003852:	add    eax,0x0
 1003857:	add    BYTE PTR [rax],al
 1003859:	add    BYTE PTR [rax],al
 100385b:	add    BYTE PTR [rbx],cl
 100385d:	add    BYTE PTR [rax],al
 100385f:	add    ah,dl
 1003861:	(bad)  
 1003862:	add    eax,0x7000
	...
 100386f:	add    BYTE PTR [rdx],ah
 1003871:	add    eax,0x81993
 1003876:	add    BYTE PTR [rax],al
 1003878:	rex.R (bad) 
 100387a:	add    eax,0x0
 100387f:	add    BYTE PTR [rax],al
 1003881:	add    BYTE PTR [rax],al
 1003883:	add    BYTE PTR [rcx],dl
 1003885:	add    BYTE PTR [rax],al
 1003887:	add    BYTE PTR [rcx+riz*2+0x480005],al
	...
 1003896:	add    BYTE PTR [rax],al
 1003898:	and    al,BYTE PTR [rip+0xa1993]        # 0x10a5231
 100389e:	add    BYTE PTR [rax],al
 10038a0:	fsub   QWORD PTR [rdx+0x5]
	...
 10038ab:	add    BYTE PTR [rcx],bl
 10038ad:	add    BYTE PTR [rax],al
 10038af:	add    BYTE PTR [rbx+riz*2],ch
 10038b2:	add    eax,0xa000
	...
 10038bf:	add    BYTE PTR [rdx],ah
 10038c1:	add    eax,0xf1993
 10038c6:	add    BYTE PTR [rax],al
 10038c8:	adc    al,0x64
 10038ca:	add    eax,0x100
 10038cf:	add    BYTE PTR [rsp+riz*2+0x1f0005],cl
 10038d6:	add    BYTE PTR [rax],al
 10038d8:	mov    ah,0x64
 10038da:	add    eax,0xc000
	...
 10038e7:	add    BYTE PTR [rdx],ah
 10038e9:	add    eax,0x61993
 10038ee:	add    BYTE PTR [rax],al
 10038f0:	loopne 0x1003957
 10038f2:	add    eax,0x0
 10038f7:	add    BYTE PTR [rax],al
 10038f9:	add    BYTE PTR [rax],al
 10038fb:	add    BYTE PTR [rip+0x10000000],cl        # 0x11003901
 1003901:	add    ax,0x5800
	...
 100390d:	add    BYTE PTR [rax],al
 100390f:	add    BYTE PTR [rdx],ah
 1003911:	add    eax,0x161993
 1003916:	add    BYTE PTR [rax],al
 1003918:	pushf  
 1003919:	add    ax,0x0
 100391d:	add    BYTE PTR [rax],al
 100391f:	add    BYTE PTR [rax],al
 1003921:	add    BYTE PTR [rax],al
 1003923:	add    BYTE PTR [rax],ch
 1003925:	add    BYTE PTR [rax],al
 1003927:	add    BYTE PTR [rdi+riz*2+0x5],cl
 100392b:	add    BYTE PTR [rax],ah
 100392d:	add    DWORD PTR [rax],eax
	...
 1003937:	add    BYTE PTR [rdx],ah
 1003939:	add    eax,0x181993
 100393e:	add    BYTE PTR [rax],al
 1003940:	fsubr  DWORD PTR [rax+0x5]
	...
 100394b:	add    BYTE PTR [rax+rax*1],ch
 100394e:	add    BYTE PTR [rax],al
 1003950:	cwde   
 1003951:	imul   eax,DWORD PTR [rip+0x11800],0x0        # 0x101515b
 100395b:	add    BYTE PTR [rax],al
 100395d:	add    BYTE PTR [rax],al
 100395f:	add    BYTE PTR [rdx],ah
 1003961:	add    eax,0x91993
 1003966:	add    BYTE PTR [rax],al
 1003968:	rex imul eax,DWORD PTR [rip+0x0],0x0        # 0x1003970
 1003970:	add    BYTE PTR [rax],al
 1003972:	add    BYTE PTR [rax],al
 1003974:	adc    eax,DWORD PTR [rax]
 1003976:	add    BYTE PTR [rax],al
 1003978:	mov    BYTE PTR [rbx+0x5],ch
 100397b:	add    BYTE PTR [rax+0x0],cl
 1003981:	add    BYTE PTR [rax],al
 1003983:	add    BYTE PTR [rax],al
 1003985:	add    BYTE PTR [rax],al
 1003987:	add    BYTE PTR [rdx],ah
 1003989:	add    eax,0x71993
 100398e:	add    BYTE PTR [rax],al
 1003990:	rex.R ins BYTE PTR es:[rdi],dx
 1003992:	add    eax,0x0
 1003997:	add    BYTE PTR [rax],al
 1003999:	add    BYTE PTR [rax],al
 100399b:	add    BYTE PTR [rdi],cl
 100399d:	add    BYTE PTR [rax],al
 100399f:	add    BYTE PTR [rsp+rbp*2+0x5],bh
 10039a3:	add    BYTE PTR [rax+0x0],al
	...
 10039ae:	add    BYTE PTR [rax],al
 10039b0:	and    al,BYTE PTR [rip+0xd1993]        # 0x10d5349
 10039b6:	add    BYTE PTR [rax],al
 10039b8:	adc    al,0x6d
 10039ba:	add    eax,0x0
 10039bf:	add    BYTE PTR [rax],al
 10039c1:	add    BYTE PTR [rax],al
 10039c3:	add    BYTE PTR [rsi],bl
 10039c5:	add    BYTE PTR [rax],al
 10039c7:	add    BYTE PTR [rbp+rbp*2+0x5],bh
 10039cb:	add    BYTE PTR [rax+0x0],bh
 10039d1:	add    BYTE PTR [rax],al
 10039d3:	add    BYTE PTR [rax],al
 10039d5:	add    BYTE PTR [rax],al
 10039d7:	add    BYTE PTR [rdx],ah
 10039d9:	add    eax,0xa1993
 10039de:	add    BYTE PTR [rax],al
 10039e0:	nop
 10039e1:	outs   dx,BYTE PTR ds:[rsi]
 10039e2:	add    eax,0x0
 10039e7:	add    BYTE PTR [rax],al
 10039e9:	add    BYTE PTR [rax],al
 10039eb:	add    BYTE PTR [rip+0xffffffffe0000000],dl        # 0xffffffffe10039f1
 10039f1:	outs   dx,BYTE PTR ds:[rsi]
 10039f2:	add    eax,0xa000
	...
 10039ff:	add    BYTE PTR [rdx],ah
 1003a01:	add    eax,0x131993
 1003a06:	add    BYTE PTR [rax],al
 1003a08:	mov    ah,0x6f
 1003a0a:	add    eax,0x0
 1003a0f:	add    BYTE PTR [rax],al
 1003a11:	add    BYTE PTR [rax],al
 1003a13:	add    BYTE PTR [rdx],ch
 1003a15:	add    BYTE PTR [rax],al
 1003a17:	add    BYTE PTR [rax+rsi*2+0x5],cl
 1003a1b:	add    al,dl
	...
 1003a25:	add    BYTE PTR [rax],al
 1003a27:	add    BYTE PTR [rdx],ah
 1003a29:	add    eax,0x31993
 1003a2e:	add    BYTE PTR [rax],al
 1003a30:	fdiv   DWORD PTR [rcx+0x5]
	...
 1003a3b:	add    BYTE PTR [rdi],al
 1003a3d:	add    BYTE PTR [rax],al
 1003a3f:	add    al,dh
 1003a41:	jno    0x1003a48
 1003a43:	add    BYTE PTR [rax+0x0],al
	...
 1003a4e:	add    BYTE PTR [rax],al
 1003a50:	and    al,BYTE PTR [rip+0x41993]        # 0x10453e9
 1003a56:	add    BYTE PTR [rax],al
 1003a58:	mov    esp,0x572
 1003a5d:	add    BYTE PTR [rax],al
 1003a5f:	add    BYTE PTR [rax],al
 1003a61:	add    BYTE PTR [rax],al
 1003a63:	add    BYTE PTR [rax],cl
 1003a65:	add    BYTE PTR [rax],al
 1003a67:	add    ah,bl
 1003a69:	jb     0x1003a70
 1003a6b:	add    BYTE PTR [rax+0x0],ch
	...
 1003a76:	add    BYTE PTR [rax],al
 1003a78:	and    al,BYTE PTR [rip+0x81993]        # 0x1085411
 1003a7e:	add    BYTE PTR [rax],al
 1003a80:	rex.W jae 0x1003a88
	...
 1003a8b:	add    BYTE PTR [rdi],bl
 1003a8d:	add    BYTE PTR [rax],al
 1003a8f:	add    BYTE PTR [rax-0x57fffa8d],cl
	...
 1003a9d:	add    BYTE PTR [rax],al
 1003a9f:	add    BYTE PTR [rdx],ah
 1003aa1:	add    eax,0x161993
 1003aa6:	add    BYTE PTR [rax],al
 1003aa8:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1003aa9:	je     0x1003ab0
 1003aab:	add    BYTE PTR [rcx],al
 1003aad:	add    BYTE PTR [rax],al
 1003aaf:	add    BYTE PTR [rbp+rsi*2+0x5],dl
 1003ab3:	add    BYTE PTR [rdx],bh
 1003ab5:	add    BYTE PTR [rax],al
 1003ab7:	add    BYTE PTR [rbp+rsi*2+0x5],bh
 1003abb:	add    BYTE PTR [rax+0x0],bh
	...
 1003ac6:	add    BYTE PTR [rax],al
 1003ac8:	and    al,BYTE PTR [rip+0x11993]        # 0x1015461
 1003ace:	add    BYTE PTR [rax],al
 1003ad0:	je     0x1003b49
 1003ad2:	add    eax,0x0
 1003ad7:	add    BYTE PTR [rax],al
 1003ad9:	add    BYTE PTR [rax],al
 1003adb:	add    BYTE PTR [rdx],al
 1003add:	add    BYTE PTR [rax],al
 1003adf:	add    BYTE PTR [rdi+rsi*2+0x5],bh
 1003ae3:	add    BYTE PTR [rax],ch
	...
 1003aed:	add    BYTE PTR [rax],al
 1003aef:	add    BYTE PTR [rdx],ah
 1003af1:	add    eax,0x91993
 1003af6:	add    BYTE PTR [rax],al
 1003af8:	mov    al,0x77
 1003afa:	add    eax,0x0
 1003aff:	add    BYTE PTR [rax],al
 1003b01:	add    BYTE PTR [rax],al
 1003b03:	add    BYTE PTR [rax+rax*1],dl
 1003b06:	add    BYTE PTR [rax],al
 1003b08:	clc    
 1003b09:	ja     0x1003b10
 1003b0b:	add    BYTE PTR [rax+0x0],al
	...
 1003b16:	add    BYTE PTR [rax],al
 1003b18:	and    al,BYTE PTR [rip+0x1a1993]        # 0x11a54b1
 1003b1e:	add    BYTE PTR [rax],al
 1003b20:	(bad)  
 1003b21:	js     0x1003b28
	...
 1003b2b:	add    BYTE PTR [rip+0xffffffff94000000],bh        # 0xffffffff95003b31
 1003b31:	jns    0x1003b38
 1003b33:	add    BYTE PTR [rax+0x0],bh
 1003b39:	add    BYTE PTR [rax],al
 1003b3b:	add    BYTE PTR [rax],al
 1003b3d:	add    BYTE PTR [rax],al
 1003b3f:	add    BYTE PTR [rdx],ah
 1003b41:	add    eax,0x21993
 1003b46:	add    BYTE PTR [rax],al
 1003b48:	pushf  
 1003b49:	jnp    0x1003b50
	...
 1003b53:	add    BYTE PTR [rip+0xffffffffac000000],al        # 0xffffffffad003b59
 1003b59:	jnp    0x1003b60
 1003b5b:	add    BYTE PTR [rax+0x0],cl
	...
 1003b66:	add    BYTE PTR [rax],al
 1003b68:	and    al,BYTE PTR [rip+0x131993]        # 0x1135501
 1003b6e:	add    BYTE PTR [rax],al
 1003b70:	add    BYTE PTR [rbp+rax*1+0x0],bh
	...
 1003b7c:	(bad)  
 1003b7d:	add    BYTE PTR [rax],al
 1003b7f:	add    BYTE PTR [rax-0x57fffa84],bl
	...
 1003b8d:	add    BYTE PTR [rax],al
 1003b8f:	add    BYTE PTR [rdx],ah
 1003b91:	add    eax,0xa1993
 1003b96:	add    BYTE PTR [rax],al
 1003b98:	add    BYTE PTR [rsi+0x5],bh
	...
 1003ba3:	add    BYTE PTR [rax+rax*1],dl
 1003ba6:	add    BYTE PTR [rax],al
 1003ba8:	push   rax
 1003ba9:	jle    0x1003bb0
 1003bab:	add    BYTE PTR [rax+0x0],cl
	...
 1003bb6:	add    BYTE PTR [rax],al
 1003bb8:	and    al,BYTE PTR [rip+0x31993]        # 0x1035551
 1003bbe:	add    BYTE PTR [rax],al
 1003bc0:	adc    BYTE PTR [rdi+0x5],bh
	...
 1003bcb:	add    BYTE PTR [rsi],al
 1003bcd:	add    BYTE PTR [rax],al
 1003bcf:	add    BYTE PTR [rax],ch
 1003bd1:	jg     0x1003bd8
 1003bd3:	add    BYTE PTR [rax],ch
	...
 1003bdd:	add    BYTE PTR [rax],al
 1003bdf:	add    BYTE PTR [rdx],ah
 1003be1:	add    eax,0x31993
 1003be6:	add    BYTE PTR [rax],al
 1003be8:	jl     0x1003c69
 1003bea:	add    eax,0x0
 1003bef:	add    BYTE PTR [rax],al
 1003bf1:	add    BYTE PTR [rax],al
 1003bf3:	add    BYTE PTR [rsi],al
 1003bf5:	add    BYTE PTR [rax],al
 1003bf7:	add    BYTE PTR [rdi+rdi*2+0x400005],dl
	...
 1003c06:	add    BYTE PTR [rax],al
 1003c08:	and    al,BYTE PTR [rip+0x81993]        # 0x10855a1
 1003c0e:	add    BYTE PTR [rax],al
 1003c10:	lock jg 0x1003c18
	...
 1003c1b:	add    BYTE PTR [rax],bl
 1003c1d:	add    BYTE PTR [rax],al
 1003c1f:	add    BYTE PTR [rax],dh
 1003c21:	add    BYTE PTR [rip+0x8800],0x0        # 0x100c428
	...
 1003c30:	and    al,BYTE PTR [rip+0x171993]        # 0x11755c9
 1003c36:	add    BYTE PTR [rax],al
 1003c38:	adc    BYTE PTR [rcx+0x5],al
 1003c3e:	add    BYTE PTR [rax],al
 1003c40:	add    BYTE PTR [rax],al
 1003c42:	add    BYTE PTR [rax],al
 1003c44:	(bad)  
 1003c45:	add    BYTE PTR [rax],al
 1003c47:	add    al,cl
 1003c49:	add    DWORD PTR [rip+0x13800],0x0        # 0x1017453
 1003c53:	add    BYTE PTR [rax],al
 1003c55:	add    BYTE PTR [rax],al
 1003c57:	add    BYTE PTR [rdx],ah
 1003c59:	add    eax,0x21993
 1003c5e:	add    BYTE PTR [rax],al
 1003c60:	mov    BYTE PTR [rbx+0x5],al
 1003c66:	add    BYTE PTR [rax],al
 1003c68:	add    BYTE PTR [rax],al
 1003c6a:	add    BYTE PTR [rax],al
 1003c6c:	add    eax,0x98000000
 1003c71:	add    DWORD PTR [rip+0x6000],0x0        # 0x1009c78
	...
 1003c80:	and    al,BYTE PTR [rip+0x61993]        # 0x1065619
 1003c86:	add    BYTE PTR [rax],al
 1003c88:	(bad)  
 1003c89:	add    DWORD PTR [rip+0x0],0x0        # 0x1003c90
 1003c90:	add    BYTE PTR [rax],al
 1003c92:	add    BYTE PTR [rax],al
 1003c94:	or     al,0x0
 1003c96:	add    BYTE PTR [rax],al
 1003c98:	add    al,0x84
 1003c9a:	add    eax,0x4800
	...
 1003ca7:	add    BYTE PTR [rdx],ah
 1003ca9:	add    eax,0xe1993
 1003cae:	add    BYTE PTR [rax],al
 1003cb0:	mov    BYTE PTR [rbp+rax*1+0x0],al
 1003cb7:	add    BYTE PTR [rax],al
 1003cb9:	add    BYTE PTR [rax],al
 1003cbb:	add    BYTE PTR [rdi],bl
 1003cbd:	add    BYTE PTR [rax],al
 1003cbf:	add    al,bh
 1003cc1:	test   BYTE PTR [rip+0x4800],al        # 0x10084c7
	...
 1003ccf:	add    BYTE PTR [rdx],ah
 1003cd1:	add    eax,0xb1993
 1003cd6:	add    BYTE PTR [rax],al
 1003cd8:	jo     0x1003c60
 1003cda:	add    eax,0x0
 1003cdf:	add    BYTE PTR [rax],al
 1003ce1:	add    BYTE PTR [rax],al
 1003ce3:	add    BYTE PTR [rcx],bl
 1003ce5:	add    BYTE PTR [rax],al
 1003ce7:	add    al,cl
 1003ce9:	xchg   BYTE PTR [rip+0x8800],al        # 0x100c4ef
	...
 1003cf7:	add    BYTE PTR [rdx],ah
 1003cf9:	add    eax,0x91993
 1003cfe:	add    BYTE PTR [rax],al
 1003d00:	rol    BYTE PTR [rdi+0x5],1
 1003d06:	add    BYTE PTR [rax],al
 1003d08:	add    BYTE PTR [rax],al
 1003d0a:	add    BYTE PTR [rax],al
 1003d0c:	adc    eax,0x18000000
 1003d11:	mov    BYTE PTR [rip+0x8000],al        # 0x100bd17
	...
 1003d1f:	add    BYTE PTR [rdx],ah
 1003d21:	add    eax,0x11993
 1003d26:	add    BYTE PTR [rax],al
 1003d28:	nop
 1003d29:	mov    DWORD PTR [rip+0x0],eax        # 0x1003d2f
 1003d2f:	add    BYTE PTR [rax],al
 1003d31:	add    BYTE PTR [rax],al
 1003d33:	add    BYTE PTR [rbx],al
 1003d35:	add    BYTE PTR [rax],al
 1003d37:	add    BYTE PTR [rax+0x20000589],bl
	...
 1003d45:	add    BYTE PTR [rax],al
 1003d47:	add    BYTE PTR [rdx],ah
 1003d49:	add    eax,0x101993
 1003d4e:	add    BYTE PTR [rax],al
 1003d50:	int3   
 1003d51:	mov    DWORD PTR [rip+0x0],eax        # 0x1003d57
 1003d57:	add    BYTE PTR [rax],al
 1003d59:	add    BYTE PTR [rax],al
 1003d5b:	add    BYTE PTR [rdx],dl
 1003d5d:	add    BYTE PTR [rax],al
 1003d5f:	add    BYTE PTR [rdx+rcx*4+0x5],cl
 1003d63:	add    BYTE PTR [rax],ah
	...
 1003d6d:	add    BYTE PTR [rax],al
 1003d6f:	add    BYTE PTR [rdx],ah
 1003d71:	add    eax,0x621993
 1003d76:	add    BYTE PTR [rax],al
 1003d78:	add    al,0x8b
 1003d7a:	add    eax,0x100
 1003d7f:	add    BYTE PTR [rsi+rcx*4],dl
 1003d82:	add    eax,0x19e00
 1003d87:	add    BYTE PTR [rsi+rcx*4],bh
 1003d8a:	add    eax,0x51000
	...
 1003d97:	add    BYTE PTR [rdx],ah
 1003d99:	add    eax,0x11993
 1003d9e:	add    BYTE PTR [rax],al
 1003da0:	(bad)  
 1003da1:	fwait
 1003da2:	add    eax,0x0
 1003da7:	add    BYTE PTR [rax],al
 1003da9:	add    BYTE PTR [rax],al
 1003dab:	add    BYTE PTR [rbx],al
 1003dad:	add    BYTE PTR [rax],al
 1003daf:	add    BYTE PTR [rax-0x65],ch
 1003db2:	add    eax,0x2000
	...
 1003dbf:	add    BYTE PTR [rdx],ah
 1003dc1:	add    eax,0x101993
 1003dc6:	add    BYTE PTR [rax],al
 1003dc8:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1003dc9:	fwait
 1003dca:	add    eax,0x0
 1003dcf:	add    BYTE PTR [rax],al
 1003dd1:	add    BYTE PTR [rax],al
 1003dd3:	add    BYTE PTR [rdx],dl
 1003dd5:	add    BYTE PTR [rax],al
 1003dd7:	add    BYTE PTR [rsp+rbx*4],ah
 1003dda:	add    eax,0x4000
	...
 1003de7:	add    BYTE PTR [rdx],ah
 1003de9:	add    eax,0x31993
 1003dee:	add    BYTE PTR [rax],al
 1003df0:	int3   
 1003df1:	pushf  
 1003df2:	add    eax,0x100
 1003df7:	add    ah,ah
 1003df9:	pushf  
 1003dfa:	add    eax,0x400
 1003dff:	add    BYTE PTR [rbx*4+0x480005],cl
	...
 1003e0e:	add    BYTE PTR [rax],al
 1003e10:	and    al,BYTE PTR [rip+0x61993]        # 0x10657a9
 1003e16:	add    BYTE PTR [rax],al
 1003e18:	fs popf 
 1003e1a:	add    eax,0x0
 1003e1f:	add    BYTE PTR [rax],al
 1003e21:	add    BYTE PTR [rax],al
 1003e23:	add    BYTE PTR [rip+0xffffffff94000000],cl        # 0xffffffff95003e29
 1003e29:	popf   
 1003e2a:	add    eax,0x4000
	...
 1003e37:	add    BYTE PTR [rdx],ah
 1003e39:	add    eax,0x21993
 1003e3e:	add    BYTE PTR [rax],al
 1003e40:	sbb    BYTE PTR [rsi+0x5],bl
 1003e46:	add    BYTE PTR [rax],al
 1003e48:	add    BYTE PTR [rax],al
 1003e4a:	add    BYTE PTR [rax],al
 1003e4c:	add    eax,0x28000000
 1003e51:	sahf   
 1003e52:	add    eax,0x4800
	...
 1003e5f:	add    BYTE PTR [rdx],ah
 1003e61:	add    eax,0x121993
 1003e66:	add    BYTE PTR [rax],al
 1003e68:	je     0x1003e08
 1003e6a:	add    eax,0x0
 1003e6f:	add    BYTE PTR [rax],al
 1003e71:	add    BYTE PTR [rax],al
 1003e73:	add    BYTE PTR [rdi],dh
 1003e75:	add    BYTE PTR [rax],al
 1003e77:	add    BYTE PTR [rdi+rbx*4],al
 1003e7a:	add    eax,0xc800
	...
 1003e87:	add    BYTE PTR [rdx],ah
 1003e89:	add    eax,0x61993
 1003e8e:	add    BYTE PTR [rax],al
 1003e90:	loopne 0x1003e32
 1003e92:	add    eax,0x0
 1003e97:	add    BYTE PTR [rax],al
 1003e99:	add    BYTE PTR [rax],al
 1003e9b:	add    BYTE PTR [rip+0x10000000],cl        # 0x11003ea1
 1003ea1:	movabs eax,ds:0x700005
 1003eaa:	add    BYTE PTR [rax],al
 1003eac:	add    BYTE PTR [rax],al
 1003eae:	add    BYTE PTR [rax],al
 1003eb0:	and    al,BYTE PTR [rip+0x101993]        # 0x1105849
 1003eb6:	add    BYTE PTR [rax],al
 1003eb8:	loopne 0x1003e5b
 1003eba:	add    eax,0x0
 1003ebf:	add    BYTE PTR [rax],al
 1003ec1:	add    BYTE PTR [rax],al
 1003ec3:	add    BYTE PTR [rax+rax*1],ch
 1003ec6:	add    BYTE PTR [rax],al
 1003ec8:	(bad)  
 1003ec9:	movabs ds:0xa80005,al
 1003ed2:	add    BYTE PTR [rax],al
 1003ed4:	add    BYTE PTR [rax],al
 1003ed6:	add    BYTE PTR [rax],al
 1003ed8:	and    al,BYTE PTR [rip+0xc1993]        # 0x10c5871
 1003ede:	add    BYTE PTR [rax],al
 1003ee0:	loopne 0x1003e85
 1003ee2:	add    eax,0x0
 1003ee7:	add    BYTE PTR [rax],al
 1003ee9:	add    BYTE PTR [rax],al
 1003eeb:	add    BYTE PTR [rcx],bl
 1003eed:	add    BYTE PTR [rax],al
 1003eef:	add    BYTE PTR [rax-0x5c],al
 1003ef2:	add    eax,0x4000
	...
 1003eff:	add    BYTE PTR [rdx],ah
 1003f01:	add    eax,0xd1993
 1003f06:	add    BYTE PTR [rax],al
 1003f08:	rex movs DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1003f0a:	add    eax,0x0
 1003f0f:	add    BYTE PTR [rax],al
 1003f11:	add    BYTE PTR [rax],al
 1003f13:	add    BYTE PTR [rax+rax*1],ah
 1003f16:	add    BYTE PTR [rax],al
 1003f18:	test   al,0xa5
 1003f1a:	add    eax,0xc800
	...
 1003f27:	add    BYTE PTR [rdx],ah
 1003f29:	add    eax,0x51993
 1003f2e:	add    BYTE PTR [rax],al
 1003f30:	in     al,0xa6
 1003f32:	add    eax,0x0
 1003f37:	add    BYTE PTR [rax],al
 1003f39:	add    BYTE PTR [rax],al
 1003f3b:	add    BYTE PTR [rbx],cl
 1003f3d:	add    BYTE PTR [rax],al
 1003f3f:	add    BYTE PTR [rdi+riz*4],cl
 1003f42:	add    eax,0x4000
	...
 1003f4f:	add    BYTE PTR [rdx],ah
 1003f51:	add    eax,0x11993
 1003f56:	add    BYTE PTR [rax],al
 1003f58:	je     0x1003f01
 1003f5a:	add    eax,0x0
 1003f5f:	add    BYTE PTR [rax],al
 1003f61:	add    BYTE PTR [rax],al
 1003f63:	add    BYTE PTR [rbx],al
 1003f65:	add    BYTE PTR [rax],al
 1003f67:	add    BYTE PTR [rdi+riz*4+0x5],bh
 1003f6b:	add    BYTE PTR [rax],dh
	...
 1003f75:	add    BYTE PTR [rax],al
 1003f77:	add    BYTE PTR [rdx],ah
 1003f79:	add    eax,0x31993
 1003f7e:	add    BYTE PTR [rax],al
 1003f80:	shl    BYTE PTR [rdi+0x5],1
 1003f86:	add    BYTE PTR [rax],al
 1003f88:	add    BYTE PTR [rax],al
 1003f8a:	add    BYTE PTR [rax],al
 1003f8c:	or     eax,DWORD PTR [rax]
 1003f8e:	add    BYTE PTR [rax],al
 1003f90:	call   0x5100453c
	...
 1003f9d:	add    BYTE PTR [rax],al
 1003f9f:	add    BYTE PTR [rdx],ah
 1003fa1:	add    eax,0x31993
 1003fa6:	add    BYTE PTR [rax],al
 1003fa8:	push   rax
 1003fa9:	test   al,0x5
	...
 1003fb3:	add    BYTE PTR [rax+rax*1],al
 1003fb6:	add    BYTE PTR [rax],al
 1003fb8:	push   0x400005a8
	...
 1003fc5:	add    BYTE PTR [rax],al
 1003fc7:	add    BYTE PTR [rdx],ah
 1003fc9:	add    eax,0x41993
 1003fce:	add    BYTE PTR [rax],al
 1003fd0:	add    BYTE PTR [rdx+0x5],ch
 1003fd6:	add    BYTE PTR [rax],al
 1003fd8:	add    BYTE PTR [rax],al
 1003fda:	add    BYTE PTR [rax],al
 1003fdc:	or     DWORD PTR [rax],eax
 1003fde:	add    BYTE PTR [rax],al
 1003fe0:	and    BYTE PTR [rdx+0x700005],ch
	...
 1003fee:	add    BYTE PTR [rax],al
 1003ff0:	and    al,BYTE PTR [rip+0x21993]        # 0x1025989
 1003ff6:	add    BYTE PTR [rax],al
 1003ff8:	test   BYTE PTR [rdx+0x5],ch
 1003ffe:	add    BYTE PTR [rax],al
 1004000:	add    BYTE PTR [rax],al
 1004002:	add    BYTE PTR [rax],al
 1004004:	add    eax,0x94000000
 1004009:	stos   BYTE PTR es:[rdi],al
 100400a:	add    eax,0x4000
	...
 1004017:	add    BYTE PTR [rdx],ah
 1004019:	add    eax,0x21993
 100401e:	add    BYTE PTR [rax],al
 1004020:	int3   
 1004021:	stos   BYTE PTR es:[rdi],al
 1004022:	add    eax,0x0
 1004027:	add    BYTE PTR [rax],al
 1004029:	add    BYTE PTR [rax],al
 100402b:	add    BYTE PTR [rbx],al
 100402d:	add    BYTE PTR [rax],al
 100402f:	add    ah,bl
 1004031:	stos   BYTE PTR es:[rdi],al
 1004032:	add    eax,0x2000
	...
 100403f:	add    BYTE PTR [rdx],ah
 1004041:	add    eax,0x111993
 1004046:	add    BYTE PTR [rax],al
 1004048:	(bad)  
 1004049:	stos   DWORD PTR es:[rdi],eax
 100404a:	add    eax,0x0
 100404f:	add    BYTE PTR [rax],al
 1004051:	add    BYTE PTR [rax],al
 1004053:	add    BYTE PTR [rbx],ah
 1004055:	add    BYTE PTR [rax],al
 1004057:	add    BYTE PTR [rsp+rbp*4+0x5],bl
 100405b:	add    BYTE PTR [rax+0x0],dh
	...
 1004066:	add    BYTE PTR [rax],al
 1004068:	and    al,BYTE PTR [rip+0x31993]        # 0x1035a01
 100406e:	add    BYTE PTR [rax],al
 1004070:	sbb    BYTE PTR [rsi+0x5],ch
 1004076:	add    BYTE PTR [rax],al
 1004078:	add    BYTE PTR [rax],al
 100407a:	add    BYTE PTR [rax],al
 100407c:	(bad)  
 100407d:	add    BYTE PTR [rax],al
 100407f:	add    BYTE PTR [rax],dh
 1004081:	scas   al,BYTE PTR es:[rdi]
 1004082:	add    eax,0x3000
	...
 100408f:	add    BYTE PTR [rdx],ah
 1004091:	add    eax,0x11993
 1004096:	add    BYTE PTR [rax],al
 1004098:	shr    BYTE PTR [rsi+0x5],0x0
 100409f:	add    BYTE PTR [rax],al
 10040a1:	add    BYTE PTR [rax],al
 10040a3:	add    BYTE PTR [rbx],al
 10040a5:	add    BYTE PTR [rax],al
 10040a7:	add    al,cl
 10040a9:	scas   al,BYTE PTR es:[rdi]
 10040aa:	add    eax,0x3800
	...
 10040b7:	add    BYTE PTR [rdx],ah
 10040b9:	add    eax,0x11993
 10040be:	add    BYTE PTR [rax],al
 10040c0:	test   BYTE PTR [rdi+0x5],ch
 10040c6:	add    BYTE PTR [rax],al
 10040c8:	add    BYTE PTR [rax],al
 10040ca:	add    BYTE PTR [rax],al
 10040cc:	add    eax,DWORD PTR [rax]
 10040ce:	add    BYTE PTR [rax],al
 10040d0:	mov    WORD PTR [rdi+0x200005],gs
	...
 10040de:	add    BYTE PTR [rax],al
 10040e0:	and    al,BYTE PTR [rip+0x31993]        # 0x1035a79
 10040e6:	add    BYTE PTR [rax],al
 10040e8:	mov    esp,0x5af
 10040ed:	add    BYTE PTR [rax],al
 10040ef:	add    BYTE PTR [rax],al
 10040f1:	add    BYTE PTR [rax],al
 10040f3:	add    BYTE PTR [rcx],cl
 10040f5:	add    BYTE PTR [rax],al
 10040f7:	add    ah,dl
 10040f9:	scas   eax,DWORD PTR es:[rdi]
 10040fa:	add    eax,0x5000
	...
 1004107:	add    BYTE PTR [rdx],ah
 1004109:	add    eax,0x81993
 100410e:	add    BYTE PTR [rax],al
 1004110:	cmp    al,0xb0
 1004112:	add    eax,0x0
 1004117:	add    BYTE PTR [rax],al
 1004119:	add    BYTE PTR [rax],al
 100411b:	add    BYTE PTR [rdx],ch
 100411d:	add    BYTE PTR [rax],al
 100411f:	add    BYTE PTR [rax+rsi*4+0x5],bh
 1004123:	add    al,cl
	...
 100412d:	add    BYTE PTR [rax],al
 100412f:	add    BYTE PTR [rdx],ah
 1004131:	add    eax,0x81993
 1004136:	add    BYTE PTR [rax],al
 1004138:	in     al,dx
 1004139:	mov    cl,0x5
	...
 1004143:	add    BYTE PTR [rdx],dl
 1004145:	add    BYTE PTR [rax],al
 1004147:	add    BYTE PTR [rdx+rsi*4],ch
 100414a:	add    eax,0x5000
	...
 1004157:	add    BYTE PTR [rdx],ah
 1004159:	add    eax,0x61993
 100415e:	add    BYTE PTR [rax],al
 1004160:	loopne 0x1004114
 1004162:	add    eax,0x0
 1004167:	add    BYTE PTR [rax],al
 1004169:	add    BYTE PTR [rax],al
 100416b:	add    BYTE PTR [rip+0x10000000],dl        # 0x11004171
 1004171:	mov    bl,0x5
 1004173:	add    BYTE PTR [rax+0x0],ch
	...
 100417e:	add    BYTE PTR [rax],al
 1004180:	and    al,BYTE PTR [rip+0x21993]        # 0x1025b19
 1004186:	add    BYTE PTR [rax],al
 1004188:	in     al,dx
 1004189:	mov    bl,0x5
	...
 1004193:	add    BYTE PTR [rcx],al
 1004195:	add    BYTE PTR [rax],al
 1004197:	add    ah,bh
 1004199:	mov    bl,0x5
 100419b:	add    BYTE PTR [rax],ah
	...
 10041a5:	add    BYTE PTR [rax],al
 10041a7:	add    BYTE PTR [rdx],ah
 10041a9:	add    eax,0x31993
 10041ae:	add    BYTE PTR [rax],al
 10041b0:	sbb    al,0xb4
 10041b2:	add    eax,0x0
 10041b7:	add    BYTE PTR [rax],al
 10041b9:	add    BYTE PTR [rax],al
 10041bb:	add    BYTE PTR [rbx],al
 10041bd:	add    BYTE PTR [rax],al
 10041bf:	add    BYTE PTR [rsp+rsi*4],dh
 10041c2:	add    eax,0x2000
	...
 10041cf:	add    BYTE PTR [rdx],ah
 10041d1:	add    eax,0x11993
 10041d6:	add    BYTE PTR [rax],al
 10041d8:	je     0x100418e
 10041da:	add    eax,0x0
 10041df:	add    BYTE PTR [rax],al
 10041e1:	add    BYTE PTR [rax],al
 10041e3:	add    BYTE PTR [rip+0x7c000000],al        # 0x7d0041e9
 10041e9:	mov    ah,0x5
 10041eb:	add    BYTE PTR [rax],dh
	...
 10041f5:	add    BYTE PTR [rax],al
 10041f7:	add    BYTE PTR [rdx],ah
 10041f9:	add    eax,0x31993
 10041fe:	add    BYTE PTR [rax],al
 1004200:	loopne 0x10041b6
 1004202:	add    eax,0x100
 1004207:	add    al,bh
 1004209:	mov    ah,0x5
 100420b:	add    BYTE PTR [rcx],cl
 100420d:	add    BYTE PTR [rax],al
 100420f:	add    BYTE PTR [rsi*4+0x580005],dh
	...
 100421e:	add    BYTE PTR [rax],al
 1004220:	and    al,BYTE PTR [rip+0x11993]        # 0x1015bb9
 1004226:	add    BYTE PTR [rax],al
 1004228:	jo     0x10041e0
 100422a:	add    eax,0x0
 100422f:	add    BYTE PTR [rax],al
 1004231:	add    BYTE PTR [rax],al
 1004233:	add    BYTE PTR [rcx],al
 1004235:	add    BYTE PTR [rax],al
 1004237:	add    BYTE PTR [rax-0x4a],bh
 100423a:	add    eax,0x2000
	...
 1004247:	add    BYTE PTR [rip+0x6300],ah        # 0x100a54d
 100424d:	add    BYTE PTR [rax],al
 100424f:	add    BYTE PTR [rip+0x6400],ah        # 0x100a655
	...
 100425d:	add    BYTE PTR [rax],al
 100425f:	add    al,cl
 1004261:	test   al,0x0
 1004263:	add    DWORD PTR [rax],eax
 1004265:	add    BYTE PTR [rax],al
 1004267:	add    BYTE PTR [rax],al
 1004269:	cmp    BYTE PTR [rcx],al
 100426b:	add    DWORD PTR [rax],eax
 100426d:	add    BYTE PTR [rax],al
 100426f:	add    al,ah
 1004271:	xor    eax,DWORD PTR [rcx]
 1004273:	add    DWORD PTR [rax],eax
 1004275:	add    BYTE PTR [rax],al
 1004277:	add    BYTE PTR [rax+0x39],dl
 100427a:	add    DWORD PTR [rcx],eax
 100427c:	add    BYTE PTR [rax],al
 100427e:	add    BYTE PTR [rax],al
 1004280:	adc    BYTE PTR [rcx],bh
 1004282:	add    DWORD PTR [rcx],eax
 1004284:	add    BYTE PTR [rax],al
 1004286:	add    BYTE PTR [rax],al
 1004288:	jo     0x10042c4
 100428a:	add    DWORD PTR [rcx],eax
 100428c:	add    BYTE PTR [rax],al
 100428e:	add    BYTE PTR [rax],al
 1004290:	cmp    BYTE PTR [rcx],0x1
 1004293:	add    DWORD PTR [rax],eax
 1004295:	add    BYTE PTR [rax],al
 1004297:	add    BYTE PTR [rax+0x3b],al
 100429a:	add    DWORD PTR [rcx],eax
 100429c:	add    BYTE PTR [rax],al
 100429e:	add    BYTE PTR [rax],al
 10042a0:	push   rax
 10042a1:	cmp    eax,DWORD PTR [rcx]
 10042a3:	add    DWORD PTR [rax],eax
 10042a5:	add    BYTE PTR [rax],al
 10042a7:	add    BYTE PTR [rax+0x3b],ah
 10042aa:	add    DWORD PTR [rcx],eax
 10042ac:	add    BYTE PTR [rax],al
 10042ae:	add    BYTE PTR [rax],al
 10042b0:	jo     0x10042ed
 10042b2:	add    DWORD PTR [rcx],eax
 10042b4:	add    BYTE PTR [rax],al
 10042b6:	add    BYTE PTR [rax],al
 10042b8:	cmp    BYTE PTR [rbx],0x1
 10042bb:	add    DWORD PTR [rax],eax
 10042bd:	add    BYTE PTR [rax],al
 10042bf:	add    al,dh
 10042c1:	cmp    eax,DWORD PTR [rcx]
 10042c3:	add    DWORD PTR [rax],eax
	...
 10042cd:	add    BYTE PTR [rax],al
 10042cf:	add    al,al
 10042d1:	test   eax,0x100
 10042d6:	add    BYTE PTR [rax],al
 10042d8:	lock add al,BYTE PTR [rcx+rax*1]
 10042dc:	add    BYTE PTR [rax],al
 10042de:	add    BYTE PTR [rax],al
 10042e0:	lock add al,BYTE PTR [rcx+rax*1]
 10042e4:	add    BYTE PTR [rax],al
 10042e6:	add    BYTE PTR [rax],al
 10042e8:	lock add al,BYTE PTR [rcx+rax*1]
 10042ec:	add    BYTE PTR [rax],al
 10042ee:	add    BYTE PTR [rax],al
 10042f0:	lock add al,BYTE PTR [rcx+rax*1]
 10042f4:	add    BYTE PTR [rax],al
 10042f6:	add    BYTE PTR [rax],al
 10042f8:	lock add al,BYTE PTR [rcx+rax*1]
 10042fc:	add    BYTE PTR [rax],al
 10042fe:	add    BYTE PTR [rax],al
 1004300:	lock add al,BYTE PTR [rcx+rax*1]
 1004304:	add    BYTE PTR [rax],al
 1004306:	add    BYTE PTR [rax],al
 1004308:	lock add al,BYTE PTR [rcx+rax*1]
 100430c:	add    BYTE PTR [rax],al
 100430e:	add    BYTE PTR [rax],al
 1004310:	lock add al,BYTE PTR [rcx+rax*1]
 1004314:	add    BYTE PTR [rax],al
 1004316:	add    BYTE PTR [rax],al
 1004318:	lock add al,BYTE PTR [rcx+rax*1]
 100431c:	add    BYTE PTR [rax],al
 100431e:	add    BYTE PTR [rax],al
 1004320:	lock add al,BYTE PTR [rcx+rax*1]
 1004324:	add    BYTE PTR [rax],al
 1004326:	add    BYTE PTR [rax],al
 1004328:	lock add al,BYTE PTR [rcx+rax*1]
 100432c:	add    BYTE PTR [rax],al
 100432e:	add    BYTE PTR [rax],al
 1004330:	lock add al,BYTE PTR [rcx+rax*1]
 1004334:	add    BYTE PTR [rax],al
 1004336:	add    BYTE PTR [rax],al
 1004338:	lock add al,BYTE PTR [rcx+rax*1]
 100433c:	add    BYTE PTR [rax],al
 100433e:	add    BYTE PTR [rax],al
 1004340:	lock add al,BYTE PTR [rcx+rax*1]
 1004344:	add    BYTE PTR [rax],al
 1004346:	add    BYTE PTR [rax],al
 1004348:	lock add al,BYTE PTR [rcx+rax*1]
 100434c:	add    BYTE PTR [rax],al
 100434e:	add    BYTE PTR [rax],al
 1004350:	lock add al,BYTE PTR [rcx+rax*1]
 1004354:	add    BYTE PTR [rax],al
 1004356:	add    BYTE PTR [rax],al
 1004358:	lock add al,BYTE PTR [rcx+rax*1]
 100435c:	add    BYTE PTR [rax],al
 100435e:	add    BYTE PTR [rax],al
 1004360:	lock add al,BYTE PTR [rcx+rax*1]
 1004364:	add    BYTE PTR [rax],al
 1004366:	add    BYTE PTR [rax],al
 1004368:	lock add al,BYTE PTR [rcx+rax*1]
 100436c:	add    BYTE PTR [rax],al
 100436e:	add    BYTE PTR [rax],al
 1004370:	lock add al,BYTE PTR [rcx+rax*1]
 1004374:	add    BYTE PTR [rax],al
 1004376:	add    BYTE PTR [rax],al
 1004378:	lock add al,BYTE PTR [rcx+rax*1]
 100437c:	add    BYTE PTR [rax],al
 100437e:	add    BYTE PTR [rax],al
 1004380:	lock add al,BYTE PTR [rcx+rax*1]
 1004384:	add    BYTE PTR [rax],al
 1004386:	add    BYTE PTR [rax],al
 1004388:	lock add al,BYTE PTR [rcx+rax*1]
 100438c:	add    BYTE PTR [rax],al
 100438e:	add    BYTE PTR [rax],al
 1004390:	lock add al,BYTE PTR [rcx+rax*1]
 1004394:	add    BYTE PTR [rax],al
 1004396:	add    BYTE PTR [rax],al
 1004398:	lock add al,BYTE PTR [rcx+rax*1]
 100439c:	add    BYTE PTR [rax],al
 100439e:	add    BYTE PTR [rax],al
 10043a0:	lock add al,BYTE PTR [rcx+rax*1]
 10043a4:	add    BYTE PTR [rax],al
 10043a6:	add    BYTE PTR [rax],al
 10043a8:	lock add al,BYTE PTR [rcx+rax*1]
 10043ac:	add    BYTE PTR [rax],al
 10043ae:	add    BYTE PTR [rax],al
 10043b0:	lock add al,BYTE PTR [rcx+rax*1]
 10043b4:	add    BYTE PTR [rax],al
 10043b6:	add    BYTE PTR [rax],al
 10043b8:	lock add al,BYTE PTR [rcx+rax*1]
 10043bc:	add    BYTE PTR [rax],al
 10043be:	add    BYTE PTR [rax],al
 10043c0:	lock add al,BYTE PTR [rcx+rax*1]
 10043c4:	add    BYTE PTR [rax],al
 10043c6:	add    BYTE PTR [rax],al
 10043c8:	lock add al,BYTE PTR [rcx+rax*1]
 10043cc:	add    BYTE PTR [rax],al
 10043ce:	add    BYTE PTR [rax],al
 10043d0:	lock add al,BYTE PTR [rcx+rax*1]
 10043d4:	add    BYTE PTR [rax],al
 10043d6:	add    BYTE PTR [rax],al
 10043d8:	lock add al,BYTE PTR [rcx+rax*1]
 10043dc:	add    BYTE PTR [rax],al
 10043de:	add    BYTE PTR [rax],al
 10043e0:	lock add al,BYTE PTR [rcx+rax*1]
 10043e4:	add    BYTE PTR [rax],al
 10043e6:	add    BYTE PTR [rax],al
 10043e8:	lock add al,BYTE PTR [rcx+rax*1]
 10043ec:	add    BYTE PTR [rax],al
 10043ee:	add    BYTE PTR [rax],al
 10043f0:	lock add al,BYTE PTR [rcx+rax*1]
	...
 1004400:	push   0x100aa
 1004405:	add    BYTE PTR [rax],al
 1004407:	add    BYTE PTR [rax],al
 1004409:	cmp    BYTE PTR [rcx],al
 100440b:	add    DWORD PTR [rax],eax
 100440d:	add    BYTE PTR [rax],al
 100440f:	add    al,ah
 1004411:	xor    eax,DWORD PTR [rcx]
 1004413:	add    DWORD PTR [rax],eax
 1004415:	add    BYTE PTR [rax],al
 1004417:	add    BYTE PTR [rax+0x39],dl
 100441a:	add    DWORD PTR [rcx],eax
 100441c:	add    BYTE PTR [rax],al
 100441e:	add    BYTE PTR [rax],al
 1004420:	adc    BYTE PTR [rcx],bh
 1004422:	add    DWORD PTR [rcx],eax
 1004424:	add    BYTE PTR [rax],al
 1004426:	add    BYTE PTR [rax],al
 1004428:	jo     0x1004464
 100442a:	add    DWORD PTR [rcx],eax
 100442c:	add    BYTE PTR [rax],al
 100442e:	add    BYTE PTR [rax],al
 1004430:	cmp    BYTE PTR [rcx],0x1
 1004433:	add    DWORD PTR [rax],eax
 1004435:	add    BYTE PTR [rax],al
 1004437:	add    BYTE PTR [rax+0x3b],al
 100443a:	add    DWORD PTR [rcx],eax
 100443c:	add    BYTE PTR [rax],al
 100443e:	add    BYTE PTR [rax],al
 1004440:	push   rax
 1004441:	cmp    eax,DWORD PTR [rcx]
 1004443:	add    DWORD PTR [rax],eax
 1004445:	add    BYTE PTR [rax],al
 1004447:	add    BYTE PTR [rax+0x3b],ah
 100444a:	add    DWORD PTR [rcx],eax
 100444c:	add    BYTE PTR [rax],al
 100444e:	add    BYTE PTR [rax],al
 1004450:	jo     0x100448d
 1004452:	add    DWORD PTR [rcx],eax
 1004454:	add    BYTE PTR [rax],al
 1004456:	add    BYTE PTR [rax],al
 1004458:	cmp    BYTE PTR [rbx],0x1
 100445b:	add    DWORD PTR [rax],eax
 100445d:	add    BYTE PTR [rax],al
 100445f:	add    al,dh
 1004461:	cmp    eax,DWORD PTR [rcx]
 1004463:	add    DWORD PTR [rax],eax
 1004465:	add    BYTE PTR [rax],al
 1004467:	add    al,cl
 1004469:	stos   DWORD PTR es:[rdi],eax
 100446a:	add    BYTE PTR [rcx],al
 100446c:	add    BYTE PTR [rax],al
 100446e:	add    BYTE PTR [rax],al
 1004470:	jle    0x100446b
 1004472:	add    eax,DWORD PTR [rcx]
 1004474:	add    BYTE PTR [rax],al
 1004476:	add    BYTE PTR [rax],al
 1004478:	jo     0x10044b6
 100447a:	add    al,BYTE PTR [rcx]
 100447c:	add    BYTE PTR [rax],al
 100447e:	add    BYTE PTR [rax],al
 1004480:	adc    BYTE PTR [rdx+rax*1],bh
 1004483:	add    DWORD PTR [rax],eax
 1004485:	add    BYTE PTR [rax],al
 1004487:	add    al,dh
 1004489:	scas   al,BYTE PTR es:[rdi]
 100448a:	add    BYTE PTR [rcx],al
 100448c:	add    BYTE PTR [rax],al
 100448e:	add    BYTE PTR [rax],al
 1004490:	add    BYTE PTR [rdi+0x100],ch
	...
 100449e:	add    BYTE PTR [rax],al
 10044a0:	adc    BYTE PTR [rbx+0x100],ch
 10044a6:	add    BYTE PTR [rax],al
 10044a8:	movabs al,ds:0xb000000000010157
 10044b1:	push   rdi
 10044b2:	add    DWORD PTR [rcx],eax
 10044b4:	add    BYTE PTR [rax],al
 10044b6:	add    BYTE PTR [rax],al
 10044b8:	rcr    BYTE PTR [rdx+0x1],1
 10044bb:	add    DWORD PTR [rax],eax
 10044bd:	add    BYTE PTR [rax],al
 10044bf:	add    al,dh
 10044c1:	pop    rdx
 10044c2:	add    DWORD PTR [rcx],eax
 10044c4:	add    BYTE PTR [rax],al
 10044c6:	add    BYTE PTR [rax],al
 10044c8:	and    BYTE PTR [rbx+0x1],bl
 10044cb:	add    DWORD PTR [rax],eax
 10044cd:	add    BYTE PTR [rax],al
 10044cf:	add    BYTE PTR [rax+0x5b],al
 10044d2:	add    DWORD PTR [rcx],eax
 10044d4:	add    BYTE PTR [rax],al
 10044d6:	add    BYTE PTR [rax],al
 10044d8:	jo     0x1004535
 10044da:	add    DWORD PTR [rcx],eax
 10044dc:	add    BYTE PTR [rax],al
 10044de:	add    BYTE PTR [rax],al
 10044e0:	nop
 10044e1:	pop    rbx
 10044e2:	add    DWORD PTR [rcx],eax
 10044e4:	add    BYTE PTR [rax],al
 10044e6:	add    BYTE PTR [rax],al
 10044e8:	rcr    BYTE PTR [rbx+0x1],0x1
 10044ec:	add    BYTE PTR [rax],al
 10044ee:	add    BYTE PTR [rax],al
 10044f0:	lock pop rbx
 10044f2:	add    DWORD PTR [rcx],eax
 10044f4:	add    BYTE PTR [rax],al
 10044f6:	add    BYTE PTR [rax],al
 10044f8:	xor    BYTE PTR [rcx+rax*1+0x1],bl
 10044fc:	add    BYTE PTR [rax],al
 10044fe:	add    BYTE PTR [rax],al
 1004500:	(bad)  
 1004501:	pop    rsp
 1004502:	add    DWORD PTR [rcx],eax
 1004504:	add    BYTE PTR [rax],al
 1004506:	add    BYTE PTR [rax],al
 1004508:	rcr    BYTE PTR [rcx+rax*1+0x1],0x0
 100450d:	add    BYTE PTR [rax],al
 100450f:	add    al,dh
 1004511:	pop    rsi
 1004512:	add    DWORD PTR [rcx],eax
 1004514:	add    BYTE PTR [rax],al
 1004516:	add    BYTE PTR [rax],al
 1004518:	adc    BYTE PTR [rdi+0x1],bl
 100451b:	add    DWORD PTR [rax],eax
 100451d:	add    BYTE PTR [rax],al
 100451f:	add    BYTE PTR [rax+0x5f],ah
 1004522:	add    DWORD PTR [rcx],eax
 1004524:	add    BYTE PTR [rax],al
 1004526:	add    BYTE PTR [rax],al
 1004528:	sbb    BYTE PTR [rdi+0x1],0x1
 100452c:	add    BYTE PTR [rax],al
 100452e:	add    BYTE PTR [rax],al
 1004530:	rcr    BYTE PTR [rdi+0x1],1
 1004533:	add    DWORD PTR [rax],eax
 1004535:	add    BYTE PTR [rax],al
 1004537:	add    al,dh
 1004539:	pop    rdi
 100453a:	add    DWORD PTR [rcx],eax
 100453c:	add    BYTE PTR [rax],al
 100453e:	add    BYTE PTR [rax],al
 1004540:	add    BYTE PTR [rax+0x1],ah
 1004543:	add    DWORD PTR [rax],eax
 1004545:	add    BYTE PTR [rax],al
 1004547:	add    BYTE PTR [rax],dl
 1004549:	(bad)  
 100454a:	add    DWORD PTR [rcx],eax
 100454c:	add    BYTE PTR [rax],al
 100454e:	add    BYTE PTR [rax],al
 1004550:	and    BYTE PTR [rax+0x1],ah
 1004553:	add    DWORD PTR [rax],eax
 1004555:	add    BYTE PTR [rax],al
 1004557:	add    BYTE PTR [rax],dh
 1004559:	(bad)  
 100455a:	add    DWORD PTR [rcx],eax
 100455c:	add    BYTE PTR [rax],al
 100455e:	add    BYTE PTR [rax],al
 1004560:	rex (bad) 
 1004562:	add    DWORD PTR [rcx],eax
 1004564:	add    BYTE PTR [rax],al
 1004566:	add    BYTE PTR [rax],al
 1004568:	push   rax
 1004569:	(bad)  
 100456a:	add    DWORD PTR [rcx],eax
 100456c:	add    BYTE PTR [rax],al
 100456e:	add    BYTE PTR [rax],al
 1004570:	(bad)  
 1004571:	(bad)  
 1004572:	add    DWORD PTR [rcx],eax
 1004574:	add    BYTE PTR [rax],al
 1004576:	add    BYTE PTR [rax],al
 1004578:	and    BYTE PTR [rax+0x1],0x1
 100457c:	add    BYTE PTR [rax],al
 100457e:	add    BYTE PTR [rax],al
 1004580:	shl    BYTE PTR [rax+0x1],1
 1004583:	add    DWORD PTR [rax],eax
 1004585:	add    BYTE PTR [rax],al
 1004587:	add    al,ah
 1004589:	(bad)  
 100458a:	add    DWORD PTR [rcx],eax
 100458c:	add    BYTE PTR [rax],al
 100458e:	add    BYTE PTR [rax],al
 1004590:	lock (bad) 
 1004592:	add    DWORD PTR [rcx],eax
 1004594:	add    BYTE PTR [rax],al
 1004596:	add    BYTE PTR [rax],al
 1004598:	adc    BYTE PTR [rcx+0x1],ah
 100459b:	add    DWORD PTR [rax],eax
 100459d:	add    BYTE PTR [rax],al
 100459f:	add    BYTE PTR [rax],dh
 10045a1:	(bad)  
 10045a2:	add    DWORD PTR [rcx],eax
 10045a4:	add    BYTE PTR [rax],al
 10045a6:	add    BYTE PTR [rax],al
 10045a8:	rex (bad) 
 10045aa:	add    DWORD PTR [rcx],eax
 10045ac:	add    BYTE PTR [rax],al
 10045ae:	add    BYTE PTR [rax],al
 10045b0:	(bad)  
 10045b1:	(bad)  
 10045b2:	add    DWORD PTR [rcx],eax
 10045b4:	add    BYTE PTR [rax],al
 10045b6:	add    BYTE PTR [rax],al
 10045b8:	shl    BYTE PTR [rcx+0x1],1
 10045bb:	add    DWORD PTR [rax],eax
 10045bd:	add    BYTE PTR [rax],al
 10045bf:	add    BYTE PTR [rax+0x36],ah
 10045c2:	add    al,BYTE PTR [rcx]
	...
 10045d0:	movabs al,ds:0x100ab
 10045d9:	cmp    BYTE PTR [rcx],al
 10045db:	add    DWORD PTR [rax],eax
 10045dd:	add    BYTE PTR [rax],al
 10045df:	add    al,ah
 10045e1:	xor    eax,DWORD PTR [rcx]
 10045e3:	add    DWORD PTR [rax],eax
 10045e5:	add    BYTE PTR [rax],al
 10045e7:	add    BYTE PTR [rax+0x39],dl
 10045ea:	add    DWORD PTR [rcx],eax
 10045ec:	add    BYTE PTR [rax],al
 10045ee:	add    BYTE PTR [rax],al
 10045f0:	adc    BYTE PTR [rcx],bh
 10045f2:	add    DWORD PTR [rcx],eax
 10045f4:	add    BYTE PTR [rax],al
 10045f6:	add    BYTE PTR [rax],al
 10045f8:	jo     0x1004634
 10045fa:	add    DWORD PTR [rcx],eax
 10045fc:	add    BYTE PTR [rax],al
 10045fe:	add    BYTE PTR [rax],al
 1004600:	cmp    BYTE PTR [rcx],0x1
 1004603:	add    DWORD PTR [rax],eax
 1004605:	add    BYTE PTR [rax],al
 1004607:	add    BYTE PTR [rax-0x2],dl
 100460a:	add    al,BYTE PTR [rcx]
 100460c:	add    BYTE PTR [rax],al
 100460e:	add    BYTE PTR [rax],al
 1004610:	jo     0x1004610
 1004612:	add    al,BYTE PTR [rcx]
 1004614:	add    BYTE PTR [rax],al
 1004616:	add    BYTE PTR [rax],al
 1004618:	nop
 1004619:	inc    BYTE PTR [rdx]
 100461b:	add    DWORD PTR [rax],eax
 100461d:	add    BYTE PTR [rax],al
 100461f:	add    BYTE PTR [rax+0x102fe],dh
 1004625:	add    BYTE PTR [rax],al
 1004627:	add    BYTE PTR [rax+0x1013b],al
 100462d:	add    BYTE PTR [rax],al
 100462f:	add    al,dh
 1004631:	cmp    eax,DWORD PTR [rcx]
 1004633:	add    DWORD PTR [rax],eax
 1004635:	add    BYTE PTR [rax],al
 1004637:	add    al,bh
 1004639:	(bad)  
 100463a:	(bad)  
 100463b:	jmp    FWORD PTR [rax]
 100463d:	add    DWORD PTR [rax],eax
 100463f:	add    BYTE PTR [rax-0x57],al
 1004642:	add    BYTE PTR [rcx],al
 1004644:	add    BYTE PTR [rax],al
 1004646:	add    BYTE PTR [rax],al
 1004648:	jle    0x1004643
 100464a:	add    eax,DWORD PTR [rcx]
 100464c:	add    BYTE PTR [rax],al
 100464e:	add    BYTE PTR [rax],al
 1004650:	push   rax
 1004651:	rol    BYTE PTR [rdx],0x1
 1004654:	add    BYTE PTR [rax],al
 1004656:	add    BYTE PTR [rax],al
 1004658:	lock mov ebp,0x102
 100465e:	add    BYTE PTR [rax],al
 1004660:	lock scas al,BYTE PTR es:[rdi]
 1004662:	add    BYTE PTR [rcx],al
 1004664:	add    BYTE PTR [rax],al
 1004666:	add    BYTE PTR [rax],al
 1004668:	add    BYTE PTR [rdi+0x100],ch
 100466e:	add    BYTE PTR [rax],al
 1004670:	nop
 1004671:	stos   BYTE PTR es:[rdi],al
 1004672:	add    BYTE PTR [rcx],al
 1004674:	add    BYTE PTR [rax],al
 1004676:	add    BYTE PTR [rax],al
 1004678:	add    BYTE PTR [rax],bh
 100467a:	add    DWORD PTR [rcx],eax
 100467c:	add    BYTE PTR [rax],al
 100467e:	add    BYTE PTR [rax],al
 1004680:	loopne 0x10046b5
 1004682:	add    DWORD PTR [rcx],eax
 1004684:	add    BYTE PTR [rax],al
 1004686:	add    BYTE PTR [rax],al
 1004688:	push   rax
 1004689:	cmp    DWORD PTR [rcx],eax
 100468b:	add    DWORD PTR [rax],eax
 100468d:	add    BYTE PTR [rax],al
 100468f:	add    BYTE PTR [rax],dl
 1004691:	cmp    DWORD PTR [rcx],eax
 1004693:	add    DWORD PTR [rax],eax
 1004695:	add    BYTE PTR [rax],al
 1004697:	add    BYTE PTR [rax+0x3a],dh
 100469a:	add    DWORD PTR [rcx],eax
 100469c:	add    BYTE PTR [rax],al
 100469e:	add    BYTE PTR [rax],al
 10046a0:	cmp    BYTE PTR [rcx],0x1
 10046a3:	add    DWORD PTR [rax],eax
 10046a5:	add    BYTE PTR [rax],al
 10046a7:	add    al,dh
 10046a9:	mov    ebx,0x102
 10046ae:	add    BYTE PTR [rax],al
 10046b0:	add    BYTE PTR [rdx+rax*1+0x1],bh
 10046b7:	add    BYTE PTR [rax],dl
 10046b9:	mov    esp,0x102
 10046be:	add    BYTE PTR [rax],al
 10046c0:	and    BYTE PTR [rdx+rax*1+0x1],bh
 10046c7:	add    BYTE PTR [rax+0x1013b],al
 10046cd:	add    BYTE PTR [rax],al
 10046cf:	add    al,dh
 10046d1:	cmp    eax,DWORD PTR [rcx]
 10046d3:	add    DWORD PTR [rax],eax
 10046d5:	add    BYTE PTR [rax],al
 10046d7:	add    BYTE PTR [rax-0x48],dh
 10046da:	add    al,BYTE PTR [rcx]
 10046dc:	add    BYTE PTR [rax],al
 10046de:	add    BYTE PTR [rax],al
 10046e0:	sar    BYTE PTR [rdx+0x102],1
 10046e6:	add    BYTE PTR [rax],al
 10046e8:	mov    al,0xbb
 10046ea:	add    al,BYTE PTR [rcx]
 10046ec:	add    BYTE PTR [rax],al
 10046ee:	add    BYTE PTR [rax],al
 10046f0:	pop    rsp
 10046f1:	add    BYTE PTR [rbx+0x0],cl
 10046f4:	add    BYTE PTR [r10+0x0],r10b
 10046f8:	rex.WRX add BYTE PTR [rbp+0x0],r8b
 10046fc:	rex.WR add BYTE PTR [rbx],r14b
 10046ff:	add    BYTE PTR [rdx],dh
 1004701:	add    BYTE PTR [rsi],ch
 1004703:	add    BYTE PTR [rax+rax*1+0x4c],al
 1004707:	add    BYTE PTR [rax+rax*1+0x0],cl
 100470b:	add    BYTE PTR [rax],al
 100470d:	add    BYTE PTR [rax],al
 100470f:	add    BYTE PTR [rax+0x65],cl
 1004712:	(bad)  
 1004713:	jo     0x1004768
 1004715:	gs je  0x1004761
 1004718:	outs   dx,BYTE PTR ds:[rsi]
 1004719:	outs   dx,WORD PTR ds:[rsi]
 100471b:	jb     0x100478a
 100471d:	(bad)  
 100471e:	je     0x1004789
 1004720:	outs   dx,DWORD PTR ds:[rsi]
 1004721:	outs   dx,BYTE PTR ds:[rsi]
 1004722:	add    BYTE PTR [rax],al
 1004724:	add    BYTE PTR [rax],al
 1004726:	add    BYTE PTR [rax],al
 1004728:	and    eax,0x5c007300
 100472d:	add    BYTE PTR [rip+0x7300],ah        # 0x100ba33
 1004733:	add    BYTE PTR [rax+rax*1+0x0],bl
 1004737:	add    BYTE PTR [rdx],ah
 1004739:	add    BYTE PTR [rip+0x22007300],ah        # 0x2300ba3f
 100473f:	add    BYTE PTR [rax],al
 1004741:	add    BYTE PTR [rax],al
 1004743:	add    BYTE PTR [rip+0x4500],ch        # 0x1008c49
 1004749:	add    BYTE PTR [rax],al
 100474b:	add    BYTE PTR [rax],al
 100474d:	add    BYTE PTR [rax],al
 100474f:	add    BYTE PTR [rip+0x25005500],ch        # 0x26009c55
 1004755:	add    BYTE PTR [rbx+0x0],dh
 1004758:	and    BYTE PTR [rax],al
 100475a:	sub    eax,0x25005000
 100475f:	add    BYTE PTR [rbx+0x0],dh
 1004762:	add    BYTE PTR [rax],al
 1004764:	add    BYTE PTR [rax],al
 1004766:	add    BYTE PTR [rax],al
 1004768:	sub    eax,0x6d006400
 100476d:	add    BYTE PTR [rcx+0x0],ah
 1004770:	jae    0x1004772
 1004772:	je     0x1004774
 1004774:	add    BYTE PTR gs:[rdx+0x0],dh
 1004778:	and    BYTE PTR [rax],al
 100477a:	sub    eax,0x33006c00
 100477f:	add    BYTE PTR [rax],dh
 1004781:	add    BYTE PTR [rax],ah
 1004783:	add    BYTE PTR [rip+0x25004800],ch        # 0x26008f89
 1004789:	add    BYTE PTR [rbx+0x0],dh
 100478c:	and    BYTE PTR [rax],al
 100478e:	and    eax,0x20007300
 1004793:	add    BYTE PTR [rip+0x25005300],ch        # 0x26009a99
 1004799:	add    BYTE PTR [rbx+0x0],dh
 100479c:	add    BYTE PTR [rax],al
 100479e:	add    BYTE PTR [rax],al
 10047a0:	sub    eax,0x6d006400
 10047a5:	add    BYTE PTR [rcx+0x0],ah
 10047a8:	jae    0x10047aa
 10047aa:	je     0x10047ac
 10047ac:	add    BYTE PTR gs:[rdx+0x0],dh
 10047b0:	and    BYTE PTR [rax],al
 10047b2:	sub    eax,0x33006c00
 10047b7:	add    BYTE PTR [rax],dh
 10047b9:	add    BYTE PTR [rax],ah
 10047bb:	add    BYTE PTR [rip+0x32007700],ch        # 0x3300bec1
 10047c1:	add    BYTE PTR [rax],dh
 10047c3:	add    BYTE PTR [rax+rax*1],dh
 10047c6:	cmp    BYTE PTR [rax],al
 10047c8:	and    BYTE PTR [rax],al
 10047ca:	sub    eax,0x25004800
 10047cf:	add    BYTE PTR [rbx+0x0],dh
 10047d2:	and    BYTE PTR [rax],al
 10047d4:	and    eax,0x20007300
 10047d9:	add    BYTE PTR [rip+0x25005300],ch        # 0x26009adf
 10047df:	add    BYTE PTR [rbx+0x0],dh
 10047e2:	add    BYTE PTR [rax],al
 10047e4:	add    BYTE PTR [rax],al
 10047e6:	add    BYTE PTR [rax],al
 10047e8:	add    BYTE PTR cs:[rdi+0x0],cl
 10047ec:	push   rbp
 10047ed:	add    BYTE PTR [rax+rax*1+0x0],dl
 10047f1:	add    BYTE PTR [rax],al
 10047f3:	add    BYTE PTR [rax],al
 10047f5:	add    BYTE PTR [rax],al
 10047f7:	add    BYTE PTR [rip+0x25007300],ah        # 0x2600bafd
 10047fd:	add    BYTE PTR [rbx+0x0],dh
 1004800:	pop    rdi
 1004801:	add    BYTE PTR [rip+0x5f007300],ah        # 0x6000bb07
 1004807:	add    BYTE PTR [rip+0x7300],ah        # 0x100bb0d
 100480d:	add    BYTE PTR [rax],al
 100480f:	add    BYTE PTR [rsi],ch
 1004811:	add    BYTE PTR [rbx+0x0],dl
 1004814:	push   rcx
 1004815:	add    BYTE PTR [rax+rax*1+0x0],cl
 1004819:	add    BYTE PTR [rax],al
 100481b:	add    BYTE PTR [rax],al
 100481d:	add    BYTE PTR [rax],al
 100481f:	add    BYTE PTR [rax],ah
 1004821:	add    BYTE PTR [rip+0x22006900],ch        # 0x2300b127
 1004827:	add    BYTE PTR [rip+0x22007300],ah        # 0x2300bb2d
 100482d:	add    BYTE PTR [rax],ah
 100482f:	add    BYTE PTR [rip+0x22006f00],ch        # 0x2300b735
 1004835:	add    BYTE PTR [rip+0x25007300],ah        # 0x2600bb3b
 100483b:	add    BYTE PTR [rbx+0x0],dh
 100483e:	and    al,BYTE PTR [rax]
	...
 1004848:	and    BYTE PTR [rax],al
 100484a:	sub    eax,0x22006900
 100484f:	add    BYTE PTR [rip+0x22007300],ah        # 0x2300bb55
 1004855:	add    BYTE PTR [rcx],ch
 1004857:	add    BYTE PTR [rax],ah
 1004859:	add    BYTE PTR [rsi],bh
 100485b:	add    BYTE PTR [rdx],ah
 100485d:	add    BYTE PTR [rip+0x25007300],ah        # 0x2600bb63
 1004863:	add    BYTE PTR [rbx+0x0],dh
 1004866:	and    al,BYTE PTR [rax]
 1004868:	and    BYTE PTR [rax],al
 100486a:	xor    al,BYTE PTR [rax]
 100486c:	add    BYTE PTR ds:[rsi],ah
 100486f:	add    BYTE PTR [rcx],dh
 1004871:	add    BYTE PTR [rax],al
 1004873:	add    BYTE PTR [rax],al
 1004875:	add    BYTE PTR [rax],al
 1004877:	add    BYTE PTR [rdi],ch
 1004879:	add    BYTE PTR [rbx+0x0],al
 100487c:	sub    BYTE PTR [rax],al
 100487e:	add    BYTE PTR [rsi+0x0],spl
 1004882:	outs   dx,DWORD PTR ds:[rsi]
 1004883:	add    BYTE PTR [rdx+0x0],dh
 1004886:	and    BYTE PTR [rax],al
 1004888:	(bad)  
 1004889:	add    BYTE PTR [rax+rax*1+0x20],cl
 100488d:	add    BYTE PTR [rip+0x20006900],ah        # 0x2100b193
 1004893:	add    BYTE PTR [rcx+0x0],cl
 1004896:	rex.WRX add BYTE PTR [rax],r12b
 1004899:	add    BYTE PTR [rax],ch
 100489b:	add    BYTE PTR [rcx],dh
 100489d:	add    BYTE PTR [rax+rax*1],ch
 10048a0:	xor    DWORD PTR [rax],eax
 10048a2:	sub    al,0x0
 10048a4:	xor    eax,DWORD PTR [rax]
 10048a6:	xor    al,BYTE PTR [rax]
 10048a8:	sub    DWORD PTR [rax],eax
 10048aa:	and    BYTE PTR [rax],al
 10048ac:	add    BYTE PTR [rdi+0x0],r9b
 10048b0:	and    BYTE PTR [rax],al
 10048b2:	add    BYTE PTR [rax],al
 10048b5:	add    BYTE PTR [rax],al
 10048b7:	add    BYTE PTR [rip+0x22007300],ah        # 0x2300bbbd
 10048bd:	add    BYTE PTR [rip+0x22007300],ah        # 0x2300bbc3
 10048c3:	add    BYTE PTR [rax],ah
 10048c5:	add    BYTE PTR [rip+0x7300],ah        # 0x100bbcb
 10048cb:	add    BYTE PTR [rdi+0x0],bl
 10048ce:	add    BYTE PTR [rax],al
 10048d0:	and    BYTE PTR [rax],al
 10048d2:	sub    eax,0x22005100
 10048d7:	add    BYTE PTR [rip+0x22007300],ah        # 0x2300bbdd
 10048dd:	add    BYTE PTR [rax],ah
 10048df:	add    BYTE PTR [rip+0x22006f00],ch        # 0x2300b7e5
 10048e5:	add    BYTE PTR [rip+0x25007300],ah        # 0x2600bbeb
 10048eb:	add    BYTE PTR [rbx+0x0],dh
 10048ee:	and    al,BYTE PTR [rax]
	...
 10048f8:	and    BYTE PTR [rax],al
 10048fa:	sub    eax,0x22005100
 10048ff:	add    BYTE PTR [rip+0x22007300],ah        # 0x2300bc05
 1004905:	add    BYTE PTR [rcx],ch
 1004907:	add    BYTE PTR [rax],ah
 1004909:	add    BYTE PTR [rsi],bh
 100490b:	add    BYTE PTR [rdx],ah
 100490d:	add    BYTE PTR [rip+0x25007300],ah        # 0x2600bc13
 1004913:	add    BYTE PTR [rbx+0x0],dh
 1004916:	and    al,BYTE PTR [rax]
 1004918:	and    BYTE PTR [rax],al
 100491a:	xor    al,BYTE PTR [rax]
 100491c:	add    BYTE PTR ds:[rsi],ah
 100491f:	add    BYTE PTR [rcx],dh
 1004921:	add    BYTE PTR [rax],al
 1004923:	add    BYTE PTR [rax],al
 1004925:	add    BYTE PTR [rax],al
 1004927:	add    BYTE PTR [rip+0x25007300],ah        # 0x2600bc2d
 100492d:	add    BYTE PTR [rbx+0x0],dh
 1004930:	and    eax,0x25007300
 1004935:	add    BYTE PTR [rbx+0x0],dh
 1004938:	and    eax,0x7300
 100493d:	add    BYTE PTR [rax],al
 100493f:	add    BYTE PTR [rip+0x75006f00],ah        # 0x7600b845
 1004945:	add    BYTE PTR [rax+rax*1+0x70],dh
 1004949:	add    BYTE PTR [rbp+0x0],dh
 100494c:	je     0x100494e
 100494e:	pop    rdi
 100494f:	add    BYTE PTR [rbx+0x0],dh
 1004952:	add    BYTE PTR gs:[rdx+0x0],dh
 1004956:	jbe    0x1004958
 1004958:	add    BYTE PTR gs:[rdx+0x0],dh
 100495c:	pop    rdi
 100495d:	add    BYTE PTR [rcx+0x0],ch
 1004960:	outs   dx,BYTE PTR ds:[rsi]
 1004961:	add    BYTE PTR [rbx+0x0],dh
 1004964:	je     0x1004966
 1004966:	(bad)  
 1004967:	add    BYTE PTR [rsi+0x0],ch
 100496a:	movsxd eax,DWORD PTR [rax]
 100496c:	add    BYTE PTR gs:[rip+0x0],ah        # 0x1004973
 1004973:	add    BYTE PTR [rax],al
 1004975:	add    BYTE PTR [rax],al
 1004977:	add    BYTE PTR [rip+0x75006f00],ah        # 0x7600b87d
 100497d:	add    BYTE PTR [rax+rax*1+0x70],dh
 1004981:	add    BYTE PTR [rbp+0x0],dh
 1004984:	je     0x1004986
 1004986:	pop    rdi
 1004987:	add    BYTE PTR [rax+rax*1+0x61],ah
 100498b:	add    BYTE PTR [rax+rax*1+0x61],dh
 100498f:	add    BYTE PTR [rdx+0x0],ah
 1004992:	(bad)  
 1004993:	add    BYTE PTR [rbx+0x0],dh
 1004996:	add    BYTE PTR gs:[rip+0x0],ah        # 0x100499d
 100499d:	add    BYTE PTR [rax],al
 100499f:	add    BYTE PTR [rip+0x6c006500],ah        # 0x6d00aea5
 10049a5:	add    BYTE PTR [rdi+0x0],ch
 10049a8:	add    BYTE PTR [edi+0x0],bl
 10049ac:	jo     0x10049ae
 10049ae:	outs   dx,DWORD PTR ds:[rsi]
 10049af:	add    BYTE PTR [rax+rax*1+0x6c],ch
 10049b3:	add    BYTE PTR [rcx+0x0],ch
 10049b6:	outs   dx,BYTE PTR ds:[rsi]
 10049b7:	add    BYTE PTR [rdi+0x0],ah
 10049ba:	pop    rdi
 10049bb:	add    BYTE PTR [rcx+0x0],ch
 10049be:	outs   dx,BYTE PTR ds:[rsi]
 10049bf:	add    BYTE PTR [rax+rax*1+0x65],dh
 10049c3:	add    BYTE PTR [rdx+0x0],dh
 10049c6:	jbe    0x10049c8
 10049c8:	(bad)  
 10049c9:	add    BYTE PTR [rax+rax*1+0x25],ch
 10049cd:	add    BYTE PTR [rax],al
 10049cf:	add    BYTE PTR [rip+0x75006f00],ah        # 0x7600b8d5
 10049d5:	add    BYTE PTR [rax+rax*1+0x70],dh
 10049d9:	add    BYTE PTR [rbp+0x0],dh
 10049dc:	je     0x10049de
 10049de:	pop    rdi
 10049df:	add    BYTE PTR [rax+rax*1+0x72],ah
 10049e3:	add    BYTE PTR [rdi+0x0],ch
 10049e6:	jo     0x10049e8
 10049e8:	pop    rdi
 10049e9:	add    BYTE PTR [rax+rax*1+0x61],dh
 10049ed:	add    BYTE PTR [rdx+0x0],ah
 10049f0:	ins    BYTE PTR es:[rdi],dx
 10049f1:	add    BYTE PTR [rbp+0x0],ah
 10049f4:	jae    0x10049f6
 10049f6:	and    eax,0x0
 10049fb:	add    BYTE PTR [rax],al
 10049fd:	add    BYTE PTR [rax],al
 10049ff:	add    BYTE PTR [rip+0x75006f00],ah        # 0x7600b905
 1004a05:	add    BYTE PTR [rax+rax*1+0x70],dh
 1004a09:	add    BYTE PTR [rbp+0x0],dh
 1004a0c:	je     0x1004a0e
 1004a0e:	pop    rdi
 1004a0f:	add    BYTE PTR [rbp+0x0],dh
 1004a12:	jae    0x1004a14
 1004a14:	add    BYTE PTR gs:[rdx+0x0],dh
 1004a18:	and    eax,0x0
 1004a1d:	add    BYTE PTR [rax],al
 1004a1f:	add    BYTE PTR [rip+0x75006f00],ah        # 0x7600b925
 1004a25:	add    BYTE PTR [rax+rax*1+0x70],dh
 1004a29:	add    BYTE PTR [rbp+0x0],dh
 1004a2c:	je     0x1004a2e
 1004a2e:	pop    rdi
 1004a2f:	add    BYTE PTR [rax+0x0],dh
 1004a32:	ja     0x1004a34
 1004a34:	add    BYTE PTR fs:[rip+0x0],ah        # 0x1004a3b
 1004a3b:	add    BYTE PTR [rax],al
 1004a3d:	add    BYTE PTR [rax],al
 1004a3f:	add    BYTE PTR [rsi],ch
 1004a41:	add    BYTE PTR [rbx+0x0],al
 1004a44:	push   rbx
 1004a45:	add    BYTE PTR [rsi+0x0],dl
	...
 1004a50:	push   rbx
 1004a51:	add    BYTE PTR [rax+rax*1+0x61],dh
 1004a55:	add    BYTE PTR [rdx+0x0],dh
 1004a58:	je     0x1004a5a
 1004a5a:	jne    0x1004a5c
 1004a5c:	jo     0x1004a5e
 1004a5e:	add    BYTE PTR [rax],al
 1004a60:	push   rbx
 1004a61:	add    BYTE PTR [rax+0x0],ch
 1004a64:	jne    0x1004a66
 1004a66:	je     0x1004a68
 1004a68:	add    BYTE PTR fs:[rdi+0x0],ch
 1004a6c:	ja     0x1004a6e
 1004a6e:	outs   dx,BYTE PTR ds:[rsi]
	...
 1004a77:	add    BYTE PTR [rax-0x54],cl
 1004a7a:	add    BYTE PTR [rcx],al
 1004a7c:	add    BYTE PTR [rax],al
 1004a7e:	add    BYTE PTR [rax],al
 1004a80:	jle    0x1004a7b
 1004a82:	add    eax,DWORD PTR [rcx]
 1004a84:	add    BYTE PTR [rax],al
 1004a86:	add    BYTE PTR [rax],al
 1004a88:	push   rax
 1004a89:	fiadd  DWORD PTR [rdx]
 1004a8b:	add    DWORD PTR [rax],eax
 1004a8d:	add    BYTE PTR [rax],al
 1004a8f:	add    al,dh
 1004a91:	fld    DWORD PTR [rdx]
 1004a93:	add    DWORD PTR [rax],eax
 1004a95:	add    BYTE PTR [rax],al
 1004a97:	add    al,dh
 1004a99:	scas   al,BYTE PTR es:[rdi]
 1004a9a:	add    BYTE PTR [rcx],al
 1004a9c:	add    BYTE PTR [rax],al
 1004a9e:	add    BYTE PTR [rax],al
 1004aa0:	add    BYTE PTR [rdi+0x100],ch
 1004aa6:	add    BYTE PTR [rax],al
 1004aa8:	jae    0x1004aaa
 1004aaa:	jo     0x1004aac
 1004aac:	pop    rdi
 1004aad:	add    BYTE PTR [rbx+0x0],dh
 1004ab0:	jno    0x1004ab2
 1004ab2:	ins    BYTE PTR es:[rdi],dx
 1004ab3:	add    BYTE PTR [rax+rax*1+0x69],ah
 1004ab7:	add    BYTE PTR [rcx+0x0],ah
 1004aba:	add    BYTE PTR [eax],al
 1004abd:	add    BYTE PTR [rax],al
 1004abf:	add    BYTE PTR [rip+0x5f007300],ah        # 0x6000bdc5
 1004ac5:	add    BYTE PTR [rip+0x2e007300],ah        # 0x2f00bdcb
 1004acb:	add    BYTE PTR [rdi+0x0],cl
 1004ace:	push   rbp
 1004acf:	add    BYTE PTR [rax+rax*1+0x0],dl
 1004ad3:	add    BYTE PTR [rax],al
 1004ad5:	add    BYTE PTR [rax],al
 1004ad7:	add    BYTE PTR [rax+rax*1+0x65],dh
 1004adb:	add    BYTE PTR [rbp+0x0],ch
 1004ade:	jo     0x1004ae0
 1004ae0:	add    BYTE PTR fs:[rdx+0x0],ah
 1004ae4:	add    BYTE PTR cs:[rax+rax*1+0x62],ah
 1004ae9:	add    BYTE PTR [rdi+0x0],ch
 1004aec:	add    BYTE PTR cs:[rbx+0x0],dh
 1004af0:	jo     0x1004af2
 1004af2:	pop    rdi
 1004af3:	add    BYTE PTR [rbx+0x0],dh
 1004af6:	jno    0x1004af8
 1004af8:	ins    BYTE PTR es:[rdi],dx
 1004af9:	add    BYTE PTR [rax+rax*1+0x69],ah
 1004afd:	add    BYTE PTR [rcx+0x0],ah
 1004b00:	add    BYTE PTR [eip+0x32003000],ah        # 0x33007b07
 1004b07:	add    BYTE PTR [rax+rax*1+0x0],ah
 1004b0b:	add    BYTE PTR [rax],al
 1004b0d:	add    BYTE PTR [rax],al
 1004b0f:	add    BYTE PTR [rbx+0x0],dh
 1004b12:	jo     0x1004b14
 1004b14:	pop    rdi
 1004b15:	add    BYTE PTR [rax+rax*1+0x72],dh
 1004b19:	add    BYTE PTR [rcx+0x0],ah
 1004b1c:	movsxd eax,DWORD PTR [rax]
 1004b1e:	add    BYTE PTR gs:[rax],al
	...
 1004b2d:	add    BYTE PTR [rax],al
 1004b2f:	add    BYTE PTR [rdi],ch
 1004b31:	add    BYTE PTR [rbx+0x0],al
 1004b34:	add    BYTE PTR fs:[rbp+0x0],ah
 1004b38:	ins    BYTE PTR es:[rdi],dx
 1004b39:	add    BYTE PTR [rax],ah
 1004b3b:	add    BYTE PTR [rdx],ah
 1004b3d:	add    BYTE PTR [rip+0x25007300],ah        # 0x2600be43
 1004b43:	add    BYTE PTR [rbx+0x0],dh
 1004b46:	pop    rdi
 1004b47:	add    BYTE PTR [rip+0x5f007300],ah        # 0x6000be4d
 1004b4d:	add    BYTE PTR [rip+0x5f007300],ah        # 0x6000be53
 1004b53:	add    BYTE PTR [rip+0x2a007300],ah        # 0x2b00be59
 1004b59:	add    BYTE PTR [rsi],ch
 1004b5b:	add    BYTE PTR [rax+rax*1+0x52],dl
 1004b5f:	add    BYTE PTR [rbx+0x0],al
 1004b62:	and    al,BYTE PTR [rax]
 1004b64:	and    BYTE PTR [rax],al
 1004b66:	(bad)  
 1004b67:	add    BYTE PTR [rcx+0x0],dl
 1004b6a:	and    BYTE PTR [rax],al
 1004b6c:	add    BYTE PTR ds:[rdx],ah
 1004b6f:	add    BYTE PTR [rip+0x25007300],ah        # 0x2600be75
 1004b75:	add    BYTE PTR [rbx+0x0],dh
 1004b78:	and    eax,0x5f007300
 1004b7d:	add    BYTE PTR [rip+0x5f007300],ah        # 0x6000be83
 1004b83:	add    BYTE PTR [rip+0x5f007300],ah        # 0x6000be89
 1004b89:	add    BYTE PTR [rax+rax*1+0x45],al
 1004b8d:	add    BYTE PTR [rax+rax*1+0x2e],cl
 1004b91:	add    BYTE PTR [rax+rax*1+0x78],dh
 1004b95:	add    BYTE PTR [rax+rax*1+0x22],dh
 1004b99:	add    BYTE PTR [rax],ah
 1004b9b:	add    BYTE PTR [rdx],dh
 1004b9d:	add    BYTE PTR [rsi],bh
 1004b9f:	add    BYTE PTR [rsi],ah
 1004ba1:	add    BYTE PTR [rcx],dh
 1004ba3:	add    BYTE PTR [rax],al
 1004ba5:	add    BYTE PTR [rax],al
 1004ba7:	add    BYTE PTR [rbx+0x0],dh
 1004baa:	jo     0x1004bac
 1004bac:	pop    rdi
 1004bad:	add    BYTE PTR [rax+rax*1+0x72],dh
 1004bb1:	add    BYTE PTR [rcx+0x0],ah
 1004bb4:	movsxd eax,DWORD PTR [rax]
 1004bb6:	add    BYTE PTR gs:[rdi+0x0],bl
 1004bba:	(bad)  
 1004bbb:	add    BYTE PTR [rax+rax*1+0x6b],ch
	...
 1004bc7:	add    BYTE PTR [rbx+0x0],dl
 1004bca:	je     0x1004bcc
 1004bcc:	outs   dx,DWORD PTR ds:[rsi]
 1004bcd:	add    BYTE PTR [rax+0x0],dh
	...
 1004bd8:	je     0x1004bda
 1004bda:	jae    0x1004bdc
 1004bdc:	jno    0x1004bde
 1004bde:	ins    BYTE PTR es:[rdi],dx
 1004bdf:	add    BYTE PTR [rdx+0x0],ah
 1004be2:	ins    BYTE PTR es:[rdi],dx
 1004be3:	add    BYTE PTR [rbx+0x0],ch
 1004be6:	je     0x1004be8
 1004be8:	jb     0x1004bea
 1004bea:	(bad)  
 1004beb:	add    BYTE PTR [rbx+0x0],ah
 1004bee:	add    BYTE PTR gs:[rax],al
	...
 1004bfd:	add    BYTE PTR [rax],al
 1004bff:	add    BYTE PTR [rbp+0x0],al
 1004c02:	pop    rax
 1004c03:	add    BYTE PTR [rbp+0x0],al
 1004c06:	rex.XB add BYTE PTR [r8],spl
 1004c09:	add    BYTE PTR [rax+rax*1+0x65],dh
 1004c0d:	add    BYTE PTR [rbp+0x0],ch
 1004c10:	jo     0x1004c12
 1004c12:	add    BYTE PTR fs:[rdx+0x0],ah
 1004c16:	add    BYTE PTR cs:[rax+rax*1+0x62],ah
 1004c1b:	add    BYTE PTR [rdi+0x0],ch
 1004c1e:	add    BYTE PTR cs:[rbx+0x0],dh
 1004c22:	jo     0x1004c24
 1004c24:	pop    rdi
 1004c25:	add    BYTE PTR [rax+rax*1+0x72],dh
 1004c29:	add    BYTE PTR [rcx+0x0],ah
 1004c2c:	movsxd eax,DWORD PTR [rax]
 1004c2e:	add    BYTE PTR gs:[rip+0x32003000],ah        # 0x33007c35
 1004c35:	add    BYTE PTR [rax+rax*1+0x20],ah
 1004c39:	add    BYTE PTR [rdi],ah
 1004c3b:	add    BYTE PTR [rdi+0x0],cl
 1004c3e:	rex.RX add BYTE PTR [rsi+0x0],r8b
 1004c42:	(bad)  
 1004c43:	add    BYTE PTR [rax+rax*1],ch
 1004c46:	add    BYTE PTR [rcx+0x0],al
 1004c4a:	jo     0x1004c4c
 1004c4c:	jo     0x1004c4e
 1004c4e:	rex.WRX add BYTE PTR [rcx+0x0],r12b
 1004c52:	ins    DWORD PTR es:[rdi],dx
 1004c53:	add    BYTE PTR [rbp+0x0],ah
 1004c56:	cmp    eax,0x25002700
 1004c5b:	add    BYTE PTR [rbx+0x0],dh
 1004c5e:	(bad)  
 1004c5f:	add    BYTE PTR [rax+rax*1],ch
 1004c62:	add    BYTE PTR [rax+rax*1+0x72],dl
 1004c67:	add    BYTE PTR [rcx+0x0],ah
 1004c6a:	movsxd eax,DWORD PTR [rax]
 1004c6c:	add    BYTE PTR gs:[rsi+0x0],cl
 1004c70:	(bad)  
 1004c71:	add    BYTE PTR [rbp+0x0],ch
 1004c74:	add    BYTE PTR gs:[rip+0x25002700],bh        # 0x2600737b
 1004c7b:	add    BYTE PTR [rbx+0x0],dh
 1004c7e:	(bad)  
	...
 1004c87:	add    BYTE PTR [rax+rax*1+0x73],dh
 1004c8b:	add    BYTE PTR [rcx+0x0],dh
 1004c8e:	ins    BYTE PTR es:[rdi],dx
 1004c8f:	add    BYTE PTR [rax+rax*1+0x72],dh
 1004c93:	add    BYTE PTR [rcx+0x0],ah
 1004c96:	movsxd eax,DWORD PTR [rax]
 1004c98:	add    BYTE PTR gs:[rax],al
 1004c9b:	add    BYTE PTR [rax],al
 1004c9d:	add    BYTE PTR [rax],al
 1004c9f:	add    BYTE PTR [rax+rax*1+0x65],dh
 1004ca3:	add    BYTE PTR [rbp+0x0],ch
 1004ca6:	jo     0x1004ca8
 1004ca8:	add    BYTE PTR fs:[rdx+0x0],ah
 1004cac:	add    BYTE PTR cs:[rax+rax*1+0x62],ah
 1004cb1:	add    BYTE PTR [rdi+0x0],ch
 1004cb4:	add    BYTE PTR cs:[rbx+0x0],dh
 1004cb8:	jo     0x1004cba
 1004cba:	pop    rdi
 1004cbb:	add    BYTE PTR [rbx+0x0],dh
 1004cbe:	jno    0x1004cc0
 1004cc0:	ins    BYTE PTR es:[rdi],dx
 1004cc1:	add    BYTE PTR [rax+rax*1+0x69],ah
 1004cc5:	add    BYTE PTR [rcx+0x0],ah
 1004cc8:	add    BYTE PTR [edi+0x0],bl
 1004ccc:	movsxd eax,DWORD PTR [rax]
 1004cce:	ins    BYTE PTR es:[rdi],dx
 1004ccf:	add    BYTE PTR [rbp+0x0],ah
 1004cd2:	(bad)  
 1004cd3:	add    BYTE PTR [rsi+0x0],ch
 1004cd6:	jne    0x1004cd8
 1004cd8:	jo     0x1004cda
 1004cda:	and    eax,0x32003000
 1004cdf:	add    BYTE PTR [rax+rax*1+0x20],ah
 1004ce3:	add    BYTE PTR [rdi],ah
 1004ce5:	add    BYTE PTR [rip+0x27007300],ah        # 0x2800bfeb
 1004ceb:	add    BYTE PTR [rax],al
 1004ced:	add    BYTE PTR [rax],al
 1004cef:	add    BYTE PTR [rdx+0x0],dl
 1004cf2:	push   rbp
 1004cf3:	add    BYTE PTR [rsi+0x0],cl
 1004cf6:	pop    rdi
 1004cf7:	add    BYTE PTR [rbx+0x0],dh
 1004cfa:	jo     0x1004cfc
 1004cfc:	pop    rdi
 1004cfd:	add    BYTE PTR [rbx+0x0],dh
 1004d00:	jno    0x1004d02
 1004d02:	ins    BYTE PTR es:[rdi],dx
 1004d03:	add    BYTE PTR [rax+rax*1+0x69],ah
 1004d07:	add    BYTE PTR [rcx+0x0],ah
 1004d0a:	add    BYTE PTR [edi+0x0],bl
 1004d0e:	movsxd eax,DWORD PTR [rax]
 1004d10:	ins    BYTE PTR es:[rdi],dx
 1004d11:	add    BYTE PTR [rbp+0x0],ah
 1004d14:	(bad)  
 1004d15:	add    BYTE PTR [rsi+0x0],ch
 1004d18:	jne    0x1004d1a
 1004d1a:	jo     0x1004d1c
 1004d1c:	add    BYTE PTR [rax],al
 1004d1e:	add    BYTE PTR [rax],al
 1004d20:	rex.WR add BYTE PTR [rdi+0x0],r9b
 1004d24:	add    BYTE PTR [r8+r8*1+0x0],r11b
 1004d29:	add    BYTE PTR [rax],al
 1004d2b:	add    BYTE PTR [rax],al
 1004d2d:	add    BYTE PTR [rax],al
 1004d2f:	add    BYTE PTR [rdi],ch
 1004d31:	add    BYTE PTR [rbx+0x0],al
 1004d34:	ins    DWORD PTR es:[rdi],dx
 1004d35:	add    BYTE PTR [rdi+0x0],ch
 1004d38:	jbe    0x1004d3a
 1004d3a:	add    BYTE PTR gs:[rax],ah
 1004d3d:	add    BYTE PTR [rdi],ch
 1004d3f:	add    BYTE PTR [rcx+0x0],bl
 1004d42:	and    BYTE PTR [rax],al
 1004d44:	and    al,BYTE PTR [rax]
 1004d46:	and    eax,0x25007300
 1004d4b:	add    BYTE PTR [rbx+0x0],dh
 1004d4e:	pop    rdi
 1004d4f:	add    BYTE PTR [rip+0x5f007300],ah        # 0x6000c055
 1004d55:	add    BYTE PTR [rip+0x5f007300],ah        # 0x6000c05b
 1004d5b:	add    BYTE PTR [rip+0x2a007300],ah        # 0x2b00c061
 1004d61:	add    BYTE PTR [rsi],ch
 1004d63:	add    BYTE PTR [rax+rax*1+0x52],dl
 1004d67:	add    BYTE PTR [rbx+0x0],al
 1004d6a:	and    al,BYTE PTR [rax]
 1004d6c:	and    BYTE PTR [rax],al
 1004d6e:	and    al,BYTE PTR [rax]
 1004d70:	and    eax,0x22007300
 1004d75:	add    BYTE PTR [rax],ah
 1004d77:	add    BYTE PTR [rsi],bh
 1004d79:	add    BYTE PTR [rdx],ah
 1004d7b:	add    BYTE PTR [rip+0x25007300],ah        # 0x2600c081
 1004d81:	add    BYTE PTR [rbx+0x0],dh
 1004d84:	and    eax,0x5f007300
 1004d89:	add    BYTE PTR [rip+0x5f007300],ah        # 0x6000c08f
 1004d8f:	add    BYTE PTR [rip+0x5f007300],ah        # 0x6000c095
 1004d95:	add    BYTE PTR [rbp+0x0],cl
 1004d98:	rex.WRXB add BYTE PTR [r14+0x0],r10b
 1004d9c:	add    BYTE PTR [r14],r13b
 1004d9f:	add    BYTE PTR [rax+rax*1+0x78],dh
 1004da3:	add    BYTE PTR [rax+rax*1+0x22],dh
 1004da7:	add    BYTE PTR [rax],ah
 1004da9:	add    BYTE PTR [rdx],dh
 1004dab:	add    BYTE PTR [rsi],bh
 1004dad:	add    BYTE PTR [rsi],ah
 1004daf:	add    BYTE PTR [rcx],dh
 1004db1:	add    BYTE PTR [rax],al
 1004db3:	add    BYTE PTR [rbx+0x0],dh
 1004db6:	(bad)  
 1004db7:	add    BYTE PTR [rax],al
 1004db9:	add    BYTE PTR [rax],al
 1004dbb:	add    BYTE PTR [rax],ah
 1004dbd:	add    BYTE PTR [rax],al
 1004dbf:	add    BYTE PTR [rcx+0x0],ah
 1004dc2:	movsxd eax,DWORD PTR [rax]
 1004dc4:	movsxd eax,DWORD PTR [rax]
 1004dc6:	add    BYTE PTR gs:[rbx+0x0],dh
 1004dca:	jae    0x1004dcc
 1004dcc:	movsxd eax,DWORD PTR [rax]
 1004dce:	push   0x6b00
 1004dd3:	add    BYTE PTR [rax],al
 1004dd5:	add    BYTE PTR [rax],al
 1004dd7:	add    BYTE PTR [rbx+0x0],dl
 1004dda:	add    BYTE PTR [r8+rax*1+0x45],r9b
 1004ddf:	add    BYTE PTR [rbx+0x0],al
 1004de2:	push   rsp
 1004de3:	add    BYTE PTR [rax],ah
 1004de5:	add    BYTE PTR [rcx],dh
	...
 1004def:	add    BYTE PTR [rbx+0x0],dh
 1004df2:	jns    0x1004df4
 1004df4:	jae    0x1004df6
 1004df6:	(bad)  
 1004df7:	add    BYTE PTR [rax+rax*1+0x6d],ah
 1004dfb:	add    BYTE PTR [rcx+0x0],ch
 1004dfe:	outs   dx,BYTE PTR ds:[rsi]
 1004dff:	add    BYTE PTR [rbx+0x0],ah
 1004e02:	push   0x6b00
	...
 1004e0f:	add    BYTE PTR [rbp+0x0],al
 1004e12:	pop    rax
 1004e13:	add    BYTE PTR [rcx+0x0],cl
 1004e16:	push   rsp
 1004e17:	add    BYTE PTR [rax],ch
 1004e19:	add    BYTE PTR [rbx+0x0],dl
 1004e1c:	add    BYTE PTR [r8+rax*1+0x45],r9b
 1004e21:	add    BYTE PTR [rbx+0x0],al
 1004e24:	push   rsp
 1004e25:	add    BYTE PTR [rax],ah
 1004e27:	add    BYTE PTR [rbx+0x0],al
 1004e2a:	add    BYTE PTR [r11+0x0],dl
 1004e2e:	add    BYTE PTR [r8],r12b
 1004e31:	add    BYTE PTR [rcx+0x0],cl
 1004e34:	push   rbx
 1004e35:	add    BYTE PTR [rdi+0x0],bl
 1004e38:	push   rbx
 1004e39:	add    BYTE PTR [rdx+0x0],dl
 1004e3c:	push   rsi
 1004e3d:	add    BYTE PTR [rdx+0x0],dl
 1004e40:	rex.WRXB add BYTE PTR [r8+r8*1+0x45],r9b
 1004e45:	add    BYTE PTR [rbp+0x0],cl
 1004e48:	add    BYTE PTR [r13+0x0],r9b
 1004e4c:	rex.X add BYTE PTR [rbp+0x0],al
 1004e50:	push   rdx
 1004e51:	add    BYTE PTR [rax],ch
 1004e53:	add    BYTE PTR [rdi],ah
 1004e55:	add    BYTE PTR [rbx+0x0],dh
 1004e58:	jns    0x1004e5a
 1004e5a:	jae    0x1004e5c
 1004e5c:	(bad)  
 1004e5d:	add    BYTE PTR [rax+rax*1+0x6d],ah
 1004e61:	add    BYTE PTR [rcx+0x0],ch
 1004e64:	outs   dx,BYTE PTR ds:[rsi]
 1004e65:	add    BYTE PTR [rdi],ah
 1004e67:	add    BYTE PTR [rcx],ch
 1004e69:	add    BYTE PTR [rax],ah
 1004e6b:	add    BYTE PTR [rdi+0x0],dl
 1004e6e:	rex.W add BYTE PTR [rbp+0x0],al
 1004e72:	rex.WRX add BYTE PTR [rax],r12b
 1004e75:	add    BYTE PTR [rcx],dh
 1004e77:	add    BYTE PTR [rax],ah
 1004e79:	add    BYTE PTR [rax+rax*1+0x48],dl
 1004e7d:	add    BYTE PTR [rbp+0x0],al
 1004e80:	rex.WRX add BYTE PTR [rax],r12b
 1004e83:	add    BYTE PTR [rax],dh
 1004e85:	add    BYTE PTR [rax],ah
 1004e87:	add    BYTE PTR [rbp+0x0],al
 1004e8a:	rex.WR add BYTE PTR [rbx+0x0],r10b
 1004e8e:	add    BYTE PTR [r8],r12b
 1004e91:	add    BYTE PTR [rcx],dh
 1004e93:	add    BYTE PTR [rax],ah
 1004e95:	add    BYTE PTR [rbp+0x0],al
 1004e98:	rex.WRX add BYTE PTR [rax+r8*1+0x29],r8b
 1004e9d:	add    BYTE PTR [rax],al
 1004e9f:	add    BYTE PTR [rip+0x3a007300],ah        # 0x3b00c1a5
 1004ea5:	add    BYTE PTR [rax],ah
 1004ea7:	add    BYTE PTR [rip+0x7300],ah        # 0x100c1ad
 1004ead:	add    BYTE PTR [rax],al
 1004eaf:	add    BYTE PTR [rbx+0x0],ah
 1004eb2:	outs   dx,DWORD PTR ds:[rsi]
 1004eb3:	add    BYTE PTR [rax+0x0],dh
 1004eb6:	jns    0x1004eb8
 1004eb8:	and    BYTE PTR [rax],al
 1004eba:	(bad)  
 1004ebb:	add    BYTE PTR [rcx+0x0],bh
 1004ebe:	and    BYTE PTR [rax],al
	...
 1004ec8:	and    BYTE PTR [rax],al
 1004eca:	add    BYTE PTR ds:[rdx],ah
 1004ecd:	add    BYTE PTR [rip+0x75006f00],ah        # 0x7600bdd3
 1004ed3:	add    BYTE PTR [rax+rax*1+0x70],dh
 1004ed7:	add    BYTE PTR [rbp+0x0],dh
 1004eda:	je     0x1004edc
 1004edc:	pop    rdi
 1004edd:	add    BYTE PTR [rsi+0x0],ch
 1004ee0:	(bad)  
 1004ee1:	add    BYTE PTR [rbp+0x0],ch
 1004ee4:	add    BYTE PTR gs:[rip+0x54002e00],ah        # 0x55007ceb
 1004eeb:	add    BYTE PTR [rax+0x0],bl
 1004eee:	push   rsp
 1004eef:	add    BYTE PTR [rdx],ah
 1004ef1:	add    BYTE PTR [rax],al
 1004ef3:	add    BYTE PTR [rax],al
 1004ef5:	add    BYTE PTR [rax],al
 1004ef7:	add    BYTE PTR [rax+rax*1+0x79],dh
 1004efb:	add    BYTE PTR [rax+0x0],dh
 1004efe:	add    BYTE PTR gs:[rax],ah
 1004f01:	add    BYTE PTR [rax],al
 1004f03:	add    BYTE PTR [rax],al
 1004f05:	add    BYTE PTR [rax],al
 1004f07:	add    BYTE PTR [rax+rax*1+0x61],dh
 1004f0b:	add    BYTE PTR [rcx+0x0],ch
 1004f0e:	ins    BYTE PTR es:[rdi],dx
 1004f0f:	add    BYTE PTR [rax],ah
 1004f11:	add    BYTE PTR [rax],al
 1004f13:	add    BYTE PTR [rdx],ah
	...
 1004f1d:	add    BYTE PTR [rax],al
 1004f1f:	add    BYTE PTR [rdx+0x0],dl
 1004f22:	add    BYTE PTR [r15+0x0],r8b
 1004f26:	add    BYTE PTR [r8+rax*1+0x49],r8b
 1004f2b:	add    BYTE PTR [rax+rax*1+0x20],dl
 1004f2f:	add    BYTE PTR [rdi],ch
 1004f31:	add    BYTE PTR [rcx+0x0],ah
 1004f34:	and    BYTE PTR [rax],al
 1004f36:	(bad)  
 1004f37:	add    BYTE PTR [rbx+0x0],dh
 1004f3a:	and    BYTE PTR [rax],al
 1004f3c:	and    al,BYTE PTR [rax]
 1004f3e:	and    eax,0x75006f00
 1004f43:	add    BYTE PTR [rax+rax*1+0x70],dh
 1004f47:	add    BYTE PTR [rbp+0x0],dh
 1004f4a:	je     0x1004f4c
 1004f4c:	pop    rdi
 1004f4d:	add    BYTE PTR [rsi+0x0],ch
 1004f50:	(bad)  
 1004f51:	add    BYTE PTR [rbp+0x0],ch
 1004f54:	add    BYTE PTR gs:[rip+0x52002e00],ah        # 0x53007d5b
 1004f5b:	add    BYTE PTR [rbp+0x0],al
 1004f5e:	rex.RXB add BYTE PTR [r10],r12b
 1004f61:	add    BYTE PTR [rax],ah
 1004f63:	add    BYTE PTR [rdx],ah
 1004f65:	add    BYTE PTR [rax],al
 1004f67:	add    BYTE PTR [rip+0x6e006900],ah        # 0x6f00b86d
 1004f6d:	add    BYTE PTR [rbx+0x0],dh
 1004f70:	je     0x1004f72
 1004f72:	(bad)  
 1004f73:	add    BYTE PTR [rsi+0x0],ch
 1004f76:	movsxd eax,DWORD PTR [rax]
 1004f78:	add    BYTE PTR gs:[rip+0x0],ah        # 0x1004f7f
 1004f7f:	add    BYTE PTR [rip+0x65007300],ah        # 0x6600c285
 1004f85:	add    BYTE PTR [rdx+0x0],dh
 1004f88:	jbe    0x1004f8a
 1004f8a:	add    BYTE PTR gs:[rdx+0x0],dh
 1004f8e:	pop    rdi
 1004f8f:	add    BYTE PTR [rcx+0x0],ch
 1004f92:	outs   dx,BYTE PTR ds:[rsi]
 1004f93:	add    BYTE PTR [rbx+0x0],dh
 1004f96:	je     0x1004f98
 1004f98:	(bad)  
 1004f99:	add    BYTE PTR [rsi+0x0],ch
 1004f9c:	movsxd eax,DWORD PTR [rax]
 1004f9e:	add    BYTE PTR gs:[rip+0x0],ah        # 0x1004fa5
 1004fa5:	add    BYTE PTR [rax],al
 1004fa7:	add    BYTE PTR [rip+0x73007300],ah        # 0x7400c2ad
 1004fad:	add    BYTE PTR [rdx+0x0],dh
 1004fb0:	add    BYTE PTR gs:[rdi+0x0],ah
 1004fb4:	jb     0x1004fb6
 1004fb6:	outs   dx,DWORD PTR ds:[rsi]
 1004fb7:	add    BYTE PTR [rdi+0x0],ch
 1004fba:	je     0x1004fbc
 1004fbc:	and    eax,0x25000000
 1004fc1:	add    BYTE PTR [rbx+0x0],dh
 1004fc4:	jae    0x1004fc6
 1004fc6:	jo     0x1004fc8
 1004fc8:	imul   eax,DWORD PTR [rax],0x250064
 1004fce:	add    BYTE PTR [rax],al
 1004fd0:	and    eax,0x73007300
 1004fd5:	add    BYTE PTR [rax+0x0],dh
 1004fd8:	(bad)  
 1004fd9:	add    BYTE PTR [rax+rax*1+0x68],dh
 1004fdd:	add    BYTE PTR [rip+0x0],ah        # 0x1004fe3
 1004fe3:	add    BYTE PTR [rax],al
 1004fe5:	add    BYTE PTR [rax],al
 1004fe7:	add    BYTE PTR [rip+0x73007200],ah        # 0x7400c1ed
 1004fed:	add    BYTE PTR [rcx+0x0],ch
 1004ff0:	outs   dx,BYTE PTR ds:[rsi]
 1004ff1:	add    BYTE PTR [rbx+0x0],dh
 1004ff4:	je     0x1004ff6
 1004ff6:	(bad)  
 1004ff7:	add    BYTE PTR [rsi+0x0],ch
 1004ffa:	movsxd eax,DWORD PTR [rax]
 1004ffc:	add    BYTE PTR gs:[rip+0x0],ah        # 0x1005003
 1005003:	add    BYTE PTR [rax],al
 1005005:	add    BYTE PTR [rax],al
 1005007:	add    BYTE PTR [rip+0x6c006f00],ah        # 0x6d00bf0d
 100500d:	add    BYTE PTR [rcx+0x0],ah
 1005010:	jo     0x1005012
 1005012:	imul   eax,DWORD PTR [rax],0x73006e
 1005018:	je     0x100501a
 100501a:	(bad)  
 100501b:	add    BYTE PTR [rsi+0x0],ch
 100501e:	movsxd eax,DWORD PTR [rax]
 1005020:	add    BYTE PTR gs:[rip+0x0],ah        # 0x1005027
 1005027:	add    BYTE PTR [rsi],ch
 1005029:	add    BYTE PTR [rax+0x0],cl
 100502c:	rex.WB add BYTE PTR [r14+0x0],dl
	...
 1005038:	movsxd eax,DWORD PTR [rax]
 100503a:	jae    0x100503c
 100503c:	movsxd eax,DWORD PTR [rax]
 100503e:	jb     0x1005040
 1005040:	imul   eax,DWORD PTR [rax],0x740070
 1005046:	and    BYTE PTR [rax],al
	...
 1005050:	push   rbx
 1005051:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1005055:	add    BYTE PTR [rax+0x0],dh
 1005058:	pop    rdi
 1005059:	add    BYTE PTR [rbp+0x0],ah
 100505c:	js     0x100505e
 100505e:	imul   eax,DWORD PTR [rax],0x740073
 1005064:	pop    rdi
 1005065:	add    BYTE PTR [rbx+0x0],dh
 1005068:	jo     0x100506a
 100506a:	pop    rdi
 100506b:	add    BYTE PTR [rax+rax*1+0x72],dh
 100506f:	add    BYTE PTR [rcx+0x0],ah
 1005072:	movsxd eax,DWORD PTR [rax]
 1005074:	add    BYTE PTR gs:[rax],al
 1005077:	add    BYTE PTR [rbx+0x0],dh
 100507a:	jo     0x100507c
 100507c:	pop    rdi
 100507d:	add    BYTE PTR [rax+rax*1+0x72],dh
 1005081:	add    BYTE PTR [rcx+0x0],ah
 1005084:	movsxd eax,DWORD PTR [rax]
 1005086:	add    BYTE PTR gs:[rip+0x30006400],ah        # 0x3100b48d
 100508d:	add    BYTE PTR [rsi],ch
 100508f:	add    BYTE PTR [rbx+0x0],dh
 1005092:	jno    0x1005094
 1005094:	ins    BYTE PTR es:[rdi],dx
 1005095:	add    BYTE PTR [rax],al
 1005097:	add    BYTE PTR [rax+0x0],al
 100509a:	ins    DWORD PTR es:[rdi],dx
 100509b:	add    BYTE PTR [rcx+0x0],ah
 100509e:	js     0x10050a0
 10050a0:	data16 add BYTE PTR [rcx+0x0],ch
 10050a4:	ins    BYTE PTR es:[rdi],dx
 10050a5:	add    BYTE PTR [rbp+0x0],ah
 10050a8:	jae    0x10050aa
 10050aa:	imul   eax,DWORD PTR [rax],0x65007a
 10050b0:	cmp    eax,0x31002d00
	...
 10050bd:	add    BYTE PTR [rax],al
 10050bf:	add    BYTE PTR [rbp+0x0],al
 10050c2:	pop    rax
 10050c3:	add    BYTE PTR [rbp+0x0],al
 10050c6:	rex.XB add BYTE PTR [r8],spl
 10050c9:	add    BYTE PTR [rax+rax*1+0x65],dh
 10050cd:	add    BYTE PTR [rbp+0x0],ch
 10050d0:	jo     0x10050d2
 10050d2:	add    BYTE PTR fs:[rdx+0x0],ah
 10050d6:	add    BYTE PTR cs:[rax+rax*1+0x62],ah
 10050db:	add    BYTE PTR [rdi+0x0],ch
 10050de:	add    BYTE PTR cs:[rbx+0x0],dh
 10050e2:	jo     0x10050e4
 10050e4:	pop    rdi
 10050e5:	add    BYTE PTR [rbx+0x0],ah
 10050e8:	outs   dx,DWORD PTR ds:[rsi]
 10050e9:	add    BYTE PTR [rax+rax*1+0x65],ah
 10050ed:	add    BYTE PTR [rdi+0x0],bl
 10050f0:	jb     0x10050f2
 10050f2:	jne    0x10050f4
 10050f4:	outs   dx,BYTE PTR ds:[rsi]
 10050f5:	add    BYTE PTR [rsi+0x0],ch
 10050f8:	add    BYTE PTR gs:[rdx+0x0],dh
 10050fc:	and    eax,0x32003000
 1005101:	add    BYTE PTR [rax+rax*1+0x20],ah
 1005105:	add    BYTE PTR [rax+0x0],al
 1005108:	push   rbx
 1005109:	add    BYTE PTR [rax+rax*1+0x61],dh
 100510d:	add    BYTE PTR [rdx+0x0],dh
 1005110:	je     0x1005112
 1005112:	rex.XB add BYTE PTR [r13+0x0],bpl
 1005116:	add    BYTE PTR fs:[rip+0x27004e00],bh        # 0x28009f1d
 100511d:	add    BYTE PTR [rbp+0x0],al
 1005120:	pop    rax
 1005121:	add    BYTE PTR [rbp+0x0],al
 1005124:	rex.XB add BYTE PTR [r8],spl
 1005127:	add    BYTE PTR [rax+rax*1+0x65],dh
 100512b:	add    BYTE PTR [rbp+0x0],ch
 100512e:	jo     0x1005130
 1005130:	add    BYTE PTR fs:[rdx+0x0],ah
 1005134:	add    BYTE PTR cs:[rax+rax*1+0x62],ah
 1005139:	add    BYTE PTR [rdi+0x0],ch
 100513c:	add    BYTE PTR cs:[rip+0x25007300],ah        # 0x2600c443
 1005143:	add    BYTE PTR [rax],dh
 1005145:	add    BYTE PTR [rdx],dh
 1005147:	add    BYTE PTR [rax+rax*1+0x20],ah
 100514b:	add    BYTE PTR [rdi],ah
 100514d:	add    BYTE PTR [rdi],ah
 100514f:	add    BYTE PTR [rdi+0x0],cl
 1005152:	rex.WRX add BYTE PTR [rdi],r12b
 1005155:	add    BYTE PTR [rdi],ah
 1005157:	add    BYTE PTR [rax+rax*1],ch
 100515a:	and    BYTE PTR [rax],al
 100515c:	add    BYTE PTR [rbp+0x0],al
 1005160:	jbe    0x1005162
 1005162:	add    BYTE PTR gs:[rsi+0x0],ch
 1005166:	je     0x1005168
 1005168:	jae    0x100516a
 100516a:	cmp    eax,0x27002700
 100516f:	add    BYTE PTR [rip+0x27007300],ah        # 0x2800c475
 1005175:	add    BYTE PTR [rdi],ah
 1005177:	add    BYTE PTR [rax+rax*1],ch
 100517a:	and    BYTE PTR [rax],al
 100517c:	add    BYTE PTR [rcx+0x0],al
 1005180:	jo     0x1005182
 1005182:	jo     0x1005184
 1005184:	rex.WRX add BYTE PTR [rcx+0x0],r12b
 1005188:	ins    DWORD PTR es:[rdi],dx
 1005189:	add    BYTE PTR [rbp+0x0],ah
 100518c:	cmp    eax,0x27002700
 1005191:	add    BYTE PTR [rip+0x27007300],ah        # 0x2800c497
 1005197:	add    BYTE PTR [rdi],ah
 1005199:	add    BYTE PTR [rdi],ah
 100519b:	add    BYTE PTR [rax+rax*1],ch
 100519e:	add    BYTE PTR [rcx+0x0],cl
 10051a2:	je     0x10051a4
 10051a4:	add    BYTE PTR gs:[rdx+0x0],dh
 10051a8:	(bad)  
 10051a9:	add    BYTE PTR [rax+rax*1+0x69],dh
 10051ad:	add    BYTE PTR [rdi+0x0],ch
 10051b0:	outs   dx,BYTE PTR ds:[rsi]
 10051b1:	add    BYTE PTR [rax+rax*1+0x69],dl
 10051b5:	add    BYTE PTR [rbp+0x0],ch
 10051b8:	add    BYTE PTR gs:[rip+0x25002700],bh        # 0x260078bf
 10051bf:	add    BYTE PTR [rax+rax*1+0x3a],ah
 10051c3:	add    BYTE PTR [rip+0x3a006400],ah        # 0x3b00b5c9
 10051c9:	add    BYTE PTR [rax],dh
 10051cb:	add    BYTE PTR [rax],dh
 10051cd:	add    BYTE PTR [rdi],ah
 10051cf:	add    BYTE PTR [rax+rax*1],ch
 10051d2:	add    BYTE PTR [rbx+0x0],dl
 10051d6:	je     0x10051d8
 10051d8:	outs   dx,DWORD PTR ds:[rsi]
 10051d9:	add    BYTE PTR [rax+0x0],dh
 10051dc:	rex.XB add BYTE PTR [r13+0x0],bpl
 10051e0:	add    BYTE PTR fs:[rip+0x27004e00],bh        # 0x28009fe7
 10051e7:	add    BYTE PTR [rbp+0x0],al
 10051ea:	pop    rax
 10051eb:	add    BYTE PTR [rbp+0x0],al
 10051ee:	rex.XB add BYTE PTR [r8],spl
 10051f1:	add    BYTE PTR [rbx+0x0],dh
 10051f4:	jo     0x10051f6
 10051f6:	pop    rdi
 10051f7:	add    BYTE PTR [rax+rax*1+0x72],dh
 10051fb:	add    BYTE PTR [rcx+0x0],ah
 10051fe:	movsxd eax,DWORD PTR [rax]
 1005200:	add    BYTE PTR gs:[rip+0x32003000],ah        # 0x33008207
 1005207:	add    BYTE PTR [rax+rax*1+0x20],ah
 100520b:	add    BYTE PTR [rdi],ah
 100520d:	add    BYTE PTR [rdi],ah
 100520f:	add    BYTE PTR [rdi+0x0],cl
 1005212:	rex.RX add BYTE PTR [rsi+0x0],r8b
 1005216:	(bad)  
 1005217:	add    BYTE PTR [rdi],ah
 1005219:	add    BYTE PTR [rdi],ah
 100521b:	add    BYTE PTR [rax+rax*1],ch
 100521e:	add    BYTE PTR [rdi+0x0],cl
 1005222:	jne    0x1005224
 1005224:	je     0x1005226
 1005226:	jo     0x1005228
 1005228:	jne    0x100522a
 100522a:	je     0x100522c
 100522c:	add    BYTE PTR [rcx+0x0],r13b
 1005230:	jb     0x1005232
 1005232:	cmp    eax,0x25002700
 1005237:	add    BYTE PTR [rbx+0x0],dh
 100523a:	(bad)  
 100523b:	add    BYTE PTR [rax+rax*1],ch
 100523e:	add    BYTE PTR [rdi+0x0],cl
 1005242:	jne    0x1005244
 1005244:	je     0x1005246
 1005246:	jo     0x1005248
 1005248:	jne    0x100524a
 100524a:	je     0x100524c
 100524c:	rex.RX add BYTE PTR [rcx+0x0],r13b
 1005250:	ins    BYTE PTR es:[rdi],dx
 1005251:	add    BYTE PTR [rbp+0x0],ah
 1005254:	rex.WRB add BYTE PTR [r9+0x0],r12b
 1005258:	jae    0x100525a
 100525a:	imul   eax,DWORD PTR [rax],0x3d
 100525d:	add    BYTE PTR [rdi],ah
 100525f:	add    BYTE PTR [rip+0x5f007300],ah        # 0x6000c565
 1005265:	add    BYTE PTR [rip+0x5f007300],ah        # 0x6000c56b
 100526b:	add    BYTE PTR [rip+0x5f007300],ah        # 0x6000c571
 1005271:	add    BYTE PTR [rip+0x2a007300],ah        # 0x2b00c577
 1005277:	add    BYTE PTR [rsi],ch
 1005279:	add    BYTE PTR [rax+rax*1+0x72],dh
 100527d:	add    BYTE PTR [rbx+0x0],ah
 1005280:	(bad)  
 1005281:	add    BYTE PTR [rax+rax*1],ch
 1005284:	and    BYTE PTR [rax],al
 1005286:	add    BYTE PTR [rsi+0x0],cl
 100528a:	jne    0x100528c
 100528c:	ins    DWORD PTR es:[rdi],dx
 100528d:	add    BYTE PTR [rsi+0x0],al
 1005290:	imul   eax,DWORD PTR [rax],0x65006c
 1005296:	jae    0x1005298
 1005298:	cmp    eax,0x36003100
 100529d:	add    BYTE PTR [rax+rax*1],ch
 10052a0:	add    BYTE PTR [rbx+0x0],dl
 10052a4:	je     0x10052a6
 10052a6:	outs   dx,DWORD PTR ds:[rsi]
 10052a7:	add    BYTE PTR [rax+0x0],dh
 10052aa:	rex.XB add BYTE PTR [r15+0x0],bpl
 10052ae:	outs   dx,BYTE PTR ds:[rsi]
 10052af:	add    BYTE PTR [rax+rax*1+0x69],ah
 10052b3:	add    BYTE PTR [rax+rax*1+0x69],dh
 10052b7:	add    BYTE PTR [rdi+0x0],ch
 10052ba:	outs   dx,BYTE PTR ds:[rsi]
 10052bb:	add    BYTE PTR [rip+0x31002700],bh        # 0x320079c1
 10052c1:	add    BYTE PTR [rip+0x27003000],bh        # 0x280082c7
	...
 10052cf:	add    BYTE PTR [rbp+0x0],al
 10052d2:	pop    rax
 10052d3:	add    BYTE PTR [rbp+0x0],al
 10052d6:	rex.XB add BYTE PTR [r8],spl
 10052d9:	add    BYTE PTR [rax+rax*1+0x65],dh
 10052dd:	add    BYTE PTR [rbp+0x0],ch
 10052e0:	jo     0x10052e2
 10052e2:	add    BYTE PTR fs:[rdx+0x0],ah
 10052e6:	add    BYTE PTR cs:[rax+rax*1+0x62],ah
 10052eb:	add    BYTE PTR [rdi+0x0],ch
 10052ee:	add    BYTE PTR cs:[rip+0x25007300],ah        # 0x2600c5f5
 10052f5:	add    BYTE PTR [rax],dh
 10052f7:	add    BYTE PTR [rdx],dh
 10052f9:	add    BYTE PTR [rax+rax*1+0x20],ah
 10052fd:	add    BYTE PTR [rdi],ah
 10052ff:	add    BYTE PTR [rdi+0x0],cl
 1005302:	rex.WRX add BYTE PTR [rdi],r12b
 1005305:	add    BYTE PTR [rax+rax*1],ch
 1005308:	and    BYTE PTR [rax],al
 100530a:	add    BYTE PTR [rbp+0x0],al
 100530e:	jbe    0x1005310
 1005310:	add    BYTE PTR gs:[rsi+0x0],ch
 1005314:	je     0x1005316
 1005316:	jae    0x1005318
 1005318:	cmp    eax,0x25002700
 100531d:	add    BYTE PTR [rbx+0x0],dh
 1005320:	(bad)  
 1005321:	add    BYTE PTR [rax+rax*1],ch
 1005324:	add    BYTE PTR [rcx+0x0],al
 1005328:	jo     0x100532a
 100532a:	jo     0x100532c
 100532c:	rex.WRX add BYTE PTR [rcx+0x0],r12b
 1005330:	ins    DWORD PTR es:[rdi],dx
 1005331:	add    BYTE PTR [rbp+0x0],ah
 1005334:	cmp    eax,0x25002700
 1005339:	add    BYTE PTR [rbx+0x0],dh
 100533c:	(bad)  
 100533d:	add    BYTE PTR [rax+rax*1],ch
 1005340:	add    BYTE PTR [rsi+0x0],al
 1005344:	imul   eax,DWORD PTR [rax],0x65006c
 100534a:	rex.WRX add BYTE PTR [rcx+0x0],r12b
 100534e:	ins    DWORD PTR es:[rdi],dx
 100534f:	add    BYTE PTR [rbp+0x0],ah
 1005352:	cmp    eax,0x25002700
 1005357:	add    BYTE PTR [rbx+0x0],dh
 100535a:	and    eax,0x5f007300
 100535f:	add    BYTE PTR [rip+0x5f007300],ah        # 0x6000c665
 1005365:	add    BYTE PTR [rip+0x5f007300],ah        # 0x6000c66b
 100536b:	add    BYTE PTR [rip+0x27007300],ah        # 0x2800c671
 1005371:	add    BYTE PTR [rax+rax*1],ch
 1005374:	and    eax,0x7300
 1005379:	add    BYTE PTR [rax],al
 100537b:	add    BYTE PTR [rax],al
 100537d:	add    BYTE PTR [rax],al
 100537f:	add    BYTE PTR [rdx+0x0],dl
 1005382:	jne    0x1005384
 1005384:	outs   dx,BYTE PTR ds:[rsi]
 1005385:	add    BYTE PTR [rdi+0x0],bl
 1005388:	add    BYTE PTR [rax],al
 100538a:	add    BYTE PTR [rax],al
 100538c:	sub    DWORD PTR [rax],eax
 100538e:	add    BYTE PTR [rax],al
 1005390:	sub    BYTE PTR [rax],al
 1005392:	add    BYTE PTR [rax],al
 1005394:	add    BYTE PTR [rax],al
 1005396:	add    BYTE PTR [rax],al
 1005398:	push   rbx
 1005399:	add    BYTE PTR [rcx+0x0],dl
 100539c:	rex.WR add BYTE PTR [rax],r12b
 100539f:	add    BYTE PTR [rbx+0x0],dl
 10053a2:	add    BYTE PTR gs:[rdx+0x0],dh
 10053a6:	jbe    0x10053a8
 10053a8:	add    BYTE PTR gs:[rdx+0x0],dh
 10053ac:	add    BYTE PTR [rax],al
 10053ae:	add    BYTE PTR [rax],al
 10053b0:	and    al,BYTE PTR [rax]
 10053b2:	and    eax,0x38003000
 10053b7:	add    BYTE PTR [rax+rax*1+0x22],ah
 10053bb:	add    BYTE PTR [rip+0x25002200],bh        # 0x260075c1
 10053c1:	add    BYTE PTR [rbx+0x0],dh
 10053c4:	and    al,BYTE PTR [rax]
 10053c6:	or     eax,0xa00
 10053cb:	add    BYTE PTR [rax],al
 10053cd:	add    BYTE PTR [rax],al
 10053cf:	add    BYTE PTR [rbx+0x0],al
 10053d2:	push   0x63006500
 10053d7:	add    BYTE PTR [rbx+0x0],ch
 10053da:	push   rax
 10053db:	add    BYTE PTR [rdi+0x0],ch
 10053de:	imul   eax,DWORD PTR [rax],0x74006e
 10053e4:	jae    0x10053e6
 10053e6:	add    BYTE PTR [rax],al
 10053e8:	and    eax,0x25007300
 10053ed:	add    BYTE PTR [rbx+0x0],dh
 10053f0:	pop    rdi
 10053f1:	add    BYTE PTR [rip+0x5f007300],ah        # 0x6000c6f7
 10053f7:	add    BYTE PTR [rip+0x25007300],ah        # 0x2600c6fd
 10053fd:	add    BYTE PTR [rbx+0x0],dh
	...
 1005410:	add    BYTE PTR gs:[rax+0x0],bh
 1005414:	add    BYTE PTR gs:[rbx+0x0],ah
 1005418:	and    BYTE PTR [rax],al
 100541a:	je     0x100541c
 100541c:	add    BYTE PTR gs:[rbp+0x0],ch
 1005420:	jo     0x1005422
 1005422:	add    BYTE PTR fs:[rdx+0x0],ah
 1005426:	add    BYTE PTR cs:[rax+rax*1+0x62],ah
 100542b:	add    BYTE PTR [rdi+0x0],ch
 100542e:	add    BYTE PTR cs:[rbx+0x0],dh
 1005432:	jo     0x1005434
 1005434:	pop    rdi
 1005435:	add    BYTE PTR [rbx+0x0],dh
 1005438:	add    BYTE PTR gs:[rax+rax*1+0x5f],dh
 100543d:	add    BYTE PTR [rdx+0x0],ah
 1005440:	ins    BYTE PTR es:[rdi],dx
 1005441:	add    BYTE PTR [rbx+0x0],ch
 1005444:	pop    rdi
 1005445:	add    BYTE PTR [rax+rax*1+0x68],dh
 1005449:	add    BYTE PTR [rdx+0x0],dh
 100544c:	add    BYTE PTR gs:[rbx+0x0],dh
 1005450:	push   0x6c006f00
 1005455:	add    BYTE PTR [rax+rax*1+0x25],ah
 1005459:	add    BYTE PTR [rax],dh
 100545b:	add    BYTE PTR [rdx],dh
 100545d:	add    BYTE PTR [rax+rax*1+0x20],ah
 1005461:	add    BYTE PTR [rip+0x6400],ah        # 0x100b867
 1005467:	add    BYTE PTR [rdx+0x0],al
 100546a:	ins    BYTE PTR es:[rdi],dx
 100546b:	add    BYTE PTR [rdi+0x0],ch
 100546e:	movsxd eax,DWORD PTR [rax]
 1005470:	imul   eax,DWORD PTR [rax],0x65
 1005473:	add    BYTE PTR [rdx+0x0],dh
 1005476:	add    BYTE PTR [rax],al
 1005478:	movsxd eax,DWORD PTR [rax]
 100547a:	push   0x5f006b00
 100547f:	add    BYTE PTR [rdx+0x0],ah
 1005482:	ins    BYTE PTR es:[rdi],dx
 1005483:	add    BYTE PTR [rdi+0x0],ch
 1005486:	movsxd eax,DWORD PTR [rax]
 1005488:	imul   eax,DWORD PTR [rax],0x5f
 100548b:	add    BYTE PTR [rax+0x0],dh
 100548e:	jb     0x1005490
 1005490:	outs   dx,DWORD PTR ds:[rsi]
 1005491:	add    BYTE PTR [rbx+0x0],ah
 1005494:	add    BYTE PTR [rax],al
 1005496:	add    BYTE PTR [rax],al
 1005498:	push   rbx
 1005499:	add    BYTE PTR [rax+rax*1+0x6f],dh
 100549d:	add    BYTE PTR [rax+0x0],dh
 10054a0:	pop    rdi
 10054a1:	add    BYTE PTR [rbp+0x0],ah
 10054a4:	js     0x10054a6
 10054a6:	imul   eax,DWORD PTR [rax],0x740073
 10054ac:	pop    rdi
 10054ad:	add    BYTE PTR [rbx+0x0],dh
 10054b0:	jo     0x10054b2
 10054b2:	pop    rdi
 10054b3:	add    BYTE PTR [rdx+0x0],ah
 10054b6:	ins    BYTE PTR es:[rdi],dx
 10054b7:	add    BYTE PTR [rbx+0x0],ch
 10054ba:	pop    rdi
 10054bb:	add    BYTE PTR [rax+rax*1+0x72],dh
 10054bf:	add    BYTE PTR [rcx+0x0],ah
 10054c2:	movsxd eax,DWORD PTR [rax]
 10054c4:	add    BYTE PTR gs:[rax],al
	...
 10054cf:	add    BYTE PTR [rbp+0x0],al
 10054d2:	pop    rax
 10054d3:	add    BYTE PTR [rbp+0x0],al
 10054d6:	rex.XB add BYTE PTR [r8],spl
 10054d9:	add    BYTE PTR [rax+rax*1+0x65],dh
 10054dd:	add    BYTE PTR [rbp+0x0],ch
 10054e0:	jo     0x10054e2
 10054e2:	add    BYTE PTR fs:[rdx+0x0],ah
 10054e6:	add    BYTE PTR cs:[rax+rax*1+0x62],ah
 10054eb:	add    BYTE PTR [rdi+0x0],ch
 10054ee:	add    BYTE PTR cs:[rip+0x25007300],ah        # 0x2600c7f5
 10054f5:	add    BYTE PTR [rax],dh
 10054f7:	add    BYTE PTR [rdx],dh
 10054f9:	add    BYTE PTR [rax+rax*1+0x20],ah
 10054fd:	add    BYTE PTR [rdi],ah
 10054ff:	add    BYTE PTR [rdi+0x0],cl
 1005502:	rex.WRX add BYTE PTR [rdi],r12b
 1005505:	add    BYTE PTR [rax+rax*1],ch
 1005508:	and    BYTE PTR [rax],al
 100550a:	add    BYTE PTR [rbp+0x0],al
 100550e:	jbe    0x1005510
 1005510:	add    BYTE PTR gs:[rsi+0x0],ch
 1005514:	je     0x1005516
 1005516:	jae    0x1005518
 1005518:	cmp    eax,0x31002700
 100551d:	add    BYTE PTR [rbx],dh
 100551f:	add    BYTE PTR [rdi],dh
 1005521:	add    BYTE PTR [rdi],ah
 1005523:	add    BYTE PTR [rax+rax*1],ch
 1005526:	add    BYTE PTR [rcx+0x0],al
 100552a:	jo     0x100552c
 100552c:	jo     0x100552e
 100552e:	rex.WRX add BYTE PTR [rcx+0x0],r12b
 1005532:	ins    DWORD PTR es:[rdi],dx
 1005533:	add    BYTE PTR [rbp+0x0],ah
 1005536:	cmp    eax,0x25002700
 100553b:	add    BYTE PTR [rbx+0x0],dh
 100553e:	(bad)  
 100553f:	add    BYTE PTR [rax+rax*1],ch
 1005542:	add    BYTE PTR [rax+rax*1+0x72],dl
 1005547:	add    BYTE PTR [rcx+0x0],ah
 100554a:	movsxd eax,DWORD PTR [rax]
 100554c:	add    BYTE PTR gs:[rsi+0x0],cl
 1005550:	(bad)  
 1005551:	add    BYTE PTR [rbp+0x0],ch
 1005554:	add    BYTE PTR gs:[rip+0x74002700],bh        # 0x75007c5b
 100555b:	add    BYTE PTR [rbx+0x0],dh
 100555e:	jno    0x1005560
 1005560:	ins    BYTE PTR es:[rdi],dx
 1005561:	add    BYTE PTR [rdx+0x0],ah
 1005564:	ins    BYTE PTR es:[rdi],dx
 1005565:	add    BYTE PTR [rbx+0x0],ch
 1005568:	je     0x100556a
 100556a:	jb     0x100556c
 100556c:	(bad)  
 100556d:	add    BYTE PTR [rbx+0x0],ah
 1005570:	add    BYTE PTR gs:[rdi],ah
 1005573:	add    BYTE PTR [rax+rax*1],ch
 1005576:	add    BYTE PTR [rsi+0x0],al
 100557a:	imul   eax,DWORD PTR [rax],0x65006c
 1005580:	rex.WRX add BYTE PTR [rcx+0x0],r12b
 1005584:	ins    DWORD PTR es:[rdi],dx
 1005585:	add    BYTE PTR [rbp+0x0],ah
 1005588:	cmp    eax,0x25002700
 100558d:	add    BYTE PTR [rbx+0x0],dh
 1005590:	and    eax,0x5f007300
 1005595:	add    BYTE PTR [rip+0x5f007300],ah        # 0x6000c89b
 100559b:	add    BYTE PTR [rip+0x5f007300],ah        # 0x6000c8a1
 10055a1:	add    BYTE PTR [rip+0x27007300],ah        # 0x2800c8a7
 10055a7:	add    BYTE PTR [rax+rax*1],ch
 10055aa:	and    eax,0x7300
 10055af:	add    BYTE PTR [rbp+0x0],al
 10055b2:	pop    rax
 10055b3:	add    BYTE PTR [rbp+0x0],al
 10055b6:	rex.XB add BYTE PTR [r8],spl
 10055b9:	add    BYTE PTR [rax+rax*1+0x65],dh
 10055bd:	add    BYTE PTR [rbp+0x0],ch
 10055c0:	jo     0x10055c2
 10055c2:	add    BYTE PTR fs:[rdx+0x0],ah
 10055c6:	add    BYTE PTR cs:[rax+rax*1+0x62],ah
 10055cb:	add    BYTE PTR [rdi+0x0],ch
 10055ce:	add    BYTE PTR cs:[rbx+0x0],dh
 10055d2:	jo     0x10055d4
 10055d4:	pop    rdi
 10055d5:	add    BYTE PTR [rbx+0x0],ah
 10055d8:	outs   dx,DWORD PTR ds:[rsi]
 10055d9:	add    BYTE PTR [rax+rax*1+0x65],ah
 10055dd:	add    BYTE PTR [rdi+0x0],bl
 10055e0:	jb     0x10055e2
 10055e2:	jne    0x10055e4
 10055e4:	outs   dx,BYTE PTR ds:[rsi]
 10055e5:	add    BYTE PTR [rsi+0x0],ch
 10055e8:	add    BYTE PTR gs:[rdx+0x0],dh
 10055ec:	and    eax,0x32003000
 10055f1:	add    BYTE PTR [rax+rax*1+0x20],ah
 10055f5:	add    BYTE PTR [rax+0x0],al
 10055f8:	push   rbx
 10055f9:	add    BYTE PTR [rax+rax*1+0x61],dh
 10055fd:	add    BYTE PTR [rdx+0x0],dh
 1005600:	je     0x1005602
 1005602:	rex.XB add BYTE PTR [r13+0x0],bpl
 1005606:	add    BYTE PTR fs:[rip+0x27004e00],bh        # 0x2800a40d
 100560d:	add    BYTE PTR [rbp+0x0],al
 1005610:	pop    rax
 1005611:	add    BYTE PTR [rbp+0x0],al
 1005614:	rex.XB add BYTE PTR [r8],spl
 1005617:	add    BYTE PTR [rax+rax*1+0x65],dh
 100561b:	add    BYTE PTR [rbp+0x0],ch
 100561e:	jo     0x1005620
 1005620:	add    BYTE PTR fs:[rdx+0x0],ah
 1005624:	add    BYTE PTR cs:[rax+rax*1+0x62],ah
 1005629:	add    BYTE PTR [rdi+0x0],ch
 100562c:	add    BYTE PTR cs:[rbx+0x0],dh
 1005630:	jo     0x1005632
 1005632:	pop    rdi
 1005633:	add    BYTE PTR [rdx+0x0],ah
 1005636:	ins    BYTE PTR es:[rdi],dx
 1005637:	add    BYTE PTR [rdi+0x0],ch
 100563a:	movsxd eax,DWORD PTR [rax]
 100563c:	imul   eax,DWORD PTR [rax],0x65
 100563f:	add    BYTE PTR [rdx+0x0],dh
 1005642:	pop    rdi
 1005643:	add    BYTE PTR [rax+0x0],dh
 1005646:	jae    0x1005648
 1005648:	jae    0x100564a
 100564a:	and    eax,0x32003000
 100564f:	add    BYTE PTR [rax+rax*1+0x20],ah
 1005653:	add    BYTE PTR [rip+0x2c007300],ah        # 0x2d00c959
 1005659:	add    BYTE PTR [rax],ah
 100565b:	add    BYTE PTR [rax+0x0],al
 100565e:	(bad)  
 100565f:	add    BYTE PTR [rax+0x0],dh
 1005662:	jo     0x1005664
 1005664:	outs   dx,BYTE PTR ds:[rsi]
 1005665:	add    BYTE PTR [rcx+0x0],ah
 1005668:	ins    DWORD PTR es:[rdi],dx
 1005669:	add    BYTE PTR [rbp+0x0],ah
 100566c:	cmp    eax,0x27002700
 1005671:	add    BYTE PTR [rip+0x27007300],ah        # 0x2800c977
 1005677:	add    BYTE PTR [rdi],ah
 1005679:	add    BYTE PTR [rdi],ah
 100567b:	add    BYTE PTR [rax+rax*1],ch
 100567e:	add    BYTE PTR [rcx+0x0],cl
 1005682:	je     0x1005684
 1005684:	add    BYTE PTR gs:[rdx+0x0],dh
 1005688:	(bad)  
 1005689:	add    BYTE PTR [rax+rax*1+0x69],dh
 100568d:	add    BYTE PTR [rdi+0x0],ch
 1005690:	outs   dx,BYTE PTR ds:[rsi]
 1005691:	add    BYTE PTR [rax+rax*1+0x69],dl
 1005695:	add    BYTE PTR [rbp+0x0],ch
 1005698:	add    BYTE PTR gs:[rip+0x30002700],bh        # 0x31007d9f
 100569f:	add    BYTE PTR [rax],dh
 10056a1:	add    BYTE PTR [rdx],bh
 10056a3:	add    BYTE PTR [rip+0x3a006400],ah        # 0x3b00baa9
 10056a9:	add    BYTE PTR [rip+0x27006400],ah        # 0x2800baaf
 10056af:	add    BYTE PTR [rax+rax*1],ch
 10056b2:	add    BYTE PTR [rbx+0x0],dl
 10056b6:	je     0x10056b8
 10056b8:	outs   dx,DWORD PTR ds:[rsi]
 10056b9:	add    BYTE PTR [rax+0x0],dh
 10056bc:	rex.XB add BYTE PTR [r15+0x0],bpl
 10056c0:	outs   dx,BYTE PTR ds:[rsi]
 10056c1:	add    BYTE PTR [rax+rax*1+0x69],ah
 10056c5:	add    BYTE PTR [rax+rax*1+0x69],dh
 10056c9:	add    BYTE PTR [rdi+0x0],ch
 10056cc:	outs   dx,BYTE PTR ds:[rsi]
 10056cd:	add    BYTE PTR [rip+0x31002700],bh        # 0x32007dd3
 10056d3:	add    BYTE PTR [rip+0x27003000],bh        # 0x280086d9
 10056d9:	add    BYTE PTR [rax],al
 10056db:	add    BYTE PTR [rax],al
 10056dd:	add    BYTE PTR [rax],al
 10056df:	add    BYTE PTR [rdx+0x0],dl
 10056e2:	push   rbp
 10056e3:	add    BYTE PTR [rsi+0x0],cl
 10056e6:	pop    rdi
 10056e7:	add    BYTE PTR [rbx+0x0],dh
 10056ea:	jo     0x10056ec
 10056ec:	pop    rdi
 10056ed:	add    BYTE PTR [rdx+0x0],ah
 10056f0:	ins    BYTE PTR es:[rdi],dx
 10056f1:	add    BYTE PTR [rdi+0x0],ch
 10056f4:	movsxd eax,DWORD PTR [rax]
 10056f6:	imul   eax,DWORD PTR [rax],0x65
 10056f9:	add    BYTE PTR [rdx+0x0],dh
 10056fc:	pop    rdi
 10056fd:	add    BYTE PTR [rax+0x0],dh
 1005700:	jae    0x1005702
 1005702:	jae    0x1005704
 1005704:	and    eax,0x32003000
 1005709:	add    BYTE PTR [rax+rax*1+0x0],ah
 100570d:	add    BYTE PTR [rax],al
 100570f:	add    BYTE PTR [rip+0x25007300],ah        # 0x2600ca15
 1005715:	add    BYTE PTR [rbx+0x0],dh
 1005718:	pop    rdi
 1005719:	add    BYTE PTR [rip+0x5f007300],ah        # 0x6000ca1f
 100571f:	add    BYTE PTR [rip+0x5f007300],ah        # 0x6000ca25
 1005725:	add    BYTE PTR [rip+0x5f007300],ah        # 0x6000ca2b
 100572b:	add    BYTE PTR [rip+0x7300],ah        # 0x100ca31
 1005731:	add    BYTE PTR [rax],al
 1005733:	add    BYTE PTR [rax],al
 1005735:	add    BYTE PTR [rax],al
 1005737:	add    BYTE PTR [rip+0x25007300],ah        # 0x2600ca3d
 100573d:	add    BYTE PTR [rbx+0x0],dh
 1005740:	and    eax,0x5f007300
 1005745:	add    BYTE PTR [rip+0x5f007300],ah        # 0x6000ca4b
 100574b:	add    BYTE PTR [rip+0x5f007300],ah        # 0x6000ca51
 1005751:	add    BYTE PTR [rip+0x5f007300],ah        # 0x6000ca57
 1005757:	add    BYTE PTR [rip+0x7300],ah        # 0x100ca5d
 100575d:	add    BYTE PTR [rax],al
 100575f:	add    BYTE PTR [rcx],ch
 1005761:	add    BYTE PTR [rdx],bh
 1005763:	add    BYTE PTR [rax],ah
 1005765:	add    BYTE PTR [rax],al
 1005767:	add    BYTE PTR [rdi],ch
 1005769:	add    BYTE PTR [rbx+0x0],al
 100576c:	add    BYTE PTR [rax],al
 100576e:	add    BYTE PTR [rax],al
 1005770:	push   rax
 1005771:	add    BYTE PTR [rbx+0x0],dl
 1005774:	push   rbx
 1005775:	add    BYTE PTR [rax],al
 1005777:	add    BYTE PTR [rip+0x21000000],cl        # 0x2200577d
 100577d:	add    BYTE PTR [rcx],ah
 100577f:	add    BYTE PTR [rax],al
 1005781:	add    BYTE PTR [rax],al
 1005783:	add    BYTE PTR [rdi],bh
 1005785:	add    BYTE PTR [rcx],ah
 1005787:	add    BYTE PTR [rax],al
 1005789:	add    BYTE PTR [rax],al
 100578b:	add    BYTE PTR [rip+0x20000000],bh        # 0x21005791
 1005791:	add    BYTE PTR [rip+0x0],bh        # 0x1005797
 1005797:	add    BYTE PTR [rip+0x2000],bh        # 0x100779d
 100579d:	add    BYTE PTR [rax],al
 100579f:	add    BYTE PTR [rbp+0x0],cl
 10057a2:	imul   eax,DWORD PTR [rax],0x720063
 10057a8:	outs   dx,DWORD PTR ds:[rsi]
 10057a9:	add    BYTE PTR [rbx+0x0],dh
 10057ac:	outs   dx,DWORD PTR ds:[rsi]
 10057ad:	add    BYTE PTR [rsi+0x0],ah
 10057b0:	je     0x10057b2
 10057b2:	add    BYTE PTR [rax],al
 10057b4:	add    BYTE PTR [rax],al
 10057b6:	add    BYTE PTR [rax],al
 10057b8:	push   rbx
 10057b9:	add    BYTE PTR [rdi+0x0],cl
 10057bc:	add    BYTE PTR [rax+r8*1+0x57],r10b
 10057c1:	add    BYTE PTR [rcx+0x0],al
 10057c4:	push   rdx
 10057c5:	add    BYTE PTR [rbp+0x0],al
	...
 10057d0:	rex.W add BYTE PTR [rbx+0x0],cl
 10057d4:	add    BYTE PTR [r9+0x0],r11b
 10057d8:	pop    rdi
 10057d9:	add    BYTE PTR [rax+rax*1+0x4f],cl
 10057dd:	add    BYTE PTR [rbx+0x0],al
 10057e0:	add    BYTE PTR [r8+rax*1+0x5f],cl
 10057e5:	add    BYTE PTR [rbp+0x0],cl
 10057e8:	add    BYTE PTR [r11+0x0],al
 10057ec:	rex.W add BYTE PTR [rcx+0x0],cl
 10057f0:	rex.WRX add BYTE PTR [rbp+0x0],r8b
 10057f4:	pop    rsp
 10057f5:	add    BYTE PTR [rip+0x5c007300],ah        # 0x5d00cafb
 10057fb:	add    BYTE PTR [rip+0x5c007300],ah        # 0x5d00cb01
 1005801:	add    BYTE PTR [rip+0x7300],ah        # 0x100cb07
 1005807:	add    BYTE PTR [rdi+0x0],dl
 100580a:	outs   dx,DWORD PTR ds:[rsi]
 100580b:	add    BYTE PTR [rdi+0x0],dh
 100580e:	add    BYTE PTR ss:[rax+rax*1],dh
 1005812:	xor    eax,DWORD PTR [rax]
 1005814:	xor    al,BYTE PTR [rax]
 1005816:	rex.WRX add BYTE PTR [rdi+0x0],r13b
 100581a:	add    BYTE PTR fs:[rbp+0x0],ah
 100581e:	add    BYTE PTR [rax],al
 1005820:	rex.W add BYTE PTR [rbx+0x0],cl
 1005824:	add    BYTE PTR [r9+0x0],r11b
 1005828:	pop    rdi
 1005829:	add    BYTE PTR [rax+rax*1+0x4f],cl
 100582d:	add    BYTE PTR [rbx+0x0],al
 1005830:	add    BYTE PTR [r8+rax*1+0x5f],cl
 1005835:	add    BYTE PTR [rbp+0x0],cl
 1005838:	add    BYTE PTR [r11+0x0],al
 100583c:	rex.W add BYTE PTR [rcx+0x0],cl
 1005840:	rex.WRX add BYTE PTR [rbp+0x0],r8b
 1005844:	pop    rsp
 1005845:	add    BYTE PTR [rip+0x5c007300],ah        # 0x5d00cb4b
 100584b:	add    BYTE PTR [rip+0x5c007300],ah        # 0x5d00cb51
 1005851:	add    BYTE PTR [rip+0x5c007300],ah        # 0x5d00cb57
 1005857:	add    BYTE PTR [rip+0x7300],ah        # 0x100cb5d
 100585d:	add    BYTE PTR [rax],al
 100585f:	add    BYTE PTR [rip+0x5c007300],ah        # 0x5d00cb65
 1005865:	add    BYTE PTR [rip+0x5c007300],ah        # 0x5d00cb6b
 100586b:	add    BYTE PTR [rip+0x7300],ah        # 0x100cb71
 1005871:	add    BYTE PTR [rax],al
 1005873:	add    BYTE PTR [rax],al
 1005875:	add    BYTE PTR [rax],al
 1005877:	add    BYTE PTR [rip+0x5c007300],ah        # 0x5d00cb7d
 100587d:	add    BYTE PTR [rip+0x5c007300],ah        # 0x5d00cb83
 1005883:	add    BYTE PTR [rip+0x5c007300],ah        # 0x5d00cb89
 1005889:	add    BYTE PTR [rip+0x7300],ah        # 0x100cb8f
 100588f:	add    BYTE PTR [rbp+0x0],cl
 1005892:	imul   eax,DWORD PTR [rax],0x720063
 1005898:	outs   dx,DWORD PTR ds:[rsi]
 1005899:	add    BYTE PTR [rbx+0x0],dh
 100589c:	outs   dx,DWORD PTR ds:[rsi]
 100589d:	add    BYTE PTR [rsi+0x0],ah
 10058a0:	je     0x10058a2
 10058a2:	and    BYTE PTR [rax],al
 10058a4:	push   rbx
 10058a5:	add    BYTE PTR [rcx+0x0],dl
 10058a8:	rex.WR add BYTE PTR [rax],r12b
 10058ab:	add    BYTE PTR [rbx+0x0],dl
 10058ae:	add    BYTE PTR gs:[rdx+0x0],dh
 10058b2:	jbe    0x10058b4
 10058b4:	add    BYTE PTR gs:[rdx+0x0],dh
	...
 10058c0:	rex.W add BYTE PTR [rbx+0x0],cl
 10058c4:	add    BYTE PTR [r9+0x0],r11b
 10058c8:	pop    rdi
 10058c9:	add    BYTE PTR [rax+rax*1+0x4f],cl
 10058cd:	add    BYTE PTR [rbx+0x0],al
 10058d0:	add    BYTE PTR [r8+rax*1+0x5f],cl
 10058d5:	add    BYTE PTR [rbp+0x0],cl
 10058d8:	add    BYTE PTR [r11+0x0],al
 10058dc:	rex.W add BYTE PTR [rcx+0x0],cl
 10058e0:	rex.WRX add BYTE PTR [rbp+0x0],r8b
 10058e4:	pop    rsp
 10058e5:	add    BYTE PTR [rip+0x5c007300],ah        # 0x5d00cbeb
 10058eb:	add    BYTE PTR [rip+0x5c007300],ah        # 0x5d00cbf1
 10058f1:	add    BYTE PTR [rip+0x5c007300],ah        # 0x5d00cbf7
 10058f7:	add    BYTE PTR [rip+0x5c007300],ah        # 0x5d00cbfd
 10058fd:	add    BYTE PTR [rip+0x7300],ah        # 0x100cc03
 1005903:	add    BYTE PTR [rax],al
 1005905:	add    BYTE PTR [rax],al
 1005907:	add    BYTE PTR [rip+0x5c007300],ah        # 0x5d00cc0d
 100590d:	add    BYTE PTR [rip+0x5c007300],ah        # 0x5d00cc13
 1005913:	add    BYTE PTR [rip+0x5c007300],ah        # 0x5d00cc19
 1005919:	add    BYTE PTR [rip+0x5c007300],ah        # 0x5d00cc1f
 100591f:	add    BYTE PTR [rip+0x7300],ah        # 0x100cc25
 1005925:	add    BYTE PTR [rax],al
 1005927:	add    BYTE PTR [rip+0x2e007300],ah        # 0x2f00cc2d
 100592d:	add    BYTE PTR [rax],ah
 100592f:	add    BYTE PTR [rcx+0x0],cl
 1005932:	outs   dx,BYTE PTR ds:[rsi]
 1005933:	add    BYTE PTR [rbx+0x0],dh
 1005936:	je     0x1005938
 1005938:	(bad)  
 1005939:	add    BYTE PTR [rsi+0x0],ch
 100593c:	movsxd eax,DWORD PTR [rax]
 100593e:	add    BYTE PTR gs:[rdx],bh
 1005941:	add    BYTE PTR [rax],ah
 1005943:	add    BYTE PTR [rax],ch
 1005945:	add    BYTE PTR [rax+rax*1+0x65],al
 1005949:	add    BYTE PTR [rsi+0x0],ah
 100594c:	(bad)  
 100594d:	add    BYTE PTR [rbp+0x0],dh
 1005950:	ins    BYTE PTR es:[rdi],dx
 1005951:	add    BYTE PTR [rax+rax*1+0x29],dh
 1005955:	add    BYTE PTR [rax],al
 1005957:	add    BYTE PTR [rbx+0x0],dl
 100595a:	add    BYTE PTR gs:[rax+rax*1+0x75],dh
 100595f:	add    BYTE PTR [rax+0x0],dh
 1005962:	add    BYTE PTR [rax],al
 1005964:	add    BYTE PTR [rax],al
 1005966:	add    BYTE PTR [rax],al
 1005968:	and    eax,0x2e007300
 100596d:	add    BYTE PTR [rax],ah
 100596f:	add    BYTE PTR [rcx+0x0],cl
 1005972:	outs   dx,BYTE PTR ds:[rsi]
 1005973:	add    BYTE PTR [rbx+0x0],dh
 1005976:	je     0x1005978
 1005978:	(bad)  
 1005979:	add    BYTE PTR [rsi+0x0],ch
 100597c:	movsxd eax,DWORD PTR [rax]
 100597e:	add    BYTE PTR gs:[rdx],bh
 1005981:	add    BYTE PTR [rax],ah
 1005983:	add    BYTE PTR [rip+0x7300],ah        # 0x100cc89
 1005989:	add    BYTE PTR [rax],al
 100598b:	add    BYTE PTR [rax],al
 100598d:	add    BYTE PTR [rax],al
 100598f:	add    BYTE PTR [rbx+0x0],dl
 1005992:	push   rcx
 1005993:	add    BYTE PTR [rax+rax*1+0x50],cl
 1005997:	add    BYTE PTR [rcx+0x0],ah
 100599a:	je     0x100599c
 100599c:	push   0x53000000
 10059a1:	add    BYTE PTR [rcx+0x0],dl
 10059a4:	rex.WR add BYTE PTR [rax+rax*1+0x61],r8b
 10059a9:	add    BYTE PTR [rax+rax*1+0x61],dh
 10059ad:	add    BYTE PTR [rdx+0x0],dl
 10059b0:	outs   dx,DWORD PTR ds:[rsi]
 10059b1:	add    BYTE PTR [rdi+0x0],ch
 10059b4:	je     0x10059b6
 10059b6:	add    BYTE PTR [rax],al
 10059b8:	and    eax,0x65007300
 10059bd:	add    BYTE PTR [rdx+0x0],dh
 10059c0:	jbe    0x10059c2
 10059c2:	add    BYTE PTR gs:[rdx+0x0],dh
 10059c6:	and    eax,0x0
 10059cb:	add    BYTE PTR [rax],al
 10059cd:	add    BYTE PTR [rax],al
 10059cf:	add    BYTE PTR [rip+0x75006f00],ah        # 0x7600c8d5
 10059d5:	add    BYTE PTR [rax+rax*1+0x70],dh
 10059d9:	add    BYTE PTR [rbp+0x0],dh
 10059dc:	je     0x10059de
 10059de:	pop    rdi
 10059df:	add    BYTE PTR [rax+0x0],dh
 10059e2:	(bad)  
 10059e3:	add    BYTE PTR [rax+rax*1+0x68],dh
 10059e7:	add    BYTE PTR [rip+0x0],ah        # 0x10059ed
 10059ed:	add    BYTE PTR [rax],al
 10059ef:	add    BYTE PTR [rip+0x74007300],ah        # 0x7500ccf5
 10059f5:	add    BYTE PTR [rcx+0x0],ah
 10059f8:	jb     0x10059fa
 10059fa:	je     0x10059fc
 10059fc:	jne    0x10059fe
 10059fe:	jo     0x1005a00
 1005a00:	pop    rdi
 1005a01:	add    BYTE PTR [rax+0x0],dh
 1005a04:	(bad)  
 1005a05:	add    BYTE PTR [rax+rax*1+0x68],dh
 1005a09:	add    BYTE PTR [rip+0x0],ah        # 0x1005a0f
 1005a0f:	add    BYTE PTR [rip+0x73007300],ah        # 0x7400cd15
 1005a15:	add    BYTE PTR [rbp+0x0],dh
 1005a18:	jae    0x1005a1a
 1005a1a:	add    BYTE PTR gs:[rdx+0x0],dh
 1005a1e:	and    eax,0x0
 1005a23:	add    BYTE PTR [rax],al
 1005a25:	add    BYTE PTR [rax],al
 1005a27:	add    BYTE PTR [rip+0x73007300],ah        # 0x7400cd2d
 1005a2d:	add    BYTE PTR [rax+0x0],dh
 1005a30:	ja     0x1005a32
 1005a32:	add    BYTE PTR fs:[rip+0x25000000],ah        # 0x26005a39
 1005a39:	add    BYTE PTR [rbx+0x0],dh
 1005a3c:	jae    0x1005a3e
 1005a3e:	jbe    0x1005a40
 1005a40:	add    BYTE PTR gs:[rdx+0x0],dh
 1005a44:	and    eax,0x25000000
 1005a49:	add    BYTE PTR [rcx+0x0],ah
 1005a4c:	jne    0x1005a4e
 1005a4e:	je     0x1005a50
 1005a50:	push   0x6f006d00
 1005a55:	add    BYTE PTR [rax+rax*1+0x65],ah
 1005a59:	add    BYTE PTR [rip+0x0],ah        # 0x1005a5f
 1005a5f:	add    BYTE PTR [rip+0x75006f00],ah        # 0x7600c965
 1005a65:	add    BYTE PTR [rax+rax*1+0x70],dh
 1005a69:	add    BYTE PTR [rbp+0x0],dh
 1005a6c:	je     0x1005a6e
 1005a6e:	pop    rdi
 1005a6f:	add    BYTE PTR [rsi+0x0],ch
 1005a72:	(bad)  
 1005a73:	add    BYTE PTR [rbp+0x0],ch
 1005a76:	add    BYTE PTR gs:[rip+0x0],ah        # 0x1005a7d
 1005a7d:	add    BYTE PTR [rax],al
 1005a7f:	add    BYTE PTR [rbp+0x0],dh
 1005a82:	jo     0x1005a84
 1005a84:	je     0x1005a86
 1005a86:	imul   eax,DWORD PTR [rax],0x65006d
 1005a8c:	pop    rdi
 1005a8d:	add    BYTE PTR [rax+0x0],dh
 1005a90:	imul   eax,DWORD PTR [rax],0x64
 1005a96:	add    BYTE PTR [rax],al
 1005a98:	push   rbx
 1005a99:	add    BYTE PTR [rcx+0x0],dl
 1005a9c:	rex.WR add BYTE PTR [rbx+0x0],r8b
 1005aa0:	rex.WRB add BYTE PTR [r8+rax*1+0x2e],r8b
 1005aa5:	add    BYTE PTR [rbp+0x0],al
 1005aa8:	pop    rax
 1005aa9:	add    BYTE PTR [rbp+0x0],al
 1005aac:	add    BYTE PTR [rax],al
 1005aae:	add    BYTE PTR [rax],al
 1005ab0:	rex.WRXB add BYTE PTR [r11+0x0],r10b
 1005ab4:	push   rcx
 1005ab5:	add    BYTE PTR [rax+rax*1+0x2e],cl
 1005ab9:	add    BYTE PTR [rbp+0x0],al
 1005abc:	pop    rax
 1005abd:	add    BYTE PTR [rbp+0x0],al
	...
 1005ac8:	and    eax,0x73007300
 1005acd:	add    BYTE PTR [rdx+0x0],ah
 1005ad0:	(bad)  
 1005ad1:	add    BYTE PTR [rax+rax*1+0x63],dh
 1005ad5:	add    BYTE PTR [rax+0x0],ch
 1005ad8:	jb     0x1005ada
 1005ada:	jne    0x1005adc
 1005adc:	outs   dx,BYTE PTR ds:[rsi]
 1005add:	add    BYTE PTR [rsi+0x0],ch
 1005ae0:	add    BYTE PTR gs:[rdx+0x0],dh
 1005ae4:	and    eax,0x25000000
 1005ae9:	add    BYTE PTR [rcx+0x0],ch
 1005aec:	outs   dx,BYTE PTR ds:[rsi]
 1005aed:	add    BYTE PTR [rax+rax*1+0x65],dh
 1005af1:	add    BYTE PTR [rdx+0x0],dh
 1005af4:	outs   dx,BYTE PTR ds:[rsi]
 1005af5:	add    BYTE PTR [rcx+0x0],ah
 1005af8:	ins    BYTE PTR es:[rdi],dx
 1005af9:	add    BYTE PTR [rdi+0x0],bl
 1005afc:	outs   dx,DWORD PTR ds:[rsi]
 1005afd:	add    BYTE PTR [rbp+0x0],dh
 1005b00:	je     0x1005b02
 1005b02:	jo     0x1005b04
 1005b04:	jne    0x1005b06
 1005b06:	je     0x1005b08
 1005b08:	pop    rdi
 1005b09:	add    BYTE PTR [rsi+0x0],ch
 1005b0c:	(bad)  
 1005b0d:	add    BYTE PTR [rbp+0x0],ch
 1005b10:	add    BYTE PTR gs:[rip+0x0],ah        # 0x1005b17
 1005b17:	add    BYTE PTR [rip+0x75007100],ah        # 0x7600cc1d
 1005b1d:	add    BYTE PTR [rcx+0x0],ch
 1005b20:	add    BYTE PTR gs:[rax+rax*1+0x6d],dh
 1005b25:	add    BYTE PTR [rdi+0x0],ch
 1005b28:	add    BYTE PTR fs:[rbp+0x0],ah
 1005b2c:	and    eax,0x25000000
 1005b31:	add    BYTE PTR [rsi+0x0],ah
 1005b34:	outs   dx,DWORD PTR ds:[rsi]
 1005b35:	add    BYTE PTR [rdx+0x0],dh
 1005b38:	movsxd eax,DWORD PTR [rax]
 1005b3a:	add    BYTE PTR gs:[rdx+0x0],dh
 1005b3e:	add    BYTE PTR gs:[rbp+0x0],ch
 1005b42:	outs   dx,DWORD PTR ds:[rsi]
 1005b43:	add    BYTE PTR [rax+rax*1+0x65],dh
 1005b47:	add    BYTE PTR [rbp+0x0],ch
 1005b4a:	outs   dx,DWORD PTR ds:[rsi]
 1005b4b:	add    BYTE PTR [rax+rax*1+0x65],ah
 1005b4f:	add    BYTE PTR [rip+0x0],ah        # 0x1005b55
 1005b55:	add    BYTE PTR [rax],al
 1005b57:	add    BYTE PTR [rip+0x6f006300],ah        # 0x7000be5d
 1005b5d:	add    BYTE PTR [rbp+0x0],ch
 1005b60:	jo     0x1005b62
 1005b62:	jb     0x1005b64
 1005b64:	add    BYTE PTR gs:[rbx+0x0],dh
 1005b68:	jae    0x1005b6a
 1005b6a:	imul   eax,DWORD PTR [rax],0x6e006f
 1005b70:	ins    DWORD PTR es:[rdi],dx
 1005b71:	add    BYTE PTR [rdi+0x0],ch
 1005b74:	add    BYTE PTR fs:[rbp+0x0],ah
 1005b78:	and    eax,0x0
 1005b7d:	add    BYTE PTR [rax],al
 1005b7f:	add    BYTE PTR [rip+0x65006700],ah        # 0x6600c285
 1005b85:	add    BYTE PTR [rsi+0x0],ch
 1005b88:	add    BYTE PTR gs:[rdx+0x0],dh
 1005b8c:	imul   eax,DWORD PTR [rax],0x6d0063
 1005b92:	outs   dx,DWORD PTR ds:[rsi]
 1005b93:	add    BYTE PTR [rax+rax*1+0x65],ah
 1005b97:	add    BYTE PTR [rip+0x0],ah        # 0x1005b9d
 1005b9d:	add    BYTE PTR [rax],al
 1005b9f:	add    BYTE PTR [rip+0x61006300],ah        # 0x6200bea5
 1005ba5:	add    BYTE PTR [rbx+0x0],dh
 1005ba8:	add    BYTE PTR gs:[rsi+0x0],ch
 1005bac:	jne    0x1005bae
 1005bae:	ins    DWORD PTR es:[rdi],dx
 1005baf:	add    BYTE PTR [rdx+0x0],ah
 1005bb2:	add    BYTE PTR gs:[rdx+0x0],dh
 1005bb6:	and    eax,0x0
 1005bbb:	add    BYTE PTR [rax],al
 1005bbd:	add    BYTE PTR [rax],al
 1005bbf:	add    BYTE PTR [rip+0x74007300],ah        # 0x7500cec5
 1005bc5:	add    BYTE PTR [rcx+0x0],ah
 1005bc8:	jb     0x1005bca
 1005bca:	je     0x1005bcc
 1005bcc:	je     0x1005bce
 1005bce:	imul   eax,DWORD PTR [rax],0x65006d
 1005bd4:	and    eax,0x25000000
 1005bd9:	add    BYTE PTR [rbp+0x0],ah
 1005bdc:	outs   dx,BYTE PTR ds:[rsi]
 1005bdd:	add    BYTE PTR [rax+rax*1+0x74],ah
 1005be1:	add    BYTE PTR [rcx+0x0],ch
 1005be4:	ins    DWORD PTR es:[rdi],dx
 1005be5:	add    BYTE PTR [rbp+0x0],ah
 1005be8:	and    eax,0x0
 1005bed:	add    BYTE PTR [rax],al
 1005bef:	add    BYTE PTR [rip+0x6f006300],ah        # 0x7000bef5
 1005bf5:	add    BYTE PTR [rbp+0x0],ch
 1005bf8:	jae    0x1005bfa
 1005bfa:	jo     0x1005bfc
 1005bfc:	add    BYTE PTR gs:[rbx+0x0],ah
 1005c00:	and    eax,0x0
 1005c05:	add    BYTE PTR [rax],al
 1005c07:	add    BYTE PTR [rip+0x66006300],ah        # 0x6700bf0d
 1005c0d:	add    BYTE PTR [rdi+0x0],ah
 1005c10:	data16 add BYTE PTR [rcx+0x0],ch
 1005c14:	ins    BYTE PTR es:[rdi],dx
 1005c15:	add    BYTE PTR [rbp+0x0],ah
 1005c18:	and    eax,0x0
 1005c1d:	add    BYTE PTR [rax],al
 1005c1f:	add    BYTE PTR [rip+0x75006f00],ah        # 0x7600cb25
 1005c25:	add    BYTE PTR [rax+rax*1+0x70],dh
 1005c29:	add    BYTE PTR [rbp+0x0],dh
 1005c2c:	je     0x1005c2e
 1005c2e:	data16 add BYTE PTR [rdi+0x0],ch
 1005c32:	ins    BYTE PTR es:[rdi],dx
 1005c33:	add    BYTE PTR [rax+rax*1+0x65],ah
 1005c37:	add    BYTE PTR [rdx+0x0],dh
 1005c3a:	ins    DWORD PTR es:[rdi],dx
 1005c3b:	add    BYTE PTR [rdi+0x0],ch
 1005c3e:	add    BYTE PTR fs:[rbp+0x0],ah
 1005c42:	and    eax,0x0
 1005c47:	add    BYTE PTR [rip+0x70006100],ah        # 0x7100bd4d
 1005c4d:	add    BYTE PTR [rax+0x0],dh
 1005c50:	outs   dx,BYTE PTR ds:[rsi]
 1005c51:	add    BYTE PTR [rcx+0x0],ah
 1005c54:	ins    DWORD PTR es:[rdi],dx
 1005c55:	add    BYTE PTR [rbp+0x0],ah
 1005c58:	and    eax,0x0
 1005c5d:	add    BYTE PTR [rax],al
 1005c5f:	add    BYTE PTR [rsi],ch
 1005c61:	add    BYTE PTR [rax+rax*1+0x45],dl
 1005c65:	add    BYTE PTR [rbp+0x0],cl
	...
 1005c70:	and    eax,0x5f007300
 1005c75:	add    BYTE PTR [rip+0x7300],ah        # 0x100cf7b
 1005c7b:	add    BYTE PTR [rdi],ah
 1005c7d:	add    BYTE PTR [rdi],ah
 1005c7f:	add    BYTE PTR [rax],al
 1005c81:	add    BYTE PTR [rax],al
 1005c83:	add    BYTE PTR [rdi],ah
	...
 1005c8d:	add    BYTE PTR [rax],al
 1005c8f:	add    BYTE PTR [rbp+0x0],al
 1005c92:	pop    rax
 1005c93:	add    BYTE PTR [rbp+0x0],al
 1005c96:	rex.XB add BYTE PTR [r8],spl
 1005c99:	add    BYTE PTR [rax+rax*1+0x65],dh
 1005c9d:	add    BYTE PTR [rbp+0x0],ch
 1005ca0:	jo     0x1005ca2
 1005ca2:	add    BYTE PTR fs:[rdx+0x0],ah
 1005ca6:	add    BYTE PTR cs:[rax+rax*1+0x62],ah
 1005cab:	add    BYTE PTR [rdi+0x0],ch
 1005cae:	add    BYTE PTR cs:[rbx+0x0],dh
 1005cb2:	jo     0x1005cb4
 1005cb4:	pop    rdi
 1005cb5:	add    BYTE PTR [rbx+0x0],ah
 1005cb8:	outs   dx,DWORD PTR ds:[rsi]
 1005cb9:	add    BYTE PTR [rax+rax*1+0x65],ah
 1005cbd:	add    BYTE PTR [rdi+0x0],bl
 1005cc0:	jb     0x1005cc2
 1005cc2:	jne    0x1005cc4
 1005cc4:	outs   dx,BYTE PTR ds:[rsi]
 1005cc5:	add    BYTE PTR [rsi+0x0],ch
 1005cc8:	add    BYTE PTR gs:[rdx+0x0],dh
 1005ccc:	and    eax,0x32003000
 1005cd1:	add    BYTE PTR [rax+rax*1+0x20],ah
 1005cd5:	add    BYTE PTR [rax+0x0],al
 1005cd8:	push   rbx
 1005cd9:	add    BYTE PTR [rax+rax*1+0x61],dh
 1005cdd:	add    BYTE PTR [rdx+0x0],dh
 1005ce0:	je     0x1005ce2
 1005ce2:	rex.XB add BYTE PTR [r13+0x0],bpl
 1005ce6:	add    BYTE PTR fs:[rip+0x27004e00],bh        # 0x2800aaed
 1005ced:	add    BYTE PTR [rip+0x27007300],ah        # 0x2800cff3
 1005cf3:	add    BYTE PTR [rax+rax*1],ch
 1005cf6:	add    BYTE PTR [rcx+0x0],cl
 1005cfa:	je     0x1005cfc
 1005cfc:	add    BYTE PTR gs:[rdx+0x0],dh
 1005d00:	(bad)  
 1005d01:	add    BYTE PTR [rax+rax*1+0x69],dh
 1005d05:	add    BYTE PTR [rdi+0x0],ch
 1005d08:	outs   dx,BYTE PTR ds:[rsi]
 1005d09:	add    BYTE PTR [rax+rax*1+0x69],dl
 1005d0d:	add    BYTE PTR [rbp+0x0],ch
 1005d10:	add    BYTE PTR gs:[rip+0x30002700],bh        # 0x31008417
 1005d17:	add    BYTE PTR [rax],dh
 1005d19:	add    BYTE PTR [rdx],bh
 1005d1b:	add    BYTE PTR [rip+0x3a006400],ah        # 0x3b00c121
 1005d21:	add    BYTE PTR [rip+0x27006400],ah        # 0x2800c127
 1005d27:	add    BYTE PTR [rax+rax*1],ch
 1005d2a:	add    BYTE PTR [rbx+0x0],dl
 1005d2e:	je     0x1005d30
 1005d30:	outs   dx,DWORD PTR ds:[rsi]
 1005d31:	add    BYTE PTR [rax+0x0],dh
 1005d34:	rex.XB add BYTE PTR [r15+0x0],bpl
 1005d38:	outs   dx,BYTE PTR ds:[rsi]
 1005d39:	add    BYTE PTR [rax+rax*1+0x69],ah
 1005d3d:	add    BYTE PTR [rax+rax*1+0x69],dh
 1005d41:	add    BYTE PTR [rdi+0x0],ch
 1005d44:	outs   dx,BYTE PTR ds:[rsi]
 1005d45:	add    BYTE PTR [rip+0x31002700],bh        # 0x3200844b
 1005d4b:	add    BYTE PTR [rip+0x27003000],bh        # 0x28008d51
 1005d51:	add    BYTE PTR [rax],al
 1005d53:	add    BYTE PTR [rax],al
 1005d55:	add    BYTE PTR [rax],al
 1005d57:	add    BYTE PTR [rip+0x5f007300],ah        # 0x6000d05d
 1005d5d:	add    BYTE PTR [rip+0x5f007300],ah        # 0x6000d063
 1005d63:	add    BYTE PTR [rip+0x7300],ah        # 0x100d069
 1005d69:	add    BYTE PTR [rax],al
 1005d6b:	add    BYTE PTR [rax],al
 1005d6d:	add    BYTE PTR [rax],al
 1005d6f:	add    BYTE PTR [rax],ah
 1005d71:	add    BYTE PTR [rdi],ch
 1005d73:	add    BYTE PTR [rbx+0x0],al
 1005d76:	add    BYTE PTR [rax],al
 1005d78:	rex.WRB add BYTE PTR [r11+0x0],r10b
 1005d7c:	add    BYTE PTR [rcx+0x0],r13b
 1005d80:	(bad)  
 1005d81:	add    BYTE PTR [rdi+0x0],ah
 1005d84:	push   rax
 1005d85:	add    BYTE PTR [rdx+0x0],dh
 1005d88:	outs   dx,DWORD PTR ds:[rsi]
 1005d89:	add    BYTE PTR [rbx+0x0],ah
 1005d8c:	jae    0x1005d8e
 1005d8e:	add    BYTE PTR cs:[rbx+0x0],dh
 1005d92:	jno    0x1005d94
 1005d94:	ins    BYTE PTR es:[rdi],dx
 1005d95:	add    BYTE PTR [rax],al
 1005d97:	add    BYTE PTR [rax+rax*1+0x69],ah
 1005d9b:	add    BYTE PTR [rdx+0x0],dh
 1005d9e:	and    BYTE PTR [rax],al
 1005da0:	add    BYTE PTR ds:[rax],ah
 1005da3:	add    BYTE PTR [rdx],ah
 1005da5:	add    BYTE PTR [rip+0x25007300],ah        # 0x2600d0ab
 1005dab:	add    BYTE PTR [rbx+0x0],dh
 1005dae:	and    eax,DWORD PTR [rax]
 1005db0:	and    eax,DWORD PTR [rax]
 1005db2:	data16 add BYTE PTR [rcx+0x0],ch
 1005db6:	ins    BYTE PTR es:[rdi],dx
 1005db7:	add    BYTE PTR [rbp+0x0],ah
 1005dba:	jae    0x1005dbc
 1005dbc:	add    BYTE PTR cs:[rax+rax*1+0x78],dh
 1005dc1:	add    BYTE PTR [rax+rax*1+0x22],dh
 1005dc5:	add    BYTE PTR [rax],al
 1005dc7:	add    BYTE PTR [rbx+0x0],dh
 1005dca:	add    BYTE PTR gs:[rax+rax*1+0x20],dh
 1005dcf:	add    BYTE PTR [rsi],bh
 1005dd1:	add    BYTE PTR [rax],ah
 1005dd3:	add    BYTE PTR [rdx],ah
 1005dd5:	add    BYTE PTR [rip+0x25007300],ah        # 0x2600d0db
 1005ddb:	add    BYTE PTR [rbx+0x0],dh
 1005dde:	and    eax,DWORD PTR [rax]
 1005de0:	and    eax,DWORD PTR [rax]
 1005de2:	add    BYTE PTR gs:[rsi+0x0],ch
 1005de6:	jbe    0x1005de8
 1005de8:	jbe    0x1005dea
 1005dea:	(bad)  
 1005deb:	add    BYTE PTR [rdx+0x0],dh
 1005dee:	jae    0x1005df0
 1005df0:	add    BYTE PTR cs:[rax+rax*1+0x78],dh
 1005df5:	add    BYTE PTR [rax+rax*1+0x22],dh
 1005df9:	add    BYTE PTR [rax],al
 1005dfb:	add    BYTE PTR [rax],al
 1005dfd:	add    BYTE PTR [rax],al
 1005dff:	add    BYTE PTR [rbx+0x0],dl
 1005e02:	outs   dx,DWORD PTR ds:[rsi]
 1005e03:	add    BYTE PTR [rsi+0x0],ah
 1005e06:	je     0x1005e08
 1005e08:	ja     0x1005e0a
 1005e0a:	(bad)  
 1005e0b:	add    BYTE PTR [rdx+0x0],dh
 1005e0e:	add    BYTE PTR gs:[rax+rax*1+0x4d],bl
 1005e13:	add    BYTE PTR [rcx+0x0],ch
 1005e16:	movsxd eax,DWORD PTR [rax]
 1005e18:	jb     0x1005e1a
 1005e1a:	outs   dx,DWORD PTR ds:[rsi]
 1005e1b:	add    BYTE PTR [rbx+0x0],dh
 1005e1e:	outs   dx,DWORD PTR ds:[rsi]
 1005e1f:	add    BYTE PTR [rsi+0x0],ah
 1005e22:	je     0x1005e24
 1005e24:	pop    rsp
 1005e25:	add    BYTE PTR [rbp+0x0],cl
 1005e28:	imul   eax,DWORD PTR [rax],0x720063
 1005e2e:	outs   dx,DWORD PTR ds:[rsi]
 1005e2f:	add    BYTE PTR [rbx+0x0],dh
 1005e32:	outs   dx,DWORD PTR ds:[rsi]
 1005e33:	add    BYTE PTR [rsi+0x0],ah
 1005e36:	je     0x1005e38
 1005e38:	and    BYTE PTR [rax],al
 1005e3a:	push   rbx
 1005e3b:	add    BYTE PTR [rcx+0x0],dl
 1005e3e:	rex.WR add BYTE PTR [rax],r12b
 1005e41:	add    BYTE PTR [rbx+0x0],dl
 1005e44:	add    BYTE PTR gs:[rdx+0x0],dh
 1005e48:	jbe    0x1005e4a
 1005e4a:	add    BYTE PTR gs:[rdx+0x0],dh
 1005e4e:	pop    rsp
 1005e4f:	add    BYTE PTR [rcx+0x0],cl
 1005e52:	outs   dx,BYTE PTR ds:[rsi]
 1005e53:	add    BYTE PTR [rbx+0x0],dh
 1005e56:	je     0x1005e58
 1005e58:	(bad)  
 1005e59:	add    BYTE PTR [rsi+0x0],ch
 1005e5c:	movsxd eax,DWORD PTR [rax]
 1005e5e:	add    BYTE PTR gs:[rax],ah
 1005e61:	add    BYTE PTR [rsi+0x0],cl
 1005e64:	(bad)  
 1005e65:	add    BYTE PTR [rbp+0x0],ch
 1005e68:	add    BYTE PTR gs:[rbx+0x0],dh
 1005e6c:	pop    rsp
 1005e6d:	add    BYTE PTR [rax],al
 1005e6f:	add    BYTE PTR [rbx+0x0],dl
 1005e72:	outs   dx,DWORD PTR ds:[rsi]
 1005e73:	add    BYTE PTR [rsi+0x0],ah
 1005e76:	je     0x1005e78
 1005e78:	ja     0x1005e7a
 1005e7a:	(bad)  
 1005e7b:	add    BYTE PTR [rdx+0x0],dh
 1005e7e:	add    BYTE PTR gs:[rax+rax*1+0x4d],bl
 1005e83:	add    BYTE PTR [rcx+0x0],ch
 1005e86:	movsxd eax,DWORD PTR [rax]
 1005e88:	jb     0x1005e8a
 1005e8a:	outs   dx,DWORD PTR ds:[rsi]
 1005e8b:	add    BYTE PTR [rbx+0x0],dh
 1005e8e:	outs   dx,DWORD PTR ds:[rsi]
 1005e8f:	add    BYTE PTR [rsi+0x0],ah
 1005e92:	je     0x1005e94
 1005e94:	pop    rsp
 1005e95:	add    BYTE PTR [rbp+0x0],cl
 1005e98:	imul   eax,DWORD PTR [rax],0x720063
 1005e9e:	outs   dx,DWORD PTR ds:[rsi]
 1005e9f:	add    BYTE PTR [rbx+0x0],dh
 1005ea2:	outs   dx,DWORD PTR ds:[rsi]
 1005ea3:	add    BYTE PTR [rsi+0x0],ah
 1005ea6:	je     0x1005ea8
 1005ea8:	and    BYTE PTR [rax],al
 1005eaa:	push   rbx
 1005eab:	add    BYTE PTR [rcx+0x0],dl
 1005eae:	rex.WR add BYTE PTR [rax],r12b
 1005eb1:	add    BYTE PTR [rbx+0x0],dl
 1005eb4:	add    BYTE PTR gs:[rdx+0x0],dh
 1005eb8:	jbe    0x1005eba
 1005eba:	add    BYTE PTR gs:[rdx+0x0],dh
 1005ebe:	pop    rsp
	...
 1005ec7:	add    BYTE PTR [rbx+0x0],dl
 1005eca:	outs   dx,DWORD PTR ds:[rsi]
 1005ecb:	add    BYTE PTR [rsi+0x0],ah
 1005ece:	je     0x1005ed0
 1005ed0:	ja     0x1005ed2
 1005ed2:	(bad)  
 1005ed3:	add    BYTE PTR [rdx+0x0],dh
 1005ed6:	add    BYTE PTR gs:[rax+rax*1+0x4d],bl
 1005edb:	add    BYTE PTR [rcx+0x0],ch
 1005ede:	movsxd eax,DWORD PTR [rax]
 1005ee0:	jb     0x1005ee2
 1005ee2:	outs   dx,DWORD PTR ds:[rsi]
 1005ee3:	add    BYTE PTR [rbx+0x0],dh
 1005ee6:	outs   dx,DWORD PTR ds:[rsi]
 1005ee7:	add    BYTE PTR [rsi+0x0],ah
 1005eea:	je     0x1005eec
 1005eec:	pop    rsp
 1005eed:	add    BYTE PTR [rbp+0x0],cl
 1005ef0:	push   rbx
 1005ef1:	add    BYTE PTR [rbx+0x0],dl
 1005ef4:	push   rcx
 1005ef5:	add    BYTE PTR [rax+rax*1+0x53],cl
 1005ef9:	add    BYTE PTR [rbp+0x0],ah
 1005efc:	jb     0x1005efe
 1005efe:	jbe    0x1005f00
 1005f00:	add    BYTE PTR gs:[rdx+0x0],dh
 1005f04:	add    BYTE PTR [rax],al
 1005f06:	add    BYTE PTR [rax],al
 1005f08:	rex.XB add BYTE PTR [r13+0x0],sil
 1005f0c:	jb     0x1005f0e
 1005f0e:	jb     0x1005f10
 1005f10:	add    BYTE PTR gs:[rsi+0x0],ch
 1005f14:	je     0x1005f16
 1005f16:	push   rsi
 1005f17:	add    BYTE PTR [rbp+0x0],ah
 1005f1a:	jb     0x1005f1c
 1005f1c:	jae    0x1005f1e
 1005f1e:	imul   eax,DWORD PTR [rax],0x6e006f
 1005f24:	add    BYTE PTR [rax],al
 1005f26:	add    BYTE PTR [rax],al
 1005f28:	rex.WRB add BYTE PTR [r11+0x0],r10b
 1005f2c:	push   rbx
 1005f2d:	add    BYTE PTR [rcx+0x0],dl
 1005f30:	rex.WR add BYTE PTR [rbx+0x0],r10b
 1005f34:	add    BYTE PTR [r10+0x0],r10b
 1005f38:	push   rsi
 1005f39:	add    BYTE PTR [rbp+0x0],al
 1005f3c:	push   rdx
 1005f3d:	add    BYTE PTR [rax],al
 1005f3f:	add    BYTE PTR [rcx+0x0],cl
 1005f42:	outs   dx,BYTE PTR ds:[rsi]
 1005f43:	add    BYTE PTR [rbx+0x0],dh
 1005f46:	je     0x1005f48
 1005f48:	(bad)  
 1005f49:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1005f4d:	add    BYTE PTR [rbp+0x0],ah
 1005f50:	add    BYTE PTR fs:[rcx+0x0],cl
 1005f54:	outs   dx,BYTE PTR ds:[rsi]
 1005f55:	add    BYTE PTR [rbx+0x0],dh
 1005f58:	je     0x1005f5a
 1005f5a:	(bad)  
 1005f5b:	add    BYTE PTR [rsi+0x0],ch
 1005f5e:	movsxd eax,DWORD PTR [rax]
 1005f60:	add    BYTE PTR gs:[rbx+0x0],dh
 1005f64:	add    BYTE PTR [rax],al
 1005f66:	add    BYTE PTR [rax],al
 1005f68:	rex.WB add BYTE PTR [r14+0x0],bpl
 1005f6c:	jae    0x1005f6e
 1005f6e:	je     0x1005f70
 1005f70:	(bad)  
 1005f71:	add    BYTE PTR [rsi+0x0],ch
 1005f74:	movsxd eax,DWORD PTR [rax]
 1005f76:	add    BYTE PTR gs:[rax],ah
 1005f79:	add    BYTE PTR [rsi+0x0],cl
 1005f7c:	(bad)  
 1005f7d:	add    BYTE PTR [rbp+0x0],ch
 1005f80:	add    BYTE PTR gs:[rbx+0x0],dh
 1005f84:	add    BYTE PTR [rax],al
 1005f86:	add    BYTE PTR [rax],al
 1005f88:	pop    rsp
 1005f89:	add    BYTE PTR [rax+rax*1+0x0],bl
 1005f8d:	add    BYTE PTR [rax],al
 1005f8f:	add    BYTE PTR [rip+0x65007000],ah        # 0x6600cf95
 1005f95:	add    BYTE PTR [rdx+0x0],dh
 1005f98:	data16 add BYTE PTR [rbp+0x0],ch
 1005f9c:	outs   dx,DWORD PTR ds:[rsi]
 1005f9d:	add    BYTE PTR [rsi+0x0],ch
 1005fa0:	add    BYTE PTR fs:[rbx+0x0],dh
 1005fa4:	outs   dx,BYTE PTR ds:[rsi]
 1005fa5:	add    BYTE PTR [rip+0x0],ah        # 0x1005fab
 1005fab:	add    BYTE PTR [rax],al
 1005fad:	add    BYTE PTR [rax],al
 1005faf:	add    BYTE PTR [rbx+0x0],dl
 1005fb2:	push   rcx
 1005fb3:	add    BYTE PTR [rax+rax*1+0x3a],cl
 1005fb7:	add    BYTE PTR [rip+0x21007300],ah        # 0x2200d2bd
 1005fbd:	add    BYTE PTR [rbx+0x0],ah
 1005fc0:	outs   dx,DWORD PTR ds:[rsi]
 1005fc1:	add    BYTE PTR [rbp+0x0],dh
 1005fc4:	outs   dx,BYTE PTR ds:[rsi]
 1005fc5:	add    BYTE PTR [rax+rax*1+0x65],dh
 1005fc9:	add    BYTE PTR [rdx+0x0],dh
 1005fcc:	pop    rdi
 1005fcd:	add    BYTE PTR [rax+rax*1+0x6f],ch
 1005fd1:	add    BYTE PTR [rdi+0x0],ah
 1005fd4:	add    BYTE PTR [rax],al
 1005fd6:	add    BYTE PTR [rax],al
 1005fd8:	add    BYTE PTR cs:[rdx+0x0],al
 1005fdc:	rex.WR add BYTE PTR [rdi+0x0],r8b
	...
 1005fe8:	and    eax,0x25007300
 1005fed:	add    BYTE PTR [rbx+0x0],dh
 1005ff0:	and    eax,0x7300
 1005ff5:	add    BYTE PTR [rax],al
 1005ff7:	add    BYTE PTR [rip+0x25007300],ah        # 0x2600d2fd
 1005ffd:	add    BYTE PTR [rbx+0x0],dh
 1006000:	and    eax,0x25006400
 1006005:	add    BYTE PTR [rbx+0x0],dh
	...
 1006010:	push   rbx
 1006011:	add    BYTE PTR [rcx+0x0],dl
 1006014:	rex.WR add BYTE PTR [rax+rax*1+0x69],r8b
 1006019:	add    BYTE PTR [rcx+0x0],ah
 100601c:	add    BYTE PTR [eax],ah
 100601f:	add    BYTE PTR [rax+rax*1+0x6f],ch
 1006023:	add    BYTE PTR [rdi+0x0],ah
 1006026:	and    BYTE PTR [rax],al
 1006028:	data16 add BYTE PTR [rcx+0x0],ch
 100602c:	ins    BYTE PTR es:[rdi],dx
 100602d:	add    BYTE PTR [rbp+0x0],ah
	...
 1006038:	add    BYTE PTR cs:[rip+0x3000],dh        # 0x100903f
 100603f:	add    BYTE PTR [rax+rax*1+0x5c],bl
 1006043:	add    BYTE PTR [rsi],ch
 1006045:	add    BYTE PTR [rax+rax*1+0x50],bl
 1006049:	add    BYTE PTR [rcx+0x0],cl
 100604c:	push   rax
 100604d:	add    BYTE PTR [rbp+0x0],al
 1006050:	pop    rsp
 1006051:	add    BYTE PTR [rax+rax*1+0x69],ah
 1006055:	add    BYTE PTR [rcx+0x0],ah
 1006058:	add    BYTE PTR [eax+eax*1+0x25],bl
 100605d:	add    BYTE PTR [rbx+0x0],dh
 1006060:	pop    rsp
 1006061:	add    BYTE PTR [rip+0x5c007300],ah        # 0x5d00d367
 1006067:	add    BYTE PTR [rip+0x7300],ah        # 0x100d36d
 100606d:	add    BYTE PTR [rax],al
 100606f:	add    BYTE PTR [rax+rax*1],ch
 1006072:	and    BYTE PTR [rax],al
 1006074:	rex.RX add BYTE PTR [rbp+0x0],r14b
 1006078:	outs   dx,BYTE PTR ds:[rsi]
 1006079:	add    BYTE PTR [rbx+0x0],ah
 100607c:	cmp    al,BYTE PTR [rax]
 100607e:	add    BYTE PTR [r8+0x0],r15b
 1006082:	jo     0x1006084
 1006084:	outs   dx,DWORD PTR ds:[rsi]
 1006085:	add    BYTE PTR [rdx+0x0],dh
 1006088:	je     0x100608a
 100608a:	push   rsi
 100608b:	add    BYTE PTR [rcx+0x0],ch
 100608e:	jb     0x1006090
 1006090:	je     0x1006092
 1006092:	jne    0x1006094
 1006094:	(bad)  
 1006095:	add    BYTE PTR [rax+rax*1+0x53],ch
 1006099:	add    BYTE PTR [rcx+0x0],dl
 100609c:	rex.WR add BYTE PTR [rbx+0x0],r10b
 10060a0:	add    BYTE PTR gs:[rdx+0x0],dh
 10060a4:	jbe    0x10060a6
 10060a6:	add    BYTE PTR gs:[rdx+0x0],dh
 10060aa:	push   rdx
 10060ab:	add    BYTE PTR [rbp+0x0],ah
 10060ae:	add    BYTE PTR [ecx+0x0],ch
 10060b2:	jae    0x10060b4
 10060b4:	je     0x10060b6
 10060b6:	jb     0x10060b8
 10060b8:	jns    0x10060ba
 10060ba:	rex.XB add BYTE PTR [r8+0x0],bpl
 10060be:	add    BYTE PTR gs:[rbx+0x0],ah
 10060c2:	imul   eax,DWORD PTR [rax],0x50
 10060c5:	add    BYTE PTR [rdi+0x0],ch
 10060c8:	imul   eax,DWORD PTR [rax],0x74006e
 10060ce:	jae    0x10060d0
 10060d0:	sub    al,0x0
 10060d2:	and    BYTE PTR [rax],al
 10060d4:	rex.WB add BYTE PTR [r14+0x0],bpl
 10060d8:	jae    0x10060da
 10060da:	je     0x10060dc
 10060dc:	(bad)  
 10060dd:	add    BYTE PTR [rsi+0x0],ch
 10060e0:	movsxd eax,DWORD PTR [rax]
 10060e2:	add    BYTE PTR gs:[rax],ah
 10060e5:	add    BYTE PTR [rsi+0x0],ch
 10060e8:	(bad)  
 10060e9:	add    BYTE PTR [rbp+0x0],ch
 10060ec:	add    BYTE PTR gs:[rdx],bh
	...
 10060f7:	add    BYTE PTR [rip+0x6f006600],ah        # 0x7000c6fd
 10060fd:	add    BYTE PTR [rdx+0x0],dh
 1006100:	movsxd eax,DWORD PTR [rax]
 1006102:	add    BYTE PTR gs:[rcx+0x0],ah
 1006106:	jbe    0x1006108
 1006108:	and    eax,0x0
 100610d:	add    BYTE PTR [rax],al
 100610f:	add    BYTE PTR [rsi],ch
 1006111:	add    BYTE PTR [rax+0x0],bl
 1006114:	rex.WRB add BYTE PTR [r8+rax*1+0x0],r9b
 1006119:	add    BYTE PTR [rax],al
 100611b:	add    BYTE PTR [rax],al
 100611d:	add    BYTE PTR [rax],al
 100611f:	add    BYTE PTR [rip+0x6e006500],ah        # 0x6f00c625
 1006125:	add    BYTE PTR [rcx+0x0],ah
 1006128:	(bad)  
 1006129:	add    BYTE PTR [rax+rax*1+0x65],ch
 100612d:	add    BYTE PTR [rax+rax*1+0x69],ch
 1006131:	add    BYTE PTR [rbx+0x0],dh
 1006134:	je     0x1006136
 1006136:	add    BYTE PTR gs:[rsi+0x0],ch
 100613a:	add    BYTE PTR gs:[rdx+0x0],dh
 100613e:	and    eax,0x0
 1006143:	add    BYTE PTR [rax],al
 1006145:	add    BYTE PTR [rax],al
 1006147:	add    BYTE PTR [rbx+0x0],dl
 100614a:	add    BYTE PTR gs:[rax+rax*1+0x53],dh
 100614f:	add    BYTE PTR [rbp+0x0],ah
 1006152:	jb     0x1006154
 1006154:	jbe    0x1006156
 1006156:	imul   eax,DWORD PTR [rax],0x650063
 100615c:	push   rbx
 100615d:	add    BYTE PTR [rax+rax*1+0x61],dh
 1006161:	add    BYTE PTR [rax+rax*1+0x75],dh
 1006165:	add    BYTE PTR [rbx+0x0],dh
	...
 1006170:	add    BYTE PTR fs:[rdx+0x0],ah
 1006174:	add    BYTE PTR [eax+0x0],ch
 1006178:	add    BYTE PTR gs:[rax+rax*1+0x70],ch
 100617d:	add    BYTE PTR [rsi],ch
 100617f:	add    BYTE PTR [rax+rax*1+0x6c],ah
 1006183:	add    BYTE PTR [rax+rax*1+0x0],ch
 1006187:	add    BYTE PTR [rbp+0x69],cl
 100618a:	outs   dx,BYTE PTR ds:[rsi]
 100618b:	imul   eax,DWORD PTR [rbp+rsi*2+0x6d],0x69725770
 1006193:	je     0x10061fa
 1006195:	rex.R jne 0x1006205
 1006198:	jo     0x100619a
 100619a:	add    BYTE PTR [rax],al
 100619c:	add    BYTE PTR [rax],al
 100619e:	add    BYTE PTR [rax],al
 10061a0:	add    BYTE PTR [rbp+0x0],r14b
 10061a4:	ins    DWORD PTR es:[rdi],dx
 10061a5:	add    BYTE PTR [rax+0x0],dh
 10061a8:	push   rsp
 10061a9:	add    BYTE PTR [rdi+0x0],ch
 10061ac:	rex.XB add BYTE PTR [r13+0x0],sil
 10061b0:	jb     0x10061b2
 10061b2:	jb     0x10061b4
 10061b4:	add    BYTE PTR gs:[rsi+0x0],ch
 10061b8:	je     0x10061ba
 10061ba:	rex.RX add BYTE PTR [rdi+0x0],r13b
 10061be:	ins    BYTE PTR es:[rdi],dx
 10061bf:	add    BYTE PTR [rax+rax*1+0x65],ah
 10061c3:	add    BYTE PTR [rdx+0x0],dh
	...
 10061ce:	add    BYTE PTR [rax],al
 10061d0:	and    eax,0x5c007300
 10061d5:	add    BYTE PTR [rbx+0x0],dl
 10061d8:	push   rcx
 10061d9:	add    BYTE PTR [rax+rax*1+0x44],cl
 10061dd:	add    BYTE PTR [rcx+0x0],cl
 10061e0:	add    BYTE PTR [r15+0x0],al
 10061e4:	pop    rdi
 10061e5:	add    BYTE PTR [rip+0x34003000],ah        # 0x350091eb
 10061eb:	add    BYTE PTR [rax+rax*1+0x25],ah
 10061ef:	add    BYTE PTR [rax],dh
 10061f1:	add    BYTE PTR [rdx],dh
 10061f3:	add    BYTE PTR [rax+rax*1+0x25],ah
 10061f7:	add    BYTE PTR [rax],dh
 10061f9:	add    BYTE PTR [rdx],dh
 10061fb:	add    BYTE PTR [rax+rax*1+0x5f],ah
 10061ff:	add    BYTE PTR [rip+0x32003000],ah        # 0x33009205
 1006205:	add    BYTE PTR [rax+rax*1+0x25],ah
 1006209:	add    BYTE PTR [rax],dh
 100620b:	add    BYTE PTR [rdx],dh
 100620d:	add    BYTE PTR [rax+rax*1+0x25],ah
 1006211:	add    BYTE PTR [rax],dh
 1006213:	add    BYTE PTR [rdx],dh
 1006215:	add    BYTE PTR [rax+rax*1+0x2e],ah
 1006219:	add    BYTE PTR [rbp+0x0],cl
 100621c:	add    BYTE PTR [rbp+0x0],r9b
 1006220:	push   rax
 1006221:	add    BYTE PTR [rax],al
 1006223:	add    BYTE PTR [rax],al
 1006225:	add    BYTE PTR [rax],al
 1006227:	add    BYTE PTR [rax+rax*1+0x75],al
 100622b:	add    BYTE PTR [rbp+0x0],ch
 100622e:	jo     0x1006230
 1006230:	rex.WRXB add BYTE PTR [r8+0x0],r14b
 1006234:	je     0x1006236
 1006236:	imul   eax,DWORD PTR [rax],0x6e006f
 100623c:	jae    0x100623e
 100623e:	add    BYTE PTR [rax],al
 1006240:	push   rbx
 1006241:	add    BYTE PTR [rax+rax*1+0x61],dh
 1006245:	add    BYTE PTR [rbx+0x0],ah
 1006248:	imul   eax,DWORD PTR [rax],0x20
 100624b:	add    BYTE PTR [rdi+0x0],ch
 100624e:	jbe    0x1006250
 1006250:	add    BYTE PTR gs:[rdx+0x0],dh
 1006254:	data16 add BYTE PTR [rax+rax*1+0x6f],ch
 1006259:	add    BYTE PTR [rdi+0x0],dh
 100625c:	and    BYTE PTR [rax],al
 100625e:	sub    eax,0x20002d00
 1006263:	add    BYTE PTR [rcx+0x0],ah
 1006266:	(bad)  
 1006267:	add    BYTE PTR [rdi+0x0],ch
 100626a:	jb     0x100626c
 100626c:	je     0x100626e
 100626e:	imul   eax,DWORD PTR [rax],0x67006e
 1006274:	add    BYTE PTR [rax],al
 1006276:	add    BYTE PTR [rax],al
 1006278:	rex.WRB add BYTE PTR [r9+0x0],r12b
 100627c:	js     0x100627e
 100627e:	add    BYTE PTR [rbp+0x0],r14b
 1006282:	ins    DWORD PTR es:[rdi],dx
 1006283:	add    BYTE PTR [rax+0x0],dh
 1006286:	jae    0x1006288
	...
 1006290:	and    eax,0x5c007300
 1006295:	add    BYTE PTR [rbp+0x0],cl
 1006298:	push   rbx
 1006299:	add    BYTE PTR [rbx+0x0],dl
 100629c:	push   rcx
 100629d:	add    BYTE PTR [rax+rax*1+0x53],cl
 10062a1:	add    BYTE PTR [rbp+0x0],ah
 10062a4:	jb     0x10062a6
 10062a6:	jbe    0x10062a8
 10062a8:	add    BYTE PTR gs:[rdx+0x0],dh
 10062ac:	pop    rsp
 10062ad:	add    BYTE PTR [rbx+0x0],ah
 10062b0:	jne    0x10062b2
 10062b2:	jb     0x10062b4
 10062b4:	jb     0x10062b6
 10062b6:	add    BYTE PTR gs:[rsi+0x0],ch
 10062ba:	je     0x10062bc
 10062bc:	jbe    0x10062be
 10062be:	add    BYTE PTR gs:[rdx+0x0],dh
 10062c2:	jae    0x10062c4
 10062c4:	imul   eax,DWORD PTR [rax],0x6e006f
 10062ca:	add    BYTE PTR [rax],al
 10062cc:	add    BYTE PTR [rax],al
 10062ce:	add    BYTE PTR [rax],al
 10062d0:	(bad)  
 10062d1:	add    BYTE PTR [rbx+0x0],al
 10062d4:	movsxd eax,DWORD PTR [rax]
 10062d6:	outs   dx,DWORD PTR ds:[rsi]
 10062d7:	add    BYTE PTR [rbp+0x0],ch
 10062da:	jo     0x10062dc
 10062dc:	(bad)  
 10062dd:	add    BYTE PTR [rbx+0x0],ah
 10062e0:	je     0x10062e2
 10062e2:	add    BYTE PTR cs:[rbp+0x0],ah
 10062e6:	js     0x10062e8
 10062e8:	add    BYTE PTR gs:[rax],ah
 10062eb:	add    BYTE PTR [rdi],ch
 10062ed:	add    BYTE PTR [rbx+0x0],al
 10062f0:	and    BYTE PTR [rax],al
 10062f2:	(bad)  
 10062f3:	add    BYTE PTR [rbx+0x0],dl
 10062f6:	and    BYTE PTR [rax],al
 10062f8:	(bad)  
 10062f9:	add    BYTE PTR [rcx+0x0],cl
 10062fc:	and    BYTE PTR [rax],al
 10062fe:	sub    al,BYTE PTR [rax]
 1006300:	add    BYTE PTR cs:[rdx],ch
 1006303:	add    BYTE PTR [rsi],bh
 1006305:	add    BYTE PTR [rsi+0x0],ch
 1006308:	jne    0x100630a
 100630a:	ins    BYTE PTR es:[rdi],dx
 100630b:	add    BYTE PTR [rax],ah
 100630d:	add    BYTE PTR [rdx],dh
 100630f:	add    BYTE PTR [rsi],bh
 1006311:	add    BYTE PTR [rsi],ah
 1006313:	add    BYTE PTR [rcx],dh
	...
 100631d:	add    BYTE PTR [rax],al
 100631f:	add    BYTE PTR [rax+rax*1+0x53],bl
 1006323:	add    BYTE PTR [rax+rax*1+0x72],dh
 1006327:	add    BYTE PTR [rcx+0x0],ch
 100632a:	outs   dx,BYTE PTR ds:[rsi]
 100632b:	add    BYTE PTR [rdi+0x0],ah
 100632e:	rex.RX add BYTE PTR [rcx+0x0],r13b
 1006332:	ins    BYTE PTR es:[rdi],dx
 1006333:	add    BYTE PTR [rbp+0x0],ah
 1006336:	rex.WB add BYTE PTR [r14+0x0],bpl
 100633a:	data16 add BYTE PTR [rdi+0x0],ch
 100633e:	pop    rsp
 100633f:	add    BYTE PTR [rax],dh
 1006341:	add    BYTE PTR [rax+rax*1],dh
 1006344:	xor    BYTE PTR [rax],al
 1006346:	cmp    DWORD PTR [rax],eax
 1006348:	xor    BYTE PTR [rax],al
 100634a:	xor    al,0x0
 100634c:	add    BYTE PTR [r8+rax*1],r14b
 1006350:	pop    rsp
 1006351:	add    BYTE PTR [rsi+0x0],al
 1006354:	imul   eax,DWORD PTR [rax],0x65006c
 100635a:	push   rsi
 100635b:	add    BYTE PTR [rbp+0x0],ah
 100635e:	jb     0x1006360
 1006360:	jae    0x1006362
 1006362:	imul   eax,DWORD PTR [rax],0x6e006f
	...
 1006370:	pop    rsp
 1006371:	add    BYTE PTR [rbx+0x0],dl
 1006374:	je     0x1006376
 1006376:	jb     0x1006378
 1006378:	imul   eax,DWORD PTR [rax],0x67006e
 100637e:	rex.RX add BYTE PTR [rcx+0x0],r13b
 1006382:	ins    BYTE PTR es:[rdi],dx
 1006383:	add    BYTE PTR [rbp+0x0],ah
 1006386:	rex.WB add BYTE PTR [r14+0x0],bpl
 100638a:	data16 add BYTE PTR [rdi+0x0],ch
 100638e:	pop    rsp
 100638f:	add    BYTE PTR [rax],dh
 1006391:	add    BYTE PTR [rax+rax*1],dh
 1006394:	xor    BYTE PTR [rax],al
 1006396:	cmp    DWORD PTR [rax],eax
 1006398:	xor    BYTE PTR [rax],al
 100639a:	xor    al,0x0
 100639c:	add    BYTE PTR [r8+rax*1],r14b
 10063a0:	pop    rsp
 10063a1:	add    BYTE PTR [rax+rax*1+0x65],cl
 10063a5:	add    BYTE PTR [rdi+0x0],ah
 10063a8:	(bad)  
 10063a9:	add    BYTE PTR [rax+rax*1+0x43],ch
 10063ad:	add    BYTE PTR [rdi+0x0],ch
 10063b0:	jo     0x10063b2
 10063b2:	jns    0x10063b4
 10063b4:	jb     0x10063b6
 10063b6:	imul   eax,DWORD PTR [rax],0x680067
 10063bc:	je     0x10063be
 10063be:	add    BYTE PTR [rax],al
 10063c0:	and    eax,0x0
 10063c5:	add    BYTE PTR [rax],al
 10063c7:	add    BYTE PTR [rbx+0x0],dl
 10063ca:	push   rsp
 10063cb:	add    BYTE PTR [rcx+0x0],al
 10063ce:	push   rdx
 10063cf:	add    BYTE PTR [rax+rax*1+0x0],dl
 10063d3:	add    BYTE PTR [rax],al
 10063d5:	add    BYTE PTR [rax],al
 10063d7:	add    BYTE PTR [rbx+0x0],dl
 10063da:	push   rsp
 10063db:	add    BYTE PTR [rdi+0x0],cl
 10063de:	push   rax
	...
 10063e7:	add    BYTE PTR [rbx+0x0],dl
 10063ea:	push   rsp
 10063eb:	add    BYTE PTR [rdi+0x0],cl
 10063ee:	push   rax
 10063ef:	add    BYTE PTR [rdi+0x0],bl
 10063f2:	add    BYTE PTR [r10+0x0],al
 10063f6:	rex.WRXB add BYTE PTR [r10+0x0],r10b
 10063fa:	push   rsp
 10063fb:	add    BYTE PTR [rax],al
 10063fd:	add    BYTE PTR [rax],al
 10063ff:	add    BYTE PTR [rax+rax*1+0x49],al
 1006403:	add    BYTE PTR [rcx+0x0],al
 1006406:	add    BYTE PTR [r8+r8*1],r12b
 100640a:	add    BYTE PTR [rax],al
 100640c:	add    BYTE PTR [rax],al
 100640e:	add    BYTE PTR [rax],al
 1006410:	jo     0x1006412
 1006412:	jae    0x1006414
 1006414:	jae    0x1006416
 1006416:	jp     0x1006418
 1006418:	imul   eax,DWORD PTR [rax],0x2e0070
 100641e:	add    BYTE PTR [r8+0x0],r11b
 1006422:	add    BYTE PTR [r8],r8b
 1006425:	add    BYTE PTR [rax],al
 1006427:	add    BYTE PTR [rax+0x0],al
 100642a:	add    BYTE PTR [rax],al
 100642c:	add    BYTE PTR [rax],al
 100642e:	add    BYTE PTR [rax],al
 1006430:	je     0x1006432
 1006432:	movsxd eax,DWORD PTR [rax]
 1006434:	jo     0x1006436
 1006436:	add    BYTE PTR [rax],al
 1006438:	outs   dx,BYTE PTR ds:[rsi]
 1006439:	add    BYTE PTR [rax+0x0],dh
 100643c:	add    BYTE PTR [rax],al
 100643e:	add    BYTE PTR [rax],al
 1006440:	ins    BYTE PTR es:[rdi],dx
 1006441:	add    BYTE PTR [rax+0x0],dh
 1006444:	movsxd eax,DWORD PTR [rax]
 1006446:	add    BYTE PTR [rax],al
 1006448:	jbe    0x100644a
 100644a:	imul   eax,DWORD PTR [rax],0x61
 1006450:	rex.WB add BYTE PTR [r14+0x0],bpl
 1006454:	jbe    0x1006456
 1006456:	(bad)  
 1006457:	add    BYTE PTR [rax+rax*1+0x69],ch
 100645b:	add    BYTE PTR [rax+rax*1+0x20],ah
 100645f:	add    BYTE PTR [rax+0x0],dh
 1006462:	(bad)  
 1006463:	add    BYTE PTR [rdx+0x0],dh
 1006466:	(bad)  
 1006467:	add    BYTE PTR [rbp+0x0],ch
 100646a:	jae    0x100646c
 100646c:	add    BYTE PTR [rax],al
 100646e:	add    BYTE PTR [rax],al
 1006470:	and    eax,DWORD PTR [rax]
 1006472:	and    eax,DWORD PTR [rax]
 1006474:	movsxd eax,DWORD PTR [rax]
 1006476:	outs   dx,DWORD PTR ds:[rsi]
 1006477:	add    BYTE PTR [rsi+0x0],ch
 100647a:	jae    0x100647c
 100647c:	outs   dx,DWORD PTR ds:[rsi]
 100647d:	add    BYTE PTR [rax+rax*1+0x65],ch
 1006481:	add    BYTE PTR [rsi],ch
 1006483:	add    BYTE PTR [rax+rax*1+0x6f],ch
 1006487:	add    BYTE PTR [rdi+0x0],ah
 100648a:	add    BYTE PTR [rax],al
 100648c:	add    BYTE PTR [rax],al
 100648e:	add    BYTE PTR [rax],al
 1006490:	and    eax,DWORD PTR [rax]
 1006492:	and    eax,DWORD PTR [rax]
 1006494:	data16 add BYTE PTR [rax+rax*1+0x70],dh
 1006499:	add    BYTE PTR [rsi],ch
 100649b:	add    BYTE PTR [rdi+0x0],ch
 100649e:	jne    0x10064a0
 10064a0:	je     0x10064a2
 10064a2:	add    BYTE PTR [rax],al
 10064a4:	add    BYTE PTR [rax],al
 10064a6:	add    BYTE PTR [rax],al
 10064a8:	(bad)  
 10064a9:	jns    0x100651f
 10064ab:	gs jae 0x10064ce
 10064ae:	jae    0x1006515
 10064b0:	outs   dx,BYTE PTR ds:[rsi]
 10064b1:	je     0x10064b3
	...
 10064bf:	add    BYTE PTR [rip+0xd007300],ah        # 0xe00d7c5
 10064c5:	add    BYTE PTR [rdx],cl
 10064c7:	add    BYTE PTR [rip+0xd007300],ah        # 0xe00d7cd
 10064cd:	add    BYTE PTR [rdx],cl
 10064cf:	add    BYTE PTR [rbx+0x0],ah
 10064d2:	add    BYTE PTR fs:[rax],ah
 10064d5:	add    BYTE PTR [rip+0xd007300],ah        # 0xe00d7db
 10064db:	add    BYTE PTR [rdx],cl
 10064dd:	add    BYTE PTR [rdx+0x0],ah
 10064e0:	imul   eax,DWORD PTR [rax],0xd006e
 10064e6:	or     al,BYTE PTR [rax]
 10064e8:	jo     0x10064ea
 10064ea:	jne    0x10064ec
 10064ec:	je     0x10064ee
 10064ee:	and    BYTE PTR [rax],al
 10064f0:	and    eax,0x20007300
 10064f5:	add    BYTE PTR [rip+0x25007300],ah        # 0x2600d7fb
 10064fb:	add    BYTE PTR [rbx+0x0],dh
 10064fe:	or     eax,0x62000a00
 1006503:	add    BYTE PTR [rcx+0x0],bh
 1006506:	add    BYTE PTR gs:[rip+0xa00],cl        # 0x1006f0d
 100650d:	add    BYTE PTR [rax],al
 100650f:	add    BYTE PTR [rsi+0x0],ah
 1006512:	je     0x1006514
 1006514:	jo     0x1006516
 1006516:	add    BYTE PTR cs:[rbp+0x0],ah
 100651a:	js     0x100651c
 100651c:	add    BYTE PTR gs:[rax],al
 100651f:	add    BYTE PTR [rip+0x74006600],ah        # 0x7500cb25
 1006525:	add    BYTE PTR [rax+0x0],dh
 1006528:	jne    0x100652a
 100652a:	jae    0x100652c
 100652c:	add    BYTE PTR gs:[rdx+0x0],dh
 1006530:	and    eax,0x0
 1006535:	add    BYTE PTR [rax],al
 1006537:	add    BYTE PTR [rcx+0x0],ah
 100653a:	outs   dx,BYTE PTR ds:[rsi]
 100653b:	add    BYTE PTR [rdi+0x0],ch
 100653e:	outs   dx,BYTE PTR ds:[rsi]
 100653f:	add    BYTE PTR [rcx+0x0],bh
 1006542:	ins    DWORD PTR es:[rdi],dx
 1006543:	add    BYTE PTR [rdi+0x0],ch
 1006546:	jne    0x1006548
 1006548:	jae    0x100654a
 100654a:	add    BYTE PTR [rax],al
 100654c:	add    BYTE PTR [rax],al
 100654e:	add    BYTE PTR [rax],al
 1006550:	and    eax,0x74006600
 1006555:	add    BYTE PTR [rax+0x0],dh
 1006558:	jo     0x100655a
 100655a:	ja     0x100655c
 100655c:	add    BYTE PTR fs:[rip+0x0],ah        # 0x1006563
 1006563:	add    BYTE PTR [rax],al
 1006565:	add    BYTE PTR [rax],al
 1006567:	add    BYTE PTR [rbx+0x0],dh
 100656a:	jno    0x100656c
 100656c:	ins    BYTE PTR es:[rdi],dx
 100656d:	add    BYTE PTR [rax+rax*1+0x69],ah
 1006571:	add    BYTE PTR [rcx+0x0],ah
 1006574:	add    BYTE PTR [eax+0x0],al
 1006578:	ins    DWORD PTR es:[rdi],dx
 1006579:	add    BYTE PTR [rcx+0x0],ch
 100657c:	movsxd eax,DWORD PTR [rax]
 100657e:	jb     0x1006580
 1006580:	outs   dx,DWORD PTR ds:[rsi]
 1006581:	add    BYTE PTR [rbx+0x0],dh
 1006584:	outs   dx,DWORD PTR ds:[rsi]
 1006585:	add    BYTE PTR [rsi+0x0],ah
 1006588:	je     0x100658a
 100658a:	add    BYTE PTR cs:[rbx+0x0],ah
 100658e:	outs   dx,DWORD PTR ds:[rsi]
 100658f:	add    BYTE PTR [rbp+0x0],ch
 1006592:	add    BYTE PTR [rax],al
 1006594:	add    BYTE PTR [rax],al
 1006596:	add    BYTE PTR [rax],al
 1006598:	and    eax,0x74006600
 100659d:	add    BYTE PTR [rax+0x0],dh
 10065a0:	jae    0x10065a2
 10065a2:	add    BYTE PTR gs:[rdx+0x0],dh
 10065a6:	jbe    0x10065a8
 10065a8:	add    BYTE PTR gs:[rdx+0x0],dh
 10065ac:	jo     0x10065ae
 10065ae:	(bad)  
 10065af:	add    BYTE PTR [rax+rax*1+0x68],dh
 10065b3:	add    BYTE PTR [rip+0x69000000],ah        # 0x6a0065b9
 10065b9:	add    BYTE PTR [rsi+0x0],ch
 10065bc:	movsxd eax,DWORD PTR [rax]
 10065be:	outs   dx,DWORD PTR ds:[rsi]
 10065bf:	add    BYTE PTR [rbp+0x0],ch
 10065c2:	imul   eax,DWORD PTR [rax],0x67006e
 10065c8:	(bad)  
 10065c9:	add    BYTE PTR [rbx+0x0],dh
 10065cc:	jno    0x10065ce
 10065ce:	ins    BYTE PTR es:[rdi],dx
	...
 10065d7:	add    BYTE PTR [rsi],ch
 10065d9:	add    BYTE PTR [rsi+0x0],al
 10065dc:	push   rsp
 10065dd:	add    BYTE PTR [rax+0x0],dl
	...
 10065e8:	(bad)  
 10065e9:	add    BYTE PTR [rbx+0x0],al
 10065ec:	and    eax,0x20007300
 10065f1:	add    BYTE PTR [rip+0x3a007300],ch        # 0x3b00d8f7
 10065f7:	add    BYTE PTR [rdx],ah
 10065f9:	add    BYTE PTR [rip+0x22007300],ah        # 0x2300d8ff
 10065ff:	add    BYTE PTR [rax],ah
 1006601:	add    BYTE PTR [rip+0x20007300],ah        # 0x2100d907
 1006607:	add    BYTE PTR [rsi],bh
 1006609:	add    BYTE PTR [rdx],ah
 100660b:	add    BYTE PTR [rip+0x22007300],ah        # 0x2300d911
 1006611:	add    BYTE PTR [rax],al
 1006613:	add    BYTE PTR [rax],ah
 1006615:	add    BYTE PTR [rax],al
 1006617:	add    BYTE PTR [rbx+0x0],dl
 100661a:	push   rcx
 100661b:	add    BYTE PTR [rax+rax*1+0x44],cl
 100661f:	add    BYTE PTR [rcx+0x0],ch
 1006622:	(bad)  
 1006623:	add    BYTE PTR [rdi+0x0],ah
 1006626:	add    BYTE PTR cs:[rax+0x0],bl
 100662a:	rex.WRB add BYTE PTR [r8+rax*1+0x0],r9b
 100662f:	add    BYTE PTR [rbx+0x0],dl
 1006632:	add    BYTE PTR [rdi+0x0],r11b
 1006636:	rex.RXB add BYTE PTR [r13+0x0],r12b
 100663a:	outs   dx,BYTE PTR ds:[rsi]
 100663b:	add    BYTE PTR [rbp+0x0],ah
 100663e:	jb     0x1006640
 1006640:	(bad)  
 1006641:	add    BYTE PTR [rax+rax*1+0x2e],ch
 1006645:	add    BYTE PTR [rax+0x0],bl
 1006648:	rex.WRB add BYTE PTR [r8+rax*1+0x0],r9b
 100664d:	add    BYTE PTR [rax],al
 100664f:	add    BYTE PTR [rbx+0x0],dl
 1006652:	add    BYTE PTR [rdi+0x0],r11b
 1006656:	add    BYTE PTR [rbp+0x0],r12b
 100665a:	je     0x100665c
 100665c:	(bad)  
 100665d:	add    BYTE PTR [rcx+0x0],ch
 1006660:	ins    BYTE PTR es:[rdi],dx
 1006661:	add    BYTE PTR [rbp+0x0],ah
 1006664:	add    BYTE PTR fs:[rsi],ch
 1006667:	add    BYTE PTR [rax+0x0],bl
 100666a:	rex.WRB add BYTE PTR [r8+rax*1+0x0],r9b
 100666f:	add    BYTE PTR [rbx+0x0],dl
 1006672:	push   rcx
 1006673:	add    BYTE PTR [rax+rax*1+0x44],cl
 1006677:	add    BYTE PTR [rcx+0x0],ch
 100667a:	(bad)  
 100667b:	add    BYTE PTR [rdi+0x0],ah
 100667e:	pop    rdi
 100667f:	add    BYTE PTR [rbx+0x0],dl
 1006682:	movsxd eax,DWORD PTR [rax]
 1006684:	push   0x6d006500
 1006689:	add    BYTE PTR [rcx+0x0],ah
 100668c:	add    BYTE PTR cs:[rax+0x0],bl
 1006690:	push   rbx
 1006691:	add    BYTE PTR [rax+rax*1+0x0],al
 1006695:	add    BYTE PTR [rax],al
 1006697:	add    BYTE PTR [rdi],ch
 1006699:	add    BYTE PTR [rdi],bh
 100669b:	add    BYTE PTR [rax],al
 100669d:	add    BYTE PTR [rax],al
 100669f:	add    BYTE PTR [rip+0x3f00],ch        # 0x100a5a5
 10066a5:	add    BYTE PTR [rax],al
 10066a7:	add    BYTE PTR [rax+rax*1+0x63],bl
 10066ab:	add    BYTE PTR [rbp+0x0],ch
 10066ae:	add    BYTE PTR fs:[rsi],ch
 10066b1:	add    BYTE PTR [rbp+0x0],ah
 10066b4:	js     0x10066b6
 10066b6:	add    BYTE PTR gs:[rax],al
 10066b9:	add    BYTE PTR [rax],al
 10066bb:	add    BYTE PTR [rax],al
 10066bd:	add    BYTE PTR [rax],al
 10066bf:	add    BYTE PTR [rax+rax*1+0x63],bl
 10066c3:	add    BYTE PTR [rdi+0x0],ch
 10066c6:	ins    DWORD PTR es:[rdi],dx
 10066c7:	add    BYTE PTR [rbp+0x0],ch
 10066ca:	(bad)  
 10066cb:	add    BYTE PTR [rsi+0x0],ch
 10066ce:	add    BYTE PTR fs:[rsi],ch
 10066d1:	add    BYTE PTR [rbx+0x0],ah
 10066d4:	outs   dx,DWORD PTR ds:[rsi]
 10066d5:	add    BYTE PTR [rbp+0x0],ch
	...
 10066e0:	add    BYTE PTR [rcx+0x0],r13b
 10066e4:	(bad)  
 10066e5:	add    BYTE PTR [rdi+0x0],ah
 10066e8:	outs   dx,BYTE PTR ds:[rsi]
 10066e9:	add    BYTE PTR [rdi+0x0],ch
 10066ec:	jae    0x10066ee
 10066ee:	je     0x10066f0
 10066f0:	imul   eax,DWORD PTR [rax],0x200063
 10066f6:	ins    DWORD PTR es:[rdi],dx
 10066f7:	add    BYTE PTR [rdi+0x0],ch
 10066fa:	outs   dx,BYTE PTR ds:[rsi]
 10066fb:	add    BYTE PTR [rcx+0x0],ch
 10066fe:	je     0x1006700
 1006700:	outs   dx,DWORD PTR ds:[rsi]
 1006701:	add    BYTE PTR [rdx+0x0],dh
 1006704:	imul   eax,DWORD PTR [rax],0x67006e
 100670a:	and    BYTE PTR [rax],al
 100670c:	je     0x100670e
 100670e:	outs   dx,DWORD PTR ds:[rsi]
 100670f:	add    BYTE PTR [rdi+0x0],ch
 1006712:	ins    BYTE PTR es:[rdi],dx
 1006713:	add    BYTE PTR [rax],ah
 1006715:	add    BYTE PTR [rsi+0x0],ah
 1006718:	outs   dx,DWORD PTR ds:[rsi]
 1006719:	add    BYTE PTR [rdx+0x0],dh
 100671c:	and    BYTE PTR [rax],al
 100671e:	push   rbx
 100671f:	add    BYTE PTR [rcx+0x0],dl
 1006722:	rex.WR add BYTE PTR [rax],r12b
 1006725:	add    BYTE PTR [rbx+0x0],dl
 1006728:	add    BYTE PTR gs:[rdx+0x0],dh
 100672c:	jbe    0x100672e
 100672e:	add    BYTE PTR gs:[rdx+0x0],dh
 1006732:	add    BYTE PTR [rax],al
 1006734:	(bad)  
 1006735:	add    BYTE PTR [rdx+0x0],dl
 1006738:	add    BYTE PTR [rax],al
 100673a:	add    BYTE PTR [rax],al
 100673c:	sub    eax,0x5200
 1006741:	add    BYTE PTR [rax],al
 1006743:	add    BYTE PTR [rdx],ah
 1006745:	add    BYTE PTR [rax],ah
	...
 100674f:	add    BYTE PTR [rbx+0x0],dl
 1006752:	je     0x1006754
 1006754:	(bad)  
 1006755:	add    BYTE PTR [rdx+0x0],dh
 1006758:	je     0x100675a
 100675a:	jne    0x100675c
 100675c:	jo     0x100675e
 100675e:	push   rax
 100675f:	add    BYTE PTR [rcx+0x0],ah
 1006762:	jb     0x1006764
 1006764:	(bad)  
 1006765:	add    BYTE PTR [rbp+0x0],ch
 1006768:	add    BYTE PTR gs:[rax+rax*1+0x65],dh
 100676d:	add    BYTE PTR [rdx+0x0],dh
 1006770:	jae    0x1006772
 1006772:	add    BYTE PTR [rax],al
 1006774:	add    BYTE PTR [rax],al
 1006776:	add    BYTE PTR [rax],al
 1006778:	add    BYTE PTR [r8+r8*1+0x6f],r13b
 100677d:	add    BYTE PTR [rdx+0x0],ah
 1006780:	(bad)  
 1006781:	add    BYTE PTR [rax+rax*1+0x5c],ch
 1006785:	add    BYTE PTR [rbx+0x0],dl
 1006788:	push   rcx
 1006789:	add    BYTE PTR [rax+rax*1+0x44],cl
 100678d:	add    BYTE PTR [rcx+0x0],cl
 1006790:	add    BYTE PTR [r15+0x0],al
 1006794:	pop    rdi
 1006795:	add    BYTE PTR [rip+0x7300],ah        # 0x100da9b
 100679b:	add    BYTE PTR [rax],al
 100679d:	add    BYTE PTR [rax],al
 100679f:	add    BYTE PTR [rbx+0x0],dl
 10067a2:	push   rcx
 10067a3:	add    BYTE PTR [rax+rax*1+0x44],cl
 10067a7:	add    BYTE PTR [rcx+0x0],cl
 10067aa:	add    BYTE PTR [r15+0x0],al
 10067ae:	add    BYTE PTR [rax],al
 10067b0:	add    BYTE PTR cs:[rcx+0x0],cl
 10067b4:	rex.WRX add BYTE PTR [rcx+0x0],r9b
	...
 10067c0:	push   rdx
 10067c1:	add    BYTE PTR [rbp+0x0],al
 10067c4:	rex.RXB add BYTE PTR [r10],r15b
	...
 10067cf:	add    BYTE PTR [rbx+0x0],al
 10067d2:	outs   dx,DWORD PTR ds:[rsi]
 10067d3:	add    BYTE PTR [rsi+0x0],ch
 10067d6:	data16 add BYTE PTR [rcx+0x0],ch
 10067da:	add    BYTE PTR [ebp+0x0],dh
 10067de:	jb     0x10067e0
 10067e0:	(bad)  
 10067e1:	add    BYTE PTR [rax+rax*1+0x69],dh
 10067e5:	add    BYTE PTR [rdi+0x0],ch
 10067e8:	outs   dx,BYTE PTR ds:[rsi]
 10067e9:	add    BYTE PTR [rax],al
 10067eb:	add    BYTE PTR [rax],al
 10067ed:	add    BYTE PTR [rax],al
 10067ef:	add    BYTE PTR [rdi+0x0],bl
 10067f2:	add    BYTE PTR fs:[rcx+0x0],ch
 10067f6:	(bad)  
 10067f7:	add    BYTE PTR [rdi+0x0],ah
 10067fa:	je     0x10067fc
 10067fc:	add    BYTE PTR gs:[rbp+0x0],ch
 1006800:	jo     0x1006802
 1006802:	add    BYTE PTR cs:[rax+0x0],bh
 1006806:	ins    DWORD PTR es:[rdi],dx
 1006807:	add    BYTE PTR [rax+rax*1+0x0],ch
 100680b:	add    BYTE PTR [rax],al
 100680d:	add    BYTE PTR [rax],al
 100680f:	add    BYTE PTR [rip+0x5f007300],ah        # 0x6000db15
 1006815:	add    BYTE PTR [rip+0x35003000],ah        # 0x3600981b
 100681b:	add    BYTE PTR [rax+rax*1+0x0],ah
 100681f:	add    BYTE PTR [rsi],ch
 1006821:	add    BYTE PTR [rax+rax*1+0x4f],cl
 1006825:	add    BYTE PTR [rdi+0x0],al
	...
 1006830:	and    eax,0x65007000
 1006835:	add    BYTE PTR [rdx+0x0],dh
 1006838:	data16 add BYTE PTR [rbp+0x0],ch
 100683c:	outs   dx,DWORD PTR ds:[rsi]
 100683d:	add    BYTE PTR [rsi+0x0],ch
 1006840:	ins    DWORD PTR es:[rdi],dx
 1006841:	add    BYTE PTR [rcx+0x0],ah
 1006844:	js     0x1006846
 1006846:	jo     0x1006848
 1006848:	jb     0x100684a
 100684a:	imul   eax,DWORD PTR [rax],0x61006d
 1006850:	jb     0x1006852
 1006852:	jns    0x1006854
 1006854:	and    eax,0x25000000
 1006859:	add    BYTE PTR [rax+0x0],dh
 100685c:	add    BYTE PTR gs:[rdx+0x0],dh
 1006860:	data16 add BYTE PTR [rbp+0x0],ch
 1006864:	outs   dx,DWORD PTR ds:[rsi]
 1006865:	add    BYTE PTR [rsi+0x0],ch
 1006868:	ins    DWORD PTR es:[rdi],dx
 1006869:	add    BYTE PTR [rcx+0x0],ah
 100686c:	js     0x100686e
 100686e:	jae    0x1006870
 1006870:	add    BYTE PTR gs:[rbx+0x0],ah
 1006874:	outs   dx,DWORD PTR ds:[rsi]
 1006875:	add    BYTE PTR [rsi+0x0],ch
 1006878:	add    BYTE PTR fs:[rcx+0x0],ah
 100687c:	jb     0x100687e
 100687e:	jns    0x1006880
 1006880:	and    eax,0x0
 1006885:	add    BYTE PTR [rax],al
 1006887:	add    BYTE PTR [rax-0x58],cl
 100688a:	add    BYTE PTR [rcx],al
 100688c:	add    BYTE PTR [rax],al
 100688e:	add    BYTE PTR [rax],al
 1006890:	jle    0x100688b
 1006892:	add    eax,DWORD PTR [rcx]
 1006894:	add    BYTE PTR [rax],al
 1006896:	add    BYTE PTR [rax],al
 1006898:	sar    cl,0x2
 100689b:	add    DWORD PTR [rax],eax
 100689d:	add    BYTE PTR [rax],al
 100689f:	add    BYTE PTR [rax-0x9],al
 10068a2:	add    al,BYTE PTR [rcx]
 10068a4:	add    BYTE PTR [rax],al
 10068a6:	add    BYTE PTR [rax],al
 10068a8:	lock scas al,BYTE PTR es:[rdi]
 10068aa:	add    BYTE PTR [rcx],al
 10068ac:	add    BYTE PTR [rax],al
 10068ae:	add    BYTE PTR [rax],al
 10068b0:	add    BYTE PTR [rdi+0x100],ch
 10068b6:	add    BYTE PTR [rax],al
 10068b8:	sub    al,BYTE PTR [rax]
 10068ba:	add    BYTE PTR cs:[rdx],ch
 10068bd:	add    BYTE PTR [rax],al
 10068bf:	add    BYTE PTR [rip+0x74006600],ah        # 0x7500cec5
 10068c5:	add    BYTE PTR [rax+0x0],dh
 10068c8:	jae    0x10068ca
 10068ca:	add    BYTE PTR gs:[rdx+0x0],dh
 10068ce:	jbe    0x10068d0
 10068d0:	add    BYTE PTR gs:[rdx+0x0],dh
 10068d4:	and    eax,0x2f000000
 10068d9:	add    BYTE PTR [rbx+0x0],al
 10068dc:	add    BYTE PTR fs:[rbp+0x0],ah
 10068e0:	ins    BYTE PTR es:[rdi],dx
 10068e1:	add    BYTE PTR [rax],ah
 10068e3:	add    BYTE PTR [rdx],ah
 10068e5:	add    BYTE PTR [rip+0x25007300],ah        # 0x2600dbeb
 10068eb:	add    BYTE PTR [rbx+0x0],dh
 10068ee:	and    al,BYTE PTR [rax]
 10068f0:	and    BYTE PTR [rax],al
 10068f2:	(bad)  
 10068f3:	add    BYTE PTR [rcx+0x0],dl
	...
 10068fe:	add    BYTE PTR [rax],al
 1006900:	add    BYTE PTR [r10+0x0],r14b
 1006904:	jb     0x1006906
 1006906:	outs   dx,DWORD PTR ds:[rsi]
 1006907:	add    BYTE PTR [rdx+0x0],dh
 100690a:	and    BYTE PTR [rax],al
 100690c:	imul   eax,DWORD PTR [rax],0x69006e
 1006912:	je     0x1006914
 1006914:	imul   eax,DWORD PTR [rax],0x6c0061
 100691a:	imul   eax,DWORD PTR [rax],0x69007a
 1006920:	outs   dx,BYTE PTR ds:[rsi]
 1006921:	add    BYTE PTR [rdi+0x0],ah
 1006924:	and    BYTE PTR [rax],al
 1006926:	add    BYTE PTR fs:[rbp+0x0],dh
 100692a:	ins    DWORD PTR es:[rdi],dx
 100692b:	add    BYTE PTR [rax+0x0],dh
 100692e:	and    BYTE PTR [rax],al
 1006930:	movsxd eax,DWORD PTR [rax]
 1006932:	jb     0x1006934
 1006934:	imul   eax,DWORD PTR [rax],0x690074
 100693a:	movsxd eax,DWORD PTR [rax]
 100693c:	(bad)  
 100693d:	add    BYTE PTR [rax+rax*1+0x20],ch
 1006941:	add    BYTE PTR [rbx+0x0],dh
 1006944:	add    BYTE PTR gs:[rbx+0x0],ah
 1006948:	je     0x100694a
 100694a:	imul   eax,DWORD PTR [rax],0x6e006f
 1006950:	or     al,BYTE PTR [rax]
	...
 100695e:	add    BYTE PTR [rax],al
 1006960:	add    BYTE PTR [r8+0x0],r15b
 1006964:	movsxd eax,DWORD PTR [rax]
 1006966:	add    BYTE PTR gs:[rax+0x0],dh
 100696a:	je     0x100696c
 100696c:	imul   eax,DWORD PTR [rax],0x6e006f
 1006972:	and    BYTE PTR [rax],al
 1006974:	outs   dx,DWORD PTR ds:[rsi]
 1006975:	add    BYTE PTR [rbx+0x0],ah
 1006978:	movsxd eax,DWORD PTR [rax]
 100697a:	jne    0x100697c
 100697c:	jb     0x100697e
 100697e:	jb     0x1006980
 1006980:	add    BYTE PTR gs:[rax+rax*1+0x2e],ah
 1006985:	add    BYTE PTR [rax],ah
 1006987:	add    BYTE PTR [rax],ah
 1006989:	add    BYTE PTR [rbp+0x0],al
 100698c:	js     0x100698e
 100698e:	imul   eax,DWORD PTR [rax],0x690074
 1006994:	outs   dx,BYTE PTR ds:[rsi]
 1006995:	add    BYTE PTR [rdi+0x0],ah
 1006998:	add    BYTE PTR cs:[rax],ah
 100699b:	add    BYTE PTR [rax],ah
 100699d:	add    BYTE PTR [rbp+0x0],cl
 10069a0:	jae    0x10069a2
 10069a2:	add    BYTE PTR [eip+0x73002500],bh        # 0x74008ea9
 10069a9:	add    BYTE PTR [rsi],ch
 10069ab:	add    BYTE PTR [rdx],cl
 10069ad:	add    BYTE PTR [rax],al
 10069af:	add    BYTE PTR [rdx],ah
 10069b1:	add    eax,0x21993
 10069b6:	add    BYTE PTR [rax],al
 10069b8:	mov    al,0xb6
 10069ba:	add    eax,0x0
 10069bf:	add    BYTE PTR [rax],al
 10069c1:	add    BYTE PTR [rax],al
 10069c3:	add    BYTE PTR [rax+rax*1],al
 10069c6:	add    BYTE PTR [rax],al
 10069c8:	shl    BYTE PTR [rsi+0x200005],0x0
	...
 10069d7:	add    BYTE PTR [rdx],ah
 10069d9:	add    eax,0x41993
 10069de:	add    BYTE PTR [rax],al
 10069e0:	lock mov dh,0x5
 10069e3:	add    BYTE PTR [rcx],al
 10069e5:	add    BYTE PTR [rax],al
 10069e7:	add    BYTE PTR [rax],dl
 10069e9:	mov    bh,0x5
 10069eb:	add    BYTE PTR [rsi],al
 10069ed:	add    BYTE PTR [rax],al
 10069ef:	add    BYTE PTR [rax],bh
 10069f1:	mov    bh,0x5
 10069f3:	add    BYTE PTR [rax],ah
	...
 10069fd:	add    BYTE PTR [rax],al
 10069ff:	add    BYTE PTR [rdx],ah
 1006a01:	add    eax,0x31993
 1006a06:	add    BYTE PTR [rax],al
 1006a08:	cwde   
 1006a09:	mov    bh,0x5
	...
 1006a13:	add    BYTE PTR [rsi],al
 1006a15:	add    BYTE PTR [rax],al
 1006a17:	add    BYTE PTR [rax+0x200005b7],dh
	...
 1006a25:	add    BYTE PTR [rax],al
 1006a27:	add    BYTE PTR [rdx],ah
 1006a29:	add    eax,0x51993
 1006a2e:	add    BYTE PTR [rax],al
 1006a30:	add    al,0xb8
 1006a32:	add    eax,0x0
 1006a37:	add    BYTE PTR [rax],al
 1006a39:	add    BYTE PTR [rax],al
 1006a3b:	add    BYTE PTR [rbx],cl
 1006a3d:	add    BYTE PTR [rax],al
 1006a3f:	add    BYTE PTR [rax+rdi*4],ch
 1006a42:	add    eax,0x6800
	...
 1006a4f:	add    BYTE PTR [rdx],ah
 1006a51:	add    eax,0x51993
 1006a56:	add    BYTE PTR [rax],al
 1006a58:	adc    BYTE PTR [rcx+0x5],bh
 1006a5e:	add    BYTE PTR [rax],al
 1006a60:	add    BYTE PTR [rax],al
 1006a62:	add    BYTE PTR [rax],al
 1006a64:	or     al,BYTE PTR [rax]
 1006a66:	add    BYTE PTR [rax],al
 1006a68:	cmp    BYTE PTR [rcx+0x400005],bh
	...
 1006a76:	add    BYTE PTR [rax],al
 1006a78:	and    al,BYTE PTR [rip+0x11993]        # 0x1018411
 1006a7e:	add    BYTE PTR [rax],al
 1006a80:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1006a81:	mov    ecx,0x5
 1006a86:	add    BYTE PTR [rax],al
 1006a88:	add    BYTE PTR [rax],al
 1006a8a:	add    BYTE PTR [rax],al
 1006a8c:	add    eax,DWORD PTR [rax]
 1006a8e:	add    BYTE PTR [rax],al
 1006a90:	lods   al,BYTE PTR ds:[rsi]
 1006a91:	mov    ecx,0x500005
	...
 1006a9e:	add    BYTE PTR [rax],al
 1006aa0:	and    al,BYTE PTR [rip+0x21993]        # 0x1028439
 1006aa6:	add    BYTE PTR [rax],al
 1006aa8:	fdivr  DWORD PTR [rcx+0x5]
 1006aae:	add    BYTE PTR [rax],al
 1006ab0:	add    BYTE PTR [rax],al
 1006ab2:	add    BYTE PTR [rax],al
 1006ab4:	add    al,0x0
 1006ab6:	add    BYTE PTR [rax],al
 1006ab8:	call   0x29007076
	...
 1006ac5:	add    BYTE PTR [rax],al
 1006ac7:	add    BYTE PTR [rdx],ah
 1006ac9:	add    eax,0x11993
 1006ace:	add    BYTE PTR [rax],al
 1006ad0:	sub    BYTE PTR [rdx+0x5],bh
 1006ad6:	add    BYTE PTR [rax],al
 1006ad8:	add    BYTE PTR [rax],al
 1006ada:	add    BYTE PTR [rax],al
 1006adc:	add    eax,DWORD PTR [rax]
 1006ade:	add    BYTE PTR [rax],al
 1006ae0:	xor    BYTE PTR [rdx+0x400005],bh
	...
 1006aee:	add    BYTE PTR [rax],al
 1006af0:	and    al,BYTE PTR [rip+0x51993]        # 0x1058489
 1006af6:	add    BYTE PTR [rax],al
 1006af8:	ins    BYTE PTR es:[rdi],dx
 1006af9:	mov    edx,0x10005
 1006afe:	add    BYTE PTR [rax],al
 1006b00:	xchg   esp,eax
 1006b01:	mov    edx,0xc0005
 1006b06:	add    BYTE PTR [rax],al
 1006b08:	sar    BYTE PTR [rdx+0x980005],1
	...
 1006b16:	add    BYTE PTR [rax],al
 1006b18:	and    al,BYTE PTR [rip+0x11993]        # 0x10184b1
 1006b1e:	add    BYTE PTR [rax],al
 1006b20:	jo     0x1006add
 1006b22:	add    eax,0x0
 1006b27:	add    BYTE PTR [rax],al
 1006b29:	add    BYTE PTR [rax],al
 1006b2b:	add    BYTE PTR [rbx],al
 1006b2d:	add    BYTE PTR [rax],al
 1006b2f:	add    BYTE PTR [rax-0x45],bh
 1006b32:	add    eax,0x4800
	...
 1006b3f:	add    BYTE PTR [rdx],ah
 1006b41:	add    eax,0x11993
 1006b46:	add    BYTE PTR [rax],al
 1006b48:	test   al,0xbb
 1006b4a:	add    eax,0x0
 1006b4f:	add    BYTE PTR [rax],al
 1006b51:	add    BYTE PTR [rax],al
 1006b53:	add    BYTE PTR [rip+0xffffffffb0000000],al        # 0xffffffffb1006b59
 1006b59:	mov    ebx,0x400005
	...
 1006b66:	add    BYTE PTR [rax],al
 1006b68:	and    al,BYTE PTR [rip+0x21993]        # 0x1028501
 1006b6e:	add    BYTE PTR [rax],al
 1006b70:	call   0x1007130
 1006b75:	add    BYTE PTR [rax],al
 1006b77:	add    BYTE PTR [rax],al
 1006b79:	add    BYTE PTR [rax],al
 1006b7b:	add    BYTE PTR [rip+0xfffffffff8000000],al        # 0xfffffffff9006b81
 1006b81:	mov    ebx,0x280005
	...
 1006b8e:	add    BYTE PTR [rax],al
 1006b90:	and    al,BYTE PTR [rip+0x31993]        # 0x1038529
 1006b96:	add    BYTE PTR [rax],al
 1006b98:	cmp    al,0xbc
 1006b9a:	add    eax,0x0
 1006b9f:	add    BYTE PTR [rax],al
 1006ba1:	add    BYTE PTR [rax],al
 1006ba3:	add    BYTE PTR [rdi],al
 1006ba5:	add    BYTE PTR [rax],al
 1006ba7:	add    BYTE PTR [rsp+rdi*4+0x5],dl
 1006bab:	add    BYTE PTR [rax],dh
	...
 1006bb5:	add    BYTE PTR [rax],al
 1006bb7:	add    BYTE PTR [rdx],ah
 1006bb9:	add    eax,0x21993
 1006bbe:	add    BYTE PTR [rax],al
 1006bc0:	mov    eax,0x5bc
 1006bc5:	add    BYTE PTR [rax],al
 1006bc7:	add    BYTE PTR [rax],al
 1006bc9:	add    BYTE PTR [rax],al
 1006bcb:	add    BYTE PTR [rip+0xffffffffc8000000],al        # 0xffffffffc9006bd1
 1006bd1:	mov    esp,0xd00005
	...
 1006bde:	add    BYTE PTR [rax],al
 1006be0:	and    al,BYTE PTR [rip+0x51993]        # 0x1058579
 1006be6:	add    BYTE PTR [rax],al
 1006be8:	sbb    BYTE PTR [rbp+0x5],bh
 1006bee:	add    BYTE PTR [rax],al
 1006bf0:	add    BYTE PTR [rax],al
 1006bf2:	add    BYTE PTR [rax],al
 1006bf4:	adc    BYTE PTR [rax],al
 1006bf6:	add    BYTE PTR [rax],al
 1006bf8:	rex mov ebp,0x980005
	...
 1006c06:	add    BYTE PTR [rax],al
 1006c08:	and    al,BYTE PTR [rip+0x31993]        # 0x10385a1
 1006c0e:	add    BYTE PTR [rax],al
 1006c10:	hlt    
 1006c11:	mov    ebp,0x5
 1006c16:	add    BYTE PTR [rax],al
 1006c18:	add    BYTE PTR [rax],al
 1006c1a:	add    BYTE PTR [rax],al
 1006c1c:	or     eax,DWORD PTR [rax]
 1006c1e:	add    BYTE PTR [rax],al
 1006c20:	or     al,0xbe
 1006c22:	add    eax,0x3000
	...
 1006c2f:	add    BYTE PTR [rdx],ah
 1006c31:	add    eax,0x11993
 1006c36:	add    BYTE PTR [rax],al
 1006c38:	test   BYTE PTR [rsi+0x5],bh
 1006c3e:	add    BYTE PTR [rax],al
 1006c40:	add    BYTE PTR [rax],al
 1006c42:	add    BYTE PTR [rax],al
 1006c44:	add    al,BYTE PTR [rax]
 1006c46:	add    BYTE PTR [rax],al
 1006c48:	mov    WORD PTR [rsi+0x380005],?
	...
 1006c56:	add    BYTE PTR [rax],al
 1006c58:	and    al,BYTE PTR [rip+0x11993]        # 0x10185f1
 1006c5e:	add    BYTE PTR [rax],al
 1006c60:	sar    BYTE PTR [rsi+0x5],0x0
 1006c67:	add    BYTE PTR [rax],al
 1006c69:	add    BYTE PTR [rax],al
 1006c6b:	add    BYTE PTR [rdx],al
 1006c6d:	add    BYTE PTR [rax],al
 1006c6f:	add    al,cl
 1006c71:	mov    esi,0x280005
	...
 1006c7e:	add    BYTE PTR [rax],al
 1006c80:	and    al,BYTE PTR [rip+0x11993]        # 0x1018619
 1006c86:	add    BYTE PTR [rax],al
 1006c88:	cld    
 1006c89:	mov    esi,0x5
 1006c8e:	add    BYTE PTR [rax],al
 1006c90:	add    BYTE PTR [rax],al
 1006c92:	add    BYTE PTR [rax],al
 1006c94:	add    eax,DWORD PTR [rax]
 1006c96:	add    BYTE PTR [rax],al
 1006c98:	add    al,0xbf
 1006c9a:	add    eax,0x3000
	...
 1006ca7:	add    BYTE PTR [rdx],ah
 1006ca9:	add    eax,0x11993
 1006cae:	add    BYTE PTR [rax],al
 1006cb0:	rex mov edi,0x5
 1006cb6:	add    BYTE PTR [rax],al
 1006cb8:	add    BYTE PTR [rax],al
 1006cba:	add    BYTE PTR [rax],al
 1006cbc:	add    eax,DWORD PTR [rax]
 1006cbe:	add    BYTE PTR [rax],al
 1006cc0:	movabs rdi,0x700005
 1006cca:	add    BYTE PTR [rax],al
 1006ccc:	add    BYTE PTR [rax],al
 1006cce:	add    BYTE PTR [rax],al
 1006cd0:	and    al,BYTE PTR [rip+0x11993]        # 0x1018669
 1006cd6:	add    BYTE PTR [rax],al
 1006cd8:	je     0x1006c99
 1006cda:	add    eax,0x0
 1006cdf:	add    BYTE PTR [rax],al
 1006ce1:	add    BYTE PTR [rax],al
 1006ce3:	add    BYTE PTR [rdx],al
 1006ce5:	add    BYTE PTR [rax],al
 1006ce7:	add    BYTE PTR [rdi+rdi*4+0x5],bh
 1006ceb:	add    BYTE PTR [rax],ch
	...
 1006cf5:	add    BYTE PTR [rax],al
 1006cf7:	add    BYTE PTR [rdx],ah
 1006cf9:	add    eax,0x41993
 1006cfe:	add    BYTE PTR [rax],al
 1006d00:	(bad)  
 1006d01:	mov    edi,0x5
 1006d06:	add    BYTE PTR [rax],al
 1006d08:	add    BYTE PTR [rax],al
 1006d0a:	add    BYTE PTR [rax],al
 1006d0c:	or     DWORD PTR [rax],eax
 1006d0e:	add    BYTE PTR [rax],al
 1006d10:	hlt    
 1006d11:	mov    edi,0x800005
	...
 1006d1e:	add    BYTE PTR [rax],al
 1006d20:	and    al,BYTE PTR [rip+0x31993]        # 0x10386b9
 1006d26:	add    BYTE PTR [rax],al
 1006d28:	rol    al,0x5
	...
 1006d33:	add    BYTE PTR [rdi],al
 1006d35:	add    BYTE PTR [rax],al
 1006d37:	add    al,bl
 1006d39:	rol    BYTE PTR [rip+0x9000],0x0        # 0x100fd40
	...
 1006d48:	and    al,BYTE PTR [rip+0x61993]        # 0x10686e1
 1006d4e:	add    BYTE PTR [rax],al
 1006d50:	ins    BYTE PTR es:[rdi],dx
 1006d51:	rol    DWORD PTR [rip+0x0],0x0        # 0x1006d58
 1006d58:	add    BYTE PTR [rax],al
 1006d5a:	add    BYTE PTR [rax],al
 1006d5c:	or     al,0x0
 1006d5e:	add    BYTE PTR [rax],al
 1006d60:	pushf  
 1006d61:	rol    DWORD PTR [rip+0x6800],0x0        # 0x100d568
	...
 1006d70:	and    al,BYTE PTR [rip+0x51993]        # 0x1058709
 1006d76:	add    BYTE PTR [rax],al
 1006d78:	and    al,0xc2
 1006d7a:	add    eax,0x0
 1006d7f:	add    BYTE PTR [rax],al
 1006d81:	add    BYTE PTR [rax],al
 1006d83:	add    BYTE PTR [rbx],cl
 1006d85:	add    BYTE PTR [rax],al
 1006d87:	add    BYTE PTR [rdx+rax*8+0x5],cl
 1006d8b:	add    BYTE PTR [rax+0x0],bl
	...
 1006d96:	add    BYTE PTR [rax],al
 1006d98:	and    al,BYTE PTR [rip+0x71993]        # 0x1078731
 1006d9e:	add    BYTE PTR [rax],al
 1006da0:	enter  0x5c2,0x0
	...
 1006dac:	sldt   WORD PTR [rax]
 1006daf:	add    BYTE PTR [rax],al
 1006db1:	ret    
 1006db2:	add    eax,0x8000
	...
 1006dbf:	add    BYTE PTR [rdx],ah
 1006dc1:	add    eax,0x41993
 1006dc6:	add    BYTE PTR [rax],al
 1006dc8:	nop
 1006dc9:	ret    
 1006dca:	add    eax,0x0
 1006dcf:	add    BYTE PTR [rax],al
 1006dd1:	add    BYTE PTR [rax],al
 1006dd3:	add    BYTE PTR [rcx],cl
 1006dd5:	add    BYTE PTR [rax],al
 1006dd7:	add    BYTE PTR [rax+0x380005c3],dh
	...
 1006de5:	add    BYTE PTR [rax],al
 1006de7:	add    BYTE PTR [rdx],ah
 1006de9:	add    eax,0x51993
 1006dee:	add    BYTE PTR [rax],al
 1006df0:	sbb    ah,al
 1006df2:	add    eax,0x0
 1006df7:	add    BYTE PTR [rax],al
 1006df9:	add    BYTE PTR [rax],al
 1006dfb:	add    BYTE PTR [rbx],cl
 1006dfd:	add    BYTE PTR [rax],al
 1006dff:	add    BYTE PTR [rax-0x3c],al
 1006e02:	add    eax,0x6000
	...
 1006e0f:	add    BYTE PTR [rdx],ah
 1006e11:	add    eax,0x171993
 1006e16:	add    BYTE PTR [rax],al
 1006e18:	mov    esp,0x5c4
 1006e1d:	add    BYTE PTR [rax],al
 1006e1f:	add    BYTE PTR [rax],al
 1006e21:	add    BYTE PTR [rax],al
 1006e23:	add    BYTE PTR [rbx],bh
 1006e25:	add    BYTE PTR [rax],al
 1006e27:	add    BYTE PTR [rbp+rax*8+0x5],dh
 1006e2b:	add    BYTE PTR [rax+0x0],bl
	...
 1006e36:	add    BYTE PTR [rax],al
 1006e38:	and    al,BYTE PTR [rip+0x101993]        # 0x11087d1
 1006e3e:	add    BYTE PTR [rax],al
 1006e40:	(bad)  
 1006e41:	mov    DWORD PTR [rip+0x0],0x0        # 0x1006e4b
 1006e4b:	add    BYTE PTR [rax],ah
 1006e4d:	add    BYTE PTR [rax],al
 1006e4f:	add    al,ah
 1006e51:	mov    DWORD PTR [rip+0x2800],0x0        # 0x100965b
 1006e5b:	add    BYTE PTR [rax],al
 1006e5d:	add    BYTE PTR [rax],al
 1006e5f:	add    BYTE PTR [rdx],ah
 1006e61:	add    eax,0xb1993
 1006e66:	add    BYTE PTR [rax],al
 1006e68:	or     cl,cl
 1006e6a:	add    eax,0x0
 1006e6f:	add    BYTE PTR [rax],al
 1006e71:	add    BYTE PTR [rax],al
 1006e73:	add    BYTE PTR [rsi],dl
 1006e75:	add    BYTE PTR [rax],al
 1006e77:	add    BYTE PTR [rax-0x37],ah
 1006e7a:	add    eax,0x5800
	...
 1006e87:	add    BYTE PTR [rdx],ah
 1006e89:	add    eax,0x51993
 1006e8e:	add    BYTE PTR [rax],al
 1006e90:	cmp    dl,cl
 1006e92:	add    eax,0x0
 1006e97:	add    BYTE PTR [rax],al
 1006e99:	add    BYTE PTR [rax],al
 1006e9b:	add    BYTE PTR [rbx],cl
 1006e9d:	add    BYTE PTR [rax],al
 1006e9f:	add    BYTE PTR [rax-0x36],ah
 1006ea2:	add    eax,0x5000
	...
 1006eaf:	add    BYTE PTR [rdx],ah
 1006eb1:	add    eax,0x21993
 1006eb6:	add    BYTE PTR [rax],al
 1006eb8:	fmul   st,st(2)
 1006eba:	add    eax,0x100
 1006ebf:	add    al,ch
 1006ec1:	retf   0x5
 1006ec4:	add    al,0x0
 1006ec6:	add    BYTE PTR [rax],al
 1006ec8:	adc    bl,cl
 1006eca:	add    eax,0x2000
	...
 1006ed7:	add    BYTE PTR [rdx],ah
 1006ed9:	add    eax,0x11993
 1006ede:	add    BYTE PTR [rax],al
 1006ee0:	test   bl,cl
 1006ee2:	add    eax,0x0
 1006ee7:	add    BYTE PTR [rax],al
 1006ee9:	add    BYTE PTR [rax],al
 1006eeb:	add    BYTE PTR [rbx],al
 1006eed:	add    BYTE PTR [rax],al
 1006eef:	add    BYTE PTR [rbx+rcx*8+0x480005],cl
	...
 1006efe:	add    BYTE PTR [rax],al
 1006f00:	and    al,BYTE PTR [rip+0x21993]        # 0x1028899
 1006f06:	add    BYTE PTR [rax],al
 1006f08:	ror    bl,1
 1006f0a:	add    eax,0x0
 1006f0f:	add    BYTE PTR [rax],al
 1006f11:	add    BYTE PTR [rax],al
 1006f13:	add    BYTE PTR [rip+0xffffffffe0000000],al        # 0xffffffffe1006f19
 1006f19:	retf   
 1006f1a:	add    eax,0x4800
	...
 1006f27:	add    BYTE PTR [rdx],ah
 1006f29:	add    eax,0x11993
 1006f2e:	add    BYTE PTR [rax],al
 1006f30:	rex int3 
 1006f32:	add    eax,0x0
 1006f37:	add    BYTE PTR [rax],al
 1006f39:	add    BYTE PTR [rax],al
 1006f3b:	add    BYTE PTR [rip+0x48000000],al        # 0x49006f41
 1006f41:	int3   
 1006f42:	add    eax,0x3000
	...
 1006f4f:	add    BYTE PTR [rdx],ah
 1006f51:	add    eax,0x21993
 1006f56:	add    BYTE PTR [rax],al
 1006f58:	pushf  
 1006f59:	int3   
 1006f5a:	add    eax,0x0
 1006f5f:	add    BYTE PTR [rax],al
 1006f61:	add    BYTE PTR [rax],al
 1006f63:	add    BYTE PTR [rdi],al
 1006f65:	add    BYTE PTR [rax],al
 1006f67:	add    BYTE PTR [rsp+rcx*8+0x300005],ch
	...
 1006f76:	add    BYTE PTR [rax],al
 1006f78:	and    al,BYTE PTR [rip+0x11993]        # 0x1018911
 1006f7e:	add    BYTE PTR [rax],al
 1006f80:	sbb    al,0xcd
 1006f82:	add    eax,0x0
 1006f87:	add    BYTE PTR [rax],al
 1006f89:	add    BYTE PTR [rax],al
 1006f8b:	add    BYTE PTR [rbx],al
 1006f8d:	add    BYTE PTR [rax],al
 1006f8f:	add    BYTE PTR [rcx*8+0x300005],ah
	...
 1006f9e:	add    BYTE PTR [rax],al
 1006fa0:	and    al,BYTE PTR [rip+0x21993]        # 0x1028939
 1006fa6:	add    BYTE PTR [rax],al
 1006fa8:	fs int 0x5
	...
 1006fb3:	add    BYTE PTR [rip+0x74000000],al        # 0x75006fb9
 1006fb9:	int    0x5
 1006fbb:	add    BYTE PTR [rax],dh
	...
 1006fc5:	add    BYTE PTR [rax],al
 1006fc7:	add    BYTE PTR [rdx],ah
 1006fc9:	add    eax,0x11993
 1006fce:	add    BYTE PTR [rax],al
 1006fd0:	mov    esp,0x5cd
 1006fd5:	add    BYTE PTR [rax],al
 1006fd7:	add    BYTE PTR [rax],al
 1006fd9:	add    BYTE PTR [rax],al
 1006fdb:	add    BYTE PTR [rdx],al
 1006fdd:	add    BYTE PTR [rax],al
 1006fdf:	add    ah,al
 1006fe1:	int    0x5
 1006fe3:	add    BYTE PTR [rax],ch
	...
 1006fed:	add    BYTE PTR [rax],al
 1006fef:	add    BYTE PTR [rdx],ah
 1006ff1:	add    eax,0x41993
 1006ff6:	add    BYTE PTR [rax],al
 1006ff8:	hlt    
 1006ff9:	int    0x5
	...
 1007003:	add    BYTE PTR [rcx],cl
 1007005:	add    BYTE PTR [rax],al
 1007007:	add    BYTE PTR [rsi+rcx*8],dl
 100700a:	add    eax,0x2800
	...
 1007017:	add    BYTE PTR [rdx],ah
 1007019:	add    eax,0x51993
 100701e:	add    BYTE PTR [rax],al
 1007020:	or     dh,0x5
	...
 100702b:	add    BYTE PTR [rsi],cl
 100702d:	add    BYTE PTR [rax],al
 100702f:	add    BYTE PTR [rax+0x380005ce],ch
	...
 100703d:	add    BYTE PTR [rax],al
 100703f:	add    BYTE PTR [rdx],ah
 1007041:	add    eax,0x11993
 1007046:	add    BYTE PTR [rax],al
 1007048:	rex.R iret 
 100704a:	add    eax,0x0
 100704f:	add    BYTE PTR [rax],al
 1007051:	add    BYTE PTR [rax],al
 1007053:	add    BYTE PTR [rbx],al
 1007055:	add    BYTE PTR [rax],al
 1007057:	add    BYTE PTR [rdi+rcx*8+0x5],cl
 100705b:	add    BYTE PTR [rax+0x0],al
 1007061:	add    BYTE PTR [rax],al
 1007063:	add    BYTE PTR [rax],al
 1007065:	add    BYTE PTR [rax],al
 1007067:	add    BYTE PTR [rdx],ah
 1007069:	add    eax,0x11993
 100706e:	add    BYTE PTR [rax],al
 1007070:	mov    bh,cl
 1007072:	add    eax,0x0
 1007077:	add    BYTE PTR [rax],al
 1007079:	add    BYTE PTR [rax],al
 100707b:	add    BYTE PTR [rbx],al
 100707d:	add    BYTE PTR [rax],al
 100707f:	add    BYTE PTR [rax+0x200005cf],dl
	...
 100708d:	add    BYTE PTR [rax],al
 100708f:	add    BYTE PTR [rdx],ah
 1007091:	add    eax,0x11993
 1007096:	add    BYTE PTR [rax],al
 1007098:	push   rsp
 1007099:	rol    BYTE PTR [rip+0x0],1        # 0x100709f
 100709f:	add    BYTE PTR [rax],al
 10070a1:	add    BYTE PTR [rax],al
 10070a3:	add    BYTE PTR [rdi],al
 10070a5:	add    BYTE PTR [rax],al
 10070a7:	add    BYTE PTR [rax+rdx*8+0x5],bl
 10070ab:	add    BYTE PTR [rax],ch
	...
 10070b5:	add    BYTE PTR [rax],al
 10070b7:	add    BYTE PTR [rdx],ah
 10070b9:	add    eax,0x11993
 10070be:	add    BYTE PTR [rax],al
 10070c0:	lods   al,BYTE PTR ds:[rsi]
 10070c1:	rol    BYTE PTR [rip+0x0],1        # 0x10070c7
 10070c7:	add    BYTE PTR [rax],al
 10070c9:	add    BYTE PTR [rax],al
 10070cb:	add    BYTE PTR [rdi],al
 10070cd:	add    BYTE PTR [rax],al
 10070cf:	add    BYTE PTR [rax+rdx*8+0x280005],dh
	...
 10070de:	add    BYTE PTR [rax],al
 10070e0:	and    al,BYTE PTR [rip+0x11993]        # 0x1018a79
 10070e6:	add    BYTE PTR [rax],al
 10070e8:	or     cl,dl
 10070ea:	add    eax,0x0
 10070ef:	add    BYTE PTR [rax],al
 10070f1:	add    BYTE PTR [rax],al
 10070f3:	add    BYTE PTR [rdi],al
 10070f5:	add    BYTE PTR [rax],al
 10070f7:	add    BYTE PTR [rax],dl
 10070f9:	rol    DWORD PTR [rip+0x2800],1        # 0x10098ff
	...
 1007107:	add    BYTE PTR [rdx],bh
 1007109:	add    BYTE PTR [rax],al
 100710b:	add    BYTE PTR [rax+rax*1],ah
 100710e:	add    BYTE PTR [rax],al
 1007110:	(bad)  
 1007111:	add    BYTE PTR [rbx+0x0],al
 1007114:	rex.WB add BYTE PTR [r14+0x0],al
 1007118:	and    BYTE PTR [rax],al
 100711a:	rex.WRX add BYTE PTR [rdi+0x0],r9b
 100711e:	push   rsp
 100711f:	add    BYTE PTR [rax],ah
 1007121:	add    BYTE PTR [rbp+0x0],al
 1007124:	pop    rax
 1007125:	add    BYTE PTR [rcx+0x0],cl
 1007128:	push   rbx
 1007129:	add    BYTE PTR [rax+rax*1+0x20],dl
 100712d:	add    BYTE PTR [rdx],ah
 100712f:	add    BYTE PTR [rip+0x5c007300],ah        # 0x5d00e435
 1007135:	add    BYTE PTR [rsi],ch
 1007137:	add    BYTE PTR [rdx],ah
 1007139:	add    BYTE PTR [rax],ah
 100713b:	add    BYTE PTR [rbp+0x0],ch
 100713e:	add    BYTE PTR fs:[rax],ah
 1007141:	add    BYTE PTR [rdx],ah
 1007143:	add    BYTE PTR [rip+0x22007300],ah        # 0x2300e449
 1007149:	add    BYTE PTR [rax],al
 100714b:	add    BYTE PTR [rax],al
 100714d:	add    BYTE PTR [rax],al
 100714f:	add    BYTE PTR [rsi+0x0],dl
 1007152:	imul   eax,DWORD PTR [rax],0x740072
 1007158:	jne    0x100715a
 100715a:	(bad)  
 100715b:	add    BYTE PTR [rax+rax*1+0x53],ch
 100715f:	add    BYTE PTR [rbp+0x0],ah
 1007162:	jb     0x1007164
 1007164:	jbe    0x1007166
 1007166:	add    BYTE PTR gs:[rdx+0x0],dh
 100716a:	rex.WRX add BYTE PTR [rcx+0x0],r12b
 100716e:	ins    DWORD PTR es:[rdi],dx
 100716f:	add    BYTE PTR [rbp+0x0],ah
 1007172:	add    BYTE PTR [rax],al
 1007174:	pop    rsp
 1007175:	add    BYTE PTR [rdx+0x0],dh
 1007178:	add    BYTE PTR [rax],al
 100717a:	add    BYTE PTR [rax],al
 100717c:	pop    rsp
 100717d:	add    BYTE PTR [rax+rax*1+0x0],dh
 1007181:	add    BYTE PTR [rax],al
 1007183:	add    BYTE PTR [rax+rax*1+0x62],bl
 1007187:	add    BYTE PTR [rax],al
 1007189:	add    BYTE PTR [rax],al
 100718b:	add    BYTE PTR [rax+rax*1+0x61],bl
 100718f:	add    BYTE PTR [rax],al
 1007191:	add    BYTE PTR [rax],al
 1007193:	add    BYTE PTR [rax+rax*1+0x76],bl
	...
 100719f:	add    BYTE PTR [rsi+0x0],ch
 10071a2:	je     0x10071a4
 10071a4:	add    BYTE PTR fs:[rax+rax*1+0x6c],ch
 10071a9:	add    BYTE PTR [rsi],ch
 10071ab:	add    BYTE PTR [rax+rax*1+0x6c],ah
 10071af:	add    BYTE PTR [rax+rax*1+0x0],ch
 10071b3:	add    BYTE PTR [rax],al
 10071b5:	add    BYTE PTR [rax],al
 10071b7:	add    BYTE PTR [rsi+0x74],cl
 10071ba:	push   rcx
 10071bb:	jne    0x1007222
 10071bd:	jb     0x1007238
 10071bf:	rex.WB outs dx,BYTE PTR ds:[rsi]
 10071c1:	outs   dx,WORD PTR ds:[rsi]
 10071c3:	jb     0x1007232
 10071c5:	(bad)  
 10071c6:	je     0x1007231
 10071c8:	outs   dx,DWORD PTR ds:[rsi]
 10071c9:	outs   dx,BYTE PTR ds:[rsi]
 10071ca:	push   rax
 10071cb:	jb     0x100723c
 10071cd:	movsxd esp,DWORD PTR [rbp+0x73]
 10071d0:	jae    0x10071d2
 10071d2:	add    BYTE PTR [rax],al
 10071d4:	add    BYTE PTR [rax],al
 10071d6:	add    BYTE PTR [rax],al
 10071d8:	rex.WXB add BYTE PTR [r13+0x0],spl
 10071dc:	jb     0x10071de
 10071de:	outs   dx,BYTE PTR ds:[rsi]
 10071df:	add    BYTE PTR [rbp+0x0],ah
 10071e2:	ins    BYTE PTR es:[rdi],dx
 10071e3:	add    BYTE PTR [rbx],dh
 10071e5:	add    BYTE PTR [rdx],dh
 10071e7:	add    BYTE PTR [rsi],ch
 10071e9:	add    BYTE PTR [rax+rax*1+0x4c],al
 10071ed:	add    BYTE PTR [rax+rax*1+0x0],cl
 10071f1:	add    BYTE PTR [rax],al
 10071f3:	add    BYTE PTR [rax],al
 10071f5:	add    BYTE PTR [rax],al
 10071f7:	add    BYTE PTR [rbx+0x72],al
 10071fa:	gs (bad) 
 10071fc:	je     0x1007263
 10071fe:	push   rsp
 10071ff:	outs   dx,DWORD PTR ds:[rsi]
 1007200:	outs   dx,DWORD PTR ds:[rsi]
 1007201:	ins    BYTE PTR es:[rdi],dx
 1007202:	push   0x33706c65
 1007207:	xor    dl,BYTE PTR [rbx+0x6e]
 100720a:	(bad)  
 100720b:	jo     0x1007280
 100720d:	push   0x746f
 1007212:	add    BYTE PTR [rax],al
 1007214:	add    BYTE PTR [rax],al
 1007216:	add    BYTE PTR [rax],al
 1007218:	push   rax
 1007219:	jb     0x100728a
 100721b:	movsxd esp,DWORD PTR [rbp+0x73]
 100721e:	jae    0x1007253
 1007220:	xor    al,BYTE PTR [rsi+0x69]
 1007223:	jb     0x1007298
 1007225:	je     0x1007227
 1007227:	add    BYTE PTR [rax+0x72],dl
 100722a:	outs   dx,DWORD PTR ds:[rsi]
 100722b:	movsxd esp,DWORD PTR [rbp+0x73]
 100722e:	jae    0x1007263
 1007230:	xor    cl,BYTE PTR [rsi+0x65]
 1007233:	js     0x10072a9
 1007235:	add    BYTE PTR [rax],al
 1007237:	add    BYTE PTR [rcx+0x0],al
 100723a:	add    BYTE PTR [rsi+0x0],r10b
 100723e:	add    BYTE PTR [r8+0x0],dl
 1007242:	rex.WB add BYTE PTR [r11],sil
 1007245:	add    BYTE PTR [rdx],dh
 1007247:	add    BYTE PTR [rsi],ch
 1007249:	add    BYTE PTR [rax+rax*1+0x4c],al
 100724d:	add    BYTE PTR [rax+rax*1+0x0],cl
 1007251:	add    BYTE PTR [rax],al
 1007253:	add    BYTE PTR [rax],al
 1007255:	add    BYTE PTR [rax],al
 1007257:	add    BYTE PTR [rbx+0x68],al
 100725a:	(bad)  
 100725b:	outs   dx,BYTE PTR ds:[rsi]
 100725c:	addr32 gs push rbx
 100725f:	gs jb  0x10072d8
 1007262:	imul   esp,DWORD PTR [rbx+0x65],0x666e6f43
 1007269:	imul   esp,DWORD PTR [rdi+0x32],0x57
 1007270:	add    BYTE PTR [r10+0x0],r14b
 1007274:	jb     0x1007276
 1007276:	outs   dx,DWORD PTR ds:[rsi]
 1007277:	add    BYTE PTR [rdx+0x0],dh
 100727a:	and    BYTE PTR [rax],al
 100727c:	movsxd eax,DWORD PTR [rax]
 100727e:	outs   dx,DWORD PTR ds:[rsi]
 100727f:	add    BYTE PTR [rax+rax*1+0x65],ah
 1007283:	add    BYTE PTR [rax],ah
 1007285:	add    BYTE PTR [rsi+0x0],ah
 1007288:	outs   dx,DWORD PTR ds:[rsi]
 1007289:	add    BYTE PTR [rdx+0x0],dh
 100728c:	and    BYTE PTR [rax],al
 100728e:	push   rbx
 100728f:	add    BYTE PTR [rax+rax*1+0x61],dh
 1007293:	add    BYTE PTR [rdx+0x0],dh
 1007296:	je     0x1007298
 1007298:	push   rbx
 1007299:	add    BYTE PTR [rbp+0x0],ah
 100729c:	jb     0x100729e
 100729e:	jbe    0x10072a0
 10072a0:	imul   eax,DWORD PTR [rax],0x650063
 10072a6:	add    BYTE PTR [r8+r8*1+0x72],sil
 10072ab:	add    BYTE PTR [rax+rax*1+0x44],ch
 10072af:	add    BYTE PTR [rcx+0x0],ch
 10072b2:	jae    0x10072b4
 10072b4:	jo     0x10072b6
 10072b6:	(bad)  
 10072b7:	add    BYTE PTR [rax+rax*1+0x63],dh
 10072bb:	add    BYTE PTR [rax+0x0],ch
 10072be:	add    BYTE PTR gs:[rdx+0x0],dh
 10072c2:	cmp    al,BYTE PTR [rax]
 10072c4:	and    BYTE PTR [rax],al
 10072c6:	and    eax,0x2e007500
 10072cb:	add    BYTE PTR [rax],al
 10072cd:	add    BYTE PTR [rax],al
 10072cf:	add    BYTE PTR [rbx+0x72],al
 10072d2:	gs (bad) 
 10072d4:	je     0x100733b
 10072d6:	rex.WX outs dx,DWORD PTR ds:[rsi]
 10072d8:	(bad)  
 10072d9:	rex.WRXB (bad) 
 10072db:	push   0x65
 10072dd:	movsxd esi,DWORD PTR [rdi+rdx*2+0x0]
 10072e1:	add    BYTE PTR [rax],al
 10072e3:	add    BYTE PTR [rax],al
 10072e5:	add    BYTE PTR [rax],al
 10072e7:	add    BYTE PTR [rbp+riz*2+0x72],dl
 10072eb:	ins    DWORD PTR es:[rdi],dx
 10072ec:	imul   ebp,DWORD PTR [rsi+0x61],0x6f4a6574
 10072f3:	(bad)  
 10072f4:	rex.WRXB (bad) 
 10072f6:	push   0x65
 10072f8:	movsxd esi,DWORD PTR [rax+rax*1+0x0]
 10072fc:	add    BYTE PTR [rax],al
 10072fe:	add    BYTE PTR [rax],al
 1007300:	rex.B jae 0x1007376
 1007303:	imul   esp,DWORD PTR [rdi+0x6e],0x636f7250
 100730a:	gs jae 0x1007380
 100730d:	push   rsp
 100730e:	outs   dx,DWORD PTR ds:[rsi]
 100730f:	rex.WX outs dx,DWORD PTR ds:[rsi]
 1007311:	(bad)  
 1007312:	rex.WRXB (bad) 
 1007314:	push   0x65
 1007316:	movsxd esi,DWORD PTR [rax+rax*1+0x0]
 100731a:	add    BYTE PTR [rax],al
 100731c:	add    BYTE PTR [rax],al
 100731e:	add    BYTE PTR [rax],al
 1007320:	push   rbx
 1007321:	add    BYTE PTR [rcx+0x0],dl
 1007324:	rex.WR add BYTE PTR [rax+rax*1+0x69],r8b
 1007329:	add    BYTE PTR [rcx+0x0],ah
 100732c:	add    BYTE PTR [ebp+0x0],al
 1007330:	js     0x1007332
 1007332:	add    BYTE PTR [rax],al
 1007334:	add    BYTE PTR [rax],al
 1007336:	add    BYTE PTR [rax],al
 1007338:	push   rbx
 1007339:	add    BYTE PTR [rbp+0x0],ah
 100733c:	rex.X add BYTE PTR [rcx+0x0],spl
 1007340:	movsxd eax,DWORD PTR [rax]
 1007342:	imul   eax,DWORD PTR [rax],0x75
 1007345:	add    BYTE PTR [rax+0x0],dh
 1007348:	push   rax
 1007349:	add    BYTE PTR [rdx+0x0],dh
 100734c:	imul   eax,DWORD PTR [rax],0x690076
 1007352:	ins    BYTE PTR es:[rdi],dx
 1007353:	add    BYTE PTR [rbp+0x0],ah
 1007356:	add    BYTE PTR [ebp+0x0],ah
 100735a:	add    BYTE PTR [rax],al
 100735c:	add    BYTE PTR [rax],al
 100735e:	add    BYTE PTR [rax],al
 1007360:	rex.W add BYTE PTR [rbx+0x0],cl
 1007364:	rex.WR add BYTE PTR [rbp+0x0],r9b
	...
 1007370:	rex.W add BYTE PTR [rbx+0x0],cl
 1007374:	rex.XB add BYTE PTR [r13+0x0],dl
	...
 1007380:	rex.W add BYTE PTR [rbx+0x0],cl
 1007384:	rex.XB add BYTE PTR [r11+0x0],al
	...
 1007390:	rex.W add BYTE PTR [rbx+0x0],cl
 1007394:	rex.XB add BYTE PTR [r10+0x0],dl
	...
 10073a0:	rex.W add BYTE PTR [rbx+0x0],cl
 10073a4:	push   rbp
 10073a5:	add    BYTE PTR [rax],al
 10073a7:	add    BYTE PTR [rax+0x0],cl
 10073aa:	rex.WXB add BYTE PTR [r13+0x0],al
 10073ae:	pop    rcx
 10073af:	add    BYTE PTR [rdi+0x0],bl
 10073b2:	rex.WR add BYTE PTR [rdi+0x0],r9b
 10073b6:	rex.XB add BYTE PTR [r9+0x0],al
 10073ba:	rex.WR add BYTE PTR [rdi+0x0],r11b
 10073be:	rex.WRB add BYTE PTR [r9+0x0],r8b
 10073c2:	rex.XB add BYTE PTR [r8+0x0],cl
 10073c6:	rex.WB add BYTE PTR [r14+0x0],cl
 10073ca:	add    BYTE PTR [r8],r8b
 10073cd:	add    BYTE PTR [rax],al
 10073cf:	add    BYTE PTR [rax+0x0],cl
 10073d2:	rex.WXB add BYTE PTR [r13+0x0],al
 10073d6:	pop    rcx
 10073d7:	add    BYTE PTR [rdi+0x0],bl
 10073da:	rex.XB add BYTE PTR [r13+0x0],dl
 10073de:	push   rdx
 10073df:	add    BYTE PTR [rdx+0x0],dl
 10073e2:	add    BYTE PTR [r14+0x0],r9b
 10073e6:	push   rsp
 10073e7:	add    BYTE PTR [rdi+0x0],bl
 10073ea:	push   rbp
 10073eb:	add    BYTE PTR [rbx+0x0],dl
 10073ee:	add    BYTE PTR [r10+0x0],r10b
 10073f2:	add    BYTE PTR [rax],al
 10073f4:	add    BYTE PTR [rax],al
 10073f6:	add    BYTE PTR [rax],al
 10073f8:	rex.W add BYTE PTR [rbx+0x0],cl
 10073fc:	add    BYTE PTR [r9+0x0],r11b
 1007400:	pop    rdi
 1007401:	add    BYTE PTR [rbx+0x0],al
 1007404:	push   rbp
 1007405:	add    BYTE PTR [rdx+0x0],dl
 1007408:	push   rdx
 1007409:	add    BYTE PTR [rbp+0x0],al
 100740c:	rex.WRX add BYTE PTR [rax+r8*1+0x5f],r10b
 1007411:	add    BYTE PTR [rbx+0x0],al
 1007414:	rex.WRXB add BYTE PTR [r14+0x0],r9b
 1007418:	rex.RX add BYTE PTR [rcx+0x0],r9b
 100741c:	rex.RXB add BYTE PTR [r8],r8b
 100741f:	add    BYTE PTR [rax+0x0],cl
 1007422:	rex.WXB add BYTE PTR [r13+0x0],al
 1007426:	pop    rcx
 1007427:	add    BYTE PTR [rdi+0x0],bl
 100742a:	add    BYTE PTR [r8+r8*1+0x41],cl
 100742f:	add    BYTE PTR [rbx+0x0],dl
 1007432:	push   rbx
 1007433:	add    BYTE PTR [rbp+0x0],al
 1007436:	push   rbx
 1007437:	add    BYTE PTR [rdi+0x0],bl
 100743a:	push   rdx
 100743b:	add    BYTE PTR [rdi+0x0],cl
 100743e:	rex.WRXB add BYTE PTR [r8+r8*1+0x0],r10b
 1007443:	add    BYTE PTR [rax],al
 1007445:	add    BYTE PTR [rax],al
 1007447:	add    BYTE PTR [rax+0x0],cl
 100744a:	rex.WXB add BYTE PTR [r13+0x0],al
 100744e:	pop    rcx
 100744f:	add    BYTE PTR [rdi+0x0],bl
 1007452:	push   rbp
 1007453:	add    BYTE PTR [rbx+0x0],dl
 1007456:	add    BYTE PTR [r10+0x0],r10b
 100745a:	push   rbx
 100745b:	add    BYTE PTR [rax],al
 100745d:	add    BYTE PTR [rax],al
 100745f:	add    BYTE PTR [rbx+0x0],dl
 1007462:	jns    0x1007464
 1007464:	jae    0x1007466
 1007466:	je     0x1007468
 1007468:	add    BYTE PTR gs:[rbp+0x0],ch
 100746c:	pop    rsp
 100746d:	add    BYTE PTR [rbx+0x0],al
 1007470:	jne    0x1007472
 1007472:	jb     0x1007474
 1007474:	jb     0x1007476
 1007476:	add    BYTE PTR gs:[rsi+0x0],ch
 100747a:	je     0x100747c
 100747c:	rex.XB add BYTE PTR [r15+0x0],bpl
 1007480:	outs   dx,BYTE PTR ds:[rsi]
 1007481:	add    BYTE PTR [rax+rax*1+0x72],dh
 1007485:	add    BYTE PTR [rdi+0x0],ch
 1007488:	ins    BYTE PTR es:[rdi],dx
 1007489:	add    BYTE PTR [rbx+0x0],dl
 100748c:	add    BYTE PTR gs:[rax+rax*1+0x5c],dh
 1007491:	add    BYTE PTR [rbx+0x0],al
 1007494:	outs   dx,DWORD PTR ds:[rsi]
 1007495:	add    BYTE PTR [rsi+0x0],ch
 1007498:	je     0x100749a
 100749a:	jb     0x100749c
 100749c:	outs   dx,DWORD PTR ds:[rsi]
 100749d:	add    BYTE PTR [rax+rax*1+0x5c],ch
 10074a1:	add    BYTE PTR [rbx+0x0],dl
 10074a4:	add    BYTE PTR gs:[rbx+0x0],dh
 10074a8:	jae    0x10074aa
 10074aa:	imul   eax,DWORD PTR [rax],0x6e006f
 10074b0:	and    BYTE PTR [rax],al
 10074b2:	rex.WRB add BYTE PTR [r9+0x0],r12b
 10074b6:	outs   dx,BYTE PTR ds:[rsi]
 10074b7:	add    BYTE PTR [rcx+0x0],ah
 10074ba:	add    BYTE PTR [ebp+0x0],ah
 10074be:	jb     0x10074c0
 10074c0:	pop    rsp
 10074c1:	add    BYTE PTR [rbp+0x0],al
 10074c4:	outs   dx,BYTE PTR ds:[rsi]
 10074c5:	add    BYTE PTR [rsi+0x0],dh
 10074c8:	imul   eax,DWORD PTR [rax],0x6f0072
 10074ce:	outs   dx,BYTE PTR ds:[rsi]
 10074cf:	add    BYTE PTR [rbp+0x0],ch
 10074d2:	add    BYTE PTR gs:[rsi+0x0],ch
 10074d6:	je     0x10074d8
	...
 10074e0:	push   rax
 10074e1:	add    BYTE PTR [rdx+0x0],dl
 10074e4:	rex.WRXB add BYTE PTR [r11+0x0],r8b
 10074e8:	add    BYTE PTR [r11+0x0],r10b
 10074ec:	push   rbx
 10074ed:	add    BYTE PTR [rdi+0x0],cl
 10074f0:	push   rdx
 10074f1:	add    BYTE PTR [rdi+0x0],bl
 10074f4:	add    BYTE PTR [r10+0x0],dl
 10074f8:	rex.XB add BYTE PTR [r8+0x0],cl
 10074fc:	rex.WB add BYTE PTR [r8+rax*1+0x45],dl
 1007501:	add    BYTE PTR [rbx+0x0],al
 1007504:	push   rsp
 1007505:	add    BYTE PTR [rbp+0x0],dl
 1007508:	push   rdx
 1007509:	add    BYTE PTR [rbp+0x0],al
 100750c:	add    BYTE PTR [rax],al
 100750e:	add    BYTE PTR [rax],al
 1007510:	add    BYTE PTR [r13+0x0],cl
 1007514:	add    BYTE PTR [rsi],r14b
 1007517:	add    BYTE PTR [rax+rax*1],dh
 100751a:	add    BYTE PTR [rax],al
 100751c:	add    BYTE PTR [rax],al
 100751e:	add    BYTE PTR [rax],al
 1007520:	rex.WB add BYTE PTR [r9+0x0],al
 1007524:	add    BYTE PTR ss:[rax+rax*1],dh
	...
 1007530:	and    eax,0x20007300
 1007535:	add    BYTE PTR [rip+0x5c007300],ah        # 0x5d00e83b
 100753b:	add    BYTE PTR [rip+0x7300],ah        # 0x100e841
 1007541:	add    BYTE PTR [rax],al
 1007543:	add    BYTE PTR [rax],al
 1007545:	add    BYTE PTR [rax],al
 1007547:	add    BYTE PTR [rdx],ah
 1007549:	add    eax,0x11993
 100754e:	add    BYTE PTR [rax],al
 1007550:	jo     0x1007523
 1007552:	add    eax,0x0
 1007557:	add    BYTE PTR [rax],al
 1007559:	add    BYTE PTR [rax],al
 100755b:	add    BYTE PTR [rbx],al
 100755d:	add    BYTE PTR [rax],al
 100755f:	add    BYTE PTR [rax-0x2f],bh
 1007562:	add    eax,0x2000
	...
 100756f:	add    BYTE PTR [rdx],ah
 1007571:	add    eax,0x11993
 1007576:	add    BYTE PTR [rax],al
 1007578:	test   al,0xd1
 100757a:	add    eax,0x0
 100757f:	add    BYTE PTR [rax],al
 1007581:	add    BYTE PTR [rax],al
 1007583:	add    BYTE PTR [rbx],al
 1007585:	add    BYTE PTR [rax],al
 1007587:	add    BYTE PTR [rax+0x200005d1],dh
	...
 1007595:	add    BYTE PTR [rax],al
 1007597:	add    BYTE PTR [rdx],ah
 1007599:	add    eax,0x21993
 100759e:	add    BYTE PTR [rax],al
 10075a0:	call   0x1007b76
 10075a5:	add    BYTE PTR [rax],al
 10075a7:	add    BYTE PTR [rax],al
 10075a9:	add    BYTE PTR [rax],al
 10075ab:	add    BYTE PTR [rbx],al
 10075ad:	add    BYTE PTR [rax],al
 10075af:	add    al,bh
 10075b1:	rol    DWORD PTR [rip+0x2800],1        # 0x1009db7
	...
 10075bf:	add    BYTE PTR [rdx],ah
 10075c1:	add    eax,0x21993
 10075c6:	add    BYTE PTR [rax],al
 10075c8:	sub    al,0xd2
 10075ca:	add    eax,0x0
 10075cf:	add    BYTE PTR [rax],al
 10075d1:	add    BYTE PTR [rax],al
 10075d3:	add    BYTE PTR [rbx],al
 10075d5:	add    BYTE PTR [rax],al
 10075d7:	add    BYTE PTR [rdx+rdx*8],bh
 10075da:	add    eax,0x2800
	...
 10075e7:	add    BYTE PTR [rdx],ah
 10075e9:	add    eax,0x11993
 10075ee:	add    BYTE PTR [rax],al
 10075f0:	jo     0x10075c4
 10075f2:	add    eax,0x0
 10075f7:	add    BYTE PTR [rax],al
 10075f9:	add    BYTE PTR [rax],al
 10075fb:	add    BYTE PTR [rdx],al
 10075fd:	add    BYTE PTR [rax],al
 10075ff:	add    BYTE PTR [rax-0x2e],bh
 1007602:	add    eax,0x2800
	...
 100760f:	add    BYTE PTR [rdx],ah
 1007611:	add    eax,0x11993
 1007616:	add    BYTE PTR [rax],al
 1007618:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1007619:	rol    BYTE PTR [rip+0x0],cl        # 0x100761f
 100761f:	add    BYTE PTR [rax],al
 1007621:	add    BYTE PTR [rax],al
 1007623:	add    BYTE PTR [rdx],al
 1007625:	add    BYTE PTR [rax],al
 1007627:	add    BYTE PTR [rdx+rdx*8+0x280005],ch
	...
 1007636:	add    BYTE PTR [rax],al
 1007638:	and    al,BYTE PTR [rip+0x21993]        # 0x1028fd1
 100763e:	add    BYTE PTR [rax],al
 1007640:	fcom   st(2)
 1007642:	add    eax,0x0
 1007647:	add    BYTE PTR [rax],al
 1007649:	add    BYTE PTR [rax],al
 100764b:	add    BYTE PTR [rbx],al
 100764d:	add    BYTE PTR [rax],al
 100764f:	add    al,ch
 1007651:	rol    BYTE PTR [rip+0x2800],cl        # 0x1009e57
	...
 100765f:	add    BYTE PTR [rdx],ah
 1007661:	add    eax,0x21993
 1007666:	add    BYTE PTR [rax],al
 1007668:	sbb    al,0xd3
 100766a:	add    eax,0x0
 100766f:	add    BYTE PTR [rax],al
 1007671:	add    BYTE PTR [rax],al
 1007673:	add    BYTE PTR [rbx],al
 1007675:	add    BYTE PTR [rax],al
 1007677:	add    BYTE PTR [rbx+rdx*8],ch
 100767a:	add    eax,0x2800
	...
 1007687:	add    BYTE PTR [rdx],ah
 1007689:	add    eax,0x21993
 100768e:	add    BYTE PTR [rax],al
 1007690:	(bad)  
 1007691:	rol    DWORD PTR [rip+0x0],cl        # 0x1007697
 1007697:	add    BYTE PTR [rax],al
 1007699:	add    BYTE PTR [rax],al
 100769b:	add    BYTE PTR [rbx],al
 100769d:	add    BYTE PTR [rax],al
 100769f:	add    BYTE PTR [rax-0x2d],dh
 10076a2:	add    eax,0x2800
	...
 10076af:	add    BYTE PTR [rdx],ah
 10076b1:	add    eax,0x11993
 10076b6:	add    BYTE PTR [rax],al
 10076b8:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 10076b9:	rol    DWORD PTR [rip+0x0],cl        # 0x10076bf
 10076bf:	add    BYTE PTR [rax],al
 10076c1:	add    BYTE PTR [rax],al
 10076c3:	add    BYTE PTR [rdx],al
 10076c5:	add    BYTE PTR [rax],al
 10076c7:	add    BYTE PTR [rbx+rdx*8+0x280005],ch
	...
 10076d6:	add    BYTE PTR [rax],al
 10076d8:	and    al,BYTE PTR [rip+0x21993]        # 0x1029071
 10076de:	add    BYTE PTR [rax],al
 10076e0:	fcom   st(3)
 10076e2:	add    eax,0x0
 10076e7:	add    BYTE PTR [rax],al
 10076e9:	add    BYTE PTR [rax],al
 10076eb:	add    BYTE PTR [rbx],al
 10076ed:	add    BYTE PTR [rax],al
 10076ef:	add    al,ch
 10076f1:	rol    DWORD PTR [rip+0x2800],cl        # 0x1009ef7
	...
 10076ff:	add    BYTE PTR [rdx],ah
 1007701:	add    eax,0x11993
 1007706:	add    BYTE PTR [rax],al
 1007708:	sbb    al,0xd4
 100770a:	add    eax,0x0
 100770f:	add    BYTE PTR [rax],al
 1007711:	add    BYTE PTR [rax],al
 1007713:	add    BYTE PTR [rdx],al
 1007715:	add    BYTE PTR [rax],al
 1007717:	add    BYTE PTR [rsp+rdx*8],ah
 100771a:	add    eax,0x2800
	...
 1007727:	add    BYTE PTR [rdx],ah
 1007729:	add    eax,0x11993
 100772e:	add    BYTE PTR [rax],al
 1007730:	push   rsp
 1007731:	(bad)  
 1007732:	add    eax,0x0
 1007737:	add    BYTE PTR [rax],al
 1007739:	add    BYTE PTR [rax],al
 100773b:	add    BYTE PTR [rbx],al
 100773d:	add    BYTE PTR [rax],al
 100773f:	add    BYTE PTR [rsp+rdx*8+0x5],bl
 1007743:	add    BYTE PTR [rax],ah
	...
 100774d:	add    BYTE PTR [rax],al
 100774f:	add    BYTE PTR [rdx],ah
 1007751:	add    eax,0x11993
 1007756:	add    BYTE PTR [rax],al
 1007758:	mov    esp,ss
 100775a:	add    eax,0x0
 100775f:	add    BYTE PTR [rax],al
 1007761:	add    BYTE PTR [rax],al
 1007763:	add    BYTE PTR [rbx],al
 1007765:	add    BYTE PTR [rax],al
 1007767:	add    BYTE PTR [rsp+rdx*8+0x200005],dl
	...
 1007776:	add    BYTE PTR [rax],al
 1007778:	and    al,BYTE PTR [rip+0x111993]        # 0x1119111
 100777e:	add    BYTE PTR [rax],al
 1007780:	lock (bad) 
 1007782:	add    eax,0x0
 1007787:	add    BYTE PTR [rax],al
 1007789:	add    BYTE PTR [rax],al
 100778b:	add    BYTE PTR [rsi],bl
 100778d:	add    BYTE PTR [rax],al
 100778f:	add    BYTE PTR [rax-0x2b],bh
 1007792:	add    eax,0xe000
	...
 100779f:	add    BYTE PTR [rdx],ah
 10077a1:	add    eax,0x31993
 10077a6:	add    BYTE PTR [rax],al
 10077a8:	js     0x1007780
 10077aa:	add    eax,0x0
 10077af:	add    BYTE PTR [rax],al
 10077b1:	add    BYTE PTR [rax],al
 10077b3:	add    BYTE PTR [rip+0xffffffff90000000],al        # 0xffffffff910077b9
 10077b9:	(bad)  
 10077ba:	add    eax,0x2000
	...
 10077c7:	add    BYTE PTR [rdx],ah
 10077c9:	add    eax,0x101993
 10077ce:	add    BYTE PTR [rax],al
 10077d0:	loopne 0x10077a8
 10077d2:	add    eax,0x0
 10077d7:	add    BYTE PTR [rax],al
 10077d9:	add    BYTE PTR [rax],al
 10077db:	add    BYTE PTR [rax],ah
 10077dd:	add    BYTE PTR [rax],al
 10077df:	add    BYTE PTR [rax-0x29],ah
 10077e2:	add    eax,0x11000
	...
 10077ef:	add    BYTE PTR [rdx],ah
 10077f1:	add    eax,0x141993
 10077f6:	add    BYTE PTR [rax],al
 10077f8:	mov    eax,ds
 10077fa:	add    eax,0x0
 10077ff:	add    BYTE PTR [rax],al
 1007801:	add    BYTE PTR [rax],al
 1007803:	add    BYTE PTR [rip+0x2c000000],ch        # 0x2d007809
 1007809:	fld    DWORD PTR [rip+0xf000]        # 0x101680f
	...
 1007817:	add    BYTE PTR [rdx],ah
 1007819:	add    eax,0xa1993
 100781e:	add    BYTE PTR [rax],al
 1007820:	mov    eax,0x5da
 1007825:	add    BYTE PTR [rax],al
 1007827:	add    BYTE PTR [rax],al
 1007829:	add    BYTE PTR [rax],al
 100782b:	add    BYTE PTR [rbx],bl
 100782d:	add    BYTE PTR [rax],al
 100782f:	add    BYTE PTR [rax],cl
 1007831:	fild   DWORD PTR [rip+0x9800]        # 0x1011037
	...
 100783f:	add    BYTE PTR [rdx],ah
 1007841:	add    eax,0x5f1993
 1007846:	add    BYTE PTR [rax],al
 1007848:	or     ah,bl
 100784a:	add    eax,0x0
 100784f:	add    BYTE PTR [rax],al
 1007851:	add    BYTE PTR [rax],al
 1007853:	add    bh,cl
 1007855:	add    BYTE PTR [rax],al
 1007857:	add    BYTE PTR [rax],al
 1007859:	fild   WORD PTR [rip+0x35000]        # 0x103c85f
	...
 1007867:	add    BYTE PTR [rdx],ah
 1007869:	add    eax,0x1d1993
 100786e:	add    BYTE PTR [rax],al
 1007870:	mov    al,0xe5
 1007872:	add    eax,0x0
 1007877:	add    BYTE PTR [rax],al
 1007879:	add    BYTE PTR [rax],al
 100787b:	add    BYTE PTR [rbx+0x0],al
 100787e:	add    BYTE PTR [rax],al
 1007880:	cwde   
 1007881:	out    0x5,al
 1007883:	add    BYTE PTR [rax],dh
 1007885:	add    DWORD PTR [rax],eax
	...
 100788f:	add    BYTE PTR [rdx],ah
 1007891:	add    eax,0xb1993
 1007896:	add    BYTE PTR [rax],al
 1007898:	add    cl,ch
 100789a:	add    eax,0x0
 100789f:	add    BYTE PTR [rax],al
 10078a1:	add    BYTE PTR [rax],al
 10078a3:	add    BYTE PTR [rsi],dl
 10078a5:	add    BYTE PTR [rax],al
 10078a7:	add    BYTE PTR [rax-0x17],bl
 10078aa:	add    eax,0x9800
	...
 10078b7:	add    BYTE PTR [rdx],ah
 10078b9:	add    eax,0x151993
 10078be:	add    BYTE PTR [rax],al
 10078c0:	xor    al,0xea
 10078c2:	add    eax,0x0
 10078c7:	add    BYTE PTR [rax],al
 10078c9:	add    BYTE PTR [rax],al
 10078cb:	add    BYTE PTR [rax],dh
 10078cd:	add    BYTE PTR [rax],al
 10078cf:	add    ah,bl
 10078d1:	(bad)  
 10078d2:	add    eax,0xb800
	...
 10078df:	add    BYTE PTR [rdx],ah
 10078e1:	add    eax,0x41993
 10078e6:	add    BYTE PTR [rax],al
 10078e8:	js     0x10078d6
 10078ea:	add    eax,0x100
 10078ef:	add    BYTE PTR [rax+0xa0005ec],bl
 10078f5:	add    BYTE PTR [rax],al
 10078f7:	add    al,al
 10078f9:	in     al,dx
 10078fa:	add    eax,0x3000
	...
 1007907:	add    BYTE PTR [rdx],ah
 1007909:	add    eax,0x21993
 100790e:	add    BYTE PTR [rax],al
 1007910:	xor    al,0xed
 1007912:	add    eax,0x0
 1007917:	add    BYTE PTR [rax],al
 1007919:	add    BYTE PTR [rax],al
 100791b:	add    BYTE PTR [rip+0x44000000],al        # 0x45007921
 1007921:	in     eax,dx
 1007922:	add    eax,0x2000
	...
 100792f:	add    BYTE PTR [rdx],ah
 1007931:	add    eax,0x381993
 1007936:	add    BYTE PTR [rax],al
 1007938:	mov    ebp,gs
 100793a:	add    eax,0x0
 100793f:	add    BYTE PTR [rax],al
 1007941:	add    BYTE PTR [rax],al
 1007943:	add    BYTE PTR [rbx+0x0],bl
 1007946:	add    BYTE PTR [rax],al
 1007948:	rex.WR out dx,eax
 100794a:	add    eax,0x16800
	...
 1007957:	add    BYTE PTR [rdx],ah
 1007959:	add    eax,0x151993
 100795e:	add    BYTE PTR [rax],al
 1007960:	rex.W
 1007961:	repnz add eax,0x0
 1007967:	add    BYTE PTR [rax],al
 1007969:	add    BYTE PTR [rax],al
 100796b:	add    BYTE PTR [rsi],bl
 100796d:	add    BYTE PTR [rax],al
 100796f:	add    al,dh
 1007971:	repnz add eax,0xa000
	...
 100797f:	add    BYTE PTR [rdx],ah
 1007981:	add    eax,0x41993
 1007986:	add    BYTE PTR [rax],al
 1007988:	add    al,0xf4
 100798a:	add    eax,0x0
 100798f:	add    BYTE PTR [rax],al
 1007991:	add    BYTE PTR [rax],al
 1007993:	add    BYTE PTR [rax],cl
 1007995:	add    BYTE PTR [rax],al
 1007997:	add    BYTE PTR [rsp+rsi*8],ah
 100799a:	add    eax,0x9000
	...
 10079af:	add    al,al
 10079b1:	add    BYTE PTR [rax],al
 10079b3:	add    BYTE PTR [rax],al
 10079b5:	add    BYTE PTR [rax],al
 10079b7:	rex.RX add BYTE PTR [rax],r8b
 10079ba:	add    BYTE PTR [rax],al
 10079bc:	add    BYTE PTR [rax],al
 10079be:	add    BYTE PTR [rax],al
 10079c0:	cmp    DWORD PTR [rdi+0x7b362933],0xeb211d2
 10079ca:	add    al,al
 10079cc:	rex.WRXB cdqe 
 10079ce:	ds (bad) 
 10079d0:	cmp    DWORD PTR [rdi+0x7b362933],0xffffffd2
 10079d7:	adc    DWORD PTR [rdx+0x4fc0000e],esi
 10079dd:	cwde   
 10079de:	ds (bad) 
 10079e0:	cmp    BYTE PTR [rdi+0x7b362933],0xd2
 10079e7:	adc    DWORD PTR [rdx+0x4fc0000e],esi
 10079ed:	cwde   
 10079ee:	ds (bad) 
 10079f0:	(bad)  
 10079f1:	mov    edi,0x7b362933
 10079f6:	rcl    BYTE PTR [rcx],cl
 10079f8:	mov    dl,0xe
 10079fa:	add    al,al
 10079fc:	rex.WRXB cdqe 
 10079fe:	ds (bad) 
 1007a00:	movs   BYTE PTR es:[rdi],BYTE PTR es:[rsi]
 1007a02:	cli    
 1007a03:	ds (bad) 
 1007a05:	(bad)  
 1007a06:	rcl    BYTE PTR [rcx],cl
 1007a08:	sub    DWORD PTR [rdi+0x0],0x0
 1007a0c:	clc    
 1007a0d:	jp     0x1007a86
 1007a0f:	(bad)  
 1007a10:	xchg   ebp,eax
 1007a11:	mov    edi,0x7b362933
 1007a16:	rcl    BYTE PTR [rcx],cl
 1007a18:	mov    dl,0xe
 1007a1a:	add    al,al
 1007a1c:	rex.WRXB cdqe 
 1007a1e:	ds (bad) 
 1007a20:	enter  0xac,0x1
 1007a24:	add    BYTE PTR [rax],al
 1007a26:	add    BYTE PTR [rax],al
 1007a28:	lock rol BYTE PTR [rbx],cl
 1007a2b:	add    DWORD PTR [rax],eax
 1007a2d:	add    BYTE PTR [rax],al
 1007a2f:	add    BYTE PTR [rax+0x10372],al
 1007a35:	add    BYTE PTR [rax],al
 1007a37:	add    al,al
 1007a39:	jns    0x1007a3e
 1007a3b:	add    DWORD PTR [rax],eax
 1007a3d:	add    BYTE PTR [rax],al
 1007a3f:	add    al,al
 1007a41:	test   DWORD PTR [rbx],eax
 1007a43:	add    DWORD PTR [rax],eax
 1007a45:	add    BYTE PTR [rax],al
 1007a47:	add    BYTE PTR [rax+0x10381],ah
 1007a4d:	add    BYTE PTR [rax],al
 1007a4f:	add    BYTE PTR [rax-0x59],dh
 1007a52:	add    eax,DWORD PTR [rcx]
 1007a54:	add    BYTE PTR [rax],al
 1007a56:	add    BYTE PTR [rax],al
 1007a58:	lock in eax,0x0
 1007a5b:	add    DWORD PTR [rax],eax
 1007a5d:	add    BYTE PTR [rax],al
 1007a5f:	add    BYTE PTR [rax],dh
 1007a61:	out    0x0,eax
 1007a63:	add    DWORD PTR [rax],eax
 1007a65:	add    BYTE PTR [rax],al
 1007a67:	add    al,al
 1007a69:	out    0x0,eax
 1007a6b:	add    DWORD PTR [rax],eax
 1007a6d:	add    BYTE PTR [rax],al
 1007a6f:	add    BYTE PTR [rax+0x100e8],ah
 1007a75:	add    BYTE PTR [rax],al
 1007a77:	add    BYTE PTR [rax+0x103bd],dl
 1007a7d:	add    BYTE PTR [rax],al
 1007a7f:	add    BYTE PTR [rbp+0x0],al
 1007a82:	jb     0x1007a84
 1007a84:	jb     0x1007a86
 1007a86:	rex.XB add BYTE PTR [r15+0x0],bpl
 1007a8a:	add    BYTE PTR fs:[rbp+0x0],ah
 1007a8e:	cmp    al,BYTE PTR [rax]
 1007a90:	xor    BYTE PTR [rax],al
 1007a92:	js     0x1007a94
 1007a94:	and    eax,0x2c005800
 1007a99:	add    BYTE PTR [rdx+0x0],dl
 1007a9c:	add    BYTE PTR gs:[rcx+0x0],ah
 1007aa0:	jae    0x1007aa2
 1007aa2:	outs   dx,DWORD PTR ds:[rsi]
 1007aa3:	add    BYTE PTR [rsi+0x0],ch
 1007aa6:	cmp    al,BYTE PTR [rax]
 1007aa8:	and    al,BYTE PTR [rax]
 1007aaa:	and    eax,0x22007300
 1007aaf:	add    BYTE PTR [rax+rax*1],ch
 1007ab2:	and    BYTE PTR [rax],al
 1007ab4:	rex.RX add BYTE PTR [rcx+0x0],r13b
 1007ab8:	ins    BYTE PTR es:[rdi],dx
 1007ab9:	add    BYTE PTR [rbp+0x0],ah
 1007abc:	push   rax
 1007abd:	add    BYTE PTR [rdi+0x0],ch
 1007ac0:	jae    0x1007ac2
 1007ac2:	cmp    al,BYTE PTR [rax]
 1007ac4:	and    eax,0x2c006400
 1007ac9:	add    BYTE PTR [rax+rax*1+0x69],cl
 1007acd:	add    BYTE PTR [rsi+0x0],ch
 1007ad0:	add    BYTE PTR gs:[rdx],bh
 1007ad3:	add    BYTE PTR [rip+0x2c006400],ah        # 0x2d00ded9
 1007ad9:	add    BYTE PTR [rax+rax*1+0x69],cl
 1007add:	add    BYTE PTR [rsi+0x0],ch
 1007ae0:	add    BYTE PTR gs:[rax+0x0],dl
 1007ae4:	outs   dx,DWORD PTR ds:[rsi]
 1007ae5:	add    BYTE PTR [rbx+0x0],dh
 1007ae8:	cmp    al,BYTE PTR [rax]
 1007aea:	and    eax,0x2c006400
 1007aef:	add    BYTE PTR [rbx+0x0],dl
 1007af2:	jb     0x1007af4
 1007af4:	movsxd eax,DWORD PTR [rax]
 1007af6:	push   rsp
 1007af7:	add    BYTE PTR [rbp+0x0],ah
 1007afa:	js     0x1007afc
 1007afc:	je     0x1007afe
 1007afe:	cmp    al,BYTE PTR [rax]
 1007b00:	and    al,BYTE PTR [rax]
 1007b02:	and    eax,0x22007300
	...
 1007b0f:	add    BYTE PTR [rsi],al
 1007b11:	push   0xffffffffffffffd9
 1007b13:	mov    BYTE PTR [rdx-0x59ee2b0f],dl
 1007b19:	pop    rdi
 1007b1a:	add    BYTE PTR [rax-0x6a],al
 1007b1d:	xor    dl,BYTE PTR [rcx-0x1b]
 1007b20:	push   rbp
 1007b21:	add    BYTE PTR [rbx+0x0],dh
 1007b24:	add    BYTE PTR gs:[rcx+0x0],cl
 1007b28:	outs   dx,BYTE PTR ds:[rsi]
 1007b29:	add    BYTE PTR [rax+rax*1+0x69],ch
 1007b2d:	add    BYTE PTR [rsi+0x0],ch
 1007b30:	add    BYTE PTR gs:[rbx+0x0],dl
 1007b34:	movsxd eax,DWORD PTR [rax]
 1007b36:	push   0x6d006500
 1007b3b:	add    BYTE PTR [rcx+0x0],ah
 1007b3e:	add    BYTE PTR [rax],al
 1007b40:	(bad)  
 1007b41:	(bad)  
 1007b42:	fs jae 0x1007b88
 1007b45:	outs   dx,DWORD PTR ds:[rsi]
 1007b46:	outs   dx,BYTE PTR ds:[rsi]
 1007b47:	imul   sp,WORD PTR [rdi+0x2f],0x6f43
 1007b4d:	ins    BYTE PTR es:[rdi],dx
 1007b4e:	ins    BYTE PTR es:[rdi],dx
 1007b4f:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 1007b54:	outs   dx,BYTE PTR ds:[rsi]
 1007b55:	(bad)  
 1007b56:	(bad)  
 1007b57:	rex.WRB (bad) 
 1007b59:	movsxd ebp,DWORD PTR [rax+0x69]
 1007b5c:	outs   dx,BYTE PTR ds:[rsi]
 1007b5d:	gs jae 0x1007b8f
 1007b60:	(bad)  
 1007b61:	rex.WRB (bad) 
 1007b63:	movsxd ebp,DWORD PTR [rax+0x69]
 1007b66:	outs   dx,BYTE PTR ds:[rsi]
 1007b67:	gs (bad) 
 1007b69:	rex outs dx,BYTE PTR ds:[rsi]
 1007b6b:	(bad)  
 1007b6c:	ins    DWORD PTR es:[rdi],dx
 1007b6d:	add    BYTE PTR gs:[rax],al
 1007b70:	(bad)  
 1007b71:	add    BYTE PTR [rdi],ch
 1007b73:	add    BYTE PTR [rax+rax*1+0x73],ah
 1007b77:	add    BYTE PTR [rbx+0x0],al
 1007b7a:	outs   dx,DWORD PTR ds:[rsi]
 1007b7b:	add    BYTE PTR [rsi+0x0],ch
 1007b7e:	data16 add BYTE PTR [rcx+0x0],ch
 1007b82:	add    BYTE PTR [edi],ch
 1007b85:	add    BYTE PTR [rbx+0x0],al
 1007b88:	outs   dx,DWORD PTR ds:[rsi]
 1007b89:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1007b8d:	add    BYTE PTR [rbp+0x0],ah
 1007b90:	movsxd eax,DWORD PTR [rax]
 1007b92:	je     0x1007b94
 1007b94:	imul   eax,DWORD PTR [rax],0x6e006f
 1007b9a:	(bad)  
 1007b9b:	add    BYTE PTR [rbp+0x0],cl
 1007b9e:	(bad)  
 1007b9f:	add    BYTE PTR [rbx+0x0],ah
 1007ba2:	push   0x6e006900
 1007ba7:	add    BYTE PTR [rbp+0x0],ah
 1007baa:	jae    0x1007bac
 1007bac:	(bad)  
 1007bad:	add    BYTE PTR [rbp+0x0],cl
 1007bb0:	(bad)  
 1007bb1:	add    BYTE PTR [rbx+0x0],ah
 1007bb4:	push   0x6e006900
 1007bb9:	add    BYTE PTR [rbp+0x0],ah
 1007bbc:	pop    rbx
 1007bbd:	add    BYTE PTR [rax+0x0],al
 1007bc0:	outs   dx,BYTE PTR ds:[rsi]
 1007bc1:	add    BYTE PTR [rcx+0x0],ah
 1007bc4:	ins    DWORD PTR es:[rdi],dx
 1007bc5:	add    BYTE PTR [rbp+0x0],ah
 1007bc8:	cmp    eax,0x25002200
 1007bcd:	add    BYTE PTR [rbx+0x0],dh
 1007bd0:	and    al,BYTE PTR [rax]
 1007bd2:	pop    rbp
 1007bd3:	add    BYTE PTR [rdi],ch
 1007bd5:	add    BYTE PTR [rcx+0x0],cl
 1007bd8:	outs   dx,BYTE PTR ds:[rsi]
 1007bd9:	add    BYTE PTR [rbx+0x0],dh
 1007bdc:	je     0x1007bde
 1007bde:	(bad)  
 1007bdf:	add    BYTE PTR [rsi+0x0],ch
 1007be2:	movsxd eax,DWORD PTR [rax]
 1007be4:	add    BYTE PTR gs:[rbx+0x0],dh
 1007be8:	(bad)  
 1007be9:	add    BYTE PTR [rcx+0x0],cl
 1007bec:	outs   dx,BYTE PTR ds:[rsi]
 1007bed:	add    BYTE PTR [rbx+0x0],dh
 1007bf0:	je     0x1007bf2
 1007bf2:	(bad)  
 1007bf3:	add    BYTE PTR [rsi+0x0],ch
 1007bf6:	movsxd eax,DWORD PTR [rax]
 1007bf8:	add    BYTE PTR gs:[rdi],ch
 1007bfb:	add    BYTE PTR [rax+0x0],al
 1007bfe:	outs   dx,BYTE PTR ds:[rsi]
 1007bff:	add    BYTE PTR [rcx+0x0],ah
 1007c02:	ins    DWORD PTR es:[rdi],dx
 1007c03:	add    BYTE PTR [rbp+0x0],ah
	...
 1007c0e:	add    BYTE PTR [rax],al
 1007c10:	(bad)  
 1007c11:	add    BYTE PTR [rdi],ch
 1007c13:	add    BYTE PTR [rax+rax*1+0x73],ah
 1007c17:	add    BYTE PTR [rbx+0x0],al
 1007c1a:	outs   dx,DWORD PTR ds:[rsi]
 1007c1b:	add    BYTE PTR [rsi+0x0],ch
 1007c1e:	data16 add BYTE PTR [rcx+0x0],ch
 1007c22:	add    BYTE PTR [edi],ch
 1007c25:	add    BYTE PTR [rbx+0x0],al
 1007c28:	outs   dx,DWORD PTR ds:[rsi]
 1007c29:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1007c2d:	add    BYTE PTR [rbp+0x0],ah
 1007c30:	movsxd eax,DWORD PTR [rax]
 1007c32:	je     0x1007c34
 1007c34:	imul   eax,DWORD PTR [rax],0x6e006f
 1007c3a:	(bad)  
 1007c3b:	add    BYTE PTR [rbp+0x0],cl
 1007c3e:	(bad)  
 1007c3f:	add    BYTE PTR [rbx+0x0],ah
 1007c42:	push   0x6e006900
 1007c47:	add    BYTE PTR [rbp+0x0],ah
 1007c4a:	jae    0x1007c4c
 1007c4c:	(bad)  
 1007c4d:	add    BYTE PTR [rbp+0x0],cl
 1007c50:	(bad)  
 1007c51:	add    BYTE PTR [rbx+0x0],ah
 1007c54:	push   0x6e006900
 1007c59:	add    BYTE PTR [rbp+0x0],ah
 1007c5c:	pop    rbx
 1007c5d:	add    BYTE PTR [rax+0x0],al
 1007c60:	outs   dx,BYTE PTR ds:[rsi]
 1007c61:	add    BYTE PTR [rcx+0x0],ah
 1007c64:	ins    DWORD PTR es:[rdi],dx
 1007c65:	add    BYTE PTR [rbp+0x0],ah
 1007c68:	cmp    eax,0x25002200
 1007c6d:	add    BYTE PTR [rbx+0x0],dh
 1007c70:	and    al,BYTE PTR [rax]
 1007c72:	pop    rbp
 1007c73:	add    BYTE PTR [rdi],ch
 1007c75:	add    BYTE PTR [rcx+0x0],cl
 1007c78:	outs   dx,BYTE PTR ds:[rsi]
 1007c79:	add    BYTE PTR [rbx+0x0],dh
 1007c7c:	je     0x1007c7e
 1007c7e:	(bad)  
 1007c7f:	add    BYTE PTR [rsi+0x0],ch
 1007c82:	movsxd eax,DWORD PTR [rax]
 1007c84:	add    BYTE PTR gs:[rbx+0x0],dh
 1007c88:	(bad)  
 1007c89:	add    BYTE PTR [rcx+0x0],cl
 1007c8c:	outs   dx,BYTE PTR ds:[rsi]
 1007c8d:	add    BYTE PTR [rbx+0x0],dh
 1007c90:	je     0x1007c92
 1007c92:	(bad)  
 1007c93:	add    BYTE PTR [rsi+0x0],ch
 1007c96:	movsxd eax,DWORD PTR [rax]
 1007c98:	add    BYTE PTR gs:[rdi],ch
 1007c9b:	add    BYTE PTR [rax+0x0],al
 1007c9e:	jae    0x1007ca0
 1007ca0:	jae    0x1007ca2
 1007ca2:	jbe    0x1007ca4
 1007ca4:	add    BYTE PTR gs:[rdx+0x0],dh
	...
 1007cb0:	xor    DWORD PTR [rax],eax
 1007cb2:	xor    BYTE PTR [rax],al
 1007cb4:	add    BYTE PTR cs:[rip+0x0],dh        # 0x1007cbb
 1007cbb:	add    BYTE PTR [rax],al
 1007cbd:	add    BYTE PTR [rax],al
 1007cbf:	add    BYTE PTR [rcx],dh
 1007cc1:	add    BYTE PTR [rax],dh
 1007cc3:	add    BYTE PTR [rsi],ch
 1007cc5:	add    BYTE PTR [rip+0x3000],dh        # 0x100accb
 1007ccb:	add    BYTE PTR [rax],al
 1007ccd:	add    BYTE PTR [rax],al
 1007ccf:	add    BYTE PTR [rax-0x53],cl
 1007cd2:	add    BYTE PTR [rcx],al
 1007cd4:	add    BYTE PTR [rax],al
 1007cd6:	add    BYTE PTR [rax],al
 1007cd8:	jle    0x1007cd3
 1007cda:	add    eax,DWORD PTR [rcx]
 1007cdc:	add    BYTE PTR [rax],al
 1007cde:	add    BYTE PTR [rax],al
 1007ce0:	lock (bad) 
 1007ce2:	add    eax,DWORD PTR [rcx]
 1007ce4:	add    BYTE PTR [rax],al
 1007ce6:	add    BYTE PTR [rax],al
 1007ce8:	nop
 1007ce9:	rol    DWORD PTR [rbx],cl
 1007ceb:	add    DWORD PTR [rax],eax
 1007ced:	add    BYTE PTR [rax],al
 1007cef:	add    al,dh
 1007cf1:	scas   al,BYTE PTR es:[rdi]
 1007cf2:	add    BYTE PTR [rcx],al
 1007cf4:	add    BYTE PTR [rax],al
 1007cf6:	add    BYTE PTR [rax],al
 1007cf8:	add    BYTE PTR [rdi+0x100],ch
 1007cfe:	add    BYTE PTR [rax],al
 1007d00:	(bad)  
 1007d01:	add    BYTE PTR [rdi],ch
 1007d03:	add    BYTE PTR [rax+rax*1+0x73],ah
 1007d07:	add    BYTE PTR [rbx+0x0],al
 1007d0a:	outs   dx,DWORD PTR ds:[rsi]
 1007d0b:	add    BYTE PTR [rsi+0x0],ch
 1007d0e:	data16 add BYTE PTR [rcx+0x0],ch
 1007d12:	add    BYTE PTR [edi],ch
 1007d15:	add    BYTE PTR [rbx+0x0],al
 1007d18:	outs   dx,DWORD PTR ds:[rsi]
 1007d19:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1007d1d:	add    BYTE PTR [rbp+0x0],ah
 1007d20:	movsxd eax,DWORD PTR [rax]
 1007d22:	je     0x1007d24
 1007d24:	imul   eax,DWORD PTR [rax],0x6e006f
 1007d2a:	(bad)  
 1007d2b:	add    BYTE PTR [rbp+0x0],cl
 1007d2e:	(bad)  
 1007d2f:	add    BYTE PTR [rbx+0x0],ah
 1007d32:	push   0x6e006900
 1007d37:	add    BYTE PTR [rbp+0x0],ah
 1007d3a:	jae    0x1007d3c
 1007d3c:	(bad)  
 1007d3d:	add    BYTE PTR [rbp+0x0],cl
 1007d40:	(bad)  
 1007d41:	add    BYTE PTR [rbx+0x0],ah
 1007d44:	push   0x6e006900
 1007d49:	add    BYTE PTR [rbp+0x0],ah
 1007d4c:	pop    rbx
 1007d4d:	add    BYTE PTR [rax+0x0],al
 1007d50:	outs   dx,BYTE PTR ds:[rsi]
 1007d51:	add    BYTE PTR [rcx+0x0],ah
 1007d54:	ins    DWORD PTR es:[rdi],dx
 1007d55:	add    BYTE PTR [rbp+0x0],ah
 1007d58:	cmp    eax,0x25002200
 1007d5d:	add    BYTE PTR [rbx+0x0],dh
 1007d60:	and    al,BYTE PTR [rax]
 1007d62:	pop    rbp
 1007d63:	add    BYTE PTR [rdi],ch
 1007d65:	add    BYTE PTR [rbp+0x0],cl
 1007d68:	(bad)  
 1007d69:	add    BYTE PTR [rbx+0x0],ah
 1007d6c:	push   0x6e006900
 1007d71:	add    BYTE PTR [rbp+0x0],ah
 1007d74:	rex.XB add BYTE PTR [r15+0x0],bpl
 1007d78:	ins    BYTE PTR es:[rdi],dx
 1007d79:	add    BYTE PTR [rax+rax*1+0x65],ch
 1007d7d:	add    BYTE PTR [rbx+0x0],ah
 1007d80:	je     0x1007d82
 1007d82:	outs   dx,DWORD PTR ds:[rsi]
 1007d83:	add    BYTE PTR [rdx+0x0],dh
 1007d86:	jae    0x1007d88
 1007d88:	(bad)  
 1007d89:	add    BYTE PTR [rax+0x0],dl
 1007d8c:	add    BYTE PTR gs:[rdx+0x0],dh
 1007d90:	data16 add BYTE PTR [rbp+0x0],ch
 1007d94:	outs   dx,DWORD PTR ds:[rsi]
 1007d95:	add    BYTE PTR [rsi+0x0],ch
 1007d98:	rex.XB add BYTE PTR [r15+0x0],bpl
 1007d9c:	ins    BYTE PTR es:[rdi],dx
 1007d9d:	add    BYTE PTR [rax+rax*1+0x65],ch
 1007da1:	add    BYTE PTR [rbx+0x0],ah
 1007da4:	je     0x1007da6
 1007da6:	outs   dx,DWORD PTR ds:[rsi]
 1007da7:	add    BYTE PTR [rdx+0x0],dh
 1007daa:	pop    rbx
 1007dab:	add    BYTE PTR [rax+0x0],al
 1007dae:	add    BYTE PTR gs:[rsi+0x0],ch
 1007db2:	(bad)  
 1007db3:	add    BYTE PTR [rdx+0x0],ah
 1007db6:	ins    BYTE PTR es:[rdi],dx
 1007db7:	add    BYTE PTR [rbp+0x0],ah
 1007dba:	add    BYTE PTR fs:[rip+0x74002200],bh        # 0x75009fc1
 1007dc1:	add    BYTE PTR [rdx+0x0],dh
 1007dc4:	jne    0x1007dc6
 1007dc6:	add    BYTE PTR gs:[rdx],ah
 1007dc9:	add    BYTE PTR [rbp+0x0],bl
 1007dcc:	(bad)  
 1007dcd:	add    BYTE PTR [rax+0x0],dl
 1007dd0:	add    BYTE PTR gs:[rdx+0x0],dh
 1007dd4:	data16 add BYTE PTR [rbp+0x0],ch
 1007dd8:	outs   dx,DWORD PTR ds:[rsi]
 1007dd9:	add    BYTE PTR [rsi+0x0],ch
 1007ddc:	rex.XB add BYTE PTR [r15+0x0],bpl
 1007de0:	jne    0x1007de2
 1007de2:	outs   dx,BYTE PTR ds:[rsi]
 1007de3:	add    BYTE PTR [rax+rax*1+0x65],dh
 1007de7:	add    BYTE PTR [rdx+0x0],dh
 1007dea:	jae    0x1007dec
 1007dec:	(bad)  
 1007ded:	add    BYTE PTR [rax+0x0],dl
 1007df0:	add    BYTE PTR gs:[rdx+0x0],dh
 1007df4:	data16 add BYTE PTR [rbp+0x0],ch
 1007df8:	outs   dx,DWORD PTR ds:[rsi]
 1007df9:	add    BYTE PTR [rsi+0x0],ch
 1007dfc:	rex.WRXB add BYTE PTR [r10+0x0],r12b
 1007e00:	push   0x0
 1007e02:	add    BYTE PTR gs:[rbx+0x0],ah
 1007e06:	je     0x1007e08
 1007e08:	(bad)  
 1007e09:	add    BYTE PTR [rax+0x0],dl
 1007e0c:	add    BYTE PTR gs:[rdx+0x0],dh
 1007e10:	data16 add BYTE PTR [rbp+0x0],ch
 1007e14:	outs   dx,DWORD PTR ds:[rsi]
 1007e15:	add    BYTE PTR [rsi+0x0],ch
 1007e18:	rex.XB add BYTE PTR [r15+0x0],bpl
 1007e1c:	jne    0x1007e1e
 1007e1e:	outs   dx,BYTE PTR ds:[rsi]
 1007e1f:	add    BYTE PTR [rax+rax*1+0x65],dh
 1007e23:	add    BYTE PTR [rdx+0x0],dh
 1007e26:	pop    rbx
 1007e27:	add    BYTE PTR [rax+0x0],al
 1007e2a:	add    BYTE PTR gs:[rsi+0x0],ch
 1007e2e:	(bad)  
 1007e2f:	add    BYTE PTR [rdx+0x0],ah
 1007e32:	ins    BYTE PTR es:[rdi],dx
 1007e33:	add    BYTE PTR [rbp+0x0],ah
 1007e36:	add    BYTE PTR fs:[rip+0x74002200],bh        # 0x7500a03d
 1007e3d:	add    BYTE PTR [rdx+0x0],dh
 1007e40:	jne    0x1007e42
 1007e42:	add    BYTE PTR gs:[rdx],ah
 1007e45:	add    BYTE PTR [rbp+0x0],bl
 1007e48:	add    BYTE PTR [rax],al
 1007e4a:	add    BYTE PTR [rax],al
 1007e4c:	outs   dx,BYTE PTR ds:[rsi]
 1007e4d:	(bad)  
 1007e4e:	ins    DWORD PTR es:[rdi],dx
 1007e4f:	add    BYTE PTR gs:[rax],al
 1007e52:	add    BYTE PTR [rax],al
 1007e54:	pop    rsp
 1007e55:	add    BYTE PTR [rdx],ch
 1007e57:	add    BYTE PTR [rax],al
 1007e59:	add    BYTE PTR [rax],al
 1007e5b:	add    BYTE PTR [rsi+0x61],dh
 1007e5e:	ins    BYTE PTR es:[rdi],dx
 1007e5f:	jne    0x1007ec6
 1007e61:	add    BYTE PTR [rax],al
 1007e63:	add    BYTE PTR [rax],al
 1007e65:	add    BYTE PTR [rax],al
 1007e67:	add    BYTE PTR [rip+0x3d007300],ah        # 0x3e00f16d
 1007e6d:	add    BYTE PTR [rip+0x2c007300],ah        # 0x2d00f173
 1007e73:	add    BYTE PTR [rax],al
 1007e75:	add    BYTE PTR [rax],al
 1007e77:	add    BYTE PTR [rcx+rdi*2+0x70],dh
 1007e7b:	add    BYTE PTR gs:[rax],al
 1007e7e:	add    BYTE PTR [rax],al
 1007e80:	jo     0x1007ef1
 1007e82:	imul   ebp,DWORD PTR [rsi+0x74],0x73000000
 1007e89:	add    BYTE PTR [rax+0x0],ch
 1007e8c:	jne    0x1007e8e
 1007e8e:	je     0x1007e90
 1007e90:	add    BYTE PTR fs:[rdi+0x0],ch
 1007e94:	ja     0x1007e96
 1007e96:	outs   dx,BYTE PTR ds:[rsi]
	...
 1007e9f:	add    BYTE PTR [rbx+0x0],ah
 1007ea2:	ins    DWORD PTR es:[rdi],dx
 1007ea3:	add    BYTE PTR [rax+rax*1+0x0],ah
 1007ea7:	add    BYTE PTR [rdi+0x0],ah
 1007eaa:	jb     0x1007eac
 1007eac:	outs   dx,DWORD PTR ds:[rsi]
 1007ead:	add    BYTE PTR [rbp+0x0],dh
 1007eb0:	jo     0x1007eb2
 1007eb2:	outs   dx,BYTE PTR ds:[rsi]
 1007eb3:	add    BYTE PTR [rcx+0x0],ah
 1007eb6:	ins    DWORD PTR es:[rdi],dx
 1007eb7:	add    BYTE PTR [rbp+0x0],ah
 1007eba:	add    BYTE PTR [rax],al
 1007ebc:	add    BYTE PTR [rax],al
 1007ebe:	add    BYTE PTR [rax],al
 1007ec0:	je     0x1007ec2
 1007ec2:	(bad)  
 1007ec3:	add    BYTE PTR [rbx+0x0],dh
 1007ec6:	imul   eax,DWORD PTR [rax],0x6e
 1007ec9:	add    BYTE PTR [rcx+0x0],ah
 1007ecc:	ins    DWORD PTR es:[rdi],dx
 1007ecd:	add    BYTE PTR [rbp+0x0],ah
	...
 1007ed8:	ja     0x1007eda
 1007eda:	(bad)  
 1007edb:	add    BYTE PTR [rcx+0x0],ch
 1007ede:	je     0x1007ee0
	...
 1007ee8:	jo     0x1007eea
 1007eea:	outs   dx,DWORD PTR ds:[rsi]
 1007eeb:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1007eef:	add    BYTE PTR [rcx+0x0],ch
 1007ef2:	outs   dx,BYTE PTR ds:[rsi]
 1007ef3:	add    BYTE PTR [rdi+0x0],ah
 1007ef6:	imul   eax,DWORD PTR [rax],0x74006e
 1007efc:	add    BYTE PTR gs:[rdx+0x0],dh
 1007f00:	jbe    0x1007f02
 1007f02:	(bad)  
 1007f03:	add    BYTE PTR [rax+rax*1+0x0],ch
 1007f07:	add    BYTE PTR [rdi],ch
 1007f09:	add    BYTE PTR [rdi],ch
 1007f0b:	add    BYTE PTR [rbx+0x0],al
 1007f0e:	jne    0x1007f10
 1007f10:	jae    0x1007f12
 1007f12:	je     0x1007f14
 1007f14:	outs   dx,DWORD PTR ds:[rsi]
 1007f15:	add    BYTE PTR [rbp+0x0],ch
 1007f18:	push   rsp
 1007f19:	add    BYTE PTR [rcx+0x0],ah
 1007f1c:	jae    0x1007f1e
 1007f1e:	imul   eax,DWORD PTR [rax],0x5b
 1007f21:	add    BYTE PTR [rax+0x0],al
 1007f24:	add    BYTE PTR gs:[rsi+0x0],ch
 1007f28:	(bad)  
 1007f29:	add    BYTE PTR [rdx+0x0],ah
 1007f2c:	ins    BYTE PTR es:[rdi],dx
 1007f2d:	add    BYTE PTR [rbp+0x0],ah
 1007f30:	add    BYTE PTR fs:[rip+0x74002200],bh        # 0x7500a137
 1007f37:	add    BYTE PTR [rdx+0x0],dh
 1007f3a:	jne    0x1007f3c
 1007f3c:	add    BYTE PTR gs:[rdx],ah
 1007f3f:	add    BYTE PTR [rbp+0x0],bl
	...
 1007f4e:	add    BYTE PTR [rax],al
 1007f50:	(bad)  
 1007f51:	add    BYTE PTR [rdi],ch
 1007f53:	add    BYTE PTR [rax+rax*1+0x73],ah
 1007f57:	add    BYTE PTR [rbx+0x0],al
 1007f5a:	outs   dx,DWORD PTR ds:[rsi]
 1007f5b:	add    BYTE PTR [rsi+0x0],ch
 1007f5e:	data16 add BYTE PTR [rcx+0x0],ch
 1007f62:	add    BYTE PTR [edi],ch
 1007f65:	add    BYTE PTR [rbx+0x0],al
 1007f68:	outs   dx,DWORD PTR ds:[rsi]
 1007f69:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1007f6d:	add    BYTE PTR [rbp+0x0],ah
 1007f70:	movsxd eax,DWORD PTR [rax]
 1007f72:	je     0x1007f74
 1007f74:	imul   eax,DWORD PTR [rax],0x6e006f
 1007f7a:	(bad)  
 1007f7b:	add    BYTE PTR [rax+0x0],al
 1007f7e:	jae    0x1007f80
 1007f80:	add    BYTE PTR gs:[rax+rax*1+0x75],dh
 1007f85:	add    BYTE PTR [rax+0x0],dh
 1007f88:	jbe    0x1007f8a
 1007f8a:	add    BYTE PTR gs:[rdx+0x0],dh
 1007f8e:	add    BYTE PTR [rax],al
 1007f90:	(bad)  
 1007f91:	add    BYTE PTR [rdi],ch
 1007f93:	add    BYTE PTR [rax+rax*1+0x73],ah
 1007f97:	add    BYTE PTR [rbx+0x0],al
 1007f9a:	outs   dx,DWORD PTR ds:[rsi]
 1007f9b:	add    BYTE PTR [rsi+0x0],ch
 1007f9e:	data16 add BYTE PTR [rcx+0x0],ch
 1007fa2:	add    BYTE PTR [edi],ch
 1007fa5:	add    BYTE PTR [rbx+0x0],al
 1007fa8:	outs   dx,DWORD PTR ds:[rsi]
 1007fa9:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1007fad:	add    BYTE PTR [rbp+0x0],ah
 1007fb0:	movsxd eax,DWORD PTR [rax]
 1007fb2:	je     0x1007fb4
 1007fb4:	imul   eax,DWORD PTR [rax],0x6e006f
 1007fba:	(bad)  
 1007fbb:	add    BYTE PTR [rax+0x0],al
 1007fbe:	movsxd eax,DWORD PTR [rax]
 1007fc0:	(bad)  
 1007fc1:	add    BYTE PTR [rbx+0x0],dh
 1007fc4:	add    BYTE PTR gs:[rsi+0x0],ch
 1007fc8:	jne    0x1007fca
 1007fca:	ins    DWORD PTR es:[rdi],dx
 1007fcb:	add    BYTE PTR [rdx+0x0],ah
 1007fce:	add    BYTE PTR gs:[rdx+0x0],dh
	...
 1007fde:	add    BYTE PTR [rax],al
 1007fe0:	(bad)  
 1007fe1:	add    BYTE PTR [rdi],ch
 1007fe3:	add    BYTE PTR [rax+rax*1+0x73],ah
 1007fe7:	add    BYTE PTR [rbx+0x0],al
 1007fea:	outs   dx,DWORD PTR ds:[rsi]
 1007feb:	add    BYTE PTR [rsi+0x0],ch
 1007fee:	data16 add BYTE PTR [rcx+0x0],ch
 1007ff2:	add    BYTE PTR [edi],ch
 1007ff5:	add    BYTE PTR [rbx+0x0],al
 1007ff8:	outs   dx,DWORD PTR ds:[rsi]
 1007ff9:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1007ffd:	add    BYTE PTR [rbp+0x0],ah
 1008000:	movsxd eax,DWORD PTR [rax]
 1008002:	je     0x1008004
 1008004:	imul   eax,DWORD PTR [rax],0x6e006f
 100800a:	(bad)  
 100800b:	add    BYTE PTR [rbp+0x0],cl
 100800e:	(bad)  
 100800f:	add    BYTE PTR [rbx+0x0],ah
 1008012:	push   0x6e006900
 1008017:	add    BYTE PTR [rbp+0x0],ah
 100801a:	jae    0x100801c
 100801c:	(bad)  
 100801d:	add    BYTE PTR [rbp+0x0],cl
 1008020:	(bad)  
 1008021:	add    BYTE PTR [rbx+0x0],ah
 1008024:	push   0x6e006900
 1008029:	add    BYTE PTR [rbp+0x0],ah
 100802c:	pop    rbx
 100802d:	add    BYTE PTR [rax+0x0],al
 1008030:	outs   dx,BYTE PTR ds:[rsi]
 1008031:	add    BYTE PTR [rcx+0x0],ah
 1008034:	ins    DWORD PTR es:[rdi],dx
 1008035:	add    BYTE PTR [rbp+0x0],ah
 1008038:	cmp    eax,0x25002200
 100803d:	add    BYTE PTR [rbx+0x0],dh
 1008040:	and    al,BYTE PTR [rax]
 1008042:	pop    rbp
 1008043:	add    BYTE PTR [rdi],ch
 1008045:	add    BYTE PTR [rcx+0x0],cl
 1008048:	outs   dx,BYTE PTR ds:[rsi]
 1008049:	add    BYTE PTR [rbx+0x0],dh
 100804c:	je     0x100804e
 100804e:	(bad)  
 100804f:	add    BYTE PTR [rsi+0x0],ch
 1008052:	movsxd eax,DWORD PTR [rax]
 1008054:	add    BYTE PTR gs:[rbx+0x0],dh
 1008058:	(bad)  
 1008059:	add    BYTE PTR [rcx+0x0],cl
 100805c:	outs   dx,BYTE PTR ds:[rsi]
 100805d:	add    BYTE PTR [rbx+0x0],dh
 1008060:	je     0x1008062
 1008062:	(bad)  
 1008063:	add    BYTE PTR [rsi+0x0],ch
 1008066:	movsxd eax,DWORD PTR [rax]
 1008068:	add    BYTE PTR gs:[rbx+0x0],bl
 100806c:	add    BYTE PTR [rsi+0x0],bpl
 1008070:	(bad)  
 1008071:	add    BYTE PTR [rbp+0x0],ch
 1008074:	add    BYTE PTR gs:[rip+0x25002200],bh        # 0x2600a27b
 100807b:	add    BYTE PTR [rbx+0x0],dh
 100807e:	and    al,BYTE PTR [rax]
 1008080:	pop    rbp
 1008081:	add    BYTE PTR [rdi],ch
 1008083:	add    BYTE PTR [rax+0x0],al
 1008086:	ja     0x1008088
 1008088:	imul   eax,DWORD PTR [rax],0x64006e
 100808e:	outs   dx,DWORD PTR ds:[rsi]
 100808f:	add    BYTE PTR [rdi+0x0],dh
 1008092:	jae    0x1008094
 1008094:	(bad)  
 1008095:	add    BYTE PTR [rbp+0x0],dh
 1008098:	je     0x100809a
 100809a:	push   0x0
 100809f:	add    BYTE PTR [rax+rax*1+0x72],dh
 10080a3:	add    BYTE PTR [rbp+0x0],dh
 10080a6:	add    BYTE PTR gs:[rax],al
 10080a9:	add    BYTE PTR [rax],al
 10080ab:	add    BYTE PTR [rax],al
 10080ad:	add    BYTE PTR [rax],al
 10080af:	add    BYTE PTR [rdi],ch
 10080b1:	add    BYTE PTR [rdi],ch
 10080b3:	add    BYTE PTR [rax+rax*1+0x73],ah
 10080b7:	add    BYTE PTR [rbx+0x0],al
 10080ba:	outs   dx,DWORD PTR ds:[rsi]
 10080bb:	add    BYTE PTR [rsi+0x0],ch
 10080be:	data16 add BYTE PTR [rcx+0x0],ch
 10080c2:	add    BYTE PTR [edi],ch
 10080c5:	add    BYTE PTR [rbx+0x0],al
 10080c8:	outs   dx,DWORD PTR ds:[rsi]
 10080c9:	add    BYTE PTR [rax+rax*1+0x6c],ch
 10080cd:	add    BYTE PTR [rbp+0x0],ah
 10080d0:	movsxd eax,DWORD PTR [rax]
 10080d2:	je     0x10080d4
 10080d4:	imul   eax,DWORD PTR [rax],0x6e006f
 10080da:	(bad)  
 10080db:	add    BYTE PTR [rbp+0x0],cl
 10080de:	(bad)  
 10080df:	add    BYTE PTR [rbx+0x0],ah
 10080e2:	push   0x6e006900
 10080e7:	add    BYTE PTR [rbp+0x0],ah
 10080ea:	jae    0x10080ec
 10080ec:	(bad)  
 10080ed:	add    BYTE PTR [rbp+0x0],cl
 10080f0:	(bad)  
 10080f1:	add    BYTE PTR [rbx+0x0],ah
 10080f4:	push   0x6e006900
 10080f9:	add    BYTE PTR [rbp+0x0],ah
 10080fc:	pop    rbx
 10080fd:	add    BYTE PTR [rax+0x0],al
 1008100:	outs   dx,BYTE PTR ds:[rsi]
 1008101:	add    BYTE PTR [rcx+0x0],ah
 1008104:	ins    DWORD PTR es:[rdi],dx
 1008105:	add    BYTE PTR [rbp+0x0],ah
 1008108:	cmp    eax,0x25002200
 100810d:	add    BYTE PTR [rbx+0x0],dh
 1008110:	and    al,BYTE PTR [rax]
 1008112:	pop    rbp
 1008113:	add    BYTE PTR [rdi],ch
 1008115:	add    BYTE PTR [rcx+0x0],cl
 1008118:	outs   dx,BYTE PTR ds:[rsi]
 1008119:	add    BYTE PTR [rbx+0x0],dh
 100811c:	je     0x100811e
 100811e:	(bad)  
 100811f:	add    BYTE PTR [rsi+0x0],ch
 1008122:	movsxd eax,DWORD PTR [rax]
 1008124:	add    BYTE PTR gs:[rbx+0x0],dh
 1008128:	(bad)  
 1008129:	add    BYTE PTR [rcx+0x0],cl
 100812c:	outs   dx,BYTE PTR ds:[rsi]
 100812d:	add    BYTE PTR [rbx+0x0],dh
 1008130:	je     0x1008132
 1008132:	(bad)  
 1008133:	add    BYTE PTR [rsi+0x0],ch
 1008136:	movsxd eax,DWORD PTR [rax]
 1008138:	add    BYTE PTR gs:[rbx+0x0],bl
 100813c:	add    BYTE PTR [rsi+0x0],bpl
 1008140:	(bad)  
 1008141:	add    BYTE PTR [rbp+0x0],ch
 1008144:	add    BYTE PTR gs:[rip+0x25002200],bh        # 0x2600a34b
 100814b:	add    BYTE PTR [rbx+0x0],dh
 100814e:	and    al,BYTE PTR [rax]
 1008150:	pop    rbp
 1008151:	add    BYTE PTR [rdi],ch
 1008153:	add    BYTE PTR [rdi],ch
 1008155:	add    BYTE PTR [rax+0x0],al
 1008158:	jne    0x100815a
 100815a:	jae    0x100815c
 100815c:	add    BYTE PTR gs:[rdx+0x0],dh
	...
 1008170:	(bad)  
 1008171:	add    BYTE PTR [rdi],ch
 1008173:	add    BYTE PTR [rax+rax*1+0x73],ah
 1008177:	add    BYTE PTR [rbx+0x0],al
 100817a:	outs   dx,DWORD PTR ds:[rsi]
 100817b:	add    BYTE PTR [rsi+0x0],ch
 100817e:	data16 add BYTE PTR [rcx+0x0],ch
 1008182:	add    BYTE PTR [edi],ch
 1008185:	add    BYTE PTR [rbx+0x0],al
 1008188:	outs   dx,DWORD PTR ds:[rsi]
 1008189:	add    BYTE PTR [rax+rax*1+0x6c],ch
 100818d:	add    BYTE PTR [rbp+0x0],ah
 1008190:	movsxd eax,DWORD PTR [rax]
 1008192:	je     0x1008194
 1008194:	imul   eax,DWORD PTR [rax],0x6e006f
 100819a:	(bad)  
 100819b:	add    BYTE PTR [rbp+0x0],cl
 100819e:	(bad)  
 100819f:	add    BYTE PTR [rbx+0x0],ah
 10081a2:	push   0x6e006900
 10081a7:	add    BYTE PTR [rbp+0x0],ah
 10081aa:	jae    0x10081ac
 10081ac:	(bad)  
 10081ad:	add    BYTE PTR [rbp+0x0],cl
 10081b0:	(bad)  
 10081b1:	add    BYTE PTR [rbx+0x0],ah
 10081b4:	push   0x6e006900
 10081b9:	add    BYTE PTR [rbp+0x0],ah
 10081bc:	pop    rbx
 10081bd:	add    BYTE PTR [rax+0x0],al
 10081c0:	outs   dx,BYTE PTR ds:[rsi]
 10081c1:	add    BYTE PTR [rcx+0x0],ah
 10081c4:	ins    DWORD PTR es:[rdi],dx
 10081c5:	add    BYTE PTR [rbp+0x0],ah
 10081c8:	cmp    eax,0x25002200
 10081cd:	add    BYTE PTR [rbx+0x0],dh
 10081d0:	and    al,BYTE PTR [rax]
 10081d2:	pop    rbp
 10081d3:	add    BYTE PTR [rdi],ch
 10081d5:	add    BYTE PTR [rcx+0x0],cl
 10081d8:	outs   dx,BYTE PTR ds:[rsi]
 10081d9:	add    BYTE PTR [rbx+0x0],dh
 10081dc:	je     0x10081de
 10081de:	(bad)  
 10081df:	add    BYTE PTR [rsi+0x0],ch
 10081e2:	movsxd eax,DWORD PTR [rax]
 10081e4:	add    BYTE PTR gs:[rbx+0x0],dh
 10081e8:	(bad)  
 10081e9:	add    BYTE PTR [rcx+0x0],cl
 10081ec:	outs   dx,BYTE PTR ds:[rsi]
 10081ed:	add    BYTE PTR [rbx+0x0],dh
 10081f0:	je     0x10081f2
 10081f2:	(bad)  
 10081f3:	add    BYTE PTR [rsi+0x0],ch
 10081f6:	movsxd eax,DWORD PTR [rax]
 10081f8:	add    BYTE PTR gs:[rbx+0x0],bl
 10081fc:	add    BYTE PTR [rsi+0x0],bpl
 1008200:	(bad)  
 1008201:	add    BYTE PTR [rbp+0x0],ch
 1008204:	add    BYTE PTR gs:[rip+0x25002200],bh        # 0x2600a40b
 100820b:	add    BYTE PTR [rbx+0x0],dh
 100820e:	and    al,BYTE PTR [rax]
 1008210:	pop    rbp
 1008211:	add    BYTE PTR [rdi],ch
 1008213:	add    BYTE PTR [rdi],ch
 1008215:	add    BYTE PTR [rbx+0x0],dl
 1008218:	jno    0x100821a
 100821a:	ins    BYTE PTR es:[rdi],dx
 100821b:	add    BYTE PTR [rax+rax*1+0x69],ah
 100821f:	add    BYTE PTR [rcx+0x0],ah
 1008222:	add    BYTE PTR [ebx+0x0],al
 1008226:	outs   dx,DWORD PTR ds:[rsi]
 1008227:	add    BYTE PTR [rax+rax*1+0x6c],ch
 100822b:	add    BYTE PTR [rbp+0x0],ah
 100822e:	movsxd eax,DWORD PTR [rax]
 1008230:	je     0x1008232
 1008232:	outs   dx,DWORD PTR ds:[rsi]
 1008233:	add    BYTE PTR [rdx+0x0],dh
 1008236:	(bad)  
 1008237:	add    BYTE PTR [rax+0x0],al
 100823a:	add    BYTE PTR gs:[rsi+0x0],ch
 100823e:	(bad)  
 100823f:	add    BYTE PTR [rdx+0x0],ah
 1008242:	ins    BYTE PTR es:[rdi],dx
 1008243:	add    BYTE PTR [rbp+0x0],ah
 1008246:	add    BYTE PTR fs:[rax],al
 1008249:	add    BYTE PTR [rax],al
 100824b:	add    BYTE PTR [rax],al
 100824d:	add    BYTE PTR [rax],al
 100824f:	add    BYTE PTR [rdi],ch
 1008251:	add    BYTE PTR [rdi],ch
 1008253:	add    BYTE PTR [rax+rax*1+0x73],ah
 1008257:	add    BYTE PTR [rbx+0x0],al
 100825a:	outs   dx,DWORD PTR ds:[rsi]
 100825b:	add    BYTE PTR [rsi+0x0],ch
 100825e:	data16 add BYTE PTR [rcx+0x0],ch
 1008262:	add    BYTE PTR [edi],ch
 1008265:	add    BYTE PTR [rbx+0x0],al
 1008268:	outs   dx,DWORD PTR ds:[rsi]
 1008269:	add    BYTE PTR [rax+rax*1+0x6c],ch
 100826d:	add    BYTE PTR [rbp+0x0],ah
 1008270:	movsxd eax,DWORD PTR [rax]
 1008272:	je     0x1008274
 1008274:	imul   eax,DWORD PTR [rax],0x6e006f
 100827a:	(bad)  
 100827b:	add    BYTE PTR [rbp+0x0],cl
 100827e:	(bad)  
 100827f:	add    BYTE PTR [rbx+0x0],ah
 1008282:	push   0x6e006900
 1008287:	add    BYTE PTR [rbp+0x0],ah
 100828a:	jae    0x100828c
 100828c:	(bad)  
 100828d:	add    BYTE PTR [rbp+0x0],cl
 1008290:	(bad)  
 1008291:	add    BYTE PTR [rbx+0x0],ah
 1008294:	push   0x6e006900
 1008299:	add    BYTE PTR [rbp+0x0],ah
 100829c:	pop    rbx
 100829d:	add    BYTE PTR [rax+0x0],al
 10082a0:	outs   dx,BYTE PTR ds:[rsi]
 10082a1:	add    BYTE PTR [rcx+0x0],ah
 10082a4:	ins    DWORD PTR es:[rdi],dx
 10082a5:	add    BYTE PTR [rbp+0x0],ah
 10082a8:	cmp    eax,0x25002200
 10082ad:	add    BYTE PTR [rbx+0x0],dh
 10082b0:	and    al,BYTE PTR [rax]
 10082b2:	pop    rbp
 10082b3:	add    BYTE PTR [rdi],ch
 10082b5:	add    BYTE PTR [rcx+0x0],cl
 10082b8:	outs   dx,BYTE PTR ds:[rsi]
 10082b9:	add    BYTE PTR [rbx+0x0],dh
 10082bc:	je     0x10082be
 10082be:	(bad)  
 10082bf:	add    BYTE PTR [rsi+0x0],ch
 10082c2:	movsxd eax,DWORD PTR [rax]
 10082c4:	add    BYTE PTR gs:[rbx+0x0],dh
 10082c8:	(bad)  
 10082c9:	add    BYTE PTR [rcx+0x0],cl
 10082cc:	outs   dx,BYTE PTR ds:[rsi]
 10082cd:	add    BYTE PTR [rbx+0x0],dh
 10082d0:	je     0x10082d2
 10082d2:	(bad)  
 10082d3:	add    BYTE PTR [rsi+0x0],ch
 10082d6:	movsxd eax,DWORD PTR [rax]
 10082d8:	add    BYTE PTR gs:[rbx+0x0],bl
 10082dc:	add    BYTE PTR [rsi+0x0],bpl
 10082e0:	(bad)  
 10082e1:	add    BYTE PTR [rbp+0x0],ch
 10082e4:	add    BYTE PTR gs:[rip+0x25002200],bh        # 0x2600a4eb
 10082eb:	add    BYTE PTR [rbx+0x0],dh
 10082ee:	and    al,BYTE PTR [rax]
 10082f0:	pop    rbp
 10082f1:	add    BYTE PTR [rdi],ch
 10082f3:	add    BYTE PTR [rdi],ch
 10082f5:	add    BYTE PTR [rbx+0x0],dl
 10082f8:	jno    0x10082fa
 10082fa:	ins    BYTE PTR es:[rdi],dx
 10082fb:	add    BYTE PTR [rax+rax*1+0x69],ah
 10082ff:	add    BYTE PTR [rcx+0x0],ah
 1008302:	add    BYTE PTR [ebx+0x0],al
 1008306:	outs   dx,DWORD PTR ds:[rsi]
 1008307:	add    BYTE PTR [rax+rax*1+0x6c],ch
 100830b:	add    BYTE PTR [rbp+0x0],ah
 100830e:	movsxd eax,DWORD PTR [rax]
 1008310:	je     0x1008312
 1008312:	outs   dx,DWORD PTR ds:[rsi]
 1008313:	add    BYTE PTR [rdx+0x0],dh
 1008316:	pop    rbx
 1008317:	add    BYTE PTR [rax+0x0],al
 100831a:	add    BYTE PTR gs:[rsi+0x0],ch
 100831e:	(bad)  
 100831f:	add    BYTE PTR [rdx+0x0],ah
 1008322:	ins    BYTE PTR es:[rdi],dx
 1008323:	add    BYTE PTR [rbp+0x0],ah
 1008326:	add    BYTE PTR fs:[rip+0x74002200],bh        # 0x7500a52d
 100832d:	add    BYTE PTR [rdx+0x0],dh
 1008330:	jne    0x1008332
 1008332:	add    BYTE PTR gs:[rdx],ah
 1008335:	add    BYTE PTR [rbp+0x0],bl
 1008338:	(bad)  
 1008339:	add    BYTE PTR [rax+0x0],al
 100833c:	jae    0x100833e
 100833e:	je     0x1008340
 1008340:	(bad)  
 1008341:	add    BYTE PTR [rdx+0x0],dh
 1008344:	je     0x1008346
 1008346:	jne    0x1008348
 1008348:	jo     0x100834a
 100834a:	add    BYTE PTR [rax],al
 100834c:	add    BYTE PTR [rax],al
 100834e:	add    BYTE PTR [rax],al
 1008350:	(bad)  
 1008351:	add    BYTE PTR [rdi],ch
 1008353:	add    BYTE PTR [rax+rax*1+0x73],ah
 1008357:	add    BYTE PTR [rbx+0x0],al
 100835a:	outs   dx,DWORD PTR ds:[rsi]
 100835b:	add    BYTE PTR [rsi+0x0],ch
 100835e:	data16 add BYTE PTR [rcx+0x0],ch
 1008362:	add    BYTE PTR [edi],ch
 1008365:	add    BYTE PTR [rbx+0x0],al
 1008368:	outs   dx,DWORD PTR ds:[rsi]
 1008369:	add    BYTE PTR [rax+rax*1+0x6c],ch
 100836d:	add    BYTE PTR [rbp+0x0],ah
 1008370:	movsxd eax,DWORD PTR [rax]
 1008372:	je     0x1008374
 1008374:	imul   eax,DWORD PTR [rax],0x6e006f
 100837a:	(bad)  
 100837b:	add    BYTE PTR [rbp+0x0],cl
 100837e:	(bad)  
 100837f:	add    BYTE PTR [rbx+0x0],ah
 1008382:	push   0x6e006900
 1008387:	add    BYTE PTR [rbp+0x0],ah
 100838a:	jae    0x100838c
 100838c:	(bad)  
 100838d:	add    BYTE PTR [rbp+0x0],cl
 1008390:	(bad)  
 1008391:	add    BYTE PTR [rbx+0x0],ah
 1008394:	push   0x6e006900
 1008399:	add    BYTE PTR [rbp+0x0],ah
 100839c:	pop    rbx
 100839d:	add    BYTE PTR [rax+0x0],al
 10083a0:	outs   dx,BYTE PTR ds:[rsi]
 10083a1:	add    BYTE PTR [rcx+0x0],ah
 10083a4:	ins    DWORD PTR es:[rdi],dx
 10083a5:	add    BYTE PTR [rbp+0x0],ah
 10083a8:	cmp    eax,0x25002200
 10083ad:	add    BYTE PTR [rbx+0x0],dh
 10083b0:	and    al,BYTE PTR [rax]
 10083b2:	pop    rbp
 10083b3:	add    BYTE PTR [rdi],ch
 10083b5:	add    BYTE PTR [rcx+0x0],cl
 10083b8:	outs   dx,BYTE PTR ds:[rsi]
 10083b9:	add    BYTE PTR [rbx+0x0],dh
 10083bc:	je     0x10083be
 10083be:	(bad)  
 10083bf:	add    BYTE PTR [rsi+0x0],ch
 10083c2:	movsxd eax,DWORD PTR [rax]
 10083c4:	add    BYTE PTR gs:[rbx+0x0],dh
 10083c8:	(bad)  
 10083c9:	add    BYTE PTR [rcx+0x0],cl
 10083cc:	outs   dx,BYTE PTR ds:[rsi]
 10083cd:	add    BYTE PTR [rbx+0x0],dh
 10083d0:	je     0x10083d2
 10083d2:	(bad)  
 10083d3:	add    BYTE PTR [rsi+0x0],ch
 10083d6:	movsxd eax,DWORD PTR [rax]
 10083d8:	add    BYTE PTR gs:[rbx+0x0],bl
 10083dc:	add    BYTE PTR [rsi+0x0],bpl
 10083e0:	(bad)  
 10083e1:	add    BYTE PTR [rbp+0x0],ch
 10083e4:	add    BYTE PTR gs:[rip+0x25002200],bh        # 0x2600a5eb
 10083eb:	add    BYTE PTR [rbx+0x0],dh
 10083ee:	and    al,BYTE PTR [rax]
 10083f0:	pop    rbp
 10083f1:	add    BYTE PTR [rdi],ch
 10083f3:	add    BYTE PTR [rdi],ch
 10083f5:	add    BYTE PTR [rbx+0x0],dl
 10083f8:	jno    0x10083fa
 10083fa:	ins    BYTE PTR es:[rdi],dx
 10083fb:	add    BYTE PTR [rax+rax*1+0x69],ah
 10083ff:	add    BYTE PTR [rcx+0x0],ah
 1008402:	add    BYTE PTR [ebx+0x0],al
 1008406:	outs   dx,DWORD PTR ds:[rsi]
 1008407:	add    BYTE PTR [rax+rax*1+0x6c],ch
 100840b:	add    BYTE PTR [rbp+0x0],ah
 100840e:	movsxd eax,DWORD PTR [rax]
 1008410:	je     0x1008412
 1008412:	outs   dx,DWORD PTR ds:[rsi]
 1008413:	add    BYTE PTR [rdx+0x0],dh
 1008416:	pop    rbx
 1008417:	add    BYTE PTR [rax+0x0],al
 100841a:	add    BYTE PTR gs:[rsi+0x0],ch
 100841e:	(bad)  
 100841f:	add    BYTE PTR [rdx+0x0],ah
 1008422:	ins    BYTE PTR es:[rdi],dx
 1008423:	add    BYTE PTR [rbp+0x0],ah
 1008426:	add    BYTE PTR fs:[rip+0x74002200],bh        # 0x7500a62d
 100842d:	add    BYTE PTR [rdx+0x0],dh
 1008430:	jne    0x1008432
 1008432:	add    BYTE PTR gs:[rdx],ah
 1008435:	add    BYTE PTR [rbp+0x0],bl
 1008438:	(bad)  
 1008439:	add    BYTE PTR [rax+0x0],al
 100843c:	jae    0x100843e
 100843e:	push   0x74007500
 1008443:	add    BYTE PTR [rax+rax*1+0x6f],ah
 1008447:	add    BYTE PTR [rdi+0x0],dh
 100844a:	outs   dx,BYTE PTR ds:[rsi]
 100844b:	add    BYTE PTR [rax],al
 100844d:	add    BYTE PTR [rax],al
 100844f:	add    BYTE PTR [rdi],ch
 1008451:	add    BYTE PTR [rdi],ch
 1008453:	add    BYTE PTR [rax+rax*1+0x73],ah
 1008457:	add    BYTE PTR [rbx+0x0],al
 100845a:	outs   dx,DWORD PTR ds:[rsi]
 100845b:	add    BYTE PTR [rsi+0x0],ch
 100845e:	data16 add BYTE PTR [rcx+0x0],ch
 1008462:	add    BYTE PTR [edi],ch
 1008465:	add    BYTE PTR [rbx+0x0],al
 1008468:	outs   dx,DWORD PTR ds:[rsi]
 1008469:	add    BYTE PTR [rax+rax*1+0x6c],ch
 100846d:	add    BYTE PTR [rbp+0x0],ah
 1008470:	movsxd eax,DWORD PTR [rax]
 1008472:	je     0x1008474
 1008474:	imul   eax,DWORD PTR [rax],0x6e006f
 100847a:	(bad)  
 100847b:	add    BYTE PTR [rbp+0x0],cl
 100847e:	(bad)  
 100847f:	add    BYTE PTR [rbx+0x0],ah
 1008482:	push   0x6e006900
 1008487:	add    BYTE PTR [rbp+0x0],ah
 100848a:	jae    0x100848c
 100848c:	(bad)  
 100848d:	add    BYTE PTR [rbp+0x0],cl
 1008490:	(bad)  
 1008491:	add    BYTE PTR [rbx+0x0],ah
 1008494:	push   0x6e006900
 1008499:	add    BYTE PTR [rbp+0x0],ah
 100849c:	pop    rbx
 100849d:	add    BYTE PTR [rax+0x0],al
 10084a0:	outs   dx,BYTE PTR ds:[rsi]
 10084a1:	add    BYTE PTR [rcx+0x0],ah
 10084a4:	ins    DWORD PTR es:[rdi],dx
 10084a5:	add    BYTE PTR [rbp+0x0],ah
 10084a8:	cmp    eax,0x25002200
 10084ad:	add    BYTE PTR [rbx+0x0],dh
 10084b0:	and    al,BYTE PTR [rax]
 10084b2:	pop    rbp
 10084b3:	add    BYTE PTR [rdi],ch
 10084b5:	add    BYTE PTR [rcx+0x0],cl
 10084b8:	outs   dx,BYTE PTR ds:[rsi]
 10084b9:	add    BYTE PTR [rbx+0x0],dh
 10084bc:	je     0x10084be
 10084be:	(bad)  
 10084bf:	add    BYTE PTR [rsi+0x0],ch
 10084c2:	movsxd eax,DWORD PTR [rax]
 10084c4:	add    BYTE PTR gs:[rbx+0x0],dh
 10084c8:	(bad)  
 10084c9:	add    BYTE PTR [rcx+0x0],cl
 10084cc:	outs   dx,BYTE PTR ds:[rsi]
 10084cd:	add    BYTE PTR [rbx+0x0],dh
 10084d0:	je     0x10084d2
 10084d2:	(bad)  
 10084d3:	add    BYTE PTR [rsi+0x0],ch
 10084d6:	movsxd eax,DWORD PTR [rax]
 10084d8:	add    BYTE PTR gs:[rbx+0x0],bl
 10084dc:	add    BYTE PTR [rsi+0x0],bpl
 10084e0:	(bad)  
 10084e1:	add    BYTE PTR [rbp+0x0],ch
 10084e4:	add    BYTE PTR gs:[rip+0x25002200],bh        # 0x2600a6eb
 10084eb:	add    BYTE PTR [rbx+0x0],dh
 10084ee:	and    al,BYTE PTR [rax]
 10084f0:	pop    rbp
 10084f1:	add    BYTE PTR [rdi],ch
 10084f3:	add    BYTE PTR [rdi],ch
 10084f5:	add    BYTE PTR [rax+0x0],dl
 10084f8:	jb     0x10084fa
 10084fa:	outs   dx,DWORD PTR ds:[rsi]
 10084fb:	add    BYTE PTR [rsi+0x0],ah
 10084fe:	imul   eax,DWORD PTR [rax],0x65006c
 1008504:	jb     0x1008506
 1008506:	rex.XB add BYTE PTR [r15+0x0],bpl
 100850a:	ins    BYTE PTR es:[rdi],dx
 100850b:	add    BYTE PTR [rax+rax*1+0x65],ch
 100850f:	add    BYTE PTR [rbx+0x0],ah
 1008512:	je     0x1008514
 1008514:	outs   dx,DWORD PTR ds:[rsi]
 1008515:	add    BYTE PTR [rdx+0x0],dh
 1008518:	(bad)  
 1008519:	add    BYTE PTR [rax+0x0],al
 100851c:	add    BYTE PTR gs:[rsi+0x0],ch
 1008520:	(bad)  
 1008521:	add    BYTE PTR [rdx+0x0],ah
 1008524:	ins    BYTE PTR es:[rdi],dx
 1008525:	add    BYTE PTR [rbp+0x0],ah
 1008528:	add    BYTE PTR fs:[rax],al
 100852b:	add    BYTE PTR [rax],al
 100852d:	add    BYTE PTR [rax],al
 100852f:	add    BYTE PTR [rdi],ch
 1008531:	add    BYTE PTR [rdi],ch
 1008533:	add    BYTE PTR [rax+rax*1+0x73],ah
 1008537:	add    BYTE PTR [rbx+0x0],al
 100853a:	outs   dx,DWORD PTR ds:[rsi]
 100853b:	add    BYTE PTR [rsi+0x0],ch
 100853e:	data16 add BYTE PTR [rcx+0x0],ch
 1008542:	add    BYTE PTR [edi],ch
 1008545:	add    BYTE PTR [rbx+0x0],al
 1008548:	outs   dx,DWORD PTR ds:[rsi]
 1008549:	add    BYTE PTR [rax+rax*1+0x6c],ch
 100854d:	add    BYTE PTR [rbp+0x0],ah
 1008550:	movsxd eax,DWORD PTR [rax]
 1008552:	je     0x1008554
 1008554:	imul   eax,DWORD PTR [rax],0x6e006f
 100855a:	(bad)  
 100855b:	add    BYTE PTR [rbp+0x0],cl
 100855e:	(bad)  
 100855f:	add    BYTE PTR [rbx+0x0],ah
 1008562:	push   0x6e006900
 1008567:	add    BYTE PTR [rbp+0x0],ah
 100856a:	jae    0x100856c
 100856c:	(bad)  
 100856d:	add    BYTE PTR [rbp+0x0],cl
 1008570:	(bad)  
 1008571:	add    BYTE PTR [rbx+0x0],ah
 1008574:	push   0x6e006900
 1008579:	add    BYTE PTR [rbp+0x0],ah
 100857c:	pop    rbx
 100857d:	add    BYTE PTR [rax+0x0],al
 1008580:	outs   dx,BYTE PTR ds:[rsi]
 1008581:	add    BYTE PTR [rcx+0x0],ah
 1008584:	ins    DWORD PTR es:[rdi],dx
 1008585:	add    BYTE PTR [rbp+0x0],ah
 1008588:	cmp    eax,0x25002200
 100858d:	add    BYTE PTR [rbx+0x0],dh
 1008590:	and    al,BYTE PTR [rax]
 1008592:	pop    rbp
 1008593:	add    BYTE PTR [rdi],ch
 1008595:	add    BYTE PTR [rcx+0x0],cl
 1008598:	outs   dx,BYTE PTR ds:[rsi]
 1008599:	add    BYTE PTR [rbx+0x0],dh
 100859c:	je     0x100859e
 100859e:	(bad)  
 100859f:	add    BYTE PTR [rsi+0x0],ch
 10085a2:	movsxd eax,DWORD PTR [rax]
 10085a4:	add    BYTE PTR gs:[rbx+0x0],dh
 10085a8:	(bad)  
 10085a9:	add    BYTE PTR [rcx+0x0],cl
 10085ac:	outs   dx,BYTE PTR ds:[rsi]
 10085ad:	add    BYTE PTR [rbx+0x0],dh
 10085b0:	je     0x10085b2
 10085b2:	(bad)  
 10085b3:	add    BYTE PTR [rsi+0x0],ch
 10085b6:	movsxd eax,DWORD PTR [rax]
 10085b8:	add    BYTE PTR gs:[rbx+0x0],bl
 10085bc:	add    BYTE PTR [rsi+0x0],bpl
 10085c0:	(bad)  
 10085c1:	add    BYTE PTR [rbp+0x0],ch
 10085c4:	add    BYTE PTR gs:[rip+0x25002200],bh        # 0x2600a7cb
 10085cb:	add    BYTE PTR [rbx+0x0],dh
 10085ce:	and    al,BYTE PTR [rax]
 10085d0:	pop    rbp
 10085d1:	add    BYTE PTR [rdi],ch
 10085d3:	add    BYTE PTR [rdi],ch
 10085d5:	add    BYTE PTR [rax+0x0],dl
 10085d8:	jb     0x10085da
 10085da:	outs   dx,DWORD PTR ds:[rsi]
 10085db:	add    BYTE PTR [rsi+0x0],ah
 10085de:	imul   eax,DWORD PTR [rax],0x65006c
 10085e4:	jb     0x10085e6
 10085e6:	rex.XB add BYTE PTR [r15+0x0],bpl
 10085ea:	ins    BYTE PTR es:[rdi],dx
 10085eb:	add    BYTE PTR [rax+rax*1+0x65],ch
 10085ef:	add    BYTE PTR [rbx+0x0],ah
 10085f2:	je     0x10085f4
 10085f4:	outs   dx,DWORD PTR ds:[rsi]
 10085f5:	add    BYTE PTR [rdx+0x0],dh
 10085f8:	pop    rbx
 10085f9:	add    BYTE PTR [rax+0x0],al
 10085fc:	add    BYTE PTR gs:[rsi+0x0],ch
 1008600:	(bad)  
 1008601:	add    BYTE PTR [rdx+0x0],ah
 1008604:	ins    BYTE PTR es:[rdi],dx
 1008605:	add    BYTE PTR [rbp+0x0],ah
 1008608:	add    BYTE PTR fs:[rip+0x74002200],bh        # 0x7500a80f
 100860f:	add    BYTE PTR [rdx+0x0],dh
 1008612:	jne    0x1008614
 1008614:	add    BYTE PTR gs:[rdx],ah
 1008617:	add    BYTE PTR [rbp+0x0],bl
 100861a:	(bad)  
 100861b:	add    BYTE PTR [rbp+0x0],al
 100861e:	jbe    0x1008620
 1008620:	add    BYTE PTR gs:[rsi+0x0],ch
 1008624:	je     0x1008626
 1008626:	jae    0x1008628
 1008628:	(bad)  
 1008629:	add    BYTE PTR [rdi],ch
 100862b:	add    BYTE PTR [rbp+0x0],al
 100862e:	jbe    0x1008630
 1008630:	add    BYTE PTR gs:[rsi+0x0],ch
 1008634:	je     0x1008636
 1008636:	pop    rbx
 1008637:	add    BYTE PTR [rax+0x0],al
 100863a:	add    BYTE PTR gs:[rsi+0x0],ch
 100863e:	(bad)  
 100863f:	add    BYTE PTR [rdx+0x0],ah
 1008642:	ins    BYTE PTR es:[rdi],dx
 1008643:	add    BYTE PTR [rbp+0x0],ah
 1008646:	add    BYTE PTR fs:[rip+0x74002200],bh        # 0x7500a84d
 100864d:	add    BYTE PTR [rdx+0x0],dh
 1008650:	jne    0x1008652
 1008652:	add    BYTE PTR gs:[rdx],ah
 1008655:	add    BYTE PTR [rbp+0x0],bl
 1008658:	add    BYTE PTR [rax],al
 100865a:	add    BYTE PTR [rax],al
 100865c:	imul   esp,DWORD PTR [rax+rax*1+0x0],0x2f002f
 1008664:	add    BYTE PTR fs:[rbx+0x0],dh
 1008668:	rex.XB add BYTE PTR [r15+0x0],bpl
 100866c:	outs   dx,BYTE PTR ds:[rsi]
 100866d:	add    BYTE PTR [rsi+0x0],ah
 1008670:	imul   eax,DWORD PTR [rax],0x2f0067
 1008676:	rex.XB add BYTE PTR [r15+0x0],bpl
 100867a:	ins    BYTE PTR es:[rdi],dx
 100867b:	add    BYTE PTR [rax+rax*1+0x65],ch
 100867f:	add    BYTE PTR [rbx+0x0],ah
 1008682:	je     0x1008684
 1008684:	imul   eax,DWORD PTR [rax],0x6e006f
 100868a:	(bad)  
 100868b:	add    BYTE PTR [rbp+0x0],cl
 100868e:	(bad)  
 100868f:	add    BYTE PTR [rbx+0x0],ah
 1008692:	push   0x6e006900
 1008697:	add    BYTE PTR [rbp+0x0],ah
 100869a:	jae    0x100869c
 100869c:	(bad)  
 100869d:	add    BYTE PTR [rbp+0x0],cl
 10086a0:	(bad)  
 10086a1:	add    BYTE PTR [rbx+0x0],ah
 10086a4:	push   0x6e006900
 10086a9:	add    BYTE PTR [rbp+0x0],ah
 10086ac:	pop    rbx
 10086ad:	add    BYTE PTR [rax+0x0],al
 10086b0:	outs   dx,BYTE PTR ds:[rsi]
 10086b1:	add    BYTE PTR [rcx+0x0],ah
 10086b4:	ins    DWORD PTR es:[rdi],dx
 10086b5:	add    BYTE PTR [rbp+0x0],ah
 10086b8:	cmp    eax,0x25002200
 10086bd:	add    BYTE PTR [rbx+0x0],dh
 10086c0:	and    al,BYTE PTR [rax]
 10086c2:	pop    rbp
 10086c3:	add    BYTE PTR [rdi],ch
 10086c5:	add    BYTE PTR [rcx+0x0],cl
 10086c8:	outs   dx,BYTE PTR ds:[rsi]
 10086c9:	add    BYTE PTR [rbx+0x0],dh
 10086cc:	je     0x10086ce
 10086ce:	(bad)  
 10086cf:	add    BYTE PTR [rsi+0x0],ch
 10086d2:	movsxd eax,DWORD PTR [rax]
 10086d4:	add    BYTE PTR gs:[rbx+0x0],dh
 10086d8:	(bad)  
 10086d9:	add    BYTE PTR [rcx+0x0],cl
 10086dc:	outs   dx,BYTE PTR ds:[rsi]
 10086dd:	add    BYTE PTR [rbx+0x0],dh
 10086e0:	je     0x10086e2
 10086e2:	(bad)  
 10086e3:	add    BYTE PTR [rsi+0x0],ch
 10086e6:	movsxd eax,DWORD PTR [rax]
 10086e8:	add    BYTE PTR gs:[rbx+0x0],bl
 10086ec:	add    BYTE PTR [rsi+0x0],bpl
 10086f0:	(bad)  
 10086f1:	add    BYTE PTR [rbp+0x0],ch
 10086f4:	add    BYTE PTR gs:[rip+0x25002200],bh        # 0x2600a8fb
 10086fb:	add    BYTE PTR [rbx+0x0],dh
 10086fe:	and    al,BYTE PTR [rax]
 1008700:	pop    rbp
 1008701:	add    BYTE PTR [rdi],ch
 1008703:	add    BYTE PTR [rdi],ch
 1008705:	add    BYTE PTR [rax+0x0],dl
 1008708:	jb     0x100870a
 100870a:	outs   dx,DWORD PTR ds:[rsi]
 100870b:	add    BYTE PTR [rsi+0x0],ah
 100870e:	imul   eax,DWORD PTR [rax],0x65006c
 1008714:	jb     0x1008716
 1008716:	rex.XB add BYTE PTR [r15+0x0],bpl
 100871a:	ins    BYTE PTR es:[rdi],dx
 100871b:	add    BYTE PTR [rax+rax*1+0x65],ch
 100871f:	add    BYTE PTR [rbx+0x0],ah
 1008722:	je     0x1008724
 1008724:	outs   dx,DWORD PTR ds:[rsi]
 1008725:	add    BYTE PTR [rdx+0x0],dh
 1008728:	pop    rbx
 1008729:	add    BYTE PTR [rax+0x0],al
 100872c:	add    BYTE PTR gs:[rsi+0x0],ch
 1008730:	(bad)  
 1008731:	add    BYTE PTR [rdx+0x0],ah
 1008734:	ins    BYTE PTR es:[rdi],dx
 1008735:	add    BYTE PTR [rbp+0x0],ah
 1008738:	add    BYTE PTR fs:[rip+0x74002200],bh        # 0x7500a93f
 100873f:	add    BYTE PTR [rdx+0x0],dh
 1008742:	jne    0x1008744
 1008744:	add    BYTE PTR gs:[rdx],ah
 1008747:	add    BYTE PTR [rbp+0x0],bl
 100874a:	(bad)  
 100874b:	add    BYTE PTR [rax+0x0],al
 100874e:	jo     0x1008750
 1008750:	outs   dx,DWORD PTR ds:[rsi]
 1008751:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1008755:	add    BYTE PTR [rcx+0x0],ch
 1008758:	outs   dx,BYTE PTR ds:[rsi]
 1008759:	add    BYTE PTR [rdi+0x0],ah
 100875c:	imul   eax,DWORD PTR [rax],0x74006e
 1008762:	add    BYTE PTR gs:[rdx+0x0],dh
 1008766:	jbe    0x1008768
 1008768:	(bad)  
 1008769:	add    BYTE PTR [rax+rax*1+0x0],ch
 100876d:	add    BYTE PTR [rax],al
 100876f:	add    BYTE PTR [rdi],ch
 1008771:	add    BYTE PTR [rdi],ch
 1008773:	add    BYTE PTR [rax+rax*1+0x73],ah
 1008777:	add    BYTE PTR [rbx+0x0],al
 100877a:	outs   dx,DWORD PTR ds:[rsi]
 100877b:	add    BYTE PTR [rsi+0x0],ch
 100877e:	data16 add BYTE PTR [rcx+0x0],ch
 1008782:	add    BYTE PTR [edi],ch
 1008785:	add    BYTE PTR [rbx+0x0],al
 1008788:	outs   dx,DWORD PTR ds:[rsi]
 1008789:	add    BYTE PTR [rax+rax*1+0x6c],ch
 100878d:	add    BYTE PTR [rbp+0x0],ah
 1008790:	movsxd eax,DWORD PTR [rax]
 1008792:	je     0x1008794
 1008794:	imul   eax,DWORD PTR [rax],0x6e006f
 100879a:	(bad)  
 100879b:	add    BYTE PTR [rbp+0x0],cl
 100879e:	(bad)  
 100879f:	add    BYTE PTR [rbx+0x0],ah
 10087a2:	push   0x6e006900
 10087a7:	add    BYTE PTR [rbp+0x0],ah
 10087aa:	jae    0x10087ac
 10087ac:	(bad)  
 10087ad:	add    BYTE PTR [rbp+0x0],cl
 10087b0:	(bad)  
 10087b1:	add    BYTE PTR [rbx+0x0],ah
 10087b4:	push   0x6e006900
 10087b9:	add    BYTE PTR [rbp+0x0],ah
 10087bc:	pop    rbx
 10087bd:	add    BYTE PTR [rax+0x0],al
 10087c0:	outs   dx,BYTE PTR ds:[rsi]
 10087c1:	add    BYTE PTR [rcx+0x0],ah
 10087c4:	ins    DWORD PTR es:[rdi],dx
 10087c5:	add    BYTE PTR [rbp+0x0],ah
 10087c8:	cmp    eax,0x25002200
 10087cd:	add    BYTE PTR [rbx+0x0],dh
 10087d0:	and    al,BYTE PTR [rax]
 10087d2:	pop    rbp
 10087d3:	add    BYTE PTR [rdi],ch
 10087d5:	add    BYTE PTR [rcx+0x0],cl
 10087d8:	outs   dx,BYTE PTR ds:[rsi]
 10087d9:	add    BYTE PTR [rbx+0x0],dh
 10087dc:	je     0x10087de
 10087de:	(bad)  
 10087df:	add    BYTE PTR [rsi+0x0],ch
 10087e2:	movsxd eax,DWORD PTR [rax]
 10087e4:	add    BYTE PTR gs:[rbx+0x0],dh
 10087e8:	(bad)  
 10087e9:	add    BYTE PTR [rcx+0x0],cl
 10087ec:	outs   dx,BYTE PTR ds:[rsi]
 10087ed:	add    BYTE PTR [rbx+0x0],dh
 10087f0:	je     0x10087f2
 10087f2:	(bad)  
 10087f3:	add    BYTE PTR [rsi+0x0],ch
 10087f6:	movsxd eax,DWORD PTR [rax]
 10087f8:	add    BYTE PTR gs:[rbx+0x0],bl
 10087fc:	add    BYTE PTR [rsi+0x0],bpl
 1008800:	(bad)  
 1008801:	add    BYTE PTR [rbp+0x0],ch
 1008804:	add    BYTE PTR gs:[rip+0x25002200],bh        # 0x2600aa0b
 100880b:	add    BYTE PTR [rbx+0x0],dh
 100880e:	and    al,BYTE PTR [rax]
 1008810:	pop    rbp
 1008811:	add    BYTE PTR [rdi],ch
 1008813:	add    BYTE PTR [rdi],ch
 1008815:	add    BYTE PTR [rax+0x0],dl
 1008818:	jb     0x100881a
 100881a:	outs   dx,DWORD PTR ds:[rsi]
 100881b:	add    BYTE PTR [rsi+0x0],ah
 100881e:	imul   eax,DWORD PTR [rax],0x65006c
 1008824:	jb     0x1008826
 1008826:	rex.XB add BYTE PTR [r15+0x0],bpl
 100882a:	ins    BYTE PTR es:[rdi],dx
 100882b:	add    BYTE PTR [rax+rax*1+0x65],ch
 100882f:	add    BYTE PTR [rbx+0x0],ah
 1008832:	je     0x1008834
 1008834:	outs   dx,DWORD PTR ds:[rsi]
 1008835:	add    BYTE PTR [rdx+0x0],dh
 1008838:	pop    rbx
 1008839:	add    BYTE PTR [rax+0x0],al
 100883c:	add    BYTE PTR gs:[rsi+0x0],ch
 1008840:	(bad)  
 1008841:	add    BYTE PTR [rdx+0x0],ah
 1008844:	ins    BYTE PTR es:[rdi],dx
 1008845:	add    BYTE PTR [rbp+0x0],ah
 1008848:	add    BYTE PTR fs:[rip+0x74002200],bh        # 0x7500aa4f
 100884f:	add    BYTE PTR [rdx+0x0],dh
 1008852:	jne    0x1008854
 1008854:	add    BYTE PTR gs:[rdx],ah
 1008857:	add    BYTE PTR [rbp+0x0],bl
 100885a:	(bad)  
 100885b:	add    BYTE PTR [rax+0x0],al
 100885e:	ins    DWORD PTR es:[rdi],dx
 100885f:	add    BYTE PTR [rcx+0x0],ah
 1008862:	js     0x1008864
 1008864:	data16 add BYTE PTR [rcx+0x0],ch
 1008868:	ins    BYTE PTR es:[rdi],dx
 1008869:	add    BYTE PTR [rbp+0x0],ah
 100886c:	jae    0x100886e
 100886e:	imul   eax,DWORD PTR [rax],0x65007a
	...
 1008880:	(bad)  
 1008881:	add    BYTE PTR [rdi],ch
 1008883:	add    BYTE PTR [rax+rax*1+0x73],ah
 1008887:	add    BYTE PTR [rbx+0x0],al
 100888a:	outs   dx,DWORD PTR ds:[rsi]
 100888b:	add    BYTE PTR [rsi+0x0],ch
 100888e:	data16 add BYTE PTR [rcx+0x0],ch
 1008892:	add    BYTE PTR [edi],ch
 1008895:	add    BYTE PTR [rbx+0x0],al
 1008898:	outs   dx,DWORD PTR ds:[rsi]
 1008899:	add    BYTE PTR [rax+rax*1+0x6c],ch
 100889d:	add    BYTE PTR [rbp+0x0],ah
 10088a0:	movsxd eax,DWORD PTR [rax]
 10088a2:	je     0x10088a4
 10088a4:	imul   eax,DWORD PTR [rax],0x6e006f
 10088aa:	(bad)  
 10088ab:	add    BYTE PTR [rbp+0x0],cl
 10088ae:	(bad)  
 10088af:	add    BYTE PTR [rbx+0x0],ah
 10088b2:	push   0x6e006900
 10088b7:	add    BYTE PTR [rbp+0x0],ah
 10088ba:	jae    0x10088bc
 10088bc:	(bad)  
 10088bd:	add    BYTE PTR [rbp+0x0],cl
 10088c0:	(bad)  
 10088c1:	add    BYTE PTR [rbx+0x0],ah
 10088c4:	push   0x6e006900
 10088c9:	add    BYTE PTR [rbp+0x0],ah
 10088cc:	pop    rbx
 10088cd:	add    BYTE PTR [rax+0x0],al
 10088d0:	outs   dx,BYTE PTR ds:[rsi]
 10088d1:	add    BYTE PTR [rcx+0x0],ah
 10088d4:	ins    DWORD PTR es:[rdi],dx
 10088d5:	add    BYTE PTR [rbp+0x0],ah
 10088d8:	cmp    eax,0x25002200
 10088dd:	add    BYTE PTR [rbx+0x0],dh
 10088e0:	and    al,BYTE PTR [rax]
 10088e2:	pop    rbp
 10088e3:	add    BYTE PTR [rdi],ch
 10088e5:	add    BYTE PTR [rcx+0x0],cl
 10088e8:	outs   dx,BYTE PTR ds:[rsi]
 10088e9:	add    BYTE PTR [rbx+0x0],dh
 10088ec:	je     0x10088ee
 10088ee:	(bad)  
 10088ef:	add    BYTE PTR [rsi+0x0],ch
 10088f2:	movsxd eax,DWORD PTR [rax]
 10088f4:	add    BYTE PTR gs:[rbx+0x0],dh
 10088f8:	(bad)  
 10088f9:	add    BYTE PTR [rcx+0x0],cl
 10088fc:	outs   dx,BYTE PTR ds:[rsi]
 10088fd:	add    BYTE PTR [rbx+0x0],dh
 1008900:	je     0x1008902
 1008902:	(bad)  
 1008903:	add    BYTE PTR [rsi+0x0],ch
 1008906:	movsxd eax,DWORD PTR [rax]
 1008908:	add    BYTE PTR gs:[rbx+0x0],bl
 100890c:	add    BYTE PTR [rsi+0x0],bpl
 1008910:	(bad)  
 1008911:	add    BYTE PTR [rbp+0x0],ch
 1008914:	add    BYTE PTR gs:[rip+0x25002200],bh        # 0x2600ab1b
 100891b:	add    BYTE PTR [rbx+0x0],dh
 100891e:	and    al,BYTE PTR [rax]
 1008920:	pop    rbp
 1008921:	add    BYTE PTR [rdi],ch
 1008923:	add    BYTE PTR [rdi],ch
 1008925:	add    BYTE PTR [rax+0x0],dl
 1008928:	jb     0x100892a
 100892a:	outs   dx,DWORD PTR ds:[rsi]
 100892b:	add    BYTE PTR [rsi+0x0],ah
 100892e:	imul   eax,DWORD PTR [rax],0x65006c
 1008934:	jb     0x1008936
 1008936:	rex.XB add BYTE PTR [r15+0x0],bpl
 100893a:	ins    BYTE PTR es:[rdi],dx
 100893b:	add    BYTE PTR [rax+rax*1+0x65],ch
 100893f:	add    BYTE PTR [rbx+0x0],ah
 1008942:	je     0x1008944
 1008944:	outs   dx,DWORD PTR ds:[rsi]
 1008945:	add    BYTE PTR [rdx+0x0],dh
 1008948:	pop    rbx
 1008949:	add    BYTE PTR [rax+0x0],al
 100894c:	add    BYTE PTR gs:[rsi+0x0],ch
 1008950:	(bad)  
 1008951:	add    BYTE PTR [rdx+0x0],ah
 1008954:	ins    BYTE PTR es:[rdi],dx
 1008955:	add    BYTE PTR [rbp+0x0],ah
 1008958:	add    BYTE PTR fs:[rip+0x74002200],bh        # 0x7500ab5f
 100895f:	add    BYTE PTR [rdx+0x0],dh
 1008962:	jne    0x1008964
 1008964:	add    BYTE PTR gs:[rdx],ah
 1008967:	add    BYTE PTR [rbp+0x0],bl
 100896a:	(bad)  
 100896b:	add    BYTE PTR [rax+0x0],al
 100896e:	data16 add BYTE PTR [rcx+0x0],ch
 1008972:	ins    BYTE PTR es:[rdi],dx
 1008973:	add    BYTE PTR [rbp+0x0],ah
 1008976:	movsxd eax,DWORD PTR [rax]
 1008978:	outs   dx,DWORD PTR ds:[rsi]
 1008979:	add    BYTE PTR [rbp+0x0],dh
 100897c:	outs   dx,BYTE PTR ds:[rsi]
 100897d:	add    BYTE PTR [rax+rax*1+0x0],dh
	...
 100898d:	add    BYTE PTR [rax],al
 100898f:	add    BYTE PTR [rax+0x0],al
 1008992:	rex.WRB add BYTE PTR [r9+0x0],r12b
 1008996:	js     0x1008998
 1008998:	rex.RX add BYTE PTR [rcx+0x0],r13b
 100899c:	ins    BYTE PTR es:[rdi],dx
 100899d:	add    BYTE PTR [rbp+0x0],ah
 10089a0:	push   rbx
 10089a1:	add    BYTE PTR [rcx+0x0],ch
 10089a4:	jp     0x10089a6
 10089a6:	add    BYTE PTR gs:[rip+0x64002500],bh        # 0x6500aead
 10089ad:	add    BYTE PTR [rax+rax*1],ch
 10089b0:	and    BYTE PTR [rax],al
 10089b2:	add    BYTE PTR [rsi+0x0],al
 10089b6:	imul   eax,DWORD PTR [rax],0x65006c
 10089bc:	rex.XB add BYTE PTR [r15+0x0],bpl
 10089c0:	jne    0x10089c2
 10089c2:	outs   dx,BYTE PTR ds:[rsi]
 10089c3:	add    BYTE PTR [rax+rax*1+0x3d],dh
 10089c7:	add    BYTE PTR [rip+0x20006400],ah        # 0x2100edcd
 10089cd:	add    BYTE PTR [rax],al
 10089cf:	add    BYTE PTR [rdx],cl
 10089d1:	add    BYTE PTR [rdx+0x0],al
 10089d4:	add    BYTE PTR gs:[rsi+0x0],ah
 10089d8:	outs   dx,DWORD PTR ds:[rsi]
 10089d9:	add    BYTE PTR [rdx+0x0],dh
 10089dc:	add    BYTE PTR gs:[rdx],bh
 10089df:	add    BYTE PTR [rax],ah
	...
 10089ed:	add    BYTE PTR [rax],al
 10089ef:	add    BYTE PTR [rdi],ch
 10089f1:	add    BYTE PTR [rdi],ch
 10089f3:	add    BYTE PTR [rax+rax*1+0x73],ah
 10089f7:	add    BYTE PTR [rbx+0x0],al
 10089fa:	outs   dx,DWORD PTR ds:[rsi]
 10089fb:	add    BYTE PTR [rsi+0x0],ch
 10089fe:	data16 add BYTE PTR [rcx+0x0],ch
 1008a02:	add    BYTE PTR [edi],ch
 1008a05:	add    BYTE PTR [rbx+0x0],al
 1008a08:	outs   dx,DWORD PTR ds:[rsi]
 1008a09:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1008a0d:	add    BYTE PTR [rbp+0x0],ah
 1008a10:	movsxd eax,DWORD PTR [rax]
 1008a12:	je     0x1008a14
 1008a14:	imul   eax,DWORD PTR [rax],0x6e006f
 1008a1a:	(bad)  
 1008a1b:	add    BYTE PTR [rbp+0x0],cl
 1008a1e:	(bad)  
 1008a1f:	add    BYTE PTR [rbx+0x0],ah
 1008a22:	push   0x6e006900
 1008a27:	add    BYTE PTR [rbp+0x0],ah
 1008a2a:	jae    0x1008a2c
 1008a2c:	(bad)  
 1008a2d:	add    BYTE PTR [rbp+0x0],cl
 1008a30:	(bad)  
 1008a31:	add    BYTE PTR [rbx+0x0],ah
 1008a34:	push   0x6e006900
 1008a39:	add    BYTE PTR [rbp+0x0],ah
 1008a3c:	pop    rbx
 1008a3d:	add    BYTE PTR [rax+0x0],al
 1008a40:	outs   dx,BYTE PTR ds:[rsi]
 1008a41:	add    BYTE PTR [rcx+0x0],ah
 1008a44:	ins    DWORD PTR es:[rdi],dx
 1008a45:	add    BYTE PTR [rbp+0x0],ah
 1008a48:	cmp    eax,0x25002200
 1008a4d:	add    BYTE PTR [rbx+0x0],dh
 1008a50:	and    al,BYTE PTR [rax]
 1008a52:	pop    rbp
 1008a53:	add    BYTE PTR [rdi],ch
 1008a55:	add    BYTE PTR [rcx+0x0],cl
 1008a58:	outs   dx,BYTE PTR ds:[rsi]
 1008a59:	add    BYTE PTR [rbx+0x0],dh
 1008a5c:	je     0x1008a5e
 1008a5e:	(bad)  
 1008a5f:	add    BYTE PTR [rsi+0x0],ch
 1008a62:	movsxd eax,DWORD PTR [rax]
 1008a64:	add    BYTE PTR gs:[rbx+0x0],dh
 1008a68:	(bad)  
 1008a69:	add    BYTE PTR [rcx+0x0],cl
 1008a6c:	outs   dx,BYTE PTR ds:[rsi]
 1008a6d:	add    BYTE PTR [rbx+0x0],dh
 1008a70:	je     0x1008a72
 1008a72:	(bad)  
 1008a73:	add    BYTE PTR [rsi+0x0],ch
 1008a76:	movsxd eax,DWORD PTR [rax]
 1008a78:	add    BYTE PTR gs:[rbx+0x0],bl
 1008a7c:	add    BYTE PTR [rsi+0x0],bpl
 1008a80:	(bad)  
 1008a81:	add    BYTE PTR [rbp+0x0],ch
 1008a84:	add    BYTE PTR gs:[rip+0x25002200],bh        # 0x2600ac8b
 1008a8b:	add    BYTE PTR [rbx+0x0],dh
 1008a8e:	and    al,BYTE PTR [rax]
 1008a90:	pop    rbp
 1008a91:	add    BYTE PTR [rdi],ch
 1008a93:	add    BYTE PTR [rdi],ch
 1008a95:	add    BYTE PTR [rax+0x0],dl
 1008a98:	jb     0x1008a9a
 1008a9a:	outs   dx,DWORD PTR ds:[rsi]
 1008a9b:	add    BYTE PTR [rsi+0x0],ah
 1008a9e:	imul   eax,DWORD PTR [rax],0x65006c
 1008aa4:	jb     0x1008aa6
 1008aa6:	rex.XB add BYTE PTR [r15+0x0],bpl
 1008aaa:	ins    BYTE PTR es:[rdi],dx
 1008aab:	add    BYTE PTR [rax+rax*1+0x65],ch
 1008aaf:	add    BYTE PTR [rbx+0x0],ah
 1008ab2:	je     0x1008ab4
 1008ab4:	outs   dx,DWORD PTR ds:[rsi]
 1008ab5:	add    BYTE PTR [rdx+0x0],dh
 1008ab8:	pop    rbx
 1008ab9:	add    BYTE PTR [rax+0x0],al
 1008abc:	add    BYTE PTR gs:[rsi+0x0],ch
 1008ac0:	(bad)  
 1008ac1:	add    BYTE PTR [rdx+0x0],ah
 1008ac4:	ins    BYTE PTR es:[rdi],dx
 1008ac5:	add    BYTE PTR [rbp+0x0],ah
 1008ac8:	add    BYTE PTR fs:[rip+0x74002200],bh        # 0x7500accf
 1008acf:	add    BYTE PTR [rdx+0x0],dh
 1008ad2:	jne    0x1008ad4
 1008ad4:	add    BYTE PTR gs:[rdx],ah
 1008ad7:	add    BYTE PTR [rbp+0x0],bl
 1008ada:	(bad)  
 1008adb:	add    BYTE PTR [rax+0x0],dl
 1008ade:	(bad)  
 1008adf:	add    BYTE PTR [rdx+0x0],dh
 1008ae2:	(bad)  
 1008ae3:	add    BYTE PTR [rbp+0x0],ch
 1008ae6:	add    BYTE PTR gs:[rax+rax*1+0x65],dh
 1008aeb:	add    BYTE PTR [rdx+0x0],dh
 1008aee:	jae    0x1008af0
 1008af0:	(bad)  
 1008af1:	add    BYTE PTR [rax+0x0],dl
 1008af4:	(bad)  
 1008af5:	add    BYTE PTR [rdx+0x0],dh
 1008af8:	(bad)  
 1008af9:	add    BYTE PTR [rbp+0x0],ch
 1008afc:	add    BYTE PTR gs:[rax+rax*1+0x65],dh
 1008b01:	add    BYTE PTR [rdx+0x0],dh
 1008b04:	add    BYTE PTR [rax],al
 1008b06:	add    BYTE PTR [rax],al
 1008b08:	or     al,BYTE PTR [rax]
 1008b0a:	add    BYTE PTR [r14+0x0],spl
 1008b0e:	je     0x1008b10
 1008b10:	add    BYTE PTR gs:[rdx+0x0],dh
 1008b14:	cmp    al,BYTE PTR [rax]
 1008b16:	and    BYTE PTR [rax],al
	...
 1008b20:	(bad)  
 1008b21:	add    BYTE PTR [rdi],ch
 1008b23:	add    BYTE PTR [rax+rax*1+0x73],ah
 1008b27:	add    BYTE PTR [rbx+0x0],al
 1008b2a:	outs   dx,DWORD PTR ds:[rsi]
 1008b2b:	add    BYTE PTR [rsi+0x0],ch
 1008b2e:	data16 add BYTE PTR [rcx+0x0],ch
 1008b32:	add    BYTE PTR [edi],ch
 1008b35:	add    BYTE PTR [rbx+0x0],al
 1008b38:	outs   dx,DWORD PTR ds:[rsi]
 1008b39:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1008b3d:	add    BYTE PTR [rbp+0x0],ah
 1008b40:	movsxd eax,DWORD PTR [rax]
 1008b42:	je     0x1008b44
 1008b44:	imul   eax,DWORD PTR [rax],0x6e006f
 1008b4a:	(bad)  
 1008b4b:	add    BYTE PTR [rbp+0x0],cl
 1008b4e:	(bad)  
 1008b4f:	add    BYTE PTR [rbx+0x0],ah
 1008b52:	push   0x6e006900
 1008b57:	add    BYTE PTR [rbp+0x0],ah
 1008b5a:	jae    0x1008b5c
 1008b5c:	(bad)  
 1008b5d:	add    BYTE PTR [rbp+0x0],cl
 1008b60:	(bad)  
 1008b61:	add    BYTE PTR [rbx+0x0],ah
 1008b64:	push   0x6e006900
 1008b69:	add    BYTE PTR [rbp+0x0],ah
 1008b6c:	pop    rbx
 1008b6d:	add    BYTE PTR [rax+0x0],al
 1008b70:	outs   dx,BYTE PTR ds:[rsi]
 1008b71:	add    BYTE PTR [rcx+0x0],ah
 1008b74:	ins    DWORD PTR es:[rdi],dx
 1008b75:	add    BYTE PTR [rbp+0x0],ah
 1008b78:	cmp    eax,0x25002200
 1008b7d:	add    BYTE PTR [rbx+0x0],dh
 1008b80:	and    al,BYTE PTR [rax]
 1008b82:	pop    rbp
 1008b83:	add    BYTE PTR [rdi],ch
 1008b85:	add    BYTE PTR [rcx+0x0],cl
 1008b88:	outs   dx,BYTE PTR ds:[rsi]
 1008b89:	add    BYTE PTR [rbx+0x0],dh
 1008b8c:	je     0x1008b8e
 1008b8e:	(bad)  
 1008b8f:	add    BYTE PTR [rsi+0x0],ch
 1008b92:	movsxd eax,DWORD PTR [rax]
 1008b94:	add    BYTE PTR gs:[rbx+0x0],dh
 1008b98:	(bad)  
 1008b99:	add    BYTE PTR [rcx+0x0],cl
 1008b9c:	outs   dx,BYTE PTR ds:[rsi]
 1008b9d:	add    BYTE PTR [rbx+0x0],dh
 1008ba0:	je     0x1008ba2
 1008ba2:	(bad)  
 1008ba3:	add    BYTE PTR [rsi+0x0],ch
 1008ba6:	movsxd eax,DWORD PTR [rax]
 1008ba8:	add    BYTE PTR gs:[rbx+0x0],bl
 1008bac:	add    BYTE PTR [rsi+0x0],bpl
 1008bb0:	(bad)  
 1008bb1:	add    BYTE PTR [rbp+0x0],ch
 1008bb4:	add    BYTE PTR gs:[rip+0x25002200],bh        # 0x2600adbb
 1008bbb:	add    BYTE PTR [rbx+0x0],dh
 1008bbe:	and    al,BYTE PTR [rax]
 1008bc0:	pop    rbp
 1008bc1:	add    BYTE PTR [rdi],ch
 1008bc3:	add    BYTE PTR [rdi],ch
 1008bc5:	add    BYTE PTR [rdx+0x0],al
 1008bc8:	ins    BYTE PTR es:[rdi],dx
 1008bc9:	add    BYTE PTR [rdi+0x0],ch
 1008bcc:	movsxd eax,DWORD PTR [rax]
 1008bce:	imul   eax,DWORD PTR [rax],0x69
 1008bd1:	add    BYTE PTR [rsi+0x0],ch
 1008bd4:	add    BYTE PTR [ebx+0x0],al
 1008bd8:	outs   dx,DWORD PTR ds:[rsi]
 1008bd9:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1008bdd:	add    BYTE PTR [rbp+0x0],ah
 1008be0:	movsxd eax,DWORD PTR [rax]
 1008be2:	je     0x1008be4
 1008be4:	outs   dx,DWORD PTR ds:[rsi]
 1008be5:	add    BYTE PTR [rdx+0x0],dh
 1008be8:	(bad)  
 1008be9:	add    BYTE PTR [rax+0x0],al
 1008bec:	add    BYTE PTR gs:[rsi+0x0],ch
 1008bf0:	(bad)  
 1008bf1:	add    BYTE PTR [rdx+0x0],ah
 1008bf4:	ins    BYTE PTR es:[rdi],dx
 1008bf5:	add    BYTE PTR [rbp+0x0],ah
 1008bf8:	add    BYTE PTR fs:[rax],al
 1008bfb:	add    BYTE PTR [rax],al
 1008bfd:	add    BYTE PTR [rax],al
 1008bff:	add    BYTE PTR [rdi],ch
 1008c01:	add    BYTE PTR [rdi],ch
 1008c03:	add    BYTE PTR [rax+rax*1+0x73],ah
 1008c07:	add    BYTE PTR [rbx+0x0],al
 1008c0a:	outs   dx,DWORD PTR ds:[rsi]
 1008c0b:	add    BYTE PTR [rsi+0x0],ch
 1008c0e:	data16 add BYTE PTR [rcx+0x0],ch
 1008c12:	add    BYTE PTR [edi],ch
 1008c15:	add    BYTE PTR [rbx+0x0],al
 1008c18:	outs   dx,DWORD PTR ds:[rsi]
 1008c19:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1008c1d:	add    BYTE PTR [rbp+0x0],ah
 1008c20:	movsxd eax,DWORD PTR [rax]
 1008c22:	je     0x1008c24
 1008c24:	imul   eax,DWORD PTR [rax],0x6e006f
 1008c2a:	(bad)  
 1008c2b:	add    BYTE PTR [rbp+0x0],cl
 1008c2e:	(bad)  
 1008c2f:	add    BYTE PTR [rbx+0x0],ah
 1008c32:	push   0x6e006900
 1008c37:	add    BYTE PTR [rbp+0x0],ah
 1008c3a:	jae    0x1008c3c
 1008c3c:	(bad)  
 1008c3d:	add    BYTE PTR [rbp+0x0],cl
 1008c40:	(bad)  
 1008c41:	add    BYTE PTR [rbx+0x0],ah
 1008c44:	push   0x6e006900
 1008c49:	add    BYTE PTR [rbp+0x0],ah
 1008c4c:	pop    rbx
 1008c4d:	add    BYTE PTR [rax+0x0],al
 1008c50:	outs   dx,BYTE PTR ds:[rsi]
 1008c51:	add    BYTE PTR [rcx+0x0],ah
 1008c54:	ins    DWORD PTR es:[rdi],dx
 1008c55:	add    BYTE PTR [rbp+0x0],ah
 1008c58:	cmp    eax,0x25002200
 1008c5d:	add    BYTE PTR [rbx+0x0],dh
 1008c60:	and    al,BYTE PTR [rax]
 1008c62:	pop    rbp
 1008c63:	add    BYTE PTR [rdi],ch
 1008c65:	add    BYTE PTR [rcx+0x0],cl
 1008c68:	outs   dx,BYTE PTR ds:[rsi]
 1008c69:	add    BYTE PTR [rbx+0x0],dh
 1008c6c:	je     0x1008c6e
 1008c6e:	(bad)  
 1008c6f:	add    BYTE PTR [rsi+0x0],ch
 1008c72:	movsxd eax,DWORD PTR [rax]
 1008c74:	add    BYTE PTR gs:[rbx+0x0],dh
 1008c78:	(bad)  
 1008c79:	add    BYTE PTR [rcx+0x0],cl
 1008c7c:	outs   dx,BYTE PTR ds:[rsi]
 1008c7d:	add    BYTE PTR [rbx+0x0],dh
 1008c80:	je     0x1008c82
 1008c82:	(bad)  
 1008c83:	add    BYTE PTR [rsi+0x0],ch
 1008c86:	movsxd eax,DWORD PTR [rax]
 1008c88:	add    BYTE PTR gs:[rbx+0x0],bl
 1008c8c:	add    BYTE PTR [rsi+0x0],bpl
 1008c90:	(bad)  
 1008c91:	add    BYTE PTR [rbp+0x0],ch
 1008c94:	add    BYTE PTR gs:[rip+0x25002200],bh        # 0x2600ae9b
 1008c9b:	add    BYTE PTR [rbx+0x0],dh
 1008c9e:	and    al,BYTE PTR [rax]
 1008ca0:	pop    rbp
 1008ca1:	add    BYTE PTR [rdi],ch
 1008ca3:	add    BYTE PTR [rdi],ch
 1008ca5:	add    BYTE PTR [rdx+0x0],al
 1008ca8:	ins    BYTE PTR es:[rdi],dx
 1008ca9:	add    BYTE PTR [rdi+0x0],ch
 1008cac:	movsxd eax,DWORD PTR [rax]
 1008cae:	imul   eax,DWORD PTR [rax],0x69
 1008cb1:	add    BYTE PTR [rsi+0x0],ch
 1008cb4:	add    BYTE PTR [ebx+0x0],al
 1008cb8:	outs   dx,DWORD PTR ds:[rsi]
 1008cb9:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1008cbd:	add    BYTE PTR [rbp+0x0],ah
 1008cc0:	movsxd eax,DWORD PTR [rax]
 1008cc2:	je     0x1008cc4
 1008cc4:	outs   dx,DWORD PTR ds:[rsi]
 1008cc5:	add    BYTE PTR [rdx+0x0],dh
 1008cc8:	pop    rbx
 1008cc9:	add    BYTE PTR [rax+0x0],al
 1008ccc:	add    BYTE PTR gs:[rsi+0x0],ch
 1008cd0:	(bad)  
 1008cd1:	add    BYTE PTR [rdx+0x0],ah
 1008cd4:	ins    BYTE PTR es:[rdi],dx
 1008cd5:	add    BYTE PTR [rbp+0x0],ah
 1008cd8:	add    BYTE PTR fs:[rip+0x74002200],bh        # 0x7500aedf
 1008cdf:	add    BYTE PTR [rdx+0x0],dh
 1008ce2:	jne    0x1008ce4
 1008ce4:	add    BYTE PTR gs:[rdx],ah
 1008ce7:	add    BYTE PTR [rbp+0x0],bl
 1008cea:	(bad)  
 1008ceb:	add    BYTE PTR [rax+0x0],al
 1008cee:	jo     0x1008cf0
 1008cf0:	outs   dx,DWORD PTR ds:[rsi]
 1008cf1:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1008cf5:	add    BYTE PTR [rcx+0x0],ch
 1008cf8:	outs   dx,BYTE PTR ds:[rsi]
 1008cf9:	add    BYTE PTR [rdi+0x0],ah
 1008cfc:	imul   eax,DWORD PTR [rax],0x74006e
 1008d02:	add    BYTE PTR gs:[rdx+0x0],dh
 1008d06:	jbe    0x1008d08
 1008d08:	(bad)  
 1008d09:	add    BYTE PTR [rax+rax*1+0x0],ch
 1008d0d:	add    BYTE PTR [rax],al
 1008d0f:	add    BYTE PTR [rdi],ch
 1008d11:	add    BYTE PTR [rdi],ch
 1008d13:	add    BYTE PTR [rax+rax*1+0x73],ah
 1008d17:	add    BYTE PTR [rbx+0x0],al
 1008d1a:	outs   dx,DWORD PTR ds:[rsi]
 1008d1b:	add    BYTE PTR [rsi+0x0],ch
 1008d1e:	data16 add BYTE PTR [rcx+0x0],ch
 1008d22:	add    BYTE PTR [edi],ch
 1008d25:	add    BYTE PTR [rbx+0x0],al
 1008d28:	outs   dx,DWORD PTR ds:[rsi]
 1008d29:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1008d2d:	add    BYTE PTR [rbp+0x0],ah
 1008d30:	movsxd eax,DWORD PTR [rax]
 1008d32:	je     0x1008d34
 1008d34:	imul   eax,DWORD PTR [rax],0x6e006f
 1008d3a:	(bad)  
 1008d3b:	add    BYTE PTR [rbp+0x0],cl
 1008d3e:	(bad)  
 1008d3f:	add    BYTE PTR [rbx+0x0],ah
 1008d42:	push   0x6e006900
 1008d47:	add    BYTE PTR [rbp+0x0],ah
 1008d4a:	jae    0x1008d4c
 1008d4c:	(bad)  
 1008d4d:	add    BYTE PTR [rbp+0x0],cl
 1008d50:	(bad)  
 1008d51:	add    BYTE PTR [rbx+0x0],ah
 1008d54:	push   0x6e006900
 1008d59:	add    BYTE PTR [rbp+0x0],ah
 1008d5c:	pop    rbx
 1008d5d:	add    BYTE PTR [rax+0x0],al
 1008d60:	outs   dx,BYTE PTR ds:[rsi]
 1008d61:	add    BYTE PTR [rcx+0x0],ah
 1008d64:	ins    DWORD PTR es:[rdi],dx
 1008d65:	add    BYTE PTR [rbp+0x0],ah
 1008d68:	cmp    eax,0x25002200
 1008d6d:	add    BYTE PTR [rbx+0x0],dh
 1008d70:	and    al,BYTE PTR [rax]
 1008d72:	pop    rbp
 1008d73:	add    BYTE PTR [rdi],ch
 1008d75:	add    BYTE PTR [rcx+0x0],cl
 1008d78:	outs   dx,BYTE PTR ds:[rsi]
 1008d79:	add    BYTE PTR [rbx+0x0],dh
 1008d7c:	je     0x1008d7e
 1008d7e:	(bad)  
 1008d7f:	add    BYTE PTR [rsi+0x0],ch
 1008d82:	movsxd eax,DWORD PTR [rax]
 1008d84:	add    BYTE PTR gs:[rbx+0x0],dh
 1008d88:	(bad)  
 1008d89:	add    BYTE PTR [rcx+0x0],cl
 1008d8c:	outs   dx,BYTE PTR ds:[rsi]
 1008d8d:	add    BYTE PTR [rbx+0x0],dh
 1008d90:	je     0x1008d92
 1008d92:	(bad)  
 1008d93:	add    BYTE PTR [rsi+0x0],ch
 1008d96:	movsxd eax,DWORD PTR [rax]
 1008d98:	add    BYTE PTR gs:[rbx+0x0],bl
 1008d9c:	add    BYTE PTR [rsi+0x0],bpl
 1008da0:	(bad)  
 1008da1:	add    BYTE PTR [rbp+0x0],ch
 1008da4:	add    BYTE PTR gs:[rip+0x25002200],bh        # 0x2600afab
 1008dab:	add    BYTE PTR [rbx+0x0],dh
 1008dae:	and    al,BYTE PTR [rax]
 1008db0:	pop    rbp
 1008db1:	add    BYTE PTR [rdi],ch
 1008db3:	add    BYTE PTR [rdi],ch
 1008db5:	add    BYTE PTR [rdx+0x0],al
 1008db8:	ins    BYTE PTR es:[rdi],dx
 1008db9:	add    BYTE PTR [rdi+0x0],ch
 1008dbc:	movsxd eax,DWORD PTR [rax]
 1008dbe:	imul   eax,DWORD PTR [rax],0x69
 1008dc1:	add    BYTE PTR [rsi+0x0],ch
 1008dc4:	add    BYTE PTR [ebx+0x0],al
 1008dc8:	outs   dx,DWORD PTR ds:[rsi]
 1008dc9:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1008dcd:	add    BYTE PTR [rbp+0x0],ah
 1008dd0:	movsxd eax,DWORD PTR [rax]
 1008dd2:	je     0x1008dd4
 1008dd4:	outs   dx,DWORD PTR ds:[rsi]
 1008dd5:	add    BYTE PTR [rdx+0x0],dh
 1008dd8:	pop    rbx
 1008dd9:	add    BYTE PTR [rax+0x0],al
 1008ddc:	add    BYTE PTR gs:[rsi+0x0],ch
 1008de0:	(bad)  
 1008de1:	add    BYTE PTR [rdx+0x0],ah
 1008de4:	ins    BYTE PTR es:[rdi],dx
 1008de5:	add    BYTE PTR [rbp+0x0],ah
 1008de8:	add    BYTE PTR fs:[rip+0x74002200],bh        # 0x7500afef
 1008def:	add    BYTE PTR [rdx+0x0],dh
 1008df2:	jne    0x1008df4
 1008df4:	add    BYTE PTR gs:[rdx],ah
 1008df7:	add    BYTE PTR [rbp+0x0],bl
 1008dfa:	(bad)  
 1008dfb:	add    BYTE PTR [rax+0x0],al
 1008dfe:	ins    BYTE PTR es:[rdi],dx
 1008dff:	add    BYTE PTR [rcx+0x0],ah
 1008e02:	je     0x1008e04
 1008e04:	movsxd eax,DWORD PTR [rax]
 1008e06:	push   0x0
 1008e0b:	add    BYTE PTR [rax],al
 1008e0d:	add    BYTE PTR [rax],al
 1008e0f:	add    BYTE PTR [rdi],ch
 1008e11:	add    BYTE PTR [rdi],ch
 1008e13:	add    BYTE PTR [rax+rax*1+0x73],ah
 1008e17:	add    BYTE PTR [rbx+0x0],al
 1008e1a:	outs   dx,DWORD PTR ds:[rsi]
 1008e1b:	add    BYTE PTR [rsi+0x0],ch
 1008e1e:	data16 add BYTE PTR [rcx+0x0],ch
 1008e22:	add    BYTE PTR [edi],ch
 1008e25:	add    BYTE PTR [rbx+0x0],al
 1008e28:	outs   dx,DWORD PTR ds:[rsi]
 1008e29:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1008e2d:	add    BYTE PTR [rbp+0x0],ah
 1008e30:	movsxd eax,DWORD PTR [rax]
 1008e32:	je     0x1008e34
 1008e34:	imul   eax,DWORD PTR [rax],0x6e006f
 1008e3a:	(bad)  
 1008e3b:	add    BYTE PTR [rbp+0x0],cl
 1008e3e:	(bad)  
 1008e3f:	add    BYTE PTR [rbx+0x0],ah
 1008e42:	push   0x6e006900
 1008e47:	add    BYTE PTR [rbp+0x0],ah
 1008e4a:	jae    0x1008e4c
 1008e4c:	(bad)  
 1008e4d:	add    BYTE PTR [rbp+0x0],cl
 1008e50:	(bad)  
 1008e51:	add    BYTE PTR [rbx+0x0],ah
 1008e54:	push   0x6e006900
 1008e59:	add    BYTE PTR [rbp+0x0],ah
 1008e5c:	pop    rbx
 1008e5d:	add    BYTE PTR [rax+0x0],al
 1008e60:	outs   dx,BYTE PTR ds:[rsi]
 1008e61:	add    BYTE PTR [rcx+0x0],ah
 1008e64:	ins    DWORD PTR es:[rdi],dx
 1008e65:	add    BYTE PTR [rbp+0x0],ah
 1008e68:	cmp    eax,0x25002200
 1008e6d:	add    BYTE PTR [rbx+0x0],dh
 1008e70:	and    al,BYTE PTR [rax]
 1008e72:	pop    rbp
 1008e73:	add    BYTE PTR [rdi],ch
 1008e75:	add    BYTE PTR [rcx+0x0],cl
 1008e78:	outs   dx,BYTE PTR ds:[rsi]
 1008e79:	add    BYTE PTR [rbx+0x0],dh
 1008e7c:	je     0x1008e7e
 1008e7e:	(bad)  
 1008e7f:	add    BYTE PTR [rsi+0x0],ch
 1008e82:	movsxd eax,DWORD PTR [rax]
 1008e84:	add    BYTE PTR gs:[rbx+0x0],dh
 1008e88:	(bad)  
 1008e89:	add    BYTE PTR [rcx+0x0],cl
 1008e8c:	outs   dx,BYTE PTR ds:[rsi]
 1008e8d:	add    BYTE PTR [rbx+0x0],dh
 1008e90:	je     0x1008e92
 1008e92:	(bad)  
 1008e93:	add    BYTE PTR [rsi+0x0],ch
 1008e96:	movsxd eax,DWORD PTR [rax]
 1008e98:	add    BYTE PTR gs:[rbx+0x0],bl
 1008e9c:	add    BYTE PTR [rsi+0x0],bpl
 1008ea0:	(bad)  
 1008ea1:	add    BYTE PTR [rbp+0x0],ch
 1008ea4:	add    BYTE PTR gs:[rip+0x25002200],bh        # 0x2600b0ab
 1008eab:	add    BYTE PTR [rbx+0x0],dh
 1008eae:	and    al,BYTE PTR [rax]
 1008eb0:	pop    rbp
 1008eb1:	add    BYTE PTR [rdi],ch
 1008eb3:	add    BYTE PTR [rdi],ch
 1008eb5:	add    BYTE PTR [rdx+0x0],al
 1008eb8:	ins    BYTE PTR es:[rdi],dx
 1008eb9:	add    BYTE PTR [rdi+0x0],ch
 1008ebc:	movsxd eax,DWORD PTR [rax]
 1008ebe:	imul   eax,DWORD PTR [rax],0x69
 1008ec1:	add    BYTE PTR [rsi+0x0],ch
 1008ec4:	add    BYTE PTR [ebx+0x0],al
 1008ec8:	outs   dx,DWORD PTR ds:[rsi]
 1008ec9:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1008ecd:	add    BYTE PTR [rbp+0x0],ah
 1008ed0:	movsxd eax,DWORD PTR [rax]
 1008ed2:	je     0x1008ed4
 1008ed4:	outs   dx,DWORD PTR ds:[rsi]
 1008ed5:	add    BYTE PTR [rdx+0x0],dh
 1008ed8:	pop    rbx
 1008ed9:	add    BYTE PTR [rax+0x0],al
 1008edc:	add    BYTE PTR gs:[rsi+0x0],ch
 1008ee0:	(bad)  
 1008ee1:	add    BYTE PTR [rdx+0x0],ah
 1008ee4:	ins    BYTE PTR es:[rdi],dx
 1008ee5:	add    BYTE PTR [rbp+0x0],ah
 1008ee8:	add    BYTE PTR fs:[rip+0x74002200],bh        # 0x7500b0ef
 1008eef:	add    BYTE PTR [rdx+0x0],dh
 1008ef2:	jne    0x1008ef4
 1008ef4:	add    BYTE PTR gs:[rdx],ah
 1008ef7:	add    BYTE PTR [rbp+0x0],bl
 1008efa:	(bad)  
 1008efb:	add    BYTE PTR [rax+0x0],al
 1008efe:	data16 add BYTE PTR [rcx+0x0],ah
 1008f02:	jae    0x1008f04
 1008f04:	je     0x1008f06
	...
 1008f0e:	add    BYTE PTR [rax],al
 1008f10:	(bad)  
 1008f11:	add    BYTE PTR [rdi],ch
 1008f13:	add    BYTE PTR [rax+rax*1+0x73],ah
 1008f17:	add    BYTE PTR [rbx+0x0],al
 1008f1a:	outs   dx,DWORD PTR ds:[rsi]
 1008f1b:	add    BYTE PTR [rsi+0x0],ch
 1008f1e:	data16 add BYTE PTR [rcx+0x0],ch
 1008f22:	add    BYTE PTR [edi],ch
 1008f25:	add    BYTE PTR [rbx+0x0],al
 1008f28:	outs   dx,DWORD PTR ds:[rsi]
 1008f29:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1008f2d:	add    BYTE PTR [rbp+0x0],ah
 1008f30:	movsxd eax,DWORD PTR [rax]
 1008f32:	je     0x1008f34
 1008f34:	imul   eax,DWORD PTR [rax],0x6e006f
 1008f3a:	(bad)  
 1008f3b:	add    BYTE PTR [rbp+0x0],cl
 1008f3e:	(bad)  
 1008f3f:	add    BYTE PTR [rbx+0x0],ah
 1008f42:	push   0x6e006900
 1008f47:	add    BYTE PTR [rbp+0x0],ah
 1008f4a:	jae    0x1008f4c
 1008f4c:	(bad)  
 1008f4d:	add    BYTE PTR [rbp+0x0],cl
 1008f50:	(bad)  
 1008f51:	add    BYTE PTR [rbx+0x0],ah
 1008f54:	push   0x6e006900
 1008f59:	add    BYTE PTR [rbp+0x0],ah
 1008f5c:	pop    rbx
 1008f5d:	add    BYTE PTR [rax+0x0],al
 1008f60:	outs   dx,BYTE PTR ds:[rsi]
 1008f61:	add    BYTE PTR [rcx+0x0],ah
 1008f64:	ins    DWORD PTR es:[rdi],dx
 1008f65:	add    BYTE PTR [rbp+0x0],ah
 1008f68:	cmp    eax,0x25002200
 1008f6d:	add    BYTE PTR [rbx+0x0],dh
 1008f70:	and    al,BYTE PTR [rax]
 1008f72:	pop    rbp
 1008f73:	add    BYTE PTR [rdi],ch
 1008f75:	add    BYTE PTR [rcx+0x0],cl
 1008f78:	outs   dx,BYTE PTR ds:[rsi]
 1008f79:	add    BYTE PTR [rbx+0x0],dh
 1008f7c:	je     0x1008f7e
 1008f7e:	(bad)  
 1008f7f:	add    BYTE PTR [rsi+0x0],ch
 1008f82:	movsxd eax,DWORD PTR [rax]
 1008f84:	add    BYTE PTR gs:[rbx+0x0],dh
 1008f88:	(bad)  
 1008f89:	add    BYTE PTR [rcx+0x0],cl
 1008f8c:	outs   dx,BYTE PTR ds:[rsi]
 1008f8d:	add    BYTE PTR [rbx+0x0],dh
 1008f90:	je     0x1008f92
 1008f92:	(bad)  
 1008f93:	add    BYTE PTR [rsi+0x0],ch
 1008f96:	movsxd eax,DWORD PTR [rax]
 1008f98:	add    BYTE PTR gs:[rbx+0x0],bl
 1008f9c:	add    BYTE PTR [rsi+0x0],bpl
 1008fa0:	(bad)  
 1008fa1:	add    BYTE PTR [rbp+0x0],ch
 1008fa4:	add    BYTE PTR gs:[rip+0x25002200],bh        # 0x2600b1ab
 1008fab:	add    BYTE PTR [rbx+0x0],dh
 1008fae:	and    al,BYTE PTR [rax]
 1008fb0:	pop    rbp
 1008fb1:	add    BYTE PTR [rdi],ch
 1008fb3:	add    BYTE PTR [rdi],ch
 1008fb5:	add    BYTE PTR [rdx+0x0],al
 1008fb8:	ins    BYTE PTR es:[rdi],dx
 1008fb9:	add    BYTE PTR [rdi+0x0],ch
 1008fbc:	movsxd eax,DWORD PTR [rax]
 1008fbe:	imul   eax,DWORD PTR [rax],0x69
 1008fc1:	add    BYTE PTR [rsi+0x0],ch
 1008fc4:	add    BYTE PTR [ebx+0x0],al
 1008fc8:	outs   dx,DWORD PTR ds:[rsi]
 1008fc9:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1008fcd:	add    BYTE PTR [rbp+0x0],ah
 1008fd0:	movsxd eax,DWORD PTR [rax]
 1008fd2:	je     0x1008fd4
 1008fd4:	outs   dx,DWORD PTR ds:[rsi]
 1008fd5:	add    BYTE PTR [rdx+0x0],dh
 1008fd8:	pop    rbx
 1008fd9:	add    BYTE PTR [rax+0x0],al
 1008fdc:	add    BYTE PTR gs:[rsi+0x0],ch
 1008fe0:	(bad)  
 1008fe1:	add    BYTE PTR [rdx+0x0],ah
 1008fe4:	ins    BYTE PTR es:[rdi],dx
 1008fe5:	add    BYTE PTR [rbp+0x0],ah
 1008fe8:	add    BYTE PTR fs:[rip+0x74002200],bh        # 0x7500b1ef
 1008fef:	add    BYTE PTR [rdx+0x0],dh
 1008ff2:	jne    0x1008ff4
 1008ff4:	add    BYTE PTR gs:[rdx],ah
 1008ff7:	add    BYTE PTR [rbp+0x0],bl
 1008ffa:	(bad)  
 1008ffb:	add    BYTE PTR [rax+0x0],dl
 1008ffe:	(bad)  
 1008fff:	add    BYTE PTR [rdx+0x0],dh
 1009002:	(bad)  
 1009003:	add    BYTE PTR [rbp+0x0],ch
 1009006:	add    BYTE PTR gs:[rax+rax*1+0x65],dh
 100900b:	add    BYTE PTR [rdx+0x0],dh
 100900e:	jae    0x1009010
 1009010:	(bad)  
 1009011:	add    BYTE PTR [rax+0x0],dl
 1009014:	(bad)  
 1009015:	add    BYTE PTR [rdx+0x0],dh
 1009018:	(bad)  
 1009019:	add    BYTE PTR [rbp+0x0],ch
 100901c:	add    BYTE PTR gs:[rax+rax*1+0x65],dh
 1009021:	add    BYTE PTR [rdx+0x0],dh
	...
 1009030:	(bad)  
 1009031:	add    BYTE PTR [rdi],ch
 1009033:	add    BYTE PTR [rax+rax*1+0x73],ah
 1009037:	add    BYTE PTR [rbx+0x0],al
 100903a:	outs   dx,DWORD PTR ds:[rsi]
 100903b:	add    BYTE PTR [rsi+0x0],ch
 100903e:	data16 add BYTE PTR [rcx+0x0],ch
 1009042:	add    BYTE PTR [edi],ch
 1009045:	add    BYTE PTR [rbx+0x0],al
 1009048:	outs   dx,DWORD PTR ds:[rsi]
 1009049:	add    BYTE PTR [rax+rax*1+0x6c],ch
 100904d:	add    BYTE PTR [rbp+0x0],ah
 1009050:	movsxd eax,DWORD PTR [rax]
 1009052:	je     0x1009054
 1009054:	imul   eax,DWORD PTR [rax],0x6e006f
 100905a:	(bad)  
 100905b:	add    BYTE PTR [rbp+0x0],cl
 100905e:	(bad)  
 100905f:	add    BYTE PTR [rbx+0x0],ah
 1009062:	push   0x6e006900
 1009067:	add    BYTE PTR [rbp+0x0],ah
 100906a:	jae    0x100906c
 100906c:	(bad)  
 100906d:	add    BYTE PTR [rbp+0x0],cl
 1009070:	(bad)  
 1009071:	add    BYTE PTR [rbx+0x0],ah
 1009074:	push   0x6e006900
 1009079:	add    BYTE PTR [rbp+0x0],ah
 100907c:	pop    rbx
 100907d:	add    BYTE PTR [rax+0x0],al
 1009080:	outs   dx,BYTE PTR ds:[rsi]
 1009081:	add    BYTE PTR [rcx+0x0],ah
 1009084:	ins    DWORD PTR es:[rdi],dx
 1009085:	add    BYTE PTR [rbp+0x0],ah
 1009088:	cmp    eax,0x25002200
 100908d:	add    BYTE PTR [rbx+0x0],dh
 1009090:	and    al,BYTE PTR [rax]
 1009092:	pop    rbp
 1009093:	add    BYTE PTR [rdi],ch
 1009095:	add    BYTE PTR [rcx+0x0],cl
 1009098:	outs   dx,BYTE PTR ds:[rsi]
 1009099:	add    BYTE PTR [rbx+0x0],dh
 100909c:	je     0x100909e
 100909e:	(bad)  
 100909f:	add    BYTE PTR [rsi+0x0],ch
 10090a2:	movsxd eax,DWORD PTR [rax]
 10090a4:	add    BYTE PTR gs:[rbx+0x0],dh
 10090a8:	(bad)  
 10090a9:	add    BYTE PTR [rcx+0x0],cl
 10090ac:	outs   dx,BYTE PTR ds:[rsi]
 10090ad:	add    BYTE PTR [rbx+0x0],dh
 10090b0:	je     0x10090b2
 10090b2:	(bad)  
 10090b3:	add    BYTE PTR [rsi+0x0],ch
 10090b6:	movsxd eax,DWORD PTR [rax]
 10090b8:	add    BYTE PTR gs:[rbx+0x0],bl
 10090bc:	add    BYTE PTR [rsi+0x0],bpl
 10090c0:	(bad)  
 10090c1:	add    BYTE PTR [rbp+0x0],ch
 10090c4:	add    BYTE PTR gs:[rip+0x25002200],bh        # 0x2600b2cb
 10090cb:	add    BYTE PTR [rbx+0x0],dh
 10090ce:	and    al,BYTE PTR [rax]
 10090d0:	pop    rbp
 10090d1:	add    BYTE PTR [rdi],ch
 10090d3:	add    BYTE PTR [rdi],ch
 10090d5:	add    BYTE PTR [rdx+0x0],al
 10090d8:	ins    BYTE PTR es:[rdi],dx
 10090d9:	add    BYTE PTR [rdi+0x0],ch
 10090dc:	movsxd eax,DWORD PTR [rax]
 10090de:	imul   eax,DWORD PTR [rax],0x69
 10090e1:	add    BYTE PTR [rsi+0x0],ch
 10090e4:	add    BYTE PTR [ebx+0x0],al
 10090e8:	outs   dx,DWORD PTR ds:[rsi]
 10090e9:	add    BYTE PTR [rax+rax*1+0x6c],ch
 10090ed:	add    BYTE PTR [rbp+0x0],ah
 10090f0:	movsxd eax,DWORD PTR [rax]
 10090f2:	je     0x10090f4
 10090f4:	outs   dx,DWORD PTR ds:[rsi]
 10090f5:	add    BYTE PTR [rdx+0x0],dh
 10090f8:	pop    rbx
 10090f9:	add    BYTE PTR [rax+0x0],al
 10090fc:	add    BYTE PTR gs:[rsi+0x0],ch
 1009100:	(bad)  
 1009101:	add    BYTE PTR [rdx+0x0],ah
 1009104:	ins    BYTE PTR es:[rdi],dx
 1009105:	add    BYTE PTR [rbp+0x0],ah
 1009108:	add    BYTE PTR fs:[rip+0x74002200],bh        # 0x7500b30f
 100910f:	add    BYTE PTR [rdx+0x0],dh
 1009112:	jne    0x1009114
 1009114:	add    BYTE PTR gs:[rdx],ah
 1009117:	add    BYTE PTR [rbp+0x0],bl
 100911a:	(bad)  
 100911b:	add    BYTE PTR [rax+0x0],al
 100911e:	ins    DWORD PTR es:[rdi],dx
 100911f:	add    BYTE PTR [rcx+0x0],ah
 1009122:	js     0x1009124
 1009124:	data16 add BYTE PTR [rcx+0x0],ch
 1009128:	ins    BYTE PTR es:[rdi],dx
 1009129:	add    BYTE PTR [rbp+0x0],ah
 100912c:	jae    0x100912e
 100912e:	imul   eax,DWORD PTR [rax],0x65007a
	...
 1009140:	(bad)  
 1009141:	add    BYTE PTR [rdi],ch
 1009143:	add    BYTE PTR [rax+rax*1+0x73],ah
 1009147:	add    BYTE PTR [rbx+0x0],al
 100914a:	outs   dx,DWORD PTR ds:[rsi]
 100914b:	add    BYTE PTR [rsi+0x0],ch
 100914e:	data16 add BYTE PTR [rcx+0x0],ch
 1009152:	add    BYTE PTR [edi],ch
 1009155:	add    BYTE PTR [rbx+0x0],al
 1009158:	outs   dx,DWORD PTR ds:[rsi]
 1009159:	add    BYTE PTR [rax+rax*1+0x6c],ch
 100915d:	add    BYTE PTR [rbp+0x0],ah
 1009160:	movsxd eax,DWORD PTR [rax]
 1009162:	je     0x1009164
 1009164:	imul   eax,DWORD PTR [rax],0x6e006f
 100916a:	(bad)  
 100916b:	add    BYTE PTR [rbp+0x0],cl
 100916e:	(bad)  
 100916f:	add    BYTE PTR [rbx+0x0],ah
 1009172:	push   0x6e006900
 1009177:	add    BYTE PTR [rbp+0x0],ah
 100917a:	jae    0x100917c
 100917c:	(bad)  
 100917d:	add    BYTE PTR [rbp+0x0],cl
 1009180:	(bad)  
 1009181:	add    BYTE PTR [rbx+0x0],ah
 1009184:	push   0x6e006900
 1009189:	add    BYTE PTR [rbp+0x0],ah
 100918c:	pop    rbx
 100918d:	add    BYTE PTR [rax+0x0],al
 1009190:	outs   dx,BYTE PTR ds:[rsi]
 1009191:	add    BYTE PTR [rcx+0x0],ah
 1009194:	ins    DWORD PTR es:[rdi],dx
 1009195:	add    BYTE PTR [rbp+0x0],ah
 1009198:	cmp    eax,0x25002200
 100919d:	add    BYTE PTR [rbx+0x0],dh
 10091a0:	and    al,BYTE PTR [rax]
 10091a2:	pop    rbp
 10091a3:	add    BYTE PTR [rdi],ch
 10091a5:	add    BYTE PTR [rcx+0x0],cl
 10091a8:	outs   dx,BYTE PTR ds:[rsi]
 10091a9:	add    BYTE PTR [rbx+0x0],dh
 10091ac:	je     0x10091ae
 10091ae:	(bad)  
 10091af:	add    BYTE PTR [rsi+0x0],ch
 10091b2:	movsxd eax,DWORD PTR [rax]
 10091b4:	add    BYTE PTR gs:[rbx+0x0],dh
 10091b8:	(bad)  
 10091b9:	add    BYTE PTR [rcx+0x0],cl
 10091bc:	outs   dx,BYTE PTR ds:[rsi]
 10091bd:	add    BYTE PTR [rbx+0x0],dh
 10091c0:	je     0x10091c2
 10091c2:	(bad)  
 10091c3:	add    BYTE PTR [rsi+0x0],ch
 10091c6:	movsxd eax,DWORD PTR [rax]
 10091c8:	add    BYTE PTR gs:[rbx+0x0],bl
 10091cc:	add    BYTE PTR [rsi+0x0],bpl
 10091d0:	(bad)  
 10091d1:	add    BYTE PTR [rbp+0x0],ch
 10091d4:	add    BYTE PTR gs:[rip+0x25002200],bh        # 0x2600b3db
 10091db:	add    BYTE PTR [rbx+0x0],dh
 10091de:	and    al,BYTE PTR [rax]
 10091e0:	pop    rbp
 10091e1:	add    BYTE PTR [rdi],ch
 10091e3:	add    BYTE PTR [rdi],ch
 10091e5:	add    BYTE PTR [rdx+0x0],al
 10091e8:	ins    BYTE PTR es:[rdi],dx
 10091e9:	add    BYTE PTR [rdi+0x0],ch
 10091ec:	movsxd eax,DWORD PTR [rax]
 10091ee:	imul   eax,DWORD PTR [rax],0x69
 10091f1:	add    BYTE PTR [rsi+0x0],ch
 10091f4:	add    BYTE PTR [ebx+0x0],al
 10091f8:	outs   dx,DWORD PTR ds:[rsi]
 10091f9:	add    BYTE PTR [rax+rax*1+0x6c],ch
 10091fd:	add    BYTE PTR [rbp+0x0],ah
 1009200:	movsxd eax,DWORD PTR [rax]
 1009202:	je     0x1009204
 1009204:	outs   dx,DWORD PTR ds:[rsi]
 1009205:	add    BYTE PTR [rdx+0x0],dh
 1009208:	pop    rbx
 1009209:	add    BYTE PTR [rax+0x0],al
 100920c:	add    BYTE PTR gs:[rsi+0x0],ch
 1009210:	(bad)  
 1009211:	add    BYTE PTR [rdx+0x0],ah
 1009214:	ins    BYTE PTR es:[rdi],dx
 1009215:	add    BYTE PTR [rbp+0x0],ah
 1009218:	add    BYTE PTR fs:[rip+0x74002200],bh        # 0x7500b41f
 100921f:	add    BYTE PTR [rdx+0x0],dh
 1009222:	jne    0x1009224
 1009224:	add    BYTE PTR gs:[rdx],ah
 1009227:	add    BYTE PTR [rbp+0x0],bl
 100922a:	(bad)  
 100922b:	add    BYTE PTR [rax+0x0],al
 100922e:	data16 add BYTE PTR [rcx+0x0],ch
 1009232:	ins    BYTE PTR es:[rdi],dx
 1009233:	add    BYTE PTR [rbp+0x0],ah
 1009236:	movsxd eax,DWORD PTR [rax]
 1009238:	outs   dx,DWORD PTR ds:[rsi]
 1009239:	add    BYTE PTR [rbp+0x0],dh
 100923c:	outs   dx,BYTE PTR ds:[rsi]
 100923d:	add    BYTE PTR [rax+rax*1+0x0],dh
	...
 100924d:	add    BYTE PTR [rax],al
 100924f:	add    BYTE PTR [rdi],ch
 1009251:	add    BYTE PTR [rdi],ch
 1009253:	add    BYTE PTR [rax+rax*1+0x73],ah
 1009257:	add    BYTE PTR [rbx+0x0],al
 100925a:	outs   dx,DWORD PTR ds:[rsi]
 100925b:	add    BYTE PTR [rsi+0x0],ch
 100925e:	data16 add BYTE PTR [rcx+0x0],ch
 1009262:	add    BYTE PTR [edi],ch
 1009265:	add    BYTE PTR [rbx+0x0],al
 1009268:	outs   dx,DWORD PTR ds:[rsi]
 1009269:	add    BYTE PTR [rax+rax*1+0x6c],ch
 100926d:	add    BYTE PTR [rbp+0x0],ah
 1009270:	movsxd eax,DWORD PTR [rax]
 1009272:	je     0x1009274
 1009274:	imul   eax,DWORD PTR [rax],0x6e006f
 100927a:	(bad)  
 100927b:	add    BYTE PTR [rbp+0x0],cl
 100927e:	(bad)  
 100927f:	add    BYTE PTR [rbx+0x0],ah
 1009282:	push   0x6e006900
 1009287:	add    BYTE PTR [rbp+0x0],ah
 100928a:	jae    0x100928c
 100928c:	(bad)  
 100928d:	add    BYTE PTR [rbp+0x0],cl
 1009290:	(bad)  
 1009291:	add    BYTE PTR [rbx+0x0],ah
 1009294:	push   0x6e006900
 1009299:	add    BYTE PTR [rbp+0x0],ah
 100929c:	pop    rbx
 100929d:	add    BYTE PTR [rax+0x0],al
 10092a0:	outs   dx,BYTE PTR ds:[rsi]
 10092a1:	add    BYTE PTR [rcx+0x0],ah
 10092a4:	ins    DWORD PTR es:[rdi],dx
 10092a5:	add    BYTE PTR [rbp+0x0],ah
 10092a8:	cmp    eax,0x25002200
 10092ad:	add    BYTE PTR [rbx+0x0],dh
 10092b0:	and    al,BYTE PTR [rax]
 10092b2:	pop    rbp
 10092b3:	add    BYTE PTR [rdi],ch
 10092b5:	add    BYTE PTR [rcx+0x0],cl
 10092b8:	outs   dx,BYTE PTR ds:[rsi]
 10092b9:	add    BYTE PTR [rbx+0x0],dh
 10092bc:	je     0x10092be
 10092be:	(bad)  
 10092bf:	add    BYTE PTR [rsi+0x0],ch
 10092c2:	movsxd eax,DWORD PTR [rax]
 10092c4:	add    BYTE PTR gs:[rbx+0x0],dh
 10092c8:	(bad)  
 10092c9:	add    BYTE PTR [rcx+0x0],cl
 10092cc:	outs   dx,BYTE PTR ds:[rsi]
 10092cd:	add    BYTE PTR [rbx+0x0],dh
 10092d0:	je     0x10092d2
 10092d2:	(bad)  
 10092d3:	add    BYTE PTR [rsi+0x0],ch
 10092d6:	movsxd eax,DWORD PTR [rax]
 10092d8:	add    BYTE PTR gs:[rbx+0x0],bl
 10092dc:	add    BYTE PTR [rsi+0x0],bpl
 10092e0:	(bad)  
 10092e1:	add    BYTE PTR [rbp+0x0],ch
 10092e4:	add    BYTE PTR gs:[rip+0x25002200],bh        # 0x2600b4eb
 10092eb:	add    BYTE PTR [rbx+0x0],dh
 10092ee:	and    al,BYTE PTR [rax]
 10092f0:	pop    rbp
 10092f1:	add    BYTE PTR [rdi],ch
 10092f3:	add    BYTE PTR [rdi],ch
 10092f5:	add    BYTE PTR [rbx+0x0],al
 10092f8:	jne    0x10092fa
 10092fa:	jae    0x10092fc
 10092fc:	je     0x10092fe
 10092fe:	outs   dx,DWORD PTR ds:[rsi]
 10092ff:	add    BYTE PTR [rbp+0x0],ch
 1009302:	push   rsp
 1009303:	add    BYTE PTR [rcx+0x0],ah
 1009306:	jae    0x1009308
 1009308:	imul   eax,DWORD PTR [rax],0x5b
 100930b:	add    BYTE PTR [rax+0x0],al
 100930e:	add    BYTE PTR gs:[rsi+0x0],ch
 1009312:	(bad)  
 1009313:	add    BYTE PTR [rdx+0x0],ah
 1009316:	ins    BYTE PTR es:[rdi],dx
 1009317:	add    BYTE PTR [rbp+0x0],ah
 100931a:	add    BYTE PTR fs:[rip+0x74002200],bh        # 0x7500b521
 1009321:	add    BYTE PTR [rdx+0x0],dh
 1009324:	jne    0x1009326
 1009326:	add    BYTE PTR gs:[rdx],ah
 1009329:	add    BYTE PTR [rbp+0x0],bl
 100932c:	add    BYTE PTR [rax],al
 100932e:	add    BYTE PTR [rax],al
 1009330:	(bad)  
 1009331:	add    BYTE PTR [rdi],ch
 1009333:	add    BYTE PTR [rax+rax*1+0x73],ah
 1009337:	add    BYTE PTR [rbx+0x0],al
 100933a:	outs   dx,DWORD PTR ds:[rsi]
 100933b:	add    BYTE PTR [rsi+0x0],ch
 100933e:	data16 add BYTE PTR [rcx+0x0],ch
 1009342:	add    BYTE PTR [edi],ch
 1009345:	add    BYTE PTR [rbx+0x0],al
 1009348:	outs   dx,DWORD PTR ds:[rsi]
 1009349:	add    BYTE PTR [rax+rax*1+0x6c],ch
 100934d:	add    BYTE PTR [rbp+0x0],ah
 1009350:	movsxd eax,DWORD PTR [rax]
 1009352:	je     0x1009354
 1009354:	imul   eax,DWORD PTR [rax],0x6e006f
 100935a:	(bad)  
 100935b:	add    BYTE PTR [rbp+0x0],cl
 100935e:	(bad)  
 100935f:	add    BYTE PTR [rbx+0x0],ah
 1009362:	push   0x6e006900
 1009367:	add    BYTE PTR [rbp+0x0],ah
 100936a:	jae    0x100936c
 100936c:	(bad)  
 100936d:	add    BYTE PTR [rbp+0x0],cl
 1009370:	(bad)  
 1009371:	add    BYTE PTR [rbx+0x0],ah
 1009374:	push   0x6e006900
 1009379:	add    BYTE PTR [rbp+0x0],ah
 100937c:	pop    rbx
 100937d:	add    BYTE PTR [rax+0x0],al
 1009380:	outs   dx,BYTE PTR ds:[rsi]
 1009381:	add    BYTE PTR [rcx+0x0],ah
 1009384:	ins    DWORD PTR es:[rdi],dx
 1009385:	add    BYTE PTR [rbp+0x0],ah
 1009388:	cmp    eax,0x25002200
 100938d:	add    BYTE PTR [rbx+0x0],dh
 1009390:	and    al,BYTE PTR [rax]
 1009392:	pop    rbp
 1009393:	add    BYTE PTR [rdi],ch
 1009395:	add    BYTE PTR [rdi],ch
 1009397:	add    BYTE PTR [rbp+0x0],al
 100939a:	jbe    0x100939c
 100939c:	add    BYTE PTR gs:[rsi+0x0],ch
 10093a0:	je     0x10093a2
 10093a2:	ins    BYTE PTR es:[rdi],dx
 10093a3:	add    BYTE PTR [rdi+0x0],ch
 10093a6:	add    BYTE PTR [ebx+0x0],al
 10093aa:	outs   dx,DWORD PTR ds:[rsi]
 10093ab:	add    BYTE PTR [rax+rax*1+0x6c],ch
 10093af:	add    BYTE PTR [rbp+0x0],ah
 10093b2:	movsxd eax,DWORD PTR [rax]
 10093b4:	je     0x10093b6
 10093b6:	outs   dx,DWORD PTR ds:[rsi]
 10093b7:	add    BYTE PTR [rdx+0x0],dh
 10093ba:	(bad)  
 10093bb:	add    BYTE PTR [rax+0x0],al
 10093be:	add    BYTE PTR gs:[rsi+0x0],ch
 10093c2:	(bad)  
 10093c3:	add    BYTE PTR [rdx+0x0],ah
 10093c6:	ins    BYTE PTR es:[rdi],dx
 10093c7:	add    BYTE PTR [rbp+0x0],ah
 10093ca:	add    BYTE PTR fs:[rax],al
 10093cd:	add    BYTE PTR [rax],al
 10093cf:	add    BYTE PTR [rdi],ch
 10093d1:	add    BYTE PTR [rdi],ch
 10093d3:	add    BYTE PTR [rax+rax*1+0x73],ah
 10093d7:	add    BYTE PTR [rbx+0x0],al
 10093da:	outs   dx,DWORD PTR ds:[rsi]
 10093db:	add    BYTE PTR [rsi+0x0],ch
 10093de:	data16 add BYTE PTR [rcx+0x0],ch
 10093e2:	add    BYTE PTR [edi],ch
 10093e5:	add    BYTE PTR [rbx+0x0],al
 10093e8:	outs   dx,DWORD PTR ds:[rsi]
 10093e9:	add    BYTE PTR [rax+rax*1+0x6c],ch
 10093ed:	add    BYTE PTR [rbp+0x0],ah
 10093f0:	movsxd eax,DWORD PTR [rax]
 10093f2:	je     0x10093f4
 10093f4:	imul   eax,DWORD PTR [rax],0x6e006f
 10093fa:	(bad)  
 10093fb:	add    BYTE PTR [rbp+0x0],cl
 10093fe:	(bad)  
 10093ff:	add    BYTE PTR [rbx+0x0],ah
 1009402:	push   0x6e006900
 1009407:	add    BYTE PTR [rbp+0x0],ah
 100940a:	jae    0x100940c
 100940c:	(bad)  
 100940d:	add    BYTE PTR [rbp+0x0],cl
 1009410:	(bad)  
 1009411:	add    BYTE PTR [rbx+0x0],ah
 1009414:	push   0x6e006900
 1009419:	add    BYTE PTR [rbp+0x0],ah
 100941c:	pop    rbx
 100941d:	add    BYTE PTR [rax+0x0],al
 1009420:	outs   dx,BYTE PTR ds:[rsi]
 1009421:	add    BYTE PTR [rcx+0x0],ah
 1009424:	ins    DWORD PTR es:[rdi],dx
 1009425:	add    BYTE PTR [rbp+0x0],ah
 1009428:	cmp    eax,0x25002200
 100942d:	add    BYTE PTR [rbx+0x0],dh
 1009430:	and    al,BYTE PTR [rax]
 1009432:	pop    rbp
 1009433:	add    BYTE PTR [rdi],ch
 1009435:	add    BYTE PTR [rdi],ch
 1009437:	add    BYTE PTR [rbp+0x0],al
 100943a:	jbe    0x100943c
 100943c:	add    BYTE PTR gs:[rsi+0x0],ch
 1009440:	je     0x1009442
 1009442:	ins    BYTE PTR es:[rdi],dx
 1009443:	add    BYTE PTR [rdi+0x0],ch
 1009446:	add    BYTE PTR [ebx+0x0],al
 100944a:	outs   dx,DWORD PTR ds:[rsi]
 100944b:	add    BYTE PTR [rax+rax*1+0x6c],ch
 100944f:	add    BYTE PTR [rbp+0x0],ah
 1009452:	movsxd eax,DWORD PTR [rax]
 1009454:	je     0x1009456
 1009456:	outs   dx,DWORD PTR ds:[rsi]
 1009457:	add    BYTE PTR [rdx+0x0],dh
 100945a:	(bad)  
 100945b:	add    BYTE PTR [rax+0x0],al
 100945e:	jae    0x1009460
 1009460:	je     0x1009462
 1009462:	(bad)  
 1009463:	add    BYTE PTR [rdx+0x0],dh
 1009466:	je     0x1009468
 1009468:	jne    0x100946a
 100946a:	jo     0x100946c
 100946c:	add    BYTE PTR [rax],al
 100946e:	add    BYTE PTR [rax],al
 1009470:	(bad)  
 1009471:	add    BYTE PTR [rdi],ch
 1009473:	add    BYTE PTR [rax+rax*1+0x73],ah
 1009477:	add    BYTE PTR [rbx+0x0],al
 100947a:	outs   dx,DWORD PTR ds:[rsi]
 100947b:	add    BYTE PTR [rsi+0x0],ch
 100947e:	data16 add BYTE PTR [rcx+0x0],ch
 1009482:	add    BYTE PTR [edi],ch
 1009485:	add    BYTE PTR [rbx+0x0],al
 1009488:	outs   dx,DWORD PTR ds:[rsi]
 1009489:	add    BYTE PTR [rax+rax*1+0x6c],ch
 100948d:	add    BYTE PTR [rbp+0x0],ah
 1009490:	movsxd eax,DWORD PTR [rax]
 1009492:	je     0x1009494
 1009494:	imul   eax,DWORD PTR [rax],0x6e006f
 100949a:	(bad)  
 100949b:	add    BYTE PTR [rbp+0x0],cl
 100949e:	(bad)  
 100949f:	add    BYTE PTR [rbx+0x0],ah
 10094a2:	push   0x6e006900
 10094a7:	add    BYTE PTR [rbp+0x0],ah
 10094aa:	jae    0x10094ac
 10094ac:	(bad)  
 10094ad:	add    BYTE PTR [rbp+0x0],cl
 10094b0:	(bad)  
 10094b1:	add    BYTE PTR [rbx+0x0],ah
 10094b4:	push   0x6e006900
 10094b9:	add    BYTE PTR [rbp+0x0],ah
 10094bc:	pop    rbx
 10094bd:	add    BYTE PTR [rax+0x0],al
 10094c0:	outs   dx,BYTE PTR ds:[rsi]
 10094c1:	add    BYTE PTR [rcx+0x0],ah
 10094c4:	ins    DWORD PTR es:[rdi],dx
 10094c5:	add    BYTE PTR [rbp+0x0],ah
 10094c8:	cmp    eax,0x25002200
 10094cd:	add    BYTE PTR [rbx+0x0],dh
 10094d0:	and    al,BYTE PTR [rax]
 10094d2:	pop    rbp
 10094d3:	add    BYTE PTR [rdi],ch
 10094d5:	add    BYTE PTR [rdi],ch
 10094d7:	add    BYTE PTR [rbp+0x0],al
 10094da:	jbe    0x10094dc
 10094dc:	add    BYTE PTR gs:[rsi+0x0],ch
 10094e0:	je     0x10094e2
 10094e2:	ins    BYTE PTR es:[rdi],dx
 10094e3:	add    BYTE PTR [rdi+0x0],ch
 10094e6:	add    BYTE PTR [ebx+0x0],al
 10094ea:	outs   dx,DWORD PTR ds:[rsi]
 10094eb:	add    BYTE PTR [rax+rax*1+0x6c],ch
 10094ef:	add    BYTE PTR [rbp+0x0],ah
 10094f2:	movsxd eax,DWORD PTR [rax]
 10094f4:	je     0x10094f6
 10094f6:	outs   dx,DWORD PTR ds:[rsi]
 10094f7:	add    BYTE PTR [rdx+0x0],dh
 10094fa:	(bad)  
 10094fb:	add    BYTE PTR [rax+0x0],al
 10094fe:	jae    0x1009500
 1009500:	push   0x74007500
 1009505:	add    BYTE PTR [rax+rax*1+0x6f],ah
 1009509:	add    BYTE PTR [rdi+0x0],dh
 100950c:	outs   dx,BYTE PTR ds:[rsi]
 100950d:	add    BYTE PTR [rax],al
 100950f:	add    BYTE PTR [rdi],ch
 1009511:	add    BYTE PTR [rdi],ch
 1009513:	add    BYTE PTR [rax+rax*1+0x73],ah
 1009517:	add    BYTE PTR [rbx+0x0],al
 100951a:	outs   dx,DWORD PTR ds:[rsi]
 100951b:	add    BYTE PTR [rsi+0x0],ch
 100951e:	data16 add BYTE PTR [rcx+0x0],ch
 1009522:	add    BYTE PTR [edi],ch
 1009525:	add    BYTE PTR [rbx+0x0],al
 1009528:	outs   dx,DWORD PTR ds:[rsi]
 1009529:	add    BYTE PTR [rax+rax*1+0x6c],ch
 100952d:	add    BYTE PTR [rbp+0x0],ah
 1009530:	movsxd eax,DWORD PTR [rax]
 1009532:	je     0x1009534
 1009534:	imul   eax,DWORD PTR [rax],0x6e006f
 100953a:	(bad)  
 100953b:	add    BYTE PTR [rbp+0x0],cl
 100953e:	(bad)  
 100953f:	add    BYTE PTR [rbx+0x0],ah
 1009542:	push   0x6e006900
 1009547:	add    BYTE PTR [rbp+0x0],ah
 100954a:	jae    0x100954c
 100954c:	(bad)  
 100954d:	add    BYTE PTR [rbp+0x0],cl
 1009550:	(bad)  
 1009551:	add    BYTE PTR [rbx+0x0],ah
 1009554:	push   0x6e006900
 1009559:	add    BYTE PTR [rbp+0x0],ah
 100955c:	pop    rbx
 100955d:	add    BYTE PTR [rax+0x0],al
 1009560:	outs   dx,BYTE PTR ds:[rsi]
 1009561:	add    BYTE PTR [rcx+0x0],ah
 1009564:	ins    DWORD PTR es:[rdi],dx
 1009565:	add    BYTE PTR [rbp+0x0],ah
 1009568:	cmp    eax,0x25002200
 100956d:	add    BYTE PTR [rbx+0x0],dh
 1009570:	and    al,BYTE PTR [rax]
 1009572:	pop    rbp
 1009573:	add    BYTE PTR [rdi],ch
 1009575:	add    BYTE PTR [rdi],ch
 1009577:	add    BYTE PTR [rbp+0x0],al
 100957a:	jbe    0x100957c
 100957c:	add    BYTE PTR gs:[rsi+0x0],ch
 1009580:	je     0x1009582
 1009582:	ins    BYTE PTR es:[rdi],dx
 1009583:	add    BYTE PTR [rdi+0x0],ch
 1009586:	add    BYTE PTR [ebx+0x0],al
 100958a:	outs   dx,DWORD PTR ds:[rsi]
 100958b:	add    BYTE PTR [rax+rax*1+0x6c],ch
 100958f:	add    BYTE PTR [rbp+0x0],ah
 1009592:	movsxd eax,DWORD PTR [rax]
 1009594:	je     0x1009596
 1009596:	outs   dx,DWORD PTR ds:[rsi]
 1009597:	add    BYTE PTR [rdx+0x0],dh
 100959a:	pop    rbx
 100959b:	add    BYTE PTR [rax+0x0],al
 100959e:	add    BYTE PTR gs:[rsi+0x0],ch
 10095a2:	(bad)  
 10095a3:	add    BYTE PTR [rdx+0x0],ah
 10095a6:	ins    BYTE PTR es:[rdi],dx
 10095a7:	add    BYTE PTR [rbp+0x0],ah
 10095aa:	add    BYTE PTR fs:[rip+0x74002200],bh        # 0x7500b7b1
 10095b1:	add    BYTE PTR [rdx+0x0],dh
 10095b4:	jne    0x10095b6
 10095b6:	add    BYTE PTR gs:[rdx],ah
 10095b9:	add    BYTE PTR [rbp+0x0],bl
 10095bc:	(bad)  
 10095bd:	add    BYTE PTR [rbp+0x0],al
 10095c0:	jbe    0x10095c2
 10095c2:	add    BYTE PTR gs:[rsi+0x0],ch
 10095c6:	je     0x10095c8
 10095c8:	ins    BYTE PTR es:[rdi],dx
 10095c9:	add    BYTE PTR [rdi+0x0],ch
 10095cc:	add    BYTE PTR [ebx+0x0],dh
 10095d0:	(bad)  
 10095d1:	add    BYTE PTR [rdi],ch
 10095d3:	add    BYTE PTR [rbp+0x0],al
 10095d6:	jbe    0x10095d8
 10095d8:	add    BYTE PTR gs:[rsi+0x0],ch
 10095dc:	je     0x10095de
 10095de:	ins    BYTE PTR es:[rdi],dx
 10095df:	add    BYTE PTR [rdi+0x0],ch
 10095e2:	add    BYTE PTR [eax+eax*1+0x79],dl
 10095e7:	add    BYTE PTR [rax+0x0],dh
 10095ea:	add    BYTE PTR gs:[rbx+0x0],bl
 10095ee:	add    BYTE PTR [rbp+0x0],spl
 10095f2:	outs   dx,BYTE PTR ds:[rsi]
 10095f3:	add    BYTE PTR [rcx+0x0],ah
 10095f6:	(bad)  
 10095f7:	add    BYTE PTR [rax+rax*1+0x65],ch
 10095fb:	add    BYTE PTR [rax+rax*1+0x3d],ah
 10095ff:	add    BYTE PTR [rdx],ah
 1009601:	add    BYTE PTR [rax+rax*1+0x72],dh
 1009605:	add    BYTE PTR [rbp+0x0],dh
 1009608:	add    BYTE PTR gs:[rdx],ah
 100960b:	add    BYTE PTR [rbp+0x0],bl
 100960e:	add    BYTE PTR [rax],al
 1009610:	(bad)  
 1009611:	add    BYTE PTR [rdi],ch
 1009613:	add    BYTE PTR [rax+rax*1+0x73],ah
 1009617:	add    BYTE PTR [rbx+0x0],al
 100961a:	outs   dx,DWORD PTR ds:[rsi]
 100961b:	add    BYTE PTR [rsi+0x0],ch
 100961e:	data16 add BYTE PTR [rcx+0x0],ch
 1009622:	add    BYTE PTR [edi],ch
 1009625:	add    BYTE PTR [rbx+0x0],al
 1009628:	outs   dx,DWORD PTR ds:[rsi]
 1009629:	add    BYTE PTR [rax+rax*1+0x6c],ch
 100962d:	add    BYTE PTR [rbp+0x0],ah
 1009630:	movsxd eax,DWORD PTR [rax]
 1009632:	je     0x1009634
 1009634:	imul   eax,DWORD PTR [rax],0x6e006f
 100963a:	(bad)  
 100963b:	add    BYTE PTR [rbp+0x0],cl
 100963e:	(bad)  
 100963f:	add    BYTE PTR [rbx+0x0],ah
 1009642:	push   0x6e006900
 1009647:	add    BYTE PTR [rbp+0x0],ah
 100964a:	jae    0x100964c
 100964c:	(bad)  
 100964d:	add    BYTE PTR [rbp+0x0],cl
 1009650:	(bad)  
 1009651:	add    BYTE PTR [rbx+0x0],ah
 1009654:	push   0x6e006900
 1009659:	add    BYTE PTR [rbp+0x0],ah
 100965c:	pop    rbx
 100965d:	add    BYTE PTR [rax+0x0],al
 1009660:	outs   dx,BYTE PTR ds:[rsi]
 1009661:	add    BYTE PTR [rcx+0x0],ah
 1009664:	ins    DWORD PTR es:[rdi],dx
 1009665:	add    BYTE PTR [rbp+0x0],ah
 1009668:	cmp    eax,0x25002200
 100966d:	add    BYTE PTR [rbx+0x0],dh
 1009670:	and    al,BYTE PTR [rax]
 1009672:	pop    rbp
 1009673:	add    BYTE PTR [rdi],ch
 1009675:	add    BYTE PTR [rdi],ch
 1009677:	add    BYTE PTR [rbp+0x0],al
 100967a:	jbe    0x100967c
 100967c:	add    BYTE PTR gs:[rsi+0x0],ch
 1009680:	je     0x1009682
 1009682:	ins    BYTE PTR es:[rdi],dx
 1009683:	add    BYTE PTR [rdi+0x0],ch
 1009686:	add    BYTE PTR [ebx+0x0],al
 100968a:	outs   dx,DWORD PTR ds:[rsi]
 100968b:	add    BYTE PTR [rax+rax*1+0x6c],ch
 100968f:	add    BYTE PTR [rbp+0x0],ah
 1009692:	movsxd eax,DWORD PTR [rax]
 1009694:	je     0x1009696
 1009696:	outs   dx,DWORD PTR ds:[rsi]
 1009697:	add    BYTE PTR [rdx+0x0],dh
 100969a:	pop    rbx
 100969b:	add    BYTE PTR [rax+0x0],al
 100969e:	add    BYTE PTR gs:[rsi+0x0],ch
 10096a2:	(bad)  
 10096a3:	add    BYTE PTR [rdx+0x0],ah
 10096a6:	ins    BYTE PTR es:[rdi],dx
 10096a7:	add    BYTE PTR [rbp+0x0],ah
 10096aa:	add    BYTE PTR fs:[rip+0x74002200],bh        # 0x7500b8b1
 10096b1:	add    BYTE PTR [rdx+0x0],dh
 10096b4:	jne    0x10096b6
 10096b6:	add    BYTE PTR gs:[rdx],ah
 10096b9:	add    BYTE PTR [rbp+0x0],bl
 10096bc:	(bad)  
 10096bd:	add    BYTE PTR [rbp+0x0],al
 10096c0:	jbe    0x10096c2
 10096c2:	add    BYTE PTR gs:[rsi+0x0],ch
 10096c6:	je     0x10096c8
 10096c8:	ins    BYTE PTR es:[rdi],dx
 10096c9:	add    BYTE PTR [rdi+0x0],ch
 10096cc:	add    BYTE PTR [ebx+0x0],dh
 10096d0:	(bad)  
 10096d1:	add    BYTE PTR [rdi],ch
 10096d3:	add    BYTE PTR [rbp+0x0],al
 10096d6:	jbe    0x10096d8
 10096d8:	add    BYTE PTR gs:[rsi+0x0],ch
 10096dc:	je     0x10096de
 10096de:	ins    BYTE PTR es:[rdi],dx
 10096df:	add    BYTE PTR [rdi+0x0],ch
 10096e2:	add    BYTE PTR [eax+eax*1+0x79],dl
 10096e7:	add    BYTE PTR [rax+0x0],dh
 10096ea:	add    BYTE PTR gs:[rax],al
 10096ed:	add    BYTE PTR [rax],al
 10096ef:	add    BYTE PTR [rcx+0x0],al
 10096f2:	jo     0x10096f4
 10096f4:	jo     0x10096f6
 10096f6:	ins    BYTE PTR es:[rdi],dx
 10096f7:	add    BYTE PTR [rcx+0x0],ch
 10096fa:	movsxd eax,DWORD PTR [rax]
 10096fc:	(bad)  
 10096fd:	add    BYTE PTR [rax+rax*1+0x69],dh
 1009701:	add    BYTE PTR [rdi+0x0],ch
 1009704:	outs   dx,BYTE PTR ds:[rsi]
 1009705:	add    BYTE PTR [rax+rax*1],ch
 1009708:	push   rbx
 1009709:	add    BYTE PTR [rbp+0x0],ah
 100970c:	movsxd eax,DWORD PTR [rax]
 100970e:	jne    0x1009710
 1009710:	jb     0x1009712
 1009712:	imul   eax,DWORD PTR [rax],0x790074
 1009718:	sub    al,0x0
 100971a:	push   rbx
 100971b:	add    BYTE PTR [rcx+0x0],bh
 100971e:	jae    0x1009720
 1009720:	je     0x1009722
 1009722:	add    BYTE PTR gs:[rbp+0x0],ch
	...
 100972e:	add    BYTE PTR [rax],al
 1009730:	(bad)  
 1009731:	add    BYTE PTR [rdi],ch
 1009733:	add    BYTE PTR [rax+rax*1+0x73],ah
 1009737:	add    BYTE PTR [rbx+0x0],al
 100973a:	outs   dx,DWORD PTR ds:[rsi]
 100973b:	add    BYTE PTR [rsi+0x0],ch
 100973e:	data16 add BYTE PTR [rcx+0x0],ch
 1009742:	add    BYTE PTR [edi],ch
 1009745:	add    BYTE PTR [rbx+0x0],al
 1009748:	outs   dx,DWORD PTR ds:[rsi]
 1009749:	add    BYTE PTR [rax+rax*1+0x6c],ch
 100974d:	add    BYTE PTR [rbp+0x0],ah
 1009750:	movsxd eax,DWORD PTR [rax]
 1009752:	je     0x1009754
 1009754:	imul   eax,DWORD PTR [rax],0x6e006f
 100975a:	(bad)  
 100975b:	add    BYTE PTR [rbp+0x0],cl
 100975e:	(bad)  
 100975f:	add    BYTE PTR [rbx+0x0],ah
 1009762:	push   0x6e006900
 1009767:	add    BYTE PTR [rbp+0x0],ah
 100976a:	jae    0x100976c
 100976c:	(bad)  
 100976d:	add    BYTE PTR [rbp+0x0],cl
 1009770:	(bad)  
 1009771:	add    BYTE PTR [rbx+0x0],ah
 1009774:	push   0x6e006900
 1009779:	add    BYTE PTR [rbp+0x0],ah
 100977c:	pop    rbx
 100977d:	add    BYTE PTR [rax+0x0],al
 1009780:	outs   dx,BYTE PTR ds:[rsi]
 1009781:	add    BYTE PTR [rcx+0x0],ah
 1009784:	ins    DWORD PTR es:[rdi],dx
 1009785:	add    BYTE PTR [rbp+0x0],ah
 1009788:	cmp    eax,0x25002200
 100978d:	add    BYTE PTR [rbx+0x0],dh
 1009790:	and    al,BYTE PTR [rax]
 1009792:	pop    rbp
 1009793:	add    BYTE PTR [rdi],ch
 1009795:	add    BYTE PTR [rdi],ch
 1009797:	add    BYTE PTR [rax+0x0],dl
 100979a:	add    BYTE PTR gs:[rdx+0x0],dh
 100979e:	data16 add BYTE PTR [rbp+0x0],ch
 10097a2:	outs   dx,DWORD PTR ds:[rsi]
 10097a3:	add    BYTE PTR [rsi+0x0],ch
 10097a6:	rex.XB add BYTE PTR [r15+0x0],bpl
 10097aa:	ins    BYTE PTR es:[rdi],dx
 10097ab:	add    BYTE PTR [rax+rax*1+0x65],ch
 10097af:	add    BYTE PTR [rbx+0x0],ah
 10097b2:	je     0x10097b4
 10097b4:	outs   dx,DWORD PTR ds:[rsi]
 10097b5:	add    BYTE PTR [rdx+0x0],dh
 10097b8:	(bad)  
 10097b9:	add    BYTE PTR [rax+0x0],al
 10097bc:	add    BYTE PTR gs:[rsi+0x0],ch
 10097c0:	(bad)  
 10097c1:	add    BYTE PTR [rdx+0x0],ah
 10097c4:	ins    BYTE PTR es:[rdi],dx
 10097c5:	add    BYTE PTR [rbp+0x0],ah
 10097c8:	add    BYTE PTR fs:[rax],al
 10097cb:	add    BYTE PTR [rax],al
 10097cd:	add    BYTE PTR [rax],al
 10097cf:	add    BYTE PTR [rdi],ch
 10097d1:	add    BYTE PTR [rdi],ch
 10097d3:	add    BYTE PTR [rax+rax*1+0x73],ah
 10097d7:	add    BYTE PTR [rbx+0x0],al
 10097da:	outs   dx,DWORD PTR ds:[rsi]
 10097db:	add    BYTE PTR [rsi+0x0],ch
 10097de:	data16 add BYTE PTR [rcx+0x0],ch
 10097e2:	add    BYTE PTR [edi],ch
 10097e5:	add    BYTE PTR [rbx+0x0],al
 10097e8:	outs   dx,DWORD PTR ds:[rsi]
 10097e9:	add    BYTE PTR [rax+rax*1+0x6c],ch
 10097ed:	add    BYTE PTR [rbp+0x0],ah
 10097f0:	movsxd eax,DWORD PTR [rax]
 10097f2:	je     0x10097f4
 10097f4:	imul   eax,DWORD PTR [rax],0x6e006f
 10097fa:	(bad)  
 10097fb:	add    BYTE PTR [rbp+0x0],cl
 10097fe:	(bad)  
 10097ff:	add    BYTE PTR [rbx+0x0],ah
 1009802:	push   0x6e006900
 1009807:	add    BYTE PTR [rbp+0x0],ah
 100980a:	jae    0x100980c
 100980c:	(bad)  
 100980d:	add    BYTE PTR [rbp+0x0],cl
 1009810:	(bad)  
 1009811:	add    BYTE PTR [rbx+0x0],ah
 1009814:	push   0x6e006900
 1009819:	add    BYTE PTR [rbp+0x0],ah
 100981c:	pop    rbx
 100981d:	add    BYTE PTR [rax+0x0],al
 1009820:	outs   dx,BYTE PTR ds:[rsi]
 1009821:	add    BYTE PTR [rcx+0x0],ah
 1009824:	ins    DWORD PTR es:[rdi],dx
 1009825:	add    BYTE PTR [rbp+0x0],ah
 1009828:	cmp    eax,0x25002200
 100982d:	add    BYTE PTR [rbx+0x0],dh
 1009830:	and    al,BYTE PTR [rax]
 1009832:	pop    rbp
 1009833:	add    BYTE PTR [rdi],ch
 1009835:	add    BYTE PTR [rdi],ch
 1009837:	add    BYTE PTR [rax+0x0],dl
 100983a:	add    BYTE PTR gs:[rdx+0x0],dh
 100983e:	data16 add BYTE PTR [rbp+0x0],ch
 1009842:	outs   dx,DWORD PTR ds:[rsi]
 1009843:	add    BYTE PTR [rsi+0x0],ch
 1009846:	rex.XB add BYTE PTR [r15+0x0],bpl
 100984a:	ins    BYTE PTR es:[rdi],dx
 100984b:	add    BYTE PTR [rax+rax*1+0x65],ch
 100984f:	add    BYTE PTR [rbx+0x0],ah
 1009852:	je     0x1009854
 1009854:	outs   dx,DWORD PTR ds:[rsi]
 1009855:	add    BYTE PTR [rdx+0x0],dh
 1009858:	(bad)  
 1009859:	add    BYTE PTR [rax+0x0],al
 100985c:	jo     0x100985e
 100985e:	outs   dx,DWORD PTR ds:[rsi]
 100985f:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1009863:	add    BYTE PTR [rcx+0x0],ch
 1009866:	outs   dx,BYTE PTR ds:[rsi]
 1009867:	add    BYTE PTR [rdi+0x0],ah
 100986a:	imul   eax,DWORD PTR [rax],0x74006e
 1009870:	add    BYTE PTR gs:[rdx+0x0],dh
 1009874:	jbe    0x1009876
 1009876:	(bad)  
 1009877:	add    BYTE PTR [rax+rax*1+0x0],ch
 100987b:	add    BYTE PTR [rax],al
 100987d:	add    BYTE PTR [rax],al
 100987f:	add    BYTE PTR [rdi],ch
 1009881:	add    BYTE PTR [rdi],ch
 1009883:	add    BYTE PTR [rax+rax*1+0x73],ah
 1009887:	add    BYTE PTR [rbx+0x0],al
 100988a:	outs   dx,DWORD PTR ds:[rsi]
 100988b:	add    BYTE PTR [rsi+0x0],ch
 100988e:	data16 add BYTE PTR [rcx+0x0],ch
 1009892:	add    BYTE PTR [edi],ch
 1009895:	add    BYTE PTR [rbx+0x0],al
 1009898:	outs   dx,DWORD PTR ds:[rsi]
 1009899:	add    BYTE PTR [rax+rax*1+0x6c],ch
 100989d:	add    BYTE PTR [rbp+0x0],ah
 10098a0:	movsxd eax,DWORD PTR [rax]
 10098a2:	je     0x10098a4
 10098a4:	imul   eax,DWORD PTR [rax],0x6e006f
 10098aa:	(bad)  
 10098ab:	add    BYTE PTR [rbp+0x0],cl
 10098ae:	(bad)  
 10098af:	add    BYTE PTR [rbx+0x0],ah
 10098b2:	push   0x6e006900
 10098b7:	add    BYTE PTR [rbp+0x0],ah
 10098ba:	jae    0x10098bc
 10098bc:	(bad)  
 10098bd:	add    BYTE PTR [rbp+0x0],cl
 10098c0:	(bad)  
 10098c1:	add    BYTE PTR [rbx+0x0],ah
 10098c4:	push   0x6e006900
 10098c9:	add    BYTE PTR [rbp+0x0],ah
 10098cc:	pop    rbx
 10098cd:	add    BYTE PTR [rax+0x0],al
 10098d0:	outs   dx,BYTE PTR ds:[rsi]
 10098d1:	add    BYTE PTR [rcx+0x0],ah
 10098d4:	ins    DWORD PTR es:[rdi],dx
 10098d5:	add    BYTE PTR [rbp+0x0],ah
 10098d8:	cmp    eax,0x25002200
 10098dd:	add    BYTE PTR [rbx+0x0],dh
 10098e0:	and    al,BYTE PTR [rax]
 10098e2:	pop    rbp
 10098e3:	add    BYTE PTR [rdi],ch
 10098e5:	add    BYTE PTR [rdi],ch
 10098e7:	add    BYTE PTR [rax+0x0],dl
 10098ea:	add    BYTE PTR gs:[rdx+0x0],dh
 10098ee:	data16 add BYTE PTR [rbp+0x0],ch
 10098f2:	outs   dx,DWORD PTR ds:[rsi]
 10098f3:	add    BYTE PTR [rsi+0x0],ch
 10098f6:	rex.XB add BYTE PTR [r15+0x0],bpl
 10098fa:	ins    BYTE PTR es:[rdi],dx
 10098fb:	add    BYTE PTR [rax+rax*1+0x65],ch
 10098ff:	add    BYTE PTR [rbx+0x0],ah
 1009902:	je     0x1009904
 1009904:	outs   dx,DWORD PTR ds:[rsi]
 1009905:	add    BYTE PTR [rdx+0x0],dh
 1009908:	(bad)  
 1009909:	add    BYTE PTR [rax+0x0],al
 100990c:	ins    DWORD PTR es:[rdi],dx
 100990d:	add    BYTE PTR [rcx+0x0],ah
 1009910:	js     0x1009912
 1009912:	data16 add BYTE PTR [rcx+0x0],ch
 1009916:	ins    BYTE PTR es:[rdi],dx
 1009917:	add    BYTE PTR [rbp+0x0],ah
 100991a:	jae    0x100991c
 100991c:	imul   eax,DWORD PTR [rax],0x65007a
 1009922:	add    BYTE PTR [rax],al
 1009924:	add    BYTE PTR [rax],al
 1009926:	add    BYTE PTR [rax],al
 1009928:	and    al,BYTE PTR [rip+0x21993]        # 0x102b2c1
 100992e:	add    BYTE PTR [rax],al
 1009930:	sbb    ch,dh
 1009932:	add    eax,0x0
 1009937:	add    BYTE PTR [rax],al
 1009939:	add    BYTE PTR [rax],al
 100993b:	add    BYTE PTR [rax+rax*1],al
 100993e:	add    BYTE PTR [rax],al
 1009940:	sub    ch,dh
 1009942:	add    eax,0x2000
	...
 100994f:	add    BYTE PTR [rdx],ah
 1009951:	add    eax,0x111993
 1009956:	add    BYTE PTR [rax],al
 1009958:	or     dh,dh
 100995a:	add    eax,0x0
 100995f:	add    BYTE PTR [rax],al
 1009961:	add    BYTE PTR [rax],al
 1009963:	add    BYTE PTR [rax],ah
 1009965:	add    BYTE PTR [rax],al
 1009967:	add    BYTE PTR [rax+0x480005f6],dl
	...
 1009975:	add    BYTE PTR [rax],al
 1009977:	add    BYTE PTR [rdx],ah
 1009979:	add    eax,0x81993
 100997e:	add    BYTE PTR [rax],al
 1009980:	lods   al,BYTE PTR ds:[rsi]
 1009981:	test   DWORD PTR [rip+0x0],0x0        # 0x100998b
 100998b:	add    BYTE PTR [rdx],cl
 100998d:	add    BYTE PTR [rax],al
 100998f:	add    ah,ch
 1009991:	test   DWORD PTR [rip+0x2000],0x0        # 0x100b99b
 100999b:	add    BYTE PTR [rax],al
 100999d:	add    BYTE PTR [rax],al
 100999f:	add    BYTE PTR [rdx],ah
 10099a1:	add    eax,0x11993
 10099a6:	add    BYTE PTR [rax],al
 10099a8:	push   rax
 10099a9:	clc    
 10099aa:	add    eax,0x0
 10099af:	add    BYTE PTR [rax],al
 10099b1:	add    BYTE PTR [rax],al
 10099b3:	add    BYTE PTR [rdx],al
 10099b5:	add    BYTE PTR [rax],al
 10099b7:	add    BYTE PTR [rax-0x8],bl
 10099ba:	add    eax,0x2800
	...
 10099c7:	add    BYTE PTR [rdx],ah
 10099c9:	add    eax,0x21993
 10099ce:	add    BYTE PTR [rax],al
 10099d0:	test   al,bh
 10099d2:	add    eax,0x0
 10099d7:	add    BYTE PTR [rax],al
 10099d9:	add    BYTE PTR [rax],al
 10099db:	add    BYTE PTR [rip+0xffffffff94000000],al        # 0xffffffff950099e1
 10099e1:	clc    
 10099e2:	add    eax,0x2000
	...
 10099ef:	add    BYTE PTR [rdx],ah
 10099f1:	add    eax,0x21993
 10099f6:	add    BYTE PTR [rax],al
 10099f8:	int3   
 10099f9:	clc    
 10099fa:	add    eax,0x0
 10099ff:	add    BYTE PTR [rax],al
 1009a01:	add    BYTE PTR [rax],al
 1009a03:	add    BYTE PTR [rip+0xffffffffdc000000],al        # 0xffffffffdd009a09
 1009a09:	clc    
 1009a0a:	add    eax,0x2000
	...
 1009a17:	add    BYTE PTR [rdx],ah
 1009a19:	add    eax,0xb1993
 1009a1e:	add    BYTE PTR [rax],al
 1009a20:	and    al,0xf9
 1009a22:	add    eax,0x100
 1009a27:	add    BYTE PTR [rcx+rdi*8+0x5],bh
 1009a2b:	add    BYTE PTR [rdi],dl
 1009a2d:	add    BYTE PTR [rax],al
 1009a2f:	add    BYTE PTR [rcx+rdi*8+0xa00005],ah
	...
 1009a3e:	add    BYTE PTR [rax],al
 1009a40:	and    al,BYTE PTR [rip+0x61993]        # 0x106b3d9
 1009a46:	add    BYTE PTR [rax],al
 1009a48:	xchg   esp,eax
 1009a49:	cli    
 1009a4a:	add    eax,0x100
 1009a4f:	add    ah,al
 1009a51:	cli    
 1009a52:	add    eax,0xe00
 1009a57:	add    ah,ch
 1009a59:	cli    
 1009a5a:	add    eax,0x9000
	...
 1009a67:	add    BYTE PTR [rdx],ah
 1009a69:	add    eax,0x41993
 1009a6e:	add    BYTE PTR [rax],al
 1009a70:	nop
 1009a71:	sti    
 1009a72:	add    eax,0x0
 1009a77:	add    BYTE PTR [rax],al
 1009a79:	add    BYTE PTR [rax],al
 1009a7b:	add    BYTE PTR [rcx],cl
 1009a7d:	add    BYTE PTR [rax],al
 1009a7f:	add    BYTE PTR [rax+0x400005fb],dh
	...
 1009a8d:	add    BYTE PTR [rax],al
 1009a8f:	add    BYTE PTR [rdx],ah
 1009a91:	add    eax,0x81993
 1009a96:	add    BYTE PTR [rax],al
 1009a98:	sbb    al,0xfc
 1009a9a:	add    eax,0x0
 1009a9f:	add    BYTE PTR [rax],al
 1009aa1:	add    BYTE PTR [rax],al
 1009aa3:	add    BYTE PTR [rax+rax*1],dl
 1009aa6:	add    BYTE PTR [rax],al
 1009aa8:	pop    rsp
 1009aa9:	cld    
 1009aaa:	add    eax,0x8000
	...
 1009ab7:	add    BYTE PTR [rdx],ah
 1009ab9:	add    eax,0x71993
 1009abe:	add    BYTE PTR [rax],al
 1009ac0:	and    ch,bh
 1009ac2:	add    eax,0x200
 1009ac7:	add    BYTE PTR [rax-0x3],bl
 1009aca:	add    eax,0xc00
 1009acf:	add    BYTE PTR [rax-0x47fffa03],ch
	...
 1009add:	add    BYTE PTR [rax],al
 1009adf:	add    al,cl
 1009ae1:	lods   eax,DWORD PTR ds:[rsi]
 1009ae2:	add    BYTE PTR [rcx],al
 1009ae4:	add    BYTE PTR [rax],al
 1009ae6:	add    BYTE PTR [rax],al
 1009ae8:	jle    0x1009ae3
 1009aea:	add    eax,DWORD PTR [rcx]
 1009aec:	add    BYTE PTR [rax],al
 1009aee:	add    BYTE PTR [rax],al
 1009af0:	push   rax
 1009af1:	fiadd  DWORD PTR [rbx]
 1009af3:	add    DWORD PTR [rax],eax
 1009af5:	add    BYTE PTR [rax],al
 1009af7:	add    al,dh
 1009af9:	xlat   BYTE PTR ds:[rbx]
 1009afa:	add    eax,DWORD PTR [rcx]
 1009afc:	add    BYTE PTR [rax],al
 1009afe:	add    BYTE PTR [rax],al
 1009b00:	lock scas al,BYTE PTR es:[rdi]
 1009b02:	add    BYTE PTR [rcx],al
 1009b04:	add    BYTE PTR [rax],al
 1009b06:	add    BYTE PTR [rax],al
 1009b08:	add    BYTE PTR [rdi+0x100],ch
 1009b0e:	add    BYTE PTR [rax],al
 1009b10:	rex.WRB add BYTE PTR [r11+0x0],r10b
 1009b14:	pop    rdi
 1009b15:	add    BYTE PTR [rbx+0x0],dl
 1009b18:	push   rcx
 1009b19:	add    BYTE PTR [rax+rax*1+0x44],cl
 1009b1d:	add    BYTE PTR [rcx+0x0],cl
 1009b20:	add    BYTE PTR [r15+0x0],al
 1009b24:	pop    rdi
 1009b25:	add    BYTE PTR [rip+0x5f007300],ah        # 0x60010e2b
 1009b2b:	add    BYTE PTR [rax+rax*1+0x6f],cl
 1009b2f:	add    BYTE PTR [rdi+0x0],ah
	...
 1009b3e:	add    BYTE PTR [rax],al
 1009b40:	imul   eax,DWORD PTR [rax],0x200066
 1009b46:	outs   dx,DWORD PTR ds:[rsi]
 1009b47:	add    BYTE PTR [rdx+0x0],ah
 1009b4a:	push   0x0
 1009b4c:	add    BYTE PTR gs:[rbx+0x0],ah
 1009b50:	je     0x1009b52
 1009b52:	pop    rdi
 1009b53:	add    BYTE PTR [rcx+0x0],ch
 1009b56:	add    BYTE PTR fs:[rax],ch
 1009b59:	add    BYTE PTR [rdi],ah
 1009b5b:	add    BYTE PTR [rip+0x2e007300],ah        # 0x2f010e61
 1009b61:	add    BYTE PTR [rsi],ch
 1009b63:	add    BYTE PTR [rip+0x27007300],ah        # 0x28010e69
 1009b69:	add    BYTE PTR [rcx],ch
 1009b6b:	add    BYTE PTR [rax],ah
 1009b6d:	add    BYTE PTR [rcx+0x0],cl
 1009b70:	push   rbx
 1009b71:	add    BYTE PTR [rax],ah
 1009b73:	add    BYTE PTR [rsi+0x0],cl
 1009b76:	rex.WRXB add BYTE PTR [r8+r8*1+0x20],r10b
 1009b7b:	add    BYTE PTR [rsi+0x0],cl
 1009b7e:	push   rbp
 1009b7f:	add    BYTE PTR [rax+rax*1+0x4c],cl
 1009b83:	add    BYTE PTR [rax],ah
 1009b85:	add    BYTE PTR [rax+rax*1+0x72],ah
 1009b89:	add    BYTE PTR [rdi+0x0],ch
 1009b8c:	jo     0x1009b8e
 1009b8e:	and    BYTE PTR [rax],al
 1009b90:	je     0x1009b92
 1009b92:	(bad)  
 1009b93:	add    BYTE PTR [rdx+0x0],ah
 1009b96:	ins    BYTE PTR es:[rdi],dx
 1009b97:	add    BYTE PTR [rbp+0x0],ah
 1009b9a:	and    BYTE PTR [rax],al
 1009b9c:	pop    rbx
 1009b9d:	add    BYTE PTR [rip+0x5d007300],ah        # 0x5e010ea3
 1009ba3:	add    BYTE PTR [rsi],ch
 1009ba5:	add    BYTE PTR [rsi],ch
 1009ba7:	add    BYTE PTR [rbx+0x0],bl
 1009baa:	and    eax,0x5d007300
	...
 1009bbf:	add    BYTE PTR [rbp+0x0],ah
 1009bc2:	js     0x1009bc4
 1009bc4:	add    BYTE PTR gs:[rbx+0x0],ah
 1009bc8:	and    BYTE PTR [rax],al
 1009bca:	pop    rbx
 1009bcb:	add    BYTE PTR [rip+0x5d007300],ah        # 0x5e010ed1
 1009bd1:	add    BYTE PTR [rsi],ch
 1009bd3:	add    BYTE PTR [rsi],ch
 1009bd5:	add    BYTE PTR [rbx+0x0],dh
 1009bd8:	jo     0x1009bda
 1009bda:	pop    rdi
 1009bdb:	add    BYTE PTR [rbp+0x0],ah
 1009bde:	js     0x1009be0
 1009be0:	add    BYTE PTR gs:[rbx+0x0],ah
 1009be4:	jne    0x1009be6
 1009be6:	je     0x1009be8
 1009be8:	add    BYTE PTR gs:[rbx+0x0],dh
 1009bec:	jno    0x1009bee
 1009bee:	ins    BYTE PTR es:[rdi],dx
 1009bef:	add    BYTE PTR [rax],ah
 1009bf1:	add    BYTE PTR [rsi+0x0],cl
 1009bf4:	(bad)  
 1009bf5:	add    BYTE PTR [rcx+0x0],ch
 1009bf8:	data16 add BYTE PTR [rax],ah
 1009bfb:	add    BYTE PTR [rdi+0x0],ch
 1009bfe:	(bad)  
 1009bff:	add    BYTE PTR [rdx+0x0],ch
 1009c02:	add    BYTE PTR gs:[rbx+0x0],ah
 1009c06:	je     0x1009c08
 1009c08:	pop    rdi
 1009c09:	add    BYTE PTR [rcx+0x0],ch
 1009c0c:	add    BYTE PTR fs:[rax],ch
 1009c0f:	add    BYTE PTR [rdi],ah
 1009c11:	add    BYTE PTR [rdi],ah
 1009c13:	add    BYTE PTR [rip+0x27007300],ah        # 0x28010f19
 1009c19:	add    BYTE PTR [rdi],ah
 1009c1b:	add    BYTE PTR [rcx],ch
 1009c1d:	add    BYTE PTR [rax],ah
 1009c1f:	add    BYTE PTR [rcx+0x0],cl
 1009c22:	push   rbx
 1009c23:	add    BYTE PTR [rax],ah
 1009c25:	add    BYTE PTR [rsi+0x0],cl
 1009c28:	push   rbp
 1009c29:	add    BYTE PTR [rax+rax*1+0x4c],cl
 1009c2d:	add    BYTE PTR [rax],ah
 1009c2f:	add    BYTE PTR [rbx+0x0],ah
 1009c32:	jb     0x1009c34
 1009c34:	add    BYTE PTR gs:[rcx+0x0],ah
 1009c38:	je     0x1009c3a
 1009c3a:	add    BYTE PTR gs:[rax],ah
 1009c3d:	add    BYTE PTR [rax+rax*1+0x61],dh
 1009c41:	add    BYTE PTR [rdx+0x0],ah
 1009c44:	ins    BYTE PTR es:[rdi],dx
 1009c45:	add    BYTE PTR [rbp+0x0],ah
 1009c48:	and    BYTE PTR [rax],al
 1009c4a:	pop    rbx
 1009c4b:	add    BYTE PTR [rip+0x5d007300],ah        # 0x5e010f51
 1009c51:	add    BYTE PTR [rax],ah
 1009c53:	add    BYTE PTR [rax],ch
 1009c55:	add    BYTE PTR [rbx+0x0],dl
 1009c58:	jne    0x1009c5a
 1009c5a:	(bad)  
 1009c5b:	add    BYTE PTR [rbp+0x0],ch
 1009c5e:	imul   eax,DWORD PTR [rax],0x540074
 1009c64:	imul   eax,DWORD PTR [rax],0x65006d
 1009c6a:	and    BYTE PTR [rax],al
 1009c6c:	add    BYTE PTR fs:[rcx+0x0],ah
 1009c70:	je     0x1009c72
 1009c72:	add    BYTE PTR gs:[rax+rax*1+0x69],dh
 1009c77:	add    BYTE PTR [rbp+0x0],ch
 1009c7a:	add    BYTE PTR gs:[rax+rax*1],ch
 1009c7e:	and    BYTE PTR [rax],al
 1009c80:	add    BYTE PTR [r14+0x0],r14b
 1009c84:	add    BYTE PTR gs:[rsi+0x0],ch
 1009c88:	je     0x1009c8a
 1009c8a:	push   rsp
 1009c8b:	add    BYTE PTR [rcx+0x0],bh
 1009c8e:	jo     0x1009c90
 1009c90:	add    BYTE PTR gs:[rax],ah
 1009c93:	add    BYTE PTR [rsi+0x0],ch
 1009c96:	jbe    0x1009c98
 1009c98:	(bad)  
 1009c99:	add    BYTE PTR [rdx+0x0],dh
 1009c9c:	movsxd eax,DWORD PTR [rax]
 1009c9e:	push   0x72006100
 1009ca3:	add    BYTE PTR [rax],ch
 1009ca5:	add    BYTE PTR [rbx],dh
 1009ca7:	add    BYTE PTR [rax],dh
 1009ca9:	add    BYTE PTR [rcx],ch
 1009cab:	add    BYTE PTR [rax+rax*1],ch
 1009cae:	and    BYTE PTR [rax],al
 1009cb0:	rex.XB add BYTE PTR [r9+0x0],spl
 1009cb4:	je     0x1009cb6
 1009cb6:	add    BYTE PTR gs:[rdi+0x0],ah
 1009cba:	outs   dx,DWORD PTR ds:[rsi]
 1009cbb:	add    BYTE PTR [rdx+0x0],dh
 1009cbe:	jns    0x1009cc0
 1009cc0:	and    BYTE PTR [rax],al
 1009cc2:	imul   eax,DWORD PTR [rax],0x74006e
 1009cc8:	sub    al,0x0
 1009cca:	and    BYTE PTR [rax],al
 1009ccc:	rex.WB add BYTE PTR [r8+rax*1+0x20],spl
 1009cd1:	add    BYTE PTR [rcx+0x0],ch
 1009cd4:	outs   dx,BYTE PTR ds:[rsi]
 1009cd5:	add    BYTE PTR [rax+rax*1+0x2c],dh
 1009cd9:	add    BYTE PTR [rax],ah
 1009cdb:	add    BYTE PTR [rbx+0x0],dl
 1009cde:	outs   dx,DWORD PTR ds:[rsi]
 1009cdf:	add    BYTE PTR [rbp+0x0],dh
 1009ce2:	jb     0x1009ce4
 1009ce4:	movsxd eax,DWORD PTR [rax]
 1009ce6:	add    BYTE PTR gs:[rax],ah
 1009ce9:	add    BYTE PTR [rsi+0x0],ch
 1009cec:	jbe    0x1009cee
 1009cee:	(bad)  
 1009cef:	add    BYTE PTR [rdx+0x0],dh
 1009cf2:	movsxd eax,DWORD PTR [rax]
 1009cf4:	push   0x72006100
 1009cf9:	add    BYTE PTR [rax],ch
 1009cfb:	add    BYTE PTR [rsi],dh
 1009cfd:	add    BYTE PTR [rax],dh
 1009cff:	add    BYTE PTR [rcx],ch
 1009d01:	add    BYTE PTR [rax+rax*1],ch
 1009d04:	and    BYTE PTR [rax],al
 1009d06:	rex.XB add BYTE PTR [r15+0x0],bpl
 1009d0a:	ins    DWORD PTR es:[rdi],dx
 1009d0b:	add    BYTE PTR [rax+0x0],dh
 1009d0e:	jne    0x1009d10
 1009d10:	je     0x1009d12
 1009d12:	add    BYTE PTR gs:[rdx+0x0],dh
 1009d16:	and    BYTE PTR [rax],al
 1009d18:	outs   dx,BYTE PTR ds:[rsi]
 1009d19:	add    BYTE PTR [rsi+0x0],dh
 1009d1c:	(bad)  
 1009d1d:	add    BYTE PTR [rdx+0x0],dh
 1009d20:	movsxd eax,DWORD PTR [rax]
 1009d22:	push   0x72006100
 1009d27:	add    BYTE PTR [rax],ch
 1009d29:	add    BYTE PTR [rbx],dh
 1009d2b:	add    BYTE PTR [rax],dh
 1009d2d:	add    BYTE PTR [rcx],ch
 1009d2f:	add    BYTE PTR [rax+rax*1],ch
 1009d32:	and    BYTE PTR [rax],al
 1009d34:	push   rbx
 1009d35:	add    BYTE PTR [rax+rax*1+0x72],dh
 1009d39:	add    BYTE PTR [rcx+0x0],ch
 1009d3c:	outs   dx,BYTE PTR ds:[rsi]
 1009d3d:	add    BYTE PTR [rdi+0x0],ah
 1009d40:	add    BYTE PTR [rcx+0x0],r12b
 1009d44:	je     0x1009d46
 1009d46:	(bad)  
 1009d47:	add    BYTE PTR [rax],ah
 1009d49:	add    BYTE PTR [rsi+0x0],ch
 1009d4c:	je     0x1009d4e
 1009d4e:	add    BYTE PTR gs:[rax+0x0],bh
 1009d52:	je     0x1009d54
 1009d54:	sub    DWORD PTR [rax],eax
 1009d56:	(bad)  
	...
 1009d5f:	add    BYTE PTR [rbp+0x0],ah
 1009d62:	js     0x1009d64
 1009d64:	add    BYTE PTR gs:[rbx+0x0],ah
 1009d68:	and    BYTE PTR [rax],al
 1009d6a:	pop    rbx
 1009d6b:	add    BYTE PTR [rip+0x5d007300],ah        # 0x5e011071
 1009d71:	add    BYTE PTR [rsi],ch
 1009d73:	add    BYTE PTR [rsi],ch
 1009d75:	add    BYTE PTR [rbx+0x0],dh
 1009d78:	jo     0x1009d7a
 1009d7a:	pop    rdi
 1009d7b:	add    BYTE PTR [rax+rax*1+0x61],dh
 1009d7f:	add    BYTE PTR [rdx+0x0],ah
 1009d82:	ins    BYTE PTR es:[rdi],dx
 1009d83:	add    BYTE PTR [rbp+0x0],ah
 1009d86:	outs   dx,DWORD PTR ds:[rsi]
 1009d87:	add    BYTE PTR [rax+0x0],dh
 1009d8a:	je     0x1009d8c
 1009d8c:	imul   eax,DWORD PTR [rax],0x6e006f
 1009d92:	and    BYTE PTR [rax],al
 1009d94:	rex.WRX add BYTE PTR [rdi],r12b
 1009d97:	add    BYTE PTR [rip+0x27007300],ah        # 0x2801109d
 1009d9d:	add    BYTE PTR [rax+rax*1],ch
 1009da0:	and    BYTE PTR [rax],al
 1009da2:	(bad)  
 1009da3:	add    BYTE PTR [rax+rax*1+0x65],dh
 1009da7:	add    BYTE PTR [rax+0x0],bh
 1009daa:	je     0x1009dac
 1009dac:	and    BYTE PTR [rax],al
 1009dae:	imul   eax,DWORD PTR [rax],0x20006e
 1009db4:	jb     0x1009db6
 1009db6:	outs   dx,DWORD PTR ds:[rsi]
 1009db7:	add    BYTE PTR [rdi+0x0],dh
 1009dba:	(bad)  
 1009dbb:	add    BYTE PTR [rax+rax*1],ch
 1009dbe:	and    BYTE PTR [rax],al
 1009dc0:	(bad)  
 1009dc1:	add    BYTE PTR [rax+rax*1],dh
 1009dc4:	xor    BYTE PTR [rax],al
 1009dc6:	xor    BYTE PTR [rax],al
 1009dc8:	xor    BYTE PTR [rax],al
 1009dca:	(bad)  
 1009dcb:	add    BYTE PTR [rax],al
 1009dcd:	add    BYTE PTR [rax],al
 1009dcf:	add    BYTE PTR [rbx+0x0],dl
 1009dd2:	pop    rcx
 1009dd3:	add    BYTE PTR [rbx+0x0],dl
 1009dd6:	push   rsp
 1009dd7:	add    BYTE PTR [rbp+0x0],al
 1009dda:	rex.WRB add BYTE PTR [r8+rax*1+0x43],r11b
 1009ddf:	add    BYTE PTR [rbp+0x0],dh
 1009de2:	jb     0x1009de4
 1009de4:	jb     0x1009de6
 1009de6:	add    BYTE PTR gs:[rsi+0x0],ch
 1009dea:	je     0x1009dec
 1009dec:	rex.XB add BYTE PTR [r15+0x0],bpl
 1009df0:	outs   dx,BYTE PTR ds:[rsi]
 1009df1:	add    BYTE PTR [rax+rax*1+0x72],dh
 1009df5:	add    BYTE PTR [rdi+0x0],ch
 1009df8:	ins    BYTE PTR es:[rdi],dx
 1009df9:	add    BYTE PTR [rbx+0x0],dl
 1009dfc:	add    BYTE PTR gs:[rax+rax*1+0x5c],dh
 1009e01:	add    BYTE PTR [rbx+0x0],dl
 1009e04:	add    BYTE PTR gs:[rdx+0x0],dh
 1009e08:	jbe    0x1009e0a
 1009e0a:	imul   eax,DWORD PTR [rax],0x650063
 1009e10:	jae    0x1009e12
 1009e12:	pop    rsp
 1009e13:	add    BYTE PTR [rbp+0x0],al
 1009e16:	jbe    0x1009e18
 1009e18:	add    BYTE PTR gs:[rsi+0x0],ch
 1009e1c:	je     0x1009e1e
 1009e1e:	rex.WR add BYTE PTR [rdi+0x0],r13b
 1009e22:	add    BYTE PTR [eax+eax*1+0x25],bl
 1009e27:	add    BYTE PTR [rbx+0x0],dh
 1009e2a:	pop    rsp
 1009e2b:	add    BYTE PTR [rip+0x7300],ah        # 0x1011131
	...
 1009e3d:	add    BYTE PTR [rax],al
 1009e3f:	add    BYTE PTR [rax+rax*1+0x68],dl
 1009e43:	add    BYTE PTR [rbp+0x0],ah
 1009e46:	and    BYTE PTR [rax],al
 1009e48:	add    BYTE PTR fs:[rbp+0x0],ah
 1009e4c:	jae    0x1009e4e
 1009e4e:	movsxd eax,DWORD PTR [rax]
 1009e50:	jb     0x1009e52
 1009e52:	imul   eax,DWORD PTR [rax],0x740070
 1009e58:	imul   eax,DWORD PTR [rax],0x6e006f
 1009e5e:	and    BYTE PTR [rax],al
 1009e60:	data16 add BYTE PTR [rdi+0x0],ch
 1009e64:	jb     0x1009e66
 1009e66:	and    BYTE PTR [rax],al
 1009e68:	je     0x1009e6a
 1009e6a:	push   0x73006900
 1009e6f:	add    BYTE PTR [rax],ah
 1009e71:	add    BYTE PTR [rbp+0x0],ah
 1009e74:	jbe    0x1009e76
 1009e76:	add    BYTE PTR gs:[rsi+0x0],ch
 1009e7a:	je     0x1009e7c
 1009e7c:	and    BYTE PTR [rax],al
 1009e7e:	movsxd eax,DWORD PTR [rax]
 1009e80:	outs   dx,DWORD PTR ds:[rsi]
 1009e81:	add    BYTE PTR [rbp+0x0],dh
 1009e84:	ins    BYTE PTR es:[rdi],dx
 1009e85:	add    BYTE PTR [rax+rax*1+0x20],ah
 1009e89:	add    BYTE PTR [rsi+0x0],ch
 1009e8c:	outs   dx,DWORD PTR ds:[rsi]
 1009e8d:	add    BYTE PTR [rax+rax*1+0x20],dh
 1009e91:	add    BYTE PTR [rdx+0x0],ah
 1009e94:	add    BYTE PTR gs:[rax],ah
 1009e97:	add    BYTE PTR [rsi+0x0],ah
 1009e9a:	outs   dx,DWORD PTR ds:[rsi]
 1009e9b:	add    BYTE PTR [rbp+0x0],dh
 1009e9e:	outs   dx,BYTE PTR ds:[rsi]
 1009e9f:	add    BYTE PTR [rax+rax*1+0x2e],ah
 1009ea3:	add    BYTE PTR [rax],ah
 1009ea5:	add    BYTE PTR [rbx+0x0],dl
 1009ea8:	je     0x1009eaa
 1009eaa:	jb     0x1009eac
 1009eac:	imul   eax,DWORD PTR [rax],0x67006e
 1009eb2:	jae    0x1009eb4
 1009eb4:	cmp    al,BYTE PTR [rax]
 1009eb6:	and    BYTE PTR [rax],al
 1009eb8:	add    BYTE PTR [rax],al
 1009eba:	add    BYTE PTR [rax],al
 1009ebc:	sub    al,0x0
 1009ebe:	and    BYTE PTR [rax],al
	...
 1009ec8:	push   rbx
 1009ec9:	add    BYTE PTR [rbp+0x0],dh
 1009ecc:	movsxd eax,DWORD PTR [rax]
 1009ece:	movsxd eax,DWORD PTR [rax]
 1009ed0:	add    BYTE PTR gs:[rbx+0x0],dh
 1009ed4:	jae    0x1009ed6
 1009ed6:	add    BYTE PTR [rax],al
 1009ed8:	add    BYTE PTR [r10+0x0],r14b
 1009edc:	jb     0x1009ede
 1009ede:	outs   dx,DWORD PTR ds:[rsi]
 1009edf:	add    BYTE PTR [rdx+0x0],dh
 1009ee2:	add    BYTE PTR [rax],al
 1009ee4:	add    BYTE PTR [rax],al
 1009ee6:	add    BYTE PTR [rax],al
 1009ee8:	push   rdi
 1009ee9:	add    BYTE PTR [rcx+0x0],ah
 1009eec:	jb     0x1009eee
 1009eee:	outs   dx,BYTE PTR ds:[rsi]
 1009eef:	add    BYTE PTR [rcx+0x0],ch
 1009ef2:	outs   dx,BYTE PTR ds:[rsi]
 1009ef3:	add    BYTE PTR [rdi+0x0],ah
 1009ef6:	add    BYTE PTR [rax],al
 1009ef8:	rex.WB add BYTE PTR [r14+0x0],bpl
 1009efc:	data16 add BYTE PTR [rdi+0x0],ch
 1009f00:	jb     0x1009f02
 1009f02:	ins    DWORD PTR es:[rdi],dx
 1009f03:	add    BYTE PTR [rcx+0x0],ah
 1009f06:	je     0x1009f08
 1009f08:	imul   eax,DWORD PTR [rax],0x6e006f
 1009f0e:	add    BYTE PTR [rax],al
 1009f10:	push   rbx
 1009f11:	add    BYTE PTR [rbp+0x0],dh
 1009f14:	movsxd eax,DWORD PTR [rax]
 1009f16:	movsxd eax,DWORD PTR [rax]
 1009f18:	add    BYTE PTR gs:[rbx+0x0],dh
 1009f1c:	jae    0x1009f1e
 1009f1e:	and    BYTE PTR [rax],al
 1009f20:	add    BYTE PTR [r13+0x0],sil
 1009f24:	add    BYTE PTR fs:[rcx+0x0],ch
 1009f28:	je     0x1009f2a
 1009f2a:	add    BYTE PTR [rax],al
 1009f2c:	add    BYTE PTR [rax],al
 1009f2e:	add    BYTE PTR [rax],al
 1009f30:	rex.RX add BYTE PTR [rcx+0x0],r12b
 1009f34:	imul   eax,DWORD PTR [rax],0x75006c
 1009f3a:	jb     0x1009f3c
 1009f3c:	add    BYTE PTR gs:[rax],ah
 1009f3f:	add    BYTE PTR [rcx+0x0],al
 1009f42:	jne    0x1009f44
 1009f44:	add    BYTE PTR fs:[rcx+0x0],ch
 1009f48:	je     0x1009f4a
 1009f4a:	add    BYTE PTR [rax],al
 1009f4c:	add    BYTE PTR [rax],al
 1009f4e:	add    BYTE PTR [rax],al
 1009f50:	push   rbp
 1009f51:	add    BYTE PTR [rsi+0x0],ch
 1009f54:	imul   eax,DWORD PTR [rax],0x6e
 1009f57:	add    BYTE PTR [rdi+0x0],ch
 1009f5a:	ja     0x1009f5c
 1009f5c:	outs   dx,BYTE PTR ds:[rsi]
 1009f5d:	add    BYTE PTR [rax],al
 1009f5f:	add    BYTE PTR [rip+0xa000c00],cl        # 0xb00ab65
 1009f65:	add    BYTE PTR [rax],al
 1009f67:	add    BYTE PTR [rax+rax*1+0x66],bl
 1009f6b:	add    BYTE PTR [rax],al
 1009f6d:	add    BYTE PTR [rax],al
 1009f6f:	add    BYTE PTR [rax+rax*1],cl
 1009f72:	add    BYTE PTR [rax],al
 1009f74:	add    BYTE PTR [rax],al
 1009f76:	add    BYTE PTR [rax],al
 1009f78:	sub    al,0x0
 1009f7a:	and    al,BYTE PTR [rax]
 1009f7c:	or     eax,0xa00
 1009f81:	add    BYTE PTR [rax],al
 1009f83:	add    BYTE PTR [rdx],ah
 1009f85:	add    BYTE PTR [rdx],ah
	...
 1009f8f:	add    BYTE PTR [rip+0x34003000],ah        # 0x3500cf95
 1009f95:	add    BYTE PTR [rax+rax*1+0x2d],ah
 1009f99:	add    BYTE PTR [rip+0x32003000],ah        # 0x3300cf9f
 1009f9f:	add    BYTE PTR [rax+rax*1+0x2d],ah
 1009fa3:	add    BYTE PTR [rip+0x32003000],ah        # 0x3300cfa9
 1009fa9:	add    BYTE PTR [rax+rax*1+0x20],ah
 1009fad:	add    BYTE PTR [rip+0x32003000],ah        # 0x3300cfb3
 1009fb3:	add    BYTE PTR [rax+rax*1+0x3a],ah
 1009fb7:	add    BYTE PTR [rip+0x32003000],ah        # 0x3300cfbd
 1009fbd:	add    BYTE PTR [rax+rax*1+0x3a],ah
 1009fc1:	add    BYTE PTR [rip+0x32003000],ah        # 0x3300cfc7
 1009fc7:	add    BYTE PTR [rax+rax*1+0x0],ah
 1009fcb:	add    BYTE PTR [rax],al
 1009fcd:	add    BYTE PTR [rax],al
 1009fcf:	add    BYTE PTR [rcx],dh
 1009fd1:	add    BYTE PTR [rcx],bh
 1009fd3:	add    BYTE PTR [rax],dh
 1009fd5:	add    BYTE PTR [rax],dh
 1009fd7:	add    BYTE PTR [rip+0x31003000],ch        # 0x3200cfdd
 1009fdd:	add    BYTE PTR [rip+0x31003000],ch        # 0x3200cfe3
 1009fe3:	add    BYTE PTR [rax],ah
 1009fe5:	add    BYTE PTR [rax],dh
 1009fe7:	add    BYTE PTR [rax],dh
 1009fe9:	add    BYTE PTR [rdx],bh
 1009feb:	add    BYTE PTR [rax],dh
 1009fed:	add    BYTE PTR [rax],dh
 1009fef:	add    BYTE PTR [rdx],bh
 1009ff1:	add    BYTE PTR [rax],dh
 1009ff3:	add    BYTE PTR [rax],dh
 1009ff5:	add    BYTE PTR [rax],al
 1009ff7:	add    BYTE PTR [rip+0x2c007300],ah        # 0x2d0112fd
 1009ffd:	add    BYTE PTR [rip+0x2c007300],ah        # 0x2d011303
 100a003:	add    BYTE PTR [rip+0x2c006400],ah        # 0x2d010409
 100a009:	add    BYTE PTR [rip+0x2c006400],ah        # 0x2d01040f
 100a00f:	add    BYTE PTR [rip+0x2c007300],ah        # 0x2d011315
 100a015:	add    BYTE PTR [rip+0x2c007300],ah        # 0x2d01131b
 100a01b:	add    BYTE PTR [rip+0xd007300],ah        # 0xe011321
 100a021:	add    BYTE PTR [rdx],cl
 100a023:	add    BYTE PTR [rax],al
 100a025:	add    BYTE PTR [rax],al
 100a027:	add    BYTE PTR [rax+rax*1+0x65],al
 100a02b:	add    BYTE PTR [rax+rax*1+0x65],ch
 100a02f:	add    BYTE PTR [rax+rax*1+0x65],dh
 100a033:	add    BYTE PTR [rax],al
 100a035:	add    BYTE PTR [rax],al
 100a037:	add    BYTE PTR [rsi+0x0],cl
 100a03a:	outs   dx,DWORD PTR ds:[rsi]
 100a03b:	add    BYTE PTR [rdx+0x0],dl
 100a03e:	add    BYTE PTR gs:[rbp+0x0],ch
 100a042:	outs   dx,DWORD PTR ds:[rsi]
 100a043:	add    BYTE PTR [rsi+0x0],dh
 100a046:	add    BYTE PTR gs:[rax],al
 100a049:	add    BYTE PTR [rax],al
 100a04b:	add    BYTE PTR [rax],al
 100a04d:	add    BYTE PTR [rax],al
 100a04f:	add    BYTE PTR [rsi+0x0],al
 100a052:	outs   dx,DWORD PTR ds:[rsi]
 100a053:	add    BYTE PTR [rdx+0x0],dh
 100a056:	movsxd eax,DWORD PTR [rax]
 100a058:	add    BYTE PTR gs:[rdx+0x0],dl
 100a05c:	add    BYTE PTR gs:[rbp+0x0],ch
 100a060:	outs   dx,DWORD PTR ds:[rsi]
 100a061:	add    BYTE PTR [rsi+0x0],dh
 100a064:	add    BYTE PTR gs:[rax],al
 100a067:	add    BYTE PTR [rsi+0x0],dl
 100a06a:	(bad)  
 100a06b:	add    BYTE PTR [rax+rax*1+0x0],ch
 100a06f:	add    BYTE PTR [rdx+0x0],al
 100a072:	add    BYTE PTR [rax],al
 100a074:	add    BYTE PTR [rax],r8b
 100a077:	add    BYTE PTR [rbp+0x0],cl
 100a07a:	add    BYTE PTR [rax],al
 100a07c:	push   rbx
 100a07d:	add    BYTE PTR [rax],al
 100a07f:	add    BYTE PTR [rax+riz*4+0x0],bh
 100a083:	add    DWORD PTR [rax],eax
 100a085:	add    BYTE PTR [rax],al
 100a087:	add    BYTE PTR [rax-0x60],bh
 100a08a:	add    BYTE PTR [rcx],al
 100a08c:	add    BYTE PTR [rax],al
 100a08e:	add    BYTE PTR [rax],al
 100a090:	je     0x100a032
 100a092:	add    BYTE PTR [rcx],al
 100a094:	add    BYTE PTR [rax],al
 100a096:	add    BYTE PTR [rax],al
 100a098:	jo     0x100a03a
 100a09a:	add    BYTE PTR [rcx],al
 100a09c:	add    BYTE PTR [rax],al
 100a09e:	add    BYTE PTR [rax],al
 100a0a0:	push   0x100a0
 100a0a5:	add    BYTE PTR [rax],al
 100a0a7:	add    BYTE PTR [rax-0x60],dl
 100a0aa:	add    BYTE PTR [rcx],al
 100a0ac:	add    BYTE PTR [rax],al
 100a0ae:	add    BYTE PTR [rax],al
 100a0b0:	cmp    BYTE PTR [rax+0x100],ah
 100a0b6:	add    BYTE PTR [rax],al
 100a0b8:	sub    BYTE PTR [rax+0x100],ah
 100a0be:	add    BYTE PTR [rax],al
 100a0c0:	sar    BYTE PTR [rdx],0x6
 100a0c3:	add    DWORD PTR [rax],eax
 100a0c5:	add    BYTE PTR [rax],al
 100a0c7:	add    BYTE PTR [rax+0x3b],ah
 100a0ca:	(bad)  
 100a0cb:	add    DWORD PTR [rax],eax
 100a0cd:	add    BYTE PTR [rax],al
 100a0cf:	add    BYTE PTR [rax-0x52],cl
 100a0d2:	add    BYTE PTR [rcx],al
 100a0d4:	add    BYTE PTR [rax],al
 100a0d6:	add    BYTE PTR [rax],al
 100a0d8:	push   0x103ff
	...
 100a0ed:	add    BYTE PTR [rax],al
 100a0ef:	add    BYTE PTR [rcx],al
 100a0f1:	add    BYTE PTR [rax],al
 100a0f3:	add    BYTE PTR [rcx],al
 100a0f5:	add    BYTE PTR [rax],al
 100a0f7:	add    BYTE PTR [rbx],al
 100a0f9:	add    BYTE PTR [rax],al
 100a0fb:	add    BYTE PTR [rbx],al
 100a0fd:	add    BYTE PTR [rax],al
 100a0ff:	add    BYTE PTR [rdi],al
 100a101:	add    BYTE PTR [rax],al
 100a103:	add    BYTE PTR [rdi],al
 100a105:	add    BYTE PTR [rax],al
 100a107:	add    BYTE PTR [rdi],cl
 100a109:	add    BYTE PTR [rax],al
 100a10b:	add    BYTE PTR [rdi],cl
 100a10d:	add    BYTE PTR [rax],al
 100a10f:	add    BYTE PTR [rdi],bl
 100a111:	add    BYTE PTR [rax],al
 100a113:	add    BYTE PTR [rdi],bl
 100a115:	add    BYTE PTR [rax],al
 100a117:	add    BYTE PTR [rdi],bh
 100a119:	add    BYTE PTR [rax],al
 100a11b:	add    BYTE PTR [rdi],bh
 100a11d:	add    BYTE PTR [rax],al
 100a11f:	add    BYTE PTR [rdi+0x0],bh
 100a122:	add    BYTE PTR [rax],al
 100a124:	jg     0x100a126
 100a126:	add    BYTE PTR [rax],al
 100a128:	inc    DWORD PTR [rax]
 100a12a:	add    BYTE PTR [rax],al
 100a12c:	inc    DWORD PTR [rax]
 100a12e:	add    BYTE PTR [rax],al
 100a130:	inc    DWORD PTR [rcx]
 100a132:	add    BYTE PTR [rax],al
 100a134:	inc    DWORD PTR [rcx]
 100a136:	add    BYTE PTR [rax],al
 100a138:	inc    DWORD PTR [rbx]
 100a13a:	add    BYTE PTR [rax],al
 100a13c:	inc    DWORD PTR [rbx]
 100a13e:	add    BYTE PTR [rax],al
 100a140:	inc    DWORD PTR [rdi]
 100a142:	add    BYTE PTR [rax],al
 100a144:	inc    DWORD PTR [rdi]
 100a146:	add    BYTE PTR [rax],al
 100a148:	dec    DWORD PTR [rdi]
 100a14a:	add    BYTE PTR [rax],al
 100a14c:	dec    DWORD PTR [rdi]
 100a14e:	add    BYTE PTR [rax],al
 100a150:	call   FWORD PTR [rdi]
 100a152:	add    BYTE PTR [rax],al
 100a154:	call   FWORD PTR [rdi]
 100a156:	add    BYTE PTR [rax],al
 100a158:	(bad)  
 100a159:	(bad)  
 100a15a:	add    BYTE PTR [rax],al
 100a15c:	(bad)  
 100a15d:	(bad)  
 100a15e:	add    BYTE PTR [rax],al
 100a160:	(bad)  
 100a161:	jg     0x100a163
 100a163:	add    bh,bh
 100a165:	jg     0x100a167
 100a167:	add    bh,bh
 100a169:	inc    DWORD PTR [rax]
 100a16b:	add    bh,bh
 100a16d:	inc    DWORD PTR [rax]
 100a16f:	add    bh,bh
 100a171:	inc    DWORD PTR [rcx]
 100a173:	add    bh,bh
 100a175:	inc    DWORD PTR [rcx]
 100a177:	add    bh,bh
 100a179:	inc    DWORD PTR [rcx]
 100a17b:	add    bh,bh
 100a17d:	inc    DWORD PTR [rcx]
 100a17f:	add    bh,bh
 100a181:	inc    DWORD PTR [rcx]
 100a183:	add    bh,bh
 100a185:	inc    DWORD PTR [rcx]
 100a187:	add    bh,bh
 100a189:	inc    DWORD PTR [rcx]
 100a18b:	add    bh,bh
 100a18d:	inc    DWORD PTR [rcx]
 100a18f:	add    bh,bh
 100a191:	inc    DWORD PTR [rcx]
 100a193:	add    bh,bh
 100a195:	inc    DWORD PTR [rcx]
 100a197:	add    bh,bh
 100a199:	inc    DWORD PTR [rcx]
 100a19b:	add    bh,bh
 100a19d:	inc    DWORD PTR [rcx]
 100a19f:	add    bh,bh
 100a1a1:	inc    DWORD PTR [rcx]
 100a1a3:	add    bh,bh
 100a1a5:	inc    DWORD PTR [rcx]
 100a1a7:	add    bh,bh
 100a1a9:	inc    DWORD PTR [rcx]
	...
 100a1b3:	add    BYTE PTR [rcx],al
 100a1b5:	add    DWORD PTR [rdx],eax
 100a1b7:	add    al,BYTE PTR [rbx]
 100a1b9:	add    eax,DWORD PTR [rsp+rax*1]
 100a1bc:	add    eax,0x7060605
 100a1c1:	(bad)  
 100a1c2:	or     BYTE PTR [rax],cl
 100a1c4:	or     DWORD PTR [rcx],ecx
 100a1c6:	or     cl,BYTE PTR [rdx]
 100a1c8:	or     ecx,DWORD PTR [rbx]
 100a1ca:	or     al,0xc
 100a1cc:	or     eax,0xf0e0e0d
 100a1d1:	movups xmm2,XMMWORD PTR [rax]
 100a1d4:	adc    DWORD PTR [rcx],edx
 100a1d6:	adc    DWORD PTR [rcx],edx
 100a1d8:	adc    DWORD PTR [rcx],edx
 100a1da:	adc    DWORD PTR [rcx],edx
 100a1dc:	adc    DWORD PTR [rcx],edx
 100a1de:	adc    DWORD PTR [rcx],edx
 100a1e0:	adc    DWORD PTR [rcx],edx
 100a1e2:	adc    DWORD PTR [rax],eax
	...
 100a210:	add    DWORD PTR [rax],eax
 100a212:	add    BYTE PTR [rax],al
 100a214:	add    DWORD PTR [rax],eax
 100a216:	add    BYTE PTR [rax],al
 100a218:	add    DWORD PTR [rax],eax
 100a21a:	add    BYTE PTR [rax],al
 100a21c:	add    DWORD PTR [rax],eax
 100a21e:	add    BYTE PTR [rax],al
 100a220:	add    al,BYTE PTR [rax]
 100a222:	add    BYTE PTR [rax],al
 100a224:	add    al,BYTE PTR [rax]
 100a226:	add    BYTE PTR [rax],al
 100a228:	add    al,BYTE PTR [rax]
 100a22a:	add    BYTE PTR [rax],al
 100a22c:	add    al,BYTE PTR [rax]
 100a22e:	add    BYTE PTR [rax],al
 100a230:	add    eax,DWORD PTR [rax]
 100a232:	add    BYTE PTR [rax],al
 100a234:	add    eax,DWORD PTR [rax]
 100a236:	add    BYTE PTR [rax],al
 100a238:	add    eax,DWORD PTR [rax]
 100a23a:	add    BYTE PTR [rax],al
 100a23c:	add    eax,DWORD PTR [rax]
 100a23e:	add    BYTE PTR [rax],al
 100a240:	add    al,0x0
 100a242:	add    BYTE PTR [rax],al
 100a244:	add    al,0x0
 100a246:	add    BYTE PTR [rax],al
 100a248:	add    al,0x0
 100a24a:	add    BYTE PTR [rax],al
 100a24c:	add    al,0x0
 100a24e:	add    BYTE PTR [rax],al
 100a250:	add    eax,0x5000000
 100a255:	add    BYTE PTR [rax],al
 100a257:	add    BYTE PTR [rip+0x5000000],al        # 0x600a25d
	...
 100a27d:	add    BYTE PTR [rax],al
 100a27f:	add    BYTE PTR [rcx],al
 100a281:	add    BYTE PTR [rax],al
 100a283:	add    BYTE PTR [rcx],al
 100a285:	add    BYTE PTR [rax],al
 100a287:	add    BYTE PTR [rdx],al
 100a289:	add    BYTE PTR [rax],al
 100a28b:	add    BYTE PTR [rdx],al
 100a28d:	add    BYTE PTR [rax],al
 100a28f:	add    BYTE PTR [rbx],al
 100a291:	add    BYTE PTR [rax],al
 100a293:	add    BYTE PTR [rbx],al
 100a295:	add    BYTE PTR [rax],al
 100a297:	add    BYTE PTR [rax+rax*1],al
 100a29a:	add    BYTE PTR [rax],al
 100a29c:	add    al,0x0
 100a29e:	add    BYTE PTR [rax],al
 100a2a0:	add    eax,0x5000000
 100a2a5:	add    BYTE PTR [rax],al
 100a2a7:	add    BYTE PTR [rsi],al
 100a2a9:	add    BYTE PTR [rax],al
 100a2ab:	add    BYTE PTR [rsi],al
 100a2ad:	add    BYTE PTR [rax],al
 100a2af:	add    BYTE PTR [rdi],al
 100a2b1:	add    BYTE PTR [rax],al
 100a2b3:	add    BYTE PTR [rdi],al
 100a2b5:	add    BYTE PTR [rax],al
 100a2b7:	add    BYTE PTR [rax],cl
 100a2b9:	add    BYTE PTR [rax],al
 100a2bb:	add    BYTE PTR [rax],cl
 100a2bd:	add    BYTE PTR [rax],al
 100a2bf:	add    BYTE PTR [rcx],cl
 100a2c1:	add    BYTE PTR [rax],al
 100a2c3:	add    BYTE PTR [rcx],cl
 100a2c5:	add    BYTE PTR [rax],al
 100a2c7:	add    BYTE PTR [rdx],cl
 100a2c9:	add    BYTE PTR [rax],al
 100a2cb:	add    BYTE PTR [rdx],cl
 100a2cd:	add    BYTE PTR [rax],al
 100a2cf:	add    BYTE PTR [rbx],cl
 100a2d1:	add    BYTE PTR [rax],al
 100a2d3:	add    BYTE PTR [rbx],cl
 100a2d5:	add    BYTE PTR [rax],al
 100a2d7:	add    BYTE PTR [rax+rax*1],cl
 100a2da:	add    BYTE PTR [rax],al
 100a2dc:	or     al,0x0
 100a2de:	add    BYTE PTR [rax],al
 100a2e0:	or     eax,0xd000000
	...
 100a32d:	add    BYTE PTR [rax],al
 100a32f:	add    BYTE PTR [rdx],al
 100a331:	add    BYTE PTR [rax],al
 100a333:	add    BYTE PTR [rbx],al
 100a335:	add    BYTE PTR [rax],al
 100a337:	add    BYTE PTR [rdi],al
 100a339:	add    BYTE PTR [rax],al
 100a33b:	add    BYTE PTR [rax],al
 100a33d:	add    BYTE PTR [rax],al
 100a33f:	add    BYTE PTR [rax],dl
 100a341:	adc    DWORD PTR [rdx],edx
 100a343:	add    BYTE PTR [rax],cl
 100a345:	(bad)  
 100a346:	or     DWORD PTR [rsi],eax
 100a348:	or     al,BYTE PTR [rip+0x30c040b]        # 0x40ca759
 100a34e:	or     eax,0xf010e02
 100a353:	add    BYTE PTR [rax],al
 100a355:	add    BYTE PTR [rax],al
 100a357:	add    BYTE PTR [rax],al
 100a359:	add    DWORD PTR [rdx],eax
 100a35b:	add    eax,DWORD PTR [rax*1+0x9080706]
 100a362:	or     cl,BYTE PTR [rbx]
 100a364:	or     al,0xd
 100a366:	(bad)  
 100a367:	movups xmm0,XMMWORD PTR [rax]
 100a36a:	add    DWORD PTR [rdx],eax
 100a36c:	add    eax,DWORD PTR [rax*1+0x9080706]
 100a373:	or     cl,BYTE PTR [rbx]
 100a375:	or     al,0xd
 100a377:	(bad)  
 100a378:	movups xmm0,XMMWORD PTR [rax]
	...
 100a383:	add    BYTE PTR [rcx],al
 100a385:	add    BYTE PTR [rax],al
 100a387:	add    BYTE PTR [rax+rax*1],al
 100a38a:	add    BYTE PTR [rax],al
 100a38c:	or     DWORD PTR [rax],eax
 100a38e:	add    BYTE PTR [rax],al
 100a390:	adc    BYTE PTR [rax],al
 100a392:	add    BYTE PTR [rax],al
 100a394:	sbb    DWORD PTR [rax],eax
 100a396:	add    BYTE PTR [rax],al
 100a398:	and    al,0x0
 100a39a:	add    BYTE PTR [rax],al
 100a39c:	xor    DWORD PTR [rax],eax
 100a39e:	add    BYTE PTR [rax],al
 100a3a0:	add    BYTE PTR [rax],al
 100a3a3:	add    BYTE PTR [rcx+0x0],dl
 100a3a6:	add    BYTE PTR [rax],al
 100a3a8:	add    BYTE PTR fs:[rax],al
 100a3ab:	add    BYTE PTR [rcx+0x0],bh
 100a3ae:	add    BYTE PTR [rax],al
 100a3b0:	nop
 100a3b1:	add    BYTE PTR [rax],al
 100a3b3:	add    BYTE PTR [rcx-0x3c000000],ch
 100a3b9:	add    BYTE PTR [rax],al
 100a3bb:	add    cl,ah
 100a3bd:	add    BYTE PTR [rax],al
 100a3bf:	add    BYTE PTR [rax],al
 100a3c1:	add    DWORD PTR [rax],eax
	...
 100a3cf:	add    BYTE PTR [rax],al
 100a3d1:	add    DWORD PTR [rdx],eax
 100a3d3:	add    al,BYTE PTR [rbx]
 100a3d5:	add    eax,DWORD PTR [rbx]
 100a3d7:	add    eax,DWORD PTR [rsp+rax*1]
 100a3da:	add    al,0x4
 100a3dc:	add    al,0x4
 100a3de:	add    al,0x4
 100a3e0:	add    eax,0x5050505
 100a3e5:	add    eax,0x5050505
 100a3ea:	add    eax,0x5050505
 100a3ef:	add    eax,0x6060606
 100a3f4:	(bad)  
 100a3f5:	(bad)  
 100a3f6:	(bad)  
 100a3f7:	(bad)  
 100a3f8:	(bad)  
 100a3f9:	(bad)  
 100a3fa:	(bad)  
 100a3fb:	(bad)  
 100a3fc:	(bad)  
 100a3fd:	(bad)  
 100a3fe:	(bad)  
 100a3ff:	(bad)  
 100a400:	(bad)  
 100a401:	(bad)  
 100a402:	(bad)  
 100a403:	(bad)  
 100a404:	(bad)  
 100a405:	(bad)  
 100a406:	(bad)  
 100a407:	(bad)  
 100a408:	(bad)  
 100a409:	(bad)  
 100a40a:	(bad)  
 100a40b:	(bad)  
 100a40c:	(bad)  
 100a40d:	(bad)  
 100a40e:	(bad)  
 100a40f:	(bad)  
 100a410:	(bad)  
 100a411:	(bad)  
 100a412:	(bad)  
 100a413:	(bad)  
 100a414:	(bad)  
 100a415:	(bad)  
 100a416:	(bad)  
 100a417:	(bad)  
 100a418:	(bad)  
 100a419:	(bad)  
 100a41a:	(bad)  
 100a41b:	(bad)  
 100a41c:	(bad)  
 100a41d:	(bad)  
 100a41e:	(bad)  
 100a41f:	(bad)  
 100a420:	(bad)  
 100a421:	(bad)  
 100a422:	(bad)  
 100a423:	(bad)  
 100a424:	(bad)  
 100a425:	(bad)  
 100a426:	(bad)  
 100a427:	(bad)  
 100a428:	(bad)  
 100a429:	(bad)  
 100a42a:	(bad)  
 100a42b:	(bad)  
 100a42c:	(bad)  
 100a42d:	(bad)  
 100a42e:	(bad)  
 100a42f:	(bad)  
 100a430:	(bad)  
 100a431:	(bad)  
 100a432:	(bad)  
 100a433:	(bad)  
 100a434:	(bad)  
 100a435:	(bad)  
 100a436:	(bad)  
 100a437:	(bad)  
 100a438:	(bad)  
 100a439:	(bad)  
 100a43a:	(bad)  
 100a43b:	(bad)  
 100a43c:	(bad)  
 100a43d:	(bad)  
 100a43e:	(bad)  
 100a43f:	(bad)  
 100a440:	(bad)  
 100a441:	(bad)  
 100a442:	(bad)  
 100a443:	(bad)  
 100a444:	(bad)  
 100a445:	(bad)  
 100a446:	(bad)  
 100a447:	(bad)  
 100a448:	(bad)  
 100a449:	(bad)  
 100a44a:	(bad)  
 100a44b:	(bad)  
 100a44c:	(bad)  
 100a44d:	(bad)  
 100a44e:	(bad)  
 100a44f:	(bad)  
 100a450:	or     BYTE PTR [rax],cl
 100a452:	or     BYTE PTR [rax],cl
 100a454:	or     BYTE PTR [rax],cl
 100a456:	or     BYTE PTR [rax],cl
 100a458:	or     BYTE PTR [rax],cl
 100a45a:	or     BYTE PTR [rax],cl
 100a45c:	or     BYTE PTR [rax],cl
 100a45e:	or     BYTE PTR [rax],cl
 100a460:	or     BYTE PTR [rax],cl
 100a462:	or     BYTE PTR [rax],cl
 100a464:	or     BYTE PTR [rax],cl
 100a466:	or     BYTE PTR [rax],cl
 100a468:	or     BYTE PTR [rax],cl
 100a46a:	or     BYTE PTR [rax],cl
 100a46c:	or     BYTE PTR [rax],cl
 100a46e:	or     BYTE PTR [rax],cl
 100a470:	or     BYTE PTR [rax],cl
 100a472:	or     BYTE PTR [rax],cl
 100a474:	or     BYTE PTR [rax],cl
 100a476:	or     BYTE PTR [rax],cl
 100a478:	or     BYTE PTR [rax],cl
 100a47a:	or     BYTE PTR [rax],cl
 100a47c:	or     BYTE PTR [rax],cl
 100a47e:	or     BYTE PTR [rax],cl
 100a480:	or     BYTE PTR [rax],cl
 100a482:	or     BYTE PTR [rax],cl
 100a484:	or     BYTE PTR [rax],cl
 100a486:	or     BYTE PTR [rax],cl
 100a488:	or     BYTE PTR [rax],cl
 100a48a:	or     BYTE PTR [rax],cl
 100a48c:	or     BYTE PTR [rax],cl
 100a48e:	or     BYTE PTR [rax],cl
 100a490:	or     BYTE PTR [rax],cl
 100a492:	or     BYTE PTR [rax],cl
 100a494:	or     BYTE PTR [rax],cl
 100a496:	or     BYTE PTR [rax],cl
 100a498:	or     BYTE PTR [rax],cl
 100a49a:	or     BYTE PTR [rax],cl
 100a49c:	or     BYTE PTR [rax],cl
 100a49e:	or     BYTE PTR [rax],cl
 100a4a0:	or     BYTE PTR [rax],cl
 100a4a2:	or     BYTE PTR [rax],cl
 100a4a4:	or     BYTE PTR [rax],cl
 100a4a6:	or     BYTE PTR [rax],cl
 100a4a8:	or     BYTE PTR [rax],cl
 100a4aa:	or     BYTE PTR [rax],cl
 100a4ac:	or     BYTE PTR [rax],cl
 100a4ae:	or     BYTE PTR [rax],cl
 100a4b0:	or     BYTE PTR [rax],cl
 100a4b2:	or     BYTE PTR [rax],cl
 100a4b4:	or     BYTE PTR [rax],cl
 100a4b6:	or     BYTE PTR [rax],cl
 100a4b8:	or     BYTE PTR [rax],cl
 100a4ba:	or     BYTE PTR [rax],cl
 100a4bc:	or     BYTE PTR [rax],cl
 100a4be:	or     BYTE PTR [rax],cl
 100a4c0:	or     BYTE PTR [rax],cl
 100a4c2:	or     BYTE PTR [rax],cl
 100a4c4:	or     BYTE PTR [rax],cl
 100a4c6:	or     BYTE PTR [rax],cl
 100a4c8:	or     BYTE PTR [rax],cl
 100a4ca:	or     BYTE PTR [rax],cl
 100a4cc:	or     BYTE PTR [rax],cl
 100a4ce:	or     BYTE PTR [rax],cl
 100a4d0:	(bad)  
 100a4d1:	cmp    eax,0x548fdf0b
 100a4d6:	sbb    edx,DWORD PTR [rax]
 100a4d8:	mov    fs,WORD PTR [rbp+0x8]
 100a4db:	add    BYTE PTR [rbx],ch
 100a4dd:	sub    edx,ecx
 100a4df:	sbb    DWORD PTR [rdx],esp
 100a4e1:	add    eax,0x21993
 100a4e6:	add    BYTE PTR [rax],al
 100a4e8:	mov    al,0x7
 100a4ea:	(bad)  
 100a4eb:	add    BYTE PTR [rcx],al
 100a4ed:	add    BYTE PTR [rax],al
 100a4ef:	add    BYTE PTR [rax+0x4000607],cl
 100a4f5:	add    BYTE PTR [rax],al
 100a4f7:	add    al,al
 100a4f9:	(bad)  
 100a4fa:	(bad)  
 100a4fb:	add    BYTE PTR [rax+0x0],al
 100a4fe:	add    BYTE PTR [rax],al
 100a500:	add    BYTE PTR [rax],al
 100a502:	add    BYTE PTR [rax],al
 100a504:	add    DWORD PTR [rax],eax
 100a506:	add    BYTE PTR [rax],al
 100a508:	adc    BYTE PTR [rsi+0x104],0x0
 100a50f:	add    BYTE PTR [rdx+0x53],dl
 100a512:	rex.R push rbx
 100a514:	cwde   
 100a515:	ja     0x100a518
 100a517:	js     0x100a49f
 100a519:	cmp    eax,0x99924a84
 100a51e:	lods   eax,DWORD PTR ds:[rsi]
 100a51f:	(bad)  
 100a522:	icebp  
 100a523:	(bad)  
 100a524:	add    DWORD PTR [rax],eax
 100a526:	add    BYTE PTR [rax],al
 100a528:	jae    0x100a59b
 100a52a:	ins    BYTE PTR es:[rdi],dx
 100a52b:	imul   esp,DWORD PTR fs:[rcx+0x67],0x6264702e
	...
 100a587:	add    BYTE PTR [rcx],al
 100a589:	add    BYTE PTR [rax],al
 100a58b:	add    BYTE PTR [rax+0xa5],bl
 100a591:	add    BYTE PTR [rax],al
 100a593:	add    BYTE PTR [rax],al
 100a595:	add    BYTE PTR [rax],al
 100a597:	add    BYTE PTR [rax+0xa5],ch
	...
 100a5a5:	add    BYTE PTR [rax],al
 100a5a7:	add    BYTE PTR [rax],cl
 100a5a9:	xor    DWORD PTR [rsi],eax
	...
 100a5b3:	add    bh,bh
 100a5b5:	(bad)  
 100a5b6:	(bad)  
 100a5b7:	inc    DWORD PTR [rax]
 100a5b9:	add    BYTE PTR [rax],al
 100a5bb:	add    BYTE PTR [rax+0x0],al
 100a5be:	add    BYTE PTR [rax],al
 100a5c0:	and    BYTE PTR [rbp+0x0],0x0
	...
 100a5cf:	add    BYTE PTR [rcx],al
	...
 100a5d9:	add    BYTE PTR [rax],al
 100a5db:	add    BYTE PTR [rax+0x31],al
 100a5de:	(bad)  
 100a5df:	add    al,bh
 100a5e1:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 100a5e2:	add    BYTE PTR [rax],al
 100a5e4:	shl    BYTE PTR [rbp+0x0],1
	...
 100a5fe:	add    BYTE PTR [rax],al
 100a600:	add    al,BYTE PTR [rax]
 100a602:	add    BYTE PTR [rax],al
 100a604:	adc    BYTE PTR [rsi+0x0],ah
 100a60a:	add    BYTE PTR [rax],al
 100a60c:	add    BYTE PTR [rax],al
 100a60e:	add    BYTE PTR [rax],al
 100a610:	sub    BYTE PTR [rsi-0x5a580000],ah
	...
 100a626:	add    BYTE PTR [rax],al
 100a628:	rex xor DWORD PTR [rsi],eax
 100a62b:	add    BYTE PTR [rcx],al
 100a62d:	add    BYTE PTR [rax],al
 100a62f:	add    BYTE PTR [rax],al
 100a631:	add    BYTE PTR [rax],al
 100a633:	add    bh,bh
 100a635:	(bad)  
 100a636:	(bad)  
 100a637:	inc    DWORD PTR [rax]
 100a639:	add    BYTE PTR [rax],al
 100a63b:	add    BYTE PTR [rax+0x0],al
 100a63e:	add    BYTE PTR [rax],al
 100a640:	clc    
 100a641:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
	...
 100a64e:	add    BYTE PTR [rax],al
 100a650:	add    DWORD PTR [rax],eax
	...
 100a65a:	add    BYTE PTR [rax],al
 100a65c:	test   al,0x31
 100a65e:	(bad)  
 100a65f:	add    BYTE PTR [rax-0x5a],bh
 100a662:	add    BYTE PTR [rax],al
 100a664:	push   rax
 100a665:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
	...
 100a67e:	add    BYTE PTR [rax],al
 100a680:	add    DWORD PTR [rax],eax
 100a682:	add    BYTE PTR [rax],al
 100a684:	nop
 100a685:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
	...
 100a68e:	add    BYTE PTR [rax],al
 100a690:	movabs al,ds:0xa6
 100a699:	add    BYTE PTR [rax],al
 100a69b:	add    BYTE PTR [rax],al
 100a69d:	add    BYTE PTR [rax],al
 100a69f:	add    BYTE PTR [rax+0x631],ch
 100a6a5:	add    BYTE PTR [rax],al
 100a6a7:	add    BYTE PTR [rax],al
 100a6a9:	add    BYTE PTR [rax],al
 100a6ab:	add    bh,bh
 100a6ad:	(bad)  
 100a6ae:	(bad)  
 100a6af:	inc    DWORD PTR [rax]
 100a6b1:	add    BYTE PTR [rax],al
 100a6b3:	add    BYTE PTR [rax+0x0],al
 100a6b6:	add    BYTE PTR [rax],al
 100a6b8:	js     0x100a660
	...
 100a6c6:	add    BYTE PTR [rax],al
 100a6c8:	add    DWORD PTR [rax],eax
	...
 100a6d2:	add    BYTE PTR [rax],al
 100a6d4:	shl    BYTE PTR [rcx],1
 100a6d6:	(bad)  
 100a6d7:	add    al,dh
 100a6d9:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 100a6da:	add    BYTE PTR [rax],al
 100a6dc:	enter  0xa6,0x0
	...
 100a6f8:	add    al,BYTE PTR [rax]
 100a6fa:	add    BYTE PTR [rax],al
 100a6fc:	or     BYTE PTR [rdi+0x0],ah
 100a702:	add    BYTE PTR [rax],al
 100a704:	add    BYTE PTR [rax],al
 100a706:	add    BYTE PTR [rax],al
 100a708:	and    BYTE PTR [rdi-0x5a580000],ah
	...
 100a71e:	add    BYTE PTR [rax],al
 100a720:	shl    BYTE PTR [rcx],1
 100a722:	(bad)  
 100a723:	add    BYTE PTR [rcx],al
 100a725:	add    BYTE PTR [rax],al
 100a727:	add    BYTE PTR [rax],al
 100a729:	add    BYTE PTR [rax],al
 100a72b:	add    bh,bh
 100a72d:	(bad)  
 100a72e:	(bad)  
 100a72f:	inc    DWORD PTR [rax]
 100a731:	add    BYTE PTR [rax],al
 100a733:	add    BYTE PTR [rax+0x0],al
 100a736:	add    BYTE PTR [rax],al
 100a738:	lock cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
	...
 100a746:	add    BYTE PTR [rax],al
 100a748:	add    DWORD PTR [rax],eax
	...
 100a752:	add    BYTE PTR [rax],al
 100a754:	adc    BYTE PTR [rdx],dh
 100a756:	(bad)  
 100a757:	add    BYTE PTR [rax-0x59],dh
 100a75a:	add    BYTE PTR [rax],al
 100a75c:	cmps   QWORD PTR ds:[rsi],QWORD PTR es:[rdi]
	...
 100a776:	add    BYTE PTR [rax],al
 100a778:	add    al,BYTE PTR [rax]
 100a77a:	add    BYTE PTR [rax],al
 100a77c:	mov    BYTE PTR [rdi+0x0],ah
 100a782:	add    BYTE PTR [rax],al
 100a784:	add    BYTE PTR [rax],al
 100a786:	add    BYTE PTR [rax],al
 100a788:	movabs al,ds:0xa5a80000a7
	...
 100a79d:	add    BYTE PTR [rax],al
 100a79f:	add    BYTE PTR [rax],dl
 100a7a1:	xor    al,BYTE PTR [rsi]
 100a7a3:	add    BYTE PTR [rcx],al
 100a7a5:	add    BYTE PTR [rax],al
 100a7a7:	add    BYTE PTR [rax],al
 100a7a9:	add    BYTE PTR [rax],al
 100a7ab:	add    bh,bh
 100a7ad:	(bad)  
 100a7ae:	(bad)  
 100a7af:	inc    DWORD PTR [rax]
 100a7b1:	add    BYTE PTR [rax],al
 100a7b3:	add    BYTE PTR [rax+0x0],al
 100a7b6:	add    BYTE PTR [rax],al
 100a7b8:	jo     0x100a761
	...
 100a7c6:	add    BYTE PTR [rax],al
 100a7c8:	add    DWORD PTR [rax],eax
	...
 100a7d2:	add    BYTE PTR [rax],al
 100a7d4:	xor    BYTE PTR [rdx],0x6
 100a7d7:	add    al,dh
 100a7d9:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 100a7da:	add    BYTE PTR [rax],al
 100a7dc:	enter  0xa7,0x0
	...
 100a7f8:	add    al,BYTE PTR [rax]
 100a7fa:	add    BYTE PTR [rax],al
 100a7fc:	or     BYTE PTR [rax+0x0],ch
 100a802:	add    BYTE PTR [rax],al
 100a804:	add    BYTE PTR [rax],al
 100a806:	add    BYTE PTR [rax],al
 100a808:	and    BYTE PTR [rax-0x59600000],ch
	...
 100a81e:	add    BYTE PTR [rax],al
 100a820:	xor    BYTE PTR [rdx],0x6
 100a823:	add    BYTE PTR [rcx],al
 100a825:	add    BYTE PTR [rax],al
 100a827:	add    BYTE PTR [rax],al
 100a829:	add    BYTE PTR [rax],al
 100a82b:	add    bh,bh
 100a82d:	(bad)  
 100a82e:	(bad)  
 100a82f:	inc    DWORD PTR [rax]
 100a831:	add    BYTE PTR [rax],al
 100a833:	add    BYTE PTR [rax+0x0],al
 100a836:	add    BYTE PTR [rax],al
 100a838:	lock cmps DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
	...
 100a846:	add    BYTE PTR [rax],al
 100a848:	add    DWORD PTR [rax],eax
	...
 100a852:	add    BYTE PTR [rax],al
 100a854:	loopne 0x100a88b
 100a856:	(bad)  
 100a857:	add    BYTE PTR [rax-0x58],dh
 100a85a:	add    BYTE PTR [rax],al
 100a85c:	rex.W test al,0x0
	...
 100a877:	add    BYTE PTR [rdx],al
 100a879:	add    BYTE PTR [rax],al
 100a87b:	add    BYTE PTR [rax+0xa8],cl
 100a881:	add    BYTE PTR [rax],al
 100a883:	add    BYTE PTR [rax],al
 100a885:	add    BYTE PTR [rax],al
 100a887:	add    BYTE PTR [rax-0x57ffff58],ah
 100a88d:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
	...
 100a89e:	add    BYTE PTR [rax],al
 100a8a0:	loopne 0x100a8d7
 100a8a2:	(bad)  
 100a8a3:	add    BYTE PTR [rcx],al
 100a8a5:	add    BYTE PTR [rax],al
 100a8a7:	add    BYTE PTR [rax],al
 100a8a9:	add    BYTE PTR [rax],al
 100a8ab:	add    bh,bh
 100a8ad:	(bad)  
 100a8ae:	(bad)  
 100a8af:	inc    DWORD PTR [rax]
 100a8b1:	add    BYTE PTR [rax],al
 100a8b3:	add    BYTE PTR [rax+0x0],al
 100a8b6:	add    BYTE PTR [rax],al
 100a8b8:	jo     0x100a862
	...
 100a8c6:	add    BYTE PTR [rax],al
 100a8c8:	add    DWORD PTR [rax],eax
	...
 100a8d2:	add    BYTE PTR [rax],al
 100a8d4:	rex.W
 100a8d5:	ss (bad) 
 100a8d7:	add    al,dh
 100a8d9:	test   al,0x0
 100a8db:	add    al,cl
 100a8dd:	test   al,0x0
	...
 100a8f7:	add    BYTE PTR [rcx],al
 100a8f9:	add    BYTE PTR [rax],al
 100a8fb:	add    BYTE PTR [rax],cl
 100a8fd:	test   eax,0x0
 100a902:	add    BYTE PTR [rax],al
 100a904:	add    BYTE PTR [rax],al
 100a906:	add    BYTE PTR [rax],al
 100a908:	sbb    BYTE PTR [rcx+0x0],ch
	...
 100a916:	add    BYTE PTR [rax],al
 100a918:	rex.W
 100a919:	ss (bad) 
	...
 100a923:	add    bh,bh
 100a925:	(bad)  
 100a926:	(bad)  
 100a927:	inc    DWORD PTR [rax]
 100a929:	add    BYTE PTR [rax],al
 100a92b:	add    BYTE PTR [rax+0x0],al
 100a92e:	add    BYTE PTR [rax],al
 100a930:	lock test al,0x0
	...
 100a93f:	add    BYTE PTR [rcx],al
	...
 100a949:	add    BYTE PTR [rax],al
 100a94b:	add    BYTE PTR [rax+0x36],ch
 100a94e:	(bad)  
 100a94f:	add    BYTE PTR [rax-0x57],ch
 100a952:	add    BYTE PTR [rax],al
 100a954:	rex test eax,0x0
	...
 100a96e:	add    BYTE PTR [rax],al
 100a970:	add    al,BYTE PTR [rax]
 100a972:	add    BYTE PTR [rax],al
 100a974:	sub    BYTE PTR [rcx+0x0],0x0
 100a97b:	add    BYTE PTR [rax],al
 100a97d:	add    BYTE PTR [rax],al
 100a97f:	add    BYTE PTR [rax-0x57ffff57],bl
 100a985:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
	...
 100a996:	add    BYTE PTR [rax],al
 100a998:	push   0x1000636
 100a99d:	add    BYTE PTR [rax],al
 100a99f:	add    BYTE PTR [rax],al
 100a9a1:	add    BYTE PTR [rax],al
 100a9a3:	add    bh,bh
 100a9a5:	(bad)  
 100a9a6:	(bad)  
 100a9a7:	inc    DWORD PTR [rax]
 100a9a9:	add    BYTE PTR [rax],al
 100a9ab:	add    BYTE PTR [rax+0x0],al
 100a9ae:	add    BYTE PTR [rax],al
 100a9b0:	push   0xa9
	...
 100a9bd:	add    BYTE PTR [rax],al
 100a9bf:	add    BYTE PTR [rcx],al
	...
 100a9c9:	add    BYTE PTR [rax],al
 100a9cb:	add    BYTE PTR [rax-0x17fff9ca],dl
 100a9d1:	test   eax,0xa9c00000
	...
 100a9ee:	add    BYTE PTR [rax],al
 100a9f0:	add    al,BYTE PTR [rax]
 100a9f2:	add    BYTE PTR [rax],al
 100a9f4:	add    BYTE PTR [rdx+0x0],ch
 100a9fa:	add    BYTE PTR [rax],al
 100a9fc:	add    BYTE PTR [rax],al
 100a9fe:	add    BYTE PTR [rax],al
 100aa00:	sbb    BYTE PTR [rdx-0x55c00000],ch
	...
 100aa16:	add    BYTE PTR [rax],al
 100aa18:	nop
 100aa19:	ss (bad) 
 100aa1b:	add    BYTE PTR [rcx],al
 100aa1d:	add    BYTE PTR [rax],al
 100aa1f:	add    BYTE PTR [rax],al
 100aa21:	add    BYTE PTR [rax],al
 100aa23:	add    bh,bh
 100aa25:	(bad)  
 100aa26:	(bad)  
 100aa27:	inc    DWORD PTR [rax]
 100aa29:	add    BYTE PTR [rax],al
 100aa2b:	add    BYTE PTR [rax+0x0],al
 100aa2e:	add    BYTE PTR [rax],al
 100aa30:	call   0x100aade
	...
 100aa3d:	add    BYTE PTR [rax],al
 100aa3f:	add    BYTE PTR [rax+0x36],cl
 100aa42:	(bad)  
	...
 100aa4b:	add    BYTE PTR [rax],cl
 100aa4d:	add    BYTE PTR [rax],al
 100aa4f:	add    BYTE PTR [rax+rax*1],al
 100aa52:	add    BYTE PTR [rax],al
 100aa54:	push   rax
 100aa55:	add    BYTE PTR [rax],al
 100aa57:	add    al,dh
 100aa59:	test   al,0x0
	...
 100aa67:	add    BYTE PTR [rcx],al
 100aa69:	add    BYTE PTR [rax],al
 100aa6b:	add    BYTE PTR [rax],dl
 100aa6d:	add    BYTE PTR [rax],al
 100aa6f:	add    BYTE PTR [rax],al
 100aa71:	add    BYTE PTR [rax],al
 100aa73:	add    BYTE PTR [rax-0x17fff9ca],dl
 100aa79:	test   eax,0xaa680000
	...
 100aa8e:	add    BYTE PTR [rax],al
 100aa90:	add    DWORD PTR [rax],eax
	...
 100aa9a:	add    BYTE PTR [rax],al
 100aa9c:	shl    BYTE PTR [rsi],0x6
 100aa9f:	add    BYTE PTR [rax-0x6fffff56],bh
 100aaa5:	stos   BYTE PTR es:[rdi],al
	...
 100aabe:	add    BYTE PTR [rax],al
 100aac0:	add    al,BYTE PTR [rax]
 100aac2:	add    BYTE PTR [rax],al
 100aac4:	shr    BYTE PTR [rdx+0x0],1
 100aaca:	add    BYTE PTR [rax],al
 100aacc:	add    BYTE PTR [rax],al
 100aace:	add    BYTE PTR [rax],al
 100aad0:	call   0x1900ab7f
 100aad5:	test   eax,0x0
	...
 100aae6:	add    BYTE PTR [rax],al
 100aae8:	shl    BYTE PTR [rsi],0x6
 100aaeb:	add    BYTE PTR [rcx],al
 100aaed:	add    BYTE PTR [rax],al
 100aaef:	add    BYTE PTR [rax],al
 100aaf1:	add    BYTE PTR [rax],al
 100aaf3:	add    bh,bh
 100aaf5:	(bad)  
 100aaf6:	(bad)  
 100aaf7:	inc    DWORD PTR [rax]
 100aaf9:	add    BYTE PTR [rax],al
 100aafb:	add    BYTE PTR [rax+0x0],al
 100aafe:	add    BYTE PTR [rax],al
 100ab00:	mov    eax,0xaa
	...
 100ab0d:	add    BYTE PTR [rax],al
 100ab0f:	add    BYTE PTR [rcx],al
	...
 100ab19:	add    BYTE PTR [rax],al
 100ab1b:	add    al,ah
 100ab1d:	ss (bad) 
 100ab1f:	add    BYTE PTR [rax],bh
 100ab21:	stos   DWORD PTR es:[rdi],eax
 100ab22:	add    BYTE PTR [rax],al
 100ab24:	adc    BYTE PTR [rbx+0x0],ch
	...
 100ab3a:	add    BYTE PTR [rax],al
 100ab3c:	add    eax,DWORD PTR [rax]
 100ab3e:	add    BYTE PTR [rax],al
 100ab40:	add    al,0x0
 100ab42:	add    BYTE PTR [rax],al
 100ab44:	push   rax
 100ab45:	stos   DWORD PTR es:[rdi],eax
	...
 100ab4e:	add    BYTE PTR [rax],al
 100ab50:	js     0x100aafd
 100ab52:	add    BYTE PTR [rax],al
 100ab54:	stos   BYTE PTR es:[rdi],al
 100ab56:	add    BYTE PTR [rax],al
 100ab58:	sbb    BYTE PTR [rdx-0x55c00000],ch
	...
 100ab76:	add    BYTE PTR [rax],al
 100ab78:	loopne 0x100abb0
 100ab7a:	(bad)  
 100ab7b:	add    BYTE PTR [rbx],al
 100ab7d:	add    BYTE PTR [rax],al
 100ab7f:	add    BYTE PTR [rax],al
 100ab81:	add    BYTE PTR [rax],al
 100ab83:	add    bh,bh
 100ab85:	(bad)  
 100ab86:	(bad)  
 100ab87:	inc    DWORD PTR [rax]
 100ab89:	add    BYTE PTR [rax],al
 100ab8b:	add    BYTE PTR [rax+0x0],al
 100ab8e:	add    BYTE PTR [rax],al
 100ab90:	cmp    BYTE PTR [rbx+0x0],ch
	...
 100ab9e:	add    BYTE PTR [rax],al
 100aba0:	add    DWORD PTR [rax],eax
 100aba2:	add    BYTE PTR [rax],al
 100aba4:	xor    BYTE PTR [rcx],al
 100aba6:	add    BYTE PTR [rax],al
 100aba8:	add    al,0x0
 100abaa:	add    BYTE PTR [rax],al
 100abac:	loopne 0x100abe4
 100abae:	(bad)  
 100abaf:	add    BYTE PTR [rax],bh
 100abb1:	stos   DWORD PTR es:[rdi],eax
 100abb2:	add    BYTE PTR [rax],al
 100abb4:	movabs al,ds:0xab
	...
 100abc5:	add    BYTE PTR [rax],al
 100abc7:	add    BYTE PTR [rcx],al
	...
 100abd1:	add    BYTE PTR [rax],al
 100abd3:	add    BYTE PTR [rax],dl
 100abd5:	(bad)  
 100abd6:	(bad)  
 100abd7:	add    al,dh
 100abd9:	stos   DWORD PTR es:[rdi],eax
 100abda:	add    BYTE PTR [rax],al
 100abdc:	enter  0xab,0x0
	...
 100abf8:	add    al,BYTE PTR [rax]
 100abfa:	add    BYTE PTR [rax],al
 100abfc:	or     BYTE PTR [rax+rax*1+0x0],ch
 100ac03:	add    BYTE PTR [rax],al
 100ac05:	add    BYTE PTR [rax],al
 100ac07:	add    BYTE PTR [rax],ah
 100ac09:	lods   al,BYTE PTR ds:[rsi]
 100ac0a:	add    BYTE PTR [rax],al
 100ac0c:	test   al,0xa5
	...
 100ac1e:	add    BYTE PTR [rax],al
 100ac20:	adc    BYTE PTR [rdi],dh
 100ac22:	(bad)  
 100ac23:	add    BYTE PTR [rcx],al
 100ac25:	add    BYTE PTR [rax],al
 100ac27:	add    BYTE PTR [rax],al
 100ac29:	add    BYTE PTR [rax],al
 100ac2b:	add    bh,bh
 100ac2d:	(bad)  
 100ac2e:	(bad)  
 100ac2f:	inc    DWORD PTR [rax]
 100ac31:	add    BYTE PTR [rax],al
 100ac33:	add    BYTE PTR [rax+0x0],al
 100ac36:	add    BYTE PTR [rax],al
 100ac38:	lock stos DWORD PTR es:[rdi],eax
	...
 100ac46:	add    BYTE PTR [rax],al
 100ac48:	add    DWORD PTR [rax],eax
	...
 100ac52:	add    BYTE PTR [rax],al
 100ac54:	rex.W (bad) 
 100ac56:	(bad)  
 100ac57:	add    BYTE PTR [rax-0x54],dh
 100ac5a:	add    BYTE PTR [rax],al
 100ac5c:	rex.W lods al,BYTE PTR ds:[rsi]
	...
 100ac76:	add    BYTE PTR [rax],al
 100ac78:	add    al,BYTE PTR [rax]
 100ac7a:	add    BYTE PTR [rax],al
 100ac7c:	mov    BYTE PTR [rax+rax*1+0x0],ch
 100ac83:	add    BYTE PTR [rax],al
 100ac85:	add    BYTE PTR [rax],al
 100ac87:	add    BYTE PTR [rax-0x57ffff54],ah
 100ac8d:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
	...
 100ac9e:	add    BYTE PTR [rax],al
 100aca0:	rex.W (bad) 
 100aca2:	(bad)  
 100aca3:	add    BYTE PTR [rcx],al
 100aca5:	add    BYTE PTR [rax],al
 100aca7:	add    BYTE PTR [rax],al
 100aca9:	add    BYTE PTR [rax],al
 100acab:	add    bh,bh
 100acad:	(bad)  
 100acae:	(bad)  
 100acaf:	inc    DWORD PTR [rax]
 100acb1:	add    BYTE PTR [rax],al
 100acb3:	add    BYTE PTR [rax+0x0],al
 100acb6:	add    BYTE PTR [rax],al
 100acb8:	jo     0x100ac66
	...
 100acc6:	add    BYTE PTR [rax],al
 100acc8:	add    DWORD PTR [rax],eax
	...
 100acd2:	add    BYTE PTR [rax],al
 100acd4:	mov    al,0x37
 100acd6:	(bad)  
 100acd7:	add    al,dh
 100acd9:	lods   al,BYTE PTR ds:[rsi]
 100acda:	add    BYTE PTR [rax],al
 100acdc:	enter  0xac,0x0
	...
 100acf8:	add    al,BYTE PTR [rax]
 100acfa:	add    BYTE PTR [rax],al
 100acfc:	or     BYTE PTR [rbp+0x0],ch
 100ad02:	add    BYTE PTR [rax],al
 100ad04:	add    BYTE PTR [rax],al
 100ad06:	add    BYTE PTR [rax],al
 100ad08:	and    BYTE PTR [rbp-0x59600000],ch
	...
 100ad1e:	add    BYTE PTR [rax],al
 100ad20:	mov    al,0x37
 100ad22:	(bad)  
 100ad23:	add    BYTE PTR [rcx],al
 100ad25:	add    BYTE PTR [rax],al
 100ad27:	add    BYTE PTR [rax],al
 100ad29:	add    BYTE PTR [rax],al
 100ad2b:	add    bh,bh
 100ad2d:	(bad)  
 100ad2e:	(bad)  
 100ad2f:	inc    DWORD PTR [rax]
 100ad31:	add    BYTE PTR [rax],al
 100ad33:	add    BYTE PTR [rax+0x0],al
 100ad36:	add    BYTE PTR [rax],al
 100ad38:	lock lods al,BYTE PTR ds:[rsi]
	...
 100ad46:	add    BYTE PTR [rax],al
 100ad48:	add    DWORD PTR [rax],eax
	...
 100ad52:	add    BYTE PTR [rax],al
 100ad54:	fdiv   DWORD PTR [rdi]
 100ad56:	(bad)  
 100ad57:	add    BYTE PTR [rax-0x53],dh
 100ad5a:	add    BYTE PTR [rax],al
 100ad5c:	lods   rax,QWORD PTR ds:[rsi]
	...
 100ad76:	add    BYTE PTR [rax],al
 100ad78:	add    al,BYTE PTR [rax]
 100ad7a:	add    BYTE PTR [rax],al
 100ad7c:	mov    BYTE PTR [rbp+0x0],ch
 100ad82:	add    BYTE PTR [rax],al
 100ad84:	add    BYTE PTR [rax],al
 100ad86:	add    BYTE PTR [rax],al
 100ad88:	movabs al,ds:0xa5a80000ad
	...
 100ad9d:	add    BYTE PTR [rax],al
 100ad9f:	add    al,bl
 100ada1:	(bad)  
 100ada2:	(bad)  
 100ada3:	add    BYTE PTR [rcx],al
 100ada5:	add    BYTE PTR [rax],al
 100ada7:	add    BYTE PTR [rax],al
 100ada9:	add    BYTE PTR [rax],al
 100adab:	add    bh,bh
 100adad:	(bad)  
 100adae:	(bad)  
 100adaf:	inc    DWORD PTR [rax]
 100adb1:	add    BYTE PTR [rax],al
 100adb3:	add    BYTE PTR [rax+0x0],al
 100adb6:	add    BYTE PTR [rax],al
 100adb8:	jo     0x100ad67
	...
 100adc6:	add    BYTE PTR [rax],al
 100adc8:	add    DWORD PTR [rax],eax
	...
 100add2:	add    BYTE PTR [rax],al
 100add4:	adc    BYTE PTR [rax],bh
 100add6:	(bad)  
 100add7:	add    al,dh
 100add9:	lods   eax,DWORD PTR ds:[rsi]
 100adda:	add    BYTE PTR [rax],al
 100addc:	enter  0xad,0x0
	...
 100adf8:	add    al,BYTE PTR [rax]
 100adfa:	add    BYTE PTR [rax],al
 100adfc:	or     BYTE PTR [rsi+0x0],ch
 100ae02:	add    BYTE PTR [rax],al
 100ae04:	add    BYTE PTR [rax],al
 100ae06:	add    BYTE PTR [rax],al
 100ae08:	and    BYTE PTR [rsi-0x5a580000],ch
	...
 100ae1e:	add    BYTE PTR [rax],al
 100ae20:	adc    BYTE PTR [rax],bh
 100ae22:	(bad)  
 100ae23:	add    BYTE PTR [rcx],al
 100ae25:	add    BYTE PTR [rax],al
 100ae27:	add    BYTE PTR [rax],al
 100ae29:	add    BYTE PTR [rax],al
 100ae2b:	add    bh,bh
 100ae2d:	(bad)  
 100ae2e:	(bad)  
 100ae2f:	inc    DWORD PTR [rax]
 100ae31:	add    BYTE PTR [rax],al
 100ae33:	add    BYTE PTR [rax+0x0],al
 100ae36:	add    BYTE PTR [rax],al
 100ae38:	lock lods eax,DWORD PTR ds:[rsi]
	...
 100ae46:	add    BYTE PTR [rax],al
 100ae48:	add    DWORD PTR [rax],eax
	...
 100ae52:	add    BYTE PTR [rax],al
 100ae54:	push   rax
 100ae55:	cmp    BYTE PTR [rsi],al
 100ae57:	add    BYTE PTR [rax-0x52],dh
 100ae5a:	add    BYTE PTR [rax],al
 100ae5c:	rex.W scas al,BYTE PTR es:[rdi]
	...
 100ae76:	add    BYTE PTR [rax],al
 100ae78:	add    DWORD PTR [rax],eax
 100ae7a:	add    BYTE PTR [rax],al
 100ae7c:	mov    BYTE PTR [rsi+0x0],ch
 100ae82:	add    BYTE PTR [rax],al
 100ae84:	add    BYTE PTR [rax],al
 100ae86:	add    BYTE PTR [rax],al
 100ae88:	cwde   
 100ae89:	scas   al,BYTE PTR es:[rdi]
	...
 100ae96:	add    BYTE PTR [rax],al
 100ae98:	push   rax
 100ae99:	cmp    BYTE PTR [rsi],al
	...
 100aea3:	add    bh,bh
 100aea5:	(bad)  
 100aea6:	(bad)  
 100aea7:	inc    DWORD PTR [rax]
 100aea9:	add    BYTE PTR [rax],al
 100aeab:	add    BYTE PTR [rax+0x0],al
 100aeae:	add    BYTE PTR [rax],al
 100aeb0:	jo     0x100ae60
	...
 100aeee:	add    BYTE PTR [rax],al
 100aef0:	ret    0x0
 100aef3:	int3   
 100aef4:	int3   
 100aef5:	int3   
 100aef6:	int3   
 100aef7:	int3   
 100aef8:	int3   
 100aef9:	int3   
 100aefa:	int3   
 100aefb:	int3   
 100aefc:	int3   
 100aefd:	int3   
 100aefe:	int3   
 100aeff:	int3   
 100af00:	ret    0x0
 100af03:	int3   
 100af04:	int3   
 100af05:	int3   
 100af06:	int3   
 100af07:	int3   
 100af08:	int3   
 100af09:	int3   
 100af0a:	int3   
 100af0b:	int3   
 100af0c:	int3   
 100af0d:	int3   
 100af0e:	int3   
 100af0f:	int3   
 100af10:	mov    QWORD PTR [rsp+0x8],rcx
 100af15:	push   rsi
 100af16:	push   rdi
 100af17:	push   r14
 100af19:	sub    rsp,0x40
 100af1d:	mov    QWORD PTR [rsp+0x38],0xfffffffffffffffe
 100af26:	mov    QWORD PTR [rsp+0x68],rbx
 100af2b:	mov    QWORD PTR [rsp+0x70],rbp
 100af30:	mov    rbp,r8
 100af33:	mov    rsi,rdx
 100af36:	mov    r14,rcx
 100af39:	mov    DWORD PTR [rsp+0x30],0x0
 100af41:	mov    rcx,rdx
 100af44:	call   QWORD PTR [rip+0xffffffffffff6b1e]        # 0x1001a68
 100af4a:	mov    rdx,rax
 100af4d:	mov    rcx,r14
 100af50:	call   QWORD PTR [rip+0xffffffffffff6b62]        # 0x1001ab8
 100af56:	mov    DWORD PTR [rsp+0x30],0x1
 100af5e:	mov    rcx,rbp
 100af61:	call   QWORD PTR [rip+0xffffffffffff6b69]        # 0x1001ad0
 100af67:	mov    edi,eax
 100af69:	mov    rcx,rsi
 100af6c:	call   QWORD PTR [rip+0xffffffffffff6b7e]        # 0x1001af0
 100af72:	mov    ebx,eax
 100af74:	mov    rcx,rsi
 100af77:	call   QWORD PTR [rip+0xffffffffffff6b6b]        # 0x1001ae8
 100af7d:	mov    rdx,rax
 100af80:	mov    DWORD PTR [rsp+0x20],edi
 100af84:	mov    r9,rbp
 100af87:	mov    r8d,ebx
 100af8a:	mov    rcx,r14
 100af8d:	call   QWORD PTR [rip+0xffffffffffff6b35]        # 0x1001ac8
 100af93:	mov    rax,r14
 100af96:	mov    rbx,QWORD PTR [rsp+0x68]
 100af9b:	mov    rbp,QWORD PTR [rsp+0x70]
 100afa0:	add    rsp,0x40
 100afa4:	pop    r14
 100afa6:	pop    rdi
 100afa7:	pop    rsi
 100afa8:	ret    
 100afa9:	int3   
 100afaa:	int3   
 100afab:	int3   
 100afac:	int3   
 100afad:	int3   
 100afae:	int3   
 100afaf:	int3   
 100afb0:	rex push rbx
 100afb2:	push   rbp
 100afb3:	push   rsi
 100afb4:	push   rdi
 100afb5:	push   r12
 100afb7:	push   r13
 100afb9:	push   r14
 100afbb:	push   r15
 100afbd:	sub    rsp,0x8a8
 100afc4:	mov    QWORD PTR [rsp+0x80],0xfffffffffffffffe
 100afd0:	mov    rax,QWORD PTR [rip+0x58899]        # 0x1063870
 100afd7:	xor    rax,rsp
 100afda:	mov    QWORD PTR [rsp+0x890],rax
 100afe2:	mov    r12,r9
 100afe5:	mov    rsi,r8
 100afe8:	mov    rbx,rdx
 100afeb:	mov    r14,rcx
 100afee:	mov    QWORD PTR [rsp+0x88],rcx
 100aff6:	mov    r15,QWORD PTR [rsp+0x910]
 100affe:	add    rcx,0x8
 100b002:	call   QWORD PTR [rip+0xffffffffffff6ab8]        # 0x1001ac0
 100b008:	nop
 100b009:	lea    rax,[rip+0xffffffffffff6e10]        # 0x1001e20
 100b010:	mov    QWORD PTR [r14+0x10],rax
 100b014:	xor    r13d,r13d
 100b017:	mov    QWORD PTR [r14+0x28],r13
 100b01b:	mov    QWORD PTR [r14+0x30],r13
 100b01f:	mov    QWORD PTR [r14+0x20],r13
 100b023:	mov    QWORD PTR [r14+0x18],r13
 100b027:	mov    QWORD PTR [r14+0x38],r13
 100b02b:	mov    QWORD PTR [r14+0x40],0xa
 100b033:	lea    rcx,[rsp+0x78]
 100b038:	call   QWORD PTR [rip+0xffffffffffff6a82]        # 0x1001ac0
 100b03e:	nop
 100b03f:	mov    BYTE PTR [r14],r13b
 100b042:	mov    QWORD PTR [r14+0x48],r13
 100b046:	mov    rdx,rsi
 100b049:	lea    rcx,[rip+0x588a0]        # 0x10638f0
 100b050:	call   QWORD PTR [rip+0xffffffffffff6a42]        # 0x1001a98
 100b056:	mov    QWORD PTR [rip+0x5888b],rbx        # 0x10638e8
 100b05d:	movzx  eax,BYTE PTR [rsp+0x928]
 100b065:	mov    BYTE PTR [rip+0x58095],al        # 0x1063100
 100b06b:	test   al,al
 100b06d:	je     0x100b11c
 100b073:	mov    rdx,rsi
 100b076:	lea    rcx,[rip+0x5887b]        # 0x10638f8
 100b07d:	call   QWORD PTR [rip+0xffffffffffff6a15]        # 0x1001a98
 100b083:	lea    rdx,[rip+0xffffffffffff6e6e]        # 0x1001ef8
 100b08a:	lea    rcx,[rip+0x58867]        # 0x10638f8
 100b091:	call   QWORD PTR [rip+0xffffffffffff69f9]        # 0x1001a90
 100b097:	lea    rcx,[rip+0x5885a]        # 0x10638f8
 100b09e:	call   QWORD PTR [rip+0xffffffffffff6a44]        # 0x1001ae8
 100b0a4:	mov    rcx,rax
 100b0a7:	xor    edx,edx
 100b0a9:	call   QWORD PTR [rip+0xffffffffffff6121]        # 0x10011d0
 100b0af:	lea    rcx,[rip+0x58842]        # 0x10638f8
 100b0b6:	call   QWORD PTR [rip+0xffffffffffff6a2c]        # 0x1001ae8
 100b0bc:	mov    rcx,rax
 100b0bf:	call   QWORD PTR [rip+0xffffffffffff612b]        # 0x10011f0
 100b0c5:	cmp    eax,0xffffffff
 100b0c8:	je     0x100b115
 100b0ca:	and    eax,0x10
 100b0cd:	test   al,al
 100b0cf:	je     0x100b115
 100b0d1:	cmp    BYTE PTR [rip+0x58028],r13b        # 0x1063100
 100b0d8:	je     0x100b11c
 100b0da:	lea    r8,[rip+0xffffffffffff6e27]        # 0x1001f08
 100b0e1:	lea    rdx,[rip+0x58810]        # 0x10638f8
 100b0e8:	lea    rcx,[rsp+0x70]
 100b0ed:	call   0x100af10
 100b0f2:	nop
 100b0f3:	mov    rcx,rax
 100b0f6:	call   QWORD PTR [rip+0xffffffffffff69ec]        # 0x1001ae8
 100b0fc:	mov    rcx,rax
 100b0ff:	xor    edx,edx
 100b101:	call   QWORD PTR [rip+0xffffffffffff60c9]        # 0x10011d0
 100b107:	nop
 100b108:	lea    rcx,[rsp+0x70]
 100b10d:	call   QWORD PTR [rip+0xffffffffffff6995]        # 0x1001aa8
 100b113:	jmp    0x100b11c
 100b115:	mov    BYTE PTR [rip+0x57fe4],0x0        # 0x1063100
 100b11c:	mov    rdx,rsi
 100b11f:	lea    rcx,[rip+0x587da]        # 0x1063900
 100b126:	call   QWORD PTR [rip+0xffffffffffff696c]        # 0x1001a98
 100b12c:	lea    rdx,[rip+0xffffffffffff6ded]        # 0x1001f20
 100b133:	lea    rcx,[rip+0x587c6]        # 0x1063900
 100b13a:	call   QWORD PTR [rip+0xffffffffffff6950]        # 0x1001a90
 100b140:	lea    rcx,[rip+0x587b9]        # 0x1063900
 100b147:	call   QWORD PTR [rip+0xffffffffffff699b]        # 0x1001ae8
 100b14d:	mov    rcx,rax
 100b150:	xor    edx,edx
 100b152:	call   QWORD PTR [rip+0xffffffffffff6078]        # 0x10011d0
 100b158:	lea    rcx,[rip+0x587a1]        # 0x1063900
 100b15f:	call   QWORD PTR [rip+0xffffffffffff6983]        # 0x1001ae8
 100b165:	mov    rcx,rax
 100b168:	call   QWORD PTR [rip+0xffffffffffff6082]        # 0x10011f0
 100b16e:	cmp    eax,0xffffffff
 100b171:	je     0x100b17a
 100b173:	and    eax,0x10
 100b176:	test   al,al
 100b178:	jne    0x100b1aa
 100b17a:	lea    rdx,[rsp+0x90]
 100b182:	mov    ecx,0x104
 100b187:	call   QWORD PTR [rip+0xffffffffffff613b]        # 0x10012c8
 100b18d:	test   eax,eax
 100b18f:	je     0x100b434
 100b195:	lea    rdx,[rsp+0x90]
 100b19d:	lea    rcx,[rip+0x5875c]        # 0x1063900
 100b1a4:	call   QWORD PTR [rip+0xffffffffffff68ee]        # 0x1001a98
 100b1aa:	mov    rdx,r12
 100b1ad:	lea    rcx,[r14+0x8]
 100b1b1:	call   QWORD PTR [rip+0xffffffffffff68e1]        # 0x1001a98
 100b1b7:	mov    rbx,QWORD PTR [r14+0x18]
 100b1bb:	test   rbx,rbx
 100b1be:	je     0x100b1d2
 100b1c0:	lea    rcx,[rbx+0x10]
 100b1c4:	call   QWORD PTR [rip+0xffffffffffff68de]        # 0x1001aa8
 100b1ca:	mov    rbx,QWORD PTR [rbx]
 100b1cd:	test   rbx,rbx
 100b1d0:	jne    0x100b1c0
 100b1d2:	mov    QWORD PTR [r14+0x28],r13
 100b1d6:	mov    QWORD PTR [r14+0x30],r13
 100b1da:	mov    QWORD PTR [r14+0x20],r13
 100b1de:	mov    QWORD PTR [r14+0x18],r13
 100b1e2:	mov    rcx,QWORD PTR [r14+0x38]
 100b1e6:	call   0x103f9ae
 100b1eb:	mov    QWORD PTR [r14+0x38],r13
 100b1ef:	mov    rsi,QWORD PTR [r15+0x8]
 100b1f3:	test   rsi,rsi
 100b1f6:	je     0x100b23f
 100b1f8:	nop    DWORD PTR [rax+rax*1+0x0]
 100b200:	xor    r8d,r8d
 100b203:	mov    rdx,QWORD PTR [r14+0x20]
 100b207:	lea    rcx,[r14+0x10]
 100b20b:	call   0x100c430
 100b210:	mov    rbx,rax
 100b213:	lea    rdx,[rsi+0x10]
 100b217:	lea    rcx,[rax+0x10]
 100b21b:	call   QWORD PTR [rip+0xffffffffffff687f]        # 0x1001aa0
 100b221:	mov    r11,QWORD PTR [r14+0x20]
 100b225:	test   r11,r11
 100b228:	je     0x100b22f
 100b22a:	mov    QWORD PTR [r11],rbx
 100b22d:	jmp    0x100b233
 100b22f:	mov    QWORD PTR [r14+0x18],rbx
 100b233:	mov    QWORD PTR [r14+0x20],rbx
 100b237:	mov    rsi,QWORD PTR [rsi]
 100b23a:	test   rsi,rsi
 100b23d:	jne    0x100b200
 100b23f:	movzx  eax,BYTE PTR [rsp+0x918]
 100b247:	mov    BYTE PTR [r14+0x1],al
 100b24b:	movzx  eax,BYTE PTR [rsp+0x920]
 100b253:	mov    BYTE PTR [r14+0x2],al
 100b257:	cmp    QWORD PTR [r14+0x48],0x0
 100b25c:	jne    0x100b3ac
 100b262:	lea    rdi,[r14+0x60]
 100b266:	xor    eax,eax
 100b268:	mov    QWORD PTR [rdi],rax
 100b26b:	mov    QWORD PTR [rdi+0x8],rax
 100b26f:	mov    QWORD PTR [rdi+0x10],rax
 100b273:	mov    QWORD PTR [rdi+0x18],rax
 100b277:	mov    QWORD PTR [r14+0x78],r14
 100b27b:	lea    rbx,[r14+0x80]
 100b282:	mov    rdx,rbx
 100b285:	mov    rcx,r14
 100b288:	call   0x100bf20
 100b28d:	mov    QWORD PTR [rsp+0x60],rdi
 100b292:	mov    QWORD PTR [rsp+0x58],rbx
 100b297:	lea    rax,[rip+0x1772]        # 0x100ca10
 100b29e:	mov    QWORD PTR [rsp+0x50],rax
 100b2a3:	lea    rax,[rip+0x1706]        # 0x100c9b0
 100b2aa:	mov    QWORD PTR [rsp+0x48],rax
 100b2af:	lea    rax,[rip+0x16ba]        # 0x100c970
 100b2b6:	mov    QWORD PTR [rsp+0x40],rax
 100b2bb:	lea    rax,[rip+0x166e]        # 0x100c930
 100b2c2:	mov    QWORD PTR [rsp+0x38],rax
 100b2c7:	lea    rax,[rip+0x1612]        # 0x100c8e0
 100b2ce:	mov    QWORD PTR [rsp+0x30],rax
 100b2d3:	lea    rax,[rip+0x15b6]        # 0x100c890
 100b2da:	mov    QWORD PTR [rsp+0x28],rax
 100b2df:	lea    rax,[rip+0x14ba]        # 0x100c7a0
 100b2e6:	mov    QWORD PTR [rsp+0x20],rax
 100b2eb:	lea    r9,[rip+0x147e]        # 0x100c770
 100b2f2:	lea    r8,[rip+0x1447]        # 0x100c740
 100b2f9:	lea    rdx,[rip+0x16f0]        # 0x100c9f0
 100b300:	lea    rcx,[r14+0x50]
 100b304:	call   0x1040a28
 100b309:	mov    QWORD PTR [r14+0x48],rax
 100b30d:	test   rax,rax
 100b310:	jne    0x100b3ac
 100b316:	cmp    BYTE PTR [r14+0x2],al
 100b31a:	jne    0x100b3aa
 100b320:	mov    edx,0xc000c3cc
 100b325:	lea    rcx,[rsp+0x70]
 100b32a:	call   0x10132d0
 100b32f:	mov    rdi,rax
 100b332:	lea    rdx,[rsp+0x90]
 100b33a:	mov    ecx,DWORD PTR [r14+0x50]
 100b33e:	call   0x100cec0
 100b343:	mov    rbx,rax
 100b346:	mov    rcx,rdi
 100b349:	call   QWORD PTR [rip+0xffffffffffff6799]        # 0x1001ae8
 100b34f:	mov    rdx,rax
 100b352:	mov    r9,rbx
 100b355:	mov    r8d,DWORD PTR [r14+0x50]
 100b359:	lea    rcx,[rsp+0x78]
 100b35e:	call   QWORD PTR [rip+0xffffffffffff66dc]        # 0x1001a40
 100b364:	nop
 100b365:	lea    rcx,[rsp+0x70]
 100b36a:	call   QWORD PTR [rip+0xffffffffffff6738]        # 0x1001aa8
 100b370:	mov    r11,QWORD PTR [rip+0x58571]        # 0x10638e8
 100b377:	mov    rbx,QWORD PTR [r11]
 100b37a:	lea    rcx,[rsp+0x78]
 100b37f:	call   QWORD PTR [rip+0xffffffffffff6763]        # 0x1001ae8
 100b385:	mov    r8,rax
 100b388:	mov    BYTE PTR [rsp+0x30],0x1
 100b38d:	mov    BYTE PTR [rsp+0x28],0x1
 100b392:	mov    DWORD PTR [rsp+0x20],r13d
 100b397:	xor    r9d,r9d
 100b39a:	mov    edx,0xc000c3cc
 100b39f:	mov    rcx,QWORD PTR [rip+0x58542]        # 0x10638e8
 100b3a6:	call   QWORD PTR [rbx+0x8]
 100b3a9:	nop
 100b3aa:	jmp    0x100b423
 100b3ac:	cmp    BYTE PTR [r14+0x2],0x0
 100b3b1:	jne    0x100b423
 100b3b3:	mov    edx,0x4000c3cd
 100b3b8:	lea    rcx,[rsp+0x70]
 100b3bd:	call   0x10132d0
 100b3c2:	nop
 100b3c3:	mov    rcx,rax
 100b3c6:	call   QWORD PTR [rip+0xffffffffffff671c]        # 0x1001ae8
 100b3cc:	mov    rdx,rax
 100b3cf:	mov    r8,r12
 100b3d2:	lea    rcx,[rsp+0x78]
 100b3d7:	call   QWORD PTR [rip+0xffffffffffff6663]        # 0x1001a40
 100b3dd:	nop
 100b3de:	lea    rcx,[rsp+0x70]
 100b3e3:	call   QWORD PTR [rip+0xffffffffffff66bf]        # 0x1001aa8
 100b3e9:	mov    r11,QWORD PTR [rip+0x584f8]        # 0x10638e8
 100b3f0:	mov    rbx,QWORD PTR [r11]
 100b3f3:	lea    rcx,[rsp+0x78]
 100b3f8:	call   QWORD PTR [rip+0xffffffffffff66ea]        # 0x1001ae8
 100b3fe:	mov    r8,rax
 100b401:	mov    BYTE PTR [rsp+0x30],0x1
 100b406:	mov    BYTE PTR [rsp+0x28],0x1
 100b40b:	mov    DWORD PTR [rsp+0x20],r13d
 100b410:	xor    r9d,r9d
 100b413:	mov    edx,0x4000c3cd
 100b418:	mov    rcx,QWORD PTR [rip+0x584c9]        # 0x10638e8
 100b41f:	call   QWORD PTR [rbx+0x8]
 100b422:	nop
 100b423:	lea    rcx,[rsp+0x78]
 100b428:	call   QWORD PTR [rip+0xffffffffffff667a]        # 0x1001aa8
 100b42e:	nop
 100b42f:	mov    rax,r14
 100b432:	jmp    0x100b46f
 100b434:	mov    rcx,QWORD PTR [rip+0x584ad]        # 0x10638e8
 100b43b:	mov    rax,QWORD PTR [rcx]
 100b43e:	mov    BYTE PTR [rsp+0x28],0x1
 100b443:	mov    BYTE PTR [rsp+0x20],0x1
 100b448:	xor    r9d,r9d
 100b44b:	xor    r8d,r8d
 100b44e:	mov    edx,0xc000c3cb
 100b453:	call   QWORD PTR [rax]
 100b455:	mov    DWORD PTR [rsp+0x70],0xfffffffe
 100b45d:	lea    rdx,[rip+0x553bc]        # 0x1060820
 100b464:	lea    rcx,[rsp+0x70]
 100b469:	call   0x10401ce
 100b46e:	nop
 100b46f:	mov    rcx,QWORD PTR [rsp+0x890]
 100b477:	xor    rcx,rsp
 100b47a:	call   0x103ff40
 100b47f:	add    rsp,0x8a8
 100b486:	pop    r15
 100b488:	pop    r14
 100b48a:	pop    r13
 100b48c:	pop    r12
 100b48e:	pop    rdi
 100b48f:	pop    rsi
 100b490:	pop    rbp
 100b491:	pop    rbx
 100b492:	ret    
 100b493:	int3   
 100b494:	int3   
 100b495:	int3   
 100b496:	int3   
 100b497:	int3   
 100b498:	int3   
 100b499:	int3   
 100b49a:	int3   
 100b49b:	int3   
 100b49c:	int3   
 100b49d:	int3   
 100b49e:	int3   
 100b49f:	int3   
 100b4a0:	rex push rbx
 100b4a2:	sub    rsp,0x20
 100b4a6:	cmp    QWORD PTR [rcx+0x48],0x0
 100b4ab:	mov    rbx,rcx
 100b4ae:	jne    0x100b4b8
 100b4b0:	xor    al,al
 100b4b2:	add    rsp,0x20
 100b4b6:	pop    rbx
 100b4b7:	ret    
 100b4b8:	call   0x100b4d0
 100b4bd:	mov    rcx,rbx
 100b4c0:	add    rsp,0x20
 100b4c4:	pop    rbx
 100b4c5:	jmp    0x100bbd0
 100b4ca:	int3   
 100b4cb:	int3   
 100b4cc:	int3   
 100b4cd:	int3   
 100b4ce:	int3   
 100b4cf:	int3   
 100b4d0:	mov    rax,rsp
 100b4d3:	push   rbp
 100b4d4:	push   r12
 100b4d6:	push   r13
 100b4d8:	push   r14
 100b4da:	push   r15
 100b4dc:	lea    rbp,[rax-0x268]
 100b4e3:	sub    rsp,0x340
 100b4ea:	mov    QWORD PTR [rbp-0x30],0xfffffffffffffffe
 100b4f2:	mov    QWORD PTR [rax+0x10],rbx
 100b4f6:	mov    QWORD PTR [rax+0x18],rsi
 100b4fa:	mov    QWORD PTR [rax+0x20],rdi
 100b4fe:	mov    rax,QWORD PTR [rip+0x5836b]        # 0x1063870
 100b505:	xor    rax,rsp
 100b508:	mov    QWORD PTR [rbp+0x230],rax
 100b50f:	mov    r12,rcx
 100b512:	cmp    QWORD PTR [rcx+0x48],0x0
 100b517:	je     0x100bb87
 100b51d:	xor    r15d,r15d
 100b520:	mov    sil,0x1
 100b523:	lea    rcx,[rsp+0x68]
 100b528:	call   QWORD PTR [rip+0xffffffffffff6592]        # 0x1001ac0
 100b52e:	nop
 100b52f:	xor    r14d,r14d
 100b532:	mov    DWORD PTR [rsp+0x58],r14d
 100b537:	nop    WORD PTR [rax+rax*1+0x0]
 100b540:	mov    rdi,QWORD PTR [r12+0x18]
 100b545:	mov    QWORD PTR [rbp-0x78],rdi
 100b549:	test   rdi,rdi
 100b54c:	je     0x100baf8
 100b552:	lea    rcx,[rsp+0x48]
 100b557:	call   QWORD PTR [rip+0xffffffffffff6563]        # 0x1001ac0
 100b55d:	nop
 100b55e:	lea    rcx,[rdi+0x10]
 100b562:	call   QWORD PTR [rip+0xffffffffffff6580]        # 0x1001ae8
 100b568:	mov    rcx,rax
 100b56b:	lea    rdx,[rbp-0x20]
 100b56f:	call   QWORD PTR [rip+0xffffffffffff5c8b]        # 0x1001200
 100b575:	mov    r13,rax
 100b578:	mov    edx,0x5c
 100b57d:	lea    rcx,[rdi+0x10]
 100b581:	call   QWORD PTR [rip+0xffffffffffff64c9]        # 0x1001a50
 100b587:	cmp    eax,0xffffffff
 100b58a:	je     0x100bac8
 100b590:	mov    r8d,eax
 100b593:	lea    rdx,[rbp-0x38]
 100b597:	lea    rcx,[rdi+0x10]
 100b59b:	call   QWORD PTR [rip+0xffffffffffff64a7]        # 0x1001a48
 100b5a1:	nop
 100b5a2:	mov    rdx,rax
 100b5a5:	lea    rcx,[rsp+0x48]
 100b5aa:	call   QWORD PTR [rip+0xffffffffffff64f0]        # 0x1001aa0
 100b5b0:	nop
 100b5b1:	lea    rcx,[rbp-0x38]
 100b5b5:	call   QWORD PTR [rip+0xffffffffffff64ed]        # 0x1001aa8
 100b5bb:	lea    rcx,[rsp+0x48]
 100b5c0:	call   QWORD PTR [rip+0xffffffffffff6522]        # 0x1001ae8
 100b5c6:	mov    rdx,rax
 100b5c9:	lea    rcx,[rbp-0x60]
 100b5cd:	call   0x10309c0
 100b5d2:	nop
 100b5d3:	mov    rdx,rax
 100b5d6:	lea    rcx,[rsp+0x48]
 100b5db:	call   QWORD PTR [rip+0xffffffffffff64bf]        # 0x1001aa0
 100b5e1:	nop
 100b5e2:	lea    rcx,[rbp-0x60]
 100b5e6:	call   QWORD PTR [rip+0xffffffffffff64bc]        # 0x1001aa8
 100b5ec:	mov    sil,0x1
 100b5ef:	mov    BYTE PTR [rsp+0x40],sil
 100b5f4:	cmp    r13,0xffffffffffffffff
 100b5f8:	je     0x100ba2f
 100b5fe:	xchg   ax,ax
 100b600:	mov    eax,DWORD PTR [rbp-0x20]
 100b603:	test   al,0x10
 100b605:	jne    0x100ba08
 100b60b:	test   al,0x2
 100b60d:	jne    0x100ba08
 100b613:	lea    rcx,[r12+0x8]
 100b618:	lea    rdx,[rbp+0xc]
 100b61c:	call   QWORD PTR [rip+0xffffffffffff643e]        # 0x1001a60
 100b622:	test   eax,eax
 100b624:	je     0x100ba08
 100b62a:	lea    rdx,[rip+0x57e1f]        # 0x1063450
 100b631:	lea    rcx,[rbp+0xc]
 100b635:	call   QWORD PTR [rip+0xffffffffffff608d]        # 0x10016c8
 100b63b:	test   rax,rax
 100b63e:	je     0x100b670
 100b640:	lea    rdx,[rip+0xffffffffffff68e9]        # 0x1001f30
 100b647:	lea    rcx,[rbp+0xc]
 100b64b:	call   QWORD PTR [rip+0xffffffffffff6077]        # 0x10016c8
 100b651:	test   rax,rax
 100b654:	je     0x100b670
 100b656:	lea    rdx,[rip+0xffffffffffff68e3]        # 0x1001f40
 100b65d:	lea    rcx,[rbp+0xc]
 100b661:	call   QWORD PTR [rip+0xffffffffffff6061]        # 0x10016c8
 100b667:	test   rax,rax
 100b66a:	je     0x100ba08
 100b670:	cmp    BYTE PTR [r12+0x1],0x0
 100b676:	jne    0x100b692
 100b678:	lea    rdx,[rip+0xffffffffffff68d5]        # 0x1001f54
 100b67f:	lea    rcx,[rbp+0xc]
 100b683:	call   QWORD PTR [rip+0xffffffffffff603f]        # 0x10016c8
 100b689:	test   rax,rax
 100b68c:	jne    0x100ba08
 100b692:	lea    rcx,[rsp+0x50]
 100b697:	call   QWORD PTR [rip+0xffffffffffff6423]        # 0x1001ac0
 100b69d:	nop
 100b69e:	lea    r9,[rip+0xffffffffffff68bb]        # 0x1001f60
 100b6a5:	lea    r8,[rip+0x57da4]        # 0x1063450
 100b6ac:	lea    rdx,[rip+0xffffffffffff68bd]        # 0x1001f70
 100b6b3:	lea    rcx,[rsp+0x50]
 100b6b8:	call   QWORD PTR [rip+0xffffffffffff6382]        # 0x1001a40
 100b6be:	lea    rcx,[rsp+0x50]
 100b6c3:	call   QWORD PTR [rip+0xffffffffffff641f]        # 0x1001ae8
 100b6c9:	mov    rdx,rax
 100b6cc:	lea    rcx,[rbp+0xc]
 100b6d0:	call   QWORD PTR [rip+0xffffffffffff5ffa]        # 0x10016d0
 100b6d6:	test   eax,eax
 100b6d8:	jne    0x100b6df
 100b6da:	jmp    0x100b9fd
 100b6df:	lea    rcx,[rsp+0x48]
 100b6e4:	call   QWORD PTR [rip+0xffffffffffff63fe]        # 0x1001ae8
 100b6ea:	mov    rbx,rax
 100b6ed:	lea    rcx,[rsp+0x60]
 100b6f2:	call   QWORD PTR [rip+0xffffffffffff63c8]        # 0x1001ac0
 100b6f8:	nop
 100b6f9:	mov    rdx,rbx
 100b6fc:	lea    rcx,[rsp+0x60]
 100b701:	call   QWORD PTR [rip+0xffffffffffff6391]        # 0x1001a98
 100b707:	lea    rdx,[rbp+0xc]
 100b70b:	lea    rcx,[rsp+0x60]
 100b710:	call   QWORD PTR [rip+0xffffffffffff637a]        # 0x1001a90
 100b716:	lea    rcx,[rsp+0x60]
 100b71b:	call   QWORD PTR [rip+0xffffffffffff63c7]        # 0x1001ae8
 100b721:	mov    rcx,rax
 100b724:	mov    QWORD PTR [rsp+0x30],0x0
 100b72d:	mov    DWORD PTR [rsp+0x28],0x100080
 100b735:	mov    DWORD PTR [rsp+0x20],0x3
 100b73d:	xor    r9d,r9d
 100b740:	mov    edx,0x80000000
 100b745:	lea    r8d,[r9+0x1]
 100b749:	call   QWORD PTR [rip+0xffffffffffff5a91]        # 0x10011e0
 100b74f:	cmp    rax,0xffffffffffffffff
 100b753:	je     0x100b76c
 100b755:	mov    rcx,rax
 100b758:	call   QWORD PTR [rip+0xffffffffffff5d7a]        # 0x10014d8
 100b75e:	call   QWORD PTR [rip+0xffffffffffff5dec]        # 0x1001550
 100b764:	test   eax,eax
 100b766:	jne    0x100b76c
 100b768:	mov    bl,0x1
 100b76a:	jmp    0x100b76e
 100b76c:	xor    bl,bl
 100b76e:	lea    rcx,[rsp+0x60]
 100b773:	call   QWORD PTR [rip+0xffffffffffff632f]        # 0x1001aa8
 100b779:	test   bl,bl
 100b77b:	jne    0x100b782
 100b77d:	jmp    0x100b9fd
 100b782:	mov    ecx,DWORD PTR [rbp-0x4]
 100b785:	shl    rcx,0x20
 100b789:	mov    eax,DWORD PTR [rbp+0x0]
 100b78c:	add    r15,rax
 100b78f:	add    r15,rcx
 100b792:	cmp    r15,0x7fffffff
 100b799:	jb     0x100b7dc
 100b79b:	mov    rcx,QWORD PTR [rip+0x58146]        # 0x10638e8
 100b7a2:	mov    rax,QWORD PTR [rcx]
 100b7a5:	mov    BYTE PTR [rsp+0x28],0x1
 100b7aa:	mov    BYTE PTR [rsp+0x20],0x1
 100b7af:	xor    r9d,r9d
 100b7b2:	xor    r8d,r8d
 100b7b5:	mov    edx,0x4000c404
 100b7ba:	call   QWORD PTR [rax]
 100b7bc:	mov    dl,0x1
 100b7be:	mov    rcx,r12
 100b7c1:	call   0x100bdc0
 100b7c6:	test   al,al
 100b7c8:	je     0x100bb55
 100b7ce:	mov    r15d,DWORD PTR [rbp-0x4]
 100b7d2:	shl    r15,0x20
 100b7d6:	mov    eax,DWORD PTR [rbp+0x0]
 100b7d9:	add    r15,rax
 100b7dc:	lea    r8,[rbp+0xc]
 100b7e0:	lea    rdx,[rsp+0x48]
 100b7e5:	mov    rcx,r12
 100b7e8:	call   0x100c010
 100b7ed:	test   al,al
 100b7ef:	je     0x100b9db
 100b7f5:	xor    esi,esi
 100b7f7:	xor    r14d,r14d
 100b7fa:	nop    WORD PTR [rax+rax*1+0x0]
 100b800:	cmp    BYTE PTR [rip+0x578f9],0x0        # 0x1063100
 100b807:	je     0x100b908
 100b80d:	lea    rcx,[rsp+0x78]
 100b812:	call   QWORD PTR [rip+0xffffffffffff62a8]        # 0x1001ac0
 100b818:	nop
 100b819:	lea    rcx,[rsp+0x70]
 100b81e:	call   QWORD PTR [rip+0xffffffffffff629c]        # 0x1001ac0
 100b824:	nop
 100b825:	lea    rdx,[rbp+0xc]
 100b829:	lea    rcx,[rsp+0x78]
 100b82e:	call   QWORD PTR [rip+0xffffffffffff6264]        # 0x1001a98
 100b834:	xor    r8d,r8d
 100b837:	lea    rdx,[rip+0xffffffffffff6716]        # 0x1001f54
 100b83e:	lea    rcx,[rsp+0x78]
 100b843:	call   QWORD PTR [rip+0xffffffffffff620f]        # 0x1001a58
 100b849:	lea    rdx,[rip+0x580a8]        # 0x10638f8
 100b850:	cmp    eax,0xffffffff
 100b853:	je     0x100b881
 100b855:	lea    r8,[rip+0xffffffffffff66ac]        # 0x1001f08
 100b85c:	lea    rcx,[rbp-0x40]
 100b860:	call   0x100af10
 100b865:	nop
 100b866:	mov    rdx,rax
 100b869:	lea    rcx,[rsp+0x70]
 100b86e:	call   QWORD PTR [rip+0xffffffffffff622c]        # 0x1001aa0
 100b874:	nop
 100b875:	lea    rcx,[rbp-0x40]
 100b879:	call   QWORD PTR [rip+0xffffffffffff6229]        # 0x1001aa8
 100b87f:	jmp    0x100b88c
 100b881:	lea    rcx,[rsp+0x70]
 100b886:	call   QWORD PTR [rip+0xffffffffffff6214]        # 0x1001aa0
 100b88c:	lea    r8,[rbp+0xc]
 100b890:	lea    rdx,[rsp+0x70]
 100b895:	lea    rcx,[rbp-0x70]
 100b899:	call   0x100af10
 100b89e:	mov    rbx,rax
 100b8a1:	lea    r8,[rbp+0xc]
 100b8a5:	lea    rdx,[rsp+0x48]
 100b8aa:	lea    rcx,[rbp-0x50]
 100b8ae:	call   0x100af10
 100b8b3:	mov    rdi,rax
 100b8b6:	mov    rcx,rbx
 100b8b9:	call   QWORD PTR [rip+0xffffffffffff6229]        # 0x1001ae8
 100b8bf:	mov    rbx,rax
 100b8c2:	mov    rcx,rdi
 100b8c5:	call   QWORD PTR [rip+0xffffffffffff621d]        # 0x1001ae8
 100b8cb:	mov    rcx,rax
 100b8ce:	mov    r8d,0x1
 100b8d4:	mov    rdx,rbx
 100b8d7:	call   QWORD PTR [rip+0xffffffffffff5933]        # 0x1001210
 100b8dd:	mov    ebx,eax
 100b8df:	lea    rcx,[rbp-0x50]
 100b8e3:	call   QWORD PTR [rip+0xffffffffffff61bf]        # 0x1001aa8
 100b8e9:	nop
 100b8ea:	lea    rcx,[rbp-0x70]
 100b8ee:	call   QWORD PTR [rip+0xffffffffffff61b4]        # 0x1001aa8
 100b8f4:	nop
 100b8f5:	lea    rcx,[rsp+0x70]
 100b8fa:	call   QWORD PTR [rip+0xffffffffffff61a8]        # 0x1001aa8
 100b900:	nop
 100b901:	lea    rcx,[rsp+0x78]
 100b906:	jmp    0x100b933
 100b908:	lea    r8,[rbp+0xc]
 100b90c:	lea    rdx,[rsp+0x48]
 100b911:	lea    rcx,[rbp-0x68]
 100b915:	call   0x100af10
 100b91a:	nop
 100b91b:	mov    rcx,rax
 100b91e:	call   QWORD PTR [rip+0xffffffffffff61c4]        # 0x1001ae8
 100b924:	mov    rcx,rax
 100b927:	call   QWORD PTR [rip+0xffffffffffff58cb]        # 0x10011f8
 100b92d:	mov    ebx,eax
 100b92f:	lea    rcx,[rbp-0x68]
 100b933:	call   QWORD PTR [rip+0xffffffffffff616f]        # 0x1001aa8
 100b939:	test   ebx,ebx
 100b93b:	jne    0x100b9c9
 100b941:	call   QWORD PTR [rip+0xffffffffffff5c09]        # 0x1001550
 100b947:	mov    r14d,eax
 100b94a:	mov    edx,0xc000c3cf
 100b94f:	lea    rcx,[rbp-0x58]
 100b953:	call   0x10132d0
 100b958:	nop
 100b959:	mov    rcx,rax
 100b95c:	call   QWORD PTR [rip+0xffffffffffff6186]        # 0x1001ae8
 100b962:	mov    rdx,rax
 100b965:	mov    r9d,r14d
 100b968:	lea    r8,[rbp+0xc]
 100b96c:	lea    rcx,[rsp+0x68]
 100b971:	call   QWORD PTR [rip+0xffffffffffff60c9]        # 0x1001a40
 100b977:	nop
 100b978:	lea    rcx,[rbp-0x58]
 100b97c:	call   QWORD PTR [rip+0xffffffffffff6126]        # 0x1001aa8
 100b982:	mov    r11,QWORD PTR [rip+0x57f5f]        # 0x10638e8
 100b989:	mov    rbx,QWORD PTR [r11]
 100b98c:	lea    rcx,[rsp+0x68]
 100b991:	call   QWORD PTR [rip+0xffffffffffff6151]        # 0x1001ae8
 100b997:	mov    r8,rax
 100b99a:	mov    BYTE PTR [rsp+0x30],0x1
 100b99f:	mov    BYTE PTR [rsp+0x28],0x1
 100b9a4:	mov    DWORD PTR [rsp+0x20],0x0
 100b9ac:	xor    r9d,r9d
 100b9af:	mov    edx,0xc000c3cf
 100b9b4:	mov    rcx,QWORD PTR [rip+0x57f2d]        # 0x10638e8
 100b9bb:	call   QWORD PTR [rbx+0x8]
 100b9be:	mov    ecx,0x3e8
 100b9c3:	call   QWORD PTR [rip+0xffffffffffff5b7f]        # 0x1001548
 100b9c9:	test   r14d,r14d
 100b9cc:	je     0x100b9f8
 100b9ce:	inc    esi
 100b9d0:	cmp    esi,0x5
 100b9d3:	jb     0x100b800
 100b9d9:	jmp    0x100b9f8
 100b9db:	movzx  esi,BYTE PTR [r12+0x2]
 100b9e1:	mov    BYTE PTR [rsp+0x40],sil
 100b9e6:	mov    ecx,DWORD PTR [rbp-0x4]
 100b9e9:	shl    rcx,0x20
 100b9ed:	mov    eax,DWORD PTR [rbp+0x0]
 100b9f0:	add    rcx,rax
 100b9f3:	sub    r15,rcx
 100b9f6:	jmp    0x100b9fd
 100b9f8:	movzx  esi,BYTE PTR [rsp+0x40]
 100b9fd:	lea    rcx,[rsp+0x50]
 100ba02:	call   QWORD PTR [rip+0xffffffffffff60a0]        # 0x1001aa8
 100ba08:	lea    rdx,[rbp-0x20]
 100ba0c:	mov    rcx,r13
 100ba0f:	call   QWORD PTR [rip+0xffffffffffff57f3]        # 0x1001208
 100ba15:	test   eax,eax
 100ba17:	jne    0x100b600
 100ba1d:	mov    rcx,r13
 100ba20:	call   QWORD PTR [rip+0xffffffffffff5b12]        # 0x1001538
 100ba26:	mov    rdi,QWORD PTR [rbp-0x78]
 100ba2a:	jmp    0x100bac6
 100ba2f:	cmp    BYTE PTR [r12+0x2],0x0
 100ba35:	jne    0x100bac6
 100ba3b:	lea    rcx,[rbp-0x80]
 100ba3f:	call   QWORD PTR [rip+0xffffffffffff607b]        # 0x1001ac0
 100ba45:	nop
 100ba46:	mov    edx,0xc000c3d0
 100ba4b:	lea    rcx,[rbp-0x48]
 100ba4f:	call   0x10132d0
 100ba54:	nop
 100ba55:	mov    rcx,rax
 100ba58:	call   QWORD PTR [rip+0xffffffffffff608a]        # 0x1001ae8
 100ba5e:	mov    rdx,rax
 100ba61:	mov    r9,QWORD PTR [rsp+0x48]
 100ba66:	mov    r8,QWORD PTR [rdi+0x10]
 100ba6a:	lea    rcx,[rbp-0x80]
 100ba6e:	call   QWORD PTR [rip+0xffffffffffff5fcc]        # 0x1001a40
 100ba74:	nop
 100ba75:	lea    rcx,[rbp-0x48]
 100ba79:	call   QWORD PTR [rip+0xffffffffffff6029]        # 0x1001aa8
 100ba7f:	mov    r11,QWORD PTR [rip+0x57e62]        # 0x10638e8
 100ba86:	mov    rbx,QWORD PTR [r11]
 100ba89:	lea    rcx,[rbp-0x80]
 100ba8d:	call   QWORD PTR [rip+0xffffffffffff6055]        # 0x1001ae8
 100ba93:	mov    r8,rax
 100ba96:	mov    BYTE PTR [rsp+0x30],0x1
 100ba9b:	mov    BYTE PTR [rsp+0x28],0x1
 100baa0:	mov    DWORD PTR [rsp+0x20],0x0
 100baa8:	xor    r9d,r9d
 100baab:	mov    edx,0xc000c3d0
 100bab0:	mov    rcx,QWORD PTR [rip+0x57e31]        # 0x10638e8
 100bab7:	call   QWORD PTR [rbx+0x8]
 100baba:	nop
 100babb:	lea    rcx,[rbp-0x80]
 100babf:	call   QWORD PTR [rip+0xffffffffffff5fe3]        # 0x1001aa8
 100bac5:	nop
 100bac6:	jmp    0x100bad8
 100bac8:	cmp    r13,0xffffffffffffffff
 100bacc:	je     0x100bad8
 100bace:	mov    rcx,r13
 100bad1:	call   QWORD PTR [rip+0xffffffffffff5a61]        # 0x1001538
 100bad7:	nop
 100bad8:	lea    rcx,[rsp+0x48]
 100badd:	call   QWORD PTR [rip+0xffffffffffff5fc5]        # 0x1001aa8
 100bae3:	mov    rdi,QWORD PTR [rdi]
 100bae6:	mov    QWORD PTR [rbp-0x78],rdi
 100baea:	test   rdi,rdi
 100baed:	jne    0x100b552
 100baf3:	mov    r14d,DWORD PTR [rsp+0x58]
 100baf8:	cmp    BYTE PTR [r12+0x2],0x0
 100bafe:	je     0x100bb35
 100bb00:	cmp    BYTE PTR [r12],0x0
 100bb05:	jne    0x100bb40
 100bb07:	xor    ebx,ebx
 100bb09:	xor    eax,eax
 100bb0b:	nop    DWORD PTR [rax+rax*1+0x0]
 100bb10:	cmp    ebx,0x1e
 100bb13:	jae    0x100bb35
 100bb15:	cmp    eax,0xc0
 100bb1a:	je     0x100bb35
 100bb1c:	mov    edx,0x1
 100bb21:	mov    ecx,0x3e8
 100bb26:	call   QWORD PTR [rip+0xffffffffffff5994]        # 0x10014c0
 100bb2c:	inc    ebx
 100bb2e:	cmp    BYTE PTR [r12],0x0
 100bb33:	je     0x100bb10
 100bb35:	cmp    BYTE PTR [r12],0x0
 100bb3a:	je     0x100b540
 100bb40:	mov    eax,r14d
 100bb43:	inc    r14d
 100bb46:	mov    DWORD PTR [rsp+0x58],r14d
 100bb4b:	cmp    eax,0x1
 100bb4e:	jae    0x100bb8b
 100bb50:	jmp    0x100b540
 100bb55:	mov    BYTE PTR [r12],0x1
 100bb5a:	mov    rcx,r13
 100bb5d:	call   QWORD PTR [rip+0xffffffffffff59d5]        # 0x1001538
 100bb63:	nop
 100bb64:	lea    rcx,[rsp+0x50]
 100bb69:	call   QWORD PTR [rip+0xffffffffffff5f39]        # 0x1001aa8
 100bb6f:	nop
 100bb70:	lea    rcx,[rsp+0x48]
 100bb75:	call   QWORD PTR [rip+0xffffffffffff5f2d]        # 0x1001aa8
 100bb7b:	nop
 100bb7c:	lea    rcx,[rsp+0x68]
 100bb81:	call   QWORD PTR [rip+0xffffffffffff5f21]        # 0x1001aa8
 100bb87:	xor    al,al
 100bb89:	jmp    0x100bb9a
 100bb8b:	lea    rcx,[rsp+0x68]
 100bb90:	call   QWORD PTR [rip+0xffffffffffff5f12]        # 0x1001aa8
 100bb96:	movzx  eax,sil
 100bb9a:	mov    rcx,QWORD PTR [rbp+0x230]
 100bba1:	xor    rcx,rsp
 100bba4:	call   0x103ff40
 100bba9:	lea    r11,[rsp+0x340]
 100bbb1:	mov    rbx,QWORD PTR [r11+0x38]
 100bbb5:	mov    rsi,QWORD PTR [r11+0x40]
 100bbb9:	mov    rdi,QWORD PTR [r11+0x48]
 100bbbd:	mov    rsp,r11
 100bbc0:	pop    r15
 100bbc2:	pop    r14
 100bbc4:	pop    r13
 100bbc6:	pop    r12
 100bbc8:	pop    rbp
 100bbc9:	ret    
 100bbca:	int3   
 100bbcb:	int3   
 100bbcc:	int3   
 100bbcd:	int3   
 100bbce:	int3   
 100bbcf:	int3   
 100bbd0:	mov    rax,rsp
 100bbd3:	push   rdi
 100bbd4:	sub    rsp,0x870
 100bbdb:	mov    QWORD PTR [rsp+0x50],0xfffffffffffffffe
 100bbe4:	mov    QWORD PTR [rax+0x10],rbx
 100bbe8:	mov    QWORD PTR [rax+0x18],rsi
 100bbec:	mov    rax,QWORD PTR [rip+0x57c7d]        # 0x1063870
 100bbf3:	xor    rax,rsp
 100bbf6:	mov    QWORD PTR [rsp+0x860],rax
 100bbfe:	mov    rsi,rcx
 100bc01:	lea    rcx,[rsp+0x40]
 100bc06:	call   QWORD PTR [rip+0xffffffffffff5eb4]        # 0x1001ac0
 100bc0c:	nop
 100bc0d:	cmp    QWORD PTR [rsi+0x48],0x0
 100bc12:	jne    0x100bc26
 100bc14:	lea    rcx,[rsp+0x40]
 100bc19:	call   QWORD PTR [rip+0xffffffffffff5e89]        # 0x1001aa8
 100bc1f:	xor    al,al
 100bc21:	jmp    0x100bd8a
 100bc26:	xor    edx,edx
 100bc28:	mov    rcx,rsi
 100bc2b:	call   0x100bdc0
 100bc30:	test   al,al
 100bc32:	jne    0x100bc46
 100bc34:	lea    rcx,[rsp+0x40]
 100bc39:	call   QWORD PTR [rip+0xffffffffffff5e69]        # 0x1001aa8
 100bc3f:	xor    al,al
 100bc41:	jmp    0x100bd8a
 100bc46:	mov    rcx,QWORD PTR [rsi+0x48]
 100bc4a:	call   0x10407d0
 100bc4f:	test   eax,eax
 100bc51:	jne    0x100bcfb
 100bc57:	cmp    BYTE PTR [rsi+0x2],al
 100bc5a:	jne    0x100bce9
 100bc60:	mov    edx,0xc000c3d3
 100bc65:	lea    rcx,[rsp+0x48]
 100bc6a:	call   0x10132d0
 100bc6f:	mov    rdi,rax
 100bc72:	lea    rdx,[rsp+0x60]
 100bc77:	mov    ecx,DWORD PTR [rsi+0x50]
 100bc7a:	call   0x100cec0
 100bc7f:	mov    rbx,rax
 100bc82:	mov    rcx,rdi
 100bc85:	call   QWORD PTR [rip+0xffffffffffff5e5d]        # 0x1001ae8
 100bc8b:	mov    rdx,rax
 100bc8e:	mov    r9,rbx
 100bc91:	mov    r8d,DWORD PTR [rsi+0x50]
 100bc95:	lea    rcx,[rsp+0x40]
 100bc9a:	call   QWORD PTR [rip+0xffffffffffff5da0]        # 0x1001a40
 100bca0:	nop
 100bca1:	lea    rcx,[rsp+0x48]
 100bca6:	call   QWORD PTR [rip+0xffffffffffff5dfc]        # 0x1001aa8
 100bcac:	mov    r11,QWORD PTR [rip+0x57c35]        # 0x10638e8
 100bcb3:	mov    rbx,QWORD PTR [r11]
 100bcb6:	lea    rcx,[rsp+0x40]
 100bcbb:	call   QWORD PTR [rip+0xffffffffffff5e27]        # 0x1001ae8
 100bcc1:	mov    r8,rax
 100bcc4:	mov    BYTE PTR [rsp+0x30],0x1
 100bcc9:	mov    BYTE PTR [rsp+0x28],0x1
 100bcce:	mov    DWORD PTR [rsp+0x20],0x0
 100bcd6:	xor    r9d,r9d
 100bcd9:	mov    edx,0xc000c3d3
 100bcde:	mov    rcx,QWORD PTR [rip+0x57c03]        # 0x10638e8
 100bce5:	call   QWORD PTR [rbx+0x8]
 100bce8:	nop
 100bce9:	lea    rcx,[rsp+0x40]
 100bcee:	call   QWORD PTR [rip+0xffffffffffff5db4]        # 0x1001aa8
 100bcf4:	xor    al,al
 100bcf6:	jmp    0x100bd8a
 100bcfb:	mov    edx,0xc3d4
 100bd00:	lea    rcx,[rsp+0x48]
 100bd05:	call   0x10132d0
 100bd0a:	mov    rdi,rax
 100bd0d:	lea    rcx,[rsi+0x8]
 100bd11:	call   QWORD PTR [rip+0xffffffffffff5dd1]        # 0x1001ae8
 100bd17:	mov    rbx,rax
 100bd1a:	mov    rcx,rdi
 100bd1d:	call   QWORD PTR [rip+0xffffffffffff5dc5]        # 0x1001ae8
 100bd23:	mov    rdx,rax
 100bd26:	mov    r8,rbx
 100bd29:	lea    rcx,[rsp+0x40]
 100bd2e:	call   QWORD PTR [rip+0xffffffffffff5d0c]        # 0x1001a40
 100bd34:	nop
 100bd35:	lea    rcx,[rsp+0x48]
 100bd3a:	call   QWORD PTR [rip+0xffffffffffff5d68]        # 0x1001aa8
 100bd40:	mov    r11,QWORD PTR [rip+0x57ba1]        # 0x10638e8
 100bd47:	mov    rbx,QWORD PTR [r11]
 100bd4a:	lea    rcx,[rsp+0x40]
 100bd4f:	call   QWORD PTR [rip+0xffffffffffff5d93]        # 0x1001ae8
 100bd55:	mov    r8,rax
 100bd58:	mov    BYTE PTR [rsp+0x30],0x1
 100bd5d:	mov    BYTE PTR [rsp+0x28],0x1
 100bd62:	mov    DWORD PTR [rsp+0x20],0x0
 100bd6a:	xor    r9d,r9d
 100bd6d:	mov    edx,0xc3d4
 100bd72:	mov    rcx,QWORD PTR [rip+0x57b6f]        # 0x10638e8
 100bd79:	call   QWORD PTR [rbx+0x8]
 100bd7c:	nop
 100bd7d:	lea    rcx,[rsp+0x40]
 100bd82:	call   QWORD PTR [rip+0xffffffffffff5d20]        # 0x1001aa8
 100bd88:	mov    al,0x1
 100bd8a:	mov    rcx,QWORD PTR [rsp+0x860]
 100bd92:	xor    rcx,rsp
 100bd95:	call   0x103ff40
 100bd9a:	lea    r11,[rsp+0x870]
 100bda2:	mov    rbx,QWORD PTR [r11+0x18]
 100bda6:	mov    rsi,QWORD PTR [r11+0x20]
 100bdaa:	mov    rsp,r11
 100bdad:	pop    rdi
 100bdae:	ret    
 100bdaf:	int3   
 100bdb0:	int3   
 100bdb1:	int3   
 100bdb2:	int3   
 100bdb3:	int3   
 100bdb4:	int3   
 100bdb5:	int3   
 100bdb6:	int3   
 100bdb7:	int3   
 100bdb8:	int3   
 100bdb9:	int3   
 100bdba:	int3   
 100bdbb:	int3   
 100bdbc:	int3   
 100bdbd:	int3   
 100bdbe:	int3   
 100bdbf:	int3   
 100bdc0:	mov    rax,rsp
 100bdc3:	push   rdi
 100bdc4:	sub    rsp,0x870
 100bdcb:	mov    QWORD PTR [rsp+0x50],0xfffffffffffffffe
 100bdd4:	mov    QWORD PTR [rax+0x18],rbx
 100bdd8:	mov    QWORD PTR [rax+0x20],rsi
 100bddc:	mov    rax,QWORD PTR [rip+0x57a8d]        # 0x1063870
 100bde3:	xor    rax,rsp
 100bde6:	mov    QWORD PTR [rsp+0x860],rax
 100bdee:	movzx  ebx,dl
 100bdf1:	mov    rsi,rcx
 100bdf4:	lea    rcx,[rsp+0x40]
 100bdf9:	call   QWORD PTR [rip+0xffffffffffff5cc1]        # 0x1001ac0
 100bdff:	nop
 100be00:	mov    edx,ebx
 100be02:	lea    r9,[rip+0xd37]        # 0x100cb40
 100be09:	lea    r8,[rip+0xec0]        # 0x100ccd0
 100be10:	mov    rcx,QWORD PTR [rsi+0x48]
 100be14:	call   0x104082c
 100be19:	test   eax,eax
 100be1b:	jne    0x100bec2
 100be21:	cmp    BYTE PTR [rsi+0x2],al
 100be24:	jne    0x100beb3
 100be2a:	mov    edx,0xc000c3d1
 100be2f:	lea    rcx,[rsp+0x48]
 100be34:	call   0x10132d0
 100be39:	mov    rdi,rax
 100be3c:	lea    rdx,[rsp+0x60]
 100be41:	mov    ecx,DWORD PTR [rsi+0x50]
 100be44:	call   0x100cec0
 100be49:	mov    rbx,rax
 100be4c:	mov    rcx,rdi
 100be4f:	call   QWORD PTR [rip+0xffffffffffff5c93]        # 0x1001ae8
 100be55:	mov    rdx,rax
 100be58:	mov    r9,rbx
 100be5b:	mov    r8d,DWORD PTR [rsi+0x50]
 100be5f:	lea    rcx,[rsp+0x40]
 100be64:	call   QWORD PTR [rip+0xffffffffffff5bd6]        # 0x1001a40
 100be6a:	nop
 100be6b:	lea    rcx,[rsp+0x48]
 100be70:	call   QWORD PTR [rip+0xffffffffffff5c32]        # 0x1001aa8
 100be76:	mov    r11,QWORD PTR [rip+0x57a6b]        # 0x10638e8
 100be7d:	mov    rbx,QWORD PTR [r11]
 100be80:	lea    rcx,[rsp+0x40]
 100be85:	call   QWORD PTR [rip+0xffffffffffff5c5d]        # 0x1001ae8
 100be8b:	mov    r8,rax
 100be8e:	mov    BYTE PTR [rsp+0x30],0x1
 100be93:	mov    BYTE PTR [rsp+0x28],0x1
 100be98:	mov    DWORD PTR [rsp+0x20],0x0
 100bea0:	xor    r9d,r9d
 100bea3:	mov    edx,0xc000c3d1
 100bea8:	mov    rcx,QWORD PTR [rip+0x57a39]        # 0x10638e8
 100beaf:	call   QWORD PTR [rbx+0x8]
 100beb2:	nop
 100beb3:	lea    rcx,[rsp+0x40]
 100beb8:	call   QWORD PTR [rip+0xffffffffffff5bea]        # 0x1001aa8
 100bebe:	xor    al,al
 100bec0:	jmp    0x100bef1
 100bec2:	mov    rcx,QWORD PTR [rip+0x57a1f]        # 0x10638e8
 100bec9:	mov    rax,QWORD PTR [rcx]
 100becc:	mov    BYTE PTR [rsp+0x28],0x1
 100bed1:	mov    BYTE PTR [rsp+0x20],0x1
 100bed6:	xor    r9d,r9d
 100bed9:	xor    r8d,r8d
 100bedc:	mov    edx,0xc3d2
 100bee1:	call   QWORD PTR [rax]
 100bee3:	nop
 100bee4:	lea    rcx,[rsp+0x40]
 100bee9:	call   QWORD PTR [rip+0xffffffffffff5bb9]        # 0x1001aa8
 100beef:	mov    al,0x1
 100bef1:	mov    rcx,QWORD PTR [rsp+0x860]
 100bef9:	xor    rcx,rsp
 100befc:	call   0x103ff40
 100bf01:	lea    r11,[rsp+0x870]
 100bf09:	mov    rbx,QWORD PTR [r11+0x20]
 100bf0d:	mov    rsi,QWORD PTR [r11+0x28]
 100bf11:	mov    rsp,r11
 100bf14:	pop    rdi
 100bf15:	ret    
 100bf16:	int3   
 100bf17:	int3   
 100bf18:	int3   
 100bf19:	int3   
 100bf1a:	int3   
 100bf1b:	int3   
 100bf1c:	int3   
 100bf1d:	int3   
 100bf1e:	int3   
 100bf1f:	int3   
 100bf20:	mov    QWORD PTR [rsp+0x8],rbx
 100bf25:	mov    QWORD PTR [rsp+0x10],rbp
 100bf2a:	mov    QWORD PTR [rsp+0x18],rsi
 100bf2f:	push   rdi
 100bf30:	sub    rsp,0x40
 100bf34:	mov    rdi,rdx
 100bf37:	mov    rsi,rcx
 100bf3a:	mov    r8d,0x324
 100bf40:	mov    rcx,rdi
 100bf43:	xor    edx,edx
 100bf45:	call   0x104026c
 100bf4a:	xor    ebp,ebp
 100bf4c:	mov    eax,0x3039
 100bf51:	lea    rcx,[rip+0x57998]        # 0x10638f0
 100bf58:	mov    DWORD PTR [rdi],0x7fffffff
 100bf5e:	mov    QWORD PTR [rdi+0x4],0x7fffffff
 100bf66:	mov    QWORD PTR [rdi+0xc],rbp
 100bf6a:	mov    QWORD PTR [rdi+0x14],0x1
 100bf72:	mov    WORD PTR [rdi+0x20],ax
 100bf76:	mov    BYTE PTR [rdi+0x22],bpl
 100bf7a:	lea    rbx,[rdi+0x222]
 100bf81:	call   QWORD PTR [rip+0xffffffffffff5b61]        # 0x1001ae8
 100bf87:	mov    QWORD PTR [rsp+0x38],rbp
 100bf8c:	mov    QWORD PTR [rsp+0x30],rbp
 100bf91:	or     r9d,0xffffffff
 100bf95:	mov    r8,rax
 100bf98:	mov    edx,0x400
 100bf9d:	xor    ecx,ecx
 100bf9f:	mov    DWORD PTR [rsp+0x28],0x100
 100bfa7:	mov    QWORD PTR [rsp+0x20],rbx
 100bfac:	call   QWORD PTR [rip+0xffffffffffff5266]        # 0x1001218
 100bfb2:	lea    rcx,[rsi+0x8]
 100bfb6:	lea    rbx,[rdi+0x122]
 100bfbd:	call   QWORD PTR [rip+0xffffffffffff5b25]        # 0x1001ae8
 100bfc3:	mov    QWORD PTR [rsp+0x38],rbp
 100bfc8:	mov    QWORD PTR [rsp+0x30],rbp
 100bfcd:	or     r9d,0xffffffff
 100bfd1:	mov    edx,0x400
 100bfd6:	xor    ecx,ecx
 100bfd8:	mov    r8,rax
 100bfdb:	mov    DWORD PTR [rsp+0x28],0x100
 100bfe3:	mov    QWORD PTR [rsp+0x20],rbx
 100bfe8:	call   QWORD PTR [rip+0xffffffffffff522a]        # 0x1001218
 100bfee:	mov    rbx,QWORD PTR [rsp+0x50]
 100bff3:	mov    rbp,QWORD PTR [rsp+0x58]
 100bff8:	mov    rsi,QWORD PTR [rsp+0x60]
 100bffd:	add    rsp,0x40
 100c001:	pop    rdi
 100c002:	ret    
 100c003:	int3   
 100c004:	int3   
 100c005:	int3   
 100c006:	int3   
 100c007:	int3   
 100c008:	int3   
 100c009:	int3   
 100c00a:	int3   
 100c00b:	int3   
 100c00c:	int3   
 100c00d:	int3   
 100c00e:	int3   
 100c00f:	int3   
 100c010:	rex push rbp
 100c012:	push   rbx
 100c013:	push   rsi
 100c014:	push   rdi
 100c015:	push   r12
 100c017:	push   r14
 100c019:	push   r15
 100c01b:	lea    rbp,[rsp-0xaa0]
 100c023:	sub    rsp,0xba0
 100c02a:	mov    QWORD PTR [rsp+0x50],0xfffffffffffffffe
 100c033:	mov    rax,QWORD PTR [rip+0x57836]        # 0x1063870
 100c03a:	xor    rax,rsp
 100c03d:	mov    QWORD PTR [rbp+0xa90],rax
 100c044:	mov    r15,r8
 100c047:	mov    rbx,rdx
 100c04a:	mov    rsi,rcx
 100c04d:	lea    rcx,[rsp+0x40]
 100c052:	call   QWORD PTR [rip+0xffffffffffff5a68]        # 0x1001ac0
 100c058:	nop
 100c059:	cmp    QWORD PTR [rsi+0x48],0x0
 100c05e:	jne    0x100c072
 100c060:	lea    rcx,[rsp+0x40]
 100c065:	call   QWORD PTR [rip+0xffffffffffff5a3d]        # 0x1001aa8
 100c06b:	xor    al,al
 100c06d:	jmp    0x100c33a
 100c072:	mov    rcx,rbx
 100c075:	call   QWORD PTR [rip+0xffffffffffff5a6d]        # 0x1001ae8
 100c07b:	mov    r8,rax
 100c07e:	xor    r12d,r12d
 100c081:	mov    QWORD PTR [rsp+0x38],r12
 100c086:	mov    QWORD PTR [rsp+0x30],r12
 100c08b:	mov    r14d,0x104
 100c091:	mov    DWORD PTR [rsp+0x28],r14d
 100c096:	lea    rax,[rbp+0x70]
 100c09a:	mov    QWORD PTR [rsp+0x20],rax
 100c09f:	or     rdi,0xffffffffffffffff
 100c0a3:	mov    r9d,edi
 100c0a6:	mov    edx,0x400
 100c0ab:	xor    ecx,ecx
 100c0ad:	call   QWORD PTR [rip+0xffffffffffff5165]        # 0x1001218
 100c0b3:	mov    QWORD PTR [rsp+0x38],r12
 100c0b8:	mov    QWORD PTR [rsp+0x30],r12
 100c0bd:	mov    DWORD PTR [rsp+0x28],r14d
 100c0c2:	lea    rax,[rbp+0x180]
 100c0c9:	mov    QWORD PTR [rsp+0x20],rax
 100c0ce:	mov    r9d,edi
 100c0d1:	mov    r8,r15
 100c0d4:	mov    edx,0x400
 100c0d9:	xor    ecx,ecx
 100c0db:	call   QWORD PTR [rip+0xffffffffffff5137]        # 0x1001218
 100c0e1:	lea    r11,[rbp+0x70]
 100c0e5:	mov    rax,rdi
 100c0e8:	nop    DWORD PTR [rax+rax*1+0x0]
 100c0f0:	inc    rax
 100c0f3:	cmp    BYTE PTR [r11+rax*1],r12b
 100c0f7:	jne    0x100c0f0
 100c0f9:	mov    r9,r14
 100c0fc:	sub    r9,rax
 100c0ff:	lea    r8,[rbp+0x180]
 100c106:	mov    edx,0x105
 100c10b:	lea    rcx,[rbp+0x70]
 100c10f:	call   QWORD PTR [rip+0xffffffffffff55ab]        # 0x10016c0
 100c115:	lea    r8,[rip+0xffffffffffff5dec]        # 0x1001f08
 100c11c:	lea    rdx,[rip+0x577cd]        # 0x10638f0
 100c123:	lea    rcx,[rsp+0x48]
 100c128:	call   0x100af10
 100c12d:	nop
 100c12e:	mov    rcx,rax
 100c131:	call   QWORD PTR [rip+0xffffffffffff59b1]        # 0x1001ae8
 100c137:	mov    rdx,rax
 100c13a:	mov    rcx,rbx
 100c13d:	call   QWORD PTR [rip+0xffffffffffff591d]        # 0x1001a60
 100c143:	test   eax,eax
 100c145:	sete   bl
 100c148:	lea    rcx,[rsp+0x48]
 100c14d:	call   QWORD PTR [rip+0xffffffffffff5955]        # 0x1001aa8
 100c153:	test   bl,bl
 100c155:	je     0x100c1be
 100c157:	mov    QWORD PTR [rsp+0x38],r12
 100c15c:	mov    QWORD PTR [rsp+0x30],r12
 100c161:	mov    DWORD PTR [rsp+0x28],r14d
 100c166:	lea    rax,[rsp+0x60]
 100c16b:	mov    QWORD PTR [rsp+0x20],rax
 100c170:	mov    r9d,edi
 100c173:	lea    r8,[rip+0xffffffffffff5d8e]        # 0x1001f08
 100c17a:	mov    edx,0x400
 100c17f:	xor    ecx,ecx
 100c181:	call   QWORD PTR [rip+0xffffffffffff5091]        # 0x1001218
 100c187:	lea    r11,[rsp+0x60]
 100c18c:	nop    DWORD PTR [rax+0x0]
 100c190:	inc    rdi
 100c193:	cmp    BYTE PTR [r11+rdi*1],0x0
 100c198:	jne    0x100c190
 100c19a:	sub    r14,rdi
 100c19d:	mov    r9,r14
 100c1a0:	lea    r8,[rbp+0x180]
 100c1a7:	mov    edx,0x105
 100c1ac:	lea    rcx,[rsp+0x60]
 100c1b1:	call   QWORD PTR [rip+0xffffffffffff5509]        # 0x10016c0
 100c1b7:	lea    r8,[rsp+0x60]
 100c1bc:	jmp    0x100c1c5
 100c1be:	lea    r8,[rbp+0x180]
 100c1c5:	mov    eax,0x1
 100c1ca:	mov    WORD PTR [rsp+0x38],ax
 100c1cf:	lea    rax,[rip+0xbda]        # 0x100cdb0
 100c1d6:	mov    QWORD PTR [rsp+0x30],rax
 100c1db:	lea    rax,[rip+0x95e]        # 0x100cb40
 100c1e2:	mov    QWORD PTR [rsp+0x28],rax
 100c1e7:	lea    rax,[rip+0xae2]        # 0x100ccd0
 100c1ee:	mov    QWORD PTR [rsp+0x20],rax
 100c1f3:	xor    r9d,r9d
 100c1f6:	lea    rdx,[rbp+0x70]
 100c1fa:	mov    rcx,QWORD PTR [rsi+0x48]
 100c1fe:	call   0x10408bc
 100c203:	test   eax,eax
 100c205:	jne    0x100c2bd
 100c20b:	cmp    BYTE PTR [rsi+0x2],al
 100c20e:	je     0x100c21a
 100c210:	cmp    DWORD PTR [rsi+0x50],0x1
 100c214:	je     0x100c2ae
 100c21a:	mov    edx,0x4000c3fb
 100c21f:	lea    rcx,[rsp+0x48]
 100c224:	call   0x10132d0
 100c229:	mov    rdi,rax
 100c22c:	lea    rdx,[rbp+0x290]
 100c233:	mov    ecx,DWORD PTR [rsi+0x50]
 100c236:	call   0x100cec0
 100c23b:	mov    rbx,rax
 100c23e:	mov    rcx,rdi
 100c241:	call   QWORD PTR [rip+0xffffffffffff58a1]        # 0x1001ae8
 100c247:	mov    rdx,rax
 100c24a:	mov    QWORD PTR [rsp+0x28],rbx
 100c24f:	mov    eax,DWORD PTR [rsi+0x54]
 100c252:	mov    DWORD PTR [rsp+0x20],eax
 100c256:	mov    r9d,DWORD PTR [rsi+0x50]
 100c25a:	mov    r8,r15
 100c25d:	lea    rcx,[rsp+0x40]
 100c262:	call   QWORD PTR [rip+0xffffffffffff57d8]        # 0x1001a40
 100c268:	nop
 100c269:	lea    rcx,[rsp+0x48]
 100c26e:	call   QWORD PTR [rip+0xffffffffffff5834]        # 0x1001aa8
 100c274:	mov    r11,QWORD PTR [rip+0x5766d]        # 0x10638e8
 100c27b:	mov    rbx,QWORD PTR [r11]
 100c27e:	lea    rcx,[rsp+0x40]
 100c283:	call   QWORD PTR [rip+0xffffffffffff585f]        # 0x1001ae8
 100c289:	mov    r8,rax
 100c28c:	mov    BYTE PTR [rsp+0x30],0x1
 100c291:	mov    BYTE PTR [rsp+0x28],0x1
 100c296:	mov    DWORD PTR [rsp+0x20],r12d
 100c29b:	xor    r9d,r9d
 100c29e:	mov    edx,0x4000c3fb
 100c2a3:	mov    rcx,QWORD PTR [rip+0x5763e]        # 0x10638e8
 100c2aa:	call   QWORD PTR [rbx+0x8]
 100c2ad:	nop
 100c2ae:	lea    rcx,[rsp+0x40]
 100c2b3:	call   QWORD PTR [rip+0xffffffffffff57ef]        # 0x1001aa8
 100c2b9:	xor    al,al
 100c2bb:	jmp    0x100c33a
 100c2bd:	mov    edx,0x4000c3ce
 100c2c2:	lea    rcx,[rsp+0x48]
 100c2c7:	call   0x10132d0
 100c2cc:	nop
 100c2cd:	mov    rcx,rax
 100c2d0:	call   QWORD PTR [rip+0xffffffffffff5812]        # 0x1001ae8
 100c2d6:	mov    rdx,rax
 100c2d9:	mov    r8,r15
 100c2dc:	lea    rcx,[rsp+0x40]
 100c2e1:	call   QWORD PTR [rip+0xffffffffffff5759]        # 0x1001a40
 100c2e7:	nop
 100c2e8:	lea    rcx,[rsp+0x48]
 100c2ed:	call   QWORD PTR [rip+0xffffffffffff57b5]        # 0x1001aa8
 100c2f3:	mov    r11,QWORD PTR [rip+0x575ee]        # 0x10638e8
 100c2fa:	mov    rbx,QWORD PTR [r11]
 100c2fd:	lea    rcx,[rsp+0x40]
 100c302:	call   QWORD PTR [rip+0xffffffffffff57e0]        # 0x1001ae8
 100c308:	mov    r8,rax
 100c30b:	mov    BYTE PTR [rsp+0x30],0x1
 100c310:	mov    BYTE PTR [rsp+0x28],0x1
 100c315:	mov    DWORD PTR [rsp+0x20],r12d
 100c31a:	xor    r9d,r9d
 100c31d:	mov    edx,0x4000c3ce
 100c322:	mov    rcx,QWORD PTR [rip+0x575bf]        # 0x10638e8
 100c329:	call   QWORD PTR [rbx+0x8]
 100c32c:	nop
 100c32d:	lea    rcx,[rsp+0x40]
 100c332:	call   QWORD PTR [rip+0xffffffffffff5770]        # 0x1001aa8
 100c338:	mov    al,0x1
 100c33a:	mov    rcx,QWORD PTR [rbp+0xa90]
 100c341:	xor    rcx,rsp
 100c344:	call   0x103ff40
 100c349:	add    rsp,0xba0
 100c350:	pop    r15
 100c352:	pop    r14
 100c354:	pop    r12
 100c356:	pop    rdi
 100c357:	pop    rsi
 100c358:	pop    rbx
 100c359:	pop    rbp
 100c35a:	ret    
 100c35b:	int3   
 100c35c:	int3   
 100c35d:	int3   
 100c35e:	int3   
 100c35f:	int3   
 100c360:	int3   
 100c361:	int3   
 100c362:	int3   
 100c363:	int3   
 100c364:	int3   
 100c365:	int3   
 100c366:	int3   
 100c367:	int3   
 100c368:	int3   
 100c369:	int3   
 100c36a:	int3   
 100c36b:	int3   
 100c36c:	int3   
 100c36d:	int3   
 100c36e:	int3   
 100c36f:	int3   
 100c370:	mov    QWORD PTR [rsp+0x8],rbx
 100c375:	mov    QWORD PTR [rsp+0x10],rsi
 100c37a:	push   rdi
 100c37b:	sub    rsp,0x20
 100c37f:	mov    rbx,rdx
 100c382:	mov    rdx,QWORD PTR [rcx+0x10]
 100c386:	xor    r8d,r8d
 100c389:	mov    rsi,rcx
 100c38c:	call   0x100c430
 100c391:	mov    rdx,rbx
 100c394:	lea    rcx,[rax+0x10]
 100c398:	mov    rdi,rax
 100c39b:	call   QWORD PTR [rip+0xffffffffffff56ff]        # 0x1001aa0
 100c3a1:	mov    r11,QWORD PTR [rsi+0x10]
 100c3a5:	mov    rax,rdi
 100c3a8:	test   r11,r11
 100c3ab:	je     0x100c3b2
 100c3ad:	mov    QWORD PTR [r11],rdi
 100c3b0:	jmp    0x100c3b6
 100c3b2:	mov    QWORD PTR [rsi+0x8],rdi
 100c3b6:	mov    rbx,QWORD PTR [rsp+0x30]
 100c3bb:	mov    QWORD PTR [rsi+0x10],rdi
 100c3bf:	mov    rsi,QWORD PTR [rsp+0x38]
 100c3c4:	add    rsp,0x20
 100c3c8:	pop    rdi
 100c3c9:	ret    
 100c3ca:	int3   
 100c3cb:	int3   
 100c3cc:	int3   
 100c3cd:	int3   
 100c3ce:	int3   
 100c3cf:	int3   
 100c3d0:	mov    QWORD PTR [rsp+0x8],rbx
 100c3d5:	push   rdi
 100c3d6:	sub    rsp,0x20
 100c3da:	mov    rbx,QWORD PTR [rcx+0x8]
 100c3de:	mov    rdi,rcx
 100c3e1:	test   rbx,rbx
 100c3e4:	je     0x100c3f8
 100c3e6:	lea    rcx,[rbx+0x10]
 100c3ea:	call   QWORD PTR [rip+0xffffffffffff56b8]        # 0x1001aa8
 100c3f0:	mov    rbx,QWORD PTR [rbx]
 100c3f3:	test   rbx,rbx
 100c3f6:	jne    0x100c3e6
 100c3f8:	mov    rcx,QWORD PTR [rdi+0x28]
 100c3fc:	xor    ebx,ebx
 100c3fe:	mov    QWORD PTR [rdi+0x18],rbx
 100c402:	mov    QWORD PTR [rdi+0x20],rbx
 100c406:	mov    QWORD PTR [rdi+0x10],rbx
 100c40a:	mov    QWORD PTR [rdi+0x8],rbx
 100c40e:	call   0x103f9ae
 100c413:	mov    QWORD PTR [rdi+0x28],rbx
 100c417:	mov    rbx,QWORD PTR [rsp+0x30]
 100c41c:	add    rsp,0x20
 100c420:	pop    rdi
 100c421:	ret    
 100c422:	int3   
 100c423:	int3   
 100c424:	int3   
 100c425:	int3   
 100c426:	int3   
 100c427:	int3   
 100c428:	int3   
 100c429:	int3   
 100c42a:	int3   
 100c42b:	int3   
 100c42c:	int3   
 100c42d:	int3   
 100c42e:	int3   
 100c42f:	int3   
 100c430:	mov    QWORD PTR [rsp+0x8],rbx
 100c435:	mov    QWORD PTR [rsp+0x10],rbp
 100c43a:	mov    QWORD PTR [rsp+0x18],rsi
 100c43f:	push   rdi
 100c440:	sub    rsp,0x20
 100c444:	cmp    QWORD PTR [rcx+0x20],0x0
 100c449:	mov    rsi,r8
 100c44c:	mov    rbp,rdx
 100c44f:	mov    rbx,rcx
 100c452:	jne    0x100c494
 100c454:	mov    rdx,QWORD PTR [rbx+0x30]
 100c458:	add    rcx,0x28
 100c45c:	mov    r8d,0x18
 100c462:	call   0x103f9a2
 100c467:	mov    rdx,QWORD PTR [rbx+0x30]
 100c46b:	add    rax,0x8
 100c46f:	lea    rcx,[rdx+rdx*2]
 100c473:	lea    rax,[rax+rcx*8]
 100c477:	add    rax,0xffffffffffffffe8
 100c47b:	dec    rdx
 100c47e:	js     0x100c494
 100c480:	mov    rcx,QWORD PTR [rbx+0x20]
 100c484:	mov    QWORD PTR [rax],rcx
 100c487:	mov    QWORD PTR [rbx+0x20],rax
 100c48b:	sub    rax,0x18
 100c48f:	dec    rdx
 100c492:	jns    0x100c480
 100c494:	mov    rdi,QWORD PTR [rbx+0x20]
 100c498:	test   rdi,rdi
 100c49b:	jne    0x100c4a3
 100c49d:	call   0x103f972
 100c4a2:	int3   
 100c4a3:	mov    rcx,QWORD PTR [rdi]
 100c4a6:	mov    QWORD PTR [rbx+0x20],rcx
 100c4aa:	lea    rcx,[rdi+0x10]
 100c4ae:	mov    QWORD PTR [rdi+0x8],rbp
 100c4b2:	mov    QWORD PTR [rdi],rsi
 100c4b5:	inc    QWORD PTR [rbx+0x18]
 100c4b9:	test   rcx,rcx
 100c4bc:	je     0x100c4c4
 100c4be:	call   QWORD PTR [rip+0xffffffffffff55fc]        # 0x1001ac0
 100c4c4:	mov    rbx,QWORD PTR [rsp+0x30]
 100c4c9:	mov    rbp,QWORD PTR [rsp+0x38]
 100c4ce:	mov    rsi,QWORD PTR [rsp+0x40]
 100c4d3:	mov    rax,rdi
 100c4d6:	add    rsp,0x20
 100c4da:	pop    rdi
 100c4db:	ret    
 100c4dc:	int3   
 100c4dd:	int3   
 100c4de:	int3   
 100c4df:	int3   
 100c4e0:	int3   
 100c4e1:	int3   
 100c4e2:	int3   
 100c4e3:	int3   
 100c4e4:	int3   
 100c4e5:	int3   
 100c4e6:	int3   
 100c4e7:	int3   
 100c4e8:	int3   
 100c4e9:	int3   
 100c4ea:	int3   
 100c4eb:	int3   
 100c4ec:	int3   
 100c4ed:	int3   
 100c4ee:	int3   
 100c4ef:	int3   
 100c4f0:	mov    QWORD PTR [rsp+0x8],rbx
 100c4f5:	push   rdi
 100c4f6:	sub    rsp,0x20
 100c4fa:	mov    rbx,QWORD PTR [rcx+0x8]
 100c4fe:	lea    rax,[rip+0xffffffffffff591b]        # 0x1001e20
 100c505:	mov    rdi,rcx
 100c508:	mov    QWORD PTR [rcx],rax
 100c50b:	test   rbx,rbx
 100c50e:	je     0x100c522
 100c510:	lea    rcx,[rbx+0x10]
 100c514:	call   QWORD PTR [rip+0xffffffffffff558e]        # 0x1001aa8
 100c51a:	mov    rbx,QWORD PTR [rbx]
 100c51d:	test   rbx,rbx
 100c520:	jne    0x100c510
 100c522:	mov    rcx,QWORD PTR [rdi+0x28]
 100c526:	xor    ebx,ebx
 100c528:	mov    QWORD PTR [rdi+0x18],rbx
 100c52c:	mov    QWORD PTR [rdi+0x20],rbx
 100c530:	mov    QWORD PTR [rdi+0x10],rbx
 100c534:	mov    QWORD PTR [rdi+0x8],rbx
 100c538:	call   0x103f9ae
 100c53d:	mov    QWORD PTR [rdi+0x28],rbx
 100c541:	mov    rbx,QWORD PTR [rsp+0x30]
 100c546:	add    rsp,0x20
 100c54a:	pop    rdi
 100c54b:	ret    
 100c54c:	int3   
 100c54d:	int3   
 100c54e:	int3   
 100c54f:	int3   
 100c550:	int3   
 100c551:	int3   
 100c552:	int3   
 100c553:	int3   
 100c554:	int3   
 100c555:	int3   
 100c556:	int3   
 100c557:	int3   
 100c558:	int3   
 100c559:	int3   
 100c55a:	int3   
 100c55b:	int3   
 100c55c:	int3   
 100c55d:	int3   
 100c55e:	int3   
 100c55f:	int3   
 100c560:	rex push rdi
 100c562:	sub    rsp,0x40
 100c566:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
 100c56f:	mov    QWORD PTR [rsp+0x50],rbx
 100c574:	mov    QWORD PTR [rsp+0x60],rbp
 100c579:	mov    QWORD PTR [rsp+0x68],rsi
 100c57e:	mov    rsi,rdx
 100c581:	mov    rdi,rcx
 100c584:	mov    eax,DWORD PTR [rdx+0x20]
 100c587:	not    eax
 100c589:	test   al,0x1
 100c58b:	je     0x100c5cf
 100c58d:	mov    rdx,QWORD PTR [rcx+0x18]
 100c591:	mov    rcx,rsi
 100c594:	call   0x103f996
 100c599:	mov    rbx,QWORD PTR [rdi+0x8]
 100c59d:	test   rbx,rbx
 100c5a0:	je     0x100c687
 100c5a6:	data16 nop WORD PTR [rax+rax*1+0x0]
 100c5b0:	lea    rdx,[rbx+0x10]
 100c5b4:	mov    r8d,0x1
 100c5ba:	mov    rcx,rsi
 100c5bd:	call   0x103fa1a
 100c5c2:	mov    rbx,QWORD PTR [rbx]
 100c5c5:	test   rbx,rbx
 100c5c8:	jne    0x100c5b0
 100c5ca:	jmp    0x100c687
 100c5cf:	mov    rcx,rdx
 100c5d2:	call   0x103f98a
 100c5d7:	mov    rbp,rax
 100c5da:	test   rax,rax
 100c5dd:	je     0x100c687
 100c5e3:	data16 data16 data16 data16 nop WORD PTR [rax+rax*1+0x0]
 100c5f0:	dec    rbp
 100c5f3:	mov    rcx,QWORD PTR [rip+0xffffffffffff54ae]        # 0x1001aa8
 100c5fa:	mov    QWORD PTR [rsp+0x20],rcx
 100c5ff:	mov    r9,QWORD PTR [rip+0xffffffffffff54ba]        # 0x1001ac0
 100c606:	mov    edx,0x8
 100c60b:	lea    r8d,[rdx-0x7]
 100c60f:	lea    rcx,[rsp+0x58]
 100c614:	call   0x103ffd8
 100c619:	nop
 100c61a:	mov    r8d,0x1
 100c620:	lea    rdx,[rsp+0x58]
 100c625:	mov    rcx,rsi
 100c628:	call   0x103fa1a
 100c62d:	xor    r8d,r8d
 100c630:	mov    rdx,QWORD PTR [rdi+0x10]
 100c634:	mov    rcx,rdi
 100c637:	call   0x100c430
 100c63c:	mov    rbx,rax
 100c63f:	lea    rcx,[rax+0x10]
 100c643:	lea    rdx,[rsp+0x58]
 100c648:	call   QWORD PTR [rip+0xffffffffffff5452]        # 0x1001aa0
 100c64e:	mov    r11,QWORD PTR [rdi+0x10]
 100c652:	test   r11,r11
 100c655:	je     0x100c65c
 100c657:	mov    QWORD PTR [r11],rbx
 100c65a:	jmp    0x100c660
 100c65c:	mov    QWORD PTR [rdi+0x8],rbx
 100c660:	mov    QWORD PTR [rdi+0x10],rbx
 100c664:	mov    r9,QWORD PTR [rip+0xffffffffffff543d]        # 0x1001aa8
 100c66b:	mov    edx,0x8
 100c670:	lea    r8d,[rdx-0x7]
 100c674:	lea    rcx,[rsp+0x58]
 100c679:	call   0x1040094
 100c67e:	test   rbp,rbp
 100c681:	jne    0x100c5f0
 100c687:	mov    rbx,QWORD PTR [rsp+0x50]
 100c68c:	mov    rbp,QWORD PTR [rsp+0x60]
 100c691:	mov    rsi,QWORD PTR [rsp+0x68]
 100c696:	add    rsp,0x40
 100c69a:	pop    rdi
 100c69b:	ret    
 100c69c:	int3   
 100c69d:	int3   
 100c69e:	int3   
 100c69f:	int3   
 100c6a0:	int3   
 100c6a1:	int3   
 100c6a2:	int3   
 100c6a3:	int3   
 100c6a4:	int3   
 100c6a5:	int3   
 100c6a6:	int3   
 100c6a7:	int3   
 100c6a8:	int3   
 100c6a9:	int3   
 100c6aa:	int3   
 100c6ab:	int3   
 100c6ac:	int3   
 100c6ad:	int3   
 100c6ae:	int3   
 100c6af:	int3   
 100c6b0:	mov    QWORD PTR [rsp+0x8],rbx
 100c6b5:	mov    QWORD PTR [rsp+0x10],rsi
 100c6ba:	push   rdi
 100c6bb:	sub    rsp,0x20
 100c6bf:	mov    rbx,QWORD PTR [rcx+0x8]
 100c6c3:	lea    rax,[rip+0xffffffffffff5756]        # 0x1001e20
 100c6ca:	mov    esi,edx
 100c6cc:	mov    rdi,rcx
 100c6cf:	mov    QWORD PTR [rcx],rax
 100c6d2:	test   rbx,rbx
 100c6d5:	je     0x100c6f2
 100c6d7:	nop    WORD PTR [rax+rax*1+0x0]
 100c6e0:	lea    rcx,[rbx+0x10]
 100c6e4:	call   QWORD PTR [rip+0xffffffffffff53be]        # 0x1001aa8
 100c6ea:	mov    rbx,QWORD PTR [rbx]
 100c6ed:	test   rbx,rbx
 100c6f0:	jne    0x100c6e0
 100c6f2:	mov    rcx,QWORD PTR [rdi+0x28]
 100c6f6:	xor    ebx,ebx
 100c6f8:	mov    QWORD PTR [rdi+0x18],rbx
 100c6fc:	mov    QWORD PTR [rdi+0x20],rbx
 100c700:	mov    QWORD PTR [rdi+0x10],rbx
 100c704:	mov    QWORD PTR [rdi+0x8],rbx
 100c708:	call   0x103f9ae
 100c70d:	mov    QWORD PTR [rdi+0x28],rbx
 100c711:	test   sil,0x1
 100c715:	je     0x100c71f
 100c717:	mov    rcx,rdi
 100c71a:	call   0x103f95a
 100c71f:	mov    rbx,QWORD PTR [rsp+0x30]
 100c724:	mov    rsi,QWORD PTR [rsp+0x38]
 100c729:	mov    rax,rdi
 100c72c:	add    rsp,0x20
 100c730:	pop    rdi
 100c731:	ret    
 100c732:	int3   
 100c733:	int3   
 100c734:	int3   
 100c735:	int3   
 100c736:	int3   
 100c737:	int3   
 100c738:	int3   
 100c739:	int3   
 100c73a:	int3   
 100c73b:	int3   
 100c73c:	int3   
 100c73d:	int3   
 100c73e:	int3   
 100c73f:	int3   
 100c740:	rex push rbx
 100c742:	sub    rsp,0x20
 100c746:	mov    ebx,ecx
 100c748:	call   QWORD PTR [rip+0xffffffffffff4e0a]        # 0x1001558
 100c74e:	mov    r8d,ebx
 100c751:	mov    rcx,rax
 100c754:	xor    edx,edx
 100c756:	add    rsp,0x20
 100c75a:	pop    rbx
 100c75b:	rex.W jmp QWORD PTR [rip+0xffffffffffff4e06]        # 0x1001568
 100c762:	int3   
 100c763:	int3   
 100c764:	int3   
 100c765:	int3   
 100c766:	int3   
 100c767:	int3   
 100c768:	int3   
 100c769:	int3   
 100c76a:	int3   
 100c76b:	int3   
 100c76c:	int3   
 100c76d:	int3   
 100c76e:	int3   
 100c76f:	int3   
 100c770:	rex push rbx
 100c772:	sub    rsp,0x20
 100c776:	mov    rbx,rcx
 100c779:	call   QWORD PTR [rip+0xffffffffffff4dd9]        # 0x1001558
 100c77f:	mov    r8,rbx
 100c782:	mov    rcx,rax
 100c785:	xor    edx,edx
 100c787:	add    rsp,0x20
 100c78b:	pop    rbx
 100c78c:	rex.W jmp QWORD PTR [rip+0xffffffffffff4dcd]        # 0x1001560
 100c793:	int3   
 100c794:	int3   
 100c795:	int3   
 100c796:	int3   
 100c797:	int3   
 100c798:	int3   
 100c799:	int3   
 100c79a:	int3   
 100c79b:	int3   
 100c79c:	int3   
 100c79d:	int3   
 100c79e:	int3   
 100c79f:	int3   
 100c7a0:	rex push rdi
 100c7a2:	sub    rsp,0x60
 100c7a6:	mov    QWORD PTR [rsp+0x50],0xfffffffffffffffe
 100c7af:	mov    QWORD PTR [rsp+0x70],rbx
 100c7b4:	mov    QWORD PTR [rsp+0x78],rsi
 100c7b9:	mov    rsi,r9
 100c7bc:	mov    rbx,rcx
 100c7bf:	bt     edx,0xa
 100c7c3:	jae    0x100c7c9
 100c7c5:	btr    edx,0xa
 100c7c9:	call   QWORD PTR [rip+0xffffffffffff4f41]        # 0x1001710
 100c7cf:	movsxd rdi,eax
 100c7d2:	cmp    edi,0xffffffff
 100c7d5:	jne    0x100c872
 100c7db:	call   QWORD PTR [rip+0xffffffffffff4f07]        # 0x10016e8
 100c7e1:	mov    ecx,DWORD PTR [rax]
 100c7e3:	mov    DWORD PTR [rsi],ecx
 100c7e5:	lea    rcx,[rsp+0x40]
 100c7ea:	call   QWORD PTR [rip+0xffffffffffff52d0]        # 0x1001ac0
 100c7f0:	nop
 100c7f1:	mov    edx,0xc000c3b9
 100c7f6:	lea    rcx,[rsp+0x48]
 100c7fb:	call   0x10132d0
 100c800:	nop
 100c801:	mov    rcx,rax
 100c804:	call   QWORD PTR [rip+0xffffffffffff52de]        # 0x1001ae8
 100c80a:	mov    rdx,rax
 100c80d:	mov    r9d,DWORD PTR [rsi]
 100c810:	mov    r8,rbx
 100c813:	lea    rcx,[rsp+0x40]
 100c818:	call   QWORD PTR [rip+0xffffffffffff5222]        # 0x1001a40
 100c81e:	nop
 100c81f:	lea    rcx,[rsp+0x48]
 100c824:	call   QWORD PTR [rip+0xffffffffffff527e]        # 0x1001aa8
 100c82a:	mov    r11,QWORD PTR [rip+0x570b7]        # 0x10638e8
 100c831:	mov    rbx,QWORD PTR [r11]
 100c834:	lea    rcx,[rsp+0x40]
 100c839:	call   QWORD PTR [rip+0xffffffffffff52a9]        # 0x1001ae8
 100c83f:	mov    r8,rax
 100c842:	mov    BYTE PTR [rsp+0x30],0x1
 100c847:	mov    BYTE PTR [rsp+0x28],0x1
 100c84c:	mov    DWORD PTR [rsp+0x20],0x0
 100c854:	xor    r9d,r9d
 100c857:	mov    edx,0xc000c3b9
 100c85c:	mov    rcx,QWORD PTR [rip+0x57085]        # 0x10638e8
 100c863:	call   QWORD PTR [rbx+0x8]
 100c866:	nop
 100c867:	lea    rcx,[rsp+0x40]
 100c86c:	call   QWORD PTR [rip+0xffffffffffff5236]        # 0x1001aa8
 100c872:	mov    rax,rdi
 100c875:	mov    rbx,QWORD PTR [rsp+0x70]
 100c87a:	mov    rsi,QWORD PTR [rsp+0x78]
 100c87f:	add    rsp,0x60
 100c883:	pop    rdi
 100c884:	ret    
 100c885:	int3   
 100c886:	int3   
 100c887:	int3   
 100c888:	int3   
 100c889:	int3   
 100c88a:	int3   
 100c88b:	int3   
 100c88c:	int3   
 100c88d:	int3   
 100c88e:	int3   
 100c88f:	int3   
 100c890:	mov    QWORD PTR [rsp+0x8],rbx
 100c895:	mov    QWORD PTR [rsp+0x10],rsi
 100c89a:	push   rdi
 100c89b:	sub    rsp,0x20
 100c89f:	mov    rsi,r9
 100c8a2:	mov    ebx,r8d
 100c8a5:	call   QWORD PTR [rip+0xffffffffffff4e55]        # 0x1001700
 100c8ab:	mov    edi,eax
 100c8ad:	cmp    eax,ebx
 100c8af:	je     0x100c8bd
 100c8b1:	call   QWORD PTR [rip+0xffffffffffff4e31]        # 0x10016e8
 100c8b7:	mov    ecx,DWORD PTR [rax]
 100c8b9:	mov    eax,edi
 100c8bb:	mov    DWORD PTR [rsi],ecx
 100c8bd:	mov    rbx,QWORD PTR [rsp+0x30]
 100c8c2:	mov    rsi,QWORD PTR [rsp+0x38]
 100c8c7:	add    rsp,0x20
 100c8cb:	pop    rdi
 100c8cc:	ret    
 100c8cd:	int3   
 100c8ce:	int3   
 100c8cf:	int3   
 100c8d0:	int3   
 100c8d1:	int3   
 100c8d2:	int3   
 100c8d3:	int3   
 100c8d4:	int3   
 100c8d5:	int3   
 100c8d6:	int3   
 100c8d7:	int3   
 100c8d8:	int3   
 100c8d9:	int3   
 100c8da:	int3   
 100c8db:	int3   
 100c8dc:	int3   
 100c8dd:	int3   
 100c8de:	int3   
 100c8df:	int3   
 100c8e0:	mov    QWORD PTR [rsp+0x8],rbx
 100c8e5:	mov    QWORD PTR [rsp+0x10],rsi
 100c8ea:	push   rdi
 100c8eb:	sub    rsp,0x20
 100c8ef:	mov    rsi,r9
 100c8f2:	mov    ebx,r8d
 100c8f5:	call   QWORD PTR [rip+0xffffffffffff4e0d]        # 0x1001708
 100c8fb:	mov    edi,eax
 100c8fd:	cmp    eax,ebx
 100c8ff:	je     0x100c90d
 100c901:	call   QWORD PTR [rip+0xffffffffffff4de1]        # 0x10016e8
 100c907:	mov    ecx,DWORD PTR [rax]
 100c909:	mov    eax,edi
 100c90b:	mov    DWORD PTR [rsi],ecx
 100c90d:	mov    rbx,QWORD PTR [rsp+0x30]
 100c912:	mov    rsi,QWORD PTR [rsp+0x38]
 100c917:	add    rsp,0x20
 100c91b:	pop    rdi
 100c91c:	ret    
 100c91d:	int3   
 100c91e:	int3   
 100c91f:	int3   
 100c920:	int3   
 100c921:	int3   
 100c922:	int3   
 100c923:	int3   
 100c924:	int3   
 100c925:	int3   
 100c926:	int3   
 100c927:	int3   
 100c928:	int3   
 100c929:	int3   
 100c92a:	int3   
 100c92b:	int3   
 100c92c:	int3   
 100c92d:	int3   
 100c92e:	int3   
 100c92f:	int3   
 100c930:	mov    QWORD PTR [rsp+0x8],rbx
 100c935:	push   rdi
 100c936:	sub    rsp,0x20
 100c93a:	mov    rdi,rdx
 100c93d:	call   QWORD PTR [rip+0xffffffffffff4dad]        # 0x10016f0
 100c943:	mov    ebx,eax
 100c945:	test   eax,eax
 100c947:	je     0x100c955
 100c949:	call   QWORD PTR [rip+0xffffffffffff4d99]        # 0x10016e8
 100c94f:	mov    ecx,DWORD PTR [rax]
 100c951:	mov    eax,ebx
 100c953:	mov    DWORD PTR [rdi],ecx
 100c955:	mov    rbx,QWORD PTR [rsp+0x30]
 100c95a:	add    rsp,0x20
 100c95e:	pop    rdi
 100c95f:	ret    
 100c960:	int3   
 100c961:	int3   
 100c962:	int3   
 100c963:	int3   
 100c964:	int3   
 100c965:	int3   
 100c966:	int3   
 100c967:	int3   
 100c968:	int3   
 100c969:	int3   
 100c96a:	int3   
 100c96b:	int3   
 100c96c:	int3   
 100c96d:	int3   
 100c96e:	int3   
 100c96f:	int3   
 100c970:	mov    QWORD PTR [rsp+0x8],rbx
 100c975:	push   rdi
 100c976:	sub    rsp,0x20
 100c97a:	mov    rdi,r9
 100c97d:	call   QWORD PTR [rip+0xffffffffffff4d75]        # 0x10016f8
 100c983:	mov    ebx,eax
 100c985:	cmp    eax,0xffffffff
 100c988:	jne    0x100c996
 100c98a:	call   QWORD PTR [rip+0xffffffffffff4d58]        # 0x10016e8
 100c990:	mov    ecx,DWORD PTR [rax]
 100c992:	mov    eax,ebx
 100c994:	mov    DWORD PTR [rdi],ecx
 100c996:	mov    rbx,QWORD PTR [rsp+0x30]
 100c99b:	add    rsp,0x20
 100c99f:	pop    rdi
 100c9a0:	ret    
 100c9a1:	int3   
 100c9a2:	int3   
 100c9a3:	int3   
 100c9a4:	int3   
 100c9a5:	int3   
 100c9a6:	int3   
 100c9a7:	int3   
 100c9a8:	int3   
 100c9a9:	int3   
 100c9aa:	int3   
 100c9ab:	int3   
 100c9ac:	int3   
 100c9ad:	int3   
 100c9ae:	int3   
 100c9af:	int3   
 100c9b0:	mov    QWORD PTR [rsp+0x8],rbx
 100c9b5:	push   rdi
 100c9b6:	sub    rsp,0x20
 100c9ba:	mov    rdi,rdx
 100c9bd:	call   QWORD PTR [rip+0xffffffffffff4d15]        # 0x10016d8
 100c9c3:	mov    ebx,eax
 100c9c5:	test   eax,eax
 100c9c7:	je     0x100c9d5
 100c9c9:	call   QWORD PTR [rip+0xffffffffffff4d19]        # 0x10016e8
 100c9cf:	mov    ecx,DWORD PTR [rax]
 100c9d1:	mov    eax,ebx
 100c9d3:	mov    DWORD PTR [rdi],ecx
 100c9d5:	mov    rbx,QWORD PTR [rsp+0x30]
 100c9da:	add    rsp,0x20
 100c9de:	pop    rdi
 100c9df:	ret    
 100c9e0:	int3   
 100c9e1:	int3   
 100c9e2:	int3   
 100c9e3:	int3   
 100c9e4:	int3   
 100c9e5:	int3   
 100c9e6:	int3   
 100c9e7:	int3   
 100c9e8:	int3   
 100c9e9:	int3   
 100c9ea:	int3   
 100c9eb:	int3   
 100c9ec:	int3   
 100c9ed:	int3   
 100c9ee:	int3   
 100c9ef:	int3   
 100c9f0:	mov    rax,QWORD PTR [rsp+0x28]
 100c9f5:	xor    ecx,ecx
 100c9f7:	mov    QWORD PTR [rax],rcx
 100c9fa:	mov    DWORD PTR [rax+0x8],ecx
 100c9fd:	mov    QWORD PTR [rax+0x10],rcx
 100ca01:	xor    eax,eax
 100ca03:	ret    
 100ca04:	int3   
 100ca05:	int3   
 100ca06:	int3   
 100ca07:	int3   
 100ca08:	int3   
 100ca09:	int3   
 100ca0a:	int3   
 100ca0b:	int3   
 100ca0c:	int3   
 100ca0d:	int3   
 100ca0e:	int3   
 100ca0f:	int3   
 100ca10:	rex push rbx
 100ca12:	push   rsi
 100ca13:	push   rdi
 100ca14:	sub    rsp,0x280
 100ca1b:	mov    QWORD PTR [rsp+0x58],0xfffffffffffffffe
 100ca24:	mov    rax,QWORD PTR [rip+0x56e45]        # 0x1063870
 100ca2b:	xor    rax,rsp
 100ca2e:	mov    QWORD PTR [rsp+0x270],rax
 100ca36:	mov    edi,edx
 100ca38:	mov    rsi,rcx
 100ca3b:	lea    rax,[rip+0xffffffffffff543e]        # 0x1001e80
 100ca42:	mov    QWORD PTR [rsp+0x48],rax
 100ca47:	lea    rax,[rip+0xffffffffffff543a]        # 0x1001e88
 100ca4e:	mov    QWORD PTR [rsp+0x50],rax
 100ca53:	mov    rax,QWORD PTR [r8+0x18]
 100ca57:	movzx  ebx,BYTE PTR [rax+0x1]
 100ca5b:	lea    rcx,[rip+0x56e9e]        # 0x1063900
 100ca62:	call   QWORD PTR [rip+0xffffffffffff5080]        # 0x1001ae8
 100ca68:	mov    rcx,rax
 100ca6b:	lea    r9,[rsp+0x60]
 100ca70:	xor    r8d,r8d
 100ca73:	mov    rdx,QWORD PTR [rsp+rbx*8+0x48]
 100ca78:	call   QWORD PTR [rip+0xffffffffffff474a]        # 0x10011c8
 100ca7e:	test   eax,eax
 100ca80:	je     0x100cad0
 100ca82:	lea    rcx,[rsp+0x60]
 100ca87:	or     rax,0xffffffffffffffff
 100ca8b:	nop    DWORD PTR [rax+rax*1+0x0]
 100ca90:	inc    rax
 100ca93:	cmp    WORD PTR [rcx+rax*2],0x0
 100ca98:	jne    0x100ca90
 100ca9a:	cmp    eax,edi
 100ca9c:	jge    0x100cad0
 100ca9e:	xor    eax,eax
 100caa0:	mov    QWORD PTR [rsp+0x38],rax
 100caa5:	mov    QWORD PTR [rsp+0x30],rax
 100caaa:	mov    DWORD PTR [rsp+0x28],edi
 100caae:	mov    QWORD PTR [rsp+0x20],rsi
 100cab3:	or     r9d,0xffffffff
 100cab7:	lea    r8,[rsp+0x60]
 100cabc:	mov    edx,0x400
 100cac1:	xor    ecx,ecx
 100cac3:	call   QWORD PTR [rip+0xffffffffffff474f]        # 0x1001218
 100cac9:	mov    eax,0x1
 100cace:	jmp    0x100cb1c
 100cad0:	lea    rcx,[rsp+0x40]
 100cad5:	call   QWORD PTR [rip+0xffffffffffff4fe5]        # 0x1001ac0
 100cadb:	nop
 100cadc:	call   QWORD PTR [rip+0xffffffffffff4a6e]        # 0x1001550
 100cae2:	mov    r8d,eax
 100cae5:	mov    r9d,edi
 100cae8:	lea    rdx,[rip+0xffffffffffff53a1]        # 0x1001e90
 100caef:	lea    rcx,[rsp+0x40]
 100caf4:	call   QWORD PTR [rip+0xffffffffffff4f46]        # 0x1001a40
 100cafa:	lea    rcx,[rsp+0x40]
 100caff:	call   QWORD PTR [rip+0xffffffffffff4fe3]        # 0x1001ae8
 100cb05:	mov    rcx,rax
 100cb08:	call   QWORD PTR [rip+0xffffffffffff49aa]        # 0x10014b8
 100cb0e:	nop
 100cb0f:	lea    rcx,[rsp+0x40]
 100cb14:	call   QWORD PTR [rip+0xffffffffffff4f8e]        # 0x1001aa8
 100cb1a:	xor    eax,eax
 100cb1c:	mov    rcx,QWORD PTR [rsp+0x270]
 100cb24:	xor    rcx,rsp
 100cb27:	call   0x103ff40
 100cb2c:	add    rsp,0x280
 100cb33:	pop    rdi
 100cb34:	pop    rsi
 100cb35:	pop    rbx
 100cb36:	ret    
 100cb37:	int3   
 100cb38:	int3   
 100cb39:	int3   
 100cb3a:	int3   
 100cb3b:	int3   
 100cb3c:	int3   
 100cb3d:	int3   
 100cb3e:	int3   
 100cb3f:	int3   
 100cb40:	rex push rdi
 100cb42:	sub    rsp,0x50
 100cb46:	mov    QWORD PTR [rsp+0x48],0xfffffffffffffffe
 100cb4f:	mov    QWORD PTR [rsp+0x60],rbx
 100cb54:	mov    QWORD PTR [rsp+0x68],rbp
 100cb59:	mov    QWORD PTR [rsp+0x70],rsi
 100cb5e:	mov    rbx,r9
 100cb61:	mov    esi,r8d
 100cb64:	mov    ebp,edx
 100cb66:	mov    edi,ecx
 100cb68:	lea    rcx,[rsp+0x78]
 100cb6d:	call   QWORD PTR [rip+0xffffffffffff4f4d]        # 0x1001ac0
 100cb73:	nop
 100cb74:	test   edi,edi
 100cb76:	jne    0x100cbfe
 100cb7c:	inc    QWORD PTR [rbx+0x10]
 100cb80:	mov    rcx,QWORD PTR [rbx+0x10]
 100cb84:	movabs rax,0xcccccccccccccccd
 100cb8e:	mul    rcx
 100cb91:	shr    rdx,0x7
 100cb95:	lea    rax,[rdx+rdx*4]
 100cb99:	shl    rax,0x5
 100cb9d:	cmp    rcx,rax
 100cba0:	jne    0x100cca7
 100cba6:	mov    edx,0x4000c3bf
 100cbab:	lea    rcx,[rsp+0x40]
 100cbb0:	call   0x10132d0
 100cbb5:	nop
 100cbb6:	mov    r9,QWORD PTR [rbx+0x10]
 100cbba:	shl    r9,0xf
 100cbbe:	mov    r8,QWORD PTR [rax]
 100cbc1:	lea    rdx,[rip+0xffffffffffff5280]        # 0x1001e48
 100cbc8:	lea    rcx,[rsp+0x78]
 100cbcd:	call   QWORD PTR [rip+0xffffffffffff4e6d]        # 0x1001a40
 100cbd3:	nop
 100cbd4:	lea    rcx,[rsp+0x40]
 100cbd9:	call   QWORD PTR [rip+0xffffffffffff4ec9]        # 0x1001aa8
 100cbdf:	mov    r11,QWORD PTR [rip+0x56d02]        # 0x10638e8
 100cbe6:	mov    rbx,QWORD PTR [r11]
 100cbe9:	lea    rcx,[rsp+0x78]
 100cbee:	call   QWORD PTR [rip+0xffffffffffff4ef4]        # 0x1001ae8
 100cbf4:	mov    edx,0x4000c3bf
 100cbf9:	jmp    0x100cc84
 100cbfe:	cmp    edi,0x1
 100cc01:	jne    0x100cca7
 100cc07:	xor    edx,edx
 100cc09:	mov    eax,ebp
 100cc0b:	div    esi
 100cc0d:	mov    ebx,eax
 100cc0f:	imul   ebx,ebx,0x64
 100cc12:	test   ebx,ebx
 100cc14:	je     0x100cca7
 100cc1a:	mov    eax,0x66666667
 100cc1f:	imul   ebx
 100cc21:	sar    edx,0x2
 100cc24:	mov    eax,edx
 100cc26:	shr    eax,0x1f
 100cc29:	add    edx,eax
 100cc2b:	lea    ecx,[rdx+rdx*4]
 100cc2e:	add    ecx,ecx
 100cc30:	cmp    ebx,ecx
 100cc32:	je     0x100cca7
 100cc34:	mov    edx,0x4000c3c0
 100cc39:	lea    rcx,[rsp+0x40]
 100cc3e:	call   0x10132d0
 100cc43:	nop
 100cc44:	mov    rcx,rax
 100cc47:	call   QWORD PTR [rip+0xffffffffffff4e9b]        # 0x1001ae8
 100cc4d:	mov    rdx,rax
 100cc50:	mov    r8d,ebx
 100cc53:	lea    rcx,[rsp+0x78]
 100cc58:	call   QWORD PTR [rip+0xffffffffffff4de2]        # 0x1001a40
 100cc5e:	nop
 100cc5f:	lea    rcx,[rsp+0x40]
 100cc64:	call   QWORD PTR [rip+0xffffffffffff4e3e]        # 0x1001aa8
 100cc6a:	mov    r11,QWORD PTR [rip+0x56c77]        # 0x10638e8
 100cc71:	mov    rbx,QWORD PTR [r11]
 100cc74:	lea    rcx,[rsp+0x78]
 100cc79:	call   QWORD PTR [rip+0xffffffffffff4e69]        # 0x1001ae8
 100cc7f:	mov    edx,0x4000c3c0
 100cc84:	mov    BYTE PTR [rsp+0x30],0x1
 100cc89:	mov    BYTE PTR [rsp+0x28],0x1
 100cc8e:	mov    DWORD PTR [rsp+0x20],0x0
 100cc96:	xor    r9d,r9d
 100cc99:	mov    r8,rax
 100cc9c:	mov    rcx,QWORD PTR [rip+0x56c45]        # 0x10638e8
 100cca3:	call   QWORD PTR [rbx+0x8]
 100cca6:	nop
 100cca7:	lea    rcx,[rsp+0x78]
 100ccac:	call   QWORD PTR [rip+0xffffffffffff4df6]        # 0x1001aa8
 100ccb2:	xor    eax,eax
 100ccb4:	mov    rbx,QWORD PTR [rsp+0x60]
 100ccb9:	mov    rbp,QWORD PTR [rsp+0x68]
 100ccbe:	mov    rsi,QWORD PTR [rsp+0x70]
 100ccc3:	add    rsp,0x50
 100ccc7:	pop    rdi
 100ccc8:	ret    
 100ccc9:	int3   
 100ccca:	int3   
 100cccb:	int3   
 100cccc:	int3   
 100cccd:	int3   
 100ccce:	int3   
 100cccf:	int3   
 100ccd0:	rex push rdi
 100ccd2:	sub    rsp,0x50
 100ccd6:	mov    QWORD PTR [rsp+0x40],0xfffffffffffffffe
 100ccdf:	mov    QWORD PTR [rsp+0x68],rbx
 100cce4:	mov    rbx,rcx
 100cce7:	lea    rcx,[rsp+0x60]
 100ccec:	call   QWORD PTR [rip+0xffffffffffff4dce]        # 0x1001ac0
 100ccf2:	nop
 100ccf3:	mov    eax,DWORD PTR [rbx+0x14]
 100ccf6:	mov    DWORD PTR [rsp+0x20],eax
 100ccfa:	lea    r9,[rip+0xffffffffffff516f]        # 0x1001e70
 100cd01:	mov    edx,0x100
 100cd06:	mov    r8d,edx
 100cd09:	lea    rcx,[rbx+0x122]
 100cd10:	call   QWORD PTR [rip+0xffffffffffff49ca]        # 0x10016e0
 100cd16:	mov    edx,0x4000c405
 100cd1b:	lea    rcx,[rsp+0x78]
 100cd20:	call   0x10132d0
 100cd25:	nop
 100cd26:	mov    rcx,rax
 100cd29:	call   QWORD PTR [rip+0xffffffffffff4db9]        # 0x1001ae8
 100cd2f:	mov    rdx,rax
 100cd32:	lea    r8,[rbx+0x122]
 100cd39:	lea    rcx,[rsp+0x60]
 100cd3e:	call   QWORD PTR [rip+0xffffffffffff4cfc]        # 0x1001a40
 100cd44:	nop
 100cd45:	lea    rcx,[rsp+0x78]
 100cd4a:	call   QWORD PTR [rip+0xffffffffffff4d58]        # 0x1001aa8
 100cd50:	mov    r11,QWORD PTR [rip+0x56b91]        # 0x10638e8
 100cd57:	mov    rbx,QWORD PTR [r11]
 100cd5a:	lea    rcx,[rsp+0x60]
 100cd5f:	call   QWORD PTR [rip+0xffffffffffff4d83]        # 0x1001ae8
 100cd65:	mov    r8,rax
 100cd68:	mov    BYTE PTR [rsp+0x30],0x1
 100cd6d:	mov    BYTE PTR [rsp+0x28],0x1
 100cd72:	mov    DWORD PTR [rsp+0x20],0x0
 100cd7a:	xor    r9d,r9d
 100cd7d:	mov    edx,0x4000c405
 100cd82:	mov    rcx,QWORD PTR [rip+0x56b5f]        # 0x10638e8
 100cd89:	call   QWORD PTR [rbx+0x8]
 100cd8c:	nop
 100cd8d:	lea    rcx,[rsp+0x60]
 100cd92:	call   QWORD PTR [rip+0xffffffffffff4d10]        # 0x1001aa8
 100cd98:	mov    eax,0x1
 100cd9d:	mov    rbx,QWORD PTR [rsp+0x68]
 100cda2:	add    rsp,0x50
 100cda6:	pop    rdi
 100cda7:	ret    
 100cda8:	int3   
 100cda9:	int3   
 100cdaa:	int3   
 100cdab:	int3   
 100cdac:	int3   
 100cdad:	int3   
 100cdae:	int3   
 100cdaf:	int3   
 100cdb0:	rex push rbx
 100cdb2:	push   rbp
 100cdb3:	push   rsi
 100cdb4:	push   rdi
 100cdb5:	push   r14
 100cdb7:	push   r15
 100cdb9:	sub    rsp,0x98
 100cdc0:	mov    rax,QWORD PTR [rip+0x56aa9]        # 0x1063870
 100cdc7:	xor    rax,rsp
 100cdca:	mov    QWORD PTR [rsp+0x80],rax
 100cdd2:	xor    r15d,r15d
 100cdd5:	mov    r14,r8
 100cdd8:	mov    rdi,r9
 100cddb:	mov    rbp,rdx
 100cdde:	mov    QWORD PTR [rsp+0x30],r15
 100cde3:	lea    r8d,[r15+0x1]
 100cde7:	xor    r9d,r9d
 100cdea:	mov    edx,0x80000000
 100cdef:	mov    DWORD PTR [rsp+0x28],0x8100080
 100cdf7:	mov    rsi,rcx
 100cdfa:	mov    DWORD PTR [rsp+0x20],0x3
 100ce02:	call   QWORD PTR [rip+0xffffffffffff43d0]        # 0x10011d8
 100ce08:	mov    rbx,rax
 100ce0b:	cmp    rax,0xffffffffffffffff
 100ce0f:	je     0x100ce2c
 100ce11:	lea    rdx,[rsp+0x48]
 100ce16:	mov    rcx,rax
 100ce19:	call   QWORD PTR [rip+0xffffffffffff4721]        # 0x1001540
 100ce1f:	test   eax,eax
 100ce21:	jne    0x100ce32
 100ce23:	mov    rcx,rbx
 100ce26:	call   QWORD PTR [rip+0xffffffffffff46ac]        # 0x10014d8
 100ce2c:	or     rax,0xffffffffffffffff
 100ce30:	jmp    0x100ce8f
 100ce32:	lea    rdx,[rsp+0x40]
 100ce37:	lea    rcx,[rsp+0x5c]
 100ce3c:	call   QWORD PTR [rip+0xffffffffffff468e]        # 0x10014d0
 100ce42:	lea    rcx,[rsp+0x40]
 100ce47:	mov    r8,r14
 100ce4a:	mov    rdx,rbp
 100ce4d:	call   QWORD PTR [rip+0xffffffffffff4675]        # 0x10014c8
 100ce53:	mov    rcx,rsi
 100ce56:	call   QWORD PTR [rip+0xffffffffffff438c]        # 0x10011e8
 100ce5c:	cmp    eax,0xffffffff
 100ce5f:	jne    0x100ce67
 100ce61:	mov    WORD PTR [rdi],r15w
 100ce65:	jmp    0x100ce6e
 100ce67:	and    ax,0x27
 100ce6b:	mov    WORD PTR [rdi],ax
 100ce6e:	mov    rcx,rbx
 100ce71:	call   QWORD PTR [rip+0xffffffffffff4661]        # 0x10014d8
 100ce77:	xor    r8d,r8d
 100ce7a:	mov    edx,0x8000
 100ce7f:	mov    rcx,rsi
 100ce82:	call   QWORD PTR [rip+0xffffffffffff4888]        # 0x1001710
 100ce88:	cmp    eax,0xffffffff
 100ce8b:	je     0x100ce2c
 100ce8d:	cdqe   
 100ce8f:	mov    rcx,QWORD PTR [rsp+0x80]
 100ce97:	xor    rcx,rsp
 100ce9a:	call   0x103ff40
 100ce9f:	add    rsp,0x98
 100cea6:	pop    r15
 100cea8:	pop    r14
 100ceaa:	pop    rdi
 100ceab:	pop    rsi
 100ceac:	pop    rbp
 100cead:	pop    rbx
 100ceae:	ret    
 100ceaf:	int3   
 100ceb0:	int3   
 100ceb1:	int3   
 100ceb2:	int3   
 100ceb3:	int3   
 100ceb4:	int3   
 100ceb5:	int3   
 100ceb6:	int3   
 100ceb7:	int3   
 100ceb8:	int3   
 100ceb9:	int3   
 100ceba:	int3   
 100cebb:	int3   
 100cebc:	int3   
 100cebd:	int3   
 100cebe:	int3   
 100cebf:	int3   
 100cec0:	rex push rdi
 100cec2:	sub    rsp,0x70
 100cec6:	mov    QWORD PTR [rsp+0x60],0xfffffffffffffffe
 100cecf:	mov    QWORD PTR [rsp+0x80],rbx
 100ced7:	mov    rbx,rdx
 100ceda:	movsxd rdi,ecx
 100cedd:	lea    rcx,[rsp+0x50]
 100cee2:	call   QWORD PTR [rip+0xffffffffffff4bd8]        # 0x1001ac0
 100cee8:	nop
 100cee9:	cmp    edi,0x8
 100ceec:	ja     0x100d112
 100cef2:	lea    rdx,[rip+0xffffffffffff3107]        # 0x1000000
 100cef9:	mov    ecx,DWORD PTR [rdx+rdi*4+0xd16c]
 100cf00:	add    rcx,rdx
 100cf03:	jmp    rcx
 100cf05:	mov    edx,0x4000c3c1
 100cf0a:	lea    rcx,[rsp+0x88]
 100cf12:	call   0x10132d0
 100cf17:	nop
 100cf18:	mov    rcx,rax
 100cf1b:	call   QWORD PTR [rip+0xffffffffffff4bc7]        # 0x1001ae8
 100cf21:	mov    r8,rax
 100cf24:	or     r9,0xffffffffffffffff
 100cf28:	mov    edx,0x400
 100cf2d:	mov    rcx,rbx
 100cf30:	call   QWORD PTR [rip+0xffffffffffff4772]        # 0x10016a8
 100cf36:	nop
 100cf37:	lea    rcx,[rsp+0x88]
 100cf3f:	jmp    0x100d146
 100cf44:	mov    edx,0xc000c3c2
 100cf49:	lea    rcx,[rsp+0x90]
 100cf51:	call   0x10132d0
 100cf56:	nop
 100cf57:	mov    rcx,rax
 100cf5a:	call   QWORD PTR [rip+0xffffffffffff4b88]        # 0x1001ae8
 100cf60:	mov    r8,rax
 100cf63:	or     r9,0xffffffffffffffff
 100cf67:	mov    edx,0x400
 100cf6c:	mov    rcx,rbx
 100cf6f:	call   QWORD PTR [rip+0xffffffffffff4733]        # 0x10016a8
 100cf75:	nop
 100cf76:	lea    rcx,[rsp+0x90]
 100cf7e:	jmp    0x100d146
 100cf83:	mov    edx,0xc000c3c3
 100cf88:	lea    rcx,[rsp+0x98]
 100cf90:	call   0x10132d0
 100cf95:	nop
 100cf96:	mov    rcx,rax
 100cf99:	call   QWORD PTR [rip+0xffffffffffff4b49]        # 0x1001ae8
 100cf9f:	mov    r8,rax
 100cfa2:	or     r9,0xffffffffffffffff
 100cfa6:	mov    edx,0x400
 100cfab:	mov    rcx,rbx
 100cfae:	call   QWORD PTR [rip+0xffffffffffff46f4]        # 0x10016a8
 100cfb4:	nop
 100cfb5:	lea    rcx,[rsp+0x98]
 100cfbd:	jmp    0x100d146
 100cfc2:	mov    edx,0xc000c3c4
 100cfc7:	lea    rcx,[rsp+0x28]
 100cfcc:	call   0x10132d0
 100cfd1:	nop
 100cfd2:	mov    rcx,rax
 100cfd5:	call   QWORD PTR [rip+0xffffffffffff4b0d]        # 0x1001ae8
 100cfdb:	mov    r8,rax
 100cfde:	or     r9,0xffffffffffffffff
 100cfe2:	mov    edx,0x400
 100cfe7:	mov    rcx,rbx
 100cfea:	call   QWORD PTR [rip+0xffffffffffff46b8]        # 0x10016a8
 100cff0:	nop
 100cff1:	lea    rcx,[rsp+0x28]
 100cff6:	jmp    0x100d146
 100cffb:	mov    edx,0xc000c3c5
 100d000:	lea    rcx,[rsp+0x48]
 100d005:	call   0x10132d0
 100d00a:	nop
 100d00b:	mov    rcx,rax
 100d00e:	call   QWORD PTR [rip+0xffffffffffff4ad4]        # 0x1001ae8
 100d014:	mov    r8,rax
 100d017:	or     r9,0xffffffffffffffff
 100d01b:	mov    edx,0x400
 100d020:	mov    rcx,rbx
 100d023:	call   QWORD PTR [rip+0xffffffffffff467f]        # 0x10016a8
 100d029:	nop
 100d02a:	lea    rcx,[rsp+0x48]
 100d02f:	jmp    0x100d146
 100d034:	mov    edx,0xc000c3c6
 100d039:	lea    rcx,[rsp+0x38]
 100d03e:	call   0x10132d0
 100d043:	nop
 100d044:	mov    rcx,rax
 100d047:	call   QWORD PTR [rip+0xffffffffffff4a9b]        # 0x1001ae8
 100d04d:	mov    r8,rax
 100d050:	or     r9,0xffffffffffffffff
 100d054:	mov    edx,0x400
 100d059:	mov    rcx,rbx
 100d05c:	call   QWORD PTR [rip+0xffffffffffff4646]        # 0x10016a8
 100d062:	nop
 100d063:	lea    rcx,[rsp+0x38]
 100d068:	jmp    0x100d146
 100d06d:	mov    edx,0xc000c3c7
 100d072:	lea    rcx,[rsp+0x58]
 100d077:	call   0x10132d0
 100d07c:	nop
 100d07d:	mov    rcx,rax
 100d080:	call   QWORD PTR [rip+0xffffffffffff4a62]        # 0x1001ae8
 100d086:	mov    r8,rax
 100d089:	or     r9,0xffffffffffffffff
 100d08d:	mov    edx,0x400
 100d092:	mov    rcx,rbx
 100d095:	call   QWORD PTR [rip+0xffffffffffff460d]        # 0x10016a8
 100d09b:	nop
 100d09c:	lea    rcx,[rsp+0x58]
 100d0a1:	jmp    0x100d146
 100d0a6:	mov    edx,0xc000c3c8
 100d0ab:	lea    rcx,[rsp+0x20]
 100d0b0:	call   0x10132d0
 100d0b5:	nop
 100d0b6:	mov    rcx,rax
 100d0b9:	call   QWORD PTR [rip+0xffffffffffff4a29]        # 0x1001ae8
 100d0bf:	mov    r8,rax
 100d0c2:	or     r9,0xffffffffffffffff
 100d0c6:	mov    edx,0x400
 100d0cb:	mov    rcx,rbx
 100d0ce:	call   QWORD PTR [rip+0xffffffffffff45d4]        # 0x10016a8
 100d0d4:	nop
 100d0d5:	lea    rcx,[rsp+0x20]
 100d0da:	jmp    0x100d146
 100d0dc:	mov    edx,0xc000c3c9
 100d0e1:	lea    rcx,[rsp+0x30]
 100d0e6:	call   0x10132d0
 100d0eb:	nop
 100d0ec:	mov    rcx,rax
 100d0ef:	call   QWORD PTR [rip+0xffffffffffff49f3]        # 0x1001ae8
 100d0f5:	mov    r8,rax
 100d0f8:	or     r9,0xffffffffffffffff
 100d0fc:	mov    edx,0x400
 100d101:	mov    rcx,rbx
 100d104:	call   QWORD PTR [rip+0xffffffffffff459e]        # 0x10016a8
 100d10a:	nop
 100d10b:	lea    rcx,[rsp+0x30]
 100d110:	jmp    0x100d146
 100d112:	mov    edx,0xc000c3ca
 100d117:	lea    rcx,[rsp+0x40]
 100d11c:	call   0x10132d0
 100d121:	nop
 100d122:	mov    rcx,rax
 100d125:	call   QWORD PTR [rip+0xffffffffffff49bd]        # 0x1001ae8
 100d12b:	mov    r8,rax
 100d12e:	or     r9,0xffffffffffffffff
 100d132:	mov    edx,0x400
 100d137:	mov    rcx,rbx
 100d13a:	call   QWORD PTR [rip+0xffffffffffff4568]        # 0x10016a8
 100d140:	nop
 100d141:	lea    rcx,[rsp+0x40]
 100d146:	call   QWORD PTR [rip+0xffffffffffff495c]        # 0x1001aa8
 100d14c:	nop
 100d14d:	lea    rcx,[rsp+0x50]
 100d152:	call   QWORD PTR [rip+0xffffffffffff4950]        # 0x1001aa8
 100d158:	mov    rax,rbx
 100d15b:	mov    rbx,QWORD PTR [rsp+0x80]
 100d163:	add    rsp,0x70
 100d167:	pop    rdi
 100d168:	ret    
 100d169:	nop    DWORD PTR [rax]
 100d16c:	add    eax,0x440000cf
 100d171:	iret   
 100d172:	add    BYTE PTR [rax],al
 100d174:	or     edi,0x0
 100d177:	add    dl,al
 100d179:	iret   
 100d17a:	add    BYTE PTR [rax],al
 100d17c:	sti    
 100d17d:	iret   
 100d17e:	add    BYTE PTR [rax],al
 100d180:	xor    al,0xd0
 100d182:	add    BYTE PTR [rax],al
 100d184:	ins    DWORD PTR es:[rdi],dx
 100d185:	rol    BYTE PTR [rax],1
 100d187:	add    BYTE PTR [rsi-0x23ffff30],ah
 100d18d:	rol    BYTE PTR [rax],1
 100d18f:	add    ah,cl
 100d191:	int3   
 100d192:	int3   
 100d193:	int3   
 100d194:	int3   
 100d195:	int3   
 100d196:	int3   
 100d197:	int3   
 100d198:	int3   
 100d199:	int3   
 100d19a:	int3   
 100d19b:	int3   
 100d19c:	int3   
 100d19d:	int3   
 100d19e:	int3   
 100d19f:	int3   
 100d1a0:	mov    QWORD PTR [rsp+0x8],rbx
 100d1a5:	push   rdi
 100d1a6:	sub    rsp,0x30
 100d1aa:	mov    rax,QWORD PTR [rsp+0x78]
 100d1af:	mov    r10,r9
 100d1b2:	movzx  r9d,BYTE PTR [rsp+0x68]
 100d1b8:	mov    QWORD PTR [rsp+0x28],rax
 100d1bd:	mov    rax,QWORD PTR [rsp+0x70]
 100d1c2:	mov    r11,r8
 100d1c5:	xor    edi,edi
 100d1c7:	mov    QWORD PTR [rcx+0x4018],rdx
 100d1ce:	mov    r8,r10
 100d1d1:	mov    rdx,r11
 100d1d4:	mov    QWORD PTR [rsp+0x20],rax
 100d1d9:	mov    rbx,rcx
 100d1dc:	mov    QWORD PTR [rcx],rdi
 100d1df:	mov    DWORD PTR [rcx+0x4010],edi
 100d1e5:	mov    QWORD PTR [rcx+0x8],rdi
 100d1e9:	call   0x100d640
 100d1ee:	test   al,al
 100d1f0:	je     0x100d205
 100d1f2:	mov    rdx,QWORD PTR [rsp+0x60]
 100d1f7:	mov    rcx,rbx
 100d1fa:	mov    DWORD PTR [rbx+0x4010],edi
 100d200:	call   0x100dcb0
 100d205:	mov    rax,rbx
 100d208:	mov    rbx,QWORD PTR [rsp+0x40]
 100d20d:	add    rsp,0x30
 100d211:	pop    rdi
 100d212:	ret    
 100d213:	int3   
 100d214:	int3   
 100d215:	int3   
 100d216:	int3   
 100d217:	int3   
 100d218:	int3   
 100d219:	int3   
 100d21a:	int3   
 100d21b:	int3   
 100d21c:	int3   
 100d21d:	int3   
 100d21e:	int3   
 100d21f:	int3   
 100d220:	rex push rbx
 100d222:	sub    rsp,0x20
 100d226:	mov    rbx,rcx
 100d229:	call   0x100dba0
 100d22e:	mov    rcx,QWORD PTR [rbx+0x8]
 100d232:	test   rcx,rcx
 100d235:	je     0x100d24a
 100d237:	call   0x10496f2
 100d23c:	mov    rdx,QWORD PTR [rbx+0x8]
 100d240:	mov    ecx,0x2
 100d245:	call   0x10496fe
 100d24a:	add    rsp,0x20
 100d24e:	pop    rbx
 100d24f:	ret    
 100d250:	int3   
 100d251:	int3   
 100d252:	int3   
 100d253:	int3   
 100d254:	int3   
 100d255:	int3   
 100d256:	int3   
 100d257:	int3   
 100d258:	int3   
 100d259:	int3   
 100d25a:	int3   
 100d25b:	int3   
 100d25c:	int3   
 100d25d:	int3   
 100d25e:	int3   
 100d25f:	int3   
 100d260:	rex push rbp
 100d262:	push   rsi
 100d263:	push   rdi
 100d264:	push   r14
 100d266:	push   r15
 100d268:	sub    rsp,0x50
 100d26c:	mov    QWORD PTR [rsp+0x40],0xfffffffffffffffe
 100d275:	mov    QWORD PTR [rsp+0x88],rbx
 100d27d:	movsxd rsi,r8d
 100d280:	mov    ebp,edx
 100d282:	mov    rdi,rcx
 100d285:	movsxd r14,DWORD PTR [rcx+0x4010]
 100d28c:	mov    rbx,r14
 100d28f:	add    rbx,rbx
 100d292:	mov    DWORD PTR [rcx+rbx*8+0x10],edx
 100d296:	mov    DWORD PTR [rcx+rbx*8+0x14],esi
 100d29a:	lea    rcx,[rsi+0x4]
 100d29e:	call   QWORD PTR [rip+0xffffffffffff4484]        # 0x1001728
 100d2a4:	mov    rdx,rax
 100d2a7:	mov    QWORD PTR [rdi+rbx*8+0x18],rax
 100d2ac:	test   rax,rax
 100d2af:	jne    0x100d2d9
 100d2b1:	mov    rcx,QWORD PTR [rdi+0x4018]
 100d2b8:	mov    rax,QWORD PTR [rcx]
 100d2bb:	mov    BYTE PTR [rsp+0x28],0x1
 100d2c0:	mov    BYTE PTR [rsp+0x20],0x1
 100d2c5:	xor    r9d,r9d
 100d2c8:	xor    r8d,r8d
 100d2cb:	mov    edx,0xc000c49b
 100d2d0:	call   QWORD PTR [rax]
 100d2d2:	xor    al,al
 100d2d4:	jmp    0x100d3f4
 100d2d9:	lea    eax,[r14+0x1]
 100d2dd:	mov    DWORD PTR [rsp+0x38],eax
 100d2e1:	mov    DWORD PTR [rsp+0x30],ebp
 100d2e5:	xor    r15d,r15d
 100d2e8:	mov    DWORD PTR [rsp+0x28],r15d
 100d2ed:	mov    QWORD PTR [rsp+0x20],r15
 100d2f2:	lea    r9d,[r15-0xa]
 100d2f6:	lea    r8d,[r15+0x4]
 100d2fa:	mov    rcx,QWORD PTR [rdi+0x8]
 100d2fe:	call   0x1049752
 100d303:	cmp    r15w,ax
 100d307:	jne    0x100d3ec
 100d30d:	lea    rcx,[rsp+0x80]
 100d315:	call   QWORD PTR [rip+0xffffffffffff47a5]        # 0x1001ac0
 100d31b:	nop
 100d31c:	mov    edx,0xc000c49c
 100d321:	lea    rcx,[rsp+0x98]
 100d329:	call   0x10132d0
 100d32e:	nop
 100d32f:	mov    rcx,rax
 100d332:	call   QWORD PTR [rip+0xffffffffffff47b0]        # 0x1001ae8
 100d338:	mov    rdx,rax
 100d33b:	mov    DWORD PTR [rsp+0x20],esi
 100d33f:	mov    r9d,ebp
 100d342:	mov    r8d,r14d
 100d345:	lea    rcx,[rsp+0x80]
 100d34d:	call   QWORD PTR [rip+0xffffffffffff46ed]        # 0x1001a40
 100d353:	nop
 100d354:	lea    rcx,[rsp+0x98]
 100d35c:	call   QWORD PTR [rip+0xffffffffffff4746]        # 0x1001aa8
 100d362:	lea    rcx,[rsp+0x80]
 100d36a:	call   QWORD PTR [rip+0xffffffffffff4778]        # 0x1001ae8
 100d370:	lea    r8d,[r15+0x2]
 100d374:	mov    BYTE PTR [rsp+0x28],0x1
 100d379:	mov    QWORD PTR [rsp+0x20],rax
 100d37e:	mov    r9,QWORD PTR [rdi+0x8]
 100d382:	lea    rdx,[rsp+0x98]
 100d38a:	mov    rcx,rdi
 100d38d:	call   0x100dee0
 100d392:	nop
 100d393:	mov    rcx,QWORD PTR [rdi+0x4018]
 100d39a:	mov    rbx,QWORD PTR [rcx]
 100d39d:	mov    rcx,rax
 100d3a0:	call   QWORD PTR [rip+0xffffffffffff4742]        # 0x1001ae8
 100d3a6:	mov    r8,rax
 100d3a9:	mov    BYTE PTR [rsp+0x30],0x1
 100d3ae:	mov    BYTE PTR [rsp+0x28],0x1
 100d3b3:	mov    DWORD PTR [rsp+0x20],r15d
 100d3b8:	xor    r9d,r9d
 100d3bb:	mov    edx,0xc000c49c
 100d3c0:	mov    rcx,QWORD PTR [rdi+0x4018]
 100d3c7:	call   QWORD PTR [rbx+0x8]
 100d3ca:	nop
 100d3cb:	lea    rcx,[rsp+0x98]
 100d3d3:	call   QWORD PTR [rip+0xffffffffffff46cf]        # 0x1001aa8
 100d3d9:	nop
 100d3da:	lea    rcx,[rsp+0x80]
 100d3e2:	call   QWORD PTR [rip+0xffffffffffff46c0]        # 0x1001aa8
 100d3e8:	xor    al,al
 100d3ea:	jmp    0x100d3f4
 100d3ec:	inc    DWORD PTR [rdi+0x4010]
 100d3f2:	mov    al,0x1
 100d3f4:	mov    rbx,QWORD PTR [rsp+0x88]
 100d3fc:	add    rsp,0x50
 100d400:	pop    r15
 100d402:	pop    r14
 100d404:	pop    rdi
 100d405:	pop    rsi
 100d406:	pop    rbp
 100d407:	ret    
 100d408:	int3   
 100d409:	int3   
 100d40a:	int3   
 100d40b:	int3   
 100d40c:	int3   
 100d40d:	int3   
 100d40e:	int3   
 100d40f:	int3   
 100d410:	mov    DWORD PTR [rsp+0x18],r8d
 100d415:	sub    rsp,0x38
 100d419:	mov    BYTE PTR [rsp+0x20],r9b
 100d41e:	lea    r8,[rsp+0x50]
 100d423:	mov    r9d,0x4
 100d429:	call   0x100e330
 100d42e:	add    rsp,0x38
 100d432:	ret    
 100d433:	int3   
 100d434:	int3   
 100d435:	int3   
 100d436:	int3   
 100d437:	int3   
 100d438:	int3   
 100d439:	int3   
 100d43a:	int3   
 100d43b:	int3   
 100d43c:	int3   
 100d43d:	int3   
 100d43e:	int3   
 100d43f:	int3   
 100d440:	sub    rsp,0x38
 100d444:	or     rax,0xffffffffffffffff
 100d448:	nop    DWORD PTR [rax+rax*1+0x0]
 100d450:	inc    rax
 100d453:	cmp    WORD PTR [r8+rax*2],0x0
 100d459:	jne    0x100d450
 100d45b:	add    eax,eax
 100d45d:	mov    BYTE PTR [rsp+0x20],r9b
 100d462:	mov    r9d,eax
 100d465:	call   0x100e330
 100d46a:	add    rsp,0x38
 100d46e:	ret    
 100d46f:	int3   
 100d470:	int3   
 100d471:	int3   
 100d472:	int3   
 100d473:	int3   
 100d474:	int3   
 100d475:	int3   
 100d476:	int3   
 100d477:	int3   
 100d478:	int3   
 100d479:	int3   
 100d47a:	int3   
 100d47b:	int3   
 100d47c:	int3   
 100d47d:	int3   
 100d47e:	int3   
 100d47f:	int3   
 100d480:	rex push rdi
 100d482:	sub    rsp,0x50
 100d486:	mov    QWORD PTR [rsp+0x40],0xfffffffffffffffe
 100d48f:	mov    QWORD PTR [rsp+0x70],rbx
 100d494:	mov    QWORD PTR [rsp+0x78],rsi
 100d499:	mov    rdi,rcx
 100d49c:	mov    rcx,QWORD PTR [rcx+0x8]
 100d4a0:	call   0x104978e
 100d4a5:	xor    esi,esi
 100d4a7:	cmp    si,ax
 100d4aa:	jne    0x100d53b
 100d4b0:	mov    edx,0xc000c4a1
 100d4b5:	lea    rcx,[rsp+0x68]
 100d4ba:	call   0x10132d0
 100d4bf:	nop
 100d4c0:	mov    rcx,rax
 100d4c3:	call   QWORD PTR [rip+0xffffffffffff461f]        # 0x1001ae8
 100d4c9:	lea    r8d,[rsi+0x2]
 100d4cd:	mov    BYTE PTR [rsp+0x28],0x1
 100d4d2:	mov    QWORD PTR [rsp+0x20],rax
 100d4d7:	mov    r9,QWORD PTR [rdi+0x8]
 100d4db:	lea    rdx,[rsp+0x60]
 100d4e0:	mov    rcx,rdi
 100d4e3:	call   0x100dee0
 100d4e8:	nop
 100d4e9:	mov    rcx,QWORD PTR [rdi+0x4018]
 100d4f0:	mov    rbx,QWORD PTR [rcx]
 100d4f3:	mov    rcx,rax
 100d4f6:	call   QWORD PTR [rip+0xffffffffffff45ec]        # 0x1001ae8
 100d4fc:	mov    r8,rax
 100d4ff:	mov    BYTE PTR [rsp+0x30],0x1
 100d504:	mov    BYTE PTR [rsp+0x28],0x1
 100d509:	mov    DWORD PTR [rsp+0x20],esi
 100d50d:	xor    r9d,r9d
 100d510:	mov    edx,0xc000c4a1
 100d515:	mov    rcx,QWORD PTR [rdi+0x4018]
 100d51c:	call   QWORD PTR [rbx+0x8]
 100d51f:	nop
 100d520:	lea    rcx,[rsp+0x60]
 100d525:	call   QWORD PTR [rip+0xffffffffffff457d]        # 0x1001aa8
 100d52b:	nop
 100d52c:	lea    rcx,[rsp+0x68]
 100d531:	call   QWORD PTR [rip+0xffffffffffff4571]        # 0x1001aa8
 100d537:	xor    al,al
 100d539:	jmp    0x100d53d
 100d53b:	mov    al,0x1
 100d53d:	mov    rbx,QWORD PTR [rsp+0x70]
 100d542:	mov    rsi,QWORD PTR [rsp+0x78]
 100d547:	add    rsp,0x50
 100d54b:	pop    rdi
 100d54c:	ret    
 100d54d:	int3   
 100d54e:	int3   
 100d54f:	int3   
 100d550:	int3   
 100d551:	int3   
 100d552:	int3   
 100d553:	int3   
 100d554:	int3   
 100d555:	int3   
 100d556:	int3   
 100d557:	int3   
 100d558:	int3   
 100d559:	int3   
 100d55a:	int3   
 100d55b:	int3   
 100d55c:	int3   
 100d55d:	int3   
 100d55e:	int3   
 100d55f:	int3   
 100d560:	rex push rdi
 100d562:	sub    rsp,0x50
 100d566:	mov    QWORD PTR [rsp+0x40],0xfffffffffffffffe
 100d56f:	mov    QWORD PTR [rsp+0x70],rbx
 100d574:	mov    QWORD PTR [rsp+0x78],rsi
 100d579:	mov    rsi,rcx
 100d57c:	mov    rcx,QWORD PTR [rcx+0x8]
 100d580:	call   0x1049746
 100d585:	mov    edi,eax
 100d587:	cmp    eax,0xffffffff
 100d58a:	jne    0x100d61d
 100d590:	mov    edx,0xc000c499
 100d595:	lea    rcx,[rsp+0x68]
 100d59a:	call   0x10132d0
 100d59f:	nop
 100d5a0:	mov    rcx,rax
 100d5a3:	call   QWORD PTR [rip+0xffffffffffff453f]        # 0x1001ae8
 100d5a9:	lea    r8d,[rdi+0x3]
 100d5ad:	mov    BYTE PTR [rsp+0x28],0x1
 100d5b2:	mov    QWORD PTR [rsp+0x20],rax
 100d5b7:	mov    r9,QWORD PTR [rsi+0x8]
 100d5bb:	lea    rdx,[rsp+0x60]
 100d5c0:	mov    rcx,rsi
 100d5c3:	call   0x100dee0
 100d5c8:	nop
 100d5c9:	mov    rcx,QWORD PTR [rsi+0x4018]
 100d5d0:	mov    rbx,QWORD PTR [rcx]
 100d5d3:	mov    rcx,rax
 100d5d6:	call   QWORD PTR [rip+0xffffffffffff450c]        # 0x1001ae8
 100d5dc:	mov    r8,rax
 100d5df:	mov    BYTE PTR [rsp+0x30],0x1
 100d5e4:	mov    BYTE PTR [rsp+0x28],0x1
 100d5e9:	mov    DWORD PTR [rsp+0x20],0x0
 100d5f1:	xor    r9d,r9d
 100d5f4:	mov    edx,0xc000c499
 100d5f9:	mov    rcx,QWORD PTR [rsi+0x4018]
 100d600:	call   QWORD PTR [rbx+0x8]
 100d603:	nop
 100d604:	lea    rcx,[rsp+0x60]
 100d609:	call   QWORD PTR [rip+0xffffffffffff4499]        # 0x1001aa8
 100d60f:	nop
 100d610:	lea    rcx,[rsp+0x68]
 100d615:	call   QWORD PTR [rip+0xffffffffffff448d]        # 0x1001aa8
 100d61b:	mov    eax,edi
 100d61d:	mov    rbx,QWORD PTR [rsp+0x70]
 100d622:	mov    rsi,QWORD PTR [rsp+0x78]
 100d627:	add    rsp,0x50
 100d62b:	pop    rdi
 100d62c:	ret    
 100d62d:	int3   
 100d62e:	int3   
 100d62f:	int3   
 100d630:	int3   
 100d631:	int3   
 100d632:	int3   
 100d633:	int3   
 100d634:	int3   
 100d635:	int3   
 100d636:	int3   
 100d637:	int3   
 100d638:	int3   
 100d639:	int3   
 100d63a:	int3   
 100d63b:	int3   
 100d63c:	int3   
 100d63d:	int3   
 100d63e:	int3   
 100d63f:	int3   
 100d640:	rex push rbp
 100d642:	push   rbx
 100d643:	push   rsi
 100d644:	push   rdi
 100d645:	push   r12
 100d647:	push   r13
 100d649:	push   r14
 100d64b:	push   r15
 100d64d:	lea    rbp,[rsp-0x798]
 100d655:	sub    rsp,0x898
 100d65c:	mov    QWORD PTR [rsp+0x70],0xfffffffffffffffe
 100d665:	mov    rax,QWORD PTR [rip+0x56204]        # 0x1063870
 100d66c:	xor    rax,rsp
 100d66f:	mov    QWORD PTR [rbp+0x780],rax
 100d676:	movzx  ebx,r9b
 100d67a:	mov    BYTE PTR [rsp+0x40],bl
 100d67e:	mov    r14,r8
 100d681:	mov    QWORD PTR [rsp+0x60],r8
 100d686:	mov    r13,rdx
 100d689:	mov    rsi,rcx
 100d68c:	mov    r12,QWORD PTR [rbp+0x800]
 100d693:	mov    rdi,QWORD PTR [rbp+0x808]
 100d69a:	lea    rdx,[rip+0xffffffffffff4b5f]        # 0x1002200
 100d6a1:	lea    rcx,[rsp+0x48]
 100d6a6:	call   QWORD PTR [rip+0xffffffffffff4404]        # 0x1001ab0
 100d6ac:	nop
 100d6ad:	xor    r15d,r15d
 100d6b0:	mov    WORD PTR [rbp-0x80],r15w
 100d6b5:	xor    edx,edx
 100d6b7:	mov    r8d,0x7fe
 100d6bd:	lea    rcx,[rbp-0x7e]
 100d6c1:	call   0x104026c
 100d6c6:	mov    WORD PTR [rsp+0x58],r15w
 100d6cc:	lea    rcx,[rsp+0x48]
 100d6d1:	test   bl,bl
 100d6d3:	je     0x100d6de
 100d6d5:	lea    rdx,[rip+0xffffffffffff4b64]        # 0x1002240
 100d6dc:	jmp    0x100d713
 100d6de:	lea    rdx,[rip+0xffffffffffff4b93]        # 0x1002278
 100d6e5:	call   QWORD PTR [rip+0xffffffffffff43a5]        # 0x1001a90
 100d6eb:	mov    rdx,r12
 100d6ee:	lea    rcx,[rsp+0x48]
 100d6f3:	call   QWORD PTR [rip+0xffffffffffff4397]        # 0x1001a90
 100d6f9:	lea    rdx,[rip+0xffffffffffff4bb0]        # 0x10022b0
 100d700:	lea    rcx,[rsp+0x48]
 100d705:	call   QWORD PTR [rip+0xffffffffffff4385]        # 0x1001a90
 100d70b:	mov    rdx,rdi
 100d70e:	lea    rcx,[rsp+0x48]
 100d713:	call   QWORD PTR [rip+0xffffffffffff4377]        # 0x1001a90
 100d719:	or     rbx,0xffffffffffffffff
 100d71d:	test   rdi,rdi
 100d720:	je     0x100d736
 100d722:	mov    rcx,rbx
 100d725:	inc    rcx
 100d728:	cmp    WORD PTR [rdi+rcx*2],0x0
 100d72d:	jne    0x100d725
 100d72f:	add    rcx,rcx
 100d732:	xor    eax,eax
 100d734:	rep stos BYTE PTR es:[rdi],al
 100d736:	lea    rdx,[rip+0xffffffffffff4b83]        # 0x10022c0
 100d73d:	lea    rcx,[rsp+0x48]
 100d742:	call   QWORD PTR [rip+0xffffffffffff4348]        # 0x1001a90
 100d748:	mov    rdx,r13
 100d74b:	lea    rcx,[rsp+0x48]
 100d750:	call   QWORD PTR [rip+0xffffffffffff433a]        # 0x1001a90
 100d756:	lea    rdx,[rip+0xffffffffffff4b7b]        # 0x10022d8
 100d75d:	lea    rcx,[rsp+0x48]
 100d762:	call   QWORD PTR [rip+0xffffffffffff4328]        # 0x1001a90
 100d768:	mov    rdx,r14
 100d76b:	lea    rcx,[rsp+0x48]
 100d770:	call   QWORD PTR [rip+0xffffffffffff431a]        # 0x1001a90
 100d776:	cmp    QWORD PTR [rsi],0x0
 100d77a:	jne    0x100d86a
 100d780:	mov    ecx,0x1
 100d785:	mov    r8,rsi
 100d788:	xor    edx,edx
 100d78a:	call   0x10496e6
 100d78f:	test   ax,0xfffe
 100d793:	je     0x100d7bb
 100d795:	mov    rcx,QWORD PTR [rsi+0x4018]
 100d79c:	mov    rax,QWORD PTR [rcx]
 100d79f:	mov    BYTE PTR [rsp+0x28],0x1
 100d7a4:	mov    BYTE PTR [rsp+0x20],0x1
 100d7a9:	xor    r9d,r9d
 100d7ac:	xor    r8d,r8d
 100d7af:	mov    edx,0xc000c492
 100d7b4:	call   QWORD PTR [rax]
 100d7b6:	jmp    0x100dafa
 100d7bb:	mov    edx,0xc8
 100d7c0:	mov    r9d,0xfffffffa
 100d7c6:	lea    r8d,[r9+0x9]
 100d7ca:	mov    rcx,QWORD PTR [rsi]
 100d7cd:	call   0x104970a
 100d7d2:	test   ax,0xfffe
 100d7d6:	je     0x100d86a
 100d7dc:	mov    edx,0xc000c493
 100d7e1:	lea    rcx,[rsp+0x60]
 100d7e6:	call   0x10132d0
 100d7eb:	nop
 100d7ec:	mov    rcx,rax
 100d7ef:	call   QWORD PTR [rip+0xffffffffffff42f3]        # 0x1001ae8
 100d7f5:	mov    r8d,0x1
 100d7fb:	mov    BYTE PTR [rsp+0x28],0x0
 100d800:	mov    QWORD PTR [rsp+0x20],rax
 100d805:	mov    r9,QWORD PTR [rsi]
 100d808:	lea    rdx,[rsp+0x50]
 100d80d:	mov    rcx,rsi
 100d810:	call   0x100dee0
 100d815:	mov    rcx,rax
 100d818:	mov    rax,QWORD PTR [rsi+0x4018]
 100d81f:	mov    rdi,QWORD PTR [rax]
 100d822:	call   QWORD PTR [rip+0xffffffffffff42c0]        # 0x1001ae8
 100d828:	mov    r8,rax
 100d82b:	mov    BYTE PTR [rsp+0x30],0x1
 100d830:	mov    BYTE PTR [rsp+0x28],0x1
 100d835:	xor    eax,eax
 100d837:	mov    DWORD PTR [rsp+0x20],eax
 100d83b:	xor    r9d,r9d
 100d83e:	mov    edx,0xc000c493
 100d843:	mov    rcx,QWORD PTR [rsi+0x4018]
 100d84a:	call   QWORD PTR [rdi+0x8]
 100d84d:	nop
 100d84e:	lea    rcx,[rsp+0x50]
 100d853:	call   QWORD PTR [rip+0xffffffffffff424f]        # 0x1001aa8
 100d859:	nop
 100d85a:	lea    rcx,[rsp+0x60]
 100d85f:	call   QWORD PTR [rip+0xffffffffffff4243]        # 0x1001aa8
 100d865:	jmp    0x100dafa
 100d86a:	mov    ecx,0x2
 100d86f:	lea    r8,[rsi+0x8]
 100d873:	mov    rdx,QWORD PTR [rsi]
 100d876:	call   0x10496e6
 100d87b:	test   ax,0xfffe
 100d87f:	je     0x100d913
 100d885:	mov    edx,0xc000c494
 100d88a:	lea    rcx,[rsp+0x50]
 100d88f:	call   0x10132d0
 100d894:	nop
 100d895:	mov    rcx,rax
 100d898:	call   QWORD PTR [rip+0xffffffffffff424a]        # 0x1001ae8
 100d89e:	mov    r8d,0x1
 100d8a4:	mov    BYTE PTR [rsp+0x28],0x0
 100d8a9:	mov    QWORD PTR [rsp+0x20],rax
 100d8ae:	mov    r9,QWORD PTR [rsi]
 100d8b1:	lea    rdx,[rsp+0x60]
 100d8b6:	mov    rcx,rsi
 100d8b9:	call   0x100dee0
 100d8be:	mov    rcx,rax
 100d8c1:	mov    rax,QWORD PTR [rsi+0x4018]
 100d8c8:	mov    rdi,QWORD PTR [rax]
 100d8cb:	call   QWORD PTR [rip+0xffffffffffff4217]        # 0x1001ae8
 100d8d1:	mov    r8,rax
 100d8d4:	mov    BYTE PTR [rsp+0x30],0x1
 100d8d9:	mov    BYTE PTR [rsp+0x28],0x1
 100d8de:	xor    eax,eax
 100d8e0:	mov    DWORD PTR [rsp+0x20],eax
 100d8e4:	xor    r9d,r9d
 100d8e7:	mov    edx,0xc000c494
 100d8ec:	mov    rcx,QWORD PTR [rsi+0x4018]
 100d8f3:	call   QWORD PTR [rdi+0x8]
 100d8f6:	nop
 100d8f7:	lea    rcx,[rsp+0x60]
 100d8fc:	call   QWORD PTR [rip+0xffffffffffff41a6]        # 0x1001aa8
 100d902:	nop
 100d903:	lea    rcx,[rsp+0x50]
 100d908:	call   QWORD PTR [rip+0xffffffffffff419a]        # 0x1001aa8
 100d90e:	jmp    0x100dafa
 100d913:	mov    edx,0x4c3
 100d918:	mov    r9d,0xfffffffa
 100d91e:	lea    r8d,[r9+0x7]
 100d922:	mov    rcx,QWORD PTR [rsi+0x8]
 100d926:	call   0x104972e
 100d92b:	test   ax,0xfffe
 100d92f:	je     0x100d9c4
 100d935:	mov    edx,0xc000c495
 100d93a:	lea    rcx,[rsp+0x50]
 100d93f:	call   0x10132d0
 100d944:	nop
 100d945:	mov    rcx,rax
 100d948:	call   QWORD PTR [rip+0xffffffffffff419a]        # 0x1001ae8
 100d94e:	mov    r8d,0x2
 100d954:	mov    BYTE PTR [rsp+0x28],0x0
 100d959:	mov    QWORD PTR [rsp+0x20],rax
 100d95e:	mov    r9,QWORD PTR [rsi+0x8]
 100d962:	lea    rdx,[rsp+0x60]
 100d967:	mov    rcx,rsi
 100d96a:	call   0x100dee0
 100d96f:	mov    rcx,rax
 100d972:	mov    rax,QWORD PTR [rsi+0x4018]
 100d979:	mov    rdi,QWORD PTR [rax]
 100d97c:	call   QWORD PTR [rip+0xffffffffffff4166]        # 0x1001ae8
 100d982:	mov    r8,rax
 100d985:	mov    BYTE PTR [rsp+0x30],0x1
 100d98a:	mov    BYTE PTR [rsp+0x28],0x1
 100d98f:	xor    eax,eax
 100d991:	mov    DWORD PTR [rsp+0x20],eax
 100d995:	xor    r9d,r9d
 100d998:	mov    edx,0xc000c495
 100d99d:	mov    rcx,QWORD PTR [rsi+0x4018]
 100d9a4:	call   QWORD PTR [rdi+0x8]
 100d9a7:	nop
 100d9a8:	lea    rcx,[rsp+0x60]
 100d9ad:	call   QWORD PTR [rip+0xffffffffffff40f5]        # 0x1001aa8
 100d9b3:	nop
 100d9b4:	lea    rcx,[rsp+0x50]
 100d9b9:	call   QWORD PTR [rip+0xffffffffffff40e9]        # 0x1001aa8
 100d9bf:	jmp    0x100dafa
 100d9c4:	mov    edi,0x400
 100d9c9:	lea    rcx,[rsp+0x48]
 100d9ce:	call   QWORD PTR [rip+0xffffffffffff4114]        # 0x1001ae8
 100d9d4:	mov    r8,rax
 100d9d7:	xor    eax,eax
 100d9d9:	mov    WORD PTR [rsp+0x38],ax
 100d9de:	lea    rax,[rsp+0x58]
 100d9e3:	mov    QWORD PTR [rsp+0x30],rax
 100d9e8:	mov    WORD PTR [rsp+0x28],di
 100d9ed:	lea    rax,[rbp-0x80]
 100d9f1:	mov    QWORD PTR [rsp+0x20],rax
 100d9f6:	mov    r9d,0xfffffffd
 100d9fc:	xor    edx,edx
 100d9fe:	mov    rcx,QWORD PTR [rsi+0x8]
 100da02:	call   0x104973a
 100da07:	test   ax,0xfffe
 100da0b:	je     0x100daf7
 100da11:	lea    rcx,[rsp+0x50]
 100da16:	call   QWORD PTR [rip+0xffffffffffff40a4]        # 0x1001ac0
 100da1c:	nop
 100da1d:	mov    edx,0xc000c496
 100da22:	lea    rcx,[rsp+0x68]
 100da27:	call   0x10132d0
 100da2c:	nop
 100da2d:	lea    rcx,[rip+0xffffffffffff48bc]        # 0x10022f0
 100da34:	lea    rdi,[rip+0xffffffffffff48bd]        # 0x10022f8
 100da3b:	cmp    BYTE PTR [rsp+0x40],0x0
 100da40:	cmovne rdi,rcx
 100da44:	mov    rcx,rax
 100da47:	call   QWORD PTR [rip+0xffffffffffff409b]        # 0x1001ae8
 100da4d:	mov    rdx,rax
 100da50:	mov    QWORD PTR [rsp+0x28],r12
 100da55:	mov    QWORD PTR [rsp+0x20],rdi
 100da5a:	mov    r9,QWORD PTR [rsp+0x60]
 100da5f:	mov    r8,r13
 100da62:	lea    rcx,[rsp+0x50]
 100da67:	call   QWORD PTR [rip+0xffffffffffff3fd3]        # 0x1001a40
 100da6d:	nop
 100da6e:	lea    rcx,[rsp+0x68]
 100da73:	call   QWORD PTR [rip+0xffffffffffff402f]        # 0x1001aa8
 100da79:	lea    rcx,[rsp+0x50]
 100da7e:	call   QWORD PTR [rip+0xffffffffffff4064]        # 0x1001ae8
 100da84:	mov    r8d,0x2
 100da8a:	mov    BYTE PTR [rsp+0x28],0x0
 100da8f:	mov    QWORD PTR [rsp+0x20],rax
 100da94:	mov    r9,QWORD PTR [rsi+0x8]
 100da98:	lea    rdx,[rsp+0x68]
 100da9d:	mov    rcx,rsi
 100daa0:	call   0x100dee0
 100daa5:	mov    rcx,rax
 100daa8:	mov    rax,QWORD PTR [rsi+0x4018]
 100daaf:	mov    rdi,QWORD PTR [rax]
 100dab2:	call   QWORD PTR [rip+0xffffffffffff4030]        # 0x1001ae8
 100dab8:	mov    r8,rax
 100dabb:	mov    BYTE PTR [rsp+0x30],0x1
 100dac0:	mov    BYTE PTR [rsp+0x28],0x1
 100dac5:	xor    eax,eax
 100dac7:	mov    DWORD PTR [rsp+0x20],eax
 100dacb:	xor    r9d,r9d
 100dace:	mov    edx,0xc000c496
 100dad3:	mov    rcx,QWORD PTR [rsi+0x4018]
 100dada:	call   QWORD PTR [rdi+0x8]
 100dadd:	nop
 100dade:	lea    rcx,[rsp+0x68]
 100dae3:	call   QWORD PTR [rip+0xffffffffffff3fbf]        # 0x1001aa8
 100dae9:	nop
 100daea:	lea    rcx,[rsp+0x50]
 100daef:	call   QWORD PTR [rip+0xffffffffffff3fb3]        # 0x1001aa8
 100daf5:	jmp    0x100dafa
 100daf7:	mov    r15b,0x1
 100dafa:	lea    rcx,[rsp+0x48]
 100daff:	call   QWORD PTR [rip+0xffffffffffff3feb]        # 0x1001af0
 100db05:	test   eax,eax
 100db07:	je     0x100db45
 100db09:	lea    rcx,[rsp+0x48]
 100db0e:	call   QWORD PTR [rip+0xffffffffffff3fdc]        # 0x1001af0
 100db14:	mov    edx,eax
 100db16:	lea    rcx,[rsp+0x48]
 100db1b:	call   QWORD PTR [rip+0xffffffffffff3ec7]        # 0x10019e8
 100db21:	mov    rcx,rbx
 100db24:	inc    rcx
 100db27:	cmp    WORD PTR [rax+rcx*2],0x0
 100db2c:	jne    0x100db24
 100db2e:	add    rcx,rcx
 100db31:	mov    rdi,rax
 100db34:	xor    eax,eax
 100db36:	rep stos BYTE PTR es:[rdi],al
 100db38:	mov    edx,ebx
 100db3a:	lea    rcx,[rsp+0x48]
 100db3f:	call   QWORD PTR [rip+0xffffffffffff3e9b]        # 0x10019e0
 100db45:	cmp    WORD PTR [rbp-0x80],0x0
 100db4a:	je     0x100db66
 100db4c:	lea    rax,[rbp-0x80]
 100db50:	inc    rbx
 100db53:	cmp    WORD PTR [rax+rbx*2],0x0
 100db58:	jne    0x100db50
 100db5a:	lea    rcx,[rbx+rbx*1]
 100db5e:	lea    rdi,[rbp-0x80]
 100db62:	xor    eax,eax
 100db64:	rep stos BYTE PTR es:[rdi],al
 100db66:	lea    rcx,[rsp+0x48]
 100db6b:	call   QWORD PTR [rip+0xffffffffffff3f37]        # 0x1001aa8
 100db71:	movzx  eax,r15b
 100db75:	mov    rcx,QWORD PTR [rbp+0x780]
 100db7c:	xor    rcx,rsp
 100db7f:	call   0x103ff40
 100db84:	add    rsp,0x898
 100db8b:	pop    r15
 100db8d:	pop    r14
 100db8f:	pop    r13
 100db91:	pop    r12
 100db93:	pop    rdi
 100db94:	pop    rsi
 100db95:	pop    rbx
 100db96:	pop    rbp
 100db97:	ret    
 100db98:	int3   
 100db99:	int3   
 100db9a:	int3   
 100db9b:	int3   
 100db9c:	int3   
 100db9d:	int3   
 100db9e:	int3   
 100db9f:	int3   
 100dba0:	mov    rax,rsp
 100dba3:	push   rsi
 100dba4:	push   rdi
 100dba5:	push   r14
 100dba7:	sub    rsp,0x50
 100dbab:	mov    QWORD PTR [rax-0x28],0xfffffffffffffffe
 100dbb3:	mov    QWORD PTR [rax+0x18],rbx
 100dbb7:	mov    QWORD PTR [rax+0x20],rbp
 100dbbb:	mov    rsi,rcx
 100dbbe:	mov    rcx,QWORD PTR [rcx+0x8]
 100dbc2:	call   0x1049776
 100dbc7:	mov    ebp,eax
 100dbc9:	xor    r14d,r14d
 100dbcc:	cmp    eax,0xffffffff
 100dbcf:	jne    0x100dc5d
 100dbd5:	mov    edx,0xc000c49a
 100dbda:	lea    rcx,[rsp+0x78]
 100dbdf:	call   0x10132d0
 100dbe4:	nop
 100dbe5:	mov    rcx,rax
 100dbe8:	call   QWORD PTR [rip+0xffffffffffff3efa]        # 0x1001ae8
 100dbee:	lea    r8d,[rbp+0x3]
 100dbf2:	mov    BYTE PTR [rsp+0x28],0x1
 100dbf7:	mov    QWORD PTR [rsp+0x20],rax
 100dbfc:	mov    r9,QWORD PTR [rsi+0x8]
 100dc00:	lea    rdx,[rsp+0x70]
 100dc05:	mov    rcx,rsi
 100dc08:	call   0x100dee0
 100dc0d:	nop
 100dc0e:	mov    rcx,QWORD PTR [rsi+0x4018]
 100dc15:	mov    rbx,QWORD PTR [rcx]
 100dc18:	mov    rcx,rax
 100dc1b:	call   QWORD PTR [rip+0xffffffffffff3ec7]        # 0x1001ae8
 100dc21:	mov    r8,rax
 100dc24:	mov    BYTE PTR [rsp+0x30],0x1
 100dc29:	mov    BYTE PTR [rsp+0x28],0x1
 100dc2e:	mov    DWORD PTR [rsp+0x20],r14d
 100dc33:	xor    r9d,r9d
 100dc36:	mov    edx,0xc000c49a
 100dc3b:	mov    rcx,QWORD PTR [rsi+0x4018]
 100dc42:	call   QWORD PTR [rbx+0x8]
 100dc45:	nop
 100dc46:	lea    rcx,[rsp+0x70]
 100dc4b:	call   QWORD PTR [rip+0xffffffffffff3e57]        # 0x1001aa8
 100dc51:	nop
 100dc52:	lea    rcx,[rsp+0x78]
 100dc57:	call   QWORD PTR [rip+0xffffffffffff3e4b]        # 0x1001aa8
 100dc5d:	mov    edi,r14d
 100dc60:	cmp    DWORD PTR [rsi+0x4010],r14d
 100dc67:	jle    0x100dc8f
 100dc69:	lea    rbx,[rsi+0x18]
 100dc6d:	nop    DWORD PTR [rax]
 100dc70:	mov    rcx,QWORD PTR [rbx]
 100dc73:	test   rcx,rcx
 100dc76:	je     0x100dc81
 100dc78:	call   QWORD PTR [rip+0xffffffffffff3a32]        # 0x10016b0
 100dc7e:	mov    QWORD PTR [rbx],r14
 100dc81:	inc    edi
 100dc83:	add    rbx,0x10
 100dc87:	cmp    edi,DWORD PTR [rsi+0x4010]
 100dc8d:	jl     0x100dc70
 100dc8f:	mov    eax,ebp
 100dc91:	lea    r11,[rsp+0x50]
 100dc96:	mov    rbx,QWORD PTR [r11+0x30]
 100dc9a:	mov    rbp,QWORD PTR [r11+0x38]
 100dc9e:	mov    rsp,r11
 100dca1:	pop    r14
 100dca3:	pop    rdi
 100dca4:	pop    rsi
 100dca5:	ret    
 100dca6:	int3   
 100dca7:	int3   
 100dca8:	int3   
 100dca9:	int3   
 100dcaa:	int3   
 100dcab:	int3   
 100dcac:	int3   
 100dcad:	int3   
 100dcae:	int3   
 100dcaf:	int3   
 100dcb0:	rex push rbx
 100dcb2:	push   rsi
 100dcb3:	push   rdi
 100dcb4:	sub    rsp,0x50
 100dcb8:	mov    QWORD PTR [rsp+0x40],0xfffffffffffffffe
 100dcc1:	mov    rbx,rdx
 100dcc4:	mov    rdi,rcx
 100dcc7:	lea    rcx,[rsp+0x70]
 100dccc:	call   QWORD PTR [rip+0xffffffffffff3dee]        # 0x1001ac0
 100dcd2:	nop
 100dcd3:	mov    r8,rbx
 100dcd6:	lea    rdx,[rip+0xffffffffffff4623]        # 0x1002300
 100dcdd:	lea    rcx,[rsp+0x70]
 100dce2:	call   QWORD PTR [rip+0xffffffffffff3d58]        # 0x1001a40
 100dce8:	lea    rcx,[rsp+0x70]
 100dced:	call   QWORD PTR [rip+0xffffffffffff3df5]        # 0x1001ae8
 100dcf3:	mov    r9,rax
 100dcf6:	mov    DWORD PTR [rsp+0x20],0x1
 100dcfe:	xor    r8d,r8d
 100dd01:	mov    rdx,rbx
 100dd04:	mov    rcx,QWORD PTR [rdi+0x8]
 100dd08:	call   0x1049782
 100dd0d:	xor    esi,esi
 100dd0f:	cmp    si,ax
 100dd12:	jne    0x100ddfe
 100dd18:	lea    rcx,[rsp+0x80]
 100dd20:	call   QWORD PTR [rip+0xffffffffffff3d9a]        # 0x1001ac0
 100dd26:	nop
 100dd27:	mov    edx,0xc000c497
 100dd2c:	lea    rcx,[rsp+0x88]
 100dd34:	call   0x10132d0
 100dd39:	nop
 100dd3a:	mov    rcx,rax
 100dd3d:	call   QWORD PTR [rip+0xffffffffffff3da5]        # 0x1001ae8
 100dd43:	mov    rdx,rax
 100dd46:	mov    r8,rbx
 100dd49:	lea    rcx,[rsp+0x80]
 100dd51:	call   QWORD PTR [rip+0xffffffffffff3ce9]        # 0x1001a40
 100dd57:	nop
 100dd58:	lea    rcx,[rsp+0x88]
 100dd60:	call   QWORD PTR [rip+0xffffffffffff3d42]        # 0x1001aa8
 100dd66:	lea    rcx,[rsp+0x80]
 100dd6e:	call   QWORD PTR [rip+0xffffffffffff3d74]        # 0x1001ae8
 100dd74:	lea    r8d,[rsi+0x2]
 100dd78:	mov    BYTE PTR [rsp+0x28],0x1
 100dd7d:	mov    QWORD PTR [rsp+0x20],rax
 100dd82:	mov    r9,QWORD PTR [rdi+0x8]
 100dd86:	lea    rdx,[rsp+0x88]
 100dd8e:	mov    rcx,rdi
 100dd91:	call   0x100dee0
 100dd96:	nop
 100dd97:	mov    rcx,QWORD PTR [rdi+0x4018]
 100dd9e:	mov    rbx,QWORD PTR [rcx]
 100dda1:	mov    rcx,rax
 100dda4:	call   QWORD PTR [rip+0xffffffffffff3d3e]        # 0x1001ae8
 100ddaa:	mov    r8,rax
 100ddad:	mov    BYTE PTR [rsp+0x30],0x1
 100ddb2:	mov    BYTE PTR [rsp+0x28],0x1
 100ddb7:	mov    DWORD PTR [rsp+0x20],esi
 100ddbb:	xor    r9d,r9d
 100ddbe:	mov    edx,0xc000c497
 100ddc3:	mov    rcx,QWORD PTR [rdi+0x4018]
 100ddca:	call   QWORD PTR [rbx+0x8]
 100ddcd:	nop
 100ddce:	lea    rcx,[rsp+0x88]
 100ddd6:	call   QWORD PTR [rip+0xffffffffffff3ccc]        # 0x1001aa8
 100dddc:	nop
 100dddd:	lea    rcx,[rsp+0x80]
 100dde5:	call   QWORD PTR [rip+0xffffffffffff3cbd]        # 0x1001aa8
 100ddeb:	nop
 100ddec:	lea    rcx,[rsp+0x70]
 100ddf1:	call   QWORD PTR [rip+0xffffffffffff3cb1]        # 0x1001aa8
 100ddf7:	xor    al,al
 100ddf9:	jmp    0x100dece
 100ddfe:	lea    r8,[rip+0xffffffffffff451b]        # 0x1002320
 100de05:	mov    edx,0xb
 100de0a:	mov    rcx,QWORD PTR [rdi+0x8]
 100de0e:	call   0x104976a
 100de13:	cmp    si,ax
 100de16:	jne    0x100dec1
 100de1c:	mov    edx,0xc000c498
 100de21:	lea    rcx,[rsp+0x88]
 100de29:	call   0x10132d0
 100de2e:	nop
 100de2f:	mov    rcx,rax
 100de32:	call   QWORD PTR [rip+0xffffffffffff3cb0]        # 0x1001ae8
 100de38:	mov    r8d,0x2
 100de3e:	mov    BYTE PTR [rsp+0x28],0x1
 100de43:	mov    QWORD PTR [rsp+0x20],rax
 100de48:	mov    r9,QWORD PTR [rdi+0x8]
 100de4c:	lea    rdx,[rsp+0x80]
 100de54:	mov    rcx,rdi
 100de57:	call   0x100dee0
 100de5c:	nop
 100de5d:	mov    rcx,QWORD PTR [rdi+0x4018]
 100de64:	mov    rbx,QWORD PTR [rcx]
 100de67:	mov    rcx,rax
 100de6a:	call   QWORD PTR [rip+0xffffffffffff3c78]        # 0x1001ae8
 100de70:	mov    r8,rax
 100de73:	mov    BYTE PTR [rsp+0x30],0x1
 100de78:	mov    BYTE PTR [rsp+0x28],0x1
 100de7d:	mov    DWORD PTR [rsp+0x20],esi
 100de81:	xor    r9d,r9d
 100de84:	mov    edx,0xc000c498
 100de89:	mov    rcx,QWORD PTR [rdi+0x4018]
 100de90:	call   QWORD PTR [rbx+0x8]
 100de93:	nop
 100de94:	lea    rcx,[rsp+0x80]
 100de9c:	call   QWORD PTR [rip+0xffffffffffff3c06]        # 0x1001aa8
 100dea2:	nop
 100dea3:	lea    rcx,[rsp+0x88]
 100deab:	call   QWORD PTR [rip+0xffffffffffff3bf7]        # 0x1001aa8
 100deb1:	nop
 100deb2:	lea    rcx,[rsp+0x70]
 100deb7:	call   QWORD PTR [rip+0xffffffffffff3beb]        # 0x1001aa8
 100debd:	xor    al,al
 100debf:	jmp    0x100dece
 100dec1:	lea    rcx,[rsp+0x70]
 100dec6:	call   QWORD PTR [rip+0xffffffffffff3bdc]        # 0x1001aa8
 100decc:	mov    al,0x1
 100dece:	add    rsp,0x50
 100ded2:	pop    rdi
 100ded3:	pop    rsi
 100ded4:	pop    rbx
 100ded5:	ret    
 100ded6:	int3   
 100ded7:	int3   
 100ded8:	int3   
 100ded9:	int3   
 100deda:	int3   
 100dedb:	int3   
 100dedc:	int3   
 100dedd:	int3   
 100dede:	int3   
 100dedf:	int3   
 100dee0:	rex push rbp
 100dee2:	push   rsi
 100dee3:	push   rdi
 100dee4:	push   r12
 100dee6:	push   r13
 100dee8:	push   r14
 100deea:	push   r15
 100deec:	lea    rbp,[rsp-0x11b0]
 100def4:	mov    eax,0x12b0
 100def9:	call   0x1040290
 100defe:	sub    rsp,rax
 100df01:	mov    QWORD PTR [rsp+0x78],0xfffffffffffffffe
 100df0a:	mov    QWORD PTR [rsp+0x12f0],rbx
 100df12:	mov    rax,QWORD PTR [rip+0x55957]        # 0x1063870
 100df19:	xor    rax,rsp
 100df1c:	mov    QWORD PTR [rbp+0x11a0],rax
 100df23:	mov    r12,r9
 100df26:	movzx  r15d,r8w
 100df2a:	mov    rbx,rdx
 100df2d:	mov    QWORD PTR [rsp+0x70],rdx
 100df32:	mov    r14,QWORD PTR [rbp+0x1210]
 100df39:	xor    r13d,r13d
 100df3c:	mov    DWORD PTR [rsp+0x64],r13d
 100df41:	movzx  edi,r13w
 100df45:	mov    WORD PTR [rbp+0x9a0],r13w
 100df4d:	xor    edx,edx
 100df4f:	mov    r8d,0x7fe
 100df55:	lea    rcx,[rbp+0x9a2]
 100df5c:	call   0x104026c
 100df61:	mov    WORD PTR [rbp+0x1a0],r13w
 100df69:	xor    edx,edx
 100df6b:	mov    r8d,0x7fe
 100df71:	lea    rcx,[rbp+0x1a2]
 100df78:	call   0x104026c
 100df7d:	mov    DWORD PTR [rsp+0x58],r13d
 100df82:	mov    WORD PTR [rsp+0x4c],r13w
 100df88:	lea    esi,[r13+0x1]
 100df8c:	mov    DWORD PTR [rsp+0x5c],r13d
 100df91:	mov    DWORD PTR [rsp+0x50],r13d
 100df96:	mov    DWORD PTR [rsp+0x54],r13d
 100df9b:	lea    rdx,[rip+0xffffffffffff3e6e]        # 0x1001e10
 100dfa2:	lea    rcx,[rsp+0x40]
 100dfa7:	call   QWORD PTR [rip+0xffffffffffff3b03]        # 0x1001ab0
 100dfad:	nop
 100dfae:	mov    edx,0xc000c4a2
 100dfb3:	mov    rcx,rbx
 100dfb6:	call   0x10132d0
 100dfbb:	mov    DWORD PTR [rsp+0x64],esi
 100dfbf:	test   r14,r14
 100dfc2:	je     0x100dfe0
 100dfc4:	mov    rdx,r14
 100dfc7:	mov    rcx,rbx
 100dfca:	call   QWORD PTR [rip+0xffffffffffff3ac0]        # 0x1001a90
 100dfd0:	lea    rdx,[rip+0xffffffffffff40e9]        # 0x10020c0
 100dfd7:	mov    rcx,rbx
 100dfda:	call   QWORD PTR [rip+0xffffffffffff3ab0]        # 0x1001a90
 100dfe0:	mov    ecx,0x3ff
 100dfe5:	movzx  r14d,BYTE PTR [rbp+0x1218]
 100dfed:	nop    DWORD PTR [rax]
 100dff0:	cmp    di,0xfffe
 100dff4:	je     0x100e2f1
 100dffa:	cmp    di,0xffff
 100dffe:	je     0x100e2f1
 100e004:	lea    rax,[rsp+0x4c]
 100e009:	mov    QWORD PTR [rsp+0x38],rax
 100e00e:	mov    WORD PTR [rsp+0x30],cx
 100e013:	lea    rax,[rbp+0x1a0]
 100e01a:	mov    QWORD PTR [rsp+0x28],rax
 100e01f:	lea    rax,[rsp+0x58]
 100e024:	mov    QWORD PTR [rsp+0x20],rax
 100e029:	lea    r9,[rbp+0x9a0]
 100e030:	movzx  r8d,si
 100e034:	mov    rdx,r12
 100e037:	movzx  ecx,r15w
 100e03b:	call   0x1049722
 100e040:	movzx  edi,ax
 100e043:	cmp    ax,0x64
 100e047:	je     0x100e2df
 100e04d:	cmp    ax,0xfffe
 100e051:	je     0x100e2df
 100e057:	cmp    ax,0xffff
 100e05b:	je     0x100e2df
 100e061:	test   r14b,r14b
 100e064:	je     0x100e17e
 100e06a:	mov    r9d,0xfffffb20
 100e070:	mov    QWORD PTR [rsp+0x30],r13
 100e075:	mov    edi,0xfffffffa
 100e07a:	mov    WORD PTR [rsp+0x28],di
 100e07f:	lea    rax,[rsp+0x54]
 100e084:	mov    QWORD PTR [rsp+0x20],rax
 100e089:	movzx  r8d,si
 100e08d:	mov    rdx,r12
 100e090:	movzx  ecx,r15w
 100e094:	call   0x1049716
 100e099:	mov    r9d,0xfffffb7e
 100e09f:	mov    QWORD PTR [rsp+0x30],r13
 100e0a4:	mov    WORD PTR [rsp+0x28],di
 100e0a9:	lea    rax,[rsp+0x48]
 100e0ae:	mov    QWORD PTR [rsp+0x20],rax
 100e0b3:	movzx  r8d,si
 100e0b7:	mov    rdx,r12
 100e0ba:	movzx  ecx,r15w
 100e0be:	call   0x1049716
 100e0c3:	mov    r9d,0xfffffb82
 100e0c9:	mov    QWORD PTR [rsp+0x30],r13
 100e0ce:	mov    WORD PTR [rsp+0x28],di
 100e0d3:	lea    rax,[rsp+0x5c]
 100e0d8:	mov    QWORD PTR [rsp+0x20],rax
 100e0dd:	movzx  r8d,si
 100e0e1:	mov    rdx,r12
 100e0e4:	movzx  ecx,r15w
 100e0e8:	call   0x1049716
 100e0ed:	mov    r9d,0xfffffb81
 100e0f3:	mov    QWORD PTR [rsp+0x30],r13
 100e0f8:	mov    WORD PTR [rsp+0x28],di
 100e0fd:	lea    rax,[rsp+0x50]
 100e102:	mov    QWORD PTR [rsp+0x20],rax
 100e107:	movzx  r8d,si
 100e10b:	mov    rdx,r12
 100e10e:	movzx  ecx,r15w
 100e112:	call   0x1049716
 100e117:	mov    r9d,0xfffffb7f
 100e11d:	lea    rax,[rsp+0x68]
 100e122:	mov    QWORD PTR [rsp+0x30],rax
 100e127:	mov    edi,0x102
 100e12c:	mov    WORD PTR [rsp+0x28],di
 100e131:	lea    rax,[rbp+0x90]
 100e138:	mov    QWORD PTR [rsp+0x20],rax
 100e13d:	movzx  r8d,si
 100e141:	mov    rdx,r12
 100e144:	movzx  ecx,r15w
 100e148:	call   0x1049716
 100e14d:	mov    r9d,0xfffffb80
 100e153:	lea    rax,[rsp+0x60]
 100e158:	mov    QWORD PTR [rsp+0x30],rax
 100e15d:	mov    WORD PTR [rsp+0x28],di
 100e162:	lea    rax,[rbp-0x80]
 100e166:	mov    QWORD PTR [rsp+0x20],rax
 100e16b:	movzx  r8d,si
 100e16f:	mov    rdx,r12
 100e172:	movzx  ecx,r15w
 100e176:	call   0x1049716
 100e17b:	movzx  edi,ax
 100e17e:	mov    r8d,DWORD PTR [rsp+0x58]
 100e183:	test   r8d,r8d
 100e186:	je     0x100e1a8
 100e188:	lea    rdx,[rip+0xffffffffffff3f39]        # 0x10020c8
 100e18f:	lea    rcx,[rsp+0x40]
 100e194:	call   QWORD PTR [rip+0xffffffffffff38a6]        # 0x1001a40
 100e19a:	lea    rdx,[rsp+0x40]
 100e19f:	mov    rcx,rbx
 100e1a2:	call   QWORD PTR [rip+0xffffffffffff3830]        # 0x10019d8
 100e1a8:	lea    rcx,[rbp+0x1a0]
 100e1af:	or     rax,0xffffffffffffffff
 100e1b3:	inc    rax
 100e1b6:	cmp    WORD PTR [rcx+rax*2],0x0
 100e1bb:	jne    0x100e1b3
 100e1bd:	test   rax,rax
 100e1c0:	je     0x100e1e9
 100e1c2:	lea    r8,[rbp+0x1a0]
 100e1c9:	lea    rdx,[rip+0xffffffffffff3f28]        # 0x10020f8
 100e1d0:	lea    rcx,[rsp+0x40]
 100e1d5:	call   QWORD PTR [rip+0xffffffffffff3865]        # 0x1001a40
 100e1db:	lea    rdx,[rsp+0x40]
 100e1e0:	mov    rcx,rbx
 100e1e3:	call   QWORD PTR [rip+0xffffffffffff37ef]        # 0x10019d8
 100e1e9:	lea    rcx,[rbp+0x9a0]
 100e1f0:	or     rax,0xffffffffffffffff
 100e1f4:	inc    rax
 100e1f7:	cmp    WORD PTR [rcx+rax*2],0x0
 100e1fc:	jne    0x100e1f4
 100e1fe:	test   rax,rax
 100e201:	je     0x100e22a
 100e203:	lea    r8,[rbp+0x9a0]
 100e20a:	lea    rdx,[rip+0xffffffffffff3f0f]        # 0x1002120
 100e211:	lea    rcx,[rsp+0x40]
 100e216:	call   QWORD PTR [rip+0xffffffffffff3824]        # 0x1001a40
 100e21c:	lea    rdx,[rsp+0x40]
 100e221:	mov    rcx,rbx
 100e224:	call   QWORD PTR [rip+0xffffffffffff37ae]        # 0x10019d8
 100e22a:	test   r14b,r14b
 100e22d:	je     0x100e2df
 100e233:	mov    r8d,DWORD PTR [rsp+0x54]
 100e238:	test   r8d,r8d
 100e23b:	je     0x100e25d
 100e23d:	lea    rdx,[rip+0xffffffffffff3f04]        # 0x1002148
 100e244:	lea    rcx,[rsp+0x40]
 100e249:	call   QWORD PTR [rip+0xffffffffffff37f1]        # 0x1001a40
 100e24f:	lea    rdx,[rsp+0x40]
 100e254:	mov    rcx,rbx
 100e257:	call   QWORD PTR [rip+0xffffffffffff377b]        # 0x10019d8
 100e25d:	movzx  eax,WORD PTR [rsp+0x48]
 100e262:	test   ax,ax
 100e265:	je     0x100e28b
 100e267:	movzx  r8d,ax
 100e26b:	lea    rdx,[rip+0xffffffffffff3f06]        # 0x1002178
 100e272:	lea    rcx,[rsp+0x40]
 100e277:	call   QWORD PTR [rip+0xffffffffffff37c3]        # 0x1001a40
 100e27d:	lea    rdx,[rsp+0x40]
 100e282:	mov    rcx,rbx
 100e285:	call   QWORD PTR [rip+0xffffffffffff374d]        # 0x10019d8
 100e28b:	mov    r8d,DWORD PTR [rsp+0x5c]
 100e290:	test   r8d,r8d
 100e293:	je     0x100e2b5
 100e295:	lea    rdx,[rip+0xffffffffffff3f04]        # 0x10021a0
 100e29c:	lea    rcx,[rsp+0x40]
 100e2a1:	call   QWORD PTR [rip+0xffffffffffff3799]        # 0x1001a40
 100e2a7:	lea    rdx,[rsp+0x40]
 100e2ac:	mov    rcx,rbx
 100e2af:	call   QWORD PTR [rip+0xffffffffffff3723]        # 0x10019d8
 100e2b5:	mov    r8d,DWORD PTR [rsp+0x50]
 100e2ba:	test   r8d,r8d
 100e2bd:	je     0x100e2df
 100e2bf:	lea    rdx,[rip+0xffffffffffff3f0a]        # 0x10021d0
 100e2c6:	lea    rcx,[rsp+0x40]
 100e2cb:	call   QWORD PTR [rip+0xffffffffffff376f]        # 0x1001a40
 100e2d1:	lea    rdx,[rsp+0x40]
 100e2d6:	mov    rcx,rbx
 100e2d9:	call   QWORD PTR [rip+0xffffffffffff36f9]        # 0x10019d8
 100e2df:	inc    si
 100e2e2:	cmp    di,0x64
 100e2e6:	mov    ecx,0x3ff
 100e2eb:	jne    0x100dff0
 100e2f1:	lea    rcx,[rsp+0x40]
 100e2f6:	call   QWORD PTR [rip+0xffffffffffff37ac]        # 0x1001aa8
 100e2fc:	mov    rax,rbx
 100e2ff:	mov    rcx,QWORD PTR [rbp+0x11a0]
 100e306:	xor    rcx,rsp
 100e309:	call   0x103ff40
 100e30e:	mov    rbx,QWORD PTR [rsp+0x12f0]
 100e316:	add    rsp,0x12b0
 100e31d:	pop    r15
 100e31f:	pop    r14
 100e321:	pop    r13
 100e323:	pop    r12
 100e325:	pop    rdi
 100e326:	pop    rsi
 100e327:	pop    rbp
 100e328:	ret    
 100e329:	int3   
 100e32a:	int3   
 100e32b:	int3   
 100e32c:	int3   
 100e32d:	int3   
 100e32e:	int3   
 100e32f:	int3   
 100e330:	mov    rax,rsp
 100e333:	push   rdi
 100e334:	push   r14
 100e336:	push   r15
 100e338:	sub    rsp,0x50
 100e33c:	mov    QWORD PTR [rax-0x20],0xfffffffffffffffe
 100e344:	mov    QWORD PTR [rax+0x10],rbx
 100e348:	mov    QWORD PTR [rax+0x18],rbp
 100e34c:	mov    QWORD PTR [rax+0x20],rsi
 100e350:	movsxd rsi,r9d
 100e353:	mov    r15,r8
 100e356:	movsxd rbp,edx
 100e359:	mov    rdi,rcx
 100e35c:	lea    rbx,[rbp+0x1]
 100e360:	shl    rbx,0x4
 100e364:	add    rbx,rcx
 100e367:	mov    eax,DWORD PTR [rbx+0x4]
 100e36a:	test   eax,eax
 100e36c:	jle    0x100e39b
 100e36e:	cmp    QWORD PTR [rbx+0x8],0x0
 100e373:	jne    0x100e39b
 100e375:	mov    rcx,QWORD PTR [rcx+0x4018]
 100e37c:	mov    rax,QWORD PTR [rcx]
 100e37f:	mov    BYTE PTR [rsp+0x28],0x1
 100e384:	mov    BYTE PTR [rsp+0x20],0x1
 100e389:	xor    r9d,r9d
 100e38c:	xor    r8d,r8d
 100e38f:	mov    edx,0xc000c49d
 100e394:	call   QWORD PTR [rax]
 100e396:	jmp    0x100e59e
 100e39b:	cmp    ebp,DWORD PTR [rcx+0x4010]
 100e3a1:	jge    0x100e50a
 100e3a7:	test   edx,edx
 100e3a9:	js     0x100e50a
 100e3af:	cmp    esi,eax
 100e3b1:	jle    0x100e4dc
 100e3b7:	mov    DWORD PTR [rbx+0x4],esi
 100e3ba:	mov    rcx,QWORD PTR [rbx+0x8]
 100e3be:	call   QWORD PTR [rip+0xffffffffffff32ec]        # 0x10016b0
 100e3c4:	xor    r14d,r14d
 100e3c7:	mov    QWORD PTR [rbx+0x8],r14
 100e3cb:	lea    rcx,[rsi+0x4]
 100e3cf:	cmp    rcx,rsi
 100e3d2:	jbe    0x100e3de
 100e3d4:	call   QWORD PTR [rip+0xffffffffffff334e]        # 0x1001728
 100e3da:	mov    QWORD PTR [rbx+0x8],rax
 100e3de:	mov    rdx,QWORD PTR [rbx+0x8]
 100e3e2:	test   rdx,rdx
 100e3e5:	jne    0x100e40d
 100e3e7:	mov    rcx,QWORD PTR [rdi+0x4018]
 100e3ee:	mov    rax,QWORD PTR [rcx]
 100e3f1:	mov    BYTE PTR [rsp+0x28],0x1
 100e3f6:	mov    BYTE PTR [rsp+0x20],0x1
 100e3fb:	xor    r9d,r9d
 100e3fe:	xor    r8d,r8d
 100e401:	mov    edx,0xc000c49f
 100e406:	call   QWORD PTR [rax]
 100e408:	jmp    0x100e59e
 100e40d:	lea    r8d,[rbp+0x1]
 100e411:	mov    rcx,QWORD PTR [rdi+0x8]
 100e415:	call   0x104975e
 100e41a:	cmp    r14w,ax
 100e41e:	jne    0x100e4dc
 100e424:	lea    rcx,[rsp+0x70]
 100e429:	call   QWORD PTR [rip+0xffffffffffff3691]        # 0x1001ac0
 100e42f:	nop
 100e430:	mov    edx,0xc000c4a0
 100e435:	lea    rcx,[rsp+0x40]
 100e43a:	call   0x10132d0
 100e43f:	nop
 100e440:	mov    rcx,rax
 100e443:	call   QWORD PTR [rip+0xffffffffffff369f]        # 0x1001ae8
 100e449:	mov    rdx,rax
 100e44c:	mov    r8d,ebp
 100e44f:	lea    rcx,[rsp+0x70]
 100e454:	call   QWORD PTR [rip+0xffffffffffff35e6]        # 0x1001a40
 100e45a:	nop
 100e45b:	lea    rcx,[rsp+0x40]
 100e460:	call   QWORD PTR [rip+0xffffffffffff3642]        # 0x1001aa8
 100e466:	lea    rcx,[rsp+0x70]
 100e46b:	call   QWORD PTR [rip+0xffffffffffff3677]        # 0x1001ae8
 100e471:	mov    r8d,0x2
 100e477:	mov    BYTE PTR [rsp+0x28],0x1
 100e47c:	mov    QWORD PTR [rsp+0x20],rax
 100e481:	mov    r9,QWORD PTR [rdi+0x8]
 100e485:	lea    rdx,[rsp+0x40]
 100e48a:	mov    rcx,rdi
 100e48d:	call   0x100dee0
 100e492:	nop
 100e493:	mov    rcx,QWORD PTR [rdi+0x4018]
 100e49a:	mov    rbx,QWORD PTR [rcx]
 100e49d:	mov    rcx,rax
 100e4a0:	call   QWORD PTR [rip+0xffffffffffff3642]        # 0x1001ae8
 100e4a6:	mov    r8,rax
 100e4a9:	mov    BYTE PTR [rsp+0x30],0x1
 100e4ae:	mov    BYTE PTR [rsp+0x28],0x1
 100e4b3:	mov    DWORD PTR [rsp+0x20],r14d
 100e4b8:	xor    r9d,r9d
 100e4bb:	mov    edx,0xc000c4a0
 100e4c0:	mov    rcx,QWORD PTR [rdi+0x4018]
 100e4c7:	call   QWORD PTR [rbx+0x8]
 100e4ca:	nop
 100e4cb:	lea    rcx,[rsp+0x40]
 100e4d0:	call   QWORD PTR [rip+0xffffffffffff35d2]        # 0x1001aa8
 100e4d6:	nop
 100e4d7:	jmp    0x100e593
 100e4dc:	mov    rbx,QWORD PTR [rbx+0x8]
 100e4e0:	cmp    BYTE PTR [rsp+0x90],0x0
 100e4e8:	jne    0x100e4fd
 100e4ea:	mov    r8,rsi
 100e4ed:	lea    rcx,[rbx+0x4]
 100e4f1:	mov    rdx,r15
 100e4f4:	call   0x10402e4
 100e4f9:	mov    DWORD PTR [rbx],esi
 100e4fb:	jmp    0x100e503
 100e4fd:	mov    DWORD PTR [rbx],0xffffffff
 100e503:	mov    al,0x1
 100e505:	jmp    0x100e5a0
 100e50a:	lea    rcx,[rsp+0x70]
 100e50f:	call   QWORD PTR [rip+0xffffffffffff35ab]        # 0x1001ac0
 100e515:	nop
 100e516:	mov    edx,0xc000c49e
 100e51b:	lea    rcx,[rsp+0x40]
 100e520:	call   0x10132d0
 100e525:	nop
 100e526:	mov    ebx,DWORD PTR [rdi+0x4010]
 100e52c:	mov    rcx,rax
 100e52f:	call   QWORD PTR [rip+0xffffffffffff35b3]        # 0x1001ae8
 100e535:	mov    rdx,rax
 100e538:	lea    r9d,[rbx-0x1]
 100e53c:	mov    r8d,ebp
 100e53f:	lea    rcx,[rsp+0x70]
 100e544:	call   QWORD PTR [rip+0xffffffffffff34f6]        # 0x1001a40
 100e54a:	nop
 100e54b:	lea    rcx,[rsp+0x40]
 100e550:	call   QWORD PTR [rip+0xffffffffffff3552]        # 0x1001aa8
 100e556:	mov    rax,QWORD PTR [rdi+0x4018]
 100e55d:	mov    rbx,QWORD PTR [rax]
 100e560:	lea    rcx,[rsp+0x70]
 100e565:	call   QWORD PTR [rip+0xffffffffffff357d]        # 0x1001ae8
 100e56b:	mov    r8,rax
 100e56e:	mov    BYTE PTR [rsp+0x30],0x1
 100e573:	mov    BYTE PTR [rsp+0x28],0x1
 100e578:	xor    r14d,r14d
 100e57b:	mov    DWORD PTR [rsp+0x20],r14d
 100e580:	xor    r9d,r9d
 100e583:	mov    edx,0xc000c49e
 100e588:	mov    rcx,QWORD PTR [rdi+0x4018]
 100e58f:	call   QWORD PTR [rbx+0x8]
 100e592:	nop
 100e593:	lea    rcx,[rsp+0x70]
 100e598:	call   QWORD PTR [rip+0xffffffffffff350a]        # 0x1001aa8
 100e59e:	xor    al,al
 100e5a0:	lea    r11,[rsp+0x50]
 100e5a5:	mov    rbx,QWORD PTR [r11+0x28]
 100e5a9:	mov    rbp,QWORD PTR [r11+0x30]
 100e5ad:	mov    rsi,QWORD PTR [r11+0x38]
 100e5b1:	mov    rsp,r11
 100e5b4:	pop    r15
 100e5b6:	pop    r14
 100e5b8:	pop    rdi
 100e5b9:	ret    
 100e5ba:	int3   
 100e5bb:	int3   
 100e5bc:	int3   
 100e5bd:	int3   
 100e5be:	int3   
 100e5bf:	int3   
 100e5c0:	ret    0x0
 100e5c3:	int3   
 100e5c4:	int3   
 100e5c5:	int3   
 100e5c6:	int3   
 100e5c7:	int3   
 100e5c8:	int3   
 100e5c9:	int3   
 100e5ca:	int3   
 100e5cb:	int3   
 100e5cc:	int3   
 100e5cd:	int3   
 100e5ce:	int3   
 100e5cf:	int3   
 100e5d0:	lea    rax,[rip+0xffffffffffff3e31]        # 0x1002408
 100e5d7:	mov    QWORD PTR [rcx],rax
 100e5da:	ret    
 100e5db:	int3   
 100e5dc:	int3   
 100e5dd:	int3   
 100e5de:	int3   
 100e5df:	int3   
 100e5e0:	int3   
 100e5e1:	int3   
 100e5e2:	int3   
 100e5e3:	int3   
 100e5e4:	int3   
 100e5e5:	int3   
 100e5e6:	int3   
 100e5e7:	int3   
 100e5e8:	int3   
 100e5e9:	int3   
 100e5ea:	int3   
 100e5eb:	int3   
 100e5ec:	int3   
 100e5ed:	int3   
 100e5ee:	int3   
 100e5ef:	int3   
 100e5f0:	rex push rbx
 100e5f2:	sub    rsp,0x30
 100e5f6:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100e5ff:	xor    ebx,ebx
 100e601:	lea    rcx,[rsp+0x50]
 100e606:	call   QWORD PTR [rip+0xffffffffffff34a4]        # 0x1001ab0
 100e60c:	nop
 100e60d:	lea    rdx,[rip+0xffffffffffff3e44]        # 0x1002458
 100e614:	lea    rcx,[rsp+0x50]
 100e619:	call   QWORD PTR [rip+0xffffffffffff3441]        # 0x1001a60
 100e61f:	test   eax,eax
 100e621:	jne    0x100e62b
 100e623:	lea    ebx,[rax+0x1]
 100e626:	jmp    0x100e70d
 100e62b:	lea    rdx,[rip+0xffffffffffff3e3e]        # 0x1002470
 100e632:	lea    rcx,[rsp+0x50]
 100e637:	call   QWORD PTR [rip+0xffffffffffff3423]        # 0x1001a60
 100e63d:	test   eax,eax
 100e63f:	jne    0x100e649
 100e641:	lea    ebx,[rax+0x3]
 100e644:	jmp    0x100e70d
 100e649:	lea    rdx,[rip+0xffffffffffff3e30]        # 0x1002480
 100e650:	lea    rcx,[rsp+0x50]
 100e655:	call   QWORD PTR [rip+0xffffffffffff3405]        # 0x1001a60
 100e65b:	test   eax,eax
 100e65d:	jne    0x100e667
 100e65f:	lea    ebx,[rax+0x2]
 100e662:	jmp    0x100e70d
 100e667:	lea    rdx,[rip+0xffffffffffff3e32]        # 0x10024a0
 100e66e:	lea    rcx,[rsp+0x50]
 100e673:	call   QWORD PTR [rip+0xffffffffffff33e7]        # 0x1001a60
 100e679:	test   eax,eax
 100e67b:	jne    0x100e685
 100e67d:	lea    ebx,[rax+0x4]
 100e680:	jmp    0x100e70d
 100e685:	lea    rdx,[rip+0xffffffffffff3e2c]        # 0x10024b8
 100e68c:	lea    rcx,[rsp+0x50]
 100e691:	call   QWORD PTR [rip+0xffffffffffff33c9]        # 0x1001a60
 100e697:	test   eax,eax
 100e699:	jne    0x100e6a0
 100e69b:	lea    ebx,[rax+0x5]
 100e69e:	jmp    0x100e70d
 100e6a0:	lea    rdx,[rip+0xffffffffffff3e29]        # 0x10024d0
 100e6a7:	lea    rcx,[rsp+0x50]
 100e6ac:	call   QWORD PTR [rip+0xffffffffffff33ae]        # 0x1001a60
 100e6b2:	test   eax,eax
 100e6b4:	jne    0x100e6bb
 100e6b6:	lea    ebx,[rax+0x6]
 100e6b9:	jmp    0x100e70d
 100e6bb:	lea    rdx,[rip+0xffffffffffff3e26]        # 0x10024e8
 100e6c2:	lea    rcx,[rsp+0x50]
 100e6c7:	call   QWORD PTR [rip+0xffffffffffff3393]        # 0x1001a60
 100e6cd:	test   eax,eax
 100e6cf:	jne    0x100e6d6
 100e6d1:	lea    ebx,[rax+0x7]
 100e6d4:	jmp    0x100e70d
 100e6d6:	lea    rdx,[rip+0xffffffffffff3e23]        # 0x1002500
 100e6dd:	lea    rcx,[rsp+0x50]
 100e6e2:	call   QWORD PTR [rip+0xffffffffffff3378]        # 0x1001a60
 100e6e8:	test   eax,eax
 100e6ea:	jne    0x100e6f1
 100e6ec:	lea    ebx,[rax+0x9]
 100e6ef:	jmp    0x100e70d
 100e6f1:	lea    rdx,[rip+0xffffffffffff3e20]        # 0x1002518
 100e6f8:	lea    rcx,[rsp+0x50]
 100e6fd:	call   QWORD PTR [rip+0xffffffffffff335d]        # 0x1001a60
 100e703:	mov    ecx,0x8
 100e708:	test   eax,eax
 100e70a:	cmove  ebx,ecx
 100e70d:	lea    rcx,[rsp+0x50]
 100e712:	call   QWORD PTR [rip+0xffffffffffff3390]        # 0x1001aa8
 100e718:	mov    eax,ebx
 100e71a:	add    rsp,0x30
 100e71e:	pop    rbx
 100e71f:	ret    
 100e720:	int3   
 100e721:	int3   
 100e722:	int3   
 100e723:	int3   
 100e724:	int3   
 100e725:	int3   
 100e726:	int3   
 100e727:	int3   
 100e728:	int3   
 100e729:	int3   
 100e72a:	int3   
 100e72b:	int3   
 100e72c:	int3   
 100e72d:	int3   
 100e72e:	int3   
 100e72f:	int3   
 100e730:	rex push rbx
 100e732:	sub    rsp,0x30
 100e736:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100e73f:	lea    rcx,[rsp+0x50]
 100e744:	call   QWORD PTR [rip+0xffffffffffff3366]        # 0x1001ab0
 100e74a:	nop
 100e74b:	lea    rdx,[rip+0xffffffffffff3b9e]        # 0x10022f0
 100e752:	lea    rcx,[rsp+0x50]
 100e757:	call   QWORD PTR [rip+0xffffffffffff3303]        # 0x1001a60
 100e75d:	test   eax,eax
 100e75f:	jne    0x100e765
 100e761:	xor    ebx,ebx
 100e763:	jmp    0x100e79c
 100e765:	lea    rdx,[rip+0xffffffffffff3b8c]        # 0x10022f8
 100e76c:	lea    rcx,[rsp+0x50]
 100e771:	call   QWORD PTR [rip+0xffffffffffff32e9]        # 0x1001a60
 100e777:	test   eax,eax
 100e779:	jne    0x100e780
 100e77b:	lea    ebx,[rax+0x1]
 100e77e:	jmp    0x100e79c
 100e780:	lea    rdx,[rip+0xffffffffffff3da9]        # 0x1002530
 100e787:	lea    rcx,[rsp+0x50]
 100e78c:	call   QWORD PTR [rip+0xffffffffffff32ce]        # 0x1001a60
 100e792:	xor    ebx,ebx
 100e794:	test   eax,eax
 100e796:	setne  bl
 100e799:	add    ebx,0x2
 100e79c:	lea    rcx,[rsp+0x50]
 100e7a1:	call   QWORD PTR [rip+0xffffffffffff3301]        # 0x1001aa8
 100e7a7:	mov    eax,ebx
 100e7a9:	add    rsp,0x30
 100e7ad:	pop    rbx
 100e7ae:	ret    
 100e7af:	int3   
 100e7b0:	int3   
 100e7b1:	int3   
 100e7b2:	int3   
 100e7b3:	int3   
 100e7b4:	int3   
 100e7b5:	int3   
 100e7b6:	int3   
 100e7b7:	int3   
 100e7b8:	int3   
 100e7b9:	int3   
 100e7ba:	int3   
 100e7bb:	int3   
 100e7bc:	int3   
 100e7bd:	int3   
 100e7be:	int3   
 100e7bf:	int3   
 100e7c0:	rex push rbx
 100e7c2:	sub    rsp,0x60
 100e7c6:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
 100e7cf:	mov    rax,QWORD PTR [rip+0x5509a]        # 0x1063870
 100e7d6:	xor    rax,rsp
 100e7d9:	mov    QWORD PTR [rsp+0x58],rax
 100e7de:	mov    rbx,rdx
 100e7e1:	mov    QWORD PTR [rsp+0x30],rdx
 100e7e6:	mov    DWORD PTR [rsp+0x20],0x0
 100e7ee:	mov    rdx,r8
 100e7f1:	mov    rcx,rbx
 100e7f4:	call   QWORD PTR [rip+0xffffffffffff32b6]        # 0x1001ab0
 100e7fa:	mov    DWORD PTR [rsp+0x20],0x1
 100e802:	mov    rcx,rbx
 100e805:	call   QWORD PTR [rip+0xffffffffffff32e5]        # 0x1001af0
 100e80b:	test   eax,eax
 100e80d:	je     0x100e84d
 100e80f:	mov    rcx,rbx
 100e812:	call   QWORD PTR [rip+0xffffffffffff32d8]        # 0x1001af0
 100e818:	cmp    eax,0x1
 100e81b:	jne    0x100e82e
 100e81d:	xor    edx,edx
 100e81f:	mov    rcx,rbx
 100e822:	call   QWORD PTR [rip+0xffffffffffff31a8]        # 0x10019d0
 100e828:	cmp    ax,0x2a
 100e82c:	je     0x100e84d
 100e82e:	mov    rcx,rbx
 100e831:	call   QWORD PTR [rip+0xffffffffffff32b9]        # 0x1001af0
 100e837:	cmp    eax,0x1
 100e83a:	jne    0x100e877
 100e83c:	xor    edx,edx
 100e83e:	mov    rcx,rbx
 100e841:	call   QWORD PTR [rip+0xffffffffffff3189]        # 0x10019d0
 100e847:	cmp    ax,0x2e
 100e84b:	jne    0x100e877
 100e84d:	mov    DWORD PTR [rsp+0x24],0x10
 100e855:	lea    rdx,[rsp+0x24]
 100e85a:	lea    rcx,[rsp+0x38]
 100e85f:	call   QWORD PTR [rip+0xffffffffffff29bb]        # 0x1001220
 100e865:	test   eax,eax
 100e867:	je     0x100e877
 100e869:	lea    rdx,[rsp+0x38]
 100e86e:	mov    rcx,rbx
 100e871:	call   QWORD PTR [rip+0xffffffffffff3221]        # 0x1001a98
 100e877:	mov    rax,rbx
 100e87a:	mov    rcx,QWORD PTR [rsp+0x58]
 100e87f:	xor    rcx,rsp
 100e882:	call   0x103ff40
 100e887:	add    rsp,0x60
 100e88b:	pop    rbx
 100e88c:	ret    
 100e88d:	int3   
 100e88e:	int3   
 100e88f:	int3   
 100e890:	int3   
 100e891:	int3   
 100e892:	int3   
 100e893:	int3   
 100e894:	int3   
 100e895:	int3   
 100e896:	int3   
 100e897:	int3   
 100e898:	int3   
 100e899:	int3   
 100e89a:	int3   
 100e89b:	int3   
 100e89c:	int3   
 100e89d:	int3   
 100e89e:	int3   
 100e89f:	int3   
 100e8a0:	rex push rsi
 100e8a2:	push   r13
 100e8a4:	push   r15
 100e8a6:	sub    rsp,0x30
 100e8aa:	mov    r15,QWORD PTR [r8+0x8]
 100e8ae:	mov    r13,r9
 100e8b1:	mov    rsi,rdx
 100e8b4:	test   r15,r15
 100e8b7:	je     0x100e9d6
 100e8bd:	mov    QWORD PTR [rsp+0x50],rbx
 100e8c2:	mov    QWORD PTR [rsp+0x58],rbp
 100e8c7:	mov    QWORD PTR [rsp+0x60],rdi
 100e8cc:	mov    QWORD PTR [rsp+0x28],r12
 100e8d1:	mov    QWORD PTR [rsp+0x20],r14
 100e8d6:	lea    rcx,[r15+0x10]
 100e8da:	call   QWORD PTR [rip+0xffffffffffff3208]        # 0x1001ae8
 100e8e0:	mov    rcx,rax
 100e8e3:	mov    rbp,rax
 100e8e6:	call   0x103fa26
 100e8eb:	xor    edx,edx
 100e8ed:	mov    edi,eax
 100e8ef:	div    DWORD PTR [rsi+0x10]
 100e8f2:	mov    rax,QWORD PTR [rsi+0x8]
 100e8f6:	mov    r12d,edx
 100e8f9:	test   rax,rax
 100e8fc:	je     0x100e930
 100e8fe:	mov    rbx,QWORD PTR [rax+rdx*8]
 100e902:	test   rbx,rbx
 100e905:	je     0x100e929
 100e907:	cmp    DWORD PTR [rbx+0x18],edi
 100e90a:	jne    0x100e920
 100e90c:	mov    rdx,rbp
 100e90f:	mov    rcx,rbx
 100e912:	call   QWORD PTR [rip+0xffffffffffff30e8]        # 0x1001a00
 100e918:	test   eax,eax
 100e91a:	je     0x100e9a4
 100e920:	mov    rbx,QWORD PTR [rbx+0x10]
 100e924:	test   rbx,rbx
 100e927:	jne    0x100e907
 100e929:	cmp    QWORD PTR [rsi+0x8],0x0
 100e92e:	jne    0x100e977
 100e930:	mov    ebx,DWORD PTR [rsi+0x10]
 100e933:	mov    rcx,0xffffffffffffffff
 100e93a:	mov    eax,0x8
 100e93f:	mul    rbx
 100e942:	cmovo  rax,rcx
 100e946:	mov    rcx,rax
 100e949:	call   0x103f9ba
 100e94e:	mov    QWORD PTR [rsi+0x8],rax
 100e952:	test   rax,rax
 100e955:	je     0x100e9e6
 100e95b:	lea    r8,[rbx*8+0x0]
 100e963:	xor    edx,edx
 100e965:	mov    rcx,rax
 100e968:	call   0x104026c
 100e96d:	cmp    QWORD PTR [rsi+0x8],0x0
 100e972:	mov    DWORD PTR [rsi+0x10],ebx
 100e975:	je     0x100e9e0
 100e977:	mov    rdx,rbp
 100e97a:	mov    rcx,rsi
 100e97d:	call   0x100eb10
 100e982:	lea    rdx,[r12*8+0x0]
 100e98a:	mov    DWORD PTR [rax+0x18],edi
 100e98d:	mov    rbx,rax
 100e990:	mov    rax,QWORD PTR [rsi+0x8]
 100e994:	mov    rcx,QWORD PTR [rdx+rax*1]
 100e998:	mov    QWORD PTR [rbx+0x10],rcx
 100e99c:	mov    rax,QWORD PTR [rsi+0x8]
 100e9a0:	mov    QWORD PTR [rdx+rax*1],rbx
 100e9a4:	lea    rcx,[rbx+0x8]
 100e9a8:	mov    rdx,r13
 100e9ab:	call   QWORD PTR [rip+0xffffffffffff30e7]        # 0x1001a98
 100e9b1:	mov    r15,QWORD PTR [r15]
 100e9b4:	test   r15,r15
 100e9b7:	jne    0x100e8d6
 100e9bd:	mov    r12,QWORD PTR [rsp+0x28]
 100e9c2:	mov    rdi,QWORD PTR [rsp+0x60]
 100e9c7:	mov    rbp,QWORD PTR [rsp+0x58]
 100e9cc:	mov    rbx,QWORD PTR [rsp+0x50]
 100e9d1:	mov    r14,QWORD PTR [rsp+0x20]
 100e9d6:	add    rsp,0x30
 100e9da:	pop    r15
 100e9dc:	pop    r13
 100e9de:	pop    rsi
 100e9df:	ret    
 100e9e0:	call   0x103f972
 100e9e5:	int3   
 100e9e6:	call   0x103f972
 100e9eb:	int3   
 100e9ec:	int3   
 100e9ed:	int3   
 100e9ee:	int3   
 100e9ef:	int3   
 100e9f0:	int3   
 100e9f1:	int3   
 100e9f2:	int3   
 100e9f3:	int3   
 100e9f4:	int3   
 100e9f5:	int3   
 100e9f6:	int3   
 100e9f7:	int3   
 100e9f8:	int3   
 100e9f9:	int3   
 100e9fa:	int3   
 100e9fb:	int3   
 100e9fc:	int3   
 100e9fd:	int3   
 100e9fe:	int3   
 100e9ff:	int3   
 100ea00:	mov    QWORD PTR [rsp+0x8],rbx
 100ea05:	mov    QWORD PTR [rsp+0x10],rbp
 100ea0a:	mov    QWORD PTR [rsp+0x18],rsi
 100ea0f:	push   rdi
 100ea10:	push   r14
 100ea12:	push   r15
 100ea14:	sub    rsp,0x20
 100ea18:	mov    rdi,rcx
 100ea1b:	mov    rcx,rdx
 100ea1e:	mov    rbp,rdx
 100ea21:	call   0x103fa26
 100ea26:	xor    edx,edx
 100ea28:	mov    esi,eax
 100ea2a:	div    DWORD PTR [rdi+0x10]
 100ea2d:	mov    rax,QWORD PTR [rdi+0x8]
 100ea31:	mov    r15d,edx
 100ea34:	test   rax,rax
 100ea37:	je     0x100ea64
 100ea39:	mov    rbx,QWORD PTR [rax+rdx*8]
 100ea3d:	test   rbx,rbx
 100ea40:	je     0x100ea64
 100ea42:	cmp    DWORD PTR [rbx+0x18],esi
 100ea45:	jne    0x100ea5b
 100ea47:	mov    rdx,rbp
 100ea4a:	mov    rcx,rbx
 100ea4d:	call   QWORD PTR [rip+0xffffffffffff2fad]        # 0x1001a00
 100ea53:	test   eax,eax
 100ea55:	je     0x100eae7
 100ea5b:	mov    rbx,QWORD PTR [rbx+0x10]
 100ea5f:	test   rbx,rbx
 100ea62:	jne    0x100ea42
 100ea64:	cmp    QWORD PTR [rdi+0x8],0x0
 100ea69:	jne    0x100eaba
 100ea6b:	mov    ebx,DWORD PTR [rdi+0x10]
 100ea6e:	mov    rcx,0xffffffffffffffff
 100ea75:	mov    eax,0x8
 100ea7a:	mul    rbx
 100ea7d:	cmovo  rax,rcx
 100ea81:	mov    rcx,rax
 100ea84:	call   0x103f9ba
 100ea89:	mov    QWORD PTR [rdi+0x8],rax
 100ea8d:	test   rax,rax
 100ea90:	jne    0x100ea98
 100ea92:	call   0x103f972
 100ea97:	int3   
 100ea98:	lea    r8,[rbx*8+0x0]
 100eaa0:	xor    edx,edx
 100eaa2:	mov    rcx,rax
 100eaa5:	call   0x104026c
 100eaaa:	cmp    QWORD PTR [rdi+0x8],0x0
 100eaaf:	mov    DWORD PTR [rdi+0x10],ebx
 100eab2:	jne    0x100eaba
 100eab4:	call   0x103f972
 100eab9:	int3   
 100eaba:	mov    rdx,rbp
 100eabd:	mov    rcx,rdi
 100eac0:	call   0x100eb10
 100eac5:	lea    rdx,[r15*8+0x0]
 100eacd:	mov    DWORD PTR [rax+0x18],esi
 100ead0:	mov    rbx,rax
 100ead3:	mov    rax,QWORD PTR [rdi+0x8]
 100ead7:	mov    rcx,QWORD PTR [rdx+rax*1]
 100eadb:	mov    QWORD PTR [rbx+0x10],rcx
 100eadf:	mov    rax,QWORD PTR [rdi+0x8]
 100eae3:	mov    QWORD PTR [rdx+rax*1],rbx
 100eae7:	mov    rbp,QWORD PTR [rsp+0x48]
 100eaec:	mov    rsi,QWORD PTR [rsp+0x50]
 100eaf1:	lea    rax,[rbx+0x8]
 100eaf5:	mov    rbx,QWORD PTR [rsp+0x40]
 100eafa:	add    rsp,0x20
 100eafe:	pop    r15
 100eb00:	pop    r14
 100eb02:	pop    rdi
 100eb03:	ret    
 100eb04:	int3   
 100eb05:	int3   
 100eb06:	int3   
 100eb07:	int3   
 100eb08:	int3   
 100eb09:	int3   
 100eb0a:	int3   
 100eb0b:	int3   
 100eb0c:	int3   
 100eb0d:	int3   
 100eb0e:	int3   
 100eb0f:	int3   
 100eb10:	rex push rdi
 100eb12:	sub    rsp,0x30
 100eb16:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100eb1f:	mov    QWORD PTR [rsp+0x48],rbx
 100eb24:	mov    QWORD PTR [rsp+0x58],rsi
 100eb29:	mov    rsi,rdx
 100eb2c:	mov    rbx,rcx
 100eb2f:	cmp    QWORD PTR [rcx+0x20],0x0
 100eb34:	jne    0x100eb75
 100eb36:	add    rcx,0x28
 100eb3a:	mov    r8d,0x20
 100eb40:	mov    rdx,QWORD PTR [rbx+0x30]
 100eb44:	call   0x103f9a2
 100eb49:	mov    r9,QWORD PTR [rbx+0x30]
 100eb4d:	mov    r8,r9
 100eb50:	shl    r8,0x5
 100eb54:	add    rax,0xffffffffffffffe8
 100eb58:	add    rax,r8
 100eb5b:	dec    r9
 100eb5e:	js     0x100eb75
 100eb60:	mov    rcx,QWORD PTR [rbx+0x20]
 100eb64:	mov    QWORD PTR [rax+0x10],rcx
 100eb68:	mov    QWORD PTR [rbx+0x20],rax
 100eb6c:	sub    rax,0x20
 100eb70:	dec    r9
 100eb73:	jns    0x100eb60
 100eb75:	mov    rdi,QWORD PTR [rbx+0x20]
 100eb79:	xor    eax,eax
 100eb7b:	test   rdi,rdi
 100eb7e:	setne  al
 100eb81:	test   eax,eax
 100eb83:	jne    0x100eb8b
 100eb85:	call   0x103f972
 100eb8a:	int3   
 100eb8b:	mov    QWORD PTR [rsp+0x40],rdi
 100eb90:	mov    rax,QWORD PTR [rdi+0x10]
 100eb94:	xor    ecx,ecx
 100eb96:	mov    QWORD PTR [rdi],rcx
 100eb99:	mov    QWORD PTR [rdi+0x8],rcx
 100eb9d:	mov    QWORD PTR [rdi+0x18],rcx
 100eba1:	mov    QWORD PTR [rdi+0x10],rax
 100eba5:	mov    rax,QWORD PTR [rbx+0x20]
 100eba9:	mov    rcx,QWORD PTR [rax+0x10]
 100ebad:	mov    QWORD PTR [rbx+0x20],rcx
 100ebb1:	inc    QWORD PTR [rbx+0x18]
 100ebb5:	mov    QWORD PTR [rsp+0x50],rdi
 100ebba:	mov    rdx,rsi
 100ebbd:	mov    rcx,rdi
 100ebc0:	call   QWORD PTR [rip+0xffffffffffff2eea]        # 0x1001ab0
 100ebc6:	nop
 100ebc7:	lea    rcx,[rdi+0x8]
 100ebcb:	call   QWORD PTR [rip+0xffffffffffff2eef]        # 0x1001ac0
 100ebd1:	nop
 100ebd2:	mov    rax,rdi
 100ebd5:	mov    rbx,QWORD PTR [rsp+0x48]
 100ebda:	mov    rsi,QWORD PTR [rsp+0x58]
 100ebdf:	add    rsp,0x30
 100ebe3:	pop    rdi
 100ebe4:	ret    
 100ebe5:	int3   
 100ebe6:	int3   
 100ebe7:	int3   
 100ebe8:	int3   
 100ebe9:	int3   
 100ebea:	int3   
 100ebeb:	int3   
 100ebec:	int3   
 100ebed:	int3   
 100ebee:	int3   
 100ebef:	int3   
 100ebf0:	mov    QWORD PTR [rsp+0x8],rcx
 100ebf5:	push   rbx
 100ebf6:	sub    rsp,0x30
 100ebfa:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100ec03:	mov    rbx,rcx
 100ec06:	add    rcx,0x8
 100ec0a:	call   QWORD PTR [rip+0xffffffffffff2e98]        # 0x1001aa8
 100ec10:	nop
 100ec11:	mov    rcx,rbx
 100ec14:	add    rsp,0x30
 100ec18:	pop    rbx
 100ec19:	rex.W jmp QWORD PTR [rip+0xffffffffffff2e88]        # 0x1001aa8
 100ec20:	int3   
 100ec21:	int3   
 100ec22:	int3   
 100ec23:	int3   
 100ec24:	int3   
 100ec25:	int3   
 100ec26:	int3   
 100ec27:	int3   
 100ec28:	int3   
 100ec29:	int3   
 100ec2a:	int3   
 100ec2b:	int3   
 100ec2c:	int3   
 100ec2d:	int3   
 100ec2e:	int3   
 100ec2f:	int3   
 100ec30:	mov    QWORD PTR [rsp+0x8],rcx
 100ec35:	push   rsi
 100ec36:	push   rdi
 100ec37:	push   r14
 100ec39:	sub    rsp,0x30
 100ec3d:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100ec46:	mov    QWORD PTR [rsp+0x58],rbx
 100ec4b:	mov    QWORD PTR [rsp+0x60],rbp
 100ec50:	mov    r14,rcx
 100ec53:	add    rcx,0x18
 100ec57:	call   QWORD PTR [rip+0xffffffffffff2e63]        # 0x1001ac0
 100ec5d:	nop
 100ec5e:	lea    rcx,[r14+0x20]
 100ec62:	call   QWORD PTR [rip+0xffffffffffff2e58]        # 0x1001ac0
 100ec68:	nop
 100ec69:	lea    rcx,[r14+0x28]
 100ec6d:	call   QWORD PTR [rip+0xffffffffffff2e4d]        # 0x1001ac0
 100ec73:	nop
 100ec74:	lea    rcx,[r14+0x30]
 100ec78:	call   QWORD PTR [rip+0xffffffffffff2e42]        # 0x1001ac0
 100ec7e:	nop
 100ec7f:	lea    rcx,[r14+0x38]
 100ec83:	call   QWORD PTR [rip+0xffffffffffff2e37]        # 0x1001ac0
 100ec89:	nop
 100ec8a:	mov    BYTE PTR [r14+0x10],0x0
 100ec8f:	mov    DWORD PTR [r14+0x14],0x1
 100ec97:	xor    eax,eax
 100ec99:	mov    QWORD PTR [r14+0x4],rax
 100ec9d:	mov    DWORD PTR [r14],eax
 100eca0:	mov    DWORD PTR [r14+0xc],eax
 100eca4:	lea    rdx,[rip+0xffffffffffff3165]        # 0x1001e10
 100ecab:	lea    rcx,[r14+0x18]
 100ecaf:	call   QWORD PTR [rip+0xffffffffffff2de3]        # 0x1001a98
 100ecb5:	lea    rdx,[rip+0xffffffffffff3154]        # 0x1001e10
 100ecbc:	lea    rcx,[r14+0x30]
 100ecc0:	call   QWORD PTR [rip+0xffffffffffff2dd2]        # 0x1001a98
 100ecc6:	lea    rdx,[rip+0xffffffffffff3143]        # 0x1001e10
 100eccd:	lea    rcx,[r14+0x38]
 100ecd1:	call   QWORD PTR [rip+0xffffffffffff2dc1]        # 0x1001a98
 100ecd7:	lea    rdx,[rip+0xffffffffffff3132]        # 0x1001e10
 100ecde:	lea    rcx,[r14+0x20]
 100ece2:	call   QWORD PTR [rip+0xffffffffffff2db0]        # 0x1001a98
 100ece8:	nop
 100ece9:	mov    rax,r14
 100ecec:	mov    rbx,QWORD PTR [rsp+0x58]
 100ecf1:	mov    rbp,QWORD PTR [rsp+0x60]
 100ecf6:	add    rsp,0x30
 100ecfa:	pop    r14
 100ecfc:	pop    rdi
 100ecfd:	pop    rsi
 100ecfe:	ret    
 100ecff:	int3   
 100ed00:	int3   
 100ed01:	int3   
 100ed02:	int3   
 100ed03:	int3   
 100ed04:	int3   
 100ed05:	int3   
 100ed06:	int3   
 100ed07:	int3   
 100ed08:	int3   
 100ed09:	int3   
 100ed0a:	int3   
 100ed0b:	int3   
 100ed0c:	int3   
 100ed0d:	int3   
 100ed0e:	int3   
 100ed0f:	int3   
 100ed10:	mov    QWORD PTR [rsp+0x8],rcx
 100ed15:	push   rdi
 100ed16:	push   r12
 100ed18:	push   r13
 100ed1a:	push   r14
 100ed1c:	push   r15
 100ed1e:	sub    rsp,0x30
 100ed22:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100ed2b:	mov    QWORD PTR [rsp+0x68],rbx
 100ed30:	mov    QWORD PTR [rsp+0x70],rbp
 100ed35:	mov    QWORD PTR [rsp+0x78],rsi
 100ed3a:	mov    ebp,r8d
 100ed3d:	mov    r14d,edx
 100ed40:	mov    r13,rcx
 100ed43:	add    rcx,0x18
 100ed47:	call   QWORD PTR [rip+0xffffffffffff2d73]        # 0x1001ac0
 100ed4d:	nop
 100ed4e:	lea    rcx,[r13+0x20]
 100ed52:	call   QWORD PTR [rip+0xffffffffffff2d68]        # 0x1001ac0
 100ed58:	nop
 100ed59:	lea    rcx,[r13+0x28]
 100ed5d:	call   QWORD PTR [rip+0xffffffffffff2d5d]        # 0x1001ac0
 100ed63:	nop
 100ed64:	lea    rcx,[r13+0x30]
 100ed68:	call   QWORD PTR [rip+0xffffffffffff2d52]        # 0x1001ac0
 100ed6e:	nop
 100ed6f:	lea    rcx,[r13+0x38]
 100ed73:	call   QWORD PTR [rip+0xffffffffffff2d47]        # 0x1001ac0
 100ed79:	nop
 100ed7a:	mov    BYTE PTR [r13+0x10],0x0
 100ed7f:	mov    DWORD PTR [r13+0x14],0x1
 100ed87:	xor    eax,eax
 100ed89:	mov    QWORD PTR [r13+0x8],rax
 100ed8d:	mov    DWORD PTR [r13+0x4],ebp
 100ed91:	mov    DWORD PTR [r13+0x0],r14d
 100ed95:	lea    rdx,[rip+0xffffffffffff3074]        # 0x1001e10
 100ed9c:	lea    rcx,[r13+0x18]
 100eda0:	call   QWORD PTR [rip+0xffffffffffff2cf2]        # 0x1001a98
 100eda6:	lea    rdx,[rip+0xffffffffffff3063]        # 0x1001e10
 100edad:	lea    rcx,[r13+0x28]
 100edb1:	call   QWORD PTR [rip+0xffffffffffff2ce1]        # 0x1001a98
 100edb7:	lea    rdx,[rip+0xffffffffffff3052]        # 0x1001e10
 100edbe:	lea    rcx,[r13+0x30]
 100edc2:	call   QWORD PTR [rip+0xffffffffffff2cd0]        # 0x1001a98
 100edc8:	lea    rdx,[rip+0xffffffffffff3041]        # 0x1001e10
 100edcf:	lea    rcx,[r13+0x38]
 100edd3:	call   QWORD PTR [rip+0xffffffffffff2cbf]        # 0x1001a98
 100edd9:	lea    rdx,[rip+0xffffffffffff3030]        # 0x1001e10
 100ede0:	lea    rcx,[r13+0x20]
 100ede4:	call   QWORD PTR [rip+0xffffffffffff2cae]        # 0x1001a98
 100edea:	nop
 100edeb:	mov    rax,r13
 100edee:	mov    rbx,QWORD PTR [rsp+0x68]
 100edf3:	mov    rbp,QWORD PTR [rsp+0x70]
 100edf8:	mov    rsi,QWORD PTR [rsp+0x78]
 100edfd:	add    rsp,0x30
 100ee01:	pop    r15
 100ee03:	pop    r14
 100ee05:	pop    r13
 100ee07:	pop    r12
 100ee09:	pop    rdi
 100ee0a:	ret    
 100ee0b:	int3   
 100ee0c:	int3   
 100ee0d:	int3   
 100ee0e:	int3   
 100ee0f:	int3   
 100ee10:	int3   
 100ee11:	int3   
 100ee12:	int3   
 100ee13:	int3   
 100ee14:	int3   
 100ee15:	int3   
 100ee16:	int3   
 100ee17:	int3   
 100ee18:	int3   
 100ee19:	int3   
 100ee1a:	int3   
 100ee1b:	int3   
 100ee1c:	int3   
 100ee1d:	int3   
 100ee1e:	int3   
 100ee1f:	int3   
 100ee20:	mov    QWORD PTR [rsp+0x8],rcx
 100ee25:	push   rdi
 100ee26:	push   r12
 100ee28:	push   r13
 100ee2a:	push   r14
 100ee2c:	push   r15
 100ee2e:	sub    rsp,0x30
 100ee32:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100ee3b:	mov    QWORD PTR [rsp+0x68],rbx
 100ee40:	mov    QWORD PTR [rsp+0x70],rbp
 100ee45:	mov    QWORD PTR [rsp+0x78],rsi
 100ee4a:	mov    r12,r9
 100ee4d:	mov    r14d,r8d
 100ee50:	mov    r15d,edx
 100ee53:	mov    rbx,rcx
 100ee56:	add    rcx,0x18
 100ee5a:	call   QWORD PTR [rip+0xffffffffffff2c60]        # 0x1001ac0
 100ee60:	nop
 100ee61:	lea    rcx,[rbx+0x20]
 100ee65:	call   QWORD PTR [rip+0xffffffffffff2c55]        # 0x1001ac0
 100ee6b:	nop
 100ee6c:	lea    rcx,[rbx+0x28]
 100ee70:	call   QWORD PTR [rip+0xffffffffffff2c4a]        # 0x1001ac0
 100ee76:	nop
 100ee77:	lea    rcx,[rbx+0x30]
 100ee7b:	call   QWORD PTR [rip+0xffffffffffff2c3f]        # 0x1001ac0
 100ee81:	nop
 100ee82:	lea    rcx,[rbx+0x38]
 100ee86:	call   QWORD PTR [rip+0xffffffffffff2c34]        # 0x1001ac0
 100ee8c:	nop
 100ee8d:	movzx  eax,BYTE PTR [rsp+0x80]
 100ee95:	mov    rcx,QWORD PTR [rsp+0x60]
 100ee9a:	mov    BYTE PTR [rcx+0x10],al
 100ee9d:	mov    DWORD PTR [rcx+0x14],0x1
 100eea4:	xor    eax,eax
 100eea6:	mov    QWORD PTR [rcx+0x8],rax
 100eeaa:	mov    DWORD PTR [rcx+0x4],r14d
 100eeae:	mov    DWORD PTR [rcx],r15d
 100eeb1:	mov    rdx,r12
 100eeb4:	lea    rcx,[rbx+0x18]
 100eeb8:	call   QWORD PTR [rip+0xffffffffffff2bda]        # 0x1001a98
 100eebe:	lea    rdx,[rip+0xffffffffffff2f4b]        # 0x1001e10
 100eec5:	lea    rcx,[rbx+0x28]
 100eec9:	call   QWORD PTR [rip+0xffffffffffff2bc9]        # 0x1001a98
 100eecf:	lea    rdx,[rip+0xffffffffffff2f3a]        # 0x1001e10
 100eed6:	lea    rcx,[rbx+0x30]
 100eeda:	call   QWORD PTR [rip+0xffffffffffff2bb8]        # 0x1001a98
 100eee0:	lea    rdx,[rip+0xffffffffffff2f29]        # 0x1001e10
 100eee7:	lea    rcx,[rbx+0x38]
 100eeeb:	call   QWORD PTR [rip+0xffffffffffff2ba7]        # 0x1001a98
 100eef1:	lea    rdx,[rip+0xffffffffffff2f18]        # 0x1001e10
 100eef8:	lea    rcx,[rbx+0x20]
 100eefc:	call   QWORD PTR [rip+0xffffffffffff2b96]        # 0x1001a98
 100ef02:	nop
 100ef03:	mov    rax,QWORD PTR [rsp+0x60]
 100ef08:	mov    rbx,QWORD PTR [rsp+0x68]
 100ef0d:	mov    rbp,QWORD PTR [rsp+0x70]
 100ef12:	mov    rsi,QWORD PTR [rsp+0x78]
 100ef17:	add    rsp,0x30
 100ef1b:	pop    r15
 100ef1d:	pop    r14
 100ef1f:	pop    r13
 100ef21:	pop    r12
 100ef23:	pop    rdi
 100ef24:	ret    
 100ef25:	int3   
 100ef26:	int3   
 100ef27:	int3   
 100ef28:	int3   
 100ef29:	int3   
 100ef2a:	int3   
 100ef2b:	int3   
 100ef2c:	int3   
 100ef2d:	int3   
 100ef2e:	int3   
 100ef2f:	int3   
 100ef30:	mov    QWORD PTR [rsp+0x8],rcx
 100ef35:	push   rdi
 100ef36:	push   r12
 100ef38:	push   r13
 100ef3a:	push   r14
 100ef3c:	push   r15
 100ef3e:	sub    rsp,0x30
 100ef42:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100ef4b:	mov    QWORD PTR [rsp+0x68],rbx
 100ef50:	mov    QWORD PTR [rsp+0x70],rbp
 100ef55:	mov    QWORD PTR [rsp+0x78],rsi
 100ef5a:	mov    r12,r9
 100ef5d:	mov    r14d,r8d
 100ef60:	mov    r15d,edx
 100ef63:	mov    rbx,rcx
 100ef66:	add    rcx,0x18
 100ef6a:	call   QWORD PTR [rip+0xffffffffffff2b50]        # 0x1001ac0
 100ef70:	nop
 100ef71:	lea    rcx,[rbx+0x20]
 100ef75:	call   QWORD PTR [rip+0xffffffffffff2b45]        # 0x1001ac0
 100ef7b:	nop
 100ef7c:	lea    rcx,[rbx+0x28]
 100ef80:	call   QWORD PTR [rip+0xffffffffffff2b3a]        # 0x1001ac0
 100ef86:	nop
 100ef87:	lea    rcx,[rbx+0x30]
 100ef8b:	call   QWORD PTR [rip+0xffffffffffff2b2f]        # 0x1001ac0
 100ef91:	nop
 100ef92:	lea    rcx,[rbx+0x38]
 100ef96:	call   QWORD PTR [rip+0xffffffffffff2b24]        # 0x1001ac0
 100ef9c:	nop
 100ef9d:	movzx  eax,BYTE PTR [rsp+0x88]
 100efa5:	mov    rcx,QWORD PTR [rsp+0x60]
 100efaa:	mov    BYTE PTR [rcx+0x10],al
 100efad:	mov    DWORD PTR [rcx+0x14],0x1
 100efb4:	xor    eax,eax
 100efb6:	mov    QWORD PTR [rcx+0x8],rax
 100efba:	mov    DWORD PTR [rcx+0x4],r14d
 100efbe:	mov    DWORD PTR [rcx],r15d
 100efc1:	mov    rdx,r12
 100efc4:	lea    rcx,[rbx+0x18]
 100efc8:	call   QWORD PTR [rip+0xffffffffffff2aca]        # 0x1001a98
 100efce:	lea    rdx,[rip+0xffffffffffff2e3b]        # 0x1001e10
 100efd5:	lea    rcx,[rbx+0x28]
 100efd9:	call   QWORD PTR [rip+0xffffffffffff2ab9]        # 0x1001a98
 100efdf:	lea    rdx,[rip+0xffffffffffff2e2a]        # 0x1001e10
 100efe6:	lea    rcx,[rbx+0x30]
 100efea:	call   QWORD PTR [rip+0xffffffffffff2aa8]        # 0x1001a98
 100eff0:	lea    rdx,[rip+0xffffffffffff2e19]        # 0x1001e10
 100eff7:	lea    rcx,[rbx+0x38]
 100effb:	call   QWORD PTR [rip+0xffffffffffff2a97]        # 0x1001a98
 100f001:	mov    rdx,QWORD PTR [rsp+0x80]
 100f009:	lea    rcx,[rbx+0x20]
 100f00d:	call   QWORD PTR [rip+0xffffffffffff2a85]        # 0x1001a98
 100f013:	nop
 100f014:	mov    rax,QWORD PTR [rsp+0x60]
 100f019:	mov    rbx,QWORD PTR [rsp+0x68]
 100f01e:	mov    rbp,QWORD PTR [rsp+0x70]
 100f023:	mov    rsi,QWORD PTR [rsp+0x78]
 100f028:	add    rsp,0x30
 100f02c:	pop    r15
 100f02e:	pop    r14
 100f030:	pop    r13
 100f032:	pop    r12
 100f034:	pop    rdi
 100f035:	ret    
 100f036:	int3   
 100f037:	int3   
 100f038:	int3   
 100f039:	int3   
 100f03a:	int3   
 100f03b:	int3   
 100f03c:	int3   
 100f03d:	int3   
 100f03e:	int3   
 100f03f:	int3   
 100f040:	mov    QWORD PTR [rsp+0x8],rcx
 100f045:	push   rdi
 100f046:	push   r12
 100f048:	push   r13
 100f04a:	push   r14
 100f04c:	push   r15
 100f04e:	sub    rsp,0x30
 100f052:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100f05b:	mov    QWORD PTR [rsp+0x68],rbx
 100f060:	mov    QWORD PTR [rsp+0x70],rbp
 100f065:	mov    QWORD PTR [rsp+0x78],rsi
 100f06a:	mov    r12d,r9d
 100f06d:	mov    ebp,r8d
 100f070:	mov    r14d,edx
 100f073:	mov    rbx,rcx
 100f076:	add    rcx,0x18
 100f07a:	call   QWORD PTR [rip+0xffffffffffff2a40]        # 0x1001ac0
 100f080:	nop
 100f081:	lea    rcx,[rbx+0x20]
 100f085:	call   QWORD PTR [rip+0xffffffffffff2a35]        # 0x1001ac0
 100f08b:	nop
 100f08c:	lea    rcx,[rbx+0x28]
 100f090:	call   QWORD PTR [rip+0xffffffffffff2a2a]        # 0x1001ac0
 100f096:	nop
 100f097:	lea    rcx,[rbx+0x30]
 100f09b:	call   QWORD PTR [rip+0xffffffffffff2a1f]        # 0x1001ac0
 100f0a1:	nop
 100f0a2:	lea    rcx,[rbx+0x38]
 100f0a6:	call   QWORD PTR [rip+0xffffffffffff2a14]        # 0x1001ac0
 100f0ac:	nop
 100f0ad:	mov    rax,QWORD PTR [rsp+0x60]
 100f0b2:	mov    BYTE PTR [rax+0x10],0x0
 100f0b6:	mov    DWORD PTR [rax+0x14],0x1
 100f0bd:	mov    DWORD PTR [rax+0x8],0x0
 100f0c4:	mov    DWORD PTR [rax+0x4],ebp
 100f0c7:	mov    DWORD PTR [rax],r14d
 100f0ca:	mov    DWORD PTR [rax+0xc],r12d
 100f0ce:	lea    rdx,[rip+0xffffffffffff2d3b]        # 0x1001e10
 100f0d5:	lea    rcx,[rbx+0x18]
 100f0d9:	call   QWORD PTR [rip+0xffffffffffff29b9]        # 0x1001a98
 100f0df:	lea    rdx,[rip+0xffffffffffff2d2a]        # 0x1001e10
 100f0e6:	lea    rcx,[rbx+0x28]
 100f0ea:	call   QWORD PTR [rip+0xffffffffffff29a8]        # 0x1001a98
 100f0f0:	lea    rdx,[rip+0xffffffffffff2d19]        # 0x1001e10
 100f0f7:	lea    rcx,[rbx+0x30]
 100f0fb:	call   QWORD PTR [rip+0xffffffffffff2997]        # 0x1001a98
 100f101:	lea    rdx,[rip+0xffffffffffff2d08]        # 0x1001e10
 100f108:	lea    rcx,[rbx+0x38]
 100f10c:	call   QWORD PTR [rip+0xffffffffffff2986]        # 0x1001a98
 100f112:	lea    rdx,[rip+0xffffffffffff2cf7]        # 0x1001e10
 100f119:	lea    rcx,[rbx+0x20]
 100f11d:	call   QWORD PTR [rip+0xffffffffffff2975]        # 0x1001a98
 100f123:	nop
 100f124:	mov    rax,QWORD PTR [rsp+0x60]
 100f129:	mov    rbx,QWORD PTR [rsp+0x68]
 100f12e:	mov    rbp,QWORD PTR [rsp+0x70]
 100f133:	mov    rsi,QWORD PTR [rsp+0x78]
 100f138:	add    rsp,0x30
 100f13c:	pop    r15
 100f13e:	pop    r14
 100f140:	pop    r13
 100f142:	pop    r12
 100f144:	pop    rdi
 100f145:	ret    
 100f146:	int3   
 100f147:	int3   
 100f148:	int3   
 100f149:	int3   
 100f14a:	int3   
 100f14b:	int3   
 100f14c:	int3   
 100f14d:	int3   
 100f14e:	int3   
 100f14f:	int3   
 100f150:	mov    QWORD PTR [rsp+0x8],rcx
 100f155:	push   rdi
 100f156:	push   r12
 100f158:	push   r13
 100f15a:	push   r14
 100f15c:	push   r15
 100f15e:	sub    rsp,0x30
 100f162:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100f16b:	mov    QWORD PTR [rsp+0x68],rbx
 100f170:	mov    QWORD PTR [rsp+0x70],rbp
 100f175:	mov    QWORD PTR [rsp+0x78],rsi
 100f17a:	mov    r12d,r9d
 100f17d:	mov    ebp,r8d
 100f180:	mov    r14d,edx
 100f183:	mov    rbx,rcx
 100f186:	add    rcx,0x18
 100f18a:	call   QWORD PTR [rip+0xffffffffffff2930]        # 0x1001ac0
 100f190:	nop
 100f191:	lea    rcx,[rbx+0x20]
 100f195:	call   QWORD PTR [rip+0xffffffffffff2925]        # 0x1001ac0
 100f19b:	nop
 100f19c:	lea    rcx,[rbx+0x28]
 100f1a0:	call   QWORD PTR [rip+0xffffffffffff291a]        # 0x1001ac0
 100f1a6:	nop
 100f1a7:	lea    rcx,[rbx+0x30]
 100f1ab:	call   QWORD PTR [rip+0xffffffffffff290f]        # 0x1001ac0
 100f1b1:	nop
 100f1b2:	lea    rcx,[rbx+0x38]
 100f1b6:	call   QWORD PTR [rip+0xffffffffffff2904]        # 0x1001ac0
 100f1bc:	nop
 100f1bd:	mov    rax,QWORD PTR [rsp+0x60]
 100f1c2:	mov    BYTE PTR [rax+0x10],0x0
 100f1c6:	mov    DWORD PTR [rax+0x14],0x1
 100f1cd:	mov    DWORD PTR [rax+0x8],0x0
 100f1d4:	mov    DWORD PTR [rax+0x4],ebp
 100f1d7:	mov    DWORD PTR [rax],r14d
 100f1da:	mov    DWORD PTR [rax+0xc],r12d
 100f1de:	lea    rdx,[rip+0xffffffffffff2c2b]        # 0x1001e10
 100f1e5:	lea    rcx,[rbx+0x18]
 100f1e9:	call   QWORD PTR [rip+0xffffffffffff28a9]        # 0x1001a98
 100f1ef:	lea    rdx,[rip+0xffffffffffff2c1a]        # 0x1001e10
 100f1f6:	lea    rcx,[rbx+0x28]
 100f1fa:	call   QWORD PTR [rip+0xffffffffffff2898]        # 0x1001a98
 100f200:	lea    rdx,[rip+0xffffffffffff2c09]        # 0x1001e10
 100f207:	lea    rcx,[rbx+0x30]
 100f20b:	call   QWORD PTR [rip+0xffffffffffff2887]        # 0x1001a98
 100f211:	lea    rdx,[rip+0xffffffffffff2bf8]        # 0x1001e10
 100f218:	lea    rcx,[rbx+0x38]
 100f21c:	call   QWORD PTR [rip+0xffffffffffff2876]        # 0x1001a98
 100f222:	mov    rdx,QWORD PTR [rsp+0x80]
 100f22a:	lea    rcx,[rbx+0x20]
 100f22e:	call   QWORD PTR [rip+0xffffffffffff2864]        # 0x1001a98
 100f234:	nop
 100f235:	mov    rax,QWORD PTR [rsp+0x60]
 100f23a:	mov    rbx,QWORD PTR [rsp+0x68]
 100f23f:	mov    rbp,QWORD PTR [rsp+0x70]
 100f244:	mov    rsi,QWORD PTR [rsp+0x78]
 100f249:	add    rsp,0x30
 100f24d:	pop    r15
 100f24f:	pop    r14
 100f251:	pop    r13
 100f253:	pop    r12
 100f255:	pop    rdi
 100f256:	ret    
 100f257:	int3   
 100f258:	int3   
 100f259:	int3   
 100f25a:	int3   
 100f25b:	int3   
 100f25c:	int3   
 100f25d:	int3   
 100f25e:	int3   
 100f25f:	int3   
 100f260:	mov    QWORD PTR [rsp+0x8],rcx
 100f265:	push   rdi
 100f266:	push   r12
 100f268:	push   r13
 100f26a:	push   r14
 100f26c:	push   r15
 100f26e:	sub    rsp,0x30
 100f272:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100f27b:	mov    QWORD PTR [rsp+0x68],rbx
 100f280:	mov    QWORD PTR [rsp+0x70],rbp
 100f285:	mov    QWORD PTR [rsp+0x78],rsi
 100f28a:	mov    r12d,r9d
 100f28d:	mov    ebp,r8d
 100f290:	mov    r14d,edx
 100f293:	mov    rbx,rcx
 100f296:	add    rcx,0x18
 100f29a:	call   QWORD PTR [rip+0xffffffffffff2820]        # 0x1001ac0
 100f2a0:	nop
 100f2a1:	lea    rcx,[rbx+0x20]
 100f2a5:	call   QWORD PTR [rip+0xffffffffffff2815]        # 0x1001ac0
 100f2ab:	nop
 100f2ac:	lea    rcx,[rbx+0x28]
 100f2b0:	call   QWORD PTR [rip+0xffffffffffff280a]        # 0x1001ac0
 100f2b6:	nop
 100f2b7:	lea    rcx,[rbx+0x30]
 100f2bb:	call   QWORD PTR [rip+0xffffffffffff27ff]        # 0x1001ac0
 100f2c1:	nop
 100f2c2:	lea    rcx,[rbx+0x38]
 100f2c6:	call   QWORD PTR [rip+0xffffffffffff27f4]        # 0x1001ac0
 100f2cc:	nop
 100f2cd:	mov    rax,QWORD PTR [rsp+0x60]
 100f2d2:	mov    BYTE PTR [rax+0x10],0x0
 100f2d6:	mov    DWORD PTR [rax+0x14],0x1
 100f2dd:	mov    DWORD PTR [rax+0x8],0x0
 100f2e4:	mov    DWORD PTR [rax+0x4],ebp
 100f2e7:	mov    DWORD PTR [rax],r14d
 100f2ea:	mov    DWORD PTR [rax+0xc],r12d
 100f2ee:	lea    rdx,[rip+0xffffffffffff2b1b]        # 0x1001e10
 100f2f5:	lea    rcx,[rbx+0x18]
 100f2f9:	call   QWORD PTR [rip+0xffffffffffff2799]        # 0x1001a98
 100f2ff:	mov    rdx,QWORD PTR [rsp+0x88]
 100f307:	lea    rcx,[rbx+0x28]
 100f30b:	call   QWORD PTR [rip+0xffffffffffff2787]        # 0x1001a98
 100f311:	lea    rdx,[rip+0xffffffffffff2af8]        # 0x1001e10
 100f318:	lea    rcx,[rbx+0x30]
 100f31c:	call   QWORD PTR [rip+0xffffffffffff2776]        # 0x1001a98
 100f322:	lea    rdx,[rip+0xffffffffffff2ae7]        # 0x1001e10
 100f329:	lea    rcx,[rbx+0x38]
 100f32d:	call   QWORD PTR [rip+0xffffffffffff2765]        # 0x1001a98
 100f333:	mov    rdx,QWORD PTR [rsp+0x80]
 100f33b:	lea    rcx,[rbx+0x20]
 100f33f:	call   QWORD PTR [rip+0xffffffffffff2753]        # 0x1001a98
 100f345:	nop
 100f346:	mov    rax,QWORD PTR [rsp+0x60]
 100f34b:	mov    rbx,QWORD PTR [rsp+0x68]
 100f350:	mov    rbp,QWORD PTR [rsp+0x70]
 100f355:	mov    rsi,QWORD PTR [rsp+0x78]
 100f35a:	add    rsp,0x30
 100f35e:	pop    r15
 100f360:	pop    r14
 100f362:	pop    r13
 100f364:	pop    r12
 100f366:	pop    rdi
 100f367:	ret    
 100f368:	int3   
 100f369:	int3   
 100f36a:	int3   
 100f36b:	int3   
 100f36c:	int3   
 100f36d:	int3   
 100f36e:	int3   
 100f36f:	int3   
 100f370:	mov    QWORD PTR [rsp+0x8],rcx
 100f375:	push   rdi
 100f376:	push   r12
 100f378:	push   r13
 100f37a:	push   r14
 100f37c:	push   r15
 100f37e:	sub    rsp,0x30
 100f382:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100f38b:	mov    QWORD PTR [rsp+0x68],rbx
 100f390:	mov    QWORD PTR [rsp+0x70],rbp
 100f395:	mov    QWORD PTR [rsp+0x78],rsi
 100f39a:	mov    r12d,r9d
 100f39d:	mov    ebp,r8d
 100f3a0:	mov    r14d,edx
 100f3a3:	mov    rbx,rcx
 100f3a6:	add    rcx,0x18
 100f3aa:	call   QWORD PTR [rip+0xffffffffffff2710]        # 0x1001ac0
 100f3b0:	nop
 100f3b1:	lea    rcx,[rbx+0x20]
 100f3b5:	call   QWORD PTR [rip+0xffffffffffff2705]        # 0x1001ac0
 100f3bb:	nop
 100f3bc:	lea    rcx,[rbx+0x28]
 100f3c0:	call   QWORD PTR [rip+0xffffffffffff26fa]        # 0x1001ac0
 100f3c6:	nop
 100f3c7:	lea    rcx,[rbx+0x30]
 100f3cb:	call   QWORD PTR [rip+0xffffffffffff26ef]        # 0x1001ac0
 100f3d1:	nop
 100f3d2:	lea    rcx,[rbx+0x38]
 100f3d6:	call   QWORD PTR [rip+0xffffffffffff26e4]        # 0x1001ac0
 100f3dc:	nop
 100f3dd:	mov    rcx,QWORD PTR [rsp+0x60]
 100f3e2:	mov    BYTE PTR [rcx+0x10],0x0
 100f3e6:	mov    eax,DWORD PTR [rsp+0x80]
 100f3ed:	mov    DWORD PTR [rcx+0x14],eax
 100f3f0:	mov    DWORD PTR [rcx+0x8],ebp
 100f3f3:	mov    DWORD PTR [rcx+0x4],r12d
 100f3f7:	mov    DWORD PTR [rcx],r14d
 100f3fa:	mov    eax,DWORD PTR [rsp+0xa0]
 100f401:	mov    DWORD PTR [rcx+0xc],eax
 100f404:	mov    rdx,QWORD PTR [rsp+0x88]
 100f40c:	lea    rcx,[rbx+0x18]
 100f410:	call   QWORD PTR [rip+0xffffffffffff2682]        # 0x1001a98
 100f416:	lea    rdx,[rip+0xffffffffffff29f3]        # 0x1001e10
 100f41d:	lea    rcx,[rbx+0x28]
 100f421:	call   QWORD PTR [rip+0xffffffffffff2671]        # 0x1001a98
 100f427:	mov    rdx,QWORD PTR [rsp+0x90]
 100f42f:	lea    rcx,[rbx+0x30]
 100f433:	call   QWORD PTR [rip+0xffffffffffff265f]        # 0x1001a98
 100f439:	mov    rdx,QWORD PTR [rsp+0x98]
 100f441:	lea    rcx,[rbx+0x38]
 100f445:	call   QWORD PTR [rip+0xffffffffffff264d]        # 0x1001a98
 100f44b:	lea    rdx,[rip+0xffffffffffff29be]        # 0x1001e10
 100f452:	lea    rcx,[rbx+0x20]
 100f456:	call   QWORD PTR [rip+0xffffffffffff263c]        # 0x1001a98
 100f45c:	nop
 100f45d:	mov    rax,QWORD PTR [rsp+0x60]
 100f462:	mov    rbx,QWORD PTR [rsp+0x68]
 100f467:	mov    rbp,QWORD PTR [rsp+0x70]
 100f46c:	mov    rsi,QWORD PTR [rsp+0x78]
 100f471:	add    rsp,0x30
 100f475:	pop    r15
 100f477:	pop    r14
 100f479:	pop    r13
 100f47b:	pop    r12
 100f47d:	pop    rdi
 100f47e:	ret    
 100f47f:	int3   
 100f480:	int3   
 100f481:	int3   
 100f482:	int3   
 100f483:	int3   
 100f484:	int3   
 100f485:	int3   
 100f486:	int3   
 100f487:	int3   
 100f488:	int3   
 100f489:	int3   
 100f48a:	int3   
 100f48b:	int3   
 100f48c:	int3   
 100f48d:	int3   
 100f48e:	int3   
 100f48f:	int3   
 100f490:	mov    QWORD PTR [rsp+0x8],rcx
 100f495:	push   rbx
 100f496:	sub    rsp,0x30
 100f49a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100f4a3:	mov    rbx,rcx
 100f4a6:	add    rcx,0x38
 100f4aa:	call   QWORD PTR [rip+0xffffffffffff25f8]        # 0x1001aa8
 100f4b0:	nop
 100f4b1:	lea    rcx,[rbx+0x30]
 100f4b5:	call   QWORD PTR [rip+0xffffffffffff25ed]        # 0x1001aa8
 100f4bb:	nop
 100f4bc:	lea    rcx,[rbx+0x28]
 100f4c0:	call   QWORD PTR [rip+0xffffffffffff25e2]        # 0x1001aa8
 100f4c6:	nop
 100f4c7:	lea    rcx,[rbx+0x20]
 100f4cb:	call   QWORD PTR [rip+0xffffffffffff25d7]        # 0x1001aa8
 100f4d1:	nop
 100f4d2:	lea    rcx,[rbx+0x18]
 100f4d6:	add    rsp,0x30
 100f4da:	pop    rbx
 100f4db:	rex.W jmp QWORD PTR [rip+0xffffffffffff25c6]        # 0x1001aa8
 100f4e2:	int3   
 100f4e3:	int3   
 100f4e4:	int3   
 100f4e5:	int3   
 100f4e6:	int3   
 100f4e7:	int3   
 100f4e8:	int3   
 100f4e9:	int3   
 100f4ea:	int3   
 100f4eb:	int3   
 100f4ec:	int3   
 100f4ed:	int3   
 100f4ee:	int3   
 100f4ef:	int3   
 100f4f0:	mov    QWORD PTR [rsp+0x8],rbx
 100f4f5:	push   rdi
 100f4f6:	sub    rsp,0x20
 100f4fa:	mov    eax,DWORD PTR [rdx]
 100f4fc:	mov    rbx,rdx
 100f4ff:	mov    rdi,rcx
 100f502:	mov    DWORD PTR [rcx],eax
 100f504:	mov    eax,DWORD PTR [rdx+0x4]
 100f507:	add    rcx,0x18
 100f50b:	mov    DWORD PTR [rcx-0x14],eax
 100f50e:	mov    eax,DWORD PTR [rdx+0x8]
 100f511:	add    rdx,0x18
 100f515:	mov    DWORD PTR [rcx-0x10],eax
 100f518:	mov    eax,DWORD PTR [rdx-0xc]
 100f51b:	mov    DWORD PTR [rcx-0xc],eax
 100f51e:	movzx  eax,BYTE PTR [rdx-0x8]
 100f522:	mov    BYTE PTR [rcx-0x8],al
 100f525:	mov    eax,DWORD PTR [rdx-0x4]
 100f528:	mov    DWORD PTR [rcx-0x4],eax
 100f52b:	call   QWORD PTR [rip+0xffffffffffff256f]        # 0x1001aa0
 100f531:	lea    rdx,[rbx+0x20]
 100f535:	lea    rcx,[rdi+0x20]
 100f539:	call   QWORD PTR [rip+0xffffffffffff2561]        # 0x1001aa0
 100f53f:	lea    rdx,[rbx+0x28]
 100f543:	lea    rcx,[rdi+0x28]
 100f547:	call   QWORD PTR [rip+0xffffffffffff2553]        # 0x1001aa0
 100f54d:	lea    rdx,[rbx+0x30]
 100f551:	lea    rcx,[rdi+0x30]
 100f555:	call   QWORD PTR [rip+0xffffffffffff2545]        # 0x1001aa0
 100f55b:	lea    rdx,[rbx+0x38]
 100f55f:	lea    rcx,[rdi+0x38]
 100f563:	call   QWORD PTR [rip+0xffffffffffff2537]        # 0x1001aa0
 100f569:	mov    rbx,QWORD PTR [rsp+0x30]
 100f56e:	mov    rax,rdi
 100f571:	add    rsp,0x20
 100f575:	pop    rdi
 100f576:	ret    
 100f577:	int3   
 100f578:	int3   
 100f579:	int3   
 100f57a:	int3   
 100f57b:	int3   
 100f57c:	int3   
 100f57d:	int3   
 100f57e:	int3   
 100f57f:	int3   
 100f580:	mov    QWORD PTR [rsp+0x8],rcx
 100f585:	push   rbx
 100f586:	sub    rsp,0x30
 100f58a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100f593:	mov    rbx,rcx
 100f596:	call   0x100fd10
 100f59b:	nop
 100f59c:	lea    rax,[rip+0xffffffffffff32d5]        # 0x1002878
 100f5a3:	mov    QWORD PTR [rbx],rax
 100f5a6:	mov    rcx,rbx
 100f5a9:	add    rsp,0x30
 100f5ad:	pop    rbx
 100f5ae:	jmp    0x100fd10
 100f5b3:	int3   
 100f5b4:	int3   
 100f5b5:	int3   
 100f5b6:	int3   
 100f5b7:	int3   
 100f5b8:	int3   
 100f5b9:	int3   
 100f5ba:	int3   
 100f5bb:	int3   
 100f5bc:	int3   
 100f5bd:	int3   
 100f5be:	int3   
 100f5bf:	int3   
 100f5c0:	rex push rdi
 100f5c2:	sub    rsp,0x30
 100f5c6:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100f5cf:	mov    QWORD PTR [rsp+0x48],rbx
 100f5d4:	mov    QWORD PTR [rsp+0x50],rbp
 100f5d9:	mov    QWORD PTR [rsp+0x58],rsi
 100f5de:	mov    ebx,r8d
 100f5e1:	mov    edi,edx
 100f5e3:	mov    rsi,rcx
 100f5e6:	mov    ecx,0x40
 100f5eb:	call   0x103f9d2
 100f5f0:	mov    QWORD PTR [rsp+0x40],rax
 100f5f5:	test   rax,rax
 100f5f8:	je     0x100f60c
 100f5fa:	mov    r8d,ebx
 100f5fd:	mov    edx,edi
 100f5ff:	mov    rcx,rax
 100f602:	call   0x100ed10
 100f607:	mov    rbx,rax
 100f60a:	jmp    0x100f60e
 100f60c:	xor    ebx,ebx
 100f60e:	xor    r8d,r8d
 100f611:	mov    rdx,QWORD PTR [rsi+0x10]
 100f615:	mov    rcx,rsi
 100f618:	call   0x100fdc0
 100f61d:	mov    rdi,rax
 100f620:	mov    rdx,rbx
 100f623:	lea    rcx,[rax+0x10]
 100f627:	call   0x100f4f0
 100f62c:	mov    r11,QWORD PTR [rsi+0x10]
 100f630:	test   r11,r11
 100f633:	je     0x100f63a
 100f635:	mov    QWORD PTR [r11],rdi
 100f638:	jmp    0x100f63e
 100f63a:	mov    QWORD PTR [rsi+0x8],rdi
 100f63e:	mov    QWORD PTR [rsi+0x10],rdi
 100f642:	mov    QWORD PTR [rsp+0x40],rbx
 100f647:	test   rbx,rbx
 100f64a:	je     0x100f68a
 100f64c:	lea    rcx,[rbx+0x38]
 100f650:	call   QWORD PTR [rip+0xffffffffffff2452]        # 0x1001aa8
 100f656:	nop
 100f657:	lea    rcx,[rbx+0x30]
 100f65b:	call   QWORD PTR [rip+0xffffffffffff2447]        # 0x1001aa8
 100f661:	nop
 100f662:	lea    rcx,[rbx+0x28]
 100f666:	call   QWORD PTR [rip+0xffffffffffff243c]        # 0x1001aa8
 100f66c:	nop
 100f66d:	lea    rcx,[rbx+0x20]
 100f671:	call   QWORD PTR [rip+0xffffffffffff2431]        # 0x1001aa8
 100f677:	nop
 100f678:	lea    rcx,[rbx+0x18]
 100f67c:	call   QWORD PTR [rip+0xffffffffffff2426]        # 0x1001aa8
 100f682:	mov    rcx,rbx
 100f685:	call   0x103f95a
 100f68a:	lea    rax,[rdi+0x10]
 100f68e:	mov    rbx,QWORD PTR [rsp+0x48]
 100f693:	mov    rbp,QWORD PTR [rsp+0x50]
 100f698:	mov    rsi,QWORD PTR [rsp+0x58]
 100f69d:	add    rsp,0x30
 100f6a1:	pop    rdi
 100f6a2:	ret    
 100f6a3:	int3   
 100f6a4:	int3   
 100f6a5:	int3   
 100f6a6:	int3   
 100f6a7:	int3   
 100f6a8:	int3   
 100f6a9:	int3   
 100f6aa:	int3   
 100f6ab:	int3   
 100f6ac:	int3   
 100f6ad:	int3   
 100f6ae:	int3   
 100f6af:	int3   
 100f6b0:	rex push rdi
 100f6b2:	sub    rsp,0x30
 100f6b6:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100f6bf:	mov    QWORD PTR [rsp+0x48],rbx
 100f6c4:	mov    QWORD PTR [rsp+0x50],rbp
 100f6c9:	mov    QWORD PTR [rsp+0x58],rsi
 100f6ce:	mov    ebx,r9d
 100f6d1:	mov    edi,r8d
 100f6d4:	mov    ebp,edx
 100f6d6:	mov    rsi,rcx
 100f6d9:	mov    ecx,0x40
 100f6de:	call   0x103f9d2
 100f6e3:	mov    QWORD PTR [rsp+0x40],rax
 100f6e8:	test   rax,rax
 100f6eb:	je     0x100f702
 100f6ed:	mov    r9d,ebx
 100f6f0:	mov    r8d,edi
 100f6f3:	mov    edx,ebp
 100f6f5:	mov    rcx,rax
 100f6f8:	call   0x100f040
 100f6fd:	mov    rbx,rax
 100f700:	jmp    0x100f704
 100f702:	xor    ebx,ebx
 100f704:	xor    r8d,r8d
 100f707:	mov    rdx,QWORD PTR [rsi+0x10]
 100f70b:	mov    rcx,rsi
 100f70e:	call   0x100fdc0
 100f713:	mov    rdi,rax
 100f716:	mov    rdx,rbx
 100f719:	lea    rcx,[rax+0x10]
 100f71d:	call   0x100f4f0
 100f722:	mov    r11,QWORD PTR [rsi+0x10]
 100f726:	test   r11,r11
 100f729:	je     0x100f730
 100f72b:	mov    QWORD PTR [r11],rdi
 100f72e:	jmp    0x100f734
 100f730:	mov    QWORD PTR [rsi+0x8],rdi
 100f734:	mov    QWORD PTR [rsi+0x10],rdi
 100f738:	mov    QWORD PTR [rsp+0x40],rbx
 100f73d:	test   rbx,rbx
 100f740:	je     0x100f780
 100f742:	lea    rcx,[rbx+0x38]
 100f746:	call   QWORD PTR [rip+0xffffffffffff235c]        # 0x1001aa8
 100f74c:	nop
 100f74d:	lea    rcx,[rbx+0x30]
 100f751:	call   QWORD PTR [rip+0xffffffffffff2351]        # 0x1001aa8
 100f757:	nop
 100f758:	lea    rcx,[rbx+0x28]
 100f75c:	call   QWORD PTR [rip+0xffffffffffff2346]        # 0x1001aa8
 100f762:	nop
 100f763:	lea    rcx,[rbx+0x20]
 100f767:	call   QWORD PTR [rip+0xffffffffffff233b]        # 0x1001aa8
 100f76d:	nop
 100f76e:	lea    rcx,[rbx+0x18]
 100f772:	call   QWORD PTR [rip+0xffffffffffff2330]        # 0x1001aa8
 100f778:	mov    rcx,rbx
 100f77b:	call   0x103f95a
 100f780:	lea    rax,[rdi+0x10]
 100f784:	mov    rbx,QWORD PTR [rsp+0x48]
 100f789:	mov    rbp,QWORD PTR [rsp+0x50]
 100f78e:	mov    rsi,QWORD PTR [rsp+0x58]
 100f793:	add    rsp,0x30
 100f797:	pop    rdi
 100f798:	ret    
 100f799:	int3   
 100f79a:	int3   
 100f79b:	int3   
 100f79c:	int3   
 100f79d:	int3   
 100f79e:	int3   
 100f79f:	int3   
 100f7a0:	rex push rdi
 100f7a2:	sub    rsp,0x40
 100f7a6:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
 100f7af:	mov    QWORD PTR [rsp+0x58],rbx
 100f7b4:	mov    QWORD PTR [rsp+0x60],rbp
 100f7b9:	mov    QWORD PTR [rsp+0x68],rsi
 100f7be:	mov    ebx,r9d
 100f7c1:	mov    edi,r8d
 100f7c4:	mov    ebp,edx
 100f7c6:	mov    rsi,rcx
 100f7c9:	mov    ecx,0x40
 100f7ce:	call   0x103f9d2
 100f7d3:	mov    QWORD PTR [rsp+0x50],rax
 100f7d8:	test   rax,rax
 100f7db:	je     0x100f7fc
 100f7dd:	mov    r10,QWORD PTR [rsp+0x70]
 100f7e2:	mov    QWORD PTR [rsp+0x20],r10
 100f7e7:	mov    r9d,ebx
 100f7ea:	mov    r8d,edi
 100f7ed:	mov    edx,ebp
 100f7ef:	mov    rcx,rax
 100f7f2:	call   0x100f150
 100f7f7:	mov    rbx,rax
 100f7fa:	jmp    0x100f7fe
 100f7fc:	xor    ebx,ebx
 100f7fe:	xor    r8d,r8d
 100f801:	mov    rdx,QWORD PTR [rsi+0x10]
 100f805:	mov    rcx,rsi
 100f808:	call   0x100fdc0
 100f80d:	mov    rdi,rax
 100f810:	mov    rdx,rbx
 100f813:	lea    rcx,[rax+0x10]
 100f817:	call   0x100f4f0
 100f81c:	mov    r11,QWORD PTR [rsi+0x10]
 100f820:	test   r11,r11
 100f823:	je     0x100f82a
 100f825:	mov    QWORD PTR [r11],rdi
 100f828:	jmp    0x100f82e
 100f82a:	mov    QWORD PTR [rsi+0x8],rdi
 100f82e:	mov    QWORD PTR [rsi+0x10],rdi
 100f832:	mov    QWORD PTR [rsp+0x50],rbx
 100f837:	test   rbx,rbx
 100f83a:	je     0x100f87a
 100f83c:	lea    rcx,[rbx+0x38]
 100f840:	call   QWORD PTR [rip+0xffffffffffff2262]        # 0x1001aa8
 100f846:	nop
 100f847:	lea    rcx,[rbx+0x30]
 100f84b:	call   QWORD PTR [rip+0xffffffffffff2257]        # 0x1001aa8
 100f851:	nop
 100f852:	lea    rcx,[rbx+0x28]
 100f856:	call   QWORD PTR [rip+0xffffffffffff224c]        # 0x1001aa8
 100f85c:	nop
 100f85d:	lea    rcx,[rbx+0x20]
 100f861:	call   QWORD PTR [rip+0xffffffffffff2241]        # 0x1001aa8
 100f867:	nop
 100f868:	lea    rcx,[rbx+0x18]
 100f86c:	call   QWORD PTR [rip+0xffffffffffff2236]        # 0x1001aa8
 100f872:	mov    rcx,rbx
 100f875:	call   0x103f95a
 100f87a:	lea    rax,[rdi+0x10]
 100f87e:	mov    rbx,QWORD PTR [rsp+0x58]
 100f883:	mov    rbp,QWORD PTR [rsp+0x60]
 100f888:	mov    rsi,QWORD PTR [rsp+0x68]
 100f88d:	add    rsp,0x40
 100f891:	pop    rdi
 100f892:	ret    
 100f893:	int3   
 100f894:	int3   
 100f895:	int3   
 100f896:	int3   
 100f897:	int3   
 100f898:	int3   
 100f899:	int3   
 100f89a:	int3   
 100f89b:	int3   
 100f89c:	int3   
 100f89d:	int3   
 100f89e:	int3   
 100f89f:	int3   
 100f8a0:	rex push rdi
 100f8a2:	sub    rsp,0x40
 100f8a6:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
 100f8af:	mov    QWORD PTR [rsp+0x58],rbx
 100f8b4:	mov    QWORD PTR [rsp+0x60],rbp
 100f8b9:	mov    QWORD PTR [rsp+0x68],rsi
 100f8be:	mov    ebx,r9d
 100f8c1:	mov    edi,r8d
 100f8c4:	mov    ebp,edx
 100f8c6:	mov    rsi,rcx
 100f8c9:	mov    ecx,0x40
 100f8ce:	call   0x103f9d2
 100f8d3:	mov    QWORD PTR [rsp+0x50],rax
 100f8d8:	test   rax,rax
 100f8db:	je     0x100f906
 100f8dd:	mov    r10,QWORD PTR [rsp+0x78]
 100f8e2:	mov    QWORD PTR [rsp+0x28],r10
 100f8e7:	mov    r8,QWORD PTR [rsp+0x70]
 100f8ec:	mov    QWORD PTR [rsp+0x20],r8
 100f8f1:	mov    r9d,ebx
 100f8f4:	mov    r8d,edi
 100f8f7:	mov    edx,ebp
 100f8f9:	mov    rcx,rax
 100f8fc:	call   0x100f260
 100f901:	mov    rbx,rax
 100f904:	jmp    0x100f908
 100f906:	xor    ebx,ebx
 100f908:	xor    r8d,r8d
 100f90b:	mov    rdx,QWORD PTR [rsi+0x10]
 100f90f:	mov    rcx,rsi
 100f912:	call   0x100fdc0
 100f917:	mov    rdi,rax
 100f91a:	mov    rdx,rbx
 100f91d:	lea    rcx,[rax+0x10]
 100f921:	call   0x100f4f0
 100f926:	mov    r11,QWORD PTR [rsi+0x10]
 100f92a:	test   r11,r11
 100f92d:	je     0x100f934
 100f92f:	mov    QWORD PTR [r11],rdi
 100f932:	jmp    0x100f938
 100f934:	mov    QWORD PTR [rsi+0x8],rdi
 100f938:	mov    QWORD PTR [rsi+0x10],rdi
 100f93c:	mov    QWORD PTR [rsp+0x50],rbx
 100f941:	test   rbx,rbx
 100f944:	je     0x100f984
 100f946:	lea    rcx,[rbx+0x38]
 100f94a:	call   QWORD PTR [rip+0xffffffffffff2158]        # 0x1001aa8
 100f950:	nop
 100f951:	lea    rcx,[rbx+0x30]
 100f955:	call   QWORD PTR [rip+0xffffffffffff214d]        # 0x1001aa8
 100f95b:	nop
 100f95c:	lea    rcx,[rbx+0x28]
 100f960:	call   QWORD PTR [rip+0xffffffffffff2142]        # 0x1001aa8
 100f966:	nop
 100f967:	lea    rcx,[rbx+0x20]
 100f96b:	call   QWORD PTR [rip+0xffffffffffff2137]        # 0x1001aa8
 100f971:	nop
 100f972:	lea    rcx,[rbx+0x18]
 100f976:	call   QWORD PTR [rip+0xffffffffffff212c]        # 0x1001aa8
 100f97c:	mov    rcx,rbx
 100f97f:	call   0x103f95a
 100f984:	lea    rax,[rdi+0x10]
 100f988:	mov    rbx,QWORD PTR [rsp+0x58]
 100f98d:	mov    rbp,QWORD PTR [rsp+0x60]
 100f992:	mov    rsi,QWORD PTR [rsp+0x68]
 100f997:	add    rsp,0x40
 100f99b:	pop    rdi
 100f99c:	ret    
 100f99d:	int3   
 100f99e:	int3   
 100f99f:	int3   
 100f9a0:	int3   
 100f9a1:	int3   
 100f9a2:	int3   
 100f9a3:	int3   
 100f9a4:	int3   
 100f9a5:	int3   
 100f9a6:	int3   
 100f9a7:	int3   
 100f9a8:	int3   
 100f9a9:	int3   
 100f9aa:	int3   
 100f9ab:	int3   
 100f9ac:	int3   
 100f9ad:	int3   
 100f9ae:	int3   
 100f9af:	int3   
 100f9b0:	rex push rdi
 100f9b2:	sub    rsp,0x40
 100f9b6:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
 100f9bf:	mov    QWORD PTR [rsp+0x58],rbx
 100f9c4:	mov    QWORD PTR [rsp+0x60],rbp
 100f9c9:	mov    QWORD PTR [rsp+0x68],rsi
 100f9ce:	movzx  ebx,r9b
 100f9d2:	mov    edi,r8d
 100f9d5:	mov    ebp,edx
 100f9d7:	mov    rsi,rcx
 100f9da:	mov    ecx,0x40
 100f9df:	call   0x103f9d2
 100f9e4:	mov    QWORD PTR [rsp+0x50],rax
 100f9e9:	test   rax,rax
 100f9ec:	je     0x100fa09
 100f9ee:	mov    BYTE PTR [rsp+0x20],bl
 100f9f2:	mov    r9,QWORD PTR [rsp+0x70]
 100f9f7:	mov    r8d,edi
 100f9fa:	mov    edx,ebp
 100f9fc:	mov    rcx,rax
 100f9ff:	call   0x100ee20
 100fa04:	mov    rbx,rax
 100fa07:	jmp    0x100fa0b
 100fa09:	xor    ebx,ebx
 100fa0b:	xor    r8d,r8d
 100fa0e:	mov    rdx,QWORD PTR [rsi+0x10]
 100fa12:	mov    rcx,rsi
 100fa15:	call   0x100fdc0
 100fa1a:	mov    rdi,rax
 100fa1d:	mov    rdx,rbx
 100fa20:	lea    rcx,[rax+0x10]
 100fa24:	call   0x100f4f0
 100fa29:	mov    r11,QWORD PTR [rsi+0x10]
 100fa2d:	test   r11,r11
 100fa30:	je     0x100fa37
 100fa32:	mov    QWORD PTR [r11],rdi
 100fa35:	jmp    0x100fa3b
 100fa37:	mov    QWORD PTR [rsi+0x8],rdi
 100fa3b:	mov    QWORD PTR [rsi+0x10],rdi
 100fa3f:	mov    QWORD PTR [rsp+0x50],rbx
 100fa44:	test   rbx,rbx
 100fa47:	je     0x100fa87
 100fa49:	lea    rcx,[rbx+0x38]
 100fa4d:	call   QWORD PTR [rip+0xffffffffffff2055]        # 0x1001aa8
 100fa53:	nop
 100fa54:	lea    rcx,[rbx+0x30]
 100fa58:	call   QWORD PTR [rip+0xffffffffffff204a]        # 0x1001aa8
 100fa5e:	nop
 100fa5f:	lea    rcx,[rbx+0x28]
 100fa63:	call   QWORD PTR [rip+0xffffffffffff203f]        # 0x1001aa8
 100fa69:	nop
 100fa6a:	lea    rcx,[rbx+0x20]
 100fa6e:	call   QWORD PTR [rip+0xffffffffffff2034]        # 0x1001aa8
 100fa74:	nop
 100fa75:	lea    rcx,[rbx+0x18]
 100fa79:	call   QWORD PTR [rip+0xffffffffffff2029]        # 0x1001aa8
 100fa7f:	mov    rcx,rbx
 100fa82:	call   0x103f95a
 100fa87:	lea    rax,[rdi+0x10]
 100fa8b:	mov    rbx,QWORD PTR [rsp+0x58]
 100fa90:	mov    rbp,QWORD PTR [rsp+0x60]
 100fa95:	mov    rsi,QWORD PTR [rsp+0x68]
 100fa9a:	add    rsp,0x40
 100fa9e:	pop    rdi
 100fa9f:	ret    
 100faa0:	int3   
 100faa1:	int3   
 100faa2:	int3   
 100faa3:	int3   
 100faa4:	int3   
 100faa5:	int3   
 100faa6:	int3   
 100faa7:	int3   
 100faa8:	int3   
 100faa9:	int3   
 100faaa:	int3   
 100faab:	int3   
 100faac:	int3   
 100faad:	int3   
 100faae:	int3   
 100faaf:	int3   
 100fab0:	rex push rdi
 100fab2:	sub    rsp,0x40
 100fab6:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
 100fabf:	mov    QWORD PTR [rsp+0x58],rbx
 100fac4:	mov    QWORD PTR [rsp+0x60],rbp
 100fac9:	mov    QWORD PTR [rsp+0x68],rsi
 100face:	movzx  ebx,r9b
 100fad2:	mov    edi,r8d
 100fad5:	mov    ebp,edx
 100fad7:	mov    rsi,rcx
 100fada:	mov    ecx,0x40
 100fadf:	call   0x103f9d2
 100fae4:	mov    QWORD PTR [rsp+0x50],rax
 100fae9:	test   rax,rax
 100faec:	je     0x100fb13
 100faee:	mov    BYTE PTR [rsp+0x28],bl
 100faf2:	mov    r9,QWORD PTR [rsp+0x78]
 100faf7:	mov    QWORD PTR [rsp+0x20],r9
 100fafc:	mov    r9,QWORD PTR [rsp+0x70]
 100fb01:	mov    r8d,edi
 100fb04:	mov    edx,ebp
 100fb06:	mov    rcx,rax
 100fb09:	call   0x100ef30
 100fb0e:	mov    rbx,rax
 100fb11:	jmp    0x100fb15
 100fb13:	xor    ebx,ebx
 100fb15:	xor    r8d,r8d
 100fb18:	mov    rdx,QWORD PTR [rsi+0x10]
 100fb1c:	mov    rcx,rsi
 100fb1f:	call   0x100fdc0
 100fb24:	mov    rdi,rax
 100fb27:	mov    rdx,rbx
 100fb2a:	lea    rcx,[rax+0x10]
 100fb2e:	call   0x100f4f0
 100fb33:	mov    r11,QWORD PTR [rsi+0x10]
 100fb37:	test   r11,r11
 100fb3a:	je     0x100fb41
 100fb3c:	mov    QWORD PTR [r11],rdi
 100fb3f:	jmp    0x100fb45
 100fb41:	mov    QWORD PTR [rsi+0x8],rdi
 100fb45:	mov    QWORD PTR [rsi+0x10],rdi
 100fb49:	mov    QWORD PTR [rsp+0x50],rbx
 100fb4e:	test   rbx,rbx
 100fb51:	je     0x100fb91
 100fb53:	lea    rcx,[rbx+0x38]
 100fb57:	call   QWORD PTR [rip+0xffffffffffff1f4b]        # 0x1001aa8
 100fb5d:	nop
 100fb5e:	lea    rcx,[rbx+0x30]
 100fb62:	call   QWORD PTR [rip+0xffffffffffff1f40]        # 0x1001aa8
 100fb68:	nop
 100fb69:	lea    rcx,[rbx+0x28]
 100fb6d:	call   QWORD PTR [rip+0xffffffffffff1f35]        # 0x1001aa8
 100fb73:	nop
 100fb74:	lea    rcx,[rbx+0x20]
 100fb78:	call   QWORD PTR [rip+0xffffffffffff1f2a]        # 0x1001aa8
 100fb7e:	nop
 100fb7f:	lea    rcx,[rbx+0x18]
 100fb83:	call   QWORD PTR [rip+0xffffffffffff1f1f]        # 0x1001aa8
 100fb89:	mov    rcx,rbx
 100fb8c:	call   0x103f95a
 100fb91:	lea    rax,[rdi+0x10]
 100fb95:	mov    rbx,QWORD PTR [rsp+0x58]
 100fb9a:	mov    rbp,QWORD PTR [rsp+0x60]
 100fb9f:	mov    rsi,QWORD PTR [rsp+0x68]
 100fba4:	add    rsp,0x40
 100fba8:	pop    rdi
 100fba9:	ret    
 100fbaa:	int3   
 100fbab:	int3   
 100fbac:	int3   
 100fbad:	int3   
 100fbae:	int3   
 100fbaf:	int3   
 100fbb0:	mov    rax,rsp
 100fbb3:	push   rdi
 100fbb4:	sub    rsp,0x60
 100fbb8:	mov    QWORD PTR [rax-0x18],0xfffffffffffffffe
 100fbc0:	mov    QWORD PTR [rax+0x10],rbx
 100fbc4:	mov    QWORD PTR [rax+0x18],rbp
 100fbc8:	mov    QWORD PTR [rax+0x20],rsi
 100fbcc:	mov    ebx,r9d
 100fbcf:	mov    edi,r8d
 100fbd2:	mov    ebp,edx
 100fbd4:	mov    rsi,rcx
 100fbd7:	mov    ecx,0x40
 100fbdc:	call   0x103f9d2
 100fbe1:	mov    r11,rax
 100fbe4:	mov    QWORD PTR [rsp+0x70],rax
 100fbe9:	test   rax,rax
 100fbec:	je     0x100fc42
 100fbee:	mov    r10d,DWORD PTR [rsp+0xb0]
 100fbf6:	mov    DWORD PTR [rsp+0x40],r10d
 100fbfb:	mov    r8,QWORD PTR [rsp+0xa8]
 100fc03:	mov    QWORD PTR [rsp+0x38],r8
 100fc08:	mov    rcx,QWORD PTR [rsp+0xa0]
 100fc10:	mov    QWORD PTR [rsp+0x30],rcx
 100fc15:	mov    rcx,QWORD PTR [rsp+0x98]
 100fc1d:	mov    QWORD PTR [rsp+0x28],rcx
 100fc22:	mov    eax,DWORD PTR [rsp+0x90]
 100fc29:	mov    DWORD PTR [rsp+0x20],eax
 100fc2d:	mov    r9d,ebx
 100fc30:	mov    r8d,edi
 100fc33:	mov    edx,ebp
 100fc35:	mov    rcx,r11
 100fc38:	call   0x100f370
 100fc3d:	mov    rbx,rax
 100fc40:	jmp    0x100fc44
 100fc42:	xor    ebx,ebx
 100fc44:	xor    r8d,r8d
 100fc47:	mov    rdx,QWORD PTR [rsi+0x10]
 100fc4b:	mov    rcx,rsi
 100fc4e:	call   0x100fdc0
 100fc53:	mov    rdi,rax
 100fc56:	mov    rdx,rbx
 100fc59:	lea    rcx,[rax+0x10]
 100fc5d:	call   0x100f4f0
 100fc62:	mov    r11,QWORD PTR [rsi+0x10]
 100fc66:	test   r11,r11
 100fc69:	je     0x100fc70
 100fc6b:	mov    QWORD PTR [r11],rdi
 100fc6e:	jmp    0x100fc74
 100fc70:	mov    QWORD PTR [rsi+0x8],rdi
 100fc74:	mov    QWORD PTR [rsi+0x10],rdi
 100fc78:	mov    QWORD PTR [rsp+0x70],rbx
 100fc7d:	test   rbx,rbx
 100fc80:	je     0x100fcc0
 100fc82:	lea    rcx,[rbx+0x38]
 100fc86:	call   QWORD PTR [rip+0xffffffffffff1e1c]        # 0x1001aa8
 100fc8c:	nop
 100fc8d:	lea    rcx,[rbx+0x30]
 100fc91:	call   QWORD PTR [rip+0xffffffffffff1e11]        # 0x1001aa8
 100fc97:	nop
 100fc98:	lea    rcx,[rbx+0x28]
 100fc9c:	call   QWORD PTR [rip+0xffffffffffff1e06]        # 0x1001aa8
 100fca2:	nop
 100fca3:	lea    rcx,[rbx+0x20]
 100fca7:	call   QWORD PTR [rip+0xffffffffffff1dfb]        # 0x1001aa8
 100fcad:	nop
 100fcae:	lea    rcx,[rbx+0x18]
 100fcb2:	call   QWORD PTR [rip+0xffffffffffff1df0]        # 0x1001aa8
 100fcb8:	mov    rcx,rbx
 100fcbb:	call   0x103f95a
 100fcc0:	lea    rax,[rdi+0x10]
 100fcc4:	lea    r11,[rsp+0x60]
 100fcc9:	mov    rbx,QWORD PTR [r11+0x18]
 100fccd:	mov    rbp,QWORD PTR [r11+0x20]
 100fcd1:	mov    rsi,QWORD PTR [r11+0x28]
 100fcd5:	mov    rsp,r11
 100fcd8:	pop    rdi
 100fcd9:	ret    
 100fcda:	int3   
 100fcdb:	int3   
 100fcdc:	int3   
 100fcdd:	int3   
 100fcde:	int3   
 100fcdf:	int3   
 100fce0:	lea    rax,[rdx+0x10]
 100fce4:	ret    
 100fce5:	int3   
 100fce6:	int3   
 100fce7:	int3   
 100fce8:	int3   
 100fce9:	int3   
 100fcea:	int3   
 100fceb:	int3   
 100fcec:	int3   
 100fced:	int3   
 100fcee:	int3   
 100fcef:	int3   
 100fcf0:	mov    rax,QWORD PTR [rcx+0x8]
 100fcf4:	ret    
 100fcf5:	int3   
 100fcf6:	int3   
 100fcf7:	int3   
 100fcf8:	int3   
 100fcf9:	int3   
 100fcfa:	int3   
 100fcfb:	int3   
 100fcfc:	int3   
 100fcfd:	int3   
 100fcfe:	int3   
 100fcff:	int3   
 100fd00:	mov    rax,QWORD PTR [rdx]
 100fd03:	mov    rcx,QWORD PTR [rax]
 100fd06:	mov    QWORD PTR [rdx],rcx
 100fd09:	ret    
 100fd0a:	int3   
 100fd0b:	int3   
 100fd0c:	int3   
 100fd0d:	int3   
 100fd0e:	int3   
 100fd0f:	int3   
 100fd10:	rex push rdi
 100fd12:	sub    rsp,0x30
 100fd16:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100fd1f:	mov    QWORD PTR [rsp+0x48],rbx
 100fd24:	mov    QWORD PTR [rsp+0x50],rsi
 100fd29:	mov    rsi,rcx
 100fd2c:	mov    rbx,QWORD PTR [rcx+0x8]
 100fd30:	test   rbx,rbx
 100fd33:	je     0x100fd87
 100fd35:	data16 data16 nop WORD PTR [rax+rax*1+0x0]
 100fd40:	lea    rdi,[rbx+0x10]
 100fd44:	mov    QWORD PTR [rsp+0x40],rdi
 100fd49:	lea    rcx,[rdi+0x38]
 100fd4d:	call   QWORD PTR [rip+0xffffffffffff1d55]        # 0x1001aa8
 100fd53:	nop
 100fd54:	lea    rcx,[rdi+0x30]
 100fd58:	call   QWORD PTR [rip+0xffffffffffff1d4a]        # 0x1001aa8
 100fd5e:	nop
 100fd5f:	lea    rcx,[rdi+0x28]
 100fd63:	call   QWORD PTR [rip+0xffffffffffff1d3f]        # 0x1001aa8
 100fd69:	nop
 100fd6a:	lea    rcx,[rdi+0x20]
 100fd6e:	call   QWORD PTR [rip+0xffffffffffff1d34]        # 0x1001aa8
 100fd74:	nop
 100fd75:	lea    rcx,[rdi+0x18]
 100fd79:	call   QWORD PTR [rip+0xffffffffffff1d29]        # 0x1001aa8
 100fd7f:	mov    rbx,QWORD PTR [rbx]
 100fd82:	test   rbx,rbx
 100fd85:	jne    0x100fd40
 100fd87:	xor    ebx,ebx
 100fd89:	mov    QWORD PTR [rsi+0x18],rbx
 100fd8d:	mov    QWORD PTR [rsi+0x20],rbx
 100fd91:	mov    QWORD PTR [rsi+0x10],rbx
 100fd95:	mov    QWORD PTR [rsi+0x8],rbx
 100fd99:	mov    rcx,QWORD PTR [rsi+0x28]
 100fd9d:	call   0x103f9ae
 100fda2:	mov    QWORD PTR [rsi+0x28],rbx
 100fda6:	mov    rbx,QWORD PTR [rsp+0x48]
 100fdab:	mov    rsi,QWORD PTR [rsp+0x50]
 100fdb0:	add    rsp,0x30
 100fdb4:	pop    rdi
 100fdb5:	ret    
 100fdb6:	int3   
 100fdb7:	int3   
 100fdb8:	int3   
 100fdb9:	int3   
 100fdba:	int3   
 100fdbb:	int3   
 100fdbc:	int3   
 100fdbd:	int3   
 100fdbe:	int3   
 100fdbf:	int3   
 100fdc0:	rex push rbp
 100fdc2:	push   rsi
 100fdc3:	push   rdi
 100fdc4:	sub    rsp,0x30
 100fdc8:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100fdd1:	mov    QWORD PTR [rsp+0x58],rbx
 100fdd6:	mov    rsi,r8
 100fdd9:	mov    rbp,rdx
 100fddc:	mov    rbx,rcx
 100fddf:	cmp    QWORD PTR [rcx+0x20],0x0
 100fde4:	jne    0x100fe25
 100fde6:	add    rcx,0x28
 100fdea:	mov    r8d,0x50
 100fdf0:	mov    rdx,QWORD PTR [rbx+0x30]
 100fdf4:	call   0x103f9a2
 100fdf9:	mov    r9,QWORD PTR [rbx+0x30]
 100fdfd:	lea    r8,[r9+r9*4]
 100fe01:	shl    r8,0x4
 100fe05:	add    r8,0xffffffffffffffb8
 100fe09:	add    rax,r8
 100fe0c:	dec    r9
 100fe0f:	js     0x100fe25
 100fe11:	mov    rcx,QWORD PTR [rbx+0x20]
 100fe15:	mov    QWORD PTR [rax],rcx
 100fe18:	mov    QWORD PTR [rbx+0x20],rax
 100fe1c:	sub    rax,0x50
 100fe20:	dec    r9
 100fe23:	jns    0x100fe11
 100fe25:	mov    rdi,QWORD PTR [rbx+0x20]
 100fe29:	xor    eax,eax
 100fe2b:	test   rdi,rdi
 100fe2e:	setne  al
 100fe31:	test   eax,eax
 100fe33:	jne    0x100fe3b
 100fe35:	call   0x103f972
 100fe3a:	int3   
 100fe3b:	mov    QWORD PTR [rsp+0x50],rdi
 100fe40:	mov    rax,QWORD PTR [rdi]
 100fe43:	mov    QWORD PTR [rbx+0x20],rax
 100fe47:	mov    QWORD PTR [rdi+0x8],rbp
 100fe4b:	mov    QWORD PTR [rdi],rsi
 100fe4e:	inc    QWORD PTR [rbx+0x18]
 100fe52:	lea    rcx,[rdi+0x10]
 100fe56:	mov    QWORD PTR [rsp+0x68],rcx
 100fe5b:	test   rcx,rcx
 100fe5e:	je     0x100fe66
 100fe60:	call   0x100ec30
 100fe65:	nop
 100fe66:	mov    rax,rdi
 100fe69:	mov    rbx,QWORD PTR [rsp+0x58]
 100fe6e:	add    rsp,0x30
 100fe72:	pop    rdi
 100fe73:	pop    rsi
 100fe74:	pop    rbp
 100fe75:	ret    
 100fe76:	int3   
 100fe77:	int3   
 100fe78:	int3   
 100fe79:	int3   
 100fe7a:	int3   
 100fe7b:	int3   
 100fe7c:	int3   
 100fe7d:	int3   
 100fe7e:	int3   
 100fe7f:	int3   
 100fe80:	lea    rax,[rip+0xffffffffffff29f1]        # 0x1002878
 100fe87:	mov    QWORD PTR [rcx],rax
 100fe8a:	jmp    0x100fd10
 100fe8f:	int3   
 100fe90:	int3   
 100fe91:	int3   
 100fe92:	int3   
 100fe93:	int3   
 100fe94:	int3   
 100fe95:	int3   
 100fe96:	int3   
 100fe97:	int3   
 100fe98:	int3   
 100fe99:	int3   
 100fe9a:	int3   
 100fe9b:	int3   
 100fe9c:	int3   
 100fe9d:	int3   
 100fe9e:	int3   
 100fe9f:	int3   
 100fea0:	mov    rax,rsp
 100fea3:	push   rdi
 100fea4:	push   r12
 100fea6:	push   r13
 100fea8:	push   r14
 100feaa:	push   r15
 100feac:	sub    rsp,0x80
 100feb3:	mov    QWORD PTR [rax-0x78],0xfffffffffffffffe
 100febb:	mov    QWORD PTR [rax+0x8],rbx
 100febf:	mov    QWORD PTR [rax+0x10],rbp
 100fec3:	mov    QWORD PTR [rax+0x18],rsi
 100fec7:	mov    r14,rdx
 100feca:	mov    r15,rcx
 100fecd:	mov    eax,DWORD PTR [rdx+0x20]
 100fed0:	not    eax
 100fed2:	test   al,0x1
 100fed4:	je     0x100ff9c
 100feda:	mov    rdx,QWORD PTR [rcx+0x18]
 100fede:	mov    rcx,r14
 100fee1:	call   0x103f996
 100fee6:	mov    r15,QWORD PTR [r15+0x8]
 100feea:	test   r15,r15
 100feed:	je     0x1010141
 100fef3:	lea    rbx,[r15+0x10]
 100fef7:	test   rbx,rbx
 100fefa:	je     0x100ff96
 100ff00:	mov    eax,DWORD PTR [r14+0x20]
 100ff04:	not    eax
 100ff06:	mov    esi,0x1
 100ff0b:	test   sil,al
 100ff0e:	je     0x100ff50
 100ff10:	mov    edi,0x1ffffff
 100ff15:	cmp    rsi,rdi
 100ff18:	cmovb  edi,esi
 100ff1b:	mov    r8d,edi
 100ff1e:	shl    r8d,0x6
 100ff22:	mov    rdx,rbx
 100ff25:	mov    rcx,r14
 100ff28:	call   0x103f9ea
 100ff2d:	mov    r11d,edi
 100ff30:	sub    rsi,r11
 100ff33:	shl    r11,0x6
 100ff37:	add    rbx,r11
 100ff3a:	test   rsi,rsi
 100ff3d:	jne    0x100ff10
 100ff3f:	jmp    0x100ff83
 100ff41:	data16 data16 data16 data16 data16 data16 nop WORD PTR [rax+rax*1+0x0]
 100ff50:	mov    ebp,0x1ffffff
 100ff55:	cmp    rsi,rbp
 100ff58:	cmovb  ebp,esi
 100ff5b:	mov    edi,ebp
 100ff5d:	shl    edi,0x6
 100ff60:	mov    r8d,edi
 100ff63:	mov    rdx,rbx
 100ff66:	mov    rcx,r14
 100ff69:	call   0x103f9de
 100ff6e:	cmp    eax,edi
 100ff70:	jne    0x100ff8b
 100ff72:	mov    eax,ebp
 100ff74:	sub    rsi,rax
 100ff77:	shl    rax,0x6
 100ff7b:	add    rbx,rax
 100ff7e:	test   rsi,rsi
 100ff81:	jne    0x100ff50
 100ff83:	mov    r15,QWORD PTR [r15]
 100ff86:	jmp    0x100feea
 100ff8b:	xor    edx,edx
 100ff8d:	lea    ecx,[rdx+0x3]
 100ff90:	call   0x103fa32
 100ff95:	int3   
 100ff96:	call   0x103f972
 100ff9b:	int3   
 100ff9c:	mov    rcx,rdx
 100ff9f:	call   0x103f98a
 100ffa4:	mov    r12,rax
 100ffa7:	test   rax,rax
 100ffaa:	je     0x1010141
 100ffb0:	lea    r13,[rip+0xfffffffffffff4d9]        # 0x100f490
 100ffb7:	nop    WORD PTR [rax+rax*1+0x0]
 100ffc0:	dec    r12
 100ffc3:	mov    QWORD PTR [rsp+0x20],r13
 100ffc8:	lea    r9,[rip+0xffffffffffffec61]        # 0x100ec30
 100ffcf:	mov    edx,0x40
 100ffd4:	lea    r8d,[rdx-0x3f]
 100ffd8:	lea    rcx,[rsp+0x40]
 100ffdd:	call   0x103ffd8
 100ffe2:	nop
 100ffe3:	mov    eax,DWORD PTR [r14+0x20]
 100ffe7:	not    eax
 100ffe9:	mov    edi,0x1
 100ffee:	test   dil,al
 100fff1:	je     0x1010031
 100fff3:	lea    rsi,[rsp+0x40]
 100fff8:	nop    DWORD PTR [rax+rax*1+0x0]
 1010000:	mov    ebx,0x1ffffff
 1010005:	cmp    rdi,rbx
 1010008:	cmovb  ebx,edi
 101000b:	mov    r8d,ebx
 101000e:	shl    r8d,0x6
 1010012:	mov    rdx,rsi
 1010015:	mov    rcx,r14
 1010018:	call   0x103f9ea
 101001d:	mov    r11d,ebx
 1010020:	sub    rdi,r11
 1010023:	shl    r11,0x6
 1010027:	add    rsi,r11
 101002a:	test   rdi,rdi
 101002d:	jne    0x1010000
 101002f:	jmp    0x1010077
 1010031:	lea    rbp,[rsp+0x40]
 1010036:	data16 nop WORD PTR [rax+rax*1+0x0]
 1010040:	mov    esi,0x1ffffff
 1010045:	cmp    rdi,rsi
 1010048:	cmovb  esi,edi
 101004b:	mov    ebx,esi
 101004d:	shl    ebx,0x6
 1010050:	mov    r8d,ebx
 1010053:	mov    rdx,rbp
 1010056:	mov    rcx,r14
 1010059:	call   0x103f9de
 101005e:	cmp    eax,ebx
 1010060:	jne    0x1010136
 1010066:	mov    eax,esi
 1010068:	sub    rdi,rax
 101006b:	shl    rax,0x6
 101006f:	add    rbp,rax
 1010072:	test   rdi,rdi
 1010075:	jne    0x1010040
 1010077:	xor    r8d,r8d
 101007a:	mov    rdx,QWORD PTR [r15+0x10]
 101007e:	mov    rcx,r15
 1010081:	call   0x100fdc0
 1010086:	mov    rbx,rax
 1010089:	mov    ecx,DWORD PTR [rsp+0x40]
 101008d:	mov    DWORD PTR [rax+0x10],ecx
 1010090:	mov    ecx,DWORD PTR [rsp+0x44]
 1010094:	mov    DWORD PTR [rax+0x14],ecx
 1010097:	mov    ecx,DWORD PTR [rsp+0x48]
 101009b:	mov    DWORD PTR [rax+0x18],ecx
 101009e:	mov    ecx,DWORD PTR [rsp+0x4c]
 10100a2:	mov    DWORD PTR [rax+0x1c],ecx
 10100a5:	movzx  ecx,BYTE PTR [rsp+0x50]
 10100aa:	mov    BYTE PTR [rax+0x20],cl
 10100ad:	mov    ecx,DWORD PTR [rsp+0x54]
 10100b1:	mov    DWORD PTR [rax+0x24],ecx
 10100b4:	lea    rcx,[rax+0x28]
 10100b8:	lea    rdx,[rsp+0x58]
 10100bd:	call   QWORD PTR [rip+0xffffffffffff19dd]        # 0x1001aa0
 10100c3:	lea    rcx,[rbx+0x30]
 10100c7:	lea    rdx,[rsp+0x60]
 10100cc:	call   QWORD PTR [rip+0xffffffffffff19ce]        # 0x1001aa0
 10100d2:	lea    rcx,[rbx+0x38]
 10100d6:	lea    rdx,[rsp+0x68]
 10100db:	call   QWORD PTR [rip+0xffffffffffff19bf]        # 0x1001aa0
 10100e1:	lea    rcx,[rbx+0x40]
 10100e5:	lea    rdx,[rsp+0x70]
 10100ea:	call   QWORD PTR [rip+0xffffffffffff19b0]        # 0x1001aa0
 10100f0:	lea    rcx,[rbx+0x48]
 10100f4:	lea    rdx,[rsp+0x78]
 10100f9:	call   QWORD PTR [rip+0xffffffffffff19a1]        # 0x1001aa0
 10100ff:	mov    r11,QWORD PTR [r15+0x10]
 1010103:	test   r11,r11
 1010106:	je     0x101010d
 1010108:	mov    QWORD PTR [r11],rbx
 101010b:	jmp    0x1010111
 101010d:	mov    QWORD PTR [r15+0x8],rbx
 1010111:	mov    QWORD PTR [r15+0x10],rbx
 1010115:	mov    r9,r13
 1010118:	mov    edx,0x40
 101011d:	lea    r8d,[rdx-0x3f]
 1010121:	lea    rcx,[rsp+0x40]
 1010126:	call   0x1040094
 101012b:	test   r12,r12
 101012e:	jne    0x100ffc0
 1010134:	jmp    0x1010141
 1010136:	xor    edx,edx
 1010138:	lea    ecx,[rdx+0x3]
 101013b:	call   0x103fa32
 1010140:	nop
 1010141:	lea    r11,[rsp+0x80]
 1010149:	mov    rbx,QWORD PTR [r11+0x30]
 101014d:	mov    rbp,QWORD PTR [r11+0x38]
 1010151:	mov    rsi,QWORD PTR [r11+0x40]
 1010155:	mov    rsp,r11
 1010158:	pop    r15
 101015a:	pop    r14
 101015c:	pop    r13
 101015e:	pop    r12
 1010160:	pop    rdi
 1010161:	ret    
 1010162:	int3   
 1010163:	int3   
 1010164:	int3   
 1010165:	int3   
 1010166:	int3   
 1010167:	int3   
 1010168:	int3   
 1010169:	int3   
 101016a:	int3   
 101016b:	int3   
 101016c:	int3   
 101016d:	int3   
 101016e:	int3   
 101016f:	int3   
 1010170:	mov    QWORD PTR [rsp+0x8],rbx
 1010175:	push   rdi
 1010176:	sub    rsp,0x20
 101017a:	lea    rax,[rip+0xffffffffffff26f7]        # 0x1002878
 1010181:	mov    ebx,edx
 1010183:	mov    rdi,rcx
 1010186:	mov    QWORD PTR [rcx],rax
 1010189:	call   0x100fd10
 101018e:	test   bl,0x1
 1010191:	je     0x101019b
 1010193:	mov    rcx,rdi
 1010196:	call   0x103f95a
 101019b:	mov    rax,rdi
 101019e:	mov    rbx,QWORD PTR [rsp+0x30]
 10101a3:	add    rsp,0x20
 10101a7:	pop    rdi
 10101a8:	ret    
 10101a9:	int3   
 10101aa:	int3   
 10101ab:	int3   
 10101ac:	int3   
 10101ad:	int3   
 10101ae:	int3   
 10101af:	int3   
 10101b0:	mov    QWORD PTR [rsp+0x8],rcx
 10101b5:	push   r14
 10101b7:	sub    rsp,0x30
 10101bb:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 10101c4:	mov    QWORD PTR [rsp+0x48],rbx
 10101c9:	mov    QWORD PTR [rsp+0x50],rsi
 10101ce:	mov    QWORD PTR [rsp+0x58],rdi
 10101d3:	mov    rdi,r8
 10101d6:	mov    rsi,rdx
 10101d9:	mov    r14,rcx
 10101dc:	lea    rax,[rip+0xffffffffffff2225]        # 0x1002408
 10101e3:	mov    QWORD PTR [rcx],rax
 10101e6:	lea    rax,[rip+0xffffffffffff27fb]        # 0x10029e8
 10101ed:	mov    QWORD PTR [rcx],rax
 10101f0:	add    rcx,0x8
 10101f4:	call   QWORD PTR [rip+0xffffffffffff18c6]        # 0x1001ac0
 10101fa:	nop
 10101fb:	mov    rdx,rdi
 10101fe:	lea    rcx,[r14+0x8]
 1010202:	call   QWORD PTR [rip+0xffffffffffff1890]        # 0x1001a98
 1010208:	mov    QWORD PTR [r14+0x10],rsi
 101020c:	mov    rax,r14
 101020f:	mov    rbx,QWORD PTR [rsp+0x48]
 1010214:	mov    rsi,QWORD PTR [rsp+0x50]
 1010219:	mov    rdi,QWORD PTR [rsp+0x58]
 101021e:	add    rsp,0x30
 1010222:	pop    r14
 1010224:	ret    
 1010225:	int3   
 1010226:	int3   
 1010227:	int3   
 1010228:	int3   
 1010229:	int3   
 101022a:	int3   
 101022b:	int3   
 101022c:	int3   
 101022d:	int3   
 101022e:	int3   
 101022f:	int3   
 1010230:	rex push rbp
 1010232:	push   rsi
 1010233:	push   rdi
 1010234:	push   r12
 1010236:	push   r13
 1010238:	push   r14
 101023a:	push   r15
 101023c:	lea    rbp,[rsp-0x31e0]
 1010244:	mov    eax,0x32e0
 1010249:	call   0x1040290
 101024e:	sub    rsp,rax
 1010251:	mov    QWORD PTR [rbp-0x48],0xfffffffffffffffe
 1010259:	mov    QWORD PTR [rsp+0x3338],rbx
 1010261:	mov    rax,QWORD PTR [rip+0x53608]        # 0x1063870
 1010268:	xor    rax,rsp
 101026b:	mov    QWORD PTR [rbp+0x31d0],rax
 1010272:	movzx  r13d,r8b
 1010276:	mov    r12,rdx
 1010279:	mov    r15,rcx
 101027c:	lea    rax,[rip+0xffffffffffff1b9d]        # 0x1001e20
 1010283:	mov    QWORD PTR [rsp+0x78],rax
 1010288:	xor    edi,edi
 101028a:	mov    QWORD PTR [rbp-0x70],rdi
 101028e:	mov    QWORD PTR [rbp-0x68],rdi
 1010292:	mov    QWORD PTR [rbp-0x78],rdi
 1010296:	mov    QWORD PTR [rbp-0x80],rdi
 101029a:	mov    QWORD PTR [rbp-0x60],rdi
 101029e:	mov    QWORD PTR [rbp-0x58],0xa
 10102a6:	add    rcx,0x8
 10102aa:	call   QWORD PTR [rip+0xffffffffffff1838]        # 0x1001ae8
 10102b0:	mov    QWORD PTR [rsp+0x28],rax
 10102b5:	mov    DWORD PTR [rsp+0x20],0x1900
 10102bd:	lea    r9,[rbp-0x40]
 10102c1:	lea    r8,[rip+0xffffffffffff1b48]        # 0x1001e10
 10102c8:	xor    edx,edx
 10102ca:	xor    ecx,ecx
 10102cc:	call   QWORD PTR [rip+0xffffffffffff0f56]        # 0x1001228
 10102d2:	mov    rcx,r12
 10102d5:	call   0x1012a20
 10102da:	lea    r14,[rbp-0x40]
 10102de:	cmp    WORD PTR [rbp-0x40],di
 10102e2:	je     0x10105be
 10102e8:	lea    rsi,[rip+0xffffffffffff2751]        # 0x1002a40
 10102ef:	nop
 10102f0:	mov    rbx,QWORD PTR [rbp-0x80]
 10102f4:	test   rbx,rbx
 10102f7:	je     0x1010312
 10102f9:	nop    DWORD PTR [rax+0x0]
 1010300:	lea    rcx,[rbx+0x10]
 1010304:	call   QWORD PTR [rip+0xffffffffffff179e]        # 0x1001aa8
 101030a:	mov    rbx,QWORD PTR [rbx]
 101030d:	test   rbx,rbx
 1010310:	jne    0x1010300
 1010312:	mov    QWORD PTR [rbp-0x70],rdi
 1010316:	mov    QWORD PTR [rbp-0x68],rdi
 101031a:	mov    QWORD PTR [rbp-0x78],rdi
 101031e:	mov    QWORD PTR [rbp-0x80],rdi
 1010322:	mov    rcx,QWORD PTR [rbp-0x60]
 1010326:	call   0x103f9ae
 101032b:	mov    QWORD PTR [rbp-0x60],rdi
 101032f:	mov    rdx,r14
 1010332:	lea    rcx,[rip+0xffffffffffff272f]        # 0x1002a68
 1010339:	call   QWORD PTR [rip+0xffffffffffff1391]        # 0x10016d0
 101033f:	test   eax,eax
 1010341:	jne    0x101036b
 1010343:	movzx  edx,r13b
 1010347:	lea    rcx,[rsp+0x78]
 101034c:	call   0x1031f30
 1010351:	mov    r11,QWORD PTR [r15]
 1010354:	mov    r9,r14
 1010357:	lea    r8,[rsp+0x78]
 101035c:	mov    rdx,r12
 101035f:	mov    rcx,r15
 1010362:	call   QWORD PTR [r11+0x48]
 1010366:	jmp    0x101059c
 101036b:	mov    rdx,r14
 101036e:	lea    rcx,[rsp+0x30]
 1010373:	call   0x1031d30
 1010378:	nop
 1010379:	mov    QWORD PTR [rsp+0x40],rsi
 101037e:	mov    QWORD PTR [rsp+0x48],rdi
 1010383:	mov    DWORD PTR [rsp+0x50],0x11
 101038b:	mov    QWORD PTR [rsp+0x58],rdi
 1010390:	mov    QWORD PTR [rsp+0x60],rdi
 1010395:	mov    QWORD PTR [rsp+0x68],rdi
 101039a:	mov    QWORD PTR [rsp+0x70],0xa
 10103a3:	mov    rcx,QWORD PTR [rsp+0x48]
 10103a8:	test   rcx,rcx
 10103ab:	je     0x1010418
 10103ad:	mov    esi,edi
 10103af:	mov    eax,DWORD PTR [rsp+0x50]
 10103b3:	test   eax,eax
 10103b5:	je     0x1010407
 10103b7:	nop    WORD PTR [rax+rax*1+0x0]
 10103c0:	mov    rbx,QWORD PTR [rdi+rcx*1]
 10103c4:	mov    QWORD PTR [rsp+0x38],rbx
 10103c9:	test   rbx,rbx
 10103cc:	je     0x10103fb
 10103ce:	xchg   ax,ax
 10103d0:	lea    rcx,[rbx+0x8]
 10103d4:	call   QWORD PTR [rip+0xffffffffffff16ce]        # 0x1001aa8
 10103da:	nop
 10103db:	mov    rcx,rbx
 10103de:	call   QWORD PTR [rip+0xffffffffffff16c4]        # 0x1001aa8
 10103e4:	mov    rbx,QWORD PTR [rbx+0x10]
 10103e8:	mov    QWORD PTR [rsp+0x38],rbx
 10103ed:	test   rbx,rbx
 10103f0:	jne    0x10103d0
 10103f2:	mov    eax,DWORD PTR [rsp+0x50]
 10103f6:	mov    rcx,QWORD PTR [rsp+0x48]
 10103fb:	inc    esi
 10103fd:	add    rdi,0x8
 1010401:	cmp    esi,eax
 1010403:	jb     0x10103c0
 1010405:	xor    edi,edi
 1010407:	call   0x103f9c6
 101040c:	mov    QWORD PTR [rsp+0x48],rdi
 1010411:	lea    rsi,[rip+0xffffffffffff2628]        # 0x1002a40
 1010418:	mov    QWORD PTR [rsp+0x58],rdi
 101041d:	mov    QWORD PTR [rsp+0x60],rdi
 1010422:	mov    rcx,QWORD PTR [rsp+0x68]
 1010427:	call   0x103f9ae
 101042c:	mov    QWORD PTR [rsp+0x68],rdi
 1010431:	test   r13b,r13b
 1010434:	jne    0x10104bc
 101043a:	mov    rdx,r14
 101043d:	lea    rcx,[rip+0xffffffffffff2628]        # 0x1002a6c
 1010444:	call   QWORD PTR [rip+0xffffffffffff1286]        # 0x10016d0
 101044a:	test   eax,eax
 101044c:	jne    0x10104bc
 101044e:	lea    rcx,[rsp+0x30]
 1010453:	call   QWORD PTR [rip+0xffffffffffff168f]        # 0x1001ae8
 1010459:	mov    rcx,rax
 101045c:	call   0x1031de0
 1010461:	test   al,al
 1010463:	je     0x10104bc
 1010465:	lea    rcx,[rsp+0x30]
 101046a:	call   QWORD PTR [rip+0xffffffffffff1678]        # 0x1001ae8
 1010470:	mov    rcx,rax
 1010473:	lea    r8,[rsp+0x40]
 1010478:	lea    rdx,[rsp+0x78]
 101047d:	call   0x1032290
 1010482:	test   al,al
 1010484:	je     0x101049c
 1010486:	mov    rax,QWORD PTR [r15]
 1010489:	mov    r9,r14
 101048c:	lea    r8,[rsp+0x78]
 1010491:	mov    rdx,r12
 1010494:	mov    rcx,r15
 1010497:	call   QWORD PTR [rax+0x48]
 101049a:	jmp    0x10104fa
 101049c:	mov    rcx,QWORD PTR [r15+0x10]
 10104a0:	mov    rax,QWORD PTR [rcx]
 10104a3:	mov    BYTE PTR [rsp+0x28],0x1
 10104a8:	mov    BYTE PTR [rsp+0x20],0x1
 10104ad:	xor    r9d,r9d
 10104b0:	xor    r8d,r8d
 10104b3:	mov    edx,0xc000c487
 10104b8:	call   QWORD PTR [rax]
 10104ba:	jmp    0x10104fa
 10104bc:	mov    rdx,r14
 10104bf:	lea    rcx,[rbp-0x50]
 10104c3:	call   QWORD PTR [rip+0xffffffffffff15e7]        # 0x1001ab0
 10104c9:	mov    rbx,rax
 10104cc:	lea    rcx,[rsp+0x30]
 10104d1:	call   QWORD PTR [rip+0xffffffffffff1611]        # 0x1001ae8
 10104d7:	mov    rdx,rax
 10104da:	mov    rcx,r12
 10104dd:	call   0x100ea00
 10104e2:	mov    rcx,rax
 10104e5:	mov    rdx,rbx
 10104e8:	call   QWORD PTR [rip+0xffffffffffff15b2]        # 0x1001aa0
 10104ee:	nop
 10104ef:	lea    rcx,[rbp-0x50]
 10104f3:	call   QWORD PTR [rip+0xffffffffffff15af]        # 0x1001aa8
 10104f9:	nop
 10104fa:	mov    QWORD PTR [rsp+0x40],rsi
 10104ff:	mov    rcx,QWORD PTR [rsp+0x48]
 1010504:	test   rcx,rcx
 1010507:	je     0x1010578
 1010509:	mov    esi,edi
 101050b:	mov    eax,DWORD PTR [rsp+0x50]
 101050f:	test   eax,eax
 1010511:	je     0x1010567
 1010513:	data16 data16 data16 data16 nop WORD PTR [rax+rax*1+0x0]
 1010520:	mov    rbx,QWORD PTR [rdi+rcx*1]
 1010524:	mov    QWORD PTR [rsp+0x38],rbx
 1010529:	test   rbx,rbx
 101052c:	je     0x101055b
 101052e:	xchg   ax,ax
 1010530:	lea    rcx,[rbx+0x8]
 1010534:	call   QWORD PTR [rip+0xffffffffffff156e]        # 0x1001aa8
 101053a:	nop
 101053b:	mov    rcx,rbx
 101053e:	call   QWORD PTR [rip+0xffffffffffff1564]        # 0x1001aa8
 1010544:	mov    rbx,QWORD PTR [rbx+0x10]
 1010548:	mov    QWORD PTR [rsp+0x38],rbx
 101054d:	test   rbx,rbx
 1010550:	jne    0x1010530
 1010552:	mov    eax,DWORD PTR [rsp+0x50]
 1010556:	mov    rcx,QWORD PTR [rsp+0x48]
 101055b:	inc    esi
 101055d:	add    rdi,0x8
 1010561:	cmp    esi,eax
 1010563:	jb     0x1010520
 1010565:	xor    edi,edi
 1010567:	call   0x103f9c6
 101056c:	mov    QWORD PTR [rsp+0x48],rdi
 1010571:	lea    rsi,[rip+0xffffffffffff24c8]        # 0x1002a40
 1010578:	mov    QWORD PTR [rsp+0x58],rdi
 101057d:	mov    QWORD PTR [rsp+0x60],rdi
 1010582:	mov    rcx,QWORD PTR [rsp+0x68]
 1010587:	call   0x103f9ae
 101058c:	mov    QWORD PTR [rsp+0x68],rdi
 1010591:	lea    rcx,[rsp+0x30]
 1010596:	call   QWORD PTR [rip+0xffffffffffff150c]        # 0x1001aa8
 101059c:	or     rax,0xffffffffffffffff
 10105a0:	inc    rax
 10105a3:	cmp    WORD PTR [r14+rax*2],0x0
 10105a9:	jne    0x10105a0
 10105ab:	lea    r14,[r14+rax*2]
 10105af:	add    r14,0x2
 10105b3:	cmp    WORD PTR [r14],0x0
 10105b8:	jne    0x10102f0
 10105be:	cmp    QWORD PTR [r12+0x18],0x0
 10105c4:	setne  dil
 10105c8:	lea    rax,[rip+0xffffffffffff1851]        # 0x1001e20
 10105cf:	mov    QWORD PTR [rsp+0x78],rax
 10105d4:	mov    rbx,QWORD PTR [rbp-0x80]
 10105d8:	test   rbx,rbx
 10105db:	je     0x10105f2
 10105dd:	nop    DWORD PTR [rax]
 10105e0:	lea    rcx,[rbx+0x10]
 10105e4:	call   QWORD PTR [rip+0xffffffffffff14be]        # 0x1001aa8
 10105ea:	mov    rbx,QWORD PTR [rbx]
 10105ed:	test   rbx,rbx
 10105f0:	jne    0x10105e0
 10105f2:	xor    ebx,ebx
 10105f4:	mov    QWORD PTR [rbp-0x70],rbx
 10105f8:	mov    QWORD PTR [rbp-0x68],rbx
 10105fc:	mov    QWORD PTR [rbp-0x78],rbx
 1010600:	mov    QWORD PTR [rbp-0x80],rbx
 1010604:	mov    rcx,QWORD PTR [rbp-0x60]
 1010608:	call   0x103f9ae
 101060d:	mov    QWORD PTR [rbp-0x60],rbx
 1010611:	movzx  eax,dil
 1010615:	mov    rcx,QWORD PTR [rbp+0x31d0]
 101061c:	xor    rcx,rsp
 101061f:	call   0x103ff40
 1010624:	mov    rbx,QWORD PTR [rsp+0x3338]
 101062c:	add    rsp,0x32e0
 1010633:	pop    r15
 1010635:	pop    r14
 1010637:	pop    r13
 1010639:	pop    r12
 101063b:	pop    rdi
 101063c:	pop    rsi
 101063d:	pop    rbp
 101063e:	ret    
 101063f:	int3   
 1010640:	int3   
 1010641:	int3   
 1010642:	int3   
 1010643:	int3   
 1010644:	int3   
 1010645:	int3   
 1010646:	int3   
 1010647:	int3   
 1010648:	int3   
 1010649:	int3   
 101064a:	int3   
 101064b:	int3   
 101064c:	int3   
 101064d:	int3   
 101064e:	int3   
 101064f:	int3   
 1010650:	rex push rbx
 1010652:	push   rbp
 1010653:	push   rsi
 1010654:	push   rdi
 1010655:	sub    rsp,0x168
 101065c:	mov    QWORD PTR [rsp+0x38],0xfffffffffffffffe
 1010665:	mov    rax,QWORD PTR [rip+0x53204]        # 0x1063870
 101066c:	xor    rax,rsp
 101066f:	mov    QWORD PTR [rsp+0x150],rax
 1010677:	mov    rsi,r9
 101067a:	mov    rbp,r8
 101067d:	mov    rdi,rdx
 1010680:	add    rcx,0x8
 1010684:	call   QWORD PTR [rip+0xffffffffffff145e]        # 0x1001ae8
 101068a:	mov    rbx,rax
 101068d:	mov    rdx,rdi
 1010690:	mov    rcx,rsi
 1010693:	call   0x100ea00
 1010698:	mov    rcx,rax
 101069b:	call   QWORD PTR [rip+0xffffffffffff1447]        # 0x1001ae8
 10106a1:	mov    rcx,rax
 10106a4:	mov    QWORD PTR [rsp+0x28],rbx
 10106a9:	mov    DWORD PTR [rsp+0x20],0x80
 10106b1:	lea    r9,[rsp+0x40]
 10106b6:	lea    r8,[rip+0xffffffffffff23b3]        # 0x1002a70
 10106bd:	lea    rdx,[rip+0xffffffffffff23c4]        # 0x1002a88
 10106c4:	call   QWORD PTR [rip+0xffffffffffff0b5e]        # 0x1001228
 10106ca:	mov    rbx,QWORD PTR [rbp+0x8]
 10106ce:	test   rbx,rbx
 10106d1:	je     0x10106e5
 10106d3:	lea    rcx,[rbx+0x10]
 10106d7:	call   QWORD PTR [rip+0xffffffffffff13cb]        # 0x1001aa8
 10106dd:	mov    rbx,QWORD PTR [rbx]
 10106e0:	test   rbx,rbx
 10106e3:	jne    0x10106d3
 10106e5:	xor    edi,edi
 10106e7:	mov    QWORD PTR [rbp+0x18],rdi
 10106eb:	mov    QWORD PTR [rbp+0x20],rdi
 10106ef:	mov    QWORD PTR [rbp+0x10],rdi
 10106f3:	mov    QWORD PTR [rbp+0x8],rdi
 10106f7:	mov    rcx,QWORD PTR [rbp+0x28]
 10106fb:	call   0x103f9ae
 1010700:	mov    QWORD PTR [rbp+0x28],rdi
 1010704:	lea    rdx,[rsp+0x40]
 1010709:	lea    rcx,[rsp+0x30]
 101070e:	call   QWORD PTR [rip+0xffffffffffff139c]        # 0x1001ab0
 1010714:	mov    rbx,rax
 1010717:	xor    r8d,r8d
 101071a:	mov    rdx,QWORD PTR [rbp+0x10]
 101071e:	mov    rcx,rbp
 1010721:	call   0x100c430
 1010726:	mov    rsi,rax
 1010729:	lea    rcx,[rax+0x10]
 101072d:	mov    rdx,rbx
 1010730:	call   QWORD PTR [rip+0xffffffffffff136a]        # 0x1001aa0
 1010736:	mov    r11,QWORD PTR [rbp+0x10]
 101073a:	test   r11,r11
 101073d:	je     0x1010744
 101073f:	mov    QWORD PTR [r11],rsi
 1010742:	jmp    0x1010748
 1010744:	mov    QWORD PTR [rbp+0x8],rsi
 1010748:	mov    QWORD PTR [rbp+0x10],rsi
 101074c:	lea    rcx,[rsp+0x30]
 1010751:	call   QWORD PTR [rip+0xffffffffffff1351]        # 0x1001aa8
 1010757:	cmp    di,WORD PTR [rsp+0x40]
 101075c:	sete   al
 101075f:	mov    rcx,QWORD PTR [rsp+0x150]
 1010767:	xor    rcx,rsp
 101076a:	call   0x103ff40
 101076f:	add    rsp,0x168
 1010776:	pop    rdi
 1010777:	pop    rsi
 1010778:	pop    rbp
 1010779:	pop    rbx
 101077a:	ret    
 101077b:	int3   
 101077c:	int3   
 101077d:	int3   
 101077e:	int3   
 101077f:	int3   
 1010780:	int3   
 1010781:	int3   
 1010782:	int3   
 1010783:	int3   
 1010784:	int3   
 1010785:	int3   
 1010786:	int3   
 1010787:	int3   
 1010788:	int3   
 1010789:	int3   
 101078a:	int3   
 101078b:	int3   
 101078c:	int3   
 101078d:	int3   
 101078e:	int3   
 101078f:	int3   
 1010790:	rex push rbp
 1010792:	push   rsi
 1010793:	push   rdi
 1010794:	push   r12
 1010796:	push   r13
 1010798:	push   r14
 101079a:	push   r15
 101079c:	lea    rbp,[rsp-0x870]
 10107a4:	sub    rsp,0x970
 10107ab:	mov    QWORD PTR [rbp+0x58],0xfffffffffffffffe
 10107b3:	mov    QWORD PTR [rsp+0x9c8],rbx
 10107bb:	mov    rax,QWORD PTR [rip+0x530ae]        # 0x1063870
 10107c2:	xor    rax,rsp
 10107c5:	mov    QWORD PTR [rbp+0x860],rax
 10107cc:	mov    rdi,r8
 10107cf:	mov    rbx,rdx
 10107d2:	mov    r15,rcx
 10107d5:	mov    QWORD PTR [rbp-0x70],rcx
 10107d9:	xor    r13d,r13d
 10107dc:	mov    DWORD PTR [rbp-0x78],r13d
 10107e0:	lea    rcx,[rbp-0x80]
 10107e4:	call   QWORD PTR [rip+0xffffffffffff12d6]        # 0x1001ac0
 10107ea:	nop
 10107eb:	mov    rax,QWORD PTR [rbx]
 10107ee:	lea    rdx,[rsp+0x60]
 10107f3:	mov    rcx,rbx
 10107f6:	call   QWORD PTR [rax+0x70]
 10107f9:	nop
 10107fa:	mov    rcx,rax
 10107fd:	call   QWORD PTR [rip+0xffffffffffff12e5]        # 0x1001ae8
 1010803:	mov    rdx,rax
 1010806:	mov    rcx,rdi
 1010809:	call   0x100ea00
 101080e:	mov    rdx,rax
 1010811:	lea    rcx,[rsp+0x48]
 1010816:	call   QWORD PTR [rip+0xffffffffffff119c]        # 0x10019b8
 101081c:	nop
 101081d:	lea    rcx,[rsp+0x60]
 1010822:	call   QWORD PTR [rip+0xffffffffffff1280]        # 0x1001aa8
 1010828:	lea    r12,[r15+0x8]
 101082c:	mov    rcx,r12
 101082f:	call   QWORD PTR [rip+0xffffffffffff12b3]        # 0x1001ae8
 1010835:	mov    rdi,rax
 1010838:	lea    rcx,[rsp+0x48]
 101083d:	call   QWORD PTR [rip+0xffffffffffff12a5]        # 0x1001ae8
 1010843:	mov    rcx,rax
 1010846:	mov    QWORD PTR [rsp+0x28],rdi
 101084b:	mov    DWORD PTR [rsp+0x20],0x400
 1010853:	lea    r9,[rbp+0x60]
 1010857:	lea    r8,[rip+0xffffffffffff15b2]        # 0x1001e10
 101085e:	lea    rdx,[rip+0xffffffffffff2263]        # 0x1002ac8
 1010865:	call   QWORD PTR [rip+0xffffffffffff09bd]        # 0x1001228
 101086b:	cmp    WORD PTR [rbp+0x60],r13w
 1010870:	jne    0x101088f
 1010872:	lea    rcx,[rsp+0x48]
 1010877:	call   QWORD PTR [rip+0xffffffffffff122b]        # 0x1001aa8
 101087d:	nop
 101087e:	lea    rcx,[rbp-0x80]
 1010882:	call   QWORD PTR [rip+0xffffffffffff1220]        # 0x1001aa8
 1010888:	xor    al,al
 101088a:	jmp    0x1012592
 101088f:	mov    rcx,r12
 1010892:	call   QWORD PTR [rip+0xffffffffffff1250]        # 0x1001ae8
 1010898:	mov    rdi,rax
 101089b:	lea    rcx,[rsp+0x48]
 10108a0:	call   QWORD PTR [rip+0xffffffffffff1242]        # 0x1001ae8
 10108a6:	mov    rcx,rax
 10108a9:	mov    QWORD PTR [rsp+0x28],rdi
 10108ae:	mov    DWORD PTR [rsp+0x20],0x400
 10108b6:	lea    r9,[rbp+0x60]
 10108ba:	lea    r8,[rip+0xffffffffffff221b]        # 0x1002adc
 10108c1:	lea    rdx,[rip+0xffffffffffff2218]        # 0x1002ae0
 10108c8:	call   QWORD PTR [rip+0xffffffffffff095a]        # 0x1001228
 10108ce:	lea    rcx,[rbp+0x60]
 10108d2:	call   QWORD PTR [rip+0xffffffffffff0e68]        # 0x1001740
 10108d8:	mov    edi,eax
 10108da:	mov    r8,QWORD PTR [rbx]
 10108dd:	mov    edx,eax
 10108df:	mov    rcx,rbx
 10108e2:	call   QWORD PTR [r8+0x88]
 10108e9:	test   al,al
 10108eb:	jne    0x1010988
 10108f1:	mov    edx,0xc000c40b
 10108f6:	lea    rcx,[rbp-0x70]
 10108fa:	call   0x10132d0
 10108ff:	nop
 1010900:	mov    rcx,rax
 1010903:	call   QWORD PTR [rip+0xffffffffffff11df]        # 0x1001ae8
 1010909:	mov    rdx,rax
 101090c:	mov    r8d,edi
 101090f:	lea    rcx,[rbp-0x80]
 1010913:	call   QWORD PTR [rip+0xffffffffffff1127]        # 0x1001a40
 1010919:	nop
 101091a:	lea    rcx,[rbp-0x70]
 101091e:	call   QWORD PTR [rip+0xffffffffffff1184]        # 0x1001aa8
 1010924:	mov    rax,QWORD PTR [rbx+0x8]
 1010928:	movsxd rcx,DWORD PTR [rax+0x4]
 101092c:	mov    rdi,QWORD PTR [rcx+rbx*1+0x8]
 1010931:	lea    rcx,[rbp-0x80]
 1010935:	call   QWORD PTR [rip+0xffffffffffff11ad]        # 0x1001ae8
 101093b:	mov    r8,rax
 101093e:	mov    rax,QWORD PTR [rbx+0x8]
 1010942:	movsxd rcx,DWORD PTR [rax+0x4]
 1010946:	add    rcx,0x8
 101094a:	add    rcx,rbx
 101094d:	mov    BYTE PTR [rsp+0x30],0x1
 1010952:	mov    BYTE PTR [rsp+0x28],0x1
 1010957:	mov    DWORD PTR [rsp+0x20],0x2
 101095f:	xor    r9d,r9d
 1010962:	mov    edx,0xc000c40b
 1010967:	call   QWORD PTR [rdi+0x8]
 101096a:	nop
 101096b:	lea    rcx,[rsp+0x48]
 1010970:	call   QWORD PTR [rip+0xffffffffffff1132]        # 0x1001aa8
 1010976:	nop
 1010977:	lea    rcx,[rbp-0x80]
 101097b:	call   QWORD PTR [rip+0xffffffffffff1127]        # 0x1001aa8
 1010981:	xor    al,al
 1010983:	jmp    0x1012592
 1010988:	mov    rcx,r12
 101098b:	call   QWORD PTR [rip+0xffffffffffff1157]        # 0x1001ae8
 1010991:	mov    rdi,rax
 1010994:	lea    rcx,[rsp+0x48]
 1010999:	call   QWORD PTR [rip+0xffffffffffff1149]        # 0x1001ae8
 101099f:	mov    rcx,rax
 10109a2:	mov    QWORD PTR [rsp+0x28],rdi
 10109a7:	mov    DWORD PTR [rsp+0x20],0x400
 10109af:	lea    r9,[rbp+0x60]
 10109b3:	lea    r8,[rip+0xffffffffffff1456]        # 0x1001e10
 10109ba:	lea    rdx,[rip+0xffffffffffff212f]        # 0x1002af0
 10109c1:	call   QWORD PTR [rip+0xffffffffffff0861]        # 0x1001228
 10109c7:	mov    r11,QWORD PTR [rbx]
 10109ca:	lea    rdx,[rbp+0x60]
 10109ce:	mov    rcx,rbx
 10109d1:	call   QWORD PTR [r11+0xf0]
 10109d8:	mov    DWORD PTR [rbp-0x74],0x400
 10109df:	lea    rdx,[rbp-0x74]
 10109e3:	lea    rcx,[rbp+0x60]
 10109e7:	call   QWORD PTR [rip+0xffffffffffff0833]        # 0x1001220
 10109ed:	mov    r11,QWORD PTR [rbx]
 10109f0:	lea    rdx,[rsp+0x60]
 10109f5:	mov    rcx,rbx
 10109f8:	call   QWORD PTR [r11+0x70]
 10109fc:	nop
 10109fd:	mov    rdi,QWORD PTR [rbx]
 1010a00:	lea    rdx,[rbp+0x60]
 1010a04:	mov    rcx,rax
 1010a07:	call   QWORD PTR [rip+0xffffffffffff1053]        # 0x1001a60
 1010a0d:	test   eax,eax
 1010a0f:	sete   dl
 1010a12:	mov    rcx,rbx
 1010a15:	call   QWORD PTR [rdi+0xa0]
 1010a1b:	nop
 1010a1c:	lea    rcx,[rsp+0x60]
 1010a21:	call   QWORD PTR [rip+0xffffffffffff1081]        # 0x1001aa8
 1010a27:	mov    r11,QWORD PTR [rbx]
 1010a2a:	mov    rcx,rbx
 1010a2d:	call   QWORD PTR [r11+0x90]
 1010a34:	cmp    eax,0x7
 1010a37:	jle    0x1010b40
 1010a3d:	mov    rax,QWORD PTR [rbx]
 1010a40:	lea    rdx,[rsp+0x60]
 1010a45:	mov    rcx,rbx
 1010a48:	call   QWORD PTR [rax+0x80]
 1010a4e:	mov    rdi,rax
 1010a51:	mov    rcx,rax
 1010a54:	call   QWORD PTR [rip+0xffffffffffff1096]        # 0x1001af0
 1010a5a:	cmp    eax,0x1
 1010a5d:	jne    0x1010a75
 1010a5f:	xor    edx,edx
 1010a61:	mov    rcx,rdi
 1010a64:	call   QWORD PTR [rip+0xffffffffffff0f66]        # 0x10019d0
 1010a6a:	cmp    ax,0x2a
 1010a6e:	jne    0x1010a75
 1010a70:	mov    dil,0x1
 1010a73:	jmp    0x1010a78
 1010a75:	xor    dil,dil
 1010a78:	lea    rcx,[rsp+0x60]
 1010a7d:	call   QWORD PTR [rip+0xffffffffffff1025]        # 0x1001aa8
 1010a83:	mov    rax,QWORD PTR [rbx]
 1010a86:	mov    rcx,rbx
 1010a89:	test   dil,dil
 1010a8c:	je     0x1010a96
 1010a8e:	call   QWORD PTR [rax+0x10]
 1010a91:	jmp    0x1010b40
 1010a96:	lea    rdx,[rbp-0x60]
 1010a9a:	call   QWORD PTR [rax+0x80]
 1010aa0:	nop
 1010aa1:	mov    rcx,rax
 1010aa4:	call   QWORD PTR [rip+0xffffffffffff103e]        # 0x1001ae8
 1010aaa:	mov    rcx,rax
 1010aad:	lea    rdx,[rip+0xffffffffffff2054]        # 0x1002b08
 1010ab4:	call   QWORD PTR [rip+0xffffffffffff0c16]        # 0x10016d0
 1010aba:	test   eax,eax
 1010abc:	je     0x1010ad6
 1010abe:	mov    rax,QWORD PTR [rbx]
 1010ac1:	lea    rdx,[rbp-0x68]
 1010ac5:	mov    rcx,rbx
 1010ac8:	call   QWORD PTR [rax+0x80]
 1010ace:	nop
 1010acf:	mov    esi,0x1
 1010ad4:	jmp    0x1010aee
 1010ad6:	lea    rdx,[rip+0xffffffffffff1333]        # 0x1001e10
 1010add:	lea    rcx,[rsp+0x60]
 1010ae2:	call   QWORD PTR [rip+0xffffffffffff0fc8]        # 0x1001ab0
 1010ae8:	nop
 1010ae9:	mov    esi,0x2
 1010aee:	mov    DWORD PTR [rbp-0x78],esi
 1010af1:	mov    rdi,QWORD PTR [rbx]
 1010af4:	mov    rcx,rax
 1010af7:	call   QWORD PTR [rip+0xffffffffffff0feb]        # 0x1001ae8
 1010afd:	mov    rdx,rax
 1010b00:	mov    rcx,rbx
 1010b03:	call   QWORD PTR [rdi+0x8]
 1010b06:	nop
 1010b07:	test   sil,0x2
 1010b0b:	je     0x1010b1f
 1010b0d:	and    esi,0xfffffffd
 1010b10:	mov    DWORD PTR [rbp-0x78],esi
 1010b13:	lea    rcx,[rsp+0x60]
 1010b18:	call   QWORD PTR [rip+0xffffffffffff0f8a]        # 0x1001aa8
 1010b1e:	nop
 1010b1f:	test   sil,0x1
 1010b23:	je     0x1010b36
 1010b25:	and    esi,0xfffffffe
 1010b28:	mov    DWORD PTR [rbp-0x78],esi
 1010b2b:	lea    rcx,[rbp-0x68]
 1010b2f:	call   QWORD PTR [rip+0xffffffffffff0f73]        # 0x1001aa8
 1010b35:	nop
 1010b36:	lea    rcx,[rbp-0x60]
 1010b3a:	call   QWORD PTR [rip+0xffffffffffff0f68]        # 0x1001aa8
 1010b40:	mov    rax,QWORD PTR [rbx]
 1010b43:	mov    rcx,rbx
 1010b46:	call   QWORD PTR [rax+0xd8]
 1010b4c:	test   rax,rax
 1010b4f:	jne    0x1010b61
 1010b51:	mov    rax,QWORD PTR [rbx]
 1010b54:	lea    rdx,[rip+0xffffffffffff12b5]        # 0x1001e10
 1010b5b:	mov    rcx,rbx
 1010b5e:	call   QWORD PTR [rax+0x8]
 1010b61:	mov    rcx,r12
 1010b64:	call   QWORD PTR [rip+0xffffffffffff0f7e]        # 0x1001ae8
 1010b6a:	mov    rdi,rax
 1010b6d:	lea    rcx,[rsp+0x48]
 1010b72:	call   QWORD PTR [rip+0xffffffffffff0f70]        # 0x1001ae8
 1010b78:	mov    rcx,rax
 1010b7b:	mov    QWORD PTR [rsp+0x28],rdi
 1010b80:	mov    DWORD PTR [rsp+0x20],0x400
 1010b88:	lea    r9,[rbp+0x60]
 1010b8c:	lea    r8,[rip+0xffffffffffff1f89]        # 0x1002b1c
 1010b93:	lea    rdx,[rip+0xffffffffffff1f86]        # 0x1002b20
 1010b9a:	call   QWORD PTR [rip+0xffffffffffff0688]        # 0x1001228
 1010ba0:	mov    r11,QWORD PTR [rbx]
 1010ba3:	mov    esi,0x31
 1010ba8:	cmp    si,WORD PTR [rbp+0x60]
 1010bac:	sete   dl
 1010baf:	mov    rcx,rbx
 1010bb2:	call   QWORD PTR [r11+0xb8]
 1010bb9:	mov    r11,QWORD PTR [rbx]
 1010bbc:	mov    rcx,rbx
 1010bbf:	call   QWORD PTR [r11+0xc0]
 1010bc6:	test   al,al
 1010bc8:	je     0x1010be1
 1010bca:	mov    DWORD PTR [rbp-0x74],0x400
 1010bd1:	lea    rdx,[rbp-0x74]
 1010bd5:	lea    rcx,[rbp+0x60]
 1010bd9:	call   QWORD PTR [rip+0xffffffffffff0421]        # 0x1001000
 1010bdf:	jmp    0x1010c20
 1010be1:	mov    rcx,r12
 1010be4:	call   QWORD PTR [rip+0xffffffffffff0efe]        # 0x1001ae8
 1010bea:	mov    rdi,rax
 1010bed:	lea    rcx,[rsp+0x48]
 1010bf2:	call   QWORD PTR [rip+0xffffffffffff0ef0]        # 0x1001ae8
 1010bf8:	mov    rcx,rax
 1010bfb:	mov    QWORD PTR [rsp+0x28],rdi
 1010c00:	mov    DWORD PTR [rsp+0x20],0x400
 1010c08:	lea    r9,[rbp+0x60]
 1010c0c:	lea    r8,[rip+0xffffffffffff11fd]        # 0x1001e10
 1010c13:	lea    rdx,[rip+0xffffffffffff1f1e]        # 0x1002b38
 1010c1a:	call   QWORD PTR [rip+0xffffffffffff0608]        # 0x1001228
 1010c20:	mov    r11,QWORD PTR [rbx]
 1010c23:	lea    rdx,[rbp+0x60]
 1010c27:	mov    rcx,rbx
 1010c2a:	call   QWORD PTR [r11+0xc8]
 1010c31:	mov    rcx,r12
 1010c34:	call   QWORD PTR [rip+0xffffffffffff0eae]        # 0x1001ae8
 1010c3a:	mov    rdi,rax
 1010c3d:	lea    rcx,[rsp+0x48]
 1010c42:	call   QWORD PTR [rip+0xffffffffffff0ea0]        # 0x1001ae8
 1010c48:	mov    rcx,rax
 1010c4b:	mov    QWORD PTR [rsp+0x28],rdi
 1010c50:	mov    DWORD PTR [rsp+0x20],0x400
 1010c58:	lea    r9,[rbp+0x60]
 1010c5c:	lea    r8,[rip+0xffffffffffff1ee9]        # 0x1002b4c
 1010c63:	lea    rdx,[rip+0xffffffffffff1ee6]        # 0x1002b50
 1010c6a:	call   QWORD PTR [rip+0xffffffffffff05b8]        # 0x1001228
 1010c70:	cmp    si,WORD PTR [rbp+0x60]
 1010c74:	jne    0x1010dc6
 1010c7a:	mov    rcx,r12
 1010c7d:	call   QWORD PTR [rip+0xffffffffffff0e65]        # 0x1001ae8
 1010c83:	mov    rdi,rax
 1010c86:	lea    rcx,[rsp+0x48]
 1010c8b:	call   QWORD PTR [rip+0xffffffffffff0e57]        # 0x1001ae8
 1010c91:	mov    rcx,rax
 1010c94:	mov    QWORD PTR [rsp+0x28],rdi
 1010c99:	mov    DWORD PTR [rsp+0x20],0x400
 1010ca1:	lea    r9,[rbp+0x60]
 1010ca5:	lea    r8,[rip+0xffffffffffff1164]        # 0x1001e10
 1010cac:	lea    rdx,[rip+0xffffffffffff1eb5]        # 0x1002b68
 1010cb3:	call   QWORD PTR [rip+0xffffffffffff056f]        # 0x1001228
 1010cb9:	lea    rdx,[rbp+0x60]
 1010cbd:	lea    rcx,[rbp-0x68]
 1010cc1:	call   QWORD PTR [rip+0xffffffffffff0de9]        # 0x1001ab0
 1010cc7:	nop
 1010cc8:	mov    rcx,r12
 1010ccb:	call   QWORD PTR [rip+0xffffffffffff0e17]        # 0x1001ae8
 1010cd1:	mov    rdi,rax
 1010cd4:	lea    rcx,[rsp+0x48]
 1010cd9:	call   QWORD PTR [rip+0xffffffffffff0e09]        # 0x1001ae8
 1010cdf:	mov    rcx,rax
 1010ce2:	mov    QWORD PTR [rsp+0x28],rdi
 1010ce7:	mov    DWORD PTR [rsp+0x20],0x400
 1010cef:	lea    r9,[rbp+0x60]
 1010cf3:	lea    r8,[rip+0xffffffffffff1e8e]        # 0x1002b88
 1010cfa:	lea    rdx,[rip+0xffffffffffff1e8f]        # 0x1002b90
 1010d01:	call   QWORD PTR [rip+0xffffffffffff0521]        # 0x1001228
 1010d07:	lea    rcx,[rbp+0x60]
 1010d0b:	call   QWORD PTR [rip+0xffffffffffff0a2f]        # 0x1001740
 1010d11:	mov    esi,eax
 1010d13:	mov    rcx,r12
 1010d16:	call   QWORD PTR [rip+0xffffffffffff0dcc]        # 0x1001ae8
 1010d1c:	mov    rdi,rax
 1010d1f:	lea    rcx,[rsp+0x48]
 1010d24:	call   QWORD PTR [rip+0xffffffffffff0dbe]        # 0x1001ae8
 1010d2a:	mov    rcx,rax
 1010d2d:	mov    QWORD PTR [rsp+0x28],rdi
 1010d32:	mov    DWORD PTR [rsp+0x20],0x400
 1010d3a:	lea    r9,[rbp+0x60]
 1010d3e:	lea    r8,[rip+0xffffffffffff1e6f]        # 0x1002bb4
 1010d45:	lea    rdx,[rip+0xffffffffffff1e6c]        # 0x1002bb8
 1010d4c:	call   QWORD PTR [rip+0xffffffffffff04d6]        # 0x1001228
 1010d52:	lea    rcx,[rbp+0x60]
 1010d56:	call   QWORD PTR [rip+0xffffffffffff09e4]        # 0x1001740
 1010d5c:	mov    r14d,eax
 1010d5f:	lea    rcx,[rsp+0x60]
 1010d64:	call   QWORD PTR [rip+0xffffffffffff0d56]        # 0x1001ac0
 1010d6a:	nop
 1010d6b:	mov    r8d,esi
 1010d6e:	lea    rdx,[rip+0xffffffffffff1e73]        # 0x1002be8
 1010d75:	lea    rcx,[rsp+0x60]
 1010d7a:	call   QWORD PTR [rip+0xffffffffffff0cc0]        # 0x1001a40
 1010d80:	mov    rsi,QWORD PTR [rbx]
 1010d83:	lea    rcx,[rsp+0x60]
 1010d88:	call   QWORD PTR [rip+0xffffffffffff0d5a]        # 0x1001ae8
 1010d8e:	mov    rdi,rax
 1010d91:	lea    rcx,[rbp-0x68]
 1010d95:	call   QWORD PTR [rip+0xffffffffffff0d4d]        # 0x1001ae8
 1010d9b:	mov    r8,rax
 1010d9e:	mov    r9,rdi
 1010da1:	mov    edx,r14d
 1010da4:	mov    rcx,rbx
 1010da7:	call   QWORD PTR [rsi+0x18]
 1010daa:	nop
 1010dab:	lea    rcx,[rsp+0x60]
 1010db0:	call   QWORD PTR [rip+0xffffffffffff0cf2]        # 0x1001aa8
 1010db6:	nop
 1010db7:	lea    rcx,[rbp-0x68]
 1010dbb:	call   QWORD PTR [rip+0xffffffffffff0ce7]        # 0x1001aa8
 1010dc1:	mov    esi,0x31
 1010dc6:	mov    rcx,r12
 1010dc9:	call   QWORD PTR [rip+0xffffffffffff0d19]        # 0x1001ae8
 1010dcf:	mov    rdi,rax
 1010dd2:	lea    rcx,[rsp+0x48]
 1010dd7:	call   QWORD PTR [rip+0xffffffffffff0d0b]        # 0x1001ae8
 1010ddd:	mov    rcx,rax
 1010de0:	mov    QWORD PTR [rsp+0x28],rdi
 1010de5:	mov    DWORD PTR [rsp+0x20],0x400
 1010ded:	lea    r9,[rbp+0x60]
 1010df1:	lea    r8,[rip+0xffffffffffff1d24]        # 0x1002b1c
 1010df8:	lea    rdx,[rip+0xffffffffffff1e11]        # 0x1002c10
 1010dff:	call   QWORD PTR [rip+0xffffffffffff0423]        # 0x1001228
 1010e05:	cmp    si,WORD PTR [rbp+0x60]
 1010e09:	jne    0x1010f55
 1010e0f:	mov    rcx,r12
 1010e12:	call   QWORD PTR [rip+0xffffffffffff0cd0]        # 0x1001ae8
 1010e18:	mov    rdi,rax
 1010e1b:	lea    rcx,[rsp+0x48]
 1010e20:	call   QWORD PTR [rip+0xffffffffffff0cc2]        # 0x1001ae8
 1010e26:	mov    rcx,rax
 1010e29:	mov    QWORD PTR [rsp+0x28],rdi
 1010e2e:	mov    DWORD PTR [rsp+0x20],0x400
 1010e36:	lea    r9,[rbp+0x60]
 1010e3a:	lea    r8,[rip+0xffffffffffff1d0b]        # 0x1002b4c
 1010e41:	lea    rdx,[rip+0xffffffffffff1dd8]        # 0x1002c20
 1010e48:	call   QWORD PTR [rip+0xffffffffffff03da]        # 0x1001228
 1010e4e:	cmp    si,WORD PTR [rbp+0x60]
 1010e52:	jne    0x1010e5f
 1010e54:	mov    rax,QWORD PTR [rbx]
 1010e57:	xor    edx,edx
 1010e59:	mov    rcx,rbx
 1010e5c:	call   QWORD PTR [rax+0x30]
 1010e5f:	mov    rcx,r12
 1010e62:	call   QWORD PTR [rip+0xffffffffffff0c80]        # 0x1001ae8
 1010e68:	mov    rdi,rax
 1010e6b:	lea    rcx,[rsp+0x48]
 1010e70:	call   QWORD PTR [rip+0xffffffffffff0c72]        # 0x1001ae8
 1010e76:	mov    rcx,rax
 1010e79:	mov    QWORD PTR [rsp+0x28],rdi
 1010e7e:	mov    DWORD PTR [rsp+0x20],0x400
 1010e86:	lea    r9,[rbp+0x60]
 1010e8a:	lea    r8,[rip+0xffffffffffff1cbb]        # 0x1002b4c
 1010e91:	lea    rdx,[rip+0xffffffffffff1da8]        # 0x1002c40
 1010e98:	call   QWORD PTR [rip+0xffffffffffff038a]        # 0x1001228
 1010e9e:	cmp    si,WORD PTR [rbp+0x60]
 1010ea2:	jne    0x1010eb2
 1010ea4:	mov    rax,QWORD PTR [rbx]
 1010ea7:	mov    edx,0x2
 1010eac:	mov    rcx,rbx
 1010eaf:	call   QWORD PTR [rax+0x30]
 1010eb2:	mov    rcx,r12
 1010eb5:	call   QWORD PTR [rip+0xffffffffffff0c2d]        # 0x1001ae8
 1010ebb:	mov    rdi,rax
 1010ebe:	lea    rcx,[rsp+0x48]
 1010ec3:	call   QWORD PTR [rip+0xffffffffffff0c1f]        # 0x1001ae8
 1010ec9:	mov    rcx,rax
 1010ecc:	mov    QWORD PTR [rsp+0x28],rdi
 1010ed1:	mov    DWORD PTR [rsp+0x20],0x400
 1010ed9:	lea    r9,[rbp+0x60]
 1010edd:	lea    r8,[rip+0xffffffffffff1c68]        # 0x1002b4c
 1010ee4:	lea    rdx,[rip+0xffffffffffff1d75]        # 0x1002c60
 1010eeb:	call   QWORD PTR [rip+0xffffffffffff0337]        # 0x1001228
 1010ef1:	cmp    si,WORD PTR [rbp+0x60]
 1010ef5:	jne    0x1010f02
 1010ef7:	mov    rax,QWORD PTR [rbx]
 1010efa:	xor    edx,edx
 1010efc:	mov    rcx,rbx
 1010eff:	call   QWORD PTR [rax+0x30]
 1010f02:	mov    rcx,r12
 1010f05:	call   QWORD PTR [rip+0xffffffffffff0bdd]        # 0x1001ae8
 1010f0b:	mov    rdi,rax
 1010f0e:	lea    rcx,[rsp+0x48]
 1010f13:	call   QWORD PTR [rip+0xffffffffffff0bcf]        # 0x1001ae8
 1010f19:	mov    rcx,rax
 1010f1c:	mov    QWORD PTR [rsp+0x28],rdi
 1010f21:	mov    DWORD PTR [rsp+0x20],0x400
 1010f29:	lea    r9,[rbp+0x60]
 1010f2d:	lea    r8,[rip+0xffffffffffff1c18]        # 0x1002b4c
 1010f34:	lea    rdx,[rip+0xffffffffffff1d45]        # 0x1002c80
 1010f3b:	call   QWORD PTR [rip+0xffffffffffff02e7]        # 0x1001228
 1010f41:	cmp    si,WORD PTR [rbp+0x60]
 1010f45:	jne    0x1010f55
 1010f47:	mov    rax,QWORD PTR [rbx]
 1010f4a:	mov    edx,0x2
 1010f4f:	mov    rcx,rbx
 1010f52:	call   QWORD PTR [rax+0x30]
 1010f55:	mov    rcx,r12
 1010f58:	call   QWORD PTR [rip+0xffffffffffff0b8a]        # 0x1001ae8
 1010f5e:	mov    rdi,rax
 1010f61:	lea    rcx,[rsp+0x48]
 1010f66:	call   QWORD PTR [rip+0xffffffffffff0b7c]        # 0x1001ae8
 1010f6c:	mov    rcx,rax
 1010f6f:	mov    QWORD PTR [rsp+0x28],rdi
 1010f74:	mov    DWORD PTR [rsp+0x20],0x400
 1010f7c:	lea    r9,[rbp+0x60]
 1010f80:	lea    r8,[rip+0xffffffffffff1bc5]        # 0x1002b4c
 1010f87:	lea    rdx,[rip+0xffffffffffff1d12]        # 0x1002ca0
 1010f8e:	call   QWORD PTR [rip+0xffffffffffff0294]        # 0x1001228
 1010f94:	cmp    si,WORD PTR [rbp+0x60]
 1010f98:	jne    0x10110cb
 1010f9e:	mov    rcx,r12
 1010fa1:	call   QWORD PTR [rip+0xffffffffffff0b41]        # 0x1001ae8
 1010fa7:	mov    rdi,rax
 1010faa:	lea    rcx,[rsp+0x48]
 1010faf:	call   QWORD PTR [rip+0xffffffffffff0b33]        # 0x1001ae8
 1010fb5:	mov    rcx,rax
 1010fb8:	mov    QWORD PTR [rsp+0x28],rdi
 1010fbd:	mov    DWORD PTR [rsp+0x20],0x400
 1010fc5:	lea    r9,[rbp+0x60]
 1010fc9:	lea    r8,[rip+0xffffffffffff1b7c]        # 0x1002b4c
 1010fd0:	lea    rdx,[rip+0xffffffffffff1ce9]        # 0x1002cc0
 1010fd7:	call   QWORD PTR [rip+0xffffffffffff024b]        # 0x1001228
 1010fdd:	cmp    si,WORD PTR [rbp+0x60]
 1010fe1:	sete   r15b
 1010fe5:	mov    rcx,r12
 1010fe8:	call   QWORD PTR [rip+0xffffffffffff0afa]        # 0x1001ae8
 1010fee:	mov    rdi,rax
 1010ff1:	lea    rcx,[rsp+0x48]
 1010ff6:	call   QWORD PTR [rip+0xffffffffffff0aec]        # 0x1001ae8
 1010ffc:	mov    rcx,rax
 1010fff:	mov    QWORD PTR [rsp+0x28],rdi
 1011004:	mov    DWORD PTR [rsp+0x20],0x400
 101100c:	lea    r9,[rbp+0x60]
 1011010:	lea    r8,[rip+0xffffffffffff1b05]        # 0x1002b1c
 1011017:	lea    rdx,[rip+0xffffffffffff1cc2]        # 0x1002ce0
 101101e:	call   QWORD PTR [rip+0xffffffffffff0204]        # 0x1001228
 1011024:	cmp    si,WORD PTR [rbp+0x60]
 1011028:	sete   r14b
 101102c:	mov    rcx,r12
 101102f:	call   QWORD PTR [rip+0xffffffffffff0ab3]        # 0x1001ae8
 1011035:	mov    rdi,rax
 1011038:	lea    rcx,[rsp+0x48]
 101103d:	call   QWORD PTR [rip+0xffffffffffff0aa5]        # 0x1001ae8
 1011043:	mov    rcx,rax
 1011046:	mov    QWORD PTR [rsp+0x28],rdi
 101104b:	mov    DWORD PTR [rsp+0x20],0x400
 1011053:	lea    r9,[rbp+0x60]
 1011057:	lea    r8,[rip+0xffffffffffff1b56]        # 0x1002bb4
 101105e:	lea    rdx,[rip+0xffffffffffff1c93]        # 0x1002cf8
 1011065:	call   QWORD PTR [rip+0xffffffffffff01bd]        # 0x1001228
 101106b:	lea    rcx,[rbp+0x60]
 101106f:	call   QWORD PTR [rip+0xffffffffffff06cb]        # 0x1001740
 1011075:	mov    esi,eax
 1011077:	lea    rcx,[rsp+0x60]
 101107c:	call   QWORD PTR [rip+0xffffffffffff0a3e]        # 0x1001ac0
 1011082:	nop
 1011083:	movzx  r9d,r14b
 1011087:	movzx  r8d,r15b
 101108b:	lea    rdx,[rip+0xffffffffffff1c96]        # 0x1002d28
 1011092:	lea    rcx,[rsp+0x60]
 1011097:	call   QWORD PTR [rip+0xffffffffffff09a3]        # 0x1001a40
 101109d:	mov    rdi,QWORD PTR [rbx]
 10110a0:	lea    rcx,[rsp+0x60]
 10110a5:	call   QWORD PTR [rip+0xffffffffffff0a3d]        # 0x1001ae8
 10110ab:	mov    r8,rax
 10110ae:	mov    edx,esi
 10110b0:	mov    rcx,rbx
 10110b3:	call   QWORD PTR [rdi+0x28]
 10110b6:	nop
 10110b7:	lea    rcx,[rsp+0x60]
 10110bc:	call   QWORD PTR [rip+0xffffffffffff09e6]        # 0x1001aa8
 10110c2:	mov    r15,QWORD PTR [rbp-0x70]
 10110c6:	mov    esi,0x31
 10110cb:	mov    rcx,r12
 10110ce:	call   QWORD PTR [rip+0xffffffffffff0a14]        # 0x1001ae8
 10110d4:	mov    rdi,rax
 10110d7:	lea    rcx,[rsp+0x48]
 10110dc:	call   QWORD PTR [rip+0xffffffffffff0a06]        # 0x1001ae8
 10110e2:	mov    rcx,rax
 10110e5:	mov    QWORD PTR [rsp+0x28],rdi
 10110ea:	mov    DWORD PTR [rsp+0x20],0x400
 10110f2:	lea    r9,[rbp+0x60]
 10110f6:	lea    r8,[rip+0xffffffffffff1a4f]        # 0x1002b4c
 10110fd:	lea    rdx,[rip+0xffffffffffff1c54]        # 0x1002d58
 1011104:	call   QWORD PTR [rip+0xffffffffffff011e]        # 0x1001228
 101110a:	cmp    si,WORD PTR [rbp+0x60]
 101110e:	jne    0x1011264
 1011114:	mov    rcx,r12
 1011117:	call   QWORD PTR [rip+0xffffffffffff09cb]        # 0x1001ae8
 101111d:	mov    rdi,rax
 1011120:	lea    rcx,[rsp+0x48]
 1011125:	call   QWORD PTR [rip+0xffffffffffff09bd]        # 0x1001ae8
 101112b:	mov    rcx,rax
 101112e:	mov    QWORD PTR [rsp+0x28],rdi
 1011133:	mov    DWORD PTR [rsp+0x20],0x400
 101113b:	lea    r9,[rbp+0x60]
 101113f:	lea    r8,[rip+0xffffffffffff1a06]        # 0x1002b4c
 1011146:	lea    rdx,[rip+0xffffffffffff1c23]        # 0x1002d70
 101114d:	call   QWORD PTR [rip+0xffffffffffff00d5]        # 0x1001228
 1011153:	cmp    si,WORD PTR [rbp+0x60]
 1011157:	jne    0x1011167
 1011159:	mov    rax,QWORD PTR [rbx]
 101115c:	xor    r8d,r8d
 101115f:	xor    edx,edx
 1011161:	mov    rcx,rbx
 1011164:	call   QWORD PTR [rax+0x38]
 1011167:	mov    rcx,r12
 101116a:	call   QWORD PTR [rip+0xffffffffffff0978]        # 0x1001ae8
 1011170:	mov    rdi,rax
 1011173:	lea    rcx,[rsp+0x48]
 1011178:	call   QWORD PTR [rip+0xffffffffffff096a]        # 0x1001ae8
 101117e:	mov    rcx,rax
 1011181:	mov    QWORD PTR [rsp+0x28],rdi
 1011186:	mov    DWORD PTR [rsp+0x20],0x400
 101118e:	lea    r9,[rbp+0x60]
 1011192:	lea    r8,[rip+0xffffffffffff19b3]        # 0x1002b4c
 1011199:	lea    rdx,[rip+0xffffffffffff1bf8]        # 0x1002d98
 10111a0:	call   QWORD PTR [rip+0xffffffffffff0082]        # 0x1001228
 10111a6:	cmp    si,WORD PTR [rbp+0x60]
 10111aa:	jne    0x10111bc
 10111ac:	mov    rax,QWORD PTR [rbx]
 10111af:	xor    r8d,r8d
 10111b2:	lea    edx,[r8+0x2]
 10111b6:	mov    rcx,rbx
 10111b9:	call   QWORD PTR [rax+0x38]
 10111bc:	mov    rcx,r12
 10111bf:	call   QWORD PTR [rip+0xffffffffffff0923]        # 0x1001ae8
 10111c5:	mov    rdi,rax
 10111c8:	lea    rcx,[rsp+0x48]
 10111cd:	call   QWORD PTR [rip+0xffffffffffff0915]        # 0x1001ae8
 10111d3:	mov    rcx,rax
 10111d6:	mov    QWORD PTR [rsp+0x28],rdi
 10111db:	mov    DWORD PTR [rsp+0x20],0x400
 10111e3:	lea    r9,[rbp+0x60]
 10111e7:	lea    r8,[rip+0xffffffffffff195e]        # 0x1002b4c
 10111ee:	lea    rdx,[rip+0xffffffffffff1bcb]        # 0x1002dc0
 10111f5:	call   QWORD PTR [rip+0xffffffffffff002d]        # 0x1001228
 10111fb:	cmp    si,WORD PTR [rbp+0x60]
 10111ff:	jne    0x101120f
 1011201:	mov    rax,QWORD PTR [rbx]
 1011204:	xor    r8d,r8d
 1011207:	xor    edx,edx
 1011209:	mov    rcx,rbx
 101120c:	call   QWORD PTR [rax+0x38]
 101120f:	mov    rcx,r12
 1011212:	call   QWORD PTR [rip+0xffffffffffff08d0]        # 0x1001ae8
 1011218:	mov    rdi,rax
 101121b:	lea    rcx,[rsp+0x48]
 1011220:	call   QWORD PTR [rip+0xffffffffffff08c2]        # 0x1001ae8
 1011226:	mov    rcx,rax
 1011229:	mov    QWORD PTR [rsp+0x28],rdi
 101122e:	mov    DWORD PTR [rsp+0x20],0x400
 1011236:	lea    r9,[rbp+0x60]
 101123a:	lea    r8,[rip+0xffffffffffff190b]        # 0x1002b4c
 1011241:	lea    rdx,[rip+0xffffffffffff1b98]        # 0x1002de0
 1011248:	call   QWORD PTR [rip+0xfffffffffffeffda]        # 0x1001228
 101124e:	cmp    si,WORD PTR [rbp+0x60]
 1011252:	jne    0x1011264
 1011254:	mov    rax,QWORD PTR [rbx]
 1011257:	xor    r8d,r8d
 101125a:	lea    edx,[r8+0x2]
 101125e:	mov    rcx,rbx
 1011261:	call   QWORD PTR [rax+0x38]
 1011264:	lea    rcx,[rsp+0x40]
 1011269:	call   QWORD PTR [rip+0xffffffffffff0851]        # 0x1001ac0
 101126f:	nop
 1011270:	lea    rcx,[rsp+0x50]
 1011275:	call   QWORD PTR [rip+0xffffffffffff0845]        # 0x1001ac0
 101127b:	nop
 101127c:	lea    rcx,[rsp+0x58]
 1011281:	call   QWORD PTR [rip+0xffffffffffff0839]        # 0x1001ac0
 1011287:	nop
 1011288:	lea    rcx,[rsp+0x78]
 101128d:	call   QWORD PTR [rip+0xffffffffffff082d]        # 0x1001ac0
 1011293:	nop
 1011294:	lea    rcx,[rsp+0x70]
 1011299:	call   QWORD PTR [rip+0xffffffffffff0821]        # 0x1001ac0
 101129f:	nop
 10112a0:	lea    rcx,[rsp+0x68]
 10112a5:	call   QWORD PTR [rip+0xffffffffffff0815]        # 0x1001ac0
 10112ab:	nop
 10112ac:	lea    rdx,[rbp+0x60]
 10112b0:	lea    rcx,[rsp+0x40]
 10112b5:	call   QWORD PTR [rip+0xffffffffffff07dd]        # 0x1001a98
 10112bb:	mov    DWORD PTR [rbp-0x68],r13d
 10112bf:	xor    r9d,r9d
 10112c2:	lea    r8,[rip+0xffffffffffff1b3f]        # 0x1002e08
 10112c9:	lea    rdx,[rip+0xffffffffffff1b60]        # 0x1002e30
 10112d0:	lea    rcx,[rsp+0x50]
 10112d5:	call   QWORD PTR [rip+0xffffffffffff0765]        # 0x1001a40
 10112db:	mov    rcx,r12
 10112de:	call   QWORD PTR [rip+0xffffffffffff0804]        # 0x1001ae8
 10112e4:	mov    rdi,rax
 10112e7:	lea    rcx,[rsp+0x50]
 10112ec:	call   QWORD PTR [rip+0xffffffffffff07f6]        # 0x1001ae8
 10112f2:	mov    rsi,rax
 10112f5:	lea    rcx,[rsp+0x48]
 10112fa:	call   QWORD PTR [rip+0xffffffffffff07e8]        # 0x1001ae8
 1011300:	mov    rcx,rax
 1011303:	mov    QWORD PTR [rsp+0x28],rdi
 1011308:	mov    DWORD PTR [rsp+0x20],0x400
 1011310:	lea    r9,[rbp+0x60]
 1011314:	lea    r8,[rip+0xffffffffffff1755]        # 0x1002a70
 101131b:	mov    rdx,rsi
 101131e:	call   QWORD PTR [rip+0xfffffffffffeff04]        # 0x1001228
 1011324:	cmp    r13w,WORD PTR [rbp+0x60]
 1011329:	je     0x1011dce
 101132f:	nop
 1011330:	lea    rdx,[rip+0xffffffffffff1739]        # 0x1002a70
 1011337:	lea    rcx,[rbp+0x60]
 101133b:	call   QWORD PTR [rip+0xffffffffffff038f]        # 0x10016d0
 1011341:	test   eax,eax
 1011343:	je     0x1011dce
 1011349:	lea    rdx,[rbp+0x60]
 101134d:	lea    rcx,[rsp+0x40]
 1011352:	call   QWORD PTR [rip+0xffffffffffff0740]        # 0x1001a98
 1011358:	lea    rcx,[rsp+0x40]
 101135d:	call   QWORD PTR [rip+0xffffffffffff0785]        # 0x1001ae8
 1011363:	mov    rdx,rax
 1011366:	lea    rcx,[rbp-0x60]
 101136a:	call   0x10353c0
 101136f:	nop
 1011370:	mov    rdx,rax
 1011373:	lea    rcx,[rsp+0x40]
 1011378:	call   QWORD PTR [rip+0xffffffffffff0722]        # 0x1001aa0
 101137e:	nop
 101137f:	lea    rcx,[rbp-0x60]
 1011383:	call   QWORD PTR [rip+0xffffffffffff071f]        # 0x1001aa8
 1011389:	mov    r8d,0x1
 101138f:	lea    rdx,[rbp+0x18]
 1011393:	lea    rcx,[rsp+0x40]
 1011398:	call   QWORD PTR [rip+0xffffffffffff06aa]        # 0x1001a48
 101139e:	nop
 101139f:	lea    rdx,[rip+0xffffffffffff1a5e]        # 0x1002e04
 10113a6:	mov    rcx,rax
 10113a9:	call   QWORD PTR [rip+0xffffffffffff0651]        # 0x1001a00
 10113af:	test   eax,eax
 10113b1:	sete   dil
 10113b5:	lea    rcx,[rbp+0x18]
 10113b9:	call   QWORD PTR [rip+0xffffffffffff06e9]        # 0x1001aa8
 10113bf:	lea    rcx,[rsp+0x40]
 10113c4:	test   dil,dil
 10113c7:	je     0x1011477
 10113cd:	mov    r8d,0x1
 10113d3:	lea    rdx,[rbp-0x48]
 10113d7:	call   QWORD PTR [rip+0xffffffffffff0543]        # 0x1001920
 10113dd:	nop
 10113de:	xor    r8d,r8d
 10113e1:	lea    rdx,[rip+0xffffffffffff1a1c]        # 0x1002e04
 10113e8:	mov    rcx,rax
 10113eb:	call   QWORD PTR [rip+0xffffffffffff0667]        # 0x1001a58
 10113f1:	lea    edi,[rax+0x1]
 10113f4:	lea    rcx,[rbp-0x48]
 10113f8:	call   QWORD PTR [rip+0xffffffffffff06aa]        # 0x1001aa8
 10113fe:	mov    r8d,0x1
 1011404:	lea    rdx,[rbp-0x38]
 1011408:	lea    rcx,[rsp+0x40]
 101140d:	call   QWORD PTR [rip+0xffffffffffff050d]        # 0x1001920
 1011413:	nop
 1011414:	mov    r8d,edi
 1011417:	lea    rdx,[rbp+0x38]
 101141b:	mov    rcx,rax
 101141e:	call   QWORD PTR [rip+0xffffffffffff0624]        # 0x1001a48
 1011424:	nop
 1011425:	mov    rdx,rax
 1011428:	lea    rcx,[rsp+0x70]
 101142d:	call   QWORD PTR [rip+0xffffffffffff066d]        # 0x1001aa0
 1011433:	nop
 1011434:	lea    rcx,[rbp+0x38]
 1011438:	call   QWORD PTR [rip+0xffffffffffff066a]        # 0x1001aa8
 101143e:	nop
 101143f:	lea    rcx,[rbp-0x38]
 1011443:	call   QWORD PTR [rip+0xffffffffffff065f]        # 0x1001aa8
 1011449:	mov    r8d,edi
 101144c:	lea    rdx,[rbp-0x58]
 1011450:	lea    rcx,[rsp+0x40]
 1011455:	call   QWORD PTR [rip+0xffffffffffff04c5]        # 0x1001920
 101145b:	nop
 101145c:	xor    r8d,r8d
 101145f:	lea    rdx,[rip+0xffffffffffff199a]        # 0x1002e00
 1011466:	mov    rcx,rax
 1011469:	call   QWORD PTR [rip+0xffffffffffff05e9]        # 0x1001a58
 101146f:	add    edi,eax
 1011471:	lea    rcx,[rbp-0x58]
 1011475:	jmp    0x10114b8
 1011477:	xor    r8d,r8d
 101147a:	lea    rdx,[rip+0xffffffffffff197f]        # 0x1002e00
 1011481:	call   QWORD PTR [rip+0xffffffffffff05d1]        # 0x1001a58
 1011487:	mov    edi,eax
 1011489:	cmp    eax,0xffffffff
 101148c:	je     0x1011d3c
 1011492:	mov    r8d,eax
 1011495:	lea    rdx,[rbp-0x28]
 1011499:	lea    rcx,[rsp+0x40]
 101149e:	call   QWORD PTR [rip+0xffffffffffff05a4]        # 0x1001a48
 10114a4:	nop
 10114a5:	mov    rdx,rax
 10114a8:	lea    rcx,[rsp+0x70]
 10114ad:	call   QWORD PTR [rip+0xffffffffffff05ed]        # 0x1001aa0
 10114b3:	nop
 10114b4:	lea    rcx,[rbp-0x28]
 10114b8:	call   QWORD PTR [rip+0xffffffffffff05ea]        # 0x1001aa8
 10114be:	lea    r8,[rip+0xffffffffffff094b]        # 0x1001e10
 10114c5:	lea    rdx,[rip+0xffffffffffff1938]        # 0x1002e04
 10114cc:	lea    rcx,[rsp+0x70]
 10114d1:	call   QWORD PTR [rip+0xffffffffffff04d9]        # 0x10019b0
 10114d7:	lea    r8d,[rdi+0x1]
 10114db:	lea    rdx,[rbp+0x50]
 10114df:	lea    rcx,[rsp+0x40]
 10114e4:	call   QWORD PTR [rip+0xffffffffffff0436]        # 0x1001920
 10114ea:	nop
 10114eb:	mov    rdx,rax
 10114ee:	lea    rcx,[rsp+0x40]
 10114f3:	call   QWORD PTR [rip+0xffffffffffff05a7]        # 0x1001aa0
 10114f9:	nop
 10114fa:	lea    rcx,[rbp+0x50]
 10114fe:	call   QWORD PTR [rip+0xffffffffffff05a4]        # 0x1001aa8
 1011504:	mov    r8d,0x1
 101150a:	lea    rdx,[rbp-0x18]
 101150e:	lea    rcx,[rsp+0x40]
 1011513:	call   QWORD PTR [rip+0xffffffffffff052f]        # 0x1001a48
 1011519:	nop
 101151a:	lea    rdx,[rip+0xffffffffffff18e3]        # 0x1002e04
 1011521:	mov    rcx,rax
 1011524:	call   QWORD PTR [rip+0xffffffffffff04d6]        # 0x1001a00
 101152a:	test   eax,eax
 101152c:	sete   dil
 1011530:	lea    rcx,[rbp-0x18]
 1011534:	call   QWORD PTR [rip+0xffffffffffff056e]        # 0x1001aa8
 101153a:	lea    rcx,[rsp+0x40]
 101153f:	test   dil,dil
 1011542:	je     0x10115f2
 1011548:	mov    r8d,0x1
 101154e:	lea    rdx,[rbp+0x28]
 1011552:	call   QWORD PTR [rip+0xffffffffffff03c8]        # 0x1001920
 1011558:	nop
 1011559:	xor    r8d,r8d
 101155c:	lea    rdx,[rip+0xffffffffffff18a1]        # 0x1002e04
 1011563:	mov    rcx,rax
 1011566:	call   QWORD PTR [rip+0xffffffffffff04ec]        # 0x1001a58
 101156c:	lea    edi,[rax+0x1]
 101156f:	lea    rcx,[rbp+0x28]
 1011573:	call   QWORD PTR [rip+0xffffffffffff052f]        # 0x1001aa8
 1011579:	mov    r8d,0x1
 101157f:	lea    rdx,[rbp+0x48]
 1011583:	lea    rcx,[rsp+0x40]
 1011588:	call   QWORD PTR [rip+0xffffffffffff0392]        # 0x1001920
 101158e:	nop
 101158f:	mov    r8d,edi
 1011592:	lea    rdx,[rbp-0x8]
 1011596:	mov    rcx,rax
 1011599:	call   QWORD PTR [rip+0xffffffffffff04a9]        # 0x1001a48
 101159f:	nop
 10115a0:	mov    rdx,rax
 10115a3:	lea    rcx,[rsp+0x68]
 10115a8:	call   QWORD PTR [rip+0xffffffffffff04f2]        # 0x1001aa0
 10115ae:	nop
 10115af:	lea    rcx,[rbp-0x8]
 10115b3:	call   QWORD PTR [rip+0xffffffffffff04ef]        # 0x1001aa8
 10115b9:	nop
 10115ba:	lea    rcx,[rbp+0x48]
 10115be:	call   QWORD PTR [rip+0xffffffffffff04e4]        # 0x1001aa8
 10115c4:	mov    r8d,edi
 10115c7:	lea    rdx,[rbp+0x8]
 10115cb:	lea    rcx,[rsp+0x40]
 10115d0:	call   QWORD PTR [rip+0xffffffffffff034a]        # 0x1001920
 10115d6:	nop
 10115d7:	xor    r8d,r8d
 10115da:	lea    rdx,[rip+0xffffffffffff181f]        # 0x1002e00
 10115e1:	mov    rcx,rax
 10115e4:	call   QWORD PTR [rip+0xffffffffffff046e]        # 0x1001a58
 10115ea:	add    edi,eax
 10115ec:	lea    rcx,[rbp+0x8]
 10115f0:	jmp    0x1011633
 10115f2:	xor    r8d,r8d
 10115f5:	lea    rdx,[rip+0xffffffffffff1804]        # 0x1002e00
 10115fc:	call   QWORD PTR [rip+0xffffffffffff0456]        # 0x1001a58
 1011602:	mov    edi,eax
 1011604:	cmp    eax,0xffffffff
 1011607:	je     0x1011caa
 101160d:	mov    r8d,eax
 1011610:	lea    rdx,[rbp-0x50]
 1011614:	lea    rcx,[rsp+0x40]
 1011619:	call   QWORD PTR [rip+0xffffffffffff0429]        # 0x1001a48
 101161f:	nop
 1011620:	mov    rdx,rax
 1011623:	lea    rcx,[rsp+0x68]
 1011628:	call   QWORD PTR [rip+0xffffffffffff0472]        # 0x1001aa0
 101162e:	nop
 101162f:	lea    rcx,[rbp-0x50]
 1011633:	call   QWORD PTR [rip+0xffffffffffff046f]        # 0x1001aa8
 1011639:	lea    r8,[rip+0xffffffffffff07d0]        # 0x1001e10
 1011640:	lea    rdx,[rip+0xffffffffffff17bd]        # 0x1002e04
 1011647:	lea    rcx,[rsp+0x68]
 101164c:	call   QWORD PTR [rip+0xffffffffffff035e]        # 0x10019b0
 1011652:	lea    r8d,[rdi+0x1]
 1011656:	lea    rdx,[rbp-0x40]
 101165a:	lea    rcx,[rsp+0x40]
 101165f:	call   QWORD PTR [rip+0xffffffffffff02bb]        # 0x1001920
 1011665:	nop
 1011666:	mov    rdx,rax
 1011669:	lea    rcx,[rsp+0x40]
 101166e:	call   QWORD PTR [rip+0xffffffffffff042c]        # 0x1001aa0
 1011674:	nop
 1011675:	lea    rcx,[rbp-0x40]
 1011679:	call   QWORD PTR [rip+0xffffffffffff0429]        # 0x1001aa8
 101167f:	xor    r8d,r8d
 1011682:	lea    rdx,[rip+0xffffffffffff1777]        # 0x1002e00
 1011689:	lea    rcx,[rsp+0x40]
 101168e:	call   QWORD PTR [rip+0xffffffffffff03c4]        # 0x1001a58
 1011694:	mov    esi,eax
 1011696:	cmp    eax,0xffffffff
 1011699:	je     0x1011c18
 101169f:	mov    r8d,eax
 10116a2:	lea    rdx,[rbp-0x30]
 10116a6:	lea    rcx,[rsp+0x40]
 10116ab:	call   QWORD PTR [rip+0xffffffffffff0397]        # 0x1001a48
 10116b1:	nop
 10116b2:	mov    rdx,rax
 10116b5:	lea    rcx,[rsp+0x58]
 10116ba:	call   QWORD PTR [rip+0xffffffffffff03e0]        # 0x1001aa0
 10116c0:	nop
 10116c1:	lea    rcx,[rbp-0x30]
 10116c5:	call   QWORD PTR [rip+0xffffffffffff03dd]        # 0x1001aa8
 10116cb:	mov    rdi,QWORD PTR [r15]
 10116ce:	lea    rcx,[rsp+0x58]
 10116d3:	call   QWORD PTR [rip+0xffffffffffff040f]        # 0x1001ae8
 10116d9:	mov    rdx,rax
 10116dc:	mov    rcx,r15
 10116df:	call   QWORD PTR [rdi+0x30]
 10116e2:	mov    DWORD PTR [rsp+0x60],eax
 10116e6:	test   eax,eax
 10116e8:	je     0x1011b86
 10116ee:	lea    r8d,[rsi+0x1]
 10116f2:	lea    rdx,[rbp-0x20]
 10116f6:	lea    rcx,[rsp+0x40]
 10116fb:	call   QWORD PTR [rip+0xffffffffffff021f]        # 0x1001920
 1011701:	nop
 1011702:	mov    rdx,rax
 1011705:	lea    rcx,[rsp+0x40]
 101170a:	call   QWORD PTR [rip+0xffffffffffff0390]        # 0x1001aa0
 1011710:	nop
 1011711:	lea    rcx,[rbp-0x20]
 1011715:	call   QWORD PTR [rip+0xffffffffffff038d]        # 0x1001aa8
 101171b:	xor    r8d,r8d
 101171e:	lea    rdx,[rip+0xffffffffffff16db]        # 0x1002e00
 1011725:	lea    rcx,[rsp+0x40]
 101172a:	call   QWORD PTR [rip+0xffffffffffff0328]        # 0x1001a58
 1011730:	mov    edi,eax
 1011732:	cmp    eax,0xffffffff
 1011735:	je     0x1011af4
 101173b:	mov    r8d,eax
 101173e:	lea    rdx,[rbp-0x10]
 1011742:	lea    rcx,[rsp+0x40]
 1011747:	call   QWORD PTR [rip+0xffffffffffff02fb]        # 0x1001a48
 101174d:	nop
 101174e:	mov    rdx,rax
 1011751:	lea    rcx,[rsp+0x58]
 1011756:	call   QWORD PTR [rip+0xffffffffffff0344]        # 0x1001aa0
 101175c:	nop
 101175d:	lea    rcx,[rbp-0x10]
 1011761:	call   QWORD PTR [rip+0xffffffffffff0341]        # 0x1001aa8
 1011767:	lea    rdx,[rip+0xffffffffffff16d2]        # 0x1002e40
 101176e:	lea    rcx,[rsp+0x58]
 1011773:	call   QWORD PTR [rip+0xffffffffffff02e7]        # 0x1001a60
 1011779:	mov    r13d,0x2
 101177f:	test   eax,eax
 1011781:	mov    eax,0x0
 1011786:	cmove  r13d,eax
 101178a:	lea    r8d,[rdi+0x1]
 101178e:	lea    rdx,[rbp+0x0]
 1011792:	lea    rcx,[rsp+0x40]
 1011797:	call   QWORD PTR [rip+0xffffffffffff0183]        # 0x1001920
 101179d:	nop
 101179e:	mov    rdx,rax
 10117a1:	lea    rcx,[rsp+0x40]
 10117a6:	call   QWORD PTR [rip+0xffffffffffff02f4]        # 0x1001aa0
 10117ac:	nop
 10117ad:	lea    rcx,[rbp+0x0]
 10117b1:	call   QWORD PTR [rip+0xffffffffffff02f1]        # 0x1001aa8
 10117b7:	xor    r8d,r8d
 10117ba:	lea    rdx,[rip+0xffffffffffff163f]        # 0x1002e00
 10117c1:	lea    rcx,[rsp+0x40]
 10117c6:	call   QWORD PTR [rip+0xffffffffffff028c]        # 0x1001a58
 10117cc:	mov    esi,eax
 10117ce:	cmp    eax,0xffffffff
 10117d1:	je     0x1011a62
 10117d7:	mov    r8d,eax
 10117da:	lea    rdx,[rbp+0x10]
 10117de:	lea    rcx,[rsp+0x40]
 10117e3:	call   QWORD PTR [rip+0xffffffffffff025f]        # 0x1001a48
 10117e9:	nop
 10117ea:	mov    rdx,rax
 10117ed:	lea    rcx,[rsp+0x58]
 10117f2:	call   QWORD PTR [rip+0xffffffffffff02a8]        # 0x1001aa0
 10117f8:	nop
 10117f9:	lea    rcx,[rbp+0x10]
 10117fd:	call   QWORD PTR [rip+0xffffffffffff02a5]        # 0x1001aa8
 1011803:	mov    rdi,QWORD PTR [r15]
 1011806:	lea    rcx,[rsp+0x58]
 101180b:	call   QWORD PTR [rip+0xffffffffffff02d7]        # 0x1001ae8
 1011811:	mov    rdx,rax
 1011814:	mov    rcx,r15
 1011817:	call   QWORD PTR [rdi+0x38]
 101181a:	mov    r15d,eax
 101181d:	cmp    eax,0x3
 1011820:	je     0x10119d0
 1011826:	lea    r8d,[rsi+0x1]
 101182a:	lea    rdx,[rbp+0x20]
 101182e:	lea    rcx,[rsp+0x40]
 1011833:	call   QWORD PTR [rip+0xffffffffffff00e7]        # 0x1001920
 1011839:	nop
 101183a:	mov    rdx,rax
 101183d:	lea    rcx,[rsp+0x58]
 1011842:	call   QWORD PTR [rip+0xffffffffffff0258]        # 0x1001aa0
 1011848:	nop
 1011849:	lea    rcx,[rbp+0x20]
 101184d:	call   QWORD PTR [rip+0xffffffffffff0255]        # 0x1001aa8
 1011853:	mov    r8d,0x1
 1011859:	lea    rdx,[rbp+0x30]
 101185d:	lea    rcx,[rsp+0x58]
 1011862:	call   QWORD PTR [rip+0xffffffffffff01e0]        # 0x1001a48
 1011868:	nop
 1011869:	lea    rdx,[rip+0xffffffffffff1594]        # 0x1002e04
 1011870:	mov    rcx,rax
 1011873:	call   QWORD PTR [rip+0xffffffffffff0187]        # 0x1001a00
 1011879:	test   eax,eax
 101187b:	sete   dil
 101187f:	lea    rcx,[rbp+0x30]
 1011883:	call   QWORD PTR [rip+0xffffffffffff021f]        # 0x1001aa8
 1011889:	test   dil,dil
 101188c:	je     0x10118ce
 101188e:	lea    rcx,[rsp+0x58]
 1011893:	call   QWORD PTR [rip+0xffffffffffff0257]        # 0x1001af0
 1011899:	lea    r9d,[rax-0x2]
 101189d:	mov    r8d,0x1
 10118a3:	lea    rdx,[rbp+0x40]
 10118a7:	lea    rcx,[rsp+0x58]
 10118ac:	call   QWORD PTR [rip+0xffffffffffff0066]        # 0x1001918
 10118b2:	nop
 10118b3:	mov    rdx,rax
 10118b6:	lea    rcx,[rsp+0x78]
 10118bb:	call   QWORD PTR [rip+0xffffffffffff01df]        # 0x1001aa0
 10118c1:	nop
 10118c2:	lea    rcx,[rbp+0x40]
 10118c6:	call   QWORD PTR [rip+0xffffffffffff01dc]        # 0x1001aa8
 10118cc:	jmp    0x10118de
 10118ce:	lea    rdx,[rsp+0x58]
 10118d3:	lea    rcx,[rsp+0x78]
 10118d8:	call   QWORD PTR [rip+0xffffffffffff01c2]        # 0x1001aa0
 10118de:	lea    r8,[rip+0xffffffffffff151f]        # 0x1002e04
 10118e5:	lea    rdx,[rip+0xffffffffffff1564]        # 0x1002e50
 10118ec:	lea    rcx,[rsp+0x78]
 10118f1:	call   QWORD PTR [rip+0xffffffffffff00b9]        # 0x10019b0
 10118f7:	mov    r14,QWORD PTR [rbx]
 10118fa:	lea    rcx,[rsp+0x78]
 10118ff:	call   QWORD PTR [rip+0xffffffffffff01e3]        # 0x1001ae8
 1011905:	mov    rdi,rax
 1011908:	lea    rcx,[rsp+0x68]
 101190d:	call   QWORD PTR [rip+0xffffffffffff01d5]        # 0x1001ae8
 1011913:	mov    rsi,rax
 1011916:	lea    rcx,[rsp+0x70]
 101191b:	call   QWORD PTR [rip+0xffffffffffff01c7]        # 0x1001ae8
 1011921:	mov    rdx,rax
 1011924:	xor    eax,eax
 1011926:	mov    DWORD PTR [rsp+0x38],eax
 101192a:	mov    QWORD PTR [rsp+0x30],rdi
 101192f:	mov    DWORD PTR [rsp+0x28],r15d
 1011934:	mov    eax,DWORD PTR [rsp+0x60]
 1011938:	mov    DWORD PTR [rsp+0x20],eax
 101193c:	mov    r9d,r13d
 101193f:	mov    r8,rsi
 1011942:	mov    rcx,rbx
 1011945:	call   QWORD PTR [r14+0x58]
 1011949:	mov    r14d,DWORD PTR [rbp-0x68]
 101194d:	inc    r14d
 1011950:	mov    DWORD PTR [rbp-0x68],r14d
 1011954:	mov    r9d,r14d
 1011957:	lea    r8,[rip+0xffffffffffff14aa]        # 0x1002e08
 101195e:	lea    rdx,[rip+0xffffffffffff14cb]        # 0x1002e30
 1011965:	lea    rcx,[rsp+0x50]
 101196a:	call   QWORD PTR [rip+0xffffffffffff00d0]        # 0x1001a40
 1011970:	mov    rcx,r12
 1011973:	call   QWORD PTR [rip+0xffffffffffff016f]        # 0x1001ae8
 1011979:	mov    rdi,rax
 101197c:	lea    rcx,[rsp+0x50]
 1011981:	call   QWORD PTR [rip+0xffffffffffff0161]        # 0x1001ae8
 1011987:	mov    rsi,rax
 101198a:	lea    rcx,[rsp+0x48]
 101198f:	call   QWORD PTR [rip+0xffffffffffff0153]        # 0x1001ae8
 1011995:	mov    rcx,rax
 1011998:	mov    QWORD PTR [rsp+0x28],rdi
 101199d:	mov    DWORD PTR [rsp+0x20],0x400
 10119a5:	lea    r9,[rbp+0x60]
 10119a9:	lea    r8,[rip+0xffffffffffff10c0]        # 0x1002a70
 10119b0:	mov    rdx,rsi
 10119b3:	call   QWORD PTR [rip+0xfffffffffffef86f]        # 0x1001228
 10119b9:	xor    r13d,r13d
 10119bc:	cmp    r13w,WORD PTR [rbp+0x60]
 10119c1:	mov    r15,QWORD PTR [rbp-0x70]
 10119c5:	jne    0x1011330
 10119cb:	jmp    0x1011dce
 10119d0:	mov    rax,QWORD PTR [rbx+0x8]
 10119d4:	movsxd rcx,DWORD PTR [rax+0x4]
 10119d8:	add    rcx,0x8
 10119dc:	add    rcx,rbx
 10119df:	mov    rax,QWORD PTR [rcx]
 10119e2:	mov    BYTE PTR [rsp+0x28],0x1
 10119e7:	mov    BYTE PTR [rsp+0x20],0x1
 10119ec:	mov    r9d,0x2
 10119f2:	xor    r8d,r8d
 10119f5:	mov    edx,0xc000c410
 10119fa:	call   QWORD PTR [rax]
 10119fc:	nop
 10119fd:	lea    rcx,[rsp+0x68]
 1011a02:	call   QWORD PTR [rip+0xffffffffffff00a0]        # 0x1001aa8
 1011a08:	nop
 1011a09:	lea    rcx,[rsp+0x70]
 1011a0e:	call   QWORD PTR [rip+0xffffffffffff0094]        # 0x1001aa8
 1011a14:	nop
 1011a15:	lea    rcx,[rsp+0x78]
 1011a1a:	call   QWORD PTR [rip+0xffffffffffff0088]        # 0x1001aa8
 1011a20:	nop
 1011a21:	lea    rcx,[rsp+0x58]
 1011a26:	call   QWORD PTR [rip+0xffffffffffff007c]        # 0x1001aa8
 1011a2c:	nop
 1011a2d:	lea    rcx,[rsp+0x50]
 1011a32:	call   QWORD PTR [rip+0xffffffffffff0070]        # 0x1001aa8
 1011a38:	nop
 1011a39:	lea    rcx,[rsp+0x40]
 1011a3e:	call   QWORD PTR [rip+0xffffffffffff0064]        # 0x1001aa8
 1011a44:	nop
 1011a45:	lea    rcx,[rsp+0x48]
 1011a4a:	call   QWORD PTR [rip+0xffffffffffff0058]        # 0x1001aa8
 1011a50:	nop
 1011a51:	lea    rcx,[rbp-0x80]
 1011a55:	call   QWORD PTR [rip+0xffffffffffff004d]        # 0x1001aa8
 1011a5b:	xor    al,al
 1011a5d:	jmp    0x1012592
 1011a62:	mov    rax,QWORD PTR [rbx+0x8]
 1011a66:	movsxd rcx,DWORD PTR [rax+0x4]
 1011a6a:	add    rcx,0x8
 1011a6e:	add    rcx,rbx
 1011a71:	mov    rax,QWORD PTR [rcx]
 1011a74:	mov    BYTE PTR [rsp+0x28],0x1
 1011a79:	mov    BYTE PTR [rsp+0x20],0x1
 1011a7e:	mov    r9d,0x2
 1011a84:	xor    r8d,r8d
 1011a87:	mov    edx,0xc000c407
 1011a8c:	call   QWORD PTR [rax]
 1011a8e:	nop
 1011a8f:	lea    rcx,[rsp+0x68]
 1011a94:	call   QWORD PTR [rip+0xffffffffffff000e]        # 0x1001aa8
 1011a9a:	nop
 1011a9b:	lea    rcx,[rsp+0x70]
 1011aa0:	call   QWORD PTR [rip+0xffffffffffff0002]        # 0x1001aa8
 1011aa6:	nop
 1011aa7:	lea    rcx,[rsp+0x78]
 1011aac:	call   QWORD PTR [rip+0xfffffffffffefff6]        # 0x1001aa8
 1011ab2:	nop
 1011ab3:	lea    rcx,[rsp+0x58]
 1011ab8:	call   QWORD PTR [rip+0xfffffffffffeffea]        # 0x1001aa8
 1011abe:	nop
 1011abf:	lea    rcx,[rsp+0x50]
 1011ac4:	call   QWORD PTR [rip+0xfffffffffffeffde]        # 0x1001aa8
 1011aca:	nop
 1011acb:	lea    rcx,[rsp+0x40]
 1011ad0:	call   QWORD PTR [rip+0xfffffffffffeffd2]        # 0x1001aa8
 1011ad6:	nop
 1011ad7:	lea    rcx,[rsp+0x48]
 1011adc:	call   QWORD PTR [rip+0xfffffffffffeffc6]        # 0x1001aa8
 1011ae2:	nop
 1011ae3:	lea    rcx,[rbp-0x80]
 1011ae7:	call   QWORD PTR [rip+0xfffffffffffeffbb]        # 0x1001aa8
 1011aed:	xor    al,al
 1011aef:	jmp    0x1012592
 1011af4:	mov    rax,QWORD PTR [rbx+0x8]
 1011af8:	movsxd rcx,DWORD PTR [rax+0x4]
 1011afc:	add    rcx,0x8
 1011b00:	add    rcx,rbx
 1011b03:	mov    rax,QWORD PTR [rcx]
 1011b06:	mov    BYTE PTR [rsp+0x28],0x1
 1011b0b:	mov    BYTE PTR [rsp+0x20],0x1
 1011b10:	mov    r9d,0x2
 1011b16:	xor    r8d,r8d
 1011b19:	mov    edx,0xc000c407
 1011b1e:	call   QWORD PTR [rax]
 1011b20:	nop
 1011b21:	lea    rcx,[rsp+0x68]
 1011b26:	call   QWORD PTR [rip+0xfffffffffffeff7c]        # 0x1001aa8
 1011b2c:	nop
 1011b2d:	lea    rcx,[rsp+0x70]
 1011b32:	call   QWORD PTR [rip+0xfffffffffffeff70]        # 0x1001aa8
 1011b38:	nop
 1011b39:	lea    rcx,[rsp+0x78]
 1011b3e:	call   QWORD PTR [rip+0xfffffffffffeff64]        # 0x1001aa8
 1011b44:	nop
 1011b45:	lea    rcx,[rsp+0x58]
 1011b4a:	call   QWORD PTR [rip+0xfffffffffffeff58]        # 0x1001aa8
 1011b50:	nop
 1011b51:	lea    rcx,[rsp+0x50]
 1011b56:	call   QWORD PTR [rip+0xfffffffffffeff4c]        # 0x1001aa8
 1011b5c:	nop
 1011b5d:	lea    rcx,[rsp+0x40]
 1011b62:	call   QWORD PTR [rip+0xfffffffffffeff40]        # 0x1001aa8
 1011b68:	nop
 1011b69:	lea    rcx,[rsp+0x48]
 1011b6e:	call   QWORD PTR [rip+0xfffffffffffeff34]        # 0x1001aa8
 1011b74:	nop
 1011b75:	lea    rcx,[rbp-0x80]
 1011b79:	call   QWORD PTR [rip+0xfffffffffffeff29]        # 0x1001aa8
 1011b7f:	xor    al,al
 1011b81:	jmp    0x1012592
 1011b86:	mov    rax,QWORD PTR [rbx+0x8]
 1011b8a:	movsxd rcx,DWORD PTR [rax+0x4]
 1011b8e:	add    rcx,0x8
 1011b92:	add    rcx,rbx
 1011b95:	mov    rax,QWORD PTR [rcx]
 1011b98:	mov    BYTE PTR [rsp+0x28],0x1
 1011b9d:	mov    BYTE PTR [rsp+0x20],0x1
 1011ba2:	mov    r9d,0x2
 1011ba8:	xor    r8d,r8d
 1011bab:	mov    edx,0xc000c408
 1011bb0:	call   QWORD PTR [rax]
 1011bb2:	nop
 1011bb3:	lea    rcx,[rsp+0x68]
 1011bb8:	call   QWORD PTR [rip+0xfffffffffffefeea]        # 0x1001aa8
 1011bbe:	nop
 1011bbf:	lea    rcx,[rsp+0x70]
 1011bc4:	call   QWORD PTR [rip+0xfffffffffffefede]        # 0x1001aa8
 1011bca:	nop
 1011bcb:	lea    rcx,[rsp+0x78]
 1011bd0:	call   QWORD PTR [rip+0xfffffffffffefed2]        # 0x1001aa8
 1011bd6:	nop
 1011bd7:	lea    rcx,[rsp+0x58]
 1011bdc:	call   QWORD PTR [rip+0xfffffffffffefec6]        # 0x1001aa8
 1011be2:	nop
 1011be3:	lea    rcx,[rsp+0x50]
 1011be8:	call   QWORD PTR [rip+0xfffffffffffefeba]        # 0x1001aa8
 1011bee:	nop
 1011bef:	lea    rcx,[rsp+0x40]
 1011bf4:	call   QWORD PTR [rip+0xfffffffffffefeae]        # 0x1001aa8
 1011bfa:	nop
 1011bfb:	lea    rcx,[rsp+0x48]
 1011c00:	call   QWORD PTR [rip+0xfffffffffffefea2]        # 0x1001aa8
 1011c06:	nop
 1011c07:	lea    rcx,[rbp-0x80]
 1011c0b:	call   QWORD PTR [rip+0xfffffffffffefe97]        # 0x1001aa8
 1011c11:	xor    al,al
 1011c13:	jmp    0x1012592
 1011c18:	mov    rax,QWORD PTR [rbx+0x8]
 1011c1c:	movsxd rcx,DWORD PTR [rax+0x4]
 1011c20:	add    rcx,0x8
 1011c24:	add    rcx,rbx
 1011c27:	mov    rax,QWORD PTR [rcx]
 1011c2a:	mov    BYTE PTR [rsp+0x28],0x1
 1011c2f:	mov    BYTE PTR [rsp+0x20],0x1
 1011c34:	mov    r9d,0x2
 1011c3a:	xor    r8d,r8d
 1011c3d:	mov    edx,0xc000c407
 1011c42:	call   QWORD PTR [rax]
 1011c44:	nop
 1011c45:	lea    rcx,[rsp+0x68]
 1011c4a:	call   QWORD PTR [rip+0xfffffffffffefe58]        # 0x1001aa8
 1011c50:	nop
 1011c51:	lea    rcx,[rsp+0x70]
 1011c56:	call   QWORD PTR [rip+0xfffffffffffefe4c]        # 0x1001aa8
 1011c5c:	nop
 1011c5d:	lea    rcx,[rsp+0x78]
 1011c62:	call   QWORD PTR [rip+0xfffffffffffefe40]        # 0x1001aa8
 1011c68:	nop
 1011c69:	lea    rcx,[rsp+0x58]
 1011c6e:	call   QWORD PTR [rip+0xfffffffffffefe34]        # 0x1001aa8
 1011c74:	nop
 1011c75:	lea    rcx,[rsp+0x50]
 1011c7a:	call   QWORD PTR [rip+0xfffffffffffefe28]        # 0x1001aa8
 1011c80:	nop
 1011c81:	lea    rcx,[rsp+0x40]
 1011c86:	call   QWORD PTR [rip+0xfffffffffffefe1c]        # 0x1001aa8
 1011c8c:	nop
 1011c8d:	lea    rcx,[rsp+0x48]
 1011c92:	call   QWORD PTR [rip+0xfffffffffffefe10]        # 0x1001aa8
 1011c98:	nop
 1011c99:	lea    rcx,[rbp-0x80]
 1011c9d:	call   QWORD PTR [rip+0xfffffffffffefe05]        # 0x1001aa8
 1011ca3:	xor    al,al
 1011ca5:	jmp    0x1012592
 1011caa:	mov    rax,QWORD PTR [rbx+0x8]
 1011cae:	movsxd rcx,DWORD PTR [rax+0x4]
 1011cb2:	add    rcx,0x8
 1011cb6:	add    rcx,rbx
 1011cb9:	mov    rax,QWORD PTR [rcx]
 1011cbc:	mov    BYTE PTR [rsp+0x28],0x1
 1011cc1:	mov    BYTE PTR [rsp+0x20],0x1
 1011cc6:	mov    r9d,0x2
 1011ccc:	xor    r8d,r8d
 1011ccf:	mov    edx,0xc000c407
 1011cd4:	call   QWORD PTR [rax]
 1011cd6:	nop
 1011cd7:	lea    rcx,[rsp+0x68]
 1011cdc:	call   QWORD PTR [rip+0xfffffffffffefdc6]        # 0x1001aa8
 1011ce2:	nop
 1011ce3:	lea    rcx,[rsp+0x70]
 1011ce8:	call   QWORD PTR [rip+0xfffffffffffefdba]        # 0x1001aa8
 1011cee:	nop
 1011cef:	lea    rcx,[rsp+0x78]
 1011cf4:	call   QWORD PTR [rip+0xfffffffffffefdae]        # 0x1001aa8
 1011cfa:	nop
 1011cfb:	lea    rcx,[rsp+0x58]
 1011d00:	call   QWORD PTR [rip+0xfffffffffffefda2]        # 0x1001aa8
 1011d06:	nop
 1011d07:	lea    rcx,[rsp+0x50]
 1011d0c:	call   QWORD PTR [rip+0xfffffffffffefd96]        # 0x1001aa8
 1011d12:	nop
 1011d13:	lea    rcx,[rsp+0x40]
 1011d18:	call   QWORD PTR [rip+0xfffffffffffefd8a]        # 0x1001aa8
 1011d1e:	nop
 1011d1f:	lea    rcx,[rsp+0x48]
 1011d24:	call   QWORD PTR [rip+0xfffffffffffefd7e]        # 0x1001aa8
 1011d2a:	nop
 1011d2b:	lea    rcx,[rbp-0x80]
 1011d2f:	call   QWORD PTR [rip+0xfffffffffffefd73]        # 0x1001aa8
 1011d35:	xor    al,al
 1011d37:	jmp    0x1012592
 1011d3c:	mov    rax,QWORD PTR [rbx+0x8]
 1011d40:	movsxd rcx,DWORD PTR [rax+0x4]
 1011d44:	add    rcx,0x8
 1011d48:	add    rcx,rbx
 1011d4b:	mov    rax,QWORD PTR [rcx]
 1011d4e:	mov    BYTE PTR [rsp+0x28],0x1
 1011d53:	mov    BYTE PTR [rsp+0x20],0x1
 1011d58:	mov    r9d,0x2
 1011d5e:	xor    r8d,r8d
 1011d61:	mov    edx,0xc000c407
 1011d66:	call   QWORD PTR [rax]
 1011d68:	nop
 1011d69:	lea    rcx,[rsp+0x68]
 1011d6e:	call   QWORD PTR [rip+0xfffffffffffefd34]        # 0x1001aa8
 1011d74:	nop
 1011d75:	lea    rcx,[rsp+0x70]
 1011d7a:	call   QWORD PTR [rip+0xfffffffffffefd28]        # 0x1001aa8
 1011d80:	nop
 1011d81:	lea    rcx,[rsp+0x78]
 1011d86:	call   QWORD PTR [rip+0xfffffffffffefd1c]        # 0x1001aa8
 1011d8c:	nop
 1011d8d:	lea    rcx,[rsp+0x58]
 1011d92:	call   QWORD PTR [rip+0xfffffffffffefd10]        # 0x1001aa8
 1011d98:	nop
 1011d99:	lea    rcx,[rsp+0x50]
 1011d9e:	call   QWORD PTR [rip+0xfffffffffffefd04]        # 0x1001aa8
 1011da4:	nop
 1011da5:	lea    rcx,[rsp+0x40]
 1011daa:	call   QWORD PTR [rip+0xfffffffffffefcf8]        # 0x1001aa8
 1011db0:	nop
 1011db1:	lea    rcx,[rsp+0x48]
 1011db6:	call   QWORD PTR [rip+0xfffffffffffefcec]        # 0x1001aa8
 1011dbc:	nop
 1011dbd:	lea    rcx,[rbp-0x80]
 1011dc1:	call   QWORD PTR [rip+0xfffffffffffefce1]        # 0x1001aa8
 1011dc7:	xor    al,al
 1011dc9:	jmp    0x1012592
 1011dce:	mov    rcx,r12
 1011dd1:	call   QWORD PTR [rip+0xfffffffffffefd11]        # 0x1001ae8
 1011dd7:	mov    rdi,rax
 1011dda:	lea    rcx,[rsp+0x48]
 1011ddf:	call   QWORD PTR [rip+0xfffffffffffefd03]        # 0x1001ae8
 1011de5:	mov    rcx,rax
 1011de8:	mov    QWORD PTR [rsp+0x28],rdi
 1011ded:	mov    DWORD PTR [rsp+0x20],0x400
 1011df5:	lea    r9,[rbp+0x60]
 1011df9:	lea    r8,[rip+0xffffffffffff0d4c]        # 0x1002b4c
 1011e00:	lea    rdx,[rip+0xffffffffffff1051]        # 0x1002e58
 1011e07:	call   QWORD PTR [rip+0xfffffffffffef41b]        # 0x1001228
 1011e0d:	mov    r15d,0x31
 1011e13:	cmp    r15w,WORD PTR [rbp+0x60]
 1011e18:	jne    0x1011ec8
 1011e1e:	mov    rcx,r12
 1011e21:	call   QWORD PTR [rip+0xfffffffffffefcc1]        # 0x1001ae8
 1011e27:	mov    rdi,rax
 1011e2a:	lea    rcx,[rsp+0x48]
 1011e2f:	call   QWORD PTR [rip+0xfffffffffffefcb3]        # 0x1001ae8
 1011e35:	mov    rcx,rax
 1011e38:	mov    QWORD PTR [rsp+0x28],rdi
 1011e3d:	mov    DWORD PTR [rsp+0x20],0x400
 1011e45:	lea    r9,[rbp+0x60]
 1011e49:	lea    r8,[rip+0xfffffffffffeffc0]        # 0x1001e10
 1011e50:	lea    rdx,[rip+0xffffffffffff1021]        # 0x1002e78
 1011e57:	call   QWORD PTR [rip+0xfffffffffffef3cb]        # 0x1001228
 1011e5d:	cmp    r13w,WORD PTR [rbp+0x60]
 1011e62:	je     0x1011ec8
 1011e64:	lea    rdx,[rbp+0x60]
 1011e68:	lea    rcx,[rsp+0x40]
 1011e6d:	call   QWORD PTR [rip+0xfffffffffffefc25]        # 0x1001a98
 1011e73:	xor    r8d,r8d
 1011e76:	lea    rdx,[rip+0xffffffffffff0bef]        # 0x1002a6c
 1011e7d:	lea    rcx,[rsp+0x40]
 1011e82:	call   QWORD PTR [rip+0xfffffffffffefbd0]        # 0x1001a58
 1011e88:	mov    rdi,QWORD PTR [rbx]
 1011e8b:	lea    rcx,[rsp+0x40]
 1011e90:	cmp    eax,0xffffffff
 1011e93:	je     0x1011eab
 1011e95:	call   QWORD PTR [rip+0xfffffffffffefc4d]        # 0x1001ae8
 1011e9b:	mov    r8,rax
 1011e9e:	xor    r9d,r9d
 1011ea1:	xor    edx,edx
 1011ea3:	mov    rcx,rbx
 1011ea6:	call   QWORD PTR [rdi+0x40]
 1011ea9:	jmp    0x1011ec8
 1011eab:	call   QWORD PTR [rip+0xfffffffffffefc37]        # 0x1001ae8
 1011eb1:	mov    r8,rax
 1011eb4:	mov    BYTE PTR [rsp+0x20],0x0
 1011eb9:	lea    r9,[rip+0xfffffffffffeff50]        # 0x1001e10
 1011ec0:	xor    edx,edx
 1011ec2:	mov    rcx,rbx
 1011ec5:	call   QWORD PTR [rdi+0x48]
 1011ec8:	lea    rdx,[rbp+0x60]
 1011ecc:	lea    rcx,[rsp+0x40]
 1011ed1:	call   QWORD PTR [rip+0xfffffffffffefbc1]        # 0x1001a98
 1011ed7:	mov    r14d,r13d
 1011eda:	nop    WORD PTR [rax+rax*1+0x0]
 1011ee0:	mov    r9d,r14d
 1011ee3:	lea    r8,[rip+0xffffffffffff0f8e]        # 0x1002e78
 1011eea:	lea    rdx,[rip+0xffffffffffff0f3f]        # 0x1002e30
 1011ef1:	lea    rcx,[rsp+0x50]
 1011ef6:	call   QWORD PTR [rip+0xfffffffffffefb44]        # 0x1001a40
 1011efc:	mov    rcx,r12
 1011eff:	call   QWORD PTR [rip+0xfffffffffffefbe3]        # 0x1001ae8
 1011f05:	mov    rdi,rax
 1011f08:	lea    rcx,[rsp+0x50]
 1011f0d:	call   QWORD PTR [rip+0xfffffffffffefbd5]        # 0x1001ae8
 1011f13:	mov    rsi,rax
 1011f16:	lea    rcx,[rsp+0x48]
 1011f1b:	call   QWORD PTR [rip+0xfffffffffffefbc7]        # 0x1001ae8
 1011f21:	mov    rcx,rax
 1011f24:	mov    QWORD PTR [rsp+0x28],rdi
 1011f29:	mov    DWORD PTR [rsp+0x20],0x400
 1011f31:	lea    r9,[rbp+0x60]
 1011f35:	lea    r8,[rip+0xffffffffffff0b34]        # 0x1002a70
 1011f3c:	mov    rdx,rsi
 1011f3f:	call   QWORD PTR [rip+0xfffffffffffef2e3]        # 0x1001228
 1011f45:	cmp    r13w,WORD PTR [rbp+0x60]
 1011f4a:	je     0x1011fc5
 1011f4c:	lea    rdx,[rip+0xffffffffffff0b1d]        # 0x1002a70
 1011f53:	lea    rcx,[rbp+0x60]
 1011f57:	call   QWORD PTR [rip+0xfffffffffffef773]        # 0x10016d0
 1011f5d:	test   eax,eax
 1011f5f:	je     0x1011fcd
 1011f61:	lea    rdx,[rbp+0x60]
 1011f65:	lea    rcx,[rsp+0x40]
 1011f6a:	call   QWORD PTR [rip+0xfffffffffffefb28]        # 0x1001a98
 1011f70:	xor    r8d,r8d
 1011f73:	lea    rdx,[rip+0xffffffffffff0af2]        # 0x1002a6c
 1011f7a:	lea    rcx,[rsp+0x40]
 1011f7f:	call   QWORD PTR [rip+0xfffffffffffefad3]        # 0x1001a58
 1011f85:	mov    rdi,QWORD PTR [rbx]
 1011f88:	lea    rcx,[rsp+0x40]
 1011f8d:	cmp    eax,0xffffffff
 1011f90:	je     0x1011fa8
 1011f92:	call   QWORD PTR [rip+0xfffffffffffefb50]        # 0x1001ae8
 1011f98:	mov    r8,rax
 1011f9b:	xor    r9d,r9d
 1011f9e:	xor    edx,edx
 1011fa0:	mov    rcx,rbx
 1011fa3:	call   QWORD PTR [rdi+0x40]
 1011fa6:	jmp    0x1011fc5
 1011fa8:	call   QWORD PTR [rip+0xfffffffffffefb3a]        # 0x1001ae8
 1011fae:	mov    r8,rax
 1011fb1:	mov    BYTE PTR [rsp+0x20],0x0
 1011fb6:	lea    r9,[rip+0xfffffffffffefe53]        # 0x1001e10
 1011fbd:	xor    edx,edx
 1011fbf:	mov    rcx,rbx
 1011fc2:	call   QWORD PTR [rdi+0x48]
 1011fc5:	inc    r14d
 1011fc8:	jmp    0x1011ee0
 1011fcd:	mov    rcx,r12
 1011fd0:	call   QWORD PTR [rip+0xfffffffffffefb12]        # 0x1001ae8
 1011fd6:	mov    rdi,rax
 1011fd9:	lea    rcx,[rsp+0x48]
 1011fde:	call   QWORD PTR [rip+0xfffffffffffefb04]        # 0x1001ae8
 1011fe4:	mov    rcx,rax
 1011fe7:	mov    QWORD PTR [rsp+0x28],rdi
 1011fec:	mov    DWORD PTR [rsp+0x20],0x400
 1011ff4:	lea    r9,[rbp+0x60]
 1011ff8:	lea    r8,[rip+0xffffffffffff0b4d]        # 0x1002b4c
 1011fff:	lea    rdx,[rip+0xffffffffffff0e9a]        # 0x1002ea0
 1012006:	call   QWORD PTR [rip+0xfffffffffffef21c]        # 0x1001228
 101200c:	cmp    r15w,WORD PTR [rbp+0x60]
 1012011:	jne    0x1012086
 1012013:	mov    rcx,r12
 1012016:	call   QWORD PTR [rip+0xfffffffffffefacc]        # 0x1001ae8
 101201c:	mov    rdi,rax
 101201f:	lea    rcx,[rsp+0x48]
 1012024:	call   QWORD PTR [rip+0xfffffffffffefabe]        # 0x1001ae8
 101202a:	mov    rcx,rax
 101202d:	mov    QWORD PTR [rsp+0x28],rdi
 1012032:	mov    DWORD PTR [rsp+0x20],0x400
 101203a:	lea    r9,[rbp+0x60]
 101203e:	lea    r8,[rip+0xfffffffffffefdcb]        # 0x1001e10
 1012045:	lea    rdx,[rip+0xffffffffffff0e74]        # 0x1002ec0
 101204c:	call   QWORD PTR [rip+0xfffffffffffef1d6]        # 0x1001228
 1012052:	cmp    r13w,WORD PTR [rbp+0x60]
 1012057:	je     0x1012086
 1012059:	lea    rdx,[rbp+0x60]
 101205d:	lea    rcx,[rsp+0x40]
 1012062:	call   QWORD PTR [rip+0xfffffffffffefa30]        # 0x1001a98
 1012068:	mov    rdi,QWORD PTR [rbx]
 101206b:	lea    rcx,[rsp+0x40]
 1012070:	call   QWORD PTR [rip+0xfffffffffffefa72]        # 0x1001ae8
 1012076:	mov    r8,rax
 1012079:	xor    r9d,r9d
 101207c:	lea    edx,[r9+0x2]
 1012080:	mov    rcx,rbx
 1012083:	call   QWORD PTR [rdi+0x40]
 1012086:	mov    r14d,r13d
 1012089:	nop    DWORD PTR [rax+0x0]
 1012090:	mov    r9d,r14d
 1012093:	lea    r8,[rip+0xffffffffffff0e26]        # 0x1002ec0
 101209a:	lea    rdx,[rip+0xffffffffffff0d8f]        # 0x1002e30
 10120a1:	lea    rcx,[rsp+0x50]
 10120a6:	call   QWORD PTR [rip+0xfffffffffffef994]        # 0x1001a40
 10120ac:	mov    rcx,r12
 10120af:	call   QWORD PTR [rip+0xfffffffffffefa33]        # 0x1001ae8
 10120b5:	mov    rdi,rax
 10120b8:	lea    rcx,[rsp+0x50]
 10120bd:	call   QWORD PTR [rip+0xfffffffffffefa25]        # 0x1001ae8
 10120c3:	mov    rsi,rax
 10120c6:	lea    rcx,[rsp+0x48]
 10120cb:	call   QWORD PTR [rip+0xfffffffffffefa17]        # 0x1001ae8
 10120d1:	mov    rcx,rax
 10120d4:	mov    QWORD PTR [rsp+0x28],rdi
 10120d9:	mov    DWORD PTR [rsp+0x20],0x400
 10120e1:	lea    r9,[rbp+0x60]
 10120e5:	lea    r8,[rip+0xffffffffffff0984]        # 0x1002a70
 10120ec:	mov    rdx,rsi
 10120ef:	call   QWORD PTR [rip+0xfffffffffffef133]        # 0x1001228
 10120f5:	cmp    r13w,WORD PTR [rbp+0x60]
 10120fa:	je     0x101213e
 10120fc:	lea    rdx,[rip+0xffffffffffff096d]        # 0x1002a70
 1012103:	lea    rcx,[rbp+0x60]
 1012107:	call   QWORD PTR [rip+0xfffffffffffef5c3]        # 0x10016d0
 101210d:	test   eax,eax
 101210f:	je     0x1012146
 1012111:	lea    rdx,[rbp+0x60]
 1012115:	lea    rcx,[rsp+0x40]
 101211a:	call   QWORD PTR [rip+0xfffffffffffef978]        # 0x1001a98
 1012120:	mov    rdi,QWORD PTR [rbx]
 1012123:	lea    rcx,[rsp+0x40]
 1012128:	call   QWORD PTR [rip+0xfffffffffffef9ba]        # 0x1001ae8
 101212e:	mov    r8,rax
 1012131:	xor    r9d,r9d
 1012134:	lea    edx,[r9+0x2]
 1012138:	mov    rcx,rbx
 101213b:	call   QWORD PTR [rdi+0x40]
 101213e:	inc    r14d
 1012141:	jmp    0x1012090
 1012146:	mov    rcx,r12
 1012149:	call   QWORD PTR [rip+0xfffffffffffef999]        # 0x1001ae8
 101214f:	mov    rdi,rax
 1012152:	lea    rcx,[rsp+0x48]
 1012157:	call   QWORD PTR [rip+0xfffffffffffef98b]        # 0x1001ae8
 101215d:	mov    rcx,rax
 1012160:	mov    QWORD PTR [rsp+0x28],rdi
 1012165:	mov    DWORD PTR [rsp+0x20],0x400
 101216d:	lea    r9,[rbp+0x60]
 1012171:	lea    r8,[rip+0xffffffffffff09d4]        # 0x1002b4c
 1012178:	lea    rdx,[rip+0xffffffffffff0d69]        # 0x1002ee8
 101217f:	call   QWORD PTR [rip+0xfffffffffffef0a3]        # 0x1001228
 1012185:	cmp    r15w,WORD PTR [rbp+0x60]
 101218a:	jne    0x1012207
 101218c:	mov    rcx,r12
 101218f:	call   QWORD PTR [rip+0xfffffffffffef953]        # 0x1001ae8
 1012195:	mov    rdi,rax
 1012198:	lea    rcx,[rsp+0x48]
 101219d:	call   QWORD PTR [rip+0xfffffffffffef945]        # 0x1001ae8
 10121a3:	mov    rcx,rax
 10121a6:	mov    QWORD PTR [rsp+0x28],rdi
 10121ab:	mov    DWORD PTR [rsp+0x20],0x400
 10121b3:	lea    r9,[rbp+0x60]
 10121b7:	lea    r8,[rip+0xfffffffffffefc52]        # 0x1001e10
 10121be:	lea    rdx,[rip+0xffffffffffff0d43]        # 0x1002f08
 10121c5:	call   QWORD PTR [rip+0xfffffffffffef05d]        # 0x1001228
 10121cb:	cmp    r13w,WORD PTR [rbp+0x60]
 10121d0:	je     0x1012207
 10121d2:	lea    rdx,[rbp+0x60]
 10121d6:	lea    rcx,[rbp-0x70]
 10121da:	call   QWORD PTR [rip+0xfffffffffffef8d0]        # 0x1001ab0
 10121e0:	nop
 10121e1:	mov    rdi,QWORD PTR [rbx]
 10121e4:	lea    rcx,[rbp-0x70]
 10121e8:	call   QWORD PTR [rip+0xfffffffffffef8fa]        # 0x1001ae8
 10121ee:	mov    r8,rax
 10121f1:	xor    r9d,r9d
 10121f4:	xor    edx,edx
 10121f6:	mov    rcx,rbx
 10121f9:	call   QWORD PTR [rdi+0x50]
 10121fc:	nop
 10121fd:	lea    rcx,[rbp-0x70]
 1012201:	call   QWORD PTR [rip+0xfffffffffffef8a1]        # 0x1001aa8
 1012207:	mov    r14d,r13d
 101220a:	nop    WORD PTR [rax+rax*1+0x0]
 1012210:	mov    r9d,r14d
 1012213:	lea    r8,[rip+0xffffffffffff0cee]        # 0x1002f08
 101221a:	lea    rdx,[rip+0xffffffffffff0c0f]        # 0x1002e30
 1012221:	lea    rcx,[rsp+0x50]
 1012226:	call   QWORD PTR [rip+0xfffffffffffef814]        # 0x1001a40
 101222c:	mov    rcx,r12
 101222f:	call   QWORD PTR [rip+0xfffffffffffef8b3]        # 0x1001ae8
 1012235:	mov    rdi,rax
 1012238:	lea    rcx,[rsp+0x50]
 101223d:	call   QWORD PTR [rip+0xfffffffffffef8a5]        # 0x1001ae8
 1012243:	mov    rsi,rax
 1012246:	lea    rcx,[rsp+0x48]
 101224b:	call   QWORD PTR [rip+0xfffffffffffef897]        # 0x1001ae8
 1012251:	mov    rcx,rax
 1012254:	mov    QWORD PTR [rsp+0x28],rdi
 1012259:	mov    DWORD PTR [rsp+0x20],0x400
 1012261:	lea    r9,[rbp+0x60]
 1012265:	lea    r8,[rip+0xffffffffffff0804]        # 0x1002a70
 101226c:	mov    rdx,rsi
 101226f:	call   QWORD PTR [rip+0xfffffffffffeefb3]        # 0x1001228
 1012275:	cmp    r13w,WORD PTR [rbp+0x60]
 101227a:	je     0x10122bc
 101227c:	lea    rdx,[rip+0xffffffffffff07ed]        # 0x1002a70
 1012283:	lea    rcx,[rbp+0x60]
 1012287:	call   QWORD PTR [rip+0xfffffffffffef443]        # 0x10016d0
 101228d:	test   eax,eax
 101228f:	je     0x10122c4
 1012291:	lea    rdx,[rbp+0x60]
 1012295:	lea    rcx,[rsp+0x40]
 101229a:	call   QWORD PTR [rip+0xfffffffffffef7f8]        # 0x1001a98
 10122a0:	mov    rdi,QWORD PTR [rbx]
 10122a3:	lea    rcx,[rsp+0x40]
 10122a8:	call   QWORD PTR [rip+0xfffffffffffef83a]        # 0x1001ae8
 10122ae:	mov    r8,rax
 10122b1:	xor    r9d,r9d
 10122b4:	xor    edx,edx
 10122b6:	mov    rcx,rbx
 10122b9:	call   QWORD PTR [rdi+0x50]
 10122bc:	inc    r14d
 10122bf:	jmp    0x1012210
 10122c4:	mov    rcx,r12
 10122c7:	call   QWORD PTR [rip+0xfffffffffffef81b]        # 0x1001ae8
 10122cd:	mov    rdi,rax
 10122d0:	lea    rcx,[rsp+0x48]
 10122d5:	call   QWORD PTR [rip+0xfffffffffffef80d]        # 0x1001ae8
 10122db:	mov    rcx,rax
 10122de:	mov    QWORD PTR [rsp+0x28],rdi
 10122e3:	mov    DWORD PTR [rsp+0x20],0x400
 10122eb:	lea    r9,[rbp+0x60]
 10122ef:	lea    r8,[rip+0xffffffffffff0856]        # 0x1002b4c
 10122f6:	lea    rdx,[rip+0xffffffffffff0c33]        # 0x1002f30
 10122fd:	call   QWORD PTR [rip+0xfffffffffffeef25]        # 0x1001228
 1012303:	cmp    r15w,WORD PTR [rbp+0x60]
 1012308:	jne    0x101237d
 101230a:	mov    rcx,r12
 101230d:	call   QWORD PTR [rip+0xfffffffffffef7d5]        # 0x1001ae8
 1012313:	mov    rdi,rax
 1012316:	lea    rcx,[rsp+0x48]
 101231b:	call   QWORD PTR [rip+0xfffffffffffef7c7]        # 0x1001ae8
 1012321:	mov    rcx,rax
 1012324:	mov    QWORD PTR [rsp+0x28],rdi
 1012329:	mov    DWORD PTR [rsp+0x20],0x400
 1012331:	lea    r9,[rbp+0x60]
 1012335:	lea    r8,[rip+0xfffffffffffefad4]        # 0x1001e10
 101233c:	lea    rdx,[rip+0xffffffffffff0c0d]        # 0x1002f50
 1012343:	call   QWORD PTR [rip+0xfffffffffffeeedf]        # 0x1001228
 1012349:	cmp    r13w,WORD PTR [rbp+0x60]
 101234e:	je     0x101237d
 1012350:	lea    rdx,[rbp+0x60]
 1012354:	lea    rcx,[rsp+0x40]
 1012359:	call   QWORD PTR [rip+0xfffffffffffef739]        # 0x1001a98
 101235f:	mov    rdi,QWORD PTR [rbx]
 1012362:	lea    rcx,[rsp+0x40]
 1012367:	call   QWORD PTR [rip+0xfffffffffffef77b]        # 0x1001ae8
 101236d:	mov    r8,rax
 1012370:	xor    r9d,r9d
 1012373:	lea    edx,[r9+0x2]
 1012377:	mov    rcx,rbx
 101237a:	call   QWORD PTR [rdi+0x50]
 101237d:	mov    r14d,r13d
 1012380:	mov    r9d,r14d
 1012383:	lea    r8,[rip+0xffffffffffff0bc6]        # 0x1002f50
 101238a:	lea    rdx,[rip+0xffffffffffff0a9f]        # 0x1002e30
 1012391:	lea    rcx,[rsp+0x50]
 1012396:	call   QWORD PTR [rip+0xfffffffffffef6a4]        # 0x1001a40
 101239c:	mov    rcx,r12
 101239f:	call   QWORD PTR [rip+0xfffffffffffef743]        # 0x1001ae8
 10123a5:	mov    rdi,rax
 10123a8:	lea    rcx,[rsp+0x50]
 10123ad:	call   QWORD PTR [rip+0xfffffffffffef735]        # 0x1001ae8
 10123b3:	mov    rsi,rax
 10123b6:	lea    rcx,[rsp+0x48]
 10123bb:	call   QWORD PTR [rip+0xfffffffffffef727]        # 0x1001ae8
 10123c1:	mov    rcx,rax
 10123c4:	mov    QWORD PTR [rsp+0x28],rdi
 10123c9:	mov    DWORD PTR [rsp+0x20],0x400
 10123d1:	lea    r9,[rbp+0x60]
 10123d5:	lea    r8,[rip+0xffffffffffff0694]        # 0x1002a70
 10123dc:	mov    rdx,rsi
 10123df:	call   QWORD PTR [rip+0xfffffffffffeee43]        # 0x1001228
 10123e5:	cmp    r13w,WORD PTR [rbp+0x60]
 10123ea:	je     0x101242e
 10123ec:	lea    rdx,[rip+0xffffffffffff067d]        # 0x1002a70
 10123f3:	lea    rcx,[rbp+0x60]
 10123f7:	call   QWORD PTR [rip+0xfffffffffffef2d3]        # 0x10016d0
 10123fd:	test   eax,eax
 10123ff:	je     0x1012436
 1012401:	lea    rdx,[rbp+0x60]
 1012405:	lea    rcx,[rsp+0x40]
 101240a:	call   QWORD PTR [rip+0xfffffffffffef688]        # 0x1001a98
 1012410:	mov    rdi,QWORD PTR [rbx]
 1012413:	lea    rcx,[rsp+0x40]
 1012418:	call   QWORD PTR [rip+0xfffffffffffef6ca]        # 0x1001ae8
 101241e:	mov    r8,rax
 1012421:	xor    r9d,r9d
 1012424:	lea    edx,[r9+0x2]
 1012428:	mov    rcx,rbx
 101242b:	call   QWORD PTR [rdi+0x50]
 101242e:	inc    r14d
 1012431:	jmp    0x1012380
 1012436:	mov    rcx,r12
 1012439:	call   QWORD PTR [rip+0xfffffffffffef6a9]        # 0x1001ae8
 101243f:	mov    rdi,rax
 1012442:	lea    rcx,[rsp+0x48]
 1012447:	call   QWORD PTR [rip+0xfffffffffffef69b]        # 0x1001ae8
 101244d:	mov    rcx,rax
 1012450:	mov    QWORD PTR [rsp+0x28],rdi
 1012455:	mov    DWORD PTR [rsp+0x20],0x400
 101245d:	lea    r9,[rbp+0x60]
 1012461:	lea    r8,[rip+0xffffffffffff06e4]        # 0x1002b4c
 1012468:	lea    rdx,[rip+0xffffffffffff0b09]        # 0x1002f78
 101246f:	call   QWORD PTR [rip+0xfffffffffffeedb3]        # 0x1001228
 1012475:	cmp    r15w,WORD PTR [rbp+0x60]
 101247a:	jne    0x1012532
 1012480:	mov    rcx,r12
 1012483:	call   QWORD PTR [rip+0xfffffffffffef65f]        # 0x1001ae8
 1012489:	mov    rdi,rax
 101248c:	lea    rcx,[rsp+0x48]
 1012491:	call   QWORD PTR [rip+0xfffffffffffef651]        # 0x1001ae8
 1012497:	mov    rcx,rax
 101249a:	mov    QWORD PTR [rsp+0x28],rdi
 101249f:	mov    DWORD PTR [rsp+0x20],0x400
 10124a7:	lea    r9,[rbp+0x60]
 10124ab:	lea    r8,[rip+0xffffffffffff0702]        # 0x1002bb4
 10124b2:	lea    rdx,[rip+0xffffffffffff0acf]        # 0x1002f88
 10124b9:	call   QWORD PTR [rip+0xfffffffffffeed69]        # 0x1001228
 10124bf:	lea    rcx,[rbp+0x60]
 10124c3:	call   QWORD PTR [rip+0xfffffffffffef277]        # 0x1001740
 10124c9:	mov    esi,eax
 10124cb:	mov    rcx,r12
 10124ce:	call   QWORD PTR [rip+0xfffffffffffef614]        # 0x1001ae8
 10124d4:	mov    rdi,rax
 10124d7:	lea    rcx,[rsp+0x48]
 10124dc:	call   QWORD PTR [rip+0xfffffffffffef606]        # 0x1001ae8
 10124e2:	mov    rcx,rax
 10124e5:	mov    QWORD PTR [rsp+0x28],rdi
 10124ea:	mov    DWORD PTR [rsp+0x20],0x400
 10124f2:	lea    r9,[rbp+0x60]
 10124f6:	lea    r8,[rip+0xffffffffffff0abb]        # 0x1002fb8
 10124fd:	lea    rdx,[rip+0xffffffffffff0abc]        # 0x1002fc0
 1012504:	call   QWORD PTR [rip+0xfffffffffffeed1e]        # 0x1001228
 101250a:	lea    rcx,[rbp+0x60]
 101250e:	call   QWORD PTR [rip+0xfffffffffffef234]        # 0x1001748
 1012514:	mov    edi,eax
 1012516:	mov    r8,QWORD PTR [rbx]
 1012519:	mov    edx,esi
 101251b:	mov    rcx,rbx
 101251e:	call   QWORD PTR [r8+0x20]
 1012522:	mov    r11,QWORD PTR [rbx]
 1012525:	mov    edx,edi
 1012527:	mov    rcx,rbx
 101252a:	call   QWORD PTR [r11+0xe8]
 1012531:	nop
 1012532:	lea    rcx,[rsp+0x68]
 1012537:	call   QWORD PTR [rip+0xfffffffffffef56b]        # 0x1001aa8
 101253d:	nop
 101253e:	lea    rcx,[rsp+0x70]
 1012543:	call   QWORD PTR [rip+0xfffffffffffef55f]        # 0x1001aa8
 1012549:	nop
 101254a:	lea    rcx,[rsp+0x78]
 101254f:	call   QWORD PTR [rip+0xfffffffffffef553]        # 0x1001aa8
 1012555:	nop
 1012556:	lea    rcx,[rsp+0x58]
 101255b:	call   QWORD PTR [rip+0xfffffffffffef547]        # 0x1001aa8
 1012561:	nop
 1012562:	lea    rcx,[rsp+0x50]
 1012567:	call   QWORD PTR [rip+0xfffffffffffef53b]        # 0x1001aa8
 101256d:	nop
 101256e:	lea    rcx,[rsp+0x40]
 1012573:	call   QWORD PTR [rip+0xfffffffffffef52f]        # 0x1001aa8
 1012579:	nop
 101257a:	lea    rcx,[rsp+0x48]
 101257f:	call   QWORD PTR [rip+0xfffffffffffef523]        # 0x1001aa8
 1012585:	nop
 1012586:	lea    rcx,[rbp-0x80]
 101258a:	call   QWORD PTR [rip+0xfffffffffffef518]        # 0x1001aa8
 1012590:	mov    al,0x1
 1012592:	mov    rcx,QWORD PTR [rbp+0x860]
 1012599:	xor    rcx,rsp
 101259c:	call   0x103ff40
 10125a1:	mov    rbx,QWORD PTR [rsp+0x9c8]
 10125a9:	add    rsp,0x970
 10125b0:	pop    r15
 10125b2:	pop    r14
 10125b4:	pop    r13
 10125b6:	pop    r12
 10125b8:	pop    rdi
 10125b9:	pop    rsi
 10125ba:	pop    rbp
 10125bb:	ret    
 10125bc:	int3   
 10125bd:	int3   
 10125be:	int3   
 10125bf:	int3   
 10125c0:	int3   
 10125c1:	int3   
 10125c2:	int3   
 10125c3:	int3   
 10125c4:	int3   
 10125c5:	int3   
 10125c6:	int3   
 10125c7:	int3   
 10125c8:	int3   
 10125c9:	int3   
 10125ca:	int3   
 10125cb:	int3   
 10125cc:	int3   
 10125cd:	int3   
 10125ce:	int3   
 10125cf:	int3   
 10125d0:	xor    al,al
 10125d2:	ret    
 10125d3:	int3   
 10125d4:	int3   
 10125d5:	int3   
 10125d6:	int3   
 10125d7:	int3   
 10125d8:	int3   
 10125d9:	int3   
 10125da:	int3   
 10125db:	int3   
 10125dc:	int3   
 10125dd:	int3   
 10125de:	int3   
 10125df:	int3   
 10125e0:	rex push rbp
 10125e2:	push   rsi
 10125e3:	push   rdi
 10125e4:	push   r12
 10125e6:	push   r13
 10125e8:	push   r14
 10125ea:	push   r15
 10125ec:	lea    rbp,[rsp-0x7a0]
 10125f4:	sub    rsp,0x8a0
 10125fb:	mov    QWORD PTR [rbp-0x80],0xfffffffffffffffe
 1012603:	mov    QWORD PTR [rsp+0x8f0],rbx
 101260b:	mov    rax,QWORD PTR [rip+0x5125e]        # 0x1063870
 1012612:	xor    rax,rsp
 1012615:	mov    QWORD PTR [rbp+0x790],rax
 101261c:	mov    rsi,rdx
 101261f:	mov    r15,rcx
 1012622:	xor    r13d,r13d
 1012625:	mov    DWORD PTR [rsp+0x40],r13d
 101262a:	lea    rcx,[rsp+0x50]
 101262f:	call   QWORD PTR [rip+0xfffffffffffef48b]        # 0x1001ac0
 1012635:	nop
 1012636:	lea    rcx,[rsp+0x48]
 101263b:	call   QWORD PTR [rip+0xfffffffffffef47f]        # 0x1001ac0
 1012641:	nop
 1012642:	lea    rcx,[rsp+0x58]
 1012647:	call   QWORD PTR [rip+0xfffffffffffef473]        # 0x1001ac0
 101264d:	nop
 101264e:	mov    r14d,r13d
 1012651:	lea    rcx,[rsp+0x60]
 1012656:	call   QWORD PTR [rip+0xfffffffffffef464]        # 0x1001ac0
 101265c:	nop
 101265d:	mov    rax,QWORD PTR [rsi]
 1012660:	mov    rcx,rsi
 1012663:	call   QWORD PTR [rax+0x110]
 1012669:	mov    edi,0x1
 101266e:	mov    ecx,edi
 1012670:	lock xadd DWORD PTR [rax],ecx
 1012674:	inc    ecx
 1012676:	cmp    ecx,edi
 1012678:	jne    0x10126ea
 101267a:	mov    rax,QWORD PTR [rsi+0x8]
 101267e:	movsxd rcx,DWORD PTR [rax+0x4]
 1012682:	mov    rbx,QWORD PTR [rcx+rsi*1+0x8]
 1012687:	add    rbx,0x20
 101268b:	mov    rax,QWORD PTR [rsi]
 101268e:	mov    rcx,rsi
 1012691:	call   QWORD PTR [rax+0xe0]
 1012697:	mov    r8,rax
 101269a:	xor    edx,edx
 101269c:	xor    ecx,ecx
 101269e:	call   0x104076e
 10126a3:	mov    edx,eax
 10126a5:	mov    rax,QWORD PTR [rsi+0x8]
 10126a9:	movsxd rcx,DWORD PTR [rax+0x4]
 10126ad:	add    rcx,0x8
 10126b1:	add    rcx,rsi
 10126b4:	movzx  r9d,dil
 10126b8:	xor    r8d,r8d
 10126bb:	call   QWORD PTR [rbx]
 10126bd:	test   al,al
 10126bf:	jne    0x10126ea
 10126c1:	lea    rcx,[rsp+0x60]
 10126c6:	call   QWORD PTR [rip+0xfffffffffffef3dc]        # 0x1001aa8
 10126cc:	nop
 10126cd:	lea    rcx,[rsp+0x58]
 10126d2:	call   QWORD PTR [rip+0xfffffffffffef3d0]        # 0x1001aa8
 10126d8:	nop
 10126d9:	lea    rcx,[rsp+0x48]
 10126de:	call   QWORD PTR [rip+0xfffffffffffef3c4]        # 0x1001aa8
 10126e4:	nop
 10126e5:	jmp    0x101297f
 10126ea:	mov    rax,QWORD PTR [rsi]
 10126ed:	lea    rdx,[rsp+0x78]
 10126f2:	mov    rcx,rsi
 10126f5:	call   QWORD PTR [rax+0x108]
 10126fb:	nop
 10126fc:	mov    rdx,rax
 10126ff:	lea    rcx,[rsp+0x60]
 1012704:	call   QWORD PTR [rip+0xfffffffffffef396]        # 0x1001aa0
 101270a:	nop
 101270b:	lea    rcx,[rsp+0x78]
 1012710:	call   QWORD PTR [rip+0xfffffffffffef392]        # 0x1001aa8
 1012716:	mov    r11,QWORD PTR [rsi]
 1012719:	lea    rdx,[rsp+0x70]
 101271e:	mov    rcx,rsi
 1012721:	call   QWORD PTR [r11+0x70]
 1012725:	nop
 1012726:	mov    DWORD PTR [rsp+0x40],edi
 101272a:	mov    rcx,rax
 101272d:	call   QWORD PTR [rip+0xfffffffffffef3bd]        # 0x1001af0
 1012733:	test   eax,eax
 1012735:	je     0x1012792
 1012737:	mov    rax,QWORD PTR [rsi]
 101273a:	lea    rdx,[rsp+0x68]
 101273f:	mov    rcx,rsi
 1012742:	call   QWORD PTR [rax+0x70]
 1012745:	nop
 1012746:	mov    edi,0x3
 101274b:	mov    DWORD PTR [rsp+0x40],edi
 101274f:	mov    rcx,QWORD PTR [rsi+0x8]
 1012753:	movsxd rdx,DWORD PTR [rcx+0x4]
 1012757:	mov    rbx,QWORD PTR [rdx+rsi*1+0x8]
 101275c:	add    rbx,0x20
 1012760:	mov    rcx,rax
 1012763:	call   QWORD PTR [rip+0xfffffffffffef37f]        # 0x1001ae8
 1012769:	mov    rcx,rax
 101276c:	call   0x104077a
 1012771:	mov    edx,eax
 1012773:	mov    rax,QWORD PTR [rsi+0x8]
 1012777:	movsxd rcx,DWORD PTR [rax+0x4]
 101277b:	add    rcx,0x8
 101277f:	add    rcx,rsi
 1012782:	mov    r9b,0x1
 1012785:	xor    r8d,r8d
 1012788:	call   QWORD PTR [rbx]
 101278a:	test   al,al
 101278c:	je     0x1012792
 101278e:	mov    bl,0x1
 1012790:	jmp    0x1012794
 1012792:	xor    bl,bl
 1012794:	test   dil,0x2
 1012798:	je     0x10127ad
 101279a:	and    edi,0xfffffffd
 101279d:	mov    DWORD PTR [rsp+0x40],edi
 10127a1:	lea    rcx,[rsp+0x68]
 10127a6:	call   QWORD PTR [rip+0xfffffffffffef2fc]        # 0x1001aa8
 10127ac:	nop
 10127ad:	test   dil,0x1
 10127b1:	je     0x10127c5
 10127b3:	and    edi,0xfffffffe
 10127b6:	mov    DWORD PTR [rsp+0x40],edi
 10127ba:	lea    rcx,[rsp+0x70]
 10127bf:	call   QWORD PTR [rip+0xfffffffffffef2e3]        # 0x1001aa8
 10127c5:	test   bl,bl
 10127c7:	je     0x101295b
 10127cd:	mov    rax,QWORD PTR [rsi]
 10127d0:	mov    rcx,rsi
 10127d3:	call   QWORD PTR [rax+0xf8]
 10127d9:	test   eax,eax
 10127db:	jne    0x1012928
 10127e1:	lea    r12d,[rax+0x2b]
 10127e5:	data16 data16 nop WORD PTR [rax+rax*1+0x0]
 10127f0:	mov    r8d,r14d
 10127f3:	lea    rdx,[rip+0xffffffffffff02a6]        # 0x1002aa0
 10127fa:	lea    rcx,[rsp+0x48]
 10127ff:	call   QWORD PTR [rip+0xfffffffffffef23b]        # 0x1001a40
 1012805:	inc    r14d
 1012808:	lea    rcx,[r15+0x8]
 101280c:	call   QWORD PTR [rip+0xfffffffffffef2d6]        # 0x1001ae8
 1012812:	mov    rbx,rax
 1012815:	lea    rcx,[rsp+0x48]
 101281a:	call   QWORD PTR [rip+0xfffffffffffef2c8]        # 0x1001ae8
 1012820:	mov    rdi,rax
 1012823:	lea    rcx,[rsp+0x60]
 1012828:	call   QWORD PTR [rip+0xfffffffffffef2ba]        # 0x1001ae8
 101282e:	mov    rcx,rax
 1012831:	mov    QWORD PTR [rsp+0x28],rbx
 1012836:	mov    DWORD PTR [rsp+0x20],0x400
 101283e:	lea    r9,[rbp-0x70]
 1012842:	lea    r8,[rip+0xfffffffffffef5c7]        # 0x1001e10
 1012849:	mov    rdx,rdi
 101284c:	call   QWORD PTR [rip+0xfffffffffffee9d6]        # 0x1001228
 1012852:	movzx  eax,WORD PTR [rbp-0x70]
 1012856:	cmp    r13w,ax
 101285a:	je     0x1012928
 1012860:	cmp    r12w,ax
 1012864:	jne    0x1012914
 101286a:	lea    rdx,[rbp-0x6e]
 101286e:	lea    rcx,[rsp+0x50]
 1012873:	call   QWORD PTR [rip+0xfffffffffffef21f]        # 0x1001a98
 1012879:	mov    rbx,QWORD PTR [rsi]
 101287c:	lea    rcx,[rsp+0x50]
 1012881:	call   QWORD PTR [rip+0xfffffffffffef261]        # 0x1001ae8
 1012887:	mov    rdx,rax
 101288a:	mov    rcx,rsi
 101288d:	call   QWORD PTR [rbx+0x60]
 1012890:	mov    eax,0x66666667
 1012895:	imul   r14d
 1012898:	sar    edx,0x2
 101289b:	mov    eax,edx
 101289d:	shr    eax,0x1f
 10128a0:	add    edx,eax
 10128a2:	lea    ecx,[rdx+rdx*4]
 10128a5:	add    ecx,ecx
 10128a7:	cmp    r14d,ecx
 10128aa:	jne    0x10128b4
 10128ac:	xor    ecx,ecx
 10128ae:	call   QWORD PTR [rip+0xfffffffffffeec94]        # 0x1001548
 10128b4:	mov    r9,QWORD PTR [rsp+0x50]
 10128b9:	mov    r8,QWORD PTR [rsp+0x48]
 10128be:	lea    rdx,[rip+0xffffffffffff01f3]        # 0x1002ab8
 10128c5:	lea    rcx,[rsp+0x58]
 10128ca:	call   QWORD PTR [rip+0xfffffffffffef170]        # 0x1001a40
 10128d0:	mov    rax,QWORD PTR [rsi+0x8]
 10128d4:	movsxd rcx,DWORD PTR [rax+0x4]
 10128d8:	mov    rbx,QWORD PTR [rcx+rsi*1+0x8]
 10128dd:	lea    rcx,[rsp+0x58]
 10128e2:	call   QWORD PTR [rip+0xfffffffffffef200]        # 0x1001ae8
 10128e8:	mov    r8,rax
 10128eb:	mov    rax,QWORD PTR [rsi+0x8]
 10128ef:	movsxd rcx,DWORD PTR [rax+0x4]
 10128f3:	add    rcx,0x8
 10128f7:	add    rcx,rsi
 10128fa:	mov    BYTE PTR [rsp+0x30],0x1
 10128ff:	mov    BYTE PTR [rsp+0x28],0x1
 1012904:	mov    DWORD PTR [rsp+0x20],r13d
 1012909:	mov    r9b,0x1
 101290c:	mov    edx,0x4000c484
 1012911:	call   QWORD PTR [rbx+0x8]
 1012914:	mov    rax,QWORD PTR [rsi]
 1012917:	mov    rcx,rsi
 101291a:	call   QWORD PTR [rax+0xf8]
 1012920:	test   eax,eax
 1012922:	je     0x10127f0
 1012928:	lea    rcx,[rsp+0x60]
 101292d:	call   QWORD PTR [rip+0xfffffffffffef175]        # 0x1001aa8
 1012933:	nop
 1012934:	lea    rcx,[rsp+0x58]
 1012939:	call   QWORD PTR [rip+0xfffffffffffef169]        # 0x1001aa8
 101293f:	nop
 1012940:	lea    rcx,[rsp+0x48]
 1012945:	call   QWORD PTR [rip+0xfffffffffffef15d]        # 0x1001aa8
 101294b:	nop
 101294c:	lea    rcx,[rsp+0x50]
 1012951:	call   QWORD PTR [rip+0xfffffffffffef151]        # 0x1001aa8
 1012957:	mov    al,0x1
 1012959:	jmp    0x101298c
 101295b:	lea    rcx,[rsp+0x60]
 1012960:	call   QWORD PTR [rip+0xfffffffffffef142]        # 0x1001aa8
 1012966:	nop
 1012967:	lea    rcx,[rsp+0x58]
 101296c:	call   QWORD PTR [rip+0xfffffffffffef136]        # 0x1001aa8
 1012972:	nop
 1012973:	lea    rcx,[rsp+0x48]
 1012978:	call   QWORD PTR [rip+0xfffffffffffef12a]        # 0x1001aa8
 101297e:	nop
 101297f:	lea    rcx,[rsp+0x50]
 1012984:	call   QWORD PTR [rip+0xfffffffffffef11e]        # 0x1001aa8
 101298a:	xor    al,al
 101298c:	mov    rcx,QWORD PTR [rbp+0x790]
 1012993:	xor    rcx,rsp
 1012996:	call   0x103ff40
 101299b:	mov    rbx,QWORD PTR [rsp+0x8f0]
 10129a3:	add    rsp,0x8a0
 10129aa:	pop    r15
 10129ac:	pop    r14
 10129ae:	pop    r13
 10129b0:	pop    r12
 10129b2:	pop    rdi
 10129b3:	pop    rsi
 10129b4:	pop    rbp
 10129b5:	ret    
 10129b6:	int3   
 10129b7:	int3   
 10129b8:	int3   
 10129b9:	int3   
 10129ba:	int3   
 10129bb:	int3   
 10129bc:	int3   
 10129bd:	int3   
 10129be:	int3   
 10129bf:	int3   
 10129c0:	mov    QWORD PTR [rsp+0x8],rcx
 10129c5:	push   rdi
 10129c6:	sub    rsp,0x30
 10129ca:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 10129d3:	mov    QWORD PTR [rsp+0x48],rbx
 10129d8:	mov    ebx,edx
 10129da:	mov    rdi,rcx
 10129dd:	lea    rax,[rip+0xffffffffffff0004]        # 0x10029e8
 10129e4:	mov    QWORD PTR [rcx],rax
 10129e7:	add    rcx,0x8
 10129eb:	call   QWORD PTR [rip+0xfffffffffffef0b7]        # 0x1001aa8
 10129f1:	nop
 10129f2:	mov    rcx,rdi
 10129f5:	call   0x100e5d0
 10129fa:	test   bl,0x1
 10129fd:	je     0x1012a07
 10129ff:	mov    rcx,rdi
 1012a02:	call   0x103f95a
 1012a07:	mov    rax,rdi
 1012a0a:	mov    rbx,QWORD PTR [rsp+0x48]
 1012a0f:	add    rsp,0x30
 1012a13:	pop    rdi
 1012a14:	ret    
 1012a15:	int3   
 1012a16:	int3   
 1012a17:	int3   
 1012a18:	int3   
 1012a19:	int3   
 1012a1a:	int3   
 1012a1b:	int3   
 1012a1c:	int3   
 1012a1d:	int3   
 1012a1e:	int3   
 1012a1f:	int3   
 1012a20:	rex push rsi
 1012a22:	push   rdi
 1012a23:	push   r14
 1012a25:	sub    rsp,0x30
 1012a29:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1012a32:	mov    QWORD PTR [rsp+0x58],rbx
 1012a37:	mov    QWORD PTR [rsp+0x60],rbp
 1012a3c:	mov    rdi,rcx
 1012a3f:	xor    r14d,r14d
 1012a42:	cmp    QWORD PTR [rcx+0x8],r14
 1012a46:	je     0x1012aac
 1012a48:	mov    esi,r14d
 1012a4b:	cmp    DWORD PTR [rcx+0x10],r14d
 1012a4f:	jbe    0x1012a9f
 1012a51:	mov    ebp,r14d
 1012a54:	data16 data16 data16 nop WORD PTR [rax+rax*1+0x0]
 1012a60:	mov    rbx,QWORD PTR [rdi+0x8]
 1012a64:	mov    rbx,QWORD PTR [rbx+rbp*1]
 1012a68:	mov    QWORD PTR [rsp+0x50],rbx
 1012a6d:	test   rbx,rbx
 1012a70:	je     0x1012a94
 1012a72:	lea    rcx,[rbx+0x8]
 1012a76:	call   QWORD PTR [rip+0xfffffffffffef02c]        # 0x1001aa8
 1012a7c:	nop
 1012a7d:	mov    rcx,rbx
 1012a80:	call   QWORD PTR [rip+0xfffffffffffef022]        # 0x1001aa8
 1012a86:	mov    rbx,QWORD PTR [rbx+0x10]
 1012a8a:	mov    QWORD PTR [rsp+0x50],rbx
 1012a8f:	test   rbx,rbx
 1012a92:	jne    0x1012a72
 1012a94:	inc    esi
 1012a96:	add    rbp,0x8
 1012a9a:	cmp    esi,DWORD PTR [rdi+0x10]
 1012a9d:	jb     0x1012a60
 1012a9f:	mov    rcx,QWORD PTR [rdi+0x8]
 1012aa3:	call   0x103f9c6
 1012aa8:	mov    QWORD PTR [rdi+0x8],r14
 1012aac:	mov    QWORD PTR [rdi+0x18],r14
 1012ab0:	mov    QWORD PTR [rdi+0x20],r14
 1012ab4:	mov    rcx,QWORD PTR [rdi+0x28]
 1012ab8:	call   0x103f9ae
 1012abd:	mov    QWORD PTR [rdi+0x28],r14
 1012ac1:	mov    rbx,QWORD PTR [rsp+0x58]
 1012ac6:	mov    rbp,QWORD PTR [rsp+0x60]
 1012acb:	add    rsp,0x30
 1012acf:	pop    r14
 1012ad1:	pop    rdi
 1012ad2:	pop    rsi
 1012ad3:	ret    
 1012ad4:	int3   
 1012ad5:	int3   
 1012ad6:	int3   
 1012ad7:	int3   
 1012ad8:	int3   
 1012ad9:	int3   
 1012ada:	int3   
 1012adb:	int3   
 1012adc:	int3   
 1012add:	int3   
 1012ade:	int3   
 1012adf:	int3   
 1012ae0:	lea    rax,[rip+0xfffffffffffeff59]        # 0x1002a40
 1012ae7:	mov    QWORD PTR [rcx],rax
 1012aea:	jmp    0x1012a20
 1012aef:	int3   
 1012af0:	int3   
 1012af1:	int3   
 1012af2:	int3   
 1012af3:	int3   
 1012af4:	int3   
 1012af5:	int3   
 1012af6:	int3   
 1012af7:	int3   
 1012af8:	int3   
 1012af9:	int3   
 1012afa:	int3   
 1012afb:	int3   
 1012afc:	int3   
 1012afd:	int3   
 1012afe:	int3   
 1012aff:	int3   
 1012b00:	rex push rsi
 1012b02:	push   rdi
 1012b03:	push   r14
 1012b05:	sub    rsp,0x40
 1012b09:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
 1012b12:	mov    QWORD PTR [rsp+0x60],rbx
 1012b17:	mov    QWORD PTR [rsp+0x78],rbp
 1012b1c:	mov    rdi,rdx
 1012b1f:	mov    rbp,rcx
 1012b22:	mov    eax,DWORD PTR [rdx+0x20]
 1012b25:	not    eax
 1012b27:	test   al,0x1
 1012b29:	je     0x1012b9c
 1012b2b:	mov    rdx,QWORD PTR [rcx+0x18]
 1012b2f:	mov    rcx,rdi
 1012b32:	call   0x103f996
 1012b37:	cmp    QWORD PTR [rbp+0x18],0x0
 1012b3c:	je     0x1012c93
 1012b42:	xor    esi,esi
 1012b44:	cmp    DWORD PTR [rbp+0x10],esi
 1012b47:	jbe    0x1012c93
 1012b4d:	mov    r14d,esi
 1012b50:	mov    rbx,QWORD PTR [rbp+0x8]
 1012b54:	mov    rbx,QWORD PTR [r14+rbx*1]
 1012b58:	test   rbx,rbx
 1012b5b:	je     0x1012b8c
 1012b5d:	nop    DWORD PTR [rax]
 1012b60:	mov    r8d,0x1
 1012b66:	mov    rdx,rbx
 1012b69:	mov    rcx,rdi
 1012b6c:	call   0x103fa1a
 1012b71:	lea    rdx,[rbx+0x8]
 1012b75:	mov    r8d,0x1
 1012b7b:	mov    rcx,rdi
 1012b7e:	call   0x103fa1a
 1012b83:	mov    rbx,QWORD PTR [rbx+0x10]
 1012b87:	test   rbx,rbx
 1012b8a:	jne    0x1012b60
 1012b8c:	inc    esi
 1012b8e:	add    r14,0x8
 1012b92:	cmp    esi,DWORD PTR [rbp+0x10]
 1012b95:	jb     0x1012b50
 1012b97:	jmp    0x1012c93
 1012b9c:	mov    rcx,rdx
 1012b9f:	call   0x103f98a
 1012ba4:	mov    rsi,rax
 1012ba7:	test   rax,rax
 1012baa:	je     0x1012c93
 1012bb0:	mov    rcx,QWORD PTR [rip+0xfffffffffffeeef1]        # 0x1001aa8
 1012bb7:	mov    QWORD PTR [rsp+0x20],rcx
 1012bbc:	mov    r9,QWORD PTR [rip+0xfffffffffffeeefd]        # 0x1001ac0
 1012bc3:	mov    edx,0x8
 1012bc8:	lea    r8d,[rdx-0x7]
 1012bcc:	lea    rcx,[rsp+0x70]
 1012bd1:	call   0x103ffd8
 1012bd6:	nop
 1012bd7:	mov    rax,QWORD PTR [rip+0xfffffffffffeeeca]        # 0x1001aa8
 1012bde:	mov    QWORD PTR [rsp+0x20],rax
 1012be3:	mov    r9,QWORD PTR [rip+0xfffffffffffeeed6]        # 0x1001ac0
 1012bea:	mov    edx,0x8
 1012bef:	lea    r8d,[rdx-0x7]
 1012bf3:	lea    rcx,[rsp+0x68]
 1012bf8:	call   0x103ffd8
 1012bfd:	nop
 1012bfe:	mov    r8d,0x1
 1012c04:	lea    rdx,[rsp+0x70]
 1012c09:	mov    rcx,rdi
 1012c0c:	call   0x103fa1a
 1012c11:	mov    r8d,0x1
 1012c17:	lea    rdx,[rsp+0x68]
 1012c1c:	mov    rcx,rdi
 1012c1f:	call   0x103fa1a
 1012c24:	lea    rcx,[rsp+0x68]
 1012c29:	call   QWORD PTR [rip+0xfffffffffffeeeb9]        # 0x1001ae8
 1012c2f:	mov    rbx,rax
 1012c32:	lea    rcx,[rsp+0x70]
 1012c37:	call   QWORD PTR [rip+0xfffffffffffeeeab]        # 0x1001ae8
 1012c3d:	mov    rdx,rax
 1012c40:	mov    rcx,rbp
 1012c43:	call   0x100ea00
 1012c48:	mov    rcx,rax
 1012c4b:	mov    rdx,rbx
 1012c4e:	call   QWORD PTR [rip+0xfffffffffffeee44]        # 0x1001a98
 1012c54:	nop
 1012c55:	mov    r9,QWORD PTR [rip+0xfffffffffffeee4c]        # 0x1001aa8
 1012c5c:	mov    edx,0x8
 1012c61:	lea    r8d,[rdx-0x7]
 1012c65:	lea    rcx,[rsp+0x68]
 1012c6a:	call   0x1040094
 1012c6f:	nop
 1012c70:	mov    r9,QWORD PTR [rip+0xfffffffffffeee31]        # 0x1001aa8
 1012c77:	mov    edx,0x8
 1012c7c:	lea    r8d,[rdx-0x7]
 1012c80:	lea    rcx,[rsp+0x70]
 1012c85:	call   0x1040094
 1012c8a:	dec    rsi
 1012c8d:	jne    0x1012bb0
 1012c93:	mov    rbx,QWORD PTR [rsp+0x60]
 1012c98:	mov    rbp,QWORD PTR [rsp+0x78]
 1012c9d:	add    rsp,0x40
 1012ca1:	pop    r14
 1012ca3:	pop    rdi
 1012ca4:	pop    rsi
 1012ca5:	ret    
 1012ca6:	int3   
 1012ca7:	int3   
 1012ca8:	int3   
 1012ca9:	int3   
 1012caa:	int3   
 1012cab:	int3   
 1012cac:	int3   
 1012cad:	int3   
 1012cae:	int3   
 1012caf:	int3   
 1012cb0:	mov    QWORD PTR [rsp+0x8],rbx
 1012cb5:	push   rdi
 1012cb6:	sub    rsp,0x20
 1012cba:	lea    rax,[rip+0xfffffffffffefd7f]        # 0x1002a40
 1012cc1:	mov    ebx,edx
 1012cc3:	mov    rdi,rcx
 1012cc6:	mov    QWORD PTR [rcx],rax
 1012cc9:	call   0x1012a20
 1012cce:	test   bl,0x1
 1012cd1:	je     0x1012cdb
 1012cd3:	mov    rcx,rdi
 1012cd6:	call   0x103f95a
 1012cdb:	mov    rax,rdi
 1012cde:	mov    rbx,QWORD PTR [rsp+0x30]
 1012ce3:	add    rsp,0x20
 1012ce7:	pop    rdi
 1012ce8:	ret    
 1012ce9:	int3   
 1012cea:	int3   
 1012ceb:	int3   
 1012cec:	int3   
 1012ced:	int3   
 1012cee:	int3   
 1012cef:	int3   
 1012cf0:	mov    QWORD PTR [rsp+0x8],rcx
 1012cf5:	push   rdi
 1012cf6:	push   r14
 1012cf8:	push   r15
 1012cfa:	sub    rsp,0x30
 1012cfe:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1012d07:	mov    QWORD PTR [rsp+0x58],rbx
 1012d0c:	mov    QWORD PTR [rsp+0x60],rbp
 1012d11:	mov    QWORD PTR [rsp+0x68],rsi
 1012d16:	mov    r14,r9
 1012d19:	mov    ebp,r8d
 1012d1c:	mov    rdi,rdx
 1012d1f:	mov    r15,rcx
 1012d22:	add    rcx,0x10
 1012d26:	call   QWORD PTR [rip+0xfffffffffffeed94]        # 0x1001ac0
 1012d2c:	nop
 1012d2d:	lea    rcx,[r15+0x20]
 1012d31:	call   QWORD PTR [rip+0xfffffffffffeed89]        # 0x1001ac0
 1012d37:	nop
 1012d38:	lea    rdx,[rip+0xffffffffffff0439]        # 0x1003178
 1012d3f:	mov    rcx,rdi
 1012d42:	call   QWORD PTR [rip+0xfffffffffffee988]        # 0x10016d0
 1012d48:	lea    rcx,[rip+0xfffffffffffef0c1]        # 0x1001e10
 1012d4f:	test   eax,eax
 1012d51:	cmove  rdi,rcx
 1012d55:	mov    rdx,rdi
 1012d58:	lea    rcx,[r15+0x20]
 1012d5c:	call   QWORD PTR [rip+0xfffffffffffeed36]        # 0x1001a98
 1012d62:	mov    DWORD PTR [r15],ebp
 1012d65:	mov    rdx,r14
 1012d68:	lea    rcx,[r15+0x10]
 1012d6c:	call   QWORD PTR [rip+0xfffffffffffeed26]        # 0x1001a98
 1012d72:	movzx  r11d,BYTE PTR [rsp+0x70]
 1012d78:	mov    BYTE PTR [r15+0x8],r11b
 1012d7c:	mov    eax,DWORD PTR [rsp+0x78]
 1012d80:	mov    DWORD PTR [r15+0x4],eax
 1012d84:	mov    rax,QWORD PTR [rsp+0x80]
 1012d8c:	mov    QWORD PTR [r15+0x18],rax
 1012d90:	mov    rax,r15
 1012d93:	mov    rbx,QWORD PTR [rsp+0x58]
 1012d98:	mov    rbp,QWORD PTR [rsp+0x60]
 1012d9d:	mov    rsi,QWORD PTR [rsp+0x68]
 1012da2:	add    rsp,0x30
 1012da6:	pop    r15
 1012da8:	pop    r14
 1012daa:	pop    rdi
 1012dab:	ret    
 1012dac:	int3   
 1012dad:	int3   
 1012dae:	int3   
 1012daf:	int3   
 1012db0:	int3   
 1012db1:	int3   
 1012db2:	int3   
 1012db3:	int3   
 1012db4:	int3   
 1012db5:	int3   
 1012db6:	int3   
 1012db7:	int3   
 1012db8:	int3   
 1012db9:	int3   
 1012dba:	int3   
 1012dbb:	int3   
 1012dbc:	int3   
 1012dbd:	int3   
 1012dbe:	int3   
 1012dbf:	int3   
 1012dc0:	mov    QWORD PTR [rsp+0x8],rcx
 1012dc5:	push   rbx
 1012dc6:	sub    rsp,0x30
 1012dca:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1012dd3:	mov    rbx,rcx
 1012dd6:	add    rcx,0x20
 1012dda:	call   QWORD PTR [rip+0xfffffffffffeecc8]        # 0x1001aa8
 1012de0:	nop
 1012de1:	lea    rcx,[rbx+0x10]
 1012de5:	add    rsp,0x30
 1012de9:	pop    rbx
 1012dea:	rex.W jmp QWORD PTR [rip+0xfffffffffffeecb7]        # 0x1001aa8
 1012df1:	int3   
 1012df2:	int3   
 1012df3:	int3   
 1012df4:	int3   
 1012df5:	int3   
 1012df6:	int3   
 1012df7:	int3   
 1012df8:	int3   
 1012df9:	int3   
 1012dfa:	int3   
 1012dfb:	int3   
 1012dfc:	int3   
 1012dfd:	int3   
 1012dfe:	int3   
 1012dff:	int3   
 1012e00:	mov    QWORD PTR [rsp+0x10],rdx
 1012e05:	push   rbx
 1012e06:	sub    rsp,0x30
 1012e0a:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
 1012e13:	mov    rbx,rdx
 1012e16:	mov    DWORD PTR [rsp+0x20],0x0
 1012e1e:	lea    rdx,[rcx+0x20]
 1012e22:	mov    rcx,rbx
 1012e25:	call   QWORD PTR [rip+0xfffffffffffeeb8d]        # 0x10019b8
 1012e2b:	nop
 1012e2c:	mov    DWORD PTR [rsp+0x20],0x1
 1012e34:	mov    rax,rbx
 1012e37:	add    rsp,0x30
 1012e3b:	pop    rbx
 1012e3c:	ret    
 1012e3d:	int3   
 1012e3e:	int3   
 1012e3f:	int3   
 1012e40:	int3   
 1012e41:	int3   
 1012e42:	int3   
 1012e43:	int3   
 1012e44:	int3   
 1012e45:	int3   
 1012e46:	int3   
 1012e47:	int3   
 1012e48:	int3   
 1012e49:	int3   
 1012e4a:	int3   
 1012e4b:	int3   
 1012e4c:	int3   
 1012e4d:	int3   
 1012e4e:	int3   
 1012e4f:	int3   
 1012e50:	rex push rdi
 1012e52:	sub    rsp,0x8a0
 1012e59:	mov    QWORD PTR [rsp+0x40],0xfffffffffffffffe
 1012e62:	mov    QWORD PTR [rsp+0x8c0],rbx
 1012e6a:	mov    rax,QWORD PTR [rip+0x509ff]        # 0x1063870
 1012e71:	xor    rax,rsp
 1012e74:	mov    QWORD PTR [rsp+0x890],rax
 1012e7c:	mov    rbx,rdx
 1012e7f:	mov    rdi,rcx
 1012e82:	mov    QWORD PTR [rsp+0x48],rdx
 1012e87:	mov    DWORD PTR [rsp+0x30],0x0
 1012e8f:	add    rcx,0x20
 1012e93:	call   QWORD PTR [rip+0xfffffffffffeec57]        # 0x1001af0
 1012e99:	test   eax,eax
 1012e9b:	jne    0x1012f08
 1012e9d:	mov    rax,QWORD PTR [rip+0xffffffffffff02ec]        # 0x1003190
 1012ea4:	mov    QWORD PTR [rsp+0x50],rax
 1012ea9:	mov    rax,QWORD PTR [rip+0xffffffffffff02e8]        # 0x1003198
 1012eb0:	mov    QWORD PTR [rsp+0x58],rax
 1012eb5:	mov    rax,QWORD PTR [rip+0xffffffffffff02e4]        # 0x10031a0
 1012ebc:	mov    QWORD PTR [rsp+0x60],rax
 1012ec1:	mov    rax,QWORD PTR [rip+0xffffffffffff02e0]        # 0x10031a8
 1012ec8:	mov    QWORD PTR [rsp+0x68],rax
 1012ecd:	mov    eax,DWORD PTR [rip+0xffffffffffff02dd]        # 0x10031b0
 1012ed3:	mov    DWORD PTR [rsp+0x70],eax
 1012ed7:	movzx  eax,WORD PTR [rip+0xffffffffffff02d6]        # 0x10031b4
 1012ede:	mov    WORD PTR [rsp+0x74],ax
 1012ee3:	mov    eax,DWORD PTR [rdi+0x4]
 1012ee6:	mov    DWORD PTR [rsp+0x20],eax
 1012eea:	lea    r9,[rsp+0x50]
 1012eef:	mov    edx,0x401
 1012ef4:	lea    r8d,[rdx-0x1]
 1012ef8:	lea    rcx,[rsp+0x80]
 1012f00:	call   QWORD PTR [rip+0xfffffffffffee84a]        # 0x1001750
 1012f06:	jmp    0x1012f71
 1012f08:	mov    rax,QWORD PTR [rip+0xffffffffffff02a9]        # 0x10031b8
 1012f0f:	mov    QWORD PTR [rsp+0x50],rax
 1012f14:	mov    rax,QWORD PTR [rip+0xffffffffffff02a5]        # 0x10031c0
 1012f1b:	mov    QWORD PTR [rsp+0x58],rax
 1012f20:	mov    rax,QWORD PTR [rip+0xffffffffffff02a1]        # 0x10031c8
 1012f27:	mov    QWORD PTR [rsp+0x60],rax
 1012f2c:	lea    rdx,[rsp+0x38]
 1012f31:	mov    rcx,rdi
 1012f34:	call   0x1012e00
 1012f39:	nop
 1012f3a:	mov    ecx,DWORD PTR [rdi+0x4]
 1012f3d:	mov    DWORD PTR [rsp+0x28],ecx
 1012f41:	mov    rax,QWORD PTR [rax]
 1012f44:	mov    QWORD PTR [rsp+0x20],rax
 1012f49:	lea    r9,[rsp+0x50]
 1012f4e:	mov    edx,0x401
 1012f53:	lea    r8d,[rdx-0x1]
 1012f57:	lea    rcx,[rsp+0x80]
 1012f5f:	call   QWORD PTR [rip+0xfffffffffffee7eb]        # 0x1001750
 1012f65:	nop
 1012f66:	lea    rcx,[rsp+0x38]
 1012f6b:	call   QWORD PTR [rip+0xfffffffffffeeb37]        # 0x1001aa8
 1012f71:	lea    rdx,[rsp+0x80]
 1012f79:	mov    rcx,rbx
 1012f7c:	call   QWORD PTR [rip+0xfffffffffffeeb2e]        # 0x1001ab0
 1012f82:	mov    DWORD PTR [rsp+0x30],0x1
 1012f8a:	mov    rax,rbx
 1012f8d:	mov    rcx,QWORD PTR [rsp+0x890]
 1012f95:	xor    rcx,rsp
 1012f98:	call   0x103ff40
 1012f9d:	mov    rbx,QWORD PTR [rsp+0x8c0]
 1012fa5:	add    rsp,0x8a0
 1012fac:	pop    rdi
 1012fad:	ret    
 1012fae:	int3   
 1012faf:	int3   
 1012fb0:	int3   
 1012fb1:	int3   
 1012fb2:	int3   
 1012fb3:	int3   
 1012fb4:	int3   
 1012fb5:	int3   
 1012fb6:	int3   
 1012fb7:	int3   
 1012fb8:	int3   
 1012fb9:	int3   
 1012fba:	int3   
 1012fbb:	int3   
 1012fbc:	int3   
 1012fbd:	int3   
 1012fbe:	int3   
 1012fbf:	int3   
 1012fc0:	sub    rsp,0x28
 1012fc4:	add    rcx,0x20
 1012fc8:	call   QWORD PTR [rip+0xfffffffffffeeb22]        # 0x1001af0
 1012fce:	test   eax,eax
 1012fd0:	sete   al
 1012fd3:	add    rsp,0x28
 1012fd7:	ret    
 1012fd8:	int3   
 1012fd9:	int3   
 1012fda:	int3   
 1012fdb:	int3   
 1012fdc:	int3   
 1012fdd:	int3   
 1012fde:	int3   
 1012fdf:	int3   
 1012fe0:	rex push rdi
 1012fe2:	sub    rsp,0x30
 1012fe6:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1012fef:	mov    QWORD PTR [rsp+0x48],rbx
 1012ff4:	mov    rdi,rdx
 1012ff7:	mov    rbx,rcx
 1012ffa:	lea    rdx,[rip+0xffffffffffff0177]        # 0x1003178
 1013001:	mov    rcx,rdi
 1013004:	call   QWORD PTR [rip+0xfffffffffffee6c6]        # 0x10016d0
 101300a:	lea    rcx,[rip+0xfffffffffffeedff]        # 0x1001e10
 1013011:	test   eax,eax
 1013013:	cmove  rdi,rcx
 1013017:	mov    rdx,rdi
 101301a:	lea    rcx,[rsp+0x40]
 101301f:	call   QWORD PTR [rip+0xfffffffffffeea8b]        # 0x1001ab0
 1013025:	nop
 1013026:	test   rbx,rbx
 1013029:	je     0x1013067
 101302b:	nop    DWORD PTR [rax+rax*1+0x0]
 1013030:	lea    rcx,[rsp+0x40]
 1013035:	call   QWORD PTR [rip+0xfffffffffffeeaad]        # 0x1001ae8
 101303b:	mov    rdx,rax
 101303e:	lea    rcx,[rbx+0x20]
 1013042:	call   QWORD PTR [rip+0xfffffffffffeea18]        # 0x1001a60
 1013048:	test   eax,eax
 101304a:	je     0x1013057
 101304c:	mov    rbx,QWORD PTR [rbx+0x18]
 1013050:	test   rbx,rbx
 1013053:	jne    0x1013030
 1013055:	jmp    0x1013067
 1013057:	lea    rcx,[rsp+0x40]
 101305c:	call   QWORD PTR [rip+0xfffffffffffeea46]        # 0x1001aa8
 1013062:	mov    rax,rbx
 1013065:	jmp    0x1013074
 1013067:	lea    rcx,[rsp+0x40]
 101306c:	call   QWORD PTR [rip+0xfffffffffffeea36]        # 0x1001aa8
 1013072:	xor    eax,eax
 1013074:	mov    rbx,QWORD PTR [rsp+0x48]
 1013079:	add    rsp,0x30
 101307d:	pop    rdi
 101307e:	ret    
 101307f:	int3   
 1013080:	int3   
 1013081:	int3   
 1013082:	int3   
 1013083:	int3   
 1013084:	int3   
 1013085:	int3   
 1013086:	int3   
 1013087:	int3   
 1013088:	int3   
 1013089:	int3   
 101308a:	int3   
 101308b:	int3   
 101308c:	int3   
 101308d:	int3   
 101308e:	int3   
 101308f:	int3   
 1013090:	mov    QWORD PTR [rsp+0x8],rcx
 1013095:	push   rbx
 1013096:	sub    rsp,0x50
 101309a:	mov    ebx,edx
 101309c:	call   0x1013130
 10130a1:	test   eax,eax
 10130a3:	jne    0x101311a
 10130a5:	lea    rdx,[rip+0x503a4]        # 0x1063450
 10130ac:	xor    ecx,ecx
 10130ae:	mov    QWORD PTR [rsp+0x68],rdi
 10130b3:	call   QWORD PTR [rip+0xfffffffffffedf57]        # 0x1001010
 10130b9:	mov    rdi,rax
 10130bc:	test   rax,rax
 10130bf:	je     0x1013115
 10130c1:	mov    r9d,0x1
 10130c7:	dec    ebx
 10130c9:	je     0x10130d2
 10130cb:	mov    ecx,r9d
 10130ce:	dec    ebx
 10130d0:	je     0x10130d7
 10130d2:	mov    ecx,0x4
 10130d7:	xor    edx,edx
 10130d9:	lea    rax,[rsp+0x60]
 10130de:	xor    r8d,r8d
 10130e1:	mov    QWORD PTR [rsp+0x40],rdx
 10130e6:	mov    QWORD PTR [rsp+0x38],rax
 10130eb:	mov    DWORD PTR [rsp+0x30],edx
 10130ef:	mov    WORD PTR [rsp+0x28],r9w
 10130f5:	mov    QWORD PTR [rsp+0x20],rdx
 10130fa:	movzx  edx,cx
 10130fd:	mov    rcx,rdi
 1013100:	mov    r9d,0x4000c41e
 1013106:	call   QWORD PTR [rip+0xfffffffffffedf0c]        # 0x1001018
 101310c:	mov    rcx,rdi
 101310f:	call   QWORD PTR [rip+0xfffffffffffedef3]        # 0x1001008
 1013115:	mov    rdi,QWORD PTR [rsp+0x68]
 101311a:	add    rsp,0x50
 101311e:	pop    rbx
 101311f:	ret    
 1013120:	int3   
 1013121:	int3   
 1013122:	int3   
 1013123:	int3   
 1013124:	int3   
 1013125:	int3   
 1013126:	int3   
 1013127:	int3   
 1013128:	int3   
 1013129:	int3   
 101312a:	int3   
 101312b:	int3   
 101312c:	int3   
 101312d:	int3   
 101312e:	int3   
 101312f:	int3   
 1013130:	rex push rdi
 1013132:	sub    rsp,0x480
 1013139:	mov    rax,QWORD PTR [rip+0x50730]        # 0x1063870
 1013140:	xor    rax,rsp
 1013143:	mov    QWORD PTR [rsp+0x470],rax
 101314b:	lea    r8,[rip+0xffffffffffff013e]        # 0x1003290
 1013152:	lea    rcx,[rsp+0x260]
 101315a:	xor    edi,edi
 101315c:	mov    edx,0x105
 1013161:	mov    QWORD PTR [rsp+0x30],rdi
 1013166:	call   QWORD PTR [rip+0xfffffffffffee5f4]        # 0x1001760
 101316c:	lea    r8,[rip+0x502dd]        # 0x1063450
 1013173:	lea    rcx,[rsp+0x260]
 101317b:	mov    edx,0x105
 1013180:	call   QWORD PTR [rip+0xfffffffffffee5d2]        # 0x1001758
 1013186:	lea    r8,[rsp+0x30]
 101318b:	lea    rdx,[rsp+0x260]
 1013193:	mov    rcx,0xffffffff80000002
 101319a:	call   QWORD PTR [rip+0xfffffffffffede88]        # 0x1001028
 10131a0:	test   eax,eax
 10131a2:	jne    0x101328e
 10131a8:	lea    rdx,[rsp+0x50]
 10131ad:	mov    r8d,0x105
 10131b3:	xor    ecx,ecx
 10131b5:	mov    QWORD PTR [rsp+0x490],rbx
 10131bd:	call   QWORD PTR [rip+0xfffffffffffee0ad]        # 0x1001270
 10131c3:	lea    r9,[rsp+0x3c]
 10131c8:	lea    r8,[rsp+0x40]
 10131cd:	lea    edx,[rdi+0x1]
 10131d0:	lea    rcx,[rsp+0x50]
 10131d5:	mov    DWORD PTR [rsp+0x3c],0x8
 10131dd:	call   0x1040756
 10131e2:	or     rbx,0xffffffffffffffff
 10131e6:	test   eax,eax
 10131e8:	jne    0x1013202
 10131ea:	mov    r8,QWORD PTR [rsp+0x40]
 10131ef:	lea    rcx,[rsp+0x50]
 10131f4:	mov    r9,rbx
 10131f7:	mov    edx,0x105
 10131fc:	call   QWORD PTR [rip+0xfffffffffffee4a6]        # 0x10016a8
 1013202:	mov    WORD PTR [rsp+0x258],di
 101320a:	lea    rax,[rsp+0x50]
 101320f:	nop
 1013210:	inc    rbx
 1013213:	cmp    WORD PTR [rax+rbx*2],di
 1013217:	jne    0x1013210
 1013219:	mov    rcx,QWORD PTR [rsp+0x30]
 101321e:	lea    eax,[rbx*2+0x2]
 1013225:	lea    rdx,[rip+0xffffffffffff00d4]        # 0x1003300
 101322c:	mov    DWORD PTR [rsp+0x28],eax
 1013230:	lea    rax,[rsp+0x50]
 1013235:	mov    r9d,0x2
 101323b:	xor    r8d,r8d
 101323e:	mov    QWORD PTR [rsp+0x20],rax
 1013243:	call   QWORD PTR [rip+0xfffffffffffedde7]        # 0x1001030
 1013249:	mov    rbx,QWORD PTR [rsp+0x490]
 1013251:	test   eax,eax
 1013253:	jne    0x101328e
 1013255:	mov    rcx,QWORD PTR [rsp+0x30]
 101325a:	lea    rax,[rsp+0x38]
 101325f:	lea    rdx,[rip+0xffffffffffff00c2]        # 0x1003328
 1013266:	mov    r9d,0x4
 101326c:	xor    r8d,r8d
 101326f:	mov    DWORD PTR [rsp+0x28],0x4
 1013277:	mov    QWORD PTR [rsp+0x20],rax
 101327c:	mov    DWORD PTR [rsp+0x38],0x7
 1013284:	call   QWORD PTR [rip+0xfffffffffffedda6]        # 0x1001030
 101328a:	test   eax,eax
 101328c:	je     0x1013296
 101328e:	call   QWORD PTR [rip+0xfffffffffffee2bc]        # 0x1001550
 1013294:	mov    edi,eax
 1013296:	mov    rcx,QWORD PTR [rsp+0x30]
 101329b:	test   rcx,rcx
 101329e:	je     0x10132a6
 10132a0:	call   QWORD PTR [rip+0xfffffffffffedd7a]        # 0x1001020
 10132a6:	mov    eax,edi
 10132a8:	mov    rcx,QWORD PTR [rsp+0x470]
 10132b0:	xor    rcx,rsp
 10132b3:	call   0x103ff40
 10132b8:	add    rsp,0x480
 10132bf:	pop    rdi
 10132c0:	ret    
 10132c1:	int3   
 10132c2:	int3   
 10132c3:	int3   
 10132c4:	int3   
 10132c5:	int3   
 10132c6:	int3   
 10132c7:	int3   
 10132c8:	int3   
 10132c9:	int3   
 10132ca:	int3   
 10132cb:	int3   
 10132cc:	int3   
 10132cd:	int3   
 10132ce:	int3   
 10132cf:	int3   
 10132d0:	mov    QWORD PTR [rsp+0x8],rcx
 10132d5:	push   rdi
 10132d6:	sub    rsp,0x50
 10132da:	mov    QWORD PTR [rsp+0x48],0xfffffffffffffffe
 10132e3:	mov    QWORD PTR [rsp+0x68],rbx
 10132e8:	mov    QWORD PTR [rsp+0x78],rsi
 10132ed:	mov    edi,edx
 10132ef:	mov    rbx,rcx
 10132f2:	xor    esi,esi
 10132f4:	mov    DWORD PTR [rsp+0x40],esi
 10132f8:	mov    QWORD PTR [rsp+0x70],rsi
 10132fd:	lea    rdx,[rip+0xfffffffffffeeb0c]        # 0x1001e10
 1013304:	call   QWORD PTR [rip+0xfffffffffffee7a6]        # 0x1001ab0
 101330a:	mov    DWORD PTR [rsp+0x40],0x1
 1013312:	xor    ecx,ecx
 1013314:	call   QWORD PTR [rip+0xfffffffffffee256]        # 0x1001570
 101331a:	mov    rdx,rax
 101331d:	mov    QWORD PTR [rsp+0x30],rsi
 1013322:	mov    DWORD PTR [rsp+0x28],esi
 1013326:	lea    rax,[rsp+0x70]
 101332b:	mov    QWORD PTR [rsp+0x20],rax
 1013330:	xor    r9d,r9d
 1013333:	mov    r8d,edi
 1013336:	mov    ecx,0x1bff
 101333b:	call   QWORD PTR [rip+0xfffffffffffedf27]        # 0x1001268
 1013341:	test   eax,eax
 1013343:	jne    0x1013379
 1013345:	lea    rcx,[rip+0xfffffffffffeff24]        # 0x1003270
 101334c:	call   QWORD PTR [rip+0xfffffffffffee21e]        # 0x1001570
 1013352:	mov    rdx,rax
 1013355:	mov    QWORD PTR [rsp+0x30],rsi
 101335a:	mov    DWORD PTR [rsp+0x28],esi
 101335e:	lea    rax,[rsp+0x70]
 1013363:	mov    QWORD PTR [rsp+0x20],rax
 1013368:	xor    r9d,r9d
 101336b:	mov    r8d,edi
 101336e:	mov    ecx,0xbff
 1013373:	call   QWORD PTR [rip+0xfffffffffffedeef]        # 0x1001268
 1013379:	mov    rdx,QWORD PTR [rsp+0x70]
 101337e:	test   rdx,rdx
 1013381:	je     0x1013397
 1013383:	mov    rcx,rbx
 1013386:	call   QWORD PTR [rip+0xfffffffffffee70c]        # 0x1001a98
 101338c:	mov    rcx,QWORD PTR [rsp+0x70]
 1013391:	call   QWORD PTR [rip+0xfffffffffffede99]        # 0x1001230
 1013397:	mov    rcx,rbx
 101339a:	call   QWORD PTR [rip+0xfffffffffffee750]        # 0x1001af0
 10133a0:	test   eax,eax
 10133a2:	je     0x10133bb
 10133a4:	lea    r8,[rip+0xfffffffffffeed15]        # 0x10020c0
 10133ab:	lea    rdx,[rip+0xfffffffffffefece]        # 0x1003280
 10133b2:	mov    rcx,rbx
 10133b5:	call   QWORD PTR [rip+0xfffffffffffee5f5]        # 0x10019b0
 10133bb:	mov    rax,rbx
 10133be:	mov    rbx,QWORD PTR [rsp+0x68]
 10133c3:	mov    rsi,QWORD PTR [rsp+0x78]
 10133c8:	add    rsp,0x50
 10133cc:	pop    rdi
 10133cd:	ret    
 10133ce:	int3   
 10133cf:	int3   
 10133d0:	int3   
 10133d1:	int3   
 10133d2:	int3   
 10133d3:	int3   
 10133d4:	int3   
 10133d5:	int3   
 10133d6:	int3   
 10133d7:	int3   
 10133d8:	int3   
 10133d9:	int3   
 10133da:	int3   
 10133db:	int3   
 10133dc:	int3   
 10133dd:	int3   
 10133de:	int3   
 10133df:	int3   
 10133e0:	mov    QWORD PTR [rsp+0x10],rbx
 10133e5:	mov    QWORD PTR [rsp+0x20],rsi
 10133ea:	push   rdi
 10133eb:	push   r12
 10133ed:	push   r13
 10133ef:	push   r14
 10133f1:	push   r15
 10133f3:	sub    rsp,0x930
 10133fa:	mov    rax,QWORD PTR [rip+0x5046f]        # 0x1063870
 1013401:	xor    rax,rsp
 1013404:	mov    QWORD PTR [rsp+0x920],rax
 101340c:	mov    BYTE PTR [rsp+0x40],r9b
 1013411:	mov    r15,r8
 1013414:	mov    DWORD PTR [rsp+0x4c],edx
 1013418:	mov    r14,rcx
 101341b:	movzx  ebx,BYTE PTR [rsp+0x988]
 1013423:	mov    BYTE PTR [rsp+0x41],bl
 1013427:	mov    rax,QWORD PTR [rcx]
 101342a:	call   QWORD PTR [rax+0x38]
 101342d:	mov    r13,rax
 1013430:	mov    r10,QWORD PTR [r14]
 1013433:	mov    rcx,r14
 1013436:	call   QWORD PTR [r10+0x40]
 101343a:	mov    r12,rax
 101343d:	mov    ecx,0xfffffff5
 1013442:	call   QWORD PTR [rip+0xfffffffffffede00]        # 0x1001248
 1013448:	mov    rsi,rax
 101344b:	xor    edx,edx
 101344d:	mov    WORD PTR [rsp+0x48],dx
 1013452:	mov    ecx,DWORD PTR [rip+0xfffffffffffefef0]        # 0x1003348
 1013458:	mov    DWORD PTR [rsp+0x70],ecx
 101345c:	movzx  ecx,WORD PTR [rip+0xfffffffffffefee9]        # 0x100334c
 1013463:	mov    WORD PTR [rsp+0x74],cx
 1013468:	mov    WORD PTR [rsp+0x4f0],dx
 1013470:	lea    rcx,[rip+0xfffffffffffee999]        # 0x1001e10
 1013477:	cmp    BYTE PTR [rsp+0x990],dl
 101347e:	je     0x10134f1
 1013480:	lea    rdi,[rsp+0x70]
 1013485:	test   bl,bl
 1013487:	cmove  rdi,rcx
 101348b:	mov    rax,QWORD PTR [r14]
 101348e:	mov    r8d,0x105
 1013494:	lea    rdx,[rsp+0x710]
 101349c:	mov    rcx,r14
 101349f:	call   QWORD PTR [rax+0x48]
 10134a2:	mov    rbx,rax
 10134a5:	mov    r9,QWORD PTR [r14]
 10134a8:	mov    r8d,0x32
 10134ae:	lea    rdx,[rsp+0x80]
 10134b6:	mov    rcx,r14
 10134b9:	call   QWORD PTR [r9+0x50]
 10134bd:	mov    QWORD PTR [rsp+0x38],rdi
 10134c2:	mov    QWORD PTR [rsp+0x30],r15
 10134c7:	mov    QWORD PTR [rsp+0x28],rbx
 10134cc:	mov    QWORD PTR [rsp+0x20],rax
 10134d1:	lea    r9,[rip+0xfffffffffffefe78]        # 0x1003350
 10134d8:	mov    edx,0x201
 10134dd:	lea    r8d,[rdx-0x1]
 10134e1:	lea    rcx,[rsp+0xf0]
 10134e9:	call   QWORD PTR [rip+0xfffffffffffee261]        # 0x1001750
 10134ef:	jmp    0x1013524
 10134f1:	lea    rax,[rsp+0x70]
 10134f6:	test   bl,bl
 10134f8:	cmove  rax,rcx
 10134fc:	mov    QWORD PTR [rsp+0x28],rax
 1013501:	mov    QWORD PTR [rsp+0x20],r15
 1013506:	lea    r9,[rip+0xfffffffffffeea63]        # 0x1001f70
 101350d:	mov    edx,0x201
 1013512:	lea    r8d,[rdx-0x1]
 1013516:	lea    rcx,[rsp+0xf0]
 101351e:	call   QWORD PTR [rip+0xfffffffffffee22c]        # 0x1001750
 1013524:	lea    rax,[rsp+0xf0]
 101352c:	or     rbx,0xffffffffffffffff
 1013530:	mov    rdi,rbx
 1013533:	inc    rdi
 1013536:	cmp    WORD PTR [rax+rdi*2],0x0
 101353b:	jne    0x1013533
 101353d:	mov    rax,QWORD PTR [r14]
 1013540:	mov    rcx,r14
 1013543:	call   QWORD PTR [rax+0x30]
 1013546:	mov    r15,rax
 1013549:	mov    QWORD PTR [rsp+0x50],rax
 101354e:	test   rax,rax
 1013551:	je     0x101355d
 1013553:	mov    rcx,rax
 1013556:	call   QWORD PTR [rip+0xfffffffffffedcdc]        # 0x1001238
 101355c:	nop
 101355d:	cmp    BYTE PTR [rsp+0x40],0x0
 1013562:	jne    0x10136e6
 1013568:	mov    r14d,DWORD PTR [rsp+0x980]
 1013570:	mov    edx,r14d
 1013573:	lea    rcx,[rsp+0xf0]
 101357b:	call   0x1013090
 1013580:	cmp    rsi,0xffffffffffffffff
 1013584:	je     0x10136e6
 101358a:	test   rsi,rsi
 101358d:	je     0x10136e6
 1013593:	test   r14d,r14d
 1013596:	je     0x1013627
 101359c:	lea    rax,[rsp+0x70]
 10135a1:	mov    r8,rbx
 10135a4:	inc    r8
 10135a7:	cmp    WORD PTR [rax+r8*2],0x0
 10135ad:	jne    0x10135a4
 10135af:	mov    QWORD PTR [rsp+0x20],0x0
 10135b8:	lea    r9,[rsp+0x44]
 10135bd:	lea    rdx,[rsp+0x70]
 10135c2:	mov    rcx,rsi
 10135c5:	call   QWORD PTR [rip+0xfffffffffffedcbd]        # 0x1001288
 10135cb:	test   eax,eax
 10135cd:	jne    0x10135f1
 10135cf:	lea    rdx,[rsp+0x70]
 10135d4:	lea    rcx,[rip+0xfffffffffffefd8d]        # 0x1003368
 10135db:	call   QWORD PTR [rip+0xfffffffffffee18f]        # 0x1001770
 10135e1:	call   QWORD PTR [rip+0xfffffffffffee181]        # 0x1001768
 10135e7:	lea    rcx,[rax+0x30]
 10135eb:	call   QWORD PTR [rip+0xfffffffffffee187]        # 0x1001778
 10135f1:	lea    rdx,[rsp+0x58]
 10135f6:	mov    rcx,rsi
 10135f9:	call   QWORD PTR [rip+0xfffffffffffedc79]        # 0x1001278
 10135ff:	movzx  eax,WORD PTR [rsp+0x60]
 1013604:	mov    WORD PTR [rsp+0x48],ax
 1013609:	mov    edx,0x2
 101360e:	mov    ecx,0x4
 1013613:	cmp    r14d,edx
 1013616:	cmove  dx,cx
 101361a:	or     dx,0x8
 101361e:	mov    rcx,rsi
 1013621:	call   QWORD PTR [rip+0xfffffffffffedc59]        # 0x1001280
 1013627:	mov    QWORD PTR [rsp+0x20],0x0
 1013630:	lea    r9,[rsp+0x44]
 1013635:	mov    r8d,edi
 1013638:	lea    rdx,[rsp+0xf0]
 1013640:	mov    rcx,rsi
 1013643:	call   QWORD PTR [rip+0xfffffffffffedc3f]        # 0x1001288
 1013649:	test   eax,eax
 101364b:	jne    0x1013675
 101364d:	lea    rdx,[rsp+0xf0]
 1013655:	lea    rcx,[rip+0xfffffffffffefd0c]        # 0x1003368
 101365c:	call   QWORD PTR [rip+0xfffffffffffee10e]        # 0x1001770
 1013662:	call   QWORD PTR [rip+0xfffffffffffee100]        # 0x1001768
 1013668:	add    rax,0x30
 101366c:	mov    rcx,rax
 101366f:	call   QWORD PTR [rip+0xfffffffffffee103]        # 0x1001778
 1013675:	test   r14d,r14d
 1013678:	je     0x10136dd
 101367a:	movzx  edx,WORD PTR [rsp+0x48]
 101367f:	mov    rcx,rsi
 1013682:	call   QWORD PTR [rip+0xfffffffffffedbf8]        # 0x1001280
 1013688:	cmp    BYTE PTR [rsp+0x41],0x0
 101368d:	je     0x10136dd
 101368f:	lea    rax,[rsp+0x70]
 1013694:	mov    r8,rbx
 1013697:	nop    WORD PTR [rax+rax*1+0x0]
 10136a0:	inc    r8
 10136a3:	cmp    WORD PTR [rax+r8*2],0x0
 10136a9:	jne    0x10136a0
 10136ab:	mov    QWORD PTR [rsp+0x20],0x0
 10136b4:	lea    r9,[rsp+0x44]
 10136b9:	lea    rdx,[rsp+0x70]
 10136be:	mov    rcx,rsi
 10136c1:	call   QWORD PTR [rip+0xfffffffffffedbc1]        # 0x1001288
 10136c7:	test   eax,eax
 10136c9:	jne    0x10136dd
 10136cb:	lea    rdx,[rsp+0x70]
 10136d0:	lea    rcx,[rip+0xfffffffffffefc91]        # 0x1003368
 10136d7:	call   QWORD PTR [rip+0xfffffffffffee093]        # 0x1001770
 10136dd:	mov    rcx,rsi
 10136e0:	call   QWORD PTR [rip+0xfffffffffffedb72]        # 0x1001258
 10136e6:	add    edi,edi
 10136e8:	xor    esi,esi
 10136ea:	cmp    r13,0xffffffffffffffff
 10136ee:	je     0x1013713
 10136f0:	test   r13,r13
 10136f3:	je     0x1013713
 10136f5:	mov    QWORD PTR [rsp+0x20],rsi
 10136fa:	lea    r9,[rsp+0x44]
 10136ff:	mov    r8d,edi
 1013702:	lea    rdx,[rsp+0xf0]
 101370a:	mov    rcx,r13
 101370d:	call   QWORD PTR [rip+0xfffffffffffedb3d]        # 0x1001250
 1013713:	cmp    r12,0xffffffffffffffff
 1013717:	je     0x1013796
 1013719:	test   r12,r12
 101371c:	je     0x1013796
 101371e:	mov    QWORD PTR [rsp+0x38],rsi
 1013723:	mov    QWORD PTR [rsp+0x30],rsi
 1013728:	mov    DWORD PTR [rsp+0x28],0x200
 1013730:	lea    rax,[rsp+0x500]
 1013738:	mov    QWORD PTR [rsp+0x20],rax
 101373d:	mov    r9d,ebx
 1013740:	lea    r8,[rsp+0xf0]
 1013748:	mov    edx,0x400
 101374d:	xor    ecx,ecx
 101374f:	call   QWORD PTR [rip+0xfffffffffffedac3]        # 0x1001218
 1013755:	test   eax,eax
 1013757:	je     0x1013777
 1013759:	lea    rax,[rsp+0x500]
 1013761:	inc    rbx
 1013764:	cmp    BYTE PTR [rax+rbx*1],0x0
 1013768:	jne    0x1013761
 101376a:	mov    r8d,ebx
 101376d:	lea    rdx,[rsp+0x500]
 1013775:	jmp    0x1013782
 1013777:	mov    r8d,edi
 101377a:	lea    rdx,[rsp+0xf0]
 1013782:	mov    QWORD PTR [rsp+0x20],rsi
 1013787:	lea    r9,[rsp+0x44]
 101378c:	mov    rcx,r12
 101378f:	call   QWORD PTR [rip+0xfffffffffffedabb]        # 0x1001250
 1013795:	nop
 1013796:	test   r15,r15
 1013799:	je     0x10137a4
 101379b:	mov    rcx,r15
 101379e:	call   QWORD PTR [rip+0xfffffffffffeda9c]        # 0x1001240
 10137a4:	mov    eax,DWORD PTR [rsp+0x4c]
 10137a8:	test   eax,eax
 10137aa:	je     0x10137c7
 10137ac:	cmp    eax,DWORD PTR [rip+0x50156]        # 0x1063908
 10137b2:	jne    0x10137c7
 10137b4:	xor    r9d,r9d
 10137b7:	xor    r8d,r8d
 10137ba:	xor    edx,edx
 10137bc:	mov    ecx,0xe0000001
 10137c1:	call   QWORD PTR [rip+0xfffffffffffeddb9]        # 0x1001580
 10137c7:	mov    al,0x1
 10137c9:	mov    rcx,QWORD PTR [rsp+0x920]
 10137d1:	xor    rcx,rsp
 10137d4:	call   0x103ff40
 10137d9:	lea    r11,[rsp+0x930]
 10137e1:	mov    rbx,QWORD PTR [r11+0x38]
 10137e5:	mov    rsi,QWORD PTR [r11+0x48]
 10137e9:	mov    rsp,r11
 10137ec:	pop    r15
 10137ee:	pop    r14
 10137f0:	pop    r13
 10137f2:	pop    r12
 10137f4:	pop    rdi
 10137f5:	ret    
 10137f6:	int3   
 10137f7:	int3   
 10137f8:	int3   
 10137f9:	int3   
 10137fa:	int3   
 10137fb:	int3   
 10137fc:	int3   
 10137fd:	int3   
 10137fe:	int3   
 10137ff:	int3   
 1013800:	mov    rax,rsp
 1013803:	push   rsi
 1013804:	push   rdi
 1013805:	push   r14
 1013807:	sub    rsp,0x50
 101380b:	mov    QWORD PTR [rax-0x20],0xfffffffffffffffe
 1013813:	mov    QWORD PTR [rax+0x10],rbx
 1013817:	mov    QWORD PTR [rax+0x18],rbp
 101381b:	mov    ebp,r9d
 101381e:	movzx  r14d,r8b
 1013822:	mov    edi,edx
 1013824:	mov    rsi,rcx
 1013827:	lea    rdx,[rip+0xfffffffffffee5e2]        # 0x1001e10
 101382e:	lea    rcx,[rax+0x8]
 1013832:	call   QWORD PTR [rip+0xfffffffffffee278]        # 0x1001ab0
 1013838:	nop
 1013839:	xor    ebx,ebx
 101383b:	mov    QWORD PTR [rsp+0x40],rbx
 1013840:	xor    ecx,ecx
 1013842:	call   QWORD PTR [rip+0xfffffffffffedd28]        # 0x1001570
 1013848:	mov    rdx,rax
 101384b:	mov    QWORD PTR [rsp+0x30],rbx
 1013850:	mov    DWORD PTR [rsp+0x28],ebx
 1013854:	lea    rax,[rsp+0x40]
 1013859:	mov    QWORD PTR [rsp+0x20],rax
 101385e:	xor    r9d,r9d
 1013861:	mov    r8d,edi
 1013864:	mov    ecx,0x1bff
 1013869:	call   QWORD PTR [rip+0xfffffffffffed9f9]        # 0x1001268
 101386f:	mov    rdx,QWORD PTR [rsp+0x40]
 1013874:	test   rdx,rdx
 1013877:	je     0x101388f
 1013879:	lea    rcx,[rsp+0x70]
 101387e:	call   QWORD PTR [rip+0xfffffffffffee214]        # 0x1001a98
 1013884:	mov    rcx,QWORD PTR [rsp+0x40]
 1013889:	call   QWORD PTR [rip+0xfffffffffffed9a1]        # 0x1001230
 101388f:	lea    r8,[rip+0xfffffffffffee82a]        # 0x10020c0
 1013896:	lea    rdx,[rip+0xfffffffffffef9e3]        # 0x1003280
 101389d:	lea    rcx,[rsp+0x70]
 10138a2:	call   QWORD PTR [rip+0xfffffffffffee108]        # 0x10019b0
 10138a8:	mov    rbx,QWORD PTR [rsi]
 10138ab:	lea    rcx,[rsp+0x70]
 10138b0:	call   QWORD PTR [rip+0xfffffffffffee232]        # 0x1001ae8
 10138b6:	mov    r8,rax
 10138b9:	movzx  eax,BYTE PTR [rsp+0x98]
 10138c1:	mov    BYTE PTR [rsp+0x30],al
 10138c5:	movzx  eax,BYTE PTR [rsp+0x90]
 10138cd:	mov    BYTE PTR [rsp+0x28],al
 10138d1:	mov    DWORD PTR [rsp+0x20],ebp
 10138d5:	movzx  r9d,r14b
 10138d9:	mov    edx,edi
 10138db:	mov    rcx,rsi
 10138de:	call   QWORD PTR [rbx+0x8]
 10138e1:	movzx  ebx,al
 10138e4:	lea    rcx,[rsp+0x70]
 10138e9:	call   QWORD PTR [rip+0xfffffffffffee1b9]        # 0x1001aa8
 10138ef:	movzx  eax,bl
 10138f2:	mov    rbx,QWORD PTR [rsp+0x78]
 10138f7:	mov    rbp,QWORD PTR [rsp+0x80]
 10138ff:	add    rsp,0x50
 1013903:	pop    r14
 1013905:	pop    rdi
 1013906:	pop    rsi
 1013907:	ret    
 1013908:	int3   
 1013909:	int3   
 101390a:	int3   
 101390b:	int3   
 101390c:	int3   
 101390d:	int3   
 101390e:	int3   
 101390f:	int3   
 1013910:	sub    rsp,0x48
 1013914:	mov    rax,QWORD PTR [rcx]
 1013917:	mov    r8,rdx
 101391a:	mov    BYTE PTR [rsp+0x30],0x1
 101391f:	mov    r9b,0x1
 1013922:	mov    edx,0x4000c485
 1013927:	mov    BYTE PTR [rsp+0x28],0x1
 101392c:	mov    DWORD PTR [rsp+0x20],0x0
 1013934:	call   QWORD PTR [rax+0x8]
 1013937:	add    rsp,0x48
 101393b:	ret    
 101393c:	int3   
 101393d:	int3   
 101393e:	int3   
 101393f:	int3   
 1013940:	int3   
 1013941:	int3   
 1013942:	int3   
 1013943:	int3   
 1013944:	int3   
 1013945:	int3   
 1013946:	int3   
 1013947:	int3   
 1013948:	int3   
 1013949:	int3   
 101394a:	int3   
 101394b:	int3   
 101394c:	int3   
 101394d:	int3   
 101394e:	int3   
 101394f:	int3   
 1013950:	sub    rsp,0x38
 1013954:	mov    rax,QWORD PTR [rcx]
 1013957:	xor    r9d,r9d
 101395a:	mov    r8b,0x1
 101395d:	mov    BYTE PTR [rsp+0x28],0x1
 1013962:	mov    BYTE PTR [rsp+0x20],0x1
 1013967:	call   QWORD PTR [rax]
 1013969:	add    rsp,0x38
 101396d:	ret    
 101396e:	int3   
 101396f:	int3   
 1013970:	int3   
 1013971:	int3   
 1013972:	int3   
 1013973:	int3   
 1013974:	int3   
 1013975:	int3   
 1013976:	int3   
 1013977:	int3   
 1013978:	int3   
 1013979:	int3   
 101397a:	int3   
 101397b:	int3   
 101397c:	int3   
 101397d:	int3   
 101397e:	int3   
 101397f:	int3   
 1013980:	mov    rax,rsp
 1013983:	mov    QWORD PTR [rax+0x18],r8
 1013987:	push   rdi
 1013988:	push   r14
 101398a:	push   r15
 101398c:	sub    rsp,0x60
 1013990:	mov    QWORD PTR [rax-0x28],0xfffffffffffffffe
 1013998:	mov    QWORD PTR [rax+0x8],rbx
 101399c:	mov    QWORD PTR [rax+0x10],rbp
 10139a0:	mov    QWORD PTR [rax+0x20],rsi
 10139a4:	movzx  r15d,r9b
 10139a8:	mov    rdi,r8
 10139ab:	mov    ebp,edx
 10139ad:	mov    r14,rcx
 10139b0:	test   edx,edx
 10139b2:	sete   sil
 10139b6:	test   sil,sil
 10139b9:	jne    0x1013a3f
 10139bf:	lea    rcx,[rax-0x38]
 10139c3:	call   QWORD PTR [rip+0xfffffffffffee0f7]        # 0x1001ac0
 10139c9:	nop
 10139ca:	mov    edx,ebp
 10139cc:	lea    rcx,[rsp+0x48]
 10139d1:	call   0x10132d0
 10139d6:	nop
 10139d7:	mov    rax,QWORD PTR [rax]
 10139da:	mov    QWORD PTR [rsp+0x20],rax
 10139df:	mov    r9d,ebp
 10139e2:	mov    r8,QWORD PTR [rdi]
 10139e5:	lea    rdx,[rip+0xfffffffffffef9d4]        # 0x10033c0
 10139ec:	lea    rcx,[rsp+0x40]
 10139f1:	call   QWORD PTR [rip+0xfffffffffffee049]        # 0x1001a40
 10139f7:	nop
 10139f8:	lea    rcx,[rsp+0x48]
 10139fd:	call   QWORD PTR [rip+0xfffffffffffee0a5]        # 0x1001aa8
 1013a03:	mov    rbx,QWORD PTR [r14]
 1013a06:	lea    rcx,[rsp+0x40]
 1013a0b:	call   QWORD PTR [rip+0xfffffffffffee0d7]        # 0x1001ae8
 1013a11:	mov    r8,rax
 1013a14:	mov    BYTE PTR [rsp+0x30],0x1
 1013a19:	mov    BYTE PTR [rsp+0x28],0x1
 1013a1e:	mov    DWORD PTR [rsp+0x20],0x0
 1013a26:	movzx  r9d,r15b
 1013a2a:	mov    edx,ebp
 1013a2c:	mov    rcx,r14
 1013a2f:	call   QWORD PTR [rbx+0x8]
 1013a32:	nop
 1013a33:	lea    rcx,[rsp+0x40]
 1013a38:	call   QWORD PTR [rip+0xfffffffffffee06a]        # 0x1001aa8
 1013a3e:	nop
 1013a3f:	mov    rcx,rdi
 1013a42:	call   QWORD PTR [rip+0xfffffffffffee060]        # 0x1001aa8
 1013a48:	movzx  eax,sil
 1013a4c:	lea    r11,[rsp+0x60]
 1013a51:	mov    rbx,QWORD PTR [r11+0x20]
 1013a55:	mov    rbp,QWORD PTR [r11+0x28]
 1013a59:	mov    rsi,QWORD PTR [r11+0x38]
 1013a5d:	mov    rsp,r11
 1013a60:	pop    r15
 1013a62:	pop    r14
 1013a64:	pop    rdi
 1013a65:	ret    
 1013a66:	int3   
 1013a67:	int3   
 1013a68:	int3   
 1013a69:	int3   
 1013a6a:	int3   
 1013a6b:	int3   
 1013a6c:	int3   
 1013a6d:	int3   
 1013a6e:	int3   
 1013a6f:	int3   
 1013a70:	rex push rdi
 1013a72:	sub    rsp,0x40
 1013a76:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
 1013a7f:	mov    QWORD PTR [rsp+0x58],rbx
 1013a84:	mov    QWORD PTR [rsp+0x60],rbp
 1013a89:	mov    QWORD PTR [rsp+0x68],rsi
 1013a8e:	movzx  esi,r9b
 1013a92:	mov    ebx,r8d
 1013a95:	mov    ebp,edx
 1013a97:	mov    rdi,rcx
 1013a9a:	lea    rcx,[rsp+0x50]
 1013a9f:	call   QWORD PTR [rip+0xfffffffffffee01b]        # 0x1001ac0
 1013aa5:	nop
 1013aa6:	test   ebx,ebx
 1013aa8:	je     0x1013ad3
 1013aaa:	mov    edx,ebx
 1013aac:	lea    rcx,[rsp+0x20]
 1013ab1:	call   0x10132d0
 1013ab6:	nop
 1013ab7:	mov    rdx,rax
 1013aba:	lea    rcx,[rsp+0x50]
 1013abf:	call   QWORD PTR [rip+0xfffffffffffedfdb]        # 0x1001aa0
 1013ac5:	nop
 1013ac6:	lea    rcx,[rsp+0x20]
 1013acb:	call   QWORD PTR [rip+0xfffffffffffedfd7]        # 0x1001aa8
 1013ad1:	jmp    0x1013ae5
 1013ad3:	lea    rdx,[rip+0xfffffffffffee336]        # 0x1001e10
 1013ada:	lea    rcx,[rsp+0x50]
 1013adf:	call   QWORD PTR [rip+0xfffffffffffedfb3]        # 0x1001a98
 1013ae5:	lea    rax,[rsp+0x20]
 1013aea:	mov    QWORD PTR [rsp+0x30],rax
 1013aef:	lea    rdx,[rsp+0x50]
 1013af4:	lea    rcx,[rsp+0x20]
 1013af9:	call   QWORD PTR [rip+0xfffffffffffedeb9]        # 0x10019b8
 1013aff:	nop
 1013b00:	mov    r10,QWORD PTR [rdi]
 1013b03:	movzx  r9d,sil
 1013b07:	mov    r8,rax
 1013b0a:	mov    edx,ebp
 1013b0c:	mov    rcx,rdi
 1013b0f:	call   QWORD PTR [r10+0x28]
 1013b13:	movzx  ebx,al
 1013b16:	lea    rcx,[rsp+0x50]
 1013b1b:	call   QWORD PTR [rip+0xfffffffffffedf87]        # 0x1001aa8
 1013b21:	movzx  eax,bl
 1013b24:	mov    rbx,QWORD PTR [rsp+0x58]
 1013b29:	mov    rbp,QWORD PTR [rsp+0x60]
 1013b2e:	mov    rsi,QWORD PTR [rsp+0x68]
 1013b33:	add    rsp,0x40
 1013b37:	pop    rdi
 1013b38:	ret    
 1013b39:	int3   
 1013b3a:	int3   
 1013b3b:	int3   
 1013b3c:	int3   
 1013b3d:	int3   
 1013b3e:	int3   
 1013b3f:	int3   
 1013b40:	xor    eax,eax
 1013b42:	ret    
 1013b43:	int3   
 1013b44:	int3   
 1013b45:	int3   
 1013b46:	int3   
 1013b47:	int3   
 1013b48:	int3   
 1013b49:	int3   
 1013b4a:	int3   
 1013b4b:	int3   
 1013b4c:	int3   
 1013b4d:	int3   
 1013b4e:	int3   
 1013b4f:	int3   
 1013b50:	or     rax,0xffffffffffffffff
 1013b54:	ret    
 1013b55:	int3   
 1013b56:	int3   
 1013b57:	int3   
 1013b58:	int3   
 1013b59:	int3   
 1013b5a:	int3   
 1013b5b:	int3   
 1013b5c:	int3   
 1013b5d:	int3   
 1013b5e:	int3   
 1013b5f:	int3   
 1013b60:	or     rax,0xffffffffffffffff
 1013b64:	ret    
 1013b65:	int3   
 1013b66:	int3   
 1013b67:	int3   
 1013b68:	int3   
 1013b69:	int3   
 1013b6a:	int3   
 1013b6b:	int3   
 1013b6c:	int3   
 1013b6d:	int3   
 1013b6e:	int3   
 1013b6f:	int3   
 1013b70:	xor    eax,eax
 1013b72:	mov    WORD PTR [rdx],ax
 1013b75:	mov    rax,rdx
 1013b78:	ret    
 1013b79:	int3   
 1013b7a:	int3   
 1013b7b:	int3   
 1013b7c:	int3   
 1013b7d:	int3   
 1013b7e:	int3   
 1013b7f:	int3   
 1013b80:	rex push rbx
 1013b82:	push   rsi
 1013b83:	push   rdi
 1013b84:	sub    rsp,0x50
 1013b88:	mov    rax,QWORD PTR [rip+0x4fce1]        # 0x1063870
 1013b8f:	xor    rax,rsp
 1013b92:	mov    QWORD PTR [rsp+0x40],rax
 1013b97:	mov    rsi,rcx
 1013b9a:	lea    rcx,[rsp+0x30]
 1013b9f:	mov    rdi,r8
 1013ba2:	mov    rbx,rdx
 1013ba5:	call   QWORD PTR [rip+0xfffffffffffed6b5]        # 0x1001260
 1013bab:	mov    rax,QWORD PTR [rsi]
 1013bae:	movaps xmm5,XMMWORD PTR [rsp+0x30]
 1013bb3:	movdqa XMMWORD PTR [rsp+0x20],xmm5
 1013bb9:	lea    rdx,[rsp+0x20]
 1013bbe:	mov    r9,rdi
 1013bc1:	mov    r8,rbx
 1013bc4:	mov    rcx,rsi
 1013bc7:	call   QWORD PTR [rax+0x58]
 1013bca:	mov    rcx,QWORD PTR [rsp+0x40]
 1013bcf:	xor    rcx,rsp
 1013bd2:	call   0x103ff40
 1013bd7:	add    rsp,0x50
 1013bdb:	pop    rdi
 1013bdc:	pop    rsi
 1013bdd:	pop    rbx
 1013bde:	ret    
 1013bdf:	int3   
 1013be0:	int3   
 1013be1:	int3   
 1013be2:	int3   
 1013be3:	int3   
 1013be4:	int3   
 1013be5:	int3   
 1013be6:	int3   
 1013be7:	int3   
 1013be8:	int3   
 1013be9:	int3   
 1013bea:	int3   
 1013beb:	int3   
 1013bec:	int3   
 1013bed:	int3   
 1013bee:	int3   
 1013bef:	int3   
 1013bf0:	mov    QWORD PTR [rsp+0x8],rbx
 1013bf5:	push   rdi
 1013bf6:	sub    rsp,0x60
 1013bfa:	movzx  ecx,WORD PTR [rdx+0xe]
 1013bfe:	mov    r11,rdx
 1013c01:	mov    rdi,r8
 1013c04:	movzx  r8d,WORD PTR [r11+0x8]
 1013c09:	movzx  r10d,WORD PTR [r11+0x2]
 1013c0e:	mov    rbx,r9
 1013c11:	movzx  r9d,WORD PTR [r11+0x6]
 1013c16:	mov    eax,0x66666667
 1013c1b:	imul   ecx
 1013c1d:	movzx  ecx,WORD PTR [r11+0xa]
 1013c22:	sar    edx,0x2
 1013c25:	mov    eax,edx
 1013c27:	shr    eax,0x1f
 1013c2a:	add    edx,eax
 1013c2c:	movzx  eax,WORD PTR [r11+0xc]
 1013c31:	movzx  r11d,WORD PTR [r11]
 1013c35:	mov    DWORD PTR [rsp+0x50],edx
 1013c39:	mov    DWORD PTR [rsp+0x48],eax
 1013c3d:	mov    DWORD PTR [rsp+0x40],ecx
 1013c41:	mov    DWORD PTR [rsp+0x38],r8d
 1013c46:	mov    DWORD PTR [rsp+0x30],r9d
 1013c4b:	mov    DWORD PTR [rsp+0x28],r10d
 1013c50:	lea    r9,[rip+0xfffffffffffef719]        # 0x1003370
 1013c57:	or     r8,0xffffffffffffffff
 1013c5b:	mov    rdx,rbx
 1013c5e:	mov    rcx,rdi
 1013c61:	mov    DWORD PTR [rsp+0x20],r11d
 1013c66:	call   QWORD PTR [rip+0xfffffffffffedae4]        # 0x1001750
 1013c6c:	mov    rbx,QWORD PTR [rsp+0x70]
 1013c71:	mov    rax,rdi
 1013c74:	add    rsp,0x60
 1013c78:	pop    rdi
 1013c79:	ret    
 1013c7a:	int3   
 1013c7b:	int3   
 1013c7c:	int3   
 1013c7d:	int3   
 1013c7e:	int3   
 1013c7f:	int3   
 1013c80:	sub    rsp,0x28
 1013c84:	call   QWORD PTR [rip+0xfffffffffffedb0e]        # 0x1001798
 1013c8a:	test   eax,eax
 1013c8c:	je     0x1013cb4
 1013c8e:	cmp    eax,0xc
 1013c91:	je     0x1013cae
 1013c93:	cmp    eax,0x16
 1013c96:	je     0x1013ca8
 1013c98:	cmp    eax,0x22
 1013c9b:	je     0x1013ca8
 1013c9d:	cmp    eax,0x50
 1013ca0:	je     0x1013cb4
 1013ca2:	call   0x103f972
 1013ca7:	int3   
 1013ca8:	call   0x103f972
 1013cad:	int3   
 1013cae:	call   0x103f966
 1013cb3:	int3   
 1013cb4:	add    rsp,0x28
 1013cb8:	ret    
 1013cb9:	int3   
 1013cba:	int3   
 1013cbb:	int3   
 1013cbc:	int3   
 1013cbd:	int3   
 1013cbe:	int3   
 1013cbf:	int3   
 1013cc0:	mov    QWORD PTR [rsp+0x8],rcx
 1013cc5:	push   rsi
 1013cc6:	push   rdi
 1013cc7:	push   r14
 1013cc9:	sub    rsp,0x40
 1013ccd:	mov    QWORD PTR [rsp+0x38],0xfffffffffffffffe
 1013cd6:	mov    QWORD PTR [rsp+0x68],rbx
 1013cdb:	mov    QWORD PTR [rsp+0x70],rbp
 1013ce0:	mov    rbx,r8
 1013ce3:	mov    rbp,rdx
 1013ce6:	mov    r14,rcx
 1013ce9:	mov    DWORD PTR [rsp+0x30],0x0
 1013cf1:	mov    rcx,rdx
 1013cf4:	call   QWORD PTR [rip+0xfffffffffffedd6e]        # 0x1001a68
 1013cfa:	mov    rdx,rax
 1013cfd:	mov    rcx,r14
 1013d00:	call   QWORD PTR [rip+0xfffffffffffeddb2]        # 0x1001ab8
 1013d06:	mov    DWORD PTR [rsp+0x30],0x1
 1013d0e:	mov    rcx,rbx
 1013d11:	call   QWORD PTR [rip+0xfffffffffffeddd9]        # 0x1001af0
 1013d17:	mov    esi,eax
 1013d19:	mov    rcx,rbx
 1013d1c:	call   QWORD PTR [rip+0xfffffffffffeddc6]        # 0x1001ae8
 1013d22:	mov    rdi,rax
 1013d25:	mov    rcx,rbp
 1013d28:	call   QWORD PTR [rip+0xfffffffffffeddc2]        # 0x1001af0
 1013d2e:	mov    ebx,eax
 1013d30:	mov    rcx,rbp
 1013d33:	call   QWORD PTR [rip+0xfffffffffffeddaf]        # 0x1001ae8
 1013d39:	mov    rdx,rax
 1013d3c:	mov    DWORD PTR [rsp+0x20],esi
 1013d40:	mov    r9,rdi
 1013d43:	mov    r8d,ebx
 1013d46:	mov    rcx,r14
 1013d49:	call   QWORD PTR [rip+0xfffffffffffedd79]        # 0x1001ac8
 1013d4f:	mov    rax,r14
 1013d52:	mov    rbx,QWORD PTR [rsp+0x68]
 1013d57:	mov    rbp,QWORD PTR [rsp+0x70]
 1013d5c:	add    rsp,0x40
 1013d60:	pop    r14
 1013d62:	pop    rdi
 1013d63:	pop    rsi
 1013d64:	ret    
 1013d65:	int3   
 1013d66:	int3   
 1013d67:	int3   
 1013d68:	int3   
 1013d69:	int3   
 1013d6a:	int3   
 1013d6b:	int3   
 1013d6c:	int3   
 1013d6d:	int3   
 1013d6e:	int3   
 1013d6f:	int3   
 1013d70:	mov    QWORD PTR [rsp+0x8],rcx
 1013d75:	push   rdi
 1013d76:	sub    rsp,0x40
 1013d7a:	mov    QWORD PTR [rsp+0x38],0xfffffffffffffffe
 1013d83:	mov    QWORD PTR [rsp+0x58],rbx
 1013d88:	mov    QWORD PTR [rsp+0x60],rbp
 1013d8d:	mov    QWORD PTR [rsp+0x68],rsi
 1013d92:	mov    rbx,r8
 1013d95:	mov    rsi,rdx
 1013d98:	mov    rbp,rcx
 1013d9b:	mov    DWORD PTR [rsp+0x30],0x0
 1013da3:	mov    rcx,r8
 1013da6:	call   QWORD PTR [rip+0xfffffffffffedcbc]        # 0x1001a68
 1013dac:	mov    rdx,rax
 1013daf:	mov    rcx,rbp
 1013db2:	call   QWORD PTR [rip+0xfffffffffffedd00]        # 0x1001ab8
 1013db8:	mov    DWORD PTR [rsp+0x30],0x1
 1013dc0:	mov    rcx,rbx
 1013dc3:	call   QWORD PTR [rip+0xfffffffffffedd27]        # 0x1001af0
 1013dc9:	mov    edi,eax
 1013dcb:	mov    rcx,rbx
 1013dce:	call   QWORD PTR [rip+0xfffffffffffedd14]        # 0x1001ae8
 1013dd4:	mov    rbx,rax
 1013dd7:	mov    rcx,rsi
 1013dda:	call   QWORD PTR [rip+0xfffffffffffedcf0]        # 0x1001ad0
 1013de0:	mov    r8d,eax
 1013de3:	mov    DWORD PTR [rsp+0x20],edi
 1013de7:	mov    r9,rbx
 1013dea:	mov    rdx,rsi
 1013ded:	mov    rcx,rbp
 1013df0:	call   QWORD PTR [rip+0xfffffffffffedcd2]        # 0x1001ac8
 1013df6:	mov    rax,rbp
 1013df9:	mov    rbx,QWORD PTR [rsp+0x58]
 1013dfe:	mov    rbp,QWORD PTR [rsp+0x60]
 1013e03:	mov    rsi,QWORD PTR [rsp+0x68]
 1013e08:	add    rsp,0x40
 1013e0c:	pop    rdi
 1013e0d:	ret    
 1013e0e:	int3   
 1013e0f:	int3   
 1013e10:	int3   
 1013e11:	int3   
 1013e12:	int3   
 1013e13:	int3   
 1013e14:	int3   
 1013e15:	int3   
 1013e16:	int3   
 1013e17:	int3   
 1013e18:	int3   
 1013e19:	int3   
 1013e1a:	int3   
 1013e1b:	int3   
 1013e1c:	int3   
 1013e1d:	int3   
 1013e1e:	int3   
 1013e1f:	int3   
 1013e20:	mov    r11,rsp
 1013e23:	mov    QWORD PTR [r11+0x10],rbx
 1013e27:	mov    QWORD PTR [r11+0x18],rsi
 1013e2b:	push   rdi
 1013e2c:	push   r14
 1013e2e:	push   r15
 1013e30:	sub    rsp,0xa0
 1013e37:	mov    rax,QWORD PTR [rip+0x4fa32]        # 0x1063870
 1013e3e:	xor    rax,rsp
 1013e41:	mov    QWORD PTR [rsp+0x98],rax
 1013e49:	mov    rsi,rcx
 1013e4c:	xor    r15d,r15d
 1013e4f:	mov    QWORD PTR [r11-0x50],r15
 1013e53:	mov    DWORD PTR [r11-0x58],r15d
 1013e57:	mov    r14d,r15d
 1013e5a:	mov    QWORD PTR [r11-0x30],r15
 1013e5e:	mov    QWORD PTR [r11-0x48],r15
 1013e62:	mov    edi,r15d
 1013e65:	mov    QWORD PTR [r11-0x38],r15
 1013e69:	mov    DWORD PTR [r11-0x28],edi
 1013e6d:	mov    WORD PTR [r11-0x24],0x500
 1013e74:	test   rcx,rcx
 1013e77:	jne    0x1013e81
 1013e79:	lea    eax,[rcx+0x57]
 1013e7c:	jmp    0x10140f1
 1013e81:	call   QWORD PTR [rip+0xfffffffffffed449]        # 0x10012d0
 1013e87:	mov    rcx,rax
 1013e8a:	lea    r9,[rsp+0x68]
 1013e8f:	mov    edx,0x8
 1013e94:	lea    r8d,[rdx-0x7]
 1013e98:	call   QWORD PTR [rip+0xfffffffffffed1aa]        # 0x1001048
 1013e9e:	test   eax,eax
 1013ea0:	jne    0x1013edf
 1013ea2:	call   QWORD PTR [rip+0xfffffffffffed6a8]        # 0x1001550
 1013ea8:	mov    ebx,eax
 1013eaa:	cmp    eax,0x3f0
 1013eaf:	jne    0x10140b3
 1013eb5:	call   QWORD PTR [rip+0xfffffffffffed3f5]        # 0x10012b0
 1013ebb:	mov    rcx,rax
 1013ebe:	lea    r8,[rsp+0x68]
 1013ec3:	mov    edx,0x8
 1013ec8:	call   QWORD PTR [rip+0xfffffffffffed172]        # 0x1001040
 1013ece:	test   eax,eax
 1013ed0:	jne    0x1013edf
 1013ed2:	call   QWORD PTR [rip+0xfffffffffffed678]        # 0x1001550
 1013ed8:	mov    ebx,eax
 1013eda:	jmp    0x10140b3
 1013edf:	mov    DWORD PTR [rsp+0x60],r15d
 1013ee4:	lea    rax,[rsp+0x60]
 1013ee9:	mov    QWORD PTR [rsp+0x20],rax
 1013eee:	xor    r9d,r9d
 1013ef1:	xor    r8d,r8d
 1013ef4:	lea    edx,[r9+0x1]
 1013ef8:	mov    rcx,QWORD PTR [rsp+0x68]
 1013efd:	call   QWORD PTR [rip+0xfffffffffffed14d]        # 0x1001050
 1013f03:	test   eax,eax
 1013f05:	jne    0x1013f18
 1013f07:	call   QWORD PTR [rip+0xfffffffffffed643]        # 0x1001550
 1013f0d:	mov    ebx,eax
 1013f0f:	cmp    eax,0x7a
 1013f12:	jne    0x10140b3
 1013f18:	mov    ebx,DWORD PTR [rsp+0x60]
 1013f1c:	mov    ecx,ebx
 1013f1e:	call   QWORD PTR [rip+0xfffffffffffed804]        # 0x1001728
 1013f24:	mov    r14,rax
 1013f27:	mov    QWORD PTR [rsp+0x88],rax
 1013f2f:	test   rax,rax
 1013f32:	jne    0x1013f3c
 1013f34:	lea    ebx,[rax+0xe]
 1013f37:	jmp    0x10140b3
 1013f3c:	lea    rax,[rsp+0x60]
 1013f41:	mov    QWORD PTR [rsp+0x20],rax
 1013f46:	mov    r9d,ebx
 1013f49:	mov    r8,r14
 1013f4c:	mov    edx,0x1
 1013f51:	mov    rcx,QWORD PTR [rsp+0x68]
 1013f56:	call   QWORD PTR [rip+0xfffffffffffed0f4]        # 0x1001050
 1013f5c:	test   eax,eax
 1013f5e:	jne    0x1013f6d
 1013f60:	call   QWORD PTR [rip+0xfffffffffffed5ea]        # 0x1001550
 1013f66:	mov    ebx,eax
 1013f68:	jmp    0x10140b3
 1013f6d:	mov    rdx,QWORD PTR [r14]
 1013f70:	mov    rcx,rsi
 1013f73:	call   QWORD PTR [rip+0xfffffffffffed0df]        # 0x1001058
 1013f79:	test   eax,eax
 1013f7b:	je     0x1013f85
 1013f7d:	mov    ebx,r15d
 1013f80:	jmp    0x10140b3
 1013f85:	lea    rax,[rsp+0x70]
 1013f8a:	mov    QWORD PTR [rsp+0x50],rax
 1013f8f:	mov    DWORD PTR [rsp+0x48],r15d
 1013f94:	mov    DWORD PTR [rsp+0x40],r15d
 1013f99:	mov    DWORD PTR [rsp+0x38],r15d
 1013f9e:	mov    DWORD PTR [rsp+0x30],r15d
 1013fa3:	mov    DWORD PTR [rsp+0x28],r15d
 1013fa8:	mov    DWORD PTR [rsp+0x20],r15d
 1013fad:	mov    r9d,0x220
 1013fb3:	mov    r8d,0x20
 1013fb9:	mov    dl,0x2
 1013fbb:	lea    rcx,[rsp+0x90]
 1013fc3:	call   QWORD PTR [rip+0xfffffffffffed097]        # 0x1001060
 1013fc9:	test   eax,eax
 1013fcb:	jne    0x1013fda
 1013fcd:	call   QWORD PTR [rip+0xfffffffffffed57d]        # 0x1001550
 1013fd3:	mov    ebx,eax
 1013fd5:	jmp    0x10140b3
 1013fda:	mov    rdx,QWORD PTR [rsp+0x70]
 1013fdf:	mov    rcx,rsi
 1013fe2:	call   QWORD PTR [rip+0xfffffffffffed070]        # 0x1001058
 1013fe8:	test   eax,eax
 1013fea:	je     0x10140b0
 1013ff0:	mov    DWORD PTR [rsp+0x60],r15d
 1013ff5:	lea    rax,[rsp+0x60]
 1013ffa:	mov    QWORD PTR [rsp+0x20],rax
 1013fff:	xor    r9d,r9d
 1014002:	xor    r8d,r8d
 1014005:	lea    edx,[r9+0x2]
 1014009:	mov    rcx,QWORD PTR [rsp+0x68]
 101400e:	call   QWORD PTR [rip+0xfffffffffffed03c]        # 0x1001050
 1014014:	test   eax,eax
 1014016:	jne    0x1014029
 1014018:	call   QWORD PTR [rip+0xfffffffffffed532]        # 0x1001550
 101401e:	mov    ebx,eax
 1014020:	cmp    eax,0x7a
 1014023:	jne    0x10140b3
 1014029:	mov    ebx,DWORD PTR [rsp+0x60]
 101402d:	mov    ecx,ebx
 101402f:	call   QWORD PTR [rip+0xfffffffffffed6f3]        # 0x1001728
 1014035:	mov    rdi,rax
 1014038:	mov    QWORD PTR [rsp+0x80],rax
 1014040:	test   rax,rax
 1014043:	jne    0x101404a
 1014045:	lea    ebx,[rax+0xe]
 1014048:	jmp    0x10140b3
 101404a:	lea    rax,[rsp+0x60]
 101404f:	mov    QWORD PTR [rsp+0x20],rax
 1014054:	mov    r9d,ebx
 1014057:	mov    r8,rdi
 101405a:	mov    edx,0x2
 101405f:	mov    rcx,QWORD PTR [rsp+0x68]
 1014064:	call   QWORD PTR [rip+0xfffffffffffecfe6]        # 0x1001050
 101406a:	test   eax,eax
 101406c:	jne    0x1014078
 101406e:	call   QWORD PTR [rip+0xfffffffffffed4dc]        # 0x1001550
 1014074:	mov    ebx,eax
 1014076:	jmp    0x10140b3
 1014078:	mov    ebx,r15d
 101407b:	mov    DWORD PTR [rsp+0x78],ebx
 101407f:	cmp    ebx,DWORD PTR [rdi]
 1014081:	jae    0x10140b0
 1014083:	mov    esi,ebx
 1014085:	add    rsi,rsi
 1014088:	mov    rdx,QWORD PTR [rdi+rsi*8+0x8]
 101408d:	mov    rcx,QWORD PTR [rsp+0x70]
 1014092:	call   QWORD PTR [rip+0xfffffffffffecfc0]        # 0x1001058
 1014098:	test   eax,eax
 101409a:	je     0x10140ac
 101409c:	test   BYTE PTR [rdi+rsi*8+0x10],0x4
 10140a1:	mov    ebx,0xffffffff
 10140a6:	cmovne ebx,r15d
 10140aa:	jmp    0x10140b3
 10140ac:	inc    ebx
 10140ae:	jmp    0x101407b
 10140b0:	or     ebx,0xffffffff
 10140b3:	mov    rcx,QWORD PTR [rsp+0x68]
 10140b8:	test   rcx,rcx
 10140bb:	je     0x10140c3
 10140bd:	call   QWORD PTR [rip+0xfffffffffffed415]        # 0x10014d8
 10140c3:	test   r14,r14
 10140c6:	je     0x10140d1
 10140c8:	mov    rcx,r14
 10140cb:	call   QWORD PTR [rip+0xfffffffffffed5df]        # 0x10016b0
 10140d1:	mov    rcx,QWORD PTR [rsp+0x70]
 10140d6:	test   rcx,rcx
 10140d9:	je     0x10140e1
 10140db:	call   QWORD PTR [rip+0xfffffffffffecf87]        # 0x1001068
 10140e1:	test   rdi,rdi
 10140e4:	je     0x10140ef
 10140e6:	mov    rcx,rdi
 10140e9:	call   QWORD PTR [rip+0xfffffffffffed5c1]        # 0x10016b0
 10140ef:	mov    eax,ebx
 10140f1:	mov    rcx,QWORD PTR [rsp+0x98]
 10140f9:	xor    rcx,rsp
 10140fc:	call   0x103ff40
 1014101:	lea    r11,[rsp+0xa0]
 1014109:	mov    rbx,QWORD PTR [r11+0x28]
 101410d:	mov    rsi,QWORD PTR [r11+0x30]
 1014111:	mov    rsp,r11
 1014114:	pop    r15
 1014116:	pop    r14
 1014118:	pop    rdi
 1014119:	ret    
 101411a:	int3   
 101411b:	int3   
 101411c:	int3   
 101411d:	int3   
 101411e:	int3   
 101411f:	int3   
 1014120:	mov    r11,rsp
 1014123:	sub    rsp,0x48
 1014127:	xor    r8d,r8d
 101412a:	mov    QWORD PTR [r11+0x8],r8
 101412e:	mov    QWORD PTR [r11+0x18],r8
 1014132:	test   rcx,rcx
 1014135:	je     0x1014192
 1014137:	cmp    rcx,0xffffffffffffffff
 101413b:	je     0x1014192
 101413d:	lea    rax,[r11+0x18]
 1014141:	lea    r9,[r11+0x8]
 1014145:	mov    QWORD PTR [r11-0x10],rax
 1014149:	mov    QWORD PTR [r11-0x18],r8
 101414d:	mov    QWORD PTR [r11-0x20],r8
 1014151:	mov    QWORD PTR [r11-0x28],r8
 1014155:	mov    r8d,0x1
 101415b:	call   QWORD PTR [rip+0xfffffffffffecf2f]        # 0x1001090
 1014161:	test   eax,eax
 1014163:	jne    0x1014197
 1014165:	mov    rcx,QWORD PTR [rsp+0x50]
 101416a:	mov    QWORD PTR [rsp+0x40],rbx
 101416f:	call   0x1013e20
 1014174:	mov    rcx,QWORD PTR [rsp+0x60]
 1014179:	mov    ebx,eax
 101417b:	test   rcx,rcx
 101417e:	je     0x1014186
 1014180:	call   QWORD PTR [rip+0xfffffffffffed0aa]        # 0x1001230
 1014186:	mov    eax,ebx
 1014188:	mov    rbx,QWORD PTR [rsp+0x40]
 101418d:	add    rsp,0x48
 1014191:	ret    
 1014192:	mov    eax,0x57
 1014197:	add    rsp,0x48
 101419b:	ret    
 101419c:	int3   
 101419d:	int3   
 101419e:	int3   
 101419f:	int3   
 10141a0:	int3   
 10141a1:	int3   
 10141a2:	int3   
 10141a3:	int3   
 10141a4:	int3   
 10141a5:	int3   
 10141a6:	int3   
 10141a7:	int3   
 10141a8:	int3   
 10141a9:	int3   
 10141aa:	int3   
 10141ab:	int3   
 10141ac:	int3   
 10141ad:	int3   
 10141ae:	int3   
 10141af:	int3   
 10141b0:	mov    QWORD PTR [rsp+0x8],rcx
 10141b5:	push   rdi
 10141b6:	sub    rsp,0x30
 10141ba:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 10141c3:	mov    QWORD PTR [rsp+0x48],rbx
 10141c8:	mov    rdi,rcx
 10141cb:	lea    rax,[rip+0xfffffffffffedc4e]        # 0x1001e20
 10141d2:	mov    QWORD PTR [rcx+0x10],rax
 10141d6:	mov    rbx,QWORD PTR [rcx+0x18]
 10141da:	test   rbx,rbx
 10141dd:	je     0x10141f2
 10141df:	nop
 10141e0:	lea    rcx,[rbx+0x10]
 10141e4:	call   QWORD PTR [rip+0xfffffffffffed8be]        # 0x1001aa8
 10141ea:	mov    rbx,QWORD PTR [rbx]
 10141ed:	test   rbx,rbx
 10141f0:	jne    0x10141e0
 10141f2:	xor    ebx,ebx
 10141f4:	mov    QWORD PTR [rdi+0x28],rbx
 10141f8:	mov    QWORD PTR [rdi+0x30],rbx
 10141fc:	mov    QWORD PTR [rdi+0x20],rbx
 1014200:	mov    QWORD PTR [rdi+0x18],rbx
 1014204:	mov    rcx,QWORD PTR [rdi+0x38]
 1014208:	call   0x103f9ae
 101420d:	mov    QWORD PTR [rdi+0x38],rbx
 1014211:	lea    rcx,[rdi+0x8]
 1014215:	mov    rbx,QWORD PTR [rsp+0x48]
 101421a:	add    rsp,0x30
 101421e:	pop    rdi
 101421f:	rex.W jmp QWORD PTR [rip+0xfffffffffffed882]        # 0x1001aa8
 1014226:	int3   
 1014227:	int3   
 1014228:	int3   
 1014229:	int3   
 101422a:	int3   
 101422b:	int3   
 101422c:	int3   
 101422d:	int3   
 101422e:	int3   
 101422f:	int3   
 1014230:	mov    QWORD PTR [rsp+0x8],rcx
 1014235:	push   rbp
 1014236:	push   rsi
 1014237:	push   rdi
 1014238:	push   r12
 101423a:	push   r13
 101423c:	push   r14
 101423e:	push   r15
 1014240:	lea    rbp,[rsp-0x27]
 1014245:	sub    rsp,0x90
 101424c:	mov    QWORD PTR [rbp+0xf],0xfffffffffffffffe
 1014254:	mov    QWORD PTR [rsp+0xe0],rbx
 101425c:	movzx  r13d,r9b
 1014260:	mov    r12,r8
 1014263:	mov    rsi,rdx
 1014266:	mov    r15,rcx
 1014269:	lea    rcx,[rbp+0x6f]
 101426d:	call   QWORD PTR [rip+0xfffffffffffed84d]        # 0x1001ac0
 1014273:	nop
 1014274:	lea    rax,[rip+0xfffffffffffedba5]        # 0x1001e20
 101427b:	mov    QWORD PTR [rbp-0x29],rax
 101427f:	xor    edi,edi
 1014281:	mov    QWORD PTR [rbp-0x11],rdi
 1014285:	mov    QWORD PTR [rbp-0x9],rdi
 1014289:	mov    QWORD PTR [rbp-0x19],rdi
 101428d:	mov    QWORD PTR [rbp-0x21],rdi
 1014291:	mov    QWORD PTR [rbp-0x1],rdi
 1014295:	mov    QWORD PTR [rbp+0x7],0xa
 101429d:	lea    rcx,[rbp+0x6f]
 10142a1:	call   QWORD PTR [rip+0xfffffffffffed661]        # 0x1001908
 10142a7:	mov    rbx,QWORD PTR [rbp-0x21]
 10142ab:	test   rbx,rbx
 10142ae:	je     0x10142c2
 10142b0:	lea    rcx,[rbx+0x10]
 10142b4:	call   QWORD PTR [rip+0xfffffffffffed7ee]        # 0x1001aa8
 10142ba:	mov    rbx,QWORD PTR [rbx]
 10142bd:	test   rbx,rbx
 10142c0:	jne    0x10142b0
 10142c2:	mov    QWORD PTR [rbp-0x11],rdi
 10142c6:	mov    QWORD PTR [rbp-0x9],rdi
 10142ca:	mov    QWORD PTR [rbp-0x19],rdi
 10142ce:	mov    QWORD PTR [rbp-0x21],rdi
 10142d2:	mov    rcx,QWORD PTR [rbp-0x1]
 10142d6:	call   0x103f9ae
 10142db:	mov    QWORD PTR [rbp-0x1],rdi
 10142df:	mov    rbx,QWORD PTR [rsi+0x8]
 10142e3:	test   rbx,rbx
 10142e6:	je     0x1014302
 10142e8:	nop    DWORD PTR [rax+rax*1+0x0]
 10142f0:	lea    rcx,[rbx+0x10]
 10142f4:	call   QWORD PTR [rip+0xfffffffffffed7ae]        # 0x1001aa8
 10142fa:	mov    rbx,QWORD PTR [rbx]
 10142fd:	test   rbx,rbx
 1014300:	jne    0x10142f0
 1014302:	mov    QWORD PTR [rsi+0x18],rdi
 1014306:	mov    QWORD PTR [rsi+0x20],rdi
 101430a:	mov    QWORD PTR [rsi+0x10],rdi
 101430e:	mov    QWORD PTR [rsi+0x8],rdi
 1014312:	mov    rcx,QWORD PTR [rsi+0x28]
 1014316:	call   0x103f9ae
 101431b:	mov    QWORD PTR [rsi+0x28],rdi
 101431f:	mov    rcx,r15
 1014322:	call   QWORD PTR [rip+0xfffffffffffed7c0]        # 0x1001ae8
 1014328:	mov    rcx,rax
 101432b:	mov    rdx,r12
 101432e:	call   0x10301b0
 1014333:	movzx  edi,al
 1014336:	lea    rax,[rbp-0x39]
 101433a:	mov    QWORD PTR [rbp-0x31],rax
 101433e:	mov    rdx,r15
 1014341:	lea    rcx,[rbp-0x39]
 1014345:	call   QWORD PTR [rip+0xfffffffffffed66d]        # 0x10019b8
 101434b:	nop
 101434c:	movzx  r9d,r13b
 1014350:	mov    r8,r12
 1014353:	lea    rdx,[rbp+0x6f]
 1014357:	mov    rcx,rax
 101435a:	call   0x102eef0
 101435f:	test   al,al
 1014361:	je     0x1014399
 1014363:	xor    r8d,r8d
 1014366:	mov    rdx,QWORD PTR [rsi+0x10]
 101436a:	mov    rcx,rsi
 101436d:	call   0x100c430
 1014372:	mov    rbx,rax
 1014375:	lea    rcx,[rax+0x10]
 1014379:	lea    rdx,[rbp+0x6f]
 101437d:	call   QWORD PTR [rip+0xfffffffffffed71d]        # 0x1001aa0
 1014383:	mov    r11,QWORD PTR [rsi+0x10]
 1014387:	test   r11,r11
 101438a:	je     0x1014391
 101438c:	mov    QWORD PTR [r11],rbx
 101438f:	jmp    0x1014395
 1014391:	mov    QWORD PTR [rsi+0x8],rbx
 1014395:	mov    QWORD PTR [rsi+0x10],rbx
 1014399:	lea    rax,[rbp-0x39]
 101439d:	mov    rdx,r15
 10143a0:	lea    rcx,[rbp-0x39]
 10143a4:	mov    QWORD PTR [rbp-0x31],rax
 10143a8:	call   QWORD PTR [rip+0xfffffffffffed60a]        # 0x10019b8
 10143ae:	test   dil,dil
 10143b1:	jne    0x10143bb
 10143b3:	mov    r8d,0x20019
 10143b9:	jmp    0x10143ec
 10143bb:	mov    r9,r12
 10143be:	mov    r8d,0x20219
 10143c4:	lea    rdx,[rbp-0x29]
 10143c8:	mov    rcx,rax
 10143cb:	call   0x102f130
 10143d0:	lea    r11,[rbp-0x39]
 10143d4:	mov    QWORD PTR [rbp-0x31],r11
 10143d8:	mov    rdx,r15
 10143db:	lea    rcx,[rbp-0x39]
 10143df:	call   QWORD PTR [rip+0xfffffffffffed5d3]        # 0x10019b8
 10143e5:	nop
 10143e6:	mov    r8d,0x20119
 10143ec:	mov    r9,r12
 10143ef:	lea    rdx,[rbp-0x29]
 10143f3:	mov    rcx,rax
 10143f6:	call   0x102f130
 10143fb:	lea    rcx,[rbp+0x6f]
 10143ff:	call   QWORD PTR [rip+0xfffffffffffed503]        # 0x1001908
 1014405:	mov    r14,QWORD PTR [rbp-0x21]
 1014409:	test   r14,r14
 101440c:	je     0x10144e7
 1014412:	lea    rax,[rbp-0x39]
 1014416:	mov    QWORD PTR [rbp+0x1f],rax
 101441a:	lea    rax,[rbp-0x31]
 101441e:	mov    QWORD PTR [rbp+0x17],rax
 1014422:	lea    rdx,[r14+0x10]
 1014426:	lea    rcx,[rbp-0x39]
 101442a:	call   QWORD PTR [rip+0xfffffffffffed588]        # 0x10019b8
 1014430:	mov    rbx,rax
 1014433:	mov    rdx,r15
 1014436:	lea    rcx,[rbp-0x31]
 101443a:	call   QWORD PTR [rip+0xfffffffffffed578]        # 0x10019b8
 1014440:	nop
 1014441:	mov    BYTE PTR [rsp+0x20],r13b
 1014446:	mov    r9,r12
 1014449:	lea    r8,[rbp+0x6f]
 101444d:	mov    rdx,rbx
 1014450:	mov    rcx,rax
 1014453:	call   0x1014570
 1014458:	test   al,al
 101445a:	je     0x10144d4
 101445c:	mov    rbx,QWORD PTR [rsi+0x8]
 1014460:	test   rbx,rbx
 1014463:	je     0x101449e
 1014465:	lea    rdi,[rbx+0x10]
 1014469:	test   rdi,rdi
 101446c:	je     0x10144e1
 101446e:	lea    rcx,[rbp+0x6f]
 1014472:	call   QWORD PTR [rip+0xfffffffffffed670]        # 0x1001ae8
 1014478:	mov    rdx,rax
 101447b:	mov    rcx,rdi
 101447e:	call   QWORD PTR [rip+0xfffffffffffed57c]        # 0x1001a00
 1014484:	xor    ecx,ecx
 1014486:	test   eax,eax
 1014488:	sete   cl
 101448b:	test   ecx,ecx
 101448d:	jne    0x1014499
 101448f:	mov    rbx,QWORD PTR [rbx]
 1014492:	test   rbx,rbx
 1014495:	jne    0x1014465
 1014497:	jmp    0x101449e
 1014499:	test   rbx,rbx
 101449c:	jne    0x10144d4
 101449e:	xor    r8d,r8d
 10144a1:	mov    rdx,QWORD PTR [rsi+0x10]
 10144a5:	mov    rcx,rsi
 10144a8:	call   0x100c430
 10144ad:	mov    rbx,rax
 10144b0:	lea    rcx,[rax+0x10]
 10144b4:	lea    rdx,[rbp+0x6f]
 10144b8:	call   QWORD PTR [rip+0xfffffffffffed5e2]        # 0x1001aa0
 10144be:	mov    r11,QWORD PTR [rsi+0x10]
 10144c2:	test   r11,r11
 10144c5:	je     0x10144cc
 10144c7:	mov    QWORD PTR [r11],rbx
 10144ca:	jmp    0x10144d0
 10144cc:	mov    QWORD PTR [rsi+0x8],rbx
 10144d0:	mov    QWORD PTR [rsi+0x10],rbx
 10144d4:	mov    r14,QWORD PTR [r14]
 10144d7:	test   r14,r14
 10144da:	je     0x10144e7
 10144dc:	jmp    0x1014422
 10144e1:	call   0x103f972
 10144e6:	nop
 10144e7:	lea    rax,[rip+0xfffffffffffed932]        # 0x1001e20
 10144ee:	mov    QWORD PTR [rbp-0x29],rax
 10144f2:	mov    rbx,QWORD PTR [rbp-0x21]
 10144f6:	test   rbx,rbx
 10144f9:	je     0x1014512
 10144fb:	nop    DWORD PTR [rax+rax*1+0x0]
 1014500:	lea    rcx,[rbx+0x10]
 1014504:	call   QWORD PTR [rip+0xfffffffffffed59e]        # 0x1001aa8
 101450a:	mov    rbx,QWORD PTR [rbx]
 101450d:	test   rbx,rbx
 1014510:	jne    0x1014500
 1014512:	xor    ebx,ebx
 1014514:	mov    QWORD PTR [rbp-0x11],rbx
 1014518:	mov    QWORD PTR [rbp-0x9],rbx
 101451c:	mov    QWORD PTR [rbp-0x19],rbx
 1014520:	mov    QWORD PTR [rbp-0x21],rbx
 1014524:	mov    rcx,QWORD PTR [rbp-0x1]
 1014528:	call   0x103f9ae
 101452d:	mov    QWORD PTR [rbp-0x1],rbx
 1014531:	lea    rcx,[rbp+0x6f]
 1014535:	call   QWORD PTR [rip+0xfffffffffffed56d]        # 0x1001aa8
 101453b:	nop
 101453c:	mov    rcx,r15
 101453f:	call   QWORD PTR [rip+0xfffffffffffed563]        # 0x1001aa8
 1014545:	mov    rbx,QWORD PTR [rsp+0xe0]
 101454d:	add    rsp,0x90
 1014554:	pop    r15
 1014556:	pop    r14
 1014558:	pop    r13
 101455a:	pop    r12
 101455c:	pop    rdi
 101455d:	pop    rsi
 101455e:	pop    rbp
 101455f:	ret    
 1014560:	int3   
 1014561:	int3   
 1014562:	int3   
 1014563:	int3   
 1014564:	int3   
 1014565:	int3   
 1014566:	int3   
 1014567:	int3   
 1014568:	int3   
 1014569:	int3   
 101456a:	int3   
 101456b:	int3   
 101456c:	int3   
 101456d:	int3   
 101456e:	int3   
 101456f:	int3   
 1014570:	mov    QWORD PTR [rsp+0x10],rdx
 1014575:	mov    QWORD PTR [rsp+0x8],rcx
 101457a:	push   rbp
 101457b:	push   rsi
 101457c:	push   rdi
 101457d:	push   r12
 101457f:	push   r13
 1014581:	push   r14
 1014583:	push   r15
 1014585:	mov    rbp,rsp
 1014588:	sub    rsp,0x70
 101458c:	mov    QWORD PTR [rbp-0x18],0xfffffffffffffffe
 1014594:	mov    QWORD PTR [rsp+0xc0],rbx
 101459c:	mov    r12,r9
 101459f:	mov    r13,r8
 10145a2:	mov    r14,rdx
 10145a5:	mov    r15,rcx
 10145a8:	mov    DWORD PTR [rbp-0x3c],0x20
 10145af:	mov    BYTE PTR [rbp-0x40],0x0
 10145b3:	lea    rdx,[rip+0xfffffffffffed856]        # 0x1001e10
 10145ba:	lea    rcx,[rbp-0x38]
 10145be:	call   QWORD PTR [rip+0xfffffffffffed4ec]        # 0x1001ab0
 10145c4:	nop
 10145c5:	mov    rcx,r13
 10145c8:	call   QWORD PTR [rip+0xfffffffffffed33a]        # 0x1001908
 10145ce:	mov    rcx,r14
 10145d1:	call   QWORD PTR [rip+0xfffffffffffed369]        # 0x1001940
 10145d7:	test   al,al
 10145d9:	je     0x1014600
 10145db:	lea    rcx,[rbp-0x38]
 10145df:	call   QWORD PTR [rip+0xfffffffffffed4c3]        # 0x1001aa8
 10145e5:	nop
 10145e6:	mov    rcx,r15
 10145e9:	call   QWORD PTR [rip+0xfffffffffffed4b9]        # 0x1001aa8
 10145ef:	nop
 10145f0:	mov    rcx,r14
 10145f3:	call   QWORD PTR [rip+0xfffffffffffed4af]        # 0x1001aa8
 10145f9:	xor    al,al
 10145fb:	jmp    0x1014829
 1014600:	lea    rdx,[rip+0xfffffffffffee501]        # 0x1002b08
 1014607:	mov    rcx,r14
 101460a:	call   QWORD PTR [rip+0xfffffffffffed450]        # 0x1001a60
 1014610:	test   eax,eax
 1014612:	jne    0x101465a
 1014614:	lea    rax,[rbp-0x30]
 1014618:	mov    QWORD PTR [rbp-0x20],rax
 101461c:	mov    rdx,r15
 101461f:	lea    rcx,[rbp-0x30]
 1014623:	call   QWORD PTR [rip+0xfffffffffffed38f]        # 0x10019b8
 1014629:	nop
 101462a:	movzx  r9d,BYTE PTR [rbp+0x60]
 101462f:	mov    r8,r12
 1014632:	mov    rdx,r13
 1014635:	mov    rcx,rax
 1014638:	call   0x102eef0
 101463d:	movzx  ebx,al
 1014640:	lea    rcx,[rbp-0x38]
 1014644:	call   QWORD PTR [rip+0xfffffffffffed45e]        # 0x1001aa8
 101464a:	nop
 101464b:	mov    rcx,r15
 101464e:	call   QWORD PTR [rip+0xfffffffffffed454]        # 0x1001aa8
 1014654:	nop
 1014655:	jmp    0x101481d
 101465a:	cmp    BYTE PTR [rbp+0x60],0x0
 101465e:	je     0x10146c2
 1014660:	lea    rax,[rbp-0x30]
 1014664:	mov    QWORD PTR [rbp-0x20],rax
 1014668:	lea    rax,[rbp-0x28]
 101466c:	mov    QWORD PTR [rbp-0x10],rax
 1014670:	mov    rdx,r14
 1014673:	lea    rcx,[rbp-0x30]
 1014677:	call   QWORD PTR [rip+0xfffffffffffed33b]        # 0x10019b8
 101467d:	mov    rbx,rax
 1014680:	mov    rdx,r15
 1014683:	lea    rcx,[rbp-0x28]
 1014687:	call   QWORD PTR [rip+0xfffffffffffed32b]        # 0x10019b8
 101468d:	nop
 101468e:	mov    rdx,rbx
 1014691:	mov    rcx,rax
 1014694:	call   0x102e6c0
 1014699:	test   al,al
 101469b:	jne    0x10146c2
 101469d:	lea    rcx,[rbp-0x38]
 10146a1:	call   QWORD PTR [rip+0xfffffffffffed401]        # 0x1001aa8
 10146a7:	nop
 10146a8:	mov    rcx,r15
 10146ab:	call   QWORD PTR [rip+0xfffffffffffed3f7]        # 0x1001aa8
 10146b1:	nop
 10146b2:	mov    rcx,r14
 10146b5:	call   QWORD PTR [rip+0xfffffffffffed3ed]        # 0x1001aa8
 10146bb:	xor    al,al
 10146bd:	jmp    0x1014829
 10146c2:	lea    rsi,[rip+0x4ebef]        # 0x10632b8
 10146c9:	nop    DWORD PTR [rax+0x0]
 10146d0:	mov    rdx,QWORD PTR [rsi]
 10146d3:	lea    rcx,[rbp-0x30]
 10146d7:	call   QWORD PTR [rip+0xfffffffffffed3d3]        # 0x1001ab0
 10146dd:	nop
 10146de:	lea    r8,[rbp-0x30]
 10146e2:	lea    rdx,[rip+0xffffffffffff1717]        # 0x1005e00
 10146e9:	lea    rcx,[rbp-0x20]
 10146ed:	call   0x1013d70
 10146f2:	mov    rbx,rax
 10146f5:	mov    rcx,r14
 10146f8:	call   QWORD PTR [rip+0xfffffffffffed3ea]        # 0x1001ae8
 10146fe:	mov    rdi,rax
 1014701:	mov    rcx,rbx
 1014704:	call   QWORD PTR [rip+0xfffffffffffed3de]        # 0x1001ae8
 101470a:	mov    rbx,rax
 101470d:	mov    rcx,r15
 1014710:	call   QWORD PTR [rip+0xfffffffffffed3d2]        # 0x1001ae8
 1014716:	mov    rdx,rax
 1014719:	mov    QWORD PTR [rsp+0x28],r12
 101471e:	mov    QWORD PTR [rsp+0x20],rdi
 1014723:	mov    r9,rbx
 1014726:	mov    r8,0xffffffff80000002
 101472d:	lea    rcx,[rbp-0x28]
 1014731:	call   0x1033f20
 1014736:	nop
 1014737:	mov    rdx,rax
 101473a:	lea    rcx,[rbp-0x38]
 101473e:	call   QWORD PTR [rip+0xfffffffffffed35c]        # 0x1001aa0
 1014744:	nop
 1014745:	lea    rcx,[rbp-0x28]
 1014749:	call   QWORD PTR [rip+0xfffffffffffed359]        # 0x1001aa8
 101474f:	nop
 1014750:	lea    rcx,[rbp-0x20]
 1014754:	call   QWORD PTR [rip+0xfffffffffffed34e]        # 0x1001aa8
 101475a:	lea    rcx,[rbp-0x38]
 101475e:	call   QWORD PTR [rip+0xfffffffffffed38c]        # 0x1001af0
 1014764:	test   eax,eax
 1014766:	jne    0x1014788
 1014768:	lea    rcx,[rbp-0x30]
 101476c:	call   QWORD PTR [rip+0xfffffffffffed336]        # 0x1001aa8
 1014772:	add    rsi,0x20
 1014776:	lea    rax,[rip+0x4eb9b]        # 0x1063318
 101477d:	cmp    rsi,rax
 1014780:	jl     0x10146d0
 1014786:	jmp    0x1014792
 1014788:	lea    rcx,[rbp-0x30]
 101478c:	call   QWORD PTR [rip+0xfffffffffffed316]        # 0x1001aa8
 1014792:	lea    rcx,[rbp-0x38]
 1014796:	call   QWORD PTR [rip+0xfffffffffffed354]        # 0x1001af0
 101479c:	test   eax,eax
 101479e:	jne    0x10147ad
 10147a0:	mov    rdx,r14
 10147a3:	lea    rcx,[rbp-0x38]
 10147a7:	call   QWORD PTR [rip+0xfffffffffffed2f3]        # 0x1001aa0
 10147ad:	lea    r8,[rbp-0x38]
 10147b1:	lea    rdx,[rip+0xffffffffffff16b8]        # 0x1005e70
 10147b8:	lea    rcx,[rbp-0x20]
 10147bc:	call   0x1013d70
 10147c1:	nop
 10147c2:	mov    rcx,rax
 10147c5:	call   QWORD PTR [rip+0xfffffffffffed31d]        # 0x1001ae8
 10147cb:	mov    rbx,rax
 10147ce:	mov    rcx,r15
 10147d1:	call   QWORD PTR [rip+0xfffffffffffed311]        # 0x1001ae8
 10147d7:	mov    rcx,rax
 10147da:	lea    rax,[rbp-0x40]
 10147de:	mov    QWORD PTR [rsp+0x28],rax
 10147e3:	lea    rax,[rbp-0x3c]
 10147e7:	mov    QWORD PTR [rsp+0x20],rax
 10147ec:	mov    r9,r13
 10147ef:	mov    r8,r12
 10147f2:	mov    rdx,rbx
 10147f5:	call   0x102cff0
 10147fa:	movzx  ebx,al
 10147fd:	lea    rcx,[rbp-0x20]
 1014801:	call   QWORD PTR [rip+0xfffffffffffed2a1]        # 0x1001aa8
 1014807:	nop
 1014808:	lea    rcx,[rbp-0x38]
 101480c:	call   QWORD PTR [rip+0xfffffffffffed296]        # 0x1001aa8
 1014812:	nop
 1014813:	mov    rcx,r15
 1014816:	call   QWORD PTR [rip+0xfffffffffffed28c]        # 0x1001aa8
 101481c:	nop
 101481d:	mov    rcx,r14
 1014820:	call   QWORD PTR [rip+0xfffffffffffed282]        # 0x1001aa8
 1014826:	movzx  eax,bl
 1014829:	mov    rbx,QWORD PTR [rsp+0xc0]
 1014831:	add    rsp,0x70
 1014835:	pop    r15
 1014837:	pop    r14
 1014839:	pop    r13
 101483b:	pop    r12
 101483d:	pop    rdi
 101483e:	pop    rsi
 101483f:	pop    rbp
 1014840:	ret    
 1014841:	int3   
 1014842:	int3   
 1014843:	int3   
 1014844:	int3   
 1014845:	int3   
 1014846:	int3   
 1014847:	int3   
 1014848:	int3   
 1014849:	int3   
 101484a:	int3   
 101484b:	int3   
 101484c:	int3   
 101484d:	int3   
 101484e:	int3   
 101484f:	int3   
 1014850:	mov    QWORD PTR [rsp+0x8],rcx
 1014855:	push   rsi
 1014856:	push   rdi
 1014857:	push   r12
 1014859:	push   r14
 101485b:	push   r15
 101485d:	sub    rsp,0x30
 1014861:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
 101486a:	mov    QWORD PTR [rsp+0x68],rbx
 101486f:	mov    QWORD PTR [rsp+0x70],rbp
 1014874:	mov    r15,r9
 1014877:	mov    r14,r8
 101487a:	mov    r12,rdx
 101487d:	mov    rbx,rcx
 1014880:	xor    ebp,ebp
 1014882:	mov    DWORD PTR [rsp+0x20],ebp
 1014886:	cmp    DWORD PTR [rsp+0xc8],ebp
 101488d:	je     0x10148a8
 101488f:	lea    rax,[rip+0xfffffffffffefda2]        # 0x1004638
 1014896:	mov    QWORD PTR [rcx+0x8],rax
 101489a:	lea    rax,[rip+0xfffffffffffef9c7]        # 0x1004268
 10148a1:	mov    QWORD PTR [rcx+0x130],rax
 10148a8:	lea    rax,[rip+0xfffffffffffefa29]        # 0x10042d8
 10148af:	mov    QWORD PTR [rcx],rax
 10148b2:	mov    rax,QWORD PTR [rcx+0x8]
 10148b6:	movsxd rcx,DWORD PTR [rax+0x4]
 10148ba:	lea    rax,[rip+0xfffffffffffefb47]        # 0x1004408
 10148c1:	mov    QWORD PTR [rcx+rbx*1+0x8],rax
 10148c6:	lea    rax,[rip+0xfffffffffffefbdb]        # 0x10044a8
 10148cd:	mov    QWORD PTR [rbx],rax
 10148d0:	mov    rax,QWORD PTR [rbx+0x8]
 10148d4:	movsxd rcx,DWORD PTR [rax+0x4]
 10148d8:	lea    rax,[rip+0xfffffffffffefcf9]        # 0x10045d8
 10148df:	mov    QWORD PTR [rcx+rbx*1+0x8],rax
 10148e4:	mov    rax,QWORD PTR [rbx+0x8]
 10148e8:	movsxd rcx,DWORD PTR [rax+0x4]
 10148ec:	lea    edx,[rcx-0x128]
 10148f2:	mov    DWORD PTR [rcx+rbx*1+0x4],edx
 10148f6:	lea    rsi,[rbx+0x10]
 10148fa:	mov    rcx,rsi
 10148fd:	call   QWORD PTR [rip+0xfffffffffffed1bd]        # 0x1001ac0
 1014903:	nop
 1014904:	lea    rcx,[rbx+0x18]
 1014908:	call   QWORD PTR [rip+0xfffffffffffed1b2]        # 0x1001ac0
 101490e:	nop
 101490f:	lea    rcx,[rbx+0x30]
 1014913:	call   QWORD PTR [rip+0xfffffffffffed1a7]        # 0x1001ac0
 1014919:	nop
 101491a:	lea    rcx,[rbx+0x90]
 1014921:	call   QWORD PTR [rip+0xfffffffffffed199]        # 0x1001ac0
 1014927:	nop
 1014928:	lea    rax,[rip+0xfffffffffffefb41]        # 0x1004470
 101492f:	mov    QWORD PTR [rbx+0xa0],rax
 1014936:	mov    QWORD PTR [rbx+0xa8],rbp
 101493d:	mov    QWORD PTR [rbx+0xc0],rbp
 1014944:	mov    QWORD PTR [rbx+0xb8],rbp
 101494b:	mov    QWORD PTR [rbx+0xb0],rbp
 1014952:	lea    rax,[rip+0xfffffffffffee0e7]        # 0x1002a40
 1014959:	mov    QWORD PTR [rbx+0xf0],rax
 1014960:	mov    QWORD PTR [rbx+0xf8],rbp
 1014967:	mov    DWORD PTR [rbx+0x100],0x11
 1014971:	mov    QWORD PTR [rbx+0x108],rbp
 1014978:	mov    QWORD PTR [rbx+0x110],rbp
 101497f:	mov    QWORD PTR [rbx+0x118],rbp
 1014986:	mov    QWORD PTR [rbx+0x120],0xa
 1014991:	mov    rcx,rbx
 1014994:	call   0x10161e0
 1014999:	mov    rdx,r14
 101499c:	mov    rcx,rsi
 101499f:	call   QWORD PTR [rip+0xfffffffffffed0f3]        # 0x1001a98
 10149a5:	mov    rdx,r15
 10149a8:	lea    rcx,[rbx+0x18]
 10149ac:	call   QWORD PTR [rip+0xfffffffffffed0e6]        # 0x1001a98
 10149b2:	mov    r11,QWORD PTR [rsp+0x88]
 10149ba:	mov    QWORD PTR [rbx+0xd0],r11
 10149c1:	mov    rax,QWORD PTR [rsp+0xb0]
 10149c9:	mov    QWORD PTR [rbx+0x88],rax
 10149d0:	mov    rax,QWORD PTR [rsp+0x90]
 10149d8:	mov    QWORD PTR [rip+0x4e939],rax        # 0x1063318
 10149df:	mov    rax,QWORD PTR [rsp+0x98]
 10149e7:	mov    QWORD PTR [rip+0x4e932],rax        # 0x1063320
 10149ee:	mov    rax,QWORD PTR [rsp+0xa0]
 10149f6:	mov    QWORD PTR [rip+0x4e92b],rax        # 0x1063328
 10149fd:	mov    rax,QWORD PTR [rsp+0xa8]
 1014a05:	mov    QWORD PTR [rip+0x4ef0c],rax        # 0x1063918
 1014a0c:	mov    QWORD PTR [rbx+0xd8],r12
 1014a13:	mov    DWORD PTR [rbx+0x38],ebp
 1014a16:	mov    DWORD PTR [rbx+0x98],ebp
 1014a1c:	mov    QWORD PTR [rbx+0x50],0xffffffffffffffff
 1014a24:	xor    eax,eax
 1014a26:	mov    QWORD PTR [rbx+0x58],rax
 1014a2a:	mov    QWORD PTR [rbx+0x60],rax
 1014a2e:	mov    QWORD PTR [rbx+0x68],rax
 1014a32:	mov    QWORD PTR [rbx+0x70],rax
 1014a36:	mov    rcx,QWORD PTR [rbx+0xa8]
 1014a3d:	test   rcx,rcx
 1014a40:	je     0x1014a6a
 1014a42:	mov    edx,ebp
 1014a44:	cmp    QWORD PTR [rbx+0xb0],rax
 1014a4b:	jle    0x1014a5e
 1014a4d:	mov    r8,QWORD PTR [rbx+0xb0]
 1014a54:	inc    edx
 1014a56:	movsxd rax,edx
 1014a59:	cmp    rax,r8
 1014a5c:	jl     0x1014a54
 1014a5e:	call   0x103f9c6
 1014a63:	mov    QWORD PTR [rbx+0xa8],rbp
 1014a6a:	mov    QWORD PTR [rbx+0xb8],rbp
 1014a71:	mov    QWORD PTR [rbx+0xb0],rbp
 1014a78:	mov    rax,QWORD PTR [rbx+0xd8]
 1014a7f:	mov    rcx,QWORD PTR [rax+0x8]
 1014a83:	mov    QWORD PTR [rbx+0xc8],rcx
 1014a8a:	mov    rax,QWORD PTR [rbx+0x8]
 1014a8e:	movsxd rcx,DWORD PTR [rax+0x4]
 1014a92:	lea    rdx,[rbx+0x8]
 1014a96:	add    rdx,rcx
 1014a99:	mov    rcx,r14
 1014a9c:	call   0x10301b0
 1014aa1:	mov    BYTE PTR [rbx+0x2a],al
 1014aa4:	movzx  eax,BYTE PTR [rsp+0xb8]
 1014aac:	mov    BYTE PTR [rbx+0x78],al
 1014aaf:	mov    DWORD PTR [rbx+0x20],ebp
 1014ab2:	movzx  eax,BYTE PTR [rsp+0xc0]
 1014aba:	mov    BYTE PTR [rbx+0x2b],al
 1014abd:	mov    edx,0x2e
 1014ac2:	xor    r8d,r8d
 1014ac5:	mov    rdi,QWORD PTR [rsp+0x80]
 1014acd:	mov    rcx,rdi
 1014ad0:	call   QWORD PTR [rip+0xfffffffffffece82]        # 0x1001958
 1014ad6:	mov    rcx,rdi
 1014ad9:	cmp    eax,0xffffffff
 1014adc:	je     0x1014ba7
 1014ae2:	mov    edx,0x2e
 1014ae7:	xor    r8d,r8d
 1014aea:	call   QWORD PTR [rip+0xfffffffffffece68]        # 0x1001958
 1014af0:	mov    r8d,eax
 1014af3:	lea    rdx,[rsp+0x88]
 1014afb:	mov    rcx,rdi
 1014afe:	call   QWORD PTR [rip+0xfffffffffffecf44]        # 0x1001a48
 1014b04:	nop
 1014b05:	mov    rcx,rax
 1014b08:	call   QWORD PTR [rip+0xfffffffffffecfda]        # 0x1001ae8
 1014b0e:	mov    rcx,rax
 1014b11:	call   QWORD PTR [rip+0xfffffffffffecc29]        # 0x1001740
 1014b17:	mov    DWORD PTR [rbx+0x24],eax
 1014b1a:	lea    rcx,[rsp+0x88]
 1014b22:	call   QWORD PTR [rip+0xfffffffffffecf80]        # 0x1001aa8
 1014b28:	cmp    DWORD PTR [rbx+0x24],0xa
 1014b2c:	jne    0x1014b7b
 1014b2e:	mov    edx,0x2e
 1014b33:	xor    r8d,r8d
 1014b36:	mov    rcx,rdi
 1014b39:	call   QWORD PTR [rip+0xfffffffffffece19]        # 0x1001958
 1014b3f:	lea    r8d,[rax+0x1]
 1014b43:	lea    rdx,[rsp+0x88]
 1014b4b:	mov    rcx,rdi
 1014b4e:	call   QWORD PTR [rip+0xfffffffffffecdcc]        # 0x1001920
 1014b54:	nop
 1014b55:	mov    ebp,0x1
 1014b5a:	mov    DWORD PTR [rsp+0x20],ebp
 1014b5e:	mov    rcx,rax
 1014b61:	call   QWORD PTR [rip+0xfffffffffffecf81]        # 0x1001ae8
 1014b67:	mov    rcx,rax
 1014b6a:	call   QWORD PTR [rip+0xfffffffffffecbd0]        # 0x1001740
 1014b70:	cmp    eax,0x32
 1014b73:	jne    0x1014b7b
 1014b75:	movzx  esi,bpl
 1014b79:	jmp    0x1014b7e
 1014b7b:	xor    sil,sil
 1014b7e:	test   bpl,0x1
 1014b82:	je     0x1014b99
 1014b84:	and    ebp,0xfffffffe
 1014b87:	mov    DWORD PTR [rsp+0x20],ebp
 1014b8b:	lea    rcx,[rsp+0x88]
 1014b93:	call   QWORD PTR [rip+0xfffffffffffecf0f]        # 0x1001aa8
 1014b99:	test   sil,sil
 1014b9c:	je     0x1014bb9
 1014b9e:	mov    DWORD PTR [rbx+0x20],0x32
 1014ba5:	jmp    0x1014bb9
 1014ba7:	call   QWORD PTR [rip+0xfffffffffffecf3b]        # 0x1001ae8
 1014bad:	mov    rcx,rax
 1014bb0:	call   QWORD PTR [rip+0xfffffffffffecb8a]        # 0x1001740
 1014bb6:	mov    DWORD PTR [rbx+0x24],eax
 1014bb9:	mov    rcx,rdi
 1014bbc:	call   QWORD PTR [rip+0xfffffffffffecee6]        # 0x1001aa8
 1014bc2:	mov    rax,rbx
 1014bc5:	mov    rbx,QWORD PTR [rsp+0x68]
 1014bca:	mov    rbp,QWORD PTR [rsp+0x70]
 1014bcf:	add    rsp,0x30
 1014bd3:	pop    r15
 1014bd5:	pop    r14
 1014bd7:	pop    r12
 1014bd9:	pop    rdi
 1014bda:	pop    rsi
 1014bdb:	ret    
 1014bdc:	int3   
 1014bdd:	int3   
 1014bde:	int3   
 1014bdf:	int3   
 1014be0:	int3   
 1014be1:	int3   
 1014be2:	int3   
 1014be3:	int3   
 1014be4:	int3   
 1014be5:	int3   
 1014be6:	int3   
 1014be7:	int3   
 1014be8:	int3   
 1014be9:	int3   
 1014bea:	int3   
 1014beb:	int3   
 1014bec:	int3   
 1014bed:	int3   
 1014bee:	int3   
 1014bef:	int3   
 1014bf0:	mov    QWORD PTR [rsp+0x8],rcx
 1014bf5:	push   rdi
 1014bf6:	push   r14
 1014bf8:	push   r15
 1014bfa:	sub    rsp,0x30
 1014bfe:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1014c07:	mov    QWORD PTR [rsp+0x58],rbx
 1014c0c:	mov    QWORD PTR [rsp+0x60],rbp
 1014c11:	mov    QWORD PTR [rsp+0x68],rsi
 1014c16:	mov    rbx,rcx
 1014c19:	lea    rax,[rip+0xfffffffffffef888]        # 0x10044a8
 1014c20:	mov    QWORD PTR [rcx],rax
 1014c23:	mov    rax,QWORD PTR [rcx+0x8]
 1014c27:	movsxd rcx,DWORD PTR [rax+0x4]
 1014c2b:	lea    rax,[rip+0xfffffffffffef9a6]        # 0x10045d8
 1014c32:	mov    QWORD PTR [rcx+rbx*1+0x8],rax
 1014c37:	mov    rax,QWORD PTR [rbx+0x8]
 1014c3b:	movsxd rcx,DWORD PTR [rax+0x4]
 1014c3f:	lea    edx,[rcx-0x128]
 1014c45:	mov    DWORD PTR [rcx+rbx*1+0x4],edx
 1014c49:	lea    rcx,[rbx+0x50]
 1014c4d:	call   0x1034510
 1014c52:	lea    rcx,[rbx+0x70]
 1014c56:	call   0x1034510
 1014c5b:	lea    rcx,[rbx+0xf0]
 1014c62:	call   0x1012a20
 1014c67:	cmp    QWORD PTR [rbx+0xe8],0x0
 1014c6f:	je     0x1014cad
 1014c71:	data16 data16 data16 data16 data16 data16 nop WORD PTR [rax+rax*1+0x0]
 1014c80:	mov    rdi,QWORD PTR [rbx+0xe8]
 1014c87:	mov    rsi,QWORD PTR [rdi+0x18]
 1014c8b:	test   rdi,rdi
 1014c8e:	je     0x1014ca0
 1014c90:	mov    rcx,rdi
 1014c93:	call   0x1012dc0
 1014c98:	mov    rcx,rdi
 1014c9b:	call   0x103f95a
 1014ca0:	mov    QWORD PTR [rbx+0xe8],rsi
 1014ca7:	cmp    rsi,0x0
 1014cab:	jne    0x1014c80
 1014cad:	xor    esi,esi
 1014caf:	mov    r14d,esi
 1014cb2:	mov    edi,esi
 1014cb4:	cmp    QWORD PTR [rbx+0xb0],rsi
 1014cbb:	jle    0x1014d1d
 1014cbd:	nop    DWORD PTR [rax]
 1014cc0:	test   rdi,rdi
 1014cc3:	js     0x1014d17
 1014cc5:	cmp    rdi,QWORD PTR [rbx+0xb0]
 1014ccc:	jge    0x1014d17
 1014cce:	mov    rax,QWORD PTR [rbx+0xa8]
 1014cd5:	cmp    QWORD PTR [rax+rdi*8],rsi
 1014cd9:	je     0x1014cfd
 1014cdb:	cmp    rdi,QWORD PTR [rbx+0xb0]
 1014ce2:	jge    0x1014d11
 1014ce4:	mov    rbp,QWORD PTR [rax+rdi*8]
 1014ce8:	test   rbp,rbp
 1014ceb:	je     0x1014cfd
 1014ced:	mov    rcx,rbp
 1014cf0:	call   0x103e210
 1014cf5:	mov    rcx,rbp
 1014cf8:	call   0x103f95a
 1014cfd:	inc    r14d
 1014d00:	inc    rdi
 1014d03:	movsxd rax,r14d
 1014d06:	cmp    rax,QWORD PTR [rbx+0xb0]
 1014d0d:	jge    0x1014d1d
 1014d0f:	jmp    0x1014cc0
 1014d11:	call   0x103f972
 1014d16:	int3   
 1014d17:	call   0x103f972
 1014d1c:	int3   
 1014d1d:	mov    rdi,QWORD PTR [rbx+0xe0]
 1014d24:	test   rdi,rdi
 1014d27:	je     0x1014d3a
 1014d29:	mov    rcx,rdi
 1014d2c:	call   0x100f580
 1014d31:	mov    rcx,rdi
 1014d34:	call   0x103f95a
 1014d39:	nop
 1014d3a:	lea    rax,[rip+0xfffffffffffedcff]        # 0x1002a40
 1014d41:	mov    QWORD PTR [rbx+0xf0],rax
 1014d48:	lea    rcx,[rbx+0xf0]
 1014d4f:	call   0x1012a20
 1014d54:	nop
 1014d55:	lea    rax,[rip+0xfffffffffffef714]        # 0x1004470
 1014d5c:	mov    QWORD PTR [rbx+0xa0],rax
 1014d63:	mov    rcx,QWORD PTR [rbx+0xa8]
 1014d6a:	test   rcx,rcx
 1014d6d:	je     0x1014d90
 1014d6f:	cmp    QWORD PTR [rbx+0xb0],0x0
 1014d77:	jle    0x1014d8a
 1014d79:	mov    rdx,QWORD PTR [rbx+0xb0]
 1014d80:	inc    esi
 1014d82:	movsxd rax,esi
 1014d85:	cmp    rax,rdx
 1014d88:	jl     0x1014d80
 1014d8a:	call   0x103f9c6
 1014d8f:	nop
 1014d90:	lea    rcx,[rbx+0x90]
 1014d97:	call   QWORD PTR [rip+0xfffffffffffecd0b]        # 0x1001aa8
 1014d9d:	nop
 1014d9e:	lea    rcx,[rbx+0x30]
 1014da2:	call   QWORD PTR [rip+0xfffffffffffecd00]        # 0x1001aa8
 1014da8:	nop
 1014da9:	lea    rcx,[rbx+0x18]
 1014dad:	call   QWORD PTR [rip+0xfffffffffffeccf5]        # 0x1001aa8
 1014db3:	nop
 1014db4:	lea    rcx,[rbx+0x10]
 1014db8:	mov    rbx,QWORD PTR [rsp+0x58]
 1014dbd:	mov    rbp,QWORD PTR [rsp+0x60]
 1014dc2:	mov    rsi,QWORD PTR [rsp+0x68]
 1014dc7:	add    rsp,0x30
 1014dcb:	pop    r15
 1014dcd:	pop    r14
 1014dcf:	pop    rdi
 1014dd0:	rex.W jmp QWORD PTR [rip+0xfffffffffffeccd1]        # 0x1001aa8
 1014dd7:	int3   
 1014dd8:	int3   
 1014dd9:	int3   
 1014dda:	int3   
 1014ddb:	int3   
 1014ddc:	int3   
 1014ddd:	int3   
 1014dde:	int3   
 1014ddf:	int3   
 1014de0:	mov    rax,rsp
 1014de3:	push   rdi
 1014de4:	push   r12
 1014de6:	push   r13
 1014de8:	push   r14
 1014dea:	push   r15
 1014dec:	sub    rsp,0x310
 1014df3:	mov    QWORD PTR [rax-0x278],0xfffffffffffffffe
 1014dfe:	mov    QWORD PTR [rax+0x10],rbx
 1014e02:	mov    QWORD PTR [rax+0x18],rsi
 1014e06:	mov    rax,QWORD PTR [rip+0x4ea63]        # 0x1063870
 1014e0d:	xor    rax,rsp
 1014e10:	mov    QWORD PTR [rsp+0x300],rax
 1014e18:	mov    rbx,rcx
 1014e1b:	mov    QWORD PTR [rsp+0x60],rcx
 1014e20:	mov    BYTE PTR [rsp+0x41],0x0
 1014e25:	xor    r14d,r14d
 1014e28:	mov    DWORD PTR [rsp+0x58],r14d
 1014e2d:	mov    r15d,r14d
 1014e30:	lea    rcx,[rsp+0x50]
 1014e35:	call   QWORD PTR [rip+0xfffffffffffecc85]        # 0x1001ac0
 1014e3b:	nop
 1014e3c:	mov    rcx,rbx
 1014e3f:	call   0x1019230
 1014e44:	test   al,al
 1014e46:	jne    0x1014e89
 1014e48:	mov    rax,QWORD PTR [rbx+0xd8]
 1014e4f:	cmp    BYTE PTR [rax+0xb9],r14b
 1014e56:	jne    0x1014e89
 1014e58:	xor    sil,sil
 1014e5b:	mov    rax,QWORD PTR [rbx+0x8]
 1014e5f:	movsxd rcx,DWORD PTR [rax+0x4]
 1014e63:	add    rcx,0x8
 1014e67:	add    rcx,rbx
 1014e6a:	mov    rax,QWORD PTR [rcx]
 1014e6d:	mov    BYTE PTR [rsp+0x28],0x1
 1014e72:	mov    BYTE PTR [rsp+0x20],0x1
 1014e77:	xor    r9d,r9d
 1014e7a:	xor    r8d,r8d
 1014e7d:	mov    edx,0xc000c380
 1014e82:	call   QWORD PTR [rax]
 1014e84:	jmp    0x1015657
 1014e89:	mov    rcx,QWORD PTR [rbx+0xd0]
 1014e90:	mov    rax,QWORD PTR [rcx]
 1014e93:	mov    r8,QWORD PTR [rbx+0xd8]
 1014e9a:	add    r8,0x120
 1014ea1:	mov    rdx,rbx
 1014ea4:	call   QWORD PTR [rax+0x18]
 1014ea7:	movzx  esi,al
 1014eaa:	mov    BYTE PTR [rsp+0x40],al
 1014eae:	test   al,al
 1014eb0:	jne    0x1014ee1
 1014eb2:	mov    rcx,QWORD PTR [rbx+0x8]
 1014eb6:	movsxd rdx,DWORD PTR [rcx+0x4]
 1014eba:	lea    rcx,[rbx+0x8]
 1014ebe:	add    rcx,rdx
 1014ec1:	mov    r10,QWORD PTR [rcx]
 1014ec4:	mov    BYTE PTR [rsp+0x28],0x1
 1014ec9:	mov    BYTE PTR [rsp+0x20],0x1
 1014ece:	xor    r9d,r9d
 1014ed1:	xor    r8d,r8d
 1014ed4:	mov    edx,0xc000c381
 1014ed9:	call   QWORD PTR [r10]
 1014edc:	jmp    0x1015657
 1014ee1:	cmp    BYTE PTR [rbx+0x28],0x0
 1014ee5:	jne    0x101501e
 1014eeb:	lea    rcx,[rsp+0x68]
 1014ef0:	call   QWORD PTR [rip+0xfffffffffffecbca]        # 0x1001ac0
 1014ef6:	nop
 1014ef7:	mov    rcx,QWORD PTR [rbx+0xd8]
 1014efe:	add    rcx,0x78
 1014f02:	call   QWORD PTR [rip+0xfffffffffffecbe0]        # 0x1001ae8
 1014f08:	mov    rdi,rax
 1014f0b:	lea    rcx,[rbx+0x10]
 1014f0f:	call   QWORD PTR [rip+0xfffffffffffecbd3]        # 0x1001ae8
 1014f15:	mov    rdx,rax
 1014f18:	mov    r8,rdi
 1014f1b:	lea    rcx,[rsp+0x90]
 1014f23:	call   0x1030800
 1014f28:	nop
 1014f29:	mov    rdx,rax
 1014f2c:	lea    rcx,[rsp+0x68]
 1014f31:	call   QWORD PTR [rip+0xfffffffffffecb69]        # 0x1001aa0
 1014f37:	nop
 1014f38:	lea    rcx,[rsp+0x90]
 1014f40:	call   QWORD PTR [rip+0xfffffffffffecb62]        # 0x1001aa8
 1014f46:	mov    rcx,QWORD PTR [rbx+0xd8]
 1014f4d:	sub    rcx,0xffffffffffffff80
 1014f51:	call   QWORD PTR [rip+0xfffffffffffecb91]        # 0x1001ae8
 1014f57:	mov    rdi,rax
 1014f5a:	lea    rcx,[rsp+0x68]
 1014f5f:	call   QWORD PTR [rip+0xfffffffffffecb83]        # 0x1001ae8
 1014f65:	mov    rcx,rax
 1014f68:	mov    rdx,rdi
 1014f6b:	call   0x1030910
 1014f70:	mov    edi,eax
 1014f72:	test   eax,eax
 1014f74:	je     0x1015013
 1014f7a:	lea    rcx,[rsp+0x70]
 1014f7f:	call   QWORD PTR [rip+0xfffffffffffecb3b]        # 0x1001ac0
 1014f85:	nop
 1014f86:	mov    edx,0xc000c46c
 1014f8b:	lea    rcx,[rsp+0x88]
 1014f93:	call   0x10132d0
 1014f98:	nop
 1014f99:	mov    rcx,rax
 1014f9c:	call   QWORD PTR [rip+0xfffffffffffecb46]        # 0x1001ae8
 1014fa2:	mov    rdx,rax
 1014fa5:	mov    r8,QWORD PTR [rsp+0x68]
 1014faa:	lea    rcx,[rsp+0x70]
 1014faf:	call   QWORD PTR [rip+0xfffffffffffeca8b]        # 0x1001a40
 1014fb5:	nop
 1014fb6:	lea    rcx,[rsp+0x88]
 1014fbe:	call   QWORD PTR [rip+0xfffffffffffecae4]        # 0x1001aa8
 1014fc4:	lea    r11,[rsp+0xb8]
 1014fcc:	mov    QWORD PTR [rsp+0x80],r11
 1014fd4:	lea    rdx,[rsp+0x70]
 1014fd9:	lea    rcx,[rsp+0xb8]
 1014fe1:	call   QWORD PTR [rip+0xfffffffffffec9d1]        # 0x10019b8
 1014fe7:	nop
 1014fe8:	mov    rcx,QWORD PTR [rbx+0x8]
 1014fec:	movsxd rdx,DWORD PTR [rcx+0x4]
 1014ff0:	lea    rcx,[rbx+0x8]
 1014ff4:	add    rcx,rdx
 1014ff7:	mov    r10,QWORD PTR [rcx]
 1014ffa:	xor    r9d,r9d
 1014ffd:	mov    r8,rax
 1015000:	mov    edx,edi
 1015002:	call   QWORD PTR [r10+0x28]
 1015006:	nop
 1015007:	lea    rcx,[rsp+0x70]
 101500c:	call   QWORD PTR [rip+0xfffffffffffeca96]        # 0x1001aa8
 1015012:	nop
 1015013:	lea    rcx,[rsp+0x68]
 1015018:	call   QWORD PTR [rip+0xfffffffffffeca8a]        # 0x1001aa8
 101501e:	lea    rdx,[rsp+0xf0]
 1015026:	mov    ecx,DWORD PTR [rbx+0x24]
 1015029:	call   0x10319d0
 101502e:	test   al,al
 1015030:	je     0x101503c
 1015032:	lea    rdx,[rsp+0xf0]
 101503a:	jmp    0x1015087
 101503c:	mov    rax,QWORD PTR [rbx+0xd8]
 1015043:	cmp    BYTE PTR [rax+0xb9],0x0
 101504a:	jne    0x1015080
 101504c:	mov    rax,QWORD PTR [rbx+0x8]
 1015050:	movsxd rcx,DWORD PTR [rax+0x4]
 1015054:	add    rcx,0x8
 1015058:	add    rcx,rbx
 101505b:	mov    rax,QWORD PTR [rcx]
 101505e:	mov    BYTE PTR [rsp+0x28],0x1
 1015063:	mov    BYTE PTR [rsp+0x20],0x1
 1015068:	mov    r9d,0x2
 101506e:	xor    r8d,r8d
 1015071:	mov    edx,0xc000c3a8
 1015076:	call   QWORD PTR [rax]
 1015078:	xor    sil,sil
 101507b:	jmp    0x1015657
 1015080:	lea    rdx,[rip+0xffffffffffff0a29]        # 0x1005ab0
 1015087:	lea    rcx,[rbx+0x90]
 101508e:	call   QWORD PTR [rip+0xfffffffffffeca04]        # 0x1001a98
 1015094:	mov    rcx,rbx
 1015097:	call   0x1019470
 101509c:	mov    rax,QWORD PTR [rbx+0x8]
 10150a0:	mov    BYTE PTR [rsp+0x28],0x1
 10150a5:	xor    r9d,r9d
 10150a8:	xor    r8d,r8d
 10150ab:	movsxd rcx,DWORD PTR [rax+0x4]
 10150af:	mov    BYTE PTR [rsp+0x20],0x1
 10150b4:	add    rcx,0x8
 10150b8:	add    rcx,rbx
 10150bb:	mov    rax,QWORD PTR [rcx]
 10150be:	cmp    BYTE PTR [rbx+0x78],r8b
 10150c2:	mov    edx,0x4000c37e
 10150c7:	jne    0x10150ce
 10150c9:	mov    edx,0x4000c37f
 10150ce:	call   QWORD PTR [rax]
 10150d0:	mov    rcx,rbx
 10150d3:	call   0x1018d70
 10150d8:	cmp    BYTE PTR [rbx+0x78],0x0
 10150dc:	je     0x1015170
 10150e2:	mov    rax,QWORD PTR [rbx+0xd8]
 10150e9:	cmp    BYTE PTR [rax+0xb9],0x0
 10150f0:	jne    0x1015170
 10150f2:	lea    rcx,[rbx+0x10]
 10150f6:	call   QWORD PTR [rip+0xfffffffffffec9ec]        # 0x1001ae8
 10150fc:	mov    rcx,rax
 10150ff:	call   0x1032740
 1015104:	test   al,al
 1015106:	je     0x1015170
 1015108:	mov    rdi,QWORD PTR [rbx+0xe8]
 101510f:	mov    QWORD PTR [rsp+0x48],rdi
 1015114:	test   rdi,rdi
 1015117:	je     0x1015170
 1015119:	test   BYTE PTR [rdi],0x1
 101511c:	je     0x101516a
 101511e:	lea    rdx,[rsp+0xa0]
 1015126:	mov    rcx,rdi
 1015129:	call   0x1012e00
 101512e:	nop
 101512f:	mov    rcx,rax
 1015132:	call   QWORD PTR [rip+0xfffffffffffec9b0]        # 0x1001ae8
 1015138:	mov    rdx,rax
 101513b:	mov    rcx,rbx
 101513e:	call   0x10198d0
 1015143:	nop
 1015144:	lea    rcx,[rsp+0xa0]
 101514c:	call   QWORD PTR [rip+0xfffffffffffec956]        # 0x1001aa8
 1015152:	nop
 1015153:	jmp    0x101516a
 1015155:	xor    r14d,r14d
 1015158:	movzx  esi,BYTE PTR [rsp+0x40]
 101515d:	mov    r15d,r14d
 1015160:	mov    rdi,QWORD PTR [rsp+0x48]
 1015165:	mov    rbx,QWORD PTR [rsp+0x60]
 101516a:	mov    rdi,QWORD PTR [rdi+0x18]
 101516e:	jmp    0x101510f
 1015170:	mov    rcx,rbx
 1015173:	call   0x1019330
 1015178:	xor    r9d,r9d
 101517b:	xor    r8d,r8d
 101517e:	xor    edx,edx
 1015180:	mov    rcx,QWORD PTR [rbx+0x88]
 1015187:	call   QWORD PTR [rip+0xfffffffffffec173]        # 0x1001300
 101518d:	mov    r11d,DWORD PTR [rip+0x4e790]        # 0x1063924
 1015194:	cmp    r11d,0x2
 1015198:	jge    0x1015686
 101519e:	mov    r8d,0x1
 10151a4:	or     edx,0xffffffff
 10151a7:	mov    rcx,QWORD PTR [rip+0x4e292]        # 0x1063440
 10151ae:	call   QWORD PTR [rip+0xfffffffffffec1dc]        # 0x1001390
 10151b4:	cmp    eax,0xc0
 10151b9:	je     0x1015686
 10151bf:	mov    rcx,QWORD PTR [rbx+0xe0]
 10151c6:	call   0x100fcf0
 10151cb:	mov    rdx,rax
 10151ce:	lea    r9,[rsp+0x58]
 10151d3:	lea    r8,[rsp+0x41]
 10151d8:	mov    rcx,rbx
 10151db:	call   0x1019670
 10151e0:	test   al,al
 10151e2:	je     0x1015078
 10151e8:	xor    r9d,r9d
 10151eb:	xor    r8d,r8d
 10151ee:	xor    edx,edx
 10151f0:	mov    rcx,QWORD PTR [rbx+0x88]
 10151f7:	call   QWORD PTR [rip+0xfffffffffffec103]        # 0x1001300
 10151fd:	mov    DWORD PTR [rsp+0x44],0xc0
 1015205:	mov    eax,DWORD PTR [rip+0x4e719]        # 0x1063924
 101520b:	cmp    eax,0x2
 101520e:	jge    0x1015242
 1015210:	mov    r8d,0x1
 1015216:	or     edx,0xffffffff
 1015219:	mov    rcx,QWORD PTR [rip+0x4e220]        # 0x1063440
 1015220:	call   QWORD PTR [rip+0xfffffffffffec16a]        # 0x1001390
 1015226:	mov    DWORD PTR [rsp+0x44],eax
 101522a:	cmp    eax,0xc0
 101522f:	je     0x1015242
 1015231:	cmp    BYTE PTR [rsp+0x41],0x0
 1015236:	je     0x1015242
 1015238:	xor    edx,edx
 101523a:	mov    rcx,rbx
 101523d:	call   0x101a180
 1015242:	mov    rcx,QWORD PTR [rbx+0x8]
 1015246:	movsxd rdx,DWORD PTR [rcx+0x4]
 101524a:	lea    rcx,[rbx+0x8]
 101524e:	add    rcx,rdx
 1015251:	mov    rax,QWORD PTR [rcx]
 1015254:	mov    BYTE PTR [rsp+0x28],0x1
 1015259:	mov    BYTE PTR [rsp+0x20],0x1
 101525e:	xor    r9d,r9d
 1015261:	xor    r8d,r8d
 1015264:	mov    edx,0x4000c3f2
 1015269:	call   QWORD PTR [rax]
 101526b:	xor    r9d,r9d
 101526e:	xor    r8d,r8d
 1015271:	xor    edx,edx
 1015273:	mov    rcx,QWORD PTR [rbx+0x88]
 101527a:	call   QWORD PTR [rip+0xfffffffffffec080]        # 0x1001300
 1015280:	mov    r13d,DWORD PTR [rip+0x4e689]        # 0x1063910
 1015287:	shl    r13d,0x14
 101528b:	mov    rdi,QWORD PTR [rbx+0xd8]
 1015292:	lea    rax,[rip+0xffffffffffff0e5f]        # 0x10060f8
 1015299:	mov    QWORD PTR [rsp+0xd0],rax
 10152a1:	mov    rcx,rax
 10152a4:	call   0x103fa26
 10152a9:	mov    r12d,eax
 10152ac:	xor    edx,edx
 10152ae:	div    DWORD PTR [rdi+0xf8]
 10152b4:	mov    rdi,QWORD PTR [rdi+0xf0]
 10152bb:	test   rdi,rdi
 10152be:	je     0x1015329
 10152c0:	mov    rdi,QWORD PTR [rdi+rdx*8]
 10152c4:	test   rdi,rdi
 10152c7:	je     0x1015329
 10152c9:	cmp    DWORD PTR [rdi+0x18],r12d
 10152cd:	jne    0x10152eb
 10152cf:	lea    rdx,[rip+0xffffffffffff0e22]        # 0x10060f8
 10152d6:	mov    rcx,rdi
 10152d9:	call   QWORD PTR [rip+0xfffffffffffec721]        # 0x1001a00
 10152df:	mov    ecx,r14d
 10152e2:	test   eax,eax
 10152e4:	sete   cl
 10152e7:	test   ecx,ecx
 10152e9:	jne    0x10152f1
 10152eb:	mov    rdi,QWORD PTR [rdi+0x10]
 10152ef:	jmp    0x10152c4
 10152f1:	lea    rdx,[rdi+0x8]
 10152f5:	lea    rcx,[rsp+0x50]
 10152fa:	call   QWORD PTR [rip+0xfffffffffffec7a0]        # 0x1001aa0
 1015300:	lea    rdx,[rip+0xfffffffffffed815]        # 0x1002b1c
 1015307:	lea    rcx,[rsp+0x50]
 101530c:	call   QWORD PTR [rip+0xfffffffffffec74e]        # 0x1001a60
 1015312:	test   eax,eax
 1015314:	jne    0x1015329
 1015316:	xor    r9d,r9d
 1015319:	xor    r8d,r8d
 101531c:	xor    edx,edx
 101531e:	mov    ecx,0xc0000005
 1015323:	call   QWORD PTR [rip+0xfffffffffffec257]        # 0x1001580
 1015329:	mov    rcx,QWORD PTR [rbx+0xd8]
 1015330:	add    rcx,0x98
 1015337:	xor    r8d,r8d
 101533a:	lea    rdx,[rip+0xffffffffffff0dcf]        # 0x1006110
 1015341:	call   QWORD PTR [rip+0xfffffffffffec711]        # 0x1001a58
 1015347:	cmp    eax,0xffffffff
 101534a:	je     0x10153ef
 1015350:	mov    rdi,QWORD PTR [rbx+0xd8]
 1015357:	lea    rax,[rip+0xffffffffffff0dc2]        # 0x1006120
 101535e:	mov    QWORD PTR [rsp+0xe0],rax
 1015366:	mov    rcx,rax
 1015369:	call   0x103fa26
 101536e:	mov    r12d,eax
 1015371:	xor    edx,edx
 1015373:	div    DWORD PTR [rdi+0xf8]
 1015379:	mov    rdi,QWORD PTR [rdi+0xf0]
 1015380:	test   rdi,rdi
 1015383:	je     0x10153ef
 1015385:	mov    rdi,QWORD PTR [rdi+rdx*8]
 1015389:	test   rdi,rdi
 101538c:	je     0x10153ef
 101538e:	cmp    DWORD PTR [rdi+0x18],r12d
 1015392:	jne    0x10153b0
 1015394:	lea    rdx,[rip+0xffffffffffff0d85]        # 0x1006120
 101539b:	mov    rcx,rdi
 101539e:	call   QWORD PTR [rip+0xfffffffffffec65c]        # 0x1001a00
 10153a4:	mov    ecx,r14d
 10153a7:	test   eax,eax
 10153a9:	sete   cl
 10153ac:	test   ecx,ecx
 10153ae:	jne    0x10153b6
 10153b0:	mov    rdi,QWORD PTR [rdi+0x10]
 10153b4:	jmp    0x1015389
 10153b6:	lea    rdx,[rdi+0x8]
 10153ba:	lea    rcx,[rsp+0x50]
 10153bf:	call   QWORD PTR [rip+0xfffffffffffec6db]        # 0x1001aa0
 10153c5:	lea    rdx,[rip+0xfffffffffffed750]        # 0x1002b1c
 10153cc:	lea    rcx,[rsp+0x50]
 10153d1:	call   QWORD PTR [rip+0xfffffffffffec689]        # 0x1001a60
 10153d7:	test   eax,eax
 10153d9:	jne    0x10153ef
 10153db:	mov    rcx,rbx
 10153de:	call   0x101e250
 10153e3:	test   al,al
 10153e5:	je     0x10153ef
 10153e7:	mov    rcx,rbx
 10153ea:	call   0x101e450
 10153ef:	mov    BYTE PTR [rsp+0x40],0x0
 10153f4:	mov    eax,DWORD PTR [rip+0x4e52a]        # 0x1063924
 10153fa:	test   eax,eax
 10153fc:	jne    0x1015657
 1015402:	cmp    DWORD PTR [rsp+0x44],0xc0
 101540a:	je     0x1015657
 1015410:	mov    rax,QWORD PTR [rbx+0x80]
 1015417:	cmp    rax,0xffffffffffffffff
 101541b:	je     0x10155f6
 1015421:	test   rax,rax
 1015424:	je     0x10155f6
 101542a:	cmp    BYTE PTR [rsp+0x40],0x0
 101542f:	jne    0x10155f6
 1015435:	lea    r8,[rsp+0x40]
 101543a:	mov    r12d,DWORD PTR [rsp+0x58]
 101543f:	mov    edx,r12d
 1015442:	mov    rcx,rbx
 1015445:	call   0x101a900
 101544a:	mov    edx,eax
 101544c:	cmp    BYTE PTR [rsp+0x40],0x0
 1015451:	jne    0x10155f1
 1015457:	test   eax,eax
 1015459:	jne    0x1015568
 101545f:	test   r13d,r13d
 1015462:	je     0x10155f1
 1015468:	lea    r8,[rsp+0x40]
 101546d:	lea    rdx,[rsp+0x60]
 1015472:	mov    rcx,rbx
 1015475:	call   0x101aa00
 101547a:	mov    rcx,QWORD PTR [rbx+0x8]
 101547e:	movsxd rdx,DWORD PTR [rcx+0x4]
 1015482:	lea    rcx,[rbx+0x8]
 1015486:	add    rcx,rdx
 1015489:	mov    r10,QWORD PTR [rcx]
 101548c:	xor    r9d,r9d
 101548f:	mov    r8d,0xc000c466
 1015495:	mov    edx,eax
 1015497:	call   QWORD PTR [r10+0x20]
 101549b:	test   al,al
 101549d:	je     0x10155ee
 10154a3:	movsxd rax,r13d
 10154a6:	cmp    QWORD PTR [rsp+0x60],rax
 10154ab:	jl     0x10155f1
 10154b1:	lea    rcx,[rsp+0x48]
 10154b6:	call   QWORD PTR [rip+0xfffffffffffec604]        # 0x1001ac0
 10154bc:	nop
 10154bd:	mov    edx,0x4000c486
 10154c2:	lea    rcx,[rsp+0xa8]
 10154ca:	call   0x10132d0
 10154cf:	nop
 10154d0:	mov    rcx,rax
 10154d3:	call   QWORD PTR [rip+0xfffffffffffec60f]        # 0x1001ae8
 10154d9:	mov    rdx,rax
 10154dc:	mov    r8,QWORD PTR [rsp+0x60]
 10154e1:	lea    rcx,[rsp+0x48]
 10154e6:	call   QWORD PTR [rip+0xfffffffffffec554]        # 0x1001a40
 10154ec:	nop
 10154ed:	lea    rcx,[rsp+0xa8]
 10154f5:	call   QWORD PTR [rip+0xfffffffffffec5ad]        # 0x1001aa8
 10154fb:	mov    r11,QWORD PTR [rbx+0x8]
 10154ff:	movsxd rax,DWORD PTR [r11+0x4]
 1015503:	mov    rdi,QWORD PTR [rax+rbx*1+0x8]
 1015508:	lea    rcx,[rsp+0x48]
 101550d:	call   QWORD PTR [rip+0xfffffffffffec5d5]        # 0x1001ae8
 1015513:	mov    r8,rax
 1015516:	mov    rax,QWORD PTR [rbx+0x8]
 101551a:	movsxd rcx,DWORD PTR [rax+0x4]
 101551e:	add    rcx,0x8
 1015522:	add    rcx,rbx
 1015525:	mov    BYTE PTR [rsp+0x30],0x1
 101552a:	mov    BYTE PTR [rsp+0x28],0x1
 101552f:	mov    DWORD PTR [rsp+0x20],r14d
 1015534:	mov    r9b,0x1
 1015537:	mov    edx,0x4000c486
 101553c:	call   QWORD PTR [rdi+0x8]
 101553f:	xor    edx,edx
 1015541:	mov    rcx,rbx
 1015544:	call   0x1022b00
 1015549:	inc    r15d
 101554c:	mov    edx,r15d
 101554f:	mov    rcx,rbx
 1015552:	call   0x101a180
 1015557:	nop
 1015558:	lea    rcx,[rsp+0x48]
 101555d:	call   QWORD PTR [rip+0xfffffffffffec545]        # 0x1001aa8
 1015563:	jmp    0x10155f1
 1015568:	cmp    eax,0x70
 101556b:	jne    0x10155d0
 101556d:	mov    rcx,QWORD PTR [rbx+0xd8]
 1015574:	add    rcx,0x78
 1015578:	call   QWORD PTR [rip+0xfffffffffffec56a]        # 0x1001ae8
 101557e:	mov    rcx,rax
 1015581:	lea    r9,[rsp+0x80]
 1015589:	lea    r8,[rsp+0xc8]
 1015591:	lea    rdx,[rsp+0xd8]
 1015599:	call   QWORD PTR [rip+0xfffffffffffebe51]        # 0x10013f0
 101559f:	test   eax,eax
 10155a1:	je     0x10155cb
 10155a3:	cmp    QWORD PTR [rsp+0x80],0x400
 10155af:	jb     0x10155cb
 10155b1:	xor    edx,edx
 10155b3:	mov    rcx,rbx
 10155b6:	call   0x1022b00
 10155bb:	inc    r15d
 10155be:	mov    edx,r15d
 10155c1:	mov    rcx,rbx
 10155c4:	call   0x101a180
 10155c9:	jmp    0x10155f1
 10155cb:	mov    edx,0x70
 10155d0:	mov    rax,QWORD PTR [rbx+0x8]
 10155d4:	movsxd rcx,DWORD PTR [rax+0x4]
 10155d8:	add    rcx,0x8
 10155dc:	add    rcx,rbx
 10155df:	mov    rax,QWORD PTR [rcx]
 10155e2:	xor    r9d,r9d
 10155e5:	mov    r8d,0xc000c464
 10155eb:	call   QWORD PTR [rax+0x20]
 10155ee:	xor    sil,sil
 10155f1:	mov    edx,r12d
 10155f4:	jmp    0x10155fb
 10155f6:	mov    edx,0x5
 10155fb:	mov    rcx,rbx
 10155fe:	call   0x101e580
 1015603:	mov    rcx,rbx
 1015606:	call   0x10193f0
 101560b:	test   al,al
 101560d:	je     0x1015649
 101560f:	mov    rax,QWORD PTR [rbx+0x8]
 1015613:	movsxd rcx,DWORD PTR [rax+0x4]
 1015617:	add    rcx,0x8
 101561b:	add    rcx,rbx
 101561e:	mov    rax,QWORD PTR [rcx]
 1015621:	mov    BYTE PTR [rsp+0x28],0x1
 1015626:	mov    BYTE PTR [rsp+0x20],0x1
 101562b:	mov    r9d,0x1
 1015631:	xor    r8d,r8d
 1015634:	mov    edx,0x4000c379
 1015639:	call   QWORD PTR [rax]
 101563b:	lock inc DWORD PTR [rip+0x4e2e2]        # 0x1063924
 1015642:	mov    DWORD PTR [rip+0x4e3ef],r14d        # 0x1063a38
 1015649:	mov    eax,DWORD PTR [rip+0x4e2d5]        # 0x1063924
 101564f:	test   eax,eax
 1015651:	je     0x1015402
 1015657:	mov    rcx,rbx
 101565a:	call   0x1021ee0
 101565f:	xor    r9d,r9d
 1015662:	xor    r8d,r8d
 1015665:	xor    edx,edx
 1015667:	mov    rcx,QWORD PTR [rbx+0x88]
 101566e:	call   QWORD PTR [rip+0xfffffffffffebc8c]        # 0x1001300
 1015674:	nop
 1015675:	lea    rcx,[rsp+0x50]
 101567a:	call   QWORD PTR [rip+0xfffffffffffec428]        # 0x1001aa8
 1015680:	movzx  eax,sil
 1015684:	jmp    0x1015693
 1015686:	lea    rcx,[rsp+0x50]
 101568b:	call   QWORD PTR [rip+0xfffffffffffec417]        # 0x1001aa8
 1015691:	xor    al,al
 1015693:	mov    rcx,QWORD PTR [rsp+0x300]
 101569b:	xor    rcx,rsp
 101569e:	call   0x103ff40
 10156a3:	lea    r11,[rsp+0x310]
 10156ab:	mov    rbx,QWORD PTR [r11+0x38]
 10156af:	mov    rsi,QWORD PTR [r11+0x40]
 10156b3:	mov    rsp,r11
 10156b6:	pop    r15
 10156b8:	pop    r14
 10156ba:	pop    r13
 10156bc:	pop    r12
 10156be:	pop    rdi
 10156bf:	ret    
 10156c0:	int3   
 10156c1:	int3   
 10156c2:	int3   
 10156c3:	int3   
 10156c4:	int3   
 10156c5:	int3   
 10156c6:	int3   
 10156c7:	int3   
 10156c8:	int3   
 10156c9:	int3   
 10156ca:	int3   
 10156cb:	int3   
 10156cc:	int3   
 10156cd:	int3   
 10156ce:	int3   
 10156cf:	int3   
 10156d0:	mov    rax,QWORD PTR [rip+0x4e241]        # 0x1063918
 10156d7:	ret    
 10156d8:	int3   
 10156d9:	int3   
 10156da:	int3   
 10156db:	int3   
 10156dc:	int3   
 10156dd:	int3   
 10156de:	int3   
 10156df:	int3   
 10156e0:	mov    rax,QWORD PTR [rip+0x4dc39]        # 0x1063320
 10156e7:	ret    
 10156e8:	int3   
 10156e9:	int3   
 10156ea:	int3   
 10156eb:	int3   
 10156ec:	int3   
 10156ed:	int3   
 10156ee:	int3   
 10156ef:	int3   
 10156f0:	mov    rax,QWORD PTR [rip+0x4dc31]        # 0x1063328
 10156f7:	ret    
 10156f8:	int3   
 10156f9:	int3   
 10156fa:	int3   
 10156fb:	int3   
 10156fc:	int3   
 10156fd:	int3   
 10156fe:	int3   
 10156ff:	int3   
 1015700:	rex push rdi
 1015702:	sub    rsp,0x30
 1015706:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 101570f:	mov    QWORD PTR [rsp+0x48],rbx
 1015714:	mov    QWORD PTR [rsp+0x50],rsi
 1015719:	movsxd rdi,r8d
 101571c:	mov    rsi,rdx
 101571f:	mov    rbx,rcx
 1015722:	lea    rcx,[rsp+0x40]
 1015727:	call   QWORD PTR [rip+0xfffffffffffec393]        # 0x1001ac0
 101572d:	nop
 101572e:	mov    r9,QWORD PTR [rbx-0x118]
 1015735:	mov    r8,QWORD PTR [rbx-0x120]
 101573c:	lea    rdx,[rip+0xfffffffffffeefe5]        # 0x1004728
 1015743:	lea    rcx,[rsp+0x40]
 1015748:	call   QWORD PTR [rip+0xfffffffffffec2f2]        # 0x1001a40
 101574e:	lea    rcx,[rsp+0x40]
 1015753:	call   QWORD PTR [rip+0xfffffffffffec38f]        # 0x1001ae8
 1015759:	mov    r8,rax
 101575c:	mov    rdx,rdi
 101575f:	mov    r9d,0x104
 1015765:	mov    rcx,rsi
 1015768:	call   QWORD PTR [rip+0xfffffffffffebf3a]        # 0x10016a8
 101576e:	nop
 101576f:	lea    rcx,[rsp+0x40]
 1015774:	call   QWORD PTR [rip+0xfffffffffffec32e]        # 0x1001aa8
 101577a:	mov    rax,rsi
 101577d:	mov    rbx,QWORD PTR [rsp+0x48]
 1015782:	mov    rsi,QWORD PTR [rsp+0x50]
 1015787:	add    rsp,0x30
 101578b:	pop    rdi
 101578c:	ret    
 101578d:	int3   
 101578e:	int3   
 101578f:	int3   
 1015790:	int3   
 1015791:	int3   
 1015792:	int3   
 1015793:	int3   
 1015794:	int3   
 1015795:	int3   
 1015796:	int3   
 1015797:	int3   
 1015798:	int3   
 1015799:	int3   
 101579a:	int3   
 101579b:	int3   
 101579c:	int3   
 101579d:	int3   
 101579e:	int3   
 101579f:	int3   
 10157a0:	movzx  eax,BYTE PTR [rcx+0x2b]
 10157a4:	ret    
 10157a5:	int3   
 10157a6:	int3   
 10157a7:	int3   
 10157a8:	int3   
 10157a9:	int3   
 10157aa:	int3   
 10157ab:	int3   
 10157ac:	int3   
 10157ad:	int3   
 10157ae:	int3   
 10157af:	int3   
 10157b0:	rex push rbp
 10157b2:	push   rsi
 10157b3:	push   rdi
 10157b4:	push   r12
 10157b6:	push   r13
 10157b8:	push   r14
 10157ba:	push   r15
 10157bc:	mov    rbp,rsp
 10157bf:	sub    rsp,0x70
 10157c3:	mov    QWORD PTR [rbp-0x8],0xfffffffffffffffe
 10157cb:	mov    QWORD PTR [rsp+0xb0],rbx
 10157d3:	mov    r14,rdx
 10157d6:	mov    rsi,rcx
 10157d9:	lea    rdx,[rip+0xfffffffffffec630]        # 0x1001e10
 10157e0:	lea    rcx,[rbp-0x38]
 10157e4:	call   QWORD PTR [rip+0xfffffffffffec2c6]        # 0x1001ab0
 10157ea:	nop
 10157eb:	mov    DWORD PTR [rbp-0x40],0x1
 10157f2:	lea    rcx,[rbp-0x30]
 10157f6:	call   QWORD PTR [rip+0xfffffffffffec2c4]        # 0x1001ac0
 10157fc:	nop
 10157fd:	mov    DWORD PTR [rbp+0x58],0x20
 1015804:	mov    BYTE PTR [rbp+0x50],0x0
 1015808:	lea    r15,[rip+0x4daa1]        # 0x10632b0
 101580f:	xor    r13d,r13d
 1015812:	or     r12,0xffffffffffffffff
 1015816:	lea    rbx,[rip+0xfffffffffffed95b]        # 0x1003178
 101581d:	nop    DWORD PTR [rax]
 1015820:	mov    rdx,QWORD PTR [r15+0x8]
 1015824:	lea    rcx,[rbp-0x20]
 1015828:	call   QWORD PTR [rip+0xfffffffffffec282]        # 0x1001ab0
 101582e:	nop
 101582f:	test   rsi,rsi
 1015832:	jne    0x101583a
 1015834:	mov    QWORD PTR [rbp-0x28],r13
 1015838:	jmp    0x101584d
 101583a:	mov    rax,QWORD PTR [rsi+0x8]
 101583e:	movsxd rcx,DWORD PTR [rax+0x4]
 1015842:	lea    rax,[rsi+0x8]
 1015846:	add    rax,rcx
 1015849:	mov    QWORD PTR [rbp-0x28],rax
 101584d:	lea    r8,[rbp-0x20]
 1015851:	lea    rdx,[rip+0xffffffffffff05a8]        # 0x1005e00
 1015858:	lea    rcx,[rbp-0x10]
 101585c:	call   0x1013d70
 1015861:	nop
 1015862:	mov    rcx,r12
 1015865:	inc    rcx
 1015868:	cmp    WORD PTR [r14+rcx*2],0x0
 101586e:	jne    0x1015865
 1015870:	mov    rdi,r14
 1015873:	test   rcx,rcx
 1015876:	cmove  rdi,rbx
 101587a:	mov    rcx,rax
 101587d:	call   QWORD PTR [rip+0xfffffffffffec265]        # 0x1001ae8
 1015883:	mov    rbx,rax
 1015886:	lea    rcx,[rsi+0x10]
 101588a:	call   QWORD PTR [rip+0xfffffffffffec258]        # 0x1001ae8
 1015890:	mov    rdx,rax
 1015893:	mov    rax,QWORD PTR [rbp-0x28]
 1015897:	mov    QWORD PTR [rsp+0x28],rax
 101589c:	mov    QWORD PTR [rsp+0x20],rdi
 10158a1:	mov    r9,rbx
 10158a4:	mov    r8,0xffffffff80000002
 10158ab:	lea    rcx,[rbp-0x18]
 10158af:	call   0x1033f20
 10158b4:	nop
 10158b5:	mov    rdx,rax
 10158b8:	lea    rcx,[rbp-0x38]
 10158bc:	call   QWORD PTR [rip+0xfffffffffffec1de]        # 0x1001aa0
 10158c2:	nop
 10158c3:	lea    rcx,[rbp-0x18]
 10158c7:	call   QWORD PTR [rip+0xfffffffffffec1db]        # 0x1001aa8
 10158cd:	nop
 10158ce:	lea    rcx,[rbp-0x10]
 10158d2:	call   QWORD PTR [rip+0xfffffffffffec1d0]        # 0x1001aa8
 10158d8:	lea    rcx,[rbp-0x38]
 10158dc:	call   QWORD PTR [rip+0xfffffffffffec20e]        # 0x1001af0
 10158e2:	mov    edi,DWORD PTR [rbp-0x40]
 10158e5:	test   eax,eax
 10158e7:	je     0x10158ef
 10158e9:	or     edi,DWORD PTR [r15]
 10158ec:	mov    DWORD PTR [rbp-0x40],edi
 10158ef:	lea    rcx,[rbp-0x20]
 10158f3:	call   QWORD PTR [rip+0xfffffffffffec1af]        # 0x1001aa8
 10158f9:	add    r15,0x20
 10158fd:	lea    rax,[rip+0x4da0c]        # 0x1063310
 1015904:	cmp    r15,rax
 1015907:	lea    rbx,[rip+0xfffffffffffed86a]        # 0x1003178
 101590e:	jl     0x1015820
 1015914:	lea    rcx,[rbp-0x38]
 1015918:	call   QWORD PTR [rip+0xfffffffffffec1d2]        # 0x1001af0
 101591e:	test   eax,eax
 1015920:	je     0x1015990
 1015922:	test   rsi,rsi
 1015925:	je     0x1015936
 1015927:	mov    rax,QWORD PTR [rsi+0x8]
 101592b:	movsxd rdx,DWORD PTR [rax+0x4]
 101592f:	lea    r13,[rsi+0x8]
 1015933:	add    r13,rdx
 1015936:	lea    r8,[rbp-0x38]
 101593a:	lea    rdx,[rip+0xffffffffffff052f]        # 0x1005e70
 1015941:	lea    rcx,[rbp-0x10]
 1015945:	call   0x1013d70
 101594a:	nop
 101594b:	mov    rcx,rax
 101594e:	call   QWORD PTR [rip+0xfffffffffffec194]        # 0x1001ae8
 1015954:	mov    rbx,rax
 1015957:	lea    rcx,[rsi+0x10]
 101595b:	call   QWORD PTR [rip+0xfffffffffffec187]        # 0x1001ae8
 1015961:	mov    rcx,rax
 1015964:	lea    rax,[rbp+0x50]
 1015968:	mov    QWORD PTR [rsp+0x28],rax
 101596d:	lea    rax,[rbp+0x58]
 1015971:	mov    QWORD PTR [rsp+0x20],rax
 1015976:	lea    r9,[rbp-0x30]
 101597a:	mov    r8,r13
 101597d:	mov    rdx,rbx
 1015980:	call   0x102cff0
 1015985:	nop
 1015986:	jmp    0x1015a59
 101598b:	nop    DWORD PTR [rax+rax*1+0x0]
 1015990:	inc    r12
 1015993:	cmp    WORD PTR [r14+r12*2],0x0
 1015999:	jne    0x1015990
 101599b:	test   r12,r12
 101599e:	jne    0x10159e8
 10159a0:	test   rsi,rsi
 10159a3:	je     0x10159b4
 10159a5:	mov    rax,QWORD PTR [rsi+0x8]
 10159a9:	movsxd rcx,DWORD PTR [rax+0x4]
 10159ad:	lea    r13,[rsi+0x8]
 10159b1:	add    r13,rcx
 10159b4:	lea    rcx,[rsi+0x10]
 10159b8:	call   QWORD PTR [rip+0xfffffffffffec12a]        # 0x1001ae8
 10159be:	mov    rcx,rax
 10159c1:	lea    rax,[rbp+0x50]
 10159c5:	mov    QWORD PTR [rsp+0x28],rax
 10159ca:	lea    rax,[rbp+0x58]
 10159ce:	mov    QWORD PTR [rsp+0x20],rax
 10159d3:	lea    r9,[rbp-0x30]
 10159d7:	mov    r8,r13
 10159da:	lea    rdx,[rip+0xffffffffffff04e7]        # 0x1005ec8
 10159e1:	call   0x102cff0
 10159e6:	jmp    0x1015a63
 10159e8:	mov    rdx,r14
 10159eb:	lea    rcx,[rbp-0x38]
 10159ef:	call   QWORD PTR [rip+0xfffffffffffec0a3]        # 0x1001a98
 10159f5:	test   rsi,rsi
 10159f8:	je     0x1015a09
 10159fa:	mov    rax,QWORD PTR [rsi+0x8]
 10159fe:	movsxd rcx,DWORD PTR [rax+0x4]
 1015a02:	lea    r13,[rsi+0x8]
 1015a06:	add    r13,rcx
 1015a09:	lea    r8,[rbp-0x38]
 1015a0d:	lea    rdx,[rip+0xffffffffffff045c]        # 0x1005e70
 1015a14:	lea    rcx,[rbp-0x10]
 1015a18:	call   0x1013d70
 1015a1d:	nop
 1015a1e:	mov    rcx,rax
 1015a21:	call   QWORD PTR [rip+0xfffffffffffec0c1]        # 0x1001ae8
 1015a27:	mov    rbx,rax
 1015a2a:	lea    rcx,[rsi+0x10]
 1015a2e:	call   QWORD PTR [rip+0xfffffffffffec0b4]        # 0x1001ae8
 1015a34:	mov    rcx,rax
 1015a37:	lea    rax,[rbp+0x50]
 1015a3b:	mov    QWORD PTR [rsp+0x28],rax
 1015a40:	lea    rax,[rbp+0x58]
 1015a44:	mov    QWORD PTR [rsp+0x20],rax
 1015a49:	lea    r9,[rbp-0x30]
 1015a4d:	mov    r8,r13
 1015a50:	mov    rdx,rbx
 1015a53:	call   0x102cff0
 1015a58:	nop
 1015a59:	lea    rcx,[rbp-0x10]
 1015a5d:	call   QWORD PTR [rip+0xfffffffffffec045]        # 0x1001aa8
 1015a63:	lea    rcx,[rbp-0x38]
 1015a67:	call   QWORD PTR [rip+0xfffffffffffec07b]        # 0x1001ae8
 1015a6d:	mov    ecx,DWORD PTR [rbp+0x58]
 1015a70:	mov    DWORD PTR [rsp+0x28],ecx
 1015a74:	mov    QWORD PTR [rsp+0x20],rax
 1015a79:	movzx  r9d,BYTE PTR [rbp+0x50]
 1015a7e:	mov    r8d,edi
 1015a81:	mov    rdx,r14
 1015a84:	mov    rcx,rsi
 1015a87:	call   0x1016650
 1015a8c:	movzx  ebx,al
 1015a8f:	lea    rcx,[rbp-0x30]
 1015a93:	call   QWORD PTR [rip+0xfffffffffffec00f]        # 0x1001aa8
 1015a99:	nop
 1015a9a:	lea    rcx,[rbp-0x38]
 1015a9e:	call   QWORD PTR [rip+0xfffffffffffec004]        # 0x1001aa8
 1015aa4:	movzx  eax,bl
 1015aa7:	mov    rbx,QWORD PTR [rsp+0xb0]
 1015aaf:	add    rsp,0x70
 1015ab3:	pop    r15
 1015ab5:	pop    r14
 1015ab7:	pop    r13
 1015ab9:	pop    r12
 1015abb:	pop    rdi
 1015abc:	pop    rsi
 1015abd:	pop    rbp
 1015abe:	ret    
 1015abf:	int3   
 1015ac0:	int3   
 1015ac1:	int3   
 1015ac2:	int3   
 1015ac3:	int3   
 1015ac4:	int3   
 1015ac5:	int3   
 1015ac6:	int3   
 1015ac7:	int3   
 1015ac8:	int3   
 1015ac9:	int3   
 1015aca:	int3   
 1015acb:	int3   
 1015acc:	int3   
 1015acd:	int3   
 1015ace:	int3   
 1015acf:	int3   
 1015ad0:	cmp    DWORD PTR [rcx+0x24],0x9
 1015ad4:	jge    0x1015adb
 1015ad6:	jmp    0x1017480
 1015adb:	jmp    0x1018710
 1015ae0:	int3   
 1015ae1:	int3   
 1015ae2:	int3   
 1015ae3:	int3   
 1015ae4:	int3   
 1015ae5:	int3   
 1015ae6:	int3   
 1015ae7:	int3   
 1015ae8:	int3   
 1015ae9:	int3   
 1015aea:	int3   
 1015aeb:	int3   
 1015aec:	int3   
 1015aed:	int3   
 1015aee:	int3   
 1015aef:	int3   
 1015af0:	sub    rsp,0x38
 1015af4:	mov    rcx,QWORD PTR [rcx+0xe0]
 1015afb:	mov    QWORD PTR [rsp+0x28],r8
 1015b00:	mov    QWORD PTR [rsp+0x20],r9
 1015b05:	mov    r9d,edx
 1015b08:	mov    edx,0x1
 1015b0d:	mov    r8d,edx
 1015b10:	call   0x100f8a0
 1015b15:	add    rsp,0x38
 1015b19:	ret    
 1015b1a:	int3   
 1015b1b:	int3   
 1015b1c:	int3   
 1015b1d:	int3   
 1015b1e:	int3   
 1015b1f:	int3   
 1015b20:	mov    rcx,QWORD PTR [rcx+0xe0]
 1015b27:	mov    r9d,edx
 1015b2a:	mov    edx,0x2
 1015b2f:	lea    r8d,[rdx-0x1]
 1015b33:	jmp    0x100f6b0
 1015b38:	int3   
 1015b39:	int3   
 1015b3a:	int3   
 1015b3b:	int3   
 1015b3c:	int3   
 1015b3d:	int3   
 1015b3e:	int3   
 1015b3f:	int3   
 1015b40:	sub    rsp,0x38
 1015b44:	mov    rcx,QWORD PTR [rcx+0xe0]
 1015b4b:	mov    r9d,edx
 1015b4e:	mov    edx,0x3
 1015b53:	mov    QWORD PTR [rsp+0x20],r8
 1015b58:	lea    r8d,[rdx-0x2]
 1015b5c:	call   0x100f7a0
 1015b61:	add    rsp,0x38
 1015b65:	ret    
 1015b66:	int3   
 1015b67:	int3   
 1015b68:	int3   
 1015b69:	int3   
 1015b6a:	int3   
 1015b6b:	int3   
 1015b6c:	int3   
 1015b6d:	int3   
 1015b6e:	int3   
 1015b6f:	int3   
 1015b70:	mov    rcx,QWORD PTR [rcx+0xe0]
 1015b77:	mov    r8d,edx
 1015b7a:	mov    edx,0x4
 1015b7f:	jmp    0x100f5c0
 1015b84:	int3   
 1015b85:	int3   
 1015b86:	int3   
 1015b87:	int3   
 1015b88:	int3   
 1015b89:	int3   
 1015b8a:	int3   
 1015b8b:	int3   
 1015b8c:	int3   
 1015b8d:	int3   
 1015b8e:	int3   
 1015b8f:	int3   
 1015b90:	sub    rsp,0x38
 1015b94:	mov    rcx,QWORD PTR [rcx+0xe0]
 1015b9b:	xor    r9d,r9d
 1015b9e:	mov    QWORD PTR [rsp+0x20],r8
 1015ba3:	mov    r8d,edx
 1015ba6:	lea    edx,[r9+0x5]
 1015baa:	call   0x100f7a0
 1015baf:	add    rsp,0x38
 1015bb3:	ret    
 1015bb4:	int3   
 1015bb5:	int3   
 1015bb6:	int3   
 1015bb7:	int3   
 1015bb8:	int3   
 1015bb9:	int3   
 1015bba:	int3   
 1015bbb:	int3   
 1015bbc:	int3   
 1015bbd:	int3   
 1015bbe:	int3   
 1015bbf:	int3   
 1015bc0:	sub    rsp,0x38
 1015bc4:	mov    rcx,QWORD PTR [rcx+0xe0]
 1015bcb:	mov    QWORD PTR [rsp+0x20],r8
 1015bd0:	mov    r8d,edx
 1015bd3:	mov    edx,0x6
 1015bd8:	call   0x100f9b0
 1015bdd:	add    rsp,0x38
 1015be1:	ret    
 1015be2:	int3   
 1015be3:	int3   
 1015be4:	int3   
 1015be5:	int3   
 1015be6:	int3   
 1015be7:	int3   
 1015be8:	int3   
 1015be9:	int3   
 1015bea:	int3   
 1015beb:	int3   
 1015bec:	int3   
 1015bed:	int3   
 1015bee:	int3   
 1015bef:	int3   
 1015bf0:	sub    rsp,0x38
 1015bf4:	mov    rcx,QWORD PTR [rcx+0xe0]
 1015bfb:	mov    QWORD PTR [rsp+0x28],r9
 1015c00:	movzx  r9d,BYTE PTR [rsp+0x60]
 1015c06:	mov    QWORD PTR [rsp+0x20],r8
 1015c0b:	mov    r8d,edx
 1015c0e:	mov    edx,0x7
 1015c13:	call   0x100fab0
 1015c18:	add    rsp,0x38
 1015c1c:	ret    
 1015c1d:	int3   
 1015c1e:	int3   
 1015c1f:	int3   
 1015c20:	int3   
 1015c21:	int3   
 1015c22:	int3   
 1015c23:	int3   
 1015c24:	int3   
 1015c25:	int3   
 1015c26:	int3   
 1015c27:	int3   
 1015c28:	int3   
 1015c29:	int3   
 1015c2a:	int3   
 1015c2b:	int3   
 1015c2c:	int3   
 1015c2d:	int3   
 1015c2e:	int3   
 1015c2f:	int3   
 1015c30:	sub    rsp,0x38
 1015c34:	mov    rcx,QWORD PTR [rcx+0xe0]
 1015c3b:	mov    QWORD PTR [rsp+0x20],r8
 1015c40:	mov    r8d,edx
 1015c43:	mov    edx,0x8
 1015c48:	call   0x100f9b0
 1015c4d:	add    rsp,0x38
 1015c51:	ret    
 1015c52:	int3   
 1015c53:	int3   
 1015c54:	int3   
 1015c55:	int3   
 1015c56:	int3   
 1015c57:	int3   
 1015c58:	int3   
 1015c59:	int3   
 1015c5a:	int3   
 1015c5b:	int3   
 1015c5c:	int3   
 1015c5d:	int3   
 1015c5e:	int3   
 1015c5f:	int3   
 1015c60:	sub    rsp,0x58
 1015c64:	mov    eax,DWORD PTR [rsp+0x98]
 1015c6b:	mov    rcx,QWORD PTR [rcx+0xe0]
 1015c72:	mov    DWORD PTR [rsp+0x40],eax
 1015c76:	mov    rax,QWORD PTR [rsp+0x90]
 1015c7e:	mov    QWORD PTR [rsp+0x38],r8
 1015c83:	mov    r8d,DWORD PTR [rsp+0x80]
 1015c8b:	mov    QWORD PTR [rsp+0x30],rdx
 1015c90:	mov    QWORD PTR [rsp+0x28],rax
 1015c95:	mov    eax,DWORD PTR [rsp+0x88]
 1015c9c:	mov    edx,0x9
 1015ca1:	mov    DWORD PTR [rsp+0x20],eax
 1015ca5:	call   0x100fbb0
 1015caa:	add    rsp,0x58
 1015cae:	ret    
 1015caf:	int3   
 1015cb0:	int3   
 1015cb1:	int3   
 1015cb2:	int3   
 1015cb3:	int3   
 1015cb4:	int3   
 1015cb5:	int3   
 1015cb6:	int3   
 1015cb7:	int3   
 1015cb8:	int3   
 1015cb9:	int3   
 1015cba:	int3   
 1015cbb:	int3   
 1015cbc:	int3   
 1015cbd:	int3   
 1015cbe:	int3   
 1015cbf:	int3   
 1015cc0:	rex push rbp
 1015cc2:	push   rsi
 1015cc3:	push   rdi
 1015cc4:	push   r12
 1015cc6:	push   r13
 1015cc8:	push   r14
 1015cca:	push   r15
 1015ccc:	sub    rsp,0x30
 1015cd0:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1015cd9:	mov    QWORD PTR [rsp+0x78],rbx
 1015cde:	mov    rbp,rcx
 1015ce1:	mov    sil,0x1
 1015ce4:	lea    rcx,[rsp+0x80]
 1015cec:	call   QWORD PTR [rip+0xfffffffffffebdbe]        # 0x1001ab0
 1015cf2:	nop
 1015cf3:	mov    rax,QWORD PTR [rbp+0xd8]
 1015cfa:	mov    r14,QWORD PTR [rax+0x8]
 1015cfe:	test   r14,r14
 1015d01:	je     0x1015eb6
 1015d07:	xor    r13d,r13d
 1015d0a:	lea    r12,[rip+0x4d60f]        # 0x1063320
 1015d11:	lea    rcx,[rbp+0x10]
 1015d15:	call   QWORD PTR [rip+0xfffffffffffebdcd]        # 0x1001ae8
 1015d1b:	mov    rdx,rax
 1015d1e:	lea    rcx,[r14+0x10]
 1015d22:	call   QWORD PTR [rip+0xfffffffffffebd38]        # 0x1001a60
 1015d28:	test   eax,eax
 1015d2a:	jne    0x1015ea6
 1015d30:	lea    rcx,[rsp+0x70]
 1015d35:	call   QWORD PTR [rip+0xfffffffffffebd85]        # 0x1001ac0
 1015d3b:	nop
 1015d3c:	xor    r8d,r8d
 1015d3f:	lea    rdx,[rip+0xfffffffffffed622]        # 0x1003368
 1015d46:	lea    rcx,[rsp+0x80]
 1015d4e:	call   QWORD PTR [rip+0xfffffffffffebd04]        # 0x1001a58
 1015d54:	cmp    eax,0xffffffff
 1015d57:	je     0x1015e78
 1015d5d:	mov    rdi,QWORD PTR [r14+0xe8]
 1015d64:	test   rdi,rdi
 1015d67:	je     0x1015e9b
 1015d6d:	nop    DWORD PTR [rax]
 1015d70:	lea    rbx,[rip+0x4d549]        # 0x10632c0
 1015d77:	nop    WORD PTR [rax+rax*1+0x0]
 1015d80:	mov    eax,DWORD PTR [rbx-0x10]
 1015d83:	test   DWORD PTR [rdi],eax
 1015d85:	je     0x1015e5c
 1015d8b:	xor    r8d,r8d
 1015d8e:	mov    rdx,QWORD PTR [rbx]
 1015d91:	lea    rcx,[rsp+0x80]
 1015d99:	call   QWORD PTR [rip+0xfffffffffffebcb9]        # 0x1001a58
 1015d9f:	cmp    eax,0xffffffff
 1015da2:	je     0x1015e5c
 1015da8:	mov    rcx,rdi
 1015dab:	call   0x1012fc0
 1015db0:	lea    rdx,[rsp+0x80]
 1015db8:	lea    rcx,[rsp+0x70]
 1015dbd:	test   al,al
 1015dbf:	jne    0x1015e24
 1015dc1:	call   QWORD PTR [rip+0xfffffffffffebcd9]        # 0x1001aa0
 1015dc7:	lea    rdx,[rsp+0x88]
 1015dcf:	mov    rcx,rdi
 1015dd2:	call   0x1012e00
 1015dd7:	nop
 1015dd8:	mov    rcx,rax
 1015ddb:	call   QWORD PTR [rip+0xfffffffffffebd07]        # 0x1001ae8
 1015de1:	mov    r8,rax
 1015de4:	lea    rdx,[rip+0xfffffffffffed57d]        # 0x1003368
 1015deb:	lea    rcx,[rsp+0x70]
 1015df0:	call   QWORD PTR [rip+0xfffffffffffebbba]        # 0x10019b0
 1015df6:	nop
 1015df7:	lea    rcx,[rsp+0x88]
 1015dff:	call   QWORD PTR [rip+0xfffffffffffebca3]        # 0x1001aa8
 1015e05:	lea    rcx,[rsp+0x70]
 1015e0a:	call   QWORD PTR [rip+0xfffffffffffebcd8]        # 0x1001ae8
 1015e10:	mov    rdx,rax
 1015e13:	mov    rcx,rbp
 1015e16:	call   0x101a550
 1015e1b:	test   al,al
 1015e1d:	jne    0x1015e5c
 1015e1f:	xor    sil,sil
 1015e22:	jmp    0x1015e5c
 1015e24:	call   QWORD PTR [rip+0xfffffffffffebc76]        # 0x1001aa0
 1015e2a:	mov    r8,QWORD PTR [rbx+0x8]
 1015e2e:	mov    rdx,QWORD PTR [rbx]
 1015e31:	lea    rcx,[rsp+0x70]
 1015e36:	call   QWORD PTR [rip+0xfffffffffffebb74]        # 0x10019b0
 1015e3c:	lea    rcx,[rsp+0x70]
 1015e41:	call   QWORD PTR [rip+0xfffffffffffebca1]        # 0x1001ae8
 1015e47:	mov    rdx,rax
 1015e4a:	mov    rcx,rbp
 1015e4d:	call   0x101a550
 1015e52:	movzx  esi,sil
 1015e56:	test   al,al
 1015e58:	cmove  esi,r13d
 1015e5c:	add    rbx,0x20
 1015e60:	cmp    rbx,r12
 1015e63:	jl     0x1015d80
 1015e69:	mov    rdi,QWORD PTR [rdi+0x18]
 1015e6d:	test   rdi,rdi
 1015e70:	jne    0x1015d70
 1015e76:	jmp    0x1015e9b
 1015e78:	lea    rcx,[rsp+0x80]
 1015e80:	call   QWORD PTR [rip+0xfffffffffffebc62]        # 0x1001ae8
 1015e86:	mov    rdx,rax
 1015e89:	mov    rcx,rbp
 1015e8c:	call   0x101a550
 1015e91:	movzx  esi,sil
 1015e95:	test   al,al
 1015e97:	cmove  esi,r13d
 1015e9b:	lea    rcx,[rsp+0x70]
 1015ea0:	call   QWORD PTR [rip+0xfffffffffffebc02]        # 0x1001aa8
 1015ea6:	mov    r14,QWORD PTR [r14+0xc8]
 1015ead:	test   r14,r14
 1015eb0:	jne    0x1015d11
 1015eb6:	lea    rcx,[rsp+0x80]
 1015ebe:	call   QWORD PTR [rip+0xfffffffffffebbe4]        # 0x1001aa8
 1015ec4:	movzx  eax,sil
 1015ec8:	mov    rbx,QWORD PTR [rsp+0x78]
 1015ecd:	add    rsp,0x30
 1015ed1:	pop    r15
 1015ed3:	pop    r14
 1015ed5:	pop    r13
 1015ed7:	pop    r12
 1015ed9:	pop    rdi
 1015eda:	pop    rsi
 1015edb:	pop    rbp
 1015edc:	ret    
 1015edd:	int3   
 1015ede:	int3   
 1015edf:	int3   
 1015ee0:	int3   
 1015ee1:	int3   
 1015ee2:	int3   
 1015ee3:	int3   
 1015ee4:	int3   
 1015ee5:	int3   
 1015ee6:	int3   
 1015ee7:	int3   
 1015ee8:	int3   
 1015ee9:	int3   
 1015eea:	int3   
 1015eeb:	int3   
 1015eec:	int3   
 1015eed:	int3   
 1015eee:	int3   
 1015eef:	int3   
 1015ef0:	add    rcx,0x10
 1015ef4:	rex.W jmp QWORD PTR [rip+0xfffffffffffebb9d]        # 0x1001a98
 1015efb:	int3   
 1015efc:	int3   
 1015efd:	int3   
 1015efe:	int3   
 1015eff:	int3   
 1015f00:	int3   
 1015f01:	int3   
 1015f02:	int3   
 1015f03:	int3   
 1015f04:	int3   
 1015f05:	int3   
 1015f06:	int3   
 1015f07:	int3   
 1015f08:	int3   
 1015f09:	int3   
 1015f0a:	int3   
 1015f0b:	int3   
 1015f0c:	int3   
 1015f0d:	int3   
 1015f0e:	int3   
 1015f0f:	int3   
 1015f10:	mov    QWORD PTR [rsp+0x10],rdx
 1015f15:	push   rbx
 1015f16:	sub    rsp,0x30
 1015f1a:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
 1015f23:	mov    rbx,rdx
 1015f26:	mov    DWORD PTR [rsp+0x20],0x0
 1015f2e:	lea    rdx,[rcx+0x10]
 1015f32:	mov    rcx,rbx
 1015f35:	call   QWORD PTR [rip+0xfffffffffffeba7d]        # 0x10019b8
 1015f3b:	nop
 1015f3c:	mov    DWORD PTR [rsp+0x20],0x1
 1015f44:	mov    rax,rbx
 1015f47:	add    rsp,0x30
 1015f4b:	pop    rbx
 1015f4c:	ret    
 1015f4d:	int3   
 1015f4e:	int3   
 1015f4f:	int3   
 1015f50:	int3   
 1015f51:	int3   
 1015f52:	int3   
 1015f53:	int3   
 1015f54:	int3   
 1015f55:	int3   
 1015f56:	int3   
 1015f57:	int3   
 1015f58:	int3   
 1015f59:	int3   
 1015f5a:	int3   
 1015f5b:	int3   
 1015f5c:	int3   
 1015f5d:	int3   
 1015f5e:	int3   
 1015f5f:	int3   
 1015f60:	add    rcx,0x18
 1015f64:	rex.W jmp QWORD PTR [rip+0xfffffffffffebb2d]        # 0x1001a98
 1015f6b:	int3   
 1015f6c:	int3   
 1015f6d:	int3   
 1015f6e:	int3   
 1015f6f:	int3   
 1015f70:	int3   
 1015f71:	int3   
 1015f72:	int3   
 1015f73:	int3   
 1015f74:	int3   
 1015f75:	int3   
 1015f76:	int3   
 1015f77:	int3   
 1015f78:	int3   
 1015f79:	int3   
 1015f7a:	int3   
 1015f7b:	int3   
 1015f7c:	int3   
 1015f7d:	int3   
 1015f7e:	int3   
 1015f7f:	int3   
 1015f80:	mov    QWORD PTR [rsp+0x10],rdx
 1015f85:	push   rbx
 1015f86:	sub    rsp,0x30
 1015f8a:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
 1015f93:	mov    rbx,rdx
 1015f96:	mov    DWORD PTR [rsp+0x20],0x0
 1015f9e:	lea    rdx,[rcx+0x18]
 1015fa2:	mov    rcx,rbx
 1015fa5:	call   QWORD PTR [rip+0xfffffffffffeba0d]        # 0x10019b8
 1015fab:	nop
 1015fac:	mov    DWORD PTR [rsp+0x20],0x1
 1015fb4:	mov    rax,rbx
 1015fb7:	add    rsp,0x30
 1015fbb:	pop    rbx
 1015fbc:	ret    
 1015fbd:	int3   
 1015fbe:	int3   
 1015fbf:	int3   
 1015fc0:	int3   
 1015fc1:	int3   
 1015fc2:	int3   
 1015fc3:	int3   
 1015fc4:	int3   
 1015fc5:	int3   
 1015fc6:	int3   
 1015fc7:	int3   
 1015fc8:	int3   
 1015fc9:	int3   
 1015fca:	int3   
 1015fcb:	int3   
 1015fcc:	int3   
 1015fcd:	int3   
 1015fce:	int3   
 1015fcf:	int3   
 1015fd0:	lea    eax,[rdx-0x8]
 1015fd3:	cmp    eax,0x3
 1015fd6:	ja     0x1015fde
 1015fd8:	mov    DWORD PTR [rcx+0x24],edx
 1015fdb:	mov    al,0x1
 1015fdd:	ret    
 1015fde:	xor    al,al
 1015fe0:	ret    
 1015fe1:	int3   
 1015fe2:	int3   
 1015fe3:	int3   
 1015fe4:	int3   
 1015fe5:	int3   
 1015fe6:	int3   
 1015fe7:	int3   
 1015fe8:	int3   
 1015fe9:	int3   
 1015fea:	int3   
 1015feb:	int3   
 1015fec:	int3   
 1015fed:	int3   
 1015fee:	int3   
 1015fef:	int3   
 1015ff0:	mov    eax,DWORD PTR [rcx+0x24]
 1015ff3:	ret    
 1015ff4:	int3   
 1015ff5:	int3   
 1015ff6:	int3   
 1015ff7:	int3   
 1015ff8:	int3   
 1015ff9:	int3   
 1015ffa:	int3   
 1015ffb:	int3   
 1015ffc:	int3   
 1015ffd:	int3   
 1015ffe:	int3   
 1015fff:	int3   
 1016000:	mov    eax,DWORD PTR [rcx+0x20]
 1016003:	ret    
 1016004:	int3   
 1016005:	int3   
 1016006:	int3   
 1016007:	int3   
 1016008:	int3   
 1016009:	int3   
 101600a:	int3   
 101600b:	int3   
 101600c:	int3   
 101600d:	int3   
 101600e:	int3   
 101600f:	int3   
 1016010:	mov    BYTE PTR [rcx+0x28],dl
 1016013:	ret    
 1016014:	int3   
 1016015:	int3   
 1016016:	int3   
 1016017:	int3   
 1016018:	int3   
 1016019:	int3   
 101601a:	int3   
 101601b:	int3   
 101601c:	int3   
 101601d:	int3   
 101601e:	int3   
 101601f:	int3   
 1016020:	movzx  eax,BYTE PTR [rcx+0x28]
 1016024:	ret    
 1016025:	int3   
 1016026:	int3   
 1016027:	int3   
 1016028:	int3   
 1016029:	int3   
 101602a:	int3   
 101602b:	int3   
 101602c:	int3   
 101602d:	int3   
 101602e:	int3   
 101602f:	int3   
 1016030:	movzx  eax,BYTE PTR [rcx+0x78]
 1016034:	ret    
 1016035:	int3   
 1016036:	int3   
 1016037:	int3   
 1016038:	int3   
 1016039:	int3   
 101603a:	int3   
 101603b:	int3   
 101603c:	int3   
 101603d:	int3   
 101603e:	int3   
 101603f:	int3   
 1016040:	mov    BYTE PTR [rcx+0x29],dl
 1016043:	ret    
 1016044:	int3   
 1016045:	int3   
 1016046:	int3   
 1016047:	int3   
 1016048:	int3   
 1016049:	int3   
 101604a:	int3   
 101604b:	int3   
 101604c:	int3   
 101604d:	int3   
 101604e:	int3   
 101604f:	int3   
 1016050:	movzx  eax,BYTE PTR [rcx+0x29]
 1016054:	ret    
 1016055:	int3   
 1016056:	int3   
 1016057:	int3   
 1016058:	int3   
 1016059:	int3   
 101605a:	int3   
 101605b:	int3   
 101605c:	int3   
 101605d:	int3   
 101605e:	int3   
 101605f:	int3   
 1016060:	add    rcx,0x30
 1016064:	rex.W jmp QWORD PTR [rip+0xfffffffffffeba2d]        # 0x1001a98
 101606b:	int3   
 101606c:	int3   
 101606d:	int3   
 101606e:	int3   
 101606f:	int3   
 1016070:	int3   
 1016071:	int3   
 1016072:	int3   
 1016073:	int3   
 1016074:	int3   
 1016075:	int3   
 1016076:	int3   
 1016077:	int3   
 1016078:	int3   
 1016079:	int3   
 101607a:	int3   
 101607b:	int3   
 101607c:	int3   
 101607d:	int3   
 101607e:	int3   
 101607f:	int3   
 1016080:	mov    QWORD PTR [rsp+0x10],rdx
 1016085:	push   rbx
 1016086:	sub    rsp,0x30
 101608a:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
 1016093:	mov    rbx,rdx
 1016096:	mov    DWORD PTR [rsp+0x20],0x0
 101609e:	lea    rdx,[rcx+0x30]
 10160a2:	mov    rcx,rbx
 10160a5:	call   QWORD PTR [rip+0xfffffffffffeb90d]        # 0x10019b8
 10160ab:	nop
 10160ac:	mov    DWORD PTR [rsp+0x20],0x1
 10160b4:	mov    rax,rbx
 10160b7:	add    rsp,0x30
 10160bb:	pop    rbx
 10160bc:	ret    
 10160bd:	int3   
 10160be:	int3   
 10160bf:	int3   
 10160c0:	int3   
 10160c1:	int3   
 10160c2:	int3   
 10160c3:	int3   
 10160c4:	int3   
 10160c5:	int3   
 10160c6:	int3   
 10160c7:	int3   
 10160c8:	int3   
 10160c9:	int3   
 10160ca:	int3   
 10160cb:	int3   
 10160cc:	int3   
 10160cd:	int3   
 10160ce:	int3   
 10160cf:	int3   
 10160d0:	mov    rax,QWORD PTR [rcx+0xe8]
 10160d7:	ret    
 10160d8:	int3   
 10160d9:	int3   
 10160da:	int3   
 10160db:	int3   
 10160dc:	int3   
 10160dd:	int3   
 10160de:	int3   
 10160df:	int3   
 10160e0:	lea    rax,[rip+0x4d229]        # 0x1063310
 10160e7:	ret    
 10160e8:	int3   
 10160e9:	int3   
 10160ea:	int3   
 10160eb:	int3   
 10160ec:	int3   
 10160ed:	int3   
 10160ee:	int3   
 10160ef:	int3   
 10160f0:	xor    eax,eax
 10160f2:	lock cmpxchg DWORD PTR [rip+0x4d816],edx        # 0x1063910
 10160fa:	ret    
 10160fb:	int3   
 10160fc:	int3   
 10160fd:	int3   
 10160fe:	int3   
 10160ff:	int3   
 1016100:	int3   
 1016101:	int3   
 1016102:	int3   
 1016103:	int3   
 1016104:	int3   
 1016105:	int3   
 1016106:	int3   
 1016107:	int3   
 1016108:	int3   
 1016109:	int3   
 101610a:	int3   
 101610b:	int3   
 101610c:	int3   
 101610d:	int3   
 101610e:	int3   
 101610f:	int3   
 1016110:	mov    rcx,QWORD PTR [rcx+0xd8]
 1016117:	add    rcx,0x60
 101611b:	rex.W jmp QWORD PTR [rip+0xfffffffffffeb976]        # 0x1001a98
 1016122:	int3   
 1016123:	int3   
 1016124:	int3   
 1016125:	int3   
 1016126:	int3   
 1016127:	int3   
 1016128:	int3   
 1016129:	int3   
 101612a:	int3   
 101612b:	int3   
 101612c:	int3   
 101612d:	int3   
 101612e:	int3   
 101612f:	int3   
 1016130:	mov    eax,DWORD PTR [rip+0x4d7ee]        # 0x1063924
 1016136:	ret    
 1016137:	int3   
 1016138:	int3   
 1016139:	int3   
 101613a:	int3   
 101613b:	int3   
 101613c:	int3   
 101613d:	int3   
 101613e:	int3   
 101613f:	int3   
 1016140:	mov    rax,QWORD PTR [rcx+0xd8]
 1016147:	movzx  eax,BYTE PTR [rax+0xb9]
 101614e:	ret    
 101614f:	int3   
 1016150:	int3   
 1016151:	int3   
 1016152:	int3   
 1016153:	int3   
 1016154:	int3   
 1016155:	int3   
 1016156:	int3   
 1016157:	int3   
 1016158:	int3   
 1016159:	int3   
 101615a:	int3   
 101615b:	int3   
 101615c:	int3   
 101615d:	int3   
 101615e:	int3   
 101615f:	int3   
 1016160:	mov    QWORD PTR [rsp+0x10],rdx
 1016165:	push   rdi
 1016166:	sub    rsp,0x30
 101616a:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
 1016173:	mov    QWORD PTR [rsp+0x40],rbx
 1016178:	mov    rdi,rdx
 101617b:	mov    rbx,rcx
 101617e:	mov    DWORD PTR [rsp+0x20],0x0
 1016186:	add    rcx,0x10
 101618a:	call   QWORD PTR [rip+0xfffffffffffeb958]        # 0x1001ae8
 1016190:	mov    rdx,rax
 1016193:	mov    rcx,QWORD PTR [rbx+0xd8]
 101619a:	add    rcx,0x120
 10161a1:	call   0x100ea00
 10161a6:	mov    rdx,rax
 10161a9:	mov    rcx,rdi
 10161ac:	call   QWORD PTR [rip+0xfffffffffffeb806]        # 0x10019b8
 10161b2:	nop
 10161b3:	mov    DWORD PTR [rsp+0x20],0x1
 10161bb:	mov    rax,rdi
 10161be:	mov    rbx,QWORD PTR [rsp+0x40]
 10161c3:	add    rsp,0x30
 10161c7:	pop    rdi
 10161c8:	ret    
 10161c9:	int3   
 10161ca:	int3   
 10161cb:	int3   
 10161cc:	int3   
 10161cd:	int3   
 10161ce:	int3   
 10161cf:	int3   
 10161d0:	lea    rax,[rip+0x4d73d]        # 0x1063914
 10161d7:	ret    
 10161d8:	int3   
 10161d9:	int3   
 10161da:	int3   
 10161db:	int3   
 10161dc:	int3   
 10161dd:	int3   
 10161de:	int3   
 10161df:	int3   
 10161e0:	rex push rdi
 10161e2:	sub    rsp,0x30
 10161e6:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 10161ef:	mov    QWORD PTR [rsp+0x48],rbx
 10161f4:	mov    rbx,rcx
 10161f7:	mov    BYTE PTR [rcx+0x29],0x0
 10161fb:	mov    QWORD PTR [rcx+0x80],0xffffffffffffffff
 1016206:	xor    edi,edi
 1016208:	mov    QWORD PTR [rcx+0xc8],rdi
 101620f:	mov    QWORD PTR [rcx+0xe8],rdi
 1016216:	lea    ecx,[rdi+0x38]
 1016219:	call   0x103f9d2
 101621e:	mov    QWORD PTR [rsp+0x40],rax
 1016223:	test   rax,rax
 1016226:	je     0x1016257
 1016228:	lea    rcx,[rip+0xfffffffffffec649]        # 0x1002878
 101622f:	mov    QWORD PTR [rax],rcx
 1016232:	mov    QWORD PTR [rax+0x18],rdi
 1016236:	mov    QWORD PTR [rax+0x20],rdi
 101623a:	mov    QWORD PTR [rax+0x10],rdi
 101623e:	mov    QWORD PTR [rax+0x8],rdi
 1016242:	mov    QWORD PTR [rax+0x28],rdi
 1016246:	mov    QWORD PTR [rax+0x30],0xa
 101624e:	mov    QWORD PTR [rbx+0xe0],rax
 1016255:	jmp    0x101625e
 1016257:	mov    QWORD PTR [rbx+0xe0],rdi
 101625e:	mov    rbx,QWORD PTR [rsp+0x48]
 1016263:	add    rsp,0x30
 1016267:	pop    rdi
 1016268:	ret    
 1016269:	int3   
 101626a:	int3   
 101626b:	int3   
 101626c:	int3   
 101626d:	int3   
 101626e:	int3   
 101626f:	int3   
 1016270:	rex push rdi
 1016272:	sub    rsp,0x860
 1016279:	mov    rax,QWORD PTR [rip+0x4d5f0]        # 0x1063870
 1016280:	xor    rax,rsp
 1016283:	mov    QWORD PTR [rsp+0x850],rax
 101628b:	mov    r9d,0x3ff
 1016291:	mov    rdi,rcx
 1016294:	mov    r8,rdx
 1016297:	lea    edx,[r9+0x1]
 101629b:	lea    rcx,[rsp+0x50]
 10162a0:	call   QWORD PTR [rip+0xfffffffffffeb402]        # 0x10016a8
 10162a6:	lea    rax,[rsp+0x50]
 10162ab:	xor    r11d,r11d
 10162ae:	mov    QWORD PTR [rsp+0x48],rax
 10162b3:	mov    WORD PTR [rsp+0x84e],r11w
 10162bc:	lea    rcx,[rsp+0x50]
 10162c1:	or     rax,0xffffffffffffffff
 10162c5:	inc    rax
 10162c8:	cmp    WORD PTR [rcx+rax*2],r11w
 10162cd:	jne    0x10162c5
 10162cf:	add    eax,eax
 10162d1:	lea    rdx,[rip+0x4d178]        # 0x1063450
 10162d8:	lea    rcx,[rsp+0x40]
 10162dd:	mov    DWORD PTR [rsp+0x40],eax
 10162e1:	lea    rax,[rdi+0x38]
 10162e5:	xor    r9d,r9d
 10162e8:	mov    QWORD PTR [rsp+0x30],rax
 10162ed:	mov    DWORD PTR [rsp+0x28],r11d
 10162f2:	xor    r8d,r8d
 10162f5:	mov    QWORD PTR [rsp+0x20],r11
 10162fa:	call   QWORD PTR [rip+0xfffffffffffeaeb8]        # 0x10011b8
 1016300:	test   eax,eax
 1016302:	jne    0x1016348
 1016304:	mov    rcx,QWORD PTR [rdi+0x8]
 1016308:	mov    QWORD PTR [rsp+0x880],rbx
 1016310:	movsxd rdx,DWORD PTR [rcx+0x4]
 1016314:	mov    rbx,QWORD PTR [rdx+rdi*1+0x8]
 1016319:	call   QWORD PTR [rip+0xfffffffffffeb231]        # 0x1001550
 101631f:	mov    rcx,QWORD PTR [rdi+0x8]
 1016323:	movsxd r8,DWORD PTR [rcx+0x4]
 1016327:	lea    rcx,[rdi+0x8]
 101632b:	mov    edx,eax
 101632d:	add    rcx,r8
 1016330:	mov    r8d,0xc000c452
 1016336:	xor    r9d,r9d
 1016339:	call   QWORD PTR [rbx+0x20]
 101633c:	mov    rbx,QWORD PTR [rsp+0x880]
 1016344:	xor    al,al
 1016346:	jmp    0x101634a
 1016348:	mov    al,0x1
 101634a:	mov    rcx,QWORD PTR [rsp+0x850]
 1016352:	xor    rcx,rsp
 1016355:	call   0x103ff40
 101635a:	add    rsp,0x860
 1016361:	pop    rdi
 1016362:	ret    
 1016363:	int3   
 1016364:	int3   
 1016365:	int3   
 1016366:	int3   
 1016367:	int3   
 1016368:	int3   
 1016369:	int3   
 101636a:	int3   
 101636b:	int3   
 101636c:	int3   
 101636d:	int3   
 101636e:	int3   
 101636f:	int3   
 1016370:	rex push rbx
 1016372:	push   rsi
 1016373:	sub    rsp,0x868
 101637a:	mov    rax,QWORD PTR [rip+0x4d4ef]        # 0x1063870
 1016381:	xor    rax,rsp
 1016384:	mov    QWORD PTR [rsp+0x850],rax
 101638c:	cmp    BYTE PTR [rcx+0x29],0x0
 1016390:	mov    rsi,rdx
 1016393:	mov    rbx,rcx
 1016396:	lea    rdx,[rip+0xfffffffffffeba73]        # 0x1001e10
 101639d:	je     0x10163ad
 101639f:	mov    rcx,rsi
 10163a2:	call   QWORD PTR [rip+0xfffffffffffeb6f0]        # 0x1001a98
 10163a8:	jmp    0x1016497
 10163ad:	cmp    DWORD PTR [rcx+0x38],0x0
 10163b1:	mov    QWORD PTR [rsp+0x860],rdi
 10163b9:	mov    rcx,rsi
 10163bc:	jne    0x10163c9
 10163be:	call   QWORD PTR [rip+0xfffffffffffeb6d4]        # 0x1001a98
 10163c4:	jmp    0x101648f
 10163c9:	mov    QWORD PTR [rsp+0x890],rbp
 10163d1:	call   QWORD PTR [rip+0xfffffffffffeb6c1]        # 0x1001a98
 10163d7:	lea    r11,[rsp+0x40]
 10163dc:	mov    QWORD PTR [rsp+0x30],r11
 10163e1:	xor    ebp,ebp
 10163e3:	lea    rdx,[rsp+0x50]
 10163e8:	lea    rcx,[rbx+0x38]
 10163ec:	xor    r9d,r9d
 10163ef:	xor    r8d,r8d
 10163f2:	mov    DWORD PTR [rsp+0x28],ebp
 10163f6:	mov    QWORD PTR [rsp+0x20],rbp
 10163fb:	call   QWORD PTR [rip+0xfffffffffffeadaf]        # 0x10011b0
 1016401:	test   eax,eax
 1016403:	je     0x1016457
 1016405:	mov    edi,DWORD PTR [rsp+0x40]
 1016409:	mov    ebx,0x800
 101640e:	lea    rcx,[rsp+0x50]
 1016413:	cmp    edi,ebx
 1016415:	mov    r8d,ebx
 1016418:	cmova  edi,ebx
 101641b:	xor    edx,edx
 101641d:	call   0x104026c
 1016422:	mov    rdx,QWORD PTR [rsp+0x48]
 1016427:	lea    rcx,[rsp+0x50]
 101642c:	mov    r8d,edi
 101642f:	call   0x10402e4
 1016434:	lea    rdx,[rsp+0x50]
 1016439:	mov    rcx,rsi
 101643c:	mov    WORD PTR [rsp+0x84e],bp
 1016444:	call   QWORD PTR [rip+0xfffffffffffeb64e]        # 0x1001a98
 101644a:	lea    rdi,[rsp+0x50]
 101644f:	xor    eax,eax
 1016451:	mov    ecx,ebx
 1016453:	rep stos BYTE PTR es:[rdi],al
 1016455:	jmp    0x1016487
 1016457:	mov    rax,QWORD PTR [rbx+0x8]
 101645b:	movsxd rcx,DWORD PTR [rax+0x4]
 101645f:	mov    rdi,QWORD PTR [rcx+rbx*1+0x8]
 1016464:	call   QWORD PTR [rip+0xfffffffffffeb0e6]        # 0x1001550
 101646a:	xor    r9d,r9d
 101646d:	mov    edx,eax
 101646f:	mov    rax,QWORD PTR [rbx+0x8]
 1016473:	mov    r8d,0xc000c453
 1016479:	movsxd rcx,DWORD PTR [rax+0x4]
 101647d:	add    rcx,0x8
 1016481:	add    rcx,rbx
 1016484:	call   QWORD PTR [rdi+0x20]
 1016487:	mov    rbp,QWORD PTR [rsp+0x890]
 101648f:	mov    rdi,QWORD PTR [rsp+0x860]
 1016497:	mov    rcx,QWORD PTR [rsp+0x850]
 101649f:	xor    rcx,rsp
 10164a2:	call   0x103ff40
 10164a7:	add    rsp,0x868
 10164ae:	pop    rsi
 10164af:	pop    rbx
 10164b0:	ret    
 10164b1:	int3   
 10164b2:	int3   
 10164b3:	int3   
 10164b4:	int3   
 10164b5:	int3   
 10164b6:	int3   
 10164b7:	int3   
 10164b8:	int3   
 10164b9:	int3   
 10164ba:	int3   
 10164bb:	int3   
 10164bc:	int3   
 10164bd:	int3   
 10164be:	int3   
 10164bf:	int3   
 10164c0:	mov    QWORD PTR [rsp+0x8],rcx
 10164c5:	push   rdi
 10164c6:	sub    rsp,0x50
 10164ca:	mov    QWORD PTR [rsp+0x48],0xfffffffffffffffe
 10164d3:	mov    QWORD PTR [rsp+0x70],rbx
 10164d8:	mov    QWORD PTR [rsp+0x78],rsi
 10164dd:	mov    rbx,rcx
 10164e0:	mov    dil,0x1
 10164e3:	cmp    BYTE PTR [rcx+0x29],0x0
 10164e7:	jne    0x101662f
 10164ed:	lea    rdx,[rip+0xfffffffffffeb91c]        # 0x1001e10
 10164f4:	lea    rcx,[rsp+0x68]
 10164f9:	call   QWORD PTR [rip+0xfffffffffffeb5b1]        # 0x1001ab0
 10164ff:	nop
 1016500:	lea    rcx,[rbx+0x30]
 1016504:	call   QWORD PTR [rip+0xfffffffffffeb5e6]        # 0x1001af0
 101650a:	test   eax,eax
 101650c:	jne    0x101651f
 101650e:	lea    rdx,[rip+0xfffffffffffee89f]        # 0x1004db4
 1016515:	lea    rcx,[rbx+0x30]
 1016519:	call   QWORD PTR [rip+0xfffffffffffeb579]        # 0x1001a98
 101651f:	mov    rax,QWORD PTR [rbx+0xd8]
 1016526:	cmp    BYTE PTR [rax+0xb8],0x0
 101652d:	jne    0x1016624
 1016533:	mov    rcx,QWORD PTR [rip+0x4d3de]        # 0x1063918
 101653a:	call   QWORD PTR [rip+0xfffffffffffeacf8]        # 0x1001238
 1016540:	nop
 1016541:	mov    rax,QWORD PTR [rbx+0x8]
 1016545:	movsxd rcx,DWORD PTR [rax+0x4]
 1016549:	add    rcx,0x8
 101654d:	add    rcx,rbx
 1016550:	mov    rax,QWORD PTR [rcx]
 1016553:	mov    BYTE PTR [rsp+0x28],0x1
 1016558:	mov    BYTE PTR [rsp+0x20],0x0
 101655d:	mov    r9d,0x1
 1016563:	xor    r8d,r8d
 1016566:	mov    edx,0x4000c35f
 101656b:	call   QWORD PTR [rax]
 101656d:	call   QWORD PTR [rip+0xfffffffffffeb1f5]        # 0x1001768
 1016573:	lea    rcx,[rax+0x30]
 1016577:	call   QWORD PTR [rip+0xfffffffffffeb1fb]        # 0x1001778
 101657d:	mov    edi,0xd
 1016582:	call   QWORD PTR [rip+0xfffffffffffeb228]        # 0x10017b0
 1016588:	cmp    di,ax
 101658b:	je     0x101659d
 101658d:	movzx  edx,ax
 1016590:	lea    rcx,[rsp+0x68]
 1016595:	call   QWORD PTR [rip+0xfffffffffffeb3b5]        # 0x1001950
 101659b:	jmp    0x1016582
 101659d:	mov    rax,QWORD PTR [rbx+0x8]
 10165a1:	movsxd rcx,DWORD PTR [rax+0x4]
 10165a5:	add    rcx,0x8
 10165a9:	add    rcx,rbx
 10165ac:	mov    rax,QWORD PTR [rcx]
 10165af:	mov    BYTE PTR [rsp+0x30],0x0
 10165b4:	mov    BYTE PTR [rsp+0x28],0x1
 10165b9:	mov    DWORD PTR [rsp+0x20],0x0
 10165c1:	xor    r9d,r9d
 10165c4:	lea    r8,[rip+0xfffffffffffee7f1]        # 0x1004dbc
 10165cb:	mov    edx,0x4000c484
 10165d0:	call   QWORD PTR [rax+0x8]
 10165d3:	lea    rcx,[rsp+0x68]
 10165d8:	call   QWORD PTR [rip+0xfffffffffffeb50a]        # 0x1001ae8
 10165de:	mov    rdx,rax
 10165e1:	mov    rcx,rbx
 10165e4:	call   0x1016270
 10165e9:	movzx  edi,al
 10165ec:	mov    BYTE PTR [rsp+0x40],al
 10165f0:	jmp    0x10165fc
 10165f2:	mov    rbx,QWORD PTR [rsp+0x60]
 10165f7:	movzx  edi,BYTE PTR [rsp+0x40]
 10165fc:	mov    rcx,QWORD PTR [rip+0x4d315]        # 0x1063918
 1016603:	call   QWORD PTR [rip+0xfffffffffffeac37]        # 0x1001240
 1016609:	mov    r11,QWORD PTR [rbx+0x8]
 101660d:	movsxd rcx,DWORD PTR [r11+0x4]
 1016611:	add    rcx,0x8
 1016615:	add    rcx,rbx
 1016618:	mov    rax,QWORD PTR [rcx]
 101661b:	mov    edx,0x4000c360
 1016620:	call   QWORD PTR [rax+0x10]
 1016623:	nop
 1016624:	lea    rcx,[rsp+0x68]
 1016629:	call   QWORD PTR [rip+0xfffffffffffeb479]        # 0x1001aa8
 101662f:	movzx  eax,dil
 1016633:	mov    rbx,QWORD PTR [rsp+0x70]
 1016638:	mov    rsi,QWORD PTR [rsp+0x78]
 101663d:	add    rsp,0x50
 1016641:	pop    rdi
 1016642:	ret    
 1016643:	int3   
 1016644:	int3   
 1016645:	int3   
 1016646:	int3   
 1016647:	int3   
 1016648:	int3   
 1016649:	int3   
 101664a:	int3   
 101664b:	int3   
 101664c:	int3   
 101664d:	int3   
 101664e:	int3   
 101664f:	int3   
 1016650:	rex push rsi
 1016652:	push   rdi
 1016653:	push   r14
 1016655:	sub    rsp,0x50
 1016659:	mov    QWORD PTR [rsp+0x40],0xfffffffffffffffe
 1016662:	mov    QWORD PTR [rsp+0x78],rbx
 1016667:	mov    QWORD PTR [rsp+0x80],rbp
 101666f:	movzx  r14d,r9b
 1016673:	mov    esi,r8d
 1016676:	mov    rbp,rdx
 1016679:	mov    rdi,rcx
 101667c:	mov    rcx,QWORD PTR [rcx+0xe8]
 1016683:	test   rcx,rcx
 1016686:	je     0x1016698
 1016688:	call   0x1012fe0
 101668d:	test   rax,rax
 1016690:	je     0x1016698
 1016692:	or     DWORD PTR [rax],esi
 1016694:	mov    al,0x1
 1016696:	jmp    0x10166f2
 1016698:	mov    ecx,0x28
 101669d:	call   0x103f9d2
 10166a2:	mov    QWORD PTR [rsp+0x70],rax
 10166a7:	xor    ebx,ebx
 10166a9:	test   rax,rax
 10166ac:	je     0x10166e2
 10166ae:	mov    rcx,QWORD PTR [rdi+0xe8]
 10166b5:	mov    QWORD PTR [rsp+0x30],rcx
 10166ba:	mov    ecx,DWORD PTR [rsp+0x98]
 10166c1:	mov    DWORD PTR [rsp+0x28],ecx
 10166c5:	mov    BYTE PTR [rsp+0x20],r14b
 10166ca:	mov    r9,QWORD PTR [rsp+0x90]
 10166d2:	mov    r8d,esi
 10166d5:	mov    rdx,rbp
 10166d8:	mov    rcx,rax
 10166db:	call   0x1012cf0
 10166e0:	jmp    0x10166e5
 10166e2:	mov    rax,rbx
 10166e5:	mov    QWORD PTR [rdi+0xe8],rax
 10166ec:	test   rax,rax
 10166ef:	setne  al
 10166f2:	mov    rbx,QWORD PTR [rsp+0x78]
 10166f7:	mov    rbp,QWORD PTR [rsp+0x80]
 10166ff:	add    rsp,0x50
 1016703:	pop    r14
 1016705:	pop    rdi
 1016706:	pop    rsi
 1016707:	ret    
 1016708:	int3   
 1016709:	int3   
 101670a:	int3   
 101670b:	int3   
 101670c:	int3   
 101670d:	int3   
 101670e:	int3   
 101670f:	int3   
 1016710:	rex push rbp
 1016712:	push   rbx
 1016713:	push   rsi
 1016714:	push   rdi
 1016715:	push   r12
 1016717:	push   r13
 1016719:	push   r14
 101671b:	push   r15
 101671d:	lea    rbp,[rsp-0x6c8]
 1016725:	sub    rsp,0x7c8
 101672c:	mov    QWORD PTR [rbp+0x70],0xfffffffffffffffe
 1016734:	mov    rax,QWORD PTR [rip+0x4d135]        # 0x1063870
 101673b:	xor    rax,rsp
 101673e:	mov    QWORD PTR [rbp+0x6b0],rax
 1016745:	mov    r12,r9
 1016748:	mov    QWORD PTR [rbp+0x68],r8
 101674c:	mov    r15d,edx
 101674f:	mov    rsi,rcx
 1016752:	mov    DWORD PTR [rsp+0x70],0x105
 101675a:	mov    DWORD PTR [rsp+0x50],0x20a
 1016762:	mov    DWORD PTR [rbp-0x50],0x20a
 1016769:	xor    r14d,r14d
 101676c:	mov    r13d,r14d
 101676f:	mov    QWORD PTR [rsp+0x68],r14
 1016774:	lea    rdx,[rip+0xfffffffffffeb695]        # 0x1001e10
 101677b:	lea    rcx,[rbp-0x48]
 101677f:	call   QWORD PTR [rip+0xfffffffffffeb32b]        # 0x1001ab0
 1016785:	nop
 1016786:	mov    rax,QWORD PTR [rsi+0xd8]
 101678d:	cmp    BYTE PTR [rax+0xdd],r14b
 1016794:	jne    0x10167ac
 1016796:	lea    rcx,[rsi+0x10]
 101679a:	call   QWORD PTR [rip+0xfffffffffffeb348]        # 0x1001ae8
 10167a0:	mov    rcx,rax
 10167a3:	call   0x1031de0
 10167a8:	test   al,al
 10167aa:	je     0x10167ae
 10167ac:	mov    al,0x1
 10167ae:	mov    BYTE PTR [rsp+0x41],al
 10167b2:	lea    rcx,[rip+0xfffffffffffec287]        # 0x1002a40
 10167b9:	mov    QWORD PTR [rbp-0x28],rcx
 10167bd:	mov    QWORD PTR [rbp-0x20],r14
 10167c1:	mov    DWORD PTR [rbp-0x18],0x11
 10167c8:	mov    QWORD PTR [rbp-0x10],r14
 10167cc:	mov    QWORD PTR [rbp-0x8],r14
 10167d0:	mov    QWORD PTR [rbp+0x0],r14
 10167d4:	mov    QWORD PTR [rbp+0x8],0xa
 10167dc:	lea    rdi,[rip+0xfffffffffffeb63d]        # 0x1001e20
 10167e3:	mov    QWORD PTR [rbp+0x10],rdi
 10167e7:	mov    QWORD PTR [rbp+0x28],r14
 10167eb:	mov    QWORD PTR [rbp+0x30],r14
 10167ef:	mov    QWORD PTR [rbp+0x20],r14
 10167f3:	mov    QWORD PTR [rbp+0x18],r14
 10167f7:	mov    QWORD PTR [rbp+0x38],r14
 10167fb:	mov    QWORD PTR [rbp+0x40],0xa
 1016803:	mov    QWORD PTR [rsp+0x78],rdi
 1016808:	mov    QWORD PTR [rbp-0x70],r14
 101680c:	mov    QWORD PTR [rbp-0x68],r14
 1016810:	mov    QWORD PTR [rbp-0x78],r14
 1016814:	mov    QWORD PTR [rbp-0x80],r14
 1016818:	mov    QWORD PTR [rbp-0x60],r14
 101681c:	mov    QWORD PTR [rbp-0x58],0xa
 1016824:	mov    BYTE PTR [rsp+0x40],0x0
 1016829:	test   al,al
 101682b:	je     0x1016a9a
 1016831:	lea    rcx,[rbp-0x28]
 1016835:	call   0x1012a20
 101683a:	mov    rbx,QWORD PTR [rbp+0x18]
 101683e:	test   rbx,rbx
 1016841:	je     0x1016855
 1016843:	lea    rcx,[rbx+0x10]
 1016847:	call   QWORD PTR [rip+0xfffffffffffeb25b]        # 0x1001aa8
 101684d:	mov    rbx,QWORD PTR [rbx]
 1016850:	test   rbx,rbx
 1016853:	jne    0x1016843
 1016855:	mov    QWORD PTR [rbp+0x28],r14
 1016859:	mov    QWORD PTR [rbp+0x30],r14
 101685d:	mov    QWORD PTR [rbp+0x20],r14
 1016861:	mov    QWORD PTR [rbp+0x18],r14
 1016865:	mov    rcx,QWORD PTR [rbp+0x38]
 1016869:	call   0x103f9ae
 101686e:	mov    QWORD PTR [rbp+0x38],r14
 1016872:	mov    rbx,QWORD PTR [rbp-0x80]
 1016876:	test   rbx,rbx
 1016879:	je     0x1016892
 101687b:	nop    DWORD PTR [rax+rax*1+0x0]
 1016880:	lea    rcx,[rbx+0x10]
 1016884:	call   QWORD PTR [rip+0xfffffffffffeb21e]        # 0x1001aa8
 101688a:	mov    rbx,QWORD PTR [rbx]
 101688d:	test   rbx,rbx
 1016890:	jne    0x1016880
 1016892:	mov    QWORD PTR [rbp-0x70],r14
 1016896:	mov    QWORD PTR [rbp-0x68],r14
 101689a:	mov    QWORD PTR [rbp-0x78],r14
 101689e:	mov    QWORD PTR [rbp-0x80],r14
 10168a2:	mov    rcx,QWORD PTR [rbp-0x60]
 10168a6:	call   0x103f9ae
 10168ab:	mov    QWORD PTR [rbp-0x60],r14
 10168af:	lea    rcx,[rsi+0x10]
 10168b3:	call   QWORD PTR [rip+0xfffffffffffeb22f]        # 0x1001ae8
 10168b9:	mov    rcx,rax
 10168bc:	call   0x10325f0
 10168c1:	mov    BYTE PTR [rsp+0x40],al
 10168c5:	lea    rcx,[rsi+0x10]
 10168c9:	call   QWORD PTR [rip+0xfffffffffffeb219]        # 0x1001ae8
 10168cf:	mov    rcx,rax
 10168d2:	lea    r8,[rbp-0x28]
 10168d6:	lea    rdx,[rbp+0x10]
 10168da:	call   0x1032290
 10168df:	mov    r11,QWORD PTR [rbp-0x10]
 10168e3:	neg    r11
 10168e6:	sbb    rdi,rdi
 10168e9:	je     0x1016a93
 10168ef:	lea    rcx,[rsp+0x58]
 10168f4:	call   QWORD PTR [rip+0xfffffffffffeb1c6]        # 0x1001ac0
 10168fa:	nop
 10168fb:	lea    rcx,[rsp+0x60]
 1016900:	call   QWORD PTR [rip+0xfffffffffffeb1ba]        # 0x1001ac0
 1016906:	nop
 1016907:	mov    eax,r14d
 101690a:	mov    r9,QWORD PTR [rbp-0x20]
 101690e:	test   r9,r9
 1016911:	setne  al
 1016914:	test   eax,eax
 1016916:	je     0x1016a8d
 101691c:	mov    rbx,rdi
 101691f:	mov    eax,r14d
 1016922:	test   rdi,rdi
 1016925:	setne  al
 1016928:	test   eax,eax
 101692a:	je     0x1016a87
 1016930:	mov    r8d,DWORD PTR [rbp-0x18]
 1016934:	cmp    rdi,0xffffffffffffffff
 1016938:	jne    0x1016969
 101693a:	mov    ecx,r14d
 101693d:	test   r8d,r8d
 1016940:	je     0x1016958
 1016942:	mov    rax,r9
 1016945:	mov    rbx,QWORD PTR [rax]
 1016948:	test   rbx,rbx
 101694b:	jne    0x1016958
 101694d:	inc    ecx
 101694f:	add    rax,0x8
 1016953:	cmp    ecx,r8d
 1016956:	jb     0x1016945
 1016958:	mov    eax,r14d
 101695b:	test   rbx,rbx
 101695e:	setne  al
 1016961:	test   eax,eax
 1016963:	je     0x1016a7b
 1016969:	mov    rdi,QWORD PTR [rbx+0x10]
 101696d:	test   rdi,rdi
 1016970:	jne    0x101699b
 1016972:	xor    edx,edx
 1016974:	mov    eax,DWORD PTR [rbx+0x18]
 1016977:	div    r8d
 101697a:	inc    edx
 101697c:	movsxd rax,edx
 101697f:	cmp    edx,r8d
 1016982:	jae    0x101699b
 1016984:	lea    rax,[r9+rax*8]
 1016988:	mov    rdi,QWORD PTR [rax]
 101698b:	test   rdi,rdi
 101698e:	jne    0x101699b
 1016990:	inc    edx
 1016992:	add    rax,0x8
 1016996:	cmp    edx,r8d
 1016999:	jb     0x1016988
 101699b:	mov    rdx,rbx
 101699e:	lea    rcx,[rsp+0x58]
 10169a3:	call   QWORD PTR [rip+0xfffffffffffeb0f7]        # 0x1001aa0
 10169a9:	lea    rdx,[rbx+0x8]
 10169ad:	lea    rcx,[rsp+0x60]
 10169b2:	call   QWORD PTR [rip+0xfffffffffffeb0e8]        # 0x1001aa0
 10169b8:	mov    r14,QWORD PTR [rbp-0x78]
 10169bc:	mov    rbx,QWORD PTR [rbp-0x68]
 10169c0:	test   rbx,rbx
 10169c3:	jne    0x1016a03
 10169c5:	lea    r8d,[rbx+0x18]
 10169c9:	mov    rdx,QWORD PTR [rbp-0x58]
 10169cd:	lea    rcx,[rbp-0x60]
 10169d1:	call   0x103f9a2
 10169d6:	mov    rdx,QWORD PTR [rbp-0x58]
 10169da:	lea    r8,[rdx-0x1]
 10169de:	lea    r8,[rdx+r8*2]
 10169e2:	lea    r8,[rax+r8*8]
 10169e6:	mov    rbx,QWORD PTR [rbp-0x68]
 10169ea:	dec    rdx
 10169ed:	js     0x1016a03
 10169ef:	nop
 10169f0:	mov    QWORD PTR [r8],rbx
 10169f3:	mov    rbx,r8
 10169f6:	mov    QWORD PTR [rbp-0x68],rbx
 10169fa:	sub    r8,0x18
 10169fe:	dec    rdx
 1016a01:	jns    0x10169f0
 1016a03:	xor    ecx,ecx
 1016a05:	mov    eax,ecx
 1016a07:	test   rbx,rbx
 1016a0a:	setne  al
 1016a0d:	test   eax,eax
 1016a0f:	je     0x1016a81
 1016a11:	mov    rax,QWORD PTR [rbx]
 1016a14:	mov    QWORD PTR [rbp-0x68],rax
 1016a18:	mov    QWORD PTR [rbx+0x8],r14
 1016a1c:	mov    QWORD PTR [rbx],rcx
 1016a1f:	inc    QWORD PTR [rbp-0x70]
 1016a23:	lea    r14,[rbx+0x10]
 1016a27:	test   r14,r14
 1016a2a:	je     0x1016a35
 1016a2c:	mov    rcx,r14
 1016a2f:	call   QWORD PTR [rip+0xfffffffffffeb08b]        # 0x1001ac0
 1016a35:	lea    rdx,[rsp+0x60]
 1016a3a:	mov    rcx,r14
 1016a3d:	call   QWORD PTR [rip+0xfffffffffffeb05d]        # 0x1001aa0
 1016a43:	mov    r11,QWORD PTR [rbp-0x78]
 1016a47:	test   r11,r11
 1016a4a:	je     0x1016a51
 1016a4c:	mov    QWORD PTR [r11],rbx
 1016a4f:	jmp    0x1016a55
 1016a51:	mov    QWORD PTR [rbp-0x80],rbx
 1016a55:	mov    QWORD PTR [rbp-0x78],rbx
 1016a59:	lea    rcx,[rsp+0x60]
 1016a5e:	call   QWORD PTR [rip+0xfffffffffffeb044]        # 0x1001aa8
 1016a64:	nop
 1016a65:	lea    rcx,[rsp+0x58]
 1016a6a:	call   QWORD PTR [rip+0xfffffffffffeb038]        # 0x1001aa8
 1016a70:	xor    r14d,r14d
 1016a73:	test   rdi,rdi
 1016a76:	jmp    0x10168e9
 1016a7b:	call   0x103f972
 1016a80:	int3   
 1016a81:	call   0x103f972
 1016a86:	int3   
 1016a87:	call   0x103f972
 1016a8c:	int3   
 1016a8d:	call   0x103f972
 1016a92:	nop
 1016a93:	lea    rdi,[rip+0xfffffffffffeb386]        # 0x1001e20
 1016a9a:	mov    ecx,r14d
 1016a9d:	lea    r8,[rip+0x4c80c]        # 0x10632b0
 1016aa4:	mov    rax,r8
 1016aa7:	lea    rdx,[rip+0x4c862]        # 0x1063310
 1016aae:	xchg   ax,ax
 1016ab0:	cmp    DWORD PTR [rax],r15d
 1016ab3:	je     0x1016ac2
 1016ab5:	inc    ecx
 1016ab7:	add    rax,0x20
 1016abb:	cmp    rax,rdx
 1016abe:	jl     0x1016ab0
 1016ac0:	jmp    0x1016ad8
 1016ac2:	movsxd rdx,ecx
 1016ac5:	shl    rdx,0x5
 1016ac9:	mov    rdx,QWORD PTR [rdx+r8*1+0x8]
 1016ace:	lea    rcx,[rbp-0x48]
 1016ad2:	call   QWORD PTR [rip+0xfffffffffffeafc0]        # 0x1001a98
 1016ad8:	lea    rcx,[rbp-0x48]
 1016adc:	call   QWORD PTR [rip+0xfffffffffffeb00e]        # 0x1001af0
 1016ae2:	test   eax,eax
 1016ae4:	jne    0x1016c18
 1016aea:	mov    QWORD PTR [rsp+0x78],rdi
 1016aef:	mov    rbx,QWORD PTR [rbp-0x80]
 1016af3:	test   rbx,rbx
 1016af6:	je     0x1016b12
 1016af8:	nop    DWORD PTR [rax+rax*1+0x0]
 1016b00:	lea    rcx,[rbx+0x10]
 1016b04:	call   QWORD PTR [rip+0xfffffffffffeaf9e]        # 0x1001aa8
 1016b0a:	mov    rbx,QWORD PTR [rbx]
 1016b0d:	test   rbx,rbx
 1016b10:	jne    0x1016b00
 1016b12:	mov    QWORD PTR [rbp-0x70],r14
 1016b16:	mov    QWORD PTR [rbp-0x68],r14
 1016b1a:	mov    QWORD PTR [rbp-0x78],r14
 1016b1e:	mov    QWORD PTR [rbp-0x80],r14
 1016b22:	mov    rcx,QWORD PTR [rbp-0x60]
 1016b26:	call   0x103f9ae
 1016b2b:	mov    QWORD PTR [rbp-0x60],r14
 1016b2f:	mov    QWORD PTR [rbp+0x10],rdi
 1016b33:	mov    rbx,QWORD PTR [rbp+0x18]
 1016b37:	test   rbx,rbx
 1016b3a:	je     0x1016b52
 1016b3c:	nop    DWORD PTR [rax+0x0]
 1016b40:	lea    rcx,[rbx+0x10]
 1016b44:	call   QWORD PTR [rip+0xfffffffffffeaf5e]        # 0x1001aa8
 1016b4a:	mov    rbx,QWORD PTR [rbx]
 1016b4d:	test   rbx,rbx
 1016b50:	jne    0x1016b40
 1016b52:	mov    QWORD PTR [rbp+0x28],r14
 1016b56:	mov    QWORD PTR [rbp+0x30],r14
 1016b5a:	mov    QWORD PTR [rbp+0x20],r14
 1016b5e:	mov    QWORD PTR [rbp+0x18],r14
 1016b62:	mov    rcx,QWORD PTR [rbp+0x38]
 1016b66:	call   0x103f9ae
 1016b6b:	mov    QWORD PTR [rbp+0x38],r14
 1016b6f:	lea    rax,[rip+0xfffffffffffebeca]        # 0x1002a40
 1016b76:	mov    QWORD PTR [rbp-0x28],rax
 1016b7a:	mov    rcx,QWORD PTR [rbp-0x20]
 1016b7e:	test   rcx,rcx
 1016b81:	je     0x1016bdc
 1016b83:	mov    edi,r14d
 1016b86:	mov    eax,DWORD PTR [rbp-0x18]
 1016b89:	test   eax,eax
 1016b8b:	je     0x1016bd3
 1016b8d:	mov    rsi,r14
 1016b90:	mov    rbx,QWORD PTR [rcx+rsi*1]
 1016b94:	mov    QWORD PTR [rsp+0x58],rbx
 1016b99:	test   rbx,rbx
 1016b9c:	je     0x1016bc9
 1016b9e:	xchg   ax,ax
 1016ba0:	lea    rcx,[rbx+0x8]
 1016ba4:	call   QWORD PTR [rip+0xfffffffffffeaefe]        # 0x1001aa8
 1016baa:	nop
 1016bab:	mov    rcx,rbx
 1016bae:	call   QWORD PTR [rip+0xfffffffffffeaef4]        # 0x1001aa8
 1016bb4:	mov    rbx,QWORD PTR [rbx+0x10]
 1016bb8:	mov    QWORD PTR [rsp+0x58],rbx
 1016bbd:	test   rbx,rbx
 1016bc0:	jne    0x1016ba0
 1016bc2:	mov    eax,DWORD PTR [rbp-0x18]
 1016bc5:	mov    rcx,QWORD PTR [rbp-0x20]
 1016bc9:	inc    edi
 1016bcb:	add    rsi,0x8
 1016bcf:	cmp    edi,eax
 1016bd1:	jb     0x1016b90
 1016bd3:	call   0x103f9c6
 1016bd8:	mov    QWORD PTR [rbp-0x20],r14
 1016bdc:	mov    QWORD PTR [rbp-0x10],r14
 1016be0:	mov    QWORD PTR [rbp-0x8],r14
 1016be4:	mov    rcx,QWORD PTR [rbp+0x0]
 1016be8:	call   0x103f9ae
 1016bed:	mov    QWORD PTR [rbp+0x0],r14
 1016bf1:	lea    rcx,[rbp-0x48]
 1016bf5:	call   QWORD PTR [rip+0xfffffffffffeaead]        # 0x1001aa8
 1016bfb:	nop
 1016bfc:	mov    rcx,QWORD PTR [rsp+0x68]
 1016c01:	test   rcx,rcx
 1016c04:	je     0x1016c11
 1016c06:	call   QWORD PTR [rip+0xfffffffffffea414]        # 0x1001020
 1016c0c:	mov    QWORD PTR [rsp+0x68],r14
 1016c11:	xor    eax,eax
 1016c13:	jmp    0x1017453
 1016c18:	mov    rax,QWORD PTR [rsi+0x8]
 1016c1c:	movsxd rbx,DWORD PTR [rax+0x4]
 1016c20:	mov    rdi,QWORD PTR [rbx+rsi*1+0x8]
 1016c25:	lea    rcx,[rbp-0x48]
 1016c29:	call   QWORD PTR [rip+0xfffffffffffeaeb9]        # 0x1001ae8
 1016c2f:	mov    rdx,rax
 1016c32:	lea    rax,[rsp+0x68]
 1016c37:	mov    QWORD PTR [rsp+0x20],rax
 1016c3c:	mov    r14d,DWORD PTR [rbp+0x730]
 1016c43:	mov    r9d,r14d
 1016c46:	xor    r8d,r8d
 1016c49:	mov    rcx,r12
 1016c4c:	call   QWORD PTR [rip+0xfffffffffffea42e]        # 0x1001080
 1016c52:	mov    edx,eax
 1016c54:	mov    r9b,0x1
 1016c57:	mov    r8d,0x8000c372
 1016c5d:	lea    rcx,[rsi+0x8]
 1016c61:	add    rcx,rbx
 1016c64:	call   QWORD PTR [rdi+0x20]
 1016c67:	test   al,al
 1016c69:	je     0x1017328
 1016c6f:	xor    edx,edx
 1016c71:	mov    r12d,edx
 1016c74:	mov    rax,QWORD PTR [rsi+0x8]
 1016c78:	movsxd rbx,DWORD PTR [rax+0x4]
 1016c7c:	lea    rax,[rsp+0x50]
 1016c81:	mov    QWORD PTR [rsp+0x38],rax
 1016c86:	lea    rax,[rbp+0x290]
 1016c8d:	mov    QWORD PTR [rsp+0x30],rax
 1016c92:	mov    QWORD PTR [rsp+0x28],rdx
 1016c97:	mov    QWORD PTR [rsp+0x20],rdx
 1016c9c:	mov    rdi,QWORD PTR [rbx+rsi*1+0x8]
 1016ca1:	lea    r9,[rsp+0x70]
 1016ca6:	lea    r8,[rbp+0x80]
 1016cad:	mov    rcx,QWORD PTR [rsp+0x68]
 1016cb2:	call   QWORD PTR [rip+0xfffffffffffea3c0]        # 0x1001078
 1016cb8:	lea    rcx,[rsi+0x8]
 1016cbc:	mov    r9b,0x1
 1016cbf:	mov    r8d,0x8000c372
 1016cc5:	mov    edx,eax
 1016cc7:	add    rcx,rbx
 1016cca:	call   QWORD PTR [rdi+0x20]
 1016ccd:	test   al,al
 1016ccf:	je     0x1017328
 1016cd5:	mov    eax,DWORD PTR [rsp+0x50]
 1016cd9:	shr    rax,1
 1016cdc:	add    rax,rax
 1016cdf:	xor    ecx,ecx
 1016ce1:	cmp    rax,0x20a
 1016ce7:	jae    0x1017322
 1016ced:	mov    WORD PTR [rbp+rax*1+0x290],cx
 1016cf5:	mov    QWORD PTR [rsp+0x60],rcx
 1016cfa:	mov    QWORD PTR [rbp-0x40],rcx
 1016cfe:	mov    QWORD PTR [rbp-0x30],rcx
 1016d02:	mov    rax,QWORD PTR [rsi+0x8]
 1016d06:	movsxd rbx,DWORD PTR [rax+0x4]
 1016d0a:	mov    rdi,QWORD PTR [rbx+rsi*1+0x8]
 1016d0f:	lea    rax,[rsp+0x60]
 1016d14:	mov    QWORD PTR [rsp+0x20],rax
 1016d19:	mov    r9d,r14d
 1016d1c:	xor    r8d,r8d
 1016d1f:	lea    rdx,[rbp+0x290]
 1016d26:	mov    rcx,QWORD PTR [rbp+0x68]
 1016d2a:	call   QWORD PTR [rip+0xfffffffffffea350]        # 0x1001080
 1016d30:	mov    edx,eax
 1016d32:	mov    r9b,0x1
 1016d35:	mov    r8d,0xc000c35a
 1016d3b:	lea    rcx,[rsi+0x8]
 1016d3f:	add    rcx,rbx
 1016d42:	call   QWORD PTR [rdi+0x20]
 1016d45:	test   al,al
 1016d47:	je     0x1017289
 1016d4d:	mov    rax,QWORD PTR [rsi+0x8]
 1016d51:	movsxd rbx,DWORD PTR [rax+0x4]
 1016d55:	mov    rdi,QWORD PTR [rbx+rsi*1+0x8]
 1016d5a:	lea    rax,[rbp-0x40]
 1016d5e:	mov    QWORD PTR [rsp+0x20],rax
 1016d63:	mov    r9d,r14d
 1016d66:	xor    r8d,r8d
 1016d69:	lea    rdx,[rip+0xfffffffffffec408]        # 0x1003178
 1016d70:	mov    rcx,QWORD PTR [rsp+0x60]
 1016d75:	call   QWORD PTR [rip+0xfffffffffffea305]        # 0x1001080
 1016d7b:	mov    edx,eax
 1016d7d:	mov    r9b,0x1
 1016d80:	mov    r8d,0xc000c35d
 1016d86:	lea    rcx,[rsi+0x8]
 1016d8a:	add    rcx,rbx
 1016d8d:	call   QWORD PTR [rdi+0x20]
 1016d90:	test   al,al
 1016d92:	je     0x1017289
 1016d98:	mov    rax,QWORD PTR [rsi+0x8]
 1016d9c:	movsxd rbx,DWORD PTR [rax+0x4]
 1016da0:	mov    rdi,QWORD PTR [rbx+rsi*1+0x8]
 1016da5:	lea    rax,[rbp-0x30]
 1016da9:	mov    QWORD PTR [rsp+0x20],rax
 1016dae:	mov    r9d,r14d
 1016db1:	xor    r8d,r8d
 1016db4:	lea    rdx,[rip+0xfffffffffffef14d]        # 0x1005f08
 1016dbb:	mov    rcx,QWORD PTR [rbp-0x40]
 1016dbf:	call   QWORD PTR [rip+0xfffffffffffea2bb]        # 0x1001080
 1016dc5:	mov    edx,eax
 1016dc7:	xor    r9d,r9d
 1016dca:	mov    r8d,0xc000c370
 1016dd0:	lea    rcx,[rsi+0x8]
 1016dd4:	add    rcx,rbx
 1016dd7:	call   QWORD PTR [rdi+0x20]
 1016dda:	test   al,al
 1016ddc:	je     0x1017289
 1016de2:	mov    rax,QWORD PTR [rsi+0x8]
 1016de6:	movsxd rbx,DWORD PTR [rax+0x4]
 1016dea:	mov    rdi,QWORD PTR [rbx+rsi*1+0x8]
 1016def:	lea    rax,[rbp-0x50]
 1016df3:	mov    QWORD PTR [rsp+0x28],rax
 1016df8:	lea    rax,[rbp+0x4a0]
 1016dff:	mov    QWORD PTR [rsp+0x20],rax
 1016e04:	xor    r9d,r9d
 1016e07:	xor    r8d,r8d
 1016e0a:	lea    rdx,[rip+0xfffffffffffef0f7]        # 0x1005f08
 1016e11:	mov    rcx,QWORD PTR [rbp-0x30]
 1016e15:	call   QWORD PTR [rip+0xfffffffffffea26d]        # 0x1001088
 1016e1b:	mov    edx,eax
 1016e1d:	xor    r9d,r9d
 1016e20:	mov    r8d,0xc000c371
 1016e26:	lea    rcx,[rsi+0x8]
 1016e2a:	add    rcx,rbx
 1016e2d:	call   QWORD PTR [rdi+0x20]
 1016e30:	test   al,al
 1016e32:	je     0x1017289
 1016e38:	lea    rcx,[rsp+0x48]
 1016e3d:	call   QWORD PTR [rip+0xfffffffffffeac7d]        # 0x1001ac0
 1016e43:	nop
 1016e44:	lea    rdx,[rbp+0x4a0]
 1016e4b:	lea    rcx,[rsp+0x48]
 1016e50:	call   QWORD PTR [rip+0xfffffffffffeac42]        # 0x1001a98
 1016e56:	mov    edx,0x2e
 1016e5b:	xor    r8d,r8d
 1016e5e:	lea    rcx,[rsp+0x48]
 1016e63:	call   QWORD PTR [rip+0xfffffffffffeaaef]        # 0x1001958
 1016e69:	mov    edx,0x2e
 1016e6e:	lea    r8d,[rax+0x1]
 1016e72:	lea    rcx,[rsp+0x48]
 1016e77:	call   QWORD PTR [rip+0xfffffffffffeaadb]        # 0x1001958
 1016e7d:	mov    r8d,eax
 1016e80:	lea    rdx,[rbp+0x58]
 1016e84:	lea    rcx,[rsp+0x48]
 1016e89:	call   QWORD PTR [rip+0xfffffffffffeabb9]        # 0x1001a48
 1016e8f:	nop
 1016e90:	mov    rdx,rax
 1016e93:	lea    rcx,[rsp+0x48]
 1016e98:	call   QWORD PTR [rip+0xfffffffffffeac02]        # 0x1001aa0
 1016e9e:	nop
 1016e9f:	lea    rcx,[rbp+0x58]
 1016ea3:	call   QWORD PTR [rip+0xfffffffffffeabff]        # 0x1001aa8
 1016ea9:	mov    edx,0x2e
 1016eae:	xor    r8d,r8d
 1016eb1:	lea    rcx,[rsp+0x48]
 1016eb6:	call   QWORD PTR [rip+0xfffffffffffeaa9c]        # 0x1001958
 1016ebc:	mov    r8d,eax
 1016ebf:	lea    rdx,[rbp+0x60]
 1016ec3:	lea    rcx,[rsp+0x48]
 1016ec8:	call   QWORD PTR [rip+0xfffffffffffeab7a]        # 0x1001a48
 1016ece:	nop
 1016ecf:	mov    rcx,rax
 1016ed2:	call   QWORD PTR [rip+0xfffffffffffeac10]        # 0x1001ae8
 1016ed8:	mov    rcx,rax
 1016edb:	call   QWORD PTR [rip+0xfffffffffffea85f]        # 0x1001740
 1016ee1:	mov    ebx,eax
 1016ee3:	lea    rcx,[rbp+0x60]
 1016ee7:	call   QWORD PTR [rip+0xfffffffffffeabbb]        # 0x1001aa8
 1016eed:	mov    edx,0x2e
 1016ef2:	xor    r8d,r8d
 1016ef5:	lea    rcx,[rsp+0x48]
 1016efa:	call   QWORD PTR [rip+0xfffffffffffeaa58]        # 0x1001958
 1016f00:	lea    r8d,[rax+0x1]
 1016f04:	lea    rdx,[rbp+0x48]
 1016f08:	lea    rcx,[rsp+0x48]
 1016f0d:	call   QWORD PTR [rip+0xfffffffffffeaa0d]        # 0x1001920
 1016f13:	nop
 1016f14:	mov    rcx,rax
 1016f17:	call   QWORD PTR [rip+0xfffffffffffeabcb]        # 0x1001ae8
 1016f1d:	mov    rcx,rax
 1016f20:	call   QWORD PTR [rip+0xfffffffffffea81a]        # 0x1001740
 1016f26:	mov    edi,eax
 1016f28:	lea    rcx,[rbp+0x48]
 1016f2c:	call   QWORD PTR [rip+0xfffffffffffeab76]        # 0x1001aa8
 1016f32:	cmp    ebx,DWORD PTR [rsi+0x24]
 1016f35:	jne    0x101727e
 1016f3b:	cmp    edi,DWORD PTR [rsi+0x20]
 1016f3e:	jne    0x101727e
 1016f44:	cmp    BYTE PTR [rsp+0x41],0x0
 1016f49:	jne    0x1016fdc
 1016f4f:	mov    rcx,QWORD PTR [rsi+0xe8]
 1016f56:	test   rcx,rcx
 1016f59:	je     0x1016f71
 1016f5b:	lea    rdx,[rbp+0x80]
 1016f62:	call   0x1012fe0
 1016f67:	test   rax,rax
 1016f6a:	je     0x1016f71
 1016f6c:	or     DWORD PTR [rax],r15d
 1016f6f:	jmp    0x1016fd4
 1016f71:	mov    ecx,0x28
 1016f76:	call   0x103f9d2
 1016f7b:	mov    QWORD PTR [rbp+0x50],rax
 1016f7f:	test   rax,rax
 1016f82:	je     0x1016fbf
 1016f84:	mov    rcx,QWORD PTR [rsi+0xe8]
 1016f8b:	mov    QWORD PTR [rsp+0x30],rcx
 1016f90:	mov    ecx,DWORD PTR [rbp+0x740]
 1016f96:	mov    DWORD PTR [rsp+0x28],ecx
 1016f9a:	movzx  ecx,BYTE PTR [rbp+0x738]
 1016fa1:	mov    BYTE PTR [rsp+0x20],cl
 1016fa5:	lea    r9,[rbp+0x290]
 1016fac:	mov    r8d,r15d
 1016faf:	lea    rdx,[rbp+0x80]
 1016fb6:	mov    rcx,rax
 1016fb9:	call   0x1012cf0
 1016fbe:	nop
 1016fbf:	mov    QWORD PTR [rsi+0xe8],rax
 1016fc6:	test   rax,rax
 1016fc9:	setne  al
 1016fcc:	test   al,al
 1016fce:	je     0x101727e
 1016fd4:	inc    r13d
 1016fd7:	jmp    0x101727e
 1016fdc:	lea    rdx,[rbp+0x80]
 1016fe3:	lea    rcx,[rbp-0x38]
 1016fe7:	call   QWORD PTR [rip+0xfffffffffffeaac3]        # 0x1001ab0
 1016fed:	nop
 1016fee:	lea    rdx,[rsi+0x10]
 1016ff2:	lea    rcx,[rsp+0x58]
 1016ff7:	call   QWORD PTR [rip+0xfffffffffffea9bb]        # 0x10019b8
 1016ffd:	nop
 1016ffe:	cmp    BYTE PTR [rsp+0x40],0x0
 1017003:	je     0x10170ea
 1017009:	mov    rbx,QWORD PTR [rbp-0x80]
 101700d:	test   rbx,rbx
 1017010:	je     0x1017057
 1017012:	lea    rdi,[rbx+0x10]
 1017016:	test   rdi,rdi
 1017019:	je     0x1017316
 101701f:	lea    rcx,[rbp-0x38]
 1017023:	call   QWORD PTR [rip+0xfffffffffffeaabf]        # 0x1001ae8
 1017029:	mov    rdx,rax
 101702c:	mov    rcx,rdi
 101702f:	call   QWORD PTR [rip+0xfffffffffffea9cb]        # 0x1001a00
 1017035:	xor    edi,edi
 1017037:	mov    ecx,edi
 1017039:	test   eax,eax
 101703b:	sete   cl
 101703e:	test   ecx,ecx
 1017040:	jne    0x101704c
 1017042:	mov    rbx,QWORD PTR [rbx]
 1017045:	test   rbx,rbx
 1017048:	jne    0x1017012
 101704a:	jmp    0x1017059
 101704c:	test   rbx,rbx
 101704f:	jne    0x1017267
 1017055:	jmp    0x1017059
 1017057:	xor    edi,edi
 1017059:	mov    rcx,QWORD PTR [rsi+0xe8]
 1017060:	test   rcx,rcx
 1017063:	je     0x101707b
 1017065:	lea    rdx,[rbp+0x80]
 101706c:	call   0x1012fe0
 1017071:	test   rax,rax
 1017074:	je     0x101707b
 1017076:	or     DWORD PTR [rax],r15d
 1017079:	jmp    0x10170e2
 101707b:	mov    ecx,0x28
 1017080:	call   0x103f9d2
 1017085:	mov    QWORD PTR [rbp+0x50],rax
 1017089:	test   rax,rax
 101708c:	je     0x10170ca
 101708e:	mov    rcx,QWORD PTR [rsi+0xe8]
 1017095:	mov    QWORD PTR [rsp+0x30],rcx
 101709a:	mov    ecx,DWORD PTR [rbp+0x740]
 10170a0:	mov    DWORD PTR [rsp+0x28],ecx
 10170a4:	movzx  ecx,BYTE PTR [rbp+0x738]
 10170ab:	mov    BYTE PTR [rsp+0x20],cl
 10170af:	lea    r9,[rbp+0x290]
 10170b6:	mov    r8d,r15d
 10170b9:	lea    rdx,[rbp+0x80]
 10170c0:	mov    rcx,rax
 10170c3:	call   0x1012cf0
 10170c8:	jmp    0x10170cd
 10170ca:	mov    rax,rdi
 10170cd:	mov    QWORD PTR [rsi+0xe8],rax
 10170d4:	test   rax,rax
 10170d7:	setne  al
 10170da:	test   al,al
 10170dc:	je     0x1017267
 10170e2:	inc    r13d
 10170e5:	jmp    0x1017267
 10170ea:	lea    rcx,[rsp+0x58]
 10170ef:	call   QWORD PTR [rip+0xfffffffffffea86b]        # 0x1001960
 10170f5:	mov    r14,rax
 10170f8:	mov    rbx,QWORD PTR [rbp+0x18]
 10170fc:	test   rbx,rbx
 10170ff:	je     0x1017260
 1017105:	data16 data16 nop WORD PTR [rax+rax*1+0x0]
 1017110:	lea    rdi,[rbx+0x10]
 1017114:	test   rdi,rdi
 1017117:	je     0x101731c
 101711d:	test   r14,r14
 1017120:	je     0x101731c
 1017126:	mov    rcx,r14
 1017129:	call   QWORD PTR [rip+0xfffffffffffea9b9]        # 0x1001ae8
 101712f:	mov    rdx,rax
 1017132:	mov    rcx,rdi
 1017135:	call   QWORD PTR [rip+0xfffffffffffea8c5]        # 0x1001a00
 101713b:	xor    ecx,ecx
 101713d:	test   eax,eax
 101713f:	sete   cl
 1017142:	test   ecx,ecx
 1017144:	jne    0x1017153
 1017146:	mov    rbx,QWORD PTR [rbx]
 1017149:	test   rbx,rbx
 101714c:	jne    0x1017110
 101714e:	jmp    0x1017260
 1017153:	test   rbx,rbx
 1017156:	je     0x1017260
 101715c:	lea    rcx,[rsp+0x58]
 1017161:	call   QWORD PTR [rip+0xfffffffffffea981]        # 0x1001ae8
 1017167:	mov    r14,rax
 101716a:	mov    rcx,rax
 101716d:	call   0x103fa26
 1017172:	mov    edi,eax
 1017174:	xor    edx,edx
 1017176:	div    DWORD PTR [rbp-0x18]
 1017179:	mov    rbx,QWORD PTR [rbp-0x20]
 101717d:	test   rbx,rbx
 1017180:	je     0x1017260
 1017186:	mov    rbx,QWORD PTR [rbx+rdx*8]
 101718a:	test   rbx,rbx
 101718d:	je     0x1017260
 1017193:	cmp    DWORD PTR [rbx+0x18],edi
 1017196:	jne    0x10171af
 1017198:	mov    rdx,r14
 101719b:	mov    rcx,rbx
 101719e:	call   QWORD PTR [rip+0xfffffffffffea85c]        # 0x1001a00
 10171a4:	xor    ecx,ecx
 10171a6:	test   eax,eax
 10171a8:	sete   cl
 10171ab:	test   ecx,ecx
 10171ad:	jne    0x10171b5
 10171af:	mov    rbx,QWORD PTR [rbx+0x10]
 10171b3:	jmp    0x101718a
 10171b5:	lea    rdx,[rbx+0x8]
 10171b9:	lea    rcx,[rbp-0x38]
 10171bd:	call   QWORD PTR [rip+0xfffffffffffea8dd]        # 0x1001aa0
 10171c3:	lea    rdx,[rbp+0x80]
 10171ca:	lea    rcx,[rbp-0x38]
 10171ce:	call   QWORD PTR [rip+0xfffffffffffea88c]        # 0x1001a60
 10171d4:	test   eax,eax
 10171d6:	jne    0x1017260
 10171dc:	mov    rcx,QWORD PTR [rsi+0xe8]
 10171e3:	test   rcx,rcx
 10171e6:	je     0x10171fe
 10171e8:	lea    rdx,[rbp+0x80]
 10171ef:	call   0x1012fe0
 10171f4:	test   rax,rax
 10171f7:	je     0x10171fe
 10171f9:	or     DWORD PTR [rax],r15d
 10171fc:	jmp    0x101725d
 10171fe:	mov    ecx,0x28
 1017203:	call   0x103f9d2
 1017208:	mov    QWORD PTR [rbp+0x50],rax
 101720c:	test   rax,rax
 101720f:	je     0x101724c
 1017211:	mov    rcx,QWORD PTR [rsi+0xe8]
 1017218:	mov    QWORD PTR [rsp+0x30],rcx
 101721d:	mov    ecx,DWORD PTR [rbp+0x740]
 1017223:	mov    DWORD PTR [rsp+0x28],ecx
 1017227:	movzx  ecx,BYTE PTR [rbp+0x738]
 101722e:	mov    BYTE PTR [rsp+0x20],cl
 1017232:	lea    r9,[rbp+0x290]
 1017239:	mov    r8d,r15d
 101723c:	lea    rdx,[rbp+0x80]
 1017243:	mov    rcx,rax
 1017246:	call   0x1012cf0
 101724b:	nop
 101724c:	mov    QWORD PTR [rsi+0xe8],rax
 1017253:	test   rax,rax
 1017256:	setne  al
 1017259:	test   al,al
 101725b:	je     0x1017260
 101725d:	inc    r13d
 1017260:	mov    r14d,DWORD PTR [rbp+0x730]
 1017267:	lea    rcx,[rsp+0x58]
 101726c:	call   QWORD PTR [rip+0xfffffffffffea836]        # 0x1001aa8
 1017272:	nop
 1017273:	lea    rcx,[rbp-0x38]
 1017277:	call   QWORD PTR [rip+0xfffffffffffea82b]        # 0x1001aa8
 101727d:	nop
 101727e:	lea    rcx,[rsp+0x48]
 1017283:	call   QWORD PTR [rip+0xfffffffffffea81f]        # 0x1001aa8
 1017289:	mov    DWORD PTR [rbp-0x50],0x20a
 1017290:	inc    r12d
 1017293:	mov    DWORD PTR [rsp+0x70],0x105
 101729b:	mov    DWORD PTR [rsp+0x50],0x20a
 10172a3:	mov    rcx,QWORD PTR [rbp-0x30]
 10172a7:	test   rcx,rcx
 10172aa:	je     0x10172ba
 10172ac:	call   QWORD PTR [rip+0xfffffffffffe9d6e]        # 0x1001020
 10172b2:	xor    ebx,ebx
 10172b4:	mov    QWORD PTR [rbp-0x30],rbx
 10172b8:	jmp    0x10172bc
 10172ba:	xor    ebx,ebx
 10172bc:	mov    rcx,QWORD PTR [rbp-0x40]
 10172c0:	test   rcx,rcx
 10172c3:	je     0x10172cf
 10172c5:	call   QWORD PTR [rip+0xfffffffffffe9d55]        # 0x1001020
 10172cb:	mov    QWORD PTR [rbp-0x40],rbx
 10172cf:	mov    rcx,QWORD PTR [rsp+0x60]
 10172d4:	test   rcx,rcx
 10172d7:	je     0x10172e4
 10172d9:	call   QWORD PTR [rip+0xfffffffffffe9d41]        # 0x1001020
 10172df:	mov    QWORD PTR [rsp+0x60],rbx
 10172e4:	mov    rax,QWORD PTR [rsi+0x8]
 10172e8:	movsxd rbx,DWORD PTR [rax+0x4]
 10172ec:	lea    rax,[rsp+0x50]
 10172f1:	mov    QWORD PTR [rsp+0x38],rax
 10172f6:	lea    rax,[rbp+0x290]
 10172fd:	mov    QWORD PTR [rsp+0x30],rax
 1017302:	xor    eax,eax
 1017304:	mov    QWORD PTR [rsp+0x28],rax
 1017309:	mov    QWORD PTR [rsp+0x20],rax
 101730e:	mov    edx,r12d
 1017311:	jmp    0x1016c9c
 1017316:	call   0x103f972
 101731b:	int3   
 101731c:	call   0x103f972
 1017321:	nop
 1017322:	call   0x103fd38
 1017327:	nop
 1017328:	lea    rdi,[rip+0xfffffffffffeaaf1]        # 0x1001e20
 101732f:	mov    QWORD PTR [rsp+0x78],rdi
 1017334:	mov    rbx,QWORD PTR [rbp-0x80]
 1017338:	test   rbx,rbx
 101733b:	je     0x1017352
 101733d:	nop    DWORD PTR [rax]
 1017340:	lea    rcx,[rbx+0x10]
 1017344:	call   QWORD PTR [rip+0xfffffffffffea75e]        # 0x1001aa8
 101734a:	mov    rbx,QWORD PTR [rbx]
 101734d:	test   rbx,rbx
 1017350:	jne    0x1017340
 1017352:	xor    r14d,r14d
 1017355:	mov    QWORD PTR [rbp-0x70],r14
 1017359:	mov    QWORD PTR [rbp-0x68],r14
 101735d:	mov    QWORD PTR [rbp-0x78],r14
 1017361:	mov    QWORD PTR [rbp-0x80],r14
 1017365:	mov    rcx,QWORD PTR [rbp-0x60]
 1017369:	call   0x103f9ae
 101736e:	mov    QWORD PTR [rbp-0x60],r14
 1017372:	mov    QWORD PTR [rbp+0x10],rdi
 1017376:	mov    rbx,QWORD PTR [rbp+0x18]
 101737a:	test   rbx,rbx
 101737d:	je     0x1017392
 101737f:	nop
 1017380:	lea    rcx,[rbx+0x10]
 1017384:	call   QWORD PTR [rip+0xfffffffffffea71e]        # 0x1001aa8
 101738a:	mov    rbx,QWORD PTR [rbx]
 101738d:	test   rbx,rbx
 1017390:	jne    0x1017380
 1017392:	mov    QWORD PTR [rbp+0x28],r14
 1017396:	mov    QWORD PTR [rbp+0x30],r14
 101739a:	mov    QWORD PTR [rbp+0x20],r14
 101739e:	mov    QWORD PTR [rbp+0x18],r14
 10173a2:	mov    rcx,QWORD PTR [rbp+0x38]
 10173a6:	call   0x103f9ae
 10173ab:	mov    QWORD PTR [rbp+0x38],r14
 10173af:	lea    rax,[rip+0xfffffffffffeb68a]        # 0x1002a40
 10173b6:	mov    QWORD PTR [rbp-0x28],rax
 10173ba:	mov    rcx,QWORD PTR [rbp-0x20]
 10173be:	test   rcx,rcx
 10173c1:	je     0x101741b
 10173c3:	mov    edi,r14d
 10173c6:	mov    eax,DWORD PTR [rbp-0x18]
 10173c9:	test   eax,eax
 10173cb:	je     0x1017412
 10173cd:	mov    rsi,r14
 10173d0:	mov    rbx,QWORD PTR [rcx+rsi*1]
 10173d4:	mov    QWORD PTR [rbp+0x48],rbx
 10173d8:	test   rbx,rbx
 10173db:	je     0x1017408
 10173dd:	nop    DWORD PTR [rax]
 10173e0:	lea    rcx,[rbx+0x8]
 10173e4:	call   QWORD PTR [rip+0xfffffffffffea6be]        # 0x1001aa8
 10173ea:	nop
 10173eb:	mov    rcx,rbx
 10173ee:	call   QWORD PTR [rip+0xfffffffffffea6b4]        # 0x1001aa8
 10173f4:	mov    rbx,QWORD PTR [rbx+0x10]
 10173f8:	mov    QWORD PTR [rbp+0x48],rbx
 10173fc:	test   rbx,rbx
 10173ff:	jne    0x10173e0
 1017401:	mov    eax,DWORD PTR [rbp-0x18]
 1017404:	mov    rcx,QWORD PTR [rbp-0x20]
 1017408:	inc    edi
 101740a:	add    rsi,0x8
 101740e:	cmp    edi,eax
 1017410:	jb     0x10173d0
 1017412:	call   0x103f9c6
 1017417:	mov    QWORD PTR [rbp-0x20],r14
 101741b:	mov    QWORD PTR [rbp-0x10],r14
 101741f:	mov    QWORD PTR [rbp-0x8],r14
 1017423:	mov    rcx,QWORD PTR [rbp+0x0]
 1017427:	call   0x103f9ae
 101742c:	mov    QWORD PTR [rbp+0x0],r14
 1017430:	lea    rcx,[rbp-0x48]
 1017434:	call   QWORD PTR [rip+0xfffffffffffea66e]        # 0x1001aa8
 101743a:	nop
 101743b:	mov    rcx,QWORD PTR [rsp+0x68]
 1017440:	test   rcx,rcx
 1017443:	je     0x1017450
 1017445:	call   QWORD PTR [rip+0xfffffffffffe9bd5]        # 0x1001020
 101744b:	mov    QWORD PTR [rsp+0x68],r14
 1017450:	mov    eax,r13d
 1017453:	mov    rcx,QWORD PTR [rbp+0x6b0]
 101745a:	xor    rcx,rsp
 101745d:	call   0x103ff40
 1017462:	add    rsp,0x7c8
 1017469:	pop    r15
 101746b:	pop    r14
 101746d:	pop    r13
 101746f:	pop    r12
 1017471:	pop    rdi
 1017472:	pop    rsi
 1017473:	pop    rbx
 1017474:	pop    rbp
 1017475:	ret    
 1017476:	int3   
 1017477:	int3   
 1017478:	int3   
 1017479:	int3   
 101747a:	int3   
 101747b:	int3   
 101747c:	int3   
 101747d:	int3   
 101747e:	int3   
 101747f:	int3   
 1017480:	rex push rdi
 1017482:	sub    rsp,0x20
 1017486:	cmp    BYTE PTR [rcx+0x2a],0x0
 101748a:	mov    rdi,rcx
 101748d:	mov    r9d,0x20
 1017493:	jne    0x10174a7
 1017495:	xor    r8d,r8d
 1017498:	mov    edx,0x20019
 101749d:	add    rsp,0x20
 10174a1:	pop    rdi
 10174a2:	jmp    0x10174f0
 10174a7:	mov    r8b,0x1
 10174aa:	mov    edx,0x20219
 10174af:	mov    QWORD PTR [rsp+0x30],rbx
 10174b4:	call   0x10174f0
 10174b9:	mov    r9d,0x40
 10174bf:	xor    r8d,r8d
 10174c2:	mov    edx,0x20119
 10174c7:	mov    rcx,rdi
 10174ca:	mov    ebx,eax
 10174cc:	call   0x10174f0
 10174d1:	add    eax,ebx
 10174d3:	mov    rbx,QWORD PTR [rsp+0x30]
 10174d8:	add    rsp,0x20
 10174dc:	pop    rdi
 10174dd:	ret    
 10174de:	int3   
 10174df:	int3   
 10174e0:	int3   
 10174e1:	int3   
 10174e2:	int3   
 10174e3:	int3   
 10174e4:	int3   
 10174e5:	int3   
 10174e6:	int3   
 10174e7:	int3   
 10174e8:	int3   
 10174e9:	int3   
 10174ea:	int3   
 10174eb:	int3   
 10174ec:	int3   
 10174ed:	int3   
 10174ee:	int3   
 10174ef:	int3   
 10174f0:	rex push rbp
 10174f2:	push   rbx
 10174f3:	push   rsi
 10174f4:	push   rdi
 10174f5:	push   r12
 10174f7:	push   r13
 10174f9:	push   r14
 10174fb:	push   r15
 10174fd:	lea    rbp,[rsp-0x498]
 1017505:	sub    rsp,0x598
 101750c:	mov    QWORD PTR [rbp+0x58],0xfffffffffffffffe
 1017514:	mov    rax,QWORD PTR [rip+0x4c355]        # 0x1063870
 101751b:	xor    rax,rsp
 101751e:	mov    QWORD PTR [rbp+0x480],rax
 1017525:	mov    r12d,r9d
 1017528:	mov    DWORD PTR [rsp+0x74],r9d
 101752d:	movzx  r15d,r8b
 1017531:	mov    BYTE PTR [rsp+0x40],r8b
 1017536:	mov    esi,edx
 1017538:	mov    DWORD PTR [rsp+0x44],edx
 101753c:	mov    r14,rcx
 101753f:	xor    edi,edi
 1017541:	mov    r13d,edi
 1017544:	mov    DWORD PTR [rsp+0x50],edi
 1017548:	mov    QWORD PTR [rbp-0x40],rdi
 101754c:	mov    QWORD PTR [rbp-0x38],rdi
 1017550:	mov    QWORD PTR [rbp-0x30],rdi
 1017554:	mov    QWORD PTR [rsp+0x68],rdi
 1017559:	mov    QWORD PTR [rsp+0x78],rdi
 101755e:	mov    QWORD PTR [rbp-0x80],rdi
 1017562:	mov    DWORD PTR [rsp+0x70],0x20a
 101756a:	mov    DWORD PTR [rsp+0x60],0x1
 1017572:	mov    rax,QWORD PTR [rcx+0xd8]
 1017579:	cmp    BYTE PTR [rax+0xdd],dil
 1017580:	jne    0x1017598
 1017582:	add    rcx,0x10
 1017586:	call   QWORD PTR [rip+0xfffffffffffea55c]        # 0x1001ae8
 101758c:	mov    rcx,rax
 101758f:	call   0x1031de0
 1017594:	test   al,al
 1017596:	je     0x101759a
 1017598:	mov    al,0x1
 101759a:	mov    BYTE PTR [rsp+0x42],al
 101759e:	lea    rcx,[rip+0xfffffffffffeb49b]        # 0x1002a40
 10175a5:	mov    QWORD PTR [rbp+0x18],rcx
 10175a9:	mov    QWORD PTR [rbp+0x20],rdi
 10175ad:	mov    DWORD PTR [rbp+0x28],0x11
 10175b4:	mov    QWORD PTR [rbp+0x30],rdi
 10175b8:	mov    QWORD PTR [rbp+0x38],rdi
 10175bc:	mov    QWORD PTR [rbp+0x40],rdi
 10175c0:	mov    QWORD PTR [rbp+0x48],0xa
 10175c8:	lea    rcx,[rip+0xfffffffffffea851]        # 0x1001e20
 10175cf:	mov    QWORD PTR [rbp-0x28],rcx
 10175d3:	mov    QWORD PTR [rbp-0x10],rdi
 10175d7:	mov    QWORD PTR [rbp-0x8],rdi
 10175db:	mov    QWORD PTR [rbp-0x18],rdi
 10175df:	mov    QWORD PTR [rbp-0x20],rdi
 10175e3:	mov    QWORD PTR [rbp+0x0],rdi
 10175e7:	mov    QWORD PTR [rbp+0x8],0xa
 10175ef:	mov    QWORD PTR [rbp-0x78],rcx
 10175f3:	mov    QWORD PTR [rbp-0x60],rdi
 10175f7:	mov    QWORD PTR [rbp-0x58],rdi
 10175fb:	mov    QWORD PTR [rbp-0x68],rdi
 10175ff:	mov    QWORD PTR [rbp-0x70],rdi
 1017603:	mov    QWORD PTR [rbp-0x50],rdi
 1017607:	mov    QWORD PTR [rbp-0x48],0xa
 101760f:	mov    BYTE PTR [rsp+0x41],0x0
 1017614:	test   al,al
 1017616:	je     0x1017888
 101761c:	lea    rcx,[rbp+0x18]
 1017620:	call   0x1012a20
 1017625:	mov    rbx,QWORD PTR [rbp-0x20]
 1017629:	test   rbx,rbx
 101762c:	je     0x1017642
 101762e:	xchg   ax,ax
 1017630:	lea    rcx,[rbx+0x10]
 1017634:	call   QWORD PTR [rip+0xfffffffffffea46e]        # 0x1001aa8
 101763a:	mov    rbx,QWORD PTR [rbx]
 101763d:	test   rbx,rbx
 1017640:	jne    0x1017630
 1017642:	mov    QWORD PTR [rbp-0x10],rdi
 1017646:	mov    QWORD PTR [rbp-0x8],rdi
 101764a:	mov    QWORD PTR [rbp-0x18],rdi
 101764e:	mov    QWORD PTR [rbp-0x20],rdi
 1017652:	mov    rcx,QWORD PTR [rbp+0x0]
 1017656:	call   0x103f9ae
 101765b:	mov    QWORD PTR [rbp+0x0],rdi
 101765f:	mov    rbx,QWORD PTR [rbp-0x70]
 1017663:	test   rbx,rbx
 1017666:	je     0x1017682
 1017668:	nop    DWORD PTR [rax+rax*1+0x0]
 1017670:	lea    rcx,[rbx+0x10]
 1017674:	call   QWORD PTR [rip+0xfffffffffffea42e]        # 0x1001aa8
 101767a:	mov    rbx,QWORD PTR [rbx]
 101767d:	test   rbx,rbx
 1017680:	jne    0x1017670
 1017682:	mov    QWORD PTR [rbp-0x60],rdi
 1017686:	mov    QWORD PTR [rbp-0x58],rdi
 101768a:	mov    QWORD PTR [rbp-0x68],rdi
 101768e:	mov    QWORD PTR [rbp-0x70],rdi
 1017692:	mov    rcx,QWORD PTR [rbp-0x50]
 1017696:	call   0x103f9ae
 101769b:	mov    QWORD PTR [rbp-0x50],rdi
 101769f:	lea    rcx,[r14+0x10]
 10176a3:	call   QWORD PTR [rip+0xfffffffffffea43f]        # 0x1001ae8
 10176a9:	mov    rcx,rax
 10176ac:	call   0x10325f0
 10176b1:	mov    BYTE PTR [rsp+0x41],al
 10176b5:	lea    rcx,[r14+0x10]
 10176b9:	call   QWORD PTR [rip+0xfffffffffffea429]        # 0x1001ae8
 10176bf:	mov    rcx,rax
 10176c2:	lea    r8,[rbp+0x18]
 10176c6:	lea    rdx,[rbp-0x28]
 10176ca:	call   0x1032290
 10176cf:	mov    r11,QWORD PTR [rbp+0x30]
 10176d3:	neg    r11
 10176d6:	sbb    rdi,rdi
 10176d9:	je     0x1017888
 10176df:	nop
 10176e0:	lea    rcx,[rsp+0x58]
 10176e5:	call   QWORD PTR [rip+0xfffffffffffea3d5]        # 0x1001ac0
 10176eb:	nop
 10176ec:	lea    rcx,[rsp+0x48]
 10176f1:	call   QWORD PTR [rip+0xfffffffffffea3c9]        # 0x1001ac0
 10176f7:	nop
 10176f8:	xor    edx,edx
 10176fa:	mov    eax,edx
 10176fc:	mov    r9,QWORD PTR [rbp+0x20]
 1017700:	test   r9,r9
 1017703:	setne  al
 1017706:	test   eax,eax
 1017708:	je     0x1017882
 101770e:	mov    rbx,rdi
 1017711:	mov    eax,edx
 1017713:	test   rdi,rdi
 1017716:	setne  al
 1017719:	test   eax,eax
 101771b:	je     0x101787c
 1017721:	mov    r8d,DWORD PTR [rbp+0x28]
 1017725:	cmp    rdi,0xffffffffffffffff
 1017729:	jne    0x1017758
 101772b:	mov    ecx,edx
 101772d:	test   r8d,r8d
 1017730:	je     0x1017748
 1017732:	mov    rax,r9
 1017735:	mov    rbx,QWORD PTR [rax]
 1017738:	test   rbx,rbx
 101773b:	jne    0x1017748
 101773d:	inc    ecx
 101773f:	add    rax,0x8
 1017743:	cmp    ecx,r8d
 1017746:	jb     0x1017735
 1017748:	mov    eax,edx
 101774a:	test   rbx,rbx
 101774d:	setne  al
 1017750:	test   eax,eax
 1017752:	je     0x101786a
 1017758:	mov    rdi,QWORD PTR [rbx+0x10]
 101775c:	test   rdi,rdi
 101775f:	jne    0x1017788
 1017761:	mov    eax,DWORD PTR [rbx+0x18]
 1017764:	div    r8d
 1017767:	inc    edx
 1017769:	movsxd rax,edx
 101776c:	cmp    edx,r8d
 101776f:	jae    0x1017788
 1017771:	lea    rax,[r9+rax*8]
 1017775:	mov    rdi,QWORD PTR [rax]
 1017778:	test   rdi,rdi
 101777b:	jne    0x1017788
 101777d:	inc    edx
 101777f:	add    rax,0x8
 1017783:	cmp    edx,r8d
 1017786:	jb     0x1017775
 1017788:	mov    rdx,rbx
 101778b:	lea    rcx,[rsp+0x58]
 1017790:	call   QWORD PTR [rip+0xfffffffffffea30a]        # 0x1001aa0
 1017796:	lea    rdx,[rbx+0x8]
 101779a:	lea    rcx,[rsp+0x48]
 101779f:	call   QWORD PTR [rip+0xfffffffffffea2fb]        # 0x1001aa0
 10177a5:	mov    rsi,QWORD PTR [rbp-0x68]
 10177a9:	mov    rbx,QWORD PTR [rbp-0x58]
 10177ad:	test   rbx,rbx
 10177b0:	jne    0x10177f3
 10177b2:	lea    r8d,[rbx+0x18]
 10177b6:	mov    rdx,QWORD PTR [rbp-0x48]
 10177ba:	lea    rcx,[rbp-0x50]
 10177be:	call   0x103f9a2
 10177c3:	mov    rdx,QWORD PTR [rbp-0x48]
 10177c7:	lea    r8,[rdx-0x1]
 10177cb:	lea    r8,[rdx+r8*2]
 10177cf:	lea    r8,[rax+r8*8]
 10177d3:	mov    rbx,QWORD PTR [rbp-0x58]
 10177d7:	dec    rdx
 10177da:	js     0x10177f3
 10177dc:	nop    DWORD PTR [rax+0x0]
 10177e0:	mov    QWORD PTR [r8],rbx
 10177e3:	mov    rbx,r8
 10177e6:	mov    QWORD PTR [rbp-0x58],rbx
 10177ea:	sub    r8,0x18
 10177ee:	dec    rdx
 10177f1:	jns    0x10177e0
 10177f3:	xor    ecx,ecx
 10177f5:	mov    eax,ecx
 10177f7:	test   rbx,rbx
 10177fa:	setne  al
 10177fd:	test   eax,eax
 10177ff:	je     0x1017876
 1017801:	mov    rax,QWORD PTR [rbx]
 1017804:	mov    QWORD PTR [rbp-0x58],rax
 1017808:	mov    QWORD PTR [rbx+0x8],rsi
 101780c:	mov    QWORD PTR [rbx],rcx
 101780f:	inc    QWORD PTR [rbp-0x60]
 1017813:	lea    rsi,[rbx+0x10]
 1017817:	test   rsi,rsi
 101781a:	je     0x1017825
 101781c:	mov    rcx,rsi
 101781f:	call   QWORD PTR [rip+0xfffffffffffea29b]        # 0x1001ac0
 1017825:	lea    rdx,[rsp+0x48]
 101782a:	mov    rcx,rsi
 101782d:	call   QWORD PTR [rip+0xfffffffffffea26d]        # 0x1001aa0
 1017833:	mov    r11,QWORD PTR [rbp-0x68]
 1017837:	test   r11,r11
 101783a:	je     0x1017841
 101783c:	mov    QWORD PTR [r11],rbx
 101783f:	jmp    0x1017845
 1017841:	mov    QWORD PTR [rbp-0x70],rbx
 1017845:	mov    QWORD PTR [rbp-0x68],rbx
 1017849:	lea    rcx,[rsp+0x48]
 101784e:	call   QWORD PTR [rip+0xfffffffffffea254]        # 0x1001aa8
 1017854:	nop
 1017855:	lea    rcx,[rsp+0x58]
 101785a:	call   QWORD PTR [rip+0xfffffffffffea248]        # 0x1001aa8
 1017860:	test   rdi,rdi
 1017863:	je     0x1017870
 1017865:	jmp    0x10176e0
 101786a:	call   0x103f972
 101786f:	nop
 1017870:	mov    esi,DWORD PTR [rsp+0x44]
 1017874:	jmp    0x1017888
 1017876:	call   0x103f972
 101787b:	int3   
 101787c:	call   0x103f972
 1017881:	int3   
 1017882:	call   0x103f972
 1017887:	nop
 1017888:	mov    rax,QWORD PTR [r14+0x8]
 101788c:	movsxd rcx,DWORD PTR [rax+0x4]
 1017890:	mov    rbx,QWORD PTR [rcx+r14*1+0x8]
 1017895:	lea    rdi,[r14+0x10]
 1017899:	mov    rcx,rdi
 101789c:	call   QWORD PTR [rip+0xfffffffffffea246]        # 0x1001ae8
 10178a2:	mov    rcx,rax
 10178a5:	lea    r8,[rbp-0x40]
 10178a9:	mov    rdx,0xffffffff80000002
 10178b0:	call   QWORD PTR [rip+0xfffffffffffe97ba]        # 0x1001070
 10178b6:	mov    edx,eax
 10178b8:	mov    rax,QWORD PTR [r14+0x8]
 10178bc:	movsxd rcx,DWORD PTR [rax+0x4]
 10178c0:	add    rcx,0x8
 10178c4:	add    rcx,r14
 10178c7:	xor    r9d,r9d
 10178ca:	mov    r8d,0xc000c356
 10178d0:	call   QWORD PTR [rbx+0x20]
 10178d3:	test   al,al
 10178d5:	je     0x1017d49
 10178db:	mov    rax,QWORD PTR [r14+0x8]
 10178df:	movsxd rcx,DWORD PTR [rax+0x4]
 10178e3:	mov    rbx,QWORD PTR [rcx+r14*1+0x8]
 10178e8:	lea    rax,[rbp-0x38]
 10178ec:	mov    QWORD PTR [rsp+0x20],rax
 10178f1:	mov    r9d,esi
 10178f4:	xor    r8d,r8d
 10178f7:	lea    rdx,[rip+0xfffffffffffedeba]        # 0x10057b8
 10178fe:	mov    rcx,QWORD PTR [rbp-0x40]
 1017902:	call   QWORD PTR [rip+0xfffffffffffe9778]        # 0x1001080
 1017908:	mov    edx,eax
 101790a:	mov    rax,QWORD PTR [r14+0x8]
 101790e:	movsxd rcx,DWORD PTR [rax+0x4]
 1017912:	add    rcx,0x8
 1017916:	add    rcx,r14
 1017919:	xor    r9d,r9d
 101791c:	mov    r8d,0xc000c357
 1017922:	call   QWORD PTR [rbx+0x20]
 1017925:	test   al,al
 1017927:	je     0x1017d49
 101792d:	mov    rax,QWORD PTR [r14+0x8]
 1017931:	movsxd rcx,DWORD PTR [rax+0x4]
 1017935:	mov    rbx,QWORD PTR [rcx+r14*1+0x8]
 101793a:	lea    rax,[rbp-0x30]
 101793e:	mov    QWORD PTR [rsp+0x20],rax
 1017943:	mov    r9d,esi
 1017946:	xor    r8d,r8d
 1017949:	lea    rdx,[rip+0xfffffffffffede50]        # 0x10057a0
 1017950:	mov    rcx,QWORD PTR [rbp-0x38]
 1017954:	call   QWORD PTR [rip+0xfffffffffffe9726]        # 0x1001080
 101795a:	mov    edx,eax
 101795c:	mov    rax,QWORD PTR [r14+0x8]
 1017960:	movsxd rcx,DWORD PTR [rax+0x4]
 1017964:	add    rcx,0x8
 1017968:	add    rcx,r14
 101796b:	xor    r9d,r9d
 101796e:	mov    r8d,0xc000c358
 1017974:	call   QWORD PTR [rbx+0x20]
 1017977:	test   al,al
 1017979:	je     0x1017d49
 101797f:	mov    rax,QWORD PTR [r14+0x8]
 1017983:	movsxd rcx,DWORD PTR [rax+0x4]
 1017987:	mov    rbx,QWORD PTR [rcx+r14*1+0x8]
 101798c:	lea    rax,[rsp+0x68]
 1017991:	mov    QWORD PTR [rsp+0x20],rax
 1017996:	mov    r9d,esi
 1017999:	xor    r8d,r8d
 101799c:	lea    rdx,[rip+0xfffffffffffeb7d5]        # 0x1003178
 10179a3:	mov    rcx,QWORD PTR [rbp-0x30]
 10179a7:	call   QWORD PTR [rip+0xfffffffffffe96d3]        # 0x1001080
 10179ad:	mov    edx,eax
 10179af:	mov    rax,QWORD PTR [r14+0x8]
 10179b3:	movsxd rcx,DWORD PTR [rax+0x4]
 10179b7:	add    rcx,0x8
 10179bb:	add    rcx,r14
 10179be:	mov    r9b,0x1
 10179c1:	mov    r8d,0xc000c359
 10179c7:	call   QWORD PTR [rbx+0x20]
 10179ca:	test   al,al
 10179cc:	je     0x1017d49
 10179d2:	mov    rax,QWORD PTR [r14+0x8]
 10179d6:	movsxd rcx,DWORD PTR [rax+0x4]
 10179da:	mov    rbx,QWORD PTR [rcx+r14*1+0x8]
 10179df:	lea    rax,[rsp+0x78]
 10179e4:	mov    QWORD PTR [rsp+0x20],rax
 10179e9:	mov    r9d,esi
 10179ec:	xor    r8d,r8d
 10179ef:	lea    rdx,[rip+0xfffffffffffeb782]        # 0x1003178
 10179f6:	mov    rcx,QWORD PTR [rsp+0x68]
 10179fb:	call   QWORD PTR [rip+0xfffffffffffe967f]        # 0x1001080
 1017a01:	mov    edx,eax
 1017a03:	mov    rax,QWORD PTR [r14+0x8]
 1017a07:	movsxd rcx,DWORD PTR [rax+0x4]
 1017a0b:	add    rcx,0x8
 1017a0f:	add    rcx,r14
 1017a12:	mov    r9b,0x1
 1017a15:	mov    r8d,0xc000c359
 1017a1b:	call   QWORD PTR [rbx+0x20]
 1017a1e:	test   al,al
 1017a20:	je     0x1017d49
 1017a26:	mov    rax,QWORD PTR [r14+0x8]
 1017a2a:	movsxd rcx,DWORD PTR [rax+0x4]
 1017a2e:	mov    rbx,QWORD PTR [rcx+r14*1+0x8]
 1017a33:	lea    rax,[rbp-0x80]
 1017a37:	mov    QWORD PTR [rsp+0x20],rax
 1017a3c:	mov    r9d,esi
 1017a3f:	xor    r8d,r8d
 1017a42:	lea    rdx,[rip+0xfffffffffffee4bf]        # 0x1005f08
 1017a49:	mov    rcx,QWORD PTR [rsp+0x78]
 1017a4e:	call   QWORD PTR [rip+0xfffffffffffe962c]        # 0x1001080
 1017a54:	mov    edx,eax
 1017a56:	mov    rax,QWORD PTR [r14+0x8]
 1017a5a:	movsxd rcx,DWORD PTR [rax+0x4]
 1017a5e:	add    rcx,0x8
 1017a62:	add    rcx,r14
 1017a65:	xor    r9d,r9d
 1017a68:	mov    r8d,0xc000c370
 1017a6e:	call   QWORD PTR [rbx+0x20]
 1017a71:	test   al,al
 1017a73:	je     0x1017d49
 1017a79:	mov    rax,QWORD PTR [r14+0x8]
 1017a7d:	movsxd rcx,DWORD PTR [rax+0x4]
 1017a81:	mov    rbx,QWORD PTR [rcx+r14*1+0x8]
 1017a86:	lea    rax,[rsp+0x70]
 1017a8b:	mov    QWORD PTR [rsp+0x28],rax
 1017a90:	lea    rax,[rbp+0x270]
 1017a97:	mov    QWORD PTR [rsp+0x20],rax
 1017a9c:	lea    r9,[rsp+0x60]
 1017aa1:	xor    r8d,r8d
 1017aa4:	lea    rdx,[rip+0xfffffffffffee45d]        # 0x1005f08
 1017aab:	mov    rcx,QWORD PTR [rbp-0x80]
 1017aaf:	call   QWORD PTR [rip+0xfffffffffffe95d3]        # 0x1001088
 1017ab5:	mov    edx,eax
 1017ab7:	mov    rax,QWORD PTR [r14+0x8]
 1017abb:	movsxd rcx,DWORD PTR [rax+0x4]
 1017abf:	add    rcx,0x8
 1017ac3:	add    rcx,r14
 1017ac6:	xor    r9d,r9d
 1017ac9:	mov    r8d,0xc000c371
 1017acf:	call   QWORD PTR [rbx+0x20]
 1017ad2:	test   al,al
 1017ad4:	je     0x1017d49
 1017ada:	lea    rdx,[rip+0xfffffffffffeaf8b]        # 0x1002a6c
 1017ae1:	lea    rcx,[rbp+0x270]
 1017ae8:	call   QWORD PTR [rip+0xfffffffffffe9bda]        # 0x10016c8
 1017aee:	test   rax,rax
 1017af1:	je     0x1017af8
 1017af3:	xor    ecx,ecx
 1017af5:	mov    WORD PTR [rax],cx
 1017af8:	lea    rcx,[rbp+0x270]
 1017aff:	call   QWORD PTR [rip+0xfffffffffffe9c3b]        # 0x1001740
 1017b05:	cmp    eax,DWORD PTR [r14+0x24]
 1017b09:	jne    0x1017d49
 1017b0f:	cmp    BYTE PTR [rsp+0x42],0x0
 1017b14:	jne    0x1017b4b
 1017b16:	mov    DWORD PTR [rsp+0x28],r12d
 1017b1b:	lea    rax,[rip+0xfffffffffffeb656]        # 0x1003178
 1017b22:	mov    QWORD PTR [rsp+0x20],rax
 1017b27:	movzx  r9d,r15b
 1017b2b:	mov    r8d,0x1
 1017b31:	lea    rdx,[rip+0xfffffffffffea2d8]        # 0x1001e10
 1017b38:	mov    rcx,r14
 1017b3b:	call   0x1016650
 1017b40:	mov    r13d,0x1
 1017b46:	jmp    0x1017d49
 1017b4b:	mov    rdx,rdi
 1017b4e:	lea    rcx,[rsp+0x58]
 1017b53:	call   QWORD PTR [rip+0xfffffffffffe9e5f]        # 0x10019b8
 1017b59:	nop
 1017b5a:	cmp    BYTE PTR [rsp+0x41],0x0
 1017b5f:	je     0x1017c02
 1017b65:	lea    rdx,[rip+0xfffffffffffee3bc]        # 0x1005f28
 1017b6c:	lea    rcx,[rsp+0x48]
 1017b71:	call   QWORD PTR [rip+0xfffffffffffe9f39]        # 0x1001ab0
 1017b77:	nop
 1017b78:	mov    rbx,QWORD PTR [rbp-0x70]
 1017b7c:	test   rbx,rbx
 1017b7f:	je     0x1017bbe
 1017b81:	lea    rdi,[rbx+0x10]
 1017b85:	test   rdi,rdi
 1017b88:	je     0x1017bb8
 1017b8a:	lea    rcx,[rsp+0x48]
 1017b8f:	call   QWORD PTR [rip+0xfffffffffffe9f53]        # 0x1001ae8
 1017b95:	mov    rdx,rax
 1017b98:	mov    rcx,rdi
 1017b9b:	call   QWORD PTR [rip+0xfffffffffffe9e5f]        # 0x1001a00
 1017ba1:	xor    ecx,ecx
 1017ba3:	test   eax,eax
 1017ba5:	sete   cl
 1017ba8:	test   ecx,ecx
 1017baa:	jne    0x1017bb1
 1017bac:	mov    rbx,QWORD PTR [rbx]
 1017baf:	jmp    0x1017b7c
 1017bb1:	test   rbx,rbx
 1017bb4:	jne    0x1017bee
 1017bb6:	jmp    0x1017bbe
 1017bb8:	call   0x103f972
 1017bbd:	int3   
 1017bbe:	mov    DWORD PTR [rsp+0x28],r12d
 1017bc3:	lea    rax,[rip+0xfffffffffffeb5ae]        # 0x1003178
 1017bca:	mov    QWORD PTR [rsp+0x20],rax
 1017bcf:	movzx  r9d,r15b
 1017bd3:	mov    r8d,0x1
 1017bd9:	lea    rdx,[rip+0xfffffffffffea230]        # 0x1001e10
 1017be0:	mov    rcx,r14
 1017be3:	call   0x1016650
 1017be8:	mov    r13d,0x1
 1017bee:	lea    rcx,[rsp+0x48]
 1017bf3:	call   QWORD PTR [rip+0xfffffffffffe9eaf]        # 0x1001aa8
 1017bf9:	lea    rdi,[r14+0x10]
 1017bfd:	jmp    0x1017d3e
 1017c02:	lea    rcx,[rsp+0x58]
 1017c07:	call   QWORD PTR [rip+0xfffffffffffe9d53]        # 0x1001960
 1017c0d:	mov    rsi,rax
 1017c10:	mov    rbx,QWORD PTR [rbp-0x20]
 1017c14:	test   rbx,rbx
 1017c17:	je     0x1017d3a
 1017c1d:	nop    DWORD PTR [rax]
 1017c20:	lea    rdi,[rbx+0x10]
 1017c24:	test   rdi,rdi
 1017c27:	je     0x1017d30
 1017c2d:	test   rsi,rsi
 1017c30:	je     0x1017d30
 1017c36:	mov    rcx,rsi
 1017c39:	call   QWORD PTR [rip+0xfffffffffffe9ea9]        # 0x1001ae8
 1017c3f:	mov    rdx,rax
 1017c42:	mov    rcx,rdi
 1017c45:	call   QWORD PTR [rip+0xfffffffffffe9db5]        # 0x1001a00
 1017c4b:	xor    ecx,ecx
 1017c4d:	test   eax,eax
 1017c4f:	sete   cl
 1017c52:	test   ecx,ecx
 1017c54:	jne    0x1017c64
 1017c56:	mov    rbx,QWORD PTR [rbx]
 1017c59:	test   rbx,rbx
 1017c5c:	je     0x1017d36
 1017c62:	jmp    0x1017c20
 1017c64:	test   rbx,rbx
 1017c67:	je     0x1017d36
 1017c6d:	lea    rcx,[rsp+0x48]
 1017c72:	call   QWORD PTR [rip+0xfffffffffffe9e48]        # 0x1001ac0
 1017c78:	nop
 1017c79:	lea    rcx,[rsp+0x58]
 1017c7e:	call   QWORD PTR [rip+0xfffffffffffe9e64]        # 0x1001ae8
 1017c84:	mov    rsi,rax
 1017c87:	mov    rcx,rax
 1017c8a:	call   0x103fa26
 1017c8f:	mov    edi,eax
 1017c91:	xor    edx,edx
 1017c93:	div    DWORD PTR [rbp+0x28]
 1017c96:	mov    rbx,QWORD PTR [rbp+0x20]
 1017c9a:	test   rbx,rbx
 1017c9d:	je     0x1017d23
 1017ca3:	mov    rbx,QWORD PTR [rbx+rdx*8]
 1017ca7:	test   rbx,rbx
 1017caa:	je     0x1017d23
 1017cac:	cmp    DWORD PTR [rbx+0x18],edi
 1017caf:	jne    0x1017cc8
 1017cb1:	mov    rdx,rsi
 1017cb4:	mov    rcx,rbx
 1017cb7:	call   QWORD PTR [rip+0xfffffffffffe9d43]        # 0x1001a00
 1017cbd:	xor    ecx,ecx
 1017cbf:	test   eax,eax
 1017cc1:	sete   cl
 1017cc4:	test   ecx,ecx
 1017cc6:	jne    0x1017cce
 1017cc8:	mov    rbx,QWORD PTR [rbx+0x10]
 1017ccc:	jmp    0x1017ca7
 1017cce:	lea    rdx,[rbx+0x8]
 1017cd2:	lea    rcx,[rsp+0x48]
 1017cd7:	call   QWORD PTR [rip+0xfffffffffffe9dc3]        # 0x1001aa0
 1017cdd:	lea    rdx,[rip+0xfffffffffffee244]        # 0x1005f28
 1017ce4:	lea    rcx,[rsp+0x48]
 1017ce9:	call   QWORD PTR [rip+0xfffffffffffe9d71]        # 0x1001a60
 1017cef:	test   eax,eax
 1017cf1:	jne    0x1017d23
 1017cf3:	mov    DWORD PTR [rsp+0x28],r12d
 1017cf8:	lea    rax,[rip+0xfffffffffffeb479]        # 0x1003178
 1017cff:	mov    QWORD PTR [rsp+0x20],rax
 1017d04:	movzx  r9d,r15b
 1017d08:	mov    r8d,0x1
 1017d0e:	lea    rdx,[rip+0xfffffffffffea0fb]        # 0x1001e10
 1017d15:	mov    rcx,r14
 1017d18:	call   0x1016650
 1017d1d:	mov    r13d,0x1
 1017d23:	lea    rcx,[rsp+0x48]
 1017d28:	call   QWORD PTR [rip+0xfffffffffffe9d7a]        # 0x1001aa8
 1017d2e:	jmp    0x1017d36
 1017d30:	call   0x103f972
 1017d35:	int3   
 1017d36:	lea    rdi,[r14+0x10]
 1017d3a:	mov    esi,DWORD PTR [rsp+0x44]
 1017d3e:	lea    rcx,[rsp+0x58]
 1017d43:	call   QWORD PTR [rip+0xfffffffffffe9d5f]        # 0x1001aa8
 1017d49:	lea    rcx,[rbp-0x40]
 1017d4d:	call   0x1034560
 1017d52:	lea    rcx,[rbp-0x38]
 1017d56:	call   0x1034560
 1017d5b:	lea    rcx,[rbp-0x30]
 1017d5f:	call   0x1034560
 1017d64:	lea    rcx,[rsp+0x68]
 1017d69:	call   0x1034560
 1017d6e:	lea    rcx,[rsp+0x78]
 1017d73:	call   0x1034560
 1017d78:	lea    rcx,[rbp-0x80]
 1017d7c:	call   0x1034560
 1017d81:	mov    r11,QWORD PTR [r14+0x8]
 1017d85:	movsxd rax,DWORD PTR [r11+0x4]
 1017d89:	mov    rbx,QWORD PTR [rax+r14*1+0x8]
 1017d8e:	mov    rcx,rdi
 1017d91:	call   QWORD PTR [rip+0xfffffffffffe9d51]        # 0x1001ae8
 1017d97:	mov    rcx,rax
 1017d9a:	lea    r8,[rbp-0x40]
 1017d9e:	mov    rdx,0xffffffff80000002
 1017da5:	call   QWORD PTR [rip+0xfffffffffffe92c5]        # 0x1001070
 1017dab:	mov    edx,eax
 1017dad:	mov    rax,QWORD PTR [r14+0x8]
 1017db1:	movsxd rcx,DWORD PTR [rax+0x4]
 1017db5:	add    rcx,0x8
 1017db9:	add    rcx,r14
 1017dbc:	xor    r9d,r9d
 1017dbf:	mov    r8d,0xc000c356
 1017dc5:	call   QWORD PTR [rbx+0x20]
 1017dc8:	test   al,al
 1017dca:	je     0x101864a
 1017dd0:	mov    rax,QWORD PTR [r14+0x8]
 1017dd4:	movsxd rcx,DWORD PTR [rax+0x4]
 1017dd8:	mov    rbx,QWORD PTR [rcx+r14*1+0x8]
 1017ddd:	lea    rax,[rbp-0x38]
 1017de1:	mov    QWORD PTR [rsp+0x20],rax
 1017de6:	mov    r9d,esi
 1017de9:	xor    r8d,r8d
 1017dec:	lea    rdx,[rip+0xfffffffffffed9c5]        # 0x10057b8
 1017df3:	mov    rcx,QWORD PTR [rbp-0x40]
 1017df7:	call   QWORD PTR [rip+0xfffffffffffe9283]        # 0x1001080
 1017dfd:	mov    edx,eax
 1017dff:	mov    rax,QWORD PTR [r14+0x8]
 1017e03:	movsxd rcx,DWORD PTR [rax+0x4]
 1017e07:	add    rcx,0x8
 1017e0b:	add    rcx,r14
 1017e0e:	xor    r9d,r9d
 1017e11:	mov    r8d,0xc000c357
 1017e17:	call   QWORD PTR [rbx+0x20]
 1017e1a:	test   al,al
 1017e1c:	je     0x101864a
 1017e22:	mov    rax,QWORD PTR [r14+0x8]
 1017e26:	movsxd rcx,DWORD PTR [rax+0x4]
 1017e2a:	mov    rbx,QWORD PTR [rcx+r14*1+0x8]
 1017e2f:	lea    rax,[rbp-0x30]
 1017e33:	mov    QWORD PTR [rsp+0x20],rax
 1017e38:	mov    r9d,esi
 1017e3b:	xor    r8d,r8d
 1017e3e:	lea    rdx,[rip+0xfffffffffffed95b]        # 0x10057a0
 1017e45:	mov    rcx,QWORD PTR [rbp-0x38]
 1017e49:	call   QWORD PTR [rip+0xfffffffffffe9231]        # 0x1001080
 1017e4f:	mov    edx,eax
 1017e51:	mov    rax,QWORD PTR [r14+0x8]
 1017e55:	movsxd rcx,DWORD PTR [rax+0x4]
 1017e59:	add    rcx,0x8
 1017e5d:	add    rcx,r14
 1017e60:	xor    r9d,r9d
 1017e63:	mov    r8d,0xc000c358
 1017e69:	call   QWORD PTR [rbx+0x20]
 1017e6c:	test   al,al
 1017e6e:	je     0x101864a
 1017e74:	mov    rax,QWORD PTR [r14+0x8]
 1017e78:	movsxd rcx,DWORD PTR [rax+0x4]
 1017e7c:	mov    rbx,QWORD PTR [rcx+r14*1+0x8]
 1017e81:	lea    rax,[rsp+0x68]
 1017e86:	mov    QWORD PTR [rsp+0x20],rax
 1017e8b:	mov    r9d,esi
 1017e8e:	xor    r8d,r8d
 1017e91:	lea    rdx,[rip+0xfffffffffffed9f8]        # 0x1005890
 1017e98:	mov    rcx,QWORD PTR [rbp-0x30]
 1017e9c:	call   QWORD PTR [rip+0xfffffffffffe91de]        # 0x1001080
 1017ea2:	mov    edx,eax
 1017ea4:	mov    rax,QWORD PTR [r14+0x8]
 1017ea8:	movsxd rcx,DWORD PTR [rax+0x4]
 1017eac:	add    rcx,0x8
 1017eb0:	add    rcx,r14
 1017eb3:	xor    r9d,r9d
 1017eb6:	mov    r8d,0xc000c359
 1017ebc:	call   QWORD PTR [rbx+0x20]
 1017ebf:	xor    r15d,r15d
 1017ec2:	test   al,al
 1017ec4:	je     0x101864d
 1017eca:	mov    rax,QWORD PTR [r14+0x8]
 1017ece:	movsxd rcx,DWORD PTR [rax+0x4]
 1017ed2:	mov    rbx,QWORD PTR [rcx+r14*1+0x8]
 1017ed7:	lea    rax,[rsp+0x50]
 1017edc:	mov    QWORD PTR [rsp+0x28],rax
 1017ee1:	mov    QWORD PTR [rsp+0x20],r15
 1017ee6:	lea    r9,[rsp+0x60]
 1017eeb:	xor    r8d,r8d
 1017eee:	lea    rdx,[rip+0xfffffffffffee04b]        # 0x1005f40
 1017ef5:	mov    rcx,QWORD PTR [rsp+0x68]
 1017efa:	call   QWORD PTR [rip+0xfffffffffffe9188]        # 0x1001088
 1017f00:	mov    edx,eax
 1017f02:	mov    rax,QWORD PTR [r14+0x8]
 1017f06:	movsxd rcx,DWORD PTR [rax+0x4]
 1017f0a:	add    rcx,0x8
 1017f0e:	add    rcx,r14
 1017f11:	mov    r9b,0x1
 1017f14:	mov    r8d,0x8000c372
 1017f1a:	call   QWORD PTR [rbx+0x20]
 1017f1d:	test   al,al
 1017f1f:	je     0x101864d
 1017f25:	mov    ebx,DWORD PTR [rsp+0x50]
 1017f29:	call   QWORD PTR [rip+0xfffffffffffe9629]        # 0x1001558
 1017f2f:	mov    rcx,rax
 1017f32:	lea    r8,[rbx+0x4]
 1017f36:	lea    edx,[r15+0x8]
 1017f3a:	call   QWORD PTR [rip+0xfffffffffffe9628]        # 0x1001568
 1017f40:	mov    r12,rax
 1017f43:	test   rax,rax
 1017f46:	mov    rax,QWORD PTR [r14+0x8]
 1017f4a:	movsxd rcx,DWORD PTR [rax+0x4]
 1017f4e:	jne    0x1018004
 1017f54:	add    rcx,0x8
 1017f58:	add    rcx,r14
 1017f5b:	mov    rax,QWORD PTR [rcx]
 1017f5e:	mov    BYTE PTR [rsp+0x28],0x1
 1017f63:	mov    BYTE PTR [rsp+0x20],0x1
 1017f68:	lea    r9d,[r15+0x2]
 1017f6c:	xor    r8d,r8d
 1017f6f:	mov    edx,0x8000c372
 1017f74:	call   QWORD PTR [rax]
 1017f76:	nop
 1017f77:	lea    rdi,[rip+0xfffffffffffe9ea2]        # 0x1001e20
 1017f7e:	mov    QWORD PTR [rbp-0x78],rdi
 1017f82:	mov    rbx,QWORD PTR [rbp-0x70]
 1017f86:	test   rbx,rbx
 1017f89:	je     0x1017fa2
 1017f8b:	nop    DWORD PTR [rax+rax*1+0x0]
 1017f90:	lea    rcx,[rbx+0x10]
 1017f94:	call   QWORD PTR [rip+0xfffffffffffe9b0e]        # 0x1001aa8
 1017f9a:	mov    rbx,QWORD PTR [rbx]
 1017f9d:	test   rbx,rbx
 1017fa0:	jne    0x1017f90
 1017fa2:	mov    QWORD PTR [rbp-0x60],r15
 1017fa6:	mov    QWORD PTR [rbp-0x58],r15
 1017faa:	mov    QWORD PTR [rbp-0x68],r15
 1017fae:	mov    QWORD PTR [rbp-0x70],r15
 1017fb2:	mov    rcx,QWORD PTR [rbp-0x50]
 1017fb6:	call   0x103f9ae
 1017fbb:	mov    QWORD PTR [rbp-0x50],r15
 1017fbf:	mov    QWORD PTR [rbp-0x28],rdi
 1017fc3:	mov    rbx,QWORD PTR [rbp-0x20]
 1017fc7:	test   rbx,rbx
 1017fca:	je     0x1017fe2
 1017fcc:	nop    DWORD PTR [rax+0x0]
 1017fd0:	lea    rcx,[rbx+0x10]
 1017fd4:	call   QWORD PTR [rip+0xfffffffffffe9ace]        # 0x1001aa8
 1017fda:	mov    rbx,QWORD PTR [rbx]
 1017fdd:	test   rbx,rbx
 1017fe0:	jne    0x1017fd0
 1017fe2:	mov    QWORD PTR [rbp-0x10],r15
 1017fe6:	mov    QWORD PTR [rbp-0x8],r15
 1017fea:	mov    QWORD PTR [rbp-0x18],r15
 1017fee:	mov    QWORD PTR [rbp-0x20],r15
 1017ff2:	mov    rcx,QWORD PTR [rbp+0x0]
 1017ff6:	call   0x103f9ae
 1017ffb:	mov    QWORD PTR [rbp+0x0],r15
 1017fff:	jmp    0x10186cf
 1018004:	mov    rbx,QWORD PTR [rcx+r14*1+0x8]
 1018009:	lea    rax,[rsp+0x50]
 101800e:	mov    QWORD PTR [rsp+0x28],rax
 1018013:	mov    QWORD PTR [rsp+0x20],r12
 1018018:	lea    r9,[rsp+0x60]
 101801d:	xor    r8d,r8d
 1018020:	lea    rdx,[rip+0xfffffffffffedf19]        # 0x1005f40
 1018027:	mov    rcx,QWORD PTR [rsp+0x68]
 101802c:	call   QWORD PTR [rip+0xfffffffffffe9056]        # 0x1001088
 1018032:	mov    edx,eax
 1018034:	mov    rax,QWORD PTR [r14+0x8]
 1018038:	movsxd rcx,DWORD PTR [rax+0x4]
 101803c:	add    rcx,0x8
 1018040:	add    rcx,r14
 1018043:	mov    r9b,0x1
 1018046:	mov    r8d,0x8000c372
 101804c:	call   QWORD PTR [rbx+0x20]
 101804f:	test   al,al
 1018051:	jne    0x10180e4
 1018057:	lea    rdi,[rip+0xfffffffffffe9dc2]        # 0x1001e20
 101805e:	mov    QWORD PTR [rbp-0x78],rdi
 1018062:	mov    rbx,QWORD PTR [rbp-0x70]
 1018066:	test   rbx,rbx
 1018069:	je     0x1018082
 101806b:	nop    DWORD PTR [rax+rax*1+0x0]
 1018070:	lea    rcx,[rbx+0x10]
 1018074:	call   QWORD PTR [rip+0xfffffffffffe9a2e]        # 0x1001aa8
 101807a:	mov    rbx,QWORD PTR [rbx]
 101807d:	test   rbx,rbx
 1018080:	jne    0x1018070
 1018082:	mov    QWORD PTR [rbp-0x60],r15
 1018086:	mov    QWORD PTR [rbp-0x58],r15
 101808a:	mov    QWORD PTR [rbp-0x68],r15
 101808e:	mov    QWORD PTR [rbp-0x70],r15
 1018092:	mov    rcx,QWORD PTR [rbp-0x50]
 1018096:	call   0x103f9ae
 101809b:	mov    QWORD PTR [rbp-0x50],r15
 101809f:	mov    QWORD PTR [rbp-0x28],rdi
 10180a3:	mov    rbx,QWORD PTR [rbp-0x20]
 10180a7:	test   rbx,rbx
 10180aa:	je     0x10180c2
 10180ac:	nop    DWORD PTR [rax+0x0]
 10180b0:	lea    rcx,[rbx+0x10]
 10180b4:	call   QWORD PTR [rip+0xfffffffffffe99ee]        # 0x1001aa8
 10180ba:	mov    rbx,QWORD PTR [rbx]
 10180bd:	test   rbx,rbx
 10180c0:	jne    0x10180b0
 10180c2:	mov    QWORD PTR [rbp-0x10],r15
 10180c6:	mov    QWORD PTR [rbp-0x8],r15
 10180ca:	mov    QWORD PTR [rbp-0x18],r15
 10180ce:	mov    QWORD PTR [rbp-0x20],r15
 10180d2:	mov    rcx,QWORD PTR [rbp+0x0]
 10180d6:	call   0x103f9ae
 10180db:	mov    QWORD PTR [rbp+0x0],r15
 10180df:	jmp    0x10186cf
 10180e4:	mov    eax,DWORD PTR [rsp+0x50]
 10180e8:	shr    rax,1
 10180eb:	mov    WORD PTR [r12+rax*2],r15w
 10180f0:	mov    eax,DWORD PTR [rsp+0x50]
 10180f4:	shr    rax,1
 10180f7:	mov    WORD PTR [r12+rax*2+0x2],r15w
 10180fd:	mov    r15,r12
 1018100:	cmp    WORD PTR [r12],0x0
 1018106:	je     0x10185f5
 101810c:	mov    DWORD PTR [rsp+0x70],0x20a
 1018114:	mov    r9d,0x104
 101811a:	mov    r8,r15
 101811d:	lea    edx,[r9+0x1]
 1018121:	lea    rcx,[rbp+0x60]
 1018125:	call   QWORD PTR [rip+0xfffffffffffe957d]        # 0x10016a8
 101812b:	mov    r11,QWORD PTR [r14+0x8]
 101812f:	movsxd rax,DWORD PTR [r11+0x4]
 1018133:	mov    rbx,QWORD PTR [rax+r14*1+0x8]
 1018138:	lea    rax,[rbp+0x10]
 101813c:	mov    QWORD PTR [rsp+0x20],rax
 1018141:	mov    r9d,esi
 1018144:	xor    r8d,r8d
 1018147:	lea    rdx,[rbp+0x60]
 101814b:	mov    rcx,QWORD PTR [rsp+0x68]
 1018150:	call   QWORD PTR [rip+0xfffffffffffe8f2a]        # 0x1001080
 1018156:	mov    edx,eax
 1018158:	mov    rax,QWORD PTR [r14+0x8]
 101815c:	movsxd rcx,DWORD PTR [rax+0x4]
 1018160:	add    rcx,0x8
 1018164:	add    rcx,r14
 1018167:	mov    r9b,0x1
 101816a:	mov    r8d,0xc000c35a
 1018170:	call   QWORD PTR [rbx+0x20]
 1018173:	test   al,al
 1018175:	je     0x10185a6
 101817b:	mov    rax,QWORD PTR [r14+0x8]
 101817f:	movsxd rcx,DWORD PTR [rax+0x4]
 1018183:	mov    rbx,QWORD PTR [rcx+r14*1+0x8]
 1018188:	lea    rax,[rsp+0x78]
 101818d:	mov    QWORD PTR [rsp+0x20],rax
 1018192:	mov    r9d,esi
 1018195:	xor    r8d,r8d
 1018198:	lea    rdx,[rip+0xfffffffffffeafd9]        # 0x1003178
 101819f:	mov    rcx,QWORD PTR [rbp+0x10]
 10181a3:	call   QWORD PTR [rip+0xfffffffffffe8ed7]        # 0x1001080
 10181a9:	mov    edx,eax
 10181ab:	mov    rax,QWORD PTR [r14+0x8]
 10181af:	movsxd rcx,DWORD PTR [rax+0x4]
 10181b3:	add    rcx,0x8
 10181b7:	add    rcx,r14
 10181ba:	mov    r9b,0x1
 10181bd:	mov    r8d,0xc000c35d
 10181c3:	call   QWORD PTR [rbx+0x20]
 10181c6:	test   al,al
 10181c8:	je     0x10185a6
 10181ce:	mov    rax,QWORD PTR [r14+0x8]
 10181d2:	movsxd rcx,DWORD PTR [rax+0x4]
 10181d6:	mov    rbx,QWORD PTR [rcx+r14*1+0x8]
 10181db:	lea    rax,[rbp-0x80]
 10181df:	mov    QWORD PTR [rsp+0x20],rax
 10181e4:	mov    r9d,esi
 10181e7:	xor    r8d,r8d
 10181ea:	lea    rdx,[rip+0xfffffffffffedd17]        # 0x1005f08
 10181f1:	mov    rcx,QWORD PTR [rsp+0x78]
 10181f6:	call   QWORD PTR [rip+0xfffffffffffe8e84]        # 0x1001080
 10181fc:	mov    edx,eax
 10181fe:	mov    rax,QWORD PTR [r14+0x8]
 1018202:	movsxd rcx,DWORD PTR [rax+0x4]
 1018206:	add    rcx,0x8
 101820a:	add    rcx,r14
 101820d:	xor    r9d,r9d
 1018210:	mov    r8d,0xc000c370
 1018216:	call   QWORD PTR [rbx+0x20]
 1018219:	test   al,al
 101821b:	je     0x10185a6
 1018221:	mov    rax,QWORD PTR [r14+0x8]
 1018225:	movsxd rcx,DWORD PTR [rax+0x4]
 1018229:	mov    rbx,QWORD PTR [rcx+r14*1+0x8]
 101822e:	lea    rax,[rsp+0x70]
 1018233:	mov    QWORD PTR [rsp+0x28],rax
 1018238:	lea    rax,[rbp+0x270]
 101823f:	mov    QWORD PTR [rsp+0x20],rax
 1018244:	lea    r9,[rsp+0x60]
 1018249:	xor    r8d,r8d
 101824c:	lea    rdx,[rip+0xfffffffffffedcb5]        # 0x1005f08
 1018253:	mov    rcx,QWORD PTR [rbp-0x80]
 1018257:	call   QWORD PTR [rip+0xfffffffffffe8e2b]        # 0x1001088
 101825d:	mov    edx,eax
 101825f:	mov    rax,QWORD PTR [r14+0x8]
 1018263:	movsxd rcx,DWORD PTR [rax+0x4]
 1018267:	add    rcx,0x8
 101826b:	add    rcx,r14
 101826e:	xor    r9d,r9d
 1018271:	mov    r8d,0xc000c371
 1018277:	call   QWORD PTR [rbx+0x20]
 101827a:	test   al,al
 101827c:	je     0x10185a6
 1018282:	lea    rdx,[rip+0xfffffffffffea7e3]        # 0x1002a6c
 1018289:	lea    rcx,[rbp+0x270]
 1018290:	call   QWORD PTR [rip+0xfffffffffffe9432]        # 0x10016c8
 1018296:	xor    ebx,ebx
 1018298:	test   rax,rax
 101829b:	je     0x10182a0
 101829d:	mov    WORD PTR [rax],bx
 10182a0:	lea    rcx,[rbp+0x270]
 10182a7:	call   QWORD PTR [rip+0xfffffffffffe9493]        # 0x1001740
 10182ad:	cmp    eax,DWORD PTR [r14+0x24]
 10182b1:	jne    0x10185a6
 10182b7:	cmp    BYTE PTR [rsp+0x42],0x0
 10182bc:	jne    0x1018337
 10182be:	mov    rcx,QWORD PTR [r14+0xe8]
 10182c5:	test   rcx,rcx
 10182c8:	je     0x10182dd
 10182ca:	lea    rdx,[rbp+0x60]
 10182ce:	call   0x1012fe0
 10182d3:	test   rax,rax
 10182d6:	je     0x10182dd
 10182d8:	or     DWORD PTR [rax],0x1
 10182db:	jmp    0x101832f
 10182dd:	mov    ecx,0x28
 10182e2:	call   0x103f9d2
 10182e7:	mov    QWORD PTR [rbp+0x50],rax
 10182eb:	test   rax,rax
 10182ee:	je     0x1018325
 10182f0:	mov    rcx,QWORD PTR [r14+0xe8]
 10182f7:	mov    QWORD PTR [rsp+0x30],rcx
 10182fc:	mov    ecx,DWORD PTR [rsp+0x74]
 1018300:	mov    DWORD PTR [rsp+0x28],ecx
 1018304:	movzx  ecx,BYTE PTR [rsp+0x40]
 1018309:	mov    BYTE PTR [rsp+0x20],cl
 101830d:	lea    r9,[rbp+0x60]
 1018311:	mov    r8d,0x1
 1018317:	lea    rdx,[rbp+0x60]
 101831b:	mov    rcx,rax
 101831e:	call   0x1012cf0
 1018323:	jmp    0x1018328
 1018325:	mov    rax,rbx
 1018328:	mov    QWORD PTR [r14+0xe8],rax
 101832f:	inc    r13d
 1018332:	jmp    0x10185a6
 1018337:	lea    rdx,[rbp+0x60]
 101833b:	lea    rcx,[rsp+0x48]
 1018340:	call   QWORD PTR [rip+0xfffffffffffe976a]        # 0x1001ab0
 1018346:	nop
 1018347:	mov    rdx,rdi
 101834a:	lea    rcx,[rsp+0x58]
 101834f:	call   QWORD PTR [rip+0xfffffffffffe9663]        # 0x10019b8
 1018355:	nop
 1018356:	cmp    BYTE PTR [rsp+0x41],0x0
 101835b:	je     0x1018431
 1018361:	mov    rbx,QWORD PTR [rbp-0x70]
 1018365:	test   rbx,rbx
 1018368:	je     0x10183b6
 101836a:	nop    WORD PTR [rax+rax*1+0x0]
 1018370:	lea    rdi,[rbx+0x10]
 1018374:	test   rdi,rdi
 1018377:	je     0x10185e9
 101837d:	lea    rcx,[rsp+0x48]
 1018382:	call   QWORD PTR [rip+0xfffffffffffe9760]        # 0x1001ae8
 1018388:	mov    rdx,rax
 101838b:	mov    rcx,rdi
 101838e:	call   QWORD PTR [rip+0xfffffffffffe966c]        # 0x1001a00
 1018394:	xor    edi,edi
 1018396:	mov    ecx,edi
 1018398:	test   eax,eax
 101839a:	sete   cl
 101839d:	test   ecx,ecx
 101839f:	jne    0x10183ab
 10183a1:	mov    rbx,QWORD PTR [rbx]
 10183a4:	test   rbx,rbx
 10183a7:	jne    0x1018370
 10183a9:	jmp    0x10183b8
 10183ab:	test   rbx,rbx
 10183ae:	jne    0x101858b
 10183b4:	jmp    0x10183b8
 10183b6:	xor    edi,edi
 10183b8:	mov    rcx,QWORD PTR [r14+0xe8]
 10183bf:	test   rcx,rcx
 10183c2:	je     0x10183d7
 10183c4:	lea    rdx,[rbp+0x60]
 10183c8:	call   0x1012fe0
 10183cd:	test   rax,rax
 10183d0:	je     0x10183d7
 10183d2:	or     DWORD PTR [rax],0x1
 10183d5:	jmp    0x1018429
 10183d7:	mov    ecx,0x28
 10183dc:	call   0x103f9d2
 10183e1:	mov    QWORD PTR [rbp+0x50],rax
 10183e5:	test   rax,rax
 10183e8:	je     0x101841f
 10183ea:	mov    rcx,QWORD PTR [r14+0xe8]
 10183f1:	mov    QWORD PTR [rsp+0x30],rcx
 10183f6:	mov    ecx,DWORD PTR [rsp+0x74]
 10183fa:	mov    DWORD PTR [rsp+0x28],ecx
 10183fe:	movzx  ecx,BYTE PTR [rsp+0x40]
 1018403:	mov    BYTE PTR [rsp+0x20],cl
 1018407:	lea    r9,[rbp+0x60]
 101840b:	mov    r8d,0x1
 1018411:	lea    rdx,[rbp+0x60]
 1018415:	mov    rcx,rax
 1018418:	call   0x1012cf0
 101841d:	jmp    0x1018422
 101841f:	mov    rax,rdi
 1018422:	mov    QWORD PTR [r14+0xe8],rax
 1018429:	inc    r13d
 101842c:	jmp    0x101858b
 1018431:	lea    rcx,[rsp+0x58]
 1018436:	call   QWORD PTR [rip+0xfffffffffffe9524]        # 0x1001960
 101843c:	mov    rsi,rax
 101843f:	mov    rbx,QWORD PTR [rbp-0x20]
 1018443:	test   rbx,rbx
 1018446:	je     0x1018587
 101844c:	nop    DWORD PTR [rax+0x0]
 1018450:	lea    rdi,[rbx+0x10]
 1018454:	test   rdi,rdi
 1018457:	je     0x10185ef
 101845d:	test   rsi,rsi
 1018460:	je     0x10185ef
 1018466:	mov    rcx,rsi
 1018469:	call   QWORD PTR [rip+0xfffffffffffe9679]        # 0x1001ae8
 101846f:	mov    rdx,rax
 1018472:	mov    rcx,rdi
 1018475:	call   QWORD PTR [rip+0xfffffffffffe9585]        # 0x1001a00
 101847b:	xor    ecx,ecx
 101847d:	test   eax,eax
 101847f:	sete   cl
 1018482:	test   ecx,ecx
 1018484:	jne    0x1018493
 1018486:	mov    rbx,QWORD PTR [rbx]
 1018489:	test   rbx,rbx
 101848c:	jne    0x1018450
 101848e:	jmp    0x1018587
 1018493:	test   rbx,rbx
 1018496:	je     0x1018587
 101849c:	lea    rcx,[rsp+0x58]
 10184a1:	call   QWORD PTR [rip+0xfffffffffffe9641]        # 0x1001ae8
 10184a7:	mov    rsi,rax
 10184aa:	mov    rcx,rax
 10184ad:	call   0x103fa26
 10184b2:	mov    edi,eax
 10184b4:	xor    edx,edx
 10184b6:	div    DWORD PTR [rbp+0x28]
 10184b9:	mov    rbx,QWORD PTR [rbp+0x20]
 10184bd:	test   rbx,rbx
 10184c0:	je     0x1018587
 10184c6:	mov    rbx,QWORD PTR [rbx+rdx*8]
 10184ca:	test   rbx,rbx
 10184cd:	je     0x1018587
 10184d3:	cmp    DWORD PTR [rbx+0x18],edi
 10184d6:	jne    0x10184ef
 10184d8:	mov    rdx,rsi
 10184db:	mov    rcx,rbx
 10184de:	call   QWORD PTR [rip+0xfffffffffffe951c]        # 0x1001a00
 10184e4:	xor    ecx,ecx
 10184e6:	test   eax,eax
 10184e8:	sete   cl
 10184eb:	test   ecx,ecx
 10184ed:	jne    0x10184f5
 10184ef:	mov    rbx,QWORD PTR [rbx+0x10]
 10184f3:	jmp    0x10184ca
 10184f5:	lea    rdx,[rbx+0x8]
 10184f9:	lea    rcx,[rsp+0x48]
 10184fe:	call   QWORD PTR [rip+0xfffffffffffe959c]        # 0x1001aa0
 1018504:	lea    rdx,[rbp+0x60]
 1018508:	lea    rcx,[rsp+0x48]
 101850d:	call   QWORD PTR [rip+0xfffffffffffe954d]        # 0x1001a60
 1018513:	test   eax,eax
 1018515:	jne    0x1018587
 1018517:	mov    rcx,QWORD PTR [r14+0xe8]
 101851e:	test   rcx,rcx
 1018521:	je     0x1018536
 1018523:	lea    rdx,[rbp+0x60]
 1018527:	call   0x1012fe0
 101852c:	test   rax,rax
 101852f:	je     0x1018536
 1018531:	or     DWORD PTR [rax],0x1
 1018534:	jmp    0x1018584
 1018536:	mov    ecx,0x28
 101853b:	call   0x103f9d2
 1018540:	mov    QWORD PTR [rbp+0x50],rax
 1018544:	test   rax,rax
 1018547:	je     0x101857d
 1018549:	mov    rcx,QWORD PTR [r14+0xe8]
 1018550:	mov    QWORD PTR [rsp+0x30],rcx
 1018555:	mov    ecx,DWORD PTR [rsp+0x74]
 1018559:	mov    DWORD PTR [rsp+0x28],ecx
 101855d:	movzx  ecx,BYTE PTR [rsp+0x40]
 1018562:	mov    BYTE PTR [rsp+0x20],cl
 1018566:	lea    r9,[rbp+0x60]
 101856a:	mov    r8d,0x1
 1018570:	lea    rdx,[rbp+0x60]
 1018574:	mov    rcx,rax
 1018577:	call   0x1012cf0
 101857c:	nop
 101857d:	mov    QWORD PTR [r14+0xe8],rax
 1018584:	inc    r13d
 1018587:	mov    esi,DWORD PTR [rsp+0x44]
 101858b:	lea    rcx,[rsp+0x58]
 1018590:	call   QWORD PTR [rip+0xfffffffffffe9512]        # 0x1001aa8
 1018596:	nop
 1018597:	lea    rcx,[rsp+0x48]
 101859c:	call   QWORD PTR [rip+0xfffffffffffe9506]        # 0x1001aa8
 10185a2:	lea    rdi,[r14+0x10]
 10185a6:	or     rax,0xffffffffffffffff
 10185aa:	nop    WORD PTR [rax+rax*1+0x0]
 10185b0:	inc    rax
 10185b3:	cmp    WORD PTR [r15+rax*2],0x0
 10185b9:	jne    0x10185b0
 10185bb:	lea    r15,[r15+rax*2]
 10185bf:	add    r15,0x2
 10185c3:	lea    rcx,[rbp+0x10]
 10185c7:	call   0x1034560
 10185cc:	lea    rcx,[rsp+0x78]
 10185d1:	call   0x1034560
 10185d6:	lea    rcx,[rbp-0x80]
 10185da:	call   0x1034560
 10185df:	cmp    WORD PTR [r15],0x0
 10185e4:	jmp    0x1018106
 10185e9:	call   0x103f972
 10185ee:	int3   
 10185ef:	call   0x103f972
 10185f4:	nop
 10185f5:	call   QWORD PTR [rip+0xfffffffffffe8f5d]        # 0x1001558
 10185fb:	mov    rcx,rax
 10185fe:	mov    r8,r12
 1018601:	xor    edx,edx
 1018603:	call   QWORD PTR [rip+0xfffffffffffe8f57]        # 0x1001560
 1018609:	lea    rcx,[rbp-0x40]
 101860d:	call   0x1034560
 1018612:	lea    rcx,[rbp-0x38]
 1018616:	call   0x1034560
 101861b:	lea    rcx,[rbp-0x30]
 101861f:	call   0x1034560
 1018624:	lea    rcx,[rsp+0x68]
 1018629:	call   0x1034560
 101862e:	lea    rcx,[rbp+0x10]
 1018632:	call   0x1034560
 1018637:	lea    rcx,[rsp+0x78]
 101863c:	call   0x1034560
 1018641:	lea    rcx,[rbp-0x80]
 1018645:	call   0x1034560
 101864a:	xor    r15d,r15d
 101864d:	lea    rdi,[rip+0xfffffffffffe97cc]        # 0x1001e20
 1018654:	mov    QWORD PTR [rbp-0x78],rdi
 1018658:	mov    rbx,QWORD PTR [rbp-0x70]
 101865c:	test   rbx,rbx
 101865f:	je     0x1018673
 1018661:	lea    rcx,[rbx+0x10]
 1018665:	call   QWORD PTR [rip+0xfffffffffffe943d]        # 0x1001aa8
 101866b:	mov    rbx,QWORD PTR [rbx]
 101866e:	test   rbx,rbx
 1018671:	jne    0x1018661
 1018673:	mov    QWORD PTR [rbp-0x60],r15
 1018677:	mov    QWORD PTR [rbp-0x58],r15
 101867b:	mov    QWORD PTR [rbp-0x68],r15
 101867f:	mov    QWORD PTR [rbp-0x70],r15
 1018683:	mov    rcx,QWORD PTR [rbp-0x50]
 1018687:	call   0x103f9ae
 101868c:	mov    QWORD PTR [rbp-0x50],r15
 1018690:	mov    QWORD PTR [rbp-0x28],rdi
 1018694:	mov    rbx,QWORD PTR [rbp-0x20]
 1018698:	test   rbx,rbx
 101869b:	je     0x10186b2
 101869d:	nop    DWORD PTR [rax]
 10186a0:	lea    rcx,[rbx+0x10]
 10186a4:	call   QWORD PTR [rip+0xfffffffffffe93fe]        # 0x1001aa8
 10186aa:	mov    rbx,QWORD PTR [rbx]
 10186ad:	test   rbx,rbx
 10186b0:	jne    0x10186a0
 10186b2:	mov    QWORD PTR [rbp-0x10],r15
 10186b6:	mov    QWORD PTR [rbp-0x8],r15
 10186ba:	mov    QWORD PTR [rbp-0x18],r15
 10186be:	mov    QWORD PTR [rbp-0x20],r15
 10186c2:	mov    rcx,QWORD PTR [rbp+0x0]
 10186c6:	call   0x103f9ae
 10186cb:	mov    QWORD PTR [rbp+0x0],r15
 10186cf:	lea    rax,[rip+0xfffffffffffea36a]        # 0x1002a40
 10186d6:	mov    QWORD PTR [rbp+0x18],rax
 10186da:	lea    rcx,[rbp+0x18]
 10186de:	call   0x1012a20
 10186e3:	mov    eax,r13d
 10186e6:	mov    rcx,QWORD PTR [rbp+0x480]
 10186ed:	xor    rcx,rsp
 10186f0:	call   0x103ff40
 10186f5:	add    rsp,0x598
 10186fc:	pop    r15
 10186fe:	pop    r14
 1018700:	pop    r13
 1018702:	pop    r12
 1018704:	pop    rdi
 1018705:	pop    rsi
 1018706:	pop    rbx
 1018707:	pop    rbp
 1018708:	ret    
 1018709:	int3   
 101870a:	int3   
 101870b:	int3   
 101870c:	int3   
 101870d:	int3   
 101870e:	int3   
 101870f:	int3   
 1018710:	rex push rbp
 1018712:	push   rbx
 1018713:	push   rsi
 1018714:	push   rdi
 1018715:	push   r12
 1018717:	push   r13
 1018719:	push   r14
 101871b:	push   r15
 101871d:	mov    rbp,rsp
 1018720:	sub    rsp,0x78
 1018724:	mov    QWORD PTR [rbp-0x30],0xfffffffffffffffe
 101872c:	mov    rdi,rcx
 101872f:	xor    r13d,r13d
 1018732:	mov    r14d,r13d
 1018735:	mov    QWORD PTR [rbp-0x38],r13
 1018739:	mov    QWORD PTR [rbp+0x60],r13
 101873d:	mov    QWORD PTR [rbp+0x58],r13
 1018741:	mov    QWORD PTR [rbp+0x48],r13
 1018745:	mov    QWORD PTR [rbp+0x50],r13
 1018749:	mov    QWORD PTR [rbp-0x28],r13
 101874d:	mov    QWORD PTR [rbp-0x20],r13
 1018751:	mov    QWORD PTR [rbp-0x18],r13
 1018755:	mov    rax,QWORD PTR [rcx+0x8]
 1018759:	cmp    BYTE PTR [rcx+0x2a],r13b
 101875d:	movsxd rcx,DWORD PTR [rax+0x4]
 1018761:	mov    rbx,QWORD PTR [rcx+rdi*1+0x8]
 1018766:	lea    rcx,[rdi+0x10]
 101876a:	jne    0x1018949
 1018770:	call   QWORD PTR [rip+0xfffffffffffe9372]        # 0x1001ae8
 1018776:	mov    rcx,rax
 1018779:	lea    r8,[rbp-0x38]
 101877d:	mov    rdx,0xffffffff80000002
 1018784:	call   QWORD PTR [rip+0xfffffffffffe88e6]        # 0x1001070
 101878a:	mov    edx,eax
 101878c:	mov    rax,QWORD PTR [rdi+0x8]
 1018790:	movsxd rcx,DWORD PTR [rax+0x4]
 1018794:	add    rcx,0x8
 1018798:	add    rcx,rdi
 101879b:	xor    r9d,r9d
 101879e:	mov    r8d,0xc000c356
 10187a4:	call   QWORD PTR [rbx+0x20]
 10187a7:	test   al,al
 10187a9:	je     0x1018cf6
 10187af:	mov    rax,QWORD PTR [rdi+0x8]
 10187b3:	movsxd rcx,DWORD PTR [rax+0x4]
 10187b7:	mov    rbx,QWORD PTR [rcx+rdi*1+0x8]
 10187bc:	lea    rax,[rbp+0x60]
 10187c0:	mov    QWORD PTR [rsp+0x20],rax
 10187c5:	mov    r9d,0x20019
 10187cb:	xor    r8d,r8d
 10187ce:	lea    rdx,[rip+0xfffffffffffecfe3]        # 0x10057b8
 10187d5:	mov    rcx,QWORD PTR [rbp-0x38]
 10187d9:	call   QWORD PTR [rip+0xfffffffffffe88a1]        # 0x1001080
 10187df:	mov    edx,eax
 10187e1:	mov    rax,QWORD PTR [rdi+0x8]
 10187e5:	movsxd rcx,DWORD PTR [rax+0x4]
 10187e9:	add    rcx,0x8
 10187ed:	add    rcx,rdi
 10187f0:	xor    r9d,r9d
 10187f3:	mov    r8d,0xc000c357
 10187f9:	call   QWORD PTR [rbx+0x20]
 10187fc:	test   al,al
 10187fe:	je     0x1018cf6
 1018804:	mov    rax,QWORD PTR [rdi+0x8]
 1018808:	movsxd rcx,DWORD PTR [rax+0x4]
 101880c:	mov    rbx,QWORD PTR [rcx+rdi*1+0x8]
 1018811:	lea    rax,[rbp+0x58]
 1018815:	mov    QWORD PTR [rsp+0x20],rax
 101881a:	mov    r9d,0x20019
 1018820:	xor    r8d,r8d
 1018823:	lea    rdx,[rip+0xfffffffffffecf76]        # 0x10057a0
 101882a:	mov    rcx,QWORD PTR [rbp+0x60]
 101882e:	call   QWORD PTR [rip+0xfffffffffffe884c]        # 0x1001080
 1018834:	mov    edx,eax
 1018836:	mov    rax,QWORD PTR [rdi+0x8]
 101883a:	movsxd rcx,DWORD PTR [rax+0x4]
 101883e:	add    rcx,0x8
 1018842:	add    rcx,rdi
 1018845:	xor    r9d,r9d
 1018848:	mov    r8d,0xc000c358
 101884e:	call   QWORD PTR [rbx+0x20]
 1018851:	test   al,al
 1018853:	je     0x1018cf6
 1018859:	mov    rax,QWORD PTR [rdi+0x8]
 101885d:	movsxd rcx,DWORD PTR [rax+0x4]
 1018861:	mov    rbx,QWORD PTR [rcx+rdi*1+0x8]
 1018866:	lea    rax,[rbp+0x48]
 101886a:	mov    QWORD PTR [rsp+0x20],rax
 101886f:	mov    r9d,0x20019
 1018875:	xor    r8d,r8d
 1018878:	lea    rdx,[rip+0xfffffffffffed011]        # 0x1005890
 101887f:	mov    rcx,QWORD PTR [rbp+0x58]
 1018883:	call   QWORD PTR [rip+0xfffffffffffe87f7]        # 0x1001080
 1018889:	mov    edx,eax
 101888b:	mov    rax,QWORD PTR [rdi+0x8]
 101888f:	movsxd rcx,DWORD PTR [rax+0x4]
 1018893:	add    rcx,0x8
 1018897:	add    rcx,rdi
 101889a:	xor    r9d,r9d
 101889d:	mov    r8d,0xc000c359
 10188a3:	call   QWORD PTR [rbx+0x20]
 10188a6:	test   al,al
 10188a8:	je     0x1018cf6
 10188ae:	mov    rax,QWORD PTR [rdi+0x8]
 10188b2:	movsxd rcx,DWORD PTR [rax+0x4]
 10188b6:	mov    rbx,QWORD PTR [rcx+rdi*1+0x8]
 10188bb:	lea    rax,[rbp+0x50]
 10188bf:	mov    QWORD PTR [rsp+0x20],rax
 10188c4:	mov    r9d,0x20019
 10188ca:	xor    r8d,r8d
 10188cd:	lea    rdx,[rip+0xfffffffffffed694]        # 0x1005f68
 10188d4:	mov    rcx,QWORD PTR [rbp+0x48]
 10188d8:	call   QWORD PTR [rip+0xfffffffffffe87a2]        # 0x1001080
 10188de:	mov    edx,eax
 10188e0:	mov    rax,QWORD PTR [rdi+0x8]
 10188e4:	movsxd rcx,DWORD PTR [rax+0x4]
 10188e8:	add    rcx,0x8
 10188ec:	add    rcx,rdi
 10188ef:	xor    r9d,r9d
 10188f2:	mov    r8d,0x8000c372
 10188f8:	call   QWORD PTR [rbx+0x20]
 10188fb:	test   al,al
 10188fd:	je     0x1018cf6
 1018903:	lea    rsi,[rip+0x4a9a6]        # 0x10632b0
 101890a:	lea    r15,[rip+0x4a9ff]        # 0x1063310
 1018911:	mov    DWORD PTR [rsp+0x30],0x20
 1018919:	mov    BYTE PTR [rsp+0x28],0x0
 101891e:	mov    DWORD PTR [rsp+0x20],0x20019
 1018926:	mov    r9,QWORD PTR [rbp+0x50]
 101892a:	mov    r8,QWORD PTR [rbp+0x48]
 101892e:	mov    edx,DWORD PTR [rsi]
 1018930:	mov    rcx,rdi
 1018933:	call   0x1016710
 1018938:	add    r14d,eax
 101893b:	add    rsi,0x20
 101893f:	cmp    rsi,r15
 1018942:	jl     0x1018911
 1018944:	jmp    0x1018cf6
 1018949:	call   QWORD PTR [rip+0xfffffffffffe9199]        # 0x1001ae8
 101894f:	mov    rcx,rax
 1018952:	lea    r8,[rbp-0x38]
 1018956:	mov    rdx,0xffffffff80000002
 101895d:	call   QWORD PTR [rip+0xfffffffffffe870d]        # 0x1001070
 1018963:	mov    edx,eax
 1018965:	mov    rax,QWORD PTR [rdi+0x8]
 1018969:	movsxd rcx,DWORD PTR [rax+0x4]
 101896d:	add    rcx,0x8
 1018971:	add    rcx,rdi
 1018974:	xor    r9d,r9d
 1018977:	mov    r8d,0xc000c356
 101897d:	call   QWORD PTR [rbx+0x20]
 1018980:	lea    rsi,[rip+0x4a929]        # 0x10632b0
 1018987:	lea    r15,[rip+0x4a982]        # 0x1063310
 101898e:	test   al,al
 1018990:	je     0x1018b23
 1018996:	mov    rax,QWORD PTR [rdi+0x8]
 101899a:	movsxd rcx,DWORD PTR [rax+0x4]
 101899e:	mov    rbx,QWORD PTR [rcx+rdi*1+0x8]
 10189a3:	lea    rax,[rbp+0x60]
 10189a7:	mov    QWORD PTR [rsp+0x20],rax
 10189ac:	mov    r9d,0x20219
 10189b2:	xor    r8d,r8d
 10189b5:	lea    rdx,[rip+0xfffffffffffecdfc]        # 0x10057b8
 10189bc:	mov    rcx,QWORD PTR [rbp-0x38]
 10189c0:	call   QWORD PTR [rip+0xfffffffffffe86ba]        # 0x1001080
 10189c6:	mov    edx,eax
 10189c8:	mov    rax,QWORD PTR [rdi+0x8]
 10189cc:	movsxd rcx,DWORD PTR [rax+0x4]
 10189d0:	add    rcx,0x8
 10189d4:	add    rcx,rdi
 10189d7:	xor    r9d,r9d
 10189da:	mov    r8d,0xc000c357
 10189e0:	call   QWORD PTR [rbx+0x20]
 10189e3:	test   al,al
 10189e5:	je     0x1018b23
 10189eb:	mov    rax,QWORD PTR [rdi+0x8]
 10189ef:	movsxd rcx,DWORD PTR [rax+0x4]
 10189f3:	mov    rbx,QWORD PTR [rcx+rdi*1+0x8]
 10189f8:	lea    rax,[rbp+0x58]
 10189fc:	mov    QWORD PTR [rsp+0x20],rax
 1018a01:	mov    r9d,0x20219
 1018a07:	xor    r8d,r8d
 1018a0a:	lea    rdx,[rip+0xfffffffffffecd8f]        # 0x10057a0
 1018a11:	mov    rcx,QWORD PTR [rbp+0x60]
 1018a15:	call   QWORD PTR [rip+0xfffffffffffe8665]        # 0x1001080
 1018a1b:	mov    edx,eax
 1018a1d:	mov    rax,QWORD PTR [rdi+0x8]
 1018a21:	movsxd rcx,DWORD PTR [rax+0x4]
 1018a25:	add    rcx,0x8
 1018a29:	add    rcx,rdi
 1018a2c:	xor    r9d,r9d
 1018a2f:	mov    r8d,0xc000c358
 1018a35:	call   QWORD PTR [rbx+0x20]
 1018a38:	test   al,al
 1018a3a:	je     0x1018b23
 1018a40:	mov    rax,QWORD PTR [rdi+0x8]
 1018a44:	movsxd rcx,DWORD PTR [rax+0x4]
 1018a48:	mov    rbx,QWORD PTR [rcx+rdi*1+0x8]
 1018a4d:	lea    rax,[rbp+0x48]
 1018a51:	mov    QWORD PTR [rsp+0x20],rax
 1018a56:	mov    r9d,0x20219
 1018a5c:	xor    r8d,r8d
 1018a5f:	lea    rdx,[rip+0xfffffffffffece2a]        # 0x1005890
 1018a66:	mov    rcx,QWORD PTR [rbp+0x58]
 1018a6a:	call   QWORD PTR [rip+0xfffffffffffe8610]        # 0x1001080
 1018a70:	mov    edx,eax
 1018a72:	mov    rax,QWORD PTR [rdi+0x8]
 1018a76:	movsxd rcx,DWORD PTR [rax+0x4]
 1018a7a:	add    rcx,0x8
 1018a7e:	add    rcx,rdi
 1018a81:	mov    r9b,0x1
 1018a84:	mov    r8d,0xc000c359
 1018a8a:	call   QWORD PTR [rbx+0x20]
 1018a8d:	test   al,al
 1018a8f:	je     0x1018b23
 1018a95:	mov    rax,QWORD PTR [rdi+0x8]
 1018a99:	movsxd rcx,DWORD PTR [rax+0x4]
 1018a9d:	mov    rbx,QWORD PTR [rcx+rdi*1+0x8]
 1018aa2:	lea    rax,[rbp+0x50]
 1018aa6:	mov    QWORD PTR [rsp+0x20],rax
 1018aab:	mov    r9d,0x20219
 1018ab1:	xor    r8d,r8d
 1018ab4:	lea    rdx,[rip+0xfffffffffffed4ad]        # 0x1005f68
 1018abb:	mov    rcx,QWORD PTR [rbp+0x48]
 1018abf:	call   QWORD PTR [rip+0xfffffffffffe85bb]        # 0x1001080
 1018ac5:	mov    edx,eax
 1018ac7:	mov    rax,QWORD PTR [rdi+0x8]
 1018acb:	movsxd rcx,DWORD PTR [rax+0x4]
 1018acf:	add    rcx,0x8
 1018ad3:	add    rcx,rdi
 1018ad6:	mov    r9b,0x1
 1018ad9:	mov    r8d,0x8000c372
 1018adf:	call   QWORD PTR [rbx+0x20]
 1018ae2:	test   al,al
 1018ae4:	je     0x1018b23
 1018ae6:	mov    rbx,rsi
 1018ae9:	nop    DWORD PTR [rax+0x0]
 1018af0:	mov    DWORD PTR [rsp+0x30],0x20
 1018af8:	mov    BYTE PTR [rsp+0x28],0x1
 1018afd:	mov    DWORD PTR [rsp+0x20],0x20219
 1018b05:	mov    r9,QWORD PTR [rbp+0x50]
 1018b09:	mov    r8,QWORD PTR [rbp+0x48]
 1018b0d:	mov    edx,DWORD PTR [rbx]
 1018b0f:	mov    rcx,rdi
 1018b12:	call   0x1016710
 1018b17:	add    r14d,eax
 1018b1a:	add    rbx,0x20
 1018b1e:	cmp    rbx,r15
 1018b21:	jl     0x1018af0
 1018b23:	mov    rax,QWORD PTR [rdi+0x8]
 1018b27:	movsxd rdx,DWORD PTR [rax+0x4]
 1018b2b:	mov    rbx,QWORD PTR [rdx+rdi*1+0x8]
 1018b30:	lea    rcx,[rdi+0x10]
 1018b34:	call   QWORD PTR [rip+0xfffffffffffe8fae]        # 0x1001ae8
 1018b3a:	mov    rcx,rax
 1018b3d:	lea    r8,[rbp-0x38]
 1018b41:	mov    rdx,0xffffffff80000002
 1018b48:	call   QWORD PTR [rip+0xfffffffffffe8522]        # 0x1001070
 1018b4e:	mov    edx,eax
 1018b50:	mov    rax,QWORD PTR [rdi+0x8]
 1018b54:	movsxd rcx,DWORD PTR [rax+0x4]
 1018b58:	add    rcx,0x8
 1018b5c:	add    rcx,rdi
 1018b5f:	xor    r9d,r9d
 1018b62:	mov    r8d,0xc000c356
 1018b68:	call   QWORD PTR [rbx+0x20]
 1018b6b:	test   al,al
 1018b6d:	je     0x1018cf6
 1018b73:	mov    rax,QWORD PTR [rdi+0x8]
 1018b77:	movsxd rcx,DWORD PTR [rax+0x4]
 1018b7b:	mov    rbx,QWORD PTR [rcx+rdi*1+0x8]
 1018b80:	lea    rax,[rbp+0x60]
 1018b84:	mov    QWORD PTR [rsp+0x20],rax
 1018b89:	mov    r9d,0x20119
 1018b8f:	xor    r8d,r8d
 1018b92:	lea    rdx,[rip+0xfffffffffffecc1f]        # 0x10057b8
 1018b99:	mov    rcx,QWORD PTR [rbp-0x38]
 1018b9d:	call   QWORD PTR [rip+0xfffffffffffe84dd]        # 0x1001080
 1018ba3:	mov    edx,eax
 1018ba5:	mov    rax,QWORD PTR [rdi+0x8]
 1018ba9:	movsxd rcx,DWORD PTR [rax+0x4]
 1018bad:	add    rcx,0x8
 1018bb1:	add    rcx,rdi
 1018bb4:	xor    r9d,r9d
 1018bb7:	mov    r8d,0xc000c357
 1018bbd:	call   QWORD PTR [rbx+0x20]
 1018bc0:	test   al,al
 1018bc2:	je     0x1018cf6
 1018bc8:	mov    rax,QWORD PTR [rdi+0x8]
 1018bcc:	movsxd rcx,DWORD PTR [rax+0x4]
 1018bd0:	mov    rbx,QWORD PTR [rcx+rdi*1+0x8]
 1018bd5:	lea    rax,[rbp+0x58]
 1018bd9:	mov    QWORD PTR [rsp+0x20],rax
 1018bde:	mov    r9d,0x20119
 1018be4:	xor    r8d,r8d
 1018be7:	lea    rdx,[rip+0xfffffffffffecbb2]        # 0x10057a0
 1018bee:	mov    rcx,QWORD PTR [rbp+0x60]
 1018bf2:	call   QWORD PTR [rip+0xfffffffffffe8488]        # 0x1001080
 1018bf8:	mov    edx,eax
 1018bfa:	mov    rax,QWORD PTR [rdi+0x8]
 1018bfe:	movsxd rcx,DWORD PTR [rax+0x4]
 1018c02:	add    rcx,0x8
 1018c06:	add    rcx,rdi
 1018c09:	xor    r9d,r9d
 1018c0c:	mov    r8d,0xc000c358
 1018c12:	call   QWORD PTR [rbx+0x20]
 1018c15:	test   al,al
 1018c17:	je     0x1018cf6
 1018c1d:	mov    rax,QWORD PTR [rdi+0x8]
 1018c21:	movsxd rcx,DWORD PTR [rax+0x4]
 1018c25:	mov    rbx,QWORD PTR [rcx+rdi*1+0x8]
 1018c2a:	lea    rax,[rbp+0x48]
 1018c2e:	mov    QWORD PTR [rsp+0x20],rax
 1018c33:	mov    r9d,0x20119
 1018c39:	xor    r8d,r8d
 1018c3c:	lea    rdx,[rip+0xfffffffffffecc4d]        # 0x1005890
 1018c43:	mov    rcx,QWORD PTR [rbp+0x58]
 1018c47:	call   QWORD PTR [rip+0xfffffffffffe8433]        # 0x1001080
 1018c4d:	mov    edx,eax
 1018c4f:	mov    rax,QWORD PTR [rdi+0x8]
 1018c53:	movsxd rcx,DWORD PTR [rax+0x4]
 1018c57:	add    rcx,0x8
 1018c5b:	add    rcx,rdi
 1018c5e:	mov    r9b,0x1
 1018c61:	mov    r8d,0xc000c359
 1018c67:	call   QWORD PTR [rbx+0x20]
 1018c6a:	test   al,al
 1018c6c:	je     0x1018cf6
 1018c72:	mov    rax,QWORD PTR [rdi+0x8]
 1018c76:	movsxd rcx,DWORD PTR [rax+0x4]
 1018c7a:	mov    rbx,QWORD PTR [rcx+rdi*1+0x8]
 1018c7f:	lea    rax,[rbp+0x50]
 1018c83:	mov    QWORD PTR [rsp+0x20],rax
 1018c88:	mov    r9d,0x20119
 1018c8e:	xor    r8d,r8d
 1018c91:	lea    rdx,[rip+0xfffffffffffed2d0]        # 0x1005f68
 1018c98:	mov    rcx,QWORD PTR [rbp+0x48]
 1018c9c:	call   QWORD PTR [rip+0xfffffffffffe83de]        # 0x1001080
 1018ca2:	mov    edx,eax
 1018ca4:	mov    rax,QWORD PTR [rdi+0x8]
 1018ca8:	movsxd rcx,DWORD PTR [rax+0x4]
 1018cac:	add    rcx,0x8
 1018cb0:	add    rcx,rdi
 1018cb3:	mov    r9b,0x1
 1018cb6:	mov    r8d,0x8000c372
 1018cbc:	call   QWORD PTR [rbx+0x20]
 1018cbf:	test   al,al
 1018cc1:	je     0x1018cf6
 1018cc3:	mov    DWORD PTR [rsp+0x30],0x40
 1018ccb:	mov    BYTE PTR [rsp+0x28],0x0
 1018cd0:	mov    DWORD PTR [rsp+0x20],0x20119
 1018cd8:	mov    r9,QWORD PTR [rbp+0x50]
 1018cdc:	mov    r8,QWORD PTR [rbp+0x48]
 1018ce0:	mov    edx,DWORD PTR [rsi]
 1018ce2:	mov    rcx,rdi
 1018ce5:	call   0x1016710
 1018cea:	add    r14d,eax
 1018ced:	add    rsi,0x20
 1018cf1:	cmp    rsi,r15
 1018cf4:	jl     0x1018cc3
 1018cf6:	mov    rcx,QWORD PTR [rbp+0x50]
 1018cfa:	test   rcx,rcx
 1018cfd:	je     0x1018d09
 1018cff:	call   QWORD PTR [rip+0xfffffffffffe831b]        # 0x1001020
 1018d05:	mov    QWORD PTR [rbp+0x50],r13
 1018d09:	mov    rcx,QWORD PTR [rbp+0x48]
 1018d0d:	test   rcx,rcx
 1018d10:	je     0x1018d1c
 1018d12:	call   QWORD PTR [rip+0xfffffffffffe8308]        # 0x1001020
 1018d18:	mov    QWORD PTR [rbp+0x48],r13
 1018d1c:	mov    rcx,QWORD PTR [rbp+0x58]
 1018d20:	test   rcx,rcx
 1018d23:	je     0x1018d2f
 1018d25:	call   QWORD PTR [rip+0xfffffffffffe82f5]        # 0x1001020
 1018d2b:	mov    QWORD PTR [rbp+0x58],r13
 1018d2f:	mov    rcx,QWORD PTR [rbp+0x60]
 1018d33:	test   rcx,rcx
 1018d36:	je     0x1018d42
 1018d38:	call   QWORD PTR [rip+0xfffffffffffe82e2]        # 0x1001020
 1018d3e:	mov    QWORD PTR [rbp+0x60],r13
 1018d42:	mov    rcx,QWORD PTR [rbp-0x38]
 1018d46:	test   rcx,rcx
 1018d49:	je     0x1018d55
 1018d4b:	call   QWORD PTR [rip+0xfffffffffffe82cf]        # 0x1001020
 1018d51:	mov    QWORD PTR [rbp-0x38],r13
 1018d55:	mov    eax,r14d
 1018d58:	add    rsp,0x78
 1018d5c:	pop    r15
 1018d5e:	pop    r14
 1018d60:	pop    r13
 1018d62:	pop    r12
 1018d64:	pop    rdi
 1018d65:	pop    rsi
 1018d66:	pop    rbx
 1018d67:	pop    rbp
 1018d68:	ret    
 1018d69:	int3   
 1018d6a:	int3   
 1018d6b:	int3   
 1018d6c:	int3   
 1018d6d:	int3   
 1018d6e:	int3   
 1018d6f:	int3   
 1018d70:	rex push rbp
 1018d72:	push   rsi
 1018d73:	push   rdi
 1018d74:	sub    rsp,0x50
 1018d78:	mov    QWORD PTR [rsp+0x40],0xfffffffffffffffe
 1018d81:	mov    QWORD PTR [rsp+0x88],rbx
 1018d89:	mov    rdi,rcx
 1018d8c:	lea    rcx,[rsp+0x70]
 1018d91:	call   QWORD PTR [rip+0xfffffffffffe8d29]        # 0x1001ac0
 1018d97:	nop
 1018d98:	mov    rsi,QWORD PTR [rdi+0xe8]
 1018d9f:	test   rsi,rsi
 1018da2:	je     0x1018e58
 1018da8:	xor    ebp,ebp
 1018daa:	nop    WORD PTR [rax+rax*1+0x0]
 1018db0:	lea    rdx,[rsp+0x80]
 1018db8:	mov    rcx,rsi
 1018dbb:	call   0x1012e50
 1018dc0:	mov    rbx,rax
 1018dc3:	mov    edx,0x4000c361
 1018dc8:	lea    rcx,[rsp+0x78]
 1018dcd:	call   0x10132d0
 1018dd2:	nop
 1018dd3:	mov    rcx,rax
 1018dd6:	call   QWORD PTR [rip+0xfffffffffffe8d0c]        # 0x1001ae8
 1018ddc:	mov    rdx,rax
 1018ddf:	mov    r8,QWORD PTR [rbx]
 1018de2:	lea    rcx,[rsp+0x70]
 1018de7:	call   QWORD PTR [rip+0xfffffffffffe8c53]        # 0x1001a40
 1018ded:	nop
 1018dee:	lea    rcx,[rsp+0x78]
 1018df3:	call   QWORD PTR [rip+0xfffffffffffe8caf]        # 0x1001aa8
 1018df9:	nop
 1018dfa:	lea    rcx,[rsp+0x80]
 1018e02:	call   QWORD PTR [rip+0xfffffffffffe8ca0]        # 0x1001aa8
 1018e08:	mov    r11,QWORD PTR [rdi+0x8]
 1018e0c:	movsxd rax,DWORD PTR [r11+0x4]
 1018e10:	mov    rbx,QWORD PTR [rax+rdi*1+0x8]
 1018e15:	lea    rcx,[rsp+0x70]
 1018e1a:	call   QWORD PTR [rip+0xfffffffffffe8cc8]        # 0x1001ae8
 1018e20:	mov    r8,rax
 1018e23:	mov    rax,QWORD PTR [rdi+0x8]
 1018e27:	movsxd rcx,DWORD PTR [rax+0x4]
 1018e2b:	add    rcx,0x8
 1018e2f:	add    rcx,rdi
 1018e32:	mov    BYTE PTR [rsp+0x30],0x1
 1018e37:	mov    BYTE PTR [rsp+0x28],0x1
 1018e3c:	mov    DWORD PTR [rsp+0x20],ebp
 1018e40:	xor    r9d,r9d
 1018e43:	mov    edx,0x4000c484
 1018e48:	call   QWORD PTR [rbx+0x8]
 1018e4b:	mov    rsi,QWORD PTR [rsi+0x18]
 1018e4f:	test   rsi,rsi
 1018e52:	jne    0x1018db0
 1018e58:	lea    rcx,[rsp+0x70]
 1018e5d:	call   QWORD PTR [rip+0xfffffffffffe8c45]        # 0x1001aa8
 1018e63:	mov    al,0x1
 1018e65:	mov    rbx,QWORD PTR [rsp+0x88]
 1018e6d:	add    rsp,0x50
 1018e71:	pop    rdi
 1018e72:	pop    rsi
 1018e73:	pop    rbp
 1018e74:	ret    
 1018e75:	int3   
 1018e76:	int3   
 1018e77:	int3   
 1018e78:	int3   
 1018e79:	int3   
 1018e7a:	int3   
 1018e7b:	int3   
 1018e7c:	int3   
 1018e7d:	int3   
 1018e7e:	int3   
 1018e7f:	int3   
 1018e80:	rex push rbp
 1018e82:	push   rbx
 1018e83:	push   rsi
 1018e84:	push   rdi
 1018e85:	push   r12
 1018e87:	push   r13
 1018e89:	push   r14
 1018e8b:	push   r15
 1018e8d:	lea    rbp,[rsp-0x1f]
 1018e92:	sub    rsp,0x98
 1018e99:	mov    QWORD PTR [rbp-0x11],0xfffffffffffffffe
 1018ea1:	mov    r15,rcx
 1018ea4:	lea    rcx,[rbp+0x67]
 1018ea8:	call   QWORD PTR [rip+0xfffffffffffe8c12]        # 0x1001ac0
 1018eae:	nop
 1018eaf:	xor    r13d,r13d
 1018eb2:	mov    QWORD PTR [rbp+0x6f],r13
 1018eb6:	mov    r14,QWORD PTR [r15+0xe8]
 1018ebd:	test   r14,r14
 1018ec0:	je     0x1019072
 1018ec6:	data16 nop WORD PTR [rax+rax*1+0x0]
 1018ed0:	mov    r12,QWORD PTR [r14+0x18]
 1018ed4:	test   BYTE PTR [r14],0x1
 1018ed8:	je     0x1019066
 1018ede:	lea    rdx,[rbp+0x77]
 1018ee2:	mov    rcx,r14
 1018ee5:	call   0x1012e00
 1018eea:	nop
 1018eeb:	mov    rbx,QWORD PTR [r15]
 1018eee:	mov    rcx,rax
 1018ef1:	call   QWORD PTR [rip+0xfffffffffffe8bf1]        # 0x1001ae8
 1018ef7:	mov    BYTE PTR [rsp+0x38],0x0
 1018efc:	mov    BYTE PTR [rsp+0x30],0x1
 1018f01:	lea    rcx,[rbp-0x9]
 1018f05:	mov    QWORD PTR [rsp+0x28],rcx
 1018f0a:	mov    QWORD PTR [rsp+0x20],rax
 1018f0f:	mov    r9b,0x1
 1018f12:	lea    r8,[rip+0xfffffffffffebea7]        # 0x1004dc0
 1018f19:	lea    rdx,[rip+0xfffffffffffebeb8]        # 0x1004dd8
 1018f20:	mov    rcx,r15
 1018f23:	call   QWORD PTR [rbx+0x118]
 1018f29:	test   al,al
 1018f2b:	sete   bl
 1018f2e:	lea    rcx,[rbp+0x77]
 1018f32:	call   QWORD PTR [rip+0xfffffffffffe8b70]        # 0x1001aa8
 1018f38:	test   bl,bl
 1018f3a:	je     0x1019062
 1018f40:	lea    rdx,[rbp-0x19]
 1018f44:	mov    rcx,r14
 1018f47:	call   0x1012e50
 1018f4c:	mov    rsi,rax
 1018f4f:	lea    rdx,[rbp-0x21]
 1018f53:	mov    rcx,r14
 1018f56:	call   0x1012e50
 1018f5b:	mov    rdi,rax
 1018f5e:	lea    rdx,[rbp-0x29]
 1018f62:	mov    rcx,r14
 1018f65:	call   0x1012e50
 1018f6a:	mov    rbx,rax
 1018f6d:	mov    edx,0x8000c362
 1018f72:	lea    rcx,[rbp+0x7f]
 1018f76:	call   0x10132d0
 1018f7b:	nop
 1018f7c:	mov    rcx,rax
 1018f7f:	call   QWORD PTR [rip+0xfffffffffffe8b63]        # 0x1001ae8
 1018f85:	mov    rdx,rax
 1018f88:	mov    rcx,QWORD PTR [rsi]
 1018f8b:	mov    QWORD PTR [rsp+0x40],rcx
 1018f90:	mov    rax,QWORD PTR [r15+0x10]
 1018f94:	mov    QWORD PTR [rsp+0x38],rax
 1018f99:	mov    rax,QWORD PTR [rdi]
 1018f9c:	mov    QWORD PTR [rsp+0x30],rax
 1018fa1:	mov    rax,QWORD PTR [r15+0x10]
 1018fa5:	mov    QWORD PTR [rsp+0x28],rax
 1018faa:	mov    rax,QWORD PTR [rbx]
 1018fad:	mov    QWORD PTR [rsp+0x20],rax
 1018fb2:	mov    r9,QWORD PTR [r15+0x10]
 1018fb6:	mov    r8,QWORD PTR [r15+0x30]
 1018fba:	lea    rcx,[rbp+0x67]
 1018fbe:	call   QWORD PTR [rip+0xfffffffffffe8a7c]        # 0x1001a40
 1018fc4:	nop
 1018fc5:	lea    rcx,[rbp+0x7f]
 1018fc9:	call   QWORD PTR [rip+0xfffffffffffe8ad9]        # 0x1001aa8
 1018fcf:	nop
 1018fd0:	lea    rcx,[rbp-0x29]
 1018fd4:	call   QWORD PTR [rip+0xfffffffffffe8ace]        # 0x1001aa8
 1018fda:	nop
 1018fdb:	lea    rcx,[rbp-0x21]
 1018fdf:	call   QWORD PTR [rip+0xfffffffffffe8ac3]        # 0x1001aa8
 1018fe5:	nop
 1018fe6:	lea    rcx,[rbp-0x19]
 1018fea:	call   QWORD PTR [rip+0xfffffffffffe8ab8]        # 0x1001aa8
 1018ff0:	mov    rax,QWORD PTR [r15+0x8]
 1018ff4:	movsxd rcx,DWORD PTR [rax+0x4]
 1018ff8:	mov    rbx,QWORD PTR [rcx+r15*1+0x8]
 1018ffd:	lea    rcx,[rbp+0x67]
 1019001:	call   QWORD PTR [rip+0xfffffffffffe8ae1]        # 0x1001ae8
 1019007:	mov    r8,rax
 101900a:	mov    rax,QWORD PTR [r15+0x8]
 101900e:	movsxd rcx,DWORD PTR [rax+0x4]
 1019012:	add    rcx,0x8
 1019016:	add    rcx,r15
 1019019:	mov    BYTE PTR [rsp+0x30],0x1
 101901e:	mov    BYTE PTR [rsp+0x28],0x1
 1019023:	mov    DWORD PTR [rsp+0x20],0x2
 101902b:	xor    r9d,r9d
 101902e:	mov    edx,0x8000c362
 1019033:	call   QWORD PTR [rbx+0x8]
 1019036:	mov    rbx,QWORD PTR [rbp+0x6f]
 101903a:	mov    rax,QWORD PTR [r14+0x18]
 101903e:	test   rbx,rbx
 1019041:	jne    0x101904c
 1019043:	mov    QWORD PTR [r15+0xe8],rax
 101904a:	jmp    0x1019050
 101904c:	mov    QWORD PTR [rbx+0x18],rax
 1019050:	mov    rcx,r14
 1019053:	call   0x1012dc0
 1019058:	mov    rcx,r14
 101905b:	call   0x103f95a
 1019060:	jmp    0x1019066
 1019062:	mov    QWORD PTR [rbp+0x6f],r14
 1019066:	mov    r14,r12
 1019069:	test   r12,r12
 101906c:	jne    0x1018ed0
 1019072:	mov    r14,r13
 1019075:	mov    rbx,QWORD PTR [r15+0xe8]
 101907c:	test   rbx,rbx
 101907f:	je     0x10191f8
 1019085:	test   BYTE PTR [rbx],0x1
 1019088:	je     0x10191ec
 101908e:	mov    r14,QWORD PTR [rbx+0x18]
 1019092:	lea    rdx,[rbp+0x6f]
 1019096:	mov    rcx,rbx
 1019099:	call   0x1012e00
 101909e:	nop
 101909f:	mov    rdi,QWORD PTR [r15]
 10190a2:	mov    rcx,rax
 10190a5:	call   QWORD PTR [rip+0xfffffffffffe8a3d]        # 0x1001ae8
 10190ab:	mov    BYTE PTR [rsp+0x38],0x0
 10190b0:	mov    BYTE PTR [rsp+0x30],0x1
 10190b5:	lea    rcx,[rbp-0x9]
 10190b9:	mov    QWORD PTR [rsp+0x28],rcx
 10190be:	mov    QWORD PTR [rsp+0x20],rax
 10190c3:	mov    r9b,0x1
 10190c6:	lea    r8,[rip+0xfffffffffffebd23]        # 0x1004df0
 10190cd:	lea    rdx,[rip+0xfffffffffffebd3c]        # 0x1004e10
 10190d4:	mov    rcx,r15
 10190d7:	call   QWORD PTR [rdi+0x118]
 10190dd:	test   al,al
 10190df:	sete   dil
 10190e3:	lea    rcx,[rbp+0x6f]
 10190e7:	call   QWORD PTR [rip+0xfffffffffffe89bb]        # 0x1001aa8
 10190ed:	test   dil,dil
 10190f0:	je     0x10191e9
 10190f6:	lea    rdx,[rbp-0x19]
 10190fa:	mov    rcx,rbx
 10190fd:	call   0x1012e50
 1019102:	mov    rsi,rax
 1019105:	lea    rdx,[rbp+0x7f]
 1019109:	mov    rcx,rbx
 101910c:	call   0x1012e50
 1019111:	mov    rdi,rax
 1019114:	mov    edx,0x8000c363
 1019119:	lea    rcx,[rbp+0x77]
 101911d:	call   0x10132d0
 1019122:	nop
 1019123:	mov    rcx,rax
 1019126:	call   QWORD PTR [rip+0xfffffffffffe89bc]        # 0x1001ae8
 101912c:	mov    rdx,rax
 101912f:	mov    rcx,QWORD PTR [rsi]
 1019132:	mov    QWORD PTR [rsp+0x30],rcx
 1019137:	mov    rax,QWORD PTR [r15+0x10]
 101913b:	mov    QWORD PTR [rsp+0x28],rax
 1019140:	mov    rax,QWORD PTR [rdi]
 1019143:	mov    QWORD PTR [rsp+0x20],rax
 1019148:	mov    r9,QWORD PTR [r15+0x10]
 101914c:	mov    r8,QWORD PTR [r15+0x30]
 1019150:	lea    rcx,[rbp+0x67]
 1019154:	call   QWORD PTR [rip+0xfffffffffffe88e6]        # 0x1001a40
 101915a:	nop
 101915b:	lea    rcx,[rbp+0x77]
 101915f:	call   QWORD PTR [rip+0xfffffffffffe8943]        # 0x1001aa8
 1019165:	nop
 1019166:	lea    rcx,[rbp+0x7f]
 101916a:	call   QWORD PTR [rip+0xfffffffffffe8938]        # 0x1001aa8
 1019170:	nop
 1019171:	lea    rcx,[rbp-0x19]
 1019175:	call   QWORD PTR [rip+0xfffffffffffe892d]        # 0x1001aa8
 101917b:	mov    rax,QWORD PTR [r15+0x8]
 101917f:	movsxd rcx,DWORD PTR [rax+0x4]
 1019183:	mov    rdi,QWORD PTR [rcx+r15*1+0x8]
 1019188:	lea    rcx,[rbp+0x67]
 101918c:	call   QWORD PTR [rip+0xfffffffffffe8956]        # 0x1001ae8
 1019192:	mov    r8,rax
 1019195:	mov    rax,QWORD PTR [r15+0x8]
 1019199:	movsxd rcx,DWORD PTR [rax+0x4]
 101919d:	add    rcx,0x8
 10191a1:	add    rcx,r15
 10191a4:	mov    BYTE PTR [rsp+0x30],0x1
 10191a9:	mov    BYTE PTR [rsp+0x28],0x1
 10191ae:	mov    DWORD PTR [rsp+0x20],0x2
 10191b6:	xor    r9d,r9d
 10191b9:	mov    edx,0x8000c363
 10191be:	call   QWORD PTR [rdi+0x8]
 10191c1:	mov    rax,QWORD PTR [rbx+0x18]
 10191c5:	test   r13,r13
 10191c8:	jne    0x10191d3
 10191ca:	mov    QWORD PTR [r15+0xe8],rax
 10191d1:	jmp    0x10191d7
 10191d3:	mov    QWORD PTR [r13+0x18],rax
 10191d7:	mov    rcx,rbx
 10191da:	call   0x1012dc0
 10191df:	mov    rcx,rbx
 10191e2:	call   0x103f95a
 10191e7:	jmp    0x10191ec
 10191e9:	mov    r13,rbx
 10191ec:	mov    rbx,r14
 10191ef:	test   r14,r14
 10191f2:	jne    0x1019085
 10191f8:	cmp    QWORD PTR [r15+0xe8],0x0
 1019200:	setne  bl
 1019203:	lea    rcx,[rbp+0x67]
 1019207:	call   QWORD PTR [rip+0xfffffffffffe889b]        # 0x1001aa8
 101920d:	movzx  eax,bl
 1019210:	add    rsp,0x98
 1019217:	pop    r15
 1019219:	pop    r14
 101921b:	pop    r13
 101921d:	pop    r12
 101921f:	pop    rdi
 1019220:	pop    rsi
 1019221:	pop    rbx
 1019222:	pop    rbp
 1019223:	ret    
 1019224:	int3   
 1019225:	int3   
 1019226:	int3   
 1019227:	int3   
 1019228:	int3   
 1019229:	int3   
 101922a:	int3   
 101922b:	int3   
 101922c:	int3   
 101922d:	int3   
 101922e:	int3   
 101922f:	int3   
 1019230:	rex push rdi
 1019232:	sub    rsp,0x30
 1019236:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 101923f:	mov    QWORD PTR [rsp+0x48],rbx
 1019244:	mov    rdi,rcx
 1019247:	mov    rax,QWORD PTR [rcx]
 101924a:	mov    r9b,0x1
 101924d:	lea    r8,[rip+0xfffffffffffecb24]        # 0x1005d78
 1019254:	xor    edx,edx
 1019256:	call   QWORD PTR [rax+0x40]
 1019259:	test   rax,rax
 101925c:	je     0x10192b6
 101925e:	lea    rcx,[rsp+0x40]
 1019263:	call   QWORD PTR [rip+0xfffffffffffe8857]        # 0x1001ac0
 1019269:	nop
 101926a:	lea    r9,[rip+0xfffffffffffe8c97]        # 0x1001f08
 1019271:	lea    r8,[rip+0xfffffffffffec758]        # 0x10059d0
 1019278:	lea    rdx,[rip+0xfffffffffffecb19]        # 0x1005d98
 101927f:	lea    rcx,[rsp+0x40]
 1019284:	call   QWORD PTR [rip+0xfffffffffffe87b6]        # 0x1001a40
 101928a:	mov    rbx,QWORD PTR [rdi]
 101928d:	lea    rcx,[rsp+0x40]
 1019292:	call   QWORD PTR [rip+0xfffffffffffe8850]        # 0x1001ae8
 1019298:	mov    r8,rax
 101929b:	mov    r9b,0x1
 101929e:	xor    edx,edx
 10192a0:	mov    rcx,rdi
 10192a3:	call   QWORD PTR [rbx+0x50]
 10192a6:	test   rax,rax
 10192a9:	jne    0x10192ba
 10192ab:	lea    rcx,[rsp+0x40]
 10192b0:	call   QWORD PTR [rip+0xfffffffffffe87f2]        # 0x1001aa8
 10192b6:	xor    al,al
 10192b8:	jmp    0x1019317
 10192ba:	lea    r9,[rip+0xfffffffffffe8c47]        # 0x1001f08
 10192c1:	lea    r8,[rip+0xfffffffffffec708]        # 0x10059d0
 10192c8:	lea    rdx,[rip+0xfffffffffffecaf9]        # 0x1005dc8
 10192cf:	lea    rcx,[rsp+0x40]
 10192d4:	call   QWORD PTR [rip+0xfffffffffffe8766]        # 0x1001a40
 10192da:	mov    rbx,QWORD PTR [rdi]
 10192dd:	lea    rcx,[rsp+0x40]
 10192e2:	call   QWORD PTR [rip+0xfffffffffffe8800]        # 0x1001ae8
 10192e8:	mov    r8,rax
 10192eb:	mov    r9b,0x1
 10192ee:	xor    edx,edx
 10192f0:	mov    rcx,rdi
 10192f3:	call   QWORD PTR [rbx+0x50]
 10192f6:	test   rax,rax
 10192f9:	jne    0x101930a
 10192fb:	lea    rcx,[rsp+0x40]
 1019300:	call   QWORD PTR [rip+0xfffffffffffe87a2]        # 0x1001aa8
 1019306:	xor    al,al
 1019308:	jmp    0x1019317
 101930a:	lea    rcx,[rsp+0x40]
 101930f:	call   QWORD PTR [rip+0xfffffffffffe8793]        # 0x1001aa8
 1019315:	mov    al,0x1
 1019317:	mov    rbx,QWORD PTR [rsp+0x48]
 101931c:	add    rsp,0x30
 1019320:	pop    rdi
 1019321:	ret    
 1019322:	int3   
 1019323:	int3   
 1019324:	int3   
 1019325:	int3   
 1019326:	int3   
 1019327:	int3   
 1019328:	int3   
 1019329:	int3   
 101932a:	int3   
 101932b:	int3   
 101932c:	int3   
 101932d:	int3   
 101932e:	int3   
 101932f:	int3   
 1019330:	mov    QWORD PTR [rsp+0x8],rbx
 1019335:	push   rdi
 1019336:	sub    rsp,0x30
 101933a:	mov    rbx,rcx
 101933d:	call   0x10164c0
 1019342:	movzx  edi,al
 1019345:	test   al,al
 1019347:	jne    0x1019382
 1019349:	mov    rdx,QWORD PTR [rbx+0x8]
 101934d:	lea    rcx,[rbx+0x8]
 1019351:	xor    r9d,r9d
 1019354:	movsxd r8,DWORD PTR [rdx+0x4]
 1019358:	mov    edx,0xc000c3ed
 101935d:	mov    BYTE PTR [rsp+0x28],0x1
 1019362:	add    rcx,r8
 1019365:	xor    r8d,r8d
 1019368:	mov    BYTE PTR [rsp+0x20],0x1
 101936d:	mov    r10,QWORD PTR [rcx]
 1019370:	call   QWORD PTR [r10]
 1019373:	movzx  eax,dil
 1019377:	mov    rbx,QWORD PTR [rsp+0x40]
 101937c:	add    rsp,0x30
 1019380:	pop    rdi
 1019381:	ret    
 1019382:	mov    rax,QWORD PTR [rbx+0xd8]
 1019389:	cmp    BYTE PTR [rax+0xb9],0x0
 1019390:	jne    0x10193d5
 1019392:	mov    rcx,rbx
 1019395:	call   0x1018e80
 101939a:	test   al,al
 101939c:	jne    0x10193d5
 101939e:	mov    rcx,QWORD PTR [rbx+0x8]
 10193a2:	xor    r9d,r9d
 10193a5:	xor    r8d,r8d
 10193a8:	movsxd rdx,DWORD PTR [rcx+0x4]
 10193ac:	lea    rcx,[rbx+0x8]
 10193b0:	mov    BYTE PTR [rsp+0x28],0x1
 10193b5:	add    rcx,rdx
 10193b8:	mov    edx,0xc000c36f
 10193bd:	mov    BYTE PTR [rsp+0x20],0x1
 10193c2:	mov    r10,QWORD PTR [rcx]
 10193c5:	call   QWORD PTR [r10]
 10193c8:	xor    al,al
 10193ca:	mov    rbx,QWORD PTR [rsp+0x40]
 10193cf:	add    rsp,0x30
 10193d3:	pop    rdi
 10193d4:	ret    
 10193d5:	mov    al,0x1
 10193d7:	mov    rbx,QWORD PTR [rsp+0x40]
 10193dc:	add    rsp,0x30
 10193e0:	pop    rdi
 10193e1:	ret    
 10193e2:	int3   
 10193e3:	int3   
 10193e4:	int3   
 10193e5:	int3   
 10193e6:	int3   
 10193e7:	int3   
 10193e8:	int3   
 10193e9:	int3   
 10193ea:	int3   
 10193eb:	int3   
 10193ec:	int3   
 10193ed:	int3   
 10193ee:	int3   
 10193ef:	int3   
 10193f0:	rex push rbx
 10193f2:	sub    rsp,0x40
 10193f6:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
 10193ff:	mov    rbx,rcx
 1019402:	lea    rcx,[rsp+0x50]
 1019407:	call   QWORD PTR [rip+0xfffffffffffe86b3]        # 0x1001ac0
 101940d:	nop
 101940e:	mov    r8,QWORD PTR [rbx+0xd8]
 1019415:	lea    rax,[rip+0xfffffffffffe8b44]        # 0x1001f60
 101941c:	mov    QWORD PTR [rsp+0x20],rax
 1019421:	lea    r9,[rip+0x4a028]        # 0x1063450
 1019428:	mov    r8,QWORD PTR [r8+0x78]
 101942c:	lea    rdx,[rip+0xfffffffffffecbb5]        # 0x1005fe8
 1019433:	lea    rcx,[rsp+0x50]
 1019438:	call   QWORD PTR [rip+0xfffffffffffe8602]        # 0x1001a40
 101943e:	lea    rcx,[rsp+0x50]
 1019443:	call   QWORD PTR [rip+0xfffffffffffe869f]        # 0x1001ae8
 1019449:	mov    rcx,rax
 101944c:	call   0x1030aa0
 1019451:	movzx  ebx,al
 1019454:	lea    rcx,[rsp+0x50]
 1019459:	call   QWORD PTR [rip+0xfffffffffffe8649]        # 0x1001aa8
 101945f:	movzx  eax,bl
 1019462:	add    rsp,0x40
 1019466:	pop    rbx
 1019467:	ret    
 1019468:	int3   
 1019469:	int3   
 101946a:	int3   
 101946b:	int3   
 101946c:	int3   
 101946d:	int3   
 101946e:	int3   
 101946f:	int3   
 1019470:	rex push rbp
 1019472:	push   rbx
 1019473:	push   rsi
 1019474:	push   rdi
 1019475:	mov    rbp,rsp
 1019478:	sub    rsp,0x58
 101947c:	mov    QWORD PTR [rbp-0x10],0xfffffffffffffffe
 1019484:	mov    rsi,rcx
 1019487:	mov    DWORD PTR [rbp-0x18],0x0
 101948e:	lea    rcx,[rbp+0x28]
 1019492:	call   QWORD PTR [rip+0xfffffffffffe8628]        # 0x1001ac0
 1019498:	nop
 1019499:	mov    rax,QWORD PTR [rsi+0xd8]
 10194a0:	cmp    BYTE PTR [rax+0xb9],0x0
 10194a7:	jne    0x101956d
 10194ad:	mov    edx,0x4000c37a
 10194b2:	lea    rcx,[rbp+0x30]
 10194b6:	call   0x10132d0
 10194bb:	nop
 10194bc:	mov    rcx,rax
 10194bf:	call   QWORD PTR [rip+0xfffffffffffe8623]        # 0x1001ae8
 10194c5:	mov    rdx,rax
 10194c8:	mov    r8d,DWORD PTR [rsi+0x24]
 10194cc:	lea    rcx,[rbp+0x28]
 10194d0:	call   QWORD PTR [rip+0xfffffffffffe856a]        # 0x1001a40
 10194d6:	nop
 10194d7:	lea    rcx,[rbp+0x30]
 10194db:	call   QWORD PTR [rip+0xfffffffffffe85c7]        # 0x1001aa8
 10194e1:	lea    rcx,[rbp+0x28]
 10194e5:	call   QWORD PTR [rip+0xfffffffffffe85fd]        # 0x1001ae8
 10194eb:	mov    rdx,rax
 10194ee:	lea    rcx,[rbp+0x30]
 10194f2:	call   0x10353c0
 10194f7:	nop
 10194f8:	mov    rdx,rax
 10194fb:	lea    rcx,[rbp+0x28]
 10194ff:	call   QWORD PTR [rip+0xfffffffffffe859b]        # 0x1001aa0
 1019505:	nop
 1019506:	lea    rcx,[rbp+0x30]
 101950a:	call   QWORD PTR [rip+0xfffffffffffe8598]        # 0x1001aa8
 1019510:	cmp    DWORD PTR [rsi+0x20],0x32
 1019514:	jne    0x1019527
 1019516:	lea    rdx,[rip+0xfffffffffffecb1b]        # 0x1006038
 101951d:	lea    rcx,[rbp+0x28]
 1019521:	call   QWORD PTR [rip+0xfffffffffffe8569]        # 0x1001a90
 1019527:	mov    rax,QWORD PTR [rsi+0x8]
 101952b:	movsxd rcx,DWORD PTR [rax+0x4]
 101952f:	mov    rbx,QWORD PTR [rcx+rsi*1+0x8]
 1019534:	lea    rcx,[rbp+0x28]
 1019538:	call   QWORD PTR [rip+0xfffffffffffe85aa]        # 0x1001ae8
 101953e:	mov    r8,rax
 1019541:	mov    rax,QWORD PTR [rsi+0x8]
 1019545:	movsxd rcx,DWORD PTR [rax+0x4]
 1019549:	add    rcx,0x8
 101954d:	add    rcx,rsi
 1019550:	mov    BYTE PTR [rsp+0x30],0x1
 1019555:	mov    BYTE PTR [rsp+0x28],0x1
 101955a:	mov    DWORD PTR [rsp+0x20],0x0
 1019562:	xor    r9d,r9d
 1019565:	mov    edx,0x4000c37a
 101956a:	call   QWORD PTR [rbx+0x8]
 101956d:	cmp    BYTE PTR [rsi+0x28],0x0
 1019571:	je     0x1019589
 1019573:	mov    edx,0x4000c37c
 1019578:	lea    rcx,[rbp+0x40]
 101957c:	call   0x10132d0
 1019581:	nop
 1019582:	mov    edi,0x1
 1019587:	jmp    0x101959d
 1019589:	mov    edx,0x4000c37d
 101958e:	lea    rcx,[rbp+0x38]
 1019592:	call   0x10132d0
 1019597:	nop
 1019598:	mov    edi,0x2
 101959d:	mov    DWORD PTR [rbp-0x18],edi
 10195a0:	mov    rbx,QWORD PTR [rax]
 10195a3:	mov    edx,0x4000c37b
 10195a8:	lea    rcx,[rbp+0x30]
 10195ac:	call   0x10132d0
 10195b1:	nop
 10195b2:	mov    rcx,rax
 10195b5:	call   QWORD PTR [rip+0xfffffffffffe852d]        # 0x1001ae8
 10195bb:	mov    rdx,rax
 10195be:	mov    r9,rbx
 10195c1:	mov    r8,QWORD PTR [rsi+0x10]
 10195c5:	lea    rcx,[rbp+0x28]
 10195c9:	call   QWORD PTR [rip+0xfffffffffffe8471]        # 0x1001a40
 10195cf:	nop
 10195d0:	lea    rcx,[rbp+0x30]
 10195d4:	call   QWORD PTR [rip+0xfffffffffffe84ce]        # 0x1001aa8
 10195da:	nop
 10195db:	test   dil,0x2
 10195df:	je     0x10195f2
 10195e1:	and    edi,0xfffffffd
 10195e4:	mov    DWORD PTR [rbp-0x18],edi
 10195e7:	lea    rcx,[rbp+0x38]
 10195eb:	call   QWORD PTR [rip+0xfffffffffffe84b7]        # 0x1001aa8
 10195f1:	nop
 10195f2:	test   dil,0x1
 10195f6:	je     0x1019608
 10195f8:	and    edi,0xfffffffe
 10195fb:	mov    DWORD PTR [rbp-0x18],edi
 10195fe:	lea    rcx,[rbp+0x40]
 1019602:	call   QWORD PTR [rip+0xfffffffffffe84a0]        # 0x1001aa8
 1019608:	mov    rax,QWORD PTR [rsi+0x8]
 101960c:	movsxd rcx,DWORD PTR [rax+0x4]
 1019610:	mov    rbx,QWORD PTR [rcx+rsi*1+0x8]
 1019615:	lea    rcx,[rbp+0x28]
 1019619:	call   QWORD PTR [rip+0xfffffffffffe84c9]        # 0x1001ae8
 101961f:	mov    r8,rax
 1019622:	mov    rax,QWORD PTR [rsi+0x8]
 1019626:	movsxd rcx,DWORD PTR [rax+0x4]
 101962a:	add    rsi,0x8
 101962e:	add    rcx,rsi
 1019631:	mov    BYTE PTR [rsp+0x30],0x1
 1019636:	mov    BYTE PTR [rsp+0x28],0x1
 101963b:	mov    DWORD PTR [rsp+0x20],0x0
 1019643:	xor    r9d,r9d
 1019646:	mov    edx,0x4000c37b
 101964b:	call   QWORD PTR [rbx+0x8]
 101964e:	nop
 101964f:	lea    rcx,[rbp+0x28]
 1019653:	call   QWORD PTR [rip+0xfffffffffffe844f]        # 0x1001aa8
 1019659:	add    rsp,0x58
 101965d:	pop    rdi
 101965e:	pop    rsi
 101965f:	pop    rbx
 1019660:	pop    rbp
 1019661:	ret    
 1019662:	int3   
 1019663:	int3   
 1019664:	int3   
 1019665:	int3   
 1019666:	int3   
 1019667:	int3   
 1019668:	int3   
 1019669:	int3   
 101966a:	int3   
 101966b:	int3   
 101966c:	int3   
 101966d:	int3   
 101966e:	int3   
 101966f:	int3   
 1019670:	mov    QWORD PTR [rsp+0x18],rbx
 1019675:	mov    QWORD PTR [rsp+0x20],rsi
 101967a:	push   rdi
 101967b:	sub    rsp,0x30
 101967f:	mov    rdi,r9
 1019682:	mov    rsi,r8
 1019685:	mov    rbx,rcx
 1019688:	mov    QWORD PTR [rsp+0x48],rdx
 101968d:	test   rdx,rdx
 1019690:	je     0x101988a
 1019696:	mov    QWORD PTR [rsp+0x40],rbp
 101969b:	lea    rbp,[rip+0xfffffffffffe695e]        # 0x1000000
 10196a2:	mov    rcx,QWORD PTR [rbx+0xe0]
 10196a9:	call   0x100fce0
 10196ae:	mov    ecx,DWORD PTR [rax]
 10196b0:	dec    ecx
 10196b2:	cmp    ecx,0x8
 10196b5:	ja     0x101985d
 10196bb:	movsxd rax,ecx
 10196be:	mov    ecx,DWORD PTR [rbp+rax*4+0x1989c]
 10196c5:	add    rcx,rbp
 10196c8:	jmp    rcx
 10196ca:	mov    rdx,QWORD PTR [rsp+0x48]
 10196cf:	mov    rcx,QWORD PTR [rbx+0xe0]
 10196d6:	call   0x100fce0
 10196db:	cmp    DWORD PTR [rax+0x4],0x0
 10196df:	jne    0x101985d
 10196e5:	mov    rdx,QWORD PTR [rsp+0x48]
 10196ea:	mov    rcx,rbx
 10196ed:	call   0x101db20
 10196f2:	jmp    0x101985d
 10196f7:	mov    rdx,QWORD PTR [rsp+0x48]
 10196fc:	mov    rcx,QWORD PTR [rbx+0xe0]
 1019703:	call   0x100fce0
 1019708:	cmp    DWORD PTR [rax+0x4],0x0
 101970c:	jne    0x101985d
 1019712:	mov    rdx,QWORD PTR [rsp+0x48]
 1019717:	mov    rcx,rbx
 101971a:	call   0x101c6a0
 101971f:	jmp    0x101985d
 1019724:	mov    rdx,QWORD PTR [rsp+0x48]
 1019729:	mov    rcx,QWORD PTR [rbx+0xe0]
 1019730:	call   0x100fce0
 1019735:	cmp    DWORD PTR [rax+0x4],0x0
 1019739:	jne    0x101985d
 101973f:	mov    rdx,QWORD PTR [rsp+0x48]
 1019744:	mov    rcx,rbx
 1019747:	call   0x101d590
 101974c:	jmp    0x101985d
 1019751:	mov    rdx,QWORD PTR [rsp+0x48]
 1019756:	mov    rcx,QWORD PTR [rbx+0xe0]
 101975d:	call   0x100fce0
 1019762:	cmp    DWORD PTR [rax+0x4],0x0
 1019766:	jne    0x101985d
 101976c:	mov    rdx,QWORD PTR [rsp+0x48]
 1019771:	mov    rcx,rbx
 1019774:	call   0x101cae0
 1019779:	jmp    0x101985d
 101977e:	mov    rdx,QWORD PTR [rsp+0x48]
 1019783:	mov    rcx,QWORD PTR [rbx+0xe0]
 101978a:	call   0x100fce0
 101978f:	cmp    DWORD PTR [rax+0x4],0x0
 1019793:	jne    0x101985d
 1019799:	lea    rdx,[rip+0xfffffffffffeb2b0]        # 0x1004a50
 10197a0:	mov    rcx,rbx
 10197a3:	call   0x101b510
 10197a8:	jmp    0x101985d
 10197ad:	mov    rdx,QWORD PTR [rsp+0x48]
 10197b2:	mov    rcx,QWORD PTR [rbx+0xe0]
 10197b9:	call   0x100fce0
 10197be:	cmp    DWORD PTR [rax+0x4],0x0
 10197c2:	jne    0x101985d
 10197c8:	mov    rdx,QWORD PTR [rsp+0x48]
 10197cd:	mov    rcx,QWORD PTR [rbx+0xe0]
 10197d4:	call   0x100fce0
 10197d9:	lea    rcx,[rax+0x20]
 10197dd:	call   QWORD PTR [rip+0xfffffffffffe8305]        # 0x1001ae8
 10197e3:	xor    edx,edx
 10197e5:	mov    rcx,rbx
 10197e8:	mov    r8,rax
 10197eb:	call   0x101aa80
 10197f0:	jmp    0x101985d
 10197f2:	mov    rax,QWORD PTR [rbx+0x8]
 10197f6:	xor    r9d,r9d
 10197f9:	xor    r8d,r8d
 10197fc:	movsxd rcx,DWORD PTR [rax+0x4]
 1019800:	mov    edx,0x4000c428
 1019805:	mov    BYTE PTR [rsp+0x28],0x1
 101980a:	add    rcx,0x8
 101980e:	mov    BYTE PTR [rsp+0x20],0x1
 1019813:	add    rcx,rbx
 1019816:	mov    rax,QWORD PTR [rcx]
 1019819:	call   QWORD PTR [rax]
 101981b:	mov    rcx,rbx
 101981e:	call   0x101a890
 1019823:	mov    BYTE PTR [rsi],al
 1019825:	test   al,al
 1019827:	je     0x101985d
 1019829:	mov    rdx,QWORD PTR [rsp+0x48]
 101982e:	mov    rcx,QWORD PTR [rbx+0xe0]
 1019835:	call   0x100fce0
 101983a:	mov    ecx,DWORD PTR [rax+0xc]
 101983d:	mov    DWORD PTR [rdi],ecx
 101983f:	jmp    0x101985d
 1019841:	mov    rdx,QWORD PTR [rsp+0x48]
 1019846:	mov    rcx,rbx
 1019849:	call   0x101b780
 101984e:	jmp    0x101985d
 1019850:	mov    rdx,QWORD PTR [rsp+0x48]
 1019855:	mov    rcx,rbx
 1019858:	call   0x101bed0
 101985d:	mov    rax,QWORD PTR [rsp+0x48]
 1019862:	mov    rcx,QWORD PTR [rbx+0xe0]
 1019869:	lea    rdx,[rsp+0x48]
 101986e:	mov    QWORD PTR [rbx+0x48],rax
 1019872:	call   0x100fd00
 1019877:	mov    rdx,QWORD PTR [rsp+0x48]
 101987c:	test   rdx,rdx
 101987f:	jne    0x10196a2
 1019885:	mov    rbp,QWORD PTR [rsp+0x40]
 101988a:	mov    rbx,QWORD PTR [rsp+0x50]
 101988f:	mov    rsi,QWORD PTR [rsp+0x58]
 1019894:	mov    al,0x1
 1019896:	add    rsp,0x30
 101989a:	pop    rdi
 101989b:	ret    
 101989c:	rex.B cwde 
 101989e:	add    DWORD PTR [rax],eax
 10198a0:	repnz xchg edi,eax
 10198a2:	add    DWORD PTR [rax],eax
 10198a4:	push   rax
 10198a5:	cwde   
 10198a6:	add    DWORD PTR [rax],eax
 10198a8:	jle    0x1019841
 10198aa:	add    DWORD PTR [rax],eax
 10198ac:	lods   eax,DWORD PTR ds:[rsi]
 10198ad:	xchg   edi,eax
 10198ae:	add    DWORD PTR [rax],eax
 10198b0:	not    DWORD PTR [rsi-0x68dbffff]
 10198b6:	add    DWORD PTR [rax],eax
 10198b8:	push   rcx
 10198b9:	xchg   edi,eax
 10198ba:	add    DWORD PTR [rax],eax
 10198bc:	retf   0x196
 10198bf:	add    ah,cl
 10198c1:	int3   
 10198c2:	int3   
 10198c3:	int3   
 10198c4:	int3   
 10198c5:	int3   
 10198c6:	int3   
 10198c7:	int3   
 10198c8:	int3   
 10198c9:	int3   
 10198ca:	int3   
 10198cb:	int3   
 10198cc:	int3   
 10198cd:	int3   
 10198ce:	int3   
 10198cf:	int3   
 10198d0:	rex push rbp
 10198d2:	push   rsi
 10198d3:	push   rdi
 10198d4:	push   r12
 10198d6:	push   r13
 10198d8:	push   r14
 10198da:	push   r15
 10198dc:	lea    rbp,[rsp-0xfd0]
 10198e4:	mov    eax,0x10d0
 10198e9:	call   0x1040290
 10198ee:	sub    rsp,rax
 10198f1:	mov    QWORD PTR [rbp-0x68],0xfffffffffffffffe
 10198f9:	mov    QWORD PTR [rsp+0x1120],rbx
 1019901:	mov    rax,QWORD PTR [rip+0x49f68]        # 0x1063870
 1019908:	xor    rax,rsp
 101990b:	mov    QWORD PTR [rbp+0xfc0],rax
 1019912:	mov    rdi,rdx
 1019915:	mov    rbx,rcx
 1019918:	xor    r14d,r14d
 101991b:	lea    rcx,[rsp+0x60]
 1019920:	call   QWORD PTR [rip+0xfffffffffffe819a]        # 0x1001ac0
 1019926:	nop
 1019927:	lea    rcx,[rsp+0x58]
 101992c:	call   QWORD PTR [rip+0xfffffffffffe818e]        # 0x1001ac0
 1019932:	nop
 1019933:	xor    eax,eax
 1019935:	mov    QWORD PTR [rbp-0x60],rax
 1019939:	mov    QWORD PTR [rbp-0x58],rax
 101993d:	mov    QWORD PTR [rbp-0x50],rax
 1019941:	mov    QWORD PTR [rbp-0x48],rax
 1019945:	xor    edx,edx
 1019947:	mov    r8d,0x800
 101994d:	lea    rcx,[rbp-0x40]
 1019951:	call   0x104026c
 1019956:	lea    rdx,[rip+0xfffffffffffe84b3]        # 0x1001e10
 101995d:	lea    rcx,[rsp+0x48]
 1019962:	call   QWORD PTR [rip+0xfffffffffffe8148]        # 0x1001ab0
 1019968:	nop
 1019969:	mov    rdx,rdi
 101996c:	lea    rcx,[rip+0xfffffffffffe849d]        # 0x1001e10
 1019973:	call   QWORD PTR [rip+0xfffffffffffe7d57]        # 0x10016d0
 1019979:	test   eax,eax
 101997b:	je     0x10199e4
 101997d:	lea    rdx,[rip+0xfffffffffffeba0c]        # 0x1005390
 1019984:	lea    rcx,[rbp-0x70]
 1019988:	call   QWORD PTR [rip+0xfffffffffffe8122]        # 0x1001ab0
 101998e:	nop
 101998f:	mov    r8,rdi
 1019992:	mov    rdx,rax
 1019995:	lea    rcx,[rsp+0x50]
 101999a:	call   0x100af10
 101999f:	nop
 10199a0:	lea    r8,[rip+0xfffffffffffeb9e5]        # 0x100538c
 10199a7:	mov    rdx,rax
 10199aa:	lea    rcx,[rbp-0x80]
 10199ae:	call   0x100af10
 10199b3:	nop
 10199b4:	mov    rdx,rax
 10199b7:	lea    rcx,[rsp+0x48]
 10199bc:	call   QWORD PTR [rip+0xfffffffffffe80de]        # 0x1001aa0
 10199c2:	nop
 10199c3:	lea    rcx,[rbp-0x80]
 10199c7:	call   QWORD PTR [rip+0xfffffffffffe80db]        # 0x1001aa8
 10199cd:	nop
 10199ce:	lea    rcx,[rsp+0x50]
 10199d3:	call   QWORD PTR [rip+0xfffffffffffe80cf]        # 0x1001aa8
 10199d9:	nop
 10199da:	lea    rcx,[rbp-0x70]
 10199de:	call   QWORD PTR [rip+0xfffffffffffe80c4]        # 0x1001aa8
 10199e4:	lea    rcx,[rbx+0x10]
 10199e8:	call   QWORD PTR [rip+0xfffffffffffe80fa]        # 0x1001ae8
 10199ee:	or     rdi,0xffffffffffffffff
 10199f2:	inc    rdi
 10199f5:	cmp    WORD PTR [rax+rdi*2],0x0
 10199fa:	jne    0x10199f2
 10199fc:	lea    rcx,[rbx+0x10]
 1019a00:	call   QWORD PTR [rip+0xfffffffffffe80e2]        # 0x1001ae8
 1019a06:	mov    r8,rax
 1019a09:	mov    r9,rdi
 1019a0c:	mov    edx,0x10
 1019a11:	lea    rcx,[rbp-0x60]
 1019a15:	call   QWORD PTR [rip+0xfffffffffffe7c8d]        # 0x10016a8
 1019a1b:	lea    rcx,[rbp-0x60]
 1019a1f:	call   0x10406de
 1019a24:	mov    r15,rax
 1019a27:	test   rax,rax
 1019a2a:	jne    0x1019a80
 1019a2c:	mov    rax,QWORD PTR [rbx+0x8]
 1019a30:	movsxd rcx,DWORD PTR [rax+0x4]
 1019a34:	mov    rdi,QWORD PTR [rcx+rbx*1+0x8]
 1019a39:	call   QWORD PTR [rip+0xfffffffffffe7b11]        # 0x1001550
 1019a3f:	mov    edx,eax
 1019a41:	mov    rax,QWORD PTR [rbx+0x8]
 1019a45:	movsxd rcx,DWORD PTR [rax+0x4]
 1019a49:	add    rcx,0x8
 1019a4d:	add    rcx,rbx
 1019a50:	mov    BYTE PTR [rsp+0x28],0x1
 1019a55:	mov    BYTE PTR [rsp+0x20],0x1
 1019a5a:	xor    r9d,r9d
 1019a5d:	xor    r8d,r8d
 1019a60:	call   QWORD PTR [rdi]
 1019a62:	nop
 1019a63:	lea    rcx,[rsp+0x48]
 1019a68:	call   QWORD PTR [rip+0xfffffffffffe803a]        # 0x1001aa8
 1019a6e:	nop
 1019a6f:	lea    rcx,[rsp+0x58]
 1019a74:	call   QWORD PTR [rip+0xfffffffffffe802e]        # 0x1001aa8
 1019a7a:	nop
 1019a7b:	jmp    0x101a138
 1019a80:	mov    BYTE PTR [rsp+0x40],0x0
 1019a85:	mov    edx,0x4
 1019a8a:	mov    rcx,rax
 1019a8d:	call   0x10406f6
 1019a92:	mov    r13,rax
 1019a95:	test   rax,rax
 1019a98:	jne    0x1019af6
 1019a9a:	mov    rax,QWORD PTR [rbx+0x8]
 1019a9e:	movsxd rcx,DWORD PTR [rax+0x4]
 1019aa2:	mov    rdi,QWORD PTR [rcx+rbx*1+0x8]
 1019aa7:	call   QWORD PTR [rip+0xfffffffffffe7aa3]        # 0x1001550
 1019aad:	mov    edx,eax
 1019aaf:	mov    rax,QWORD PTR [rbx+0x8]
 1019ab3:	movsxd rcx,DWORD PTR [rax+0x4]
 1019ab7:	add    rcx,0x8
 1019abb:	add    rcx,rbx
 1019abe:	mov    BYTE PTR [rsp+0x28],0x1
 1019ac3:	mov    BYTE PTR [rsp+0x20],0x1
 1019ac8:	xor    r9d,r9d
 1019acb:	xor    r8d,r8d
 1019ace:	call   QWORD PTR [rdi]
 1019ad0:	mov    rcx,r15
 1019ad3:	call   0x10406ea
 1019ad8:	nop
 1019ad9:	lea    rcx,[rsp+0x48]
 1019ade:	call   QWORD PTR [rip+0xfffffffffffe7fc4]        # 0x1001aa8
 1019ae4:	nop
 1019ae5:	lea    rcx,[rsp+0x58]
 1019aea:	call   QWORD PTR [rip+0xfffffffffffe7fb8]        # 0x1001aa8
 1019af0:	nop
 1019af1:	jmp    0x101a138
 1019af6:	xor    edi,edi
 1019af8:	mov    r12d,edi
 1019afb:	xor    edx,edx
 1019afd:	lea    rax,[rsp+0x68]
 1019b02:	mov    QWORD PTR [rsp+0x20],rax
 1019b07:	mov    DWORD PTR [rsp+0x68],0x400
 1019b0f:	lea    r9,[rbp-0x40]
 1019b13:	lea    r8,[rbp-0x78]
 1019b17:	mov    rcx,r13
 1019b1a:	call   0x1040702
 1019b1f:	test   eax,eax
 1019b21:	jne    0x1019c18
 1019b27:	lea    rdx,[rbp-0x40]
 1019b2b:	mov    rcx,r15
 1019b2e:	call   0x104071a
 1019b33:	mov    r14,rax
 1019b36:	test   rax,rax
 1019b39:	je     0x1019c08
 1019b3f:	mov    QWORD PTR [rsp+0x38],rdi
 1019b44:	mov    DWORD PTR [rsp+0x30],0x400
 1019b4c:	lea    rax,[rbp+0x7c0]
 1019b53:	mov    QWORD PTR [rsp+0x28],rax
 1019b58:	mov    DWORD PTR [rsp+0x20],edi
 1019b5c:	xor    r9d,r9d
 1019b5f:	xor    edx,edx
 1019b61:	mov    r8d,0x100002d
 1019b67:	mov    rcx,r14
 1019b6a:	call   0x1040732
 1019b6f:	mov    edi,eax
 1019b71:	lea    rdx,[rbp-0x40]
 1019b75:	lea    rcx,[rsp+0x58]
 1019b7a:	call   QWORD PTR [rip+0xfffffffffffe7f18]        # 0x1001a98
 1019b80:	test   edi,edi
 1019b82:	jne    0x1019bfe
 1019b84:	lea    rsi,[rip+0xfffffffffffeb80d]        # 0x1005398
 1019b8b:	lea    rdi,[rbp+0x7c0]
 1019b92:	mov    ecx,0xb
 1019b97:	repz cmps WORD PTR ds:[rsi],WORD PTR es:[rdi]
 1019b9a:	jne    0x1019bfe
 1019b9c:	lea    rdx,[rip+0xfffffffffffe826d]        # 0x1001e10
 1019ba3:	lea    rcx,[rsp+0x48]
 1019ba8:	call   QWORD PTR [rip+0xfffffffffffe7e52]        # 0x1001a00
 1019bae:	test   eax,eax
 1019bb0:	jne    0x1019bc7
 1019bb2:	lea    rsi,[rip+0xfffffffffffeb7df]        # 0x1005398
 1019bb9:	lea    rdi,[rbp-0x40]
 1019bbd:	mov    ecx,0xb
 1019bc2:	repz cmps WORD PTR ds:[rsi],WORD PTR es:[rdi]
 1019bc5:	je     0x1019c13
 1019bc7:	lea    rdx,[rip+0xfffffffffffe8242]        # 0x1001e10
 1019bce:	lea    rcx,[rsp+0x48]
 1019bd3:	call   QWORD PTR [rip+0xfffffffffffe7e27]        # 0x1001a00
 1019bd9:	test   eax,eax
 1019bdb:	je     0x1019bfe
 1019bdd:	lea    rcx,[rsp+0x48]
 1019be2:	call   QWORD PTR [rip+0xfffffffffffe7f00]        # 0x1001ae8
 1019be8:	mov    rdx,rax
 1019beb:	xor    r8d,r8d
 1019bee:	lea    rcx,[rsp+0x58]
 1019bf3:	call   QWORD PTR [rip+0xfffffffffffe7e5f]        # 0x1001a58
 1019bf9:	cmp    eax,0xffffffff
 1019bfc:	jne    0x1019c13
 1019bfe:	mov    rcx,r14
 1019c01:	call   0x1040726
 1019c06:	xor    edi,edi
 1019c08:	inc    r12d
 1019c0b:	mov    edx,r12d
 1019c0e:	jmp    0x1019afd
 1019c13:	mov    BYTE PTR [rsp+0x40],0x1
 1019c18:	mov    rcx,r13
 1019c1b:	call   0x104070e
 1019c20:	cmp    BYTE PTR [rsp+0x40],0x0
 1019c25:	jne    0x1019c4d
 1019c27:	mov    rcx,r15
 1019c2a:	call   0x10406ea
 1019c2f:	nop
 1019c30:	lea    rcx,[rsp+0x48]
 1019c35:	call   QWORD PTR [rip+0xfffffffffffe7e6d]        # 0x1001aa8
 1019c3b:	nop
 1019c3c:	lea    rcx,[rsp+0x58]
 1019c41:	call   QWORD PTR [rip+0xfffffffffffe7e61]        # 0x1001aa8
 1019c47:	nop
 1019c48:	jmp    0x101a138
 1019c4d:	lea    rcx,[rsp+0x70]
 1019c52:	call   QWORD PTR [rip+0xfffffffffffe7e68]        # 0x1001ac0
 1019c58:	nop
 1019c59:	mov    edx,0x4000c4b3
 1019c5e:	lea    rcx,[rbp-0x70]
 1019c62:	call   0x10132d0
 1019c67:	nop
 1019c68:	mov    rcx,rax
 1019c6b:	call   QWORD PTR [rip+0xfffffffffffe7e77]        # 0x1001ae8
 1019c71:	mov    rdx,rax
 1019c74:	mov    r8,QWORD PTR [rsp+0x58]
 1019c79:	lea    rcx,[rsp+0x70]
 1019c7e:	call   QWORD PTR [rip+0xfffffffffffe7dbc]        # 0x1001a40
 1019c84:	nop
 1019c85:	lea    rcx,[rbp-0x70]
 1019c89:	call   QWORD PTR [rip+0xfffffffffffe7e19]        # 0x1001aa8
 1019c8f:	mov    rax,QWORD PTR [rbx+0x8]
 1019c93:	movsxd rcx,DWORD PTR [rax+0x4]
 1019c97:	mov    rdi,QWORD PTR [rcx+rbx*1+0x8]
 1019c9c:	lea    rcx,[rsp+0x70]
 1019ca1:	call   QWORD PTR [rip+0xfffffffffffe7e41]        # 0x1001ae8
 1019ca7:	mov    r8,rax
 1019caa:	mov    rax,QWORD PTR [rbx+0x8]
 1019cae:	movsxd rcx,DWORD PTR [rax+0x4]
 1019cb2:	add    rcx,0x8
 1019cb6:	add    rcx,rbx
 1019cb9:	mov    BYTE PTR [rsp+0x30],0x1
 1019cbe:	mov    BYTE PTR [rsp+0x28],0x1
 1019cc3:	xor    r13d,r13d
 1019cc6:	mov    DWORD PTR [rsp+0x20],r13d
 1019ccb:	xor    r9d,r9d
 1019cce:	mov    edx,0x4000c4b3
 1019cd3:	call   QWORD PTR [rdi+0x8]
 1019cd6:	lea    rdx,[rsp+0x44]
 1019cdb:	mov    QWORD PTR [rsp+0x38],rdx
 1019ce0:	mov    DWORD PTR [rsp+0x30],r13d
 1019ce5:	mov    QWORD PTR [rsp+0x28],r13
 1019cea:	mov    DWORD PTR [rsp+0x20],r13d
 1019cef:	xor    r9d,r9d
 1019cf2:	xor    edx,edx
 1019cf4:	mov    r8d,0x10000a9
 1019cfa:	mov    rcx,r14
 1019cfd:	call   0x1040732
 1019d02:	mov    edi,DWORD PTR [rsp+0x44]
 1019d06:	mov    edx,edi
 1019d08:	lea    ecx,[r13+0x40]
 1019d0c:	call   QWORD PTR [rip+0xfffffffffffe7596]        # 0x10012a8
 1019d12:	mov    r12,rax
 1019d15:	test   rax,rax
 1019d18:	jne    0x1019d8a
 1019d1a:	mov    rax,QWORD PTR [rbx+0x8]
 1019d1e:	movsxd rcx,DWORD PTR [rax+0x4]
 1019d22:	mov    rdi,QWORD PTR [rcx+rbx*1+0x8]
 1019d27:	call   QWORD PTR [rip+0xfffffffffffe7823]        # 0x1001550
 1019d2d:	mov    edx,eax
 1019d2f:	mov    rax,QWORD PTR [rbx+0x8]
 1019d33:	movsxd rcx,DWORD PTR [rax+0x4]
 1019d37:	add    rcx,0x8
 1019d3b:	add    rcx,rbx
 1019d3e:	mov    BYTE PTR [rsp+0x28],0x1
 1019d43:	mov    BYTE PTR [rsp+0x20],0x1
 1019d48:	xor    r9d,r9d
 1019d4b:	xor    r8d,r8d
 1019d4e:	call   QWORD PTR [rdi]
 1019d50:	mov    rcx,r14
 1019d53:	call   0x1040726
 1019d58:	mov    rcx,r15
 1019d5b:	call   0x10406ea
 1019d60:	nop
 1019d61:	lea    rcx,[rsp+0x70]
 1019d66:	call   QWORD PTR [rip+0xfffffffffffe7d3c]        # 0x1001aa8
 1019d6c:	nop
 1019d6d:	lea    rcx,[rsp+0x48]
 1019d72:	call   QWORD PTR [rip+0xfffffffffffe7d30]        # 0x1001aa8
 1019d78:	nop
 1019d79:	lea    rcx,[rsp+0x58]
 1019d7e:	call   QWORD PTR [rip+0xfffffffffffe7d24]        # 0x1001aa8
 1019d84:	nop
 1019d85:	jmp    0x101a138
 1019d8a:	mov    DWORD PTR [rsp+0x44],r13d
 1019d8f:	lea    rax,[rsp+0x44]
 1019d94:	mov    QWORD PTR [rsp+0x38],rax
 1019d99:	mov    DWORD PTR [rsp+0x30],edi
 1019d9d:	mov    QWORD PTR [rsp+0x28],r12
 1019da2:	mov    DWORD PTR [rsp+0x20],r13d
 1019da7:	xor    r9d,r9d
 1019daa:	xor    edx,edx
 1019dac:	mov    r8d,0x10000a9
 1019db2:	mov    rcx,r14
 1019db5:	call   0x1040732
 1019dba:	test   eax,eax
 1019dbc:	jne    0x101a0c4
 1019dc2:	cmp    DWORD PTR [rsp+0x44],0x2
 1019dc7:	jb     0x101a0c4
 1019dcd:	mov    rcx,r14
 1019dd0:	call   0x1040726
 1019dd5:	mov    rcx,r15
 1019dd8:	call   0x10406ea
 1019ddd:	lea    rcx,[rsp+0x78]
 1019de2:	call   QWORD PTR [rip+0xfffffffffffe7cd8]        # 0x1001ac0
 1019de8:	nop
 1019de9:	mov    esi,r13d
 1019dec:	cmp    DWORD PTR [rsp+0x44],r13d
 1019df1:	jbe    0x1019e99
 1019df7:	mov    rcx,r13
 1019dfa:	mov    edi,0x1
 1019dff:	nop
 1019e00:	lea    rdx,[rcx+r12*1]
 1019e04:	lea    rcx,[rsp+0x50]
 1019e09:	call   QWORD PTR [rip+0xfffffffffffe7ca1]        # 0x1001ab0
 1019e0f:	nop
 1019e10:	lea    rcx,[rsp+0x50]
 1019e15:	call   QWORD PTR [rip+0xfffffffffffe7cd5]        # 0x1001af0
 1019e1b:	test   eax,eax
 1019e1d:	je     0x1019e8e
 1019e1f:	lea    rcx,[rsp+0x50]
 1019e24:	call   QWORD PTR [rip+0xfffffffffffe7cc6]        # 0x1001af0
 1019e2a:	inc    eax
 1019e2c:	add    esi,eax
 1019e2e:	lea    rcx,[rbp-0x80]
 1019e32:	call   QWORD PTR [rip+0xfffffffffffe7c88]        # 0x1001ac0
 1019e38:	nop
 1019e39:	mov    r9,QWORD PTR [rsp+0x50]
 1019e3e:	mov    r8d,edi
 1019e41:	lea    rdx,[rip+0xfffffffffffeb568]        # 0x10053b0
 1019e48:	lea    rcx,[rbp-0x80]
 1019e4c:	call   QWORD PTR [rip+0xfffffffffffe7bee]        # 0x1001a40
 1019e52:	lea    rdx,[rbp-0x80]
 1019e56:	lea    rcx,[rsp+0x78]
 1019e5b:	call   QWORD PTR [rip+0xfffffffffffe7b77]        # 0x10019d8
 1019e61:	nop
 1019e62:	lea    rcx,[rbp-0x80]
 1019e66:	call   QWORD PTR [rip+0xfffffffffffe7c3c]        # 0x1001aa8
 1019e6c:	nop
 1019e6d:	lea    rcx,[rsp+0x50]
 1019e72:	call   QWORD PTR [rip+0xfffffffffffe7c30]        # 0x1001aa8
 1019e78:	inc    edi
 1019e7a:	mov    ecx,esi
 1019e7c:	add    rcx,rcx
 1019e7f:	mov    eax,DWORD PTR [rsp+0x44]
 1019e83:	cmp    rcx,rax
 1019e86:	jb     0x1019e00
 1019e8c:	jmp    0x1019e99
 1019e8e:	lea    rcx,[rsp+0x50]
 1019e93:	call   QWORD PTR [rip+0xfffffffffffe7c0f]        # 0x1001aa8
 1019e99:	mov    rcx,r12
 1019e9c:	call   QWORD PTR [rip+0xfffffffffffe738e]        # 0x1001230
 1019ea2:	mov    r8,QWORD PTR [rbx+0xd8]
 1019ea9:	lea    rax,[rip+0xfffffffffffea938]        # 0x10047e8
 1019eb0:	mov    QWORD PTR [rsp+0x30],rax
 1019eb5:	lea    rax,[rip+0xfffffffffffeb514]        # 0x10053d0
 1019ebc:	mov    QWORD PTR [rsp+0x28],rax
 1019ec1:	mov    rax,QWORD PTR [rsp+0x48]
 1019ec6:	mov    QWORD PTR [rsp+0x20],rax
 1019ecb:	mov    r9,QWORD PTR [rbx+0x10]
 1019ecf:	mov    r8,QWORD PTR [r8+0x78]
 1019ed3:	lea    rdx,[rip+0xfffffffffffeb50e]        # 0x10053e8
 1019eda:	lea    rcx,[rsp+0x60]
 1019edf:	call   QWORD PTR [rip+0xfffffffffffe7b5b]        # 0x1001a40
 1019ee5:	lea    rcx,[rsp+0x60]
 1019eea:	call   QWORD PTR [rip+0xfffffffffffe7bf8]        # 0x1001ae8
 1019ef0:	mov    rcx,rax
 1019ef3:	mov    QWORD PTR [rsp+0x30],r13
 1019ef8:	mov    DWORD PTR [rsp+0x28],0x100080
 1019f00:	mov    DWORD PTR [rsp+0x20],0x2
 1019f08:	xor    r9d,r9d
 1019f0b:	mov    edx,0x40000000
 1019f10:	lea    r8d,[r9+0x1]
 1019f14:	call   QWORD PTR [rip+0xfffffffffffe72c6]        # 0x10011e0
 1019f1a:	mov    rsi,rax
 1019f1d:	cmp    rax,0xffffffffffffffff
 1019f21:	jne    0x1019f8f
 1019f23:	mov    rax,QWORD PTR [rbx+0x8]
 1019f27:	movsxd rcx,DWORD PTR [rax+0x4]
 1019f2b:	mov    rdi,QWORD PTR [rcx+rbx*1+0x8]
 1019f30:	call   QWORD PTR [rip+0xfffffffffffe761a]        # 0x1001550
 1019f36:	mov    edx,eax
 1019f38:	mov    rax,QWORD PTR [rbx+0x8]
 1019f3c:	movsxd rcx,DWORD PTR [rax+0x4]
 1019f40:	add    rcx,0x8
 1019f44:	add    rcx,rbx
 1019f47:	mov    BYTE PTR [rsp+0x28],0x1
 1019f4c:	mov    BYTE PTR [rsp+0x20],0x1
 1019f51:	xor    r9d,r9d
 1019f54:	xor    r8d,r8d
 1019f57:	call   QWORD PTR [rdi]
 1019f59:	nop
 1019f5a:	lea    rcx,[rsp+0x78]
 1019f5f:	call   QWORD PTR [rip+0xfffffffffffe7b43]        # 0x1001aa8
 1019f65:	nop
 1019f66:	lea    rcx,[rsp+0x70]
 1019f6b:	call   QWORD PTR [rip+0xfffffffffffe7b37]        # 0x1001aa8
 1019f71:	nop
 1019f72:	lea    rcx,[rsp+0x48]
 1019f77:	call   QWORD PTR [rip+0xfffffffffffe7b2b]        # 0x1001aa8
 1019f7d:	nop
 1019f7e:	lea    rcx,[rsp+0x58]
 1019f83:	call   QWORD PTR [rip+0xfffffffffffe7b1f]        # 0x1001aa8
 1019f89:	nop
 1019f8a:	jmp    0x101a138
 1019f8f:	mov    WORD PTR [rsp+0x40],r13w
 1019f95:	mov    WORD PTR [rsp+0x40],0xfeff
 1019f9c:	lea    rcx,[rsp+0x78]
 1019fa1:	call   QWORD PTR [rip+0xfffffffffffe7b49]        # 0x1001af0
 1019fa7:	mov    edi,eax
 1019fa9:	add    edi,edi
 1019fab:	mov    QWORD PTR [rsp+0x20],r13
 1019fb0:	lea    r9,[rsp+0x50]
 1019fb5:	mov    r8d,0x2
 1019fbb:	lea    rdx,[rsp+0x40]
 1019fc0:	mov    rcx,rsi
 1019fc3:	call   QWORD PTR [rip+0xfffffffffffe7287]        # 0x1001250
 1019fc9:	test   eax,eax
 1019fcb:	je     0x101a052
 1019fd1:	cmp    DWORD PTR [rsp+0x50],0x2
 1019fd6:	jne    0x101a052
 1019fd8:	lea    rcx,[rsp+0x78]
 1019fdd:	call   QWORD PTR [rip+0xfffffffffffe7b05]        # 0x1001ae8
 1019fe3:	mov    rdx,rax
 1019fe6:	mov    QWORD PTR [rsp+0x20],r13
 1019feb:	lea    r9,[rsp+0x50]
 1019ff0:	mov    r8d,edi
 1019ff3:	mov    rcx,rsi
 1019ff6:	call   QWORD PTR [rip+0xfffffffffffe7254]        # 0x1001250
 1019ffc:	test   eax,eax
 1019ffe:	je     0x101a052
 101a000:	cmp    DWORD PTR [rsp+0x50],edi
 101a004:	jne    0x101a052
 101a006:	mov    rcx,rsi
 101a009:	call   QWORD PTR [rip+0xfffffffffffe74c9]        # 0x10014d8
 101a00f:	nop
 101a010:	lea    rcx,[rsp+0x78]
 101a015:	call   QWORD PTR [rip+0xfffffffffffe7a8d]        # 0x1001aa8
 101a01b:	nop
 101a01c:	lea    rcx,[rsp+0x70]
 101a021:	call   QWORD PTR [rip+0xfffffffffffe7a81]        # 0x1001aa8
 101a027:	nop
 101a028:	lea    rcx,[rsp+0x48]
 101a02d:	call   QWORD PTR [rip+0xfffffffffffe7a75]        # 0x1001aa8
 101a033:	nop
 101a034:	lea    rcx,[rsp+0x58]
 101a039:	call   QWORD PTR [rip+0xfffffffffffe7a69]        # 0x1001aa8
 101a03f:	nop
 101a040:	lea    rcx,[rsp+0x60]
 101a045:	call   QWORD PTR [rip+0xfffffffffffe7a5d]        # 0x1001aa8
 101a04b:	mov    al,0x1
 101a04d:	jmp    0x101a145
 101a052:	mov    rax,QWORD PTR [rbx+0x8]
 101a056:	movsxd rcx,DWORD PTR [rax+0x4]
 101a05a:	mov    rdi,QWORD PTR [rcx+rbx*1+0x8]
 101a05f:	call   QWORD PTR [rip+0xfffffffffffe74eb]        # 0x1001550
 101a065:	mov    edx,eax
 101a067:	mov    rax,QWORD PTR [rbx+0x8]
 101a06b:	movsxd rcx,DWORD PTR [rax+0x4]
 101a06f:	add    rcx,0x8
 101a073:	add    rcx,rbx
 101a076:	mov    BYTE PTR [rsp+0x28],0x1
 101a07b:	mov    BYTE PTR [rsp+0x20],0x1
 101a080:	xor    r9d,r9d
 101a083:	xor    r8d,r8d
 101a086:	call   QWORD PTR [rdi]
 101a088:	mov    rcx,rsi
 101a08b:	call   QWORD PTR [rip+0xfffffffffffe7447]        # 0x10014d8
 101a091:	nop
 101a092:	lea    rcx,[rsp+0x78]
 101a097:	call   QWORD PTR [rip+0xfffffffffffe7a0b]        # 0x1001aa8
 101a09d:	nop
 101a09e:	lea    rcx,[rsp+0x70]
 101a0a3:	call   QWORD PTR [rip+0xfffffffffffe79ff]        # 0x1001aa8
 101a0a9:	nop
 101a0aa:	lea    rcx,[rsp+0x48]
 101a0af:	call   QWORD PTR [rip+0xfffffffffffe79f3]        # 0x1001aa8
 101a0b5:	nop
 101a0b6:	lea    rcx,[rsp+0x58]
 101a0bb:	call   QWORD PTR [rip+0xfffffffffffe79e7]        # 0x1001aa8
 101a0c1:	nop
 101a0c2:	jmp    0x101a138
 101a0c4:	mov    rax,QWORD PTR [rbx+0x8]
 101a0c8:	movsxd rcx,DWORD PTR [rax+0x4]
 101a0cc:	mov    rdi,QWORD PTR [rcx+rbx*1+0x8]
 101a0d1:	call   QWORD PTR [rip+0xfffffffffffe7479]        # 0x1001550
 101a0d7:	mov    edx,eax
 101a0d9:	mov    rax,QWORD PTR [rbx+0x8]
 101a0dd:	movsxd rcx,DWORD PTR [rax+0x4]
 101a0e1:	add    rcx,0x8
 101a0e5:	add    rcx,rbx
 101a0e8:	mov    BYTE PTR [rsp+0x28],0x1
 101a0ed:	mov    BYTE PTR [rsp+0x20],0x1
 101a0f2:	xor    r9d,r9d
 101a0f5:	xor    r8d,r8d
 101a0f8:	call   QWORD PTR [rdi]
 101a0fa:	mov    rcx,r14
 101a0fd:	call   0x1040726
 101a102:	mov    rcx,r15
 101a105:	call   0x10406ea
 101a10a:	mov    rcx,r12
 101a10d:	call   QWORD PTR [rip+0xfffffffffffe711d]        # 0x1001230
 101a113:	nop
 101a114:	lea    rcx,[rsp+0x70]
 101a119:	call   QWORD PTR [rip+0xfffffffffffe7989]        # 0x1001aa8
 101a11f:	nop
 101a120:	lea    rcx,[rsp+0x48]
 101a125:	call   QWORD PTR [rip+0xfffffffffffe797d]        # 0x1001aa8
 101a12b:	nop
 101a12c:	lea    rcx,[rsp+0x58]
 101a131:	call   QWORD PTR [rip+0xfffffffffffe7971]        # 0x1001aa8
 101a137:	nop
 101a138:	lea    rcx,[rsp+0x60]
 101a13d:	call   QWORD PTR [rip+0xfffffffffffe7965]        # 0x1001aa8
 101a143:	xor    al,al
 101a145:	mov    rcx,QWORD PTR [rbp+0xfc0]
 101a14c:	xor    rcx,rsp
 101a14f:	call   0x103ff40
 101a154:	mov    rbx,QWORD PTR [rsp+0x1120]
 101a15c:	add    rsp,0x10d0
 101a163:	pop    r15
 101a165:	pop    r14
 101a167:	pop    r13
 101a169:	pop    r12
 101a16b:	pop    rdi
 101a16c:	pop    rsi
 101a16d:	pop    rbp
 101a16e:	ret    
 101a16f:	int3   
 101a170:	int3   
 101a171:	int3   
 101a172:	int3   
 101a173:	int3   
 101a174:	int3   
 101a175:	int3   
 101a176:	int3   
 101a177:	int3   
 101a178:	int3   
 101a179:	int3   
 101a17a:	int3   
 101a17b:	int3   
 101a17c:	int3   
 101a17d:	int3   
 101a17e:	int3   
 101a17f:	int3   
 101a180:	mov    rax,rsp
 101a183:	push   rbp
 101a184:	push   rdi
 101a185:	push   r12
 101a187:	push   r14
 101a189:	push   r15
 101a18b:	lea    rbp,[rax-0xd8]
 101a192:	sub    rsp,0x1b0
 101a199:	mov    QWORD PTR [rsp+0x70],0xfffffffffffffffe
 101a1a2:	mov    QWORD PTR [rax+0x18],rbx
 101a1a6:	mov    QWORD PTR [rax+0x20],rsi
 101a1aa:	mov    rax,QWORD PTR [rip+0x496bf]        # 0x1063870
 101a1b1:	xor    rax,rsp
 101a1b4:	mov    QWORD PTR [rbp+0xa0],rax
 101a1bb:	mov    r14d,edx
 101a1be:	mov    rsi,rcx
 101a1c1:	mov    bl,0x1
 101a1c3:	mov    r12d,DWORD PTR [rip+0x49746]        # 0x1063910
 101a1ca:	shl    r12d,0x14
 101a1ce:	lea    rcx,[rsp+0x48]
 101a1d3:	call   QWORD PTR [rip+0xfffffffffffe78e7]        # 0x1001ac0
 101a1d9:	nop
 101a1da:	mov    rax,QWORD PTR [rsi+0x8]
 101a1de:	mov    BYTE PTR [rsp+0x28],bl
 101a1e2:	xor    r9d,r9d
 101a1e5:	xor    r8d,r8d
 101a1e8:	movsxd rcx,DWORD PTR [rax+0x4]
 101a1ec:	mov    BYTE PTR [rsp+0x20],bl
 101a1f0:	add    rcx,0x8
 101a1f4:	add    rcx,rsi
 101a1f7:	mov    rax,QWORD PTR [rcx]
 101a1fa:	test   r14d,r14d
 101a1fd:	mov    edx,0x4000c373
 101a202:	je     0x101a209
 101a204:	mov    edx,0x4000c3f0
 101a209:	call   QWORD PTR [rax]
 101a20b:	mov    eax,DWORD PTR [rip+0x49713]        # 0x1063924
 101a211:	test   eax,eax
 101a213:	jne    0x101a4d0
 101a219:	lea    rcx,[rsp+0x50]
 101a21e:	call   QWORD PTR [rip+0xfffffffffffe789c]        # 0x1001ac0
 101a224:	nop
 101a225:	mov    rbx,QWORD PTR [rsi+0xd8]
 101a22c:	lea    rcx,[rip+0xfffffffffffebd5d]        # 0x1005f90
 101a233:	call   0x103fa26
 101a238:	mov    edi,eax
 101a23a:	xor    edx,edx
 101a23c:	div    DWORD PTR [rbx+0xf8]
 101a242:	mov    rbx,QWORD PTR [rbx+0xf0]
 101a249:	mov    r15d,0x1
 101a24f:	test   rbx,rbx
 101a252:	je     0x101a2c0
 101a254:	mov    rbx,QWORD PTR [rbx+rdx*8]
 101a258:	test   rbx,rbx
 101a25b:	je     0x101a2c0
 101a25d:	cmp    DWORD PTR [rbx+0x18],edi
 101a260:	jne    0x101a27d
 101a262:	lea    rdx,[rip+0xfffffffffffebd27]        # 0x1005f90
 101a269:	mov    rcx,rbx
 101a26c:	call   QWORD PTR [rip+0xfffffffffffe778e]        # 0x1001a00
 101a272:	xor    ecx,ecx
 101a274:	test   eax,eax
 101a276:	sete   cl
 101a279:	test   ecx,ecx
 101a27b:	jne    0x101a283
 101a27d:	mov    rbx,QWORD PTR [rbx+0x10]
 101a281:	jmp    0x101a258
 101a283:	lea    rdx,[rbx+0x8]
 101a287:	lea    rcx,[rsp+0x50]
 101a28c:	call   QWORD PTR [rip+0xfffffffffffe780e]        # 0x1001aa0
 101a292:	mov    DWORD PTR [rsp+0x40],0x7
 101a29a:	mov    r8,QWORD PTR [rsp+0x50]
 101a29f:	lea    rdx,[rip+0xfffffffffffebd0a]        # 0x1005fb0
 101a2a6:	lea    rcx,[rsp+0x48]
 101a2ab:	call   QWORD PTR [rip+0xfffffffffffe778f]        # 0x1001a40
 101a2b1:	mov    DWORD PTR [rip+0x49655],0x0        # 0x1063910
 101a2bb:	jmp    0x101a37b
 101a2c0:	xor    edx,edx
 101a2c2:	mov    r8d,0x11c
 101a2c8:	lea    rcx,[rbp-0x80]
 101a2cc:	call   0x104026c
 101a2d1:	mov    DWORD PTR [rbp-0x80],0x11c
 101a2d8:	mov    DWORD PTR [rbp-0x7c],0x5
 101a2df:	mov    DWORD PTR [rbp-0x78],r15d
 101a2e3:	mov    r8b,0x3
 101a2e6:	mov    edx,0x2
 101a2eb:	xor    ecx,ecx
 101a2ed:	call   QWORD PTR [rip+0xfffffffffffe6f9d]        # 0x1001290
 101a2f3:	mov    r8b,0x3
 101a2f6:	mov    edx,r15d
 101a2f9:	mov    rcx,rax
 101a2fc:	call   QWORD PTR [rip+0xfffffffffffe6f8e]        # 0x1001290
 101a302:	mov    r8,rax
 101a305:	mov    edx,0x3
 101a30a:	lea    rcx,[rbp-0x80]
 101a30e:	call   QWORD PTR [rip+0xfffffffffffe7114]        # 0x1001428
 101a314:	test   eax,eax
 101a316:	je     0x101a322
 101a318:	mov    DWORD PTR [rsp+0x40],0x8
 101a320:	jmp    0x101a32d
 101a322:	mov    DWORD PTR [rsp+0x40],0x3
 101a32a:	xor    r12d,r12d
 101a32d:	mov    r8,QWORD PTR [rsi+0xd8]
 101a334:	lea    rax,[rip+0xfffffffffffebc9d]        # 0x1005fd8
 101a33b:	lea    r9,[rip+0x4910e]        # 0x1063450
 101a342:	lea    rcx,[rsp+0x48]
 101a347:	mov    r8,QWORD PTR [r8+0x78]
 101a34b:	test   r14d,r14d
 101a34e:	jne    0x101a364
 101a350:	mov    QWORD PTR [rsp+0x20],rax
 101a355:	lea    rdx,[rip+0xfffffffffffebc8c]        # 0x1005fe8
 101a35c:	call   QWORD PTR [rip+0xfffffffffffe76de]        # 0x1001a40
 101a362:	jmp    0x101a37b
 101a364:	mov    QWORD PTR [rsp+0x28],rax
 101a369:	mov    DWORD PTR [rsp+0x20],r14d
 101a36e:	lea    rdx,[rip+0xfffffffffffebc83]        # 0x1005ff8
 101a375:	call   QWORD PTR [rip+0xfffffffffffe76c5]        # 0x1001a40
 101a37b:	lea    rcx,[rsp+0x58]
 101a380:	call   QWORD PTR [rip+0xfffffffffffe773a]        # 0x1001ac0
 101a386:	nop
 101a387:	mov    edx,0xc000c374
 101a38c:	lea    rcx,[rsp+0x60]
 101a391:	call   0x10132d0
 101a396:	nop
 101a397:	mov    rcx,rax
 101a39a:	call   QWORD PTR [rip+0xfffffffffffe7748]        # 0x1001ae8
 101a3a0:	mov    rdx,rax
 101a3a3:	mov    r8,QWORD PTR [rsp+0x48]
 101a3a8:	lea    rcx,[rsp+0x58]
 101a3ad:	call   QWORD PTR [rip+0xfffffffffffe768d]        # 0x1001a40
 101a3b3:	nop
 101a3b4:	lea    rcx,[rsp+0x60]
 101a3b9:	call   QWORD PTR [rip+0xfffffffffffe76e9]        # 0x1001aa8
 101a3bf:	lock xadd DWORD PTR [rip+0x49558],r15d        # 0x1063920
 101a3c8:	inc    r15d
 101a3cb:	cmp    r15d,0x1
 101a3cf:	je     0x101a3da
 101a3d1:	test   r14d,r14d
 101a3d4:	je     0x101a46f
 101a3da:	lea    rax,[rsp+0x68]
 101a3df:	mov    QWORD PTR [rsp+0x60],rax
 101a3e4:	lea    rdx,[rsp+0x58]
 101a3e9:	lea    rcx,[rsp+0x68]
 101a3ee:	call   QWORD PTR [rip+0xfffffffffffe75c4]        # 0x10019b8
 101a3f4:	mov    rdi,rax
 101a3f7:	mov    rax,QWORD PTR [rsi+0x8]
 101a3fb:	movsxd rcx,DWORD PTR [rax+0x4]
 101a3ff:	mov    rbx,QWORD PTR [rcx+rsi*1+0x8]
 101a404:	add    rbx,0x28
 101a408:	lea    r15,[rsi+0x80]
 101a40f:	lea    rcx,[rsp+0x48]
 101a414:	call   QWORD PTR [rip+0xfffffffffffe76ce]        # 0x1001ae8
 101a41a:	mov    rdx,rax
 101a41d:	mov    QWORD PTR [rsp+0x38],r15
 101a422:	lea    rax,[rip+0xfffffffffffebbe7]        # 0x1006010
 101a429:	mov    QWORD PTR [rsp+0x30],rax
 101a42e:	mov    DWORD PTR [rsp+0x28],r12d
 101a433:	mov    rax,QWORD PTR [rip+0x48ed6]        # 0x1063310
 101a43a:	mov    QWORD PTR [rsp+0x20],rax
 101a43f:	lea    r9,[rsp+0x40]
 101a444:	mov    r8d,0x20002
 101a44a:	mov    rcx,rsi
 101a44d:	call   0x101a7f0
 101a452:	mov    edx,eax
 101a454:	mov    rax,QWORD PTR [rsi+0x8]
 101a458:	movsxd rcx,DWORD PTR [rax+0x4]
 101a45c:	add    rcx,0x8
 101a460:	add    rcx,rsi
 101a463:	xor    r9d,r9d
 101a466:	mov    r8,rdi
 101a469:	call   QWORD PTR [rbx]
 101a46b:	test   al,al
 101a46d:	je     0x101a473
 101a46f:	mov    bl,0x1
 101a471:	jmp    0x101a47c
 101a473:	mov    QWORD PTR [r15],0xffffffffffffffff
 101a47a:	xor    bl,bl
 101a47c:	lea    rcx,[rsp+0x58]
 101a481:	call   QWORD PTR [rip+0xfffffffffffe7621]        # 0x1001aa8
 101a487:	nop
 101a488:	lea    rcx,[rsp+0x50]
 101a48d:	call   QWORD PTR [rip+0xfffffffffffe7615]        # 0x1001aa8
 101a493:	test   bl,bl
 101a495:	jne    0x101a4d0
 101a497:	mov    rax,QWORD PTR [rsi+0x8]
 101a49b:	mov    BYTE PTR [rsp+0x28],0x1
 101a4a0:	xor    r9d,r9d
 101a4a3:	xor    r8d,r8d
 101a4a6:	movsxd rcx,DWORD PTR [rax+0x4]
 101a4aa:	mov    BYTE PTR [rsp+0x20],0x1
 101a4af:	add    rcx,0x8
 101a4b3:	add    rcx,rsi
 101a4b6:	mov    rax,QWORD PTR [rcx]
 101a4b9:	test   r14d,r14d
 101a4bc:	jne    0x101a4c7
 101a4be:	mov    edx,0xc000c376
 101a4c3:	call   QWORD PTR [rax]
 101a4c5:	jmp    0x101a50c
 101a4c7:	mov    edx,0xc000c377
 101a4cc:	call   QWORD PTR [rax]
 101a4ce:	jmp    0x101a50c
 101a4d0:	mov    rax,QWORD PTR [rsi+0x8]
 101a4d4:	mov    BYTE PTR [rsp+0x28],0x1
 101a4d9:	xor    r9d,r9d
 101a4dc:	xor    r8d,r8d
 101a4df:	movsxd rcx,DWORD PTR [rax+0x4]
 101a4e3:	mov    BYTE PTR [rsp+0x20],0x1
 101a4e8:	add    rcx,0x8
 101a4ec:	add    rcx,rsi
 101a4ef:	test   r14d,r14d
 101a4f2:	jne    0x101a500
 101a4f4:	mov    rax,QWORD PTR [rcx]
 101a4f7:	mov    edx,0xc375
 101a4fc:	call   QWORD PTR [rax]
 101a4fe:	jmp    0x101a50c
 101a500:	mov    r10,QWORD PTR [rcx]
 101a503:	mov    edx,0xc000c3f1
 101a508:	call   QWORD PTR [r10]
 101a50b:	nop
 101a50c:	lea    rcx,[rsp+0x48]
 101a511:	call   QWORD PTR [rip+0xfffffffffffe7591]        # 0x1001aa8
 101a517:	movzx  eax,bl
 101a51a:	mov    rcx,QWORD PTR [rbp+0xa0]
 101a521:	xor    rcx,rsp
 101a524:	call   0x103ff40
 101a529:	lea    r11,[rsp+0x1b0]
 101a531:	mov    rbx,QWORD PTR [r11+0x40]
 101a535:	mov    rsi,QWORD PTR [r11+0x48]
 101a539:	mov    rsp,r11
 101a53c:	pop    r15
 101a53e:	pop    r14
 101a540:	pop    r12
 101a542:	pop    rdi
 101a543:	pop    rbp
 101a544:	ret    
 101a545:	int3   
 101a546:	int3   
 101a547:	int3   
 101a548:	int3   
 101a549:	int3   
 101a54a:	int3   
 101a54b:	int3   
 101a54c:	int3   
 101a54d:	int3   
 101a54e:	int3   
 101a54f:	int3   
 101a550:	rex push rbp
 101a552:	push   rsi
 101a553:	push   rdi
 101a554:	mov    rbp,rsp
 101a557:	sub    rsp,0x60
 101a55b:	mov    QWORD PTR [rbp-0x18],0xfffffffffffffffe
 101a563:	mov    QWORD PTR [rsp+0x88],rbx
 101a56b:	mov    rsi,rdx
 101a56e:	mov    rdi,rcx
 101a571:	lea    rcx,[rbp+0x30]
 101a575:	call   QWORD PTR [rip+0xfffffffffffe7545]        # 0x1001ac0
 101a57b:	nop
 101a57c:	lea    rcx,[rbp+0x20]
 101a580:	call   QWORD PTR [rip+0xfffffffffffe753a]        # 0x1001ac0
 101a586:	nop
 101a587:	lea    rcx,[rdi+0x10]
 101a58b:	call   QWORD PTR [rip+0xfffffffffffe755f]        # 0x1001af0
 101a591:	test   eax,eax
 101a593:	je     0x101a5df
 101a595:	lea    r8,[rdi+0x10]
 101a599:	lea    rdx,[rip+0xfffffffffffeb9e8]        # 0x1005f88
 101a5a0:	lea    rcx,[rbp-0x20]
 101a5a4:	call   0x1013d70
 101a5a9:	nop
 101a5aa:	mov    r8,rsi
 101a5ad:	mov    rdx,rax
 101a5b0:	lea    rcx,[rbp+0x38]
 101a5b4:	call   0x100af10
 101a5b9:	nop
 101a5ba:	mov    rdx,rax
 101a5bd:	lea    rcx,[rbp+0x30]
 101a5c1:	call   QWORD PTR [rip+0xfffffffffffe74d9]        # 0x1001aa0
 101a5c7:	nop
 101a5c8:	lea    rcx,[rbp+0x38]
 101a5cc:	call   QWORD PTR [rip+0xfffffffffffe74d6]        # 0x1001aa8
 101a5d2:	nop
 101a5d3:	lea    rcx,[rbp-0x20]
 101a5d7:	call   QWORD PTR [rip+0xfffffffffffe74cb]        # 0x1001aa8
 101a5dd:	jmp    0x101a5ec
 101a5df:	mov    rdx,rsi
 101a5e2:	lea    rcx,[rbp+0x30]
 101a5e6:	call   QWORD PTR [rip+0xfffffffffffe74ac]        # 0x1001a98
 101a5ec:	mov    rcx,QWORD PTR [rdi+0xd8]
 101a5f3:	mov    rdx,QWORD PTR [rcx+0x8]
 101a5f7:	cmp    rdi,rdx
 101a5fa:	jne    0x101a613
 101a5fc:	mov    eax,DWORD PTR [rcx+0xe0]
 101a602:	cmp    DWORD PTR [rdi+0x98],eax
 101a608:	jl     0x101a625
 101a60a:	cmp    rdi,rdx
 101a60d:	je     0x101a723
 101a613:	mov    eax,DWORD PTR [rcx+0xe4]
 101a619:	cmp    DWORD PTR [rdi+0x98],eax
 101a61f:	jge    0x101a723
 101a625:	lea    rcx,[rbp+0x30]
 101a629:	call   QWORD PTR [rip+0xfffffffffffe74b9]        # 0x1001ae8
 101a62f:	mov    rdx,rax
 101a632:	lea    r9,[rbp-0x10]
 101a636:	xor    r8d,r8d
 101a639:	mov    rcx,QWORD PTR [rip+0x48cd0]        # 0x1063310
 101a640:	call   0x1040786
 101a645:	mov    esi,eax
 101a647:	mov    edx,0xc000c3ee
 101a64c:	lea    rcx,[rbp+0x38]
 101a650:	call   0x10132d0
 101a655:	nop
 101a656:	mov    rcx,rax
 101a659:	call   QWORD PTR [rip+0xfffffffffffe7489]        # 0x1001ae8
 101a65f:	mov    rdx,rax
 101a662:	mov    r8,QWORD PTR [rbp+0x30]
 101a666:	lea    rcx,[rbp+0x20]
 101a66a:	call   QWORD PTR [rip+0xfffffffffffe73d0]        # 0x1001a40
 101a670:	nop
 101a671:	lea    rcx,[rbp+0x38]
 101a675:	call   QWORD PTR [rip+0xfffffffffffe742d]        # 0x1001aa8
 101a67b:	lea    r11,[rbp+0x38]
 101a67f:	mov    QWORD PTR [rbp-0x20],r11
 101a683:	lea    rdx,[rbp+0x20]
 101a687:	lea    rcx,[rbp+0x38]
 101a68b:	call   QWORD PTR [rip+0xfffffffffffe7327]        # 0x10019b8
 101a691:	nop
 101a692:	mov    rcx,QWORD PTR [rdi+0x8]
 101a696:	movsxd rdx,DWORD PTR [rcx+0x4]
 101a69a:	lea    rcx,[rdi+0x8]
 101a69e:	add    rcx,rdx
 101a6a1:	mov    r10,QWORD PTR [rcx]
 101a6a4:	mov    r9b,0x1
 101a6a7:	mov    r8,rax
 101a6aa:	mov    edx,esi
 101a6ac:	call   QWORD PTR [r10+0x28]
 101a6b0:	test   al,al
 101a6b2:	je     0x101a7b6
 101a6b8:	inc    DWORD PTR [rdi+0x98]
 101a6be:	mov    edx,0xc000c3ef
 101a6c3:	lea    rcx,[rbp+0x38]
 101a6c7:	call   0x10132d0
 101a6cc:	nop
 101a6cd:	mov    rcx,rax
 101a6d0:	call   QWORD PTR [rip+0xfffffffffffe7412]        # 0x1001ae8
 101a6d6:	mov    rdx,rax
 101a6d9:	mov    r8,QWORD PTR [rbp+0x30]
 101a6dd:	lea    rcx,[rbp+0x20]
 101a6e1:	call   QWORD PTR [rip+0xfffffffffffe7359]        # 0x1001a40
 101a6e7:	nop
 101a6e8:	lea    rcx,[rbp+0x38]
 101a6ec:	call   QWORD PTR [rip+0xfffffffffffe73b6]        # 0x1001aa8
 101a6f2:	mov    r11,QWORD PTR [rdi+0x8]
 101a6f6:	movsxd rax,DWORD PTR [r11+0x4]
 101a6fa:	mov    rbx,QWORD PTR [rax+rdi*1+0x8]
 101a6ff:	lea    rcx,[rbp+0x20]
 101a703:	call   QWORD PTR [rip+0xfffffffffffe73df]        # 0x1001ae8
 101a709:	mov    rdx,rax
 101a70c:	mov    rax,QWORD PTR [rdi+0x8]
 101a710:	movsxd rcx,DWORD PTR [rax+0x4]
 101a714:	add    rcx,0x8
 101a718:	add    rcx,rdi
 101a71b:	call   QWORD PTR [rbx+0x18]
 101a71e:	jmp    0x101a7b6
 101a723:	mov    edx,0x8000c47e
 101a728:	lea    rcx,[rbp+0x38]
 101a72c:	call   0x10132d0
 101a731:	nop
 101a732:	mov    rbx,QWORD PTR [rdi+0xd8]
 101a739:	mov    rcx,rax
 101a73c:	call   QWORD PTR [rip+0xfffffffffffe73a6]        # 0x1001ae8
 101a742:	mov    rdx,rax
 101a745:	mov    eax,DWORD PTR [rbx+0xe4]
 101a74b:	mov    DWORD PTR [rsp+0x20],eax
 101a74f:	mov    r9d,DWORD PTR [rbx+0xe0]
 101a756:	mov    r8,rsi
 101a759:	lea    rcx,[rbp+0x20]
 101a75d:	call   QWORD PTR [rip+0xfffffffffffe72dd]        # 0x1001a40
 101a763:	nop
 101a764:	lea    rcx,[rbp+0x38]
 101a768:	call   QWORD PTR [rip+0xfffffffffffe733a]        # 0x1001aa8
 101a76e:	mov    rax,QWORD PTR [rdi+0x8]
 101a772:	movsxd rcx,DWORD PTR [rax+0x4]
 101a776:	mov    rbx,QWORD PTR [rcx+rdi*1+0x8]
 101a77b:	lea    rcx,[rbp+0x20]
 101a77f:	call   QWORD PTR [rip+0xfffffffffffe7363]        # 0x1001ae8
 101a785:	mov    r8,rax
 101a788:	mov    rax,QWORD PTR [rdi+0x8]
 101a78c:	movsxd rcx,DWORD PTR [rax+0x4]
 101a790:	add    rcx,0x8
 101a794:	add    rcx,rdi
 101a797:	mov    BYTE PTR [rsp+0x30],0x1
 101a79c:	mov    BYTE PTR [rsp+0x28],0x1
 101a7a1:	mov    DWORD PTR [rsp+0x20],0x1
 101a7a9:	mov    r9b,0x1
 101a7ac:	mov    edx,0x8000c47e
 101a7b1:	call   QWORD PTR [rbx+0x8]
 101a7b4:	xor    esi,esi
 101a7b6:	test   esi,esi
 101a7b8:	sete   bl
 101a7bb:	lea    rcx,[rbp+0x20]
 101a7bf:	call   QWORD PTR [rip+0xfffffffffffe72e3]        # 0x1001aa8
 101a7c5:	nop
 101a7c6:	lea    rcx,[rbp+0x30]
 101a7ca:	call   QWORD PTR [rip+0xfffffffffffe72d8]        # 0x1001aa8
 101a7d0:	movzx  eax,bl
 101a7d3:	mov    rbx,QWORD PTR [rsp+0x88]
 101a7db:	add    rsp,0x60
 101a7df:	pop    rdi
 101a7e0:	pop    rsi
 101a7e1:	pop    rbp
 101a7e2:	ret    
 101a7e3:	int3   
 101a7e4:	int3   
 101a7e5:	int3   
 101a7e6:	int3   
 101a7e7:	int3   
 101a7e8:	int3   
 101a7e9:	int3   
 101a7ea:	int3   
 101a7eb:	int3   
 101a7ec:	int3   
 101a7ed:	int3   
 101a7ee:	int3   
 101a7ef:	int3   
 101a7f0:	mov    QWORD PTR [rsp+0x8],rcx
 101a7f5:	push   rbx
 101a7f6:	sub    rsp,0x50
 101a7fa:	mov    r10,r9
 101a7fd:	mov    r11d,r8d
 101a800:	mov    rbx,rdx
 101a803:	mov    rax,QWORD PTR [rsp+0x98]
 101a80b:	mov    QWORD PTR [rsp+0x30],rax
 101a810:	mov    rax,QWORD PTR [rsp+0x90]
 101a818:	mov    QWORD PTR [rsp+0x28],rax
 101a81d:	mov    eax,DWORD PTR [rsp+0x88]
 101a824:	mov    DWORD PTR [rsp+0x20],eax
 101a828:	mov    r9,QWORD PTR [rsp+0x80]
 101a830:	mov    r8,r10
 101a833:	mov    edx,r11d
 101a836:	mov    rcx,rbx
 101a839:	call   0x1040792
 101a83e:	jmp    0x101a876
 101a840:	mov    rdx,QWORD PTR [rsp+0x60]
 101a845:	mov    rax,QWORD PTR [rdx+0x8]
 101a849:	movsxd rcx,DWORD PTR [rax+0x4]
 101a84d:	add    rcx,0x8
 101a851:	add    rcx,rdx
 101a854:	mov    rax,QWORD PTR [rcx]
 101a857:	mov    BYTE PTR [rsp+0x28],0x1
 101a85c:	mov    BYTE PTR [rsp+0x20],0x1
 101a861:	mov    r9d,0x2
 101a867:	xor    r8d,r8d
 101a86a:	mov    edx,0xc000c47c
 101a86f:	call   QWORD PTR [rax]
 101a871:	mov    eax,0xc0000bc9
 101a876:	add    rsp,0x50
 101a87a:	pop    rbx
 101a87b:	ret    
 101a87c:	int3   
 101a87d:	int3   
 101a87e:	int3   
 101a87f:	int3   
 101a880:	int3   
 101a881:	int3   
 101a882:	int3   
 101a883:	int3   
 101a884:	int3   
 101a885:	int3   
 101a886:	int3   
 101a887:	int3   
 101a888:	int3   
 101a889:	int3   
 101a88a:	int3   
 101a88b:	int3   
 101a88c:	int3   
 101a88d:	int3   
 101a88e:	int3   
 101a88f:	int3   
 101a890:	mov    QWORD PTR [rsp+0x8],rcx
 101a895:	sub    rsp,0x58
 101a899:	mov    rdx,rcx
 101a89c:	mov    BYTE PTR [rsp+0x30],0x0
 101a8a1:	mov    rcx,QWORD PTR [rcx+0xd0]
 101a8a8:	mov    rax,QWORD PTR [rcx]
 101a8ab:	call   QWORD PTR [rax+0x28]
 101a8ae:	mov    BYTE PTR [rsp+0x30],al
 101a8b2:	jmp    0x101a8ea
 101a8b4:	mov    rdx,QWORD PTR [rsp+0x60]
 101a8b9:	mov    rax,QWORD PTR [rdx+0x8]
 101a8bd:	movsxd rcx,DWORD PTR [rax+0x4]
 101a8c1:	add    rcx,0x8
 101a8c5:	add    rcx,rdx
 101a8c8:	mov    rax,QWORD PTR [rcx]
 101a8cb:	mov    BYTE PTR [rsp+0x28],0x1
 101a8d0:	mov    BYTE PTR [rsp+0x20],0x1
 101a8d5:	mov    r9d,0x2
 101a8db:	xor    r8d,r8d
 101a8de:	mov    edx,0xc000c47c
 101a8e3:	call   QWORD PTR [rax]
 101a8e5:	movzx  eax,BYTE PTR [rsp+0x30]
 101a8ea:	add    rsp,0x58
 101a8ee:	ret    
 101a8ef:	int3   
 101a8f0:	int3   
 101a8f1:	int3   
 101a8f2:	int3   
 101a8f3:	int3   
 101a8f4:	int3   
 101a8f5:	int3   
 101a8f6:	int3   
 101a8f7:	int3   
 101a8f8:	int3   
 101a8f9:	int3   
 101a8fa:	int3   
 101a8fb:	int3   
 101a8fc:	int3   
 101a8fd:	int3   
 101a8fe:	int3   
 101a8ff:	int3   
 101a900:	mov    QWORD PTR [rsp+0x20],rbx
 101a905:	push   rdi
 101a906:	sub    rsp,0xe0
 101a90d:	mov    rax,QWORD PTR [rip+0x48f5c]        # 0x1063870
 101a914:	xor    rax,rsp
 101a917:	mov    QWORD PTR [rsp+0xd0],rax
 101a91f:	mov    rdi,rcx
 101a922:	mov    QWORD PTR [rsp+0x38],rcx
 101a927:	mov    QWORD PTR [rsp+0x40],r8
 101a92c:	mov    BYTE PTR [r8],0x0
 101a930:	xor    r8d,r8d
 101a933:	mov    rcx,QWORD PTR [rip+0x489d6]        # 0x1063310
 101a93a:	call   0x10407c2
 101a93f:	mov    ebx,eax
 101a941:	mov    DWORD PTR [rsp+0x30],eax
 101a945:	mov    rcx,QWORD PTR [rdi+0x8]
 101a949:	movsxd rdx,DWORD PTR [rcx+0x4]
 101a94d:	lea    rcx,[rdi+0x8]
 101a951:	add    rcx,rdx
 101a954:	mov    r10,QWORD PTR [rcx]
 101a957:	xor    r9d,r9d
 101a95a:	mov    r8d,0xc000c465
 101a960:	mov    edx,eax
 101a962:	call   QWORD PTR [r10+0x20]
 101a966:	test   al,al
 101a968:	je     0x101a98e
 101a96a:	mov    edx,0x33
 101a96f:	lea    rcx,[rsp+0x60]
 101a974:	call   0x1030410
 101a979:	mov    rdx,rax
 101a97c:	mov    rcx,QWORD PTR [rdi+0x80]
 101a983:	call   0x104079e
 101a988:	mov    ebx,eax
 101a98a:	mov    DWORD PTR [rsp+0x30],eax
 101a98e:	jmp    0x101a9d3
 101a990:	mov    rdx,QWORD PTR [rsp+0x38]
 101a995:	mov    rax,QWORD PTR [rdx+0x8]
 101a999:	movsxd rcx,DWORD PTR [rax+0x4]
 101a99d:	add    rcx,0x8
 101a9a1:	add    rcx,rdx
 101a9a4:	mov    rax,QWORD PTR [rcx]
 101a9a7:	mov    BYTE PTR [rsp+0x28],0x1
 101a9ac:	mov    BYTE PTR [rsp+0x20],0x1
 101a9b1:	mov    r9d,0x2
 101a9b7:	xor    r8d,r8d
 101a9ba:	mov    edx,0xc000c47c
 101a9bf:	call   QWORD PTR [rax]
 101a9c1:	mov    r11,QWORD PTR [rsp+0x40]
 101a9c6:	mov    BYTE PTR [r11],0x1
 101a9ca:	mov    ebx,0xc0000bc9
 101a9cf:	mov    DWORD PTR [rsp+0x30],ebx
 101a9d3:	mov    eax,ebx
 101a9d5:	mov    rcx,QWORD PTR [rsp+0xd0]
 101a9dd:	xor    rcx,rsp
 101a9e0:	call   0x103ff40
 101a9e5:	mov    rbx,QWORD PTR [rsp+0x108]
 101a9ed:	add    rsp,0xe0
 101a9f4:	pop    rdi
 101a9f5:	ret    
 101a9f6:	int3   
 101a9f7:	int3   
 101a9f8:	int3   
 101a9f9:	int3   
 101a9fa:	int3   
 101a9fb:	int3   
 101a9fc:	int3   
 101a9fd:	int3   
 101a9fe:	int3   
 101a9ff:	int3   
 101aa00:	mov    QWORD PTR [rsp+0x18],r8
 101aa05:	mov    QWORD PTR [rsp+0x8],rcx
 101aa0a:	sub    rsp,0x58
 101aa0e:	mov    BYTE PTR [r8],0x0
 101aa12:	mov    rcx,QWORD PTR [rcx+0x80]
 101aa19:	call   0x10407aa
 101aa1e:	mov    DWORD PTR [rsp+0x30],eax
 101aa22:	jmp    0x101aa67
 101aa24:	mov    rdx,QWORD PTR [rsp+0x60]
 101aa29:	mov    rax,QWORD PTR [rdx+0x8]
 101aa2d:	movsxd rcx,DWORD PTR [rax+0x4]
 101aa31:	add    rcx,0x8
 101aa35:	add    rcx,rdx
 101aa38:	mov    rax,QWORD PTR [rcx]
 101aa3b:	mov    BYTE PTR [rsp+0x28],0x1
 101aa40:	mov    BYTE PTR [rsp+0x20],0x1
 101aa45:	mov    r9d,0x2
 101aa4b:	xor    r8d,r8d
 101aa4e:	mov    edx,0xc000c47c
 101aa53:	call   QWORD PTR [rax]
 101aa55:	mov    r11,QWORD PTR [rsp+0x70]
 101aa5a:	mov    BYTE PTR [r11],0x1
 101aa5e:	mov    eax,0xc0000bca
 101aa63:	mov    DWORD PTR [rsp+0x30],eax
 101aa67:	add    rsp,0x58
 101aa6b:	ret    
 101aa6c:	int3   
 101aa6d:	int3   
 101aa6e:	int3   
 101aa6f:	int3   
 101aa70:	int3   
 101aa71:	int3   
 101aa72:	int3   
 101aa73:	int3   
 101aa74:	int3   
 101aa75:	int3   
 101aa76:	int3   
 101aa77:	int3   
 101aa78:	int3   
 101aa79:	int3   
 101aa7a:	int3   
 101aa7b:	int3   
 101aa7c:	int3   
 101aa7d:	int3   
 101aa7e:	int3   
 101aa7f:	int3   
 101aa80:	mov    DWORD PTR [rsp+0x10],edx
 101aa84:	push   rbp
 101aa85:	push   rsi
 101aa86:	push   rdi
 101aa87:	push   r12
 101aa89:	push   r13
 101aa8b:	push   r14
 101aa8d:	push   r15
 101aa8f:	lea    rbp,[rsp-0x27]
 101aa94:	sub    rsp,0xb0
 101aa9b:	mov    QWORD PTR [rbp+0x17],0xfffffffffffffffe
 101aaa3:	mov    QWORD PTR [rsp+0xf0],rbx
 101aaab:	mov    rbx,r8
 101aaae:	mov    r14,rcx
 101aab1:	mov    r13b,0x1
 101aab4:	lea    rdx,[rip+0xfffffffffffe7355]        # 0x1001e10
 101aabb:	lea    rcx,[rbp-0x59]
 101aabf:	call   QWORD PTR [rip+0xfffffffffffe6feb]        # 0x1001ab0
 101aac5:	nop
 101aac6:	lea    rdx,[rip+0xfffffffffffe7343]        # 0x1001e10
 101aacd:	lea    rcx,[rbp-0x51]
 101aad1:	call   QWORD PTR [rip+0xfffffffffffe6fd9]        # 0x1001ab0
 101aad7:	nop
 101aad8:	mov    rdx,rbx
 101aadb:	lea    rcx,[rbp-0x49]
 101aadf:	call   QWORD PTR [rip+0xfffffffffffe6fcb]        # 0x1001ab0
 101aae5:	nop
 101aae6:	lea    rax,[rip+0xfffffffffffe9f93]        # 0x1004a80
 101aaed:	mov    QWORD PTR [rbp-0x21],rax
 101aaf1:	xor    edi,edi
 101aaf3:	mov    r15d,edi
 101aaf6:	mov    QWORD PTR [rbp-0x19],rdi
 101aafa:	mov    QWORD PTR [rbp-0x1],rdi
 101aafe:	mov    QWORD PTR [rbp-0x9],rdi
 101ab02:	mov    QWORD PTR [rbp-0x11],rdi
 101ab06:	mov    DWORD PTR [rbp+0x7f],edi
 101ab09:	mov    QWORD PTR [rbp-0x9],rdi
 101ab0d:	mov    esi,edi
 101ab0f:	mov    QWORD PTR [rbp-0x11],rdi
 101ab13:	lea    ebx,[rdi+0x2c]
 101ab16:	lea    rcx,[rbp-0x49]
 101ab1a:	call   QWORD PTR [rip+0xfffffffffffe6fc8]        # 0x1001ae8
 101ab20:	mov    rdx,rax
 101ab23:	lea    r9,[rbp+0x7f]
 101ab27:	movzx  r8d,bx
 101ab2b:	lea    rcx,[rbp-0x31]
 101ab2f:	call   0x1035520
 101ab34:	nop
 101ab35:	mov    rcx,rax
 101ab38:	call   QWORD PTR [rip+0xfffffffffffe6faa]        # 0x1001ae8
 101ab3e:	mov    rdx,rax
 101ab41:	lea    rcx,[rbp-0x39]
 101ab45:	call   0x10353c0
 101ab4a:	nop
 101ab4b:	mov    rdx,rax
 101ab4e:	lea    rcx,[rbp-0x59]
 101ab52:	call   QWORD PTR [rip+0xfffffffffffe6f48]        # 0x1001aa0
 101ab58:	lea    rdx,[rip+0xfffffffffffe72b1]        # 0x1001e10
 101ab5f:	mov    rcx,rax
 101ab62:	call   QWORD PTR [rip+0xfffffffffffe6e98]        # 0x1001a00
 101ab68:	test   eax,eax
 101ab6a:	setne  bl
 101ab6d:	lea    rcx,[rbp-0x39]
 101ab71:	call   QWORD PTR [rip+0xfffffffffffe6f31]        # 0x1001aa8
 101ab77:	nop
 101ab78:	lea    rcx,[rbp-0x31]
 101ab7c:	call   QWORD PTR [rip+0xfffffffffffe6f26]        # 0x1001aa8
 101ab82:	test   bl,bl
 101ab84:	je     0x101adb1
 101ab8a:	nop    WORD PTR [rax+rax*1+0x0]
 101ab90:	mov    ecx,0x40
 101ab95:	call   0x103f9d2
 101ab9a:	mov    QWORD PTR [rbp-0x41],rax
 101ab9e:	test   rax,rax
 101aba1:	je     0x101abbe
 101aba3:	mov    rdx,QWORD PTR [r14+0xd8]
 101abaa:	mov    r8b,0x1
 101abad:	mov    rdx,QWORD PTR [rdx+0x10]
 101abb1:	mov    rcx,rax
 101abb4:	call   0x1030000
 101abb9:	mov    rbx,rax
 101abbc:	jmp    0x101abc1
 101abbe:	mov    rbx,rdi
 101abc1:	mov    rax,QWORD PTR [r14+0xd8]
 101abc8:	mov    QWORD PTR [rax+0x10],rbx
 101abcc:	mov    BYTE PTR [rbx+0x18],0x0
 101abd0:	lea    rcx,[rbx+0x20]
 101abd4:	lea    rdx,[rip+0xfffffffffffe817d]        # 0x1002d58
 101abdb:	call   QWORD PTR [rip+0xfffffffffffe6eb7]        # 0x1001a98
 101abe1:	lea    rcx,[rbx+0x28]
 101abe5:	lea    rdx,[rbp-0x59]
 101abe9:	call   QWORD PTR [rip+0xfffffffffffe6eb1]        # 0x1001aa0
 101abef:	lea    r8,[rbp-0x59]
 101abf3:	lea    rdx,[rip+0xfffffffffffe9cd2]        # 0x10048cc
 101abfa:	lea    rcx,[rbp+0xf]
 101abfe:	call   0x1013d70
 101ac03:	nop
 101ac04:	lea    r8,[rip+0xfffffffffffe9cc1]        # 0x10048cc
 101ac0b:	mov    rdx,rax
 101ac0e:	lea    rcx,[rbp+0x7]
 101ac12:	call   0x100af10
 101ac17:	nop
 101ac18:	mov    rdx,rax
 101ac1b:	lea    rcx,[rbp-0x51]
 101ac1f:	call   QWORD PTR [rip+0xfffffffffffe6e7b]        # 0x1001aa0
 101ac25:	nop
 101ac26:	lea    rcx,[rbp+0x7]
 101ac2a:	call   QWORD PTR [rip+0xfffffffffffe6e78]        # 0x1001aa8
 101ac30:	nop
 101ac31:	lea    rcx,[rbp+0xf]
 101ac35:	call   QWORD PTR [rip+0xfffffffffffe6e6d]        # 0x1001aa8
 101ac3b:	lea    rcx,[rbp-0x51]
 101ac3f:	call   QWORD PTR [rip+0xfffffffffffe6d4b]        # 0x1001990
 101ac45:	mov    QWORD PTR [rbp-0x41],rdi
 101ac49:	lea    r12,[rbx+0x8]
 101ac4d:	lea    rcx,[rbp-0x51]
 101ac51:	call   QWORD PTR [rip+0xfffffffffffe6e91]        # 0x1001ae8
 101ac57:	mov    rbx,rax
 101ac5a:	lea    rcx,[rbp-0x59]
 101ac5e:	call   QWORD PTR [rip+0xfffffffffffe6e84]        # 0x1001ae8
 101ac64:	mov    rdx,rax
 101ac67:	lea    rax,[rbp-0x41]
 101ac6b:	mov    QWORD PTR [rsp+0x28],rax
 101ac70:	mov    QWORD PTR [rsp+0x20],r12
 101ac75:	mov    r9d,DWORD PTR [rbp+0x6f]
 101ac79:	mov    r8,rbx
 101ac7c:	mov    rcx,r14
 101ac7f:	call   0x101af20
 101ac84:	test   al,al
 101ac86:	jne    0x101acb6
 101ac88:	mov    rax,QWORD PTR [r14+0x8]
 101ac8c:	movsxd rcx,DWORD PTR [rax+0x4]
 101ac90:	add    rcx,0x8
 101ac94:	add    rcx,r14
 101ac97:	mov    rax,QWORD PTR [rcx]
 101ac9a:	mov    BYTE PTR [rsp+0x28],0x1
 101ac9f:	mov    BYTE PTR [rsp+0x20],0x1
 101aca4:	xor    r9d,r9d
 101aca7:	xor    r8d,r8d
 101acaa:	mov    edx,0xc000c3e8
 101acaf:	call   QWORD PTR [rax]
 101acb1:	xor    r13b,r13b
 101acb4:	jmp    0x101ad13
 101acb6:	test   rsi,rsi
 101acb9:	js     0x101adab
 101acbf:	lea    rdx,[rsi+0x1]
 101acc3:	or     r8,0xffffffffffffffff
 101acc7:	lea    rcx,[rbp-0x21]
 101accb:	call   0x102d780
 101acd0:	mov    r11,QWORD PTR [r12]
 101acd4:	mov    r15,QWORD PTR [rbp-0x19]
 101acd8:	mov    QWORD PTR [r15+rsi*8],r11
 101acdc:	mov    rsi,QWORD PTR [r14+0xb0]
 101ace3:	test   rsi,rsi
 101ace6:	js     0x101ada5
 101acec:	lea    rdx,[rsi+0x1]
 101acf0:	or     r8,0xffffffffffffffff
 101acf4:	lea    rcx,[r14+0xa0]
 101acfb:	call   0x10239a0
 101ad00:	mov    r11,QWORD PTR [r14+0xa8]
 101ad07:	mov    rax,QWORD PTR [rbp-0x41]
 101ad0b:	mov    QWORD PTR [r11+rsi*8],rax
 101ad0f:	mov    rsi,QWORD PTR [rbp-0x11]
 101ad13:	lea    rdx,[rip+0xfffffffffffe70f6]        # 0x1001e10
 101ad1a:	lea    rcx,[rbp-0x59]
 101ad1e:	call   QWORD PTR [rip+0xfffffffffffe6d74]        # 0x1001a98
 101ad24:	lea    rcx,[rbp-0x49]
 101ad28:	call   QWORD PTR [rip+0xfffffffffffe6dba]        # 0x1001ae8
 101ad2e:	mov    rdx,rax
 101ad31:	lea    r9,[rbp+0x7f]
 101ad35:	mov    r8d,0x2c
 101ad3b:	lea    rcx,[rbp-0x31]
 101ad3f:	call   0x1035520
 101ad44:	nop
 101ad45:	mov    rcx,rax
 101ad48:	call   QWORD PTR [rip+0xfffffffffffe6d9a]        # 0x1001ae8
 101ad4e:	mov    rdx,rax
 101ad51:	lea    rcx,[rbp-0x39]
 101ad55:	call   0x10353c0
 101ad5a:	nop
 101ad5b:	mov    rdx,rax
 101ad5e:	lea    rcx,[rbp-0x59]
 101ad62:	call   QWORD PTR [rip+0xfffffffffffe6d38]        # 0x1001aa0
 101ad68:	lea    rdx,[rip+0xfffffffffffe70a1]        # 0x1001e10
 101ad6f:	mov    rcx,rax
 101ad72:	call   QWORD PTR [rip+0xfffffffffffe6c88]        # 0x1001a00
 101ad78:	test   eax,eax
 101ad7a:	setne  bl
 101ad7d:	lea    rcx,[rbp-0x39]
 101ad81:	call   QWORD PTR [rip+0xfffffffffffe6d21]        # 0x1001aa8
 101ad87:	nop
 101ad88:	lea    rcx,[rbp-0x31]
 101ad8c:	call   QWORD PTR [rip+0xfffffffffffe6d16]        # 0x1001aa8
 101ad92:	test   bl,bl
 101ad94:	jne    0x101ab90
 101ad9a:	test   r13b,r13b
 101ad9d:	je     0x101aea7
 101ada3:	jmp    0x101adb1
 101ada5:	call   0x103f972
 101adaa:	int3   
 101adab:	call   0x103f972
 101adb0:	int3   
 101adb1:	lea    rcx,[rbp-0x29]
 101adb5:	call   QWORD PTR [rip+0xfffffffffffe6d05]        # 0x1001ac0
 101adbb:	nop
 101adbc:	mov    rbx,QWORD PTR [r14+0xd8]
 101adc3:	lea    rcx,[rip+0xfffffffffffe9bd6]        # 0x10049a0
 101adca:	call   0x103fa26
 101adcf:	mov    r12d,eax
 101add2:	xor    edx,edx
 101add4:	div    DWORD PTR [rbx+0xf8]
 101adda:	mov    rax,QWORD PTR [rbx+0xf0]
 101ade1:	test   rax,rax
 101ade4:	je     0x101ae3b
 101ade6:	mov    rbx,QWORD PTR [rax+rdx*8]
 101adea:	test   rbx,rbx
 101aded:	je     0x101ae3b
 101adef:	cmp    DWORD PTR [rbx+0x18],r12d
 101adf3:	jne    0x101ae10
 101adf5:	lea    rdx,[rip+0xfffffffffffe9ba4]        # 0x10049a0
 101adfc:	mov    rcx,rbx
 101adff:	call   QWORD PTR [rip+0xfffffffffffe6bfb]        # 0x1001a00
 101ae05:	mov    ecx,edi
 101ae07:	test   eax,eax
 101ae09:	sete   cl
 101ae0c:	test   ecx,ecx
 101ae0e:	jne    0x101ae16
 101ae10:	mov    rbx,QWORD PTR [rbx+0x10]
 101ae14:	jmp    0x101adea
 101ae16:	lea    rdx,[rbx+0x8]
 101ae1a:	lea    rcx,[rbp-0x29]
 101ae1e:	call   QWORD PTR [rip+0xfffffffffffe6c7c]        # 0x1001aa0
 101ae24:	lea    rcx,[rbp-0x29]
 101ae28:	call   QWORD PTR [rip+0xfffffffffffe6cba]        # 0x1001ae8
 101ae2e:	mov    rcx,rax
 101ae31:	call   QWORD PTR [rip+0xfffffffffffe6909]        # 0x1001740
 101ae37:	test   eax,eax
 101ae39:	jne    0x101ae9c
 101ae3b:	mov    eax,DWORD PTR [rip+0x48ae3]        # 0x1063924
 101ae41:	mov    rsi,QWORD PTR [rbp-0x11]
 101ae45:	mov    r15,QWORD PTR [rbp-0x19]
 101ae49:	cmp    eax,0x2
 101ae4c:	jge    0x101ae72
 101ae4e:	mov    DWORD PTR [rsp+0x20],0x1
 101ae56:	or     r9d,0xffffffff
 101ae5a:	mov    r8d,0x1
 101ae60:	mov    rdx,r15
 101ae63:	mov    ecx,esi
 101ae65:	call   QWORD PTR [rip+0xfffffffffffe652d]        # 0x1001398
 101ae6b:	cmp    eax,0xc0
 101ae70:	jne    0x101ae9c
 101ae72:	mov    rax,QWORD PTR [r14+0x8]
 101ae76:	movsxd rcx,DWORD PTR [rax+0x4]
 101ae7a:	add    rcx,0x8
 101ae7e:	add    rcx,r14
 101ae81:	mov    rax,QWORD PTR [rcx]
 101ae84:	mov    BYTE PTR [rsp+0x28],0x1
 101ae89:	mov    BYTE PTR [rsp+0x20],0x1
 101ae8e:	xor    r9d,r9d
 101ae91:	xor    r8d,r8d
 101ae94:	mov    edx,0x8000c423
 101ae99:	call   QWORD PTR [rax]
 101ae9b:	nop
 101ae9c:	lea    rcx,[rbp-0x29]
 101aea0:	call   QWORD PTR [rip+0xfffffffffffe6c02]        # 0x1001aa8
 101aea6:	nop
 101aea7:	lea    rax,[rip+0xfffffffffffe9bd2]        # 0x1004a80
 101aeae:	mov    QWORD PTR [rbp-0x21],rax
 101aeb2:	test   r15,r15
 101aeb5:	je     0x101aed3
 101aeb7:	test   rsi,rsi
 101aeba:	jle    0x101aeca
 101aebc:	nop    DWORD PTR [rax+0x0]
 101aec0:	inc    edi
 101aec2:	movsxd rax,edi
 101aec5:	cmp    rax,rsi
 101aec8:	jl     0x101aec0
 101aeca:	mov    rcx,r15
 101aecd:	call   0x103f9c6
 101aed2:	nop
 101aed3:	lea    rcx,[rbp-0x49]
 101aed7:	call   QWORD PTR [rip+0xfffffffffffe6bcb]        # 0x1001aa8
 101aedd:	nop
 101aede:	lea    rcx,[rbp-0x51]
 101aee2:	call   QWORD PTR [rip+0xfffffffffffe6bc0]        # 0x1001aa8
 101aee8:	nop
 101aee9:	lea    rcx,[rbp-0x59]
 101aeed:	call   QWORD PTR [rip+0xfffffffffffe6bb5]        # 0x1001aa8
 101aef3:	movzx  eax,r13b
 101aef7:	mov    rbx,QWORD PTR [rsp+0xf0]
 101aeff:	add    rsp,0xb0
 101af06:	pop    r15
 101af08:	pop    r14
 101af0a:	pop    r13
 101af0c:	pop    r12
 101af0e:	pop    rdi
 101af0f:	pop    rsi
 101af10:	pop    rbp
 101af11:	ret    
 101af12:	int3   
 101af13:	int3   
 101af14:	int3   
 101af15:	int3   
 101af16:	int3   
 101af17:	int3   
 101af18:	int3   
 101af19:	int3   
 101af1a:	int3   
 101af1b:	int3   
 101af1c:	int3   
 101af1d:	int3   
 101af1e:	int3   
 101af1f:	int3   
 101af20:	mov    rax,rsp
 101af23:	mov    DWORD PTR [rax+0x20],r9d
 101af27:	mov    QWORD PTR [rax+0x10],rdx
 101af2b:	mov    QWORD PTR [rax+0x8],rcx
 101af2f:	push   rbx
 101af30:	push   rsi
 101af31:	push   rdi
 101af32:	push   r12
 101af34:	push   r13
 101af36:	push   r14
 101af38:	push   r15
 101af3a:	sub    rsp,0xd0
 101af41:	mov    QWORD PTR [rax-0x48],0xfffffffffffffffe
 101af49:	mov    r14d,r9d
 101af4c:	mov    rdi,r8
 101af4f:	mov    rbx,rdx
 101af52:	mov    r15,rcx
 101af55:	lea    rcx,[rax-0x50]
 101af59:	call   QWORD PTR [rip+0xfffffffffffe6b61]        # 0x1001ac0
 101af5f:	nop
 101af60:	mov    edx,0x4000c351
 101af65:	lea    rcx,[rsp+0x78]
 101af6a:	call   0x10132d0
 101af6f:	nop
 101af70:	mov    rcx,rax
 101af73:	call   QWORD PTR [rip+0xfffffffffffe6b6f]        # 0x1001ae8
 101af79:	mov    rdx,rax
 101af7c:	mov    r8,rbx
 101af7f:	lea    rcx,[rsp+0xb8]
 101af87:	call   QWORD PTR [rip+0xfffffffffffe6ab3]        # 0x1001a40
 101af8d:	nop
 101af8e:	lea    rcx,[rsp+0x78]
 101af93:	call   QWORD PTR [rip+0xfffffffffffe6b0f]        # 0x1001aa8
 101af99:	mov    rax,QWORD PTR [r15+0x8]
 101af9d:	movsxd rcx,DWORD PTR [rax+0x4]
 101afa1:	mov    rbx,QWORD PTR [rcx+r15*1+0x8]
 101afa6:	lea    rcx,[rsp+0xb8]
 101afae:	call   QWORD PTR [rip+0xfffffffffffe6b34]        # 0x1001ae8
 101afb4:	mov    r8,rax
 101afb7:	mov    rax,QWORD PTR [r15+0x8]
 101afbb:	movsxd rcx,DWORD PTR [rax+0x4]
 101afbf:	add    rcx,0x8
 101afc3:	add    rcx,r15
 101afc6:	mov    BYTE PTR [rsp+0x30],0x1
 101afcb:	mov    BYTE PTR [rsp+0x28],0x1
 101afd0:	xor    r12d,r12d
 101afd3:	mov    DWORD PTR [rsp+0x20],r12d
 101afd8:	xor    r9d,r9d
 101afdb:	mov    edx,0x4000c351
 101afe0:	call   QWORD PTR [rbx+0x8]
 101afe3:	xor    r13b,r13b
 101afe6:	lea    rcx,[rsp+0x90]
 101afee:	call   QWORD PTR [rip+0xfffffffffffe6acc]        # 0x1001ac0
 101aff4:	nop
 101aff5:	lea    rcx,[rsp+0x98]
 101affd:	call   QWORD PTR [rip+0xfffffffffffe6abd]        # 0x1001ac0
 101b003:	nop
 101b004:	mov    rcx,QWORD PTR [r15+0xd8]
 101b00b:	add    rcx,0xe8
 101b012:	lea    r8,[rsp+0x90]
 101b01a:	lea    rdx,[rip+0xfffffffffffe991f]        # 0x1004940
 101b021:	call   0x1023ce0
 101b026:	test   eax,eax
 101b028:	je     0x101b352
 101b02e:	mov    rcx,QWORD PTR [r15+0xd8]
 101b035:	add    rcx,0xe8
 101b03c:	lea    r8,[rsp+0x98]
 101b044:	lea    rdx,[rip+0xfffffffffffe992d]        # 0x1004978
 101b04b:	call   0x1023ce0
 101b050:	test   eax,eax
 101b052:	je     0x101b352
 101b058:	lea    rcx,[rsp+0x78]
 101b05d:	call   QWORD PTR [rip+0xfffffffffffe6a5d]        # 0x1001ac0
 101b063:	nop
 101b064:	lea    rdx,[rip+0xfffffffffffe6da5]        # 0x1001e10
 101b06b:	lea    rcx,[rsp+0xb0]
 101b073:	call   QWORD PTR [rip+0xfffffffffffe6a37]        # 0x1001ab0
 101b079:	nop
 101b07a:	lea    rdx,[rip+0xfffffffffffe6d8f]        # 0x1001e10
 101b081:	lea    rcx,[rsp+0x88]
 101b089:	call   QWORD PTR [rip+0xfffffffffffe6a21]        # 0x1001ab0
 101b08f:	nop
 101b090:	xor    r14b,r14b
 101b093:	mov    BYTE PTR [rsp+0x70],r14b
 101b098:	mov    DWORD PTR [rsp+0x80],r12d
 101b0a0:	lea    rcx,[rsp+0xa0]
 101b0a8:	call   QWORD PTR [rip+0xfffffffffffe6a12]        # 0x1001ac0
 101b0ae:	nop
 101b0af:	mov    rcx,QWORD PTR [r15+0xd8]
 101b0b6:	add    rcx,0xe8
 101b0bd:	lea    r8,[rsp+0xa0]
 101b0c5:	lea    rdx,[rip+0xfffffffffffe98d4]        # 0x10049a0
 101b0cc:	call   0x1023ce0
 101b0d1:	test   eax,eax
 101b0d3:	je     0x101b0f3
 101b0d5:	lea    rcx,[rsp+0xa0]
 101b0dd:	call   QWORD PTR [rip+0xfffffffffffe6a05]        # 0x1001ae8
 101b0e3:	mov    rcx,rax
 101b0e6:	call   QWORD PTR [rip+0xfffffffffffe6654]        # 0x1001740
 101b0ec:	mov    DWORD PTR [rsp+0x80],eax
 101b0f3:	mov    rcx,QWORD PTR [r15+0xd8]
 101b0fa:	add    rcx,0xe8
 101b101:	lea    r8,[rsp+0x78]
 101b106:	lea    rdx,[rip+0xfffffffffffe98c3]        # 0x10049d0
 101b10d:	call   0x1023ce0
 101b112:	test   eax,eax
 101b114:	je     0x101b133
 101b116:	lea    rdx,[rip+0xfffffffffffe79ff]        # 0x1002b1c
 101b11d:	lea    rcx,[rsp+0x78]
 101b122:	call   QWORD PTR [rip+0xfffffffffffe6938]        # 0x1001a60
 101b128:	test   eax,eax
 101b12a:	sete   r14b
 101b12e:	mov    BYTE PTR [rsp+0x70],r14b
 101b133:	mov    rcx,QWORD PTR [r15+0xd8]
 101b13a:	add    rcx,0xe8
 101b141:	lea    r8,[rsp+0xb0]
 101b149:	lea    rdx,[rip+0xfffffffffffe98b0]        # 0x1004a00
 101b150:	call   0x1023ce0
 101b155:	test   eax,eax
 101b157:	sete   al
 101b15a:	test   al,al
 101b15c:	jne    0x101b253
 101b162:	mov    rcx,QWORD PTR [r15+0xd8]
 101b169:	add    rcx,0xe8
 101b170:	lea    r8,[rsp+0x88]
 101b178:	lea    rdx,[rip+0xfffffffffffe98a1]        # 0x1004a20
 101b17f:	call   0x1023ce0
 101b184:	mov    ecx,0x98
 101b189:	call   0x103f9d2
 101b18e:	mov    QWORD PTR [rsp+0xa8],rax
 101b196:	test   rax,rax
 101b199:	je     0x101b24b
 101b19f:	lea    rcx,[rsp+0x88]
 101b1a7:	call   QWORD PTR [rip+0xfffffffffffe693b]        # 0x1001ae8
 101b1ad:	mov    r14,rax
 101b1b0:	lea    rcx,[rsp+0xb0]
 101b1b8:	call   QWORD PTR [rip+0xfffffffffffe692a]        # 0x1001ae8
 101b1be:	mov    rdi,rax
 101b1c1:	lea    rcx,[rsp+0x98]
 101b1c9:	call   QWORD PTR [rip+0xfffffffffffe6919]        # 0x1001ae8
 101b1cf:	mov    rsi,rax
 101b1d2:	lea    rcx,[rsp+0x90]
 101b1da:	call   QWORD PTR [rip+0xfffffffffffe6908]        # 0x1001ae8
 101b1e0:	mov    rbx,rax
 101b1e3:	lea    rcx,[r15+0x10]
 101b1e7:	call   QWORD PTR [rip+0xfffffffffffe68fb]        # 0x1001ae8
 101b1ed:	mov    QWORD PTR [rsp+0x68],r14
 101b1f2:	mov    QWORD PTR [rsp+0x60],rdi
 101b1f7:	mov    BYTE PTR [rsp+0x58],0x0
 101b1fc:	movzx  ecx,BYTE PTR [rsp+0x70]
 101b201:	mov    BYTE PTR [rsp+0x50],cl
 101b205:	mov    ecx,DWORD PTR [rsp+0x80]
 101b20c:	mov    DWORD PTR [rsp+0x48],ecx
 101b210:	mov    QWORD PTR [rsp+0x40],rsi
 101b215:	mov    QWORD PTR [rsp+0x38],rbx
 101b21a:	mov    BYTE PTR [rsp+0x30],0x1
 101b21f:	mov    QWORD PTR [rsp+0x28],r12
 101b224:	mov    QWORD PTR [rsp+0x20],rax
 101b229:	mov    r9,QWORD PTR [rsp+0x118]
 101b231:	mov    r8d,DWORD PTR [rsp+0x128]
 101b239:	mov    rdx,r15
 101b23c:	mov    rcx,QWORD PTR [rsp+0xa8]
 101b244:	call   0x103dad0
 101b249:	jmp    0x101b24e
 101b24b:	mov    rax,r12
 101b24e:	jmp    0x101b2f5
 101b253:	mov    ecx,0x98
 101b258:	call   0x103f9d2
 101b25d:	mov    rsi,rax
 101b260:	mov    QWORD PTR [rsp+0xa8],rax
 101b268:	test   rax,rax
 101b26b:	je     0x101b2f2
 101b271:	lea    rcx,[rsp+0x98]
 101b279:	call   QWORD PTR [rip+0xfffffffffffe6869]        # 0x1001ae8
 101b27f:	mov    rdi,rax
 101b282:	lea    rcx,[rsp+0x90]
 101b28a:	call   QWORD PTR [rip+0xfffffffffffe6858]        # 0x1001ae8
 101b290:	mov    rbx,rax
 101b293:	lea    rcx,[r15+0x10]
 101b297:	call   QWORD PTR [rip+0xfffffffffffe684b]        # 0x1001ae8
 101b29d:	mov    QWORD PTR [rsp+0x68],r12
 101b2a2:	mov    QWORD PTR [rsp+0x60],r12
 101b2a7:	mov    BYTE PTR [rsp+0x58],0x1
 101b2ac:	mov    BYTE PTR [rsp+0x50],r14b
 101b2b1:	mov    ecx,DWORD PTR [rsp+0x80]
 101b2b8:	mov    DWORD PTR [rsp+0x48],ecx
 101b2bc:	mov    QWORD PTR [rsp+0x40],rdi
 101b2c1:	mov    QWORD PTR [rsp+0x38],rbx
 101b2c6:	mov    BYTE PTR [rsp+0x30],0x1
 101b2cb:	mov    QWORD PTR [rsp+0x28],r12
 101b2d0:	mov    QWORD PTR [rsp+0x20],rax
 101b2d5:	mov    r9,QWORD PTR [rsp+0x118]
 101b2dd:	mov    r8d,DWORD PTR [rsp+0x128]
 101b2e5:	mov    rdx,r15
 101b2e8:	mov    rcx,rsi
 101b2eb:	call   0x103dad0
 101b2f0:	jmp    0x101b2f5
 101b2f2:	mov    rax,r12
 101b2f5:	mov    rbx,QWORD PTR [rsp+0x138]
 101b2fd:	mov    QWORD PTR [rbx],rax
 101b300:	lea    rcx,[rsp+0x88]
 101b308:	call   QWORD PTR [rip+0xfffffffffffe67e2]        # 0x1001af0
 101b30e:	test   eax,eax
 101b310:	je     0x101b320
 101b312:	lea    rcx,[rsp+0x88]
 101b31a:	call   0x1030790
 101b31f:	nop
 101b320:	lea    rcx,[rsp+0xa0]
 101b328:	call   QWORD PTR [rip+0xfffffffffffe677a]        # 0x1001aa8
 101b32e:	nop
 101b32f:	lea    rcx,[rsp+0x88]
 101b337:	call   QWORD PTR [rip+0xfffffffffffe676b]        # 0x1001aa8
 101b33d:	nop
 101b33e:	lea    rcx,[rsp+0xb0]
 101b346:	call   QWORD PTR [rip+0xfffffffffffe675c]        # 0x1001aa8
 101b34c:	nop
 101b34d:	jmp    0x101b434
 101b352:	lea    rcx,[rsp+0x78]
 101b357:	call   QWORD PTR [rip+0xfffffffffffe6763]        # 0x1001ac0
 101b35d:	nop
 101b35e:	lea    rcx,[rip+0xfffffffffffe96eb]        # 0x1004a50
 101b365:	lea    rax,[rip+0xfffffffffffe96f4]        # 0x1004a60
 101b36c:	test   r14d,r14d
 101b36f:	cmove  rax,rcx
 101b373:	mov    r8,QWORD PTR [r15+0xd8]
 101b37a:	lea    rcx,[rip+0xfffffffffffe96bf]        # 0x1004a40
 101b381:	mov    QWORD PTR [rsp+0x30],rcx
 101b386:	mov    QWORD PTR [rsp+0x28],rax
 101b38b:	mov    QWORD PTR [rsp+0x20],rdi
 101b390:	mov    r9,QWORD PTR [r15+0x10]
 101b394:	mov    r8,QWORD PTR [r8+0x78]
 101b398:	lea    rdx,[rip+0xfffffffffffe9589]        # 0x1004928
 101b39f:	lea    rcx,[rsp+0x78]
 101b3a4:	call   QWORD PTR [rip+0xfffffffffffe6696]        # 0x1001a40
 101b3aa:	mov    ecx,0x98
 101b3af:	call   0x103f9d2
 101b3b4:	mov    rdi,rax
 101b3b7:	mov    QWORD PTR [rsp+0xa8],rax
 101b3bf:	test   rax,rax
 101b3c2:	je     0x101b426
 101b3c4:	lea    rcx,[rsp+0x78]
 101b3c9:	call   QWORD PTR [rip+0xfffffffffffe6719]        # 0x1001ae8
 101b3cf:	mov    rbx,rax
 101b3d2:	lea    rcx,[r15+0x10]
 101b3d6:	call   QWORD PTR [rip+0xfffffffffffe670c]        # 0x1001ae8
 101b3dc:	mov    QWORD PTR [rsp+0x68],r12
 101b3e1:	mov    QWORD PTR [rsp+0x60],r12
 101b3e6:	mov    BYTE PTR [rsp+0x58],0x1
 101b3eb:	mov    BYTE PTR [rsp+0x50],0x0
 101b3f0:	mov    DWORD PTR [rsp+0x48],r12d
 101b3f5:	mov    QWORD PTR [rsp+0x40],r12
 101b3fa:	mov    QWORD PTR [rsp+0x38],r12
 101b3ff:	mov    BYTE PTR [rsp+0x30],0x1
 101b404:	mov    QWORD PTR [rsp+0x28],rbx
 101b409:	mov    QWORD PTR [rsp+0x20],rax
 101b40e:	mov    r9,QWORD PTR [rsp+0x118]
 101b416:	mov    r8d,r14d
 101b419:	mov    rdx,r15
 101b41c:	mov    rcx,rdi
 101b41f:	call   0x103dad0
 101b424:	jmp    0x101b429
 101b426:	mov    rax,r12
 101b429:	mov    rbx,QWORD PTR [rsp+0x138]
 101b431:	mov    QWORD PTR [rbx],rax
 101b434:	lea    rcx,[rsp+0x78]
 101b439:	call   QWORD PTR [rip+0xfffffffffffe6669]        # 0x1001aa8
 101b43f:	nop
 101b440:	lea    rcx,[rsp+0x98]
 101b448:	call   QWORD PTR [rip+0xfffffffffffe665a]        # 0x1001aa8
 101b44e:	nop
 101b44f:	lea    rcx,[rsp+0x90]
 101b457:	call   QWORD PTR [rip+0xfffffffffffe664b]        # 0x1001aa8
 101b45d:	nop
 101b45e:	jmp    0x101b477
 101b460:	xor    r12d,r12d
 101b463:	mov    r15,QWORD PTR [rsp+0x110]
 101b46b:	mov    rbx,QWORD PTR [rsp+0x138]
 101b473:	movzx  r13d,r12b
 101b477:	mov    r9,QWORD PTR [rbx]
 101b47a:	test   r9,r9
 101b47d:	je     0x101b4e3
 101b47f:	lea    rax,[rsp+0x138]
 101b487:	mov    QWORD PTR [rsp+0x28],rax
 101b48c:	mov    DWORD PTR [rsp+0x20],r12d
 101b491:	lea    r8,[rip+0x118f8]        # 0x102cd90
 101b498:	xor    edx,edx
 101b49a:	xor    ecx,ecx
 101b49c:	call   QWORD PTR [rip+0xfffffffffffe61c6]        # 0x1001668
 101b4a2:	mov    rcx,QWORD PTR [rsp+0x130]
 101b4aa:	mov    QWORD PTR [rcx],rax
 101b4ad:	test   rax,rax
 101b4b0:	jne    0x101b4e0
 101b4b2:	mov    rax,QWORD PTR [r15+0x8]
 101b4b6:	movsxd rcx,DWORD PTR [rax+0x4]
 101b4ba:	add    rcx,0x8
 101b4be:	add    rcx,r15
 101b4c1:	mov    rax,QWORD PTR [rcx]
 101b4c4:	mov    BYTE PTR [rsp+0x28],0x1
 101b4c9:	mov    BYTE PTR [rsp+0x20],0x1
 101b4ce:	mov    r9d,0x2
 101b4d4:	xor    r8d,r8d
 101b4d7:	mov    edx,0xc000c446
 101b4dc:	call   QWORD PTR [rax]
 101b4de:	jmp    0x101b4e3
 101b4e0:	mov    r13b,0x1
 101b4e3:	lea    rcx,[rsp+0xb8]
 101b4eb:	call   QWORD PTR [rip+0xfffffffffffe65b7]        # 0x1001aa8
 101b4f1:	movzx  eax,r13b
 101b4f5:	add    rsp,0xd0
 101b4fc:	pop    r15
 101b4fe:	pop    r14
 101b500:	pop    r13
 101b502:	pop    r12
 101b504:	pop    rdi
 101b505:	pop    rsi
 101b506:	pop    rbx
 101b507:	ret    
 101b508:	int3   
 101b509:	int3   
 101b50a:	int3   
 101b50b:	int3   
 101b50c:	int3   
 101b50d:	int3   
 101b50e:	int3   
 101b50f:	int3   
 101b510:	mov    rax,rsp
 101b513:	push   rbp
 101b514:	push   rsi
 101b515:	push   rdi
 101b516:	push   r12
 101b518:	push   r13
 101b51a:	push   r14
 101b51c:	push   r15
 101b51e:	sub    rsp,0x80
 101b525:	mov    QWORD PTR [rax-0x60],0xfffffffffffffffe
 101b52d:	mov    QWORD PTR [rax+0x10],rbx
 101b531:	mov    r13,rdx
 101b534:	mov    r14,rcx
 101b537:	lea    rcx,[rax+0x20]
 101b53b:	call   QWORD PTR [rip+0xfffffffffffe657f]        # 0x1001ac0
 101b541:	nop
 101b542:	lea    rcx,[rsp+0xd0]
 101b54a:	call   QWORD PTR [rip+0xfffffffffffe6570]        # 0x1001ac0
 101b550:	nop
 101b551:	xor    r15d,r15d
 101b554:	xor    r12b,r12b
 101b557:	mov    rbx,QWORD PTR [r14+0xe8]
 101b55e:	test   rbx,rbx
 101b561:	je     0x101b72b
 101b567:	test   BYTE PTR [rbx],0x1
 101b56a:	je     0x101b71e
 101b570:	test   r12b,r12b
 101b573:	jne    0x101b5a1
 101b575:	mov    rax,QWORD PTR [r14+0x8]
 101b579:	movsxd rcx,DWORD PTR [rax+0x4]
 101b57d:	add    rcx,0x8
 101b581:	add    rcx,r14
 101b584:	mov    rax,QWORD PTR [rcx]
 101b587:	mov    BYTE PTR [rsp+0x28],0x1
 101b58c:	mov    BYTE PTR [rsp+0x20],0x1
 101b591:	xor    r9d,r9d
 101b594:	xor    r8d,r8d
 101b597:	mov    edx,0x4000c3e9
 101b59c:	call   QWORD PTR [rax]
 101b59e:	mov    r12b,0x1
 101b5a1:	inc    r15d
 101b5a4:	mov    r9,r13
 101b5a7:	lea    r8,[rip+0xfffffffffffe94fa]        # 0x1004aa8
 101b5ae:	lea    rdx,[rip+0xfffffffffffe950b]        # 0x1004ac0
 101b5b5:	lea    rcx,[rsp+0xd8]
 101b5bd:	call   QWORD PTR [rip+0xfffffffffffe647d]        # 0x1001a40
 101b5c3:	lea    rcx,[rsp+0xc0]
 101b5cb:	call   QWORD PTR [rip+0xfffffffffffe64ef]        # 0x1001ac0
 101b5d1:	nop
 101b5d2:	mov    r8d,DWORD PTR [r14+0x24]
 101b5d6:	lea    rdx,[rip+0xfffffffffffe94fb]        # 0x1004ad8
 101b5dd:	lea    rcx,[rsp+0xc0]
 101b5e5:	call   QWORD PTR [rip+0xfffffffffffe6455]        # 0x1001a40
 101b5eb:	lea    rdx,[rsp+0x40]
 101b5f0:	mov    rcx,rbx
 101b5f3:	call   0x1012e00
 101b5f8:	nop
 101b5f9:	mov    rbp,QWORD PTR [r14]
 101b5fc:	mov    rcx,rax
 101b5ff:	call   QWORD PTR [rip+0xfffffffffffe64e3]        # 0x1001ae8
 101b605:	mov    rsi,rax
 101b608:	lea    rcx,[rsp+0xd8]
 101b610:	call   QWORD PTR [rip+0xfffffffffffe64d2]        # 0x1001ae8
 101b616:	mov    rdi,rax
 101b619:	lea    rcx,[rsp+0xc0]
 101b621:	call   QWORD PTR [rip+0xfffffffffffe64c1]        # 0x1001ae8
 101b627:	mov    rdx,rax
 101b62a:	mov    BYTE PTR [rsp+0x38],0x0
 101b62f:	mov    BYTE PTR [rsp+0x30],0x0
 101b634:	lea    rax,[rsp+0x60]
 101b639:	mov    QWORD PTR [rsp+0x28],rax
 101b63e:	mov    QWORD PTR [rsp+0x20],rsi
 101b643:	mov    r9b,0x1
 101b646:	mov    r8,rdi
 101b649:	mov    rcx,r14
 101b64c:	call   QWORD PTR [rbp+0x118]
 101b652:	test   al,al
 101b654:	sete   dil
 101b658:	lea    rcx,[rsp+0x40]
 101b65d:	call   QWORD PTR [rip+0xfffffffffffe6445]        # 0x1001aa8
 101b663:	test   dil,dil
 101b666:	je     0x101b70d
 101b66c:	lea    rdx,[rsp+0x50]
 101b671:	mov    rcx,rbx
 101b674:	call   0x1012e50
 101b679:	mov    rdi,rax
 101b67c:	mov    edx,0xc000c353
 101b681:	lea    rcx,[rsp+0x48]
 101b686:	call   0x10132d0
 101b68b:	nop
 101b68c:	mov    rcx,rax
 101b68f:	call   QWORD PTR [rip+0xfffffffffffe6453]        # 0x1001ae8
 101b695:	mov    rdx,rax
 101b698:	mov    r8,QWORD PTR [rdi]
 101b69b:	lea    rcx,[rsp+0xd0]
 101b6a3:	call   QWORD PTR [rip+0xfffffffffffe6397]        # 0x1001a40
 101b6a9:	nop
 101b6aa:	lea    rcx,[rsp+0x48]
 101b6af:	call   QWORD PTR [rip+0xfffffffffffe63f3]        # 0x1001aa8
 101b6b5:	nop
 101b6b6:	lea    rcx,[rsp+0x50]
 101b6bb:	call   QWORD PTR [rip+0xfffffffffffe63e7]        # 0x1001aa8
 101b6c1:	mov    rax,QWORD PTR [r14+0x8]
 101b6c5:	movsxd rcx,DWORD PTR [rax+0x4]
 101b6c9:	mov    rdi,QWORD PTR [rcx+r14*1+0x8]
 101b6ce:	lea    rcx,[rsp+0xd0]
 101b6d6:	call   QWORD PTR [rip+0xfffffffffffe640c]        # 0x1001ae8
 101b6dc:	mov    r8,rax
 101b6df:	mov    rax,QWORD PTR [r14+0x8]
 101b6e3:	movsxd rcx,DWORD PTR [rax+0x4]
 101b6e7:	add    rcx,0x8
 101b6eb:	add    rcx,r14
 101b6ee:	mov    BYTE PTR [rsp+0x30],0x1
 101b6f3:	mov    BYTE PTR [rsp+0x28],0x1
 101b6f8:	mov    DWORD PTR [rsp+0x20],0x0
 101b700:	xor    r9d,r9d
 101b703:	mov    edx,0xc000c353
 101b708:	call   QWORD PTR [rdi+0x8]
 101b70b:	jmp    0x101b710
 101b70d:	dec    r15d
 101b710:	lea    rcx,[rsp+0xc0]
 101b718:	call   QWORD PTR [rip+0xfffffffffffe638a]        # 0x1001aa8
 101b71e:	mov    rbx,QWORD PTR [rbx+0x18]
 101b722:	test   rbx,rbx
 101b725:	jne    0x101b567
 101b72b:	test   r15d,r15d
 101b72e:	sete   bl
 101b731:	lea    rcx,[rsp+0xd0]
 101b739:	call   QWORD PTR [rip+0xfffffffffffe6369]        # 0x1001aa8
 101b73f:	nop
 101b740:	lea    rcx,[rsp+0xd8]
 101b748:	call   QWORD PTR [rip+0xfffffffffffe635a]        # 0x1001aa8
 101b74e:	movzx  eax,bl
 101b751:	mov    rbx,QWORD PTR [rsp+0xc8]
 101b759:	add    rsp,0x80
 101b760:	pop    r15
 101b762:	pop    r14
 101b764:	pop    r13
 101b766:	pop    r12
 101b768:	pop    rdi
 101b769:	pop    rsi
 101b76a:	pop    rbp
 101b76b:	ret    
 101b76c:	int3   
 101b76d:	int3   
 101b76e:	int3   
 101b76f:	int3   
 101b770:	int3   
 101b771:	int3   
 101b772:	int3   
 101b773:	int3   
 101b774:	int3   
 101b775:	int3   
 101b776:	int3   
 101b777:	int3   
 101b778:	int3   
 101b779:	int3   
 101b77a:	int3   
 101b77b:	int3   
 101b77c:	int3   
 101b77d:	int3   
 101b77e:	int3   
 101b77f:	int3   
 101b780:	mov    QWORD PTR [rsp+0x10],rdx
 101b785:	push   rbp
 101b786:	push   rsi
 101b787:	push   rdi
 101b788:	push   r12
 101b78a:	push   r13
 101b78c:	push   r14
 101b78e:	push   r15
 101b790:	lea    rbp,[rsp-0x40]
 101b795:	sub    rsp,0x140
 101b79c:	mov    QWORD PTR [rbp+0x20],0xfffffffffffffffe
 101b7a4:	mov    QWORD PTR [rsp+0x180],rbx
 101b7ac:	mov    r14,rdx
 101b7af:	mov    r12,rcx
 101b7b2:	mov    DWORD PTR [rbp-0x80],0x0
 101b7b9:	mov    sil,0x1
 101b7bc:	mov    BYTE PTR [rbp+0x90],sil
 101b7c3:	lea    rcx,[rbp-0x58]
 101b7c7:	call   QWORD PTR [rip+0xfffffffffffe62f3]        # 0x1001ac0
 101b7cd:	nop
 101b7ce:	lea    rcx,[rbp-0x68]
 101b7d2:	call   QWORD PTR [rip+0xfffffffffffe62e8]        # 0x1001ac0
 101b7d8:	nop
 101b7d9:	lea    rcx,[rbp-0x78]
 101b7dd:	call   QWORD PTR [rip+0xfffffffffffe62dd]        # 0x1001ac0
 101b7e3:	nop
 101b7e4:	xor    cl,cl
 101b7e6:	mov    BYTE PTR [rbp+0x98],cl
 101b7ec:	mov    eax,DWORD PTR [rip+0x48132]        # 0x1063924
 101b7f2:	test   eax,eax
 101b7f4:	jne    0x101be8a
 101b7fa:	mov    r13,QWORD PTR [r12+0xe8]
 101b802:	test   r13,r13
 101b805:	je     0x101be8a
 101b80b:	lea    r15,[rip+0xfffffffffffe9476]        # 0x1004c88
 101b812:	lea    rdi,[rip+0x48117]        # 0x1063930
 101b819:	mov    ebx,DWORD PTR [rbp-0x80]
 101b81c:	nop    DWORD PTR [rax+0x0]
 101b820:	test   BYTE PTR [r13+0x0],0x1
 101b825:	je     0x101be7d
 101b82b:	test   cl,cl
 101b82d:	jne    0x101b860
 101b82f:	mov    rax,QWORD PTR [r12+0x8]
 101b834:	movsxd rcx,DWORD PTR [rax+0x4]
 101b838:	add    rcx,0x8
 101b83c:	add    rcx,r12
 101b83f:	mov    rax,QWORD PTR [rcx]
 101b842:	mov    BYTE PTR [rsp+0x28],0x1
 101b847:	mov    BYTE PTR [rsp+0x20],0x1
 101b84c:	xor    r9d,r9d
 101b84f:	xor    r8d,r8d
 101b852:	mov    edx,0x4000c364
 101b857:	call   QWORD PTR [rax]
 101b859:	mov    BYTE PTR [rbp+0x98],0x1
 101b860:	mov    rdx,QWORD PTR [r12+0xd8]
 101b868:	cmp    BYTE PTR [rdx+0xbc],0x0
 101b86f:	je     0x101b885
 101b871:	add    rdx,0x78
 101b875:	lea    rcx,[rbp+0x10]
 101b879:	call   QWORD PTR [rip+0xfffffffffffe6139]        # 0x10019b8
 101b87f:	nop
 101b880:	or     ebx,0x1
 101b883:	jmp    0x101b8bb
 101b885:	lea    rdx,[rbp-0x40]
 101b889:	mov    rcx,r13
 101b88c:	call   0x1012e00
 101b891:	nop
 101b892:	or     ebx,0x2
 101b895:	mov    DWORD PTR [rbp-0x80],ebx
 101b898:	mov    rcx,rax
 101b89b:	call   QWORD PTR [rip+0xfffffffffffe6247]        # 0x1001ae8
 101b8a1:	mov    r8,rax
 101b8a4:	lea    r9,[rip+0xfffffffffffe9475]        # 0x1004d20
 101b8ab:	lea    rdx,[rbp+0x0]
 101b8af:	mov    rcx,r12
 101b8b2:	call   0x101f6e0
 101b8b7:	nop
 101b8b8:	or     ebx,0x4
 101b8bb:	mov    DWORD PTR [rbp-0x80],ebx
 101b8be:	mov    rdx,rax
 101b8c1:	lea    rcx,[rbp-0x70]
 101b8c5:	call   QWORD PTR [rip+0xfffffffffffe60ed]        # 0x10019b8
 101b8cb:	nop
 101b8cc:	test   bl,0x4
 101b8cf:	je     0x101b8e2
 101b8d1:	and    ebx,0xfffffffb
 101b8d4:	mov    DWORD PTR [rbp-0x80],ebx
 101b8d7:	lea    rcx,[rbp+0x0]
 101b8db:	call   QWORD PTR [rip+0xfffffffffffe61c7]        # 0x1001aa8
 101b8e1:	nop
 101b8e2:	test   bl,0x2
 101b8e5:	je     0x101b8f8
 101b8e7:	and    ebx,0xfffffffd
 101b8ea:	mov    DWORD PTR [rbp-0x80],ebx
 101b8ed:	lea    rcx,[rbp-0x40]
 101b8f1:	call   QWORD PTR [rip+0xfffffffffffe61b1]        # 0x1001aa8
 101b8f7:	nop
 101b8f8:	test   bl,0x1
 101b8fb:	je     0x101b90d
 101b8fd:	and    ebx,0xfffffffe
 101b900:	mov    DWORD PTR [rbp-0x80],ebx
 101b903:	lea    rcx,[rbp+0x10]
 101b907:	call   QWORD PTR [rip+0xfffffffffffe619b]        # 0x1001aa8
 101b90d:	mov    QWORD PTR [rsp+0x20],r15
 101b912:	mov    r9,rdi
 101b915:	mov    r8d,DWORD PTR [r12+0x24]
 101b91a:	lea    rdx,[rip+0xfffffffffffe92df]        # 0x1004c00
 101b921:	lea    rcx,[rbp-0x78]
 101b925:	call   QWORD PTR [rip+0xfffffffffffe6115]        # 0x1001a40
 101b92b:	lea    rdx,[rbp-0x30]
 101b92f:	mov    rcx,r13
 101b932:	call   0x1012e00
 101b937:	nop
 101b938:	mov    rsi,QWORD PTR [r12]
 101b93c:	mov    rcx,rax
 101b93f:	call   QWORD PTR [rip+0xfffffffffffe61a3]        # 0x1001ae8
 101b945:	mov    rdi,rax
 101b948:	lea    rcx,[rbp-0x78]
 101b94c:	call   QWORD PTR [rip+0xfffffffffffe6196]        # 0x1001ae8
 101b952:	mov    rdx,rax
 101b955:	mov    BYTE PTR [rsp+0x38],0x0
 101b95a:	mov    BYTE PTR [rsp+0x30],0x1
 101b95f:	lea    rax,[rbp+0x28]
 101b963:	mov    QWORD PTR [rsp+0x28],rax
 101b968:	mov    QWORD PTR [rsp+0x20],rdi
 101b96d:	mov    r9b,0x1
 101b970:	lea    r8,[rip+0xfffffffffffe96d9]        # 0x1005050
 101b977:	mov    rcx,r12
 101b97a:	call   QWORD PTR [rsi+0x118]
 101b980:	nop
 101b981:	lea    rcx,[rbp-0x30]
 101b985:	call   QWORD PTR [rip+0xfffffffffffe611d]        # 0x1001aa8
 101b98b:	cmp    BYTE PTR [r12+0x28],0x0
 101b991:	je     0x101b9d4
 101b993:	lea    rdx,[rbp-0x50]
 101b997:	mov    rcx,r13
 101b99a:	call   0x1012e00
 101b99f:	nop
 101b9a0:	mov    rcx,rax
 101b9a3:	call   QWORD PTR [rip+0xfffffffffffe613f]        # 0x1001ae8
 101b9a9:	mov    rdi,rax
 101b9ac:	lea    rcx,[rbp-0x70]
 101b9b0:	call   QWORD PTR [rip+0xfffffffffffe6132]        # 0x1001ae8
 101b9b6:	mov    rdx,rax
 101b9b9:	mov    r8,rdi
 101b9bc:	mov    rcx,r12
 101b9bf:	call   0x1022bd0
 101b9c4:	nop
 101b9c5:	lea    rcx,[rbp-0x50]
 101b9c9:	call   QWORD PTR [rip+0xfffffffffffe60d9]        # 0x1001aa8
 101b9cf:	jmp    0x101baaf
 101b9d4:	cmp    BYTE PTR [r12+0x78],0x0
 101b9da:	je     0x101b9f4
 101b9dc:	lea    rdx,[rip+0xfffffffffffe7089]        # 0x1002a6c
 101b9e3:	lea    rcx,[rbp-0x48]
 101b9e7:	call   0x1031d30
 101b9ec:	mov    rsi,rax
 101b9ef:	or     ebx,0x8
 101b9f2:	jmp    0x101ba09
 101b9f4:	lea    rdx,[r12+0x10]
 101b9f9:	lea    rcx,[rbp-0x10]
 101b9fd:	call   QWORD PTR [rip+0xfffffffffffe5fb5]        # 0x10019b8
 101ba03:	mov    rsi,rax
 101ba06:	or     ebx,0x10
 101ba09:	mov    DWORD PTR [rbp-0x80],ebx
 101ba0c:	lea    rdx,[rbp+0x18]
 101ba10:	mov    rcx,r13
 101ba13:	call   0x1012e00
 101ba18:	mov    r14,rax
 101ba1b:	lea    rcx,[rbp-0x70]
 101ba1f:	call   QWORD PTR [rip+0xfffffffffffe60c3]        # 0x1001ae8
 101ba25:	mov    rdi,rax
 101ba28:	mov    rcx,rsi
 101ba2b:	call   QWORD PTR [rip+0xfffffffffffe60b7]        # 0x1001ae8
 101ba31:	mov    rdx,rax
 101ba34:	mov    r8,rdi
 101ba37:	lea    rcx,[rbp-0x20]
 101ba3b:	call   0x1030800
 101ba40:	mov    rsi,rax
 101ba43:	mov    rcx,r14
 101ba46:	call   QWORD PTR [rip+0xfffffffffffe609c]        # 0x1001ae8
 101ba4c:	mov    rdi,rax
 101ba4f:	mov    rcx,rsi
 101ba52:	call   QWORD PTR [rip+0xfffffffffffe6090]        # 0x1001ae8
 101ba58:	mov    rdx,rax
 101ba5b:	mov    r8,rdi
 101ba5e:	mov    rcx,r12
 101ba61:	call   0x1022bd0
 101ba66:	nop
 101ba67:	lea    rcx,[rbp-0x20]
 101ba6b:	call   QWORD PTR [rip+0xfffffffffffe6037]        # 0x1001aa8
 101ba71:	nop
 101ba72:	lea    rcx,[rbp+0x18]
 101ba76:	call   QWORD PTR [rip+0xfffffffffffe602c]        # 0x1001aa8
 101ba7c:	nop
 101ba7d:	test   bl,0x10
 101ba80:	je     0x101ba93
 101ba82:	and    ebx,0xffffffef
 101ba85:	mov    DWORD PTR [rbp-0x80],ebx
 101ba88:	lea    rcx,[rbp-0x10]
 101ba8c:	call   QWORD PTR [rip+0xfffffffffffe6016]        # 0x1001aa8
 101ba92:	nop
 101ba93:	test   bl,0x8
 101ba96:	je     0x101baa8
 101ba98:	and    ebx,0xfffffff7
 101ba9b:	mov    DWORD PTR [rbp-0x80],ebx
 101ba9e:	lea    rcx,[rbp-0x48]
 101baa2:	call   QWORD PTR [rip+0xfffffffffffe6000]        # 0x1001aa8
 101baa8:	mov    r14,QWORD PTR [rbp+0x88]
 101baaf:	mov    r8d,DWORD PTR [r12+0x24]
 101bab4:	lea    rdx,[rip+0xfffffffffffe95bd]        # 0x1005078
 101babb:	lea    rcx,[rbp-0x68]
 101babf:	call   QWORD PTR [rip+0xfffffffffffe5f7b]        # 0x1001a40
 101bac5:	mov    rdx,r14
 101bac8:	mov    rcx,QWORD PTR [r12+0xe0]
 101bad0:	call   0x100fce0
 101bad5:	mov    ecx,DWORD PTR [rax+0xc]
 101bad8:	mov    eax,0x88888889
 101badd:	imul   ecx
 101badf:	lea    r15d,[rcx+rdx*1]
 101bae3:	sar    r15d,0x5
 101bae7:	mov    eax,r15d
 101baea:	shr    eax,0x1f
 101baed:	add    r15d,eax
 101baf0:	test   r15d,r15d
 101baf3:	jle    0x101bb27
 101baf5:	mov    rdx,r14
 101baf8:	mov    rcx,QWORD PTR [r12+0xe0]
 101bb00:	call   0x100fce0
 101bb05:	mov    r11,rax
 101bb08:	mov    ecx,DWORD PTR [rax+0xc]
 101bb0b:	mov    eax,0x88888889
 101bb10:	imul   ecx
 101bb12:	add    edx,ecx
 101bb14:	sar    edx,0x5
 101bb17:	mov    eax,edx
 101bb19:	shr    eax,0x1f
 101bb1c:	add    edx,eax
 101bb1e:	imul   edx,edx,0x3c
 101bb21:	sub    ecx,edx
 101bb23:	mov    DWORD PTR [r11+0xc],ecx
 101bb27:	mov    rdx,r14
 101bb2a:	mov    rcx,QWORD PTR [r12+0xe0]
 101bb32:	call   0x100fce0
 101bb37:	lea    rdx,[rax+0x20]
 101bb3b:	lea    rcx,[rbp-0x60]
 101bb3f:	call   QWORD PTR [rip+0xfffffffffffe5e73]        # 0x10019b8
 101bb45:	nop
 101bb46:	lea    rcx,[rbp-0x60]
 101bb4a:	call   QWORD PTR [rip+0xfffffffffffe5e40]        # 0x1001990
 101bb50:	cmp    DWORD PTR [r12+0x24],0x8
 101bb56:	jl     0x101bc22
 101bb5c:	xor    r8d,r8d
 101bb5f:	lea    rdx,[rip+0xfffffffffffe9532]        # 0x1005098
 101bb66:	lea    rcx,[rbp-0x60]
 101bb6a:	call   QWORD PTR [rip+0xfffffffffffe5ee8]        # 0x1001a58
 101bb70:	cmp    eax,0xffffffff
 101bb73:	jne    0x101bc22
 101bb79:	lea    rdx,[rbp-0x38]
 101bb7d:	mov    rcx,r13
 101bb80:	call   0x1012e00
 101bb85:	mov    rsi,rax
 101bb88:	mov    rdx,r14
 101bb8b:	mov    rcx,QWORD PTR [r12+0xe0]
 101bb93:	call   0x100fce0
 101bb98:	mov    rdi,rax
 101bb9b:	mov    rdx,r14
 101bb9e:	mov    rcx,QWORD PTR [r12+0xe0]
 101bba6:	call   0x100fce0
 101bbab:	mov    r11,rax
 101bbae:	mov    rax,QWORD PTR [rdi+0x20]
 101bbb2:	mov    QWORD PTR [rsp+0x58],rax
 101bbb7:	lea    rcx,[rip+0xfffffffffffe8f52]        # 0x1004b10
 101bbbe:	mov    QWORD PTR [rsp+0x50],rcx
 101bbc3:	mov    rax,QWORD PTR [rsi]
 101bbc6:	mov    QWORD PTR [rsp+0x48],rax
 101bbcb:	lea    rax,[rip+0x4775e]        # 0x1063330
 101bbd2:	mov    QWORD PTR [rsp+0x40],rax
 101bbd7:	mov    rax,QWORD PTR [r12+0x10]
 101bbdc:	mov    QWORD PTR [rsp+0x38],rax
 101bbe1:	mov    rax,QWORD PTR [rbp-0x70]
 101bbe5:	mov    QWORD PTR [rsp+0x30],rax
 101bbea:	lea    rax,[rip+0x47d3f]        # 0x1063930
 101bbf1:	mov    QWORD PTR [rsp+0x28],rax
 101bbf6:	mov    rax,QWORD PTR [r11+0x28]
 101bbfa:	mov    QWORD PTR [rsp+0x20],rax
 101bbff:	mov    r9d,DWORD PTR [r12+0x24]
 101bc04:	mov    r8,rcx
 101bc07:	lea    rdx,[rip+0xfffffffffffe96c2]        # 0x10052d0
 101bc0e:	lea    rcx,[rbp-0x78]
 101bc12:	call   QWORD PTR [rip+0xfffffffffffe5e28]        # 0x1001a40
 101bc18:	nop
 101bc19:	lea    rcx,[rbp-0x38]
 101bc1d:	jmp    0x101bce2
 101bc22:	lea    rdx,[rbp-0x28]
 101bc26:	mov    rcx,r13
 101bc29:	call   0x1012e00
 101bc2e:	mov    rdi,rax
 101bc31:	mov    r14d,DWORD PTR [r12+0x24]
 101bc36:	mov    rdx,QWORD PTR [rbp+0x88]
 101bc3d:	mov    rcx,QWORD PTR [r12+0xe0]
 101bc45:	call   0x100fce0
 101bc4a:	mov    rsi,rax
 101bc4d:	mov    rdx,QWORD PTR [rbp+0x88]
 101bc54:	mov    rcx,QWORD PTR [r12+0xe0]
 101bc5c:	call   0x100fce0
 101bc61:	mov    r11,rax
 101bc64:	lea    rcx,[rip+0xfffffffffffe8ea5]        # 0x1004b10
 101bc6b:	mov    QWORD PTR [rsp+0x70],rcx
 101bc70:	mov    rax,QWORD PTR [rdi]
 101bc73:	mov    QWORD PTR [rsp+0x68],rax
 101bc78:	lea    rax,[rip+0x476b1]        # 0x1063330
 101bc7f:	mov    QWORD PTR [rsp+0x60],rax
 101bc84:	mov    rax,QWORD PTR [r12+0x10]
 101bc89:	mov    QWORD PTR [rsp+0x58],rax
 101bc8e:	mov    rax,QWORD PTR [rbp-0x70]
 101bc92:	mov    QWORD PTR [rsp+0x50],rax
 101bc97:	mov    eax,DWORD PTR [r12+0x24]
 101bc9c:	mov    DWORD PTR [rsp+0x48],eax
 101bca0:	mov    eax,DWORD PTR [rsi+0xc]
 101bca3:	mov    DWORD PTR [rsp+0x40],eax
 101bca7:	mov    DWORD PTR [rsp+0x38],r15d
 101bcac:	lea    rax,[rip+0x47c7d]        # 0x1063930
 101bcb3:	mov    QWORD PTR [rsp+0x30],rax
 101bcb8:	mov    rax,QWORD PTR [r11+0x28]
 101bcbc:	mov    QWORD PTR [rsp+0x28],rax
 101bcc1:	mov    DWORD PTR [rsp+0x20],r14d
 101bcc6:	mov    r9,rcx
 101bcc9:	mov    r8d,r14d
 101bccc:	lea    rdx,[rip+0xfffffffffffe93ed]        # 0x10050c0
 101bcd3:	lea    rcx,[rbp-0x78]
 101bcd7:	call   QWORD PTR [rip+0xfffffffffffe5d63]        # 0x1001a40
 101bcdd:	nop
 101bcde:	lea    rcx,[rbp-0x28]
 101bce2:	call   QWORD PTR [rip+0xfffffffffffe5dc0]        # 0x1001aa8
 101bce8:	lea    rdx,[rip+0xfffffffffffe9691]        # 0x1005380
 101bcef:	lea    rcx,[rbp-0x68]
 101bcf3:	call   QWORD PTR [rip+0xfffffffffffe5d9f]        # 0x1001a98
 101bcf9:	lea    rdx,[rbp-0x18]
 101bcfd:	mov    rcx,r13
 101bd00:	call   0x1012e00
 101bd05:	mov    rdi,rax
 101bd08:	mov    r15,QWORD PTR [r12]
 101bd0c:	mov    rcx,QWORD PTR [r12+0xd8]
 101bd14:	add    rcx,0x10
 101bd18:	mov    r9b,0x1
 101bd1b:	lea    r8,[rip+0xfffffffffffe6e2e]        # 0x1002b50
 101bd22:	lea    rdx,[rip+0x47727]        # 0x1063450
 101bd29:	call   0x10300e0
 101bd2e:	mov    r14,rax
 101bd31:	mov    rcx,rdi
 101bd34:	call   QWORD PTR [rip+0xfffffffffffe5dae]        # 0x1001ae8
 101bd3a:	mov    rsi,rax
 101bd3d:	lea    rdx,[rip+0xfffffffffffe8dcc]        # 0x1004b10
 101bd44:	lea    rcx,[rbp-0x68]
 101bd48:	call   QWORD PTR [rip+0xfffffffffffe5d42]        # 0x1001a90
 101bd4e:	mov    rcx,rax
 101bd51:	call   QWORD PTR [rip+0xfffffffffffe5d91]        # 0x1001ae8
 101bd57:	mov    rdi,rax
 101bd5a:	lea    rcx,[rbp-0x78]
 101bd5e:	call   QWORD PTR [rip+0xfffffffffffe5d84]        # 0x1001ae8
 101bd64:	mov    rdx,rax
 101bd67:	mov    BYTE PTR [rsp+0x38],0x0
 101bd6c:	mov    BYTE PTR [rsp+0x30],0x1
 101bd71:	mov    QWORD PTR [rsp+0x28],r14
 101bd76:	mov    QWORD PTR [rsp+0x20],rsi
 101bd7b:	xor    r9d,r9d
 101bd7e:	mov    r8,rdi
 101bd81:	mov    rcx,r12
 101bd84:	call   QWORD PTR [r15+0x118]
 101bd8b:	test   al,al
 101bd8d:	sete   dil
 101bd91:	lea    rcx,[rbp-0x18]
 101bd95:	call   QWORD PTR [rip+0xfffffffffffe5d0d]        # 0x1001aa8
 101bd9b:	test   dil,dil
 101bd9e:	je     0x101be45
 101bda4:	xor    sil,sil
 101bda7:	mov    BYTE PTR [rbp+0x90],sil
 101bdae:	lea    rdx,[rbp+0x8]
 101bdb2:	mov    rcx,r13
 101bdb5:	call   0x1012e50
 101bdba:	mov    rdi,rax
 101bdbd:	mov    edx,0xc000c365
 101bdc2:	lea    rcx,[rbp-0x8]
 101bdc6:	call   0x10132d0
 101bdcb:	nop
 101bdcc:	mov    rcx,rax
 101bdcf:	call   QWORD PTR [rip+0xfffffffffffe5d13]        # 0x1001ae8
 101bdd5:	mov    rdx,rax
 101bdd8:	mov    r8,QWORD PTR [rdi]
 101bddb:	lea    rcx,[rbp-0x58]
 101bddf:	call   QWORD PTR [rip+0xfffffffffffe5c5b]        # 0x1001a40
 101bde5:	nop
 101bde6:	lea    rcx,[rbp-0x8]
 101bdea:	call   QWORD PTR [rip+0xfffffffffffe5cb8]        # 0x1001aa8
 101bdf0:	nop
 101bdf1:	lea    rcx,[rbp+0x8]
 101bdf5:	call   QWORD PTR [rip+0xfffffffffffe5cad]        # 0x1001aa8
 101bdfb:	mov    rax,QWORD PTR [r12+0x8]
 101be00:	movsxd rcx,DWORD PTR [rax+0x4]
 101be04:	mov    rdi,QWORD PTR [rcx+r12*1+0x8]
 101be09:	lea    rcx,[rbp-0x58]
 101be0d:	call   QWORD PTR [rip+0xfffffffffffe5cd5]        # 0x1001ae8
 101be13:	mov    r8,rax
 101be16:	mov    rax,QWORD PTR [r12+0x8]
 101be1b:	movsxd rcx,DWORD PTR [rax+0x4]
 101be1f:	add    rcx,0x8
 101be23:	add    rcx,r12
 101be26:	mov    BYTE PTR [rsp+0x30],0x1
 101be2b:	mov    BYTE PTR [rsp+0x28],0x1
 101be30:	mov    DWORD PTR [rsp+0x20],0x0
 101be38:	xor    r9d,r9d
 101be3b:	mov    edx,0xc000c365
 101be40:	call   QWORD PTR [rdi+0x8]
 101be43:	jmp    0x101be4c
 101be45:	movzx  esi,BYTE PTR [rbp+0x90]
 101be4c:	lea    rcx,[rbp-0x60]
 101be50:	call   QWORD PTR [rip+0xfffffffffffe5c52]        # 0x1001aa8
 101be56:	nop
 101be57:	lea    rcx,[rbp-0x70]
 101be5b:	call   QWORD PTR [rip+0xfffffffffffe5c47]        # 0x1001aa8
 101be61:	mov    r14,QWORD PTR [rbp+0x88]
 101be68:	movzx  ecx,BYTE PTR [rbp+0x98]
 101be6f:	lea    rdi,[rip+0x47aba]        # 0x1063930
 101be76:	lea    r15,[rip+0xfffffffffffe8e0b]        # 0x1004c88
 101be7d:	mov    r13,QWORD PTR [r13+0x18]
 101be81:	test   r13,r13
 101be84:	jne    0x101b820
 101be8a:	lea    rcx,[rbp-0x78]
 101be8e:	call   QWORD PTR [rip+0xfffffffffffe5c14]        # 0x1001aa8
 101be94:	nop
 101be95:	lea    rcx,[rbp-0x68]
 101be99:	call   QWORD PTR [rip+0xfffffffffffe5c09]        # 0x1001aa8
 101be9f:	nop
 101bea0:	lea    rcx,[rbp-0x58]
 101bea4:	call   QWORD PTR [rip+0xfffffffffffe5bfe]        # 0x1001aa8
 101beaa:	movzx  eax,sil
 101beae:	mov    rbx,QWORD PTR [rsp+0x180]
 101beb6:	add    rsp,0x140
 101bebd:	pop    r15
 101bebf:	pop    r14
 101bec1:	pop    r13
 101bec3:	pop    r12
 101bec5:	pop    rdi
 101bec6:	pop    rsi
 101bec7:	pop    rbp
 101bec8:	ret    
 101bec9:	int3   
 101beca:	int3   
 101becb:	int3   
 101becc:	int3   
 101becd:	int3   
 101bece:	int3   
 101becf:	int3   
 101bed0:	mov    QWORD PTR [rsp+0x10],rdx
 101bed5:	push   rbp
 101bed6:	push   rsi
 101bed7:	push   rdi
 101bed8:	push   r12
 101beda:	push   r13
 101bedc:	push   r14
 101bede:	push   r15
 101bee0:	lea    rbp,[rsp-0x40]
 101bee5:	sub    rsp,0x140
 101beec:	mov    QWORD PTR [rbp+0x18],0xfffffffffffffffe
 101bef4:	mov    QWORD PTR [rsp+0x180],rbx
 101befc:	mov    r12,rdx
 101beff:	mov    r13,rcx
 101bf02:	mov    DWORD PTR [rsp+0x60],0x0
 101bf0a:	lea    rcx,[rsp+0x78]
 101bf0f:	call   QWORD PTR [rip+0xfffffffffffe5bab]        # 0x1001ac0
 101bf15:	nop
 101bf16:	lea    rcx,[rsp+0x70]
 101bf1b:	call   QWORD PTR [rip+0xfffffffffffe5b9f]        # 0x1001ac0
 101bf21:	nop
 101bf22:	lea    rcx,[rsp+0x68]
 101bf27:	call   QWORD PTR [rip+0xfffffffffffe5b93]        # 0x1001ac0
 101bf2d:	nop
 101bf2e:	lea    rcx,[rbp+0x0]
 101bf32:	call   QWORD PTR [rip+0xfffffffffffe5b88]        # 0x1001ac0
 101bf38:	nop
 101bf39:	mov    dil,0x1
 101bf3c:	mov    BYTE PTR [rbp+0x98],dil
 101bf43:	xor    cl,cl
 101bf45:	mov    BYTE PTR [rbp+0x90],cl
 101bf4b:	mov    eax,DWORD PTR [rip+0x479d3]        # 0x1063924
 101bf51:	test   eax,eax
 101bf53:	jne    0x101c642
 101bf59:	mov    r15,QWORD PTR [r13+0xe8]
 101bf60:	mov    QWORD PTR [rbp-0x78],r15
 101bf64:	test   r15,r15
 101bf67:	je     0x101c642
 101bf6d:	mov    ebx,DWORD PTR [rsp+0x60]
 101bf71:	test   BYTE PTR [r15],0x1
 101bf75:	je     0x101c631
 101bf7b:	test   cl,cl
 101bf7d:	jne    0x101bfaf
 101bf7f:	mov    rax,QWORD PTR [r13+0x8]
 101bf83:	movsxd rcx,DWORD PTR [rax+0x4]
 101bf87:	add    rcx,0x8
 101bf8b:	add    rcx,r13
 101bf8e:	mov    rax,QWORD PTR [rcx]
 101bf91:	mov    BYTE PTR [rsp+0x28],0x1
 101bf96:	mov    BYTE PTR [rsp+0x20],0x1
 101bf9b:	xor    r9d,r9d
 101bf9e:	xor    r8d,r8d
 101bfa1:	mov    edx,0x4000c366
 101bfa6:	call   QWORD PTR [rax]
 101bfa8:	mov    BYTE PTR [rbp+0x90],0x1
 101bfaf:	mov    rdx,r12
 101bfb2:	mov    rcx,QWORD PTR [r13+0xe0]
 101bfb9:	cmp    DWORD PTR [r13+0x24],0x8
 101bfbe:	jle    0x101c418
 101bfc4:	mov    BYTE PTR [rsp+0x64],0x1
 101bfc9:	call   0x100fce0
 101bfce:	mov    r9d,DWORD PTR [rax+0xc]
 101bfd2:	mov    r8d,DWORD PTR [r13+0x24]
 101bfd6:	lea    rdx,[rip+0xfffffffffffe9433]        # 0x1005410
 101bfdd:	lea    rcx,[rsp+0x68]
 101bfe2:	call   QWORD PTR [rip+0xfffffffffffe5a58]        # 0x1001a40
 101bfe8:	lea    rdx,[rbp+0x8]
 101bfec:	mov    rcx,r15
 101bfef:	call   0x1012e00
 101bff4:	mov    rdi,rax
 101bff7:	mov    r14,QWORD PTR [r13+0x0]
 101bffb:	mov    rcx,QWORD PTR [r13+0xd8]
 101c002:	add    rcx,0x10
 101c006:	mov    r9b,0x1
 101c009:	lea    r8,[rip+0xfffffffffffe9458]        # 0x1005468
 101c010:	lea    rdx,[rip+0x47439]        # 0x1063450
 101c017:	call   0x10300e0
 101c01c:	mov    rsi,rax
 101c01f:	mov    rcx,rdi
 101c022:	call   QWORD PTR [rip+0xfffffffffffe5ac0]        # 0x1001ae8
 101c028:	mov    rdi,rax
 101c02b:	lea    rcx,[rsp+0x68]
 101c030:	call   QWORD PTR [rip+0xfffffffffffe5ab2]        # 0x1001ae8
 101c036:	mov    rdx,rax
 101c039:	mov    BYTE PTR [rsp+0x38],0x0
 101c03e:	mov    BYTE PTR [rsp+0x30],0x1
 101c043:	mov    QWORD PTR [rsp+0x28],rsi
 101c048:	mov    QWORD PTR [rsp+0x20],rdi
 101c04d:	mov    r9b,0x1
 101c050:	lea    r8,[rip+0xfffffffffffe9421]        # 0x1005478
 101c057:	mov    rcx,r13
 101c05a:	call   QWORD PTR [r14+0x118]
 101c061:	test   al,al
 101c063:	sete   dil
 101c067:	lea    rcx,[rbp+0x8]
 101c06b:	call   QWORD PTR [rip+0xfffffffffffe5a37]        # 0x1001aa8
 101c071:	test   dil,dil
 101c074:	je     0x101c11b
 101c07a:	lea    rdx,[rbp-0x58]
 101c07e:	mov    rcx,r15
 101c081:	call   0x1012e50
 101c086:	mov    rdi,rax
 101c089:	mov    edx,0xc000c367
 101c08e:	lea    rcx,[rbp+0x10]
 101c092:	call   0x10132d0
 101c097:	nop
 101c098:	mov    rcx,rax
 101c09b:	call   QWORD PTR [rip+0xfffffffffffe5a47]        # 0x1001ae8
 101c0a1:	mov    rdx,rax
 101c0a4:	mov    r8,QWORD PTR [rdi]
 101c0a7:	lea    rcx,[rsp+0x70]
 101c0ac:	call   QWORD PTR [rip+0xfffffffffffe598e]        # 0x1001a40
 101c0b2:	nop
 101c0b3:	lea    rcx,[rbp+0x10]
 101c0b7:	call   QWORD PTR [rip+0xfffffffffffe59eb]        # 0x1001aa8
 101c0bd:	nop
 101c0be:	lea    rcx,[rbp-0x58]
 101c0c2:	call   QWORD PTR [rip+0xfffffffffffe59e0]        # 0x1001aa8
 101c0c8:	mov    rax,QWORD PTR [r13+0x8]
 101c0cc:	movsxd rcx,DWORD PTR [rax+0x4]
 101c0d0:	mov    rdi,QWORD PTR [rcx+r13*1+0x8]
 101c0d5:	lea    rcx,[rsp+0x70]
 101c0da:	call   QWORD PTR [rip+0xfffffffffffe5a08]        # 0x1001ae8
 101c0e0:	mov    r8,rax
 101c0e3:	mov    rax,QWORD PTR [r13+0x8]
 101c0e7:	movsxd rcx,DWORD PTR [rax+0x4]
 101c0eb:	add    rcx,0x8
 101c0ef:	add    rcx,r13
 101c0f2:	mov    BYTE PTR [rsp+0x30],0x1
 101c0f7:	mov    BYTE PTR [rsp+0x28],0x1
 101c0fc:	mov    DWORD PTR [rsp+0x20],0x0
 101c104:	xor    r9d,r9d
 101c107:	mov    edx,0xc000c367
 101c10c:	call   QWORD PTR [rdi+0x8]
 101c10f:	mov    BYTE PTR [rbp+0x98],0x0
 101c116:	jmp    0x101c4ca
 101c11b:	mov    rdx,QWORD PTR [r13+0xd8]
 101c122:	cmp    BYTE PTR [rdx+0xbc],0x0
 101c129:	je     0x101c13f
 101c12b:	add    rdx,0x78
 101c12f:	lea    rcx,[rbp-0x70]
 101c133:	call   QWORD PTR [rip+0xfffffffffffe587f]        # 0x10019b8
 101c139:	nop
 101c13a:	or     ebx,0x1
 101c13d:	jmp    0x101c176
 101c13f:	lea    rdx,[rbp-0x48]
 101c143:	mov    rcx,r15
 101c146:	call   0x1012e00
 101c14b:	nop
 101c14c:	or     ebx,0x2
 101c14f:	mov    DWORD PTR [rsp+0x60],ebx
 101c153:	mov    rcx,rax
 101c156:	call   QWORD PTR [rip+0xfffffffffffe598c]        # 0x1001ae8
 101c15c:	mov    r8,rax
 101c15f:	lea    r9,[rip+0xfffffffffffe8bba]        # 0x1004d20
 101c166:	lea    rdx,[rbp-0x18]
 101c16a:	mov    rcx,r13
 101c16d:	call   0x101f6e0
 101c172:	nop
 101c173:	or     ebx,0x4
 101c176:	mov    DWORD PTR [rsp+0x60],ebx
 101c17a:	mov    rdx,rax
 101c17d:	lea    rcx,[rbp-0x80]
 101c181:	call   QWORD PTR [rip+0xfffffffffffe5831]        # 0x10019b8
 101c187:	nop
 101c188:	test   bl,0x4
 101c18b:	je     0x101c19f
 101c18d:	and    ebx,0xfffffffb
 101c190:	mov    DWORD PTR [rsp+0x60],ebx
 101c194:	lea    rcx,[rbp-0x18]
 101c198:	call   QWORD PTR [rip+0xfffffffffffe590a]        # 0x1001aa8
 101c19e:	nop
 101c19f:	test   bl,0x2
 101c1a2:	je     0x101c1b6
 101c1a4:	and    ebx,0xfffffffd
 101c1a7:	mov    DWORD PTR [rsp+0x60],ebx
 101c1ab:	lea    rcx,[rbp-0x48]
 101c1af:	call   QWORD PTR [rip+0xfffffffffffe58f3]        # 0x1001aa8
 101c1b5:	nop
 101c1b6:	test   bl,0x1
 101c1b9:	je     0x101c1cc
 101c1bb:	and    ebx,0xfffffffe
 101c1be:	mov    DWORD PTR [rsp+0x60],ebx
 101c1c2:	lea    rcx,[rbp-0x70]
 101c1c6:	call   QWORD PTR [rip+0xfffffffffffe58dc]        # 0x1001aa8
 101c1cc:	lea    rax,[rip+0xfffffffffffe8a05]        # 0x1004bd8
 101c1d3:	mov    QWORD PTR [rsp+0x20],rax
 101c1d8:	lea    r9,[rip+0x47751]        # 0x1063930
 101c1df:	mov    r8d,DWORD PTR [r13+0x24]
 101c1e3:	lea    rdx,[rip+0xfffffffffffe8a16]        # 0x1004c00
 101c1ea:	lea    rcx,[rsp+0x68]
 101c1ef:	call   QWORD PTR [rip+0xfffffffffffe584b]        # 0x1001a40
 101c1f5:	lea    rdx,[rbp-0x38]
 101c1f9:	mov    rcx,r15
 101c1fc:	call   0x1012e00
 101c201:	nop
 101c202:	mov    rsi,QWORD PTR [r13+0x0]
 101c206:	mov    rcx,rax
 101c209:	call   QWORD PTR [rip+0xfffffffffffe58d9]        # 0x1001ae8
 101c20f:	mov    rdi,rax
 101c212:	lea    rcx,[rsp+0x68]
 101c217:	call   QWORD PTR [rip+0xfffffffffffe58cb]        # 0x1001ae8
 101c21d:	mov    rdx,rax
 101c220:	mov    BYTE PTR [rsp+0x38],0x0
 101c225:	mov    BYTE PTR [rsp+0x30],0x1
 101c22a:	lea    rax,[rbp+0x20]
 101c22e:	mov    QWORD PTR [rsp+0x28],rax
 101c233:	mov    QWORD PTR [rsp+0x20],rdi
 101c238:	mov    r9b,0x1
 101c23b:	lea    r8,[rip+0xfffffffffffe9256]        # 0x1005498
 101c242:	mov    rcx,r13
 101c245:	call   QWORD PTR [rsi+0x118]
 101c24b:	nop
 101c24c:	lea    rcx,[rbp-0x38]
 101c250:	call   QWORD PTR [rip+0xfffffffffffe5852]        # 0x1001aa8
 101c256:	cmp    BYTE PTR [r13+0x28],0x0
 101c25b:	je     0x101c298
 101c25d:	lea    rdx,[rbp-0x8]
 101c261:	mov    rcx,r15
 101c264:	call   0x1012e00
 101c269:	nop
 101c26a:	mov    rcx,rax
 101c26d:	call   QWORD PTR [rip+0xfffffffffffe5875]        # 0x1001ae8
 101c273:	mov    rdi,rax
 101c276:	lea    rcx,[rbp-0x80]
 101c27a:	call   QWORD PTR [rip+0xfffffffffffe5868]        # 0x1001ae8
 101c280:	mov    rdx,rax
 101c283:	mov    r8,rdi
 101c286:	mov    rcx,r13
 101c289:	call   0x1022bd0
 101c28e:	nop
 101c28f:	lea    rcx,[rbp-0x8]
 101c293:	jmp    0x101c367
 101c298:	cmp    BYTE PTR [r13+0x78],0x0
 101c29d:	je     0x101c2b7
 101c29f:	lea    rdx,[rip+0xfffffffffffe67c6]        # 0x1002a6c
 101c2a6:	lea    rcx,[rbp-0x50]
 101c2aa:	call   0x1031d30
 101c2af:	mov    rsi,rax
 101c2b2:	or     ebx,0x8
 101c2b5:	jmp    0x101c2cb
 101c2b7:	lea    rdx,[r13+0x10]
 101c2bb:	lea    rcx,[rbp-0x60]
 101c2bf:	call   QWORD PTR [rip+0xfffffffffffe56f3]        # 0x10019b8
 101c2c5:	mov    rsi,rax
 101c2c8:	or     ebx,0x10
 101c2cb:	mov    DWORD PTR [rsp+0x60],ebx
 101c2cf:	lea    rdx,[rbp-0x68]
 101c2d3:	mov    rcx,r15
 101c2d6:	call   0x1012e00
 101c2db:	mov    r14,rax
 101c2de:	lea    rcx,[rbp-0x80]
 101c2e2:	call   QWORD PTR [rip+0xfffffffffffe5800]        # 0x1001ae8
 101c2e8:	mov    rdi,rax
 101c2eb:	mov    rcx,rsi
 101c2ee:	call   QWORD PTR [rip+0xfffffffffffe57f4]        # 0x1001ae8
 101c2f4:	mov    rdx,rax
 101c2f7:	mov    r8,rdi
 101c2fa:	lea    rcx,[rbp-0x28]
 101c2fe:	call   0x1030800
 101c303:	mov    rsi,rax
 101c306:	mov    rcx,r14
 101c309:	call   QWORD PTR [rip+0xfffffffffffe57d9]        # 0x1001ae8
 101c30f:	mov    rdi,rax
 101c312:	mov    rcx,rsi
 101c315:	call   QWORD PTR [rip+0xfffffffffffe57cd]        # 0x1001ae8
 101c31b:	mov    rdx,rax
 101c31e:	mov    r8,rdi
 101c321:	mov    rcx,r13
 101c324:	call   0x1022bd0
 101c329:	nop
 101c32a:	lea    rcx,[rbp-0x28]
 101c32e:	call   QWORD PTR [rip+0xfffffffffffe5774]        # 0x1001aa8
 101c334:	nop
 101c335:	lea    rcx,[rbp-0x68]
 101c339:	call   QWORD PTR [rip+0xfffffffffffe5769]        # 0x1001aa8
 101c33f:	nop
 101c340:	test   bl,0x10
 101c343:	je     0x101c357
 101c345:	and    ebx,0xffffffef
 101c348:	mov    DWORD PTR [rsp+0x60],ebx
 101c34c:	lea    rcx,[rbp-0x60]
 101c350:	call   QWORD PTR [rip+0xfffffffffffe5752]        # 0x1001aa8
 101c356:	nop
 101c357:	test   bl,0x8
 101c35a:	je     0x101c36d
 101c35c:	and    ebx,0xfffffff7
 101c35f:	mov    DWORD PTR [rsp+0x60],ebx
 101c363:	lea    rcx,[rbp-0x50]
 101c367:	call   QWORD PTR [rip+0xfffffffffffe573b]        # 0x1001aa8
 101c36d:	lea    rsi,[rip+0xfffffffffffe8834]        # 0x1004ba8
 101c374:	mov    rdx,rsi
 101c377:	lea    rcx,[rsp+0x78]
 101c37c:	call   QWORD PTR [rip+0xfffffffffffe5716]        # 0x1001a98
 101c382:	lea    rdx,[rbp-0x40]
 101c386:	mov    rcx,r15
 101c389:	call   0x1012e00
 101c38e:	mov    rdi,rax
 101c391:	mov    rdx,r12
 101c394:	mov    rcx,QWORD PTR [r13+0xe0]
 101c39b:	call   0x100fce0
 101c3a0:	mov    rax,QWORD PTR [rax+0x20]
 101c3a4:	mov    QWORD PTR [rsp+0x50],rax
 101c3a9:	mov    QWORD PTR [rsp+0x48],rsi
 101c3ae:	mov    rax,QWORD PTR [rdi]
 101c3b1:	mov    QWORD PTR [rsp+0x40],rax
 101c3b6:	lea    rax,[rip+0x46f73]        # 0x1063330
 101c3bd:	mov    QWORD PTR [rsp+0x38],rax
 101c3c2:	mov    rax,QWORD PTR [r13+0x10]
 101c3c6:	mov    QWORD PTR [rsp+0x30],rax
 101c3cb:	mov    rax,QWORD PTR [rbp-0x80]
 101c3cf:	mov    QWORD PTR [rsp+0x28],rax
 101c3d4:	lea    rax,[rip+0x47555]        # 0x1063930
 101c3db:	mov    QWORD PTR [rsp+0x20],rax
 101c3e0:	mov    r9d,DWORD PTR [r13+0x24]
 101c3e4:	lea    r8,[rip+0xfffffffffffe8725]        # 0x1004b10
 101c3eb:	lea    rdx,[rip+0xfffffffffffe90de]        # 0x10054d0
 101c3f2:	lea    rcx,[rsp+0x68]
 101c3f7:	call   QWORD PTR [rip+0xfffffffffffe5643]        # 0x1001a40
 101c3fd:	nop
 101c3fe:	lea    rcx,[rbp-0x40]
 101c402:	call   QWORD PTR [rip+0xfffffffffffe56a0]        # 0x1001aa8
 101c408:	nop
 101c409:	lea    rcx,[rbp-0x80]
 101c40d:	call   QWORD PTR [rip+0xfffffffffffe5695]        # 0x1001aa8
 101c413:	jmp    0x101c4ca
 101c418:	mov    BYTE PTR [rsp+0x64],0x0
 101c41d:	call   0x100fce0
 101c422:	mov    ecx,DWORD PTR [rax+0xc]
 101c425:	mov    eax,0x88888889
 101c42a:	imul   ecx
 101c42c:	lea    esi,[rcx+rdx*1]
 101c42f:	sar    esi,0x5
 101c432:	mov    eax,esi
 101c434:	shr    eax,0x1f
 101c437:	add    esi,eax
 101c439:	mov    rdx,r12
 101c43c:	mov    rcx,QWORD PTR [r13+0xe0]
 101c443:	call   0x100fce0
 101c448:	mov    r14d,DWORD PTR [rax+0xc]
 101c44c:	test   esi,esi
 101c44e:	jle    0x101c46b
 101c450:	mov    eax,0x88888889
 101c455:	imul   r14d
 101c458:	add    edx,r14d
 101c45b:	sar    edx,0x5
 101c45e:	mov    eax,edx
 101c460:	shr    eax,0x1f
 101c463:	add    edx,eax
 101c465:	imul   edx,edx,0x3c
 101c468:	sub    r14d,edx
 101c46b:	mov    edi,DWORD PTR [r13+0x24]
 101c46f:	mov    rdx,r12
 101c472:	mov    rcx,QWORD PTR [r13+0xe0]
 101c479:	call   0x100fce0
 101c47e:	mov    DWORD PTR [rsp+0x38],r14d
 101c483:	mov    DWORD PTR [rsp+0x30],esi
 101c487:	lea    rcx,[rip+0x474a2]        # 0x1063930
 101c48e:	mov    QWORD PTR [rsp+0x28],rcx
 101c493:	mov    rax,QWORD PTR [rax+0x20]
 101c497:	mov    QWORD PTR [rsp+0x20],rax
 101c49c:	mov    r9d,edi
 101c49f:	mov    r8d,edi
 101c4a2:	lea    rdx,[rip+0xfffffffffffe9107]        # 0x10055b0
 101c4a9:	lea    rcx,[rsp+0x68]
 101c4ae:	call   QWORD PTR [rip+0xfffffffffffe558c]        # 0x1001a40
 101c4b4:	mov    r8d,DWORD PTR [r13+0x24]
 101c4b8:	lea    rdx,[rip+0xfffffffffffe9221]        # 0x10056e0
 101c4bf:	lea    rcx,[rsp+0x78]
 101c4c4:	call   QWORD PTR [rip+0xfffffffffffe5576]        # 0x1001a40
 101c4ca:	lea    rdx,[rbp-0x30]
 101c4ce:	mov    rcx,r15
 101c4d1:	call   0x1012e00
 101c4d6:	mov    rdi,rax
 101c4d9:	mov    r12,QWORD PTR [r13+0x0]
 101c4dd:	cmp    DWORD PTR [r13+0x24],0x9
 101c4e2:	setl   r15b
 101c4e6:	mov    rcx,QWORD PTR [r13+0xd8]
 101c4ed:	add    rcx,0x10
 101c4f1:	mov    r9b,0x1
 101c4f4:	lea    r8,[rip+0xfffffffffffe8f6d]        # 0x1005468
 101c4fb:	lea    rdx,[rip+0x46f4e]        # 0x1063450
 101c502:	call   0x10300e0
 101c507:	mov    r14,rax
 101c50a:	mov    rcx,rdi
 101c50d:	call   QWORD PTR [rip+0xfffffffffffe55d5]        # 0x1001ae8
 101c513:	mov    rsi,rax
 101c516:	lea    rcx,[rsp+0x78]
 101c51b:	call   QWORD PTR [rip+0xfffffffffffe55c7]        # 0x1001ae8
 101c521:	mov    rdi,rax
 101c524:	lea    rcx,[rsp+0x68]
 101c529:	call   QWORD PTR [rip+0xfffffffffffe55b9]        # 0x1001ae8
 101c52f:	mov    rdx,rax
 101c532:	mov    BYTE PTR [rsp+0x38],r15b
 101c537:	movzx  eax,BYTE PTR [rsp+0x64]
 101c53c:	mov    BYTE PTR [rsp+0x30],al
 101c540:	mov    QWORD PTR [rsp+0x28],r14
 101c545:	mov    QWORD PTR [rsp+0x20],rsi
 101c54a:	xor    r9d,r9d
 101c54d:	mov    r8,rdi
 101c550:	mov    rcx,r13
 101c553:	call   QWORD PTR [r12+0x118]
 101c55b:	test   al,al
 101c55d:	sete   dil
 101c561:	lea    rcx,[rbp-0x30]
 101c565:	call   QWORD PTR [rip+0xfffffffffffe553d]        # 0x1001aa8
 101c56b:	mov    r15,QWORD PTR [rbp-0x78]
 101c56f:	test   dil,dil
 101c572:	je     0x101c61c
 101c578:	lea    rdx,[rbp-0x10]
 101c57c:	mov    rcx,r15
 101c57f:	call   0x1012e50
 101c584:	mov    rdi,rax
 101c587:	mov    edx,0xc000c367
 101c58c:	lea    rcx,[rbp-0x20]
 101c590:	call   0x10132d0
 101c595:	nop
 101c596:	mov    rcx,rax
 101c599:	call   QWORD PTR [rip+0xfffffffffffe5549]        # 0x1001ae8
 101c59f:	mov    rdx,rax
 101c5a2:	mov    r8,QWORD PTR [rdi]
 101c5a5:	lea    rcx,[rsp+0x70]
 101c5aa:	call   QWORD PTR [rip+0xfffffffffffe5490]        # 0x1001a40
 101c5b0:	nop
 101c5b1:	lea    rcx,[rbp-0x20]
 101c5b5:	call   QWORD PTR [rip+0xfffffffffffe54ed]        # 0x1001aa8
 101c5bb:	nop
 101c5bc:	lea    rcx,[rbp-0x10]
 101c5c0:	call   QWORD PTR [rip+0xfffffffffffe54e2]        # 0x1001aa8
 101c5c6:	mov    rax,QWORD PTR [r13+0x8]
 101c5ca:	movsxd rcx,DWORD PTR [rax+0x4]
 101c5ce:	mov    rdi,QWORD PTR [rcx+r13*1+0x8]
 101c5d3:	add    rdi,0x8
 101c5d7:	lea    rcx,[rsp+0x70]
 101c5dc:	call   QWORD PTR [rip+0xfffffffffffe5506]        # 0x1001ae8
 101c5e2:	mov    r8,rax
 101c5e5:	mov    rax,QWORD PTR [r13+0x8]
 101c5e9:	movsxd rcx,DWORD PTR [rax+0x4]
 101c5ed:	add    rcx,0x8
 101c5f1:	add    rcx,r13
 101c5f4:	mov    BYTE PTR [rsp+0x30],0x1
 101c5f9:	mov    BYTE PTR [rsp+0x28],0x1
 101c5fe:	mov    DWORD PTR [rsp+0x20],0x0
 101c606:	xor    r9d,r9d
 101c609:	mov    edx,0xc000c367
 101c60e:	call   QWORD PTR [rdi]
 101c610:	xor    dil,dil
 101c613:	mov    BYTE PTR [rbp+0x98],dil
 101c61a:	jmp    0x101c623
 101c61c:	movzx  edi,BYTE PTR [rbp+0x98]
 101c623:	movzx  ecx,BYTE PTR [rbp+0x90]
 101c62a:	mov    r12,QWORD PTR [rbp+0x88]
 101c631:	mov    r15,QWORD PTR [r15+0x18]
 101c635:	mov    QWORD PTR [rbp-0x78],r15
 101c639:	test   r15,r15
 101c63c:	jne    0x101bf71
 101c642:	lea    rcx,[rbp+0x0]
 101c646:	call   QWORD PTR [rip+0xfffffffffffe545c]        # 0x1001aa8
 101c64c:	nop
 101c64d:	lea    rcx,[rsp+0x68]
 101c652:	call   QWORD PTR [rip+0xfffffffffffe5450]        # 0x1001aa8
 101c658:	nop
 101c659:	lea    rcx,[rsp+0x70]
 101c65e:	call   QWORD PTR [rip+0xfffffffffffe5444]        # 0x1001aa8
 101c664:	nop
 101c665:	lea    rcx,[rsp+0x78]
 101c66a:	call   QWORD PTR [rip+0xfffffffffffe5438]        # 0x1001aa8
 101c670:	movzx  eax,dil
 101c674:	mov    rbx,QWORD PTR [rsp+0x180]
 101c67c:	add    rsp,0x140
 101c683:	pop    r15
 101c685:	pop    r14
 101c687:	pop    r13
 101c689:	pop    r12
 101c68b:	pop    rdi
 101c68c:	pop    rsi
 101c68d:	pop    rbp
 101c68e:	ret    
 101c68f:	int3   
 101c690:	int3   
 101c691:	int3   
 101c692:	int3   
 101c693:	int3   
 101c694:	int3   
 101c695:	int3   
 101c696:	int3   
 101c697:	int3   
 101c698:	int3   
 101c699:	int3   
 101c69a:	int3   
 101c69b:	int3   
 101c69c:	int3   
 101c69d:	int3   
 101c69e:	int3   
 101c69f:	int3   
 101c6a0:	mov    QWORD PTR [rsp+0x10],rdx
 101c6a5:	push   rbp
 101c6a6:	push   rbx
 101c6a7:	push   rsi
 101c6a8:	push   rdi
 101c6a9:	push   r12
 101c6ab:	push   r13
 101c6ad:	push   r14
 101c6af:	push   r15
 101c6b1:	lea    rbp,[rsp-0x1f]
 101c6b6:	sub    rsp,0x98
 101c6bd:	mov    QWORD PTR [rbp+0xf],0xfffffffffffffffe
 101c6c5:	mov    r14,rdx
 101c6c8:	mov    r15,rcx
 101c6cb:	xor    ebx,ebx
 101c6cd:	mov    DWORD PTR [rbp-0x39],ebx
 101c6d0:	mov    sil,0x1
 101c6d3:	mov    BYTE PTR [rbp+0x67],sil
 101c6d7:	lea    rcx,[rbp-0x21]
 101c6db:	call   QWORD PTR [rip+0xfffffffffffe53df]        # 0x1001ac0
 101c6e1:	nop
 101c6e2:	lea    rcx,[rbp+0x7f]
 101c6e6:	call   QWORD PTR [rip+0xfffffffffffe53d4]        # 0x1001ac0
 101c6ec:	nop
 101c6ed:	lea    rcx,[rbp-0x31]
 101c6f1:	call   QWORD PTR [rip+0xfffffffffffe53c9]        # 0x1001ac0
 101c6f7:	nop
 101c6f8:	lea    rcx,[rbp-0x29]
 101c6fc:	call   QWORD PTR [rip+0xfffffffffffe53be]        # 0x1001ac0
 101c702:	nop
 101c703:	mov    rdx,r14
 101c706:	mov    rcx,QWORD PTR [r15+0xe0]
 101c70d:	call   0x100fce0
 101c712:	mov    r12d,DWORD PTR [rax+0x14]
 101c716:	mov    DWORD PTR [rbp+0x77],r12d
 101c71a:	mov    rdx,r14
 101c71d:	mov    rcx,QWORD PTR [r15+0xe0]
 101c724:	call   0x100fce0
 101c729:	cmp    DWORD PTR [rax+0x4],0x2
 101c72d:	je     0x101c740
 101c72f:	mov    eax,DWORD PTR [rip+0x471ef]        # 0x1063924
 101c735:	test   eax,eax
 101c737:	jne    0x101ca94
 101c73d:	mov    ebx,DWORD PTR [rbp-0x39]
 101c740:	mov    rdx,r14
 101c743:	mov    rcx,QWORD PTR [r15+0xe0]
 101c74a:	call   0x100fce0
 101c74f:	lea    rdx,[rax+0x18]
 101c753:	lea    rcx,[rbp+0x7f]
 101c757:	call   QWORD PTR [rip+0xfffffffffffe5343]        # 0x1001aa0
 101c75d:	mov    rdx,r14
 101c760:	mov    rcx,QWORD PTR [r15+0xe0]
 101c767:	call   0x100fce0
 101c76c:	lea    rdx,[rax+0x18]
 101c770:	lea    rcx,[rbp-0x31]
 101c774:	call   QWORD PTR [rip+0xfffffffffffe5326]        # 0x1001aa0
 101c77a:	lea    rcx,[rbp-0x31]
 101c77e:	call   QWORD PTR [rip+0xfffffffffffe51dc]        # 0x1001960
 101c784:	lea    rdx,[rbp+0x7f]
 101c788:	mov    rcx,r15
 101c78b:	call   0x1020990
 101c790:	mov    r13,QWORD PTR [r15+0xe8]
 101c797:	test   r13,r13
 101c79a:	je     0x101ca94
 101c7a0:	lea    rsi,[rip+0xfffffffffffe82a9]        # 0x1004a50
 101c7a7:	test   BYTE PTR [r13+0x0],0x1
 101c7ac:	je     0x101ca83
 101c7b2:	xor    r8d,r8d
 101c7b5:	lea    rdx,[rip+0xfffffffffffe94a4]        # 0x1005c60
 101c7bc:	lea    rcx,[rbp-0x31]
 101c7c0:	call   QWORD PTR [rip+0xfffffffffffe5292]        # 0x1001a58
 101c7c6:	cmp    eax,0xffffffff
 101c7c9:	je     0x101c7fe
 101c7cb:	lea    rdx,[rbp-0x19]
 101c7cf:	mov    rcx,r13
 101c7d2:	call   0x1012e00
 101c7d7:	nop
 101c7d8:	mov    rcx,rax
 101c7db:	call   QWORD PTR [rip+0xfffffffffffe5307]        # 0x1001ae8
 101c7e1:	mov    r9,rax
 101c7e4:	mov    r8,r14
 101c7e7:	lea    rdx,[rbp+0x7f]
 101c7eb:	mov    rcx,r15
 101c7ee:	call   0x10219b0
 101c7f3:	nop
 101c7f4:	lea    rcx,[rbp-0x19]
 101c7f8:	call   QWORD PTR [rip+0xfffffffffffe52aa]        # 0x1001aa8
 101c7fe:	lea    rcx,[rbp+0x7f]
 101c802:	call   QWORD PTR [rip+0xfffffffffffe52e0]        # 0x1001ae8
 101c808:	mov    rdx,rax
 101c80b:	mov    r8b,0x1
 101c80e:	lea    rcx,[rbp-0x9]
 101c812:	call   0x1031010
 101c817:	mov    rdi,rax
 101c81a:	mov    rdx,r14
 101c81d:	mov    rcx,QWORD PTR [r15+0xe0]
 101c824:	call   0x100fce0
 101c829:	lea    r9,[rip+0xfffffffffffe8230]        # 0x1004a60
 101c830:	cmp    DWORD PTR [rax+0x4],0x0
 101c834:	cmove  r9,rsi
 101c838:	mov    r8,QWORD PTR [rdi]
 101c83b:	lea    rdx,[rip+0xfffffffffffe942e]        # 0x1005c70
 101c842:	lea    rcx,[rbp-0x29]
 101c846:	call   QWORD PTR [rip+0xfffffffffffe51f4]        # 0x1001a40
 101c84c:	nop
 101c84d:	lea    rcx,[rbp-0x9]
 101c851:	call   QWORD PTR [rip+0xfffffffffffe5251]        # 0x1001aa8
 101c857:	cmp    r12d,0x2
 101c85b:	setne  sil
 101c85f:	mov    rdx,r14
 101c862:	mov    rcx,QWORD PTR [r15+0xe0]
 101c869:	call   0x100fce0
 101c86e:	lea    rcx,[rax+0x38]
 101c872:	call   QWORD PTR [rip+0xfffffffffffe5270]        # 0x1001ae8
 101c878:	mov    rdi,rax
 101c87b:	mov    rdx,r14
 101c87e:	mov    rcx,QWORD PTR [r15+0xe0]
 101c885:	call   0x100fce0
 101c88a:	lea    rcx,[rax+0x30]
 101c88e:	call   QWORD PTR [rip+0xfffffffffffe5254]        # 0x1001ae8
 101c894:	mov    rdx,rax
 101c897:	mov    rcx,QWORD PTR [r15+0xd8]
 101c89e:	add    rcx,0x10
 101c8a2:	movzx  r9d,sil
 101c8a6:	mov    r8,rdi
 101c8a9:	call   0x10300e0
 101c8ae:	mov    r12,rax
 101c8b1:	test   rax,rax
 101c8b4:	je     0x101c936
 101c8ba:	lea    rdx,[rbp+0x7]
 101c8be:	mov    rcx,r13
 101c8c1:	call   0x1012e00
 101c8c6:	mov    rsi,rax
 101c8c9:	or     ebx,0x1
 101c8cc:	mov    DWORD PTR [rbp-0x39],ebx
 101c8cf:	lea    rcx,[rbp-0x29]
 101c8d3:	call   QWORD PTR [rip+0xfffffffffffe520f]        # 0x1001ae8
 101c8d9:	mov    r14,rax
 101c8dc:	mov    rdx,QWORD PTR [rbp+0x6f]
 101c8e0:	mov    rcx,QWORD PTR [r15+0xe0]
 101c8e7:	call   0x100fce0
 101c8ec:	mov    rdi,rax
 101c8ef:	mov    rcx,rsi
 101c8f2:	call   QWORD PTR [rip+0xfffffffffffe51f0]        # 0x1001ae8
 101c8f8:	mov    rsi,rax
 101c8fb:	lea    rcx,[rbp+0x7f]
 101c8ff:	call   QWORD PTR [rip+0xfffffffffffe51e3]        # 0x1001ae8
 101c905:	mov    rdx,rax
 101c908:	mov    BYTE PTR [rsp+0x38],0x0
 101c90d:	mov    QWORD PTR [rsp+0x30],r14
 101c912:	movzx  ecx,BYTE PTR [rdi+0x10]
 101c916:	mov    BYTE PTR [rsp+0x28],cl
 101c91a:	mov    QWORD PTR [rsp+0x20],r12
 101c91f:	mov    r9,rsi
 101c922:	xor    r8d,r8d
 101c925:	mov    rcx,r15
 101c928:	call   0x1023280
 101c92d:	test   al,al
 101c92f:	je     0x101c936
 101c931:	xor    dil,dil
 101c934:	jmp    0x101c939
 101c936:	mov    dil,0x1
 101c939:	test   bl,0x1
 101c93c:	je     0x101c94e
 101c93e:	and    ebx,0xfffffffe
 101c941:	mov    DWORD PTR [rbp-0x39],ebx
 101c944:	lea    rcx,[rbp+0x7]
 101c948:	call   QWORD PTR [rip+0xfffffffffffe515a]        # 0x1001aa8
 101c94e:	test   dil,dil
 101c951:	je     0x101c9fe
 101c957:	xor    sil,sil
 101c95a:	mov    BYTE PTR [rbp+0x67],sil
 101c95e:	lea    rdx,[rbp-0x1]
 101c962:	mov    rcx,r13
 101c965:	call   0x1012e50
 101c96a:	mov    rdi,rax
 101c96d:	mov    edx,0xc000c369
 101c972:	lea    rcx,[rbp-0x11]
 101c976:	call   0x10132d0
 101c97b:	nop
 101c97c:	mov    rcx,rax
 101c97f:	call   QWORD PTR [rip+0xfffffffffffe5163]        # 0x1001ae8
 101c985:	mov    rdx,rax
 101c988:	mov    r8,QWORD PTR [rdi]
 101c98b:	lea    rcx,[rbp-0x21]
 101c98f:	call   QWORD PTR [rip+0xfffffffffffe50ab]        # 0x1001a40
 101c995:	nop
 101c996:	lea    rcx,[rbp-0x11]
 101c99a:	call   QWORD PTR [rip+0xfffffffffffe5108]        # 0x1001aa8
 101c9a0:	nop
 101c9a1:	lea    rcx,[rbp-0x1]
 101c9a5:	call   QWORD PTR [rip+0xfffffffffffe50fd]        # 0x1001aa8
 101c9ab:	mov    rax,QWORD PTR [r15+0x8]
 101c9af:	movsxd rcx,DWORD PTR [rax+0x4]
 101c9b3:	mov    rdi,QWORD PTR [rcx+r15*1+0x8]
 101c9b8:	lea    rcx,[rbp-0x21]
 101c9bc:	call   QWORD PTR [rip+0xfffffffffffe5126]        # 0x1001ae8
 101c9c2:	mov    r8,rax
 101c9c5:	mov    rax,QWORD PTR [r15+0x8]
 101c9c9:	movsxd rcx,DWORD PTR [rax+0x4]
 101c9cd:	add    rcx,0x8
 101c9d1:	add    rcx,r15
 101c9d4:	mov    BYTE PTR [rsp+0x30],0x1
 101c9d9:	mov    BYTE PTR [rsp+0x28],0x1
 101c9de:	mov    DWORD PTR [rsp+0x20],0x0
 101c9e6:	xor    r9d,r9d
 101c9e9:	mov    edx,0xc000c369
 101c9ee:	call   QWORD PTR [rdi+0x8]
 101c9f1:	mov    r14,QWORD PTR [rbp+0x6f]
 101c9f5:	mov    r12d,DWORD PTR [rbp+0x77]
 101c9f9:	jmp    0x101ca87
 101c9fe:	mov    r14,QWORD PTR [rbp+0x6f]
 101ca02:	mov    rdx,r14
 101ca05:	mov    rcx,QWORD PTR [r15+0xe0]
 101ca0c:	call   0x100fce0
 101ca11:	cmp    BYTE PTR [rax+0x10],0x0
 101ca15:	jne    0x101ca1e
 101ca17:	mov    ecx,DWORD PTR [rbp+0x77]
 101ca1a:	test   ecx,ecx
 101ca1c:	jne    0x101ca80
 101ca1e:	mov    eax,DWORD PTR [rip+0x46f00]        # 0x1063924
 101ca24:	cmp    eax,0x2
 101ca27:	jge    0x101ca5e
 101ca29:	mov    r8d,0x1
 101ca2f:	or     edx,0xffffffff
 101ca32:	mov    rcx,QWORD PTR [r12]
 101ca36:	call   QWORD PTR [rip+0xfffffffffffe4954]        # 0x1001390
 101ca3c:	cmp    eax,0xc0
 101ca41:	je     0x101ca5e
 101ca43:	mov    rcx,r12
 101ca46:	call   0x1034510
 101ca4b:	lea    rcx,[r12+0x8]
 101ca50:	call   0x1034510
 101ca55:	mov    ebx,DWORD PTR [rbp-0x39]
 101ca58:	mov    r12d,DWORD PTR [rbp+0x77]
 101ca5c:	jmp    0x101ca83
 101ca5e:	mov    rdx,QWORD PTR [r15+0xd8]
 101ca65:	add    rdx,0x158
 101ca6c:	mov    r8b,0x1
 101ca6f:	mov    rcx,r12
 101ca72:	call   0x10345a0
 101ca77:	mov    ebx,DWORD PTR [rbp-0x39]
 101ca7a:	mov    r12d,DWORD PTR [rbp+0x77]
 101ca7e:	jmp    0x101ca83
 101ca80:	mov    r12d,ecx
 101ca83:	movzx  esi,BYTE PTR [rbp+0x67]
 101ca87:	mov    r13,QWORD PTR [r13+0x18]
 101ca8b:	test   r13,r13
 101ca8e:	jne    0x101c7a0
 101ca94:	lea    rcx,[rbp-0x29]
 101ca98:	call   QWORD PTR [rip+0xfffffffffffe500a]        # 0x1001aa8
 101ca9e:	nop
 101ca9f:	lea    rcx,[rbp-0x31]
 101caa3:	call   QWORD PTR [rip+0xfffffffffffe4fff]        # 0x1001aa8
 101caa9:	nop
 101caaa:	lea    rcx,[rbp+0x7f]
 101caae:	call   QWORD PTR [rip+0xfffffffffffe4ff4]        # 0x1001aa8
 101cab4:	nop
 101cab5:	lea    rcx,[rbp-0x21]
 101cab9:	call   QWORD PTR [rip+0xfffffffffffe4fe9]        # 0x1001aa8
 101cabf:	movzx  eax,sil
 101cac3:	add    rsp,0x98
 101caca:	pop    r15
 101cacc:	pop    r14
 101cace:	pop    r13
 101cad0:	pop    r12
 101cad2:	pop    rdi
 101cad3:	pop    rsi
 101cad4:	pop    rbx
 101cad5:	pop    rbp
 101cad6:	ret    
 101cad7:	int3   
 101cad8:	int3   
 101cad9:	int3   
 101cada:	int3   
 101cadb:	int3   
 101cadc:	int3   
 101cadd:	int3   
 101cade:	int3   
 101cadf:	int3   
 101cae0:	rex push rbp
 101cae2:	push   rsi
 101cae3:	push   rdi
 101cae4:	push   r14
 101cae6:	push   r15
 101cae8:	mov    rbp,rsp
 101caeb:	sub    rsp,0x50
 101caef:	mov    QWORD PTR [rbp-0x10],0xfffffffffffffffe
 101caf7:	mov    QWORD PTR [rsp+0x88],rbx
 101caff:	mov    r14,rdx
 101cb02:	mov    rsi,rcx
 101cb05:	mov    r15b,0x1
 101cb08:	lea    rcx,[rbp-0x20]
 101cb0c:	call   QWORD PTR [rip+0xfffffffffffe4fae]        # 0x1001ac0
 101cb12:	nop
 101cb13:	lea    rcx,[rbp-0x30]
 101cb17:	call   QWORD PTR [rip+0xfffffffffffe4fa3]        # 0x1001ac0
 101cb1d:	nop
 101cb1e:	lea    rcx,[rbp+0x40]
 101cb22:	call   QWORD PTR [rip+0xfffffffffffe4f98]        # 0x1001ac0
 101cb28:	nop
 101cb29:	lea    rcx,[rbp-0x28]
 101cb2d:	call   QWORD PTR [rip+0xfffffffffffe4f8d]        # 0x1001ac0
 101cb33:	nop
 101cb34:	mov    rdx,r14
 101cb37:	mov    rcx,QWORD PTR [rsi+0xe0]
 101cb3e:	call   0x100fce0
 101cb43:	lea    rdx,[rax+0x18]
 101cb47:	mov    rcx,rsi
 101cb4a:	call   0x1020990
 101cb4f:	mov    rdx,r14
 101cb52:	mov    rcx,QWORD PTR [rsi+0xe0]
 101cb59:	call   0x100fce0
 101cb5e:	lea    rdx,[rax+0x18]
 101cb62:	lea    rcx,[rbp+0x40]
 101cb66:	call   QWORD PTR [rip+0xfffffffffffe4f34]        # 0x1001aa0
 101cb6c:	lea    rdx,[rbp+0x40]
 101cb70:	lea    rcx,[rbp-0x28]
 101cb74:	call   QWORD PTR [rip+0xfffffffffffe4f26]        # 0x1001aa0
 101cb7a:	mov    r11,QWORD PTR [rsi+0x108]
 101cb81:	neg    r11
 101cb84:	sbb    rbx,rbx
 101cb87:	je     0x101cde3
 101cb8d:	mov    r8,QWORD PTR [rsi+0xf8]
 101cb94:	xor    eax,eax
 101cb96:	test   r8,r8
 101cb99:	setne  al
 101cb9c:	test   eax,eax
 101cb9e:	je     0x101cddd
 101cba4:	mov    rdi,rbx
 101cba7:	xor    eax,eax
 101cba9:	test   rbx,rbx
 101cbac:	setne  al
 101cbaf:	test   eax,eax
 101cbb1:	je     0x101cdd7
 101cbb7:	cmp    rbx,0xffffffffffffffff
 101cbbb:	jne    0x101cbf2
 101cbbd:	xor    ecx,ecx
 101cbbf:	mov    edx,DWORD PTR [rsi+0x100]
 101cbc5:	test   edx,edx
 101cbc7:	je     0x101cbe2
 101cbc9:	mov    rax,r8
 101cbcc:	nop    DWORD PTR [rax+0x0]
 101cbd0:	mov    rdi,QWORD PTR [rax]
 101cbd3:	test   rdi,rdi
 101cbd6:	jne    0x101cbe2
 101cbd8:	inc    ecx
 101cbda:	add    rax,0x8
 101cbde:	cmp    ecx,edx
 101cbe0:	jb     0x101cbd0
 101cbe2:	xor    eax,eax
 101cbe4:	test   rdi,rdi
 101cbe7:	setne  al
 101cbea:	test   eax,eax
 101cbec:	je     0x101cc82
 101cbf2:	mov    rbx,QWORD PTR [rdi+0x10]
 101cbf6:	test   rbx,rbx
 101cbf9:	jne    0x101cc27
 101cbfb:	mov    ecx,DWORD PTR [rsi+0x100]
 101cc01:	xor    edx,edx
 101cc03:	mov    eax,DWORD PTR [rdi+0x18]
 101cc06:	div    ecx
 101cc08:	inc    edx
 101cc0a:	movsxd rax,edx
 101cc0d:	cmp    edx,ecx
 101cc0f:	jae    0x101cc27
 101cc11:	lea    rax,[r8+rax*8]
 101cc15:	mov    rbx,QWORD PTR [rax]
 101cc18:	test   rbx,rbx
 101cc1b:	jne    0x101cc27
 101cc1d:	inc    edx
 101cc1f:	add    rax,0x8
 101cc23:	cmp    edx,ecx
 101cc25:	jb     0x101cc15
 101cc27:	mov    rdx,rdi
 101cc2a:	lea    rcx,[rbp-0x20]
 101cc2e:	call   QWORD PTR [rip+0xfffffffffffe4e6c]        # 0x1001aa0
 101cc34:	lea    rdx,[rdi+0x8]
 101cc38:	lea    rcx,[rbp-0x30]
 101cc3c:	call   QWORD PTR [rip+0xfffffffffffe4e5e]        # 0x1001aa0
 101cc42:	xor    r8d,r8d
 101cc45:	lea    rdx,[rip+0xfffffffffffe5474]        # 0x10020c0
 101cc4c:	lea    rcx,[rbp-0x30]
 101cc50:	call   QWORD PTR [rip+0xfffffffffffe4e02]        # 0x1001a58
 101cc56:	cmp    eax,0xffffffff
 101cc59:	je     0x101cc7a
 101cc5b:	lea    rcx,[rbp-0x20]
 101cc5f:	call   QWORD PTR [rip+0xfffffffffffe4e83]        # 0x1001ae8
 101cc65:	mov    rdx,rax
 101cc68:	xor    r8d,r8d
 101cc6b:	lea    rcx,[rbp+0x40]
 101cc6f:	call   QWORD PTR [rip+0xfffffffffffe4de3]        # 0x1001a58
 101cc75:	cmp    eax,0xffffffff
 101cc78:	jne    0x101cc88
 101cc7a:	test   rbx,rbx
 101cc7d:	jmp    0x101cb87
 101cc82:	call   0x103f972
 101cc87:	int3   
 101cc88:	lea    rcx,[rbp+0x48]
 101cc8c:	call   QWORD PTR [rip+0xfffffffffffe4e2e]        # 0x1001ac0
 101cc92:	nop
 101cc93:	mov    DWORD PTR [rbp+0x30],0x0
 101cc9a:	mov    edi,0xa
 101cc9f:	lea    rcx,[rbp-0x30]
 101cca3:	call   QWORD PTR [rip+0xfffffffffffe4e3f]        # 0x1001ae8
 101cca9:	mov    rdx,rax
 101ccac:	lea    r9,[rbp+0x30]
 101ccb0:	movzx  r8d,di
 101ccb4:	lea    rcx,[rbp-0x18]
 101ccb8:	call   0x1035520
 101ccbd:	nop
 101ccbe:	mov    rdx,rax
 101ccc1:	lea    rcx,[rbp+0x48]
 101ccc5:	call   QWORD PTR [rip+0xfffffffffffe4dd5]        # 0x1001aa0
 101cccb:	nop
 101cccc:	lea    rcx,[rbp-0x18]
 101ccd0:	call   QWORD PTR [rip+0xfffffffffffe4dd2]        # 0x1001aa8
 101ccd6:	lea    rdx,[rip+0xfffffffffffe5133]        # 0x1001e10
 101ccdd:	lea    rcx,[rbp+0x48]
 101cce1:	call   QWORD PTR [rip+0xfffffffffffe4d19]        # 0x1001a00
 101cce7:	test   eax,eax
 101cce9:	je     0x101cdad
 101ccef:	nop
 101ccf0:	lea    rdx,[rbp-0x28]
 101ccf4:	lea    rcx,[rbp+0x40]
 101ccf8:	call   QWORD PTR [rip+0xfffffffffffe4da2]        # 0x1001aa0
 101ccfe:	lea    rcx,[rbp+0x48]
 101cd02:	call   QWORD PTR [rip+0xfffffffffffe4de0]        # 0x1001ae8
 101cd08:	mov    rbx,rax
 101cd0b:	lea    rcx,[rbp-0x20]
 101cd0f:	call   QWORD PTR [rip+0xfffffffffffe4dd3]        # 0x1001ae8
 101cd15:	mov    rdx,rax
 101cd18:	mov    r8,rbx
 101cd1b:	lea    rcx,[rbp+0x40]
 101cd1f:	call   QWORD PTR [rip+0xfffffffffffe4c8b]        # 0x10019b0
 101cd25:	mov    rdx,r14
 101cd28:	mov    rcx,QWORD PTR [rsi+0xe0]
 101cd2f:	call   0x100fce0
 101cd34:	lea    rdx,[rbp+0x40]
 101cd38:	lea    rcx,[rax+0x18]
 101cd3c:	call   QWORD PTR [rip+0xfffffffffffe4d5e]        # 0x1001aa0
 101cd42:	mov    rdx,r14
 101cd45:	mov    rcx,rsi
 101cd48:	test   r15b,r15b
 101cd4b:	je     0x101cd58
 101cd4d:	call   0x101ce40
 101cd52:	movzx  r15d,al
 101cd56:	jmp    0x101cd5d
 101cd58:	call   0x101ce40
 101cd5d:	lea    rcx,[rbp-0x30]
 101cd61:	call   QWORD PTR [rip+0xfffffffffffe4d81]        # 0x1001ae8
 101cd67:	mov    rdx,rax
 101cd6a:	lea    r9,[rbp+0x30]
 101cd6e:	movzx  r8d,di
 101cd72:	lea    rcx,[rbp-0x18]
 101cd76:	call   0x1035520
 101cd7b:	nop
 101cd7c:	mov    rdx,rax
 101cd7f:	lea    rcx,[rbp+0x48]
 101cd83:	call   QWORD PTR [rip+0xfffffffffffe4d17]        # 0x1001aa0
 101cd89:	nop
 101cd8a:	lea    rcx,[rbp-0x18]
 101cd8e:	call   QWORD PTR [rip+0xfffffffffffe4d14]        # 0x1001aa8
 101cd94:	lea    rdx,[rip+0xfffffffffffe5075]        # 0x1001e10
 101cd9b:	lea    rcx,[rbp+0x48]
 101cd9f:	call   QWORD PTR [rip+0xfffffffffffe4c5b]        # 0x1001a00
 101cda5:	test   eax,eax
 101cda7:	jne    0x101ccf0
 101cdad:	mov    rdx,r14
 101cdb0:	mov    rcx,QWORD PTR [rsi+0xe0]
 101cdb7:	call   0x100fce0
 101cdbc:	lea    rdx,[rbp-0x28]
 101cdc0:	lea    rcx,[rax+0x18]
 101cdc4:	call   QWORD PTR [rip+0xfffffffffffe4cd6]        # 0x1001aa0
 101cdca:	nop
 101cdcb:	lea    rcx,[rbp+0x48]
 101cdcf:	call   QWORD PTR [rip+0xfffffffffffe4cd3]        # 0x1001aa8
 101cdd5:	jmp    0x101cdf2
 101cdd7:	call   0x103f972
 101cddc:	int3   
 101cddd:	call   0x103f972
 101cde2:	int3   
 101cde3:	mov    rdx,r14
 101cde6:	mov    rcx,rsi
 101cde9:	call   0x101ce40
 101cdee:	movzx  r15d,al
 101cdf2:	lea    rcx,[rbp-0x28]
 101cdf6:	call   QWORD PTR [rip+0xfffffffffffe4cac]        # 0x1001aa8
 101cdfc:	nop
 101cdfd:	lea    rcx,[rbp+0x40]
 101ce01:	call   QWORD PTR [rip+0xfffffffffffe4ca1]        # 0x1001aa8
 101ce07:	nop
 101ce08:	lea    rcx,[rbp-0x30]
 101ce0c:	call   QWORD PTR [rip+0xfffffffffffe4c96]        # 0x1001aa8
 101ce12:	nop
 101ce13:	lea    rcx,[rbp-0x20]
 101ce17:	call   QWORD PTR [rip+0xfffffffffffe4c8b]        # 0x1001aa8
 101ce1d:	movzx  eax,r15b
 101ce21:	mov    rbx,QWORD PTR [rsp+0x88]
 101ce29:	add    rsp,0x50
 101ce2d:	pop    r15
 101ce2f:	pop    r14
 101ce31:	pop    rdi
 101ce32:	pop    rsi
 101ce33:	pop    rbp
 101ce34:	ret    
 101ce35:	int3   
 101ce36:	int3   
 101ce37:	int3   
 101ce38:	int3   
 101ce39:	int3   
 101ce3a:	int3   
 101ce3b:	int3   
 101ce3c:	int3   
 101ce3d:	int3   
 101ce3e:	int3   
 101ce3f:	int3   
 101ce40:	mov    QWORD PTR [rsp+0x10],rdx
 101ce45:	push   rbp
 101ce46:	push   rbx
 101ce47:	push   rsi
 101ce48:	push   rdi
 101ce49:	push   r12
 101ce4b:	push   r13
 101ce4d:	push   r14
 101ce4f:	push   r15
 101ce51:	lea    rbp,[rsp-0x1f]
 101ce56:	sub    rsp,0xc8
 101ce5d:	mov    QWORD PTR [rbp+0xf],0xfffffffffffffffe
 101ce65:	mov    r15,rdx
 101ce68:	mov    rbx,rcx
 101ce6b:	lea    rcx,[rbp-0x59]
 101ce6f:	call   QWORD PTR [rip+0xfffffffffffe4c4b]        # 0x1001ac0
 101ce75:	nop
 101ce76:	lea    rcx,[rbp-0x51]
 101ce7a:	call   QWORD PTR [rip+0xfffffffffffe4c40]        # 0x1001ac0
 101ce80:	nop
 101ce81:	mov    rdx,r15
 101ce84:	mov    rcx,QWORD PTR [rbx+0xe0]
 101ce8b:	call   0x100fce0
 101ce90:	mov    esi,DWORD PTR [rax+0x14]
 101ce93:	mov    DWORD PTR [rbp+0x77],esi
 101ce96:	mov    rdx,r15
 101ce99:	mov    rcx,QWORD PTR [rbx+0xe0]
 101cea0:	call   0x100fce0
 101cea5:	lea    rcx,[rax+0x18]
 101cea9:	call   QWORD PTR [rip+0xfffffffffffe4c39]        # 0x1001ae8
 101ceaf:	mov    rdx,rax
 101ceb2:	lea    rcx,[rbp-0x9]
 101ceb6:	call   0x10353c0
 101cebb:	nop
 101cebc:	mov    rcx,rax
 101cebf:	call   QWORD PTR [rip+0xfffffffffffe4a7b]        # 0x1001940
 101cec5:	movzx  edi,al
 101cec8:	lea    rcx,[rbp-0x9]
 101cecc:	call   QWORD PTR [rip+0xfffffffffffe4bd6]        # 0x1001aa8
 101ced2:	test   dil,dil
 101ced5:	je     0x101cef3
 101ced7:	lea    rcx,[rbp-0x51]
 101cedb:	call   QWORD PTR [rip+0xfffffffffffe4bc7]        # 0x1001aa8
 101cee1:	nop
 101cee2:	lea    rcx,[rbp-0x59]
 101cee6:	call   QWORD PTR [rip+0xfffffffffffe4bbc]        # 0x1001aa8
 101ceec:	mov    al,0x1
 101ceee:	jmp    0x101d575
 101cef3:	mov    BYTE PTR [rbp+0x67],0x1
 101cef7:	xor    dil,dil
 101cefa:	mov    rdx,r15
 101cefd:	mov    rcx,QWORD PTR [rbx+0xe0]
 101cf04:	call   0x100fce0
 101cf09:	mov    ecx,DWORD PTR [rax+0x8]
 101cf0c:	add    ecx,0xfffffffd
 101cf0f:	movzx  eax,dil
 101cf13:	mov    edi,0x1
 101cf18:	cmp    ecx,0x4
 101cf1b:	cmovbe eax,edi
 101cf1e:	mov    DWORD PTR [rbp+0x7f],eax
 101cf21:	mov    rdx,r15
 101cf24:	mov    rcx,QWORD PTR [rbx+0xe0]
 101cf2b:	call   0x100fce0
 101cf30:	cmp    DWORD PTR [rax+0x4],0x2
 101cf34:	je     0x101cf44
 101cf36:	mov    eax,DWORD PTR [rip+0x469e8]        # 0x1063924
 101cf3c:	test   eax,eax
 101cf3e:	jne    0x101d55c
 101cf44:	mov    rdx,r15
 101cf47:	mov    rcx,QWORD PTR [rbx+0xe0]
 101cf4e:	call   0x100fce0
 101cf53:	lea    rdx,[rax+0x18]
 101cf57:	lea    rcx,[rbp-0x59]
 101cf5b:	call   QWORD PTR [rip+0xfffffffffffe4b3f]        # 0x1001aa0
 101cf61:	xor    r13d,r13d
 101cf64:	xor    r8d,r8d
 101cf67:	lea    rdx,[rip+0xfffffffffffe7ffa]        # 0x1004f68
 101cf6e:	lea    rcx,[rbp-0x59]
 101cf72:	call   QWORD PTR [rip+0xfffffffffffe4ae0]        # 0x1001a58
 101cf78:	cmp    eax,0xffffffff
 101cf7b:	jne    0x101cfe1
 101cf7d:	xor    r8d,r8d
 101cf80:	lea    rdx,[rip+0xfffffffffffe7ff9]        # 0x1004f80
 101cf87:	lea    rcx,[rbp-0x59]
 101cf8b:	call   QWORD PTR [rip+0xfffffffffffe4ac7]        # 0x1001a58
 101cf91:	cmp    eax,0xffffffff
 101cf94:	jne    0x101cfe1
 101cf96:	xor    r8d,r8d
 101cf99:	lea    rdx,[rip+0xfffffffffffe8008]        # 0x1004fa8
 101cfa0:	lea    rcx,[rbp-0x59]
 101cfa4:	call   QWORD PTR [rip+0xfffffffffffe4aae]        # 0x1001a58
 101cfaa:	cmp    eax,0xffffffff
 101cfad:	jne    0x101cfe1
 101cfaf:	xor    r8d,r8d
 101cfb2:	lea    rdx,[rip+0xfffffffffffe8007]        # 0x1004fc0
 101cfb9:	lea    rcx,[rbp-0x59]
 101cfbd:	call   QWORD PTR [rip+0xfffffffffffe4a95]        # 0x1001a58
 101cfc3:	cmp    eax,0xffffffff
 101cfc6:	jne    0x101cfe1
 101cfc8:	xor    r8d,r8d
 101cfcb:	lea    rdx,[rip+0xfffffffffffe7ffe]        # 0x1004fd0
 101cfd2:	lea    rcx,[rbp-0x59]
 101cfd6:	call   QWORD PTR [rip+0xfffffffffffe4a7c]        # 0x1001a58
 101cfdc:	cmp    eax,0xffffffff
 101cfdf:	je     0x101cfe4
 101cfe1:	mov    r13d,edi
 101cfe4:	xor    r8d,r8d
 101cfe7:	lea    rdx,[rip+0xfffffffffffe7ffa]        # 0x1004fe8
 101cfee:	lea    rcx,[rbp-0x59]
 101cff2:	call   QWORD PTR [rip+0xfffffffffffe4a60]        # 0x1001a58
 101cff8:	cmp    eax,0xffffffff
 101cffb:	je     0x101d001
 101cffd:	or     r13d,0x4
 101d001:	xor    r8d,r8d
 101d004:	lea    rdx,[rip+0xfffffffffffe7ffd]        # 0x1005008
 101d00b:	lea    rcx,[rbp-0x59]
 101d00f:	call   QWORD PTR [rip+0xfffffffffffe4a43]        # 0x1001a58
 101d015:	cmp    eax,0xffffffff
 101d018:	je     0x101d01e
 101d01a:	or     r13d,0x2
 101d01e:	test   r13d,r13d
 101d021:	je     0x101d309
 101d027:	mov    r12,QWORD PTR [rbx+0xe8]
 101d02e:	test   r12,r12
 101d031:	je     0x101d55c
 101d037:	nop    WORD PTR [rax+rax*1+0x0]
 101d040:	mov    ecx,DWORD PTR [r12]
 101d044:	mov    eax,ecx
 101d046:	xor    eax,r13d
 101d049:	sub    ecx,r13d
 101d04c:	cmp    eax,ecx
 101d04e:	jne    0x101d2f6
 101d054:	mov    rdx,r15
 101d057:	mov    rcx,QWORD PTR [rbx+0xe0]
 101d05e:	call   0x100fce0
 101d063:	lea    rdx,[rax+0x18]
 101d067:	lea    rcx,[rbp-0x59]
 101d06b:	call   QWORD PTR [rip+0xfffffffffffe4a2f]        # 0x1001aa0
 101d071:	lea    rdx,[rbp-0x1]
 101d075:	mov    rcx,r12
 101d078:	call   0x1012e00
 101d07d:	nop
 101d07e:	mov    rcx,rax
 101d081:	call   QWORD PTR [rip+0xfffffffffffe4a61]        # 0x1001ae8
 101d087:	mov    rdi,rax
 101d08a:	lea    rcx,[rbp-0x59]
 101d08e:	call   QWORD PTR [rip+0xfffffffffffe4a54]        # 0x1001ae8
 101d094:	mov    r8,rax
 101d097:	mov    QWORD PTR [rsp+0x20],rdi
 101d09c:	mov    r9,r15
 101d09f:	lea    rdx,[rbp-0x11]
 101d0a3:	mov    rcx,rbx
 101d0a6:	call   0x1021830
 101d0ab:	nop
 101d0ac:	mov    rdx,rax
 101d0af:	lea    rcx,[rbp-0x59]
 101d0b3:	call   QWORD PTR [rip+0xfffffffffffe49e7]        # 0x1001aa0
 101d0b9:	nop
 101d0ba:	lea    rcx,[rbp-0x11]
 101d0be:	call   QWORD PTR [rip+0xfffffffffffe49e4]        # 0x1001aa8
 101d0c4:	nop
 101d0c5:	lea    rcx,[rbp-0x1]
 101d0c9:	call   QWORD PTR [rip+0xfffffffffffe49d9]        # 0x1001aa8
 101d0cf:	lea    r8,[rbp-0x59]
 101d0d3:	lea    rdx,[rip+0xfffffffffffe868e]        # 0x1005768
 101d0da:	lea    rcx,[rbp-0x29]
 101d0de:	call   0x1013d70
 101d0e3:	nop
 101d0e4:	mov    rdx,rax
 101d0e7:	lea    rcx,[rbp-0x59]
 101d0eb:	call   QWORD PTR [rip+0xfffffffffffe49af]        # 0x1001aa0
 101d0f1:	nop
 101d0f2:	lea    rcx,[rbp-0x29]
 101d0f6:	call   QWORD PTR [rip+0xfffffffffffe49ac]        # 0x1001aa8
 101d0fc:	cmp    esi,0x2
 101d0ff:	setne  sil
 101d103:	mov    rdx,r15
 101d106:	mov    rcx,QWORD PTR [rbx+0xe0]
 101d10d:	call   0x100fce0
 101d112:	lea    rcx,[rax+0x38]
 101d116:	call   QWORD PTR [rip+0xfffffffffffe49cc]        # 0x1001ae8
 101d11c:	mov    rdi,rax
 101d11f:	mov    rdx,r15
 101d122:	mov    rcx,QWORD PTR [rbx+0xe0]
 101d129:	call   0x100fce0
 101d12e:	lea    rcx,[rax+0x30]
 101d132:	call   QWORD PTR [rip+0xfffffffffffe49b0]        # 0x1001ae8
 101d138:	mov    rdx,rax
 101d13b:	mov    rcx,QWORD PTR [rbx+0xd8]
 101d142:	add    rcx,0x10
 101d146:	movzx  r9d,sil
 101d14a:	mov    r8,rdi
 101d14d:	call   0x10300e0
 101d152:	mov    r15,rax
 101d155:	lea    rdx,[rbp-0x19]
 101d159:	mov    rcx,r12
 101d15c:	call   0x1012e00
 101d161:	mov    r14,rax
 101d164:	mov    edx,0xc000c36d
 101d169:	lea    rcx,[rbp-0x39]
 101d16d:	call   0x10132d0
 101d172:	mov    rsi,rax
 101d175:	mov    rdx,QWORD PTR [rbp+0x6f]
 101d179:	mov    rcx,QWORD PTR [rbx+0xe0]
 101d180:	call   0x100fce0
 101d185:	mov    rdi,rax
 101d188:	mov    rcx,rsi
 101d18b:	call   QWORD PTR [rip+0xfffffffffffe4957]        # 0x1001ae8
 101d191:	mov    rdx,rax
 101d194:	mov    r9,QWORD PTR [r14]
 101d197:	mov    r8,QWORD PTR [rdi+0x18]
 101d19b:	lea    rcx,[rbp-0x51]
 101d19f:	call   QWORD PTR [rip+0xfffffffffffe489b]        # 0x1001a40
 101d1a5:	nop
 101d1a6:	lea    rcx,[rbp-0x39]
 101d1aa:	call   QWORD PTR [rip+0xfffffffffffe48f8]        # 0x1001aa8
 101d1b0:	nop
 101d1b1:	lea    rcx,[rbp-0x19]
 101d1b5:	call   QWORD PTR [rip+0xfffffffffffe48ed]        # 0x1001aa8
 101d1bb:	test   r15,r15
 101d1be:	je     0x101d2eb
 101d1c4:	lea    rax,[rbp+0x7]
 101d1c8:	mov    QWORD PTR [rbp-0x49],rax
 101d1cc:	lea    rdx,[rbp-0x51]
 101d1d0:	lea    rcx,[rbp+0x7]
 101d1d4:	call   QWORD PTR [rip+0xfffffffffffe47de]        # 0x10019b8
 101d1da:	mov    r14,rax
 101d1dd:	mov    rcx,QWORD PTR [rbx+0x8]
 101d1e1:	movsxd rdx,DWORD PTR [rcx+0x4]
 101d1e5:	mov    rsi,QWORD PTR [rdx+rbx*1+0x8]
 101d1ea:	lea    rcx,[rbp-0x59]
 101d1ee:	call   QWORD PTR [rip+0xfffffffffffe48f4]        # 0x1001ae8
 101d1f4:	mov    rdi,rax
 101d1f7:	mov    rcx,QWORD PTR [rbx+0xd8]
 101d1fe:	sub    rcx,0xffffffffffffff80
 101d202:	call   QWORD PTR [rip+0xfffffffffffe48e0]        # 0x1001ae8
 101d208:	mov    rdx,rax
 101d20b:	mov    rcx,QWORD PTR [rbx+0xd8]
 101d212:	add    rcx,0x158
 101d219:	mov    eax,DWORD PTR [rbp+0x7f]
 101d21c:	mov    BYTE PTR [rsp+0x48],al
 101d220:	mov    r8,QWORD PTR [rip+0x46101]        # 0x1063328
 101d227:	mov    QWORD PTR [rsp+0x40],r8
 101d22c:	mov    DWORD PTR [rsp+0x38],0x20
 101d234:	mov    QWORD PTR [rsp+0x30],r15
 101d239:	mov    DWORD PTR [rsp+0x28],0x1
 101d241:	mov    BYTE PTR [rsp+0x20],0x0
 101d246:	lea    r9,[rip+0xfffffffffffe4bc3]        # 0x1001e10
 101d24d:	mov    r8,rdi
 101d250:	call   0x1031100
 101d255:	mov    edx,eax
 101d257:	mov    rax,QWORD PTR [rbx+0x8]
 101d25b:	movsxd rcx,DWORD PTR [rax+0x4]
 101d25f:	add    rcx,0x8
 101d263:	add    rcx,rbx
 101d266:	mov    r9b,0x1
 101d269:	mov    r8,r14
 101d26c:	call   QWORD PTR [rsi+0x28]
 101d26f:	test   al,al
 101d271:	je     0x101d2eb
 101d273:	mov    rdx,QWORD PTR [rbp+0x6f]
 101d277:	mov    rcx,QWORD PTR [rbx+0xe0]
 101d27e:	call   0x100fce0
 101d283:	cmp    BYTE PTR [rax+0x10],0x0
 101d287:	jne    0x101d296
 101d289:	movsxd rsi,DWORD PTR [rbp+0x77]
 101d28d:	mov    rax,rsi
 101d290:	test   esi,esi
 101d292:	jne    0x101d2f2
 101d294:	jmp    0x101d299
 101d296:	mov    esi,DWORD PTR [rbp+0x77]
 101d299:	mov    eax,DWORD PTR [rip+0x46685]        # 0x1063924
 101d29f:	cmp    eax,0x2
 101d2a2:	jge    0x101d2d0
 101d2a4:	mov    r8d,0x1
 101d2aa:	or     edx,0xffffffff
 101d2ad:	mov    rcx,QWORD PTR [r15]
 101d2b0:	call   QWORD PTR [rip+0xfffffffffffe40da]        # 0x1001390
 101d2b6:	cmp    eax,0xc0
 101d2bb:	je     0x101d2d0
 101d2bd:	mov    rcx,r15
 101d2c0:	call   0x1034510
 101d2c5:	lea    rcx,[r15+0x8]
 101d2c9:	call   0x1034510
 101d2ce:	jmp    0x101d2f2
 101d2d0:	mov    rdx,QWORD PTR [rbx+0xd8]
 101d2d7:	add    rdx,0x158
 101d2de:	mov    r8b,0x1
 101d2e1:	mov    rcx,r15
 101d2e4:	call   0x10345a0
 101d2e9:	jmp    0x101d2f2
 101d2eb:	mov    BYTE PTR [rbp+0x67],0x0
 101d2ef:	mov    esi,DWORD PTR [rbp+0x77]
 101d2f2:	mov    r15,QWORD PTR [rbp+0x6f]
 101d2f6:	mov    r12,QWORD PTR [r12+0x18]
 101d2fb:	test   r12,r12
 101d2fe:	jne    0x101d040
 101d304:	jmp    0x101d55c
 101d309:	mov    rdx,r15
 101d30c:	mov    rcx,QWORD PTR [rbx+0xe0]
 101d313:	call   0x100fce0
 101d318:	lea    rdx,[rax+0x18]
 101d31c:	lea    rcx,[rbp-0x59]
 101d320:	call   QWORD PTR [rip+0xfffffffffffe477a]        # 0x1001aa0
 101d326:	lea    rcx,[rbp-0x59]
 101d32a:	call   QWORD PTR [rip+0xfffffffffffe47b8]        # 0x1001ae8
 101d330:	mov    r8,rax
 101d333:	lea    r13,[rip+0xfffffffffffe4ad6]        # 0x1001e10
 101d33a:	mov    QWORD PTR [rsp+0x20],r13
 101d33f:	mov    r9,r15
 101d342:	lea    rdx,[rbp-0x31]
 101d346:	mov    rcx,rbx
 101d349:	call   0x1021830
 101d34e:	nop
 101d34f:	mov    rdx,rax
 101d352:	lea    rcx,[rbp-0x59]
 101d356:	call   QWORD PTR [rip+0xfffffffffffe4744]        # 0x1001aa0
 101d35c:	nop
 101d35d:	lea    rcx,[rbp-0x31]
 101d361:	call   QWORD PTR [rip+0xfffffffffffe4741]        # 0x1001aa8
 101d367:	lea    r8,[rbp-0x59]
 101d36b:	lea    rdx,[rip+0xfffffffffffe89fe]        # 0x1005d70
 101d372:	lea    rcx,[rbp-0x21]
 101d376:	call   0x1013d70
 101d37b:	nop
 101d37c:	mov    rdx,rax
 101d37f:	lea    rcx,[rbp-0x59]
 101d383:	call   QWORD PTR [rip+0xfffffffffffe4717]        # 0x1001aa0
 101d389:	nop
 101d38a:	lea    rcx,[rbp-0x21]
 101d38e:	call   QWORD PTR [rip+0xfffffffffffe4714]        # 0x1001aa8
 101d394:	cmp    esi,0x2
 101d397:	setne  sil
 101d39b:	mov    rdx,r15
 101d39e:	mov    rcx,QWORD PTR [rbx+0xe0]
 101d3a5:	call   0x100fce0
 101d3aa:	lea    rcx,[rax+0x38]
 101d3ae:	call   QWORD PTR [rip+0xfffffffffffe4734]        # 0x1001ae8
 101d3b4:	mov    rdi,rax
 101d3b7:	mov    rdx,r15
 101d3ba:	mov    rcx,QWORD PTR [rbx+0xe0]
 101d3c1:	call   0x100fce0
 101d3c6:	lea    rcx,[rax+0x30]
 101d3ca:	call   QWORD PTR [rip+0xfffffffffffe4718]        # 0x1001ae8
 101d3d0:	mov    rdx,rax
 101d3d3:	mov    rcx,QWORD PTR [rbx+0xd8]
 101d3da:	add    rcx,0x10
 101d3de:	movzx  r9d,sil
 101d3e2:	mov    r8,rdi
 101d3e5:	call   0x10300e0
 101d3ea:	mov    r12,rax
 101d3ed:	mov    edx,0xc000c36e
 101d3f2:	lea    rcx,[rbp-0x41]
 101d3f6:	call   0x10132d0
 101d3fb:	mov    rsi,rax
 101d3fe:	mov    rdx,r15
 101d401:	mov    rcx,QWORD PTR [rbx+0xe0]
 101d408:	call   0x100fce0
 101d40d:	mov    rdi,rax
 101d410:	mov    rcx,rsi
 101d413:	call   QWORD PTR [rip+0xfffffffffffe46cf]        # 0x1001ae8
 101d419:	mov    rdx,rax
 101d41c:	mov    r8,QWORD PTR [rdi+0x18]
 101d420:	lea    rcx,[rbp-0x51]
 101d424:	call   QWORD PTR [rip+0xfffffffffffe4616]        # 0x1001a40
 101d42a:	nop
 101d42b:	lea    rcx,[rbp-0x41]
 101d42f:	call   QWORD PTR [rip+0xfffffffffffe4673]        # 0x1001aa8
 101d435:	test   r12,r12
 101d438:	je     0x101d558
 101d43e:	lea    rax,[rbp-0x49]
 101d442:	mov    QWORD PTR [rbp-0x41],rax
 101d446:	lea    rdx,[rbp-0x51]
 101d44a:	lea    rcx,[rbp-0x49]
 101d44e:	call   QWORD PTR [rip+0xfffffffffffe4564]        # 0x10019b8
 101d454:	mov    r14,rax
 101d457:	mov    rcx,QWORD PTR [rbx+0x8]
 101d45b:	movsxd rdx,DWORD PTR [rcx+0x4]
 101d45f:	mov    rsi,QWORD PTR [rdx+rbx*1+0x8]
 101d464:	lea    rcx,[rbp-0x59]
 101d468:	call   QWORD PTR [rip+0xfffffffffffe467a]        # 0x1001ae8
 101d46e:	mov    rdi,rax
 101d471:	mov    rcx,QWORD PTR [rbx+0xd8]
 101d478:	sub    rcx,0xffffffffffffff80
 101d47c:	call   QWORD PTR [rip+0xfffffffffffe4666]        # 0x1001ae8
 101d482:	mov    rdx,rax
 101d485:	mov    rcx,QWORD PTR [rbx+0xd8]
 101d48c:	add    rcx,0x158
 101d493:	mov    eax,DWORD PTR [rbp+0x7f]
 101d496:	mov    BYTE PTR [rsp+0x48],al
 101d49a:	mov    r8,QWORD PTR [rip+0x45e87]        # 0x1063328
 101d4a1:	mov    QWORD PTR [rsp+0x40],r8
 101d4a6:	mov    DWORD PTR [rsp+0x38],0x20
 101d4ae:	mov    QWORD PTR [rsp+0x30],r12
 101d4b3:	mov    DWORD PTR [rsp+0x28],0x1
 101d4bb:	mov    BYTE PTR [rsp+0x20],0x0
 101d4c0:	mov    r9,r13
 101d4c3:	mov    r8,rdi
 101d4c6:	call   0x1031100
 101d4cb:	mov    edx,eax
 101d4cd:	mov    rax,QWORD PTR [rbx+0x8]
 101d4d1:	movsxd rcx,DWORD PTR [rax+0x4]
 101d4d5:	add    rcx,0x8
 101d4d9:	add    rcx,rbx
 101d4dc:	mov    r9b,0x1
 101d4df:	mov    r8,r14
 101d4e2:	call   QWORD PTR [rsi+0x28]
 101d4e5:	test   al,al
 101d4e7:	je     0x101d558
 101d4e9:	mov    rdx,r15
 101d4ec:	mov    rcx,QWORD PTR [rbx+0xe0]
 101d4f3:	call   0x100fce0
 101d4f8:	cmp    BYTE PTR [rax+0x10],0x0
 101d4fc:	jne    0x101d504
 101d4fe:	cmp    DWORD PTR [rbp+0x77],0x0
 101d502:	jne    0x101d55c
 101d504:	mov    eax,DWORD PTR [rip+0x4641a]        # 0x1063924
 101d50a:	cmp    eax,0x2
 101d50d:	jge    0x101d53d
 101d50f:	mov    r8d,0x1
 101d515:	or     edx,0xffffffff
 101d518:	mov    rcx,QWORD PTR [r12]
 101d51c:	call   QWORD PTR [rip+0xfffffffffffe3e6e]        # 0x1001390
 101d522:	cmp    eax,0xc0
 101d527:	je     0x101d53d
 101d529:	mov    rcx,r12
 101d52c:	call   0x1034510
 101d531:	lea    rcx,[r12+0x8]
 101d536:	call   0x1034510
 101d53b:	jmp    0x101d55c
 101d53d:	mov    rdx,QWORD PTR [rbx+0xd8]
 101d544:	add    rdx,0x158
 101d54b:	mov    r8b,0x1
 101d54e:	mov    rcx,r12
 101d551:	call   0x10345a0
 101d556:	jmp    0x101d55c
 101d558:	mov    BYTE PTR [rbp+0x67],0x0
 101d55c:	lea    rcx,[rbp-0x51]
 101d560:	call   QWORD PTR [rip+0xfffffffffffe4542]        # 0x1001aa8
 101d566:	nop
 101d567:	lea    rcx,[rbp-0x59]
 101d56b:	call   QWORD PTR [rip+0xfffffffffffe4537]        # 0x1001aa8
 101d571:	movzx  eax,BYTE PTR [rbp+0x67]
 101d575:	add    rsp,0xc8
 101d57c:	pop    r15
 101d57e:	pop    r14
 101d580:	pop    r13
 101d582:	pop    r12
 101d584:	pop    rdi
 101d585:	pop    rsi
 101d586:	pop    rbx
 101d587:	pop    rbp
 101d588:	ret    
 101d589:	int3   
 101d58a:	int3   
 101d58b:	int3   
 101d58c:	int3   
 101d58d:	int3   
 101d58e:	int3   
 101d58f:	int3   
 101d590:	rex push rbp
 101d592:	push   rsi
 101d593:	push   rdi
 101d594:	push   r12
 101d596:	push   r13
 101d598:	push   r14
 101d59a:	push   r15
 101d59c:	lea    rbp,[rsp-0x27]
 101d5a1:	sub    rsp,0xb0
 101d5a8:	mov    QWORD PTR [rbp+0x17],0xfffffffffffffffe
 101d5b0:	mov    QWORD PTR [rsp+0xf8],rbx
 101d5b8:	mov    r12,rdx
 101d5bb:	mov    rbx,rcx
 101d5be:	xor    r13d,r13d
 101d5c1:	mov    DWORD PTR [rbp-0x49],r13d
 101d5c5:	mov    sil,0x1
 101d5c8:	mov    BYTE PTR [rbp+0x67],sil
 101d5cc:	lea    rcx,[rbp-0x21]
 101d5d0:	call   QWORD PTR [rip+0xfffffffffffe44ea]        # 0x1001ac0
 101d5d6:	nop
 101d5d7:	lea    rcx,[rbp-0x41]
 101d5db:	call   QWORD PTR [rip+0xfffffffffffe44df]        # 0x1001ac0
 101d5e1:	nop
 101d5e2:	lea    rcx,[rbp-0x31]
 101d5e6:	call   QWORD PTR [rip+0xfffffffffffe44d4]        # 0x1001ac0
 101d5ec:	nop
 101d5ed:	lea    rcx,[rbp+0x7f]
 101d5f1:	call   QWORD PTR [rip+0xfffffffffffe44c9]        # 0x1001ac0
 101d5f7:	nop
 101d5f8:	mov    rdx,r12
 101d5fb:	mov    rcx,QWORD PTR [rbx+0xe0]
 101d602:	call   0x100fce0
 101d607:	mov    r15d,DWORD PTR [rax+0x14]
 101d60b:	mov    DWORD PTR [rbp+0x77],r15d
 101d60f:	mov    rdx,r12
 101d612:	mov    rcx,QWORD PTR [rbx+0xe0]
 101d619:	call   0x100fce0
 101d61e:	cmp    DWORD PTR [rax+0x4],0x2
 101d622:	je     0x101d636
 101d624:	mov    eax,DWORD PTR [rip+0x462fa]        # 0x1063924
 101d62a:	test   eax,eax
 101d62c:	jne    0x101dac2
 101d632:	mov    r13d,DWORD PTR [rbp-0x49]
 101d636:	mov    rdx,r12
 101d639:	mov    rcx,QWORD PTR [rbx+0xe0]
 101d640:	call   0x100fce0
 101d645:	lea    rdx,[rax+0x18]
 101d649:	lea    rcx,[rbp-0x31]
 101d64d:	call   QWORD PTR [rip+0xfffffffffffe444d]        # 0x1001aa0
 101d653:	lea    rdx,[rbp-0x31]
 101d657:	mov    rcx,rbx
 101d65a:	call   0x1020990
 101d65f:	mov    r14,QWORD PTR [rbx+0xe8]
 101d666:	mov    QWORD PTR [rbp-0x39],r14
 101d66a:	test   r14,r14
 101d66d:	je     0x101dac2
 101d673:	test   BYTE PTR [r14],0x1
 101d677:	je     0x101daad
 101d67d:	lea    rdx,[rbp+0xf]
 101d681:	mov    rcx,r14
 101d684:	call   0x1012e00
 101d689:	nop
 101d68a:	mov    rcx,rax
 101d68d:	call   QWORD PTR [rip+0xfffffffffffe4455]        # 0x1001ae8
 101d693:	mov    rdi,rax
 101d696:	lea    rcx,[rbp-0x31]
 101d69a:	call   QWORD PTR [rip+0xfffffffffffe4448]        # 0x1001ae8
 101d6a0:	mov    r8,rax
 101d6a3:	mov    QWORD PTR [rsp+0x20],rdi
 101d6a8:	mov    r9,r12
 101d6ab:	lea    rdx,[rbp-0x19]
 101d6af:	mov    rcx,rbx
 101d6b2:	call   0x1021830
 101d6b7:	nop
 101d6b8:	mov    rdx,rax
 101d6bb:	lea    rcx,[rbp+0x7f]
 101d6bf:	call   QWORD PTR [rip+0xfffffffffffe43db]        # 0x1001aa0
 101d6c5:	nop
 101d6c6:	lea    rcx,[rbp-0x19]
 101d6ca:	call   QWORD PTR [rip+0xfffffffffffe43d8]        # 0x1001aa8
 101d6d0:	nop
 101d6d1:	lea    rcx,[rbp+0xf]
 101d6d5:	call   QWORD PTR [rip+0xfffffffffffe43cd]        # 0x1001aa8
 101d6db:	mov    rdx,r12
 101d6de:	mov    rcx,QWORD PTR [rbx+0xe0]
 101d6e5:	call   0x100fce0
 101d6ea:	cmp    DWORD PTR [rax+0xc],0x0
 101d6ee:	jle    0x101d7a5
 101d6f4:	mov    rdx,r12
 101d6f7:	mov    rcx,QWORD PTR [rbx+0xe0]
 101d6fe:	call   0x100fce0
 101d703:	mov    ecx,DWORD PTR [rax+0xc]
 101d706:	mov    eax,0x88888889
 101d70b:	imul   ecx
 101d70d:	lea    edi,[rcx+rdx*1]
 101d710:	sar    edi,0x5
 101d713:	mov    eax,edi
 101d715:	shr    eax,0x1f
 101d718:	add    edi,eax
 101d71a:	mov    rdx,r12
 101d71d:	mov    rcx,QWORD PTR [rbx+0xe0]
 101d724:	call   0x100fce0
 101d729:	mov    esi,DWORD PTR [rax+0xc]
 101d72c:	test   edi,edi
 101d72e:	jle    0x101d748
 101d730:	mov    eax,0x88888889
 101d735:	imul   esi
 101d737:	add    edx,esi
 101d739:	sar    edx,0x5
 101d73c:	mov    eax,edx
 101d73e:	shr    eax,0x1f
 101d741:	add    edx,eax
 101d743:	imul   edx,edx,0x3c
 101d746:	sub    esi,edx
 101d748:	lea    r8,[rip+0xfffffffffffe852d]        # 0x1005c7c
 101d74f:	lea    rdx,[rip+0xfffffffffffe852e]        # 0x1005c84
 101d756:	lea    rcx,[rbp+0x7f]
 101d75a:	call   QWORD PTR [rip+0xfffffffffffe4250]        # 0x10019b0
 101d760:	lea    rcx,[rbp-0x29]
 101d764:	call   QWORD PTR [rip+0xfffffffffffe4356]        # 0x1001ac0
 101d76a:	nop
 101d76b:	mov    DWORD PTR [rsp+0x28],esi
 101d76f:	mov    DWORD PTR [rsp+0x20],edi
 101d773:	mov    r9,QWORD PTR [rbp+0x7f]
 101d777:	mov    r8d,DWORD PTR [rbx+0x24]
 101d77b:	lea    rdx,[rip+0xfffffffffffe850e]        # 0x1005c90
 101d782:	lea    rcx,[rbp-0x29]
 101d786:	call   QWORD PTR [rip+0xfffffffffffe42b4]        # 0x1001a40
 101d78c:	lea    rdx,[rbp-0x29]
 101d790:	lea    rcx,[rbp+0x7f]
 101d794:	call   QWORD PTR [rip+0xfffffffffffe4306]        # 0x1001aa0
 101d79a:	nop
 101d79b:	lea    rcx,[rbp-0x29]
 101d79f:	call   QWORD PTR [rip+0xfffffffffffe4303]        # 0x1001aa8
 101d7a5:	mov    rdx,r12
 101d7a8:	mov    rcx,QWORD PTR [rbx+0xe0]
 101d7af:	call   0x100fce0
 101d7b4:	lea    rcx,[rax+0x30]
 101d7b8:	call   QWORD PTR [rip+0xfffffffffffe4182]        # 0x1001940
 101d7be:	mov    rdx,r12
 101d7c1:	mov    rcx,QWORD PTR [rbx+0xe0]
 101d7c8:	test   al,al
 101d7ca:	jne    0x101d828
 101d7cc:	call   0x100fce0
 101d7d1:	lea    rsi,[rip+0xfffffffffffe7288]        # 0x1004a60
 101d7d8:	cmp    DWORD PTR [rax+0x4],0x0
 101d7dc:	lea    rax,[rip+0xfffffffffffe726d]        # 0x1004a50
 101d7e3:	cmove  rsi,rax
 101d7e7:	mov    rdx,r12
 101d7ea:	mov    rcx,QWORD PTR [rbx+0xe0]
 101d7f1:	call   0x100fce0
 101d7f6:	mov    rdi,rax
 101d7f9:	mov    rdx,r12
 101d7fc:	mov    rcx,QWORD PTR [rbx+0xe0]
 101d803:	call   0x100fce0
 101d808:	mov    QWORD PTR [rsp+0x20],rsi
 101d80d:	mov    r9,QWORD PTR [rdi+0x38]
 101d811:	mov    r8,QWORD PTR [rax+0x30]
 101d815:	lea    rdx,[rip+0xfffffffffffe853c]        # 0x1005d58
 101d81c:	lea    rcx,[rbp-0x41]
 101d820:	call   QWORD PTR [rip+0xfffffffffffe421a]        # 0x1001a40
 101d826:	jmp    0x101d86a
 101d828:	call   0x100fce0
 101d82d:	lea    rdi,[rip+0xfffffffffffe722c]        # 0x1004a60
 101d834:	cmp    DWORD PTR [rax+0x4],0x0
 101d838:	lea    rax,[rip+0xfffffffffffe7211]        # 0x1004a50
 101d83f:	cmove  rdi,rax
 101d843:	mov    rdx,r12
 101d846:	mov    rcx,QWORD PTR [rbx+0xe0]
 101d84d:	call   0x100fce0
 101d852:	mov    r9,rdi
 101d855:	mov    r8,QWORD PTR [rax+0x18]
 101d859:	lea    rdx,[rip+0xfffffffffffe8410]        # 0x1005c70
 101d860:	lea    rcx,[rbp-0x41]
 101d864:	call   QWORD PTR [rip+0xfffffffffffe41d6]        # 0x1001a40
 101d86a:	lea    r8,[rip+0xfffffffffffe705b]        # 0x10048cc
 101d871:	lea    rdx,[rip+0xfffffffffffe7544]        # 0x1004dbc
 101d878:	lea    rcx,[rbp-0x41]
 101d87c:	call   QWORD PTR [rip+0xfffffffffffe412e]        # 0x10019b0
 101d882:	cmp    r15d,0x2
 101d886:	setne  sil
 101d88a:	mov    rdx,r12
 101d88d:	mov    rcx,QWORD PTR [rbx+0xe0]
 101d894:	call   0x100fce0
 101d899:	lea    rcx,[rax+0x38]
 101d89d:	call   QWORD PTR [rip+0xfffffffffffe4245]        # 0x1001ae8
 101d8a3:	mov    rdi,rax
 101d8a6:	mov    rdx,r12
 101d8a9:	mov    rcx,QWORD PTR [rbx+0xe0]
 101d8b0:	call   0x100fce0
 101d8b5:	lea    rcx,[rax+0x30]
 101d8b9:	call   QWORD PTR [rip+0xfffffffffffe4229]        # 0x1001ae8
 101d8bf:	mov    rdx,rax
 101d8c2:	mov    rcx,QWORD PTR [rbx+0xd8]
 101d8c9:	add    rcx,0x10
 101d8cd:	movzx  r9d,sil
 101d8d1:	mov    r8,rdi
 101d8d4:	call   0x10300e0
 101d8d9:	mov    rsi,rax
 101d8dc:	mov    QWORD PTR [rbp-0x1],rax
 101d8e0:	test   rax,rax
 101d8e3:	je     0x101d96f
 101d8e9:	lea    rdx,[rbp-0x11]
 101d8ed:	mov    rcx,r14
 101d8f0:	call   0x1012e00
 101d8f5:	mov    rdi,rax
 101d8f8:	or     r13d,0x1
 101d8fc:	mov    DWORD PTR [rbp-0x49],r13d
 101d900:	mov    r15,QWORD PTR [rbx]
 101d903:	mov    rdx,r12
 101d906:	mov    rcx,QWORD PTR [rbx+0xe0]
 101d90d:	call   0x100fce0
 101d912:	mov    rsi,rax
 101d915:	mov    rcx,rdi
 101d918:	call   QWORD PTR [rip+0xfffffffffffe41ca]        # 0x1001ae8
 101d91e:	mov    r14,rax
 101d921:	lea    rcx,[rbp-0x41]
 101d925:	call   QWORD PTR [rip+0xfffffffffffe41bd]        # 0x1001ae8
 101d92b:	mov    rdi,rax
 101d92e:	lea    rcx,[rbp+0x7f]
 101d932:	call   QWORD PTR [rip+0xfffffffffffe41b0]        # 0x1001ae8
 101d938:	mov    rdx,rax
 101d93b:	mov    BYTE PTR [rsp+0x38],0x0
 101d940:	movzx  ecx,BYTE PTR [rsi+0x10]
 101d944:	mov    BYTE PTR [rsp+0x30],cl
 101d948:	mov    rsi,QWORD PTR [rbp-0x1]
 101d94c:	mov    QWORD PTR [rsp+0x28],rsi
 101d951:	mov    QWORD PTR [rsp+0x20],r14
 101d956:	xor    r9d,r9d
 101d959:	mov    r8,rdi
 101d95c:	mov    rcx,rbx
 101d95f:	call   QWORD PTR [r15+0x118]
 101d966:	test   al,al
 101d968:	je     0x101d96f
 101d96a:	xor    dil,dil
 101d96d:	jmp    0x101d972
 101d96f:	mov    dil,0x1
 101d972:	test   r13b,0x1
 101d976:	je     0x101d98a
 101d978:	and    r13d,0xfffffffe
 101d97c:	mov    DWORD PTR [rbp-0x49],r13d
 101d980:	lea    rcx,[rbp-0x11]
 101d984:	call   QWORD PTR [rip+0xfffffffffffe411e]        # 0x1001aa8
 101d98a:	test   dil,dil
 101d98d:	je     0x101da37
 101d993:	xor    sil,sil
 101d996:	mov    BYTE PTR [rbp+0x67],sil
 101d99a:	lea    rdx,[rbp+0x7]
 101d99e:	mov    r14,QWORD PTR [rbp-0x39]
 101d9a2:	mov    rcx,r14
 101d9a5:	call   0x1012e50
 101d9aa:	mov    rdi,rax
 101d9ad:	mov    edx,0xc000c36b
 101d9b2:	lea    rcx,[rbp-0x9]
 101d9b6:	call   0x10132d0
 101d9bb:	nop
 101d9bc:	mov    rcx,rax
 101d9bf:	call   QWORD PTR [rip+0xfffffffffffe4123]        # 0x1001ae8
 101d9c5:	mov    rdx,rax
 101d9c8:	mov    r8,QWORD PTR [rdi]
 101d9cb:	lea    rcx,[rbp-0x21]
 101d9cf:	call   QWORD PTR [rip+0xfffffffffffe406b]        # 0x1001a40
 101d9d5:	nop
 101d9d6:	lea    rcx,[rbp-0x9]
 101d9da:	call   QWORD PTR [rip+0xfffffffffffe40c8]        # 0x1001aa8
 101d9e0:	nop
 101d9e1:	lea    rcx,[rbp+0x7]
 101d9e5:	call   QWORD PTR [rip+0xfffffffffffe40bd]        # 0x1001aa8
 101d9eb:	mov    rax,QWORD PTR [rbx+0x8]
 101d9ef:	movsxd rcx,DWORD PTR [rax+0x4]
 101d9f3:	mov    rdi,QWORD PTR [rcx+rbx*1+0x8]
 101d9f8:	lea    rcx,[rbp-0x21]
 101d9fc:	call   QWORD PTR [rip+0xfffffffffffe40e6]        # 0x1001ae8
 101da02:	mov    r8,rax
 101da05:	mov    rax,QWORD PTR [rbx+0x8]
 101da09:	movsxd rcx,DWORD PTR [rax+0x4]
 101da0d:	add    rcx,0x8
 101da11:	add    rcx,rbx
 101da14:	mov    BYTE PTR [rsp+0x30],0x1
 101da19:	mov    BYTE PTR [rsp+0x28],0x1
 101da1e:	mov    DWORD PTR [rsp+0x20],0x0
 101da26:	xor    r9d,r9d
 101da29:	mov    edx,0xc000c36b
 101da2e:	call   QWORD PTR [rdi+0x8]
 101da31:	mov    r15d,DWORD PTR [rbp+0x77]
 101da35:	jmp    0x101dab1
 101da37:	mov    rdx,r12
 101da3a:	mov    rcx,QWORD PTR [rbx+0xe0]
 101da41:	call   0x100fce0
 101da46:	mov    r15d,DWORD PTR [rbp+0x77]
 101da4a:	cmp    BYTE PTR [rax+0x10],0x0
 101da4e:	jne    0x101da55
 101da50:	test   r15d,r15d
 101da53:	jne    0x101daa9
 101da55:	mov    eax,DWORD PTR [rip+0x45ec9]        # 0x1063924
 101da5b:	cmp    eax,0x2
 101da5e:	jge    0x101da8c
 101da60:	mov    r8d,0x1
 101da66:	or     edx,0xffffffff
 101da69:	mov    rcx,QWORD PTR [rsi]
 101da6c:	call   QWORD PTR [rip+0xfffffffffffe391e]        # 0x1001390
 101da72:	cmp    eax,0xc0
 101da77:	je     0x101da8c
 101da79:	mov    rcx,rsi
 101da7c:	call   0x1034510
 101da81:	lea    rcx,[rsi+0x8]
 101da85:	call   0x1034510
 101da8a:	jmp    0x101daa5
 101da8c:	mov    rdx,QWORD PTR [rbx+0xd8]
 101da93:	add    rdx,0x158
 101da9a:	mov    r8b,0x1
 101da9d:	mov    rcx,rsi
 101daa0:	call   0x10345a0
 101daa5:	mov    r13d,DWORD PTR [rbp-0x49]
 101daa9:	mov    r14,QWORD PTR [rbp-0x39]
 101daad:	movzx  esi,BYTE PTR [rbp+0x67]
 101dab1:	mov    r14,QWORD PTR [r14+0x18]
 101dab5:	mov    QWORD PTR [rbp-0x39],r14
 101dab9:	test   r14,r14
 101dabc:	jne    0x101d673
 101dac2:	lea    rcx,[rbp+0x7f]
 101dac6:	call   QWORD PTR [rip+0xfffffffffffe3fdc]        # 0x1001aa8
 101dacc:	nop
 101dacd:	lea    rcx,[rbp-0x31]
 101dad1:	call   QWORD PTR [rip+0xfffffffffffe3fd1]        # 0x1001aa8
 101dad7:	nop
 101dad8:	lea    rcx,[rbp-0x41]
 101dadc:	call   QWORD PTR [rip+0xfffffffffffe3fc6]        # 0x1001aa8
 101dae2:	nop
 101dae3:	lea    rcx,[rbp-0x21]
 101dae7:	call   QWORD PTR [rip+0xfffffffffffe3fbb]        # 0x1001aa8
 101daed:	movzx  eax,sil
 101daf1:	mov    rbx,QWORD PTR [rsp+0xf8]
 101daf9:	add    rsp,0xb0
 101db00:	pop    r15
 101db02:	pop    r14
 101db04:	pop    r13
 101db06:	pop    r12
 101db08:	pop    rdi
 101db09:	pop    rsi
 101db0a:	pop    rbp
 101db0b:	ret    
 101db0c:	int3   
 101db0d:	int3   
 101db0e:	int3   
 101db0f:	int3   
 101db10:	int3   
 101db11:	int3   
 101db12:	int3   
 101db13:	int3   
 101db14:	int3   
 101db15:	int3   
 101db16:	int3   
 101db17:	int3   
 101db18:	int3   
 101db19:	int3   
 101db1a:	int3   
 101db1b:	int3   
 101db1c:	int3   
 101db1d:	int3   
 101db1e:	int3   
 101db1f:	int3   
 101db20:	rex push rbp
 101db22:	push   rsi
 101db23:	push   rdi
 101db24:	push   r12
 101db26:	push   r13
 101db28:	push   r14
 101db2a:	push   r15
 101db2c:	lea    rbp,[rsp-0x27]
 101db31:	sub    rsp,0xe0
 101db38:	mov    QWORD PTR [rbp+0x17],0xfffffffffffffffe
 101db40:	mov    QWORD PTR [rsp+0x128],rbx
 101db48:	mov    r12,rdx
 101db4b:	mov    r14,rcx
 101db4e:	xor    ebx,ebx
 101db50:	mov    DWORD PTR [rbp-0x79],ebx
 101db53:	xor    sil,sil
 101db56:	lea    rcx,[rbp+0x7]
 101db5a:	call   QWORD PTR [rip+0xfffffffffffe3f60]        # 0x1001ac0
 101db60:	nop
 101db61:	lea    rcx,[rbp+0x7f]
 101db65:	call   QWORD PTR [rip+0xfffffffffffe3f55]        # 0x1001ac0
 101db6b:	nop
 101db6c:	mov    rdx,r12
 101db6f:	mov    rcx,QWORD PTR [r14+0xe0]
 101db76:	call   0x100fce0
 101db7b:	mov    rdi,rax
 101db7e:	mov    rdx,r12
 101db81:	mov    rcx,QWORD PTR [r14+0xe0]
 101db88:	call   0x100fce0
 101db8d:	mov    r9,QWORD PTR [rdi+0x38]
 101db91:	mov    r8,QWORD PTR [rax+0x30]
 101db95:	lea    rdx,[rip+0xfffffffffffe7304]        # 0x1004ea0
 101db9c:	lea    rcx,[rbp+0x7f]
 101dba0:	call   QWORD PTR [rip+0xfffffffffffe3e9a]        # 0x1001a40
 101dba6:	mov    rax,QWORD PTR [r14+0x8]
 101dbaa:	movsxd rcx,DWORD PTR [rax+0x4]
 101dbae:	mov    rdi,QWORD PTR [rcx+r14*1+0x8]
 101dbb3:	lea    rcx,[rbp+0x7f]
 101dbb7:	call   QWORD PTR [rip+0xfffffffffffe3f2b]        # 0x1001ae8
 101dbbd:	mov    r8,rax
 101dbc0:	mov    rax,QWORD PTR [r14+0x8]
 101dbc4:	movsxd rcx,DWORD PTR [rax+0x4]
 101dbc8:	add    rcx,0x8
 101dbcc:	add    rcx,r14
 101dbcf:	mov    BYTE PTR [rsp+0x30],0x1
 101dbd4:	mov    BYTE PTR [rsp+0x28],0x1
 101dbd9:	mov    DWORD PTR [rsp+0x20],ebx
 101dbdd:	xor    r9d,r9d
 101dbe0:	mov    edx,0x4000c484
 101dbe5:	call   QWORD PTR [rdi+0x8]
 101dbe8:	mov    rdx,r12
 101dbeb:	mov    rcx,QWORD PTR [r14+0xe0]
 101dbf2:	call   0x100fce0
 101dbf7:	mov    ecx,DWORD PTR [rax+0x8]
 101dbfa:	dec    ecx
 101dbfc:	cmp    ecx,0x8
 101dbff:	ja     0x101e1ea
 101dc05:	movsxd rax,ecx
 101dc08:	lea    rdx,[rip+0xfffffffffffe23f1]        # 0x1000000
 101dc0f:	mov    ecx,DWORD PTR [rdx+rax*4+0x1e220]
 101dc16:	add    rcx,rdx
 101dc19:	jmp    rcx
 101dc1b:	mov    rdx,r12
 101dc1e:	mov    rcx,r14
 101dc21:	call   0x101c6a0
 101dc26:	jmp    0x101e1e7
 101dc2b:	mov    rdx,r12
 101dc2e:	mov    rcx,r14
 101dc31:	call   0x101d590
 101dc36:	jmp    0x101e1e7
 101dc3b:	mov    rdx,r12
 101dc3e:	mov    rcx,QWORD PTR [r14+0xe0]
 101dc45:	call   0x100fce0
 101dc4a:	lea    r8,[rax+0x18]
 101dc4e:	lea    rdx,[rip+0xfffffffffffe725b]        # 0x1004eb0
 101dc55:	lea    rcx,[rbp+0xf]
 101dc59:	call   0x1013d70
 101dc5e:	mov    rbx,rax
 101dc61:	mov    rdx,r12
 101dc64:	mov    rcx,QWORD PTR [r14+0xe0]
 101dc6b:	call   0x100fce0
 101dc70:	mov    rdx,rbx
 101dc73:	lea    rcx,[rax+0x18]
 101dc77:	call   QWORD PTR [rip+0xfffffffffffe3e23]        # 0x1001aa0
 101dc7d:	nop
 101dc7e:	lea    rcx,[rbp+0xf]
 101dc82:	jmp    0x101e1d6
 101dc87:	mov    rdx,r12
 101dc8a:	mov    rcx,QWORD PTR [r14+0xe0]
 101dc91:	call   0x100fce0
 101dc96:	lea    r8,[rax+0x18]
 101dc9a:	lea    rdx,[rip+0xfffffffffffe7257]        # 0x1004ef8
 101dca1:	lea    rcx,[rbp-0x21]
 101dca5:	call   0x1013d70
 101dcaa:	nop
 101dcab:	lea    r8,[rip+0xfffffffffffe7216]        # 0x1004ec8
 101dcb2:	mov    rdx,rax
 101dcb5:	lea    rcx,[rbp-0x61]
 101dcb9:	call   0x100af10
 101dcbe:	mov    rbx,rax
 101dcc1:	mov    rdx,r12
 101dcc4:	mov    rcx,QWORD PTR [r14+0xe0]
 101dccb:	call   0x100fce0
 101dcd0:	mov    rdx,rbx
 101dcd3:	lea    rcx,[rax+0x18]
 101dcd7:	call   QWORD PTR [rip+0xfffffffffffe3dc3]        # 0x1001aa0
 101dcdd:	nop
 101dcde:	lea    rcx,[rbp-0x61]
 101dce2:	call   QWORD PTR [rip+0xfffffffffffe3dc0]        # 0x1001aa8
 101dce8:	nop
 101dce9:	lea    rcx,[rbp-0x21]
 101dced:	jmp    0x101e1d6
 101dcf2:	mov    rdx,r12
 101dcf5:	mov    rcx,QWORD PTR [r14+0xe0]
 101dcfc:	call   0x100fce0
 101dd01:	lea    r8,[rax+0x18]
 101dd05:	lea    rdx,[rip+0xfffffffffffe71fc]        # 0x1004f08
 101dd0c:	lea    rcx,[rbp-0x1]
 101dd10:	call   0x1013d70
 101dd15:	nop
 101dd16:	lea    r8,[rip+0xfffffffffffe71ab]        # 0x1004ec8
 101dd1d:	mov    rdx,rax
 101dd20:	lea    rcx,[rbp-0x51]
 101dd24:	call   0x100af10
 101dd29:	mov    rbx,rax
 101dd2c:	mov    rdx,r12
 101dd2f:	mov    rcx,QWORD PTR [r14+0xe0]
 101dd36:	call   0x100fce0
 101dd3b:	mov    rdx,rbx
 101dd3e:	lea    rcx,[rax+0x18]
 101dd42:	call   QWORD PTR [rip+0xfffffffffffe3d58]        # 0x1001aa0
 101dd48:	nop
 101dd49:	lea    rcx,[rbp-0x51]
 101dd4d:	call   QWORD PTR [rip+0xfffffffffffe3d55]        # 0x1001aa8
 101dd53:	nop
 101dd54:	lea    rcx,[rbp-0x1]
 101dd58:	jmp    0x101e1d6
 101dd5d:	cmp    BYTE PTR [r14+0x28],0x0
 101dd62:	jne    0x101dd92
 101dd64:	mov    rax,QWORD PTR [r14+0x8]
 101dd68:	movsxd rcx,DWORD PTR [rax+0x4]
 101dd6c:	add    rcx,0x8
 101dd70:	add    rcx,r14
 101dd73:	mov    rax,QWORD PTR [rcx]
 101dd76:	mov    BYTE PTR [rsp+0x28],0x1
 101dd7b:	mov    BYTE PTR [rsp+0x20],0x1
 101dd80:	xor    r9d,r9d
 101dd83:	mov    r8b,0x1
 101dd86:	mov    edx,0xc000c40d
 101dd8b:	call   QWORD PTR [rax]
 101dd8d:	jmp    0x101e1ea
 101dd92:	mov    rdx,r12
 101dd95:	mov    rcx,QWORD PTR [r14+0xe0]
 101dd9c:	call   0x100fce0
 101dda1:	lea    rcx,[rax+0x18]
 101dda5:	call   QWORD PTR [rip+0xfffffffffffe3d3d]        # 0x1001ae8
 101ddab:	mov    rdx,rax
 101ddae:	lea    rcx,[rbp-0x31]
 101ddb2:	call   0x1033c90
 101ddb7:	nop
 101ddb8:	mov    r8,rax
 101ddbb:	lea    rdx,[rip+0xfffffffffffe715e]        # 0x1004f20
 101ddc2:	lea    rcx,[rbp-0x11]
 101ddc6:	call   0x1013d70
 101ddcb:	nop
 101ddcc:	lea    r8,[rip+0xfffffffffffe7141]        # 0x1004f14
 101ddd3:	mov    rdx,rax
 101ddd6:	lea    rcx,[rbp-0x41]
 101ddda:	call   0x100af10
 101dddf:	mov    rbx,rax
 101dde2:	mov    rdx,r12
 101dde5:	mov    rcx,QWORD PTR [r14+0xe0]
 101ddec:	call   0x100fce0
 101ddf1:	mov    rdx,rbx
 101ddf4:	lea    rcx,[rax+0x18]
 101ddf8:	call   QWORD PTR [rip+0xfffffffffffe3ca2]        # 0x1001aa0
 101ddfe:	nop
 101ddff:	lea    rcx,[rbp-0x41]
 101de03:	call   QWORD PTR [rip+0xfffffffffffe3c9f]        # 0x1001aa8
 101de09:	nop
 101de0a:	lea    rcx,[rbp-0x11]
 101de0e:	call   QWORD PTR [rip+0xfffffffffffe3c94]        # 0x1001aa8
 101de14:	nop
 101de15:	lea    rcx,[rbp-0x31]
 101de19:	jmp    0x101e1d6
 101de1e:	cmp    BYTE PTR [r14+0x28],0x0
 101de23:	je     0x101dd64
 101de29:	mov    sil,0x1
 101de2c:	mov    rdx,r12
 101de2f:	mov    rcx,QWORD PTR [r14+0xe0]
 101de36:	call   0x100fce0
 101de3b:	lea    rdx,[rax+0x18]
 101de3f:	lea    rcx,[rbp+0x77]
 101de43:	call   QWORD PTR [rip+0xfffffffffffe3b6f]        # 0x10019b8
 101de49:	nop
 101de4a:	mov    edi,ebx
 101de4c:	mov    DWORD PTR [rbp+0x67],ebx
 101de4f:	xor    r8d,r8d
 101de52:	lea    rdx,[rip+0xfffffffffffe710f]        # 0x1004f68
 101de59:	lea    rcx,[rbp+0x77]
 101de5d:	call   QWORD PTR [rip+0xfffffffffffe3bf5]        # 0x1001a58
 101de63:	cmp    eax,0xffffffff
 101de66:	jne    0x101decc
 101de68:	xor    r8d,r8d
 101de6b:	lea    rdx,[rip+0xfffffffffffe710e]        # 0x1004f80
 101de72:	lea    rcx,[rbp+0x77]
 101de76:	call   QWORD PTR [rip+0xfffffffffffe3bdc]        # 0x1001a58
 101de7c:	cmp    eax,0xffffffff
 101de7f:	jne    0x101decc
 101de81:	xor    r8d,r8d
 101de84:	lea    rdx,[rip+0xfffffffffffe711d]        # 0x1004fa8
 101de8b:	lea    rcx,[rbp+0x77]
 101de8f:	call   QWORD PTR [rip+0xfffffffffffe3bc3]        # 0x1001a58
 101de95:	cmp    eax,0xffffffff
 101de98:	jne    0x101decc
 101de9a:	xor    r8d,r8d
 101de9d:	lea    rdx,[rip+0xfffffffffffe711c]        # 0x1004fc0
 101dea4:	lea    rcx,[rbp+0x77]
 101dea8:	call   QWORD PTR [rip+0xfffffffffffe3baa]        # 0x1001a58
 101deae:	cmp    eax,0xffffffff
 101deb1:	jne    0x101decc
 101deb3:	xor    r8d,r8d
 101deb6:	lea    rdx,[rip+0xfffffffffffe7113]        # 0x1004fd0
 101debd:	lea    rcx,[rbp+0x77]
 101dec1:	call   QWORD PTR [rip+0xfffffffffffe3b91]        # 0x1001a58
 101dec7:	cmp    eax,0xffffffff
 101deca:	je     0x101ded4
 101decc:	mov    edi,0x1
 101ded1:	mov    DWORD PTR [rbp+0x67],edi
 101ded4:	xor    r8d,r8d
 101ded7:	lea    rdx,[rip+0xfffffffffffe710a]        # 0x1004fe8
 101dede:	lea    rcx,[rbp+0x77]
 101dee2:	call   QWORD PTR [rip+0xfffffffffffe3b70]        # 0x1001a58
 101dee8:	cmp    eax,0xffffffff
 101deeb:	je     0x101def3
 101deed:	or     edi,0x4
 101def0:	mov    DWORD PTR [rbp+0x67],edi
 101def3:	xor    r8d,r8d
 101def6:	lea    rdx,[rip+0xfffffffffffe710b]        # 0x1005008
 101defd:	lea    rcx,[rbp+0x77]
 101df01:	call   QWORD PTR [rip+0xfffffffffffe3b51]        # 0x1001a58
 101df07:	cmp    eax,0xffffffff
 101df0a:	je     0x101df12
 101df0c:	or     edi,0x2
 101df0f:	mov    DWORD PTR [rbp+0x67],edi
 101df12:	test   edi,edi
 101df14:	je     0x101e0da
 101df1a:	mov    r15,QWORD PTR [r14+0xe8]
 101df21:	test   r15,r15
 101df24:	je     0x101e183
 101df2a:	nop    WORD PTR [rax+rax*1+0x0]
 101df30:	mov    ecx,DWORD PTR [r15]
 101df33:	mov    eax,ecx
 101df35:	xor    eax,edi
 101df37:	sub    ecx,edi
 101df39:	cmp    eax,ecx
 101df3b:	jne    0x101e0c8
 101df41:	mov    r13d,0x20019
 101df47:	cmp    BYTE PTR [r14+0x2a],0x0
 101df4c:	je     0x101df6a
 101df4e:	mov    eax,DWORD PTR [r15+0x4]
 101df52:	cmp    eax,0x20
 101df55:	je     0x101df64
 101df57:	cmp    eax,0x40
 101df5a:	jne    0x101df6a
 101df5c:	mov    r13d,0x20119
 101df62:	jmp    0x101df6a
 101df64:	mov    r13d,0x20219
 101df6a:	mov    rdx,r12
 101df6d:	mov    rcx,QWORD PTR [r14+0xe0]
 101df74:	call   0x100fce0
 101df79:	lea    rdx,[rax+0x18]
 101df7d:	lea    rcx,[rbp+0x77]
 101df81:	call   QWORD PTR [rip+0xfffffffffffe3b19]        # 0x1001aa0
 101df87:	lea    rdx,[rbp-0x69]
 101df8b:	mov    rcx,r15
 101df8e:	call   0x1012e00
 101df93:	nop
 101df94:	mov    rcx,rax
 101df97:	call   QWORD PTR [rip+0xfffffffffffe3b4b]        # 0x1001ae8
 101df9d:	mov    rdi,rax
 101dfa0:	lea    rcx,[rbp+0x77]
 101dfa4:	call   QWORD PTR [rip+0xfffffffffffe3b3e]        # 0x1001ae8
 101dfaa:	mov    r8,rax
 101dfad:	mov    QWORD PTR [rsp+0x20],rdi
 101dfb2:	mov    r9,r12
 101dfb5:	lea    rdx,[rbp-0x71]
 101dfb9:	mov    rcx,r14
 101dfbc:	call   0x1021830
 101dfc1:	nop
 101dfc2:	mov    rdx,rax
 101dfc5:	lea    rcx,[rbp+0x77]
 101dfc9:	call   QWORD PTR [rip+0xfffffffffffe3ad1]        # 0x1001aa0
 101dfcf:	nop
 101dfd0:	lea    rcx,[rbp-0x71]
 101dfd4:	call   QWORD PTR [rip+0xfffffffffffe3ace]        # 0x1001aa8
 101dfda:	nop
 101dfdb:	lea    rcx,[rbp-0x69]
 101dfdf:	call   QWORD PTR [rip+0xfffffffffffe3ac3]        # 0x1001aa8
 101dfe5:	test   sil,sil
 101dfe8:	je     0x101e081
 101dfee:	mov    rax,QWORD PTR [r14+0x8]
 101dff2:	movsxd rcx,DWORD PTR [rax+0x4]
 101dff6:	lea    rsi,[r14+0x8]
 101dffa:	add    rsi,rcx
 101dffd:	lea    rdx,[rbp-0x39]
 101e001:	mov    rcx,r15
 101e004:	call   0x1012e00
 101e009:	nop
 101e00a:	or     ebx,0x1
 101e00d:	mov    DWORD PTR [rbp-0x79],ebx
 101e010:	mov    rcx,rax
 101e013:	call   QWORD PTR [rip+0xfffffffffffe3acf]        # 0x1001ae8
 101e019:	mov    r9,rax
 101e01c:	mov    BYTE PTR [rsp+0x20],0x0
 101e021:	mov    r8,r12
 101e024:	lea    rdx,[rbp-0x49]
 101e028:	mov    rcx,r14
 101e02b:	call   0x101e740
 101e030:	nop
 101e031:	or     ebx,0x2
 101e034:	mov    DWORD PTR [rbp-0x79],ebx
 101e037:	lea    r8,[rip+0xfffffffffffe6fea]        # 0x1005028
 101e03e:	mov    rdx,rax
 101e041:	lea    rcx,[rbp-0x59]
 101e045:	call   0x100af10
 101e04a:	nop
 101e04b:	or     ebx,0x4
 101e04e:	mov    DWORD PTR [rbp-0x79],ebx
 101e051:	mov    rcx,rax
 101e054:	call   QWORD PTR [rip+0xfffffffffffe3a8e]        # 0x1001ae8
 101e05a:	mov    rdi,rax
 101e05d:	lea    rcx,[rbp+0x77]
 101e061:	call   QWORD PTR [rip+0xfffffffffffe3a81]        # 0x1001ae8
 101e067:	mov    rcx,rax
 101e06a:	mov    r9d,r13d
 101e06d:	mov    r8,rsi
 101e070:	mov    rdx,rdi
 101e073:	call   0x10335b0
 101e078:	test   al,al
 101e07a:	je     0x101e081
 101e07c:	mov    sil,0x1
 101e07f:	jmp    0x101e084
 101e081:	xor    sil,sil
 101e084:	test   bl,0x4
 101e087:	je     0x101e09a
 101e089:	and    ebx,0xfffffffb
 101e08c:	mov    DWORD PTR [rbp-0x79],ebx
 101e08f:	lea    rcx,[rbp-0x59]
 101e093:	call   QWORD PTR [rip+0xfffffffffffe3a0f]        # 0x1001aa8
 101e099:	nop
 101e09a:	test   bl,0x2
 101e09d:	je     0x101e0b0
 101e09f:	and    ebx,0xfffffffd
 101e0a2:	mov    DWORD PTR [rbp-0x79],ebx
 101e0a5:	lea    rcx,[rbp-0x49]
 101e0a9:	call   QWORD PTR [rip+0xfffffffffffe39f9]        # 0x1001aa8
 101e0af:	nop
 101e0b0:	test   bl,0x1
 101e0b3:	je     0x101e0c5
 101e0b5:	and    ebx,0xfffffffe
 101e0b8:	mov    DWORD PTR [rbp-0x79],ebx
 101e0bb:	lea    rcx,[rbp-0x39]
 101e0bf:	call   QWORD PTR [rip+0xfffffffffffe39e3]        # 0x1001aa8
 101e0c5:	mov    edi,DWORD PTR [rbp+0x67]
 101e0c8:	mov    r15,QWORD PTR [r15+0x18]
 101e0cc:	test   r15,r15
 101e0cf:	jne    0x101df30
 101e0d5:	jmp    0x101e183
 101e0da:	mov    rax,QWORD PTR [r14+0x8]
 101e0de:	movsxd rdi,DWORD PTR [rax+0x4]
 101e0e2:	add    rdi,r14
 101e0e5:	mov    BYTE PTR [rsp+0x20],0x0
 101e0ea:	lea    r9,[rip+0xfffffffffffe3d1f]        # 0x1001e10
 101e0f1:	mov    r8,r12
 101e0f4:	lea    rdx,[rbp-0x19]
 101e0f8:	mov    rcx,r14
 101e0fb:	call   0x101e740
 101e100:	nop
 101e101:	mov    DWORD PTR [rbp-0x79],0x8
 101e108:	lea    r8,[rip+0xfffffffffffe6f19]        # 0x1005028
 101e10f:	mov    rdx,rax
 101e112:	lea    rcx,[rbp-0x29]
 101e116:	call   0x100af10
 101e11b:	nop
 101e11c:	mov    r14d,0x18
 101e122:	mov    DWORD PTR [rbp-0x79],r14d
 101e126:	mov    rcx,rax
 101e129:	call   QWORD PTR [rip+0xfffffffffffe39b9]        # 0x1001ae8
 101e12f:	mov    rbx,rax
 101e132:	lea    rcx,[rbp+0x77]
 101e136:	call   QWORD PTR [rip+0xfffffffffffe39ac]        # 0x1001ae8
 101e13c:	mov    rcx,rax
 101e13f:	mov    r9d,0x20019
 101e145:	lea    r8,[rdi+0x8]
 101e149:	mov    rdx,rbx
 101e14c:	call   0x10335b0
 101e151:	test   al,al
 101e153:	setne  sil
 101e157:	and    r14d,0xffffffef
 101e15b:	mov    DWORD PTR [rbp-0x79],r14d
 101e15f:	lea    rcx,[rbp-0x29]
 101e163:	call   QWORD PTR [rip+0xfffffffffffe393f]        # 0x1001aa8
 101e169:	nop
 101e16a:	test   r14b,0x8
 101e16e:	je     0x101e183
 101e170:	and    r14d,0xfffffff7
 101e174:	mov    DWORD PTR [rbp-0x79],r14d
 101e178:	lea    rcx,[rbp-0x19]
 101e17c:	call   QWORD PTR [rip+0xfffffffffffe3926]        # 0x1001aa8
 101e182:	nop
 101e183:	lea    rcx,[rbp+0x77]
 101e187:	call   QWORD PTR [rip+0xfffffffffffe391b]        # 0x1001aa8
 101e18d:	jmp    0x101e1ea
 101e18f:	mov    rdx,r12
 101e192:	mov    rcx,QWORD PTR [r14+0xe0]
 101e199:	call   0x100fce0
 101e19e:	lea    r8,[rax+0x18]
 101e1a2:	lea    rdx,[rip+0xfffffffffffe6e8f]        # 0x1005038
 101e1a9:	lea    rcx,[rbp-0x9]
 101e1ad:	call   0x1013d70
 101e1b2:	mov    rbx,rax
 101e1b5:	mov    rdx,r12
 101e1b8:	mov    rcx,QWORD PTR [r14+0xe0]
 101e1bf:	call   0x100fce0
 101e1c4:	mov    rdx,rbx
 101e1c7:	lea    rcx,[rax+0x18]
 101e1cb:	call   QWORD PTR [rip+0xfffffffffffe38cf]        # 0x1001aa0
 101e1d1:	nop
 101e1d2:	lea    rcx,[rbp-0x9]
 101e1d6:	call   QWORD PTR [rip+0xfffffffffffe38cc]        # 0x1001aa8
 101e1dc:	mov    rdx,r12
 101e1df:	mov    rcx,r14
 101e1e2:	call   0x101cae0
 101e1e7:	movzx  esi,al
 101e1ea:	lea    rcx,[rbp+0x7f]
 101e1ee:	call   QWORD PTR [rip+0xfffffffffffe38b4]        # 0x1001aa8
 101e1f4:	nop
 101e1f5:	lea    rcx,[rbp+0x7]
 101e1f9:	call   QWORD PTR [rip+0xfffffffffffe38a9]        # 0x1001aa8
 101e1ff:	movzx  eax,sil
 101e203:	mov    rbx,QWORD PTR [rsp+0x128]
 101e20b:	add    rsp,0xe0
 101e212:	pop    r15
 101e214:	pop    r14
 101e216:	pop    r13
 101e218:	pop    r12
 101e21a:	pop    rdi
 101e21b:	pop    rsi
 101e21c:	pop    rbp
 101e21d:	ret    
 101e21e:	xchg   ax,ax
 101e220:	sbb    ebx,esp
 101e222:	add    DWORD PTR [rax],eax
 101e224:	sub    ebx,esp
 101e226:	add    DWORD PTR [rax],eax
 101e228:	fsubr  st(1),st
 101e22a:	add    DWORD PTR [rax],eax
 101e22c:	(bad)  
 101e22d:	loope  0x101e230
 101e22f:	add    BYTE PTR [rbx],bh
 101e231:	fadd   QWORD PTR [rcx]
 101e233:	add    BYTE PTR [rdi-0xdfffe24],al
 101e239:	fadd   QWORD PTR [rcx]
 101e23b:	add    BYTE PTR [rbp-0x23],bl
 101e23e:	add    DWORD PTR [rax],eax
 101e240:	(bad)  
 101e241:	fiadd  WORD PTR [rcx]
 101e243:	add    ah,cl
 101e245:	int3   
 101e246:	int3   
 101e247:	int3   
 101e248:	int3   
 101e249:	int3   
 101e24a:	int3   
 101e24b:	int3   
 101e24c:	int3   
 101e24d:	int3   
 101e24e:	int3   
 101e24f:	int3   
 101e250:	rex push rbx
 101e252:	push   rsi
 101e253:	push   rdi
 101e254:	sub    rsp,0x80
 101e25b:	mov    QWORD PTR [rsp+0x40],0xfffffffffffffffe
 101e264:	mov    rdi,rcx
 101e267:	lea    rcx,[rsp+0x48]
 101e26c:	call   QWORD PTR [rip+0xfffffffffffe30f6]        # 0x1001368
 101e272:	lea    rcx,[rsp+0xa0]
 101e27a:	call   QWORD PTR [rip+0xfffffffffffe3840]        # 0x1001ac0
 101e280:	nop
 101e281:	mov    rax,QWORD PTR [rdi+0x18]
 101e285:	mov    QWORD PTR [rsp+0x20],rax
 101e28a:	mov    r9,QWORD PTR [rdi+0x10]
 101e28e:	lea    r8,[rip+0x451bb]        # 0x1063450
 101e295:	lea    rdx,[rip+0xfffffffffffe7da4]        # 0x1006040
 101e29c:	lea    rcx,[rsp+0xa0]
 101e2a4:	call   QWORD PTR [rip+0xfffffffffffe3796]        # 0x1001a40
 101e2aa:	lea    rcx,[rsp+0xa0]
 101e2b2:	call   QWORD PTR [rip+0xfffffffffffe3830]        # 0x1001ae8
 101e2b8:	mov    rcx,rax
 101e2bb:	mov    QWORD PTR [rsp+0x38],0x0
 101e2c4:	mov    DWORD PTR [rsp+0x30],0xffffffff
 101e2cc:	mov    eax,DWORD PTR [rsp+0x4c]
 101e2d0:	mov    DWORD PTR [rsp+0x28],eax
 101e2d4:	mov    DWORD PTR [rsp+0x20],eax
 101e2d8:	mov    edx,0x40000001
 101e2dd:	mov    r9d,0xff
 101e2e3:	mov    r8d,0x6
 101e2e9:	call   QWORD PTR [rip+0xfffffffffffe3129]        # 0x1001418
 101e2ef:	mov    QWORD PTR [rdi+0x50],rax
 101e2f3:	cmp    rax,0xffffffffffffffff
 101e2f7:	setne  sil
 101e2fb:	test   sil,sil
 101e2fe:	jne    0x101e335
 101e300:	mov    rax,QWORD PTR [rdi+0x8]
 101e304:	movsxd rcx,DWORD PTR [rax+0x4]
 101e308:	mov    rbx,QWORD PTR [rcx+rdi*1+0x8]
 101e30d:	call   QWORD PTR [rip+0xfffffffffffe323d]        # 0x1001550
 101e313:	mov    edx,eax
 101e315:	mov    rax,QWORD PTR [rdi+0x8]
 101e319:	movsxd rcx,DWORD PTR [rax+0x4]
 101e31d:	add    rcx,0x8
 101e321:	add    rcx,rdi
 101e324:	xor    r9d,r9d
 101e327:	mov    r8d,0xc000c48a
 101e32d:	call   QWORD PTR [rbx+0x20]
 101e330:	jmp    0x101e426
 101e335:	lea    rcx,[rsp+0xa8]
 101e33d:	call   QWORD PTR [rip+0xfffffffffffe377d]        # 0x1001ac0
 101e343:	nop
 101e344:	mov    edx,0x6
 101e349:	mov    rcx,QWORD PTR [rdi+0x50]
 101e34d:	call   0x1014120
 101e352:	mov    edx,eax
 101e354:	test   eax,eax
 101e356:	jne    0x101e3ec
 101e35c:	mov    edx,0x4000c4a5
 101e361:	lea    rcx,[rsp+0xb0]
 101e369:	call   0x10132d0
 101e36e:	nop
 101e36f:	mov    rcx,rax
 101e372:	call   QWORD PTR [rip+0xfffffffffffe3770]        # 0x1001ae8
 101e378:	mov    rdx,rax
 101e37b:	mov    r8,QWORD PTR [rsp+0xa0]
 101e383:	lea    rcx,[rsp+0xa8]
 101e38b:	call   QWORD PTR [rip+0xfffffffffffe36af]        # 0x1001a40
 101e391:	nop
 101e392:	lea    rcx,[rsp+0xb0]
 101e39a:	call   QWORD PTR [rip+0xfffffffffffe3708]        # 0x1001aa8
 101e3a0:	mov    rax,QWORD PTR [rdi+0x8]
 101e3a4:	movsxd rcx,DWORD PTR [rax+0x4]
 101e3a8:	mov    rbx,QWORD PTR [rcx+rdi*1+0x8]
 101e3ad:	lea    rcx,[rsp+0xa8]
 101e3b5:	call   QWORD PTR [rip+0xfffffffffffe372d]        # 0x1001ae8
 101e3bb:	mov    r8,rax
 101e3be:	mov    rax,QWORD PTR [rdi+0x8]
 101e3c2:	movsxd rcx,DWORD PTR [rax+0x4]
 101e3c6:	add    rcx,0x8
 101e3ca:	add    rcx,rdi
 101e3cd:	mov    BYTE PTR [rsp+0x30],0x1
 101e3d2:	mov    BYTE PTR [rsp+0x28],0x1
 101e3d7:	mov    DWORD PTR [rsp+0x20],0x0
 101e3df:	xor    r9d,r9d
 101e3e2:	mov    edx,0x4000c4a5
 101e3e7:	call   QWORD PTR [rbx+0x8]
 101e3ea:	jmp    0x101e417
 101e3ec:	xor    r9d,r9d
 101e3ef:	mov    r8d,0xc000c48a
 101e3f5:	cmp    eax,0xffffffff
 101e3f8:	mov    rax,QWORD PTR [rdi+0x8]
 101e3fc:	movsxd rcx,DWORD PTR [rax+0x4]
 101e400:	jne    0x101e407
 101e402:	mov    edx,0xc000c4a6
 101e407:	add    rcx,0x8
 101e40b:	add    rcx,rdi
 101e40e:	mov    rax,QWORD PTR [rcx]
 101e411:	call   QWORD PTR [rax+0x20]
 101e414:	xor    sil,sil
 101e417:	lea    rcx,[rsp+0xa8]
 101e41f:	call   QWORD PTR [rip+0xfffffffffffe3683]        # 0x1001aa8
 101e425:	nop
 101e426:	lea    rcx,[rsp+0xa0]
 101e42e:	call   QWORD PTR [rip+0xfffffffffffe3674]        # 0x1001aa8
 101e434:	movzx  eax,sil
 101e438:	add    rsp,0x80
 101e43f:	pop    rdi
 101e440:	pop    rsi
 101e441:	pop    rbx
 101e442:	ret    
 101e443:	int3   
 101e444:	int3   
 101e445:	int3   
 101e446:	int3   
 101e447:	int3   
 101e448:	int3   
 101e449:	int3   
 101e44a:	int3   
 101e44b:	int3   
 101e44c:	int3   
 101e44d:	int3   
 101e44e:	int3   
 101e44f:	int3   
 101e450:	mov    QWORD PTR [rsp+0x8],rbx
 101e455:	mov    QWORD PTR [rsp+0x10],rbp
 101e45a:	mov    QWORD PTR [rsp+0x18],rsi
 101e45f:	push   rdi
 101e460:	sub    rsp,0x20
 101e464:	mov    rdi,rcx
 101e467:	mov    rcx,QWORD PTR [rcx+0x70]
 101e46b:	test   rcx,rcx
 101e46e:	je     0x101e476
 101e470:	call   QWORD PTR [rip+0xfffffffffffe3062]        # 0x10014d8
 101e476:	xor    eax,eax
 101e478:	mov    ebp,0x1
 101e47d:	xor    r9d,r9d
 101e480:	mov    QWORD PTR [rdi+0x58],rax
 101e484:	mov    QWORD PTR [rdi+0x60],rax
 101e488:	mov    QWORD PTR [rdi+0x68],rax
 101e48c:	xor    r8d,r8d
 101e48f:	mov    edx,ebp
 101e491:	xor    ecx,ecx
 101e493:	mov    QWORD PTR [rdi+0x70],rax
 101e497:	call   QWORD PTR [rip+0xfffffffffffe2f0b]        # 0x10013a8
 101e49d:	mov    rcx,QWORD PTR [rdi+0x50]
 101e4a1:	lea    rdx,[rdi+0x58]
 101e4a5:	mov    QWORD PTR [rdi+0x70],rax
 101e4a9:	call   QWORD PTR [rip+0xfffffffffffe2ed1]        # 0x1001380
 101e4af:	mov    ebx,eax
 101e4b1:	call   QWORD PTR [rip+0xfffffffffffe3099]        # 0x1001550
 101e4b7:	xor    esi,esi
 101e4b9:	test   ebx,ebx
 101e4bb:	jne    0x101e4e7
 101e4bd:	cmp    eax,0x3e5
 101e4c2:	je     0x101e4e7
 101e4c4:	mov    rcx,QWORD PTR [rdi+0x8]
 101e4c8:	xor    r9d,r9d
 101e4cb:	mov    r8d,0xc000c48b
 101e4d1:	movsxd rdx,DWORD PTR [rcx+0x4]
 101e4d5:	lea    rcx,[rdi+0x8]
 101e4d9:	mov    ebp,esi
 101e4db:	add    rcx,rdx
 101e4de:	mov    edx,eax
 101e4e0:	mov    r10,QWORD PTR [rcx]
 101e4e3:	call   QWORD PTR [r10+0x20]
 101e4e7:	mov    rbx,QWORD PTR [rsp+0x30]
 101e4ec:	mov    rsi,QWORD PTR [rsp+0x40]
 101e4f1:	test   ebp,ebp
 101e4f3:	mov    rbp,QWORD PTR [rsp+0x38]
 101e4f8:	setne  al
 101e4fb:	add    rsp,0x20
 101e4ff:	pop    rdi
 101e500:	ret    
 101e501:	int3   
 101e502:	int3   
 101e503:	int3   
 101e504:	int3   
 101e505:	int3   
 101e506:	int3   
 101e507:	int3   
 101e508:	int3   
 101e509:	int3   
 101e50a:	int3   
 101e50b:	int3   
 101e50c:	int3   
 101e50d:	int3   
 101e50e:	int3   
 101e50f:	int3   
 101e510:	mov    QWORD PTR [rsp+0x10],rsi
 101e515:	push   rdi
 101e516:	sub    rsp,0x20
 101e51a:	mov    rdi,rcx
 101e51d:	mov    rcx,QWORD PTR [rcx+0x50]
 101e521:	call   QWORD PTR [rip+0xfffffffffffe2e61]        # 0x1001388
 101e527:	mov    esi,eax
 101e529:	test   eax,eax
 101e52b:	jne    0x101e567
 101e52d:	mov    rdx,QWORD PTR [rdi+0x8]
 101e531:	mov    QWORD PTR [rsp+0x30],rbx
 101e536:	movsxd r8,DWORD PTR [rdx+0x4]
 101e53a:	mov    rbx,QWORD PTR [r8+rdi*1+0x8]
 101e53f:	call   QWORD PTR [rip+0xfffffffffffe300b]        # 0x1001550
 101e545:	mov    rcx,QWORD PTR [rdi+0x8]
 101e549:	movsxd r8,DWORD PTR [rcx+0x4]
 101e54d:	lea    rcx,[rdi+0x8]
 101e551:	mov    edx,eax
 101e553:	add    rcx,r8
 101e556:	mov    r8d,0xc000c48c
 101e55c:	xor    r9d,r9d
 101e55f:	call   QWORD PTR [rbx+0x20]
 101e562:	mov    rbx,QWORD PTR [rsp+0x30]
 101e567:	test   esi,esi
 101e569:	mov    rsi,QWORD PTR [rsp+0x38]
 101e56e:	setne  al
 101e571:	add    rsp,0x20
 101e575:	pop    rdi
 101e576:	ret    
 101e577:	int3   
 101e578:	int3   
 101e579:	int3   
 101e57a:	int3   
 101e57b:	int3   
 101e57c:	int3   
 101e57d:	int3   
 101e57e:	int3   
 101e57f:	int3   
 101e580:	mov    QWORD PTR [rsp+0x18],rbx
 101e585:	push   rdi
 101e586:	sub    rsp,0x870
 101e58d:	mov    rax,QWORD PTR [rip+0x452dc]        # 0x1063870
 101e594:	xor    rax,rsp
 101e597:	mov    QWORD PTR [rsp+0x860],rax
 101e59f:	mov    eax,edx
 101e5a1:	mov    rdi,rcx
 101e5a4:	mov    QWORD PTR [rsp+0x40],rcx
 101e5a9:	imul   eax,eax,0x3e8
 101e5af:	cmp    QWORD PTR [rcx+0x50],0xffffffffffffffff
 101e5b4:	je     0x101e704
 101e5ba:	mov    r8d,0x1
 101e5c0:	mov    edx,eax
 101e5c2:	mov    rcx,QWORD PTR [rcx+0x70]
 101e5c6:	call   QWORD PTR [rip+0xfffffffffffe2dc4]        # 0x1001390
 101e5cc:	test   eax,eax
 101e5ce:	jne    0x101e711
 101e5d4:	mov    rcx,QWORD PTR [rdi+0x70]
 101e5d8:	call   QWORD PTR [rip+0xfffffffffffe2d52]        # 0x1001330
 101e5de:	xor    ebx,ebx
 101e5e0:	mov    QWORD PTR [rsp+0x20],rbx
 101e5e5:	lea    r9,[rsp+0x34]
 101e5ea:	mov    r8d,0x800
 101e5f0:	lea    rdx,[rsp+0x60]
 101e5f5:	mov    rcx,QWORD PTR [rdi+0x50]
 101e5f9:	call   QWORD PTR [rip+0xfffffffffffe2d51]        # 0x1001350
 101e5ff:	test   eax,eax
 101e601:	je     0x101e6d2
 101e607:	mov    eax,DWORD PTR [rsp+0x34]
 101e60b:	test   eax,eax
 101e60d:	je     0x101e6d2
 101e613:	cmp    eax,0x800
 101e618:	jae    0x101e637
 101e61a:	shr    rax,1
 101e61d:	add    rax,rax
 101e620:	cmp    rax,0x800
 101e626:	jae    0x101e62f
 101e628:	mov    WORD PTR [rsp+rax*1+0x60],bx
 101e62d:	jmp    0x101e63f
 101e62f:	xor    ecx,ecx
 101e631:	call   0x103fd38
 101e636:	int3   
 101e637:	mov    WORD PTR [rsp+0x85e],bx
 101e63f:	mov    rcx,QWORD PTR [rdi+0xd0]
 101e646:	mov    rax,QWORD PTR [rcx]
 101e649:	lea    r8,[rsp+0x60]
 101e64e:	mov    rdx,rdi
 101e651:	call   QWORD PTR [rax+0x20]
 101e654:	mov    r11,QWORD PTR [rdi+0x48]
 101e658:	mov    QWORD PTR [rsp+0x38],r11
 101e65d:	test   r11,r11
 101e660:	je     0x101e68f
 101e662:	lea    rdx,[rsp+0x38]
 101e667:	mov    rcx,QWORD PTR [rdi+0xe0]
 101e66e:	call   0x100fd00
 101e673:	mov    rdx,QWORD PTR [rsp+0x38]
 101e678:	test   rdx,rdx
 101e67b:	je     0x101e68f
 101e67d:	lea    r9,[rsp+0x48]
 101e682:	lea    r8,[rsp+0x30]
 101e687:	mov    rcx,rdi
 101e68a:	call   0x1019670
 101e68f:	jmp    0x101e6c0
 101e691:	mov    rdi,QWORD PTR [rsp+0x40]
 101e696:	mov    rax,QWORD PTR [rdi+0x8]
 101e69a:	movsxd rdx,DWORD PTR [rax+0x4]
 101e69e:	lea    rcx,[rdi+0x8]
 101e6a2:	add    rcx,rdx
 101e6a5:	mov    rax,QWORD PTR [rcx]
 101e6a8:	mov    BYTE PTR [rsp+0x28],0x1
 101e6ad:	mov    BYTE PTR [rsp+0x20],0x1
 101e6b2:	xor    r9d,r9d
 101e6b5:	xor    r8d,r8d
 101e6b8:	mov    edx,0xc000c4a4
 101e6bd:	call   QWORD PTR [rax]
 101e6bf:	nop
 101e6c0:	mov    rcx,rdi
 101e6c3:	call   0x101e510
 101e6c8:	mov    rcx,rdi
 101e6cb:	call   0x101e450
 101e6d0:	jmp    0x101e711
 101e6d2:	mov    rax,QWORD PTR [rdi+0x8]
 101e6d6:	movsxd rcx,DWORD PTR [rax+0x4]
 101e6da:	mov    rbx,QWORD PTR [rcx+rdi*1+0x8]
 101e6df:	call   QWORD PTR [rip+0xfffffffffffe2e6b]        # 0x1001550
 101e6e5:	mov    edx,eax
 101e6e7:	mov    rax,QWORD PTR [rdi+0x8]
 101e6eb:	movsxd rcx,DWORD PTR [rax+0x4]
 101e6ef:	add    rcx,0x8
 101e6f3:	add    rcx,rdi
 101e6f6:	xor    r9d,r9d
 101e6f9:	mov    r8d,0xc000c48d
 101e6ff:	call   QWORD PTR [rbx+0x20]
 101e702:	jmp    0x101e711
 101e704:	mov    edx,0x1
 101e709:	mov    ecx,eax
 101e70b:	call   QWORD PTR [rip+0xfffffffffffe2daf]        # 0x10014c0
 101e711:	mov    rcx,QWORD PTR [rsp+0x860]
 101e719:	xor    rcx,rsp
 101e71c:	call   0x103ff40
 101e721:	mov    rbx,QWORD PTR [rsp+0x890]
 101e729:	add    rsp,0x870
 101e730:	pop    rdi
 101e731:	ret    
 101e732:	int3   
 101e733:	int3   
 101e734:	int3   
 101e735:	int3   
 101e736:	int3   
 101e737:	int3   
 101e738:	int3   
 101e739:	int3   
 101e73a:	int3   
 101e73b:	int3   
 101e73c:	int3   
 101e73d:	int3   
 101e73e:	int3   
 101e73f:	int3   
 101e740:	mov    rax,rsp
 101e743:	mov    QWORD PTR [rax+0x10],rdx
 101e747:	push   rsi
 101e748:	push   rdi
 101e749:	push   r14
 101e74b:	sub    rsp,0x70
 101e74f:	mov    QWORD PTR [rax-0x20],0xfffffffffffffffe
 101e757:	mov    QWORD PTR [rax+0x18],rbx
 101e75b:	mov    QWORD PTR [rax+0x20],rbp
 101e75f:	mov    r14,r9
 101e762:	mov    rbp,r8
 101e765:	mov    rsi,rdx
 101e768:	mov    rdi,rcx
 101e76b:	mov    DWORD PTR [rax-0x38],0x0
 101e772:	mov    rdx,r8
 101e775:	mov    rcx,QWORD PTR [rcx+0xe0]
 101e77c:	call   0x100fce0
 101e781:	lea    rdx,[rax+0x30]
 101e785:	lea    rcx,[rsp+0x58]
 101e78a:	call   QWORD PTR [rip+0xfffffffffffe3228]        # 0x10019b8
 101e790:	nop
 101e791:	mov    rdx,rbp
 101e794:	mov    rcx,QWORD PTR [rdi+0xe0]
 101e79b:	call   0x100fce0
 101e7a0:	lea    rdx,[rax+0x38]
 101e7a4:	lea    rcx,[rsp+0x90]
 101e7ac:	call   QWORD PTR [rip+0xfffffffffffe3206]        # 0x10019b8
 101e7b2:	nop
 101e7b3:	mov    rcx,rsi
 101e7b6:	call   QWORD PTR [rip+0xfffffffffffe3304]        # 0x1001ac0
 101e7bc:	mov    DWORD PTR [rsp+0x50],0x1
 101e7c4:	lea    r8,[rip+0xfffffffffffe6101]        # 0x10048cc
 101e7cb:	lea    rdx,[rip+0xfffffffffffe65ea]        # 0x1004dbc
 101e7d2:	lea    rcx,[rsp+0x58]
 101e7d7:	call   QWORD PTR [rip+0xfffffffffffe31d3]        # 0x10019b0
 101e7dd:	lea    r8,[rip+0xfffffffffffe60e8]        # 0x10048cc
 101e7e4:	lea    rdx,[rip+0xfffffffffffe65d1]        # 0x1004dbc
 101e7eb:	lea    rcx,[rsp+0x90]
 101e7f3:	call   QWORD PTR [rip+0xfffffffffffe31b7]        # 0x10019b0
 101e7f9:	cmp    BYTE PTR [rsp+0xb0],0x0
 101e801:	jne    0x101e86d
 101e803:	mov    rdx,rbp
 101e806:	mov    rcx,QWORD PTR [rdi+0xe0]
 101e80d:	call   0x100fce0
 101e812:	lea    rdx,[rip+0xfffffffffffe6237]        # 0x1004a50
 101e819:	lea    rcx,[rip+0xfffffffffffe6240]        # 0x1004a60
 101e820:	cmp    DWORD PTR [rax+0x4],0x0
 101e824:	cmove  rcx,rdx
 101e828:	mov    r8,QWORD PTR [rdi+0xd8]
 101e82f:	mov    QWORD PTR [rsp+0x38],rcx
 101e834:	mov    rax,QWORD PTR [rsp+0x90]
 101e83c:	mov    QWORD PTR [rsp+0x30],rax
 101e841:	mov    rax,QWORD PTR [rsp+0x58]
 101e846:	mov    QWORD PTR [rsp+0x28],rax
 101e84b:	mov    QWORD PTR [rsp+0x20],r14
 101e850:	mov    r9,QWORD PTR [rdi+0x10]
 101e854:	mov    r8,QWORD PTR [r8+0x78]
 101e858:	lea    rdx,[rip+0xfffffffffffe6eb1]        # 0x1005710
 101e85f:	mov    rcx,rsi
 101e862:	call   QWORD PTR [rip+0xfffffffffffe31d8]        # 0x1001a40
 101e868:	jmp    0x101e902
 101e86d:	mov    rdx,QWORD PTR [rdi+0xd8]
 101e874:	add    rdx,0x78
 101e878:	lea    r8,[rip+0xfffffffffffe3689]        # 0x1001f08
 101e87f:	lea    rcx,[rsp+0x60]
 101e884:	call   0x100af10
 101e889:	mov    rbx,rax
 101e88c:	mov    rdx,rbp
 101e88f:	mov    rcx,QWORD PTR [rdi+0xe0]
 101e896:	call   0x100fce0
 101e89b:	lea    rdx,[rip+0xfffffffffffe61ae]        # 0x1004a50
 101e8a2:	lea    rcx,[rip+0xfffffffffffe61b7]        # 0x1004a60
 101e8a9:	cmp    DWORD PTR [rax+0x4],0x0
 101e8ad:	cmove  rcx,rdx
 101e8b1:	mov    QWORD PTR [rsp+0x40],rcx
 101e8b6:	mov    rax,QWORD PTR [rsp+0x90]
 101e8be:	mov    QWORD PTR [rsp+0x38],rax
 101e8c3:	mov    rax,QWORD PTR [rsp+0x58]
 101e8c8:	mov    QWORD PTR [rsp+0x30],rax
 101e8cd:	mov    QWORD PTR [rsp+0x28],r14
 101e8d2:	mov    rax,QWORD PTR [rdi+0x10]
 101e8d6:	mov    QWORD PTR [rsp+0x20],rax
 101e8db:	lea    r9,[rip+0xfffffffffffe3672]        # 0x1001f54
 101e8e2:	mov    r8,QWORD PTR [rbx]
 101e8e5:	lea    rdx,[rip+0xfffffffffffe6e4c]        # 0x1005738
 101e8ec:	mov    rcx,rsi
 101e8ef:	call   QWORD PTR [rip+0xfffffffffffe314b]        # 0x1001a40
 101e8f5:	nop
 101e8f6:	lea    rcx,[rsp+0x60]
 101e8fb:	call   QWORD PTR [rip+0xfffffffffffe31a7]        # 0x1001aa8
 101e901:	nop
 101e902:	lea    rcx,[rsp+0x90]
 101e90a:	call   QWORD PTR [rip+0xfffffffffffe3198]        # 0x1001aa8
 101e910:	nop
 101e911:	lea    rcx,[rsp+0x58]
 101e916:	call   QWORD PTR [rip+0xfffffffffffe318c]        # 0x1001aa8
 101e91c:	mov    rax,rsi
 101e91f:	lea    r11,[rsp+0x70]
 101e924:	mov    rbx,QWORD PTR [r11+0x30]
 101e928:	mov    rbp,QWORD PTR [r11+0x38]
 101e92c:	mov    rsp,r11
 101e92f:	pop    r14
 101e931:	pop    rdi
 101e932:	pop    rsi
 101e933:	ret    
 101e934:	int3   
 101e935:	int3   
 101e936:	int3   
 101e937:	int3   
 101e938:	int3   
 101e939:	int3   
 101e93a:	int3   
 101e93b:	int3   
 101e93c:	int3   
 101e93d:	int3   
 101e93e:	int3   
 101e93f:	int3   
 101e940:	rex push rbp
 101e942:	push   rsi
 101e943:	push   rdi
 101e944:	push   r14
 101e946:	push   r15
 101e948:	lea    rbp,[rsp-0x1000]
 101e950:	mov    eax,0x1100
 101e955:	call   0x1040290
 101e95a:	sub    rsp,rax
 101e95d:	mov    QWORD PTR [rbp-0x58],0xfffffffffffffffe
 101e965:	mov    QWORD PTR [rsp+0x1148],rbx
 101e96d:	mov    rax,QWORD PTR [rip+0x44efc]        # 0x1063870
 101e974:	xor    rax,rsp
 101e977:	mov    QWORD PTR [rbp+0xff0],rax
 101e97e:	mov    rbx,r8
 101e981:	mov    r14,rdx
 101e984:	mov    rsi,rcx
 101e987:	mov    QWORD PTR [rbp-0x50],rdx
 101e98b:	xor    r15d,r15d
 101e98e:	mov    DWORD PTR [rsp+0x60],r15d
 101e993:	lea    rdx,[rip+0xfffffffffffe6dce]        # 0x1005768
 101e99a:	lea    rcx,[rsp+0x70]
 101e99f:	call   QWORD PTR [rip+0xfffffffffffe310b]        # 0x1001ab0
 101e9a5:	nop
 101e9a6:	lea    rdx,[rip+0xfffffffffffe3463]        # 0x1001e10
 101e9ad:	lea    rcx,[rsp+0x58]
 101e9b2:	call   QWORD PTR [rip+0xfffffffffffe30f8]        # 0x1001ab0
 101e9b8:	nop
 101e9b9:	mov    rdx,rbx
 101e9bc:	lea    rcx,[rsp+0x70]
 101e9c1:	call   QWORD PTR [rip+0xfffffffffffe30c9]        # 0x1001a90
 101e9c7:	lea    rdx,[rbp+0x5e0]
 101e9ce:	mov    ecx,0x105
 101e9d3:	call   QWORD PTR [rip+0xfffffffffffe28ef]        # 0x10012c8
 101e9d9:	test   eax,eax
 101e9db:	jne    0x101ea36
 101e9dd:	mov    rax,QWORD PTR [rsi+0x8]
 101e9e1:	movsxd rcx,DWORD PTR [rax+0x4]
 101e9e5:	mov    rbx,QWORD PTR [rcx+rsi*1+0x8]
 101e9ea:	call   QWORD PTR [rip+0xfffffffffffe2b60]        # 0x1001550
 101e9f0:	mov    edx,eax
 101e9f2:	mov    rax,QWORD PTR [rsi+0x8]
 101e9f6:	movsxd rcx,DWORD PTR [rax+0x4]
 101e9fa:	add    rcx,0x8
 101e9fe:	add    rcx,rsi
 101ea01:	mov    r9b,0x1
 101ea04:	mov    r8d,0xc000c40e
 101ea0a:	call   QWORD PTR [rbx+0x20]
 101ea0d:	lea    rdx,[rip+0xfffffffffffe33fc]        # 0x1001e10
 101ea14:	mov    rcx,r14
 101ea17:	call   QWORD PTR [rip+0xfffffffffffe3093]        # 0x1001ab0
 101ea1d:	mov    DWORD PTR [rsp+0x60],0x1
 101ea25:	lea    rcx,[rsp+0x58]
 101ea2a:	call   QWORD PTR [rip+0xfffffffffffe3078]        # 0x1001aa8
 101ea30:	nop
 101ea31:	jmp    0x101ef82
 101ea36:	lea    r9,[rbp-0x30]
 101ea3a:	xor    r8d,r8d
 101ea3d:	lea    rdx,[rip+0xfffffffffffe6d2c]        # 0x1005770
 101ea44:	lea    rcx,[rbp+0x5e0]
 101ea4b:	call   QWORD PTR [rip+0xfffffffffffe2777]        # 0x10011c8
 101ea51:	test   eax,eax
 101ea53:	jne    0x101eaae
 101ea55:	mov    rax,QWORD PTR [rsi+0x8]
 101ea59:	movsxd rcx,DWORD PTR [rax+0x4]
 101ea5d:	mov    rbx,QWORD PTR [rcx+rsi*1+0x8]
 101ea62:	call   QWORD PTR [rip+0xfffffffffffe2ae8]        # 0x1001550
 101ea68:	mov    edx,eax
 101ea6a:	mov    rax,QWORD PTR [rsi+0x8]
 101ea6e:	movsxd rcx,DWORD PTR [rax+0x4]
 101ea72:	add    rcx,0x8
 101ea76:	add    rcx,rsi
 101ea79:	mov    r9b,0x1
 101ea7c:	mov    r8d,0xc000c40e
 101ea82:	call   QWORD PTR [rbx+0x20]
 101ea85:	lea    rdx,[rip+0xfffffffffffe3384]        # 0x1001e10
 101ea8c:	mov    rcx,r14
 101ea8f:	call   QWORD PTR [rip+0xfffffffffffe301b]        # 0x1001ab0
 101ea95:	mov    DWORD PTR [rsp+0x60],0x1
 101ea9d:	lea    rcx,[rsp+0x58]
 101eaa2:	call   QWORD PTR [rip+0xfffffffffffe3000]        # 0x1001aa8
 101eaa8:	nop
 101eaa9:	jmp    0x101ef82
 101eaae:	xor    eax,eax
 101eab0:	mov    QWORD PTR [rbp-0x80],rax
 101eab4:	mov    QWORD PTR [rbp-0x78],rax
 101eab8:	mov    QWORD PTR [rbp-0x70],rax
 101eabc:	mov    DWORD PTR [rbp-0x70],0x1
 101eac3:	mov    DWORD PTR [rbp-0x80],0x18
 101eaca:	mov    QWORD PTR [rsp+0x30],r15
 101eacf:	mov    DWORD PTR [rsp+0x28],0x100080
 101ead7:	mov    DWORD PTR [rsp+0x20],0x2
 101eadf:	lea    r9,[rbp-0x80]
 101eae3:	mov    edx,0x40000000
 101eae8:	lea    r8d,[rax+0x2]
 101eaec:	lea    rcx,[rbp-0x30]
 101eaf0:	call   QWORD PTR [rip+0xfffffffffffe26ea]        # 0x10011e0
 101eaf6:	mov    QWORD PTR [rsp+0x68],rax
 101eafb:	cmp    rax,0xffffffffffffffff
 101eaff:	je     0x101ef2e
 101eb05:	test   rax,rax
 101eb08:	je     0x101ef2e
 101eb0e:	mov    rax,QWORD PTR [rsi+0x8]
 101eb12:	movsxd rcx,DWORD PTR [rax+0x4]
 101eb16:	mov    rdi,QWORD PTR [rcx+rsi*1+0x8]
 101eb1b:	lea    rcx,[rsp+0x70]
 101eb20:	call   QWORD PTR [rip+0xfffffffffffe2fc2]        # 0x1001ae8
 101eb26:	mov    rbx,rax
 101eb29:	mov    rcx,QWORD PTR [rsi+0xd8]
 101eb30:	sub    rcx,0xffffffffffffff80
 101eb34:	call   QWORD PTR [rip+0xfffffffffffe2fae]        # 0x1001ae8
 101eb3a:	mov    rdx,rax
 101eb3d:	mov    rcx,QWORD PTR [rsi+0xd8]
 101eb44:	add    rcx,0x158
 101eb4b:	mov    BYTE PTR [rsp+0x48],0x0
 101eb50:	mov    r8,QWORD PTR [rsp+0x68]
 101eb55:	mov    QWORD PTR [rsp+0x40],r8
 101eb5a:	mov    DWORD PTR [rsp+0x38],0x20
 101eb62:	lea    rax,[rbp-0x48]
 101eb66:	mov    QWORD PTR [rsp+0x30],rax
 101eb6b:	mov    DWORD PTR [rsp+0x28],0x1
 101eb73:	mov    BYTE PTR [rsp+0x20],0x1
 101eb78:	lea    r9,[rip+0xfffffffffffe3291]        # 0x1001e10
 101eb7f:	mov    r8,rbx
 101eb82:	call   0x1031100
 101eb87:	mov    edx,eax
 101eb89:	mov    rax,QWORD PTR [rsi+0x8]
 101eb8d:	movsxd rcx,DWORD PTR [rax+0x4]
 101eb91:	add    rcx,0x8
 101eb95:	add    rcx,rsi
 101eb98:	mov    r9b,0x1
 101eb9b:	mov    r8d,0xc000c40e
 101eba1:	call   QWORD PTR [rdi+0x20]
 101eba4:	test   al,al
 101eba6:	je     0x101eef6
 101ebac:	lea    rcx,[rsp+0x68]
 101ebb1:	call   0x1034510
 101ebb6:	mov    DWORD PTR [rsp+0x64],r15d
 101ebbb:	lea    rcx,[rsp+0x50]
 101ebc0:	call   QWORD PTR [rip+0xfffffffffffe2efa]        # 0x1001ac0
 101ebc6:	nop
 101ebc7:	mov    QWORD PTR [rsp+0x30],r15
 101ebcc:	mov    DWORD PTR [rsp+0x28],0x100080
 101ebd4:	mov    DWORD PTR [rsp+0x20],0x3
 101ebdc:	xor    r9d,r9d
 101ebdf:	mov    edx,0x80000000
 101ebe4:	lea    r8d,[r9+0x1]
 101ebe8:	lea    rcx,[rbp-0x30]
 101ebec:	call   QWORD PTR [rip+0xfffffffffffe25ee]        # 0x10011e0
 101ebf2:	mov    QWORD PTR [rsp+0x68],rax
 101ebf7:	cmp    rax,0xffffffffffffffff
 101ebfb:	je     0x101ee86
 101ec01:	test   rax,rax
 101ec04:	je     0x101ee86
 101ec0a:	lea    rdx,[rip+0xfffffffffffe31ff]        # 0x1001e10
 101ec11:	lea    rcx,[rsp+0x58]
 101ec16:	call   QWORD PTR [rip+0xfffffffffffe2e7c]        # 0x1001a98
 101ec1c:	mov    QWORD PTR [rsp+0x20],r15
 101ec21:	lea    r9,[rsp+0x64]
 101ec26:	mov    r8d,0x3ff
 101ec2c:	lea    rdx,[rbp+0x1e0]
 101ec33:	mov    rcx,QWORD PTR [rsp+0x68]
 101ec38:	call   QWORD PTR [rip+0xfffffffffffe2712]        # 0x1001350
 101ec3e:	test   eax,eax
 101ec40:	je     0x101ee49
 101ec46:	data16 nop WORD PTR [rax+rax*1+0x0]
 101ec50:	mov    eax,DWORD PTR [rsp+0x64]
 101ec54:	test   eax,eax
 101ec56:	je     0x101ee49
 101ec5c:	cmp    rax,0x400
 101ec62:	jae    0x101ee41
 101ec68:	mov    BYTE PTR [rbp+rax*1+0x1e0],0x0
 101ec70:	lea    rax,[rbp+0x1e0]
 101ec77:	or     r9,0xffffffffffffffff
 101ec7b:	nop    DWORD PTR [rax+rax*1+0x0]
 101ec80:	inc    r9
 101ec83:	cmp    BYTE PTR [rax+r9*1],0x0
 101ec88:	jne    0x101ec80
 101ec8a:	mov    DWORD PTR [rsp+0x28],0x400
 101ec92:	lea    rax,[rbp+0x7f0]
 101ec99:	mov    QWORD PTR [rsp+0x20],rax
 101ec9e:	lea    r8,[rbp+0x1e0]
 101eca5:	xor    edx,edx
 101eca7:	xor    ecx,ecx
 101eca9:	call   QWORD PTR [rip+0xfffffffffffe2781]        # 0x1001430
 101ecaf:	test   eax,eax
 101ecb1:	je     0x101ee0b
 101ecb7:	lea    rcx,[rbp+0x1e0]
 101ecbe:	or     rax,0xffffffffffffffff
 101ecc2:	inc    rax
 101ecc5:	cmp    BYTE PTR [rcx+rax*1],0x0
 101ecc9:	jne    0x101ecc2
 101eccb:	add    rax,rax
 101ecce:	cmp    rax,0x800
 101ecd4:	jae    0x101ee03
 101ecda:	mov    WORD PTR [rbp+rax*1+0x7f0],r15w
 101ece3:	lea    rdx,[rbp+0x7f0]
 101ecea:	lea    rcx,[rsp+0x50]
 101ecef:	call   QWORD PTR [rip+0xfffffffffffe2da3]        # 0x1001a98
 101ecf5:	mov    edx,0xa
 101ecfa:	lea    rcx,[rsp+0x50]
 101ecff:	call   QWORD PTR [rip+0xfffffffffffe2d4b]        # 0x1001a50
 101ed05:	cmp    eax,0xffffffff
 101ed08:	je     0x101ed5c
 101ed0a:	lea    ecx,[rax*2+0x2]
 101ed11:	mov    ebx,DWORD PTR [rsp+0x64]
 101ed15:	sub    ebx,ecx
 101ed17:	lea    r8d,[rax+0x1]
 101ed1b:	lea    rdx,[rbp-0x60]
 101ed1f:	lea    rcx,[rsp+0x50]
 101ed24:	call   QWORD PTR [rip+0xfffffffffffe2d1e]        # 0x1001a48
 101ed2a:	nop
 101ed2b:	mov    rdx,rax
 101ed2e:	lea    rcx,[rsp+0x50]
 101ed33:	call   QWORD PTR [rip+0xfffffffffffe2d67]        # 0x1001aa0
 101ed39:	nop
 101ed3a:	lea    rcx,[rbp-0x60]
 101ed3e:	call   QWORD PTR [rip+0xfffffffffffe2d64]        # 0x1001aa8
 101ed44:	neg    ebx
 101ed46:	mov    r9d,0x1
 101ed4c:	xor    r8d,r8d
 101ed4f:	mov    edx,ebx
 101ed51:	mov    rcx,QWORD PTR [rsp+0x68]
 101ed56:	call   QWORD PTR [rip+0xfffffffffffe25fc]        # 0x1001358
 101ed5c:	lea    rcx,[rsp+0x50]
 101ed61:	call   QWORD PTR [rip+0xfffffffffffe2d81]        # 0x1001ae8
 101ed67:	mov    rdx,rax
 101ed6a:	lea    rcx,[rbp-0x68]
 101ed6e:	call   0x10353c0
 101ed73:	nop
 101ed74:	mov    rdx,rax
 101ed77:	lea    rcx,[rsp+0x50]
 101ed7c:	call   QWORD PTR [rip+0xfffffffffffe2d1e]        # 0x1001aa0
 101ed82:	nop
 101ed83:	lea    rcx,[rbp-0x68]
 101ed87:	call   QWORD PTR [rip+0xfffffffffffe2d1b]        # 0x1001aa8
 101ed8d:	lea    r8,[rip+0xfffffffffffe307c]        # 0x1001e10
 101ed94:	lea    rdx,[rip+0xfffffffffffe69dd]        # 0x1005778
 101ed9b:	lea    rcx,[rsp+0x50]
 101eda0:	call   QWORD PTR [rip+0xfffffffffffe2c0a]        # 0x10019b0
 101eda6:	lea    r8,[rip+0xfffffffffffe3313]        # 0x10020c0
 101edad:	lea    rdx,[rsp+0x50]
 101edb2:	lea    rcx,[rsp+0x78]
 101edb7:	call   0x100af10
 101edbc:	nop
 101edbd:	mov    rdx,rax
 101edc0:	lea    rcx,[rsp+0x58]
 101edc5:	call   QWORD PTR [rip+0xfffffffffffe2c0d]        # 0x10019d8
 101edcb:	nop
 101edcc:	lea    rcx,[rsp+0x78]
 101edd1:	call   QWORD PTR [rip+0xfffffffffffe2cd1]        # 0x1001aa8
 101edd7:	mov    QWORD PTR [rsp+0x20],r15
 101eddc:	lea    r9,[rsp+0x64]
 101ede1:	mov    r8d,0x3ff
 101ede7:	lea    rdx,[rbp+0x1e0]
 101edee:	mov    rcx,QWORD PTR [rsp+0x68]
 101edf3:	call   QWORD PTR [rip+0xfffffffffffe2557]        # 0x1001350
 101edf9:	test   eax,eax
 101edfb:	jne    0x101ec50
 101ee01:	jmp    0x101ee49
 101ee03:	xor    ecx,ecx
 101ee05:	call   0x103fd38
 101ee0a:	int3   
 101ee0b:	mov    rax,QWORD PTR [rsi+0x8]
 101ee0f:	movsxd rcx,DWORD PTR [rax+0x4]
 101ee13:	mov    rbx,QWORD PTR [rcx+rsi*1+0x8]
 101ee18:	call   QWORD PTR [rip+0xfffffffffffe2732]        # 0x1001550
 101ee1e:	mov    edx,eax
 101ee20:	mov    rax,QWORD PTR [rsi+0x8]
 101ee24:	movsxd rcx,DWORD PTR [rax+0x4]
 101ee28:	add    rcx,0x8
 101ee2c:	add    rcx,rsi
 101ee2f:	mov    r9b,0x1
 101ee32:	mov    r8d,0xc000c40e
 101ee38:	call   QWORD PTR [rbx+0x20]
 101ee3b:	nop
 101ee3c:	jmp    0x101eeeb
 101ee41:	xor    ecx,ecx
 101ee43:	call   0x103fd38
 101ee48:	int3   
 101ee49:	lea    rcx,[rsp+0x58]
 101ee4e:	call   QWORD PTR [rip+0xfffffffffffe2c9c]        # 0x1001af0
 101ee54:	lea    r8d,[rax-0x1]
 101ee58:	lea    rdx,[rsp+0x78]
 101ee5d:	lea    rcx,[rsp+0x58]
 101ee62:	call   QWORD PTR [rip+0xfffffffffffe2be0]        # 0x1001a48
 101ee68:	nop
 101ee69:	mov    rdx,rax
 101ee6c:	lea    rcx,[rsp+0x58]
 101ee71:	call   QWORD PTR [rip+0xfffffffffffe2c29]        # 0x1001aa0
 101ee77:	nop
 101ee78:	lea    rcx,[rsp+0x78]
 101ee7d:	call   QWORD PTR [rip+0xfffffffffffe2c25]        # 0x1001aa8
 101ee83:	nop
 101ee84:	jmp    0x101eeeb
 101ee86:	mov    rax,QWORD PTR [rsi+0x8]
 101ee8a:	movsxd rcx,DWORD PTR [rax+0x4]
 101ee8e:	mov    rbx,QWORD PTR [rcx+rsi*1+0x8]
 101ee93:	call   QWORD PTR [rip+0xfffffffffffe26b7]        # 0x1001550
 101ee99:	mov    edx,eax
 101ee9b:	mov    rax,QWORD PTR [rsi+0x8]
 101ee9f:	movsxd rcx,DWORD PTR [rax+0x4]
 101eea3:	add    rcx,0x8
 101eea7:	add    rcx,rsi
 101eeaa:	mov    r9b,0x1
 101eead:	mov    r8d,0xc000c40e
 101eeb3:	call   QWORD PTR [rbx+0x20]
 101eeb6:	lea    rdx,[rip+0xfffffffffffe2f53]        # 0x1001e10
 101eebd:	mov    rcx,r14
 101eec0:	call   QWORD PTR [rip+0xfffffffffffe2bea]        # 0x1001ab0
 101eec6:	mov    DWORD PTR [rsp+0x60],0x1
 101eece:	lea    rcx,[rsp+0x50]
 101eed3:	call   QWORD PTR [rip+0xfffffffffffe2bcf]        # 0x1001aa8
 101eed9:	nop
 101eeda:	lea    rcx,[rsp+0x58]
 101eedf:	call   QWORD PTR [rip+0xfffffffffffe2bc3]        # 0x1001aa8
 101eee5:	nop
 101eee6:	jmp    0x101ef82
 101eeeb:	lea    rcx,[rsp+0x50]
 101eef0:	call   QWORD PTR [rip+0xfffffffffffe2bb2]        # 0x1001aa8
 101eef6:	lea    rcx,[rsp+0x68]
 101eefb:	call   0x1034510
 101ef00:	lea    rcx,[rbp-0x30]
 101ef04:	call   QWORD PTR [rip+0xfffffffffffe22ee]        # 0x10011f8
 101ef0a:	lea    rdx,[rsp+0x58]
 101ef0f:	mov    rcx,r14
 101ef12:	call   QWORD PTR [rip+0xfffffffffffe2aa0]        # 0x10019b8
 101ef18:	mov    DWORD PTR [rsp+0x60],0x1
 101ef20:	lea    rcx,[rsp+0x58]
 101ef25:	call   QWORD PTR [rip+0xfffffffffffe2b7d]        # 0x1001aa8
 101ef2b:	nop
 101ef2c:	jmp    0x101ef82
 101ef2e:	mov    rax,QWORD PTR [rsi+0x8]
 101ef32:	movsxd rcx,DWORD PTR [rax+0x4]
 101ef36:	mov    rbx,QWORD PTR [rcx+rsi*1+0x8]
 101ef3b:	call   QWORD PTR [rip+0xfffffffffffe260f]        # 0x1001550
 101ef41:	mov    edx,eax
 101ef43:	mov    rax,QWORD PTR [rsi+0x8]
 101ef47:	movsxd rcx,DWORD PTR [rax+0x4]
 101ef4b:	add    rcx,0x8
 101ef4f:	add    rcx,rsi
 101ef52:	mov    r9b,0x1
 101ef55:	mov    r8d,0xc000c40e
 101ef5b:	call   QWORD PTR [rbx+0x20]
 101ef5e:	lea    rdx,[rip+0xfffffffffffe2eab]        # 0x1001e10
 101ef65:	mov    rcx,r14
 101ef68:	call   QWORD PTR [rip+0xfffffffffffe2b42]        # 0x1001ab0
 101ef6e:	mov    DWORD PTR [rsp+0x60],0x1
 101ef76:	lea    rcx,[rsp+0x58]
 101ef7b:	call   QWORD PTR [rip+0xfffffffffffe2b27]        # 0x1001aa8
 101ef81:	nop
 101ef82:	lea    rcx,[rsp+0x70]
 101ef87:	call   QWORD PTR [rip+0xfffffffffffe2b1b]        # 0x1001aa8
 101ef8d:	mov    rax,r14
 101ef90:	mov    rcx,QWORD PTR [rbp+0xff0]
 101ef97:	xor    rcx,rsp
 101ef9a:	call   0x103ff40
 101ef9f:	mov    rbx,QWORD PTR [rsp+0x1148]
 101efa7:	add    rsp,0x1100
 101efae:	pop    r15
 101efb0:	pop    r14
 101efb2:	pop    rdi
 101efb3:	pop    rsi
 101efb4:	pop    rbp
 101efb5:	ret    
 101efb6:	int3   
 101efb7:	int3   
 101efb8:	int3   
 101efb9:	int3   
 101efba:	int3   
 101efbb:	int3   
 101efbc:	int3   
 101efbd:	int3   
 101efbe:	int3   
 101efbf:	int3   
 101efc0:	mov    rax,rsp
 101efc3:	mov    QWORD PTR [rax+0x10],rdx
 101efc7:	push   rdi
 101efc8:	push   r14
 101efca:	push   r15
 101efcc:	sub    rsp,0x80
 101efd3:	mov    QWORD PTR [rax-0x20],0xfffffffffffffffe
 101efdb:	mov    QWORD PTR [rax+0x8],rbx
 101efdf:	mov    QWORD PTR [rax+0x18],rsi
 101efe3:	mov    rsi,rdx
 101efe6:	mov    rdi,rcx
 101efe9:	xor    r14d,r14d
 101efec:	mov    DWORD PTR [rax-0x58],r14d
 101eff0:	mov    rdx,r8
 101eff3:	lea    rcx,[rax+0x20]
 101eff7:	call   QWORD PTR [rip+0xfffffffffffe2ab3]        # 0x1001ab0
 101effd:	nop
 101effe:	lea    rcx,[rsp+0x50]
 101f003:	call   QWORD PTR [rip+0xfffffffffffe2ab7]        # 0x1001ac0
 101f009:	nop
 101f00a:	lea    rcx,[rsp+0x58]
 101f00f:	call   QWORD PTR [rip+0xfffffffffffe2aab]        # 0x1001ac0
 101f015:	nop
 101f016:	lea    rdx,[rip+0xfffffffffffe2df3]        # 0x1001e10
 101f01d:	lea    rcx,[rsp+0x48]
 101f022:	call   QWORD PTR [rip+0xfffffffffffe2a88]        # 0x1001ab0
 101f028:	nop
 101f029:	xor    r8d,r8d
 101f02c:	lea    rdx,[rip+0xfffffffffffe3dcd]        # 0x1002e00
 101f033:	lea    rcx,[rsp+0xb8]
 101f03b:	call   QWORD PTR [rip+0xfffffffffffe2a17]        # 0x1001a58
 101f041:	cmp    eax,0xffffffff
 101f044:	jne    0x101f0b0
 101f046:	mov    rax,QWORD PTR [rdi+0x8]
 101f04a:	movsxd rcx,DWORD PTR [rax+0x4]
 101f04e:	add    rcx,0x8
 101f052:	add    rcx,rdi
 101f055:	mov    rax,QWORD PTR [rcx]
 101f058:	mov    BYTE PTR [rsp+0x28],0x1
 101f05d:	mov    BYTE PTR [rsp+0x20],0x1
 101f062:	xor    r9d,r9d
 101f065:	mov    r8b,0x1
 101f068:	mov    edx,0xc000c407
 101f06d:	call   QWORD PTR [rax]
 101f06f:	lea    rdx,[rip+0xfffffffffffe2d9a]        # 0x1001e10
 101f076:	mov    rcx,rsi
 101f079:	call   QWORD PTR [rip+0xfffffffffffe2a31]        # 0x1001ab0
 101f07f:	mov    DWORD PTR [rsp+0x40],0x1
 101f087:	lea    rcx,[rsp+0x48]
 101f08c:	call   QWORD PTR [rip+0xfffffffffffe2a16]        # 0x1001aa8
 101f092:	nop
 101f093:	lea    rcx,[rsp+0x58]
 101f098:	call   QWORD PTR [rip+0xfffffffffffe2a0a]        # 0x1001aa8
 101f09e:	nop
 101f09f:	lea    rcx,[rsp+0x50]
 101f0a4:	call   QWORD PTR [rip+0xfffffffffffe29fe]        # 0x1001aa8
 101f0aa:	nop
 101f0ab:	jmp    0x101f655
 101f0b0:	lea    r8d,[rax+0x1]
 101f0b4:	lea    rdx,[rsp+0x68]
 101f0b9:	lea    rcx,[rsp+0xb8]
 101f0c1:	call   QWORD PTR [rip+0xfffffffffffe2859]        # 0x1001920
 101f0c7:	nop
 101f0c8:	mov    rcx,rax
 101f0cb:	call   QWORD PTR [rip+0xfffffffffffe2a17]        # 0x1001ae8
 101f0d1:	mov    rdx,rax
 101f0d4:	lea    rcx,[rsp+0x60]
 101f0d9:	call   0x10353c0
 101f0de:	nop
 101f0df:	mov    rdx,rax
 101f0e2:	lea    rcx,[rsp+0xb8]
 101f0ea:	call   QWORD PTR [rip+0xfffffffffffe29b0]        # 0x1001aa0
 101f0f0:	nop
 101f0f1:	lea    rcx,[rsp+0x60]
 101f0f6:	call   QWORD PTR [rip+0xfffffffffffe29ac]        # 0x1001aa8
 101f0fc:	nop
 101f0fd:	lea    rcx,[rsp+0x68]
 101f102:	call   QWORD PTR [rip+0xfffffffffffe29a0]        # 0x1001aa8
 101f108:	mov    r8d,0x1
 101f10e:	lea    rdx,[rsp+0x68]
 101f113:	lea    rcx,[rsp+0xb8]
 101f11b:	call   QWORD PTR [rip+0xfffffffffffe2927]        # 0x1001a48
 101f121:	nop
 101f122:	lea    rdx,[rip+0xfffffffffffe5deb]        # 0x1004f14
 101f129:	mov    rcx,rax
 101f12c:	call   QWORD PTR [rip+0xfffffffffffe28ce]        # 0x1001a00
 101f132:	test   eax,eax
 101f134:	sete   bl
 101f137:	lea    rcx,[rsp+0x68]
 101f13c:	call   QWORD PTR [rip+0xfffffffffffe2966]        # 0x1001aa8
 101f142:	lea    rcx,[rsp+0xb8]
 101f14a:	test   bl,bl
 101f14c:	je     0x101f208
 101f152:	mov    r8d,0x1
 101f158:	lea    rdx,[rsp+0x68]
 101f15d:	call   QWORD PTR [rip+0xfffffffffffe27bd]        # 0x1001920
 101f163:	nop
 101f164:	xor    r8d,r8d
 101f167:	lea    rdx,[rip+0xfffffffffffe5da6]        # 0x1004f14
 101f16e:	mov    rcx,rax
 101f171:	call   QWORD PTR [rip+0xfffffffffffe28e1]        # 0x1001a58
 101f177:	lea    ebx,[rax+0x1]
 101f17a:	lea    rcx,[rsp+0x68]
 101f17f:	call   QWORD PTR [rip+0xfffffffffffe2923]        # 0x1001aa8
 101f185:	mov    r8d,0x1
 101f18b:	lea    rdx,[rsp+0x60]
 101f190:	lea    rcx,[rsp+0xb8]
 101f198:	call   QWORD PTR [rip+0xfffffffffffe2782]        # 0x1001920
 101f19e:	nop
 101f19f:	mov    r8d,ebx
 101f1a2:	lea    rdx,[rsp+0x68]
 101f1a7:	mov    rcx,rax
 101f1aa:	call   QWORD PTR [rip+0xfffffffffffe2898]        # 0x1001a48
 101f1b0:	nop
 101f1b1:	mov    rdx,rax
 101f1b4:	lea    rcx,[rsp+0x50]
 101f1b9:	call   QWORD PTR [rip+0xfffffffffffe28e1]        # 0x1001aa0
 101f1bf:	nop
 101f1c0:	lea    rcx,[rsp+0x68]
 101f1c5:	call   QWORD PTR [rip+0xfffffffffffe28dd]        # 0x1001aa8
 101f1cb:	nop
 101f1cc:	lea    rcx,[rsp+0x60]
 101f1d1:	call   QWORD PTR [rip+0xfffffffffffe28d1]        # 0x1001aa8
 101f1d7:	mov    r8d,ebx
 101f1da:	lea    rdx,[rsp+0x68]
 101f1df:	lea    rcx,[rsp+0xb8]
 101f1e7:	call   QWORD PTR [rip+0xfffffffffffe2733]        # 0x1001920
 101f1ed:	nop
 101f1ee:	xor    r8d,r8d
 101f1f1:	lea    rdx,[rip+0xfffffffffffe3c08]        # 0x1002e00
 101f1f8:	mov    rcx,rax
 101f1fb:	call   QWORD PTR [rip+0xfffffffffffe2857]        # 0x1001a58
 101f201:	add    ebx,eax
 101f203:	jmp    0x101f2af
 101f208:	xor    r8d,r8d
 101f20b:	lea    rdx,[rip+0xfffffffffffe3bee]        # 0x1002e00
 101f212:	call   QWORD PTR [rip+0xfffffffffffe2840]        # 0x1001a58
 101f218:	mov    ebx,eax
 101f21a:	cmp    eax,0xffffffff
 101f21d:	jne    0x101f289
 101f21f:	mov    rax,QWORD PTR [rdi+0x8]
 101f223:	movsxd rcx,DWORD PTR [rax+0x4]
 101f227:	add    rcx,0x8
 101f22b:	add    rcx,rdi
 101f22e:	mov    rax,QWORD PTR [rcx]
 101f231:	mov    BYTE PTR [rsp+0x28],0x1
 101f236:	mov    BYTE PTR [rsp+0x20],0x1
 101f23b:	xor    r9d,r9d
 101f23e:	mov    r8b,0x1
 101f241:	mov    edx,0xc000c407
 101f246:	call   QWORD PTR [rax]
 101f248:	lea    rdx,[rip+0xfffffffffffe2bc1]        # 0x1001e10
 101f24f:	mov    rcx,rsi
 101f252:	call   QWORD PTR [rip+0xfffffffffffe2858]        # 0x1001ab0
 101f258:	mov    DWORD PTR [rsp+0x40],0x1
 101f260:	lea    rcx,[rsp+0x48]
 101f265:	call   QWORD PTR [rip+0xfffffffffffe283d]        # 0x1001aa8
 101f26b:	nop
 101f26c:	lea    rcx,[rsp+0x58]
 101f271:	call   QWORD PTR [rip+0xfffffffffffe2831]        # 0x1001aa8
 101f277:	nop
 101f278:	lea    rcx,[rsp+0x50]
 101f27d:	call   QWORD PTR [rip+0xfffffffffffe2825]        # 0x1001aa8
 101f283:	nop
 101f284:	jmp    0x101f655
 101f289:	mov    r8d,eax
 101f28c:	lea    rdx,[rsp+0x68]
 101f291:	lea    rcx,[rsp+0xb8]
 101f299:	call   QWORD PTR [rip+0xfffffffffffe27a9]        # 0x1001a48
 101f29f:	nop
 101f2a0:	mov    rdx,rax
 101f2a3:	lea    rcx,[rsp+0x50]
 101f2a8:	call   QWORD PTR [rip+0xfffffffffffe27f2]        # 0x1001aa0
 101f2ae:	nop
 101f2af:	lea    rcx,[rsp+0x68]
 101f2b4:	call   QWORD PTR [rip+0xfffffffffffe27ee]        # 0x1001aa8
 101f2ba:	lea    r8,[rip+0xfffffffffffe2b4f]        # 0x1001e10
 101f2c1:	lea    rdx,[rip+0xfffffffffffe5c4c]        # 0x1004f14
 101f2c8:	lea    rcx,[rsp+0x50]
 101f2cd:	call   QWORD PTR [rip+0xfffffffffffe26dd]        # 0x10019b0
 101f2d3:	lea    r8d,[rbx+0x1]
 101f2d7:	lea    rdx,[rsp+0x68]
 101f2dc:	lea    rcx,[rsp+0xb8]
 101f2e4:	call   QWORD PTR [rip+0xfffffffffffe2636]        # 0x1001920
 101f2ea:	nop
 101f2eb:	mov    rdx,rax
 101f2ee:	lea    rcx,[rsp+0xb8]
 101f2f6:	call   QWORD PTR [rip+0xfffffffffffe27a4]        # 0x1001aa0
 101f2fc:	nop
 101f2fd:	lea    rcx,[rsp+0x68]
 101f302:	call   QWORD PTR [rip+0xfffffffffffe27a0]        # 0x1001aa8
 101f308:	xor    r8d,r8d
 101f30b:	lea    rdx,[rip+0xfffffffffffe3aee]        # 0x1002e00
 101f312:	lea    rcx,[rsp+0xb8]
 101f31a:	call   QWORD PTR [rip+0xfffffffffffe2738]        # 0x1001a58
 101f320:	cmp    eax,0xffffffff
 101f323:	jne    0x101f38f
 101f325:	mov    rax,QWORD PTR [rdi+0x8]
 101f329:	movsxd rcx,DWORD PTR [rax+0x4]
 101f32d:	add    rcx,0x8
 101f331:	add    rcx,rdi
 101f334:	mov    rax,QWORD PTR [rcx]
 101f337:	mov    BYTE PTR [rsp+0x28],0x1
 101f33c:	mov    BYTE PTR [rsp+0x20],0x1
 101f341:	xor    r9d,r9d
 101f344:	mov    r8b,0x1
 101f347:	mov    edx,0xc000c407
 101f34c:	call   QWORD PTR [rax]
 101f34e:	lea    rdx,[rip+0xfffffffffffe2abb]        # 0x1001e10
 101f355:	mov    rcx,rsi
 101f358:	call   QWORD PTR [rip+0xfffffffffffe2752]        # 0x1001ab0
 101f35e:	mov    DWORD PTR [rsp+0x40],0x1
 101f366:	lea    rcx,[rsp+0x48]
 101f36b:	call   QWORD PTR [rip+0xfffffffffffe2737]        # 0x1001aa8
 101f371:	nop
 101f372:	lea    rcx,[rsp+0x58]
 101f377:	call   QWORD PTR [rip+0xfffffffffffe272b]        # 0x1001aa8
 101f37d:	nop
 101f37e:	lea    rcx,[rsp+0x50]
 101f383:	call   QWORD PTR [rip+0xfffffffffffe271f]        # 0x1001aa8
 101f389:	nop
 101f38a:	jmp    0x101f655
 101f38f:	lea    r8d,[rax+0x1]
 101f393:	lea    rdx,[rsp+0x68]
 101f398:	lea    rcx,[rsp+0xb8]
 101f3a0:	call   QWORD PTR [rip+0xfffffffffffe257a]        # 0x1001920
 101f3a6:	nop
 101f3a7:	mov    rdx,rax
 101f3aa:	lea    rcx,[rsp+0xb8]
 101f3b2:	call   QWORD PTR [rip+0xfffffffffffe26e8]        # 0x1001aa0
 101f3b8:	nop
 101f3b9:	lea    rcx,[rsp+0x68]
 101f3be:	call   QWORD PTR [rip+0xfffffffffffe26e4]        # 0x1001aa8
 101f3c4:	xor    r8d,r8d
 101f3c7:	lea    rdx,[rip+0xfffffffffffe3a32]        # 0x1002e00
 101f3ce:	lea    rcx,[rsp+0xb8]
 101f3d6:	call   QWORD PTR [rip+0xfffffffffffe267c]        # 0x1001a58
 101f3dc:	cmp    eax,0xffffffff
 101f3df:	jne    0x101f3ef
 101f3e1:	lea    rcx,[rsp+0xb8]
 101f3e9:	call   QWORD PTR [rip+0xfffffffffffe2701]        # 0x1001af0
 101f3ef:	mov    r8d,eax
 101f3f2:	lea    rdx,[rsp+0x68]
 101f3f7:	lea    rcx,[rsp+0xb8]
 101f3ff:	call   QWORD PTR [rip+0xfffffffffffe2643]        # 0x1001a48
 101f405:	nop
 101f406:	mov    rdx,rax
 101f409:	lea    rcx,[rsp+0x58]
 101f40e:	call   QWORD PTR [rip+0xfffffffffffe268c]        # 0x1001aa0
 101f414:	nop
 101f415:	lea    rcx,[rsp+0x68]
 101f41a:	call   QWORD PTR [rip+0xfffffffffffe2688]        # 0x1001aa8
 101f420:	lea    r8,[rip+0xfffffffffffe29e9]        # 0x1001e10
 101f427:	lea    rdx,[rip+0xfffffffffffe5ae6]        # 0x1004f14
 101f42e:	lea    rcx,[rsp+0x58]
 101f433:	call   QWORD PTR [rip+0xfffffffffffe2577]        # 0x10019b0
 101f439:	mov    r11,QWORD PTR [rdi+0xd8]
 101f440:	cmp    BYTE PTR [r11+0xb8],0x0
 101f448:	jne    0x101f5fb
 101f44e:	mov    edx,0x4000c40f
 101f453:	lea    rcx,[rsp+0x70]
 101f458:	call   0x10132d0
 101f45d:	nop
 101f45e:	lea    r8,[rsp+0x58]
 101f463:	mov    rdx,rax
 101f466:	lea    rcx,[rsp+0x60]
 101f46b:	call   0x1013cc0
 101f470:	nop
 101f471:	lea    r8,[rip+0xfffffffffffe62e8]        # 0x1005760
 101f478:	mov    rdx,rax
 101f47b:	lea    rcx,[rsp+0x68]
 101f480:	call   0x100af10
 101f485:	nop
 101f486:	mov    rdx,rax
 101f489:	lea    rcx,[rsp+0x50]
 101f48e:	call   QWORD PTR [rip+0xfffffffffffe2544]        # 0x10019d8
 101f494:	nop
 101f495:	lea    rcx,[rsp+0x68]
 101f49a:	call   QWORD PTR [rip+0xfffffffffffe2608]        # 0x1001aa8
 101f4a0:	nop
 101f4a1:	lea    rcx,[rsp+0x60]
 101f4a6:	call   QWORD PTR [rip+0xfffffffffffe25fc]        # 0x1001aa8
 101f4ac:	nop
 101f4ad:	lea    rcx,[rsp+0x70]
 101f4b2:	call   QWORD PTR [rip+0xfffffffffffe25f0]        # 0x1001aa8
 101f4b8:	mov    rcx,QWORD PTR [rip+0x44459]        # 0x1063918
 101f4bf:	call   QWORD PTR [rip+0xfffffffffffe1d73]        # 0x1001238
 101f4c5:	nop
 101f4c6:	lea    rcx,[rsp+0x50]
 101f4cb:	call   QWORD PTR [rip+0xfffffffffffe2617]        # 0x1001ae8
 101f4d1:	mov    rdx,rax
 101f4d4:	lea    rcx,[rsp+0x70]
 101f4d9:	call   0x1035210
 101f4de:	nop
 101f4df:	mov    rcx,QWORD PTR [rdi+0x8]
 101f4e3:	movsxd r8,DWORD PTR [rcx+0x4]
 101f4e7:	mov    rbx,QWORD PTR [r8+rdi*1+0x8]
 101f4ec:	mov    rcx,rax
 101f4ef:	call   QWORD PTR [rip+0xfffffffffffe25f3]        # 0x1001ae8
 101f4f5:	mov    r8,rax
 101f4f8:	mov    rax,QWORD PTR [rdi+0x8]
 101f4fc:	movsxd rcx,DWORD PTR [rax+0x4]
 101f500:	add    rcx,0x8
 101f504:	add    rcx,rdi
 101f507:	mov    BYTE PTR [rsp+0x30],0x1
 101f50c:	mov    BYTE PTR [rsp+0x28],0x0
 101f511:	mov    DWORD PTR [rsp+0x20],0x1
 101f519:	xor    r9d,r9d
 101f51c:	mov    edx,0x4000c40f
 101f521:	call   QWORD PTR [rbx+0x8]
 101f524:	nop
 101f525:	lea    rcx,[rsp+0x70]
 101f52a:	call   QWORD PTR [rip+0xfffffffffffe2578]        # 0x1001aa8
 101f530:	call   QWORD PTR [rip+0xfffffffffffe2232]        # 0x1001768
 101f536:	lea    rcx,[rax+0x30]
 101f53a:	call   QWORD PTR [rip+0xfffffffffffe2238]        # 0x1001778
 101f540:	mov    ebx,0xd
 101f545:	lea    r15d,[rbx-0x5]
 101f549:	nop    DWORD PTR [rax+0x0]
 101f550:	call   QWORD PTR [rip+0xfffffffffffe2262]        # 0x10017b8
 101f556:	cmp    r15w,ax
 101f55a:	jne    0x101f597
 101f55c:	lea    rcx,[rsp+0x48]
 101f561:	call   QWORD PTR [rip+0xfffffffffffe2589]        # 0x1001af0
 101f567:	test   eax,eax
 101f569:	jle    0x101f550
 101f56b:	lea    rcx,[rsp+0x48]
 101f570:	call   QWORD PTR [rip+0xfffffffffffe257a]        # 0x1001af0
 101f576:	lea    r8d,[rax-0x1]
 101f57a:	lea    rdx,[rsp+0x70]
 101f57f:	lea    rcx,[rsp+0x48]
 101f584:	call   QWORD PTR [rip+0xfffffffffffe24be]        # 0x1001a48
 101f58a:	lea    rcx,[rsp+0x70]
 101f58f:	call   QWORD PTR [rip+0xfffffffffffe2513]        # 0x1001aa8
 101f595:	jmp    0x101f550
 101f597:	cmp    bx,ax
 101f59a:	je     0x101f5ac
 101f59c:	movzx  edx,ax
 101f59f:	lea    rcx,[rsp+0x48]
 101f5a4:	call   QWORD PTR [rip+0xfffffffffffe23a6]        # 0x1001950
 101f5aa:	jmp    0x101f550
 101f5ac:	mov    rax,QWORD PTR [rdi+0x8]
 101f5b0:	movsxd rcx,DWORD PTR [rax+0x4]
 101f5b4:	add    rcx,r15
 101f5b7:	add    rcx,rdi
 101f5ba:	mov    rax,QWORD PTR [rcx]
 101f5bd:	mov    BYTE PTR [rsp+0x30],0x0
 101f5c2:	mov    BYTE PTR [rsp+0x28],0x1
 101f5c7:	mov    DWORD PTR [rsp+0x20],r14d
 101f5cc:	xor    r9d,r9d
 101f5cf:	lea    r8,[rip+0xfffffffffffe57e6]        # 0x1004dbc
 101f5d6:	mov    edx,0x4000c484
 101f5db:	call   QWORD PTR [rax+0x8]
 101f5de:	nop
 101f5df:	jmp    0x101f5ee
 101f5e1:	mov    rsi,QWORD PTR [rsp+0xa8]
 101f5e9:	mov    r14d,DWORD PTR [rsp+0x40]
 101f5ee:	mov    rcx,QWORD PTR [rip+0x44323]        # 0x1063918
 101f5f5:	call   QWORD PTR [rip+0xfffffffffffe1c45]        # 0x1001240
 101f5fb:	lea    rcx,[rsp+0x48]
 101f600:	call   QWORD PTR [rip+0xfffffffffffe24ea]        # 0x1001af0
 101f606:	test   eax,eax
 101f608:	jne    0x101f61a
 101f60a:	lea    rdx,[rsp+0x58]
 101f60f:	lea    rcx,[rsp+0x48]
 101f614:	call   QWORD PTR [rip+0xfffffffffffe2486]        # 0x1001aa0
 101f61a:	lea    rdx,[rsp+0x48]
 101f61f:	mov    rcx,rsi
 101f622:	call   QWORD PTR [rip+0xfffffffffffe2390]        # 0x10019b8
 101f628:	or     r14d,0x1
 101f62c:	mov    DWORD PTR [rsp+0x40],r14d
 101f631:	lea    rcx,[rsp+0x48]
 101f636:	call   QWORD PTR [rip+0xfffffffffffe246c]        # 0x1001aa8
 101f63c:	nop
 101f63d:	lea    rcx,[rsp+0x58]
 101f642:	call   QWORD PTR [rip+0xfffffffffffe2460]        # 0x1001aa8
 101f648:	nop
 101f649:	lea    rcx,[rsp+0x50]
 101f64e:	call   QWORD PTR [rip+0xfffffffffffe2454]        # 0x1001aa8
 101f654:	nop
 101f655:	lea    rcx,[rsp+0xb8]
 101f65d:	call   QWORD PTR [rip+0xfffffffffffe2445]        # 0x1001aa8
 101f663:	mov    rax,rsi
 101f666:	lea    r11,[rsp+0x80]
 101f66e:	mov    rbx,QWORD PTR [r11+0x20]
 101f672:	mov    rsi,QWORD PTR [r11+0x30]
 101f676:	mov    rsp,r11
 101f679:	pop    r15
 101f67b:	pop    r14
 101f67d:	pop    rdi
 101f67e:	ret    
 101f67f:	int3   
 101f680:	int3   
 101f681:	int3   
 101f682:	int3   
 101f683:	int3   
 101f684:	int3   
 101f685:	int3   
 101f686:	int3   
 101f687:	int3   
 101f688:	int3   
 101f689:	int3   
 101f68a:	int3   
 101f68b:	int3   
 101f68c:	int3   
 101f68d:	int3   
 101f68e:	int3   
 101f68f:	int3   
 101f690:	mov    QWORD PTR [rsp+0x10],rdx
 101f695:	push   rbx
 101f696:	sub    rsp,0x30
 101f69a:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
 101f6a3:	mov    rbx,rdx
 101f6a6:	mov    DWORD PTR [rsp+0x20],0x0
 101f6ae:	lea    r9,[rip+0xfffffffffffe275b]        # 0x1001e10
 101f6b5:	call   0x101f6e0
 101f6ba:	nop
 101f6bb:	mov    DWORD PTR [rsp+0x20],0x1
 101f6c3:	mov    rax,rbx
 101f6c6:	add    rsp,0x30
 101f6ca:	pop    rbx
 101f6cb:	ret    
 101f6cc:	int3   
 101f6cd:	int3   
 101f6ce:	int3   
 101f6cf:	int3   
 101f6d0:	int3   
 101f6d1:	int3   
 101f6d2:	int3   
 101f6d3:	int3   
 101f6d4:	int3   
 101f6d5:	int3   
 101f6d6:	int3   
 101f6d7:	int3   
 101f6d8:	int3   
 101f6d9:	int3   
 101f6da:	int3   
 101f6db:	int3   
 101f6dc:	int3   
 101f6dd:	int3   
 101f6de:	int3   
 101f6df:	int3   
 101f6e0:	mov    QWORD PTR [rsp+0x10],rdx
 101f6e5:	push   rbp
 101f6e6:	push   rsi
 101f6e7:	push   rdi
 101f6e8:	push   r14
 101f6ea:	push   r15
 101f6ec:	mov    rbp,rsp
 101f6ef:	sub    rsp,0x50
 101f6f3:	mov    QWORD PTR [rbp-0x10],0xfffffffffffffffe
 101f6fb:	mov    QWORD PTR [rsp+0x90],rbx
 101f703:	mov    r14,r9
 101f706:	mov    r15,r8
 101f709:	mov    rdi,rdx
 101f70c:	mov    rsi,rcx
 101f70f:	mov    DWORD PTR [rbp-0x30],0x0
 101f716:	lea    r9,[rip+0xfffffffffffe6273]        # 0x1005990
 101f71d:	lea    rdx,[rbp-0x20]
 101f721:	call   0x101f8e0
 101f726:	nop
 101f727:	mov    r8,r14
 101f72a:	mov    rdx,rax
 101f72d:	lea    rcx,[rbp-0x28]
 101f731:	call   0x100af10
 101f736:	nop
 101f737:	lea    rcx,[rbp-0x20]
 101f73b:	call   QWORD PTR [rip+0xfffffffffffe2367]        # 0x1001aa8
 101f741:	cmp    BYTE PTR [rsi+0x78],0x0
 101f745:	je     0x101f786
 101f747:	lea    rcx,[rbp-0x28]
 101f74b:	call   QWORD PTR [rip+0xfffffffffffe2397]        # 0x1001ae8
 101f751:	mov    rbx,rax
 101f754:	lea    rcx,[rsi+0x10]
 101f758:	call   QWORD PTR [rip+0xfffffffffffe238a]        # 0x1001ae8
 101f75e:	mov    rdx,rax
 101f761:	mov    r8,rbx
 101f764:	lea    rcx,[rbp-0x20]
 101f768:	call   0x1030800
 101f76d:	nop
 101f76e:	mov    rdx,rax
 101f771:	lea    rcx,[rbp-0x28]
 101f775:	call   QWORD PTR [rip+0xfffffffffffe2325]        # 0x1001aa0
 101f77b:	nop
 101f77c:	lea    rcx,[rbp-0x20]
 101f780:	call   QWORD PTR [rip+0xfffffffffffe2322]        # 0x1001aa8
 101f786:	lea    rcx,[rbp+0x30]
 101f78a:	call   QWORD PTR [rip+0xfffffffffffe2330]        # 0x1001ac0
 101f790:	nop
 101f791:	lea    rcx,[rbp-0x28]
 101f795:	call   QWORD PTR [rip+0xfffffffffffe234d]        # 0x1001ae8
 101f79b:	mov    rcx,rax
 101f79e:	call   0x1030a70
 101f7a3:	test   al,al
 101f7a5:	jne    0x101f88f
 101f7ab:	lea    r9,[rip+0xfffffffffffe61ee]        # 0x10059a0
 101f7b2:	mov    r8,r15
 101f7b5:	lea    rdx,[rbp-0x18]
 101f7b9:	mov    rcx,rsi
 101f7bc:	call   0x101f8e0
 101f7c1:	nop
 101f7c2:	mov    r8,r14
 101f7c5:	mov    rdx,rax
 101f7c8:	lea    rcx,[rbp-0x20]
 101f7cc:	call   0x100af10
 101f7d1:	nop
 101f7d2:	mov    rdx,rax
 101f7d5:	lea    rcx,[rbp+0x30]
 101f7d9:	call   QWORD PTR [rip+0xfffffffffffe22c1]        # 0x1001aa0
 101f7df:	nop
 101f7e0:	lea    rcx,[rbp-0x20]
 101f7e4:	call   QWORD PTR [rip+0xfffffffffffe22be]        # 0x1001aa8
 101f7ea:	nop
 101f7eb:	lea    rcx,[rbp-0x18]
 101f7ef:	call   QWORD PTR [rip+0xfffffffffffe22b3]        # 0x1001aa8
 101f7f5:	cmp    BYTE PTR [rsi+0x78],0x0
 101f7f9:	je     0x101f83a
 101f7fb:	lea    rcx,[rbp+0x30]
 101f7ff:	call   QWORD PTR [rip+0xfffffffffffe22e3]        # 0x1001ae8
 101f805:	mov    rbx,rax
 101f808:	lea    rcx,[rsi+0x10]
 101f80c:	call   QWORD PTR [rip+0xfffffffffffe22d6]        # 0x1001ae8
 101f812:	mov    rdx,rax
 101f815:	mov    r8,rbx
 101f818:	lea    rcx,[rbp-0x18]
 101f81c:	call   0x1030800
 101f821:	nop
 101f822:	mov    rdx,rax
 101f825:	lea    rcx,[rbp+0x30]
 101f829:	call   QWORD PTR [rip+0xfffffffffffe2271]        # 0x1001aa0
 101f82f:	nop
 101f830:	lea    rcx,[rbp-0x18]
 101f834:	call   QWORD PTR [rip+0xfffffffffffe226e]        # 0x1001aa8
 101f83a:	lea    rcx,[rbp+0x30]
 101f83e:	call   QWORD PTR [rip+0xfffffffffffe22a4]        # 0x1001ae8
 101f844:	mov    rcx,rax
 101f847:	call   0x1030a70
 101f84c:	mov    rcx,rdi
 101f84f:	test   al,al
 101f851:	jne    0x101f871
 101f853:	lea    rdx,[rbp-0x28]
 101f857:	call   QWORD PTR [rip+0xfffffffffffe215b]        # 0x10019b8
 101f85d:	mov    DWORD PTR [rbp-0x30],0x1
 101f864:	lea    rcx,[rbp+0x30]
 101f868:	call   QWORD PTR [rip+0xfffffffffffe223a]        # 0x1001aa8
 101f86e:	nop
 101f86f:	jmp    0x101f8ae
 101f871:	lea    rdx,[rbp+0x30]
 101f875:	call   QWORD PTR [rip+0xfffffffffffe213d]        # 0x10019b8
 101f87b:	mov    DWORD PTR [rbp-0x30],0x1
 101f882:	lea    rcx,[rbp+0x30]
 101f886:	call   QWORD PTR [rip+0xfffffffffffe221c]        # 0x1001aa8
 101f88c:	nop
 101f88d:	jmp    0x101f8ae
 101f88f:	lea    rdx,[rbp-0x28]
 101f893:	mov    rcx,rdi
 101f896:	call   QWORD PTR [rip+0xfffffffffffe211c]        # 0x10019b8
 101f89c:	mov    DWORD PTR [rbp-0x30],0x1
 101f8a3:	lea    rcx,[rbp+0x30]
 101f8a7:	call   QWORD PTR [rip+0xfffffffffffe21fb]        # 0x1001aa8
 101f8ad:	nop
 101f8ae:	lea    rcx,[rbp-0x28]
 101f8b2:	call   QWORD PTR [rip+0xfffffffffffe21f0]        # 0x1001aa8
 101f8b8:	mov    rax,rdi
 101f8bb:	mov    rbx,QWORD PTR [rsp+0x90]
 101f8c3:	add    rsp,0x50
 101f8c7:	pop    r15
 101f8c9:	pop    r14
 101f8cb:	pop    rdi
 101f8cc:	pop    rsi
 101f8cd:	pop    rbp
 101f8ce:	ret    
 101f8cf:	int3   
 101f8d0:	int3   
 101f8d1:	int3   
 101f8d2:	int3   
 101f8d3:	int3   
 101f8d4:	int3   
 101f8d5:	int3   
 101f8d6:	int3   
 101f8d7:	int3   
 101f8d8:	int3   
 101f8d9:	int3   
 101f8da:	int3   
 101f8db:	int3   
 101f8dc:	int3   
 101f8dd:	int3   
 101f8de:	int3   
 101f8df:	int3   
 101f8e0:	rex push rbp
 101f8e2:	push   rbx
 101f8e3:	push   rsi
 101f8e4:	push   rdi
 101f8e5:	push   r12
 101f8e7:	push   r13
 101f8e9:	push   r14
 101f8eb:	push   r15
 101f8ed:	lea    rbp,[rsp-0x1f8]
 101f8f5:	sub    rsp,0x2f8
 101f8fc:	mov    QWORD PTR [rbp-0x48],0xfffffffffffffffe
 101f904:	mov    rax,QWORD PTR [rip+0x43f65]        # 0x1063870
 101f90b:	xor    rax,rsp
 101f90e:	mov    QWORD PTR [rbp+0x1e0],rax
 101f915:	mov    QWORD PTR [rbp-0x50],r9
 101f919:	mov    r15,r8
 101f91c:	mov    r12,rdx
 101f91f:	mov    rsi,rcx
 101f922:	mov    QWORD PTR [rbp-0x40],rdx
 101f926:	xor    edi,edi
 101f928:	mov    DWORD PTR [rbp-0x58],edi
 101f92b:	lea    rcx,[rbp-0x70]
 101f92f:	call   QWORD PTR [rip+0xfffffffffffe218b]        # 0x1001ac0
 101f935:	nop
 101f936:	lea    rcx,[rbp-0x80]
 101f93a:	call   QWORD PTR [rip+0xfffffffffffe2180]        # 0x1001ac0
 101f940:	nop
 101f941:	lea    rcx,[rbp-0x78]
 101f945:	call   QWORD PTR [rip+0xfffffffffffe2175]        # 0x1001ac0
 101f94b:	nop
 101f94c:	mov    QWORD PTR [rsp+0x60],rdi
 101f951:	mov    QWORD PTR [rsp+0x58],rdi
 101f956:	mov    QWORD PTR [rsp+0x50],rdi
 101f95b:	mov    QWORD PTR [rsp+0x70],rdi
 101f960:	mov    QWORD PTR [rsp+0x68],rdi
 101f965:	mov    QWORD PTR [rsp+0x78],rdi
 101f96a:	mov    DWORD PTR [rsp+0x48],0x20a
 101f972:	mov    DWORD PTR [rbp-0x68],0x1
 101f979:	mov    rdx,r15
 101f97c:	mov    rcx,QWORD PTR [rsi+0xe8]
 101f983:	call   0x1012fe0
 101f988:	mov    r13,rax
 101f98b:	test   rax,rax
 101f98e:	jne    0x101fa86
 101f994:	mov    rax,QWORD PTR [rsi+0x8]
 101f998:	movsxd rcx,DWORD PTR [rax+0x4]
 101f99c:	mov    rbx,QWORD PTR [rcx+rsi*1+0x8]
 101f9a1:	lea    rcx,[rbp-0x80]
 101f9a5:	call   QWORD PTR [rip+0xfffffffffffe213d]        # 0x1001ae8
 101f9ab:	mov    r8,rax
 101f9ae:	mov    rax,QWORD PTR [rsi+0x8]
 101f9b2:	movsxd rcx,DWORD PTR [rax+0x4]
 101f9b6:	add    rcx,0x8
 101f9ba:	add    rcx,rsi
 101f9bd:	mov    BYTE PTR [rsp+0x30],0x1
 101f9c2:	mov    BYTE PTR [rsp+0x28],0x1
 101f9c7:	mov    DWORD PTR [rsp+0x20],edi
 101f9cb:	xor    r9d,r9d
 101f9ce:	mov    edx,0x4000c484
 101f9d3:	call   QWORD PTR [rbx+0x8]
 101f9d6:	lea    rdx,[rip+0xfffffffffffe2433]        # 0x1001e10
 101f9dd:	mov    rcx,r12
 101f9e0:	call   QWORD PTR [rip+0xfffffffffffe20ca]        # 0x1001ab0
 101f9e6:	mov    DWORD PTR [rbp-0x58],0x1
 101f9ed:	mov    rcx,QWORD PTR [rsp+0x78]
 101f9f2:	test   rcx,rcx
 101f9f5:	je     0x101fa02
 101f9f7:	call   QWORD PTR [rip+0xfffffffffffe1623]        # 0x1001020
 101f9fd:	mov    QWORD PTR [rsp+0x78],rdi
 101fa02:	mov    rcx,QWORD PTR [rsp+0x68]
 101fa07:	test   rcx,rcx
 101fa0a:	je     0x101fa17
 101fa0c:	call   QWORD PTR [rip+0xfffffffffffe160e]        # 0x1001020
 101fa12:	mov    QWORD PTR [rsp+0x68],rdi
 101fa17:	mov    rcx,QWORD PTR [rsp+0x70]
 101fa1c:	test   rcx,rcx
 101fa1f:	je     0x101fa2c
 101fa21:	call   QWORD PTR [rip+0xfffffffffffe15f9]        # 0x1001020
 101fa27:	mov    QWORD PTR [rsp+0x70],rdi
 101fa2c:	mov    rcx,QWORD PTR [rsp+0x50]
 101fa31:	test   rcx,rcx
 101fa34:	je     0x101fa41
 101fa36:	call   QWORD PTR [rip+0xfffffffffffe15e4]        # 0x1001020
 101fa3c:	mov    QWORD PTR [rsp+0x50],rdi
 101fa41:	mov    rcx,QWORD PTR [rsp+0x58]
 101fa46:	test   rcx,rcx
 101fa49:	je     0x101fa56
 101fa4b:	call   QWORD PTR [rip+0xfffffffffffe15cf]        # 0x1001020
 101fa51:	mov    QWORD PTR [rsp+0x58],rdi
 101fa56:	mov    rcx,QWORD PTR [rsp+0x60]
 101fa5b:	test   rcx,rcx
 101fa5e:	je     0x101fa6b
 101fa60:	call   QWORD PTR [rip+0xfffffffffffe15ba]        # 0x1001020
 101fa66:	mov    QWORD PTR [rsp+0x60],rdi
 101fa6b:	lea    rcx,[rbp-0x78]
 101fa6f:	call   QWORD PTR [rip+0xfffffffffffe2033]        # 0x1001aa8
 101fa75:	nop
 101fa76:	lea    rcx,[rbp-0x80]
 101fa7a:	call   QWORD PTR [rip+0xfffffffffffe2028]        # 0x1001aa8
 101fa80:	nop
 101fa81:	jmp    0x10206f4
 101fa86:	mov    r14d,0x20019
 101fa8c:	cmp    BYTE PTR [rsi+0x2a],0x0
 101fa90:	je     0x101faad
 101fa92:	mov    eax,DWORD PTR [rax+0x4]
 101fa95:	cmp    eax,0x20
 101fa98:	je     0x101faa7
 101fa9a:	cmp    eax,0x40
 101fa9d:	jne    0x101faad
 101fa9f:	mov    r14d,0x20119
 101faa5:	jmp    0x101faad
 101faa7:	mov    r14d,0x20219
 101faad:	cmp    DWORD PTR [rsi+0x24],0x9
 101fab1:	jge    0x1020046
 101fab7:	or     rax,0xffffffffffffffff
 101fabb:	nop    DWORD PTR [rax+rax*1+0x0]
 101fac0:	inc    rax
 101fac3:	cmp    WORD PTR [r15+rax*2],0x0
 101fac9:	jne    0x101fac0
 101facb:	mov    edx,0xc000c35a
 101fad0:	lea    rcx,[rsp+0x40]
 101fad5:	test   rax,rax
 101fad8:	jne    0x101fd7c
 101fade:	call   0x10132d0
 101fae3:	nop
 101fae4:	mov    r8,QWORD PTR [rax]
 101fae7:	lea    rdx,[rip+0xfffffffffffe5e3a]        # 0x1005928
 101faee:	lea    rcx,[rbp-0x80]
 101faf2:	call   QWORD PTR [rip+0xfffffffffffe1f48]        # 0x1001a40
 101faf8:	nop
 101faf9:	lea    rcx,[rsp+0x40]
 101fafe:	call   QWORD PTR [rip+0xfffffffffffe1fa4]        # 0x1001aa8
 101fb04:	mov    edx,0xc000c35c
 101fb09:	lea    rcx,[rsp+0x40]
 101fb0e:	call   0x10132d0
 101fb13:	nop
 101fb14:	mov    rcx,rax
 101fb17:	call   QWORD PTR [rip+0xfffffffffffe1fcb]        # 0x1001ae8
 101fb1d:	mov    rdx,rax
 101fb20:	lea    r8,[rip+0xfffffffffffe2fe1]        # 0x1002b08
 101fb27:	lea    rcx,[rbp-0x78]
 101fb2b:	call   QWORD PTR [rip+0xfffffffffffe1f0f]        # 0x1001a40
 101fb31:	nop
 101fb32:	lea    rcx,[rsp+0x40]
 101fb37:	call   QWORD PTR [rip+0xfffffffffffe1f6b]        # 0x1001aa8
 101fb3d:	mov    rax,QWORD PTR [rsi+0x8]
 101fb41:	movsxd rcx,DWORD PTR [rax+0x4]
 101fb45:	mov    rbx,QWORD PTR [rcx+rsi*1+0x8]
 101fb4a:	lea    rcx,[rsi+0x10]
 101fb4e:	call   QWORD PTR [rip+0xfffffffffffe1f94]        # 0x1001ae8
 101fb54:	mov    rcx,rax
 101fb57:	lea    r8,[rsp+0x60]
 101fb5c:	mov    rdx,0xffffffff80000002
 101fb63:	call   QWORD PTR [rip+0xfffffffffffe1507]        # 0x1001070
 101fb69:	mov    edx,eax
 101fb6b:	mov    rax,QWORD PTR [rsi+0x8]
 101fb6f:	movsxd rcx,DWORD PTR [rax+0x4]
 101fb73:	add    rcx,0x8
 101fb77:	add    rcx,rsi
 101fb7a:	xor    r9d,r9d
 101fb7d:	mov    r8d,0xc000c356
 101fb83:	call   QWORD PTR [rbx+0x20]
 101fb86:	test   al,al
 101fb88:	je     0x102061b
 101fb8e:	mov    rax,QWORD PTR [rsi+0x8]
 101fb92:	movsxd rcx,DWORD PTR [rax+0x4]
 101fb96:	mov    rbx,QWORD PTR [rcx+rsi*1+0x8]
 101fb9b:	lea    rax,[rsp+0x58]
 101fba0:	mov    QWORD PTR [rsp+0x20],rax
 101fba5:	mov    r9d,r14d
 101fba8:	xor    r8d,r8d
 101fbab:	lea    rdx,[rip+0xfffffffffffe5c06]        # 0x10057b8
 101fbb2:	mov    rcx,QWORD PTR [rsp+0x60]
 101fbb7:	call   QWORD PTR [rip+0xfffffffffffe14c3]        # 0x1001080
 101fbbd:	mov    edx,eax
 101fbbf:	mov    rax,QWORD PTR [rsi+0x8]
 101fbc3:	movsxd rcx,DWORD PTR [rax+0x4]
 101fbc7:	add    rcx,0x8
 101fbcb:	add    rcx,rsi
 101fbce:	xor    r9d,r9d
 101fbd1:	mov    r8d,0xc000c357
 101fbd7:	call   QWORD PTR [rbx+0x20]
 101fbda:	test   al,al
 101fbdc:	je     0x102061b
 101fbe2:	mov    rax,QWORD PTR [rsi+0x8]
 101fbe6:	movsxd rcx,DWORD PTR [rax+0x4]
 101fbea:	mov    rbx,QWORD PTR [rcx+rsi*1+0x8]
 101fbef:	lea    rax,[rsp+0x50]
 101fbf4:	mov    QWORD PTR [rsp+0x20],rax
 101fbf9:	mov    r9d,r14d
 101fbfc:	xor    r8d,r8d
 101fbff:	lea    rdx,[rip+0xfffffffffffe5b9a]        # 0x10057a0
 101fc06:	mov    rcx,QWORD PTR [rsp+0x58]
 101fc0b:	call   QWORD PTR [rip+0xfffffffffffe146f]        # 0x1001080
 101fc11:	mov    edx,eax
 101fc13:	mov    rax,QWORD PTR [rsi+0x8]
 101fc17:	movsxd rcx,DWORD PTR [rax+0x4]
 101fc1b:	add    rcx,0x8
 101fc1f:	add    rcx,rsi
 101fc22:	xor    r9d,r9d
 101fc25:	mov    r8d,0xc000c358
 101fc2b:	call   QWORD PTR [rbx+0x20]
 101fc2e:	test   al,al
 101fc30:	je     0x102061b
 101fc36:	mov    rax,QWORD PTR [rsi+0x8]
 101fc3a:	movsxd rcx,DWORD PTR [rax+0x4]
 101fc3e:	mov    rbx,QWORD PTR [rcx+rsi*1+0x8]
 101fc43:	lea    rax,[rsp+0x70]
 101fc48:	mov    QWORD PTR [rsp+0x20],rax
 101fc4d:	mov    r9d,r14d
 101fc50:	xor    r8d,r8d
 101fc53:	lea    rdx,[rip+0xfffffffffffe351e]        # 0x1003178
 101fc5a:	mov    rcx,QWORD PTR [rsp+0x50]
 101fc5f:	call   QWORD PTR [rip+0xfffffffffffe141b]        # 0x1001080
 101fc65:	mov    edx,eax
 101fc67:	mov    rax,QWORD PTR [rsi+0x8]
 101fc6b:	movsxd rcx,DWORD PTR [rax+0x4]
 101fc6f:	add    rcx,0x8
 101fc73:	add    rcx,rsi
 101fc76:	mov    r9b,0x1
 101fc79:	mov    r8d,0xc000c359
 101fc7f:	call   QWORD PTR [rbx+0x20]
 101fc82:	test   al,al
 101fc84:	je     0x102061b
 101fc8a:	lea    rax,[rsp+0x40]
 101fc8f:	mov    QWORD PTR [rbp-0x60],rax
 101fc93:	lea    rdx,[rbp-0x80]
 101fc97:	lea    rcx,[rsp+0x40]
 101fc9c:	call   QWORD PTR [rip+0xfffffffffffe1d16]        # 0x10019b8
 101fca2:	mov    rdi,rax
 101fca5:	mov    rcx,QWORD PTR [rsp+0x70]
 101fcaa:	mov    rdx,QWORD PTR [rsi+0x8]
 101fcae:	movsxd r8,DWORD PTR [rdx+0x4]
 101fcb2:	mov    rbx,QWORD PTR [r8+rsi*1+0x8]
 101fcb7:	lea    rax,[rsp+0x68]
 101fcbc:	mov    QWORD PTR [rsp+0x20],rax
 101fcc1:	mov    r9d,r14d
 101fcc4:	xor    r8d,r8d
 101fcc7:	lea    rdx,[rip+0xfffffffffffe5c8a]        # 0x1005958
 101fcce:	call   QWORD PTR [rip+0xfffffffffffe13ac]        # 0x1001080
 101fcd4:	mov    edx,eax
 101fcd6:	mov    rax,QWORD PTR [rsi+0x8]
 101fcda:	movsxd rcx,DWORD PTR [rax+0x4]
 101fcde:	add    rcx,0x8
 101fce2:	add    rcx,rsi
 101fce5:	mov    r9b,0x1
 101fce8:	mov    r8,rdi
 101fceb:	call   QWORD PTR [rbx+0x28]
 101fcee:	test   al,al
 101fcf0:	je     0x1020619
 101fcf6:	lea    rax,[rsp+0x40]
 101fcfb:	mov    QWORD PTR [rbp-0x60],rax
 101fcff:	lea    rdx,[rbp-0x78]
 101fd03:	lea    rcx,[rsp+0x40]
 101fd08:	call   QWORD PTR [rip+0xfffffffffffe1caa]        # 0x10019b8
 101fd0e:	mov    rdi,rax
 101fd11:	mov    rcx,QWORD PTR [rsi+0x8]
 101fd15:	movsxd r8,DWORD PTR [rcx+0x4]
 101fd19:	mov    rbx,QWORD PTR [r8+rsi*1+0x8]
 101fd1e:	lea    rax,[rsp+0x48]
 101fd23:	mov    QWORD PTR [rsp+0x28],rax
 101fd28:	lea    rax,[rbp-0x30]
 101fd2c:	mov    QWORD PTR [rsp+0x20],rax
 101fd31:	lea    r9,[rbp-0x68]
 101fd35:	xor    r8d,r8d
 101fd38:	mov    rdx,QWORD PTR [rbp-0x50]
 101fd3c:	mov    rcx,QWORD PTR [rsp+0x68]
 101fd41:	call   QWORD PTR [rip+0xfffffffffffe1341]        # 0x1001088
 101fd47:	mov    edx,eax
 101fd49:	mov    rax,QWORD PTR [rsi+0x8]
 101fd4d:	movsxd rcx,DWORD PTR [rax+0x4]
 101fd51:	add    rcx,0x8
 101fd55:	add    rcx,rsi
 101fd58:	mov    r9b,0x1
 101fd5b:	mov    r8,rdi
 101fd5e:	call   QWORD PTR [rbx+0x28]
 101fd61:	test   al,al
 101fd63:	je     0x1020619
 101fd69:	lea    rdx,[rbp-0x30]
 101fd6d:	lea    rcx,[rbp-0x70]
 101fd71:	call   QWORD PTR [rip+0xfffffffffffe1d21]        # 0x1001a98
 101fd77:	jmp    0x1020619
 101fd7c:	call   0x10132d0
 101fd81:	nop
 101fd82:	mov    r9,r15
 101fd85:	mov    r8,QWORD PTR [rax]
 101fd88:	lea    rdx,[rip+0xfffffffffffe5bd9]        # 0x1005968
 101fd8f:	lea    rcx,[rbp-0x80]
 101fd93:	call   QWORD PTR [rip+0xfffffffffffe1ca7]        # 0x1001a40
 101fd99:	nop
 101fd9a:	lea    rcx,[rsp+0x40]
 101fd9f:	call   QWORD PTR [rip+0xfffffffffffe1d03]        # 0x1001aa8
 101fda5:	mov    rax,QWORD PTR [rsi+0x8]
 101fda9:	movsxd rcx,DWORD PTR [rax+0x4]
 101fdad:	mov    rbx,QWORD PTR [rcx+rsi*1+0x8]
 101fdb2:	lea    rcx,[rsi+0x10]
 101fdb6:	call   QWORD PTR [rip+0xfffffffffffe1d2c]        # 0x1001ae8
 101fdbc:	mov    rcx,rax
 101fdbf:	lea    r8,[rsp+0x60]
 101fdc4:	mov    rdx,0xffffffff80000002
 101fdcb:	call   QWORD PTR [rip+0xfffffffffffe129f]        # 0x1001070
 101fdd1:	mov    edx,eax
 101fdd3:	mov    rax,QWORD PTR [rsi+0x8]
 101fdd7:	movsxd rcx,DWORD PTR [rax+0x4]
 101fddb:	add    rcx,0x8
 101fddf:	add    rcx,rsi
 101fde2:	xor    r9d,r9d
 101fde5:	mov    r8d,0xc000c356
 101fdeb:	call   QWORD PTR [rbx+0x20]
 101fdee:	test   al,al
 101fdf0:	je     0x102061b
 101fdf6:	mov    rax,QWORD PTR [rsi+0x8]
 101fdfa:	movsxd rcx,DWORD PTR [rax+0x4]
 101fdfe:	mov    rbx,QWORD PTR [rcx+rsi*1+0x8]
 101fe03:	lea    rax,[rsp+0x58]
 101fe08:	mov    QWORD PTR [rsp+0x20],rax
 101fe0d:	mov    r9d,r14d
 101fe10:	xor    r8d,r8d
 101fe13:	lea    rdx,[rip+0xfffffffffffe599e]        # 0x10057b8
 101fe1a:	mov    rcx,QWORD PTR [rsp+0x60]
 101fe1f:	call   QWORD PTR [rip+0xfffffffffffe125b]        # 0x1001080
 101fe25:	mov    edx,eax
 101fe27:	mov    rax,QWORD PTR [rsi+0x8]
 101fe2b:	movsxd rcx,DWORD PTR [rax+0x4]
 101fe2f:	add    rcx,0x8
 101fe33:	add    rcx,rsi
 101fe36:	xor    r9d,r9d
 101fe39:	mov    r8d,0xc000c357
 101fe3f:	call   QWORD PTR [rbx+0x20]
 101fe42:	test   al,al
 101fe44:	je     0x102061b
 101fe4a:	mov    rax,QWORD PTR [rsi+0x8]
 101fe4e:	movsxd rcx,DWORD PTR [rax+0x4]
 101fe52:	mov    rbx,QWORD PTR [rcx+rsi*1+0x8]
 101fe57:	lea    rax,[rsp+0x50]
 101fe5c:	mov    QWORD PTR [rsp+0x20],rax
 101fe61:	mov    r9d,r14d
 101fe64:	xor    r8d,r8d
 101fe67:	lea    rdx,[rip+0xfffffffffffe5932]        # 0x10057a0
 101fe6e:	mov    rcx,QWORD PTR [rsp+0x58]
 101fe73:	call   QWORD PTR [rip+0xfffffffffffe1207]        # 0x1001080
 101fe79:	mov    edx,eax
 101fe7b:	mov    rax,QWORD PTR [rsi+0x8]
 101fe7f:	movsxd rcx,DWORD PTR [rax+0x4]
 101fe83:	add    rcx,0x8
 101fe87:	add    rcx,rsi
 101fe8a:	xor    r9d,r9d
 101fe8d:	mov    r8d,0xc000c358
 101fe93:	call   QWORD PTR [rbx+0x20]
 101fe96:	test   al,al
 101fe98:	je     0x102061b
 101fe9e:	mov    rax,QWORD PTR [rsi+0x8]
 101fea2:	movsxd rcx,DWORD PTR [rax+0x4]
 101fea6:	mov    rbx,QWORD PTR [rcx+rsi*1+0x8]
 101feab:	lea    rax,[rsp+0x70]
 101feb0:	mov    QWORD PTR [rsp+0x20],rax
 101feb5:	mov    r9d,r14d
 101feb8:	xor    r8d,r8d
 101febb:	lea    rdx,[rip+0xfffffffffffe59ce]        # 0x1005890
 101fec2:	mov    rcx,QWORD PTR [rsp+0x50]
 101fec7:	call   QWORD PTR [rip+0xfffffffffffe11b3]        # 0x1001080
 101fecd:	mov    edx,eax
 101fecf:	mov    rax,QWORD PTR [rsi+0x8]
 101fed3:	movsxd rcx,DWORD PTR [rax+0x4]
 101fed7:	add    rcx,0x8
 101fedb:	add    rcx,rsi
 101fede:	xor    r9d,r9d
 101fee1:	mov    r8d,0xc000c359
 101fee7:	call   QWORD PTR [rbx+0x20]
 101feea:	test   al,al
 101feec:	je     0x102061b
 101fef2:	mov    rax,QWORD PTR [rsi+0x8]
 101fef6:	movsxd rcx,DWORD PTR [rax+0x4]
 101fefa:	mov    rbx,QWORD PTR [rcx+rsi*1+0x8]
 101feff:	lea    rax,[rsp+0x78]
 101ff04:	mov    QWORD PTR [rsp+0x20],rax
 101ff09:	mov    r9d,r14d
 101ff0c:	xor    r8d,r8d
 101ff0f:	mov    rdx,r15
 101ff12:	mov    rcx,QWORD PTR [rsp+0x70]
 101ff17:	call   QWORD PTR [rip+0xfffffffffffe1163]        # 0x1001080
 101ff1d:	mov    edx,eax
 101ff1f:	mov    rax,QWORD PTR [rsi+0x8]
 101ff23:	movsxd rcx,DWORD PTR [rax+0x4]
 101ff27:	add    rcx,0x8
 101ff2b:	add    rcx,rsi
 101ff2e:	xor    r9d,r9d
 101ff31:	mov    r8d,0xc000c35a
 101ff37:	call   QWORD PTR [rbx+0x20]
 101ff3a:	test   al,al
 101ff3c:	je     0x102061b
 101ff42:	lea    rax,[rsp+0x40]
 101ff47:	mov    QWORD PTR [rbp-0x60],rax
 101ff4b:	lea    rdx,[rbp-0x80]
 101ff4f:	lea    rcx,[rsp+0x40]
 101ff54:	call   QWORD PTR [rip+0xfffffffffffe1a5e]        # 0x10019b8
 101ff5a:	mov    rdi,rax
 101ff5d:	mov    rcx,QWORD PTR [rsp+0x78]
 101ff62:	mov    rdx,QWORD PTR [rsi+0x8]
 101ff66:	movsxd r8,DWORD PTR [rdx+0x4]
 101ff6a:	mov    rbx,QWORD PTR [r8+rsi*1+0x8]
 101ff6f:	lea    rax,[rsp+0x68]
 101ff74:	mov    QWORD PTR [rsp+0x20],rax
 101ff79:	mov    r9d,r14d
 101ff7c:	xor    r8d,r8d
 101ff7f:	lea    rdx,[rip+0xfffffffffffe59d2]        # 0x1005958
 101ff86:	call   QWORD PTR [rip+0xfffffffffffe10f4]        # 0x1001080
 101ff8c:	mov    edx,eax
 101ff8e:	mov    rax,QWORD PTR [rsi+0x8]
 101ff92:	movsxd rcx,DWORD PTR [rax+0x4]
 101ff96:	add    rcx,0x8
 101ff9a:	add    rcx,rsi
 101ff9d:	xor    r9d,r9d
 101ffa0:	mov    r8,rdi
 101ffa3:	call   QWORD PTR [rbx+0x28]
 101ffa6:	test   al,al
 101ffa8:	je     0x1020619
 101ffae:	mov    DWORD PTR [rsp+0x48],0x20a
 101ffb6:	mov    edx,0xc000c35c
 101ffbb:	lea    rcx,[rsp+0x40]
 101ffc0:	call   0x10132d0
 101ffc5:	nop
 101ffc6:	mov    rcx,rax
 101ffc9:	call   QWORD PTR [rip+0xfffffffffffe1b19]        # 0x1001ae8
 101ffcf:	mov    rdx,rax
 101ffd2:	mov    r8,r15
 101ffd5:	lea    rcx,[rbp-0x78]
 101ffd9:	call   QWORD PTR [rip+0xfffffffffffe1a61]        # 0x1001a40
 101ffdf:	nop
 101ffe0:	lea    rcx,[rsp+0x40]
 101ffe5:	call   QWORD PTR [rip+0xfffffffffffe1abd]        # 0x1001aa8
 101ffeb:	lea    r11,[rsp+0x40]
 101fff0:	mov    QWORD PTR [rbp-0x60],r11
 101fff4:	lea    rax,[rsp+0x48]
 101fff9:	mov    QWORD PTR [rsp+0x28],rax
 101fffe:	lea    rax,[rbp-0x30]
 1020002:	mov    QWORD PTR [rsp+0x20],rax
 1020007:	lea    r9,[rbp-0x68]
 102000b:	xor    r8d,r8d
 102000e:	mov    rdx,QWORD PTR [rbp-0x50]
 1020012:	mov    rcx,QWORD PTR [rsp+0x68]
 1020017:	call   QWORD PTR [rip+0xfffffffffffe106b]        # 0x1001088
 102001d:	mov    ebx,eax
 102001f:	lea    rdx,[rbp-0x78]
 1020023:	lea    rcx,[rsp+0x40]
 1020028:	call   QWORD PTR [rip+0xfffffffffffe198a]        # 0x10019b8
 102002e:	nop
 102002f:	mov    rcx,QWORD PTR [rsi+0x8]
 1020033:	movsxd rdx,DWORD PTR [rcx+0x4]
 1020037:	lea    rcx,[rsi+0x8]
 102003b:	add    rcx,rdx
 102003e:	mov    r10,QWORD PTR [rcx]
 1020041:	jmp    0x1020350
 1020046:	mov    edx,0xc000c35a
 102004b:	lea    rcx,[rsp+0x40]
 1020050:	call   0x10132d0
 1020055:	mov    r8,rax
 1020058:	or     rax,0xffffffffffffffff
 102005c:	nop    DWORD PTR [rax+0x0]
 1020060:	inc    rax
 1020063:	cmp    WORD PTR [r15+rax*2],0x0
 1020069:	jne    0x1020060
 102006b:	lea    rcx,[rip+0xfffffffffffe2a96]        # 0x1002b08
 1020072:	mov    r9,r15
 1020075:	test   rax,rax
 1020078:	cmove  r9,rcx
 102007c:	mov    r8,QWORD PTR [r8]
 102007f:	lea    rdx,[rip+0xfffffffffffe58e2]        # 0x1005968
 1020086:	lea    rcx,[rbp-0x80]
 102008a:	call   QWORD PTR [rip+0xfffffffffffe19b0]        # 0x1001a40
 1020090:	nop
 1020091:	lea    rcx,[rsp+0x40]
 1020096:	call   QWORD PTR [rip+0xfffffffffffe1a0c]        # 0x1001aa8
 102009c:	mov    rax,QWORD PTR [rsi+0x8]
 10200a0:	movsxd rcx,DWORD PTR [rax+0x4]
 10200a4:	mov    rbx,QWORD PTR [rcx+rsi*1+0x8]
 10200a9:	lea    rcx,[rsi+0x10]
 10200ad:	cmp    BYTE PTR [r13+0x8],0x0
 10200b2:	jne    0x102037c
 10200b8:	call   QWORD PTR [rip+0xfffffffffffe1a2a]        # 0x1001ae8
 10200be:	mov    rcx,rax
 10200c1:	lea    r8,[rsp+0x60]
 10200c6:	mov    rdx,0xffffffff80000002
 10200cd:	call   QWORD PTR [rip+0xfffffffffffe0f9d]        # 0x1001070
 10200d3:	mov    edx,eax
 10200d5:	mov    rax,QWORD PTR [rsi+0x8]
 10200d9:	movsxd rcx,DWORD PTR [rax+0x4]
 10200dd:	add    rcx,0x8
 10200e1:	add    rcx,rsi
 10200e4:	xor    r9d,r9d
 10200e7:	mov    r8d,0xc000c356
 10200ed:	call   QWORD PTR [rbx+0x20]
 10200f0:	test   al,al
 10200f2:	je     0x102061b
 10200f8:	mov    rax,QWORD PTR [rsi+0x8]
 10200fc:	movsxd rcx,DWORD PTR [rax+0x4]
 1020100:	mov    rbx,QWORD PTR [rcx+rsi*1+0x8]
 1020105:	lea    rax,[rsp+0x58]
 102010a:	mov    QWORD PTR [rsp+0x20],rax
 102010f:	mov    r9d,r14d
 1020112:	xor    r8d,r8d
 1020115:	lea    rdx,[rip+0xfffffffffffe569c]        # 0x10057b8
 102011c:	mov    rcx,QWORD PTR [rsp+0x60]
 1020121:	call   QWORD PTR [rip+0xfffffffffffe0f59]        # 0x1001080
 1020127:	mov    edx,eax
 1020129:	mov    rax,QWORD PTR [rsi+0x8]
 102012d:	movsxd rcx,DWORD PTR [rax+0x4]
 1020131:	add    rcx,0x8
 1020135:	add    rcx,rsi
 1020138:	xor    r9d,r9d
 102013b:	mov    r8d,0xc000c357
 1020141:	call   QWORD PTR [rbx+0x20]
 1020144:	test   al,al
 1020146:	je     0x102061b
 102014c:	mov    rax,QWORD PTR [rsi+0x8]
 1020150:	movsxd rcx,DWORD PTR [rax+0x4]
 1020154:	mov    rbx,QWORD PTR [rcx+rsi*1+0x8]
 1020159:	lea    rax,[rsp+0x50]
 102015e:	mov    QWORD PTR [rsp+0x20],rax
 1020163:	mov    r9d,r14d
 1020166:	xor    r8d,r8d
 1020169:	lea    rdx,[rip+0xfffffffffffe5630]        # 0x10057a0
 1020170:	mov    rcx,QWORD PTR [rsp+0x58]
 1020175:	call   QWORD PTR [rip+0xfffffffffffe0f05]        # 0x1001080
 102017b:	mov    edx,eax
 102017d:	mov    rax,QWORD PTR [rsi+0x8]
 1020181:	movsxd rcx,DWORD PTR [rax+0x4]
 1020185:	add    rcx,0x8
 1020189:	add    rcx,rsi
 102018c:	xor    r9d,r9d
 102018f:	mov    r8d,0xc000c358
 1020195:	call   QWORD PTR [rbx+0x20]
 1020198:	test   al,al
 102019a:	je     0x102061b
 10201a0:	mov    rax,QWORD PTR [rsi+0x8]
 10201a4:	movsxd rcx,DWORD PTR [rax+0x4]
 10201a8:	mov    rbx,QWORD PTR [rcx+rsi*1+0x8]
 10201ad:	lea    rax,[rsp+0x70]
 10201b2:	mov    QWORD PTR [rsp+0x20],rax
 10201b7:	mov    r9d,r14d
 10201ba:	xor    r8d,r8d
 10201bd:	lea    rdx,[rip+0xfffffffffffe56cc]        # 0x1005890
 10201c4:	mov    rcx,QWORD PTR [rsp+0x50]
 10201c9:	call   QWORD PTR [rip+0xfffffffffffe0eb1]        # 0x1001080
 10201cf:	mov    edx,eax
 10201d1:	mov    rax,QWORD PTR [rsi+0x8]
 10201d5:	movsxd rcx,DWORD PTR [rax+0x4]
 10201d9:	add    rcx,0x8
 10201dd:	add    rcx,rsi
 10201e0:	xor    r9d,r9d
 10201e3:	mov    r8d,0xc000c359
 10201e9:	call   QWORD PTR [rbx+0x20]
 10201ec:	test   al,al
 10201ee:	je     0x102061b
 10201f4:	mov    rbx,QWORD PTR [rsp+0x70]
 10201f9:	mov    rax,QWORD PTR [rsi+0x8]
 10201fd:	movsxd rdx,DWORD PTR [rax+0x4]
 1020201:	mov    rdi,QWORD PTR [rdx+rsi*1+0x8]
 1020206:	lea    rcx,[r13+0x10]
 102020a:	call   QWORD PTR [rip+0xfffffffffffe18d8]        # 0x1001ae8
 1020210:	mov    rdx,rax
 1020213:	lea    rax,[rsp+0x78]
 1020218:	mov    QWORD PTR [rsp+0x20],rax
 102021d:	mov    r9d,r14d
 1020220:	xor    r8d,r8d
 1020223:	mov    rcx,rbx
 1020226:	call   QWORD PTR [rip+0xfffffffffffe0e54]        # 0x1001080
 102022c:	mov    edx,eax
 102022e:	mov    rax,QWORD PTR [rsi+0x8]
 1020232:	movsxd rcx,DWORD PTR [rax+0x4]
 1020236:	add    rcx,0x8
 102023a:	add    rcx,rsi
 102023d:	xor    r9d,r9d
 1020240:	mov    r8d,0xc000c35a
 1020246:	call   QWORD PTR [rdi+0x20]
 1020249:	test   al,al
 102024b:	je     0x1020619
 1020251:	lea    rax,[rsp+0x40]
 1020256:	mov    QWORD PTR [rbp-0x60],rax
 102025a:	lea    rdx,[rbp-0x80]
 102025e:	lea    rcx,[rsp+0x40]
 1020263:	call   QWORD PTR [rip+0xfffffffffffe174f]        # 0x10019b8
 1020269:	mov    rdi,rax
 102026c:	mov    rcx,QWORD PTR [rsp+0x78]
 1020271:	mov    rdx,QWORD PTR [rsi+0x8]
 1020275:	movsxd r8,DWORD PTR [rdx+0x4]
 1020279:	mov    rbx,QWORD PTR [r8+rsi*1+0x8]
 102027e:	lea    rax,[rsp+0x68]
 1020283:	mov    QWORD PTR [rsp+0x20],rax
 1020288:	mov    r9d,r14d
 102028b:	xor    r8d,r8d
 102028e:	lea    rdx,[rip+0xfffffffffffe56c3]        # 0x1005958
 1020295:	call   QWORD PTR [rip+0xfffffffffffe0de5]        # 0x1001080
 102029b:	mov    edx,eax
 102029d:	mov    rax,QWORD PTR [rsi+0x8]
 10202a1:	movsxd rcx,DWORD PTR [rax+0x4]
 10202a5:	add    rcx,0x8
 10202a9:	add    rcx,rsi
 10202ac:	xor    r9d,r9d
 10202af:	mov    r8,rdi
 10202b2:	call   QWORD PTR [rbx+0x28]
 10202b5:	test   al,al
 10202b7:	je     0x1020619
 10202bd:	mov    DWORD PTR [rsp+0x48],0x20a
 10202c5:	mov    edx,0xc000c35c
 10202ca:	lea    rcx,[rsp+0x40]
 10202cf:	call   0x10132d0
 10202d4:	nop
 10202d5:	mov    rcx,rax
 10202d8:	call   QWORD PTR [rip+0xfffffffffffe180a]        # 0x1001ae8
 10202de:	mov    rdx,rax
 10202e1:	mov    r8,r15
 10202e4:	lea    rcx,[rbp-0x78]
 10202e8:	call   QWORD PTR [rip+0xfffffffffffe1752]        # 0x1001a40
 10202ee:	nop
 10202ef:	lea    rcx,[rsp+0x40]
 10202f4:	call   QWORD PTR [rip+0xfffffffffffe17ae]        # 0x1001aa8
 10202fa:	lea    r11,[rsp+0x40]
 10202ff:	mov    QWORD PTR [rbp-0x60],r11
 1020303:	lea    rax,[rsp+0x48]
 1020308:	mov    QWORD PTR [rsp+0x28],rax
 102030d:	lea    rax,[rbp-0x30]
 1020311:	mov    QWORD PTR [rsp+0x20],rax
 1020316:	lea    r9,[rbp-0x68]
 102031a:	xor    r8d,r8d
 102031d:	mov    rdx,QWORD PTR [rbp-0x50]
 1020321:	mov    rcx,QWORD PTR [rsp+0x68]
 1020326:	call   QWORD PTR [rip+0xfffffffffffe0d5c]        # 0x1001088
 102032c:	mov    ebx,eax
 102032e:	lea    rdx,[rbp-0x78]
 1020332:	lea    rcx,[rsp+0x40]
 1020337:	call   QWORD PTR [rip+0xfffffffffffe167b]        # 0x10019b8
 102033d:	nop
 102033e:	mov    rcx,QWORD PTR [rsi+0x8]
 1020342:	movsxd rdx,DWORD PTR [rcx+0x4]
 1020346:	lea    rcx,[rsi+0x8]
 102034a:	add    rcx,rdx
 102034d:	mov    r10,QWORD PTR [rcx]
 1020350:	xor    r9d,r9d
 1020353:	mov    r8,rax
 1020356:	mov    edx,ebx
 1020358:	call   QWORD PTR [r10+0x28]
 102035c:	xor    edi,edi
 102035e:	test   al,al
 1020360:	je     0x1020369
 1020362:	mov    WORD PTR [rbp+0x1d8],di
 1020369:	lea    rdx,[rbp-0x30]
 102036d:	lea    rcx,[rbp-0x70]
 1020371:	call   QWORD PTR [rip+0xfffffffffffe1721]        # 0x1001a98
 1020377:	jmp    0x102061b
 102037c:	call   QWORD PTR [rip+0xfffffffffffe1766]        # 0x1001ae8
 1020382:	mov    rcx,rax
 1020385:	lea    r8,[rsp+0x60]
 102038a:	mov    rdx,0xffffffff80000002
 1020391:	call   QWORD PTR [rip+0xfffffffffffe0cd9]        # 0x1001070
 1020397:	mov    edx,eax
 1020399:	mov    rax,QWORD PTR [rsi+0x8]
 102039d:	movsxd rcx,DWORD PTR [rax+0x4]
 10203a1:	add    rcx,0x8
 10203a5:	add    rcx,rsi
 10203a8:	xor    r9d,r9d
 10203ab:	mov    r8d,0xc000c356
 10203b1:	call   QWORD PTR [rbx+0x20]
 10203b4:	test   al,al
 10203b6:	je     0x102061b
 10203bc:	mov    rax,QWORD PTR [rsi+0x8]
 10203c0:	movsxd rcx,DWORD PTR [rax+0x4]
 10203c4:	mov    rbx,QWORD PTR [rcx+rsi*1+0x8]
 10203c9:	lea    rax,[rsp+0x58]
 10203ce:	mov    QWORD PTR [rsp+0x20],rax
 10203d3:	mov    r9d,r14d
 10203d6:	xor    r8d,r8d
 10203d9:	lea    rdx,[rip+0xfffffffffffe53d8]        # 0x10057b8
 10203e0:	mov    rcx,QWORD PTR [rsp+0x60]
 10203e5:	call   QWORD PTR [rip+0xfffffffffffe0c95]        # 0x1001080
 10203eb:	mov    edx,eax
 10203ed:	mov    rax,QWORD PTR [rsi+0x8]
 10203f1:	movsxd rcx,DWORD PTR [rax+0x4]
 10203f5:	add    rcx,0x8
 10203f9:	add    rcx,rsi
 10203fc:	xor    r9d,r9d
 10203ff:	mov    r8d,0xc000c357
 1020405:	call   QWORD PTR [rbx+0x20]
 1020408:	test   al,al
 102040a:	je     0x102061b
 1020410:	mov    rax,QWORD PTR [rsi+0x8]
 1020414:	movsxd rcx,DWORD PTR [rax+0x4]
 1020418:	mov    rbx,QWORD PTR [rcx+rsi*1+0x8]
 102041d:	lea    rax,[rsp+0x50]
 1020422:	mov    QWORD PTR [rsp+0x20],rax
 1020427:	mov    r9d,r14d
 102042a:	xor    r8d,r8d
 102042d:	lea    rdx,[rip+0xfffffffffffe536c]        # 0x10057a0
 1020434:	mov    rcx,QWORD PTR [rsp+0x58]
 1020439:	call   QWORD PTR [rip+0xfffffffffffe0c41]        # 0x1001080
 102043f:	mov    edx,eax
 1020441:	mov    rax,QWORD PTR [rsi+0x8]
 1020445:	movsxd rcx,DWORD PTR [rax+0x4]
 1020449:	add    rcx,0x8
 102044d:	add    rcx,rsi
 1020450:	xor    r9d,r9d
 1020453:	mov    r8d,0xc000c358
 1020459:	call   QWORD PTR [rbx+0x20]
 102045c:	test   al,al
 102045e:	je     0x102061b
 1020464:	mov    rax,QWORD PTR [rsi+0x8]
 1020468:	movsxd rcx,DWORD PTR [rax+0x4]
 102046c:	mov    rbx,QWORD PTR [rcx+rsi*1+0x8]
 1020471:	lea    rax,[rsp+0x70]
 1020476:	mov    QWORD PTR [rsp+0x20],rax
 102047b:	mov    r9d,r14d
 102047e:	xor    r8d,r8d
 1020481:	lea    rdx,[rip+0xfffffffffffe5408]        # 0x1005890
 1020488:	mov    rcx,QWORD PTR [rsp+0x50]
 102048d:	call   QWORD PTR [rip+0xfffffffffffe0bed]        # 0x1001080
 1020493:	mov    edx,eax
 1020495:	mov    rax,QWORD PTR [rsi+0x8]
 1020499:	movsxd rcx,DWORD PTR [rax+0x4]
 102049d:	add    rcx,0x8
 10204a1:	add    rcx,rsi
 10204a4:	xor    r9d,r9d
 10204a7:	mov    r8d,0xc000c359
 10204ad:	call   QWORD PTR [rbx+0x20]
 10204b0:	test   al,al
 10204b2:	je     0x102061b
 10204b8:	mov    rbx,QWORD PTR [rsp+0x70]
 10204bd:	mov    rax,QWORD PTR [rsi+0x8]
 10204c1:	movsxd rdx,DWORD PTR [rax+0x4]
 10204c5:	mov    rdi,QWORD PTR [rdx+rsi*1+0x8]
 10204ca:	lea    rcx,[r13+0x10]
 10204ce:	call   QWORD PTR [rip+0xfffffffffffe1614]        # 0x1001ae8
 10204d4:	mov    rdx,rax
 10204d7:	lea    rax,[rsp+0x78]
 10204dc:	mov    QWORD PTR [rsp+0x20],rax
 10204e1:	mov    r9d,r14d
 10204e4:	xor    r8d,r8d
 10204e7:	mov    rcx,rbx
 10204ea:	call   QWORD PTR [rip+0xfffffffffffe0b90]        # 0x1001080
 10204f0:	mov    edx,eax
 10204f2:	mov    rax,QWORD PTR [rsi+0x8]
 10204f6:	movsxd rcx,DWORD PTR [rax+0x4]
 10204fa:	add    rcx,0x8
 10204fe:	add    rcx,rsi
 1020501:	xor    r9d,r9d
 1020504:	mov    r8d,0xc000c35a
 102050a:	call   QWORD PTR [rdi+0x20]
 102050d:	test   al,al
 102050f:	je     0x1020619
 1020515:	lea    rax,[rsp+0x40]
 102051a:	mov    QWORD PTR [rbp-0x60],rax
 102051e:	lea    rdx,[rbp-0x80]
 1020522:	lea    rcx,[rsp+0x40]
 1020527:	call   QWORD PTR [rip+0xfffffffffffe148b]        # 0x10019b8
 102052d:	mov    rdi,rax
 1020530:	mov    rcx,QWORD PTR [rsp+0x78]
 1020535:	mov    rdx,QWORD PTR [rsi+0x8]
 1020539:	movsxd r8,DWORD PTR [rdx+0x4]
 102053d:	mov    rbx,QWORD PTR [r8+rsi*1+0x8]
 1020542:	lea    rax,[rsp+0x68]
 1020547:	mov    QWORD PTR [rsp+0x20],rax
 102054c:	mov    r9d,r14d
 102054f:	xor    r8d,r8d
 1020552:	lea    rdx,[rip+0xfffffffffffe53ff]        # 0x1005958
 1020559:	call   QWORD PTR [rip+0xfffffffffffe0b21]        # 0x1001080
 102055f:	mov    edx,eax
 1020561:	mov    rax,QWORD PTR [rsi+0x8]
 1020565:	movsxd rcx,DWORD PTR [rax+0x4]
 1020569:	add    rcx,0x8
 102056d:	add    rcx,rsi
 1020570:	xor    r9d,r9d
 1020573:	mov    r8,rdi
 1020576:	call   QWORD PTR [rbx+0x28]
 1020579:	test   al,al
 102057b:	je     0x1020619
 1020581:	mov    DWORD PTR [rsp+0x48],0x20a
 1020589:	mov    edx,0xc000c35c
 102058e:	lea    rcx,[rsp+0x40]
 1020593:	call   0x10132d0
 1020598:	nop
 1020599:	mov    rcx,rax
 102059c:	call   QWORD PTR [rip+0xfffffffffffe1546]        # 0x1001ae8
 10205a2:	mov    rdx,rax
 10205a5:	mov    r8,r15
 10205a8:	lea    rcx,[rbp-0x78]
 10205ac:	call   QWORD PTR [rip+0xfffffffffffe148e]        # 0x1001a40
 10205b2:	nop
 10205b3:	lea    rcx,[rsp+0x40]
 10205b8:	call   QWORD PTR [rip+0xfffffffffffe14ea]        # 0x1001aa8
 10205be:	lea    r11,[rsp+0x40]
 10205c3:	mov    QWORD PTR [rbp-0x60],r11
 10205c7:	lea    rax,[rsp+0x48]
 10205cc:	mov    QWORD PTR [rsp+0x28],rax
 10205d1:	lea    rax,[rbp-0x30]
 10205d5:	mov    QWORD PTR [rsp+0x20],rax
 10205da:	lea    r9,[rbp-0x68]
 10205de:	xor    r8d,r8d
 10205e1:	mov    rdx,QWORD PTR [rbp-0x50]
 10205e5:	mov    rcx,QWORD PTR [rsp+0x68]
 10205ea:	call   QWORD PTR [rip+0xfffffffffffe0a98]        # 0x1001088
 10205f0:	mov    ebx,eax
 10205f2:	lea    rdx,[rbp-0x78]
 10205f6:	lea    rcx,[rsp+0x40]
 10205fb:	call   QWORD PTR [rip+0xfffffffffffe13b7]        # 0x10019b8
 1020601:	nop
 1020602:	mov    rcx,QWORD PTR [rsi+0x8]
 1020606:	movsxd rdx,DWORD PTR [rcx+0x4]
 102060a:	lea    rcx,[rsi+0x8]
 102060e:	add    rcx,rdx
 1020611:	mov    r10,QWORD PTR [rcx]
 1020614:	jmp    0x1020350
 1020619:	xor    edi,edi
 102061b:	lea    rcx,[rbp-0x70]
 102061f:	call   QWORD PTR [rip+0xfffffffffffe14c3]        # 0x1001ae8
 1020625:	mov    rdx,rax
 1020628:	lea    rcx,[rsp+0x40]
 102062d:	call   0x10309c0
 1020632:	nop
 1020633:	mov    rdx,rax
 1020636:	lea    rcx,[rbp-0x70]
 102063a:	call   QWORD PTR [rip+0xfffffffffffe1460]        # 0x1001aa0
 1020640:	nop
 1020641:	lea    rcx,[rsp+0x40]
 1020646:	call   QWORD PTR [rip+0xfffffffffffe145c]        # 0x1001aa8
 102064c:	lea    rdx,[rbp-0x70]
 1020650:	mov    rcx,r12
 1020653:	call   QWORD PTR [rip+0xfffffffffffe135f]        # 0x10019b8
 1020659:	mov    DWORD PTR [rbp-0x58],0x1
 1020660:	mov    rcx,QWORD PTR [rsp+0x78]
 1020665:	test   rcx,rcx
 1020668:	je     0x1020675
 102066a:	call   QWORD PTR [rip+0xfffffffffffe09b0]        # 0x1001020
 1020670:	mov    QWORD PTR [rsp+0x78],rdi
 1020675:	mov    rcx,QWORD PTR [rsp+0x68]
 102067a:	test   rcx,rcx
 102067d:	je     0x102068a
 102067f:	call   QWORD PTR [rip+0xfffffffffffe099b]        # 0x1001020
 1020685:	mov    QWORD PTR [rsp+0x68],rdi
 102068a:	mov    rcx,QWORD PTR [rsp+0x70]
 102068f:	test   rcx,rcx
 1020692:	je     0x102069f
 1020694:	call   QWORD PTR [rip+0xfffffffffffe0986]        # 0x1001020
 102069a:	mov    QWORD PTR [rsp+0x70],rdi
 102069f:	mov    rcx,QWORD PTR [rsp+0x50]
 10206a4:	test   rcx,rcx
 10206a7:	je     0x10206b4
 10206a9:	call   QWORD PTR [rip+0xfffffffffffe0971]        # 0x1001020
 10206af:	mov    QWORD PTR [rsp+0x50],rdi
 10206b4:	mov    rcx,QWORD PTR [rsp+0x58]
 10206b9:	test   rcx,rcx
 10206bc:	je     0x10206c9
 10206be:	call   QWORD PTR [rip+0xfffffffffffe095c]        # 0x1001020
 10206c4:	mov    QWORD PTR [rsp+0x58],rdi
 10206c9:	mov    rcx,QWORD PTR [rsp+0x60]
 10206ce:	test   rcx,rcx
 10206d1:	je     0x10206de
 10206d3:	call   QWORD PTR [rip+0xfffffffffffe0947]        # 0x1001020
 10206d9:	mov    QWORD PTR [rsp+0x60],rdi
 10206de:	lea    rcx,[rbp-0x78]
 10206e2:	call   QWORD PTR [rip+0xfffffffffffe13c0]        # 0x1001aa8
 10206e8:	nop
 10206e9:	lea    rcx,[rbp-0x80]
 10206ed:	call   QWORD PTR [rip+0xfffffffffffe13b5]        # 0x1001aa8
 10206f3:	nop
 10206f4:	lea    rcx,[rbp-0x70]
 10206f8:	call   QWORD PTR [rip+0xfffffffffffe13aa]        # 0x1001aa8
 10206fe:	mov    rax,r12
 1020701:	mov    rcx,QWORD PTR [rbp+0x1e0]
 1020708:	xor    rcx,rsp
 102070b:	call   0x103ff40
 1020710:	add    rsp,0x2f8
 1020717:	pop    r15
 1020719:	pop    r14
 102071b:	pop    r13
 102071d:	pop    r12
 102071f:	pop    rdi
 1020720:	pop    rsi
 1020721:	pop    rbx
 1020722:	pop    rbp
 1020723:	ret    
 1020724:	int3   
 1020725:	int3   
 1020726:	int3   
 1020727:	int3   
 1020728:	int3   
 1020729:	int3   
 102072a:	int3   
 102072b:	int3   
 102072c:	int3   
 102072d:	int3   
 102072e:	int3   
 102072f:	int3   
 1020730:	mov    rax,rsp
 1020733:	mov    QWORD PTR [rax+0x10],rdx
 1020737:	push   rbp
 1020738:	push   rsi
 1020739:	push   rdi
 102073a:	sub    rsp,0x50
 102073e:	mov    QWORD PTR [rax-0x20],0xfffffffffffffffe
 1020746:	mov    QWORD PTR [rax+0x18],rbx
 102074a:	movzx  edi,r9b
 102074e:	mov    rbx,r8
 1020751:	mov    rsi,rdx
 1020754:	mov    rbp,rcx
 1020757:	mov    DWORD PTR [rax-0x28],0x0
 102075e:	lea    rcx,[rax+0x8]
 1020762:	call   QWORD PTR [rip+0xfffffffffffe1358]        # 0x1001ac0
 1020768:	nop
 1020769:	mov    rdx,rbx
 102076c:	mov    rcx,QWORD PTR [rbp+0xe8]
 1020773:	call   0x1012fe0
 1020778:	mov    r11,rax
 102077b:	test   rax,rax
 102077e:	jne    0x102079d
 1020780:	lea    rdx,[rip+0xfffffffffffe1689]        # 0x1001e10
 1020787:	mov    rcx,rsi
 102078a:	call   QWORD PTR [rip+0xfffffffffffe1320]        # 0x1001ab0
 1020790:	mov    DWORD PTR [rsp+0x40],0x1
 1020798:	jmp    0x1020963
 102079d:	cmp    DWORD PTR [rbp+0x24],0x9
 10207a1:	jge    0x10208ad
 10207a7:	or     rax,0xffffffffffffffff
 10207ab:	nop    DWORD PTR [rax+rax*1+0x0]
 10207b0:	inc    rax
 10207b3:	cmp    WORD PTR [rbx+rax*2],0x0
 10207b8:	jne    0x10207b0
 10207ba:	lea    r8,[rip+0xfffffffffffe4ff7]        # 0x10057b8
 10207c1:	lea    rcx,[rsp+0x70]
 10207c6:	test   rax,rax
 10207c9:	jne    0x102085c
 10207cf:	lea    rax,[rip+0xfffffffffffe29a2]        # 0x1003178
 10207d6:	test   dil,dil
 10207d9:	je     0x102081f
 10207db:	cmp    BYTE PTR [r11+0x8],0x0
 10207e0:	jne    0x1020800
 10207e2:	mov    QWORD PTR [rsp+0x20],rax
 10207e7:	lea    r9,[rip+0xfffffffffffe4fb2]        # 0x10057a0
 10207ee:	lea    rdx,[rip+0xfffffffffffe4fdb]        # 0x10057d0
 10207f5:	call   QWORD PTR [rip+0xfffffffffffe1245]        # 0x1001a40
 10207fb:	jmp    0x102094d
 1020800:	mov    QWORD PTR [rsp+0x28],rax
 1020805:	lea    rax,[rip+0xfffffffffffe4f94]        # 0x10057a0
 102080c:	lea    r9,[rip+0xfffffffffffe4ff5]        # 0x1005808
 1020813:	lea    rdx,[rip+0xfffffffffffe5006]        # 0x1005820
 102081a:	jmp    0x102090f
 102081f:	cmp    BYTE PTR [r11+0x8],0x0
 1020824:	jne    0x1020844
 1020826:	mov    QWORD PTR [rsp+0x20],rax
 102082b:	lea    r9,[rip+0xfffffffffffe4f6e]        # 0x10057a0
 1020832:	lea    rdx,[rip+0xfffffffffffe5027]        # 0x1005860
 1020839:	call   QWORD PTR [rip+0xfffffffffffe1201]        # 0x1001a40
 102083f:	jmp    0x102094d
 1020844:	mov    QWORD PTR [rsp+0x28],rax
 1020849:	lea    rax,[rip+0xfffffffffffe4f50]        # 0x10057a0
 1020850:	lea    r9,[rip+0xfffffffffffe4fb1]        # 0x1005808
 1020857:	jmp    0x1020908
 102085c:	lea    rax,[rip+0xfffffffffffe502d]        # 0x1005890
 1020863:	test   dil,dil
 1020866:	je     0x1020898
 1020868:	cmp    BYTE PTR [r11+0x8],0x0
 102086d:	jne    0x1020887
 102086f:	mov    QWORD PTR [rsp+0x28],rbx
 1020874:	lea    r9,[rip+0xfffffffffffe4f25]        # 0x10057a0
 102087b:	lea    rdx,[rip+0xfffffffffffe4f9e]        # 0x1005820
 1020882:	jmp    0x102090f
 1020887:	mov    QWORD PTR [rsp+0x30],rbx
 102088c:	lea    rdx,[rip+0xfffffffffffe502d]        # 0x10058c0
 1020893:	jmp    0x102092f
 1020898:	cmp    BYTE PTR [r11+0x8],0x0
 102089d:	jne    0x10208a6
 102089f:	mov    QWORD PTR [rsp+0x28],rbx
 10208a4:	jmp    0x1020901
 10208a6:	mov    QWORD PTR [rsp+0x30],rbx
 10208ab:	jmp    0x1020928
 10208ad:	lea    r8,[rip+0xfffffffffffe4f04]        # 0x10057b8
 10208b4:	lea    rcx,[rsp+0x70]
 10208b9:	test   dil,dil
 10208bc:	je     0x10208eb
 10208be:	cmp    BYTE PTR [rax+0x8],0x0
 10208c2:	mov    rax,QWORD PTR [rax+0x10]
 10208c6:	jne    0x10208d6
 10208c8:	mov    QWORD PTR [rsp+0x28],rax
 10208cd:	lea    rax,[rip+0xfffffffffffe4fbc]        # 0x1005890
 10208d4:	jmp    0x1020874
 10208d6:	mov    QWORD PTR [rsp+0x30],rax
 10208db:	lea    rax,[rip+0xfffffffffffe4fae]        # 0x1005890
 10208e2:	lea    rdx,[rip+0xfffffffffffe4fd7]        # 0x10058c0
 10208e9:	jmp    0x102092f
 10208eb:	cmp    BYTE PTR [rax+0x8],0x0
 10208ef:	mov    rax,QWORD PTR [rax+0x10]
 10208f3:	jne    0x102091c
 10208f5:	mov    QWORD PTR [rsp+0x28],rax
 10208fa:	lea    rax,[rip+0xfffffffffffe4f8f]        # 0x1005890
 1020901:	lea    r9,[rip+0xfffffffffffe4e98]        # 0x10057a0
 1020908:	lea    rdx,[rip+0xfffffffffffe4f69]        # 0x1005878
 102090f:	mov    QWORD PTR [rsp+0x20],rax
 1020914:	call   QWORD PTR [rip+0xfffffffffffe1126]        # 0x1001a40
 102091a:	jmp    0x102094d
 102091c:	mov    QWORD PTR [rsp+0x30],rax
 1020921:	lea    rax,[rip+0xfffffffffffe4f68]        # 0x1005890
 1020928:	lea    rdx,[rip+0xfffffffffffe4fd9]        # 0x1005908
 102092f:	mov    QWORD PTR [rsp+0x28],rax
 1020934:	lea    rax,[rip+0xfffffffffffe4e65]        # 0x10057a0
 102093b:	mov    QWORD PTR [rsp+0x20],rax
 1020940:	lea    r9,[rip+0xfffffffffffe4ec1]        # 0x1005808
 1020947:	call   QWORD PTR [rip+0xfffffffffffe10f3]        # 0x1001a40
 102094d:	lea    rdx,[rsp+0x70]
 1020952:	mov    rcx,rsi
 1020955:	call   QWORD PTR [rip+0xfffffffffffe105d]        # 0x10019b8
 102095b:	mov    DWORD PTR [rsp+0x40],0x1
 1020963:	lea    rcx,[rsp+0x70]
 1020968:	call   QWORD PTR [rip+0xfffffffffffe113a]        # 0x1001aa8
 102096e:	mov    rax,rsi
 1020971:	mov    rbx,QWORD PTR [rsp+0x80]
 1020979:	add    rsp,0x50
 102097d:	pop    rdi
 102097e:	pop    rsi
 102097f:	pop    rbp
 1020980:	ret    
 1020981:	int3   
 1020982:	int3   
 1020983:	int3   
 1020984:	int3   
 1020985:	int3   
 1020986:	int3   
 1020987:	int3   
 1020988:	int3   
 1020989:	int3   
 102098a:	int3   
 102098b:	int3   
 102098c:	int3   
 102098d:	int3   
 102098e:	int3   
 102098f:	int3   
 1020990:	mov    QWORD PTR [rsp+0x8],rcx
 1020995:	push   rbp
 1020996:	push   rsi
 1020997:	push   rdi
 1020998:	push   r12
 102099a:	push   r13
 102099c:	push   r14
 102099e:	push   r15
 10209a0:	lea    rbp,[rsp-0x27]
 10209a5:	sub    rsp,0xb0
 10209ac:	mov    QWORD PTR [rbp+0x1f],0xfffffffffffffffe
 10209b4:	mov    QWORD PTR [rsp+0xf8],rbx
 10209bc:	mov    r12,rdx
 10209bf:	mov    rsi,rcx
 10209c2:	xor    edi,edi
 10209c4:	mov    DWORD PTR [rbp-0x61],edi
 10209c7:	xor    bl,bl
 10209c9:	lea    rcx,[rbp-0x69]
 10209cd:	call   QWORD PTR [rip+0xfffffffffffe10ed]        # 0x1001ac0
 10209d3:	nop
 10209d4:	lea    edx,[rdi+0x3b]
 10209d7:	xor    r8d,r8d
 10209da:	mov    rcx,r12
 10209dd:	call   QWORD PTR [rip+0xfffffffffffe0f75]        # 0x1001958
 10209e3:	mov    r14d,eax
 10209e6:	mov    DWORD PTR [rbp+0x77],eax
 10209e9:	cmp    eax,0xffffffff
 10209ec:	je     0x1020f20
 10209f2:	lea    r8d,[rdi+0x1]
 10209f6:	lea    rdx,[rbp+0x7f]
 10209fa:	mov    rcx,r12
 10209fd:	call   QWORD PTR [rip+0xfffffffffffe0f25]        # 0x1001928
 1020a03:	mov    rbx,rax
 1020a06:	mov    rcx,rax
 1020a09:	call   QWORD PTR [rip+0xfffffffffffe10e1]        # 0x1001af0
 1020a0f:	cmp    eax,0x1
 1020a12:	jne    0x1020a29
 1020a14:	xor    edx,edx
 1020a16:	mov    rcx,rbx
 1020a19:	call   QWORD PTR [rip+0xfffffffffffe0fb1]        # 0x10019d0
 1020a1f:	cmp    ax,0x3b
 1020a23:	jne    0x1020a29
 1020a25:	xor    bl,bl
 1020a27:	jmp    0x1020a2b
 1020a29:	mov    bl,0x1
 1020a2b:	lea    rcx,[rbp+0x7f]
 1020a2f:	call   QWORD PTR [rip+0xfffffffffffe1073]        # 0x1001aa8
 1020a35:	test   bl,bl
 1020a37:	je     0x1020a47
 1020a39:	mov    edx,0x3b
 1020a3e:	mov    rcx,r12
 1020a41:	call   QWORD PTR [rip+0xfffffffffffe0f09]        # 0x1001950
 1020a47:	lea    ebx,[r14+0x1]
 1020a4b:	mov    edx,0x3b
 1020a50:	mov    r8d,ebx
 1020a53:	mov    rcx,r12
 1020a56:	call   QWORD PTR [rip+0xfffffffffffe0efc]        # 0x1001958
 1020a5c:	mov    r13d,eax
 1020a5f:	cmp    eax,0xffffffff
 1020a62:	je     0x1020ef6
 1020a68:	nop    DWORD PTR [rax+rax*1+0x0]
 1020a70:	mov    r9d,r13d
 1020a73:	sub    r9d,ebx
 1020a76:	mov    r8d,ebx
 1020a79:	lea    rdx,[rbp+0x17]
 1020a7d:	mov    rcx,r12
 1020a80:	call   QWORD PTR [rip+0xfffffffffffe0e92]        # 0x1001918
 1020a86:	nop
 1020a87:	mov    rdx,rax
 1020a8a:	lea    rcx,[rbp-0x69]
 1020a8e:	call   QWORD PTR [rip+0xfffffffffffe100c]        # 0x1001aa0
 1020a94:	nop
 1020a95:	lea    rcx,[rbp+0x17]
 1020a99:	call   QWORD PTR [rip+0xfffffffffffe1009]        # 0x1001aa8
 1020a9f:	lea    rcx,[rbp-0x69]
 1020aa3:	call   QWORD PTR [rip+0xfffffffffffe0fcf]        # 0x1001a78
 1020aa9:	lea    rcx,[rbp-0x69]
 1020aad:	call   QWORD PTR [rip+0xfffffffffffe0fbd]        # 0x1001a70
 1020ab3:	data16 data16 data16 data16 nop WORD PTR [rax+rax*1+0x0]
 1020ac0:	lea    r8,[rip+0xfffffffffffe4cc5]        # 0x100578c
 1020ac7:	lea    rdx,[rip+0xfffffffffffe4cc2]        # 0x1005790
 1020ace:	lea    rcx,[rbp-0x69]
 1020ad2:	call   QWORD PTR [rip+0xfffffffffffe0ed8]        # 0x10019b0
 1020ad8:	test   eax,eax
 1020ada:	jne    0x1020ac0
 1020adc:	nop    DWORD PTR [rax+0x0]
 1020ae0:	lea    r8,[rip+0xfffffffffffe4ca5]        # 0x100578c
 1020ae7:	lea    rdx,[rip+0xfffffffffffe4caa]        # 0x1005798
 1020aee:	lea    rcx,[rbp-0x69]
 1020af2:	call   QWORD PTR [rip+0xfffffffffffe0eb8]        # 0x10019b0
 1020af8:	test   eax,eax
 1020afa:	jne    0x1020ae0
 1020afc:	lea    edx,[rax+0x3d]
 1020aff:	xor    r8d,r8d
 1020b02:	lea    rcx,[rbp-0x69]
 1020b06:	call   QWORD PTR [rip+0xfffffffffffe0e4c]        # 0x1001958
 1020b0c:	mov    ebx,eax
 1020b0e:	lea    rcx,[rbp-0x59]
 1020b12:	call   QWORD PTR [rip+0xfffffffffffe0fa8]        # 0x1001ac0
 1020b18:	nop
 1020b19:	lea    rcx,[rbp+0x7f]
 1020b1d:	call   QWORD PTR [rip+0xfffffffffffe0f9d]        # 0x1001ac0
 1020b23:	nop
 1020b24:	cmp    ebx,0xffffffff
 1020b27:	je     0x1020ebb
 1020b2d:	mov    r8d,ebx
 1020b30:	lea    rdx,[rbp-0x39]
 1020b34:	lea    rcx,[rbp-0x69]
 1020b38:	call   QWORD PTR [rip+0xfffffffffffe0f0a]        # 0x1001a48
 1020b3e:	nop
 1020b3f:	mov    rdx,rax
 1020b42:	lea    rcx,[rbp-0x59]
 1020b46:	call   QWORD PTR [rip+0xfffffffffffe0f54]        # 0x1001aa0
 1020b4c:	nop
 1020b4d:	lea    rcx,[rbp-0x39]
 1020b51:	call   QWORD PTR [rip+0xfffffffffffe0f51]        # 0x1001aa8
 1020b57:	lea    r8d,[rbx+0x1]
 1020b5b:	lea    rdx,[rbp-0x9]
 1020b5f:	lea    rcx,[rbp-0x69]
 1020b63:	call   QWORD PTR [rip+0xfffffffffffe0db7]        # 0x1001920
 1020b69:	nop
 1020b6a:	mov    rdx,rax
 1020b6d:	lea    rcx,[rbp+0x7f]
 1020b71:	call   QWORD PTR [rip+0xfffffffffffe0f29]        # 0x1001aa0
 1020b77:	nop
 1020b78:	lea    rcx,[rbp-0x9]
 1020b7c:	call   QWORD PTR [rip+0xfffffffffffe0f26]        # 0x1001aa8
 1020b82:	lea    rcx,[rbp+0x7f]
 1020b86:	call   QWORD PTR [rip+0xfffffffffffe0f5c]        # 0x1001ae8
 1020b8c:	mov    r8,rax
 1020b8f:	lea    rdx,[rbp-0x29]
 1020b93:	mov    rcx,rsi
 1020b96:	call   0x1021580
 1020b9b:	nop
 1020b9c:	mov    rdx,rax
 1020b9f:	lea    rcx,[rbp+0x7f]
 1020ba3:	call   QWORD PTR [rip+0xfffffffffffe0ef7]        # 0x1001aa0
 1020ba9:	nop
 1020baa:	lea    rcx,[rbp-0x29]
 1020bae:	call   QWORD PTR [rip+0xfffffffffffe0ef4]        # 0x1001aa8
 1020bb4:	mov    r8d,0x2
 1020bba:	lea    rdx,[rbp-0x49]
 1020bbe:	lea    rcx,[rbp+0x7f]
 1020bc2:	call   QWORD PTR [rip+0xfffffffffffe0e80]        # 0x1001a48
 1020bc8:	nop
 1020bc9:	lea    rdx,[rip+0xfffffffffffe4bac]        # 0x100577c
 1020bd0:	mov    rcx,rax
 1020bd3:	call   QWORD PTR [rip+0xfffffffffffe0e27]        # 0x1001a00
 1020bd9:	test   eax,eax
 1020bdb:	sete   bl
 1020bde:	lea    rcx,[rbp-0x49]
 1020be2:	call   QWORD PTR [rip+0xfffffffffffe0ec0]        # 0x1001aa8
 1020be8:	lea    rcx,[rbp+0x7f]
 1020bec:	test   bl,bl
 1020bee:	je     0x1020c4a
 1020bf0:	call   QWORD PTR [rip+0xfffffffffffe0efa]        # 0x1001af0
 1020bf6:	lea    r9d,[rax-0x4]
 1020bfa:	mov    r8d,0x2
 1020c00:	lea    rdx,[rbp+0x7]
 1020c04:	lea    rcx,[rbp+0x7f]
 1020c08:	call   QWORD PTR [rip+0xfffffffffffe0d0a]        # 0x1001918
 1020c0e:	nop
 1020c0f:	mov    rcx,rax
 1020c12:	call   QWORD PTR [rip+0xfffffffffffe0ed0]        # 0x1001ae8
 1020c18:	mov    r8,rax
 1020c1b:	lea    rdx,[rbp-0x19]
 1020c1f:	mov    rcx,rsi
 1020c22:	call   0x101e940
 1020c27:	nop
 1020c28:	mov    rdx,rax
 1020c2b:	lea    rcx,[rbp+0x7f]
 1020c2f:	call   QWORD PTR [rip+0xfffffffffffe0e6b]        # 0x1001aa0
 1020c35:	nop
 1020c36:	lea    rcx,[rbp-0x19]
 1020c3a:	call   QWORD PTR [rip+0xfffffffffffe0e68]        # 0x1001aa8
 1020c40:	nop
 1020c41:	lea    rcx,[rbp+0x7]
 1020c45:	jmp    0x1020cd7
 1020c4a:	mov    r8d,0x2
 1020c50:	lea    rdx,[rbp-0x41]
 1020c54:	call   QWORD PTR [rip+0xfffffffffffe0dee]        # 0x1001a48
 1020c5a:	nop
 1020c5b:	lea    rdx,[rip+0xfffffffffffe4b22]        # 0x1005784
 1020c62:	mov    rcx,rax
 1020c65:	call   QWORD PTR [rip+0xfffffffffffe0d95]        # 0x1001a00
 1020c6b:	test   eax,eax
 1020c6d:	sete   bl
 1020c70:	lea    rcx,[rbp-0x41]
 1020c74:	call   QWORD PTR [rip+0xfffffffffffe0e2e]        # 0x1001aa8
 1020c7a:	test   bl,bl
 1020c7c:	je     0x1020cdd
 1020c7e:	lea    rcx,[rbp+0x7f]
 1020c82:	call   QWORD PTR [rip+0xfffffffffffe0e68]        # 0x1001af0
 1020c88:	lea    r9d,[rax-0x4]
 1020c8c:	mov    r8d,0x2
 1020c92:	lea    rdx,[rbp-0x21]
 1020c96:	lea    rcx,[rbp+0x7f]
 1020c9a:	call   QWORD PTR [rip+0xfffffffffffe0c78]        # 0x1001918
 1020ca0:	nop
 1020ca1:	mov    rcx,rax
 1020ca4:	call   QWORD PTR [rip+0xfffffffffffe0e3e]        # 0x1001ae8
 1020caa:	mov    r8,rax
 1020cad:	lea    rdx,[rbp-0x31]
 1020cb1:	mov    rcx,rsi
 1020cb4:	call   0x101efc0
 1020cb9:	nop
 1020cba:	mov    rdx,rax
 1020cbd:	lea    rcx,[rbp+0x7f]
 1020cc1:	call   QWORD PTR [rip+0xfffffffffffe0dd9]        # 0x1001aa0
 1020cc7:	nop
 1020cc8:	lea    rcx,[rbp-0x31]
 1020ccc:	call   QWORD PTR [rip+0xfffffffffffe0dd6]        # 0x1001aa8
 1020cd2:	nop
 1020cd3:	lea    rcx,[rbp-0x21]
 1020cd7:	call   QWORD PTR [rip+0xfffffffffffe0dcb]        # 0x1001aa8
 1020cdd:	lea    rcx,[rbp+0x7f]
 1020ce1:	call   QWORD PTR [rip+0xfffffffffffe0e01]        # 0x1001ae8
 1020ce7:	mov    rdx,rax
 1020cea:	lea    rcx,[rbp-0x11]
 1020cee:	call   0x10353c0
 1020cf3:	nop
 1020cf4:	mov    rdx,rax
 1020cf7:	lea    rcx,[rbp+0x7f]
 1020cfb:	call   QWORD PTR [rip+0xfffffffffffe0d9f]        # 0x1001aa0
 1020d01:	nop
 1020d02:	lea    rcx,[rbp-0x11]
 1020d06:	call   QWORD PTR [rip+0xfffffffffffe0d9c]        # 0x1001aa8
 1020d0c:	mov    r8d,0x1
 1020d12:	lea    rdx,[rbp+0xf]
 1020d16:	lea    rcx,[rbp+0x7f]
 1020d1a:	call   QWORD PTR [rip+0xfffffffffffe0d28]        # 0x1001a48
 1020d20:	mov    rbx,rax
 1020d23:	or     edi,0x1
 1020d26:	mov    DWORD PTR [rbp-0x61],edi
 1020d29:	mov    rcx,rax
 1020d2c:	call   QWORD PTR [rip+0xfffffffffffe0dbe]        # 0x1001af0
 1020d32:	cmp    eax,0x1
 1020d35:	jne    0x1020d88
 1020d37:	xor    edx,edx
 1020d39:	mov    rcx,rbx
 1020d3c:	call   QWORD PTR [rip+0xfffffffffffe0c8e]        # 0x10019d0
 1020d42:	cmp    ax,0x25
 1020d46:	jne    0x1020d88
 1020d48:	mov    r8d,0x1
 1020d4e:	lea    rdx,[rbp-0x1]
 1020d52:	lea    rcx,[rbp+0x7f]
 1020d56:	call   QWORD PTR [rip+0xfffffffffffe0bcc]        # 0x1001928
 1020d5c:	mov    rbx,rax
 1020d5f:	or     edi,0x2
 1020d62:	mov    DWORD PTR [rbp-0x61],edi
 1020d65:	mov    rcx,rax
 1020d68:	call   QWORD PTR [rip+0xfffffffffffe0d82]        # 0x1001af0
 1020d6e:	cmp    eax,0x1
 1020d71:	jne    0x1020d88
 1020d73:	xor    edx,edx
 1020d75:	mov    rcx,rbx
 1020d78:	call   QWORD PTR [rip+0xfffffffffffe0c52]        # 0x10019d0
 1020d7e:	cmp    ax,0x25
 1020d82:	jne    0x1020d88
 1020d84:	mov    bl,0x1
 1020d86:	jmp    0x1020d8a
 1020d88:	xor    bl,bl
 1020d8a:	test   dil,0x2
 1020d8e:	je     0x1020da1
 1020d90:	and    edi,0xfffffffd
 1020d93:	mov    DWORD PTR [rbp-0x61],edi
 1020d96:	lea    rcx,[rbp-0x1]
 1020d9a:	call   QWORD PTR [rip+0xfffffffffffe0d08]        # 0x1001aa8
 1020da0:	nop
 1020da1:	test   dil,0x1
 1020da5:	je     0x1020db7
 1020da7:	and    edi,0xfffffffe
 1020daa:	mov    DWORD PTR [rbp-0x61],edi
 1020dad:	lea    rcx,[rbp+0xf]
 1020db1:	call   QWORD PTR [rip+0xfffffffffffe0cf1]        # 0x1001aa8
 1020db7:	test   bl,bl
 1020db9:	je     0x1020e95
 1020dbf:	lea    rcx,[rbp-0x51]
 1020dc3:	call   QWORD PTR [rip+0xfffffffffffe0cf7]        # 0x1001ac0
 1020dc9:	nop
 1020dca:	lea    rcx,[rbp+0x7f]
 1020dce:	call   QWORD PTR [rip+0xfffffffffffe0d14]        # 0x1001ae8
 1020dd4:	mov    r14,rax
 1020dd7:	lea    r15,[rsi+0xf0]
 1020dde:	mov    rcx,rax
 1020de1:	call   0x103fa26
 1020de6:	mov    esi,eax
 1020de8:	xor    edx,edx
 1020dea:	div    DWORD PTR [r15+0x10]
 1020dee:	mov    rax,QWORD PTR [r15+0x8]
 1020df2:	test   rax,rax
 1020df5:	je     0x1020e62
 1020df7:	mov    rbx,QWORD PTR [rax+rdx*8]
 1020dfb:	test   rbx,rbx
 1020dfe:	je     0x1020e62
 1020e00:	cmp    DWORD PTR [rbx+0x18],esi
 1020e03:	jne    0x1020e1c
 1020e05:	mov    rdx,r14
 1020e08:	mov    rcx,rbx
 1020e0b:	call   QWORD PTR [rip+0xfffffffffffe0bef]        # 0x1001a00
 1020e11:	xor    ecx,ecx
 1020e13:	test   eax,eax
 1020e15:	sete   cl
 1020e18:	test   ecx,ecx
 1020e1a:	jne    0x1020e22
 1020e1c:	mov    rbx,QWORD PTR [rbx+0x10]
 1020e20:	jmp    0x1020dfb
 1020e22:	lea    rdx,[rbx+0x8]
 1020e26:	lea    rcx,[rbp-0x51]
 1020e2a:	call   QWORD PTR [rip+0xfffffffffffe0c70]        # 0x1001aa0
 1020e30:	lea    rcx,[rbp+0x7f]
 1020e34:	call   QWORD PTR [rip+0xfffffffffffe0cae]        # 0x1001ae8
 1020e3a:	mov    rdx,rax
 1020e3d:	mov    rcx,r15
 1020e40:	call   0x100ea00
 1020e45:	mov    rbx,rax
 1020e48:	lea    rcx,[rbp-0x59]
 1020e4c:	call   QWORD PTR [rip+0xfffffffffffe0c96]        # 0x1001ae8
 1020e52:	mov    rdx,rax
 1020e55:	mov    rcx,r15
 1020e58:	call   0x100ea00
 1020e5d:	mov    rdx,rbx
 1020e60:	jmp    0x1020e7b
 1020e62:	lea    rcx,[rbp-0x59]
 1020e66:	call   QWORD PTR [rip+0xfffffffffffe0c7c]        # 0x1001ae8
 1020e6c:	mov    rdx,rax
 1020e6f:	mov    rcx,r15
 1020e72:	call   0x100ea00
 1020e77:	lea    rdx,[rbp+0x7f]
 1020e7b:	mov    rcx,rax
 1020e7e:	call   QWORD PTR [rip+0xfffffffffffe0c1c]        # 0x1001aa0
 1020e84:	nop
 1020e85:	lea    rcx,[rbp-0x51]
 1020e89:	call   QWORD PTR [rip+0xfffffffffffe0c19]        # 0x1001aa8
 1020e8f:	mov    rsi,QWORD PTR [rbp+0x67]
 1020e93:	jmp    0x1020ebb
 1020e95:	lea    rcx,[rbp-0x59]
 1020e99:	call   QWORD PTR [rip+0xfffffffffffe0c49]        # 0x1001ae8
 1020e9f:	mov    rdx,rax
 1020ea2:	lea    rcx,[rsi+0xf0]
 1020ea9:	call   0x100ea00
 1020eae:	mov    rcx,rax
 1020eb1:	lea    rdx,[rbp+0x7f]
 1020eb5:	call   QWORD PTR [rip+0xfffffffffffe0be5]        # 0x1001aa0
 1020ebb:	lea    ebx,[r13+0x1]
 1020ebf:	mov    edx,0x3b
 1020ec4:	mov    r8d,ebx
 1020ec7:	mov    rcx,r12
 1020eca:	call   QWORD PTR [rip+0xfffffffffffe0a88]        # 0x1001958
 1020ed0:	mov    r13d,eax
 1020ed3:	lea    rcx,[rbp+0x7f]
 1020ed7:	call   QWORD PTR [rip+0xfffffffffffe0bcb]        # 0x1001aa8
 1020edd:	nop
 1020ede:	lea    rcx,[rbp-0x59]
 1020ee2:	call   QWORD PTR [rip+0xfffffffffffe0bc0]        # 0x1001aa8
 1020ee8:	cmp    r13d,0xffffffff
 1020eec:	jne    0x1020a70
 1020ef2:	mov    r14d,DWORD PTR [rbp+0x77]
 1020ef6:	mov    r8d,r14d
 1020ef9:	lea    rdx,[rbp+0x77]
 1020efd:	mov    rcx,r12
 1020f00:	call   QWORD PTR [rip+0xfffffffffffe0b42]        # 0x1001a48
 1020f06:	nop
 1020f07:	mov    rdx,rax
 1020f0a:	mov    rcx,r12
 1020f0d:	call   QWORD PTR [rip+0xfffffffffffe0b8d]        # 0x1001aa0
 1020f13:	nop
 1020f14:	lea    rcx,[rbp+0x77]
 1020f18:	call   QWORD PTR [rip+0xfffffffffffe0b8a]        # 0x1001aa8
 1020f1e:	mov    bl,0x1
 1020f20:	lea    rcx,[rbp-0x69]
 1020f24:	call   QWORD PTR [rip+0xfffffffffffe0b7e]        # 0x1001aa8
 1020f2a:	movzx  eax,bl
 1020f2d:	mov    rbx,QWORD PTR [rsp+0xf8]
 1020f35:	add    rsp,0xb0
 1020f3c:	pop    r15
 1020f3e:	pop    r14
 1020f40:	pop    r13
 1020f42:	pop    r12
 1020f44:	pop    rdi
 1020f45:	pop    rsi
 1020f46:	pop    rbp
 1020f47:	ret    
 1020f48:	int3   
 1020f49:	int3   
 1020f4a:	int3   
 1020f4b:	int3   
 1020f4c:	int3   
 1020f4d:	int3   
 1020f4e:	int3   
 1020f4f:	int3   
 1020f50:	mov    QWORD PTR [rsp+0x20],r9
 1020f55:	mov    QWORD PTR [rsp+0x10],rdx
 1020f5a:	push   rbp
 1020f5b:	push   rsi
 1020f5c:	push   rdi
 1020f5d:	push   r12
 1020f5f:	push   r13
 1020f61:	push   r14
 1020f63:	push   r15
 1020f65:	mov    rbp,rsp
 1020f68:	sub    rsp,0x50
 1020f6c:	mov    QWORD PTR [rbp-0x8],0xfffffffffffffffe
 1020f74:	mov    QWORD PTR [rsp+0xa0],rbx
 1020f7c:	mov    rbx,r9
 1020f7f:	mov    rsi,rdx
 1020f82:	mov    r14,rcx
 1020f85:	mov    DWORD PTR [rbp-0x20],0x0
 1020f8c:	mov    rdx,r8
 1020f8f:	mov    rcx,rsi
 1020f92:	call   QWORD PTR [rip+0xfffffffffffe0b18]        # 0x1001ab0
 1020f98:	mov    DWORD PTR [rbp-0x20],0x1
 1020f9f:	lea    rcx,[rbp-0x10]
 1020fa3:	call   QWORD PTR [rip+0xfffffffffffe0b17]        # 0x1001ac0
 1020fa9:	nop
 1020faa:	lea    rcx,[rbp+0x40]
 1020fae:	call   QWORD PTR [rip+0xfffffffffffe0b0c]        # 0x1001ac0
 1020fb4:	nop
 1020fb5:	mov    r8d,DWORD PTR [r14+0x24]
 1020fb9:	lea    rdx,[rip+0xfffffffffffe3290]        # 0x1004250
 1020fc0:	lea    rcx,[rbp-0x10]
 1020fc4:	call   QWORD PTR [rip+0xfffffffffffe0a76]        # 0x1001a40
 1020fca:	lea    rcx,[r14+0x10]
 1020fce:	call   QWORD PTR [rip+0xfffffffffffe0b14]        # 0x1001ae8
 1020fd4:	mov    r8,rax
 1020fd7:	lea    rdx,[rip+0xfffffffffffe49da]        # 0x10059b8
 1020fde:	mov    rcx,rsi
 1020fe1:	call   QWORD PTR [rip+0xfffffffffffe09c9]        # 0x10019b0
 1020fe7:	mov    rcx,QWORD PTR [r14+0xd8]
 1020fee:	add    rcx,0x78
 1020ff2:	call   QWORD PTR [rip+0xfffffffffffe0af0]        # 0x1001ae8
 1020ff8:	mov    r8,rax
 1020ffb:	lea    rdx,[rip+0xfffffffffffe49ce]        # 0x10059d0
 1021002:	mov    rcx,rsi
 1021005:	call   QWORD PTR [rip+0xfffffffffffe09a5]        # 0x10019b0
 102100b:	mov    rcx,QWORD PTR [r14+0xd8]
 1021012:	add    rcx,0x88
 1021019:	call   QWORD PTR [rip+0xfffffffffffe0ac9]        # 0x1001ae8
 102101f:	mov    r8,rax
 1021022:	lea    rdx,[rip+0xfffffffffffe49c7]        # 0x10059f0
 1021029:	mov    rcx,rsi
 102102c:	call   QWORD PTR [rip+0xfffffffffffe097e]        # 0x10019b0
 1021032:	mov    r15,QWORD PTR [rbp+0x60]
 1021036:	mov    r8,r15
 1021039:	lea    rdx,[rip+0xfffffffffffe3f28]        # 0x1004f68
 1021040:	mov    rcx,rsi
 1021043:	call   QWORD PTR [rip+0xfffffffffffe0967]        # 0x10019b0
 1021049:	mov    r8,r15
 102104c:	lea    rdx,[rip+0xfffffffffffe3f95]        # 0x1004fe8
 1021053:	mov    rcx,rsi
 1021056:	call   QWORD PTR [rip+0xfffffffffffe0954]        # 0x10019b0
 102105c:	mov    r8,r15
 102105f:	lea    rdx,[rip+0xfffffffffffe3fa2]        # 0x1005008
 1021066:	mov    rcx,rsi
 1021069:	call   QWORD PTR [rip+0xfffffffffffe0941]        # 0x10019b0
 102106f:	mov    r8,r15
 1021072:	lea    rdx,[rbp-0x18]
 1021076:	mov    rcx,r14
 1021079:	call   0x1022ef0
 102107e:	nop
 102107f:	mov    rcx,rax
 1021082:	call   QWORD PTR [rip+0xfffffffffffe0a60]        # 0x1001ae8
 1021088:	mov    r8,rax
 102108b:	lea    rdx,[rip+0xfffffffffffe3eee]        # 0x1004f80
 1021092:	mov    rcx,rsi
 1021095:	call   QWORD PTR [rip+0xfffffffffffe0915]        # 0x10019b0
 102109b:	nop
 102109c:	lea    rcx,[rbp-0x18]
 10210a0:	call   QWORD PTR [rip+0xfffffffffffe0a02]        # 0x1001aa8
 10210a6:	lea    rcx,[r14+0x30]
 10210aa:	call   QWORD PTR [rip+0xfffffffffffe0a38]        # 0x1001ae8
 10210b0:	mov    r8,rax
 10210b3:	lea    rdx,[rip+0xfffffffffffe4956]        # 0x1005a10
 10210ba:	mov    rcx,rsi
 10210bd:	call   QWORD PTR [rip+0xfffffffffffe08ed]        # 0x10019b0
 10210c3:	xor    r8d,r8d
 10210c6:	lea    rdx,[rip+0xfffffffffffe495b]        # 0x1005a28
 10210cd:	mov    rcx,rsi
 10210d0:	call   QWORD PTR [rip+0xfffffffffffe0982]        # 0x1001a58
 10210d6:	cmp    eax,0xffffffff
 10210d9:	je     0x1021123
 10210db:	lea    rcx,[rbp-0x18]
 10210df:	call   QWORD PTR [rip+0xfffffffffffe09db]        # 0x1001ac0
 10210e5:	nop
 10210e6:	lea    rdx,[rbp-0x18]
 10210ea:	mov    rcx,r14
 10210ed:	call   0x1016370
 10210f2:	lea    rcx,[rbp-0x18]
 10210f6:	call   QWORD PTR [rip+0xfffffffffffe09ec]        # 0x1001ae8
 10210fc:	mov    r8,rax
 10210ff:	lea    rdx,[rip+0xfffffffffffe4922]        # 0x1005a28
 1021106:	mov    rcx,rsi
 1021109:	call   QWORD PTR [rip+0xfffffffffffe08a1]        # 0x10019b0
 102110f:	lea    rcx,[rbp-0x18]
 1021113:	call   0x1030790
 1021118:	nop
 1021119:	lea    rcx,[rbp-0x18]
 102111d:	call   QWORD PTR [rip+0xfffffffffffe0985]        # 0x1001aa8
 1021123:	lea    rcx,[rbp-0x10]
 1021127:	call   QWORD PTR [rip+0xfffffffffffe09bb]        # 0x1001ae8
 102112d:	mov    r8,rax
 1021130:	lea    rdx,[rip+0xfffffffffffe4901]        # 0x1005a38
 1021137:	mov    rcx,rsi
 102113a:	call   QWORD PTR [rip+0xfffffffffffe0870]        # 0x10019b0
 1021140:	lea    rdi,[rip+0xfffffffffffe19d5]        # 0x1002b1c
 1021147:	lea    r12,[rip+0xfffffffffffe19fe]        # 0x1002b4c
 102114e:	mov    r8,r12
 1021151:	cmp    BYTE PTR [r14+0x29],0x0
 1021156:	cmovne r8,rdi
 102115a:	lea    rdx,[rip+0xfffffffffffe48e7]        # 0x1005a48
 1021161:	mov    rcx,rsi
 1021164:	call   QWORD PTR [rip+0xfffffffffffe0846]        # 0x10019b0
 102116a:	mov    BYTE PTR [rsp+0x20],0x0
 102116f:	mov    r9,r15
 1021172:	mov    r8,rbx
 1021175:	lea    rdx,[rbp-0x18]
 1021179:	mov    rcx,r14
 102117c:	call   0x101e740
 1021181:	nop
 1021182:	mov    rcx,rax
 1021185:	call   QWORD PTR [rip+0xfffffffffffe095d]        # 0x1001ae8
 102118b:	mov    r8,rax
 102118e:	lea    rdx,[rip+0xfffffffffffe48cb]        # 0x1005a60
 1021195:	mov    rcx,rsi
 1021198:	call   QWORD PTR [rip+0xfffffffffffe0812]        # 0x10019b0
 102119e:	nop
 102119f:	lea    rcx,[rbp-0x18]
 10211a3:	call   QWORD PTR [rip+0xfffffffffffe08ff]        # 0x1001aa8
 10211a9:	xor    r8d,r8d
 10211ac:	lea    rdx,[rip+0xfffffffffffe3df5]        # 0x1004fa8
 10211b3:	mov    rcx,rsi
 10211b6:	call   QWORD PTR [rip+0xfffffffffffe089c]        # 0x1001a58
 10211bc:	cmp    eax,0xffffffff
 10211bf:	je     0x10211fb
 10211c1:	mov    r9b,0x1
 10211c4:	mov    r8,r15
 10211c7:	lea    rdx,[rbp-0x18]
 10211cb:	mov    rcx,r14
 10211ce:	call   0x1020730
 10211d3:	nop
 10211d4:	mov    rcx,rax
 10211d7:	call   QWORD PTR [rip+0xfffffffffffe090b]        # 0x1001ae8
 10211dd:	mov    r8,rax
 10211e0:	lea    rdx,[rip+0xfffffffffffe3dc1]        # 0x1004fa8
 10211e7:	mov    rcx,rsi
 10211ea:	call   QWORD PTR [rip+0xfffffffffffe07c0]        # 0x10019b0
 10211f0:	nop
 10211f1:	lea    rcx,[rbp-0x18]
 10211f5:	call   QWORD PTR [rip+0xfffffffffffe08ad]        # 0x1001aa8
 10211fb:	xor    r8d,r8d
 10211fe:	lea    rdx,[rip+0xfffffffffffe3dbb]        # 0x1004fc0
 1021205:	mov    rcx,rsi
 1021208:	call   QWORD PTR [rip+0xfffffffffffe084a]        # 0x1001a58
 102120e:	cmp    eax,0xffffffff
 1021211:	je     0x10212d0
 1021217:	xor    r9d,r9d
 102121a:	mov    r8,r15
 102121d:	lea    rdx,[rbp-0x18]
 1021221:	mov    rcx,r14
 1021224:	call   0x1020730
 1021229:	nop
 102122a:	lea    r9,[rip+0xfffffffffffe1f47]        # 0x1003178
 1021231:	mov    r8,QWORD PTR [rax]
 1021234:	lea    rdx,[rip+0xfffffffffffe34ed]        # 0x1004728
 102123b:	lea    rcx,[rbp+0x40]
 102123f:	call   QWORD PTR [rip+0xfffffffffffe07fb]        # 0x1001a40
 1021245:	nop
 1021246:	lea    rcx,[rbp-0x18]
 102124a:	call   QWORD PTR [rip+0xfffffffffffe0858]        # 0x1001aa8
 1021250:	mov    r11,QWORD PTR [r14+0x8]
 1021254:	movsxd rax,DWORD PTR [r11+0x4]
 1021258:	lea    rdi,[r14+0x8]
 102125c:	add    rdi,rax
 102125f:	lea    rcx,[rbp+0x40]
 1021263:	call   QWORD PTR [rip+0xfffffffffffe087f]        # 0x1001ae8
 1021269:	mov    rbx,rax
 102126c:	lea    rcx,[r14+0x10]
 1021270:	call   QWORD PTR [rip+0xfffffffffffe0872]        # 0x1001ae8
 1021276:	mov    rcx,rax
 1021279:	mov    QWORD PTR [rsp+0x20],rdi
 102127e:	lea    r9,[rip+0xfffffffffffe47fb]        # 0x1005a80
 1021285:	mov    r8,rbx
 1021288:	mov    rdx,0xffffffff80000002
 102128f:	call   0x1034380
 1021294:	mov    r8d,eax
 1021297:	lea    rdx,[rip+0xfffffffffffe2fb2]        # 0x1004250
 102129e:	lea    rcx,[rbp+0x40]
 10212a2:	call   QWORD PTR [rip+0xfffffffffffe0798]        # 0x1001a40
 10212a8:	lea    rcx,[rbp+0x40]
 10212ac:	call   QWORD PTR [rip+0xfffffffffffe0836]        # 0x1001ae8
 10212b2:	mov    r8,rax
 10212b5:	lea    rdx,[rip+0xfffffffffffe3d04]        # 0x1004fc0
 10212bc:	mov    rcx,rsi
 10212bf:	call   QWORD PTR [rip+0xfffffffffffe06eb]        # 0x10019b0
 10212c5:	mov    rbx,QWORD PTR [rbp+0x58]
 10212c9:	lea    rdi,[rip+0xfffffffffffe184c]        # 0x1002b1c
 10212d0:	xor    r8d,r8d
 10212d3:	lea    rdx,[rip+0xfffffffffffe3cf6]        # 0x1004fd0
 10212da:	mov    rcx,rsi
 10212dd:	call   QWORD PTR [rip+0xfffffffffffe0775]        # 0x1001a58
 10212e3:	cmp    eax,0xffffffff
 10212e6:	je     0x102131f
 10212e8:	mov    r8,r15
 10212eb:	lea    rdx,[rbp-0x18]
 10212ef:	mov    rcx,r14
 10212f2:	call   0x101f690
 10212f7:	nop
 10212f8:	mov    rcx,rax
 10212fb:	call   QWORD PTR [rip+0xfffffffffffe07e7]        # 0x1001ae8
 1021301:	mov    r8,rax
 1021304:	lea    rdx,[rip+0xfffffffffffe3cc5]        # 0x1004fd0
 102130b:	mov    rcx,rsi
 102130e:	call   QWORD PTR [rip+0xfffffffffffe069c]        # 0x10019b0
 1021314:	nop
 1021315:	lea    rcx,[rbp-0x18]
 1021319:	call   QWORD PTR [rip+0xfffffffffffe0789]        # 0x1001aa8
 102131f:	lea    rax,[rip+0xfffffffffffe4772]        # 0x1005a98
 1021326:	lea    r8,[rip+0xfffffffffffe4783]        # 0x1005ab0
 102132d:	cmp    DWORD PTR [r14+0x24],0x8
 1021332:	cmovg  r8,rax
 1021336:	lea    rdx,[rip+0xfffffffffffe478b]        # 0x1005ac8
 102133d:	mov    rcx,rsi
 1021340:	call   QWORD PTR [rip+0xfffffffffffe066a]        # 0x10019b0
 1021346:	mov    BYTE PTR [rsp+0x20],0x1
 102134b:	mov    r9,r15
 102134e:	mov    r8,rbx
 1021351:	lea    rdx,[rbp-0x18]
 1021355:	mov    rcx,r14
 1021358:	call   0x101e740
 102135d:	nop
 102135e:	mov    rcx,rax
 1021361:	call   QWORD PTR [rip+0xfffffffffffe0781]        # 0x1001ae8
 1021367:	mov    r8,rax
 102136a:	lea    rdx,[rip+0xfffffffffffe4777]        # 0x1005ae8
 1021371:	mov    rcx,rsi
 1021374:	call   QWORD PTR [rip+0xfffffffffffe0636]        # 0x10019b0
 102137a:	nop
 102137b:	lea    rcx,[rbp-0x18]
 102137f:	call   QWORD PTR [rip+0xfffffffffffe0723]        # 0x1001aa8
 1021385:	mov    r11,QWORD PTR [r14+0xd8]
 102138c:	mov    r8,r12
 102138f:	cmp    BYTE PTR [r11+0xb8],0x0
 1021397:	cmovne r8,rdi
 102139b:	lea    rdx,[rip+0xfffffffffffe4776]        # 0x1005b18
 10213a2:	mov    rcx,rsi
 10213a5:	call   QWORD PTR [rip+0xfffffffffffe0605]        # 0x10019b0
 10213ab:	mov    r11,QWORD PTR [r14+0xd8]
 10213b2:	mov    r8,r12
 10213b5:	cmp    BYTE PTR [r11+0xba],0x0
 10213bd:	cmovne r8,rdi
 10213c1:	lea    rdx,[rip+0xfffffffffffe4768]        # 0x1005b30
 10213c8:	mov    rcx,rsi
 10213cb:	call   QWORD PTR [rip+0xfffffffffffe05df]        # 0x10019b0
 10213d1:	mov    r11,QWORD PTR [r14+0xd8]
 10213d8:	mov    r8d,DWORD PTR [r11+0xd0]
 10213df:	lea    rdx,[rip+0xfffffffffffe2e6a]        # 0x1004250
 10213e6:	lea    rcx,[rbp+0x40]
 10213ea:	call   QWORD PTR [rip+0xfffffffffffe0650]        # 0x1001a40
 10213f0:	lea    rcx,[rbp+0x40]
 10213f4:	call   QWORD PTR [rip+0xfffffffffffe06ee]        # 0x1001ae8
 10213fa:	mov    r8,rax
 10213fd:	lea    rdx,[rip+0xfffffffffffe4754]        # 0x1005b58
 1021404:	mov    rcx,rsi
 1021407:	call   QWORD PTR [rip+0xfffffffffffe05a3]        # 0x10019b0
 102140d:	mov    r11,QWORD PTR [r14+0xd8]
 1021414:	cmp    BYTE PTR [r11+0xb9],0x0
 102141c:	cmovne r12,rdi
 1021420:	mov    r8,r12
 1021423:	lea    rdx,[rip+0xfffffffffffe4756]        # 0x1005b80
 102142a:	mov    rcx,rsi
 102142d:	call   QWORD PTR [rip+0xfffffffffffe057d]        # 0x10019b0
 1021433:	mov    rcx,QWORD PTR [r14+0xd8]
 102143a:	add    rcx,0x60
 102143e:	call   QWORD PTR [rip+0xfffffffffffe06a4]        # 0x1001ae8
 1021444:	mov    r8,rax
 1021447:	lea    rdx,[rip+0xfffffffffffe4752]        # 0x1005ba0
 102144e:	mov    rcx,rsi
 1021451:	call   QWORD PTR [rip+0xfffffffffffe0559]        # 0x10019b0
 1021457:	mov    rcx,QWORD PTR [r14+0xd8]
 102145e:	add    rcx,0x68
 1021462:	call   QWORD PTR [rip+0xfffffffffffe0680]        # 0x1001ae8
 1021468:	mov    r8,rax
 102146b:	lea    rdx,[rip+0xfffffffffffe474e]        # 0x1005bc0
 1021472:	mov    rcx,rsi
 1021475:	call   QWORD PTR [rip+0xfffffffffffe0535]        # 0x10019b0
 102147b:	mov    rcx,QWORD PTR [r14+0xd8]
 1021482:	add    rcx,0x70
 1021486:	call   QWORD PTR [rip+0xfffffffffffe065c]        # 0x1001ae8
 102148c:	mov    r8,rax
 102148f:	lea    rdx,[rip+0xfffffffffffe4742]        # 0x1005bd8
 1021496:	mov    rcx,rsi
 1021499:	call   QWORD PTR [rip+0xfffffffffffe0511]        # 0x10019b0
 102149f:	mov    rcx,QWORD PTR [r14+0xd8]
 10214a6:	sub    rcx,0xffffffffffffff80
 10214aa:	call   QWORD PTR [rip+0xfffffffffffe0638]        # 0x1001ae8
 10214b0:	mov    r8,rax
 10214b3:	lea    rdx,[rip+0xfffffffffffe4736]        # 0x1005bf0
 10214ba:	mov    rcx,rsi
 10214bd:	call   QWORD PTR [rip+0xfffffffffffe04ed]        # 0x10019b0
 10214c3:	mov    rcx,QWORD PTR [r14+0xd8]
 10214ca:	add    rcx,0x98
 10214d1:	call   QWORD PTR [rip+0xfffffffffffe0611]        # 0x1001ae8
 10214d7:	mov    r8,rax
 10214da:	lea    rdx,[rip+0xfffffffffffe4727]        # 0x1005c08
 10214e1:	mov    rcx,rsi
 10214e4:	call   QWORD PTR [rip+0xfffffffffffe04c6]        # 0x10019b0
 10214ea:	mov    r11,QWORD PTR [r14+0xd8]
 10214f1:	mov    r8d,DWORD PTR [r11+0xd4]
 10214f8:	lea    rdx,[rip+0xfffffffffffe2d51]        # 0x1004250
 10214ff:	lea    rcx,[rbp+0x40]
 1021503:	call   QWORD PTR [rip+0xfffffffffffe0537]        # 0x1001a40
 1021509:	lea    rcx,[rbp+0x40]
 102150d:	call   QWORD PTR [rip+0xfffffffffffe05d5]        # 0x1001ae8
 1021513:	mov    r8,rax
 1021516:	lea    rdx,[rip+0xfffffffffffe4703]        # 0x1005c20
 102151d:	mov    rcx,rsi
 1021520:	call   QWORD PTR [rip+0xfffffffffffe048a]        # 0x10019b0
 1021526:	lea    r8,[rip+0x41f23]        # 0x1063450
 102152d:	lea    rdx,[rip+0xfffffffffffe4714]        # 0x1005c48
 1021534:	mov    rcx,rsi
 1021537:	call   QWORD PTR [rip+0xfffffffffffe0473]        # 0x10019b0
 102153d:	nop
 102153e:	lea    rcx,[rbp+0x40]
 1021542:	call   QWORD PTR [rip+0xfffffffffffe0560]        # 0x1001aa8
 1021548:	nop
 1021549:	lea    rcx,[rbp-0x10]
 102154d:	call   QWORD PTR [rip+0xfffffffffffe0555]        # 0x1001aa8
 1021553:	mov    rax,rsi
 1021556:	mov    rbx,QWORD PTR [rsp+0xa0]
 102155e:	add    rsp,0x50
 1021562:	pop    r15
 1021564:	pop    r14
 1021566:	pop    r13
 1021568:	pop    r12
 102156a:	pop    rdi
 102156b:	pop    rsi
 102156c:	pop    rbp
 102156d:	ret    
 102156e:	int3   
 102156f:	int3   
 1021570:	int3   
 1021571:	int3   
 1021572:	int3   
 1021573:	int3   
 1021574:	int3   
 1021575:	int3   
 1021576:	int3   
 1021577:	int3   
 1021578:	int3   
 1021579:	int3   
 102157a:	int3   
 102157b:	int3   
 102157c:	int3   
 102157d:	int3   
 102157e:	int3   
 102157f:	int3   
 1021580:	mov    QWORD PTR [rsp+0x10],rdx
 1021585:	push   rbp
 1021586:	push   rsi
 1021587:	push   rdi
 1021588:	sub    rsp,0x30
 102158c:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
 1021595:	mov    QWORD PTR [rsp+0x60],rbx
 102159a:	mov    rbp,rdx
 102159d:	mov    rsi,rcx
 10215a0:	mov    DWORD PTR [rsp+0x20],0x0
 10215a8:	mov    rdx,r8
 10215ab:	mov    rcx,rbp
 10215ae:	call   QWORD PTR [rip+0xfffffffffffe04fc]        # 0x1001ab0
 10215b4:	mov    DWORD PTR [rsp+0x20],0x1
 10215bc:	lea    rcx,[rsp+0x68]
 10215c1:	call   QWORD PTR [rip+0xfffffffffffe04f9]        # 0x1001ac0
 10215c7:	nop
 10215c8:	lea    rcx,[rsp+0x50]
 10215cd:	call   QWORD PTR [rip+0xfffffffffffe04ed]        # 0x1001ac0
 10215d3:	nop
 10215d4:	mov    rax,QWORD PTR [rsi+0xd8]
 10215db:	mov    rcx,QWORD PTR [rax+0x100]
 10215e2:	neg    rcx
 10215e5:	sbb    rdi,rdi
 10215e8:	je     0x10216f1
 10215ee:	mov    r8,QWORD PTR [rsi+0xd8]
 10215f5:	mov    r9,QWORD PTR [r8+0xf0]
 10215fc:	xor    eax,eax
 10215fe:	test   r9,r9
 1021601:	setne  al
 1021604:	test   eax,eax
 1021606:	je     0x10216eb
 102160c:	mov    rbx,rdi
 102160f:	xor    eax,eax
 1021611:	test   rdi,rdi
 1021614:	setne  al
 1021617:	test   eax,eax
 1021619:	je     0x10216e5
 102161f:	cmp    rdi,0xffffffffffffffff
 1021623:	jne    0x1021657
 1021625:	xor    ecx,ecx
 1021627:	mov    edx,DWORD PTR [r8+0xf8]
 102162e:	test   edx,edx
 1021630:	je     0x1021647
 1021632:	mov    rax,r9
 1021635:	mov    rbx,QWORD PTR [rax]
 1021638:	test   rbx,rbx
 102163b:	jne    0x1021647
 102163d:	inc    ecx
 102163f:	add    rax,0x8
 1021643:	cmp    ecx,edx
 1021645:	jb     0x1021635
 1021647:	xor    eax,eax
 1021649:	test   rbx,rbx
 102164c:	setne  al
 102164f:	test   eax,eax
 1021651:	je     0x10216df
 1021657:	mov    rdi,QWORD PTR [rbx+0x10]
 102165b:	test   rdi,rdi
 102165e:	jne    0x1021692
 1021660:	mov    ecx,DWORD PTR [r8+0xf8]
 1021667:	xor    edx,edx
 1021669:	mov    eax,DWORD PTR [rbx+0x18]
 102166c:	div    ecx
 102166e:	inc    edx
 1021670:	movsxd rax,edx
 1021673:	cmp    edx,ecx
 1021675:	jae    0x1021692
 1021677:	lea    rax,[r9+rax*8]
 102167b:	nop    DWORD PTR [rax+rax*1+0x0]
 1021680:	mov    rdi,QWORD PTR [rax]
 1021683:	test   rdi,rdi
 1021686:	jne    0x1021692
 1021688:	inc    edx
 102168a:	add    rax,0x8
 102168e:	cmp    edx,ecx
 1021690:	jb     0x1021680
 1021692:	mov    rdx,rbx
 1021695:	lea    rcx,[rsp+0x68]
 102169a:	call   QWORD PTR [rip+0xfffffffffffe0400]        # 0x1001aa0
 10216a0:	lea    rdx,[rbx+0x8]
 10216a4:	lea    rcx,[rsp+0x50]
 10216a9:	call   QWORD PTR [rip+0xfffffffffffe03f1]        # 0x1001aa0
 10216af:	lea    rcx,[rsp+0x50]
 10216b4:	call   QWORD PTR [rip+0xfffffffffffe042e]        # 0x1001ae8
 10216ba:	mov    rbx,rax
 10216bd:	lea    rcx,[rsp+0x68]
 10216c2:	call   QWORD PTR [rip+0xfffffffffffe0420]        # 0x1001ae8
 10216c8:	mov    rdx,rax
 10216cb:	mov    r8,rbx
 10216ce:	mov    rcx,rbp
 10216d1:	call   QWORD PTR [rip+0xfffffffffffe02d9]        # 0x10019b0
 10216d7:	test   rdi,rdi
 10216da:	jmp    0x10215e8
 10216df:	call   0x103f972
 10216e4:	int3   
 10216e5:	call   0x103f972
 10216ea:	int3   
 10216eb:	call   0x103f972
 10216f0:	int3   
 10216f1:	mov    rax,QWORD PTR [rsi+0x108]
 10216f8:	neg    rax
 10216fb:	sbb    rdi,rdi
 10216fe:	je     0x10217f9
 1021704:	mov    r8,QWORD PTR [rsi+0xf8]
 102170b:	xor    eax,eax
 102170d:	test   r8,r8
 1021710:	setne  al
 1021713:	test   eax,eax
 1021715:	je     0x10217f3
 102171b:	mov    rbx,rdi
 102171e:	xor    eax,eax
 1021720:	test   rdi,rdi
 1021723:	setne  al
 1021726:	test   eax,eax
 1021728:	je     0x10217ed
 102172e:	cmp    rdi,0xffffffffffffffff
 1021732:	jne    0x1021765
 1021734:	xor    ecx,ecx
 1021736:	mov    edx,DWORD PTR [rsi+0x100]
 102173c:	test   edx,edx
 102173e:	je     0x1021755
 1021740:	mov    rax,r8
 1021743:	mov    rbx,QWORD PTR [rax]
 1021746:	test   rbx,rbx
 1021749:	jne    0x1021755
 102174b:	inc    ecx
 102174d:	add    rax,0x8
 1021751:	cmp    ecx,edx
 1021753:	jb     0x1021743
 1021755:	xor    eax,eax
 1021757:	test   rbx,rbx
 102175a:	setne  al
 102175d:	test   eax,eax
 102175f:	je     0x10217e7
 1021765:	mov    rdi,QWORD PTR [rbx+0x10]
 1021769:	test   rdi,rdi
 102176c:	jne    0x102179a
 102176e:	mov    ecx,DWORD PTR [rsi+0x100]
 1021774:	xor    edx,edx
 1021776:	mov    eax,DWORD PTR [rbx+0x18]
 1021779:	div    ecx
 102177b:	inc    edx
 102177d:	movsxd rax,edx
 1021780:	cmp    edx,ecx
 1021782:	jae    0x102179a
 1021784:	lea    rax,[r8+rax*8]
 1021788:	mov    rdi,QWORD PTR [rax]
 102178b:	test   rdi,rdi
 102178e:	jne    0x102179a
 1021790:	inc    edx
 1021792:	add    rax,0x8
 1021796:	cmp    edx,ecx
 1021798:	jb     0x1021788
 102179a:	mov    rdx,rbx
 102179d:	lea    rcx,[rsp+0x68]
 10217a2:	call   QWORD PTR [rip+0xfffffffffffe02f8]        # 0x1001aa0
 10217a8:	lea    rdx,[rbx+0x8]
 10217ac:	lea    rcx,[rsp+0x50]
 10217b1:	call   QWORD PTR [rip+0xfffffffffffe02e9]        # 0x1001aa0
 10217b7:	lea    rcx,[rsp+0x50]
 10217bc:	call   QWORD PTR [rip+0xfffffffffffe0326]        # 0x1001ae8
 10217c2:	mov    rbx,rax
 10217c5:	lea    rcx,[rsp+0x68]
 10217ca:	call   QWORD PTR [rip+0xfffffffffffe0318]        # 0x1001ae8
 10217d0:	mov    rdx,rax
 10217d3:	mov    r8,rbx
 10217d6:	mov    rcx,rbp
 10217d9:	call   QWORD PTR [rip+0xfffffffffffe01d1]        # 0x10019b0
 10217df:	test   rdi,rdi
 10217e2:	jmp    0x10216fe
 10217e7:	call   0x103f972
 10217ec:	int3   
 10217ed:	call   0x103f972
 10217f2:	int3   
 10217f3:	call   0x103f972
 10217f8:	nop
 10217f9:	lea    rcx,[rsp+0x50]
 10217fe:	call   QWORD PTR [rip+0xfffffffffffe02a4]        # 0x1001aa8
 1021804:	nop
 1021805:	lea    rcx,[rsp+0x68]
 102180a:	call   QWORD PTR [rip+0xfffffffffffe0298]        # 0x1001aa8
 1021810:	mov    rax,rbp
 1021813:	mov    rbx,QWORD PTR [rsp+0x60]
 1021818:	add    rsp,0x30
 102181c:	pop    rdi
 102181d:	pop    rsi
 102181e:	pop    rbp
 102181f:	ret    
 1021820:	int3   
 1021821:	int3   
 1021822:	int3   
 1021823:	int3   
 1021824:	int3   
 1021825:	int3   
 1021826:	int3   
 1021827:	int3   
 1021828:	int3   
 1021829:	int3   
 102182a:	int3   
 102182b:	int3   
 102182c:	int3   
 102182d:	int3   
 102182e:	int3   
 102182f:	int3   
 1021830:	mov    QWORD PTR [rsp+0x10],rdx
 1021835:	push   rdi
 1021836:	sub    rsp,0x50
 102183a:	mov    QWORD PTR [rsp+0x40],0xfffffffffffffffe
 1021843:	mov    QWORD PTR [rsp+0x60],rbx
 1021848:	mov    QWORD PTR [rsp+0x70],rbp
 102184d:	mov    QWORD PTR [rsp+0x78],rsi
 1021852:	mov    rbx,r9
 1021855:	mov    rdi,rdx
 1021858:	mov    rsi,rcx
 102185b:	mov    DWORD PTR [rsp+0x30],0x0
 1021863:	mov    rdx,r8
 1021866:	mov    rcx,rdi
 1021869:	call   QWORD PTR [rip+0xfffffffffffe0241]        # 0x1001ab0
 102186f:	mov    DWORD PTR [rsp+0x30],0x1
 1021877:	mov    rcx,rdi
 102187a:	call   QWORD PTR [rip+0xfffffffffffe0268]        # 0x1001ae8
 1021880:	mov    r8,rax
 1021883:	mov    rax,QWORD PTR [rsp+0x80]
 102188b:	mov    QWORD PTR [rsp+0x20],rax
 1021890:	mov    r9,rbx
 1021893:	lea    rdx,[rsp+0x38]
 1021898:	mov    rcx,rsi
 102189b:	call   0x1020f50
 10218a0:	nop
 10218a1:	mov    rdx,rax
 10218a4:	mov    rcx,rdi
 10218a7:	call   QWORD PTR [rip+0xfffffffffffe01f3]        # 0x1001aa0
 10218ad:	nop
 10218ae:	lea    rcx,[rsp+0x38]
 10218b3:	call   QWORD PTR [rip+0xfffffffffffe01ef]        # 0x1001aa8
 10218b9:	mov    rcx,rdi
 10218bc:	call   QWORD PTR [rip+0xfffffffffffe0226]        # 0x1001ae8
 10218c2:	mov    r8,rax
 10218c5:	lea    rdx,[rsp+0x38]
 10218ca:	mov    rcx,rsi
 10218cd:	call   0x1021580
 10218d2:	nop
 10218d3:	mov    rdx,rax
 10218d6:	mov    rcx,rdi
 10218d9:	call   QWORD PTR [rip+0xfffffffffffe01c1]        # 0x1001aa0
 10218df:	nop
 10218e0:	lea    rcx,[rsp+0x38]
 10218e5:	call   QWORD PTR [rip+0xfffffffffffe01bd]        # 0x1001aa8
 10218eb:	mov    rcx,rdi
 10218ee:	call   QWORD PTR [rip+0xfffffffffffe01f4]        # 0x1001ae8
 10218f4:	mov    rcx,rax
 10218f7:	xor    r8d,r8d
 10218fa:	xor    edx,edx
 10218fc:	call   QWORD PTR [rip+0xfffffffffffdface]        # 0x10013d0
 1021902:	mov    ebp,eax
 1021904:	mov    ebx,eax
 1021906:	add    rbx,rbx
 1021909:	call   QWORD PTR [rip+0xfffffffffffdfc49]        # 0x1001558
 102190f:	mov    rcx,rax
 1021912:	mov    r8,rbx
 1021915:	mov    edx,0x8
 102191a:	call   QWORD PTR [rip+0xfffffffffffdfc48]        # 0x1001568
 1021920:	mov    rbx,rax
 1021923:	test   rax,rax
 1021926:	je     0x102198f
 1021928:	mov    rcx,rdi
 102192b:	call   QWORD PTR [rip+0xfffffffffffe01b7]        # 0x1001ae8
 1021931:	mov    rcx,rax
 1021934:	mov    r8d,ebp
 1021937:	mov    rdx,rbx
 102193a:	call   QWORD PTR [rip+0xfffffffffffdfa90]        # 0x10013d0
 1021940:	test   eax,eax
 1021942:	je     0x1021952
 1021944:	mov    rdx,rbx
 1021947:	mov    rcx,rdi
 102194a:	call   QWORD PTR [rip+0xfffffffffffe0148]        # 0x1001a98
 1021950:	jmp    0x102197b
 1021952:	mov    rax,QWORD PTR [rsi+0x8]
 1021956:	movsxd rcx,DWORD PTR [rax+0x4]
 102195a:	add    rcx,0x8
 102195e:	add    rcx,rsi
 1021961:	mov    rax,QWORD PTR [rcx]
 1021964:	mov    BYTE PTR [rsp+0x28],0x1
 1021969:	mov    BYTE PTR [rsp+0x20],0x1
 102196e:	xor    r9d,r9d
 1021971:	xor    r8d,r8d
 1021974:	mov    edx,0xc000c40c
 1021979:	call   QWORD PTR [rax]
 102197b:	call   QWORD PTR [rip+0xfffffffffffdfbd7]        # 0x1001558
 1021981:	mov    rcx,rax
 1021984:	mov    r8,rbx
 1021987:	xor    edx,edx
 1021989:	call   QWORD PTR [rip+0xfffffffffffdfbd1]        # 0x1001560
 102198f:	mov    rax,rdi
 1021992:	mov    rbx,QWORD PTR [rsp+0x60]
 1021997:	mov    rbp,QWORD PTR [rsp+0x70]
 102199c:	mov    rsi,QWORD PTR [rsp+0x78]
 10219a1:	add    rsp,0x50
 10219a5:	pop    rdi
 10219a6:	ret    
 10219a7:	int3   
 10219a8:	int3   
 10219a9:	int3   
 10219aa:	int3   
 10219ab:	int3   
 10219ac:	int3   
 10219ad:	int3   
 10219ae:	int3   
 10219af:	int3   
 10219b0:	rex push rbp
 10219b2:	push   rbx
 10219b3:	push   rsi
 10219b4:	push   rdi
 10219b5:	push   r12
 10219b7:	push   r13
 10219b9:	push   r14
 10219bb:	push   r15
 10219bd:	lea    rbp,[rsp-0x7a8]
 10219c5:	sub    rsp,0x8a8
 10219cc:	mov    QWORD PTR [rbp-0x78],0xfffffffffffffffe
 10219d4:	mov    rax,QWORD PTR [rip+0x41e95]        # 0x1063870
 10219db:	xor    rax,rsp
 10219de:	mov    QWORD PTR [rbp+0x790],rax
 10219e5:	mov    QWORD PTR [rsp+0x78],r9
 10219ea:	mov    QWORD PTR [rbp-0x80],r8
 10219ee:	mov    r13,rdx
 10219f1:	mov    rdi,rcx
 10219f4:	xor    r8d,r8d
 10219f7:	lea    rdx,[rip+0xfffffffffffe2e12]        # 0x1004810
 10219fe:	mov    rcx,r13
 1021a01:	call   QWORD PTR [rip+0xfffffffffffe0051]        # 0x1001a58
 1021a07:	cmp    eax,0xffffffff
 1021a0a:	jne    0x1021ea6
 1021a10:	mov    r14b,0x1
 1021a13:	mov    rcx,r13
 1021a16:	call   QWORD PTR [rip+0xfffffffffffe00cc]        # 0x1001ae8
 1021a1c:	mov    rdx,rax
 1021a1f:	movzx  r8d,r14b
 1021a23:	lea    rcx,[rsp+0x58]
 1021a28:	call   0x1031010
 1021a2d:	nop
 1021a2e:	lea    r8,[rip+0xfffffffffffe2ddb]        # 0x1004810
 1021a35:	mov    rdx,rax
 1021a38:	lea    rcx,[rsp+0x50]
 1021a3d:	call   0x100af10
 1021a42:	nop
 1021a43:	lea    rcx,[rsp+0x58]
 1021a48:	call   QWORD PTR [rip+0xfffffffffffe005a]        # 0x1001aa8
 1021a4e:	mov    rcx,r13
 1021a51:	call   QWORD PTR [rip+0xfffffffffffe0091]        # 0x1001ae8
 1021a57:	mov    rcx,rax
 1021a5a:	xor    ebx,ebx
 1021a5c:	mov    QWORD PTR [rsp+0x30],rbx
 1021a61:	mov    DWORD PTR [rsp+0x28],0x100080
 1021a69:	mov    DWORD PTR [rsp+0x20],0x3
 1021a71:	xor    r9d,r9d
 1021a74:	mov    edx,0x80000000
 1021a79:	lea    r8d,[rbx+0x1]
 1021a7d:	call   QWORD PTR [rip+0xfffffffffffdf75d]        # 0x10011e0
 1021a83:	mov    rsi,rax
 1021a86:	mov    QWORD PTR [rsp+0x60],rax
 1021a8b:	cmp    rax,0xffffffffffffffff
 1021a8f:	jne    0x1021acd
 1021a91:	mov    rax,QWORD PTR [rdi+0x8]
 1021a95:	movsxd rcx,DWORD PTR [rax+0x4]
 1021a99:	mov    rbx,QWORD PTR [rcx+rdi*1+0x8]
 1021a9e:	call   QWORD PTR [rip+0xfffffffffffdfaac]        # 0x1001550
 1021aa4:	mov    edx,eax
 1021aa6:	mov    rax,QWORD PTR [rdi+0x8]
 1021aaa:	movsxd rcx,DWORD PTR [rax+0x4]
 1021aae:	add    rcx,0x8
 1021ab2:	add    rcx,rdi
 1021ab5:	mov    BYTE PTR [rsp+0x28],r14b
 1021aba:	mov    BYTE PTR [rsp+0x20],r14b
 1021abf:	xor    r9d,r9d
 1021ac2:	xor    r8d,r8d
 1021ac5:	call   QWORD PTR [rbx]
 1021ac7:	nop
 1021ac8:	jmp    0x1021e9b
 1021acd:	lea    rcx,[rsp+0x50]
 1021ad2:	call   QWORD PTR [rip+0xfffffffffffe0010]        # 0x1001ae8
 1021ad8:	mov    rcx,rax
 1021adb:	mov    QWORD PTR [rsp+0x30],rbx
 1021ae0:	mov    DWORD PTR [rsp+0x28],0x100080
 1021ae8:	mov    DWORD PTR [rsp+0x20],0x2
 1021af0:	xor    r9d,r9d
 1021af3:	xor    r8d,r8d
 1021af6:	mov    edx,0x40000000
 1021afb:	call   QWORD PTR [rip+0xfffffffffffdf6df]        # 0x10011e0
 1021b01:	mov    r15,rax
 1021b04:	mov    QWORD PTR [rsp+0x58],rax
 1021b09:	cmp    rax,0xffffffffffffffff
 1021b0d:	jne    0x1021b59
 1021b0f:	mov    rax,QWORD PTR [rdi+0x8]
 1021b13:	movsxd rcx,DWORD PTR [rax+0x4]
 1021b17:	mov    rbx,QWORD PTR [rcx+rdi*1+0x8]
 1021b1c:	call   QWORD PTR [rip+0xfffffffffffdfa2e]        # 0x1001550
 1021b22:	mov    edx,eax
 1021b24:	mov    rax,QWORD PTR [rdi+0x8]
 1021b28:	movsxd rcx,DWORD PTR [rax+0x4]
 1021b2c:	add    rcx,0x8
 1021b30:	add    rcx,rdi
 1021b33:	mov    BYTE PTR [rsp+0x28],0x1
 1021b38:	mov    BYTE PTR [rsp+0x20],0x1
 1021b3d:	xor    r9d,r9d
 1021b40:	xor    r8d,r8d
 1021b43:	call   QWORD PTR [rbx]
 1021b45:	nop
 1021b46:	mov    rcx,rsi
 1021b49:	call   QWORD PTR [rip+0xfffffffffffdf989]        # 0x10014d8
 1021b4f:	mov    QWORD PTR [rsp+0x60],r15
 1021b54:	jmp    0x1021e9b
 1021b59:	mov    DWORD PTR [rsp+0x40],ebx
 1021b5d:	lea    rcx,[rsp+0x48]
 1021b62:	call   QWORD PTR [rip+0xfffffffffffdff58]        # 0x1001ac0
 1021b68:	nop
 1021b69:	mov    QWORD PTR [rsp+0x20],rbx
 1021b6e:	lea    r9,[rsp+0x40]
 1021b73:	mov    r8d,0x7fe
 1021b79:	lea    rdx,[rbp-0x70]
 1021b7d:	mov    rcx,rsi
 1021b80:	call   QWORD PTR [rip+0xfffffffffffdf7ca]        # 0x1001350
 1021b86:	test   eax,eax
 1021b88:	je     0x1021e34
 1021b8e:	xor    r8d,r8d
 1021b91:	mov    edx,DWORD PTR [rsp+0x40]
 1021b95:	lea    rcx,[rbp-0x70]
 1021b99:	call   QWORD PTR [rip+0xfffffffffffdf499]        # 0x1001038
 1021b9f:	movsxd r12,eax
 1021ba2:	xor    r9d,r9d
 1021ba5:	xor    r8d,r8d
 1021ba8:	xor    edx,edx
 1021baa:	mov    rcx,rsi
 1021bad:	call   QWORD PTR [rip+0xfffffffffffdf7a5]        # 0x1001358
 1021bb3:	xor    ebx,ebx
 1021bb5:	mov    QWORD PTR [rsp+0x20],rbx
 1021bba:	lea    r9,[rsp+0x40]
 1021bbf:	mov    r8d,0x7fe
 1021bc5:	lea    rdx,[rbp-0x70]
 1021bc9:	mov    rcx,rsi
 1021bcc:	call   QWORD PTR [rip+0xfffffffffffdf77e]        # 0x1001350
 1021bd2:	test   eax,eax
 1021bd4:	je     0x1021de4
 1021bda:	nop    WORD PTR [rax+rax*1+0x0]
 1021be0:	mov    ecx,DWORD PTR [rsp+0x40]
 1021be4:	test   ecx,ecx
 1021be6:	je     0x1021de1
 1021bec:	mov    eax,ecx
 1021bee:	shr    rax,1
 1021bf1:	add    rax,rax
 1021bf4:	cmp    rax,0x800
 1021bfa:	jae    0x1021dd9
 1021c00:	mov    WORD PTR [rbp+rax*1-0x70],bx
 1021c05:	test   r12,r12
 1021c08:	jne    0x1021c7c
 1021c0a:	lea    r14d,[r12+0x1]
 1021c0f:	lea    ebx,[rcx+0x1]
 1021c12:	add    rbx,rbx
 1021c15:	call   QWORD PTR [rip+0xfffffffffffdf93d]        # 0x1001558
 1021c1b:	mov    rcx,rax
 1021c1e:	mov    r8,rbx
 1021c21:	lea    edx,[r12+0x8]
 1021c26:	call   QWORD PTR [rip+0xfffffffffffdf93c]        # 0x1001568
 1021c2c:	mov    rbx,rax
 1021c2f:	mov    r9d,DWORD PTR [rsp+0x40]
 1021c34:	mov    DWORD PTR [rsp+0x28],r9d
 1021c39:	mov    QWORD PTR [rsp+0x20],rax
 1021c3e:	lea    r8,[rbp-0x70]
 1021c42:	xor    edx,edx
 1021c44:	xor    ecx,ecx
 1021c46:	call   QWORD PTR [rip+0xfffffffffffdf7e4]        # 0x1001430
 1021c4c:	mov    r11d,DWORD PTR [rsp+0x40]
 1021c51:	xor    eax,eax
 1021c53:	mov    WORD PTR [rbx+r11*2],ax
 1021c58:	mov    rdx,rbx
 1021c5b:	lea    rcx,[rsp+0x48]
 1021c60:	call   QWORD PTR [rip+0xfffffffffffdfe32]        # 0x1001a98
 1021c66:	call   QWORD PTR [rip+0xfffffffffffdf8ec]        # 0x1001558
 1021c6c:	mov    rcx,rax
 1021c6f:	mov    r8,rbx
 1021c72:	xor    edx,edx
 1021c74:	call   QWORD PTR [rip+0xfffffffffffdf8e6]        # 0x1001560
 1021c7a:	jmp    0x1021c91
 1021c7c:	mov    r14d,0x2
 1021c82:	lea    rdx,[rbp-0x70]
 1021c86:	lea    rcx,[rsp+0x48]
 1021c8b:	call   QWORD PTR [rip+0xfffffffffffdfe07]        # 0x1001a98
 1021c91:	mov    edx,0xa
 1021c96:	lea    rcx,[rsp+0x48]
 1021c9b:	call   QWORD PTR [rip+0xfffffffffffdfdaf]        # 0x1001a50
 1021ca1:	cmp    eax,0xffffffff
 1021ca4:	je     0x1021cf8
 1021ca6:	lea    r8d,[rax+0x1]
 1021caa:	mov    eax,r8d
 1021cad:	imul   eax,r14d
 1021cb1:	mov    ebx,DWORD PTR [rsp+0x40]
 1021cb5:	sub    ebx,eax
 1021cb7:	lea    rdx,[rsp+0x68]
 1021cbc:	lea    rcx,[rsp+0x48]
 1021cc1:	call   QWORD PTR [rip+0xfffffffffffdfd81]        # 0x1001a48
 1021cc7:	nop
 1021cc8:	mov    rdx,rax
 1021ccb:	lea    rcx,[rsp+0x48]
 1021cd0:	call   QWORD PTR [rip+0xfffffffffffdfdca]        # 0x1001aa0
 1021cd6:	nop
 1021cd7:	lea    rcx,[rsp+0x68]
 1021cdc:	call   QWORD PTR [rip+0xfffffffffffdfdc6]        # 0x1001aa8
 1021ce2:	neg    ebx
 1021ce4:	mov    r9d,0x1
 1021cea:	xor    r8d,r8d
 1021ced:	mov    edx,ebx
 1021cef:	mov    rcx,rsi
 1021cf2:	call   QWORD PTR [rip+0xfffffffffffdf660]        # 0x1001358
 1021cf8:	lea    rcx,[rsp+0x48]
 1021cfd:	call   QWORD PTR [rip+0xfffffffffffdfde5]        # 0x1001ae8
 1021d03:	mov    r8,rax
 1021d06:	mov    rax,QWORD PTR [rsp+0x78]
 1021d0b:	mov    QWORD PTR [rsp+0x20],rax
 1021d10:	mov    r9,QWORD PTR [rbp-0x80]
 1021d14:	lea    rdx,[rsp+0x70]
 1021d19:	mov    rcx,rdi
 1021d1c:	call   0x1021830
 1021d21:	nop
 1021d22:	mov    rdx,rax
 1021d25:	lea    rcx,[rsp+0x48]
 1021d2a:	call   QWORD PTR [rip+0xfffffffffffdfd70]        # 0x1001aa0
 1021d30:	nop
 1021d31:	lea    rcx,[rsp+0x70]
 1021d36:	call   QWORD PTR [rip+0xfffffffffffdfd6c]        # 0x1001aa8
 1021d3c:	lea    rcx,[rsp+0x48]
 1021d41:	call   QWORD PTR [rip+0xfffffffffffdfda9]        # 0x1001af0
 1021d47:	mov    ebx,eax
 1021d49:	add    ebx,ebx
 1021d4b:	lea    rcx,[rsp+0x48]
 1021d50:	call   QWORD PTR [rip+0xfffffffffffdfd92]        # 0x1001ae8
 1021d56:	mov    rdx,rax
 1021d59:	xor    eax,eax
 1021d5b:	mov    QWORD PTR [rsp+0x20],rax
 1021d60:	lea    r9,[rsp+0x40]
 1021d65:	mov    r8d,ebx
 1021d68:	mov    rcx,r15
 1021d6b:	call   QWORD PTR [rip+0xfffffffffffdf4df]        # 0x1001250
 1021d71:	test   eax,eax
 1021d73:	je     0x1021d9e
 1021d75:	xor    ebx,ebx
 1021d77:	mov    QWORD PTR [rsp+0x20],rbx
 1021d7c:	lea    r9,[rsp+0x40]
 1021d81:	mov    r8d,0x7fe
 1021d87:	lea    rdx,[rbp-0x70]
 1021d8b:	mov    rcx,rsi
 1021d8e:	call   QWORD PTR [rip+0xfffffffffffdf5bc]        # 0x1001350
 1021d94:	test   eax,eax
 1021d96:	jne    0x1021be0
 1021d9c:	jmp    0x1021de1
 1021d9e:	mov    rax,QWORD PTR [rdi+0x8]
 1021da2:	movsxd rcx,DWORD PTR [rax+0x4]
 1021da6:	mov    rbx,QWORD PTR [rcx+rdi*1+0x8]
 1021dab:	call   QWORD PTR [rip+0xfffffffffffdf79f]        # 0x1001550
 1021db1:	mov    edx,eax
 1021db3:	mov    rax,QWORD PTR [rdi+0x8]
 1021db7:	movsxd rcx,DWORD PTR [rax+0x4]
 1021dbb:	add    rcx,0x8
 1021dbf:	add    rcx,rdi
 1021dc2:	mov    BYTE PTR [rsp+0x28],0x1
 1021dc7:	mov    BYTE PTR [rsp+0x20],0x1
 1021dcc:	xor    r9d,r9d
 1021dcf:	xor    r8d,r8d
 1021dd2:	call   QWORD PTR [rbx]
 1021dd4:	xor    r14b,r14b
 1021dd7:	jmp    0x1021df3
 1021dd9:	xor    ecx,ecx
 1021ddb:	call   0x103fd38
 1021de0:	int3   
 1021de1:	mov    r14b,0x1
 1021de4:	lea    rdx,[rsp+0x50]
 1021de9:	mov    rcx,r13
 1021dec:	call   QWORD PTR [rip+0xfffffffffffdfcae]        # 0x1001aa0
 1021df2:	nop
 1021df3:	lea    rcx,[rsp+0x48]
 1021df8:	call   QWORD PTR [rip+0xfffffffffffdfcaa]        # 0x1001aa8
 1021dfe:	nop
 1021dff:	mov    rcx,r15
 1021e02:	call   QWORD PTR [rip+0xfffffffffffdf6d0]        # 0x10014d8
 1021e08:	mov    QWORD PTR [rsp+0x58],0xffffffffffffffff
 1021e11:	mov    rcx,rsi
 1021e14:	call   QWORD PTR [rip+0xfffffffffffdf6be]        # 0x10014d8
 1021e1a:	mov    QWORD PTR [rsp+0x60],0xffffffffffffffff
 1021e23:	lea    rcx,[rsp+0x50]
 1021e28:	call   QWORD PTR [rip+0xfffffffffffdfc7a]        # 0x1001aa8
 1021e2e:	movzx  eax,r14b
 1021e32:	jmp    0x1021ea8
 1021e34:	mov    rax,QWORD PTR [rdi+0x8]
 1021e38:	movsxd rcx,DWORD PTR [rax+0x4]
 1021e3c:	mov    rbx,QWORD PTR [rcx+rdi*1+0x8]
 1021e41:	call   QWORD PTR [rip+0xfffffffffffdf709]        # 0x1001550
 1021e47:	mov    edx,eax
 1021e49:	mov    rax,QWORD PTR [rdi+0x8]
 1021e4d:	movsxd rcx,DWORD PTR [rax+0x4]
 1021e51:	add    rcx,0x8
 1021e55:	add    rcx,rdi
 1021e58:	mov    BYTE PTR [rsp+0x28],0x1
 1021e5d:	mov    BYTE PTR [rsp+0x20],0x1
 1021e62:	xor    r9d,r9d
 1021e65:	xor    r8d,r8d
 1021e68:	call   QWORD PTR [rbx]
 1021e6a:	nop
 1021e6b:	lea    rcx,[rsp+0x48]
 1021e70:	call   QWORD PTR [rip+0xfffffffffffdfc32]        # 0x1001aa8
 1021e76:	nop
 1021e77:	mov    rcx,r15
 1021e7a:	call   QWORD PTR [rip+0xfffffffffffdf658]        # 0x10014d8
 1021e80:	mov    QWORD PTR [rsp+0x58],0xffffffffffffffff
 1021e89:	mov    rcx,rsi
 1021e8c:	call   QWORD PTR [rip+0xfffffffffffdf646]        # 0x10014d8
 1021e92:	mov    QWORD PTR [rsp+0x60],0xffffffffffffffff
 1021e9b:	lea    rcx,[rsp+0x50]
 1021ea0:	call   QWORD PTR [rip+0xfffffffffffdfc02]        # 0x1001aa8
 1021ea6:	xor    al,al
 1021ea8:	mov    rcx,QWORD PTR [rbp+0x790]
 1021eaf:	xor    rcx,rsp
 1021eb2:	call   0x103ff40
 1021eb7:	add    rsp,0x8a8
 1021ebe:	pop    r15
 1021ec0:	pop    r14
 1021ec2:	pop    r13
 1021ec4:	pop    r12
 1021ec6:	pop    rdi
 1021ec7:	pop    rsi
 1021ec8:	pop    rbx
 1021ec9:	pop    rbp
 1021eca:	ret    
 1021ecb:	int3   
 1021ecc:	int3   
 1021ecd:	int3   
 1021ece:	int3   
 1021ecf:	int3   
 1021ed0:	int3   
 1021ed1:	int3   
 1021ed2:	int3   
 1021ed3:	int3   
 1021ed4:	int3   
 1021ed5:	int3   
 1021ed6:	int3   
 1021ed7:	int3   
 1021ed8:	int3   
 1021ed9:	int3   
 1021eda:	int3   
 1021edb:	int3   
 1021edc:	int3   
 1021edd:	int3   
 1021ede:	int3   
 1021edf:	int3   
 1021ee0:	rex push rbp
 1021ee2:	push   rbx
 1021ee3:	push   rsi
 1021ee4:	push   rdi
 1021ee5:	push   r12
 1021ee7:	push   r13
 1021ee9:	push   r14
 1021eeb:	push   r15
 1021eed:	lea    rbp,[rsp-0x48]
 1021ef2:	sub    rsp,0x148
 1021ef9:	mov    QWORD PTR [rbp+0x38],0xfffffffffffffffe
 1021f01:	mov    rbx,rcx
 1021f04:	xor    r12b,r12b
 1021f07:	mov    rax,QWORD PTR [rcx+0x8]
 1021f0b:	movsxd rcx,DWORD PTR [rax+0x4]
 1021f0f:	add    rcx,0x8
 1021f13:	add    rcx,rbx
 1021f16:	mov    rax,QWORD PTR [rcx]
 1021f19:	mov    BYTE PTR [rsp+0x28],0x1
 1021f1e:	mov    BYTE PTR [rsp+0x20],0x1
 1021f23:	xor    r9d,r9d
 1021f26:	xor    r8d,r8d
 1021f29:	mov    edx,0x4000c35e
 1021f2e:	call   QWORD PTR [rax]
 1021f30:	mov    rcx,QWORD PTR [rbx+0xe0]
 1021f37:	call   0x100fcf0
 1021f3c:	mov    QWORD PTR [rbp+0x90],rax
 1021f43:	test   rax,rax
 1021f46:	je     0x1022428
 1021f4c:	lea    rdi,[rip+0xfffffffffffde0ad]        # 0x1000000
 1021f53:	lea    r13,[rip+0xfffffffffffe2d2e]        # 0x1004c88
 1021f5a:	nop    WORD PTR [rax+rax*1+0x0]
 1021f60:	mov    rdx,rax
 1021f63:	mov    rcx,QWORD PTR [rbx+0xe0]
 1021f6a:	call   0x100fce0
 1021f6f:	mov    ecx,DWORD PTR [rax]
 1021f71:	dec    ecx
 1021f73:	cmp    ecx,0x8
 1021f76:	ja     0x1022405
 1021f7c:	movsxd rax,ecx
 1021f7f:	mov    ecx,DWORD PTR [rdi+rax*4+0x22ad0]
 1021f86:	add    rcx,rdi
 1021f89:	jmp    rcx
 1021f8b:	mov    eax,DWORD PTR [rip+0x41993]        # 0x1063924
 1021f91:	cmp    eax,0x2
 1021f94:	jl     0x1021fb3
 1021f96:	mov    rdx,QWORD PTR [rbp+0x90]
 1021f9d:	mov    rcx,QWORD PTR [rbx+0xe0]
 1021fa4:	call   0x100fce0
 1021fa9:	cmp    BYTE PTR [rax+0x10],0x0
 1021fad:	je     0x1022405
 1021fb3:	mov    rdx,QWORD PTR [rbp+0x90]
 1021fba:	mov    rcx,QWORD PTR [rbx+0xe0]
 1021fc1:	call   0x100fce0
 1021fc6:	cmp    DWORD PTR [rax+0x4],0x2
 1021fca:	jne    0x1022405
 1021fd0:	mov    rdx,QWORD PTR [rbp+0x90]
 1021fd7:	mov    rcx,rbx
 1021fda:	call   0x101db20
 1021fdf:	jmp    0x1022405
 1021fe4:	mov    eax,DWORD PTR [rip+0x4193a]        # 0x1063924
 1021fea:	cmp    eax,0x2
 1021fed:	jl     0x102200c
 1021fef:	mov    rdx,QWORD PTR [rbp+0x90]
 1021ff6:	mov    rcx,QWORD PTR [rbx+0xe0]
 1021ffd:	call   0x100fce0
 1022002:	cmp    BYTE PTR [rax+0x10],0x0
 1022006:	je     0x1022405
 102200c:	mov    rdx,QWORD PTR [rbp+0x90]
 1022013:	mov    rcx,QWORD PTR [rbx+0xe0]
 102201a:	call   0x100fce0
 102201f:	cmp    DWORD PTR [rax+0x4],0x2
 1022023:	jne    0x1022405
 1022029:	mov    rdx,QWORD PTR [rbp+0x90]
 1022030:	mov    rcx,rbx
 1022033:	call   0x101c6a0
 1022038:	jmp    0x1022405
 102203d:	mov    eax,DWORD PTR [rip+0x418e1]        # 0x1063924
 1022043:	cmp    eax,0x2
 1022046:	jl     0x1022065
 1022048:	mov    rdx,QWORD PTR [rbp+0x90]
 102204f:	mov    rcx,QWORD PTR [rbx+0xe0]
 1022056:	call   0x100fce0
 102205b:	cmp    BYTE PTR [rax+0x10],0x0
 102205f:	je     0x1022405
 1022065:	mov    rdx,QWORD PTR [rbp+0x90]
 102206c:	mov    rcx,QWORD PTR [rbx+0xe0]
 1022073:	call   0x100fce0
 1022078:	cmp    DWORD PTR [rax+0x4],0x2
 102207c:	jne    0x1022405
 1022082:	mov    rdx,QWORD PTR [rbp+0x90]
 1022089:	mov    rcx,rbx
 102208c:	call   0x101d590
 1022091:	jmp    0x1022405
 1022096:	mov    eax,DWORD PTR [rip+0x41888]        # 0x1063924
 102209c:	cmp    eax,0x2
 102209f:	jl     0x10220be
 10220a1:	mov    rdx,QWORD PTR [rbp+0x90]
 10220a8:	mov    rcx,QWORD PTR [rbx+0xe0]
 10220af:	call   0x100fce0
 10220b4:	cmp    BYTE PTR [rax+0x10],0x0
 10220b8:	je     0x1022405
 10220be:	mov    rdx,QWORD PTR [rbp+0x90]
 10220c5:	mov    rcx,QWORD PTR [rbx+0xe0]
 10220cc:	call   0x100fce0
 10220d1:	cmp    DWORD PTR [rax+0x4],0x2
 10220d5:	jne    0x1022405
 10220db:	mov    rdx,QWORD PTR [rbp+0x90]
 10220e2:	mov    rcx,rbx
 10220e5:	call   0x101cae0
 10220ea:	jmp    0x1022405
 10220ef:	mov    eax,DWORD PTR [rip+0x4182f]        # 0x1063924
 10220f5:	cmp    eax,0x2
 10220f8:	jl     0x1022117
 10220fa:	mov    rdx,QWORD PTR [rbp+0x90]
 1022101:	mov    rcx,QWORD PTR [rbx+0xe0]
 1022108:	call   0x100fce0
 102210d:	cmp    BYTE PTR [rax+0x10],0x0
 1022111:	je     0x1022405
 1022117:	mov    rdx,QWORD PTR [rbp+0x90]
 102211e:	mov    rcx,QWORD PTR [rbx+0xe0]
 1022125:	call   0x100fce0
 102212a:	cmp    DWORD PTR [rax+0x4],0x2
 102212e:	jne    0x1022405
 1022134:	lea    rdx,[rip+0xfffffffffffe2925]        # 0x1004a60
 102213b:	mov    rcx,rbx
 102213e:	call   0x101b510
 1022143:	jmp    0x1022405
 1022148:	mov    eax,DWORD PTR [rip+0x417d6]        # 0x1063924
 102214e:	cmp    eax,0x2
 1022151:	jl     0x1022170
 1022153:	mov    rdx,QWORD PTR [rbp+0x90]
 102215a:	mov    rcx,QWORD PTR [rbx+0xe0]
 1022161:	call   0x100fce0
 1022166:	cmp    BYTE PTR [rax+0x10],0x0
 102216a:	je     0x1022405
 1022170:	mov    rdx,QWORD PTR [rbp+0x90]
 1022177:	mov    rcx,QWORD PTR [rbx+0xe0]
 102217e:	call   0x100fce0
 1022183:	cmp    DWORD PTR [rax+0x4],0x2
 1022187:	jne    0x1022405
 102218d:	mov    rdx,QWORD PTR [rbp+0x90]
 1022194:	mov    rcx,QWORD PTR [rbx+0xe0]
 102219b:	call   0x100fce0
 10221a0:	lea    rcx,[rax+0x20]
 10221a4:	call   QWORD PTR [rip+0xfffffffffffdf93e]        # 0x1001ae8
 10221aa:	mov    r8,rax
 10221ad:	mov    edx,0x2
 10221b2:	mov    rcx,rbx
 10221b5:	call   0x101aa80
 10221ba:	jmp    0x1022405
 10221bf:	cmp    DWORD PTR [rbx+0x24],0x9
 10221c3:	jl     0x1022405
 10221c9:	mov    r12b,0x1
 10221cc:	lea    rdx,[rip+0xfffffffffffe29d5]        # 0x1004ba8
 10221d3:	lea    rcx,[rbp+0xa8]
 10221da:	call   QWORD PTR [rip+0xfffffffffffdf8d0]        # 0x1001ab0
 10221e0:	nop
 10221e1:	lea    rdx,[rip+0xfffffffffffe29e0]        # 0x1004bc8
 10221e8:	lea    rcx,[rbp+0xa8]
 10221ef:	call   QWORD PTR [rip+0xfffffffffffdf89b]        # 0x1001a90
 10221f5:	mov    r15,QWORD PTR [rbx+0xe8]
 10221fc:	test   r15,r15
 10221ff:	je     0x10222e5
 1022205:	lea    r13,[rip+0xfffffffffffe29cc]        # 0x1004bd8
 102220c:	nop    DWORD PTR [rax+0x0]
 1022210:	test   BYTE PTR [r15],0x1
 1022214:	je     0x10222ca
 102221a:	lea    rcx,[rbp+0xa0]
 1022221:	call   QWORD PTR [rip+0xfffffffffffdf899]        # 0x1001ac0
 1022227:	nop
 1022228:	mov    QWORD PTR [rsp+0x20],r13
 102222d:	lea    r9,[rip+0x416fc]        # 0x1063930
 1022234:	mov    r8d,DWORD PTR [rbx+0x24]
 1022238:	lea    rdx,[rip+0xfffffffffffe29c1]        # 0x1004c00
 102223f:	lea    rcx,[rbp+0xa0]
 1022246:	call   QWORD PTR [rip+0xfffffffffffdf7f4]        # 0x1001a40
 102224c:	lea    rdx,[rbp+0x0]
 1022250:	mov    rcx,r15
 1022253:	call   0x1012e00
 1022258:	nop
 1022259:	mov    r14,QWORD PTR [rbx]
 102225c:	mov    rcx,rax
 102225f:	call   QWORD PTR [rip+0xfffffffffffdf883]        # 0x1001ae8
 1022265:	mov    rsi,rax
 1022268:	lea    rcx,[rbp+0xa8]
 102226f:	call   QWORD PTR [rip+0xfffffffffffdf873]        # 0x1001ae8
 1022275:	mov    rdi,rax
 1022278:	lea    rcx,[rbp+0xa0]
 102227f:	call   QWORD PTR [rip+0xfffffffffffdf863]        # 0x1001ae8
 1022285:	mov    rdx,rax
 1022288:	mov    BYTE PTR [rsp+0x38],0x0
 102228d:	mov    BYTE PTR [rsp+0x30],0x1
 1022292:	lea    rax,[rsp+0x78]
 1022297:	mov    QWORD PTR [rsp+0x28],rax
 102229c:	mov    QWORD PTR [rsp+0x20],rsi
 10222a1:	mov    r9b,0x1
 10222a4:	mov    r8,rdi
 10222a7:	mov    rcx,rbx
 10222aa:	call   QWORD PTR [r14+0x118]
 10222b1:	nop
 10222b2:	lea    rcx,[rbp+0x0]
 10222b6:	call   QWORD PTR [rip+0xfffffffffffdf7ec]        # 0x1001aa8
 10222bc:	nop
 10222bd:	lea    rcx,[rbp+0xa0]
 10222c4:	call   QWORD PTR [rip+0xfffffffffffdf7de]        # 0x1001aa8
 10222ca:	mov    r15,QWORD PTR [r15+0x18]
 10222ce:	test   r15,r15
 10222d1:	jne    0x1022210
 10222d7:	lea    r13,[rip+0xfffffffffffe29aa]        # 0x1004c88
 10222de:	lea    rdi,[rip+0xfffffffffffddd1b]        # 0x1000000
 10222e5:	lea    rcx,[rbp+0xa8]
 10222ec:	call   QWORD PTR [rip+0xfffffffffffdf7b6]        # 0x1001aa8
 10222f2:	jmp    0x1022405
 10222f7:	mov    r12b,0x1
 10222fa:	lea    rdx,[rip+0xfffffffffffe280f]        # 0x1004b10
 1022301:	lea    rcx,[rbp-0x58]
 1022305:	call   QWORD PTR [rip+0xfffffffffffdf7a5]        # 0x1001ab0
 102230b:	nop
 102230c:	lea    rdx,[rip+0xfffffffffffe28b5]        # 0x1004bc8
 1022313:	lea    rcx,[rbp-0x58]
 1022317:	call   QWORD PTR [rip+0xfffffffffffdf773]        # 0x1001a90
 102231d:	mov    r15,QWORD PTR [rbx+0xe8]
 1022324:	test   r15,r15
 1022327:	je     0x10223ef
 102232d:	nop    DWORD PTR [rax]
 1022330:	test   BYTE PTR [r15],0x1
 1022334:	je     0x10223db
 102233a:	lea    rcx,[rbp-0x60]
 102233e:	call   QWORD PTR [rip+0xfffffffffffdf77c]        # 0x1001ac0
 1022344:	nop
 1022345:	mov    QWORD PTR [rsp+0x20],r13
 102234a:	lea    r9,[rip+0x415df]        # 0x1063930
 1022351:	mov    r8d,DWORD PTR [rbx+0x24]
 1022355:	lea    rdx,[rip+0xfffffffffffe28a4]        # 0x1004c00
 102235c:	lea    rcx,[rbp-0x60]
 1022360:	call   QWORD PTR [rip+0xfffffffffffdf6da]        # 0x1001a40
 1022366:	lea    rdx,[rbp+0x18]
 102236a:	mov    rcx,r15
 102236d:	call   0x1012e00
 1022372:	nop
 1022373:	mov    r14,QWORD PTR [rbx]
 1022376:	mov    rcx,rax
 1022379:	call   QWORD PTR [rip+0xfffffffffffdf769]        # 0x1001ae8
 102237f:	mov    rsi,rax
 1022382:	lea    rcx,[rbp-0x58]
 1022386:	call   QWORD PTR [rip+0xfffffffffffdf75c]        # 0x1001ae8
 102238c:	mov    rdi,rax
 102238f:	lea    rcx,[rbp-0x60]
 1022393:	call   QWORD PTR [rip+0xfffffffffffdf74f]        # 0x1001ae8
 1022399:	mov    rdx,rax
 102239c:	mov    BYTE PTR [rsp+0x38],0x0
 10223a1:	mov    BYTE PTR [rsp+0x30],0x1
 10223a6:	lea    rax,[rsp+0x78]
 10223ab:	mov    QWORD PTR [rsp+0x28],rax
 10223b0:	mov    QWORD PTR [rsp+0x20],rsi
 10223b5:	mov    r9b,0x1
 10223b8:	mov    r8,rdi
 10223bb:	mov    rcx,rbx
 10223be:	call   QWORD PTR [r14+0x118]
 10223c5:	nop
 10223c6:	lea    rcx,[rbp+0x18]
 10223ca:	call   QWORD PTR [rip+0xfffffffffffdf6d8]        # 0x1001aa8
 10223d0:	nop
 10223d1:	lea    rcx,[rbp-0x60]
 10223d5:	call   QWORD PTR [rip+0xfffffffffffdf6cd]        # 0x1001aa8
 10223db:	mov    r15,QWORD PTR [r15+0x18]
 10223df:	test   r15,r15
 10223e2:	jne    0x1022330
 10223e8:	lea    rdi,[rip+0xfffffffffffddc11]        # 0x1000000
 10223ef:	lea    rcx,[rbp-0x58]
 10223f3:	call   QWORD PTR [rip+0xfffffffffffdf6af]        # 0x1001aa8
 10223f9:	jmp    0x1022405
 10223fb:	mov    dl,0x1
 10223fd:	mov    rcx,rbx
 1022400:	call   0x1022b00
 1022405:	lea    rdx,[rbp+0x90]
 102240c:	mov    rcx,QWORD PTR [rbx+0xe0]
 1022413:	call   0x100fd00
 1022418:	mov    rax,QWORD PTR [rbp+0x90]
 102241f:	test   rax,rax
 1022422:	jne    0x1021f60
 1022428:	xor    eax,eax
 102242a:	mov    QWORD PTR [rbp+0x20],rax
 102242e:	mov    QWORD PTR [rbp+0x28],rax
 1022432:	mov    QWORD PTR [rbp+0x30],rax
 1022436:	lea    rcx,[rbp-0x70]
 102243a:	call   QWORD PTR [rip+0xfffffffffffdf680]        # 0x1001ac0
 1022440:	nop
 1022441:	lea    r9,[rip+0x414e8]        # 0x1063930
 1022448:	mov    r8d,DWORD PTR [rbx+0x24]
 102244c:	lea    rdx,[rip+0xfffffffffffe284d]        # 0x1004ca0
 1022453:	lea    rcx,[rbp-0x70]
 1022457:	call   QWORD PTR [rip+0xfffffffffffdf5e3]        # 0x1001a40
 102245d:	mov    r14,QWORD PTR [rbx+0xe8]
 1022464:	test   r14,r14
 1022467:	je     0x10224de
 1022469:	nop    DWORD PTR [rax+0x0]
 1022470:	test   BYTE PTR [r14],0x1
 1022474:	je     0x10224d5
 1022476:	lea    rdx,[rbp+0x10]
 102247a:	mov    rcx,r14
 102247d:	call   0x1012e00
 1022482:	nop
 1022483:	mov    rsi,QWORD PTR [rbx]
 1022486:	mov    rcx,rax
 1022489:	call   QWORD PTR [rip+0xfffffffffffdf659]        # 0x1001ae8
 102248f:	mov    rdi,rax
 1022492:	lea    rcx,[rbp-0x70]
 1022496:	call   QWORD PTR [rip+0xfffffffffffdf64c]        # 0x1001ae8
 102249c:	mov    rdx,rax
 102249f:	mov    BYTE PTR [rsp+0x38],0x0
 10224a4:	mov    BYTE PTR [rsp+0x30],0x1
 10224a9:	lea    rax,[rbp+0x20]
 10224ad:	mov    QWORD PTR [rsp+0x28],rax
 10224b2:	mov    QWORD PTR [rsp+0x20],rdi
 10224b7:	mov    r9b,0x1
 10224ba:	lea    r8,[rip+0xfffffffffffe282f]        # 0x1004cf0
 10224c1:	mov    rcx,rbx
 10224c4:	call   QWORD PTR [rsi+0x118]
 10224ca:	nop
 10224cb:	lea    rcx,[rbp+0x10]
 10224cf:	call   QWORD PTR [rip+0xfffffffffffdf5d3]        # 0x1001aa8
 10224d5:	mov    r14,QWORD PTR [r14+0x18]
 10224d9:	test   r14,r14
 10224dc:	jne    0x1022470
 10224de:	mov    eax,DWORD PTR [rip+0x41440]        # 0x1063924
 10224e4:	cmp    eax,0x2
 10224e7:	jge    0x1022ab2
 10224ed:	test   r12b,r12b
 10224f0:	je     0x1022ab2
 10224f6:	cmp    BYTE PTR [rbx+0x28],0x0
 10224fa:	jne    0x102281f
 1022500:	cmp    BYTE PTR [rbx+0x78],0x0
 1022504:	jne    0x102281f
 102250a:	mov    rax,QWORD PTR [rbx+0x8]
 102250e:	movsxd rcx,DWORD PTR [rax+0x4]
 1022512:	add    rcx,0x8
 1022516:	add    rcx,rbx
 1022519:	mov    rax,QWORD PTR [rcx]
 102251c:	mov    BYTE PTR [rsp+0x28],0x1
 1022521:	mov    BYTE PTR [rsp+0x20],0x1
 1022526:	xor    r9d,r9d
 1022529:	xor    r8d,r8d
 102252c:	mov    edx,0x4000c46d
 1022531:	call   QWORD PTR [rax]
 1022533:	lea    rcx,[rbp+0x98]
 102253a:	call   QWORD PTR [rip+0xfffffffffffdf580]        # 0x1001ac0
 1022540:	nop
 1022541:	lea    rcx,[rbp-0x68]
 1022545:	call   QWORD PTR [rip+0xfffffffffffdf575]        # 0x1001ac0
 102254b:	nop
 102254c:	mov    r15,QWORD PTR [rbx+0xe8]
 1022553:	test   r15,r15
 1022556:	je     0x1022808
 102255c:	lea    r12,[rip+0xfffffffffffdf9f1]        # 0x1001f54
 1022563:	lea    r13,[rip+0x40dc6]        # 0x1063330
 102256a:	nop    WORD PTR [rax+rax*1+0x0]
 1022570:	test   BYTE PTR [r15],0x1
 1022574:	je     0x10227fb
 102257a:	mov    rdx,QWORD PTR [rbx+0xd8]
 1022581:	cmp    BYTE PTR [rdx+0xbc],0x0
 1022588:	jne    0x10225df
 102258a:	lea    rdx,[rbp-0x48]
 102258e:	mov    rcx,r15
 1022591:	call   0x1012e00
 1022596:	nop
 1022597:	mov    rcx,rax
 102259a:	call   QWORD PTR [rip+0xfffffffffffdf548]        # 0x1001ae8
 10225a0:	mov    r8,rax
 10225a3:	lea    r9,[rip+0xfffffffffffe2776]        # 0x1004d20
 10225aa:	lea    rdx,[rbp-0x30]
 10225ae:	mov    rcx,rbx
 10225b1:	call   0x101f6e0
 10225b6:	nop
 10225b7:	mov    rdx,rax
 10225ba:	lea    rcx,[rbp+0x98]
 10225c1:	call   QWORD PTR [rip+0xfffffffffffdf4d9]        # 0x1001aa0
 10225c7:	nop
 10225c8:	lea    rcx,[rbp-0x30]
 10225cc:	call   QWORD PTR [rip+0xfffffffffffdf4d6]        # 0x1001aa8
 10225d2:	nop
 10225d3:	lea    rcx,[rbp-0x48]
 10225d7:	call   QWORD PTR [rip+0xfffffffffffdf4cb]        # 0x1001aa8
 10225dd:	jmp    0x10225f0
 10225df:	add    rdx,0x78
 10225e3:	lea    rcx,[rbp+0x98]
 10225ea:	call   QWORD PTR [rip+0xfffffffffffdf4b0]        # 0x1001aa0
 10225f0:	lea    rcx,[rbp+0x98]
 10225f7:	call   QWORD PTR [rip+0xfffffffffffdf4eb]        # 0x1001ae8
 10225fd:	mov    rdi,rax
 1022600:	lea    rcx,[rbx+0x10]
 1022604:	call   QWORD PTR [rip+0xfffffffffffdf4de]        # 0x1001ae8
 102260a:	mov    rdx,rax
 102260d:	mov    r8,rdi
 1022610:	lea    rcx,[rbp-0x20]
 1022614:	call   0x1030800
 1022619:	nop
 102261a:	mov    rdx,rax
 102261d:	lea    rcx,[rbp+0x98]
 1022624:	call   QWORD PTR [rip+0xfffffffffffdf476]        # 0x1001aa0
 102262a:	nop
 102262b:	lea    rcx,[rbp-0x20]
 102262f:	call   QWORD PTR [rip+0xfffffffffffdf473]        # 0x1001aa8
 1022635:	lea    rdx,[rbp-0x40]
 1022639:	mov    rcx,r15
 102263c:	call   0x1012e00
 1022641:	mov    rsi,rax
 1022644:	mov    rdx,QWORD PTR [rbx+0xd8]
 102264b:	add    rdx,0x78
 102264f:	lea    r8,[rip+0xfffffffffffdf8b2]        # 0x1001f08
 1022656:	lea    rcx,[rbp-0x10]
 102265a:	call   0x100af10
 102265f:	mov    rdi,rax
 1022662:	lea    rdx,[rbp+0x8]
 1022666:	mov    rcx,r15
 1022669:	call   0x1012e00
 102266e:	nop
 102266f:	mov    rdx,QWORD PTR [rbx+0xd8]
 1022676:	lea    r8,[rip+0xfffffffffffe2493]        # 0x1004b10
 102267d:	mov    QWORD PTR [rsp+0x60],r8
 1022682:	mov    rcx,QWORD PTR [rsi]
 1022685:	mov    QWORD PTR [rsp+0x58],rcx
 102268a:	mov    rcx,QWORD PTR [rbx+0x10]
 102268e:	mov    QWORD PTR [rsp+0x50],rcx
 1022693:	mov    QWORD PTR [rsp+0x48],r12
 1022698:	mov    rcx,QWORD PTR [rdi]
 102269b:	mov    QWORD PTR [rsp+0x40],rcx
 10226a0:	mov    rcx,QWORD PTR [rdx+0x78]
 10226a4:	mov    QWORD PTR [rsp+0x38],rcx
 10226a9:	mov    QWORD PTR [rsp+0x30],r8
 10226ae:	mov    rax,QWORD PTR [rax]
 10226b1:	mov    QWORD PTR [rsp+0x28],rax
 10226b6:	mov    QWORD PTR [rsp+0x20],r13
 10226bb:	mov    r9,QWORD PTR [rbx+0x10]
 10226bf:	mov    r8,QWORD PTR [rbp+0x98]
 10226c6:	lea    rdx,[rip+0xfffffffffffe2663]        # 0x1004d30
 10226cd:	lea    rcx,[rbp-0x68]
 10226d1:	call   QWORD PTR [rip+0xfffffffffffdf369]        # 0x1001a40
 10226d7:	nop
 10226d8:	lea    rcx,[rbp+0x8]
 10226dc:	call   QWORD PTR [rip+0xfffffffffffdf3c6]        # 0x1001aa8
 10226e2:	nop
 10226e3:	lea    rcx,[rbp-0x10]
 10226e7:	call   QWORD PTR [rip+0xfffffffffffdf3bb]        # 0x1001aa8
 10226ed:	nop
 10226ee:	lea    rcx,[rbp-0x40]
 10226f2:	call   QWORD PTR [rip+0xfffffffffffdf3b0]        # 0x1001aa8
 10226f8:	mov    r11,QWORD PTR [rbx+0x8]
 10226fc:	movsxd rax,DWORD PTR [r11+0x4]
 1022700:	mov    r14,QWORD PTR [rax+rbx*1+0x8]
 1022705:	mov    rcx,QWORD PTR [rbx+0xd8]
 102270c:	add    rcx,0x78
 1022710:	call   QWORD PTR [rip+0xfffffffffffdf3d2]        # 0x1001ae8
 1022716:	mov    rsi,rax
 1022719:	lea    rcx,[rbp-0x68]
 102271d:	call   QWORD PTR [rip+0xfffffffffffdf3c5]        # 0x1001ae8
 1022723:	mov    rdi,rax
 1022726:	mov    rcx,QWORD PTR [rbx+0xd8]
 102272d:	sub    rcx,0xffffffffffffff80
 1022731:	call   QWORD PTR [rip+0xfffffffffffdf3b1]        # 0x1001ae8
 1022737:	mov    rdx,rax
 102273a:	mov    rcx,QWORD PTR [rbx+0xd8]
 1022741:	add    rcx,0x158
 1022748:	mov    BYTE PTR [rsp+0x48],0x0
 102274d:	mov    r8,QWORD PTR [rip+0x40bd4]        # 0x1063328
 1022754:	mov    QWORD PTR [rsp+0x40],r8
 1022759:	mov    DWORD PTR [rsp+0x38],0x20
 1022761:	lea    rax,[rsp+0x78]
 1022766:	mov    QWORD PTR [rsp+0x30],rax
 102276b:	mov    DWORD PTR [rsp+0x28],0x1
 1022773:	mov    BYTE PTR [rsp+0x20],0x0
 1022778:	mov    r9,rsi
 102277b:	mov    r8,rdi
 102277e:	call   0x1031100
 1022783:	mov    edx,eax
 1022785:	mov    rax,QWORD PTR [rbx+0x8]
 1022789:	movsxd rcx,DWORD PTR [rax+0x4]
 102278d:	add    rcx,0x8
 1022791:	add    rcx,rbx
 1022794:	mov    r9b,0x1
 1022797:	mov    r8d,0xc000c426
 102279d:	call   QWORD PTR [r14+0x20]
 10227a1:	test   al,al
 10227a3:	je     0x10227fb
 10227a5:	mov    eax,DWORD PTR [rip+0x41179]        # 0x1063924
 10227ab:	cmp    eax,0x2
 10227ae:	jge    0x10227d7
 10227b0:	mov    r8d,0x1
 10227b6:	or     edx,0xffffffff
 10227b9:	mov    rcx,QWORD PTR [rsp+0x78]
 10227be:	call   QWORD PTR [rip+0xfffffffffffdebcc]        # 0x1001390
 10227c4:	cmp    eax,0xc0
 10227c9:	je     0x10227d7
 10227cb:	lea    rcx,[rsp+0x78]
 10227d0:	call   0x1034510
 10227d5:	jmp    0x10227f2
 10227d7:	mov    rdx,QWORD PTR [rbx+0xd8]
 10227de:	add    rdx,0x158
 10227e5:	mov    r8b,0x1
 10227e8:	lea    rcx,[rsp+0x78]
 10227ed:	call   0x10345a0
 10227f2:	lea    rcx,[rbp-0x80]
 10227f6:	call   0x1034510
 10227fb:	mov    r15,QWORD PTR [r15+0x18]
 10227ff:	test   r15,r15
 1022802:	jne    0x1022570
 1022808:	lea    rcx,[rbp-0x68]
 102280c:	call   QWORD PTR [rip+0xfffffffffffdf296]        # 0x1001aa8
 1022812:	nop
 1022813:	lea    rcx,[rbp+0x98]
 102281a:	jmp    0x1022aab
 102281f:	mov    rax,QWORD PTR [rbx+0xd8]
 1022826:	cmp    BYTE PTR [rax+0xbc],0x0
 102282d:	jne    0x1022ab2
 1022833:	mov    rax,QWORD PTR [rbx+0x8]
 1022837:	movsxd rcx,DWORD PTR [rax+0x4]
 102283b:	add    rcx,0x8
 102283f:	add    rcx,rbx
 1022842:	mov    rax,QWORD PTR [rcx]
 1022845:	mov    BYTE PTR [rsp+0x28],0x1
 102284a:	mov    BYTE PTR [rsp+0x20],0x1
 102284f:	xor    r9d,r9d
 1022852:	xor    r8d,r8d
 1022855:	mov    edx,0x4000c46d
 102285a:	call   QWORD PTR [rax]
 102285c:	lea    rcx,[rsp+0x70]
 1022861:	call   QWORD PTR [rip+0xfffffffffffdf259]        # 0x1001ac0
 1022867:	nop
 1022868:	mov    r15,QWORD PTR [rbx+0xe8]
 102286f:	test   r15,r15
 1022872:	je     0x1022aa6
 1022878:	lea    r12,[rip+0xfffffffffffdf6d5]        # 0x1001f54
 102287f:	lea    r13,[rip+0x40aaa]        # 0x1063330
 1022886:	test   BYTE PTR [r15],0x1
 102288a:	je     0x1022a99
 1022890:	lea    rdx,[rbp-0x38]
 1022894:	mov    rcx,r15
 1022897:	call   0x1012e00
 102289c:	nop
 102289d:	mov    rcx,rax
 10228a0:	call   QWORD PTR [rip+0xfffffffffffdf242]        # 0x1001ae8
 10228a6:	mov    r8,rax
 10228a9:	lea    r9,[rip+0xfffffffffffe2470]        # 0x1004d20
 10228b0:	lea    rdx,[rbp-0x50]
 10228b4:	mov    rcx,rbx
 10228b7:	call   0x101f6e0
 10228bc:	nop
 10228bd:	lea    rcx,[rbp-0x38]
 10228c1:	call   QWORD PTR [rip+0xfffffffffffdf1e1]        # 0x1001aa8
 10228c7:	lea    rdx,[rbp-0x8]
 10228cb:	mov    rcx,r15
 10228ce:	call   0x1012e00
 10228d3:	mov    rsi,rax
 10228d6:	mov    rdx,QWORD PTR [rbx+0xd8]
 10228dd:	add    rdx,0x78
 10228e1:	lea    r8,[rip+0xfffffffffffdf620]        # 0x1001f08
 10228e8:	lea    rcx,[rbp-0x18]
 10228ec:	call   0x100af10
 10228f1:	mov    rdi,rax
 10228f4:	lea    rdx,[rbp-0x28]
 10228f8:	mov    rcx,r15
 10228fb:	call   0x1012e00
 1022900:	mov    r11,rax
 1022903:	mov    rax,QWORD PTR [rbx+0xd8]
 102290a:	lea    rdx,[rip+0xfffffffffffe21ff]        # 0x1004b10
 1022911:	mov    QWORD PTR [rsp+0x60],rdx
 1022916:	mov    rcx,QWORD PTR [rsi]
 1022919:	mov    QWORD PTR [rsp+0x58],rcx
 102291e:	mov    rcx,QWORD PTR [rbx+0x10]
 1022922:	mov    QWORD PTR [rsp+0x50],rcx
 1022927:	mov    QWORD PTR [rsp+0x48],r12
 102292c:	mov    rcx,QWORD PTR [rdi]
 102292f:	mov    QWORD PTR [rsp+0x40],rcx
 1022934:	mov    rax,QWORD PTR [rax+0x78]
 1022938:	mov    QWORD PTR [rsp+0x38],rax
 102293d:	mov    QWORD PTR [rsp+0x30],rdx
 1022942:	mov    rax,QWORD PTR [r11]
 1022945:	mov    QWORD PTR [rsp+0x28],rax
 102294a:	mov    QWORD PTR [rsp+0x20],r13
 102294f:	mov    r9,QWORD PTR [rbx+0x10]
 1022953:	mov    r8,QWORD PTR [rbp-0x50]
 1022957:	lea    rdx,[rip+0xfffffffffffe23d2]        # 0x1004d30
 102295e:	lea    rcx,[rsp+0x70]
 1022963:	call   QWORD PTR [rip+0xfffffffffffdf0d7]        # 0x1001a40
 1022969:	nop
 102296a:	lea    rcx,[rbp-0x28]
 102296e:	call   QWORD PTR [rip+0xfffffffffffdf134]        # 0x1001aa8
 1022974:	nop
 1022975:	lea    rcx,[rbp-0x18]
 1022979:	call   QWORD PTR [rip+0xfffffffffffdf129]        # 0x1001aa8
 102297f:	nop
 1022980:	lea    rcx,[rbp-0x8]
 1022984:	call   QWORD PTR [rip+0xfffffffffffdf11e]        # 0x1001aa8
 102298a:	mov    r11,QWORD PTR [rbx+0x8]
 102298e:	movsxd rax,DWORD PTR [r11+0x4]
 1022992:	mov    r14,QWORD PTR [rax+rbx*1+0x8]
 1022997:	mov    rcx,QWORD PTR [rbx+0xd8]
 102299e:	add    rcx,0x78
 10229a2:	call   QWORD PTR [rip+0xfffffffffffdf140]        # 0x1001ae8
 10229a8:	mov    rsi,rax
 10229ab:	lea    rcx,[rsp+0x70]
 10229b0:	call   QWORD PTR [rip+0xfffffffffffdf132]        # 0x1001ae8
 10229b6:	mov    rdi,rax
 10229b9:	mov    rcx,QWORD PTR [rbx+0xd8]
 10229c0:	sub    rcx,0xffffffffffffff80
 10229c4:	call   QWORD PTR [rip+0xfffffffffffdf11e]        # 0x1001ae8
 10229ca:	mov    rdx,rax
 10229cd:	mov    rcx,QWORD PTR [rbx+0xd8]
 10229d4:	add    rcx,0x158
 10229db:	mov    BYTE PTR [rsp+0x48],0x0
 10229e0:	mov    r8,QWORD PTR [rip+0x40941]        # 0x1063328
 10229e7:	mov    QWORD PTR [rsp+0x40],r8
 10229ec:	mov    DWORD PTR [rsp+0x38],0x20
 10229f4:	lea    rax,[rsp+0x78]
 10229f9:	mov    QWORD PTR [rsp+0x30],rax
 10229fe:	mov    DWORD PTR [rsp+0x28],0x1
 1022a06:	mov    BYTE PTR [rsp+0x20],0x0
 1022a0b:	mov    r9,rsi
 1022a0e:	mov    r8,rdi
 1022a11:	call   0x1031100
 1022a16:	mov    edx,eax
 1022a18:	mov    rax,QWORD PTR [rbx+0x8]
 1022a1c:	movsxd rcx,DWORD PTR [rax+0x4]
 1022a20:	add    rcx,0x8
 1022a24:	add    rcx,rbx
 1022a27:	mov    r9b,0x1
 1022a2a:	mov    r8d,0xc000c426
 1022a30:	call   QWORD PTR [r14+0x20]
 1022a34:	test   al,al
 1022a36:	je     0x1022a8f
 1022a38:	mov    eax,DWORD PTR [rip+0x40ee6]        # 0x1063924
 1022a3e:	cmp    eax,0x2
 1022a41:	jge    0x1022a6a
 1022a43:	mov    r8d,0x1
 1022a49:	or     edx,0xffffffff
 1022a4c:	mov    rcx,QWORD PTR [rsp+0x78]
 1022a51:	call   QWORD PTR [rip+0xfffffffffffde939]        # 0x1001390
 1022a57:	cmp    eax,0xc0
 1022a5c:	je     0x1022a6a
 1022a5e:	lea    rcx,[rsp+0x78]
 1022a63:	call   0x1034510
 1022a68:	jmp    0x1022a85
 1022a6a:	mov    rdx,QWORD PTR [rbx+0xd8]
 1022a71:	add    rdx,0x158
 1022a78:	mov    r8b,0x1
 1022a7b:	lea    rcx,[rsp+0x78]
 1022a80:	call   0x10345a0
 1022a85:	lea    rcx,[rbp-0x80]
 1022a89:	call   0x1034510
 1022a8e:	nop
 1022a8f:	lea    rcx,[rbp-0x50]
 1022a93:	call   QWORD PTR [rip+0xfffffffffffdf00f]        # 0x1001aa8
 1022a99:	mov    r15,QWORD PTR [r15+0x18]
 1022a9d:	test   r15,r15
 1022aa0:	jne    0x1022886
 1022aa6:	lea    rcx,[rsp+0x70]
 1022aab:	call   QWORD PTR [rip+0xfffffffffffdeff7]        # 0x1001aa8
 1022ab1:	nop
 1022ab2:	lea    rcx,[rbp-0x70]
 1022ab6:	call   QWORD PTR [rip+0xfffffffffffdefec]        # 0x1001aa8
 1022abc:	add    rsp,0x148
 1022ac3:	pop    r15
 1022ac5:	pop    r14
 1022ac7:	pop    r13
 1022ac9:	pop    r12
 1022acb:	pop    rdi
 1022acc:	pop    rsi
 1022acd:	pop    rbx
 1022ace:	pop    rbp
 1022acf:	ret    
 1022ad0:	mul    DWORD PTR [rdx]
 1022ad2:	add    al,BYTE PTR [rax]
 1022ad4:	sti    
 1022ad5:	and    eax,DWORD PTR [rdx]
 1022ad7:	add    BYTE PTR [rdi-0x10fffddf],bh
 1022add:	and    BYTE PTR [rdx],al
 1022adf:	add    BYTE PTR [rax+0x21],cl
 1022ae2:	add    al,BYTE PTR [rax]
 1022ae4:	in     al,0x1f
 1022ae6:	add    al,BYTE PTR [rax]
 1022ae8:	cmp    eax,0x96000220
 1022aed:	and    BYTE PTR [rdx],al
 1022aef:	add    BYTE PTR [rbx-0x33fffde1],cl
 1022af5:	int3   
 1022af6:	int3   
 1022af7:	int3   
 1022af8:	int3   
 1022af9:	int3   
 1022afa:	int3   
 1022afb:	int3   
 1022afc:	int3   
 1022afd:	int3   
 1022afe:	int3   
 1022aff:	int3   
 1022b00:	mov    QWORD PTR [rsp+0x10],rbx
 1022b05:	mov    QWORD PTR [rsp+0x18],rsi
 1022b0a:	mov    QWORD PTR [rsp+0x8],rcx
 1022b0f:	push   rdi
 1022b10:	sub    rsp,0x50
 1022b14:	mov    rsi,rcx
 1022b17:	mov    BYTE PTR [rsp+0x30],0x0
 1022b1c:	xor    edi,edi
 1022b1e:	mov    r9d,edi
 1022b21:	test   dl,dl
 1022b23:	setne  r9b
 1022b27:	mov    rcx,QWORD PTR [rcx+0x80]
 1022b2e:	cmp    rcx,0xffffffffffffffff
 1022b32:	je     0x1022b6a
 1022b34:	mov    rax,QWORD PTR [rsi+0x8]
 1022b38:	movsxd r8,DWORD PTR [rax+0x4]
 1022b3c:	mov    rbx,QWORD PTR [r8+rsi*1+0x8]
 1022b41:	mov    edx,r9d
 1022b44:	call   0x10407b6
 1022b49:	mov    edx,eax
 1022b4b:	mov    rax,QWORD PTR [rsi+0x8]
 1022b4f:	movsxd rcx,DWORD PTR [rax+0x4]
 1022b53:	add    rcx,0x8
 1022b57:	add    rcx,rsi
 1022b5a:	mov    r9b,0x1
 1022b5d:	mov    r8d,0xc000c378
 1022b63:	call   QWORD PTR [rbx+0x20]
 1022b66:	test   al,al
 1022b68:	je     0x1022b6f
 1022b6a:	mov    edi,0x1
 1022b6f:	mov    BYTE PTR [rsp+0x30],dil
 1022b74:	jmp    0x1022bac
 1022b76:	mov    rdx,QWORD PTR [rsp+0x60]
 1022b7b:	mov    rax,QWORD PTR [rdx+0x8]
 1022b7f:	movsxd rcx,DWORD PTR [rax+0x4]
 1022b83:	add    rcx,0x8
 1022b87:	add    rcx,rdx
 1022b8a:	mov    rax,QWORD PTR [rcx]
 1022b8d:	mov    BYTE PTR [rsp+0x28],0x1
 1022b92:	mov    BYTE PTR [rsp+0x20],0x1
 1022b97:	mov    r9d,0x2
 1022b9d:	xor    r8d,r8d
 1022ba0:	mov    edx,0xc000c47c
 1022ba5:	call   QWORD PTR [rax]
 1022ba7:	movzx  edi,BYTE PTR [rsp+0x30]
 1022bac:	movzx  eax,dil
 1022bb0:	mov    rbx,QWORD PTR [rsp+0x68]
 1022bb5:	mov    rsi,QWORD PTR [rsp+0x70]
 1022bba:	add    rsp,0x50
 1022bbe:	pop    rdi
 1022bbf:	ret    
 1022bc0:	int3   
 1022bc1:	int3   
 1022bc2:	int3   
 1022bc3:	int3   
 1022bc4:	int3   
 1022bc5:	int3   
 1022bc6:	int3   
 1022bc7:	int3   
 1022bc8:	int3   
 1022bc9:	int3   
 1022bca:	int3   
 1022bcb:	int3   
 1022bcc:	int3   
 1022bcd:	int3   
 1022bce:	int3   
 1022bcf:	int3   
 1022bd0:	mov    rax,rsp
 1022bd3:	push   rbp
 1022bd4:	push   rsi
 1022bd5:	push   rdi
 1022bd6:	sub    rsp,0x80
 1022bdd:	mov    QWORD PTR [rax-0x38],0xfffffffffffffffe
 1022be5:	mov    QWORD PTR [rax+0x10],rbx
 1022be9:	mov    rbx,r8
 1022bec:	mov    rdi,rdx
 1022bef:	mov    rbp,rcx
 1022bf2:	lea    rcx,[rax+0x8]
 1022bf6:	call   QWORD PTR [rip+0xfffffffffffdeec4]        # 0x1001ac0
 1022bfc:	nop
 1022bfd:	mov    rdx,QWORD PTR [rbp+0xd8]
 1022c04:	add    rdx,0x78
 1022c08:	lea    r8,[rip+0xfffffffffffdf2f9]        # 0x1001f08
 1022c0f:	lea    rcx,[rsp+0xb8]
 1022c17:	call   0x100af10
 1022c1c:	nop
 1022c1d:	lea    rdx,[rip+0xfffffffffffe1eec]        # 0x1004b10
 1022c24:	mov    QWORD PTR [rsp+0x58],rdx
 1022c29:	mov    QWORD PTR [rsp+0x50],rbx
 1022c2e:	mov    rcx,QWORD PTR [rbp+0x10]
 1022c32:	mov    QWORD PTR [rsp+0x48],rcx
 1022c37:	lea    rcx,[rip+0xfffffffffffdf316]        # 0x1001f54
 1022c3e:	mov    QWORD PTR [rsp+0x40],rcx
 1022c43:	mov    rax,QWORD PTR [rax]
 1022c46:	mov    QWORD PTR [rsp+0x38],rax
 1022c4b:	mov    QWORD PTR [rsp+0x30],rdx
 1022c50:	mov    QWORD PTR [rsp+0x28],rbx
 1022c55:	lea    rax,[rip+0x406d4]        # 0x1063330
 1022c5c:	mov    QWORD PTR [rsp+0x20],rax
 1022c61:	mov    r9,QWORD PTR [rbp+0x10]
 1022c65:	mov    r8,rdi
 1022c68:	lea    rdx,[rip+0xfffffffffffe1ec1]        # 0x1004b30
 1022c6f:	lea    rcx,[rsp+0xa0]
 1022c77:	call   QWORD PTR [rip+0xfffffffffffdedc3]        # 0x1001a40
 1022c7d:	nop
 1022c7e:	lea    rcx,[rsp+0xb8]
 1022c86:	call   QWORD PTR [rip+0xfffffffffffdee1c]        # 0x1001aa8
 1022c8c:	mov    rax,QWORD PTR [rbp+0x8]
 1022c90:	movsxd rcx,DWORD PTR [rax+0x4]
 1022c94:	mov    rsi,QWORD PTR [rcx+rbp*1+0x8]
 1022c99:	mov    rcx,QWORD PTR [rbp+0xd8]
 1022ca0:	add    rcx,0x78
 1022ca4:	call   QWORD PTR [rip+0xfffffffffffdee3e]        # 0x1001ae8
 1022caa:	mov    rdi,rax
 1022cad:	lea    rcx,[rsp+0xa0]
 1022cb5:	call   QWORD PTR [rip+0xfffffffffffdee2d]        # 0x1001ae8
 1022cbb:	mov    rbx,rax
 1022cbe:	mov    rcx,QWORD PTR [rbp+0xd8]
 1022cc5:	sub    rcx,0xffffffffffffff80
 1022cc9:	call   QWORD PTR [rip+0xfffffffffffdee19]        # 0x1001ae8
 1022ccf:	mov    rdx,rax
 1022cd2:	mov    rcx,QWORD PTR [rbp+0xd8]
 1022cd9:	add    rcx,0x158
 1022ce0:	mov    BYTE PTR [rsp+0x48],0x0
 1022ce5:	mov    r8,QWORD PTR [rip+0x4063c]        # 0x1063328
 1022cec:	mov    QWORD PTR [rsp+0x40],r8
 1022cf1:	mov    DWORD PTR [rsp+0x38],0x20
 1022cf9:	lea    rax,[rsp+0x68]
 1022cfe:	mov    QWORD PTR [rsp+0x30],rax
 1022d03:	mov    DWORD PTR [rsp+0x28],0x1
 1022d0b:	mov    BYTE PTR [rsp+0x20],0x1
 1022d10:	mov    r9,rdi
 1022d13:	mov    r8,rbx
 1022d16:	call   0x1031100
 1022d1b:	mov    edx,eax
 1022d1d:	mov    rax,QWORD PTR [rbp+0x8]
 1022d21:	movsxd rcx,DWORD PTR [rax+0x4]
 1022d25:	add    rbp,0x8
 1022d29:	add    rcx,rbp
 1022d2c:	mov    r9b,0x1
 1022d2f:	mov    r8d,0xc000c480
 1022d35:	call   QWORD PTR [rsi+0x20]
 1022d38:	movzx  ebx,al
 1022d3b:	lea    rcx,[rsp+0xa0]
 1022d43:	call   QWORD PTR [rip+0xfffffffffffded5f]        # 0x1001aa8
 1022d49:	movzx  eax,bl
 1022d4c:	mov    rbx,QWORD PTR [rsp+0xa8]
 1022d54:	add    rsp,0x80
 1022d5b:	pop    rdi
 1022d5c:	pop    rsi
 1022d5d:	pop    rbp
 1022d5e:	ret    
 1022d5f:	int3   
 1022d60:	int3   
 1022d61:	int3   
 1022d62:	int3   
 1022d63:	int3   
 1022d64:	int3   
 1022d65:	int3   
 1022d66:	int3   
 1022d67:	int3   
 1022d68:	int3   
 1022d69:	int3   
 1022d6a:	int3   
 1022d6b:	int3   
 1022d6c:	int3   
 1022d6d:	int3   
 1022d6e:	int3   
 1022d6f:	int3   
 1022d70:	mov    QWORD PTR [rsp+0x10],rdx
 1022d75:	push   rbx
 1022d76:	push   rsi
 1022d77:	push   rdi
 1022d78:	sub    rsp,0x50
 1022d7c:	mov    QWORD PTR [rsp+0x48],0xfffffffffffffffe
 1022d85:	mov    rbx,r8
 1022d88:	mov    rsi,rdx
 1022d8b:	mov    rdi,rcx
 1022d8e:	mov    DWORD PTR [rsp+0x30],0x0
 1022d96:	lea    rcx,[rsp+0x40]
 1022d9b:	call   QWORD PTR [rip+0xfffffffffffded1f]        # 0x1001ac0
 1022da1:	nop
 1022da2:	lea    rcx,[rsp+0x38]
 1022da7:	call   QWORD PTR [rip+0xfffffffffffded13]        # 0x1001ac0
 1022dad:	nop
 1022dae:	mov    rcx,rsi
 1022db1:	call   QWORD PTR [rip+0xfffffffffffded09]        # 0x1001ac0
 1022db7:	mov    DWORD PTR [rsp+0x30],0x1
 1022dbf:	mov    r8,rbx
 1022dc2:	lea    rdx,[rsp+0x88]
 1022dca:	mov    rcx,rdi
 1022dcd:	call   0x1022ef0
 1022dd2:	nop
 1022dd3:	mov    r8,QWORD PTR [rax]
 1022dd6:	lea    rdx,[rip+0xfffffffffffe195b]        # 0x1004738
 1022ddd:	lea    rcx,[rsp+0x38]
 1022de2:	call   QWORD PTR [rip+0xfffffffffffdec58]        # 0x1001a40
 1022de8:	nop
 1022de9:	lea    rcx,[rsp+0x88]
 1022df1:	call   QWORD PTR [rip+0xfffffffffffdecb1]        # 0x1001aa8
 1022df7:	lea    rcx,[rsp+0x70]
 1022dfc:	call   QWORD PTR [rip+0xfffffffffffdecbe]        # 0x1001ac0
 1022e02:	nop
 1022e03:	cmp    BYTE PTR [rdi+0x29],0x0
 1022e07:	je     0x1022e1d
 1022e09:	lea    rdx,[rip+0xfffffffffffe1934]        # 0x1004744
 1022e10:	lea    rcx,[rsp+0x70]
 1022e15:	call   QWORD PTR [rip+0xfffffffffffdec7d]        # 0x1001a98
 1022e1b:	jmp    0x1022e76
 1022e1d:	lea    rcx,[rsp+0x88]
 1022e25:	call   QWORD PTR [rip+0xfffffffffffdec95]        # 0x1001ac0
 1022e2b:	nop
 1022e2c:	lea    rdx,[rsp+0x88]
 1022e34:	mov    rcx,rdi
 1022e37:	call   0x1016370
 1022e3c:	mov    r9,QWORD PTR [rsp+0x88]
 1022e44:	mov    r8,QWORD PTR [rdi+0x30]
 1022e48:	lea    rdx,[rip+0xfffffffffffe1901]        # 0x1004750
 1022e4f:	lea    rcx,[rsp+0x70]
 1022e54:	call   QWORD PTR [rip+0xfffffffffffdebe6]        # 0x1001a40
 1022e5a:	lea    rcx,[rsp+0x88]
 1022e62:	call   0x1030790
 1022e67:	nop
 1022e68:	lea    rcx,[rsp+0x88]
 1022e70:	call   QWORD PTR [rip+0xfffffffffffdec32]        # 0x1001aa8
 1022e76:	lea    rax,[rip+0xfffffffffffe18eb]        # 0x1004768
 1022e7d:	lea    rdx,[rip+0xfffffffffffe191c]        # 0x10047a0
 1022e84:	cmp    DWORD PTR [rdi+0x24],0x8
 1022e88:	cmovg  rdx,rax
 1022e8c:	mov    rax,QWORD PTR [rsp+0x38]
 1022e91:	mov    QWORD PTR [rsp+0x20],rax
 1022e96:	mov    r9,QWORD PTR [rsp+0x70]
 1022e9b:	lea    r8,[rip+0x40a8e]        # 0x1063930
 1022ea2:	mov    rcx,rsi
 1022ea5:	call   QWORD PTR [rip+0xfffffffffffdeb95]        # 0x1001a40
 1022eab:	lea    rcx,[rsp+0x70]
 1022eb0:	call   0x1030790
 1022eb5:	nop
 1022eb6:	lea    rcx,[rsp+0x70]
 1022ebb:	call   QWORD PTR [rip+0xfffffffffffdebe7]        # 0x1001aa8
 1022ec1:	nop
 1022ec2:	lea    rcx,[rsp+0x38]
 1022ec7:	call   QWORD PTR [rip+0xfffffffffffdebdb]        # 0x1001aa8
 1022ecd:	nop
 1022ece:	lea    rcx,[rsp+0x40]
 1022ed3:	call   QWORD PTR [rip+0xfffffffffffdebcf]        # 0x1001aa8
 1022ed9:	mov    rax,rsi
 1022edc:	add    rsp,0x50
 1022ee0:	pop    rdi
 1022ee1:	pop    rsi
 1022ee2:	pop    rbx
 1022ee3:	ret    
 1022ee4:	int3   
 1022ee5:	int3   
 1022ee6:	int3   
 1022ee7:	int3   
 1022ee8:	int3   
 1022ee9:	int3   
 1022eea:	int3   
 1022eeb:	int3   
 1022eec:	int3   
 1022eed:	int3   
 1022eee:	int3   
 1022eef:	int3   
 1022ef0:	mov    QWORD PTR [rsp+0x10],rdx
 1022ef5:	push   rbp
 1022ef6:	push   rdi
 1022ef7:	push   r14
 1022ef9:	mov    rbp,rsp
 1022efc:	sub    rsp,0x50
 1022f00:	mov    QWORD PTR [rbp-0x8],0xfffffffffffffffe
 1022f08:	mov    QWORD PTR [rsp+0x70],rbx
 1022f0d:	mov    QWORD PTR [rsp+0x80],rsi
 1022f15:	mov    rbx,r8
 1022f18:	mov    r14,rdx
 1022f1b:	mov    rsi,rcx
 1022f1e:	mov    DWORD PTR [rbp-0x30],0x0
 1022f25:	mov    rcx,rdx
 1022f28:	call   QWORD PTR [rip+0xfffffffffffdeb92]        # 0x1001ac0
 1022f2e:	mov    DWORD PTR [rbp-0x30],0x1
 1022f35:	mov    rdx,rbx
 1022f38:	lea    rcx,[rbp+0x38]
 1022f3c:	call   QWORD PTR [rip+0xfffffffffffdeb6e]        # 0x1001ab0
 1022f42:	nop
 1022f43:	xor    r8d,r8d
 1022f46:	lea    rdx,[rip+0xfffffffffffe17e7]        # 0x1004734
 1022f4d:	lea    rcx,[rbp+0x38]
 1022f51:	call   QWORD PTR [rip+0xfffffffffffdeb01]        # 0x1001a58
 1022f57:	cmp    eax,0xffffffff
 1022f5a:	jne    0x102314a
 1022f60:	lea    rcx,[rbp+0x38]
 1022f64:	call   QWORD PTR [rip+0xfffffffffffdeb86]        # 0x1001af0
 1022f6a:	mov    rcx,QWORD PTR [rsi+0xd8]
 1022f71:	add    rcx,0xc8
 1022f78:	test   eax,eax
 1022f7a:	jne    0x1023067
 1022f80:	call   QWORD PTR [rip+0xfffffffffffde9ba]        # 0x1001940
 1022f86:	lea    r8,[rsi+0x10]
 1022f8a:	mov    rdx,QWORD PTR [rsi+0xd8]
 1022f91:	add    rdx,0xc0
 1022f98:	test   al,al
 1022f9a:	je     0x1022fad
 1022f9c:	lea    rcx,[rbp-0x10]
 1022fa0:	call   0x1013cc0
 1022fa5:	nop
 1022fa6:	mov    ebx,0x3
 1022fab:	jmp    0x1022ff9
 1022fad:	lea    rcx,[rbp-0x18]
 1022fb1:	call   0x1013cc0
 1022fb6:	nop
 1022fb7:	mov    DWORD PTR [rbp-0x30],0x5
 1022fbe:	lea    r8,[rip+0xfffffffffffdfe3b]        # 0x1002e00
 1022fc5:	mov    rdx,rax
 1022fc8:	lea    rcx,[rbp-0x20]
 1022fcc:	call   0x100af10
 1022fd1:	nop
 1022fd2:	mov    DWORD PTR [rbp-0x30],0xd
 1022fd9:	mov    r8,QWORD PTR [rsi+0xd8]
 1022fe0:	add    r8,0xc8
 1022fe7:	mov    rdx,rax
 1022fea:	lea    rcx,[rbp-0x28]
 1022fee:	call   0x1013cc0
 1022ff3:	nop
 1022ff4:	mov    ebx,0x1d
 1022ff9:	mov    DWORD PTR [rbp-0x30],ebx
 1022ffc:	mov    r8,QWORD PTR [rax]
 1022fff:	lea    rdx,[rip+0xfffffffffffe0362]        # 0x1003368
 1023006:	mov    rcx,r14
 1023009:	call   QWORD PTR [rip+0xfffffffffffdea31]        # 0x1001a40
 102300f:	nop
 1023010:	test   bl,0x10
 1023013:	je     0x1023026
 1023015:	and    ebx,0xffffffef
 1023018:	mov    DWORD PTR [rbp-0x30],ebx
 102301b:	lea    rcx,[rbp-0x28]
 102301f:	call   QWORD PTR [rip+0xfffffffffffdea83]        # 0x1001aa8
 1023025:	nop
 1023026:	test   bl,0x8
 1023029:	je     0x102303c
 102302b:	and    ebx,0xfffffff7
 102302e:	mov    DWORD PTR [rbp-0x30],ebx
 1023031:	lea    rcx,[rbp-0x20]
 1023035:	call   QWORD PTR [rip+0xfffffffffffdea6d]        # 0x1001aa8
 102303b:	nop
 102303c:	test   bl,0x4
 102303f:	je     0x1023052
 1023041:	and    ebx,0xfffffffb
 1023044:	mov    DWORD PTR [rbp-0x30],ebx
 1023047:	lea    rcx,[rbp-0x18]
 102304b:	call   QWORD PTR [rip+0xfffffffffffdea57]        # 0x1001aa8
 1023051:	nop
 1023052:	test   bl,0x2
 1023055:	je     0x1023248
 102305b:	and    ebx,0xfffffffd
 102305e:	lea    rcx,[rbp-0x10]
 1023062:	jmp    0x102323e
 1023067:	call   QWORD PTR [rip+0xfffffffffffde8d3]        # 0x1001940
 102306d:	lea    rdx,[rbp+0x38]
 1023071:	test   al,al
 1023073:	je     0x1023087
 1023075:	lea    rcx,[rbp-0x28]
 1023079:	call   QWORD PTR [rip+0xfffffffffffde939]        # 0x10019b8
 102307f:	nop
 1023080:	mov    edi,0x21
 1023085:	jmp    0x10230bf
 1023087:	lea    r8,[rip+0xfffffffffffdfd72]        # 0x1002e00
 102308e:	lea    rcx,[rbp-0x20]
 1023092:	call   0x100af10
 1023097:	nop
 1023098:	mov    DWORD PTR [rbp-0x30],0x41
 102309f:	mov    r8,QWORD PTR [rsi+0xd8]
 10230a6:	add    r8,0xc8
 10230ad:	mov    rdx,rax
 10230b0:	lea    rcx,[rbp-0x18]
 10230b4:	call   0x1013cc0
 10230b9:	nop
 10230ba:	mov    edi,0xc1
 10230bf:	mov    DWORD PTR [rbp-0x30],edi
 10230c2:	mov    rbx,QWORD PTR [rax]
 10230c5:	lea    r8,[rsi+0x10]
 10230c9:	mov    rdx,QWORD PTR [rsi+0xd8]
 10230d0:	add    rdx,0xc0
 10230d7:	lea    rcx,[rbp-0x10]
 10230db:	call   0x1013cc0
 10230e0:	nop
 10230e1:	mov    r9,rbx
 10230e4:	mov    r8,QWORD PTR [rax]
 10230e7:	lea    rdx,[rip+0xfffffffffffe163a]        # 0x1004728
 10230ee:	mov    rcx,r14
 10230f1:	call   QWORD PTR [rip+0xfffffffffffde949]        # 0x1001a40
 10230f7:	nop
 10230f8:	lea    rcx,[rbp-0x10]
 10230fc:	call   QWORD PTR [rip+0xfffffffffffde9a6]        # 0x1001aa8
 1023102:	nop
 1023103:	test   dil,dil
 1023106:	jns    0x102311a
 1023108:	btr    edi,0x7
 102310c:	mov    DWORD PTR [rbp-0x30],edi
 102310f:	lea    rcx,[rbp-0x18]
 1023113:	call   QWORD PTR [rip+0xfffffffffffde98f]        # 0x1001aa8
 1023119:	nop
 102311a:	test   dil,0x40
 102311e:	je     0x1023131
 1023120:	and    edi,0xffffffbf
 1023123:	mov    DWORD PTR [rbp-0x30],edi
 1023126:	lea    rcx,[rbp-0x20]
 102312a:	call   QWORD PTR [rip+0xfffffffffffde978]        # 0x1001aa8
 1023130:	nop
 1023131:	test   dil,0x20
 1023135:	je     0x1023248
 102313b:	and    edi,0xffffffdf
 102313e:	mov    DWORD PTR [rbp-0x30],edi
 1023141:	lea    rcx,[rbp-0x28]
 1023145:	jmp    0x1023241
 102314a:	mov    rcx,QWORD PTR [rsi+0xd8]
 1023151:	add    rcx,0xc8
 1023158:	call   QWORD PTR [rip+0xfffffffffffde7e2]        # 0x1001940
 102315e:	mov    rdx,QWORD PTR [rsi+0xd8]
 1023165:	lea    r8,[rbp+0x38]
 1023169:	add    rdx,0xc0
 1023170:	test   al,al
 1023172:	je     0x1023185
 1023174:	lea    rcx,[rbp-0x28]
 1023178:	call   0x1013cc0
 102317d:	nop
 102317e:	mov    ebx,0x101
 1023183:	jmp    0x10231d1
 1023185:	lea    rcx,[rbp-0x20]
 1023189:	call   0x1013cc0
 102318e:	nop
 102318f:	mov    DWORD PTR [rbp-0x30],0x201
 1023196:	lea    r8,[rip+0xfffffffffffdfc63]        # 0x1002e00
 102319d:	mov    rdx,rax
 10231a0:	lea    rcx,[rbp-0x18]
 10231a4:	call   0x100af10
 10231a9:	nop
 10231aa:	mov    DWORD PTR [rbp-0x30],0x601
 10231b1:	mov    r8,QWORD PTR [rsi+0xd8]
 10231b8:	add    r8,0xc8
 10231bf:	mov    rdx,rax
 10231c2:	lea    rcx,[rbp-0x10]
 10231c6:	call   0x1013cc0
 10231cb:	nop
 10231cc:	mov    ebx,0xe01
 10231d1:	mov    DWORD PTR [rbp-0x30],ebx
 10231d4:	mov    r8,QWORD PTR [rax]
 10231d7:	lea    rdx,[rip+0xfffffffffffe018a]        # 0x1003368
 10231de:	mov    rcx,r14
 10231e1:	call   QWORD PTR [rip+0xfffffffffffde859]        # 0x1001a40
 10231e7:	nop
 10231e8:	bt     ebx,0xb
 10231ec:	jae    0x1023200
 10231ee:	btr    ebx,0xb
 10231f2:	mov    DWORD PTR [rbp-0x30],ebx
 10231f5:	lea    rcx,[rbp-0x10]
 10231f9:	call   QWORD PTR [rip+0xfffffffffffde8a9]        # 0x1001aa8
 10231ff:	nop
 1023200:	bt     ebx,0xa
 1023204:	jae    0x1023218
 1023206:	btr    ebx,0xa
 102320a:	mov    DWORD PTR [rbp-0x30],ebx
 102320d:	lea    rcx,[rbp-0x18]
 1023211:	call   QWORD PTR [rip+0xfffffffffffde891]        # 0x1001aa8
 1023217:	nop
 1023218:	bt     ebx,0x9
 102321c:	jae    0x1023230
 102321e:	btr    ebx,0x9
 1023222:	mov    DWORD PTR [rbp-0x30],ebx
 1023225:	lea    rcx,[rbp-0x20]
 1023229:	call   QWORD PTR [rip+0xfffffffffffde879]        # 0x1001aa8
 102322f:	nop
 1023230:	bt     ebx,0x8
 1023234:	jae    0x1023248
 1023236:	btr    ebx,0x8
 102323a:	lea    rcx,[rbp-0x28]
 102323e:	mov    DWORD PTR [rbp-0x30],ebx
 1023241:	call   QWORD PTR [rip+0xfffffffffffde861]        # 0x1001aa8
 1023247:	nop
 1023248:	lea    rcx,[rbp+0x38]
 102324c:	call   QWORD PTR [rip+0xfffffffffffde856]        # 0x1001aa8
 1023252:	mov    rax,r14
 1023255:	mov    rbx,QWORD PTR [rsp+0x70]
 102325a:	mov    rsi,QWORD PTR [rsp+0x80]
 1023262:	add    rsp,0x50
 1023266:	pop    r14
 1023268:	pop    rdi
 1023269:	pop    rbp
 102326a:	ret    
 102326b:	int3   
 102326c:	int3   
 102326d:	int3   
 102326e:	int3   
 102326f:	int3   
 1023270:	int3   
 1023271:	int3   
 1023272:	int3   
 1023273:	int3   
 1023274:	int3   
 1023275:	int3   
 1023276:	int3   
 1023277:	int3   
 1023278:	int3   
 1023279:	int3   
 102327a:	int3   
 102327b:	int3   
 102327c:	int3   
 102327d:	int3   
 102327e:	int3   
 102327f:	int3   
 1023280:	mov    rax,rsp
 1023283:	push   rbp
 1023284:	push   rdi
 1023285:	push   r15
 1023287:	lea    rbp,[rax-0x3f]
 102328b:	sub    rsp,0x90
 1023292:	mov    QWORD PTR [rbp+0x1f],0xfffffffffffffffe
 102329a:	mov    QWORD PTR [rax+0x10],rbx
 102329e:	mov    QWORD PTR [rax+0x18],rsi
 10232a2:	mov    rdi,r9
 10232a5:	movzx  r15d,r8b
 10232a9:	mov    rbx,rdx
 10232ac:	mov    rsi,rcx
 10232af:	mov    DWORD PTR [rbp-0x19],0x0
 10232b6:	lea    rcx,[rbp-0x9]
 10232ba:	call   QWORD PTR [rip+0xfffffffffffde800]        # 0x1001ac0
 10232c0:	nop
 10232c1:	lea    rcx,[rbp-0x11]
 10232c5:	call   QWORD PTR [rip+0xfffffffffffde7f5]        # 0x1001ac0
 10232cb:	nop
 10232cc:	lea    rcx,[rbp+0x7]
 10232d0:	call   QWORD PTR [rip+0xfffffffffffde7ea]        # 0x1001ac0
 10232d6:	nop
 10232d7:	mov    rdx,rbx
 10232da:	lea    rcx,[rbp+0x47]
 10232de:	call   QWORD PTR [rip+0xfffffffffffde7cc]        # 0x1001ab0
 10232e4:	nop
 10232e5:	mov    rdx,QWORD PTR [rbp+0x77]
 10232e9:	lea    rcx,[rbp-0x1]
 10232ed:	call   QWORD PTR [rip+0xfffffffffffde7bd]        # 0x1001ab0
 10232f3:	nop
 10232f4:	lea    rcx,[rbp-0x1]
 10232f8:	call   QWORD PTR [rip+0xfffffffffffde7f2]        # 0x1001af0
 10232fe:	test   eax,eax
 1023300:	jne    0x1023334
 1023302:	lea    rcx,[rbp+0x47]
 1023306:	call   QWORD PTR [rip+0xfffffffffffde7dc]        # 0x1001ae8
 102330c:	mov    rdx,rax
 102330f:	mov    r8b,0x1
 1023312:	lea    rcx,[rbp+0xf]
 1023316:	call   0x1031010
 102331b:	nop
 102331c:	mov    rdx,rax
 102331f:	lea    rcx,[rbp-0x1]
 1023323:	call   QWORD PTR [rip+0xfffffffffffde777]        # 0x1001aa0
 1023329:	nop
 102332a:	lea    rcx,[rbp+0xf]
 102332e:	call   QWORD PTR [rip+0xfffffffffffde774]        # 0x1001aa8
 1023334:	xor    r8d,r8d
 1023337:	lea    rdx,[rip+0xfffffffffffdf72e]        # 0x1002a6c
 102333e:	lea    rcx,[rbp-0x1]
 1023342:	call   QWORD PTR [rip+0xfffffffffffde710]        # 0x1001a58
 1023348:	cmp    eax,0xffffffff
 102334b:	jne    0x102335e
 102334d:	lea    rdx,[rip+0xfffffffffffe1494]        # 0x10047e8
 1023354:	lea    rcx,[rbp-0x1]
 1023358:	call   QWORD PTR [rip+0xfffffffffffde732]        # 0x1001a90
 102335e:	movzx  ebx,BYTE PTR [rbp+0x6f]
 1023362:	lea    rax,[rip+0xfffffffffffdebeb]        # 0x1001f54
 1023369:	lea    r8,[rip+0xfffffffffffdeaa0]        # 0x1001e10
 1023370:	test   bl,bl
 1023372:	cmovne r8,rax
 1023376:	mov    rax,QWORD PTR [rbp-0x1]
 102337a:	mov    QWORD PTR [rsp+0x28],rax
 102337f:	mov    QWORD PTR [rsp+0x20],rdi
 1023384:	mov    r9,QWORD PTR [rsi+0x10]
 1023388:	lea    rdx,[rip+0xfffffffffffe1469]        # 0x10047f8
 102338f:	lea    rcx,[rbp+0x7]
 1023393:	call   QWORD PTR [rip+0xfffffffffffde6a7]        # 0x1001a40
 1023399:	mov    r8,rdi
 102339c:	lea    rdx,[rbp+0xf]
 10233a0:	mov    rcx,rsi
 10233a3:	call   0x1022d70
 10233a8:	nop
 10233a9:	mov    rdx,rax
 10233ac:	lea    rcx,[rbp-0x11]
 10233b0:	call   QWORD PTR [rip+0xfffffffffffde6ea]        # 0x1001aa0
 10233b6:	nop
 10233b7:	lea    rcx,[rbp+0xf]
 10233bb:	call   QWORD PTR [rip+0xfffffffffffde6e7]        # 0x1001aa8
 10233c1:	xor    r8d,r8d
 10233c4:	lea    rdx,[rip+0xfffffffffffdf6a1]        # 0x1002a6c
 10233cb:	lea    rcx,[rbp+0x47]
 10233cf:	call   QWORD PTR [rip+0xfffffffffffde683]        # 0x1001a58
 10233d5:	cmp    eax,0xffffffff
 10233d8:	jne    0x10233eb
 10233da:	lea    rdx,[rip+0xfffffffffffe142f]        # 0x1004810
 10233e1:	lea    rcx,[rbp+0x47]
 10233e5:	call   QWORD PTR [rip+0xfffffffffffde6a5]        # 0x1001a90
 10233eb:	mov    rdx,QWORD PTR [rsi+0xd8]
 10233f2:	add    rdx,0x78
 10233f6:	cmp    BYTE PTR [rbp+0x7f],0x0
 10233fa:	jne    0x1023475
 10233fc:	test   bl,bl
 10233fe:	je     0x1023418
 1023400:	lea    r8,[rip+0xfffffffffffdeb01]        # 0x1001f08
 1023407:	lea    rcx,[rbp+0x17]
 102340b:	call   0x100af10
 1023410:	nop
 1023411:	mov    ebx,0x1
 1023416:	jmp    0x1023428
 1023418:	lea    rcx,[rbp+0xf]
 102341c:	call   QWORD PTR [rip+0xfffffffffffde596]        # 0x10019b8
 1023422:	nop
 1023423:	mov    ebx,0x2
 1023428:	mov    DWORD PTR [rbp-0x19],ebx
 102342b:	mov    r9,QWORD PTR [rax]
 102342e:	mov    rax,QWORD PTR [rbp+0x7]
 1023432:	mov    QWORD PTR [rsp+0x20],rax
 1023437:	mov    r8,QWORD PTR [rbp+0x47]
 102343b:	lea    rdx,[rip+0xfffffffffffe13de]        # 0x1004820
 1023442:	lea    rcx,[rbp-0x9]
 1023446:	call   QWORD PTR [rip+0xfffffffffffde5f4]        # 0x1001a40
 102344c:	nop
 102344d:	test   bl,0x2
 1023450:	je     0x1023463
 1023452:	and    ebx,0xfffffffd
 1023455:	mov    DWORD PTR [rbp-0x19],ebx
 1023458:	lea    rcx,[rbp+0xf]
 102345c:	call   QWORD PTR [rip+0xfffffffffffde646]        # 0x1001aa8
 1023462:	nop
 1023463:	test   bl,0x1
 1023466:	je     0x10234f1
 102346c:	and    ebx,0xfffffffe
 102346f:	lea    rcx,[rbp+0x17]
 1023473:	jmp    0x10234e8
 1023475:	test   bl,bl
 1023477:	je     0x1023491
 1023479:	lea    r8,[rip+0xfffffffffffdea88]        # 0x1001f08
 1023480:	lea    rcx,[rbp+0xf]
 1023484:	call   0x100af10
 1023489:	nop
 102348a:	mov    ebx,0x4
 102348f:	jmp    0x10234a1
 1023491:	lea    rcx,[rbp+0x17]
 1023495:	call   QWORD PTR [rip+0xfffffffffffde51d]        # 0x10019b8
 102349b:	nop
 102349c:	mov    ebx,0x8
 10234a1:	mov    DWORD PTR [rbp-0x19],ebx
 10234a4:	mov    r9,QWORD PTR [rax]
 10234a7:	mov    rax,QWORD PTR [rbp+0x7]
 10234ab:	mov    QWORD PTR [rsp+0x20],rax
 10234b0:	mov    r8,QWORD PTR [rbp+0x47]
 10234b4:	lea    rdx,[rip+0xfffffffffffe138d]        # 0x1004848
 10234bb:	lea    rcx,[rbp-0x9]
 10234bf:	call   QWORD PTR [rip+0xfffffffffffde57b]        # 0x1001a40
 10234c5:	nop
 10234c6:	test   bl,0x8
 10234c9:	je     0x10234dc
 10234cb:	and    ebx,0xfffffff7
 10234ce:	mov    DWORD PTR [rbp-0x19],ebx
 10234d1:	lea    rcx,[rbp+0x17]
 10234d5:	call   QWORD PTR [rip+0xfffffffffffde5cd]        # 0x1001aa8
 10234db:	nop
 10234dc:	test   bl,0x4
 10234df:	je     0x10234f1
 10234e1:	and    ebx,0xfffffffb
 10234e4:	lea    rcx,[rbp+0xf]
 10234e8:	mov    DWORD PTR [rbp-0x19],ebx
 10234eb:	call   QWORD PTR [rip+0xfffffffffffde5b7]        # 0x1001aa8
 10234f1:	lea    rdx,[rbp-0x9]
 10234f5:	lea    rcx,[rbp-0x11]
 10234f9:	call   QWORD PTR [rip+0xfffffffffffde4d9]        # 0x10019d8
 10234ff:	mov    r11,QWORD PTR [rsi+0x8]
 1023503:	movsxd rdi,DWORD PTR [r11+0x4]
 1023507:	mov    rcx,QWORD PTR [rsi+0xd8]
 102350e:	add    rcx,0x90
 1023515:	call   QWORD PTR [rip+0xfffffffffffde425]        # 0x1001940
 102351b:	movzx  ebx,al
 102351e:	lea    rcx,[rbp+0x47]
 1023522:	call   QWORD PTR [rip+0xfffffffffffde5c0]        # 0x1001ae8
 1023528:	mov    rcx,rax
 102352b:	lea    r8,[rsi+0x8]
 102352f:	add    r8,rdi
 1023532:	movzx  edx,bl
 1023535:	call   0x1030b10
 102353a:	lea    rcx,[rbp-0x9]
 102353e:	cmp    BYTE PTR [rbp+0x7f],0x0
 1023542:	je     0x1023587
 1023544:	mov    rdx,QWORD PTR [rsi+0xd8]
 102354b:	sub    rdx,0xffffffffffffff80
 102354f:	call   QWORD PTR [rip+0xfffffffffffde54b]        # 0x1001aa0
 1023555:	mov    r11,QWORD PTR [rbp-0x11]
 1023559:	mov    QWORD PTR [rsp+0x20],r11
 102355e:	mov    r9,QWORD PTR [rsi+0x90]
 1023565:	lea    r8,[rip+0xfffffffffffe130c]        # 0x1004878
 102356c:	lea    rdx,[rip+0xfffffffffffe1345]        # 0x10048b8
 1023573:	lea    rcx,[rbp+0x7]
 1023577:	call   QWORD PTR [rip+0xfffffffffffde4c3]        # 0x1001a40
 102357d:	lea    rdx,[rbp+0x7]
 1023581:	lea    rcx,[rbp-0x11]
 1023585:	jmp    0x102358e
 1023587:	lea    rdx,[rsi+0x90]
 102358e:	call   QWORD PTR [rip+0xfffffffffffde50c]        # 0x1001aa0
 1023594:	lea    rcx,[rbp-0x11]
 1023598:	call   QWORD PTR [rip+0xfffffffffffde54a]        # 0x1001ae8
 102359e:	mov    rbx,rax
 10235a1:	lea    rcx,[rbp-0x9]
 10235a5:	call   QWORD PTR [rip+0xfffffffffffde53d]        # 0x1001ae8
 10235ab:	mov    rdx,rax
 10235ae:	mov    rcx,QWORD PTR [rsi+0xd8]
 10235b5:	add    rcx,0x158
 10235bc:	mov    BYTE PTR [rsp+0x48],0x0
 10235c1:	mov    r8,QWORD PTR [rip+0x3fd60]        # 0x1063328
 10235c8:	mov    QWORD PTR [rsp+0x40],r8
 10235cd:	mov    DWORD PTR [rsp+0x38],0x20
 10235d5:	mov    r8,QWORD PTR [rbp+0x67]
 10235d9:	mov    QWORD PTR [rsp+0x30],r8
 10235de:	mov    DWORD PTR [rsp+0x28],0x0
 10235e6:	mov    BYTE PTR [rsp+0x20],r15b
 10235eb:	lea    r9,[rip+0xfffffffffffde81e]        # 0x1001e10
 10235f2:	mov    r8,rbx
 10235f5:	call   0x1031100
 10235fa:	test   eax,eax
 10235fc:	sete   bl
 10235ff:	lea    rcx,[rbp-0x11]
 1023603:	call   0x1030790
 1023608:	nop
 1023609:	lea    rcx,[rbp-0x1]
 102360d:	call   QWORD PTR [rip+0xfffffffffffde495]        # 0x1001aa8
 1023613:	nop
 1023614:	lea    rcx,[rbp+0x47]
 1023618:	call   QWORD PTR [rip+0xfffffffffffde48a]        # 0x1001aa8
 102361e:	nop
 102361f:	lea    rcx,[rbp+0x7]
 1023623:	call   QWORD PTR [rip+0xfffffffffffde47f]        # 0x1001aa8
 1023629:	nop
 102362a:	lea    rcx,[rbp-0x11]
 102362e:	call   QWORD PTR [rip+0xfffffffffffde474]        # 0x1001aa8
 1023634:	nop
 1023635:	lea    rcx,[rbp-0x9]
 1023639:	call   QWORD PTR [rip+0xfffffffffffde469]        # 0x1001aa8
 102363f:	movzx  eax,bl
 1023642:	lea    r11,[rsp+0x90]
 102364a:	mov    rbx,QWORD PTR [r11+0x28]
 102364e:	mov    rsi,QWORD PTR [r11+0x30]
 1023652:	mov    rsp,r11
 1023655:	pop    r15
 1023657:	pop    rdi
 1023658:	pop    rbp
 1023659:	ret    
 102365a:	int3   
 102365b:	int3   
 102365c:	int3   
 102365d:	int3   
 102365e:	int3   
 102365f:	int3   
 1023660:	mov    rax,rsp
 1023663:	push   rbp
 1023664:	push   r12
 1023666:	push   r14
 1023668:	lea    rbp,[rax-0x3f]
 102366c:	sub    rsp,0x90
 1023673:	mov    QWORD PTR [rbp+0x17],0xfffffffffffffffe
 102367b:	mov    QWORD PTR [rax+0x10],rbx
 102367f:	mov    QWORD PTR [rax+0x18],rdi
 1023683:	movzx  r12d,r9b
 1023687:	mov    rbx,r8
 102368a:	mov    r14,rdx
 102368d:	mov    rdi,rcx
 1023690:	mov    DWORD PTR [rbp-0x19],0x0
 1023697:	lea    rcx,[rbp-0x9]
 102369b:	call   QWORD PTR [rip+0xfffffffffffde41f]        # 0x1001ac0
 10236a1:	nop
 10236a2:	lea    rcx,[rbp-0x11]
 10236a6:	call   QWORD PTR [rip+0xfffffffffffde414]        # 0x1001ac0
 10236ac:	nop
 10236ad:	lea    rcx,[rbp+0x47]
 10236b1:	call   QWORD PTR [rip+0xfffffffffffde409]        # 0x1001ac0
 10236b7:	nop
 10236b8:	mov    rdx,rbx
 10236bb:	lea    rcx,[rbp-0x1]
 10236bf:	call   QWORD PTR [rip+0xfffffffffffde3eb]        # 0x1001ab0
 10236c5:	nop
 10236c6:	xor    r8d,r8d
 10236c9:	lea    rdx,[rip+0xfffffffffffdf39c]        # 0x1002a6c
 10236d0:	lea    rcx,[rbp-0x1]
 10236d4:	call   QWORD PTR [rip+0xfffffffffffde37e]        # 0x1001a58
 10236da:	cmp    eax,0xffffffff
 10236dd:	jne    0x10236f0
 10236df:	lea    rdx,[rip+0xfffffffffffe1102]        # 0x10047e8
 10236e6:	lea    rcx,[rbp-0x1]
 10236ea:	call   QWORD PTR [rip+0xfffffffffffde3a0]        # 0x1001a90
 10236f0:	lea    rax,[rip+0xfffffffffffde85d]        # 0x1001f54
 10236f7:	lea    r8,[rip+0xfffffffffffde712]        # 0x1001e10
 10236fe:	cmp    BYTE PTR [rbp+0x77],0x0
 1023702:	cmovne r8,rax
 1023706:	mov    rax,QWORD PTR [rbp-0x1]
 102370a:	mov    QWORD PTR [rsp+0x28],rax
 102370f:	mov    rbx,QWORD PTR [rbp+0x67]
 1023713:	mov    QWORD PTR [rsp+0x20],rbx
 1023718:	mov    r9,QWORD PTR [rdi+0x10]
 102371c:	lea    rdx,[rip+0xfffffffffffe10d5]        # 0x10047f8
 1023723:	lea    rcx,[rbp-0x11]
 1023727:	call   QWORD PTR [rip+0xfffffffffffde313]        # 0x1001a40
 102372d:	lea    r8,[rip+0xfffffffffffe1198]        # 0x10048cc
 1023734:	lea    rdx,[rip+0xfffffffffffe0ff9]        # 0x1004734
 102373b:	lea    rcx,[rbp-0x11]
 102373f:	call   QWORD PTR [rip+0xfffffffffffde26b]        # 0x10019b0
 1023745:	mov    r8,rbx
 1023748:	lea    rdx,[rbp+0x7]
 102374c:	mov    rcx,rdi
 102374f:	call   0x1022d70
 1023754:	nop
 1023755:	mov    rdx,rax
 1023758:	lea    rcx,[rbp-0x9]
 102375c:	call   QWORD PTR [rip+0xfffffffffffde33e]        # 0x1001aa0
 1023762:	nop
 1023763:	lea    rcx,[rbp+0x7]
 1023767:	call   QWORD PTR [rip+0xfffffffffffde33b]        # 0x1001aa8
 102376d:	mov    rdx,QWORD PTR [rdi+0xd8]
 1023774:	add    rdx,0x78
 1023778:	cmp    BYTE PTR [rbp+0x7f],0x0
 102377c:	jne    0x10237f8
 102377e:	cmp    BYTE PTR [rbp+0x77],0x0
 1023782:	je     0x102379c
 1023784:	lea    r8,[rip+0xfffffffffffde77d]        # 0x1001f08
 102378b:	lea    rcx,[rbp+0xf]
 102378f:	call   0x100af10
 1023794:	nop
 1023795:	mov    ebx,0x1
 102379a:	jmp    0x10237ac
 102379c:	lea    rcx,[rbp+0x7]
 10237a0:	call   QWORD PTR [rip+0xfffffffffffde212]        # 0x10019b8
 10237a6:	nop
 10237a7:	mov    ebx,0x2
 10237ac:	mov    DWORD PTR [rbp-0x19],ebx
 10237af:	mov    r9,QWORD PTR [rax]
 10237b2:	mov    rax,QWORD PTR [rbp-0x11]
 10237b6:	mov    QWORD PTR [rsp+0x20],rax
 10237bb:	mov    r8,r14
 10237be:	lea    rdx,[rip+0xfffffffffffe110b]        # 0x10048d0
 10237c5:	lea    rcx,[rbp+0x47]
 10237c9:	call   QWORD PTR [rip+0xfffffffffffde271]        # 0x1001a40
 10237cf:	nop
 10237d0:	test   bl,0x2
 10237d3:	je     0x10237e6
 10237d5:	and    ebx,0xfffffffd
 10237d8:	mov    DWORD PTR [rbp-0x19],ebx
 10237db:	lea    rcx,[rbp+0x7]
 10237df:	call   QWORD PTR [rip+0xfffffffffffde2c3]        # 0x1001aa8
 10237e5:	nop
 10237e6:	test   bl,0x1
 10237e9:	je     0x1023875
 10237ef:	and    ebx,0xfffffffe
 10237f2:	lea    rcx,[rbp+0xf]
 10237f6:	jmp    0x102386c
 10237f8:	cmp    BYTE PTR [rbp+0x77],0x0
 10237fc:	je     0x1023816
 10237fe:	lea    r8,[rip+0xfffffffffffde703]        # 0x1001f08
 1023805:	lea    rcx,[rbp+0x7]
 1023809:	call   0x100af10
 102380e:	nop
 102380f:	mov    ebx,0x4
 1023814:	jmp    0x1023826
 1023816:	lea    rcx,[rbp+0xf]
 102381a:	call   QWORD PTR [rip+0xfffffffffffde198]        # 0x10019b8
 1023820:	nop
 1023821:	mov    ebx,0x8
 1023826:	mov    DWORD PTR [rbp-0x19],ebx
 1023829:	mov    r9,QWORD PTR [rax]
 102382c:	mov    rax,QWORD PTR [rbp-0x11]
 1023830:	mov    QWORD PTR [rsp+0x20],rax
 1023835:	mov    r8,r14
 1023838:	lea    rdx,[rip+0xfffffffffffe10b9]        # 0x10048f8
 102383f:	lea    rcx,[rbp+0x47]
 1023843:	call   QWORD PTR [rip+0xfffffffffffde1f7]        # 0x1001a40
 1023849:	nop
 102384a:	test   bl,0x8
 102384d:	je     0x1023860
 102384f:	and    ebx,0xfffffff7
 1023852:	mov    DWORD PTR [rbp-0x19],ebx
 1023855:	lea    rcx,[rbp+0xf]
 1023859:	call   QWORD PTR [rip+0xfffffffffffde249]        # 0x1001aa8
 102385f:	nop
 1023860:	test   bl,0x4
 1023863:	je     0x1023875
 1023865:	and    ebx,0xfffffffb
 1023868:	lea    rcx,[rbp+0x7]
 102386c:	mov    DWORD PTR [rbp-0x19],ebx
 102386f:	call   QWORD PTR [rip+0xfffffffffffde233]        # 0x1001aa8
 1023875:	lea    rdx,[rbp+0x47]
 1023879:	lea    rcx,[rbp-0x9]
 102387d:	call   QWORD PTR [rip+0xfffffffffffde155]        # 0x10019d8
 1023883:	lea    rcx,[rbp+0x47]
 1023887:	cmp    BYTE PTR [rbp+0x7f],0x0
 102388b:	je     0x10238d0
 102388d:	mov    rdx,QWORD PTR [rdi+0xd8]
 1023894:	sub    rdx,0xffffffffffffff80
 1023898:	call   QWORD PTR [rip+0xfffffffffffde202]        # 0x1001aa0
 102389e:	mov    r11,QWORD PTR [rbp-0x9]
 10238a2:	mov    QWORD PTR [rsp+0x20],r11
 10238a7:	mov    r9,QWORD PTR [rdi+0x90]
 10238ae:	lea    r8,[rip+0xfffffffffffe0fc3]        # 0x1004878
 10238b5:	lea    rdx,[rip+0xfffffffffffe0ffc]        # 0x10048b8
 10238bc:	lea    rcx,[rbp-0x11]
 10238c0:	call   QWORD PTR [rip+0xfffffffffffde17a]        # 0x1001a40
 10238c6:	lea    rdx,[rbp-0x11]
 10238ca:	lea    rcx,[rbp-0x9]
 10238ce:	jmp    0x10238d7
 10238d0:	lea    rdx,[rdi+0x90]
 10238d7:	call   QWORD PTR [rip+0xfffffffffffde1c3]        # 0x1001aa0
 10238dd:	lea    rcx,[rbp-0x9]
 10238e1:	call   QWORD PTR [rip+0xfffffffffffde201]        # 0x1001ae8
 10238e7:	mov    rbx,rax
 10238ea:	lea    rcx,[rbp+0x47]
 10238ee:	call   QWORD PTR [rip+0xfffffffffffde1f4]        # 0x1001ae8
 10238f4:	mov    rdx,rax
 10238f7:	mov    rcx,QWORD PTR [rdi+0xd8]
 10238fe:	add    rcx,0x158
 1023905:	mov    BYTE PTR [rsp+0x48],0x0
 102390a:	mov    r8,QWORD PTR [rip+0x3fa17]        # 0x1063328
 1023911:	mov    QWORD PTR [rsp+0x40],r8
 1023916:	mov    DWORD PTR [rsp+0x38],0x20
 102391e:	mov    r8,QWORD PTR [rbp+0x6f]
 1023922:	mov    QWORD PTR [rsp+0x30],r8
 1023927:	mov    DWORD PTR [rsp+0x28],0x0
 102392f:	mov    BYTE PTR [rsp+0x20],r12b
 1023934:	lea    r9,[rip+0xfffffffffffde4d5]        # 0x1001e10
 102393b:	mov    r8,rbx
 102393e:	call   0x1031100
 1023943:	test   eax,eax
 1023945:	sete   bl
 1023948:	lea    rcx,[rbp-0x9]
 102394c:	call   0x1030790
 1023951:	nop
 1023952:	lea    rcx,[rbp-0x1]
 1023956:	call   QWORD PTR [rip+0xfffffffffffde14c]        # 0x1001aa8
 102395c:	nop
 102395d:	lea    rcx,[rbp+0x47]
 1023961:	call   QWORD PTR [rip+0xfffffffffffde141]        # 0x1001aa8
 1023967:	nop
 1023968:	lea    rcx,[rbp-0x11]
 102396c:	call   QWORD PTR [rip+0xfffffffffffde136]        # 0x1001aa8
 1023972:	nop
 1023973:	lea    rcx,[rbp-0x9]
 1023977:	call   QWORD PTR [rip+0xfffffffffffde12b]        # 0x1001aa8
 102397d:	movzx  eax,bl
 1023980:	lea    r11,[rsp+0x90]
 1023988:	mov    rbx,QWORD PTR [r11+0x28]
 102398c:	mov    rdi,QWORD PTR [r11+0x30]
 1023990:	mov    rsp,r11
 1023993:	pop    r14
 1023995:	pop    r12
 1023997:	pop    rbp
 1023998:	ret    
 1023999:	int3   
 102399a:	int3   
 102399b:	int3   
 102399c:	int3   
 102399d:	int3   
 102399e:	int3   
 102399f:	int3   
 10239a0:	mov    QWORD PTR [rsp+0x20],rsi
 10239a5:	push   rdi
 10239a6:	sub    rsp,0x20
 10239aa:	mov    rsi,rdx
 10239ad:	mov    rdi,rcx
 10239b0:	test   rdx,rdx
 10239b3:	jns    0x10239bb
 10239b5:	call   0x103f972
 10239ba:	int3   
 10239bb:	test   r8,r8
 10239be:	js     0x10239c4
 10239c0:	mov    QWORD PTR [rcx+0x20],r8
 10239c4:	mov    QWORD PTR [rsp+0x30],rbx
 10239c9:	test   rdx,rdx
 10239cc:	jne    0x1023a10
 10239ce:	mov    rcx,QWORD PTR [rcx+0x8]
 10239d2:	xor    ebx,ebx
 10239d4:	test   rcx,rcx
 10239d7:	je     0x10239f8
 10239d9:	mov    edx,ebx
 10239db:	cmp    QWORD PTR [rdi+0x10],rdx
 10239df:	jle    0x10239ef
 10239e1:	mov    r8,QWORD PTR [rdi+0x10]
 10239e5:	inc    edx
 10239e7:	movsxd rax,edx
 10239ea:	cmp    rax,r8
 10239ed:	jl     0x10239e5
 10239ef:	call   0x103f9c6
 10239f4:	mov    QWORD PTR [rdi+0x8],rbx
 10239f8:	mov    QWORD PTR [rdi+0x18],rbx
 10239fc:	mov    QWORD PTR [rdi+0x10],rbx
 1023a00:	mov    rbx,QWORD PTR [rsp+0x30]
 1023a05:	mov    rsi,QWORD PTR [rsp+0x48]
 1023a0a:	add    rsp,0x20
 1023a0e:	pop    rdi
 1023a0f:	ret    
 1023a10:	mov    rdx,QWORD PTR [rcx+0x8]
 1023a14:	mov    QWORD PTR [rsp+0x38],rbp
 1023a19:	test   rdx,rdx
 1023a1c:	jne    0x1023a64
 1023a1e:	mov    rbp,QWORD PTR [rcx+0x20]
 1023a22:	cmp    rsi,rbp
 1023a25:	cmovg  rbp,rsi
 1023a29:	lea    rbx,[rbp*8+0x0]
 1023a31:	mov    rcx,rbx
 1023a34:	call   0x103f9ba
 1023a39:	mov    r8,rbx
 1023a3c:	xor    edx,edx
 1023a3e:	mov    rcx,rax
 1023a41:	mov    QWORD PTR [rdi+0x8],rax
 1023a45:	call   0x104026c
 1023a4a:	xor    ebx,ebx
 1023a4c:	test   rsi,rsi
 1023a4f:	jle    0x1023ba2
 1023a55:	inc    ebx
 1023a57:	movsxd rax,ebx
 1023a5a:	cmp    rax,rsi
 1023a5d:	jl     0x1023a55
 1023a5f:	jmp    0x1023ba2
 1023a64:	mov    rcx,QWORD PTR [rcx+0x18]
 1023a68:	cmp    rsi,rcx
 1023a6b:	jg     0x1023adf
 1023a6d:	mov    rax,QWORD PTR [rdi+0x10]
 1023a71:	cmp    rax,rsi
 1023a74:	jge    0x1023ab3
 1023a76:	lea    rcx,[rdx+rax*8]
 1023a7a:	mov    r8,rsi
 1023a7d:	xor    edx,edx
 1023a7f:	sub    r8,rax
 1023a82:	shl    r8,0x3
 1023a86:	call   0x104026c
 1023a8b:	mov    rax,rsi
 1023a8e:	xor    ebx,ebx
 1023a90:	sub    rax,QWORD PTR [rdi+0x10]
 1023a94:	test   rax,rax
 1023a97:	jle    0x1023ba6
 1023a9d:	mov    rcx,rsi
 1023aa0:	sub    rcx,QWORD PTR [rdi+0x10]
 1023aa4:	inc    ebx
 1023aa6:	movsxd rax,ebx
 1023aa9:	cmp    rax,rcx
 1023aac:	jl     0x1023aa4
 1023aae:	jmp    0x1023ba6
 1023ab3:	jle    0x1023ba6
 1023ab9:	sub    rax,rsi
 1023abc:	xor    ebx,ebx
 1023abe:	test   rax,rax
 1023ac1:	jle    0x1023ba6
 1023ac7:	mov    rcx,QWORD PTR [rdi+0x10]
 1023acb:	sub    rcx,rsi
 1023ace:	xchg   ax,ax
 1023ad0:	inc    ebx
 1023ad2:	movsxd rax,ebx
 1023ad5:	cmp    rax,rcx
 1023ad8:	jl     0x1023ad0
 1023ada:	jmp    0x1023ba6
 1023adf:	mov    rax,QWORD PTR [rdi+0x20]
 1023ae3:	test   rax,rax
 1023ae6:	jne    0x1023b11
 1023ae8:	mov    rax,QWORD PTR [rdi+0x10]
 1023aec:	cqo    
 1023aee:	and    edx,0x7
 1023af1:	add    rax,rdx
 1023af4:	sar    rax,0x3
 1023af8:	cmp    rax,0x4
 1023afc:	jge    0x1023b05
 1023afe:	mov    eax,0x4
 1023b03:	jmp    0x1023b11
 1023b05:	mov    edx,0x400
 1023b0a:	cmp    rax,rdx
 1023b0d:	cmovg  rax,rdx
 1023b11:	add    rax,rcx
 1023b14:	mov    rbp,rsi
 1023b17:	cmp    rsi,rax
 1023b1a:	cmovl  rbp,rax
 1023b1e:	cmp    rbp,rcx
 1023b21:	jge    0x1023b29
 1023b23:	call   0x103f972
 1023b28:	int3   
 1023b29:	lea    rbx,[rbp*8+0x0]
 1023b31:	mov    QWORD PTR [rsp+0x40],r14
 1023b36:	mov    rcx,rbx
 1023b39:	call   0x103f9ba
 1023b3e:	mov    r9,QWORD PTR [rdi+0x10]
 1023b42:	mov    r8,QWORD PTR [rdi+0x8]
 1023b46:	shl    r9,0x3
 1023b4a:	mov    rdx,rbx
 1023b4d:	mov    rcx,rax
 1023b50:	mov    r14,rax
 1023b53:	call   0x1013c80
 1023b58:	mov    r11,QWORD PTR [rdi+0x10]
 1023b5c:	mov    r8,rsi
 1023b5f:	lea    rcx,[r14+r11*8]
 1023b63:	xor    edx,edx
 1023b65:	sub    r8,r11
 1023b68:	shl    r8,0x3
 1023b6c:	call   0x104026c
 1023b71:	mov    rax,rsi
 1023b74:	xor    ebx,ebx
 1023b76:	sub    rax,QWORD PTR [rdi+0x10]
 1023b7a:	test   rax,rax
 1023b7d:	jle    0x1023b90
 1023b7f:	mov    rcx,rsi
 1023b82:	sub    rcx,QWORD PTR [rdi+0x10]
 1023b86:	inc    ebx
 1023b88:	movsxd rax,ebx
 1023b8b:	cmp    rax,rcx
 1023b8e:	jl     0x1023b86
 1023b90:	mov    rcx,QWORD PTR [rdi+0x8]
 1023b94:	call   0x103f9c6
 1023b99:	mov    QWORD PTR [rdi+0x8],r14
 1023b9d:	mov    r14,QWORD PTR [rsp+0x40]
 1023ba2:	mov    QWORD PTR [rdi+0x18],rbp
 1023ba6:	mov    rbp,QWORD PTR [rsp+0x38]
 1023bab:	mov    rbx,QWORD PTR [rsp+0x30]
 1023bb0:	mov    QWORD PTR [rdi+0x10],rsi
 1023bb4:	mov    rsi,QWORD PTR [rsp+0x48]
 1023bb9:	add    rsp,0x20
 1023bbd:	pop    rdi
 1023bbe:	ret    
 1023bbf:	int3   
 1023bc0:	int3   
 1023bc1:	int3   
 1023bc2:	int3   
 1023bc3:	int3   
 1023bc4:	int3   
 1023bc5:	int3   
 1023bc6:	int3   
 1023bc7:	int3   
 1023bc8:	int3   
 1023bc9:	int3   
 1023bca:	int3   
 1023bcb:	int3   
 1023bcc:	int3   
 1023bcd:	int3   
 1023bce:	int3   
 1023bcf:	int3   
 1023bd0:	sub    rsp,0x28
 1023bd4:	mov    r9,QWORD PTR [rcx+0x8]
 1023bd8:	lea    rax,[rip+0xfffffffffffe0891]        # 0x1004470
 1023bdf:	mov    QWORD PTR [rcx],rax
 1023be2:	test   r9,r9
 1023be5:	je     0x1023c05
 1023be7:	xor    edx,edx
 1023be9:	cmp    QWORD PTR [rcx+0x10],rdx
 1023bed:	jle    0x1023bfd
 1023bef:	mov    r8,QWORD PTR [rcx+0x10]
 1023bf3:	inc    edx
 1023bf5:	movsxd rax,edx
 1023bf8:	cmp    rax,r8
 1023bfb:	jl     0x1023bf3
 1023bfd:	mov    rcx,r9
 1023c00:	call   0x103f9c6
 1023c05:	add    rsp,0x28
 1023c09:	ret    
 1023c0a:	int3   
 1023c0b:	int3   
 1023c0c:	int3   
 1023c0d:	int3   
 1023c0e:	int3   
 1023c0f:	int3   
 1023c10:	mov    QWORD PTR [rsp+0x8],rbx
 1023c15:	push   rdi
 1023c16:	sub    rsp,0x20
 1023c1a:	mov    eax,DWORD PTR [rdx+0x20]
 1023c1d:	mov    rdi,rdx
 1023c20:	mov    rbx,rcx
 1023c23:	not    eax
 1023c25:	test   al,0x1
 1023c27:	je     0x1023c37
 1023c29:	mov    rdx,QWORD PTR [rcx+0x10]
 1023c2d:	mov    rcx,rdi
 1023c30:	call   0x103f996
 1023c35:	jmp    0x1023c4e
 1023c37:	mov    rcx,rdx
 1023c3a:	call   0x103f98a
 1023c3f:	or     r8,0xffffffffffffffff
 1023c43:	mov    rcx,rbx
 1023c46:	mov    rdx,rax
 1023c49:	call   0x10239a0
 1023c4e:	mov    r8,QWORD PTR [rbx+0x10]
 1023c52:	mov    rdx,QWORD PTR [rbx+0x8]
 1023c56:	mov    rcx,rdi
 1023c59:	mov    rbx,QWORD PTR [rsp+0x30]
 1023c5e:	add    rsp,0x20
 1023c62:	pop    rdi
 1023c63:	jmp    0x102fc60
 1023c68:	int3   
 1023c69:	int3   
 1023c6a:	int3   
 1023c6b:	int3   
 1023c6c:	int3   
 1023c6d:	int3   
 1023c6e:	int3   
 1023c6f:	int3   
 1023c70:	mov    QWORD PTR [rsp+0x8],rbx
 1023c75:	push   rdi
 1023c76:	sub    rsp,0x20
 1023c7a:	lea    rax,[rip+0xfffffffffffe07ef]        # 0x1004470
 1023c81:	mov    rbx,rcx
 1023c84:	mov    edi,edx
 1023c86:	mov    QWORD PTR [rcx],rax
 1023c89:	mov    rcx,QWORD PTR [rcx+0x8]
 1023c8d:	test   rcx,rcx
 1023c90:	je     0x1023cb0
 1023c92:	xor    r8d,r8d
 1023c95:	cmp    QWORD PTR [rbx+0x10],r8
 1023c99:	jle    0x1023cab
 1023c9b:	mov    r9,QWORD PTR [rbx+0x10]
 1023c9f:	nop
 1023ca0:	inc    r8d
 1023ca3:	movsxd rax,r8d
 1023ca6:	cmp    rax,r9
 1023ca9:	jl     0x1023ca0
 1023cab:	call   0x103f9c6
 1023cb0:	test   dil,0x1
 1023cb4:	je     0x1023cbe
 1023cb6:	mov    rcx,rbx
 1023cb9:	call   0x103f95a
 1023cbe:	mov    rax,rbx
 1023cc1:	mov    rbx,QWORD PTR [rsp+0x30]
 1023cc6:	add    rsp,0x20
 1023cca:	pop    rdi
 1023ccb:	ret    
 1023ccc:	int3   
 1023ccd:	int3   
 1023cce:	int3   
 1023ccf:	int3   
 1023cd0:	int3   
 1023cd1:	int3   
 1023cd2:	int3   
 1023cd3:	int3   
 1023cd4:	int3   
 1023cd5:	int3   
 1023cd6:	int3   
 1023cd7:	int3   
 1023cd8:	int3   
 1023cd9:	int3   
 1023cda:	int3   
 1023cdb:	int3   
 1023cdc:	int3   
 1023cdd:	int3   
 1023cde:	int3   
 1023cdf:	int3   
 1023ce0:	mov    QWORD PTR [rsp+0x8],rbx
 1023ce5:	mov    QWORD PTR [rsp+0x10],rbp
 1023cea:	mov    QWORD PTR [rsp+0x18],rsi
 1023cef:	push   rdi
 1023cf0:	sub    rsp,0x20
 1023cf4:	mov    rbx,rcx
 1023cf7:	mov    rcx,rdx
 1023cfa:	mov    rbp,r8
 1023cfd:	mov    rsi,rdx
 1023d00:	call   0x103fa26
 1023d05:	mov    rcx,QWORD PTR [rbx+0x8]
 1023d09:	mov    edi,eax
 1023d0b:	test   rcx,rcx
 1023d0e:	je     0x1023d3e
 1023d10:	xor    edx,edx
 1023d12:	div    DWORD PTR [rbx+0x10]
 1023d15:	mov    rbx,QWORD PTR [rcx+rdx*8]
 1023d19:	test   rbx,rbx
 1023d1c:	je     0x1023d3e
 1023d1e:	xchg   ax,ax
 1023d20:	cmp    DWORD PTR [rbx+0x18],edi
 1023d23:	jne    0x1023d35
 1023d25:	mov    rdx,rsi
 1023d28:	mov    rcx,rbx
 1023d2b:	call   QWORD PTR [rip+0xfffffffffffddccf]        # 0x1001a00
 1023d31:	test   eax,eax
 1023d33:	je     0x1023d55
 1023d35:	mov    rbx,QWORD PTR [rbx+0x10]
 1023d39:	test   rbx,rbx
 1023d3c:	jne    0x1023d20
 1023d3e:	xor    eax,eax
 1023d40:	mov    rbx,QWORD PTR [rsp+0x30]
 1023d45:	mov    rbp,QWORD PTR [rsp+0x38]
 1023d4a:	mov    rsi,QWORD PTR [rsp+0x40]
 1023d4f:	add    rsp,0x20
 1023d53:	pop    rdi
 1023d54:	ret    
 1023d55:	lea    rdx,[rbx+0x8]
 1023d59:	mov    rcx,rbp
 1023d5c:	call   QWORD PTR [rip+0xfffffffffffddd3e]        # 0x1001aa0
 1023d62:	mov    eax,0x1
 1023d67:	jmp    0x1023d40
 1023d69:	int3   
 1023d6a:	int3   
 1023d6b:	int3   
 1023d6c:	int3   
 1023d6d:	int3   
 1023d6e:	int3   
 1023d6f:	int3   
 1023d70:	mov    QWORD PTR [rsp+0x10],rsi
 1023d75:	push   rdi
 1023d76:	sub    rsp,0x20
 1023d7a:	mov    r10,QWORD PTR [rcx+0x8]
 1023d7e:	mov    rdi,r9
 1023d81:	mov    rsi,r8
 1023d84:	mov    r9,rdx
 1023d87:	mov    r11,rcx
 1023d8a:	test   r10,r10
 1023d8d:	jne    0x1023d95
 1023d8f:	call   0x103f972
 1023d94:	int3   
 1023d95:	mov    QWORD PTR [rsp+0x30],rbx
 1023d9a:	mov    rbx,QWORD PTR [rdx]
 1023d9d:	test   rbx,rbx
 1023da0:	jne    0x1023da8
 1023da2:	call   0x103f972
 1023da7:	int3   
 1023da8:	cmp    rbx,0xffffffffffffffff
 1023dac:	jne    0x1023dd8
 1023dae:	mov    edx,DWORD PTR [r11+0x10]
 1023db2:	xor    ecx,ecx
 1023db4:	test   edx,edx
 1023db6:	je     0x1023dd8
 1023db8:	mov    rax,r10
 1023dbb:	nop    DWORD PTR [rax+rax*1+0x0]
 1023dc0:	mov    rbx,QWORD PTR [rax]
 1023dc3:	test   rbx,rbx
 1023dc6:	jne    0x1023dd8
 1023dc8:	inc    ecx
 1023dca:	add    rax,0x8
 1023dce:	cmp    ecx,edx
 1023dd0:	jb     0x1023dc0
 1023dd2:	call   0x103f972
 1023dd7:	int3   
 1023dd8:	mov    rcx,QWORD PTR [rbx+0x10]
 1023ddc:	test   rcx,rcx
 1023ddf:	jne    0x1023e13
 1023de1:	mov    r8d,DWORD PTR [r11+0x10]
 1023de5:	mov    eax,DWORD PTR [rbx+0x18]
 1023de8:	xor    edx,edx
 1023dea:	div    r8d
 1023ded:	inc    edx
 1023def:	movsxd rax,edx
 1023df2:	cmp    edx,r8d
 1023df5:	jae    0x1023e13
 1023df7:	lea    rax,[r10+rax*8]
 1023dfb:	nop    DWORD PTR [rax+rax*1+0x0]
 1023e00:	mov    rcx,QWORD PTR [rax]
 1023e03:	test   rcx,rcx
 1023e06:	jne    0x1023e13
 1023e08:	inc    edx
 1023e0a:	add    rax,0x8
 1023e0e:	cmp    edx,r8d
 1023e11:	jb     0x1023e00
 1023e13:	mov    QWORD PTR [r9],rcx
 1023e16:	mov    rdx,rbx
 1023e19:	mov    rcx,rsi
 1023e1c:	call   QWORD PTR [rip+0xfffffffffffddc7e]        # 0x1001aa0
 1023e22:	lea    rdx,[rbx+0x8]
 1023e26:	mov    rcx,rdi
 1023e29:	mov    rbx,QWORD PTR [rsp+0x30]
 1023e2e:	mov    rsi,QWORD PTR [rsp+0x38]
 1023e33:	add    rsp,0x20
 1023e37:	pop    rdi
 1023e38:	rex.W jmp QWORD PTR [rip+0xfffffffffffddc61]        # 0x1001aa0
 1023e3f:	int3   
 1023e40:	int3   
 1023e41:	int3   
 1023e42:	int3   
 1023e43:	int3   
 1023e44:	int3   
 1023e45:	int3   
 1023e46:	int3   
 1023e47:	int3   
 1023e48:	int3   
 1023e49:	int3   
 1023e4a:	int3   
 1023e4b:	int3   
 1023e4c:	int3   
 1023e4d:	int3   
 1023e4e:	int3   
 1023e4f:	int3   
 1023e50:	rex push rbx
 1023e52:	sub    rsp,0x30
 1023e56:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1023e5f:	movzx  ebx,cl
 1023e62:	mov    rax,QWORD PTR [rip+0x3fbd7]        # 0x1063a40
 1023e69:	test   rax,rax
 1023e6c:	jne    0x1023e95
 1023e6e:	mov    ecx,0x190
 1023e73:	call   0x103f9d2
 1023e78:	mov    QWORD PTR [rsp+0x48],rax
 1023e7d:	test   rax,rax
 1023e80:	je     0x1023e8e
 1023e82:	movzx  edx,bl
 1023e85:	mov    rcx,rax
 1023e88:	call   0x1028390
 1023e8d:	nop
 1023e8e:	mov    QWORD PTR [rip+0x3fbab],rax        # 0x1063a40
 1023e95:	add    rsp,0x30
 1023e99:	pop    rbx
 1023e9a:	ret    
 1023e9b:	int3   
 1023e9c:	int3   
 1023e9d:	int3   
 1023e9e:	int3   
 1023e9f:	int3   
 1023ea0:	int3   
 1023ea1:	int3   
 1023ea2:	int3   
 1023ea3:	int3   
 1023ea4:	int3   
 1023ea5:	int3   
 1023ea6:	int3   
 1023ea7:	int3   
 1023ea8:	int3   
 1023ea9:	int3   
 1023eaa:	int3   
 1023eab:	int3   
 1023eac:	int3   
 1023ead:	int3   
 1023eae:	int3   
 1023eaf:	int3   
 1023eb0:	mov    QWORD PTR [rsp+0x8],rcx
 1023eb5:	push   rdi
 1023eb6:	sub    rsp,0x30
 1023eba:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1023ec3:	mov    QWORD PTR [rsp+0x48],rbx
 1023ec8:	mov    QWORD PTR [rsp+0x50],rbp
 1023ecd:	mov    QWORD PTR [rsp+0x58],rsi
 1023ed2:	mov    rbx,rcx
 1023ed5:	lea    rax,[rip+0xfffffffffffe079c]        # 0x1004678
 1023edc:	mov    QWORD PTR [rcx],rax
 1023edf:	mov    rax,QWORD PTR [rcx+0x18]
 1023ee3:	cmp    rax,0xffffffffffffffff
 1023ee7:	je     0x1023eff
 1023ee9:	test   rax,rax
 1023eec:	je     0x1023eff
 1023eee:	add    rcx,0x18
 1023ef2:	call   0x1034510
 1023ef7:	mov    QWORD PTR [rbx+0x18],0xffffffffffffffff
 1023eff:	lea    rcx,[rbx+0x20]
 1023f03:	call   0x1034510
 1023f08:	lea    rcx,[rip+0x3f529]        # 0x1063438
 1023f0f:	call   0x1034510
 1023f14:	lea    rcx,[rip+0x3f525]        # 0x1063440
 1023f1b:	call   0x1034510
 1023f20:	lea    rcx,[rbx+0x38]
 1023f24:	call   QWORD PTR [rip+0xfffffffffffdd64e]        # 0x1001578
 1023f2a:	lea    rcx,[rip+0x3f4ff]        # 0x1063430
 1023f31:	call   0x1034510
 1023f36:	xor    ebp,ebp
 1023f38:	mov    edi,ebp
 1023f3a:	cmp    DWORD PTR [rbx+0x30],ebp
 1023f3d:	jbe    0x1023f56
 1023f3f:	nop
 1023f40:	mov    ecx,edi
 1023f42:	mov    rax,QWORD PTR [rbx+0x28]
 1023f46:	lea    rcx,[rax+rcx*8]
 1023f4a:	call   0x1034510
 1023f4f:	inc    edi
 1023f51:	cmp    edi,DWORD PTR [rbx+0x30]
 1023f54:	jb     0x1023f40
 1023f56:	call   QWORD PTR [rip+0xfffffffffffdd5fc]        # 0x1001558
 1023f5c:	mov    rcx,rax
 1023f5f:	mov    r8,QWORD PTR [rbx+0x28]
 1023f63:	xor    edx,edx
 1023f65:	call   QWORD PTR [rip+0xfffffffffffdd5f5]        # 0x1001560
 1023f6b:	cmp    QWORD PTR [rbx+0x10],rbp
 1023f6f:	je     0x1023f97
 1023f71:	mov    rdi,QWORD PTR [rbx+0x10]
 1023f75:	mov    rsi,QWORD PTR [rdi+0x30]
 1023f79:	test   rdi,rdi
 1023f7c:	je     0x1023f8e
 1023f7e:	mov    rcx,rdi
 1023f81:	call   0x1030070
 1023f86:	mov    rcx,rdi
 1023f89:	call   0x103f95a
 1023f8e:	mov    QWORD PTR [rbx+0x10],rsi
 1023f92:	cmp    rsi,rbp
 1023f95:	jne    0x1023f71
 1023f97:	mov    rax,QWORD PTR [rbx+0x160]
 1023f9e:	test   rax,rax
 1023fa1:	je     0x1023fab
 1023fa3:	mov    rax,QWORD PTR [rax]
 1023fa6:	test   rax,rax
 1023fa9:	jne    0x1023fa3
 1023fab:	mov    QWORD PTR [rbx+0x170],rbp
 1023fb2:	mov    QWORD PTR [rbx+0x178],rbp
 1023fb9:	mov    QWORD PTR [rbx+0x168],rbp
 1023fc0:	mov    QWORD PTR [rbx+0x160],rbp
 1023fc7:	mov    rcx,QWORD PTR [rbx+0x180]
 1023fce:	call   0x103f9ae
 1023fd3:	mov    QWORD PTR [rbx+0x180],rbp
 1023fda:	lea    rcx,[rbx+0x120]
 1023fe1:	call   0x1012a20
 1023fe6:	nop
 1023fe7:	lea    rax,[rip+0xfffffffffffe065a]        # 0x1004648
 1023fee:	mov    QWORD PTR [rbx+0x158],rax
 1023ff5:	mov    rax,QWORD PTR [rbx+0x160]
 1023ffc:	test   rax,rax
 1023fff:	je     0x1024009
 1024001:	mov    rax,QWORD PTR [rax]
 1024004:	test   rax,rax
 1024007:	jne    0x1024001
 1024009:	mov    QWORD PTR [rbx+0x170],rbp
 1024010:	mov    QWORD PTR [rbx+0x178],rbp
 1024017:	mov    QWORD PTR [rbx+0x168],rbp
 102401e:	mov    QWORD PTR [rbx+0x160],rbp
 1024025:	mov    rcx,QWORD PTR [rbx+0x180]
 102402c:	call   0x103f9ae
 1024031:	mov    QWORD PTR [rbx+0x180],rbp
 1024038:	lea    rsi,[rip+0xfffffffffffdea01]        # 0x1002a40
 102403f:	mov    QWORD PTR [rbx+0x120],rsi
 1024046:	lea    rcx,[rbx+0x120]
 102404d:	call   0x1012a20
 1024052:	nop
 1024053:	lea    rcx,[rbx+0xe8]
 102405a:	mov    QWORD PTR [rcx],rsi
 102405d:	call   0x1012a20
 1024062:	nop
 1024063:	lea    rcx,[rbx+0xc8]
 102406a:	call   QWORD PTR [rip+0xfffffffffffdda38]        # 0x1001aa8
 1024070:	nop
 1024071:	lea    rcx,[rbx+0xc0]
 1024078:	call   QWORD PTR [rip+0xfffffffffffdda2a]        # 0x1001aa8
 102407e:	nop
 102407f:	lea    rcx,[rbx+0xb0]
 1024086:	call   QWORD PTR [rip+0xfffffffffffdda1c]        # 0x1001aa8
 102408c:	nop
 102408d:	lea    rcx,[rbx+0xa8]
 1024094:	call   QWORD PTR [rip+0xfffffffffffdda0e]        # 0x1001aa8
 102409a:	nop
 102409b:	lea    rcx,[rbx+0xa0]
 10240a2:	call   QWORD PTR [rip+0xfffffffffffdda00]        # 0x1001aa8
 10240a8:	nop
 10240a9:	lea    rcx,[rbx+0x98]
 10240b0:	call   QWORD PTR [rip+0xfffffffffffdd9f2]        # 0x1001aa8
 10240b6:	nop
 10240b7:	lea    rcx,[rbx+0x90]
 10240be:	call   QWORD PTR [rip+0xfffffffffffdd9e4]        # 0x1001aa8
 10240c4:	nop
 10240c5:	lea    rcx,[rbx+0x88]
 10240cc:	call   QWORD PTR [rip+0xfffffffffffdd9d6]        # 0x1001aa8
 10240d2:	nop
 10240d3:	lea    rcx,[rbx+0x80]
 10240da:	call   QWORD PTR [rip+0xfffffffffffdd9c8]        # 0x1001aa8
 10240e0:	nop
 10240e1:	lea    rcx,[rbx+0x78]
 10240e5:	call   QWORD PTR [rip+0xfffffffffffdd9bd]        # 0x1001aa8
 10240eb:	nop
 10240ec:	lea    rcx,[rbx+0x70]
 10240f0:	call   QWORD PTR [rip+0xfffffffffffdd9b2]        # 0x1001aa8
 10240f6:	nop
 10240f7:	lea    rcx,[rbx+0x68]
 10240fb:	call   QWORD PTR [rip+0xfffffffffffdd9a7]        # 0x1001aa8
 1024101:	nop
 1024102:	lea    rcx,[rbx+0x60]
 1024106:	mov    rbx,QWORD PTR [rsp+0x48]
 102410b:	mov    rbp,QWORD PTR [rsp+0x50]
 1024110:	mov    rsi,QWORD PTR [rsp+0x58]
 1024115:	add    rsp,0x30
 1024119:	pop    rdi
 102411a:	rex.W jmp QWORD PTR [rip+0xfffffffffffdd987]        # 0x1001aa8
 1024121:	int3   
 1024122:	int3   
 1024123:	int3   
 1024124:	int3   
 1024125:	int3   
 1024126:	int3   
 1024127:	int3   
 1024128:	int3   
 1024129:	int3   
 102412a:	int3   
 102412b:	int3   
 102412c:	int3   
 102412d:	int3   
 102412e:	int3   
 102412f:	int3   
 1024130:	rex push rdi
 1024132:	push   r12
 1024134:	push   r13
 1024136:	push   r14
 1024138:	push   r15
 102413a:	mov    eax,0x1aa0
 102413f:	call   0x1040290
 1024144:	sub    rsp,rax
 1024147:	mov    QWORD PTR [rsp+0x510],0xfffffffffffffffe
 1024153:	mov    QWORD PTR [rsp+0x1ad8],rbx
 102415b:	mov    QWORD PTR [rsp+0x1ae8],rsi
 1024163:	mov    rax,QWORD PTR [rip+0x3f706]        # 0x1063870
 102416a:	xor    rax,rsp
 102416d:	mov    QWORD PTR [rsp+0x1a90],rax
 1024175:	mov    rsi,r8
 1024178:	mov    QWORD PTR [rsp+0x108],r8
 1024180:	mov    r15d,edx
 1024183:	mov    DWORD PTR [rsp+0x88],edx
 102418a:	mov    r14,rcx
 102418d:	mov    QWORD PTR [rsp+0x350],rcx
 1024195:	xor    edi,edi
 1024197:	mov    r12d,edi
 102419a:	mov    DWORD PTR [rsp+0x168],edi
 10241a1:	lea    rcx,[rsp+0x78]
 10241a6:	call   QWORD PTR [rip+0xfffffffffffdd914]        # 0x1001ac0
 10241ac:	nop
 10241ad:	lea    rcx,[rsp+0x80]
 10241b5:	call   QWORD PTR [rip+0xfffffffffffdd905]        # 0x1001ac0
 10241bb:	nop
 10241bc:	mov    QWORD PTR [rsp+0x1a0],rdi
 10241c4:	mov    DWORD PTR [rsp+0x134],edi
 10241cb:	xor    r9b,r9b
 10241ce:	mov    BYTE PTR [rsp+0x70],r9b
 10241d3:	mov    QWORD PTR [rsp+0x178],rdi
 10241db:	lea    rcx,[rip+0x3f26e]        # 0x1063450
 10241e2:	call   QWORD PTR [rip+0xfffffffffffdd260]        # 0x1001448
 10241e8:	cmp    r15d,0x1
 10241ec:	jle    0x1024275
 10241f2:	lea    rdx,[rip+0xfffffffffffe249f]        # 0x1006698
 10241f9:	mov    rcx,QWORD PTR [rsi+0x8]
 10241fd:	call   QWORD PTR [rip+0xfffffffffffdd4cd]        # 0x10016d0
 1024203:	test   eax,eax
 1024205:	je     0x102421c
 1024207:	lea    rdx,[rip+0xfffffffffffe2492]        # 0x10066a0
 102420e:	mov    rcx,QWORD PTR [rsi+0x8]
 1024212:	call   QWORD PTR [rip+0xfffffffffffdd4b8]        # 0x10016d0
 1024218:	test   eax,eax
 102421a:	jne    0x1024275
 102421c:	xor    r8d,r8d
 102421f:	mov    rdx,QWORD PTR [rsi]
 1024222:	lea    rcx,[rsp+0x428]
 102422a:	call   0x1031010
 102422f:	nop
 1024230:	mov    rcx,rax
 1024233:	call   QWORD PTR [rip+0xfffffffffffdd8af]        # 0x1001ae8
 1024239:	mov    rdx,rax
 102423c:	mov    rcx,r14
 102423f:	call   0x1028870
 1024244:	nop
 1024245:	lea    rcx,[rsp+0x428]
 102424d:	call   QWORD PTR [rip+0xfffffffffffdd855]        # 0x1001aa8
 1024253:	nop
 1024254:	lea    rcx,[rsp+0x80]
 102425c:	call   QWORD PTR [rip+0xfffffffffffdd846]        # 0x1001aa8
 1024262:	nop
 1024263:	lea    rcx,[rsp+0x78]
 1024268:	call   QWORD PTR [rip+0xfffffffffffdd83a]        # 0x1001aa8
 102426e:	xor    al,al
 1024270:	jmp    0x1028270
 1024275:	call   0x1035e10
 102427a:	mov    r8d,0x104
 1024280:	lea    rdx,[rsp+0x880]
 1024288:	xor    ecx,ecx
 102428a:	call   QWORD PTR [rip+0xfffffffffffdcfe0]        # 0x1001270
 1024290:	mov    edx,0x400
 1024295:	lea    rcx,[rsp+0xa90]
 102429d:	call   QWORD PTR [rip+0xfffffffffffdd135]        # 0x10013d8
 10242a3:	lea    rdx,[rsp+0xa90]
 10242ab:	lea    rcx,[r14+0x80]
 10242b2:	call   QWORD PTR [rip+0xfffffffffffdd7e0]        # 0x1001a98
 10242b8:	mov    DWORD PTR [rsp+0x630],0x114
 10242c3:	lea    rcx,[rsp+0x630]
 10242cb:	call   QWORD PTR [rip+0xfffffffffffdd14f]        # 0x1001420
 10242d1:	lea    rcx,[r14+0x80]
 10242d8:	cmp    DWORD PTR [rsp+0x640],0x2
 10242e0:	lea    rdx,[rip+0xfffffffffffe23c1]        # 0x10066a8
 10242e7:	je     0x10242f0
 10242e9:	lea    rdx,[rip+0xfffffffffffe23d0]        # 0x10066c0
 10242f0:	call   QWORD PTR [rip+0xfffffffffffdd79a]        # 0x1001a90
 10242f6:	mov    rbx,rdi
 10242f9:	mov    QWORD PTR [rsp+0xa8],rbx
 1024301:	mov    QWORD PTR [rsp+0xa0],rdi
 1024309:	cmp    DWORD PTR [r14+0xd8],0x2
 1024311:	je     0x1024ae6
 1024317:	mov    r8,rsi
 102431a:	mov    edx,r15d
 102431d:	mov    rcx,r14
 1024320:	call   0x102a5d0
 1024325:	test   al,al
 1024327:	jne    0x102436b
 1024329:	mov    rax,QWORD PTR [r14]
 102432c:	mov    BYTE PTR [rsp+0x28],0x1
 1024331:	mov    BYTE PTR [rsp+0x20],0x1
 1024336:	mov    r9d,0x2
 102433c:	xor    r8d,r8d
 102433f:	mov    edx,0xc000c3f7
 1024344:	mov    rcx,r14
 1024347:	call   QWORD PTR [rax]
 1024349:	nop
 102434a:	lea    rcx,[rsp+0x80]
 1024352:	call   QWORD PTR [rip+0xfffffffffffdd750]        # 0x1001aa8
 1024358:	nop
 1024359:	lea    rcx,[rsp+0x78]
 102435e:	call   QWORD PTR [rip+0xfffffffffffdd744]        # 0x1001aa8
 1024364:	xor    al,al
 1024366:	jmp    0x1028270
 102436b:	lea    rcx,[rip+0x3f0de]        # 0x1063450
 1024372:	call   QWORD PTR [rip+0xfffffffffffdd0d0]        # 0x1001448
 1024378:	cmp    BYTE PTR [r14+0xbd],0x0
 1024380:	je     0x10243e9
 1024382:	mov    rax,QWORD PTR [r14]
 1024385:	mov    BYTE PTR [rsp+0x28],0x1
 102438a:	mov    BYTE PTR [rsp+0x20],0x1
 102438f:	xor    r9d,r9d
 1024392:	xor    r8d,r8d
 1024395:	mov    edx,0x4000c481
 102439a:	mov    rcx,r14
 102439d:	call   QWORD PTR [rax]
 102439f:	mov    dl,0x1
 10243a1:	mov    rcx,r14
 10243a4:	call   0x10287d0
 10243a9:	mov    r11,QWORD PTR [r14]
 10243ac:	mov    BYTE PTR [rsp+0x28],0x1
 10243b1:	mov    BYTE PTR [rsp+0x20],0x1
 10243b6:	xor    r9d,r9d
 10243b9:	xor    r8d,r8d
 10243bc:	mov    edx,0x4000c482
 10243c1:	mov    rcx,r14
 10243c4:	call   QWORD PTR [r11]
 10243c7:	nop
 10243c8:	lea    rcx,[rsp+0x80]
 10243d0:	call   QWORD PTR [rip+0xfffffffffffdd6d2]        # 0x1001aa8
 10243d6:	nop
 10243d7:	lea    rcx,[rsp+0x78]
 10243dc:	call   QWORD PTR [rip+0xfffffffffffdd6c6]        # 0x1001aa8
 10243e2:	mov    al,0x1
 10243e4:	jmp    0x1028270
 10243e9:	mov    eax,DWORD PTR [r14+0xd8]
 10243f0:	cmp    eax,0x6
 10243f3:	ja     0x1024aa7
 10243f9:	lea    r8,[rip+0xfffffffffffdbc00]        # 0x1000000
 1024400:	mov    edx,DWORD PTR [r8+rax*4+0x282a0]
 1024408:	add    rdx,r8
 102440b:	jmp    rdx
 102440d:	mov    rbx,QWORD PTR [r14]
 1024410:	lea    rcx,[rip+0x3f039]        # 0x1063450
 1024417:	call   0x1035a50
 102441c:	mov    edx,eax
 102441e:	xor    r9d,r9d
 1024421:	mov    r8d,0xc000c45a
 1024427:	mov    rcx,r14
 102442a:	call   QWORD PTR [rbx+0x20]
 102442d:	test   al,al
 102442f:	je     0x1024470
 1024431:	mov    rax,QWORD PTR [r14]
 1024434:	mov    BYTE PTR [rsp+0x28],0x1
 1024439:	mov    BYTE PTR [rsp+0x20],0x1
 102443e:	xor    r9d,r9d
 1024441:	xor    r8d,r8d
 1024444:	mov    edx,0xc000c45d
 1024449:	mov    rcx,r14
 102444c:	call   QWORD PTR [rax]
 102444e:	nop
 102444f:	lea    rcx,[rsp+0x80]
 1024457:	call   QWORD PTR [rip+0xfffffffffffdd64b]        # 0x1001aa8
 102445d:	nop
 102445e:	lea    rcx,[rsp+0x78]
 1024463:	call   QWORD PTR [rip+0xfffffffffffdd63f]        # 0x1001aa8
 1024469:	mov    al,0x1
 102446b:	jmp    0x1028270
 1024470:	lea    rcx,[rsp+0x80]
 1024478:	call   QWORD PTR [rip+0xfffffffffffdd62a]        # 0x1001aa8
 102447e:	nop
 102447f:	lea    rcx,[rsp+0x78]
 1024484:	call   QWORD PTR [rip+0xfffffffffffdd61e]        # 0x1001aa8
 102448a:	xor    al,al
 102448c:	jmp    0x1028270
 1024491:	mov    rbx,QWORD PTR [r14]
 1024494:	mov    rdx,r14
 1024497:	lea    rcx,[rip+0x3efb2]        # 0x1063450
 102449e:	call   0x1035b00
 10244a3:	mov    edx,eax
 10244a5:	xor    r9d,r9d
 10244a8:	mov    r8d,0xc000c45b
 10244ae:	mov    rcx,r14
 10244b1:	call   QWORD PTR [rbx+0x20]
 10244b4:	test   al,al
 10244b6:	je     0x10244f7
 10244b8:	mov    rax,QWORD PTR [r14]
 10244bb:	mov    BYTE PTR [rsp+0x28],0x1
 10244c0:	mov    BYTE PTR [rsp+0x20],0x1
 10244c5:	xor    r9d,r9d
 10244c8:	xor    r8d,r8d
 10244cb:	mov    edx,0xc000c46e
 10244d0:	mov    rcx,r14
 10244d3:	call   QWORD PTR [rax]
 10244d5:	nop
 10244d6:	lea    rcx,[rsp+0x80]
 10244de:	call   QWORD PTR [rip+0xfffffffffffdd5c4]        # 0x1001aa8
 10244e4:	nop
 10244e5:	lea    rcx,[rsp+0x78]
 10244ea:	call   QWORD PTR [rip+0xfffffffffffdd5b8]        # 0x1001aa8
 10244f0:	mov    al,0x1
 10244f2:	jmp    0x1028270
 10244f7:	lea    rcx,[rsp+0x80]
 10244ff:	call   QWORD PTR [rip+0xfffffffffffdd5a3]        # 0x1001aa8
 1024505:	nop
 1024506:	lea    rcx,[rsp+0x78]
 102450b:	call   QWORD PTR [rip+0xfffffffffffdd597]        # 0x1001aa8
 1024511:	xor    al,al
 1024513:	jmp    0x1028270
 1024518:	mov    rbx,QWORD PTR [r14]
 102451b:	mov    rdx,r14
 102451e:	lea    rcx,[rip+0x3ef2b]        # 0x1063450
 1024525:	call   0x1035c80
 102452a:	mov    edx,eax
 102452c:	xor    r9d,r9d
 102452f:	mov    r8d,0xc000c45c
 1024535:	mov    rcx,r14
 1024538:	call   QWORD PTR [rbx+0x20]
 102453b:	test   al,al
 102453d:	je     0x102457e
 102453f:	mov    rax,QWORD PTR [r14]
 1024542:	mov    BYTE PTR [rsp+0x28],0x1
 1024547:	mov    BYTE PTR [rsp+0x20],0x1
 102454c:	xor    r9d,r9d
 102454f:	xor    r8d,r8d
 1024552:	mov    edx,0xc000c46f
 1024557:	mov    rcx,r14
 102455a:	call   QWORD PTR [rax]
 102455c:	nop
 102455d:	lea    rcx,[rsp+0x80]
 1024565:	call   QWORD PTR [rip+0xfffffffffffdd53d]        # 0x1001aa8
 102456b:	nop
 102456c:	lea    rcx,[rsp+0x78]
 1024571:	call   QWORD PTR [rip+0xfffffffffffdd531]        # 0x1001aa8
 1024577:	mov    al,0x1
 1024579:	jmp    0x1028270
 102457e:	lea    rcx,[rsp+0x80]
 1024586:	call   QWORD PTR [rip+0xfffffffffffdd51c]        # 0x1001aa8
 102458c:	nop
 102458d:	lea    rcx,[rsp+0x78]
 1024592:	call   QWORD PTR [rip+0xfffffffffffdd510]        # 0x1001aa8
 1024598:	xor    al,al
 102459a:	jmp    0x1028270
 102459f:	lea    rcx,[rip+0x3eeaa]        # 0x1063450
 10245a6:	call   0x10358e0
 10245ab:	lea    rdx,[rsp+0x880]
 10245b3:	lea    rcx,[rsp+0x128]
 10245bb:	call   QWORD PTR [rip+0xfffffffffffdd4ef]        # 0x1001ab0
 10245c1:	nop
 10245c2:	xor    r8d,r8d
 10245c5:	lea    rdx,[rip+0xfffffffffffe07f0]        # 0x1004dbc
 10245cc:	lea    rcx,[rsp+0x128]
 10245d4:	call   QWORD PTR [rip+0xfffffffffffdd47e]        # 0x1001a58
 10245da:	cmp    eax,0xffffffff
 10245dd:	je     0x1024643
 10245df:	lea    r8,[rsp+0x128]
 10245e7:	lea    rdx,[rip+0xfffffffffffe0926]        # 0x1004f14
 10245ee:	lea    rcx,[rsp+0x430]
 10245f6:	call   0x1013d70
 10245fb:	nop
 10245fc:	lea    r8,[rip+0xfffffffffffe0911]        # 0x1004f14
 1024603:	mov    rdx,rax
 1024606:	lea    rcx,[rsp+0x2f8]
 102460e:	call   0x100af10
 1024613:	nop
 1024614:	mov    rdx,rax
 1024617:	lea    rcx,[rsp+0x128]
 102461f:	call   QWORD PTR [rip+0xfffffffffffdd47b]        # 0x1001aa0
 1024625:	nop
 1024626:	lea    rcx,[rsp+0x2f8]
 102462e:	call   QWORD PTR [rip+0xfffffffffffdd474]        # 0x1001aa8
 1024634:	nop
 1024635:	lea    rcx,[rsp+0x430]
 102463d:	call   QWORD PTR [rip+0xfffffffffffdd465]        # 0x1001aa8
 1024643:	lea    rcx,[r14+0xb0]
 102464a:	call   QWORD PTR [rip+0xfffffffffffdd4a0]        # 0x1001af0
 1024650:	test   eax,eax
 1024652:	jne    0x10246eb
 1024658:	lea    rdx,[rip+0xfffffffffffde40d]        # 0x1002a6c
 102465f:	lea    rcx,[rsp+0x308]
 1024667:	call   0x1031d30
 102466c:	nop
 102466d:	mov    rcx,rax
 1024670:	call   QWORD PTR [rip+0xfffffffffffdd472]        # 0x1001ae8
 1024676:	mov    rcx,rax
 1024679:	call   0x1031de0
 102467e:	movzx  esi,al
 1024681:	lea    rcx,[rsp+0x308]
 1024689:	call   QWORD PTR [rip+0xfffffffffffdd419]        # 0x1001aa8
 102468f:	mov    r13d,0x1
 1024695:	test   sil,sil
 1024698:	je     0x10246b7
 102469a:	mov    rax,QWORD PTR [r14]
 102469d:	mov    BYTE PTR [rsp+0x28],r13b
 10246a2:	mov    BYTE PTR [rsp+0x20],r13b
 10246a7:	mov    r9d,r13d
 10246aa:	xor    r8d,r8d
 10246ad:	mov    edx,0x8000c47f
 10246b2:	mov    rcx,r14
 10246b5:	call   QWORD PTR [rax]
 10246b7:	lea    rcx,[rsp+0x128]
 10246bf:	call   QWORD PTR [rip+0xfffffffffffdd423]        # 0x1001ae8
 10246c5:	mov    rcx,rax
 10246c8:	mov    DWORD PTR [rsp+0x20],0x3
 10246d0:	xor    r9d,r9d
 10246d3:	lea    r8,[rip+0xfffffffffffe2006]        # 0x10066e0
 10246da:	lea    rdx,[rip+0x3ed6f]        # 0x1063450
 10246e1:	call   0x10356a0
 10246e6:	jmp    0x1024778
 10246eb:	lea    rdx,[rip+0xfffffffffffde376]        # 0x1002a68
 10246f2:	lea    rcx,[r14+0xb0]
 10246f9:	call   QWORD PTR [rip+0xfffffffffffdd301]        # 0x1001a00
 10246ff:	test   eax,eax
 1024701:	jne    0x1024733
 1024703:	lea    rdx,[rsp+0x440]
 102470b:	mov    rcx,r14
 102470e:	call   0x10286c0
 1024713:	nop
 1024714:	mov    rdx,rax
 1024717:	lea    rcx,[r14+0xb0]
 102471e:	call   QWORD PTR [rip+0xfffffffffffdd37c]        # 0x1001aa0
 1024724:	nop
 1024725:	lea    rcx,[rsp+0x440]
 102472d:	call   QWORD PTR [rip+0xfffffffffffdd375]        # 0x1001aa8
 1024733:	lea    rcx,[r14+0xb0]
 102473a:	call   QWORD PTR [rip+0xfffffffffffdd3a8]        # 0x1001ae8
 1024740:	mov    rsi,rax
 1024743:	lea    rcx,[rsp+0x128]
 102474b:	call   QWORD PTR [rip+0xfffffffffffdd397]        # 0x1001ae8
 1024751:	mov    rcx,rax
 1024754:	mov    DWORD PTR [rsp+0x20],0x3
 102475c:	mov    r9,rsi
 102475f:	lea    r8,[rip+0xfffffffffffe1f7a]        # 0x10066e0
 1024766:	lea    rdx,[rip+0x3ece3]        # 0x1063450
 102476d:	call   0x10356a0
 1024772:	mov    r13d,0x1
 1024778:	mov    esi,eax
 102477a:	test   eax,eax
 102477c:	jne    0x1024949
 1024782:	lea    rdx,[rip+0xfffffffffffdd687]        # 0x1001e10
 1024789:	lea    rcx,[rsp+0x158]
 1024791:	call   QWORD PTR [rip+0xfffffffffffdd319]        # 0x1001ab0
 1024797:	nop
 1024798:	xor    r15d,r15d
 102479b:	mov    DWORD PTR [rsp+0x1b4],r15d
 10247a3:	mov    DWORD PTR [rsp+0x1c8],r13d
 10247ab:	mov    r12,QWORD PTR [rsp+0x108]
 10247b3:	data16 data16 data16 data16 nop WORD PTR [rax+rax*1+0x0]
 10247c0:	cmp    r13d,DWORD PTR [rsp+0x88]
 10247c8:	jge    0x1024877
 10247ce:	movsxd rax,r13d
 10247d1:	lea    rsi,[r12+rax*8]
 10247d5:	lea    rdx,[rip+0xfffffffffffe1f58]        # 0x1006734
 10247dc:	mov    rcx,QWORD PTR [rsi]
 10247df:	call   QWORD PTR [rip+0xfffffffffffdceeb]        # 0x10016d0
 10247e5:	test   eax,eax
 10247e7:	je     0x102485b
 10247e9:	lea    rdx,[rip+0xfffffffffffe1f4c]        # 0x100673c
 10247f0:	mov    rcx,QWORD PTR [rsi]
 10247f3:	call   QWORD PTR [rip+0xfffffffffffdced7]        # 0x10016d0
 10247f9:	test   eax,eax
 10247fb:	je     0x102485b
 10247fd:	cmp    r13d,r15d
 1024800:	jne    0x102481e
 1024802:	mov    rax,QWORD PTR [rsi]
 1024805:	movzx  ecx,WORD PTR [rax]
 1024808:	mov    eax,0x2f
 102480d:	cmp    ax,cx
 1024810:	je     0x102481e
 1024812:	mov    eax,0x2d
 1024817:	cmp    ax,cx
 102481a:	je     0x102481e
 102481c:	jmp    0x1024867
 102481e:	lea    rdx,[rip+0xfffffffffffe06ef]        # 0x1004f14
 1024825:	lea    rcx,[rsp+0x158]
 102482d:	call   QWORD PTR [rip+0xfffffffffffdd25d]        # 0x1001a90
 1024833:	mov    rdx,QWORD PTR [rsi]
 1024836:	lea    rcx,[rsp+0x158]
 102483e:	call   QWORD PTR [rip+0xfffffffffffdd24c]        # 0x1001a90
 1024844:	lea    rdx,[rip+0xfffffffffffe1ef9]        # 0x1006744
 102484b:	lea    rcx,[rsp+0x158]
 1024853:	call   QWORD PTR [rip+0xfffffffffffdd237]        # 0x1001a90
 1024859:	jmp    0x1024867
 102485b:	lea    r15d,[r13+0x1]
 102485f:	mov    DWORD PTR [rsp+0x1b4],r15d
 1024867:	inc    r13d
 102486a:	mov    DWORD PTR [rsp+0x1c8],r13d
 1024872:	jmp    0x10247c0
 1024877:	lea    rcx,[rsp+0x158]
 102487f:	call   QWORD PTR [rip+0xfffffffffffdd263]        # 0x1001ae8
 1024885:	mov    rdx,rax
 1024888:	mov    r8,r14
 102488b:	lea    rcx,[rip+0xfffffffffffe1ebe]        # 0x1006750
 1024892:	call   0x1032f20
 1024897:	test   al,al
 1024899:	jne    0x10248b8
 102489b:	mov    rax,QWORD PTR [r14]
 102489e:	mov    BYTE PTR [rsp+0x28],0x1
 10248a3:	mov    BYTE PTR [rsp+0x20],0x1
 10248a8:	xor    r9d,r9d
 10248ab:	xor    r8d,r8d
 10248ae:	mov    edx,0xc000c427
 10248b3:	mov    rcx,r14
 10248b6:	call   QWORD PTR [rax]
 10248b8:	mov    rax,QWORD PTR [r14]
 10248bb:	mov    BYTE PTR [rsp+0x28],0x1
 10248c0:	mov    BYTE PTR [rsp+0x20],0x1
 10248c5:	xor    r9d,r9d
 10248c8:	xor    r8d,r8d
 10248cb:	mov    edx,0x4000c418
 10248d0:	mov    rcx,r14
 10248d3:	call   QWORD PTR [rax]
 10248d5:	nop
 10248d6:	lea    rcx,[rsp+0x158]
 10248de:	call   QWORD PTR [rip+0xfffffffffffdd1c4]        # 0x1001aa8
 10248e4:	nop
 10248e5:	lea    rcx,[rsp+0x128]
 10248ed:	call   QWORD PTR [rip+0xfffffffffffdd1b5]        # 0x1001aa8
 10248f3:	nop
 10248f4:	test   rdi,rdi
 10248f7:	je     0x102490e
 10248f9:	mov    rcx,rdi
 10248fc:	call   QWORD PTR [rip+0xfffffffffffdcbd6]        # 0x10014d8
 1024902:	mov    QWORD PTR [rsp+0xa0],0x0
 102490e:	test   rbx,rbx
 1024911:	je     0x1024928
 1024913:	mov    rcx,rbx
 1024916:	call   QWORD PTR [rip+0xfffffffffffdcbbc]        # 0x10014d8
 102491c:	mov    QWORD PTR [rsp+0xa8],0x0
 1024928:	lea    rcx,[rsp+0x80]
 1024930:	call   QWORD PTR [rip+0xfffffffffffdd172]        # 0x1001aa8
 1024936:	nop
 1024937:	lea    rcx,[rsp+0x78]
 102493c:	call   QWORD PTR [rip+0xfffffffffffdd166]        # 0x1001aa8
 1024942:	mov    al,0x1
 1024944:	jmp    0x1028270
 1024949:	mov    rax,QWORD PTR [r14]
 102494c:	mov    BYTE PTR [rsp+0x28],0x1
 1024951:	mov    BYTE PTR [rsp+0x20],0x1
 1024956:	mov    r9d,0x2
 102495c:	xor    r8d,r8d
 102495f:	mov    edx,0xc000c41a
 1024964:	mov    rcx,r14
 1024967:	call   QWORD PTR [rax]
 1024969:	mov    r11,QWORD PTR [r14]
 102496c:	mov    BYTE PTR [rsp+0x28],0x1
 1024971:	mov    BYTE PTR [rsp+0x20],0x1
 1024976:	mov    r9d,0x2
 102497c:	xor    r8d,r8d
 102497f:	mov    edx,esi
 1024981:	mov    rcx,r14
 1024984:	call   QWORD PTR [r11]
 1024987:	mov    r11,QWORD PTR [r14]
 102498a:	mov    BYTE PTR [rsp+0x28],0x1
 102498f:	mov    BYTE PTR [rsp+0x20],0x1
 1024994:	mov    r9d,0x2
 102499a:	xor    r8d,r8d
 102499d:	mov    edx,0xc000c41c
 10249a2:	mov    rcx,r14
 10249a5:	call   QWORD PTR [r11]
 10249a8:	nop
 10249a9:	lea    rcx,[rsp+0x128]
 10249b1:	call   QWORD PTR [rip+0xfffffffffffdd0f1]        # 0x1001aa8
 10249b7:	nop
 10249b8:	lea    rcx,[rsp+0x80]
 10249c0:	call   QWORD PTR [rip+0xfffffffffffdd0e2]        # 0x1001aa8
 10249c6:	nop
 10249c7:	lea    rcx,[rsp+0x78]
 10249cc:	call   QWORD PTR [rip+0xfffffffffffdd0d6]        # 0x1001aa8
 10249d2:	xor    al,al
 10249d4:	jmp    0x1028270
 10249d9:	lea    rcx,[rip+0x3ea70]        # 0x1063450
 10249e0:	call   0x10358e0
 10249e5:	mov    ebx,eax
 10249e7:	mov    BYTE PTR [rsp+0x28],0x1
 10249ec:	xor    r8d,r8d
 10249ef:	mov    rcx,r14
 10249f2:	mov    BYTE PTR [rsp+0x20],0x1
 10249f7:	test   eax,eax
 10249f9:	mov    rax,QWORD PTR [r14]
 10249fc:	jne    0x1024a39
 10249fe:	xor    r9d,r9d
 1024a01:	mov    edx,0x4000c419
 1024a06:	call   QWORD PTR [rax]
 1024a08:	mov    rdx,r14
 1024a0b:	lea    rcx,[rip+0x3ea3e]        # 0x1063450
 1024a12:	call   0x10331d0
 1024a17:	nop
 1024a18:	lea    rcx,[rsp+0x80]
 1024a20:	call   QWORD PTR [rip+0xfffffffffffdd082]        # 0x1001aa8
 1024a26:	nop
 1024a27:	lea    rcx,[rsp+0x78]
 1024a2c:	call   QWORD PTR [rip+0xfffffffffffdd076]        # 0x1001aa8
 1024a32:	mov    al,0x1
 1024a34:	jmp    0x1028270
 1024a39:	mov    r9d,0x2
 1024a3f:	mov    edx,0xc000c41b
 1024a44:	call   QWORD PTR [rax]
 1024a46:	mov    r11,QWORD PTR [r14]
 1024a49:	mov    BYTE PTR [rsp+0x28],0x1
 1024a4e:	mov    BYTE PTR [rsp+0x20],0x1
 1024a53:	mov    r9d,0x2
 1024a59:	xor    r8d,r8d
 1024a5c:	mov    edx,ebx
 1024a5e:	mov    rcx,r14
 1024a61:	call   QWORD PTR [r11]
 1024a64:	mov    r11,QWORD PTR [r14]
 1024a67:	mov    BYTE PTR [rsp+0x28],0x1
 1024a6c:	mov    BYTE PTR [rsp+0x20],0x1
 1024a71:	mov    r9d,0x2
 1024a77:	xor    r8d,r8d
 1024a7a:	mov    edx,0xc000c41c
 1024a7f:	mov    rcx,r14
 1024a82:	call   QWORD PTR [r11]
 1024a85:	nop
 1024a86:	lea    rcx,[rsp+0x80]
 1024a8e:	call   QWORD PTR [rip+0xfffffffffffdd014]        # 0x1001aa8
 1024a94:	nop
 1024a95:	lea    rcx,[rsp+0x78]
 1024a9a:	call   QWORD PTR [rip+0xfffffffffffdd008]        # 0x1001aa8
 1024aa0:	xor    al,al
 1024aa2:	jmp    0x1028270
 1024aa7:	mov    rax,QWORD PTR [r14]
 1024aaa:	mov    BYTE PTR [rsp+0x28],0x1
 1024aaf:	mov    BYTE PTR [rsp+0x20],0x1
 1024ab4:	xor    r9d,r9d
 1024ab7:	xor    r8d,r8d
 1024aba:	mov    edx,0xc000c417
 1024abf:	mov    rcx,r14
 1024ac2:	call   QWORD PTR [rax]
 1024ac4:	nop
 1024ac5:	lea    rcx,[rsp+0x80]
 1024acd:	call   QWORD PTR [rip+0xfffffffffffdcfd5]        # 0x1001aa8
 1024ad3:	nop
 1024ad4:	lea    rcx,[rsp+0x78]
 1024ad9:	call   QWORD PTR [rip+0xfffffffffffdcfc9]        # 0x1001aa8
 1024adf:	xor    al,al
 1024ae1:	jmp    0x1028270
 1024ae6:	mov    BYTE PTR [rsp+0x70],0x1
 1024aeb:	mov    rdx,QWORD PTR [rsi]
 1024aee:	lea    rcx,[rsp+0x140]
 1024af6:	call   QWORD PTR [rip+0xfffffffffffdcfb4]        # 0x1001ab0
 1024afc:	nop
 1024afd:	lea    rdx,[rip+0xfffffffffffe02b8]        # 0x1004dbc
 1024b04:	lea    rcx,[rsp+0x140]
 1024b0c:	call   QWORD PTR [rip+0xfffffffffffdcf7e]        # 0x1001a90
 1024b12:	mov    r9,r14
 1024b15:	lea    r8,[rip+0xfffffffffffe1c34]        # 0x1006750
 1024b1c:	mov    rdx,QWORD PTR [rsi]
 1024b1f:	lea    rcx,[rsp+0x318]
 1024b27:	call   0x10329e0
 1024b2c:	nop
 1024b2d:	mov    rdx,rax
 1024b30:	lea    rcx,[rsp+0x140]
 1024b38:	call   QWORD PTR [rip+0xfffffffffffdce9a]        # 0x10019d8
 1024b3e:	nop
 1024b3f:	lea    rcx,[rsp+0x318]
 1024b47:	call   QWORD PTR [rip+0xfffffffffffdcf5b]        # 0x1001aa8
 1024b4d:	lea    rcx,[rsp+0x140]
 1024b55:	call   QWORD PTR [rip+0xfffffffffffdcf95]        # 0x1001af0
 1024b5b:	test   eax,eax
 1024b5d:	jle    0x1024bf8
 1024b63:	lea    rcx,[rsp+0x140]
 1024b6b:	call   QWORD PTR [rip+0xfffffffffffdcf77]        # 0x1001ae8
 1024b71:	mov    rcx,rax
 1024b74:	lea    rdx,[rsp+0x134]
 1024b7c:	call   QWORD PTR [rip+0xfffffffffffdccfe]        # 0x1001880
 1024b82:	mov    QWORD PTR [rsp+0x1a0],rax
 1024b8a:	mov    r8,rax
 1024b8d:	mov    edx,DWORD PTR [rsp+0x134]
 1024b94:	mov    rcx,r14
 1024b97:	call   0x102a5d0
 1024b9c:	mov    BYTE PTR [rsp+0x131],al
 1024ba3:	test   al,al
 1024ba5:	jne    0x1024bf8
 1024ba7:	mov    rax,QWORD PTR [r14]
 1024baa:	mov    BYTE PTR [rsp+0x28],0x1
 1024baf:	mov    BYTE PTR [rsp+0x20],0x1
 1024bb4:	mov    r9d,0x2
 1024bba:	xor    r8d,r8d
 1024bbd:	mov    edx,0xc000c3f7
 1024bc2:	mov    rcx,r14
 1024bc5:	call   QWORD PTR [rax]
 1024bc7:	nop
 1024bc8:	lea    rcx,[rsp+0x140]
 1024bd0:	call   QWORD PTR [rip+0xfffffffffffdced2]        # 0x1001aa8
 1024bd6:	nop
 1024bd7:	lea    rcx,[rsp+0x80]
 1024bdf:	call   QWORD PTR [rip+0xfffffffffffdcec3]        # 0x1001aa8
 1024be5:	nop
 1024be6:	lea    rcx,[rsp+0x78]
 1024beb:	call   QWORD PTR [rip+0xfffffffffffdceb7]        # 0x1001aa8
 1024bf1:	xor    al,al
 1024bf3:	jmp    0x1028270
 1024bf8:	mov    rax,QWORD PTR [r14]
 1024bfb:	mov    BYTE PTR [rsp+0x28],0x1
 1024c00:	mov    BYTE PTR [rsp+0x20],0x1
 1024c05:	xor    r9d,r9d
 1024c08:	xor    r8d,r8d
 1024c0b:	mov    edx,0x4000c41f
 1024c10:	mov    rcx,r14
 1024c13:	call   QWORD PTR [rax]
 1024c15:	mov    BYTE PTR [r14+0xb8],0x1
 1024c1d:	lea    rcx,[rsp+0x140]
 1024c25:	call   QWORD PTR [rip+0xfffffffffffdce7d]        # 0x1001aa8
 1024c2b:	mov    DWORD PTR [rsp+0x4d0],0x81
 1024c36:	lea    r9,[rip+0x3e6f3]        # 0x1063330
 1024c3d:	lea    r8,[rip+0xfffffffffffe1b34]        # 0x1006778
 1024c44:	mov    edx,0x81
 1024c49:	lea    rcx,[rsp+0x770]
 1024c51:	call   0x102ce80
 1024c56:	lea    r8,[rsp+0x770]
 1024c5e:	mov    r13d,0x1
 1024c64:	mov    edx,r13d
 1024c67:	xor    ecx,ecx
 1024c69:	call   QWORD PTR [rip+0xfffffffffffdc731]        # 0x10013a0
 1024c6f:	mov    rsi,rax
 1024c72:	mov    QWORD PTR [rsp+0x178],rax
 1024c7a:	call   QWORD PTR [rip+0xfffffffffffdc8d0]        # 0x1001550
 1024c80:	mov    r15d,eax
 1024c83:	mov    DWORD PTR [rsp+0x380],eax
 1024c8a:	test   rsi,rsi
 1024c8d:	jne    0x1024e0e
 1024c93:	lea    rcx,[rsp+0xf8]
 1024c9b:	call   QWORD PTR [rip+0xfffffffffffdce1f]        # 0x1001ac0
 1024ca1:	nop
 1024ca2:	cmp    r15d,0x5
 1024ca6:	jne    0x1024d46
 1024cac:	mov    edx,0xc000c4aa
 1024cb1:	lea    rcx,[rsp+0x450]
 1024cb9:	call   0x10132d0
 1024cbe:	nop
 1024cbf:	mov    rcx,rax
 1024cc2:	call   QWORD PTR [rip+0xfffffffffffdce20]        # 0x1001ae8
 1024cc8:	mov    rdx,rax
 1024ccb:	lea    r8,[rip+0x3e65e]        # 0x1063330
 1024cd2:	lea    rcx,[rsp+0xf8]
 1024cda:	call   QWORD PTR [rip+0xfffffffffffdcd60]        # 0x1001a40
 1024ce0:	nop
 1024ce1:	lea    rcx,[rsp+0x450]
 1024ce9:	call   QWORD PTR [rip+0xfffffffffffdcdb9]        # 0x1001aa8
 1024cef:	mov    r11,QWORD PTR [r14]
 1024cf2:	mov    BYTE PTR [rsp+0x28],r13b
 1024cf7:	mov    BYTE PTR [rsp+0x20],r13b
 1024cfc:	lea    r9d,[r13+0x1]
 1024d00:	movzx  r8d,r13b
 1024d04:	mov    edx,r15d
 1024d07:	mov    rcx,r14
 1024d0a:	call   QWORD PTR [r11]
 1024d0d:	mov    rbx,QWORD PTR [r14]
 1024d10:	lea    rcx,[rsp+0xf8]
 1024d18:	call   QWORD PTR [rip+0xfffffffffffdcdca]        # 0x1001ae8
 1024d1e:	mov    r8,rax
 1024d21:	mov    BYTE PTR [rsp+0x30],r13b
 1024d26:	mov    BYTE PTR [rsp+0x28],r13b
 1024d2b:	mov    DWORD PTR [rsp+0x20],0x2
 1024d33:	xor    r9d,r9d
 1024d36:	mov    edx,0xc000c4aa
 1024d3b:	mov    rcx,r14
 1024d3e:	call   QWORD PTR [rbx+0x8]
 1024d41:	jmp    0x1024dde
 1024d46:	mov    edx,0xc000c4ab
 1024d4b:	lea    rcx,[rsp+0x328]
 1024d53:	call   0x10132d0
 1024d58:	nop
 1024d59:	mov    rcx,rax
 1024d5c:	call   QWORD PTR [rip+0xfffffffffffdcd86]        # 0x1001ae8
 1024d62:	mov    rdx,rax
 1024d65:	lea    r8,[rsp+0x770]
 1024d6d:	lea    rcx,[rsp+0xf8]
 1024d75:	call   QWORD PTR [rip+0xfffffffffffdccc5]        # 0x1001a40
 1024d7b:	nop
 1024d7c:	lea    rcx,[rsp+0x328]
 1024d84:	call   QWORD PTR [rip+0xfffffffffffdcd1e]        # 0x1001aa8
 1024d8a:	mov    rbx,QWORD PTR [r14]
 1024d8d:	lea    rcx,[rsp+0xf8]
 1024d95:	call   QWORD PTR [rip+0xfffffffffffdcd4d]        # 0x1001ae8
 1024d9b:	mov    r8,rax
 1024d9e:	mov    BYTE PTR [rsp+0x30],0x1
 1024da3:	mov    BYTE PTR [rsp+0x28],0x1
 1024da8:	mov    DWORD PTR [rsp+0x20],0x2
 1024db0:	mov    r9b,0x1
 1024db3:	mov    edx,0xc000c4ab
 1024db8:	mov    rcx,r14
 1024dbb:	call   QWORD PTR [rbx+0x8]
 1024dbe:	mov    r11,QWORD PTR [r14]
 1024dc1:	mov    BYTE PTR [rsp+0x28],0x1
 1024dc6:	mov    BYTE PTR [rsp+0x20],0x1
 1024dcb:	mov    r9d,0x2
 1024dd1:	xor    r8d,r8d
 1024dd4:	mov    edx,r15d
 1024dd7:	mov    rcx,r14
 1024dda:	call   QWORD PTR [r11]
 1024ddd:	nop
 1024dde:	lea    rcx,[rsp+0xf8]
 1024de6:	call   QWORD PTR [rip+0xfffffffffffdccbc]        # 0x1001aa8
 1024dec:	nop
 1024ded:	lea    rcx,[rsp+0x80]
 1024df5:	call   QWORD PTR [rip+0xfffffffffffdccad]        # 0x1001aa8
 1024dfb:	nop
 1024dfc:	lea    rcx,[rsp+0x78]
 1024e01:	call   QWORD PTR [rip+0xfffffffffffdcca1]        # 0x1001aa8
 1024e07:	xor    al,al
 1024e09:	jmp    0x1028270
 1024e0e:	cmp    eax,0xb7
 1024e13:	jne    0x1024ed0
 1024e19:	lea    rcx,[rsp+0x118]
 1024e21:	call   QWORD PTR [rip+0xfffffffffffdcc99]        # 0x1001ac0
 1024e27:	nop
 1024e28:	mov    edx,0xc000c4aa
 1024e2d:	lea    rcx,[rsp+0x460]
 1024e35:	call   0x10132d0
 1024e3a:	nop
 1024e3b:	mov    rcx,rax
 1024e3e:	call   QWORD PTR [rip+0xfffffffffffdcca4]        # 0x1001ae8
 1024e44:	mov    rdx,rax
 1024e47:	lea    r8,[rip+0x3e4e2]        # 0x1063330
 1024e4e:	lea    rcx,[rsp+0x118]
 1024e56:	call   QWORD PTR [rip+0xfffffffffffdcbe4]        # 0x1001a40
 1024e5c:	nop
 1024e5d:	lea    rcx,[rsp+0x460]
 1024e65:	call   QWORD PTR [rip+0xfffffffffffdcc3d]        # 0x1001aa8
 1024e6b:	mov    rbx,QWORD PTR [r14]
 1024e6e:	lea    rcx,[rsp+0x118]
 1024e76:	call   QWORD PTR [rip+0xfffffffffffdcc6c]        # 0x1001ae8
 1024e7c:	mov    r8,rax
 1024e7f:	mov    BYTE PTR [rsp+0x30],0x1
 1024e84:	mov    BYTE PTR [rsp+0x28],0x1
 1024e89:	mov    DWORD PTR [rsp+0x20],0x2
 1024e91:	xor    r9d,r9d
 1024e94:	mov    edx,0xc000c4aa
 1024e99:	mov    rcx,r14
 1024e9c:	call   QWORD PTR [rbx+0x8]
 1024e9f:	nop
 1024ea0:	lea    rcx,[rsp+0x118]
 1024ea8:	call   QWORD PTR [rip+0xfffffffffffdcbfa]        # 0x1001aa8
 1024eae:	nop
 1024eaf:	lea    rcx,[rsp+0x80]
 1024eb7:	call   QWORD PTR [rip+0xfffffffffffdcbeb]        # 0x1001aa8
 1024ebd:	nop
 1024ebe:	lea    rcx,[rsp+0x78]
 1024ec3:	call   QWORD PTR [rip+0xfffffffffffdcbdf]        # 0x1001aa8
 1024ec9:	xor    al,al
 1024ecb:	jmp    0x1028270
 1024ed0:	test   eax,eax
 1024ed2:	je     0x1024f14
 1024ed4:	mov    rax,QWORD PTR [r14]
 1024ed7:	mov    BYTE PTR [rsp+0x28],r13b
 1024edc:	mov    BYTE PTR [rsp+0x20],r13b
 1024ee1:	mov    r9d,0x2
 1024ee7:	xor    r8d,r8d
 1024eea:	mov    edx,r15d
 1024eed:	mov    rcx,r14
 1024ef0:	call   QWORD PTR [rax]
 1024ef2:	nop
 1024ef3:	lea    rcx,[rsp+0x80]
 1024efb:	call   QWORD PTR [rip+0xfffffffffffdcba7]        # 0x1001aa8
 1024f01:	nop
 1024f02:	lea    rcx,[rsp+0x78]
 1024f07:	call   QWORD PTR [rip+0xfffffffffffdcb9b]        # 0x1001aa8
 1024f0d:	xor    al,al
 1024f0f:	jmp    0x1028270
 1024f14:	mov    DWORD PTR [rsp+0x1e8],0x10
 1024f1f:	lea    rdx,[rsp+0x1e8]
 1024f27:	lea    rcx,[rsp+0x750]
 1024f2f:	call   QWORD PTR [rip+0xfffffffffffdc2eb]        # 0x1001220
 1024f35:	lea    r11,[rsp+0x750]
 1024f3d:	mov    QWORD PTR [rsp+0x20],r11
 1024f42:	lea    r9,[rip+0x3e507]        # 0x1063450
 1024f49:	lea    r8,[rip+0xfffffffffffe0d20]        # 0x1005c70
 1024f50:	mov    edx,0x80
 1024f55:	lea    rcx,[rip+0x3e9d4]        # 0x1063930
 1024f5c:	call   0x102ce80
 1024f61:	cmp    BYTE PTR [r14+0xb8],0x0
 1024f69:	je     0x1024f76
 1024f6b:	mov    ecx,0x8005
 1024f70:	call   QWORD PTR [rip+0xfffffffffffdc392]        # 0x1001308
 1024f76:	lea    r15,[r14+0x90]
 1024f7d:	mov    rcx,r15
 1024f80:	call   QWORD PTR [rip+0xfffffffffffdc9ba]        # 0x1001940
 1024f86:	test   al,al
 1024f88:	jne    0x1025132
 1024f8e:	mov    rcx,r15
 1024f91:	call   QWORD PTR [rip+0xfffffffffffdcb51]        # 0x1001ae8
 1024f97:	mov    rcx,rax
 1024f9a:	lea    r9,[rsp+0x5d8]
 1024fa2:	lea    r8,[rsp+0xa90]
 1024faa:	mov    edx,0x400
 1024faf:	call   QWORD PTR [rip+0xfffffffffffdc44b]        # 0x1001400
 1024fb5:	lea    rcx,[r14+0x88]
 1024fbc:	lea    rdx,[rsp+0xa90]
 1024fc4:	call   QWORD PTR [rip+0xfffffffffffdcace]        # 0x1001a98
 1024fca:	lea    rdx,[rsp+0xa90]
 1024fd2:	mov    rcx,r15
 1024fd5:	call   QWORD PTR [rip+0xfffffffffffdcabd]        # 0x1001a98
 1024fdb:	mov    rcx,r15
 1024fde:	call   QWORD PTR [rip+0xfffffffffffdcb04]        # 0x1001ae8
 1024fe4:	mov    rdx,rax
 1024fe7:	lea    rcx,[rsp+0x338]
 1024fef:	call   0x10309c0
 1024ff4:	nop
 1024ff5:	mov    rdx,rax
 1024ff8:	mov    rcx,r15
 1024ffb:	call   QWORD PTR [rip+0xfffffffffffdca9f]        # 0x1001aa0
 1025001:	nop
 1025002:	lea    rcx,[rsp+0x338]
 102500a:	call   QWORD PTR [rip+0xfffffffffffdca98]        # 0x1001aa8
 1025010:	lea    rcx,[r14+0x80]
 1025017:	call   QWORD PTR [rip+0xfffffffffffdcacb]        # 0x1001ae8
 102501d:	mov    rsi,rax
 1025020:	mov    rcx,r15
 1025023:	call   QWORD PTR [rip+0xfffffffffffdcabf]        # 0x1001ae8
 1025029:	mov    rcx,rax
 102502c:	mov    rdx,rsi
 102502f:	call   0x1030910
 1025034:	mov    esi,eax
 1025036:	mov    DWORD PTR [rsp+0x3d0],eax
 102503d:	test   eax,eax
 102503f:	je     0x10250db
 1025045:	lea    rcx,[rsp+0x1e0]
 102504d:	call   QWORD PTR [rip+0xfffffffffffdca6d]        # 0x1001ac0
 1025053:	nop
 1025054:	mov    edx,0xc000c4b2
 1025059:	lea    rcx,[rsp+0x470]
 1025061:	call   0x10132d0
 1025066:	nop
 1025067:	mov    rcx,rax
 102506a:	call   QWORD PTR [rip+0xfffffffffffdca78]        # 0x1001ae8
 1025070:	mov    rdx,rax
 1025073:	mov    r8,QWORD PTR [r15]
 1025076:	lea    rcx,[rsp+0x1e0]
 102507e:	call   QWORD PTR [rip+0xfffffffffffdc9bc]        # 0x1001a40
 1025084:	nop
 1025085:	lea    rcx,[rsp+0x470]
 102508d:	call   QWORD PTR [rip+0xfffffffffffdca15]        # 0x1001aa8
 1025093:	lea    r11,[rsp+0x348]
 102509b:	mov    QWORD PTR [rsp+0x5e8],r11
 10250a3:	lea    rdx,[rsp+0x1e0]
 10250ab:	lea    rcx,[rsp+0x348]
 10250b3:	call   QWORD PTR [rip+0xfffffffffffdc8ff]        # 0x10019b8
 10250b9:	nop
 10250ba:	mov    r10,QWORD PTR [r14]
 10250bd:	xor    r9d,r9d
 10250c0:	mov    r8,rax
 10250c3:	mov    edx,esi
 10250c5:	mov    rcx,r14
 10250c8:	call   QWORD PTR [r10+0x28]
 10250cc:	nop
 10250cd:	lea    rcx,[rsp+0x1e0]
 10250d5:	call   QWORD PTR [rip+0xfffffffffffdc9cd]        # 0x1001aa8
 10250db:	mov    rcx,r15
 10250de:	call   QWORD PTR [rip+0xfffffffffffdca04]        # 0x1001ae8
 10250e4:	mov    rcx,rax
 10250e7:	call   0x1030a70
 10250ec:	test   al,al
 10250ee:	jne    0x102516c
 10250f0:	mov    rax,QWORD PTR [r14]
 10250f3:	mov    BYTE PTR [rsp+0x28],0x1
 10250f8:	mov    BYTE PTR [rsp+0x20],0x1
 10250fd:	mov    r9d,0x2
 1025103:	xor    r8d,r8d
 1025106:	mov    edx,0xc000c4b1
 102510b:	mov    rcx,r14
 102510e:	call   QWORD PTR [rax]
 1025110:	nop
 1025111:	lea    rcx,[rsp+0x80]
 1025119:	call   QWORD PTR [rip+0xfffffffffffdc989]        # 0x1001aa8
 102511f:	nop
 1025120:	lea    rcx,[rsp+0x78]
 1025125:	call   QWORD PTR [rip+0xfffffffffffdc97d]        # 0x1001aa8
 102512b:	xor    al,al
 102512d:	jmp    0x1028270
 1025132:	lea    rdx,[rsp+0x880]
 102513a:	lea    rcx,[rsp+0x480]
 1025142:	call   0x1030f80
 1025147:	nop
 1025148:	lea    rsi,[r14+0x88]
 102514f:	mov    rdx,rax
 1025152:	mov    rcx,rsi
 1025155:	call   QWORD PTR [rip+0xfffffffffffdc945]        # 0x1001aa0
 102515b:	nop
 102515c:	lea    rcx,[rsp+0x480]
 1025164:	call   QWORD PTR [rip+0xfffffffffffdc93e]        # 0x1001aa8
 102516a:	jmp    0x1025173
 102516c:	lea    rsi,[r14+0x88]
 1025173:	mov    rcx,rsi
 1025176:	call   QWORD PTR [rip+0xfffffffffffdc96c]        # 0x1001ae8
 102517c:	mov    rdx,rax
 102517f:	lea    rcx,[rsp+0x358]
 1025187:	call   0x10309c0
 102518c:	nop
 102518d:	mov    rdx,rax
 1025190:	mov    rcx,rsi
 1025193:	call   QWORD PTR [rip+0xfffffffffffdc907]        # 0x1001aa0
 1025199:	nop
 102519a:	lea    rcx,[rsp+0x358]
 10251a2:	call   QWORD PTR [rip+0xfffffffffffdc900]        # 0x1001aa8
 10251a8:	mov    rcx,rsi
 10251ab:	call   QWORD PTR [rip+0xfffffffffffdc937]        # 0x1001ae8
 10251b1:	mov    rcx,rax
 10251b4:	call   QWORD PTR [rip+0xfffffffffffdc226]        # 0x10013e0
 10251ba:	lea    r15,[r14+0x98]
 10251c1:	mov    rcx,r15
 10251c4:	call   QWORD PTR [rip+0xfffffffffffdc926]        # 0x1001af0
 10251ca:	test   eax,eax
 10251cc:	jne    0x1025257
 10251d2:	lea    rcx,[rsp+0x188]
 10251da:	call   QWORD PTR [rip+0xfffffffffffdc8e0]        # 0x1001ac0
 10251e0:	nop
 10251e1:	lea    rdx,[rip+0xfffffffffffe15b8]        # 0x10067a0
 10251e8:	lea    rcx,[rsp+0x188]
 10251f0:	call   QWORD PTR [rip+0xfffffffffffdc8a2]        # 0x1001a98
 10251f6:	lea    r9,[rip+0xfffffffffffe15b3]        # 0x10067b0
 10251fd:	mov    r8,QWORD PTR [rsp+0x188]
 1025205:	lea    rdx,[rip+0xfffffffffffdcd64]        # 0x1001f70
 102520c:	mov    rcx,r15
 102520f:	call   QWORD PTR [rip+0xfffffffffffdc82b]        # 0x1001a40
 1025215:	mov    rcx,r15
 1025218:	call   QWORD PTR [rip+0xfffffffffffdc8ca]        # 0x1001ae8
 102521e:	mov    rcx,rax
 1025221:	call   0x1030aa0
 1025226:	test   al,al
 1025228:	jne    0x102524a
 102522a:	lea    r9,[rip+0xfffffffffffe0edf]        # 0x1006110
 1025231:	mov    r8,QWORD PTR [rsp+0x188]
 1025239:	lea    rdx,[rip+0xfffffffffffdcd30]        # 0x1001f70
 1025240:	mov    rcx,r15
 1025243:	call   QWORD PTR [rip+0xfffffffffffdc7f7]        # 0x1001a40
 1025249:	nop
 102524a:	lea    rcx,[rsp+0x188]
 1025252:	jmp    0x1025390
 1025257:	mov    rcx,r15
 102525a:	call   QWORD PTR [rip+0xfffffffffffdc888]        # 0x1001ae8
 1025260:	mov    rcx,rax
 1025263:	call   0x1030aa0
 1025268:	test   al,al
 102526a:	jne    0x10252cf
 102526c:	lea    rdx,[rip+0xfffffffffffe154d]        # 0x10067c0
 1025273:	mov    rcx,r15
 1025276:	call   QWORD PTR [rip+0xfffffffffffdc7e4]        # 0x1001a60
 102527c:	test   eax,eax
 102527e:	jne    0x10252cf
 1025280:	xor    r8d,r8d
 1025283:	mov    r12,QWORD PTR [rsp+0x108]
 102528b:	mov    rdx,QWORD PTR [r12]
 102528f:	lea    rcx,[rsp+0x490]
 1025297:	call   0x1031010
 102529c:	nop
 102529d:	mov    r12d,r13d
 10252a0:	mov    DWORD PTR [rsp+0x168],r13d
 10252a8:	mov    rcx,rax
 10252ab:	call   QWORD PTR [rip+0xfffffffffffdc837]        # 0x1001ae8
 10252b1:	mov    rcx,rax
 10252b4:	mov    r8,r14
 10252b7:	lea    rdx,[rip+0xfffffffffffe1512]        # 0x10067d0
 10252be:	call   0x1033380
 10252c3:	test   al,al
 10252c5:	mov    BYTE PTR [rsp+0x98],r12b
 10252cd:	jne    0x10252d7
 10252cf:	mov    BYTE PTR [rsp+0x98],0x0
 10252d7:	test   r12b,0x1
 10252db:	je     0x10252f7
 10252dd:	and    r12d,0xfffffffe
 10252e1:	mov    DWORD PTR [rsp+0x168],r12d
 10252e9:	lea    rcx,[rsp+0x490]
 10252f1:	call   QWORD PTR [rip+0xfffffffffffdc7b1]        # 0x1001aa8
 10252f7:	cmp    BYTE PTR [rsp+0x98],0x0
 10252ff:	je     0x1025396
 1025305:	xor    r8d,r8d
 1025308:	mov    rax,QWORD PTR [rsp+0x108]
 1025310:	mov    rdx,QWORD PTR [rax]
 1025313:	lea    rcx,[rsp+0x4a0]
 102531b:	call   0x1031010
 1025320:	nop
 1025321:	mov    rcx,rax
 1025324:	call   QWORD PTR [rip+0xfffffffffffdc7be]        # 0x1001ae8
 102532a:	mov    rdx,rax
 102532d:	mov    r9,r14
 1025330:	lea    r8,[rip+0xfffffffffffe1499]        # 0x10067d0
 1025337:	lea    rcx,[rsp+0x270]
 102533f:	call   0x10329e0
 1025344:	nop
 1025345:	lea    rcx,[rsp+0x4a0]
 102534d:	call   QWORD PTR [rip+0xfffffffffffdc755]        # 0x1001aa8
 1025353:	lea    rcx,[rsp+0x270]
 102535b:	call   QWORD PTR [rip+0xfffffffffffdc787]        # 0x1001ae8
 1025361:	mov    rdx,rax
 1025364:	mov    r8,r14
 1025367:	lea    rcx,[rip+0xfffffffffffe1482]        # 0x10067f0
 102536e:	call   0x1030d70
 1025373:	test   al,al
 1025375:	je     0x1025388
 1025377:	lea    rdx,[rip+0xfffffffffffe1472]        # 0x10067f0
 102537e:	mov    rcx,r15
 1025381:	call   QWORD PTR [rip+0xfffffffffffdc711]        # 0x1001a98
 1025387:	nop
 1025388:	lea    rcx,[rsp+0x270]
 1025390:	call   QWORD PTR [rip+0xfffffffffffdc712]        # 0x1001aa8
 1025396:	lea    rcx,[r14+0x78]
 102539a:	call   QWORD PTR [rip+0xfffffffffffdc5a0]        # 0x1001940
 10253a0:	test   al,al
 10253a2:	je     0x10253b1
 10253a4:	mov    rdx,rsi
 10253a7:	lea    rcx,[r14+0x78]
 10253ab:	call   QWORD PTR [rip+0xfffffffffffdc6ef]        # 0x1001aa0
 10253b1:	lea    rcx,[r14+0x90]
 10253b8:	call   QWORD PTR [rip+0xfffffffffffdc582]        # 0x1001940
 10253be:	movzx  edx,al
 10253c1:	mov    rcx,r14
 10253c4:	call   0x10287d0
 10253c9:	test   al,al
 10253cb:	jne    0x102540f
 10253cd:	mov    rax,QWORD PTR [r14]
 10253d0:	mov    BYTE PTR [rsp+0x28],0x1
 10253d5:	mov    BYTE PTR [rsp+0x20],0x1
 10253da:	mov    r9d,0x2
 10253e0:	xor    r8d,r8d
 10253e3:	mov    edx,0xc000c44e
 10253e8:	mov    rcx,r14
 10253eb:	call   QWORD PTR [rax]
 10253ed:	nop
 10253ee:	lea    rcx,[rsp+0x80]
 10253f6:	call   QWORD PTR [rip+0xfffffffffffdc6ac]        # 0x1001aa8
 10253fc:	nop
 10253fd:	lea    rcx,[rsp+0x78]
 1025402:	call   QWORD PTR [rip+0xfffffffffffdc6a0]        # 0x1001aa8
 1025408:	xor    al,al
 102540a:	jmp    0x1028270
 102540f:	lea    rcx,[r14+0x68]
 1025413:	call   QWORD PTR [rip+0xfffffffffffdc6d7]        # 0x1001af0
 1025419:	test   eax,eax
 102541b:	je     0x10254c5
 1025421:	lea    rcx,[r14+0x68]
 1025425:	call   QWORD PTR [rip+0xfffffffffffdc6bd]        # 0x1001ae8
 102542b:	mov    rcx,rax
 102542e:	mov    r8,r14
 1025431:	xor    edx,edx
 1025433:	call   0x102c0d0
 1025438:	mov    rbx,rax
 102543b:	mov    QWORD PTR [rsp+0x5f8],rax
 1025443:	mov    QWORD PTR [rsp+0xa8],rax
 102544b:	test   rax,rax
 102544e:	jne    0x102548d
 1025450:	mov    edx,0xc000c454
 1025455:	lea    rcx,[rsp+0x370]
 102545d:	call   0x10132d0
 1025462:	nop
 1025463:	mov    rcx,rax
 1025466:	call   QWORD PTR [rip+0xfffffffffffdc67c]        # 0x1001ae8
 102546c:	mov    rdx,rax
 102546f:	mov    r8,QWORD PTR [r14+0x68]
 1025473:	lea    rcx,[rsp+0x78]
 1025478:	call   QWORD PTR [rip+0xfffffffffffdc5c2]        # 0x1001a40
 102547e:	nop
 102547f:	lea    rcx,[rsp+0x370]
 1025487:	call   QWORD PTR [rip+0xfffffffffffdc61b]        # 0x1001aa8
 102548d:	mov    rsi,QWORD PTR [r14]
 1025490:	lea    rcx,[rsp+0x78]
 1025495:	call   QWORD PTR [rip+0xfffffffffffdc64d]        # 0x1001ae8
 102549b:	mov    r8,rax
 102549e:	mov    BYTE PTR [rsp+0x30],0x1
 10254a3:	mov    BYTE PTR [rsp+0x28],0x1
 10254a8:	mov    DWORD PTR [rsp+0x20],0x0
 10254b0:	xor    r9d,r9d
 10254b3:	mov    edx,0xc000c454
 10254b8:	mov    rcx,r14
 10254bb:	call   QWORD PTR [rsi+0x8]
 10254be:	lea    rsi,[r14+0x88]
 10254c5:	mov    edx,0x5c
 10254ca:	xor    r8d,r8d
 10254cd:	mov    rcx,r15
 10254d0:	call   QWORD PTR [rip+0xfffffffffffdc482]        # 0x1001958
 10254d6:	cmp    eax,0xffffffff
 10254d9:	jne    0x102551e
 10254db:	lea    rdx,[rip+0xfffffffffffe12de]        # 0x10067c0
 10254e2:	mov    rcx,r15
 10254e5:	call   QWORD PTR [rip+0xfffffffffffdc575]        # 0x1001a60
 10254eb:	test   eax,eax
 10254ed:	je     0x102551e
 10254ef:	mov    r8,r15
 10254f2:	mov    rdx,rsi
 10254f5:	lea    rcx,[rsp+0x420]
 10254fd:	call   0x1013cc0
 1025502:	nop
 1025503:	mov    rdx,rax
 1025506:	mov    rcx,r15
 1025509:	call   QWORD PTR [rip+0xfffffffffffdc591]        # 0x1001aa0
 102550f:	nop
 1025510:	lea    rcx,[rsp+0x420]
 1025518:	call   QWORD PTR [rip+0xfffffffffffdc58a]        # 0x1001aa8
 102551e:	lea    rcx,[r14+0x78]
 1025522:	call   QWORD PTR [rip+0xfffffffffffdc5c0]        # 0x1001ae8
 1025528:	mov    rcx,rax
 102552b:	lea    r9,[rsp+0x608]
 1025533:	lea    r8,[rsp+0xa90]
 102553b:	mov    edx,0x104
 1025540:	call   QWORD PTR [rip+0xfffffffffffdbeba]        # 0x1001400
 1025546:	test   eax,eax
 1025548:	je     0x102555c
 102554a:	lea    rdx,[rsp+0xa90]
 1025552:	lea    rcx,[r14+0x78]
 1025556:	call   QWORD PTR [rip+0xfffffffffffdc53c]        # 0x1001a98
 102555c:	lea    rcx,[r14+0x78]
 1025560:	call   QWORD PTR [rip+0xfffffffffffdc582]        # 0x1001ae8
 1025566:	mov    rdx,rax
 1025569:	lea    rcx,[rsp+0x2e8]
 1025571:	call   0x10309c0
 1025576:	nop
 1025577:	mov    rdx,rax
 102557a:	lea    rcx,[r14+0x78]
 102557e:	call   QWORD PTR [rip+0xfffffffffffdc51c]        # 0x1001aa0
 1025584:	nop
 1025585:	lea    rcx,[rsp+0x2e8]
 102558d:	call   QWORD PTR [rip+0xfffffffffffdc515]        # 0x1001aa8
 1025593:	mov    rcx,rsi
 1025596:	call   QWORD PTR [rip+0xfffffffffffdc54c]        # 0x1001ae8
 102559c:	mov    rdx,rax
 102559f:	lea    rcx,[r14+0x78]
 10255a3:	call   QWORD PTR [rip+0xfffffffffffdc4b7]        # 0x1001a60
 10255a9:	test   eax,eax
 10255ab:	jne    0x10255cf
 10255ad:	lea    rdx,[rip+0x3de9c]        # 0x1063450
 10255b4:	lea    rcx,[r14+0x78]
 10255b8:	call   QWORD PTR [rip+0xfffffffffffdc4d2]        # 0x1001a90
 10255be:	lea    rdx,[rip+0xfffffffffffdf16f]        # 0x1004734
 10255c5:	lea    rcx,[r14+0x78]
 10255c9:	call   QWORD PTR [rip+0xfffffffffffdc4c1]        # 0x1001a90
 10255cf:	cmp    DWORD PTR [r14+0xd4],0x2
 10255d7:	jne    0x10257b9
 10255dd:	lea    rdx,[r14+0x78]
 10255e1:	lea    rcx,[rsp+0x120]
 10255e9:	call   QWORD PTR [rip+0xfffffffffffdc3c9]        # 0x10019b8
 10255ef:	nop
 10255f0:	mov    r8d,r13d
 10255f3:	lea    rdx,[rsp+0x4a8]
 10255fb:	lea    rcx,[rsp+0x120]
 1025603:	call   QWORD PTR [rip+0xfffffffffffdc31f]        # 0x1001928
 1025609:	mov    QWORD PTR [rsp+0x5d0],rax
 1025611:	lea    rdx,[rip+0xfffffffffffdf11c]        # 0x1004734
 1025618:	mov    rcx,rax
 102561b:	call   QWORD PTR [rip+0xfffffffffffdc3df]        # 0x1001a00
 1025621:	test   eax,eax
 1025623:	sete   sil
 1025627:	mov    BYTE PTR [rsp+0x132],sil
 102562f:	lea    rcx,[rsp+0x4a8]
 1025637:	call   QWORD PTR [rip+0xfffffffffffdc46b]        # 0x1001aa8
 102563d:	test   sil,sil
 1025640:	je     0x102568b
 1025642:	lea    rcx,[rsp+0x120]
 102564a:	call   QWORD PTR [rip+0xfffffffffffdc4a0]        # 0x1001af0
 1025650:	lea    r8d,[rax-0x1]
 1025654:	lea    rdx,[rsp+0x390]
 102565c:	lea    rcx,[rsp+0x120]
 1025664:	call   QWORD PTR [rip+0xfffffffffffdc3de]        # 0x1001a48
 102566a:	nop
 102566b:	mov    rdx,rax
 102566e:	lea    rcx,[rsp+0x120]
 1025676:	call   QWORD PTR [rip+0xfffffffffffdc424]        # 0x1001aa0
 102567c:	nop
 102567d:	lea    rcx,[rsp+0x390]
 1025685:	call   QWORD PTR [rip+0xfffffffffffdc41d]        # 0x1001aa8
 102568b:	lea    rcx,[rsp+0x170]
 1025693:	call   QWORD PTR [rip+0xfffffffffffdc427]        # 0x1001ac0
 1025699:	nop
 102569a:	xor    r15b,r15b
 102569d:	mov    BYTE PTR [rsp+0x99],r15b
 10256a5:	xor    esi,esi
 10256a7:	mov    DWORD PTR [rsp+0x1d8],esi
 10256ae:	cmp    esi,0x2710
 10256b4:	jge    0x1025776
 10256ba:	mov    r9d,esi
 10256bd:	mov    r8,QWORD PTR [rsp+0x120]
 10256c5:	lea    rdx,[rip+0xfffffffffffe1144]        # 0x1006810
 10256cc:	lea    rcx,[rsp+0x170]
 10256d4:	call   QWORD PTR [rip+0xfffffffffffdc366]        # 0x1001a40
 10256da:	lea    rcx,[rsp+0x170]
 10256e2:	call   QWORD PTR [rip+0xfffffffffffdc400]        # 0x1001ae8
 10256e8:	mov    rcx,rax
 10256eb:	xor    edx,edx
 10256ed:	call   QWORD PTR [rip+0xfffffffffffdbadd]        # 0x10011d0
 10256f3:	test   eax,eax
 10256f5:	je     0x102576f
 10256f7:	lea    rcx,[rsp+0x170]
 10256ff:	call   QWORD PTR [rip+0xfffffffffffdc3e3]        # 0x1001ae8
 1025705:	mov    rcx,rax
 1025708:	call   QWORD PTR [rip+0xfffffffffffdbcea]        # 0x10013f8
 102570e:	test   eax,eax
 1025710:	je     0x102574b
 1025712:	lea    rcx,[rsp+0x170]
 102571a:	call   QWORD PTR [rip+0xfffffffffffdc3c8]        # 0x1001ae8
 1025720:	mov    rsi,rax
 1025723:	lea    rcx,[rsp+0x120]
 102572b:	call   QWORD PTR [rip+0xfffffffffffdc3b7]        # 0x1001ae8
 1025731:	mov    rcx,rax
 1025734:	mov    rdx,rsi
 1025737:	call   QWORD PTR [rip+0xfffffffffffdbcd3]        # 0x1001410
 102573d:	test   eax,eax
 102573f:	je     0x102574b
 1025741:	mov    BYTE PTR [rsp+0x99],0x1
 1025749:	jmp    0x102579c
 102574b:	mov    BYTE PTR [rsp+0x99],0x0
 1025753:	mov    rsi,QWORD PTR [r14]
 1025756:	call   QWORD PTR [rip+0xfffffffffffdbdf4]        # 0x1001550
 102575c:	mov    edx,eax
 102575e:	xor    r9d,r9d
 1025761:	mov    r8d,0xc000c412
 1025767:	mov    rcx,r14
 102576a:	call   QWORD PTR [rsi+0x20]
 102576d:	jmp    0x102577b
 102576f:	inc    esi
 1025771:	jmp    0x10256a7
 1025776:	test   r15b,r15b
 1025779:	jne    0x102579c
 102577b:	mov    rax,QWORD PTR [r14]
 102577e:	mov    BYTE PTR [rsp+0x28],0x1
 1025783:	mov    BYTE PTR [rsp+0x20],0x1
 1025788:	mov    r9d,0x2
 102578e:	xor    r8d,r8d
 1025791:	mov    edx,0xc000c412
 1025796:	mov    rcx,r14
 1025799:	call   QWORD PTR [rax]
 102579b:	nop
 102579c:	lea    rcx,[rsp+0x170]
 10257a4:	call   QWORD PTR [rip+0xfffffffffffdc2fe]        # 0x1001aa8
 10257aa:	nop
 10257ab:	lea    rcx,[rsp+0x120]
 10257b3:	call   QWORD PTR [rip+0xfffffffffffdc2ef]        # 0x1001aa8
 10257b9:	lea    rcx,[r14+0x80]
 10257c0:	call   QWORD PTR [rip+0xfffffffffffdc322]        # 0x1001ae8
 10257c6:	mov    rsi,rax
 10257c9:	lea    rcx,[r14+0x78]
 10257cd:	call   QWORD PTR [rip+0xfffffffffffdc315]        # 0x1001ae8
 10257d3:	mov    rcx,rax
 10257d6:	mov    rdx,rsi
 10257d9:	call   0x1030910
 10257de:	mov    esi,eax
 10257e0:	test   eax,eax
 10257e2:	je     0x102587f
 10257e8:	lea    rcx,[rsp+0x1d0]
 10257f0:	call   QWORD PTR [rip+0xfffffffffffdc2ca]        # 0x1001ac0
 10257f6:	nop
 10257f7:	mov    edx,0xc000c46c
 10257fc:	lea    rcx,[rsp+0x438]
 1025804:	call   0x10132d0
 1025809:	nop
 102580a:	mov    rcx,rax
 102580d:	call   QWORD PTR [rip+0xfffffffffffdc2d5]        # 0x1001ae8
 1025813:	mov    rdx,rax
 1025816:	mov    r8,QWORD PTR [r14+0x78]
 102581a:	lea    rcx,[rsp+0x1d0]
 1025822:	call   QWORD PTR [rip+0xfffffffffffdc218]        # 0x1001a40
 1025828:	nop
 1025829:	lea    rcx,[rsp+0x438]
 1025831:	call   QWORD PTR [rip+0xfffffffffffdc271]        # 0x1001aa8
 1025837:	lea    r11,[rsp+0x3a0]
 102583f:	mov    QWORD PTR [rsp+0x5b0],r11
 1025847:	lea    rdx,[rsp+0x1d0]
 102584f:	lea    rcx,[rsp+0x3a0]
 1025857:	call   QWORD PTR [rip+0xfffffffffffdc15b]        # 0x10019b8
 102585d:	nop
 102585e:	mov    r10,QWORD PTR [r14]
 1025861:	xor    r9d,r9d
 1025864:	mov    r8,rax
 1025867:	mov    edx,esi
 1025869:	mov    rcx,r14
 102586c:	call   QWORD PTR [r10+0x28]
 1025870:	nop
 1025871:	lea    rcx,[rsp+0x1d0]
 1025879:	call   QWORD PTR [rip+0xfffffffffffdc229]        # 0x1001aa8
 102587f:	lea    rcx,[r14+0x78]
 1025883:	call   QWORD PTR [rip+0xfffffffffffdc25f]        # 0x1001ae8
 1025889:	mov    rcx,rax
 102588c:	call   0x1030a70
 1025891:	test   al,al
 1025893:	jne    0x102590b
 1025895:	mov    rax,QWORD PTR [r14]
 1025898:	mov    BYTE PTR [rsp+0x28],0x1
 102589d:	mov    BYTE PTR [rsp+0x20],0x1
 10258a2:	mov    r9d,0x2
 10258a8:	xor    r8d,r8d
 10258ab:	mov    edx,0xc000c3f4
 10258b0:	mov    rcx,r14
 10258b3:	call   QWORD PTR [rax]
 10258b5:	nop
 10258b6:	test   rdi,rdi
 10258b9:	je     0x10258d0
 10258bb:	mov    rcx,rdi
 10258be:	call   QWORD PTR [rip+0xfffffffffffdbc14]        # 0x10014d8
 10258c4:	mov    QWORD PTR [rsp+0xa0],0x0
 10258d0:	test   rbx,rbx
 10258d3:	je     0x10258ea
 10258d5:	mov    rcx,rbx
 10258d8:	call   QWORD PTR [rip+0xfffffffffffdbbfa]        # 0x10014d8
 10258de:	mov    QWORD PTR [rsp+0xa8],0x0
 10258ea:	lea    rcx,[rsp+0x80]
 10258f2:	call   QWORD PTR [rip+0xfffffffffffdc1b0]        # 0x1001aa8
 10258f8:	nop
 10258f9:	lea    rcx,[rsp+0x78]
 10258fe:	call   QWORD PTR [rip+0xfffffffffffdc1a4]        # 0x1001aa8
 1025904:	xor    al,al
 1025906:	jmp    0x1028270
 102590b:	lea    r8,[rip+0xfffffffffffdc5f6]        # 0x1001f08
 1025912:	lea    rdx,[r14+0x78]
 1025916:	lea    rcx,[rsp+0x488]
 102591e:	call   0x100af10
 1025923:	mov    r15,rax
 1025926:	lea    rcx,[r14+0x80]
 102592d:	call   QWORD PTR [rip+0xfffffffffffdc1b5]        # 0x1001ae8
 1025933:	mov    rsi,rax
 1025936:	mov    rcx,r15
 1025939:	call   QWORD PTR [rip+0xfffffffffffdc1a9]        # 0x1001ae8
 102593f:	mov    rcx,rax
 1025942:	mov    rdx,rsi
 1025945:	call   0x1030910
 102594a:	mov    r15d,eax
 102594d:	mov    DWORD PTR [rsp+0x398],eax
 1025954:	lea    rcx,[rsp+0x488]
 102595c:	call   QWORD PTR [rip+0xfffffffffffdc146]        # 0x1001aa8
 1025962:	test   r15d,r15d
 1025965:	je     0x1025a2c
 102596b:	lea    rcx,[rsp+0x1f0]
 1025973:	call   QWORD PTR [rip+0xfffffffffffdc147]        # 0x1001ac0
 1025979:	nop
 102597a:	lea    r8,[rip+0xfffffffffffdc587]        # 0x1001f08
 1025981:	lea    rdx,[r14+0x78]
 1025985:	lea    rcx,[rsp+0x448]
 102598d:	call   0x100af10
 1025992:	mov    rsi,rax
 1025995:	mov    edx,0xc000c46c
 102599a:	lea    rcx,[rsp+0x3b0]
 10259a2:	call   0x10132d0
 10259a7:	nop
 10259a8:	mov    rcx,rax
 10259ab:	call   QWORD PTR [rip+0xfffffffffffdc137]        # 0x1001ae8
 10259b1:	mov    rdx,rax
 10259b4:	mov    r8,QWORD PTR [rsi]
 10259b7:	lea    rcx,[rsp+0x1f0]
 10259bf:	call   QWORD PTR [rip+0xfffffffffffdc07b]        # 0x1001a40
 10259c5:	nop
 10259c6:	lea    rcx,[rsp+0x3b0]
 10259ce:	call   QWORD PTR [rip+0xfffffffffffdc0d4]        # 0x1001aa8
 10259d4:	nop
 10259d5:	lea    rcx,[rsp+0x448]
 10259dd:	call   QWORD PTR [rip+0xfffffffffffdc0c5]        # 0x1001aa8
 10259e3:	lea    r11,[rsp+0x3c0]
 10259eb:	mov    QWORD PTR [rsp+0x528],r11
 10259f3:	lea    rdx,[rsp+0x1f0]
 10259fb:	lea    rcx,[rsp+0x3c0]
 1025a03:	call   QWORD PTR [rip+0xfffffffffffdbfaf]        # 0x10019b8
 1025a09:	nop
 1025a0a:	mov    r10,QWORD PTR [r14]
 1025a0d:	xor    r9d,r9d
 1025a10:	mov    r8,rax
 1025a13:	mov    edx,r15d
 1025a16:	mov    rcx,r14
 1025a19:	call   QWORD PTR [r10+0x28]
 1025a1d:	nop
 1025a1e:	lea    rcx,[rsp+0x1f0]
 1025a26:	call   QWORD PTR [rip+0xfffffffffffdc07c]        # 0x1001aa8
 1025a2c:	lea    r8,[rip+0xfffffffffffdc4d5]        # 0x1001f08
 1025a33:	lea    rdx,[r14+0x78]
 1025a37:	lea    rcx,[rsp+0x4c8]
 1025a3f:	call   0x100af10
 1025a44:	nop
 1025a45:	mov    rcx,rax
 1025a48:	call   QWORD PTR [rip+0xfffffffffffdc09a]        # 0x1001ae8
 1025a4e:	mov    rcx,rax
 1025a51:	call   0x1030a70
 1025a56:	test   al,al
 1025a58:	sete   sil
 1025a5c:	mov    BYTE PTR [rsp+0x138],sil
 1025a64:	lea    rcx,[rsp+0x4c8]
 1025a6c:	call   QWORD PTR [rip+0xfffffffffffdc036]        # 0x1001aa8
 1025a72:	mov    rcx,r14
 1025a75:	test   sil,sil
 1025a78:	je     0x1025aed
 1025a7a:	mov    rax,QWORD PTR [r14]
 1025a7d:	mov    BYTE PTR [rsp+0x28],0x1
 1025a82:	mov    BYTE PTR [rsp+0x20],0x1
 1025a87:	mov    r9d,0x2
 1025a8d:	xor    r8d,r8d
 1025a90:	mov    edx,0xc000c3f4
 1025a95:	call   QWORD PTR [rax]
 1025a97:	nop
 1025a98:	test   rdi,rdi
 1025a9b:	je     0x1025ab2
 1025a9d:	mov    rcx,rdi
 1025aa0:	call   QWORD PTR [rip+0xfffffffffffdba32]        # 0x10014d8
 1025aa6:	mov    QWORD PTR [rsp+0xa0],0x0
 1025ab2:	test   rbx,rbx
 1025ab5:	je     0x1025acc
 1025ab7:	mov    rcx,rbx
 1025aba:	call   QWORD PTR [rip+0xfffffffffffdba18]        # 0x10014d8
 1025ac0:	mov    QWORD PTR [rsp+0xa8],0x0
 1025acc:	lea    rcx,[rsp+0x80]
 1025ad4:	call   QWORD PTR [rip+0xfffffffffffdbfce]        # 0x1001aa8
 1025ada:	nop
 1025adb:	lea    rcx,[rsp+0x78]
 1025ae0:	call   QWORD PTR [rip+0xfffffffffffdbfc2]        # 0x1001aa8
 1025ae6:	xor    al,al
 1025ae8:	jmp    0x1028270
 1025aed:	cmp    DWORD PTR [r14+0xd8],0x2
 1025af5:	sete   dl
 1025af8:	call   0x102b630
 1025afd:	test   al,al
 1025aff:	jne    0x1025b74
 1025b01:	mov    rax,QWORD PTR [r14]
 1025b04:	mov    BYTE PTR [rsp+0x28],0x1
 1025b09:	mov    BYTE PTR [rsp+0x20],0x1
 1025b0e:	xor    r9d,r9d
 1025b11:	xor    r8d,r8d
 1025b14:	mov    edx,0xc000c3a9
 1025b19:	mov    rcx,r14
 1025b1c:	call   QWORD PTR [rax]
 1025b1e:	nop
 1025b1f:	test   rdi,rdi
 1025b22:	je     0x1025b39
 1025b24:	mov    rcx,rdi
 1025b27:	call   QWORD PTR [rip+0xfffffffffffdb9ab]        # 0x10014d8
 1025b2d:	mov    QWORD PTR [rsp+0xa0],0x0
 1025b39:	test   rbx,rbx
 1025b3c:	je     0x1025b53
 1025b3e:	mov    rcx,rbx
 1025b41:	call   QWORD PTR [rip+0xfffffffffffdb991]        # 0x10014d8
 1025b47:	mov    QWORD PTR [rsp+0xa8],0x0
 1025b53:	lea    rcx,[rsp+0x80]
 1025b5b:	call   QWORD PTR [rip+0xfffffffffffdbf47]        # 0x1001aa8
 1025b61:	nop
 1025b62:	lea    rcx,[rsp+0x78]
 1025b67:	call   QWORD PTR [rip+0xfffffffffffdbf3b]        # 0x1001aa8
 1025b6d:	xor    al,al
 1025b6f:	jmp    0x1028270
 1025b74:	lea    rcx,[r14+0x98]
 1025b7b:	call   QWORD PTR [rip+0xfffffffffffdbf67]        # 0x1001ae8
 1025b81:	mov    rcx,rax
 1025b84:	call   0x1030aa0
 1025b89:	test   al,al
 1025b8b:	jne    0x1025c58
 1025b91:	mov    edx,0xc000c397
 1025b96:	lea    rcx,[rsp+0x1f8]
 1025b9e:	call   0x10132d0
 1025ba3:	nop
 1025ba4:	mov    rcx,rax
 1025ba7:	call   QWORD PTR [rip+0xfffffffffffdbf3b]        # 0x1001ae8
 1025bad:	mov    rdx,rax
 1025bb0:	mov    r8,QWORD PTR [r14+0x98]
 1025bb7:	lea    rcx,[rsp+0x78]
 1025bbc:	call   QWORD PTR [rip+0xfffffffffffdbe7e]        # 0x1001a40
 1025bc2:	nop
 1025bc3:	lea    rcx,[rsp+0x1f8]
 1025bcb:	call   QWORD PTR [rip+0xfffffffffffdbed7]        # 0x1001aa8
 1025bd1:	mov    rsi,QWORD PTR [r14]
 1025bd4:	lea    rcx,[rsp+0x78]
 1025bd9:	call   QWORD PTR [rip+0xfffffffffffdbf09]        # 0x1001ae8
 1025bdf:	mov    r8,rax
 1025be2:	mov    BYTE PTR [rsp+0x30],0x1
 1025be7:	mov    BYTE PTR [rsp+0x28],0x1
 1025bec:	mov    DWORD PTR [rsp+0x20],0x2
 1025bf4:	xor    r9d,r9d
 1025bf7:	mov    edx,0xc000c397
 1025bfc:	mov    rcx,r14
 1025bff:	call   QWORD PTR [rsi+0x8]
 1025c02:	nop
 1025c03:	test   rdi,rdi
 1025c06:	je     0x1025c1d
 1025c08:	mov    rcx,rdi
 1025c0b:	call   QWORD PTR [rip+0xfffffffffffdb8c7]        # 0x10014d8
 1025c11:	mov    QWORD PTR [rsp+0xa0],0x0
 1025c1d:	test   rbx,rbx
 1025c20:	je     0x1025c37
 1025c22:	mov    rcx,rbx
 1025c25:	call   QWORD PTR [rip+0xfffffffffffdb8ad]        # 0x10014d8
 1025c2b:	mov    QWORD PTR [rsp+0xa8],0x0
 1025c37:	lea    rcx,[rsp+0x80]
 1025c3f:	call   QWORD PTR [rip+0xfffffffffffdbe63]        # 0x1001aa8
 1025c45:	nop
 1025c46:	lea    rcx,[rsp+0x78]
 1025c4b:	call   QWORD PTR [rip+0xfffffffffffdbe57]        # 0x1001aa8
 1025c51:	xor    al,al
 1025c53:	jmp    0x1028270
 1025c58:	lea    r8,[rip+0xfffffffffffdc2a9]        # 0x1001f08
 1025c5f:	lea    rdx,[r14+0x78]
 1025c63:	lea    rcx,[rsp+0x498]
 1025c6b:	call   0x100af10
 1025c70:	nop
 1025c71:	lea    r8,[rip+0xfffffffffffdc2dc]        # 0x1001f54
 1025c78:	mov    rdx,rax
 1025c7b:	lea    rcx,[rsp+0x3e0]
 1025c83:	call   0x100af10
 1025c88:	nop
 1025c89:	lea    r8,[rip+0x3d7c0]        # 0x1063450
 1025c90:	mov    rdx,rax
 1025c93:	lea    rcx,[rsp+0x458]
 1025c9b:	call   0x100af10
 1025ca0:	nop
 1025ca1:	lea    r8,[rip+0xfffffffffffe0b78]        # 0x1006820
 1025ca8:	mov    rdx,rax
 1025cab:	lea    rcx,[rsp+0xc8]
 1025cb3:	call   0x100af10
 1025cb8:	nop
 1025cb9:	lea    rcx,[rsp+0x458]
 1025cc1:	call   QWORD PTR [rip+0xfffffffffffdbde1]        # 0x1001aa8
 1025cc7:	nop
 1025cc8:	lea    rcx,[rsp+0x3e0]
 1025cd0:	call   QWORD PTR [rip+0xfffffffffffdbdd2]        # 0x1001aa8
 1025cd6:	nop
 1025cd7:	lea    rcx,[rsp+0x498]
 1025cdf:	call   QWORD PTR [rip+0xfffffffffffdbdc3]        # 0x1001aa8
 1025ce5:	mov    rsi,QWORD PTR [r14]
 1025ce8:	lea    rcx,[rsp+0xc8]
 1025cf0:	call   QWORD PTR [rip+0xfffffffffffdbdf2]        # 0x1001ae8
 1025cf6:	mov    rdx,rax
 1025cf9:	mov    r8d,0x2
 1025cff:	mov    rcx,r14
 1025d02:	call   QWORD PTR [rsi+0x60]
 1025d05:	test   al,al
 1025d07:	jne    0x1025d6d
 1025d09:	lea    rcx,[rsp+0xc8]
 1025d11:	call   QWORD PTR [rip+0xfffffffffffdbd91]        # 0x1001aa8
 1025d17:	nop
 1025d18:	test   rdi,rdi
 1025d1b:	je     0x1025d32
 1025d1d:	mov    rcx,rdi
 1025d20:	call   QWORD PTR [rip+0xfffffffffffdb7b2]        # 0x10014d8
 1025d26:	mov    QWORD PTR [rsp+0xa0],0x0
 1025d32:	test   rbx,rbx
 1025d35:	je     0x1025d4c
 1025d37:	mov    rcx,rbx
 1025d3a:	call   QWORD PTR [rip+0xfffffffffffdb798]        # 0x10014d8
 1025d40:	mov    QWORD PTR [rsp+0xa8],0x0
 1025d4c:	lea    rcx,[rsp+0x80]
 1025d54:	call   QWORD PTR [rip+0xfffffffffffdbd4e]        # 0x1001aa8
 1025d5a:	nop
 1025d5b:	lea    rcx,[rsp+0x78]
 1025d60:	call   QWORD PTR [rip+0xfffffffffffdbd42]        # 0x1001aa8
 1025d66:	xor    al,al
 1025d68:	jmp    0x1028270
 1025d6d:	mov    rax,QWORD PTR [r14]
 1025d70:	mov    rcx,r14
 1025d73:	call   QWORD PTR [rax+0x68]
 1025d76:	test   al,al
 1025d78:	jne    0x1025dde
 1025d7a:	lea    rcx,[rsp+0xc8]
 1025d82:	call   QWORD PTR [rip+0xfffffffffffdbd20]        # 0x1001aa8
 1025d88:	nop
 1025d89:	test   rdi,rdi
 1025d8c:	je     0x1025da3
 1025d8e:	mov    rcx,rdi
 1025d91:	call   QWORD PTR [rip+0xfffffffffffdb741]        # 0x10014d8
 1025d97:	mov    QWORD PTR [rsp+0xa0],0x0
 1025da3:	test   rbx,rbx
 1025da6:	je     0x1025dbd
 1025da8:	mov    rcx,rbx
 1025dab:	call   QWORD PTR [rip+0xfffffffffffdb727]        # 0x10014d8
 1025db1:	mov    QWORD PTR [rsp+0xa8],0x0
 1025dbd:	lea    rcx,[rsp+0x80]
 1025dc5:	call   QWORD PTR [rip+0xfffffffffffdbcdd]        # 0x1001aa8
 1025dcb:	nop
 1025dcc:	lea    rcx,[rsp+0x78]
 1025dd1:	call   QWORD PTR [rip+0xfffffffffffdbcd1]        # 0x1001aa8
 1025dd7:	xor    al,al
 1025dd9:	jmp    0x1028270
 1025dde:	lea    rcx,[rsp+0xc0]
 1025de6:	call   QWORD PTR [rip+0xfffffffffffdbcd4]        # 0x1001ac0
 1025dec:	nop
 1025ded:	lea    rcx,[rsp+0x90]
 1025df5:	call   QWORD PTR [rip+0xfffffffffffdbcc5]        # 0x1001ac0
 1025dfb:	nop
 1025dfc:	mov    edx,0x4000c3fd
 1025e01:	lea    rcx,[rsp+0x3f0]
 1025e09:	call   0x10132d0
 1025e0e:	nop
 1025e0f:	mov    rdx,rax
 1025e12:	lea    rcx,[rsp+0xc0]
 1025e1a:	call   QWORD PTR [rip+0xfffffffffffdbc80]        # 0x1001aa0
 1025e20:	nop
 1025e21:	lea    rcx,[rsp+0x3f0]
 1025e29:	call   QWORD PTR [rip+0xfffffffffffdbc79]        # 0x1001aa8
 1025e2f:	cmp    DWORD PTR [r14+0xd8],0x2
 1025e37:	jne    0x1025ec5
 1025e3d:	xor    r15d,r15d
 1025e40:	mov    DWORD PTR [rsp+0x198],r15d
 1025e48:	mov    r12,QWORD PTR [rsp+0x1a0]
 1025e50:	cmp    r15d,DWORD PTR [rsp+0x134]
 1025e58:	jge    0x1025f51
 1025e5e:	movsxd rsi,r15d
 1025e61:	lea    rcx,[rsp+0xc0]
 1025e69:	call   QWORD PTR [rip+0xfffffffffffdbc79]        # 0x1001ae8
 1025e6f:	mov    rdx,rax
 1025e72:	mov    r8,QWORD PTR [r12+rsi*8]
 1025e76:	lea    rcx,[rsp+0x90]
 1025e7e:	call   QWORD PTR [rip+0xfffffffffffdbbbc]        # 0x1001a40
 1025e84:	mov    rsi,QWORD PTR [r14]
 1025e87:	lea    rcx,[rsp+0x90]
 1025e8f:	call   QWORD PTR [rip+0xfffffffffffdbc53]        # 0x1001ae8
 1025e95:	mov    r8,rax
 1025e98:	mov    BYTE PTR [rsp+0x30],0x1
 1025e9d:	mov    BYTE PTR [rsp+0x28],0x1
 1025ea2:	mov    DWORD PTR [rsp+0x20],0x0
 1025eaa:	mov    r9b,0x1
 1025ead:	mov    edx,0x4000c484
 1025eb2:	mov    rcx,r14
 1025eb5:	call   QWORD PTR [rsi+0x8]
 1025eb8:	inc    r15d
 1025ebb:	mov    DWORD PTR [rsp+0x198],r15d
 1025ec3:	jmp    0x1025e50
 1025ec5:	xor    r12d,r12d
 1025ec8:	mov    r15d,r12d
 1025ecb:	mov    DWORD PTR [rsp+0x1bc],r12d
 1025ed3:	cmp    r15d,DWORD PTR [rsp+0x88]
 1025edb:	jge    0x1025f49
 1025edd:	movsxd rsi,r15d
 1025ee0:	lea    rcx,[rsp+0xc0]
 1025ee8:	call   QWORD PTR [rip+0xfffffffffffdbbfa]        # 0x1001ae8
 1025eee:	mov    rdx,rax
 1025ef1:	mov    rax,QWORD PTR [rsp+0x108]
 1025ef9:	mov    r8,QWORD PTR [rax+rsi*8]
 1025efd:	lea    rcx,[rsp+0x90]
 1025f05:	call   QWORD PTR [rip+0xfffffffffffdbb35]        # 0x1001a40
 1025f0b:	mov    rsi,QWORD PTR [r14]
 1025f0e:	lea    rcx,[rsp+0x90]
 1025f16:	call   QWORD PTR [rip+0xfffffffffffdbbcc]        # 0x1001ae8
 1025f1c:	mov    r8,rax
 1025f1f:	mov    BYTE PTR [rsp+0x30],0x1
 1025f24:	mov    BYTE PTR [rsp+0x28],0x1
 1025f29:	mov    DWORD PTR [rsp+0x20],r12d
 1025f2e:	mov    r9b,0x1
 1025f31:	mov    edx,0x4000c484
 1025f36:	mov    rcx,r14
 1025f39:	call   QWORD PTR [rsi+0x8]
 1025f3c:	inc    r15d
 1025f3f:	mov    DWORD PTR [rsp+0x1bc],r15d
 1025f47:	jmp    0x1025ed3
 1025f49:	mov    r12,QWORD PTR [rsp+0x1a0]
 1025f51:	test   r12,r12
 1025f54:	je     0x1025f5f
 1025f56:	mov    rcx,r12
 1025f59:	call   QWORD PTR [rip+0xfffffffffffdb341]        # 0x10012a0
 1025f5f:	mov    rcx,r14
 1025f62:	call   0x1030680
 1025f67:	test   al,al
 1025f69:	jne    0x1026012
 1025f6f:	mov    rax,QWORD PTR [r14]
 1025f72:	mov    BYTE PTR [rsp+0x28],0x1
 1025f77:	mov    BYTE PTR [rsp+0x20],0x1
 1025f7c:	mov    r9d,0x2
 1025f82:	xor    r8d,r8d
 1025f85:	mov    edx,0xc000c47b
 1025f8a:	mov    rcx,r14
 1025f8d:	call   QWORD PTR [rax]
 1025f8f:	nop
 1025f90:	lea    rcx,[rsp+0x90]
 1025f98:	call   QWORD PTR [rip+0xfffffffffffdbb0a]        # 0x1001aa8
 1025f9e:	nop
 1025f9f:	lea    rcx,[rsp+0xc0]
 1025fa7:	call   QWORD PTR [rip+0xfffffffffffdbafb]        # 0x1001aa8
 1025fad:	nop
 1025fae:	lea    rcx,[rsp+0xc8]
 1025fb6:	call   QWORD PTR [rip+0xfffffffffffdbaec]        # 0x1001aa8
 1025fbc:	nop
 1025fbd:	test   rdi,rdi
 1025fc0:	je     0x1025fd7
 1025fc2:	mov    rcx,rdi
 1025fc5:	call   QWORD PTR [rip+0xfffffffffffdb50d]        # 0x10014d8
 1025fcb:	mov    QWORD PTR [rsp+0xa0],0x0
 1025fd7:	test   rbx,rbx
 1025fda:	je     0x1025ff1
 1025fdc:	mov    rcx,rbx
 1025fdf:	call   QWORD PTR [rip+0xfffffffffffdb4f3]        # 0x10014d8
 1025fe5:	mov    QWORD PTR [rsp+0xa8],0x0
 1025ff1:	lea    rcx,[rsp+0x80]
 1025ff9:	call   QWORD PTR [rip+0xfffffffffffdbaa9]        # 0x1001aa8
 1025fff:	nop
 1026000:	lea    rcx,[rsp+0x78]
 1026005:	call   QWORD PTR [rip+0xfffffffffffdba9d]        # 0x1001aa8
 102600b:	xor    al,al
 102600d:	jmp    0x1028270
 1026012:	test   rbx,rbx
 1026015:	je     0x10260da
 102601b:	mov    edx,0x4000c3aa
 1026020:	lea    rcx,[rsp+0x468]
 1026028:	call   0x10132d0
 102602d:	nop
 102602e:	mov    rcx,rax
 1026031:	call   QWORD PTR [rip+0xfffffffffffdbab1]        # 0x1001ae8
 1026037:	mov    rdx,rax
 102603a:	mov    r8,QWORD PTR [r14+0x68]
 102603e:	lea    rcx,[rsp+0x90]
 1026046:	call   QWORD PTR [rip+0xfffffffffffdb9f4]        # 0x1001a40
 102604c:	nop
 102604d:	lea    rcx,[rsp+0x468]
 1026055:	call   QWORD PTR [rip+0xfffffffffffdba4d]        # 0x1001aa8
 102605b:	mov    rsi,QWORD PTR [r14]
 102605e:	lea    rcx,[rsp+0x90]
 1026066:	call   QWORD PTR [rip+0xfffffffffffdba7c]        # 0x1001ae8
 102606c:	mov    r8,rax
 102606f:	mov    BYTE PTR [rsp+0x30],0x1
 1026074:	mov    BYTE PTR [rsp+0x28],0x1
 1026079:	xor    r12d,r12d
 102607c:	mov    DWORD PTR [rsp+0x20],r12d
 1026081:	xor    r9d,r9d
 1026084:	mov    edx,0x4000c3aa
 1026089:	mov    rcx,r14
 102608c:	call   QWORD PTR [rsi+0x8]
 102608f:	mov    BYTE PTR [rip+0x3d9a6],0x1        # 0x1063a3c
 1026096:	mov    QWORD PTR [rsp+0x5e0],rbx
 102609e:	mov    r8d,r13d
 10260a1:	or     edx,0xffffffff
 10260a4:	mov    rcx,rbx
 10260a7:	call   QWORD PTR [rip+0xfffffffffffdb2e3]        # 0x1001390
 10260ad:	cmp    eax,0xc0
 10260b2:	jne    0x10260d1
 10260b4:	mov    rax,QWORD PTR [r14]
 10260b7:	mov    BYTE PTR [rsp+0x28],0x1
 10260bc:	mov    BYTE PTR [rsp+0x20],0x1
 10260c1:	xor    r9d,r9d
 10260c4:	xor    r8d,r8d
 10260c7:	mov    edx,0x8000c3ab
 10260cc:	mov    rcx,r14
 10260cf:	call   QWORD PTR [rax]
 10260d1:	mov    BYTE PTR [rip+0x3d964],r12b        # 0x1063a3c
 10260d8:	jmp    0x10260dd
 10260da:	xor    r12d,r12d
 10260dd:	lea    rcx,[r14+0x70]
 10260e1:	call   QWORD PTR [rip+0xfffffffffffdba09]        # 0x1001af0
 10260e7:	test   eax,eax
 10260e9:	je     0x10261ad
 10260ef:	lea    rcx,[r14+0x70]
 10260f3:	call   QWORD PTR [rip+0xfffffffffffdb9ef]        # 0x1001ae8
 10260f9:	mov    rcx,rax
 10260fc:	mov    r8,r14
 10260ff:	lea    rdx,[rip+0x6b5a]        # 0x102cc60
 1026106:	call   0x102c0d0
 102610b:	mov    rsi,rax
 102610e:	mov    QWORD PTR [rsp+0x538],rax
 1026116:	test   rdi,rdi
 1026119:	je     0x102612c
 102611b:	mov    rcx,rdi
 102611e:	call   QWORD PTR [rip+0xfffffffffffdb3b4]        # 0x10014d8
 1026124:	mov    QWORD PTR [rsp+0xa0],r12
 102612c:	mov    rdi,rsi
 102612f:	mov    QWORD PTR [rsp+0xa0],rsi
 1026137:	test   rsi,rsi
 102613a:	jne    0x102617c
 102613c:	mov    edx,0xc000c455
 1026141:	lea    rcx,[rsp+0x400]
 1026149:	call   0x10132d0
 102614e:	nop
 102614f:	mov    rcx,rax
 1026152:	call   QWORD PTR [rip+0xfffffffffffdb990]        # 0x1001ae8
 1026158:	mov    rdx,rax
 102615b:	mov    r8,QWORD PTR [r14+0x70]
 102615f:	lea    rcx,[rsp+0x90]
 1026167:	call   QWORD PTR [rip+0xfffffffffffdb8d3]        # 0x1001a40
 102616d:	nop
 102616e:	lea    rcx,[rsp+0x400]
 1026176:	call   QWORD PTR [rip+0xfffffffffffdb92c]        # 0x1001aa8
 102617c:	mov    rsi,QWORD PTR [r14]
 102617f:	lea    rcx,[rsp+0x90]
 1026187:	call   QWORD PTR [rip+0xfffffffffffdb95b]        # 0x1001ae8
 102618d:	mov    r8,rax
 1026190:	mov    BYTE PTR [rsp+0x30],0x1
 1026195:	mov    BYTE PTR [rsp+0x28],0x1
 102619a:	mov    DWORD PTR [rsp+0x20],r12d
 102619f:	xor    r9d,r9d
 10261a2:	mov    edx,0xc000c455
 10261a7:	mov    rcx,r14
 10261aa:	call   QWORD PTR [rsi+0x8]
 10261ad:	mov    rcx,r14
 10261b0:	call   0x102b490
 10261b5:	lea    r15,[r14+0x98]
 10261bc:	mov    rcx,r15
 10261bf:	call   QWORD PTR [rip+0xfffffffffffdb79b]        # 0x1001960
 10261c5:	xor    r8d,r8d
 10261c8:	lea    rdx,[rip+0xfffffffffffe05e1]        # 0x10067b0
 10261cf:	mov    rcx,r15
 10261d2:	call   QWORD PTR [rip+0xfffffffffffdb880]        # 0x1001a58
 10261d8:	cmp    eax,0xffffffff
 10261db:	je     0x102622d
 10261dd:	mov    ecx,0x18
 10261e2:	call   0x103f9d2
 10261e7:	mov    rsi,rax
 10261ea:	mov    QWORD PTR [rsp+0x5c0],rax
 10261f2:	test   rax,rax
 10261f5:	je     0x102621b
 10261f7:	mov    rcx,r15
 10261fa:	call   QWORD PTR [rip+0xfffffffffffdb8e8]        # 0x1001ae8
 1026200:	mov    r8,rax
 1026203:	mov    rdx,r14
 1026206:	mov    rcx,rsi
 1026209:	call   0x10101b0
 102620e:	mov    r12,rax
 1026211:	mov    QWORD PTR [rsp+0x4b8],rax
 1026219:	jmp    0x1026223
 102621b:	mov    QWORD PTR [rsp+0x4b8],r12
 1026223:	mov    QWORD PTR [rsp+0xf0],r12
 102622b:	jmp    0x1026297
 102622d:	xor    r8d,r8d
 1026230:	lea    rdx,[rip+0xfffffffffffdfed9]        # 0x1006110
 1026237:	mov    rcx,r15
 102623a:	call   QWORD PTR [rip+0xfffffffffffdb818]        # 0x1001a58
 1026240:	cmp    eax,0xffffffff
 1026243:	je     0x10281bc
 1026249:	mov    ecx,0x20
 102624e:	call   0x103f9d2
 1026253:	mov    rsi,rax
 1026256:	mov    QWORD PTR [rsp+0x548],rax
 102625e:	test   rax,rax
 1026261:	je     0x1026287
 1026263:	mov    rcx,r15
 1026266:	call   QWORD PTR [rip+0xfffffffffffdb87c]        # 0x1001ae8
 102626c:	mov    r8,rax
 102626f:	mov    rdx,r14
 1026272:	mov    rcx,rsi
 1026275:	call   0x1036c50
 102627a:	mov    r12,rax
 102627d:	mov    QWORD PTR [rsp+0x410],rax
 1026285:	jmp    0x102628f
 1026287:	mov    QWORD PTR [rsp+0x410],r12
 102628f:	mov    QWORD PTR [rsp+0xf0],r12
 1026297:	mov    QWORD PTR [rsp+0x280],r12
 102629f:	test   r12,r12
 10262a2:	jne    0x1026346
 10262a8:	mov    rax,QWORD PTR [r14]
 10262ab:	mov    BYTE PTR [rsp+0x28],0x1
 10262b0:	mov    BYTE PTR [rsp+0x20],0x1
 10262b5:	lea    r9d,[r12+0x2]
 10262ba:	xor    r8d,r8d
 10262bd:	mov    edx,0xc000c3ad
 10262c2:	mov    rcx,r14
 10262c5:	call   QWORD PTR [rax]
 10262c7:	nop
 10262c8:	lea    rcx,[rsp+0x90]
 10262d0:	call   QWORD PTR [rip+0xfffffffffffdb7d2]        # 0x1001aa8
 10262d6:	nop
 10262d7:	lea    rcx,[rsp+0xc0]
 10262df:	call   QWORD PTR [rip+0xfffffffffffdb7c3]        # 0x1001aa8
 10262e5:	nop
 10262e6:	lea    rcx,[rsp+0xc8]
 10262ee:	call   QWORD PTR [rip+0xfffffffffffdb7b4]        # 0x1001aa8
 10262f4:	nop
 10262f5:	test   rdi,rdi
 10262f8:	je     0x102630b
 10262fa:	mov    rcx,rdi
 10262fd:	call   QWORD PTR [rip+0xfffffffffffdb1d5]        # 0x10014d8
 1026303:	mov    QWORD PTR [rsp+0xa0],r12
 102630b:	test   rbx,rbx
 102630e:	je     0x1026325
 1026310:	mov    rcx,rbx
 1026313:	call   QWORD PTR [rip+0xfffffffffffdb1bf]        # 0x10014d8
 1026319:	mov    QWORD PTR [rsp+0xa8],0x0
 1026325:	lea    rcx,[rsp+0x80]
 102632d:	call   QWORD PTR [rip+0xfffffffffffdb775]        # 0x1001aa8
 1026333:	nop
 1026334:	lea    rcx,[rsp+0x78]
 1026339:	call   QWORD PTR [rip+0xfffffffffffdb769]        # 0x1001aa8
 102633f:	xor    al,al
 1026341:	jmp    0x1028270
 1026346:	lea    rcx,[rsp+0xd8]
 102634e:	call   QWORD PTR [rip+0xfffffffffffdb76c]        # 0x1001ac0
 1026354:	nop
 1026355:	mov    edx,0x5c
 102635a:	mov    rcx,r15
 102635d:	call   QWORD PTR [rip+0xfffffffffffdb6ed]        # 0x1001a50
 1026363:	mov    DWORD PTR [rsp+0x4b0],eax
 102636a:	cmp    eax,0xffffffff
 102636d:	je     0x10263a7
 102636f:	lea    r8d,[rax+0x1]
 1026373:	lea    rdx,[rsp+0x478]
 102637b:	mov    rcx,r15
 102637e:	call   QWORD PTR [rip+0xfffffffffffdb59c]        # 0x1001920
 1026384:	nop
 1026385:	mov    rdx,rax
 1026388:	lea    rcx,[rsp+0xd8]
 1026390:	call   QWORD PTR [rip+0xfffffffffffdb70a]        # 0x1001aa0
 1026396:	nop
 1026397:	lea    rcx,[rsp+0x478]
 102639f:	call   QWORD PTR [rip+0xfffffffffffdb703]        # 0x1001aa8
 10263a5:	jmp    0x10263b8
 10263a7:	mov    rdx,r15
 10263aa:	lea    rcx,[rsp+0xd8]
 10263b2:	call   QWORD PTR [rip+0xfffffffffffdb6e8]        # 0x1001aa0
 10263b8:	lea    rdx,[r14+0x78]
 10263bc:	lea    r8,[rip+0xfffffffffffdbb45]        # 0x1001f08
 10263c3:	lea    rcx,[rsp+0x378]
 10263cb:	call   0x100af10
 10263d0:	nop
 10263d1:	lea    r8,[rip+0xfffffffffffdbb7c]        # 0x1001f54
 10263d8:	mov    rdx,rax
 10263db:	lea    rcx,[rsp+0x368]
 10263e3:	call   0x100af10
 10263e8:	nop
 10263e9:	lea    r8,[rsp+0xd8]
 10263f1:	mov    rdx,rax
 10263f4:	lea    rcx,[rsp+0x360]
 10263fc:	call   0x1013cc0
 1026401:	nop
 1026402:	mov    rdx,rax
 1026405:	lea    rcx,[rsp+0xd8]
 102640d:	call   QWORD PTR [rip+0xfffffffffffdb68d]        # 0x1001aa0
 1026413:	nop
 1026414:	lea    rcx,[rsp+0x360]
 102641c:	call   QWORD PTR [rip+0xfffffffffffdb686]        # 0x1001aa8
 1026422:	nop
 1026423:	lea    rcx,[rsp+0x368]
 102642b:	call   QWORD PTR [rip+0xfffffffffffdb677]        # 0x1001aa8
 1026431:	nop
 1026432:	lea    rcx,[rsp+0x378]
 102643a:	call   QWORD PTR [rip+0xfffffffffffdb668]        # 0x1001aa8
 1026440:	lea    rcx,[rsp+0xd8]
 1026448:	call   QWORD PTR [rip+0xfffffffffffdb69a]        # 0x1001ae8
 102644e:	mov    rsi,rax
 1026451:	mov    rcx,r15
 1026454:	call   QWORD PTR [rip+0xfffffffffffdb68e]        # 0x1001ae8
 102645a:	mov    rcx,rax
 102645d:	xor    r8d,r8d
 1026460:	mov    rdx,rsi
 1026463:	call   QWORD PTR [rip+0xfffffffffffdaf9f]        # 0x1001408
 1026469:	lea    rcx,[rsp+0xe0]
 1026471:	call   QWORD PTR [rip+0xfffffffffffdb649]        # 0x1001ac0
 1026477:	nop
 1026478:	lea    r8,[rsp+0xe0]
 1026480:	lea    rdx,[rip+0xfffffffffffe03a9]        # 0x1006830
 1026487:	lea    rcx,[r14+0xe8]
 102648e:	call   0x1023ce0
 1026493:	test   eax,eax
 1026495:	je     0x10264b5
 1026497:	lea    rcx,[rsp+0xe0]
 102649f:	call   QWORD PTR [rip+0xfffffffffffdb643]        # 0x1001ae8
 10264a5:	mov    rcx,rax
 10264a8:	call   QWORD PTR [rip+0xfffffffffffdb292]        # 0x1001740
 10264ae:	mov    DWORD PTR [r14+0xe0],eax
 10264b5:	lea    r8,[rsp+0xe0]
 10264bd:	lea    rdx,[rip+0xfffffffffffe0394]        # 0x1006858
 10264c4:	lea    rcx,[r14+0xe8]
 10264cb:	call   0x1023ce0
 10264d0:	test   eax,eax
 10264d2:	je     0x10264f2
 10264d4:	lea    rcx,[rsp+0xe0]
 10264dc:	call   QWORD PTR [rip+0xfffffffffffdb606]        # 0x1001ae8
 10264e2:	mov    rcx,rax
 10264e5:	call   QWORD PTR [rip+0xfffffffffffdb255]        # 0x1001740
 10264eb:	mov    DWORD PTR [r14+0xe4],eax
 10264f2:	lea    rax,[rip+0xfffffffffffdb927]        # 0x1001e20
 10264f9:	mov    QWORD PTR [rsp+0x238],rax
 1026501:	xor    r15d,r15d
 1026504:	mov    QWORD PTR [rsp+0x250],r15
 102650c:	mov    QWORD PTR [rsp+0x258],r15
 1026514:	mov    QWORD PTR [rsp+0x248],r15
 102651c:	mov    QWORD PTR [rsp+0x240],r15
 1026524:	mov    QWORD PTR [rsp+0x260],r15
 102652c:	mov    QWORD PTR [rsp+0x268],0xa
 1026538:	mov    QWORD PTR [rsp+0x2b0],rax
 1026540:	mov    QWORD PTR [rsp+0x2c8],r15
 1026548:	mov    QWORD PTR [rsp+0x2d0],r15
 1026550:	mov    QWORD PTR [rsp+0x2c0],r15
 1026558:	mov    QWORD PTR [rsp+0x2b8],r15
 1026560:	mov    QWORD PTR [rsp+0x2d8],r15
 1026568:	mov    QWORD PTR [rsp+0x2e0],0xa
 1026574:	lea    rcx,[rsp+0xe8]
 102657c:	call   QWORD PTR [rip+0xfffffffffffdb53e]        # 0x1001ac0
 1026582:	nop
 1026583:	lea    rcx,[rsp+0xb0]
 102658b:	call   QWORD PTR [rip+0xfffffffffffdb52f]        # 0x1001ac0
 1026591:	nop
 1026592:	mov    rax,QWORD PTR [r12]
 1026596:	lea    rdx,[r14+0x120]
 102659d:	movzx  r8d,BYTE PTR [r14+0xb9]
 10265a5:	mov    rcx,r12
 10265a8:	call   QWORD PTR [rax+0x8]
 10265ab:	mov    rcx,r14
 10265ae:	test   al,al
 10265b0:	jne    0x10266a4
 10265b6:	mov    rax,QWORD PTR [r14]
 10265b9:	mov    BYTE PTR [rsp+0x28],0x1
 10265be:	mov    BYTE PTR [rsp+0x20],0x1
 10265c3:	lea    r9d,[r15+0x2]
 10265c7:	xor    r8d,r8d
 10265ca:	mov    edx,0xc000c488
 10265cf:	call   QWORD PTR [rax]
 10265d1:	nop
 10265d2:	lea    rcx,[rsp+0xb0]
 10265da:	call   QWORD PTR [rip+0xfffffffffffdb4c8]        # 0x1001aa8
 10265e0:	nop
 10265e1:	lea    rcx,[rsp+0xe8]
 10265e9:	call   QWORD PTR [rip+0xfffffffffffdb4b9]        # 0x1001aa8
 10265ef:	nop
 10265f0:	lea    rcx,[rsp+0x2b0]
 10265f8:	call   0x100c4f0
 10265fd:	nop
 10265fe:	lea    rcx,[rsp+0x238]
 1026606:	call   0x100c4f0
 102660b:	nop
 102660c:	lea    rcx,[rsp+0xe0]
 1026614:	call   QWORD PTR [rip+0xfffffffffffdb48e]        # 0x1001aa8
 102661a:	nop
 102661b:	lea    rcx,[rsp+0xd8]
 1026623:	call   QWORD PTR [rip+0xfffffffffffdb47f]        # 0x1001aa8
 1026629:	nop
 102662a:	lea    rcx,[rsp+0x90]
 1026632:	call   QWORD PTR [rip+0xfffffffffffdb470]        # 0x1001aa8
 1026638:	nop
 1026639:	lea    rcx,[rsp+0xc0]
 1026641:	call   QWORD PTR [rip+0xfffffffffffdb461]        # 0x1001aa8
 1026647:	nop
 1026648:	lea    rcx,[rsp+0xc8]
 1026650:	call   QWORD PTR [rip+0xfffffffffffdb452]        # 0x1001aa8
 1026656:	nop
 1026657:	test   rdi,rdi
 102665a:	je     0x102666d
 102665c:	mov    rcx,rdi
 102665f:	call   QWORD PTR [rip+0xfffffffffffdae73]        # 0x10014d8
 1026665:	mov    QWORD PTR [rsp+0xa0],r15
 102666d:	test   rbx,rbx
 1026670:	je     0x1026683
 1026672:	mov    rcx,rbx
 1026675:	call   QWORD PTR [rip+0xfffffffffffdae5d]        # 0x10014d8
 102667b:	mov    QWORD PTR [rsp+0xa8],r15
 1026683:	lea    rcx,[rsp+0x80]
 102668b:	call   QWORD PTR [rip+0xfffffffffffdb417]        # 0x1001aa8
 1026691:	nop
 1026692:	lea    rcx,[rsp+0x78]
 1026697:	call   QWORD PTR [rip+0xfffffffffffdb40b]        # 0x1001aa8
 102669d:	xor    al,al
 102669f:	jmp    0x1028270
 10266a4:	call   0x1029990
 10266a9:	lea    rax,[rip+0xfffffffffffe01e0]        # 0x1006890
 10266b0:	mov    QWORD PTR [rsp+0x200],rax
 10266b8:	mov    QWORD PTR [rsp+0x208],r15
 10266c0:	mov    DWORD PTR [rsp+0x210],0x11
 10266cb:	mov    QWORD PTR [rsp+0x218],r15
 10266d3:	mov    QWORD PTR [rsp+0x220],r15
 10266db:	mov    QWORD PTR [rsp+0x228],r15
 10266e3:	mov    QWORD PTR [rsp+0x230],0xa
 10266ef:	lea    rcx,[rsp+0x200]
 10266f7:	call   0x102f5a0
 10266fc:	mov    r11,QWORD PTR [r14+0x138]
 1026703:	neg    r11
 1026706:	sbb    rax,rax
 1026709:	mov    QWORD PTR [rsp+0x160],rax
 1026711:	test   rax,rax
 1026714:	je     0x1026850
 102671a:	lea    r9,[rsp+0xe8]
 1026722:	lea    r8,[rsp+0xb0]
 102672a:	lea    rdx,[rsp+0x160]
 1026732:	lea    rcx,[r14+0x120]
 1026739:	call   0x1023d70
 102673e:	cmp    BYTE PTR [r14+0xdd],0x0
 1026746:	jne    0x1026785
 1026748:	lea    rcx,[rsp+0xb0]
 1026750:	call   QWORD PTR [rip+0xfffffffffffdb392]        # 0x1001ae8
 1026756:	mov    rcx,rax
 1026759:	call   0x1031de0
 102675e:	test   al,al
 1026760:	jne    0x1026785
 1026762:	lea    rcx,[rsp+0xb0]
 102676a:	call   QWORD PTR [rip+0xfffffffffffdb378]        # 0x1001ae8
 1026770:	mov    rdx,rax
 1026773:	lea    rcx,[rsp+0x200]
 102677b:	call   0x102f490
 1026780:	mov    BYTE PTR [rax],0x0
 1026783:	jmp    0x10267a6
 1026785:	lea    rcx,[rsp+0xb0]
 102678d:	call   QWORD PTR [rip+0xfffffffffffdb355]        # 0x1001ae8
 1026793:	mov    rdx,rax
 1026796:	lea    rcx,[rsp+0x200]
 102679e:	call   0x102f490
 10267a3:	mov    BYTE PTR [rax],0x1
 10267a6:	mov    rcx,QWORD PTR [rsp+0xf0]
 10267ae:	mov    r15,QWORD PTR [rcx]
 10267b1:	lea    rcx,[rsp+0xb0]
 10267b9:	call   QWORD PTR [rip+0xfffffffffffdb329]        # 0x1001ae8
 10267bf:	mov    rdx,rax
 10267c2:	lea    rcx,[rsp+0x200]
 10267ca:	call   0x102f490
 10267cf:	mov    rsi,rax
 10267d2:	lea    rcx,[rsp+0xb0]
 10267da:	call   QWORD PTR [rip+0xfffffffffffdb308]        # 0x1001ae8
 10267e0:	mov    rdx,rax
 10267e3:	movzx  eax,BYTE PTR [rsi]
 10267e6:	mov    BYTE PTR [rsp+0x28],al
 10267ea:	lea    rax,[rsp+0x2b0]
 10267f2:	mov    QWORD PTR [rsp+0x20],rax
 10267f7:	lea    r9,[r14+0x120]
 10267fe:	lea    r8,[rsp+0x238]
 1026806:	mov    r12,QWORD PTR [rsp+0xf0]
 102680e:	mov    rcx,r12
 1026811:	call   QWORD PTR [r15+0x10]
 1026815:	mov    r11,QWORD PTR [rsp+0x240]
 102681d:	mov    QWORD PTR [rsp+0x600],r11
 1026825:	mov    QWORD PTR [rsp+0x388],r11
 102682d:	test   r11,r11
 1026830:	je     0x1026843
 1026832:	inc    DWORD PTR [r14+0x30]
 1026836:	mov    QWORD PTR [rsp+0x558],r11
 102683e:	mov    r11,QWORD PTR [r11]
 1026841:	jmp    0x1026825
 1026843:	mov    rax,QWORD PTR [rsp+0x160]
 102684b:	jmp    0x1026711
 1026850:	xor    r9d,r9d
 1026853:	mov    r8d,DWORD PTR [r14+0x30]
 1026857:	xor    edx,edx
 1026859:	xor    ecx,ecx
 102685b:	call   QWORD PTR [rip+0xfffffffffffdab4f]        # 0x10013b0
 1026861:	mov    QWORD PTR [rip+0x3cbd8],rax        # 0x1063440
 1026868:	test   rax,rax
 102686b:	jne    0x10269a8
 1026871:	lea    rax,[rsp+0x1c0]
 1026879:	mov    QWORD PTR [rsp+0x590],rax
 1026881:	lea    rdx,[rip+0xfffffffffffdb588]        # 0x1001e10
 1026888:	lea    rcx,[rsp+0x1c0]
 1026890:	call   QWORD PTR [rip+0xfffffffffffdb21a]        # 0x1001ab0
 1026896:	mov    r15,rax
 1026899:	mov    rsi,QWORD PTR [r14]
 102689c:	call   QWORD PTR [rip+0xfffffffffffdacae]        # 0x1001550
 10268a2:	mov    edx,eax
 10268a4:	xor    r9d,r9d
 10268a7:	mov    r8,r15
 10268aa:	mov    rcx,r14
 10268ad:	call   QWORD PTR [rsi+0x28]
 10268b0:	nop
 10268b1:	lea    rax,[rip+0xfffffffffffdffd8]        # 0x1006890
 10268b8:	mov    QWORD PTR [rsp+0x200],rax
 10268c0:	lea    rcx,[rsp+0x200]
 10268c8:	call   0x102f5a0
 10268cd:	nop
 10268ce:	lea    rcx,[rsp+0xb0]
 10268d6:	call   QWORD PTR [rip+0xfffffffffffdb1cc]        # 0x1001aa8
 10268dc:	nop
 10268dd:	lea    rcx,[rsp+0xe8]
 10268e5:	call   QWORD PTR [rip+0xfffffffffffdb1bd]        # 0x1001aa8
 10268eb:	nop
 10268ec:	lea    rcx,[rsp+0x2b0]
 10268f4:	call   0x100c4f0
 10268f9:	nop
 10268fa:	lea    rcx,[rsp+0x238]
 1026902:	call   0x100c4f0
 1026907:	nop
 1026908:	lea    rcx,[rsp+0xe0]
 1026910:	call   QWORD PTR [rip+0xfffffffffffdb192]        # 0x1001aa8
 1026916:	nop
 1026917:	lea    rcx,[rsp+0xd8]
 102691f:	call   QWORD PTR [rip+0xfffffffffffdb183]        # 0x1001aa8
 1026925:	nop
 1026926:	lea    rcx,[rsp+0x90]
 102692e:	call   QWORD PTR [rip+0xfffffffffffdb174]        # 0x1001aa8
 1026934:	nop
 1026935:	lea    rcx,[rsp+0xc0]
 102693d:	call   QWORD PTR [rip+0xfffffffffffdb165]        # 0x1001aa8
 1026943:	nop
 1026944:	lea    rcx,[rsp+0xc8]
 102694c:	call   QWORD PTR [rip+0xfffffffffffdb156]        # 0x1001aa8
 1026952:	nop
 1026953:	test   rdi,rdi
 1026956:	je     0x102696d
 1026958:	mov    rcx,rdi
 102695b:	call   QWORD PTR [rip+0xfffffffffffdab77]        # 0x10014d8
 1026961:	mov    QWORD PTR [rsp+0xa0],0x0
 102696d:	test   rbx,rbx
 1026970:	je     0x1026987
 1026972:	mov    rcx,rbx
 1026975:	call   QWORD PTR [rip+0xfffffffffffdab5d]        # 0x10014d8
 102697b:	mov    QWORD PTR [rsp+0xa8],0x0
 1026987:	lea    rcx,[rsp+0x80]
 102698f:	call   QWORD PTR [rip+0xfffffffffffdb113]        # 0x1001aa8
 1026995:	nop
 1026996:	lea    rcx,[rsp+0x78]
 102699b:	call   QWORD PTR [rip+0xfffffffffffdb107]        # 0x1001aa8
 10269a1:	xor    al,al
 10269a3:	jmp    0x1028270
 10269a8:	mov    r9d,DWORD PTR [r14+0x30]
 10269ac:	xor    r8d,r8d
 10269af:	xor    edx,edx
 10269b1:	or     rcx,0xffffffffffffffff
 10269b5:	call   QWORD PTR [rip+0xfffffffffffda93d]        # 0x10012f8
 10269bb:	mov    rsi,rax
 10269be:	mov    QWORD PTR [rsp+0x568],rax
 10269c6:	mov    QWORD PTR [rsp+0xd0],rax
 10269ce:	test   rax,rax
 10269d1:	jne    0x1026aed
 10269d7:	mov    rax,QWORD PTR [r14]
 10269da:	mov    BYTE PTR [rsp+0x28],0x1
 10269df:	mov    BYTE PTR [rsp+0x20],0x1
 10269e4:	lea    r9d,[rsi+0x2]
 10269e8:	xor    r8d,r8d
 10269eb:	mov    edx,0xc000c3ff
 10269f0:	mov    rcx,r14
 10269f3:	call   QWORD PTR [rax]
 10269f5:	nop
 10269f6:	lea    rax,[rip+0xfffffffffffdfe93]        # 0x1006890
 10269fd:	mov    QWORD PTR [rsp+0x200],rax
 1026a05:	lea    rcx,[rsp+0x200]
 1026a0d:	call   0x102f5a0
 1026a12:	nop
 1026a13:	lea    rcx,[rsp+0xb0]
 1026a1b:	call   QWORD PTR [rip+0xfffffffffffdb087]        # 0x1001aa8
 1026a21:	nop
 1026a22:	lea    rcx,[rsp+0xe8]
 1026a2a:	call   QWORD PTR [rip+0xfffffffffffdb078]        # 0x1001aa8
 1026a30:	nop
 1026a31:	lea    rcx,[rsp+0x2b0]
 1026a39:	call   0x100c4f0
 1026a3e:	nop
 1026a3f:	lea    rcx,[rsp+0x238]
 1026a47:	call   0x100c4f0
 1026a4c:	nop
 1026a4d:	lea    rcx,[rsp+0xe0]
 1026a55:	call   QWORD PTR [rip+0xfffffffffffdb04d]        # 0x1001aa8
 1026a5b:	nop
 1026a5c:	lea    rcx,[rsp+0xd8]
 1026a64:	call   QWORD PTR [rip+0xfffffffffffdb03e]        # 0x1001aa8
 1026a6a:	nop
 1026a6b:	lea    rcx,[rsp+0x90]
 1026a73:	call   QWORD PTR [rip+0xfffffffffffdb02f]        # 0x1001aa8
 1026a79:	nop
 1026a7a:	lea    rcx,[rsp+0xc0]
 1026a82:	call   QWORD PTR [rip+0xfffffffffffdb020]        # 0x1001aa8
 1026a88:	nop
 1026a89:	lea    rcx,[rsp+0xc8]
 1026a91:	call   QWORD PTR [rip+0xfffffffffffdb011]        # 0x1001aa8
 1026a97:	nop
 1026a98:	test   rdi,rdi
 1026a9b:	je     0x1026ab3
 1026a9d:	mov    rcx,rdi
 1026aa0:	call   QWORD PTR [rip+0xfffffffffffdaa32]        # 0x10014d8
 1026aa6:	xor    r15d,r15d
 1026aa9:	mov    QWORD PTR [rsp+0xa0],r15
 1026ab1:	jmp    0x1026ab6
 1026ab3:	xor    r15d,r15d
 1026ab6:	test   rbx,rbx
 1026ab9:	je     0x1026acc
 1026abb:	mov    rcx,rbx
 1026abe:	call   QWORD PTR [rip+0xfffffffffffdaa14]        # 0x10014d8
 1026ac4:	mov    QWORD PTR [rsp+0xa8],r15
 1026acc:	lea    rcx,[rsp+0x80]
 1026ad4:	call   QWORD PTR [rip+0xfffffffffffdafce]        # 0x1001aa8
 1026ada:	nop
 1026adb:	lea    rcx,[rsp+0x78]
 1026ae0:	call   QWORD PTR [rip+0xfffffffffffdafc2]        # 0x1001aa8
 1026ae6:	xor    al,al
 1026ae8:	jmp    0x1028270
 1026aed:	mov    r15d,DWORD PTR [r14+0x30]
 1026af1:	shl    r15,0x3
 1026af5:	call   QWORD PTR [rip+0xfffffffffffdaa5d]        # 0x1001558
 1026afb:	mov    rcx,rax
 1026afe:	mov    r8,r15
 1026b01:	mov    edx,0x8
 1026b06:	call   QWORD PTR [rip+0xfffffffffffdaa5c]        # 0x1001568
 1026b0c:	mov    QWORD PTR [r14+0x28],rax
 1026b10:	test   rax,rax
 1026b13:	jne    0x1026c3c
 1026b19:	mov    rax,QWORD PTR [r14]
 1026b1c:	mov    BYTE PTR [rsp+0x28],0x1
 1026b21:	mov    BYTE PTR [rsp+0x20],0x1
 1026b26:	mov    r9d,0x2
 1026b2c:	xor    r8d,r8d
 1026b2f:	mov    edx,0xc000c3b0
 1026b34:	mov    rcx,r14
 1026b37:	call   QWORD PTR [rax]
 1026b39:	nop
 1026b3a:	mov    rcx,rsi
 1026b3d:	call   QWORD PTR [rip+0xfffffffffffda995]        # 0x10014d8
 1026b43:	xor    esi,esi
 1026b45:	mov    QWORD PTR [rsp+0xd0],rsi
 1026b4d:	lea    rax,[rip+0xfffffffffffdfd3c]        # 0x1006890
 1026b54:	mov    QWORD PTR [rsp+0x200],rax
 1026b5c:	lea    rcx,[rsp+0x200]
 1026b64:	call   0x102f5a0
 1026b69:	nop
 1026b6a:	lea    rcx,[rsp+0xb0]
 1026b72:	call   QWORD PTR [rip+0xfffffffffffdaf30]        # 0x1001aa8
 1026b78:	nop
 1026b79:	lea    rcx,[rsp+0xe8]
 1026b81:	call   QWORD PTR [rip+0xfffffffffffdaf21]        # 0x1001aa8
 1026b87:	nop
 1026b88:	lea    rcx,[rsp+0x2b0]
 1026b90:	call   0x100c4f0
 1026b95:	nop
 1026b96:	lea    rcx,[rsp+0x238]
 1026b9e:	call   0x100c4f0
 1026ba3:	nop
 1026ba4:	lea    rcx,[rsp+0xe0]
 1026bac:	call   QWORD PTR [rip+0xfffffffffffdaef6]        # 0x1001aa8
 1026bb2:	nop
 1026bb3:	lea    rcx,[rsp+0xd8]
 1026bbb:	call   QWORD PTR [rip+0xfffffffffffdaee7]        # 0x1001aa8
 1026bc1:	nop
 1026bc2:	lea    rcx,[rsp+0x90]
 1026bca:	call   QWORD PTR [rip+0xfffffffffffdaed8]        # 0x1001aa8
 1026bd0:	nop
 1026bd1:	lea    rcx,[rsp+0xc0]
 1026bd9:	call   QWORD PTR [rip+0xfffffffffffdaec9]        # 0x1001aa8
 1026bdf:	nop
 1026be0:	lea    rcx,[rsp+0xc8]
 1026be8:	call   QWORD PTR [rip+0xfffffffffffdaeba]        # 0x1001aa8
 1026bee:	nop
 1026bef:	test   rdi,rdi
 1026bf2:	je     0x1026c05
 1026bf4:	mov    rcx,rdi
 1026bf7:	call   QWORD PTR [rip+0xfffffffffffda8db]        # 0x10014d8
 1026bfd:	mov    QWORD PTR [rsp+0xa0],rsi
 1026c05:	test   rbx,rbx
 1026c08:	je     0x1026c1b
 1026c0a:	mov    rcx,rbx
 1026c0d:	call   QWORD PTR [rip+0xfffffffffffda8c5]        # 0x10014d8
 1026c13:	mov    QWORD PTR [rsp+0xa8],rsi
 1026c1b:	lea    rcx,[rsp+0x80]
 1026c23:	call   QWORD PTR [rip+0xfffffffffffdae7f]        # 0x1001aa8
 1026c29:	nop
 1026c2a:	lea    rcx,[rsp+0x78]
 1026c2f:	call   QWORD PTR [rip+0xfffffffffffdae73]        # 0x1001aa8
 1026c35:	xor    al,al
 1026c37:	jmp    0x1028270
 1026c3c:	mov    edx,0x4000c400
 1026c41:	lea    rcx,[rsp+0x3a8]
 1026c49:	call   0x10132d0
 1026c4e:	nop
 1026c4f:	mov    rcx,rax
 1026c52:	call   QWORD PTR [rip+0xfffffffffffdae90]        # 0x1001ae8
 1026c58:	mov    rdx,rax
 1026c5b:	mov    r8d,DWORD PTR [r14+0x30]
 1026c5f:	lea    rcx,[rsp+0x90]
 1026c67:	call   QWORD PTR [rip+0xfffffffffffdadd3]        # 0x1001a40
 1026c6d:	nop
 1026c6e:	lea    rcx,[rsp+0x3a8]
 1026c76:	call   QWORD PTR [rip+0xfffffffffffdae2c]        # 0x1001aa8
 1026c7c:	mov    r15,QWORD PTR [r14]
 1026c7f:	lea    rcx,[rsp+0x90]
 1026c87:	call   QWORD PTR [rip+0xfffffffffffdae5b]        # 0x1001ae8
 1026c8d:	mov    r8,rax
 1026c90:	mov    BYTE PTR [rsp+0x30],0x1
 1026c95:	mov    BYTE PTR [rsp+0x28],0x1
 1026c9a:	mov    DWORD PTR [rsp+0x20],0x0
 1026ca2:	xor    r9d,r9d
 1026ca5:	mov    edx,0x4000c400
 1026caa:	mov    rcx,r14
 1026cad:	call   QWORD PTR [r15+0x8]
 1026cb1:	xor    r15d,r15d
 1026cb4:	mov    DWORD PTR [rsp+0x100],r15d
 1026cbc:	lea    rcx,[rsp+0x190]
 1026cc4:	call   QWORD PTR [rip+0xfffffffffffdadf6]        # 0x1001ac0
 1026cca:	nop
 1026ccb:	mov    ecx,0xfffffff5
 1026cd0:	call   QWORD PTR [rip+0xfffffffffffda572]        # 0x1001248
 1026cd6:	mov    QWORD PTR [rsp+0x3c8],rax
 1026cde:	mov    BYTE PTR [rsp+0xb8],0x1
 1026ce6:	mov    rcx,QWORD PTR [r14+0x138]
 1026ced:	neg    rcx
 1026cf0:	sbb    r15,r15
 1026cf3:	mov    QWORD PTR [rsp+0x160],r15
 1026cfb:	lea    rcx,[r14+0x98]
 1026d02:	xor    r8d,r8d
 1026d05:	lea    rdx,[rip+0xfffffffffffdfaa4]        # 0x10067b0
 1026d0c:	call   QWORD PTR [rip+0xfffffffffffdad46]        # 0x1001a58
 1026d12:	xor    cl,cl
 1026d14:	movzx  ecx,cl
 1026d17:	cmp    eax,0xffffffff
 1026d1a:	cmovne ecx,r13d
 1026d1e:	mov    DWORD PTR [rsp+0x88],ecx
 1026d25:	mov    BYTE PTR [rsp+0x130],cl
 1026d2c:	mov    rax,QWORD PTR [rsp+0x288]
 1026d34:	mov    QWORD PTR [rsp+0xf8],rax
 1026d3c:	nop    DWORD PTR [rax+0x0]
 1026d40:	test   r15,r15
 1026d43:	je     0x1027256
 1026d49:	lea    r9,[rsp+0xe8]
 1026d51:	lea    r8,[rsp+0xb0]
 1026d59:	lea    rdx,[rsp+0x160]
 1026d61:	lea    rcx,[r14+0x120]
 1026d68:	call   0x1023d70
 1026d6d:	lea    rcx,[rsp+0x238]
 1026d75:	call   0x100c3d0
 1026d7a:	lea    rcx,[rsp+0x2b0]
 1026d82:	call   0x100c3d0
 1026d87:	mov    r12,QWORD PTR [r12]
 1026d8b:	lea    rcx,[rsp+0xb0]
 1026d93:	call   QWORD PTR [rip+0xfffffffffffdad4f]        # 0x1001ae8
 1026d99:	mov    rdx,rax
 1026d9c:	lea    rcx,[rsp+0x200]
 1026da4:	call   0x102f490
 1026da9:	mov    r15,rax
 1026dac:	lea    rcx,[rsp+0xb0]
 1026db4:	call   QWORD PTR [rip+0xfffffffffffdad2e]        # 0x1001ae8
 1026dba:	mov    rdx,rax
 1026dbd:	movzx  eax,BYTE PTR [r15]
 1026dc1:	mov    BYTE PTR [rsp+0x28],al
 1026dc5:	lea    rax,[rsp+0x2b0]
 1026dcd:	mov    QWORD PTR [rsp+0x20],rax
 1026dd2:	lea    r9,[r14+0x120]
 1026dd9:	lea    r8,[rsp+0x238]
 1026de1:	mov    rcx,QWORD PTR [rsp+0xf0]
 1026de9:	call   QWORD PTR [r12+0x10]
 1026dee:	mov    r15d,DWORD PTR [rsp+0x88]
 1026df6:	test   r15b,r15b
 1026df9:	jne    0x1026e1d
 1026dfb:	mov    r12,QWORD PTR [rsp+0x2b8]
 1026e03:	mov    QWORD PTR [rsp+0xf8],r12
 1026e0b:	mov    QWORD PTR [rsp+0x598],r12
 1026e13:	mov    QWORD PTR [rsp+0x288],r12
 1026e1b:	jmp    0x1026e25
 1026e1d:	mov    r12,QWORD PTR [rsp+0xf8]
 1026e25:	mov    r13,QWORD PTR [rsp+0x240]
 1026e2d:	mov    QWORD PTR [rsp+0x578],r13
 1026e35:	mov    QWORD PTR [rsp+0x408],r13
 1026e3d:	mov    QWORD PTR [rsp+0x118],r13
 1026e45:	test   r13,r13
 1026e48:	je     0x1027241
 1026e4e:	mov    ecx,0x138
 1026e53:	call   0x103f9d2
 1026e58:	mov    QWORD PTR [rsp+0x3d8],rax
 1026e60:	test   rax,rax
 1026e63:	je     0x1026fb8
 1026e69:	lea    rax,[rsp+0x3b8]
 1026e71:	mov    QWORD PTR [rsp+0x5a8],rax
 1026e79:	test   r15b,r15b
 1026e7c:	je     0x1026e87
 1026e7e:	lea    rax,[rip+0xfffffffffffdbc57]        # 0x1002adc
 1026e85:	jmp    0x1026e9a
 1026e87:	mov    QWORD PTR [rsp+0x588],r12
 1026e8f:	lea    rcx,[r12+0x10]
 1026e94:	call   QWORD PTR [rip+0xfffffffffffdac4e]        # 0x1001ae8
 1026e9a:	mov    rdx,rax
 1026e9d:	lea    rcx,[rsp+0x3b8]
 1026ea5:	call   QWORD PTR [rip+0xfffffffffffdac05]        # 0x1001ab0
 1026eab:	mov    QWORD PTR [rsp+0x1c0],rax
 1026eb3:	mov    r15,QWORD PTR [rsp+0x240]
 1026ebb:	mov    QWORD PTR [rsp+0x5b8],r15
 1026ec3:	mov    QWORD PTR [rsp+0x5c8],rsi
 1026ecb:	mov    QWORD PTR [rsp+0x5a0],r13
 1026ed3:	lea    rcx,[rsp+0xb0]
 1026edb:	call   QWORD PTR [rip+0xfffffffffffdac07]        # 0x1001ae8
 1026ee1:	mov    rdx,rax
 1026ee4:	lea    rcx,[rsp+0x200]
 1026eec:	call   0x102f490
 1026ef1:	mov    r12,rax
 1026ef4:	cmp    r13,r15
 1026ef7:	sete   r15b
 1026efb:	lea    r13,[r14+0x38]
 1026eff:	mov    rcx,QWORD PTR [rsp+0x118]
 1026f07:	add    rcx,0x10
 1026f0b:	call   QWORD PTR [rip+0xfffffffffffdabd7]        # 0x1001ae8
 1026f11:	mov    QWORD PTR [rsp+0x1f8],rax
 1026f19:	lea    rcx,[rsp+0xb0]
 1026f21:	call   QWORD PTR [rip+0xfffffffffffdabc1]        # 0x1001ae8
 1026f27:	mov    r8,rax
 1026f2a:	mov    DWORD PTR [rsp+0x68],0x1
 1026f32:	mov    BYTE PTR [rsp+0x60],r15b
 1026f37:	movzx  ecx,BYTE PTR [r12]
 1026f3c:	mov    BYTE PTR [rsp+0x58],cl
 1026f40:	mov    QWORD PTR [rsp+0x50],rsi
 1026f45:	mov    QWORD PTR [rsp+0x48],r13
 1026f4a:	mov    rcx,QWORD PTR [r14+0x20]
 1026f4e:	mov    QWORD PTR [rsp+0x40],rcx
 1026f53:	mov    rcx,QWORD PTR [r14+0x18]
 1026f57:	mov    QWORD PTR [rsp+0x38],rcx
 1026f5c:	mov    rax,QWORD PTR [rsp+0x3c8]
 1026f64:	mov    QWORD PTR [rsp+0x30],rax
 1026f69:	mov    rax,QWORD PTR [rsp+0xf0]
 1026f71:	mov    QWORD PTR [rsp+0x28],rax
 1026f76:	mov    rax,QWORD PTR [rsp+0x1c0]
 1026f7e:	mov    QWORD PTR [rsp+0x20],rax
 1026f83:	mov    r9,QWORD PTR [rsp+0x1f8]
 1026f8b:	mov    rdx,r14
 1026f8e:	mov    rcx,QWORD PTR [rsp+0x3d8]
 1026f96:	call   0x1014850
 1026f9b:	mov    r9,rax
 1026f9e:	mov    QWORD PTR [rsp+0x3e8],rax
 1026fa6:	mov    r13,QWORD PTR [rsp+0x118]
 1026fae:	mov    r15d,DWORD PTR [rsp+0x88]
 1026fb6:	jmp    0x1026fc3
 1026fb8:	xor    r9d,r9d
 1026fbb:	mov    QWORD PTR [rsp+0x3e8],r9
 1026fc3:	mov    QWORD PTR [r14+0x8],r9
 1026fc7:	mov    r12,QWORD PTR [rsp+0xf8]
 1026fcf:	test   r15b,r15b
 1026fd2:	jne    0x1026ff0
 1026fd4:	mov    QWORD PTR [rsp+0x5f0],r12
 1026fdc:	mov    r12,QWORD PTR [r12]
 1026fe0:	mov    QWORD PTR [rsp+0xf8],r12
 1026fe8:	mov    QWORD PTR [rsp+0x288],r12
 1026ff0:	test   r9,r9
 1026ff3:	jne    0x102712a
 1026ff9:	mov    rax,QWORD PTR [r14]
 1026ffc:	mov    BYTE PTR [rsp+0x28],0x1
 1027001:	mov    BYTE PTR [rsp+0x20],0x1
 1027006:	xor    r8d,r8d
 1027009:	mov    edx,0xc000c403
 102700e:	mov    rcx,r14
 1027011:	call   QWORD PTR [rax]
 1027013:	nop
 1027014:	lea    rcx,[rsp+0x190]
 102701c:	call   QWORD PTR [rip+0xfffffffffffdaa86]        # 0x1001aa8
 1027022:	nop
 1027023:	test   rsi,rsi
 1027026:	je     0x102703b
 1027028:	mov    rcx,rsi
 102702b:	call   QWORD PTR [rip+0xfffffffffffda4a7]        # 0x10014d8
 1027031:	xor    esi,esi
 1027033:	mov    QWORD PTR [rsp+0xd0],rsi
 102703b:	lea    rax,[rip+0xfffffffffffdf84e]        # 0x1006890
 1027042:	mov    QWORD PTR [rsp+0x200],rax
 102704a:	lea    rcx,[rsp+0x200]
 1027052:	call   0x102f5a0
 1027057:	nop
 1027058:	lea    rcx,[rsp+0xb0]
 1027060:	call   QWORD PTR [rip+0xfffffffffffdaa42]        # 0x1001aa8
 1027066:	nop
 1027067:	lea    rcx,[rsp+0xe8]
 102706f:	call   QWORD PTR [rip+0xfffffffffffdaa33]        # 0x1001aa8
 1027075:	nop
 1027076:	lea    rcx,[rsp+0x2b0]
 102707e:	call   0x100c4f0
 1027083:	nop
 1027084:	lea    rcx,[rsp+0x238]
 102708c:	call   0x100c4f0
 1027091:	nop
 1027092:	lea    rcx,[rsp+0xe0]
 102709a:	call   QWORD PTR [rip+0xfffffffffffdaa08]        # 0x1001aa8
 10270a0:	nop
 10270a1:	lea    rcx,[rsp+0xd8]
 10270a9:	call   QWORD PTR [rip+0xfffffffffffda9f9]        # 0x1001aa8
 10270af:	nop
 10270b0:	lea    rcx,[rsp+0x90]
 10270b8:	call   QWORD PTR [rip+0xfffffffffffda9ea]        # 0x1001aa8
 10270be:	nop
 10270bf:	lea    rcx,[rsp+0xc0]
 10270c7:	call   QWORD PTR [rip+0xfffffffffffda9db]        # 0x1001aa8
 10270cd:	nop
 10270ce:	lea    rcx,[rsp+0xc8]
 10270d6:	call   QWORD PTR [rip+0xfffffffffffda9cc]        # 0x1001aa8
 10270dc:	nop
 10270dd:	test   rdi,rdi
 10270e0:	je     0x10270f3
 10270e2:	mov    rcx,rdi
 10270e5:	call   QWORD PTR [rip+0xfffffffffffda3ed]        # 0x10014d8
 10270eb:	mov    QWORD PTR [rsp+0xa0],rsi
 10270f3:	test   rbx,rbx
 10270f6:	je     0x1027109
 10270f8:	mov    rcx,rbx
 10270fb:	call   QWORD PTR [rip+0xfffffffffffda3d7]        # 0x10014d8
 1027101:	mov    QWORD PTR [rsp+0xa8],rsi
 1027109:	lea    rcx,[rsp+0x80]
 1027111:	call   QWORD PTR [rip+0xfffffffffffda991]        # 0x1001aa8
 1027117:	nop
 1027118:	lea    rcx,[rsp+0x78]
 102711d:	call   QWORD PTR [rip+0xfffffffffffda985]        # 0x1001aa8
 1027123:	xor    al,al
 1027125:	jmp    0x1028270
 102712a:	mov    eax,DWORD PTR [rsp+0x100]
 1027131:	lea    r15,[rax*8+0x0]
 1027139:	lea    rax,[rsp+0x4c0]
 1027141:	mov    QWORD PTR [rsp+0x28],rax
 1027146:	mov    DWORD PTR [rsp+0x20],0x0
 102714e:	lea    r8,[rip+0x5c0b]        # 0x102cd60
 1027155:	xor    edx,edx
 1027157:	xor    ecx,ecx
 1027159:	call   QWORD PTR [rip+0xfffffffffffda509]        # 0x1001668
 102715f:	mov    rcx,QWORD PTR [r14+0x28]
 1027163:	mov    QWORD PTR [r15+rcx*1],rax
 1027167:	mov    rax,QWORD PTR [r14+0x28]
 102716b:	cmp    QWORD PTR [r15+rax*1],0x0
 1027170:	jne    0x1027212
 1027176:	mov    edx,0x8000c401
 102717b:	lea    rcx,[rsp+0x3f8]
 1027183:	call   0x10132d0
 1027188:	nop
 1027189:	mov    QWORD PTR [rsp+0x518],r13
 1027191:	mov    rcx,rax
 1027194:	call   QWORD PTR [rip+0xfffffffffffda94e]        # 0x1001ae8
 102719a:	mov    rdx,rax
 102719d:	mov    rax,QWORD PTR [r13+0x10]
 10271a1:	mov    QWORD PTR [rsp+0x20],rax
 10271a6:	mov    r9,QWORD PTR [rsp+0xe8]
 10271ae:	mov    r8d,DWORD PTR [rsp+0x100]
 10271b6:	lea    rcx,[rsp+0x90]
 10271be:	call   QWORD PTR [rip+0xfffffffffffda87c]        # 0x1001a40
 10271c4:	nop
 10271c5:	lea    rcx,[rsp+0x3f8]
 10271cd:	call   QWORD PTR [rip+0xfffffffffffda8d5]        # 0x1001aa8
 10271d3:	mov    r15,QWORD PTR [r14]
 10271d6:	lea    rcx,[rsp+0x90]
 10271de:	call   QWORD PTR [rip+0xfffffffffffda904]        # 0x1001ae8
 10271e4:	mov    r8,rax
 10271e7:	mov    BYTE PTR [rsp+0x30],0x1
 10271ec:	mov    BYTE PTR [rsp+0x28],0x1
 10271f1:	mov    DWORD PTR [rsp+0x20],0x0
 10271f9:	xor    r9d,r9d
 10271fc:	mov    edx,0x8000c401
 1027201:	mov    rcx,r14
 1027204:	call   QWORD PTR [r15+0x8]
 1027208:	mov    BYTE PTR [rsp+0xb8],0x0
 1027210:	jmp    0x1027241
 1027212:	mov    eax,DWORD PTR [rsp+0x100]
 1027219:	cmp    eax,DWORD PTR [r14+0x30]
 102721d:	jae    0x1027228
 102721f:	inc    eax
 1027221:	mov    DWORD PTR [rsp+0x100],eax
 1027228:	mov    QWORD PTR [rsp+0x520],r13
 1027230:	mov    r13,QWORD PTR [r13+0x0]
 1027234:	mov    r15d,DWORD PTR [rsp+0x88]
 102723c:	jmp    0x1026e35
 1027241:	mov    r15,QWORD PTR [rsp+0x160]
 1027249:	mov    r12,QWORD PTR [rsp+0xf0]
 1027251:	jmp    0x1026d40
 1027256:	mov    r15d,DWORD PTR [rsp+0x100]
 102725e:	test   r15d,r15d
 1027261:	jne    0x102739b
 1027267:	mov    rax,QWORD PTR [r14]
 102726a:	mov    BYTE PTR [rsp+0x28],0x1
 102726f:	mov    BYTE PTR [rsp+0x20],0x1
 1027274:	xor    r9d,r9d
 1027277:	xor    r8d,r8d
 102727a:	mov    edx,0xc000c403
 102727f:	mov    rcx,r14
 1027282:	call   QWORD PTR [rax]
 1027284:	nop
 1027285:	lea    rcx,[rsp+0x190]
 102728d:	call   QWORD PTR [rip+0xfffffffffffda815]        # 0x1001aa8
 1027293:	nop
 1027294:	test   rsi,rsi
 1027297:	je     0x10272ac
 1027299:	mov    rcx,rsi
 102729c:	call   QWORD PTR [rip+0xfffffffffffda236]        # 0x10014d8
 10272a2:	xor    esi,esi
 10272a4:	mov    QWORD PTR [rsp+0xd0],rsi
 10272ac:	lea    rax,[rip+0xfffffffffffdf5dd]        # 0x1006890
 10272b3:	mov    QWORD PTR [rsp+0x200],rax
 10272bb:	lea    rcx,[rsp+0x200]
 10272c3:	call   0x102f5a0
 10272c8:	nop
 10272c9:	lea    rcx,[rsp+0xb0]
 10272d1:	call   QWORD PTR [rip+0xfffffffffffda7d1]        # 0x1001aa8
 10272d7:	nop
 10272d8:	lea    rcx,[rsp+0xe8]
 10272e0:	call   QWORD PTR [rip+0xfffffffffffda7c2]        # 0x1001aa8
 10272e6:	nop
 10272e7:	lea    rcx,[rsp+0x2b0]
 10272ef:	call   0x100c4f0
 10272f4:	nop
 10272f5:	lea    rcx,[rsp+0x238]
 10272fd:	call   0x100c4f0
 1027302:	nop
 1027303:	lea    rcx,[rsp+0xe0]
 102730b:	call   QWORD PTR [rip+0xfffffffffffda797]        # 0x1001aa8
 1027311:	nop
 1027312:	lea    rcx,[rsp+0xd8]
 102731a:	call   QWORD PTR [rip+0xfffffffffffda788]        # 0x1001aa8
 1027320:	nop
 1027321:	lea    rcx,[rsp+0x90]
 1027329:	call   QWORD PTR [rip+0xfffffffffffda779]        # 0x1001aa8
 102732f:	nop
 1027330:	lea    rcx,[rsp+0xc0]
 1027338:	call   QWORD PTR [rip+0xfffffffffffda76a]        # 0x1001aa8
 102733e:	nop
 102733f:	lea    rcx,[rsp+0xc8]
 1027347:	call   QWORD PTR [rip+0xfffffffffffda75b]        # 0x1001aa8
 102734d:	nop
 102734e:	test   rdi,rdi
 1027351:	je     0x1027364
 1027353:	mov    rcx,rdi
 1027356:	call   QWORD PTR [rip+0xfffffffffffda17c]        # 0x10014d8
 102735c:	mov    QWORD PTR [rsp+0xa0],rsi
 1027364:	test   rbx,rbx
 1027367:	je     0x102737a
 1027369:	mov    rcx,rbx
 102736c:	call   QWORD PTR [rip+0xfffffffffffda166]        # 0x10014d8
 1027372:	mov    QWORD PTR [rsp+0xa8],rsi
 102737a:	lea    rcx,[rsp+0x80]
 1027382:	call   QWORD PTR [rip+0xfffffffffffda720]        # 0x1001aa8
 1027388:	nop
 1027389:	lea    rcx,[rsp+0x78]
 102738e:	call   QWORD PTR [rip+0xfffffffffffda714]        # 0x1001aa8
 1027394:	xor    al,al
 1027396:	jmp    0x1028270
 102739b:	mov    DWORD PTR [r14+0x30],r15d
 102739f:	lea    rcx,[rsp+0x238]
 10273a7:	call   0x100c3d0
 10273ac:	movzx  r9d,BYTE PTR [rsp+0x70]
 10273b2:	mov    BYTE PTR [rsp+0x20],r9b
 10273b7:	or     r8d,0xffffffff
 10273bb:	mov    edx,DWORD PTR [r14+0x30]
 10273bf:	mov    rcx,rsi
 10273c2:	call   0x1032900
 10273c7:	mov    r11d,DWORD PTR [rip+0x3c556]        # 0x1063924
 10273ce:	test   r11d,r11d
 10273d1:	je     0x1027500
 10273d7:	lea    rcx,[rsp+0x190]
 10273df:	call   QWORD PTR [rip+0xfffffffffffda6c3]        # 0x1001aa8
 10273e5:	nop
 10273e6:	mov    rcx,QWORD PTR [rsp+0xd0]
 10273ee:	test   rcx,rcx
 10273f1:	je     0x1027405
 10273f3:	call   QWORD PTR [rip+0xfffffffffffda0df]        # 0x10014d8
 10273f9:	xor    ebx,ebx
 10273fb:	mov    QWORD PTR [rsp+0xd0],rbx
 1027403:	jmp    0x1027407
 1027405:	xor    ebx,ebx
 1027407:	lea    rax,[rip+0xfffffffffffdf482]        # 0x1006890
 102740e:	mov    QWORD PTR [rsp+0x200],rax
 1027416:	lea    rcx,[rsp+0x200]
 102741e:	call   0x102f5a0
 1027423:	nop
 1027424:	lea    rcx,[rsp+0xb0]
 102742c:	call   QWORD PTR [rip+0xfffffffffffda676]        # 0x1001aa8
 1027432:	nop
 1027433:	lea    rcx,[rsp+0xe8]
 102743b:	call   QWORD PTR [rip+0xfffffffffffda667]        # 0x1001aa8
 1027441:	nop
 1027442:	lea    rcx,[rsp+0x2b0]
 102744a:	call   0x100c4f0
 102744f:	nop
 1027450:	lea    rcx,[rsp+0x238]
 1027458:	call   0x100c4f0
 102745d:	nop
 102745e:	lea    rcx,[rsp+0xe0]
 1027466:	call   QWORD PTR [rip+0xfffffffffffda63c]        # 0x1001aa8
 102746c:	nop
 102746d:	lea    rcx,[rsp+0xd8]
 1027475:	call   QWORD PTR [rip+0xfffffffffffda62d]        # 0x1001aa8
 102747b:	nop
 102747c:	lea    rcx,[rsp+0x90]
 1027484:	call   QWORD PTR [rip+0xfffffffffffda61e]        # 0x1001aa8
 102748a:	nop
 102748b:	lea    rcx,[rsp+0xc0]
 1027493:	call   QWORD PTR [rip+0xfffffffffffda60f]        # 0x1001aa8
 1027499:	nop
 102749a:	lea    rcx,[rsp+0xc8]
 10274a2:	call   QWORD PTR [rip+0xfffffffffffda600]        # 0x1001aa8
 10274a8:	nop
 10274a9:	mov    rcx,QWORD PTR [rsp+0xa0]
 10274b1:	test   rcx,rcx
 10274b4:	je     0x10274c4
 10274b6:	call   QWORD PTR [rip+0xfffffffffffda01c]        # 0x10014d8
 10274bc:	mov    QWORD PTR [rsp+0xa0],rbx
 10274c4:	mov    rcx,QWORD PTR [rsp+0xa8]
 10274cc:	test   rcx,rcx
 10274cf:	je     0x10274df
 10274d1:	call   QWORD PTR [rip+0xfffffffffffda001]        # 0x10014d8
 10274d7:	mov    QWORD PTR [rsp+0xa8],rbx
 10274df:	lea    rcx,[rsp+0x80]
 10274e7:	call   QWORD PTR [rip+0xfffffffffffda5bb]        # 0x1001aa8
 10274ed:	nop
 10274ee:	lea    rcx,[rsp+0x78]
 10274f3:	call   QWORD PTR [rip+0xfffffffffffda5af]        # 0x1001aa8
 10274f9:	xor    al,al
 10274fb:	jmp    0x1028270
 1027500:	lea    r8,[rsp+0x1b8]
 1027508:	mov    edx,DWORD PTR [r14+0x30]
 102750c:	mov    rcx,QWORD PTR [rip+0x3bf2d]        # 0x1063440
 1027513:	call   QWORD PTR [rip+0xfffffffffffd9e1f]        # 0x1001338
 1027519:	mov    r11,QWORD PTR [r14]
 102751c:	mov    BYTE PTR [rsp+0x28],0x1
 1027521:	mov    BYTE PTR [rsp+0x20],0x1
 1027526:	xor    r9d,r9d
 1027529:	xor    r8d,r8d
 102752c:	mov    edx,0x4000c3f8
 1027531:	mov    rcx,r14
 1027534:	call   QWORD PTR [r11]
 1027537:	movzx  r12d,BYTE PTR [rsp+0x70]
 102753d:	mov    BYTE PTR [rsp+0x20],r12b
 1027542:	movzx  r9d,r12b
 1027546:	or     r8d,0xffffffff
 102754a:	mov    edx,DWORD PTR [r14+0x30]
 102754e:	mov    rdi,QWORD PTR [rsp+0xd0]
 1027556:	mov    rcx,rdi
 1027559:	call   0x1032900
 102755e:	lea    r8,[rsp+0x1b8]
 1027566:	mov    edx,DWORD PTR [r14+0x30]
 102756a:	mov    rcx,QWORD PTR [rip+0x3becf]        # 0x1063440
 1027571:	call   QWORD PTR [rip+0xfffffffffffd9dc1]        # 0x1001338
 1027577:	mov    r11,QWORD PTR [r14]
 102757a:	mov    BYTE PTR [rsp+0x28],0x1
 102757f:	mov    BYTE PTR [rsp+0x20],0x1
 1027584:	xor    r9d,r9d
 1027587:	xor    r8d,r8d
 102758a:	mov    edx,0x4000c3f9
 102758f:	mov    rcx,r14
 1027592:	call   QWORD PTR [r11]
 1027595:	mov    BYTE PTR [rsp+0x20],r12b
 102759a:	movzx  r9d,r12b
 102759e:	or     r8d,0xffffffff
 10275a2:	mov    edx,DWORD PTR [r14+0x30]
 10275a6:	mov    rcx,rdi
 10275a9:	call   0x1032900
 10275ae:	test   r12b,r12b
 10275b1:	jne    0x10275dd
 10275b3:	mov    rax,QWORD PTR [r14]
 10275b6:	mov    BYTE PTR [rsp+0x28],0x1
 10275bb:	mov    BYTE PTR [rsp+0x20],0x1
 10275c0:	mov    r13d,0x1
 10275c6:	mov    r9d,r13d
 10275c9:	xor    r8d,r8d
 10275cc:	mov    edx,0x4000c3fa
 10275d1:	mov    rcx,r14
 10275d4:	call   QWORD PTR [rax]
 10275d6:	xor    esi,esi
 10275d8:	jmp    0x1027695
 10275dd:	mov    r8d,0x400
 10275e3:	lea    rdx,[rsp+0xa90]
 10275eb:	xor    ecx,ecx
 10275ed:	call   QWORD PTR [rip+0xfffffffffffd9c7d]        # 0x1001270
 10275f3:	xor    r8d,r8d
 10275f6:	lea    rdx,[rsp+0xa90]
 10275fe:	lea    rcx,[rsp+0x278]
 1027606:	call   0x1031010
 102760b:	nop
 102760c:	mov    edx,0x4000c420
 1027611:	lea    rcx,[rsp+0x418]
 1027619:	call   0x10132d0
 102761e:	nop
 102761f:	mov    rcx,rax
 1027622:	call   QWORD PTR [rip+0xfffffffffffda4c0]        # 0x1001ae8
 1027628:	mov    rdx,rax
 102762b:	mov    r8,QWORD PTR [rsp+0x278]
 1027633:	lea    rcx,[rsp+0x90]
 102763b:	call   QWORD PTR [rip+0xfffffffffffda3ff]        # 0x1001a40
 1027641:	nop
 1027642:	lea    rcx,[rsp+0x418]
 102764a:	call   QWORD PTR [rip+0xfffffffffffda458]        # 0x1001aa8
 1027650:	mov    rbx,QWORD PTR [r14]
 1027653:	lea    rcx,[rsp+0x90]
 102765b:	call   QWORD PTR [rip+0xfffffffffffda487]        # 0x1001ae8
 1027661:	mov    r8,rax
 1027664:	mov    BYTE PTR [rsp+0x30],0x1
 1027669:	mov    BYTE PTR [rsp+0x28],0x1
 102766e:	xor    esi,esi
 1027670:	mov    DWORD PTR [rsp+0x20],esi
 1027674:	xor    r9d,r9d
 1027677:	mov    edx,0x4000c420
 102767c:	mov    rcx,r14
 102767f:	call   QWORD PTR [rbx+0x8]
 1027682:	nop
 1027683:	lea    rcx,[rsp+0x278]
 102768b:	call   QWORD PTR [rip+0xfffffffffffda417]        # 0x1001aa8
 1027691:	lea    r13d,[rsi+0x1]
 1027695:	mov    r15,rsi
 1027698:	mov    QWORD PTR [rsp+0x148],rsi
 10276a0:	mov    rbx,rsi
 10276a3:	mov    QWORD PTR [rsp+0x110],rbx
 10276ab:	lea    rcx,[rsp+0x290]
 10276b3:	call   QWORD PTR [rip+0xfffffffffffda407]        # 0x1001ac0
 10276b9:	nop
 10276ba:	lea    rcx,[rsp+0x298]
 10276c2:	call   QWORD PTR [rip+0xfffffffffffda3f8]        # 0x1001ac0
 10276c8:	nop
 10276c9:	mov    QWORD PTR [rsp+0x180],rsi
 10276d1:	lea    rcx,[rsp+0x150]
 10276d9:	call   QWORD PTR [rip+0xfffffffffffda3e1]        # 0x1001ac0
 10276df:	nop
 10276e0:	mov    eax,DWORD PTR [r14+0xd0]
 10276e7:	cmp    eax,0x2
 10276ea:	jne    0x1027917
 10276f0:	lea    rdx,[rip+0x3bd59]        # 0x1063450
 10276f7:	lea    rcx,[rsp+0x150]
 10276ff:	call   QWORD PTR [rip+0xfffffffffffda393]        # 0x1001a98
 1027705:	lea    rdx,[rip+0xfffffffffffda824]        # 0x1001f30
 102770c:	lea    rcx,[rsp+0x150]
 1027714:	call   QWORD PTR [rip+0xfffffffffffda376]        # 0x1001a90
 102771a:	lea    r11,[rip+0xfffffffffffda6ff]        # 0x1001e20
 1027721:	mov    QWORD PTR [rsp+0x4d8],r11
 1027729:	mov    QWORD PTR [rsp+0x4f0],rsi
 1027731:	mov    QWORD PTR [rsp+0x4f8],rsi
 1027739:	mov    QWORD PTR [rsp+0x4e8],rsi
 1027741:	mov    QWORD PTR [rsp+0x4e0],rsi
 1027749:	mov    QWORD PTR [rsp+0x500],rsi
 1027751:	mov    QWORD PTR [rsp+0x508],0xa
 102775d:	lea    rcx,[rsp+0x4d8]
 1027765:	call   0x100c3d0
 102776a:	lea    r8,[rip+0xfffffffffffdf147]        # 0x10068b8
 1027771:	lea    rdx,[r14+0x78]
 1027775:	lea    rcx,[rsp+0x2f0]
 102777d:	call   0x100af10
 1027782:	nop
 1027783:	mov    rdx,rax
 1027786:	lea    rcx,[rsp+0x4d8]
 102778e:	call   0x100c370
 1027793:	nop
 1027794:	lea    rcx,[rsp+0x2f0]
 102779c:	call   QWORD PTR [rip+0xfffffffffffda306]        # 0x1001aa8
 10277a2:	lea    r8,[rip+0xfffffffffffda75f]        # 0x1001f08
 10277a9:	lea    rdx,[r14+0x78]
 10277ad:	lea    rcx,[rsp+0x310]
 10277b5:	call   0x100af10
 10277ba:	nop
 10277bb:	lea    r8,[rip+0xfffffffffffdf0f6]        # 0x10068b8
 10277c2:	mov    rdx,rax
 10277c5:	lea    rcx,[rsp+0x300]
 10277cd:	call   0x100af10
 10277d2:	nop
 10277d3:	mov    rdx,rax
 10277d6:	lea    rcx,[rsp+0x4d8]
 10277de:	call   0x100c370
 10277e3:	nop
 10277e4:	lea    rcx,[rsp+0x300]
 10277ec:	call   QWORD PTR [rip+0xfffffffffffda2b6]        # 0x1001aa8
 10277f2:	nop
 10277f3:	lea    rcx,[rsp+0x310]
 10277fb:	call   QWORD PTR [rip+0xfffffffffffda2a7]        # 0x1001aa8
 1027801:	mov    ecx,0x3a8
 1027806:	call   0x103f9d2
 102780b:	mov    QWORD PTR [rsp+0x320],rax
 1027813:	test   rax,rax
 1027816:	je     0x1027880
 1027818:	cmp    BYTE PTR [r14+0xbb],0x0
 1027820:	sete   sil
 1027824:	lea    rcx,[rsp+0x150]
 102782c:	call   QWORD PTR [rip+0xfffffffffffda2b6]        # 0x1001ae8
 1027832:	mov    r15,rax
 1027835:	lea    rcx,[r14+0x78]
 1027839:	call   QWORD PTR [rip+0xfffffffffffda2a9]        # 0x1001ae8
 102783f:	mov    r8,rax
 1027842:	mov    BYTE PTR [rsp+0x38],sil
 1027847:	mov    BYTE PTR [rsp+0x30],0x1
 102784c:	mov    BYTE PTR [rsp+0x28],0x1
 1027851:	lea    rax,[rsp+0x4d8]
 1027859:	mov    QWORD PTR [rsp+0x20],rax
 102785e:	mov    r9,r15
 1027861:	mov    rdx,r14
 1027864:	mov    rcx,QWORD PTR [rsp+0x320]
 102786c:	call   0x100afb0
 1027871:	mov    r15,rax
 1027874:	mov    QWORD PTR [rsp+0x330],rax
 102787c:	xor    esi,esi
 102787e:	jmp    0x102788d
 1027880:	xor    esi,esi
 1027882:	mov    r15d,esi
 1027885:	mov    QWORD PTR [rsp+0x330],rsi
 102788d:	mov    QWORD PTR [rsp+0x148],r15
 1027895:	test   r15,r15
 1027898:	je     0x1027905
 102789a:	lea    rax,[rsp+0x1b0]
 10278a2:	mov    QWORD PTR [rsp+0x28],rax
 10278a7:	mov    DWORD PTR [rsp+0x20],esi
 10278ab:	mov    r9,r15
 10278ae:	lea    r8,[rip+0x54eb]        # 0x102cda0
 10278b5:	xor    edx,edx
 10278b7:	xor    ecx,ecx
 10278b9:	call   QWORD PTR [rip+0xfffffffffffd9da9]        # 0x1001668
 10278bf:	mov    rbx,rax
 10278c2:	mov    QWORD PTR [rsp+0x530],rax
 10278ca:	mov    QWORD PTR [rsp+0x110],rax
 10278d2:	test   rax,rax
 10278d5:	jne    0x10278f6
 10278d7:	mov    rax,QWORD PTR [r14]
 10278da:	mov    BYTE PTR [rsp+0x28],0x1
 10278df:	mov    BYTE PTR [rsp+0x20],0x1
 10278e4:	xor    r9d,r9d
 10278e7:	xor    r8d,r8d
 10278ea:	mov    edx,0x8000c402
 10278ef:	mov    rcx,r14
 10278f2:	call   QWORD PTR [rax]
 10278f4:	jmp    0x1027905
 10278f6:	mov    edx,0xfffffffe
 10278fb:	mov    rcx,rax
 10278fe:	call   QWORD PTR [rip+0xfffffffffffd99dc]        # 0x10012e0
 1027904:	nop
 1027905:	lea    rcx,[rsp+0x4d8]
 102790d:	call   0x100c4f0
 1027912:	jmp    0x10279c6
 1027917:	cmp    eax,0x1
 102791a:	jne    0x10279c6
 1027920:	lea    rdx,[r14+0x80]
 1027927:	lea    rcx,[rsp+0x298]
 102792f:	call   QWORD PTR [rip+0xfffffffffffda16b]        # 0x1001aa0
 1027935:	lea    rdx,[r14+0x78]
 1027939:	lea    rcx,[rsp+0x290]
 1027941:	call   QWORD PTR [rip+0xfffffffffffda159]        # 0x1001aa0
 1027947:	mov    r11,QWORD PTR [r14+0x20]
 102794b:	mov    QWORD PTR [rsp+0x2a0],r11
 1027953:	mov    DWORD PTR [rsp+0x2a8],esi
 102795a:	lea    rax,[rsp+0x1b0]
 1027962:	mov    QWORD PTR [rsp+0x28],rax
 1027967:	mov    DWORD PTR [rsp+0x20],esi
 102796b:	lea    r9,[rsp+0x290]
 1027973:	lea    r8,[rip+0x5446]        # 0x102cdc0
 102797a:	xor    edx,edx
 102797c:	xor    ecx,ecx
 102797e:	call   QWORD PTR [rip+0xfffffffffffd9ce4]        # 0x1001668
 1027984:	mov    QWORD PTR [rsp+0x540],rax
 102798c:	mov    QWORD PTR [rsp+0x180],rax
 1027994:	test   rax,rax
 1027997:	jne    0x10279b8
 1027999:	mov    rax,QWORD PTR [r14]
 102799c:	mov    BYTE PTR [rsp+0x28],0x1
 10279a1:	mov    BYTE PTR [rsp+0x20],0x1
 10279a6:	xor    r9d,r9d
 10279a9:	xor    r8d,r8d
 10279ac:	mov    edx,0x8000c402
 10279b1:	mov    rcx,r14
 10279b4:	call   QWORD PTR [rax]
 10279b6:	jmp    0x10279c6
 10279b8:	mov    edx,0xfffffffe
 10279bd:	mov    rcx,rax
 10279c0:	call   QWORD PTR [rip+0xfffffffffffd991a]        # 0x10012e0
 10279c6:	cmp    BYTE PTR [r14+0xdc],0x0
 10279ce:	je     0x1027a20
 10279d0:	lock inc DWORD PTR [rip+0x3bf4d]        # 0x1063924
 10279d7:	lock inc DWORD PTR [rip+0x3c056]        # 0x1063a34
 10279de:	mov    rax,QWORD PTR [r14]
 10279e1:	mov    BYTE PTR [rsp+0x28],0x1
 10279e6:	mov    BYTE PTR [rsp+0x20],0x1
 10279eb:	mov    r9d,r13d
 10279ee:	xor    r8d,r8d
 10279f1:	mov    edx,0x4000c42b
 10279f6:	mov    rcx,r14
 10279f9:	call   QWORD PTR [rax]
 10279fb:	movzx  r12d,BYTE PTR [rsp+0x70]
 1027a01:	mov    rdi,QWORD PTR [rsp+0xd0]
 1027a09:	mov    r15,QWORD PTR [rsp+0x148]
 1027a11:	mov    rbx,QWORD PTR [rsp+0x110]
 1027a19:	nop    DWORD PTR [rax+0x0]
 1027a20:	mov    QWORD PTR [rsp+0x550],rdi
 1027a28:	mov    BYTE PTR [rsp+0x20],r12b
 1027a2d:	mov    r9b,0x1
 1027a30:	or     r8d,0xffffffff
 1027a34:	mov    edx,DWORD PTR [r14+0x30]
 1027a38:	mov    rcx,rdi
 1027a3b:	call   0x1032900
 1027a40:	cmp    eax,0xc0
 1027a45:	jne    0x1027a49
 1027a47:	jmp    0x1027a20
 1027a49:	test   r12b,r12b
 1027a4c:	je     0x1027a91
 1027a4e:	mov    DWORD PTR [rip+0x3bfdc],esi        # 0x1063a30
 1027a54:	mov    r8d,r13d
 1027a57:	lock xadd DWORD PTR [rip+0x3bfd0],r8d        # 0x1063a30
 1027a60:	inc    r8d
 1027a63:	xor    edx,edx
 1027a65:	lea    ecx,[rdx+0x3]
 1027a68:	mov    r9d,0x1d4c0
 1027a6e:	call   0x102dc00
 1027a73:	movzx  r12d,BYTE PTR [rsp+0x70]
 1027a79:	mov    rdi,QWORD PTR [rsp+0xd0]
 1027a81:	mov    r15,QWORD PTR [rsp+0x148]
 1027a89:	mov    rbx,QWORD PTR [rsp+0x110]
 1027a91:	mov    rax,QWORD PTR [r14]
 1027a94:	mov    BYTE PTR [rsp+0x28],0x1
 1027a99:	mov    BYTE PTR [rsp+0x20],0x1
 1027a9e:	mov    r9d,r13d
 1027aa1:	xor    r8d,r8d
 1027aa4:	mov    edx,0x4000c3b1
 1027aa9:	mov    rcx,r14
 1027aac:	call   QWORD PTR [rax]
 1027aae:	mov    rcx,r14
 1027ab1:	call   0x102c560
 1027ab6:	call   0x1035f60
 1027abb:	test   r12b,r12b
 1027abe:	je     0x1027b20
 1027ac0:	mov    r8d,r13d
 1027ac3:	lock xadd DWORD PTR [rip+0x3bf64],r8d        # 0x1063a30
 1027acc:	inc    r8d
 1027acf:	xor    edx,edx
 1027ad1:	lea    ecx,[rdx+0x3]
 1027ad4:	mov    r9d,0x1d4c0
 1027ada:	call   0x102dc00
 1027adf:	mov    r8d,r13d
 1027ae2:	lock xadd DWORD PTR [rip+0x3bf45],r8d        # 0x1063a30
 1027aeb:	inc    r8d
 1027aee:	xor    edx,edx
 1027af0:	lea    ecx,[rdx+0x3]
 1027af3:	mov    r9d,0x1d4c0
 1027af9:	call   0x102dc00
 1027afe:	movzx  r12d,BYTE PTR [rsp+0x70]
 1027b04:	mov    rdi,QWORD PTR [rsp+0xd0]
 1027b0c:	mov    r15,QWORD PTR [rsp+0x148]
 1027b14:	mov    rbx,QWORD PTR [rsp+0x110]
 1027b1c:	nop    DWORD PTR [rax+0x0]
 1027b20:	mov    rsi,QWORD PTR [r14+0x8]
 1027b24:	test   rsi,rsi
 1027b27:	je     0x1027b56
 1027b29:	mov    r13,QWORD PTR [rsi+0xc8]
 1027b30:	mov    QWORD PTR [rsp+0x560],r13
 1027b38:	mov    QWORD PTR [rsp+0x570],rsi
 1027b40:	mov    rcx,rsi
 1027b43:	call   0x1014bf0
 1027b48:	mov    rcx,rsi
 1027b4b:	call   0x103f95a
 1027b50:	mov    QWORD PTR [r14+0x8],r13
 1027b54:	jmp    0x1027b20
 1027b56:	mov    r13d,0x1
 1027b5c:	test   r12b,r12b
 1027b5f:	je     0x1027b9e
 1027b61:	mov    r8d,r13d
 1027b64:	lock xadd DWORD PTR [rip+0x3bec3],r8d        # 0x1063a30
 1027b6d:	inc    r8d
 1027b70:	xor    edx,edx
 1027b72:	lea    ecx,[rdx+0x3]
 1027b75:	mov    r9d,0x1d4c0
 1027b7b:	call   0x102dc00
 1027b80:	movzx  r12d,BYTE PTR [rsp+0x70]
 1027b86:	mov    rdi,QWORD PTR [rsp+0xd0]
 1027b8e:	mov    r15,QWORD PTR [rsp+0x148]
 1027b96:	mov    rbx,QWORD PTR [rsp+0x110]
 1027b9e:	mov    rax,QWORD PTR [r14]
 1027ba1:	mov    rcx,r14
 1027ba4:	call   QWORD PTR [rax+0x70]
 1027ba7:	lea    rcx,[r14+0x20]
 1027bab:	call   0x1034510
 1027bb0:	test   r15,r15
 1027bb3:	je     0x1027f12
 1027bb9:	mov    BYTE PTR [r15+0x2],0x0
 1027bbe:	mov    DWORD PTR [rsp+0xf0],0x0
 1027bc9:	mov    BYTE PTR [r15],0x1
 1027bcd:	test   rbx,rbx
 1027bd0:	je     0x1027c59
 1027bd6:	xor    edx,edx
 1027bd8:	mov    rcx,rbx
 1027bdb:	call   QWORD PTR [rip+0xfffffffffffd96ff]        # 0x10012e0
 1027be1:	mov    r11,QWORD PTR [r14]
 1027be4:	mov    BYTE PTR [rsp+0x28],0x1
 1027be9:	mov    BYTE PTR [rsp+0x20],0x1
 1027bee:	xor    r9d,r9d
 1027bf1:	xor    r8d,r8d
 1027bf4:	mov    edx,0x4000c3b4
 1027bf9:	mov    rcx,r14
 1027bfc:	call   QWORD PTR [r11]
 1027bff:	lea    rax,[rip+0xfffffffffffda20a]        # 0x1001e10
 1027c06:	mov    QWORD PTR [rsp+0x30],rax
 1027c0b:	mov    DWORD PTR [rsp+0x28],0x3
 1027c13:	mov    BYTE PTR [rsp+0x20],r12b
 1027c18:	xor    r9d,r9d
 1027c1b:	or     r8d,0xffffffff
 1027c1f:	mov    rdx,rbx
 1027c22:	mov    rcx,r14
 1027c25:	call   0x102b6c0
 1027c2a:	mov    r11,QWORD PTR [r14]
 1027c2d:	mov    BYTE PTR [rsp+0x28],0x1
 1027c32:	mov    BYTE PTR [rsp+0x20],0x1
 1027c37:	xor    r9d,r9d
 1027c3a:	xor    r8d,r8d
 1027c3d:	mov    edx,0xc3b5
 1027c42:	mov    rcx,r14
 1027c45:	call   QWORD PTR [r11]
 1027c48:	lea    rdx,[rsp+0xf0]
 1027c50:	mov    rcx,rbx
 1027c53:	call   QWORD PTR [rip+0xfffffffffffd9697]        # 0x10012f0
 1027c59:	cmp    DWORD PTR [r14+0xd8],0x2
 1027c61:	jne    0x1027ca0
 1027c63:	mov    r8d,r13d
 1027c66:	lock xadd DWORD PTR [rip+0x3bdc1],r8d        # 0x1063a30
 1027c6f:	inc    r8d
 1027c72:	xor    edx,edx
 1027c74:	lea    ecx,[rdx+0x3]
 1027c77:	mov    r9d,0x1d4c0
 1027c7d:	call   0x102dc00
 1027c82:	movzx  r12d,BYTE PTR [rsp+0x70]
 1027c88:	mov    rdi,QWORD PTR [rsp+0xd0]
 1027c90:	mov    r15,QWORD PTR [rsp+0x148]
 1027c98:	mov    rbx,QWORD PTR [rsp+0x110]
 1027ca0:	mov    rcx,r15
 1027ca3:	call   0x10141b0
 1027ca8:	mov    rcx,r15
 1027cab:	call   0x103f95a
 1027cb0:	lea    rcx,[rsp+0x1a8]
 1027cb8:	call   QWORD PTR [rip+0xfffffffffffd9e02]        # 0x1001ac0
 1027cbe:	nop
 1027cbf:	lea    rcx,[r14+0xe8]
 1027cc6:	lea    r8,[rsp+0x1a8]
 1027cce:	lea    rdx,[rip+0xfffffffffffdebeb]        # 0x10068c0
 1027cd5:	call   0x1023ce0
 1027cda:	test   eax,eax
 1027cdc:	je     0x1027d0b
 1027cde:	lea    rcx,[rsp+0x1a8]
 1027ce6:	call   QWORD PTR [rip+0xfffffffffffd9dfc]        # 0x1001ae8
 1027cec:	mov    rsi,rax
 1027cef:	lea    rcx,[rsp+0x150]
 1027cf7:	call   QWORD PTR [rip+0xfffffffffffd9deb]        # 0x1001ae8
 1027cfd:	mov    rdx,rax
 1027d00:	mov    r8,rsi
 1027d03:	mov    rcx,r14
 1027d06:	call   0x1028c40
 1027d0b:	test   rbx,rbx
 1027d0e:	je     0x1027eff
 1027d14:	cmp    DWORD PTR [rsp+0xf0],0x0
 1027d1c:	je     0x1027eff
 1027d22:	mov    esi,0x4e
 1027d27:	mov    WORD PTR [rsp+0x88],si
 1027d2f:	lea    rcx,[rsp+0x108]
 1027d37:	call   QWORD PTR [rip+0xfffffffffffd9d83]        # 0x1001ac0
 1027d3d:	nop
 1027d3e:	cmp    BYTE PTR [r14+0xbb],0x0
 1027d46:	jne    0x1027e46
 1027d4c:	cmp    BYTE PTR [r14+0xb8],0x0
 1027d54:	jne    0x1027e46
 1027d5a:	mov    edx,0x4000c3b6
 1027d5f:	lea    rcx,[rsp+0x340]
 1027d67:	call   0x10132d0
 1027d6c:	nop
 1027d6d:	mov    rcx,rax
 1027d70:	call   QWORD PTR [rip+0xfffffffffffd9d72]        # 0x1001ae8
 1027d76:	mov    rdx,rax
 1027d79:	lea    r15,[rip+0xfffffffffffda178]        # 0x1001ef8
 1027d80:	mov    QWORD PTR [rsp+0x28],r15
 1027d85:	mov    rax,QWORD PTR [r14+0x78]
 1027d89:	mov    QWORD PTR [rsp+0x20],rax
 1027d8e:	mov    r9,QWORD PTR [rsp+0x150]
 1027d96:	mov    r8,rax
 1027d99:	lea    rcx,[rsp+0x108]
 1027da1:	call   QWORD PTR [rip+0xfffffffffffd9c99]        # 0x1001a40
 1027da7:	nop
 1027da8:	lea    rcx,[rsp+0x340]
 1027db0:	call   QWORD PTR [rip+0xfffffffffffd9cf2]        # 0x1001aa8
 1027db6:	lea    rcx,[rsp+0x108]
 1027dbe:	call   QWORD PTR [rip+0xfffffffffffd9d24]        # 0x1001ae8
 1027dc4:	mov    rdx,rax
 1027dc7:	lea    rcx,[rip+0xfffffffffffdb59a]        # 0x1003368
 1027dce:	call   QWORD PTR [rip+0xfffffffffffd999c]        # 0x1001770
 1027dd4:	call   QWORD PTR [rip+0xfffffffffffd998e]        # 0x1001768
 1027dda:	lea    rcx,[rax+0x30]
 1027dde:	call   QWORD PTR [rip+0xfffffffffffd9994]        # 0x1001778
 1027de4:	call   QWORD PTR [rip+0xfffffffffffd997e]        # 0x1001768
 1027dea:	mov    rcx,rax
 1027ded:	call   QWORD PTR [rip+0xfffffffffffd9985]        # 0x1001778
 1027df3:	mov    r8d,r13d
 1027df6:	lea    rdx,[rsp+0x88]
 1027dfe:	lea    rcx,[rip+0xfffffffffffdc443]        # 0x1004248
 1027e05:	call   QWORD PTR [rip+0xfffffffffffd99bd]        # 0x10017c8
 1027e0b:	test   eax,eax
 1027e0d:	jne    0x1027e19
 1027e0f:	mov    WORD PTR [rsp+0x88],si
 1027e17:	jmp    0x1027e21
 1027e19:	movzx  esi,WORD PTR [rsp+0x88]
 1027e21:	movzx  ecx,si
 1027e24:	call   QWORD PTR [rip+0xfffffffffffd9956]        # 0x1001780
 1027e2a:	test   eax,eax
 1027e2c:	je     0x1027e4d
 1027e2e:	movzx  ecx,WORD PTR [rsp+0x88]
 1027e36:	call   QWORD PTR [rip+0xfffffffffffd9954]        # 0x1001790
 1027e3c:	mov    WORD PTR [rsp+0x88],ax
 1027e44:	jmp    0x1027e4d
 1027e46:	lea    r15,[rip+0xfffffffffffda0ab]        # 0x1001ef8
 1027e4d:	mov    eax,0x59
 1027e52:	cmp    ax,WORD PTR [rsp+0x88]
 1027e5a:	jne    0x1027ef0
 1027e60:	mov    r9,r15
 1027e63:	mov    r8,QWORD PTR [r14+0x78]
 1027e67:	lea    rdx,[rip+0xfffffffffffdea6a]        # 0x10068d8
 1027e6e:	lea    rcx,[rsp+0x108]
 1027e76:	call   QWORD PTR [rip+0xfffffffffffd9bc4]        # 0x1001a40
 1027e7c:	lea    rcx,[r14+0x88]
 1027e83:	call   QWORD PTR [rip+0xfffffffffffd9c5f]        # 0x1001ae8
 1027e89:	mov    r15,rax
 1027e8c:	lea    rcx,[rsp+0x108]
 1027e94:	call   QWORD PTR [rip+0xfffffffffffd9c4e]        # 0x1001ae8
 1027e9a:	mov    rsi,rax
 1027e9d:	lea    rcx,[r14+0x80]
 1027ea4:	call   QWORD PTR [rip+0xfffffffffffd9c3e]        # 0x1001ae8
 1027eaa:	mov    rdx,rax
 1027ead:	lea    rcx,[r14+0x158]
 1027eb4:	mov    BYTE PTR [rsp+0x48],0x0
 1027eb9:	mov    r8,QWORD PTR [r14+0x20]
 1027ebd:	mov    QWORD PTR [rsp+0x40],r8
 1027ec2:	mov    DWORD PTR [rsp+0x38],0x20
 1027eca:	lea    rax,[rsp+0x610]
 1027ed2:	mov    QWORD PTR [rsp+0x30],rax
 1027ed7:	mov    DWORD PTR [rsp+0x28],0x0
 1027edf:	mov    BYTE PTR [rsp+0x20],0x1
 1027ee4:	mov    r9,r15
 1027ee7:	mov    r8,rsi
 1027eea:	call   0x1031100
 1027eef:	nop
 1027ef0:	lea    rcx,[rsp+0x108]
 1027ef8:	call   QWORD PTR [rip+0xfffffffffffd9baa]        # 0x1001aa8
 1027efe:	nop
 1027eff:	lea    rcx,[rsp+0x1a8]
 1027f07:	call   QWORD PTR [rip+0xfffffffffffd9b9b]        # 0x1001aa8
 1027f0d:	jmp    0x1027fba
 1027f12:	cmp    DWORD PTR [r14+0xd0],0x1
 1027f1a:	jne    0x1027fba
 1027f20:	lock inc DWORD PTR [rsp+0x2a8]
 1027f28:	xor    edx,edx
 1027f2a:	mov    rsi,QWORD PTR [rsp+0x180]
 1027f32:	mov    rcx,rsi
 1027f35:	call   QWORD PTR [rip+0xfffffffffffd93a5]        # 0x10012e0
 1027f3b:	mov    r11,QWORD PTR [r14]
 1027f3e:	mov    BYTE PTR [rsp+0x28],0x1
 1027f43:	mov    BYTE PTR [rsp+0x20],0x1
 1027f48:	xor    r9d,r9d
 1027f4b:	xor    r8d,r8d
 1027f4e:	mov    edx,0x4000c3b4
 1027f53:	mov    rcx,r14
 1027f56:	call   QWORD PTR [r11]
 1027f59:	lea    r15,[rip+0xfffffffffffd9eb0]        # 0x1001e10
 1027f60:	mov    QWORD PTR [rsp+0x30],r15
 1027f65:	mov    DWORD PTR [rsp+0x28],0x3
 1027f6d:	movzx  r12d,BYTE PTR [rsp+0x70]
 1027f73:	mov    BYTE PTR [rsp+0x20],r12b
 1027f78:	mov    r9b,0x1
 1027f7b:	or     r8d,0xffffffff
 1027f7f:	mov    rdx,rsi
 1027f82:	mov    rcx,r14
 1027f85:	call   0x102b6c0
 1027f8a:	mov    r11,QWORD PTR [r14]
 1027f8d:	mov    BYTE PTR [rsp+0x28],0x1
 1027f92:	mov    BYTE PTR [rsp+0x20],0x1
 1027f97:	xor    r9d,r9d
 1027f9a:	xor    r8d,r8d
 1027f9d:	mov    edx,0xc3b5
 1027fa2:	mov    rcx,r14
 1027fa5:	call   QWORD PTR [r11]
 1027fa8:	mov    rdi,QWORD PTR [rsp+0xd0]
 1027fb0:	mov    rbx,QWORD PTR [rsp+0x110]
 1027fb8:	jmp    0x1027fc1
 1027fba:	lea    r15,[rip+0xfffffffffffd9e4f]        # 0x1001e10
 1027fc1:	mov    rcx,QWORD PTR [rsp+0x280]
 1027fc9:	test   rcx,rcx
 1027fcc:	je     0x1027fd6
 1027fce:	mov    rax,QWORD PTR [rcx]
 1027fd1:	mov    edx,r13d
 1027fd4:	call   QWORD PTR [rax]
 1027fd6:	mov    rax,QWORD PTR [r14]
 1027fd9:	mov    BYTE PTR [rsp+0x28],0x1
 1027fde:	mov    BYTE PTR [rsp+0x20],0x1
 1027fe3:	xor    r9d,r9d
 1027fe6:	xor    r8d,r8d
 1027fe9:	mov    edx,0xc3b7
 1027fee:	mov    rcx,r14
 1027ff1:	call   QWORD PTR [rax]
 1027ff3:	call   0x10361c0
 1027ff8:	test   r12b,r12b
 1027ffb:	je     0x102800b
 1027ffd:	mov    rcx,QWORD PTR [rip+0x3b434]        # 0x1063438
 1028004:	call   QWORD PTR [rip+0xfffffffffffd931e]        # 0x1001328
 102800a:	nop
 102800b:	lea    rcx,[rsp+0x150]
 1028013:	call   QWORD PTR [rip+0xfffffffffffd9a8f]        # 0x1001aa8
 1028019:	nop
 102801a:	mov    rsi,QWORD PTR [rsp+0x180]
 1028022:	test   rsi,rsi
 1028025:	je     0x102803a
 1028027:	mov    rcx,rsi
 102802a:	call   QWORD PTR [rip+0xfffffffffffd94a8]        # 0x10014d8
 1028030:	xor    esi,esi
 1028032:	mov    QWORD PTR [rsp+0x180],rsi
 102803a:	lea    rcx,[rsp+0x298]
 1028042:	call   QWORD PTR [rip+0xfffffffffffd9a60]        # 0x1001aa8
 1028048:	nop
 1028049:	lea    rcx,[rsp+0x290]
 1028051:	call   QWORD PTR [rip+0xfffffffffffd9a51]        # 0x1001aa8
 1028057:	nop
 1028058:	test   rbx,rbx
 102805b:	je     0x102806e
 102805d:	mov    rcx,rbx
 1028060:	call   QWORD PTR [rip+0xfffffffffffd9472]        # 0x10014d8
 1028066:	mov    QWORD PTR [rsp+0x110],rsi
 102806e:	lea    rcx,[rsp+0x190]
 1028076:	call   QWORD PTR [rip+0xfffffffffffd9a2c]        # 0x1001aa8
 102807c:	nop
 102807d:	test   rdi,rdi
 1028080:	je     0x1028093
 1028082:	mov    rcx,rdi
 1028085:	call   QWORD PTR [rip+0xfffffffffffd944d]        # 0x10014d8
 102808b:	mov    QWORD PTR [rsp+0xd0],rsi
 1028093:	lea    rax,[rip+0xfffffffffffde7f6]        # 0x1006890
 102809a:	mov    QWORD PTR [rsp+0x200],rax
 10280a2:	lea    rcx,[rsp+0x200]
 10280aa:	call   0x102f5a0
 10280af:	nop
 10280b0:	lea    rcx,[rsp+0xb0]
 10280b8:	call   QWORD PTR [rip+0xfffffffffffd99ea]        # 0x1001aa8
 10280be:	nop
 10280bf:	lea    rcx,[rsp+0xe8]
 10280c7:	call   QWORD PTR [rip+0xfffffffffffd99db]        # 0x1001aa8
 10280cd:	nop
 10280ce:	lea    rcx,[rsp+0x2b0]
 10280d6:	call   0x100c4f0
 10280db:	nop
 10280dc:	lea    rcx,[rsp+0x238]
 10280e4:	call   0x100c4f0
 10280e9:	nop
 10280ea:	lea    rcx,[rsp+0xe0]
 10280f2:	call   QWORD PTR [rip+0xfffffffffffd99b0]        # 0x1001aa8
 10280f8:	nop
 10280f9:	lea    rcx,[rsp+0xd8]
 1028101:	call   QWORD PTR [rip+0xfffffffffffd99a1]        # 0x1001aa8
 1028107:	nop
 1028108:	lea    rcx,[rsp+0x90]
 1028110:	call   QWORD PTR [rip+0xfffffffffffd9992]        # 0x1001aa8
 1028116:	nop
 1028117:	lea    rcx,[rsp+0xc0]
 102811f:	call   QWORD PTR [rip+0xfffffffffffd9983]        # 0x1001aa8
 1028125:	nop
 1028126:	lea    rcx,[rsp+0xc8]
 102812e:	call   QWORD PTR [rip+0xfffffffffffd9974]        # 0x1001aa8
 1028134:	nop
 1028135:	mov    rcx,QWORD PTR [rsp+0xa0]
 102813d:	test   rcx,rcx
 1028140:	je     0x1028150
 1028142:	call   QWORD PTR [rip+0xfffffffffffd9390]        # 0x10014d8
 1028148:	mov    QWORD PTR [rsp+0xa0],rsi
 1028150:	mov    rcx,QWORD PTR [rsp+0xa8]
 1028158:	test   rcx,rcx
 102815b:	je     0x102816b
 102815d:	call   QWORD PTR [rip+0xfffffffffffd9375]        # 0x10014d8
 1028163:	mov    QWORD PTR [rsp+0xa8],rsi
 102816b:	lea    rcx,[r14+0x98]
 1028172:	mov    rdx,r15
 1028175:	call   QWORD PTR [rip+0xfffffffffffd991d]        # 0x1001a98
 102817b:	mov    rbx,QWORD PTR [rsp+0x178]
 1028183:	test   rbx,rbx
 1028186:	je     0x102819b
 1028188:	mov    rcx,rbx
 102818b:	call   QWORD PTR [rip+0xfffffffffffd91af]        # 0x1001340
 1028191:	mov    rcx,rbx
 1028194:	call   QWORD PTR [rip+0xfffffffffffd933e]        # 0x10014d8
 102819a:	nop
 102819b:	lea    rcx,[rsp+0x80]
 10281a3:	call   QWORD PTR [rip+0xfffffffffffd98ff]        # 0x1001aa8
 10281a9:	nop
 10281aa:	lea    rcx,[rsp+0x78]
 10281af:	call   QWORD PTR [rip+0xfffffffffffd98f3]        # 0x1001aa8
 10281b5:	mov    al,0x1
 10281b7:	jmp    0x1028270
 10281bc:	mov    rax,QWORD PTR [r14]
 10281bf:	mov    BYTE PTR [rsp+0x28],0x1
 10281c4:	mov    BYTE PTR [rsp+0x20],0x1
 10281c9:	mov    r9d,0x2
 10281cf:	xor    r8d,r8d
 10281d2:	mov    edx,0xc000c3ac
 10281d7:	mov    rcx,r14
 10281da:	call   QWORD PTR [rax]
 10281dc:	nop
 10281dd:	lea    rcx,[rsp+0x90]
 10281e5:	call   QWORD PTR [rip+0xfffffffffffd98bd]        # 0x1001aa8
 10281eb:	nop
 10281ec:	lea    rcx,[rsp+0xc0]
 10281f4:	call   QWORD PTR [rip+0xfffffffffffd98ae]        # 0x1001aa8
 10281fa:	nop
 10281fb:	lea    rcx,[rsp+0xc8]
 1028203:	call   QWORD PTR [rip+0xfffffffffffd989f]        # 0x1001aa8
 1028209:	nop
 102820a:	test   rdi,rdi
 102820d:	je     0x1028220
 102820f:	mov    rcx,rdi
 1028212:	call   QWORD PTR [rip+0xfffffffffffd92c0]        # 0x10014d8
 1028218:	mov    QWORD PTR [rsp+0xa0],r12
 1028220:	test   rbx,rbx
 1028223:	je     0x1028236
 1028225:	mov    rcx,rbx
 1028228:	call   QWORD PTR [rip+0xfffffffffffd92aa]        # 0x10014d8
 102822e:	mov    QWORD PTR [rsp+0xa8],r12
 1028236:	lea    rcx,[rsp+0x80]
 102823e:	call   QWORD PTR [rip+0xfffffffffffd9864]        # 0x1001aa8
 1028244:	nop
 1028245:	lea    rcx,[rsp+0x78]
 102824a:	call   QWORD PTR [rip+0xfffffffffffd9858]        # 0x1001aa8
 1028250:	xor    al,al
 1028252:	jmp    0x1028270
 1028254:	lea    rcx,[rsp+0x80]
 102825c:	call   QWORD PTR [rip+0xfffffffffffd9846]        # 0x1001aa8
 1028262:	nop
 1028263:	lea    rcx,[rsp+0x78]
 1028268:	call   QWORD PTR [rip+0xfffffffffffd983a]        # 0x1001aa8
 102826e:	xor    al,al
 1028270:	mov    rcx,QWORD PTR [rsp+0x1a90]
 1028278:	xor    rcx,rsp
 102827b:	call   0x103ff40
 1028280:	lea    r11,[rsp+0x1aa0]
 1028288:	mov    rbx,QWORD PTR [r11+0x38]
 102828c:	mov    rsi,QWORD PTR [r11+0x48]
 1028290:	mov    rsp,r11
 1028293:	pop    r15
 1028295:	pop    r14
 1028297:	pop    r13
 1028299:	pop    r12
 102829b:	pop    rdi
 102829c:	ret    
 102829d:	nop    DWORD PTR [rax]
 10282a0:	sub    ecx,DWORD PTR [rdx+rax*1+0x0]
 10282a4:	lahf   
 10282a5:	add    r8b,BYTE PTR [r8]
 10282a8:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 10282a9:	rex.WX add al,BYTE PTR [rax]
 10282ac:	(bad)  [rcx+0x2]
 10282af:	add    BYTE PTR [rip+0xffffffff91000244],cl        # 0xffffffff920284f9
 10282b5:	add    r8b,BYTE PTR [rax]
 10282b8:	sbb    BYTE PTR [rbp+0x2],al
 10282bb:	add    ah,cl
 10282bd:	int3   
 10282be:	int3   
 10282bf:	int3   
 10282c0:	int3   
 10282c1:	int3   
 10282c2:	int3   
 10282c3:	int3   
 10282c4:	int3   
 10282c5:	int3   
 10282c6:	int3   
 10282c7:	int3   
 10282c8:	int3   
 10282c9:	int3   
 10282ca:	int3   
 10282cb:	int3   
 10282cc:	int3   
 10282cd:	int3   
 10282ce:	int3   
 10282cf:	int3   
 10282d0:	rex push rdi
 10282d2:	sub    rsp,0x30
 10282d6:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 10282df:	mov    QWORD PTR [rsp+0x40],rbx
 10282e4:	mov    QWORD PTR [rsp+0x50],rsi
 10282e9:	mov    DWORD PTR [rip+0x3b631],0x2        # 0x1063924
 10282f3:	xor    edi,edi
 10282f5:	mov    rbx,QWORD PTR [rip+0x3b744]        # 0x1063a40
 10282fc:	test   rbx,rbx
 10282ff:	jne    0x102832e
 1028301:	mov    ecx,0x190
 1028306:	call   0x103f9d2
 102830b:	mov    QWORD PTR [rsp+0x48],rax
 1028310:	test   rax,rax
 1028313:	je     0x1028324
 1028315:	mov    dl,0x1
 1028317:	mov    rcx,rax
 102831a:	call   0x1028390
 102831f:	mov    rbx,rax
 1028322:	jmp    0x1028327
 1028324:	mov    rbx,rdi
 1028327:	mov    QWORD PTR [rip+0x3b712],rbx        # 0x1063a40
 102832e:	cmp    DWORD PTR [rbx+0x30],0x0
 1028332:	jbe    0x1028363
 1028334:	mov    rsi,rdi
 1028337:	nop    WORD PTR [rax+rax*1+0x0]
 1028340:	mov    rdx,QWORD PTR [rbx+0x28]
 1028344:	xor    r8d,r8d
 1028347:	mov    rdx,QWORD PTR [rsi+rdx*1]
 102834b:	lea    rcx,[rip+0x2e]        # 0x1028380
 1028352:	call   QWORD PTR [rip+0xfffffffffffd8fb8]        # 0x1001310
 1028358:	inc    edi
 102835a:	add    rsi,0x8
 102835e:	cmp    edi,DWORD PTR [rbx+0x30]
 1028361:	jb     0x1028340
 1028363:	mov    rbx,QWORD PTR [rsp+0x40]
 1028368:	mov    rsi,QWORD PTR [rsp+0x50]
 102836d:	add    rsp,0x30
 1028371:	pop    rdi
 1028372:	ret    
 1028373:	int3   
 1028374:	int3   
 1028375:	int3   
 1028376:	int3   
 1028377:	int3   
 1028378:	int3   
 1028379:	int3   
 102837a:	int3   
 102837b:	int3   
 102837c:	int3   
 102837d:	int3   
 102837e:	int3   
 102837f:	int3   
 1028380:	ret    0x0
 1028383:	int3   
 1028384:	int3   
 1028385:	int3   
 1028386:	int3   
 1028387:	int3   
 1028388:	int3   
 1028389:	int3   
 102838a:	int3   
 102838b:	int3   
 102838c:	int3   
 102838d:	int3   
 102838e:	int3   
 102838f:	int3   
 1028390:	mov    rax,rsp
 1028393:	mov    QWORD PTR [rax+0x8],rcx
 1028397:	push   rdi
 1028398:	push   r12
 102839a:	push   r13
 102839c:	push   r14
 102839e:	push   r15
 10283a0:	sub    rsp,0x50
 10283a4:	mov    QWORD PTR [rax-0x38],0xfffffffffffffffe
 10283ac:	mov    QWORD PTR [rax+0x10],rbx
 10283b0:	mov    QWORD PTR [rax+0x18],rbp
 10283b4:	mov    QWORD PTR [rax+0x20],rsi
 10283b8:	movzx  r13d,dl
 10283bc:	mov    rsi,rcx
 10283bf:	lea    rax,[rip+0xfffffffffffdc2b2]        # 0x1004678
 10283c6:	mov    QWORD PTR [rcx],rax
 10283c9:	add    rcx,0x60
 10283cd:	call   QWORD PTR [rip+0xfffffffffffd96ed]        # 0x1001ac0
 10283d3:	nop
 10283d4:	lea    rcx,[rsi+0x68]
 10283d8:	call   QWORD PTR [rip+0xfffffffffffd96e2]        # 0x1001ac0
 10283de:	nop
 10283df:	lea    rcx,[rsi+0x70]
 10283e3:	call   QWORD PTR [rip+0xfffffffffffd96d7]        # 0x1001ac0
 10283e9:	nop
 10283ea:	lea    rcx,[rsi+0x78]
 10283ee:	call   QWORD PTR [rip+0xfffffffffffd96cc]        # 0x1001ac0
 10283f4:	nop
 10283f5:	lea    rcx,[rsi+0x80]
 10283fc:	call   QWORD PTR [rip+0xfffffffffffd96be]        # 0x1001ac0
 1028402:	nop
 1028403:	lea    rcx,[rsi+0x88]
 102840a:	call   QWORD PTR [rip+0xfffffffffffd96b0]        # 0x1001ac0
 1028410:	nop
 1028411:	lea    r12,[rsi+0x90]
 1028418:	mov    rcx,r12
 102841b:	call   QWORD PTR [rip+0xfffffffffffd969f]        # 0x1001ac0
 1028421:	nop
 1028422:	lea    r15,[rsi+0x98]
 1028429:	mov    rcx,r15
 102842c:	call   QWORD PTR [rip+0xfffffffffffd968e]        # 0x1001ac0
 1028432:	nop
 1028433:	lea    rbp,[rsi+0xa0]
 102843a:	mov    rcx,rbp
 102843d:	call   QWORD PTR [rip+0xfffffffffffd967d]        # 0x1001ac0
 1028443:	nop
 1028444:	lea    rdi,[rsi+0xa8]
 102844b:	mov    rcx,rdi
 102844e:	call   QWORD PTR [rip+0xfffffffffffd966c]        # 0x1001ac0
 1028454:	nop
 1028455:	lea    r14,[rsi+0xb0]
 102845c:	mov    rcx,r14
 102845f:	call   QWORD PTR [rip+0xfffffffffffd965b]        # 0x1001ac0
 1028465:	nop
 1028466:	lea    rbx,[rsi+0xc0]
 102846d:	mov    rcx,rbx
 1028470:	call   QWORD PTR [rip+0xfffffffffffd964a]        # 0x1001ac0
 1028476:	nop
 1028477:	lea    rcx,[rsi+0xc8]
 102847e:	call   QWORD PTR [rip+0xfffffffffffd963c]        # 0x1001ac0
 1028484:	nop
 1028485:	lea    rax,[rip+0xfffffffffffda5b4]        # 0x1002a40
 102848c:	mov    QWORD PTR [rsi+0xe8],rax
 1028493:	xor    ecx,ecx
 1028495:	mov    QWORD PTR [rsi+0xf0],rcx
 102849c:	mov    DWORD PTR [rsi+0xf8],0x11
 10284a6:	mov    QWORD PTR [rsi+0x100],rcx
 10284ad:	mov    QWORD PTR [rsi+0x108],rcx
 10284b4:	mov    QWORD PTR [rsi+0x110],rcx
 10284bb:	mov    QWORD PTR [rsi+0x118],0xa
 10284c6:	mov    QWORD PTR [rsi+0x120],rax
 10284cd:	mov    QWORD PTR [rsi+0x128],rcx
 10284d4:	mov    DWORD PTR [rsi+0x130],0x11
 10284de:	mov    QWORD PTR [rsi+0x138],rcx
 10284e5:	mov    QWORD PTR [rsi+0x140],rcx
 10284ec:	mov    QWORD PTR [rsi+0x148],rcx
 10284f3:	mov    QWORD PTR [rsi+0x150],0xa
 10284fe:	add    rsi,0x158
 1028505:	lea    rax,[rip+0xfffffffffffdc13c]        # 0x1004648
 102850c:	mov    QWORD PTR [rsi],rax
 102850f:	mov    QWORD PTR [rsi+0x18],rcx
 1028513:	mov    QWORD PTR [rsi+0x20],rcx
 1028517:	mov    QWORD PTR [rsi+0x10],rcx
 102851b:	mov    QWORD PTR [rsi+0x8],rcx
 102851f:	mov    QWORD PTR [rsi+0x28],rcx
 1028523:	mov    QWORD PTR [rsi+0x30],0xa
 102852b:	mov    rax,QWORD PTR [rsp+0x80]
 1028533:	mov    BYTE PTR [rax+0xb8],cl
 1028539:	mov    QWORD PTR [rax+0x18],0xffffffffffffffff
 1028541:	mov    QWORD PTR [rax+0x20],0xffffffffffffffff
 1028549:	xor    r9d,r9d
 102854c:	xor    r8d,r8d
 102854f:	lea    edx,[rcx+0x1]
 1028552:	call   QWORD PTR [rip+0xfffffffffffd8e50]        # 0x10013a8
 1028558:	mov    QWORD PTR [rip+0x3aed9],rax        # 0x1063438
 102855f:	mov    rcx,QWORD PTR [rsp+0x80]
 1028567:	mov    DWORD PTR [rcx+0xb9],0x100
 1028571:	mov    DWORD PTR [rcx+0xd0],0x0
 102857b:	mov    WORD PTR [rcx+0xdc],0x0
 1028584:	mov    DWORD PTR [rcx+0xd4],0x1
 102858e:	neg    r13b
 1028591:	sbb    eax,eax
 1028593:	and    eax,0x2
 1028596:	mov    DWORD PTR [rcx+0xd8],eax
 102859c:	xor    r13d,r13d
 102859f:	mov    QWORD PTR [rcx+0x28],r13
 10285a3:	mov    DWORD PTR [rcx+0x30],r13d
 10285a7:	mov    BYTE PTR [rcx+0xbd],r13b
 10285ae:	lea    rdx,[rip+0xfffffffffffd985b]        # 0x1001e10
 10285b5:	mov    rcx,rbp
 10285b8:	call   QWORD PTR [rip+0xfffffffffffd94da]        # 0x1001a98
 10285be:	lea    rdx,[rip+0xfffffffffffd984b]        # 0x1001e10
 10285c5:	mov    rcx,rdi
 10285c8:	call   QWORD PTR [rip+0xfffffffffffd94ca]        # 0x1001a98
 10285ce:	lea    rdx,[rip+0xfffffffffffd983b]        # 0x1001e10
 10285d5:	mov    rcx,r15
 10285d8:	call   QWORD PTR [rip+0xfffffffffffd94ba]        # 0x1001a98
 10285de:	lea    rdx,[rip+0xfffffffffffd982b]        # 0x1001e10
 10285e5:	mov    rcx,r12
 10285e8:	call   QWORD PTR [rip+0xfffffffffffd94aa]        # 0x1001a98
 10285ee:	lea    rdx,[rip+0xfffffffffffd981b]        # 0x1001e10
 10285f5:	mov    rcx,rbx
 10285f8:	call   QWORD PTR [rip+0xfffffffffffd949a]        # 0x1001a98
 10285fe:	lea    rdx,[rip+0xfffffffffffd980b]        # 0x1001e10
 1028605:	mov    rcx,r14
 1028608:	call   QWORD PTR [rip+0xfffffffffffd948a]        # 0x1001a98
 102860e:	mov    r14,QWORD PTR [rsp+0x80]
 1028616:	mov    DWORD PTR [r14+0xe0],0x3e7
 1028621:	mov    DWORD PTR [r14+0xe4],0x3e7
 102862c:	mov    QWORD PTR [r14+0x8],r13
 1028630:	mov    QWORD PTR [r14+0x10],r13
 1028634:	call   QWORD PTR [rip+0xfffffffffffd8c76]        # 0x10012b0
 102863a:	mov    rdi,rax
 102863d:	call   QWORD PTR [rip+0xfffffffffffd8c8d]        # 0x10012d0
 1028643:	mov    rbx,rax
 1028646:	call   QWORD PTR [rip+0xfffffffffffd8c64]        # 0x10012b0
 102864c:	mov    rcx,rax
 102864f:	mov    DWORD PTR [rsp+0x30],0x2
 1028657:	mov    DWORD PTR [rsp+0x28],0x1
 102865f:	mov    DWORD PTR [rsp+0x20],r13d
 1028664:	lea    r9,[rip+0x3adc5]        # 0x1063430
 102866b:	mov    r8,rdi
 102866e:	mov    rdx,rbx
 1028671:	call   QWORD PTR [rip+0xfffffffffffd8ce9]        # 0x1001360
 1028677:	lea    rcx,[r14+0x38]
 102867b:	call   QWORD PTR [rip+0xfffffffffffd8c97]        # 0x1001318
 1028681:	mov    rcx,rsi
 1028684:	call   0x1034eb0
 1028689:	nop
 102868a:	mov    rax,r14
 102868d:	lea    r11,[rsp+0x50]
 1028692:	mov    rbx,QWORD PTR [r11+0x38]
 1028696:	mov    rbp,QWORD PTR [r11+0x40]
 102869a:	mov    rsi,QWORD PTR [r11+0x48]
 102869e:	mov    rsp,r11
 10286a1:	pop    r15
 10286a3:	pop    r14
 10286a5:	pop    r13
 10286a7:	pop    r12
 10286a9:	pop    rdi
 10286aa:	ret    
 10286ab:	int3   
 10286ac:	int3   
 10286ad:	int3   
 10286ae:	int3   
 10286af:	int3   
 10286b0:	int3   
 10286b1:	int3   
 10286b2:	int3   
 10286b3:	int3   
 10286b4:	int3   
 10286b5:	int3   
 10286b6:	int3   
 10286b7:	int3   
 10286b8:	int3   
 10286b9:	int3   
 10286ba:	int3   
 10286bb:	int3   
 10286bc:	int3   
 10286bd:	int3   
 10286be:	int3   
 10286bf:	int3   
 10286c0:	mov    QWORD PTR [rsp+0x10],rdx
 10286c5:	mov    QWORD PTR [rsp+0x8],rcx
 10286ca:	push   rdi
 10286cb:	sub    rsp,0x50
 10286cf:	mov    QWORD PTR [rsp+0x48],0xfffffffffffffffe
 10286d8:	mov    QWORD PTR [rsp+0x70],rbx
 10286dd:	mov    QWORD PTR [rsp+0x78],rsi
 10286e2:	mov    rbx,rdx
 10286e5:	mov    rdi,rcx
 10286e8:	mov    DWORD PTR [rsp+0x40],0x0
 10286f0:	lea    rdx,[rip+0xfffffffffffd9719]        # 0x1001e10
 10286f7:	mov    rcx,rbx
 10286fa:	call   QWORD PTR [rip+0xfffffffffffd93b0]        # 0x1001ab0
 1028700:	mov    DWORD PTR [rsp+0x40],0x1
 1028708:	cmp    BYTE PTR [rdi+0xb8],0x0
 102870f:	jne    0x10287af
 1028715:	lea    rcx,[rdi+0x38]
 1028719:	call   QWORD PTR [rip+0xfffffffffffd8b19]        # 0x1001238
 102871f:	nop
 1028720:	mov    rax,QWORD PTR [rdi]
 1028723:	mov    BYTE PTR [rsp+0x28],0x1
 1028728:	mov    BYTE PTR [rsp+0x20],0x0
 102872d:	mov    r9d,0x1
 1028733:	xor    r8d,r8d
 1028736:	mov    edx,0x4000c35f
 102873b:	mov    rcx,rdi
 102873e:	call   QWORD PTR [rax]
 1028740:	call   QWORD PTR [rip+0xfffffffffffd9022]        # 0x1001768
 1028746:	lea    rcx,[rax+0x30]
 102874a:	call   QWORD PTR [rip+0xfffffffffffd9028]        # 0x1001778
 1028750:	mov    esi,0xd
 1028755:	call   QWORD PTR [rip+0xfffffffffffd9055]        # 0x10017b0
 102875b:	cmp    si,ax
 102875e:	je     0x102876e
 1028760:	movzx  edx,ax
 1028763:	mov    rcx,rbx
 1028766:	call   QWORD PTR [rip+0xfffffffffffd91e4]        # 0x1001950
 102876c:	jmp    0x1028755
 102876e:	mov    rax,QWORD PTR [rdi]
 1028771:	mov    BYTE PTR [rsp+0x30],0x0
 1028776:	mov    BYTE PTR [rsp+0x28],0x1
 102877b:	mov    DWORD PTR [rsp+0x20],0x0
 1028783:	xor    r9d,r9d
 1028786:	lea    r8,[rip+0xfffffffffffdc62f]        # 0x1004dbc
 102878d:	mov    edx,0x4000c484
 1028792:	mov    rcx,rdi
 1028795:	call   QWORD PTR [rax+0x8]
 1028798:	nop
 1028799:	jmp    0x10287a5
 102879b:	mov    rdi,QWORD PTR [rsp+0x60]
 10287a0:	mov    rbx,QWORD PTR [rsp+0x68]
 10287a5:	lea    rcx,[rdi+0x38]
 10287a9:	call   QWORD PTR [rip+0xfffffffffffd8a91]        # 0x1001240
 10287af:	mov    rax,rbx
 10287b2:	mov    rbx,QWORD PTR [rsp+0x70]
 10287b7:	mov    rsi,QWORD PTR [rsp+0x78]
 10287bc:	add    rsp,0x50
 10287c0:	pop    rdi
 10287c1:	ret    
 10287c2:	int3   
 10287c3:	int3   
 10287c4:	int3   
 10287c5:	int3   
 10287c6:	int3   
 10287c7:	int3   
 10287c8:	int3   
 10287c9:	int3   
 10287ca:	int3   
 10287cb:	int3   
 10287cc:	int3   
 10287cd:	int3   
 10287ce:	int3   
 10287cf:	int3   
 10287d0:	mov    QWORD PTR [rsp+0x8],rbx
 10287d5:	push   rdi
 10287d6:	sub    rsp,0x20
 10287da:	mov    rdi,rcx
 10287dd:	mov    r8,rcx
 10287e0:	lea    rcx,[rip+0xfffffffffffdd591]        # 0x1005d78
 10287e7:	movzx  ebx,dl
 10287ea:	call   0x1030b10
 10287ef:	test   al,al
 10287f1:	je     0x1028858
 10287f3:	lea    rcx,[rip+0xfffffffffffdde1e]        # 0x1006618
 10287fa:	mov    r8,rdi
 10287fd:	movzx  edx,bl
 1028800:	call   0x1030b10
 1028805:	test   al,al
 1028807:	je     0x1028858
 1028809:	lea    rcx,[rip+0xfffffffffffdde20]        # 0x1006630
 1028810:	mov    r8,rdi
 1028813:	movzx  edx,bl
 1028816:	call   0x1030b10
 102881b:	test   al,al
 102881d:	je     0x1028858
 102881f:	lea    rcx,[rip+0xfffffffffffdde2a]        # 0x1006650
 1028826:	mov    r8,rdi
 1028829:	movzx  edx,bl
 102882c:	call   0x1030b10
 1028831:	test   al,al
 1028833:	je     0x1028858
 1028835:	lea    rcx,[rip+0xfffffffffffdde34]        # 0x1006670
 102883c:	mov    r8,rdi
 102883f:	movzx  edx,bl
 1028842:	call   0x1030b10
 1028847:	test   al,al
 1028849:	je     0x1028858
 102884b:	mov    al,0x1
 102884d:	mov    rbx,QWORD PTR [rsp+0x30]
 1028852:	add    rsp,0x20
 1028856:	pop    rdi
 1028857:	ret    
 1028858:	xor    al,al
 102885a:	mov    rbx,QWORD PTR [rsp+0x30]
 102885f:	add    rsp,0x20
 1028863:	pop    rdi
 1028864:	ret    
 1028865:	int3   
 1028866:	int3   
 1028867:	int3   
 1028868:	int3   
 1028869:	int3   
 102886a:	int3   
 102886b:	int3   
 102886c:	int3   
 102886d:	int3   
 102886e:	int3   
 102886f:	int3   
 1028870:	rex push rbx
 1028872:	push   rsi
 1028873:	push   rdi
 1028874:	sub    rsp,0x50
 1028878:	mov    QWORD PTR [rsp+0x40],0xfffffffffffffffe
 1028881:	mov    rdi,rdx
 1028884:	mov    rsi,rcx
 1028887:	lea    rcx,[rsp+0x70]
 102888c:	call   QWORD PTR [rip+0xfffffffffffd922e]        # 0x1001ac0
 1028892:	nop
 1028893:	lea    rdx,[rip+0xfffffffffffdda86]        # 0x1006320
 102889a:	lea    rcx,[rsp+0x88]
 10288a2:	call   0x1031c10
 10288a7:	mov    rbx,rax
 10288aa:	mov    edx,0x4000c461
 10288af:	lea    rcx,[rsp+0x80]
 10288b7:	call   0x10132d0
 10288bc:	nop
 10288bd:	mov    rcx,rax
 10288c0:	call   QWORD PTR [rip+0xfffffffffffd9222]        # 0x1001ae8
 10288c6:	mov    rdx,rax
 10288c9:	mov    r8,QWORD PTR [rbx]
 10288cc:	lea    rcx,[rsp+0x70]
 10288d1:	call   QWORD PTR [rip+0xfffffffffffd9169]        # 0x1001a40
 10288d7:	nop
 10288d8:	lea    rcx,[rsp+0x80]
 10288e0:	call   QWORD PTR [rip+0xfffffffffffd91c2]        # 0x1001aa8
 10288e6:	nop
 10288e7:	lea    rcx,[rsp+0x88]
 10288ef:	call   QWORD PTR [rip+0xfffffffffffd91b3]        # 0x1001aa8
 10288f5:	mov    rbx,QWORD PTR [rsi]
 10288f8:	lea    rcx,[rsp+0x70]
 10288fd:	call   QWORD PTR [rip+0xfffffffffffd91e5]        # 0x1001ae8
 1028903:	mov    r8,rax
 1028906:	mov    BYTE PTR [rsp+0x30],0x0
 102890b:	mov    BYTE PTR [rsp+0x28],0x1
 1028910:	mov    DWORD PTR [rsp+0x20],0x1
 1028918:	xor    r9d,r9d
 102891b:	mov    edx,0x4000c3fe
 1028920:	mov    rcx,rsi
 1028923:	call   QWORD PTR [rbx+0x8]
 1028926:	lea    rdx,[rip+0xfffffffffffdda43]        # 0x1006370
 102892d:	lea    rcx,[rsp+0x80]
 1028935:	call   0x1031c10
 102893a:	nop
 102893b:	mov    rbx,QWORD PTR [rsi]
 102893e:	mov    rcx,rax
 1028941:	call   QWORD PTR [rip+0xfffffffffffd91a1]        # 0x1001ae8
 1028947:	mov    r8,rax
 102894a:	mov    BYTE PTR [rsp+0x30],0x0
 102894f:	mov    BYTE PTR [rsp+0x28],0x1
 1028954:	mov    DWORD PTR [rsp+0x20],0x1
 102895c:	xor    r9d,r9d
 102895f:	mov    edx,0x4000c3fe
 1028964:	mov    rcx,rsi
 1028967:	call   QWORD PTR [rbx+0x8]
 102896a:	nop
 102896b:	lea    rcx,[rsp+0x80]
 1028973:	call   QWORD PTR [rip+0xfffffffffffd912f]        # 0x1001aa8
 1028979:	mov    edx,0x4000c385
 102897e:	lea    rcx,[rsp+0x80]
 1028986:	call   0x10132d0
 102898b:	nop
 102898c:	mov    rcx,rax
 102898f:	call   QWORD PTR [rip+0xfffffffffffd9153]        # 0x1001ae8
 1028995:	mov    rdx,rax
 1028998:	mov    r8,rdi
 102899b:	lea    rcx,[rsp+0x70]
 10289a0:	call   QWORD PTR [rip+0xfffffffffffd909a]        # 0x1001a40
 10289a6:	nop
 10289a7:	lea    rcx,[rsp+0x80]
 10289af:	call   QWORD PTR [rip+0xfffffffffffd90f3]        # 0x1001aa8
 10289b5:	mov    rbx,QWORD PTR [rsi]
 10289b8:	lea    rcx,[rsp+0x70]
 10289bd:	call   QWORD PTR [rip+0xfffffffffffd9125]        # 0x1001ae8
 10289c3:	mov    r8,rax
 10289c6:	mov    BYTE PTR [rsp+0x30],0x0
 10289cb:	mov    BYTE PTR [rsp+0x28],0x1
 10289d0:	mov    DWORD PTR [rsp+0x20],0x1
 10289d8:	xor    r9d,r9d
 10289db:	mov    edx,0x4000c385
 10289e0:	mov    rcx,rsi
 10289e3:	call   QWORD PTR [rbx+0x8]
 10289e6:	mov    edx,0x4000c456
 10289eb:	lea    rcx,[rsp+0x80]
 10289f3:	call   0x10132d0
 10289f8:	nop
 10289f9:	mov    rcx,rax
 10289fc:	call   QWORD PTR [rip+0xfffffffffffd90e6]        # 0x1001ae8
 1028a02:	mov    rdx,rax
 1028a05:	mov    QWORD PTR [rsp+0x20],rdi
 1028a0a:	mov    r9,rdi
 1028a0d:	mov    r8,rdi
 1028a10:	lea    rcx,[rsp+0x70]
 1028a15:	call   QWORD PTR [rip+0xfffffffffffd9025]        # 0x1001a40
 1028a1b:	nop
 1028a1c:	lea    rcx,[rsp+0x80]
 1028a24:	call   QWORD PTR [rip+0xfffffffffffd907e]        # 0x1001aa8
 1028a2a:	mov    rbx,QWORD PTR [rsi]
 1028a2d:	lea    rcx,[rsp+0x70]
 1028a32:	call   QWORD PTR [rip+0xfffffffffffd90b0]        # 0x1001ae8
 1028a38:	mov    r8,rax
 1028a3b:	mov    BYTE PTR [rsp+0x30],0x0
 1028a40:	mov    BYTE PTR [rsp+0x28],0x1
 1028a45:	mov    DWORD PTR [rsp+0x20],0x0
 1028a4d:	xor    r9d,r9d
 1028a50:	mov    edx,0x4000c387
 1028a55:	mov    rcx,rsi
 1028a58:	call   QWORD PTR [rbx+0x8]
 1028a5b:	mov    r11,QWORD PTR [rsi]
 1028a5e:	mov    BYTE PTR [rsp+0x28],0x0
 1028a63:	mov    BYTE PTR [rsp+0x20],0x1
 1028a68:	xor    r9d,r9d
 1028a6b:	xor    r8d,r8d
 1028a6e:	mov    edx,0x4000c462
 1028a73:	mov    rcx,rsi
 1028a76:	call   QWORD PTR [r11]
 1028a79:	mov    r11,QWORD PTR [rsi]
 1028a7c:	mov    BYTE PTR [rsp+0x28],0x0
 1028a81:	mov    BYTE PTR [rsp+0x20],0x1
 1028a86:	xor    r9d,r9d
 1028a89:	xor    r8d,r8d
 1028a8c:	mov    edx,0x4000c413
 1028a91:	mov    rcx,rsi
 1028a94:	call   QWORD PTR [r11]
 1028a97:	mov    r11,QWORD PTR [rsi]
 1028a9a:	mov    BYTE PTR [rsp+0x28],0x0
 1028a9f:	mov    BYTE PTR [rsp+0x20],0x1
 1028aa4:	xor    r9d,r9d
 1028aa7:	xor    r8d,r8d
 1028aaa:	mov    edx,0x4000c463
 1028aaf:	mov    rcx,rsi
 1028ab2:	call   QWORD PTR [r11]
 1028ab5:	mov    r11,QWORD PTR [rsi]
 1028ab8:	mov    BYTE PTR [rsp+0x28],0x0
 1028abd:	mov    BYTE PTR [rsp+0x20],0x1
 1028ac2:	xor    r9d,r9d
 1028ac5:	xor    r8d,r8d
 1028ac8:	mov    edx,0x4000c43d
 1028acd:	mov    rcx,rsi
 1028ad0:	call   QWORD PTR [r11]
 1028ad3:	mov    r11,QWORD PTR [rsi]
 1028ad6:	mov    BYTE PTR [rsp+0x28],0x0
 1028adb:	mov    BYTE PTR [rsp+0x20],0x1
 1028ae0:	xor    r9d,r9d
 1028ae3:	xor    r8d,r8d
 1028ae6:	mov    edx,0x4000c388
 1028aeb:	mov    rcx,rsi
 1028aee:	call   QWORD PTR [r11]
 1028af1:	mov    r11,QWORD PTR [rsi]
 1028af4:	mov    BYTE PTR [rsp+0x28],0x0
 1028af9:	mov    BYTE PTR [rsp+0x20],0x1
 1028afe:	xor    r9d,r9d
 1028b01:	xor    r8d,r8d
 1028b04:	mov    edx,0x4000c44f
 1028b09:	mov    rcx,rsi
 1028b0c:	call   QWORD PTR [r11]
 1028b0f:	mov    r11,QWORD PTR [rsi]
 1028b12:	mov    BYTE PTR [rsp+0x28],0x0
 1028b17:	mov    BYTE PTR [rsp+0x20],0x1
 1028b1c:	xor    r9d,r9d
 1028b1f:	xor    r8d,r8d
 1028b22:	mov    edx,0x4000c38e
 1028b27:	mov    rcx,rsi
 1028b2a:	call   QWORD PTR [r11]
 1028b2d:	mov    r11,QWORD PTR [rsi]
 1028b30:	mov    BYTE PTR [rsp+0x28],0x0
 1028b35:	mov    BYTE PTR [rsp+0x20],0x1
 1028b3a:	xor    r9d,r9d
 1028b3d:	xor    r8d,r8d
 1028b40:	mov    edx,0x4000c389
 1028b45:	mov    rcx,rsi
 1028b48:	call   QWORD PTR [r11]
 1028b4b:	mov    r11,QWORD PTR [rsi]
 1028b4e:	mov    BYTE PTR [rsp+0x28],0x0
 1028b53:	mov    BYTE PTR [rsp+0x20],0x1
 1028b58:	xor    r9d,r9d
 1028b5b:	xor    r8d,r8d
 1028b5e:	mov    edx,0x4000c422
 1028b63:	mov    rcx,rsi
 1028b66:	call   QWORD PTR [r11]
 1028b69:	mov    r11,QWORD PTR [rsi]
 1028b6c:	mov    BYTE PTR [rsp+0x28],0x0
 1028b71:	mov    BYTE PTR [rsp+0x20],0x1
 1028b76:	xor    r9d,r9d
 1028b79:	xor    r8d,r8d
 1028b7c:	mov    edx,0x4000c43b
 1028b81:	mov    rcx,rsi
 1028b84:	call   QWORD PTR [r11]
 1028b87:	mov    r11,QWORD PTR [rsi]
 1028b8a:	mov    BYTE PTR [rsp+0x28],0x0
 1028b8f:	mov    BYTE PTR [rsp+0x20],0x1
 1028b94:	xor    r9d,r9d
 1028b97:	xor    r8d,r8d
 1028b9a:	mov    edx,0x4000c43c
 1028b9f:	mov    rcx,rsi
 1028ba2:	call   QWORD PTR [r11]
 1028ba5:	mov    r11,QWORD PTR [rsi]
 1028ba8:	mov    BYTE PTR [rsp+0x28],0x0
 1028bad:	mov    BYTE PTR [rsp+0x20],0x1
 1028bb2:	xor    r9d,r9d
 1028bb5:	xor    r8d,r8d
 1028bb8:	mov    edx,0x4000c43a
 1028bbd:	mov    rcx,rsi
 1028bc0:	call   QWORD PTR [r11]
 1028bc3:	mov    r11,QWORD PTR [rsi]
 1028bc6:	mov    BYTE PTR [rsp+0x28],0x0
 1028bcb:	mov    BYTE PTR [rsp+0x20],0x1
 1028bd0:	xor    r9d,r9d
 1028bd3:	xor    r8d,r8d
 1028bd6:	mov    edx,0x4000c38c
 1028bdb:	mov    rcx,rsi
 1028bde:	call   QWORD PTR [r11]
 1028be1:	mov    r11,QWORD PTR [rsi]
 1028be4:	mov    BYTE PTR [rsp+0x28],0x0
 1028be9:	mov    BYTE PTR [rsp+0x20],0x1
 1028bee:	xor    r9d,r9d
 1028bf1:	xor    r8d,r8d
 1028bf4:	mov    edx,0x4000c38d
 1028bf9:	mov    rcx,rsi
 1028bfc:	call   QWORD PTR [r11]
 1028bff:	mov    r11,QWORD PTR [rsi]
 1028c02:	mov    BYTE PTR [rsp+0x28],0x0
 1028c07:	mov    BYTE PTR [rsp+0x20],0x1
 1028c0c:	xor    r9d,r9d
 1028c0f:	xor    r8d,r8d
 1028c12:	mov    edx,0x4000c4b0
 1028c17:	mov    rcx,rsi
 1028c1a:	call   QWORD PTR [r11]
 1028c1d:	nop
 1028c1e:	lea    rcx,[rsp+0x70]
 1028c23:	call   QWORD PTR [rip+0xfffffffffffd8e7f]        # 0x1001aa8
 1028c29:	add    rsp,0x50
 1028c2d:	pop    rdi
 1028c2e:	pop    rsi
 1028c2f:	pop    rbx
 1028c30:	ret    
 1028c31:	int3   
 1028c32:	int3   
 1028c33:	int3   
 1028c34:	int3   
 1028c35:	int3   
 1028c36:	int3   
 1028c37:	int3   
 1028c38:	int3   
 1028c39:	int3   
 1028c3a:	int3   
 1028c3b:	int3   
 1028c3c:	int3   
 1028c3d:	int3   
 1028c3e:	int3   
 1028c3f:	int3   
 1028c40:	rex push rsi
 1028c42:	push   rdi
 1028c43:	push   r14
 1028c45:	sub    rsp,0x50
 1028c49:	mov    QWORD PTR [rsp+0x48],0xfffffffffffffffe
 1028c52:	mov    QWORD PTR [rsp+0x78],rbx
 1028c57:	mov    QWORD PTR [rsp+0x80],rbp
 1028c5f:	mov    rsi,r8
 1028c62:	mov    rbp,rdx
 1028c65:	mov    rdi,rcx
 1028c68:	add    rcx,0x60
 1028c6c:	call   QWORD PTR [rip+0xfffffffffffd8e7e]        # 0x1001af0
 1028c72:	test   eax,eax
 1028c74:	je     0x1028dcf
 1028c7a:	mov    r14d,0x59
 1028c80:	movzx  eax,r14w
 1028c84:	mov    WORD PTR [rsp+0x70],ax
 1028c89:	cmp    BYTE PTR [rdi+0xb8],0x0
 1028c90:	jne    0x1028d97
 1028c96:	lea    rcx,[rsp+0x88]
 1028c9e:	call   QWORD PTR [rip+0xfffffffffffd8e1c]        # 0x1001ac0
 1028ca4:	nop
 1028ca5:	mov    edx,0x4000c3a2
 1028caa:	lea    rcx,[rsp+0x40]
 1028caf:	call   0x10132d0
 1028cb4:	nop
 1028cb5:	mov    rcx,rax
 1028cb8:	call   QWORD PTR [rip+0xfffffffffffd8e2a]        # 0x1001ae8
 1028cbe:	mov    rdx,rax
 1028cc1:	mov    r8,rsi
 1028cc4:	lea    rcx,[rsp+0x88]
 1028ccc:	call   QWORD PTR [rip+0xfffffffffffd8d6e]        # 0x1001a40
 1028cd2:	nop
 1028cd3:	lea    rcx,[rsp+0x40]
 1028cd8:	call   QWORD PTR [rip+0xfffffffffffd8dca]        # 0x1001aa8
 1028cde:	mov    rbx,QWORD PTR [rdi]
 1028ce1:	lea    rcx,[rsp+0x88]
 1028ce9:	call   QWORD PTR [rip+0xfffffffffffd8df9]        # 0x1001ae8
 1028cef:	mov    r8,rax
 1028cf2:	mov    BYTE PTR [rsp+0x30],0x1
 1028cf7:	mov    BYTE PTR [rsp+0x28],0x0
 1028cfc:	mov    DWORD PTR [rsp+0x20],0x1
 1028d04:	xor    r9d,r9d
 1028d07:	mov    edx,0x4000c3a2
 1028d0c:	mov    rcx,rdi
 1028d0f:	call   QWORD PTR [rbx+0x8]
 1028d12:	call   QWORD PTR [rip+0xfffffffffffd8a50]        # 0x1001768
 1028d18:	lea    rcx,[rax+0x30]
 1028d1c:	call   QWORD PTR [rip+0xfffffffffffd8a56]        # 0x1001778
 1028d22:	call   QWORD PTR [rip+0xfffffffffffd8a40]        # 0x1001768
 1028d28:	mov    rcx,rax
 1028d2b:	call   QWORD PTR [rip+0xfffffffffffd8a47]        # 0x1001778
 1028d31:	lea    r8d,[r14-0x58]
 1028d35:	lea    rdx,[rsp+0x70]
 1028d3a:	lea    rcx,[rip+0xfffffffffffdb507]        # 0x1004248
 1028d41:	call   QWORD PTR [rip+0xfffffffffffd8a81]        # 0x10017c8
 1028d47:	test   eax,eax
 1028d49:	jne    0x1028d56
 1028d4b:	movzx  ecx,r14w
 1028d4f:	mov    WORD PTR [rsp+0x70],cx
 1028d54:	jmp    0x1028d5b
 1028d56:	movzx  ecx,WORD PTR [rsp+0x70]
 1028d5b:	call   QWORD PTR [rip+0xfffffffffffd8a1f]        # 0x1001780
 1028d61:	test   eax,eax
 1028d63:	je     0x1028d75
 1028d65:	movzx  ecx,WORD PTR [rsp+0x70]
 1028d6a:	call   QWORD PTR [rip+0xfffffffffffd8a20]        # 0x1001790
 1028d70:	mov    WORD PTR [rsp+0x70],ax
 1028d75:	lea    rcx,[rsp+0x88]
 1028d7d:	call   QWORD PTR [rip+0xfffffffffffd8d25]        # 0x1001aa8
 1028d83:	movzx  eax,WORD PTR [rsp+0x70]
 1028d88:	cmp    BYTE PTR [rdi+0xb8],0x0
 1028d8f:	jne    0x1028d97
 1028d91:	cmp    r14w,ax
 1028d95:	jne    0x1028dcf
 1028d97:	mov    r8,rsi
 1028d9a:	mov    rdx,rbp
 1028d9d:	mov    rcx,rdi
 1028da0:	call   0x1028df0
 1028da5:	test   al,al
 1028da7:	jne    0x1028dcb
 1028da9:	mov    rax,QWORD PTR [rdi]
 1028dac:	mov    BYTE PTR [rsp+0x28],0x1
 1028db1:	mov    BYTE PTR [rsp+0x20],0x1
 1028db6:	mov    r9d,0x2
 1028dbc:	xor    r8d,r8d
 1028dbf:	mov    edx,0xc000c3a3
 1028dc4:	mov    rcx,rdi
 1028dc7:	call   QWORD PTR [rax]
 1028dc9:	jmp    0x1028dcf
 1028dcb:	mov    al,0x1
 1028dcd:	jmp    0x1028dd1
 1028dcf:	xor    al,al
 1028dd1:	mov    rbx,QWORD PTR [rsp+0x78]
 1028dd6:	mov    rbp,QWORD PTR [rsp+0x80]
 1028dde:	add    rsp,0x50
 1028de2:	pop    r14
 1028de4:	pop    rdi
 1028de5:	pop    rsi
 1028de6:	ret    
 1028de7:	int3   
 1028de8:	int3   
 1028de9:	int3   
 1028dea:	int3   
 1028deb:	int3   
 1028dec:	int3   
 1028ded:	int3   
 1028dee:	int3   
 1028def:	int3   
 1028df0:	rex push rbp
 1028df2:	push   rbx
 1028df3:	push   rsi
 1028df4:	push   rdi
 1028df5:	push   r12
 1028df7:	push   r14
 1028df9:	push   r15
 1028dfb:	lea    rbp,[rsp-0xc00]
 1028e03:	sub    rsp,0xd00
 1028e0a:	mov    QWORD PTR [rbp-0x38],0xfffffffffffffffe
 1028e12:	mov    rax,QWORD PTR [rip+0x3aa57]        # 0x1063870
 1028e19:	xor    rax,rsp
 1028e1c:	mov    QWORD PTR [rbp+0xbf0],rax
 1028e23:	mov    r15,r8
 1028e26:	mov    r14,rdx
 1028e29:	mov    rsi,rcx
 1028e2c:	lea    rdx,[rbp+0x3f0]
 1028e33:	lea    rcx,[rip+0xfffffffffffdd6d6]        # 0x1006510
 1028e3a:	call   0x1031960
 1028e3f:	test   al,al
 1028e41:	je     0x102952e
 1028e47:	lea    rdx,[rbp+0x3f0]
 1028e4e:	lea    rcx,[rbp-0x80]
 1028e52:	call   QWORD PTR [rip+0xfffffffffffd8c58]        # 0x1001ab0
 1028e58:	nop
 1028e59:	lea    rcx,[rsp+0x70]
 1028e5e:	call   QWORD PTR [rip+0xfffffffffffd8c5c]        # 0x1001ac0
 1028e64:	nop
 1028e65:	lea    rcx,[rsp+0x60]
 1028e6a:	call   QWORD PTR [rip+0xfffffffffffd8c50]        # 0x1001ac0
 1028e70:	nop
 1028e71:	lea    rcx,[rsp+0x58]
 1028e76:	call   QWORD PTR [rip+0xfffffffffffd8c44]        # 0x1001ac0
 1028e7c:	nop
 1028e7d:	lea    rcx,[rsp+0x50]
 1028e82:	call   QWORD PTR [rip+0xfffffffffffd8c38]        # 0x1001ac0
 1028e88:	nop
 1028e89:	lea    rcx,[rip+0xfffffffffffdd690]        # 0x1006520
 1028e90:	call   0x103fa26
 1028e95:	mov    edi,eax
 1028e97:	xor    edx,edx
 1028e99:	div    DWORD PTR [rsi+0xf8]
 1028e9f:	mov    rbx,QWORD PTR [rsi+0xf0]
 1028ea6:	xor    r12d,r12d
 1028ea9:	test   rbx,rbx
 1028eac:	je     0x1028eff
 1028eae:	mov    rbx,QWORD PTR [rbx+rdx*8]
 1028eb2:	test   rbx,rbx
 1028eb5:	je     0x1028eff
 1028eb7:	cmp    DWORD PTR [rbx+0x18],edi
 1028eba:	jne    0x1028ed8
 1028ebc:	lea    rdx,[rip+0xfffffffffffdd65d]        # 0x1006520
 1028ec3:	mov    rcx,rbx
 1028ec6:	call   QWORD PTR [rip+0xfffffffffffd8b34]        # 0x1001a00
 1028ecc:	mov    ecx,r12d
 1028ecf:	test   eax,eax
 1028ed1:	sete   cl
 1028ed4:	test   ecx,ecx
 1028ed6:	jne    0x1028ede
 1028ed8:	mov    rbx,QWORD PTR [rbx+0x10]
 1028edc:	jmp    0x1028eb2
 1028ede:	lea    rdx,[rbx+0x8]
 1028ee2:	lea    rcx,[rsp+0x50]
 1028ee7:	call   QWORD PTR [rip+0xfffffffffffd8bb3]        # 0x1001aa0
 1028eed:	lea    rdx,[rsp+0x50]
 1028ef2:	lea    rcx,[rsp+0x70]
 1028ef7:	call   QWORD PTR [rip+0xfffffffffffd8ba3]        # 0x1001aa0
 1028efd:	jmp    0x1028f11
 1028eff:	lea    rdx,[rip+0xfffffffffffdd632]        # 0x1006538
 1028f06:	lea    rcx,[rsp+0x70]
 1028f0b:	call   QWORD PTR [rip+0xfffffffffffd8b87]        # 0x1001a98
 1028f11:	lea    rcx,[rip+0xfffffffffffdd638]        # 0x1006550
 1028f18:	call   0x103fa26
 1028f1d:	mov    edi,eax
 1028f1f:	xor    edx,edx
 1028f21:	div    DWORD PTR [rsi+0xf8]
 1028f27:	mov    rbx,QWORD PTR [rsi+0xf0]
 1028f2e:	test   rbx,rbx
 1028f31:	je     0x1028f84
 1028f33:	mov    rbx,QWORD PTR [rbx+rdx*8]
 1028f37:	test   rbx,rbx
 1028f3a:	je     0x1028f84
 1028f3c:	cmp    DWORD PTR [rbx+0x18],edi
 1028f3f:	jne    0x1028f5d
 1028f41:	lea    rdx,[rip+0xfffffffffffdd608]        # 0x1006550
 1028f48:	mov    rcx,rbx
 1028f4b:	call   QWORD PTR [rip+0xfffffffffffd8aaf]        # 0x1001a00
 1028f51:	mov    ecx,r12d
 1028f54:	test   eax,eax
 1028f56:	sete   cl
 1028f59:	test   ecx,ecx
 1028f5b:	jne    0x1028f63
 1028f5d:	mov    rbx,QWORD PTR [rbx+0x10]
 1028f61:	jmp    0x1028f37
 1028f63:	lea    rdx,[rbx+0x8]
 1028f67:	lea    rcx,[rsp+0x50]
 1028f6c:	call   QWORD PTR [rip+0xfffffffffffd8b2e]        # 0x1001aa0
 1028f72:	lea    rdx,[rsp+0x50]
 1028f77:	lea    rcx,[rsp+0x60]
 1028f7c:	call   QWORD PTR [rip+0xfffffffffffd8b1e]        # 0x1001aa0
 1028f82:	jmp    0x1028f96
 1028f84:	lea    rdx,[rip+0xfffffffffffdd5dd]        # 0x1006568
 1028f8b:	lea    rcx,[rsp+0x60]
 1028f90:	call   QWORD PTR [rip+0xfffffffffffd8b02]        # 0x1001a98
 1028f96:	lea    rcx,[rip+0xfffffffffffdd5fb]        # 0x1006598
 1028f9d:	call   0x103fa26
 1028fa2:	mov    edi,eax
 1028fa4:	xor    edx,edx
 1028fa6:	div    DWORD PTR [rsi+0xf8]
 1028fac:	mov    rbx,QWORD PTR [rsi+0xf0]
 1028fb3:	test   rbx,rbx
 1028fb6:	je     0x1029009
 1028fb8:	mov    rbx,QWORD PTR [rbx+rdx*8]
 1028fbc:	test   rbx,rbx
 1028fbf:	je     0x1029009
 1028fc1:	cmp    DWORD PTR [rbx+0x18],edi
 1028fc4:	jne    0x1028fe2
 1028fc6:	lea    rdx,[rip+0xfffffffffffdd5cb]        # 0x1006598
 1028fcd:	mov    rcx,rbx
 1028fd0:	call   QWORD PTR [rip+0xfffffffffffd8a2a]        # 0x1001a00
 1028fd6:	mov    ecx,r12d
 1028fd9:	test   eax,eax
 1028fdb:	sete   cl
 1028fde:	test   ecx,ecx
 1028fe0:	jne    0x1028fe8
 1028fe2:	mov    rbx,QWORD PTR [rbx+0x10]
 1028fe6:	jmp    0x1028fbc
 1028fe8:	lea    rdx,[rbx+0x8]
 1028fec:	lea    rcx,[rsp+0x50]
 1028ff1:	call   QWORD PTR [rip+0xfffffffffffd8aa9]        # 0x1001aa0
 1028ff7:	lea    rdx,[rsp+0x50]
 1028ffc:	lea    rcx,[rsp+0x58]
 1029001:	call   QWORD PTR [rip+0xfffffffffffd8a99]        # 0x1001aa0
 1029007:	jmp    0x102901b
 1029009:	lea    rdx,[rip+0xfffffffffffdd5a8]        # 0x10065b8
 1029010:	lea    rcx,[rsp+0x58]
 1029015:	call   QWORD PTR [rip+0xfffffffffffd8a7d]        # 0x1001a98
 102901b:	lea    rcx,[rsp+0x68]
 1029020:	call   QWORD PTR [rip+0xfffffffffffd8a9a]        # 0x1001ac0
 1029026:	nop
 1029027:	lea    rax,[rip+0xfffffffffffd8f02]        # 0x1001f30
 102902e:	mov    QWORD PTR [rsp+0x38],rax
 1029033:	mov    rax,QWORD PTR [rsi+0x60]
 1029037:	mov    QWORD PTR [rsp+0x30],rax
 102903c:	mov    QWORD PTR [rsp+0x28],r14
 1029041:	mov    rax,QWORD PTR [rsp+0x58]
 1029046:	mov    QWORD PTR [rsp+0x20],rax
 102904b:	mov    r9,QWORD PTR [rsp+0x60]
 1029050:	mov    r8,QWORD PTR [rsp+0x70]
 1029055:	lea    rdx,[rip+0xfffffffffffdd464]        # 0x10064c0
 102905c:	lea    rcx,[rsp+0x68]
 1029061:	call   QWORD PTR [rip+0xfffffffffffd89d9]        # 0x1001a40
 1029067:	lea    r8,[rip+0xfffffffffffd8e9a]        # 0x1001f08
 102906e:	lea    rdx,[rsi+0x78]
 1029072:	lea    rcx,[rbp-0x58]
 1029076:	call   0x100af10
 102907b:	nop
 102907c:	lea    r8,[rip+0xfffffffffffd8ed1]        # 0x1001f54
 1029083:	mov    rdx,rax
 1029086:	lea    rcx,[rbp-0x50]
 102908a:	call   0x100af10
 102908f:	nop
 1029090:	lea    r8,[rip+0x3a3b9]        # 0x1063450
 1029097:	mov    rdx,rax
 102909a:	lea    rcx,[rbp-0x40]
 102909e:	call   0x100af10
 10290a3:	nop
 10290a4:	lea    r8,[rip+0xfffffffffffdd52d]        # 0x10065d8
 10290ab:	mov    rdx,rax
 10290ae:	lea    rcx,[rsp+0x78]
 10290b3:	call   0x100af10
 10290b8:	nop
 10290b9:	lea    rcx,[rbp-0x40]
 10290bd:	call   QWORD PTR [rip+0xfffffffffffd89e5]        # 0x1001aa8
 10290c3:	nop
 10290c4:	lea    rcx,[rbp-0x50]
 10290c8:	call   QWORD PTR [rip+0xfffffffffffd89da]        # 0x1001aa8
 10290ce:	nop
 10290cf:	lea    rcx,[rbp-0x58]
 10290d3:	call   QWORD PTR [rip+0xfffffffffffd89cf]        # 0x1001aa8
 10290d9:	mov    QWORD PTR [rbp-0x70],0xffffffffffffffff
 10290e1:	lea    rcx,[rsp+0x78]
 10290e6:	call   QWORD PTR [rip+0xfffffffffffd89fc]        # 0x1001ae8
 10290ec:	mov    rcx,rax
 10290ef:	mov    QWORD PTR [rsp+0x30],r12
 10290f4:	mov    DWORD PTR [rsp+0x28],0x100080
 10290fc:	mov    DWORD PTR [rsp+0x20],0x2
 1029104:	xor    r9d,r9d
 1029107:	mov    edx,0x40000000
 102910c:	lea    r8d,[r9+0x1]
 1029110:	call   QWORD PTR [rip+0xfffffffffffd80ca]        # 0x10011e0
 1029116:	mov    r14,rax
 1029119:	mov    QWORD PTR [rbp-0x70],rax
 102911d:	cmp    rax,0xffffffffffffffff
 1029121:	jne    0x1029198
 1029123:	mov    rax,QWORD PTR [rsi]
 1029126:	mov    BYTE PTR [rsp+0x28],0x1
 102912b:	mov    BYTE PTR [rsp+0x20],0x1
 1029130:	xor    r9d,r9d
 1029133:	xor    r8d,r8d
 1029136:	mov    edx,0xc000c39d
 102913b:	mov    rcx,rsi
 102913e:	call   QWORD PTR [rax]
 1029140:	nop
 1029141:	lea    rcx,[rsp+0x78]
 1029146:	call   QWORD PTR [rip+0xfffffffffffd895c]        # 0x1001aa8
 102914c:	nop
 102914d:	lea    rcx,[rsp+0x68]
 1029152:	call   QWORD PTR [rip+0xfffffffffffd8950]        # 0x1001aa8
 1029158:	nop
 1029159:	lea    rcx,[rsp+0x50]
 102915e:	call   QWORD PTR [rip+0xfffffffffffd8944]        # 0x1001aa8
 1029164:	nop
 1029165:	lea    rcx,[rsp+0x58]
 102916a:	call   QWORD PTR [rip+0xfffffffffffd8938]        # 0x1001aa8
 1029170:	nop
 1029171:	lea    rcx,[rsp+0x60]
 1029176:	call   QWORD PTR [rip+0xfffffffffffd892c]        # 0x1001aa8
 102917c:	nop
 102917d:	lea    rcx,[rsp+0x70]
 1029182:	call   QWORD PTR [rip+0xfffffffffffd8920]        # 0x1001aa8
 1029188:	nop
 1029189:	lea    rcx,[rbp-0x80]
 102918d:	call   QWORD PTR [rip+0xfffffffffffd8915]        # 0x1001aa8
 1029193:	jmp    0x102954b
 1029198:	xor    edx,edx
 102919a:	mov    r8d,0x400
 10291a0:	lea    rcx,[rbp+0x3f0]
 10291a7:	call   0x104026c
 10291ac:	mov    DWORD PTR [rbp-0x60],r12d
 10291b0:	lea    rcx,[rsp+0x68]
 10291b5:	call   QWORD PTR [rip+0xfffffffffffd8935]        # 0x1001af0
 10291bb:	mov    ebx,eax
 10291bd:	lea    rcx,[rsp+0x68]
 10291c2:	call   QWORD PTR [rip+0xfffffffffffd8920]        # 0x1001ae8
 10291c8:	mov    r8,rax
 10291cb:	lea    rax,[rbp-0x60]
 10291cf:	mov    QWORD PTR [rsp+0x38],rax
 10291d4:	mov    QWORD PTR [rsp+0x30],r12
 10291d9:	mov    DWORD PTR [rsp+0x28],0x400
 10291e1:	lea    rax,[rbp-0x10]
 10291e5:	mov    QWORD PTR [rsp+0x20],rax
 10291ea:	mov    r9d,ebx
 10291ed:	mov    edx,0x400
 10291f2:	xor    ecx,ecx
 10291f4:	call   QWORD PTR [rip+0xfffffffffffd801e]        # 0x1001218
 10291fa:	movsxd r11,eax
 10291fd:	test   eax,eax
 10291ff:	jne    0x102928b
 1029205:	mov    rax,QWORD PTR [rsi]
 1029208:	mov    BYTE PTR [rsp+0x28],0x1
 102920d:	mov    BYTE PTR [rsp+0x20],0x1
 1029212:	xor    r9d,r9d
 1029215:	xor    r8d,r8d
 1029218:	mov    edx,0xc000c39d
 102921d:	mov    rcx,rsi
 1029220:	call   QWORD PTR [rax]
 1029222:	nop
 1029223:	mov    rcx,r14
 1029226:	call   QWORD PTR [rip+0xfffffffffffd82ac]        # 0x10014d8
 102922c:	mov    QWORD PTR [rbp-0x70],0xffffffffffffffff
 1029234:	lea    rcx,[rsp+0x78]
 1029239:	call   QWORD PTR [rip+0xfffffffffffd8869]        # 0x1001aa8
 102923f:	nop
 1029240:	lea    rcx,[rsp+0x68]
 1029245:	call   QWORD PTR [rip+0xfffffffffffd885d]        # 0x1001aa8
 102924b:	nop
 102924c:	lea    rcx,[rsp+0x50]
 1029251:	call   QWORD PTR [rip+0xfffffffffffd8851]        # 0x1001aa8
 1029257:	nop
 1029258:	lea    rcx,[rsp+0x58]
 102925d:	call   QWORD PTR [rip+0xfffffffffffd8845]        # 0x1001aa8
 1029263:	nop
 1029264:	lea    rcx,[rsp+0x60]
 1029269:	call   QWORD PTR [rip+0xfffffffffffd8839]        # 0x1001aa8
 102926f:	nop
 1029270:	lea    rcx,[rsp+0x70]
 1029275:	call   QWORD PTR [rip+0xfffffffffffd882d]        # 0x1001aa8
 102927b:	nop
 102927c:	lea    rcx,[rbp-0x80]
 1029280:	call   QWORD PTR [rip+0xfffffffffffd8822]        # 0x1001aa8
 1029286:	jmp    0x102954b
 102928b:	lea    eax,[r11-0x1]
 102928f:	cmp    eax,0x400
 1029294:	jae    0x10292af
 1029296:	cmp    r11,0x400
 102929d:	jae    0x10292a7
 102929f:	mov    BYTE PTR [rbp+r11*1-0x10],0x0
 10292a5:	jmp    0x10292b6
 10292a7:	xor    ecx,ecx
 10292a9:	call   0x103fd38
 10292ae:	int3   
 10292af:	mov    BYTE PTR [rbp+0x3ef],0x0
 10292b6:	lea    rax,[rbp-0x10]
 10292ba:	or     r8,0xffffffffffffffff
 10292be:	xchg   ax,ax
 10292c0:	inc    r8
 10292c3:	cmp    BYTE PTR [rax+r8*1],0x0
 10292c8:	jne    0x10292c0
 10292ca:	mov    QWORD PTR [rsp+0x20],r12
 10292cf:	lea    r9,[rbp-0x48]
 10292d3:	lea    rdx,[rbp-0x10]
 10292d7:	mov    rcx,r14
 10292da:	call   QWORD PTR [rip+0xfffffffffffd7f70]        # 0x1001250
 10292e0:	mov    r11,QWORD PTR [rsi]
 10292e3:	mov    BYTE PTR [rsp+0x28],0x1
 10292e8:	mov    BYTE PTR [rsp+0x20],0x1
 10292ed:	xor    r9d,r9d
 10292f0:	xor    r8d,r8d
 10292f3:	mov    edx,0x4000c39e
 10292f8:	mov    rcx,rsi
 10292fb:	call   QWORD PTR [r11]
 10292fe:	lea    r8,[rip+0xfffffffffffd8c03]        # 0x1001f08
 1029305:	lea    rdx,[rsi+0x78]
 1029309:	lea    rcx,[rbp-0x58]
 102930d:	call   0x100af10
 1029312:	nop
 1029313:	lea    r8,[rip+0xfffffffffffdd176]        # 0x1006490
 102931a:	mov    rdx,rax
 102931d:	lea    rcx,[rbp-0x68]
 1029321:	call   0x100af10
 1029326:	nop
 1029327:	lea    rcx,[rbp-0x58]
 102932b:	call   QWORD PTR [rip+0xfffffffffffd8777]        # 0x1001aa8
 1029331:	lea    rcx,[rbp-0x78]
 1029335:	call   QWORD PTR [rip+0xfffffffffffd8785]        # 0x1001ac0
 102933b:	nop
 102933c:	mov    rax,QWORD PTR [rbp-0x68]
 1029340:	mov    QWORD PTR [rsp+0x28],rax
 1029345:	mov    QWORD PTR [rsp+0x20],r15
 102934a:	mov    r9,QWORD PTR [rsp+0x78]
 102934f:	mov    r8,QWORD PTR [rbp-0x80]
 1029353:	lea    rdx,[rip+0xfffffffffffdd28e]        # 0x10065e8
 102935a:	lea    rcx,[rbp-0x78]
 102935e:	call   QWORD PTR [rip+0xfffffffffffd86dc]        # 0x1001a40
 1029364:	lea    rcx,[rsi+0x78]
 1029368:	call   QWORD PTR [rip+0xfffffffffffd877a]        # 0x1001ae8
 102936e:	mov    rdi,rax
 1029371:	lea    rcx,[rbp-0x78]
 1029375:	call   QWORD PTR [rip+0xfffffffffffd876d]        # 0x1001ae8
 102937b:	mov    rbx,rax
 102937e:	lea    rcx,[rsi+0x80]
 1029385:	call   QWORD PTR [rip+0xfffffffffffd875d]        # 0x1001ae8
 102938b:	mov    rdx,rax
 102938e:	lea    rcx,[rsi+0x158]
 1029395:	mov    BYTE PTR [rsp+0x48],0x0
 102939a:	mov    QWORD PTR [rsp+0x40],0xffffffffffffffff
 10293a3:	mov    DWORD PTR [rsp+0x38],0x20
 10293ab:	lea    rax,[rbp-0x30]
 10293af:	mov    QWORD PTR [rsp+0x30],rax
 10293b4:	mov    DWORD PTR [rsp+0x28],0x1
 10293bc:	mov    BYTE PTR [rsp+0x20],0x1
 10293c1:	mov    r9,rdi
 10293c4:	mov    r8,rbx
 10293c7:	call   0x1031100
 10293cc:	test   eax,eax
 10293ce:	jne    0x1029495
 10293d4:	mov    rcx,rsi
 10293d7:	call   0x1029580
 10293dc:	test   al,al
 10293de:	je     0x1029495
 10293e4:	mov    rax,QWORD PTR [rsi]
 10293e7:	mov    BYTE PTR [rsp+0x28],0x1
 10293ec:	mov    BYTE PTR [rsp+0x20],0x1
 10293f1:	xor    r9d,r9d
 10293f4:	xor    r8d,r8d
 10293f7:	mov    edx,0xc3a0
 10293fc:	mov    rcx,rsi
 10293ff:	call   QWORD PTR [rax]
 1029401:	lea    rcx,[rbp-0x68]
 1029405:	call   QWORD PTR [rip+0xfffffffffffd86dd]        # 0x1001ae8
 102940b:	mov    rcx,rax
 102940e:	call   QWORD PTR [rip+0xfffffffffffd7de4]        # 0x10011f8
 1029414:	nop
 1029415:	lea    rcx,[rbp-0x78]
 1029419:	call   QWORD PTR [rip+0xfffffffffffd8689]        # 0x1001aa8
 102941f:	nop
 1029420:	lea    rcx,[rbp-0x68]
 1029424:	call   QWORD PTR [rip+0xfffffffffffd867e]        # 0x1001aa8
 102942a:	nop
 102942b:	mov    rcx,r14
 102942e:	call   QWORD PTR [rip+0xfffffffffffd80a4]        # 0x10014d8
 1029434:	mov    QWORD PTR [rbp-0x70],0xffffffffffffffff
 102943c:	lea    rcx,[rsp+0x78]
 1029441:	call   QWORD PTR [rip+0xfffffffffffd8661]        # 0x1001aa8
 1029447:	nop
 1029448:	lea    rcx,[rsp+0x68]
 102944d:	call   QWORD PTR [rip+0xfffffffffffd8655]        # 0x1001aa8
 1029453:	nop
 1029454:	lea    rcx,[rsp+0x50]
 1029459:	call   QWORD PTR [rip+0xfffffffffffd8649]        # 0x1001aa8
 102945f:	nop
 1029460:	lea    rcx,[rsp+0x58]
 1029465:	call   QWORD PTR [rip+0xfffffffffffd863d]        # 0x1001aa8
 102946b:	nop
 102946c:	lea    rcx,[rsp+0x60]
 1029471:	call   QWORD PTR [rip+0xfffffffffffd8631]        # 0x1001aa8
 1029477:	nop
 1029478:	lea    rcx,[rsp+0x70]
 102947d:	call   QWORD PTR [rip+0xfffffffffffd8625]        # 0x1001aa8
 1029483:	nop
 1029484:	lea    rcx,[rbp-0x80]
 1029488:	call   QWORD PTR [rip+0xfffffffffffd861a]        # 0x1001aa8
 102948e:	mov    al,0x1
 1029490:	jmp    0x102954d
 1029495:	mov    rax,QWORD PTR [rsi]
 1029498:	mov    BYTE PTR [rsp+0x28],0x1
 102949d:	mov    BYTE PTR [rsp+0x20],0x1
 10294a2:	xor    r9d,r9d
 10294a5:	xor    r8d,r8d
 10294a8:	mov    edx,0xc000c39f
 10294ad:	mov    rcx,rsi
 10294b0:	call   QWORD PTR [rax]
 10294b2:	nop
 10294b3:	lea    rcx,[rbp-0x78]
 10294b7:	call   QWORD PTR [rip+0xfffffffffffd85eb]        # 0x1001aa8
 10294bd:	nop
 10294be:	lea    rcx,[rbp-0x68]
 10294c2:	call   QWORD PTR [rip+0xfffffffffffd85e0]        # 0x1001aa8
 10294c8:	nop
 10294c9:	mov    rcx,r14
 10294cc:	call   QWORD PTR [rip+0xfffffffffffd8006]        # 0x10014d8
 10294d2:	mov    QWORD PTR [rbp-0x70],0xffffffffffffffff
 10294da:	lea    rcx,[rsp+0x78]
 10294df:	call   QWORD PTR [rip+0xfffffffffffd85c3]        # 0x1001aa8
 10294e5:	nop
 10294e6:	lea    rcx,[rsp+0x68]
 10294eb:	call   QWORD PTR [rip+0xfffffffffffd85b7]        # 0x1001aa8
 10294f1:	nop
 10294f2:	lea    rcx,[rsp+0x50]
 10294f7:	call   QWORD PTR [rip+0xfffffffffffd85ab]        # 0x1001aa8
 10294fd:	nop
 10294fe:	lea    rcx,[rsp+0x58]
 1029503:	call   QWORD PTR [rip+0xfffffffffffd859f]        # 0x1001aa8
 1029509:	nop
 102950a:	lea    rcx,[rsp+0x60]
 102950f:	call   QWORD PTR [rip+0xfffffffffffd8593]        # 0x1001aa8
 1029515:	nop
 1029516:	lea    rcx,[rsp+0x70]
 102951b:	call   QWORD PTR [rip+0xfffffffffffd8587]        # 0x1001aa8
 1029521:	nop
 1029522:	lea    rcx,[rbp-0x80]
 1029526:	call   QWORD PTR [rip+0xfffffffffffd857c]        # 0x1001aa8
 102952c:	jmp    0x102954b
 102952e:	mov    rax,QWORD PTR [rsi]
 1029531:	mov    BYTE PTR [rsp+0x28],0x1
 1029536:	mov    BYTE PTR [rsp+0x20],0x1
 102953b:	xor    r9d,r9d
 102953e:	xor    r8d,r8d
 1029541:	mov    edx,0xc000c3a1
 1029546:	mov    rcx,rsi
 1029549:	call   QWORD PTR [rax]
 102954b:	xor    al,al
 102954d:	mov    rcx,QWORD PTR [rbp+0xbf0]
 1029554:	xor    rcx,rsp
 1029557:	call   0x103ff40
 102955c:	add    rsp,0xd00
 1029563:	pop    r15
 1029565:	pop    r14
 1029567:	pop    r12
 1029569:	pop    rdi
 102956a:	pop    rsi
 102956b:	pop    rbx
 102956c:	pop    rbp
 102956d:	ret    
 102956e:	int3   
 102956f:	int3   
 1029570:	int3   
 1029571:	int3   
 1029572:	int3   
 1029573:	int3   
 1029574:	int3   
 1029575:	int3   
 1029576:	int3   
 1029577:	int3   
 1029578:	int3   
 1029579:	int3   
 102957a:	int3   
 102957b:	int3   
 102957c:	int3   
 102957d:	int3   
 102957e:	int3   
 102957f:	int3   
 1029580:	mov    rax,rsp
 1029583:	push   rdi
 1029584:	sub    rsp,0x490
 102958b:	mov    QWORD PTR [rsp+0x70],0xfffffffffffffffe
 1029594:	mov    QWORD PTR [rax+0x10],rbx
 1029598:	mov    QWORD PTR [rax+0x18],rbp
 102959c:	mov    QWORD PTR [rax+0x20],rsi
 10295a0:	mov    rax,QWORD PTR [rip+0x3a2c9]        # 0x1063870
 10295a7:	xor    rax,rsp
 10295aa:	mov    QWORD PTR [rsp+0x480],rax
 10295b2:	mov    rsi,rcx
 10295b5:	mov    QWORD PTR [rsp+0x58],0xffffffffffffffff
 10295be:	lea    rdx,[rcx+0x78]
 10295c2:	lea    r8,[rip+0xfffffffffffd893f]        # 0x1001f08
 10295c9:	lea    rcx,[rsp+0x68]
 10295ce:	call   0x100af10
 10295d3:	nop
 10295d4:	lea    r8,[rip+0xfffffffffffdceb5]        # 0x1006490
 10295db:	mov    rdx,rax
 10295de:	lea    rcx,[rsp+0x50]
 10295e3:	call   0x100af10
 10295e8:	nop
 10295e9:	lea    rcx,[rsp+0x68]
 10295ee:	call   QWORD PTR [rip+0xfffffffffffd84b4]        # 0x1001aa8
 10295f4:	lea    rcx,[rsp+0x50]
 10295f9:	call   QWORD PTR [rip+0xfffffffffffd84e9]        # 0x1001ae8
 10295ff:	mov    rcx,rax
 1029602:	mov    QWORD PTR [rsp+0x30],0x0
 102960b:	mov    DWORD PTR [rsp+0x28],0x100080
 1029613:	mov    DWORD PTR [rsp+0x20],0x3
 102961b:	xor    r9d,r9d
 102961e:	mov    edx,0x80000000
 1029623:	lea    r8d,[r9+0x1]
 1029627:	call   QWORD PTR [rip+0xfffffffffffd7bb3]        # 0x10011e0
 102962d:	mov    rbp,rax
 1029630:	mov    QWORD PTR [rsp+0x58],rax
 1029635:	cmp    rax,0xffffffffffffffff
 1029639:	jne    0x102966c
 102963b:	mov    rax,QWORD PTR [rsi]
 102963e:	mov    BYTE PTR [rsp+0x28],0x1
 1029643:	mov    BYTE PTR [rsp+0x20],0x1
 1029648:	xor    r9d,r9d
 102964b:	xor    r8d,r8d
 102964e:	mov    edx,0xc000c3f6
 1029653:	mov    rcx,rsi
 1029656:	call   QWORD PTR [rax]
 1029658:	nop
 1029659:	lea    rcx,[rsp+0x50]
 102965e:	call   QWORD PTR [rip+0xfffffffffffd8444]        # 0x1001aa8
 1029664:	nop
 1029665:	xor    al,al
 1029667:	jmp    0x10297ab
 102966c:	xor    edx,edx
 102966e:	mov    r8d,0x400
 1029674:	lea    rcx,[rsp+0x80]
 102967c:	call   0x104026c
 1029681:	mov    QWORD PTR [rsp+0x20],0x0
 102968a:	lea    r9,[rsp+0x40]
 102968f:	mov    r8d,0x400
 1029695:	lea    rdx,[rsp+0x80]
 102969d:	mov    rcx,rbp
 10296a0:	call   QWORD PTR [rip+0xfffffffffffd7caa]        # 0x1001350
 10296a6:	test   eax,eax
 10296a8:	je     0x10296b6
 10296aa:	mov    eax,DWORD PTR [rsp+0x40]
 10296ae:	test   eax,eax
 10296b0:	jne    0x1029743
 10296b6:	lea    rcx,[rsp+0x48]
 10296bb:	call   QWORD PTR [rip+0xfffffffffffd83ff]        # 0x1001ac0
 10296c1:	nop
 10296c2:	mov    edx,0xc000c39b
 10296c7:	lea    rcx,[rsp+0x60]
 10296cc:	call   0x10132d0
 10296d1:	mov    rdi,rax
 10296d4:	call   QWORD PTR [rip+0xfffffffffffd7e76]        # 0x1001550
 10296da:	mov    ebx,eax
 10296dc:	mov    rcx,rdi
 10296df:	call   QWORD PTR [rip+0xfffffffffffd8403]        # 0x1001ae8
 10296e5:	mov    rdx,rax
 10296e8:	mov    r8d,ebx
 10296eb:	lea    rcx,[rsp+0x48]
 10296f0:	call   QWORD PTR [rip+0xfffffffffffd834a]        # 0x1001a40
 10296f6:	nop
 10296f7:	lea    rcx,[rsp+0x60]
 10296fc:	call   QWORD PTR [rip+0xfffffffffffd83a6]        # 0x1001aa8
 1029702:	mov    rbx,QWORD PTR [rsi]
 1029705:	lea    rcx,[rsp+0x48]
 102970a:	call   QWORD PTR [rip+0xfffffffffffd83d8]        # 0x1001ae8
 1029710:	mov    r8,rax
 1029713:	mov    BYTE PTR [rsp+0x30],0x1
 1029718:	mov    BYTE PTR [rsp+0x28],0x1
 102971d:	mov    DWORD PTR [rsp+0x20],0x0
 1029725:	xor    r9d,r9d
 1029728:	mov    edx,0xc000c39b
 102972d:	mov    rcx,rsi
 1029730:	call   QWORD PTR [rbx+0x8]
 1029733:	nop
 1029734:	lea    rcx,[rsp+0x48]
 1029739:	call   QWORD PTR [rip+0xfffffffffffd8369]        # 0x1001aa8
 102973f:	mov    eax,DWORD PTR [rsp+0x40]
 1029743:	cmp    eax,0x400
 1029748:	jae    0x1029767
 102974a:	mov    ecx,eax
 102974c:	cmp    rcx,0x400
 1029753:	jae    0x102975f
 1029755:	mov    BYTE PTR [rsp+rcx*1+0x80],0x0
 102975d:	jmp    0x102976f
 102975f:	xor    ecx,ecx
 1029761:	call   0x103fd38
 1029766:	int3   
 1029767:	mov    BYTE PTR [rsp+0x47f],0x0
 102976f:	lea    rdx,[rip+0xfffffffffffdcd32]        # 0x10064a8
 1029776:	lea    rcx,[rsp+0x80]
 102977e:	call   QWORD PTR [rip+0xfffffffffffd801c]        # 0x10017a0
 1029784:	test   rax,rax
 1029787:	setne  bl
 102978a:	lea    rcx,[rsp+0x50]
 102978f:	call   QWORD PTR [rip+0xfffffffffffd8313]        # 0x1001aa8
 1029795:	nop
 1029796:	mov    rcx,rbp
 1029799:	call   QWORD PTR [rip+0xfffffffffffd7d39]        # 0x10014d8
 102979f:	mov    QWORD PTR [rsp+0x58],0xffffffffffffffff
 10297a8:	movzx  eax,bl
 10297ab:	mov    rcx,QWORD PTR [rsp+0x480]
 10297b3:	xor    rcx,rsp
 10297b6:	call   0x103ff40
 10297bb:	lea    r11,[rsp+0x490]
 10297c3:	mov    rbx,QWORD PTR [r11+0x18]
 10297c7:	mov    rbp,QWORD PTR [r11+0x20]
 10297cb:	mov    rsi,QWORD PTR [r11+0x28]
 10297cf:	mov    rsp,r11
 10297d2:	pop    rdi
 10297d3:	ret    
 10297d4:	int3   
 10297d5:	int3   
 10297d6:	int3   
 10297d7:	int3   
 10297d8:	int3   
 10297d9:	int3   
 10297da:	int3   
 10297db:	int3   
 10297dc:	int3   
 10297dd:	int3   
 10297de:	int3   
 10297df:	int3   
 10297e0:	mov    QWORD PTR [rsp+0x18],rbx
 10297e5:	push   rdi
 10297e6:	push   r12
 10297e8:	push   r13
 10297ea:	push   r14
 10297ec:	push   r15
 10297ee:	sub    rsp,0x20
 10297f2:	mov    r15,QWORD PTR [rsp+0x70]
 10297f7:	xor    edi,edi
 10297f9:	add    r8,0x2
 10297fd:	mov    WORD PTR [r15],di
 1029801:	mov    r12d,ecx
 1029804:	mov    r14,r9
 1029807:	mov    r13,rdx
 102980a:	lea    ebx,[rdi+0x2d]
 102980d:	lea    ecx,[rdi+0x2f]
 1029810:	cmp    WORD PTR [r8],di
 1029814:	jne    0x1029845
 1029816:	movsxd rax,DWORD PTR [r9]
 1029819:	lea    r9d,[rax+0x1]
 102981d:	test   r9d,r9d
 1029820:	js     0x1029845
 1029822:	cmp    r9d,r12d
 1029825:	jge    0x1029845
 1029827:	mov    r8,QWORD PTR [rdx+rax*8+0x8]
 102982c:	movzx  eax,WORD PTR [r8]
 1029830:	cmp    cx,ax
 1029833:	je     0x102996e
 1029839:	cmp    bx,ax
 102983c:	je     0x102996e
 1029842:	mov    DWORD PTR [r14],r9d
 1029845:	mov    QWORD PTR [rsp+0x50],rbp
 102984a:	or     rax,0xffffffffffffffff
 102984e:	mov    QWORD PTR [rsp+0x58],rsi
 1029853:	inc    rax
 1029856:	cmp    WORD PTR [r8+rax*2],di
 102985b:	jne    0x1029853
 102985d:	mov    rbp,QWORD PTR [rsp+0x78]
 1029862:	mov    rcx,r15
 1029865:	cmp    rax,rbp
 1029868:	mov    rsi,rbp
 102986b:	cmovb  rsi,rax
 102986f:	mov    r9,rsi
 1029872:	lea    rdx,[rsi+0x1]
 1029876:	call   QWORD PTR [rip+0xfffffffffffd7e2c]        # 0x10016a8
 102987c:	mov    WORD PTR [r15+rsi*2],di
 1029881:	mov    eax,DWORD PTR [r14]
 1029884:	inc    eax
 1029886:	cmp    eax,r12d
 1029889:	jge    0x1029958
 102988f:	nop
 1029890:	movsxd rcx,DWORD PTR [r14]
 1029893:	lea    eax,[rcx+0x1]
 1029896:	test   eax,eax
 1029898:	js     0x1029956
 102989e:	mov    rdi,QWORD PTR [r13+rcx*8+0x8]
 10298a3:	mov    rax,rcx
 10298a6:	movzx  eax,WORD PTR [rdi]
 10298a9:	test   ax,ax
 10298ac:	je     0x10298c5
 10298ae:	mov    ecx,0x2f
 10298b3:	cmp    cx,ax
 10298b6:	je     0x1029956
 10298bc:	cmp    bx,ax
 10298bf:	je     0x1029956
 10298c5:	or     rax,0xffffffffffffffff
 10298c9:	nop    DWORD PTR [rax+0x0]
 10298d0:	inc    rax
 10298d3:	cmp    WORD PTR [rdi+rax*2],0x0
 10298d8:	jne    0x10298d0
 10298da:	inc    rax
 10298dd:	add    rax,rsi
 10298e0:	cmp    rsi,rax
 10298e3:	ja     0x1029956
 10298e5:	or     rax,0xffffffffffffffff
 10298e9:	nop    DWORD PTR [rax+0x0]
 10298f0:	inc    rax
 10298f3:	cmp    WORD PTR [rdi+rax*2],0x0
 10298f8:	jne    0x10298f0
 10298fa:	inc    rax
 10298fd:	add    rax,rsi
 1029900:	cmp    rax,rbp
 1029903:	ja     0x1029956
 1029905:	lea    r8,[rip+0xfffffffffffdb4b0]        # 0x1004dbc
 102990c:	lea    rdx,[rbp+0x1]
 1029910:	mov    rcx,r15
 1029913:	call   QWORD PTR [rip+0xfffffffffffd7e3f]        # 0x1001758
 1029919:	lea    rdx,[rbp+0x1]
 102991d:	mov    r8,rdi
 1029920:	mov    rcx,r15
 1029923:	call   QWORD PTR [rip+0xfffffffffffd7e2f]        # 0x1001758
 1029929:	or     rax,0xffffffffffffffff
 102992d:	nop    DWORD PTR [rax]
 1029930:	inc    rax
 1029933:	cmp    WORD PTR [rdi+rax*2],0x0
 1029938:	jne    0x1029930
 102993a:	inc    DWORD PTR [r14]
 102993d:	inc    rsi
 1029940:	mov    ebx,0x2d
 1029945:	add    rsi,rax
 1029948:	mov    eax,DWORD PTR [r14]
 102994b:	inc    eax
 102994d:	cmp    eax,r12d
 1029950:	jl     0x1029890
 1029956:	xor    edi,edi
 1029958:	cmp    rsi,rbp
 102995b:	cmovb  rbp,rsi
 102995f:	mov    rsi,QWORD PTR [rsp+0x58]
 1029964:	mov    WORD PTR [r15+rbp*2],di
 1029969:	mov    rbp,QWORD PTR [rsp+0x50]
 102996e:	mov    rax,r15
 1029971:	mov    rbx,QWORD PTR [rsp+0x60]
 1029976:	add    rsp,0x20
 102997a:	pop    r15
 102997c:	pop    r14
 102997e:	pop    r13
 1029980:	pop    r12
 1029982:	pop    rdi
 1029983:	ret    
 1029984:	int3   
 1029985:	int3   
 1029986:	int3   
 1029987:	int3   
 1029988:	int3   
 1029989:	int3   
 102998a:	int3   
 102998b:	int3   
 102998c:	int3   
 102998d:	int3   
 102998e:	int3   
 102998f:	int3   
 1029990:	mov    rax,rsp
 1029993:	push   rbp
 1029994:	push   r12
 1029996:	push   r13
 1029998:	push   r14
 102999a:	push   r15
 102999c:	lea    rbp,[rax-0x7e8]
 10299a3:	sub    rsp,0x8c0
 10299aa:	mov    QWORD PTR [rbp-0x58],0xfffffffffffffffe
 10299b2:	mov    QWORD PTR [rax+0x10],rbx
 10299b6:	mov    QWORD PTR [rax+0x18],rsi
 10299ba:	mov    QWORD PTR [rax+0x20],rdi
 10299be:	mov    rax,QWORD PTR [rip+0x39eab]        # 0x1063870
 10299c5:	xor    rax,rsp
 10299c8:	mov    QWORD PTR [rbp+0x7b0],rax
 10299cf:	mov    rdi,rcx
 10299d2:	xor    r12d,r12d
 10299d5:	mov    esi,r12d
 10299d8:	mov    DWORD PTR [rsp+0x74],r12d
 10299dd:	mov    rax,QWORD PTR [rcx+0x138]
 10299e4:	neg    rax
 10299e7:	sbb    rbx,rbx
 10299ea:	lea    rcx,[rsp+0x68]
 10299ef:	call   QWORD PTR [rip+0xfffffffffffd80cb]        # 0x1001ac0
 10299f5:	nop
 10299f6:	lea    rcx,[rsp+0x58]
 10299fb:	call   QWORD PTR [rip+0xfffffffffffd80bf]        # 0x1001ac0
 1029a01:	nop
 1029a02:	lea    rcx,[rsp+0x78]
 1029a07:	call   QWORD PTR [rip+0xfffffffffffd80b3]        # 0x1001ac0
 1029a0d:	nop
 1029a0e:	lea    rcx,[rdi+0xa8]
 1029a15:	call   QWORD PTR [rip+0xfffffffffffd80d5]        # 0x1001af0
 1029a1b:	test   eax,eax
 1029a1d:	je     0x1029f66
 1029a23:	lea    rcx,[rdi+0xa8]
 1029a2a:	call   QWORD PTR [rip+0xfffffffffffd80b8]        # 0x1001ae8
 1029a30:	mov    rcx,rax
 1029a33:	mov    QWORD PTR [rsp+0x30],r12
 1029a38:	mov    DWORD PTR [rsp+0x28],0x100080
 1029a40:	mov    DWORD PTR [rsp+0x20],0x3
 1029a48:	xor    r9d,r9d
 1029a4b:	mov    edx,0x80000000
 1029a50:	lea    r8d,[r12+0x1]
 1029a55:	call   QWORD PTR [rip+0xfffffffffffd7785]        # 0x10011e0
 1029a5b:	mov    rsi,rax
 1029a5e:	mov    QWORD PTR [rsp+0x60],rax
 1029a63:	cmp    rax,0xffffffffffffffff
 1029a67:	jne    0x1029ab4
 1029a69:	mov    rbx,QWORD PTR [rdi]
 1029a6c:	call   QWORD PTR [rip+0xfffffffffffd7ade]        # 0x1001550
 1029a72:	mov    edx,eax
 1029a74:	mov    BYTE PTR [rsp+0x28],0x1
 1029a79:	mov    BYTE PTR [rsp+0x20],0x1
 1029a7e:	xor    r9d,r9d
 1029a81:	xor    r8d,r8d
 1029a84:	mov    rcx,rdi
 1029a87:	call   QWORD PTR [rbx]
 1029a89:	nop
 1029a8a:	lea    rcx,[rsp+0x78]
 1029a8f:	call   QWORD PTR [rip+0xfffffffffffd8013]        # 0x1001aa8
 1029a95:	nop
 1029a96:	lea    rcx,[rsp+0x58]
 1029a9b:	call   QWORD PTR [rip+0xfffffffffffd8007]        # 0x1001aa8
 1029aa1:	nop
 1029aa2:	lea    rcx,[rsp+0x68]
 1029aa7:	call   QWORD PTR [rip+0xfffffffffffd7ffb]        # 0x1001aa8
 1029aad:	xor    al,al
 1029aaf:	jmp    0x102a1c9
 1029ab4:	lea    r14,[rdi+0x120]
 1029abb:	mov    r8,QWORD PTR [r14+0x8]
 1029abf:	mov    eax,r12d
 1029ac2:	test   r8,r8
 1029ac5:	setne  al
 1029ac8:	test   eax,eax
 1029aca:	jne    0x1029ad2
 1029acc:	call   0x103f972
 1029ad1:	int3   
 1029ad2:	mov    eax,r12d
 1029ad5:	test   rbx,rbx
 1029ad8:	setne  al
 1029adb:	test   eax,eax
 1029add:	jne    0x1029ae5
 1029adf:	call   0x103f972
 1029ae4:	int3   
 1029ae5:	cmp    rbx,0xffffffffffffffff
 1029ae9:	jne    0x1029b25
 1029aeb:	mov    ecx,r12d
 1029aee:	mov    edx,DWORD PTR [r14+0x10]
 1029af2:	test   edx,edx
 1029af4:	je     0x1029b12
 1029af6:	mov    rax,r8
 1029af9:	nop    DWORD PTR [rax+0x0]
 1029b00:	mov    rbx,QWORD PTR [rax]
 1029b03:	test   rbx,rbx
 1029b06:	jne    0x1029b12
 1029b08:	inc    ecx
 1029b0a:	add    rax,0x8
 1029b0e:	cmp    ecx,edx
 1029b10:	jb     0x1029b00
 1029b12:	mov    eax,r12d
 1029b15:	test   rbx,rbx
 1029b18:	setne  al
 1029b1b:	test   eax,eax
 1029b1d:	jne    0x1029b25
 1029b1f:	call   0x103f972
 1029b24:	int3   
 1029b25:	cmp    QWORD PTR [rbx+0x10],0x0
 1029b2a:	jne    0x1029b54
 1029b2c:	mov    ecx,DWORD PTR [r14+0x10]
 1029b30:	xor    edx,edx
 1029b32:	mov    eax,DWORD PTR [rbx+0x18]
 1029b35:	div    ecx
 1029b37:	inc    edx
 1029b39:	movsxd rax,edx
 1029b3c:	cmp    edx,ecx
 1029b3e:	jae    0x1029b54
 1029b40:	lea    rax,[r8+rax*8]
 1029b44:	cmp    QWORD PTR [rax],0x0
 1029b48:	jne    0x1029b54
 1029b4a:	inc    edx
 1029b4c:	add    rax,0x8
 1029b50:	cmp    edx,ecx
 1029b52:	jb     0x1029b44
 1029b54:	mov    rdx,rbx
 1029b57:	lea    rcx,[rsp+0x68]
 1029b5c:	call   QWORD PTR [rip+0xfffffffffffd7f3e]        # 0x1001aa0
 1029b62:	lea    rdx,[rbx+0x8]
 1029b66:	lea    rcx,[rsp+0x58]
 1029b6b:	call   QWORD PTR [rip+0xfffffffffffd7f2f]        # 0x1001aa0
 1029b71:	mov    rcx,r14
 1029b74:	call   0x1012a20
 1029b79:	mov    DWORD PTR [rsp+0x48],r12d
 1029b7e:	lea    rcx,[rsp+0x40]
 1029b83:	call   QWORD PTR [rip+0xfffffffffffd7f37]        # 0x1001ac0
 1029b89:	nop
 1029b8a:	mov    QWORD PTR [rsp+0x20],r12
 1029b8f:	lea    r9,[rsp+0x48]
 1029b94:	mov    r8d,0x7fe
 1029b9a:	lea    rdx,[rbp-0x50]
 1029b9e:	mov    rcx,rsi
 1029ba1:	call   QWORD PTR [rip+0xfffffffffffd77a9]        # 0x1001350
 1029ba7:	test   eax,eax
 1029ba9:	je     0x1029efd
 1029baf:	xor    r8d,r8d
 1029bb2:	mov    edx,DWORD PTR [rsp+0x48]
 1029bb6:	lea    rcx,[rbp-0x50]
 1029bba:	call   QWORD PTR [rip+0xfffffffffffd7478]        # 0x1001038
 1029bc0:	movsxd r15,eax
 1029bc3:	xor    r9d,r9d
 1029bc6:	xor    r8d,r8d
 1029bc9:	xor    edx,edx
 1029bcb:	mov    rcx,rsi
 1029bce:	call   QWORD PTR [rip+0xfffffffffffd7784]        # 0x1001358
 1029bd4:	mov    QWORD PTR [rsp+0x20],r12
 1029bd9:	lea    r9,[rsp+0x48]
 1029bde:	mov    r8d,0x7fe
 1029be4:	lea    rdx,[rbp-0x50]
 1029be8:	mov    rcx,rsi
 1029beb:	call   QWORD PTR [rip+0xfffffffffffd775f]        # 0x1001350
 1029bf1:	test   eax,eax
 1029bf3:	je     0x1029eda
 1029bf9:	mov    r13d,0xa
 1029bff:	nop
 1029c00:	mov    eax,DWORD PTR [rsp+0x48]
 1029c04:	test   eax,eax
 1029c06:	je     0x1029eda
 1029c0c:	test   r15,r15
 1029c0f:	jne    0x1029c7e
 1029c11:	lea    edi,[r15+0x1]
 1029c15:	lea    ebx,[rax+0x1]
 1029c18:	add    rbx,rbx
 1029c1b:	call   QWORD PTR [rip+0xfffffffffffd7937]        # 0x1001558
 1029c21:	mov    rcx,rax
 1029c24:	mov    r8,rbx
 1029c27:	lea    edx,[rdi+0x7]
 1029c2a:	call   QWORD PTR [rip+0xfffffffffffd7938]        # 0x1001568
 1029c30:	mov    rbx,rax
 1029c33:	mov    r9d,DWORD PTR [rsp+0x48]
 1029c38:	mov    DWORD PTR [rsp+0x28],r9d
 1029c3d:	mov    QWORD PTR [rsp+0x20],rax
 1029c42:	lea    r8,[rbp-0x50]
 1029c46:	xor    edx,edx
 1029c48:	xor    ecx,ecx
 1029c4a:	call   QWORD PTR [rip+0xfffffffffffd77e0]        # 0x1001430
 1029c50:	mov    r11d,DWORD PTR [rsp+0x48]
 1029c55:	mov    WORD PTR [rbx+r11*2],r12w
 1029c5a:	mov    rdx,rbx
 1029c5d:	lea    rcx,[rsp+0x40]
 1029c62:	call   QWORD PTR [rip+0xfffffffffffd7e30]        # 0x1001a98
 1029c68:	call   QWORD PTR [rip+0xfffffffffffd78ea]        # 0x1001558
 1029c6e:	mov    rcx,rax
 1029c71:	mov    r8,rbx
 1029c74:	xor    edx,edx
 1029c76:	call   QWORD PTR [rip+0xfffffffffffd78e4]        # 0x1001560
 1029c7c:	jmp    0x1029caa
 1029c7e:	shr    rax,1
 1029c81:	add    rax,rax
 1029c84:	cmp    rax,0x800
 1029c8a:	jae    0x1029ed2
 1029c90:	mov    WORD PTR [rbp+rax*1-0x50],r12w
 1029c96:	mov    edi,0x2
 1029c9b:	lea    rdx,[rbp-0x50]
 1029c9f:	lea    rcx,[rsp+0x40]
 1029ca4:	call   QWORD PTR [rip+0xfffffffffffd7dee]        # 0x1001a98
 1029caa:	mov    edx,r13d
 1029cad:	lea    rcx,[rsp+0x40]
 1029cb2:	call   QWORD PTR [rip+0xfffffffffffd7d98]        # 0x1001a50
 1029cb8:	cmp    eax,0xffffffff
 1029cbb:	je     0x1029d0c
 1029cbd:	lea    r8d,[rax+0x1]
 1029cc1:	mov    eax,r8d
 1029cc4:	imul   eax,edi
 1029cc7:	mov    ebx,DWORD PTR [rsp+0x48]
 1029ccb:	sub    ebx,eax
 1029ccd:	lea    rdx,[rbp-0x70]
 1029cd1:	lea    rcx,[rsp+0x40]
 1029cd6:	call   QWORD PTR [rip+0xfffffffffffd7d6c]        # 0x1001a48
 1029cdc:	nop
 1029cdd:	mov    rdx,rax
 1029ce0:	lea    rcx,[rsp+0x40]
 1029ce5:	call   QWORD PTR [rip+0xfffffffffffd7db5]        # 0x1001aa0
 1029ceb:	nop
 1029cec:	lea    rcx,[rbp-0x70]
 1029cf0:	call   QWORD PTR [rip+0xfffffffffffd7db2]        # 0x1001aa8
 1029cf6:	neg    ebx
 1029cf8:	mov    r9d,0x1
 1029cfe:	xor    r8d,r8d
 1029d01:	mov    edx,ebx
 1029d03:	mov    rcx,rsi
 1029d06:	call   QWORD PTR [rip+0xfffffffffffd764c]        # 0x1001358
 1029d0c:	lea    rcx,[rsp+0x50]
 1029d11:	call   QWORD PTR [rip+0xfffffffffffd7da9]        # 0x1001ac0
 1029d17:	nop
 1029d18:	xor    edx,edx
 1029d1a:	lea    rcx,[rsp+0x40]
 1029d1f:	call   QWORD PTR [rip+0xfffffffffffd7cab]        # 0x10019d0
 1029d25:	mov    ecx,0xfeff
 1029d2a:	cmp    cx,ax
 1029d2d:	jne    0x1029d5e
 1029d2f:	mov    r8d,0x1
 1029d35:	lea    rdx,[rbp-0x60]
 1029d39:	lea    rcx,[rsp+0x40]
 1029d3e:	call   QWORD PTR [rip+0xfffffffffffd7bdc]        # 0x1001920
 1029d44:	nop
 1029d45:	mov    rdx,rax
 1029d48:	lea    rcx,[rsp+0x40]
 1029d4d:	call   QWORD PTR [rip+0xfffffffffffd7d4d]        # 0x1001aa0
 1029d53:	nop
 1029d54:	lea    rcx,[rbp-0x60]
 1029d58:	call   QWORD PTR [rip+0xfffffffffffd7d4a]        # 0x1001aa8
 1029d5e:	xor    r8d,r8d
 1029d61:	lea    rdx,[rip+0xfffffffffffd8358]        # 0x10020c0
 1029d68:	lea    rcx,[rsp+0x40]
 1029d6d:	call   QWORD PTR [rip+0xfffffffffffd7ce5]        # 0x1001a58
 1029d73:	lea    rcx,[rsp+0x40]
 1029d78:	cmp    eax,0xffffffff
 1029d7b:	je     0x1029e80
 1029d81:	mov    DWORD PTR [rsp+0x70],r12d
 1029d86:	call   QWORD PTR [rip+0xfffffffffffd7d5c]        # 0x1001ae8
 1029d8c:	mov    rdx,rax
 1029d8f:	lea    r9,[rsp+0x70]
 1029d94:	movzx  r8d,r13w
 1029d98:	lea    rcx,[rbp-0x68]
 1029d9c:	call   0x1035520
 1029da1:	nop
 1029da2:	mov    rdx,rax
 1029da5:	lea    rcx,[rsp+0x50]
 1029daa:	call   QWORD PTR [rip+0xfffffffffffd7cf0]        # 0x1001aa0
 1029db0:	nop
 1029db1:	lea    rcx,[rbp-0x68]
 1029db5:	call   QWORD PTR [rip+0xfffffffffffd7ced]        # 0x1001aa8
 1029dbb:	lea    rdx,[rip+0xfffffffffffd804e]        # 0x1001e10
 1029dc2:	lea    rcx,[rsp+0x50]
 1029dc7:	call   QWORD PTR [rip+0xfffffffffffd7c33]        # 0x1001a00
 1029dcd:	test   eax,eax
 1029dcf:	je     0x1029ea0
 1029dd5:	lea    rcx,[rsp+0x50]
 1029dda:	call   QWORD PTR [rip+0xfffffffffffd7d08]        # 0x1001ae8
 1029de0:	mov    rdx,rax
 1029de3:	lea    rcx,[rbp-0x80]
 1029de7:	call   0x10353c0
 1029dec:	nop
 1029ded:	mov    rdx,rax
 1029df0:	lea    rcx,[rsp+0x50]
 1029df5:	call   QWORD PTR [rip+0xfffffffffffd7ca5]        # 0x1001aa0
 1029dfb:	nop
 1029dfc:	lea    rcx,[rbp-0x80]
 1029e00:	call   QWORD PTR [rip+0xfffffffffffd7ca2]        # 0x1001aa8
 1029e06:	lea    rcx,[rsp+0x50]
 1029e0b:	call   QWORD PTR [rip+0xfffffffffffd7cd7]        # 0x1001ae8
 1029e11:	mov    rdx,rax
 1029e14:	mov    rcx,r14
 1029e17:	call   0x100ea00
 1029e1c:	mov    rcx,rax
 1029e1f:	lea    rdx,[rsp+0x58]
 1029e24:	call   QWORD PTR [rip+0xfffffffffffd7c76]        # 0x1001aa0
 1029e2a:	lea    rcx,[rsp+0x40]
 1029e2f:	call   QWORD PTR [rip+0xfffffffffffd7cb3]        # 0x1001ae8
 1029e35:	mov    rdx,rax
 1029e38:	lea    r9,[rsp+0x70]
 1029e3d:	movzx  r8d,r13w
 1029e41:	lea    rcx,[rbp-0x78]
 1029e45:	call   0x1035520
 1029e4a:	nop
 1029e4b:	mov    rdx,rax
 1029e4e:	lea    rcx,[rsp+0x50]
 1029e53:	call   QWORD PTR [rip+0xfffffffffffd7c47]        # 0x1001aa0
 1029e59:	nop
 1029e5a:	lea    rcx,[rbp-0x78]
 1029e5e:	call   QWORD PTR [rip+0xfffffffffffd7c44]        # 0x1001aa8
 1029e64:	lea    rdx,[rip+0xfffffffffffd7fa5]        # 0x1001e10
 1029e6b:	lea    rcx,[rsp+0x50]
 1029e70:	call   QWORD PTR [rip+0xfffffffffffd7b8a]        # 0x1001a00
 1029e76:	test   eax,eax
 1029e78:	jne    0x1029dd5
 1029e7e:	jmp    0x1029ea0
 1029e80:	call   QWORD PTR [rip+0xfffffffffffd7c62]        # 0x1001ae8
 1029e86:	mov    rdx,rax
 1029e89:	mov    rcx,r14
 1029e8c:	call   0x100ea00
 1029e91:	mov    rcx,rax
 1029e94:	lea    rdx,[rsp+0x58]
 1029e99:	call   QWORD PTR [rip+0xfffffffffffd7c01]        # 0x1001aa0
 1029e9f:	nop
 1029ea0:	lea    rcx,[rsp+0x50]
 1029ea5:	call   QWORD PTR [rip+0xfffffffffffd7bfd]        # 0x1001aa8
 1029eab:	mov    QWORD PTR [rsp+0x20],r12
 1029eb0:	lea    r9,[rsp+0x48]
 1029eb5:	mov    r8d,0x7fe
 1029ebb:	lea    rdx,[rbp-0x50]
 1029ebf:	mov    rcx,rsi
 1029ec2:	call   QWORD PTR [rip+0xfffffffffffd7488]        # 0x1001350
 1029ec8:	test   eax,eax
 1029eca:	jne    0x1029c00
 1029ed0:	jmp    0x1029eda
 1029ed2:	xor    ecx,ecx
 1029ed4:	call   0x103fd38
 1029ed9:	nop
 1029eda:	lea    rcx,[rsp+0x40]
 1029edf:	call   QWORD PTR [rip+0xfffffffffffd7bc3]        # 0x1001aa8
 1029ee5:	nop
 1029ee6:	mov    rcx,rsi
 1029ee9:	call   QWORD PTR [rip+0xfffffffffffd75e9]        # 0x10014d8
 1029eef:	mov    QWORD PTR [rsp+0x60],0xffffffffffffffff
 1029ef8:	jmp    0x102a1a4
 1029efd:	mov    rbx,QWORD PTR [rdi]
 1029f00:	call   QWORD PTR [rip+0xfffffffffffd764a]        # 0x1001550
 1029f06:	mov    edx,eax
 1029f08:	mov    BYTE PTR [rsp+0x28],0x1
 1029f0d:	mov    BYTE PTR [rsp+0x20],0x1
 1029f12:	xor    r9d,r9d
 1029f15:	xor    r8d,r8d
 1029f18:	mov    rcx,rdi
 1029f1b:	call   QWORD PTR [rbx]
 1029f1d:	nop
 1029f1e:	lea    rcx,[rsp+0x40]
 1029f23:	call   QWORD PTR [rip+0xfffffffffffd7b7f]        # 0x1001aa8
 1029f29:	nop
 1029f2a:	mov    rcx,rsi
 1029f2d:	call   QWORD PTR [rip+0xfffffffffffd75a5]        # 0x10014d8
 1029f33:	mov    QWORD PTR [rsp+0x60],0xffffffffffffffff
 1029f3c:	lea    rcx,[rsp+0x78]
 1029f41:	call   QWORD PTR [rip+0xfffffffffffd7b61]        # 0x1001aa8
 1029f47:	nop
 1029f48:	lea    rcx,[rsp+0x58]
 1029f4d:	call   QWORD PTR [rip+0xfffffffffffd7b55]        # 0x1001aa8
 1029f53:	nop
 1029f54:	lea    rcx,[rsp+0x68]
 1029f59:	call   QWORD PTR [rip+0xfffffffffffd7b49]        # 0x1001aa8
 1029f5f:	xor    al,al
 1029f61:	jmp    0x102a1c9
 1029f66:	lea    rcx,[rdi+0xa0]
 1029f6d:	call   QWORD PTR [rip+0xfffffffffffd7b7d]        # 0x1001af0
 1029f73:	test   eax,eax
 1029f75:	je     0x102a1a4
 1029f7b:	lea    r13,[rdi+0x120]
 1029f82:	mov    r9,QWORD PTR [r13+0x8]
 1029f86:	mov    eax,r12d
 1029f89:	test   r9,r9
 1029f8c:	setne  al
 1029f8f:	test   eax,eax
 1029f91:	jne    0x1029f99
 1029f93:	call   0x103f972
 1029f98:	int3   
 1029f99:	mov    eax,r12d
 1029f9c:	test   rbx,rbx
 1029f9f:	setne  al
 1029fa2:	test   eax,eax
 1029fa4:	jne    0x1029fac
 1029fa6:	call   0x103f972
 1029fab:	int3   
 1029fac:	cmp    rbx,0xffffffffffffffff
 1029fb0:	jne    0x1029fe5
 1029fb2:	mov    ecx,r12d
 1029fb5:	mov    edx,DWORD PTR [r13+0x10]
 1029fb9:	test   edx,edx
 1029fbb:	je     0x1029fd2
 1029fbd:	mov    rax,r9
 1029fc0:	mov    rbx,QWORD PTR [rax]
 1029fc3:	test   rbx,rbx
 1029fc6:	jne    0x1029fd2
 1029fc8:	inc    ecx
 1029fca:	add    rax,0x8
 1029fce:	cmp    ecx,edx
 1029fd0:	jb     0x1029fc0
 1029fd2:	mov    eax,r12d
 1029fd5:	test   rbx,rbx
 1029fd8:	setne  al
 1029fdb:	test   eax,eax
 1029fdd:	jne    0x1029fe5
 1029fdf:	call   0x103f972
 1029fe4:	int3   
 1029fe5:	cmp    QWORD PTR [rbx+0x10],0x0
 1029fea:	jne    0x102a017
 1029fec:	mov    r8d,DWORD PTR [r13+0x10]
 1029ff0:	xor    edx,edx
 1029ff2:	mov    eax,DWORD PTR [rbx+0x18]
 1029ff5:	div    r8d
 1029ff8:	inc    edx
 1029ffa:	movsxd rax,edx
 1029ffd:	cmp    edx,r8d
 102a000:	jae    0x102a017
 102a002:	lea    rax,[r9+rax*8]
 102a006:	cmp    QWORD PTR [rax],0x0
 102a00a:	jne    0x102a017
 102a00c:	inc    edx
 102a00e:	add    rax,0x8
 102a012:	cmp    edx,r8d
 102a015:	jb     0x102a006
 102a017:	mov    rdx,rbx
 102a01a:	lea    rcx,[rsp+0x68]
 102a01f:	call   QWORD PTR [rip+0xfffffffffffd7a7b]        # 0x1001aa0
 102a025:	lea    rdx,[rbx+0x8]
 102a029:	lea    rcx,[rsp+0x58]
 102a02e:	call   QWORD PTR [rip+0xfffffffffffd7a6c]        # 0x1001aa0
 102a034:	mov    rcx,r13
 102a037:	call   0x1012a20
 102a03c:	lea    rcx,[rdi+0xa0]
 102a043:	call   QWORD PTR [rip+0xfffffffffffd78c7]        # 0x1001910
 102a049:	mov    rdx,rax
 102a04c:	lea    rcx,[rsp+0x50]
 102a051:	call   QWORD PTR [rip+0xfffffffffffd7961]        # 0x10019b8
 102a057:	nop
 102a058:	lea    rcx,[rsp+0x40]
 102a05d:	call   QWORD PTR [rip+0xfffffffffffd7a5d]        # 0x1001ac0
 102a063:	nop
 102a064:	lea    rcx,[rsp+0x50]
 102a069:	call   QWORD PTR [rip+0xfffffffffffd7a81]        # 0x1001af0
 102a06f:	mov    r14d,r12d
 102a072:	mov    r15d,r12d
 102a075:	mov    edi,r12d
 102a078:	lea    r12d,[rax+0x1]
 102a07c:	test   r12d,r12d
 102a07f:	js     0x102a18c
 102a085:	cmp    edi,r12d
 102a088:	je     0x102a0f6
 102a08a:	mov    r9d,0x1
 102a090:	mov    r8d,edi
 102a093:	lea    rdx,[rbp-0x78]
 102a097:	lea    rcx,[rsp+0x50]
 102a09c:	call   QWORD PTR [rip+0xfffffffffffd7876]        # 0x1001918
 102a0a2:	mov    rbx,rax
 102a0a5:	or     esi,0x1
 102a0a8:	mov    DWORD PTR [rsp+0x74],esi
 102a0ac:	mov    rcx,rax
 102a0af:	call   QWORD PTR [rip+0xfffffffffffd79b3]        # 0x1001a68
 102a0b5:	mov    r8,rax
 102a0b8:	lea    rdx,[rip+0xfffffffffffdc555]        # 0x1006614
 102a0bf:	lea    rcx,[rsp+0x60]
 102a0c4:	call   QWORD PTR [rip+0xfffffffffffd787e]        # 0x1001948
 102a0ca:	nop
 102a0cb:	lea    rcx,[rsp+0x60]
 102a0d0:	call   QWORD PTR [rip+0xfffffffffffd7a12]        # 0x1001ae8
 102a0d6:	mov    rdx,rax
 102a0d9:	mov    rcx,rbx
 102a0dc:	call   QWORD PTR [rip+0xfffffffffffd791e]        # 0x1001a00
 102a0e2:	test   eax,eax
 102a0e4:	sete   bl
 102a0e7:	lea    rcx,[rsp+0x60]
 102a0ec:	call   QWORD PTR [rip+0xfffffffffffd79b6]        # 0x1001aa8
 102a0f2:	test   bl,bl
 102a0f4:	je     0x102a0f8
 102a0f6:	mov    bl,0x1
 102a0f8:	test   sil,0x1
 102a0fc:	je     0x102a10f
 102a0fe:	and    esi,0xfffffffe
 102a101:	mov    DWORD PTR [rsp+0x74],esi
 102a105:	lea    rcx,[rbp-0x78]
 102a109:	call   QWORD PTR [rip+0xfffffffffffd7999]        # 0x1001aa8
 102a10f:	test   bl,bl
 102a111:	je     0x102a173
 102a113:	test   r14d,r14d
 102a116:	je     0x102a17e
 102a118:	mov    r9d,edi
 102a11b:	sub    r9d,r15d
 102a11e:	mov    r8d,r15d
 102a121:	lea    rdx,[rbp-0x80]
 102a125:	lea    rcx,[rsp+0x50]
 102a12a:	call   QWORD PTR [rip+0xfffffffffffd77e8]        # 0x1001918
 102a130:	nop
 102a131:	mov    rdx,rax
 102a134:	lea    rcx,[rsp+0x40]
 102a139:	call   QWORD PTR [rip+0xfffffffffffd7961]        # 0x1001aa0
 102a13f:	nop
 102a140:	lea    rcx,[rbp-0x80]
 102a144:	call   QWORD PTR [rip+0xfffffffffffd795e]        # 0x1001aa8
 102a14a:	xor    r14d,r14d
 102a14d:	lea    rcx,[rsp+0x40]
 102a152:	call   QWORD PTR [rip+0xfffffffffffd7990]        # 0x1001ae8
 102a158:	mov    rdx,rax
 102a15b:	mov    rcx,r13
 102a15e:	call   0x100ea00
 102a163:	mov    rcx,rax
 102a166:	lea    rdx,[rsp+0x58]
 102a16b:	call   QWORD PTR [rip+0xfffffffffffd792f]        # 0x1001aa0
 102a171:	jmp    0x102a17e
 102a173:	test   r14d,r14d
 102a176:	jne    0x102a181
 102a178:	mov    r14d,0x1
 102a17e:	mov    r15d,edi
 102a181:	inc    edi
 102a183:	cmp    edi,r12d
 102a186:	jle    0x102a088
 102a18c:	lea    rcx,[rsp+0x40]
 102a191:	call   QWORD PTR [rip+0xfffffffffffd7911]        # 0x1001aa8
 102a197:	nop
 102a198:	lea    rcx,[rsp+0x50]
 102a19d:	call   QWORD PTR [rip+0xfffffffffffd7905]        # 0x1001aa8
 102a1a3:	nop
 102a1a4:	lea    rcx,[rsp+0x78]
 102a1a9:	call   QWORD PTR [rip+0xfffffffffffd78f9]        # 0x1001aa8
 102a1af:	nop
 102a1b0:	lea    rcx,[rsp+0x58]
 102a1b5:	call   QWORD PTR [rip+0xfffffffffffd78ed]        # 0x1001aa8
 102a1bb:	nop
 102a1bc:	lea    rcx,[rsp+0x68]
 102a1c1:	call   QWORD PTR [rip+0xfffffffffffd78e1]        # 0x1001aa8
 102a1c7:	mov    al,0x1
 102a1c9:	mov    rcx,QWORD PTR [rbp+0x7b0]
 102a1d0:	xor    rcx,rsp
 102a1d3:	call   0x103ff40
 102a1d8:	lea    r11,[rsp+0x8c0]
 102a1e0:	mov    rbx,QWORD PTR [r11+0x38]
 102a1e4:	mov    rsi,QWORD PTR [r11+0x40]
 102a1e8:	mov    rdi,QWORD PTR [r11+0x48]
 102a1ec:	mov    rsp,r11
 102a1ef:	pop    r15
 102a1f1:	pop    r14
 102a1f3:	pop    r13
 102a1f5:	pop    r12
 102a1f7:	pop    rbp
 102a1f8:	ret    
 102a1f9:	int3   
 102a1fa:	int3   
 102a1fb:	int3   
 102a1fc:	int3   
 102a1fd:	int3   
 102a1fe:	int3   
 102a1ff:	int3   
 102a200:	rex push rbp
 102a202:	push   rsi
 102a203:	push   rdi
 102a204:	mov    rbp,rsp
 102a207:	sub    rsp,0x50
 102a20b:	mov    QWORD PTR [rbp-0x10],0xfffffffffffffffe
 102a213:	mov    QWORD PTR [rsp+0x70],rbx
 102a218:	mov    rsi,rcx
 102a21b:	mov    DWORD PTR [rbp-0x30],0x0
 102a222:	xor    bl,bl
 102a224:	lea    rcx,[rbp-0x28]
 102a228:	call   QWORD PTR [rip+0xfffffffffffd7882]        # 0x1001ab0
 102a22e:	nop
 102a22f:	mov    edx,0x3d
 102a234:	xor    r8d,r8d
 102a237:	lea    rcx,[rbp-0x28]
 102a23b:	call   QWORD PTR [rip+0xfffffffffffd7717]        # 0x1001958
 102a241:	cmp    eax,0xffffffff
 102a244:	je     0x102a5ab
 102a24a:	lea    rcx,[rbp-0x28]
 102a24e:	call   QWORD PTR [rip+0xfffffffffffd7824]        # 0x1001a78
 102a254:	lea    rcx,[rbp-0x28]
 102a258:	call   QWORD PTR [rip+0xfffffffffffd7812]        # 0x1001a70
 102a25e:	xchg   ax,ax
 102a260:	lea    r8,[rip+0xfffffffffffdb525]        # 0x100578c
 102a267:	lea    rdx,[rip+0xfffffffffffdb522]        # 0x1005790
 102a26e:	lea    rcx,[rbp-0x28]
 102a272:	call   QWORD PTR [rip+0xfffffffffffd7738]        # 0x10019b0
 102a278:	test   eax,eax
 102a27a:	jne    0x102a260
 102a27c:	nop    DWORD PTR [rax+0x0]
 102a280:	lea    r8,[rip+0xfffffffffffdb505]        # 0x100578c
 102a287:	lea    rdx,[rip+0xfffffffffffdb50a]        # 0x1005798
 102a28e:	lea    rcx,[rbp-0x28]
 102a292:	call   QWORD PTR [rip+0xfffffffffffd7718]        # 0x10019b0
 102a298:	test   eax,eax
 102a29a:	jne    0x102a280
 102a29c:	lea    edx,[rax+0x3d]
 102a29f:	xor    r8d,r8d
 102a2a2:	lea    rcx,[rbp-0x28]
 102a2a6:	call   QWORD PTR [rip+0xfffffffffffd76ac]        # 0x1001958
 102a2ac:	mov    ebx,eax
 102a2ae:	lea    rcx,[rbp+0x38]
 102a2b2:	call   QWORD PTR [rip+0xfffffffffffd7808]        # 0x1001ac0
 102a2b8:	nop
 102a2b9:	lea    rcx,[rbp+0x30]
 102a2bd:	call   QWORD PTR [rip+0xfffffffffffd77fd]        # 0x1001ac0
 102a2c3:	nop
 102a2c4:	cmp    ebx,0xffffffff
 102a2c7:	je     0x102a593
 102a2cd:	mov    r8d,ebx
 102a2d0:	lea    rdx,[rbp-0x20]
 102a2d4:	lea    rcx,[rbp-0x28]
 102a2d8:	call   QWORD PTR [rip+0xfffffffffffd776a]        # 0x1001a48
 102a2de:	nop
 102a2df:	mov    rdx,rax
 102a2e2:	lea    rcx,[rbp+0x38]
 102a2e6:	call   QWORD PTR [rip+0xfffffffffffd77b4]        # 0x1001aa0
 102a2ec:	nop
 102a2ed:	lea    rcx,[rbp-0x20]
 102a2f1:	call   QWORD PTR [rip+0xfffffffffffd77b1]        # 0x1001aa8
 102a2f7:	lea    r8d,[rbx+0x1]
 102a2fb:	lea    rdx,[rbp-0x20]
 102a2ff:	lea    rcx,[rbp-0x28]
 102a303:	call   QWORD PTR [rip+0xfffffffffffd7617]        # 0x1001920
 102a309:	nop
 102a30a:	mov    rdx,rax
 102a30d:	lea    rcx,[rbp+0x30]
 102a311:	call   QWORD PTR [rip+0xfffffffffffd7789]        # 0x1001aa0
 102a317:	nop
 102a318:	lea    rcx,[rbp-0x20]
 102a31c:	call   QWORD PTR [rip+0xfffffffffffd7786]        # 0x1001aa8
 102a322:	lea    rcx,[rbp+0x30]
 102a326:	call   QWORD PTR [rip+0xfffffffffffd77bc]        # 0x1001ae8
 102a32c:	mov    rdx,rax
 102a32f:	lea    rcx,[rbp-0x20]
 102a333:	call   0x10353c0
 102a338:	nop
 102a339:	mov    rdx,rax
 102a33c:	lea    rcx,[rbp+0x30]
 102a340:	call   QWORD PTR [rip+0xfffffffffffd775a]        # 0x1001aa0
 102a346:	nop
 102a347:	lea    rcx,[rbp-0x20]
 102a34b:	call   QWORD PTR [rip+0xfffffffffffd7757]        # 0x1001aa8
 102a351:	mov    ebx,0x1
 102a356:	mov    r8d,ebx
 102a359:	lea    rdx,[rbp-0x20]
 102a35d:	lea    rcx,[rbp+0x38]
 102a361:	call   QWORD PTR [rip+0xfffffffffffd76e1]        # 0x1001a48
 102a367:	mov    rdi,rax
 102a36a:	mov    rcx,rax
 102a36d:	call   QWORD PTR [rip+0xfffffffffffd777d]        # 0x1001af0
 102a373:	cmp    eax,ebx
 102a375:	jne    0x102a38d
 102a377:	xor    edx,edx
 102a379:	mov    rcx,rdi
 102a37c:	call   QWORD PTR [rip+0xfffffffffffd764e]        # 0x10019d0
 102a382:	cmp    ax,0x25
 102a386:	jne    0x102a38d
 102a388:	xor    dil,dil
 102a38b:	jmp    0x102a390
 102a38d:	mov    dil,0x1
 102a390:	lea    rcx,[rbp-0x20]
 102a394:	call   QWORD PTR [rip+0xfffffffffffd770e]        # 0x1001aa8
 102a39a:	test   dil,dil
 102a39d:	je     0x102a3cc
 102a39f:	lea    r8,[rbp+0x38]
 102a3a3:	lea    rdx,[rip+0xfffffffffffdc016]        # 0x10063c0
 102a3aa:	lea    rcx,[rbp-0x20]
 102a3ae:	call   0x1013d70
 102a3b3:	nop
 102a3b4:	mov    rdx,rax
 102a3b7:	lea    rcx,[rbp+0x38]
 102a3bb:	call   QWORD PTR [rip+0xfffffffffffd76df]        # 0x1001aa0
 102a3c1:	nop
 102a3c2:	lea    rcx,[rbp-0x20]
 102a3c6:	call   QWORD PTR [rip+0xfffffffffffd76dc]        # 0x1001aa8
 102a3cc:	mov    r8d,ebx
 102a3cf:	lea    rdx,[rbp-0x20]
 102a3d3:	lea    rcx,[rbp+0x38]
 102a3d7:	call   QWORD PTR [rip+0xfffffffffffd754b]        # 0x1001928
 102a3dd:	mov    rdi,rax
 102a3e0:	mov    rcx,rax
 102a3e3:	call   QWORD PTR [rip+0xfffffffffffd7707]        # 0x1001af0
 102a3e9:	cmp    eax,0x1
 102a3ec:	jne    0x102a404
 102a3ee:	xor    edx,edx
 102a3f0:	mov    rcx,rdi
 102a3f3:	call   QWORD PTR [rip+0xfffffffffffd75d7]        # 0x10019d0
 102a3f9:	cmp    ax,0x25
 102a3fd:	jne    0x102a404
 102a3ff:	xor    dil,dil
 102a402:	jmp    0x102a407
 102a404:	mov    dil,0x1
 102a407:	lea    rcx,[rbp-0x20]
 102a40b:	call   QWORD PTR [rip+0xfffffffffffd7697]        # 0x1001aa8
 102a411:	test   dil,dil
 102a414:	je     0x102a427
 102a416:	lea    rdx,[rip+0xfffffffffffdbfa3]        # 0x10063c0
 102a41d:	lea    rcx,[rbp+0x38]
 102a421:	call   QWORD PTR [rip+0xfffffffffffd7669]        # 0x1001a90
 102a427:	mov    r8d,ebx
 102a42a:	lea    rdx,[rbp-0x18]
 102a42e:	lea    rcx,[rbp+0x30]
 102a432:	call   QWORD PTR [rip+0xfffffffffffd7610]        # 0x1001a48
 102a438:	mov    rdi,rax
 102a43b:	mov    DWORD PTR [rbp-0x30],ebx
 102a43e:	mov    rcx,rax
 102a441:	call   QWORD PTR [rip+0xfffffffffffd76a9]        # 0x1001af0
 102a447:	cmp    eax,0x1
 102a44a:	jne    0x102a49d
 102a44c:	xor    edx,edx
 102a44e:	mov    rcx,rdi
 102a451:	call   QWORD PTR [rip+0xfffffffffffd7579]        # 0x10019d0
 102a457:	cmp    ax,0x25
 102a45b:	jne    0x102a49d
 102a45d:	mov    r8d,ebx
 102a460:	lea    rdx,[rbp-0x20]
 102a464:	lea    rcx,[rbp+0x30]
 102a468:	call   QWORD PTR [rip+0xfffffffffffd74ba]        # 0x1001928
 102a46e:	mov    rdi,rax
 102a471:	mov    ebx,0x3
 102a476:	mov    DWORD PTR [rbp-0x30],ebx
 102a479:	mov    rcx,rax
 102a47c:	call   QWORD PTR [rip+0xfffffffffffd766e]        # 0x1001af0
 102a482:	cmp    eax,0x1
 102a485:	jne    0x102a49d
 102a487:	xor    edx,edx
 102a489:	mov    rcx,rdi
 102a48c:	call   QWORD PTR [rip+0xfffffffffffd753e]        # 0x10019d0
 102a492:	cmp    ax,0x25
 102a496:	jne    0x102a49d
 102a498:	mov    dil,0x1
 102a49b:	jmp    0x102a4a0
 102a49d:	xor    dil,dil
 102a4a0:	test   bl,0x2
 102a4a3:	je     0x102a4b6
 102a4a5:	and    ebx,0xfffffffd
 102a4a8:	mov    DWORD PTR [rbp-0x30],ebx
 102a4ab:	lea    rcx,[rbp-0x20]
 102a4af:	call   QWORD PTR [rip+0xfffffffffffd75f3]        # 0x1001aa8
 102a4b5:	nop
 102a4b6:	test   bl,0x1
 102a4b9:	je     0x102a4cb
 102a4bb:	and    ebx,0xfffffffe
 102a4be:	mov    DWORD PTR [rbp-0x30],ebx
 102a4c1:	lea    rcx,[rbp-0x18]
 102a4c5:	call   QWORD PTR [rip+0xfffffffffffd75dd]        # 0x1001aa8
 102a4cb:	test   dil,dil
 102a4ce:	je     0x102a56d
 102a4d4:	lea    rcx,[rbp-0x20]
 102a4d8:	call   QWORD PTR [rip+0xfffffffffffd75e2]        # 0x1001ac0
 102a4de:	nop
 102a4df:	lea    rcx,[rbp+0x30]
 102a4e3:	call   QWORD PTR [rip+0xfffffffffffd75ff]        # 0x1001ae8
 102a4e9:	mov    rdx,rax
 102a4ec:	lea    r8,[rbp-0x20]
 102a4f0:	lea    rcx,[rsi+0xe8]
 102a4f7:	call   0x1023ce0
 102a4fc:	test   eax,eax
 102a4fe:	je     0x102a53a
 102a500:	lea    rcx,[rbp+0x30]
 102a504:	call   QWORD PTR [rip+0xfffffffffffd75de]        # 0x1001ae8
 102a50a:	mov    rdx,rax
 102a50d:	lea    rcx,[rsi+0xe8]
 102a514:	call   0x100ea00
 102a519:	mov    rbx,rax
 102a51c:	lea    rcx,[rbp+0x38]
 102a520:	call   QWORD PTR [rip+0xfffffffffffd75c2]        # 0x1001ae8
 102a526:	mov    rdx,rax
 102a529:	lea    rcx,[rsi+0xe8]
 102a530:	call   0x100ea00
 102a535:	mov    rdx,rbx
 102a538:	jmp    0x102a557
 102a53a:	lea    rcx,[rbp+0x38]
 102a53e:	call   QWORD PTR [rip+0xfffffffffffd75a4]        # 0x1001ae8
 102a544:	mov    rdx,rax
 102a547:	lea    rcx,[rsi+0xe8]
 102a54e:	call   0x100ea00
 102a553:	lea    rdx,[rbp+0x30]
 102a557:	mov    rcx,rax
 102a55a:	call   QWORD PTR [rip+0xfffffffffffd7540]        # 0x1001aa0
 102a560:	nop
 102a561:	lea    rcx,[rbp-0x20]
 102a565:	call   QWORD PTR [rip+0xfffffffffffd753d]        # 0x1001aa8
 102a56b:	jmp    0x102a593
 102a56d:	lea    rcx,[rbp+0x38]
 102a571:	call   QWORD PTR [rip+0xfffffffffffd7571]        # 0x1001ae8
 102a577:	mov    rdx,rax
 102a57a:	lea    rcx,[rsi+0xe8]
 102a581:	call   0x100ea00
 102a586:	mov    rcx,rax
 102a589:	lea    rdx,[rbp+0x30]
 102a58d:	call   QWORD PTR [rip+0xfffffffffffd750d]        # 0x1001aa0
 102a593:	mov    bl,0x1
 102a595:	lea    rcx,[rbp+0x30]
 102a599:	call   QWORD PTR [rip+0xfffffffffffd7509]        # 0x1001aa8
 102a59f:	nop
 102a5a0:	lea    rcx,[rbp+0x38]
 102a5a4:	call   QWORD PTR [rip+0xfffffffffffd74fe]        # 0x1001aa8
 102a5aa:	nop
 102a5ab:	lea    rcx,[rbp-0x28]
 102a5af:	call   QWORD PTR [rip+0xfffffffffffd74f3]        # 0x1001aa8
 102a5b5:	movzx  eax,bl
 102a5b8:	mov    rbx,QWORD PTR [rsp+0x70]
 102a5bd:	add    rsp,0x50
 102a5c1:	pop    rdi
 102a5c2:	pop    rsi
 102a5c3:	pop    rbp
 102a5c4:	ret    
 102a5c5:	int3   
 102a5c6:	int3   
 102a5c7:	int3   
 102a5c8:	int3   
 102a5c9:	int3   
 102a5ca:	int3   
 102a5cb:	int3   
 102a5cc:	int3   
 102a5cd:	int3   
 102a5ce:	int3   
 102a5cf:	int3   
 102a5d0:	rex push rbp
 102a5d2:	push   rsi
 102a5d3:	push   rdi
 102a5d4:	push   r12
 102a5d6:	push   r13
 102a5d8:	push   r14
 102a5da:	push   r15
 102a5dc:	lea    rbp,[rsp-0x210]
 102a5e4:	sub    rsp,0x310
 102a5eb:	mov    QWORD PTR [rbp-0x38],0xfffffffffffffffe
 102a5f3:	mov    QWORD PTR [rsp+0x358],rbx
 102a5fb:	mov    rax,QWORD PTR [rip+0x3926e]        # 0x1063870
 102a602:	xor    rax,rsp
 102a605:	mov    QWORD PTR [rbp+0x200],rax
 102a60c:	mov    r13,r8
 102a60f:	mov    r15d,edx
 102a612:	mov    DWORD PTR [rsp+0x58],edx
 102a616:	mov    rdi,rcx
 102a619:	xor    r14d,r14d
 102a61c:	mov    r12d,r14d
 102a61f:	mov    DWORD PTR [rsp+0x48],r14d
 102a624:	mov    bl,0x1
 102a626:	mov    BYTE PTR [rsp+0x41],bl
 102a62a:	xor    sil,sil
 102a62d:	mov    BYTE PTR [rsp+0x40],sil
 102a632:	cmp    edx,0x1
 102a635:	jle    0x102b3c6
 102a63b:	mov    DWORD PTR [rsp+0x44],0x1
 102a643:	lea    r10d,[r14+0x2f]
 102a647:	lea    r9,[rip+0xfffffffffffd59b2]        # 0x1000000
 102a64e:	mov    edx,0x2d
 102a653:	movsxd rcx,DWORD PTR [rsp+0x44]
 102a658:	mov    rax,rcx
 102a65b:	mov    r8,QWORD PTR [r13+rcx*8+0x0]
 102a660:	movzx  eax,WORD PTR [r8]
 102a664:	cmp    r10w,ax
 102a668:	je     0x102a714
 102a66e:	cmp    dx,ax
 102a671:	je     0x102a714
 102a677:	cmp    ecx,0x1
 102a67a:	jne    0x102b018
 102a680:	mov    rdx,r8
 102a683:	lea    rcx,[rsp+0x50]
 102a688:	call   QWORD PTR [rip+0xfffffffffffd7422]        # 0x1001ab0
 102a68e:	nop
 102a68f:	lea    rdx,[rip+0xfffffffffffdbd32]        # 0x10063c8
 102a696:	lea    rcx,[rsp+0x50]
 102a69b:	call   QWORD PTR [rip+0xfffffffffffd73bf]        # 0x1001a60
 102a6a1:	test   eax,eax
 102a6a3:	jne    0x102a6cc
 102a6a5:	mov    DWORD PTR [rdi+0xd8],0x4
 102a6af:	lea    rcx,[rsp+0x50]
 102a6b4:	call   QWORD PTR [rip+0xfffffffffffd73ee]        # 0x1001aa8
 102a6ba:	lea    r9,[rip+0xfffffffffffd593f]        # 0x1000000
 102a6c1:	mov    r10d,0x2f
 102a6c7:	jmp    0x102afe9
 102a6cc:	lea    rdx,[rip+0xfffffffffffdbd05]        # 0x10063d8
 102a6d3:	lea    rcx,[rsp+0x50]
 102a6d8:	call   QWORD PTR [rip+0xfffffffffffd7382]        # 0x1001a60
 102a6de:	test   eax,eax
 102a6e0:	jne    0x102a6ee
 102a6e2:	mov    DWORD PTR [rdi+0xd8],0x5
 102a6ec:	jmp    0x102a6af
 102a6ee:	lea    rdx,[rip+0xfffffffffffdbcf3]        # 0x10063e8
 102a6f5:	lea    rcx,[rsp+0x50]
 102a6fa:	call   QWORD PTR [rip+0xfffffffffffd7360]        # 0x1001a60
 102a700:	test   eax,eax
 102a702:	jne    0x102b006
 102a708:	mov    DWORD PTR [rdi+0xd8],0x6
 102a712:	jmp    0x102a6af
 102a714:	add    r8,0x2
 102a718:	mov    edx,DWORD PTR [rdi+0xd8]
 102a71e:	movzx  eax,WORD PTR [r8]
 102a722:	cmp    edx,0x4
 102a725:	jb     0x102a7f4
 102a72b:	cmp    eax,0x41
 102a72e:	je     0x102a739
 102a730:	cmp    eax,0x61
 102a733:	jne    0x102afe3
 102a739:	mov    QWORD PTR [rsp+0x28],0x104
 102a742:	lea    rax,[rbp-0x10]
 102a746:	mov    QWORD PTR [rsp+0x20],rax
 102a74b:	lea    r9,[rsp+0x44]
 102a750:	mov    rdx,r13
 102a753:	mov    ecx,r15d
 102a756:	call   0x10297e0
 102a75b:	cmp    r14w,WORD PTR [rbp-0x10]
 102a760:	je     0x102b0a6
 102a766:	lea    rcx,[rbp-0x10]
 102a76a:	or     rax,0xffffffffffffffff
 102a76e:	xchg   ax,ax
 102a770:	inc    rax
 102a773:	cmp    WORD PTR [rcx+rax*2],0x0
 102a778:	jne    0x102a770
 102a77a:	cmp    rax,0x10
 102a77e:	ja     0x102b01f
 102a784:	mov    r9d,0x5
 102a78a:	lea    r8,[rip+0xfffffffffffdbc6f]        # 0x1006400
 102a791:	lea    edx,[r9+0x7b]
 102a795:	lea    rcx,[rip+0x38cb4]        # 0x1063450
 102a79c:	call   QWORD PTR [rip+0xfffffffffffd6f06]        # 0x10016a8
 102a7a2:	mov    r9d,0x80
 102a7a8:	lea    r8,[rbp-0x10]
 102a7ac:	mov    edx,r9d
 102a7af:	lea    rcx,[rip+0x38b7a]        # 0x1063330
 102a7b6:	call   QWORD PTR [rip+0xfffffffffffd6eec]        # 0x10016a8
 102a7bc:	mov    WORD PTR [rip+0x38c96],r14w        # 0x106345a
 102a7c4:	mov    r9d,0x7b
 102a7ca:	lea    r8,[rbp-0x10]
 102a7ce:	lea    edx,[r9+0x5]
 102a7d2:	lea    rcx,[rip+0x38c77]        # 0x1063450
 102a7d9:	call   QWORD PTR [rip+0xfffffffffffd6fc9]        # 0x10017a8
 102a7df:	mov    WORD PTR [rip+0x38d67],r14w        # 0x106354e
 102a7e7:	mov    WORD PTR [rip+0x38c3f],r14w        # 0x106342e
 102a7ef:	jmp    0x102a6ba
 102a7f4:	add    eax,0xffffffbf
 102a7f7:	cmp    eax,0x38
 102a7fa:	ja     0x102afe3
 102a800:	cdqe   
 102a802:	movzx  eax,BYTE PTR [r9+rax*1+0x2b44c]
 102a80b:	mov    ecx,DWORD PTR [r9+rax*4+0x2b3f4]
 102a813:	add    rcx,r9
 102a816:	jmp    rcx
 102a818:	mov    QWORD PTR [rsp+0x28],0x104
 102a821:	lea    rax,[rbp-0x10]
 102a825:	mov    QWORD PTR [rsp+0x20],rax
 102a82a:	lea    r9,[rsp+0x44]
 102a82f:	mov    rdx,r13
 102a832:	mov    ecx,r15d
 102a835:	call   0x10297e0
 102a83a:	cmp    r14w,WORD PTR [rbp-0x10]
 102a83f:	je     0x102b0a6
 102a845:	lea    rcx,[rbp-0x10]
 102a849:	or     rax,0xffffffffffffffff
 102a84d:	nop    DWORD PTR [rax]
 102a850:	inc    rax
 102a853:	cmp    WORD PTR [rcx+rax*2],0x0
 102a858:	jne    0x102a850
 102a85a:	cmp    rax,0x10
 102a85e:	ja     0x102b0ca
 102a864:	jmp    0x102a784
 102a869:	mov    QWORD PTR [rsp+0x28],0x32
 102a872:	lea    rax,[rbp-0x10]
 102a876:	mov    QWORD PTR [rsp+0x20],rax
 102a87b:	lea    r9,[rsp+0x44]
 102a880:	mov    rdx,r13
 102a883:	mov    ecx,r15d
 102a886:	call   0x10297e0
 102a88b:	lea    rbx,[rdi+0x68]
 102a88f:	lea    rdx,[rbp-0x10]
 102a893:	mov    rcx,rbx
 102a896:	call   QWORD PTR [rip+0xfffffffffffd71fc]        # 0x1001a98
 102a89c:	mov    rcx,rbx
 102a89f:	call   QWORD PTR [rip+0xfffffffffffd724b]        # 0x1001af0
 102a8a5:	test   eax,eax
 102a8a7:	je     0x102b151
 102a8ad:	mov    sil,0x1
 102a8b0:	mov    BYTE PTR [rsp+0x40],sil
 102a8b5:	movzx  ebx,BYTE PTR [rsp+0x41]
 102a8ba:	lea    r9,[rip+0xfffffffffffd573f]        # 0x1000000
 102a8c1:	mov    r10d,0x2f
 102a8c7:	jmp    0x102afee
 102a8cc:	mov    QWORD PTR [rsp+0x28],0x2
 102a8d5:	lea    rax,[rbp-0x10]
 102a8d9:	mov    QWORD PTR [rsp+0x20],rax
 102a8de:	lea    r9,[rsp+0x44]
 102a8e3:	mov    rdx,r13
 102a8e6:	mov    ecx,r15d
 102a8e9:	call   0x10297e0
 102a8ee:	lea    r11,[rbp-0x10]
 102a8f2:	or     rax,0xffffffffffffffff
 102a8f6:	data16 nop WORD PTR [rax+rax*1+0x0]
 102a900:	inc    rax
 102a903:	cmp    WORD PTR [r11+rax*2],0x0
 102a909:	jne    0x102a900
 102a90b:	test   rax,rax
 102a90e:	je     0x102b199
 102a914:	lea    rcx,[rbp-0x10]
 102a918:	call   QWORD PTR [rip+0xfffffffffffd6e22]        # 0x1001740
 102a91e:	test   eax,eax
 102a920:	js     0x102b199
 102a926:	cmp    eax,0x2
 102a929:	jg     0x102b199
 102a92f:	mov    DWORD PTR [rdi+0xd0],eax
 102a935:	cmp    eax,0x3
 102a938:	jne    0x102a6ba
 102a93e:	lea    rdx,[rbp-0x10]
 102a942:	lea    rcx,[rip+0xfffffffffffdbac7]        # 0x1006410
 102a949:	call   0x1031960
 102a94e:	test   al,al
 102a950:	je     0x102b175
 102a956:	jmp    0x102a6ba
 102a95b:	mov    BYTE PTR [rdi+0xbb],0x1
 102a962:	jmp    0x102afe9
 102a967:	mov    QWORD PTR [rsp+0x28],0x32
 102a970:	lea    rax,[rbp-0x10]
 102a974:	mov    QWORD PTR [rsp+0x20],rax
 102a979:	lea    r9,[rsp+0x44]
 102a97e:	mov    rdx,r13
 102a981:	mov    ecx,r15d
 102a984:	call   0x10297e0
 102a989:	lea    rbx,[rdi+0x70]
 102a98d:	lea    rdx,[rbp-0x10]
 102a991:	mov    rcx,rbx
 102a994:	call   QWORD PTR [rip+0xfffffffffffd70fe]        # 0x1001a98
 102a99a:	mov    rcx,rbx
 102a99d:	call   QWORD PTR [rip+0xfffffffffffd714d]        # 0x1001af0
 102a9a3:	test   eax,eax
 102a9a5:	je     0x102b1bd
 102a9ab:	jmp    0x102a8ad
 102a9b0:	mov    BYTE PTR [rdi+0xbd],0x1
 102a9b7:	jmp    0x102afe9
 102a9bc:	mov    BYTE PTR [rdi+0xb9],0x1
 102a9c3:	jmp    0x102afe9
 102a9c8:	mov    QWORD PTR [rsp+0x28],0x104
 102a9d1:	lea    rax,[rbp-0x10]
 102a9d5:	mov    QWORD PTR [rsp+0x20],rax
 102a9da:	lea    r9,[rsp+0x44]
 102a9df:	mov    rdx,r13
 102a9e2:	mov    ecx,r15d
 102a9e5:	call   0x10297e0
 102a9ea:	lea    rbx,[rdi+0x98]
 102a9f1:	lea    rdx,[rbp-0x10]
 102a9f5:	mov    rcx,rbx
 102a9f8:	call   QWORD PTR [rip+0xfffffffffffd709a]        # 0x1001a98
 102a9fe:	mov    rcx,rbx
 102aa01:	call   QWORD PTR [rip+0xfffffffffffd70e9]        # 0x1001af0
 102aa07:	test   eax,eax
 102aa09:	je     0x102b1e1
 102aa0f:	cmp    DWORD PTR [rdi+0xd8],0x2
 102aa16:	je     0x102aa5d
 102aa18:	mov    rcx,rbx
 102aa1b:	call   QWORD PTR [rip+0xfffffffffffd70c7]        # 0x1001ae8
 102aa21:	mov    rcx,rax
 102aa24:	call   0x1030aa0
 102aa29:	test   al,al
 102aa2b:	je     0x102aa5d
 102aa2d:	mov    rcx,rbx
 102aa30:	call   QWORD PTR [rip+0xfffffffffffd70b2]        # 0x1001ae8
 102aa36:	lea    r9,[rbp-0x20]
 102aa3a:	mov    rcx,rax
 102aa3d:	lea    r8,[rbp-0x10]
 102aa41:	mov    edx,0x105
 102aa46:	call   QWORD PTR [rip+0xfffffffffffd69b4]        # 0x1001400
 102aa4c:	test   eax,eax
 102aa4e:	je     0x102aa5d
 102aa50:	lea    rdx,[rbp-0x10]
 102aa54:	mov    rcx,rbx
 102aa57:	call   QWORD PTR [rip+0xfffffffffffd703b]        # 0x1001a98
 102aa5d:	movzx  ebx,BYTE PTR [rsp+0x41]
 102aa62:	jmp    0x102a6ba
 102aa67:	mov    BYTE PTR [rdi+0xdd],0x1
 102aa6e:	jmp    0x102afe9
 102aa73:	lock inc DWORD PTR [rip+0x38fbe]        # 0x1063a38
 102aa7a:	mov    r12d,DWORD PTR [rsp+0x48]
 102aa7f:	jmp    0x102afe9
 102aa84:	mov    QWORD PTR [rsp+0x28],0x104
 102aa8d:	lea    rax,[rbp-0x10]
 102aa91:	mov    QWORD PTR [rsp+0x20],rax
 102aa96:	lea    r9,[rsp+0x44]
 102aa9b:	mov    rdx,r13
 102aa9e:	mov    ecx,r15d
 102aaa1:	call   0x10297e0
 102aaa6:	cmp    r14w,WORD PTR [rbp-0x10]
 102aaab:	je     0x102b28d
 102aab1:	lea    rsi,[rdi+0xa0]
 102aab8:	lea    rdx,[rbp-0x10]
 102aabc:	mov    rcx,rsi
 102aabf:	call   QWORD PTR [rip+0xfffffffffffd6fd3]        # 0x1001a98
 102aac5:	cmp    DWORD PTR [rdi+0xd8],0x2
 102aacc:	je     0x102ab03
 102aace:	mov    r8d,0x1
 102aad4:	lea    rdx,[rbp-0x70]
 102aad8:	mov    rcx,rsi
 102aadb:	call   QWORD PTR [rip+0xfffffffffffd6f67]        # 0x1001a48
 102aae1:	nop
 102aae2:	or     r12d,0x1
 102aae6:	mov    DWORD PTR [rsp+0x48],r12d
 102aaeb:	lea    rdx,[rip+0xfffffffffffdb936]        # 0x1006428
 102aaf2:	mov    rcx,rax
 102aaf5:	call   QWORD PTR [rip+0xfffffffffffd6f05]        # 0x1001a00
 102aafb:	test   eax,eax
 102aafd:	jne    0x102ab03
 102aaff:	mov    bl,0x1
 102ab01:	jmp    0x102ab05
 102ab03:	xor    bl,bl
 102ab05:	test   r12b,0x1
 102ab09:	je     0x102ab1e
 102ab0b:	and    r12d,0xfffffffe
 102ab0f:	mov    DWORD PTR [rsp+0x48],r12d
 102ab14:	lea    rcx,[rbp-0x70]
 102ab18:	call   QWORD PTR [rip+0xfffffffffffd6f8a]        # 0x1001aa8
 102ab1e:	test   bl,bl
 102ab20:	je     0x102aa5d
 102ab26:	mov    r8d,0x1
 102ab2c:	lea    rdx,[rbp-0x58]
 102ab30:	mov    rcx,rsi
 102ab33:	call   QWORD PTR [rip+0xfffffffffffd6de7]        # 0x1001920
 102ab39:	nop
 102ab3a:	lea    rbx,[rdi+0xa8]
 102ab41:	mov    rdx,rax
 102ab44:	mov    rcx,rbx
 102ab47:	call   QWORD PTR [rip+0xfffffffffffd6f53]        # 0x1001aa0
 102ab4d:	nop
 102ab4e:	lea    rcx,[rbp-0x58]
 102ab52:	call   QWORD PTR [rip+0xfffffffffffd6f50]        # 0x1001aa8
 102ab58:	mov    rcx,rbx
 102ab5b:	call   QWORD PTR [rip+0xfffffffffffd6f87]        # 0x1001ae8
 102ab61:	mov    rcx,rax
 102ab64:	call   0x1030aa0
 102ab69:	test   al,al
 102ab6b:	je     0x102b205
 102ab71:	mov    rcx,rbx
 102ab74:	call   QWORD PTR [rip+0xfffffffffffd6f6e]        # 0x1001ae8
 102ab7a:	lea    r9,[rbp-0x30]
 102ab7e:	jmp    0x102aa3a
 102ab83:	mov    QWORD PTR [rsp+0x28],0x2
 102ab8c:	lea    rax,[rbp-0x10]
 102ab90:	mov    QWORD PTR [rsp+0x20],rax
 102ab95:	lea    r9,[rsp+0x44]
 102ab9a:	mov    rdx,r13
 102ab9d:	mov    ecx,r15d
 102aba0:	call   0x10297e0
 102aba5:	lea    r11,[rbp-0x10]
 102aba9:	or     rax,0xffffffffffffffff
 102abad:	nop    DWORD PTR [rax]
 102abb0:	inc    rax
 102abb3:	cmp    WORD PTR [r11+rax*2],0x0
 102abb9:	jne    0x102abb0
 102abbb:	test   rax,rax
 102abbe:	je     0x102b2b1
 102abc4:	lea    rcx,[rbp-0x10]
 102abc8:	call   QWORD PTR [rip+0xfffffffffffd6b72]        # 0x1001740
 102abce:	lea    ecx,[rax-0x1]
 102abd1:	cmp    ecx,0x1
 102abd4:	ja     0x102b2b1
 102abda:	mov    DWORD PTR [rdi+0xd4],eax
 102abe0:	jmp    0x102a6ba
 102abe5:	mov    QWORD PTR [rsp+0x28],0x104
 102abee:	lea    rax,[rbp-0x10]
 102abf2:	mov    QWORD PTR [rsp+0x20],rax
 102abf7:	lea    r9,[rsp+0x44]
 102abfc:	mov    rdx,r13
 102abff:	mov    ecx,r15d
 102ac02:	call   0x10297e0
 102ac07:	cmp    r14w,WORD PTR [rbp-0x10]
 102ac0c:	jne    0x102ac26
 102ac0e:	cmp    DWORD PTR [rdi+0xd8],0x2
 102ac15:	je     0x102ac26
 102ac17:	lea    rdx,[rbp-0x10]
 102ac1b:	mov    ecx,0x105
 102ac20:	call   QWORD PTR [rip+0xfffffffffffd67c2]        # 0x10013e8
 102ac26:	lea    rbx,[rdi+0x78]
 102ac2a:	lea    rdx,[rbp-0x10]
 102ac2e:	mov    rcx,rbx
 102ac31:	call   QWORD PTR [rip+0xfffffffffffd6e61]        # 0x1001a98
 102ac37:	mov    rcx,rbx
 102ac3a:	call   QWORD PTR [rip+0xfffffffffffd6eb0]        # 0x1001af0
 102ac40:	test   eax,eax
 102ac42:	je     0x102b2d5
 102ac48:	cmp    DWORD PTR [rdi+0xd8],0x2
 102ac4f:	je     0x102ac81
 102ac51:	mov    rcx,rbx
 102ac54:	call   QWORD PTR [rip+0xfffffffffffd6e8e]        # 0x1001ae8
 102ac5a:	mov    rcx,rax
 102ac5d:	lea    r9,[rbp-0x28]
 102ac61:	lea    r8,[rbp-0x10]
 102ac65:	mov    edx,0x105
 102ac6a:	call   QWORD PTR [rip+0xfffffffffffd6790]        # 0x1001400
 102ac70:	test   eax,eax
 102ac72:	je     0x102ac81
 102ac74:	lea    rdx,[rbp-0x10]
 102ac78:	mov    rcx,rbx
 102ac7b:	call   QWORD PTR [rip+0xfffffffffffd6e17]        # 0x1001a98
 102ac81:	mov    BYTE PTR [rdi+0xbc],0x1
 102ac88:	jmp    0x102aa5d
 102ac8d:	mov    QWORD PTR [rsp+0x28],0x104
 102ac96:	lea    rax,[rbp-0x10]
 102ac9a:	mov    QWORD PTR [rsp+0x20],rax
 102ac9f:	lea    r9,[rsp+0x44]
 102aca4:	mov    rdx,r13
 102aca7:	mov    ecx,r15d
 102acaa:	call   0x10297e0
 102acaf:	cmp    r14w,WORD PTR [rbp-0x10]
 102acb4:	jne    0x102acce
 102acb6:	cmp    DWORD PTR [rdi+0xd8],0x2
 102acbd:	je     0x102acce
 102acbf:	lea    rdx,[rbp-0x10]
 102acc3:	mov    ecx,0x105
 102acc8:	call   QWORD PTR [rip+0xfffffffffffd671a]        # 0x10013e8
 102acce:	lea    rbx,[rdi+0x90]
 102acd5:	lea    rdx,[rbp-0x10]
 102acd9:	mov    rcx,rbx
 102acdc:	call   QWORD PTR [rip+0xfffffffffffd6db6]        # 0x1001a98
 102ace2:	mov    rcx,rbx
 102ace5:	call   QWORD PTR [rip+0xfffffffffffd6e05]        # 0x1001af0
 102aceb:	test   eax,eax
 102aced:	je     0x102b2f9
 102acf3:	mov    rcx,rbx
 102acf6:	call   QWORD PTR [rip+0xfffffffffffd6dec]        # 0x1001ae8
 102acfc:	mov    rdx,rax
 102acff:	lea    rcx,[rsp+0x78]
 102ad04:	call   0x10309c0
 102ad09:	nop
 102ad0a:	mov    rdx,rax
 102ad0d:	mov    rcx,rbx
 102ad10:	call   QWORD PTR [rip+0xfffffffffffd6d8a]        # 0x1001aa0
 102ad16:	nop
 102ad17:	lea    rcx,[rsp+0x78]
 102ad1c:	call   QWORD PTR [rip+0xfffffffffffd6d86]        # 0x1001aa8
 102ad22:	jmp    0x102aa5d
 102ad27:	mov    BYTE PTR [rdi+0xb8],0x1
 102ad2e:	jmp    0x102afe9
 102ad33:	cmp    edx,0x2
 102ad36:	je     0x102afe9
 102ad3c:	mov    DWORD PTR [rdi+0xd8],0x1
 102ad46:	mov    QWORD PTR [rsp+0x28],0x104
 102ad4f:	lea    rax,[rbp-0x10]
 102ad53:	mov    QWORD PTR [rsp+0x20],rax
 102ad58:	lea    r9,[rsp+0x44]
 102ad5d:	mov    rdx,r13
 102ad60:	mov    ecx,r15d
 102ad63:	call   0x10297e0
 102ad68:	cmp    r14w,WORD PTR [rbp-0x10]
 102ad6d:	je     0x102a6ba
 102ad73:	lea    rcx,[rdi+0xb0]
 102ad7a:	lea    rdx,[rbp-0x10]
 102ad7e:	call   QWORD PTR [rip+0xfffffffffffd6d14]        # 0x1001a98
 102ad84:	jmp    0x102a6ba
 102ad89:	mov    QWORD PTR [rsp+0x28],0x104
 102ad92:	lea    rax,[rbp-0x10]
 102ad96:	mov    QWORD PTR [rsp+0x20],rax
 102ad9b:	lea    r9,[rsp+0x44]
 102ada0:	mov    rdx,r13
 102ada3:	mov    ecx,r15d
 102ada6:	call   0x10297e0
 102adab:	lea    r12,[rdi+0xc0]
 102adb2:	lea    rdx,[rbp-0x10]
 102adb6:	mov    rcx,r12
 102adb9:	call   QWORD PTR [rip+0xfffffffffffd6cd9]        # 0x1001a98
 102adbf:	mov    r8d,0x3
 102adc5:	lea    rdx,[rbp-0x50]
 102adc9:	mov    rcx,r12
 102adcc:	call   QWORD PTR [rip+0xfffffffffffd6c76]        # 0x1001a48
 102add2:	nop
 102add3:	lea    rdx,[rip+0xfffffffffffdb656]        # 0x1006430
 102adda:	mov    rcx,rax
 102addd:	call   QWORD PTR [rip+0xfffffffffffd6c7d]        # 0x1001a60
 102ade3:	test   eax,eax
 102ade5:	sete   bl
 102ade8:	lea    rcx,[rbp-0x50]
 102adec:	call   QWORD PTR [rip+0xfffffffffffd6cb6]        # 0x1001aa8
 102adf2:	mov    rcx,r12
 102adf5:	test   bl,bl
 102adf7:	je     0x102aee8
 102adfd:	mov    edx,0x2c
 102ae02:	xor    r8d,r8d
 102ae05:	call   QWORD PTR [rip+0xfffffffffffd6b4d]        # 0x1001958
 102ae0b:	cmp    eax,0xffffffff
 102ae0e:	je     0x102aebb
 102ae14:	lea    r8d,[rax+0x1]
 102ae18:	lea    rdx,[rbp-0x60]
 102ae1c:	mov    rcx,r12
 102ae1f:	call   QWORD PTR [rip+0xfffffffffffd6afb]        # 0x1001920
 102ae25:	nop
 102ae26:	mov    rdx,rax
 102ae29:	lea    rcx,[rdi+0xc8]
 102ae30:	call   QWORD PTR [rip+0xfffffffffffd6c6a]        # 0x1001aa0
 102ae36:	nop
 102ae37:	lea    rcx,[rbp-0x60]
 102ae3b:	call   QWORD PTR [rip+0xfffffffffffd6c67]        # 0x1001aa8
 102ae41:	lea    rcx,[rdi+0xc8]
 102ae48:	call   QWORD PTR [rip+0xfffffffffffd6c9a]        # 0x1001ae8
 102ae4e:	mov    rdx,rax
 102ae51:	lea    rcx,[rbp-0x40]
 102ae55:	call   0x10353c0
 102ae5a:	nop
 102ae5b:	mov    rdx,rax
 102ae5e:	lea    rcx,[rdi+0xc8]
 102ae65:	call   QWORD PTR [rip+0xfffffffffffd6c35]        # 0x1001aa0
 102ae6b:	nop
 102ae6c:	lea    rcx,[rbp-0x40]
 102ae70:	call   QWORD PTR [rip+0xfffffffffffd6c32]        # 0x1001aa8
 102ae76:	lea    rcx,[rdi+0xc8]
 102ae7d:	call   QWORD PTR [rip+0xfffffffffffd6c6d]        # 0x1001af0
 102ae83:	mov    esi,eax
 102ae85:	mov    ebx,r14d
 102ae88:	test   eax,eax
 102ae8a:	jle    0x102aeb6
 102ae8c:	nop    DWORD PTR [rax+0x0]
 102ae90:	mov    edx,ebx
 102ae92:	lea    rcx,[rdi+0xc8]
 102ae99:	call   QWORD PTR [rip+0xfffffffffffd6a99]        # 0x1001938
 102ae9f:	movzx  ecx,ax
 102aea2:	call   QWORD PTR [rip+0xfffffffffffd68e0]        # 0x1001788
 102aea8:	test   eax,eax
 102aeaa:	je     0x102b0c3
 102aeb0:	inc    ebx
 102aeb2:	cmp    ebx,esi
 102aeb4:	jl     0x102ae90
 102aeb6:	mov    r15d,DWORD PTR [rsp+0x58]
 102aebb:	lea    rdx,[rip+0xfffffffffffdb56e]        # 0x1006430
 102aec2:	mov    rcx,r12
 102aec5:	call   QWORD PTR [rip+0xfffffffffffd6bcd]        # 0x1001a98
 102aecb:	mov    edx,0x3a
 102aed0:	mov    rcx,r12
 102aed3:	call   QWORD PTR [rip+0xfffffffffffd6a77]        # 0x1001950
 102aed9:	movzx  ebx,BYTE PTR [rsp+0x41]
 102aede:	mov    r12d,DWORD PTR [rsp+0x48]
 102aee3:	jmp    0x102a6ba
 102aee8:	lea    rdx,[rip+0xfffffffffffdb549]        # 0x1006438
 102aeef:	call   QWORD PTR [rip+0xfffffffffffd6b6b]        # 0x1001a60
 102aef5:	test   eax,eax
 102aef7:	je     0x102aecb
 102aef9:	lea    rdx,[rip+0xfffffffffffdb540]        # 0x1006440
 102af00:	mov    rcx,r12
 102af03:	call   QWORD PTR [rip+0xfffffffffffd6b57]        # 0x1001a60
 102af09:	test   eax,eax
 102af0b:	je     0x102aecb
 102af0d:	lea    rdx,[rip+0xfffffffffffdb534]        # 0x1006448
 102af14:	mov    rcx,r12
 102af17:	call   QWORD PTR [rip+0xfffffffffffd6b43]        # 0x1001a60
 102af1d:	test   eax,eax
 102af1f:	jne    0x102b0c3
 102af25:	jmp    0x102aecb
 102af27:	movzx  esi,BYTE PTR [rsp+0x40]
 102af2c:	cmp    edx,0x2
 102af2f:	je     0x102afee
 102af35:	mov    DWORD PTR [rdi+0xd8],0x3
 102af3f:	jmp    0x102afee
 102af44:	mov    QWORD PTR [rsp+0x28],0x104
 102af4d:	lea    rax,[rbp-0x10]
 102af51:	mov    QWORD PTR [rsp+0x20],rax
 102af56:	lea    r9,[rsp+0x44]
 102af5b:	mov    rdx,r13
 102af5e:	mov    ecx,r15d
 102af61:	call   0x10297e0
 102af66:	mov    rcx,rdi
 102af69:	cmp    r14w,WORD PTR [rbp-0x10]
 102af6e:	je     0x102b341
 102af74:	lea    rdx,[rbp-0x10]
 102af78:	call   0x102a200
 102af7d:	test   al,al
 102af7f:	je     0x102b31d
 102af85:	jmp    0x102a6ba
 102af8a:	mov    BYTE PTR [rdi+0xdc],0x1
 102af91:	jmp    0x102afe9
 102af93:	mov    QWORD PTR [rsp+0x28],0x104
 102af9c:	lea    rax,[rbp-0x10]
 102afa0:	mov    QWORD PTR [rsp+0x20],rax
 102afa5:	lea    r9,[rsp+0x44]
 102afaa:	mov    rdx,r13
 102afad:	mov    ecx,r15d
 102afb0:	call   0x10297e0
 102afb5:	cmp    r14w,WORD PTR [rbp-0x10]
 102afba:	je     0x102b0c3
 102afc0:	mov    QWORD PTR [rbp-0x48],r14
 102afc4:	mov    r8d,0xa
 102afca:	lea    rdx,[rbp-0x48]
 102afce:	lea    rcx,[rbp-0x10]
 102afd2:	call   QWORD PTR [rip+0xfffffffffffd66a8]        # 0x1001680
 102afd8:	mov    DWORD PTR [rip+0x3892a],eax        # 0x1063908
 102afde:	jmp    0x102a6ba
 102afe3:	xor    bl,bl
 102afe5:	mov    BYTE PTR [rsp+0x41],bl
 102afe9:	movzx  esi,BYTE PTR [rsp+0x40]
 102afee:	mov    ecx,DWORD PTR [rsp+0x44]
 102aff2:	inc    ecx
 102aff4:	mov    DWORD PTR [rsp+0x44],ecx
 102aff8:	cmp    ecx,r15d
 102affb:	jge    0x102b364
 102b001:	jmp    0x102a64e
 102b006:	xor    bl,bl
 102b008:	lea    rcx,[rsp+0x50]
 102b00d:	call   QWORD PTR [rip+0xfffffffffffd6a95]        # 0x1001aa8
 102b013:	jmp    0x102b35f
 102b018:	xor    bl,bl
 102b01a:	jmp    0x102b35f
 102b01f:	lea    rcx,[rsp+0x68]
 102b024:	call   QWORD PTR [rip+0xfffffffffffd6a96]        # 0x1001ac0
 102b02a:	nop
 102b02b:	mov    edx,0xc000c4ac
 102b030:	lea    rcx,[rbp-0x80]
 102b034:	call   0x10132d0
 102b039:	nop
 102b03a:	mov    rcx,rax
 102b03d:	call   QWORD PTR [rip+0xfffffffffffd6aa5]        # 0x1001ae8
 102b043:	mov    rdx,rax
 102b046:	mov    r8d,0x10
 102b04c:	lea    rcx,[rsp+0x68]
 102b051:	call   QWORD PTR [rip+0xfffffffffffd69e9]        # 0x1001a40
 102b057:	nop
 102b058:	lea    rcx,[rbp-0x80]
 102b05c:	call   QWORD PTR [rip+0xfffffffffffd6a46]        # 0x1001aa8
 102b062:	mov    rbx,QWORD PTR [rdi]
 102b065:	lea    rcx,[rsp+0x68]
 102b06a:	call   QWORD PTR [rip+0xfffffffffffd6a78]        # 0x1001ae8
 102b070:	mov    r8,rax
 102b073:	mov    BYTE PTR [rsp+0x30],0x1
 102b078:	mov    BYTE PTR [rsp+0x28],0x1
 102b07d:	mov    DWORD PTR [rsp+0x20],0x2
 102b085:	xor    r9d,r9d
 102b088:	mov    edx,0xc000c4ac
 102b08d:	mov    rcx,rdi
 102b090:	call   QWORD PTR [rbx+0x8]
 102b093:	nop
 102b094:	lea    rcx,[rsp+0x68]
 102b099:	call   QWORD PTR [rip+0xfffffffffffd6a09]        # 0x1001aa8
 102b09f:	xor    al,al
 102b0a1:	jmp    0x102b3c8
 102b0a6:	mov    rax,QWORD PTR [rdi]
 102b0a9:	mov    BYTE PTR [rsp+0x28],0x1
 102b0ae:	mov    BYTE PTR [rsp+0x20],0x1
 102b0b3:	xor    r9d,r9d
 102b0b6:	xor    r8d,r8d
 102b0b9:	mov    edx,0xc000c4ae
 102b0be:	mov    rcx,rdi
 102b0c1:	call   QWORD PTR [rax]
 102b0c3:	xor    al,al
 102b0c5:	jmp    0x102b3c8
 102b0ca:	lea    rcx,[rsp+0x60]
 102b0cf:	call   QWORD PTR [rip+0xfffffffffffd69eb]        # 0x1001ac0
 102b0d5:	nop
 102b0d6:	mov    edx,0xc000c4ac
 102b0db:	lea    rcx,[rbp-0x78]
 102b0df:	call   0x10132d0
 102b0e4:	nop
 102b0e5:	mov    rcx,rax
 102b0e8:	call   QWORD PTR [rip+0xfffffffffffd69fa]        # 0x1001ae8
 102b0ee:	mov    rdx,rax
 102b0f1:	mov    r8d,0x10
 102b0f7:	lea    rcx,[rsp+0x60]
 102b0fc:	call   QWORD PTR [rip+0xfffffffffffd693e]        # 0x1001a40
 102b102:	nop
 102b103:	lea    rcx,[rbp-0x78]
 102b107:	call   QWORD PTR [rip+0xfffffffffffd699b]        # 0x1001aa8
 102b10d:	mov    rbx,QWORD PTR [rdi]
 102b110:	lea    rcx,[rsp+0x60]
 102b115:	call   QWORD PTR [rip+0xfffffffffffd69cd]        # 0x1001ae8
 102b11b:	mov    r8,rax
 102b11e:	mov    BYTE PTR [rsp+0x30],0x1
 102b123:	mov    BYTE PTR [rsp+0x28],0x1
 102b128:	mov    DWORD PTR [rsp+0x20],0x2
 102b130:	xor    r9d,r9d
 102b133:	mov    edx,0xc000c4ac
 102b138:	mov    rcx,rdi
 102b13b:	call   QWORD PTR [rbx+0x8]
 102b13e:	nop
 102b13f:	lea    rcx,[rsp+0x60]
 102b144:	call   QWORD PTR [rip+0xfffffffffffd695e]        # 0x1001aa8
 102b14a:	xor    al,al
 102b14c:	jmp    0x102b3c8
 102b151:	mov    rax,QWORD PTR [rdi]
 102b154:	mov    BYTE PTR [rsp+0x28],0x1
 102b159:	mov    BYTE PTR [rsp+0x20],0x1
 102b15e:	xor    r9d,r9d
 102b161:	xor    r8d,r8d
 102b164:	mov    edx,0xc000c393
 102b169:	mov    rcx,rdi
 102b16c:	call   QWORD PTR [rax]
 102b16e:	xor    al,al
 102b170:	jmp    0x102b3c8
 102b175:	mov    rax,QWORD PTR [rdi]
 102b178:	mov    BYTE PTR [rsp+0x28],0x1
 102b17d:	mov    BYTE PTR [rsp+0x20],0x1
 102b182:	xor    r9d,r9d
 102b185:	xor    r8d,r8d
 102b188:	mov    edx,0xc000c3d8
 102b18d:	mov    rcx,rdi
 102b190:	call   QWORD PTR [rax]
 102b192:	xor    al,al
 102b194:	jmp    0x102b3c8
 102b199:	mov    rax,QWORD PTR [rdi]
 102b19c:	mov    BYTE PTR [rsp+0x28],0x1
 102b1a1:	mov    BYTE PTR [rsp+0x20],0x1
 102b1a6:	xor    r9d,r9d
 102b1a9:	xor    r8d,r8d
 102b1ac:	mov    edx,0xc000c392
 102b1b1:	mov    rcx,rdi
 102b1b4:	call   QWORD PTR [rax]
 102b1b6:	xor    al,al
 102b1b8:	jmp    0x102b3c8
 102b1bd:	mov    rax,QWORD PTR [rdi]
 102b1c0:	mov    BYTE PTR [rsp+0x28],0x1
 102b1c5:	mov    BYTE PTR [rsp+0x20],0x1
 102b1ca:	xor    r9d,r9d
 102b1cd:	xor    r8d,r8d
 102b1d0:	mov    edx,0xc000c394
 102b1d5:	mov    rcx,rdi
 102b1d8:	call   QWORD PTR [rax]
 102b1da:	xor    al,al
 102b1dc:	jmp    0x102b3c8
 102b1e1:	mov    rax,QWORD PTR [rdi]
 102b1e4:	mov    BYTE PTR [rsp+0x28],0x1
 102b1e9:	mov    BYTE PTR [rsp+0x20],0x1
 102b1ee:	xor    r9d,r9d
 102b1f1:	xor    r8d,r8d
 102b1f4:	mov    edx,0xc000c390
 102b1f9:	mov    rcx,rdi
 102b1fc:	call   QWORD PTR [rax]
 102b1fe:	xor    al,al
 102b200:	jmp    0x102b3c8
 102b205:	lea    rcx,[rsp+0x70]
 102b20a:	call   QWORD PTR [rip+0xfffffffffffd68b0]        # 0x1001ac0
 102b210:	nop
 102b211:	mov    edx,0xc000c4ad
 102b216:	lea    rcx,[rbp-0x68]
 102b21a:	call   0x10132d0
 102b21f:	nop
 102b220:	mov    rcx,rax
 102b223:	call   QWORD PTR [rip+0xfffffffffffd68bf]        # 0x1001ae8
 102b229:	mov    rdx,rax
 102b22c:	mov    r8,QWORD PTR [rdi+0xa8]
 102b233:	lea    rcx,[rsp+0x70]
 102b238:	call   QWORD PTR [rip+0xfffffffffffd6802]        # 0x1001a40
 102b23e:	nop
 102b23f:	lea    rcx,[rbp-0x68]
 102b243:	call   QWORD PTR [rip+0xfffffffffffd685f]        # 0x1001aa8
 102b249:	mov    rbx,QWORD PTR [rdi]
 102b24c:	lea    rcx,[rsp+0x70]
 102b251:	call   QWORD PTR [rip+0xfffffffffffd6891]        # 0x1001ae8
 102b257:	mov    r8,rax
 102b25a:	mov    BYTE PTR [rsp+0x30],0x1
 102b25f:	mov    BYTE PTR [rsp+0x28],0x1
 102b264:	mov    DWORD PTR [rsp+0x20],0x2
 102b26c:	xor    r9d,r9d
 102b26f:	mov    edx,0xc000c4ad
 102b274:	mov    rcx,rdi
 102b277:	call   QWORD PTR [rbx+0x8]
 102b27a:	nop
 102b27b:	lea    rcx,[rsp+0x70]
 102b280:	call   QWORD PTR [rip+0xfffffffffffd6822]        # 0x1001aa8
 102b286:	xor    al,al
 102b288:	jmp    0x102b3c8
 102b28d:	mov    rax,QWORD PTR [rdi]
 102b290:	mov    BYTE PTR [rsp+0x28],0x1
 102b295:	mov    BYTE PTR [rsp+0x20],0x1
 102b29a:	xor    r9d,r9d
 102b29d:	xor    r8d,r8d
 102b2a0:	mov    edx,0xc000c458
 102b2a5:	mov    rcx,rdi
 102b2a8:	call   QWORD PTR [rax]
 102b2aa:	xor    al,al
 102b2ac:	jmp    0x102b3c8
 102b2b1:	mov    rax,QWORD PTR [rdi]
 102b2b4:	mov    BYTE PTR [rsp+0x28],0x1
 102b2b9:	mov    BYTE PTR [rsp+0x20],0x1
 102b2be:	xor    r9d,r9d
 102b2c1:	xor    r8d,r8d
 102b2c4:	mov    edx,0xc000c450
 102b2c9:	mov    rcx,rdi
 102b2cc:	call   QWORD PTR [rax]
 102b2ce:	xor    al,al
 102b2d0:	jmp    0x102b3c8
 102b2d5:	mov    rax,QWORD PTR [rdi]
 102b2d8:	mov    BYTE PTR [rsp+0x28],0x1
 102b2dd:	mov    BYTE PTR [rsp+0x20],0x1
 102b2e2:	xor    r9d,r9d
 102b2e5:	xor    r8d,r8d
 102b2e8:	mov    edx,0xc000c391
 102b2ed:	mov    rcx,rdi
 102b2f0:	call   QWORD PTR [rax]
 102b2f2:	xor    al,al
 102b2f4:	jmp    0x102b3c8
 102b2f9:	mov    rax,QWORD PTR [rdi]
 102b2fc:	mov    BYTE PTR [rsp+0x28],0x1
 102b301:	mov    BYTE PTR [rsp+0x20],0x1
 102b306:	xor    r9d,r9d
 102b309:	xor    r8d,r8d
 102b30c:	mov    edx,0xc000c451
 102b311:	mov    rcx,rdi
 102b314:	call   QWORD PTR [rax]
 102b316:	xor    al,al
 102b318:	jmp    0x102b3c8
 102b31d:	mov    rax,QWORD PTR [rdi]
 102b320:	mov    BYTE PTR [rsp+0x28],0x1
 102b325:	mov    BYTE PTR [rsp+0x20],0x1
 102b32a:	xor    r9d,r9d
 102b32d:	xor    r8d,r8d
 102b330:	mov    edx,0xc000c459
 102b335:	mov    rcx,rdi
 102b338:	call   QWORD PTR [rax]
 102b33a:	xor    al,al
 102b33c:	jmp    0x102b3c8
 102b341:	mov    rax,QWORD PTR [rdi]
 102b344:	mov    BYTE PTR [rsp+0x28],0x1
 102b349:	mov    BYTE PTR [rsp+0x20],0x1
 102b34e:	xor    r9d,r9d
 102b351:	xor    r8d,r8d
 102b354:	mov    edx,0xc000c459
 102b359:	call   QWORD PTR [rax]
 102b35b:	xor    al,al
 102b35d:	jmp    0x102b3c8
 102b35f:	movzx  esi,BYTE PTR [rsp+0x40]
 102b364:	test   sil,sil
 102b367:	jne    0x102b370
 102b369:	mov    DWORD PTR [rip+0x386c8],r14d        # 0x1063a38
 102b370:	test   bl,bl
 102b372:	jne    0x102b3c6
 102b374:	mov    rax,QWORD PTR [rdi]
 102b377:	mov    BYTE PTR [rsp+0x28],0x1
 102b37c:	mov    BYTE PTR [rsp+0x20],0x1
 102b381:	xor    r9d,r9d
 102b384:	xor    r8d,r8d
 102b387:	mov    edx,0xc000c3f3
 102b38c:	mov    rcx,rdi
 102b38f:	call   QWORD PTR [rax]
 102b391:	lea    rcx,[rip+0xfffffffffffdb0b8]        # 0x1006450
 102b398:	call   0x1035e00
 102b39d:	movsxd rbx,r15d
 102b3a0:	test   r15d,r15d
 102b3a3:	jle    0x102b0c3
 102b3a9:	nop    DWORD PTR [rax+0x0]
 102b3b0:	mov    rcx,QWORD PTR [r13+r14*8+0x0]
 102b3b5:	call   0x1035e00
 102b3ba:	inc    r14
 102b3bd:	cmp    r14,rbx
 102b3c0:	jl     0x102b3b0
 102b3c2:	xor    al,al
 102b3c4:	jmp    0x102b3c8
 102b3c6:	mov    al,0x1
 102b3c8:	mov    rcx,QWORD PTR [rbp+0x200]
 102b3cf:	xor    rcx,rsp
 102b3d2:	call   0x103ff40
 102b3d7:	mov    rbx,QWORD PTR [rsp+0x358]
 102b3df:	add    rsp,0x310
 102b3e6:	pop    r15
 102b3e8:	pop    r14
 102b3ea:	pop    r13
 102b3ec:	pop    r12
 102b3ee:	pop    rdi
 102b3ef:	pop    rsi
 102b3f0:	pop    rbp
 102b3f1:	ret    
 102b3f2:	xchg   ax,ax
 102b3f4:	sbb    BYTE PTR [rax-0x5796fffe],ch
 102b3fa:	add    al,BYTE PTR [rax]
 102b3fc:	int3   
 102b3fd:	test   al,0x2
 102b3ff:	add    BYTE PTR [rbx-0x57],bl
 102b402:	add    al,BYTE PTR [rax]
 102b404:	addr32 test eax,0xa9b00002
 102b40a:	add    al,BYTE PTR [rax]
 102b40c:	mov    esp,0xc80002a9
 102b411:	test   eax,0xaa670002
 102b416:	add    al,BYTE PTR [rax]
 102b418:	jae    0x102b3c4
 102b41a:	add    al,BYTE PTR [rax]
 102b41c:	test   BYTE PTR [rdx-0x547cfffe],ch
 102b422:	add    al,BYTE PTR [rax]
 102b424:	in     eax,0xab
 102b426:	add    al,BYTE PTR [rax]
 102b428:	lea    ebp,[rdx+rax*1+0x2ad2700]
 102b42f:	add    BYTE PTR [rbx],dh
 102b431:	lods   eax,DWORD PTR ds:[rsi]
 102b432:	add    al,BYTE PTR [rax]
 102b434:	mov    DWORD PTR [rbp-0x50d8fffe],ebp
 102b43a:	add    al,BYTE PTR [rax]
 102b43c:	rex.R scas eax,DWORD PTR es:[rdi]
 102b43e:	add    al,BYTE PTR [rax]
 102b440:	mov    ch,BYTE PTR [rdi-0x506cfffe]
 102b446:	add    al,BYTE PTR [rax]
 102b448:	jrcxz  0x102b3f9
 102b44a:	add    al,BYTE PTR [rax]
 102b44c:	add    BYTE PTR [rcx],al
 102b44e:	add    al,BYTE PTR [rbx]
 102b450:	add    al,0x5
 102b452:	(bad)  
 102b453:	adc    eax,0x9081507
 102b458:	or     cl,BYTE PTR [rbx]
 102b45a:	or     al,0xd
 102b45c:	(bad)  
 102b45d:	unpckhps xmm2,XMMWORD PTR [rax]
 102b460:	adc    DWORD PTR [rdx],edx
 102b462:	adc    eax,0x15151413
 102b467:	adc    eax,0x15151515
 102b46c:	add    BYTE PTR [rcx],al
 102b46e:	add    al,BYTE PTR [rbx]
 102b470:	add    al,0x5
 102b472:	(bad)  
 102b473:	adc    eax,0x9081507
 102b478:	or     cl,BYTE PTR [rbx]
 102b47a:	or     al,0xd
 102b47c:	(bad)  
 102b47d:	unpckhps xmm2,XMMWORD PTR [rax]
 102b480:	adc    DWORD PTR [rdx],edx
 102b482:	adc    eax,0xcccc1413
 102b487:	int3   
 102b488:	int3   
 102b489:	int3   
 102b48a:	int3   
 102b48b:	int3   
 102b48c:	int3   
 102b48d:	int3   
 102b48e:	int3   
 102b48f:	int3   
 102b490:	rex push rdi
 102b492:	sub    rsp,0x50
 102b496:	mov    QWORD PTR [rsp+0x40],0xfffffffffffffffe
 102b49f:	mov    QWORD PTR [rsp+0x78],rbx
 102b4a4:	mov    rdi,rcx
 102b4a7:	lea    rcx,[rsp+0x60]
 102b4ac:	call   QWORD PTR [rip+0xfffffffffffd660e]        # 0x1001ac0
 102b4b2:	nop
 102b4b3:	lea    rdx,[rip+0xfffffffffffdae66]        # 0x1006320
 102b4ba:	lea    rcx,[rsp+0x70]
 102b4bf:	call   0x1031c10
 102b4c4:	mov    rbx,rax
 102b4c7:	mov    edx,0x4000c3f5
 102b4cc:	lea    rcx,[rsp+0x68]
 102b4d1:	call   0x10132d0
 102b4d6:	nop
 102b4d7:	mov    rcx,rax
 102b4da:	call   QWORD PTR [rip+0xfffffffffffd6608]        # 0x1001ae8
 102b4e0:	mov    rdx,rax
 102b4e3:	mov    r8,QWORD PTR [rbx]
 102b4e6:	lea    rcx,[rsp+0x60]
 102b4eb:	call   QWORD PTR [rip+0xfffffffffffd654f]        # 0x1001a40
 102b4f1:	nop
 102b4f2:	lea    rcx,[rsp+0x68]
 102b4f7:	call   QWORD PTR [rip+0xfffffffffffd65ab]        # 0x1001aa8
 102b4fd:	nop
 102b4fe:	lea    rcx,[rsp+0x70]
 102b503:	call   QWORD PTR [rip+0xfffffffffffd659f]        # 0x1001aa8
 102b509:	mov    rbx,QWORD PTR [rdi]
 102b50c:	lea    rcx,[rsp+0x60]
 102b511:	call   QWORD PTR [rip+0xfffffffffffd65d1]        # 0x1001ae8
 102b517:	mov    r8,rax
 102b51a:	mov    BYTE PTR [rsp+0x30],0x1
 102b51f:	mov    BYTE PTR [rsp+0x28],0x1
 102b524:	mov    DWORD PTR [rsp+0x20],0x0
 102b52c:	xor    r9d,r9d
 102b52f:	mov    edx,0x4000c3f5
 102b534:	mov    rcx,rdi
 102b537:	call   QWORD PTR [rbx+0x8]
 102b53a:	lea    rdx,[rip+0xfffffffffffdae2f]        # 0x1006370
 102b541:	lea    rcx,[rsp+0x68]
 102b546:	call   0x1031c10
 102b54b:	nop
 102b54c:	mov    rbx,QWORD PTR [rdi]
 102b54f:	mov    rcx,rax
 102b552:	call   QWORD PTR [rip+0xfffffffffffd6590]        # 0x1001ae8
 102b558:	mov    r8,rax
 102b55b:	mov    BYTE PTR [rsp+0x30],0x1
 102b560:	mov    BYTE PTR [rsp+0x28],0x1
 102b565:	mov    DWORD PTR [rsp+0x20],0x0
 102b56d:	xor    r9d,r9d
 102b570:	mov    edx,0x4000c3f5
 102b575:	mov    rcx,rdi
 102b578:	call   QWORD PTR [rbx+0x8]
 102b57b:	nop
 102b57c:	lea    rcx,[rsp+0x68]
 102b581:	call   QWORD PTR [rip+0xfffffffffffd6521]        # 0x1001aa8
 102b587:	mov    r11,QWORD PTR [rdi]
 102b58a:	mov    BYTE PTR [rsp+0x28],0x0
 102b58f:	mov    BYTE PTR [rsp+0x20],0x1
 102b594:	mov    r9d,0x1
 102b59a:	xor    r8d,r8d
 102b59d:	mov    edx,0x4000c398
 102b5a2:	mov    rcx,rdi
 102b5a5:	call   QWORD PTR [r11]
 102b5a8:	mov    edx,0x4000c399
 102b5ad:	lea    rcx,[rsp+0x68]
 102b5b2:	call   0x10132d0
 102b5b7:	nop
 102b5b8:	mov    rcx,rax
 102b5bb:	call   QWORD PTR [rip+0xfffffffffffd6527]        # 0x1001ae8
 102b5c1:	mov    rdx,rax
 102b5c4:	mov    r8,QWORD PTR [rdi+0x78]
 102b5c8:	lea    rcx,[rsp+0x60]
 102b5cd:	call   QWORD PTR [rip+0xfffffffffffd646d]        # 0x1001a40
 102b5d3:	nop
 102b5d4:	lea    rcx,[rsp+0x68]
 102b5d9:	call   QWORD PTR [rip+0xfffffffffffd64c9]        # 0x1001aa8
 102b5df:	mov    rbx,QWORD PTR [rdi]
 102b5e2:	lea    rcx,[rsp+0x60]
 102b5e7:	call   QWORD PTR [rip+0xfffffffffffd64fb]        # 0x1001ae8
 102b5ed:	mov    r8,rax
 102b5f0:	mov    BYTE PTR [rsp+0x30],0x1
 102b5f5:	mov    BYTE PTR [rsp+0x28],0x1
 102b5fa:	mov    DWORD PTR [rsp+0x20],0x0
 102b602:	xor    r9d,r9d
 102b605:	mov    edx,0x4000c399
 102b60a:	mov    rcx,rdi
 102b60d:	call   QWORD PTR [rbx+0x8]
 102b610:	nop
 102b611:	lea    rcx,[rsp+0x60]
 102b616:	call   QWORD PTR [rip+0xfffffffffffd648c]        # 0x1001aa8
 102b61c:	mov    rbx,QWORD PTR [rsp+0x78]
 102b621:	add    rsp,0x50
 102b625:	pop    rdi
 102b626:	ret    
 102b627:	int3   
 102b628:	int3   
 102b629:	int3   
 102b62a:	int3   
 102b62b:	int3   
 102b62c:	int3   
 102b62d:	int3   
 102b62e:	int3   
 102b62f:	int3   
 102b630:	rex push rbx
 102b632:	sub    rsp,0x40
 102b636:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
 102b63f:	mov    rbx,rcx
 102b642:	test   dl,dl
 102b644:	jne    0x102b65c
 102b646:	mov    edx,0x1
 102b64b:	lea    rcx,[rip+0x156e]        # 0x102cbc0
 102b652:	call   QWORD PTR [rip+0xfffffffffffd5de0]        # 0x1001438
 102b658:	test   eax,eax
 102b65a:	je     0x102b6b3
 102b65c:	lea    rcx,[rsp+0x60]
 102b661:	call   QWORD PTR [rip+0xfffffffffffd6459]        # 0x1001ac0
 102b667:	nop
 102b668:	lea    rax,[rip+0xfffffffffffd68f1]        # 0x1001f60
 102b66f:	mov    QWORD PTR [rsp+0x20],rax
 102b674:	lea    r9,[rip+0x37dd5]        # 0x1063450
 102b67b:	mov    r8,QWORD PTR [rbx+0x78]
 102b67f:	lea    rdx,[rip+0xfffffffffffda962]        # 0x1005fe8
 102b686:	lea    rcx,[rsp+0x60]
 102b68b:	call   QWORD PTR [rip+0xfffffffffffd63af]        # 0x1001a40
 102b691:	lea    rcx,[rsp+0x60]
 102b696:	call   QWORD PTR [rip+0xfffffffffffd644c]        # 0x1001ae8
 102b69c:	mov    rcx,rax
 102b69f:	call   QWORD PTR [rip+0xfffffffffffd5b53]        # 0x10011f8
 102b6a5:	nop
 102b6a6:	lea    rcx,[rsp+0x60]
 102b6ab:	call   QWORD PTR [rip+0xfffffffffffd63f7]        # 0x1001aa8
 102b6b1:	mov    al,0x1
 102b6b3:	add    rsp,0x40
 102b6b7:	pop    rbx
 102b6b8:	ret    
 102b6b9:	int3   
 102b6ba:	int3   
 102b6bb:	int3   
 102b6bc:	int3   
 102b6bd:	int3   
 102b6be:	int3   
 102b6bf:	int3   
 102b6c0:	mov    QWORD PTR [rsp+0x18],rbx
 102b6c5:	push   rbp
 102b6c6:	push   rsi
 102b6c7:	push   rdi
 102b6c8:	push   r12
 102b6ca:	push   r13
 102b6cc:	push   r14
 102b6ce:	push   r15
 102b6d0:	sub    rsp,0x70
 102b6d4:	mov    rax,QWORD PTR [rip+0x38195]        # 0x1063870
 102b6db:	xor    rax,rsp
 102b6de:	mov    QWORD PTR [rsp+0x68],rax
 102b6e3:	mov    rdi,QWORD PTR [rsp+0xe0]
 102b6eb:	movzx  r12d,BYTE PTR [rsp+0xd0]
 102b6f4:	xor    eax,eax
 102b6f6:	mov    esi,eax
 102b6f8:	mov    ebp,eax
 102b6fa:	movzx  r14d,r9b
 102b6fe:	mov    r15d,r8d
 102b701:	mov    rbx,rdx
 102b704:	mov    QWORD PTR [rsp+0x40],rdx
 102b709:	mov    r13,rcx
 102b70c:	jmp    0x102b720
 102b70e:	xchg   ax,ax
 102b710:	mov    rbx,QWORD PTR [rsp+0x40]
 102b715:	data16 data16 nop WORD PTR [rax+rax*1+0x0]
 102b720:	lea    rcx,[rip+0x37d29]        # 0x1063450
 102b727:	call   QWORD PTR [rip+0xfffffffffffd5d1b]        # 0x1001448
 102b72d:	mov    eax,0x88888889
 102b732:	mul    ebp
 102b734:	shr    edx,0x4
 102b737:	mov    eax,ebp
 102b739:	inc    ebp
 102b73b:	imul   edx,edx,0x1e
 102b73e:	cmp    eax,edx
 102b740:	jne    0x102b77a
 102b742:	or     rax,0xffffffffffffffff
 102b746:	inc    rax
 102b749:	cmp    WORD PTR [rdi+rax*2],0x0
 102b74e:	jne    0x102b746
 102b750:	test   rax,rax
 102b753:	je     0x102b77a
 102b755:	mov    rax,QWORD PTR [r13+0x0]
 102b759:	xor    ecx,ecx
 102b75b:	mov    BYTE PTR [rsp+0x30],0x1
 102b760:	mov    BYTE PTR [rsp+0x28],0x1
 102b765:	mov    DWORD PTR [rsp+0x20],ecx
 102b769:	xor    r9d,r9d
 102b76c:	mov    rcx,r13
 102b76f:	mov    r8,rdi
 102b772:	mov    edx,0x4000c484
 102b777:	call   QWORD PTR [rax+0x8]
 102b77a:	test   r14b,r14b
 102b77d:	jne    0x102b78b
 102b77f:	test   r12b,r12b
 102b782:	jne    0x102b78b
 102b784:	xor    eax,eax
 102b786:	mov    r8d,eax
 102b789:	jmp    0x102b791
 102b78b:	mov    r8d,0x1
 102b791:	mov    edx,0x3e8
 102b796:	mov    rcx,rbx
 102b799:	call   QWORD PTR [rip+0xfffffffffffd5bf1]        # 0x1001390
 102b79f:	mov    ebx,eax
 102b7a1:	test   r12b,r12b
 102b7a4:	je     0x102b811
 102b7a6:	mov    edx,0x1
 102b7ab:	lock xadd DWORD PTR [rip+0x3827d],edx        # 0x1063a30
 102b7b3:	mov    eax,DWORD PTR [rsp+0xd8]
 102b7ba:	inc    edx
 102b7bc:	mov    r8d,0x0
 102b7c2:	mov    ecx,0x7
 102b7c7:	cmp    eax,0x2
 102b7ca:	mov    DWORD PTR [rsp+0x5c],edx
 102b7ce:	cmove  ecx,r8d
 102b7d2:	lea    rdx,[rsp+0x48]
 102b7d7:	mov    DWORD PTR [rsp+0x48],0x10
 102b7df:	mov    DWORD PTR [rsp+0x50],ecx
 102b7e3:	mov    rcx,QWORD PTR [rip+0x3813e]        # 0x1063928
 102b7ea:	mov    QWORD PTR [rsp+0x54],r8
 102b7ef:	mov    DWORD PTR [rsp+0x4c],eax
 102b7f3:	mov    DWORD PTR [rsp+0x60],0x1d4c0
 102b7fb:	call   QWORD PTR [rip+0xfffffffffffd589f]        # 0x10010a0
 102b801:	test   eax,eax
 102b803:	jne    0x102b811
 102b805:	lea    rcx,[rip+0xfffffffffffda93c]        # 0x1006148
 102b80c:	call   0x102db20
 102b811:	add    esi,0x3e8
 102b817:	test   ebx,ebx
 102b819:	je     0x102b83b
 102b81b:	cmp    r15d,0xffffffff
 102b81f:	je     0x102b826
 102b821:	cmp    esi,r15d
 102b824:	ja     0x102b83b
 102b826:	test   r14b,r14b
 102b829:	je     0x102b710
 102b82f:	cmp    ebx,0xc0
 102b835:	jne    0x102b710
 102b83b:	mov    eax,ebx
 102b83d:	mov    rcx,QWORD PTR [rsp+0x68]
 102b842:	xor    rcx,rsp
 102b845:	call   0x103ff40
 102b84a:	mov    rbx,QWORD PTR [rsp+0xc0]
 102b852:	add    rsp,0x70
 102b856:	pop    r15
 102b858:	pop    r14
 102b85a:	pop    r13
 102b85c:	pop    r12
 102b85e:	pop    rdi
 102b85f:	pop    rsi
 102b860:	pop    rbp
 102b861:	ret    
 102b862:	int3   
 102b863:	int3   
 102b864:	int3   
 102b865:	int3   
 102b866:	int3   
 102b867:	int3   
 102b868:	int3   
 102b869:	int3   
 102b86a:	int3   
 102b86b:	int3   
 102b86c:	int3   
 102b86d:	int3   
 102b86e:	int3   
 102b86f:	int3   
 102b870:	mov    rax,rsp
 102b873:	push   rsi
 102b874:	push   rdi
 102b875:	push   r15
 102b877:	sub    rsp,0x60
 102b87b:	mov    QWORD PTR [rax-0x28],0xfffffffffffffffe
 102b883:	mov    QWORD PTR [rax+0x8],rbx
 102b887:	mov    QWORD PTR [rax+0x10],rbp
 102b88b:	mov    ebp,r8d
 102b88e:	mov    rdi,rdx
 102b891:	mov    rsi,rcx
 102b894:	lea    rcx,[rax-0x38]
 102b898:	call   QWORD PTR [rip+0xfffffffffffd6222]        # 0x1001ac0
 102b89e:	nop
 102b89f:	mov    rcx,rdi
 102b8a2:	call   0x1030aa0
 102b8a7:	test   al,al
 102b8a9:	je     0x102b9c7
 102b8af:	cmp    BYTE PTR [rsi+0xb8],0x0
 102b8b6:	jne    0x102b9c7
 102b8bc:	mov    r15d,0x4e
 102b8c2:	mov    WORD PTR [rsp+0x98],r15w
 102b8cb:	mov    edx,0x4000c406
 102b8d0:	lea    rcx,[rsp+0x48]
 102b8d5:	call   0x10132d0
 102b8da:	nop
 102b8db:	mov    rcx,rax
 102b8de:	call   QWORD PTR [rip+0xfffffffffffd6204]        # 0x1001ae8
 102b8e4:	mov    rdx,rax
 102b8e7:	mov    r8,QWORD PTR [rsi+0x78]
 102b8eb:	lea    rcx,[rsp+0x40]
 102b8f0:	call   QWORD PTR [rip+0xfffffffffffd614a]        # 0x1001a40
 102b8f6:	nop
 102b8f7:	lea    rcx,[rsp+0x48]
 102b8fc:	call   QWORD PTR [rip+0xfffffffffffd61a6]        # 0x1001aa8
 102b902:	mov    rbx,QWORD PTR [rsi]
 102b905:	lea    rcx,[rsp+0x40]
 102b90a:	call   QWORD PTR [rip+0xfffffffffffd61d8]        # 0x1001ae8
 102b910:	mov    r8,rax
 102b913:	mov    BYTE PTR [rsp+0x30],0x1
 102b918:	mov    BYTE PTR [rsp+0x28],0x0
 102b91d:	mov    DWORD PTR [rsp+0x20],0x0
 102b925:	xor    r9d,r9d
 102b928:	mov    edx,0x4000c406
 102b92d:	mov    rcx,rsi
 102b930:	call   QWORD PTR [rbx+0x8]
 102b933:	call   QWORD PTR [rip+0xfffffffffffd5e2f]        # 0x1001768
 102b939:	lea    rcx,[rax+0x30]
 102b93d:	call   QWORD PTR [rip+0xfffffffffffd5e35]        # 0x1001778
 102b943:	call   QWORD PTR [rip+0xfffffffffffd5e1f]        # 0x1001768
 102b949:	mov    rcx,rax
 102b94c:	call   QWORD PTR [rip+0xfffffffffffd5e26]        # 0x1001778
 102b952:	lea    r8d,[r15-0x4d]
 102b956:	lea    rdx,[rsp+0x98]
 102b95e:	lea    rcx,[rip+0xfffffffffffd88e3]        # 0x1004248
 102b965:	call   QWORD PTR [rip+0xfffffffffffd5e5d]        # 0x10017c8
 102b96b:	test   eax,eax
 102b96d:	jne    0x102b97d
 102b96f:	movzx  ecx,r15w
 102b973:	mov    WORD PTR [rsp+0x98],cx
 102b97b:	jmp    0x102b985
 102b97d:	movzx  ecx,WORD PTR [rsp+0x98]
 102b985:	call   QWORD PTR [rip+0xfffffffffffd5df5]        # 0x1001780
 102b98b:	test   eax,eax
 102b98d:	je     0x102b9a7
 102b98f:	movzx  ecx,WORD PTR [rsp+0x98]
 102b997:	call   QWORD PTR [rip+0xfffffffffffd5df3]        # 0x1001790
 102b99d:	mov    WORD PTR [rsp+0x98],ax
 102b9a5:	jmp    0x102b9af
 102b9a7:	movzx  eax,WORD PTR [rsp+0x98]
 102b9af:	cmp    r15w,ax
 102b9b3:	jne    0x102b9c7
 102b9b5:	lea    rcx,[rsp+0x40]
 102b9ba:	call   QWORD PTR [rip+0xfffffffffffd60e8]        # 0x1001aa8
 102b9c0:	xor    al,al
 102b9c2:	jmp    0x102bab4
 102b9c7:	mov    QWORD PTR [rsp+0x30],0x0
 102b9d0:	mov    DWORD PTR [rsp+0x28],0x100080
 102b9d8:	mov    DWORD PTR [rsp+0x20],ebp
 102b9dc:	xor    r9d,r9d
 102b9df:	mov    edx,0x40000000
 102b9e4:	lea    r8d,[r9+0x1]
 102b9e8:	mov    rcx,rdi
 102b9eb:	call   QWORD PTR [rip+0xfffffffffffd57ef]        # 0x10011e0
 102b9f1:	mov    QWORD PTR [rsi+0x18],rax
 102b9f5:	cmp    rax,0xffffffffffffffff
 102b9f9:	jne    0x102ba86
 102b9ff:	mov    edx,0xc000c39a
 102ba04:	lea    rcx,[rsp+0x98]
 102ba0c:	call   0x10132d0
 102ba11:	mov    rdi,rax
 102ba14:	call   QWORD PTR [rip+0xfffffffffffd5b36]        # 0x1001550
 102ba1a:	mov    ebx,eax
 102ba1c:	mov    rcx,rdi
 102ba1f:	call   QWORD PTR [rip+0xfffffffffffd60c3]        # 0x1001ae8
 102ba25:	mov    rdx,rax
 102ba28:	mov    r8d,ebx
 102ba2b:	lea    rcx,[rsp+0x40]
 102ba30:	call   QWORD PTR [rip+0xfffffffffffd600a]        # 0x1001a40
 102ba36:	nop
 102ba37:	lea    rcx,[rsp+0x98]
 102ba3f:	call   QWORD PTR [rip+0xfffffffffffd6063]        # 0x1001aa8
 102ba45:	mov    rbx,QWORD PTR [rsi]
 102ba48:	lea    rcx,[rsp+0x40]
 102ba4d:	call   QWORD PTR [rip+0xfffffffffffd6095]        # 0x1001ae8
 102ba53:	mov    r8,rax
 102ba56:	mov    BYTE PTR [rsp+0x30],0x1
 102ba5b:	mov    BYTE PTR [rsp+0x28],0x1
 102ba60:	mov    DWORD PTR [rsp+0x20],0x0
 102ba68:	xor    r9d,r9d
 102ba6b:	mov    edx,0xc000c39a
 102ba70:	mov    rcx,rsi
 102ba73:	call   QWORD PTR [rbx+0x8]
 102ba76:	nop
 102ba77:	lea    rcx,[rsp+0x40]
 102ba7c:	call   QWORD PTR [rip+0xfffffffffffd6026]        # 0x1001aa8
 102ba82:	xor    al,al
 102ba84:	jmp    0x102bab4
 102ba86:	xor    r8d,r8d
 102ba89:	mov    rdx,rsi
 102ba8c:	mov    rcx,rax
 102ba8f:	call   0x1030ec0
 102ba94:	test   al,al
 102ba96:	jne    0x102baa7
 102ba98:	lea    rcx,[rsp+0x40]
 102ba9d:	call   QWORD PTR [rip+0xfffffffffffd6005]        # 0x1001aa8
 102baa3:	xor    al,al
 102baa5:	jmp    0x102bab4
 102baa7:	lea    rcx,[rsp+0x40]
 102baac:	call   QWORD PTR [rip+0xfffffffffffd5ff6]        # 0x1001aa8
 102bab2:	mov    al,0x1
 102bab4:	lea    r11,[rsp+0x60]
 102bab9:	mov    rbx,QWORD PTR [r11+0x20]
 102babd:	mov    rbp,QWORD PTR [r11+0x28]
 102bac1:	mov    rsp,r11
 102bac4:	pop    r15
 102bac6:	pop    rdi
 102bac7:	pop    rsi
 102bac8:	ret    
 102bac9:	int3   
 102baca:	int3   
 102bacb:	int3   
 102bacc:	int3   
 102bacd:	int3   
 102bace:	int3   
 102bacf:	int3   
 102bad0:	rex push rbx
 102bad2:	sub    rsp,0x60
 102bad6:	mov    QWORD PTR [rsp+0x40],0xfffffffffffffffe
 102badf:	mov    rbx,rcx
 102bae2:	xor    eax,eax
 102bae4:	mov    QWORD PTR [rsp+0x48],rax
 102bae9:	mov    QWORD PTR [rsp+0x50],rax
 102baee:	mov    QWORD PTR [rsp+0x58],rax
 102baf3:	mov    DWORD PTR [rsp+0x48],0x18
 102bafb:	mov    DWORD PTR [rsp+0x58],0x1
 102bb03:	lea    rdx,[rcx+0x78]
 102bb07:	lea    r8,[rip+0xfffffffffffd63fa]        # 0x1001f08
 102bb0e:	lea    rcx,[rsp+0x78]
 102bb13:	call   0x100af10
 102bb18:	nop
 102bb19:	lea    r8,[rip+0xfffffffffffda950]        # 0x1006470
 102bb20:	mov    rdx,rax
 102bb23:	lea    rcx,[rsp+0x70]
 102bb28:	call   0x100af10
 102bb2d:	nop
 102bb2e:	lea    rcx,[rsp+0x78]
 102bb33:	call   QWORD PTR [rip+0xfffffffffffd5f6f]        # 0x1001aa8
 102bb39:	lea    rcx,[rsp+0x70]
 102bb3e:	call   QWORD PTR [rip+0xfffffffffffd5fa4]        # 0x1001ae8
 102bb44:	mov    rcx,rax
 102bb47:	mov    QWORD PTR [rsp+0x30],0x0
 102bb50:	mov    DWORD PTR [rsp+0x28],0x100080
 102bb58:	mov    DWORD PTR [rsp+0x20],0x2
 102bb60:	lea    r9,[rsp+0x48]
 102bb65:	mov    edx,0x40000000
 102bb6a:	mov    r8d,0x3
 102bb70:	call   QWORD PTR [rip+0xfffffffffffd566a]        # 0x10011e0
 102bb76:	mov    QWORD PTR [rbx+0x20],rax
 102bb7a:	cmp    rax,0xffffffffffffffff
 102bb7e:	je     0x102bb89
 102bb80:	test   rax,rax
 102bb83:	je     0x102bb89
 102bb85:	mov    bl,0x1
 102bb87:	jmp    0x102bb8b
 102bb89:	xor    bl,bl
 102bb8b:	lea    rcx,[rsp+0x70]
 102bb90:	call   QWORD PTR [rip+0xfffffffffffd5f12]        # 0x1001aa8
 102bb96:	movzx  eax,bl
 102bb99:	add    rsp,0x60
 102bb9d:	pop    rbx
 102bb9e:	ret    
 102bb9f:	int3   
 102bba0:	int3   
 102bba1:	int3   
 102bba2:	int3   
 102bba3:	int3   
 102bba4:	int3   
 102bba5:	int3   
 102bba6:	int3   
 102bba7:	int3   
 102bba8:	int3   
 102bba9:	int3   
 102bbaa:	int3   
 102bbab:	int3   
 102bbac:	int3   
 102bbad:	int3   
 102bbae:	int3   
 102bbaf:	int3   
 102bbb0:	rex push rbx
 102bbb2:	sub    rsp,0x20
 102bbb6:	mov    rax,QWORD PTR [rcx+0x18]
 102bbba:	lea    rbx,[rcx+0x18]
 102bbbe:	cmp    rax,0xffffffffffffffff
 102bbc2:	je     0x102bbe0
 102bbc4:	test   rax,rax
 102bbc7:	je     0x102bbe0
 102bbc9:	mov    rcx,rbx
 102bbcc:	call   0x1034510
 102bbd1:	mov    QWORD PTR [rbx],0xffffffffffffffff
 102bbd8:	mov    al,0x1
 102bbda:	add    rsp,0x20
 102bbde:	pop    rbx
 102bbdf:	ret    
 102bbe0:	xor    al,al
 102bbe2:	add    rsp,0x20
 102bbe6:	pop    rbx
 102bbe7:	ret    
 102bbe8:	int3   
 102bbe9:	int3   
 102bbea:	int3   
 102bbeb:	int3   
 102bbec:	int3   
 102bbed:	int3   
 102bbee:	int3   
 102bbef:	int3   
 102bbf0:	lea    rax,[rcx+0x38]
 102bbf4:	ret    
 102bbf5:	int3   
 102bbf6:	int3   
 102bbf7:	int3   
 102bbf8:	int3   
 102bbf9:	int3   
 102bbfa:	int3   
 102bbfb:	int3   
 102bbfc:	int3   
 102bbfd:	int3   
 102bbfe:	int3   
 102bbff:	int3   
 102bc00:	mov    rax,QWORD PTR [rcx+0x18]
 102bc04:	ret    
 102bc05:	int3   
 102bc06:	int3   
 102bc07:	int3   
 102bc08:	int3   
 102bc09:	int3   
 102bc0a:	int3   
 102bc0b:	int3   
 102bc0c:	int3   
 102bc0d:	int3   
 102bc0e:	int3   
 102bc0f:	int3   
 102bc10:	mov    rax,QWORD PTR [rcx+0x20]
 102bc14:	ret    
 102bc15:	int3   
 102bc16:	int3   
 102bc17:	int3   
 102bc18:	int3   
 102bc19:	int3   
 102bc1a:	int3   
 102bc1b:	int3   
 102bc1c:	int3   
 102bc1d:	int3   
 102bc1e:	int3   
 102bc1f:	int3   
 102bc20:	rex push rbx
 102bc22:	sub    rsp,0x20
 102bc26:	mov    rbx,rdx
 102bc29:	movsxd rdx,r8d
 102bc2c:	lea    r8,[rip+0x3781d]        # 0x1063450
 102bc33:	mov    r9d,0x104
 102bc39:	mov    rcx,rbx
 102bc3c:	call   QWORD PTR [rip+0xfffffffffffd5a66]        # 0x10016a8
 102bc42:	mov    rax,rbx
 102bc45:	add    rsp,0x20
 102bc49:	pop    rbx
 102bc4a:	ret    
 102bc4b:	int3   
 102bc4c:	int3   
 102bc4d:	int3   
 102bc4e:	int3   
 102bc4f:	int3   
 102bc50:	int3   
 102bc51:	int3   
 102bc52:	int3   
 102bc53:	int3   
 102bc54:	int3   
 102bc55:	int3   
 102bc56:	int3   
 102bc57:	int3   
 102bc58:	int3   
 102bc59:	int3   
 102bc5a:	int3   
 102bc5b:	int3   
 102bc5c:	int3   
 102bc5d:	int3   
 102bc5e:	int3   
 102bc5f:	int3   
 102bc60:	rex push rbx
 102bc62:	sub    rsp,0x20
 102bc66:	mov    rax,QWORD PTR [rdx]
 102bc69:	mov    rbx,rcx
 102bc6c:	cmp    rdx,QWORD PTR [rcx+0x8]
 102bc70:	jne    0x102bc78
 102bc72:	mov    QWORD PTR [rcx+0x8],rax
 102bc76:	jmp    0x102bc7f
 102bc78:	mov    rcx,QWORD PTR [rdx+0x8]
 102bc7c:	mov    QWORD PTR [rcx],rax
 102bc7f:	mov    rax,QWORD PTR [rdx+0x8]
 102bc83:	cmp    rdx,QWORD PTR [rbx+0x10]
 102bc87:	jne    0x102bc8f
 102bc89:	mov    QWORD PTR [rbx+0x10],rax
 102bc8d:	jmp    0x102bc96
 102bc8f:	mov    rcx,QWORD PTR [rdx]
 102bc92:	mov    QWORD PTR [rcx+0x8],rax
 102bc96:	mov    rax,QWORD PTR [rbx+0x20]
 102bc9a:	mov    QWORD PTR [rdx],rax
 102bc9d:	dec    QWORD PTR [rbx+0x18]
 102bca1:	mov    QWORD PTR [rbx+0x20],rdx
 102bca5:	jne    0x102bce1
 102bca7:	mov    rax,QWORD PTR [rbx+0x8]
 102bcab:	mov    QWORD PTR [rsp+0x30],rdi
 102bcb0:	test   rax,rax
 102bcb3:	je     0x102bcbd
 102bcb5:	mov    rax,QWORD PTR [rax]
 102bcb8:	test   rax,rax
 102bcbb:	jne    0x102bcb5
 102bcbd:	mov    rcx,QWORD PTR [rbx+0x28]
 102bcc1:	xor    edi,edi
 102bcc3:	mov    QWORD PTR [rbx+0x18],rdi
 102bcc7:	mov    QWORD PTR [rbx+0x20],rdi
 102bccb:	mov    QWORD PTR [rbx+0x10],rdi
 102bccf:	mov    QWORD PTR [rbx+0x8],rdi
 102bcd3:	call   0x103f9ae
 102bcd8:	mov    QWORD PTR [rbx+0x28],rdi
 102bcdc:	mov    rdi,QWORD PTR [rsp+0x30]
 102bce1:	add    rsp,0x20
 102bce5:	pop    rbx
 102bce6:	ret    
 102bce7:	int3   
 102bce8:	int3   
 102bce9:	int3   
 102bcea:	int3   
 102bceb:	int3   
 102bcec:	int3   
 102bced:	int3   
 102bcee:	int3   
 102bcef:	int3   
 102bcf0:	mov    QWORD PTR [rsp+0x8],rbx
 102bcf5:	mov    QWORD PTR [rsp+0x10],rsi
 102bcfa:	push   rdi
 102bcfb:	sub    rsp,0x20
 102bcff:	cmp    QWORD PTR [rcx+0x20],0x0
 102bd04:	mov    rdi,r8
 102bd07:	mov    rsi,rdx
 102bd0a:	mov    rbx,rcx
 102bd0d:	jne    0x102bd54
 102bd0f:	mov    rdx,QWORD PTR [rbx+0x30]
 102bd13:	add    rcx,0x28
 102bd17:	mov    r8d,0x18
 102bd1d:	call   0x103f9a2
 102bd22:	mov    rdx,QWORD PTR [rbx+0x30]
 102bd26:	add    rax,0x8
 102bd2a:	lea    rcx,[rdx+rdx*2]
 102bd2e:	lea    rax,[rax+rcx*8]
 102bd32:	add    rax,0xffffffffffffffe8
 102bd36:	dec    rdx
 102bd39:	js     0x102bd54
 102bd3b:	nop    DWORD PTR [rax+rax*1+0x0]
 102bd40:	mov    rcx,QWORD PTR [rbx+0x20]
 102bd44:	mov    QWORD PTR [rax],rcx
 102bd47:	mov    QWORD PTR [rbx+0x20],rax
 102bd4b:	sub    rax,0x18
 102bd4f:	dec    rdx
 102bd52:	jns    0x102bd40
 102bd54:	mov    rax,QWORD PTR [rbx+0x20]
 102bd58:	test   rax,rax
 102bd5b:	jne    0x102bd63
 102bd5d:	call   0x103f972
 102bd62:	int3   
 102bd63:	mov    rcx,QWORD PTR [rax]
 102bd66:	mov    QWORD PTR [rbx+0x20],rcx
 102bd6a:	mov    QWORD PTR [rax+0x8],rsi
 102bd6e:	mov    rsi,QWORD PTR [rsp+0x38]
 102bd73:	mov    QWORD PTR [rax],rdi
 102bd76:	inc    QWORD PTR [rbx+0x18]
 102bd7a:	mov    rbx,QWORD PTR [rsp+0x30]
 102bd7f:	add    rsp,0x20
 102bd83:	pop    rdi
 102bd84:	ret    
 102bd85:	int3   
 102bd86:	int3   
 102bd87:	int3   
 102bd88:	int3   
 102bd89:	int3   
 102bd8a:	int3   
 102bd8b:	int3   
 102bd8c:	int3   
 102bd8d:	int3   
 102bd8e:	int3   
 102bd8f:	int3   
 102bd90:	mov    QWORD PTR [rsp+0x8],rbx
 102bd95:	push   rdi
 102bd96:	sub    rsp,0x20
 102bd9a:	lea    rax,[rip+0xfffffffffffd88a7]        # 0x1004648
 102bda1:	mov    rbx,rcx
 102bda4:	mov    QWORD PTR [rcx],rax
 102bda7:	mov    rax,QWORD PTR [rcx+0x8]
 102bdab:	test   rax,rax
 102bdae:	je     0x102bdb8
 102bdb0:	mov    rax,QWORD PTR [rax]
 102bdb3:	test   rax,rax
 102bdb6:	jne    0x102bdb0
 102bdb8:	xor    edi,edi
 102bdba:	mov    QWORD PTR [rcx+0x18],rdi
 102bdbe:	mov    QWORD PTR [rcx+0x20],rdi
 102bdc2:	mov    QWORD PTR [rcx+0x10],rdi
 102bdc6:	mov    QWORD PTR [rcx+0x8],rdi
 102bdca:	mov    rcx,QWORD PTR [rcx+0x28]
 102bdce:	call   0x103f9ae
 102bdd3:	mov    QWORD PTR [rbx+0x28],rdi
 102bdd7:	mov    rbx,QWORD PTR [rsp+0x30]
 102bddc:	add    rsp,0x20
 102bde0:	pop    rdi
 102bde1:	ret    
 102bde2:	int3   
 102bde3:	int3   
 102bde4:	int3   
 102bde5:	int3   
 102bde6:	int3   
 102bde7:	int3   
 102bde8:	int3   
 102bde9:	int3   
 102bdea:	int3   
 102bdeb:	int3   
 102bdec:	int3   
 102bded:	int3   
 102bdee:	int3   
 102bdef:	int3   
 102bdf0:	mov    QWORD PTR [rsp+0x20],rbx
 102bdf5:	push   rbp
 102bdf6:	push   rsi
 102bdf7:	push   rdi
 102bdf8:	push   r14
 102bdfa:	push   r15
 102bdfc:	sub    rsp,0x20
 102be00:	mov    eax,DWORD PTR [rdx+0x20]
 102be03:	mov    r14,rdx
 102be06:	mov    rdi,rcx
 102be09:	not    eax
 102be0b:	test   al,0x1
 102be0d:	je     0x102bedd
 102be13:	mov    rdx,QWORD PTR [rcx+0x18]
 102be17:	mov    rcx,r14
 102be1a:	call   0x103f996
 102be1f:	mov    r15,QWORD PTR [rdi+0x8]
 102be23:	test   r15,r15
 102be26:	je     0x102c01f
 102be2c:	nop    DWORD PTR [rax+0x0]
 102be30:	lea    rbx,[r15+0x10]
 102be34:	test   rbx,rbx
 102be37:	je     0x102bed7
 102be3d:	mov    eax,DWORD PTR [r14+0x20]
 102be41:	mov    esi,0x1
 102be46:	not    eax
 102be48:	test   sil,al
 102be4b:	je     0x102be80
 102be4d:	nop    DWORD PTR [rax]
 102be50:	mov    edi,0x1fffffff
 102be55:	mov    rdx,rbx
 102be58:	mov    rcx,r14
 102be5b:	cmp    rsi,rdi
 102be5e:	cmovb  edi,esi
 102be61:	lea    r8d,[rdi*4+0x0]
 102be69:	call   0x103f9ea
 102be6e:	mov    r11d,edi
 102be71:	lea    rbx,[rbx+rdi*4]
 102be75:	sub    rsi,r11
 102be78:	jne    0x102be50
 102be7a:	jmp    0x102beaf
 102be7c:	nop    DWORD PTR [rax+0x0]
 102be80:	mov    ebp,0x1fffffff
 102be85:	mov    rdx,rbx
 102be88:	mov    rcx,r14
 102be8b:	cmp    rsi,rbp
 102be8e:	cmovb  ebp,esi
 102be91:	lea    edi,[rbp*4+0x0]
 102be98:	mov    r8d,edi
 102be9b:	call   0x103f9de
 102bea0:	cmp    eax,edi
 102bea2:	jne    0x102becc
 102bea4:	mov    eax,ebp
 102bea6:	lea    rbx,[rbx+rbp*4]
 102beaa:	sub    rsi,rax
 102bead:	jne    0x102be80
 102beaf:	mov    r15,QWORD PTR [r15]
 102beb2:	test   r15,r15
 102beb5:	jne    0x102be30
 102bebb:	mov    rbx,QWORD PTR [rsp+0x68]
 102bec0:	add    rsp,0x20
 102bec4:	pop    r15
 102bec6:	pop    r14
 102bec8:	pop    rdi
 102bec9:	pop    rsi
 102beca:	pop    rbp
 102becb:	ret    
 102becc:	xor    edx,edx
 102bece:	lea    ecx,[rdx+0x3]
 102bed1:	call   0x103fa32
 102bed6:	int3   
 102bed7:	call   0x103f972
 102bedc:	int3   
 102bedd:	mov    rcx,rdx
 102bee0:	mov    QWORD PTR [rsp+0x50],r12
 102bee5:	call   0x103f98a
 102beea:	mov    r12,rax
 102beed:	test   rax,rax
 102bef0:	je     0x102c01a
 102bef6:	mov    QWORD PTR [rsp+0x60],r13
 102befb:	xor    r13d,r13d
 102befe:	xchg   ax,ax
 102bf00:	mov    ecx,DWORD PTR [r14+0x20]
 102bf04:	mov    esi,0x1
 102bf09:	dec    r12
 102bf0c:	not    ecx
 102bf0e:	lea    r15,[rsp+0x58]
 102bf13:	test   sil,cl
 102bf16:	je     0x102bf50
 102bf18:	nop    DWORD PTR [rax+rax*1+0x0]
 102bf20:	mov    ebx,0x1fffffff
 102bf25:	mov    rdx,r15
 102bf28:	mov    rcx,r14
 102bf2b:	cmp    rsi,rbx
 102bf2e:	cmovb  ebx,esi
 102bf31:	lea    r8d,[rbx*4+0x0]
 102bf39:	call   0x103f9ea
 102bf3e:	mov    r11d,ebx
 102bf41:	lea    r15,[r15+rbx*4]
 102bf45:	sub    rsi,r11
 102bf48:	jne    0x102bf20
 102bf4a:	jmp    0x102bf83
 102bf4c:	nop    DWORD PTR [rax+0x0]
 102bf50:	mov    ebp,0x1fffffff
 102bf55:	mov    rdx,r15
 102bf58:	mov    rcx,r14
 102bf5b:	cmp    rsi,rbp
 102bf5e:	cmovb  ebp,esi
 102bf61:	lea    ebx,[rbp*4+0x0]
 102bf68:	mov    r8d,ebx
 102bf6b:	call   0x103f9de
 102bf70:	cmp    eax,ebx
 102bf72:	jne    0x102c036
 102bf78:	mov    eax,ebp
 102bf7a:	lea    r15,[r15+rbp*4]
 102bf7e:	sub    rsi,rax
 102bf81:	jne    0x102bf50
 102bf83:	mov    rbx,QWORD PTR [rdi+0x10]
 102bf87:	cmp    QWORD PTR [rdi+0x20],r13
 102bf8b:	jne    0x102bfd4
 102bf8d:	mov    rdx,QWORD PTR [rdi+0x30]
 102bf91:	lea    rcx,[rdi+0x28]
 102bf95:	mov    r8d,0x18
 102bf9b:	call   0x103f9a2
 102bfa0:	mov    rdx,QWORD PTR [rdi+0x30]
 102bfa4:	lea    r8,[rdx-0x1]
 102bfa8:	add    rax,0x8
 102bfac:	dec    rdx
 102bfaf:	lea    r8,[r8+r8*2]
 102bfb3:	lea    r8,[rax+r8*8]
 102bfb7:	js     0x102bfd4
 102bfb9:	nop    DWORD PTR [rax+0x0]
 102bfc0:	mov    rax,QWORD PTR [rdi+0x20]
 102bfc4:	mov    QWORD PTR [r8],rax
 102bfc7:	mov    QWORD PTR [rdi+0x20],r8
 102bfcb:	sub    r8,0x18
 102bfcf:	dec    rdx
 102bfd2:	jns    0x102bfc0
 102bfd4:	mov    rcx,QWORD PTR [rdi+0x20]
 102bfd8:	test   rcx,rcx
 102bfdb:	je     0x102c030
 102bfdd:	mov    rax,QWORD PTR [rcx]
 102bfe0:	mov    QWORD PTR [rdi+0x20],rax
 102bfe4:	mov    QWORD PTR [rcx+0x8],rbx
 102bfe8:	mov    QWORD PTR [rcx],r13
 102bfeb:	mov    eax,DWORD PTR [rsp+0x58]
 102bfef:	inc    QWORD PTR [rdi+0x18]
 102bff3:	mov    DWORD PTR [rcx+0x10],eax
 102bff6:	mov    rax,QWORD PTR [rdi+0x10]
 102bffa:	test   rax,rax
 102bffd:	je     0x102c004
 102bfff:	mov    QWORD PTR [rax],rcx
 102c002:	jmp    0x102c008
 102c004:	mov    QWORD PTR [rdi+0x8],rcx
 102c008:	mov    QWORD PTR [rdi+0x10],rcx
 102c00c:	test   r12,r12
 102c00f:	jne    0x102bf00
 102c015:	mov    r13,QWORD PTR [rsp+0x60]
 102c01a:	mov    r12,QWORD PTR [rsp+0x50]
 102c01f:	mov    rbx,QWORD PTR [rsp+0x68]
 102c024:	add    rsp,0x20
 102c028:	pop    r15
 102c02a:	pop    r14
 102c02c:	pop    rdi
 102c02d:	pop    rsi
 102c02e:	pop    rbp
 102c02f:	ret    
 102c030:	call   0x103f972
 102c035:	int3   
 102c036:	xor    edx,edx
 102c038:	lea    ecx,[rdx+0x3]
 102c03b:	call   0x103fa32
 102c040:	int3   
 102c041:	int3   
 102c042:	int3   
 102c043:	int3   
 102c044:	int3   
 102c045:	int3   
 102c046:	int3   
 102c047:	int3   
 102c048:	int3   
 102c049:	int3   
 102c04a:	int3   
 102c04b:	int3   
 102c04c:	int3   
 102c04d:	int3   
 102c04e:	int3   
 102c04f:	int3   
 102c050:	mov    QWORD PTR [rsp+0x8],rbx
 102c055:	mov    QWORD PTR [rsp+0x10],rsi
 102c05a:	push   rdi
 102c05b:	sub    rsp,0x20
 102c05f:	lea    rax,[rip+0xfffffffffffd85e2]        # 0x1004648
 102c066:	mov    edi,edx
 102c068:	mov    rbx,rcx
 102c06b:	mov    QWORD PTR [rcx],rax
 102c06e:	mov    rax,QWORD PTR [rcx+0x8]
 102c072:	test   rax,rax
 102c075:	je     0x102c07f
 102c077:	mov    rax,QWORD PTR [rax]
 102c07a:	test   rax,rax
 102c07d:	jne    0x102c077
 102c07f:	xor    esi,esi
 102c081:	mov    QWORD PTR [rcx+0x18],rsi
 102c085:	mov    QWORD PTR [rcx+0x20],rsi
 102c089:	mov    QWORD PTR [rcx+0x10],rsi
 102c08d:	mov    QWORD PTR [rcx+0x8],rsi
 102c091:	mov    rcx,QWORD PTR [rcx+0x28]
 102c095:	call   0x103f9ae
 102c09a:	mov    QWORD PTR [rbx+0x28],rsi
 102c09e:	test   dil,0x1
 102c0a2:	je     0x102c0ac
 102c0a4:	mov    rcx,rbx
 102c0a7:	call   0x103f95a
 102c0ac:	mov    rsi,QWORD PTR [rsp+0x38]
 102c0b1:	mov    rax,rbx
 102c0b4:	mov    rbx,QWORD PTR [rsp+0x30]
 102c0b9:	add    rsp,0x20
 102c0bd:	pop    rdi
 102c0be:	ret    
 102c0bf:	int3   
 102c0c0:	int3   
 102c0c1:	int3   
 102c0c2:	int3   
 102c0c3:	int3   
 102c0c4:	int3   
 102c0c5:	int3   
 102c0c6:	int3   
 102c0c7:	int3   
 102c0c8:	int3   
 102c0c9:	int3   
 102c0ca:	int3   
 102c0cb:	int3   
 102c0cc:	int3   
 102c0cd:	int3   
 102c0ce:	int3   
 102c0cf:	int3   
 102c0d0:	rex push rbp
 102c0d2:	push   rbx
 102c0d3:	push   rsi
 102c0d4:	push   rdi
 102c0d5:	push   r14
 102c0d7:	lea    rbp,[rsp-0x40]
 102c0dc:	sub    rsp,0x140
 102c0e3:	mov    rax,QWORD PTR [rip+0x37786]        # 0x1063870
 102c0ea:	xor    rax,rsp
 102c0ed:	mov    QWORD PTR [rbp+0x0],rax
 102c0f1:	xor    r14d,r14d
 102c0f4:	or     rdi,0xffffffffffffffff
 102c0f8:	mov    QWORD PTR [rsp+0x78],r8
 102c0fd:	mov    QWORD PTR [rbp-0x80],rdx
 102c101:	mov    rbx,rcx
 102c104:	mov    rax,rdi
 102c107:	mov    esi,r14d
 102c10a:	nop    WORD PTR [rax+rax*1+0x0]
 102c110:	inc    rax
 102c113:	cmp    WORD PTR [rcx+rax*2],si
 102c117:	jne    0x102c110
 102c119:	cmp    rax,0x8
 102c11d:	jb     0x102c538
 102c123:	xor    eax,eax
 102c125:	mov    QWORD PTR [rsp+0x188],r12
 102c12d:	xor    ecx,ecx
 102c12f:	mov    QWORD PTR [rsp+0x138],r13
 102c137:	mov    QWORD PTR [rsp+0x130],r15
 102c13f:	mov    QWORD PTR [rbp-0x20],rax
 102c143:	mov    QWORD PTR [rbp-0x18],rax
 102c147:	mov    QWORD PTR [rsp+0x48],rax
 102c14c:	mov    QWORD PTR [rsp+0x38],rax
 102c151:	xor    r15b,r15b
 102c154:	call   QWORD PTR [rip+0xfffffffffffd5516]        # 0x1001670
 102c15a:	lea    rcx,[rbp-0x60]
 102c15e:	mov    QWORD PTR [rbp-0x60],rax
 102c162:	call   QWORD PTR [rip+0xfffffffffffd5510]        # 0x1001678
 102c168:	mov    ecx,0x76c
 102c16d:	mov    r11,rax
 102c170:	mov    eax,DWORD PTR [rax]
 102c172:	mov    DWORD PTR [rsp+0x50],eax
 102c176:	mov    eax,DWORD PTR [r11+0x4]
 102c17a:	mov    DWORD PTR [rsp+0x54],eax
 102c17e:	mov    eax,DWORD PTR [r11+0x8]
 102c182:	mov    DWORD PTR [rsp+0x58],eax
 102c186:	mov    eax,DWORD PTR [r11+0xc]
 102c18a:	mov    DWORD PTR [rsp+0x5c],eax
 102c18e:	mov    eax,DWORD PTR [r11+0x10]
 102c192:	mov    DWORD PTR [rsp+0x60],eax
 102c196:	mov    eax,DWORD PTR [r11+0x14]
 102c19a:	movzx  r13d,WORD PTR [rsp+0x60]
 102c1a0:	mov    DWORD PTR [rsp+0x64],eax
 102c1a4:	mov    eax,DWORD PTR [r11+0x18]
 102c1a8:	movzx  r12d,WORD PTR [rsp+0x64]
 102c1ae:	mov    DWORD PTR [rsp+0x68],eax
 102c1b2:	mov    eax,DWORD PTR [r11+0x1c]
 102c1b6:	mov    DWORD PTR [rsp+0x6c],eax
 102c1ba:	mov    eax,DWORD PTR [r11+0x20]
 102c1be:	mov    DWORD PTR [rsp+0x40],eax
 102c1c2:	mov    eax,0x3a
 102c1c7:	cmp    ax,WORD PTR [rbx+0x4]
 102c1cb:	je     0x102c295
 102c1d1:	cmp    ax,WORD PTR [rbx+0x6]
 102c1d5:	je     0x102c295
 102c1db:	lea    r14d,[rax-0x31]
 102c1df:	nop
 102c1e0:	inc    rdi
 102c1e3:	cmp    WORD PTR [rbx+rdi*2],si
 102c1e7:	jne    0x102c1e0
 102c1e9:	cmp    rdi,0x11
 102c1ed:	jb     0x102c520
 102c1f3:	mov    eax,0x5f
 102c1f8:	cmp    ax,WORD PTR [rbx+0x10]
 102c1fc:	jne    0x102c520
 102c202:	lea    r9d,[rax-0x5b]
 102c206:	lea    edx,[rax-0x5a]
 102c209:	lea    rcx,[rbp-0x10]
 102c20d:	mov    r8,rbx
 102c210:	call   QWORD PTR [rip+0xfffffffffffd5492]        # 0x10016a8
 102c216:	lea    rcx,[rbp-0x10]
 102c21a:	xor    edi,edi
 102c21c:	mov    WORD PTR [rbp-0x8],di
 102c220:	call   QWORD PTR [rip+0xfffffffffffd551a]        # 0x1001740
 102c226:	mov    WORD PTR [rbp-0x20],ax
 102c22a:	cmp    di,ax
 102c22d:	je     0x102c520
 102c233:	lea    r8,[rbx+0x8]
 102c237:	lea    edx,[rdi+0x5]
 102c23a:	lea    r9d,[rdi+0x2]
 102c23e:	lea    rcx,[rbp-0x10]
 102c242:	call   QWORD PTR [rip+0xfffffffffffd5460]        # 0x10016a8
 102c248:	lea    rcx,[rbp-0x10]
 102c24c:	mov    WORD PTR [rbp-0xc],di
 102c250:	call   QWORD PTR [rip+0xfffffffffffd54ea]        # 0x1001740
 102c256:	mov    WORD PTR [rbp-0x1e],ax
 102c25a:	cmp    di,ax
 102c25d:	je     0x102c520
 102c263:	lea    r8,[rbx+0xc]
 102c267:	lea    edx,[rdi+0x5]
 102c26a:	lea    r9d,[rdi+0x2]
 102c26e:	lea    rcx,[rbp-0x10]
 102c272:	call   QWORD PTR [rip+0xfffffffffffd5430]        # 0x10016a8
 102c278:	lea    rcx,[rbp-0x10]
 102c27c:	mov    WORD PTR [rbp-0xc],di
 102c280:	call   QWORD PTR [rip+0xfffffffffffd54ba]        # 0x1001740
 102c286:	mov    WORD PTR [rbp-0x1a],ax
 102c28a:	cmp    di,ax
 102c28d:	je     0x102c520
 102c293:	jmp    0x102c2c6
 102c295:	mov    eax,0x2b
 102c29a:	cmp    ax,WORD PTR [rbx]
 102c29d:	sete   r15b
 102c2a1:	test   r15b,r15b
 102c2a4:	setne  r14b
 102c2a8:	test   r15b,r15b
 102c2ab:	jne    0x102c2c6
 102c2ad:	lea    eax,[rcx+r12*1]
 102c2b1:	mov    WORD PTR [rbp-0x20],ax
 102c2b5:	lea    eax,[r13+0x1]
 102c2b9:	mov    WORD PTR [rbp-0x1e],ax
 102c2bd:	movzx  eax,WORD PTR [rsp+0x5c]
 102c2c2:	mov    WORD PTR [rbp-0x1a],ax
 102c2c6:	mov    edx,0x5
 102c2cb:	movsxd rdi,r14d
 102c2ce:	lea    rcx,[rbp-0x10]
 102c2d2:	lea    r8,[rbx+rdi*2]
 102c2d6:	lea    r9d,[rdx-0x3]
 102c2da:	call   QWORD PTR [rip+0xfffffffffffd53c8]        # 0x10016a8
 102c2e0:	movzx  ecx,WORD PTR [rbp-0x10]
 102c2e4:	call   QWORD PTR [rip+0xfffffffffffd549e]        # 0x1001788
 102c2ea:	test   eax,eax
 102c2ec:	je     0x102c520
 102c2f2:	movzx  ecx,WORD PTR [rbp-0xe]
 102c2f6:	call   QWORD PTR [rip+0xfffffffffffd548c]        # 0x1001788
 102c2fc:	test   eax,eax
 102c2fe:	je     0x102c520
 102c304:	lea    rcx,[rbp-0x10]
 102c308:	xor    r14d,r14d
 102c30b:	mov    WORD PTR [rbp-0xc],r14w
 102c310:	call   QWORD PTR [rip+0xfffffffffffd542a]        # 0x1001740
 102c316:	lea    r8,[rbx+0x6]
 102c31a:	lea    edx,[r14+0x5]
 102c31e:	lea    r9d,[r14+0x2]
 102c322:	lea    rcx,[rbp-0x10]
 102c326:	lea    r8,[r8+rdi*2]
 102c32a:	mov    WORD PTR [rbp-0x18],ax
 102c32e:	call   QWORD PTR [rip+0xfffffffffffd5374]        # 0x10016a8
 102c334:	movzx  ecx,WORD PTR [rbp-0x10]
 102c338:	call   QWORD PTR [rip+0xfffffffffffd544a]        # 0x1001788
 102c33e:	test   eax,eax
 102c340:	je     0x102c520
 102c346:	movzx  ecx,WORD PTR [rbp-0xe]
 102c34a:	call   QWORD PTR [rip+0xfffffffffffd5438]        # 0x1001788
 102c350:	test   eax,eax
 102c352:	je     0x102c520
 102c358:	lea    rcx,[rbp-0x10]
 102c35c:	mov    WORD PTR [rbp-0xc],r14w
 102c361:	call   QWORD PTR [rip+0xfffffffffffd53d9]        # 0x1001740
 102c367:	lea    r8,[rbx+0xc]
 102c36b:	lea    edx,[r14+0x5]
 102c36f:	lea    r9d,[r14+0x2]
 102c373:	lea    rcx,[rbp-0x10]
 102c377:	lea    r8,[r8+rdi*2]
 102c37b:	mov    WORD PTR [rbp-0x16],ax
 102c37f:	call   QWORD PTR [rip+0xfffffffffffd5323]        # 0x10016a8
 102c385:	movzx  ecx,WORD PTR [rbp-0x10]
 102c389:	call   QWORD PTR [rip+0xfffffffffffd53f9]        # 0x1001788
 102c38f:	test   eax,eax
 102c391:	je     0x102c520
 102c397:	movzx  ecx,WORD PTR [rbp-0xe]
 102c39b:	call   QWORD PTR [rip+0xfffffffffffd53e7]        # 0x1001788
 102c3a1:	test   eax,eax
 102c3a3:	je     0x102c520
 102c3a9:	lea    rcx,[rbp-0x10]
 102c3ad:	mov    WORD PTR [rbp-0xc],r14w
 102c3b2:	call   QWORD PTR [rip+0xfffffffffffd5388]        # 0x1001740
 102c3b8:	mov    r11d,eax
 102c3bb:	mov    WORD PTR [rbp-0x14],r11w
 102c3c0:	test   r15b,r15b
 102c3c3:	jne    0x102c4a9
 102c3c9:	movaps xmm0,XMMWORD PTR [rbp-0x20]
 102c3cd:	mov    ebx,DWORD PTR [rsp+0x40]
 102c3d1:	movaps XMMWORD PTR [rsp+0x120],xmm6
 102c3d9:	movups xmm6,XMMWORD PTR [rsp+0x50]
 102c3de:	lea    rdx,[rbp-0x70]
 102c3e2:	lea    rcx,[rbp-0x50]
 102c3e6:	mov    DWORD PTR [rbp-0x30],ebx
 102c3e9:	movaps XMMWORD PTR [rsp+0x110],xmm7
 102c3f1:	movups xmm7,XMMWORD PTR [rsp+0x60]
 102c3f6:	movdqa XMMWORD PTR [rbp-0x70],xmm0
 102c3fb:	movups XMMWORD PTR [rbp-0x40],xmm7
 102c3ff:	movups XMMWORD PTR [rbp-0x50],xmm6
 102c403:	call   0x10304e0
 102c408:	test   rax,rax
 102c40b:	setg   al
 102c40e:	test   al,al
 102c410:	je     0x102c46a
 102c412:	mov    eax,0x76c
 102c417:	inc    r13w
 102c41b:	lea    rdx,[rbp-0x70]
 102c41f:	add    r12w,ax
 102c423:	movzx  eax,WORD PTR [rsp+0x5c]
 102c428:	mov    WORD PTR [rbp-0x1e],r13w
 102c42d:	movups XMMWORD PTR [rbp-0x50],xmm6
 102c431:	movups XMMWORD PTR [rbp-0x40],xmm7
 102c435:	mov    WORD PTR [rbp-0x20],r12w
 102c43a:	mov    WORD PTR [rbp-0x1a],ax
 102c43e:	lea    rcx,[rbp-0x50]
 102c442:	movaps xmm0,XMMWORD PTR [rbp-0x20]
 102c446:	movdqa XMMWORD PTR [rbp-0x70],xmm0
 102c44b:	mov    DWORD PTR [rbp-0x30],ebx
 102c44e:	call   0x10304e0
 102c453:	test   rax,rax
 102c456:	setg   al
 102c459:	test   al,al
 102c45b:	je     0x102c46a
 102c45d:	lea    edx,[r14+0x1]
 102c461:	lea    rcx,[rbp-0x20]
 102c465:	call   0x1030580
 102c46a:	lea    rdx,[rsp+0x48]
 102c46f:	lea    rcx,[rbp-0x20]
 102c473:	call   QWORD PTR [rip+0xfffffffffffd4ef7]        # 0x1001370
 102c479:	lea    rdx,[rsp+0x38]
 102c47e:	lea    rcx,[rsp+0x48]
 102c483:	call   QWORD PTR [rip+0xfffffffffffd4eef]        # 0x1001378
 102c489:	mov    r11d,DWORD PTR [rsp+0x38]
 102c48e:	mov    eax,DWORD PTR [rsp+0x3c]
 102c492:	movaps xmm7,XMMWORD PTR [rsp+0x110]
 102c49a:	movaps xmm6,XMMWORD PTR [rsp+0x120]
 102c4a2:	mov    DWORD PTR [rsp+0x30],r11d
 102c4a7:	jmp    0x102c4e1
 102c4a9:	movzx  eax,WORD PTR [rbp-0x1a]
 102c4ad:	lea    rcx,[rax+rax*2]
 102c4b1:	movzx  eax,WORD PTR [rbp-0x18]
 102c4b5:	lea    r8,[rax+rcx*8]
 102c4b9:	movzx  eax,WORD PTR [rbp-0x16]
 102c4bd:	imul   r8,r8,0x3c
 102c4c1:	add    r8,rax
 102c4c4:	movzx  eax,r11w
 102c4c8:	neg    rax
 102c4cb:	imul   r8,r8,0x3c
 102c4cf:	sub    rax,r8
 102c4d2:	imul   rax,rax,0x989680
 102c4d9:	mov    DWORD PTR [rsp+0x30],eax
 102c4dd:	sar    rax,0x20
 102c4e1:	xor    r8d,r8d
 102c4e4:	xor    ecx,ecx
 102c4e6:	mov    DWORD PTR [rsp+0x34],eax
 102c4ea:	lea    edx,[r8+0x1]
 102c4ee:	call   QWORD PTR [rip+0xfffffffffffd4ec4]        # 0x10013b8
 102c4f4:	mov    rsi,rax
 102c4f7:	test   rax,rax
 102c4fa:	je     0x102c520
 102c4fc:	mov    rax,QWORD PTR [rsp+0x78]
 102c501:	mov    r9,QWORD PTR [rbp-0x80]
 102c505:	lea    rdx,[rsp+0x30]
 102c50a:	xor    r8d,r8d
 102c50d:	mov    rcx,rsi
 102c510:	mov    DWORD PTR [rsp+0x28],r14d
 102c515:	mov    QWORD PTR [rsp+0x20],rax
 102c51a:	call   QWORD PTR [rip+0xfffffffffffd4ea0]        # 0x10013c0
 102c520:	mov    r13,QWORD PTR [rsp+0x138]
 102c528:	mov    r12,QWORD PTR [rsp+0x188]
 102c530:	mov    r15,QWORD PTR [rsp+0x130]
 102c538:	mov    rax,rsi
 102c53b:	mov    rcx,QWORD PTR [rbp+0x0]
 102c53f:	xor    rcx,rsp
 102c542:	call   0x103ff40
 102c547:	add    rsp,0x140
 102c54e:	pop    r14
 102c550:	pop    rdi
 102c551:	pop    rsi
 102c552:	pop    rbx
 102c553:	pop    rbp
 102c554:	ret    
 102c555:	int3   
 102c556:	int3   
 102c557:	int3   
 102c558:	int3   
 102c559:	int3   
 102c55a:	int3   
 102c55b:	int3   
 102c55c:	int3   
 102c55d:	int3   
 102c55e:	int3   
 102c55f:	int3   
 102c560:	mov    rax,rsp
 102c563:	push   rbp
 102c564:	push   r12
 102c566:	push   r13
 102c568:	push   r14
 102c56a:	push   r15
 102c56c:	lea    rbp,[rax-0x5f]
 102c570:	sub    rsp,0x100
 102c577:	mov    QWORD PTR [rbp-0x59],0xfffffffffffffffe
 102c57f:	mov    QWORD PTR [rax+0x10],rbx
 102c583:	mov    QWORD PTR [rax+0x18],rsi
 102c587:	mov    QWORD PTR [rax+0x20],rdi
 102c58b:	mov    rax,QWORD PTR [rip+0x372de]        # 0x1063870
 102c592:	xor    rax,rsp
 102c595:	mov    QWORD PTR [rbp+0x2f],rax
 102c599:	mov    rdi,rcx
 102c59c:	mov    ebx,0x102
 102c5a1:	call   QWORD PTR [rip+0xfffffffffffd4d11]        # 0x10012b8
 102c5a7:	mov    esi,eax
 102c5a9:	mov    DWORD PTR [rsp+0x48],eax
 102c5ad:	mov    r9,QWORD PTR [rdi+0x10]
 102c5b1:	xor    r14d,r14d
 102c5b4:	test   r9,r9
 102c5b7:	je     0x102c62d
 102c5b9:	nop    DWORD PTR [rax+0x0]
 102c5c0:	mov    rsi,QWORD PTR [r9+0x30]
 102c5c4:	cmp    BYTE PTR [r9+0x38],r14b
 102c5c8:	jne    0x102c619
 102c5ca:	add    r9,0x10
 102c5ce:	mov    rdx,QWORD PTR [rdi+0x160]
 102c5d5:	test   rdx,rdx
 102c5d8:	je     0x102c619
 102c5da:	nop    WORD PTR [rax+rax*1+0x0]
 102c5e0:	lea    r8,[rdx+0x10]
 102c5e4:	test   r8,r8
 102c5e7:	je     0x102c623
 102c5e9:	test   r9,r9
 102c5ec:	je     0x102c623
 102c5ee:	mov    ecx,r14d
 102c5f1:	mov    eax,DWORD PTR [r9]
 102c5f4:	cmp    DWORD PTR [r8],eax
 102c5f7:	sete   cl
 102c5fa:	test   ecx,ecx
 102c5fc:	jne    0x102c608
 102c5fe:	mov    rdx,QWORD PTR [rdx]
 102c601:	test   rdx,rdx
 102c604:	jne    0x102c5e0
 102c606:	jmp    0x102c619
 102c608:	test   rdx,rdx
 102c60b:	je     0x102c619
 102c60d:	lea    rcx,[rdi+0x158]
 102c614:	call   0x102bc60
 102c619:	mov    r9,rsi
 102c61c:	test   rsi,rsi
 102c61f:	je     0x102c629
 102c621:	jmp    0x102c5c0
 102c623:	call   0x103f972
 102c628:	int3   
 102c629:	mov    esi,DWORD PTR [rsp+0x48]
 102c62d:	cmp    QWORD PTR [rdi+0x10],r14
 102c631:	je     0x102cb80
 102c637:	nop    WORD PTR [rax+rax*1+0x0]
 102c640:	mov    rcx,QWORD PTR [rdi+0x10]
 102c644:	mov    r13,QWORD PTR [rcx+0x30]
 102c648:	lea    rdx,[rsp+0x40]
 102c64d:	cmp    BYTE PTR [rcx+0x38],0x0
 102c651:	jne    0x102c8ee
 102c657:	mov    rcx,QWORD PTR [rcx]
 102c65a:	call   QWORD PTR [rip+0xfffffffffffd4c60]        # 0x10012c0
 102c660:	cmp    DWORD PTR [rsp+0x40],0x103
 102c668:	jne    0x102c8e0
 102c66e:	mov    rax,QWORD PTR [rdi+0x10]
 102c672:	mov    ecx,DWORD PTR [rax+0x10]
 102c675:	call   0x1034bc0
 102c67a:	cmp    eax,esi
 102c67c:	jne    0x102c8e0
 102c682:	mov    rcx,QWORD PTR [rdi+0x10]
 102c686:	cmp    BYTE PTR [rcx+0x18],0x0
 102c68a:	je     0x102c6a0
 102c68c:	lea    rdx,[rdi+0x158]
 102c693:	mov    r8b,0x1
 102c696:	call   0x10345a0
 102c69b:	jmp    0x102cb55
 102c6a0:	mov    BYTE PTR [rip+0x37395],0x1        # 0x1063a3c
 102c6a7:	cmp    ebx,0xc0
 102c6ad:	je     0x102c868
 102c6b3:	mov    eax,DWORD PTR [rip+0x3726b]        # 0x1063924
 102c6b9:	cmp    eax,0x2
 102c6bc:	jge    0x102c868
 102c6c2:	mov    DWORD PTR [rbp-0x7d],r14d
 102c6c6:	mov    rcx,QWORD PTR [rdi+0x10]
 102c6ca:	lea    rdx,[rbp-0x7d]
 102c6ce:	mov    rcx,QWORD PTR [rcx]
 102c6d1:	call   QWORD PTR [rip+0xfffffffffffd4be9]        # 0x10012c0
 102c6d7:	cmp    DWORD PTR [rbp-0x7d],0x103
 102c6de:	jne    0x102c868
 102c6e4:	lea    rcx,[rbp-0x79]
 102c6e8:	call   QWORD PTR [rip+0xfffffffffffd53d2]        # 0x1001ac0
 102c6ee:	nop
 102c6ef:	mov    edx,0x4000c411
 102c6f4:	lea    rcx,[rbp-0x69]
 102c6f8:	call   0x10132d0
 102c6fd:	nop
 102c6fe:	mov    rbx,QWORD PTR [rdi+0x10]
 102c702:	mov    rcx,rax
 102c705:	call   QWORD PTR [rip+0xfffffffffffd53dd]        # 0x1001ae8
 102c70b:	mov    rdx,rax
 102c70e:	mov    r9,QWORD PTR [rbx+0x28]
 102c712:	mov    r8,QWORD PTR [rbx+0x20]
 102c716:	lea    rcx,[rbp-0x79]
 102c71a:	call   QWORD PTR [rip+0xfffffffffffd5320]        # 0x1001a40
 102c720:	nop
 102c721:	lea    rcx,[rbp-0x69]
 102c725:	call   QWORD PTR [rip+0xfffffffffffd537d]        # 0x1001aa8
 102c72b:	lea    rcx,[rbp-0x79]
 102c72f:	call   QWORD PTR [rip+0xfffffffffffd53b3]        # 0x1001ae8
 102c735:	mov    rsi,rax
 102c738:	cmp    DWORD PTR [rdi+0xd8],0x2
 102c73f:	sete   r15b
 102c743:	mov    rax,QWORD PTR [rdi+0x10]
 102c747:	mov    r12,QWORD PTR [rax]
 102c74a:	nop    WORD PTR [rax+rax*1+0x0]
 102c750:	lea    rcx,[rip+0x36cf9]        # 0x1063450
 102c757:	call   QWORD PTR [rip+0xfffffffffffd4ceb]        # 0x1001448
 102c75d:	mov    eax,0x88888889
 102c762:	mul    r14d
 102c765:	shr    edx,0x4
 102c768:	imul   edx,edx,0x1e
 102c76b:	mov    eax,r14d
 102c76e:	inc    r14d
 102c771:	cmp    eax,edx
 102c773:	jne    0x102c7b5
 102c775:	or     rax,0xffffffffffffffff
 102c779:	nop    DWORD PTR [rax+0x0]
 102c780:	inc    rax
 102c783:	cmp    WORD PTR [rsi+rax*2],0x0
 102c788:	jne    0x102c780
 102c78a:	test   rax,rax
 102c78d:	je     0x102c7b5
 102c78f:	mov    rax,QWORD PTR [rdi]
 102c792:	mov    BYTE PTR [rsp+0x30],0x1
 102c797:	mov    BYTE PTR [rsp+0x28],0x1
 102c79c:	mov    DWORD PTR [rsp+0x20],0x0
 102c7a4:	xor    r9d,r9d
 102c7a7:	mov    r8,rsi
 102c7aa:	mov    edx,0x4000c484
 102c7af:	mov    rcx,rdi
 102c7b2:	call   QWORD PTR [rax+0x8]
 102c7b5:	mov    edx,0x3e8
 102c7ba:	mov    r8d,0x1
 102c7c0:	mov    rcx,r12
 102c7c3:	call   QWORD PTR [rip+0xfffffffffffd4bc7]        # 0x1001390
 102c7c9:	mov    ebx,eax
 102c7cb:	test   r15b,r15b
 102c7ce:	je     0x102c825
 102c7d0:	mov    ecx,0x1
 102c7d5:	lock xadd DWORD PTR [rip+0x37253],ecx        # 0x1063a30
 102c7dd:	inc    ecx
 102c7df:	mov    DWORD PTR [rbp-0x49],0x7
 102c7e6:	mov    DWORD PTR [rbp-0x51],0x10
 102c7ed:	xor    eax,eax
 102c7ef:	mov    QWORD PTR [rbp-0x45],rax
 102c7f3:	mov    DWORD PTR [rbp-0x4d],0x3
 102c7fa:	mov    DWORD PTR [rbp-0x3d],ecx
 102c7fd:	mov    DWORD PTR [rbp-0x39],0x1d4c0
 102c804:	lea    rdx,[rbp-0x51]
 102c808:	mov    rcx,QWORD PTR [rip+0x37119]        # 0x1063928
 102c80f:	call   QWORD PTR [rip+0xfffffffffffd488b]        # 0x10010a0
 102c815:	test   eax,eax
 102c817:	jne    0x102c825
 102c819:	lea    rcx,[rip+0xfffffffffffd9928]        # 0x1006148
 102c820:	call   0x102db20
 102c825:	test   ebx,ebx
 102c827:	je     0x102c835
 102c829:	cmp    ebx,0xc0
 102c82f:	jne    0x102c750
 102c835:	cmp    ebx,0xc0
 102c83b:	jne    0x102c85b
 102c83d:	mov    rax,QWORD PTR [rdi]
 102c840:	mov    BYTE PTR [rsp+0x28],0x1
 102c845:	mov    BYTE PTR [rsp+0x20],0x1
 102c84a:	xor    r9d,r9d
 102c84d:	xor    r8d,r8d
 102c850:	mov    edx,0x8000c425
 102c855:	mov    rcx,rdi
 102c858:	call   QWORD PTR [rax]
 102c85a:	nop
 102c85b:	lea    rcx,[rbp-0x79]
 102c85f:	call   QWORD PTR [rip+0xfffffffffffd5243]        # 0x1001aa8
 102c865:	xor    r14d,r14d
 102c868:	cmp    DWORD PTR [rdi+0xd8],0x2
 102c86f:	jne    0x102c8c8
 102c871:	mov    eax,0x1
 102c876:	lock xadd DWORD PTR [rip+0x371b2],eax        # 0x1063a30
 102c87e:	inc    eax
 102c880:	mov    DWORD PTR [rbp-0x9],0x7
 102c887:	mov    DWORD PTR [rbp-0x11],0x10
 102c88e:	mov    QWORD PTR [rbp-0x5],0x0
 102c896:	mov    DWORD PTR [rbp-0xd],0x3
 102c89d:	mov    DWORD PTR [rbp+0x3],eax
 102c8a0:	mov    DWORD PTR [rbp+0x7],0x1d4c0
 102c8a7:	lea    rdx,[rbp-0x11]
 102c8ab:	mov    rcx,QWORD PTR [rip+0x37076]        # 0x1063928
 102c8b2:	call   QWORD PTR [rip+0xfffffffffffd47e8]        # 0x10010a0
 102c8b8:	test   eax,eax
 102c8ba:	jne    0x102c8c8
 102c8bc:	lea    rcx,[rip+0xfffffffffffd9885]        # 0x1006148
 102c8c3:	call   0x102db20
 102c8c8:	lea    rdx,[rdi+0x158]
 102c8cf:	mov    r8b,0x1
 102c8d2:	mov    rcx,QWORD PTR [rdi+0x10]
 102c8d6:	call   0x10345a0
 102c8db:	jmp    0x102cb55
 102c8e0:	mov    rcx,QWORD PTR [rdi+0x10]
 102c8e4:	call   0x1034510
 102c8e9:	jmp    0x102cb48
 102c8ee:	mov    rcx,QWORD PTR [rcx+0x8]
 102c8f2:	call   QWORD PTR [rip+0xfffffffffffd49f8]        # 0x10012f0
 102c8f8:	mov    rcx,QWORD PTR [rdi+0x10]
 102c8fc:	cmp    DWORD PTR [rsp+0x40],0x103
 102c904:	jne    0x102cb4c
 102c90a:	cmp    BYTE PTR [rcx+0x18],0x0
 102c90e:	jne    0x102cb3c
 102c914:	mov    BYTE PTR [rip+0x37121],0x1        # 0x1063a3c
 102c91b:	cmp    ebx,0xc0
 102c921:	je     0x102cad8
 102c927:	mov    eax,DWORD PTR [rip+0x36ff7]        # 0x1063924
 102c92d:	cmp    eax,0x2
 102c930:	jge    0x102cad8
 102c936:	mov    DWORD PTR [rsp+0x44],r14d
 102c93b:	mov    rcx,QWORD PTR [rdi+0x10]
 102c93f:	lea    rdx,[rsp+0x44]
 102c944:	mov    rcx,QWORD PTR [rcx+0x8]
 102c948:	call   QWORD PTR [rip+0xfffffffffffd49a2]        # 0x10012f0
 102c94e:	cmp    DWORD PTR [rsp+0x44],0x103
 102c956:	jne    0x102cad8
 102c95c:	lea    rcx,[rbp-0x71]
 102c960:	call   QWORD PTR [rip+0xfffffffffffd515a]        # 0x1001ac0
 102c966:	nop
 102c967:	mov    edx,0x4000c411
 102c96c:	lea    rcx,[rbp-0x61]
 102c970:	call   0x10132d0
 102c975:	nop
 102c976:	mov    rbx,QWORD PTR [rdi+0x10]
 102c97a:	mov    rcx,rax
 102c97d:	call   QWORD PTR [rip+0xfffffffffffd5165]        # 0x1001ae8
 102c983:	mov    rdx,rax
 102c986:	mov    r9,QWORD PTR [rbx+0x28]
 102c98a:	mov    r8,QWORD PTR [rbx+0x20]
 102c98e:	lea    rcx,[rbp-0x71]
 102c992:	call   QWORD PTR [rip+0xfffffffffffd50a8]        # 0x1001a40
 102c998:	nop
 102c999:	lea    rcx,[rbp-0x61]
 102c99d:	call   QWORD PTR [rip+0xfffffffffffd5105]        # 0x1001aa8
 102c9a3:	lea    rcx,[rbp-0x71]
 102c9a7:	call   QWORD PTR [rip+0xfffffffffffd513b]        # 0x1001ae8
 102c9ad:	mov    rsi,rax
 102c9b0:	cmp    DWORD PTR [rdi+0xd8],0x2
 102c9b7:	sete   r15b
 102c9bb:	mov    rcx,QWORD PTR [rdi+0x10]
 102c9bf:	mov    r12,QWORD PTR [rcx+0x8]
 102c9c3:	lea    rcx,[rip+0x36a86]        # 0x1063450
 102c9ca:	call   QWORD PTR [rip+0xfffffffffffd4a78]        # 0x1001448
 102c9d0:	mov    eax,0x88888889
 102c9d5:	mul    r14d
 102c9d8:	shr    edx,0x4
 102c9db:	imul   edx,edx,0x1e
 102c9de:	mov    eax,r14d
 102c9e1:	inc    r14d
 102c9e4:	cmp    eax,edx
 102c9e6:	jne    0x102ca25
 102c9e8:	or     rax,0xffffffffffffffff
 102c9ec:	nop    DWORD PTR [rax+0x0]
 102c9f0:	inc    rax
 102c9f3:	cmp    WORD PTR [rsi+rax*2],0x0
 102c9f8:	jne    0x102c9f0
 102c9fa:	test   rax,rax
 102c9fd:	je     0x102ca25
 102c9ff:	mov    rax,QWORD PTR [rdi]
 102ca02:	mov    BYTE PTR [rsp+0x30],0x1
 102ca07:	mov    BYTE PTR [rsp+0x28],0x1
 102ca0c:	mov    DWORD PTR [rsp+0x20],0x0
 102ca14:	xor    r9d,r9d
 102ca17:	mov    r8,rsi
 102ca1a:	mov    edx,0x4000c484
 102ca1f:	mov    rcx,rdi
 102ca22:	call   QWORD PTR [rax+0x8]
 102ca25:	mov    edx,0x3e8
 102ca2a:	mov    r8d,0x1
 102ca30:	mov    rcx,r12
 102ca33:	call   QWORD PTR [rip+0xfffffffffffd4957]        # 0x1001390
 102ca39:	mov    ebx,eax
 102ca3b:	test   r15b,r15b
 102ca3e:	je     0x102ca95
 102ca40:	mov    eax,0x1
 102ca45:	lock xadd DWORD PTR [rip+0x36fe3],eax        # 0x1063a30
 102ca4d:	inc    eax
 102ca4f:	mov    DWORD PTR [rbp-0x29],0x7
 102ca56:	mov    DWORD PTR [rbp-0x31],0x10
 102ca5d:	xor    ecx,ecx
 102ca5f:	mov    QWORD PTR [rbp-0x25],rcx
 102ca63:	mov    DWORD PTR [rbp-0x2d],0x3
 102ca6a:	mov    DWORD PTR [rbp-0x1d],eax
 102ca6d:	mov    DWORD PTR [rbp-0x19],0x1d4c0
 102ca74:	lea    rdx,[rbp-0x31]
 102ca78:	mov    rcx,QWORD PTR [rip+0x36ea9]        # 0x1063928
 102ca7f:	call   QWORD PTR [rip+0xfffffffffffd461b]        # 0x10010a0
 102ca85:	test   eax,eax
 102ca87:	jne    0x102ca95
 102ca89:	lea    rcx,[rip+0xfffffffffffd96b8]        # 0x1006148
 102ca90:	call   0x102db20
 102ca95:	test   ebx,ebx
 102ca97:	je     0x102caa5
 102ca99:	cmp    ebx,0xc0
 102ca9f:	jne    0x102c9c3
 102caa5:	cmp    ebx,0xc0
 102caab:	jne    0x102cacb
 102caad:	mov    rax,QWORD PTR [rdi]
 102cab0:	mov    BYTE PTR [rsp+0x28],0x1
 102cab5:	mov    BYTE PTR [rsp+0x20],0x1
 102caba:	xor    r9d,r9d
 102cabd:	xor    r8d,r8d
 102cac0:	mov    edx,0x8000c425
 102cac5:	mov    rcx,rdi
 102cac8:	call   QWORD PTR [rax]
 102caca:	nop
 102cacb:	lea    rcx,[rbp-0x71]
 102cacf:	call   QWORD PTR [rip+0xfffffffffffd4fd3]        # 0x1001aa8
 102cad5:	xor    r14d,r14d
 102cad8:	cmp    DWORD PTR [rdi+0xd8],0x2
 102cadf:	jne    0x102cb38
 102cae1:	mov    eax,0x1
 102cae6:	lock xadd DWORD PTR [rip+0x36f42],eax        # 0x1063a30
 102caee:	inc    eax
 102caf0:	mov    DWORD PTR [rbp+0x17],0x7
 102caf7:	mov    DWORD PTR [rbp+0xf],0x10
 102cafe:	mov    QWORD PTR [rbp+0x1b],0x0
 102cb06:	mov    DWORD PTR [rbp+0x13],0x3
 102cb0d:	mov    DWORD PTR [rbp+0x23],eax
 102cb10:	mov    DWORD PTR [rbp+0x27],0x1d4c0
 102cb17:	lea    rdx,[rbp+0xf]
 102cb1b:	mov    rcx,QWORD PTR [rip+0x36e06]        # 0x1063928
 102cb22:	call   QWORD PTR [rip+0xfffffffffffd4578]        # 0x10010a0
 102cb28:	test   eax,eax
 102cb2a:	jne    0x102cb38
 102cb2c:	lea    rcx,[rip+0xfffffffffffd9615]        # 0x1006148
 102cb33:	call   0x102db20
 102cb38:	mov    rcx,QWORD PTR [rdi+0x10]
 102cb3c:	xor    edx,edx
 102cb3e:	mov    rcx,QWORD PTR [rcx+0x8]
 102cb42:	call   QWORD PTR [rip+0xfffffffffffd47a0]        # 0x10012e8
 102cb48:	mov    rcx,QWORD PTR [rdi+0x10]
 102cb4c:	add    rcx,0x8
 102cb50:	call   0x1034510
 102cb55:	mov    rsi,QWORD PTR [rdi+0x10]
 102cb59:	test   rsi,rsi
 102cb5c:	je     0x102cb6e
 102cb5e:	mov    rcx,rsi
 102cb61:	call   0x1030070
 102cb66:	mov    rcx,rsi
 102cb69:	call   0x103f95a
 102cb6e:	mov    QWORD PTR [rdi+0x10],r13
 102cb72:	cmp    r13,0x0
 102cb76:	mov    esi,DWORD PTR [rsp+0x48]
 102cb7a:	jne    0x102c640
 102cb80:	mov    rcx,QWORD PTR [rbp+0x2f]
 102cb84:	xor    rcx,rsp
 102cb87:	call   0x103ff40
 102cb8c:	lea    r11,[rsp+0x100]
 102cb94:	mov    rbx,QWORD PTR [r11+0x38]
 102cb98:	mov    rsi,QWORD PTR [r11+0x40]
 102cb9c:	mov    rdi,QWORD PTR [r11+0x48]
 102cba0:	mov    rsp,r11
 102cba3:	pop    r15
 102cba5:	pop    r14
 102cba7:	pop    r13
 102cba9:	pop    r12
 102cbab:	pop    rbp
 102cbac:	ret    
 102cbad:	int3   
 102cbae:	int3   
 102cbaf:	int3   
 102cbb0:	int3   
 102cbb1:	int3   
 102cbb2:	int3   
 102cbb3:	int3   
 102cbb4:	int3   
 102cbb5:	int3   
 102cbb6:	int3   
 102cbb7:	int3   
 102cbb8:	int3   
 102cbb9:	int3   
 102cbba:	int3   
 102cbbb:	int3   
 102cbbc:	int3   
 102cbbd:	int3   
 102cbbe:	int3   
 102cbbf:	int3   
 102cbc0:	sub    rsp,0x38
 102cbc4:	test   ecx,ecx
 102cbc6:	je     0x102cbd2
 102cbc8:	mov    edx,0x4000c3a5
 102cbcd:	cmp    ecx,0x1
 102cbd0:	jne    0x102cbd7
 102cbd2:	mov    edx,0x4000c3a4
 102cbd7:	mov    rcx,QWORD PTR [rip+0x36e62]        # 0x1063a40
 102cbde:	xor    r9d,r9d
 102cbe1:	xor    r8d,r8d
 102cbe4:	mov    rax,QWORD PTR [rcx]
 102cbe7:	mov    BYTE PTR [rsp+0x28],0x1
 102cbec:	mov    BYTE PTR [rsp+0x20],0x1
 102cbf1:	call   QWORD PTR [rax]
 102cbf3:	mov    DWORD PTR [rip+0x36e3b],0x0        # 0x1063a38
 102cbfd:	lock inc DWORD PTR [rip+0x36d20]        # 0x1063924
 102cc04:	cmp    BYTE PTR [rip+0x36e31],0x0        # 0x1063a3c
 102cc0b:	je     0x102cc4c
 102cc0d:	mov    rcx,QWORD PTR [rip+0x36e2c]        # 0x1063a40
 102cc14:	mov    BYTE PTR [rip+0x36e21],0x0        # 0x1063a3c
 102cc1b:	xor    r9d,r9d
 102cc1e:	mov    rax,QWORD PTR [rcx]
 102cc21:	xor    r8d,r8d
 102cc24:	mov    edx,0x4000c416
 102cc29:	mov    BYTE PTR [rsp+0x28],0x1
 102cc2e:	mov    BYTE PTR [rsp+0x20],0x1
 102cc33:	call   QWORD PTR [rax]
 102cc35:	mov    rdx,QWORD PTR [rip+0x367f4]        # 0x1063430
 102cc3c:	lea    rcx,[rip+0xffffffffffffb73d]        # 0x1028380
 102cc43:	xor    r8d,r8d
 102cc46:	call   QWORD PTR [rip+0xfffffffffffd46c4]        # 0x1001310
 102cc4c:	mov    eax,0x1
 102cc51:	add    rsp,0x38
 102cc55:	ret    
 102cc56:	int3   
 102cc57:	int3   
 102cc58:	int3   
 102cc59:	int3   
 102cc5a:	int3   
 102cc5b:	int3   
 102cc5c:	int3   
 102cc5d:	int3   
 102cc5e:	int3   
 102cc5f:	int3   
 102cc60:	rex push rdi
 102cc62:	sub    rsp,0x50
 102cc66:	mov    QWORD PTR [rsp+0x40],0xfffffffffffffffe
 102cc6f:	mov    QWORD PTR [rsp+0x68],rbx
 102cc74:	mov    rdi,rcx
 102cc77:	lea    rcx,[rsp+0x60]
 102cc7c:	call   QWORD PTR [rip+0xfffffffffffd4e3e]        # 0x1001ac0
 102cc82:	nop
 102cc83:	mov    edx,0x4000c3a6
 102cc88:	lea    rcx,[rsp+0x78]
 102cc8d:	call   0x10132d0
 102cc92:	nop
 102cc93:	mov    rcx,rax
 102cc96:	call   QWORD PTR [rip+0xfffffffffffd4e4c]        # 0x1001ae8
 102cc9c:	mov    rdx,rax
 102cc9f:	mov    r8,QWORD PTR [rdi+0x70]
 102cca3:	lea    rcx,[rsp+0x60]
 102cca8:	call   QWORD PTR [rip+0xfffffffffffd4d92]        # 0x1001a40
 102ccae:	nop
 102ccaf:	lea    rcx,[rsp+0x78]
 102ccb4:	call   QWORD PTR [rip+0xfffffffffffd4dee]        # 0x1001aa8
 102ccba:	mov    rbx,QWORD PTR [rdi]
 102ccbd:	lea    rcx,[rsp+0x60]
 102ccc2:	call   QWORD PTR [rip+0xfffffffffffd4e20]        # 0x1001ae8
 102ccc8:	mov    r8,rax
 102cccb:	mov    BYTE PTR [rsp+0x30],0x1
 102ccd0:	mov    BYTE PTR [rsp+0x28],0x1
 102ccd5:	mov    DWORD PTR [rsp+0x20],0x0
 102ccdd:	xor    r9d,r9d
 102cce0:	mov    edx,0x4000c3a6
 102cce5:	mov    rcx,rdi
 102cce8:	call   QWORD PTR [rbx+0x8]
 102cceb:	lock inc DWORD PTR [rip+0x36d42]        # 0x1063a34
 102ccf2:	lock inc DWORD PTR [rip+0x36c2b]        # 0x1063924
 102ccf9:	lea    rcx,[rsp+0x60]
 102ccfe:	call   QWORD PTR [rip+0xfffffffffffd4da4]        # 0x1001aa8
 102cd04:	mov    rbx,QWORD PTR [rsp+0x68]
 102cd09:	add    rsp,0x50
 102cd0d:	pop    rdi
 102cd0e:	ret    
 102cd0f:	int3   
 102cd10:	int3   
 102cd11:	int3   
 102cd12:	int3   
 102cd13:	int3   
 102cd14:	int3   
 102cd15:	int3   
 102cd16:	int3   
 102cd17:	int3   
 102cd18:	int3   
 102cd19:	int3   
 102cd1a:	int3   
 102cd1b:	int3   
 102cd1c:	int3   
 102cd1d:	int3   
 102cd1e:	int3   
 102cd1f:	int3   
 102cd20:	mov    QWORD PTR [rsp+0x8],rcx
 102cd25:	push   rbx
 102cd26:	sub    rsp,0x30
 102cd2a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 102cd33:	mov    rbx,rcx
 102cd36:	add    rcx,0x8
 102cd3a:	call   QWORD PTR [rip+0xfffffffffffd4d68]        # 0x1001aa8
 102cd40:	nop
 102cd41:	mov    rcx,rbx
 102cd44:	add    rsp,0x30
 102cd48:	pop    rbx
 102cd49:	rex.W jmp QWORD PTR [rip+0xfffffffffffd4d58]        # 0x1001aa8
 102cd50:	int3   
 102cd51:	int3   
 102cd52:	int3   
 102cd53:	int3   
 102cd54:	int3   
 102cd55:	int3   
 102cd56:	int3   
 102cd57:	int3   
 102cd58:	int3   
 102cd59:	int3   
 102cd5a:	int3   
 102cd5b:	int3   
 102cd5c:	int3   
 102cd5d:	int3   
 102cd5e:	int3   
 102cd5f:	int3   
 102cd60:	sub    rsp,0x28
 102cd64:	call   0x1014de0
 102cd69:	xor    ecx,ecx
 102cd6b:	test   al,al
 102cd6d:	sete   cl
 102cd70:	test   al,al
 102cd72:	mov    eax,ecx
 102cd74:	jne    0x102cd7d
 102cd76:	lock inc DWORD PTR [rip+0x36ba7]        # 0x1063924
 102cd7d:	add    rsp,0x28
 102cd81:	ret    
 102cd82:	int3   
 102cd83:	int3   
 102cd84:	int3   
 102cd85:	int3   
 102cd86:	int3   
 102cd87:	int3   
 102cd88:	int3   
 102cd89:	int3   
 102cd8a:	int3   
 102cd8b:	int3   
 102cd8c:	int3   
 102cd8d:	int3   
 102cd8e:	int3   
 102cd8f:	int3   
 102cd90:	jmp    0x103eab0
 102cd95:	int3   
 102cd96:	int3   
 102cd97:	int3   
 102cd98:	int3   
 102cd99:	int3   
 102cd9a:	int3   
 102cd9b:	int3   
 102cd9c:	int3   
 102cd9d:	int3   
 102cd9e:	int3   
 102cd9f:	int3   
 102cda0:	sub    rsp,0x28
 102cda4:	call   0x100b4a0
 102cda9:	xor    ecx,ecx
 102cdab:	test   al,al
 102cdad:	sete   cl
 102cdb0:	mov    eax,ecx
 102cdb2:	add    rsp,0x28
 102cdb6:	ret    
 102cdb7:	int3   
 102cdb8:	int3   
 102cdb9:	int3   
 102cdba:	int3   
 102cdbb:	int3   
 102cdbc:	int3   
 102cdbd:	int3   
 102cdbe:	int3   
 102cdbf:	int3   
 102cdc0:	mov    r11,rsp
 102cdc3:	push   rbx
 102cdc4:	sub    rsp,0x70
 102cdc8:	mov    eax,DWORD PTR [rcx+0x18]
 102cdcb:	mov    rbx,rcx
 102cdce:	test   eax,eax
 102cdd0:	jne    0x102ce6e
 102cdd6:	mov    QWORD PTR [r11+0x8],rbp
 102cdda:	mov    QWORD PTR [r11+0x10],rsi
 102cdde:	mov    QWORD PTR [r11+0x18],rdi
 102cde2:	xor    ebp,ebp
 102cde4:	mov    rcx,rbx
 102cde7:	call   QWORD PTR [rip+0xfffffffffffd4cfb]        # 0x1001ae8
 102cded:	lea    rcx,[rbx+0x8]
 102cdf1:	mov    rdi,rax
 102cdf4:	call   QWORD PTR [rip+0xfffffffffffd4cee]        # 0x1001ae8
 102cdfa:	mov    BYTE PTR [rsp+0x40],bpl
 102cdff:	mov    rcx,rax
 102ce02:	mov    rax,QWORD PTR [rbx+0x10]
 102ce06:	lea    rdx,[rip+0xfffffffffffd94c3]        # 0x10062d0
 102ce0d:	mov    QWORD PTR [rsp+0x38],rax
 102ce12:	lea    rax,[rsp+0x50]
 102ce17:	mov    DWORD PTR [rsp+0x30],0x4000
 102ce1f:	mov    QWORD PTR [rsp+0x28],rax
 102ce24:	mov    r9b,0x1
 102ce27:	mov    r8,rdi
 102ce2a:	mov    DWORD PTR [rsp+0x20],ebp
 102ce2e:	call   0x1031540
 102ce33:	mov    edi,eax
 102ce35:	mov    eax,DWORD PTR [rbx+0x18]
 102ce38:	test   eax,eax
 102ce3a:	jne    0x102ce47
 102ce3c:	mov    ecx,0x7530
 102ce41:	call   QWORD PTR [rip+0xfffffffffffd4701]        # 0x1001548
 102ce47:	mov    eax,DWORD PTR [rbx+0x18]
 102ce4a:	test   eax,eax
 102ce4c:	je     0x102cde4
 102ce4e:	mov    rsi,QWORD PTR [rsp+0x88]
 102ce56:	mov    rbp,QWORD PTR [rsp+0x80]
 102ce5e:	mov    eax,edi
 102ce60:	mov    rdi,QWORD PTR [rsp+0x90]
 102ce68:	add    rsp,0x70
 102ce6c:	pop    rbx
 102ce6d:	ret    
 102ce6e:	mov    eax,0x1
 102ce73:	add    rsp,0x70
 102ce77:	pop    rbx
 102ce78:	ret    
 102ce79:	int3   
 102ce7a:	int3   
 102ce7b:	int3   
 102ce7c:	int3   
 102ce7d:	int3   
 102ce7e:	int3   
 102ce7f:	int3   
 102ce80:	mov    QWORD PTR [rsp+0x18],r8
 102ce85:	mov    QWORD PTR [rsp+0x20],r9
 102ce8a:	push   rbx
 102ce8b:	push   rsi
 102ce8c:	sub    rsp,0x28
 102ce90:	xor    ebx,ebx
 102ce92:	mov    rsi,rcx
 102ce95:	mov    eax,ebx
 102ce97:	test   rdx,rdx
 102ce9a:	je     0x102cea5
 102ce9c:	cmp    rdx,0x7fffffff
 102cea3:	jbe    0x102ceaa
 102cea5:	mov    eax,0x80070057
 102ceaa:	test   eax,eax
 102ceac:	js     0x102cef4
 102ceae:	mov    QWORD PTR [rsp+0x20],rdi
 102ceb3:	lea    rdi,[rdx-0x1]
 102ceb7:	lea    r9,[rsp+0x58]
 102cebc:	mov    rdx,rdi
 102cebf:	call   QWORD PTR [rip+0xfffffffffffd48fb]        # 0x10017c0
 102cec5:	test   eax,eax
 102cec7:	js     0x102cee4
 102cec9:	cdqe   
 102cecb:	cmp    rax,rdi
 102cece:	ja     0x102cee4
 102ced0:	jne    0x102ceed
 102ced2:	mov    WORD PTR [rsi+rdi*2],bx
 102ced6:	mov    rdi,QWORD PTR [rsp+0x20]
 102cedb:	mov    eax,ebx
 102cedd:	add    rsp,0x28
 102cee1:	pop    rsi
 102cee2:	pop    rbx
 102cee3:	ret    
 102cee4:	mov    WORD PTR [rsi+rdi*2],bx
 102cee8:	mov    ebx,0x8007007a
 102ceed:	mov    rdi,QWORD PTR [rsp+0x20]
 102cef2:	mov    eax,ebx
 102cef4:	add    rsp,0x28
 102cef8:	pop    rsi
 102cef9:	pop    rbx
 102cefa:	ret    
 102cefb:	int3   
 102cefc:	int3   
 102cefd:	int3   
 102cefe:	int3   
 102ceff:	int3   
 102cf00:	int3   
 102cf01:	int3   
 102cf02:	int3   
 102cf03:	int3   
 102cf04:	int3   
 102cf05:	int3   
 102cf06:	int3   
 102cf07:	int3   
 102cf08:	int3   
 102cf09:	int3   
 102cf0a:	int3   
 102cf0b:	int3   
 102cf0c:	int3   
 102cf0d:	int3   
 102cf0e:	int3   
 102cf0f:	int3   
 102cf10:	sub    rsp,0x248
 102cf17:	mov    rax,QWORD PTR [rip+0x36952]        # 0x1063870
 102cf1e:	xor    rax,rsp
 102cf21:	mov    QWORD PTR [rsp+0x230],rax
 102cf29:	xor    eax,eax
 102cf2b:	lea    rcx,[rsp+0x22]
 102cf30:	xor    edx,edx
 102cf32:	mov    r8d,0x208
 102cf38:	mov    WORD PTR [rsp+0x20],ax
 102cf3d:	call   0x104026c
 102cf42:	lea    rcx,[rsp+0x20]
 102cf47:	mov    edx,0x105
 102cf4c:	call   QWORD PTR [rip+0xfffffffffffd4486]        # 0x10013d8
 102cf52:	test   eax,eax
 102cf54:	je     0x102cfcb
 102cf56:	cmp    eax,0x105
 102cf5b:	jae    0x102cfcb
 102cf5d:	lea    r8,[rip+0xfffffffffffd778c]        # 0x10046f0
 102cf64:	lea    rcx,[rsp+0x20]
 102cf69:	or     r9,0xffffffffffffffff
 102cf6d:	mov    edx,0x105
 102cf72:	call   QWORD PTR [rip+0xfffffffffffd4830]        # 0x10017a8
 102cf78:	test   eax,eax
 102cf7a:	jne    0x102cfcb
 102cf7c:	lea    rcx,[rsp+0x20]
 102cf81:	mov    QWORD PTR [rsp+0x240],rbx
 102cf89:	call   QWORD PTR [rip+0xfffffffffffd4439]        # 0x10013c8
 102cf8f:	mov    rbx,rax
 102cf92:	test   rax,rax
 102cf95:	je     0x102cfc3
 102cf97:	lea    rdx,[rip+0xfffffffffffd7772]        # 0x1004710
 102cf9e:	mov    rcx,rax
 102cfa1:	call   QWORD PTR [rip+0xfffffffffffd45e1]        # 0x1001588
 102cfa7:	test   rax,rax
 102cfaa:	je     0x102cfba
 102cfac:	xor    r9d,r9d
 102cfaf:	xor    r8d,r8d
 102cfb2:	xor    ecx,ecx
 102cfb4:	lea    edx,[r9+0x1]
 102cfb8:	call   rax
 102cfba:	mov    rcx,rbx
 102cfbd:	call   QWORD PTR [rip+0xfffffffffffd42d5]        # 0x1001298
 102cfc3:	mov    rbx,QWORD PTR [rsp+0x240]
 102cfcb:	mov    rcx,QWORD PTR [rsp+0x230]
 102cfd3:	xor    rcx,rsp
 102cfd6:	call   0x103ff40
 102cfdb:	add    rsp,0x248
 102cfe2:	ret    
 102cfe3:	int3   
 102cfe4:	int3   
 102cfe5:	int3   
 102cfe6:	int3   
 102cfe7:	int3   
 102cfe8:	int3   
 102cfe9:	int3   
 102cfea:	int3   
 102cfeb:	int3   
 102cfec:	int3   
 102cfed:	int3   
 102cfee:	int3   
 102cfef:	int3   
 102cff0:	rex push rbp
 102cff2:	push   rbx
 102cff3:	push   rsi
 102cff4:	push   rdi
 102cff5:	push   r12
 102cff7:	push   r13
 102cff9:	push   r14
 102cffb:	push   r15
 102cffd:	lea    rbp,[rsp-0x9f8]
 102d005:	sub    rsp,0xaf8
 102d00c:	mov    QWORD PTR [rsp+0x70],0xfffffffffffffffe
 102d015:	mov    rax,QWORD PTR [rip+0x36854]        # 0x1063870
 102d01c:	xor    rax,rsp
 102d01f:	mov    QWORD PTR [rbp+0x9e0],rax
 102d026:	mov    rsi,r9
 102d029:	mov    r14,r8
 102d02c:	mov    rdi,rdx
 102d02f:	mov    rbx,rcx
 102d032:	mov    QWORD PTR [rsp+0x60],rcx
 102d037:	mov    r12,QWORD PTR [rbp+0xa60]
 102d03e:	mov    r13,QWORD PTR [rbp+0xa68]
 102d045:	xor    r15b,r15b
 102d048:	xor    eax,eax
 102d04a:	mov    QWORD PTR [rsp+0x40],rax
 102d04f:	mov    QWORD PTR [rsp+0x50],rax
 102d054:	mov    DWORD PTR [rsp+0x48],0x1
 102d05c:	mov    DWORD PTR [rsp+0x38],0x20a
 102d064:	xor    edx,edx
 102d066:	mov    r8d,0x20a
 102d06c:	lea    rcx,[rbp-0x40]
 102d070:	call   0x104026c
 102d075:	mov    rcx,rsi
 102d078:	call   QWORD PTR [rip+0xfffffffffffd488a]        # 0x1001908
 102d07e:	mov    BYTE PTR [r13+0x0],r15b
 102d082:	mov    DWORD PTR [r12],0x20
 102d08a:	mov    rdx,r14
 102d08d:	mov    rcx,rbx
 102d090:	call   0x10301b0
 102d095:	movzx  ebx,al
 102d098:	mov    rax,QWORD PTR [rip+0xfffffffffffd91f1]        # 0x1006290
 102d09f:	mov    QWORD PTR [rsp+0x78],rax
 102d0a4:	mov    rax,QWORD PTR [rip+0xfffffffffffd91ed]        # 0x1006298
 102d0ab:	mov    QWORD PTR [rbp-0x80],rax
 102d0af:	mov    rax,QWORD PTR [rip+0xfffffffffffd91ea]        # 0x10062a0
 102d0b6:	mov    QWORD PTR [rbp-0x78],rax
 102d0ba:	mov    rax,QWORD PTR [rip+0xfffffffffffd91e7]        # 0x10062a8
 102d0c1:	mov    QWORD PTR [rbp-0x70],rax
 102d0c5:	mov    rax,QWORD PTR [rip+0xfffffffffffd91e4]        # 0x10062b0
 102d0cc:	mov    QWORD PTR [rbp-0x68],rax
 102d0d0:	mov    rax,QWORD PTR [rip+0xfffffffffffd91e1]        # 0x10062b8
 102d0d7:	mov    QWORD PTR [rbp-0x60],rax
 102d0db:	mov    rax,QWORD PTR [rip+0xfffffffffffd91de]        # 0x10062c0
 102d0e2:	mov    QWORD PTR [rbp-0x58],rax
 102d0e6:	mov    eax,DWORD PTR [rip+0xfffffffffffd91dc]        # 0x10062c8
 102d0ec:	mov    DWORD PTR [rbp-0x50],eax
 102d0ef:	mov    QWORD PTR [rsp+0x20],rdi
 102d0f4:	lea    r9,[rsp+0x78]
 102d0f9:	mov    edx,0x401
 102d0fe:	lea    r8d,[rdx-0x1]
 102d102:	lea    rcx,[rbp+0x1d0]
 102d109:	call   QWORD PTR [rip+0xfffffffffffd4641]        # 0x1001750
 102d10f:	lea    rcx,[rsp+0x58]
 102d114:	call   QWORD PTR [rip+0xfffffffffffd49a6]        # 0x1001ac0
 102d11a:	nop
 102d11b:	mov    edx,0xc000c4af
 102d120:	lea    rcx,[rsp+0x30]
 102d125:	call   0x10132d0
 102d12a:	nop
 102d12b:	mov    rcx,rax
 102d12e:	call   QWORD PTR [rip+0xfffffffffffd49b4]        # 0x1001ae8
 102d134:	mov    rdx,rax
 102d137:	mov    r8,rdi
 102d13a:	lea    rcx,[rsp+0x58]
 102d13f:	call   QWORD PTR [rip+0xfffffffffffd48fb]        # 0x1001a40
 102d145:	nop
 102d146:	lea    rcx,[rsp+0x30]
 102d14b:	call   QWORD PTR [rip+0xfffffffffffd4957]        # 0x1001aa8
 102d151:	lea    r8,[rsp+0x40]
 102d156:	mov    rdx,0xffffffff80000002
 102d15d:	mov    rcx,QWORD PTR [rsp+0x60]
 102d162:	test   bl,bl
 102d164:	mov    rbx,QWORD PTR [r14]
 102d167:	jne    0x102d349
 102d16d:	call   QWORD PTR [rip+0xfffffffffffd3efd]        # 0x1001070
 102d173:	mov    edx,eax
 102d175:	mov    r9b,0x1
 102d178:	mov    r8d,0xc000c356
 102d17e:	mov    rcx,r14
 102d181:	call   QWORD PTR [rbx+0x20]
 102d184:	test   al,al
 102d186:	je     0x102d72c
 102d18c:	lea    rax,[rsp+0x30]
 102d191:	mov    QWORD PTR [rsp+0x60],rax
 102d196:	lea    rdx,[rsp+0x58]
 102d19b:	lea    rcx,[rsp+0x30]
 102d1a0:	call   QWORD PTR [rip+0xfffffffffffd4812]        # 0x10019b8
 102d1a6:	mov    rdi,rax
 102d1a9:	mov    rbx,QWORD PTR [r14]
 102d1ac:	lea    rax,[rsp+0x50]
 102d1b1:	mov    QWORD PTR [rsp+0x20],rax
 102d1b6:	mov    r9d,0x20019
 102d1bc:	xor    r8d,r8d
 102d1bf:	lea    rdx,[rbp+0x1d0]
 102d1c6:	mov    rcx,QWORD PTR [rsp+0x40]
 102d1cb:	call   QWORD PTR [rip+0xfffffffffffd3eaf]        # 0x1001080
 102d1d1:	mov    edx,eax
 102d1d3:	mov    r9b,0x1
 102d1d6:	mov    r8,rdi
 102d1d9:	mov    rcx,r14
 102d1dc:	call   QWORD PTR [rbx+0x28]
 102d1df:	test   al,al
 102d1e1:	je     0x102d72c
 102d1e7:	lea    rax,[rsp+0x38]
 102d1ec:	mov    QWORD PTR [rsp+0x28],rax
 102d1f1:	lea    rax,[rbp-0x40]
 102d1f5:	mov    QWORD PTR [rsp+0x20],rax
 102d1fa:	lea    r9,[rsp+0x48]
 102d1ff:	xor    r8d,r8d
 102d202:	lea    rdx,[rip+0xfffffffffffd8cff]        # 0x1005f08
 102d209:	mov    rcx,QWORD PTR [rsp+0x50]
 102d20e:	call   QWORD PTR [rip+0xfffffffffffd3e74]        # 0x1001088
 102d214:	test   eax,eax
 102d216:	jne    0x102d72c
 102d21c:	lea    rdx,[rbp-0x40]
 102d220:	mov    rcx,rsi
 102d223:	call   QWORD PTR [rip+0xfffffffffffd486f]        # 0x1001a98
 102d229:	mov    edx,0x2e
 102d22e:	xor    r8d,r8d
 102d231:	mov    rcx,rsi
 102d234:	call   QWORD PTR [rip+0xfffffffffffd471e]        # 0x1001958
 102d23a:	mov    edx,0x2e
 102d23f:	lea    r8d,[rax+0x1]
 102d243:	mov    rcx,rsi
 102d246:	call   QWORD PTR [rip+0xfffffffffffd470c]        # 0x1001958
 102d24c:	mov    r8d,eax
 102d24f:	lea    rdx,[rsp+0x30]
 102d254:	mov    rcx,rsi
 102d257:	call   QWORD PTR [rip+0xfffffffffffd47eb]        # 0x1001a48
 102d25d:	nop
 102d25e:	mov    rdx,rax
 102d261:	mov    rcx,rsi
 102d264:	call   QWORD PTR [rip+0xfffffffffffd4836]        # 0x1001aa0
 102d26a:	nop
 102d26b:	lea    rcx,[rsp+0x30]
 102d270:	call   QWORD PTR [rip+0xfffffffffffd4832]        # 0x1001aa8
 102d276:	mov    edx,0x2e
 102d27b:	xor    r8d,r8d
 102d27e:	mov    rcx,rsi
 102d281:	call   QWORD PTR [rip+0xfffffffffffd46d1]        # 0x1001958
 102d287:	mov    r8d,eax
 102d28a:	lea    rdx,[rsp+0x30]
 102d28f:	mov    rcx,rsi
 102d292:	call   QWORD PTR [rip+0xfffffffffffd47b0]        # 0x1001a48
 102d298:	nop
 102d299:	mov    rcx,rax
 102d29c:	call   QWORD PTR [rip+0xfffffffffffd4846]        # 0x1001ae8
 102d2a2:	mov    rcx,rax
 102d2a5:	call   QWORD PTR [rip+0xfffffffffffd4495]        # 0x1001740
 102d2ab:	nop
 102d2ac:	lea    rcx,[rsp+0x30]
 102d2b1:	call   QWORD PTR [rip+0xfffffffffffd47f1]        # 0x1001aa8
 102d2b7:	mov    edx,0x2e
 102d2bc:	xor    r8d,r8d
 102d2bf:	mov    rcx,rsi
 102d2c2:	call   QWORD PTR [rip+0xfffffffffffd4690]        # 0x1001958
 102d2c8:	lea    r8d,[rax+0x1]
 102d2cc:	lea    rdx,[rsp+0x30]
 102d2d1:	mov    rcx,rsi
 102d2d4:	call   QWORD PTR [rip+0xfffffffffffd4646]        # 0x1001920
 102d2da:	nop
 102d2db:	mov    rcx,rax
 102d2de:	call   QWORD PTR [rip+0xfffffffffffd4804]        # 0x1001ae8
 102d2e4:	mov    rcx,rax
 102d2e7:	call   QWORD PTR [rip+0xfffffffffffd4453]        # 0x1001740
 102d2ed:	mov    ebx,eax
 102d2ef:	lea    rcx,[rsp+0x30]
 102d2f4:	call   QWORD PTR [rip+0xfffffffffffd47ae]        # 0x1001aa8
 102d2fa:	test   ebx,ebx
 102d2fc:	jne    0x102d337
 102d2fe:	lea    edx,[rbx+0x2e]
 102d301:	xor    r8d,r8d
 102d304:	mov    rcx,rsi
 102d307:	call   QWORD PTR [rip+0xfffffffffffd464b]        # 0x1001958
 102d30d:	mov    r8d,eax
 102d310:	lea    rdx,[rsp+0x30]
 102d315:	mov    rcx,rsi
 102d318:	call   QWORD PTR [rip+0xfffffffffffd472a]        # 0x1001a48
 102d31e:	nop
 102d31f:	mov    rdx,rax
 102d322:	mov    rcx,rsi
 102d325:	call   QWORD PTR [rip+0xfffffffffffd4775]        # 0x1001aa0
 102d32b:	nop
 102d32c:	lea    rcx,[rsp+0x30]
 102d331:	call   QWORD PTR [rip+0xfffffffffffd4771]        # 0x1001aa8
 102d337:	mov    BYTE PTR [r13+0x0],0x0
 102d33c:	mov    DWORD PTR [r12],0x20
 102d344:	jmp    0x102d729
 102d349:	call   QWORD PTR [rip+0xfffffffffffd3d21]        # 0x1001070
 102d34f:	mov    edx,eax
 102d351:	mov    r9b,0x1
 102d354:	mov    r8d,0xc000c356
 102d35a:	mov    rcx,r14
 102d35d:	call   QWORD PTR [rbx+0x20]
 102d360:	test   al,al
 102d362:	je     0x102d525
 102d368:	lea    rax,[rsp+0x30]
 102d36d:	mov    QWORD PTR [rsp+0x68],rax
 102d372:	lea    rdx,[rsp+0x58]
 102d377:	lea    rcx,[rsp+0x30]
 102d37c:	call   QWORD PTR [rip+0xfffffffffffd4636]        # 0x10019b8
 102d382:	mov    rdi,rax
 102d385:	mov    rbx,QWORD PTR [r14]
 102d388:	lea    rax,[rsp+0x50]
 102d38d:	mov    QWORD PTR [rsp+0x20],rax
 102d392:	mov    r9d,0x20219
 102d398:	xor    r8d,r8d
 102d39b:	lea    rdx,[rbp+0x1d0]
 102d3a2:	mov    rcx,QWORD PTR [rsp+0x40]
 102d3a7:	call   QWORD PTR [rip+0xfffffffffffd3cd3]        # 0x1001080
 102d3ad:	mov    edx,eax
 102d3af:	mov    r9b,0x1
 102d3b2:	mov    r8,rdi
 102d3b5:	mov    rcx,r14
 102d3b8:	call   QWORD PTR [rbx+0x28]
 102d3bb:	test   al,al
 102d3bd:	je     0x102d525
 102d3c3:	lea    rax,[rsp+0x38]
 102d3c8:	mov    QWORD PTR [rsp+0x28],rax
 102d3cd:	lea    rax,[rbp-0x40]
 102d3d1:	mov    QWORD PTR [rsp+0x20],rax
 102d3d6:	lea    r9,[rsp+0x48]
 102d3db:	xor    r8d,r8d
 102d3de:	lea    rdx,[rip+0xfffffffffffd8b23]        # 0x1005f08
 102d3e5:	mov    rcx,QWORD PTR [rsp+0x50]
 102d3ea:	call   QWORD PTR [rip+0xfffffffffffd3c98]        # 0x1001088
 102d3f0:	test   eax,eax
 102d3f2:	jne    0x102d525
 102d3f8:	lea    rdx,[rbp-0x40]
 102d3fc:	mov    rcx,rsi
 102d3ff:	call   QWORD PTR [rip+0xfffffffffffd4693]        # 0x1001a98
 102d405:	mov    edx,0x2e
 102d40a:	xor    r8d,r8d
 102d40d:	mov    rcx,rsi
 102d410:	call   QWORD PTR [rip+0xfffffffffffd4542]        # 0x1001958
 102d416:	mov    edx,0x2e
 102d41b:	lea    r8d,[rax+0x1]
 102d41f:	mov    rcx,rsi
 102d422:	call   QWORD PTR [rip+0xfffffffffffd4530]        # 0x1001958
 102d428:	mov    r8d,eax
 102d42b:	lea    rdx,[rsp+0x30]
 102d430:	mov    rcx,rsi
 102d433:	call   QWORD PTR [rip+0xfffffffffffd460f]        # 0x1001a48
 102d439:	nop
 102d43a:	mov    rdx,rax
 102d43d:	mov    rcx,rsi
 102d440:	call   QWORD PTR [rip+0xfffffffffffd465a]        # 0x1001aa0
 102d446:	nop
 102d447:	lea    rcx,[rsp+0x30]
 102d44c:	call   QWORD PTR [rip+0xfffffffffffd4656]        # 0x1001aa8
 102d452:	mov    edx,0x2e
 102d457:	xor    r8d,r8d
 102d45a:	mov    rcx,rsi
 102d45d:	call   QWORD PTR [rip+0xfffffffffffd44f5]        # 0x1001958
 102d463:	mov    r8d,eax
 102d466:	lea    rdx,[rsp+0x30]
 102d46b:	mov    rcx,rsi
 102d46e:	call   QWORD PTR [rip+0xfffffffffffd45d4]        # 0x1001a48
 102d474:	nop
 102d475:	mov    rcx,rax
 102d478:	call   QWORD PTR [rip+0xfffffffffffd466a]        # 0x1001ae8
 102d47e:	mov    rcx,rax
 102d481:	call   QWORD PTR [rip+0xfffffffffffd42b9]        # 0x1001740
 102d487:	nop
 102d488:	lea    rcx,[rsp+0x30]
 102d48d:	call   QWORD PTR [rip+0xfffffffffffd4615]        # 0x1001aa8
 102d493:	mov    edx,0x2e
 102d498:	xor    r8d,r8d
 102d49b:	mov    rcx,rsi
 102d49e:	call   QWORD PTR [rip+0xfffffffffffd44b4]        # 0x1001958
 102d4a4:	lea    r8d,[rax+0x1]
 102d4a8:	lea    rdx,[rsp+0x30]
 102d4ad:	mov    rcx,rsi
 102d4b0:	call   QWORD PTR [rip+0xfffffffffffd446a]        # 0x1001920
 102d4b6:	nop
 102d4b7:	mov    rcx,rax
 102d4ba:	call   QWORD PTR [rip+0xfffffffffffd4628]        # 0x1001ae8
 102d4c0:	mov    rcx,rax
 102d4c3:	call   QWORD PTR [rip+0xfffffffffffd4277]        # 0x1001740
 102d4c9:	mov    ebx,eax
 102d4cb:	lea    rcx,[rsp+0x30]
 102d4d0:	call   QWORD PTR [rip+0xfffffffffffd45d2]        # 0x1001aa8
 102d4d6:	test   ebx,ebx
 102d4d8:	jne    0x102d513
 102d4da:	lea    edx,[rbx+0x2e]
 102d4dd:	xor    r8d,r8d
 102d4e0:	mov    rcx,rsi
 102d4e3:	call   QWORD PTR [rip+0xfffffffffffd446f]        # 0x1001958
 102d4e9:	mov    r8d,eax
 102d4ec:	lea    rdx,[rsp+0x30]
 102d4f1:	mov    rcx,rsi
 102d4f4:	call   QWORD PTR [rip+0xfffffffffffd454e]        # 0x1001a48
 102d4fa:	nop
 102d4fb:	mov    rdx,rax
 102d4fe:	mov    rcx,rsi
 102d501:	call   QWORD PTR [rip+0xfffffffffffd4599]        # 0x1001aa0
 102d507:	nop
 102d508:	lea    rcx,[rsp+0x30]
 102d50d:	call   QWORD PTR [rip+0xfffffffffffd4595]        # 0x1001aa8
 102d513:	mov    BYTE PTR [r13+0x0],0x1
 102d518:	mov    DWORD PTR [r12],0x20
 102d520:	jmp    0x102d729
 102d525:	xor    edx,edx
 102d527:	mov    r8d,0x20a
 102d52d:	lea    rcx,[rbp-0x40]
 102d531:	call   0x104026c
 102d536:	mov    DWORD PTR [rsp+0x38],0x20a
 102d53e:	mov    rbx,QWORD PTR [r14]
 102d541:	lea    r8,[rsp+0x40]
 102d546:	mov    rdx,0xffffffff80000002
 102d54d:	mov    rcx,QWORD PTR [rsp+0x60]
 102d552:	call   QWORD PTR [rip+0xfffffffffffd3b18]        # 0x1001070
 102d558:	mov    edx,eax
 102d55a:	mov    r9b,0x1
 102d55d:	mov    r8d,0xc000c356
 102d563:	mov    rcx,r14
 102d566:	call   QWORD PTR [rbx+0x20]
 102d569:	test   al,al
 102d56b:	je     0x102d72c
 102d571:	lea    rax,[rsp+0x30]
 102d576:	mov    QWORD PTR [rsp+0x68],rax
 102d57b:	lea    rdx,[rsp+0x58]
 102d580:	lea    rcx,[rsp+0x30]
 102d585:	call   QWORD PTR [rip+0xfffffffffffd442d]        # 0x10019b8
 102d58b:	mov    rdi,rax
 102d58e:	mov    rbx,QWORD PTR [r14]
 102d591:	lea    rax,[rsp+0x50]
 102d596:	mov    QWORD PTR [rsp+0x20],rax
 102d59b:	mov    r9d,0x20119
 102d5a1:	xor    r8d,r8d
 102d5a4:	lea    rdx,[rbp+0x1d0]
 102d5ab:	mov    rcx,QWORD PTR [rsp+0x40]
 102d5b0:	call   QWORD PTR [rip+0xfffffffffffd3aca]        # 0x1001080
 102d5b6:	mov    edx,eax
 102d5b8:	mov    r9b,0x1
 102d5bb:	mov    r8,rdi
 102d5be:	mov    rcx,r14
 102d5c1:	call   QWORD PTR [rbx+0x28]
 102d5c4:	test   al,al
 102d5c6:	je     0x102d72c
 102d5cc:	lea    rax,[rsp+0x38]
 102d5d1:	mov    QWORD PTR [rsp+0x28],rax
 102d5d6:	lea    rax,[rbp-0x40]
 102d5da:	mov    QWORD PTR [rsp+0x20],rax
 102d5df:	lea    r9,[rsp+0x48]
 102d5e4:	xor    r8d,r8d
 102d5e7:	lea    rdx,[rip+0xfffffffffffd891a]        # 0x1005f08
 102d5ee:	mov    rcx,QWORD PTR [rsp+0x50]
 102d5f3:	call   QWORD PTR [rip+0xfffffffffffd3a8f]        # 0x1001088
 102d5f9:	test   eax,eax
 102d5fb:	jne    0x102d72c
 102d601:	lea    rdx,[rbp-0x40]
 102d605:	mov    rcx,rsi
 102d608:	call   QWORD PTR [rip+0xfffffffffffd448a]        # 0x1001a98
 102d60e:	mov    edx,0x2e
 102d613:	xor    r8d,r8d
 102d616:	mov    rcx,rsi
 102d619:	call   QWORD PTR [rip+0xfffffffffffd4339]        # 0x1001958
 102d61f:	mov    edx,0x2e
 102d624:	lea    r8d,[rax+0x1]
 102d628:	mov    rcx,rsi
 102d62b:	call   QWORD PTR [rip+0xfffffffffffd4327]        # 0x1001958
 102d631:	mov    r8d,eax
 102d634:	lea    rdx,[rsp+0x30]
 102d639:	mov    rcx,rsi
 102d63c:	call   QWORD PTR [rip+0xfffffffffffd4406]        # 0x1001a48
 102d642:	nop
 102d643:	mov    rdx,rax
 102d646:	mov    rcx,rsi
 102d649:	call   QWORD PTR [rip+0xfffffffffffd4451]        # 0x1001aa0
 102d64f:	nop
 102d650:	lea    rcx,[rsp+0x30]
 102d655:	call   QWORD PTR [rip+0xfffffffffffd444d]        # 0x1001aa8
 102d65b:	mov    edx,0x2e
 102d660:	xor    r8d,r8d
 102d663:	mov    rcx,rsi
 102d666:	call   QWORD PTR [rip+0xfffffffffffd42ec]        # 0x1001958
 102d66c:	mov    r8d,eax
 102d66f:	lea    rdx,[rsp+0x30]
 102d674:	mov    rcx,rsi
 102d677:	call   QWORD PTR [rip+0xfffffffffffd43cb]        # 0x1001a48
 102d67d:	nop
 102d67e:	mov    rcx,rax
 102d681:	call   QWORD PTR [rip+0xfffffffffffd4461]        # 0x1001ae8
 102d687:	mov    rcx,rax
 102d68a:	call   QWORD PTR [rip+0xfffffffffffd40b0]        # 0x1001740
 102d690:	nop
 102d691:	lea    rcx,[rsp+0x30]
 102d696:	call   QWORD PTR [rip+0xfffffffffffd440c]        # 0x1001aa8
 102d69c:	mov    edx,0x2e
 102d6a1:	xor    r8d,r8d
 102d6a4:	mov    rcx,rsi
 102d6a7:	call   QWORD PTR [rip+0xfffffffffffd42ab]        # 0x1001958
 102d6ad:	lea    r8d,[rax+0x1]
 102d6b1:	lea    rdx,[rsp+0x30]
 102d6b6:	mov    rcx,rsi
 102d6b9:	call   QWORD PTR [rip+0xfffffffffffd4261]        # 0x1001920
 102d6bf:	nop
 102d6c0:	mov    rcx,rax
 102d6c3:	call   QWORD PTR [rip+0xfffffffffffd441f]        # 0x1001ae8
 102d6c9:	mov    rcx,rax
 102d6cc:	call   QWORD PTR [rip+0xfffffffffffd406e]        # 0x1001740
 102d6d2:	mov    ebx,eax
 102d6d4:	lea    rcx,[rsp+0x30]
 102d6d9:	call   QWORD PTR [rip+0xfffffffffffd43c9]        # 0x1001aa8
 102d6df:	test   ebx,ebx
 102d6e1:	jne    0x102d71c
 102d6e3:	lea    edx,[rbx+0x2e]
 102d6e6:	xor    r8d,r8d
 102d6e9:	mov    rcx,rsi
 102d6ec:	call   QWORD PTR [rip+0xfffffffffffd4266]        # 0x1001958
 102d6f2:	mov    r8d,eax
 102d6f5:	lea    rdx,[rsp+0x30]
 102d6fa:	mov    rcx,rsi
 102d6fd:	call   QWORD PTR [rip+0xfffffffffffd4345]        # 0x1001a48
 102d703:	nop
 102d704:	mov    rdx,rax
 102d707:	mov    rcx,rsi
 102d70a:	call   QWORD PTR [rip+0xfffffffffffd4390]        # 0x1001aa0
 102d710:	nop
 102d711:	lea    rcx,[rsp+0x30]
 102d716:	call   QWORD PTR [rip+0xfffffffffffd438c]        # 0x1001aa8
 102d71c:	mov    BYTE PTR [r13+0x0],0x0
 102d721:	mov    DWORD PTR [r12],0x40
 102d729:	mov    r15b,0x1
 102d72c:	lea    rcx,[rsp+0x40]
 102d731:	call   0x1034560
 102d736:	lea    rcx,[rsp+0x50]
 102d73b:	call   0x1034560
 102d740:	nop
 102d741:	lea    rcx,[rsp+0x58]
 102d746:	call   QWORD PTR [rip+0xfffffffffffd435c]        # 0x1001aa8
 102d74c:	movzx  eax,r15b
 102d750:	mov    rcx,QWORD PTR [rbp+0x9e0]
 102d757:	xor    rcx,rsp
 102d75a:	call   0x103ff40
 102d75f:	add    rsp,0xaf8
 102d766:	pop    r15
 102d768:	pop    r14
 102d76a:	pop    r13
 102d76c:	pop    r12
 102d76e:	pop    rdi
 102d76f:	pop    rsi
 102d770:	pop    rbx
 102d771:	pop    rbp
 102d772:	ret    
 102d773:	int3   
 102d774:	int3   
 102d775:	int3   
 102d776:	int3   
 102d777:	int3   
 102d778:	int3   
 102d779:	int3   
 102d77a:	int3   
 102d77b:	int3   
 102d77c:	int3   
 102d77d:	int3   
 102d77e:	int3   
 102d77f:	int3   
 102d780:	mov    QWORD PTR [rsp+0x20],rsi
 102d785:	push   rdi
 102d786:	sub    rsp,0x20
 102d78a:	mov    rsi,rdx
 102d78d:	mov    rdi,rcx
 102d790:	test   rdx,rdx
 102d793:	jns    0x102d79b
 102d795:	call   0x103f972
 102d79a:	int3   
 102d79b:	test   r8,r8
 102d79e:	js     0x102d7a4
 102d7a0:	mov    QWORD PTR [rcx+0x20],r8
 102d7a4:	mov    QWORD PTR [rsp+0x30],rbx
 102d7a9:	test   rdx,rdx
 102d7ac:	jne    0x102d7f0
 102d7ae:	mov    rcx,QWORD PTR [rcx+0x8]
 102d7b2:	xor    ebx,ebx
 102d7b4:	test   rcx,rcx
 102d7b7:	je     0x102d7d8
 102d7b9:	mov    edx,ebx
 102d7bb:	cmp    QWORD PTR [rdi+0x10],rdx
 102d7bf:	jle    0x102d7cf
 102d7c1:	mov    r8,QWORD PTR [rdi+0x10]
 102d7c5:	inc    edx
 102d7c7:	movsxd rax,edx
 102d7ca:	cmp    rax,r8
 102d7cd:	jl     0x102d7c5
 102d7cf:	call   0x103f9c6
 102d7d4:	mov    QWORD PTR [rdi+0x8],rbx
 102d7d8:	mov    QWORD PTR [rdi+0x18],rbx
 102d7dc:	mov    QWORD PTR [rdi+0x10],rbx
 102d7e0:	mov    rbx,QWORD PTR [rsp+0x30]
 102d7e5:	mov    rsi,QWORD PTR [rsp+0x48]
 102d7ea:	add    rsp,0x20
 102d7ee:	pop    rdi
 102d7ef:	ret    
 102d7f0:	mov    rdx,QWORD PTR [rcx+0x8]
 102d7f4:	mov    QWORD PTR [rsp+0x38],rbp
 102d7f9:	test   rdx,rdx
 102d7fc:	jne    0x102d844
 102d7fe:	mov    rbp,QWORD PTR [rcx+0x20]
 102d802:	cmp    rsi,rbp
 102d805:	cmovg  rbp,rsi
 102d809:	lea    rbx,[rbp*8+0x0]
 102d811:	mov    rcx,rbx
 102d814:	call   0x103f9ba
 102d819:	mov    r8,rbx
 102d81c:	xor    edx,edx
 102d81e:	mov    rcx,rax
 102d821:	mov    QWORD PTR [rdi+0x8],rax
 102d825:	call   0x104026c
 102d82a:	xor    ebx,ebx
 102d82c:	test   rsi,rsi
 102d82f:	jle    0x102d982
 102d835:	inc    ebx
 102d837:	movsxd rax,ebx
 102d83a:	cmp    rax,rsi
 102d83d:	jl     0x102d835
 102d83f:	jmp    0x102d982
 102d844:	mov    rcx,QWORD PTR [rcx+0x18]
 102d848:	cmp    rsi,rcx
 102d84b:	jg     0x102d8bf
 102d84d:	mov    rax,QWORD PTR [rdi+0x10]
 102d851:	cmp    rax,rsi
 102d854:	jge    0x102d893
 102d856:	lea    rcx,[rdx+rax*8]
 102d85a:	mov    r8,rsi
 102d85d:	xor    edx,edx
 102d85f:	sub    r8,rax
 102d862:	shl    r8,0x3
 102d866:	call   0x104026c
 102d86b:	mov    rax,rsi
 102d86e:	xor    ebx,ebx
 102d870:	sub    rax,QWORD PTR [rdi+0x10]
 102d874:	test   rax,rax
 102d877:	jle    0x102d986
 102d87d:	mov    rcx,rsi
 102d880:	sub    rcx,QWORD PTR [rdi+0x10]
 102d884:	inc    ebx
 102d886:	movsxd rax,ebx
 102d889:	cmp    rax,rcx
 102d88c:	jl     0x102d884
 102d88e:	jmp    0x102d986
 102d893:	jle    0x102d986
 102d899:	sub    rax,rsi
 102d89c:	xor    ebx,ebx
 102d89e:	test   rax,rax
 102d8a1:	jle    0x102d986
 102d8a7:	mov    rcx,QWORD PTR [rdi+0x10]
 102d8ab:	sub    rcx,rsi
 102d8ae:	xchg   ax,ax
 102d8b0:	inc    ebx
 102d8b2:	movsxd rax,ebx
 102d8b5:	cmp    rax,rcx
 102d8b8:	jl     0x102d8b0
 102d8ba:	jmp    0x102d986
 102d8bf:	mov    rax,QWORD PTR [rdi+0x20]
 102d8c3:	test   rax,rax
 102d8c6:	jne    0x102d8f1
 102d8c8:	mov    rax,QWORD PTR [rdi+0x10]
 102d8cc:	cqo    
 102d8ce:	and    edx,0x7
 102d8d1:	add    rax,rdx
 102d8d4:	sar    rax,0x3
 102d8d8:	cmp    rax,0x4
 102d8dc:	jge    0x102d8e5
 102d8de:	mov    eax,0x4
 102d8e3:	jmp    0x102d8f1
 102d8e5:	mov    edx,0x400
 102d8ea:	cmp    rax,rdx
 102d8ed:	cmovg  rax,rdx
 102d8f1:	add    rax,rcx
 102d8f4:	mov    rbp,rsi
 102d8f7:	cmp    rsi,rax
 102d8fa:	cmovl  rbp,rax
 102d8fe:	cmp    rbp,rcx
 102d901:	jge    0x102d909
 102d903:	call   0x103f972
 102d908:	int3   
 102d909:	lea    rbx,[rbp*8+0x0]
 102d911:	mov    QWORD PTR [rsp+0x40],r14
 102d916:	mov    rcx,rbx
 102d919:	call   0x103f9ba
 102d91e:	mov    r9,QWORD PTR [rdi+0x10]
 102d922:	mov    r8,QWORD PTR [rdi+0x8]
 102d926:	shl    r9,0x3
 102d92a:	mov    rdx,rbx
 102d92d:	mov    rcx,rax
 102d930:	mov    r14,rax
 102d933:	call   0x1013c80
 102d938:	mov    r11,QWORD PTR [rdi+0x10]
 102d93c:	mov    r8,rsi
 102d93f:	lea    rcx,[r14+r11*8]
 102d943:	xor    edx,edx
 102d945:	sub    r8,r11
 102d948:	shl    r8,0x3
 102d94c:	call   0x104026c
 102d951:	mov    rax,rsi
 102d954:	xor    ebx,ebx
 102d956:	sub    rax,QWORD PTR [rdi+0x10]
 102d95a:	test   rax,rax
 102d95d:	jle    0x102d970
 102d95f:	mov    rcx,rsi
 102d962:	sub    rcx,QWORD PTR [rdi+0x10]
 102d966:	inc    ebx
 102d968:	movsxd rax,ebx
 102d96b:	cmp    rax,rcx
 102d96e:	jl     0x102d966
 102d970:	mov    rcx,QWORD PTR [rdi+0x8]
 102d974:	call   0x103f9c6
 102d979:	mov    QWORD PTR [rdi+0x8],r14
 102d97d:	mov    r14,QWORD PTR [rsp+0x40]
 102d982:	mov    QWORD PTR [rdi+0x18],rbp
 102d986:	mov    rbp,QWORD PTR [rsp+0x38]
 102d98b:	mov    rbx,QWORD PTR [rsp+0x30]
 102d990:	mov    QWORD PTR [rdi+0x10],rsi
 102d994:	mov    rsi,QWORD PTR [rsp+0x48]
 102d999:	add    rsp,0x20
 102d99d:	pop    rdi
 102d99e:	ret    
 102d99f:	int3   
 102d9a0:	int3   
 102d9a1:	int3   
 102d9a2:	int3   
 102d9a3:	int3   
 102d9a4:	int3   
 102d9a5:	int3   
 102d9a6:	int3   
 102d9a7:	int3   
 102d9a8:	int3   
 102d9a9:	int3   
 102d9aa:	int3   
 102d9ab:	int3   
 102d9ac:	int3   
 102d9ad:	int3   
 102d9ae:	int3   
 102d9af:	int3   
 102d9b0:	sub    rsp,0x28
 102d9b4:	mov    r9,QWORD PTR [rcx+0x8]
 102d9b8:	lea    rax,[rip+0xfffffffffffd70c1]        # 0x1004a80
 102d9bf:	mov    QWORD PTR [rcx],rax
 102d9c2:	test   r9,r9
 102d9c5:	je     0x102d9e5
 102d9c7:	xor    edx,edx
 102d9c9:	cmp    QWORD PTR [rcx+0x10],rdx
 102d9cd:	jle    0x102d9dd
 102d9cf:	mov    r8,QWORD PTR [rcx+0x10]
 102d9d3:	inc    edx
 102d9d5:	movsxd rax,edx
 102d9d8:	cmp    rax,r8
 102d9db:	jl     0x102d9d3
 102d9dd:	mov    rcx,r9
 102d9e0:	call   0x103f9c6
 102d9e5:	add    rsp,0x28
 102d9e9:	ret    
 102d9ea:	int3   
 102d9eb:	int3   
 102d9ec:	int3   
 102d9ed:	int3   
 102d9ee:	int3   
 102d9ef:	int3   
 102d9f0:	mov    QWORD PTR [rsp+0x8],rbx
 102d9f5:	push   rdi
 102d9f6:	sub    rsp,0x20
 102d9fa:	mov    eax,DWORD PTR [rdx+0x20]
 102d9fd:	mov    rdi,rdx
 102da00:	mov    rbx,rcx
 102da03:	not    eax
 102da05:	test   al,0x1
 102da07:	je     0x102da17
 102da09:	mov    rdx,QWORD PTR [rcx+0x10]
 102da0d:	mov    rcx,rdi
 102da10:	call   0x103f996
 102da15:	jmp    0x102da2e
 102da17:	mov    rcx,rdx
 102da1a:	call   0x103f98a
 102da1f:	or     r8,0xffffffffffffffff
 102da23:	mov    rcx,rbx
 102da26:	mov    rdx,rax
 102da29:	call   0x102d780
 102da2e:	mov    r8,QWORD PTR [rbx+0x10]
 102da32:	mov    rdx,QWORD PTR [rbx+0x8]
 102da36:	mov    rcx,rdi
 102da39:	mov    rbx,QWORD PTR [rsp+0x30]
 102da3e:	add    rsp,0x20
 102da42:	pop    rdi
 102da43:	jmp    0x102fd40
 102da48:	int3   
 102da49:	int3   
 102da4a:	int3   
 102da4b:	int3   
 102da4c:	int3   
 102da4d:	int3   
 102da4e:	int3   
 102da4f:	int3   
 102da50:	mov    QWORD PTR [rsp+0x8],rbx
 102da55:	push   rdi
 102da56:	sub    rsp,0x20
 102da5a:	lea    rax,[rip+0xfffffffffffd701f]        # 0x1004a80
 102da61:	mov    rbx,rcx
 102da64:	mov    edi,edx
 102da66:	mov    QWORD PTR [rcx],rax
 102da69:	mov    rcx,QWORD PTR [rcx+0x8]
 102da6d:	test   rcx,rcx
 102da70:	je     0x102da90
 102da72:	xor    r8d,r8d
 102da75:	cmp    QWORD PTR [rbx+0x10],r8
 102da79:	jle    0x102da8b
 102da7b:	mov    r9,QWORD PTR [rbx+0x10]
 102da7f:	nop
 102da80:	inc    r8d
 102da83:	movsxd rax,r8d
 102da86:	cmp    rax,r9
 102da89:	jl     0x102da80
 102da8b:	call   0x103f9c6
 102da90:	test   dil,0x1
 102da94:	je     0x102da9e
 102da96:	mov    rcx,rbx
 102da99:	call   0x103f95a
 102da9e:	mov    rax,rbx
 102daa1:	mov    rbx,QWORD PTR [rsp+0x30]
 102daa6:	add    rsp,0x20
 102daaa:	pop    rdi
 102daab:	ret    
 102daac:	int3   
 102daad:	int3   
 102daae:	int3   
 102daaf:	int3   
 102dab0:	int3   
 102dab1:	int3   
 102dab2:	int3   
 102dab3:	int3   
 102dab4:	int3   
 102dab5:	int3   
 102dab6:	int3   
 102dab7:	int3   
 102dab8:	int3   
 102dab9:	int3   
 102daba:	int3   
 102dabb:	int3   
 102dabc:	int3   
 102dabd:	int3   
 102dabe:	int3   
 102dabf:	int3   
 102dac0:	rex push rbx
 102dac2:	sub    rsp,0x20
 102dac6:	mov    rbx,rcx
 102dac9:	mov    rcx,QWORD PTR [rcx]
 102dacc:	test   rcx,rcx
 102dacf:	je     0x102dade
 102dad1:	call   QWORD PTR [rip+0xfffffffffffd3549]        # 0x1001020
 102dad7:	mov    QWORD PTR [rbx],0x0
 102dade:	add    rsp,0x20
 102dae2:	pop    rbx
 102dae3:	ret    
 102dae4:	int3   
 102dae5:	int3   
 102dae6:	int3   
 102dae7:	int3   
 102dae8:	int3   
 102dae9:	int3   
 102daea:	int3   
 102daeb:	int3   
 102daec:	int3   
 102daed:	int3   
 102daee:	int3   
 102daef:	int3   
 102daf0:	rex push rbx
 102daf2:	sub    rsp,0x20
 102daf6:	mov    rbx,rcx
 102daf9:	mov    rcx,QWORD PTR [rcx]
 102dafc:	cmp    rcx,0xffffffffffffffff
 102db00:	je     0x102db0f
 102db02:	call   QWORD PTR [rip+0xfffffffffffd39d0]        # 0x10014d8
 102db08:	mov    QWORD PTR [rbx],0xffffffffffffffff
 102db0f:	add    rsp,0x20
 102db13:	pop    rbx
 102db14:	ret    
 102db15:	int3   
 102db16:	int3   
 102db17:	int3   
 102db18:	int3   
 102db19:	int3   
 102db1a:	int3   
 102db1b:	int3   
 102db1c:	int3   
 102db1d:	int3   
 102db1e:	int3   
 102db1f:	int3   
 102db20:	rex push rbp
 102db22:	push   rsi
 102db23:	push   rdi
 102db24:	sub    rsp,0x40
 102db28:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
 102db31:	mov    QWORD PTR [rsp+0x60],rbx
 102db36:	mov    rbp,rcx
 102db39:	lea    rcx,[rsp+0x68]
 102db3e:	call   QWORD PTR [rip+0xfffffffffffd3f7c]        # 0x1001ac0
 102db44:	nop
 102db45:	call   QWORD PTR [rip+0xfffffffffffd3a05]        # 0x1001550
 102db4b:	mov    edx,eax
 102db4d:	lea    rcx,[rsp+0x78]
 102db52:	call   0x10132d0
 102db57:	mov    rsi,rax
 102db5a:	mov    edx,0xc000c43e
 102db5f:	lea    rcx,[rsp+0x70]
 102db64:	call   0x10132d0
 102db69:	mov    rbx,rax
 102db6c:	call   QWORD PTR [rip+0xfffffffffffd39de]        # 0x1001550
 102db72:	mov    edi,eax
 102db74:	mov    rcx,rbx
 102db77:	call   QWORD PTR [rip+0xfffffffffffd3f6b]        # 0x1001ae8
 102db7d:	mov    rdx,rax
 102db80:	mov    rcx,QWORD PTR [rsi]
 102db83:	mov    QWORD PTR [rsp+0x20],rcx
 102db88:	mov    r9d,edi
 102db8b:	mov    r8,rbp
 102db8e:	lea    rcx,[rsp+0x68]
 102db93:	call   QWORD PTR [rip+0xfffffffffffd3ea7]        # 0x1001a40
 102db99:	nop
 102db9a:	lea    rcx,[rsp+0x70]
 102db9f:	call   QWORD PTR [rip+0xfffffffffffd3f03]        # 0x1001aa8
 102dba5:	nop
 102dba6:	lea    rcx,[rsp+0x78]
 102dbab:	call   QWORD PTR [rip+0xfffffffffffd3ef7]        # 0x1001aa8
 102dbb1:	lea    rcx,[rsp+0x68]
 102dbb6:	call   QWORD PTR [rip+0xfffffffffffd3f2c]        # 0x1001ae8
 102dbbc:	mov    rcx,rax
 102dbbf:	mov    edx,0x2
 102dbc4:	call   0x1013090
 102dbc9:	mov    DWORD PTR [rip+0x35d51],0x2        # 0x1063924
 102dbd3:	lea    rcx,[rsp+0x68]
 102dbd8:	call   QWORD PTR [rip+0xfffffffffffd3eca]        # 0x1001aa8
 102dbde:	mov    rbx,QWORD PTR [rsp+0x60]
 102dbe3:	add    rsp,0x40
 102dbe7:	pop    rdi
 102dbe8:	pop    rsi
 102dbe9:	pop    rbp
 102dbea:	ret    
 102dbeb:	int3   
 102dbec:	int3   
 102dbed:	int3   
 102dbee:	int3   
 102dbef:	int3   
 102dbf0:	int3   
 102dbf1:	int3   
 102dbf2:	int3   
 102dbf3:	int3   
 102dbf4:	int3   
 102dbf5:	int3   
 102dbf6:	int3   
 102dbf7:	int3   
 102dbf8:	int3   
 102dbf9:	int3   
 102dbfa:	int3   
 102dbfb:	int3   
 102dbfc:	int3   
 102dbfd:	int3   
 102dbfe:	int3   
 102dbff:	int3   
 102dc00:	sub    rsp,0x58
 102dc04:	mov    rax,QWORD PTR [rip+0x35c65]        # 0x1063870
 102dc0b:	xor    rax,rsp
 102dc0e:	mov    QWORD PTR [rsp+0x40],rax
 102dc13:	xor    r10d,r10d
 102dc16:	cmp    ecx,0x2
 102dc19:	mov    eax,0x7
 102dc1e:	mov    DWORD PTR [rsp+0x24],ecx
 102dc22:	mov    rcx,QWORD PTR [rip+0x35cff]        # 0x1063928
 102dc29:	mov    DWORD PTR [rsp+0x2c],edx
 102dc2d:	cmove  eax,r10d
 102dc31:	lea    rdx,[rsp+0x20]
 102dc36:	mov    DWORD PTR [rsp+0x20],0x10
 102dc3e:	mov    DWORD PTR [rsp+0x30],r10d
 102dc43:	mov    DWORD PTR [rsp+0x34],r8d
 102dc48:	mov    DWORD PTR [rsp+0x38],r9d
 102dc4d:	mov    DWORD PTR [rsp+0x28],eax
 102dc51:	call   QWORD PTR [rip+0xfffffffffffd3449]        # 0x10010a0
 102dc57:	test   eax,eax
 102dc59:	jne    0x102dc67
 102dc5b:	lea    rcx,[rip+0xfffffffffffd84e6]        # 0x1006148
 102dc62:	call   0x102db20
 102dc67:	mov    rcx,QWORD PTR [rsp+0x40]
 102dc6c:	xor    rcx,rsp
 102dc6f:	call   0x103ff40
 102dc74:	add    rsp,0x58
 102dc78:	ret    
 102dc79:	int3   
 102dc7a:	int3   
 102dc7b:	int3   
 102dc7c:	int3   
 102dc7d:	int3   
 102dc7e:	int3   
 102dc7f:	int3   
 102dc80:	sub    rsp,0x28
 102dc84:	mov    rcx,QWORD PTR [rip+0x357ad]        # 0x1063438
 102dc8b:	mov    edx,0x15f90
 102dc90:	call   QWORD PTR [rip+0xfffffffffffd36b2]        # 0x1001348
 102dc96:	cmp    eax,0x102
 102dc9b:	jne    0x102dcbb
 102dc9d:	lock inc DWORD PTR [rip+0x35c80]        # 0x1063924
 102dca4:	mov    rdx,QWORD PTR [rip+0x35785]        # 0x1063430
 102dcab:	lea    rcx,[rip+0xffffffffffffa61e]        # 0x10282d0
 102dcb2:	xor    r8d,r8d
 102dcb5:	call   QWORD PTR [rip+0xfffffffffffd3655]        # 0x1001310
 102dcbb:	mov    eax,0x1
 102dcc0:	add    rsp,0x28
 102dcc4:	ret    
 102dcc5:	int3   
 102dcc6:	int3   
 102dcc7:	int3   
 102dcc8:	int3   
 102dcc9:	int3   
 102dcca:	int3   
 102dccb:	int3   
 102dccc:	int3   
 102dccd:	int3   
 102dcce:	int3   
 102dccf:	int3   
 102dcd0:	mov    QWORD PTR [rsp+0x8],rbx
 102dcd5:	push   rdi
 102dcd6:	sub    rsp,0x60
 102dcda:	mov    rax,QWORD PTR [rip+0x35b8f]        # 0x1063870
 102dce1:	xor    rax,rsp
 102dce4:	mov    QWORD PTR [rsp+0x58],rax
 102dce9:	mov    ebx,ecx
 102dceb:	xor    edi,edi
 102dced:	mov    eax,0x4
 102dcf2:	mov    edx,ebx
 102dcf4:	mov    ecx,edi
 102dcf6:	dec    edx
 102dcf8:	je     0x102dd15
 102dcfa:	dec    edx
 102dcfc:	je     0x102dd0e
 102dcfe:	dec    edx
 102dd00:	je     0x102dd1f
 102dd02:	cmp    edx,0x2
 102dd05:	jne    0x102dd1f
 102dd07:	mov    ecx,0x4e20
 102dd0c:	jmp    0x102dd1a
 102dd0e:	mov    eax,0x7
 102dd13:	jmp    0x102dd1f
 102dd15:	mov    ecx,0x1d4c0
 102dd1a:	mov    eax,0x3
 102dd1f:	mov    DWORD PTR [rsp+0x50],ecx
 102dd23:	mov    rcx,QWORD PTR [rip+0x35bfe]        # 0x1063928
 102dd2a:	lea    rdx,[rsp+0x38]
 102dd2f:	mov    QWORD PTR [rsp+0x40],0x7
 102dd38:	mov    DWORD PTR [rsp+0x38],0x10
 102dd40:	mov    QWORD PTR [rsp+0x48],rdi
 102dd45:	mov    DWORD PTR [rsp+0x3c],eax
 102dd49:	call   QWORD PTR [rip+0xfffffffffffd3351]        # 0x10010a0
 102dd4f:	test   eax,eax
 102dd51:	jne    0x102dd5f
 102dd53:	lea    rcx,[rip+0xfffffffffffd83ee]        # 0x1006148
 102dd5a:	call   0x102db20
 102dd5f:	cmp    ebx,0x2
 102dd62:	jne    0x102dd73
 102dd64:	lock inc DWORD PTR [rip+0x35bb9]        # 0x1063924
 102dd6b:	mov    DWORD PTR [rip+0x35cc7],edi        # 0x1063a38
 102dd71:	jmp    0x102ddba
 102dd73:	cmp    ebx,0x1
 102dd76:	je     0x102dd7d
 102dd78:	cmp    ebx,0x5
 102dd7b:	jne    0x102ddba
 102dd7d:	lock inc DWORD PTR [rip+0x35ba0]        # 0x1063924
 102dd84:	lea    rax,[rsp+0x30]
 102dd89:	lea    r8,[rip+0xfffffffffffffef0]        # 0x102dc80
 102dd90:	xor    r9d,r9d
 102dd93:	mov    QWORD PTR [rsp+0x28],rax
 102dd98:	xor    edx,edx
 102dd9a:	xor    ecx,ecx
 102dd9c:	mov    DWORD PTR [rsp+0x20],edi
 102dda0:	mov    DWORD PTR [rip+0x35c92],edi        # 0x1063a38
 102dda6:	call   QWORD PTR [rip+0xfffffffffffd38bc]        # 0x1001668
 102ddac:	test   rax,rax
 102ddaf:	je     0x102ddba
 102ddb1:	mov    rcx,rax
 102ddb4:	call   QWORD PTR [rip+0xfffffffffffd371e]        # 0x10014d8
 102ddba:	mov    rcx,QWORD PTR [rsp+0x58]
 102ddbf:	xor    rcx,rsp
 102ddc2:	call   0x103ff40
 102ddc7:	mov    rbx,QWORD PTR [rsp+0x70]
 102ddcc:	add    rsp,0x60
 102ddd0:	pop    rdi
 102ddd1:	ret    
 102ddd2:	int3   
 102ddd3:	int3   
 102ddd4:	int3   
 102ddd5:	int3   
 102ddd6:	int3   
 102ddd7:	int3   
 102ddd8:	int3   
 102ddd9:	int3   
 102ddda:	int3   
 102dddb:	int3   
 102dddc:	int3   
 102dddd:	int3   
 102ddde:	int3   
 102dddf:	int3   
 102dde0:	rex push rbx
 102dde2:	sub    rsp,0x20
 102dde6:	mov    rbx,rcx
 102dde9:	mov    rcx,QWORD PTR [rcx]
 102ddec:	test   rcx,rcx
 102ddef:	je     0x102ddfe
 102ddf1:	call   QWORD PTR [rip+0xfffffffffffd36e1]        # 0x10014d8
 102ddf7:	mov    QWORD PTR [rbx],0x0
 102ddfe:	add    rsp,0x20
 102de02:	pop    rbx
 102de03:	ret    
 102de04:	int3   
 102de05:	int3   
 102de06:	int3   
 102de07:	int3   
 102de08:	int3   
 102de09:	int3   
 102de0a:	int3   
 102de0b:	int3   
 102de0c:	int3   
 102de0d:	int3   
 102de0e:	int3   
 102de0f:	int3   
 102de10:	mov    rax,rsp
 102de13:	push   rsi
 102de14:	push   rdi
 102de15:	push   r14
 102de17:	sub    rsp,0x90
 102de1e:	mov    QWORD PTR [rax-0x70],0xfffffffffffffffe
 102de26:	mov    QWORD PTR [rax+0x8],rbx
 102de2a:	mov    QWORD PTR [rax+0x18],rbp
 102de2e:	mov    rax,QWORD PTR [rip+0x35a3b]        # 0x1063870
 102de35:	xor    rax,rsp
 102de38:	mov    QWORD PTR [rsp+0x80],rax
 102de40:	mov    rsi,rdx
 102de43:	mov    ebp,ecx
 102de45:	lea    rdx,[rip+0xfffffffffffffe84]        # 0x102dcd0
 102de4c:	mov    rcx,QWORD PTR [rsi]
 102de4f:	call   QWORD PTR [rip+0xfffffffffffd3243]        # 0x1001098
 102de55:	mov    QWORD PTR [rip+0x35acc],rax        # 0x1063928
 102de5c:	xor    r14d,r14d
 102de5f:	nop
 102de60:	mov    DWORD PTR [rsp+0x48],0x7
 102de68:	mov    DWORD PTR [rsp+0x40],0x10
 102de70:	mov    QWORD PTR [rsp+0x4c],r14
 102de75:	mov    DWORD PTR [rsp+0x44],0x4
 102de7d:	mov    QWORD PTR [rsp+0x54],r14
 102de82:	lea    rdx,[rsp+0x40]
 102de87:	mov    rcx,rax
 102de8a:	call   QWORD PTR [rip+0xfffffffffffd3210]        # 0x10010a0
 102de90:	test   eax,eax
 102de92:	jne    0x102dea0
 102de94:	lea    rcx,[rip+0xfffffffffffd82ad]        # 0x1006148
 102de9b:	call   0x102db20
 102dea0:	mov    rbx,QWORD PTR [rip+0x35b99]        # 0x1063a40
 102dea7:	test   rbx,rbx
 102deaa:	jne    0x102ded9
 102deac:	mov    ecx,0x190
 102deb1:	call   0x103f9d2
 102deb6:	mov    QWORD PTR [rsp+0x30],rax
 102debb:	test   rax,rax
 102debe:	je     0x102decf
 102dec0:	mov    dl,0x1
 102dec2:	mov    rcx,rax
 102dec5:	call   0x1028390
 102deca:	mov    rbx,rax
 102decd:	jmp    0x102ded2
 102decf:	mov    rbx,r14
 102ded2:	mov    QWORD PTR [rip+0x35b67],rbx        # 0x1063a40
 102ded9:	mov    r8,rsi
 102dedc:	mov    edx,ebp
 102dede:	mov    rcx,rbx
 102dee1:	call   0x1024130
 102dee6:	mov    ecx,DWORD PTR [rip+0x35b4c]        # 0x1063a38
 102deec:	test   ecx,ecx
 102deee:	je     0x102df4a
 102def0:	mov    ecx,DWORD PTR [rip+0x35b3e]        # 0x1063a34
 102def6:	test   ecx,ecx
 102def8:	je     0x102df4a
 102defa:	test   al,al
 102defc:	je     0x102df4a
 102defe:	mov    dil,0x1
 102df01:	mov    QWORD PTR [rip+0x35b38],r14        # 0x1063a40
 102df08:	mov    DWORD PTR [rip+0x35a15],r14d        # 0x1063924
 102df0f:	mov    DWORD PTR [rip+0x35b1e],r14d        # 0x1063a34
 102df16:	mov    DWORD PTR [rip+0x35b1b],r14d        # 0x1063a38
 102df1d:	mov    DWORD PTR [rip+0x359f0],r14d        # 0x1063914
 102df24:	mov    DWORD PTR [rip+0x359f5],r14d        # 0x1063920
 102df2b:	mov    rax,QWORD PTR [rbx]
 102df2e:	mov    BYTE PTR [rsp+0x28],dil
 102df33:	mov    BYTE PTR [rsp+0x20],dil
 102df38:	xor    r9d,r9d
 102df3b:	xor    r8d,r8d
 102df3e:	mov    edx,0x4000c439
 102df43:	mov    rcx,rbx
 102df46:	call   QWORD PTR [rax]
 102df48:	jmp    0x102df91
 102df4a:	xor    dil,dil
 102df4d:	mov    DWORD PTR [rsp+0x68],0x7
 102df55:	mov    DWORD PTR [rsp+0x60],0x10
 102df5d:	mov    QWORD PTR [rsp+0x6c],r14
 102df62:	mov    DWORD PTR [rsp+0x64],0x1
 102df6a:	mov    QWORD PTR [rsp+0x74],r14
 102df6f:	lea    rdx,[rsp+0x60]
 102df74:	mov    rcx,QWORD PTR [rip+0x359ad]        # 0x1063928
 102df7b:	call   QWORD PTR [rip+0xfffffffffffd311f]        # 0x10010a0
 102df81:	test   eax,eax
 102df83:	jne    0x102df91
 102df85:	lea    rcx,[rip+0xfffffffffffd81bc]        # 0x1006148
 102df8c:	call   0x102db20
 102df91:	test   rbx,rbx
 102df94:	je     0x102dfa6
 102df96:	mov    rcx,rbx
 102df99:	call   0x1023eb0
 102df9e:	mov    rcx,rbx
 102dfa1:	call   0x103f95a
 102dfa6:	test   dil,dil
 102dfa9:	je     0x102dfb7
 102dfab:	mov    rax,QWORD PTR [rip+0x35976]        # 0x1063928
 102dfb2:	jmp    0x102de60
 102dfb7:	mov    rcx,QWORD PTR [rsp+0x80]
 102dfbf:	xor    rcx,rsp
 102dfc2:	call   0x103ff40
 102dfc7:	lea    r11,[rsp+0x90]
 102dfcf:	mov    rbx,QWORD PTR [r11+0x20]
 102dfd3:	mov    rbp,QWORD PTR [r11+0x30]
 102dfd7:	mov    rsp,r11
 102dfda:	pop    r14
 102dfdc:	pop    rdi
 102dfdd:	pop    rsi
 102dfde:	ret    
 102dfdf:	int3   
 102dfe0:	int3   
 102dfe1:	int3   
 102dfe2:	int3   
 102dfe3:	int3   
 102dfe4:	int3   
 102dfe5:	int3   
 102dfe6:	int3   
 102dfe7:	int3   
 102dfe8:	int3   
 102dfe9:	int3   
 102dfea:	int3   
 102dfeb:	int3   
 102dfec:	int3   
 102dfed:	int3   
 102dfee:	int3   
 102dfef:	int3   
 102dff0:	mov    QWORD PTR [rsp+0x18],rbx
 102dff5:	mov    QWORD PTR [rsp+0x20],rsi
 102dffa:	push   rdi
 102dffb:	push   r12
 102dffd:	push   r13
 102dfff:	push   r14
 102e001:	push   r15
 102e003:	sub    rsp,0x4b0
 102e00a:	mov    rax,QWORD PTR [rip+0x3585f]        # 0x1063870
 102e011:	xor    rax,rsp
 102e014:	mov    QWORD PTR [rsp+0x4a0],rax
 102e01c:	mov    QWORD PTR [rsp+0x68],rsp
 102e021:	mov    rdi,rdx
 102e024:	mov    r12,rcx
 102e027:	lea    rcx,[rip+0x35a1a]        # 0x1063a48
 102e02e:	call   QWORD PTR [rip+0xfffffffffffd3204]        # 0x1001238
 102e034:	nop
 102e035:	lea    rcx,[rip+0xfffffffffffd8134]        # 0x1006170
 102e03c:	call   QWORD PTR [rip+0xfffffffffffd3386]        # 0x10013c8
 102e042:	mov    r14,rax
 102e045:	test   rax,rax
 102e048:	jne    0x102e07c
 102e04a:	mov    rbx,QWORD PTR [rdi]
 102e04d:	call   QWORD PTR [rip+0xfffffffffffd34fd]        # 0x1001550
 102e053:	mov    edx,eax
 102e055:	xor    r9d,r9d
 102e058:	mov    r8d,0xc000c470
 102e05e:	mov    rcx,rdi
 102e061:	call   QWORD PTR [rbx+0x20]
 102e064:	lea    rdx,[rip+0xa]        # 0x102e075
 102e06b:	mov    rcx,rsp
 102e06e:	call   0x10403a2
 102e073:	nop
 102e074:	nop
 102e075:	xor    al,al
 102e077:	jmp    0x102e356
 102e07c:	lea    rdx,[rip+0xfffffffffffd8105]        # 0x1006188
 102e083:	mov    rcx,rax
 102e086:	call   QWORD PTR [rip+0xfffffffffffd34fc]        # 0x1001588
 102e08c:	mov    r15,rax
 102e08f:	test   rax,rax
 102e092:	jne    0x102e0c8
 102e094:	mov    rbx,QWORD PTR [rdi]
 102e097:	call   QWORD PTR [rip+0xfffffffffffd34b3]        # 0x1001550
 102e09d:	mov    edx,eax
 102e09f:	xor    r9d,r9d
 102e0a2:	mov    r8d,0xc000c471
 102e0a8:	mov    rcx,rdi
 102e0ab:	call   QWORD PTR [rbx+0x20]
 102e0ae:	lea    rdx,[rip+0xc]        # 0x102e0c1
 102e0b5:	mov    rcx,QWORD PTR [rsp+0x68]
 102e0ba:	call   0x10403a2
 102e0bf:	nop
 102e0c0:	nop
 102e0c1:	xor    al,al
 102e0c3:	jmp    0x102e356
 102e0c8:	xor    r13d,r13d
 102e0cb:	mov    DWORD PTR [rsp+0x60],r13d
 102e0d0:	mov    r8,rdi
 102e0d3:	lea    rdx,[rip+0xfffffffffffd80c6]        # 0x10061a0
 102e0da:	lea    rcx,[rip+0x3536f]        # 0x1063450
 102e0e1:	call   0x1033380
 102e0e6:	test   al,al
 102e0e8:	je     0x102e10b
 102e0ea:	mov    r9,rdi
 102e0ed:	lea    r8,[rsp+0x60]
 102e0f2:	lea    rdx,[rip+0xfffffffffffd80a7]        # 0x10061a0
 102e0f9:	lea    rcx,[rip+0x35350]        # 0x1063450
 102e100:	call   0x1032cd0
 102e105:	mov    DWORD PTR [rsp+0x60],eax
 102e109:	jmp    0x102e10f
 102e10b:	mov    eax,DWORD PTR [rsp+0x60]
 102e10f:	test   eax,eax
 102e111:	jne    0x102e16b
 102e113:	lea    rax,[rsp+0x80]
 102e11b:	mov    QWORD PTR [rsp+0x20],rax
 102e120:	xor    r9d,r9d
 102e123:	xor    r8d,r8d
 102e126:	mov    edx,0x8005
 102e12b:	xor    ecx,ecx
 102e12d:	call   QWORD PTR [rip+0xfffffffffffd375d]        # 0x1001890
 102e133:	test   eax,eax
 102e135:	jns    0x102e17e
 102e137:	mov    rbx,QWORD PTR [rdi]
 102e13a:	call   QWORD PTR [rip+0xfffffffffffd3410]        # 0x1001550
 102e140:	mov    edx,eax
 102e142:	xor    r9d,r9d
 102e145:	mov    r8d,0xc000c472
 102e14b:	mov    rcx,rdi
 102e14e:	call   QWORD PTR [rbx+0x20]
 102e151:	lea    rdx,[rip+0xc]        # 0x102e164
 102e158:	mov    rcx,QWORD PTR [rsp+0x68]
 102e15d:	call   0x10403a2
 102e162:	nop
 102e163:	nop
 102e164:	xor    al,al
 102e166:	jmp    0x102e356
 102e16b:	lea    rdx,[rsp+0x80]
 102e173:	mov    ecx,0x104
 102e178:	call   QWORD PTR [rip+0xfffffffffffd326a]        # 0x10013e8
 102e17e:	mov    WORD PTR [rsp+0x286],r13w
 102e187:	nop    WORD PTR [rax+rax*1+0x0]
 102e190:	lea    rcx,[rsp+0x70]
 102e195:	call   QWORD PTR [rip+0xfffffffffffd30c5]        # 0x1001260
 102e19b:	movzx  r11d,WORD PTR [rsp+0x7c]
 102e1a1:	movzx  eax,WORD PTR [rsp+0x7a]
 102e1a6:	movzx  ecx,WORD PTR [rsp+0x78]
 102e1ab:	movzx  edx,WORD PTR [rsp+0x76]
 102e1b0:	movzx  r8d,WORD PTR [rsp+0x72]
 102e1b6:	movzx  r9d,WORD PTR [rsp+0x70]
 102e1bc:	mov    DWORD PTR [rsp+0x50],r11d
 102e1c1:	mov    DWORD PTR [rsp+0x48],eax
 102e1c5:	mov    DWORD PTR [rsp+0x40],ecx
 102e1c9:	mov    DWORD PTR [rsp+0x38],edx
 102e1cd:	mov    DWORD PTR [rsp+0x30],r8d
 102e1d2:	mov    DWORD PTR [rsp+0x28],r9d
 102e1d7:	lea    rax,[rsp+0x80]
 102e1df:	mov    QWORD PTR [rsp+0x20],rax
 102e1e4:	lea    r9,[rip+0xfffffffffffd7fe5]        # 0x10061d0
 102e1eb:	mov    edx,0x105
 102e1f0:	lea    r8d,[rdx-0x1]
 102e1f4:	lea    rcx,[rsp+0x290]
 102e1fc:	call   QWORD PTR [rip+0xfffffffffffd354e]        # 0x1001750
 102e202:	mov    WORD PTR [rsp+0x498],r13w
 102e20b:	lea    rcx,[rsp+0x290]
 102e213:	call   0x1030aa0
 102e218:	test   al,al
 102e21a:	jne    0x102e190
 102e220:	mov    QWORD PTR [rsp+0x30],r13
 102e225:	mov    DWORD PTR [rsp+0x28],0x100080
 102e22d:	mov    DWORD PTR [rsp+0x20],0x2
 102e235:	xor    r9d,r9d
 102e238:	mov    edx,0x40000000
 102e23d:	lea    r8d,[r9+0x3]
 102e241:	lea    rcx,[rsp+0x290]
 102e249:	call   QWORD PTR [rip+0xfffffffffffd2f91]        # 0x10011e0
 102e24f:	mov    rsi,rax
 102e252:	cmp    rax,0xffffffffffffffff
 102e256:	jne    0x102e28c
 102e258:	mov    rbx,QWORD PTR [rdi]
 102e25b:	call   QWORD PTR [rip+0xfffffffffffd32ef]        # 0x1001550
 102e261:	mov    edx,eax
 102e263:	xor    r9d,r9d
 102e266:	mov    r8d,0xc000c472
 102e26c:	mov    rcx,rdi
 102e26f:	call   QWORD PTR [rbx+0x20]
 102e272:	lea    rdx,[rip+0xc]        # 0x102e285
 102e279:	mov    rcx,QWORD PTR [rsp+0x68]
 102e27e:	call   0x10403a2
 102e283:	nop
 102e284:	nop
 102e285:	xor    al,al
 102e287:	jmp    0x102e356
 102e28c:	mov    DWORD PTR [rsp+0x64],0x145
 102e294:	mov    r8,rdi
 102e297:	lea    rdx,[rip+0xfffffffffffd7f8a]        # 0x1006228
 102e29e:	lea    rcx,[rip+0x351ab]        # 0x1063450
 102e2a5:	call   0x1033380
 102e2aa:	test   al,al
 102e2ac:	je     0x102e2cd
 102e2ae:	mov    r9,rdi
 102e2b1:	lea    r8,[rsp+0x64]
 102e2b6:	lea    rdx,[rip+0xfffffffffffd7f6b]        # 0x1006228
 102e2bd:	lea    rcx,[rip+0x3518c]        # 0x1063450
 102e2c4:	call   0x1032cd0
 102e2c9:	mov    DWORD PTR [rsp+0x64],eax
 102e2cd:	call   QWORD PTR [rip+0xfffffffffffd2fe5]        # 0x10012b8
 102e2d3:	mov    ebx,eax
 102e2d5:	call   QWORD PTR [rip+0xfffffffffffd2fd5]        # 0x10012b0
 102e2db:	mov    rcx,rax
 102e2de:	mov    QWORD PTR [rsp+0x30],r13
 102e2e3:	mov    QWORD PTR [rsp+0x28],r13
 102e2e8:	mov    QWORD PTR [rsp+0x20],r12
 102e2ed:	mov    r9d,DWORD PTR [rsp+0x64]
 102e2f2:	mov    r8,rsi
 102e2f5:	mov    edx,ebx
 102e2f7:	call   r15
 102e2fa:	test   eax,eax
 102e2fc:	jne    0x102e32f
 102e2fe:	mov    rbx,QWORD PTR [rdi]
 102e301:	call   QWORD PTR [rip+0xfffffffffffd3249]        # 0x1001550
 102e307:	mov    edx,eax
 102e309:	xor    r9d,r9d
 102e30c:	mov    r8d,0xc000c473
 102e312:	mov    rcx,rdi
 102e315:	call   QWORD PTR [rbx+0x20]
 102e318:	lea    rdx,[rip+0xc]        # 0x102e32b
 102e31f:	mov    rcx,QWORD PTR [rsp+0x68]
 102e324:	call   0x10403a2
 102e329:	nop
 102e32a:	nop
 102e32b:	xor    al,al
 102e32d:	jmp    0x102e356
 102e32f:	mov    rcx,rsi
 102e332:	call   QWORD PTR [rip+0xfffffffffffd31a0]        # 0x10014d8
 102e338:	mov    rcx,r14
 102e33b:	call   QWORD PTR [rip+0xfffffffffffd2f57]        # 0x1001298
 102e341:	lea    rdx,[rip+0xc]        # 0x102e354
 102e348:	mov    rcx,QWORD PTR [rsp+0x68]
 102e34d:	call   0x10403a2
 102e352:	nop
 102e353:	nop
 102e354:	mov    al,0x1
 102e356:	mov    rcx,QWORD PTR [rsp+0x4a0]
 102e35e:	xor    rcx,rsp
 102e361:	call   0x103ff40
 102e366:	lea    r11,[rsp+0x4b0]
 102e36e:	mov    rbx,QWORD PTR [r11+0x40]
 102e372:	mov    rsi,QWORD PTR [r11+0x48]
 102e376:	mov    rsp,r11
 102e379:	pop    r15
 102e37b:	pop    r14
 102e37d:	pop    r13
 102e37f:	pop    r12
 102e381:	pop    rdi
 102e382:	ret    
 102e383:	int3   
 102e384:	int3   
 102e385:	int3   
 102e386:	int3   
 102e387:	int3   
 102e388:	int3   
 102e389:	int3   
 102e38a:	int3   
 102e38b:	int3   
 102e38c:	int3   
 102e38d:	int3   
 102e38e:	int3   
 102e38f:	int3   
 102e390:	rex push rdi
 102e392:	sub    rsp,0x30
 102e396:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 102e39f:	mov    QWORD PTR [rsp+0x40],rbx
 102e3a4:	mov    rdi,rcx
 102e3a7:	xor    ebx,ebx
 102e3a9:	mov    rax,QWORD PTR [rip+0x35690]        # 0x1063a40
 102e3b0:	test   rax,rax
 102e3b3:	jne    0x102e3df
 102e3b5:	mov    ecx,0x190
 102e3ba:	call   0x103f9d2
 102e3bf:	mov    QWORD PTR [rsp+0x48],rax
 102e3c4:	test   rax,rax
 102e3c7:	je     0x102e3d5
 102e3c9:	xor    edx,edx
 102e3cb:	mov    rcx,rax
 102e3ce:	call   0x1028390
 102e3d3:	jmp    0x102e3d8
 102e3d5:	mov    rax,rbx
 102e3d8:	mov    QWORD PTR [rip+0x35661],rax        # 0x1063a40
 102e3df:	mov    rdx,rax
 102e3e2:	mov    rcx,rdi
 102e3e5:	call   0x102dff0
 102e3ea:	test   al,al
 102e3ec:	sete   bl
 102e3ef:	mov    eax,ebx
 102e3f1:	mov    rbx,QWORD PTR [rsp+0x40]
 102e3f6:	add    rsp,0x30
 102e3fa:	pop    rdi
 102e3fb:	ret    
 102e3fc:	int3   
 102e3fd:	int3   
 102e3fe:	int3   
 102e3ff:	int3   
 102e400:	int3   
 102e401:	int3   
 102e402:	int3   
 102e403:	int3   
 102e404:	int3   
 102e405:	int3   
 102e406:	int3   
 102e407:	int3   
 102e408:	int3   
 102e409:	int3   
 102e40a:	int3   
 102e40b:	int3   
 102e40c:	int3   
 102e40d:	int3   
 102e40e:	int3   
 102e40f:	int3   
 102e410:	rex push rbx
 102e412:	push   rbp
 102e413:	push   rsi
 102e414:	push   rdi
 102e415:	push   r14
 102e417:	sub    rsp,0x80
 102e41e:	mov    QWORD PTR [rsp+0x50],0xfffffffffffffffe
 102e427:	movzx  r14d,dl
 102e42b:	mov    rsi,rcx
 102e42e:	mov    rax,QWORD PTR [rcx]
 102e431:	cmp    DWORD PTR [rax],0xc00000fd
 102e437:	jne    0x102e450
 102e439:	lea    rcx,[rip+0xfffffffffffd7e00]        # 0x1006240
 102e440:	call   QWORD PTR [rip+0xfffffffffffd3072]        # 0x10014b8
 102e446:	mov    eax,0x1
 102e44b:	jmp    0x102e6a1
 102e450:	lea    rcx,[rsp+0x40]
 102e455:	call   QWORD PTR [rip+0xfffffffffffd3665]        # 0x1001ac0
 102e45b:	nop
 102e45c:	mov    rax,QWORD PTR [rsi]
 102e45f:	mov    ebp,DWORD PTR [rax]
 102e461:	mov    rdi,QWORD PTR [rip+0x355d8]        # 0x1063a40
 102e468:	test   rdi,rdi
 102e46b:	jne    0x102e49c
 102e46d:	mov    ecx,0x190
 102e472:	call   0x103f9d2
 102e477:	mov    QWORD PTR [rsp+0xc0],rax
 102e47f:	test   rax,rax
 102e482:	je     0x102e493
 102e484:	xor    edx,edx
 102e486:	mov    rcx,rax
 102e489:	call   0x1028390
 102e48e:	mov    rdi,rax
 102e491:	jmp    0x102e495
 102e493:	xor    edi,edi
 102e495:	mov    QWORD PTR [rip+0x355a4],rdi        # 0x1063a40
 102e49c:	mov    DWORD PTR [rsp+0xb0],0x5
 102e4a7:	mov    r8,rdi
 102e4aa:	lea    rdx,[rip+0xfffffffffffd7dc7]        # 0x1006278
 102e4b1:	lea    rcx,[rip+0x34f98]        # 0x1063450
 102e4b8:	call   0x1033380
 102e4bd:	test   al,al
 102e4bf:	je     0x102e4e6
 102e4c1:	mov    r9,rdi
 102e4c4:	lea    r8,[rsp+0xb0]
 102e4cc:	lea    rdx,[rip+0xfffffffffffd7da5]        # 0x1006278
 102e4d3:	lea    rcx,[rip+0x34f76]        # 0x1063450
 102e4da:	call   0x1032cd0
 102e4df:	mov    DWORD PTR [rsp+0xb0],eax
 102e4e6:	cmp    ebp,0xe0000001
 102e4ec:	je     0x102e579
 102e4f2:	mov    edx,0xc000c474
 102e4f7:	lea    rcx,[rsp+0x48]
 102e4fc:	call   0x10132d0
 102e501:	nop
 102e502:	mov    rcx,rax
 102e505:	call   QWORD PTR [rip+0xfffffffffffd35dd]        # 0x1001ae8
 102e50b:	mov    rdx,rax
 102e50e:	mov    r8d,ebp
 102e511:	lea    rcx,[rsp+0x40]
 102e516:	call   QWORD PTR [rip+0xfffffffffffd3524]        # 0x1001a40
 102e51c:	nop
 102e51d:	lea    rcx,[rsp+0x48]
 102e522:	call   QWORD PTR [rip+0xfffffffffffd3580]        # 0x1001aa8
 102e528:	mov    rbx,QWORD PTR [rdi]
 102e52b:	lea    rcx,[rsp+0x40]
 102e530:	call   QWORD PTR [rip+0xfffffffffffd35b2]        # 0x1001ae8
 102e536:	mov    r8,rax
 102e539:	mov    BYTE PTR [rsp+0x30],0x1
 102e53e:	mov    BYTE PTR [rsp+0x28],0x1
 102e543:	mov    DWORD PTR [rsp+0x20],0x2
 102e54b:	xor    r9d,r9d
 102e54e:	mov    edx,0xc000c474
 102e553:	mov    rcx,rdi
 102e556:	call   QWORD PTR [rbx+0x8]
 102e559:	mov    r11d,0x1
 102e55f:	lock xadd DWORD PTR [rip+0x35510],r11d        # 0x1063a78
 102e568:	inc    r11d
 102e56b:	cmp    r11d,DWORD PTR [rsp+0xb0]
 102e573:	ja     0x102e693
 102e579:	mov    rax,QWORD PTR [rdi]
 102e57c:	mov    BYTE PTR [rsp+0x28],0x1
 102e581:	mov    BYTE PTR [rsp+0x20],0x1
 102e586:	mov    r9d,0x2
 102e58c:	xor    r8d,r8d
 102e58f:	mov    edx,0xc000c489
 102e594:	mov    rcx,rdi
 102e597:	call   QWORD PTR [rax]
 102e599:	mov    rax,QWORD PTR [rsi]
 102e59c:	mov    QWORD PTR [rsp+0x68],rax
 102e5a1:	mov    rax,QWORD PTR [rsi+0x8]
 102e5a5:	mov    QWORD PTR [rsp+0x70],rax
 102e5aa:	lea    rax,[rsp+0x68]
 102e5af:	mov    QWORD PTR [rsp+0x5c],rax
 102e5b4:	call   QWORD PTR [rip+0xfffffffffffd2d1e]        # 0x10012d8
 102e5ba:	mov    DWORD PTR [rsp+0x58],eax
 102e5be:	mov    DWORD PTR [rsp+0x64],0x0
 102e5c6:	lea    rax,[rsp+0xc8]
 102e5ce:	mov    QWORD PTR [rsp+0x28],rax
 102e5d3:	mov    DWORD PTR [rsp+0x20],0x0
 102e5db:	lea    r9,[rsp+0x58]
 102e5e0:	lea    r8,[rip+0xfffffffffffffda9]        # 0x102e390
 102e5e7:	xor    edx,edx
 102e5e9:	xor    ecx,ecx
 102e5eb:	call   QWORD PTR [rip+0xfffffffffffd3077]        # 0x1001668
 102e5f1:	mov    rbx,rax
 102e5f4:	test   rax,rax
 102e5f7:	jne    0x102e626
 102e5f9:	mov    rbx,QWORD PTR [rdi]
 102e5fc:	call   QWORD PTR [rip+0xfffffffffffd2f4e]        # 0x1001550
 102e602:	mov    edx,eax
 102e604:	xor    r9d,r9d
 102e607:	mov    r8d,0xc000c475
 102e60d:	mov    rcx,rdi
 102e610:	call   QWORD PTR [rbx+0x20]
 102e613:	nop
 102e614:	lea    rcx,[rsp+0x40]
 102e619:	call   QWORD PTR [rip+0xfffffffffffd3489]        # 0x1001aa8
 102e61f:	mov    eax,0x1
 102e624:	jmp    0x102e6a1
 102e626:	mov    r8d,0x1
 102e62c:	or     edx,0xffffffff
 102e62f:	mov    rcx,rax
 102e632:	call   QWORD PTR [rip+0xfffffffffffd2d58]        # 0x1001390
 102e638:	lea    rdx,[rsp+0xc0]
 102e640:	mov    rcx,rbx
 102e643:	call   QWORD PTR [rip+0xfffffffffffd2ca7]        # 0x10012f0
 102e649:	test   eax,eax
 102e64b:	je     0x102e65c
 102e64d:	cmp    DWORD PTR [rsp+0xc0],0x0
 102e655:	mov    edx,0xc000c476
 102e65a:	je     0x102e661
 102e65c:	mov    edx,0xc000c477
 102e661:	mov    BYTE PTR [rsp+0x28],0x1
 102e666:	mov    BYTE PTR [rsp+0x20],0x1
 102e66b:	mov    rax,QWORD PTR [rdi]
 102e66e:	mov    r9d,0x2
 102e674:	xor    r8d,r8d
 102e677:	mov    rcx,rdi
 102e67a:	call   QWORD PTR [rax]
 102e67c:	test   r14b,r14b
 102e67f:	je     0x102e693
 102e681:	cmp    ebp,0xe0000001
 102e687:	je     0x102e693
 102e689:	mov    DWORD PTR [rip+0x35291],0x2        # 0x1063924
 102e693:	lea    rcx,[rsp+0x40]
 102e698:	call   QWORD PTR [rip+0xfffffffffffd340a]        # 0x1001aa8
 102e69e:	or     eax,0xffffffff
 102e6a1:	add    rsp,0x80
 102e6a8:	pop    r14
 102e6aa:	pop    rdi
 102e6ab:	pop    rsi
 102e6ac:	pop    rbp
 102e6ad:	pop    rbx
 102e6ae:	ret    
 102e6af:	int3   
 102e6b0:	int3   
 102e6b1:	int3   
 102e6b2:	int3   
 102e6b3:	int3   
 102e6b4:	int3   
 102e6b5:	int3   
 102e6b6:	int3   
 102e6b7:	int3   
 102e6b8:	int3   
 102e6b9:	int3   
 102e6ba:	int3   
 102e6bb:	int3   
 102e6bc:	int3   
 102e6bd:	int3   
 102e6be:	int3   
 102e6bf:	int3   
 102e6c0:	mov    QWORD PTR [rsp+0x10],rdx
 102e6c5:	mov    QWORD PTR [rsp+0x8],rcx
 102e6ca:	push   rbp
 102e6cb:	push   rbx
 102e6cc:	push   rsi
 102e6cd:	push   rdi
 102e6ce:	push   r12
 102e6d0:	push   r13
 102e6d2:	push   r14
 102e6d4:	push   r15
 102e6d6:	lea    rbp,[rsp-0x1f]
 102e6db:	sub    rsp,0xd8
 102e6e2:	mov    QWORD PTR [rbp+0xf],0xfffffffffffffffe
 102e6ea:	mov    r12,rdx
 102e6ed:	mov    r15,rcx
 102e6f0:	lea    rax,[rip+0xfffffffffffd4349]        # 0x1002a40
 102e6f7:	mov    QWORD PTR [rbp-0x29],rax
 102e6fb:	xor    r13d,r13d
 102e6fe:	mov    QWORD PTR [rbp-0x21],r13
 102e702:	mov    DWORD PTR [rbp-0x19],0x11
 102e709:	mov    QWORD PTR [rbp-0x11],r13
 102e70d:	mov    QWORD PTR [rbp-0x9],r13
 102e711:	mov    QWORD PTR [rbp-0x1],r13
 102e715:	mov    QWORD PTR [rbp+0x7],0xa
 102e71d:	lea    rax,[rip+0xfffffffffffd36fc]        # 0x1001e20
 102e724:	mov    QWORD PTR [rbp-0x61],rax
 102e728:	mov    QWORD PTR [rbp-0x49],r13
 102e72c:	mov    QWORD PTR [rbp-0x41],r13
 102e730:	mov    QWORD PTR [rbp-0x51],r13
 102e734:	mov    QWORD PTR [rbp-0x59],r13
 102e738:	mov    QWORD PTR [rbp-0x39],r13
 102e73c:	mov    QWORD PTR [rbp-0x31],0xa
 102e744:	mov    QWORD PTR [rsp+0x20],rax
 102e749:	mov    QWORD PTR [rsp+0x38],r13
 102e74e:	mov    QWORD PTR [rbp-0x79],r13
 102e752:	mov    QWORD PTR [rsp+0x30],r13
 102e757:	mov    QWORD PTR [rsp+0x28],r13
 102e75c:	mov    QWORD PTR [rbp-0x71],r13
 102e760:	mov    QWORD PTR [rbp-0x69],0xa
 102e768:	lea    rcx,[rbp-0x29]
 102e76c:	call   0x1012a20
 102e771:	mov    rbx,QWORD PTR [rbp-0x59]
 102e775:	test   rbx,rbx
 102e778:	je     0x102e792
 102e77a:	nop    WORD PTR [rax+rax*1+0x0]
 102e780:	lea    rcx,[rbx+0x10]
 102e784:	call   QWORD PTR [rip+0xfffffffffffd331e]        # 0x1001aa8
 102e78a:	mov    rbx,QWORD PTR [rbx]
 102e78d:	test   rbx,rbx
 102e790:	jne    0x102e780
 102e792:	mov    QWORD PTR [rbp-0x49],r13
 102e796:	mov    QWORD PTR [rbp-0x41],r13
 102e79a:	mov    QWORD PTR [rbp-0x51],r13
 102e79e:	mov    QWORD PTR [rbp-0x59],r13
 102e7a2:	mov    rcx,QWORD PTR [rbp-0x39]
 102e7a6:	call   0x103f9ae
 102e7ab:	mov    QWORD PTR [rbp-0x39],r13
 102e7af:	mov    rbx,QWORD PTR [rsp+0x28]
 102e7b4:	test   rbx,rbx
 102e7b7:	je     0x102e7d2
 102e7b9:	nop    DWORD PTR [rax+0x0]
 102e7c0:	lea    rcx,[rbx+0x10]
 102e7c4:	call   QWORD PTR [rip+0xfffffffffffd32de]        # 0x1001aa8
 102e7ca:	mov    rbx,QWORD PTR [rbx]
 102e7cd:	test   rbx,rbx
 102e7d0:	jne    0x102e7c0
 102e7d2:	mov    QWORD PTR [rsp+0x38],r13
 102e7d7:	mov    QWORD PTR [rbp-0x79],r13
 102e7db:	mov    QWORD PTR [rsp+0x30],r13
 102e7e0:	mov    QWORD PTR [rsp+0x28],r13
 102e7e5:	mov    rcx,QWORD PTR [rbp-0x71]
 102e7e9:	call   0x103f9ae
 102e7ee:	mov    QWORD PTR [rbp-0x71],r13
 102e7f2:	mov    rcx,r15
 102e7f5:	call   QWORD PTR [rip+0xfffffffffffd32ed]        # 0x1001ae8
 102e7fb:	mov    rcx,rax
 102e7fe:	call   0x10325f0
 102e803:	movzx  r14d,al
 102e807:	mov    rcx,r15
 102e80a:	call   QWORD PTR [rip+0xfffffffffffd32d8]        # 0x1001ae8
 102e810:	mov    rcx,rax
 102e813:	lea    r8,[rbp-0x29]
 102e817:	lea    rdx,[rbp-0x61]
 102e81b:	call   0x1032290
 102e820:	mov    r11,QWORD PTR [rbp-0x11]
 102e824:	neg    r11
 102e827:	sbb    rdi,rdi
 102e82a:	je     0x102e9d0
 102e830:	lea    rcx,[rbp+0x7f]
 102e834:	call   QWORD PTR [rip+0xfffffffffffd3286]        # 0x1001ac0
 102e83a:	nop
 102e83b:	lea    rcx,[rbp+0x77]
 102e83f:	call   QWORD PTR [rip+0xfffffffffffd327b]        # 0x1001ac0
 102e845:	nop
 102e846:	mov    eax,r13d
 102e849:	mov    r9,QWORD PTR [rbp-0x21]
 102e84d:	test   r9,r9
 102e850:	setne  al
 102e853:	test   eax,eax
 102e855:	je     0x102e9ca
 102e85b:	mov    rbx,rdi
 102e85e:	mov    eax,r13d
 102e861:	test   rdi,rdi
 102e864:	setne  al
 102e867:	test   eax,eax
 102e869:	je     0x102e9c4
 102e86f:	mov    r8d,DWORD PTR [rbp-0x19]
 102e873:	cmp    rdi,0xffffffffffffffff
 102e877:	jne    0x102e8a8
 102e879:	mov    ecx,r13d
 102e87c:	test   r8d,r8d
 102e87f:	je     0x102e897
 102e881:	mov    rax,r9
 102e884:	mov    rbx,QWORD PTR [rax]
 102e887:	test   rbx,rbx
 102e88a:	jne    0x102e897
 102e88c:	inc    ecx
 102e88e:	add    rax,0x8
 102e892:	cmp    ecx,r8d
 102e895:	jb     0x102e884
 102e897:	mov    eax,r13d
 102e89a:	test   rbx,rbx
 102e89d:	setne  al
 102e8a0:	test   eax,eax
 102e8a2:	je     0x102e9b8
 102e8a8:	mov    rdi,QWORD PTR [rbx+0x10]
 102e8ac:	test   rdi,rdi
 102e8af:	jne    0x102e8da
 102e8b1:	xor    edx,edx
 102e8b3:	mov    eax,DWORD PTR [rbx+0x18]
 102e8b6:	div    r8d
 102e8b9:	inc    edx
 102e8bb:	movsxd rax,edx
 102e8be:	cmp    edx,r8d
 102e8c1:	jae    0x102e8da
 102e8c3:	lea    rax,[r9+rax*8]
 102e8c7:	mov    rdi,QWORD PTR [rax]
 102e8ca:	test   rdi,rdi
 102e8cd:	jne    0x102e8da
 102e8cf:	inc    edx
 102e8d1:	add    rax,0x8
 102e8d5:	cmp    edx,r8d
 102e8d8:	jb     0x102e8c7
 102e8da:	mov    rdx,rbx
 102e8dd:	lea    rcx,[rbp+0x7f]
 102e8e1:	call   QWORD PTR [rip+0xfffffffffffd31b9]        # 0x1001aa0
 102e8e7:	lea    rdx,[rbx+0x8]
 102e8eb:	lea    rcx,[rbp+0x77]
 102e8ef:	call   QWORD PTR [rip+0xfffffffffffd31ab]        # 0x1001aa0
 102e8f5:	mov    rsi,QWORD PTR [rsp+0x30]
 102e8fa:	mov    rbx,QWORD PTR [rbp-0x79]
 102e8fe:	test   rbx,rbx
 102e901:	jne    0x102e943
 102e903:	lea    r8d,[rbx+0x18]
 102e907:	mov    rdx,QWORD PTR [rbp-0x69]
 102e90b:	lea    rcx,[rbp-0x71]
 102e90f:	call   0x103f9a2
 102e914:	mov    rdx,QWORD PTR [rbp-0x69]
 102e918:	lea    r8,[rdx-0x1]
 102e91c:	lea    r8,[rdx+r8*2]
 102e920:	lea    r8,[rax+r8*8]
 102e924:	mov    rbx,QWORD PTR [rbp-0x79]
 102e928:	dec    rdx
 102e92b:	js     0x102e943
 102e92d:	nop    DWORD PTR [rax]
 102e930:	mov    QWORD PTR [r8],rbx
 102e933:	mov    rbx,r8
 102e936:	mov    QWORD PTR [rbp-0x79],rbx
 102e93a:	sub    r8,0x18
 102e93e:	dec    rdx
 102e941:	jns    0x102e930
 102e943:	mov    eax,r13d
 102e946:	test   rbx,rbx
 102e949:	setne  al
 102e94c:	test   eax,eax
 102e94e:	je     0x102e9be
 102e950:	mov    rax,QWORD PTR [rbx]
 102e953:	mov    QWORD PTR [rbp-0x79],rax
 102e957:	mov    QWORD PTR [rbx+0x8],rsi
 102e95b:	mov    QWORD PTR [rbx],r13
 102e95e:	inc    QWORD PTR [rsp+0x38]
 102e963:	lea    rsi,[rbx+0x10]
 102e967:	test   rsi,rsi
 102e96a:	je     0x102e975
 102e96c:	mov    rcx,rsi
 102e96f:	call   QWORD PTR [rip+0xfffffffffffd314b]        # 0x1001ac0
 102e975:	lea    rdx,[rbp+0x77]
 102e979:	mov    rcx,rsi
 102e97c:	call   QWORD PTR [rip+0xfffffffffffd311e]        # 0x1001aa0
 102e982:	mov    r11,QWORD PTR [rsp+0x30]
 102e987:	test   r11,r11
 102e98a:	je     0x102e991
 102e98c:	mov    QWORD PTR [r11],rbx
 102e98f:	jmp    0x102e996
 102e991:	mov    QWORD PTR [rsp+0x28],rbx
 102e996:	mov    QWORD PTR [rsp+0x30],rbx
 102e99b:	lea    rcx,[rbp+0x77]
 102e99f:	call   QWORD PTR [rip+0xfffffffffffd3103]        # 0x1001aa8
 102e9a5:	nop
 102e9a6:	lea    rcx,[rbp+0x7f]
 102e9aa:	call   QWORD PTR [rip+0xfffffffffffd30f8]        # 0x1001aa8
 102e9b0:	test   rdi,rdi
 102e9b3:	jmp    0x102e82a
 102e9b8:	call   0x103f972
 102e9bd:	int3   
 102e9be:	call   0x103f972
 102e9c3:	int3   
 102e9c4:	call   0x103f972
 102e9c9:	int3   
 102e9ca:	call   0x103f972
 102e9cf:	nop
 102e9d0:	test   r14b,r14b
 102e9d3:	je     0x102eb9e
 102e9d9:	mov    rcx,r12
 102e9dc:	call   QWORD PTR [rip+0xfffffffffffd2f7e]        # 0x1001960
 102e9e2:	mov    rsi,rax
 102e9e5:	mov    rbx,QWORD PTR [rsp+0x28]
 102e9ea:	test   rbx,rbx
 102e9ed:	je     0x102eae9
 102e9f3:	lea    rdi,[rbx+0x10]
 102e9f7:	test   rdi,rdi
 102e9fa:	je     0x102eae3
 102ea00:	test   rsi,rsi
 102ea03:	je     0x102eae3
 102ea09:	mov    rcx,rsi
 102ea0c:	call   QWORD PTR [rip+0xfffffffffffd30d6]        # 0x1001ae8
 102ea12:	mov    rdx,rax
 102ea15:	mov    rcx,rdi
 102ea18:	call   QWORD PTR [rip+0xfffffffffffd2fe2]        # 0x1001a00
 102ea1e:	mov    ecx,r13d
 102ea21:	test   eax,eax
 102ea23:	sete   cl
 102ea26:	test   ecx,ecx
 102ea28:	jne    0x102ea2f
 102ea2a:	mov    rbx,QWORD PTR [rbx]
 102ea2d:	jmp    0x102e9ea
 102ea2f:	test   rbx,rbx
 102ea32:	je     0x102eae9
 102ea38:	lea    rdi,[rip+0xfffffffffffd33e1]        # 0x1001e20
 102ea3f:	mov    QWORD PTR [rsp+0x20],rdi
 102ea44:	mov    rbx,QWORD PTR [rsp+0x28]
 102ea49:	test   rbx,rbx
 102ea4c:	je     0x102ea62
 102ea4e:	xchg   ax,ax
 102ea50:	lea    rcx,[rbx+0x10]
 102ea54:	call   QWORD PTR [rip+0xfffffffffffd304e]        # 0x1001aa8
 102ea5a:	mov    rbx,QWORD PTR [rbx]
 102ea5d:	test   rbx,rbx
 102ea60:	jne    0x102ea50
 102ea62:	mov    QWORD PTR [rsp+0x38],r13
 102ea67:	mov    QWORD PTR [rbp-0x79],r13
 102ea6b:	mov    QWORD PTR [rsp+0x30],r13
 102ea70:	mov    QWORD PTR [rsp+0x28],r13
 102ea75:	mov    rcx,QWORD PTR [rbp-0x71]
 102ea79:	call   0x103f9ae
 102ea7e:	mov    QWORD PTR [rbp-0x71],r13
 102ea82:	mov    QWORD PTR [rbp-0x61],rdi
 102ea86:	mov    rbx,QWORD PTR [rbp-0x59]
 102ea8a:	test   rbx,rbx
 102ea8d:	je     0x102eaa2
 102ea8f:	nop
 102ea90:	lea    rcx,[rbx+0x10]
 102ea94:	call   QWORD PTR [rip+0xfffffffffffd300e]        # 0x1001aa8
 102ea9a:	mov    rbx,QWORD PTR [rbx]
 102ea9d:	test   rbx,rbx
 102eaa0:	jne    0x102ea90
 102eaa2:	mov    QWORD PTR [rbp-0x49],r13
 102eaa6:	mov    QWORD PTR [rbp-0x41],r13
 102eaaa:	mov    QWORD PTR [rbp-0x51],r13
 102eaae:	mov    QWORD PTR [rbp-0x59],r13
 102eab2:	mov    rcx,QWORD PTR [rbp-0x39]
 102eab6:	call   0x103f9ae
 102eabb:	mov    QWORD PTR [rbp-0x39],r13
 102eabf:	lea    rax,[rip+0xfffffffffffd3f7a]        # 0x1002a40
 102eac6:	mov    QWORD PTR [rbp-0x29],rax
 102eaca:	lea    rcx,[rbp-0x29]
 102eace:	call   0x1012a20
 102ead3:	nop
 102ead4:	mov    rcx,r15
 102ead7:	call   QWORD PTR [rip+0xfffffffffffd2fcb]        # 0x1001aa8
 102eadd:	nop
 102eade:	jmp    0x102eebe
 102eae3:	call   0x103f972
 102eae8:	nop
 102eae9:	lea    rdi,[rip+0xfffffffffffd3330]        # 0x1001e20
 102eaf0:	mov    QWORD PTR [rsp+0x20],rdi
 102eaf5:	mov    rbx,QWORD PTR [rsp+0x28]
 102eafa:	test   rbx,rbx
 102eafd:	je     0x102eb12
 102eaff:	nop
 102eb00:	lea    rcx,[rbx+0x10]
 102eb04:	call   QWORD PTR [rip+0xfffffffffffd2f9e]        # 0x1001aa8
 102eb0a:	mov    rbx,QWORD PTR [rbx]
 102eb0d:	test   rbx,rbx
 102eb10:	jne    0x102eb00
 102eb12:	mov    QWORD PTR [rsp+0x38],r13
 102eb17:	mov    QWORD PTR [rbp-0x79],r13
 102eb1b:	mov    QWORD PTR [rsp+0x30],r13
 102eb20:	mov    QWORD PTR [rsp+0x28],r13
 102eb25:	mov    rcx,QWORD PTR [rbp-0x71]
 102eb29:	call   0x103f9ae
 102eb2e:	mov    QWORD PTR [rbp-0x71],r13
 102eb32:	mov    QWORD PTR [rbp-0x61],rdi
 102eb36:	mov    rbx,QWORD PTR [rbp-0x59]
 102eb3a:	test   rbx,rbx
 102eb3d:	je     0x102eb52
 102eb3f:	nop
 102eb40:	lea    rcx,[rbx+0x10]
 102eb44:	call   QWORD PTR [rip+0xfffffffffffd2f5e]        # 0x1001aa8
 102eb4a:	mov    rbx,QWORD PTR [rbx]
 102eb4d:	test   rbx,rbx
 102eb50:	jne    0x102eb40
 102eb52:	mov    QWORD PTR [rbp-0x49],r13
 102eb56:	mov    QWORD PTR [rbp-0x41],r13
 102eb5a:	mov    QWORD PTR [rbp-0x51],r13
 102eb5e:	mov    QWORD PTR [rbp-0x59],r13
 102eb62:	mov    rcx,QWORD PTR [rbp-0x39]
 102eb66:	call   0x103f9ae
 102eb6b:	mov    QWORD PTR [rbp-0x39],r13
 102eb6f:	lea    rax,[rip+0xfffffffffffd3eca]        # 0x1002a40
 102eb76:	mov    QWORD PTR [rbp-0x29],rax
 102eb7a:	lea    rcx,[rbp-0x29]
 102eb7e:	call   0x1012a20
 102eb83:	nop
 102eb84:	mov    rcx,r15
 102eb87:	call   QWORD PTR [rip+0xfffffffffffd2f1b]        # 0x1001aa8
 102eb8d:	nop
 102eb8e:	mov    rcx,r12
 102eb91:	call   QWORD PTR [rip+0xfffffffffffd2f11]        # 0x1001aa8
 102eb97:	mov    al,0x1
 102eb99:	jmp    0x102eec9
 102eb9e:	mov    rcx,r15
 102eba1:	call   QWORD PTR [rip+0xfffffffffffd2db9]        # 0x1001960
 102eba7:	mov    rsi,rax
 102ebaa:	mov    rbx,QWORD PTR [rbp-0x59]
 102ebae:	test   rbx,rbx
 102ebb1:	je     0x102ee15
 102ebb7:	lea    rdi,[rbx+0x10]
 102ebbb:	test   rdi,rdi
 102ebbe:	je     0x102ee0f
 102ebc4:	test   rsi,rsi
 102ebc7:	je     0x102ee0f
 102ebcd:	mov    rcx,rsi
 102ebd0:	call   QWORD PTR [rip+0xfffffffffffd2f12]        # 0x1001ae8
 102ebd6:	mov    rdx,rax
 102ebd9:	mov    rcx,rdi
 102ebdc:	call   QWORD PTR [rip+0xfffffffffffd2e1e]        # 0x1001a00
 102ebe2:	mov    ecx,r13d
 102ebe5:	test   eax,eax
 102ebe7:	sete   cl
 102ebea:	test   ecx,ecx
 102ebec:	jne    0x102ebf3
 102ebee:	mov    rbx,QWORD PTR [rbx]
 102ebf1:	jmp    0x102ebae
 102ebf3:	test   rbx,rbx
 102ebf6:	je     0x102ee15
 102ebfc:	lea    rcx,[rbp+0x77]
 102ec00:	call   QWORD PTR [rip+0xfffffffffffd2eba]        # 0x1001ac0
 102ec06:	nop
 102ec07:	mov    rcx,r15
 102ec0a:	call   QWORD PTR [rip+0xfffffffffffd2ed8]        # 0x1001ae8
 102ec10:	mov    rsi,rax
 102ec13:	mov    rcx,rax
 102ec16:	call   0x103fa26
 102ec1b:	mov    edi,eax
 102ec1d:	xor    edx,edx
 102ec1f:	div    DWORD PTR [rbp-0x19]
 102ec22:	mov    rbx,QWORD PTR [rbp-0x21]
 102ec26:	test   rbx,rbx
 102ec29:	je     0x102ee03
 102ec2f:	mov    rbx,QWORD PTR [rbx+rdx*8]
 102ec33:	test   rbx,rbx
 102ec36:	je     0x102ee03
 102ec3c:	cmp    DWORD PTR [rbx+0x18],edi
 102ec3f:	jne    0x102ec59
 102ec41:	mov    rdx,rsi
 102ec44:	mov    rcx,rbx
 102ec47:	call   QWORD PTR [rip+0xfffffffffffd2db3]        # 0x1001a00
 102ec4d:	mov    ecx,r13d
 102ec50:	test   eax,eax
 102ec52:	sete   cl
 102ec55:	test   ecx,ecx
 102ec57:	jne    0x102ec5f
 102ec59:	mov    rbx,QWORD PTR [rbx+0x10]
 102ec5d:	jmp    0x102ec33
 102ec5f:	lea    rdx,[rbx+0x8]
 102ec63:	lea    rcx,[rbp+0x77]
 102ec67:	call   QWORD PTR [rip+0xfffffffffffd2e33]        # 0x1001aa0
 102ec6d:	mov    rcx,r12
 102ec70:	call   QWORD PTR [rip+0xfffffffffffd2e72]        # 0x1001ae8
 102ec76:	mov    rdx,rax
 102ec79:	lea    rcx,[rbp+0x77]
 102ec7d:	call   QWORD PTR [rip+0xfffffffffffd2ddd]        # 0x1001a60
 102ec83:	test   eax,eax
 102ec85:	jne    0x102ed4e
 102ec8b:	lea    rcx,[rbp+0x77]
 102ec8f:	call   QWORD PTR [rip+0xfffffffffffd2e13]        # 0x1001aa8
 102ec95:	nop
 102ec96:	lea    rdi,[rip+0xfffffffffffd3183]        # 0x1001e20
 102ec9d:	mov    QWORD PTR [rsp+0x20],rdi
 102eca2:	mov    rbx,QWORD PTR [rsp+0x28]
 102eca7:	test   rbx,rbx
 102ecaa:	je     0x102ecc2
 102ecac:	nop    DWORD PTR [rax+0x0]
 102ecb0:	lea    rcx,[rbx+0x10]
 102ecb4:	call   QWORD PTR [rip+0xfffffffffffd2dee]        # 0x1001aa8
 102ecba:	mov    rbx,QWORD PTR [rbx]
 102ecbd:	test   rbx,rbx
 102ecc0:	jne    0x102ecb0
 102ecc2:	mov    QWORD PTR [rsp+0x38],r13
 102ecc7:	mov    QWORD PTR [rbp-0x79],r13
 102eccb:	mov    QWORD PTR [rsp+0x30],r13
 102ecd0:	mov    QWORD PTR [rsp+0x28],r13
 102ecd5:	mov    rcx,QWORD PTR [rbp-0x71]
 102ecd9:	call   0x103f9ae
 102ecde:	mov    QWORD PTR [rbp-0x71],r13
 102ece2:	mov    QWORD PTR [rbp-0x61],rdi
 102ece6:	mov    rbx,QWORD PTR [rbp-0x59]
 102ecea:	test   rbx,rbx
 102eced:	je     0x102ed02
 102ecef:	nop
 102ecf0:	lea    rcx,[rbx+0x10]
 102ecf4:	call   QWORD PTR [rip+0xfffffffffffd2dae]        # 0x1001aa8
 102ecfa:	mov    rbx,QWORD PTR [rbx]
 102ecfd:	test   rbx,rbx
 102ed00:	jne    0x102ecf0
 102ed02:	mov    QWORD PTR [rbp-0x49],r13
 102ed06:	mov    QWORD PTR [rbp-0x41],r13
 102ed0a:	mov    QWORD PTR [rbp-0x51],r13
 102ed0e:	mov    QWORD PTR [rbp-0x59],r13
 102ed12:	mov    rcx,QWORD PTR [rbp-0x39]
 102ed16:	call   0x103f9ae
 102ed1b:	mov    QWORD PTR [rbp-0x39],r13
 102ed1f:	lea    rax,[rip+0xfffffffffffd3d1a]        # 0x1002a40
 102ed26:	mov    QWORD PTR [rbp-0x29],rax
 102ed2a:	lea    rcx,[rbp-0x29]
 102ed2e:	call   0x1012a20
 102ed33:	nop
 102ed34:	mov    rcx,r15
 102ed37:	call   QWORD PTR [rip+0xfffffffffffd2d6b]        # 0x1001aa8
 102ed3d:	nop
 102ed3e:	mov    rcx,r12
 102ed41:	call   QWORD PTR [rip+0xfffffffffffd2d61]        # 0x1001aa8
 102ed47:	mov    al,0x1
 102ed49:	jmp    0x102eec9
 102ed4e:	lea    rcx,[rbp+0x77]
 102ed52:	call   QWORD PTR [rip+0xfffffffffffd2d50]        # 0x1001aa8
 102ed58:	nop
 102ed59:	lea    rdi,[rip+0xfffffffffffd30c0]        # 0x1001e20
 102ed60:	mov    QWORD PTR [rsp+0x20],rdi
 102ed65:	mov    rbx,QWORD PTR [rsp+0x28]
 102ed6a:	test   rbx,rbx
 102ed6d:	je     0x102ed82
 102ed6f:	nop
 102ed70:	lea    rcx,[rbx+0x10]
 102ed74:	call   QWORD PTR [rip+0xfffffffffffd2d2e]        # 0x1001aa8
 102ed7a:	mov    rbx,QWORD PTR [rbx]
 102ed7d:	test   rbx,rbx
 102ed80:	jne    0x102ed70
 102ed82:	mov    QWORD PTR [rsp+0x38],r13
 102ed87:	mov    QWORD PTR [rbp-0x79],r13
 102ed8b:	mov    QWORD PTR [rsp+0x30],r13
 102ed90:	mov    QWORD PTR [rsp+0x28],r13
 102ed95:	mov    rcx,QWORD PTR [rbp-0x71]
 102ed99:	call   0x103f9ae
 102ed9e:	mov    QWORD PTR [rbp-0x71],r13
 102eda2:	mov    QWORD PTR [rbp-0x61],rdi
 102eda6:	mov    rbx,QWORD PTR [rbp-0x59]
 102edaa:	test   rbx,rbx
 102edad:	je     0x102edc2
 102edaf:	nop
 102edb0:	lea    rcx,[rbx+0x10]
 102edb4:	call   QWORD PTR [rip+0xfffffffffffd2cee]        # 0x1001aa8
 102edba:	mov    rbx,QWORD PTR [rbx]
 102edbd:	test   rbx,rbx
 102edc0:	jne    0x102edb0
 102edc2:	mov    QWORD PTR [rbp-0x49],r13
 102edc6:	mov    QWORD PTR [rbp-0x41],r13
 102edca:	mov    QWORD PTR [rbp-0x51],r13
 102edce:	mov    QWORD PTR [rbp-0x59],r13
 102edd2:	mov    rcx,QWORD PTR [rbp-0x39]
 102edd6:	call   0x103f9ae
 102eddb:	mov    QWORD PTR [rbp-0x39],r13
 102eddf:	lea    rax,[rip+0xfffffffffffd3c5a]        # 0x1002a40
 102ede6:	mov    QWORD PTR [rbp-0x29],rax
 102edea:	lea    rcx,[rbp-0x29]
 102edee:	call   0x1012a20
 102edf3:	nop
 102edf4:	mov    rcx,r15
 102edf7:	call   QWORD PTR [rip+0xfffffffffffd2cab]        # 0x1001aa8
 102edfd:	nop
 102edfe:	jmp    0x102eebe
 102ee03:	lea    rcx,[rbp+0x77]
 102ee07:	call   QWORD PTR [rip+0xfffffffffffd2c9b]        # 0x1001aa8
 102ee0d:	jmp    0x102ee15
 102ee0f:	call   0x103f972
 102ee14:	nop
 102ee15:	lea    rdi,[rip+0xfffffffffffd3004]        # 0x1001e20
 102ee1c:	mov    QWORD PTR [rsp+0x20],rdi
 102ee21:	mov    rbx,QWORD PTR [rsp+0x28]
 102ee26:	test   rbx,rbx
 102ee29:	je     0x102ee42
 102ee2b:	nop    DWORD PTR [rax+rax*1+0x0]
 102ee30:	lea    rcx,[rbx+0x10]
 102ee34:	call   QWORD PTR [rip+0xfffffffffffd2c6e]        # 0x1001aa8
 102ee3a:	mov    rbx,QWORD PTR [rbx]
 102ee3d:	test   rbx,rbx
 102ee40:	jne    0x102ee30
 102ee42:	mov    QWORD PTR [rsp+0x38],r13
 102ee47:	mov    QWORD PTR [rbp-0x79],r13
 102ee4b:	mov    QWORD PTR [rsp+0x30],r13
 102ee50:	mov    QWORD PTR [rsp+0x28],r13
 102ee55:	mov    rcx,QWORD PTR [rbp-0x71]
 102ee59:	call   0x103f9ae
 102ee5e:	mov    QWORD PTR [rbp-0x71],r13
 102ee62:	mov    QWORD PTR [rbp-0x61],rdi
 102ee66:	mov    rbx,QWORD PTR [rbp-0x59]
 102ee6a:	test   rbx,rbx
 102ee6d:	je     0x102ee82
 102ee6f:	nop
 102ee70:	lea    rcx,[rbx+0x10]
 102ee74:	call   QWORD PTR [rip+0xfffffffffffd2c2e]        # 0x1001aa8
 102ee7a:	mov    rbx,QWORD PTR [rbx]
 102ee7d:	test   rbx,rbx
 102ee80:	jne    0x102ee70
 102ee82:	mov    QWORD PTR [rbp-0x49],r13
 102ee86:	mov    QWORD PTR [rbp-0x41],r13
 102ee8a:	mov    QWORD PTR [rbp-0x51],r13
 102ee8e:	mov    QWORD PTR [rbp-0x59],r13
 102ee92:	mov    rcx,QWORD PTR [rbp-0x39]
 102ee96:	call   0x103f9ae
 102ee9b:	mov    QWORD PTR [rbp-0x39],r13
 102ee9f:	lea    rax,[rip+0xfffffffffffd3b9a]        # 0x1002a40
 102eea6:	mov    QWORD PTR [rbp-0x29],rax
 102eeaa:	lea    rcx,[rbp-0x29]
 102eeae:	call   0x1012a20
 102eeb3:	nop
 102eeb4:	mov    rcx,r15
 102eeb7:	call   QWORD PTR [rip+0xfffffffffffd2beb]        # 0x1001aa8
 102eebd:	nop
 102eebe:	mov    rcx,r12
 102eec1:	call   QWORD PTR [rip+0xfffffffffffd2be1]        # 0x1001aa8
 102eec7:	xor    al,al
 102eec9:	add    rsp,0xd8
 102eed0:	pop    r15
 102eed2:	pop    r14
 102eed4:	pop    r13
 102eed6:	pop    r12
 102eed8:	pop    rdi
 102eed9:	pop    rsi
 102eeda:	pop    rbx
 102eedb:	pop    rbp
 102eedc:	ret    
 102eedd:	int3   
 102eede:	int3   
 102eedf:	int3   
 102eee0:	int3   
 102eee1:	int3   
 102eee2:	int3   
 102eee3:	int3   
 102eee4:	int3   
 102eee5:	int3   
 102eee6:	int3   
 102eee7:	int3   
 102eee8:	int3   
 102eee9:	int3   
 102eeea:	int3   
 102eeeb:	int3   
 102eeec:	int3   
 102eeed:	int3   
 102eeee:	int3   
 102eeef:	int3   
 102eef0:	mov    QWORD PTR [rsp+0x8],rcx
 102eef5:	push   rbp
 102eef6:	push   rsi
 102eef7:	push   rdi
 102eef8:	push   r12
 102eefa:	push   r13
 102eefc:	push   r14
 102eefe:	push   r15
 102ef00:	mov    rbp,rsp
 102ef03:	sub    rsp,0x60
 102ef07:	mov    QWORD PTR [rbp-0x10],0xfffffffffffffffe
 102ef0f:	mov    QWORD PTR [rsp+0xa8],rbx
 102ef17:	movzx  ebx,r9b
 102ef1b:	mov    r14,r8
 102ef1e:	mov    r15,rdx
 102ef21:	mov    rsi,rcx
 102ef24:	lea    rdx,[rip+0xfffffffffffd2ee5]        # 0x1001e10
 102ef2b:	lea    rcx,[rbp-0x28]
 102ef2f:	call   QWORD PTR [rip+0xfffffffffffd2b7b]        # 0x1001ab0
 102ef35:	nop
 102ef36:	test   bl,bl
 102ef38:	je     0x102ef96
 102ef3a:	lea    rax,[rbp-0x30]
 102ef3e:	mov    QWORD PTR [rbp-0x18],rax
 102ef42:	lea    rax,[rbp-0x20]
 102ef46:	mov    QWORD PTR [rbp-0x8],rax
 102ef4a:	lea    rdx,[rip+0xfffffffffffd6fd7]        # 0x1005f28
 102ef51:	lea    rcx,[rbp-0x30]
 102ef55:	call   QWORD PTR [rip+0xfffffffffffd2b55]        # 0x1001ab0
 102ef5b:	mov    rbx,rax
 102ef5e:	mov    rdx,rsi
 102ef61:	lea    rcx,[rbp-0x20]
 102ef65:	call   QWORD PTR [rip+0xfffffffffffd2a4d]        # 0x10019b8
 102ef6b:	nop
 102ef6c:	mov    rdx,rbx
 102ef6f:	mov    rcx,rax
 102ef72:	call   0x102e6c0
 102ef77:	test   al,al
 102ef79:	jne    0x102ef96
 102ef7b:	lea    rcx,[rbp-0x28]
 102ef7f:	call   QWORD PTR [rip+0xfffffffffffd2b23]        # 0x1001aa8
 102ef85:	nop
 102ef86:	mov    rcx,rsi
 102ef89:	call   QWORD PTR [rip+0xfffffffffffd2b19]        # 0x1001aa8
 102ef8f:	xor    al,al
 102ef91:	jmp    0x102f111
 102ef96:	lea    rbx,[rip+0x3431b]        # 0x10632b8
 102ef9d:	lea    r13,[rip+0xfffffffffffd41d4]        # 0x1003178
 102efa4:	lea    r12,[rip+0x3436d]        # 0x1063318
 102efab:	nop    DWORD PTR [rax+rax*1+0x0]
 102efb0:	mov    rdx,QWORD PTR [rbx]
 102efb3:	lea    rcx,[rbp-0x30]
 102efb7:	call   QWORD PTR [rip+0xfffffffffffd2af3]        # 0x1001ab0
 102efbd:	nop
 102efbe:	lea    r8,[rbp-0x30]
 102efc2:	lea    rdx,[rip+0xfffffffffffd6e37]        # 0x1005e00
 102efc9:	lea    rcx,[rbp-0x18]
 102efcd:	call   0x1013d70
 102efd2:	nop
 102efd3:	mov    rcx,rax
 102efd6:	call   QWORD PTR [rip+0xfffffffffffd2b0c]        # 0x1001ae8
 102efdc:	mov    rdi,rax
 102efdf:	mov    rcx,rsi
 102efe2:	call   QWORD PTR [rip+0xfffffffffffd2b00]        # 0x1001ae8
 102efe8:	mov    rdx,rax
 102efeb:	mov    QWORD PTR [rsp+0x28],r14
 102eff0:	mov    QWORD PTR [rsp+0x20],r13
 102eff5:	mov    r9,rdi
 102eff8:	mov    r8,0xffffffff80000002
 102efff:	lea    rcx,[rbp-0x20]
 102f003:	call   0x1033f20
 102f008:	nop
 102f009:	mov    rdx,rax
 102f00c:	lea    rcx,[rbp-0x28]
 102f010:	call   QWORD PTR [rip+0xfffffffffffd2a8a]        # 0x1001aa0
 102f016:	nop
 102f017:	lea    rcx,[rbp-0x20]
 102f01b:	call   QWORD PTR [rip+0xfffffffffffd2a87]        # 0x1001aa8
 102f021:	nop
 102f022:	lea    rcx,[rbp-0x18]
 102f026:	call   QWORD PTR [rip+0xfffffffffffd2a7c]        # 0x1001aa8
 102f02c:	lea    rcx,[rbp-0x28]
 102f030:	call   QWORD PTR [rip+0xfffffffffffd2aba]        # 0x1001af0
 102f036:	test   eax,eax
 102f038:	jne    0x102f053
 102f03a:	lea    rcx,[rbp-0x30]
 102f03e:	call   QWORD PTR [rip+0xfffffffffffd2a64]        # 0x1001aa8
 102f044:	add    rbx,0x20
 102f048:	cmp    rbx,r12
 102f04b:	jl     0x102efb0
 102f051:	jmp    0x102f05d
 102f053:	lea    rcx,[rbp-0x30]
 102f057:	call   QWORD PTR [rip+0xfffffffffffd2a4b]        # 0x1001aa8
 102f05d:	lea    rcx,[rbp-0x28]
 102f061:	call   QWORD PTR [rip+0xfffffffffffd2a89]        # 0x1001af0
 102f067:	test   eax,eax
 102f069:	je     0x102f0c7
 102f06b:	lea    r8,[rbp-0x28]
 102f06f:	lea    rdx,[rip+0xfffffffffffd6dfa]        # 0x1005e70
 102f076:	lea    rcx,[rbp-0x18]
 102f07a:	call   0x1013d70
 102f07f:	nop
 102f080:	mov    rcx,rax
 102f083:	call   QWORD PTR [rip+0xfffffffffffd2a5f]        # 0x1001ae8
 102f089:	mov    rbx,rax
 102f08c:	mov    rcx,rsi
 102f08f:	call   QWORD PTR [rip+0xfffffffffffd2a53]        # 0x1001ae8
 102f095:	mov    rcx,rax
 102f098:	lea    rax,[rbp+0x58]
 102f09c:	mov    QWORD PTR [rsp+0x28],rax
 102f0a1:	lea    rax,[rbp-0x30]
 102f0a5:	mov    QWORD PTR [rsp+0x20],rax
 102f0aa:	mov    r9,r15
 102f0ad:	mov    r8,r14
 102f0b0:	mov    rdx,rbx
 102f0b3:	call   0x102cff0
 102f0b8:	movzx  ebx,al
 102f0bb:	lea    rcx,[rbp-0x18]
 102f0bf:	call   QWORD PTR [rip+0xfffffffffffd29e3]        # 0x1001aa8
 102f0c5:	jmp    0x102f0fa
 102f0c7:	mov    rcx,rsi
 102f0ca:	call   QWORD PTR [rip+0xfffffffffffd2a18]        # 0x1001ae8
 102f0d0:	mov    rcx,rax
 102f0d3:	lea    rax,[rbp+0x58]
 102f0d7:	mov    QWORD PTR [rsp+0x28],rax
 102f0dc:	lea    rax,[rbp-0x30]
 102f0e0:	mov    QWORD PTR [rsp+0x20],rax
 102f0e5:	mov    r9,r15
 102f0e8:	mov    r8,r14
 102f0eb:	lea    rdx,[rip+0xfffffffffffd6dd6]        # 0x1005ec8
 102f0f2:	call   0x102cff0
 102f0f7:	movzx  ebx,al
 102f0fa:	lea    rcx,[rbp-0x28]
 102f0fe:	call   QWORD PTR [rip+0xfffffffffffd29a4]        # 0x1001aa8
 102f104:	nop
 102f105:	mov    rcx,rsi
 102f108:	call   QWORD PTR [rip+0xfffffffffffd299a]        # 0x1001aa8
 102f10e:	movzx  eax,bl
 102f111:	mov    rbx,QWORD PTR [rsp+0xa8]
 102f119:	add    rsp,0x60
 102f11d:	pop    r15
 102f11f:	pop    r14
 102f121:	pop    r13
 102f123:	pop    r12
 102f125:	pop    rdi
 102f126:	pop    rsi
 102f127:	pop    rbp
 102f128:	ret    
 102f129:	int3   
 102f12a:	int3   
 102f12b:	int3   
 102f12c:	int3   
 102f12d:	int3   
 102f12e:	int3   
 102f12f:	int3   
 102f130:	rex push rbp
 102f132:	push   rbx
 102f133:	push   rsi
 102f134:	push   rdi
 102f135:	push   r12
 102f137:	push   r13
 102f139:	push   r14
 102f13b:	push   r15
 102f13d:	lea    rbp,[rsp-0x1a8]
 102f145:	sub    rsp,0x2a8
 102f14c:	mov    QWORD PTR [rsp+0x68],0xfffffffffffffffe
 102f155:	mov    rax,QWORD PTR [rip+0x34714]        # 0x1063870
 102f15c:	xor    rax,rsp
 102f15f:	mov    QWORD PTR [rbp+0x190],rax
 102f166:	mov    rsi,r9
 102f169:	mov    r14d,r8d
 102f16c:	mov    r13,rdx
 102f16f:	mov    r12,rcx
 102f172:	mov    QWORD PTR [rsp+0x70],rcx
 102f177:	xor    r15d,r15d
 102f17a:	mov    QWORD PTR [rsp+0x58],r15
 102f17f:	mov    QWORD PTR [rsp+0x50],r15
 102f184:	mov    DWORD PTR [rsp+0x40],0x1
 102f18c:	mov    DWORD PTR [rsp+0x30],r15d
 102f191:	lea    rcx,[rsp+0x38]
 102f196:	call   QWORD PTR [rip+0xfffffffffffd2924]        # 0x1001ac0
 102f19c:	nop
 102f19d:	mov    edx,0xc000c4af
 102f1a2:	lea    rcx,[rsp+0x48]
 102f1a7:	call   0x10132d0
 102f1ac:	nop
 102f1ad:	mov    rcx,rax
 102f1b0:	call   QWORD PTR [rip+0xfffffffffffd2932]        # 0x1001ae8
 102f1b6:	mov    rdx,rax
 102f1b9:	lea    r8,[rip+0xfffffffffffd6cb0]        # 0x1005e70
 102f1c0:	lea    rcx,[rsp+0x38]
 102f1c5:	call   QWORD PTR [rip+0xfffffffffffd2875]        # 0x1001a40
 102f1cb:	nop
 102f1cc:	lea    rcx,[rsp+0x48]
 102f1d1:	call   QWORD PTR [rip+0xfffffffffffd28d1]        # 0x1001aa8
 102f1d7:	mov    rbx,QWORD PTR [rsi]
 102f1da:	mov    rcx,r12
 102f1dd:	call   QWORD PTR [rip+0xfffffffffffd2905]        # 0x1001ae8
 102f1e3:	mov    rcx,rax
 102f1e6:	lea    r8,[rsp+0x58]
 102f1eb:	mov    rdx,0xffffffff80000002
 102f1f2:	call   QWORD PTR [rip+0xfffffffffffd1e78]        # 0x1001070
 102f1f8:	mov    edx,eax
 102f1fa:	mov    r9b,0x1
 102f1fd:	mov    r8d,0xc000c356
 102f203:	mov    rcx,rsi
 102f206:	call   QWORD PTR [rbx+0x20]
 102f209:	test   al,al
 102f20b:	je     0x102f437
 102f211:	lea    rax,[rsp+0x48]
 102f216:	mov    QWORD PTR [rsp+0x60],rax
 102f21b:	lea    rdx,[rsp+0x38]
 102f220:	lea    rcx,[rsp+0x48]
 102f225:	call   QWORD PTR [rip+0xfffffffffffd278d]        # 0x10019b8
 102f22b:	mov    rdi,rax
 102f22e:	mov    rbx,QWORD PTR [rsi]
 102f231:	lea    rax,[rsp+0x50]
 102f236:	mov    QWORD PTR [rsp+0x20],rax
 102f23b:	mov    r9d,r14d
 102f23e:	xor    r8d,r8d
 102f241:	lea    rdx,[rip+0xfffffffffffd6c28]        # 0x1005e70
 102f248:	mov    rcx,QWORD PTR [rsp+0x58]
 102f24d:	call   QWORD PTR [rip+0xfffffffffffd1e2d]        # 0x1001080
 102f253:	mov    edx,eax
 102f255:	mov    r9b,0x1
 102f258:	mov    r8,rdi
 102f25b:	mov    rcx,rsi
 102f25e:	call   QWORD PTR [rbx+0x28]
 102f261:	test   al,al
 102f263:	je     0x102f437
 102f269:	lea    rax,[rsp+0x30]
 102f26e:	mov    QWORD PTR [rsp+0x28],rax
 102f273:	mov    QWORD PTR [rsp+0x20],r15
 102f278:	lea    r9,[rsp+0x40]
 102f27d:	xor    r8d,r8d
 102f280:	lea    rdx,[rip+0xfffffffffffd6cb9]        # 0x1005f40
 102f287:	mov    rcx,QWORD PTR [rsp+0x50]
 102f28c:	call   QWORD PTR [rip+0xfffffffffffd1df6]        # 0x1001088
 102f292:	test   eax,eax
 102f294:	jne    0x102f437
 102f29a:	mov    ebx,DWORD PTR [rsp+0x30]
 102f29e:	call   QWORD PTR [rip+0xfffffffffffd22b4]        # 0x1001558
 102f2a4:	mov    rcx,rax
 102f2a7:	lea    r8,[rbx+0x4]
 102f2ab:	lea    edx,[r15+0x8]
 102f2af:	call   QWORD PTR [rip+0xfffffffffffd22b3]        # 0x1001568
 102f2b5:	mov    r15,rax
 102f2b8:	test   rax,rax
 102f2bb:	jne    0x102f2ce
 102f2bd:	lea    rcx,[rsp+0x38]
 102f2c2:	call   QWORD PTR [rip+0xfffffffffffd27e0]        # 0x1001aa8
 102f2c8:	nop
 102f2c9:	jmp    0x102f458
 102f2ce:	lea    rax,[rsp+0x30]
 102f2d3:	mov    QWORD PTR [rsp+0x28],rax
 102f2d8:	mov    QWORD PTR [rsp+0x20],r15
 102f2dd:	lea    r9,[rsp+0x40]
 102f2e2:	xor    r8d,r8d
 102f2e5:	lea    rdx,[rip+0xfffffffffffd6c54]        # 0x1005f40
 102f2ec:	mov    rcx,QWORD PTR [rsp+0x50]
 102f2f1:	call   QWORD PTR [rip+0xfffffffffffd1d91]        # 0x1001088
 102f2f7:	test   eax,eax
 102f2f9:	je     0x102f30c
 102f2fb:	lea    rcx,[rsp+0x38]
 102f300:	call   QWORD PTR [rip+0xfffffffffffd27a2]        # 0x1001aa8
 102f306:	nop
 102f307:	jmp    0x102f458
 102f30c:	mov    eax,DWORD PTR [rsp+0x30]
 102f310:	shr    rax,1
 102f313:	xor    ecx,ecx
 102f315:	mov    WORD PTR [r15+rax*2],cx
 102f31a:	mov    eax,DWORD PTR [rsp+0x30]
 102f31e:	shr    rax,1
 102f321:	mov    WORD PTR [r15+rax*2+0x2],cx
 102f327:	mov    r14,r15
 102f32a:	cmp    WORD PTR [r15],cx
 102f32e:	je     0x102f423
 102f334:	mov    r9d,0x104
 102f33a:	mov    r8,r14
 102f33d:	lea    edx,[r9+0x1]
 102f341:	lea    rcx,[rbp-0x80]
 102f345:	call   QWORD PTR [rip+0xfffffffffffd235d]        # 0x10016a8
 102f34b:	lea    rdx,[rip+0xfffffffffffd6bd6]        # 0x1005f28
 102f352:	lea    rcx,[rbp-0x80]
 102f356:	call   QWORD PTR [rip+0xfffffffffffd2374]        # 0x10016d0
 102f35c:	test   eax,eax
 102f35e:	je     0x102f3fc
 102f364:	lea    rdx,[rbp-0x80]
 102f368:	lea    rcx,[rsp+0x48]
 102f36d:	call   QWORD PTR [rip+0xfffffffffffd273d]        # 0x1001ab0
 102f373:	mov    rsi,rax
 102f376:	mov    rbx,QWORD PTR [r13+0x8]
 102f37a:	test   rbx,rbx
 102f37d:	je     0x102f3be
 102f37f:	nop
 102f380:	lea    rdi,[rbx+0x10]
 102f384:	test   rdi,rdi
 102f387:	je     0x102f41d
 102f38d:	test   rsi,rsi
 102f390:	je     0x102f41d
 102f396:	mov    rcx,rsi
 102f399:	call   QWORD PTR [rip+0xfffffffffffd2749]        # 0x1001ae8
 102f39f:	mov    rdx,rax
 102f3a2:	mov    rcx,rdi
 102f3a5:	call   QWORD PTR [rip+0xfffffffffffd2655]        # 0x1001a00
 102f3ab:	xor    ecx,ecx
 102f3ad:	test   eax,eax
 102f3af:	sete   cl
 102f3b2:	test   ecx,ecx
 102f3b4:	jne    0x102f3c0
 102f3b6:	mov    rbx,QWORD PTR [rbx]
 102f3b9:	test   rbx,rbx
 102f3bc:	jne    0x102f380
 102f3be:	xor    ebx,ebx
 102f3c0:	test   rbx,rbx
 102f3c3:	sete   bl
 102f3c6:	lea    rcx,[rsp+0x48]
 102f3cb:	call   QWORD PTR [rip+0xfffffffffffd26d7]        # 0x1001aa8
 102f3d1:	test   bl,bl
 102f3d3:	je     0x102f3fc
 102f3d5:	lea    rdx,[rbp-0x80]
 102f3d9:	lea    rcx,[rsp+0x60]
 102f3de:	call   QWORD PTR [rip+0xfffffffffffd26cc]        # 0x1001ab0
 102f3e4:	nop
 102f3e5:	mov    rdx,rax
 102f3e8:	mov    rcx,r13
 102f3eb:	call   0x100c370
 102f3f0:	nop
 102f3f1:	lea    rcx,[rsp+0x60]
 102f3f6:	call   QWORD PTR [rip+0xfffffffffffd26ac]        # 0x1001aa8
 102f3fc:	or     rax,0xffffffffffffffff
 102f400:	inc    rax
 102f403:	cmp    WORD PTR [r14+rax*2],0x0
 102f409:	jne    0x102f400
 102f40b:	lea    r14,[r14+rax*2]
 102f40f:	add    r14,0x2
 102f413:	cmp    WORD PTR [r14],0x0
 102f418:	jmp    0x102f32e
 102f41d:	call   0x103f972
 102f422:	nop
 102f423:	call   QWORD PTR [rip+0xfffffffffffd212f]        # 0x1001558
 102f429:	mov    rcx,rax
 102f42c:	mov    r8,r15
 102f42f:	xor    edx,edx
 102f431:	call   QWORD PTR [rip+0xfffffffffffd2129]        # 0x1001560
 102f437:	lea    rcx,[rsp+0x58]
 102f43c:	call   0x1034560
 102f441:	lea    rcx,[rsp+0x50]
 102f446:	call   0x1034560
 102f44b:	nop
 102f44c:	lea    rcx,[rsp+0x38]
 102f451:	call   QWORD PTR [rip+0xfffffffffffd2651]        # 0x1001aa8
 102f457:	nop
 102f458:	mov    rcx,r12
 102f45b:	call   QWORD PTR [rip+0xfffffffffffd2647]        # 0x1001aa8
 102f461:	mov    rcx,QWORD PTR [rbp+0x190]
 102f468:	xor    rcx,rsp
 102f46b:	call   0x103ff40
 102f470:	add    rsp,0x2a8
 102f477:	pop    r15
 102f479:	pop    r14
 102f47b:	pop    r13
 102f47d:	pop    r12
 102f47f:	pop    rdi
 102f480:	pop    rsi
 102f481:	pop    rbx
 102f482:	pop    rbp
 102f483:	ret    
 102f484:	int3   
 102f485:	int3   
 102f486:	int3   
 102f487:	int3   
 102f488:	int3   
 102f489:	int3   
 102f48a:	int3   
 102f48b:	int3   
 102f48c:	int3   
 102f48d:	int3   
 102f48e:	int3   
 102f48f:	int3   
 102f490:	mov    QWORD PTR [rsp+0x8],rbx
 102f495:	mov    QWORD PTR [rsp+0x10],rbp
 102f49a:	mov    QWORD PTR [rsp+0x18],rsi
 102f49f:	push   rdi
 102f4a0:	push   r14
 102f4a2:	push   r15
 102f4a4:	sub    rsp,0x20
 102f4a8:	mov    rdi,rcx
 102f4ab:	mov    rcx,rdx
 102f4ae:	mov    rbp,rdx
 102f4b1:	call   0x103fa26
 102f4b6:	xor    edx,edx
 102f4b8:	mov    esi,eax
 102f4ba:	div    DWORD PTR [rdi+0x10]
 102f4bd:	mov    rax,QWORD PTR [rdi+0x8]
 102f4c1:	mov    r15d,edx
 102f4c4:	test   rax,rax
 102f4c7:	je     0x102f4f4
 102f4c9:	mov    rbx,QWORD PTR [rax+rdx*8]
 102f4cd:	test   rbx,rbx
 102f4d0:	je     0x102f4f4
 102f4d2:	cmp    DWORD PTR [rbx+0x18],esi
 102f4d5:	jne    0x102f4eb
 102f4d7:	mov    rdx,rbp
 102f4da:	mov    rcx,rbx
 102f4dd:	call   QWORD PTR [rip+0xfffffffffffd251d]        # 0x1001a00
 102f4e3:	test   eax,eax
 102f4e5:	je     0x102f577
 102f4eb:	mov    rbx,QWORD PTR [rbx+0x10]
 102f4ef:	test   rbx,rbx
 102f4f2:	jne    0x102f4d2
 102f4f4:	cmp    QWORD PTR [rdi+0x8],0x0
 102f4f9:	jne    0x102f54a
 102f4fb:	mov    ebx,DWORD PTR [rdi+0x10]
 102f4fe:	mov    rcx,0xffffffffffffffff
 102f505:	mov    eax,0x8
 102f50a:	mul    rbx
 102f50d:	cmovo  rax,rcx
 102f511:	mov    rcx,rax
 102f514:	call   0x103f9ba
 102f519:	mov    QWORD PTR [rdi+0x8],rax
 102f51d:	test   rax,rax
 102f520:	jne    0x102f528
 102f522:	call   0x103f972
 102f527:	int3   
 102f528:	lea    r8,[rbx*8+0x0]
 102f530:	xor    edx,edx
 102f532:	mov    rcx,rax
 102f535:	call   0x104026c
 102f53a:	cmp    QWORD PTR [rdi+0x8],0x0
 102f53f:	mov    DWORD PTR [rdi+0x10],ebx
 102f542:	jne    0x102f54a
 102f544:	call   0x103f972
 102f549:	int3   
 102f54a:	mov    rdx,rbp
 102f54d:	mov    rcx,rdi
 102f550:	call   0x102f650
 102f555:	lea    rdx,[r15*8+0x0]
 102f55d:	mov    DWORD PTR [rax+0x18],esi
 102f560:	mov    rbx,rax
 102f563:	mov    rax,QWORD PTR [rdi+0x8]
 102f567:	mov    rcx,QWORD PTR [rdx+rax*1]
 102f56b:	mov    QWORD PTR [rbx+0x10],rcx
 102f56f:	mov    rax,QWORD PTR [rdi+0x8]
 102f573:	mov    QWORD PTR [rdx+rax*1],rbx
 102f577:	mov    rbp,QWORD PTR [rsp+0x48]
 102f57c:	mov    rsi,QWORD PTR [rsp+0x50]
 102f581:	lea    rax,[rbx+0x8]
 102f585:	mov    rbx,QWORD PTR [rsp+0x40]
 102f58a:	add    rsp,0x20
 102f58e:	pop    r15
 102f590:	pop    r14
 102f592:	pop    rdi
 102f593:	ret    
 102f594:	int3   
 102f595:	int3   
 102f596:	int3   
 102f597:	int3   
 102f598:	int3   
 102f599:	int3   
 102f59a:	int3   
 102f59b:	int3   
 102f59c:	int3   
 102f59d:	int3   
 102f59e:	int3   
 102f59f:	int3   
 102f5a0:	rex push rsi
 102f5a2:	push   rdi
 102f5a3:	push   r14
 102f5a5:	sub    rsp,0x30
 102f5a9:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 102f5b2:	mov    QWORD PTR [rsp+0x58],rbx
 102f5b7:	mov    QWORD PTR [rsp+0x60],rbp
 102f5bc:	mov    rdi,rcx
 102f5bf:	xor    r14d,r14d
 102f5c2:	cmp    QWORD PTR [rcx+0x8],r14
 102f5c6:	je     0x102f621
 102f5c8:	mov    esi,r14d
 102f5cb:	cmp    DWORD PTR [rcx+0x10],r14d
 102f5cf:	jbe    0x102f614
 102f5d1:	mov    ebp,r14d
 102f5d4:	data16 data16 data16 nop WORD PTR [rax+rax*1+0x0]
 102f5e0:	mov    rbx,QWORD PTR [rdi+0x8]
 102f5e4:	mov    rbx,QWORD PTR [rbx+rbp*1]
 102f5e8:	mov    QWORD PTR [rsp+0x50],rbx
 102f5ed:	test   rbx,rbx
 102f5f0:	je     0x102f609
 102f5f2:	mov    rcx,rbx
 102f5f5:	call   QWORD PTR [rip+0xfffffffffffd24ad]        # 0x1001aa8
 102f5fb:	mov    rbx,QWORD PTR [rbx+0x10]
 102f5ff:	mov    QWORD PTR [rsp+0x50],rbx
 102f604:	test   rbx,rbx
 102f607:	jne    0x102f5f2
 102f609:	inc    esi
 102f60b:	add    rbp,0x8
 102f60f:	cmp    esi,DWORD PTR [rdi+0x10]
 102f612:	jb     0x102f5e0
 102f614:	mov    rcx,QWORD PTR [rdi+0x8]
 102f618:	call   0x103f9c6
 102f61d:	mov    QWORD PTR [rdi+0x8],r14
 102f621:	mov    QWORD PTR [rdi+0x18],r14
 102f625:	mov    QWORD PTR [rdi+0x20],r14
 102f629:	mov    rcx,QWORD PTR [rdi+0x28]
 102f62d:	call   0x103f9ae
 102f632:	mov    QWORD PTR [rdi+0x28],r14
 102f636:	mov    rbx,QWORD PTR [rsp+0x58]
 102f63b:	mov    rbp,QWORD PTR [rsp+0x60]
 102f640:	add    rsp,0x30
 102f644:	pop    r14
 102f646:	pop    rdi
 102f647:	pop    rsi
 102f648:	ret    
 102f649:	int3   
 102f64a:	int3   
 102f64b:	int3   
 102f64c:	int3   
 102f64d:	int3   
 102f64e:	int3   
 102f64f:	int3   
 102f650:	rex push rdi
 102f652:	sub    rsp,0x30
 102f656:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 102f65f:	mov    QWORD PTR [rsp+0x48],rbx
 102f664:	mov    QWORD PTR [rsp+0x58],rsi
 102f669:	mov    rsi,rdx
 102f66c:	mov    rbx,rcx
 102f66f:	cmp    QWORD PTR [rcx+0x20],0x0
 102f674:	jne    0x102f6b5
 102f676:	add    rcx,0x28
 102f67a:	mov    r8d,0x20
 102f680:	mov    rdx,QWORD PTR [rbx+0x30]
 102f684:	call   0x103f9a2
 102f689:	mov    r9,QWORD PTR [rbx+0x30]
 102f68d:	mov    r8,r9
 102f690:	shl    r8,0x5
 102f694:	add    rax,0xffffffffffffffe8
 102f698:	add    rax,r8
 102f69b:	dec    r9
 102f69e:	js     0x102f6b5
 102f6a0:	mov    rcx,QWORD PTR [rbx+0x20]
 102f6a4:	mov    QWORD PTR [rax+0x10],rcx
 102f6a8:	mov    QWORD PTR [rbx+0x20],rax
 102f6ac:	sub    rax,0x20
 102f6b0:	dec    r9
 102f6b3:	jns    0x102f6a0
 102f6b5:	mov    rdi,QWORD PTR [rbx+0x20]
 102f6b9:	xor    eax,eax
 102f6bb:	test   rdi,rdi
 102f6be:	setne  al
 102f6c1:	test   eax,eax
 102f6c3:	jne    0x102f6cb
 102f6c5:	call   0x103f972
 102f6ca:	int3   
 102f6cb:	mov    QWORD PTR [rsp+0x40],rdi
 102f6d0:	mov    rax,QWORD PTR [rdi+0x10]
 102f6d4:	xor    ecx,ecx
 102f6d6:	mov    QWORD PTR [rdi],rcx
 102f6d9:	mov    QWORD PTR [rdi+0x8],rcx
 102f6dd:	mov    QWORD PTR [rdi+0x18],rcx
 102f6e1:	mov    QWORD PTR [rdi+0x10],rax
 102f6e5:	mov    rax,QWORD PTR [rbx+0x20]
 102f6e9:	mov    rcx,QWORD PTR [rax+0x10]
 102f6ed:	mov    QWORD PTR [rbx+0x20],rcx
 102f6f1:	inc    QWORD PTR [rbx+0x18]
 102f6f5:	mov    QWORD PTR [rsp+0x50],rdi
 102f6fa:	mov    rdx,rsi
 102f6fd:	mov    rcx,rdi
 102f700:	call   QWORD PTR [rip+0xfffffffffffd23aa]        # 0x1001ab0
 102f706:	nop
 102f707:	mov    rax,rdi
 102f70a:	mov    rbx,QWORD PTR [rsp+0x48]
 102f70f:	mov    rsi,QWORD PTR [rsp+0x58]
 102f714:	add    rsp,0x30
 102f718:	pop    rdi
 102f719:	ret    
 102f71a:	int3   
 102f71b:	int3   
 102f71c:	int3   
 102f71d:	int3   
 102f71e:	int3   
 102f71f:	int3   
 102f720:	lea    rax,[rip+0xfffffffffffd7169]        # 0x1006890
 102f727:	mov    QWORD PTR [rcx],rax
 102f72a:	jmp    0x102f5a0
 102f72f:	int3   
 102f730:	int3   
 102f731:	int3   
 102f732:	int3   
 102f733:	int3   
 102f734:	int3   
 102f735:	int3   
 102f736:	int3   
 102f737:	int3   
 102f738:	int3   
 102f739:	int3   
 102f73a:	int3   
 102f73b:	int3   
 102f73c:	int3   
 102f73d:	int3   
 102f73e:	int3   
 102f73f:	int3   
 102f740:	rex push rbp
 102f742:	push   rsi
 102f743:	push   rdi
 102f744:	push   r12
 102f746:	push   r13
 102f748:	push   r14
 102f74a:	push   r15
 102f74c:	sub    rsp,0x40
 102f750:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
 102f759:	mov    QWORD PTR [rsp+0x80],rbx
 102f761:	mov    rbp,rdx
 102f764:	mov    r13,rcx
 102f767:	mov    eax,DWORD PTR [rdx+0x20]
 102f76a:	not    eax
 102f76c:	test   al,0x1
 102f76e:	je     0x102f87b
 102f774:	mov    rdx,QWORD PTR [rcx+0x18]
 102f778:	mov    rcx,rbp
 102f77b:	call   0x103f996
 102f780:	cmp    QWORD PTR [r13+0x18],0x0
 102f785:	je     0x102f99d
 102f78b:	xor    r15d,r15d
 102f78e:	cmp    DWORD PTR [r13+0x10],r15d
 102f792:	jbe    0x102f99d
 102f798:	mov    r12d,r15d
 102f79b:	nop    DWORD PTR [rax+rax*1+0x0]
 102f7a0:	mov    rax,QWORD PTR [r13+0x8]
 102f7a4:	mov    r14,QWORD PTR [r12+rax*1]
 102f7a8:	test   r14,r14
 102f7ab:	je     0x102f854
 102f7b1:	data16 data16 data16 data16 data16 data16 nop WORD PTR [rax+rax*1+0x0]
 102f7c0:	lea    rbx,[r14+0x8]
 102f7c4:	mov    r8d,0x1
 102f7ca:	mov    rdx,r14
 102f7cd:	mov    rcx,rbp
 102f7d0:	call   0x103fa1a
 102f7d5:	test   rbx,rbx
 102f7d8:	je     0x102f875
 102f7de:	mov    eax,DWORD PTR [rbp+0x20]
 102f7e1:	not    eax
 102f7e3:	test   al,0x1
 102f7e5:	je     0x102f816
 102f7e7:	mov    esi,0x1
 102f7ec:	nop    DWORD PTR [rax+0x0]
 102f7f0:	mov    edi,0x7fffffff
 102f7f5:	cmp    rsi,rdi
 102f7f8:	cmovb  edi,esi
 102f7fb:	mov    r8d,edi
 102f7fe:	mov    rdx,rbx
 102f801:	mov    rcx,rbp
 102f804:	call   0x103f9ea
 102f809:	mov    r11d,edi
 102f80c:	add    rbx,r11
 102f80f:	sub    rsi,r11
 102f812:	jne    0x102f7f0
 102f814:	jmp    0x102f847
 102f816:	mov    edi,0x1
 102f81b:	nop    DWORD PTR [rax+rax*1+0x0]
 102f820:	mov    esi,0x7fffffff
 102f825:	cmp    rdi,rsi
 102f828:	cmovb  esi,edi
 102f82b:	mov    r8d,esi
 102f82e:	mov    rdx,rbx
 102f831:	mov    rcx,rbp
 102f834:	call   0x103f9de
 102f839:	cmp    eax,esi
 102f83b:	jne    0x102f86a
 102f83d:	mov    eax,esi
 102f83f:	add    rbx,rax
 102f842:	sub    rdi,rax
 102f845:	jne    0x102f820
 102f847:	mov    r14,QWORD PTR [r14+0x10]
 102f84b:	test   r14,r14
 102f84e:	jne    0x102f7c0
 102f854:	inc    r15d
 102f857:	add    r12,0x8
 102f85b:	cmp    r15d,DWORD PTR [r13+0x10]
 102f85f:	jae    0x102f99d
 102f865:	jmp    0x102f7a0
 102f86a:	xor    edx,edx
 102f86c:	lea    ecx,[rdx+0x3]
 102f86f:	call   0x103fa32
 102f874:	int3   
 102f875:	call   0x103f972
 102f87a:	int3   
 102f87b:	mov    rcx,rdx
 102f87e:	call   0x103f98a
 102f883:	mov    r14,rax
 102f886:	test   rax,rax
 102f889:	je     0x102f99d
 102f88f:	nop
 102f890:	dec    r14
 102f893:	mov    rcx,QWORD PTR [rip+0xfffffffffffd220e]        # 0x1001aa8
 102f89a:	mov    QWORD PTR [rsp+0x20],rcx
 102f89f:	mov    r9,QWORD PTR [rip+0xfffffffffffd221a]        # 0x1001ac0
 102f8a6:	mov    edx,0x8
 102f8ab:	lea    r8d,[rdx-0x7]
 102f8af:	lea    rcx,[rsp+0x90]
 102f8b7:	call   0x103ffd8
 102f8bc:	nop
 102f8bd:	mov    r8d,0x1
 102f8c3:	lea    rdx,[rsp+0x90]
 102f8cb:	mov    rcx,rbp
 102f8ce:	call   0x103fa1a
 102f8d3:	mov    r11d,DWORD PTR [rbp+0x20]
 102f8d7:	not    r11d
 102f8da:	lea    rsi,[rsp+0x88]
 102f8e2:	test   r11b,0x1
 102f8e6:	je     0x102f916
 102f8e8:	mov    edi,0x1
 102f8ed:	nop    DWORD PTR [rax]
 102f8f0:	mov    ebx,0x7fffffff
 102f8f5:	cmp    rdi,rbx
 102f8f8:	cmovb  ebx,edi
 102f8fb:	mov    r8d,ebx
 102f8fe:	mov    rdx,rsi
 102f901:	mov    rcx,rbp
 102f904:	call   0x103f9ea
 102f909:	mov    r11d,ebx
 102f90c:	add    rsi,r11
 102f90f:	sub    rdi,r11
 102f912:	jne    0x102f8f0
 102f914:	jmp    0x102f947
 102f916:	mov    ebx,0x1
 102f91b:	nop    DWORD PTR [rax+rax*1+0x0]
 102f920:	mov    edi,0x7fffffff
 102f925:	cmp    rbx,rdi
 102f928:	cmovb  edi,ebx
 102f92b:	mov    r8d,edi
 102f92e:	mov    rdx,rsi
 102f931:	mov    rcx,rbp
 102f934:	call   0x103f9de
 102f939:	cmp    eax,edi
 102f93b:	jne    0x102f992
 102f93d:	mov    eax,edi
 102f93f:	add    rsi,rax
 102f942:	sub    rbx,rax
 102f945:	jne    0x102f920
 102f947:	movzx  ebx,BYTE PTR [rsp+0x88]
 102f94f:	lea    rcx,[rsp+0x90]
 102f957:	call   QWORD PTR [rip+0xfffffffffffd218b]        # 0x1001ae8
 102f95d:	mov    rdx,rax
 102f960:	mov    rcx,r13
 102f963:	call   0x102f490
 102f968:	mov    BYTE PTR [rax],bl
 102f96a:	mov    r9,QWORD PTR [rip+0xfffffffffffd2137]        # 0x1001aa8
 102f971:	mov    edx,0x8
 102f976:	lea    r8d,[rdx-0x7]
 102f97a:	lea    rcx,[rsp+0x90]
 102f982:	call   0x1040094
 102f987:	test   r14,r14
 102f98a:	jne    0x102f890
 102f990:	jmp    0x102f99d
 102f992:	xor    edx,edx
 102f994:	lea    ecx,[rdx+0x3]
 102f997:	call   0x103fa32
 102f99c:	nop
 102f99d:	mov    rbx,QWORD PTR [rsp+0x80]
 102f9a5:	add    rsp,0x40
 102f9a9:	pop    r15
 102f9ab:	pop    r14
 102f9ad:	pop    r13
 102f9af:	pop    r12
 102f9b1:	pop    rdi
 102f9b2:	pop    rsi
 102f9b3:	pop    rbp
 102f9b4:	ret    
 102f9b5:	int3   
 102f9b6:	int3   
 102f9b7:	int3   
 102f9b8:	int3   
 102f9b9:	int3   
 102f9ba:	int3   
 102f9bb:	int3   
 102f9bc:	int3   
 102f9bd:	int3   
 102f9be:	int3   
 102f9bf:	int3   
 102f9c0:	mov    QWORD PTR [rsp+0x8],rbx
 102f9c5:	push   rdi
 102f9c6:	sub    rsp,0x20
 102f9ca:	lea    rax,[rip+0xfffffffffffd6ebf]        # 0x1006890
 102f9d1:	mov    ebx,edx
 102f9d3:	mov    rdi,rcx
 102f9d6:	mov    QWORD PTR [rcx],rax
 102f9d9:	call   0x102f5a0
 102f9de:	test   bl,0x1
 102f9e1:	je     0x102f9eb
 102f9e3:	mov    rcx,rdi
 102f9e6:	call   0x103f95a
 102f9eb:	mov    rax,rdi
 102f9ee:	mov    rbx,QWORD PTR [rsp+0x30]
 102f9f3:	add    rsp,0x20
 102f9f7:	pop    rdi
 102f9f8:	ret    
 102f9f9:	int3   
 102f9fa:	int3   
 102f9fb:	int3   
 102f9fc:	int3   
 102f9fd:	int3   
 102f9fe:	int3   
 102f9ff:	int3   
 102fa00:	mov    rax,rsp
 102fa03:	push   rdi
 102fa04:	push   r12
 102fa06:	push   r13
 102fa08:	push   r14
 102fa0a:	push   r15
 102fa0c:	sub    rsp,0xca0
 102fa13:	mov    QWORD PTR [rsp+0x58],0xfffffffffffffffe
 102fa1c:	mov    QWORD PTR [rax+0x8],rbx
 102fa20:	mov    QWORD PTR [rax+0x18],rsi
 102fa24:	mov    rax,QWORD PTR [rip+0x33e45]        # 0x1063870
 102fa2b:	xor    rax,rsp
 102fa2e:	mov    QWORD PTR [rsp+0xc90],rax
 102fa36:	mov    r13,rdx
 102fa39:	mov    r12d,ecx
 102fa3c:	call   0x102cf10
 102fa41:	mov    edx,0x3e8
 102fa46:	lea    rcx,[rip+0x33ffb]        # 0x1063a48
 102fa4d:	call   QWORD PTR [rip+0xfffffffffffd18cd]        # 0x1001320
 102fa53:	test   eax,eax
 102fa55:	jne    0x102fa69
 102fa57:	lea    rcx,[rip+0xfffffffffffd6ea2]        # 0x1006900
 102fa5e:	call   QWORD PTR [rip+0xfffffffffffd1d0c]        # 0x1001770
 102fa64:	jmp    0x102fc21
 102fa69:	call   QWORD PTR [rip+0xfffffffffffd1841]        # 0x10012b0
 102fa6f:	mov    rcx,rax
 102fa72:	xor    r8d,r8d
 102fa75:	xor    edx,edx
 102fa77:	call   QWORD PTR [rip+0xfffffffffffd1e73]        # 0x10018f0
 102fa7d:	lea    rcx,[rip+0xffffffffffffe98c]        # 0x102e410
 102fa84:	call   QWORD PTR [rip+0xfffffffffffd1b06]        # 0x1001590
 102fa8a:	mov    QWORD PTR [rip+0x33fdf],rax        # 0x1063a70
 102fa91:	xor    r15b,r15b
 102fa94:	xor    r14b,r14b
 102fa97:	mov    dil,0x1
 102fa9a:	mov    BYTE PTR [rsp+0x30],dil
 102fa9f:	lea    rdx,[rsp+0x70]
 102faa4:	mov    ecx,0x104
 102faa9:	call   QWORD PTR [rip+0xfffffffffffd1939]        # 0x10013e8
 102faaf:	mov    DWORD PTR [rsp+0x38],eax
 102fab3:	xor    esi,esi
 102fab5:	mov    WORD PTR [rsp+0x276],si
 102fabd:	mov    edx,0x104
 102fac2:	lea    rcx,[rsp+0x280]
 102faca:	call   QWORD PTR [rip+0xfffffffffffd1970]        # 0x1001440
 102fad0:	mov    DWORD PTR [rsp+0x34],eax
 102fad4:	mov    WORD PTR [rsp+0x486],si
 102fadc:	nop    DWORD PTR [rax+0x0]
 102fae0:	test   dil,dil
 102fae3:	je     0x102fb00
 102fae5:	lea    rcx,[rip+0xffffffffffffe324]        # 0x102de10
 102faec:	call   0x1035990
 102faf1:	movzx  edi,al
 102faf4:	mov    BYTE PTR [rsp+0x30],al
 102faf8:	test   al,al
 102fafa:	jne    0x102fbd7
 102fb00:	xor    ecx,ecx
 102fb02:	call   0x1023e50
 102fb07:	mov    QWORD PTR [rsp+0x40],rax
 102fb0c:	mov    r8,r13
 102fb0f:	mov    edx,r12d
 102fb12:	mov    rcx,rax
 102fb15:	call   0x1024130
 102fb1a:	mov    BYTE PTR [rsp+0x31],al
 102fb1e:	mov    eax,DWORD PTR [rip+0x33f14]        # 0x1063a38
 102fb24:	test   eax,eax
 102fb26:	je     0x102fb4f
 102fb28:	mov    eax,DWORD PTR [rip+0x33f06]        # 0x1063a34
 102fb2e:	test   eax,eax
 102fb30:	je     0x102fb4f
 102fb32:	movzx  r15d,BYTE PTR [rsp+0x31]
 102fb38:	movzx  edi,BYTE PTR [rsp+0x30]
 102fb3d:	test   r15b,r15b
 102fb40:	je     0x102fb5a
 102fb42:	test   dil,dil
 102fb45:	jne    0x102fb5a
 102fb47:	mov    r14d,0x1
 102fb4d:	jmp    0x102fb5d
 102fb4f:	movzx  r15d,BYTE PTR [rsp+0x31]
 102fb55:	movzx  edi,BYTE PTR [rsp+0x30]
 102fb5a:	mov    r14d,esi
 102fb5d:	mov    BYTE PTR [rsp+0x32],r14b
 102fb62:	test   r14b,r14b
 102fb65:	je     0x102fbb3
 102fb67:	mov    QWORD PTR [rip+0x33ed2],rsi        # 0x1063a40
 102fb6e:	mov    DWORD PTR [rip+0x33db0],esi        # 0x1063924
 102fb74:	mov    DWORD PTR [rip+0x33eba],esi        # 0x1063a34
 102fb7a:	mov    DWORD PTR [rip+0x33eb8],esi        # 0x1063a38
 102fb80:	mov    DWORD PTR [rip+0x33d8e],esi        # 0x1063914
 102fb86:	mov    DWORD PTR [rip+0x33d94],esi        # 0x1063920
 102fb8c:	mov    rbx,QWORD PTR [rsp+0x40]
 102fb91:	mov    rax,QWORD PTR [rbx]
 102fb94:	mov    BYTE PTR [rsp+0x28],0x1
 102fb99:	mov    BYTE PTR [rsp+0x20],0x1
 102fb9e:	mov    r9d,0x1
 102fba4:	xor    r8d,r8d
 102fba7:	mov    edx,0x4000c439
 102fbac:	mov    rcx,rbx
 102fbaf:	call   QWORD PTR [rax]
 102fbb1:	jmp    0x102fbb8
 102fbb3:	mov    rbx,QWORD PTR [rsp+0x40]
 102fbb8:	mov    QWORD PTR [rsp+0x68],rbx
 102fbbd:	mov    QWORD PTR [rsp+0x60],rbx
 102fbc2:	test   rbx,rbx
 102fbc5:	je     0x102fbd7
 102fbc7:	mov    rcx,rbx
 102fbca:	call   0x1023eb0
 102fbcf:	mov    rcx,rbx
 102fbd2:	call   0x103f95a
 102fbd7:	test   r14b,r14b
 102fbda:	jne    0x102fae0
 102fbe0:	cmp    DWORD PTR [rsp+0x38],0x0
 102fbe5:	je     0x102fbf2
 102fbe7:	lea    rcx,[rsp+0x70]
 102fbec:	call   QWORD PTR [rip+0xfffffffffffd17ee]        # 0x10013e0
 102fbf2:	call   QWORD PTR [rip+0xfffffffffffd16b8]        # 0x10012b0
 102fbf8:	mov    rcx,rax
 102fbfb:	call   QWORD PTR [rip+0xfffffffffffd1cf7]        # 0x10018f8
 102fc01:	cmp    DWORD PTR [rsp+0x34],0x0
 102fc06:	je     0x102fc16
 102fc08:	lea    rcx,[rsp+0x280]
 102fc10:	call   QWORD PTR [rip+0xfffffffffffd1832]        # 0x1001448
 102fc16:	test   r15b,r15b
 102fc19:	sete   sil
 102fc1d:	mov    eax,esi
 102fc1f:	jmp    0x102fc26
 102fc21:	mov    eax,0x1
 102fc26:	mov    rcx,QWORD PTR [rsp+0xc90]
 102fc2e:	xor    rcx,rsp
 102fc31:	call   0x103ff40
 102fc36:	lea    r11,[rsp+0xca0]
 102fc3e:	mov    rbx,QWORD PTR [r11+0x30]
 102fc42:	mov    rsi,QWORD PTR [r11+0x40]
 102fc46:	mov    rsp,r11
 102fc49:	pop    r15
 102fc4b:	pop    r14
 102fc4d:	pop    r13
 102fc4f:	pop    r12
 102fc51:	pop    rdi
 102fc52:	ret    
 102fc53:	int3   
 102fc54:	int3   
 102fc55:	int3   
 102fc56:	int3   
 102fc57:	int3   
 102fc58:	int3   
 102fc59:	int3   
 102fc5a:	int3   
 102fc5b:	int3   
 102fc5c:	int3   
 102fc5d:	int3   
 102fc5e:	int3   
 102fc5f:	int3   
 102fc60:	mov    QWORD PTR [rsp+0x18],rbx
 102fc65:	mov    QWORD PTR [rsp+0x20],rsi
 102fc6a:	push   r14
 102fc6c:	sub    rsp,0x20
 102fc70:	mov    rbx,r8
 102fc73:	mov    rsi,rdx
 102fc76:	mov    r14,rcx
 102fc79:	test   r8,r8
 102fc7c:	je     0x102fc89
 102fc7e:	test   rdx,rdx
 102fc81:	jne    0x102fc89
 102fc83:	call   0x103f972
 102fc88:	int3   
 102fc89:	mov    eax,DWORD PTR [rcx+0x20]
 102fc8c:	mov    QWORD PTR [rsp+0x38],rdi
 102fc91:	not    eax
 102fc93:	test   al,0x1
 102fc95:	je     0x102fccc
 102fc97:	test   rbx,rbx
 102fc9a:	je     0x102fd14
 102fc9c:	nop    DWORD PTR [rax+0x0]
 102fca0:	mov    edi,0xfffffff
 102fca5:	mov    rdx,rsi
 102fca8:	mov    rcx,r14
 102fcab:	cmp    rbx,rdi
 102fcae:	cmovb  edi,ebx
 102fcb1:	lea    r8d,[rdi*8+0x0]
 102fcb9:	call   0x103f9ea
 102fcbe:	mov    r11d,edi
 102fcc1:	lea    rsi,[rsi+rdi*8]
 102fcc5:	sub    rbx,r11
 102fcc8:	jne    0x102fca0
 102fcca:	jmp    0x102fd14
 102fccc:	test   rbx,rbx
 102fccf:	je     0x102fd14
 102fcd1:	mov    QWORD PTR [rsp+0x30],rbp
 102fcd6:	data16 nop WORD PTR [rax+rax*1+0x0]
 102fce0:	mov    ebp,0xfffffff
 102fce5:	mov    rdx,rsi
 102fce8:	mov    rcx,r14
 102fceb:	cmp    rbx,rbp
 102fcee:	cmovb  ebp,ebx
 102fcf1:	lea    edi,[rbp*8+0x0]
 102fcf8:	mov    r8d,edi
 102fcfb:	call   0x103f9de
 102fd00:	cmp    eax,edi
 102fd02:	jne    0x102fd2a
 102fd04:	mov    eax,ebp
 102fd06:	lea    rsi,[rsi+rbp*8]
 102fd0a:	sub    rbx,rax
 102fd0d:	jne    0x102fce0
 102fd0f:	mov    rbp,QWORD PTR [rsp+0x30]
 102fd14:	mov    rdi,QWORD PTR [rsp+0x38]
 102fd19:	mov    rbx,QWORD PTR [rsp+0x40]
 102fd1e:	mov    rsi,QWORD PTR [rsp+0x48]
 102fd23:	add    rsp,0x20
 102fd27:	pop    r14
 102fd29:	ret    
 102fd2a:	xor    edx,edx
 102fd2c:	lea    ecx,[rdx+0x3]
 102fd2f:	call   0x103fa32
 102fd34:	int3   
 102fd35:	int3   
 102fd36:	int3   
 102fd37:	int3   
 102fd38:	int3   
 102fd39:	int3   
 102fd3a:	int3   
 102fd3b:	int3   
 102fd3c:	int3   
 102fd3d:	int3   
 102fd3e:	int3   
 102fd3f:	int3   
 102fd40:	mov    QWORD PTR [rsp+0x18],rbx
 102fd45:	mov    QWORD PTR [rsp+0x20],rsi
 102fd4a:	push   r14
 102fd4c:	sub    rsp,0x20
 102fd50:	mov    rbx,r8
 102fd53:	mov    rsi,rdx
 102fd56:	mov    r14,rcx
 102fd59:	test   r8,r8
 102fd5c:	je     0x102fd69
 102fd5e:	test   rdx,rdx
 102fd61:	jne    0x102fd69
 102fd63:	call   0x103f972
 102fd68:	int3   
 102fd69:	mov    eax,DWORD PTR [rcx+0x20]
 102fd6c:	mov    QWORD PTR [rsp+0x38],rdi
 102fd71:	not    eax
 102fd73:	test   al,0x1
 102fd75:	je     0x102fdac
 102fd77:	test   rbx,rbx
 102fd7a:	je     0x102fdf4
 102fd7c:	nop    DWORD PTR [rax+0x0]
 102fd80:	mov    edi,0xfffffff
 102fd85:	mov    rdx,rsi
 102fd88:	mov    rcx,r14
 102fd8b:	cmp    rbx,rdi
 102fd8e:	cmovb  edi,ebx
 102fd91:	lea    r8d,[rdi*8+0x0]
 102fd99:	call   0x103f9ea
 102fd9e:	mov    r11d,edi
 102fda1:	lea    rsi,[rsi+rdi*8]
 102fda5:	sub    rbx,r11
 102fda8:	jne    0x102fd80
 102fdaa:	jmp    0x102fdf4
 102fdac:	test   rbx,rbx
 102fdaf:	je     0x102fdf4
 102fdb1:	mov    QWORD PTR [rsp+0x30],rbp
 102fdb6:	data16 nop WORD PTR [rax+rax*1+0x0]
 102fdc0:	mov    ebp,0xfffffff
 102fdc5:	mov    rdx,rsi
 102fdc8:	mov    rcx,r14
 102fdcb:	cmp    rbx,rbp
 102fdce:	cmovb  ebp,ebx
 102fdd1:	lea    edi,[rbp*8+0x0]
 102fdd8:	mov    r8d,edi
 102fddb:	call   0x103f9de
 102fde0:	cmp    eax,edi
 102fde2:	jne    0x102fe0a
 102fde4:	mov    eax,ebp
 102fde6:	lea    rsi,[rsi+rbp*8]
 102fdea:	sub    rbx,rax
 102fded:	jne    0x102fdc0
 102fdef:	mov    rbp,QWORD PTR [rsp+0x30]
 102fdf4:	mov    rdi,QWORD PTR [rsp+0x38]
 102fdf9:	mov    rbx,QWORD PTR [rsp+0x40]
 102fdfe:	mov    rsi,QWORD PTR [rsp+0x48]
 102fe03:	add    rsp,0x20
 102fe07:	pop    r14
 102fe09:	ret    
 102fe0a:	xor    edx,edx
 102fe0c:	lea    ecx,[rdx+0x3]
 102fe0f:	call   0x103fa32
 102fe14:	int3   
 102fe15:	int3   
 102fe16:	int3   
 102fe17:	int3   
 102fe18:	int3   
 102fe19:	int3   
 102fe1a:	int3   
 102fe1b:	int3   
 102fe1c:	int3   
 102fe1d:	int3   
 102fe1e:	int3   
 102fe1f:	int3   
 102fe20:	mov    QWORD PTR [rsp+0x8],rcx
 102fe25:	sub    rsp,0x38
 102fe29:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 102fe32:	add    rsp,0x38
 102fe36:	rex.W jmp QWORD PTR [rip+0xfffffffffffd1c6b]        # 0x1001aa8
 102fe3d:	int3   
 102fe3e:	int3   
 102fe3f:	int3   
 102fe40:	int3   
 102fe41:	int3   
 102fe42:	int3   
 102fe43:	int3   
 102fe44:	int3   
 102fe45:	int3   
 102fe46:	int3   
 102fe47:	int3   
 102fe48:	int3   
 102fe49:	int3   
 102fe4a:	int3   
 102fe4b:	int3   
 102fe4c:	int3   
 102fe4d:	int3   
 102fe4e:	int3   
 102fe4f:	int3   
 102fe50:	movsxd rax,DWORD PTR [rcx-0x4]
 102fe54:	sub    rcx,rax
 102fe57:	jmp    0x10156d0
 102fe5c:	int3   
 102fe5d:	int3   
 102fe5e:	int3   
 102fe5f:	int3   
 102fe60:	int3   
 102fe61:	int3   
 102fe62:	int3   
 102fe63:	int3   
 102fe64:	int3   
 102fe65:	int3   
 102fe66:	int3   
 102fe67:	int3   
 102fe68:	int3   
 102fe69:	int3   
 102fe6a:	int3   
 102fe6b:	int3   
 102fe6c:	int3   
 102fe6d:	int3   
 102fe6e:	int3   
 102fe6f:	int3   
 102fe70:	movsxd rax,DWORD PTR [rcx-0x4]
 102fe74:	sub    rcx,rax
 102fe77:	jmp    0x10156e0
 102fe7c:	int3   
 102fe7d:	int3   
 102fe7e:	int3   
 102fe7f:	int3   
 102fe80:	int3   
 102fe81:	int3   
 102fe82:	int3   
 102fe83:	int3   
 102fe84:	int3   
 102fe85:	int3   
 102fe86:	int3   
 102fe87:	int3   
 102fe88:	int3   
 102fe89:	int3   
 102fe8a:	int3   
 102fe8b:	int3   
 102fe8c:	int3   
 102fe8d:	int3   
 102fe8e:	int3   
 102fe8f:	int3   
 102fe90:	movsxd rax,DWORD PTR [rcx-0x4]
 102fe94:	sub    rcx,rax
 102fe97:	jmp    0x10156f0
 102fe9c:	int3   
 102fe9d:	int3   
 102fe9e:	int3   
 102fe9f:	int3   
 102fea0:	int3   
 102fea1:	int3   
 102fea2:	int3   
 102fea3:	int3   
 102fea4:	int3   
 102fea5:	int3   
 102fea6:	int3   
 102fea7:	int3   
 102fea8:	int3   
 102fea9:	int3   
 102feaa:	int3   
 102feab:	int3   
 102feac:	int3   
 102fead:	int3   
 102feae:	int3   
 102feaf:	int3   
 102feb0:	movsxd rax,DWORD PTR [rcx-0x4]
 102feb4:	sub    rcx,rax
 102feb7:	jmp    0x1015700
 102febc:	int3   
 102febd:	int3   
 102febe:	int3   
 102febf:	int3   
 102fec0:	int3   
 102fec1:	int3   
 102fec2:	int3   
 102fec3:	int3   
 102fec4:	int3   
 102fec5:	int3   
 102fec6:	int3   
 102fec7:	int3   
 102fec8:	int3   
 102fec9:	int3   
 102feca:	int3   
 102fecb:	int3   
 102fecc:	int3   
 102fecd:	int3   
 102fece:	int3   
 102fecf:	int3   
 102fed0:	sub    rsp,0x28
 102fed4:	cmp    ecx,0x8007000e
 102feda:	jne    0x102fee2
 102fedc:	call   0x103f966
 102fee1:	int3   
 102fee2:	call   0x103fa02
 102fee7:	int3   
 102fee8:	int3   
 102fee9:	int3   
 102feea:	int3   
 102feeb:	int3   
 102feec:	int3   
 102feed:	int3   
 102feee:	int3   
 102feef:	int3   
 102fef0:	rex push rbx
 102fef2:	sub    rsp,0x50
 102fef6:	mov    rax,QWORD PTR [rip+0x33973]        # 0x1063870
 102fefd:	xor    rax,rsp
 102ff00:	mov    QWORD PTR [rsp+0x48],rax
 102ff05:	mov    r10d,edx
 102ff08:	mov    rbx,rcx
 102ff0b:	cmp    edx,0x76c
 102ff11:	jge    0x102ff1e
 102ff13:	mov    ecx,0x80004005
 102ff18:	call   0x102fed0
 102ff1d:	int3   
 102ff1e:	lea    eax,[r8-0x1]
 102ff22:	cmp    eax,0xb
 102ff25:	jbe    0x102ff32
 102ff27:	mov    ecx,0x80004005
 102ff2c:	call   0x102fed0
 102ff31:	int3   
 102ff32:	lea    eax,[r9-0x1]
 102ff36:	cmp    eax,0x1e
 102ff39:	jbe    0x102ff46
 102ff3b:	mov    ecx,0x80004005
 102ff40:	call   0x102fed0
 102ff45:	int3   
 102ff46:	mov    eax,DWORD PTR [rsp+0x80]
 102ff4d:	cmp    eax,0x17
 102ff50:	jbe    0x102ff5d
 102ff52:	mov    ecx,0x80004005
 102ff57:	call   0x102fed0
 102ff5c:	int3   
 102ff5d:	mov    ecx,DWORD PTR [rsp+0x88]
 102ff64:	cmp    ecx,0x3b
 102ff67:	jbe    0x102ff74
 102ff69:	mov    ecx,0x80004005
 102ff6e:	call   0x102fed0
 102ff73:	int3   
 102ff74:	mov    edx,DWORD PTR [rsp+0x90]
 102ff7b:	cmp    edx,0x3b
 102ff7e:	jbe    0x102ff8b
 102ff80:	mov    ecx,0x80004005
 102ff85:	call   0x102fed0
 102ff8a:	int3   
 102ff8b:	mov    DWORD PTR [rsp+0x28],eax
 102ff8f:	lea    eax,[r8-0x1]
 102ff93:	mov    DWORD PTR [rsp+0x24],ecx
 102ff97:	mov    DWORD PTR [rsp+0x30],eax
 102ff9b:	lea    eax,[r10-0x76c]
 102ffa2:	lea    rcx,[rsp+0x20]
 102ffa7:	mov    DWORD PTR [rsp+0x34],eax
 102ffab:	mov    eax,DWORD PTR [rsp+0x98]
 102ffb2:	mov    DWORD PTR [rsp+0x20],edx
 102ffb6:	mov    DWORD PTR [rsp+0x40],eax
 102ffba:	mov    DWORD PTR [rsp+0x2c],r9d
 102ffbf:	call   QWORD PTR [rip+0xfffffffffffd1673]        # 0x1001638
 102ffc5:	mov    QWORD PTR [rbx],rax
 102ffc8:	cmp    rax,0xffffffffffffffff
 102ffcc:	jne    0x102ffd9
 102ffce:	mov    ecx,0x80070057
 102ffd3:	call   0x102fed0
 102ffd8:	int3   
 102ffd9:	mov    rax,rbx
 102ffdc:	mov    rcx,QWORD PTR [rsp+0x48]
 102ffe1:	xor    rcx,rsp
 102ffe4:	call   0x103ff40
 102ffe9:	add    rsp,0x50
 102ffed:	pop    rbx
 102ffee:	ret    
 102ffef:	int3   
 102fff0:	int3   
 102fff1:	int3   
 102fff2:	int3   
 102fff3:	int3   
 102fff4:	int3   
 102fff5:	int3   
 102fff6:	int3   
 102fff7:	int3   
 102fff8:	int3   
 102fff9:	int3   
 102fffa:	int3   
 102fffb:	int3   
 102fffc:	int3   
 102fffd:	int3   
 102fffe:	int3   
 102ffff:	int3   
 1030000:	mov    QWORD PTR [rsp+0x8],rcx
 1030005:	push   rdi
 1030006:	sub    rsp,0x30
 103000a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1030013:	mov    QWORD PTR [rsp+0x48],rbx
 1030018:	mov    QWORD PTR [rsp+0x50],rsi
 103001d:	movzx  edi,r8b
 1030021:	mov    rbx,rdx
 1030024:	mov    rsi,rcx
 1030027:	add    rcx,0x20
 103002b:	call   QWORD PTR [rip+0xfffffffffffd1a8f]        # 0x1001ac0
 1030031:	nop
 1030032:	lea    rcx,[rsi+0x28]
 1030036:	call   QWORD PTR [rip+0xfffffffffffd1a84]        # 0x1001ac0
 103003c:	nop
 103003d:	mov    QWORD PTR [rsi+0x30],rbx
 1030041:	xor    eax,eax
 1030043:	mov    QWORD PTR [rsi],rax
 1030046:	mov    QWORD PTR [rsi+0x8],rax
 103004a:	mov    BYTE PTR [rsi+0x38],dil
 103004e:	mov    rax,rsi
 1030051:	mov    rbx,QWORD PTR [rsp+0x48]
 1030056:	mov    rsi,QWORD PTR [rsp+0x50]
 103005b:	add    rsp,0x30
 103005f:	pop    rdi
 1030060:	ret    
 1030061:	int3   
 1030062:	int3   
 1030063:	int3   
 1030064:	int3   
 1030065:	int3   
 1030066:	int3   
 1030067:	int3   
 1030068:	int3   
 1030069:	int3   
 103006a:	int3   
 103006b:	int3   
 103006c:	int3   
 103006d:	int3   
 103006e:	int3   
 103006f:	int3   
 1030070:	mov    QWORD PTR [rsp+0x8],rcx
 1030075:	push   rbx
 1030076:	sub    rsp,0x30
 103007a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1030083:	mov    rbx,rcx
 1030086:	cmp    BYTE PTR [rcx+0x38],0x0
 103008a:	jne    0x10300b6
 103008c:	mov    rcx,QWORD PTR [rcx+0x8]
 1030090:	cmp    rcx,0xffffffffffffffff
 1030094:	je     0x10300a1
 1030096:	test   rcx,rcx
 1030099:	je     0x10300a1
 103009b:	call   QWORD PTR [rip+0xfffffffffffd1437]        # 0x10014d8
 10300a1:	mov    rcx,QWORD PTR [rbx]
 10300a4:	cmp    rcx,0xffffffffffffffff
 10300a8:	je     0x10300b6
 10300aa:	test   rcx,rcx
 10300ad:	je     0x10300b6
 10300af:	call   QWORD PTR [rip+0xfffffffffffd1423]        # 0x10014d8
 10300b5:	nop
 10300b6:	jmp    0x10300bd
 10300b8:	mov    rbx,QWORD PTR [rsp+0x40]
 10300bd:	lea    rcx,[rbx+0x28]
 10300c1:	call   QWORD PTR [rip+0xfffffffffffd19e1]        # 0x1001aa8
 10300c7:	nop
 10300c8:	lea    rcx,[rbx+0x20]
 10300cc:	add    rsp,0x30
 10300d0:	pop    rbx
 10300d1:	rex.W jmp QWORD PTR [rip+0xfffffffffffd19d0]        # 0x1001aa8
 10300d8:	int3   
 10300d9:	int3   
 10300da:	int3   
 10300db:	int3   
 10300dc:	int3   
 10300dd:	int3   
 10300de:	int3   
 10300df:	int3   
 10300e0:	rex push rdi
 10300e2:	push   r14
 10300e4:	push   r15
 10300e6:	sub    rsp,0x30
 10300ea:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 10300f3:	mov    QWORD PTR [rsp+0x58],rbx
 10300f8:	mov    QWORD PTR [rsp+0x60],rbp
 10300fd:	mov    QWORD PTR [rsp+0x68],rsi
 1030102:	movzx  ebp,r9b
 1030106:	mov    r14,r8
 1030109:	mov    r15,rdx
 103010c:	mov    rsi,rcx
 103010f:	mov    ecx,0x40
 1030114:	call   0x103f9d2
 1030119:	mov    rdi,rax
 103011c:	mov    QWORD PTR [rsp+0x50],rax
 1030121:	test   rax,rax
 1030124:	je     0x1030158
 1030126:	mov    rbx,QWORD PTR [rsi]
 1030129:	lea    rcx,[rax+0x20]
 103012d:	call   QWORD PTR [rip+0xfffffffffffd198d]        # 0x1001ac0
 1030133:	nop
 1030134:	lea    rcx,[rdi+0x28]
 1030138:	call   QWORD PTR [rip+0xfffffffffffd1982]        # 0x1001ac0
 103013e:	nop
 103013f:	mov    QWORD PTR [rdi+0x30],rbx
 1030143:	mov    QWORD PTR [rdi],0x0
 103014a:	mov    QWORD PTR [rdi+0x8],0x0
 1030152:	mov    BYTE PTR [rdi+0x38],0x0
 1030156:	jmp    0x103015a
 1030158:	xor    edi,edi
 103015a:	mov    QWORD PTR [rsi],rdi
 103015d:	mov    BYTE PTR [rdi+0x18],bpl
 1030161:	mov    rcx,QWORD PTR [rsi]
 1030164:	add    rcx,0x20
 1030168:	mov    rdx,r15
 103016b:	call   QWORD PTR [rip+0xfffffffffffd1927]        # 0x1001a98
 1030171:	mov    rcx,QWORD PTR [rsi]
 1030174:	add    rcx,0x28
 1030178:	mov    rdx,r14
 103017b:	call   QWORD PTR [rip+0xfffffffffffd1917]        # 0x1001a98
 1030181:	mov    rax,QWORD PTR [rsi]
 1030184:	mov    rbx,QWORD PTR [rsp+0x58]
 1030189:	mov    rbp,QWORD PTR [rsp+0x60]
 103018e:	mov    rsi,QWORD PTR [rsp+0x68]
 1030193:	add    rsp,0x30
 1030197:	pop    r15
 1030199:	pop    r14
 103019b:	pop    rdi
 103019c:	ret    
 103019d:	int3   
 103019e:	int3   
 103019f:	int3   
 10301a0:	int3   
 10301a1:	int3   
 10301a2:	int3   
 10301a3:	int3   
 10301a4:	int3   
 10301a5:	int3   
 10301a6:	int3   
 10301a7:	int3   
 10301a8:	int3   
 10301a9:	int3   
 10301aa:	int3   
 10301ab:	int3   
 10301ac:	int3   
 10301ad:	int3   
 10301ae:	int3   
 10301af:	int3   
 10301b0:	mov    rax,rsp
 10301b3:	push   rbp
 10301b4:	push   rdi
 10301b5:	push   r14
 10301b7:	lea    rbp,[rax-0x9c8]
 10301be:	sub    rsp,0xab0
 10301c5:	mov    QWORD PTR [rsp+0x68],0xfffffffffffffffe
 10301ce:	mov    QWORD PTR [rax+0x18],rbx
 10301d2:	mov    QWORD PTR [rax+0x20],rsi
 10301d6:	mov    rax,QWORD PTR [rip+0x33693]        # 0x1063870
 10301dd:	xor    rax,rsp
 10301e0:	mov    QWORD PTR [rbp+0x9a0],rax
 10301e7:	mov    r14,rdx
 10301ea:	mov    rdi,rcx
 10301ed:	mov    DWORD PTR [rsp+0x58],0x401
 10301f5:	lea    rdx,[rsp+0x58]
 10301fa:	lea    rcx,[rbp+0x190]
 1030201:	call   QWORD PTR [rip+0xfffffffffffd1019]        # 0x1001220
 1030207:	mov    rdx,rdi
 103020a:	lea    rcx,[rsp+0x48]
 103020f:	call   QWORD PTR [rip+0xfffffffffffd189b]        # 0x1001ab0
 1030215:	nop
 1030216:	test   rdi,rdi
 1030219:	je     0x10303d5
 103021f:	lea    rdx,[rbp+0x190]
 1030226:	lea    rcx,[rsp+0x48]
 103022b:	call   QWORD PTR [rip+0xfffffffffffd182f]        # 0x1001a60
 1030231:	test   eax,eax
 1030233:	je     0x10303d5
 1030239:	xor    sil,sil
 103023c:	xor    eax,eax
 103023e:	mov    QWORD PTR [rsp+0x60],rax
 1030243:	mov    QWORD PTR [rsp+0x38],rax
 1030248:	mov    DWORD PTR [rsp+0x50],0x20a
 1030250:	mov    DWORD PTR [rsp+0x54],0x1
 1030258:	lea    rcx,[rsp+0x40]
 103025d:	call   QWORD PTR [rip+0xfffffffffffd185d]        # 0x1001ac0
 1030263:	nop
 1030264:	mov    edx,0xc000c4af
 1030269:	lea    rcx,[rsp+0x30]
 103026e:	call   0x10132d0
 1030273:	nop
 1030274:	mov    rcx,rax
 1030277:	call   QWORD PTR [rip+0xfffffffffffd186b]        # 0x1001ae8
 103027d:	mov    rdx,rax
 1030280:	lea    r8,[rip+0xfffffffffffd71d9]        # 0x1007460
 1030287:	lea    rcx,[rsp+0x40]
 103028c:	call   QWORD PTR [rip+0xfffffffffffd17ae]        # 0x1001a40
 1030292:	nop
 1030293:	lea    rcx,[rsp+0x30]
 1030298:	call   QWORD PTR [rip+0xfffffffffffd180a]        # 0x1001aa8
 103029e:	mov    rbx,QWORD PTR [r14]
 10302a1:	lea    r8,[rsp+0x60]
 10302a6:	mov    rdx,0xffffffff80000002
 10302ad:	mov    rcx,rdi
 10302b0:	call   QWORD PTR [rip+0xfffffffffffd0dba]        # 0x1001070
 10302b6:	mov    edx,eax
 10302b8:	xor    r9d,r9d
 10302bb:	mov    r8d,0xc000c356
 10302c1:	mov    rcx,r14
 10302c4:	call   QWORD PTR [rbx+0x20]
 10302c7:	test   al,al
 10302c9:	je     0x10303a1
 10302cf:	lea    rax,[rsp+0x30]
 10302d4:	mov    QWORD PTR [rsp+0x70],rax
 10302d9:	lea    rdx,[rsp+0x40]
 10302de:	lea    rcx,[rsp+0x30]
 10302e3:	call   QWORD PTR [rip+0xfffffffffffd16cf]        # 0x10019b8
 10302e9:	mov    rdi,rax
 10302ec:	mov    rbx,QWORD PTR [r14]
 10302ef:	lea    rax,[rsp+0x38]
 10302f4:	mov    QWORD PTR [rsp+0x20],rax
 10302f9:	mov    r9d,0x20019
 10302ff:	xor    r8d,r8d
 1030302:	lea    rdx,[rip+0xfffffffffffd7157]        # 0x1007460
 1030309:	mov    rcx,QWORD PTR [rsp+0x60]
 103030e:	call   QWORD PTR [rip+0xfffffffffffd0d6c]        # 0x1001080
 1030314:	mov    edx,eax
 1030316:	xor    r9d,r9d
 1030319:	mov    r8,rdi
 103031c:	mov    rcx,r14
 103031f:	call   QWORD PTR [rbx+0x28]
 1030322:	test   al,al
 1030324:	je     0x10303a1
 1030326:	lea    rax,[rsp+0x50]
 103032b:	mov    QWORD PTR [rsp+0x28],rax
 1030330:	lea    rax,[rbp-0x80]
 1030334:	mov    QWORD PTR [rsp+0x20],rax
 1030339:	lea    r9,[rsp+0x54]
 103033e:	xor    r8d,r8d
 1030341:	lea    rdx,[rip+0xfffffffffffd7198]        # 0x10074e0
 1030348:	mov    rcx,QWORD PTR [rsp+0x38]
 103034d:	call   QWORD PTR [rip+0xfffffffffffd0d35]        # 0x1001088
 1030353:	test   eax,eax
 1030355:	jne    0x10303a1
 1030357:	lea    rdx,[rbp-0x80]
 103035b:	lea    rcx,[rsp+0x30]
 1030360:	call   QWORD PTR [rip+0xfffffffffffd174a]        # 0x1001ab0
 1030366:	nop
 1030367:	lea    rdx,[rip+0xfffffffffffd71a2]        # 0x1007510
 103036e:	lea    rcx,[rsp+0x30]
 1030373:	call   QWORD PTR [rip+0xfffffffffffd16e7]        # 0x1001a60
 1030379:	test   eax,eax
 103037b:	je     0x1030393
 103037d:	lea    rdx,[rip+0xfffffffffffd719c]        # 0x1007520
 1030384:	lea    rcx,[rsp+0x30]
 1030389:	call   QWORD PTR [rip+0xfffffffffffd16d1]        # 0x1001a60
 103038f:	test   eax,eax
 1030391:	jne    0x1030396
 1030393:	mov    sil,0x1
 1030396:	lea    rcx,[rsp+0x30]
 103039b:	call   QWORD PTR [rip+0xfffffffffffd1707]        # 0x1001aa8
 10303a1:	mov    rcx,QWORD PTR [rsp+0x60]
 10303a6:	call   QWORD PTR [rip+0xfffffffffffd0c74]        # 0x1001020
 10303ac:	mov    rcx,QWORD PTR [rsp+0x38]
 10303b1:	call   QWORD PTR [rip+0xfffffffffffd0c69]        # 0x1001020
 10303b7:	nop
 10303b8:	lea    rcx,[rsp+0x40]
 10303bd:	call   QWORD PTR [rip+0xfffffffffffd16e5]        # 0x1001aa8
 10303c3:	nop
 10303c4:	lea    rcx,[rsp+0x48]
 10303c9:	call   QWORD PTR [rip+0xfffffffffffd16d9]        # 0x1001aa8
 10303cf:	movzx  eax,sil
 10303d3:	jmp    0x10303e2
 10303d5:	lea    rcx,[rsp+0x48]
 10303da:	call   QWORD PTR [rip+0xfffffffffffd16c8]        # 0x1001aa8
 10303e0:	mov    al,0x1
 10303e2:	mov    rcx,QWORD PTR [rbp+0x9a0]
 10303e9:	xor    rcx,rsp
 10303ec:	call   0x103ff40
 10303f1:	lea    r11,[rsp+0xab0]
 10303f9:	mov    rbx,QWORD PTR [r11+0x30]
 10303fd:	mov    rsi,QWORD PTR [r11+0x38]
 1030401:	mov    rsp,r11
 1030404:	pop    r14
 1030406:	pop    rdi
 1030407:	pop    rbp
 1030408:	ret    
 1030409:	int3   
 103040a:	int3   
 103040b:	int3   
 103040c:	int3   
 103040d:	int3   
 103040e:	int3   
 103040f:	int3   
 1030410:	mov    QWORD PTR [rsp+0x18],rbx
 1030415:	push   rdi
 1030416:	sub    rsp,0x80
 103041d:	mov    rax,QWORD PTR [rip+0x3344c]        # 0x1063870
 1030424:	xor    rax,rsp
 1030427:	mov    QWORD PTR [rsp+0x70],rax
 103042c:	mov    rdi,rcx
 103042f:	lea    rcx,[rsp+0x60]
 1030434:	mov    rbx,rdx
 1030437:	call   QWORD PTR [rip+0xfffffffffffd0e23]        # 0x1001260
 103043d:	movzx  r11d,WORD PTR [rsp+0x6e]
 1030443:	movzx  ecx,WORD PTR [rsp+0x6c]
 1030448:	movzx  r8d,WORD PTR [rsp+0x6a]
 103044e:	movzx  r9d,WORD PTR [rsp+0x68]
 1030454:	movzx  r10d,WORD PTR [rsp+0x66]
 103045a:	mov    eax,0x66666667
 103045f:	imul   r11d
 1030462:	movzx  r11d,WORD PTR [rsp+0x62]
 1030468:	sar    edx,0x2
 103046b:	mov    eax,edx
 103046d:	shr    eax,0x1f
 1030470:	add    edx,eax
 1030472:	movzx  eax,WORD PTR [rsp+0x60]
 1030477:	mov    DWORD PTR [rsp+0x50],edx
 103047b:	mov    DWORD PTR [rsp+0x48],ecx
 103047f:	mov    DWORD PTR [rsp+0x40],r8d
 1030484:	mov    DWORD PTR [rsp+0x38],r9d
 1030489:	mov    DWORD PTR [rsp+0x30],r10d
 103048e:	mov    DWORD PTR [rsp+0x28],r11d
 1030493:	lea    r9,[rip+0xfffffffffffd2ed6]        # 0x1003370
 103049a:	or     r8,0xffffffffffffffff
 103049e:	mov    rdx,rbx
 10304a1:	mov    rcx,rdi
 10304a4:	mov    DWORD PTR [rsp+0x20],eax
 10304a8:	call   QWORD PTR [rip+0xfffffffffffd12a2]        # 0x1001750
 10304ae:	mov    rax,rdi
 10304b1:	mov    rcx,QWORD PTR [rsp+0x70]
 10304b6:	xor    rcx,rsp
 10304b9:	call   0x103ff40
 10304be:	mov    rbx,QWORD PTR [rsp+0xa0]
 10304c6:	add    rsp,0x80
 10304cd:	pop    rdi
 10304ce:	ret    
 10304cf:	int3   
 10304d0:	int3   
 10304d1:	int3   
 10304d2:	int3   
 10304d3:	int3   
 10304d4:	int3   
 10304d5:	int3   
 10304d6:	int3   
 10304d7:	int3   
 10304d8:	int3   
 10304d9:	int3   
 10304da:	int3   
 10304db:	int3   
 10304dc:	int3   
 10304dd:	int3   
 10304de:	int3   
 10304df:	int3   
 10304e0:	rex push rbx
 10304e2:	sub    rsp,0x40
 10304e6:	mov    eax,DWORD PTR [rcx]
 10304e8:	mov    r8d,DWORD PTR [rcx+0x10]
 10304ec:	mov    r9d,DWORD PTR [rcx+0xc]
 10304f0:	mov    DWORD PTR [rsp+0x38],0xffffffff
 10304f8:	mov    DWORD PTR [rsp+0x30],eax
 10304fc:	mov    eax,DWORD PTR [rcx+0x4]
 10304ff:	mov    rbx,rdx
 1030502:	mov    edx,DWORD PTR [rcx+0x14]
 1030505:	mov    DWORD PTR [rsp+0x28],eax
 1030509:	mov    eax,DWORD PTR [rcx+0x8]
 103050c:	lea    rcx,[rsp+0x50]
 1030511:	inc    r8d
 1030514:	add    edx,0x76c
 103051a:	mov    DWORD PTR [rsp+0x20],eax
 103051e:	call   0x102fef0
 1030523:	movzx  ecx,WORD PTR [rbx+0x8]
 1030527:	movzx  r11d,WORD PTR [rbx+0xc]
 103052c:	movzx  eax,WORD PTR [rbx+0xa]
 1030530:	movzx  r9d,WORD PTR [rbx+0x6]
 1030535:	movzx  r8d,WORD PTR [rbx+0x2]
 103053a:	movzx  edx,WORD PTR [rbx]
 103053d:	mov    DWORD PTR [rsp+0x38],0xffffffff
 1030545:	mov    DWORD PTR [rsp+0x30],r11d
 103054a:	mov    DWORD PTR [rsp+0x28],eax
 103054e:	mov    DWORD PTR [rsp+0x20],ecx
 1030552:	lea    rcx,[rsp+0x58]
 1030557:	call   0x102fef0
 103055c:	mov    rax,QWORD PTR [rsp+0x50]
 1030561:	sub    rax,QWORD PTR [rsp+0x58]
 1030566:	add    rsp,0x40
 103056a:	pop    rbx
 103056b:	ret    
 103056c:	int3   
 103056d:	int3   
 103056e:	int3   
 103056f:	int3   
 1030570:	int3   
 1030571:	int3   
 1030572:	int3   
 1030573:	int3   
 1030574:	int3   
 1030575:	int3   
 1030576:	int3   
 1030577:	int3   
 1030578:	int3   
 1030579:	int3   
 103057a:	int3   
 103057b:	int3   
 103057c:	int3   
 103057d:	int3   
 103057e:	int3   
 103057f:	int3   
 1030580:	mov    QWORD PTR [rsp+0x18],rbx
 1030585:	push   rdi
 1030586:	sub    rsp,0x80
 103058d:	mov    rax,QWORD PTR [rip+0x332dc]        # 0x1063870
 1030594:	xor    rax,rsp
 1030597:	mov    QWORD PTR [rsp+0x70],rax
 103059c:	movzx  eax,WORD PTR [rcx+0xc]
 10305a0:	movzx  r10d,WORD PTR [rcx+0xa]
 10305a5:	movzx  r11d,WORD PTR [rcx+0x8]
 10305aa:	movzx  r9d,WORD PTR [rcx+0x6]
 10305af:	movzx  r8d,WORD PTR [rcx+0x2]
 10305b4:	mov    DWORD PTR [rsp+0x38],0xffffffff
 10305bc:	mov    DWORD PTR [rsp+0x30],eax
 10305c0:	movsxd rbx,edx
 10305c3:	movzx  edx,WORD PTR [rcx]
 10305c6:	mov    rdi,rcx
 10305c9:	mov    DWORD PTR [rsp+0x28],r10d
 10305ce:	lea    rcx,[rsp+0x40]
 10305d3:	mov    DWORD PTR [rsp+0x20],r11d
 10305d8:	call   0x102fef0
 10305dd:	mov    r11,rbx
 10305e0:	imul   r11,r11,0x15180
 10305e7:	add    QWORD PTR [rsp+0x40],r11
 10305ec:	lea    rdx,[rsp+0x40]
 10305f1:	lea    rcx,[rsp+0x48]
 10305f6:	call   QWORD PTR [rip+0xfffffffffffd1044]        # 0x1001640
 10305fc:	test   eax,eax
 10305fe:	jne    0x103064f
 1030600:	movzx  eax,WORD PTR [rsp+0x5c]
 1030605:	mov    ecx,0x76c
 103060a:	add    ax,cx
 103060d:	mov    WORD PTR [rdi],ax
 1030610:	movzx  eax,WORD PTR [rsp+0x58]
 1030615:	inc    ax
 1030618:	mov    WORD PTR [rdi+0x2],ax
 103061c:	movzx  eax,WORD PTR [rsp+0x60]
 1030621:	mov    WORD PTR [rdi+0x4],ax
 1030625:	movzx  eax,WORD PTR [rsp+0x54]
 103062a:	mov    WORD PTR [rdi+0x6],ax
 103062e:	movzx  eax,WORD PTR [rsp+0x50]
 1030633:	mov    WORD PTR [rdi+0x8],ax
 1030637:	movzx  eax,WORD PTR [rsp+0x4c]
 103063c:	mov    WORD PTR [rdi+0xa],ax
 1030640:	movzx  eax,WORD PTR [rsp+0x48]
 1030645:	mov    WORD PTR [rdi+0xc],ax
 1030649:	xor    eax,eax
 103064b:	mov    WORD PTR [rdi+0xe],ax
 103064f:	mov    al,0x1
 1030651:	mov    rcx,QWORD PTR [rsp+0x70]
 1030656:	xor    rcx,rsp
 1030659:	call   0x103ff40
 103065e:	mov    rbx,QWORD PTR [rsp+0xa0]
 1030666:	add    rsp,0x80
 103066d:	pop    rdi
 103066e:	ret    
 103066f:	int3   
 1030670:	int3   
 1030671:	int3   
 1030672:	int3   
 1030673:	int3   
 1030674:	int3   
 1030675:	int3   
 1030676:	int3   
 1030677:	int3   
 1030678:	int3   
 1030679:	int3   
 103067a:	int3   
 103067b:	int3   
 103067c:	int3   
 103067d:	int3   
 103067e:	int3   
 103067f:	int3   
 1030680:	mov    QWORD PTR [rsp+0x10],rbx
 1030685:	mov    QWORD PTR [rsp+0x18],rsi
 103068a:	push   rdi
 103068b:	sub    rsp,0x80
 1030692:	mov    rax,QWORD PTR [rip+0x331d7]        # 0x1063870
 1030699:	xor    rax,rsp
 103069c:	mov    QWORD PTR [rsp+0x78],rax
 10306a1:	lea    rax,[rsp+0x68]
 10306a6:	mov    rsi,rcx
 10306a9:	lea    rcx,[rsp+0x70]
 10306ae:	mov    QWORD PTR [rsp+0x50],rax
 10306b3:	xor    eax,eax
 10306b5:	mov    r9d,0x220
 10306bb:	mov    DWORD PTR [rsp+0x48],eax
 10306bf:	mov    DWORD PTR [rsp+0x40],eax
 10306c3:	mov    DWORD PTR [rsp+0x38],eax
 10306c7:	mov    DWORD PTR [rsp+0x30],eax
 10306cb:	mov    DWORD PTR [rsp+0x28],eax
 10306cf:	lea    r8d,[rax+0x20]
 10306d3:	mov    dl,0x2
 10306d5:	mov    DWORD PTR [rsp+0x20],eax
 10306d9:	xor    dil,dil
 10306dc:	mov    DWORD PTR [rsp+0x70],0x0
 10306e4:	mov    WORD PTR [rsp+0x74],0x500
 10306eb:	call   QWORD PTR [rip+0xfffffffffffd096f]        # 0x1001060
 10306f1:	test   eax,eax
 10306f3:	je     0x1030748
 10306f5:	mov    rdx,QWORD PTR [rsp+0x68]
 10306fa:	lea    r8,[rsp+0x60]
 10306ff:	xor    ecx,ecx
 1030701:	call   QWORD PTR [rip+0xfffffffffffd09b1]        # 0x10010b8
 1030707:	test   eax,eax
 1030709:	je     0x1030721
 103070b:	cmp    DWORD PTR [rsp+0x60],0x0
 1030710:	mov    rcx,QWORD PTR [rsp+0x68]
 1030715:	setne  dil
 1030719:	call   QWORD PTR [rip+0xfffffffffffd0949]        # 0x1001068
 103071f:	jmp    0x1030762
 1030721:	mov    rbx,QWORD PTR [rsi]
 1030724:	call   QWORD PTR [rip+0xfffffffffffd0e26]        # 0x1001550
 103072a:	mov    r9b,0x1
 103072d:	mov    r8d,0xc000c467
 1030733:	mov    rcx,rsi
 1030736:	mov    edx,eax
 1030738:	call   QWORD PTR [rbx+0x20]
 103073b:	mov    rcx,QWORD PTR [rsp+0x68]
 1030740:	call   QWORD PTR [rip+0xfffffffffffd0922]        # 0x1001068
 1030746:	jmp    0x1030762
 1030748:	mov    rbx,QWORD PTR [rsi]
 103074b:	call   QWORD PTR [rip+0xfffffffffffd0dff]        # 0x1001550
 1030751:	mov    r9b,0x1
 1030754:	mov    r8d,0xc000c467
 103075a:	mov    rcx,rsi
 103075d:	mov    edx,eax
 103075f:	call   QWORD PTR [rbx+0x20]
 1030762:	movzx  eax,dil
 1030766:	mov    rcx,QWORD PTR [rsp+0x78]
 103076b:	xor    rcx,rsp
 103076e:	call   0x103ff40
 1030773:	lea    r11,[rsp+0x80]
 103077b:	mov    rbx,QWORD PTR [r11+0x18]
 103077f:	mov    rsi,QWORD PTR [r11+0x20]
 1030783:	mov    rsp,r11
 1030786:	pop    rdi
 1030787:	ret    
 1030788:	int3   
 1030789:	int3   
 103078a:	int3   
 103078b:	int3   
 103078c:	int3   
 103078d:	int3   
 103078e:	int3   
 103078f:	int3   
 1030790:	mov    QWORD PTR [rsp+0x10],rbx
 1030795:	mov    QWORD PTR [rsp+0x18],rsi
 103079a:	mov    QWORD PTR [rsp+0x8],rcx
 103079f:	push   rdi
 10307a0:	sub    rsp,0x20
 10307a4:	mov    rsi,rcx
 10307a7:	call   QWORD PTR [rip+0xfffffffffffd1343]        # 0x1001af0
 10307ad:	movsxd rbx,eax
 10307b0:	add    rbx,rbx
 10307b3:	mov    rcx,rsi
 10307b6:	call   QWORD PTR [rip+0xfffffffffffd1334]        # 0x1001af0
 10307bc:	mov    edx,eax
 10307be:	mov    rcx,rsi
 10307c1:	call   QWORD PTR [rip+0xfffffffffffd1221]        # 0x10019e8
 10307c7:	mov    rdi,rax
 10307ca:	xor    eax,eax
 10307cc:	mov    rcx,rbx
 10307cf:	rep stos BYTE PTR es:[rdi],al
 10307d1:	or     edx,0xffffffff
 10307d4:	mov    rcx,rsi
 10307d7:	call   QWORD PTR [rip+0xfffffffffffd1203]        # 0x10019e0
 10307dd:	mov    rbx,QWORD PTR [rsp+0x38]
 10307e2:	mov    rsi,QWORD PTR [rsp+0x40]
 10307e7:	add    rsp,0x20
 10307eb:	pop    rdi
 10307ec:	ret    
 10307ed:	int3   
 10307ee:	int3   
 10307ef:	int3   
 10307f0:	int3   
 10307f1:	int3   
 10307f2:	int3   
 10307f3:	int3   
 10307f4:	int3   
 10307f5:	int3   
 10307f6:	int3   
 10307f7:	int3   
 10307f8:	int3   
 10307f9:	int3   
 10307fa:	int3   
 10307fb:	int3   
 10307fc:	int3   
 10307fd:	int3   
 10307fe:	int3   
 10307ff:	int3   
 1030800:	mov    QWORD PTR [rsp+0x8],rcx
 1030805:	push   rdi
 1030806:	sub    rsp,0x50
 103080a:	mov    QWORD PTR [rsp+0x40],0xfffffffffffffffe
 1030813:	mov    QWORD PTR [rsp+0x68],rbx
 1030818:	mov    rbx,rdx
 103081b:	mov    rdi,rcx
 103081e:	mov    DWORD PTR [rsp+0x20],0x0
 1030826:	mov    rdx,r8
 1030829:	call   QWORD PTR [rip+0xfffffffffffd1281]        # 0x1001ab0
 103082f:	mov    DWORD PTR [rsp+0x20],0x1
 1030837:	mov    rdx,rbx
 103083a:	lea    rcx,[rsp+0x78]
 103083f:	call   QWORD PTR [rip+0xfffffffffffd126b]        # 0x1001ab0
 1030845:	nop
 1030846:	xor    r8d,r8d
 1030849:	lea    rdx,[rip+0xfffffffffffd68b8]        # 0x1007108
 1030850:	mov    rcx,rdi
 1030853:	call   QWORD PTR [rip+0xfffffffffffd11ff]        # 0x1001a58
 1030859:	cmp    eax,0xffffffff
 103085c:	je     0x10308e7
 1030862:	lea    r8,[rip+0xfffffffffffd68a3]        # 0x100710c
 1030869:	lea    rdx,[rip+0xfffffffffffd6898]        # 0x1007108
 1030870:	mov    rcx,rdi
 1030873:	call   QWORD PTR [rip+0xfffffffffffd1137]        # 0x10019b0
 1030879:	lea    r8,[rsp+0x78]
 103087e:	lea    rdx,[rip+0xfffffffffffd5703]        # 0x1005f88
 1030885:	lea    rcx,[rsp+0x38]
 103088a:	call   0x1013d70
 103088f:	nop
 1030890:	lea    r8,[rip+0xfffffffffffd3e9d]        # 0x1004734
 1030897:	mov    rdx,rax
 103089a:	lea    rcx,[rsp+0x30]
 103089f:	call   0x100af10
 10308a4:	nop
 10308a5:	mov    r8,rdi
 10308a8:	mov    rdx,rax
 10308ab:	lea    rcx,[rsp+0x28]
 10308b0:	call   0x1013cc0
 10308b5:	nop
 10308b6:	mov    rdx,rax
 10308b9:	mov    rcx,rdi
 10308bc:	call   QWORD PTR [rip+0xfffffffffffd11de]        # 0x1001aa0
 10308c2:	nop
 10308c3:	lea    rcx,[rsp+0x28]
 10308c8:	call   QWORD PTR [rip+0xfffffffffffd11da]        # 0x1001aa8
 10308ce:	nop
 10308cf:	lea    rcx,[rsp+0x30]
 10308d4:	call   QWORD PTR [rip+0xfffffffffffd11ce]        # 0x1001aa8
 10308da:	nop
 10308db:	lea    rcx,[rsp+0x38]
 10308e0:	call   QWORD PTR [rip+0xfffffffffffd11c2]        # 0x1001aa8
 10308e6:	nop
 10308e7:	lea    rcx,[rsp+0x78]
 10308ec:	call   QWORD PTR [rip+0xfffffffffffd11b6]        # 0x1001aa8
 10308f2:	mov    rax,rdi
 10308f5:	mov    rbx,QWORD PTR [rsp+0x68]
 10308fa:	add    rsp,0x50
 10308fe:	pop    rdi
 10308ff:	ret    
 1030900:	int3   
 1030901:	int3   
 1030902:	int3   
 1030903:	int3   
 1030904:	int3   
 1030905:	int3   
 1030906:	int3   
 1030907:	int3   
 1030908:	int3   
 1030909:	int3   
 103090a:	int3   
 103090b:	int3   
 103090c:	int3   
 103090d:	int3   
 103090e:	int3   
 103090f:	int3   
 1030910:	mov    rax,rsp
 1030913:	push   rdi
 1030914:	sub    rsp,0x70
 1030918:	mov    QWORD PTR [rax-0x28],0xfffffffffffffffe
 1030920:	mov    QWORD PTR [rax+0x8],rbx
 1030924:	mov    rdi,rdx
 1030927:	mov    rbx,rcx
 103092a:	lea    rcx,[rax+0x18]
 103092e:	call   QWORD PTR [rip+0xfffffffffffd118c]        # 0x1001ac0
 1030934:	nop
 1030935:	mov    r9,rbx
 1030938:	mov    r8,rbx
 103093b:	lea    rdx,[rip+0xfffffffffffd67ce]        # 0x1007110
 1030942:	lea    rcx,[rsp+0x90]
 103094a:	call   QWORD PTR [rip+0xfffffffffffd10f0]        # 0x1001a40
 1030950:	lea    rcx,[rsp+0x90]
 1030958:	call   QWORD PTR [rip+0xfffffffffffd118a]        # 0x1001ae8
 103095e:	mov    rdx,rax
 1030961:	mov    BYTE PTR [rsp+0x40],0x0
 1030966:	mov    QWORD PTR [rsp+0x38],0xffffffffffffffff
 103096f:	mov    DWORD PTR [rsp+0x30],0x20
 1030977:	lea    rax,[rsp+0x58]
 103097c:	mov    QWORD PTR [rsp+0x28],rax
 1030981:	mov    DWORD PTR [rsp+0x20],0x1
 1030989:	mov    r9b,0x1
 103098c:	xor    r8d,r8d
 103098f:	mov    rcx,rdi
 1030992:	call   0x1031540
 1030997:	mov    ebx,eax
 1030999:	lea    rcx,[rsp+0x90]
 10309a1:	call   QWORD PTR [rip+0xfffffffffffd1101]        # 0x1001aa8
 10309a7:	mov    eax,ebx
 10309a9:	mov    rbx,QWORD PTR [rsp+0x80]
 10309b1:	add    rsp,0x70
 10309b5:	pop    rdi
 10309b6:	ret    
 10309b7:	int3   
 10309b8:	int3   
 10309b9:	int3   
 10309ba:	int3   
 10309bb:	int3   
 10309bc:	int3   
 10309bd:	int3   
 10309be:	int3   
 10309bf:	int3   
 10309c0:	mov    QWORD PTR [rsp+0x8],rcx
 10309c5:	push   rdi
 10309c6:	sub    rsp,0x30
 10309ca:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
 10309d3:	mov    QWORD PTR [rsp+0x48],rbx
 10309d8:	mov    rbx,rcx
 10309db:	mov    DWORD PTR [rsp+0x20],0x0
 10309e3:	call   QWORD PTR [rip+0xfffffffffffd10c7]        # 0x1001ab0
 10309e9:	mov    DWORD PTR [rsp+0x20],0x1
 10309f1:	mov    r8d,0x1
 10309f7:	lea    rdx,[rsp+0x50]
 10309fc:	mov    rcx,rbx
 10309ff:	call   QWORD PTR [rip+0xfffffffffffd0f23]        # 0x1001928
 1030a05:	mov    rdi,rax
 1030a08:	mov    rcx,rax
 1030a0b:	call   QWORD PTR [rip+0xfffffffffffd10df]        # 0x1001af0
 1030a11:	cmp    eax,0x1
 1030a14:	jne    0x1030a2c
 1030a16:	xor    edx,edx
 1030a18:	mov    rcx,rdi
 1030a1b:	call   QWORD PTR [rip+0xfffffffffffd0faf]        # 0x10019d0
 1030a21:	cmp    ax,0x5c
 1030a25:	jne    0x1030a2c
 1030a27:	xor    dil,dil
 1030a2a:	jmp    0x1030a2f
 1030a2c:	mov    dil,0x1
 1030a2f:	lea    rcx,[rsp+0x50]
 1030a34:	call   QWORD PTR [rip+0xfffffffffffd106e]        # 0x1001aa8
 1030a3a:	test   dil,dil
 1030a3d:	je     0x1030a4f
 1030a3f:	lea    rdx,[rip+0xfffffffffffd3cee]        # 0x1004734
 1030a46:	mov    rcx,rbx
 1030a49:	call   QWORD PTR [rip+0xfffffffffffd1041]        # 0x1001a90
 1030a4f:	mov    rax,rbx
 1030a52:	mov    rbx,QWORD PTR [rsp+0x48]
 1030a57:	add    rsp,0x30
 1030a5b:	pop    rdi
 1030a5c:	ret    
 1030a5d:	int3   
 1030a5e:	int3   
 1030a5f:	int3   
 1030a60:	int3   
 1030a61:	int3   
 1030a62:	int3   
 1030a63:	int3   
 1030a64:	int3   
 1030a65:	int3   
 1030a66:	int3   
 1030a67:	int3   
 1030a68:	int3   
 1030a69:	int3   
 1030a6a:	int3   
 1030a6b:	int3   
 1030a6c:	int3   
 1030a6d:	int3   
 1030a6e:	int3   
 1030a6f:	int3   
 1030a70:	sub    rsp,0x28
 1030a74:	call   QWORD PTR [rip+0xfffffffffffd0776]        # 0x10011f0
 1030a7a:	cmp    eax,0xffffffff
 1030a7d:	je     0x1030a8d
 1030a7f:	and    eax,0x10
 1030a82:	test   al,al
 1030a84:	je     0x1030a8d
 1030a86:	mov    al,0x1
 1030a88:	add    rsp,0x28
 1030a8c:	ret    
 1030a8d:	xor    al,al
 1030a8f:	add    rsp,0x28
 1030a93:	ret    
 1030a94:	int3   
 1030a95:	int3   
 1030a96:	int3   
 1030a97:	int3   
 1030a98:	int3   
 1030a99:	int3   
 1030a9a:	int3   
 1030a9b:	int3   
 1030a9c:	int3   
 1030a9d:	int3   
 1030a9e:	int3   
 1030a9f:	int3   
 1030aa0:	rex push rbx
 1030aa2:	sub    rsp,0x50
 1030aa6:	mov    QWORD PTR [rsp+0x40],0xfffffffffffffffe
 1030aaf:	mov    QWORD PTR [rsp+0x30],0x0
 1030ab8:	mov    DWORD PTR [rsp+0x28],0x100080
 1030ac0:	mov    DWORD PTR [rsp+0x20],0x3
 1030ac8:	xor    r9d,r9d
 1030acb:	mov    edx,0x80000000
 1030ad0:	lea    r8d,[r9+0x1]
 1030ad4:	call   QWORD PTR [rip+0xfffffffffffd0706]        # 0x10011e0
 1030ada:	mov    QWORD PTR [rsp+0x68],rax
 1030adf:	cmp    rax,0xffffffffffffffff
 1030ae3:	setne  bl
 1030ae6:	cmp    rax,0xffffffffffffffff
 1030aea:	je     0x1030afe
 1030aec:	mov    rcx,rax
 1030aef:	call   QWORD PTR [rip+0xfffffffffffd09e3]        # 0x10014d8
 1030af5:	mov    QWORD PTR [rsp+0x68],0xffffffffffffffff
 1030afe:	movzx  eax,bl
 1030b01:	add    rsp,0x50
 1030b05:	pop    rbx
 1030b06:	ret    
 1030b07:	int3   
 1030b08:	int3   
 1030b09:	int3   
 1030b0a:	int3   
 1030b0b:	int3   
 1030b0c:	int3   
 1030b0d:	int3   
 1030b0e:	int3   
 1030b0f:	int3   
 1030b10:	rex push rsi
 1030b12:	push   rdi
 1030b13:	push   r12
 1030b15:	push   r14
 1030b17:	push   r15
 1030b19:	sub    rsp,0x8b0
 1030b20:	mov    QWORD PTR [rsp+0x98],0xfffffffffffffffe
 1030b2c:	mov    QWORD PTR [rsp+0x8e8],rbx
 1030b34:	mov    rax,QWORD PTR [rip+0x32d35]        # 0x1063870
 1030b3b:	xor    rax,rsp
 1030b3e:	mov    QWORD PTR [rsp+0x8a0],rax
 1030b46:	mov    rsi,r8
 1030b49:	mov    r15,rcx
 1030b4c:	mov    QWORD PTR [rsp+0x60],r8
 1030b51:	mov    BYTE PTR [rsp+0x40],0x0
 1030b56:	test   dl,dl
 1030b58:	jne    0x1030b6a
 1030b5a:	call   0x1030aa0
 1030b5f:	test   al,al
 1030b61:	je     0x1030b6a
 1030b63:	mov    al,0x1
 1030b65:	jmp    0x1030d3f
 1030b6a:	lea    rcx,[rsp+0x50]
 1030b6f:	call   QWORD PTR [rip+0xfffffffffffd0f4b]        # 0x1001ac0
 1030b75:	nop
 1030b76:	mov    eax,0x1
 1030b7b:	xchg   DWORD PTR [rip+0x32eff],eax        # 0x1063a80
 1030b81:	cmp    eax,0x1
 1030b84:	jne    0x1030ba1
 1030b86:	xor    ecx,ecx
 1030b88:	call   QWORD PTR [rip+0xfffffffffffd09ba]        # 0x1001548
 1030b8e:	mov    r11d,0x1
 1030b94:	xchg   DWORD PTR [rip+0x32ee5],r11d        # 0x1063a80
 1030b9b:	cmp    r11d,0x1
 1030b9f:	je     0x1030b86
 1030ba1:	mov    r8b,0x1
 1030ba4:	mov    rdx,r15
 1030ba7:	lea    rcx,[rsp+0x58]
 1030bac:	call   0x1031010
 1030bb1:	nop
 1030bb2:	mov    rcx,rax
 1030bb5:	call   QWORD PTR [rip+0xfffffffffffd0f2d]        # 0x1001ae8
 1030bbb:	mov    rdx,rax
 1030bbe:	xor    ecx,ecx
 1030bc0:	lea    r8d,[rcx+0xa]
 1030bc4:	call   QWORD PTR [rip+0xfffffffffffd08c6]        # 0x1001490
 1030bca:	mov    rdi,rax
 1030bcd:	mov    QWORD PTR [rsp+0x70],rax
 1030bd2:	lea    rcx,[rsp+0x58]
 1030bd7:	call   QWORD PTR [rip+0xfffffffffffd0ecb]        # 0x1001aa8
 1030bdd:	test   rdi,rdi
 1030be0:	je     0x1030d23
 1030be6:	mov    rdx,rdi
 1030be9:	xor    ecx,ecx
 1030beb:	call   QWORD PTR [rip+0xfffffffffffd0887]        # 0x1001478
 1030bf1:	mov    QWORD PTR [rsp+0x88],rax
 1030bf9:	test   rax,rax
 1030bfc:	je     0x1030d09
 1030c02:	mov    rcx,rax
 1030c05:	call   QWORD PTR [rip+0xfffffffffffd0845]        # 0x1001450
 1030c0b:	mov    rbx,rax
 1030c0e:	mov    QWORD PTR [rsp+0x78],rax
 1030c13:	test   rax,rax
 1030c16:	je     0x1030cf8
 1030c1c:	mov    QWORD PTR [rsp+0x48],0xffffffffffffffff
 1030c25:	mov    rdx,rdi
 1030c28:	xor    ecx,ecx
 1030c2a:	call   QWORD PTR [rip+0xfffffffffffd0850]        # 0x1001480
 1030c30:	mov    r12d,eax
 1030c33:	mov    DWORD PTR [rsp+0x68],eax
 1030c37:	xor    edi,edi
 1030c39:	mov    QWORD PTR [rsp+0x30],rdi
 1030c3e:	mov    DWORD PTR [rsp+0x28],0x100080
 1030c46:	mov    DWORD PTR [rsp+0x20],0x2
 1030c4e:	xor    r9d,r9d
 1030c51:	xor    r8d,r8d
 1030c54:	mov    edx,0x40000000
 1030c59:	mov    rcx,r15
 1030c5c:	call   QWORD PTR [rip+0xfffffffffffd057e]        # 0x10011e0
 1030c62:	mov    r14,rax
 1030c65:	mov    QWORD PTR [rsp+0x80],rax
 1030c6d:	mov    QWORD PTR [rsp+0x48],rax
 1030c72:	cmp    rax,0xffffffffffffffff
 1030c76:	je     0x1030cb1
 1030c78:	mov    QWORD PTR [rsp+0x20],rdi
 1030c7d:	lea    r9,[rsp+0x6c]
 1030c82:	mov    r8d,r12d
 1030c85:	mov    rdx,rbx
 1030c88:	mov    rcx,rax
 1030c8b:	call   QWORD PTR [rip+0xfffffffffffd05bf]        # 0x1001250
 1030c91:	test   eax,eax
 1030c93:	jne    0x1030cd9
 1030c95:	mov    rbx,QWORD PTR [rsi]
 1030c98:	call   QWORD PTR [rip+0xfffffffffffd08b2]        # 0x1001550
 1030c9e:	mov    edx,eax
 1030ca0:	xor    r9d,r9d
 1030ca3:	mov    r8d,0xc000c44a
 1030ca9:	mov    rcx,rsi
 1030cac:	call   QWORD PTR [rbx+0x20]
 1030caf:	jmp    0x1030cde
 1030cb1:	mov    rcx,r15
 1030cb4:	call   0x1030aa0
 1030cb9:	test   al,al
 1030cbb:	jne    0x1030cd9
 1030cbd:	mov    rbx,QWORD PTR [rsi]
 1030cc0:	call   QWORD PTR [rip+0xfffffffffffd088a]        # 0x1001550
 1030cc6:	mov    edx,eax
 1030cc8:	xor    r9d,r9d
 1030ccb:	mov    r8d,0xc000c449
 1030cd1:	mov    rcx,rsi
 1030cd4:	call   QWORD PTR [rbx+0x20]
 1030cd7:	jmp    0x1030cde
 1030cd9:	mov    BYTE PTR [rsp+0x40],0x1
 1030cde:	cmp    r14,0xffffffffffffffff
 1030ce2:	je     0x1030d25
 1030ce4:	mov    rcx,r14
 1030ce7:	call   QWORD PTR [rip+0xfffffffffffd07eb]        # 0x10014d8
 1030ced:	mov    QWORD PTR [rsp+0x48],0xffffffffffffffff
 1030cf6:	jmp    0x1030d25
 1030cf8:	mov    rbx,QWORD PTR [rsi]
 1030cfb:	call   QWORD PTR [rip+0xfffffffffffd084f]        # 0x1001550
 1030d01:	mov    r8d,0xc000c447
 1030d07:	jmp    0x1030d18
 1030d09:	mov    rbx,QWORD PTR [rsi]
 1030d0c:	call   QWORD PTR [rip+0xfffffffffffd083e]        # 0x1001550
 1030d12:	mov    r8d,0xc000c448
 1030d18:	xor    r9d,r9d
 1030d1b:	mov    edx,eax
 1030d1d:	mov    rcx,rsi
 1030d20:	call   QWORD PTR [rbx+0x20]
 1030d23:	xor    edi,edi
 1030d25:	jmp    0x1030d29
 1030d27:	xor    edi,edi
 1030d29:	xchg   DWORD PTR [rip+0x32d51],edi        # 0x1063a80
 1030d2f:	lea    rcx,[rsp+0x50]
 1030d34:	call   QWORD PTR [rip+0xfffffffffffd0d6e]        # 0x1001aa8
 1030d3a:	movzx  eax,BYTE PTR [rsp+0x40]
 1030d3f:	mov    rcx,QWORD PTR [rsp+0x8a0]
 1030d47:	xor    rcx,rsp
 1030d4a:	call   0x103ff40
 1030d4f:	mov    rbx,QWORD PTR [rsp+0x8e8]
 1030d57:	add    rsp,0x8b0
 1030d5e:	pop    r15
 1030d60:	pop    r14
 1030d62:	pop    r12
 1030d64:	pop    rdi
 1030d65:	pop    rsi
 1030d66:	ret    
 1030d67:	int3   
 1030d68:	int3   
 1030d69:	int3   
 1030d6a:	int3   
 1030d6b:	int3   
 1030d6c:	int3   
 1030d6d:	int3   
 1030d6e:	int3   
 1030d6f:	int3   
 1030d70:	rex push rsi
 1030d72:	push   rdi
 1030d73:	push   r14
 1030d75:	sub    rsp,0x50
 1030d79:	mov    QWORD PTR [rsp+0x48],0xfffffffffffffffe
 1030d82:	mov    QWORD PTR [rsp+0x70],rbx
 1030d87:	mov    QWORD PTR [rsp+0x78],rbp
 1030d8c:	mov    rsi,r8
 1030d8f:	mov    r14,rdx
 1030d92:	xor    dil,dil
 1030d95:	mov    QWORD PTR [rsp+0x30],0x0
 1030d9e:	mov    DWORD PTR [rsp+0x28],0x100080
 1030da6:	mov    DWORD PTR [rsp+0x20],0x2
 1030dae:	xor    r9d,r9d
 1030db1:	mov    edx,0x40000000
 1030db6:	lea    r8d,[r9+0x1]
 1030dba:	call   QWORD PTR [rip+0xfffffffffffd0420]        # 0x10011e0
 1030dc0:	mov    rbp,rax
 1030dc3:	mov    QWORD PTR [rsp+0x40],rax
 1030dc8:	cmp    rax,0xffffffffffffffff
 1030dcc:	je     0x1030e6a
 1030dd2:	xor    r8d,r8d
 1030dd5:	mov    rdx,rsi
 1030dd8:	mov    rcx,rax
 1030ddb:	call   0x1030ec0
 1030de0:	test   al,al
 1030de2:	jne    0x1030e04
 1030de4:	mov    rbx,QWORD PTR [rsi]
 1030de7:	call   QWORD PTR [rip+0xfffffffffffd0763]        # 0x1001550
 1030ded:	mov    edx,eax
 1030def:	mov    BYTE PTR [rsp+0x28],0x1
 1030df4:	mov    BYTE PTR [rsp+0x20],0x1
 1030df9:	xor    r9d,r9d
 1030dfc:	xor    r8d,r8d
 1030dff:	mov    rcx,rsi
 1030e02:	call   QWORD PTR [rbx]
 1030e04:	or     rax,0xffffffffffffffff
 1030e08:	nop    DWORD PTR [rax+rax*1+0x0]
 1030e10:	inc    rax
 1030e13:	cmp    WORD PTR [r14+rax*2],0x0
 1030e19:	jne    0x1030e10
 1030e1b:	lea    r8d,[rax+rax*1]
 1030e1f:	mov    QWORD PTR [rsp+0x20],0x0
 1030e28:	lea    r9,[rsp+0x88]
 1030e30:	mov    rdx,r14
 1030e33:	mov    rcx,rbp
 1030e36:	call   QWORD PTR [rip+0xfffffffffffd0414]        # 0x1001250
 1030e3c:	test   eax,eax
 1030e3e:	jne    0x1030e65
 1030e40:	mov    rbx,QWORD PTR [rsi]
 1030e43:	call   QWORD PTR [rip+0xfffffffffffd0707]        # 0x1001550
 1030e49:	mov    edx,eax
 1030e4b:	mov    BYTE PTR [rsp+0x28],0x1
 1030e50:	mov    BYTE PTR [rsp+0x20],0x1
 1030e55:	xor    r9d,r9d
 1030e58:	xor    r8d,r8d
 1030e5b:	mov    rcx,rsi
 1030e5e:	call   QWORD PTR [rbx]
 1030e60:	xor    dil,dil
 1030e63:	jmp    0x1030e8b
 1030e65:	mov    dil,0x1
 1030e68:	jmp    0x1030e8b
 1030e6a:	mov    rbx,QWORD PTR [rsi]
 1030e6d:	call   QWORD PTR [rip+0xfffffffffffd06dd]        # 0x1001550
 1030e73:	mov    edx,eax
 1030e75:	mov    BYTE PTR [rsp+0x28],0x1
 1030e7a:	mov    BYTE PTR [rsp+0x20],0x1
 1030e7f:	xor    r9d,r9d
 1030e82:	xor    r8d,r8d
 1030e85:	mov    rcx,rsi
 1030e88:	call   QWORD PTR [rbx]
 1030e8a:	nop
 1030e8b:	cmp    rbp,0xffffffffffffffff
 1030e8f:	je     0x1030ea3
 1030e91:	mov    rcx,rbp
 1030e94:	call   QWORD PTR [rip+0xfffffffffffd063e]        # 0x10014d8
 1030e9a:	mov    QWORD PTR [rsp+0x40],0xffffffffffffffff
 1030ea3:	movzx  eax,dil
 1030ea7:	mov    rbx,QWORD PTR [rsp+0x70]
 1030eac:	mov    rbp,QWORD PTR [rsp+0x78]
 1030eb1:	add    rsp,0x50
 1030eb5:	pop    r14
 1030eb7:	pop    rdi
 1030eb8:	pop    rsi
 1030eb9:	ret    
 1030eba:	int3   
 1030ebb:	int3   
 1030ebc:	int3   
 1030ebd:	int3   
 1030ebe:	int3   
 1030ebf:	int3   
 1030ec0:	rex push rdi
 1030ec2:	sub    rsp,0x50
 1030ec6:	mov    QWORD PTR [rsp+0x40],0xfffffffffffffffe
 1030ecf:	mov    QWORD PTR [rsp+0x60],rbx
 1030ed4:	mov    QWORD PTR [rsp+0x68],rsi
 1030ed9:	mov    rdi,r8
 1030edc:	mov    rsi,rdx
 1030edf:	mov    rbx,rcx
 1030ee2:	lea    rcx,[rsp+0x38]
 1030ee7:	call   QWORD PTR [rip+0xfffffffffffd0bd3]        # 0x1001ac0
 1030eed:	nop
 1030eee:	mov    DWORD PTR [rsp+0x30],0x2
 1030ef6:	mov    WORD PTR [rsp+0x78],0xfeff
 1030efd:	mov    QWORD PTR [rsp+0x20],rdi
 1030f02:	lea    r9,[rsp+0x30]
 1030f07:	mov    r8d,0x2
 1030f0d:	lea    rdx,[rsp+0x78]
 1030f12:	mov    rcx,rbx
 1030f15:	call   QWORD PTR [rip+0xfffffffffffd0335]        # 0x1001250
 1030f1b:	test   eax,eax
 1030f1d:	jne    0x1030f4f
 1030f1f:	mov    rbx,QWORD PTR [rsi]
 1030f22:	call   QWORD PTR [rip+0xfffffffffffd0628]        # 0x1001550
 1030f28:	mov    edx,eax
 1030f2a:	mov    BYTE PTR [rsp+0x28],0x1
 1030f2f:	mov    BYTE PTR [rsp+0x20],0x1
 1030f34:	xor    r9d,r9d
 1030f37:	xor    r8d,r8d
 1030f3a:	mov    rcx,rsi
 1030f3d:	call   QWORD PTR [rbx]
 1030f3f:	nop
 1030f40:	lea    rcx,[rsp+0x38]
 1030f45:	call   QWORD PTR [rip+0xfffffffffffd0b5d]        # 0x1001aa8
 1030f4b:	xor    al,al
 1030f4d:	jmp    0x1030f68
 1030f4f:	test   rdi,rdi
 1030f52:	je     0x1030f5b
 1030f54:	mov    eax,DWORD PTR [rsp+0x30]
 1030f58:	add    DWORD PTR [rdi+0x10],eax
 1030f5b:	lea    rcx,[rsp+0x38]
 1030f60:	call   QWORD PTR [rip+0xfffffffffffd0b42]        # 0x1001aa8
 1030f66:	mov    al,0x1
 1030f68:	mov    rbx,QWORD PTR [rsp+0x60]
 1030f6d:	mov    rsi,QWORD PTR [rsp+0x68]
 1030f72:	add    rsp,0x50
 1030f76:	pop    rdi
 1030f77:	ret    
 1030f78:	int3   
 1030f79:	int3   
 1030f7a:	int3   
 1030f7b:	int3   
 1030f7c:	int3   
 1030f7d:	int3   
 1030f7e:	int3   
 1030f7f:	int3   
 1030f80:	mov    QWORD PTR [rsp+0x8],rcx
 1030f85:	push   rbx
 1030f86:	sub    rsp,0x30
 1030f8a:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
 1030f93:	mov    rbx,rcx
 1030f96:	mov    DWORD PTR [rsp+0x20],0x0
 1030f9e:	lea    rcx,[rsp+0x50]
 1030fa3:	call   QWORD PTR [rip+0xfffffffffffd0b07]        # 0x1001ab0
 1030fa9:	nop
 1030faa:	mov    edx,0x5c
 1030faf:	lea    rcx,[rsp+0x50]
 1030fb4:	call   QWORD PTR [rip+0xfffffffffffd0a96]        # 0x1001a50
 1030fba:	cmp    eax,0xffffffff
 1030fbd:	je     0x1030fdb
 1030fbf:	lea    r8d,[rax+0x1]
 1030fc3:	mov    rdx,rbx
 1030fc6:	lea    rcx,[rsp+0x50]
 1030fcb:	call   QWORD PTR [rip+0xfffffffffffd0a77]        # 0x1001a48
 1030fd1:	mov    DWORD PTR [rsp+0x20],0x1
 1030fd9:	jmp    0x1030ff3
 1030fdb:	lea    rdx,[rip+0xfffffffffffd0e2e]        # 0x1001e10
 1030fe2:	mov    rcx,rbx
 1030fe5:	call   QWORD PTR [rip+0xfffffffffffd0ac5]        # 0x1001ab0
 1030feb:	mov    DWORD PTR [rsp+0x20],0x1
 1030ff3:	lea    rcx,[rsp+0x50]
 1030ff8:	call   QWORD PTR [rip+0xfffffffffffd0aaa]        # 0x1001aa8
 1030ffe:	mov    rax,rbx
 1031001:	add    rsp,0x30
 1031005:	pop    rbx
 1031006:	ret    
 1031007:	int3   
 1031008:	int3   
 1031009:	int3   
 103100a:	int3   
 103100b:	int3   
 103100c:	int3   
 103100d:	int3   
 103100e:	int3   
 103100f:	int3   
 1031010:	mov    QWORD PTR [rsp+0x8],rcx
 1031015:	push   rdi
 1031016:	sub    rsp,0x40
 103101a:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
 1031023:	mov    QWORD PTR [rsp+0x58],rbx
 1031028:	movzx  ebx,r8b
 103102c:	mov    rdi,rcx
 103102f:	mov    DWORD PTR [rsp+0x20],0x0
 1031037:	lea    rcx,[rsp+0x68]
 103103c:	call   QWORD PTR [rip+0xfffffffffffd0a6e]        # 0x1001ab0
 1031042:	nop
 1031043:	test   bl,bl
 1031045:	jne    0x103108b
 1031047:	mov    edx,0x5c
 103104c:	lea    rcx,[rsp+0x68]
 1031051:	call   QWORD PTR [rip+0xfffffffffffd09f9]        # 0x1001a50
 1031057:	cmp    eax,0xffffffff
 103105a:	je     0x103108b
 103105c:	lea    r8d,[rax+0x1]
 1031060:	lea    rdx,[rsp+0x28]
 1031065:	lea    rcx,[rsp+0x68]
 103106a:	call   QWORD PTR [rip+0xfffffffffffd08b0]        # 0x1001920
 1031070:	nop
 1031071:	mov    rdx,rax
 1031074:	lea    rcx,[rsp+0x68]
 1031079:	call   QWORD PTR [rip+0xfffffffffffd0a21]        # 0x1001aa0
 103107f:	nop
 1031080:	lea    rcx,[rsp+0x28]
 1031085:	call   QWORD PTR [rip+0xfffffffffffd0a1d]        # 0x1001aa8
 103108b:	mov    edx,0x2e
 1031090:	lea    rcx,[rsp+0x68]
 1031095:	call   QWORD PTR [rip+0xfffffffffffd09b5]        # 0x1001a50
 103109b:	cmp    eax,0xffffffff
 103109e:	je     0x10310bb
 10310a0:	mov    r8d,eax
 10310a3:	mov    rdx,rdi
 10310a6:	lea    rcx,[rsp+0x68]
 10310ab:	call   QWORD PTR [rip+0xfffffffffffd0997]        # 0x1001a48
 10310b1:	mov    DWORD PTR [rsp+0x20],0x1
 10310b9:	jmp    0x10310d1
 10310bb:	lea    rdx,[rsp+0x68]
 10310c0:	mov    rcx,rdi
 10310c3:	call   QWORD PTR [rip+0xfffffffffffd08ef]        # 0x10019b8
 10310c9:	mov    DWORD PTR [rsp+0x20],0x1
 10310d1:	lea    rcx,[rsp+0x68]
 10310d6:	call   QWORD PTR [rip+0xfffffffffffd09cc]        # 0x1001aa8
 10310dc:	mov    rax,rdi
 10310df:	mov    rbx,QWORD PTR [rsp+0x58]
 10310e4:	add    rsp,0x40
 10310e8:	pop    rdi
 10310e9:	ret    
 10310ea:	int3   
 10310eb:	int3   
 10310ec:	int3   
 10310ed:	int3   
 10310ee:	int3   
 10310ef:	int3   
 10310f0:	int3   
 10310f1:	int3   
 10310f2:	int3   
 10310f3:	int3   
 10310f4:	int3   
 10310f5:	int3   
 10310f6:	int3   
 10310f7:	int3   
 10310f8:	int3   
 10310f9:	int3   
 10310fa:	int3   
 10310fb:	int3   
 10310fc:	int3   
 10310fd:	int3   
 10310fe:	int3   
 10310ff:	int3   
 1031100:	rex push rbp
 1031102:	push   rbx
 1031103:	push   rsi
 1031104:	push   rdi
 1031105:	push   r12
 1031107:	push   r13
 1031109:	push   r14
 103110b:	push   r15
 103110d:	lea    rbp,[rsp-0x238]
 1031115:	sub    rsp,0x338
 103111c:	mov    QWORD PTR [rbp-0x30],0xfffffffffffffffe
 1031124:	mov    rax,QWORD PTR [rip+0x32745]        # 0x1063870
 103112b:	xor    rax,rsp
 103112e:	mov    QWORD PTR [rbp+0x220],rax
 1031135:	mov    r13,r9
 1031138:	mov    r12,r8
 103113b:	mov    r15,rdx
 103113e:	mov    r14,rcx
 1031141:	mov    rax,QWORD PTR [rbp+0x2b0]
 1031148:	mov    QWORD PTR [rsp+0x50],rax
 103114d:	mov    rax,QWORD PTR [rbp+0x2c0]
 1031154:	mov    QWORD PTR [rbp-0x38],rax
 1031158:	lea    rax,[rip+0xfffffffffffd34e9]        # 0x1004648
 103115f:	mov    QWORD PTR [rbp-0x70],rax
 1031163:	xor    esi,esi
 1031165:	mov    QWORD PTR [rbp-0x58],rsi
 1031169:	mov    QWORD PTR [rbp-0x50],rsi
 103116d:	mov    QWORD PTR [rbp-0x60],rsi
 1031171:	mov    QWORD PTR [rbp-0x68],rsi
 1031175:	mov    QWORD PTR [rbp-0x48],rsi
 1031179:	mov    QWORD PTR [rbp-0x40],0xa
 1031181:	mov    QWORD PTR [rsp+0x58],rax
 1031186:	mov    QWORD PTR [rsp+0x70],rsi
 103118b:	mov    QWORD PTR [rsp+0x78],rsi
 1031190:	mov    QWORD PTR [rsp+0x68],rsi
 1031195:	mov    QWORD PTR [rsp+0x60],rsi
 103119a:	mov    QWORD PTR [rbp-0x80],rsi
 103119e:	mov    QWORD PTR [rbp-0x78],0xa
 10311a6:	mov    DWORD PTR [rbp-0x20],0x114
 10311ad:	lea    rcx,[rbp-0x20]
 10311b1:	call   QWORD PTR [rip+0xfffffffffffd0269]        # 0x1001420
 10311b7:	test   eax,eax
 10311b9:	je     0x10311db
 10311bb:	cmp    DWORD PTR [rbp-0x10],0x2
 10311bf:	jne    0x10311d2
 10311c1:	cmp    DWORD PTR [rbp-0x1c],0x4
 10311c5:	jne    0x10311d2
 10311c7:	lea    rcx,[rbp-0x70]
 10311cb:	call   0x1034f30
 10311d0:	jmp    0x10311db
 10311d2:	lea    rcx,[rbp-0x70]
 10311d6:	call   0x1035070
 10311db:	mov    rdi,QWORD PTR [rbp-0x68]
 10311df:	test   rdi,rdi
 10311e2:	je     0x10312e6
 10311e8:	nop    DWORD PTR [rax+rax*1+0x0]
 10311f0:	mov    ebx,DWORD PTR [rdi+0x10]
 10311f3:	mov    DWORD PTR [rbp+0x100],0x114
 10311fd:	lea    rcx,[rbp+0x100]
 1031204:	call   QWORD PTR [rip+0xfffffffffffd0216]        # 0x1001420
 103120a:	test   eax,eax
 103120c:	jne    0x1031212
 103120e:	mov    ebx,esi
 1031210:	jmp    0x1031238
 1031212:	cmp    DWORD PTR [rbp+0x110],0x2
 1031219:	jne    0x103122f
 103121b:	cmp    DWORD PTR [rbp+0x104],0x4
 1031222:	jne    0x103122f
 1031224:	xor    edx,edx
 1031226:	mov    ecx,ebx
 1031228:	call   0x1034c40
 103122d:	jmp    0x1031236
 103122f:	mov    ecx,ebx
 1031231:	call   0x1034d40
 1031236:	mov    ebx,eax
 1031238:	mov    rsi,QWORD PTR [rsp+0x68]
 103123d:	mov    rcx,QWORD PTR [rsp+0x78]
 1031242:	test   rcx,rcx
 1031245:	jne    0x1031294
 1031247:	lea    r8d,[rcx+0x18]
 103124b:	mov    rdx,QWORD PTR [rbp-0x78]
 103124f:	lea    rcx,[rbp-0x80]
 1031253:	call   0x103f9a2
 1031258:	mov    rdx,QWORD PTR [rbp-0x78]
 103125c:	lea    r8,[rdx-0x1]
 1031260:	lea    r8,[rdx+r8*2]
 1031264:	lea    r8,[rax+r8*8]
 1031268:	mov    rcx,QWORD PTR [rsp+0x78]
 103126d:	dec    rdx
 1031270:	js     0x1031294
 1031272:	data16 data16 data16 data16 data16 nop WORD PTR [rax+rax*1+0x0]
 1031280:	mov    QWORD PTR [r8],rcx
 1031283:	mov    rcx,r8
 1031286:	mov    QWORD PTR [rsp+0x78],rcx
 103128b:	sub    r8,0x18
 103128f:	dec    rdx
 1031292:	jns    0x1031280
 1031294:	xor    eax,eax
 1031296:	test   rcx,rcx
 1031299:	setne  al
 103129c:	test   eax,eax
 103129e:	je     0x10312e0
 10312a0:	mov    rax,QWORD PTR [rcx]
 10312a3:	mov    QWORD PTR [rsp+0x78],rax
 10312a8:	mov    QWORD PTR [rcx+0x8],rsi
 10312ac:	xor    esi,esi
 10312ae:	mov    QWORD PTR [rcx],rsi
 10312b1:	inc    QWORD PTR [rsp+0x70]
 10312b6:	mov    DWORD PTR [rcx+0x10],ebx
 10312b9:	mov    rax,QWORD PTR [rsp+0x68]
 10312be:	test   rax,rax
 10312c1:	je     0x10312c8
 10312c3:	mov    QWORD PTR [rax],rcx
 10312c6:	jmp    0x10312cd
 10312c8:	mov    QWORD PTR [rsp+0x60],rcx
 10312cd:	mov    QWORD PTR [rsp+0x68],rcx
 10312d2:	mov    rdi,QWORD PTR [rdi]
 10312d5:	test   rdi,rdi
 10312d8:	jne    0x10311f0
 10312de:	jmp    0x10312e6
 10312e0:	call   0x103f972
 10312e5:	int3   
 10312e6:	movzx  eax,BYTE PTR [rbp+0x2c8]
 10312ed:	mov    BYTE PTR [rsp+0x40],al
 10312f1:	mov    rax,QWORD PTR [rbp-0x38]
 10312f5:	mov    QWORD PTR [rsp+0x38],rax
 10312fa:	mov    eax,DWORD PTR [rbp+0x2b8]
 1031300:	mov    DWORD PTR [rsp+0x30],eax
 1031304:	mov    rax,QWORD PTR [rsp+0x50]
 1031309:	mov    QWORD PTR [rsp+0x28],rax
 103130e:	mov    eax,DWORD PTR [rbp+0x2a8]
 1031314:	mov    DWORD PTR [rsp+0x20],eax
 1031318:	movzx  ebx,BYTE PTR [rbp+0x2a0]
 103131f:	movzx  r9d,bl
 1031323:	mov    r8,r13
 1031326:	mov    rdx,r12
 1031329:	mov    rcx,r15
 103132c:	call   0x1031540
 1031331:	mov    esi,eax
 1031333:	test   eax,eax
 1031335:	jne    0x1031433
 103133b:	test   bl,bl
 103133d:	jne    0x1031433
 1031343:	mov    rdi,QWORD PTR [rsp+0x60]
 1031348:	test   rdi,rdi
 103134b:	je     0x1031426
 1031351:	mov    rax,QWORD PTR [rsp+0x50]
 1031356:	data16 nop WORD PTR [rax+rax*1+0x0]
 1031360:	lea    rbx,[rdi+0x10]
 1031364:	mov    r8d,DWORD PTR [rbx]
 1031367:	cmp    r8d,DWORD PTR [rax+0x10]
 103136b:	jne    0x1031413
 1031371:	mov    rax,QWORD PTR [r14+0x8]
 1031375:	test   rax,rax
 1031378:	je     0x10313b1
 103137a:	nop    WORD PTR [rax+rax*1+0x0]
 1031380:	lea    rdx,[rax+0x10]
 1031384:	test   rdx,rdx
 1031387:	je     0x1031420
 103138d:	test   rbx,rbx
 1031390:	je     0x1031420
 1031396:	xor    ecx,ecx
 1031398:	cmp    DWORD PTR [rdx],r8d
 103139b:	sete   cl
 103139e:	test   ecx,ecx
 10313a0:	jne    0x10313ac
 10313a2:	mov    rax,QWORD PTR [rax]
 10313a5:	test   rax,rax
 10313a8:	jne    0x1031380
 10313aa:	jmp    0x10313b1
 10313ac:	test   rax,rax
 10313af:	jne    0x103140e
 10313b1:	mov    eax,0x1
 10313b6:	xchg   DWORD PTR [rip+0x326c4],eax        # 0x1063a80
 10313bc:	cmp    eax,0x1
 10313bf:	jne    0x10313dc
 10313c1:	xor    ecx,ecx
 10313c3:	call   QWORD PTR [rip+0xfffffffffffd017f]        # 0x1001548
 10313c9:	mov    r11d,0x1
 10313cf:	xchg   DWORD PTR [rip+0x326aa],r11d        # 0x1063a80
 10313d6:	cmp    r11d,0x1
 10313da:	je     0x10313c1
 10313dc:	xor    r8d,r8d
 10313df:	mov    rdx,QWORD PTR [r14+0x10]
 10313e3:	mov    rcx,r14
 10313e6:	call   0x102bcf0
 10313eb:	mov    ecx,DWORD PTR [rbx]
 10313ed:	mov    DWORD PTR [rax+0x10],ecx
 10313f0:	mov    rcx,QWORD PTR [r14+0x10]
 10313f4:	test   rcx,rcx
 10313f7:	je     0x10313fe
 10313f9:	mov    QWORD PTR [rcx],rax
 10313fc:	jmp    0x1031402
 10313fe:	mov    QWORD PTR [r14+0x8],rax
 1031402:	mov    QWORD PTR [r14+0x10],rax
 1031406:	xor    eax,eax
 1031408:	xchg   DWORD PTR [rip+0x32672],eax        # 0x1063a80
 103140e:	mov    rax,QWORD PTR [rsp+0x50]
 1031413:	mov    rdi,QWORD PTR [rdi]
 1031416:	test   rdi,rdi
 1031419:	je     0x1031426
 103141b:	jmp    0x1031360
 1031420:	call   0x103f972
 1031425:	int3   
 1031426:	mov    rax,QWORD PTR [rsp+0x50]
 103142b:	mov    rcx,QWORD PTR [rax]
 103142e:	call   0x10360b0
 1031433:	mov    rax,QWORD PTR [rbp-0x68]
 1031437:	test   rax,rax
 103143a:	je     0x1031448
 103143c:	nop    DWORD PTR [rax+0x0]
 1031440:	mov    rax,QWORD PTR [rax]
 1031443:	test   rax,rax
 1031446:	jne    0x1031440
 1031448:	xor    ebx,ebx
 103144a:	mov    QWORD PTR [rbp-0x58],rbx
 103144e:	mov    QWORD PTR [rbp-0x50],rbx
 1031452:	mov    QWORD PTR [rbp-0x60],rbx
 1031456:	mov    QWORD PTR [rbp-0x68],rbx
 103145a:	mov    rcx,QWORD PTR [rbp-0x48]
 103145e:	call   0x103f9ae
 1031463:	mov    QWORD PTR [rbp-0x48],rbx
 1031467:	mov    rax,QWORD PTR [rsp+0x60]
 103146c:	test   rax,rax
 103146f:	je     0x1031479
 1031471:	mov    rax,QWORD PTR [rax]
 1031474:	test   rax,rax
 1031477:	jne    0x1031471
 1031479:	mov    QWORD PTR [rsp+0x70],rbx
 103147e:	mov    QWORD PTR [rsp+0x78],rbx
 1031483:	mov    QWORD PTR [rsp+0x68],rbx
 1031488:	mov    QWORD PTR [rsp+0x60],rbx
 103148d:	mov    rcx,QWORD PTR [rbp-0x80]
 1031491:	call   0x103f9ae
 1031496:	mov    QWORD PTR [rbp-0x80],rbx
 103149a:	lea    rdi,[rip+0xfffffffffffd31a7]        # 0x1004648
 10314a1:	mov    QWORD PTR [rsp+0x58],rdi
 10314a6:	mov    rax,QWORD PTR [rsp+0x60]
 10314ab:	test   rax,rax
 10314ae:	je     0x10314b8
 10314b0:	mov    rax,QWORD PTR [rax]
 10314b3:	test   rax,rax
 10314b6:	jne    0x10314b0
 10314b8:	mov    QWORD PTR [rsp+0x70],rbx
 10314bd:	mov    QWORD PTR [rsp+0x78],rbx
 10314c2:	mov    QWORD PTR [rsp+0x68],rbx
 10314c7:	mov    QWORD PTR [rsp+0x60],rbx
 10314cc:	mov    rcx,QWORD PTR [rbp-0x80]
 10314d0:	call   0x103f9ae
 10314d5:	mov    QWORD PTR [rbp-0x80],rbx
 10314d9:	mov    QWORD PTR [rbp-0x70],rdi
 10314dd:	mov    rax,QWORD PTR [rbp-0x68]
 10314e1:	test   rax,rax
 10314e4:	je     0x10314ee
 10314e6:	mov    rax,QWORD PTR [rax]
 10314e9:	test   rax,rax
 10314ec:	jne    0x10314e6
 10314ee:	mov    QWORD PTR [rbp-0x58],rbx
 10314f2:	mov    QWORD PTR [rbp-0x50],rbx
 10314f6:	mov    QWORD PTR [rbp-0x60],rbx
 10314fa:	mov    QWORD PTR [rbp-0x68],rbx
 10314fe:	mov    rcx,QWORD PTR [rbp-0x48]
 1031502:	call   0x103f9ae
 1031507:	mov    QWORD PTR [rbp-0x48],rbx
 103150b:	mov    eax,esi
 103150d:	mov    rcx,QWORD PTR [rbp+0x220]
 1031514:	xor    rcx,rsp
 1031517:	call   0x103ff40
 103151c:	add    rsp,0x338
 1031523:	pop    r15
 1031525:	pop    r14
 1031527:	pop    r13
 1031529:	pop    r12
 103152b:	pop    rdi
 103152c:	pop    rsi
 103152d:	pop    rbx
 103152e:	pop    rbp
 103152f:	ret    
 1031530:	int3   
 1031531:	int3   
 1031532:	int3   
 1031533:	int3   
 1031534:	int3   
 1031535:	int3   
 1031536:	int3   
 1031537:	int3   
 1031538:	int3   
 1031539:	int3   
 103153a:	int3   
 103153b:	int3   
 103153c:	int3   
 103153d:	int3   
 103153e:	int3   
 103153f:	int3   
 1031540:	rex push rbp
 1031542:	push   rsi
 1031543:	push   rdi
 1031544:	push   r12
 1031546:	push   r13
 1031548:	push   r14
 103154a:	push   r15
 103154c:	lea    rbp,[rsp-0x440]
 1031554:	sub    rsp,0x540
 103155b:	mov    QWORD PTR [rbp-0x68],0xfffffffffffffffe
 1031563:	mov    QWORD PTR [rsp+0x598],rbx
 103156b:	mov    rax,QWORD PTR [rip+0x322fe]        # 0x1063870
 1031572:	xor    rax,rsp
 1031575:	mov    QWORD PTR [rbp+0x430],rax
 103157c:	mov    BYTE PTR [rsp+0x54],r9b
 1031581:	mov    rbx,r8
 1031584:	mov    r15,rdx
 1031587:	mov    r13,rcx
 103158a:	mov    rsi,QWORD PTR [rbp+0x4a8]
 1031591:	mov    r14,QWORD PTR [rbp+0x4b8]
 1031598:	xor    edi,edi
 103159a:	mov    DWORD PTR [rsp+0x50],edi
 103159e:	lea    rcx,[rsp+0x70]
 10315a3:	call   QWORD PTR [rip+0xfffffffffffd0517]        # 0x1001ac0
 10315a9:	nop
 10315aa:	lea    rcx,[rsp+0x58]
 10315af:	call   QWORD PTR [rip+0xfffffffffffd050b]        # 0x1001ac0
 10315b5:	nop
 10315b6:	mov    rdx,r13
 10315b9:	lea    rcx,[rsp+0x68]
 10315be:	call   QWORD PTR [rip+0xfffffffffffd04ec]        # 0x1001ab0
 10315c4:	nop
 10315c5:	mov    rdx,rbx
 10315c8:	lea    rcx,[rsp+0x60]
 10315cd:	call   QWORD PTR [rip+0xfffffffffffd04dd]        # 0x1001ab0
 10315d3:	nop
 10315d4:	lea    r8d,[rdi+0x1]
 10315d8:	lea    rdx,[rbp-0x70]
 10315dc:	lea    rcx,[rsp+0x68]
 10315e1:	call   QWORD PTR [rip+0xfffffffffffd0461]        # 0x1001a48
 10315e7:	nop
 10315e8:	lea    rdx,[rip+0xfffffffffffd3925]        # 0x1004f14
 10315ef:	mov    rcx,rax
 10315f2:	call   QWORD PTR [rip+0xfffffffffffd0408]        # 0x1001a00
 10315f8:	test   eax,eax
 10315fa:	setne  bl
 10315fd:	lea    rcx,[rbp-0x70]
 1031601:	call   QWORD PTR [rip+0xfffffffffffd04a1]        # 0x1001aa8
 1031607:	lea    rcx,[rsp+0x58]
 103160c:	test   bl,bl
 103160e:	je     0x1031622
 1031610:	mov    r8,r13
 1031613:	lea    rdx,[rip+0xfffffffffffd311e]        # 0x1004738
 103161a:	call   QWORD PTR [rip+0xfffffffffffd0420]        # 0x1001a40
 1031620:	jmp    0x103162b
 1031622:	mov    rdx,r13
 1031625:	call   QWORD PTR [rip+0xfffffffffffd046d]        # 0x1001a98
 103162b:	lea    rdx,[rip+0xfffffffffffd378a]        # 0x1004dbc
 1031632:	lea    rcx,[rsp+0x58]
 1031637:	call   QWORD PTR [rip+0xfffffffffffd0453]        # 0x1001a90
 103163d:	mov    rdx,r15
 1031640:	lea    rcx,[rsp+0x58]
 1031645:	call   QWORD PTR [rip+0xfffffffffffd0445]        # 0x1001a90
 103164b:	lea    rcx,[rsp+0x58]
 1031650:	call   QWORD PTR [rip+0xfffffffffffd049a]        # 0x1001af0
 1031656:	test   eax,eax
 1031658:	jne    0x103165f
 103165a:	mov    r15,rdi
 103165d:	jmp    0x103167a
 103165f:	lea    rcx,[rsp+0x58]
 1031664:	call   QWORD PTR [rip+0xfffffffffffd0486]        # 0x1001af0
 103166a:	mov    edx,eax
 103166c:	lea    rcx,[rsp+0x58]
 1031671:	call   QWORD PTR [rip+0xfffffffffffd0371]        # 0x10019e8
 1031677:	mov    r15,rax
 103167a:	lea    rcx,[rsp+0x60]
 103167f:	call   QWORD PTR [rip+0xfffffffffffd046b]        # 0x1001af0
 1031685:	test   eax,eax
 1031687:	jne    0x103168e
 1031689:	mov    r12,rdi
 103168c:	jmp    0x10316a9
 103168e:	lea    rcx,[rsp+0x60]
 1031693:	call   QWORD PTR [rip+0xfffffffffffd0457]        # 0x1001af0
 1031699:	mov    edx,eax
 103169b:	lea    rcx,[rsp+0x60]
 10316a0:	call   QWORD PTR [rip+0xfffffffffffd0342]        # 0x10019e8
 10316a6:	mov    r12,rax
 10316a9:	xor    edx,edx
 10316ab:	lea    r8d,[rdx+0x68]
 10316af:	lea    rcx,[rbp-0x60]
 10316b3:	call   0x104026c
 10316b8:	mov    DWORD PTR [rbp-0x60],0x68
 10316bf:	mov    DWORD PTR [rbp-0x24],edi
 10316c2:	mov    ecx,DWORD PTR [rbp+0x4a0]
 10316c8:	cmp    ecx,0x1
 10316cb:	je     0x10316d8
 10316cd:	mov    DWORD PTR [rbp-0x24],0x1
 10316d4:	mov    WORD PTR [rbp-0x20],cx
 10316d8:	mov    eax,0x1
 10316dd:	xchg   DWORD PTR [rip+0x3239d],eax        # 0x1063a80
 10316e3:	cmp    eax,0x1
 10316e6:	jne    0x1031703
 10316e8:	xor    ecx,ecx
 10316ea:	call   QWORD PTR [rip+0xfffffffffffcfe58]        # 0x1001548
 10316f0:	mov    r11d,0x1
 10316f6:	xchg   DWORD PTR [rip+0x32383],r11d        # 0x1063a80
 10316fd:	cmp    r11d,0x1
 1031701:	je     0x10316e8
 1031703:	cmp    QWORD PTR [rip+0x3206d],0xffffffffffffffff        # 0x1063778
 103170b:	jne    0x10317c1
 1031711:	lea    rdx,[rbp+0x10]
 1031715:	mov    ecx,0x105
 103171a:	call   QWORD PTR [rip+0xfffffffffffcfba8]        # 0x10012c8
 1031720:	test   eax,eax
 1031722:	jne    0x103172e
 1031724:	call   QWORD PTR [rip+0xfffffffffffcfe26]        # 0x1001550
 103172a:	mov    DWORD PTR [rsp+0x50],eax
 103172e:	lea    r9,[rbp+0x220]
 1031735:	xor    r8d,r8d
 1031738:	lea    rdx,[rip+0xfffffffffffd4031]        # 0x1005770
 103173f:	lea    rcx,[rbp+0x10]
 1031743:	call   QWORD PTR [rip+0xfffffffffffcfa7f]        # 0x10011c8
 1031749:	test   eax,eax
 103174b:	jne    0x1031757
 103174d:	call   QWORD PTR [rip+0xfffffffffffcfdfd]        # 0x1001550
 1031753:	mov    DWORD PTR [rsp+0x50],eax
 1031757:	xor    eax,eax
 1031759:	mov    QWORD PTR [rsp+0x78],rax
 103175e:	mov    QWORD PTR [rbp-0x80],rax
 1031762:	mov    QWORD PTR [rbp-0x78],rax
 1031766:	mov    DWORD PTR [rsp+0x78],0x18
 103176e:	mov    DWORD PTR [rbp-0x78],0x1
 1031775:	mov    QWORD PTR [rsp+0x30],rdi
 103177a:	mov    DWORD PTR [rsp+0x28],0x100080
 1031782:	mov    DWORD PTR [rsp+0x20],0x2
 103178a:	lea    r9,[rsp+0x78]
 103178f:	mov    edx,0x80000000
 1031794:	lea    r8d,[rax+0x1]
 1031798:	lea    rcx,[rbp+0x220]
 103179f:	call   QWORD PTR [rip+0xfffffffffffcfa3b]        # 0x10011e0
 10317a5:	mov    QWORD PTR [rip+0x31fcc],rax        # 0x1063778
 10317ac:	cmp    rax,0xffffffffffffffff
 10317b0:	je     0x10317b7
 10317b2:	test   rax,rax
 10317b5:	jne    0x10317c1
 10317b7:	call   QWORD PTR [rip+0xfffffffffffcfd93]        # 0x1001550
 10317bd:	mov    DWORD PTR [rsp+0x50],eax
 10317c1:	mov    eax,edi
 10317c3:	xchg   DWORD PTR [rip+0x322b7],eax        # 0x1063a80
 10317c9:	mov    ebx,DWORD PTR [rsp+0x50]
 10317cd:	test   ebx,ebx
 10317cf:	je     0x10317fa
 10317d1:	lea    rcx,[rsp+0x60]
 10317d6:	call   QWORD PTR [rip+0xfffffffffffd02cc]        # 0x1001aa8
 10317dc:	nop
 10317dd:	lea    rcx,[rsp+0x68]
 10317e2:	call   QWORD PTR [rip+0xfffffffffffd02c0]        # 0x1001aa8
 10317e8:	nop
 10317e9:	lea    rcx,[rsp+0x58]
 10317ee:	call   QWORD PTR [rip+0xfffffffffffd02b4]        # 0x1001aa8
 10317f4:	nop
 10317f5:	jmp    0x103191d
 10317fa:	cmp    r14,0xffffffffffffffff
 10317fe:	je     0x103181f
 1031800:	test   r14,r14
 1031803:	je     0x103181f
 1031805:	or     DWORD PTR [rbp-0x24],0x100
 103180c:	mov    QWORD PTR [rbp-0x8],r14
 1031810:	mov    QWORD PTR [rbp+0x0],r14
 1031814:	mov    rax,QWORD PTR [rip+0x31f5d]        # 0x1063778
 103181b:	mov    QWORD PTR [rbp-0x10],rax
 103181f:	mov    eax,DWORD PTR [rbp+0x4b0]
 1031825:	bts    eax,0x9
 1031829:	mov    QWORD PTR [rsp+0x48],rsi
 103182e:	lea    rcx,[rbp-0x60]
 1031832:	mov    QWORD PTR [rsp+0x40],rcx
 1031837:	mov    QWORD PTR [rsp+0x38],r12
 103183c:	mov    QWORD PTR [rsp+0x30],rdi
 1031841:	mov    DWORD PTR [rsp+0x28],eax
 1031845:	mov    DWORD PTR [rsp+0x20],0x1
 103184d:	xor    r9d,r9d
 1031850:	xor    r8d,r8d
 1031853:	mov    rdx,r15
 1031856:	mov    rcx,r13
 1031859:	call   QWORD PTR [rip+0xfffffffffffcfc29]        # 0x1001488
 103185f:	test   eax,eax
 1031861:	setg   al
 1031864:	mov    ecx,edi
 1031866:	test   al,al
 1031868:	sete   cl
 103186b:	mov    DWORD PTR [rsp+0x50],ecx
 103186f:	test   r12,r12
 1031872:	je     0x1031882
 1031874:	or     edx,0xffffffff
 1031877:	lea    rcx,[rsp+0x60]
 103187c:	call   QWORD PTR [rip+0xfffffffffffd015e]        # 0x10019e0
 1031882:	test   r15,r15
 1031885:	je     0x1031895
 1031887:	or     edx,0xffffffff
 103188a:	lea    rcx,[rsp+0x58]
 103188f:	call   QWORD PTR [rip+0xfffffffffffd014b]        # 0x10019e0
 1031895:	cmp    DWORD PTR [rsp+0x50],0x0
 103189a:	je     0x10318ac
 103189c:	call   QWORD PTR [rip+0xfffffffffffcfcae]        # 0x1001550
 10318a2:	test   eax,eax
 10318a4:	je     0x10318f5
 10318a6:	mov    DWORD PTR [rsp+0x50],eax
 10318aa:	jmp    0x10318f5
 10318ac:	cmp    BYTE PTR [rsp+0x54],0x0
 10318b1:	je     0x10318f5
 10318b3:	mov    r8d,0x1
 10318b9:	or     edx,0xffffffff
 10318bc:	mov    rcx,QWORD PTR [rsi]
 10318bf:	call   QWORD PTR [rip+0xfffffffffffcfacb]        # 0x1001390
 10318c5:	cmp    eax,0xc0
 10318ca:	sete   dil
 10318ce:	mov    DWORD PTR [rsp+0x50],edi
 10318d2:	test   edi,edi
 10318d4:	jne    0x10318e4
 10318d6:	lea    rdx,[rsp+0x50]
 10318db:	mov    rcx,QWORD PTR [rsi]
 10318de:	call   QWORD PTR [rip+0xfffffffffffcf9dc]        # 0x10012c0
 10318e4:	lea    rcx,[rsi+0x8]
 10318e8:	call   0x1034510
 10318ed:	mov    rcx,rsi
 10318f0:	call   0x1034510
 10318f5:	mov    ebx,DWORD PTR [rsp+0x50]
 10318f9:	lea    rcx,[rsp+0x60]
 10318fe:	call   QWORD PTR [rip+0xfffffffffffd01a4]        # 0x1001aa8
 1031904:	nop
 1031905:	lea    rcx,[rsp+0x68]
 103190a:	call   QWORD PTR [rip+0xfffffffffffd0198]        # 0x1001aa8
 1031910:	nop
 1031911:	lea    rcx,[rsp+0x58]
 1031916:	call   QWORD PTR [rip+0xfffffffffffd018c]        # 0x1001aa8
 103191c:	nop
 103191d:	lea    rcx,[rsp+0x70]
 1031922:	call   QWORD PTR [rip+0xfffffffffffd0180]        # 0x1001aa8
 1031928:	mov    eax,ebx
 103192a:	mov    rcx,QWORD PTR [rbp+0x430]
 1031931:	xor    rcx,rsp
 1031934:	call   0x103ff40
 1031939:	mov    rbx,QWORD PTR [rsp+0x598]
 1031941:	add    rsp,0x540
 1031948:	pop    r15
 103194a:	pop    r14
 103194c:	pop    r13
 103194e:	pop    r12
 1031950:	pop    rdi
 1031951:	pop    rsi
 1031952:	pop    rbp
 1031953:	ret    
 1031954:	int3   
 1031955:	int3   
 1031956:	int3   
 1031957:	int3   
 1031958:	int3   
 1031959:	int3   
 103195a:	int3   
 103195b:	int3   
 103195c:	int3   
 103195d:	int3   
 103195e:	int3   
 103195f:	int3   
 1031960:	rex push rbx
 1031962:	sub    rsp,0x240
 1031969:	mov    rax,QWORD PTR [rip+0x31f00]        # 0x1063870
 1031970:	xor    rax,rsp
 1031973:	mov    QWORD PTR [rsp+0x230],rax
 103197b:	mov    rbx,rdx
 103197e:	lea    r8,[rsp+0x20]
 1031983:	xor    edx,edx
 1031985:	call   QWORD PTR [rip+0xfffffffffffcfefd]        # 0x1001888
 103198b:	cmp    rax,0x20
 103198f:	ja     0x1031995
 1031991:	xor    al,al
 1031993:	jmp    0x10319af
 1031995:	mov    r9d,0x104
 103199b:	lea    r8,[rsp+0x20]
 10319a0:	mov    rcx,rbx
 10319a3:	lea    edx,[r9+0x1]
 10319a7:	call   QWORD PTR [rip+0xfffffffffffcfcfb]        # 0x10016a8
 10319ad:	mov    al,0x1
 10319af:	mov    rcx,QWORD PTR [rsp+0x230]
 10319b7:	xor    rcx,rsp
 10319ba:	call   0x103ff40
 10319bf:	add    rsp,0x240
 10319c6:	pop    rbx
 10319c7:	ret    
 10319c8:	int3   
 10319c9:	int3   
 10319ca:	int3   
 10319cb:	int3   
 10319cc:	int3   
 10319cd:	int3   
 10319ce:	int3   
 10319cf:	int3   
 10319d0:	rex push rbp
 10319d2:	push   rsi
 10319d3:	push   rdi
 10319d4:	lea    rbp,[rsp-0x370]
 10319dc:	sub    rsp,0x470
 10319e3:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
 10319ec:	mov    QWORD PTR [rsp+0x4a0],rbx
 10319f4:	mov    rax,QWORD PTR [rip+0x31e75]        # 0x1063870
 10319fb:	xor    rax,rsp
 10319fe:	mov    QWORD PTR [rbp+0x360],rax
 1031a05:	mov    rdi,rdx
 1031a08:	mov    ebx,ecx
 1031a0a:	mov    r8d,0x104
 1031a10:	lea    rdx,[rsp+0x40]
 1031a15:	xor    ecx,ecx
 1031a17:	call   QWORD PTR [rip+0xfffffffffffcf853]        # 0x1001270
 1031a1d:	lea    rdx,[rsp+0x40]
 1031a22:	lea    rcx,[rsp+0x20]
 1031a27:	call   0x1030f80
 1031a2c:	nop
 1031a2d:	lea    rcx,[rsp+0x20]
 1031a32:	call   QWORD PTR [rip+0xfffffffffffd00b0]        # 0x1001ae8
 1031a38:	mov    rdx,rax
 1031a3b:	lea    rcx,[rsp+0x28]
 1031a40:	call   0x10309c0
 1031a45:	nop
 1031a46:	mov    rdx,rax
 1031a49:	lea    rcx,[rsp+0x20]
 1031a4e:	call   QWORD PTR [rip+0xfffffffffffd004c]        # 0x1001aa0
 1031a54:	nop
 1031a55:	lea    rcx,[rsp+0x28]
 1031a5a:	call   QWORD PTR [rip+0xfffffffffffd0048]        # 0x1001aa8
 1031a60:	lea    rax,[rip+0xfffffffffffd4031]        # 0x1005a98
 1031a67:	lea    rsi,[rip+0xfffffffffffd4042]        # 0x1005ab0
 1031a6e:	cmp    ebx,0x8
 1031a71:	cmovg  rsi,rax
 1031a75:	mov    rdx,rsi
 1031a78:	lea    rcx,[rsp+0x20]
 1031a7d:	call   QWORD PTR [rip+0xfffffffffffd000d]        # 0x1001a90
 1031a83:	lea    rcx,[rsp+0x20]
 1031a88:	call   QWORD PTR [rip+0xfffffffffffd005a]        # 0x1001ae8
 1031a8e:	mov    rcx,rax
 1031a91:	call   0x1030aa0
 1031a96:	test   al,al
 1031a98:	je     0x1031acd
 1031a9a:	lea    rcx,[rsp+0x20]
 1031a9f:	call   QWORD PTR [rip+0xfffffffffffd0043]        # 0x1001ae8
 1031aa5:	mov    r8,rax
 1031aa8:	mov    edx,0x105
 1031aad:	lea    r9d,[rdx-0x1]
 1031ab1:	mov    rcx,rdi
 1031ab4:	call   QWORD PTR [rip+0xfffffffffffcfbee]        # 0x10016a8
 1031aba:	nop
 1031abb:	lea    rcx,[rsp+0x20]
 1031ac0:	call   QWORD PTR [rip+0xfffffffffffcffe2]        # 0x1001aa8
 1031ac6:	mov    al,0x1
 1031ac8:	jmp    0x1031bde
 1031acd:	lea    rdx,[rsp+0x40]
 1031ad2:	mov    ecx,0x105
 1031ad7:	call   QWORD PTR [rip+0xfffffffffffcf90b]        # 0x10013e8
 1031add:	lea    rdx,[rsp+0x40]
 1031ae2:	lea    rcx,[rsp+0x20]
 1031ae7:	call   QWORD PTR [rip+0xfffffffffffcffab]        # 0x1001a98
 1031aed:	lea    rcx,[rsp+0x20]
 1031af2:	call   QWORD PTR [rip+0xfffffffffffcfff0]        # 0x1001ae8
 1031af8:	mov    rdx,rax
 1031afb:	lea    rcx,[rsp+0x28]
 1031b00:	call   0x10309c0
 1031b05:	nop
 1031b06:	mov    rdx,rax
 1031b09:	lea    rcx,[rsp+0x20]
 1031b0e:	call   QWORD PTR [rip+0xfffffffffffcff8c]        # 0x1001aa0
 1031b14:	nop
 1031b15:	lea    rcx,[rsp+0x28]
 1031b1a:	call   QWORD PTR [rip+0xfffffffffffcff88]        # 0x1001aa8
 1031b20:	mov    rdx,rsi
 1031b23:	lea    rcx,[rsp+0x20]
 1031b28:	call   QWORD PTR [rip+0xfffffffffffcff62]        # 0x1001a90
 1031b2e:	lea    rcx,[rsp+0x20]
 1031b33:	call   QWORD PTR [rip+0xfffffffffffcffaf]        # 0x1001ae8
 1031b39:	mov    rcx,rax
 1031b3c:	call   0x1030aa0
 1031b41:	test   al,al
 1031b43:	je     0x1031b75
 1031b45:	lea    rcx,[rsp+0x20]
 1031b4a:	call   QWORD PTR [rip+0xfffffffffffcff98]        # 0x1001ae8
 1031b50:	mov    r8,rax
 1031b53:	mov    edx,0x105
 1031b58:	lea    r9d,[rdx-0x1]
 1031b5c:	mov    rcx,rdi
 1031b5f:	call   QWORD PTR [rip+0xfffffffffffcfb43]        # 0x10016a8
 1031b65:	nop
 1031b66:	lea    rcx,[rsp+0x20]
 1031b6b:	call   QWORD PTR [rip+0xfffffffffffcff37]        # 0x1001aa8
 1031b71:	mov    al,0x1
 1031b73:	jmp    0x1031bde
 1031b75:	lea    r8,[rbp+0x150]
 1031b7c:	xor    edx,edx
 1031b7e:	mov    rcx,rsi
 1031b81:	call   QWORD PTR [rip+0xfffffffffffcfd01]        # 0x1001888
 1031b87:	cmp    rax,0x20
 1031b8b:	jbe    0x1031bd1
 1031b8d:	mov    r9d,0x104
 1031b93:	lea    r8,[rbp+0x150]
 1031b9a:	lea    edx,[r9+0x1]
 1031b9e:	lea    rcx,[rsp+0x40]
 1031ba3:	call   QWORD PTR [rip+0xfffffffffffcfaff]        # 0x10016a8
 1031ba9:	mov    r9d,0x104
 1031baf:	lea    r8,[rsp+0x40]
 1031bb4:	lea    edx,[r9+0x1]
 1031bb8:	mov    rcx,rdi
 1031bbb:	call   QWORD PTR [rip+0xfffffffffffcfae7]        # 0x10016a8
 1031bc1:	nop
 1031bc2:	lea    rcx,[rsp+0x20]
 1031bc7:	call   QWORD PTR [rip+0xfffffffffffcfedb]        # 0x1001aa8
 1031bcd:	mov    al,0x1
 1031bcf:	jmp    0x1031bde
 1031bd1:	lea    rcx,[rsp+0x20]
 1031bd6:	call   QWORD PTR [rip+0xfffffffffffcfecc]        # 0x1001aa8
 1031bdc:	xor    al,al
 1031bde:	mov    rcx,QWORD PTR [rbp+0x360]
 1031be5:	xor    rcx,rsp
 1031be8:	call   0x103ff40
 1031bed:	mov    rbx,QWORD PTR [rsp+0x4a0]
 1031bf5:	add    rsp,0x470
 1031bfc:	pop    rdi
 1031bfd:	pop    rsi
 1031bfe:	pop    rbp
 1031bff:	ret    
 1031c00:	int3   
 1031c01:	int3   
 1031c02:	int3   
 1031c03:	int3   
 1031c04:	int3   
 1031c05:	int3   
 1031c06:	int3   
 1031c07:	int3   
 1031c08:	int3   
 1031c09:	int3   
 1031c0a:	int3   
 1031c0b:	int3   
 1031c0c:	int3   
 1031c0d:	int3   
 1031c0e:	int3   
 1031c0f:	int3   
 1031c10:	rex push rbp
 1031c12:	push   rsi
 1031c13:	push   rdi
 1031c14:	sub    rsp,0x270
 1031c1b:	mov    QWORD PTR [rsp+0x38],0xfffffffffffffffe
 1031c24:	mov    QWORD PTR [rsp+0x2a0],rbx
 1031c2c:	mov    rax,QWORD PTR [rip+0x31c3d]        # 0x1063870
 1031c33:	xor    rax,rsp
 1031c36:	mov    QWORD PTR [rsp+0x260],rax
 1031c3e:	mov    rbp,rdx
 1031c41:	mov    rdi,rcx
 1031c44:	mov    QWORD PTR [rsp+0x40],rcx
 1031c49:	mov    DWORD PTR [rsp+0x20],0x0
 1031c51:	lea    rdx,[rip+0xfffffffffffd01b8]        # 0x1001e10
 1031c58:	call   QWORD PTR [rip+0xfffffffffffcfe52]        # 0x1001ab0
 1031c5e:	mov    DWORD PTR [rsp+0x20],0x1
 1031c66:	mov    r8d,0x104
 1031c6c:	lea    rdx,[rsp+0x50]
 1031c71:	xor    ecx,ecx
 1031c73:	call   QWORD PTR [rip+0xfffffffffffcf5f7]        # 0x1001270
 1031c79:	lea    rdx,[rsp+0x34]
 1031c7e:	lea    rcx,[rsp+0x50]
 1031c83:	call   0x10406ba
 1031c88:	mov    esi,eax
 1031c8a:	mov    ebx,eax
 1031c8c:	add    rbx,rbx
 1031c8f:	call   QWORD PTR [rip+0xfffffffffffcf8c3]        # 0x1001558
 1031c95:	mov    rcx,rax
 1031c98:	mov    r8,rbx
 1031c9b:	mov    edx,0x8
 1031ca0:	call   QWORD PTR [rip+0xfffffffffffcf8c2]        # 0x1001568
 1031ca6:	mov    rbx,rax
 1031ca9:	test   rax,rax
 1031cac:	je     0x1031cff
 1031cae:	mov    r9,rax
 1031cb1:	mov    r8d,esi
 1031cb4:	xor    edx,edx
 1031cb6:	lea    rcx,[rsp+0x50]
 1031cbb:	call   0x10406c6
 1031cc0:	test   eax,eax
 1031cc2:	je     0x1031ceb
 1031cc4:	lea    r9,[rsp+0x30]
 1031cc9:	lea    r8,[rsp+0x28]
 1031cce:	mov    rdx,rbp
 1031cd1:	mov    rcx,rbx
 1031cd4:	call   0x10406d2
 1031cd9:	test   eax,eax
 1031cdb:	je     0x1031ceb
 1031cdd:	mov    rdx,QWORD PTR [rsp+0x28]
 1031ce2:	mov    rcx,rdi
 1031ce5:	call   QWORD PTR [rip+0xfffffffffffcfdad]        # 0x1001a98
 1031ceb:	call   QWORD PTR [rip+0xfffffffffffcf867]        # 0x1001558
 1031cf1:	mov    rcx,rax
 1031cf4:	mov    r8,rbx
 1031cf7:	xor    edx,edx
 1031cf9:	call   QWORD PTR [rip+0xfffffffffffcf861]        # 0x1001560
 1031cff:	mov    rax,rdi
 1031d02:	mov    rcx,QWORD PTR [rsp+0x260]
 1031d0a:	xor    rcx,rsp
 1031d0d:	call   0x103ff40
 1031d12:	mov    rbx,QWORD PTR [rsp+0x2a0]
 1031d1a:	add    rsp,0x270
 1031d21:	pop    rdi
 1031d22:	pop    rsi
 1031d23:	pop    rbp
 1031d24:	ret    
 1031d25:	int3   
 1031d26:	int3   
 1031d27:	int3   
 1031d28:	int3   
 1031d29:	int3   
 1031d2a:	int3   
 1031d2b:	int3   
 1031d2c:	int3   
 1031d2d:	int3   
 1031d2e:	int3   
 1031d2f:	int3   
 1031d30:	mov    r11,rsp
 1031d33:	push   rdi
 1031d34:	sub    rsp,0x60
 1031d38:	mov    QWORD PTR [r11-0x40],0xfffffffffffffffe
 1031d40:	mov    QWORD PTR [r11+0x18],rbx
 1031d44:	mov    QWORD PTR [r11+0x20],rsi
 1031d48:	mov    rax,QWORD PTR [rip+0x31b21]        # 0x1063870
 1031d4f:	xor    rax,rsp
 1031d52:	mov    QWORD PTR [rsp+0x58],rax
 1031d57:	mov    rsi,rdx
 1031d5a:	mov    rbx,rcx
 1031d5d:	mov    QWORD PTR [r11-0x38],rcx
 1031d61:	mov    DWORD PTR [rsp+0x20],0x0
 1031d69:	call   QWORD PTR [rip+0xfffffffffffcfd41]        # 0x1001ab0
 1031d6f:	mov    DWORD PTR [rsp+0x20],0x1
 1031d77:	lea    rdi,[rip+0xfffffffffffd0cee]        # 0x1002a6c
 1031d7e:	mov    ecx,0x2
 1031d83:	repz cmps WORD PTR ds:[rsi],WORD PTR es:[rdi]
 1031d86:	jne    0x1031db2
 1031d88:	mov    DWORD PTR [rsp+0x24],0x10
 1031d90:	lea    rdx,[rsp+0x24]
 1031d95:	lea    rcx,[rsp+0x38]
 1031d9a:	call   QWORD PTR [rip+0xfffffffffffcf480]        # 0x1001220
 1031da0:	test   eax,eax
 1031da2:	je     0x1031db2
 1031da4:	lea    rdx,[rsp+0x38]
 1031da9:	mov    rcx,rbx
 1031dac:	call   QWORD PTR [rip+0xfffffffffffcfce6]        # 0x1001a98
 1031db2:	mov    rax,rbx
 1031db5:	mov    rcx,QWORD PTR [rsp+0x58]
 1031dba:	xor    rcx,rsp
 1031dbd:	call   0x103ff40
 1031dc2:	lea    r11,[rsp+0x60]
 1031dc7:	mov    rbx,QWORD PTR [r11+0x20]
 1031dcb:	mov    rsi,QWORD PTR [r11+0x28]
 1031dcf:	mov    rsp,r11
 1031dd2:	pop    rdi
 1031dd3:	ret    
 1031dd4:	int3   
 1031dd5:	int3   
 1031dd6:	int3   
 1031dd7:	int3   
 1031dd8:	int3   
 1031dd9:	int3   
 1031dda:	int3   
 1031ddb:	int3   
 1031ddc:	int3   
 1031ddd:	int3   
 1031dde:	int3   
 1031ddf:	int3   
 1031de0:	rex push rdi
 1031de2:	sub    rsp,0x1b0
 1031de9:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
 1031df2:	mov    QWORD PTR [rsp+0x1c8],rbx
 1031dfa:	mov    rax,QWORD PTR [rip+0x31a6f]        # 0x1063870
 1031e01:	xor    rax,rsp
 1031e04:	mov    QWORD PTR [rsp+0x1a0],rax
 1031e0c:	mov    rdi,rcx
 1031e0f:	lea    rcx,[rsp+0x28]
 1031e14:	call   QWORD PTR [rip+0xfffffffffffcfca6]        # 0x1001ac0
 1031e1a:	nop
 1031e1b:	xor    bl,bl
 1031e1d:	mov    DWORD PTR [rsp+0x24],0x10
 1031e25:	mov    DWORD PTR [rsp+0x40],0x114
 1031e2d:	lea    rcx,[rsp+0x40]
 1031e32:	call   QWORD PTR [rip+0xfffffffffffcf5e8]        # 0x1001420
 1031e38:	cmp    DWORD PTR [rsp+0x50],0x2
 1031e3d:	jne    0x1031eed
 1031e43:	xor    eax,eax
 1031e45:	mov    QWORD PTR [rsp+0x160],rax
 1031e4d:	mov    QWORD PTR [rsp+0x168],rax
 1031e55:	mov    QWORD PTR [rsp+0x170],rax
 1031e5d:	mov    QWORD PTR [rsp+0x178],rax
 1031e65:	lea    r9d,[rax+0xf]
 1031e69:	mov    r8,rdi
 1031e6c:	lea    edx,[rax+0x10]
 1031e6f:	lea    rcx,[rsp+0x160]
 1031e77:	call   QWORD PTR [rip+0xfffffffffffcf82b]        # 0x10016a8
 1031e7d:	lea    rdx,[rsp+0x24]
 1031e82:	lea    rcx,[rsp+0x180]
 1031e8a:	call   QWORD PTR [rip+0xfffffffffffcf390]        # 0x1001220
 1031e90:	lea    rdx,[rsp+0x160]
 1031e98:	lea    rcx,[rsp+0x180]
 1031ea0:	call   QWORD PTR [rip+0xfffffffffffcf82a]        # 0x10016d0
 1031ea6:	test   eax,eax
 1031ea8:	jne    0x1031eae
 1031eaa:	xor    ecx,ecx
 1031eac:	jmp    0x1031eb6
 1031eae:	lea    rcx,[rsp+0x160]
 1031eb6:	call   0x10406de
 1031ebb:	test   rax,rax
 1031ebe:	setne  bl
 1031ec1:	test   bl,bl
 1031ec3:	je     0x1031ecf
 1031ec5:	mov    rcx,rax
 1031ec8:	call   0x10406ea
 1031ecd:	jmp    0x1031eed
 1031ecf:	lea    rdx,[rsp+0x20]
 1031ed4:	lea    rcx,[rsp+0x160]
 1031edc:	call   0x104073e
 1031ee1:	test   eax,eax
 1031ee3:	jne    0x1031eed
 1031ee5:	cmp    DWORD PTR [rsp+0x20],0x13
 1031eea:	sete   bl
 1031eed:	lea    rcx,[rsp+0x28]
 1031ef2:	call   QWORD PTR [rip+0xfffffffffffcfbb0]        # 0x1001aa8
 1031ef8:	movzx  eax,bl
 1031efb:	mov    rcx,QWORD PTR [rsp+0x1a0]
 1031f03:	xor    rcx,rsp
 1031f06:	call   0x103ff40
 1031f0b:	mov    rbx,QWORD PTR [rsp+0x1c8]
 1031f13:	add    rsp,0x1b0
 1031f1a:	pop    rdi
 1031f1b:	ret    
 1031f1c:	int3   
 1031f1d:	int3   
 1031f1e:	int3   
 1031f1f:	int3   
 1031f20:	int3   
 1031f21:	int3   
 1031f22:	int3   
 1031f23:	int3   
 1031f24:	int3   
 1031f25:	int3   
 1031f26:	int3   
 1031f27:	int3   
 1031f28:	int3   
 1031f29:	int3   
 1031f2a:	int3   
 1031f2b:	int3   
 1031f2c:	int3   
 1031f2d:	int3   
 1031f2e:	int3   
 1031f2f:	int3   
 1031f30:	mov    rax,rsp
 1031f33:	push   rsi
 1031f34:	push   rdi
 1031f35:	push   r14
 1031f37:	sub    rsp,0x1a0
 1031f3e:	mov    QWORD PTR [rsp+0x70],0xfffffffffffffffe
 1031f47:	mov    QWORD PTR [rax+0x18],rbx
 1031f4b:	mov    QWORD PTR [rax+0x20],rbp
 1031f4f:	mov    rax,QWORD PTR [rip+0x3191a]        # 0x1063870
 1031f56:	xor    rax,rsp
 1031f59:	mov    QWORD PTR [rsp+0x190],rax
 1031f61:	movzx  ebx,dl
 1031f64:	mov    rsi,rcx
 1031f67:	xor    ebp,ebp
 1031f69:	mov    QWORD PTR [rsp+0x60],rbp
 1031f6e:	lea    rcx,[rsp+0x58]
 1031f73:	call   QWORD PTR [rip+0xfffffffffffcfb47]        # 0x1001ac0
 1031f79:	nop
 1031f7a:	mov    eax,0x4
 1031f7f:	or     r9d,0xffffffff
 1031f83:	test   bl,bl
 1031f85:	cmovne eax,r9d
 1031f89:	mov    QWORD PTR [rsp+0x40],rbp
 1031f8e:	mov    QWORD PTR [rsp+0x38],rbp
 1031f93:	mov    DWORD PTR [rsp+0x30],eax
 1031f97:	lea    rax,[rsp+0x50]
 1031f9c:	mov    QWORD PTR [rsp+0x28],rax
 1031fa1:	lea    rax,[rsp+0x68]
 1031fa6:	mov    QWORD PTR [rsp+0x20],rax
 1031fab:	lea    r8,[rsp+0x60]
 1031fb0:	lea    edx,[rbp+0x64]
 1031fb3:	xor    ecx,ecx
 1031fb5:	call   0x10491ec
 1031fba:	test   eax,eax
 1031fbc:	jne    0x103208b
 1031fc2:	mov    rcx,QWORD PTR [rsp+0x60]
 1031fc7:	test   rcx,rcx
 1031fca:	je     0x103208b
 1031fd0:	mov    edi,ebp
 1031fd2:	cmp    DWORD PTR [rsp+0x50],ebp
 1031fd6:	jbe    0x1032076
 1031fdc:	lea    r14,[rcx+0x8]
 1031fe0:	mov    QWORD PTR [rsp+0x38],rbp
 1031fe5:	mov    QWORD PTR [rsp+0x30],rbp
 1031fea:	mov    DWORD PTR [rsp+0x28],0x104
 1031ff2:	lea    rax,[rsp+0x80]
 1031ffa:	mov    QWORD PTR [rsp+0x20],rax
 1031fff:	or     r9d,0xffffffff
 1032003:	mov    r8,QWORD PTR [r14]
 1032006:	mov    edx,0x400
 103200b:	xor    ecx,ecx
 103200d:	call   QWORD PTR [rip+0xfffffffffffcf205]        # 0x1001218
 1032013:	test   eax,eax
 1032015:	je     0x1032061
 1032017:	lea    rdx,[rsp+0x80]
 103201f:	lea    rcx,[rsp+0x58]
 1032024:	call   QWORD PTR [rip+0xfffffffffffcf93e]        # 0x1001968
 103202a:	xor    r8d,r8d
 103202d:	mov    rdx,QWORD PTR [rsi+0x10]
 1032031:	mov    rcx,rsi
 1032034:	call   0x100c430
 1032039:	mov    rbx,rax
 103203c:	lea    rcx,[rax+0x10]
 1032040:	lea    rdx,[rsp+0x58]
 1032045:	call   QWORD PTR [rip+0xfffffffffffcfa55]        # 0x1001aa0
 103204b:	mov    r11,QWORD PTR [rsi+0x10]
 103204f:	test   r11,r11
 1032052:	je     0x1032059
 1032054:	mov    QWORD PTR [r11],rbx
 1032057:	jmp    0x103205d
 1032059:	mov    QWORD PTR [rsi+0x8],rbx
 103205d:	mov    QWORD PTR [rsi+0x10],rbx
 1032061:	inc    edi
 1032063:	add    r14,0x10
 1032067:	cmp    edi,DWORD PTR [rsp+0x50]
 103206b:	jb     0x1031fe0
 1032071:	mov    rcx,QWORD PTR [rsp+0x60]
 1032076:	call   0x10491f8
 103207b:	nop
 103207c:	lea    rcx,[rsp+0x58]
 1032081:	call   QWORD PTR [rip+0xfffffffffffcfa21]        # 0x1001aa8
 1032087:	mov    al,0x1
 1032089:	jmp    0x1032098
 103208b:	lea    rcx,[rsp+0x58]
 1032090:	call   QWORD PTR [rip+0xfffffffffffcfa12]        # 0x1001aa8
 1032096:	xor    al,al
 1032098:	mov    rcx,QWORD PTR [rsp+0x190]
 10320a0:	xor    rcx,rsp
 10320a3:	call   0x103ff40
 10320a8:	lea    r11,[rsp+0x1a0]
 10320b0:	mov    rbx,QWORD PTR [r11+0x30]
 10320b4:	mov    rbp,QWORD PTR [r11+0x38]
 10320b8:	mov    rsp,r11
 10320bb:	pop    r14
 10320bd:	pop    rdi
 10320be:	pop    rsi
 10320bf:	ret    
 10320c0:	int3   
 10320c1:	int3   
 10320c2:	int3   
 10320c3:	int3   
 10320c4:	int3   
 10320c5:	int3   
 10320c6:	int3   
 10320c7:	int3   
 10320c8:	int3   
 10320c9:	int3   
 10320ca:	int3   
 10320cb:	int3   
 10320cc:	int3   
 10320cd:	int3   
 10320ce:	int3   
 10320cf:	int3   
 10320d0:	mov    QWORD PTR [rsp+0x8],rcx
 10320d5:	push   rdi
 10320d6:	sub    rsp,0x30
 10320da:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
 10320e3:	mov    QWORD PTR [rsp+0x48],rbx
 10320e8:	mov    rbx,rdx
 10320eb:	mov    rdi,rcx
 10320ee:	xor    eax,eax
 10320f0:	mov    DWORD PTR [rsp+0x20],eax
 10320f4:	mov    QWORD PTR [rsp+0x58],rax
 10320f9:	lea    edx,[rax+0x2e]
 10320fc:	lea    r8d,[rax+0x1]
 1032100:	call   QWORD PTR [rip+0xfffffffffffcf82a]        # 0x1001930
 1032106:	mov    DWORD PTR [rsp+0x20],0x1
 103210e:	lea    r8,[rsp+0x50]
 1032113:	xor    edx,edx
 1032115:	mov    rcx,rbx
 1032118:	call   0x1032180
 103211d:	mov    rbx,rax
 1032120:	test   rax,rax
 1032123:	je     0x1032168
 1032125:	lea    r9,[rsp+0x58]
 103212a:	lea    r8,[rip+0xfffffffffffd501f]        # 0x1007150
 1032131:	mov    edx,DWORD PTR [rsp+0x50]
 1032135:	mov    rcx,rax
 1032138:	call   0x104074a
 103213d:	test   eax,eax
 103213f:	jne    0x103214f
 1032141:	mov    rdx,QWORD PTR [rsp+0x58]
 1032146:	mov    rcx,rdi
 1032149:	call   QWORD PTR [rip+0xfffffffffffcf949]        # 0x1001a98
 103214f:	mov    rcx,rbx
 1032152:	call   QWORD PTR [rip+0xfffffffffffcf0d8]        # 0x1001230
 1032158:	mov    rcx,QWORD PTR [rsp+0x58]
 103215d:	test   rcx,rcx
 1032160:	je     0x1032168
 1032162:	call   QWORD PTR [rip+0xfffffffffffcf0c8]        # 0x1001230
 1032168:	mov    rax,rdi
 103216b:	mov    rbx,QWORD PTR [rsp+0x48]
 1032170:	add    rsp,0x30
 1032174:	pop    rdi
 1032175:	ret    
 1032176:	int3   
 1032177:	int3   
 1032178:	int3   
 1032179:	int3   
 103217a:	int3   
 103217b:	int3   
 103217c:	int3   
 103217d:	int3   
 103217e:	int3   
 103217f:	int3   
 1032180:	mov    QWORD PTR [rsp+0x8],rbx
 1032185:	mov    QWORD PTR [rsp+0x10],rbp
 103218a:	mov    QWORD PTR [rsp+0x18],rsi
 103218f:	mov    QWORD PTR [rsp+0x20],rdi
 1032194:	push   r14
 1032196:	sub    rsp,0x40
 103219a:	mov    rbp,rdx
 103219d:	mov    r14,rcx
 10321a0:	mov    edx,0x400
 10321a5:	mov    ecx,0x40
 10321aa:	mov    rsi,r8
 10321ad:	call   QWORD PTR [rip+0xfffffffffffcf0f5]        # 0x10012a8
 10321b3:	mov    rbx,rax
 10321b6:	test   rax,rax
 10321b9:	je     0x1032212
 10321bb:	mov    QWORD PTR [rsp+0x38],rsi
 10321c0:	mov    DWORD PTR [rsp+0x30],0x400
 10321c8:	mov    QWORD PTR [rsp+0x28],rax
 10321cd:	xor    r9d,r9d
 10321d0:	mov    r8d,0x1000081
 10321d6:	mov    rdx,rbp
 10321d9:	mov    rcx,r14
 10321dc:	mov    DWORD PTR [rsp+0x20],0x0
 10321e4:	call   0x1040732
 10321e9:	mov    edi,eax
 10321eb:	cmp    eax,0xea
 10321f0:	jne    0x1032248
 10321f2:	mov    rcx,rbx
 10321f5:	call   QWORD PTR [rip+0xfffffffffffcf035]        # 0x1001230
 10321fb:	mov    edi,DWORD PTR [rsi]
 10321fd:	mov    ecx,0x40
 1032202:	mov    edx,edi
 1032204:	call   QWORD PTR [rip+0xfffffffffffcf09e]        # 0x10012a8
 103220a:	mov    rbx,rax
 103220d:	test   rax,rax
 1032210:	jne    0x103221c
 1032212:	call   QWORD PTR [rip+0xfffffffffffcf338]        # 0x1001550
 1032218:	mov    edi,eax
 103221a:	jmp    0x1032259
 103221c:	mov    QWORD PTR [rsp+0x38],rsi
 1032221:	mov    DWORD PTR [rsp+0x30],edi
 1032225:	mov    QWORD PTR [rsp+0x28],rax
 103222a:	xor    r9d,r9d
 103222d:	mov    r8d,0x1000081
 1032233:	mov    rdx,rbp
 1032236:	mov    rcx,r14
 1032239:	mov    DWORD PTR [rsp+0x20],0x0
 1032241:	call   0x1040732
 1032246:	mov    edi,eax
 1032248:	test   edi,edi
 103224a:	je     0x1032259
 103224c:	mov    rcx,rbx
 103224f:	call   QWORD PTR [rip+0xfffffffffffcefdb]        # 0x1001230
 1032255:	xor    ebx,ebx
 1032257:	mov    DWORD PTR [rsi],ebx
 1032259:	mov    ecx,edi
 103225b:	call   QWORD PTR [rip+0xfffffffffffcf207]        # 0x1001468
 1032261:	mov    rbp,QWORD PTR [rsp+0x58]
 1032266:	mov    rsi,QWORD PTR [rsp+0x60]
 103226b:	mov    rdi,QWORD PTR [rsp+0x68]
 1032270:	mov    rax,rbx
 1032273:	mov    rbx,QWORD PTR [rsp+0x50]
 1032278:	add    rsp,0x40
 103227c:	pop    r14
 103227e:	ret    
 103227f:	int3   
 1032280:	int3   
 1032281:	int3   
 1032282:	int3   
 1032283:	int3   
 1032284:	int3   
 1032285:	int3   
 1032286:	int3   
 1032287:	int3   
 1032288:	int3   
 1032289:	int3   
 103228a:	int3   
 103228b:	int3   
 103228c:	int3   
 103228d:	int3   
 103228e:	int3   
 103228f:	int3   
 1032290:	rex push rbp
 1032292:	push   rsi
 1032293:	push   rdi
 1032294:	push   r12
 1032296:	push   r13
 1032298:	push   r14
 103229a:	push   r15
 103229c:	lea    rbp,[rsp-0x1000]
 10322a4:	mov    eax,0x1100
 10322a9:	call   0x1040290
 10322ae:	sub    rsp,rax
 10322b1:	mov    QWORD PTR [rbp-0x80],0xfffffffffffffffe
 10322b9:	mov    QWORD PTR [rsp+0x1158],rbx
 10322c1:	mov    rax,QWORD PTR [rip+0x315a8]        # 0x1063870
 10322c8:	xor    rax,rsp
 10322cb:	mov    QWORD PTR [rbp+0xff0],rax
 10322d2:	mov    QWORD PTR [rsp+0x60],r8
 10322d7:	mov    QWORD PTR [rsp+0x68],rdx
 10322dc:	mov    rdi,rcx
 10322df:	xor    r12b,r12b
 10322e2:	lea    rcx,[rsp+0x40]
 10322e7:	call   QWORD PTR [rip+0xfffffffffffcf7d3]        # 0x1001ac0
 10322ed:	nop
 10322ee:	xor    eax,eax
 10322f0:	mov    QWORD PTR [rbp-0x78],rax
 10322f4:	mov    QWORD PTR [rbp-0x70],rax
 10322f8:	mov    QWORD PTR [rbp-0x68],rax
 10322fc:	mov    QWORD PTR [rbp-0x60],rax
 1032300:	mov    DWORD PTR [rsp+0x5c],0x10
 1032308:	lea    r9d,[rax+0xf]
 103230c:	mov    r8,rdi
 103230f:	lea    edx,[rax+0x10]
 1032312:	lea    rcx,[rbp-0x78]
 1032316:	call   QWORD PTR [rip+0xfffffffffffcf38c]        # 0x10016a8
 103231c:	lea    rdx,[rsp+0x5c]
 1032321:	lea    rcx,[rbp-0x58]
 1032325:	call   QWORD PTR [rip+0xfffffffffffceef5]        # 0x1001220
 103232b:	lea    rdx,[rbp-0x78]
 103232f:	lea    rcx,[rbp-0x58]
 1032333:	call   QWORD PTR [rip+0xfffffffffffcf397]        # 0x10016d0
 1032339:	test   eax,eax
 103233b:	jne    0x1032341
 103233d:	xor    ecx,ecx
 103233f:	jmp    0x1032345
 1032341:	lea    rcx,[rbp-0x78]
 1032345:	call   0x10406de
 103234a:	mov    r14,rax
 103234d:	test   rax,rax
 1032350:	je     0x10325ab
 1032356:	mov    edx,0x4
 103235b:	mov    rcx,rax
 103235e:	call   0x10406f6
 1032363:	mov    r13,rax
 1032366:	test   rax,rax
 1032369:	je     0x10325a2
 103236f:	xor    r15d,r15d
 1032372:	mov    DWORD PTR [rsp+0x48],0x400
 103237a:	lea    rax,[rsp+0x48]
 103237f:	mov    QWORD PTR [rsp+0x20],rax
 1032384:	lea    r9,[rbp-0x30]
 1032388:	lea    r8,[rsp+0x58]
 103238d:	xor    edx,edx
 103238f:	mov    rcx,r13
 1032392:	call   0x1040702
 1032397:	test   eax,eax
 1032399:	jne    0x103259a
 103239f:	nop
 10323a0:	lea    rdx,[rbp-0x30]
 10323a4:	mov    rcx,r14
 10323a7:	call   0x104071a
 10323ac:	mov    rbx,rax
 10323af:	lea    rdx,[rbp-0x30]
 10323b3:	lea    rcx,[rsp+0x40]
 10323b8:	call   QWORD PTR [rip+0xfffffffffffcf6da]        # 0x1001a98
 10323be:	test   rbx,rbx
 10323c1:	je     0x1032569
 10323c7:	mov    QWORD PTR [rsp+0x38],0x0
 10323d0:	mov    DWORD PTR [rsp+0x30],0x400
 10323d8:	lea    rax,[rbp+0x7e0]
 10323df:	mov    QWORD PTR [rsp+0x28],rax
 10323e4:	mov    DWORD PTR [rsp+0x20],0x0
 10323ec:	xor    r9d,r9d
 10323ef:	xor    edx,edx
 10323f1:	mov    r8d,0x100002d
 10323f7:	mov    rcx,rbx
 10323fa:	call   0x1040732
 10323ff:	test   eax,eax
 1032401:	jne    0x1032561
 1032407:	lea    rsi,[rip+0xfffffffffffd2f8a]        # 0x1005398
 103240e:	lea    rdi,[rbp+0x7e0]
 1032415:	mov    ecx,0xb
 103241a:	repz cmps WORD PTR ds:[rsi],WORD PTR es:[rdi]
 103241d:	jne    0x1032561
 1032423:	mov    rdx,rbx
 1032426:	lea    rcx,[rsp+0x50]
 103242b:	call   0x10320d0
 1032430:	nop
 1032431:	lea    rcx,[rsp+0x50]
 1032436:	call   QWORD PTR [rip+0xfffffffffffcf524]        # 0x1001960
 103243c:	mov    rdx,rax
 103243f:	mov    rcx,QWORD PTR [rsp+0x68]
 1032444:	call   0x100c370
 1032449:	lea    rdx,[rbp+0x7e0]
 1032450:	lea    rcx,[rsp+0x40]
 1032455:	call   QWORD PTR [rip+0xfffffffffffcf605]        # 0x1001a60
 103245b:	test   eax,eax
 103245d:	jne    0x103248c
 103245f:	lea    rcx,[rsp+0x50]
 1032464:	call   QWORD PTR [rip+0xfffffffffffcf67e]        # 0x1001ae8
 103246a:	mov    rdx,rax
 103246d:	mov    rcx,QWORD PTR [rsp+0x60]
 1032472:	call   0x100ea00
 1032477:	mov    rcx,rax
 103247a:	lea    rdx,[rip+0xfffffffffffd3aa7]        # 0x1005f28
 1032481:	call   QWORD PTR [rip+0xfffffffffffcf611]        # 0x1001a98
 1032487:	jmp    0x1032553
 103248c:	xor    r8d,r8d
 103248f:	lea    rdx,[rip+0xfffffffffffd2ef6]        # 0x100538c
 1032496:	lea    rcx,[rsp+0x40]
 103249b:	call   QWORD PTR [rip+0xfffffffffffcf5b7]        # 0x1001a58
 10324a1:	cmp    eax,0xffffffff
 10324a4:	je     0x1032553
 10324aa:	mov    r8d,eax
 10324ad:	lea    rdx,[rsp+0x78]
 10324b2:	lea    rcx,[rsp+0x40]
 10324b7:	call   QWORD PTR [rip+0xfffffffffffcf58b]        # 0x1001a48
 10324bd:	nop
 10324be:	mov    rdx,rax
 10324c1:	lea    rcx,[rsp+0x40]
 10324c6:	call   QWORD PTR [rip+0xfffffffffffcf5d4]        # 0x1001aa0
 10324cc:	nop
 10324cd:	lea    rcx,[rsp+0x78]
 10324d2:	call   QWORD PTR [rip+0xfffffffffffcf5d0]        # 0x1001aa8
 10324d8:	xor    r8d,r8d
 10324db:	lea    rdx,[rip+0xfffffffffffd2eae]        # 0x1005390
 10324e2:	lea    rcx,[rsp+0x40]
 10324e7:	call   QWORD PTR [rip+0xfffffffffffcf56b]        # 0x1001a58
 10324ed:	cmp    eax,0xffffffff
 10324f0:	je     0x1032553
 10324f2:	lea    r8d,[rax+0x1]
 10324f6:	lea    rdx,[rsp+0x70]
 10324fb:	lea    rcx,[rsp+0x40]
 1032500:	call   QWORD PTR [rip+0xfffffffffffcf41a]        # 0x1001920
 1032506:	nop
 1032507:	mov    rdx,rax
 103250a:	lea    rcx,[rsp+0x40]
 103250f:	call   QWORD PTR [rip+0xfffffffffffcf58b]        # 0x1001aa0
 1032515:	nop
 1032516:	lea    rcx,[rsp+0x70]
 103251b:	call   QWORD PTR [rip+0xfffffffffffcf587]        # 0x1001aa8
 1032521:	lea    rcx,[rsp+0x40]
 1032526:	call   QWORD PTR [rip+0xfffffffffffcf434]        # 0x1001960
 103252c:	mov    rdi,rax
 103252f:	lea    rcx,[rsp+0x50]
 1032534:	call   QWORD PTR [rip+0xfffffffffffcf5ae]        # 0x1001ae8
 103253a:	mov    rdx,rax
 103253d:	mov    rcx,QWORD PTR [rsp+0x60]
 1032542:	call   0x100ea00
 1032547:	mov    rcx,rax
 103254a:	mov    rdx,rdi
 103254d:	call   QWORD PTR [rip+0xfffffffffffcf54d]        # 0x1001aa0
 1032553:	mov    r12b,0x1
 1032556:	lea    rcx,[rsp+0x50]
 103255b:	call   QWORD PTR [rip+0xfffffffffffcf547]        # 0x1001aa8
 1032561:	mov    rcx,rbx
 1032564:	call   0x1040726
 1032569:	inc    r15d
 103256c:	mov    DWORD PTR [rsp+0x48],0x400
 1032574:	lea    rax,[rsp+0x48]
 1032579:	mov    QWORD PTR [rsp+0x20],rax
 103257e:	lea    r9,[rbp-0x30]
 1032582:	lea    r8,[rsp+0x58]
 1032587:	mov    edx,r15d
 103258a:	mov    rcx,r13
 103258d:	call   0x1040702
 1032592:	test   eax,eax
 1032594:	je     0x10323a0
 103259a:	mov    rcx,r13
 103259d:	call   0x104070e
 10325a2:	mov    rcx,r14
 10325a5:	call   0x10406ea
 10325aa:	nop
 10325ab:	lea    rcx,[rsp+0x40]
 10325b0:	call   QWORD PTR [rip+0xfffffffffffcf4f2]        # 0x1001aa8
 10325b6:	movzx  eax,r12b
 10325ba:	mov    rcx,QWORD PTR [rbp+0xff0]
 10325c1:	xor    rcx,rsp
 10325c4:	call   0x103ff40
 10325c9:	mov    rbx,QWORD PTR [rsp+0x1158]
 10325d1:	add    rsp,0x1100
 10325d8:	pop    r15
 10325da:	pop    r14
 10325dc:	pop    r13
 10325de:	pop    r12
 10325e0:	pop    rdi
 10325e1:	pop    rsi
 10325e2:	pop    rbp
 10325e3:	ret    
 10325e4:	int3   
 10325e5:	int3   
 10325e6:	int3   
 10325e7:	int3   
 10325e8:	int3   
 10325e9:	int3   
 10325ea:	int3   
 10325eb:	int3   
 10325ec:	int3   
 10325ed:	int3   
 10325ee:	int3   
 10325ef:	int3   
 10325f0:	rex push rbp
 10325f2:	push   rsi
 10325f3:	push   r14
 10325f5:	sub    rsp,0x90
 10325fc:	mov    rax,QWORD PTR [rip+0x3126d]        # 0x1063870
 1032603:	xor    rax,rsp
 1032606:	mov    QWORD PTR [rsp+0x80],rax
 103260e:	mov    rbp,rcx
 1032611:	lea    rdx,[rsp+0x38]
 1032616:	lea    rcx,[rsp+0x60]
 103261b:	xor    r14b,r14b
 103261e:	mov    DWORD PTR [rsp+0x38],0x10
 1032626:	call   QWORD PTR [rip+0xfffffffffffcebf4]        # 0x1001220
 103262c:	lea    rcx,[rsp+0x60]
 1032631:	mov    r8d,0xf
 1032637:	mov    rdx,rbp
 103263a:	call   QWORD PTR [rip+0xfffffffffffcf008]        # 0x1001648
 1032640:	test   eax,eax
 1032642:	jne    0x1032648
 1032644:	xor    ecx,ecx
 1032646:	jmp    0x103264b
 1032648:	mov    rcx,rbp
 103264b:	call   0x10406de
 1032650:	mov    rsi,rax
 1032653:	test   rax,rax
 1032656:	je     0x103271a
 103265c:	mov    edx,0x1
 1032661:	mov    rcx,rax
 1032664:	mov    QWORD PTR [rsp+0xc0],rdi
 103266c:	call   0x10406f6
 1032671:	mov    rdi,rax
 1032674:	test   rax,rax
 1032677:	je     0x103270a
 103267d:	lea    rax,[rsp+0x30]
 1032682:	lea    r9,[rsp+0x40]
 1032687:	lea    r8,[rsp+0x34]
 103268c:	xor    edx,edx
 103268e:	mov    rcx,rdi
 1032691:	mov    QWORD PTR [rsp+0xb8],rbx
 1032699:	mov    QWORD PTR [rsp+0x20],rax
 103269e:	mov    DWORD PTR [rsp+0x30],0xf
 10326a6:	xor    ebx,ebx
 10326a8:	call   0x1040702
 10326ad:	test   eax,eax
 10326af:	jne    0x10326fa
 10326b1:	lea    rdx,[rsp+0x40]
 10326b6:	mov    r8d,0xf
 10326bc:	mov    rcx,rbp
 10326bf:	call   QWORD PTR [rip+0xfffffffffffcef83]        # 0x1001648
 10326c5:	test   eax,eax
 10326c7:	je     0x10326f7
 10326c9:	lea    rax,[rsp+0x30]
 10326ce:	inc    ebx
 10326d0:	lea    r9,[rsp+0x40]
 10326d5:	lea    r8,[rsp+0x34]
 10326da:	mov    rcx,rdi
 10326dd:	mov    edx,ebx
 10326df:	mov    QWORD PTR [rsp+0x20],rax
 10326e4:	mov    DWORD PTR [rsp+0x30],0xf
 10326ec:	call   0x1040702
 10326f1:	test   eax,eax
 10326f3:	je     0x10326b1
 10326f5:	jmp    0x10326fa
 10326f7:	mov    r14b,0x1
 10326fa:	mov    rcx,rdi
 10326fd:	call   0x104070e
 1032702:	mov    rbx,QWORD PTR [rsp+0xb8]
 103270a:	mov    rcx,rsi
 103270d:	call   0x10406ea
 1032712:	mov    rdi,QWORD PTR [rsp+0xc0]
 103271a:	movzx  eax,r14b
 103271e:	mov    rcx,QWORD PTR [rsp+0x80]
 1032726:	xor    rcx,rsp
 1032729:	call   0x103ff40
 103272e:	add    rsp,0x90
 1032735:	pop    r14
 1032737:	pop    rsi
 1032738:	pop    rbp
 1032739:	ret    
 103273a:	int3   
 103273b:	int3   
 103273c:	int3   
 103273d:	int3   
 103273e:	int3   
 103273f:	int3   
 1032740:	mov    rax,rsp
 1032743:	push   rbp
 1032744:	push   rdi
 1032745:	push   r12
 1032747:	push   r14
 1032749:	push   r15
 103274b:	lea    rbp,[rax-0x5f]
 103274f:	sub    rsp,0xa0
 1032756:	mov    QWORD PTR [rbp+0x27],0xfffffffffffffffe
 103275e:	mov    QWORD PTR [rax+0x8],rbx
 1032762:	mov    QWORD PTR [rax+0x18],rsi
 1032766:	mov    rdi,rcx
 1032769:	lea    r15,[rip+0xfffffffffffcf6b0]        # 0x1001e20
 1032770:	mov    QWORD PTR [rbp-0x49],r15
 1032774:	xor    r14d,r14d
 1032777:	mov    QWORD PTR [rbp-0x31],r14
 103277b:	mov    QWORD PTR [rbp-0x29],r14
 103277f:	mov    QWORD PTR [rbp-0x39],r14
 1032783:	mov    QWORD PTR [rbp-0x41],r14
 1032787:	mov    QWORD PTR [rbp-0x21],r14
 103278b:	mov    QWORD PTR [rbp-0x19],0xa
 1032793:	lea    r12,[rip+0xfffffffffffd02a6]        # 0x1002a40
 103279a:	mov    QWORD PTR [rbp-0x11],r12
 103279e:	mov    QWORD PTR [rbp-0x9],r14
 10327a2:	mov    DWORD PTR [rbp-0x1],0x11
 10327a9:	mov    QWORD PTR [rbp+0x7],r14
 10327ad:	mov    QWORD PTR [rbp+0xf],r14
 10327b1:	mov    QWORD PTR [rbp+0x17],r14
 10327b5:	mov    QWORD PTR [rbp+0x1f],0xa
 10327bd:	mov    rdx,rcx
 10327c0:	lea    rcx,[rbp+0x6f]
 10327c4:	call   QWORD PTR [rip+0xfffffffffffcf2e6]        # 0x1001ab0
 10327ca:	nop
 10327cb:	mov    rbx,QWORD PTR [rbp-0x41]
 10327cf:	test   rbx,rbx
 10327d2:	je     0x10327e6
 10327d4:	lea    rcx,[rbx+0x10]
 10327d8:	call   QWORD PTR [rip+0xfffffffffffcf2ca]        # 0x1001aa8
 10327de:	mov    rbx,QWORD PTR [rbx]
 10327e1:	test   rbx,rbx
 10327e4:	jne    0x10327d4
 10327e6:	mov    QWORD PTR [rbp-0x31],r14
 10327ea:	mov    QWORD PTR [rbp-0x29],r14
 10327ee:	mov    QWORD PTR [rbp-0x39],r14
 10327f2:	mov    QWORD PTR [rbp-0x41],r14
 10327f6:	mov    rcx,QWORD PTR [rbp-0x21]
 10327fa:	call   0x103f9ae
 10327ff:	mov    QWORD PTR [rbp-0x21],r14
 1032803:	lea    rcx,[rbp-0x11]
 1032807:	call   0x1012a20
 103280c:	lea    r8,[rbp-0x11]
 1032810:	lea    rdx,[rbp-0x49]
 1032814:	mov    rcx,rdi
 1032817:	call   0x1032290
 103281c:	test   al,al
 103281e:	je     0x103287a
 1032820:	lea    rcx,[rbp+0x6f]
 1032824:	call   QWORD PTR [rip+0xfffffffffffcf136]        # 0x1001960
 103282a:	mov    rsi,rax
 103282d:	mov    rbx,QWORD PTR [rbp-0x41]
 1032831:	test   rbx,rbx
 1032834:	je     0x103287a
 1032836:	lea    rdi,[rbx+0x10]
 103283a:	test   rdi,rdi
 103283d:	je     0x1032874
 103283f:	test   rsi,rsi
 1032842:	je     0x1032874
 1032844:	mov    rcx,rsi
 1032847:	call   QWORD PTR [rip+0xfffffffffffcf29b]        # 0x1001ae8
 103284d:	mov    rdx,rax
 1032850:	mov    rcx,rdi
 1032853:	call   QWORD PTR [rip+0xfffffffffffcf1a7]        # 0x1001a00
 1032859:	mov    ecx,r14d
 103285c:	test   eax,eax
 103285e:	sete   cl
 1032861:	test   ecx,ecx
 1032863:	jne    0x103286a
 1032865:	mov    rbx,QWORD PTR [rbx]
 1032868:	jmp    0x1032831
 103286a:	test   rbx,rbx
 103286d:	je     0x103287a
 103286f:	mov    dil,0x1
 1032872:	jmp    0x103287d
 1032874:	call   0x103f972
 1032879:	int3   
 103287a:	xor    dil,dil
 103287d:	lea    rcx,[rbp+0x6f]
 1032881:	call   QWORD PTR [rip+0xfffffffffffcf221]        # 0x1001aa8
 1032887:	nop
 1032888:	mov    QWORD PTR [rbp-0x11],r12
 103288c:	lea    rcx,[rbp-0x11]
 1032890:	call   0x1012a20
 1032895:	nop
 1032896:	mov    QWORD PTR [rbp-0x49],r15
 103289a:	mov    rbx,QWORD PTR [rbp-0x41]
 103289e:	test   rbx,rbx
 10328a1:	je     0x10328b5
 10328a3:	lea    rcx,[rbx+0x10]
 10328a7:	call   QWORD PTR [rip+0xfffffffffffcf1fb]        # 0x1001aa8
 10328ad:	mov    rbx,QWORD PTR [rbx]
 10328b0:	test   rbx,rbx
 10328b3:	jne    0x10328a3
 10328b5:	mov    QWORD PTR [rbp-0x31],r14
 10328b9:	mov    QWORD PTR [rbp-0x29],r14
 10328bd:	mov    QWORD PTR [rbp-0x39],r14
 10328c1:	mov    QWORD PTR [rbp-0x41],r14
 10328c5:	mov    rcx,QWORD PTR [rbp-0x21]
 10328c9:	call   0x103f9ae
 10328ce:	mov    QWORD PTR [rbp-0x21],r14
 10328d2:	movzx  eax,dil
 10328d6:	lea    r11,[rsp+0xa0]
 10328de:	mov    rbx,QWORD PTR [r11+0x30]
 10328e2:	mov    rsi,QWORD PTR [r11+0x40]
 10328e6:	mov    rsp,r11
 10328e9:	pop    r15
 10328eb:	pop    r14
 10328ed:	pop    r12
 10328ef:	pop    rdi
 10328f0:	pop    rbp
 10328f1:	ret    
 10328f2:	int3   
 10328f3:	int3   
 10328f4:	int3   
 10328f5:	int3   
 10328f6:	int3   
 10328f7:	int3   
 10328f8:	int3   
 10328f9:	int3   
 10328fa:	int3   
 10328fb:	int3   
 10328fc:	int3   
 10328fd:	int3   
 10328fe:	int3   
 10328ff:	int3   
 1032900:	mov    QWORD PTR [rsp+0x18],rbx
 1032905:	mov    QWORD PTR [rsp+0x20],rbp
 103290a:	push   rsi
 103290b:	push   rdi
 103290c:	push   r12
 103290e:	push   r13
 1032910:	push   r14
 1032912:	sub    rsp,0x40
 1032916:	xor    ebx,ebx
 1032918:	xor    edi,edi
 103291a:	xor    esi,esi
 103291c:	movzx  r12d,r9b
 1032920:	mov    ebp,r8d
 1032923:	mov    r14d,edx
 1032926:	mov    r13,rcx
 1032929:	test   edx,edx
 103292b:	je     0x10329ac
 103292d:	mov    QWORD PTR [rsp+0x70],r15
 1032932:	movzx  r15d,BYTE PTR [rsp+0x90]
 103293b:	nop    DWORD PTR [rax+rax*1+0x0]
 1032940:	cmp    ebp,0xffffffff
 1032943:	je     0x1032949
 1032945:	cmp    edi,ebp
 1032947:	jae    0x10329a7
 1032949:	cmp    esi,0xc0
 103294f:	jne    0x1032956
 1032951:	test   r15b,r15b
 1032954:	je     0x10329a7
 1032956:	lea    r9,[rsp+0x30]
 103295b:	lea    r8,[rsp+0x38]
 1032960:	lea    rdx,[rsp+0x78]
 1032965:	mov    rcx,r13
 1032968:	mov    DWORD PTR [rsp+0x20],0x0
 1032970:	call   QWORD PTR [rip+0xfffffffffffceafa]        # 0x1001470
 1032976:	test   eax,eax
 1032978:	je     0x103297e
 103297a:	inc    ebx
 103297c:	jmp    0x10329a2
 103297e:	lea    rcx,[rip+0x30acb]        # 0x1063450
 1032985:	add    edi,0x3e8
 103298b:	call   QWORD PTR [rip+0xfffffffffffceab7]        # 0x1001448
 1032991:	movzx  edx,r12b
 1032995:	mov    ecx,0x3e8
 103299a:	call   QWORD PTR [rip+0xfffffffffffceb20]        # 0x10014c0
 10329a0:	mov    esi,eax
 10329a2:	cmp    ebx,r14d
 10329a5:	jb     0x1032940
 10329a7:	mov    r15,QWORD PTR [rsp+0x70]
 10329ac:	xor    ecx,ecx
 10329ae:	call   QWORD PTR [rip+0xfffffffffffceb94]        # 0x1001548
 10329b4:	lea    r11,[rsp+0x40]
 10329b9:	mov    eax,esi
 10329bb:	mov    rbx,QWORD PTR [r11+0x40]
 10329bf:	mov    rbp,QWORD PTR [r11+0x48]
 10329c3:	mov    rsp,r11
 10329c6:	pop    r14
 10329c8:	pop    r13
 10329ca:	pop    r12
 10329cc:	pop    rdi
 10329cd:	pop    rsi
 10329ce:	ret    
 10329cf:	int3   
 10329d0:	int3   
 10329d1:	int3   
 10329d2:	int3   
 10329d3:	int3   
 10329d4:	int3   
 10329d5:	int3   
 10329d6:	int3   
 10329d7:	int3   
 10329d8:	int3   
 10329d9:	int3   
 10329da:	int3   
 10329db:	int3   
 10329dc:	int3   
 10329dd:	int3   
 10329de:	int3   
 10329df:	int3   
 10329e0:	mov    rax,rsp
 10329e3:	mov    QWORD PTR [rax+0x8],rcx
 10329e7:	push   rbp
 10329e8:	push   rdi
 10329e9:	push   r12
 10329eb:	push   r14
 10329ed:	push   r15
 10329ef:	mov    rbp,rsp
 10329f2:	sub    rsp,0x70
 10329f6:	mov    QWORD PTR [rbp-0x8],0xfffffffffffffffe
 10329fe:	mov    QWORD PTR [rax+0x10],rbx
 1032a02:	mov    QWORD PTR [rax+0x18],rsi
 1032a06:	mov    rdi,r9
 1032a09:	mov    r15,r8
 1032a0c:	mov    r14,rdx
 1032a0f:	mov    rsi,rcx
 1032a12:	xor    r12d,r12d
 1032a15:	mov    DWORD PTR [rbp-0xc],r12d
 1032a19:	mov    QWORD PTR [rbp-0x18],r12
 1032a1d:	mov    QWORD PTR [rbp-0x20],r12
 1032a21:	mov    QWORD PTR [rbp-0x28],r12
 1032a25:	mov    QWORD PTR [rbp-0x30],r12
 1032a29:	mov    QWORD PTR [rbp-0x38],r12
 1032a2d:	mov    DWORD PTR [rbp-0x40],0x1
 1032a34:	mov    DWORD PTR [rbp+0x48],0x4
 1032a3b:	lea    rdx,[rip+0xfffffffffffcf3ce]        # 0x1001e10
 1032a42:	call   QWORD PTR [rip+0xfffffffffffcf068]        # 0x1001ab0
 1032a48:	mov    DWORD PTR [rbp-0xc],0x1
 1032a4f:	mov    rbx,QWORD PTR [rdi]
 1032a52:	lea    r8,[rbp-0x18]
 1032a56:	mov    rdx,0xffffffff80000002
 1032a5d:	xor    ecx,ecx
 1032a5f:	call   QWORD PTR [rip+0xfffffffffffce60b]        # 0x1001070
 1032a65:	mov    edx,eax
 1032a67:	xor    r9d,r9d
 1032a6a:	mov    r8d,0xc000c356
 1032a70:	mov    rcx,rdi
 1032a73:	call   QWORD PTR [rbx+0x20]
 1032a76:	test   al,al
 1032a78:	je     0x1032c4a
 1032a7e:	mov    rbx,QWORD PTR [rdi]
 1032a81:	lea    rax,[rbp-0x20]
 1032a85:	mov    QWORD PTR [rsp+0x20],rax
 1032a8a:	mov    r9d,0x20019
 1032a90:	xor    r8d,r8d
 1032a93:	lea    rdx,[rip+0xfffffffffffd2d1e]        # 0x10057b8
 1032a9a:	mov    rcx,QWORD PTR [rbp-0x18]
 1032a9e:	call   QWORD PTR [rip+0xfffffffffffce5dc]        # 0x1001080
 1032aa4:	mov    edx,eax
 1032aa6:	xor    r9d,r9d
 1032aa9:	mov    r8d,0xc000c357
 1032aaf:	mov    rcx,rdi
 1032ab2:	call   QWORD PTR [rbx+0x20]
 1032ab5:	test   al,al
 1032ab7:	je     0x1032c4a
 1032abd:	mov    rbx,QWORD PTR [rdi]
 1032ac0:	lea    rax,[rbp-0x28]
 1032ac4:	mov    QWORD PTR [rsp+0x20],rax
 1032ac9:	mov    r9d,0x20019
 1032acf:	xor    r8d,r8d
 1032ad2:	lea    rdx,[rip+0xfffffffffffd2cc7]        # 0x10057a0
 1032ad9:	mov    rcx,QWORD PTR [rbp-0x20]
 1032add:	call   QWORD PTR [rip+0xfffffffffffce59d]        # 0x1001080
 1032ae3:	mov    edx,eax
 1032ae5:	xor    r9d,r9d
 1032ae8:	mov    r8d,0xc000c358
 1032aee:	mov    rcx,rdi
 1032af1:	call   QWORD PTR [rbx+0x20]
 1032af4:	test   al,al
 1032af6:	je     0x1032c4a
 1032afc:	mov    rbx,QWORD PTR [rdi]
 1032aff:	lea    rax,[rbp-0x30]
 1032b03:	mov    QWORD PTR [rsp+0x20],rax
 1032b08:	mov    r9d,0x20019
 1032b0e:	xor    r8d,r8d
 1032b11:	lea    rdx,[rip+0xfffffffffffd4808]        # 0x1007320
 1032b18:	mov    rcx,QWORD PTR [rbp-0x28]
 1032b1c:	call   QWORD PTR [rip+0xfffffffffffce55e]        # 0x1001080
 1032b22:	mov    edx,eax
 1032b24:	xor    r9d,r9d
 1032b27:	mov    r8d,0xc000c42c
 1032b2d:	mov    rcx,rdi
 1032b30:	call   QWORD PTR [rbx+0x20]
 1032b33:	test   al,al
 1032b35:	je     0x1032c4a
 1032b3b:	mov    rbx,QWORD PTR [rdi]
 1032b3e:	lea    rax,[rbp-0x38]
 1032b42:	mov    QWORD PTR [rsp+0x20],rax
 1032b47:	mov    r9d,0x20019
 1032b4d:	xor    r8d,r8d
 1032b50:	mov    rdx,r14
 1032b53:	mov    rcx,QWORD PTR [rbp-0x30]
 1032b57:	call   QWORD PTR [rip+0xfffffffffffce523]        # 0x1001080
 1032b5d:	mov    edx,eax
 1032b5f:	xor    r9d,r9d
 1032b62:	mov    r8d,0xc000c42c
 1032b68:	mov    rcx,rdi
 1032b6b:	call   QWORD PTR [rbx+0x20]
 1032b6e:	test   al,al
 1032b70:	je     0x1032c4a
 1032b76:	lea    rax,[rbp+0x48]
 1032b7a:	mov    QWORD PTR [rsp+0x28],rax
 1032b7f:	lea    rax,[rbp-0x10]
 1032b83:	mov    QWORD PTR [rsp+0x20],rax
 1032b88:	lea    r9,[rbp-0x40]
 1032b8c:	xor    r8d,r8d
 1032b8f:	mov    rdx,r15
 1032b92:	mov    rcx,QWORD PTR [rbp-0x38]
 1032b96:	call   QWORD PTR [rip+0xfffffffffffce4ec]        # 0x1001088
 1032b9c:	mov    edx,eax
 1032b9e:	cmp    eax,0xea
 1032ba3:	jne    0x1032c24
 1032ba5:	mov    ebx,DWORD PTR [rbp+0x48]
 1032ba8:	call   QWORD PTR [rip+0xfffffffffffce9aa]        # 0x1001558
 1032bae:	mov    rcx,rax
 1032bb1:	mov    r8d,ebx
 1032bb4:	xor    edx,edx
 1032bb6:	call   QWORD PTR [rip+0xfffffffffffce9ac]        # 0x1001568
 1032bbc:	mov    r14,rax
 1032bbf:	test   rax,rax
 1032bc2:	je     0x1032c4a
 1032bc8:	mov    rbx,QWORD PTR [rdi]
 1032bcb:	lea    rax,[rbp+0x48]
 1032bcf:	mov    QWORD PTR [rsp+0x28],rax
 1032bd4:	mov    QWORD PTR [rsp+0x20],r14
 1032bd9:	lea    r9,[rbp-0x40]
 1032bdd:	xor    r8d,r8d
 1032be0:	mov    rdx,r15
 1032be3:	mov    rcx,QWORD PTR [rbp-0x38]
 1032be7:	call   QWORD PTR [rip+0xfffffffffffce49b]        # 0x1001088
 1032bed:	mov    edx,eax
 1032bef:	xor    r9d,r9d
 1032bf2:	mov    r8d,0xc000c42d
 1032bf8:	mov    rcx,rdi
 1032bfb:	call   QWORD PTR [rbx+0x20]
 1032bfe:	test   al,al
 1032c00:	je     0x1032c0e
 1032c02:	mov    rdx,r14
 1032c05:	mov    rcx,rsi
 1032c08:	call   QWORD PTR [rip+0xfffffffffffcee8a]        # 0x1001a98
 1032c0e:	call   QWORD PTR [rip+0xfffffffffffce944]        # 0x1001558
 1032c14:	mov    rcx,rax
 1032c17:	mov    r8,r14
 1032c1a:	xor    edx,edx
 1032c1c:	call   QWORD PTR [rip+0xfffffffffffce93e]        # 0x1001560
 1032c22:	jmp    0x1032c4a
 1032c24:	test   eax,eax
 1032c26:	jne    0x1032c37
 1032c28:	lea    rdx,[rbp-0x10]
 1032c2c:	mov    rcx,rsi
 1032c2f:	call   QWORD PTR [rip+0xfffffffffffcee63]        # 0x1001a98
 1032c35:	jmp    0x1032c4a
 1032c37:	mov    rax,QWORD PTR [rdi]
 1032c3a:	xor    r9d,r9d
 1032c3d:	mov    r8d,0xc000c42d
 1032c43:	mov    rcx,rdi
 1032c46:	call   QWORD PTR [rax+0x20]
 1032c49:	nop
 1032c4a:	mov    rcx,QWORD PTR [rbp-0x38]
 1032c4e:	test   rcx,rcx
 1032c51:	je     0x1032c5d
 1032c53:	call   QWORD PTR [rip+0xfffffffffffce3c7]        # 0x1001020
 1032c59:	mov    QWORD PTR [rbp-0x38],r12
 1032c5d:	mov    rcx,QWORD PTR [rbp-0x30]
 1032c61:	test   rcx,rcx
 1032c64:	je     0x1032c70
 1032c66:	call   QWORD PTR [rip+0xfffffffffffce3b4]        # 0x1001020
 1032c6c:	mov    QWORD PTR [rbp-0x30],r12
 1032c70:	mov    rcx,QWORD PTR [rbp-0x28]
 1032c74:	test   rcx,rcx
 1032c77:	je     0x1032c83
 1032c79:	call   QWORD PTR [rip+0xfffffffffffce3a1]        # 0x1001020
 1032c7f:	mov    QWORD PTR [rbp-0x28],r12
 1032c83:	mov    rcx,QWORD PTR [rbp-0x20]
 1032c87:	test   rcx,rcx
 1032c8a:	je     0x1032c96
 1032c8c:	call   QWORD PTR [rip+0xfffffffffffce38e]        # 0x1001020
 1032c92:	mov    QWORD PTR [rbp-0x20],r12
 1032c96:	mov    rcx,QWORD PTR [rbp-0x18]
 1032c9a:	test   rcx,rcx
 1032c9d:	je     0x1032ca9
 1032c9f:	call   QWORD PTR [rip+0xfffffffffffce37b]        # 0x1001020
 1032ca5:	mov    QWORD PTR [rbp-0x18],r12
 1032ca9:	mov    rax,rsi
 1032cac:	lea    r11,[rsp+0x70]
 1032cb1:	mov    rbx,QWORD PTR [r11+0x38]
 1032cb5:	mov    rsi,QWORD PTR [r11+0x40]
 1032cb9:	mov    rsp,r11
 1032cbc:	pop    r15
 1032cbe:	pop    r14
 1032cc0:	pop    r12
 1032cc2:	pop    rdi
 1032cc3:	pop    rbp
 1032cc4:	ret    
 1032cc5:	int3   
 1032cc6:	int3   
 1032cc7:	int3   
 1032cc8:	int3   
 1032cc9:	int3   
 1032cca:	int3   
 1032ccb:	int3   
 1032ccc:	int3   
 1032ccd:	int3   
 1032cce:	int3   
 1032ccf:	int3   
 1032cd0:	mov    rax,rsp
 1032cd3:	push   rbp
 1032cd4:	push   rdi
 1032cd5:	push   r12
 1032cd7:	push   r14
 1032cd9:	push   r15
 1032cdb:	mov    rbp,rsp
 1032cde:	sub    rsp,0x60
 1032ce2:	mov    QWORD PTR [rbp-0x8],0xfffffffffffffffe
 1032cea:	mov    QWORD PTR [rax+0x8],rbx
 1032cee:	mov    QWORD PTR [rax+0x10],rsi
 1032cf2:	mov    rdi,r9
 1032cf5:	mov    rsi,r8
 1032cf8:	mov    r15,rdx
 1032cfb:	mov    r14,rcx
 1032cfe:	xor    r12d,r12d
 1032d01:	mov    QWORD PTR [rbp-0x10],r12
 1032d05:	mov    QWORD PTR [rbp-0x18],r12
 1032d09:	mov    QWORD PTR [rbp-0x20],r12
 1032d0d:	mov    QWORD PTR [rbp-0x28],r12
 1032d11:	mov    QWORD PTR [rbp-0x30],r12
 1032d15:	mov    DWORD PTR [rbp+0x48],0x4
 1032d1c:	mov    DWORD PTR [rbp+0x40],0x4
 1032d23:	mov    rbx,QWORD PTR [r9]
 1032d26:	lea    r8,[rbp-0x10]
 1032d2a:	mov    rdx,0xffffffff80000002
 1032d31:	xor    ecx,ecx
 1032d33:	call   QWORD PTR [rip+0xfffffffffffce337]        # 0x1001070
 1032d39:	mov    edx,eax
 1032d3b:	xor    r9d,r9d
 1032d3e:	mov    r8d,0xc000c356
 1032d44:	mov    rcx,rdi
 1032d47:	call   QWORD PTR [rbx+0x20]
 1032d4a:	test   al,al
 1032d4c:	je     0x1032e9a
 1032d52:	mov    rbx,QWORD PTR [rdi]
 1032d55:	lea    rax,[rbp-0x18]
 1032d59:	mov    QWORD PTR [rsp+0x20],rax
 1032d5e:	mov    r9d,0x20019
 1032d64:	xor    r8d,r8d
 1032d67:	lea    rdx,[rip+0xfffffffffffd2a4a]        # 0x10057b8
 1032d6e:	mov    rcx,QWORD PTR [rbp-0x10]
 1032d72:	call   QWORD PTR [rip+0xfffffffffffce308]        # 0x1001080
 1032d78:	mov    edx,eax
 1032d7a:	xor    r9d,r9d
 1032d7d:	mov    r8d,0xc000c357
 1032d83:	mov    rcx,rdi
 1032d86:	call   QWORD PTR [rbx+0x20]
 1032d89:	test   al,al
 1032d8b:	je     0x1032e9a
 1032d91:	mov    rbx,QWORD PTR [rdi]
 1032d94:	lea    rax,[rbp-0x20]
 1032d98:	mov    QWORD PTR [rsp+0x20],rax
 1032d9d:	mov    r9d,0x20019
 1032da3:	xor    r8d,r8d
 1032da6:	lea    rdx,[rip+0xfffffffffffd29f3]        # 0x10057a0
 1032dad:	mov    rcx,QWORD PTR [rbp-0x18]
 1032db1:	call   QWORD PTR [rip+0xfffffffffffce2c9]        # 0x1001080
 1032db7:	mov    edx,eax
 1032db9:	xor    r9d,r9d
 1032dbc:	mov    r8d,0xc000c358
 1032dc2:	mov    rcx,rdi
 1032dc5:	call   QWORD PTR [rbx+0x20]
 1032dc8:	test   al,al
 1032dca:	je     0x1032e9a
 1032dd0:	mov    rbx,QWORD PTR [rdi]
 1032dd3:	lea    rax,[rbp-0x28]
 1032dd7:	mov    QWORD PTR [rsp+0x20],rax
 1032ddc:	mov    r9d,0x20019
 1032de2:	xor    r8d,r8d
 1032de5:	lea    rdx,[rip+0xfffffffffffd4534]        # 0x1007320
 1032dec:	mov    rcx,QWORD PTR [rbp-0x20]
 1032df0:	call   QWORD PTR [rip+0xfffffffffffce28a]        # 0x1001080
 1032df6:	mov    edx,eax
 1032df8:	xor    r9d,r9d
 1032dfb:	mov    r8d,0xc000c42c
 1032e01:	mov    rcx,rdi
 1032e04:	call   QWORD PTR [rbx+0x20]
 1032e07:	test   al,al
 1032e09:	je     0x1032e9a
 1032e0f:	mov    rbx,QWORD PTR [rdi]
 1032e12:	lea    rax,[rbp-0x30]
 1032e16:	mov    QWORD PTR [rsp+0x20],rax
 1032e1b:	mov    r9d,0x20019
 1032e21:	xor    r8d,r8d
 1032e24:	mov    rdx,r14
 1032e27:	mov    rcx,QWORD PTR [rbp-0x28]
 1032e2b:	call   QWORD PTR [rip+0xfffffffffffce24f]        # 0x1001080
 1032e31:	mov    edx,eax
 1032e33:	xor    r9d,r9d
 1032e36:	mov    r8d,0xc000c42c
 1032e3c:	mov    rcx,rdi
 1032e3f:	call   QWORD PTR [rbx+0x20]
 1032e42:	test   al,al
 1032e44:	je     0x1032e9a
 1032e46:	mov    rbx,QWORD PTR [rdi]
 1032e49:	lea    rax,[rbp+0x40]
 1032e4d:	mov    QWORD PTR [rsp+0x28],rax
 1032e52:	mov    QWORD PTR [rsp+0x20],rsi
 1032e57:	lea    r9,[rbp+0x48]
 1032e5b:	xor    r8d,r8d
 1032e5e:	mov    rdx,r15
 1032e61:	mov    rcx,QWORD PTR [rbp-0x30]
 1032e65:	call   QWORD PTR [rip+0xfffffffffffce21d]        # 0x1001088
 1032e6b:	mov    edx,eax
 1032e6d:	xor    r9d,r9d
 1032e70:	mov    r8d,0xc000c42d
 1032e76:	mov    rcx,rdi
 1032e79:	call   QWORD PTR [rbx+0x20]
 1032e7c:	test   al,al
 1032e7e:	jne    0x1032e9a
 1032e80:	mov    rbx,QWORD PTR [rdi]
 1032e83:	call   QWORD PTR [rip+0xfffffffffffce6c7]        # 0x1001550
 1032e89:	mov    edx,eax
 1032e8b:	xor    r9d,r9d
 1032e8e:	mov    r8d,0xc000c42d
 1032e94:	mov    rcx,rdi
 1032e97:	call   QWORD PTR [rbx+0x20]
 1032e9a:	mov    ebx,DWORD PTR [rsi]
 1032e9c:	mov    rcx,QWORD PTR [rbp-0x30]
 1032ea0:	test   rcx,rcx
 1032ea3:	je     0x1032eaf
 1032ea5:	call   QWORD PTR [rip+0xfffffffffffce175]        # 0x1001020
 1032eab:	mov    QWORD PTR [rbp-0x30],r12
 1032eaf:	mov    rcx,QWORD PTR [rbp-0x28]
 1032eb3:	test   rcx,rcx
 1032eb6:	je     0x1032ec2
 1032eb8:	call   QWORD PTR [rip+0xfffffffffffce162]        # 0x1001020
 1032ebe:	mov    QWORD PTR [rbp-0x28],r12
 1032ec2:	mov    rcx,QWORD PTR [rbp-0x20]
 1032ec6:	test   rcx,rcx
 1032ec9:	je     0x1032ed5
 1032ecb:	call   QWORD PTR [rip+0xfffffffffffce14f]        # 0x1001020
 1032ed1:	mov    QWORD PTR [rbp-0x20],r12
 1032ed5:	mov    rcx,QWORD PTR [rbp-0x18]
 1032ed9:	test   rcx,rcx
 1032edc:	je     0x1032ee8
 1032ede:	call   QWORD PTR [rip+0xfffffffffffce13c]        # 0x1001020
 1032ee4:	mov    QWORD PTR [rbp-0x18],r12
 1032ee8:	mov    rcx,QWORD PTR [rbp-0x10]
 1032eec:	test   rcx,rcx
 1032eef:	je     0x1032efb
 1032ef1:	call   QWORD PTR [rip+0xfffffffffffce129]        # 0x1001020
 1032ef7:	mov    QWORD PTR [rbp-0x10],r12
 1032efb:	mov    eax,ebx
 1032efd:	lea    r11,[rsp+0x60]
 1032f02:	mov    rbx,QWORD PTR [r11+0x30]
 1032f06:	mov    rsi,QWORD PTR [r11+0x38]
 1032f0a:	mov    rsp,r11
 1032f0d:	pop    r15
 1032f0f:	pop    r14
 1032f11:	pop    r12
 1032f13:	pop    rdi
 1032f14:	pop    rbp
 1032f15:	ret    
 1032f16:	int3   
 1032f17:	int3   
 1032f18:	int3   
 1032f19:	int3   
 1032f1a:	int3   
 1032f1b:	int3   
 1032f1c:	int3   
 1032f1d:	int3   
 1032f1e:	int3   
 1032f1f:	int3   
 1032f20:	mov    rax,rsp
 1032f23:	push   rbp
 1032f24:	push   rdi
 1032f25:	push   r12
 1032f27:	push   r14
 1032f29:	push   r15
 1032f2b:	lea    rbp,[rax-0x5f]
 1032f2f:	sub    rsp,0x90
 1032f36:	mov    QWORD PTR [rbp+0x27],0xfffffffffffffffe
 1032f3e:	mov    QWORD PTR [rax+0x8],rbx
 1032f42:	mov    QWORD PTR [rax+0x10],rsi
 1032f46:	mov    rdi,r8
 1032f49:	mov    rsi,rdx
 1032f4c:	mov    r15,rcx
 1032f4f:	xor    r12d,r12d
 1032f52:	mov    QWORD PTR [rbp+0xf],r12
 1032f56:	mov    QWORD PTR [rbp+0x7],r12
 1032f5a:	mov    QWORD PTR [rbp-0x1],r12
 1032f5e:	mov    QWORD PTR [rbp-0x9],r12
 1032f62:	mov    QWORD PTR [rbp+0x7f],r12
 1032f66:	lea    rdx,[rip+0xfffffffffffceea3]        # 0x1001e10
 1032f6d:	lea    rcx,[rbp+0x1f]
 1032f71:	call   QWORD PTR [rip+0xfffffffffffceb39]        # 0x1001ab0
 1032f77:	nop
 1032f78:	xor    r14b,r14b
 1032f7b:	lea    rcx,[rbp+0x17]
 1032f7f:	call   QWORD PTR [rip+0xfffffffffffceb3b]        # 0x1001ac0
 1032f85:	nop
 1032f86:	mov    rbx,QWORD PTR [rdi]
 1032f89:	lea    r8,[rbp+0xf]
 1032f8d:	mov    rdx,0xffffffff80000002
 1032f94:	xor    ecx,ecx
 1032f96:	call   QWORD PTR [rip+0xfffffffffffce0d4]        # 0x1001070
 1032f9c:	mov    edx,eax
 1032f9e:	xor    r9d,r9d
 1032fa1:	mov    r8d,0xc000c356
 1032fa7:	mov    rcx,rdi
 1032faa:	call   QWORD PTR [rbx+0x20]
 1032fad:	test   al,al
 1032faf:	je     0x1033129
 1032fb5:	mov    rbx,QWORD PTR [rdi]
 1032fb8:	lea    rax,[rbp+0x7]
 1032fbc:	mov    QWORD PTR [rsp+0x20],rax
 1032fc1:	mov    r9d,0x20019
 1032fc7:	xor    r8d,r8d
 1032fca:	lea    rdx,[rip+0xfffffffffffd27e7]        # 0x10057b8
 1032fd1:	mov    rcx,QWORD PTR [rbp+0xf]
 1032fd5:	call   QWORD PTR [rip+0xfffffffffffce0a5]        # 0x1001080
 1032fdb:	mov    edx,eax
 1032fdd:	xor    r9d,r9d
 1032fe0:	mov    r8d,0xc000c357
 1032fe6:	mov    rcx,rdi
 1032fe9:	call   QWORD PTR [rbx+0x20]
 1032fec:	test   al,al
 1032fee:	je     0x1033129
 1032ff4:	mov    rbx,QWORD PTR [rdi]
 1032ff7:	lea    rax,[rbp-0x1]
 1032ffb:	mov    QWORD PTR [rsp+0x20],rax
 1033000:	mov    r9d,0x20019
 1033006:	xor    r8d,r8d
 1033009:	lea    rdx,[rip+0xfffffffffffd2790]        # 0x10057a0
 1033010:	mov    rcx,QWORD PTR [rbp+0x7]
 1033014:	call   QWORD PTR [rip+0xfffffffffffce066]        # 0x1001080
 103301a:	mov    edx,eax
 103301c:	xor    r9d,r9d
 103301f:	mov    r8d,0xc000c358
 1033025:	mov    rcx,rdi
 1033028:	call   QWORD PTR [rbx+0x20]
 103302b:	test   al,al
 103302d:	je     0x1033129
 1033033:	mov    rbx,QWORD PTR [rdi]
 1033036:	lea    rax,[rbp+0x77]
 103303a:	mov    QWORD PTR [rsp+0x40],rax
 103303f:	lea    rax,[rbp-0x9]
 1033043:	mov    QWORD PTR [rsp+0x38],rax
 1033048:	mov    QWORD PTR [rsp+0x30],r12
 103304d:	mov    DWORD PTR [rsp+0x28],0xf003f
 1033055:	mov    DWORD PTR [rsp+0x20],r12d
 103305a:	xor    r9d,r9d
 103305d:	xor    r8d,r8d
 1033060:	lea    rdx,[rip+0xfffffffffffd42b9]        # 0x1007320
 1033067:	mov    rcx,QWORD PTR [rbp-0x1]
 103306b:	call   QWORD PTR [rip+0xfffffffffffce04f]        # 0x10010c0
 1033071:	mov    edx,eax
 1033073:	xor    r9d,r9d
 1033076:	mov    r8d,0xc000c42c
 103307c:	mov    rcx,rdi
 103307f:	call   QWORD PTR [rbx+0x20]
 1033082:	test   al,al
 1033084:	je     0x1033129
 103308a:	mov    rbx,QWORD PTR [rdi]
 103308d:	lea    rax,[rbp+0x77]
 1033091:	mov    QWORD PTR [rsp+0x40],rax
 1033096:	lea    rax,[rbp+0x7f]
 103309a:	mov    QWORD PTR [rsp+0x38],rax
 103309f:	mov    QWORD PTR [rsp+0x30],r12
 10330a4:	mov    DWORD PTR [rsp+0x28],0xf003f
 10330ac:	mov    DWORD PTR [rsp+0x20],r12d
 10330b1:	xor    r9d,r9d
 10330b4:	xor    r8d,r8d
 10330b7:	lea    rdx,[rip+0x30392]        # 0x1063450
 10330be:	mov    rcx,QWORD PTR [rbp-0x9]
 10330c2:	call   QWORD PTR [rip+0xfffffffffffcdff8]        # 0x10010c0
 10330c8:	mov    edx,eax
 10330ca:	xor    r9d,r9d
 10330cd:	mov    r8d,0xc000c42c
 10330d3:	mov    rcx,rdi
 10330d6:	call   QWORD PTR [rbx+0x20]
 10330d9:	test   al,al
 10330db:	je     0x1033129
 10330dd:	mov    rbx,QWORD PTR [rdi]
 10330e0:	or     rax,0xffffffffffffffff
 10330e4:	inc    rax
 10330e7:	cmp    WORD PTR [rsi+rax*2],0x0
 10330ec:	jne    0x10330e4
 10330ee:	lea    eax,[rax*2+0x2]
 10330f5:	mov    DWORD PTR [rsp+0x28],eax
 10330f9:	mov    QWORD PTR [rsp+0x20],rsi
 10330fe:	mov    r9d,0x1
 1033104:	xor    r8d,r8d
 1033107:	mov    rdx,r15
 103310a:	mov    rcx,QWORD PTR [rbp+0x7f]
 103310e:	call   QWORD PTR [rip+0xfffffffffffcdf1c]        # 0x1001030
 1033114:	mov    edx,eax
 1033116:	xor    r9d,r9d
 1033119:	mov    r8d,0xc000c42d
 103311f:	mov    rcx,rdi
 1033122:	call   QWORD PTR [rbx+0x20]
 1033125:	movzx  r14d,al
 1033129:	lea    rcx,[rbp+0x17]
 103312d:	call   QWORD PTR [rip+0xfffffffffffce975]        # 0x1001aa8
 1033133:	nop
 1033134:	lea    rcx,[rbp+0x1f]
 1033138:	call   QWORD PTR [rip+0xfffffffffffce96a]        # 0x1001aa8
 103313e:	nop
 103313f:	mov    rcx,QWORD PTR [rbp+0x7f]
 1033143:	test   rcx,rcx
 1033146:	je     0x1033152
 1033148:	call   QWORD PTR [rip+0xfffffffffffcded2]        # 0x1001020
 103314e:	mov    QWORD PTR [rbp+0x7f],r12
 1033152:	mov    rcx,QWORD PTR [rbp-0x9]
 1033156:	test   rcx,rcx
 1033159:	je     0x1033165
 103315b:	call   QWORD PTR [rip+0xfffffffffffcdebf]        # 0x1001020
 1033161:	mov    QWORD PTR [rbp-0x9],r12
 1033165:	mov    rcx,QWORD PTR [rbp-0x1]
 1033169:	test   rcx,rcx
 103316c:	je     0x1033178
 103316e:	call   QWORD PTR [rip+0xfffffffffffcdeac]        # 0x1001020
 1033174:	mov    QWORD PTR [rbp-0x1],r12
 1033178:	mov    rcx,QWORD PTR [rbp+0x7]
 103317c:	test   rcx,rcx
 103317f:	je     0x103318b
 1033181:	call   QWORD PTR [rip+0xfffffffffffcde99]        # 0x1001020
 1033187:	mov    QWORD PTR [rbp+0x7],r12
 103318b:	mov    rcx,QWORD PTR [rbp+0xf]
 103318f:	test   rcx,rcx
 1033192:	je     0x103319e
 1033194:	call   QWORD PTR [rip+0xfffffffffffcde86]        # 0x1001020
 103319a:	mov    QWORD PTR [rbp+0xf],r12
 103319e:	movzx  eax,r14b
 10331a2:	lea    r11,[rsp+0x90]
 10331aa:	mov    rbx,QWORD PTR [r11+0x30]
 10331ae:	mov    rsi,QWORD PTR [r11+0x38]
 10331b2:	mov    rsp,r11
 10331b5:	pop    r15
 10331b7:	pop    r14
 10331b9:	pop    r12
 10331bb:	pop    rdi
 10331bc:	pop    rbp
 10331bd:	ret    
 10331be:	int3   
 10331bf:	int3   
 10331c0:	int3   
 10331c1:	int3   
 10331c2:	int3   
 10331c3:	int3   
 10331c4:	int3   
 10331c5:	int3   
 10331c6:	int3   
 10331c7:	int3   
 10331c8:	int3   
 10331c9:	int3   
 10331ca:	int3   
 10331cb:	int3   
 10331cc:	int3   
 10331cd:	int3   
 10331ce:	int3   
 10331cf:	int3   
 10331d0:	mov    rax,rsp
 10331d3:	push   rbx
 10331d4:	push   rbp
 10331d5:	push   rsi
 10331d6:	push   rdi
 10331d7:	push   r14
 10331d9:	sub    rsp,0x40
 10331dd:	mov    QWORD PTR [rax-0x30],0xfffffffffffffffe
 10331e5:	mov    rsi,rdx
 10331e8:	mov    rbp,rcx
 10331eb:	xor    r14d,r14d
 10331ee:	mov    QWORD PTR [rax-0x38],r14
 10331f2:	mov    QWORD PTR [rax+0x20],r14
 10331f6:	mov    QWORD PTR [rax+0x18],r14
 10331fa:	mov    QWORD PTR [rax+0x10],r14
 10331fe:	xor    dil,dil
 1033201:	mov    rbx,QWORD PTR [rdx]
 1033204:	lea    r8,[rax-0x38]
 1033208:	mov    rdx,0xffffffff80000002
 103320f:	xor    ecx,ecx
 1033211:	call   QWORD PTR [rip+0xfffffffffffcde59]        # 0x1001070
 1033217:	mov    edx,eax
 1033219:	xor    r9d,r9d
 103321c:	mov    r8d,0xc000c356
 1033222:	mov    rcx,rsi
 1033225:	call   QWORD PTR [rbx+0x20]
 1033228:	test   al,al
 103322a:	je     0x103330b
 1033230:	mov    rbx,QWORD PTR [rsi]
 1033233:	lea    rax,[rsp+0x88]
 103323b:	mov    QWORD PTR [rsp+0x20],rax
 1033240:	mov    r9d,0x20019
 1033246:	xor    r8d,r8d
 1033249:	lea    rdx,[rip+0xfffffffffffd2568]        # 0x10057b8
 1033250:	mov    rcx,QWORD PTR [rsp+0x30]
 1033255:	call   QWORD PTR [rip+0xfffffffffffcde25]        # 0x1001080
 103325b:	mov    edx,eax
 103325d:	xor    r9d,r9d
 1033260:	mov    r8d,0xc000c357
 1033266:	mov    rcx,rsi
 1033269:	call   QWORD PTR [rbx+0x20]
 103326c:	test   al,al
 103326e:	je     0x103330b
 1033274:	mov    rbx,QWORD PTR [rsi]
 1033277:	lea    rax,[rsp+0x80]
 103327f:	mov    QWORD PTR [rsp+0x20],rax
 1033284:	mov    r9d,0x20019
 103328a:	xor    r8d,r8d
 103328d:	lea    rdx,[rip+0xfffffffffffd250c]        # 0x10057a0
 1033294:	mov    rcx,QWORD PTR [rsp+0x88]
 103329c:	call   QWORD PTR [rip+0xfffffffffffcddde]        # 0x1001080
 10332a2:	mov    edx,eax
 10332a4:	xor    r9d,r9d
 10332a7:	mov    r8d,0xc000c358
 10332ad:	mov    rcx,rsi
 10332b0:	call   QWORD PTR [rbx+0x20]
 10332b3:	test   al,al
 10332b5:	je     0x103330b
 10332b7:	mov    rbx,QWORD PTR [rsi]
 10332ba:	lea    rax,[rsp+0x78]
 10332bf:	mov    QWORD PTR [rsp+0x20],rax
 10332c4:	mov    r9d,0x20019
 10332ca:	xor    r8d,r8d
 10332cd:	lea    rdx,[rip+0xfffffffffffd404c]        # 0x1007320
 10332d4:	mov    rcx,QWORD PTR [rsp+0x80]
 10332dc:	call   QWORD PTR [rip+0xfffffffffffcdd9e]        # 0x1001080
 10332e2:	mov    edx,eax
 10332e4:	xor    r9d,r9d
 10332e7:	mov    r8d,0xc000c42c
 10332ed:	mov    rcx,rsi
 10332f0:	call   QWORD PTR [rbx+0x20]
 10332f3:	test   al,al
 10332f5:	je     0x103330b
 10332f7:	mov    rdx,rbp
 10332fa:	mov    rcx,QWORD PTR [rsp+0x78]
 10332ff:	call   QWORD PTR [rip+0xfffffffffffcddc3]        # 0x10010c8
 1033305:	test   eax,eax
 1033307:	sete   dil
 103330b:	mov    rcx,QWORD PTR [rsp+0x78]
 1033310:	test   rcx,rcx
 1033313:	je     0x1033320
 1033315:	call   QWORD PTR [rip+0xfffffffffffcdd05]        # 0x1001020
 103331b:	mov    QWORD PTR [rsp+0x78],r14
 1033320:	mov    rcx,QWORD PTR [rsp+0x80]
 1033328:	test   rcx,rcx
 103332b:	je     0x103333b
 103332d:	call   QWORD PTR [rip+0xfffffffffffcdced]        # 0x1001020
 1033333:	mov    QWORD PTR [rsp+0x80],r14
 103333b:	mov    rcx,QWORD PTR [rsp+0x88]
 1033343:	test   rcx,rcx
 1033346:	je     0x1033356
 1033348:	call   QWORD PTR [rip+0xfffffffffffcdcd2]        # 0x1001020
 103334e:	mov    QWORD PTR [rsp+0x88],r14
 1033356:	mov    rcx,QWORD PTR [rsp+0x30]
 103335b:	test   rcx,rcx
 103335e:	je     0x103336b
 1033360:	call   QWORD PTR [rip+0xfffffffffffcdcba]        # 0x1001020
 1033366:	mov    QWORD PTR [rsp+0x30],r14
 103336b:	movzx  eax,dil
 103336f:	add    rsp,0x40
 1033373:	pop    r14
 1033375:	pop    rdi
 1033376:	pop    rsi
 1033377:	pop    rbp
 1033378:	pop    rbx
 1033379:	ret    
 103337a:	int3   
 103337b:	int3   
 103337c:	int3   
 103337d:	int3   
 103337e:	int3   
 103337f:	int3   
 1033380:	mov    rax,rsp
 1033383:	push   rbp
 1033384:	push   rdi
 1033385:	push   r12
 1033387:	push   r14
 1033389:	push   r15
 103338b:	mov    rbp,rsp
 103338e:	sub    rsp,0x70
 1033392:	mov    QWORD PTR [rbp-0x10],0xfffffffffffffffe
 103339a:	mov    QWORD PTR [rax+0x8],rbx
 103339e:	mov    QWORD PTR [rax+0x10],rsi
 10333a2:	mov    rsi,r8
 10333a5:	mov    r14,rdx
 10333a8:	mov    r15,rcx
 10333ab:	xor    r12d,r12d
 10333ae:	mov    QWORD PTR [rbp-0x18],r12
 10333b2:	mov    QWORD PTR [rbp-0x20],r12
 10333b6:	mov    QWORD PTR [rbp-0x28],r12
 10333ba:	mov    QWORD PTR [rbp-0x30],r12
 10333be:	mov    QWORD PTR [rbp-0x38],r12
 10333c2:	xor    dil,dil
 10333c5:	mov    DWORD PTR [rbp+0x40],0x4
 10333cc:	mov    DWORD PTR [rbp+0x48],0x1
 10333d3:	mov    rbx,QWORD PTR [r8]
 10333d6:	lea    r8,[rbp-0x18]
 10333da:	mov    rdx,0xffffffff80000002
 10333e1:	xor    ecx,ecx
 10333e3:	call   QWORD PTR [rip+0xfffffffffffcdc87]        # 0x1001070
 10333e9:	mov    edx,eax
 10333eb:	mov    r9b,0x1
 10333ee:	mov    r8d,0xc000c356
 10333f4:	mov    rcx,rsi
 10333f7:	call   QWORD PTR [rbx+0x20]
 10333fa:	test   al,al
 10333fc:	je     0x1033526
 1033402:	mov    rbx,QWORD PTR [rsi]
 1033405:	lea    rax,[rbp-0x20]
 1033409:	mov    QWORD PTR [rsp+0x20],rax
 103340e:	mov    r9d,0x20019
 1033414:	xor    r8d,r8d
 1033417:	lea    rdx,[rip+0xfffffffffffd239a]        # 0x10057b8
 103341e:	mov    rcx,QWORD PTR [rbp-0x18]
 1033422:	call   QWORD PTR [rip+0xfffffffffffcdc58]        # 0x1001080
 1033428:	mov    edx,eax
 103342a:	mov    r9b,0x1
 103342d:	mov    r8d,0xc000c357
 1033433:	mov    rcx,rsi
 1033436:	call   QWORD PTR [rbx+0x20]
 1033439:	test   al,al
 103343b:	je     0x1033526
 1033441:	mov    rbx,QWORD PTR [rsi]
 1033444:	lea    rax,[rbp-0x28]
 1033448:	mov    QWORD PTR [rsp+0x20],rax
 103344d:	mov    r9d,0x20019
 1033453:	xor    r8d,r8d
 1033456:	lea    rdx,[rip+0xfffffffffffd2343]        # 0x10057a0
 103345d:	mov    rcx,QWORD PTR [rbp-0x20]
 1033461:	call   QWORD PTR [rip+0xfffffffffffcdc19]        # 0x1001080
 1033467:	mov    edx,eax
 1033469:	mov    r9b,0x1
 103346c:	mov    r8d,0xc000c358
 1033472:	mov    rcx,rsi
 1033475:	call   QWORD PTR [rbx+0x20]
 1033478:	test   al,al
 103347a:	je     0x1033526
 1033480:	mov    rbx,QWORD PTR [rsi]
 1033483:	lea    rax,[rbp-0x30]
 1033487:	mov    QWORD PTR [rsp+0x20],rax
 103348c:	mov    r9d,0x20019
 1033492:	xor    r8d,r8d
 1033495:	lea    rdx,[rip+0xfffffffffffd3e84]        # 0x1007320
 103349c:	mov    rcx,QWORD PTR [rbp-0x28]
 10334a0:	call   QWORD PTR [rip+0xfffffffffffcdbda]        # 0x1001080
 10334a6:	mov    edx,eax
 10334a8:	mov    r9b,0x1
 10334ab:	mov    r8d,0xc000c42c
 10334b1:	mov    rcx,rsi
 10334b4:	call   QWORD PTR [rbx+0x20]
 10334b7:	test   al,al
 10334b9:	je     0x1033526
 10334bb:	mov    rbx,QWORD PTR [rsi]
 10334be:	lea    rax,[rbp-0x38]
 10334c2:	mov    QWORD PTR [rsp+0x20],rax
 10334c7:	mov    r9d,0x20019
 10334cd:	xor    r8d,r8d
 10334d0:	mov    rdx,r15
 10334d3:	mov    rcx,QWORD PTR [rbp-0x30]
 10334d7:	call   QWORD PTR [rip+0xfffffffffffcdba3]        # 0x1001080
 10334dd:	mov    edx,eax
 10334df:	mov    r9b,0x1
 10334e2:	mov    r8d,0xc000c42c
 10334e8:	mov    rcx,rsi
 10334eb:	call   QWORD PTR [rbx+0x20]
 10334ee:	test   al,al
 10334f0:	je     0x1033526
 10334f2:	lea    rax,[rbp+0x40]
 10334f6:	mov    QWORD PTR [rsp+0x28],rax
 10334fb:	lea    rax,[rbp-0x40]
 10334ff:	mov    QWORD PTR [rsp+0x20],rax
 1033504:	lea    r9,[rbp+0x48]
 1033508:	xor    r8d,r8d
 103350b:	mov    rdx,r14
 103350e:	mov    rcx,QWORD PTR [rbp-0x38]
 1033512:	call   QWORD PTR [rip+0xfffffffffffcdb70]        # 0x1001088
 1033518:	cmp    eax,0xea
 103351d:	je     0x1033523
 103351f:	test   eax,eax
 1033521:	jne    0x1033526
 1033523:	mov    dil,0x1
 1033526:	mov    rcx,QWORD PTR [rbp-0x38]
 103352a:	test   rcx,rcx
 103352d:	je     0x1033539
 103352f:	call   QWORD PTR [rip+0xfffffffffffcdaeb]        # 0x1001020
 1033535:	mov    QWORD PTR [rbp-0x38],r12
 1033539:	mov    rcx,QWORD PTR [rbp-0x30]
 103353d:	test   rcx,rcx
 1033540:	je     0x103354c
 1033542:	call   QWORD PTR [rip+0xfffffffffffcdad8]        # 0x1001020
 1033548:	mov    QWORD PTR [rbp-0x30],r12
 103354c:	mov    rcx,QWORD PTR [rbp-0x28]
 1033550:	test   rcx,rcx
 1033553:	je     0x103355f
 1033555:	call   QWORD PTR [rip+0xfffffffffffcdac5]        # 0x1001020
 103355b:	mov    QWORD PTR [rbp-0x28],r12
 103355f:	mov    rcx,QWORD PTR [rbp-0x20]
 1033563:	test   rcx,rcx
 1033566:	je     0x1033572
 1033568:	call   QWORD PTR [rip+0xfffffffffffcdab2]        # 0x1001020
 103356e:	mov    QWORD PTR [rbp-0x20],r12
 1033572:	mov    rcx,QWORD PTR [rbp-0x18]
 1033576:	test   rcx,rcx
 1033579:	je     0x1033585
 103357b:	call   QWORD PTR [rip+0xfffffffffffcda9f]        # 0x1001020
 1033581:	mov    QWORD PTR [rbp-0x18],r12
 1033585:	movzx  eax,dil
 1033589:	lea    r11,[rsp+0x70]
 103358e:	mov    rbx,QWORD PTR [r11+0x30]
 1033592:	mov    rsi,QWORD PTR [r11+0x38]
 1033596:	mov    rsp,r11
 1033599:	pop    r15
 103359b:	pop    r14
 103359d:	pop    r12
 103359f:	pop    rdi
 10335a0:	pop    rbp
 10335a1:	ret    
 10335a2:	int3   
 10335a3:	int3   
 10335a4:	int3   
 10335a5:	int3   
 10335a6:	int3   
 10335a7:	int3   
 10335a8:	int3   
 10335a9:	int3   
 10335aa:	int3   
 10335ab:	int3   
 10335ac:	int3   
 10335ad:	int3   
 10335ae:	int3   
 10335af:	int3   
 10335b0:	rex push rbp
 10335b2:	push   rbx
 10335b3:	push   rsi
 10335b4:	push   rdi
 10335b5:	push   r12
 10335b7:	push   r13
 10335b9:	push   r14
 10335bb:	push   r15
 10335bd:	lea    rbp,[rsp-0x1f]
 10335c2:	sub    rsp,0x88
 10335c9:	mov    QWORD PTR [rbp-0x11],0xfffffffffffffffe
 10335d1:	mov    rax,QWORD PTR [rip+0x30298]        # 0x1063870
 10335d8:	xor    rax,rsp
 10335db:	mov    QWORD PTR [rbp+0x7],rax
 10335df:	mov    r13d,r9d
 10335e2:	mov    r14,r8
 10335e5:	mov    r12,rdx
 10335e8:	mov    rdx,rcx
 10335eb:	lea    rcx,[rbp-0x31]
 10335ef:	call   QWORD PTR [rip+0xfffffffffffce4bb]        # 0x1001ab0
 10335f5:	nop
 10335f6:	xor    edi,edi
 10335f8:	mov    QWORD PTR [rbp-0x21],rdi
 10335fc:	xor    r15b,r15b
 10335ff:	mov    QWORD PTR [rbp-0x29],rdi
 1033603:	call   QWORD PTR [rip+0xfffffffffffcdca7]        # 0x10012b0
 1033609:	mov    rcx,rax
 103360c:	lea    r8,[rbp-0x29]
 1033610:	lea    edx,[rdi+0x20]
 1033613:	call   QWORD PTR [rip+0xfffffffffffcda27]        # 0x1001040
 1033619:	test   eax,eax
 103361b:	jne    0x1033675
 103361d:	mov    rbx,QWORD PTR [r14]
 1033620:	call   QWORD PTR [rip+0xfffffffffffcdf2a]        # 0x1001550
 1033626:	mov    edx,eax
 1033628:	mov    BYTE PTR [rsp+0x28],0x1
 103362d:	mov    BYTE PTR [rsp+0x20],0x1
 1033632:	xor    r9d,r9d
 1033635:	xor    r8d,r8d
 1033638:	mov    rcx,r14
 103363b:	call   QWORD PTR [rbx]
 103363d:	nop
 103363e:	mov    rcx,QWORD PTR [rbp-0x29]
 1033642:	test   rcx,rcx
 1033645:	je     0x1033651
 1033647:	call   QWORD PTR [rip+0xfffffffffffcde8b]        # 0x10014d8
 103364d:	mov    QWORD PTR [rbp-0x29],rdi
 1033651:	mov    rcx,QWORD PTR [rbp-0x21]
 1033655:	test   rcx,rcx
 1033658:	je     0x1033664
 103365a:	call   QWORD PTR [rip+0xfffffffffffcd9c0]        # 0x1001020
 1033660:	mov    QWORD PTR [rbp-0x21],rdi
 1033664:	lea    rcx,[rbp-0x31]
 1033668:	call   QWORD PTR [rip+0xfffffffffffce43a]        # 0x1001aa8
 103366e:	xor    al,al
 1033670:	jmp    0x1033c63
 1033675:	lea    r8,[rbp-0x19]
 1033679:	lea    rdx,[rip+0xfffffffffffd3cb8]        # 0x1007338
 1033680:	xor    ecx,ecx
 1033682:	call   QWORD PTR [rip+0xfffffffffffcda28]        # 0x10010b0
 1033688:	test   eax,eax
 103368a:	jne    0x10336e4
 103368c:	mov    rbx,QWORD PTR [r14]
 103368f:	call   QWORD PTR [rip+0xfffffffffffcdebb]        # 0x1001550
 1033695:	mov    edx,eax
 1033697:	mov    BYTE PTR [rsp+0x28],0x1
 103369c:	mov    BYTE PTR [rsp+0x20],0x1
 10336a1:	xor    r9d,r9d
 10336a4:	xor    r8d,r8d
 10336a7:	mov    rcx,r14
 10336aa:	call   QWORD PTR [rbx]
 10336ac:	nop
 10336ad:	mov    rcx,QWORD PTR [rbp-0x29]
 10336b1:	test   rcx,rcx
 10336b4:	je     0x10336c0
 10336b6:	call   QWORD PTR [rip+0xfffffffffffcde1c]        # 0x10014d8
 10336bc:	mov    QWORD PTR [rbp-0x29],rdi
 10336c0:	mov    rcx,QWORD PTR [rbp-0x21]
 10336c4:	test   rcx,rcx
 10336c7:	je     0x10336d3
 10336c9:	call   QWORD PTR [rip+0xfffffffffffcd951]        # 0x1001020
 10336cf:	mov    QWORD PTR [rbp-0x21],rdi
 10336d3:	lea    rcx,[rbp-0x31]
 10336d7:	call   QWORD PTR [rip+0xfffffffffffce3cb]        # 0x1001aa8
 10336dd:	xor    al,al
 10336df:	jmp    0x1033c63
 10336e4:	mov    DWORD PTR [rbp-0x9],0x1
 10336eb:	mov    rax,QWORD PTR [rbp-0x19]
 10336ef:	mov    QWORD PTR [rbp-0x5],rax
 10336f3:	mov    DWORD PTR [rbp+0x3],0x2
 10336fa:	mov    QWORD PTR [rsp+0x28],rdi
 10336ff:	mov    QWORD PTR [rsp+0x20],rdi
 1033704:	mov    r9d,0x10
 103370a:	lea    r8,[rbp-0x9]
 103370e:	xor    edx,edx
 1033710:	mov    rcx,QWORD PTR [rbp-0x29]
 1033714:	call   QWORD PTR [rip+0xfffffffffffcd98e]        # 0x10010a8
 103371a:	test   eax,eax
 103371c:	jne    0x1033776
 103371e:	mov    rbx,QWORD PTR [r14]
 1033721:	call   QWORD PTR [rip+0xfffffffffffcde29]        # 0x1001550
 1033727:	mov    edx,eax
 1033729:	mov    BYTE PTR [rsp+0x28],0x1
 103372e:	mov    BYTE PTR [rsp+0x20],0x1
 1033733:	xor    r9d,r9d
 1033736:	xor    r8d,r8d
 1033739:	mov    rcx,r14
 103373c:	call   QWORD PTR [rbx]
 103373e:	nop
 103373f:	mov    rcx,QWORD PTR [rbp-0x29]
 1033743:	test   rcx,rcx
 1033746:	je     0x1033752
 1033748:	call   QWORD PTR [rip+0xfffffffffffcdd8a]        # 0x10014d8
 103374e:	mov    QWORD PTR [rbp-0x29],rdi
 1033752:	mov    rcx,QWORD PTR [rbp-0x21]
 1033756:	test   rcx,rcx
 1033759:	je     0x1033765
 103375b:	call   QWORD PTR [rip+0xfffffffffffcd8bf]        # 0x1001020
 1033761:	mov    QWORD PTR [rbp-0x21],rdi
 1033765:	lea    rcx,[rbp-0x31]
 1033769:	call   QWORD PTR [rip+0xfffffffffffce339]        # 0x1001aa8
 103376f:	xor    al,al
 1033771:	jmp    0x1033c63
 1033776:	mov    r8d,0x4
 103377c:	lea    rdx,[rbp-0x39]
 1033780:	lea    rcx,[rbp-0x31]
 1033784:	call   QWORD PTR [rip+0xfffffffffffce2be]        # 0x1001a48
 103378a:	nop
 103378b:	lea    rdx,[rip+0xfffffffffffd3bce]        # 0x1007360
 1033792:	mov    rcx,rax
 1033795:	call   QWORD PTR [rip+0xfffffffffffce2c5]        # 0x1001a60
 103379b:	test   eax,eax
 103379d:	sete   bl
 10337a0:	lea    rcx,[rbp-0x39]
 10337a4:	call   QWORD PTR [rip+0xfffffffffffce2fe]        # 0x1001aa8
 10337aa:	lea    rdx,[rbp-0x39]
 10337ae:	lea    rcx,[rbp-0x31]
 10337b2:	test   bl,bl
 10337b4:	je     0x10337e7
 10337b6:	mov    rsi,0xffffffff80000002
 10337bd:	mov    r8d,0x5
 10337c3:	call   QWORD PTR [rip+0xfffffffffffce157]        # 0x1001920
 10337c9:	nop
 10337ca:	mov    rdx,rax
 10337cd:	lea    rcx,[rbp-0x31]
 10337d1:	call   QWORD PTR [rip+0xfffffffffffce2c9]        # 0x1001aa0
 10337d7:	nop
 10337d8:	lea    rcx,[rbp-0x39]
 10337dc:	call   QWORD PTR [rip+0xfffffffffffce2c6]        # 0x1001aa8
 10337e2:	jmp    0x1033b99
 10337e7:	mov    r8d,0x4
 10337ed:	call   QWORD PTR [rip+0xfffffffffffce255]        # 0x1001a48
 10337f3:	nop
 10337f4:	lea    rdx,[rip+0xfffffffffffd3b75]        # 0x1007370
 10337fb:	mov    rcx,rax
 10337fe:	call   QWORD PTR [rip+0xfffffffffffce25c]        # 0x1001a60
 1033804:	test   eax,eax
 1033806:	sete   bl
 1033809:	lea    rcx,[rbp-0x39]
 103380d:	call   QWORD PTR [rip+0xfffffffffffce295]        # 0x1001aa8
 1033813:	lea    rdx,[rbp-0x39]
 1033817:	lea    rcx,[rbp-0x31]
 103381b:	test   bl,bl
 103381d:	je     0x1033850
 103381f:	mov    rsi,0xffffffff80000001
 1033826:	mov    r8d,0x5
 103382c:	call   QWORD PTR [rip+0xfffffffffffce0ee]        # 0x1001920
 1033832:	nop
 1033833:	mov    rdx,rax
 1033836:	lea    rcx,[rbp-0x31]
 103383a:	call   QWORD PTR [rip+0xfffffffffffce260]        # 0x1001aa0
 1033840:	nop
 1033841:	lea    rcx,[rbp-0x39]
 1033845:	call   QWORD PTR [rip+0xfffffffffffce25d]        # 0x1001aa8
 103384b:	jmp    0x1033b99
 1033850:	mov    r8d,0x4
 1033856:	call   QWORD PTR [rip+0xfffffffffffce1ec]        # 0x1001a48
 103385c:	nop
 103385d:	lea    rdx,[rip+0xfffffffffffd3b1c]        # 0x1007380
 1033864:	mov    rcx,rax
 1033867:	call   QWORD PTR [rip+0xfffffffffffce1f3]        # 0x1001a60
 103386d:	test   eax,eax
 103386f:	sete   bl
 1033872:	lea    rcx,[rbp-0x39]
 1033876:	call   QWORD PTR [rip+0xfffffffffffce22c]        # 0x1001aa8
 103387c:	lea    rdx,[rbp-0x39]
 1033880:	lea    rcx,[rbp-0x31]
 1033884:	test   bl,bl
 1033886:	je     0x10338b9
 1033888:	mov    rsi,0xffffffff80000005
 103388f:	mov    r8d,0x5
 1033895:	call   QWORD PTR [rip+0xfffffffffffce085]        # 0x1001920
 103389b:	nop
 103389c:	mov    rdx,rax
 103389f:	lea    rcx,[rbp-0x31]
 10338a3:	call   QWORD PTR [rip+0xfffffffffffce1f7]        # 0x1001aa0
 10338a9:	nop
 10338aa:	lea    rcx,[rbp-0x39]
 10338ae:	call   QWORD PTR [rip+0xfffffffffffce1f4]        # 0x1001aa8
 10338b4:	jmp    0x1033b99
 10338b9:	mov    r8d,0x4
 10338bf:	call   QWORD PTR [rip+0xfffffffffffce183]        # 0x1001a48
 10338c5:	nop
 10338c6:	lea    rdx,[rip+0xfffffffffffd3ac3]        # 0x1007390
 10338cd:	mov    rcx,rax
 10338d0:	call   QWORD PTR [rip+0xfffffffffffce18a]        # 0x1001a60
 10338d6:	test   eax,eax
 10338d8:	sete   bl
 10338db:	lea    rcx,[rbp-0x39]
 10338df:	call   QWORD PTR [rip+0xfffffffffffce1c3]        # 0x1001aa8
 10338e5:	lea    rdx,[rbp-0x39]
 10338e9:	lea    rcx,[rbp-0x31]
 10338ed:	test   bl,bl
 10338ef:	je     0x1033922
 10338f1:	mov    rsi,0xffffffff80000000
 10338f8:	mov    r8d,0x5
 10338fe:	call   QWORD PTR [rip+0xfffffffffffce01c]        # 0x1001920
 1033904:	nop
 1033905:	mov    rdx,rax
 1033908:	lea    rcx,[rbp-0x31]
 103390c:	call   QWORD PTR [rip+0xfffffffffffce18e]        # 0x1001aa0
 1033912:	nop
 1033913:	lea    rcx,[rbp-0x39]
 1033917:	call   QWORD PTR [rip+0xfffffffffffce18b]        # 0x1001aa8
 103391d:	jmp    0x1033b99
 1033922:	mov    r8d,0x3
 1033928:	call   QWORD PTR [rip+0xfffffffffffce11a]        # 0x1001a48
 103392e:	nop
 103392f:	lea    rdx,[rip+0xfffffffffffd3a6a]        # 0x10073a0
 1033936:	mov    rcx,rax
 1033939:	call   QWORD PTR [rip+0xfffffffffffce121]        # 0x1001a60
 103393f:	test   eax,eax
 1033941:	sete   bl
 1033944:	lea    rcx,[rbp-0x39]
 1033948:	call   QWORD PTR [rip+0xfffffffffffce15a]        # 0x1001aa8
 103394e:	lea    rdx,[rbp-0x39]
 1033952:	lea    rcx,[rbp-0x31]
 1033956:	test   bl,bl
 1033958:	je     0x103398b
 103395a:	mov    rsi,0xffffffff80000003
 1033961:	mov    r8d,0x4
 1033967:	call   QWORD PTR [rip+0xfffffffffffcdfb3]        # 0x1001920
 103396d:	nop
 103396e:	mov    rdx,rax
 1033971:	lea    rcx,[rbp-0x31]
 1033975:	call   QWORD PTR [rip+0xfffffffffffce125]        # 0x1001aa0
 103397b:	nop
 103397c:	lea    rcx,[rbp-0x39]
 1033980:	call   QWORD PTR [rip+0xfffffffffffce122]        # 0x1001aa8
 1033986:	jmp    0x1033b99
 103398b:	mov    r8d,0x12
 1033991:	call   QWORD PTR [rip+0xfffffffffffce0b1]        # 0x1001a48
 1033997:	nop
 1033998:	lea    rdx,[rip+0xfffffffffffd3a09]        # 0x10073a8
 103399f:	mov    rcx,rax
 10339a2:	call   QWORD PTR [rip+0xfffffffffffce0b8]        # 0x1001a60
 10339a8:	test   eax,eax
 10339aa:	sete   bl
 10339ad:	lea    rcx,[rbp-0x39]
 10339b1:	call   QWORD PTR [rip+0xfffffffffffce0f1]        # 0x1001aa8
 10339b7:	lea    rdx,[rbp-0x39]
 10339bb:	lea    rcx,[rbp-0x31]
 10339bf:	test   bl,bl
 10339c1:	je     0x10339f4
 10339c3:	mov    rsi,0xffffffff80000002
 10339ca:	mov    r8d,0x13
 10339d0:	call   QWORD PTR [rip+0xfffffffffffcdf4a]        # 0x1001920
 10339d6:	nop
 10339d7:	mov    rdx,rax
 10339da:	lea    rcx,[rbp-0x31]
 10339de:	call   QWORD PTR [rip+0xfffffffffffce0bc]        # 0x1001aa0
 10339e4:	nop
 10339e5:	lea    rcx,[rbp-0x39]
 10339e9:	call   QWORD PTR [rip+0xfffffffffffce0b9]        # 0x1001aa8
 10339ef:	jmp    0x1033b99
 10339f4:	mov    r8d,0x11
 10339fa:	call   QWORD PTR [rip+0xfffffffffffce048]        # 0x1001a48
 1033a00:	nop
 1033a01:	lea    rdx,[rip+0xfffffffffffd39c8]        # 0x10073d0
 1033a08:	mov    rcx,rax
 1033a0b:	call   QWORD PTR [rip+0xfffffffffffce04f]        # 0x1001a60
 1033a11:	test   eax,eax
 1033a13:	sete   bl
 1033a16:	lea    rcx,[rbp-0x39]
 1033a1a:	call   QWORD PTR [rip+0xfffffffffffce088]        # 0x1001aa8
 1033a20:	lea    rdx,[rbp-0x39]
 1033a24:	lea    rcx,[rbp-0x31]
 1033a28:	test   bl,bl
 1033a2a:	je     0x1033a5d
 1033a2c:	mov    rsi,0xffffffff80000001
 1033a33:	mov    r8d,0x12
 1033a39:	call   QWORD PTR [rip+0xfffffffffffcdee1]        # 0x1001920
 1033a3f:	nop
 1033a40:	mov    rdx,rax
 1033a43:	lea    rcx,[rbp-0x31]
 1033a47:	call   QWORD PTR [rip+0xfffffffffffce053]        # 0x1001aa0
 1033a4d:	nop
 1033a4e:	lea    rcx,[rbp-0x39]
 1033a52:	call   QWORD PTR [rip+0xfffffffffffce050]        # 0x1001aa8
 1033a58:	jmp    0x1033b99
 1033a5d:	mov    r8d,0x13
 1033a63:	call   QWORD PTR [rip+0xfffffffffffcdfdf]        # 0x1001a48
 1033a69:	nop
 1033a6a:	lea    rdx,[rip+0xfffffffffffd3987]        # 0x10073f8
 1033a71:	mov    rcx,rax
 1033a74:	call   QWORD PTR [rip+0xfffffffffffcdfe6]        # 0x1001a60
 1033a7a:	test   eax,eax
 1033a7c:	sete   bl
 1033a7f:	lea    rcx,[rbp-0x39]
 1033a83:	call   QWORD PTR [rip+0xfffffffffffce01f]        # 0x1001aa8
 1033a89:	lea    rdx,[rbp-0x39]
 1033a8d:	lea    rcx,[rbp-0x31]
 1033a91:	test   bl,bl
 1033a93:	je     0x1033ac6
 1033a95:	mov    rsi,0xffffffff80000005
 1033a9c:	mov    r8d,0x14
 1033aa2:	call   QWORD PTR [rip+0xfffffffffffcde78]        # 0x1001920
 1033aa8:	nop
 1033aa9:	mov    rdx,rax
 1033aac:	lea    rcx,[rbp-0x31]
 1033ab0:	call   QWORD PTR [rip+0xfffffffffffcdfea]        # 0x1001aa0
 1033ab6:	nop
 1033ab7:	lea    rcx,[rbp-0x39]
 1033abb:	call   QWORD PTR [rip+0xfffffffffffcdfe7]        # 0x1001aa8
 1033ac1:	jmp    0x1033b99
 1033ac6:	mov    r8d,0x11
 1033acc:	call   QWORD PTR [rip+0xfffffffffffcdf76]        # 0x1001a48
 1033ad2:	nop
 1033ad3:	lea    rdx,[rip+0xfffffffffffd3946]        # 0x1007420
 1033ada:	mov    rcx,rax
 1033add:	call   QWORD PTR [rip+0xfffffffffffcdf7d]        # 0x1001a60
 1033ae3:	test   eax,eax
 1033ae5:	sete   bl
 1033ae8:	lea    rcx,[rbp-0x39]
 1033aec:	call   QWORD PTR [rip+0xfffffffffffcdfb6]        # 0x1001aa8
 1033af2:	lea    rdx,[rbp-0x39]
 1033af6:	lea    rcx,[rbp-0x31]
 1033afa:	test   bl,bl
 1033afc:	je     0x1033b2c
 1033afe:	mov    rsi,0xffffffff80000000
 1033b05:	mov    r8d,0x12
 1033b0b:	call   QWORD PTR [rip+0xfffffffffffcde0f]        # 0x1001920
 1033b11:	nop
 1033b12:	mov    rdx,rax
 1033b15:	lea    rcx,[rbp-0x31]
 1033b19:	call   QWORD PTR [rip+0xfffffffffffcdf81]        # 0x1001aa0
 1033b1f:	nop
 1033b20:	lea    rcx,[rbp-0x39]
 1033b24:	call   QWORD PTR [rip+0xfffffffffffcdf7e]        # 0x1001aa8
 1033b2a:	jmp    0x1033b99
 1033b2c:	mov    r8d,0xa
 1033b32:	call   QWORD PTR [rip+0xfffffffffffcdf10]        # 0x1001a48
 1033b38:	nop
 1033b39:	lea    rdx,[rip+0xfffffffffffd3908]        # 0x1007448
 1033b40:	mov    rcx,rax
 1033b43:	call   QWORD PTR [rip+0xfffffffffffcdf17]        # 0x1001a60
 1033b49:	test   eax,eax
 1033b4b:	sete   bl
 1033b4e:	lea    rcx,[rbp-0x39]
 1033b52:	call   QWORD PTR [rip+0xfffffffffffcdf50]        # 0x1001aa8
 1033b58:	test   bl,bl
 1033b5a:	je     0x1033b92
 1033b5c:	mov    rsi,0xffffffff80000003
 1033b63:	mov    r8d,0xb
 1033b69:	lea    rdx,[rbp-0x39]
 1033b6d:	lea    rcx,[rbp-0x31]
 1033b71:	call   QWORD PTR [rip+0xfffffffffffcdda9]        # 0x1001920
 1033b77:	nop
 1033b78:	mov    rdx,rax
 1033b7b:	lea    rcx,[rbp-0x31]
 1033b7f:	call   QWORD PTR [rip+0xfffffffffffcdf1b]        # 0x1001aa0
 1033b85:	nop
 1033b86:	lea    rcx,[rbp-0x39]
 1033b8a:	call   QWORD PTR [rip+0xfffffffffffcdf18]        # 0x1001aa8
 1033b90:	jmp    0x1033b99
 1033b92:	mov    rsi,0xffffffff80000002
 1033b99:	mov    edi,0x20019
 1033b9e:	xor    r8d,r8d
 1033ba1:	lea    rdx,[rip+0xfffffffffffd1c60]        # 0x1005808
 1033ba8:	lea    rcx,[rbp-0x31]
 1033bac:	call   QWORD PTR [rip+0xfffffffffffcdea6]        # 0x1001a58
 1033bb2:	cmp    eax,0xffffffff
 1033bb5:	cmove  edi,r13d
 1033bb9:	mov    rbx,QWORD PTR [r14]
 1033bbc:	lea    rcx,[rbp-0x31]
 1033bc0:	call   QWORD PTR [rip+0xfffffffffffcdf22]        # 0x1001ae8
 1033bc6:	mov    rdx,rax
 1033bc9:	lea    rax,[rbp-0x21]
 1033bcd:	mov    QWORD PTR [rsp+0x20],rax
 1033bd2:	mov    r9d,edi
 1033bd5:	xor    r8d,r8d
 1033bd8:	mov    rcx,rsi
 1033bdb:	call   QWORD PTR [rip+0xfffffffffffcd49f]        # 0x1001080
 1033be1:	mov    edx,eax
 1033be3:	xor    r9d,r9d
 1033be6:	mov    r8d,0xc000c42d
 1033bec:	mov    rcx,r14
 1033bef:	call   QWORD PTR [rbx+0x20]
 1033bf2:	test   al,al
 1033bf4:	je     0x1033c27
 1033bf6:	mov    rcx,r12
 1033bf9:	call   QWORD PTR [rip+0xfffffffffffcd5f9]        # 0x10011f8
 1033bff:	mov    rbx,QWORD PTR [r14]
 1033c02:	xor    r8d,r8d
 1033c05:	mov    rdx,r12
 1033c08:	mov    rcx,QWORD PTR [rbp-0x21]
 1033c0c:	call   QWORD PTR [rip+0xfffffffffffcd4be]        # 0x10010d0
 1033c12:	mov    edx,eax
 1033c14:	xor    r9d,r9d
 1033c17:	mov    r8d,0xc000c42d
 1033c1d:	mov    rcx,r14
 1033c20:	call   QWORD PTR [rbx+0x20]
 1033c23:	movzx  r15d,al
 1033c27:	mov    rcx,QWORD PTR [rbp-0x29]
 1033c2b:	test   rcx,rcx
 1033c2e:	je     0x1033c3e
 1033c30:	call   QWORD PTR [rip+0xfffffffffffcd8a2]        # 0x10014d8
 1033c36:	mov    QWORD PTR [rbp-0x29],0x0
 1033c3e:	mov    rcx,QWORD PTR [rbp-0x21]
 1033c42:	test   rcx,rcx
 1033c45:	je     0x1033c55
 1033c47:	call   QWORD PTR [rip+0xfffffffffffcd3d3]        # 0x1001020
 1033c4d:	mov    QWORD PTR [rbp-0x21],0x0
 1033c55:	lea    rcx,[rbp-0x31]
 1033c59:	call   QWORD PTR [rip+0xfffffffffffcde49]        # 0x1001aa8
 1033c5f:	movzx  eax,r15b
 1033c63:	mov    rcx,QWORD PTR [rbp+0x7]
 1033c67:	xor    rcx,rsp
 1033c6a:	call   0x103ff40
 1033c6f:	add    rsp,0x88
 1033c76:	pop    r15
 1033c78:	pop    r14
 1033c7a:	pop    r13
 1033c7c:	pop    r12
 1033c7e:	pop    rdi
 1033c7f:	pop    rsi
 1033c80:	pop    rbx
 1033c81:	pop    rbp
 1033c82:	ret    
 1033c83:	int3   
 1033c84:	int3   
 1033c85:	int3   
 1033c86:	int3   
 1033c87:	int3   
 1033c88:	int3   
 1033c89:	int3   
 1033c8a:	int3   
 1033c8b:	int3   
 1033c8c:	int3   
 1033c8d:	int3   
 1033c8e:	int3   
 1033c8f:	int3   
 1033c90:	mov    QWORD PTR [rsp+0x8],rcx
 1033c95:	push   rbp
 1033c96:	push   rbx
 1033c97:	push   rdi
 1033c98:	mov    rbp,rsp
 1033c9b:	sub    rsp,0x30
 1033c9f:	mov    QWORD PTR [rbp-0x8],0xfffffffffffffffe
 1033ca7:	mov    rdi,rcx
 1033caa:	mov    DWORD PTR [rbp-0x10],0x0
 1033cb1:	call   QWORD PTR [rip+0xfffffffffffcddf9]        # 0x1001ab0
 1033cb7:	mov    DWORD PTR [rbp-0x10],0x1
 1033cbe:	mov    r8d,0x4
 1033cc4:	lea    rdx,[rbp+0x30]
 1033cc8:	mov    rcx,rdi
 1033ccb:	call   QWORD PTR [rip+0xfffffffffffcdd77]        # 0x1001a48
 1033cd1:	nop
 1033cd2:	lea    rdx,[rip+0xfffffffffffd3687]        # 0x1007360
 1033cd9:	mov    rcx,rax
 1033cdc:	call   QWORD PTR [rip+0xfffffffffffcdd7e]        # 0x1001a60
 1033ce2:	test   eax,eax
 1033ce4:	sete   bl
 1033ce7:	lea    rcx,[rbp+0x30]
 1033ceb:	call   QWORD PTR [rip+0xfffffffffffcddb7]        # 0x1001aa8
 1033cf1:	mov    r8d,0x4
 1033cf7:	mov    rcx,rdi
 1033cfa:	test   bl,bl
 1033cfc:	je     0x1033d3a
 1033cfe:	lea    rdx,[rbp+0x38]
 1033d02:	call   QWORD PTR [rip+0xfffffffffffcdc18]        # 0x1001920
 1033d08:	nop
 1033d09:	mov    r8,rax
 1033d0c:	lea    rdx,[rip+0xfffffffffffd3695]        # 0x10073a8
 1033d13:	lea    rcx,[rbp+0x30]
 1033d17:	call   0x1013d70
 1033d1c:	nop
 1033d1d:	mov    rdx,rax
 1033d20:	mov    rcx,rdi
 1033d23:	call   QWORD PTR [rip+0xfffffffffffcdd77]        # 0x1001aa0
 1033d29:	nop
 1033d2a:	lea    rcx,[rbp+0x30]
 1033d2e:	call   QWORD PTR [rip+0xfffffffffffcdd74]        # 0x1001aa8
 1033d34:	nop
 1033d35:	jmp    0x1033f04
 1033d3a:	lea    rdx,[rbp+0x30]
 1033d3e:	call   QWORD PTR [rip+0xfffffffffffcdd04]        # 0x1001a48
 1033d44:	nop
 1033d45:	lea    rdx,[rip+0xfffffffffffd3624]        # 0x1007370
 1033d4c:	mov    rcx,rax
 1033d4f:	call   QWORD PTR [rip+0xfffffffffffcdd0b]        # 0x1001a60
 1033d55:	test   eax,eax
 1033d57:	sete   bl
 1033d5a:	lea    rcx,[rbp+0x30]
 1033d5e:	call   QWORD PTR [rip+0xfffffffffffcdd44]        # 0x1001aa8
 1033d64:	mov    r8d,0x4
 1033d6a:	mov    rcx,rdi
 1033d6d:	test   bl,bl
 1033d6f:	je     0x1033dad
 1033d71:	lea    rdx,[rbp+0x38]
 1033d75:	call   QWORD PTR [rip+0xfffffffffffcdba5]        # 0x1001920
 1033d7b:	nop
 1033d7c:	mov    r8,rax
 1033d7f:	lea    rdx,[rip+0xfffffffffffd364a]        # 0x10073d0
 1033d86:	lea    rcx,[rbp+0x30]
 1033d8a:	call   0x1013d70
 1033d8f:	nop
 1033d90:	mov    rdx,rax
 1033d93:	mov    rcx,rdi
 1033d96:	call   QWORD PTR [rip+0xfffffffffffcdd04]        # 0x1001aa0
 1033d9c:	nop
 1033d9d:	lea    rcx,[rbp+0x30]
 1033da1:	call   QWORD PTR [rip+0xfffffffffffcdd01]        # 0x1001aa8
 1033da7:	nop
 1033da8:	jmp    0x1033f04
 1033dad:	lea    rdx,[rbp+0x30]
 1033db1:	call   QWORD PTR [rip+0xfffffffffffcdc91]        # 0x1001a48
 1033db7:	nop
 1033db8:	lea    rdx,[rip+0xfffffffffffd35c1]        # 0x1007380
 1033dbf:	mov    rcx,rax
 1033dc2:	call   QWORD PTR [rip+0xfffffffffffcdc98]        # 0x1001a60
 1033dc8:	test   eax,eax
 1033dca:	sete   bl
 1033dcd:	lea    rcx,[rbp+0x30]
 1033dd1:	call   QWORD PTR [rip+0xfffffffffffcdcd1]        # 0x1001aa8
 1033dd7:	mov    r8d,0x4
 1033ddd:	mov    rcx,rdi
 1033de0:	test   bl,bl
 1033de2:	je     0x1033e20
 1033de4:	lea    rdx,[rbp+0x38]
 1033de8:	call   QWORD PTR [rip+0xfffffffffffcdb32]        # 0x1001920
 1033dee:	nop
 1033def:	mov    r8,rax
 1033df2:	lea    rdx,[rip+0xfffffffffffd35ff]        # 0x10073f8
 1033df9:	lea    rcx,[rbp+0x30]
 1033dfd:	call   0x1013d70
 1033e02:	nop
 1033e03:	mov    rdx,rax
 1033e06:	mov    rcx,rdi
 1033e09:	call   QWORD PTR [rip+0xfffffffffffcdc91]        # 0x1001aa0
 1033e0f:	nop
 1033e10:	lea    rcx,[rbp+0x30]
 1033e14:	call   QWORD PTR [rip+0xfffffffffffcdc8e]        # 0x1001aa8
 1033e1a:	nop
 1033e1b:	jmp    0x1033f04
 1033e20:	lea    rdx,[rbp+0x30]
 1033e24:	call   QWORD PTR [rip+0xfffffffffffcdc1e]        # 0x1001a48
 1033e2a:	nop
 1033e2b:	lea    rdx,[rip+0xfffffffffffd355e]        # 0x1007390
 1033e32:	mov    rcx,rax
 1033e35:	call   QWORD PTR [rip+0xfffffffffffcdc25]        # 0x1001a60
 1033e3b:	test   eax,eax
 1033e3d:	sete   bl
 1033e40:	lea    rcx,[rbp+0x30]
 1033e44:	call   QWORD PTR [rip+0xfffffffffffcdc5e]        # 0x1001aa8
 1033e4a:	mov    rcx,rdi
 1033e4d:	test   bl,bl
 1033e4f:	je     0x1033e90
 1033e51:	mov    r8d,0x4
 1033e57:	lea    rdx,[rbp+0x38]
 1033e5b:	call   QWORD PTR [rip+0xfffffffffffcdabf]        # 0x1001920
 1033e61:	nop
 1033e62:	mov    r8,rax
 1033e65:	lea    rdx,[rip+0xfffffffffffd35b4]        # 0x1007420
 1033e6c:	lea    rcx,[rbp+0x30]
 1033e70:	call   0x1013d70
 1033e75:	nop
 1033e76:	mov    rdx,rax
 1033e79:	mov    rcx,rdi
 1033e7c:	call   QWORD PTR [rip+0xfffffffffffcdc1e]        # 0x1001aa0
 1033e82:	nop
 1033e83:	lea    rcx,[rbp+0x30]
 1033e87:	call   QWORD PTR [rip+0xfffffffffffcdc1b]        # 0x1001aa8
 1033e8d:	nop
 1033e8e:	jmp    0x1033f04
 1033e90:	mov    r8d,0x3
 1033e96:	lea    rdx,[rbp+0x30]
 1033e9a:	call   QWORD PTR [rip+0xfffffffffffcdba8]        # 0x1001a48
 1033ea0:	nop
 1033ea1:	lea    rdx,[rip+0xfffffffffffd34f8]        # 0x10073a0
 1033ea8:	mov    rcx,rax
 1033eab:	call   QWORD PTR [rip+0xfffffffffffcdbaf]        # 0x1001a60
 1033eb1:	test   eax,eax
 1033eb3:	sete   bl
 1033eb6:	lea    rcx,[rbp+0x30]
 1033eba:	call   QWORD PTR [rip+0xfffffffffffcdbe8]        # 0x1001aa8
 1033ec0:	test   bl,bl
 1033ec2:	je     0x1033f0e
 1033ec4:	mov    r8d,0x3
 1033eca:	lea    rdx,[rbp+0x38]
 1033ece:	mov    rcx,rdi
 1033ed1:	call   QWORD PTR [rip+0xfffffffffffcda49]        # 0x1001920
 1033ed7:	nop
 1033ed8:	mov    r8,rax
 1033edb:	lea    rdx,[rip+0xfffffffffffd3566]        # 0x1007448
 1033ee2:	lea    rcx,[rbp+0x30]
 1033ee6:	call   0x1013d70
 1033eeb:	nop
 1033eec:	mov    rdx,rax
 1033eef:	mov    rcx,rdi
 1033ef2:	call   QWORD PTR [rip+0xfffffffffffcdba8]        # 0x1001aa0
 1033ef8:	nop
 1033ef9:	lea    rcx,[rbp+0x30]
 1033efd:	call   QWORD PTR [rip+0xfffffffffffcdba5]        # 0x1001aa8
 1033f03:	nop
 1033f04:	lea    rcx,[rbp+0x38]
 1033f08:	call   QWORD PTR [rip+0xfffffffffffcdb9a]        # 0x1001aa8
 1033f0e:	mov    rax,rdi
 1033f11:	add    rsp,0x30
 1033f15:	pop    rdi
 1033f16:	pop    rbx
 1033f17:	pop    rbp
 1033f18:	ret    
 1033f19:	int3   
 1033f1a:	int3   
 1033f1b:	int3   
 1033f1c:	int3   
 1033f1d:	int3   
 1033f1e:	int3   
 1033f1f:	int3   
 1033f20:	mov    rax,rsp
 1033f23:	mov    QWORD PTR [rax+0x18],r8
 1033f27:	mov    QWORD PTR [rax+0x10],rdx
 1033f2b:	mov    QWORD PTR [rax+0x8],rcx
 1033f2f:	push   rbp
 1033f30:	push   rsi
 1033f31:	push   rdi
 1033f32:	push   r12
 1033f34:	push   r13
 1033f36:	push   r14
 1033f38:	push   r15
 1033f3a:	mov    rbp,rsp
 1033f3d:	sub    rsp,0x70
 1033f41:	mov    QWORD PTR [rbp-0x18],0xfffffffffffffffe
 1033f49:	mov    QWORD PTR [rax+0x20],rbx
 1033f4d:	mov    r13,r9
 1033f50:	mov    r15,r8
 1033f53:	mov    rdi,rdx
 1033f56:	mov    r14,rcx
 1033f59:	xor    eax,eax
 1033f5b:	mov    DWORD PTR [rbp-0x38],eax
 1033f5e:	mov    QWORD PTR [rbp-0x28],rax
 1033f62:	mov    QWORD PTR [rbp-0x30],rax
 1033f66:	mov    DWORD PTR [rbp-0x40],0x4
 1033f6d:	lea    rdx,[rip+0xfffffffffffcde9c]        # 0x1001e10
 1033f74:	call   QWORD PTR [rip+0xfffffffffffcdb36]        # 0x1001ab0
 1033f7a:	mov    DWORD PTR [rbp-0x38],0x1
 1033f81:	mov    rsi,QWORD PTR [rbp+0x68]
 1033f85:	mov    rbx,QWORD PTR [rsi]
 1033f88:	lea    r8,[rbp-0x28]
 1033f8c:	mov    rdx,r15
 1033f8f:	mov    rcx,rdi
 1033f92:	call   QWORD PTR [rip+0xfffffffffffcd0d8]        # 0x1001070
 1033f98:	mov    edx,eax
 1033f9a:	mov    r9b,0x1
 1033f9d:	mov    r8d,0xc000c356
 1033fa3:	mov    rcx,rsi
 1033fa6:	call   QWORD PTR [rbx+0x20]
 1033fa9:	mov    r12,QWORD PTR [rbp+0x60]
 1033fad:	test   al,al
 1033faf:	je     0x1034147
 1033fb5:	mov    rbx,QWORD PTR [rsi]
 1033fb8:	lea    rax,[rbp-0x30]
 1033fbc:	mov    QWORD PTR [rsp+0x20],rax
 1033fc1:	mov    r9d,0x20019
 1033fc7:	xor    r8d,r8d
 1033fca:	mov    rdx,r13
 1033fcd:	mov    rcx,QWORD PTR [rbp-0x28]
 1033fd1:	call   QWORD PTR [rip+0xfffffffffffcd0a9]        # 0x1001080
 1033fd7:	mov    edx,eax
 1033fd9:	mov    r9b,0x1
 1033fdc:	mov    r8d,0xc000c357
 1033fe2:	mov    rcx,rsi
 1033fe5:	call   QWORD PTR [rbx+0x20]
 1033fe8:	test   al,al
 1033fea:	je     0x1034147
 1033ff0:	lea    rcx,[rbp+0x68]
 1033ff4:	call   QWORD PTR [rip+0xfffffffffffcdac6]        # 0x1001ac0
 1033ffa:	nop
 1033ffb:	mov    edx,0xc000c42d
 1034000:	lea    rcx,[rbp-0x20]
 1034004:	call   0x10132d0
 1034009:	nop
 103400a:	mov    QWORD PTR [rsp+0x20],r12
 103400f:	mov    r9,r13
 1034012:	mov    r8,QWORD PTR [rax]
 1034015:	lea    rdx,[rip+0xfffffffffffd3514]        # 0x1007530
 103401c:	lea    rcx,[rbp+0x68]
 1034020:	call   QWORD PTR [rip+0xfffffffffffcda1a]        # 0x1001a40
 1034026:	nop
 1034027:	lea    rcx,[rbp-0x20]
 103402b:	call   QWORD PTR [rip+0xfffffffffffcda77]        # 0x1001aa8
 1034031:	lea    r11,[rbp-0x40]
 1034035:	mov    QWORD PTR [rsp+0x28],r11
 103403a:	lea    rax,[rbp-0x3c]
 103403e:	mov    QWORD PTR [rsp+0x20],rax
 1034043:	xor    r9d,r9d
 1034046:	xor    r8d,r8d
 1034049:	mov    rdx,r12
 103404c:	mov    rcx,QWORD PTR [rbp-0x30]
 1034050:	call   QWORD PTR [rip+0xfffffffffffcd032]        # 0x1001088
 1034056:	mov    ebx,eax
 1034058:	cmp    eax,0xea
 103405d:	jne    0x10340fb
 1034063:	mov    ebx,DWORD PTR [rbp-0x40]
 1034066:	call   QWORD PTR [rip+0xfffffffffffcd4ec]        # 0x1001558
 103406c:	mov    rcx,rax
 103406f:	mov    r8d,ebx
 1034072:	xor    edx,edx
 1034074:	call   QWORD PTR [rip+0xfffffffffffcd4ee]        # 0x1001568
 103407a:	mov    r15,rax
 103407d:	test   rax,rax
 1034080:	je     0x1034139
 1034086:	lea    rax,[rbp-0x20]
 103408a:	mov    QWORD PTR [rbp-0x10],rax
 103408e:	lea    rdx,[rbp+0x68]
 1034092:	lea    rcx,[rbp-0x20]
 1034096:	call   QWORD PTR [rip+0xfffffffffffcd91c]        # 0x10019b8
 103409c:	mov    rdi,rax
 103409f:	mov    rcx,QWORD PTR [rbp-0x30]
 10340a3:	mov    rbx,QWORD PTR [rsi]
 10340a6:	lea    rax,[rbp-0x40]
 10340aa:	mov    QWORD PTR [rsp+0x28],rax
 10340af:	mov    QWORD PTR [rsp+0x20],r15
 10340b4:	xor    r9d,r9d
 10340b7:	xor    r8d,r8d
 10340ba:	mov    rdx,r12
 10340bd:	call   QWORD PTR [rip+0xfffffffffffccfc5]        # 0x1001088
 10340c3:	mov    edx,eax
 10340c5:	mov    r9b,0x1
 10340c8:	mov    r8,rdi
 10340cb:	mov    rcx,rsi
 10340ce:	call   QWORD PTR [rbx+0x28]
 10340d1:	test   al,al
 10340d3:	je     0x10340e1
 10340d5:	mov    rdx,r15
 10340d8:	mov    rcx,r14
 10340db:	call   QWORD PTR [rip+0xfffffffffffcd9b7]        # 0x1001a98
 10340e1:	call   QWORD PTR [rip+0xfffffffffffcd471]        # 0x1001558
 10340e7:	mov    rcx,rax
 10340ea:	mov    r8,r15
 10340ed:	xor    edx,edx
 10340ef:	call   QWORD PTR [rip+0xfffffffffffcd46b]        # 0x1001560
 10340f5:	mov    rdi,QWORD PTR [rbp+0x48]
 10340f9:	jmp    0x1034139
 10340fb:	test   eax,eax
 10340fd:	jne    0x103410e
 10340ff:	lea    rdx,[rbp-0x3c]
 1034103:	mov    rcx,r14
 1034106:	call   QWORD PTR [rip+0xfffffffffffcd98c]        # 0x1001a98
 103410c:	jmp    0x103413d
 103410e:	lea    rax,[rbp-0x20]
 1034112:	mov    QWORD PTR [rbp-0x10],rax
 1034116:	lea    rdx,[rbp+0x68]
 103411a:	lea    rcx,[rbp-0x20]
 103411e:	call   QWORD PTR [rip+0xfffffffffffcd894]        # 0x10019b8
 1034124:	nop
 1034125:	mov    r10,QWORD PTR [rsi]
 1034128:	mov    r9b,0x1
 103412b:	mov    r8,rax
 103412e:	mov    edx,ebx
 1034130:	mov    rcx,rsi
 1034133:	call   QWORD PTR [r10+0x28]
 1034137:	jmp    0x103413d
 1034139:	mov    r15,QWORD PTR [rbp+0x50]
 103413d:	lea    rcx,[rbp+0x68]
 1034141:	call   QWORD PTR [rip+0xfffffffffffcd961]        # 0x1001aa8
 1034147:	mov    rcx,r14
 103414a:	call   QWORD PTR [rip+0xfffffffffffcd7f0]        # 0x1001940
 1034150:	test   al,al
 1034152:	je     0x1034321
 1034158:	mov    rdx,rsi
 103415b:	mov    rcx,rdi
 103415e:	call   0x10301b0
 1034163:	test   al,al
 1034165:	je     0x1034321
 103416b:	mov    rbx,QWORD PTR [rsi]
 103416e:	lea    r8,[rbp-0x28]
 1034172:	mov    rdx,r15
 1034175:	mov    rcx,rdi
 1034178:	call   QWORD PTR [rip+0xfffffffffffccef2]        # 0x1001070
 103417e:	mov    edx,eax
 1034180:	mov    r9b,0x1
 1034183:	mov    r8d,0xc000c356
 1034189:	mov    rcx,rsi
 103418c:	call   QWORD PTR [rbx+0x20]
 103418f:	test   al,al
 1034191:	je     0x1034321
 1034197:	mov    rbx,QWORD PTR [rsi]
 103419a:	lea    rax,[rbp-0x30]
 103419e:	mov    QWORD PTR [rsp+0x20],rax
 10341a3:	mov    r9d,0x20219
 10341a9:	xor    r8d,r8d
 10341ac:	mov    rdx,r13
 10341af:	mov    rcx,QWORD PTR [rbp-0x28]
 10341b3:	call   QWORD PTR [rip+0xfffffffffffccec7]        # 0x1001080
 10341b9:	mov    edx,eax
 10341bb:	mov    r9b,0x1
 10341be:	mov    r8d,0xc000c357
 10341c4:	mov    rcx,rsi
 10341c7:	call   QWORD PTR [rbx+0x20]
 10341ca:	test   al,al
 10341cc:	je     0x1034321
 10341d2:	lea    rcx,[rbp+0x68]
 10341d6:	call   QWORD PTR [rip+0xfffffffffffcd8e4]        # 0x1001ac0
 10341dc:	nop
 10341dd:	mov    edx,0xc000c42d
 10341e2:	lea    rcx,[rbp-0x20]
 10341e6:	call   0x10132d0
 10341eb:	nop
 10341ec:	mov    QWORD PTR [rsp+0x20],r12
 10341f1:	mov    r9,r13
 10341f4:	mov    r8,QWORD PTR [rax]
 10341f7:	lea    rdx,[rip+0xfffffffffffd3332]        # 0x1007530
 10341fe:	lea    rcx,[rbp+0x68]
 1034202:	call   QWORD PTR [rip+0xfffffffffffcd838]        # 0x1001a40
 1034208:	nop
 1034209:	lea    rcx,[rbp-0x20]
 103420d:	call   QWORD PTR [rip+0xfffffffffffcd895]        # 0x1001aa8
 1034213:	lea    r11,[rbp-0x40]
 1034217:	mov    QWORD PTR [rsp+0x28],r11
 103421c:	lea    rax,[rbp-0x3c]
 1034220:	mov    QWORD PTR [rsp+0x20],rax
 1034225:	xor    r9d,r9d
 1034228:	xor    r8d,r8d
 103422b:	mov    rdx,r12
 103422e:	mov    rcx,QWORD PTR [rbp-0x30]
 1034232:	call   QWORD PTR [rip+0xfffffffffffcce50]        # 0x1001088
 1034238:	mov    ebx,eax
 103423a:	cmp    eax,0xea
 103423f:	jne    0x10342d9
 1034245:	mov    ebx,DWORD PTR [rbp-0x40]
 1034248:	call   QWORD PTR [rip+0xfffffffffffcd30a]        # 0x1001558
 103424e:	mov    rcx,rax
 1034251:	mov    r8d,ebx
 1034254:	xor    edx,edx
 1034256:	call   QWORD PTR [rip+0xfffffffffffcd30c]        # 0x1001568
 103425c:	mov    r15,rax
 103425f:	test   rax,rax
 1034262:	je     0x1034316
 1034268:	lea    rax,[rbp-0x20]
 103426c:	mov    QWORD PTR [rbp-0x10],rax
 1034270:	lea    rdx,[rbp+0x68]
 1034274:	lea    rcx,[rbp-0x20]
 1034278:	call   QWORD PTR [rip+0xfffffffffffcd73a]        # 0x10019b8
 103427e:	mov    rdi,rax
 1034281:	mov    rcx,QWORD PTR [rbp-0x30]
 1034285:	mov    rbx,QWORD PTR [rsi]
 1034288:	lea    rax,[rbp-0x40]
 103428c:	mov    QWORD PTR [rsp+0x28],rax
 1034291:	mov    QWORD PTR [rsp+0x20],r15
 1034296:	xor    r9d,r9d
 1034299:	xor    r8d,r8d
 103429c:	mov    rdx,r12
 103429f:	call   QWORD PTR [rip+0xfffffffffffccde3]        # 0x1001088
 10342a5:	mov    edx,eax
 10342a7:	mov    r9b,0x1
 10342aa:	mov    r8,rdi
 10342ad:	mov    rcx,rsi
 10342b0:	call   QWORD PTR [rbx+0x28]
 10342b3:	test   al,al
 10342b5:	je     0x10342c3
 10342b7:	mov    rdx,r15
 10342ba:	mov    rcx,r14
 10342bd:	call   QWORD PTR [rip+0xfffffffffffcd7d5]        # 0x1001a98
 10342c3:	call   QWORD PTR [rip+0xfffffffffffcd28f]        # 0x1001558
 10342c9:	mov    rcx,rax
 10342cc:	mov    r8,r15
 10342cf:	xor    edx,edx
 10342d1:	call   QWORD PTR [rip+0xfffffffffffcd289]        # 0x1001560
 10342d7:	jmp    0x1034316
 10342d9:	test   eax,eax
 10342db:	jne    0x10342ec
 10342dd:	lea    rdx,[rbp-0x3c]
 10342e1:	mov    rcx,r14
 10342e4:	call   QWORD PTR [rip+0xfffffffffffcd7ae]        # 0x1001a98
 10342ea:	jmp    0x1034316
 10342ec:	lea    rax,[rbp-0x20]
 10342f0:	mov    QWORD PTR [rbp-0x10],rax
 10342f4:	lea    rdx,[rbp+0x68]
 10342f8:	lea    rcx,[rbp-0x20]
 10342fc:	call   QWORD PTR [rip+0xfffffffffffcd6b6]        # 0x10019b8
 1034302:	nop
 1034303:	mov    r10,QWORD PTR [rsi]
 1034306:	mov    r9b,0x1
 1034309:	mov    r8,rax
 103430c:	mov    edx,ebx
 103430e:	mov    rcx,rsi
 1034311:	call   QWORD PTR [r10+0x28]
 1034315:	nop
 1034316:	lea    rcx,[rbp+0x68]
 103431a:	call   QWORD PTR [rip+0xfffffffffffcd788]        # 0x1001aa8
 1034320:	nop
 1034321:	mov    rcx,QWORD PTR [rbp-0x30]
 1034325:	test   rcx,rcx
 1034328:	je     0x1034338
 103432a:	call   QWORD PTR [rip+0xfffffffffffcccf0]        # 0x1001020
 1034330:	mov    QWORD PTR [rbp-0x30],0x0
 1034338:	mov    rcx,QWORD PTR [rbp-0x28]
 103433c:	test   rcx,rcx
 103433f:	je     0x103434f
 1034341:	call   QWORD PTR [rip+0xfffffffffffcccd9]        # 0x1001020
 1034347:	mov    QWORD PTR [rbp-0x28],0x0
 103434f:	mov    rax,r14
 1034352:	mov    rbx,QWORD PTR [rsp+0xc8]
 103435a:	add    rsp,0x70
 103435e:	pop    r15
 1034360:	pop    r14
 1034362:	pop    r13
 1034364:	pop    r12
 1034366:	pop    rdi
 1034367:	pop    rsi
 1034368:	pop    rbp
 1034369:	ret    
 103436a:	int3   
 103436b:	int3   
 103436c:	int3   
 103436d:	int3   
 103436e:	int3   
 103436f:	int3   
 1034370:	int3   
 1034371:	int3   
 1034372:	int3   
 1034373:	int3   
 1034374:	int3   
 1034375:	int3   
 1034376:	int3   
 1034377:	int3   
 1034378:	int3   
 1034379:	int3   
 103437a:	int3   
 103437b:	int3   
 103437c:	int3   
 103437d:	int3   
 103437e:	int3   
 103437f:	int3   
 1034380:	mov    rax,rsp
 1034383:	push   rbp
 1034384:	push   r14
 1034386:	push   r15
 1034388:	mov    rbp,rsp
 103438b:	sub    rsp,0x60
 103438f:	mov    QWORD PTR [rbp-0x10],0xfffffffffffffffe
 1034397:	mov    QWORD PTR [rax+0x8],rbx
 103439b:	mov    QWORD PTR [rax+0x10],rsi
 103439f:	mov    QWORD PTR [rax+0x18],rdi
 10343a3:	mov    r14,r9
 10343a6:	mov    rsi,r8
 10343a9:	xor    r15d,r15d
 10343ac:	mov    QWORD PTR [rbp-0x20],r15
 10343b0:	mov    QWORD PTR [rbp-0x28],r15
 10343b4:	mov    DWORD PTR [rbp-0x2c],0x4
 10343bb:	mov    DWORD PTR [rbp-0x30],r15d
 10343bf:	mov    rdi,QWORD PTR [rbp+0x40]
 10343c3:	mov    rbx,QWORD PTR [rdi]
 10343c6:	lea    r8,[rbp-0x20]
 10343ca:	call   QWORD PTR [rip+0xfffffffffffccca0]        # 0x1001070
 10343d0:	mov    edx,eax
 10343d2:	mov    r9b,0x1
 10343d5:	mov    r8d,0xc000c356
 10343db:	mov    rcx,rdi
 10343de:	call   QWORD PTR [rbx+0x20]
 10343e1:	test   al,al
 10343e3:	je     0x10344c4
 10343e9:	mov    rbx,QWORD PTR [rdi]
 10343ec:	lea    rax,[rbp-0x28]
 10343f0:	mov    QWORD PTR [rsp+0x20],rax
 10343f5:	mov    r9d,0x20019
 10343fb:	xor    r8d,r8d
 10343fe:	mov    rdx,rsi
 1034401:	mov    rcx,QWORD PTR [rbp-0x20]
 1034405:	call   QWORD PTR [rip+0xfffffffffffccc75]        # 0x1001080
 103440b:	mov    edx,eax
 103440d:	mov    r9b,0x1
 1034410:	mov    r8d,0xc000c357
 1034416:	mov    rcx,rdi
 1034419:	call   QWORD PTR [rbx+0x20]
 103441c:	test   al,al
 103441e:	je     0x10344c4
 1034424:	lea    rcx,[rbp+0x40]
 1034428:	call   QWORD PTR [rip+0xfffffffffffcd692]        # 0x1001ac0
 103442e:	nop
 103442f:	mov    edx,0xc000c42d
 1034434:	lea    rcx,[rbp-0x18]
 1034438:	call   0x10132d0
 103443d:	nop
 103443e:	mov    QWORD PTR [rsp+0x20],r14
 1034443:	mov    r9,rsi
 1034446:	mov    r8,QWORD PTR [rax]
 1034449:	lea    rdx,[rip+0xfffffffffffd30e0]        # 0x1007530
 1034450:	lea    rcx,[rbp+0x40]
 1034454:	call   QWORD PTR [rip+0xfffffffffffcd5e6]        # 0x1001a40
 103445a:	nop
 103445b:	lea    rcx,[rbp-0x18]
 103445f:	call   QWORD PTR [rip+0xfffffffffffcd643]        # 0x1001aa8
 1034465:	lea    r11,[rbp-0x2c]
 1034469:	mov    QWORD PTR [rsp+0x28],r11
 103446e:	lea    rax,[rbp-0x30]
 1034472:	mov    QWORD PTR [rsp+0x20],rax
 1034477:	xor    r9d,r9d
 103447a:	xor    r8d,r8d
 103447d:	mov    rdx,r14
 1034480:	mov    rcx,QWORD PTR [rbp-0x28]
 1034484:	call   QWORD PTR [rip+0xfffffffffffccbfe]        # 0x1001088
 103448a:	mov    ebx,eax
 103448c:	test   eax,eax
 103448e:	je     0x10344ba
 1034490:	lea    rax,[rbp-0x18]
 1034494:	mov    QWORD PTR [rbp-0x8],rax
 1034498:	lea    rdx,[rbp+0x40]
 103449c:	lea    rcx,[rbp-0x18]
 10344a0:	call   QWORD PTR [rip+0xfffffffffffcd512]        # 0x10019b8
 10344a6:	nop
 10344a7:	mov    r10,QWORD PTR [rdi]
 10344aa:	mov    r9b,0x1
 10344ad:	mov    r8,rax
 10344b0:	mov    edx,ebx
 10344b2:	mov    rcx,rdi
 10344b5:	call   QWORD PTR [r10+0x28]
 10344b9:	nop
 10344ba:	lea    rcx,[rbp+0x40]
 10344be:	call   QWORD PTR [rip+0xfffffffffffcd5e4]        # 0x1001aa8
 10344c4:	mov    ebx,DWORD PTR [rbp-0x30]
 10344c7:	mov    rcx,QWORD PTR [rbp-0x28]
 10344cb:	test   rcx,rcx
 10344ce:	je     0x10344da
 10344d0:	call   QWORD PTR [rip+0xfffffffffffccb4a]        # 0x1001020
 10344d6:	mov    QWORD PTR [rbp-0x28],r15
 10344da:	mov    rcx,QWORD PTR [rbp-0x20]
 10344de:	test   rcx,rcx
 10344e1:	je     0x10344ed
 10344e3:	call   QWORD PTR [rip+0xfffffffffffccb37]        # 0x1001020
 10344e9:	mov    QWORD PTR [rbp-0x20],r15
 10344ed:	mov    eax,ebx
 10344ef:	lea    r11,[rsp+0x60]
 10344f4:	mov    rbx,QWORD PTR [r11+0x20]
 10344f8:	mov    rsi,QWORD PTR [r11+0x28]
 10344fc:	mov    rdi,QWORD PTR [r11+0x30]
 1034500:	mov    rsp,r11
 1034503:	pop    r15
 1034505:	pop    r14
 1034507:	pop    rbp
 1034508:	ret    
 1034509:	int3   
 103450a:	int3   
 103450b:	int3   
 103450c:	int3   
 103450d:	int3   
 103450e:	int3   
 103450f:	int3   
 1034510:	rex push rbx
 1034512:	sub    rsp,0x20
 1034516:	mov    rbx,rcx
 1034519:	mov    rcx,QWORD PTR [rcx]
 103451c:	cmp    rcx,0xffffffffffffffff
 1034520:	je     0x103453f
 1034522:	test   rcx,rcx
 1034525:	je     0x103453f
 1034527:	call   QWORD PTR [rip+0xfffffffffffccfab]        # 0x10014d8
 103452d:	mov    QWORD PTR [rbx],0xffffffffffffffff
 1034534:	test   eax,eax
 1034536:	setne  al
 1034539:	add    rsp,0x20
 103453d:	pop    rbx
 103453e:	ret    
 103453f:	mov    al,0x1
 1034541:	mov    QWORD PTR [rbx],0xffffffffffffffff
 1034548:	add    rsp,0x20
 103454c:	pop    rbx
 103454d:	ret    
 103454e:	int3   
 103454f:	int3   
 1034550:	int3   
 1034551:	int3   
 1034552:	int3   
 1034553:	int3   
 1034554:	int3   
 1034555:	int3   
 1034556:	int3   
 1034557:	int3   
 1034558:	int3   
 1034559:	int3   
 103455a:	int3   
 103455b:	int3   
 103455c:	int3   
 103455d:	int3   
 103455e:	int3   
 103455f:	int3   
 1034560:	rex push rbx
 1034562:	sub    rsp,0x20
 1034566:	mov    rbx,rcx
 1034569:	mov    rcx,QWORD PTR [rcx]
 103456c:	test   rcx,rcx
 103456f:	je     0x1034589
 1034571:	call   QWORD PTR [rip+0xfffffffffffccaa9]        # 0x1001020
 1034577:	mov    QWORD PTR [rbx],0x0
 103457e:	test   eax,eax
 1034580:	sete   al
 1034583:	add    rsp,0x20
 1034587:	pop    rbx
 1034588:	ret    
 1034589:	mov    al,0x1
 103458b:	add    rsp,0x20
 103458f:	pop    rbx
 1034590:	ret    
 1034591:	int3   
 1034592:	int3   
 1034593:	int3   
 1034594:	int3   
 1034595:	int3   
 1034596:	int3   
 1034597:	int3   
 1034598:	int3   
 1034599:	int3   
 103459a:	int3   
 103459b:	int3   
 103459c:	int3   
 103459d:	int3   
 103459e:	int3   
 103459f:	int3   
 10345a0:	rex push rbx
 10345a2:	sub    rsp,0x30
 10345a6:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 10345af:	mov    rbx,rcx
 10345b2:	mov    rax,QWORD PTR [rcx]
 10345b5:	cmp    rax,0xffffffffffffffff
 10345b9:	je     0x1034627
 10345bb:	test   rax,rax
 10345be:	je     0x1034627
 10345c0:	test   r8b,r8b
 10345c3:	je     0x10345cd
 10345c5:	mov    ecx,DWORD PTR [rcx+0x10]
 10345c8:	call   0x1034640
 10345cd:	mov    edx,DWORD PTR [rbx+0x10]
 10345d0:	lea    rcx,[rip+0x519]        # 0x1034af0
 10345d7:	call   QWORD PTR [rip+0xfffffffffffcd2e3]        # 0x10018c0
 10345dd:	mov    rcx,QWORD PTR [rbx]
 10345e0:	cmp    rcx,0xffffffffffffffff
 10345e4:	je     0x1034613
 10345e6:	test   rcx,rcx
 10345e9:	je     0x1034613
 10345eb:	mov    DWORD PTR [rsp+0x58],0x0
 10345f3:	lea    rdx,[rsp+0x58]
 10345f8:	call   QWORD PTR [rip+0xfffffffffffcccc2]        # 0x10012c0
 10345fe:	cmp    DWORD PTR [rsp+0x58],0x103
 1034606:	jne    0x1034613
 1034608:	xor    edx,edx
 103460a:	mov    rcx,QWORD PTR [rbx]
 103460d:	call   QWORD PTR [rip+0xfffffffffffcce4d]        # 0x1001460
 1034613:	lea    rcx,[rbx+0x8]
 1034617:	call   0x1034510
 103461c:	mov    rcx,rbx
 103461f:	call   0x1034510
 1034624:	nop
 1034625:	jmp    0x1034627
 1034627:	add    rsp,0x30
 103462b:	pop    rbx
 103462c:	ret    
 103462d:	int3   
 103462e:	int3   
 103462f:	int3   
 1034630:	int3   
 1034631:	int3   
 1034632:	int3   
 1034633:	int3   
 1034634:	int3   
 1034635:	int3   
 1034636:	int3   
 1034637:	int3   
 1034638:	int3   
 1034639:	int3   
 103463a:	int3   
 103463b:	int3   
 103463c:	int3   
 103463d:	int3   
 103463e:	int3   
 103463f:	int3   
 1034640:	mov    QWORD PTR [rsp+0x8],rbx
 1034645:	push   rdi
 1034646:	sub    rsp,0x150
 103464d:	mov    rax,QWORD PTR [rip+0x2f21c]        # 0x1063870
 1034654:	xor    rax,rsp
 1034657:	mov    QWORD PTR [rsp+0x140],rax
 103465f:	mov    ebx,ecx
 1034661:	lea    rcx,[rsp+0x20]
 1034666:	mov    rdi,rdx
 1034669:	mov    DWORD PTR [rsp+0x20],0x114
 1034671:	call   QWORD PTR [rip+0xfffffffffffccda9]        # 0x1001420
 1034677:	test   eax,eax
 1034679:	je     0x103469f
 103467b:	cmp    DWORD PTR [rsp+0x30],0x2
 1034680:	jne    0x1034695
 1034682:	cmp    DWORD PTR [rsp+0x24],0x4
 1034687:	jne    0x1034695
 1034689:	mov    rdx,rdi
 103468c:	mov    ecx,ebx
 103468e:	call   0x10346d0
 1034693:	jmp    0x103469f
 1034695:	mov    rdx,rdi
 1034698:	mov    ecx,ebx
 103469a:	call   0x10348d0
 103469f:	mov    rcx,QWORD PTR [rsp+0x140]
 10346a7:	xor    rcx,rsp
 10346aa:	call   0x103ff40
 10346af:	mov    rbx,QWORD PTR [rsp+0x160]
 10346b7:	add    rsp,0x150
 10346be:	pop    rdi
 10346bf:	ret    
 10346c0:	int3   
 10346c1:	int3   
 10346c2:	int3   
 10346c3:	int3   
 10346c4:	int3   
 10346c5:	int3   
 10346c6:	int3   
 10346c7:	int3   
 10346c8:	int3   
 10346c9:	int3   
 10346ca:	int3   
 10346cb:	int3   
 10346cc:	int3   
 10346cd:	int3   
 10346ce:	int3   
 10346cf:	int3   
 10346d0:	rex push rdi
 10346d2:	push   r12
 10346d4:	push   r13
 10346d6:	push   r14
 10346d8:	push   r15
 10346da:	mov    eax,0x2060
 10346df:	call   0x1040290
 10346e4:	sub    rsp,rax
 10346e7:	mov    QWORD PTR [rsp+0x48],0xfffffffffffffffe
 10346f0:	mov    QWORD PTR [rsp+0x2090],rbx
 10346f8:	mov    QWORD PTR [rsp+0x20a0],rbp
 1034700:	mov    QWORD PTR [rsp+0x20a8],rsi
 1034708:	mov    rax,QWORD PTR [rip+0x2f161]        # 0x1063870
 103470f:	xor    rax,rsp
 1034712:	mov    QWORD PTR [rsp+0x2050],rax
 103471a:	mov    rbp,rdx
 103471d:	mov    r12d,ecx
 1034720:	xor    bl,bl
 1034722:	xor    r13d,r13d
 1034725:	mov    QWORD PTR [rsp+0x28],r13
 103472a:	lea    rcx,[rip+0xfffffffffffd2a6f]        # 0x10071a0
 1034731:	call   QWORD PTR [rip+0xfffffffffffccc91]        # 0x10013c8
 1034737:	mov    r14,rax
 103473a:	mov    QWORD PTR [rsp+0x28],rax
 103473f:	test   rax,rax
 1034742:	je     0x103487b
 1034748:	lea    rdx,[rip+0xfffffffffffd2a69]        # 0x10071b8
 103474f:	mov    rcx,rax
 1034752:	call   QWORD PTR [rip+0xfffffffffffcce30]        # 0x1001588
 1034758:	mov    r15,rax
 103475b:	test   rax,rax
 103475e:	je     0x103487b
 1034764:	lea    r8,[rsp+0x20]
 1034769:	mov    edx,0x2000
 103476e:	lea    rcx,[rsp+0x50]
 1034773:	call   0x1040762
 1034778:	test   eax,eax
 103477a:	je     0x103487b
 1034780:	mov    esi,DWORD PTR [rsp+0x20]
 1034784:	shr    esi,0x2
 1034787:	mov    edi,r13d
 103478a:	test   esi,esi
 103478c:	je     0x1034879
 1034792:	lea    rbx,[rsp+0x50]
 1034797:	nop    WORD PTR [rax+rax*1+0x0]
 10347a0:	mov    r9d,DWORD PTR [rbx]
 10347a3:	test   r9d,r9d
 10347a6:	je     0x1034864
 10347ac:	mov    rax,QWORD PTR [rbp+0x8]
 10347b0:	test   rax,rax
 10347b3:	je     0x10347f2
 10347b5:	data16 data16 nop WORD PTR [rax+rax*1+0x0]
 10347c0:	lea    r8,[rax+0x10]
 10347c4:	test   r8,r8
 10347c7:	je     0x1034873
 10347cd:	test   rbx,rbx
 10347d0:	je     0x1034873
 10347d6:	mov    edx,r13d
 10347d9:	cmp    DWORD PTR [r8],r9d
 10347dc:	sete   dl
 10347df:	test   edx,edx
 10347e1:	jne    0x10347ed
 10347e3:	mov    rax,QWORD PTR [rax]
 10347e6:	test   rax,rax
 10347e9:	jne    0x10347c0
 10347eb:	jmp    0x10347f2
 10347ed:	test   rax,rax
 10347f0:	jne    0x1034864
 10347f2:	mov    rdx,r15
 10347f5:	mov    ecx,r9d
 10347f8:	call   0x1034c40
 10347fd:	cmp    r12d,eax
 1034800:	jne    0x1034864
 1034802:	mov    r8d,DWORD PTR [rbx]
 1034805:	mov    DWORD PTR [rsp+0x40],r8d
 103480a:	xor    edx,edx
 103480c:	mov    ecx,0x1f0fff
 1034811:	call   QWORD PTR [rip+0xfffffffffffccc41]        # 0x1001458
 1034817:	mov    QWORD PTR [rsp+0x30],rax
 103481c:	cmp    rax,0xffffffffffffffff
 1034820:	je     0x1034864
 1034822:	test   rax,rax
 1034825:	je     0x1034864
 1034827:	mov    DWORD PTR [rsp+0x44],r13d
 103482c:	mov    QWORD PTR [rsp+0x38],0xffffffffffffffff
 1034835:	xor    r8d,r8d
 1034838:	mov    rdx,rbp
 103483b:	lea    rcx,[rsp+0x30]
 1034840:	call   0x10345a0
 1034845:	mov    rcx,QWORD PTR [rsp+0x30]
 103484a:	cmp    rcx,0xffffffffffffffff
 103484e:	je     0x103485b
 1034850:	test   rcx,rcx
 1034853:	je     0x103485b
 1034855:	call   QWORD PTR [rip+0xfffffffffffccc7d]        # 0x10014d8
 103485b:	mov    QWORD PTR [rsp+0x30],0xffffffffffffffff
 1034864:	inc    edi
 1034866:	add    rbx,0x4
 103486a:	cmp    edi,esi
 103486c:	jae    0x1034879
 103486e:	jmp    0x10347a0
 1034873:	call   0x103f972
 1034878:	int3   
 1034879:	mov    bl,0x1
 103487b:	test   r14,r14
 103487e:	je     0x103488e
 1034880:	mov    rcx,r14
 1034883:	call   QWORD PTR [rip+0xfffffffffffcca0f]        # 0x1001298
 1034889:	mov    QWORD PTR [rsp+0x28],r13
 103488e:	movzx  eax,bl
 1034891:	mov    rcx,QWORD PTR [rsp+0x2050]
 1034899:	xor    rcx,rsp
 103489c:	call   0x103ff40
 10348a1:	lea    r11,[rsp+0x2060]
 10348a9:	mov    rbx,QWORD PTR [r11+0x30]
 10348ad:	mov    rbp,QWORD PTR [r11+0x40]
 10348b1:	mov    rsi,QWORD PTR [r11+0x48]
 10348b5:	mov    rsp,r11
 10348b8:	pop    r15
 10348ba:	pop    r14
 10348bc:	pop    r13
 10348be:	pop    r12
 10348c0:	pop    rdi
 10348c1:	ret    
 10348c2:	int3   
 10348c3:	int3   
 10348c4:	int3   
 10348c5:	int3   
 10348c6:	int3   
 10348c7:	int3   
 10348c8:	int3   
 10348c9:	int3   
 10348ca:	int3   
 10348cb:	int3   
 10348cc:	int3   
 10348cd:	int3   
 10348ce:	int3   
 10348cf:	int3   
 10348d0:	mov    rax,rsp
 10348d3:	push   rdi
 10348d4:	push   r12
 10348d6:	push   r13
 10348d8:	push   r14
 10348da:	push   r15
 10348dc:	sub    rsp,0x2a0
 10348e3:	mov    QWORD PTR [rsp+0x48],0xfffffffffffffffe
 10348ec:	mov    QWORD PTR [rax+0x8],rbx
 10348f0:	mov    QWORD PTR [rax+0x18],rbp
 10348f4:	mov    QWORD PTR [rax+0x20],rsi
 10348f8:	mov    rax,QWORD PTR [rip+0x2ef71]        # 0x1063870
 10348ff:	xor    rax,rsp
 1034902:	mov    QWORD PTR [rsp+0x290],rax
 103490a:	mov    rbp,rdx
 103490d:	mov    r15d,ecx
 1034910:	xor    r13d,r13d
 1034913:	mov    QWORD PTR [rsp+0x20],r13
 1034918:	xor    bl,bl
 103491a:	lea    rcx,[rip+0xfffffffffffd28b7]        # 0x10071d8
 1034921:	call   QWORD PTR [rip+0xfffffffffffccaa1]        # 0x10013c8
 1034927:	mov    r14,rax
 103492a:	mov    QWORD PTR [rsp+0x20],rax
 103492f:	test   rax,rax
 1034932:	je     0x1034aa3
 1034938:	lea    rdx,[rip+0xfffffffffffd28b9]        # 0x10071f8
 103493f:	mov    rcx,rax
 1034942:	call   QWORD PTR [rip+0xfffffffffffccc40]        # 0x1001588
 1034948:	mov    rdi,rax
 103494b:	lea    rdx,[rip+0xfffffffffffd28c6]        # 0x1007218
 1034952:	mov    rcx,r14
 1034955:	call   QWORD PTR [rip+0xfffffffffffccc2d]        # 0x1001588
 103495b:	mov    rsi,rax
 103495e:	lea    rdx,[rip+0xfffffffffffd28c3]        # 0x1007228
 1034965:	mov    rcx,r14
 1034968:	call   QWORD PTR [rip+0xfffffffffffccc1a]        # 0x1001588
 103496e:	mov    r12,rax
 1034971:	test   rax,rax
 1034974:	je     0x1034aa3
 103497a:	test   rsi,rsi
 103497d:	je     0x1034aa3
 1034983:	test   rdi,rdi
 1034986:	je     0x1034aa3
 103498c:	mov    QWORD PTR [rsp+0x28],0xffffffffffffffff
 1034995:	xor    edx,edx
 1034997:	lea    ecx,[rdx+0x2]
 103499a:	call   rdi
 103499c:	mov    rdi,rax
 103499f:	mov    QWORD PTR [rsp+0x28],rax
 10349a4:	cmp    rax,0xffffffffffffffff
 10349a8:	je     0x1034a8b
 10349ae:	mov    DWORD PTR [rsp+0x50],0x238
 10349b6:	lea    rdx,[rsp+0x50]
 10349bb:	mov    rcx,rax
 10349be:	call   rsi
 10349c0:	test   eax,eax
 10349c2:	je     0x1034a8b
 10349c8:	nop    DWORD PTR [rax+rax*1+0x0]
 10349d0:	mov    rax,QWORD PTR [rbp+0x8]
 10349d4:	mov    r8d,DWORD PTR [rsp+0x58]
 10349d9:	test   rax,rax
 10349dc:	je     0x1034a09
 10349de:	xchg   ax,ax
 10349e0:	lea    rdx,[rax+0x10]
 10349e4:	test   rdx,rdx
 10349e7:	je     0x1034a83
 10349ed:	mov    ecx,r13d
 10349f0:	cmp    DWORD PTR [rdx],r8d
 10349f3:	sete   cl
 10349f6:	test   ecx,ecx
 10349f8:	jne    0x1034a04
 10349fa:	mov    rax,QWORD PTR [rax]
 10349fd:	test   rax,rax
 1034a00:	jne    0x10349e0
 1034a02:	jmp    0x1034a09
 1034a04:	test   rax,rax
 1034a07:	jne    0x1034a6f
 1034a09:	cmp    r15d,DWORD PTR [rsp+0x70]
 1034a0e:	jne    0x1034a6f
 1034a10:	mov    DWORD PTR [rsp+0x40],r8d
 1034a15:	xor    edx,edx
 1034a17:	mov    ecx,0x1f0fff
 1034a1c:	call   QWORD PTR [rip+0xfffffffffffcca36]        # 0x1001458
 1034a22:	mov    QWORD PTR [rsp+0x30],rax
 1034a27:	cmp    rax,0xffffffffffffffff
 1034a2b:	je     0x1034a6f
 1034a2d:	test   rax,rax
 1034a30:	je     0x1034a6f
 1034a32:	mov    DWORD PTR [rsp+0x44],r13d
 1034a37:	mov    QWORD PTR [rsp+0x38],0xffffffffffffffff
 1034a40:	xor    r8d,r8d
 1034a43:	mov    rdx,rbp
 1034a46:	lea    rcx,[rsp+0x30]
 1034a4b:	call   0x10345a0
 1034a50:	mov    rcx,QWORD PTR [rsp+0x30]
 1034a55:	cmp    rcx,0xffffffffffffffff
 1034a59:	je     0x1034a66
 1034a5b:	test   rcx,rcx
 1034a5e:	je     0x1034a66
 1034a60:	call   QWORD PTR [rip+0xfffffffffffcca72]        # 0x10014d8
 1034a66:	mov    QWORD PTR [rsp+0x30],0xffffffffffffffff
 1034a6f:	lea    rdx,[rsp+0x50]
 1034a74:	mov    rcx,rdi
 1034a77:	call   r12
 1034a7a:	test   eax,eax
 1034a7c:	je     0x1034a89
 1034a7e:	jmp    0x10349d0
 1034a83:	call   0x103f972
 1034a88:	int3   
 1034a89:	mov    bl,0x1
 1034a8b:	cmp    rdi,0xffffffffffffffff
 1034a8f:	je     0x1034aa3
 1034a91:	mov    rcx,rdi
 1034a94:	call   QWORD PTR [rip+0xfffffffffffcca3e]        # 0x10014d8
 1034a9a:	mov    QWORD PTR [rsp+0x28],0xffffffffffffffff
 1034aa3:	test   r14,r14
 1034aa6:	je     0x1034ab6
 1034aa8:	mov    rcx,r14
 1034aab:	call   QWORD PTR [rip+0xfffffffffffcc7e7]        # 0x1001298
 1034ab1:	mov    QWORD PTR [rsp+0x20],r13
 1034ab6:	movzx  eax,bl
 1034ab9:	mov    rcx,QWORD PTR [rsp+0x290]
 1034ac1:	xor    rcx,rsp
 1034ac4:	call   0x103ff40
 1034ac9:	lea    r11,[rsp+0x2a0]
 1034ad1:	mov    rbx,QWORD PTR [r11+0x30]
 1034ad5:	mov    rbp,QWORD PTR [r11+0x40]
 1034ad9:	mov    rsi,QWORD PTR [r11+0x48]
 1034add:	mov    rsp,r11
 1034ae0:	pop    r15
 1034ae2:	pop    r14
 1034ae4:	pop    r13
 1034ae6:	pop    r12
 1034ae8:	pop    rdi
 1034ae9:	ret    
 1034aea:	int3   
 1034aeb:	int3   
 1034aec:	int3   
 1034aed:	int3   
 1034aee:	int3   
 1034aef:	int3   
 1034af0:	mov    QWORD PTR [rsp+0x8],rbx
 1034af5:	push   rdi
 1034af6:	sub    rsp,0x40
 1034afa:	mov    ebx,edx
 1034afc:	lea    rdx,[rsp+0x58]
 1034b01:	mov    rdi,rcx
 1034b04:	call   QWORD PTR [rip+0xfffffffffffccda6]        # 0x10018b0
 1034b0a:	cmp    DWORD PTR [rsp+0x58],ebx
 1034b0e:	jne    0x1034ba7
 1034b14:	xor    r9d,r9d
 1034b17:	lea    rax,[rsp+0x68]
 1034b1c:	xor    r8d,r8d
 1034b1f:	mov    QWORD PTR [rsp+0x30],rax
 1034b24:	lea    edx,[r9+0x10]
 1034b28:	mov    rcx,rdi
 1034b2b:	mov    DWORD PTR [rsp+0x28],0x1388
 1034b33:	mov    DWORD PTR [rsp+0x20],0x2
 1034b3b:	call   QWORD PTR [rip+0xfffffffffffccd77]        # 0x10018b8
 1034b41:	test   rax,rax
 1034b44:	jne    0x1034b9a
 1034b46:	mov    r8d,DWORD PTR [rsp+0x58]
 1034b4b:	xor    edx,edx
 1034b4d:	mov    ecx,0x401
 1034b52:	call   QWORD PTR [rip+0xfffffffffffcc900]        # 0x1001458
 1034b58:	mov    rbx,rax
 1034b5b:	cmp    rax,0xffffffffffffffff
 1034b5f:	je     0x1034b9a
 1034b61:	test   rax,rax
 1034b64:	je     0x1034b9a
 1034b66:	lea    rdx,[rsp+0x60]
 1034b6b:	mov    rcx,rax
 1034b6e:	mov    DWORD PTR [rsp+0x60],0x0
 1034b76:	call   QWORD PTR [rip+0xfffffffffffcc744]        # 0x10012c0
 1034b7c:	cmp    DWORD PTR [rsp+0x60],0x103
 1034b84:	jne    0x1034b91
 1034b86:	xor    edx,edx
 1034b88:	mov    rcx,rbx
 1034b8b:	call   QWORD PTR [rip+0xfffffffffffcc8cf]        # 0x1001460
 1034b91:	mov    rcx,rbx
 1034b94:	call   QWORD PTR [rip+0xfffffffffffcc93e]        # 0x10014d8
 1034b9a:	xor    eax,eax
 1034b9c:	mov    rbx,QWORD PTR [rsp+0x50]
 1034ba1:	add    rsp,0x40
 1034ba5:	pop    rdi
 1034ba6:	ret    
 1034ba7:	mov    eax,0x1
 1034bac:	mov    rbx,QWORD PTR [rsp+0x50]
 1034bb1:	add    rsp,0x40
 1034bb5:	pop    rdi
 1034bb6:	ret    
 1034bb7:	int3   
 1034bb8:	int3   
 1034bb9:	int3   
 1034bba:	int3   
 1034bbb:	int3   
 1034bbc:	int3   
 1034bbd:	int3   
 1034bbe:	int3   
 1034bbf:	int3   
 1034bc0:	rex push rbx
 1034bc2:	sub    rsp,0x150
 1034bc9:	mov    rax,QWORD PTR [rip+0x2eca0]        # 0x1063870
 1034bd0:	xor    rax,rsp
 1034bd3:	mov    QWORD PTR [rsp+0x140],rax
 1034bdb:	mov    ebx,ecx
 1034bdd:	lea    rcx,[rsp+0x20]
 1034be2:	mov    DWORD PTR [rsp+0x20],0x114
 1034bea:	call   QWORD PTR [rip+0xfffffffffffcc830]        # 0x1001420
 1034bf0:	test   eax,eax
 1034bf2:	je     0x1034c14
 1034bf4:	cmp    DWORD PTR [rsp+0x30],0x2
 1034bf9:	jne    0x1034c0d
 1034bfb:	cmp    DWORD PTR [rsp+0x24],0x4
 1034c00:	jne    0x1034c0d
 1034c02:	xor    edx,edx
 1034c04:	mov    ecx,ebx
 1034c06:	call   0x1034c40
 1034c0b:	jmp    0x1034c14
 1034c0d:	mov    ecx,ebx
 1034c0f:	call   0x1034d40
 1034c14:	mov    rcx,QWORD PTR [rsp+0x140]
 1034c1c:	xor    rcx,rsp
 1034c1f:	call   0x103ff40
 1034c24:	add    rsp,0x150
 1034c2b:	pop    rbx
 1034c2c:	ret    
 1034c2d:	int3   
 1034c2e:	int3   
 1034c2f:	int3   
 1034c30:	int3   
 1034c31:	int3   
 1034c32:	int3   
 1034c33:	int3   
 1034c34:	int3   
 1034c35:	int3   
 1034c36:	int3   
 1034c37:	int3   
 1034c38:	int3   
 1034c39:	int3   
 1034c3a:	int3   
 1034c3b:	int3   
 1034c3c:	int3   
 1034c3d:	int3   
 1034c3e:	int3   
 1034c3f:	int3   
 1034c40:	mov    rax,rsp
 1034c43:	push   rbp
 1034c44:	push   rsi
 1034c45:	push   rdi
 1034c46:	sub    rsp,0x60
 1034c4a:	mov    QWORD PTR [rax-0x48],0xfffffffffffffffe
 1034c52:	mov    QWORD PTR [rax+0x8],rbx
 1034c56:	mov    rdi,rdx
 1034c59:	mov    ebp,ecx
 1034c5b:	xor    esi,esi
 1034c5d:	xor    ebx,ebx
 1034c5f:	mov    QWORD PTR [rax+0x18],rbx
 1034c63:	test   rdx,rdx
 1034c66:	jne    0x1034ca2
 1034c68:	lea    rcx,[rip+0xfffffffffffd2531]        # 0x10071a0
 1034c6f:	call   QWORD PTR [rip+0xfffffffffffcc753]        # 0x10013c8
 1034c75:	mov    rbx,rax
 1034c78:	mov    QWORD PTR [rsp+0x90],rax
 1034c80:	test   rax,rax
 1034c83:	jne    0x1034c8a
 1034c85:	jmp    0x1034d22
 1034c8a:	lea    rdx,[rip+0xfffffffffffd2527]        # 0x10071b8
 1034c91:	mov    rcx,rax
 1034c94:	call   QWORD PTR [rip+0xfffffffffffcc8ee]        # 0x1001588
 1034c9a:	mov    rdi,rax
 1034c9d:	test   rax,rax
 1034ca0:	je     0x1034d06
 1034ca2:	mov    r8d,ebp
 1034ca5:	xor    edx,edx
 1034ca7:	mov    ecx,0x400
 1034cac:	call   QWORD PTR [rip+0xfffffffffffcc7a6]        # 0x1001458
 1034cb2:	mov    rbp,rax
 1034cb5:	test   rax,rax
 1034cb8:	je     0x1034d06
 1034cba:	xor    eax,eax
 1034cbc:	mov    QWORD PTR [rsp+0x38],rax
 1034cc1:	mov    QWORD PTR [rsp+0x40],rax
 1034cc6:	mov    QWORD PTR [rsp+0x48],rax
 1034ccb:	mov    QWORD PTR [rsp+0x50],rax
 1034cd0:	mov    QWORD PTR [rsp+0x58],rax
 1034cd5:	lea    rax,[rsp+0x88]
 1034cdd:	mov    QWORD PTR [rsp+0x20],rax
 1034ce2:	mov    r9d,0x28
 1034ce8:	lea    r8,[rsp+0x38]
 1034ced:	xor    edx,edx
 1034cef:	mov    rcx,rbp
 1034cf2:	call   rdi
 1034cf4:	mov    edi,eax
 1034cf6:	mov    rcx,rbp
 1034cf9:	call   QWORD PTR [rip+0xfffffffffffcc7d9]        # 0x10014d8
 1034cff:	test   edi,edi
 1034d01:	cmovns esi,DWORD PTR [rsp+0x58]
 1034d06:	test   rbx,rbx
 1034d09:	je     0x1034d20
 1034d0b:	mov    rcx,rbx
 1034d0e:	call   QWORD PTR [rip+0xfffffffffffcc584]        # 0x1001298
 1034d14:	mov    QWORD PTR [rsp+0x90],0x0
 1034d20:	mov    eax,esi
 1034d22:	mov    rbx,QWORD PTR [rsp+0x80]
 1034d2a:	add    rsp,0x60
 1034d2e:	pop    rdi
 1034d2f:	pop    rsi
 1034d30:	pop    rbp
 1034d31:	ret    
 1034d32:	int3   
 1034d33:	int3   
 1034d34:	int3   
 1034d35:	int3   
 1034d36:	int3   
 1034d37:	int3   
 1034d38:	int3   
 1034d39:	int3   
 1034d3a:	int3   
 1034d3b:	int3   
 1034d3c:	int3   
 1034d3d:	int3   
 1034d3e:	int3   
 1034d3f:	int3   
 1034d40:	mov    rax,rsp
 1034d43:	push   r12
 1034d45:	push   r14
 1034d47:	push   r15
 1034d49:	sub    rsp,0x290
 1034d50:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
 1034d59:	mov    QWORD PTR [rax+0x8],rbx
 1034d5d:	mov    QWORD PTR [rax+0x10],rbp
 1034d61:	mov    QWORD PTR [rax+0x18],rsi
 1034d65:	mov    QWORD PTR [rax+0x20],rdi
 1034d69:	mov    rax,QWORD PTR [rip+0x2eb00]        # 0x1063870
 1034d70:	xor    rax,rsp
 1034d73:	mov    QWORD PTR [rsp+0x280],rax
 1034d7b:	mov    esi,ecx
 1034d7d:	xor    r12d,r12d
 1034d80:	mov    QWORD PTR [rsp+0x20],r12
 1034d85:	mov    r15d,r12d
 1034d88:	lea    rcx,[rip+0xfffffffffffd2449]        # 0x10071d8
 1034d8f:	call   QWORD PTR [rip+0xfffffffffffcc633]        # 0x10013c8
 1034d95:	mov    rbx,rax
 1034d98:	mov    QWORD PTR [rsp+0x20],rax
 1034d9d:	test   rax,rax
 1034da0:	jne    0x1034da7
 1034da2:	jmp    0x1034e70
 1034da7:	lea    rdx,[rip+0xfffffffffffd244a]        # 0x10071f8
 1034dae:	mov    rcx,rax
 1034db1:	call   QWORD PTR [rip+0xfffffffffffcc7d1]        # 0x1001588
 1034db7:	mov    rdi,rax
 1034dba:	lea    rdx,[rip+0xfffffffffffd2457]        # 0x1007218
 1034dc1:	mov    rcx,rbx
 1034dc4:	call   QWORD PTR [rip+0xfffffffffffcc7be]        # 0x1001588
 1034dca:	mov    r14,rax
 1034dcd:	lea    rdx,[rip+0xfffffffffffd2454]        # 0x1007228
 1034dd4:	mov    rcx,rbx
 1034dd7:	call   QWORD PTR [rip+0xfffffffffffcc7ab]        # 0x1001588
 1034ddd:	mov    rbp,rax
 1034de0:	test   rax,rax
 1034de3:	je     0x1034e62
 1034de5:	test   r14,r14
 1034de8:	je     0x1034e62
 1034dea:	test   rdi,rdi
 1034ded:	je     0x1034e62
 1034def:	mov    QWORD PTR [rsp+0x28],0xffffffffffffffff
 1034df8:	xor    edx,edx
 1034dfa:	lea    ecx,[rdx+0x2]
 1034dfd:	call   rdi
 1034dff:	mov    rdi,rax
 1034e02:	mov    QWORD PTR [rsp+0x28],rax
 1034e07:	cmp    rax,0xffffffffffffffff
 1034e0b:	je     0x1034e60
 1034e0d:	mov    DWORD PTR [rsp+0x40],0x238
 1034e15:	lea    rdx,[rsp+0x40]
 1034e1a:	mov    rcx,rax
 1034e1d:	call   r14
 1034e20:	test   eax,eax
 1034e22:	je     0x1034e3b
 1034e24:	cmp    esi,DWORD PTR [rsp+0x48]
 1034e28:	je     0x1034e36
 1034e2a:	lea    rdx,[rsp+0x40]
 1034e2f:	mov    rcx,rdi
 1034e32:	call   rbp
 1034e34:	jmp    0x1034e20
 1034e36:	mov    r15d,DWORD PTR [rsp+0x60]
 1034e3b:	mov    rcx,rdi
 1034e3e:	call   QWORD PTR [rip+0xfffffffffffcc694]        # 0x10014d8
 1034e44:	mov    QWORD PTR [rsp+0x28],0xffffffffffffffff
 1034e4d:	mov    rcx,rbx
 1034e50:	call   QWORD PTR [rip+0xfffffffffffcc442]        # 0x1001298
 1034e56:	mov    QWORD PTR [rsp+0x20],r12
 1034e5b:	mov    eax,r15d
 1034e5e:	jmp    0x1034e72
 1034e60:	jmp    0x1034e62
 1034e62:	mov    rcx,rbx
 1034e65:	call   QWORD PTR [rip+0xfffffffffffcc42d]        # 0x1001298
 1034e6b:	mov    QWORD PTR [rsp+0x20],r12
 1034e70:	xor    eax,eax
 1034e72:	mov    rcx,QWORD PTR [rsp+0x280]
 1034e7a:	xor    rcx,rsp
 1034e7d:	call   0x103ff40
 1034e82:	lea    r11,[rsp+0x290]
 1034e8a:	mov    rbx,QWORD PTR [r11+0x20]
 1034e8e:	mov    rbp,QWORD PTR [r11+0x28]
 1034e92:	mov    rsi,QWORD PTR [r11+0x30]
 1034e96:	mov    rdi,QWORD PTR [r11+0x38]
 1034e9a:	mov    rsp,r11
 1034e9d:	pop    r15
 1034e9f:	pop    r14
 1034ea1:	pop    r12
 1034ea3:	ret    
 1034ea4:	int3   
 1034ea5:	int3   
 1034ea6:	int3   
 1034ea7:	int3   
 1034ea8:	int3   
 1034ea9:	int3   
 1034eaa:	int3   
 1034eab:	int3   
 1034eac:	int3   
 1034ead:	int3   
 1034eae:	int3   
 1034eaf:	int3   
 1034eb0:	rex push rbx
 1034eb2:	sub    rsp,0x150
 1034eb9:	mov    rax,QWORD PTR [rip+0x2e9b0]        # 0x1063870
 1034ec0:	xor    rax,rsp
 1034ec3:	mov    QWORD PTR [rsp+0x140],rax
 1034ecb:	mov    rbx,rcx
 1034ece:	lea    rcx,[rsp+0x20]
 1034ed3:	mov    DWORD PTR [rsp+0x20],0x114
 1034edb:	call   QWORD PTR [rip+0xfffffffffffcc53f]        # 0x1001420
 1034ee1:	test   eax,eax
 1034ee3:	je     0x1034f05
 1034ee5:	cmp    DWORD PTR [rsp+0x30],0x2
 1034eea:	jne    0x1034efd
 1034eec:	cmp    DWORD PTR [rsp+0x24],0x4
 1034ef1:	jne    0x1034efd
 1034ef3:	mov    rcx,rbx
 1034ef6:	call   0x1034f30
 1034efb:	jmp    0x1034f05
 1034efd:	mov    rcx,rbx
 1034f00:	call   0x1035070
 1034f05:	mov    rcx,QWORD PTR [rsp+0x140]
 1034f0d:	xor    rcx,rsp
 1034f10:	call   0x103ff40
 1034f15:	add    rsp,0x150
 1034f1c:	pop    rbx
 1034f1d:	ret    
 1034f1e:	int3   
 1034f1f:	int3   
 1034f20:	int3   
 1034f21:	int3   
 1034f22:	int3   
 1034f23:	int3   
 1034f24:	int3   
 1034f25:	int3   
 1034f26:	int3   
 1034f27:	int3   
 1034f28:	int3   
 1034f29:	int3   
 1034f2a:	int3   
 1034f2b:	int3   
 1034f2c:	int3   
 1034f2d:	int3   
 1034f2e:	int3   
 1034f2f:	int3   
 1034f30:	rex push rdi
 1034f32:	mov    eax,0x2050
 1034f37:	call   0x1040290
 1034f3c:	sub    rsp,rax
 1034f3f:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
 1034f48:	mov    QWORD PTR [rsp+0x2068],rbx
 1034f50:	mov    QWORD PTR [rsp+0x2070],rbp
 1034f58:	mov    QWORD PTR [rsp+0x2078],rsi
 1034f60:	mov    rax,QWORD PTR [rip+0x2e909]        # 0x1063870
 1034f67:	xor    rax,rsp
 1034f6a:	mov    QWORD PTR [rsp+0x2040],rax
 1034f72:	mov    rdi,rcx
 1034f75:	xor    bl,bl
 1034f77:	mov    QWORD PTR [rsp+0x28],0x0
 1034f80:	lea    rcx,[rip+0xfffffffffffd2219]        # 0x10071a0
 1034f87:	call   QWORD PTR [rip+0xfffffffffffcc43b]        # 0x10013c8
 1034f8d:	mov    rbp,rax
 1034f90:	mov    QWORD PTR [rsp+0x28],rax
 1034f95:	test   rax,rax
 1034f98:	je     0x103501e
 1034f9e:	lea    rdx,[rip+0xfffffffffffd2213]        # 0x10071b8
 1034fa5:	mov    rcx,rax
 1034fa8:	call   QWORD PTR [rip+0xfffffffffffcc5da]        # 0x1001588
 1034fae:	test   rax,rax
 1034fb1:	je     0x103501e
 1034fb3:	lea    r8,[rsp+0x20]
 1034fb8:	mov    edx,0x2000
 1034fbd:	lea    rcx,[rsp+0x40]
 1034fc2:	call   0x1040762
 1034fc7:	test   eax,eax
 1034fc9:	je     0x103501e
 1034fcb:	mov    eax,DWORD PTR [rsp+0x20]
 1034fcf:	shr    eax,0x2
 1034fd2:	test   eax,eax
 1034fd4:	je     0x103501c
 1034fd6:	lea    rbx,[rsp+0x40]
 1034fdb:	mov    esi,eax
 1034fdd:	nop    DWORD PTR [rax]
 1034fe0:	cmp    DWORD PTR [rbx],0x0
 1034fe3:	je     0x1035013
 1034fe5:	xor    r8d,r8d
 1034fe8:	mov    rdx,QWORD PTR [rdi+0x10]
 1034fec:	mov    rcx,rdi
 1034fef:	call   0x102bcf0
 1034ff4:	mov    r11,rax
 1034ff7:	mov    eax,DWORD PTR [rbx]
 1034ff9:	mov    DWORD PTR [r11+0x10],eax
 1034ffd:	mov    rax,QWORD PTR [rdi+0x10]
 1035001:	test   rax,rax
 1035004:	je     0x103500b
 1035006:	mov    QWORD PTR [rax],r11
 1035009:	jmp    0x103500f
 103500b:	mov    QWORD PTR [rdi+0x8],r11
 103500f:	mov    QWORD PTR [rdi+0x10],r11
 1035013:	add    rbx,0x4
 1035017:	dec    rsi
 103501a:	jne    0x1034fe0
 103501c:	mov    bl,0x1
 103501e:	test   rbp,rbp
 1035021:	je     0x1035035
 1035023:	mov    rcx,rbp
 1035026:	call   QWORD PTR [rip+0xfffffffffffcc26c]        # 0x1001298
 103502c:	mov    QWORD PTR [rsp+0x28],0x0
 1035035:	movzx  eax,bl
 1035038:	mov    rcx,QWORD PTR [rsp+0x2040]
 1035040:	xor    rcx,rsp
 1035043:	call   0x103ff40
 1035048:	lea    r11,[rsp+0x2050]
 1035050:	mov    rbx,QWORD PTR [r11+0x18]
 1035054:	mov    rbp,QWORD PTR [r11+0x20]
 1035058:	mov    rsi,QWORD PTR [r11+0x28]
 103505c:	mov    rsp,r11
 103505f:	pop    rdi
 1035060:	ret    
 1035061:	int3   
 1035062:	int3   
 1035063:	int3   
 1035064:	int3   
 1035065:	int3   
 1035066:	int3   
 1035067:	int3   
 1035068:	int3   
 1035069:	int3   
 103506a:	int3   
 103506b:	int3   
 103506c:	int3   
 103506d:	int3   
 103506e:	int3   
 103506f:	int3   
 1035070:	mov    rax,rsp
 1035073:	push   rdi
 1035074:	push   r14
 1035076:	push   r15
 1035078:	sub    rsp,0x290
 103507f:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
 1035088:	mov    QWORD PTR [rax+0x10],rbx
 103508c:	mov    QWORD PTR [rax+0x18],rbp
 1035090:	mov    QWORD PTR [rax+0x20],rsi
 1035094:	mov    rax,QWORD PTR [rip+0x2e7d5]        # 0x1063870
 103509b:	xor    rax,rsp
 103509e:	mov    QWORD PTR [rsp+0x280],rax
 10350a6:	mov    rbx,rcx
 10350a9:	mov    QWORD PTR [rsp+0x20],0x0
 10350b2:	xor    sil,sil
 10350b5:	lea    rcx,[rip+0xfffffffffffd211c]        # 0x10071d8
 10350bc:	call   QWORD PTR [rip+0xfffffffffffcc306]        # 0x10013c8
 10350c2:	mov    rbp,rax
 10350c5:	mov    QWORD PTR [rsp+0x20],rax
 10350ca:	test   rax,rax
 10350cd:	je     0x10351ba
 10350d3:	lea    rdx,[rip+0xfffffffffffd211e]        # 0x10071f8
 10350da:	mov    rcx,rax
 10350dd:	call   QWORD PTR [rip+0xfffffffffffcc4a5]        # 0x1001588
 10350e3:	mov    rdi,rax
 10350e6:	lea    rdx,[rip+0xfffffffffffd212b]        # 0x1007218
 10350ed:	mov    rcx,rbp
 10350f0:	call   QWORD PTR [rip+0xfffffffffffcc492]        # 0x1001588
 10350f6:	mov    r14,rax
 10350f9:	lea    rdx,[rip+0xfffffffffffd2128]        # 0x1007228
 1035100:	mov    rcx,rbp
 1035103:	call   QWORD PTR [rip+0xfffffffffffcc47f]        # 0x1001588
 1035109:	mov    r15,rax
 103510c:	test   rax,rax
 103510f:	je     0x10351ba
 1035115:	test   r14,r14
 1035118:	je     0x10351ba
 103511e:	test   rdi,rdi
 1035121:	je     0x10351ba
 1035127:	mov    QWORD PTR [rsp+0x28],0xffffffffffffffff
 1035130:	xor    edx,edx
 1035132:	lea    ecx,[rdx+0x2]
 1035135:	call   rdi
 1035137:	mov    rdi,rax
 103513a:	mov    QWORD PTR [rsp+0x28],rax
 103513f:	cmp    rax,0xffffffffffffffff
 1035143:	je     0x10351a2
 1035145:	mov    DWORD PTR [rsp+0x40],0x238
 103514d:	lea    rdx,[rsp+0x40]
 1035152:	mov    rcx,rax
 1035155:	call   r14
 1035158:	test   eax,eax
 103515a:	je     0x10351a2
 103515c:	nop    DWORD PTR [rax+0x0]
 1035160:	xor    r8d,r8d
 1035163:	mov    rdx,QWORD PTR [rbx+0x10]
 1035167:	mov    rcx,rbx
 103516a:	call   0x102bcf0
 103516f:	mov    r11,rax
 1035172:	mov    eax,DWORD PTR [rsp+0x48]
 1035176:	mov    DWORD PTR [r11+0x10],eax
 103517a:	mov    rax,QWORD PTR [rbx+0x10]
 103517e:	test   rax,rax
 1035181:	je     0x1035188
 1035183:	mov    QWORD PTR [rax],r11
 1035186:	jmp    0x103518c
 1035188:	mov    QWORD PTR [rbx+0x8],r11
 103518c:	mov    QWORD PTR [rbx+0x10],r11
 1035190:	lea    rdx,[rsp+0x40]
 1035195:	mov    rcx,rdi
 1035198:	call   r15
 103519b:	test   eax,eax
 103519d:	jne    0x1035160
 103519f:	mov    sil,0x1
 10351a2:	cmp    rdi,0xffffffffffffffff
 10351a6:	je     0x10351ba
 10351a8:	mov    rcx,rdi
 10351ab:	call   QWORD PTR [rip+0xfffffffffffcc327]        # 0x10014d8
 10351b1:	mov    QWORD PTR [rsp+0x28],0xffffffffffffffff
 10351ba:	test   rbp,rbp
 10351bd:	je     0x10351d1
 10351bf:	mov    rcx,rbp
 10351c2:	call   QWORD PTR [rip+0xfffffffffffcc0d0]        # 0x1001298
 10351c8:	mov    QWORD PTR [rsp+0x20],0x0
 10351d1:	movzx  eax,sil
 10351d5:	mov    rcx,QWORD PTR [rsp+0x280]
 10351dd:	xor    rcx,rsp
 10351e0:	call   0x103ff40
 10351e5:	lea    r11,[rsp+0x290]
 10351ed:	mov    rbx,QWORD PTR [r11+0x28]
 10351f1:	mov    rbp,QWORD PTR [r11+0x30]
 10351f5:	mov    rsi,QWORD PTR [r11+0x38]
 10351f9:	mov    rsp,r11
 10351fc:	pop    r15
 10351fe:	pop    r14
 1035200:	pop    rdi
 1035201:	ret    
 1035202:	int3   
 1035203:	int3   
 1035204:	int3   
 1035205:	int3   
 1035206:	int3   
 1035207:	int3   
 1035208:	int3   
 1035209:	int3   
 103520a:	int3   
 103520b:	int3   
 103520c:	int3   
 103520d:	int3   
 103520e:	int3   
 103520f:	int3   
 1035210:	rex push rbp
 1035212:	push   rsi
 1035213:	push   rdi
 1035214:	push   r14
 1035216:	push   r15
 1035218:	mov    rbp,rsp
 103521b:	sub    rsp,0x70
 103521f:	mov    QWORD PTR [rbp-0x48],0xfffffffffffffffe
 1035227:	mov    QWORD PTR [rsp+0xb0],rbx
 103522f:	mov    rax,QWORD PTR [rip+0x2e63a]        # 0x1063870
 1035236:	xor    rax,rsp
 1035239:	mov    QWORD PTR [rbp-0x8],rax
 103523d:	mov    rsi,rcx
 1035240:	mov    QWORD PTR [rbp-0x40],rcx
 1035244:	mov    DWORD PTR [rbp-0x50],0x0
 103524b:	call   QWORD PTR [rip+0xfffffffffffcc85f]        # 0x1001ab0
 1035251:	mov    DWORD PTR [rbp-0x50],0x1
 1035258:	mov    eax,0xa
 103525d:	mov    WORD PTR [rbp-0x38],ax
 1035261:	mov    eax,DWORD PTR [rip+0xfffffffffffce019]        # 0x1003280
 1035267:	mov    DWORD PTR [rbp-0x36],eax
 103526a:	movzx  eax,WORD PTR [rip+0xfffffffffffce013]        # 0x1003284
 1035271:	mov    WORD PTR [rbp-0x32],ax
 1035275:	mov    eax,0xd
 103527a:	mov    WORD PTR [rbp-0x30],ax
 103527e:	mov    eax,DWORD PTR [rip+0xfffffffffffd1ef0]        # 0x1007174
 1035284:	mov    DWORD PTR [rbp-0x2e],eax
 1035287:	movzx  eax,WORD PTR [rip+0xfffffffffffd1eea]        # 0x1007178
 103528e:	mov    WORD PTR [rbp-0x2a],ax
 1035292:	mov    eax,0x9
 1035297:	mov    WORD PTR [rbp-0x28],ax
 103529b:	mov    eax,DWORD PTR [rip+0xfffffffffffd1edb]        # 0x100717c
 10352a1:	mov    DWORD PTR [rbp-0x26],eax
 10352a4:	movzx  eax,WORD PTR [rip+0xfffffffffffd1ed5]        # 0x1007180
 10352ab:	mov    WORD PTR [rbp-0x22],ax
 10352af:	mov    eax,0x8
 10352b4:	mov    WORD PTR [rbp-0x20],ax
 10352b8:	mov    eax,DWORD PTR [rip+0xfffffffffffd1ec6]        # 0x1007184
 10352be:	mov    DWORD PTR [rbp-0x1e],eax
 10352c1:	movzx  eax,WORD PTR [rip+0xfffffffffffd1ec0]        # 0x1007188
 10352c8:	mov    WORD PTR [rbp-0x1a],ax
 10352cc:	mov    eax,0x7
 10352d1:	mov    WORD PTR [rbp-0x18],ax
 10352d5:	mov    eax,DWORD PTR [rip+0xfffffffffffd1eb1]        # 0x100718c
 10352db:	mov    DWORD PTR [rbp-0x16],eax
 10352de:	movzx  eax,WORD PTR [rip+0xfffffffffffd1eab]        # 0x1007190
 10352e5:	mov    WORD PTR [rbp-0x12],ax
 10352e9:	mov    eax,0xb
 10352ee:	mov    WORD PTR [rbp-0x10],ax
 10352f2:	mov    eax,DWORD PTR [rip+0xfffffffffffd1e9c]        # 0x1007194
 10352f8:	mov    DWORD PTR [rbp-0xe],eax
 10352fb:	movzx  eax,WORD PTR [rip+0xfffffffffffd1e96]        # 0x1007198
 1035302:	mov    WORD PTR [rbp-0xa],ax
 1035306:	lea    r14,[rbp-0x38]
 103530a:	lea    rbx,[rbp-0x36]
 103530e:	mov    r15d,0x6
 1035314:	data16 data16 data16 nop WORD PTR [rax+rax*1+0x0]
 1035320:	xor    r8d,r8d
 1035323:	mov    rdx,rbx
 1035326:	mov    rcx,rsi
 1035329:	call   QWORD PTR [rip+0xfffffffffffcc729]        # 0x1001a58
 103532f:	mov    edi,eax
 1035331:	cmp    eax,0xffffffff
 1035334:	je     0x103537f
 1035336:	data16 nop WORD PTR [rax+rax*1+0x0]
 1035340:	or     r8,0xffffffffffffffff
 1035344:	inc    r8
 1035347:	cmp    WORD PTR [rbx+r8*2],0x0
 103534d:	jne    0x1035344
 103534f:	mov    edx,edi
 1035351:	mov    rcx,rsi
 1035354:	call   QWORD PTR [rip+0xfffffffffffcc616]        # 0x1001970
 103535a:	movzx  r8d,WORD PTR [r14]
 103535e:	mov    edx,edi
 1035360:	mov    rcx,rsi
 1035363:	call   QWORD PTR [rip+0xfffffffffffcc60f]        # 0x1001978
 1035369:	xor    r8d,r8d
 103536c:	mov    rdx,rbx
 103536f:	mov    rcx,rsi
 1035372:	call   QWORD PTR [rip+0xfffffffffffcc6e0]        # 0x1001a58
 1035378:	mov    edi,eax
 103537a:	cmp    eax,0xffffffff
 103537d:	jne    0x1035340
 103537f:	add    rbx,0x8
 1035383:	add    r14,0x8
 1035387:	dec    r15
 103538a:	jne    0x1035320
 103538c:	mov    rax,rsi
 103538f:	mov    rcx,QWORD PTR [rbp-0x8]
 1035393:	xor    rcx,rsp
 1035396:	call   0x103ff40
 103539b:	mov    rbx,QWORD PTR [rsp+0xb0]
 10353a3:	add    rsp,0x70
 10353a7:	pop    r15
 10353a9:	pop    r14
 10353ab:	pop    rdi
 10353ac:	pop    rsi
 10353ad:	pop    rbp
 10353ae:	ret    
 10353af:	int3   
 10353b0:	int3   
 10353b1:	int3   
 10353b2:	int3   
 10353b3:	int3   
 10353b4:	int3   
 10353b5:	int3   
 10353b6:	int3   
 10353b7:	int3   
 10353b8:	int3   
 10353b9:	int3   
 10353ba:	int3   
 10353bb:	int3   
 10353bc:	int3   
 10353bd:	int3   
 10353be:	int3   
 10353bf:	int3   
 10353c0:	mov    QWORD PTR [rsp+0x8],rcx
 10353c5:	push   rbp
 10353c6:	push   rsi
 10353c7:	push   rdi
 10353c8:	sub    rsp,0x30
 10353cc:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
 10353d5:	mov    QWORD PTR [rsp+0x58],rbx
 10353da:	mov    rsi,rdx
 10353dd:	mov    rbp,rcx
 10353e0:	xor    edi,edi
 10353e2:	mov    DWORD PTR [rsp+0x20],edi
 10353e6:	or     rbx,0xffffffffffffffff
 10353ea:	nop    WORD PTR [rax+rax*1+0x0]
 10353f0:	inc    rbx
 10353f3:	cmp    WORD PTR [rdx+rbx*2],di
 10353f7:	jne    0x10353f0
 10353f9:	lea    rdx,[rip+0xfffffffffffcca10]        # 0x1001e10
 1035400:	lea    rcx,[rsp+0x60]
 1035405:	call   QWORD PTR [rip+0xfffffffffffcc6a5]        # 0x1001ab0
 103540b:	nop
 103540c:	test   rbx,rbx
 103540f:	je     0x1035427
 1035411:	mov    rcx,rsi
 1035414:	cmp    WORD PTR [rcx],0x20
 1035418:	ja     0x1035427
 103541a:	inc    edi
 103541c:	add    rcx,0x2
 1035420:	mov    eax,edi
 1035422:	cmp    rax,rbx
 1035425:	jb     0x1035414
 1035427:	mov    rdx,rsi
 103542a:	lea    rcx,[rsp+0x60]
 103542f:	call   QWORD PTR [rip+0xfffffffffffcc663]        # 0x1001a98
 1035435:	mov    r8d,edi
 1035438:	lea    rdx,[rsp+0x68]
 103543d:	lea    rcx,[rsp+0x60]
 1035442:	call   QWORD PTR [rip+0xfffffffffffcc4d8]        # 0x1001920
 1035448:	nop
 1035449:	mov    rdx,rax
 103544c:	lea    rcx,[rsp+0x60]
 1035451:	call   QWORD PTR [rip+0xfffffffffffcc649]        # 0x1001aa0
 1035457:	nop
 1035458:	lea    rcx,[rsp+0x68]
 103545d:	call   QWORD PTR [rip+0xfffffffffffcc645]        # 0x1001aa8
 1035463:	lea    rcx,[rsp+0x60]
 1035468:	call   QWORD PTR [rip+0xfffffffffffcc682]        # 0x1001af0
 103546e:	movsxd rcx,eax
 1035471:	test   eax,eax
 1035473:	jne    0x103548f
 1035475:	lea    rdx,[rip+0xfffffffffffcc994]        # 0x1001e10
 103547c:	mov    rcx,rbp
 103547f:	call   QWORD PTR [rip+0xfffffffffffcc62b]        # 0x1001ab0
 1035485:	mov    DWORD PTR [rsp+0x20],0x1
 103548d:	jmp    0x10354f2
 103548f:	mov    rax,rcx
 1035492:	test   ecx,ecx
 1035494:	je     0x10354ae
 1035496:	dec    rax
 1035499:	lea    rax,[rsi+rax*2]
 103549d:	nop    DWORD PTR [rax]
 10354a0:	cmp    WORD PTR [rax],0x20
 10354a4:	ja     0x10354ae
 10354a6:	sub    rax,0x2
 10354aa:	dec    ecx
 10354ac:	jne    0x10354a0
 10354ae:	mov    r8d,ecx
 10354b1:	lea    rdx,[rsp+0x68]
 10354b6:	lea    rcx,[rsp+0x60]
 10354bb:	call   QWORD PTR [rip+0xfffffffffffcc587]        # 0x1001a48
 10354c1:	nop
 10354c2:	mov    rdx,rax
 10354c5:	lea    rcx,[rsp+0x60]
 10354ca:	call   QWORD PTR [rip+0xfffffffffffcc5d0]        # 0x1001aa0
 10354d0:	nop
 10354d1:	lea    rcx,[rsp+0x68]
 10354d6:	call   QWORD PTR [rip+0xfffffffffffcc5cc]        # 0x1001aa8
 10354dc:	lea    rdx,[rsp+0x60]
 10354e1:	mov    rcx,rbp
 10354e4:	call   QWORD PTR [rip+0xfffffffffffcc4ce]        # 0x10019b8
 10354ea:	mov    DWORD PTR [rsp+0x20],0x1
 10354f2:	lea    rcx,[rsp+0x60]
 10354f7:	call   QWORD PTR [rip+0xfffffffffffcc5ab]        # 0x1001aa8
 10354fd:	mov    rax,rbp
 1035500:	mov    rbx,QWORD PTR [rsp+0x58]
 1035505:	add    rsp,0x30
 1035509:	pop    rdi
 103550a:	pop    rsi
 103550b:	pop    rbp
 103550c:	ret    
 103550d:	int3   
 103550e:	int3   
 103550f:	int3   
 1035510:	int3   
 1035511:	int3   
 1035512:	int3   
 1035513:	int3   
 1035514:	int3   
 1035515:	int3   
 1035516:	int3   
 1035517:	int3   
 1035518:	int3   
 1035519:	int3   
 103551a:	int3   
 103551b:	int3   
 103551c:	int3   
 103551d:	int3   
 103551e:	int3   
 103551f:	int3   
 1035520:	mov    QWORD PTR [rsp+0x8],rcx
 1035525:	push   rsi
 1035526:	push   rdi
 1035527:	push   r14
 1035529:	sub    rsp,0x40
 103552d:	mov    QWORD PTR [rsp+0x38],0xfffffffffffffffe
 1035536:	mov    QWORD PTR [rsp+0x68],rbx
 103553b:	mov    QWORD PTR [rsp+0x70],rbp
 1035540:	mov    r14,r9
 1035543:	movzx  ebp,r8w
 1035547:	mov    rdi,rdx
 103554a:	mov    rsi,rcx
 103554d:	mov    DWORD PTR [rsp+0x20],0x0
 1035555:	or     rbx,0xffffffffffffffff
 1035559:	mov    r10,rbx
 103555c:	nop    DWORD PTR [rax+0x0]
 1035560:	inc    r10
 1035563:	cmp    WORD PTR [rdx+r10*2],0x0
 1035569:	jne    0x1035560
 103556b:	mov    eax,DWORD PTR [r9]
 103556e:	cmp    rax,r10
 1035571:	jb     0x103558e
 1035573:	lea    rdx,[rip+0xfffffffffffcc896]        # 0x1001e10
 103557a:	call   QWORD PTR [rip+0xfffffffffffcc530]        # 0x1001ab0
 1035580:	nop
 1035581:	mov    DWORD PTR [rsp+0x20],0x1
 1035589:	jmp    0x103567a
 103558e:	lea    rcx,[rsp+0x28]
 1035593:	call   QWORD PTR [rip+0xfffffffffffcc517]        # 0x1001ab0
 1035599:	nop
 103559a:	lea    rcx,[rsp+0x78]
 103559f:	call   QWORD PTR [rip+0xfffffffffffcc51b]        # 0x1001ac0
 10355a5:	nop
 10355a6:	mov    r8d,DWORD PTR [r14]
 10355a9:	movzx  edx,bp
 10355ac:	lea    rcx,[rsp+0x28]
 10355b1:	call   QWORD PTR [rip+0xfffffffffffcc3a1]        # 0x1001958
 10355b7:	mov    ebp,eax
 10355b9:	mov    r8d,DWORD PTR [r14]
 10355bc:	lea    rdx,[rsp+0x30]
 10355c1:	lea    rcx,[rsp+0x28]
 10355c6:	cmp    eax,0xffffffff
 10355c9:	je     0x103561d
 10355cb:	mov    r9d,eax
 10355ce:	sub    r9d,r8d
 10355d1:	call   QWORD PTR [rip+0xfffffffffffcc341]        # 0x1001918
 10355d7:	nop
 10355d8:	mov    rdx,rax
 10355db:	lea    rcx,[rsp+0x78]
 10355e0:	call   QWORD PTR [rip+0xfffffffffffcc4ba]        # 0x1001aa0
 10355e6:	nop
 10355e7:	lea    rcx,[rsp+0x30]
 10355ec:	call   QWORD PTR [rip+0xfffffffffffcc4b6]        # 0x1001aa8
 10355f2:	lea    r11d,[rbp+0x1]
 10355f6:	mov    DWORD PTR [r14],r11d
 10355f9:	lea    rdx,[rsp+0x78]
 10355fe:	mov    rcx,rsi
 1035601:	call   QWORD PTR [rip+0xfffffffffffcc3b1]        # 0x10019b8
 1035607:	mov    DWORD PTR [rsp+0x20],0x1
 103560f:	lea    rcx,[rsp+0x78]
 1035614:	call   QWORD PTR [rip+0xfffffffffffcc48e]        # 0x1001aa8
 103561a:	nop
 103561b:	jmp    0x103566f
 103561d:	call   QWORD PTR [rip+0xfffffffffffcc2fd]        # 0x1001920
 1035623:	nop
 1035624:	mov    rdx,rax
 1035627:	lea    rcx,[rsp+0x78]
 103562c:	call   QWORD PTR [rip+0xfffffffffffcc46e]        # 0x1001aa0
 1035632:	nop
 1035633:	lea    rcx,[rsp+0x30]
 1035638:	call   QWORD PTR [rip+0xfffffffffffcc46a]        # 0x1001aa8
 103563e:	xchg   ax,ax
 1035640:	inc    rbx
 1035643:	cmp    WORD PTR [rdi+rbx*2],0x0
 1035648:	jne    0x1035640
 103564a:	mov    DWORD PTR [r14],ebx
 103564d:	lea    rdx,[rsp+0x78]
 1035652:	mov    rcx,rsi
 1035655:	call   QWORD PTR [rip+0xfffffffffffcc35d]        # 0x10019b8
 103565b:	mov    DWORD PTR [rsp+0x20],0x1
 1035663:	lea    rcx,[rsp+0x78]
 1035668:	call   QWORD PTR [rip+0xfffffffffffcc43a]        # 0x1001aa8
 103566e:	nop
 103566f:	lea    rcx,[rsp+0x28]
 1035674:	call   QWORD PTR [rip+0xfffffffffffcc42e]        # 0x1001aa8
 103567a:	mov    rax,rsi
 103567d:	mov    rbx,QWORD PTR [rsp+0x68]
 1035682:	mov    rbp,QWORD PTR [rsp+0x70]
 1035687:	add    rsp,0x40
 103568b:	pop    r14
 103568d:	pop    rdi
 103568e:	pop    rsi
 103568f:	ret    
 1035690:	int3   
 1035691:	int3   
 1035692:	int3   
 1035693:	int3   
 1035694:	int3   
 1035695:	int3   
 1035696:	int3   
 1035697:	int3   
 1035698:	int3   
 1035699:	int3   
 103569a:	int3   
 103569b:	int3   
 103569c:	int3   
 103569d:	int3   
 103569e:	int3   
 103569f:	int3   
 10356a0:	rex push rbx
 10356a2:	push   rbp
 10356a3:	push   rsi
 10356a4:	push   rdi
 10356a5:	push   r12
 10356a7:	push   r13
 10356a9:	push   r14
 10356ab:	push   r15
 10356ad:	sub    rsp,0x9c8
 10356b4:	mov    QWORD PTR [rsp+0x80],0xfffffffffffffffe
 10356c0:	mov    rax,QWORD PTR [rip+0x2e1a9]        # 0x1063870
 10356c7:	xor    rax,rsp
 10356ca:	mov    QWORD PTR [rsp+0x9b0],rax
 10356d2:	mov    rbx,r9
 10356d5:	mov    r15,r8
 10356d8:	mov    r14,rdx
 10356db:	mov    r12,rcx
 10356de:	mov    r13d,DWORD PTR [rsp+0xa30]
 10356e6:	xor    edi,edi
 10356e8:	xor    edx,edx
 10356ea:	xor    ecx,ecx
 10356ec:	mov    r8d,0xf003f
 10356f2:	call   QWORD PTR [rip+0xfffffffffffcba08]        # 0x1001100
 10356f8:	mov    rbp,rax
 10356fb:	test   rax,rax
 10356fe:	jne    0x1035712
 1035700:	call   QWORD PTR [rip+0xfffffffffffcbe4a]        # 0x1001550
 1035706:	mov    edi,eax
 1035708:	mov    rsi,QWORD PTR [rsp+0x70]
 103570d:	jmp    0x103588b
 1035712:	test   rbx,rbx
 1035715:	je     0x1035766
 1035717:	or     rax,0xffffffffffffffff
 103571b:	nop    DWORD PTR [rax+rax*1+0x0]
 1035720:	inc    rax
 1035723:	cmp    WORD PTR [rbx+rax*2],di
 1035727:	jne    0x1035720
 1035729:	test   rax,rax
 103572c:	je     0x1035766
 103572e:	xor    sil,sil
 1035731:	mov    DWORD PTR [rsp+0x70],0x400
 1035739:	lea    r8,[rsp+0x70]
 103573e:	lea    rdx,[rsp+0x1b0]
 1035746:	mov    ecx,0x2
 103574b:	call   0x1049204
 1035750:	test   al,al
 1035752:	jne    0x1035769
 1035754:	call   QWORD PTR [rip+0xfffffffffffcbdf6]        # 0x1001550
 103575a:	mov    edi,eax
 103575c:	mov    rsi,QWORD PTR [rsp+0x70]
 1035761:	jmp    0x103588b
 1035766:	mov    sil,0x1
 1035769:	test   sil,sil
 103576c:	cmovne rbx,rdi
 1035770:	lea    rax,[rsp+0x1b0]
 1035778:	cmovne rax,rdi
 103577c:	mov    QWORD PTR [rsp+0x60],rbx
 1035781:	mov    QWORD PTR [rsp+0x58],rax
 1035786:	mov    QWORD PTR [rsp+0x50],rdi
 103578b:	mov    QWORD PTR [rsp+0x48],rdi
 1035790:	mov    QWORD PTR [rsp+0x40],rdi
 1035795:	mov    QWORD PTR [rsp+0x38],r12
 103579a:	mov    DWORD PTR [rsp+0x30],0x1
 10357a2:	mov    DWORD PTR [rsp+0x28],r13d
 10357a7:	mov    DWORD PTR [rsp+0x20],0x10
 10357af:	mov    r9d,0xf01ff
 10357b5:	mov    r8,r14
 10357b8:	mov    rdx,r14
 10357bb:	mov    rcx,rbp
 10357be:	call   QWORD PTR [rip+0xfffffffffffcb924]        # 0x10010e8
 10357c4:	mov    rsi,rax
 10357c7:	test   rax,rax
 10357ca:	jne    0x10357d9
 10357cc:	call   QWORD PTR [rip+0xfffffffffffcbd7e]        # 0x1001550
 10357d2:	mov    edi,eax
 10357d4:	jmp    0x1035899
 10357d9:	mov    DWORD PTR [rsp+0x90],0x114
 10357e4:	lea    rcx,[rsp+0x90]
 10357ec:	call   QWORD PTR [rip+0xfffffffffffcbc2e]        # 0x1001420
 10357f2:	test   eax,eax
 10357f4:	je     0x10358a9
 10357fa:	cmp    DWORD PTR [rsp+0xa0],0x2
 1035802:	jne    0x103588b
 1035808:	cmp    DWORD PTR [rsp+0x94],0x4
 1035810:	jbe    0x103588b
 1035812:	mov    rbx,rdi
 1035815:	mov    QWORD PTR [rsp+0x70],rbx
 103581a:	mov    rcx,rbp
 103581d:	call   QWORD PTR [rip+0xfffffffffffcb8d5]        # 0x10010f8
 1035823:	mov    r14,rax
 1035826:	test   rax,rax
 1035829:	je     0x1035878
 103582b:	mov    QWORD PTR [rsp+0x78],r15
 1035830:	lea    rcx,[rip+0xfffffffffffd1a01]        # 0x1007238
 1035837:	call   QWORD PTR [rip+0xfffffffffffcbb8b]        # 0x10013c8
 103583d:	mov    rbx,rax
 1035840:	mov    QWORD PTR [rsp+0x70],rax
 1035845:	test   rax,rax
 1035848:	je     0x103586e
 103584a:	lea    rdx,[rip+0xfffffffffffd1a07]        # 0x1007258
 1035851:	mov    rcx,rax
 1035854:	call   QWORD PTR [rip+0xfffffffffffcbd2e]        # 0x1001588
 103585a:	test   rax,rax
 103585d:	je     0x103586e
 103585f:	lea    r8,[rsp+0x78]
 1035864:	mov    edx,0x1
 1035869:	mov    rcx,rsi
 103586c:	call   rax
 103586e:	mov    rcx,r14
 1035871:	call   QWORD PTR [rip+0xfffffffffffcb8b1]        # 0x1001128
 1035877:	nop
 1035878:	test   rbx,rbx
 103587b:	je     0x103588b
 103587d:	mov    rcx,rbx
 1035880:	call   QWORD PTR [rip+0xfffffffffffcba12]        # 0x1001298
 1035886:	mov    QWORD PTR [rsp+0x70],rdi
 103588b:	test   rsi,rsi
 103588e:	je     0x1035899
 1035890:	mov    rcx,rsi
 1035893:	call   QWORD PTR [rip+0xfffffffffffcb83f]        # 0x10010d8
 1035899:	test   rbp,rbp
 103589c:	je     0x10358a7
 103589e:	mov    rcx,rbp
 10358a1:	call   QWORD PTR [rip+0xfffffffffffcb831]        # 0x10010d8
 10358a7:	mov    eax,edi
 10358a9:	mov    rcx,QWORD PTR [rsp+0x9b0]
 10358b1:	xor    rcx,rsp
 10358b4:	call   0x103ff40
 10358b9:	add    rsp,0x9c8
 10358c0:	pop    r15
 10358c2:	pop    r14
 10358c4:	pop    r13
 10358c6:	pop    r12
 10358c8:	pop    rdi
 10358c9:	pop    rsi
 10358ca:	pop    rbp
 10358cb:	pop    rbx
 10358cc:	ret    
 10358cd:	int3   
 10358ce:	int3   
 10358cf:	int3   
 10358d0:	int3   
 10358d1:	int3   
 10358d2:	int3   
 10358d3:	int3   
 10358d4:	int3   
 10358d5:	int3   
 10358d6:	int3   
 10358d7:	int3   
 10358d8:	int3   
 10358d9:	int3   
 10358da:	int3   
 10358db:	int3   
 10358dc:	int3   
 10358dd:	int3   
 10358de:	int3   
 10358df:	int3   
 10358e0:	mov    QWORD PTR [rsp+0x8],rbx
 10358e5:	mov    QWORD PTR [rsp+0x18],rsi
 10358ea:	push   rdi
 10358eb:	sub    rsp,0x20
 10358ef:	mov    rdi,rcx
 10358f2:	xor    edx,edx
 10358f4:	mov    r8d,0xf003f
 10358fa:	xor    ecx,ecx
 10358fc:	xor    ebx,ebx
 10358fe:	call   QWORD PTR [rip+0xfffffffffffcb7fc]        # 0x1001100
 1035904:	mov    rsi,rax
 1035907:	test   rax,rax
 103590a:	jne    0x1035919
 103590c:	call   QWORD PTR [rip+0xfffffffffffcbc3e]        # 0x1001550
 1035912:	mov    rdi,QWORD PTR [rsp+0x38]
 1035917:	jmp    0x1035950
 1035919:	mov    r8d,0x10000
 103591f:	mov    rdx,rdi
 1035922:	mov    rcx,rax
 1035925:	call   QWORD PTR [rip+0xfffffffffffcb7dd]        # 0x1001108
 103592b:	mov    rdi,rax
 103592e:	test   rax,rax
 1035931:	jne    0x103593d
 1035933:	call   QWORD PTR [rip+0xfffffffffffcbc17]        # 0x1001550
 1035939:	mov    ebx,eax
 103593b:	jmp    0x1035960
 103593d:	mov    rcx,rax
 1035940:	call   QWORD PTR [rip+0xfffffffffffcb7aa]        # 0x10010f0
 1035946:	test   eax,eax
 1035948:	jne    0x1035952
 103594a:	call   QWORD PTR [rip+0xfffffffffffcbc00]        # 0x1001550
 1035950:	mov    ebx,eax
 1035952:	test   rdi,rdi
 1035955:	je     0x1035960
 1035957:	mov    rcx,rdi
 103595a:	call   QWORD PTR [rip+0xfffffffffffcb778]        # 0x10010d8
 1035960:	test   rsi,rsi
 1035963:	je     0x103596e
 1035965:	mov    rcx,rsi
 1035968:	call   QWORD PTR [rip+0xfffffffffffcb76a]        # 0x10010d8
 103596e:	mov    rsi,QWORD PTR [rsp+0x40]
 1035973:	mov    eax,ebx
 1035975:	mov    rbx,QWORD PTR [rsp+0x30]
 103597a:	add    rsp,0x20
 103597e:	pop    rdi
 103597f:	ret    
 1035980:	int3   
 1035981:	int3   
 1035982:	int3   
 1035983:	int3   
 1035984:	int3   
 1035985:	int3   
 1035986:	int3   
 1035987:	int3   
 1035988:	int3   
 1035989:	int3   
 103598a:	int3   
 103598b:	int3   
 103598c:	int3   
 103598d:	int3   
 103598e:	int3   
 103598f:	int3   
 1035990:	rex push rdi
 1035992:	sub    rsp,0x50
 1035996:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 103599f:	mov    QWORD PTR [rsp+0x60],rbx
 10359a4:	mov    rbx,rcx
 10359a7:	mov    ecx,0xfffffff5
 10359ac:	call   QWORD PTR [rip+0xfffffffffffcb896]        # 0x1001248
 10359b2:	cmp    rax,0xffffffffffffffff
 10359b6:	je     0x10359c1
 10359b8:	test   rax,rax
 10359bb:	je     0x10359c1
 10359bd:	xor    al,al
 10359bf:	jmp    0x1035a3e
 10359c1:	lea    rax,[rip+0xfffffffffffcc448]        # 0x1001e10
 10359c8:	mov    QWORD PTR [rsp+0x28],rax
 10359cd:	mov    QWORD PTR [rsp+0x30],rbx
 10359d2:	xor    eax,eax
 10359d4:	mov    QWORD PTR [rsp+0x38],rax
 10359d9:	mov    QWORD PTR [rsp+0x40],rax
 10359de:	lea    rcx,[rsp+0x28]
 10359e3:	call   QWORD PTR [rip+0xfffffffffffcb72f]        # 0x1001118
 10359e9:	test   eax,eax
 10359eb:	jne    0x1035a3c
 10359ed:	call   QWORD PTR [rip+0xfffffffffffcbb5d]        # 0x1001550
 10359f3:	mov    ebx,eax
 10359f5:	cmp    eax,0x420
 10359fa:	sete   dil
 10359fe:	lea    rcx,[rsp+0x68]
 1035a03:	call   QWORD PTR [rip+0xfffffffffffcc0b7]        # 0x1001ac0
 1035a09:	nop
 1035a0a:	mov    r8d,ebx
 1035a0d:	lea    rdx,[rip+0xfffffffffffd185c]        # 0x1007270
 1035a14:	lea    rcx,[rsp+0x68]
 1035a19:	call   QWORD PTR [rip+0xfffffffffffcc021]        # 0x1001a40
 1035a1f:	lea    rcx,[rsp+0x68]
 1035a24:	call   QWORD PTR [rip+0xfffffffffffcc0be]        # 0x1001ae8
 1035a2a:	nop
 1035a2b:	lea    rcx,[rsp+0x68]
 1035a30:	call   QWORD PTR [rip+0xfffffffffffcc072]        # 0x1001aa8
 1035a36:	movzx  eax,dil
 1035a3a:	jmp    0x1035a3e
 1035a3c:	mov    al,0x1
 1035a3e:	mov    rbx,QWORD PTR [rsp+0x60]
 1035a43:	add    rsp,0x50
 1035a47:	pop    rdi
 1035a48:	ret    
 1035a49:	int3   
 1035a4a:	int3   
 1035a4b:	int3   
 1035a4c:	int3   
 1035a4d:	int3   
 1035a4e:	int3   
 1035a4f:	int3   
 1035a50:	mov    QWORD PTR [rsp+0x8],rbx
 1035a55:	mov    QWORD PTR [rsp+0x18],rsi
 1035a5a:	push   rdi
 1035a5b:	sub    rsp,0x20
 1035a5f:	mov    rdi,rcx
 1035a62:	xor    edx,edx
 1035a64:	mov    r8d,0xf003f
 1035a6a:	xor    ecx,ecx
 1035a6c:	xor    ebx,ebx
 1035a6e:	call   QWORD PTR [rip+0xfffffffffffcb68c]        # 0x1001100
 1035a74:	mov    rsi,rax
 1035a77:	test   rax,rax
 1035a7a:	jne    0x1035a89
 1035a7c:	call   QWORD PTR [rip+0xfffffffffffcbace]        # 0x1001550
 1035a82:	mov    rdi,QWORD PTR [rsp+0x38]
 1035a87:	jmp    0x1035ac5
 1035a89:	mov    r8d,0x10
 1035a8f:	mov    rdx,rdi
 1035a92:	mov    rcx,rax
 1035a95:	call   QWORD PTR [rip+0xfffffffffffcb66d]        # 0x1001108
 1035a9b:	mov    rdi,rax
 1035a9e:	test   rax,rax
 1035aa1:	jne    0x1035aad
 1035aa3:	call   QWORD PTR [rip+0xfffffffffffcbaa7]        # 0x1001550
 1035aa9:	mov    ebx,eax
 1035aab:	jmp    0x1035ad5
 1035aad:	xor    r8d,r8d
 1035ab0:	xor    edx,edx
 1035ab2:	mov    rcx,rax
 1035ab5:	call   QWORD PTR [rip+0xfffffffffffcb665]        # 0x1001120
 1035abb:	test   eax,eax
 1035abd:	jne    0x1035ac7
 1035abf:	call   QWORD PTR [rip+0xfffffffffffcba8b]        # 0x1001550
 1035ac5:	mov    ebx,eax
 1035ac7:	test   rdi,rdi
 1035aca:	je     0x1035ad5
 1035acc:	mov    rcx,rdi
 1035acf:	call   QWORD PTR [rip+0xfffffffffffcb603]        # 0x10010d8
 1035ad5:	test   rsi,rsi
 1035ad8:	je     0x1035ae3
 1035ada:	mov    rcx,rsi
 1035add:	call   QWORD PTR [rip+0xfffffffffffcb5f5]        # 0x10010d8
 1035ae3:	mov    rsi,QWORD PTR [rsp+0x40]
 1035ae8:	mov    eax,ebx
 1035aea:	mov    rbx,QWORD PTR [rsp+0x30]
 1035aef:	add    rsp,0x20
 1035af3:	pop    rdi
 1035af4:	ret    
 1035af5:	int3   
 1035af6:	int3   
 1035af7:	int3   
 1035af8:	int3   
 1035af9:	int3   
 1035afa:	int3   
 1035afb:	int3   
 1035afc:	int3   
 1035afd:	int3   
 1035afe:	int3   
 1035aff:	int3   
 1035b00:	mov    r11,rsp
 1035b03:	push   rbp
 1035b04:	push   rdi
 1035b05:	sub    rsp,0x98
 1035b0c:	mov    rax,QWORD PTR [rip+0x2dd5d]        # 0x1063870
 1035b13:	xor    rax,rsp
 1035b16:	mov    QWORD PTR [rsp+0x80],rax
 1035b1e:	mov    QWORD PTR [r11+0x18],rbx
 1035b22:	mov    QWORD PTR [r11+0x20],rsi
 1035b26:	mov    QWORD PTR [r11-0x18],r14
 1035b2a:	mov    r14,rdx
 1035b2d:	mov    rbx,rcx
 1035b30:	mov    r8d,0xf003f
 1035b36:	xor    edx,edx
 1035b38:	xor    ecx,ecx
 1035b3a:	xor    edi,edi
 1035b3c:	call   QWORD PTR [rip+0xfffffffffffcb5be]        # 0x1001100
 1035b42:	mov    rbp,rax
 1035b45:	test   rax,rax
 1035b48:	jne    0x1035b5a
 1035b4a:	call   QWORD PTR [rip+0xfffffffffffcba00]        # 0x1001550
 1035b50:	mov    rsi,QWORD PTR [rsp+0x30]
 1035b55:	jmp    0x1035c1c
 1035b5a:	mov    r8d,0x44
 1035b60:	mov    rdx,rbx
 1035b63:	mov    rcx,rax
 1035b66:	call   QWORD PTR [rip+0xfffffffffffcb59c]        # 0x1001108
 1035b6c:	mov    rsi,rax
 1035b6f:	test   rax,rax
 1035b72:	jne    0x1035b81
 1035b74:	call   QWORD PTR [rip+0xfffffffffffcb9d6]        # 0x1001550
 1035b7a:	mov    edi,eax
 1035b7c:	jmp    0x1035c2c
 1035b81:	lea    r8,[rsp+0x60]
 1035b86:	mov    edx,0x2
 1035b8b:	mov    rcx,rax
 1035b8e:	call   QWORD PTR [rip+0xfffffffffffcb54c]        # 0x10010e0
 1035b94:	test   eax,eax
 1035b96:	je     0x1035c16
 1035b9c:	mov    ebx,edi
 1035b9e:	xchg   ax,ax
 1035ba0:	lea    rax,[rsp+0x30]
 1035ba5:	lea    r8,[rsp+0x38]
 1035baa:	mov    r9d,0x24
 1035bb0:	xor    edx,edx
 1035bb2:	mov    rcx,rsi
 1035bb5:	mov    QWORD PTR [rsp+0x20],rax
 1035bba:	call   QWORD PTR [rip+0xfffffffffffcb550]        # 0x1001110
 1035bc0:	test   eax,eax
 1035bc2:	je     0x1035c16
 1035bc4:	mov    eax,0xaaaaaaab
 1035bc9:	mul    ebx
 1035bcb:	shr    edx,0x2
 1035bce:	lea    ecx,[rdx+rdx*2]
 1035bd1:	add    ecx,ecx
 1035bd3:	cmp    ebx,ecx
 1035bd5:	jne    0x1035bf4
 1035bd7:	mov    rax,QWORD PTR [r14]
 1035bda:	xor    r9d,r9d
 1035bdd:	xor    r8d,r8d
 1035be0:	mov    edx,0x4000c45e
 1035be5:	mov    rcx,r14
 1035be8:	mov    BYTE PTR [rsp+0x28],0x1
 1035bed:	mov    BYTE PTR [rsp+0x20],0x1
 1035bf2:	call   QWORD PTR [rax]
 1035bf4:	inc    ebx
 1035bf6:	cmp    DWORD PTR [rsp+0x3c],0x1
 1035bfb:	je     0x1035c1e
 1035bfd:	mov    edx,0x1
 1035c02:	mov    ecx,0x1388
 1035c07:	call   QWORD PTR [rip+0xfffffffffffcb8b3]        # 0x10014c0
 1035c0d:	cmp    eax,0xc0
 1035c12:	jne    0x1035ba0
 1035c14:	jmp    0x1035c1e
 1035c16:	call   QWORD PTR [rip+0xfffffffffffcb934]        # 0x1001550
 1035c1c:	mov    edi,eax
 1035c1e:	test   rsi,rsi
 1035c21:	je     0x1035c2c
 1035c23:	mov    rcx,rsi
 1035c26:	call   QWORD PTR [rip+0xfffffffffffcb4ac]        # 0x10010d8
 1035c2c:	mov    r14,QWORD PTR [rsp+0x90]
 1035c34:	mov    rsi,QWORD PTR [rsp+0xc8]
 1035c3c:	mov    rbx,QWORD PTR [rsp+0xc0]
 1035c44:	test   rbp,rbp
 1035c47:	je     0x1035c52
 1035c49:	mov    rcx,rbp
 1035c4c:	call   QWORD PTR [rip+0xfffffffffffcb486]        # 0x10010d8
 1035c52:	mov    eax,edi
 1035c54:	mov    rcx,QWORD PTR [rsp+0x80]
 1035c5c:	xor    rcx,rsp
 1035c5f:	call   0x103ff40
 1035c64:	add    rsp,0x98
 1035c6b:	pop    rdi
 1035c6c:	pop    rbp
 1035c6d:	ret    
 1035c6e:	int3   
 1035c6f:	int3   
 1035c70:	int3   
 1035c71:	int3   
 1035c72:	int3   
 1035c73:	int3   
 1035c74:	int3   
 1035c75:	int3   
 1035c76:	int3   
 1035c77:	int3   
 1035c78:	int3   
 1035c79:	int3   
 1035c7a:	int3   
 1035c7b:	int3   
 1035c7c:	int3   
 1035c7d:	int3   
 1035c7e:	int3   
 1035c7f:	int3   
 1035c80:	mov    r11,rsp
 1035c83:	push   rbp
 1035c84:	push   rdi
 1035c85:	sub    rsp,0x98
 1035c8c:	mov    rax,QWORD PTR [rip+0x2dbdd]        # 0x1063870
 1035c93:	xor    rax,rsp
 1035c96:	mov    QWORD PTR [rsp+0x80],rax
 1035c9e:	mov    QWORD PTR [r11+0x18],rbx
 1035ca2:	mov    QWORD PTR [r11+0x20],rsi
 1035ca6:	mov    QWORD PTR [r11-0x18],r14
 1035caa:	mov    r14,rdx
 1035cad:	mov    rbx,rcx
 1035cb0:	mov    r8d,0xf003f
 1035cb6:	xor    edx,edx
 1035cb8:	xor    ecx,ecx
 1035cba:	xor    edi,edi
 1035cbc:	call   QWORD PTR [rip+0xfffffffffffcb43e]        # 0x1001100
 1035cc2:	mov    rbp,rax
 1035cc5:	test   rax,rax
 1035cc8:	jne    0x1035cda
 1035cca:	call   QWORD PTR [rip+0xfffffffffffcb880]        # 0x1001550
 1035cd0:	mov    rsi,QWORD PTR [rsp+0x30]
 1035cd5:	jmp    0x1035d9c
 1035cda:	mov    r8d,0x24
 1035ce0:	mov    rdx,rbx
 1035ce3:	mov    rcx,rax
 1035ce6:	call   QWORD PTR [rip+0xfffffffffffcb41c]        # 0x1001108
 1035cec:	mov    rsi,rax
 1035cef:	test   rax,rax
 1035cf2:	jne    0x1035d01
 1035cf4:	call   QWORD PTR [rip+0xfffffffffffcb856]        # 0x1001550
 1035cfa:	mov    edi,eax
 1035cfc:	jmp    0x1035dac
 1035d01:	lea    r8,[rsp+0x60]
 1035d06:	mov    edx,0x1
 1035d0b:	mov    rcx,rax
 1035d0e:	call   QWORD PTR [rip+0xfffffffffffcb3cc]        # 0x10010e0
 1035d14:	test   eax,eax
 1035d16:	je     0x1035d96
 1035d1c:	mov    ebx,edi
 1035d1e:	xchg   ax,ax
 1035d20:	lea    rax,[rsp+0x30]
 1035d25:	lea    r8,[rsp+0x38]
 1035d2a:	mov    r9d,0x24
 1035d30:	xor    edx,edx
 1035d32:	mov    rcx,rsi
 1035d35:	mov    QWORD PTR [rsp+0x20],rax
 1035d3a:	call   QWORD PTR [rip+0xfffffffffffcb3d0]        # 0x1001110
 1035d40:	test   eax,eax
 1035d42:	je     0x1035d96
 1035d44:	mov    eax,0xaaaaaaab
 1035d49:	mul    ebx
 1035d4b:	shr    edx,0x2
 1035d4e:	lea    ecx,[rdx+rdx*2]
 1035d51:	add    ecx,ecx
 1035d53:	cmp    ebx,ecx
 1035d55:	jne    0x1035d74
 1035d57:	mov    rax,QWORD PTR [r14]
 1035d5a:	xor    r9d,r9d
 1035d5d:	xor    r8d,r8d
 1035d60:	mov    edx,0x4000c45f
 1035d65:	mov    rcx,r14
 1035d68:	mov    BYTE PTR [rsp+0x28],0x1
 1035d6d:	mov    BYTE PTR [rsp+0x20],0x1
 1035d72:	call   QWORD PTR [rax]
 1035d74:	inc    ebx
 1035d76:	cmp    DWORD PTR [rsp+0x3c],0x1
 1035d7b:	je     0x1035d9e
 1035d7d:	mov    edx,0x1
 1035d82:	mov    ecx,0x1388
 1035d87:	call   QWORD PTR [rip+0xfffffffffffcb733]        # 0x10014c0
 1035d8d:	cmp    eax,0xc0
 1035d92:	jne    0x1035d20
 1035d94:	jmp    0x1035d9e
 1035d96:	call   QWORD PTR [rip+0xfffffffffffcb7b4]        # 0x1001550
 1035d9c:	mov    edi,eax
 1035d9e:	test   rsi,rsi
 1035da1:	je     0x1035dac
 1035da3:	mov    rcx,rsi
 1035da6:	call   QWORD PTR [rip+0xfffffffffffcb32c]        # 0x10010d8
 1035dac:	mov    r14,QWORD PTR [rsp+0x90]
 1035db4:	mov    rsi,QWORD PTR [rsp+0xc8]
 1035dbc:	mov    rbx,QWORD PTR [rsp+0xc0]
 1035dc4:	test   rbp,rbp
 1035dc7:	je     0x1035dd2
 1035dc9:	mov    rcx,rbp
 1035dcc:	call   QWORD PTR [rip+0xfffffffffffcb306]        # 0x10010d8
 1035dd2:	mov    eax,edi
 1035dd4:	mov    rcx,QWORD PTR [rsp+0x80]
 1035ddc:	xor    rcx,rsp
 1035ddf:	call   0x103ff40
 1035de4:	add    rsp,0x98
 1035deb:	pop    rdi
 1035dec:	pop    rbp
 1035ded:	ret    
 1035dee:	int3   
 1035def:	int3   
 1035df0:	int3   
 1035df1:	int3   
 1035df2:	int3   
 1035df3:	int3   
 1035df4:	int3   
 1035df5:	int3   
 1035df6:	int3   
 1035df7:	int3   
 1035df8:	int3   
 1035df9:	int3   
 1035dfa:	int3   
 1035dfb:	int3   
 1035dfc:	int3   
 1035dfd:	int3   
 1035dfe:	int3   
 1035dff:	int3   
 1035e00:	ret    0x0
 1035e03:	int3   
 1035e04:	int3   
 1035e05:	int3   
 1035e06:	int3   
 1035e07:	int3   
 1035e08:	int3   
 1035e09:	int3   
 1035e0a:	int3   
 1035e0b:	int3   
 1035e0c:	int3   
 1035e0d:	int3   
 1035e0e:	int3   
 1035e0f:	int3   
 1035e10:	rex push rdi
 1035e12:	sub    rsp,0x160
 1035e19:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
 1035e22:	mov    QWORD PTR [rsp+0x170],rbx
 1035e2a:	mov    rax,QWORD PTR [rip+0x2da3f]        # 0x1063870
 1035e31:	xor    rax,rsp
 1035e34:	mov    QWORD PTR [rsp+0x150],rax
 1035e3c:	mov    DWORD PTR [rsp+0x30],0x114
 1035e44:	lea    rcx,[rsp+0x30]
 1035e49:	call   QWORD PTR [rip+0xfffffffffffcb5d1]        # 0x1001420
 1035e4f:	test   eax,eax
 1035e51:	je     0x1035f37
 1035e57:	cmp    DWORD PTR [rsp+0x40],0x2
 1035e5c:	jne    0x1035f37
 1035e62:	cmp    DWORD PTR [rsp+0x34],0x5
 1035e67:	jb     0x1035f37
 1035e6d:	mov    QWORD PTR [rsp+0x20],0x0
 1035e76:	lea    rcx,[rip+0xfffffffffffd135b]        # 0x10071d8
 1035e7d:	call   QWORD PTR [rip+0xfffffffffffcb545]        # 0x10013c8
 1035e83:	mov    rbx,rax
 1035e86:	mov    QWORD PTR [rsp+0x20],rax
 1035e8b:	test   rax,rax
 1035e8e:	jne    0x1035e95
 1035e90:	jmp    0x1035f37
 1035e95:	lea    rdx,[rip+0xfffffffffffd1434]        # 0x10072d0
 1035e9c:	mov    rcx,rax
 1035e9f:	call   QWORD PTR [rip+0xfffffffffffcb6e3]        # 0x1001588
 1035ea5:	mov    rdi,rax
 1035ea8:	test   rax,rax
 1035eab:	jne    0x1035ebd
 1035ead:	mov    rcx,rbx
 1035eb0:	call   QWORD PTR [rip+0xfffffffffffcb3e2]        # 0x1001298
 1035eb6:	mov    QWORD PTR [rsp+0x20],rdi
 1035ebb:	jmp    0x1035f37
 1035ebd:	mov    eax,0x1
 1035ec2:	xchg   DWORD PTR [rip+0x2dbb8],eax        # 0x1063a80
 1035ec8:	cmp    eax,0x1
 1035ecb:	jne    0x1035eeb
 1035ecd:	nop    DWORD PTR [rax]
 1035ed0:	xor    ecx,ecx
 1035ed2:	call   QWORD PTR [rip+0xfffffffffffcb670]        # 0x1001548
 1035ed8:	mov    r11d,0x1
 1035ede:	xchg   DWORD PTR [rip+0x2db9b],r11d        # 0x1063a80
 1035ee5:	cmp    r11d,0x1
 1035ee9:	je     0x1035ed0
 1035eeb:	lea    rdx,[rip+0x2d55e]        # 0x1063450
 1035ef2:	xor    ecx,ecx
 1035ef4:	call   rdi
 1035ef6:	mov    QWORD PTR [rip+0x2db8b],rax        # 0x1063a88
 1035efd:	xor    eax,eax
 1035eff:	xchg   DWORD PTR [rip+0x2db7b],eax        # 0x1063a80
 1035f05:	mov    rcx,QWORD PTR [rip+0x2db7c]        # 0x1063a88
 1035f0c:	cmp    rcx,0xffffffffffffffff
 1035f10:	je     0x1035f1c
 1035f12:	test   rcx,rcx
 1035f15:	je     0x1035f1c
 1035f17:	mov    dil,0x1
 1035f1a:	jmp    0x1035f1f
 1035f1c:	xor    dil,dil
 1035f1f:	mov    rcx,rbx
 1035f22:	call   QWORD PTR [rip+0xfffffffffffcb370]        # 0x1001298
 1035f28:	mov    QWORD PTR [rsp+0x20],0x0
 1035f31:	movzx  eax,dil
 1035f35:	jmp    0x1035f39
 1035f37:	xor    al,al
 1035f39:	mov    rcx,QWORD PTR [rsp+0x150]
 1035f41:	xor    rcx,rsp
 1035f44:	call   0x103ff40
 1035f49:	mov    rbx,QWORD PTR [rsp+0x170]
 1035f51:	add    rsp,0x160
 1035f58:	pop    rdi
 1035f59:	ret    
 1035f5a:	int3   
 1035f5b:	int3   
 1035f5c:	int3   
 1035f5d:	int3   
 1035f5e:	int3   
 1035f5f:	int3   
 1035f60:	rex push rbx
 1035f62:	sub    rsp,0x160
 1035f69:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
 1035f72:	mov    rax,QWORD PTR [rip+0x2d8f7]        # 0x1063870
 1035f79:	xor    rax,rsp
 1035f7c:	mov    QWORD PTR [rsp+0x150],rax
 1035f84:	mov    DWORD PTR [rsp+0x30],0x114
 1035f8c:	lea    rcx,[rsp+0x30]
 1035f91:	call   QWORD PTR [rip+0xfffffffffffcb489]        # 0x1001420
 1035f97:	test   eax,eax
 1035f99:	je     0x103608c
 1035f9f:	cmp    DWORD PTR [rsp+0x40],0x2
 1035fa4:	jne    0x103608c
 1035faa:	cmp    DWORD PTR [rsp+0x34],0x5
 1035faf:	jb     0x103608c
 1035fb5:	mov    QWORD PTR [rsp+0x20],0x0
 1035fbe:	lea    rcx,[rip+0xfffffffffffd1213]        # 0x10071d8
 1035fc5:	call   QWORD PTR [rip+0xfffffffffffcb3fd]        # 0x10013c8
 1035fcb:	mov    rbx,rax
 1035fce:	mov    QWORD PTR [rsp+0x20],rax
 1035fd3:	test   rax,rax
 1035fd6:	jne    0x1035fdd
 1035fd8:	jmp    0x103608c
 1035fdd:	lea    rdx,[rip+0xfffffffffffd1304]        # 0x10072e8
 1035fe4:	mov    rcx,rax
 1035fe7:	call   QWORD PTR [rip+0xfffffffffffcb59b]        # 0x1001588
 1035fed:	test   rax,rax
 1035ff0:	jne    0x1036009
 1035ff2:	mov    rcx,rbx
 1035ff5:	call   QWORD PTR [rip+0xfffffffffffcb29d]        # 0x1001298
 1035ffb:	mov    QWORD PTR [rsp+0x20],0x0
 1036004:	jmp    0x103608c
 1036009:	mov    rcx,QWORD PTR [rip+0x2da78]        # 0x1063a88
 1036010:	cmp    rcx,0xffffffffffffffff
 1036014:	je     0x1036076
 1036016:	test   rcx,rcx
 1036019:	je     0x1036076
 103601b:	xor    edx,edx
 103601d:	call   rax
 103601f:	mov    eax,0x1
 1036024:	xchg   DWORD PTR [rip+0x2da56],eax        # 0x1063a80
 103602a:	cmp    eax,0x1
 103602d:	jne    0x103604b
 103602f:	nop
 1036030:	xor    ecx,ecx
 1036032:	call   QWORD PTR [rip+0xfffffffffffcb510]        # 0x1001548
 1036038:	mov    r11d,0x1
 103603e:	xchg   DWORD PTR [rip+0x2da3b],r11d        # 0x1063a80
 1036045:	cmp    r11d,0x1
 1036049:	je     0x1036030
 103604b:	mov    rcx,QWORD PTR [rip+0x2da36]        # 0x1063a88
 1036052:	cmp    rcx,0xffffffffffffffff
 1036056:	je     0x1036063
 1036058:	test   rcx,rcx
 103605b:	je     0x1036063
 103605d:	call   QWORD PTR [rip+0xfffffffffffcb475]        # 0x10014d8
 1036063:	mov    QWORD PTR [rip+0x2da1a],0xffffffffffffffff        # 0x1063a88
 103606e:	xor    eax,eax
 1036070:	xchg   DWORD PTR [rip+0x2da0a],eax        # 0x1063a80
 1036076:	mov    rcx,rbx
 1036079:	call   QWORD PTR [rip+0xfffffffffffcb219]        # 0x1001298
 103607f:	mov    QWORD PTR [rsp+0x20],0x0
 1036088:	mov    al,0x1
 103608a:	jmp    0x103608e
 103608c:	xor    al,al
 103608e:	mov    rcx,QWORD PTR [rsp+0x150]
 1036096:	xor    rcx,rsp
 1036099:	call   0x103ff40
 103609e:	add    rsp,0x160
 10360a5:	pop    rbx
 10360a6:	ret    
 10360a7:	int3   
 10360a8:	int3   
 10360a9:	int3   
 10360aa:	int3   
 10360ab:	int3   
 10360ac:	int3   
 10360ad:	int3   
 10360ae:	int3   
 10360af:	int3   
 10360b0:	rex push rdi
 10360b2:	sub    rsp,0x160
 10360b9:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
 10360c2:	mov    QWORD PTR [rsp+0x178],rbx
 10360ca:	mov    rax,QWORD PTR [rip+0x2d79f]        # 0x1063870
 10360d1:	xor    rax,rsp
 10360d4:	mov    QWORD PTR [rsp+0x150],rax
 10360dc:	mov    rdi,rcx
 10360df:	mov    DWORD PTR [rsp+0x30],0x114
 10360e7:	lea    rcx,[rsp+0x30]
 10360ec:	call   QWORD PTR [rip+0xfffffffffffcb32e]        # 0x1001420
 10360f2:	test   eax,eax
 10360f4:	je     0x1036188
 10360fa:	cmp    DWORD PTR [rsp+0x40],0x2
 10360ff:	jne    0x1036188
 1036105:	cmp    DWORD PTR [rsp+0x34],0x5
 103610a:	jb     0x1036188
 103610c:	mov    QWORD PTR [rsp+0x20],0x0
 1036115:	lea    rcx,[rip+0xfffffffffffd10bc]        # 0x10071d8
 103611c:	call   QWORD PTR [rip+0xfffffffffffcb2a6]        # 0x10013c8
 1036122:	mov    rbx,rax
 1036125:	mov    QWORD PTR [rsp+0x20],rax
 103612a:	test   rax,rax
 103612d:	jne    0x1036131
 103612f:	jmp    0x1036188
 1036131:	lea    rdx,[rip+0xfffffffffffd11c8]        # 0x1007300
 1036138:	mov    rcx,rax
 103613b:	call   QWORD PTR [rip+0xfffffffffffcb447]        # 0x1001588
 1036141:	test   rax,rax
 1036144:	jne    0x103615a
 1036146:	mov    rcx,rbx
 1036149:	call   QWORD PTR [rip+0xfffffffffffcb149]        # 0x1001298
 103614f:	mov    QWORD PTR [rsp+0x20],0x0
 1036158:	jmp    0x1036188
 103615a:	mov    rcx,QWORD PTR [rip+0x2d927]        # 0x1063a88
 1036161:	cmp    rcx,0xffffffffffffffff
 1036165:	je     0x1036172
 1036167:	test   rcx,rcx
 103616a:	je     0x1036172
 103616c:	mov    rdx,rdi
 103616f:	call   rax
 1036171:	nop
 1036172:	mov    rcx,rbx
 1036175:	call   QWORD PTR [rip+0xfffffffffffcb11d]        # 0x1001298
 103617b:	mov    QWORD PTR [rsp+0x20],0x0
 1036184:	mov    al,0x1
 1036186:	jmp    0x103618a
 1036188:	xor    al,al
 103618a:	mov    rcx,QWORD PTR [rsp+0x150]
 1036192:	xor    rcx,rsp
 1036195:	call   0x103ff40
 103619a:	mov    rbx,QWORD PTR [rsp+0x178]
 10361a2:	add    rsp,0x160
 10361a9:	pop    rdi
 10361aa:	ret    
 10361ab:	int3   
 10361ac:	int3   
 10361ad:	int3   
 10361ae:	int3   
 10361af:	int3   
 10361b0:	int3   
 10361b1:	int3   
 10361b2:	int3   
 10361b3:	int3   
 10361b4:	int3   
 10361b5:	int3   
 10361b6:	int3   
 10361b7:	int3   
 10361b8:	int3   
 10361b9:	int3   
 10361ba:	int3   
 10361bb:	int3   
 10361bc:	int3   
 10361bd:	int3   
 10361be:	int3   
 10361bf:	int3   
 10361c0:	sub    rsp,0x28
 10361c4:	mov    rcx,QWORD PTR [rip+0x2d5ad]        # 0x1063778
 10361cb:	cmp    rcx,0xffffffffffffffff
 10361cf:	je     0x10361e7
 10361d1:	test   rcx,rcx
 10361d4:	je     0x10361dc
 10361d6:	call   QWORD PTR [rip+0xfffffffffffcb2fc]        # 0x10014d8
 10361dc:	mov    QWORD PTR [rip+0x2d591],0xffffffffffffffff        # 0x1063778
 10361e7:	add    rsp,0x28
 10361eb:	ret    
 10361ec:	int3   
 10361ed:	int3   
 10361ee:	int3   
 10361ef:	int3   
 10361f0:	int3   
 10361f1:	int3   
 10361f2:	int3   
 10361f3:	int3   
 10361f4:	int3   
 10361f5:	int3   
 10361f6:	int3   
 10361f7:	int3   
 10361f8:	int3   
 10361f9:	int3   
 10361fa:	int3   
 10361fb:	int3   
 10361fc:	int3   
 10361fd:	int3   
 10361fe:	int3   
 10361ff:	int3   
 1036200:	rex push rbx
 1036202:	sub    rsp,0x20
 1036206:	mov    rbx,rcx
 1036209:	mov    rcx,QWORD PTR [rcx]
 103620c:	test   rcx,rcx
 103620f:	je     0x103621e
 1036211:	call   QWORD PTR [rip+0xfffffffffffcb081]        # 0x1001298
 1036217:	mov    QWORD PTR [rbx],0x0
 103621e:	add    rsp,0x20
 1036222:	pop    rbx
 1036223:	ret    
 1036224:	int3   
 1036225:	int3   
 1036226:	int3   
 1036227:	int3   
 1036228:	int3   
 1036229:	int3   
 103622a:	int3   
 103622b:	int3   
 103622c:	int3   
 103622d:	int3   
 103622e:	int3   
 103622f:	int3   
 1036230:	rex push rdi
 1036232:	sub    rsp,0x30
 1036236:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 103623f:	mov    QWORD PTR [rsp+0x48],rbx
 1036244:	mov    QWORD PTR [rsp+0x50],rsi
 1036249:	mov    rsi,rdx
 103624c:	mov    rdi,rcx
 103624f:	mov    ecx,0x18
 1036254:	call   0x103f9d2
 1036259:	mov    rbx,rax
 103625c:	mov    QWORD PTR [rsp+0x40],rax
 1036261:	test   rax,rax
 1036264:	je     0x1036282
 1036266:	mov    QWORD PTR [rax+0x8],0x0
 103626e:	mov    DWORD PTR [rax+0x10],0x1
 1036275:	mov    rcx,rsi
 1036278:	call   0x10492d0
 103627d:	mov    QWORD PTR [rbx],rax
 1036280:	jmp    0x1036284
 1036282:	xor    ebx,ebx
 1036284:	mov    QWORD PTR [rdi],rbx
 1036287:	test   rbx,rbx
 103628a:	jne    0x1036297
 103628c:	mov    ecx,0x8007000e
 1036291:	call   0x1049210
 1036296:	int3   
 1036297:	mov    rax,rdi
 103629a:	mov    rbx,QWORD PTR [rsp+0x48]
 103629f:	mov    rsi,QWORD PTR [rsp+0x50]
 10362a4:	add    rsp,0x30
 10362a8:	pop    rdi
 10362a9:	ret    
 10362aa:	int3   
 10362ab:	int3   
 10362ac:	int3   
 10362ad:	int3   
 10362ae:	int3   
 10362af:	int3   
 10362b0:	rex push rdi
 10362b2:	sub    rsp,0x30
 10362b6:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 10362bf:	mov    QWORD PTR [rsp+0x40],rbx
 10362c4:	mov    QWORD PTR [rsp+0x48],rsi
 10362c9:	mov    rsi,rdx
 10362cc:	mov    rdi,rcx
 10362cf:	mov    ecx,0x18
 10362d4:	call   0x103f9d2
 10362d9:	mov    rbx,rax
 10362dc:	mov    QWORD PTR [rsp+0x50],rax
 10362e1:	test   rax,rax
 10362e4:	je     0x1036316
 10362e6:	mov    QWORD PTR [rax+0x8],0x0
 10362ee:	mov    DWORD PTR [rax+0x10],0x1
 10362f5:	mov    rcx,rsi
 10362f8:	call   QWORD PTR [rip+0xfffffffffffcb542]        # 0x1001840
 10362fe:	mov    QWORD PTR [rbx],rax
 1036301:	test   rax,rax
 1036304:	jne    0x1036318
 1036306:	test   rsi,rsi
 1036309:	je     0x1036318
 103630b:	mov    ecx,0x8007000e
 1036310:	call   0x1049210
 1036315:	int3   
 1036316:	xor    ebx,ebx
 1036318:	mov    QWORD PTR [rdi],rbx
 103631b:	test   rbx,rbx
 103631e:	jne    0x103632b
 1036320:	mov    ecx,0x8007000e
 1036325:	call   0x1049210
 103632a:	int3   
 103632b:	mov    rax,rdi
 103632e:	mov    rbx,QWORD PTR [rsp+0x40]
 1036333:	mov    rsi,QWORD PTR [rsp+0x48]
 1036338:	add    rsp,0x30
 103633c:	pop    rdi
 103633d:	ret    
 103633e:	int3   
 103633f:	int3   
 1036340:	int3   
 1036341:	int3   
 1036342:	int3   
 1036343:	int3   
 1036344:	int3   
 1036345:	int3   
 1036346:	int3   
 1036347:	int3   
 1036348:	int3   
 1036349:	int3   
 103634a:	int3   
 103634b:	int3   
 103634c:	int3   
 103634d:	int3   
 103634e:	int3   
 103634f:	int3   
 1036350:	mov    QWORD PTR [rsp+0x10],rbx
 1036355:	push   rdi
 1036356:	sub    rsp,0x20
 103635a:	mov    rbx,QWORD PTR [rcx]
 103635d:	mov    rdi,rcx
 1036360:	test   rbx,rbx
 1036363:	je     0x10363a1
 1036365:	or     eax,0xffffffff
 1036368:	lock xadd DWORD PTR [rbx+0x10],eax
 103636d:	dec    eax
 103636f:	jne    0x103639a
 1036371:	test   rbx,rbx
 1036374:	je     0x103639a
 1036376:	mov    rcx,QWORD PTR [rbx]
 1036379:	test   rcx,rcx
 103637c:	je     0x1036384
 103637e:	call   QWORD PTR [rip+0xfffffffffffcb4b4]        # 0x1001838
 1036384:	mov    rcx,QWORD PTR [rbx+0x8]
 1036388:	test   rcx,rcx
 103638b:	je     0x1036392
 103638d:	call   0x103f9c6
 1036392:	mov    rcx,rbx
 1036395:	call   0x103f95a
 103639a:	mov    QWORD PTR [rdi],0x0
 10363a1:	mov    rbx,QWORD PTR [rsp+0x38]
 10363a6:	add    rsp,0x20
 10363aa:	pop    rdi
 10363ab:	ret    
 10363ac:	int3   
 10363ad:	int3   
 10363ae:	int3   
 10363af:	int3   
 10363b0:	int3   
 10363b1:	int3   
 10363b2:	int3   
 10363b3:	int3   
 10363b4:	int3   
 10363b5:	int3   
 10363b6:	int3   
 10363b7:	int3   
 10363b8:	int3   
 10363b9:	int3   
 10363ba:	int3   
 10363bb:	int3   
 10363bc:	int3   
 10363bd:	int3   
 10363be:	int3   
 10363bf:	int3   
 10363c0:	rex.W jmp QWORD PTR [rip+0xfffffffffffcb481]        # 0x1001848
 10363c7:	int3   
 10363c8:	int3   
 10363c9:	int3   
 10363ca:	int3   
 10363cb:	int3   
 10363cc:	int3   
 10363cd:	int3   
 10363ce:	int3   
 10363cf:	int3   
 10363d0:	mov    QWORD PTR [rsp+0x10],rdx
 10363d5:	push   rdi
 10363d6:	sub    rsp,0x30
 10363da:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
 10363e3:	mov    QWORD PTR [rsp+0x58],rbx
 10363e8:	mov    rbx,rdx
 10363eb:	mov    rdi,rcx
 10363ee:	mov    DWORD PTR [rsp+0x20],0x0
 10363f6:	mov    QWORD PTR [rsp+0x40],0x0
 10363ff:	mov    rax,QWORD PTR [rcx]
 1036402:	lea    rdx,[rsp+0x40]
 1036407:	call   QWORD PTR [rax+0x48]
 103640a:	test   eax,eax
 103640c:	jns    0x103641f
 103640e:	lea    r8,[rip+0xfffffffffffd15eb]        # 0x1007a00
 1036415:	mov    rdx,rdi
 1036418:	mov    ecx,eax
 103641a:	call   0x1049230
 103641f:	mov    rdi,QWORD PTR [rsp+0x40]
 1036424:	mov    ecx,0x18
 1036429:	call   0x103f9d2
 103642e:	mov    QWORD PTR [rsp+0x50],rax
 1036433:	test   rax,rax
 1036436:	je     0x103644a
 1036438:	mov    QWORD PTR [rax+0x8],0x0
 1036440:	mov    DWORD PTR [rax+0x10],0x1
 1036447:	mov    QWORD PTR [rax],rdi
 103644a:	mov    QWORD PTR [rbx],rax
 103644d:	test   rax,rax
 1036450:	jne    0x103645d
 1036452:	mov    ecx,0x8007000e
 1036457:	call   0x1049210
 103645c:	int3   
 103645d:	mov    DWORD PTR [rsp+0x20],0x1
 1036465:	mov    rax,rbx
 1036468:	mov    rbx,QWORD PTR [rsp+0x58]
 103646d:	add    rsp,0x30
 1036471:	pop    rdi
 1036472:	ret    
 1036473:	int3   
 1036474:	int3   
 1036475:	int3   
 1036476:	int3   
 1036477:	int3   
 1036478:	int3   
 1036479:	int3   
 103647a:	int3   
 103647b:	int3   
 103647c:	int3   
 103647d:	int3   
 103647e:	int3   
 103647f:	int3   
 1036480:	mov    QWORD PTR [rsp+0x10],rdx
 1036485:	push   rdi
 1036486:	sub    rsp,0x30
 103648a:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
 1036493:	mov    QWORD PTR [rsp+0x58],rbx
 1036498:	mov    rbx,rdx
 103649b:	mov    rdi,rcx
 103649e:	mov    DWORD PTR [rsp+0x20],0x0
 10364a6:	mov    QWORD PTR [rsp+0x40],0x0
 10364af:	mov    rax,QWORD PTR [rcx]
 10364b2:	lea    rdx,[rsp+0x40]
 10364b7:	call   QWORD PTR [rax+0x50]
 10364ba:	test   eax,eax
 10364bc:	jns    0x10364cf
 10364be:	lea    r8,[rip+0xfffffffffffd153b]        # 0x1007a00
 10364c5:	mov    rdx,rdi
 10364c8:	mov    ecx,eax
 10364ca:	call   0x1049230
 10364cf:	mov    rdi,QWORD PTR [rsp+0x40]
 10364d4:	mov    ecx,0x18
 10364d9:	call   0x103f9d2
 10364de:	mov    QWORD PTR [rsp+0x50],rax
 10364e3:	test   rax,rax
 10364e6:	je     0x10364fa
 10364e8:	mov    QWORD PTR [rax+0x8],0x0
 10364f0:	mov    DWORD PTR [rax+0x10],0x1
 10364f7:	mov    QWORD PTR [rax],rdi
 10364fa:	mov    QWORD PTR [rbx],rax
 10364fd:	test   rax,rax
 1036500:	jne    0x103650d
 1036502:	mov    ecx,0x8007000e
 1036507:	call   0x1049210
 103650c:	int3   
 103650d:	mov    DWORD PTR [rsp+0x20],0x1
 1036515:	mov    rax,rbx
 1036518:	mov    rbx,QWORD PTR [rsp+0x58]
 103651d:	add    rsp,0x30
 1036521:	pop    rdi
 1036522:	ret    
 1036523:	int3   
 1036524:	int3   
 1036525:	int3   
 1036526:	int3   
 1036527:	int3   
 1036528:	int3   
 1036529:	int3   
 103652a:	int3   
 103652b:	int3   
 103652c:	int3   
 103652d:	int3   
 103652e:	int3   
 103652f:	int3   
 1036530:	mov    QWORD PTR [rsp+0x10],rdx
 1036535:	push   rdi
 1036536:	sub    rsp,0x30
 103653a:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
 1036543:	mov    QWORD PTR [rsp+0x50],rbx
 1036548:	mov    rbx,rdx
 103654b:	mov    rdi,rcx
 103654e:	xor    eax,eax
 1036550:	mov    DWORD PTR [rsp+0x20],eax
 1036554:	mov    QWORD PTR [rsp+0x40],rax
 1036559:	mov    rax,QWORD PTR [rcx]
 103655c:	lea    rdx,[rsp+0x40]
 1036561:	call   QWORD PTR [rax+0x58]
 1036564:	test   eax,eax
 1036566:	jns    0x1036579
 1036568:	lea    r8,[rip+0xfffffffffffd1471]        # 0x10079e0
 103656f:	mov    rdx,rdi
 1036572:	mov    ecx,eax
 1036574:	call   0x1049230
 1036579:	mov    rax,QWORD PTR [rsp+0x40]
 103657e:	mov    QWORD PTR [rbx],rax
 1036581:	mov    DWORD PTR [rsp+0x20],0x1
 1036589:	mov    rax,rbx
 103658c:	mov    rbx,QWORD PTR [rsp+0x50]
 1036591:	add    rsp,0x30
 1036595:	pop    rdi
 1036596:	ret    
 1036597:	int3   
 1036598:	int3   
 1036599:	int3   
 103659a:	int3   
 103659b:	int3   
 103659c:	int3   
 103659d:	int3   
 103659e:	int3   
 103659f:	int3   
 10365a0:	mov    QWORD PTR [rsp+0x10],rdx
 10365a5:	push   rdi
 10365a6:	sub    rsp,0x30
 10365aa:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
 10365b3:	mov    QWORD PTR [rsp+0x50],rbx
 10365b8:	mov    rbx,rdx
 10365bb:	mov    rdi,rcx
 10365be:	xor    eax,eax
 10365c0:	mov    DWORD PTR [rsp+0x20],eax
 10365c4:	mov    QWORD PTR [rsp+0x40],rax
 10365c9:	mov    rax,QWORD PTR [rcx]
 10365cc:	lea    rdx,[rsp+0x40]
 10365d1:	call   QWORD PTR [rax+0x88]
 10365d7:	test   eax,eax
 10365d9:	jns    0x10365ec
 10365db:	lea    r8,[rip+0xfffffffffffd13fe]        # 0x10079e0
 10365e2:	mov    rdx,rdi
 10365e5:	mov    ecx,eax
 10365e7:	call   0x1049230
 10365ec:	mov    rax,QWORD PTR [rsp+0x40]
 10365f1:	mov    QWORD PTR [rbx],rax
 10365f4:	mov    DWORD PTR [rsp+0x20],0x1
 10365fc:	mov    rax,rbx
 10365ff:	mov    rbx,QWORD PTR [rsp+0x50]
 1036604:	add    rsp,0x30
 1036608:	pop    rdi
 1036609:	ret    
 103660a:	int3   
 103660b:	int3   
 103660c:	int3   
 103660d:	int3   
 103660e:	int3   
 103660f:	int3   
 1036610:	int3   
 1036611:	int3   
 1036612:	int3   
 1036613:	int3   
 1036614:	int3   
 1036615:	int3   
 1036616:	int3   
 1036617:	int3   
 1036618:	int3   
 1036619:	int3   
 103661a:	int3   
 103661b:	int3   
 103661c:	int3   
 103661d:	int3   
 103661e:	int3   
 103661f:	int3   
 1036620:	mov    QWORD PTR [rsp+0x10],rdx
 1036625:	push   rdi
 1036626:	sub    rsp,0x30
 103662a:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
 1036633:	mov    QWORD PTR [rsp+0x58],rbx
 1036638:	mov    rbx,rdx
 103663b:	mov    rdi,rcx
 103663e:	mov    DWORD PTR [rsp+0x20],0x0
 1036646:	mov    QWORD PTR [rsp+0x40],0x0
 103664f:	mov    rax,QWORD PTR [rcx]
 1036652:	lea    rdx,[rsp+0x40]
 1036657:	call   QWORD PTR [rax+0xd0]
 103665d:	test   eax,eax
 103665f:	jns    0x1036672
 1036661:	lea    r8,[rip+0xfffffffffffd1378]        # 0x10079e0
 1036668:	mov    rdx,rdi
 103666b:	mov    ecx,eax
 103666d:	call   0x1049230
 1036672:	mov    rdi,QWORD PTR [rsp+0x40]
 1036677:	mov    ecx,0x18
 103667c:	call   0x103f9d2
 1036681:	mov    QWORD PTR [rsp+0x50],rax
 1036686:	test   rax,rax
 1036689:	je     0x103669d
 103668b:	mov    QWORD PTR [rax+0x8],0x0
 1036693:	mov    DWORD PTR [rax+0x10],0x1
 103669a:	mov    QWORD PTR [rax],rdi
 103669d:	mov    QWORD PTR [rbx],rax
 10366a0:	test   rax,rax
 10366a3:	jne    0x10366b0
 10366a5:	mov    ecx,0x8007000e
 10366aa:	call   0x1049210
 10366af:	int3   
 10366b0:	mov    DWORD PTR [rsp+0x20],0x1
 10366b8:	mov    rax,rbx
 10366bb:	mov    rbx,QWORD PTR [rsp+0x58]
 10366c0:	add    rsp,0x30
 10366c4:	pop    rdi
 10366c5:	ret    
 10366c6:	int3   
 10366c7:	int3   
 10366c8:	int3   
 10366c9:	int3   
 10366ca:	int3   
 10366cb:	int3   
 10366cc:	int3   
 10366cd:	int3   
 10366ce:	int3   
 10366cf:	int3   
 10366d0:	mov    QWORD PTR [rsp+0x18],r8
 10366d5:	mov    QWORD PTR [rsp+0x10],rdx
 10366da:	push   rbx
 10366db:	push   rsi
 10366dc:	push   rdi
 10366dd:	sub    rsp,0x30
 10366e1:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
 10366ea:	mov    rsi,r8
 10366ed:	mov    rdi,rdx
 10366f0:	mov    rbx,rcx
 10366f3:	mov    DWORD PTR [rsp+0x20],0x0
 10366fb:	mov    QWORD PTR [rsp+0x50],0x0
 1036704:	mov    rax,QWORD PTR [r8]
 1036707:	test   rax,rax
 103670a:	je     0x1036711
 103670c:	mov    rdx,QWORD PTR [rax]
 103670f:	jmp    0x1036713
 1036711:	xor    edx,edx
 1036713:	mov    rax,QWORD PTR [rcx]
 1036716:	lea    r8,[rsp+0x50]
 103671b:	call   QWORD PTR [rax+0x120]
 1036721:	test   eax,eax
 1036723:	jns    0x1036736
 1036725:	lea    r8,[rip+0xfffffffffffd12b4]        # 0x10079e0
 103672c:	mov    rdx,rbx
 103672f:	mov    ecx,eax
 1036731:	call   0x1049230
 1036736:	mov    rax,QWORD PTR [rsp+0x50]
 103673b:	mov    QWORD PTR [rdi],rax
 103673e:	mov    DWORD PTR [rsp+0x20],0x1
 1036746:	mov    rbx,QWORD PTR [rsi]
 1036749:	test   rbx,rbx
 103674c:	je     0x103678a
 103674e:	or     eax,0xffffffff
 1036751:	lock xadd DWORD PTR [rbx+0x10],eax
 1036756:	dec    eax
 1036758:	jne    0x1036783
 103675a:	test   rbx,rbx
 103675d:	je     0x1036783
 103675f:	mov    rcx,QWORD PTR [rbx]
 1036762:	test   rcx,rcx
 1036765:	je     0x103676d
 1036767:	call   QWORD PTR [rip+0xfffffffffffcb0cb]        # 0x1001838
 103676d:	mov    rcx,QWORD PTR [rbx+0x8]
 1036771:	test   rcx,rcx
 1036774:	je     0x103677b
 1036776:	call   0x103f9c6
 103677b:	mov    rcx,rbx
 103677e:	call   0x103f95a
 1036783:	mov    QWORD PTR [rsi],0x0
 103678a:	mov    rax,rdi
 103678d:	add    rsp,0x30
 1036791:	pop    rdi
 1036792:	pop    rsi
 1036793:	pop    rbx
 1036794:	ret    
 1036795:	int3   
 1036796:	int3   
 1036797:	int3   
 1036798:	int3   
 1036799:	int3   
 103679a:	int3   
 103679b:	int3   
 103679c:	int3   
 103679d:	int3   
 103679e:	int3   
 103679f:	int3   
 10367a0:	mov    QWORD PTR [rsp+0x18],r8
 10367a5:	mov    QWORD PTR [rsp+0x10],rdx
 10367aa:	push   rbx
 10367ab:	push   rsi
 10367ac:	push   rdi
 10367ad:	sub    rsp,0x30
 10367b1:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
 10367ba:	mov    rsi,r8
 10367bd:	mov    rdi,rdx
 10367c0:	mov    rbx,rcx
 10367c3:	mov    DWORD PTR [rsp+0x20],0x0
 10367cb:	mov    QWORD PTR [rsp+0x50],0x0
 10367d4:	mov    rax,QWORD PTR [r8]
 10367d7:	test   rax,rax
 10367da:	je     0x10367e1
 10367dc:	mov    rdx,QWORD PTR [rax]
 10367df:	jmp    0x10367e3
 10367e1:	xor    edx,edx
 10367e3:	mov    rax,QWORD PTR [rcx]
 10367e6:	lea    r8,[rsp+0x50]
 10367eb:	call   QWORD PTR [rax+0x128]
 10367f1:	test   eax,eax
 10367f3:	jns    0x1036806
 10367f5:	lea    r8,[rip+0xfffffffffffd11e4]        # 0x10079e0
 10367fc:	mov    rdx,rbx
 10367ff:	mov    ecx,eax
 1036801:	call   0x1049230
 1036806:	mov    rax,QWORD PTR [rsp+0x50]
 103680b:	mov    QWORD PTR [rdi],rax
 103680e:	mov    DWORD PTR [rsp+0x20],0x1
 1036816:	mov    rbx,QWORD PTR [rsi]
 1036819:	test   rbx,rbx
 103681c:	je     0x103685a
 103681e:	or     eax,0xffffffff
 1036821:	lock xadd DWORD PTR [rbx+0x10],eax
 1036826:	dec    eax
 1036828:	jne    0x1036853
 103682a:	test   rbx,rbx
 103682d:	je     0x1036853
 103682f:	mov    rcx,QWORD PTR [rbx]
 1036832:	test   rcx,rcx
 1036835:	je     0x103683d
 1036837:	call   QWORD PTR [rip+0xfffffffffffcaffb]        # 0x1001838
 103683d:	mov    rcx,QWORD PTR [rbx+0x8]
 1036841:	test   rcx,rcx
 1036844:	je     0x103684b
 1036846:	call   0x103f9c6
 103684b:	mov    rcx,rbx
 103684e:	call   0x103f95a
 1036853:	mov    QWORD PTR [rsi],0x0
 103685a:	mov    rax,rdi
 103685d:	add    rsp,0x30
 1036861:	pop    rdi
 1036862:	pop    rsi
 1036863:	pop    rbx
 1036864:	ret    
 1036865:	int3   
 1036866:	int3   
 1036867:	int3   
 1036868:	int3   
 1036869:	int3   
 103686a:	int3   
 103686b:	int3   
 103686c:	int3   
 103686d:	int3   
 103686e:	int3   
 103686f:	int3   
 1036870:	mov    QWORD PTR [rsp+0x10],rdx
 1036875:	push   rdi
 1036876:	sub    rsp,0x30
 103687a:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
 1036883:	mov    QWORD PTR [rsp+0x50],rbx
 1036888:	mov    r9d,r8d
 103688b:	mov    rbx,rdx
 103688e:	mov    rdi,rcx
 1036891:	xor    eax,eax
 1036893:	mov    DWORD PTR [rsp+0x20],eax
 1036897:	mov    QWORD PTR [rsp+0x40],rax
 103689c:	mov    rax,QWORD PTR [rcx]
 103689f:	lea    r8,[rsp+0x40]
 10368a4:	mov    edx,r9d
 10368a7:	call   QWORD PTR [rax+0x38]
 10368aa:	test   eax,eax
 10368ac:	jns    0x10368bf
 10368ae:	lea    r8,[rip+0xfffffffffffd113b]        # 0x10079f0
 10368b5:	mov    rdx,rdi
 10368b8:	mov    ecx,eax
 10368ba:	call   0x1049230
 10368bf:	mov    rax,QWORD PTR [rsp+0x40]
 10368c4:	mov    QWORD PTR [rbx],rax
 10368c7:	mov    DWORD PTR [rsp+0x20],0x1
 10368cf:	mov    rax,rbx
 10368d2:	mov    rbx,QWORD PTR [rsp+0x50]
 10368d7:	add    rsp,0x30
 10368db:	pop    rdi
 10368dc:	ret    
 10368dd:	int3   
 10368de:	int3   
 10368df:	int3   
 10368e0:	int3   
 10368e1:	int3   
 10368e2:	int3   
 10368e3:	int3   
 10368e4:	int3   
 10368e5:	int3   
 10368e6:	int3   
 10368e7:	int3   
 10368e8:	int3   
 10368e9:	int3   
 10368ea:	int3   
 10368eb:	int3   
 10368ec:	int3   
 10368ed:	int3   
 10368ee:	int3   
 10368ef:	int3   
 10368f0:	mov    QWORD PTR [rsp+0x18],r8
 10368f5:	mov    QWORD PTR [rsp+0x10],rdx
 10368fa:	push   rbx
 10368fb:	push   rsi
 10368fc:	push   rdi
 10368fd:	sub    rsp,0x30
 1036901:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
 103690a:	mov    rsi,r8
 103690d:	mov    rdi,rdx
 1036910:	mov    rbx,rcx
 1036913:	mov    DWORD PTR [rsp+0x20],0x0
 103691b:	mov    QWORD PTR [rsp+0x50],0x0
 1036924:	mov    rax,QWORD PTR [r8]
 1036927:	test   rax,rax
 103692a:	je     0x1036931
 103692c:	mov    rdx,QWORD PTR [rax]
 103692f:	jmp    0x1036933
 1036931:	xor    edx,edx
 1036933:	mov    rax,QWORD PTR [rcx]
 1036936:	lea    r8,[rsp+0x50]
 103693b:	call   QWORD PTR [rax+0x38]
 103693e:	test   eax,eax
 1036940:	jns    0x1036953
 1036942:	lea    r8,[rip+0xfffffffffffd1087]        # 0x10079d0
 1036949:	mov    rdx,rbx
 103694c:	mov    ecx,eax
 103694e:	call   0x1049230
 1036953:	mov    rax,QWORD PTR [rsp+0x50]
 1036958:	mov    QWORD PTR [rdi],rax
 103695b:	mov    DWORD PTR [rsp+0x20],0x1
 1036963:	mov    rbx,QWORD PTR [rsi]
 1036966:	test   rbx,rbx
 1036969:	je     0x10369a7
 103696b:	or     eax,0xffffffff
 103696e:	lock xadd DWORD PTR [rbx+0x10],eax
 1036973:	dec    eax
 1036975:	jne    0x10369a0
 1036977:	test   rbx,rbx
 103697a:	je     0x10369a0
 103697c:	mov    rcx,QWORD PTR [rbx]
 103697f:	test   rcx,rcx
 1036982:	je     0x103698a
 1036984:	call   QWORD PTR [rip+0xfffffffffffcaeae]        # 0x1001838
 103698a:	mov    rcx,QWORD PTR [rbx+0x8]
 103698e:	test   rcx,rcx
 1036991:	je     0x1036998
 1036993:	call   0x103f9c6
 1036998:	mov    rcx,rbx
 103699b:	call   0x103f95a
 10369a0:	mov    QWORD PTR [rsi],0x0
 10369a7:	mov    rax,rdi
 10369aa:	add    rsp,0x30
 10369ae:	pop    rdi
 10369af:	pop    rsi
 10369b0:	pop    rbx
 10369b1:	ret    
 10369b2:	int3   
 10369b3:	int3   
 10369b4:	int3   
 10369b5:	int3   
 10369b6:	int3   
 10369b7:	int3   
 10369b8:	int3   
 10369b9:	int3   
 10369ba:	int3   
 10369bb:	int3   
 10369bc:	int3   
 10369bd:	int3   
 10369be:	int3   
 10369bf:	int3   
 10369c0:	mov    QWORD PTR [rsp+0x10],rdx
 10369c5:	push   rdi
 10369c6:	sub    rsp,0x30
 10369ca:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
 10369d3:	mov    QWORD PTR [rsp+0x50],rbx
 10369d8:	mov    rbx,rdx
 10369db:	mov    rdi,rcx
 10369de:	xor    eax,eax
 10369e0:	mov    DWORD PTR [rsp+0x20],eax
 10369e4:	mov    QWORD PTR [rsp+0x40],rax
 10369e9:	mov    rax,QWORD PTR [rcx]
 10369ec:	lea    rdx,[rsp+0x40]
 10369f1:	call   QWORD PTR [rax+0x1e0]
 10369f7:	test   eax,eax
 10369f9:	jns    0x1036a0c
 10369fb:	lea    r8,[rip+0xfffffffffffd0fbe]        # 0x10079c0
 1036a02:	mov    rdx,rdi
 1036a05:	mov    ecx,eax
 1036a07:	call   0x1049230
 1036a0c:	mov    rax,QWORD PTR [rsp+0x40]
 1036a11:	mov    QWORD PTR [rbx],rax
 1036a14:	mov    DWORD PTR [rsp+0x20],0x1
 1036a1c:	mov    rax,rbx
 1036a1f:	mov    rbx,QWORD PTR [rsp+0x50]
 1036a24:	add    rsp,0x30
 1036a28:	pop    rdi
 1036a29:	ret    
 1036a2a:	int3   
 1036a2b:	int3   
 1036a2c:	int3   
 1036a2d:	int3   
 1036a2e:	int3   
 1036a2f:	int3   
 1036a30:	int3   
 1036a31:	int3   
 1036a32:	int3   
 1036a33:	int3   
 1036a34:	int3   
 1036a35:	int3   
 1036a36:	int3   
 1036a37:	int3   
 1036a38:	int3   
 1036a39:	int3   
 1036a3a:	int3   
 1036a3b:	int3   
 1036a3c:	int3   
 1036a3d:	int3   
 1036a3e:	int3   
 1036a3f:	int3   
 1036a40:	mov    QWORD PTR [rsp+0x10],rdx
 1036a45:	push   rbp
 1036a46:	push   rsi
 1036a47:	push   rdi
 1036a48:	sub    rsp,0x30
 1036a4c:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1036a55:	mov    QWORD PTR [rsp+0x60],rbx
 1036a5a:	mov    rdi,rdx
 1036a5d:	mov    rbx,rcx
 1036a60:	xor    ebp,ebp
 1036a62:	mov    WORD PTR [rsp+0x50],bp
 1036a67:	mov    rax,QWORD PTR [rdx]
 1036a6a:	test   rax,rax
 1036a6d:	je     0x1036a74
 1036a6f:	mov    rdx,QWORD PTR [rax]
 1036a72:	jmp    0x1036a77
 1036a74:	mov    rdx,rbp
 1036a77:	mov    rax,QWORD PTR [rcx]
 1036a7a:	lea    r8,[rsp+0x50]
 1036a7f:	call   QWORD PTR [rax+0x208]
 1036a85:	test   eax,eax
 1036a87:	jns    0x1036a9a
 1036a89:	lea    r8,[rip+0xfffffffffffd0f30]        # 0x10079c0
 1036a90:	mov    rdx,rbx
 1036a93:	mov    ecx,eax
 1036a95:	call   0x1049230
 1036a9a:	movzx  esi,WORD PTR [rsp+0x50]
 1036a9f:	mov    rbx,QWORD PTR [rdi]
 1036aa2:	test   rbx,rbx
 1036aa5:	je     0x1036adf
 1036aa7:	or     eax,0xffffffff
 1036aaa:	lock xadd DWORD PTR [rbx+0x10],eax
 1036aaf:	dec    eax
 1036ab1:	jne    0x1036adc
 1036ab3:	test   rbx,rbx
 1036ab6:	je     0x1036adc
 1036ab8:	mov    rcx,QWORD PTR [rbx]
 1036abb:	test   rcx,rcx
 1036abe:	je     0x1036ac6
 1036ac0:	call   QWORD PTR [rip+0xfffffffffffcad72]        # 0x1001838
 1036ac6:	mov    rcx,QWORD PTR [rbx+0x8]
 1036aca:	test   rcx,rcx
 1036acd:	je     0x1036ad4
 1036acf:	call   0x103f9c6
 1036ad4:	mov    rcx,rbx
 1036ad7:	call   0x103f95a
 1036adc:	mov    QWORD PTR [rdi],rbp
 1036adf:	movzx  eax,si
 1036ae2:	mov    rbx,QWORD PTR [rsp+0x60]
 1036ae7:	add    rsp,0x30
 1036aeb:	pop    rdi
 1036aec:	pop    rsi
 1036aed:	pop    rbp
 1036aee:	ret    
 1036aef:	int3   
 1036af0:	int3   
 1036af1:	int3   
 1036af2:	int3   
 1036af3:	int3   
 1036af4:	int3   
 1036af5:	int3   
 1036af6:	int3   
 1036af7:	int3   
 1036af8:	int3   
 1036af9:	int3   
 1036afa:	int3   
 1036afb:	int3   
 1036afc:	int3   
 1036afd:	int3   
 1036afe:	int3   
 1036aff:	int3   
 1036b00:	mov    QWORD PTR [rsp+0x10],rdx
 1036b05:	push   rdi
 1036b06:	sub    rsp,0x50
 1036b0a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1036b13:	mov    QWORD PTR [rsp+0x60],rbx
 1036b18:	mov    QWORD PTR [rsp+0x70],rsi
 1036b1d:	mov    rsi,rdx
 1036b20:	mov    rbx,rcx
 1036b23:	movups xmm0,XMMWORD PTR [r8]
 1036b27:	movaps XMMWORD PTR [rsp+0x30],xmm0
 1036b2c:	movsd  xmm1,QWORD PTR [r8+0x10]
 1036b32:	movsd  QWORD PTR [rsp+0x40],xmm1
 1036b38:	mov    rdx,QWORD PTR [rdx]
 1036b3b:	test   rdx,rdx
 1036b3e:	je     0x1036b43
 1036b40:	mov    rdx,QWORD PTR [rdx]
 1036b43:	mov    rax,QWORD PTR [rcx]
 1036b46:	lea    r8,[rsp+0x30]
 1036b4b:	call   QWORD PTR [rax+0x280]
 1036b51:	mov    edi,eax
 1036b53:	test   eax,eax
 1036b55:	jns    0x1036b69
 1036b57:	lea    r8,[rip+0xfffffffffffd0eb2]        # 0x1007a10
 1036b5e:	mov    rdx,rbx
 1036b61:	mov    ecx,eax
 1036b63:	call   0x1049230
 1036b68:	nop
 1036b69:	mov    rbx,QWORD PTR [rsi]
 1036b6c:	test   rbx,rbx
 1036b6f:	je     0x1036bad
 1036b71:	or     eax,0xffffffff
 1036b74:	lock xadd DWORD PTR [rbx+0x10],eax
 1036b79:	dec    eax
 1036b7b:	jne    0x1036ba6
 1036b7d:	test   rbx,rbx
 1036b80:	je     0x1036ba6
 1036b82:	mov    rcx,QWORD PTR [rbx]
 1036b85:	test   rcx,rcx
 1036b88:	je     0x1036b90
 1036b8a:	call   QWORD PTR [rip+0xfffffffffffcaca8]        # 0x1001838
 1036b90:	mov    rcx,QWORD PTR [rbx+0x8]
 1036b94:	test   rcx,rcx
 1036b97:	je     0x1036b9e
 1036b99:	call   0x103f9c6
 1036b9e:	mov    rcx,rbx
 1036ba1:	call   0x103f95a
 1036ba6:	mov    QWORD PTR [rsi],0x0
 1036bad:	mov    eax,edi
 1036baf:	mov    rbx,QWORD PTR [rsp+0x60]
 1036bb4:	mov    rsi,QWORD PTR [rsp+0x70]
 1036bb9:	add    rsp,0x50
 1036bbd:	pop    rdi
 1036bbe:	ret    
 1036bbf:	int3   
 1036bc0:	int3   
 1036bc1:	int3   
 1036bc2:	int3   
 1036bc3:	int3   
 1036bc4:	int3   
 1036bc5:	int3   
 1036bc6:	int3   
 1036bc7:	int3   
 1036bc8:	int3   
 1036bc9:	int3   
 1036bca:	int3   
 1036bcb:	int3   
 1036bcc:	int3   
 1036bcd:	int3   
 1036bce:	int3   
 1036bcf:	int3   
 1036bd0:	sub    rsp,0x28
 1036bd4:	mov    rcx,QWORD PTR [rcx]
 1036bd7:	test   rcx,rcx
 1036bda:	je     0x1036be2
 1036bdc:	mov    rax,QWORD PTR [rcx]
 1036bdf:	call   QWORD PTR [rax+0x10]
 1036be2:	add    rsp,0x28
 1036be6:	ret    
 1036be7:	int3   
 1036be8:	int3   
 1036be9:	int3   
 1036bea:	int3   
 1036beb:	int3   
 1036bec:	int3   
 1036bed:	int3   
 1036bee:	int3   
 1036bef:	int3   
 1036bf0:	sub    rsp,0x28
 1036bf4:	mov    rcx,QWORD PTR [rcx]
 1036bf7:	test   rcx,rcx
 1036bfa:	je     0x1036c02
 1036bfc:	mov    rax,QWORD PTR [rcx]
 1036bff:	call   QWORD PTR [rax+0x10]
 1036c02:	add    rsp,0x28
 1036c06:	ret    
 1036c07:	int3   
 1036c08:	int3   
 1036c09:	int3   
 1036c0a:	int3   
 1036c0b:	int3   
 1036c0c:	int3   
 1036c0d:	int3   
 1036c0e:	int3   
 1036c0f:	int3   
 1036c10:	sub    rsp,0x28
 1036c14:	mov    rcx,QWORD PTR [rcx]
 1036c17:	test   rcx,rcx
 1036c1a:	je     0x1036c22
 1036c1c:	mov    rax,QWORD PTR [rcx]
 1036c1f:	call   QWORD PTR [rax+0x10]
 1036c22:	add    rsp,0x28
 1036c26:	ret    
 1036c27:	int3   
 1036c28:	int3   
 1036c29:	int3   
 1036c2a:	int3   
 1036c2b:	int3   
 1036c2c:	int3   
 1036c2d:	int3   
 1036c2e:	int3   
 1036c2f:	int3   
 1036c30:	sub    rsp,0x28
 1036c34:	mov    rcx,QWORD PTR [rcx]
 1036c37:	test   rcx,rcx
 1036c3a:	je     0x1036c42
 1036c3c:	mov    rax,QWORD PTR [rcx]
 1036c3f:	call   QWORD PTR [rax+0x10]
 1036c42:	add    rsp,0x28
 1036c46:	ret    
 1036c47:	int3   
 1036c48:	int3   
 1036c49:	int3   
 1036c4a:	int3   
 1036c4b:	int3   
 1036c4c:	int3   
 1036c4d:	int3   
 1036c4e:	int3   
 1036c4f:	int3   
 1036c50:	mov    QWORD PTR [rsp+0x8],rcx
 1036c55:	push   rbp
 1036c56:	push   rsi
 1036c57:	push   rdi
 1036c58:	push   r12
 1036c5a:	push   r13
 1036c5c:	push   r14
 1036c5e:	push   r15
 1036c60:	lea    rbp,[rsp-0x10]
 1036c65:	sub    rsp,0x110
 1036c6c:	mov    QWORD PTR [rbp-0x20],0xfffffffffffffffe
 1036c74:	mov    QWORD PTR [rsp+0x160],rbx
 1036c7c:	mov    r14,r8
 1036c7f:	mov    rdi,rdx
 1036c82:	mov    rsi,rcx
 1036c85:	lea    rax,[rip+0xfffffffffffcb77c]        # 0x1002408
 1036c8c:	mov    QWORD PTR [rcx],rax
 1036c8f:	lea    rax,[rip+0xfffffffffffd0d92]        # 0x1007a28
 1036c96:	mov    QWORD PTR [rcx],rax
 1036c99:	add    rcx,0x8
 1036c9d:	call   QWORD PTR [rip+0xfffffffffffcae1d]        # 0x1001ac0
 1036ca3:	nop
 1036ca4:	xor    r12d,r12d
 1036ca7:	mov    QWORD PTR [rsi+0x10],r12
 1036cab:	mov    rdx,r14
 1036cae:	lea    rcx,[rsi+0x8]
 1036cb2:	call   QWORD PTR [rip+0xfffffffffffcade0]        # 0x1001a98
 1036cb8:	mov    QWORD PTR [rsi+0x18],rdi
 1036cbc:	mov    rcx,rsi
 1036cbf:	call   0x103bb20
 1036cc4:	test   al,al
 1036cc6:	je     0x10371b1
 1036ccc:	mov    eax,0x8
 1036cd1:	mov    WORD PTR [rbp-0x38],ax
 1036cd5:	mov    rcx,r14
 1036cd8:	call   QWORD PTR [rip+0xfffffffffffcab62]        # 0x1001840
 1036cde:	mov    QWORD PTR [rbp-0x30],rax
 1036ce2:	test   rax,rax
 1036ce5:	jne    0x1036cf7
 1036ce7:	test   r14,r14
 1036cea:	je     0x1036cf7
 1036cec:	mov    ecx,0x8007000e
 1036cf1:	call   0x1049210
 1036cf6:	nop
 1036cf7:	mov    rbx,QWORD PTR [rsi+0x10]
 1036cfb:	test   rbx,rbx
 1036cfe:	jne    0x1036d0b
 1036d00:	mov    ecx,0x80004003
 1036d05:	call   0x1049210
 1036d0a:	int3   
 1036d0b:	mov    WORD PTR [rbp+0x58],r12w
 1036d10:	movups xmm0,XMMWORD PTR [rbp-0x38]
 1036d14:	movaps XMMWORD PTR [rbp-0x10],xmm0
 1036d18:	movsd  xmm1,QWORD PTR [rbp-0x28]
 1036d1d:	movsd  QWORD PTR [rbp+0x0],xmm1
 1036d22:	mov    rax,QWORD PTR [rbx]
 1036d25:	lea    r8,[rbp+0x58]
 1036d29:	lea    rdx,[rbp-0x10]
 1036d2d:	mov    rcx,rbx
 1036d30:	call   QWORD PTR [rax+0x1d0]
 1036d36:	test   eax,eax
 1036d38:	jns    0x1036d4b
 1036d3a:	lea    r8,[rip+0xfffffffffffd0c7f]        # 0x10079c0
 1036d41:	mov    rdx,rbx
 1036d44:	mov    ecx,eax
 1036d46:	call   0x1049230
 1036d4b:	or     edi,0xffffffff
 1036d4e:	cmp    di,WORD PTR [rbp+0x58]
 1036d52:	setne  bl
 1036d55:	lea    rcx,[rbp-0x38]
 1036d59:	call   QWORD PTR [rip+0xfffffffffffcaae9]        # 0x1001848
 1036d5f:	test   bl,bl
 1036d61:	je     0x10371b1
 1036d67:	lea    rcx,[rsp+0x40]
 1036d6c:	call   QWORD PTR [rip+0xfffffffffffcad4e]        # 0x1001ac0
 1036d72:	nop
 1036d73:	mov    rcx,QWORD PTR [rsi+0x10]
 1036d77:	test   rcx,rcx
 1036d7a:	jne    0x1036d87
 1036d7c:	mov    ecx,0x80004003
 1036d81:	call   0x1049210
 1036d86:	int3   
 1036d87:	lea    rdx,[rbp-0x70]
 1036d8b:	call   0x10369c0
 1036d90:	nop
 1036d91:	mov    rcx,QWORD PTR [rax]
 1036d94:	test   rcx,rcx
 1036d97:	jne    0x1036da4
 1036d99:	mov    ecx,0x80004003
 1036d9e:	call   0x1049210
 1036da3:	int3   
 1036da4:	lea    rdx,[rsp+0x68]
 1036da9:	call   0x10363d0
 1036dae:	nop
 1036daf:	mov    rdx,QWORD PTR [rax]
 1036db2:	test   rdx,rdx
 1036db5:	je     0x1036dbc
 1036db7:	mov    rdx,QWORD PTR [rdx]
 1036dba:	jmp    0x1036dbf
 1036dbc:	mov    rdx,r12
 1036dbf:	lea    rcx,[rsp+0x40]
 1036dc4:	call   QWORD PTR [rip+0xfffffffffffcacce]        # 0x1001a98
 1036dca:	nop
 1036dcb:	mov    rbx,QWORD PTR [rsp+0x68]
 1036dd0:	test   rbx,rbx
 1036dd3:	je     0x1036e0e
 1036dd5:	mov    eax,edi
 1036dd7:	lock xadd DWORD PTR [rbx+0x10],eax
 1036ddc:	dec    eax
 1036dde:	jne    0x1036e09
 1036de0:	test   rbx,rbx
 1036de3:	je     0x1036e09
 1036de5:	mov    rcx,QWORD PTR [rbx]
 1036de8:	test   rcx,rcx
 1036deb:	je     0x1036df3
 1036ded:	call   QWORD PTR [rip+0xfffffffffffcaa45]        # 0x1001838
 1036df3:	mov    rcx,QWORD PTR [rbx+0x8]
 1036df7:	test   rcx,rcx
 1036dfa:	je     0x1036e01
 1036dfc:	call   0x103f9c6
 1036e01:	mov    rcx,rbx
 1036e04:	call   0x103f95a
 1036e09:	mov    QWORD PTR [rsp+0x68],r12
 1036e0e:	mov    rcx,QWORD PTR [rbp-0x70]
 1036e12:	test   rcx,rcx
 1036e15:	je     0x1036e1d
 1036e17:	mov    rax,QWORD PTR [rcx]
 1036e1a:	call   QWORD PTR [rax+0x10]
 1036e1d:	lea    rcx,[rsp+0x40]
 1036e22:	call   QWORD PTR [rip+0xfffffffffffcacc8]        # 0x1001af0
 1036e28:	lea    r8d,[rax-0x2]
 1036e2c:	lea    rdx,[rbp-0x50]
 1036e30:	lea    rcx,[rsp+0x40]
 1036e35:	call   QWORD PTR [rip+0xfffffffffffcac0d]        # 0x1001a48
 1036e3b:	nop
 1036e3c:	mov    rdx,rax
 1036e3f:	lea    rcx,[rsp+0x40]
 1036e44:	call   QWORD PTR [rip+0xfffffffffffcac56]        # 0x1001aa0
 1036e4a:	nop
 1036e4b:	lea    rcx,[rbp-0x50]
 1036e4f:	call   QWORD PTR [rip+0xfffffffffffcac53]        # 0x1001aa8
 1036e55:	lea    rcx,[rsp+0x70]
 1036e5a:	call   QWORD PTR [rip+0xfffffffffffcac60]        # 0x1001ac0
 1036e60:	nop
 1036e61:	mov    rcx,QWORD PTR [rsi+0x10]
 1036e65:	test   rcx,rcx
 1036e68:	jne    0x1036e75
 1036e6a:	mov    ecx,0x80004003
 1036e6f:	call   0x1049210
 1036e74:	int3   
 1036e75:	lea    rdx,[rbp-0x78]
 1036e79:	call   0x10369c0
 1036e7e:	nop
 1036e7f:	mov    rcx,QWORD PTR [rax]
 1036e82:	test   rcx,rcx
 1036e85:	jne    0x1036e92
 1036e87:	mov    ecx,0x80004003
 1036e8c:	call   0x1049210
 1036e91:	int3   
 1036e92:	lea    rdx,[rsp+0x60]
 1036e97:	call   0x1036480
 1036e9c:	mov    r14,rax
 1036e9f:	mov    rcx,QWORD PTR [rsi+0x10]
 1036ea3:	test   rcx,rcx
 1036ea6:	jne    0x1036eb3
 1036ea8:	mov    ecx,0x80004003
 1036ead:	call   0x1049210
 1036eb2:	int3   
 1036eb3:	lea    rdx,[rbp-0x80]
 1036eb7:	call   0x10369c0
 1036ebc:	mov    rbx,rax
 1036ebf:	mov    rcx,QWORD PTR [rsi+0x10]
 1036ec3:	test   rcx,rcx
 1036ec6:	jne    0x1036ed3
 1036ec8:	mov    ecx,0x80004003
 1036ecd:	call   0x1049210
 1036ed2:	int3   
 1036ed3:	lea    rdx,[rbp-0x40]
 1036ed7:	call   0x10369c0
 1036edc:	mov    r15,rax
 1036edf:	mov    rcx,QWORD PTR [rsi+0x10]
 1036ee3:	test   rcx,rcx
 1036ee6:	jne    0x1036ef3
 1036ee8:	mov    ecx,0x80004003
 1036eed:	call   0x1049210
 1036ef2:	int3   
 1036ef3:	lea    rdx,[rbp-0x60]
 1036ef7:	call   0x10369c0
 1036efc:	mov    QWORD PTR [rsp+0x50],rax
 1036f01:	mov    rcx,QWORD PTR [rsi+0x10]
 1036f05:	test   rcx,rcx
 1036f08:	jne    0x1036f15
 1036f0a:	mov    ecx,0x80004003
 1036f0f:	call   0x1049210
 1036f14:	int3   
 1036f15:	lea    rdx,[rbp-0x48]
 1036f19:	call   0x10369c0
 1036f1e:	mov    QWORD PTR [rsp+0x78],rax
 1036f23:	mov    rcx,QWORD PTR [r14]
 1036f26:	test   rcx,rcx
 1036f29:	je     0x1036f30
 1036f2b:	mov    r14,QWORD PTR [rcx]
 1036f2e:	jmp    0x1036f33
 1036f30:	mov    r14,r12
 1036f33:	mov    rbx,QWORD PTR [rbx]
 1036f36:	test   rbx,rbx
 1036f39:	jne    0x1036f46
 1036f3b:	mov    ecx,0x80004003
 1036f40:	call   0x1049210
 1036f45:	int3   
 1036f46:	mov    DWORD PTR [rbp+0x68],r12d
 1036f4a:	mov    rax,QWORD PTR [rbx]
 1036f4d:	lea    rdx,[rbp+0x68]
 1036f51:	mov    rcx,rbx
 1036f54:	call   QWORD PTR [rax+0x60]
 1036f57:	test   eax,eax
 1036f59:	jns    0x1036f6c
 1036f5b:	lea    r8,[rip+0xfffffffffffd0a9e]        # 0x1007a00
 1036f62:	mov    rdx,rbx
 1036f65:	mov    ecx,eax
 1036f67:	call   0x1049230
 1036f6c:	mov    r13d,DWORD PTR [rbp+0x68]
 1036f70:	mov    rbx,QWORD PTR [r15]
 1036f73:	test   rbx,rbx
 1036f76:	jne    0x1036f83
 1036f78:	mov    ecx,0x80004003
 1036f7d:	call   0x1049210
 1036f82:	int3   
 1036f83:	mov    DWORD PTR [rsp+0x48],r12d
 1036f88:	mov    rax,QWORD PTR [rbx]
 1036f8b:	lea    rdx,[rsp+0x48]
 1036f90:	mov    rcx,rbx
 1036f93:	call   QWORD PTR [rax+0x58]
 1036f96:	test   eax,eax
 1036f98:	jns    0x1036fab
 1036f9a:	lea    r8,[rip+0xfffffffffffd0a5f]        # 0x1007a00
 1036fa1:	mov    rdx,rbx
 1036fa4:	mov    ecx,eax
 1036fa6:	call   0x1049230
 1036fab:	mov    r12d,DWORD PTR [rsp+0x48]
 1036fb0:	mov    rbx,QWORD PTR [rsp+0x50]
 1036fb5:	mov    rbx,QWORD PTR [rbx]
 1036fb8:	test   rbx,rbx
 1036fbb:	jne    0x1036fc8
 1036fbd:	mov    ecx,0x80004003
 1036fc2:	call   0x1049210
 1036fc7:	int3   
 1036fc8:	mov    DWORD PTR [rsp+0x4c],0x0
 1036fd0:	mov    rax,QWORD PTR [rbx]
 1036fd3:	lea    rdx,[rsp+0x4c]
 1036fd8:	mov    rcx,rbx
 1036fdb:	call   QWORD PTR [rax+0x68]
 1036fde:	test   eax,eax
 1036fe0:	jns    0x1036ff3
 1036fe2:	lea    r8,[rip+0xfffffffffffd0a17]        # 0x1007a00
 1036fe9:	mov    rdx,rbx
 1036fec:	mov    ecx,eax
 1036fee:	call   0x1049230
 1036ff3:	mov    r15d,DWORD PTR [rsp+0x4c]
 1036ff8:	mov    rbx,QWORD PTR [rsp+0x78]
 1036ffd:	mov    rbx,QWORD PTR [rbx]
 1037000:	test   rbx,rbx
 1037003:	jne    0x1037010
 1037005:	mov    ecx,0x80004003
 103700a:	call   0x1049210
 103700f:	int3   
 1037010:	mov    DWORD PTR [rsp+0x50],0x0
 1037018:	mov    rax,QWORD PTR [rbx]
 103701b:	lea    rdx,[rsp+0x50]
 1037020:	mov    rcx,rbx
 1037023:	call   QWORD PTR [rax+0x38]
 1037026:	test   eax,eax
 1037028:	jns    0x103703b
 103702a:	lea    r8,[rip+0xfffffffffffd09cf]        # 0x1007a00
 1037031:	mov    rdx,rbx
 1037034:	mov    ecx,eax
 1037036:	call   0x1049230
 103703b:	mov    ebx,DWORD PTR [rsp+0x50]
 103703f:	lea    rcx,[rsp+0x40]
 1037044:	call   QWORD PTR [rip+0xfffffffffffcaa9e]        # 0x1001ae8
 103704a:	mov    r9,rax
 103704d:	mov    QWORD PTR [rsp+0x38],r14
 1037052:	mov    DWORD PTR [rsp+0x30],r13d
 1037057:	mov    DWORD PTR [rsp+0x28],r12d
 103705c:	mov    DWORD PTR [rsp+0x20],r15d
 1037061:	mov    r8d,ebx
 1037064:	lea    rdx,[rip+0xfffffffffffd0a15]        # 0x1007a80
 103706b:	lea    rcx,[rsp+0x70]
 1037070:	call   QWORD PTR [rip+0xfffffffffffca9ca]        # 0x1001a40
 1037076:	nop
 1037077:	mov    rcx,QWORD PTR [rbp-0x48]
 103707b:	test   rcx,rcx
 103707e:	je     0x1037087
 1037080:	mov    rax,QWORD PTR [rcx]
 1037083:	call   QWORD PTR [rax+0x10]
 1037086:	nop
 1037087:	mov    rcx,QWORD PTR [rbp-0x60]
 103708b:	test   rcx,rcx
 103708e:	je     0x1037097
 1037090:	mov    rax,QWORD PTR [rcx]
 1037093:	call   QWORD PTR [rax+0x10]
 1037096:	nop
 1037097:	mov    rcx,QWORD PTR [rbp-0x40]
 103709b:	test   rcx,rcx
 103709e:	je     0x10370a7
 10370a0:	mov    rax,QWORD PTR [rcx]
 10370a3:	call   QWORD PTR [rax+0x10]
 10370a6:	nop
 10370a7:	mov    rcx,QWORD PTR [rbp-0x80]
 10370ab:	test   rcx,rcx
 10370ae:	je     0x10370b7
 10370b0:	mov    rax,QWORD PTR [rcx]
 10370b3:	call   QWORD PTR [rax+0x10]
 10370b6:	nop
 10370b7:	mov    rbx,QWORD PTR [rsp+0x60]
 10370bc:	test   rbx,rbx
 10370bf:	je     0x10370fc
 10370c1:	lock xadd DWORD PTR [rbx+0x10],edi
 10370c6:	dec    edi
 10370c8:	jne    0x10370f3
 10370ca:	test   rbx,rbx
 10370cd:	je     0x10370f3
 10370cf:	mov    rcx,QWORD PTR [rbx]
 10370d2:	test   rcx,rcx
 10370d5:	je     0x10370dd
 10370d7:	call   QWORD PTR [rip+0xfffffffffffca75b]        # 0x1001838
 10370dd:	mov    rcx,QWORD PTR [rbx+0x8]
 10370e1:	test   rcx,rcx
 10370e4:	je     0x10370eb
 10370e6:	call   0x103f9c6
 10370eb:	mov    rcx,rbx
 10370ee:	call   0x103f95a
 10370f3:	mov    QWORD PTR [rsp+0x60],0x0
 10370fc:	mov    rcx,QWORD PTR [rbp-0x78]
 1037100:	test   rcx,rcx
 1037103:	je     0x103710b
 1037105:	mov    rax,QWORD PTR [rcx]
 1037108:	call   QWORD PTR [rax+0x10]
 103710b:	lea    rcx,[rsp+0x58]
 1037110:	call   QWORD PTR [rip+0xfffffffffffca9aa]        # 0x1001ac0
 1037116:	nop
 1037117:	mov    edx,0xc000c3de
 103711c:	lea    rcx,[rbp-0x68]
 1037120:	call   0x10132d0
 1037125:	mov    rdi,rax
 1037128:	lea    rcx,[rsp+0x70]
 103712d:	call   QWORD PTR [rip+0xfffffffffffca9b5]        # 0x1001ae8
 1037133:	mov    rbx,rax
 1037136:	mov    rcx,rdi
 1037139:	call   QWORD PTR [rip+0xfffffffffffca9a9]        # 0x1001ae8
 103713f:	mov    rdx,rax
 1037142:	mov    r8,rbx
 1037145:	lea    rcx,[rsp+0x58]
 103714a:	call   QWORD PTR [rip+0xfffffffffffca8f0]        # 0x1001a40
 1037150:	nop
 1037151:	lea    rcx,[rbp-0x68]
 1037155:	call   QWORD PTR [rip+0xfffffffffffca94d]        # 0x1001aa8
 103715b:	mov    r11,QWORD PTR [rsi+0x18]
 103715f:	mov    rbx,QWORD PTR [r11]
 1037162:	lea    rcx,[rsp+0x58]
 1037167:	call   QWORD PTR [rip+0xfffffffffffca97b]        # 0x1001ae8
 103716d:	mov    r8,rax
 1037170:	mov    BYTE PTR [rsp+0x30],0x1
 1037175:	mov    BYTE PTR [rsp+0x28],0x1
 103717a:	mov    DWORD PTR [rsp+0x20],0x0
 1037182:	xor    r9d,r9d
 1037185:	mov    edx,0xc000c3de
 103718a:	mov    rcx,QWORD PTR [rsi+0x18]
 103718e:	call   QWORD PTR [rbx+0x8]
 1037191:	lea    rdx,[rsp+0x58]
 1037196:	lea    rcx,[rbp-0x58]
 103719a:	call   QWORD PTR [rip+0xfffffffffffca818]        # 0x10019b8
 10371a0:	lea    rdx,[rip+0x296d1]        # 0x1060878
 10371a7:	lea    rcx,[rbp-0x58]
 10371ab:	call   0x10401ce
 10371b0:	nop
 10371b1:	mov    rax,rsi
 10371b4:	mov    rbx,QWORD PTR [rsp+0x160]
 10371bc:	add    rsp,0x110
 10371c3:	pop    r15
 10371c5:	pop    r14
 10371c7:	pop    r13
 10371c9:	pop    r12
 10371cb:	pop    rdi
 10371cc:	pop    rsi
 10371cd:	pop    rbp
 10371ce:	ret    
 10371cf:	int3   
 10371d0:	int3   
 10371d1:	int3   
 10371d2:	int3   
 10371d3:	int3   
 10371d4:	int3   
 10371d5:	int3   
 10371d6:	int3   
 10371d7:	int3   
 10371d8:	int3   
 10371d9:	int3   
 10371da:	int3   
 10371db:	int3   
 10371dc:	int3   
 10371dd:	int3   
 10371de:	int3   
 10371df:	int3   
 10371e0:	mov    QWORD PTR [rsp+0x8],rcx
 10371e5:	push   rbx
 10371e6:	sub    rsp,0x30
 10371ea:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 10371f3:	mov    rbx,rcx
 10371f6:	lea    rax,[rip+0xfffffffffffd082b]        # 0x1007a28
 10371fd:	mov    QWORD PTR [rcx],rax
 1037200:	cmp    QWORD PTR [rcx+0x10],0x0
 1037205:	sete   al
 1037208:	test   al,al
 103720a:	sete   al
 103720d:	test   al,al
 103720f:	je     0x1037246
 1037211:	mov    rcx,QWORD PTR [rcx+0x10]
 1037215:	test   rcx,rcx
 1037218:	jne    0x1037225
 103721a:	mov    ecx,0x80004003
 103721f:	call   0x1049210
 1037224:	int3   
 1037225:	mov    rax,QWORD PTR [rcx]
 1037228:	call   QWORD PTR [rax+0x10]
 103722b:	xor    r11d,r11d
 103722e:	mov    QWORD PTR [rbx+0x10],r11
 1037232:	mov    ecx,r11d
 1037235:	je     0x1037246
 1037237:	mov    QWORD PTR [rbx+0x10],r11
 103723b:	test   rcx,rcx
 103723e:	je     0x1037246
 1037240:	mov    rax,QWORD PTR [r11]
 1037243:	call   QWORD PTR [rax+0x10]
 1037246:	call   QWORD PTR [rip+0xfffffffffffca8f4]        # 0x1001b40
 103724c:	nop
 103724d:	mov    rcx,QWORD PTR [rbx+0x10]
 1037251:	test   rcx,rcx
 1037254:	je     0x103725d
 1037256:	mov    rax,QWORD PTR [rcx]
 1037259:	call   QWORD PTR [rax+0x10]
 103725c:	nop
 103725d:	lea    rcx,[rbx+0x8]
 1037261:	call   QWORD PTR [rip+0xfffffffffffca841]        # 0x1001aa8
 1037267:	nop
 1037268:	mov    rcx,rbx
 103726b:	add    rsp,0x30
 103726f:	pop    rbx
 1037270:	jmp    0x100e5d0
 1037275:	int3   
 1037276:	int3   
 1037277:	int3   
 1037278:	int3   
 1037279:	int3   
 103727a:	int3   
 103727b:	int3   
 103727c:	int3   
 103727d:	int3   
 103727e:	int3   
 103727f:	int3   
 1037280:	mov    rax,rsp
 1037283:	push   rbp
 1037284:	push   r12
 1037286:	push   r13
 1037288:	push   r14
 103728a:	push   r15
 103728c:	lea    rbp,[rax-0x48]
 1037290:	sub    rsp,0x120
 1037297:	mov    QWORD PTR [rbp+0x10],0xfffffffffffffffe
 103729f:	mov    QWORD PTR [rax+0x8],rbx
 10372a3:	mov    QWORD PTR [rax+0x10],rsi
 10372a7:	mov    QWORD PTR [rax+0x18],rdi
 10372ab:	movzx  r13d,r8b
 10372af:	mov    r12,rdx
 10372b2:	mov    r15,rcx
 10372b5:	xor    esi,esi
 10372b7:	mov    DWORD PTR [rsp+0x30],esi
 10372bb:	lea    r14,[rip+0xfffffffffffcab5e]        # 0x1001e20
 10372c2:	mov    QWORD PTR [rsp+0x58],r14
 10372c7:	mov    QWORD PTR [rsp+0x70],rsi
 10372cc:	mov    QWORD PTR [rsp+0x78],rsi
 10372d1:	mov    QWORD PTR [rsp+0x68],rsi
 10372d6:	mov    QWORD PTR [rsp+0x60],rsi
 10372db:	mov    QWORD PTR [rbp-0x80],rsi
 10372df:	mov    QWORD PTR [rbp-0x78],0xa
 10372e7:	mov    ebx,esi
 10372e9:	mov    QWORD PTR [rsp+0x38],rbx
 10372ee:	lea    rax,[rbp-0x48]
 10372f2:	mov    QWORD PTR [rbp+0x68],rax
 10372f6:	lea    ecx,[rsi+0x18]
 10372f9:	call   0x103f9d2
 10372fe:	mov    rdi,rax
 1037301:	mov    QWORD PTR [rbp-0x38],rax
 1037305:	test   rax,rax
 1037308:	je     0x1037326
 103730a:	mov    QWORD PTR [rax+0x8],rsi
 103730e:	mov    DWORD PTR [rax+0x10],0x1
 1037315:	lea    rcx,[rip+0xfffffffffffd0824]        # 0x1007b40
 103731c:	call   0x10492d0
 1037321:	mov    QWORD PTR [rdi],rax
 1037324:	jmp    0x1037329
 1037326:	mov    rdi,rsi
 1037329:	mov    QWORD PTR [rbp-0x48],rdi
 103732d:	test   rdi,rdi
 1037330:	jne    0x103733d
 1037332:	mov    ecx,0x8007000e
 1037337:	call   0x1049210
 103733c:	nop
 103733d:	mov    rcx,QWORD PTR [r15+0x10]
 1037341:	test   rcx,rcx
 1037344:	jne    0x1037351
 1037346:	mov    ecx,0x80004003
 103734b:	call   0x1049210
 1037350:	nop
 1037351:	lea    r8,[rbp-0x48]
 1037355:	lea    rdx,[rsp+0x40]
 103735a:	call   0x10366d0
 103735f:	nop
 1037360:	cmp    QWORD PTR [rsp+0x40],0x0
 1037366:	sete   al
 1037369:	test   al,al
 103736b:	je     0x1037390
 103736d:	mov    rcx,QWORD PTR [r15+0x18]
 1037371:	mov    rax,QWORD PTR [rcx]
 1037374:	mov    BYTE PTR [rsp+0x28],0x1
 1037379:	mov    BYTE PTR [rsp+0x20],0x1
 103737e:	xor    r9d,r9d
 1037381:	xor    r8d,r8d
 1037384:	mov    edx,0xc000c3e0
 1037389:	call   QWORD PTR [rax]
 103738b:	jmp    0x1037915
 1037390:	mov    rcx,r12
 1037393:	call   0x1012a20
 1037398:	mov    r14d,esi
 103739b:	mov    rdi,QWORD PTR [rsp+0x40]
 10373a0:	test   rdi,rdi
 10373a3:	je     0x1037989
 10373a9:	nop    DWORD PTR [rax+0x0]
 10373b0:	mov    DWORD PTR [rbp+0x68],esi
 10373b3:	mov    rax,QWORD PTR [rdi]
 10373b6:	lea    rdx,[rbp+0x68]
 10373ba:	mov    rcx,rdi
 10373bd:	call   QWORD PTR [rax+0x40]
 10373c0:	test   eax,eax
 10373c2:	jns    0x10373d5
 10373c4:	lea    r8,[rip+0xfffffffffffd0625]        # 0x10079f0
 10373cb:	mov    rdx,rdi
 10373ce:	mov    ecx,eax
 10373d0:	call   0x1049230
 10373d5:	cmp    r14d,DWORD PTR [rbp+0x68]
 10373d9:	jge    0x10378af
 10373df:	mov    rdi,QWORD PTR [rsp+0x60]
 10373e4:	test   rdi,rdi
 10373e7:	je     0x1037402
 10373e9:	nop    DWORD PTR [rax+0x0]
 10373f0:	lea    rcx,[rdi+0x10]
 10373f4:	call   QWORD PTR [rip+0xfffffffffffca6ae]        # 0x1001aa8
 10373fa:	mov    rdi,QWORD PTR [rdi]
 10373fd:	test   rdi,rdi
 1037400:	jne    0x10373f0
 1037402:	mov    QWORD PTR [rsp+0x70],rsi
 1037407:	mov    QWORD PTR [rsp+0x78],rsi
 103740c:	mov    QWORD PTR [rsp+0x68],rsi
 1037411:	mov    QWORD PTR [rsp+0x60],rsi
 1037416:	mov    rcx,QWORD PTR [rbp-0x80]
 103741a:	call   0x103f9ae
 103741f:	mov    QWORD PTR [rbp-0x80],rsi
 1037423:	mov    rcx,QWORD PTR [rsp+0x40]
 1037428:	test   rcx,rcx
 103742b:	je     0x10378a4
 1037431:	mov    r8d,r14d
 1037434:	lea    rdx,[rbp-0x30]
 1037438:	call   0x1036870
 103743d:	nop
 103743e:	mov    rcx,QWORD PTR [rax]
 1037441:	cmp    rbx,rcx
 1037444:	je     0x103746b
 1037446:	mov    rdi,rbx
 1037449:	mov    rbx,rcx
 103744c:	mov    QWORD PTR [rsp+0x38],rcx
 1037451:	test   rcx,rcx
 1037454:	je     0x103745c
 1037456:	mov    rax,QWORD PTR [rcx]
 1037459:	call   QWORD PTR [rax+0x8]
 103745c:	test   rdi,rdi
 103745f:	je     0x103746b
 1037461:	mov    rax,QWORD PTR [rdi]
 1037464:	mov    rcx,rdi
 1037467:	call   QWORD PTR [rax+0x10]
 103746a:	nop
 103746b:	mov    rcx,QWORD PTR [rbp-0x30]
 103746f:	test   rcx,rcx
 1037472:	je     0x103747a
 1037474:	mov    rax,QWORD PTR [rcx]
 1037477:	call   QWORD PTR [rax+0x10]
 103747a:	test   rbx,rbx
 103747d:	je     0x1037899
 1037483:	lea    rdx,[rbp-0x40]
 1037487:	mov    rcx,rbx
 103748a:	call   0x1036620
 103748f:	nop
 1037490:	mov    rdx,QWORD PTR [rax]
 1037493:	test   rdx,rdx
 1037496:	je     0x103749d
 1037498:	mov    rdx,QWORD PTR [rdx]
 103749b:	jmp    0x10374a0
 103749d:	mov    rdx,rsi
 10374a0:	lea    rcx,[rip+0xfffffffffffcb5c1]        # 0x1002a68
 10374a7:	call   QWORD PTR [rip+0xfffffffffffca223]        # 0x10016d0
 10374ad:	test   eax,eax
 10374af:	sete   sil
 10374b3:	mov    rdi,QWORD PTR [rbp-0x40]
 10374b7:	test   rdi,rdi
 10374ba:	je     0x10374fe
 10374bc:	or     eax,0xffffffff
 10374bf:	lock xadd DWORD PTR [rdi+0x10],eax
 10374c4:	dec    eax
 10374c6:	jne    0x10374f1
 10374c8:	test   rdi,rdi
 10374cb:	je     0x10374f1
 10374cd:	mov    rcx,QWORD PTR [rdi]
 10374d0:	test   rcx,rcx
 10374d3:	je     0x10374db
 10374d5:	call   QWORD PTR [rip+0xfffffffffffca35d]        # 0x1001838
 10374db:	mov    rcx,QWORD PTR [rdi+0x8]
 10374df:	test   rcx,rcx
 10374e2:	je     0x10374e9
 10374e4:	call   0x103f9c6
 10374e9:	mov    rcx,rdi
 10374ec:	call   0x103f95a
 10374f1:	mov    QWORD PTR [rbp-0x40],0x0
 10374f9:	mov    rbx,QWORD PTR [rsp+0x38]
 10374fe:	test   sil,sil
 1037501:	je     0x1037593
 1037507:	movzx  edx,r13b
 103750b:	lea    rcx,[rsp+0x58]
 1037510:	call   0x1031f30
 1037515:	lea    rdx,[rbp-0x58]
 1037519:	mov    rcx,rbx
 103751c:	call   0x1036620
 1037521:	nop
 1037522:	mov    r9,QWORD PTR [rax]
 1037525:	test   r9,r9
 1037528:	je     0x103752d
 103752a:	mov    r9,QWORD PTR [r9]
 103752d:	mov    rax,QWORD PTR [r15]
 1037530:	lea    r8,[rsp+0x58]
 1037535:	mov    rdx,r12
 1037538:	mov    rcx,r15
 103753b:	call   QWORD PTR [rax+0x48]
 103753e:	nop
 103753f:	mov    rdi,QWORD PTR [rbp-0x58]
 1037543:	test   rdi,rdi
 1037546:	je     0x103787e
 103754c:	or     eax,0xffffffff
 103754f:	lock xadd DWORD PTR [rdi+0x10],eax
 1037554:	dec    eax
 1037556:	jne    0x1037581
 1037558:	test   rdi,rdi
 103755b:	je     0x1037581
 103755d:	mov    rcx,QWORD PTR [rdi]
 1037560:	test   rcx,rcx
 1037563:	je     0x103756b
 1037565:	call   QWORD PTR [rip+0xfffffffffffca2cd]        # 0x1001838
 103756b:	mov    rcx,QWORD PTR [rdi+0x8]
 103756f:	test   rcx,rcx
 1037572:	je     0x1037579
 1037574:	call   0x103f9c6
 1037579:	mov    rcx,rdi
 103757c:	call   0x103f95a
 1037581:	mov    QWORD PTR [rbp-0x58],0x0
 1037589:	mov    rbx,QWORD PTR [rsp+0x38]
 103758e:	jmp    0x103787e
 1037593:	lea    rdx,[rbp-0x70]
 1037597:	mov    rcx,rbx
 103759a:	call   0x1036620
 103759f:	nop
 10375a0:	mov    rdx,QWORD PTR [rax]
 10375a3:	xor    esi,esi
 10375a5:	test   rdx,rdx
 10375a8:	je     0x10375af
 10375aa:	mov    rdx,QWORD PTR [rdx]
 10375ad:	jmp    0x10375b2
 10375af:	mov    rdx,rsi
 10375b2:	lea    rcx,[rsp+0x50]
 10375b7:	call   0x1031d30
 10375bc:	nop
 10375bd:	mov    rdi,QWORD PTR [rbp-0x70]
 10375c1:	test   rdi,rdi
 10375c4:	je     0x1037604
 10375c6:	or     eax,0xffffffff
 10375c9:	lock xadd DWORD PTR [rdi+0x10],eax
 10375ce:	dec    eax
 10375d0:	jne    0x10375fb
 10375d2:	test   rdi,rdi
 10375d5:	je     0x10375fb
 10375d7:	mov    rcx,QWORD PTR [rdi]
 10375da:	test   rcx,rcx
 10375dd:	je     0x10375e5
 10375df:	call   QWORD PTR [rip+0xfffffffffffca253]        # 0x1001838
 10375e5:	mov    rcx,QWORD PTR [rdi+0x8]
 10375e9:	test   rcx,rcx
 10375ec:	je     0x10375f3
 10375ee:	call   0x103f9c6
 10375f3:	mov    rcx,rdi
 10375f6:	call   0x103f95a
 10375fb:	mov    QWORD PTR [rbp-0x70],rsi
 10375ff:	mov    rbx,QWORD PTR [rsp+0x38]
 1037604:	lea    rcx,[rsp+0x50]
 1037609:	call   QWORD PTR [rip+0xfffffffffffca4d9]        # 0x1001ae8
 103760f:	mov    rdx,rax
 1037612:	lea    rcx,[rbp-0x38]
 1037616:	call   0x10353c0
 103761b:	nop
 103761c:	mov    rdx,rax
 103761f:	lea    rcx,[rsp+0x50]
 1037624:	call   QWORD PTR [rip+0xfffffffffffca476]        # 0x1001aa0
 103762a:	nop
 103762b:	lea    rcx,[rbp-0x38]
 103762f:	call   QWORD PTR [rip+0xfffffffffffca473]        # 0x1001aa8
 1037635:	lea    r11,[rip+0xfffffffffffcb404]        # 0x1002a40
 103763c:	mov    QWORD PTR [rbp-0x28],r11
 1037640:	mov    QWORD PTR [rbp-0x20],rsi
 1037644:	mov    DWORD PTR [rbp-0x18],0x11
 103764b:	mov    QWORD PTR [rbp-0x10],rsi
 103764f:	mov    QWORD PTR [rbp-0x8],rsi
 1037653:	mov    QWORD PTR [rbp+0x0],rsi
 1037657:	mov    QWORD PTR [rbp+0x8],0xa
 103765f:	lea    rcx,[rbp-0x28]
 1037663:	call   0x1012a20
 1037668:	test   r13b,r13b
 103766b:	jne    0x10376bc
 103766d:	lea    rdx,[rbp-0x50]
 1037671:	mov    rcx,rbx
 1037674:	call   0x1036620
 1037679:	nop
 103767a:	or     DWORD PTR [rsp+0x30],0x1
 103767f:	mov    rdx,QWORD PTR [rax]
 1037682:	test   rdx,rdx
 1037685:	je     0x103768c
 1037687:	mov    rdx,QWORD PTR [rdx]
 103768a:	jmp    0x103768f
 103768c:	mov    rdx,rsi
 103768f:	lea    rcx,[rip+0xfffffffffffcb3d6]        # 0x1002a6c
 1037696:	call   QWORD PTR [rip+0xfffffffffffca034]        # 0x10016d0
 103769c:	test   eax,eax
 103769e:	jne    0x10376bc
 10376a0:	lea    rcx,[rsp+0x50]
 10376a5:	call   QWORD PTR [rip+0xfffffffffffca43d]        # 0x1001ae8
 10376ab:	mov    rcx,rax
 10376ae:	call   0x1031de0
 10376b3:	test   al,al
 10376b5:	je     0x10376bc
 10376b7:	mov    sil,0x1
 10376ba:	jmp    0x10376bf
 10376bc:	xor    sil,sil
 10376bf:	test   BYTE PTR [rsp+0x30],0x1
 10376c4:	je     0x1037716
 10376c6:	and    DWORD PTR [rsp+0x30],0xfffffffe
 10376cb:	mov    rdi,QWORD PTR [rbp-0x50]
 10376cf:	test   rdi,rdi
 10376d2:	je     0x1037716
 10376d4:	or     eax,0xffffffff
 10376d7:	lock xadd DWORD PTR [rdi+0x10],eax
 10376dc:	dec    eax
 10376de:	jne    0x1037709
 10376e0:	test   rdi,rdi
 10376e3:	je     0x1037709
 10376e5:	mov    rcx,QWORD PTR [rdi]
 10376e8:	test   rcx,rcx
 10376eb:	je     0x10376f3
 10376ed:	call   QWORD PTR [rip+0xfffffffffffca145]        # 0x1001838
 10376f3:	mov    rcx,QWORD PTR [rdi+0x8]
 10376f7:	test   rcx,rcx
 10376fa:	je     0x1037701
 10376fc:	call   0x103f9c6
 1037701:	mov    rcx,rdi
 1037704:	call   0x103f95a
 1037709:	mov    QWORD PTR [rbp-0x50],0x0
 1037711:	mov    rbx,QWORD PTR [rsp+0x38]
 1037716:	test   sil,sil
 1037719:	je     0x10377d4
 103771f:	lea    rcx,[rsp+0x50]
 1037724:	call   QWORD PTR [rip+0xfffffffffffca3be]        # 0x1001ae8
 103772a:	mov    rcx,rax
 103772d:	lea    r8,[rbp-0x28]
 1037731:	lea    rdx,[rsp+0x58]
 1037736:	call   0x1032290
 103773b:	test   al,al
 103773d:	je     0x10377b6
 103773f:	lea    rdx,[rbp-0x60]
 1037743:	mov    rcx,rbx
 1037746:	call   0x1036620
 103774b:	nop
 103774c:	mov    r9,QWORD PTR [rax]
 103774f:	test   r9,r9
 1037752:	je     0x1037757
 1037754:	mov    r9,QWORD PTR [r9]
 1037757:	mov    rax,QWORD PTR [r15]
 103775a:	lea    r8,[rsp+0x58]
 103775f:	mov    rdx,r12
 1037762:	mov    rcx,r15
 1037765:	call   QWORD PTR [rax+0x48]
 1037768:	nop
 1037769:	mov    rdi,QWORD PTR [rbp-0x60]
 103776d:	test   rdi,rdi
 1037770:	je     0x10377d4
 1037772:	or     eax,0xffffffff
 1037775:	lock xadd DWORD PTR [rdi+0x10],eax
 103777a:	dec    eax
 103777c:	jne    0x10377a7
 103777e:	test   rdi,rdi
 1037781:	je     0x10377a7
 1037783:	mov    rcx,QWORD PTR [rdi]
 1037786:	test   rcx,rcx
 1037789:	je     0x1037791
 103778b:	call   QWORD PTR [rip+0xfffffffffffca0a7]        # 0x1001838
 1037791:	mov    rcx,QWORD PTR [rdi+0x8]
 1037795:	test   rcx,rcx
 1037798:	je     0x103779f
 103779a:	call   0x103f9c6
 103779f:	mov    rcx,rdi
 10377a2:	call   0x103f95a
 10377a7:	mov    QWORD PTR [rbp-0x60],0x0
 10377af:	mov    rbx,QWORD PTR [rsp+0x38]
 10377b4:	jmp    0x10377d4
 10377b6:	mov    rcx,QWORD PTR [r15+0x18]
 10377ba:	mov    rax,QWORD PTR [rcx]
 10377bd:	mov    BYTE PTR [rsp+0x28],0x1
 10377c2:	mov    BYTE PTR [rsp+0x20],0x1
 10377c7:	xor    r9d,r9d
 10377ca:	xor    r8d,r8d
 10377cd:	mov    edx,0xc000c487
 10377d2:	call   QWORD PTR [rax]
 10377d4:	lea    rdx,[rbp-0x68]
 10377d8:	mov    rcx,rbx
 10377db:	call   0x1036620
 10377e0:	nop
 10377e1:	mov    rcx,QWORD PTR [rax]
 10377e4:	test   rcx,rcx
 10377e7:	je     0x10377ee
 10377e9:	mov    rdi,QWORD PTR [rcx]
 10377ec:	jmp    0x10377f0
 10377ee:	xor    edi,edi
 10377f0:	lea    rcx,[rsp+0x50]
 10377f5:	call   QWORD PTR [rip+0xfffffffffffca2ed]        # 0x1001ae8
 10377fb:	mov    rdx,rax
 10377fe:	mov    rcx,r12
 1037801:	call   0x100ea00
 1037806:	mov    rcx,rax
 1037809:	mov    rdx,rdi
 103780c:	call   QWORD PTR [rip+0xfffffffffffca286]        # 0x1001a98
 1037812:	nop
 1037813:	mov    rdi,QWORD PTR [rbp-0x68]
 1037817:	test   rdi,rdi
 103781a:	je     0x103785e
 103781c:	or     eax,0xffffffff
 103781f:	lock xadd DWORD PTR [rdi+0x10],eax
 1037824:	dec    eax
 1037826:	jne    0x1037851
 1037828:	test   rdi,rdi
 103782b:	je     0x1037851
 103782d:	mov    rcx,QWORD PTR [rdi]
 1037830:	test   rcx,rcx
 1037833:	je     0x103783b
 1037835:	call   QWORD PTR [rip+0xfffffffffffc9ffd]        # 0x1001838
 103783b:	mov    rcx,QWORD PTR [rdi+0x8]
 103783f:	test   rcx,rcx
 1037842:	je     0x1037849
 1037844:	call   0x103f9c6
 1037849:	mov    rcx,rdi
 103784c:	call   0x103f95a
 1037851:	mov    QWORD PTR [rbp-0x68],0x0
 1037859:	mov    rbx,QWORD PTR [rsp+0x38]
 103785e:	lea    rax,[rip+0xfffffffffffcb1db]        # 0x1002a40
 1037865:	mov    QWORD PTR [rbp-0x28],rax
 1037869:	lea    rcx,[rbp-0x28]
 103786d:	call   0x1012a20
 1037872:	nop
 1037873:	lea    rcx,[rsp+0x50]
 1037878:	call   QWORD PTR [rip+0xfffffffffffca22a]        # 0x1001aa8
 103787e:	inc    r14d
 1037881:	mov    rdi,QWORD PTR [rsp+0x40]
 1037886:	test   rdi,rdi
 1037889:	mov    esi,0x0
 103788e:	jne    0x10373b0
 1037894:	jmp    0x1037989
 1037899:	mov    ecx,0x80004003
 103789e:	call   0x1049210
 10378a3:	int3   
 10378a4:	mov    ecx,0x80004003
 10378a9:	call   0x1049210
 10378ae:	int3   
 10378af:	mov    rcx,QWORD PTR [rsp+0x40]
 10378b4:	test   rcx,rcx
 10378b7:	sete   al
 10378ba:	test   al,al
 10378bc:	sete   al
 10378bf:	test   al,al
 10378c1:	je     0x10378de
 10378c3:	test   rcx,rcx
 10378c6:	jne    0x10378d3
 10378c8:	mov    ecx,0x80004003
 10378cd:	call   0x1049210
 10378d2:	int3   
 10378d3:	mov    rax,QWORD PTR [rcx]
 10378d6:	call   QWORD PTR [rax+0x10]
 10378d9:	mov    QWORD PTR [rsp+0x40],rsi
 10378de:	test   rbx,rbx
 10378e1:	sete   al
 10378e4:	test   al,al
 10378e6:	sete   al
 10378e9:	test   al,al
 10378eb:	je     0x103790e
 10378ed:	test   rbx,rbx
 10378f0:	jne    0x10378fd
 10378f2:	mov    ecx,0x80004003
 10378f7:	call   0x1049210
 10378fc:	int3   
 10378fd:	mov    rax,QWORD PTR [rbx]
 1037900:	mov    rcx,rbx
 1037903:	call   QWORD PTR [rax+0x10]
 1037906:	mov    rbx,rsi
 1037909:	mov    QWORD PTR [rsp+0x38],rbx
 103790e:	lea    r14,[rip+0xfffffffffffca50b]        # 0x1001e20
 1037915:	cmp    QWORD PTR [r12+0x18],0x0
 103791b:	setne  dil
 103791f:	mov    rcx,QWORD PTR [rsp+0x40]
 1037924:	test   rcx,rcx
 1037927:	je     0x1037930
 1037929:	mov    rax,QWORD PTR [rcx]
 103792c:	call   QWORD PTR [rax+0x10]
 103792f:	nop
 1037930:	test   rbx,rbx
 1037933:	je     0x103793f
 1037935:	mov    rax,QWORD PTR [rbx]
 1037938:	mov    rcx,rbx
 103793b:	call   QWORD PTR [rax+0x10]
 103793e:	nop
 103793f:	mov    QWORD PTR [rsp+0x58],r14
 1037944:	mov    rbx,QWORD PTR [rsp+0x60]
 1037949:	test   rbx,rbx
 103794c:	je     0x1037962
 103794e:	xchg   ax,ax
 1037950:	lea    rcx,[rbx+0x10]
 1037954:	call   QWORD PTR [rip+0xfffffffffffca14e]        # 0x1001aa8
 103795a:	mov    rbx,QWORD PTR [rbx]
 103795d:	test   rbx,rbx
 1037960:	jne    0x1037950
 1037962:	mov    QWORD PTR [rsp+0x70],rsi
 1037967:	mov    QWORD PTR [rsp+0x78],rsi
 103796c:	mov    QWORD PTR [rsp+0x68],rsi
 1037971:	mov    QWORD PTR [rsp+0x60],rsi
 1037976:	mov    rcx,QWORD PTR [rbp-0x80]
 103797a:	call   0x103f9ae
 103797f:	mov    QWORD PTR [rbp-0x80],rsi
 1037983:	movzx  eax,dil
 1037987:	jmp    0x1037994
 1037989:	mov    ecx,0x80004003
 103798e:	call   0x1049210
 1037993:	nop
 1037994:	lea    r11,[rsp+0x120]
 103799c:	mov    rbx,QWORD PTR [r11+0x30]
 10379a0:	mov    rsi,QWORD PTR [r11+0x38]
 10379a4:	mov    rdi,QWORD PTR [r11+0x40]
 10379a8:	mov    rsp,r11
 10379ab:	pop    r15
 10379ad:	pop    r14
 10379af:	pop    r13
 10379b1:	pop    r12
 10379b3:	pop    rbp
 10379b4:	ret    
 10379b5:	int3   
 10379b6:	int3   
 10379b7:	int3   
 10379b8:	int3   
 10379b9:	int3   
 10379ba:	int3   
 10379bb:	int3   
 10379bc:	int3   
 10379bd:	int3   
 10379be:	int3   
 10379bf:	int3   
 10379c0:	rex push rbp
 10379c2:	push   rbx
 10379c3:	push   rsi
 10379c4:	push   rdi
 10379c5:	push   r12
 10379c7:	push   r13
 10379c9:	push   r14
 10379cb:	push   r15
 10379cd:	lea    rbp,[rsp-0x968]
 10379d5:	sub    rsp,0xa68
 10379dc:	mov    QWORD PTR [rbp-0x10],0xfffffffffffffffe
 10379e4:	mov    rax,QWORD PTR [rip+0x2be85]        # 0x1063870
 10379eb:	xor    rax,rsp
 10379ee:	mov    QWORD PTR [rbp+0x950],rax
 10379f5:	mov    rsi,r9
 10379f8:	mov    r15,r8
 10379fb:	mov    r12,rdx
 10379fe:	mov    QWORD PTR [rbp-0x40],rdx
 1037a02:	mov    r14,rcx
 1037a05:	mov    r13,QWORD PTR [rbp+0x9d0]
 1037a0c:	lea    rcx,[rbp+0x0]
 1037a10:	lea    rdx,[rip+0xfffffffffffd0159]        # 0x1007b70
 1037a17:	mov    r8d,0x98
 1037a1d:	call   0x10402e4
 1037a22:	lea    rcx,[rbp+0xa0]
 1037a29:	lea    rdx,[rip+0xfffffffffffd01e0]        # 0x1007c10
 1037a30:	mov    r8d,0x9a
 1037a36:	call   0x10402e4
 1037a3b:	xor    eax,eax
 1037a3d:	mov    ebx,eax
 1037a3f:	mov    QWORD PTR [rsp+0x58],rax
 1037a44:	mov    WORD PTR [rbp+0x940],ax
 1037a4b:	mov    rdx,r12
 1037a4e:	mov    rcx,rsi
 1037a51:	call   0x100ea00
 1037a56:	mov    rax,QWORD PTR [rax]
 1037a59:	mov    QWORD PTR [rsp+0x20],rax
 1037a5e:	lea    r9,[rbp+0x0]
 1037a62:	mov    edx,0x401
 1037a67:	lea    r8d,[rdx-0x1]
 1037a6b:	lea    rcx,[rbp+0x140]
 1037a72:	call   QWORD PTR [rip+0xfffffffffffc9cd8]        # 0x1001750
 1037a78:	lea    r11,[rbp-0x60]
 1037a7c:	mov    QWORD PTR [rbp-0x80],r11
 1037a80:	lea    ecx,[rbx+0x18]
 1037a83:	call   0x103f9d2
 1037a88:	mov    rdi,rax
 1037a8b:	mov    QWORD PTR [rbp-0x70],rax
 1037a8f:	test   rax,rax
 1037a92:	je     0x1037abf
 1037a94:	mov    QWORD PTR [rax+0x8],rbx
 1037a98:	mov    DWORD PTR [rax+0x10],0x1
 1037a9f:	lea    rcx,[rbp+0x140]
 1037aa6:	call   QWORD PTR [rip+0xfffffffffffc9d94]        # 0x1001840
 1037aac:	mov    QWORD PTR [rdi],rax
 1037aaf:	test   rax,rax
 1037ab2:	jne    0x1037ac1
 1037ab4:	mov    ecx,0x8007000e
 1037ab9:	call   0x1049210
 1037abe:	int3   
 1037abf:	xor    edi,edi
 1037ac1:	mov    QWORD PTR [rbp-0x60],rdi
 1037ac5:	test   rdi,rdi
 1037ac8:	jne    0x1037ad5
 1037aca:	mov    ecx,0x8007000e
 1037acf:	call   0x1049210
 1037ad4:	nop
 1037ad5:	mov    rcx,QWORD PTR [r14+0x10]
 1037ad9:	test   rcx,rcx
 1037adc:	jne    0x1037ae9
 1037ade:	mov    ecx,0x80004003
 1037ae3:	call   0x1049210
 1037ae8:	nop
 1037ae9:	lea    r8,[rbp-0x60]
 1037aed:	lea    rdx,[rsp+0x48]
 1037af2:	call   0x10366d0
 1037af7:	nop
 1037af8:	mov    rdx,r12
 1037afb:	mov    rcx,rsi
 1037afe:	call   0x100ea00
 1037b03:	mov    rax,QWORD PTR [rax]
 1037b06:	mov    QWORD PTR [rsp+0x20],rax
 1037b0b:	lea    r9,[rbp+0xa0]
 1037b12:	mov    edx,0x401
 1037b17:	lea    r8d,[rdx-0x1]
 1037b1b:	lea    rcx,[rbp+0x140]
 1037b22:	call   QWORD PTR [rip+0xfffffffffffc9c28]        # 0x1001750
 1037b28:	lea    r11,[rbp-0x50]
 1037b2c:	mov    QWORD PTR [rbp-0x80],r11
 1037b30:	mov    ecx,0x18
 1037b35:	call   0x103f9d2
 1037b3a:	mov    rdi,rax
 1037b3d:	mov    QWORD PTR [rbp-0x70],rax
 1037b41:	xor    r12d,r12d
 1037b44:	test   rax,rax
 1037b47:	je     0x1037b74
 1037b49:	mov    QWORD PTR [rax+0x8],r12
 1037b4d:	mov    DWORD PTR [rax+0x10],0x1
 1037b54:	lea    rcx,[rbp+0x140]
 1037b5b:	call   QWORD PTR [rip+0xfffffffffffc9cdf]        # 0x1001840
 1037b61:	mov    QWORD PTR [rdi],rax
 1037b64:	test   rax,rax
 1037b67:	jne    0x1037b77
 1037b69:	mov    ecx,0x8007000e
 1037b6e:	call   0x1049210
 1037b73:	int3   
 1037b74:	mov    rdi,r12
 1037b77:	mov    QWORD PTR [rbp-0x50],rdi
 1037b7b:	test   rdi,rdi
 1037b7e:	jne    0x1037b8b
 1037b80:	mov    ecx,0x8007000e
 1037b85:	call   0x1049210
 1037b8a:	nop
 1037b8b:	mov    rcx,QWORD PTR [r14+0x10]
 1037b8f:	test   rcx,rcx
 1037b92:	jne    0x1037b9f
 1037b94:	mov    ecx,0x80004003
 1037b99:	call   0x1049210
 1037b9e:	nop
 1037b9f:	lea    r8,[rbp-0x50]
 1037ba3:	lea    rdx,[rsp+0x68]
 1037ba8:	call   0x10366d0
 1037bad:	nop
 1037bae:	mov    rdi,QWORD PTR [rsp+0x48]
 1037bb3:	test   rdi,rdi
 1037bb6:	sete   al
 1037bb9:	test   al,al
 1037bbb:	jne    0x1038119
 1037bc1:	cmp    QWORD PTR [rsp+0x68],0x0
 1037bc7:	sete   al
 1037bca:	test   al,al
 1037bcc:	jne    0x1038119
 1037bd2:	test   rdi,rdi
 1037bd5:	jne    0x1037be2
 1037bd7:	mov    ecx,0x80004003
 1037bdc:	call   0x1049210
 1037be1:	int3   
 1037be2:	mov    DWORD PTR [rsp+0x64],r12d
 1037be7:	mov    rax,QWORD PTR [rdi]
 1037bea:	lea    rdx,[rsp+0x64]
 1037bef:	mov    rcx,rdi
 1037bf2:	call   QWORD PTR [rax+0x40]
 1037bf5:	test   eax,eax
 1037bf7:	jns    0x1037c0a
 1037bf9:	lea    r8,[rip+0xfffffffffffcfdf0]        # 0x10079f0
 1037c00:	mov    rdx,rdi
 1037c03:	mov    ecx,eax
 1037c05:	call   0x1049230
 1037c0a:	mov    esi,DWORD PTR [rsp+0x64]
 1037c0e:	mov    rdi,QWORD PTR [rsp+0x68]
 1037c13:	test   rdi,rdi
 1037c16:	jne    0x1037c23
 1037c18:	mov    ecx,0x80004003
 1037c1d:	call   0x1049210
 1037c22:	int3   
 1037c23:	mov    DWORD PTR [rsp+0x60],r12d
 1037c28:	mov    rax,QWORD PTR [rdi]
 1037c2b:	lea    rdx,[rsp+0x60]
 1037c30:	mov    rcx,rdi
 1037c33:	call   QWORD PTR [rax+0x40]
 1037c36:	test   eax,eax
 1037c38:	jns    0x1037c4b
 1037c3a:	lea    r8,[rip+0xfffffffffffcfdaf]        # 0x10079f0
 1037c41:	mov    rdx,rdi
 1037c44:	mov    ecx,eax
 1037c46:	call   0x1049230
 1037c4b:	cmp    esi,DWORD PTR [rsp+0x60]
 1037c4f:	jne    0x1038119
 1037c55:	mov    rcx,r15
 1037c58:	call   0x100c3d0
 1037c5d:	mov    rcx,r13
 1037c60:	call   0x100c3d0
 1037c65:	xor    eax,eax
 1037c67:	mov    esi,eax
 1037c69:	mov    rdi,QWORD PTR [rsp+0x48]
 1037c6e:	test   rdi,rdi
 1037c71:	je     0x103810e
 1037c77:	movzx  r12d,BYTE PTR [rbp+0x9d8]
 1037c7f:	nop
 1037c80:	mov    DWORD PTR [rbp-0x78],eax
 1037c83:	mov    rax,QWORD PTR [rdi]
 1037c86:	lea    rdx,[rbp-0x78]
 1037c8a:	mov    rcx,rdi
 1037c8d:	call   QWORD PTR [rax+0x40]
 1037c90:	test   eax,eax
 1037c92:	jns    0x1037ca5
 1037c94:	lea    r8,[rip+0xfffffffffffcfd55]        # 0x10079f0
 1037c9b:	mov    rdx,rdi
 1037c9e:	mov    ecx,eax
 1037ca0:	call   0x1049230
 1037ca5:	cmp    esi,DWORD PTR [rbp-0x78]
 1037ca8:	jge    0x10380aa
 1037cae:	lea    rcx,[rsp+0x40]
 1037cb3:	call   QWORD PTR [rip+0xfffffffffffc9e07]        # 0x1001ac0
 1037cb9:	nop
 1037cba:	lea    rcx,[rsp+0x50]
 1037cbf:	call   QWORD PTR [rip+0xfffffffffffc9dfb]        # 0x1001ac0
 1037cc5:	nop
 1037cc6:	mov    rcx,QWORD PTR [rsp+0x48]
 1037ccb:	test   rcx,rcx
 1037cce:	je     0x103809f
 1037cd4:	mov    r8d,esi
 1037cd7:	lea    rdx,[rbp-0x18]
 1037cdb:	call   0x1036870
 1037ce0:	nop
 1037ce1:	mov    rcx,QWORD PTR [rax]
 1037ce4:	cmp    rbx,rcx
 1037ce7:	je     0x1037d0e
 1037ce9:	mov    rdi,rbx
 1037cec:	mov    rbx,rcx
 1037cef:	mov    QWORD PTR [rsp+0x58],rcx
 1037cf4:	test   rcx,rcx
 1037cf7:	je     0x1037cff
 1037cf9:	mov    rax,QWORD PTR [rcx]
 1037cfc:	call   QWORD PTR [rax+0x8]
 1037cff:	test   rdi,rdi
 1037d02:	je     0x1037d0e
 1037d04:	mov    rax,QWORD PTR [rdi]
 1037d07:	mov    rcx,rdi
 1037d0a:	call   QWORD PTR [rax+0x10]
 1037d0d:	nop
 1037d0e:	mov    rcx,QWORD PTR [rbp-0x18]
 1037d12:	test   rcx,rcx
 1037d15:	je     0x1037d1d
 1037d17:	mov    rax,QWORD PTR [rcx]
 1037d1a:	call   QWORD PTR [rax+0x10]
 1037d1d:	test   rbx,rbx
 1037d20:	je     0x1038094
 1037d26:	lea    rdx,[rbp-0x58]
 1037d2a:	mov    rcx,rbx
 1037d2d:	call   0x1036620
 1037d32:	nop
 1037d33:	mov    rcx,QWORD PTR [rax]
 1037d36:	test   rcx,rcx
 1037d39:	je     0x1037d40
 1037d3b:	mov    rdx,QWORD PTR [rcx]
 1037d3e:	jmp    0x1037d42
 1037d40:	xor    edx,edx
 1037d42:	lea    rcx,[rbp-0x20]
 1037d46:	call   QWORD PTR [rip+0xfffffffffffc9d64]        # 0x1001ab0
 1037d4c:	nop
 1037d4d:	mov    rdx,rax
 1037d50:	lea    rcx,[rsp+0x50]
 1037d55:	call   QWORD PTR [rip+0xfffffffffffc9d45]        # 0x1001aa0
 1037d5b:	nop
 1037d5c:	lea    rcx,[rbp-0x20]
 1037d60:	call   QWORD PTR [rip+0xfffffffffffc9d42]        # 0x1001aa8
 1037d66:	nop
 1037d67:	mov    rdi,QWORD PTR [rbp-0x58]
 1037d6b:	test   rdi,rdi
 1037d6e:	je     0x1037db2
 1037d70:	or     eax,0xffffffff
 1037d73:	lock xadd DWORD PTR [rdi+0x10],eax
 1037d78:	dec    eax
 1037d7a:	jne    0x1037da5
 1037d7c:	test   rdi,rdi
 1037d7f:	je     0x1037da5
 1037d81:	mov    rcx,QWORD PTR [rdi]
 1037d84:	test   rcx,rcx
 1037d87:	je     0x1037d8f
 1037d89:	call   QWORD PTR [rip+0xfffffffffffc9aa9]        # 0x1001838
 1037d8f:	mov    rcx,QWORD PTR [rdi+0x8]
 1037d93:	test   rcx,rcx
 1037d96:	je     0x1037d9d
 1037d98:	call   0x103f9c6
 1037d9d:	mov    rcx,rdi
 1037da0:	call   0x103f95a
 1037da5:	mov    QWORD PTR [rbp-0x58],0x0
 1037dad:	mov    rbx,QWORD PTR [rsp+0x58]
 1037db2:	lea    rcx,[rsp+0x50]
 1037db7:	call   QWORD PTR [rip+0xfffffffffffc9b83]        # 0x1001940
 1037dbd:	test   al,al
 1037dbf:	je     0x1037df4
 1037dc1:	mov    rcx,QWORD PTR [r14+0x18]
 1037dc5:	mov    rax,QWORD PTR [rcx]
 1037dc8:	mov    BYTE PTR [rsp+0x28],0x1
 1037dcd:	mov    BYTE PTR [rsp+0x20],0x1
 1037dd2:	mov    r9d,0x2
 1037dd8:	xor    r8d,r8d
 1037ddb:	mov    edx,0xc000c4a8
 1037de0:	call   QWORD PTR [rax]
 1037de2:	nop
 1037de3:	lea    rcx,[rsp+0x50]
 1037de8:	call   QWORD PTR [rip+0xfffffffffffc9cba]        # 0x1001aa8
 1037dee:	nop
 1037def:	jmp    0x1038059
 1037df4:	mov    rcx,QWORD PTR [rsp+0x68]
 1037df9:	test   rcx,rcx
 1037dfc:	je     0x1038089
 1037e02:	mov    r8d,esi
 1037e05:	lea    rdx,[rbp-0x38]
 1037e09:	call   0x1036870
 1037e0e:	nop
 1037e0f:	mov    rcx,QWORD PTR [rax]
 1037e12:	cmp    rbx,rcx
 1037e15:	je     0x1037e3c
 1037e17:	mov    rdi,rbx
 1037e1a:	mov    rbx,rcx
 1037e1d:	mov    QWORD PTR [rsp+0x58],rcx
 1037e22:	test   rcx,rcx
 1037e25:	je     0x1037e2d
 1037e27:	mov    rax,QWORD PTR [rcx]
 1037e2a:	call   QWORD PTR [rax+0x8]
 1037e2d:	test   rdi,rdi
 1037e30:	je     0x1037e3c
 1037e32:	mov    rax,QWORD PTR [rdi]
 1037e35:	mov    rcx,rdi
 1037e38:	call   QWORD PTR [rax+0x10]
 1037e3b:	nop
 1037e3c:	mov    rcx,QWORD PTR [rbp-0x38]
 1037e40:	test   rcx,rcx
 1037e43:	je     0x1037e4b
 1037e45:	mov    rax,QWORD PTR [rcx]
 1037e48:	call   QWORD PTR [rax+0x10]
 1037e4b:	test   rbx,rbx
 1037e4e:	je     0x103807e
 1037e54:	lea    rdx,[rbp-0x68]
 1037e58:	mov    rcx,rbx
 1037e5b:	call   0x1036620
 1037e60:	nop
 1037e61:	mov    rcx,QWORD PTR [rax]
 1037e64:	test   rcx,rcx
 1037e67:	je     0x1037e6e
 1037e69:	mov    rdx,QWORD PTR [rcx]
 1037e6c:	jmp    0x1037e70
 1037e6e:	xor    edx,edx
 1037e70:	lea    rcx,[rbp-0x28]
 1037e74:	call   QWORD PTR [rip+0xfffffffffffc9c36]        # 0x1001ab0
 1037e7a:	nop
 1037e7b:	mov    rdx,rax
 1037e7e:	lea    rcx,[rsp+0x40]
 1037e83:	call   QWORD PTR [rip+0xfffffffffffc9c17]        # 0x1001aa0
 1037e89:	nop
 1037e8a:	lea    rcx,[rbp-0x28]
 1037e8e:	call   QWORD PTR [rip+0xfffffffffffc9c14]        # 0x1001aa8
 1037e94:	nop
 1037e95:	mov    rdi,QWORD PTR [rbp-0x68]
 1037e99:	test   rdi,rdi
 1037e9c:	je     0x1037ee0
 1037e9e:	or     eax,0xffffffff
 1037ea1:	lock xadd DWORD PTR [rdi+0x10],eax
 1037ea6:	dec    eax
 1037ea8:	jne    0x1037ed3
 1037eaa:	test   rdi,rdi
 1037ead:	je     0x1037ed3
 1037eaf:	mov    rcx,QWORD PTR [rdi]
 1037eb2:	test   rcx,rcx
 1037eb5:	je     0x1037ebd
 1037eb7:	call   QWORD PTR [rip+0xfffffffffffc997b]        # 0x1001838
 1037ebd:	mov    rcx,QWORD PTR [rdi+0x8]
 1037ec1:	test   rcx,rcx
 1037ec4:	je     0x1037ecb
 1037ec6:	call   0x103f9c6
 1037ecb:	mov    rcx,rdi
 1037ece:	call   0x103f95a
 1037ed3:	mov    QWORD PTR [rbp-0x68],0x0
 1037edb:	mov    rbx,QWORD PTR [rsp+0x58]
 1037ee0:	lea    rdx,[rip+0xfffffffffffcfdc9]        # 0x1007cb0
 1037ee7:	lea    rcx,[rsp+0x40]
 1037eec:	call   QWORD PTR [rip+0xfffffffffffc9b6e]        # 0x1001a60
 1037ef2:	test   eax,eax
 1037ef4:	jne    0x1037f08
 1037ef6:	lea    rdx,[rip+0xfffffffffffcfdc3]        # 0x1007cc0
 1037efd:	lea    rcx,[rsp+0x40]
 1037f02:	call   QWORD PTR [rip+0xfffffffffffc9b90]        # 0x1001a98
 1037f08:	lea    rcx,[rsp+0x40]
 1037f0d:	call   QWORD PTR [rip+0xfffffffffffc9a2d]        # 0x1001940
 1037f13:	test   al,al
 1037f15:	jne    0x1037fc8
 1037f1b:	lea    rcx,[rsp+0x40]
 1037f20:	call   QWORD PTR [rip+0xfffffffffffc9bc2]        # 0x1001ae8
 1037f26:	mov    rcx,rax
 1037f29:	lea    rdx,[rip+0xfffffffffffcab38]        # 0x1002a68
 1037f30:	call   QWORD PTR [rip+0xfffffffffffc979a]        # 0x10016d0
 1037f36:	test   eax,eax
 1037f38:	je     0x1037f62
 1037f3a:	lea    rax,[rbp-0x30]
 1037f3e:	mov    QWORD PTR [rsp+0x70],rax
 1037f43:	lea    rdx,[rsp+0x40]
 1037f48:	lea    rcx,[rbp-0x30]
 1037f4c:	call   QWORD PTR [rip+0xfffffffffffc9a66]        # 0x10019b8
 1037f52:	nop
 1037f53:	mov    rdx,rax
 1037f56:	mov    rcx,r14
 1037f59:	call   0x103bcd0
 1037f5e:	test   al,al
 1037f60:	je     0x1037fc8
 1037f62:	lea    rax,[rbp-0x48]
 1037f66:	mov    QWORD PTR [rsp+0x70],rax
 1037f6b:	lea    rax,[rbp-0x70]
 1037f6f:	mov    QWORD PTR [rbp-0x78],rax
 1037f73:	lea    rdx,[rsp+0x40]
 1037f78:	lea    rcx,[rbp-0x48]
 1037f7c:	call   QWORD PTR [rip+0xfffffffffffc9a36]        # 0x10019b8
 1037f82:	mov    rdi,rax
 1037f85:	lea    rdx,[rsp+0x50]
 1037f8a:	lea    rcx,[rbp-0x70]
 1037f8e:	call   QWORD PTR [rip+0xfffffffffffc9a24]        # 0x10019b8
 1037f94:	nop
 1037f95:	mov    BYTE PTR [rsp+0x30],r12b
 1037f9a:	mov    QWORD PTR [rsp+0x28],r13
 1037f9f:	mov    QWORD PTR [rsp+0x20],r15
 1037fa4:	mov    r9,rdi
 1037fa7:	mov    r8,rax
 1037faa:	mov    rdx,QWORD PTR [rbp-0x40]
 1037fae:	mov    rcx,r14
 1037fb1:	call   0x103c870
 1037fb6:	nop
 1037fb7:	lea    rcx,[rsp+0x50]
 1037fbc:	call   QWORD PTR [rip+0xfffffffffffc9ae6]        # 0x1001aa8
 1037fc2:	nop
 1037fc3:	jmp    0x1038059
 1037fc8:	lea    rcx,[rsp+0x78]
 1037fcd:	call   QWORD PTR [rip+0xfffffffffffc9aed]        # 0x1001ac0
 1037fd3:	nop
 1037fd4:	mov    edx,0xc000c40b
 1037fd9:	lea    rcx,[rbp-0x80]
 1037fdd:	call   0x10132d0
 1037fe2:	nop
 1037fe3:	mov    rcx,rax
 1037fe6:	call   QWORD PTR [rip+0xfffffffffffc9afc]        # 0x1001ae8
 1037fec:	mov    rdx,rax
 1037fef:	mov    r8,QWORD PTR [rsp+0x40]
 1037ff4:	lea    rcx,[rsp+0x78]
 1037ff9:	call   QWORD PTR [rip+0xfffffffffffc9a41]        # 0x1001a40
 1037fff:	nop
 1038000:	lea    rcx,[rbp-0x80]
 1038004:	call   QWORD PTR [rip+0xfffffffffffc9a9e]        # 0x1001aa8
 103800a:	mov    rax,QWORD PTR [r14+0x18]
 103800e:	mov    rdi,QWORD PTR [rax]
 1038011:	lea    rcx,[rsp+0x78]
 1038016:	call   QWORD PTR [rip+0xfffffffffffc9acc]        # 0x1001ae8
 103801c:	mov    r8,rax
 103801f:	mov    BYTE PTR [rsp+0x30],0x1
 1038024:	mov    BYTE PTR [rsp+0x28],0x1
 1038029:	mov    DWORD PTR [rsp+0x20],0x2
 1038031:	xor    r9d,r9d
 1038034:	mov    edx,0xc000c40b
 1038039:	mov    rcx,QWORD PTR [r14+0x18]
 103803d:	call   QWORD PTR [rdi+0x8]
 1038040:	nop
 1038041:	lea    rcx,[rsp+0x78]
 1038046:	call   QWORD PTR [rip+0xfffffffffffc9a5c]        # 0x1001aa8
 103804c:	nop
 103804d:	lea    rcx,[rsp+0x50]
 1038052:	call   QWORD PTR [rip+0xfffffffffffc9a50]        # 0x1001aa8
 1038058:	nop
 1038059:	lea    rcx,[rsp+0x40]
 103805e:	call   QWORD PTR [rip+0xfffffffffffc9a44]        # 0x1001aa8
 1038064:	inc    esi
 1038066:	mov    rdi,QWORD PTR [rsp+0x48]
 103806b:	test   rdi,rdi
 103806e:	mov    eax,0x0
 1038073:	jne    0x1037c80
 1038079:	jmp    0x103810e
 103807e:	mov    ecx,0x80004003
 1038083:	call   0x1049210
 1038088:	int3   
 1038089:	mov    ecx,0x80004003
 103808e:	call   0x1049210
 1038093:	int3   
 1038094:	mov    ecx,0x80004003
 1038099:	call   0x1049210
 103809e:	int3   
 103809f:	mov    ecx,0x80004003
 10380a4:	call   0x1049210
 10380a9:	nop
 10380aa:	mov    rcx,QWORD PTR [rsp+0x48]
 10380af:	test   rcx,rcx
 10380b2:	sete   al
 10380b5:	test   al,al
 10380b7:	sete   al
 10380ba:	test   al,al
 10380bc:	je     0x10380dd
 10380be:	test   rcx,rcx
 10380c1:	jne    0x10380ce
 10380c3:	mov    ecx,0x80004003
 10380c8:	call   0x1049210
 10380cd:	int3   
 10380ce:	mov    rax,QWORD PTR [rcx]
 10380d1:	call   QWORD PTR [rax+0x10]
 10380d4:	mov    QWORD PTR [rsp+0x48],0x0
 10380dd:	test   rbx,rbx
 10380e0:	sete   al
 10380e3:	test   al,al
 10380e5:	sete   al
 10380e8:	test   al,al
 10380ea:	je     0x1038137
 10380ec:	test   rbx,rbx
 10380ef:	jne    0x10380fc
 10380f1:	mov    ecx,0x80004003
 10380f6:	call   0x1049210
 10380fb:	int3   
 10380fc:	mov    rax,QWORD PTR [rbx]
 10380ff:	mov    rcx,rbx
 1038102:	call   QWORD PTR [rax+0x10]
 1038105:	xor    ebx,ebx
 1038107:	mov    QWORD PTR [rsp+0x58],rbx
 103810c:	jmp    0x1038137
 103810e:	mov    ecx,0x80004003
 1038113:	call   0x1049210
 1038118:	int3   
 1038119:	mov    rcx,QWORD PTR [r14+0x18]
 103811d:	mov    rax,QWORD PTR [rcx]
 1038120:	mov    BYTE PTR [rsp+0x28],0x1
 1038125:	mov    BYTE PTR [rsp+0x20],0x1
 103812a:	xor    r9d,r9d
 103812d:	xor    r8d,r8d
 1038130:	mov    edx,0xc000c3e1
 1038135:	call   QWORD PTR [rax]
 1038137:	cmp    QWORD PTR [r15+0x18],0x0
 103813c:	setne  dil
 1038140:	mov    rcx,QWORD PTR [rsp+0x68]
 1038145:	test   rcx,rcx
 1038148:	je     0x1038151
 103814a:	mov    rax,QWORD PTR [rcx]
 103814d:	call   QWORD PTR [rax+0x10]
 1038150:	nop
 1038151:	mov    rcx,QWORD PTR [rsp+0x48]
 1038156:	test   rcx,rcx
 1038159:	je     0x1038162
 103815b:	mov    rdx,QWORD PTR [rcx]
 103815e:	call   QWORD PTR [rdx+0x10]
 1038161:	nop
 1038162:	test   rbx,rbx
 1038165:	je     0x1038170
 1038167:	mov    rdx,QWORD PTR [rbx]
 103816a:	mov    rcx,rbx
 103816d:	call   QWORD PTR [rdx+0x10]
 1038170:	movzx  eax,dil
 1038174:	mov    rcx,QWORD PTR [rbp+0x950]
 103817b:	xor    rcx,rsp
 103817e:	call   0x103ff40
 1038183:	add    rsp,0xa68
 103818a:	pop    r15
 103818c:	pop    r14
 103818e:	pop    r13
 1038190:	pop    r12
 1038192:	pop    rdi
 1038193:	pop    rsi
 1038194:	pop    rbx
 1038195:	pop    rbp
 1038196:	ret    
 1038197:	int3   
 1038198:	int3   
 1038199:	int3   
 103819a:	int3   
 103819b:	int3   
 103819c:	int3   
 103819d:	int3   
 103819e:	int3   
 103819f:	int3   
 10381a0:	rex push rbp
 10381a2:	push   rsi
 10381a3:	push   rdi
 10381a4:	push   r12
 10381a6:	push   r13
 10381a8:	push   r14
 10381aa:	push   r15
 10381ac:	lea    rbp,[rsp-0x27]
 10381b1:	sub    rsp,0xa0
 10381b8:	mov    QWORD PTR [rbp+0x1f],0xfffffffffffffffe
 10381c0:	mov    QWORD PTR [rsp+0xe8],rbx
 10381c8:	mov    r15,rdx
 10381cb:	mov    r14,rcx
 10381ce:	xor    r13d,r13d
 10381d1:	mov    ebx,r13d
 10381d4:	mov    QWORD PTR [rbp-0x19],rbx
 10381d8:	lea    rax,[rbp-0x11]
 10381dc:	mov    QWORD PTR [rbp+0x67],rax
 10381e0:	mov    rdx,r8
 10381e3:	lea    rcx,[rbp-0x11]
 10381e7:	call   0x10362b0
 10381ec:	nop
 10381ed:	mov    rcx,QWORD PTR [r14+0x10]
 10381f1:	test   rcx,rcx
 10381f4:	jne    0x1038201
 10381f6:	mov    ecx,0x80004003
 10381fb:	call   0x1049210
 1038200:	nop
 1038201:	mov    rdx,rax
 1038204:	call   0x1036a40
 1038209:	or     edi,0xffffffff
 103820c:	cmp    di,ax
 103820f:	je     0x1038340
 1038215:	lea    rcx,[rbp-0x31]
 1038219:	call   QWORD PTR [rip+0xfffffffffffc98a1]        # 0x1001ac0
 103821f:	nop
 1038220:	mov    rcx,QWORD PTR [r14+0x10]
 1038224:	test   rcx,rcx
 1038227:	jne    0x1038234
 1038229:	mov    ecx,0x80004003
 103822e:	call   0x1049210
 1038233:	int3   
 1038234:	lea    rdx,[rbp+0x7]
 1038238:	call   0x10369c0
 103823d:	nop
 103823e:	mov    rcx,QWORD PTR [rax]
 1038241:	test   rcx,rcx
 1038244:	jne    0x1038251
 1038246:	mov    ecx,0x80004003
 103824b:	call   0x1049210
 1038250:	int3   
 1038251:	lea    rdx,[rbp-0x29]
 1038255:	call   0x10363d0
 103825a:	mov    rbx,rax
 103825d:	mov    edx,0xc000c3de
 1038262:	lea    rcx,[rbp+0x17]
 1038266:	call   0x10132d0
 103826b:	nop
 103826c:	mov    rbx,QWORD PTR [rbx]
 103826f:	test   rbx,rbx
 1038272:	je     0x1038279
 1038274:	mov    rbx,QWORD PTR [rbx]
 1038277:	jmp    0x103827c
 1038279:	mov    rbx,r13
 103827c:	mov    rcx,rax
 103827f:	call   QWORD PTR [rip+0xfffffffffffc9863]        # 0x1001ae8
 1038285:	mov    rdx,rax
 1038288:	mov    r8,rbx
 103828b:	lea    rcx,[rbp-0x31]
 103828f:	call   QWORD PTR [rip+0xfffffffffffc97ab]        # 0x1001a40
 1038295:	nop
 1038296:	lea    rcx,[rbp+0x17]
 103829a:	call   QWORD PTR [rip+0xfffffffffffc9808]        # 0x1001aa8
 10382a0:	nop
 10382a1:	mov    rbx,QWORD PTR [rbp-0x29]
 10382a5:	test   rbx,rbx
 10382a8:	je     0x10382e0
 10382aa:	lock xadd DWORD PTR [rbx+0x10],edi
 10382af:	dec    edi
 10382b1:	jne    0x10382dc
 10382b3:	test   rbx,rbx
 10382b6:	je     0x10382dc
 10382b8:	mov    rcx,QWORD PTR [rbx]
 10382bb:	test   rcx,rcx
 10382be:	je     0x10382c6
 10382c0:	call   QWORD PTR [rip+0xfffffffffffc9572]        # 0x1001838
 10382c6:	mov    rcx,QWORD PTR [rbx+0x8]
 10382ca:	test   rcx,rcx
 10382cd:	je     0x10382d4
 10382cf:	call   0x103f9c6
 10382d4:	mov    rcx,rbx
 10382d7:	call   0x103f95a
 10382dc:	mov    QWORD PTR [rbp-0x29],r13
 10382e0:	mov    rcx,QWORD PTR [rbp+0x7]
 10382e4:	test   rcx,rcx
 10382e7:	je     0x10382ef
 10382e9:	mov    rax,QWORD PTR [rcx]
 10382ec:	call   QWORD PTR [rax+0x10]
 10382ef:	mov    rax,QWORD PTR [r14+0x18]
 10382f3:	mov    rbx,QWORD PTR [rax]
 10382f6:	lea    rcx,[rbp-0x31]
 10382fa:	call   QWORD PTR [rip+0xfffffffffffc97e8]        # 0x1001ae8
 1038300:	mov    r8,rax
 1038303:	mov    BYTE PTR [rsp+0x30],0x1
 1038308:	mov    BYTE PTR [rsp+0x28],0x1
 103830d:	mov    DWORD PTR [rsp+0x20],r13d
 1038312:	xor    r9d,r9d
 1038315:	mov    edx,0xc000c3de
 103831a:	mov    rcx,QWORD PTR [r14+0x18]
 103831e:	call   QWORD PTR [rbx+0x8]
 1038321:	lea    rdx,[rbp-0x31]
 1038325:	lea    rcx,[rbp-0x9]
 1038329:	call   QWORD PTR [rip+0xfffffffffffc9689]        # 0x10019b8
 103832f:	lea    rdx,[rip+0x28542]        # 0x1060878
 1038336:	lea    rcx,[rbp-0x9]
 103833a:	call   0x10401ce
 103833f:	nop
 1038340:	lea    rax,[rbp-0x1]
 1038344:	mov    QWORD PTR [rbp+0x67],rax
 1038348:	lea    rdx,[rip+0xfffffffffffcfbb9]        # 0x1007f08
 103834f:	lea    rcx,[rbp-0x1]
 1038353:	call   0x10362b0
 1038358:	nop
 1038359:	mov    rcx,QWORD PTR [r14+0x10]
 103835d:	test   rcx,rcx
 1038360:	jne    0x103836d
 1038362:	mov    ecx,0x80004003
 1038367:	call   0x1049210
 103836c:	nop
 103836d:	mov    r8,rax
 1038370:	lea    rdx,[rbp-0x39]
 1038374:	call   0x10366d0
 1038379:	nop
 103837a:	mov    rdi,QWORD PTR [rbp-0x39]
 103837e:	test   rdi,rdi
 1038381:	sete   al
 1038384:	test   al,al
 1038386:	je     0x10383c7
 1038388:	mov    rax,QWORD PTR [r15+0x8]
 103838c:	movsxd rcx,DWORD PTR [rax+0x4]
 1038390:	add    rcx,0x8
 1038394:	add    rcx,r15
 1038397:	mov    rax,QWORD PTR [rcx]
 103839a:	mov    BYTE PTR [rsp+0x28],0x1
 103839f:	mov    BYTE PTR [rsp+0x20],0x1
 10383a4:	xor    r9d,r9d
 10383a7:	xor    r8d,r8d
 10383aa:	mov    edx,0xc000c3e4
 10383af:	call   QWORD PTR [rax]
 10383b1:	nop
 10383b2:	mov    rcx,QWORD PTR [rbp-0x39]
 10383b6:	test   rcx,rcx
 10383b9:	je     0x10383c2
 10383bb:	mov    rax,QWORD PTR [rcx]
 10383be:	call   QWORD PTR [rax+0x10]
 10383c1:	nop
 10383c2:	jmp    0x1038592
 10383c7:	test   rdi,rdi
 10383ca:	jne    0x10383d7
 10383cc:	mov    ecx,0x80004003
 10383d1:	call   0x1049210
 10383d6:	int3   
 10383d7:	mov    DWORD PTR [rbp+0x67],r13d
 10383db:	mov    rax,QWORD PTR [rdi]
 10383de:	lea    rdx,[rbp+0x67]
 10383e2:	mov    rcx,rdi
 10383e5:	call   QWORD PTR [rax+0x40]
 10383e8:	test   eax,eax
 10383ea:	jns    0x10383fd
 10383ec:	lea    r8,[rip+0xfffffffffffcf5fd]        # 0x10079f0
 10383f3:	mov    rdx,rdi
 10383f6:	mov    ecx,eax
 10383f8:	call   0x1049230
 10383fd:	cmp    DWORD PTR [rbp+0x67],0x0
 1038401:	je     0x1038582
 1038407:	mov    r12b,0x1
 103840a:	mov    esi,r13d
 103840d:	mov    rdi,QWORD PTR [rbp-0x39]
 1038411:	test   rdi,rdi
 1038414:	je     0x1038577
 103841a:	nop    WORD PTR [rax+rax*1+0x0]
 1038420:	mov    DWORD PTR [rbp+0x7f],r13d
 1038424:	mov    rax,QWORD PTR [rdi]
 1038427:	lea    rdx,[rbp+0x7f]
 103842b:	mov    rcx,rdi
 103842e:	call   QWORD PTR [rax+0x40]
 1038431:	test   eax,eax
 1038433:	jns    0x1038446
 1038435:	lea    r8,[rip+0xfffffffffffcf5b4]        # 0x10079f0
 103843c:	mov    rdx,rdi
 103843f:	mov    ecx,eax
 1038441:	call   0x1049230
 1038446:	cmp    esi,DWORD PTR [rbp+0x7f]
 1038449:	jge    0x10384f7
 103844f:	mov    rcx,QWORD PTR [rbp-0x39]
 1038453:	test   rcx,rcx
 1038456:	je     0x10384ec
 103845c:	mov    r8d,esi
 103845f:	lea    rdx,[rbp+0xf]
 1038463:	call   0x1036870
 1038468:	nop
 1038469:	mov    rcx,QWORD PTR [rax]
 103846c:	cmp    rbx,rcx
 103846f:	je     0x1038495
 1038471:	mov    rdi,rbx
 1038474:	mov    rbx,rcx
 1038477:	mov    QWORD PTR [rbp-0x19],rcx
 103847b:	test   rcx,rcx
 103847e:	je     0x1038486
 1038480:	mov    rax,QWORD PTR [rcx]
 1038483:	call   QWORD PTR [rax+0x8]
 1038486:	test   rdi,rdi
 1038489:	je     0x1038495
 103848b:	mov    rax,QWORD PTR [rdi]
 103848e:	mov    rcx,rdi
 1038491:	call   QWORD PTR [rax+0x10]
 1038494:	nop
 1038495:	mov    rcx,QWORD PTR [rbp+0xf]
 1038499:	test   rcx,rcx
 103849c:	je     0x10384a4
 103849e:	mov    rax,QWORD PTR [rcx]
 10384a1:	call   QWORD PTR [rax+0x10]
 10384a4:	lea    rax,[rbp-0x21]
 10384a8:	mov    QWORD PTR [rbp+0x67],rax
 10384ac:	mov    QWORD PTR [rbp-0x21],rbx
 10384b0:	test   rbx,rbx
 10384b3:	je     0x10384bf
 10384b5:	mov    rax,QWORD PTR [rbx]
 10384b8:	mov    rcx,rbx
 10384bb:	call   QWORD PTR [rax+0x8]
 10384be:	nop
 10384bf:	mov    rax,QWORD PTR [r14]
 10384c2:	lea    r8,[rbp-0x21]
 10384c6:	mov    rdx,r15
 10384c9:	mov    rcx,r14
 10384cc:	call   QWORD PTR [rax+0x50]
 10384cf:	test   al,al
 10384d1:	je     0x10384e7
 10384d3:	inc    esi
 10384d5:	mov    rdi,QWORD PTR [rbp-0x39]
 10384d9:	test   rdi,rdi
 10384dc:	jne    0x1038420
 10384e2:	jmp    0x1038577
 10384e7:	xor    r12b,r12b
 10384ea:	jmp    0x10384f7
 10384ec:	mov    ecx,0x80004003
 10384f1:	call   0x1049210
 10384f6:	int3   
 10384f7:	mov    rcx,QWORD PTR [rbp-0x39]
 10384fb:	test   rcx,rcx
 10384fe:	sete   al
 1038501:	test   al,al
 1038503:	sete   al
 1038506:	test   al,al
 1038508:	je     0x1038524
 103850a:	test   rcx,rcx
 103850d:	jne    0x103851a
 103850f:	mov    ecx,0x80004003
 1038514:	call   0x1049210
 1038519:	int3   
 103851a:	mov    rax,QWORD PTR [rcx]
 103851d:	call   QWORD PTR [rax+0x10]
 1038520:	mov    QWORD PTR [rbp-0x39],r13
 1038524:	test   rbx,rbx
 1038527:	sete   al
 103852a:	test   al,al
 103852c:	sete   al
 103852f:	test   al,al
 1038531:	je     0x1038553
 1038533:	test   rbx,rbx
 1038536:	jne    0x1038543
 1038538:	mov    ecx,0x80004003
 103853d:	call   0x1049210
 1038542:	int3   
 1038543:	mov    rax,QWORD PTR [rbx]
 1038546:	mov    rcx,rbx
 1038549:	call   QWORD PTR [rax+0x10]
 103854c:	mov    rbx,r13
 103854f:	mov    QWORD PTR [rbp-0x19],rbx
 1038553:	mov    rcx,QWORD PTR [rbp-0x39]
 1038557:	test   rcx,rcx
 103855a:	je     0x1038563
 103855c:	mov    rdx,QWORD PTR [rcx]
 103855f:	call   QWORD PTR [rdx+0x10]
 1038562:	nop
 1038563:	test   rbx,rbx
 1038566:	je     0x1038571
 1038568:	mov    rdx,QWORD PTR [rbx]
 103856b:	mov    rcx,rbx
 103856e:	call   QWORD PTR [rdx+0x10]
 1038571:	movzx  eax,r12b
 1038575:	jmp    0x1038594
 1038577:	mov    ecx,0x80004003
 103857c:	call   0x1049210
 1038581:	nop
 1038582:	mov    rcx,QWORD PTR [rbp-0x39]
 1038586:	test   rcx,rcx
 1038589:	je     0x1038592
 103858b:	mov    rax,QWORD PTR [rcx]
 103858e:	call   QWORD PTR [rax+0x10]
 1038591:	nop
 1038592:	xor    al,al
 1038594:	mov    rbx,QWORD PTR [rsp+0xe8]
 103859c:	add    rsp,0xa0
 10385a3:	pop    r15
 10385a5:	pop    r14
 10385a7:	pop    r13
 10385a9:	pop    r12
 10385ab:	pop    rdi
 10385ac:	pop    rsi
 10385ad:	pop    rbp
 10385ae:	ret    
 10385af:	int3   
 10385b0:	int3   
 10385b1:	int3   
 10385b2:	int3   
 10385b3:	int3   
 10385b4:	int3   
 10385b5:	int3   
 10385b6:	int3   
 10385b7:	int3   
 10385b8:	int3   
 10385b9:	int3   
 10385ba:	int3   
 10385bb:	int3   
 10385bc:	int3   
 10385bd:	int3   
 10385be:	int3   
 10385bf:	int3   
 10385c0:	rex push rbp
 10385c2:	push   rsi
 10385c3:	push   rdi
 10385c4:	push   r12
 10385c6:	push   r13
 10385c8:	push   r14
 10385ca:	push   r15
 10385cc:	lea    rbp,[rsp-0x1290]
 10385d4:	mov    eax,0x1390
 10385d9:	call   0x1040290
 10385de:	sub    rsp,rax
 10385e1:	mov    QWORD PTR [rbp+0x250],0xfffffffffffffffe
 10385ec:	mov    QWORD PTR [rsp+0x13e8],rbx
 10385f4:	mov    rax,QWORD PTR [rip+0x2b275]        # 0x1063870
 10385fb:	xor    rax,rsp
 10385fe:	mov    QWORD PTR [rbp+0x1280],rax
 1038605:	mov    QWORD PTR [rbp+0x8],r8
 1038609:	mov    r12,rdx
 103860c:	mov    r13,rcx
 103860f:	mov    QWORD PTR [rsp+0x50],rcx
 1038614:	xor    esi,esi
 1038616:	mov    DWORD PTR [rsp+0x68],esi
 103861a:	lea    rcx,[rbp+0x28]
 103861e:	call   QWORD PTR [rip+0xfffffffffffc949c]        # 0x1001ac0
 1038624:	nop
 1038625:	lea    rcx,[rsp+0x38]
 103862a:	call   QWORD PTR [rip+0xfffffffffffc9490]        # 0x1001ac0
 1038630:	nop
 1038631:	lea    rcx,[rsp+0x40]
 1038636:	call   QWORD PTR [rip+0xfffffffffffc9484]        # 0x1001ac0
 103863c:	nop
 103863d:	lea    rcx,[rbp-0x78]
 1038641:	call   QWORD PTR [rip+0xfffffffffffc9479]        # 0x1001ac0
 1038647:	nop
 1038648:	lea    rcx,[rbp-0x70]
 103864c:	call   QWORD PTR [rip+0xfffffffffffc946e]        # 0x1001ac0
 1038652:	nop
 1038653:	lea    rcx,[rsp+0x78]
 1038658:	call   QWORD PTR [rip+0xfffffffffffc9462]        # 0x1001ac0
 103865e:	nop
 103865f:	lea    rcx,[rbp-0x68]
 1038663:	call   QWORD PTR [rip+0xfffffffffffc9457]        # 0x1001ac0
 1038669:	nop
 103866a:	mov    edi,esi
 103866c:	mov    QWORD PTR [rbp-0x20],rsi
 1038670:	mov    r14d,esi
 1038673:	mov    QWORD PTR [rbp-0x50],rsi
 1038677:	mov    ebx,esi
 1038679:	mov    QWORD PTR [rbp-0x40],rbx
 103867d:	mov    r15d,esi
 1038680:	mov    QWORD PTR [rbp-0x58],rsi
 1038684:	mov    QWORD PTR [rbp-0x48],rsi
 1038688:	mov    BYTE PTR [rsp+0x6e],0x1
 103868d:	lea    rax,[rsp+0x6e]
 1038692:	mov    QWORD PTR [rsp+0x28],rax
 1038697:	lea    rax,[rip+0xfffffffffffc9772]        # 0x1001e10
 103869e:	mov    QWORD PTR [rsp+0x20],rax
 10386a3:	mov    r9,rax
 10386a6:	lea    r8,[rip+0xfffffffffffcf8a3]        # 0x1007f50
 10386ad:	lea    rdx,[rbp+0x220]
 10386b4:	mov    rcx,r13
 10386b7:	call   0x103b1e0
 10386bc:	nop
 10386bd:	mov    rdx,rax
 10386c0:	lea    rcx,[rsp+0x40]
 10386c5:	call   QWORD PTR [rip+0xfffffffffffc93d5]        # 0x1001aa0
 10386cb:	nop
 10386cc:	lea    rcx,[rbp+0x220]
 10386d3:	call   QWORD PTR [rip+0xfffffffffffc93cf]        # 0x1001aa8
 10386d9:	lea    rcx,[rsp+0x40]
 10386de:	call   QWORD PTR [rip+0xfffffffffffc940c]        # 0x1001af0
 10386e4:	test   eax,eax
 10386e6:	je     0x1038f81
 10386ec:	mov    BYTE PTR [rsp+0x6d],sil
 10386f1:	lea    rax,[rsp+0x6d]
 10386f6:	mov    QWORD PTR [rsp+0x28],rax
 10386fb:	lea    rax,[rip+0xfffffffffffc970e]        # 0x1001e10
 1038702:	mov    QWORD PTR [rsp+0x20],rax
 1038707:	mov    r9,rax
 103870a:	lea    r8,[rip+0xfffffffffffcf87f]        # 0x1007f90
 1038711:	lea    rdx,[rbp+0x1e0]
 1038718:	mov    rcx,r13
 103871b:	call   0x103b1e0
 1038720:	nop
 1038721:	mov    rdx,rax
 1038724:	lea    rcx,[rsp+0x40]
 1038729:	call   QWORD PTR [rip+0xfffffffffffc9371]        # 0x1001aa0
 103872f:	nop
 1038730:	lea    rcx,[rbp+0x1e0]
 1038737:	call   QWORD PTR [rip+0xfffffffffffc936b]        # 0x1001aa8
 103873d:	mov    r13,QWORD PTR [r12]
 1038741:	lea    rcx,[rsp+0x40]
 1038746:	call   QWORD PTR [rip+0xfffffffffffc939c]        # 0x1001ae8
 103874c:	mov    rdx,rax
 103874f:	mov    rcx,r12
 1038752:	call   QWORD PTR [r13+0xf0]
 1038759:	mov    r11,QWORD PTR [r12]
 103875d:	lea    rdx,[rbp+0x210]
 1038764:	mov    rcx,r12
 1038767:	call   QWORD PTR [r11+0x70]
 103876b:	nop
 103876c:	mov    rcx,rax
 103876f:	call   QWORD PTR [rip+0xfffffffffffc9373]        # 0x1001ae8
 1038775:	mov    rdx,rax
 1038778:	mov    rcx,QWORD PTR [rbp+0x8]
 103877c:	call   0x100ea00
 1038781:	mov    rdx,rax
 1038784:	lea    rcx,[rsp+0x38]
 1038789:	call   QWORD PTR [rip+0xfffffffffffc9311]        # 0x1001aa0
 103878f:	nop
 1038790:	lea    rcx,[rbp+0x210]
 1038797:	call   QWORD PTR [rip+0xfffffffffffc930b]        # 0x1001aa8
 103879d:	mov    r11,QWORD PTR [r12]
 10387a1:	mov    rcx,r12
 10387a4:	call   QWORD PTR [r11+0x90]
 10387ab:	mov    DWORD PTR [rsp+0x48],eax
 10387af:	mov    DWORD PTR [rbp-0x60],0x401
 10387b6:	lea    rdx,[rbp-0x60]
 10387ba:	lea    rcx,[rbp+0xa70]
 10387c1:	call   QWORD PTR [rip+0xfffffffffffc8a59]        # 0x1001220
 10387c7:	mov    r11,QWORD PTR [r12]
 10387cb:	lea    rdx,[rbp+0x70]
 10387cf:	mov    rcx,r12
 10387d2:	call   QWORD PTR [r11+0x70]
 10387d6:	nop
 10387d7:	mov    r13,QWORD PTR [r12]
 10387db:	lea    rdx,[rbp+0xa70]
 10387e2:	mov    rcx,rax
 10387e5:	call   QWORD PTR [rip+0xfffffffffffc9275]        # 0x1001a60
 10387eb:	test   eax,eax
 10387ed:	sete   dl
 10387f0:	mov    rcx,r12
 10387f3:	call   QWORD PTR [r13+0xa0]
 10387fa:	nop
 10387fb:	lea    rcx,[rbp+0x70]
 10387ff:	call   QWORD PTR [rip+0xfffffffffffc92a3]        # 0x1001aa8
 1038805:	mov    r11,QWORD PTR [r12]
 1038809:	mov    rcx,r12
 103880c:	call   QWORD PTR [r11+0x90]
 1038813:	cmp    eax,0x7
 1038816:	jle    0x103898d
 103881c:	mov    rax,QWORD PTR [r12]
 1038820:	lea    rdx,[rbp+0x240]
 1038827:	mov    rcx,r12
 103882a:	call   QWORD PTR [rax+0x80]
 1038830:	mov    r13,rax
 1038833:	mov    rcx,rax
 1038836:	call   QWORD PTR [rip+0xfffffffffffc92b4]        # 0x1001af0
 103883c:	cmp    eax,0x1
 103883f:	jne    0x1038857
 1038841:	xor    edx,edx
 1038843:	mov    rcx,r13
 1038846:	call   QWORD PTR [rip+0xfffffffffffc9184]        # 0x10019d0
 103884c:	cmp    ax,0x2a
 1038850:	jne    0x1038857
 1038852:	mov    r13b,0x1
 1038855:	jmp    0x103885a
 1038857:	xor    r13b,r13b
 103885a:	lea    rcx,[rbp+0x240]
 1038861:	call   QWORD PTR [rip+0xfffffffffffc9241]        # 0x1001aa8
 1038867:	mov    rax,QWORD PTR [r12]
 103886b:	mov    rcx,r12
 103886e:	test   r13b,r13b
 1038871:	je     0x1038930
 1038877:	call   QWORD PTR [rax+0x10]
 103887a:	test   eax,eax
 103887c:	jne    0x103898d
 1038882:	mov    rax,QWORD PTR [r12]
 1038886:	mov    rcx,r12
 1038889:	call   QWORD PTR [rax+0x100]
 103888f:	test   al,al
 1038891:	je     0x10388ac
 1038893:	mov    rax,QWORD PTR [r12]
 1038897:	lea    r13,[rip+0xfffffffffffc9572]        # 0x1001e10
 103889e:	mov    rdx,r13
 10388a1:	mov    rcx,r12
 10388a4:	call   QWORD PTR [rax+0x8]
 10388a7:	jmp    0x1038994
 10388ac:	mov    rax,QWORD PTR [r12+0x8]
 10388b1:	movsxd rcx,DWORD PTR [rax+0x4]
 10388b5:	add    rcx,0x8
 10388b9:	add    rcx,r12
 10388bc:	mov    rax,QWORD PTR [rcx]
 10388bf:	mov    BYTE PTR [rsp+0x28],0x1
 10388c4:	mov    BYTE PTR [rsp+0x20],0x1
 10388c9:	mov    r9d,0x2
 10388cf:	xor    r8d,r8d
 10388d2:	mov    edx,0xc000c36f
 10388d7:	call   QWORD PTR [rax]
 10388d9:	nop
 10388da:	lea    rcx,[rbp-0x68]
 10388de:	call   QWORD PTR [rip+0xfffffffffffc91c4]        # 0x1001aa8
 10388e4:	nop
 10388e5:	lea    rcx,[rsp+0x78]
 10388ea:	call   QWORD PTR [rip+0xfffffffffffc91b8]        # 0x1001aa8
 10388f0:	nop
 10388f1:	lea    rcx,[rbp-0x70]
 10388f5:	call   QWORD PTR [rip+0xfffffffffffc91ad]        # 0x1001aa8
 10388fb:	nop
 10388fc:	lea    rcx,[rbp-0x78]
 1038900:	call   QWORD PTR [rip+0xfffffffffffc91a2]        # 0x1001aa8
 1038906:	nop
 1038907:	lea    rcx,[rsp+0x40]
 103890c:	call   QWORD PTR [rip+0xfffffffffffc9196]        # 0x1001aa8
 1038912:	nop
 1038913:	lea    rcx,[rsp+0x38]
 1038918:	call   QWORD PTR [rip+0xfffffffffffc918a]        # 0x1001aa8
 103891e:	nop
 103891f:	lea    rcx,[rbp+0x28]
 1038923:	call   QWORD PTR [rip+0xfffffffffffc917f]        # 0x1001aa8
 1038929:	xor    al,al
 103892b:	jmp    0x103a737
 1038930:	lea    rdx,[rbp+0x1e8]
 1038937:	call   QWORD PTR [rax+0x80]
 103893d:	nop
 103893e:	mov    rdx,rax
 1038941:	lea    rcx,[rsp+0x40]
 1038946:	call   QWORD PTR [rip+0xfffffffffffc9154]        # 0x1001aa0
 103894c:	nop
 103894d:	lea    rcx,[rbp+0x1e8]
 1038954:	call   QWORD PTR [rip+0xfffffffffffc914e]        # 0x1001aa8
 103895a:	lea    rdx,[rip+0xfffffffffffca1a7]        # 0x1002b08
 1038961:	lea    rcx,[rsp+0x40]
 1038966:	call   QWORD PTR [rip+0xfffffffffffc90f4]        # 0x1001a60
 103896c:	test   eax,eax
 103896e:	je     0x1038893
 1038974:	mov    r13,QWORD PTR [r12]
 1038978:	lea    rcx,[rsp+0x40]
 103897d:	call   QWORD PTR [rip+0xfffffffffffc9165]        # 0x1001ae8
 1038983:	mov    rdx,rax
 1038986:	mov    rcx,r12
 1038989:	call   QWORD PTR [r13+0x8]
 103898d:	lea    r13,[rip+0xfffffffffffc947c]        # 0x1001e10
 1038994:	mov    rax,QWORD PTR [r12]
 1038998:	mov    rcx,r12
 103899b:	call   QWORD PTR [rax+0xd8]
 10389a1:	test   rax,rax
 10389a4:	jne    0x10389b3
 10389a6:	mov    rax,QWORD PTR [r12]
 10389aa:	mov    rdx,r13
 10389ad:	mov    rcx,r12
 10389b0:	call   QWORD PTR [rax+0x8]
 10389b3:	mov    BYTE PTR [rsp+0x6f],0x1
 10389b8:	mov    rax,QWORD PTR [r12]
 10389bc:	lea    rdx,[rbp+0x178]
 10389c3:	mov    rcx,r12
 10389c6:	call   QWORD PTR [rax+0x80]
 10389cc:	nop
 10389cd:	mov    rcx,rax
 10389d0:	call   QWORD PTR [rip+0xfffffffffffc9112]        # 0x1001ae8
 10389d6:	mov    r13,rax
 10389d9:	lea    rcx,[rsp+0x38]
 10389de:	call   QWORD PTR [rip+0xfffffffffffc9104]        # 0x1001ae8
 10389e4:	mov    r9,rax
 10389e7:	lea    rax,[rsp+0x6f]
 10389ec:	mov    QWORD PTR [rsp+0x28],rax
 10389f1:	mov    QWORD PTR [rsp+0x20],r13
 10389f6:	lea    r8,[rip+0xfffffffffffcf5e3]        # 0x1007fe0
 10389fd:	lea    rdx,[rbp+0x88]
 1038a04:	mov    rcx,QWORD PTR [rsp+0x50]
 1038a09:	call   0x103b1e0
 1038a0e:	nop
 1038a0f:	mov    rdx,rax
 1038a12:	lea    rcx,[rsp+0x40]
 1038a17:	call   QWORD PTR [rip+0xfffffffffffc9083]        # 0x1001aa0
 1038a1d:	nop
 1038a1e:	lea    rcx,[rbp+0x88]
 1038a25:	call   QWORD PTR [rip+0xfffffffffffc907d]        # 0x1001aa8
 1038a2b:	nop
 1038a2c:	lea    rcx,[rbp+0x178]
 1038a33:	call   QWORD PTR [rip+0xfffffffffffc906f]        # 0x1001aa8
 1038a39:	mov    r13,QWORD PTR [r12]
 1038a3d:	lea    rcx,[rsp+0x40]
 1038a42:	call   QWORD PTR [rip+0xfffffffffffc90a0]        # 0x1001ae8
 1038a48:	mov    rdx,rax
 1038a4b:	lea    rcx,[rip+0xfffffffffffcf64e]        # 0x10080a0
 1038a52:	call   QWORD PTR [rip+0xfffffffffffc8c78]        # 0x10016d0
 1038a58:	test   eax,eax
 1038a5a:	sete   dl
 1038a5d:	mov    rcx,r12
 1038a60:	call   QWORD PTR [r13+0xb8]
 1038a67:	mov    r11,QWORD PTR [r12]
 1038a6b:	mov    rcx,r12
 1038a6e:	call   QWORD PTR [r11+0xc0]
 1038a75:	test   al,al
 1038a77:	je     0x1038ad3
 1038a79:	mov    DWORD PTR [rbp-0x60],0x401
 1038a80:	lea    rdx,[rbp-0x60]
 1038a84:	lea    rcx,[rbp+0xa70]
 1038a8b:	call   QWORD PTR [rip+0xfffffffffffc856f]        # 0x1001000
 1038a91:	lea    rdx,[rbp+0xa70]
 1038a98:	lea    rcx,[rbp+0x98]
 1038a9f:	call   QWORD PTR [rip+0xfffffffffffc900b]        # 0x1001ab0
 1038aa5:	nop
 1038aa6:	mov    r13,QWORD PTR [r12]
 1038aaa:	mov    rcx,rax
 1038aad:	call   QWORD PTR [rip+0xfffffffffffc9035]        # 0x1001ae8
 1038ab3:	mov    rdx,rax
 1038ab6:	mov    rcx,r12
 1038ab9:	call   QWORD PTR [r13+0xc8]
 1038ac0:	nop
 1038ac1:	lea    rcx,[rbp+0x98]
 1038ac8:	call   QWORD PTR [rip+0xfffffffffffc8fda]        # 0x1001aa8
 1038ace:	jmp    0x1038b75
 1038ad3:	mov    BYTE PTR [rsp+0x71],0x1
 1038ad8:	mov    rax,QWORD PTR [r12]
 1038adc:	lea    rdx,[rbp+0xa8]
 1038ae3:	mov    rcx,r12
 1038ae6:	call   QWORD PTR [rax+0x80]
 1038aec:	nop
 1038aed:	mov    rcx,rax
 1038af0:	call   QWORD PTR [rip+0xfffffffffffc8ff2]        # 0x1001ae8
 1038af6:	mov    r13,rax
 1038af9:	lea    rcx,[rsp+0x38]
 1038afe:	call   QWORD PTR [rip+0xfffffffffffc8fe4]        # 0x1001ae8
 1038b04:	mov    r9,rax
 1038b07:	lea    rax,[rsp+0x71]
 1038b0c:	mov    QWORD PTR [rsp+0x28],rax
 1038b11:	mov    QWORD PTR [rsp+0x20],r13
 1038b16:	lea    r8,[rip+0xfffffffffffcf593]        # 0x10080b0
 1038b1d:	lea    rdx,[rbp+0x228]
 1038b24:	mov    rcx,QWORD PTR [rsp+0x50]
 1038b29:	call   0x103b1e0
 1038b2e:	nop
 1038b2f:	mov    rdx,rax
 1038b32:	lea    rcx,[rsp+0x40]
 1038b37:	call   QWORD PTR [rip+0xfffffffffffc8f63]        # 0x1001aa0
 1038b3d:	nop
 1038b3e:	lea    rcx,[rbp+0x228]
 1038b45:	call   QWORD PTR [rip+0xfffffffffffc8f5d]        # 0x1001aa8
 1038b4b:	nop
 1038b4c:	lea    rcx,[rbp+0xa8]
 1038b53:	call   QWORD PTR [rip+0xfffffffffffc8f4f]        # 0x1001aa8
 1038b59:	mov    r13,QWORD PTR [r12]
 1038b5d:	lea    rcx,[rsp+0x40]
 1038b62:	call   QWORD PTR [rip+0xfffffffffffc8f80]        # 0x1001ae8
 1038b68:	mov    rdx,rax
 1038b6b:	mov    rcx,r12
 1038b6e:	call   QWORD PTR [r13+0xc8]
 1038b75:	mov    BYTE PTR [rsp+0x73],0x1
 1038b7a:	mov    rax,QWORD PTR [r12]
 1038b7e:	lea    rdx,[rbp+0xb8]
 1038b85:	mov    rcx,r12
 1038b88:	call   QWORD PTR [rax+0x80]
 1038b8e:	nop
 1038b8f:	mov    rcx,rax
 1038b92:	call   QWORD PTR [rip+0xfffffffffffc8f50]        # 0x1001ae8
 1038b98:	mov    r13,rax
 1038b9b:	lea    rcx,[rsp+0x38]
 1038ba0:	call   QWORD PTR [rip+0xfffffffffffc8f42]        # 0x1001ae8
 1038ba6:	mov    r9,rax
 1038ba9:	lea    rax,[rsp+0x73]
 1038bae:	mov    QWORD PTR [rsp+0x28],rax
 1038bb3:	mov    QWORD PTR [rsp+0x20],r13
 1038bb8:	lea    r8,[rip+0xfffffffffffcf5b1]        # 0x1008170
 1038bbf:	lea    rdx,[rbp+0x188]
 1038bc6:	mov    rcx,QWORD PTR [rsp+0x50]
 1038bcb:	call   0x103b1e0
 1038bd0:	nop
 1038bd1:	mov    rdx,rax
 1038bd4:	lea    rcx,[rsp+0x40]
 1038bd9:	call   QWORD PTR [rip+0xfffffffffffc8ec1]        # 0x1001aa0
 1038bdf:	nop
 1038be0:	lea    rcx,[rbp+0x188]
 1038be7:	call   QWORD PTR [rip+0xfffffffffffc8ebb]        # 0x1001aa8
 1038bed:	nop
 1038bee:	lea    rcx,[rbp+0xb8]
 1038bf5:	call   QWORD PTR [rip+0xfffffffffffc8ead]        # 0x1001aa8
 1038bfb:	lea    rcx,[rsp+0x40]
 1038c00:	call   QWORD PTR [rip+0xfffffffffffc8ee2]        # 0x1001ae8
 1038c06:	mov    rcx,rax
 1038c09:	lea    rdx,[rip+0xfffffffffffcf490]        # 0x10080a0
 1038c10:	call   QWORD PTR [rip+0xfffffffffffc8aba]        # 0x10016d0
 1038c16:	test   eax,eax
 1038c18:	jne    0x1038d7f
 1038c1e:	mov    BYTE PTR [rsp+0x5a],0x1
 1038c23:	mov    rax,QWORD PTR [r12]
 1038c27:	lea    rdx,[rbp+0xc8]
 1038c2e:	mov    rcx,r12
 1038c31:	call   QWORD PTR [rax+0x80]
 1038c37:	nop
 1038c38:	mov    rcx,rax
 1038c3b:	call   QWORD PTR [rip+0xfffffffffffc8ea7]        # 0x1001ae8
 1038c41:	mov    r13,rax
 1038c44:	lea    rcx,[rsp+0x38]
 1038c49:	call   QWORD PTR [rip+0xfffffffffffc8e99]        # 0x1001ae8
 1038c4f:	mov    r9,rax
 1038c52:	lea    rax,[rsp+0x5a]
 1038c57:	mov    QWORD PTR [rsp+0x28],rax
 1038c5c:	mov    QWORD PTR [rsp+0x20],r13
 1038c61:	lea    r8,[rip+0xfffffffffffcf5e8]        # 0x1008250
 1038c68:	lea    rdx,[rbp+0x1f8]
 1038c6f:	mov    rcx,QWORD PTR [rsp+0x50]
 1038c74:	call   0x103b1e0
 1038c79:	nop
 1038c7a:	mov    rdx,rax
 1038c7d:	lea    rcx,[rbp-0x78]
 1038c81:	call   QWORD PTR [rip+0xfffffffffffc8e19]        # 0x1001aa0
 1038c87:	nop
 1038c88:	lea    rcx,[rbp+0x1f8]
 1038c8f:	call   QWORD PTR [rip+0xfffffffffffc8e13]        # 0x1001aa8
 1038c95:	nop
 1038c96:	lea    rcx,[rbp+0xc8]
 1038c9d:	call   QWORD PTR [rip+0xfffffffffffc8e05]        # 0x1001aa8
 1038ca3:	lea    rcx,[rbp-0x78]
 1038ca7:	call   QWORD PTR [rip+0xfffffffffffc8e3b]        # 0x1001ae8
 1038cad:	mov    rcx,rax
 1038cb0:	lea    rdx,[rip+0xfffffffffffcf3e9]        # 0x10080a0
 1038cb7:	call   QWORD PTR [rip+0xfffffffffffc8a13]        # 0x10016d0
 1038cbd:	test   eax,eax
 1038cbf:	jne    0x1038ccd
 1038cc1:	mov    rax,QWORD PTR [r12]
 1038cc5:	xor    edx,edx
 1038cc7:	mov    rcx,r12
 1038cca:	call   QWORD PTR [rax+0x30]
 1038ccd:	mov    BYTE PTR [rsp+0x66],0x1
 1038cd2:	mov    rax,QWORD PTR [r12]
 1038cd6:	lea    rdx,[rbp+0xd8]
 1038cdd:	mov    rcx,r12
 1038ce0:	call   QWORD PTR [rax+0x80]
 1038ce6:	nop
 1038ce7:	mov    rcx,rax
 1038cea:	call   QWORD PTR [rip+0xfffffffffffc8df8]        # 0x1001ae8
 1038cf0:	mov    r13,rax
 1038cf3:	lea    rcx,[rsp+0x38]
 1038cf8:	call   QWORD PTR [rip+0xfffffffffffc8dea]        # 0x1001ae8
 1038cfe:	mov    r9,rax
 1038d01:	lea    rax,[rsp+0x66]
 1038d06:	mov    QWORD PTR [rsp+0x28],rax
 1038d0b:	mov    QWORD PTR [rsp+0x20],r13
 1038d10:	lea    r8,[rip+0xfffffffffffcf639]        # 0x1008350
 1038d17:	lea    rdx,[rbp+0x198]
 1038d1e:	mov    rcx,QWORD PTR [rsp+0x50]
 1038d23:	call   0x103b1e0
 1038d28:	nop
 1038d29:	mov    rdx,rax
 1038d2c:	lea    rcx,[rbp-0x78]
 1038d30:	call   QWORD PTR [rip+0xfffffffffffc8d6a]        # 0x1001aa0
 1038d36:	nop
 1038d37:	lea    rcx,[rbp+0x198]
 1038d3e:	call   QWORD PTR [rip+0xfffffffffffc8d64]        # 0x1001aa8
 1038d44:	nop
 1038d45:	lea    rcx,[rbp+0xd8]
 1038d4c:	call   QWORD PTR [rip+0xfffffffffffc8d56]        # 0x1001aa8
 1038d52:	lea    rcx,[rbp-0x78]
 1038d56:	call   QWORD PTR [rip+0xfffffffffffc8d8c]        # 0x1001ae8
 1038d5c:	mov    rcx,rax
 1038d5f:	lea    rdx,[rip+0xfffffffffffcf33a]        # 0x10080a0
 1038d66:	call   QWORD PTR [rip+0xfffffffffffc8964]        # 0x10016d0
 1038d6c:	test   eax,eax
 1038d6e:	jne    0x1038d7f
 1038d70:	mov    rax,QWORD PTR [r12]
 1038d74:	mov    edx,0x2
 1038d79:	mov    rcx,r12
 1038d7c:	call   QWORD PTR [rax+0x30]
 1038d7f:	mov    BYTE PTR [rsp+0x5c],0x1
 1038d84:	mov    rax,QWORD PTR [r12]
 1038d88:	lea    rdx,[rbp+0xe8]
 1038d8f:	mov    rcx,r12
 1038d92:	call   QWORD PTR [rax+0x80]
 1038d98:	nop
 1038d99:	mov    rcx,rax
 1038d9c:	call   QWORD PTR [rip+0xfffffffffffc8d46]        # 0x1001ae8
 1038da2:	mov    r13,rax
 1038da5:	lea    rcx,[rsp+0x38]
 1038daa:	call   QWORD PTR [rip+0xfffffffffffc8d38]        # 0x1001ae8
 1038db0:	mov    r9,rax
 1038db3:	lea    rax,[rsp+0x5c]
 1038db8:	mov    QWORD PTR [rsp+0x28],rax
 1038dbd:	mov    QWORD PTR [rsp+0x20],r13
 1038dc2:	lea    r8,[rip+0xfffffffffffcf687]        # 0x1008450
 1038dc9:	lea    rdx,[rbp+0x238]
 1038dd0:	mov    rcx,QWORD PTR [rsp+0x50]
 1038dd5:	call   0x103b1e0
 1038dda:	nop
 1038ddb:	mov    rdx,rax
 1038dde:	lea    rcx,[rsp+0x40]
 1038de3:	call   QWORD PTR [rip+0xfffffffffffc8cb7]        # 0x1001aa0
 1038de9:	nop
 1038dea:	lea    rcx,[rbp+0x238]
 1038df1:	call   QWORD PTR [rip+0xfffffffffffc8cb1]        # 0x1001aa8
 1038df7:	nop
 1038df8:	lea    rcx,[rbp+0xe8]
 1038dff:	call   QWORD PTR [rip+0xfffffffffffc8ca3]        # 0x1001aa8
 1038e05:	lea    rcx,[rsp+0x40]
 1038e0a:	call   QWORD PTR [rip+0xfffffffffffc8cd8]        # 0x1001ae8
 1038e10:	mov    rcx,rax
 1038e13:	lea    rdx,[rip+0xfffffffffffcf286]        # 0x10080a0
 1038e1a:	call   QWORD PTR [rip+0xfffffffffffc88b0]        # 0x10016d0
 1038e20:	test   eax,eax
 1038e22:	jne    0x10395aa
 1038e28:	xor    ecx,ecx
 1038e2a:	mov    WORD PTR [rbp+0xa60],cx
 1038e31:	mov    rax,QWORD PTR [r12]
 1038e35:	lea    rdx,[rbp+0x1a8]
 1038e3c:	mov    rcx,r12
 1038e3f:	call   QWORD PTR [rax+0x80]
 1038e45:	nop
 1038e46:	mov    rcx,rax
 1038e49:	call   QWORD PTR [rip+0xfffffffffffc8c99]        # 0x1001ae8
 1038e4f:	mov    r13,rax
 1038e52:	lea    rcx,[rsp+0x38]
 1038e57:	call   QWORD PTR [rip+0xfffffffffffc8c8b]        # 0x1001ae8
 1038e5d:	mov    QWORD PTR [rsp+0x28],r13
 1038e62:	mov    QWORD PTR [rsp+0x20],rax
 1038e67:	lea    r9,[rip+0xfffffffffffcf6c2]        # 0x1008530
 1038e6e:	mov    edx,0x401
 1038e73:	lea    r8d,[rdx-0x1]
 1038e77:	lea    rcx,[rbp+0x260]
 1038e7e:	call   QWORD PTR [rip+0xfffffffffffc88cc]        # 0x1001750
 1038e84:	nop
 1038e85:	lea    rcx,[rbp+0x1a8]
 1038e8c:	call   QWORD PTR [rip+0xfffffffffffc8c16]        # 0x1001aa8
 1038e92:	lea    r11,[rbp+0x18]
 1038e96:	mov    QWORD PTR [rbp+0x68],r11
 1038e9a:	mov    ecx,0x18
 1038e9f:	call   0x103f9d2
 1038ea4:	mov    r13,rax
 1038ea7:	mov    QWORD PTR [rbp+0x58],rax
 1038eab:	test   rax,rax
 1038eae:	je     0x1038ee0
 1038eb0:	xor    eax,eax
 1038eb2:	mov    QWORD PTR [r13+0x8],rax
 1038eb6:	mov    ecx,0x1
 1038ebb:	mov    DWORD PTR [r13+0x10],ecx
 1038ebf:	lea    rcx,[rbp+0x260]
 1038ec6:	call   QWORD PTR [rip+0xfffffffffffc8974]        # 0x1001840
 1038ecc:	mov    QWORD PTR [r13+0x0],rax
 1038ed0:	test   rax,rax
 1038ed3:	jne    0x1038ee3
 1038ed5:	mov    ecx,0x8007000e
 1038eda:	call   0x1049210
 1038edf:	int3   
 1038ee0:	mov    r13,rax
 1038ee3:	mov    QWORD PTR [rbp+0x18],r13
 1038ee7:	test   r13,r13
 1038eea:	jne    0x1038ef7
 1038eec:	mov    ecx,0x8007000e
 1038ef1:	call   0x1049210
 1038ef6:	nop
 1038ef7:	mov    r13,QWORD PTR [rsp+0x50]
 1038efc:	mov    rcx,QWORD PTR [r13+0x10]
 1038f00:	test   rcx,rcx
 1038f03:	jne    0x1038f10
 1038f05:	mov    ecx,0x80004003
 1038f0a:	call   0x1049210
 1038f0f:	nop
 1038f10:	lea    r8,[rbp+0x18]
 1038f14:	lea    rdx,[rbp+0xf8]
 1038f1b:	call   0x10366d0
 1038f20:	nop
 1038f21:	mov    rcx,QWORD PTR [rax]
 1038f24:	test   rcx,rcx
 1038f27:	je     0x1038f37
 1038f29:	mov    r15,rcx
 1038f2c:	mov    QWORD PTR [rbp-0x58],rcx
 1038f30:	mov    rax,QWORD PTR [rcx]
 1038f33:	call   QWORD PTR [rax+0x8]
 1038f36:	nop
 1038f37:	mov    rcx,QWORD PTR [rbp+0xf8]
 1038f3e:	test   rcx,rcx
 1038f41:	je     0x1038f49
 1038f43:	mov    rax,QWORD PTR [rcx]
 1038f46:	call   QWORD PTR [rax+0x10]
 1038f49:	test   r15,r15
 1038f4c:	sete   al
 1038f4f:	mov    BYTE PTR [rsp+0x30],al
 1038f53:	test   al,al
 1038f55:	je     0x1038f89
 1038f57:	mov    rax,QWORD PTR [r12+0x8]
 1038f5c:	movsxd rcx,DWORD PTR [rax+0x4]
 1038f60:	add    rcx,0x8
 1038f64:	add    rcx,r12
 1038f67:	mov    rax,QWORD PTR [rcx]
 1038f6a:	mov    BYTE PTR [rsp+0x28],0x1
 1038f6f:	mov    BYTE PTR [rsp+0x20],0x1
 1038f74:	xor    r9d,r9d
 1038f77:	xor    r8d,r8d
 1038f7a:	mov    edx,0xc000c3e5
 1038f7f:	call   QWORD PTR [rax]
 1038f81:	xor    r12b,r12b
 1038f84:	jmp    0x103a699
 1038f89:	lea    rdx,[rip+0xfffffffffffcea28]        # 0x10079b8
 1038f90:	lea    rcx,[rbp-0x70]
 1038f94:	call   QWORD PTR [rip+0xfffffffffffc89ce]        # 0x1001968
 1038f9a:	xor    r14d,r14d
 1038f9d:	mov    esi,r14d
 1038fa0:	test   r15,r15
 1038fa3:	je     0x103959f
 1038fa9:	nop    DWORD PTR [rax+0x0]
 1038fb0:	mov    DWORD PTR [rbp-0x10],r14d
 1038fb4:	mov    rax,QWORD PTR [r15]
 1038fb7:	lea    rdx,[rbp-0x10]
 1038fbb:	mov    rcx,r15
 1038fbe:	call   QWORD PTR [rax+0x40]
 1038fc1:	test   eax,eax
 1038fc3:	jns    0x1038fd6
 1038fc5:	lea    r8,[rip+0xfffffffffffcea24]        # 0x10079f0
 1038fcc:	mov    rdx,r15
 1038fcf:	mov    ecx,eax
 1038fd1:	call   0x1049230
 1038fd6:	cmp    esi,DWORD PTR [rbp-0x10]
 1038fd9:	jge    0x1039193
 1038fdf:	mov    r8d,esi
 1038fe2:	lea    rdx,[rbp+0x208]
 1038fe9:	mov    rcx,r15
 1038fec:	call   0x1036870
 1038ff1:	nop
 1038ff2:	mov    rcx,QWORD PTR [rax]
 1038ff5:	cmp    rbx,rcx
 1038ff8:	je     0x103901e
 1038ffa:	mov    rdi,rbx
 1038ffd:	mov    rbx,rcx
 1039000:	mov    QWORD PTR [rbp-0x40],rcx
 1039004:	test   rcx,rcx
 1039007:	je     0x103900f
 1039009:	mov    rax,QWORD PTR [rcx]
 103900c:	call   QWORD PTR [rax+0x8]
 103900f:	test   rdi,rdi
 1039012:	je     0x103901e
 1039014:	mov    rax,QWORD PTR [rdi]
 1039017:	mov    rcx,rdi
 103901a:	call   QWORD PTR [rax+0x10]
 103901d:	nop
 103901e:	mov    rcx,QWORD PTR [rbp+0x208]
 1039025:	test   rcx,rcx
 1039028:	je     0x1039030
 103902a:	mov    rax,QWORD PTR [rcx]
 103902d:	call   QWORD PTR [rax+0x10]
 1039030:	lea    rax,[rbp+0x10]
 1039034:	mov    QWORD PTR [rbp-0x28],rax
 1039038:	mov    ecx,0x18
 103903d:	call   0x103f9d2
 1039042:	mov    rdi,rax
 1039045:	mov    QWORD PTR [rbp-0x8],rax
 1039049:	test   rax,rax
 103904c:	je     0x103906b
 103904e:	mov    QWORD PTR [rax+0x8],r14
 1039052:	mov    eax,0x1
 1039057:	mov    DWORD PTR [rdi+0x10],eax
 103905a:	lea    rcx,[rip+0xfffffffffffcf5fb]        # 0x100865c
 1039061:	call   0x10492d0
 1039066:	mov    QWORD PTR [rdi],rax
 1039069:	jmp    0x103906e
 103906b:	mov    rdi,r14
 103906e:	mov    QWORD PTR [rbp+0x10],rdi
 1039072:	test   rdi,rdi
 1039075:	je     0x1039188
 103907b:	test   rbx,rbx
 103907e:	je     0x103917d
 1039084:	lea    rdx,[rbp+0x1b8]
 103908b:	mov    rcx,rbx
 103908e:	call   0x10365a0
 1039093:	nop
 1039094:	mov    rcx,QWORD PTR [rax]
 1039097:	test   rcx,rcx
 103909a:	je     0x1039172
 10390a0:	lea    r8,[rbp+0x10]
 10390a4:	lea    rdx,[rbp+0x108]
 10390ab:	call   0x10368f0
 10390b0:	nop
 10390b1:	mov    rcx,QWORD PTR [rax]
 10390b4:	test   rcx,rcx
 10390b7:	je     0x1039167
 10390bd:	lea    rdx,[rbp+0x38]
 10390c1:	call   0x1036620
 10390c6:	nop
 10390c7:	mov    rdx,QWORD PTR [rax]
 10390ca:	test   rdx,rdx
 10390cd:	je     0x10390d4
 10390cf:	mov    rdx,QWORD PTR [rdx]
 10390d2:	jmp    0x10390d7
 10390d4:	mov    rdx,r14
 10390d7:	lea    rcx,[rbp-0x70]
 10390db:	call   QWORD PTR [rip+0xfffffffffffc89af]        # 0x1001a90
 10390e1:	nop
 10390e2:	mov    rdi,QWORD PTR [rbp+0x38]
 10390e6:	test   rdi,rdi
 10390e9:	je     0x103912c
 10390eb:	or     eax,0xffffffff
 10390ee:	lock xadd DWORD PTR [rdi+0x10],eax
 10390f3:	dec    eax
 10390f5:	jne    0x1039120
 10390f7:	test   rdi,rdi
 10390fa:	je     0x1039120
 10390fc:	mov    rcx,QWORD PTR [rdi]
 10390ff:	test   rcx,rcx
 1039102:	je     0x103910a
 1039104:	call   QWORD PTR [rip+0xfffffffffffc872e]        # 0x1001838
 103910a:	mov    rcx,QWORD PTR [rdi+0x8]
 103910e:	test   rcx,rcx
 1039111:	je     0x1039118
 1039113:	call   0x103f9c6
 1039118:	mov    rcx,rdi
 103911b:	call   0x103f95a
 1039120:	mov    QWORD PTR [rbp+0x38],r14
 1039124:	mov    rbx,QWORD PTR [rbp-0x40]
 1039128:	mov    r15,QWORD PTR [rbp-0x58]
 103912c:	mov    rcx,QWORD PTR [rbp+0x108]
 1039133:	test   rcx,rcx
 1039136:	je     0x103913f
 1039138:	mov    rax,QWORD PTR [rcx]
 103913b:	call   QWORD PTR [rax+0x10]
 103913e:	nop
 103913f:	mov    rcx,QWORD PTR [rbp+0x1b8]
 1039146:	test   rcx,rcx
 1039149:	je     0x1039151
 103914b:	mov    rax,QWORD PTR [rcx]
 103914e:	call   QWORD PTR [rax+0x10]
 1039151:	mov    edx,0x2c
 1039156:	lea    rcx,[rbp-0x70]
 103915a:	call   QWORD PTR [rip+0xfffffffffffc87f0]        # 0x1001950
 1039160:	inc    esi
 1039162:	jmp    0x1038fb0
 1039167:	mov    ecx,0x80004003
 103916c:	call   0x1049210
 1039171:	nop
 1039172:	mov    ecx,0x80004003
 1039177:	call   0x1049210
 103917c:	nop
 103917d:	mov    ecx,0x80004003
 1039182:	call   0x1049210
 1039187:	nop
 1039188:	mov    ecx,0x8007000e
 103918d:	call   0x1049210
 1039192:	int3   
 1039193:	lea    rcx,[rbp-0x70]
 1039197:	call   QWORD PTR [rip+0xfffffffffffc8953]        # 0x1001af0
 103919d:	lea    r8d,[rax-0x1]
 10391a1:	lea    rdx,[rbp+0x118]
 10391a8:	lea    rcx,[rbp-0x70]
 10391ac:	call   QWORD PTR [rip+0xfffffffffffc8896]        # 0x1001a48
 10391b2:	nop
 10391b3:	mov    rdx,rax
 10391b6:	lea    rcx,[rbp-0x70]
 10391ba:	call   QWORD PTR [rip+0xfffffffffffc88e0]        # 0x1001aa0
 10391c0:	nop
 10391c1:	lea    rcx,[rbp+0x118]
 10391c8:	call   QWORD PTR [rip+0xfffffffffffc88da]        # 0x1001aa8
 10391ce:	cmp    BYTE PTR [rsp+0x30],0x0
 10391d3:	sete   al
 10391d6:	test   al,al
 10391d8:	je     0x10391ea
 10391da:	mov    rax,QWORD PTR [r15]
 10391dd:	mov    rcx,r15
 10391e0:	call   QWORD PTR [rax+0x10]
 10391e3:	mov    r15,r14
 10391e6:	mov    QWORD PTR [rbp-0x58],r14
 10391ea:	test   rbx,rbx
 10391ed:	sete   al
 10391f0:	test   al,al
 10391f2:	sete   al
 10391f5:	test   al,al
 10391f7:	je     0x1039219
 10391f9:	test   rbx,rbx
 10391fc:	jne    0x1039209
 10391fe:	mov    ecx,0x80004003
 1039203:	call   0x1049210
 1039208:	int3   
 1039209:	mov    rax,QWORD PTR [rbx]
 103920c:	mov    rcx,rbx
 103920f:	call   QWORD PTR [rax+0x10]
 1039212:	mov    rbx,r14
 1039215:	mov    QWORD PTR [rbp-0x40],rbx
 1039219:	mov    BYTE PTR [rsp+0x70],0x1
 103921e:	mov    rax,QWORD PTR [r12]
 1039222:	lea    rdx,[rbp+0x128]
 1039229:	mov    rcx,r12
 103922c:	call   QWORD PTR [rax+0x80]
 1039232:	nop
 1039233:	mov    rcx,rax
 1039236:	call   QWORD PTR [rip+0xfffffffffffc88ac]        # 0x1001ae8
 103923c:	mov    rdi,rax
 103923f:	lea    rcx,[rsp+0x38]
 1039244:	call   QWORD PTR [rip+0xfffffffffffc889e]        # 0x1001ae8
 103924a:	mov    r9,rax
 103924d:	lea    rax,[rsp+0x70]
 1039252:	mov    QWORD PTR [rsp+0x28],rax
 1039257:	mov    QWORD PTR [rsp+0x20],rdi
 103925c:	lea    r8,[rip+0xfffffffffffcf3fd]        # 0x1008660
 1039263:	lea    rdx,[rbp+0x248]
 103926a:	mov    rcx,r13
 103926d:	call   0x103b1e0
 1039272:	nop
 1039273:	mov    rcx,rax
 1039276:	call   QWORD PTR [rip+0xfffffffffffc886c]        # 0x1001ae8
 103927c:	mov    rcx,rax
 103927f:	call   QWORD PTR [rip+0xfffffffffffc84bb]        # 0x1001740
 1039285:	mov    r14d,eax
 1039288:	lea    rcx,[rbp+0x248]
 103928f:	call   QWORD PTR [rip+0xfffffffffffc8813]        # 0x1001aa8
 1039295:	nop
 1039296:	lea    rcx,[rbp+0x128]
 103929d:	call   QWORD PTR [rip+0xfffffffffffc8805]        # 0x1001aa8
 10392a3:	mov    BYTE PTR [rsp+0x5e],0x1
 10392a8:	mov    r8,QWORD PTR [r12]
 10392ac:	lea    rdx,[rbp+0x138]
 10392b3:	mov    rcx,r12
 10392b6:	call   QWORD PTR [r8+0x80]
 10392bd:	nop
 10392be:	mov    rcx,rax
 10392c1:	call   QWORD PTR [rip+0xfffffffffffc8821]        # 0x1001ae8
 10392c7:	mov    rdi,rax
 10392ca:	lea    rcx,[rsp+0x38]
 10392cf:	call   QWORD PTR [rip+0xfffffffffffc8813]        # 0x1001ae8
 10392d5:	mov    r9,rax
 10392d8:	lea    rax,[rsp+0x5e]
 10392dd:	mov    QWORD PTR [rsp+0x28],rax
 10392e2:	mov    QWORD PTR [rsp+0x20],rdi
 10392e7:	lea    r8,[rip+0xfffffffffffcf482]        # 0x1008770
 10392ee:	lea    rdx,[rbp+0x1c8]
 10392f5:	mov    rcx,r13
 10392f8:	call   0x103b1e0
 10392fd:	nop
 10392fe:	mov    rcx,rax
 1039301:	call   QWORD PTR [rip+0xfffffffffffc87e1]        # 0x1001ae8
 1039307:	mov    rcx,rax
 103930a:	call   QWORD PTR [rip+0xfffffffffffc8430]        # 0x1001740
 1039310:	mov    esi,eax
 1039312:	lea    rcx,[rbp+0x1c8]
 1039319:	call   QWORD PTR [rip+0xfffffffffffc8789]        # 0x1001aa8
 103931f:	nop
 1039320:	lea    rcx,[rbp+0x138]
 1039327:	call   QWORD PTR [rip+0xfffffffffffc877b]        # 0x1001aa8
 103932d:	mov    BYTE PTR [rsp+0x6c],0x1
 1039332:	mov    r8,QWORD PTR [r12]
 1039336:	lea    rdx,[rbp+0x148]
 103933d:	mov    rcx,r12
 1039340:	call   QWORD PTR [r8+0x80]
 1039347:	nop
 1039348:	mov    rcx,rax
 103934b:	call   QWORD PTR [rip+0xfffffffffffc8797]        # 0x1001ae8
 1039351:	mov    rdi,rax
 1039354:	lea    rcx,[rsp+0x38]
 1039359:	call   QWORD PTR [rip+0xfffffffffffc8789]        # 0x1001ae8
 103935f:	mov    r9,rax
 1039362:	lea    rax,[rsp+0x6c]
 1039367:	mov    QWORD PTR [rsp+0x28],rax
 103936c:	mov    QWORD PTR [rsp+0x20],rdi
 1039371:	lea    r8,[rip+0xfffffffffffcf508]        # 0x1008880
 1039378:	lea    rdx,[rbp+0x218]
 103937f:	mov    rcx,r13
 1039382:	call   0x103b1e0
 1039387:	nop
 1039388:	mov    rcx,rax
 103938b:	call   QWORD PTR [rip+0xfffffffffffc8757]        # 0x1001ae8
 1039391:	mov    rcx,rax
 1039394:	call   QWORD PTR [rip+0xfffffffffffc83a6]        # 0x1001740
 103939a:	mov    edi,eax
 103939c:	lea    rcx,[rbp+0x218]
 10393a3:	call   QWORD PTR [rip+0xfffffffffffc86ff]        # 0x1001aa8
 10393a9:	nop
 10393aa:	lea    rcx,[rbp+0x148]
 10393b1:	call   QWORD PTR [rip+0xfffffffffffc86f1]        # 0x1001aa8
 10393b7:	mov    r8d,esi
 10393ba:	lea    rcx,[rsp+0x78]
 10393bf:	cmp    DWORD PTR [rsp+0x48],0x8
 10393c4:	jle    0x10393e0
 10393c6:	xor    eax,eax
 10393c8:	mov    r9d,eax
 10393cb:	test   edi,edi
 10393cd:	cmovg  r9d,edi
 10393d1:	lea    rdx,[rip+0xfffffffffffcf5b8]        # 0x1008990
 10393d8:	call   QWORD PTR [rip+0xfffffffffffc8662]        # 0x1001a40
 10393de:	jmp    0x10393ed
 10393e0:	lea    rdx,[rip+0xfffffffffffc9801]        # 0x1002be8
 10393e7:	call   QWORD PTR [rip+0xfffffffffffc8653]        # 0x1001a40
 10393ed:	lea    rcx,[rip+0xfffffffffffcf5dc]        # 0x10089d0
 10393f4:	call   QWORD PTR [rip+0xfffffffffffc80be]        # 0x10014b8
 10393fa:	lea    rcx,[rsp+0x78]
 10393ff:	call   QWORD PTR [rip+0xfffffffffffc86e3]        # 0x1001ae8
 1039405:	mov    rcx,rax
 1039408:	call   QWORD PTR [rip+0xfffffffffffc80aa]        # 0x10014b8
 103940e:	xor    eax,eax
 1039410:	mov    WORD PTR [rbp+0xa60],ax
 1039417:	mov    rax,QWORD PTR [r12]
 103941b:	lea    rdx,[rbp+0x1d8]
 1039422:	mov    rcx,r12
 1039425:	call   QWORD PTR [rax+0x80]
 103942b:	nop
 103942c:	mov    rcx,rax
 103942f:	call   QWORD PTR [rip+0xfffffffffffc86b3]        # 0x1001ae8
 1039435:	mov    rdi,rax
 1039438:	lea    rcx,[rsp+0x38]
 103943d:	call   QWORD PTR [rip+0xfffffffffffc86a5]        # 0x1001ae8
 1039443:	mov    QWORD PTR [rsp+0x28],rdi
 1039448:	mov    QWORD PTR [rsp+0x20],rax
 103944d:	lea    r9,[rip+0xfffffffffffcf59c]        # 0x10089f0
 1039454:	mov    edx,0x401
 1039459:	lea    r8d,[rdx-0x1]
 103945d:	lea    rcx,[rbp+0x260]
 1039464:	call   QWORD PTR [rip+0xfffffffffffc82e6]        # 0x1001750
 103946a:	nop
 103946b:	lea    rcx,[rbp+0x1d8]
 1039472:	call   QWORD PTR [rip+0xfffffffffffc8630]        # 0x1001aa8
 1039478:	lea    rcx,[rip+0xfffffffffffcf689]        # 0x1008b08
 103947f:	call   QWORD PTR [rip+0xfffffffffffc8033]        # 0x10014b8
 1039485:	lea    rcx,[rsp+0x78]
 103948a:	call   QWORD PTR [rip+0xfffffffffffc8658]        # 0x1001ae8
 1039490:	mov    rcx,rax
 1039493:	call   QWORD PTR [rip+0xfffffffffffc801f]        # 0x10014b8
 1039499:	lea    r8,[rbp+0x260]
 10394a0:	lea    rdx,[rbp-0x38]
 10394a4:	mov    rcx,r13
 10394a7:	call   0x103b5e0
 10394ac:	nop
 10394ad:	lea    rcx,[rbp-0x38]
 10394b1:	call   QWORD PTR [rip+0xfffffffffffc8639]        # 0x1001af0
 10394b7:	test   eax,eax
 10394b9:	je     0x10394f3
 10394bb:	mov    edi,0x1
 10394c0:	mov    r8d,edi
 10394c3:	lea    rdx,[rbp+0x158]
 10394ca:	lea    rcx,[rbp-0x38]
 10394ce:	call   QWORD PTR [rip+0xfffffffffffc8574]        # 0x1001a48
 10394d4:	nop
 10394d5:	mov    DWORD PTR [rsp+0x68],edi
 10394d9:	lea    rdx,[rip+0xfffffffffffc9920]        # 0x1002e00
 10394e0:	mov    rcx,rax
 10394e3:	call   QWORD PTR [rip+0xfffffffffffc8517]        # 0x1001a00
 10394e9:	test   eax,eax
 10394eb:	je     0x10394f7
 10394ed:	movzx  esi,dil
 10394f1:	jmp    0x10394fa
 10394f3:	mov    edi,DWORD PTR [rsp+0x68]
 10394f7:	xor    sil,sil
 10394fa:	test   dil,0x1
 10394fe:	je     0x1039514
 1039500:	and    edi,0xfffffffe
 1039503:	mov    DWORD PTR [rsp+0x68],edi
 1039507:	lea    rcx,[rbp+0x158]
 103950e:	call   QWORD PTR [rip+0xfffffffffffc8594]        # 0x1001aa8
 1039514:	test   sil,sil
 1039517:	je     0x103954c
 1039519:	lea    r8,[rbp-0x38]
 103951d:	lea    rdx,[rip+0xfffffffffffc98dc]        # 0x1002e00
 1039524:	lea    rcx,[rbp+0x230]
 103952b:	call   0x1013d70
 1039530:	nop
 1039531:	mov    rdx,rax
 1039534:	lea    rcx,[rbp-0x38]
 1039538:	call   QWORD PTR [rip+0xfffffffffffc8562]        # 0x1001aa0
 103953e:	nop
 103953f:	lea    rcx,[rbp+0x230]
 1039546:	call   QWORD PTR [rip+0xfffffffffffc855c]        # 0x1001aa8
 103954c:	lea    rdx,[rbp-0x38]
 1039550:	lea    rcx,[rsp+0x78]
 1039555:	call   QWORD PTR [rip+0xfffffffffffc847d]        # 0x10019d8
 103955b:	mov    rsi,QWORD PTR [r12]
 103955f:	lea    rcx,[rsp+0x78]
 1039564:	call   QWORD PTR [rip+0xfffffffffffc857e]        # 0x1001ae8
 103956a:	mov    rdi,rax
 103956d:	lea    rcx,[rbp-0x70]
 1039571:	call   QWORD PTR [rip+0xfffffffffffc8571]        # 0x1001ae8
 1039577:	mov    r8,rax
 103957a:	mov    r9,rdi
 103957d:	mov    edx,r14d
 1039580:	mov    rcx,r12
 1039583:	call   QWORD PTR [rsi+0x18]
 1039586:	nop
 1039587:	lea    rcx,[rbp-0x38]
 103958b:	call   QWORD PTR [rip+0xfffffffffffc8517]        # 0x1001aa8
 1039591:	mov    rdi,QWORD PTR [rbp-0x20]
 1039595:	mov    r14,QWORD PTR [rbp-0x50]
 1039599:	mov    rsi,QWORD PTR [rbp-0x48]
 103959d:	jmp    0x10395aa
 103959f:	mov    ecx,0x80004003
 10395a4:	call   0x1049210
 10395a9:	int3   
 10395aa:	mov    BYTE PTR [rsp+0x60],0x1
 10395af:	mov    rax,QWORD PTR [r12]
 10395b3:	lea    rdx,[rbp+0x78]
 10395b7:	mov    rcx,r12
 10395ba:	call   QWORD PTR [rax+0x80]
 10395c0:	nop
 10395c1:	mov    rcx,rax
 10395c4:	call   QWORD PTR [rip+0xfffffffffffc851e]        # 0x1001ae8
 10395ca:	mov    r13,rax
 10395cd:	lea    rcx,[rsp+0x38]
 10395d2:	call   QWORD PTR [rip+0xfffffffffffc8510]        # 0x1001ae8
 10395d8:	mov    r9,rax
 10395db:	lea    rax,[rsp+0x60]
 10395e0:	mov    QWORD PTR [rsp+0x28],rax
 10395e5:	mov    QWORD PTR [rsp+0x20],r13
 10395ea:	lea    r8,[rip+0xfffffffffffcf52f]        # 0x1008b20
 10395f1:	lea    rdx,[rbp+0x168]
 10395f8:	mov    rcx,QWORD PTR [rsp+0x50]
 10395fd:	call   0x103b1e0
 1039602:	nop
 1039603:	mov    rdx,rax
 1039606:	lea    rcx,[rsp+0x40]
 103960b:	call   QWORD PTR [rip+0xfffffffffffc848f]        # 0x1001aa0
 1039611:	nop
 1039612:	lea    rcx,[rbp+0x168]
 1039619:	call   QWORD PTR [rip+0xfffffffffffc8489]        # 0x1001aa8
 103961f:	nop
 1039620:	lea    rcx,[rbp+0x78]
 1039624:	call   QWORD PTR [rip+0xfffffffffffc847e]        # 0x1001aa8
 103962a:	lea    rcx,[rsp+0x40]
 103962f:	call   QWORD PTR [rip+0xfffffffffffc84b3]        # 0x1001ae8
 1039635:	mov    rcx,rax
 1039638:	lea    rdx,[rip+0xfffffffffffcea61]        # 0x10080a0
 103963f:	call   QWORD PTR [rip+0xfffffffffffc808b]        # 0x10016d0
 1039645:	test   eax,eax
 1039647:	jne    0x1039b1a
 103964d:	mov    BYTE PTR [rsp+0x74],0x1
 1039652:	mov    rax,QWORD PTR [r12]
 1039656:	lea    rdx,[rbp+0x90]
 103965d:	mov    rcx,r12
 1039660:	call   QWORD PTR [rax+0x80]
 1039666:	nop
 1039667:	mov    rcx,rax
 103966a:	call   QWORD PTR [rip+0xfffffffffffc8478]        # 0x1001ae8
 1039670:	mov    r13,rax
 1039673:	lea    rcx,[rsp+0x38]
 1039678:	call   QWORD PTR [rip+0xfffffffffffc846a]        # 0x1001ae8
 103967e:	mov    r9,rax
 1039681:	lea    rax,[rsp+0x74]
 1039686:	mov    QWORD PTR [rsp+0x28],rax
 103968b:	mov    QWORD PTR [rsp+0x20],r13
 1039690:	lea    r8,[rip+0xfffffffffffcf569]        # 0x1008c00
 1039697:	lea    rdx,[rbp+0x80]
 103969e:	mov    rcx,QWORD PTR [rsp+0x50]
 10396a3:	call   0x103b1e0
 10396a8:	nop
 10396a9:	mov    rcx,rax
 10396ac:	call   QWORD PTR [rip+0xfffffffffffc8436]        # 0x1001ae8
 10396b2:	mov    rcx,rax
 10396b5:	call   QWORD PTR [rip+0xfffffffffffc8085]        # 0x1001740
 10396bb:	mov    DWORD PTR [rbp-0x80],eax
 10396be:	lea    rcx,[rbp+0x80]
 10396c5:	call   QWORD PTR [rip+0xfffffffffffc83dd]        # 0x1001aa8
 10396cb:	nop
 10396cc:	lea    rcx,[rbp+0x90]
 10396d3:	call   QWORD PTR [rip+0xfffffffffffc83cf]        # 0x1001aa8
 10396d9:	lea    rdx,[rip+0xfffffffffffc8730]        # 0x1001e10
 10396e0:	lea    rcx,[rsp+0x78]
 10396e5:	call   QWORD PTR [rip+0xfffffffffffc83ad]        # 0x1001a98
 10396eb:	cmp    DWORD PTR [rsp+0x48],0x9
 10396f0:	jge    0x1039989
 10396f6:	mov    BYTE PTR [rsp+0x62],0x1
 10396fb:	mov    r8,QWORD PTR [r12]
 10396ff:	lea    rdx,[rbp+0xb0]
 1039706:	mov    rcx,r12
 1039709:	call   QWORD PTR [r8+0x80]
 1039710:	nop
 1039711:	mov    rcx,rax
 1039714:	call   QWORD PTR [rip+0xfffffffffffc83ce]        # 0x1001ae8
 103971a:	mov    r13,rax
 103971d:	lea    rcx,[rsp+0x38]
 1039722:	call   QWORD PTR [rip+0xfffffffffffc83c0]        # 0x1001ae8
 1039728:	mov    r9,rax
 103972b:	lea    rax,[rsp+0x62]
 1039730:	mov    QWORD PTR [rsp+0x28],rax
 1039735:	mov    QWORD PTR [rsp+0x20],r13
 103973a:	lea    r8,[rip+0xfffffffffffcf5cf]        # 0x1008d10
 1039741:	lea    rdx,[rbp+0xa0]
 1039748:	mov    rcx,QWORD PTR [rsp+0x50]
 103974d:	call   0x103b1e0
 1039752:	nop
 1039753:	mov    rcx,rax
 1039756:	call   QWORD PTR [rip+0xfffffffffffc838c]        # 0x1001ae8
 103975c:	mov    rdx,rax
 103975f:	lea    rcx,[rip+0xfffffffffffce93a]        # 0x10080a0
 1039766:	call   QWORD PTR [rip+0xfffffffffffc7f64]        # 0x10016d0
 103976c:	test   eax,eax
 103976e:	sete   BYTE PTR [rsp+0x30]
 1039773:	lea    rcx,[rbp+0xa0]
 103977a:	call   QWORD PTR [rip+0xfffffffffffc8328]        # 0x1001aa8
 1039780:	nop
 1039781:	lea    rcx,[rbp+0xb0]
 1039788:	call   QWORD PTR [rip+0xfffffffffffc831a]        # 0x1001aa8
 103978e:	mov    BYTE PTR [rsp+0x58],0x1
 1039793:	mov    rax,QWORD PTR [r12]
 1039797:	lea    rdx,[rbp+0xd0]
 103979e:	mov    rcx,r12
 10397a1:	call   QWORD PTR [rax+0x80]
 10397a7:	nop
 10397a8:	mov    rcx,rax
 10397ab:	call   QWORD PTR [rip+0xfffffffffffc8337]        # 0x1001ae8
 10397b1:	mov    r13,rax
 10397b4:	lea    rcx,[rsp+0x38]
 10397b9:	call   QWORD PTR [rip+0xfffffffffffc8329]        # 0x1001ae8
 10397bf:	mov    r9,rax
 10397c2:	lea    rax,[rsp+0x58]
 10397c7:	mov    QWORD PTR [rsp+0x28],rax
 10397cc:	mov    QWORD PTR [rsp+0x20],r13
 10397d1:	lea    r8,[rip+0xfffffffffffcf638]        # 0x1008e10
 10397d8:	lea    rdx,[rbp+0xc0]
 10397df:	mov    rcx,QWORD PTR [rsp+0x50]
 10397e4:	call   0x103b1e0
 10397e9:	nop
 10397ea:	mov    rcx,rax
 10397ed:	call   QWORD PTR [rip+0xfffffffffffc82f5]        # 0x1001ae8
 10397f3:	mov    rdx,rax
 10397f6:	lea    rcx,[rip+0xfffffffffffce8a3]        # 0x10080a0
 10397fd:	call   QWORD PTR [rip+0xfffffffffffc7ecd]        # 0x10016d0
 1039803:	test   eax,eax
 1039805:	sete   r13b
 1039809:	lea    rcx,[rbp+0xc0]
 1039810:	call   QWORD PTR [rip+0xfffffffffffc8292]        # 0x1001aa8
 1039816:	nop
 1039817:	lea    rcx,[rbp+0xd0]
 103981e:	call   QWORD PTR [rip+0xfffffffffffc8284]        # 0x1001aa8
 1039824:	movzx  r9d,r13b
 1039828:	movzx  r8d,BYTE PTR [rsp+0x30]
 103982e:	lea    rdx,[rip+0xfffffffffffc94f3]        # 0x1002d28
 1039835:	lea    rcx,[rsp+0x78]
 103983a:	call   QWORD PTR [rip+0xfffffffffffc8200]        # 0x1001a40
 1039840:	xor    eax,eax
 1039842:	mov    WORD PTR [rbp+0xa60],ax
 1039849:	mov    rax,QWORD PTR [r12]
 103984d:	lea    rdx,[rbp+0xe0]
 1039854:	mov    rcx,r12
 1039857:	call   QWORD PTR [rax+0x80]
 103985d:	nop
 103985e:	mov    rcx,rax
 1039861:	call   QWORD PTR [rip+0xfffffffffffc8281]        # 0x1001ae8
 1039867:	mov    r13,rax
 103986a:	lea    rcx,[rsp+0x38]
 103986f:	call   QWORD PTR [rip+0xfffffffffffc8273]        # 0x1001ae8
 1039875:	mov    QWORD PTR [rsp+0x28],r13
 103987a:	mov    QWORD PTR [rsp+0x20],rax
 103987f:	lea    r9,[rip+0xfffffffffffcf68a]        # 0x1008f10
 1039886:	mov    edx,0x401
 103988b:	lea    r8d,[rdx-0x1]
 103988f:	lea    rcx,[rbp+0x260]
 1039896:	call   QWORD PTR [rip+0xfffffffffffc7eb4]        # 0x1001750
 103989c:	nop
 103989d:	lea    rcx,[rbp+0xe0]
 10398a4:	call   QWORD PTR [rip+0xfffffffffffc81fe]        # 0x1001aa8
 10398aa:	lea    r8,[rbp+0x260]
 10398b1:	lea    rdx,[rbp-0x30]
 10398b5:	mov    rcx,QWORD PTR [rsp+0x50]
 10398ba:	call   0x103b5e0
 10398bf:	nop
 10398c0:	lea    rcx,[rbp-0x30]
 10398c4:	call   QWORD PTR [rip+0xfffffffffffc8226]        # 0x1001af0
 10398ca:	test   eax,eax
 10398cc:	je     0x103990f
 10398ce:	mov    r8d,0x1
 10398d4:	lea    rdx,[rbp+0xf0]
 10398db:	lea    rcx,[rbp-0x30]
 10398df:	call   QWORD PTR [rip+0xfffffffffffc8163]        # 0x1001a48
 10398e5:	nop
 10398e6:	mov    r13d,DWORD PTR [rsp+0x68]
 10398eb:	or     r13d,0x2
 10398ef:	mov    DWORD PTR [rsp+0x68],r13d
 10398f4:	lea    rdx,[rip+0xfffffffffffc9505]        # 0x1002e00
 10398fb:	mov    rcx,rax
 10398fe:	call   QWORD PTR [rip+0xfffffffffffc80fc]        # 0x1001a00
 1039904:	test   eax,eax
 1039906:	je     0x1039914
 1039908:	mov    BYTE PTR [rsp+0x30],0x1
 103990d:	jmp    0x1039919
 103990f:	mov    r13d,DWORD PTR [rsp+0x68]
 1039914:	mov    BYTE PTR [rsp+0x30],0x0
 1039919:	test   r13b,0x2
 103991d:	je     0x1039935
 103991f:	and    r13d,0xfffffffd
 1039923:	mov    DWORD PTR [rsp+0x68],r13d
 1039928:	lea    rcx,[rbp+0xf0]
 103992f:	call   QWORD PTR [rip+0xfffffffffffc8173]        # 0x1001aa8
 1039935:	cmp    BYTE PTR [rsp+0x30],0x0
 103993a:	je     0x103996f
 103993c:	lea    r8,[rbp-0x30]
 1039940:	lea    rdx,[rip+0xfffffffffffc94b9]        # 0x1002e00
 1039947:	lea    rcx,[rbp+0x100]
 103994e:	call   0x1013d70
 1039953:	nop
 1039954:	mov    rdx,rax
 1039957:	lea    rcx,[rbp-0x30]
 103995b:	call   QWORD PTR [rip+0xfffffffffffc813f]        # 0x1001aa0
 1039961:	nop
 1039962:	lea    rcx,[rbp+0x100]
 1039969:	call   QWORD PTR [rip+0xfffffffffffc8139]        # 0x1001aa8
 103996f:	lea    rdx,[rbp-0x30]
 1039973:	lea    rcx,[rsp+0x78]
 1039978:	call   QWORD PTR [rip+0xfffffffffffc805a]        # 0x10019d8
 103997e:	nop
 103997f:	lea    rcx,[rbp-0x30]
 1039983:	call   QWORD PTR [rip+0xfffffffffffc811f]        # 0x1001aa8
 1039989:	mov    BYTE PTR [rsp+0x64],0x1
 103998e:	mov    rax,QWORD PTR [r12]
 1039992:	lea    rdx,[rbp+0x120]
 1039999:	mov    rcx,r12
 103999c:	call   QWORD PTR [rax+0x80]
 10399a2:	nop
 10399a3:	mov    rcx,rax
 10399a6:	call   QWORD PTR [rip+0xfffffffffffc813c]        # 0x1001ae8
 10399ac:	mov    r13,rax
 10399af:	lea    rcx,[rsp+0x38]
 10399b4:	call   QWORD PTR [rip+0xfffffffffffc812e]        # 0x1001ae8
 10399ba:	mov    r9,rax
 10399bd:	lea    rax,[rsp+0x64]
 10399c2:	mov    QWORD PTR [rsp+0x28],rax
 10399c7:	mov    QWORD PTR [rsp+0x20],r13
 10399cc:	lea    r8,[rip+0xfffffffffffcf65d]        # 0x1009030
 10399d3:	lea    rdx,[rbp+0x110]
 10399da:	mov    rcx,QWORD PTR [rsp+0x50]
 10399df:	call   0x103b1e0
 10399e4:	nop
 10399e5:	mov    rcx,rax
 10399e8:	call   QWORD PTR [rip+0xfffffffffffc80fa]        # 0x1001ae8
 10399ee:	mov    rcx,rax
 10399f1:	call   QWORD PTR [rip+0xfffffffffffc7d49]        # 0x1001740
 10399f7:	mov    DWORD PTR [rbp-0x7c],eax
 10399fa:	lea    rcx,[rbp+0x110]
 1039a01:	call   QWORD PTR [rip+0xfffffffffffc80a1]        # 0x1001aa8
 1039a07:	nop
 1039a08:	lea    rcx,[rbp+0x120]
 1039a0f:	call   QWORD PTR [rip+0xfffffffffffc8093]        # 0x1001aa8
 1039a15:	mov    BYTE PTR [rsp+0x72],0x1
 1039a1a:	mov    r8,QWORD PTR [r12]
 1039a1e:	lea    rdx,[rbp+0x140]
 1039a25:	mov    rcx,r12
 1039a28:	call   QWORD PTR [r8+0x80]
 1039a2f:	nop
 1039a30:	mov    rcx,rax
 1039a33:	call   QWORD PTR [rip+0xfffffffffffc80af]        # 0x1001ae8
 1039a39:	mov    r13,rax
 1039a3c:	lea    rcx,[rsp+0x38]
 1039a41:	call   QWORD PTR [rip+0xfffffffffffc80a1]        # 0x1001ae8
 1039a47:	mov    r9,rax
 1039a4a:	lea    rax,[rsp+0x72]
 1039a4f:	mov    QWORD PTR [rsp+0x28],rax
 1039a54:	mov    QWORD PTR [rsp+0x20],r13
 1039a59:	lea    r8,[rip+0xfffffffffffcf6e0]        # 0x1009140
 1039a60:	lea    rdx,[rbp+0x130]
 1039a67:	mov    rcx,QWORD PTR [rsp+0x50]
 1039a6c:	call   0x103b1e0
 1039a71:	nop
 1039a72:	mov    rcx,rax
 1039a75:	call   QWORD PTR [rip+0xfffffffffffc806d]        # 0x1001ae8
 1039a7b:	mov    rcx,rax
 1039a7e:	call   QWORD PTR [rip+0xfffffffffffc7cbc]        # 0x1001740
 1039a84:	mov    r13d,eax
 1039a87:	lea    rcx,[rbp+0x130]
 1039a8e:	call   QWORD PTR [rip+0xfffffffffffc8014]        # 0x1001aa8
 1039a94:	nop
 1039a95:	lea    rcx,[rbp+0x140]
 1039a9c:	call   QWORD PTR [rip+0xfffffffffffc8006]        # 0x1001aa8
 1039aa2:	lea    rcx,[rbp+0x0]
 1039aa6:	call   QWORD PTR [rip+0xfffffffffffc8014]        # 0x1001ac0
 1039aac:	nop
 1039aad:	mov    r8d,DWORD PTR [rbp-0x7c]
 1039ab1:	lea    rcx,[rbp+0x0]
 1039ab5:	cmp    DWORD PTR [rsp+0x48],0x8
 1039aba:	jle    0x1039ad7
 1039abc:	xor    eax,eax
 1039abe:	mov    r9d,eax
 1039ac1:	test   r13d,r13d
 1039ac4:	cmovg  r9d,r13d
 1039ac8:	lea    rdx,[rip+0xfffffffffffceec1]        # 0x1008990
 1039acf:	call   QWORD PTR [rip+0xfffffffffffc7f6b]        # 0x1001a40
 1039ad5:	jmp    0x1039ae4
 1039ad7:	lea    rdx,[rip+0xfffffffffffc910a]        # 0x1002be8
 1039ade:	call   QWORD PTR [rip+0xfffffffffffc7f5c]        # 0x1001a40
 1039ae4:	lea    rdx,[rbp+0x0]
 1039ae8:	lea    rcx,[rsp+0x78]
 1039aed:	call   QWORD PTR [rip+0xfffffffffffc7ee5]        # 0x10019d8
 1039af3:	mov    r13,QWORD PTR [r12]
 1039af7:	lea    rcx,[rsp+0x78]
 1039afc:	call   QWORD PTR [rip+0xfffffffffffc7fe6]        # 0x1001ae8
 1039b02:	mov    r8,rax
 1039b05:	mov    edx,DWORD PTR [rbp-0x80]
 1039b08:	mov    rcx,r12
 1039b0b:	call   QWORD PTR [r13+0x28]
 1039b0f:	nop
 1039b10:	lea    rcx,[rbp+0x0]
 1039b14:	call   QWORD PTR [rip+0xfffffffffffc7f8e]        # 0x1001aa8
 1039b1a:	xor    eax,eax
 1039b1c:	mov    WORD PTR [rbp+0xa60],ax
 1039b23:	mov    rax,QWORD PTR [r12]
 1039b27:	lea    rdx,[rbp+0x150]
 1039b2e:	mov    rcx,r12
 1039b31:	call   QWORD PTR [rax+0x80]
 1039b37:	nop
 1039b38:	mov    rcx,rax
 1039b3b:	call   QWORD PTR [rip+0xfffffffffffc7fa7]        # 0x1001ae8
 1039b41:	mov    r13,rax
 1039b44:	lea    rcx,[rsp+0x38]
 1039b49:	call   QWORD PTR [rip+0xfffffffffffc7f99]        # 0x1001ae8
 1039b4f:	mov    QWORD PTR [rsp+0x28],r13
 1039b54:	mov    QWORD PTR [rsp+0x20],rax
 1039b59:	lea    r9,[rip+0xfffffffffffcf6f0]        # 0x1009250
 1039b60:	mov    edx,0x401
 1039b65:	lea    r8d,[rdx-0x1]
 1039b69:	lea    rcx,[rbp+0x260]
 1039b70:	call   QWORD PTR [rip+0xfffffffffffc7bda]        # 0x1001750
 1039b76:	nop
 1039b77:	lea    rcx,[rbp+0x150]
 1039b7e:	call   QWORD PTR [rip+0xfffffffffffc7f24]        # 0x1001aa8
 1039b84:	lea    r11,[rbp+0x20]
 1039b88:	mov    QWORD PTR [rbp-0x8],r11
 1039b8c:	mov    ecx,0x18
 1039b91:	call   0x103f9d2
 1039b96:	mov    r13,rax
 1039b99:	mov    QWORD PTR [rbp-0x28],rax
 1039b9d:	test   rax,rax
 1039ba0:	je     0x1039bd2
 1039ba2:	xor    eax,eax
 1039ba4:	mov    QWORD PTR [r13+0x8],rax
 1039ba8:	mov    eax,0x1
 1039bad:	mov    DWORD PTR [r13+0x10],eax
 1039bb1:	lea    rcx,[rbp+0x260]
 1039bb8:	call   QWORD PTR [rip+0xfffffffffffc7c82]        # 0x1001840
 1039bbe:	mov    QWORD PTR [r13+0x0],rax
 1039bc2:	test   rax,rax
 1039bc5:	jne    0x1039bd5
 1039bc7:	mov    ecx,0x8007000e
 1039bcc:	call   0x1049210
 1039bd1:	int3   
 1039bd2:	mov    r13,rax
 1039bd5:	mov    QWORD PTR [rbp+0x20],r13
 1039bd9:	test   r13,r13
 1039bdc:	jne    0x1039be9
 1039bde:	mov    ecx,0x8007000e
 1039be3:	call   0x1049210
 1039be8:	nop
 1039be9:	mov    r13,QWORD PTR [rsp+0x50]
 1039bee:	mov    rcx,QWORD PTR [r13+0x10]
 1039bf2:	test   rcx,rcx
 1039bf5:	jne    0x1039c02
 1039bf7:	mov    ecx,0x80004003
 1039bfc:	call   0x1049210
 1039c01:	nop
 1039c02:	lea    r8,[rbp+0x20]
 1039c06:	lea    rdx,[rbp+0x160]
 1039c0d:	call   0x10366d0
 1039c12:	nop
 1039c13:	mov    rcx,QWORD PTR [rax]
 1039c16:	test   rcx,rcx
 1039c19:	je     0x1039c29
 1039c1b:	mov    r14,rcx
 1039c1e:	mov    QWORD PTR [rbp-0x50],rcx
 1039c22:	mov    rax,QWORD PTR [rcx]
 1039c25:	call   QWORD PTR [rax+0x8]
 1039c28:	nop
 1039c29:	mov    rcx,QWORD PTR [rbp+0x160]
 1039c30:	test   rcx,rcx
 1039c33:	je     0x1039c3b
 1039c35:	mov    rax,QWORD PTR [rcx]
 1039c38:	call   QWORD PTR [rax+0x10]
 1039c3b:	test   r14,r14
 1039c3e:	sete   al
 1039c41:	mov    BYTE PTR [rsp+0x30],al
 1039c45:	test   al,al
 1039c47:	je     0x1039c7b
 1039c49:	mov    rax,QWORD PTR [r12+0x8]
 1039c4e:	movsxd rcx,DWORD PTR [rax+0x4]
 1039c52:	add    rcx,0x8
 1039c56:	add    rcx,r12
 1039c59:	mov    rax,QWORD PTR [rcx]
 1039c5c:	mov    BYTE PTR [rsp+0x28],0x1
 1039c61:	mov    BYTE PTR [rsp+0x20],0x1
 1039c66:	xor    r9d,r9d
 1039c69:	xor    r8d,r8d
 1039c6c:	mov    edx,0xc000c3e4
 1039c71:	call   QWORD PTR [rax]
 1039c73:	xor    r12b,r12b
 1039c76:	jmp    0x103a699
 1039c7b:	test   r14,r14
 1039c7e:	jne    0x1039c8b
 1039c80:	mov    ecx,0x80004003
 1039c85:	call   0x1049210
 1039c8a:	int3   
 1039c8b:	xor    eax,eax
 1039c8d:	mov    DWORD PTR [rbp-0x7c],eax
 1039c90:	mov    rax,QWORD PTR [r14]
 1039c93:	lea    rdx,[rbp-0x7c]
 1039c97:	mov    rcx,r14
 1039c9a:	call   QWORD PTR [rax+0x40]
 1039c9d:	test   eax,eax
 1039c9f:	jns    0x1039cb2
 1039ca1:	lea    r8,[rip+0xfffffffffffcdd48]        # 0x10079f0
 1039ca8:	mov    rdx,r14
 1039cab:	mov    ecx,eax
 1039cad:	call   0x1049230
 1039cb2:	cmp    DWORD PTR [rbp-0x7c],0x0
 1039cb6:	je     0x1039e03
 1039cbc:	xor    r15d,r15d
 1039cbf:	mov    r13d,r15d
 1039cc2:	mov    DWORD PTR [rsp+0x48],r15d
 1039cc7:	mov    rsi,QWORD PTR [rsp+0x50]
 1039ccc:	nop    DWORD PTR [rax+0x0]
 1039cd0:	mov    DWORD PTR [rbp-0x18],r15d
 1039cd4:	mov    rax,QWORD PTR [r14]
 1039cd7:	lea    rdx,[rbp-0x18]
 1039cdb:	mov    rcx,r14
 1039cde:	call   QWORD PTR [rax+0x40]
 1039ce1:	test   eax,eax
 1039ce3:	jns    0x1039cf6
 1039ce5:	lea    r8,[rip+0xfffffffffffcdd04]        # 0x10079f0
 1039cec:	mov    rdx,r14
 1039cef:	mov    ecx,eax
 1039cf1:	call   0x1049230
 1039cf6:	cmp    r13d,DWORD PTR [rbp-0x18]
 1039cfa:	jge    0x1039da3
 1039d00:	mov    r8d,r13d
 1039d03:	lea    rdx,[rbp+0x170]
 1039d0a:	mov    rcx,r14
 1039d0d:	call   0x1036870
 1039d12:	nop
 1039d13:	mov    rcx,QWORD PTR [rax]
 1039d16:	cmp    rdi,rcx
 1039d19:	je     0x1039d44
 1039d1b:	mov    r13,rdi
 1039d1e:	mov    rdi,rcx
 1039d21:	mov    QWORD PTR [rbp-0x20],rcx
 1039d25:	test   rcx,rcx
 1039d28:	je     0x1039d30
 1039d2a:	mov    rax,QWORD PTR [rcx]
 1039d2d:	call   QWORD PTR [rax+0x8]
 1039d30:	test   r13,r13
 1039d33:	je     0x1039d3f
 1039d35:	mov    rax,QWORD PTR [r13+0x0]
 1039d39:	mov    rcx,r13
 1039d3c:	call   QWORD PTR [rax+0x10]
 1039d3f:	mov    r13d,DWORD PTR [rsp+0x48]
 1039d44:	mov    rcx,QWORD PTR [rbp+0x170]
 1039d4b:	test   rcx,rcx
 1039d4e:	je     0x1039d56
 1039d50:	mov    rax,QWORD PTR [rcx]
 1039d53:	call   QWORD PTR [rax+0x10]
 1039d56:	lea    rax,[rbp+0x60]
 1039d5a:	mov    QWORD PTR [rbp-0x8],rax
 1039d5e:	mov    QWORD PTR [rbp+0x60],rdi
 1039d62:	test   rdi,rdi
 1039d65:	je     0x1039d71
 1039d67:	mov    rax,QWORD PTR [rdi]
 1039d6a:	mov    rcx,rdi
 1039d6d:	call   QWORD PTR [rax+0x8]
 1039d70:	nop
 1039d71:	mov    rax,QWORD PTR [rsi]
 1039d74:	lea    r8,[rbp+0x60]
 1039d78:	mov    rdx,r12
 1039d7b:	mov    rcx,rsi
 1039d7e:	call   QWORD PTR [rax+0x50]
 1039d81:	test   al,al
 1039d83:	je     0x1039da3
 1039d85:	mov    rax,QWORD PTR [r12]
 1039d89:	mov    rcx,r12
 1039d8c:	call   QWORD PTR [rax+0xf8]
 1039d92:	test   eax,eax
 1039d94:	jne    0x1039da3
 1039d96:	inc    r13d
 1039d99:	mov    DWORD PTR [rsp+0x48],r13d
 1039d9e:	jmp    0x1039cd0
 1039da3:	cmp    BYTE PTR [rsp+0x30],0x0
 1039da8:	sete   al
 1039dab:	test   al,al
 1039dad:	mov    rsi,QWORD PTR [rbp-0x48]
 1039db1:	mov    r15,QWORD PTR [rbp-0x58]
 1039db5:	je     0x1039dcc
 1039db7:	mov    rax,QWORD PTR [r14]
 1039dba:	mov    rcx,r14
 1039dbd:	call   QWORD PTR [rax+0x10]
 1039dc0:	xor    r13d,r13d
 1039dc3:	mov    r14d,r13d
 1039dc6:	mov    QWORD PTR [rbp-0x50],r13
 1039dca:	jmp    0x1039dcf
 1039dcc:	xor    r13d,r13d
 1039dcf:	test   rdi,rdi
 1039dd2:	sete   al
 1039dd5:	test   al,al
 1039dd7:	sete   al
 1039dda:	test   al,al
 1039ddc:	je     0x1039dfe
 1039dde:	test   rdi,rdi
 1039de1:	jne    0x1039dee
 1039de3:	mov    ecx,0x80004003
 1039de8:	call   0x1049210
 1039ded:	int3   
 1039dee:	mov    rax,QWORD PTR [rdi]
 1039df1:	mov    rcx,rdi
 1039df4:	call   QWORD PTR [rax+0x10]
 1039df7:	mov    rdi,r13
 1039dfa:	mov    QWORD PTR [rbp-0x20],r13
 1039dfe:	mov    r13,QWORD PTR [rsp+0x50]
 1039e03:	mov    BYTE PTR [rsp+0x30],0x1
 1039e08:	mov    rax,QWORD PTR [r12]
 1039e0c:	mov    rcx,r12
 1039e0f:	call   QWORD PTR [rax]
 1039e11:	test   al,al
 1039e13:	je     0x103a696
 1039e19:	mov    BYTE PTR [rsp+0x59],0x1
 1039e1e:	lea    rcx,[rsp+0x38]
 1039e23:	call   QWORD PTR [rip+0xfffffffffffc7cbf]        # 0x1001ae8
 1039e29:	mov    r9,rax
 1039e2c:	lea    rax,[rsp+0x59]
 1039e31:	mov    QWORD PTR [rsp+0x28],rax
 1039e36:	lea    rax,[rip+0xfffffffffffc7fd3]        # 0x1001e10
 1039e3d:	mov    QWORD PTR [rsp+0x20],rax
 1039e42:	lea    r8,[rip+0xfffffffffffcf4e7]        # 0x1009330
 1039e49:	lea    rdx,[rbp+0x180]
 1039e50:	mov    rcx,r13
 1039e53:	call   0x103b1e0
 1039e58:	nop
 1039e59:	mov    rdx,rax
 1039e5c:	lea    rcx,[rsp+0x40]
 1039e61:	call   QWORD PTR [rip+0xfffffffffffc7c39]        # 0x1001aa0
 1039e67:	nop
 1039e68:	lea    rcx,[rbp+0x180]
 1039e6f:	call   QWORD PTR [rip+0xfffffffffffc7c33]        # 0x1001aa8
 1039e75:	lea    rcx,[rsp+0x40]
 1039e7a:	call   QWORD PTR [rip+0xfffffffffffc7c68]        # 0x1001ae8
 1039e80:	mov    rcx,rax
 1039e83:	lea    rdx,[rip+0xfffffffffffce216]        # 0x10080a0
 1039e8a:	call   QWORD PTR [rip+0xfffffffffffc7840]        # 0x10016d0
 1039e90:	test   eax,eax
 1039e92:	jne    0x103a535
 1039e98:	mov    BYTE PTR [rsp+0x5b],0x1
 1039e9d:	lea    rcx,[rsp+0x38]
 1039ea2:	call   QWORD PTR [rip+0xfffffffffffc7c40]        # 0x1001ae8
 1039ea8:	mov    r9,rax
 1039eab:	lea    rax,[rsp+0x5b]
 1039eb0:	mov    QWORD PTR [rsp+0x28],rax
 1039eb5:	lea    rax,[rip+0xfffffffffffc7f54]        # 0x1001e10
 1039ebc:	mov    QWORD PTR [rsp+0x20],rax
 1039ec1:	lea    r8,[rip+0xfffffffffffcf508]        # 0x10093d0
 1039ec8:	lea    rdx,[rbp+0x190]
 1039ecf:	mov    rcx,r13
 1039ed2:	call   0x103b1e0
 1039ed7:	nop
 1039ed8:	mov    rdx,rax
 1039edb:	lea    rcx,[rbp-0x78]
 1039edf:	call   QWORD PTR [rip+0xfffffffffffc7bbb]        # 0x1001aa0
 1039ee5:	nop
 1039ee6:	lea    rcx,[rbp+0x190]
 1039eed:	call   QWORD PTR [rip+0xfffffffffffc7bb5]        # 0x1001aa8
 1039ef3:	lea    rcx,[rbp-0x78]
 1039ef7:	call   QWORD PTR [rip+0xfffffffffffc7beb]        # 0x1001ae8
 1039efd:	mov    rcx,rax
 1039f00:	lea    rdx,[rip+0xfffffffffffce199]        # 0x10080a0
 1039f07:	call   QWORD PTR [rip+0xfffffffffffc77c3]        # 0x10016d0
 1039f0d:	xor    cl,cl
 1039f0f:	movzx  ecx,cl
 1039f12:	test   eax,eax
 1039f14:	mov    eax,0x1
 1039f19:	cmove  ecx,eax
 1039f1c:	mov    DWORD PTR [rsp+0x48],ecx
 1039f20:	mov    BYTE PTR [rsp+0x5d],al
 1039f24:	lea    rcx,[rsp+0x38]
 1039f29:	call   QWORD PTR [rip+0xfffffffffffc7bb9]        # 0x1001ae8
 1039f2f:	mov    r9,rax
 1039f32:	lea    rax,[rsp+0x5d]
 1039f37:	mov    QWORD PTR [rsp+0x28],rax
 1039f3c:	lea    rax,[rip+0xfffffffffffc7ecd]        # 0x1001e10
 1039f43:	mov    QWORD PTR [rsp+0x20],rax
 1039f48:	lea    r8,[rip+0xfffffffffffcf521]        # 0x1009470
 1039f4f:	lea    rdx,[rbp+0x1a0]
 1039f56:	mov    rcx,r13
 1039f59:	call   0x103b1e0
 1039f5e:	nop
 1039f5f:	mov    rdx,rax
 1039f62:	lea    rcx,[rbp-0x78]
 1039f66:	call   QWORD PTR [rip+0xfffffffffffc7b34]        # 0x1001aa0
 1039f6c:	nop
 1039f6d:	lea    rcx,[rbp+0x1a0]
 1039f74:	call   QWORD PTR [rip+0xfffffffffffc7b2e]        # 0x1001aa8
 1039f7a:	lea    rcx,[rbp-0x78]
 1039f7e:	call   QWORD PTR [rip+0xfffffffffffc7b64]        # 0x1001ae8
 1039f84:	mov    rcx,rax
 1039f87:	lea    rdx,[rip+0xfffffffffffce112]        # 0x10080a0
 1039f8e:	call   QWORD PTR [rip+0xfffffffffffc773c]        # 0x10016d0
 1039f94:	xor    cl,cl
 1039f96:	movzx  ecx,cl
 1039f99:	test   eax,eax
 1039f9b:	mov    eax,0x1
 1039fa0:	cmove  ecx,eax
 1039fa3:	mov    DWORD PTR [rbp-0x28],ecx
 1039fa6:	cmp    BYTE PTR [rsp+0x48],0x0
 1039fab:	jne    0x1039fb5
 1039fad:	test   cl,cl
 1039faf:	je     0x103a535
 1039fb5:	xor    eax,eax
 1039fb7:	mov    WORD PTR [rbp+0xa60],ax
 1039fbe:	lea    rcx,[rsp+0x38]
 1039fc3:	call   QWORD PTR [rip+0xfffffffffffc7b1f]        # 0x1001ae8
 1039fc9:	mov    QWORD PTR [rsp+0x20],rax
 1039fce:	lea    r9,[rip+0xfffffffffffcf53b]        # 0x1009510
 1039fd5:	mov    edx,0x401
 1039fda:	lea    r8d,[rdx-0x1]
 1039fde:	lea    rcx,[rbp+0x260]
 1039fe5:	call   QWORD PTR [rip+0xfffffffffffc7765]        # 0x1001750
 1039feb:	lea    r11,[rbp+0x30]
 1039fef:	mov    QWORD PTR [rbp-0x8],r11
 1039ff3:	mov    ecx,0x18
 1039ff8:	call   0x103f9d2
 1039ffd:	mov    QWORD PTR [rsp+0x50],rax
 103a002:	test   rax,rax
 103a005:	je     0x103a03a
 103a007:	xor    ecx,ecx
 103a009:	mov    QWORD PTR [rax+0x8],rcx
 103a00d:	mov    ecx,0x1
 103a012:	mov    DWORD PTR [rax+0x10],ecx
 103a015:	lea    rcx,[rbp+0x260]
 103a01c:	call   QWORD PTR [rip+0xfffffffffffc781e]        # 0x1001840
 103a022:	mov    rcx,QWORD PTR [rsp+0x50]
 103a027:	mov    QWORD PTR [rcx],rax
 103a02a:	test   rax,rax
 103a02d:	jne    0x103a03d
 103a02f:	mov    ecx,0x8007000e
 103a034:	call   0x1049210
 103a039:	int3   
 103a03a:	mov    rcx,rax
 103a03d:	mov    QWORD PTR [rbp+0x30],rcx
 103a041:	test   rcx,rcx
 103a044:	jne    0x103a051
 103a046:	mov    ecx,0x8007000e
 103a04b:	call   0x1049210
 103a050:	nop
 103a051:	mov    rcx,QWORD PTR [r13+0x10]
 103a055:	test   rcx,rcx
 103a058:	jne    0x103a065
 103a05a:	mov    ecx,0x80004003
 103a05f:	call   0x1049210
 103a064:	nop
 103a065:	lea    r8,[rbp+0x30]
 103a069:	lea    rdx,[rbp+0x1b0]
 103a070:	call   0x10366d0
 103a075:	nop
 103a076:	mov    rcx,QWORD PTR [rax]
 103a079:	test   rcx,rcx
 103a07c:	je     0x103a08c
 103a07e:	mov    rsi,rcx
 103a081:	mov    QWORD PTR [rbp-0x48],rcx
 103a085:	mov    rax,QWORD PTR [rcx]
 103a088:	call   QWORD PTR [rax+0x8]
 103a08b:	nop
 103a08c:	mov    rcx,QWORD PTR [rbp+0x1b0]
 103a093:	test   rcx,rcx
 103a096:	je     0x103a09e
 103a098:	mov    rax,QWORD PTR [rcx]
 103a09b:	call   QWORD PTR [rax+0x10]
 103a09e:	test   rsi,rsi
 103a0a1:	sete   al
 103a0a4:	mov    BYTE PTR [rsp+0x5f],al
 103a0a8:	test   al,al
 103a0aa:	je     0x103a0e1
 103a0ac:	mov    rax,QWORD PTR [r12+0x8]
 103a0b1:	movsxd rcx,DWORD PTR [rax+0x4]
 103a0b5:	add    rcx,0x8
 103a0b9:	add    rcx,r12
 103a0bc:	mov    rax,QWORD PTR [rcx]
 103a0bf:	mov    BYTE PTR [rsp+0x28],0x1
 103a0c4:	mov    BYTE PTR [rsp+0x20],0x1
 103a0c9:	xor    r9d,r9d
 103a0cc:	xor    r8d,r8d
 103a0cf:	mov    edx,0xc000c3e5
 103a0d4:	call   QWORD PTR [rax]
 103a0d6:	movzx  r12d,BYTE PTR [rsp+0x30]
 103a0dc:	jmp    0x103a699
 103a0e1:	lea    rdx,[rip+0xfffffffffffc7d28]        # 0x1001e10
 103a0e8:	lea    rcx,[rbp-0x68]
 103a0ec:	call   QWORD PTR [rip+0xfffffffffffc79a6]        # 0x1001a98
 103a0f2:	xor    r15d,r15d
 103a0f5:	mov    r14d,r15d
 103a0f8:	test   rsi,rsi
 103a0fb:	je     0x103a52a
 103a101:	mov    DWORD PTR [rbp-0x80],r15d
 103a105:	mov    rax,QWORD PTR [rsi]
 103a108:	lea    rdx,[rbp-0x80]
 103a10c:	mov    rcx,rsi
 103a10f:	call   QWORD PTR [rax+0x40]
 103a112:	test   eax,eax
 103a114:	jns    0x103a127
 103a116:	lea    r8,[rip+0xfffffffffffcd8d3]        # 0x10079f0
 103a11d:	mov    rdx,rsi
 103a120:	mov    ecx,eax
 103a122:	call   0x1049230
 103a127:	cmp    r14d,DWORD PTR [rbp-0x80]
 103a12b:	jge    0x103a2e1
 103a131:	mov    r8d,r14d
 103a134:	lea    rdx,[rbp+0x1c0]
 103a13b:	mov    rcx,rsi
 103a13e:	call   0x1036870
 103a143:	nop
 103a144:	mov    rcx,QWORD PTR [rax]
 103a147:	cmp    rbx,rcx
 103a14a:	je     0x103a170
 103a14c:	mov    rdi,rbx
 103a14f:	mov    rbx,rcx
 103a152:	mov    QWORD PTR [rbp-0x40],rcx
 103a156:	test   rcx,rcx
 103a159:	je     0x103a161
 103a15b:	mov    rax,QWORD PTR [rcx]
 103a15e:	call   QWORD PTR [rax+0x8]
 103a161:	test   rdi,rdi
 103a164:	je     0x103a170
 103a166:	mov    rax,QWORD PTR [rdi]
 103a169:	mov    rcx,rdi
 103a16c:	call   QWORD PTR [rax+0x10]
 103a16f:	nop
 103a170:	mov    rcx,QWORD PTR [rbp+0x1c0]
 103a177:	test   rcx,rcx
 103a17a:	je     0x103a182
 103a17c:	mov    rax,QWORD PTR [rcx]
 103a17f:	call   QWORD PTR [rax+0x10]
 103a182:	lea    rax,[rbp+0x50]
 103a186:	mov    QWORD PTR [rbp-0x8],rax
 103a18a:	mov    ecx,0x18
 103a18f:	call   0x103f9d2
 103a194:	mov    rdi,rax
 103a197:	mov    QWORD PTR [rsp+0x50],rax
 103a19c:	test   rax,rax
 103a19f:	je     0x103a1be
 103a1a1:	mov    QWORD PTR [rax+0x8],r15
 103a1a5:	mov    eax,0x1
 103a1aa:	mov    DWORD PTR [rdi+0x10],eax
 103a1ad:	lea    rcx,[rip+0xfffffffffffcdc98]        # 0x1007e4c
 103a1b4:	call   0x10492d0
 103a1b9:	mov    QWORD PTR [rdi],rax
 103a1bc:	jmp    0x103a1c1
 103a1be:	mov    rdi,r15
 103a1c1:	mov    QWORD PTR [rbp+0x50],rdi
 103a1c5:	test   rdi,rdi
 103a1c8:	je     0x103a2d6
 103a1ce:	test   rbx,rbx
 103a1d1:	je     0x103a2cb
 103a1d7:	lea    rdx,[rbp+0x48]
 103a1db:	mov    rcx,rbx
 103a1de:	call   0x10365a0
 103a1e3:	nop
 103a1e4:	mov    rcx,QWORD PTR [rax]
 103a1e7:	test   rcx,rcx
 103a1ea:	je     0x103a2c0
 103a1f0:	lea    r8,[rbp+0x50]
 103a1f4:	lea    rdx,[rbp+0x1d0]
 103a1fb:	call   0x10368f0
 103a200:	nop
 103a201:	mov    rcx,QWORD PTR [rax]
 103a204:	test   rcx,rcx
 103a207:	je     0x103a2b5
 103a20d:	lea    rdx,[rbp+0x40]
 103a211:	call   0x1036620
 103a216:	nop
 103a217:	mov    rdx,QWORD PTR [rax]
 103a21a:	test   rdx,rdx
 103a21d:	je     0x103a224
 103a21f:	mov    rdx,QWORD PTR [rdx]
 103a222:	jmp    0x103a227
 103a224:	mov    rdx,r15
 103a227:	lea    rcx,[rbp-0x68]
 103a22b:	call   QWORD PTR [rip+0xfffffffffffc785f]        # 0x1001a90
 103a231:	nop
 103a232:	mov    rdi,QWORD PTR [rbp+0x40]
 103a236:	test   rdi,rdi
 103a239:	je     0x103a27c
 103a23b:	or     eax,0xffffffff
 103a23e:	lock xadd DWORD PTR [rdi+0x10],eax
 103a243:	dec    eax
 103a245:	jne    0x103a270
 103a247:	test   rdi,rdi
 103a24a:	je     0x103a270
 103a24c:	mov    rcx,QWORD PTR [rdi]
 103a24f:	test   rcx,rcx
 103a252:	je     0x103a25a
 103a254:	call   QWORD PTR [rip+0xfffffffffffc75de]        # 0x1001838
 103a25a:	mov    rcx,QWORD PTR [rdi+0x8]
 103a25e:	test   rcx,rcx
 103a261:	je     0x103a268
 103a263:	call   0x103f9c6
 103a268:	mov    rcx,rdi
 103a26b:	call   0x103f95a
 103a270:	mov    QWORD PTR [rbp+0x40],r15
 103a274:	mov    rbx,QWORD PTR [rbp-0x40]
 103a278:	mov    rsi,QWORD PTR [rbp-0x48]
 103a27c:	mov    rcx,QWORD PTR [rbp+0x1d0]
 103a283:	test   rcx,rcx
 103a286:	je     0x103a28f
 103a288:	mov    rax,QWORD PTR [rcx]
 103a28b:	call   QWORD PTR [rax+0x10]
 103a28e:	nop
 103a28f:	mov    rcx,QWORD PTR [rbp+0x48]
 103a293:	test   rcx,rcx
 103a296:	je     0x103a29e
 103a298:	mov    rax,QWORD PTR [rcx]
 103a29b:	call   QWORD PTR [rax+0x10]
 103a29e:	mov    edx,0x2c
 103a2a3:	lea    rcx,[rbp-0x68]
 103a2a7:	call   QWORD PTR [rip+0xfffffffffffc76a3]        # 0x1001950
 103a2ad:	inc    r14d
 103a2b0:	jmp    0x103a101
 103a2b5:	mov    ecx,0x80004003
 103a2ba:	call   0x1049210
 103a2bf:	nop
 103a2c0:	mov    ecx,0x80004003
 103a2c5:	call   0x1049210
 103a2ca:	nop
 103a2cb:	mov    ecx,0x80004003
 103a2d0:	call   0x1049210
 103a2d5:	nop
 103a2d6:	mov    ecx,0x8007000e
 103a2db:	call   0x1049210
 103a2e0:	int3   
 103a2e1:	test   r14d,r14d
 103a2e4:	jne    0x103a476
 103a2ea:	lea    rcx,[rsp+0x38]
 103a2ef:	call   QWORD PTR [rip+0xfffffffffffc77f3]        # 0x1001ae8
 103a2f5:	mov    QWORD PTR [rsp+0x20],rax
 103a2fa:	lea    r9,[rip+0xfffffffffffcf30f]        # 0x1009610
 103a301:	mov    edx,0x401
 103a306:	lea    r8d,[rdx-0x1]
 103a30a:	lea    rcx,[rbp+0x260]
 103a311:	call   QWORD PTR [rip+0xfffffffffffc7439]        # 0x1001750
 103a317:	lea    r11,[rbp+0x8]
 103a31b:	mov    QWORD PTR [rbp-0x8],r11
 103a31f:	lea    ecx,[r14+0x18]
 103a323:	call   0x103f9d2
 103a328:	mov    rdi,rax
 103a32b:	mov    QWORD PTR [rbp+0x48],rax
 103a32f:	test   rax,rax
 103a332:	je     0x103a360
 103a334:	mov    QWORD PTR [rax+0x8],r15
 103a338:	mov    eax,0x1
 103a33d:	mov    DWORD PTR [rdi+0x10],eax
 103a340:	lea    rcx,[rbp+0x260]
 103a347:	call   QWORD PTR [rip+0xfffffffffffc74f3]        # 0x1001840
 103a34d:	mov    QWORD PTR [rdi],rax
 103a350:	test   rax,rax
 103a353:	jne    0x103a363
 103a355:	mov    ecx,0x8007000e
 103a35a:	call   0x1049210
 103a35f:	int3   
 103a360:	mov    rdi,r15
 103a363:	mov    QWORD PTR [rbp+0x8],rdi
 103a367:	test   rdi,rdi
 103a36a:	jne    0x103a377
 103a36c:	mov    ecx,0x8007000e
 103a371:	call   0x1049210
 103a376:	nop
 103a377:	mov    rcx,QWORD PTR [r13+0x10]
 103a37b:	test   rcx,rcx
 103a37e:	jne    0x103a38b
 103a380:	mov    ecx,0x80004003
 103a385:	call   0x1049210
 103a38a:	nop
 103a38b:	lea    r8,[rbp+0x8]
 103a38f:	lea    rdx,[rbp+0x1f0]
 103a396:	call   0x10366d0
 103a39b:	nop
 103a39c:	mov    rcx,QWORD PTR [rax]
 103a39f:	cmp    rsi,rcx
 103a3a2:	je     0x103a3c8
 103a3a4:	mov    rdi,rsi
 103a3a7:	mov    rsi,rcx
 103a3aa:	mov    QWORD PTR [rbp-0x48],rcx
 103a3ae:	test   rcx,rcx
 103a3b1:	je     0x103a3b9
 103a3b3:	mov    rax,QWORD PTR [rcx]
 103a3b6:	call   QWORD PTR [rax+0x8]
 103a3b9:	test   rdi,rdi
 103a3bc:	je     0x103a3c8
 103a3be:	mov    rax,QWORD PTR [rdi]
 103a3c1:	mov    rcx,rdi
 103a3c4:	call   QWORD PTR [rax+0x10]
 103a3c7:	nop
 103a3c8:	mov    rcx,QWORD PTR [rbp+0x1f0]
 103a3cf:	test   rcx,rcx
 103a3d2:	je     0x103a3da
 103a3d4:	mov    rax,QWORD PTR [rcx]
 103a3d7:	call   QWORD PTR [rax+0x10]
 103a3da:	test   rsi,rsi
 103a3dd:	sete   r14b
 103a3e1:	test   r14b,r14b
 103a3e4:	je     0x103a427
 103a3e6:	mov    rax,QWORD PTR [r12+0x8]
 103a3eb:	movsxd rcx,DWORD PTR [rax+0x4]
 103a3ef:	add    rcx,0x8
 103a3f3:	add    rcx,r12
 103a3f6:	mov    rax,QWORD PTR [rcx]
 103a3f9:	mov    BYTE PTR [rsp+0x28],0x1
 103a3fe:	mov    BYTE PTR [rsp+0x20],0x1
 103a403:	xor    r9d,r9d
 103a406:	xor    r8d,r8d
 103a409:	mov    edx,0xc000c3e5
 103a40e:	call   QWORD PTR [rax]
 103a410:	mov    rdi,QWORD PTR [rbp-0x20]
 103a414:	mov    r14,QWORD PTR [rbp-0x50]
 103a418:	mov    r15,QWORD PTR [rbp-0x58]
 103a41c:	movzx  r12d,BYTE PTR [rsp+0x30]
 103a422:	jmp    0x103a699
 103a427:	test   rsi,rsi
 103a42a:	jne    0x103a437
 103a42c:	mov    ecx,0x80004003
 103a431:	call   0x1049210
 103a436:	int3   
 103a437:	mov    DWORD PTR [rbp-0x14],r15d
 103a43b:	mov    rax,QWORD PTR [rsi]
 103a43e:	lea    rdx,[rbp-0x14]
 103a442:	mov    rcx,rsi
 103a445:	call   QWORD PTR [rax+0x40]
 103a448:	test   eax,eax
 103a44a:	jns    0x103a45d
 103a44c:	lea    r8,[rip+0xfffffffffffcd59d]        # 0x10079f0
 103a453:	mov    rdx,rsi
 103a456:	mov    ecx,eax
 103a458:	call   0x1049230
 103a45d:	cmp    DWORD PTR [rbp-0x14],0x0
 103a461:	jne    0x103a47c
 103a463:	lea    rdx,[rip+0xfffffffffffcf286]        # 0x10096f0
 103a46a:	lea    rcx,[rbp-0x68]
 103a46e:	call   QWORD PTR [rip+0xfffffffffffc7624]        # 0x1001a98
 103a474:	jmp    0x103a47c
 103a476:	movzx  r14d,BYTE PTR [rsp+0x5f]
 103a47c:	lea    rdx,[rip+0xfffffffffffc798d]        # 0x1001e10
 103a483:	lea    rcx,[rbp-0x68]
 103a487:	call   QWORD PTR [rip+0xfffffffffffc7573]        # 0x1001a00
 103a48d:	test   eax,eax
 103a48f:	je     0x103a4d3
 103a491:	cmp    BYTE PTR [rsp+0x48],0x0
 103a496:	je     0x103a4b1
 103a498:	mov    rdi,QWORD PTR [r12]
 103a49c:	lea    rcx,[rbp-0x68]
 103a4a0:	call   QWORD PTR [rip+0xfffffffffffc7642]        # 0x1001ae8
 103a4a6:	mov    r8,rax
 103a4a9:	xor    edx,edx
 103a4ab:	mov    rcx,r12
 103a4ae:	call   QWORD PTR [rdi+0x38]
 103a4b1:	cmp    BYTE PTR [rbp-0x28],0x0
 103a4b5:	je     0x103a4d3
 103a4b7:	mov    rdi,QWORD PTR [r12]
 103a4bb:	lea    rcx,[rbp-0x68]
 103a4bf:	call   QWORD PTR [rip+0xfffffffffffc7623]        # 0x1001ae8
 103a4c5:	mov    r8,rax
 103a4c8:	mov    edx,0x2
 103a4cd:	mov    rcx,r12
 103a4d0:	call   QWORD PTR [rdi+0x38]
 103a4d3:	test   r14b,r14b
 103a4d6:	sete   al
 103a4d9:	test   al,al
 103a4db:	je     0x103a4ed
 103a4dd:	mov    rax,QWORD PTR [rsi]
 103a4e0:	mov    rcx,rsi
 103a4e3:	call   QWORD PTR [rax+0x10]
 103a4e6:	mov    rsi,r15
 103a4e9:	mov    QWORD PTR [rbp-0x48],r15
 103a4ed:	test   rbx,rbx
 103a4f0:	sete   al
 103a4f3:	test   al,al
 103a4f5:	sete   al
 103a4f8:	test   al,al
 103a4fa:	je     0x103a51c
 103a4fc:	test   rbx,rbx
 103a4ff:	jne    0x103a50c
 103a501:	mov    ecx,0x80004003
 103a506:	call   0x1049210
 103a50b:	int3   
 103a50c:	mov    rax,QWORD PTR [rbx]
 103a50f:	mov    rcx,rbx
 103a512:	call   QWORD PTR [rax+0x10]
 103a515:	mov    rbx,r15
 103a518:	mov    QWORD PTR [rbp-0x40],rbx
 103a51c:	mov    rdi,QWORD PTR [rbp-0x20]
 103a520:	mov    r14,QWORD PTR [rbp-0x50]
 103a524:	mov    r15,QWORD PTR [rbp-0x58]
 103a528:	jmp    0x103a535
 103a52a:	mov    ecx,0x80004003
 103a52f:	call   0x1049210
 103a534:	int3   
 103a535:	mov    BYTE PTR [rsp+0x61],0x1
 103a53a:	lea    rcx,[rsp+0x38]
 103a53f:	call   QWORD PTR [rip+0xfffffffffffc75a3]        # 0x1001ae8
 103a545:	mov    r9,rax
 103a548:	lea    rax,[rsp+0x61]
 103a54d:	mov    QWORD PTR [rsp+0x28],rax
 103a552:	lea    rax,[rip+0xfffffffffffc78b7]        # 0x1001e10
 103a559:	mov    QWORD PTR [rsp+0x20],rax
 103a55e:	lea    r8,[rip+0xfffffffffffcf1cb]        # 0x1009730
 103a565:	lea    rdx,[rbp+0x200]
 103a56c:	mov    rcx,r13
 103a56f:	call   0x103b1e0
 103a574:	nop
 103a575:	mov    rdx,rax
 103a578:	lea    rcx,[rsp+0x40]
 103a57d:	call   QWORD PTR [rip+0xfffffffffffc751d]        # 0x1001aa0
 103a583:	nop
 103a584:	lea    rcx,[rbp+0x200]
 103a58b:	call   QWORD PTR [rip+0xfffffffffffc7517]        # 0x1001aa8
 103a591:	lea    rcx,[rsp+0x40]
 103a596:	call   QWORD PTR [rip+0xfffffffffffc754c]        # 0x1001ae8
 103a59c:	mov    rcx,rax
 103a59f:	lea    rdx,[rip+0xfffffffffffcdafa]        # 0x10080a0
 103a5a6:	call   QWORD PTR [rip+0xfffffffffffc7124]        # 0x10016d0
 103a5ac:	test   eax,eax
 103a5ae:	jne    0x103a696
 103a5b4:	mov    BYTE PTR [rsp+0x63],0x1
 103a5b9:	lea    rcx,[rsp+0x38]
 103a5be:	call   QWORD PTR [rip+0xfffffffffffc7524]        # 0x1001ae8
 103a5c4:	mov    r9,rax
 103a5c7:	lea    rax,[rsp+0x63]
 103a5cc:	mov    QWORD PTR [rsp+0x28],rax
 103a5d1:	lea    rax,[rip+0xfffffffffffc7838]        # 0x1001e10
 103a5d8:	mov    QWORD PTR [rsp+0x20],rax
 103a5dd:	lea    r8,[rip+0xfffffffffffcf1ec]        # 0x10097d0
 103a5e4:	lea    rdx,[rbp+0x58]
 103a5e8:	mov    rcx,r13
 103a5eb:	call   0x103b1e0
 103a5f0:	nop
 103a5f1:	mov    rcx,rax
 103a5f4:	call   QWORD PTR [rip+0xfffffffffffc74ee]        # 0x1001ae8
 103a5fa:	mov    rcx,rax
 103a5fd:	call   QWORD PTR [rip+0xfffffffffffc713d]        # 0x1001740
 103a603:	mov    DWORD PTR [rbp-0x28],eax
 103a606:	lea    rcx,[rbp+0x58]
 103a60a:	call   QWORD PTR [rip+0xfffffffffffc7498]        # 0x1001aa8
 103a610:	mov    BYTE PTR [rsp+0x65],0x1
 103a615:	lea    rcx,[rsp+0x38]
 103a61a:	call   QWORD PTR [rip+0xfffffffffffc74c8]        # 0x1001ae8
 103a620:	mov    r9,rax
 103a623:	lea    rax,[rsp+0x65]
 103a628:	mov    QWORD PTR [rsp+0x28],rax
 103a62d:	lea    rax,[rip+0xfffffffffffc77dc]        # 0x1001e10
 103a634:	mov    QWORD PTR [rsp+0x20],rax
 103a639:	lea    r8,[rip+0xfffffffffffcf240]        # 0x1009880
 103a640:	lea    rdx,[rbp+0x68]
 103a644:	mov    rcx,r13
 103a647:	call   0x103b1e0
 103a64c:	nop
 103a64d:	mov    rcx,rax
 103a650:	call   QWORD PTR [rip+0xfffffffffffc7492]        # 0x1001ae8
 103a656:	mov    rcx,rax
 103a659:	call   QWORD PTR [rip+0xfffffffffffc70e1]        # 0x1001740
 103a65f:	mov    r13d,eax
 103a662:	lea    rcx,[rbp+0x68]
 103a666:	call   QWORD PTR [rip+0xfffffffffffc743c]        # 0x1001aa8
 103a66c:	mov    eax,0x100
 103a671:	test   r13d,r13d
 103a674:	cmove  r13d,eax
 103a678:	mov    rax,QWORD PTR [r12]
 103a67c:	mov    edx,DWORD PTR [rbp-0x28]
 103a67f:	mov    rcx,r12
 103a682:	call   QWORD PTR [rax+0x20]
 103a685:	mov    r11,QWORD PTR [r12]
 103a689:	mov    edx,r13d
 103a68c:	mov    rcx,r12
 103a68f:	call   QWORD PTR [r11+0xe8]
 103a696:	mov    r12b,0x1
 103a699:	test   rsi,rsi
 103a69c:	je     0x103a6a8
 103a69e:	mov    rax,QWORD PTR [rsi]
 103a6a1:	mov    rcx,rsi
 103a6a4:	call   QWORD PTR [rax+0x10]
 103a6a7:	nop
 103a6a8:	test   r15,r15
 103a6ab:	je     0x103a6b7
 103a6ad:	mov    rax,QWORD PTR [r15]
 103a6b0:	mov    rcx,r15
 103a6b3:	call   QWORD PTR [rax+0x10]
 103a6b6:	nop
 103a6b7:	test   rbx,rbx
 103a6ba:	je     0x103a6c6
 103a6bc:	mov    rax,QWORD PTR [rbx]
 103a6bf:	mov    rcx,rbx
 103a6c2:	call   QWORD PTR [rax+0x10]
 103a6c5:	nop
 103a6c6:	test   r14,r14
 103a6c9:	je     0x103a6d5
 103a6cb:	mov    rax,QWORD PTR [r14]
 103a6ce:	mov    rcx,r14
 103a6d1:	call   QWORD PTR [rax+0x10]
 103a6d4:	nop
 103a6d5:	test   rdi,rdi
 103a6d8:	je     0x103a6e4
 103a6da:	mov    rax,QWORD PTR [rdi]
 103a6dd:	mov    rcx,rdi
 103a6e0:	call   QWORD PTR [rax+0x10]
 103a6e3:	nop
 103a6e4:	lea    rcx,[rbp-0x68]
 103a6e8:	call   QWORD PTR [rip+0xfffffffffffc73ba]        # 0x1001aa8
 103a6ee:	nop
 103a6ef:	lea    rcx,[rsp+0x78]
 103a6f4:	call   QWORD PTR [rip+0xfffffffffffc73ae]        # 0x1001aa8
 103a6fa:	nop
 103a6fb:	lea    rcx,[rbp-0x70]
 103a6ff:	call   QWORD PTR [rip+0xfffffffffffc73a3]        # 0x1001aa8
 103a705:	nop
 103a706:	lea    rcx,[rbp-0x78]
 103a70a:	call   QWORD PTR [rip+0xfffffffffffc7398]        # 0x1001aa8
 103a710:	nop
 103a711:	lea    rcx,[rsp+0x40]
 103a716:	call   QWORD PTR [rip+0xfffffffffffc738c]        # 0x1001aa8
 103a71c:	nop
 103a71d:	lea    rcx,[rsp+0x38]
 103a722:	call   QWORD PTR [rip+0xfffffffffffc7380]        # 0x1001aa8
 103a728:	nop
 103a729:	lea    rcx,[rbp+0x28]
 103a72d:	call   QWORD PTR [rip+0xfffffffffffc7375]        # 0x1001aa8
 103a733:	movzx  eax,r12b
 103a737:	mov    rcx,QWORD PTR [rbp+0x1280]
 103a73e:	xor    rcx,rsp
 103a741:	call   0x103ff40
 103a746:	mov    rbx,QWORD PTR [rsp+0x13e8]
 103a74e:	add    rsp,0x1390
 103a755:	pop    r15
 103a757:	pop    r14
 103a759:	pop    r13
 103a75b:	pop    r12
 103a75d:	pop    rdi
 103a75e:	pop    rsi
 103a75f:	pop    rbp
 103a760:	ret    
 103a761:	int3   
 103a762:	int3   
 103a763:	int3   
 103a764:	int3   
 103a765:	int3   
 103a766:	int3   
 103a767:	int3   
 103a768:	int3   
 103a769:	int3   
 103a76a:	int3   
 103a76b:	int3   
 103a76c:	int3   
 103a76d:	int3   
 103a76e:	int3   
 103a76f:	int3   
 103a770:	rex push rbp
 103a772:	push   rsi
 103a773:	push   rdi
 103a774:	push   r12
 103a776:	push   r13
 103a778:	push   r14
 103a77a:	push   r15
 103a77c:	lea    rbp,[rsp-0x860]
 103a784:	sub    rsp,0x960
 103a78b:	mov    QWORD PTR [rbp+0x30],0xfffffffffffffffe
 103a793:	mov    QWORD PTR [rsp+0x9b0],rbx
 103a79b:	mov    rax,QWORD PTR [rip+0x290ce]        # 0x1063870
 103a7a2:	xor    rax,rsp
 103a7a5:	mov    QWORD PTR [rbp+0x850],rax
 103a7ac:	mov    r14,rdx
 103a7af:	mov    r13,rcx
 103a7b2:	xor    r15d,r15d
 103a7b5:	mov    DWORD PTR [rsp+0x48],r15d
 103a7ba:	xor    sil,sil
 103a7bd:	lea    rcx,[rbp+0x8]
 103a7c1:	call   QWORD PTR [rip+0xfffffffffffc72f9]        # 0x1001ac0
 103a7c7:	nop
 103a7c8:	mov    QWORD PTR [rsp+0x50],r15
 103a7cd:	mov    QWORD PTR [rsp+0x58],r15
 103a7d2:	mov    rax,QWORD PTR [r14]
 103a7d5:	mov    rcx,r14
 103a7d8:	call   QWORD PTR [rax+0x110]
 103a7de:	mov    ecx,0x1
 103a7e3:	lock xadd DWORD PTR [rax],ecx
 103a7e7:	inc    ecx
 103a7e9:	cmp    ecx,0x1
 103a7ec:	jne    0x103a838
 103a7ee:	mov    rax,QWORD PTR [r14+0x8]
 103a7f2:	movsxd rcx,DWORD PTR [rax+0x4]
 103a7f6:	mov    rbx,QWORD PTR [rcx+r14*1+0x8]
 103a7fb:	add    rbx,0x20
 103a7ff:	mov    rax,QWORD PTR [r14]
 103a802:	mov    rcx,r14
 103a805:	call   QWORD PTR [rax+0xe0]
 103a80b:	mov    r8,rax
 103a80e:	xor    edx,edx
 103a810:	xor    ecx,ecx
 103a812:	call   0x104076e
 103a817:	mov    edx,eax
 103a819:	mov    rax,QWORD PTR [r14+0x8]
 103a81d:	movsxd rcx,DWORD PTR [rax+0x4]
 103a821:	add    rcx,0x8
 103a825:	add    rcx,r14
 103a828:	mov    r9b,0x1
 103a82b:	xor    r8d,r8d
 103a82e:	call   QWORD PTR [rbx]
 103a830:	test   al,al
 103a832:	je     0x103b089
 103a838:	mov    rax,QWORD PTR [r14]
 103a83b:	lea    rdx,[rbp+0x0]
 103a83f:	mov    rcx,r14
 103a842:	call   QWORD PTR [rax+0x70]
 103a845:	nop
 103a846:	mov    edi,0x1
 103a84b:	mov    DWORD PTR [rsp+0x48],edi
 103a84f:	mov    rcx,rax
 103a852:	call   QWORD PTR [rip+0xfffffffffffc7298]        # 0x1001af0
 103a858:	test   eax,eax
 103a85a:	je     0x103a8b8
 103a85c:	mov    rax,QWORD PTR [r14]
 103a85f:	lea    rdx,[rbp-0x48]
 103a863:	mov    rcx,r14
 103a866:	call   QWORD PTR [rax+0x70]
 103a869:	mov    r11,rax
 103a86c:	mov    edi,0x3
 103a871:	mov    DWORD PTR [rsp+0x48],edi
 103a875:	mov    rax,QWORD PTR [r14+0x8]
 103a879:	movsxd rcx,DWORD PTR [rax+0x4]
 103a87d:	mov    rbx,QWORD PTR [rcx+r14*1+0x8]
 103a882:	add    rbx,0x20
 103a886:	mov    rcx,r11
 103a889:	call   QWORD PTR [rip+0xfffffffffffc7259]        # 0x1001ae8
 103a88f:	mov    rcx,rax
 103a892:	call   0x104077a
 103a897:	mov    edx,eax
 103a899:	mov    rax,QWORD PTR [r14+0x8]
 103a89d:	movsxd rcx,DWORD PTR [rax+0x4]
 103a8a1:	add    rcx,0x8
 103a8a5:	add    rcx,r14
 103a8a8:	mov    r9b,0x1
 103a8ab:	xor    r8d,r8d
 103a8ae:	call   QWORD PTR [rbx]
 103a8b0:	test   al,al
 103a8b2:	je     0x103a8b8
 103a8b4:	mov    bl,0x1
 103a8b6:	jmp    0x103a8ba
 103a8b8:	xor    bl,bl
 103a8ba:	test   dil,0x2
 103a8be:	je     0x103a8d2
 103a8c0:	and    edi,0xfffffffd
 103a8c3:	mov    DWORD PTR [rsp+0x48],edi
 103a8c7:	lea    rcx,[rbp-0x48]
 103a8cb:	call   QWORD PTR [rip+0xfffffffffffc71d7]        # 0x1001aa8
 103a8d1:	nop
 103a8d2:	test   dil,0x1
 103a8d6:	je     0x103a8e9
 103a8d8:	and    edi,0xfffffffe
 103a8db:	mov    DWORD PTR [rsp+0x48],edi
 103a8df:	lea    rcx,[rbp+0x0]
 103a8e3:	call   QWORD PTR [rip+0xfffffffffffc71bf]        # 0x1001aa8
 103a8e9:	test   bl,bl
 103a8eb:	je     0x103b089
 103a8f1:	mov    WORD PTR [rbp+0x840],r15w
 103a8f9:	mov    rax,QWORD PTR [r14]
 103a8fc:	lea    rdx,[rbp-0x30]
 103a900:	mov    rcx,r14
 103a903:	call   QWORD PTR [rax+0x108]
 103a909:	nop
 103a90a:	mov    rcx,rax
 103a90d:	call   QWORD PTR [rip+0xfffffffffffc71d5]        # 0x1001ae8
 103a913:	mov    QWORD PTR [rsp+0x20],rax
 103a918:	lea    r9,[rip+0xfffffffffffcd3e1]        # 0x1007d00
 103a91f:	mov    edx,0x401
 103a924:	lea    r8d,[rdx-0x1]
 103a928:	lea    rcx,[rbp+0x40]
 103a92c:	call   QWORD PTR [rip+0xfffffffffffc6e1e]        # 0x1001750
 103a932:	nop
 103a933:	lea    rcx,[rbp-0x30]
 103a937:	call   QWORD PTR [rip+0xfffffffffffc716b]        # 0x1001aa8
 103a93d:	lea    r11,[rbp-0x68]
 103a941:	mov    QWORD PTR [rbp-0x78],r11
 103a945:	mov    ecx,0x18
 103a94a:	call   0x103f9d2
 103a94f:	mov    rbx,rax
 103a952:	mov    QWORD PTR [rbp-0x80],rax
 103a956:	test   rax,rax
 103a959:	je     0x103a983
 103a95b:	mov    QWORD PTR [rax+0x8],r15
 103a95f:	mov    DWORD PTR [rax+0x10],0x1
 103a966:	lea    rcx,[rbp+0x40]
 103a96a:	call   QWORD PTR [rip+0xfffffffffffc6ed0]        # 0x1001840
 103a970:	mov    QWORD PTR [rbx],rax
 103a973:	test   rax,rax
 103a976:	jne    0x103a986
 103a978:	mov    ecx,0x8007000e
 103a97d:	call   0x1049210
 103a982:	int3   
 103a983:	mov    rbx,r15
 103a986:	mov    QWORD PTR [rbp-0x68],rbx
 103a98a:	test   rbx,rbx
 103a98d:	jne    0x103a99a
 103a98f:	mov    ecx,0x8007000e
 103a994:	call   0x1049210
 103a999:	nop
 103a99a:	mov    rcx,QWORD PTR [r13+0x10]
 103a99e:	test   rcx,rcx
 103a9a1:	jne    0x103a9ae
 103a9a3:	mov    ecx,0x80004003
 103a9a8:	call   0x1049210
 103a9ad:	nop
 103a9ae:	lea    r8,[rbp-0x68]
 103a9b2:	lea    rdx,[rsp+0x40]
 103a9b7:	call   0x10366d0
 103a9bc:	nop
 103a9bd:	mov    rbx,QWORD PTR [rsp+0x40]
 103a9c2:	test   rbx,rbx
 103a9c5:	sete   al
 103a9c8:	test   al,al
 103a9ca:	je     0x103aa0f
 103a9cc:	mov    rax,QWORD PTR [r14+0x8]
 103a9d0:	movsxd rcx,DWORD PTR [rax+0x4]
 103a9d4:	add    rcx,0x8
 103a9d8:	add    rcx,r14
 103a9db:	mov    rax,QWORD PTR [rcx]
 103a9de:	mov    BYTE PTR [rsp+0x28],0x1
 103a9e3:	mov    BYTE PTR [rsp+0x20],0x1
 103a9e8:	xor    r9d,r9d
 103a9eb:	xor    r8d,r8d
 103a9ee:	mov    edx,0xc000c3e2
 103a9f3:	call   QWORD PTR [rax]
 103a9f5:	nop
 103a9f6:	mov    rcx,QWORD PTR [rsp+0x40]
 103a9fb:	test   rcx,rcx
 103a9fe:	je     0x103b089
 103aa04:	mov    rax,QWORD PTR [rcx]
 103aa07:	call   QWORD PTR [rax+0x10]
 103aa0a:	jmp    0x103b089
 103aa0f:	test   rbx,rbx
 103aa12:	jne    0x103aa1f
 103aa14:	mov    ecx,0x80004003
 103aa19:	call   0x1049210
 103aa1e:	int3   
 103aa1f:	mov    DWORD PTR [rsp+0x68],r15d
 103aa24:	mov    rax,QWORD PTR [rbx]
 103aa27:	lea    rdx,[rsp+0x68]
 103aa2c:	mov    rcx,rbx
 103aa2f:	call   QWORD PTR [rax+0x40]
 103aa32:	test   eax,eax
 103aa34:	jns    0x103aa47
 103aa36:	lea    r8,[rip+0xfffffffffffccfb3]        # 0x10079f0
 103aa3d:	mov    rdx,rbx
 103aa40:	mov    ecx,eax
 103aa42:	call   0x1049230
 103aa47:	cmp    DWORD PTR [rsp+0x68],0x0
 103aa4c:	jne    0x103aaac
 103aa4e:	mov    rcx,QWORD PTR [rsp+0x40]
 103aa53:	test   rcx,rcx
 103aa56:	sete   al
 103aa59:	test   al,al
 103aa5b:	sete   al
 103aa5e:	test   al,al
 103aa60:	je     0x103aa7d
 103aa62:	test   rcx,rcx
 103aa65:	jne    0x103aa72
 103aa67:	mov    ecx,0x80004003
 103aa6c:	call   0x1049210
 103aa71:	int3   
 103aa72:	mov    rax,QWORD PTR [rcx]
 103aa75:	call   QWORD PTR [rax+0x10]
 103aa78:	mov    QWORD PTR [rsp+0x40],r15
 103aa7d:	mov    rax,QWORD PTR [r14+0x8]
 103aa81:	movsxd rcx,DWORD PTR [rax+0x4]
 103aa85:	add    rcx,0x8
 103aa89:	add    rcx,r14
 103aa8c:	mov    rax,QWORD PTR [rcx]
 103aa8f:	mov    BYTE PTR [rsp+0x28],0x1
 103aa94:	mov    BYTE PTR [rsp+0x20],0x1
 103aa99:	xor    r9d,r9d
 103aa9c:	xor    r8d,r8d
 103aa9f:	mov    edx,0xc000c3e2
 103aaa4:	call   QWORD PTR [rax]
 103aaa6:	nop
 103aaa7:	jmp    0x103a9f6
 103aaac:	lea    rcx,[rbp-0x8]
 103aab0:	call   QWORD PTR [rip+0xfffffffffffc700a]        # 0x1001ac0
 103aab6:	nop
 103aab7:	lea    rcx,[rsp+0x60]
 103aabc:	call   QWORD PTR [rip+0xfffffffffffc6ffe]        # 0x1001ac0
 103aac2:	nop
 103aac3:	lea    rcx,[rsp+0x70]
 103aac8:	call   QWORD PTR [rip+0xfffffffffffc6ff2]        # 0x1001ac0
 103aace:	nop
 103aacf:	lea    rdx,[rip+0xfffffffffffc733a]        # 0x1001e10
 103aad6:	lea    rcx,[rbp-0x70]
 103aada:	call   QWORD PTR [rip+0xfffffffffffc6fd0]        # 0x1001ab0
 103aae0:	nop
 103aae1:	mov    r12d,r15d
 103aae4:	mov    rsi,QWORD PTR [rsp+0x40]
 103aae9:	test   rsi,rsi
 103aaec:	je     0x103b07e
 103aaf2:	mov    rbx,QWORD PTR [rsp+0x50]
 103aaf7:	mov    rdi,QWORD PTR [rsp+0x58]
 103aafc:	nop    DWORD PTR [rax+0x0]
 103ab00:	mov    DWORD PTR [rbp-0x80],0x0
 103ab07:	mov    rax,QWORD PTR [rsi]
 103ab0a:	lea    rdx,[rbp-0x80]
 103ab0e:	mov    rcx,rsi
 103ab11:	call   QWORD PTR [rax+0x40]
 103ab14:	test   eax,eax
 103ab16:	jns    0x103ab29
 103ab18:	lea    r8,[rip+0xfffffffffffcced1]        # 0x10079f0
 103ab1f:	mov    rdx,rsi
 103ab22:	mov    ecx,eax
 103ab24:	call   0x1049230
 103ab29:	cmp    r15d,DWORD PTR [rbp-0x80]
 103ab2d:	jge    0x103af27
 103ab33:	mov    rcx,QWORD PTR [rsp+0x40]
 103ab38:	test   rcx,rcx
 103ab3b:	je     0x103af1c
 103ab41:	mov    r8d,r15d
 103ab44:	lea    rdx,[rbp+0x28]
 103ab48:	call   0x1036870
 103ab4d:	nop
 103ab4e:	mov    rcx,QWORD PTR [rax]
 103ab51:	cmp    rbx,rcx
 103ab54:	je     0x103ab7b
 103ab56:	mov    rsi,rbx
 103ab59:	mov    rbx,rcx
 103ab5c:	mov    QWORD PTR [rsp+0x50],rcx
 103ab61:	test   rcx,rcx
 103ab64:	je     0x103ab6c
 103ab66:	mov    rax,QWORD PTR [rcx]
 103ab69:	call   QWORD PTR [rax+0x8]
 103ab6c:	test   rsi,rsi
 103ab6f:	je     0x103ab7b
 103ab71:	mov    rax,QWORD PTR [rsi]
 103ab74:	mov    rcx,rsi
 103ab77:	call   QWORD PTR [rax+0x10]
 103ab7a:	nop
 103ab7b:	mov    rcx,QWORD PTR [rbp+0x28]
 103ab7f:	test   rcx,rcx
 103ab82:	je     0x103ab8a
 103ab84:	mov    rax,QWORD PTR [rcx]
 103ab87:	call   QWORD PTR [rax+0x10]
 103ab8a:	test   rbx,rbx
 103ab8d:	je     0x103af11
 103ab93:	lea    rdx,[rbp-0x20]
 103ab97:	mov    rcx,rbx
 103ab9a:	call   0x1036530
 103ab9f:	nop
 103aba0:	mov    rcx,QWORD PTR [rax]
 103aba3:	cmp    rdi,rcx
 103aba6:	je     0x103abcd
 103aba8:	mov    rsi,rdi
 103abab:	mov    rdi,rcx
 103abae:	mov    QWORD PTR [rsp+0x58],rcx
 103abb3:	test   rcx,rcx
 103abb6:	je     0x103abbe
 103abb8:	mov    rax,QWORD PTR [rcx]
 103abbb:	call   QWORD PTR [rax+0x8]
 103abbe:	test   rsi,rsi
 103abc1:	je     0x103abcd
 103abc3:	mov    rax,QWORD PTR [rsi]
 103abc6:	mov    rcx,rsi
 103abc9:	call   QWORD PTR [rax+0x10]
 103abcc:	nop
 103abcd:	mov    rcx,QWORD PTR [rbp-0x20]
 103abd1:	test   rcx,rcx
 103abd4:	je     0x103abdc
 103abd6:	mov    rax,QWORD PTR [rcx]
 103abd9:	call   QWORD PTR [rax+0x10]
 103abdc:	lea    rax,[rbp-0x58]
 103abe0:	mov    QWORD PTR [rbp-0x78],rax
 103abe4:	mov    ecx,0x18
 103abe9:	call   0x103f9d2
 103abee:	mov    rsi,rax
 103abf1:	mov    QWORD PTR [rbp+0x20],rax
 103abf5:	test   rax,rax
 103abf8:	je     0x103ac1a
 103abfa:	mov    QWORD PTR [rax+0x8],0x0
 103ac02:	mov    DWORD PTR [rax+0x10],0x1
 103ac09:	lea    rcx,[rip+0xfffffffffffcd23c]        # 0x1007e4c
 103ac10:	call   0x10492d0
 103ac15:	mov    QWORD PTR [rsi],rax
 103ac18:	jmp    0x103ac1c
 103ac1a:	xor    esi,esi
 103ac1c:	mov    QWORD PTR [rbp-0x58],rsi
 103ac20:	test   rsi,rsi
 103ac23:	je     0x103af06
 103ac29:	test   rdi,rdi
 103ac2c:	je     0x103aefb
 103ac32:	lea    rdx,[rbp-0x10]
 103ac36:	mov    rcx,rdi
 103ac39:	call   0x10365a0
 103ac3e:	nop
 103ac3f:	mov    rcx,QWORD PTR [rax]
 103ac42:	test   rcx,rcx
 103ac45:	je     0x103aef0
 103ac4b:	lea    r8,[rbp-0x58]
 103ac4f:	lea    rdx,[rbp+0x10]
 103ac53:	call   0x10368f0
 103ac58:	nop
 103ac59:	mov    rcx,QWORD PTR [rax]
 103ac5c:	test   rcx,rcx
 103ac5f:	je     0x103aee5
 103ac65:	lea    rdx,[rbp-0x60]
 103ac69:	call   0x1036620
 103ac6e:	nop
 103ac6f:	mov    rsi,QWORD PTR [rax]
 103ac72:	test   rsi,rsi
 103ac75:	je     0x103ac90
 103ac77:	cmp    QWORD PTR [rsi+0x8],0x0
 103ac7c:	jne    0x103ac8a
 103ac7e:	mov    rcx,QWORD PTR [rsi]
 103ac81:	call   0x1049470
 103ac86:	mov    QWORD PTR [rsi+0x8],rax
 103ac8a:	mov    rdx,QWORD PTR [rsi+0x8]
 103ac8e:	jmp    0x103ac92
 103ac90:	xor    edx,edx
 103ac92:	lea    rcx,[rsp+0x60]
 103ac97:	call   QWORD PTR [rip+0xfffffffffffc6ccb]        # 0x1001968
 103ac9d:	nop
 103ac9e:	mov    rsi,QWORD PTR [rbp-0x60]
 103aca2:	test   rsi,rsi
 103aca5:	je     0x103acee
 103aca7:	or     eax,0xffffffff
 103acaa:	lock xadd DWORD PTR [rsi+0x10],eax
 103acaf:	dec    eax
 103acb1:	jne    0x103acdc
 103acb3:	test   rsi,rsi
 103acb6:	je     0x103acdc
 103acb8:	mov    rcx,QWORD PTR [rsi]
 103acbb:	test   rcx,rcx
 103acbe:	je     0x103acc6
 103acc0:	call   QWORD PTR [rip+0xfffffffffffc6b72]        # 0x1001838
 103acc6:	mov    rcx,QWORD PTR [rsi+0x8]
 103acca:	test   rcx,rcx
 103accd:	je     0x103acd4
 103accf:	call   0x103f9c6
 103acd4:	mov    rcx,rsi
 103acd7:	call   0x103f95a
 103acdc:	mov    QWORD PTR [rbp-0x60],0x0
 103ace4:	mov    rbx,QWORD PTR [rsp+0x50]
 103ace9:	mov    rdi,QWORD PTR [rsp+0x58]
 103acee:	mov    rcx,QWORD PTR [rbp+0x10]
 103acf2:	test   rcx,rcx
 103acf5:	je     0x103acfe
 103acf7:	mov    rax,QWORD PTR [rcx]
 103acfa:	call   QWORD PTR [rax+0x10]
 103acfd:	nop
 103acfe:	mov    rcx,QWORD PTR [rbp-0x10]
 103ad02:	test   rcx,rcx
 103ad05:	je     0x103ad0d
 103ad07:	mov    rax,QWORD PTR [rcx]
 103ad0a:	call   QWORD PTR [rax+0x10]
 103ad0d:	lea    rcx,[rbp-0x70]
 103ad11:	call   QWORD PTR [rip+0xfffffffffffc6dd1]        # 0x1001ae8
 103ad17:	mov    rdx,rax
 103ad1a:	lea    rcx,[rsp+0x60]
 103ad1f:	call   QWORD PTR [rip+0xfffffffffffc6d3b]        # 0x1001a60
 103ad25:	test   eax,eax
 103ad27:	je     0x103aeb9
 103ad2d:	lea    rax,[rbp+0x18]
 103ad31:	mov    QWORD PTR [rbp+0x20],rax
 103ad35:	lea    rdx,[rip+0xfffffffffffcd110]        # 0x1007e4c
 103ad3c:	lea    rcx,[rbp+0x18]
 103ad40:	call   0x1036230
 103ad45:	mov    rsi,rax
 103ad48:	lea    rdx,[rbp-0x38]
 103ad4c:	mov    rcx,rbx
 103ad4f:	call   0x10365a0
 103ad54:	nop
 103ad55:	mov    rcx,QWORD PTR [rax]
 103ad58:	test   rcx,rcx
 103ad5b:	je     0x103aeda
 103ad61:	mov    r8,rsi
 103ad64:	lea    rdx,[rbp-0x40]
 103ad68:	call   0x10368f0
 103ad6d:	nop
 103ad6e:	mov    rcx,QWORD PTR [rax]
 103ad71:	test   rcx,rcx
 103ad74:	je     0x103aecf
 103ad7a:	lea    rdx,[rbp-0x50]
 103ad7e:	call   0x1036620
 103ad83:	nop
 103ad84:	mov    rsi,QWORD PTR [rax]
 103ad87:	test   rsi,rsi
 103ad8a:	je     0x103ada5
 103ad8c:	cmp    QWORD PTR [rsi+0x8],0x0
 103ad91:	jne    0x103ad9f
 103ad93:	mov    rcx,QWORD PTR [rsi]
 103ad96:	call   0x1049470
 103ad9b:	mov    QWORD PTR [rsi+0x8],rax
 103ad9f:	mov    rdx,QWORD PTR [rsi+0x8]
 103ada3:	jmp    0x103ada7
 103ada5:	xor    edx,edx
 103ada7:	lea    rcx,[rsp+0x70]
 103adac:	call   QWORD PTR [rip+0xfffffffffffc6bb6]        # 0x1001968
 103adb2:	nop
 103adb3:	mov    rsi,QWORD PTR [rbp-0x50]
 103adb7:	test   rsi,rsi
 103adba:	je     0x103ae03
 103adbc:	or     eax,0xffffffff
 103adbf:	lock xadd DWORD PTR [rsi+0x10],eax
 103adc4:	dec    eax
 103adc6:	jne    0x103adf1
 103adc8:	test   rsi,rsi
 103adcb:	je     0x103adf1
 103adcd:	mov    rcx,QWORD PTR [rsi]
 103add0:	test   rcx,rcx
 103add3:	je     0x103addb
 103add5:	call   QWORD PTR [rip+0xfffffffffffc6a5d]        # 0x1001838
 103addb:	mov    rcx,QWORD PTR [rsi+0x8]
 103addf:	test   rcx,rcx
 103ade2:	je     0x103ade9
 103ade4:	call   0x103f9c6
 103ade9:	mov    rcx,rsi
 103adec:	call   0x103f95a
 103adf1:	mov    QWORD PTR [rbp-0x50],0x0
 103adf9:	mov    rbx,QWORD PTR [rsp+0x50]
 103adfe:	mov    rdi,QWORD PTR [rsp+0x58]
 103ae03:	mov    rcx,QWORD PTR [rbp-0x40]
 103ae07:	test   rcx,rcx
 103ae0a:	je     0x103ae13
 103ae0c:	mov    rax,QWORD PTR [rcx]
 103ae0f:	call   QWORD PTR [rax+0x10]
 103ae12:	nop
 103ae13:	mov    rcx,QWORD PTR [rbp-0x38]
 103ae17:	test   rcx,rcx
 103ae1a:	je     0x103ae22
 103ae1c:	mov    rax,QWORD PTR [rcx]
 103ae1f:	call   QWORD PTR [rax+0x10]
 103ae22:	lea    r8,[rsp+0x70]
 103ae27:	lea    rdx,[rsp+0x60]
 103ae2c:	lea    rcx,[rbp-0x28]
 103ae30:	call   0x1013cc0
 103ae35:	nop
 103ae36:	mov    rsi,QWORD PTR [r14]
 103ae39:	mov    rcx,rax
 103ae3c:	call   QWORD PTR [rip+0xfffffffffffc6ca6]        # 0x1001ae8
 103ae42:	mov    rdx,rax
 103ae45:	mov    rcx,r14
 103ae48:	call   QWORD PTR [rsi+0x60]
 103ae4b:	movzx  esi,al
 103ae4e:	lea    rcx,[rbp-0x28]
 103ae52:	call   QWORD PTR [rip+0xfffffffffffc6c50]        # 0x1001aa8
 103ae58:	test   sil,sil
 103ae5b:	je     0x103ae85
 103ae5d:	inc    r12d
 103ae60:	lea    rdx,[rip+0xfffffffffffccfed]        # 0x1007e54
 103ae67:	lea    rcx,[rsp+0x70]
 103ae6c:	call   QWORD PTR [rip+0xfffffffffffc6b8e]        # 0x1001a00
 103ae72:	test   eax,eax
 103ae74:	jne    0x103ae85
 103ae76:	lea    rdx,[rsp+0x60]
 103ae7b:	lea    rcx,[rbp-0x70]
 103ae7f:	call   QWORD PTR [rip+0xfffffffffffc6c1b]        # 0x1001aa0
 103ae85:	mov    eax,0x66666667
 103ae8a:	imul   r15d
 103ae8d:	sar    edx,0x2
 103ae90:	mov    eax,edx
 103ae92:	shr    eax,0x1f
 103ae95:	add    edx,eax
 103ae97:	lea    ecx,[rdx+rdx*4]
 103ae9a:	add    ecx,ecx
 103ae9c:	cmp    r15d,ecx
 103ae9f:	jne    0x103aea9
 103aea1:	xor    ecx,ecx
 103aea3:	call   QWORD PTR [rip+0xfffffffffffc669f]        # 0x1001548
 103aea9:	mov    rax,QWORD PTR [r14]
 103aeac:	mov    rcx,r14
 103aeaf:	call   QWORD PTR [rax+0xf8]
 103aeb5:	test   eax,eax
 103aeb7:	jne    0x103af27
 103aeb9:	inc    r15d
 103aebc:	mov    rsi,QWORD PTR [rsp+0x40]
 103aec1:	test   rsi,rsi
 103aec4:	je     0x103b07e
 103aeca:	jmp    0x103ab00
 103aecf:	mov    ecx,0x80004003
 103aed4:	call   0x1049210
 103aed9:	nop
 103aeda:	mov    ecx,0x80004003
 103aedf:	call   0x1049210
 103aee4:	nop
 103aee5:	mov    ecx,0x80004003
 103aeea:	call   0x1049210
 103aeef:	nop
 103aef0:	mov    ecx,0x80004003
 103aef5:	call   0x1049210
 103aefa:	nop
 103aefb:	mov    ecx,0x80004003
 103af00:	call   0x1049210
 103af05:	nop
 103af06:	mov    ecx,0x8007000e
 103af0b:	call   0x1049210
 103af10:	int3   
 103af11:	mov    ecx,0x80004003
 103af16:	call   0x1049210
 103af1b:	int3   
 103af1c:	mov    ecx,0x80004003
 103af21:	call   0x1049210
 103af26:	int3   
 103af27:	lea    rcx,[rsp+0x78]
 103af2c:	call   QWORD PTR [rip+0xfffffffffffc6b8e]        # 0x1001ac0
 103af32:	nop
 103af33:	mov    edx,0x4000c47d
 103af38:	lea    rcx,[rbp-0x18]
 103af3c:	call   0x10132d0
 103af41:	nop
 103af42:	mov    rcx,rax
 103af45:	call   QWORD PTR [rip+0xfffffffffffc6b9d]        # 0x1001ae8
 103af4b:	mov    rdx,rax
 103af4e:	mov    r8d,r12d
 103af51:	lea    rcx,[rsp+0x78]
 103af56:	call   QWORD PTR [rip+0xfffffffffffc6ae4]        # 0x1001a40
 103af5c:	nop
 103af5d:	lea    rcx,[rbp-0x18]
 103af61:	call   QWORD PTR [rip+0xfffffffffffc6b41]        # 0x1001aa8
 103af67:	mov    rax,QWORD PTR [r13+0x18]
 103af6b:	mov    rsi,QWORD PTR [rax]
 103af6e:	add    rsi,0x8
 103af72:	lea    rcx,[rsp+0x78]
 103af77:	call   QWORD PTR [rip+0xfffffffffffc6b6b]        # 0x1001ae8
 103af7d:	mov    r8,rax
 103af80:	mov    BYTE PTR [rsp+0x30],0x1
 103af85:	mov    BYTE PTR [rsp+0x28],0x1
 103af8a:	xor    r14d,r14d
 103af8d:	mov    DWORD PTR [rsp+0x20],r14d
 103af92:	mov    r9b,0x1
 103af95:	mov    edx,0x4000c47d
 103af9a:	mov    rcx,QWORD PTR [r13+0x18]
 103af9e:	call   QWORD PTR [rsi]
 103afa0:	mov    rcx,QWORD PTR [rsp+0x40]
 103afa5:	test   rcx,rcx
 103afa8:	sete   al
 103afab:	test   al,al
 103afad:	sete   al
 103afb0:	test   al,al
 103afb2:	je     0x103afcf
 103afb4:	test   rcx,rcx
 103afb7:	jne    0x103afc4
 103afb9:	mov    ecx,0x80004003
 103afbe:	call   0x1049210
 103afc3:	int3   
 103afc4:	mov    rax,QWORD PTR [rcx]
 103afc7:	call   QWORD PTR [rax+0x10]
 103afca:	mov    QWORD PTR [rsp+0x40],r14
 103afcf:	test   rbx,rbx
 103afd2:	sete   al
 103afd5:	test   al,al
 103afd7:	sete   al
 103afda:	test   al,al
 103afdc:	je     0x103afff
 103afde:	test   rbx,rbx
 103afe1:	jne    0x103afee
 103afe3:	mov    ecx,0x80004003
 103afe8:	call   0x1049210
 103afed:	int3   
 103afee:	mov    rax,QWORD PTR [rbx]
 103aff1:	mov    rcx,rbx
 103aff4:	call   QWORD PTR [rax+0x10]
 103aff7:	mov    rbx,r14
 103affa:	mov    QWORD PTR [rsp+0x50],rbx
 103afff:	test   rdi,rdi
 103b002:	sete   al
 103b005:	test   al,al
 103b007:	sete   al
 103b00a:	test   al,al
 103b00c:	je     0x103b02f
 103b00e:	test   rdi,rdi
 103b011:	jne    0x103b01e
 103b013:	mov    ecx,0x80004003
 103b018:	call   0x1049210
 103b01d:	int3   
 103b01e:	mov    rax,QWORD PTR [rdi]
 103b021:	mov    rcx,rdi
 103b024:	call   QWORD PTR [rax+0x10]
 103b027:	mov    rdi,r14
 103b02a:	mov    QWORD PTR [rsp+0x58],r14
 103b02f:	mov    sil,0x1
 103b032:	lea    rcx,[rsp+0x78]
 103b037:	call   QWORD PTR [rip+0xfffffffffffc6a6b]        # 0x1001aa8
 103b03d:	nop
 103b03e:	lea    rcx,[rbp-0x70]
 103b042:	call   QWORD PTR [rip+0xfffffffffffc6a60]        # 0x1001aa8
 103b048:	nop
 103b049:	lea    rcx,[rsp+0x70]
 103b04e:	call   QWORD PTR [rip+0xfffffffffffc6a54]        # 0x1001aa8
 103b054:	nop
 103b055:	lea    rcx,[rsp+0x60]
 103b05a:	call   QWORD PTR [rip+0xfffffffffffc6a48]        # 0x1001aa8
 103b060:	nop
 103b061:	lea    rcx,[rbp-0x8]
 103b065:	call   QWORD PTR [rip+0xfffffffffffc6a3d]        # 0x1001aa8
 103b06b:	nop
 103b06c:	mov    rcx,QWORD PTR [rsp+0x40]
 103b071:	test   rcx,rcx
 103b074:	je     0x103b093
 103b076:	mov    rax,QWORD PTR [rcx]
 103b079:	call   QWORD PTR [rax+0x10]
 103b07c:	jmp    0x103b093
 103b07e:	mov    ecx,0x80004003
 103b083:	call   0x1049210
 103b088:	nop
 103b089:	mov    rbx,QWORD PTR [rsp+0x50]
 103b08e:	mov    rdi,QWORD PTR [rsp+0x58]
 103b093:	test   rdi,rdi
 103b096:	je     0x103b0a2
 103b098:	mov    rax,QWORD PTR [rdi]
 103b09b:	mov    rcx,rdi
 103b09e:	call   QWORD PTR [rax+0x10]
 103b0a1:	nop
 103b0a2:	test   rbx,rbx
 103b0a5:	je     0x103b0b1
 103b0a7:	mov    rdx,QWORD PTR [rbx]
 103b0aa:	mov    rcx,rbx
 103b0ad:	call   QWORD PTR [rdx+0x10]
 103b0b0:	nop
 103b0b1:	lea    rcx,[rbp+0x8]
 103b0b5:	call   QWORD PTR [rip+0xfffffffffffc69ed]        # 0x1001aa8
 103b0bb:	movzx  eax,sil
 103b0bf:	mov    rcx,QWORD PTR [rbp+0x850]
 103b0c6:	xor    rcx,rsp
 103b0c9:	call   0x103ff40
 103b0ce:	mov    rbx,QWORD PTR [rsp+0x9b0]
 103b0d6:	add    rsp,0x960
 103b0dd:	pop    r15
 103b0df:	pop    r14
 103b0e1:	pop    r13
 103b0e3:	pop    r12
 103b0e5:	pop    rdi
 103b0e6:	pop    rsi
 103b0e7:	pop    rbp
 103b0e8:	ret    
 103b0e9:	int3   
 103b0ea:	int3   
 103b0eb:	int3   
 103b0ec:	int3   
 103b0ed:	int3   
 103b0ee:	int3   
 103b0ef:	int3   
 103b0f0:	sub    rsp,0x28
 103b0f4:	mov    rcx,QWORD PTR [rcx]
 103b0f7:	test   rcx,rcx
 103b0fa:	je     0x103b102
 103b0fc:	mov    rax,QWORD PTR [rcx]
 103b0ff:	call   QWORD PTR [rax+0x10]
 103b102:	add    rsp,0x28
 103b106:	ret    
 103b107:	int3   
 103b108:	int3   
 103b109:	int3   
 103b10a:	int3   
 103b10b:	int3   
 103b10c:	int3   
 103b10d:	int3   
 103b10e:	int3   
 103b10f:	int3   
 103b110:	mov    QWORD PTR [rsp+0x10],rbx
 103b115:	mov    QWORD PTR [rsp+0x18],rbp
 103b11a:	mov    QWORD PTR [rsp+0x20],rsi
 103b11f:	push   rdi
 103b120:	sub    rsp,0x30
 103b124:	mov    rdi,rcx
 103b127:	mov    rcx,QWORD PTR [rcx]
 103b12a:	mov    ebx,r9d
 103b12d:	mov    rsi,r8
 103b130:	mov    rbp,rdx
 103b133:	test   rcx,rcx
 103b136:	je     0x103b13e
 103b138:	mov    rax,QWORD PTR [rcx]
 103b13b:	call   QWORD PTR [rax+0x10]
 103b13e:	mov    r8d,ebx
 103b141:	mov    rdx,rsi
 103b144:	mov    rcx,rbp
 103b147:	test   bl,0x14
 103b14a:	je     0x103b19d
 103b14c:	lea    rax,[rsp+0x40]
 103b151:	lea    r9,[rip+0xfffffffffffcc850]        # 0x10079a8
 103b158:	mov    QWORD PTR [rsp+0x20],rax
 103b15d:	call   QWORD PTR [rip+0xfffffffffffc69e5]        # 0x1001b48
 103b163:	mov    ebx,eax
 103b165:	test   eax,eax
 103b167:	js     0x103b1b5
 103b169:	mov    rcx,QWORD PTR [rsp+0x40]
 103b16e:	call   QWORD PTR [rip+0xfffffffffffc69e4]        # 0x1001b58
 103b174:	mov    ebx,eax
 103b176:	test   eax,eax
 103b178:	js     0x103b190
 103b17a:	mov    rcx,QWORD PTR [rsp+0x40]
 103b17f:	lea    rdx,[rip+0xfffffffffffcc88a]        # 0x1007a10
 103b186:	mov    r8,rdi
 103b189:	mov    rax,QWORD PTR [rcx]
 103b18c:	call   QWORD PTR [rax]
 103b18e:	mov    ebx,eax
 103b190:	mov    rcx,QWORD PTR [rsp+0x40]
 103b195:	mov    rax,QWORD PTR [rcx]
 103b198:	call   QWORD PTR [rax+0x10]
 103b19b:	jmp    0x103b1b1
 103b19d:	lea    r9,[rip+0xfffffffffffcc86c]        # 0x1007a10
 103b1a4:	mov    QWORD PTR [rsp+0x20],rdi
 103b1a9:	call   QWORD PTR [rip+0xfffffffffffc6999]        # 0x1001b48
 103b1af:	mov    ebx,eax
 103b1b1:	test   ebx,ebx
 103b1b3:	jns    0x103b1bc
 103b1b5:	mov    QWORD PTR [rdi],0x0
 103b1bc:	mov    rbp,QWORD PTR [rsp+0x50]
 103b1c1:	mov    rsi,QWORD PTR [rsp+0x58]
 103b1c6:	mov    eax,ebx
 103b1c8:	mov    rbx,QWORD PTR [rsp+0x48]
 103b1cd:	add    rsp,0x30
 103b1d1:	pop    rdi
 103b1d2:	ret    
 103b1d3:	int3   
 103b1d4:	int3   
 103b1d5:	int3   
 103b1d6:	int3   
 103b1d7:	int3   
 103b1d8:	int3   
 103b1d9:	int3   
 103b1da:	int3   
 103b1db:	int3   
 103b1dc:	int3   
 103b1dd:	int3   
 103b1de:	int3   
 103b1df:	int3   
 103b1e0:	rex push rbp
 103b1e2:	push   rbx
 103b1e3:	push   rsi
 103b1e4:	push   rdi
 103b1e5:	push   r12
 103b1e7:	push   r14
 103b1e9:	push   r15
 103b1eb:	lea    rbp,[rsp-0x7d0]
 103b1f3:	sub    rsp,0x8d0
 103b1fa:	mov    QWORD PTR [rbp-0x68],0xfffffffffffffffe
 103b202:	mov    rax,QWORD PTR [rip+0x28667]        # 0x1063870
 103b209:	xor    rax,rsp
 103b20c:	mov    QWORD PTR [rbp+0x7c0],rax
 103b213:	mov    rdi,r9
 103b216:	mov    rsi,r8
 103b219:	mov    r15,rdx
 103b21c:	mov    r14,rcx
 103b21f:	mov    QWORD PTR [rbp-0x60],rdx
 103b223:	mov    rbx,QWORD PTR [rbp+0x830]
 103b22a:	xor    r12d,r12d
 103b22d:	mov    DWORD PTR [rsp+0x60],r12d
 103b232:	mov    rcx,rdx
 103b235:	call   QWORD PTR [rip+0xfffffffffffc6885]        # 0x1001ac0
 103b23b:	mov    DWORD PTR [rsp+0x60],0x1
 103b243:	mov    rdx,rdi
 103b246:	lea    rcx,[rsp+0x40]
 103b24b:	call   QWORD PTR [rip+0xfffffffffffc685f]        # 0x1001ab0
 103b251:	nop
 103b252:	mov    rdx,rbx
 103b255:	lea    rcx,[rsp+0x68]
 103b25a:	call   QWORD PTR [rip+0xfffffffffffc6850]        # 0x1001ab0
 103b260:	nop
 103b261:	mov    WORD PTR [rbp+0x7b0],r12w
 103b269:	lea    rcx,[rsp+0x40]
 103b26e:	call   QWORD PTR [rip+0xfffffffffffc687c]        # 0x1001af0
 103b274:	test   eax,eax
 103b276:	je     0x103b2b3
 103b278:	lea    rcx,[rsp+0x68]
 103b27d:	call   QWORD PTR [rip+0xfffffffffffc686d]        # 0x1001af0
 103b283:	test   eax,eax
 103b285:	je     0x103b2b3
 103b287:	mov    rax,QWORD PTR [rsp+0x68]
 103b28c:	mov    QWORD PTR [rsp+0x28],rax
 103b291:	mov    rax,QWORD PTR [rsp+0x40]
 103b296:	mov    QWORD PTR [rsp+0x20],rax
 103b29b:	mov    r9,rsi
 103b29e:	mov    edx,0x401
 103b2a3:	lea    r8d,[rdx-0x1]
 103b2a7:	lea    rcx,[rbp-0x50]
 103b2ab:	call   QWORD PTR [rip+0xfffffffffffc649f]        # 0x1001750
 103b2b1:	jmp    0x103b2f3
 103b2b3:	lea    rcx,[rsp+0x40]
 103b2b8:	call   QWORD PTR [rip+0xfffffffffffc6832]        # 0x1001af0
 103b2be:	mov    edx,0x401
 103b2c3:	lea    rcx,[rbp-0x50]
 103b2c7:	test   eax,eax
 103b2c9:	je     0x103b2e4
 103b2cb:	mov    rax,QWORD PTR [rsp+0x40]
 103b2d0:	mov    QWORD PTR [rsp+0x20],rax
 103b2d5:	mov    r9,rsi
 103b2d8:	lea    r8d,[rdx-0x1]
 103b2dc:	call   QWORD PTR [rip+0xfffffffffffc646e]        # 0x1001750
 103b2e2:	jmp    0x103b2f3
 103b2e4:	mov    r9d,0x400
 103b2ea:	mov    r8,rsi
 103b2ed:	call   QWORD PTR [rip+0xfffffffffffc63b5]        # 0x10016a8
 103b2f3:	lea    rax,[rsp+0x70]
 103b2f8:	mov    QWORD PTR [rsp+0x78],rax
 103b2fd:	mov    ecx,0x18
 103b302:	call   0x103f9d2
 103b307:	mov    rbx,rax
 103b30a:	mov    QWORD PTR [rbp-0x78],rax
 103b30e:	test   rax,rax
 103b311:	je     0x103b33b
 103b313:	mov    QWORD PTR [rax+0x8],r12
 103b317:	mov    DWORD PTR [rax+0x10],0x1
 103b31e:	lea    rcx,[rbp-0x50]
 103b322:	call   QWORD PTR [rip+0xfffffffffffc6518]        # 0x1001840
 103b328:	mov    QWORD PTR [rbx],rax
 103b32b:	test   rax,rax
 103b32e:	jne    0x103b33e
 103b330:	mov    ecx,0x8007000e
 103b335:	call   0x1049210
 103b33a:	int3   
 103b33b:	mov    rbx,r12
 103b33e:	mov    QWORD PTR [rsp+0x70],rbx
 103b343:	test   rbx,rbx
 103b346:	jne    0x103b353
 103b348:	mov    ecx,0x8007000e
 103b34d:	call   0x1049210
 103b352:	nop
 103b353:	mov    rcx,QWORD PTR [r14+0x10]
 103b357:	test   rcx,rcx
 103b35a:	jne    0x103b367
 103b35c:	mov    ecx,0x80004003
 103b361:	call   0x1049210
 103b366:	nop
 103b367:	lea    r8,[rsp+0x70]
 103b36c:	lea    rdx,[rsp+0x48]
 103b371:	call   0x10367a0
 103b376:	nop
 103b377:	mov    rcx,QWORD PTR [rsp+0x48]
 103b37c:	test   rcx,rcx
 103b37f:	sete   al
 103b382:	test   al,al
 103b384:	je     0x103b4e5
 103b38a:	mov    rax,QWORD PTR [rbp+0x838]
 103b391:	cmp    BYTE PTR [rax],0x0
 103b394:	je     0x103b4d0
 103b39a:	lea    rcx,[rsp+0x58]
 103b39f:	call   QWORD PTR [rip+0xfffffffffffc671b]        # 0x1001ac0
 103b3a5:	nop
 103b3a6:	mov    rcx,QWORD PTR [r14+0x10]
 103b3aa:	test   rcx,rcx
 103b3ad:	jne    0x103b3ba
 103b3af:	mov    ecx,0x80004003
 103b3b4:	call   0x1049210
 103b3b9:	int3   
 103b3ba:	lea    rdx,[rsp+0x78]
 103b3bf:	call   0x10369c0
 103b3c4:	nop
 103b3c5:	mov    rcx,QWORD PTR [rax]
 103b3c8:	test   rcx,rcx
 103b3cb:	jne    0x103b3d8
 103b3cd:	mov    ecx,0x80004003
 103b3d2:	call   0x1049210
 103b3d7:	int3   
 103b3d8:	lea    rdx,[rbp-0x80]
 103b3dc:	call   0x10363d0
 103b3e1:	mov    rbx,rax
 103b3e4:	mov    edx,0xc000c3e3
 103b3e9:	lea    rcx,[rbp-0x78]
 103b3ed:	call   0x10132d0
 103b3f2:	mov    rdi,rax
 103b3f5:	mov    rbx,QWORD PTR [rbx]
 103b3f8:	test   rbx,rbx
 103b3fb:	je     0x103b416
 103b3fd:	cmp    QWORD PTR [rbx+0x8],0x0
 103b402:	jne    0x103b410
 103b404:	mov    rcx,QWORD PTR [rbx]
 103b407:	call   0x1049470
 103b40c:	mov    QWORD PTR [rbx+0x8],rax
 103b410:	mov    rbx,QWORD PTR [rbx+0x8]
 103b414:	jmp    0x103b419
 103b416:	mov    rbx,r12
 103b419:	mov    rcx,rdi
 103b41c:	call   QWORD PTR [rip+0xfffffffffffc66c6]        # 0x1001ae8
 103b422:	mov    rdx,rax
 103b425:	mov    r8,rbx
 103b428:	lea    rcx,[rsp+0x58]
 103b42d:	call   QWORD PTR [rip+0xfffffffffffc660d]        # 0x1001a40
 103b433:	nop
 103b434:	lea    rcx,[rbp-0x78]
 103b438:	call   QWORD PTR [rip+0xfffffffffffc666a]        # 0x1001aa8
 103b43e:	nop
 103b43f:	mov    rbx,QWORD PTR [rbp-0x80]
 103b443:	test   rbx,rbx
 103b446:	je     0x103b481
 103b448:	or     eax,0xffffffff
 103b44b:	lock xadd DWORD PTR [rbx+0x10],eax
 103b450:	dec    eax
 103b452:	jne    0x103b47d
 103b454:	test   rbx,rbx
 103b457:	je     0x103b47d
 103b459:	mov    rcx,QWORD PTR [rbx]
 103b45c:	test   rcx,rcx
 103b45f:	je     0x103b467
 103b461:	call   QWORD PTR [rip+0xfffffffffffc63d1]        # 0x1001838
 103b467:	mov    rcx,QWORD PTR [rbx+0x8]
 103b46b:	test   rcx,rcx
 103b46e:	je     0x103b475
 103b470:	call   0x103f9c6
 103b475:	mov    rcx,rbx
 103b478:	call   0x103f95a
 103b47d:	mov    QWORD PTR [rbp-0x80],r12
 103b481:	mov    rcx,QWORD PTR [rsp+0x78]
 103b486:	test   rcx,rcx
 103b489:	je     0x103b491
 103b48b:	mov    rax,QWORD PTR [rcx]
 103b48e:	call   QWORD PTR [rax+0x10]
 103b491:	mov    rax,QWORD PTR [r14+0x18]
 103b495:	mov    rbx,QWORD PTR [rax]
 103b498:	lea    rcx,[rsp+0x58]
 103b49d:	call   QWORD PTR [rip+0xfffffffffffc6645]        # 0x1001ae8
 103b4a3:	mov    r8,rax
 103b4a6:	mov    BYTE PTR [rsp+0x30],0x1
 103b4ab:	mov    BYTE PTR [rsp+0x28],0x1
 103b4b0:	mov    DWORD PTR [rsp+0x20],r12d
 103b4b5:	xor    r9d,r9d
 103b4b8:	mov    edx,0xc000c3e3
 103b4bd:	mov    rcx,QWORD PTR [r14+0x18]
 103b4c1:	call   QWORD PTR [rbx+0x8]
 103b4c4:	nop
 103b4c5:	lea    rcx,[rsp+0x58]
 103b4ca:	call   QWORD PTR [rip+0xfffffffffffc65d8]        # 0x1001aa8
 103b4d0:	lea    rdx,[rip+0xfffffffffffc6939]        # 0x1001e10
 103b4d7:	mov    rcx,r15
 103b4da:	call   QWORD PTR [rip+0xfffffffffffc65b8]        # 0x1001a98
 103b4e0:	jmp    0x103b58a
 103b4e5:	test   rcx,rcx
 103b4e8:	jne    0x103b4f5
 103b4ea:	mov    ecx,0x80004003
 103b4ef:	call   0x1049210
 103b4f4:	int3   
 103b4f5:	lea    rdx,[rbp-0x70]
 103b4f9:	call   0x1036620
 103b4fe:	nop
 103b4ff:	mov    rdx,QWORD PTR [rax]
 103b502:	test   rdx,rdx
 103b505:	je     0x103b50c
 103b507:	mov    rdx,QWORD PTR [rdx]
 103b50a:	jmp    0x103b50f
 103b50c:	mov    rdx,r12
 103b50f:	mov    rcx,r15
 103b512:	call   QWORD PTR [rip+0xfffffffffffc6580]        # 0x1001a98
 103b518:	nop
 103b519:	mov    rbx,QWORD PTR [rbp-0x70]
 103b51d:	test   rbx,rbx
 103b520:	je     0x103b55b
 103b522:	or     eax,0xffffffff
 103b525:	lock xadd DWORD PTR [rbx+0x10],eax
 103b52a:	dec    eax
 103b52c:	jne    0x103b557
 103b52e:	test   rbx,rbx
 103b531:	je     0x103b557
 103b533:	mov    rcx,QWORD PTR [rbx]
 103b536:	test   rcx,rcx
 103b539:	je     0x103b541
 103b53b:	call   QWORD PTR [rip+0xfffffffffffc62f7]        # 0x1001838
 103b541:	mov    rcx,QWORD PTR [rbx+0x8]
 103b545:	test   rcx,rcx
 103b548:	je     0x103b54f
 103b54a:	call   0x103f9c6
 103b54f:	mov    rcx,rbx
 103b552:	call   0x103f95a
 103b557:	mov    QWORD PTR [rbp-0x70],r12
 103b55b:	mov    rcx,QWORD PTR [rsp+0x48]
 103b560:	test   rcx,rcx
 103b563:	sete   al
 103b566:	test   al,al
 103b568:	sete   al
 103b56b:	test   al,al
 103b56d:	je     0x103b58a
 103b56f:	test   rcx,rcx
 103b572:	jne    0x103b57f
 103b574:	mov    ecx,0x80004003
 103b579:	call   0x1049210
 103b57e:	int3   
 103b57f:	mov    rax,QWORD PTR [rcx]
 103b582:	call   QWORD PTR [rax+0x10]
 103b585:	mov    QWORD PTR [rsp+0x48],r12
 103b58a:	mov    rcx,QWORD PTR [rsp+0x48]
 103b58f:	test   rcx,rcx
 103b592:	je     0x103b59b
 103b594:	mov    rdx,QWORD PTR [rcx]
 103b597:	call   QWORD PTR [rdx+0x10]
 103b59a:	nop
 103b59b:	lea    rcx,[rsp+0x68]
 103b5a0:	call   QWORD PTR [rip+0xfffffffffffc6502]        # 0x1001aa8
 103b5a6:	nop
 103b5a7:	lea    rcx,[rsp+0x40]
 103b5ac:	call   QWORD PTR [rip+0xfffffffffffc64f6]        # 0x1001aa8
 103b5b2:	mov    rax,r15
 103b5b5:	mov    rcx,QWORD PTR [rbp+0x7c0]
 103b5bc:	xor    rcx,rsp
 103b5bf:	call   0x103ff40
 103b5c4:	add    rsp,0x8d0
 103b5cb:	pop    r15
 103b5cd:	pop    r14
 103b5cf:	pop    r12
 103b5d1:	pop    rdi
 103b5d2:	pop    rsi
 103b5d3:	pop    rbx
 103b5d4:	pop    rbp
 103b5d5:	ret    
 103b5d6:	int3   
 103b5d7:	int3   
 103b5d8:	int3   
 103b5d9:	int3   
 103b5da:	int3   
 103b5db:	int3   
 103b5dc:	int3   
 103b5dd:	int3   
 103b5de:	int3   
 103b5df:	int3   
 103b5e0:	mov    QWORD PTR [rsp+0x10],rdx
 103b5e5:	push   rbp
 103b5e6:	push   rsi
 103b5e7:	push   rdi
 103b5e8:	push   r12
 103b5ea:	push   r13
 103b5ec:	push   r14
 103b5ee:	push   r15
 103b5f0:	lea    rbp,[rsp-0x27]
 103b5f5:	sub    rsp,0xd0
 103b5fc:	mov    QWORD PTR [rbp+0xf],0xfffffffffffffffe
 103b604:	mov    QWORD PTR [rsp+0x120],rbx
 103b60c:	mov    rsi,r8
 103b60f:	mov    r12,rdx
 103b612:	mov    r14,rcx
 103b615:	mov    DWORD PTR [rsp+0x28],0x0
 103b61d:	xor    ebx,ebx
 103b61f:	mov    QWORD PTR [rbp-0x79],rbx
 103b623:	xor    edi,edi
 103b625:	mov    QWORD PTR [rbp-0x71],rdi
 103b629:	lea    rcx,[rsp+0x20]
 103b62e:	call   QWORD PTR [rip+0xfffffffffffc648c]        # 0x1001ac0
 103b634:	nop
 103b635:	lea    rax,[rbp-0x41]
 103b639:	mov    QWORD PTR [rbp+0x67],rax
 103b63d:	mov    rdx,rsi
 103b640:	lea    rcx,[rbp-0x41]
 103b644:	call   0x10362b0
 103b649:	nop
 103b64a:	mov    rcx,QWORD PTR [r14+0x10]
 103b64e:	test   rcx,rcx
 103b651:	jne    0x103b65e
 103b653:	mov    ecx,0x80004003
 103b658:	call   0x1049210
 103b65d:	nop
 103b65e:	mov    r8,rax
 103b661:	lea    rdx,[rbp-0x9]
 103b665:	call   0x10366d0
 103b66a:	nop
 103b66b:	mov    rcx,QWORD PTR [rax]
 103b66e:	test   rcx,rcx
 103b671:	je     0x103b681
 103b673:	mov    rbx,rcx
 103b676:	mov    QWORD PTR [rbp-0x79],rcx
 103b67a:	mov    rax,QWORD PTR [rcx]
 103b67d:	call   QWORD PTR [rax+0x8]
 103b680:	nop
 103b681:	mov    rcx,QWORD PTR [rbp-0x9]
 103b685:	test   rcx,rcx
 103b688:	je     0x103b690
 103b68a:	mov    rax,QWORD PTR [rcx]
 103b68d:	call   QWORD PTR [rax+0x10]
 103b690:	test   rbx,rbx
 103b693:	sete   r13b
 103b697:	test   r13b,r13b
 103b69a:	jne    0x103babd
 103b6a0:	test   rbx,rbx
 103b6a3:	jne    0x103b6b0
 103b6a5:	mov    ecx,0x80004003
 103b6aa:	call   0x1049210
 103b6af:	int3   
 103b6b0:	xor    r14d,r14d
 103b6b3:	mov    DWORD PTR [rbp+0x67],r14d
 103b6b7:	mov    rax,QWORD PTR [rbx]
 103b6ba:	lea    rdx,[rbp+0x67]
 103b6be:	mov    rcx,rbx
 103b6c1:	call   QWORD PTR [rax+0x40]
 103b6c4:	test   eax,eax
 103b6c6:	jns    0x103b6d9
 103b6c8:	lea    r8,[rip+0xfffffffffffcc321]        # 0x10079f0
 103b6cf:	mov    rdx,rbx
 103b6d2:	mov    ecx,eax
 103b6d4:	call   0x1049230
 103b6d9:	cmp    DWORD PTR [rbp+0x67],r14d
 103b6dd:	je     0x103babd
 103b6e3:	mov    r15d,r14d
 103b6e6:	data16 nop WORD PTR [rax+rax*1+0x0]
 103b6f0:	mov    DWORD PTR [rbp+0x7f],r14d
 103b6f4:	mov    rax,QWORD PTR [rbx]
 103b6f7:	lea    rdx,[rbp+0x7f]
 103b6fb:	mov    rcx,rbx
 103b6fe:	call   QWORD PTR [rax+0x40]
 103b701:	test   eax,eax
 103b703:	jns    0x103b716
 103b705:	lea    r8,[rip+0xfffffffffffcc2e4]        # 0x10079f0
 103b70c:	mov    rdx,rbx
 103b70f:	mov    ecx,eax
 103b711:	call   0x1049230
 103b716:	cmp    r15d,DWORD PTR [rbp+0x7f]
 103b71a:	jge    0x103ba09
 103b720:	mov    r8d,r15d
 103b723:	lea    rdx,[rbp-0x21]
 103b727:	mov    rcx,rbx
 103b72a:	call   0x1036870
 103b72f:	nop
 103b730:	mov    rcx,QWORD PTR [rax]
 103b733:	cmp    rdi,rcx
 103b736:	je     0x103b75c
 103b738:	mov    rsi,rdi
 103b73b:	mov    rdi,rcx
 103b73e:	mov    QWORD PTR [rbp-0x71],rcx
 103b742:	test   rcx,rcx
 103b745:	je     0x103b74d
 103b747:	mov    rax,QWORD PTR [rcx]
 103b74a:	call   QWORD PTR [rax+0x8]
 103b74d:	test   rsi,rsi
 103b750:	je     0x103b75c
 103b752:	mov    rax,QWORD PTR [rsi]
 103b755:	mov    rcx,rsi
 103b758:	call   QWORD PTR [rax+0x10]
 103b75b:	nop
 103b75c:	mov    rcx,QWORD PTR [rbp-0x21]
 103b760:	test   rcx,rcx
 103b763:	je     0x103b76b
 103b765:	mov    rax,QWORD PTR [rcx]
 103b768:	call   QWORD PTR [rax+0x10]
 103b76b:	lea    rcx,[rbp-0x69]
 103b76f:	call   QWORD PTR [rip+0xfffffffffffc634b]        # 0x1001ac0
 103b775:	nop
 103b776:	lea    rax,[rbp-0x51]
 103b77a:	mov    QWORD PTR [rbp-0x31],rax
 103b77e:	lea    rax,[rbp-0x61]
 103b782:	mov    QWORD PTR [rbp+0x17],rax
 103b786:	mov    ecx,0x18
 103b78b:	call   0x103f9d2
 103b790:	mov    rsi,rax
 103b793:	mov    QWORD PTR [rbp-0x1],rax
 103b797:	test   rax,rax
 103b79a:	je     0x103b7b8
 103b79c:	mov    QWORD PTR [rax+0x8],r14
 103b7a0:	mov    DWORD PTR [rax+0x10],0x1
 103b7a7:	lea    rcx,[rip+0xfffffffffffcc6ae]        # 0x1007e5c
 103b7ae:	call   0x10492d0
 103b7b3:	mov    QWORD PTR [rsi],rax
 103b7b6:	jmp    0x103b7bb
 103b7b8:	mov    rsi,r14
 103b7bb:	mov    QWORD PTR [rbp-0x51],rsi
 103b7bf:	test   rsi,rsi
 103b7c2:	je     0x103b9fe
 103b7c8:	test   rdi,rdi
 103b7cb:	je     0x103b9f3
 103b7d1:	lea    rdx,[rbp-0x29]
 103b7d5:	mov    rcx,rdi
 103b7d8:	call   0x10365a0
 103b7dd:	nop
 103b7de:	mov    rcx,QWORD PTR [rax]
 103b7e1:	test   rcx,rcx
 103b7e4:	je     0x103b9e8
 103b7ea:	lea    r8,[rbp-0x51]
 103b7ee:	lea    rdx,[rbp-0x39]
 103b7f2:	call   0x10368f0
 103b7f7:	nop
 103b7f8:	mov    rcx,QWORD PTR [rax]
 103b7fb:	test   rcx,rcx
 103b7fe:	je     0x103b9dd
 103b804:	lea    rdx,[rbp-0x49]
 103b808:	call   0x1036620
 103b80d:	mov    r14,rax
 103b810:	mov    ecx,0x18
 103b815:	call   0x103f9d2
 103b81a:	mov    rsi,rax
 103b81d:	mov    QWORD PTR [rbp-0x1],rax
 103b821:	test   rax,rax
 103b824:	je     0x103b846
 103b826:	mov    QWORD PTR [rax+0x8],0x0
 103b82e:	mov    DWORD PTR [rax+0x10],0x1
 103b835:	lea    rcx,[rip+0xfffffffffffcc610]        # 0x1007e4c
 103b83c:	call   0x10492d0
 103b841:	mov    QWORD PTR [rsi],rax
 103b844:	jmp    0x103b848
 103b846:	xor    esi,esi
 103b848:	mov    QWORD PTR [rbp-0x61],rsi
 103b84c:	test   rsi,rsi
 103b84f:	je     0x103b9d2
 103b855:	lea    rdx,[rbp-0x11]
 103b859:	mov    rcx,rdi
 103b85c:	call   0x10365a0
 103b861:	nop
 103b862:	mov    rcx,QWORD PTR [rax]
 103b865:	test   rcx,rcx
 103b868:	je     0x103b9c7
 103b86e:	lea    r8,[rbp-0x61]
 103b872:	lea    rdx,[rbp+0x7]
 103b876:	call   0x10368f0
 103b87b:	nop
 103b87c:	mov    rcx,QWORD PTR [rax]
 103b87f:	test   rcx,rcx
 103b882:	je     0x103b9bc
 103b888:	lea    rdx,[rbp-0x59]
 103b88c:	call   0x1036620
 103b891:	nop
 103b892:	mov    r9,QWORD PTR [r14]
 103b895:	xor    r14d,r14d
 103b898:	test   r9,r9
 103b89b:	je     0x103b8a2
 103b89d:	mov    r9,QWORD PTR [r9]
 103b8a0:	jmp    0x103b8a5
 103b8a2:	mov    r9,r14
 103b8a5:	mov    rax,QWORD PTR [rax]
 103b8a8:	test   rax,rax
 103b8ab:	je     0x103b8b2
 103b8ad:	mov    r8,QWORD PTR [rax]
 103b8b0:	jmp    0x103b8b5
 103b8b2:	mov    r8,r14
 103b8b5:	lea    rdx,[rip+0xfffffffffffcc5ac]        # 0x1007e68
 103b8bc:	lea    rcx,[rbp-0x69]
 103b8c0:	call   QWORD PTR [rip+0xfffffffffffc617a]        # 0x1001a40
 103b8c6:	nop
 103b8c7:	mov    rsi,QWORD PTR [rbp-0x59]
 103b8cb:	test   rsi,rsi
 103b8ce:	je     0x103b911
 103b8d0:	or     eax,0xffffffff
 103b8d3:	lock xadd DWORD PTR [rsi+0x10],eax
 103b8d8:	dec    eax
 103b8da:	jne    0x103b905
 103b8dc:	test   rsi,rsi
 103b8df:	je     0x103b905
 103b8e1:	mov    rcx,QWORD PTR [rsi]
 103b8e4:	test   rcx,rcx
 103b8e7:	je     0x103b8ef
 103b8e9:	call   QWORD PTR [rip+0xfffffffffffc5f49]        # 0x1001838
 103b8ef:	mov    rcx,QWORD PTR [rsi+0x8]
 103b8f3:	test   rcx,rcx
 103b8f6:	je     0x103b8fd
 103b8f8:	call   0x103f9c6
 103b8fd:	mov    rcx,rsi
 103b900:	call   0x103f95a
 103b905:	mov    QWORD PTR [rbp-0x59],r14
 103b909:	mov    rbx,QWORD PTR [rbp-0x79]
 103b90d:	mov    rdi,QWORD PTR [rbp-0x71]
 103b911:	mov    rcx,QWORD PTR [rbp+0x7]
 103b915:	test   rcx,rcx
 103b918:	je     0x103b921
 103b91a:	mov    rax,QWORD PTR [rcx]
 103b91d:	call   QWORD PTR [rax+0x10]
 103b920:	nop
 103b921:	mov    rcx,QWORD PTR [rbp-0x11]
 103b925:	test   rcx,rcx
 103b928:	je     0x103b931
 103b92a:	mov    rax,QWORD PTR [rcx]
 103b92d:	call   QWORD PTR [rax+0x10]
 103b930:	nop
 103b931:	mov    rsi,QWORD PTR [rbp-0x49]
 103b935:	test   rsi,rsi
 103b938:	je     0x103b97b
 103b93a:	or     eax,0xffffffff
 103b93d:	lock xadd DWORD PTR [rsi+0x10],eax
 103b942:	dec    eax
 103b944:	jne    0x103b96f
 103b946:	test   rsi,rsi
 103b949:	je     0x103b96f
 103b94b:	mov    rcx,QWORD PTR [rsi]
 103b94e:	test   rcx,rcx
 103b951:	je     0x103b959
 103b953:	call   QWORD PTR [rip+0xfffffffffffc5edf]        # 0x1001838
 103b959:	mov    rcx,QWORD PTR [rsi+0x8]
 103b95d:	test   rcx,rcx
 103b960:	je     0x103b967
 103b962:	call   0x103f9c6
 103b967:	mov    rcx,rsi
 103b96a:	call   0x103f95a
 103b96f:	mov    QWORD PTR [rbp-0x49],r14
 103b973:	mov    rbx,QWORD PTR [rbp-0x79]
 103b977:	mov    rdi,QWORD PTR [rbp-0x71]
 103b97b:	mov    rcx,QWORD PTR [rbp-0x39]
 103b97f:	test   rcx,rcx
 103b982:	je     0x103b98b
 103b984:	mov    rax,QWORD PTR [rcx]
 103b987:	call   QWORD PTR [rax+0x10]
 103b98a:	nop
 103b98b:	mov    rcx,QWORD PTR [rbp-0x29]
 103b98f:	test   rcx,rcx
 103b992:	je     0x103b99a
 103b994:	mov    rax,QWORD PTR [rcx]
 103b997:	call   QWORD PTR [rax+0x10]
 103b99a:	lea    rdx,[rbp-0x69]
 103b99e:	lea    rcx,[rsp+0x20]
 103b9a3:	call   QWORD PTR [rip+0xfffffffffffc602f]        # 0x10019d8
 103b9a9:	nop
 103b9aa:	lea    rcx,[rbp-0x69]
 103b9ae:	call   QWORD PTR [rip+0xfffffffffffc60f4]        # 0x1001aa8
 103b9b4:	inc    r15d
 103b9b7:	jmp    0x103b6f0
 103b9bc:	mov    ecx,0x80004003
 103b9c1:	call   0x1049210
 103b9c6:	nop
 103b9c7:	mov    ecx,0x80004003
 103b9cc:	call   0x1049210
 103b9d1:	nop
 103b9d2:	mov    ecx,0x8007000e
 103b9d7:	call   0x1049210
 103b9dc:	nop
 103b9dd:	mov    ecx,0x80004003
 103b9e2:	call   0x1049210
 103b9e7:	nop
 103b9e8:	mov    ecx,0x80004003
 103b9ed:	call   0x1049210
 103b9f2:	nop
 103b9f3:	mov    ecx,0x80004003
 103b9f8:	call   0x1049210
 103b9fd:	nop
 103b9fe:	mov    ecx,0x8007000e
 103ba03:	call   0x1049210
 103ba08:	nop
 103ba09:	lea    rcx,[rsp+0x20]
 103ba0e:	call   QWORD PTR [rip+0xfffffffffffc60dc]        # 0x1001af0
 103ba14:	lea    r8d,[rax-0x1]
 103ba18:	lea    rdx,[rbp-0x19]
 103ba1c:	lea    rcx,[rsp+0x20]
 103ba21:	call   QWORD PTR [rip+0xfffffffffffc6021]        # 0x1001a48
 103ba27:	nop
 103ba28:	mov    rdx,rax
 103ba2b:	lea    rcx,[rsp+0x20]
 103ba30:	call   QWORD PTR [rip+0xfffffffffffc606a]        # 0x1001aa0
 103ba36:	nop
 103ba37:	lea    rcx,[rbp-0x19]
 103ba3b:	call   QWORD PTR [rip+0xfffffffffffc6067]        # 0x1001aa8
 103ba41:	test   r13b,r13b
 103ba44:	sete   al
 103ba47:	test   al,al
 103ba49:	je     0x103ba5b
 103ba4b:	mov    rax,QWORD PTR [rbx]
 103ba4e:	mov    rcx,rbx
 103ba51:	call   QWORD PTR [rax+0x10]
 103ba54:	mov    rbx,r14
 103ba57:	mov    QWORD PTR [rbp-0x79],rbx
 103ba5b:	test   rdi,rdi
 103ba5e:	sete   al
 103ba61:	test   al,al
 103ba63:	sete   al
 103ba66:	test   al,al
 103ba68:	je     0x103ba8a
 103ba6a:	test   rdi,rdi
 103ba6d:	jne    0x103ba7a
 103ba6f:	mov    ecx,0x80004003
 103ba74:	call   0x1049210
 103ba79:	int3   
 103ba7a:	mov    rax,QWORD PTR [rdi]
 103ba7d:	mov    rcx,rdi
 103ba80:	call   QWORD PTR [rax+0x10]
 103ba83:	mov    rdi,r14
 103ba86:	mov    QWORD PTR [rbp-0x71],r14
 103ba8a:	lea    rdx,[rsp+0x20]
 103ba8f:	mov    rcx,r12
 103ba92:	call   QWORD PTR [rip+0xfffffffffffc5f20]        # 0x10019b8
 103ba98:	mov    DWORD PTR [rsp+0x28],0x1
 103baa0:	lea    rcx,[rsp+0x20]
 103baa5:	call   QWORD PTR [rip+0xfffffffffffc5ffd]        # 0x1001aa8
 103baab:	nop
 103baac:	test   rdi,rdi
 103baaf:	je     0x103babb
 103bab1:	mov    rax,QWORD PTR [rdi]
 103bab4:	mov    rcx,rdi
 103bab7:	call   QWORD PTR [rax+0x10]
 103baba:	nop
 103babb:	jmp    0x103bae1
 103babd:	lea    rdx,[rip+0xfffffffffffc634c]        # 0x1001e10
 103bac4:	mov    rcx,r12
 103bac7:	call   QWORD PTR [rip+0xfffffffffffc5fe3]        # 0x1001ab0
 103bacd:	mov    DWORD PTR [rsp+0x28],0x1
 103bad5:	lea    rcx,[rsp+0x20]
 103bada:	call   QWORD PTR [rip+0xfffffffffffc5fc8]        # 0x1001aa8
 103bae0:	nop
 103bae1:	test   rbx,rbx
 103bae4:	je     0x103baef
 103bae6:	mov    rax,QWORD PTR [rbx]
 103bae9:	mov    rcx,rbx
 103baec:	call   QWORD PTR [rax+0x10]
 103baef:	mov    rax,r12
 103baf2:	mov    rbx,QWORD PTR [rsp+0x120]
 103bafa:	add    rsp,0xd0
 103bb01:	pop    r15
 103bb03:	pop    r14
 103bb05:	pop    r13
 103bb07:	pop    r12
 103bb09:	pop    rdi
 103bb0a:	pop    rsi
 103bb0b:	pop    rbp
 103bb0c:	ret    
 103bb0d:	int3   
 103bb0e:	int3   
 103bb0f:	int3   
 103bb10:	int3   
 103bb11:	int3   
 103bb12:	int3   
 103bb13:	int3   
 103bb14:	int3   
 103bb15:	int3   
 103bb16:	int3   
 103bb17:	int3   
 103bb18:	int3   
 103bb19:	int3   
 103bb1a:	int3   
 103bb1b:	int3   
 103bb1c:	int3   
 103bb1d:	int3   
 103bb1e:	int3   
 103bb1f:	int3   
 103bb20:	mov    QWORD PTR [rsp+0x8],rcx
 103bb25:	push   rbx
 103bb26:	push   rsi
 103bb27:	push   rdi
 103bb28:	sub    rsp,0x50
 103bb2c:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
 103bb35:	mov    rdi,rcx
 103bb38:	xor    ecx,ecx
 103bb3a:	call   QWORD PTR [rip+0xfffffffffffc6010]        # 0x1001b50
 103bb40:	test   eax,eax
 103bb42:	je     0x103bb69
 103bb44:	mov    rcx,QWORD PTR [rdi+0x18]
 103bb48:	mov    rax,QWORD PTR [rcx]
 103bb4b:	mov    BYTE PTR [rsp+0x28],0x1
 103bb50:	mov    BYTE PTR [rsp+0x20],0x1
 103bb55:	xor    r9d,r9d
 103bb58:	xor    r8d,r8d
 103bb5b:	mov    edx,0xc000c460
 103bb60:	call   QWORD PTR [rax]
 103bb62:	xor    al,al
 103bb64:	jmp    0x103bcb3
 103bb69:	lea    rbx,[rdi+0x10]
 103bb6d:	mov    r9d,0x17
 103bb73:	xor    r8d,r8d
 103bb76:	lea    rdx,[rip+0xfffffffffffcbf93]        # 0x1007b10
 103bb7d:	mov    rcx,rbx
 103bb80:	call   0x103b110
 103bb85:	test   eax,eax
 103bb87:	je     0x103bbae
 103bb89:	mov    rcx,QWORD PTR [rdi+0x18]
 103bb8d:	mov    rax,QWORD PTR [rcx]
 103bb90:	mov    BYTE PTR [rsp+0x28],0x1
 103bb95:	mov    BYTE PTR [rsp+0x20],0x1
 103bb9a:	xor    r9d,r9d
 103bb9d:	xor    r8d,r8d
 103bba0:	mov    edx,0xc000c460
 103bba5:	call   QWORD PTR [rax]
 103bba7:	xor    al,al
 103bba9:	jmp    0x103bcb3
 103bbae:	cmp    QWORD PTR [rbx],0x0
 103bbb2:	jne    0x103bbbe
 103bbb4:	mov    ecx,0x80004003
 103bbb9:	call   0x1049210
 103bbbe:	mov    rdi,QWORD PTR [rbx]
 103bbc1:	mov    rax,QWORD PTR [rdi]
 103bbc4:	xor    edx,edx
 103bbc6:	mov    rcx,rdi
 103bbc9:	call   QWORD PTR [rax+0x1f8]
 103bbcf:	test   eax,eax
 103bbd1:	jns    0x103bbe4
 103bbd3:	lea    r8,[rip+0xfffffffffffcbde6]        # 0x10079c0
 103bbda:	mov    rdx,rdi
 103bbdd:	mov    ecx,eax
 103bbdf:	call   0x1049230
 103bbe4:	cmp    QWORD PTR [rbx],0x0
 103bbe8:	jne    0x103bbf4
 103bbea:	mov    ecx,0x80004003
 103bbef:	call   0x1049210
 103bbf4:	mov    rdi,QWORD PTR [rbx]
 103bbf7:	mov    rax,QWORD PTR [rdi]
 103bbfa:	or     esi,0xffffffff
 103bbfd:	mov    edx,esi
 103bbff:	mov    rcx,rdi
 103bc02:	call   QWORD PTR [rax+0x240]
 103bc08:	test   eax,eax
 103bc0a:	jns    0x103bc1d
 103bc0c:	lea    r8,[rip+0xfffffffffffcbdad]        # 0x10079c0
 103bc13:	mov    rdx,rdi
 103bc16:	mov    ecx,eax
 103bc18:	call   0x1049230
 103bc1d:	cmp    QWORD PTR [rbx],0x0
 103bc21:	jne    0x103bc2d
 103bc23:	mov    ecx,0x80004003
 103bc28:	call   0x1049210
 103bc2d:	mov    rdi,QWORD PTR [rbx]
 103bc30:	mov    rax,QWORD PTR [rdi]
 103bc33:	mov    edx,esi
 103bc35:	mov    rcx,rdi
 103bc38:	call   QWORD PTR [rax+0x230]
 103bc3e:	test   eax,eax
 103bc40:	jns    0x103bc53
 103bc42:	lea    r8,[rip+0xfffffffffffcbd77]        # 0x10079c0
 103bc49:	mov    rdx,rdi
 103bc4c:	mov    ecx,eax
 103bc4e:	call   0x1049230
 103bc53:	mov    eax,0x2
 103bc58:	mov    WORD PTR [rsp+0x38],ax
 103bc5d:	mov    WORD PTR [rsp+0x40],si
 103bc62:	lea    rax,[rsp+0x78]
 103bc67:	mov    QWORD PTR [rsp+0x80],rax
 103bc6f:	lea    rdx,[rip+0xfffffffffffcbeaa]        # 0x1007b20
 103bc76:	lea    rcx,[rsp+0x78]
 103bc7b:	call   0x10362b0
 103bc80:	nop
 103bc81:	cmp    QWORD PTR [rbx],0x0
 103bc85:	jne    0x103bc91
 103bc87:	mov    ecx,0x80004003
 103bc8c:	call   0x1049210
 103bc91:	mov    rcx,QWORD PTR [rbx]
 103bc94:	lea    r8,[rsp+0x38]
 103bc99:	mov    rdx,rax
 103bc9c:	call   0x1036b00
 103bca1:	nop
 103bca2:	lea    rcx,[rsp+0x38]
 103bca7:	call   QWORD PTR [rip+0xfffffffffffc5b9b]        # 0x1001848
 103bcad:	mov    al,0x1
 103bcaf:	jmp    0x103bcb3
 103bcb1:	xor    al,al
 103bcb3:	add    rsp,0x50
 103bcb7:	pop    rdi
 103bcb8:	pop    rsi
 103bcb9:	pop    rbx
 103bcba:	ret    
 103bcbb:	int3   
 103bcbc:	int3   
 103bcbd:	int3   
 103bcbe:	int3   
 103bcbf:	int3   
 103bcc0:	int3   
 103bcc1:	int3   
 103bcc2:	int3   
 103bcc3:	int3   
 103bcc4:	int3   
 103bcc5:	int3   
 103bcc6:	int3   
 103bcc7:	int3   
 103bcc8:	int3   
 103bcc9:	int3   
 103bcca:	int3   
 103bccb:	int3   
 103bccc:	int3   
 103bccd:	int3   
 103bcce:	int3   
 103bccf:	int3   
 103bcd0:	mov    QWORD PTR [rsp+0x10],rdx
 103bcd5:	push   rdi
 103bcd6:	sub    rsp,0x30
 103bcda:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 103bce3:	mov    QWORD PTR [rsp+0x40],rbx
 103bce8:	mov    rbx,rdx
 103bceb:	mov    edx,0x2e
 103bcf0:	xor    r8d,r8d
 103bcf3:	mov    rcx,rbx
 103bcf6:	call   QWORD PTR [rip+0xfffffffffffc5c5c]        # 0x1001958
 103bcfc:	mov    rcx,rbx
 103bcff:	cmp    eax,0xffffffff
 103bd02:	je     0x103bd45
 103bd04:	mov    edx,0x2e
 103bd09:	xor    r8d,r8d
 103bd0c:	call   QWORD PTR [rip+0xfffffffffffc5c46]        # 0x1001958
 103bd12:	mov    r8d,eax
 103bd15:	lea    rdx,[rsp+0x50]
 103bd1a:	mov    rcx,rbx
 103bd1d:	call   QWORD PTR [rip+0xfffffffffffc5d25]        # 0x1001a48
 103bd23:	nop
 103bd24:	mov    rcx,rax
 103bd27:	call   QWORD PTR [rip+0xfffffffffffc5dbb]        # 0x1001ae8
 103bd2d:	mov    rcx,rax
 103bd30:	call   QWORD PTR [rip+0xfffffffffffc5a0a]        # 0x1001740
 103bd36:	mov    edi,eax
 103bd38:	lea    rcx,[rsp+0x50]
 103bd3d:	call   QWORD PTR [rip+0xfffffffffffc5d65]        # 0x1001aa8
 103bd43:	jmp    0x103bd56
 103bd45:	call   QWORD PTR [rip+0xfffffffffffc5d9d]        # 0x1001ae8
 103bd4b:	mov    rcx,rax
 103bd4e:	call   QWORD PTR [rip+0xfffffffffffc59ec]        # 0x1001740
 103bd54:	mov    edi,eax
 103bd56:	lea    eax,[rdi-0x8]
 103bd59:	cmp    eax,0x3
 103bd5c:	ja     0x103bd6b
 103bd5e:	mov    rcx,rbx
 103bd61:	call   QWORD PTR [rip+0xfffffffffffc5d41]        # 0x1001aa8
 103bd67:	mov    al,0x1
 103bd69:	jmp    0x103bd76
 103bd6b:	mov    rcx,rbx
 103bd6e:	call   QWORD PTR [rip+0xfffffffffffc5d34]        # 0x1001aa8
 103bd74:	xor    al,al
 103bd76:	mov    rbx,QWORD PTR [rsp+0x40]
 103bd7b:	add    rsp,0x30
 103bd7f:	pop    rdi
 103bd80:	ret    
 103bd81:	int3   
 103bd82:	int3   
 103bd83:	int3   
 103bd84:	int3   
 103bd85:	int3   
 103bd86:	int3   
 103bd87:	int3   
 103bd88:	int3   
 103bd89:	int3   
 103bd8a:	int3   
 103bd8b:	int3   
 103bd8c:	int3   
 103bd8d:	int3   
 103bd8e:	int3   
 103bd8f:	int3   
 103bd90:	mov    QWORD PTR [rsp+0x18],r8
 103bd95:	mov    QWORD PTR [rsp+0x10],rdx
 103bd9a:	mov    QWORD PTR [rsp+0x8],rcx
 103bd9f:	push   rbp
 103bda0:	push   rbx
 103bda1:	push   rsi
 103bda2:	push   rdi
 103bda3:	push   r12
 103bda5:	push   r13
 103bda7:	push   r14
 103bda9:	push   r15
 103bdab:	lea    rbp,[rsp-0x78]
 103bdb0:	sub    rsp,0x178
 103bdb7:	mov    QWORD PTR [rbp+0x68],0xfffffffffffffffe
 103bdbf:	mov    r14,r8
 103bdc2:	mov    r13,rdx
 103bdc5:	mov    r15,rcx
 103bdc8:	lea    rcx,[rsp+0x58]
 103bdcd:	call   QWORD PTR [rip+0xfffffffffffc5ced]        # 0x1001ac0
 103bdd3:	nop
 103bdd4:	lea    rcx,[rsp+0x50]
 103bdd9:	call   QWORD PTR [rip+0xfffffffffffc5ce1]        # 0x1001ac0
 103bddf:	nop
 103bde0:	lea    rcx,[rsp+0x40]
 103bde5:	call   QWORD PTR [rip+0xfffffffffffc5cd5]        # 0x1001ac0
 103bdeb:	nop
 103bdec:	lea    rax,[rbp-0x80]
 103bdf0:	mov    QWORD PTR [rbp+0xd8],rax
 103bdf7:	mov    ecx,0x18
 103bdfc:	call   0x103f9d2
 103be01:	mov    rbx,rax
 103be04:	mov    QWORD PTR [rbp-0x38],rax
 103be08:	xor    edi,edi
 103be0a:	test   rax,rax
 103be0d:	je     0x103be2b
 103be0f:	mov    QWORD PTR [rax+0x8],rdi
 103be13:	mov    DWORD PTR [rax+0x10],0x1
 103be1a:	lea    rcx,[rip+0xfffffffffffcc057]        # 0x1007e78
 103be21:	call   0x10492d0
 103be26:	mov    QWORD PTR [rbx],rax
 103be29:	jmp    0x103be2e
 103be2b:	mov    rbx,rdi
 103be2e:	mov    QWORD PTR [rbp-0x80],rbx
 103be32:	test   rbx,rbx
 103be35:	jne    0x103be42
 103be37:	mov    ecx,0x8007000e
 103be3c:	call   0x1049210
 103be41:	nop
 103be42:	mov    rcx,QWORD PTR [r14]
 103be45:	test   rcx,rcx
 103be48:	jne    0x103be55
 103be4a:	mov    ecx,0x80004003
 103be4f:	call   0x1049210
 103be54:	int3   
 103be55:	lea    rdx,[rbp-0x30]
 103be59:	call   0x10365a0
 103be5e:	nop
 103be5f:	mov    rcx,QWORD PTR [rax]
 103be62:	test   rcx,rcx
 103be65:	jne    0x103be72
 103be67:	mov    ecx,0x80004003
 103be6c:	call   0x1049210
 103be71:	nop
 103be72:	lea    r8,[rbp-0x80]
 103be76:	lea    rdx,[rbp+0x58]
 103be7a:	call   0x10368f0
 103be7f:	nop
 103be80:	mov    rcx,QWORD PTR [rax]
 103be83:	test   rcx,rcx
 103be86:	jne    0x103be93
 103be88:	mov    ecx,0x80004003
 103be8d:	call   0x1049210
 103be92:	int3   
 103be93:	lea    rdx,[rbp-0x70]
 103be97:	call   0x1036620
 103be9c:	nop
 103be9d:	mov    rdx,QWORD PTR [rax]
 103bea0:	test   rdx,rdx
 103bea3:	je     0x103beaa
 103bea5:	mov    rdx,QWORD PTR [rdx]
 103bea8:	jmp    0x103bead
 103beaa:	mov    rdx,rdi
 103bead:	lea    rcx,[rsp+0x58]
 103beb2:	call   QWORD PTR [rip+0xfffffffffffc5be0]        # 0x1001a98
 103beb8:	nop
 103beb9:	or     esi,0xffffffff
 103bebc:	mov    rbx,QWORD PTR [rbp-0x70]
 103bec0:	test   rbx,rbx
 103bec3:	je     0x103befd
 103bec5:	mov    eax,esi
 103bec7:	lock xadd DWORD PTR [rbx+0x10],eax
 103becc:	dec    eax
 103bece:	jne    0x103bef9
 103bed0:	test   rbx,rbx
 103bed3:	je     0x103bef9
 103bed5:	mov    rcx,QWORD PTR [rbx]
 103bed8:	test   rcx,rcx
 103bedb:	je     0x103bee3
 103bedd:	call   QWORD PTR [rip+0xfffffffffffc5955]        # 0x1001838
 103bee3:	mov    rcx,QWORD PTR [rbx+0x8]
 103bee7:	test   rcx,rcx
 103beea:	je     0x103bef1
 103beec:	call   0x103f9c6
 103bef1:	mov    rcx,rbx
 103bef4:	call   0x103f95a
 103bef9:	mov    QWORD PTR [rbp-0x70],rdi
 103befd:	mov    rcx,QWORD PTR [rbp+0x58]
 103bf01:	test   rcx,rcx
 103bf04:	je     0x103bf0d
 103bf06:	mov    rax,QWORD PTR [rcx]
 103bf09:	call   QWORD PTR [rax+0x10]
 103bf0c:	nop
 103bf0d:	mov    rcx,QWORD PTR [rbp-0x30]
 103bf11:	test   rcx,rcx
 103bf14:	je     0x103bf1c
 103bf16:	mov    rax,QWORD PTR [rcx]
 103bf19:	call   QWORD PTR [rax+0x10]
 103bf1c:	lea    rax,[rbp-0x50]
 103bf20:	mov    QWORD PTR [rbp+0xd8],rax
 103bf27:	mov    ecx,0x18
 103bf2c:	call   0x103f9d2
 103bf31:	mov    rbx,rax
 103bf34:	mov    QWORD PTR [rsp+0x48],rax
 103bf39:	test   rax,rax
 103bf3c:	je     0x103bf5a
 103bf3e:	mov    QWORD PTR [rax+0x8],rdi
 103bf42:	mov    DWORD PTR [rax+0x10],0x1
 103bf49:	lea    rcx,[rip+0xfffffffffffcbf30]        # 0x1007e80
 103bf50:	call   0x10492d0
 103bf55:	mov    QWORD PTR [rbx],rax
 103bf58:	jmp    0x103bf5d
 103bf5a:	mov    rbx,rdi
 103bf5d:	mov    QWORD PTR [rbp-0x50],rbx
 103bf61:	test   rbx,rbx
 103bf64:	jne    0x103bf71
 103bf66:	mov    ecx,0x8007000e
 103bf6b:	call   0x1049210
 103bf70:	nop
 103bf71:	mov    rcx,QWORD PTR [r14]
 103bf74:	test   rcx,rcx
 103bf77:	jne    0x103bf84
 103bf79:	mov    ecx,0x80004003
 103bf7e:	call   0x1049210
 103bf83:	int3   
 103bf84:	lea    rdx,[rbp+0x60]
 103bf88:	call   0x10365a0
 103bf8d:	nop
 103bf8e:	mov    rcx,QWORD PTR [rax]
 103bf91:	test   rcx,rcx
 103bf94:	jne    0x103bfa1
 103bf96:	mov    ecx,0x80004003
 103bf9b:	call   0x1049210
 103bfa0:	nop
 103bfa1:	lea    r8,[rbp-0x50]
 103bfa5:	lea    rdx,[rbp-0x20]
 103bfa9:	call   0x10368f0
 103bfae:	nop
 103bfaf:	mov    rcx,QWORD PTR [rax]
 103bfb2:	test   rcx,rcx
 103bfb5:	jne    0x103bfc2
 103bfb7:	mov    ecx,0x80004003
 103bfbc:	call   0x1049210
 103bfc1:	int3   
 103bfc2:	lea    rdx,[rbp-0x60]
 103bfc6:	call   0x1036620
 103bfcb:	nop
 103bfcc:	mov    rdx,QWORD PTR [rax]
 103bfcf:	test   rdx,rdx
 103bfd2:	je     0x103bfd9
 103bfd4:	mov    rdx,QWORD PTR [rdx]
 103bfd7:	jmp    0x103bfdc
 103bfd9:	mov    rdx,rdi
 103bfdc:	lea    rcx,[rsp+0x50]
 103bfe1:	call   QWORD PTR [rip+0xfffffffffffc5ab1]        # 0x1001a98
 103bfe7:	nop
 103bfe8:	mov    rbx,QWORD PTR [rbp-0x60]
 103bfec:	test   rbx,rbx
 103bfef:	je     0x103c029
 103bff1:	mov    eax,esi
 103bff3:	lock xadd DWORD PTR [rbx+0x10],eax
 103bff8:	dec    eax
 103bffa:	jne    0x103c025
 103bffc:	test   rbx,rbx
 103bfff:	je     0x103c025
 103c001:	mov    rcx,QWORD PTR [rbx]
 103c004:	test   rcx,rcx
 103c007:	je     0x103c00f
 103c009:	call   QWORD PTR [rip+0xfffffffffffc5829]        # 0x1001838
 103c00f:	mov    rcx,QWORD PTR [rbx+0x8]
 103c013:	test   rcx,rcx
 103c016:	je     0x103c01d
 103c018:	call   0x103f9c6
 103c01d:	mov    rcx,rbx
 103c020:	call   0x103f95a
 103c025:	mov    QWORD PTR [rbp-0x60],rdi
 103c029:	mov    rcx,QWORD PTR [rbp-0x20]
 103c02d:	test   rcx,rcx
 103c030:	je     0x103c039
 103c032:	mov    rax,QWORD PTR [rcx]
 103c035:	call   QWORD PTR [rax+0x10]
 103c038:	nop
 103c039:	mov    rcx,QWORD PTR [rbp+0x60]
 103c03d:	test   rcx,rcx
 103c040:	je     0x103c048
 103c042:	mov    rax,QWORD PTR [rcx]
 103c045:	call   QWORD PTR [rax+0x10]
 103c048:	lea    rcx,[rsp+0x50]
 103c04d:	call   QWORD PTR [rip+0xfffffffffffc5a95]        # 0x1001ae8
 103c053:	mov    rcx,rax
 103c056:	lea    rdx,[rip+0xfffffffffffc6de3]        # 0x1002e40
 103c05d:	call   QWORD PTR [rip+0xfffffffffffc566d]        # 0x10016d0
 103c063:	mov    ebx,0x2
 103c068:	test   eax,eax
 103c06a:	jne    0x103c074
 103c06c:	mov    DWORD PTR [rbp+0xd8],edi
 103c072:	jmp    0x103c0a6
 103c074:	lea    rcx,[rsp+0x50]
 103c079:	call   QWORD PTR [rip+0xfffffffffffc5a69]        # 0x1001ae8
 103c07f:	mov    rcx,rax
 103c082:	lea    rdx,[rip+0xfffffffffffcbdff]        # 0x1007e88
 103c089:	call   QWORD PTR [rip+0xfffffffffffc5641]        # 0x10016d0
 103c08f:	mov    r15d,edi
 103c092:	test   eax,eax
 103c094:	cmove  r15d,ebx
 103c098:	mov    DWORD PTR [rbp+0xd8],r15d
 103c09f:	mov    r15,QWORD PTR [rbp+0xc0]
 103c0a6:	lea    rax,[rbp-0x10]
 103c0aa:	mov    QWORD PTR [rsp+0x48],rax
 103c0af:	lea    rdx,[rip+0xfffffffffffcbdea]        # 0x1007ea0
 103c0b6:	lea    rcx,[rbp-0x10]
 103c0ba:	call   0x10362b0
 103c0bf:	mov    rbx,rax
 103c0c2:	mov    rcx,QWORD PTR [r14]
 103c0c5:	test   rcx,rcx
 103c0c8:	jne    0x103c0d5
 103c0ca:	mov    ecx,0x80004003
 103c0cf:	call   0x1049210
 103c0d4:	int3   
 103c0d5:	lea    rdx,[rbp+0x0]
 103c0d9:	call   0x10365a0
 103c0de:	nop
 103c0df:	mov    rcx,QWORD PTR [rax]
 103c0e2:	test   rcx,rcx
 103c0e5:	jne    0x103c0f2
 103c0e7:	mov    ecx,0x80004003
 103c0ec:	call   0x1049210
 103c0f1:	nop
 103c0f2:	mov    r8,rbx
 103c0f5:	lea    rdx,[rbp+0x30]
 103c0f9:	call   0x10368f0
 103c0fe:	nop
 103c0ff:	mov    rcx,QWORD PTR [rax]
 103c102:	test   rcx,rcx
 103c105:	jne    0x103c112
 103c107:	mov    ecx,0x80004003
 103c10c:	call   0x1049210
 103c111:	int3   
 103c112:	lea    rdx,[rbp-0x40]
 103c116:	call   0x1036620
 103c11b:	nop
 103c11c:	mov    rdx,QWORD PTR [rax]
 103c11f:	test   rdx,rdx
 103c122:	je     0x103c129
 103c124:	mov    rdx,QWORD PTR [rdx]
 103c127:	jmp    0x103c12c
 103c129:	mov    rdx,rdi
 103c12c:	lea    rcx,[rsp+0x40]
 103c131:	call   QWORD PTR [rip+0xfffffffffffc5961]        # 0x1001a98
 103c137:	nop
 103c138:	mov    rbx,QWORD PTR [rbp-0x40]
 103c13c:	test   rbx,rbx
 103c13f:	je     0x103c179
 103c141:	mov    eax,esi
 103c143:	lock xadd DWORD PTR [rbx+0x10],eax
 103c148:	dec    eax
 103c14a:	jne    0x103c175
 103c14c:	test   rbx,rbx
 103c14f:	je     0x103c175
 103c151:	mov    rcx,QWORD PTR [rbx]
 103c154:	test   rcx,rcx
 103c157:	je     0x103c15f
 103c159:	call   QWORD PTR [rip+0xfffffffffffc56d9]        # 0x1001838
 103c15f:	mov    rcx,QWORD PTR [rbx+0x8]
 103c163:	test   rcx,rcx
 103c166:	je     0x103c16d
 103c168:	call   0x103f9c6
 103c16d:	mov    rcx,rbx
 103c170:	call   0x103f95a
 103c175:	mov    QWORD PTR [rbp-0x40],rdi
 103c179:	mov    rcx,QWORD PTR [rbp+0x30]
 103c17d:	test   rcx,rcx
 103c180:	je     0x103c189
 103c182:	mov    rax,QWORD PTR [rcx]
 103c185:	call   QWORD PTR [rax+0x10]
 103c188:	nop
 103c189:	mov    rcx,QWORD PTR [rbp+0x0]
 103c18d:	test   rcx,rcx
 103c190:	je     0x103c198
 103c192:	mov    rax,QWORD PTR [rcx]
 103c195:	call   QWORD PTR [rax+0x10]
 103c198:	lea    rax,[rbp+0x50]
 103c19c:	mov    QWORD PTR [rsp+0x48],rax
 103c1a1:	lea    rdx,[rip+0xfffffffffffcbd00]        # 0x1007ea8
 103c1a8:	lea    rcx,[rbp+0x50]
 103c1ac:	call   0x10362b0
 103c1b1:	mov    rbx,rax
 103c1b4:	mov    rcx,QWORD PTR [r14]
 103c1b7:	test   rcx,rcx
 103c1ba:	jne    0x103c1c7
 103c1bc:	mov    ecx,0x80004003
 103c1c1:	call   0x1049210
 103c1c6:	int3   
 103c1c7:	lea    rdx,[rbp+0x40]
 103c1cb:	call   0x10365a0
 103c1d0:	nop
 103c1d1:	mov    rcx,QWORD PTR [rax]
 103c1d4:	test   rcx,rcx
 103c1d7:	jne    0x103c1e4
 103c1d9:	mov    ecx,0x80004003
 103c1de:	call   0x1049210
 103c1e3:	nop
 103c1e4:	mov    r8,rbx
 103c1e7:	lea    rdx,[rbp+0x10]
 103c1eb:	call   0x10368f0
 103c1f0:	nop
 103c1f1:	mov    rcx,QWORD PTR [rax]
 103c1f4:	test   rcx,rcx
 103c1f7:	jne    0x103c204
 103c1f9:	mov    ecx,0x80004003
 103c1fe:	call   0x1049210
 103c203:	int3   
 103c204:	lea    rdx,[rbp-0x78]
 103c208:	call   0x1036620
 103c20d:	nop
 103c20e:	mov    rdx,QWORD PTR [rax]
 103c211:	test   rdx,rdx
 103c214:	je     0x103c21b
 103c216:	mov    rdx,QWORD PTR [rdx]
 103c219:	jmp    0x103c21e
 103c21b:	mov    rdx,rdi
 103c21e:	lea    rcx,[rsp+0x78]
 103c223:	call   QWORD PTR [rip+0xfffffffffffc5887]        # 0x1001ab0
 103c229:	nop
 103c22a:	mov    rbx,QWORD PTR [rbp-0x78]
 103c22e:	test   rbx,rbx
 103c231:	je     0x103c26b
 103c233:	mov    eax,esi
 103c235:	lock xadd DWORD PTR [rbx+0x10],eax
 103c23a:	dec    eax
 103c23c:	jne    0x103c267
 103c23e:	test   rbx,rbx
 103c241:	je     0x103c267
 103c243:	mov    rcx,QWORD PTR [rbx]
 103c246:	test   rcx,rcx
 103c249:	je     0x103c251
 103c24b:	call   QWORD PTR [rip+0xfffffffffffc55e7]        # 0x1001838
 103c251:	mov    rcx,QWORD PTR [rbx+0x8]
 103c255:	test   rcx,rcx
 103c258:	je     0x103c25f
 103c25a:	call   0x103f9c6
 103c25f:	mov    rcx,rbx
 103c262:	call   0x103f95a
 103c267:	mov    QWORD PTR [rbp-0x78],rdi
 103c26b:	mov    rcx,QWORD PTR [rbp+0x10]
 103c26f:	test   rcx,rcx
 103c272:	je     0x103c27b
 103c274:	mov    rax,QWORD PTR [rcx]
 103c277:	call   QWORD PTR [rax+0x10]
 103c27a:	nop
 103c27b:	mov    rcx,QWORD PTR [rbp+0x40]
 103c27f:	test   rcx,rcx
 103c282:	je     0x103c28a
 103c284:	mov    rax,QWORD PTR [rcx]
 103c287:	call   QWORD PTR [rax+0x10]
 103c28a:	lea    rax,[rbp+0x20]
 103c28e:	mov    QWORD PTR [rsp+0x48],rax
 103c293:	lea    rdx,[rip+0xfffffffffffcbc26]        # 0x1007ec0
 103c29a:	lea    rcx,[rbp+0x20]
 103c29e:	call   0x10362b0
 103c2a3:	mov    rbx,rax
 103c2a6:	mov    rcx,QWORD PTR [r14]
 103c2a9:	test   rcx,rcx
 103c2ac:	jne    0x103c2b9
 103c2ae:	mov    ecx,0x80004003
 103c2b3:	call   0x1049210
 103c2b8:	int3   
 103c2b9:	lea    rdx,[rbp-0x18]
 103c2bd:	call   0x10365a0
 103c2c2:	nop
 103c2c3:	mov    rcx,QWORD PTR [rax]
 103c2c6:	test   rcx,rcx
 103c2c9:	jne    0x103c2d6
 103c2cb:	mov    ecx,0x80004003
 103c2d0:	call   0x1049210
 103c2d5:	nop
 103c2d6:	mov    r8,rbx
 103c2d9:	lea    rdx,[rbp-0x28]
 103c2dd:	call   0x10368f0
 103c2e2:	nop
 103c2e3:	mov    rcx,QWORD PTR [rax]
 103c2e6:	test   rcx,rcx
 103c2e9:	jne    0x103c2f6
 103c2eb:	mov    ecx,0x80004003
 103c2f0:	call   0x1049210
 103c2f5:	int3   
 103c2f6:	lea    rdx,[rbp-0x68]
 103c2fa:	call   0x1036620
 103c2ff:	nop
 103c300:	mov    rdx,QWORD PTR [rax]
 103c303:	test   rdx,rdx
 103c306:	je     0x103c30d
 103c308:	mov    rdx,QWORD PTR [rdx]
 103c30b:	jmp    0x103c310
 103c30d:	mov    rdx,rdi
 103c310:	lea    rcx,[rsp+0x68]
 103c315:	call   QWORD PTR [rip+0xfffffffffffc5795]        # 0x1001ab0
 103c31b:	nop
 103c31c:	mov    rbx,QWORD PTR [rbp-0x68]
 103c320:	test   rbx,rbx
 103c323:	je     0x103c35d
 103c325:	mov    eax,esi
 103c327:	lock xadd DWORD PTR [rbx+0x10],eax
 103c32c:	dec    eax
 103c32e:	jne    0x103c359
 103c330:	test   rbx,rbx
 103c333:	je     0x103c359
 103c335:	mov    rcx,QWORD PTR [rbx]
 103c338:	test   rcx,rcx
 103c33b:	je     0x103c343
 103c33d:	call   QWORD PTR [rip+0xfffffffffffc54f5]        # 0x1001838
 103c343:	mov    rcx,QWORD PTR [rbx+0x8]
 103c347:	test   rcx,rcx
 103c34a:	je     0x103c351
 103c34c:	call   0x103f9c6
 103c351:	mov    rcx,rbx
 103c354:	call   0x103f95a
 103c359:	mov    QWORD PTR [rbp-0x68],rdi
 103c35d:	mov    rcx,QWORD PTR [rbp-0x28]
 103c361:	test   rcx,rcx
 103c364:	je     0x103c36d
 103c366:	mov    rax,QWORD PTR [rcx]
 103c369:	call   QWORD PTR [rax+0x10]
 103c36c:	nop
 103c36d:	mov    rcx,QWORD PTR [rbp-0x18]
 103c371:	test   rcx,rcx
 103c374:	je     0x103c37c
 103c376:	mov    rax,QWORD PTR [rcx]
 103c379:	call   QWORD PTR [rax+0x10]
 103c37c:	lea    rax,[rbp-0x8]
 103c380:	mov    QWORD PTR [rsp+0x48],rax
 103c385:	lea    rdx,[rip+0xfffffffffffcbb4c]        # 0x1007ed8
 103c38c:	lea    rcx,[rbp-0x8]
 103c390:	call   0x10362b0
 103c395:	mov    rbx,rax
 103c398:	mov    rcx,QWORD PTR [r14]
 103c39b:	test   rcx,rcx
 103c39e:	jne    0x103c3ab
 103c3a0:	mov    ecx,0x80004003
 103c3a5:	call   0x1049210
 103c3aa:	int3   
 103c3ab:	lea    rdx,[rbp+0x18]
 103c3af:	call   0x10365a0
 103c3b4:	nop
 103c3b5:	mov    rcx,QWORD PTR [rax]
 103c3b8:	test   rcx,rcx
 103c3bb:	jne    0x103c3c8
 103c3bd:	mov    ecx,0x80004003
 103c3c2:	call   0x1049210
 103c3c7:	nop
 103c3c8:	mov    r8,rbx
 103c3cb:	lea    rdx,[rbp+0x8]
 103c3cf:	call   0x10368f0
 103c3d4:	nop
 103c3d5:	mov    rcx,QWORD PTR [rax]
 103c3d8:	test   rcx,rcx
 103c3db:	jne    0x103c3e8
 103c3dd:	mov    ecx,0x80004003
 103c3e2:	call   0x1049210
 103c3e7:	int3   
 103c3e8:	lea    rdx,[rbp-0x58]
 103c3ec:	call   0x1036620
 103c3f1:	nop
 103c3f2:	mov    rdx,QWORD PTR [rax]
 103c3f5:	test   rdx,rdx
 103c3f8:	je     0x103c3ff
 103c3fa:	mov    rdx,QWORD PTR [rdx]
 103c3fd:	jmp    0x103c402
 103c3ff:	mov    rdx,rdi
 103c402:	lea    rcx,[rsp+0x60]
 103c407:	call   QWORD PTR [rip+0xfffffffffffc56a3]        # 0x1001ab0
 103c40d:	nop
 103c40e:	mov    rbx,QWORD PTR [rbp-0x58]
 103c412:	test   rbx,rbx
 103c415:	je     0x103c44f
 103c417:	mov    eax,esi
 103c419:	lock xadd DWORD PTR [rbx+0x10],eax
 103c41e:	dec    eax
 103c420:	jne    0x103c44b
 103c422:	test   rbx,rbx
 103c425:	je     0x103c44b
 103c427:	mov    rcx,QWORD PTR [rbx]
 103c42a:	test   rcx,rcx
 103c42d:	je     0x103c435
 103c42f:	call   QWORD PTR [rip+0xfffffffffffc5403]        # 0x1001838
 103c435:	mov    rcx,QWORD PTR [rbx+0x8]
 103c439:	test   rcx,rcx
 103c43c:	je     0x103c443
 103c43e:	call   0x103f9c6
 103c443:	mov    rcx,rbx
 103c446:	call   0x103f95a
 103c44b:	mov    QWORD PTR [rbp-0x58],rdi
 103c44f:	mov    rcx,QWORD PTR [rbp+0x8]
 103c453:	test   rcx,rcx
 103c456:	je     0x103c45f
 103c458:	mov    rax,QWORD PTR [rcx]
 103c45b:	call   QWORD PTR [rax+0x10]
 103c45e:	nop
 103c45f:	mov    rcx,QWORD PTR [rbp+0x18]
 103c463:	test   rcx,rcx
 103c466:	je     0x103c46e
 103c468:	mov    rax,QWORD PTR [rcx]
 103c46b:	call   QWORD PTR [rax+0x10]
 103c46e:	mov    rbx,QWORD PTR [r15]
 103c471:	lea    rcx,[rsp+0x58]
 103c476:	call   QWORD PTR [rip+0xfffffffffffc566c]        # 0x1001ae8
 103c47c:	mov    rdx,rax
 103c47f:	mov    rcx,r15
 103c482:	call   QWORD PTR [rbx+0x30]
 103c485:	mov    r12d,eax
 103c488:	test   eax,eax
 103c48a:	jne    0x103c519
 103c490:	mov    rax,QWORD PTR [r13+0x8]
 103c494:	movsxd rcx,DWORD PTR [rax+0x4]
 103c498:	add    rcx,0x8
 103c49c:	add    rcx,r13
 103c49f:	mov    rax,QWORD PTR [rcx]
 103c4a2:	mov    BYTE PTR [rsp+0x28],0x1
 103c4a7:	mov    BYTE PTR [rsp+0x20],0x1
 103c4ac:	lea    r9d,[r12+0x2]
 103c4b1:	xor    r8d,r8d
 103c4b4:	mov    edx,0xc000c408
 103c4b9:	call   QWORD PTR [rax]
 103c4bb:	nop
 103c4bc:	lea    rcx,[rsp+0x60]
 103c4c1:	call   QWORD PTR [rip+0xfffffffffffc55e1]        # 0x1001aa8
 103c4c7:	nop
 103c4c8:	lea    rcx,[rsp+0x68]
 103c4cd:	call   QWORD PTR [rip+0xfffffffffffc55d5]        # 0x1001aa8
 103c4d3:	nop
 103c4d4:	lea    rcx,[rsp+0x78]
 103c4d9:	call   QWORD PTR [rip+0xfffffffffffc55c9]        # 0x1001aa8
 103c4df:	nop
 103c4e0:	lea    rcx,[rsp+0x40]
 103c4e5:	call   QWORD PTR [rip+0xfffffffffffc55bd]        # 0x1001aa8
 103c4eb:	nop
 103c4ec:	lea    rcx,[rsp+0x50]
 103c4f1:	call   QWORD PTR [rip+0xfffffffffffc55b1]        # 0x1001aa8
 103c4f7:	nop
 103c4f8:	lea    rcx,[rsp+0x58]
 103c4fd:	call   QWORD PTR [rip+0xfffffffffffc55a5]        # 0x1001aa8
 103c503:	nop
 103c504:	mov    rcx,QWORD PTR [r14]
 103c507:	test   rcx,rcx
 103c50a:	je     0x103c512
 103c50c:	mov    rax,QWORD PTR [rcx]
 103c50f:	call   QWORD PTR [rax+0x10]
 103c512:	xor    al,al
 103c514:	jmp    0x103c852
 103c519:	mov    r13d,edi
 103c51c:	cmp    eax,0x2
 103c51f:	jne    0x103c657
 103c525:	lea    rax,[rbp+0x28]
 103c529:	mov    QWORD PTR [rsp+0x48],rax
 103c52e:	lea    rdx,[rip+0xfffffffffffcb9b3]        # 0x1007ee8
 103c535:	lea    rcx,[rbp+0x28]
 103c539:	call   0x10362b0
 103c53e:	mov    rbx,rax
 103c541:	mov    rcx,QWORD PTR [r14]
 103c544:	test   rcx,rcx
 103c547:	jne    0x103c554
 103c549:	mov    ecx,0x80004003
 103c54e:	call   0x1049210
 103c553:	int3   
 103c554:	lea    rdx,[rbp+0x38]
 103c558:	call   0x10365a0
 103c55d:	nop
 103c55e:	mov    rcx,QWORD PTR [rax]
 103c561:	test   rcx,rcx
 103c564:	jne    0x103c571
 103c566:	mov    ecx,0x80004003
 103c56b:	call   0x1049210
 103c570:	nop
 103c571:	mov    r8,rbx
 103c574:	lea    rdx,[rsp+0x70]
 103c579:	call   0x10368f0
 103c57e:	nop
 103c57f:	mov    rcx,QWORD PTR [rbp+0x38]
 103c583:	test   rcx,rcx
 103c586:	je     0x103c58e
 103c588:	mov    rax,QWORD PTR [rcx]
 103c58b:	call   QWORD PTR [rax+0x10]
 103c58e:	mov    rcx,QWORD PTR [rsp+0x70]
 103c593:	test   rcx,rcx
 103c596:	sete   al
 103c599:	test   al,al
 103c59b:	sete   al
 103c59e:	test   al,al
 103c5a0:	je     0x103c647
 103c5a6:	test   rcx,rcx
 103c5a9:	jne    0x103c5b6
 103c5ab:	mov    ecx,0x80004003
 103c5b0:	call   0x1049210
 103c5b5:	int3   
 103c5b6:	lea    rdx,[rbp-0x48]
 103c5ba:	call   0x1036620
 103c5bf:	nop
 103c5c0:	mov    rcx,QWORD PTR [rax]
 103c5c3:	test   rcx,rcx
 103c5c6:	je     0x103c5cd
 103c5c8:	mov    rcx,QWORD PTR [rcx]
 103c5cb:	jmp    0x103c5d0
 103c5cd:	mov    rcx,rdi
 103c5d0:	call   QWORD PTR [rip+0xfffffffffffc516a]        # 0x1001740
 103c5d6:	mov    r13d,eax
 103c5d9:	mov    rbx,QWORD PTR [rbp-0x48]
 103c5dd:	test   rbx,rbx
 103c5e0:	je     0x103c618
 103c5e2:	lock xadd DWORD PTR [rbx+0x10],esi
 103c5e7:	dec    esi
 103c5e9:	jne    0x103c614
 103c5eb:	test   rbx,rbx
 103c5ee:	je     0x103c614
 103c5f0:	mov    rcx,QWORD PTR [rbx]
 103c5f3:	test   rcx,rcx
 103c5f6:	je     0x103c5fe
 103c5f8:	call   QWORD PTR [rip+0xfffffffffffc523a]        # 0x1001838
 103c5fe:	mov    rcx,QWORD PTR [rbx+0x8]
 103c602:	test   rcx,rcx
 103c605:	je     0x103c60c
 103c607:	call   0x103f9c6
 103c60c:	mov    rcx,rbx
 103c60f:	call   0x103f95a
 103c614:	mov    QWORD PTR [rbp-0x48],rdi
 103c618:	mov    rcx,QWORD PTR [rsp+0x70]
 103c61d:	test   rcx,rcx
 103c620:	sete   al
 103c623:	test   al,al
 103c625:	sete   al
 103c628:	test   al,al
 103c62a:	je     0x103c647
 103c62c:	test   rcx,rcx
 103c62f:	jne    0x103c63c
 103c631:	mov    ecx,0x80004003
 103c636:	call   0x1049210
 103c63b:	int3   
 103c63c:	mov    rax,QWORD PTR [rcx]
 103c63f:	call   QWORD PTR [rax+0x10]
 103c642:	mov    QWORD PTR [rsp+0x70],rdi
 103c647:	mov    rcx,QWORD PTR [rsp+0x70]
 103c64c:	test   rcx,rcx
 103c64f:	je     0x103c657
 103c651:	mov    rax,QWORD PTR [rcx]
 103c654:	call   QWORD PTR [rax+0x10]
 103c657:	mov    rbx,QWORD PTR [r15]
 103c65a:	lea    rcx,[rsp+0x60]
 103c65f:	call   QWORD PTR [rip+0xfffffffffffc5483]        # 0x1001ae8
 103c665:	mov    rdx,rax
 103c668:	mov    rcx,r15
 103c66b:	call   QWORD PTR [rbx+0x38]
 103c66e:	mov    r15d,eax
 103c671:	cmp    eax,0x3
 103c674:	jne    0x103c70d
 103c67a:	mov    rdx,QWORD PTR [rbp+0xc8]
 103c681:	mov    rax,QWORD PTR [rdx+0x8]
 103c685:	movsxd rcx,DWORD PTR [rax+0x4]
 103c689:	add    rcx,0x8
 103c68d:	add    rcx,rdx
 103c690:	mov    rax,QWORD PTR [rcx]
 103c693:	mov    BYTE PTR [rsp+0x28],0x1
 103c698:	mov    BYTE PTR [rsp+0x20],0x1
 103c69d:	lea    r9d,[r15-0x1]
 103c6a1:	xor    r8d,r8d
 103c6a4:	mov    edx,0xc000c410
 103c6a9:	call   QWORD PTR [rax]
 103c6ab:	nop
 103c6ac:	lea    rcx,[rsp+0x60]
 103c6b1:	call   QWORD PTR [rip+0xfffffffffffc53f1]        # 0x1001aa8
 103c6b7:	nop
 103c6b8:	lea    rcx,[rsp+0x68]
 103c6bd:	call   QWORD PTR [rip+0xfffffffffffc53e5]        # 0x1001aa8
 103c6c3:	nop
 103c6c4:	lea    rcx,[rsp+0x78]
 103c6c9:	call   QWORD PTR [rip+0xfffffffffffc53d9]        # 0x1001aa8
 103c6cf:	nop
 103c6d0:	lea    rcx,[rsp+0x40]
 103c6d5:	call   QWORD PTR [rip+0xfffffffffffc53cd]        # 0x1001aa8
 103c6db:	nop
 103c6dc:	lea    rcx,[rsp+0x50]
 103c6e1:	call   QWORD PTR [rip+0xfffffffffffc53c1]        # 0x1001aa8
 103c6e7:	nop
 103c6e8:	lea    rcx,[rsp+0x58]
 103c6ed:	call   QWORD PTR [rip+0xfffffffffffc53b5]        # 0x1001aa8
 103c6f3:	nop
 103c6f4:	mov    rcx,QWORD PTR [r14]
 103c6f7:	test   rcx,rcx
 103c6fa:	je     0x103c512
 103c700:	mov    rax,QWORD PTR [rcx]
 103c703:	call   QWORD PTR [rax+0x10]
 103c706:	xor    al,al
 103c708:	jmp    0x103c852
 103c70d:	mov    r8d,0x1
 103c713:	lea    rdx,[rbp+0x48]
 103c717:	lea    rcx,[rsp+0x40]
 103c71c:	call   QWORD PTR [rip+0xfffffffffffc5326]        # 0x1001a48
 103c722:	nop
 103c723:	lea    rdx,[rip+0xfffffffffffc66da]        # 0x1002e04
 103c72a:	mov    rcx,rax
 103c72d:	call   QWORD PTR [rip+0xfffffffffffc52cd]        # 0x1001a00
 103c733:	test   eax,eax
 103c735:	sete   bl
 103c738:	lea    rcx,[rbp+0x48]
 103c73c:	call   QWORD PTR [rip+0xfffffffffffc5366]        # 0x1001aa8
 103c742:	test   bl,bl
 103c744:	je     0x103c784
 103c746:	lea    rcx,[rsp+0x40]
 103c74b:	call   QWORD PTR [rip+0xfffffffffffc539f]        # 0x1001af0
 103c751:	lea    r9d,[rax-0x2]
 103c755:	mov    r8d,0x1
 103c75b:	lea    rdx,[rbp-0x38]
 103c75f:	lea    rcx,[rsp+0x40]
 103c764:	call   QWORD PTR [rip+0xfffffffffffc51ae]        # 0x1001918
 103c76a:	nop
 103c76b:	mov    rdx,rax
 103c76e:	lea    rcx,[rsp+0x40]
 103c773:	call   QWORD PTR [rip+0xfffffffffffc5327]        # 0x1001aa0
 103c779:	nop
 103c77a:	lea    rcx,[rbp-0x38]
 103c77e:	call   QWORD PTR [rip+0xfffffffffffc5324]        # 0x1001aa8
 103c784:	lea    r8,[rip+0xfffffffffffc6679]        # 0x1002e04
 103c78b:	lea    rdx,[rip+0xfffffffffffc66be]        # 0x1002e50
 103c792:	lea    rcx,[rsp+0x40]
 103c797:	call   QWORD PTR [rip+0xfffffffffffc5213]        # 0x10019b0
 103c79d:	mov    rsi,QWORD PTR [rbp+0xc8]
 103c7a4:	mov    rsi,QWORD PTR [rsi]
 103c7a7:	lea    rcx,[rsp+0x40]
 103c7ac:	call   QWORD PTR [rip+0xfffffffffffc5336]        # 0x1001ae8
 103c7b2:	mov    rbx,rax
 103c7b5:	lea    rcx,[rsp+0x68]
 103c7ba:	call   QWORD PTR [rip+0xfffffffffffc5328]        # 0x1001ae8
 103c7c0:	mov    rdi,rax
 103c7c3:	lea    rcx,[rsp+0x78]
 103c7c8:	call   QWORD PTR [rip+0xfffffffffffc531a]        # 0x1001ae8
 103c7ce:	mov    rdx,rax
 103c7d1:	mov    DWORD PTR [rsp+0x38],r13d
 103c7d6:	mov    QWORD PTR [rsp+0x30],rbx
 103c7db:	mov    DWORD PTR [rsp+0x28],r15d
 103c7e0:	mov    DWORD PTR [rsp+0x20],r12d
 103c7e5:	mov    r9d,DWORD PTR [rbp+0xd8]
 103c7ec:	mov    r8,rdi
 103c7ef:	mov    rcx,QWORD PTR [rbp+0xc8]
 103c7f6:	call   QWORD PTR [rsi+0x58]
 103c7f9:	nop
 103c7fa:	lea    rcx,[rsp+0x60]
 103c7ff:	call   QWORD PTR [rip+0xfffffffffffc52a3]        # 0x1001aa8
 103c805:	nop
 103c806:	lea    rcx,[rsp+0x68]
 103c80b:	call   QWORD PTR [rip+0xfffffffffffc5297]        # 0x1001aa8
 103c811:	nop
 103c812:	lea    rcx,[rsp+0x78]
 103c817:	call   QWORD PTR [rip+0xfffffffffffc528b]        # 0x1001aa8
 103c81d:	nop
 103c81e:	lea    rcx,[rsp+0x40]
 103c823:	call   QWORD PTR [rip+0xfffffffffffc527f]        # 0x1001aa8
 103c829:	nop
 103c82a:	lea    rcx,[rsp+0x50]
 103c82f:	call   QWORD PTR [rip+0xfffffffffffc5273]        # 0x1001aa8
 103c835:	nop
 103c836:	lea    rcx,[rsp+0x58]
 103c83b:	call   QWORD PTR [rip+0xfffffffffffc5267]        # 0x1001aa8
 103c841:	nop
 103c842:	mov    rcx,QWORD PTR [r14]
 103c845:	test   rcx,rcx
 103c848:	je     0x103c850
 103c84a:	mov    rax,QWORD PTR [rcx]
 103c84d:	call   QWORD PTR [rax+0x10]
 103c850:	mov    al,0x1
 103c852:	add    rsp,0x178
 103c859:	pop    r15
 103c85b:	pop    r14
 103c85d:	pop    r13
 103c85f:	pop    r12
 103c861:	pop    rdi
 103c862:	pop    rsi
 103c863:	pop    rbx
 103c864:	pop    rbp
 103c865:	ret    
 103c866:	int3   
 103c867:	int3   
 103c868:	int3   
 103c869:	int3   
 103c86a:	int3   
 103c86b:	int3   
 103c86c:	int3   
 103c86d:	int3   
 103c86e:	int3   
 103c86f:	int3   
 103c870:	mov    rax,rsp
 103c873:	mov    QWORD PTR [rax+0x20],r9
 103c877:	mov    QWORD PTR [rax+0x18],r8
 103c87b:	push   rbp
 103c87c:	push   rsi
 103c87d:	push   rdi
 103c87e:	push   r12
 103c880:	push   r13
 103c882:	push   r14
 103c884:	push   r15
 103c886:	lea    rbp,[rax-0x47]
 103c88a:	sub    rsp,0xb0
 103c891:	mov    QWORD PTR [rbp-0x1],0xfffffffffffffffe
 103c899:	mov    QWORD PTR [rax+0x8],rbx
 103c89d:	mov    rsi,r9
 103c8a0:	mov    r14,r8
 103c8a3:	mov    rdi,rdx
 103c8a6:	mov    r15,rcx
 103c8a9:	mov    rcx,r8
 103c8ac:	call   QWORD PTR [rip+0xfffffffffffc523e]        # 0x1001af0
 103c8b2:	cmp    eax,0x1
 103c8b5:	jne    0x103cb46
 103c8bb:	xor    edx,edx
 103c8bd:	mov    rcx,r14
 103c8c0:	call   QWORD PTR [rip+0xfffffffffffc510a]        # 0x10019d0
 103c8c6:	cmp    ax,0x2a
 103c8ca:	jne    0x103cb46
 103c8d0:	lea    rax,[rip+0xfffffffffffc5549]        # 0x1001e20
 103c8d7:	mov    QWORD PTR [rbp-0x41],rax
 103c8db:	xor    r12d,r12d
 103c8de:	mov    QWORD PTR [rbp-0x29],r12
 103c8e2:	mov    QWORD PTR [rbp-0x21],r12
 103c8e6:	mov    QWORD PTR [rbp-0x31],r12
 103c8ea:	mov    QWORD PTR [rbp-0x39],r12
 103c8ee:	mov    QWORD PTR [rbp-0x19],r12
 103c8f2:	mov    QWORD PTR [rbp-0x11],0xa
 103c8fa:	mov    rbx,QWORD PTR [rbp-0x39]
 103c8fe:	test   rbx,rbx
 103c901:	je     0x103c915
 103c903:	lea    rcx,[rbx+0x10]
 103c907:	call   QWORD PTR [rip+0xfffffffffffc519b]        # 0x1001aa8
 103c90d:	mov    rbx,QWORD PTR [rbx]
 103c910:	test   rbx,rbx
 103c913:	jne    0x103c903
 103c915:	mov    QWORD PTR [rbp-0x29],r12
 103c919:	mov    QWORD PTR [rbp-0x21],r12
 103c91d:	mov    QWORD PTR [rbp-0x31],r12
 103c921:	mov    QWORD PTR [rbp-0x39],r12
 103c925:	mov    rcx,QWORD PTR [rbp-0x19]
 103c929:	call   0x103f9ae
 103c92e:	mov    QWORD PTR [rbp-0x19],r12
 103c932:	lea    rax,[rbp-0x61]
 103c936:	mov    QWORD PTR [rbp-0x51],rax
 103c93a:	mov    rdx,rdi
 103c93d:	lea    rcx,[rbp-0x61]
 103c941:	call   QWORD PTR [rip+0xfffffffffffc5169]        # 0x1001ab0
 103c947:	nop
 103c948:	movzx  r9d,BYTE PTR [rbp+0x7f]
 103c94d:	mov    r8,QWORD PTR [r15+0x18]
 103c951:	lea    rdx,[rbp-0x41]
 103c955:	mov    rcx,rax
 103c958:	call   0x1014230
 103c95d:	mov    rcx,rsi
 103c960:	call   QWORD PTR [rip+0xfffffffffffc5182]        # 0x1001ae8
 103c966:	mov    rcx,rax
 103c969:	lea    rdx,[rip+0xfffffffffffc60f8]        # 0x1002a68
 103c970:	call   QWORD PTR [rip+0xfffffffffffc4d5a]        # 0x10016d0
 103c976:	test   eax,eax
 103c978:	jne    0x103c9e5
 103c97a:	mov    rdi,QWORD PTR [rbp-0x39]
 103c97e:	test   rdi,rdi
 103c981:	je     0x103cafe
 103c987:	lea    rax,[rbp-0x61]
 103c98b:	mov    QWORD PTR [rbp-0x51],rax
 103c98f:	lea    rax,[rbp-0x59]
 103c993:	mov    QWORD PTR [rbp-0x49],rax
 103c997:	mov    r12,QWORD PTR [rbp+0x77]
 103c99b:	mov    r13,QWORD PTR [rbp+0x6f]
 103c99f:	nop
 103c9a0:	lea    rdx,[rdi+0x10]
 103c9a4:	lea    rcx,[rbp-0x61]
 103c9a8:	call   QWORD PTR [rip+0xfffffffffffc500a]        # 0x10019b8
 103c9ae:	mov    rbx,rax
 103c9b1:	mov    rdx,r14
 103c9b4:	lea    rcx,[rbp-0x59]
 103c9b8:	call   QWORD PTR [rip+0xfffffffffffc4ffa]        # 0x10019b8
 103c9be:	nop
 103c9bf:	mov    QWORD PTR [rsp+0x20],r12
 103c9c4:	mov    r9,r13
 103c9c7:	mov    r8,rbx
 103c9ca:	mov    rdx,rax
 103c9cd:	mov    rcx,r15
 103c9d0:	call   0x103cd90
 103c9d5:	mov    rdi,QWORD PTR [rdi]
 103c9d8:	test   rdi,rdi
 103c9db:	jne    0x103c9a0
 103c9dd:	xor    r12d,r12d
 103c9e0:	jmp    0x103cafe
 103c9e5:	mov    rbx,QWORD PTR [rbp-0x39]
 103c9e9:	test   rbx,rbx
 103c9ec:	je     0x103ca7f
 103c9f2:	lea    rdi,[rbx+0x10]
 103c9f6:	test   rdi,rdi
 103c9f9:	je     0x103ca79
 103c9fb:	test   rsi,rsi
 103c9fe:	je     0x103ca79
 103ca00:	mov    rcx,rsi
 103ca03:	call   QWORD PTR [rip+0xfffffffffffc50df]        # 0x1001ae8
 103ca09:	mov    rdx,rax
 103ca0c:	mov    rcx,rdi
 103ca0f:	call   QWORD PTR [rip+0xfffffffffffc4feb]        # 0x1001a00
 103ca15:	mov    ecx,r12d
 103ca18:	test   eax,eax
 103ca1a:	sete   cl
 103ca1d:	test   ecx,ecx
 103ca1f:	jne    0x103ca26
 103ca21:	mov    rbx,QWORD PTR [rbx]
 103ca24:	jmp    0x103c9e9
 103ca26:	test   rbx,rbx
 103ca29:	je     0x103ca7f
 103ca2b:	lea    rax,[rbp-0x61]
 103ca2f:	mov    QWORD PTR [rbp-0x49],rax
 103ca33:	lea    rax,[rbp-0x59]
 103ca37:	mov    QWORD PTR [rbp-0x51],rax
 103ca3b:	mov    rdx,rsi
 103ca3e:	lea    rcx,[rbp-0x61]
 103ca42:	call   QWORD PTR [rip+0xfffffffffffc4f70]        # 0x10019b8
 103ca48:	mov    rbx,rax
 103ca4b:	mov    rdx,r14
 103ca4e:	lea    rcx,[rbp-0x59]
 103ca52:	call   QWORD PTR [rip+0xfffffffffffc4f60]        # 0x10019b8
 103ca58:	nop
 103ca59:	mov    rcx,QWORD PTR [rbp+0x77]
 103ca5d:	mov    QWORD PTR [rsp+0x20],rcx
 103ca62:	mov    r9,QWORD PTR [rbp+0x6f]
 103ca66:	mov    r8,rbx
 103ca69:	mov    rdx,rax
 103ca6c:	mov    rcx,r15
 103ca6f:	call   0x103cd90
 103ca74:	jmp    0x103cafe
 103ca79:	call   0x103f972
 103ca7e:	int3   
 103ca7f:	lea    rcx,[rbp-0x59]
 103ca83:	call   QWORD PTR [rip+0xfffffffffffc5037]        # 0x1001ac0
 103ca89:	nop
 103ca8a:	mov    edx,0xc000c4a7
 103ca8f:	lea    rcx,[rbp-0x61]
 103ca93:	call   0x10132d0
 103ca98:	nop
 103ca99:	mov    rcx,rax
 103ca9c:	call   QWORD PTR [rip+0xfffffffffffc5046]        # 0x1001ae8
 103caa2:	mov    rdx,rax
 103caa5:	mov    r8,QWORD PTR [rsi]
 103caa8:	lea    rcx,[rbp-0x59]
 103caac:	call   QWORD PTR [rip+0xfffffffffffc4f8e]        # 0x1001a40
 103cab2:	nop
 103cab3:	lea    rcx,[rbp-0x61]
 103cab7:	call   QWORD PTR [rip+0xfffffffffffc4feb]        # 0x1001aa8
 103cabd:	mov    r11,QWORD PTR [r15+0x18]
 103cac1:	mov    rbx,QWORD PTR [r11]
 103cac4:	lea    rcx,[rbp-0x59]
 103cac8:	call   QWORD PTR [rip+0xfffffffffffc501a]        # 0x1001ae8
 103cace:	mov    r8,rax
 103cad1:	mov    BYTE PTR [rsp+0x30],0x1
 103cad6:	mov    BYTE PTR [rsp+0x28],0x1
 103cadb:	mov    DWORD PTR [rsp+0x20],0x2
 103cae3:	xor    r9d,r9d
 103cae6:	mov    edx,0xc000c4a7
 103caeb:	mov    rcx,QWORD PTR [r15+0x18]
 103caef:	call   QWORD PTR [rbx+0x8]
 103caf2:	nop
 103caf3:	lea    rcx,[rbp-0x59]
 103caf7:	call   QWORD PTR [rip+0xfffffffffffc4fab]        # 0x1001aa8
 103cafd:	nop
 103cafe:	lea    rax,[rip+0xfffffffffffc531b]        # 0x1001e20
 103cb05:	mov    QWORD PTR [rbp-0x41],rax
 103cb09:	mov    rbx,QWORD PTR [rbp-0x39]
 103cb0d:	test   rbx,rbx
 103cb10:	je     0x103cb24
 103cb12:	lea    rcx,[rbx+0x10]
 103cb16:	call   QWORD PTR [rip+0xfffffffffffc4f8c]        # 0x1001aa8
 103cb1c:	mov    rbx,QWORD PTR [rbx]
 103cb1f:	test   rbx,rbx
 103cb22:	jne    0x103cb12
 103cb24:	mov    QWORD PTR [rbp-0x29],r12
 103cb28:	mov    QWORD PTR [rbp-0x21],r12
 103cb2c:	mov    QWORD PTR [rbp-0x31],r12
 103cb30:	mov    QWORD PTR [rbp-0x39],r12
 103cb34:	mov    rcx,QWORD PTR [rbp-0x19]
 103cb38:	call   0x103f9ae
 103cb3d:	mov    QWORD PTR [rbp-0x19],r12
 103cb41:	jmp    0x103cd59
 103cb46:	lea    rcx,[rbp-0x59]
 103cb4a:	call   QWORD PTR [rip+0xfffffffffffc4f70]        # 0x1001ac0
 103cb50:	nop
 103cb51:	lea    rax,[rbp-0x61]
 103cb55:	mov    QWORD PTR [rbp-0x49],rax
 103cb59:	lea    rax,[rbp-0x51]
 103cb5d:	mov    QWORD PTR [rbp-0x9],rax
 103cb61:	mov    rdx,r14
 103cb64:	lea    rcx,[rbp-0x61]
 103cb68:	call   QWORD PTR [rip+0xfffffffffffc4e4a]        # 0x10019b8
 103cb6e:	mov    rbx,rax
 103cb71:	mov    rdx,rdi
 103cb74:	lea    rcx,[rbp-0x51]
 103cb78:	call   QWORD PTR [rip+0xfffffffffffc4f32]        # 0x1001ab0
 103cb7e:	nop
 103cb7f:	movzx  ecx,BYTE PTR [rbp+0x7f]
 103cb83:	mov    BYTE PTR [rsp+0x20],cl
 103cb87:	mov    r9,QWORD PTR [r15+0x18]
 103cb8b:	lea    r8,[rbp-0x59]
 103cb8f:	mov    rdx,rbx
 103cb92:	mov    rcx,rax
 103cb95:	call   0x1014570
 103cb9a:	test   al,al
 103cb9c:	je     0x103cccf
 103cba2:	mov    rcx,rsi
 103cba5:	call   QWORD PTR [rip+0xfffffffffffc4f3d]        # 0x1001ae8
 103cbab:	mov    rcx,rax
 103cbae:	lea    rdx,[rip+0xfffffffffffc5eb3]        # 0x1002a68
 103cbb5:	call   QWORD PTR [rip+0xfffffffffffc4b15]        # 0x10016d0
 103cbbb:	test   eax,eax
 103cbbd:	jne    0x103cbf0
 103cbbf:	lea    rax,[rbp-0x51]
 103cbc3:	mov    QWORD PTR [rbp-0x9],rax
 103cbc7:	lea    rax,[rbp-0x61]
 103cbcb:	mov    QWORD PTR [rbp-0x49],rax
 103cbcf:	lea    rdx,[rbp-0x59]
 103cbd3:	lea    rcx,[rbp-0x51]
 103cbd7:	call   QWORD PTR [rip+0xfffffffffffc4ddb]        # 0x10019b8
 103cbdd:	mov    rbx,rax
 103cbe0:	mov    rdx,r14
 103cbe3:	lea    rcx,[rbp-0x61]
 103cbe7:	call   QWORD PTR [rip+0xfffffffffffc4dcb]        # 0x10019b8
 103cbed:	nop
 103cbee:	jmp    0x103cc39
 103cbf0:	lea    rcx,[rbp-0x59]
 103cbf4:	call   QWORD PTR [rip+0xfffffffffffc4eee]        # 0x1001ae8
 103cbfa:	mov    rdx,rax
 103cbfd:	mov    rcx,rsi
 103cc00:	call   QWORD PTR [rip+0xfffffffffffc4e5a]        # 0x1001a60
 103cc06:	test   eax,eax
 103cc08:	jne    0x103cc59
 103cc0a:	lea    rax,[rbp-0x51]
 103cc0e:	mov    QWORD PTR [rbp-0x9],rax
 103cc12:	lea    rax,[rbp-0x61]
 103cc16:	mov    QWORD PTR [rbp-0x49],rax
 103cc1a:	lea    rdx,[rbp-0x59]
 103cc1e:	lea    rcx,[rbp-0x51]
 103cc22:	call   QWORD PTR [rip+0xfffffffffffc4d90]        # 0x10019b8
 103cc28:	mov    rbx,rax
 103cc2b:	mov    rdx,r14
 103cc2e:	lea    rcx,[rbp-0x61]
 103cc32:	call   QWORD PTR [rip+0xfffffffffffc4d80]        # 0x10019b8
 103cc38:	nop
 103cc39:	mov    rcx,QWORD PTR [rbp+0x77]
 103cc3d:	mov    QWORD PTR [rsp+0x20],rcx
 103cc42:	mov    r9,QWORD PTR [rbp+0x6f]
 103cc46:	mov    r8,rbx
 103cc49:	mov    rdx,rax
 103cc4c:	mov    rcx,r15
 103cc4f:	call   0x103cd90
 103cc54:	jmp    0x103cd4e
 103cc59:	lea    rcx,[rbp-0x61]
 103cc5d:	call   QWORD PTR [rip+0xfffffffffffc4e5d]        # 0x1001ac0
 103cc63:	nop
 103cc64:	mov    edx,0xc000c4a7
 103cc69:	lea    rcx,[rbp-0x51]
 103cc6d:	call   0x10132d0
 103cc72:	nop
 103cc73:	mov    rcx,rax
 103cc76:	call   QWORD PTR [rip+0xfffffffffffc4e6c]        # 0x1001ae8
 103cc7c:	mov    rdx,rax
 103cc7f:	mov    r8,QWORD PTR [rsi]
 103cc82:	lea    rcx,[rbp-0x61]
 103cc86:	call   QWORD PTR [rip+0xfffffffffffc4db4]        # 0x1001a40
 103cc8c:	nop
 103cc8d:	lea    rcx,[rbp-0x51]
 103cc91:	call   QWORD PTR [rip+0xfffffffffffc4e11]        # 0x1001aa8
 103cc97:	mov    r11,QWORD PTR [r15+0x18]
 103cc9b:	mov    rbx,QWORD PTR [r11]
 103cc9e:	lea    rcx,[rbp-0x61]
 103cca2:	call   QWORD PTR [rip+0xfffffffffffc4e40]        # 0x1001ae8
 103cca8:	mov    r8,rax
 103ccab:	mov    BYTE PTR [rsp+0x30],0x1
 103ccb0:	mov    BYTE PTR [rsp+0x28],0x1
 103ccb5:	mov    DWORD PTR [rsp+0x20],0x2
 103ccbd:	xor    r9d,r9d
 103ccc0:	mov    edx,0xc000c4a7
 103ccc5:	mov    rcx,QWORD PTR [r15+0x18]
 103ccc9:	call   QWORD PTR [rbx+0x8]
 103cccc:	nop
 103cccd:	jmp    0x103cd43
 103cccf:	lea    rcx,[rbp-0x61]
 103ccd3:	call   QWORD PTR [rip+0xfffffffffffc4de7]        # 0x1001ac0
 103ccd9:	nop
 103ccda:	mov    edx,0xc000c4a9
 103ccdf:	lea    rcx,[rbp-0x51]
 103cce3:	call   0x10132d0
 103cce8:	nop
 103cce9:	mov    rcx,rax
 103ccec:	call   QWORD PTR [rip+0xfffffffffffc4df6]        # 0x1001ae8
 103ccf2:	mov    rdx,rax
 103ccf5:	mov    r8,QWORD PTR [r14]
 103ccf8:	lea    rcx,[rbp-0x61]
 103ccfc:	call   QWORD PTR [rip+0xfffffffffffc4d3e]        # 0x1001a40
 103cd02:	nop
 103cd03:	lea    rcx,[rbp-0x51]
 103cd07:	call   QWORD PTR [rip+0xfffffffffffc4d9b]        # 0x1001aa8
 103cd0d:	mov    r11,QWORD PTR [r15+0x18]
 103cd11:	mov    rbx,QWORD PTR [r11]
 103cd14:	lea    rcx,[rbp-0x61]
 103cd18:	call   QWORD PTR [rip+0xfffffffffffc4dca]        # 0x1001ae8
 103cd1e:	mov    r8,rax
 103cd21:	mov    BYTE PTR [rsp+0x30],0x1
 103cd26:	mov    BYTE PTR [rsp+0x28],0x1
 103cd2b:	mov    DWORD PTR [rsp+0x20],0x2
 103cd33:	xor    r9d,r9d
 103cd36:	mov    edx,0xc000c4a9
 103cd3b:	mov    rcx,QWORD PTR [r15+0x18]
 103cd3f:	call   QWORD PTR [rbx+0x8]
 103cd42:	nop
 103cd43:	lea    rcx,[rbp-0x61]
 103cd47:	call   QWORD PTR [rip+0xfffffffffffc4d5b]        # 0x1001aa8
 103cd4d:	nop
 103cd4e:	lea    rcx,[rbp-0x59]
 103cd52:	call   QWORD PTR [rip+0xfffffffffffc4d50]        # 0x1001aa8
 103cd58:	nop
 103cd59:	mov    rcx,r14
 103cd5c:	call   QWORD PTR [rip+0xfffffffffffc4d46]        # 0x1001aa8
 103cd62:	nop
 103cd63:	mov    rcx,rsi
 103cd66:	mov    rbx,QWORD PTR [rsp+0xf0]
 103cd6e:	add    rsp,0xb0
 103cd75:	pop    r15
 103cd77:	pop    r14
 103cd79:	pop    r13
 103cd7b:	pop    r12
 103cd7d:	pop    rdi
 103cd7e:	pop    rsi
 103cd7f:	pop    rbp
 103cd80:	rex.W jmp QWORD PTR [rip+0xfffffffffffc4d21]        # 0x1001aa8
 103cd87:	int3   
 103cd88:	int3   
 103cd89:	int3   
 103cd8a:	int3   
 103cd8b:	int3   
 103cd8c:	int3   
 103cd8d:	int3   
 103cd8e:	int3   
 103cd8f:	int3   
 103cd90:	mov    rax,rsp
 103cd93:	mov    QWORD PTR [rax+0x18],r8
 103cd97:	mov    QWORD PTR [rax+0x10],rdx
 103cd9b:	push   rbp
 103cd9c:	push   rsi
 103cd9d:	push   rdi
 103cd9e:	push   r12
 103cda0:	push   r13
 103cda2:	push   r14
 103cda4:	push   r15
 103cda6:	lea    rbp,[rax-0x57]
 103cdaa:	sub    rsp,0xa0
 103cdb1:	mov    QWORD PTR [rbp+0xf],0xfffffffffffffffe
 103cdb9:	mov    QWORD PTR [rax+0x8],rbx
 103cdbd:	mov    rsi,r9
 103cdc0:	mov    r12,r8
 103cdc3:	mov    r13,rdx
 103cdc6:	lea    rax,[rip+0xfffffffffffcaf0b]        # 0x1007cd8
 103cdcd:	mov    QWORD PTR [rbp-0x29],rax
 103cdd1:	xor    r15d,r15d
 103cdd4:	mov    QWORD PTR [rbp-0x11],r15
 103cdd8:	mov    QWORD PTR [rbp-0x9],r15
 103cddc:	mov    QWORD PTR [rbp-0x19],r15
 103cde0:	mov    QWORD PTR [rbp-0x21],r15
 103cde4:	mov    QWORD PTR [rbp-0x1],r15
 103cde8:	mov    QWORD PTR [rbp+0x7],0xa
 103cdf0:	mov    QWORD PTR [rbp-0x61],rax
 103cdf4:	mov    QWORD PTR [rbp-0x49],r15
 103cdf8:	mov    QWORD PTR [rbp-0x41],r15
 103cdfc:	mov    QWORD PTR [rbp-0x51],r15
 103ce00:	mov    QWORD PTR [rbp-0x59],r15
 103ce04:	mov    QWORD PTR [rbp-0x39],r15
 103ce08:	mov    QWORD PTR [rbp-0x31],0xa
 103ce10:	mov    r14,QWORD PTR [rbp+0x7f]
 103ce14:	mov    rbx,QWORD PTR [r14+0x8]
 103ce18:	test   rbx,rbx
 103ce1b:	je     0x103d170
 103ce21:	lea    rdi,[rbx+0x10]
 103ce25:	test   rdi,rdi
 103ce28:	je     0x103d205
 103ce2e:	test   r12,r12
 103ce31:	je     0x103d205
 103ce37:	mov    rcx,r12
 103ce3a:	call   QWORD PTR [rip+0xfffffffffffc4ca8]        # 0x1001ae8
 103ce40:	mov    rdx,rax
 103ce43:	mov    rcx,rdi
 103ce46:	call   QWORD PTR [rip+0xfffffffffffc4bb4]        # 0x1001a00
 103ce4c:	mov    ecx,r15d
 103ce4f:	test   eax,eax
 103ce51:	sete   cl
 103ce54:	test   ecx,ecx
 103ce56:	jne    0x103ce5d
 103ce58:	mov    rbx,QWORD PTR [rbx]
 103ce5b:	jmp    0x103ce18
 103ce5d:	test   rbx,rbx
 103ce60:	je     0x103d170
 103ce66:	lea    rdx,[rip+0xfffffffffffc5bfb]        # 0x1002a68
 103ce6d:	mov    rcx,r13
 103ce70:	call   QWORD PTR [rip+0xfffffffffffc4bea]        # 0x1001a60
 103ce76:	test   eax,eax
 103ce78:	jne    0x103d19d
 103ce7e:	mov    rax,QWORD PTR [rbp-0x21]
 103ce82:	test   rax,rax
 103ce85:	je     0x103ce8f
 103ce87:	mov    rax,QWORD PTR [rax]
 103ce8a:	test   rax,rax
 103ce8d:	jne    0x103ce87
 103ce8f:	mov    QWORD PTR [rbp-0x11],r15
 103ce93:	mov    QWORD PTR [rbp-0x9],r15
 103ce97:	mov    QWORD PTR [rbp-0x19],r15
 103ce9b:	mov    QWORD PTR [rbp-0x21],r15
 103ce9f:	mov    rcx,QWORD PTR [rbp-0x1]
 103cea3:	call   0x103f9ae
 103cea8:	mov    QWORD PTR [rbp-0x1],r15
 103ceac:	mov    rax,QWORD PTR [rbp-0x59]
 103ceb0:	test   rax,rax
 103ceb3:	je     0x103cebd
 103ceb5:	mov    rax,QWORD PTR [rax]
 103ceb8:	test   rax,rax
 103cebb:	jne    0x103ceb5
 103cebd:	mov    QWORD PTR [rbp-0x49],r15
 103cec1:	mov    QWORD PTR [rbp-0x41],r15
 103cec5:	mov    QWORD PTR [rbp-0x51],r15
 103cec9:	mov    QWORD PTR [rbp-0x59],r15
 103cecd:	mov    rcx,QWORD PTR [rbp-0x39]
 103ced1:	call   0x103f9ae
 103ced6:	mov    QWORD PTR [rbp-0x39],r15
 103ceda:	mov    rbx,QWORD PTR [r14+0x8]
 103cede:	mov    r15,QWORD PTR [rsi+0x8]
 103cee2:	test   rbx,rbx
 103cee5:	je     0x103d036
 103ceeb:	lea    rcx,[rbx+0x10]
 103ceef:	call   QWORD PTR [rip+0xfffffffffffc4bf3]        # 0x1001ae8
 103cef5:	mov    rdx,rax
 103cef8:	mov    rcx,r12
 103cefb:	call   QWORD PTR [rip+0xfffffffffffc4b5f]        # 0x1001a60
 103cf01:	test   eax,eax
 103cf03:	jne    0x103d01f
 103cf09:	mov    rdi,QWORD PTR [rbp-0x51]
 103cf0d:	mov    rcx,QWORD PTR [rbp-0x41]
 103cf11:	test   rcx,rcx
 103cf14:	jne    0x103cf53
 103cf16:	lea    r8d,[rax+0x18]
 103cf1a:	mov    rdx,QWORD PTR [rbp-0x31]
 103cf1e:	lea    rcx,[rbp-0x39]
 103cf22:	call   0x103f9a2
 103cf27:	mov    rdx,QWORD PTR [rbp-0x31]
 103cf2b:	lea    r8,[rdx-0x1]
 103cf2f:	lea    r8,[rdx+r8*2]
 103cf33:	lea    r8,[rax+r8*8]
 103cf37:	mov    rcx,QWORD PTR [rbp-0x41]
 103cf3b:	dec    rdx
 103cf3e:	js     0x103cf53
 103cf40:	mov    QWORD PTR [r8],rcx
 103cf43:	mov    rcx,r8
 103cf46:	mov    QWORD PTR [rbp-0x41],rcx
 103cf4a:	sub    r8,0x18
 103cf4e:	dec    rdx
 103cf51:	jns    0x103cf40
 103cf53:	xor    eax,eax
 103cf55:	test   rcx,rcx
 103cf58:	setne  al
 103cf5b:	test   eax,eax
 103cf5d:	je     0x103d030
 103cf63:	mov    rax,QWORD PTR [rcx]
 103cf66:	mov    QWORD PTR [rbp-0x41],rax
 103cf6a:	mov    QWORD PTR [rcx+0x8],rdi
 103cf6e:	mov    QWORD PTR [rcx],0x0
 103cf75:	inc    QWORD PTR [rbp-0x49]
 103cf79:	mov    QWORD PTR [rcx+0x10],rbx
 103cf7d:	mov    rax,QWORD PTR [rbp-0x51]
 103cf81:	test   rax,rax
 103cf84:	je     0x103cf8b
 103cf86:	mov    QWORD PTR [rax],rcx
 103cf89:	jmp    0x103cf8f
 103cf8b:	mov    QWORD PTR [rbp-0x59],rcx
 103cf8f:	mov    QWORD PTR [rbp-0x51],rcx
 103cf93:	mov    rdi,QWORD PTR [rbp-0x19]
 103cf97:	mov    rcx,QWORD PTR [rbp-0x9]
 103cf9b:	test   rcx,rcx
 103cf9e:	jne    0x103cfe3
 103cfa0:	lea    r8d,[rcx+0x18]
 103cfa4:	mov    rdx,QWORD PTR [rbp+0x7]
 103cfa8:	lea    rcx,[rbp-0x1]
 103cfac:	call   0x103f9a2
 103cfb1:	mov    rdx,QWORD PTR [rbp+0x7]
 103cfb5:	lea    r8,[rdx-0x1]
 103cfb9:	lea    r8,[rdx+r8*2]
 103cfbd:	lea    r8,[rax+r8*8]
 103cfc1:	mov    rcx,QWORD PTR [rbp-0x9]
 103cfc5:	dec    rdx
 103cfc8:	js     0x103cfe3
 103cfca:	nop    WORD PTR [rax+rax*1+0x0]
 103cfd0:	mov    QWORD PTR [r8],rcx
 103cfd3:	mov    rcx,r8
 103cfd6:	mov    QWORD PTR [rbp-0x9],rcx
 103cfda:	sub    r8,0x18
 103cfde:	dec    rdx
 103cfe1:	jns    0x103cfd0
 103cfe3:	xor    eax,eax
 103cfe5:	test   rcx,rcx
 103cfe8:	setne  al
 103cfeb:	test   eax,eax
 103cfed:	je     0x103d02a
 103cfef:	mov    rax,QWORD PTR [rcx]
 103cff2:	mov    QWORD PTR [rbp-0x9],rax
 103cff6:	mov    QWORD PTR [rcx+0x8],rdi
 103cffa:	mov    QWORD PTR [rcx],0x0
 103d001:	inc    QWORD PTR [rbp-0x11]
 103d005:	mov    QWORD PTR [rcx+0x10],r15
 103d009:	mov    rax,QWORD PTR [rbp-0x19]
 103d00d:	test   rax,rax
 103d010:	je     0x103d017
 103d012:	mov    QWORD PTR [rax],rcx
 103d015:	jmp    0x103d01b
 103d017:	mov    QWORD PTR [rbp-0x21],rcx
 103d01b:	mov    QWORD PTR [rbp-0x19],rcx
 103d01f:	mov    rbx,QWORD PTR [rbx]
 103d022:	mov    r15,QWORD PTR [r15]
 103d025:	jmp    0x103cee2
 103d02a:	call   0x103f972
 103d02f:	int3   
 103d030:	call   0x103f972
 103d035:	int3   
 103d036:	mov    rdi,QWORD PTR [rbp-0x59]
 103d03a:	mov    r15,QWORD PTR [rbp-0x21]
 103d03e:	test   rdi,rdi
 103d041:	je     0x103d170
 103d047:	nop    WORD PTR [rax+rax*1+0x0]
 103d050:	mov    rbx,QWORD PTR [rdi+0x10]
 103d054:	mov    rax,QWORD PTR [rbx]
 103d057:	cmp    rbx,QWORD PTR [r14+0x8]
 103d05b:	jne    0x103d063
 103d05d:	mov    QWORD PTR [r14+0x8],rax
 103d061:	jmp    0x103d06a
 103d063:	mov    rcx,QWORD PTR [rbx+0x8]
 103d067:	mov    QWORD PTR [rcx],rax
 103d06a:	mov    rax,QWORD PTR [rbx+0x8]
 103d06e:	cmp    rbx,QWORD PTR [r14+0x10]
 103d072:	jne    0x103d07a
 103d074:	mov    QWORD PTR [r14+0x10],rax
 103d078:	jmp    0x103d081
 103d07a:	mov    rcx,QWORD PTR [rbx]
 103d07d:	mov    QWORD PTR [rcx+0x8],rax
 103d081:	lea    rcx,[rbx+0x10]
 103d085:	call   QWORD PTR [rip+0xfffffffffffc4a1d]        # 0x1001aa8
 103d08b:	mov    r11,QWORD PTR [r14+0x20]
 103d08f:	mov    QWORD PTR [rbx],r11
 103d092:	mov    QWORD PTR [r14+0x20],rbx
 103d096:	dec    QWORD PTR [r14+0x18]
 103d09a:	jne    0x103d0d6
 103d09c:	mov    rbx,QWORD PTR [r14+0x8]
 103d0a0:	test   rbx,rbx
 103d0a3:	je     0x103d0b7
 103d0a5:	lea    rcx,[rbx+0x10]
 103d0a9:	call   QWORD PTR [rip+0xfffffffffffc49f9]        # 0x1001aa8
 103d0af:	mov    rbx,QWORD PTR [rbx]
 103d0b2:	test   rbx,rbx
 103d0b5:	jne    0x103d0a5
 103d0b7:	xor    ebx,ebx
 103d0b9:	mov    QWORD PTR [r14+0x18],rbx
 103d0bd:	mov    QWORD PTR [r14+0x20],rbx
 103d0c1:	mov    QWORD PTR [r14+0x10],rbx
 103d0c5:	mov    QWORD PTR [r14+0x8],rbx
 103d0c9:	mov    rcx,QWORD PTR [r14+0x28]
 103d0cd:	call   0x103f9ae
 103d0d2:	mov    QWORD PTR [r14+0x28],rbx
 103d0d6:	mov    rbx,QWORD PTR [r15+0x10]
 103d0da:	mov    rax,QWORD PTR [rbx]
 103d0dd:	cmp    rbx,QWORD PTR [rsi+0x8]
 103d0e1:	jne    0x103d0e9
 103d0e3:	mov    QWORD PTR [rsi+0x8],rax
 103d0e7:	jmp    0x103d0f0
 103d0e9:	mov    rcx,QWORD PTR [rbx+0x8]
 103d0ed:	mov    QWORD PTR [rcx],rax
 103d0f0:	mov    rax,QWORD PTR [rbx+0x8]
 103d0f4:	cmp    rbx,QWORD PTR [rsi+0x10]
 103d0f8:	jne    0x103d100
 103d0fa:	mov    QWORD PTR [rsi+0x10],rax
 103d0fe:	jmp    0x103d107
 103d100:	mov    rcx,QWORD PTR [rbx]
 103d103:	mov    QWORD PTR [rcx+0x8],rax
 103d107:	lea    rcx,[rbx+0x10]
 103d10b:	call   QWORD PTR [rip+0xfffffffffffc4997]        # 0x1001aa8
 103d111:	mov    r11,QWORD PTR [rsi+0x20]
 103d115:	mov    QWORD PTR [rbx],r11
 103d118:	mov    QWORD PTR [rsi+0x20],rbx
 103d11c:	dec    QWORD PTR [rsi+0x18]
 103d120:	jne    0x103d161
 103d122:	mov    rbx,QWORD PTR [rsi+0x8]
 103d126:	test   rbx,rbx
 103d129:	je     0x103d142
 103d12b:	nop    DWORD PTR [rax+rax*1+0x0]
 103d130:	lea    rcx,[rbx+0x10]
 103d134:	call   QWORD PTR [rip+0xfffffffffffc496e]        # 0x1001aa8
 103d13a:	mov    rbx,QWORD PTR [rbx]
 103d13d:	test   rbx,rbx
 103d140:	jne    0x103d130
 103d142:	xor    ebx,ebx
 103d144:	mov    QWORD PTR [rsi+0x18],rbx
 103d148:	mov    QWORD PTR [rsi+0x20],rbx
 103d14c:	mov    QWORD PTR [rsi+0x10],rbx
 103d150:	mov    QWORD PTR [rsi+0x8],rbx
 103d154:	mov    rcx,QWORD PTR [rsi+0x28]
 103d158:	call   0x103f9ae
 103d15d:	mov    QWORD PTR [rsi+0x28],rbx
 103d161:	mov    rdi,QWORD PTR [rdi]
 103d164:	mov    r15,QWORD PTR [r15]
 103d167:	test   rdi,rdi
 103d16a:	jne    0x103d050
 103d170:	xor    r8d,r8d
 103d173:	mov    rdx,QWORD PTR [r14+0x10]
 103d177:	mov    rcx,r14
 103d17a:	call   0x100c430
 103d17f:	mov    rbx,rax
 103d182:	lea    rcx,[rax+0x10]
 103d186:	mov    rdx,r12
 103d189:	call   QWORD PTR [rip+0xfffffffffffc4911]        # 0x1001aa0
 103d18f:	mov    r11,QWORD PTR [r14+0x10]
 103d193:	test   r11,r11
 103d196:	je     0x103d20b
 103d198:	mov    QWORD PTR [r11],rbx
 103d19b:	jmp    0x103d20f
 103d19d:	mov    rbx,QWORD PTR [r14+0x8]
 103d1a1:	mov    rdi,QWORD PTR [rsi+0x8]
 103d1a5:	test   rbx,rbx
 103d1a8:	je     0x103d170
 103d1aa:	lea    rcx,[rbx+0x10]
 103d1ae:	call   QWORD PTR [rip+0xfffffffffffc4934]        # 0x1001ae8
 103d1b4:	mov    rdx,rax
 103d1b7:	mov    rcx,r12
 103d1ba:	call   QWORD PTR [rip+0xfffffffffffc48a0]        # 0x1001a60
 103d1c0:	test   eax,eax
 103d1c2:	jne    0x103d1f3
 103d1c4:	lea    rdx,[rip+0xfffffffffffc589d]        # 0x1002a68
 103d1cb:	lea    rcx,[rdi+0x10]
 103d1cf:	call   QWORD PTR [rip+0xfffffffffffc488b]        # 0x1001a60
 103d1d5:	test   eax,eax
 103d1d7:	je     0x103d1fb
 103d1d9:	mov    rcx,r13
 103d1dc:	call   QWORD PTR [rip+0xfffffffffffc4906]        # 0x1001ae8
 103d1e2:	mov    rdx,rax
 103d1e5:	lea    rcx,[rdi+0x10]
 103d1e9:	call   QWORD PTR [rip+0xfffffffffffc4871]        # 0x1001a60
 103d1ef:	test   eax,eax
 103d1f1:	je     0x103d1fb
 103d1f3:	mov    rbx,QWORD PTR [rbx]
 103d1f6:	mov    rdi,QWORD PTR [rdi]
 103d1f9:	jmp    0x103d1a5
 103d1fb:	test   rbx,rbx
 103d1fe:	jne    0x103d248
 103d200:	jmp    0x103d170
 103d205:	call   0x103f972
 103d20a:	int3   
 103d20b:	mov    QWORD PTR [r14+0x8],rbx
 103d20f:	mov    QWORD PTR [r14+0x10],rbx
 103d213:	xor    r8d,r8d
 103d216:	mov    rdx,QWORD PTR [rsi+0x10]
 103d21a:	mov    rcx,rsi
 103d21d:	call   0x100c430
 103d222:	mov    rbx,rax
 103d225:	lea    rcx,[rax+0x10]
 103d229:	mov    rdx,r13
 103d22c:	call   QWORD PTR [rip+0xfffffffffffc486e]        # 0x1001aa0
 103d232:	mov    r11,QWORD PTR [rsi+0x10]
 103d236:	test   r11,r11
 103d239:	je     0x103d240
 103d23b:	mov    QWORD PTR [r11],rbx
 103d23e:	jmp    0x103d244
 103d240:	mov    QWORD PTR [rsi+0x8],rbx
 103d244:	mov    QWORD PTR [rsi+0x10],rbx
 103d248:	lea    rdi,[rip+0xfffffffffffcaa89]        # 0x1007cd8
 103d24f:	mov    QWORD PTR [rbp-0x61],rdi
 103d253:	mov    rax,QWORD PTR [rbp-0x59]
 103d257:	test   rax,rax
 103d25a:	je     0x103d268
 103d25c:	nop    DWORD PTR [rax+0x0]
 103d260:	mov    rax,QWORD PTR [rax]
 103d263:	test   rax,rax
 103d266:	jne    0x103d260
 103d268:	xor    ebx,ebx
 103d26a:	mov    QWORD PTR [rbp-0x49],rbx
 103d26e:	mov    QWORD PTR [rbp-0x41],rbx
 103d272:	mov    QWORD PTR [rbp-0x51],rbx
 103d276:	mov    QWORD PTR [rbp-0x59],rbx
 103d27a:	mov    rcx,QWORD PTR [rbp-0x39]
 103d27e:	call   0x103f9ae
 103d283:	mov    QWORD PTR [rbp-0x39],rbx
 103d287:	mov    QWORD PTR [rbp-0x29],rdi
 103d28b:	mov    rax,QWORD PTR [rbp-0x21]
 103d28f:	test   rax,rax
 103d292:	je     0x103d29c
 103d294:	mov    rax,QWORD PTR [rax]
 103d297:	test   rax,rax
 103d29a:	jne    0x103d294
 103d29c:	mov    QWORD PTR [rbp-0x11],rbx
 103d2a0:	mov    QWORD PTR [rbp-0x9],rbx
 103d2a4:	mov    QWORD PTR [rbp-0x19],rbx
 103d2a8:	mov    QWORD PTR [rbp-0x21],rbx
 103d2ac:	mov    rcx,QWORD PTR [rbp-0x1]
 103d2b0:	call   0x103f9ae
 103d2b5:	mov    QWORD PTR [rbp-0x1],rbx
 103d2b9:	mov    rcx,r13
 103d2bc:	call   QWORD PTR [rip+0xfffffffffffc47e6]        # 0x1001aa8
 103d2c2:	nop
 103d2c3:	mov    rcx,r12
 103d2c6:	call   QWORD PTR [rip+0xfffffffffffc47dc]        # 0x1001aa8
 103d2cc:	mov    rbx,QWORD PTR [rsp+0xe0]
 103d2d4:	add    rsp,0xa0
 103d2db:	pop    r15
 103d2dd:	pop    r14
 103d2df:	pop    r13
 103d2e1:	pop    r12
 103d2e3:	pop    rdi
 103d2e4:	pop    rsi
 103d2e5:	pop    rbp
 103d2e6:	ret    
 103d2e7:	int3   
 103d2e8:	int3   
 103d2e9:	int3   
 103d2ea:	int3   
 103d2eb:	int3   
 103d2ec:	int3   
 103d2ed:	int3   
 103d2ee:	int3   
 103d2ef:	int3   
 103d2f0:	mov    QWORD PTR [rsp+0x8],rbx
 103d2f5:	push   rdi
 103d2f6:	sub    rsp,0x20
 103d2fa:	mov    ebx,edx
 103d2fc:	mov    rdi,rcx
 103d2ff:	call   0x10371e0
 103d304:	test   bl,0x1
 103d307:	je     0x103d311
 103d309:	mov    rcx,rdi
 103d30c:	call   0x103f95a
 103d311:	mov    rax,rdi
 103d314:	mov    rbx,QWORD PTR [rsp+0x30]
 103d319:	add    rsp,0x20
 103d31d:	pop    rdi
 103d31e:	ret    
 103d31f:	int3   
 103d320:	int3   
 103d321:	int3   
 103d322:	int3   
 103d323:	int3   
 103d324:	int3   
 103d325:	int3   
 103d326:	int3   
 103d327:	int3   
 103d328:	int3   
 103d329:	int3   
 103d32a:	int3   
 103d32b:	int3   
 103d32c:	int3   
 103d32d:	int3   
 103d32e:	int3   
 103d32f:	int3   
 103d330:	mov    QWORD PTR [rsp+0x8],rbx
 103d335:	push   rdi
 103d336:	sub    rsp,0x20
 103d33a:	lea    rax,[rip+0xfffffffffffca997]        # 0x1007cd8
 103d341:	mov    rbx,rcx
 103d344:	mov    QWORD PTR [rcx],rax
 103d347:	mov    rax,QWORD PTR [rcx+0x8]
 103d34b:	test   rax,rax
 103d34e:	je     0x103d358
 103d350:	mov    rax,QWORD PTR [rax]
 103d353:	test   rax,rax
 103d356:	jne    0x103d350
 103d358:	xor    edi,edi
 103d35a:	mov    QWORD PTR [rcx+0x18],rdi
 103d35e:	mov    QWORD PTR [rcx+0x20],rdi
 103d362:	mov    QWORD PTR [rcx+0x10],rdi
 103d366:	mov    QWORD PTR [rcx+0x8],rdi
 103d36a:	mov    rcx,QWORD PTR [rcx+0x28]
 103d36e:	call   0x103f9ae
 103d373:	mov    QWORD PTR [rbx+0x28],rdi
 103d377:	mov    rbx,QWORD PTR [rsp+0x30]
 103d37c:	add    rsp,0x20
 103d380:	pop    rdi
 103d381:	ret    
 103d382:	int3   
 103d383:	int3   
 103d384:	int3   
 103d385:	int3   
 103d386:	int3   
 103d387:	int3   
 103d388:	int3   
 103d389:	int3   
 103d38a:	int3   
 103d38b:	int3   
 103d38c:	int3   
 103d38d:	int3   
 103d38e:	int3   
 103d38f:	int3   
 103d390:	mov    QWORD PTR [rsp+0x20],rbx
 103d395:	push   rbp
 103d396:	push   rsi
 103d397:	push   rdi
 103d398:	push   r14
 103d39a:	push   r15
 103d39c:	sub    rsp,0x20
 103d3a0:	mov    eax,DWORD PTR [rdx+0x20]
 103d3a3:	mov    r14,rdx
 103d3a6:	mov    rdi,rcx
 103d3a9:	not    eax
 103d3ab:	test   al,0x1
 103d3ad:	je     0x103d47d
 103d3b3:	mov    rdx,QWORD PTR [rcx+0x18]
 103d3b7:	mov    rcx,r14
 103d3ba:	call   0x103f996
 103d3bf:	mov    r15,QWORD PTR [rdi+0x8]
 103d3c3:	test   r15,r15
 103d3c6:	je     0x103d5bc
 103d3cc:	nop    DWORD PTR [rax+0x0]
 103d3d0:	lea    rbx,[r15+0x10]
 103d3d4:	test   rbx,rbx
 103d3d7:	je     0x103d477
 103d3dd:	mov    eax,DWORD PTR [r14+0x20]
 103d3e1:	mov    esi,0x1
 103d3e6:	not    eax
 103d3e8:	test   sil,al
 103d3eb:	je     0x103d420
 103d3ed:	nop    DWORD PTR [rax]
 103d3f0:	mov    edi,0xfffffff
 103d3f5:	mov    rdx,rbx
 103d3f8:	mov    rcx,r14
 103d3fb:	cmp    rsi,rdi
 103d3fe:	cmovb  edi,esi
 103d401:	lea    r8d,[rdi*8+0x0]
 103d409:	call   0x103f9ea
 103d40e:	mov    r11d,edi
 103d411:	lea    rbx,[rbx+rdi*8]
 103d415:	sub    rsi,r11
 103d418:	jne    0x103d3f0
 103d41a:	jmp    0x103d44f
 103d41c:	nop    DWORD PTR [rax+0x0]
 103d420:	mov    ebp,0xfffffff
 103d425:	mov    rdx,rbx
 103d428:	mov    rcx,r14
 103d42b:	cmp    rsi,rbp
 103d42e:	cmovb  ebp,esi
 103d431:	lea    edi,[rbp*8+0x0]
 103d438:	mov    r8d,edi
 103d43b:	call   0x103f9de
 103d440:	cmp    eax,edi
 103d442:	jne    0x103d46c
 103d444:	mov    eax,ebp
 103d446:	lea    rbx,[rbx+rbp*8]
 103d44a:	sub    rsi,rax
 103d44d:	jne    0x103d420
 103d44f:	mov    r15,QWORD PTR [r15]
 103d452:	test   r15,r15
 103d455:	jne    0x103d3d0
 103d45b:	mov    rbx,QWORD PTR [rsp+0x68]
 103d460:	add    rsp,0x20
 103d464:	pop    r15
 103d466:	pop    r14
 103d468:	pop    rdi
 103d469:	pop    rsi
 103d46a:	pop    rbp
 103d46b:	ret    
 103d46c:	xor    edx,edx
 103d46e:	lea    ecx,[rdx+0x3]
 103d471:	call   0x103fa32
 103d476:	int3   
 103d477:	call   0x103f972
 103d47c:	int3   
 103d47d:	mov    rcx,rdx
 103d480:	mov    QWORD PTR [rsp+0x50],r12
 103d485:	call   0x103f98a
 103d48a:	mov    r12,rax
 103d48d:	test   rax,rax
 103d490:	je     0x103d5b7
 103d496:	mov    QWORD PTR [rsp+0x60],r13
 103d49b:	xor    r13d,r13d
 103d49e:	xchg   ax,ax
 103d4a0:	mov    ecx,DWORD PTR [r14+0x20]
 103d4a4:	mov    esi,0x1
 103d4a9:	dec    r12
 103d4ac:	not    ecx
 103d4ae:	lea    r15,[rsp+0x58]
 103d4b3:	test   sil,cl
 103d4b6:	je     0x103d4f0
 103d4b8:	nop    DWORD PTR [rax+rax*1+0x0]
 103d4c0:	mov    ebx,0xfffffff
 103d4c5:	mov    rdx,r15
 103d4c8:	mov    rcx,r14
 103d4cb:	cmp    rsi,rbx
 103d4ce:	cmovb  ebx,esi
 103d4d1:	lea    r8d,[rbx*8+0x0]
 103d4d9:	call   0x103f9ea
 103d4de:	mov    r11d,ebx
 103d4e1:	lea    r15,[r15+rbx*8]
 103d4e5:	sub    rsi,r11
 103d4e8:	jne    0x103d4c0
 103d4ea:	jmp    0x103d523
 103d4ec:	nop    DWORD PTR [rax+0x0]
 103d4f0:	mov    ebp,0xfffffff
 103d4f5:	mov    rdx,r15
 103d4f8:	mov    rcx,r14
 103d4fb:	cmp    rsi,rbp
 103d4fe:	cmovb  ebp,esi
 103d501:	lea    ebx,[rbp*8+0x0]
 103d508:	mov    r8d,ebx
 103d50b:	call   0x103f9de
 103d510:	cmp    eax,ebx
 103d512:	jne    0x103d5d3
 103d518:	mov    eax,ebp
 103d51a:	lea    r15,[r15+rbp*8]
 103d51e:	sub    rsi,rax
 103d521:	jne    0x103d4f0
 103d523:	mov    rbx,QWORD PTR [rsp+0x58]
 103d528:	mov    rsi,QWORD PTR [rdi+0x10]
 103d52c:	cmp    QWORD PTR [rdi+0x20],r13
 103d530:	jne    0x103d574
 103d532:	mov    rdx,QWORD PTR [rdi+0x30]
 103d536:	lea    rcx,[rdi+0x28]
 103d53a:	mov    r8d,0x18
 103d540:	call   0x103f9a2
 103d545:	mov    rdx,QWORD PTR [rdi+0x30]
 103d549:	lea    r8,[rdx-0x1]
 103d54d:	add    rax,0x8
 103d551:	dec    rdx
 103d554:	lea    r8,[r8+r8*2]
 103d558:	lea    r8,[rax+r8*8]
 103d55c:	js     0x103d574
 103d55e:	xchg   ax,ax
 103d560:	mov    rax,QWORD PTR [rdi+0x20]
 103d564:	mov    QWORD PTR [r8],rax
 103d567:	mov    QWORD PTR [rdi+0x20],r8
 103d56b:	sub    r8,0x18
 103d56f:	dec    rdx
 103d572:	jns    0x103d560
 103d574:	mov    rcx,QWORD PTR [rdi+0x20]
 103d578:	test   rcx,rcx
 103d57b:	je     0x103d5cd
 103d57d:	mov    rax,QWORD PTR [rcx]
 103d580:	mov    QWORD PTR [rdi+0x20],rax
 103d584:	mov    QWORD PTR [rcx+0x8],rsi
 103d588:	mov    QWORD PTR [rcx],r13
 103d58b:	inc    QWORD PTR [rdi+0x18]
 103d58f:	mov    QWORD PTR [rcx+0x10],rbx
 103d593:	mov    rax,QWORD PTR [rdi+0x10]
 103d597:	test   rax,rax
 103d59a:	je     0x103d5a1
 103d59c:	mov    QWORD PTR [rax],rcx
 103d59f:	jmp    0x103d5a5
 103d5a1:	mov    QWORD PTR [rdi+0x8],rcx
 103d5a5:	mov    QWORD PTR [rdi+0x10],rcx
 103d5a9:	test   r12,r12
 103d5ac:	jne    0x103d4a0
 103d5b2:	mov    r13,QWORD PTR [rsp+0x60]
 103d5b7:	mov    r12,QWORD PTR [rsp+0x50]
 103d5bc:	mov    rbx,QWORD PTR [rsp+0x68]
 103d5c1:	add    rsp,0x20
 103d5c5:	pop    r15
 103d5c7:	pop    r14
 103d5c9:	pop    rdi
 103d5ca:	pop    rsi
 103d5cb:	pop    rbp
 103d5cc:	ret    
 103d5cd:	call   0x103f972
 103d5d2:	int3   
 103d5d3:	xor    edx,edx
 103d5d5:	lea    ecx,[rdx+0x3]
 103d5d8:	call   0x103fa32
 103d5dd:	int3   
 103d5de:	int3   
 103d5df:	int3   
 103d5e0:	int3   
 103d5e1:	int3   
 103d5e2:	int3   
 103d5e3:	int3   
 103d5e4:	int3   
 103d5e5:	int3   
 103d5e6:	int3   
 103d5e7:	int3   
 103d5e8:	int3   
 103d5e9:	int3   
 103d5ea:	int3   
 103d5eb:	int3   
 103d5ec:	int3   
 103d5ed:	int3   
 103d5ee:	int3   
 103d5ef:	int3   
 103d5f0:	mov    QWORD PTR [rsp+0x8],rbx
 103d5f5:	mov    QWORD PTR [rsp+0x10],rsi
 103d5fa:	push   rdi
 103d5fb:	sub    rsp,0x20
 103d5ff:	lea    rax,[rip+0xfffffffffffca6d2]        # 0x1007cd8
 103d606:	mov    edi,edx
 103d608:	mov    rbx,rcx
 103d60b:	mov    QWORD PTR [rcx],rax
 103d60e:	mov    rax,QWORD PTR [rcx+0x8]
 103d612:	test   rax,rax
 103d615:	je     0x103d61f
 103d617:	mov    rax,QWORD PTR [rax]
 103d61a:	test   rax,rax
 103d61d:	jne    0x103d617
 103d61f:	xor    esi,esi
 103d621:	mov    QWORD PTR [rcx+0x18],rsi
 103d625:	mov    QWORD PTR [rcx+0x20],rsi
 103d629:	mov    QWORD PTR [rcx+0x10],rsi
 103d62d:	mov    QWORD PTR [rcx+0x8],rsi
 103d631:	mov    rcx,QWORD PTR [rcx+0x28]
 103d635:	call   0x103f9ae
 103d63a:	mov    QWORD PTR [rbx+0x28],rsi
 103d63e:	test   dil,0x1
 103d642:	je     0x103d64c
 103d644:	mov    rcx,rbx
 103d647:	call   0x103f95a
 103d64c:	mov    rsi,QWORD PTR [rsp+0x38]
 103d651:	mov    rax,rbx
 103d654:	mov    rbx,QWORD PTR [rsp+0x30]
 103d659:	add    rsp,0x20
 103d65d:	pop    rdi
 103d65e:	ret    
 103d65f:	int3   
 103d660:	int3   
 103d661:	int3   
 103d662:	int3   
 103d663:	int3   
 103d664:	int3   
 103d665:	int3   
 103d666:	int3   
 103d667:	int3   
 103d668:	int3   
 103d669:	int3   
 103d66a:	int3   
 103d66b:	int3   
 103d66c:	int3   
 103d66d:	int3   
 103d66e:	int3   
 103d66f:	int3   
 103d670:	mov    QWORD PTR [rsp+0x8],rcx
 103d675:	push   rdi
 103d676:	sub    rsp,0x30
 103d67a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 103d683:	mov    QWORD PTR [rsp+0x48],rbx
 103d688:	mov    QWORD PTR [rsp+0x50],rsi
 103d68d:	mov    rdi,r8
 103d690:	mov    rbx,rdx
 103d693:	mov    rsi,rcx
 103d696:	call   QWORD PTR [rip+0xfffffffffffc4424]        # 0x1001ac0
 103d69c:	nop
 103d69d:	lea    rax,[rip+0xfffffffffffcc444]        # 0x1009ae8
 103d6a4:	mov    QWORD PTR [rsi+0x8],rax
 103d6a8:	xor    eax,eax
 103d6aa:	mov    QWORD PTR [rsi+0x20],rax
 103d6ae:	mov    QWORD PTR [rsi+0x28],rax
 103d6b2:	mov    QWORD PTR [rsi+0x18],rax
 103d6b6:	mov    QWORD PTR [rsi+0x10],rax
 103d6ba:	mov    QWORD PTR [rsi+0x30],rax
 103d6be:	mov    QWORD PTR [rsi+0x38],0xa
 103d6c6:	mov    rdx,rbx
 103d6c9:	mov    rcx,rsi
 103d6cc:	call   QWORD PTR [rip+0xfffffffffffc43c6]        # 0x1001a98
 103d6d2:	mov    QWORD PTR [rsi+0x40],rdi
 103d6d6:	mov    rax,rsi
 103d6d9:	mov    rbx,QWORD PTR [rsp+0x48]
 103d6de:	mov    rsi,QWORD PTR [rsp+0x50]
 103d6e3:	add    rsp,0x30
 103d6e7:	pop    rdi
 103d6e8:	ret    
 103d6e9:	int3   
 103d6ea:	int3   
 103d6eb:	int3   
 103d6ec:	int3   
 103d6ed:	int3   
 103d6ee:	int3   
 103d6ef:	int3   
 103d6f0:	mov    QWORD PTR [rsp+0x8],rbx
 103d6f5:	mov    QWORD PTR [rsp+0x10],rsi
 103d6fa:	push   rdi
 103d6fb:	sub    rsp,0x20
 103d6ff:	cmp    QWORD PTR [rcx+0x20],0x0
 103d704:	mov    rdi,r8
 103d707:	mov    rsi,rdx
 103d70a:	mov    rbx,rcx
 103d70d:	jne    0x103d754
 103d70f:	mov    rdx,QWORD PTR [rbx+0x30]
 103d713:	add    rcx,0x28
 103d717:	mov    r8d,0x18
 103d71d:	call   0x103f9a2
 103d722:	mov    rdx,QWORD PTR [rbx+0x30]
 103d726:	add    rax,0x8
 103d72a:	lea    rcx,[rdx+rdx*2]
 103d72e:	lea    rax,[rax+rcx*8]
 103d732:	add    rax,0xffffffffffffffe8
 103d736:	dec    rdx
 103d739:	js     0x103d754
 103d73b:	nop    DWORD PTR [rax+rax*1+0x0]
 103d740:	mov    rcx,QWORD PTR [rbx+0x20]
 103d744:	mov    QWORD PTR [rax],rcx
 103d747:	mov    QWORD PTR [rbx+0x20],rax
 103d74b:	sub    rax,0x18
 103d74f:	dec    rdx
 103d752:	jns    0x103d740
 103d754:	mov    rax,QWORD PTR [rbx+0x20]
 103d758:	test   rax,rax
 103d75b:	jne    0x103d763
 103d75d:	call   0x103f972
 103d762:	int3   
 103d763:	mov    rcx,QWORD PTR [rax]
 103d766:	mov    QWORD PTR [rbx+0x20],rcx
 103d76a:	mov    QWORD PTR [rax+0x8],rsi
 103d76e:	mov    rsi,QWORD PTR [rsp+0x38]
 103d773:	mov    QWORD PTR [rax],rdi
 103d776:	inc    QWORD PTR [rbx+0x18]
 103d77a:	mov    rbx,QWORD PTR [rsp+0x30]
 103d77f:	add    rsp,0x20
 103d783:	pop    rdi
 103d784:	ret    
 103d785:	int3   
 103d786:	int3   
 103d787:	int3   
 103d788:	int3   
 103d789:	int3   
 103d78a:	int3   
 103d78b:	int3   
 103d78c:	int3   
 103d78d:	int3   
 103d78e:	int3   
 103d78f:	int3   
 103d790:	mov    QWORD PTR [rsp+0x8],rbx
 103d795:	push   rdi
 103d796:	sub    rsp,0x20
 103d79a:	lea    rax,[rip+0xfffffffffffcc347]        # 0x1009ae8
 103d7a1:	mov    rbx,rcx
 103d7a4:	mov    QWORD PTR [rcx],rax
 103d7a7:	mov    rax,QWORD PTR [rcx+0x8]
 103d7ab:	test   rax,rax
 103d7ae:	je     0x103d7b8
 103d7b0:	mov    rax,QWORD PTR [rax]
 103d7b3:	test   rax,rax
 103d7b6:	jne    0x103d7b0
 103d7b8:	xor    edi,edi
 103d7ba:	mov    QWORD PTR [rcx+0x18],rdi
 103d7be:	mov    QWORD PTR [rcx+0x20],rdi
 103d7c2:	mov    QWORD PTR [rcx+0x10],rdi
 103d7c6:	mov    QWORD PTR [rcx+0x8],rdi
 103d7ca:	mov    rcx,QWORD PTR [rcx+0x28]
 103d7ce:	call   0x103f9ae
 103d7d3:	mov    QWORD PTR [rbx+0x28],rdi
 103d7d7:	mov    rbx,QWORD PTR [rsp+0x30]
 103d7dc:	add    rsp,0x20
 103d7e0:	pop    rdi
 103d7e1:	ret    
 103d7e2:	int3   
 103d7e3:	int3   
 103d7e4:	int3   
 103d7e5:	int3   
 103d7e6:	int3   
 103d7e7:	int3   
 103d7e8:	int3   
 103d7e9:	int3   
 103d7ea:	int3   
 103d7eb:	int3   
 103d7ec:	int3   
 103d7ed:	int3   
 103d7ee:	int3   
 103d7ef:	int3   
 103d7f0:	mov    QWORD PTR [rsp+0x20],rbx
 103d7f5:	push   rbp
 103d7f6:	push   rsi
 103d7f7:	push   rdi
 103d7f8:	push   r14
 103d7fa:	push   r15
 103d7fc:	sub    rsp,0x20
 103d800:	mov    eax,DWORD PTR [rdx+0x20]
 103d803:	mov    r14,rdx
 103d806:	mov    rdi,rcx
 103d809:	not    eax
 103d80b:	test   al,0x1
 103d80d:	je     0x103d8dd
 103d813:	mov    rdx,QWORD PTR [rcx+0x18]
 103d817:	mov    rcx,r14
 103d81a:	call   0x103f996
 103d81f:	mov    r15,QWORD PTR [rdi+0x8]
 103d823:	test   r15,r15
 103d826:	je     0x103da21
 103d82c:	nop    DWORD PTR [rax+0x0]
 103d830:	lea    rbx,[r15+0x10]
 103d834:	test   rbx,rbx
 103d837:	je     0x103d8d7
 103d83d:	mov    eax,DWORD PTR [r14+0x20]
 103d841:	mov    esi,0x1
 103d846:	not    eax
 103d848:	test   sil,al
 103d84b:	je     0x103d880
 103d84d:	nop    DWORD PTR [rax]
 103d850:	mov    edi,0xfffffff
 103d855:	mov    rdx,rbx
 103d858:	mov    rcx,r14
 103d85b:	cmp    rsi,rdi
 103d85e:	cmovb  edi,esi
 103d861:	lea    r8d,[rdi*8+0x0]
 103d869:	call   0x103f9ea
 103d86e:	mov    r11d,edi
 103d871:	lea    rbx,[rbx+rdi*8]
 103d875:	sub    rsi,r11
 103d878:	jne    0x103d850
 103d87a:	jmp    0x103d8af
 103d87c:	nop    DWORD PTR [rax+0x0]
 103d880:	mov    ebp,0xfffffff
 103d885:	mov    rdx,rbx
 103d888:	mov    rcx,r14
 103d88b:	cmp    rsi,rbp
 103d88e:	cmovb  ebp,esi
 103d891:	lea    edi,[rbp*8+0x0]
 103d898:	mov    r8d,edi
 103d89b:	call   0x103f9de
 103d8a0:	cmp    eax,edi
 103d8a2:	jne    0x103d8cc
 103d8a4:	mov    eax,ebp
 103d8a6:	lea    rbx,[rbx+rbp*8]
 103d8aa:	sub    rsi,rax
 103d8ad:	jne    0x103d880
 103d8af:	mov    r15,QWORD PTR [r15]
 103d8b2:	test   r15,r15
 103d8b5:	jne    0x103d830
 103d8bb:	mov    rbx,QWORD PTR [rsp+0x68]
 103d8c0:	add    rsp,0x20
 103d8c4:	pop    r15
 103d8c6:	pop    r14
 103d8c8:	pop    rdi
 103d8c9:	pop    rsi
 103d8ca:	pop    rbp
 103d8cb:	ret    
 103d8cc:	xor    edx,edx
 103d8ce:	lea    ecx,[rdx+0x3]
 103d8d1:	call   0x103fa32
 103d8d6:	int3   
 103d8d7:	call   0x103f972
 103d8dc:	int3   
 103d8dd:	mov    rcx,rdx
 103d8e0:	mov    QWORD PTR [rsp+0x50],r12
 103d8e5:	call   0x103f98a
 103d8ea:	mov    r12,rax
 103d8ed:	test   rax,rax
 103d8f0:	je     0x103da1c
 103d8f6:	mov    QWORD PTR [rsp+0x60],r13
 103d8fb:	xor    r13d,r13d
 103d8fe:	xchg   ax,ax
 103d900:	mov    ecx,DWORD PTR [r14+0x20]
 103d904:	mov    esi,0x1
 103d909:	dec    r12
 103d90c:	not    ecx
 103d90e:	lea    r15,[rsp+0x58]
 103d913:	test   sil,cl
 103d916:	je     0x103d950
 103d918:	nop    DWORD PTR [rax+rax*1+0x0]
 103d920:	mov    ebx,0xfffffff
 103d925:	mov    rdx,r15
 103d928:	mov    rcx,r14
 103d92b:	cmp    rsi,rbx
 103d92e:	cmovb  ebx,esi
 103d931:	lea    r8d,[rbx*8+0x0]
 103d939:	call   0x103f9ea
 103d93e:	mov    r11d,ebx
 103d941:	lea    r15,[r15+rbx*8]
 103d945:	sub    rsi,r11
 103d948:	jne    0x103d920
 103d94a:	jmp    0x103d983
 103d94c:	nop    DWORD PTR [rax+0x0]
 103d950:	mov    ebp,0xfffffff
 103d955:	mov    rdx,r15
 103d958:	mov    rcx,r14
 103d95b:	cmp    rsi,rbp
 103d95e:	cmovb  ebp,esi
 103d961:	lea    ebx,[rbp*8+0x0]
 103d968:	mov    r8d,ebx
 103d96b:	call   0x103f9de
 103d970:	cmp    eax,ebx
 103d972:	jne    0x103da38
 103d978:	mov    eax,ebp
 103d97a:	lea    r15,[r15+rbp*8]
 103d97e:	sub    rsi,rax
 103d981:	jne    0x103d950
 103d983:	mov    rbx,QWORD PTR [rdi+0x10]
 103d987:	cmp    QWORD PTR [rdi+0x20],r13
 103d98b:	jne    0x103d9d4
 103d98d:	mov    rdx,QWORD PTR [rdi+0x30]
 103d991:	lea    rcx,[rdi+0x28]
 103d995:	mov    r8d,0x18
 103d99b:	call   0x103f9a2
 103d9a0:	mov    rdx,QWORD PTR [rdi+0x30]
 103d9a4:	lea    r8,[rdx-0x1]
 103d9a8:	add    rax,0x8
 103d9ac:	dec    rdx
 103d9af:	lea    r8,[r8+r8*2]
 103d9b3:	lea    r8,[rax+r8*8]
 103d9b7:	js     0x103d9d4
 103d9b9:	nop    DWORD PTR [rax+0x0]
 103d9c0:	mov    rax,QWORD PTR [rdi+0x20]
 103d9c4:	mov    QWORD PTR [r8],rax
 103d9c7:	mov    QWORD PTR [rdi+0x20],r8
 103d9cb:	sub    r8,0x18
 103d9cf:	dec    rdx
 103d9d2:	jns    0x103d9c0
 103d9d4:	mov    rcx,QWORD PTR [rdi+0x20]
 103d9d8:	test   rcx,rcx
 103d9db:	je     0x103da32
 103d9dd:	mov    rax,QWORD PTR [rcx]
 103d9e0:	mov    QWORD PTR [rdi+0x20],rax
 103d9e4:	mov    QWORD PTR [rcx+0x8],rbx
 103d9e8:	mov    QWORD PTR [rcx],r13
 103d9eb:	mov    rax,QWORD PTR [rsp+0x58]
 103d9f0:	inc    QWORD PTR [rdi+0x18]
 103d9f4:	mov    QWORD PTR [rcx+0x10],rax
 103d9f8:	mov    rax,QWORD PTR [rdi+0x10]
 103d9fc:	test   rax,rax
 103d9ff:	je     0x103da06
 103da01:	mov    QWORD PTR [rax],rcx
 103da04:	jmp    0x103da0a
 103da06:	mov    QWORD PTR [rdi+0x8],rcx
 103da0a:	mov    QWORD PTR [rdi+0x10],rcx
 103da0e:	test   r12,r12
 103da11:	jne    0x103d900
 103da17:	mov    r13,QWORD PTR [rsp+0x60]
 103da1c:	mov    r12,QWORD PTR [rsp+0x50]
 103da21:	mov    rbx,QWORD PTR [rsp+0x68]
 103da26:	add    rsp,0x20
 103da2a:	pop    r15
 103da2c:	pop    r14
 103da2e:	pop    rdi
 103da2f:	pop    rsi
 103da30:	pop    rbp
 103da31:	ret    
 103da32:	call   0x103f972
 103da37:	int3   
 103da38:	xor    edx,edx
 103da3a:	lea    ecx,[rdx+0x3]
 103da3d:	call   0x103fa32
 103da42:	int3   
 103da43:	int3   
 103da44:	int3   
 103da45:	int3   
 103da46:	int3   
 103da47:	int3   
 103da48:	int3   
 103da49:	int3   
 103da4a:	int3   
 103da4b:	int3   
 103da4c:	int3   
 103da4d:	int3   
 103da4e:	int3   
 103da4f:	int3   
 103da50:	mov    QWORD PTR [rsp+0x8],rbx
 103da55:	mov    QWORD PTR [rsp+0x10],rsi
 103da5a:	push   rdi
 103da5b:	sub    rsp,0x20
 103da5f:	lea    rax,[rip+0xfffffffffffcc082]        # 0x1009ae8
 103da66:	mov    edi,edx
 103da68:	mov    rbx,rcx
 103da6b:	mov    QWORD PTR [rcx],rax
 103da6e:	mov    rax,QWORD PTR [rcx+0x8]
 103da72:	test   rax,rax
 103da75:	je     0x103da7f
 103da77:	mov    rax,QWORD PTR [rax]
 103da7a:	test   rax,rax
 103da7d:	jne    0x103da77
 103da7f:	xor    esi,esi
 103da81:	mov    QWORD PTR [rcx+0x18],rsi
 103da85:	mov    QWORD PTR [rcx+0x20],rsi
 103da89:	mov    QWORD PTR [rcx+0x10],rsi
 103da8d:	mov    QWORD PTR [rcx+0x8],rsi
 103da91:	mov    rcx,QWORD PTR [rcx+0x28]
 103da95:	call   0x103f9ae
 103da9a:	mov    QWORD PTR [rbx+0x28],rsi
 103da9e:	test   dil,0x1
 103daa2:	je     0x103daac
 103daa4:	mov    rcx,rbx
 103daa7:	call   0x103f95a
 103daac:	mov    rsi,QWORD PTR [rsp+0x38]
 103dab1:	mov    rax,rbx
 103dab4:	mov    rbx,QWORD PTR [rsp+0x30]
 103dab9:	add    rsp,0x20
 103dabd:	pop    rdi
 103dabe:	ret    
 103dabf:	int3   
 103dac0:	int3   
 103dac1:	int3   
 103dac2:	int3   
 103dac3:	int3   
 103dac4:	int3   
 103dac5:	int3   
 103dac6:	int3   
 103dac7:	int3   
 103dac8:	int3   
 103dac9:	int3   
 103daca:	int3   
 103dacb:	int3   
 103dacc:	int3   
 103dacd:	int3   
 103dace:	int3   
 103dacf:	int3   
 103dad0:	mov    QWORD PTR [rsp+0x20],r9
 103dad5:	mov    QWORD PTR [rsp+0x8],rcx
 103dada:	push   rbp
 103dadb:	push   rsi
 103dadc:	push   rdi
 103dadd:	push   r12
 103dadf:	push   r13
 103dae1:	push   r14
 103dae3:	push   r15
 103dae5:	mov    rbp,rsp
 103dae8:	sub    rsp,0x70
 103daec:	mov    QWORD PTR [rbp-0x28],0xfffffffffffffffe
 103daf4:	mov    QWORD PTR [rsp+0xc0],rbx
 103dafc:	mov    r14d,r8d
 103daff:	mov    rsi,rdx
 103db02:	mov    r15,rcx
 103db05:	add    rcx,0x28
 103db09:	call   QWORD PTR [rip+0xfffffffffffc3fb1]        # 0x1001ac0
 103db0f:	nop
 103db10:	lea    rcx,[r15+0x30]
 103db14:	call   QWORD PTR [rip+0xfffffffffffc3fa6]        # 0x1001ac0
 103db1a:	nop
 103db1b:	lea    rcx,[r15+0x40]
 103db1f:	call   QWORD PTR [rip+0xfffffffffffc3f9b]        # 0x1001ac0
 103db25:	nop
 103db26:	lea    rcx,[r15+0x48]
 103db2a:	call   QWORD PTR [rip+0xfffffffffffc3f90]        # 0x1001ac0
 103db30:	nop
 103db31:	lea    rcx,[r15+0x50]
 103db35:	call   QWORD PTR [rip+0xfffffffffffc3f85]        # 0x1001ac0
 103db3b:	nop
 103db3c:	lea    rcx,[r15+0x70]
 103db40:	call   QWORD PTR [rip+0xfffffffffffc3f7a]        # 0x1001ac0
 103db46:	nop
 103db47:	lea    rcx,[rbp+0x48]
 103db4b:	call   QWORD PTR [rip+0xfffffffffffc3f6f]        # 0x1001ac0
 103db51:	nop
 103db52:	mov    rdx,QWORD PTR [rbp+0x58]
 103db56:	lea    rcx,[r15+0x28]
 103db5a:	call   QWORD PTR [rip+0xfffffffffffc3f38]        # 0x1001a98
 103db60:	mov    rdx,QWORD PTR [rbp+0x60]
 103db64:	lea    rcx,[r15+0x30]
 103db68:	call   QWORD PTR [rip+0xfffffffffffc3f2a]        # 0x1001a98
 103db6e:	movzx  r11d,BYTE PTR [rbp+0x70]
 103db73:	mov    BYTE PTR [r15+0x38],r11b
 103db77:	lea    rdx,[rip+0xfffffffffffc4292]        # 0x1001e10
 103db7e:	lea    rcx,[r15+0x70]
 103db82:	call   QWORD PTR [rip+0xfffffffffffc3f10]        # 0x1001a98
 103db88:	mov    QWORD PTR [r15+0x68],rsi
 103db8c:	mov    rsi,QWORD PTR [rbp+0x78]
 103db90:	test   rsi,rsi
 103db93:	setne  cl
 103db96:	mov    BYTE PTR [r15+0x39],cl
 103db9a:	mov    eax,DWORD PTR [rbp+0x88]
 103dba0:	mov    DWORD PTR [r15+0x80],eax
 103dba7:	mov    DWORD PTR [r15+0x84],r14d
 103dbae:	xor    r14d,r14d
 103dbb1:	mov    QWORD PTR [r15+0x78],r14
 103dbb5:	mov    QWORD PTR [r15+0x90],r14
 103dbbc:	test   cl,cl
 103dbbe:	jne    0x103dd12
 103dbc4:	mov    BYTE PTR [r15+0x20],r14b
 103dbc8:	xor    eax,eax
 103dbca:	mov    QWORD PTR [r15],rax
 103dbcd:	mov    QWORD PTR [r15+0x8],rax
 103dbd1:	mov    QWORD PTR [r15+0x10],rax
 103dbd5:	mov    QWORD PTR [r15+0x18],rax
 103dbd9:	mov    QWORD PTR [rsp+0x30],r14
 103dbde:	mov    DWORD PTR [rsp+0x28],0x40100080
 103dbe6:	mov    DWORD PTR [rsp+0x20],0x2
 103dbee:	xor    r9d,r9d
 103dbf1:	mov    edx,0x40000000
 103dbf6:	lea    r8d,[r14+0x1]
 103dbfa:	mov    rdi,QWORD PTR [rbp+0x68]
 103dbfe:	mov    rcx,rdi
 103dc01:	call   QWORD PTR [rip+0xfffffffffffc35d9]        # 0x10011e0
 103dc07:	mov    QWORD PTR [r15+0x60],rax
 103dc0b:	cmp    rax,0xffffffffffffffff
 103dc0f:	jne    0x103dcd0
 103dc15:	call   QWORD PTR [rip+0xfffffffffffc3935]        # 0x1001550
 103dc1b:	mov    edx,eax
 103dc1d:	lea    rcx,[rbp-0x30]
 103dc21:	call   0x10132d0
 103dc26:	mov    rbx,rax
 103dc29:	mov    edx,0xc000c440
 103dc2e:	lea    rcx,[rbp+0x78]
 103dc32:	call   0x10132d0
 103dc37:	nop
 103dc38:	mov    rcx,rax
 103dc3b:	call   QWORD PTR [rip+0xfffffffffffc3ea7]        # 0x1001ae8
 103dc41:	mov    rdx,rax
 103dc44:	mov    r9,QWORD PTR [rbx]
 103dc47:	mov    r8,rdi
 103dc4a:	lea    rcx,[rbp+0x48]
 103dc4e:	call   QWORD PTR [rip+0xfffffffffffc3dec]        # 0x1001a40
 103dc54:	nop
 103dc55:	lea    rcx,[rbp+0x78]
 103dc59:	call   QWORD PTR [rip+0xfffffffffffc3e49]        # 0x1001aa8
 103dc5f:	nop
 103dc60:	lea    rcx,[rbp-0x30]
 103dc64:	call   QWORD PTR [rip+0xfffffffffffc3e3e]        # 0x1001aa8
 103dc6a:	mov    rbx,QWORD PTR [r15+0x68]
 103dc6e:	mov    rax,QWORD PTR [rbx+0x8]
 103dc72:	movsxd rcx,DWORD PTR [rax+0x4]
 103dc76:	mov    rdi,QWORD PTR [rcx+rbx*1+0x8]
 103dc7b:	lea    rcx,[rbp+0x48]
 103dc7f:	call   QWORD PTR [rip+0xfffffffffffc3e63]        # 0x1001ae8
 103dc85:	mov    r8,rax
 103dc88:	mov    rax,QWORD PTR [rbx+0x8]
 103dc8c:	movsxd rcx,DWORD PTR [rax+0x4]
 103dc90:	add    rcx,0x8
 103dc94:	add    rcx,rbx
 103dc97:	mov    BYTE PTR [rsp+0x30],0x1
 103dc9c:	mov    BYTE PTR [rsp+0x28],0x1
 103dca1:	mov    DWORD PTR [rsp+0x20],r14d
 103dca6:	xor    r9d,r9d
 103dca9:	mov    edx,0xc000c440
 103dcae:	call   QWORD PTR [rdi+0x8]
 103dcb1:	lea    rdx,[rbp+0x48]
 103dcb5:	lea    rcx,[rbp+0x78]
 103dcb9:	call   QWORD PTR [rip+0xfffffffffffc3cf9]        # 0x10019b8
 103dcbf:	lea    rdx,[rip+0x22bb2]        # 0x1060878
 103dcc6:	lea    rcx,[rbp+0x78]
 103dcca:	call   0x10401ce
 103dccf:	int3   
 103dcd0:	mov    DWORD PTR [rbp+0x70],r14d
 103dcd4:	mov    WORD PTR [rbp+0x70],0xfeff
 103dcda:	mov    ecx,0x8
 103dcdf:	call   0x103f9d2
 103dce4:	mov    QWORD PTR [rbp+0x78],rax
 103dce8:	test   rax,rax
 103dceb:	je     0x103dcfc
 103dced:	lea    rdx,[rbp+0x70]
 103dcf1:	mov    rcx,rax
 103dcf4:	call   QWORD PTR [rip+0xfffffffffffc3db6]        # 0x1001ab0
 103dcfa:	jmp    0x103dcff
 103dcfc:	mov    rax,r14
 103dcff:	xor    r8d,r8d
 103dd02:	mov    rdx,rax
 103dd05:	mov    rcx,r15
 103dd08:	call   0x103ef10
 103dd0d:	jmp    0x103e117
 103dd12:	lea    rcx,[rbp+0x78]
 103dd16:	call   QWORD PTR [rip+0xfffffffffffc3da4]        # 0x1001ac0
 103dd1c:	nop
 103dd1d:	mov    DWORD PTR [r15+0x58],r14d
 103dd21:	mov    rdx,rsi
 103dd24:	lea    rcx,[r15+0x40]
 103dd28:	call   QWORD PTR [rip+0xfffffffffffc3d6a]        # 0x1001a98
 103dd2e:	mov    rdx,QWORD PTR [rbp+0x80]
 103dd35:	lea    rcx,[r15+0x48]
 103dd39:	call   QWORD PTR [rip+0xfffffffffffc3d59]        # 0x1001a98
 103dd3f:	mov    r8,QWORD PTR [rbp+0x58]
 103dd43:	lea    rdx,[rip+0xfffffffffffcbdc6]        # 0x1009b10
 103dd4a:	lea    rcx,[r15+0x50]
 103dd4e:	call   QWORD PTR [rip+0xfffffffffffc3cec]        # 0x1001a40
 103dd54:	cmp    BYTE PTR [rbp+0x90],0x0
 103dd5b:	je     0x103de37
 103dd61:	mov    rax,QWORD PTR [r15+0x50]
 103dd65:	mov    QWORD PTR [rsp+0x28],rax
 103dd6a:	mov    rax,QWORD PTR [r15+0x48]
 103dd6e:	mov    QWORD PTR [rsp+0x20],rax
 103dd73:	mov    r9,QWORD PTR [r15+0x50]
 103dd77:	mov    r8,rax
 103dd7a:	lea    rdx,[rip+0xfffffffffffcbdbf]        # 0x1009b40
 103dd81:	lea    rcx,[rbp+0x78]
 103dd85:	call   QWORD PTR [rip+0xfffffffffffc3cb5]        # 0x1001a40
 103dd8b:	mov    r11,QWORD PTR [r15+0x68]
 103dd8f:	mov    rdi,QWORD PTR [r11]
 103dd92:	lea    r14,[r15+0x28]
 103dd96:	mov    rcx,r14
 103dd99:	call   QWORD PTR [rip+0xfffffffffffc3d49]        # 0x1001ae8
 103dd9f:	mov    rbx,rax
 103dda2:	lea    rcx,[rbp+0x78]
 103dda6:	call   QWORD PTR [rip+0xfffffffffffc3d3c]        # 0x1001ae8
 103ddac:	mov    rdx,rax
 103ddaf:	mov    BYTE PTR [rsp+0x38],0x0
 103ddb4:	mov    BYTE PTR [rsp+0x30],0x1
 103ddb9:	lea    rax,[rbp-0x20]
 103ddbd:	mov    QWORD PTR [rsp+0x28],rax
 103ddc2:	mov    QWORD PTR [rsp+0x20],rsi
 103ddc7:	mov    r9b,0x1
 103ddca:	mov    r8,rbx
 103ddcd:	mov    rcx,QWORD PTR [r15+0x68]
 103ddd1:	call   QWORD PTR [rdi+0x118]
 103ddd7:	test   al,al
 103ddd9:	jne    0x103de3b
 103dddb:	mov    edx,0xc000c48f
 103dde0:	lea    rcx,[rbp-0x30]
 103dde4:	call   0x10132d0
 103dde9:	mov    rdi,rax
 103ddec:	call   QWORD PTR [rip+0xfffffffffffc375e]        # 0x1001550
 103ddf2:	mov    ebx,eax
 103ddf4:	mov    rcx,rdi
 103ddf7:	call   QWORD PTR [rip+0xfffffffffffc3ceb]        # 0x1001ae8
 103ddfd:	mov    rdx,rax
 103de00:	mov    r8d,ebx
 103de03:	lea    rcx,[rbp+0x48]
 103de07:	call   QWORD PTR [rip+0xfffffffffffc3c33]        # 0x1001a40
 103de0d:	nop
 103de0e:	lea    rcx,[rbp-0x30]
 103de12:	call   QWORD PTR [rip+0xfffffffffffc3c90]        # 0x1001aa8
 103de18:	lea    rdx,[rbp+0x48]
 103de1c:	lea    rcx,[rbp-0x30]
 103de20:	call   QWORD PTR [rip+0xfffffffffffc3b92]        # 0x10019b8
 103de26:	lea    rdx,[rip+0x22a4b]        # 0x1060878
 103de2d:	lea    rcx,[rbp-0x30]
 103de31:	call   0x10401ce
 103de36:	int3   
 103de37:	lea    r14,[r15+0x28]
 103de3b:	mov    rax,QWORD PTR [r15+0x50]
 103de3f:	mov    QWORD PTR [rsp+0x20],rax
 103de44:	mov    r9,rax
 103de47:	mov    r8,QWORD PTR [r15+0x48]
 103de4b:	lea    rdx,[rip+0xfffffffffffcbd6e]        # 0x1009bc0
 103de52:	lea    rcx,[rbp+0x78]
 103de56:	call   QWORD PTR [rip+0xfffffffffffc3be4]        # 0x1001a40
 103de5c:	mov    r11,QWORD PTR [r15+0x68]
 103de60:	mov    rdi,QWORD PTR [r11]
 103de63:	mov    rcx,r14
 103de66:	call   QWORD PTR [rip+0xfffffffffffc3c7c]        # 0x1001ae8
 103de6c:	mov    rbx,rax
 103de6f:	lea    rcx,[rbp+0x78]
 103de73:	call   QWORD PTR [rip+0xfffffffffffc3c6f]        # 0x1001ae8
 103de79:	mov    rdx,rax
 103de7c:	mov    BYTE PTR [rsp+0x38],0x0
 103de81:	mov    BYTE PTR [rsp+0x30],0x1
 103de86:	lea    rax,[rbp-0x20]
 103de8a:	mov    QWORD PTR [rsp+0x28],rax
 103de8f:	mov    QWORD PTR [rsp+0x20],rsi
 103de94:	mov    r9b,0x1
 103de97:	mov    r8,rbx
 103de9a:	mov    rcx,QWORD PTR [r15+0x68]
 103de9e:	call   QWORD PTR [rdi+0x118]
 103dea4:	test   al,al
 103dea6:	jne    0x103df04
 103dea8:	mov    edx,0xc000c48e
 103dead:	lea    rcx,[rbp-0x30]
 103deb1:	call   0x10132d0
 103deb6:	mov    rdi,rax
 103deb9:	call   QWORD PTR [rip+0xfffffffffffc3691]        # 0x1001550
 103debf:	mov    ebx,eax
 103dec1:	mov    rcx,rdi
 103dec4:	call   QWORD PTR [rip+0xfffffffffffc3c1e]        # 0x1001ae8
 103deca:	mov    rdx,rax
 103decd:	mov    r8d,ebx
 103ded0:	lea    rcx,[rbp+0x48]
 103ded4:	call   QWORD PTR [rip+0xfffffffffffc3b66]        # 0x1001a40
 103deda:	nop
 103dedb:	lea    rcx,[rbp-0x30]
 103dedf:	call   QWORD PTR [rip+0xfffffffffffc3bc3]        # 0x1001aa8
 103dee5:	lea    rdx,[rbp+0x48]
 103dee9:	lea    rcx,[rbp-0x30]
 103deed:	call   QWORD PTR [rip+0xfffffffffffc3ac5]        # 0x10019b8
 103def3:	lea    rdx,[rip+0x2297e]        # 0x1060878
 103defa:	lea    rcx,[rbp-0x30]
 103defe:	call   0x10401ce
 103df03:	int3   
 103df04:	mov    r9,QWORD PTR [r15+0x50]
 103df08:	mov    r8,QWORD PTR [r15+0x48]
 103df0c:	lea    rdx,[rip+0xfffffffffffcbe4d]        # 0x1009d60
 103df13:	lea    rcx,[rbp+0x78]
 103df17:	call   QWORD PTR [rip+0xfffffffffffc3b23]        # 0x1001a40
 103df1d:	mov    r11,QWORD PTR [r15+0x68]
 103df21:	mov    rdi,QWORD PTR [r11]
 103df24:	mov    rcx,r14
 103df27:	call   QWORD PTR [rip+0xfffffffffffc3bbb]        # 0x1001ae8
 103df2d:	mov    rbx,rax
 103df30:	lea    rcx,[rbp+0x78]
 103df34:	call   QWORD PTR [rip+0xfffffffffffc3bae]        # 0x1001ae8
 103df3a:	mov    rdx,rax
 103df3d:	mov    BYTE PTR [rsp+0x38],0x0
 103df42:	mov    BYTE PTR [rsp+0x30],0x1
 103df47:	lea    rax,[rbp-0x20]
 103df4b:	mov    QWORD PTR [rsp+0x28],rax
 103df50:	mov    QWORD PTR [rsp+0x20],rsi
 103df55:	mov    r9b,0x1
 103df58:	mov    r8,rbx
 103df5b:	mov    rcx,QWORD PTR [r15+0x68]
 103df5f:	call   QWORD PTR [rdi+0x118]
 103df65:	test   al,al
 103df67:	jne    0x103dfc5
 103df69:	mov    edx,0xc000c48e
 103df6e:	lea    rcx,[rbp-0x30]
 103df72:	call   0x10132d0
 103df77:	mov    rdi,rax
 103df7a:	call   QWORD PTR [rip+0xfffffffffffc35d0]        # 0x1001550
 103df80:	mov    ebx,eax
 103df82:	mov    rcx,rdi
 103df85:	call   QWORD PTR [rip+0xfffffffffffc3b5d]        # 0x1001ae8
 103df8b:	mov    rdx,rax
 103df8e:	mov    r8d,ebx
 103df91:	lea    rcx,[rbp+0x48]
 103df95:	call   QWORD PTR [rip+0xfffffffffffc3aa5]        # 0x1001a40
 103df9b:	nop
 103df9c:	lea    rcx,[rbp-0x30]
 103dfa0:	call   QWORD PTR [rip+0xfffffffffffc3b02]        # 0x1001aa8
 103dfa6:	lea    rdx,[rbp+0x48]
 103dfaa:	lea    rcx,[rbp-0x30]
 103dfae:	call   QWORD PTR [rip+0xfffffffffffc3a04]        # 0x10019b8
 103dfb4:	lea    rdx,[rip+0x228bd]        # 0x1060878
 103dfbb:	lea    rcx,[rbp-0x30]
 103dfbf:	call   0x10401ce
 103dfc4:	int3   
 103dfc5:	mov    ecx,0x4020
 103dfca:	call   0x103f9d2
 103dfcf:	mov    rdi,rax
 103dfd2:	mov    QWORD PTR [rbp-0x30],rax
 103dfd6:	test   rax,rax
 103dfd9:	je     0x103e04d
 103dfdb:	mov    rcx,QWORD PTR [r15+0x68]
 103dfdf:	test   rcx,rcx
 103dfe2:	jne    0x103dfe9
 103dfe4:	xor    r14d,r14d
 103dfe7:	jmp    0x103dff8
 103dfe9:	mov    rax,QWORD PTR [rcx+0x8]
 103dfed:	movsxd rdx,DWORD PTR [rax+0x4]
 103dff1:	lea    r14,[rcx+0x8]
 103dff5:	add    r14,rdx
 103dff8:	lea    rcx,[r15+0x50]
 103dffc:	call   QWORD PTR [rip+0xfffffffffffc3ae6]        # 0x1001ae8
 103e002:	mov    rbx,rax
 103e005:	lea    rcx,[r15+0x48]
 103e009:	call   QWORD PTR [rip+0xfffffffffffc3ad9]        # 0x1001ae8
 103e00f:	mov    r9,rax
 103e012:	mov    rcx,QWORD PTR [rbp+0xa8]
 103e019:	mov    QWORD PTR [rsp+0x38],rcx
 103e01e:	mov    rcx,QWORD PTR [rbp+0xa0]
 103e025:	mov    QWORD PTR [rsp+0x30],rcx
 103e02a:	movzx  ecx,BYTE PTR [rbp+0x98]
 103e031:	mov    BYTE PTR [rsp+0x28],cl
 103e035:	mov    QWORD PTR [rsp+0x20],rbx
 103e03a:	mov    r8,rsi
 103e03d:	mov    rdx,r14
 103e040:	mov    rcx,rdi
 103e043:	call   0x100d1a0
 103e048:	xor    r14d,r14d
 103e04b:	jmp    0x103e053
 103e04d:	xor    r14d,r14d
 103e050:	mov    eax,r14d
 103e053:	mov    QWORD PTR [r15+0x78],rax
 103e057:	test   rax,rax
 103e05a:	je     0x103e18d
 103e060:	mov    edx,0xe7
 103e065:	mov    r8d,0x2e
 103e06b:	mov    rcx,rax
 103e06e:	call   0x100d260
 103e073:	test   al,al
 103e075:	je     0x103e131
 103e07b:	mov    edx,0xe7
 103e080:	mov    r8d,0x3c
 103e086:	mov    rcx,QWORD PTR [r15+0x78]
 103e08a:	call   0x100d260
 103e08f:	test   al,al
 103e091:	je     0x103e131
 103e097:	mov    edx,0x38
 103e09c:	lea    r8d,[rdx-0x34]
 103e0a0:	mov    rcx,QWORD PTR [r15+0x78]
 103e0a4:	call   0x100d260
 103e0a9:	test   al,al
 103e0ab:	je     0x103e131
 103e0b1:	mov    edx,0x38
 103e0b6:	lea    r8d,[rdx-0x34]
 103e0ba:	mov    rcx,QWORD PTR [r15+0x78]
 103e0be:	call   0x100d260
 103e0c3:	test   al,al
 103e0c5:	je     0x103e131
 103e0c7:	mov    edx,0xe7
 103e0cc:	lea    r8d,[rdx-0x6f]
 103e0d0:	mov    rcx,QWORD PTR [r15+0x78]
 103e0d4:	call   0x100d260
 103e0d9:	test   al,al
 103e0db:	je     0x103e131
 103e0dd:	mov    edx,0xe7
 103e0e2:	mov    r8d,0x3c
 103e0e8:	mov    rcx,QWORD PTR [r15+0x78]
 103e0ec:	call   0x100d260
 103e0f1:	test   al,al
 103e0f3:	je     0x103e131
 103e0f5:	mov    edx,0x63
 103e0fa:	mov    r8d,0xffff
 103e100:	mov    rcx,QWORD PTR [r15+0x78]
 103e104:	call   0x100d260
 103e109:	test   al,al
 103e10b:	je     0x103e131
 103e10d:	lea    rcx,[rbp+0x78]
 103e111:	call   QWORD PTR [rip+0xfffffffffffc3991]        # 0x1001aa8
 103e117:	mov    QWORD PTR [r15+0x88],r14
 103e11e:	lea    rcx,[rbp+0x48]
 103e122:	call   QWORD PTR [rip+0xfffffffffffc3980]        # 0x1001aa8
 103e128:	nop
 103e129:	mov    rax,r15
 103e12c:	jmp    0x103e1e9
 103e131:	mov    edx,0xc000c491
 103e136:	lea    rcx,[rbp-0x30]
 103e13a:	call   0x10132d0
 103e13f:	mov    rdi,rax
 103e142:	call   QWORD PTR [rip+0xfffffffffffc3408]        # 0x1001550
 103e148:	mov    ebx,eax
 103e14a:	mov    rcx,rdi
 103e14d:	call   QWORD PTR [rip+0xfffffffffffc3995]        # 0x1001ae8
 103e153:	mov    rdx,rax
 103e156:	mov    r8d,ebx
 103e159:	lea    rcx,[rbp+0x48]
 103e15d:	call   QWORD PTR [rip+0xfffffffffffc38dd]        # 0x1001a40
 103e163:	nop
 103e164:	lea    rcx,[rbp-0x30]
 103e168:	call   QWORD PTR [rip+0xfffffffffffc393a]        # 0x1001aa8
 103e16e:	lea    rdx,[rbp+0x48]
 103e172:	lea    rcx,[rbp-0x30]
 103e176:	call   QWORD PTR [rip+0xfffffffffffc383c]        # 0x10019b8
 103e17c:	lea    rdx,[rip+0x226f5]        # 0x1060878
 103e183:	lea    rcx,[rbp-0x30]
 103e187:	call   0x10401ce
 103e18c:	int3   
 103e18d:	mov    edx,0xc000c490
 103e192:	lea    rcx,[rbp-0x30]
 103e196:	call   0x10132d0
 103e19b:	mov    rdi,rax
 103e19e:	call   QWORD PTR [rip+0xfffffffffffc33ac]        # 0x1001550
 103e1a4:	mov    ebx,eax
 103e1a6:	mov    rcx,rdi
 103e1a9:	call   QWORD PTR [rip+0xfffffffffffc3939]        # 0x1001ae8
 103e1af:	mov    rdx,rax
 103e1b2:	mov    r8d,ebx
 103e1b5:	lea    rcx,[rbp+0x48]
 103e1b9:	call   QWORD PTR [rip+0xfffffffffffc3881]        # 0x1001a40
 103e1bf:	nop
 103e1c0:	lea    rcx,[rbp-0x30]
 103e1c4:	call   QWORD PTR [rip+0xfffffffffffc38de]        # 0x1001aa8
 103e1ca:	lea    rdx,[rbp+0x48]
 103e1ce:	lea    rcx,[rbp-0x30]
 103e1d2:	call   QWORD PTR [rip+0xfffffffffffc37e0]        # 0x10019b8
 103e1d8:	lea    rdx,[rip+0x22699]        # 0x1060878
 103e1df:	lea    rcx,[rbp-0x30]
 103e1e3:	call   0x10401ce
 103e1e8:	nop
 103e1e9:	mov    rbx,QWORD PTR [rsp+0xc0]
 103e1f1:	add    rsp,0x70
 103e1f5:	pop    r15
 103e1f7:	pop    r14
 103e1f9:	pop    r13
 103e1fb:	pop    r12
 103e1fd:	pop    rdi
 103e1fe:	pop    rsi
 103e1ff:	pop    rbp
 103e200:	ret    
 103e201:	int3   
 103e202:	int3   
 103e203:	int3   
 103e204:	int3   
 103e205:	int3   
 103e206:	int3   
 103e207:	int3   
 103e208:	int3   
 103e209:	int3   
 103e20a:	int3   
 103e20b:	int3   
 103e20c:	int3   
 103e20d:	int3   
 103e20e:	int3   
 103e20f:	int3   
 103e210:	mov    QWORD PTR [rsp+0x8],rcx
 103e215:	push   rbp
 103e216:	push   rsi
 103e217:	push   rdi
 103e218:	push   r14
 103e21a:	push   r15
 103e21c:	sub    rsp,0x30
 103e220:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 103e229:	mov    QWORD PTR [rsp+0x70],rbx
 103e22e:	mov    rbp,rcx
 103e231:	mov    rsi,QWORD PTR [rcx+0x88]
 103e238:	xor    r14d,r14d
 103e23b:	test   rsi,rsi
 103e23e:	je     0x103e2f6
 103e244:	lea    r15,[rip+0xfffffffffffcb89d]        # 0x1009ae8
 103e24b:	nop    DWORD PTR [rax+rax*1+0x0]
 103e250:	mov    rdi,rsi
 103e253:	mov    rsi,QWORD PTR [rsi+0x40]
 103e257:	mov    rbx,QWORD PTR [rdi+0x10]
 103e25b:	test   rbx,rbx
 103e25e:	je     0x103e272
 103e260:	mov    rcx,QWORD PTR [rbx+0x10]
 103e264:	call   QWORD PTR [rip+0xfffffffffffc302e]        # 0x1001298
 103e26a:	mov    rbx,QWORD PTR [rbx]
 103e26d:	test   rbx,rbx
 103e270:	jne    0x103e260
 103e272:	mov    rax,QWORD PTR [rdi+0x10]
 103e276:	test   rax,rax
 103e279:	je     0x103e288
 103e27b:	nop    DWORD PTR [rax+rax*1+0x0]
 103e280:	mov    rax,QWORD PTR [rax]
 103e283:	test   rax,rax
 103e286:	jne    0x103e280
 103e288:	mov    QWORD PTR [rdi+0x20],r14
 103e28c:	mov    QWORD PTR [rdi+0x28],r14
 103e290:	mov    QWORD PTR [rdi+0x18],r14
 103e294:	mov    QWORD PTR [rdi+0x10],r14
 103e298:	mov    rcx,QWORD PTR [rdi+0x30]
 103e29c:	call   0x103f9ae
 103e2a1:	mov    QWORD PTR [rdi+0x30],r14
 103e2a5:	mov    QWORD PTR [rsp+0x68],rdi
 103e2aa:	mov    QWORD PTR [rdi+0x8],r15
 103e2ae:	mov    rax,QWORD PTR [rdi+0x10]
 103e2b2:	test   rax,rax
 103e2b5:	je     0x103e2bf
 103e2b7:	mov    rax,QWORD PTR [rax]
 103e2ba:	test   rax,rax
 103e2bd:	jne    0x103e2b7
 103e2bf:	mov    QWORD PTR [rdi+0x20],r14
 103e2c3:	mov    QWORD PTR [rdi+0x28],r14
 103e2c7:	mov    QWORD PTR [rdi+0x18],r14
 103e2cb:	mov    QWORD PTR [rdi+0x10],r14
 103e2cf:	mov    rcx,QWORD PTR [rdi+0x30]
 103e2d3:	call   0x103f9ae
 103e2d8:	mov    QWORD PTR [rdi+0x30],r14
 103e2dc:	mov    rcx,rdi
 103e2df:	call   QWORD PTR [rip+0xfffffffffffc37c3]        # 0x1001aa8
 103e2e5:	mov    rcx,rdi
 103e2e8:	call   0x103f95a
 103e2ed:	test   rsi,rsi
 103e2f0:	jne    0x103e250
 103e2f6:	mov    rbx,QWORD PTR [rbp+0x90]
 103e2fd:	test   rbx,rbx
 103e300:	je     0x103e31a
 103e302:	mov    rcx,rbx
 103e305:	call   QWORD PTR [rip+0xfffffffffffc379d]        # 0x1001aa8
 103e30b:	mov    rcx,rbx
 103e30e:	call   0x103f95a
 103e313:	mov    QWORD PTR [rbp+0x90],r14
 103e31a:	cmp    BYTE PTR [rbp+0x39],0x0
 103e31e:	jne    0x103e32b
 103e320:	lea    rcx,[rbp+0x60]
 103e324:	call   0x1034510
 103e329:	jmp    0x103e345
 103e32b:	mov    rbx,QWORD PTR [rbp+0x78]
 103e32f:	test   rbx,rbx
 103e332:	je     0x103e345
 103e334:	mov    rcx,rbx
 103e337:	call   0x100d220
 103e33c:	mov    rcx,rbx
 103e33f:	call   0x103f95a
 103e344:	nop
 103e345:	lea    rcx,[rbp+0x70]
 103e349:	call   QWORD PTR [rip+0xfffffffffffc3759]        # 0x1001aa8
 103e34f:	nop
 103e350:	lea    rcx,[rbp+0x50]
 103e354:	call   QWORD PTR [rip+0xfffffffffffc374e]        # 0x1001aa8
 103e35a:	nop
 103e35b:	lea    rcx,[rbp+0x48]
 103e35f:	call   QWORD PTR [rip+0xfffffffffffc3743]        # 0x1001aa8
 103e365:	nop
 103e366:	lea    rcx,[rbp+0x40]
 103e36a:	call   QWORD PTR [rip+0xfffffffffffc3738]        # 0x1001aa8
 103e370:	nop
 103e371:	lea    rcx,[rbp+0x30]
 103e375:	call   QWORD PTR [rip+0xfffffffffffc372d]        # 0x1001aa8
 103e37b:	nop
 103e37c:	lea    rcx,[rbp+0x28]
 103e380:	mov    rbx,QWORD PTR [rsp+0x70]
 103e385:	add    rsp,0x30
 103e389:	pop    r15
 103e38b:	pop    r14
 103e38d:	pop    rdi
 103e38e:	pop    rsi
 103e38f:	pop    rbp
 103e390:	rex.W jmp QWORD PTR [rip+0xfffffffffffc3711]        # 0x1001aa8
 103e397:	int3   
 103e398:	int3   
 103e399:	int3   
 103e39a:	int3   
 103e39b:	int3   
 103e39c:	int3   
 103e39d:	int3   
 103e39e:	int3   
 103e39f:	int3   
 103e3a0:	mov    QWORD PTR [rsp+0x10],rdx
 103e3a5:	push   rdi
 103e3a6:	sub    rsp,0x30
 103e3aa:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
 103e3b3:	mov    QWORD PTR [rsp+0x40],rbx
 103e3b8:	movzx  ebx,r8w
 103e3bc:	mov    rdi,rdx
 103e3bf:	mov    DWORD PTR [rsp+0x20],0x0
 103e3c7:	mov    rcx,rdx
 103e3ca:	call   QWORD PTR [rip+0xfffffffffffc36f0]        # 0x1001ac0
 103e3d0:	mov    DWORD PTR [rsp+0x20],0x1
 103e3d8:	cmp    ebx,0x10
 103e3db:	ja     0x103e426
 103e3dd:	lea    rdx,[rip+0xfffffffffffc1c1c]        # 0x1000000
 103e3e4:	mov    ecx,DWORD PTR [rdx+rbx*4+0x3e448]
 103e3eb:	add    rcx,rdx
 103e3ee:	jmp    rcx
 103e3f0:	lea    rdx,[rip+0xfffffffffffcbad1]        # 0x1009ec8
 103e3f7:	jmp    0x103e42d
 103e3f9:	lea    rdx,[rip+0xfffffffffffcbad8]        # 0x1009ed8
 103e400:	jmp    0x103e42d
 103e402:	lea    rdx,[rip+0xfffffffffffcbadf]        # 0x1009ee8
 103e409:	jmp    0x103e42d
 103e40b:	lea    rdx,[rip+0xfffffffffffcbae6]        # 0x1009ef8
 103e412:	jmp    0x103e42d
 103e414:	lea    rdx,[rip+0xfffffffffffcbaf5]        # 0x1009f10
 103e41b:	jmp    0x103e42d
 103e41d:	lea    rdx,[rip+0xfffffffffffcbb0c]        # 0x1009f30
 103e424:	jmp    0x103e42d
 103e426:	lea    rdx,[rip+0xfffffffffffcbb23]        # 0x1009f50
 103e42d:	mov    rcx,rdi
 103e430:	call   QWORD PTR [rip+0xfffffffffffc3662]        # 0x1001a98
 103e436:	mov    rax,rdi
 103e439:	mov    rbx,QWORD PTR [rsp+0x40]
 103e43e:	add    rsp,0x30
 103e442:	pop    rdi
 103e443:	ret    
 103e444:	int3   
 103e445:	nop    DWORD PTR [rax]
 103e448:	lock jrcxz 0x103e44e
 103e44b:	add    cl,bh
 103e44d:	jrcxz  0x103e452
 103e44f:	add    BYTE PTR [rdx],al
 103e451:	in     al,0x3
 103e453:	add    BYTE PTR [rsi],ah
 103e455:	in     al,0x3
 103e457:	add    BYTE PTR [rbx],cl
 103e459:	in     al,0x3
 103e45b:	add    BYTE PTR [rsi],ah
 103e45d:	in     al,0x3
 103e45f:	add    BYTE PTR [rsi],ah
 103e461:	in     al,0x3
 103e463:	add    BYTE PTR [rsi],ah
 103e465:	in     al,0x3
 103e467:	add    BYTE PTR [rsp+riz*8],dl
 103e46a:	add    eax,DWORD PTR [rax]
 103e46c:	es in  al,0x3
 103e46f:	add    BYTE PTR [rsi],ah
 103e471:	in     al,0x3
 103e473:	add    BYTE PTR [rsi],ah
 103e475:	in     al,0x3
 103e477:	add    BYTE PTR [rsi],ah
 103e479:	in     al,0x3
 103e47b:	add    BYTE PTR [rsi],ah
 103e47d:	in     al,0x3
 103e47f:	add    BYTE PTR [rsi],ah
 103e481:	in     al,0x3
 103e483:	add    BYTE PTR [rsi],ah
 103e485:	in     al,0x3
 103e487:	add    BYTE PTR [rip+0xffffffffcc0003e4],bl        # 0xffffffffcd03e871
 103e48d:	int3   
 103e48e:	int3   
 103e48f:	int3   
 103e490:	int3   
 103e491:	int3   
 103e492:	int3   
 103e493:	int3   
 103e494:	int3   
 103e495:	int3   
 103e496:	int3   
 103e497:	int3   
 103e498:	int3   
 103e499:	int3   
 103e49a:	int3   
 103e49b:	int3   
 103e49c:	int3   
 103e49d:	int3   
 103e49e:	int3   
 103e49f:	int3   
 103e4a0:	rex push rdi
 103e4a2:	sub    rsp,0x30
 103e4a6:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 103e4af:	mov    QWORD PTR [rsp+0x40],rbx
 103e4b4:	mov    rbx,rdx
 103e4b7:	lea    rdx,[rip+0xfffffffffffcbaa2]        # 0x1009f60
 103e4be:	mov    rcx,rbx
 103e4c1:	call   QWORD PTR [rip+0xfffffffffffc35c1]        # 0x1001a88
 103e4c7:	cmp    eax,0xffffffff
 103e4ca:	je     0x103e592
 103e4d0:	mov    r8d,0x1
 103e4d6:	lea    rdx,[rsp+0x50]
 103e4db:	mov    rcx,rbx
 103e4de:	call   QWORD PTR [rip+0xfffffffffffc3444]        # 0x1001928
 103e4e4:	mov    rdi,rax
 103e4e7:	mov    rcx,rax
 103e4ea:	call   QWORD PTR [rip+0xfffffffffffc3600]        # 0x1001af0
 103e4f0:	cmp    eax,0x1
 103e4f3:	jne    0x103e50b
 103e4f5:	xor    edx,edx
 103e4f7:	mov    rcx,rdi
 103e4fa:	call   QWORD PTR [rip+0xfffffffffffc34d0]        # 0x10019d0
 103e500:	cmp    ax,0xa
 103e504:	jne    0x103e50b
 103e506:	mov    dil,0x1
 103e509:	jmp    0x103e50e
 103e50b:	xor    dil,dil
 103e50e:	lea    rcx,[rsp+0x50]
 103e513:	call   QWORD PTR [rip+0xfffffffffffc358f]        # 0x1001aa8
 103e519:	test   dil,dil
 103e51c:	je     0x103e54d
 103e51e:	mov    rcx,rbx
 103e521:	call   QWORD PTR [rip+0xfffffffffffc35c1]        # 0x1001ae8
 103e527:	mov    rdx,rax
 103e52a:	lea    rcx,[rsp+0x50]
 103e52f:	call   0x10353c0
 103e534:	nop
 103e535:	mov    rdx,rax
 103e538:	mov    rcx,rbx
 103e53b:	call   QWORD PTR [rip+0xfffffffffffc355f]        # 0x1001aa0
 103e541:	nop
 103e542:	lea    rcx,[rsp+0x50]
 103e547:	call   QWORD PTR [rip+0xfffffffffffc355b]        # 0x1001aa8
 103e54d:	lea    r8,[rip+0xfffffffffffc8c20]        # 0x1007174
 103e554:	lea    rdx,[rip+0xfffffffffffc721d]        # 0x1005778
 103e55b:	mov    rcx,rbx
 103e55e:	call   QWORD PTR [rip+0xfffffffffffc344c]        # 0x10019b0
 103e564:	lea    r8,[rip+0xfffffffffffcb9fd]        # 0x1009f68
 103e56b:	lea    rdx,[rip+0xfffffffffffcb9fe]        # 0x1009f70
 103e572:	mov    rcx,rbx
 103e575:	call   QWORD PTR [rip+0xfffffffffffc3435]        # 0x10019b0
 103e57b:	lea    r8,[rip+0xfffffffffffc4cfe]        # 0x1003280
 103e582:	lea    rdx,[rip+0xfffffffffffc3b37]        # 0x10020c0
 103e589:	mov    rcx,rbx
 103e58c:	call   QWORD PTR [rip+0xfffffffffffc341e]        # 0x10019b0
 103e592:	mov    rbx,QWORD PTR [rsp+0x40]
 103e597:	add    rsp,0x30
 103e59b:	pop    rdi
 103e59c:	ret    
 103e59d:	int3   
 103e59e:	int3   
 103e59f:	int3   
 103e5a0:	int3   
 103e5a1:	int3   
 103e5a2:	int3   
 103e5a3:	int3   
 103e5a4:	int3   
 103e5a5:	int3   
 103e5a6:	int3   
 103e5a7:	int3   
 103e5a8:	int3   
 103e5a9:	int3   
 103e5aa:	int3   
 103e5ab:	int3   
 103e5ac:	int3   
 103e5ad:	int3   
 103e5ae:	int3   
 103e5af:	int3   
 103e5b0:	rex push rbx
 103e5b2:	sub    rsp,0x30
 103e5b6:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 103e5bf:	mov    rbx,rdx
 103e5c2:	lea    rdx,[rip+0xfffffffffffcb9af]        # 0x1009f78
 103e5c9:	mov    rcx,rbx
 103e5cc:	call   QWORD PTR [rip+0xfffffffffffc34b6]        # 0x1001a88
 103e5d2:	cmp    eax,0xffffffff
 103e5d5:	je     0x103e63c
 103e5d7:	lea    r8,[rip+0xfffffffffffcb9a6]        # 0x1009f84
 103e5de:	lea    rdx,[rip+0xfffffffffffc692f]        # 0x1004f14
 103e5e5:	mov    rcx,rbx
 103e5e8:	call   QWORD PTR [rip+0xfffffffffffc33c2]        # 0x10019b0
 103e5ee:	mov    r8,rbx
 103e5f1:	lea    rdx,[rip+0xfffffffffffc691c]        # 0x1004f14
 103e5f8:	lea    rcx,[rsp+0x58]
 103e5fd:	call   0x1013d70
 103e602:	nop
 103e603:	lea    r8,[rip+0xfffffffffffc690a]        # 0x1004f14
 103e60a:	mov    rdx,rax
 103e60d:	lea    rcx,[rsp+0x50]
 103e612:	call   0x100af10
 103e617:	nop
 103e618:	mov    rdx,rax
 103e61b:	mov    rcx,rbx
 103e61e:	call   QWORD PTR [rip+0xfffffffffffc347c]        # 0x1001aa0
 103e624:	nop
 103e625:	lea    rcx,[rsp+0x50]
 103e62a:	call   QWORD PTR [rip+0xfffffffffffc3478]        # 0x1001aa8
 103e630:	nop
 103e631:	lea    rcx,[rsp+0x58]
 103e636:	call   QWORD PTR [rip+0xfffffffffffc346c]        # 0x1001aa8
 103e63c:	add    rsp,0x30
 103e640:	pop    rbx
 103e641:	ret    
 103e642:	int3   
 103e643:	int3   
 103e644:	int3   
 103e645:	int3   
 103e646:	int3   
 103e647:	int3   
 103e648:	int3   
 103e649:	int3   
 103e64a:	int3   
 103e64b:	int3   
 103e64c:	int3   
 103e64d:	int3   
 103e64e:	int3   
 103e64f:	int3   
 103e650:	rex push rsi
 103e652:	push   rdi
 103e653:	push   r14
 103e655:	sub    rsp,0x8c0
 103e65c:	mov    QWORD PTR [rsp+0xa0],0xfffffffffffffffe
 103e668:	mov    QWORD PTR [rsp+0x8f0],rbx
 103e670:	mov    rax,QWORD PTR [rip+0x251f9]        # 0x1063870
 103e677:	xor    rax,rsp
 103e67a:	mov    QWORD PTR [rsp+0x8b0],rax
 103e682:	mov    rdi,rdx
 103e685:	mov    rbx,rcx
 103e688:	mov    QWORD PTR [rsp+0x90],rcx
 103e690:	mov    BYTE PTR [rsp+0x50],0x0
 103e695:	lea    rdx,[rip+0xfffffffffffc3774]        # 0x1001e10
 103e69c:	lea    rcx,[rsp+0x58]
 103e6a1:	call   QWORD PTR [rip+0xfffffffffffc3409]        # 0x1001ab0
 103e6a7:	nop
 103e6a8:	lea    rdx,[rip+0xfffffffffffc3761]        # 0x1001e10
 103e6af:	lea    rcx,[rsp+0x70]
 103e6b4:	call   QWORD PTR [rip+0xfffffffffffc33f6]        # 0x1001ab0
 103e6ba:	nop
 103e6bb:	lea    rdx,[rip+0xfffffffffffc374e]        # 0x1001e10
 103e6c2:	lea    rcx,[rsp+0x78]
 103e6c7:	call   QWORD PTR [rip+0xfffffffffffc33e3]        # 0x1001ab0
 103e6cd:	nop
 103e6ce:	lea    rdx,[rip+0xfffffffffffc373b]        # 0x1001e10
 103e6d5:	lea    rcx,[rsp+0x68]
 103e6da:	call   QWORD PTR [rip+0xfffffffffffc33d0]        # 0x1001ab0
 103e6e0:	nop
 103e6e1:	lea    rdx,[rip+0xfffffffffffc3728]        # 0x1001e10
 103e6e8:	lea    rcx,[rsp+0x80]
 103e6f0:	call   QWORD PTR [rip+0xfffffffffffc33ba]        # 0x1001ab0
 103e6f6:	nop
 103e6f7:	lea    rdx,[rdi+0x38]
 103e6fb:	lea    rcx,[rsp+0x58]
 103e700:	call   QWORD PTR [rip+0xfffffffffffc3392]        # 0x1001a98
 103e706:	lea    rcx,[rsp+0x58]
 103e70b:	call   QWORD PTR [rip+0xfffffffffffc33df]        # 0x1001af0
 103e711:	lea    edx,[rax*2+0x3a]
 103e718:	add    rdx,rdi
 103e71b:	lea    rcx,[rsp+0x70]
 103e720:	call   QWORD PTR [rip+0xfffffffffffc3372]        # 0x1001a98
 103e726:	lea    rcx,[rsp+0x70]
 103e72b:	call   QWORD PTR [rip+0xfffffffffffc33bf]        # 0x1001af0
 103e731:	mov    r14d,DWORD PTR [rdi+0x24]
 103e735:	mov    esi,DWORD PTR [rdi+0x34]
 103e738:	sub    esi,r14d
 103e73b:	lea    rcx,[rsp+0x58]
 103e740:	call   QWORD PTR [rip+0xfffffffffffc33aa]        # 0x1001af0
 103e746:	test   eax,eax
 103e748:	jne    0x103e74f
 103e74a:	call   0x103f966
 103e74f:	lea    rcx,[rsp+0x58]
 103e754:	call   QWORD PTR [rip+0xfffffffffffc338e]        # 0x1001ae8
 103e75a:	lea    rcx,[rdi+r14*1]
 103e75e:	mov    QWORD PTR [rsp+0x28],rax
 103e763:	mov    QWORD PTR [rsp+0x20],rcx
 103e768:	mov    r9d,esi
 103e76b:	mov    r8,rdi
 103e76e:	lea    rdx,[rsp+0x60]
 103e773:	mov    rcx,rbx
 103e776:	call   0x103f5c0
 103e77b:	nop
 103e77c:	mov    rdx,rax
 103e77f:	lea    rcx,[rsp+0x68]
 103e784:	call   QWORD PTR [rip+0xfffffffffffc3316]        # 0x1001aa0
 103e78a:	nop
 103e78b:	lea    rcx,[rsp+0x60]
 103e790:	call   QWORD PTR [rip+0xfffffffffffc3312]        # 0x1001aa8
 103e796:	movzx  r8d,WORD PTR [rdi+0x18]
 103e79b:	lea    rdx,[rsp+0x60]
 103e7a0:	mov    rcx,rbx
 103e7a3:	call   0x103e3a0
 103e7a8:	nop
 103e7a9:	mov    rdx,rax
 103e7ac:	lea    rcx,[rsp+0x78]
 103e7b1:	call   QWORD PTR [rip+0xfffffffffffc32e9]        # 0x1001aa0
 103e7b7:	nop
 103e7b8:	lea    rcx,[rsp+0x60]
 103e7bd:	call   QWORD PTR [rip+0xfffffffffffc32e5]        # 0x1001aa8
 103e7c3:	mov    r11d,DWORD PTR [rdi+0xc]
 103e7c7:	mov    QWORD PTR [rsp+0x88],r11
 103e7cf:	lea    rcx,[rsp+0x88]
 103e7d7:	call   QWORD PTR [rip+0xfffffffffffc2e9b]        # 0x1001678
 103e7dd:	test   rax,rax
 103e7e0:	je     0x103e826
 103e7e2:	mov    r9d,DWORD PTR [rax+0x10]
 103e7e6:	inc    r9d
 103e7e9:	mov    r8d,DWORD PTR [rax+0x14]
 103e7ed:	add    r8d,0x76c
 103e7f4:	mov    ecx,DWORD PTR [rax]
 103e7f6:	mov    DWORD PTR [rsp+0x38],ecx
 103e7fa:	mov    ecx,DWORD PTR [rax+0x4]
 103e7fd:	mov    DWORD PTR [rsp+0x30],ecx
 103e801:	mov    ecx,DWORD PTR [rax+0x8]
 103e804:	mov    DWORD PTR [rsp+0x28],ecx
 103e808:	mov    eax,DWORD PTR [rax+0xc]
 103e80b:	mov    DWORD PTR [rsp+0x20],eax
 103e80f:	lea    rdx,[rip+0xfffffffffffcb77a]        # 0x1009f90
 103e816:	lea    rcx,[rsp+0x80]
 103e81e:	call   QWORD PTR [rip+0xfffffffffffc321c]        # 0x1001a40
 103e824:	jmp    0x103e83b
 103e826:	lea    rdx,[rip+0xfffffffffffcb7a3]        # 0x1009fd0
 103e82d:	lea    rcx,[rsp+0x80]
 103e835:	call   QWORD PTR [rip+0xfffffffffffc325d]        # 0x1001a98
 103e83b:	cmp    BYTE PTR [rbx+0x38],0x0
 103e83f:	je     0x103e84e
 103e841:	lea    rdx,[rsp+0x68]
 103e846:	mov    rcx,rbx
 103e849:	call   0x103e4a0
 103e84e:	lea    rdx,[rsp+0x78]
 103e853:	mov    rcx,rbx
 103e856:	call   0x103e5b0
 103e85b:	lea    rdx,[rsp+0x58]
 103e860:	mov    rcx,rbx
 103e863:	call   0x103e5b0
 103e868:	lea    rdx,[rsp+0x68]
 103e86d:	mov    rcx,rbx
 103e870:	call   0x103e5b0
 103e875:	mov    ecx,0x8
 103e87a:	call   0x103f9d2
 103e87f:	test   rax,rax
 103e882:	je     0x103e892
 103e884:	mov    rcx,rax
 103e887:	call   QWORD PTR [rip+0xfffffffffffc3233]        # 0x1001ac0
 103e88d:	mov    rsi,rax
 103e890:	jmp    0x103e894
 103e892:	xor    esi,esi
 103e894:	cmp    BYTE PTR [rbx+0x39],0x0
 103e898:	jne    0x103e8ff
 103e89a:	movzx  ecx,WORD PTR [rdi+0x14]
 103e89e:	movzx  edx,WORD PTR [rdi+0x1c]
 103e8a2:	mov    rax,QWORD PTR [rsp+0x68]
 103e8a7:	mov    QWORD PTR [rsp+0x40],rax
 103e8ac:	mov    rax,QWORD PTR [rsp+0x70]
 103e8b1:	mov    QWORD PTR [rsp+0x38],rax
 103e8b6:	mov    rax,QWORD PTR [rsp+0x58]
 103e8bb:	mov    QWORD PTR [rsp+0x30],rax
 103e8c0:	mov    DWORD PTR [rsp+0x28],ecx
 103e8c4:	mov    DWORD PTR [rsp+0x20],edx
 103e8c8:	mov    r9,QWORD PTR [rsp+0x78]
 103e8cd:	mov    r8,QWORD PTR [rsp+0x80]
 103e8d5:	lea    rdx,[rip+0xfffffffffffcb71c]        # 0x1009ff8
 103e8dc:	mov    rcx,rsi
 103e8df:	call   QWORD PTR [rip+0xfffffffffffc315b]        # 0x1001a40
 103e8e5:	xor    r8d,r8d
 103e8e8:	mov    rdx,rsi
 103e8eb:	mov    rcx,rbx
 103e8ee:	call   0x103ef10
 103e8f3:	movzx  edi,al
 103e8f6:	mov    BYTE PTR [rsp+0x50],al
 103e8fa:	jmp    0x103ea31
 103e8ff:	lea    rcx,[rsp+0x80]
 103e907:	call   QWORD PTR [rip+0xfffffffffffc31db]        # 0x1001ae8
 103e90d:	mov    r8,rax
 103e910:	xor    r9d,r9d
 103e913:	xor    edx,edx
 103e915:	mov    rcx,QWORD PTR [rbx+0x78]
 103e919:	call   0x100d440
 103e91e:	test   al,al
 103e920:	je     0x103e9f7
 103e926:	lea    rcx,[rsp+0x78]
 103e92b:	call   QWORD PTR [rip+0xfffffffffffc31b7]        # 0x1001ae8
 103e931:	mov    r8,rax
 103e934:	xor    r9d,r9d
 103e937:	mov    esi,0x1
 103e93c:	mov    edx,esi
 103e93e:	mov    rcx,QWORD PTR [rbx+0x78]
 103e942:	call   0x100d440
 103e947:	test   al,al
 103e949:	je     0x103e9fc
 103e94f:	movzx  r8d,WORD PTR [rdi+0x1c]
 103e954:	xor    r9d,r9d
 103e957:	lea    edx,[rsi+0x1]
 103e95a:	mov    rcx,QWORD PTR [rbx+0x78]
 103e95e:	call   0x100d410
 103e963:	test   al,al
 103e965:	je     0x103e9fc
 103e96b:	movzx  r8d,WORD PTR [rdi+0x14]
 103e970:	xor    r9d,r9d
 103e973:	lea    edx,[rsi+0x2]
 103e976:	mov    rcx,QWORD PTR [rbx+0x78]
 103e97a:	call   0x100d410
 103e97f:	test   al,al
 103e981:	je     0x103e9fc
 103e983:	lea    rcx,[rsp+0x58]
 103e988:	call   QWORD PTR [rip+0xfffffffffffc315a]        # 0x1001ae8
 103e98e:	mov    r8,rax
 103e991:	xor    r9d,r9d
 103e994:	lea    edx,[rsi+0x3]
 103e997:	mov    rcx,QWORD PTR [rbx+0x78]
 103e99b:	call   0x100d440
 103e9a0:	test   al,al
 103e9a2:	je     0x103e9fc
 103e9a4:	lea    rcx,[rsp+0x70]
 103e9a9:	call   QWORD PTR [rip+0xfffffffffffc3139]        # 0x1001ae8
 103e9af:	mov    r8,rax
 103e9b2:	xor    r9d,r9d
 103e9b5:	lea    edx,[rsi+0x4]
 103e9b8:	mov    rcx,QWORD PTR [rbx+0x78]
 103e9bc:	call   0x100d440
 103e9c1:	test   al,al
 103e9c3:	je     0x103e9fc
 103e9c5:	lea    rcx,[rsp+0x68]
 103e9ca:	call   QWORD PTR [rip+0xfffffffffffc3118]        # 0x1001ae8
 103e9d0:	mov    r8,rax
 103e9d3:	xor    r9d,r9d
 103e9d6:	lea    edx,[rsi+0x5]
 103e9d9:	mov    rcx,QWORD PTR [rbx+0x78]
 103e9dd:	call   0x100d440
 103e9e2:	test   al,al
 103e9e4:	je     0x103e9fc
 103e9e6:	mov    rcx,QWORD PTR [rbx+0x78]
 103e9ea:	call   0x100d480
 103e9ef:	test   al,al
 103e9f1:	je     0x103e9fc
 103e9f3:	mov    edi,esi
 103e9f5:	jmp    0x103e9fe
 103e9f7:	mov    esi,0x1
 103e9fc:	xor    edi,edi
 103e9fe:	mov    BYTE PTR [rsp+0x50],dil
 103ea03:	cmp    DWORD PTR [rbx+0x58],0x3e8
 103ea0a:	jl     0x103ea31
 103ea0c:	mov    rcx,QWORD PTR [rbx+0x78]
 103ea10:	call   0x100d560
 103ea15:	test   dil,dil
 103ea18:	je     0x103ea1f
 103ea1a:	cmp    eax,0xffffffff
 103ea1d:	jne    0x103ea21
 103ea1f:	xor    esi,esi
 103ea21:	movzx  edi,sil
 103ea25:	mov    BYTE PTR [rsp+0x50],sil
 103ea2a:	mov    DWORD PTR [rbx+0x58],0x0
 103ea31:	inc    DWORD PTR [rbx+0x58]
 103ea34:	jmp    0x103ea3b
 103ea36:	movzx  edi,BYTE PTR [rsp+0x50]
 103ea3b:	lea    rcx,[rsp+0x80]
 103ea43:	call   QWORD PTR [rip+0xfffffffffffc305f]        # 0x1001aa8
 103ea49:	nop
 103ea4a:	lea    rcx,[rsp+0x68]
 103ea4f:	call   QWORD PTR [rip+0xfffffffffffc3053]        # 0x1001aa8
 103ea55:	nop
 103ea56:	lea    rcx,[rsp+0x78]
 103ea5b:	call   QWORD PTR [rip+0xfffffffffffc3047]        # 0x1001aa8
 103ea61:	nop
 103ea62:	lea    rcx,[rsp+0x70]
 103ea67:	call   QWORD PTR [rip+0xfffffffffffc303b]        # 0x1001aa8
 103ea6d:	nop
 103ea6e:	lea    rcx,[rsp+0x58]
 103ea73:	call   QWORD PTR [rip+0xfffffffffffc302f]        # 0x1001aa8
 103ea79:	movzx  eax,dil
 103ea7d:	mov    rcx,QWORD PTR [rsp+0x8b0]
 103ea85:	xor    rcx,rsp
 103ea88:	call   0x103ff40
 103ea8d:	mov    rbx,QWORD PTR [rsp+0x8f0]
 103ea95:	add    rsp,0x8c0
 103ea9c:	pop    r14
 103ea9e:	pop    rdi
 103ea9f:	pop    rsi
 103eaa0:	ret    
 103eaa1:	int3   
 103eaa2:	int3   
 103eaa3:	int3   
 103eaa4:	int3   
 103eaa5:	int3   
 103eaa6:	int3   
 103eaa7:	int3   
 103eaa8:	int3   
 103eaa9:	int3   
 103eaaa:	int3   
 103eaab:	int3   
 103eaac:	int3   
 103eaad:	int3   
 103eaae:	int3   
 103eaaf:	int3   
 103eab0:	mov    rax,rsp
 103eab3:	mov    QWORD PTR [rax+0x8],rcx
 103eab7:	push   rbx
 103eab8:	push   rsi
 103eab9:	push   rdi
 103eaba:	push   r12
 103eabc:	push   r13
 103eabe:	push   r14
 103eac0:	push   r15
 103eac2:	sub    rsp,0xa0
 103eac9:	mov    QWORD PTR [rax-0x48],0xfffffffffffffffe
 103ead1:	mov    r13,rcx
 103ead4:	xor    ebx,ebx
 103ead6:	mov    QWORD PTR [rsp+0x50],rbx
 103eadb:	xor    r15d,r15d
 103eade:	mov    DWORD PTR [rsp+0x40],r15d
 103eae3:	mov    DWORD PTR [rax-0x80],r15d
 103eae7:	mov    DWORD PTR [rax+0x10],r15d
 103eaeb:	mov    DWORD PTR [rax+0x20],r15d
 103eaef:	mov    DWORD PTR [rax+0x18],r15d
 103eaf3:	xor    r8d,r8d
 103eaf6:	xor    edx,edx
 103eaf8:	lea    ecx,[rbx+0x1]
 103eafb:	call   QWORD PTR [rip+0xfffffffffffc2997]        # 0x1001498
 103eb01:	mov    rsi,rax
 103eb04:	mov    QWORD PTR [rsp+0x68],rax
 103eb09:	mov    edi,0xffff
 103eb0e:	mov    QWORD PTR [rsp+0x48],rdi
 103eb13:	mov    DWORD PTR [rsp+0x44],edi
 103eb17:	mov    r8d,edi
 103eb1a:	xor    edx,edx
 103eb1c:	mov    rcx,rax
 103eb1f:	call   QWORD PTR [rip+0xfffffffffffc2a43]        # 0x1001568
 103eb25:	mov    r12,rax
 103eb28:	mov    QWORD PTR [rsp+0x70],rax
 103eb2d:	mov    DWORD PTR [rsp+0xf8],0x1
 103eb38:	nop    DWORD PTR [rax+rax*1+0x0]
 103eb40:	test   rbx,rbx
 103eb43:	jne    0x103ec20
 103eb49:	lea    rcx,[r13+0x30]
 103eb4d:	call   QWORD PTR [rip+0xfffffffffffc2f9d]        # 0x1001af0
 103eb53:	test   eax,eax
 103eb55:	jle    0x103eb66
 103eb57:	lea    rcx,[r13+0x30]
 103eb5b:	call   QWORD PTR [rip+0xfffffffffffc2f87]        # 0x1001ae8
 103eb61:	mov    rbx,rax
 103eb64:	jmp    0x103eb68
 103eb66:	xor    ebx,ebx
 103eb68:	lea    rcx,[r13+0x28]
 103eb6c:	call   QWORD PTR [rip+0xfffffffffffc2f76]        # 0x1001ae8
 103eb72:	mov    rdx,rax
 103eb75:	mov    rcx,rbx
 103eb78:	call   QWORD PTR [rip+0xfffffffffffc25ca]        # 0x1001148
 103eb7e:	mov    rbx,rax
 103eb81:	mov    QWORD PTR [rsp+0x50],rax
 103eb86:	lea    rdx,[rsp+0x58]
 103eb8b:	mov    rcx,rax
 103eb8e:	call   QWORD PTR [rip+0xfffffffffffc25a4]        # 0x1001138
 103eb94:	test   eax,eax
 103eb96:	je     0x103ebe5
 103eb98:	lea    rdx,[rsp+0xf0]
 103eba0:	mov    rcx,rbx
 103eba3:	call   QWORD PTR [rip+0xfffffffffffc2597]        # 0x1001140
 103eba9:	test   eax,eax
 103ebab:	je     0x103ebe5
 103ebad:	test   rbx,rbx
 103ebb0:	jne    0x103ec20
 103ebb2:	call   QWORD PTR [rip+0xfffffffffffc2998]        # 0x1001550
 103ebb8:	mov    r15d,eax
 103ebbb:	mov    r8,QWORD PTR [r13+0x68]
 103ebbf:	mov    rcx,QWORD PTR [r8+0x8]
 103ebc3:	movsxd rdx,DWORD PTR [rcx+0x4]
 103ebc7:	lea    rcx,[r8+0x8]
 103ebcb:	add    rcx,rdx
 103ebce:	mov    r10,QWORD PTR [rcx]
 103ebd1:	xor    r9d,r9d
 103ebd4:	mov    r8d,0xc000c442
 103ebda:	mov    edx,eax
 103ebdc:	call   QWORD PTR [r10+0x20]
 103ebe0:	jmp    0x103eece
 103ebe5:	call   QWORD PTR [rip+0xfffffffffffc2965]        # 0x1001550
 103ebeb:	mov    r15d,eax
 103ebee:	mov    rdx,QWORD PTR [r13+0x68]
 103ebf2:	mov    rax,QWORD PTR [rdx+0x8]
 103ebf6:	movsxd rcx,DWORD PTR [rax+0x4]
 103ebfa:	add    rcx,0x8
 103ebfe:	add    rcx,rdx
 103ec01:	mov    rax,QWORD PTR [rcx]
 103ec04:	xor    r9d,r9d
 103ec07:	mov    r8d,0xc000c441
 103ec0d:	mov    edx,r15d
 103ec10:	call   QWORD PTR [rax+0x20]
 103ec13:	jmp    0x103eece
 103ec18:	nop    DWORD PTR [rax+rax*1+0x0]
 103ec20:	lea    rax,[rsp+0xf8]
 103ec28:	mov    QWORD PTR [rsp+0x30],rax
 103ec2d:	lea    rax,[rsp+0xe8]
 103ec35:	mov    QWORD PTR [rsp+0x28],rax
 103ec3a:	mov    DWORD PTR [rsp+0x20],edi
 103ec3e:	mov    r9,r12
 103ec41:	xor    r8d,r8d
 103ec44:	lea    edx,[r8+0x5]
 103ec48:	mov    rcx,rbx
 103ec4b:	call   QWORD PTR [rip+0xfffffffffffc24ff]        # 0x1001150
 103ec51:	test   eax,eax
 103ec53:	jne    0x103ed8d
 103ec59:	call   QWORD PTR [rip+0xfffffffffffc28f1]        # 0x1001550
 103ec5f:	mov    r15d,eax
 103ec62:	mov    DWORD PTR [rsp+0x40],eax
 103ec66:	cmp    eax,0x7a
 103ec69:	jne    0x103ed36
 103ec6f:	test   r12,r12
 103ec72:	je     0x103ec82
 103ec74:	mov    r8,r12
 103ec77:	xor    edx,edx
 103ec79:	mov    rcx,rsi
 103ec7c:	call   QWORD PTR [rip+0xfffffffffffc28de]        # 0x1001560
 103ec82:	mov    eax,DWORD PTR [rsp+0xf8]
 103ec89:	mov    edi,eax
 103ec8b:	mov    QWORD PTR [rsp+0x48],rdi
 103ec90:	mov    DWORD PTR [rsp+0x44],eax
 103ec94:	mov    r8d,eax
 103ec97:	xor    edx,edx
 103ec99:	mov    rcx,rsi
 103ec9c:	call   QWORD PTR [rip+0xfffffffffffc28c6]        # 0x1001568
 103eca2:	mov    r12,rax
 103eca5:	mov    QWORD PTR [rsp+0x70],rax
 103ecaa:	test   rax,rax
 103ecad:	jne    0x103ece3
 103ecaf:	mov    r8,QWORD PTR [r13+0x68]
 103ecb3:	mov    rax,QWORD PTR [r8+0x8]
 103ecb7:	movsxd rcx,DWORD PTR [rax+0x4]
 103ecbb:	add    rcx,0x8
 103ecbf:	add    rcx,r8
 103ecc2:	mov    rax,QWORD PTR [rcx]
 103ecc5:	mov    BYTE PTR [rsp+0x28],0x1
 103ecca:	mov    BYTE PTR [rsp+0x20],0x1
 103eccf:	lea    r9d,[r12+0x2]
 103ecd4:	xor    r8d,r8d
 103ecd7:	mov    edx,0xc000c443
 103ecdc:	call   QWORD PTR [rax]
 103ecde:	jmp    0x103eedd
 103ece3:	xor    r15d,r15d
 103ece6:	mov    DWORD PTR [rsp+0x40],r15d
 103eceb:	lea    rax,[rsp+0xf8]
 103ecf3:	mov    QWORD PTR [rsp+0x30],rax
 103ecf8:	lea    rax,[rsp+0xe8]
 103ed00:	mov    QWORD PTR [rsp+0x28],rax
 103ed05:	mov    DWORD PTR [rsp+0x20],edi
 103ed09:	mov    r9,r12
 103ed0c:	mov    r8d,DWORD PTR [rsp+0xf0]
 103ed14:	lea    edx,[r15+0x6]
 103ed18:	mov    rcx,rbx
 103ed1b:	call   QWORD PTR [rip+0xfffffffffffc242f]        # 0x1001150
 103ed21:	test   eax,eax
 103ed23:	jne    0x103ee67
 103ed29:	call   QWORD PTR [rip+0xfffffffffffc2821]        # 0x1001550
 103ed2f:	mov    r15d,eax
 103ed32:	mov    DWORD PTR [rsp+0x40],eax
 103ed36:	test   r15d,r15d
 103ed39:	je     0x103ee61
 103ed3f:	cmp    r15d,0x5dc
 103ed46:	je     0x103ee61
 103ed4c:	cmp    r15d,0x26
 103ed50:	je     0x103ee7d
 103ed56:	cmp    r15d,0x3e5
 103ed5d:	je     0x103ee61
 103ed63:	mov    rdx,QWORD PTR [r13+0x68]
 103ed67:	mov    rax,QWORD PTR [rdx+0x8]
 103ed6b:	movsxd rcx,DWORD PTR [rax+0x4]
 103ed6f:	add    rcx,0x8
 103ed73:	add    rcx,rdx
 103ed76:	mov    rax,QWORD PTR [rcx]
 103ed79:	xor    r9d,r9d
 103ed7c:	mov    r8d,0xc000c443
 103ed82:	mov    edx,r15d
 103ed85:	call   QWORD PTR [rax+0x20]
 103ed88:	jmp    0x103eece
 103ed8d:	mov    rdi,r12
 103ed90:	mov    QWORD PTR [rsp+0x88],r12
 103ed98:	nop    DWORD PTR [rax+rax*1+0x0]
 103eda0:	cmp    DWORD PTR [rsp+0xe8],0x0
 103eda8:	je     0x103ee35
 103edae:	mov    rdx,rdi
 103edb1:	mov    rcx,r13
 103edb4:	call   0x103e650
 103edb9:	test   al,al
 103edbb:	jne    0x103edf1
 103edbd:	mov    r14,QWORD PTR [r13+0x68]
 103edc1:	mov    rax,QWORD PTR [r14+0x8]
 103edc5:	movsxd rcx,DWORD PTR [rax+0x4]
 103edc9:	mov    rsi,QWORD PTR [rcx+r14*1+0x8]
 103edce:	call   QWORD PTR [rip+0xfffffffffffc277c]        # 0x1001550
 103edd4:	mov    edx,eax
 103edd6:	mov    rax,QWORD PTR [r14+0x8]
 103edda:	movsxd rcx,DWORD PTR [rax+0x4]
 103edde:	add    rcx,0x8
 103ede2:	add    rcx,r14
 103ede5:	xor    r9d,r9d
 103ede8:	mov    r8d,0xc000c443
 103edee:	call   QWORD PTR [rsi+0x20]
 103edf1:	mov    eax,DWORD PTR [rdi]
 103edf3:	sub    DWORD PTR [rsp+0xe8],eax
 103edfa:	mov    eax,DWORD PTR [rdi]
 103edfc:	add    rdi,rax
 103edff:	mov    QWORD PTR [rsp+0x88],rdi
 103ee07:	mov    ecx,DWORD PTR [rsp+0xf0]
 103ee0e:	inc    ecx
 103ee10:	mov    DWORD PTR [rsp+0xf0],ecx
 103ee17:	mov    eax,0x51eb851f
 103ee1c:	mul    ecx
 103ee1e:	shr    edx,0x5
 103ee21:	imul   edx,edx,0x64
 103ee24:	cmp    ecx,edx
 103ee26:	jne    0x103ee30
 103ee28:	xor    ecx,ecx
 103ee2a:	call   QWORD PTR [rip+0xfffffffffffc2718]        # 0x1001548
 103ee30:	jmp    0x103eda0
 103ee35:	mov    rdi,QWORD PTR [rsp+0x48]
 103ee3a:	jmp    0x103ee5c
 103ee3c:	mov    r13,QWORD PTR [rsp+0xe0]
 103ee44:	mov    rbx,QWORD PTR [rsp+0x50]
 103ee49:	mov    r15d,DWORD PTR [rsp+0x40]
 103ee4e:	mov    edi,DWORD PTR [rsp+0x44]
 103ee52:	mov    QWORD PTR [rsp+0x48],rdi
 103ee57:	mov    r12,QWORD PTR [rsp+0x70]
 103ee5c:	mov    rsi,QWORD PTR [rsp+0x68]
 103ee61:	cmp    r15d,0x26
 103ee65:	je     0x103ee7d
 103ee67:	mov    rcx,QWORD PTR [r13+0x68]
 103ee6b:	mov    rax,QWORD PTR [rcx]
 103ee6e:	call   QWORD PTR [rax+0xf8]
 103ee74:	cmp    eax,0x2
 103ee77:	jl     0x103ec20
 103ee7d:	mov    rcx,QWORD PTR [r13+0x68]
 103ee81:	mov    rax,QWORD PTR [rcx]
 103ee84:	call   QWORD PTR [rax+0xf8]
 103ee8a:	test   eax,eax
 103ee8c:	jne    0x103eeaf
 103ee8e:	mov    ecx,DWORD PTR [r13+0x80]
 103ee95:	test   ecx,ecx
 103ee97:	je     0x103eeaf
 103ee99:	imul   ecx,ecx,0x3e8
 103ee9f:	lea    edx,[rax+0x1]
 103eea2:	call   QWORD PTR [rip+0xfffffffffffc2618]        # 0x10014c0
 103eea8:	cmp    eax,0xc0
 103eead:	je     0x103eece
 103eeaf:	cmp    DWORD PTR [r13+0x80],0x0
 103eeb7:	je     0x103eece
 103eeb9:	mov    rcx,QWORD PTR [r13+0x68]
 103eebd:	mov    rax,QWORD PTR [rcx]
 103eec0:	call   QWORD PTR [rax+0xf8]
 103eec6:	test   eax,eax
 103eec8:	je     0x103eb40
 103eece:	test   r12,r12
 103eed1:	je     0x103eedd
 103eed3:	mov    rcx,rsi
 103eed6:	call   QWORD PTR [rip+0xfffffffffffc25c4]        # 0x10014a0
 103eedc:	nop
 103eedd:	test   rbx,rbx
 103eee0:	je     0x103eef4
 103eee2:	mov    rcx,rbx
 103eee5:	call   QWORD PTR [rip+0xfffffffffffc2245]        # 0x1001130
 103eeeb:	mov    QWORD PTR [rsp+0x50],0x0
 103eef4:	mov    eax,r15d
 103eef7:	add    rsp,0xa0
 103eefe:	pop    r15
 103ef00:	pop    r14
 103ef02:	pop    r13
 103ef04:	pop    r12
 103ef06:	pop    rdi
 103ef07:	pop    rsi
 103ef08:	pop    rbx
 103ef09:	ret    
 103ef0a:	int3   
 103ef0b:	int3   
 103ef0c:	int3   
 103ef0d:	int3   
 103ef0e:	int3   
 103ef0f:	int3   
 103ef10:	rex push rbp
 103ef12:	push   rsi
 103ef13:	push   rdi
 103ef14:	push   r12
 103ef16:	push   r13
 103ef18:	push   r14
 103ef1a:	push   r15
 103ef1c:	sub    rsp,0x50
 103ef20:	mov    QWORD PTR [rsp+0x40],0xfffffffffffffffe
 103ef29:	mov    QWORD PTR [rsp+0x98],rbx
 103ef31:	movzx  r13d,r8b
 103ef35:	mov    r14,rdx
 103ef38:	mov    rbx,rcx
 103ef3b:	mov    sil,0x1
 103ef3e:	mov    rcx,rdx
 103ef41:	call   QWORD PTR [rip+0xfffffffffffc2ba1]        # 0x1001ae8
 103ef47:	mov    r15,rax
 103ef4a:	or     rbp,0xffffffffffffffff
 103ef4e:	xchg   ax,ax
 103ef50:	inc    rbp
 103ef53:	cmp    WORD PTR [rax+rbp*2],0x0
 103ef58:	jne    0x103ef50
 103ef5a:	add    ebp,ebp
 103ef5c:	mov    DWORD PTR [rsp+0xa0],0x0
 103ef67:	or     r12d,0xffffffff
 103ef6b:	cmp    BYTE PTR [rbx+0x20],0x0
 103ef6f:	je     0x103f0a7
 103ef75:	mov    r9d,0x1
 103ef7b:	lea    r8,[rsp+0xa0]
 103ef83:	mov    rdx,rbx
 103ef86:	mov    rcx,QWORD PTR [rbx+0x60]
 103ef8a:	call   QWORD PTR [rip+0xfffffffffffc2518]        # 0x10014a8
 103ef90:	test   eax,eax
 103ef92:	je     0x103efc1
 103ef94:	mov    ecx,DWORD PTR [rsp+0xa0]
 103ef9b:	test   ecx,ecx
 103ef9d:	je     0x103efc1
 103ef9f:	mov    edx,DWORD PTR [rbx+0x10]
 103efa2:	mov    eax,r12d
 103efa5:	sub    eax,edx
 103efa7:	cmp    eax,ecx
 103efa9:	jae    0x103efb6
 103efab:	inc    DWORD PTR [rbx+0x14]
 103efae:	mov    DWORD PTR [rbx+0x10],eax
 103efb1:	jmp    0x103f07b
 103efb6:	lea    eax,[rdx+rcx*1]
 103efb9:	mov    DWORD PTR [rbx+0x10],eax
 103efbc:	jmp    0x103f07b
 103efc1:	lea    rcx,[rsp+0x90]
 103efc9:	call   QWORD PTR [rip+0xfffffffffffc2af1]        # 0x1001ac0
 103efcf:	nop
 103efd0:	mov    edx,0xc000c445
 103efd5:	lea    rcx,[rsp+0xa8]
 103efdd:	call   0x10132d0
 103efe2:	mov    rsi,rax
 103efe5:	call   QWORD PTR [rip+0xfffffffffffc2565]        # 0x1001550
 103efeb:	mov    edi,eax
 103efed:	mov    rcx,rsi
 103eff0:	call   QWORD PTR [rip+0xfffffffffffc2af2]        # 0x1001ae8
 103eff6:	mov    rdx,rax
 103eff9:	mov    r8d,edi
 103effc:	lea    rcx,[rsp+0x90]
 103f004:	call   QWORD PTR [rip+0xfffffffffffc2a36]        # 0x1001a40
 103f00a:	nop
 103f00b:	lea    rcx,[rsp+0xa8]
 103f013:	call   QWORD PTR [rip+0xfffffffffffc2a8f]        # 0x1001aa8
 103f019:	mov    rdi,QWORD PTR [rbx+0x68]
 103f01d:	mov    rax,QWORD PTR [rdi+0x8]
 103f021:	movsxd rcx,DWORD PTR [rax+0x4]
 103f025:	mov    rsi,QWORD PTR [rcx+rdi*1+0x8]
 103f02a:	add    rsi,0x8
 103f02e:	lea    rcx,[rsp+0x90]
 103f036:	call   QWORD PTR [rip+0xfffffffffffc2aac]        # 0x1001ae8
 103f03c:	mov    r8,rax
 103f03f:	mov    rax,QWORD PTR [rdi+0x8]
 103f043:	movsxd rcx,DWORD PTR [rax+0x4]
 103f047:	add    rcx,0x8
 103f04b:	add    rcx,rdi
 103f04e:	mov    BYTE PTR [rsp+0x30],0x1
 103f053:	mov    BYTE PTR [rsp+0x28],0x1
 103f058:	mov    DWORD PTR [rsp+0x20],0x2
 103f060:	xor    r9d,r9d
 103f063:	mov    edx,0xc000c445
 103f068:	call   QWORD PTR [rsi]
 103f06a:	xor    sil,sil
 103f06d:	lea    rcx,[rsp+0x90]
 103f075:	call   QWORD PTR [rip+0xfffffffffffc2a2d]        # 0x1001aa8
 103f07b:	mov    rdi,QWORD PTR [rbx+0x90]
 103f082:	test   rdi,rdi
 103f085:	je     0x103f0a3
 103f087:	mov    rcx,rdi
 103f08a:	call   QWORD PTR [rip+0xfffffffffffc2a18]        # 0x1001aa8
 103f090:	mov    rcx,rdi
 103f093:	call   0x103f95a
 103f098:	mov    QWORD PTR [rbx+0x90],0x0
 103f0a3:	mov    BYTE PTR [rbx+0x20],0x0
 103f0a7:	mov    QWORD PTR [rsp+0x20],rbx
 103f0ac:	lea    r9,[rsp+0xa0]
 103f0b4:	mov    r8d,ebp
 103f0b7:	mov    rdx,r15
 103f0ba:	mov    rcx,QWORD PTR [rbx+0x60]
 103f0be:	call   QWORD PTR [rip+0xfffffffffffc218c]        # 0x1001250
 103f0c4:	test   eax,eax
 103f0c6:	jne    0x103f1b7
 103f0cc:	call   QWORD PTR [rip+0xfffffffffffc247e]        # 0x1001550
 103f0d2:	mov    edi,eax
 103f0d4:	cmp    eax,0x3e5
 103f0d9:	jne    0x103f0eb
 103f0db:	mov    BYTE PTR [rbx+0x20],0x1
 103f0df:	mov    QWORD PTR [rbx+0x90],r14
 103f0e6:	jmp    0x103f1ed
 103f0eb:	test   r14,r14
 103f0ee:	je     0x103f101
 103f0f0:	mov    rcx,r14
 103f0f3:	call   QWORD PTR [rip+0xfffffffffffc29af]        # 0x1001aa8
 103f0f9:	mov    rcx,r14
 103f0fc:	call   0x103f95a
 103f101:	mov    BYTE PTR [rbx+0x20],0x0
 103f105:	lea    rcx,[rsp+0x90]
 103f10d:	call   QWORD PTR [rip+0xfffffffffffc29ad]        # 0x1001ac0
 103f113:	nop
 103f114:	mov    edx,0xc000c445
 103f119:	lea    rcx,[rsp+0xa8]
 103f121:	call   0x10132d0
 103f126:	nop
 103f127:	mov    rcx,rax
 103f12a:	call   QWORD PTR [rip+0xfffffffffffc29b8]        # 0x1001ae8
 103f130:	mov    rdx,rax
 103f133:	mov    r8d,edi
 103f136:	lea    rcx,[rsp+0x90]
 103f13e:	call   QWORD PTR [rip+0xfffffffffffc28fc]        # 0x1001a40
 103f144:	nop
 103f145:	lea    rcx,[rsp+0xa8]
 103f14d:	call   QWORD PTR [rip+0xfffffffffffc2955]        # 0x1001aa8
 103f153:	mov    rdi,QWORD PTR [rbx+0x68]
 103f157:	mov    rax,QWORD PTR [rdi+0x8]
 103f15b:	movsxd rcx,DWORD PTR [rax+0x4]
 103f15f:	mov    rsi,QWORD PTR [rcx+rdi*1+0x8]
 103f164:	add    rsi,0x8
 103f168:	lea    rcx,[rsp+0x90]
 103f170:	call   QWORD PTR [rip+0xfffffffffffc2972]        # 0x1001ae8
 103f176:	mov    r8,rax
 103f179:	mov    rax,QWORD PTR [rdi+0x8]
 103f17d:	movsxd rcx,DWORD PTR [rax+0x4]
 103f181:	add    rcx,0x8
 103f185:	add    rcx,rdi
 103f188:	mov    BYTE PTR [rsp+0x30],0x1
 103f18d:	mov    BYTE PTR [rsp+0x28],0x1
 103f192:	mov    DWORD PTR [rsp+0x20],0x2
 103f19a:	xor    r9d,r9d
 103f19d:	mov    edx,0xc000c445
 103f1a2:	call   QWORD PTR [rsi]
 103f1a4:	xor    sil,sil
 103f1a7:	lea    rcx,[rsp+0x90]
 103f1af:	call   QWORD PTR [rip+0xfffffffffffc28f3]        # 0x1001aa8
 103f1b5:	jmp    0x103f1ed
 103f1b7:	mov    eax,DWORD PTR [rbx+0x10]
 103f1ba:	sub    r12d,eax
 103f1bd:	mov    ecx,DWORD PTR [rsp+0xa0]
 103f1c4:	cmp    r12d,ecx
 103f1c7:	jae    0x103f1d2
 103f1c9:	inc    DWORD PTR [rbx+0x14]
 103f1cc:	mov    DWORD PTR [rbx+0x10],r12d
 103f1d0:	jmp    0x103f1d7
 103f1d2:	add    eax,ecx
 103f1d4:	mov    DWORD PTR [rbx+0x10],eax
 103f1d7:	test   r14,r14
 103f1da:	je     0x103f1ed
 103f1dc:	mov    rcx,r14
 103f1df:	call   QWORD PTR [rip+0xfffffffffffc28c3]        # 0x1001aa8
 103f1e5:	mov    rcx,r14
 103f1e8:	call   0x103f95a
 103f1ed:	test   r13b,r13b
 103f1f0:	je     0x103f1fc
 103f1f2:	mov    rcx,QWORD PTR [rbx+0x60]
 103f1f6:	call   QWORD PTR [rip+0xfffffffffffc205c]        # 0x1001258
 103f1fc:	movzx  eax,sil
 103f200:	mov    rbx,QWORD PTR [rsp+0x98]
 103f208:	add    rsp,0x50
 103f20c:	pop    r15
 103f20e:	pop    r14
 103f210:	pop    r13
 103f212:	pop    r12
 103f214:	pop    rdi
 103f215:	pop    rsi
 103f216:	pop    rbp
 103f217:	ret    
 103f218:	int3   
 103f219:	int3   
 103f21a:	int3   
 103f21b:	int3   
 103f21c:	int3   
 103f21d:	int3   
 103f21e:	int3   
 103f21f:	int3   
 103f220:	rex push rbp
 103f222:	push   rsi
 103f223:	push   rdi
 103f224:	push   r14
 103f226:	push   r15
 103f228:	lea    rbp,[rsp-0x3c0]
 103f230:	sub    rsp,0x4c0
 103f237:	mov    QWORD PTR [rbp-0x80],0xfffffffffffffffe
 103f23f:	mov    QWORD PTR [rsp+0x500],rbx
 103f247:	mov    rax,QWORD PTR [rip+0x24622]        # 0x1063870
 103f24e:	xor    rax,rsp
 103f251:	mov    QWORD PTR [rbp+0x3b0],rax
 103f258:	mov    rdi,rdx
 103f25b:	mov    rsi,rcx
 103f25e:	mov    rbx,QWORD PTR [rcx+0x88]
 103f265:	lea    rcx,[rsp+0x60]
 103f26a:	call   QWORD PTR [rip+0xfffffffffffc2850]        # 0x1001ac0
 103f270:	nop
 103f271:	xor    r14d,r14d
 103f274:	mov    QWORD PTR [rsp+0x48],r14
 103f279:	test   rbx,rbx
 103f27c:	je     0x103f2a4
 103f27e:	xchg   ax,ax
 103f280:	mov    rdx,rdi
 103f283:	mov    rcx,rbx
 103f286:	call   QWORD PTR [rip+0xfffffffffffc27d4]        # 0x1001a60
 103f28c:	test   eax,eax
 103f28e:	je     0x103f29b
 103f290:	mov    rbx,QWORD PTR [rbx+0x40]
 103f294:	test   rbx,rbx
 103f297:	jne    0x103f280
 103f299:	jmp    0x103f2a4
 103f29b:	test   rbx,rbx
 103f29e:	jne    0x103f569
 103f2a4:	mov    ecx,0x48
 103f2a9:	call   0x103f9d2
 103f2ae:	mov    QWORD PTR [rsp+0x70],rax
 103f2b3:	test   rax,rax
 103f2b6:	je     0x103f2cf
 103f2b8:	mov    r8,QWORD PTR [rsi+0x88]
 103f2bf:	mov    rdx,rdi
 103f2c2:	mov    rcx,rax
 103f2c5:	call   0x103d670
 103f2ca:	mov    rbx,rax
 103f2cd:	jmp    0x103f2d2
 103f2cf:	mov    rbx,r14
 103f2d2:	test   rbx,rbx
 103f2d5:	jne    0x103f39d
 103f2db:	lea    rcx,[rsp+0x40]
 103f2e0:	call   QWORD PTR [rip+0xfffffffffffc27da]        # 0x1001ac0
 103f2e6:	nop
 103f2e7:	mov    edx,0xc000c43f
 103f2ec:	lea    rcx,[rsp+0x50]
 103f2f1:	call   0x10132d0
 103f2f6:	nop
 103f2f7:	mov    rcx,rax
 103f2fa:	call   QWORD PTR [rip+0xfffffffffffc27e8]        # 0x1001ae8
 103f300:	mov    rdx,rax
 103f303:	lea    r8d,[rbx+0x48]
 103f307:	lea    rcx,[rsp+0x40]
 103f30c:	call   QWORD PTR [rip+0xfffffffffffc272e]        # 0x1001a40
 103f312:	nop
 103f313:	lea    rcx,[rsp+0x50]
 103f318:	call   QWORD PTR [rip+0xfffffffffffc278a]        # 0x1001aa8
 103f31e:	mov    rbx,QWORD PTR [rsi+0x68]
 103f322:	mov    rax,QWORD PTR [rbx+0x8]
 103f326:	movsxd rcx,DWORD PTR [rax+0x4]
 103f32a:	mov    rdi,QWORD PTR [rcx+rbx*1+0x8]
 103f32f:	lea    rcx,[rsp+0x40]
 103f334:	call   QWORD PTR [rip+0xfffffffffffc27ae]        # 0x1001ae8
 103f33a:	mov    r8,rax
 103f33d:	mov    rax,QWORD PTR [rbx+0x8]
 103f341:	movsxd rcx,DWORD PTR [rax+0x4]
 103f345:	add    rcx,0x8
 103f349:	add    rcx,rbx
 103f34c:	mov    BYTE PTR [rsp+0x30],0x1
 103f351:	mov    BYTE PTR [rsp+0x28],0x1
 103f356:	mov    DWORD PTR [rsp+0x20],0x2
 103f35e:	xor    r9d,r9d
 103f361:	mov    edx,0xc000c43f
 103f366:	call   QWORD PTR [rdi+0x8]
 103f369:	nop
 103f36a:	lea    rcx,[rsp+0x40]
 103f36f:	call   QWORD PTR [rip+0xfffffffffffc2733]        # 0x1001aa8
 103f375:	nop
 103f376:	mov    rcx,QWORD PTR [rsp+0x48]
 103f37b:	test   rcx,rcx
 103f37e:	je     0x103f38b
 103f380:	call   QWORD PTR [rip+0xfffffffffffc1c9a]        # 0x1001020
 103f386:	mov    QWORD PTR [rsp+0x48],r14
 103f38b:	lea    rcx,[rsp+0x60]
 103f390:	call   QWORD PTR [rip+0xfffffffffffc2712]        # 0x1001aa8
 103f396:	xor    eax,eax
 103f398:	jmp    0x103f58c
 103f39d:	mov    QWORD PTR [rsi+0x88],rbx
 103f3a4:	mov    r9,QWORD PTR [rbx]
 103f3a7:	mov    r8,QWORD PTR [rsi+0x28]
 103f3ab:	lea    rdx,[rip+0xfffffffffffcaa1e]        # 0x1009dd0
 103f3b2:	lea    rcx,[rsp+0x60]
 103f3b7:	call   QWORD PTR [rip+0xfffffffffffc2683]        # 0x1001a40
 103f3bd:	lea    rcx,[rsp+0x60]
 103f3c2:	call   QWORD PTR [rip+0xfffffffffffc2720]        # 0x1001ae8
 103f3c8:	mov    rdx,rax
 103f3cb:	lea    rax,[rsp+0x48]
 103f3d0:	mov    QWORD PTR [rsp+0x20],rax
 103f3d5:	mov    r9d,0x20019
 103f3db:	xor    r8d,r8d
 103f3de:	mov    rcx,0xffffffff80000002
 103f3e5:	call   QWORD PTR [rip+0xfffffffffffc1c95]        # 0x1001080
 103f3eb:	test   eax,eax
 103f3ed:	jne    0x103f569
 103f3f3:	mov    DWORD PTR [rsp+0x68],0x20a
 103f3fb:	lea    rax,[rsp+0x68]
 103f400:	mov    QWORD PTR [rsp+0x28],rax
 103f405:	lea    rax,[rbp-0x70]
 103f409:	mov    QWORD PTR [rsp+0x20],rax
 103f40e:	lea    r9,[rsp+0x78]
 103f413:	xor    r8d,r8d
 103f416:	lea    rdx,[rip+0xfffffffffffc3ee3]        # 0x1003300
 103f41d:	mov    rcx,QWORD PTR [rsp+0x48]
 103f422:	call   QWORD PTR [rip+0xfffffffffffc1c60]        # 0x1001088
 103f428:	test   eax,eax
 103f42a:	jne    0x103f569
 103f430:	cmp    WORD PTR [rbp-0x70],ax
 103f434:	je     0x103f569
 103f43a:	lea    rdx,[rbp-0x70]
 103f43e:	lea    rcx,[rsp+0x50]
 103f443:	call   QWORD PTR [rip+0xfffffffffffc2667]        # 0x1001ab0
 103f449:	nop
 103f44a:	mov    DWORD PTR [rsp+0x58],r14d
 103f44f:	mov    r15d,0x3b
 103f455:	lea    rcx,[rsp+0x50]
 103f45a:	call   QWORD PTR [rip+0xfffffffffffc2688]        # 0x1001ae8
 103f460:	mov    rdx,rax
 103f463:	lea    r9,[rsp+0x58]
 103f468:	movzx  r8d,r15w
 103f46c:	lea    rcx,[rsp+0x40]
 103f471:	call   0x1035520
 103f476:	nop
 103f477:	lea    rdx,[rip+0xfffffffffffc2992]        # 0x1001e10
 103f47e:	lea    rcx,[rsp+0x40]
 103f483:	call   QWORD PTR [rip+0xfffffffffffc2577]        # 0x1001a00
 103f489:	test   eax,eax
 103f48b:	je     0x103f551
 103f491:	lea    rcx,[rsp+0x40]
 103f496:	call   QWORD PTR [rip+0xfffffffffffc264c]        # 0x1001ae8
 103f49c:	mov    rcx,rax
 103f49f:	mov    r8d,0x105
 103f4a5:	lea    rdx,[rbp+0x1a0]
 103f4ac:	call   QWORD PTR [rip+0xfffffffffffc1f1e]        # 0x10013d0
 103f4b2:	test   eax,eax
 103f4b4:	je     0x103f4fb
 103f4b6:	xor    edx,edx
 103f4b8:	lea    r8d,[rdx+0x3]
 103f4bc:	lea    rcx,[rbp+0x1a0]
 103f4c3:	call   QWORD PTR [rip+0xfffffffffffc1fe7]        # 0x10014b0
 103f4c9:	mov    rsi,rax
 103f4cc:	test   rax,rax
 103f4cf:	je     0x103f4fb
 103f4d1:	xor    r8d,r8d
 103f4d4:	mov    rdx,QWORD PTR [rbx+0x18]
 103f4d8:	lea    rcx,[rbx+0x8]
 103f4dc:	call   0x103d6f0
 103f4e1:	mov    QWORD PTR [rax+0x10],rsi
 103f4e5:	mov    rcx,QWORD PTR [rbx+0x18]
 103f4e9:	test   rcx,rcx
 103f4ec:	je     0x103f4f3
 103f4ee:	mov    QWORD PTR [rcx],rax
 103f4f1:	jmp    0x103f4f7
 103f4f3:	mov    QWORD PTR [rbx+0x10],rax
 103f4f7:	mov    QWORD PTR [rbx+0x18],rax
 103f4fb:	lea    rcx,[rsp+0x50]
 103f500:	call   QWORD PTR [rip+0xfffffffffffc25e2]        # 0x1001ae8
 103f506:	mov    rdx,rax
 103f509:	lea    r9,[rsp+0x58]
 103f50e:	movzx  r8d,r15w
 103f512:	lea    rcx,[rsp+0x70]
 103f517:	call   0x1035520
 103f51c:	nop
 103f51d:	mov    rdx,rax
 103f520:	lea    rcx,[rsp+0x40]
 103f525:	call   QWORD PTR [rip+0xfffffffffffc2575]        # 0x1001aa0
 103f52b:	nop
 103f52c:	lea    rcx,[rsp+0x70]
 103f531:	call   QWORD PTR [rip+0xfffffffffffc2571]        # 0x1001aa8
 103f537:	lea    rdx,[rip+0xfffffffffffc28d2]        # 0x1001e10
 103f53e:	lea    rcx,[rsp+0x40]
 103f543:	call   QWORD PTR [rip+0xfffffffffffc24b7]        # 0x1001a00
 103f549:	test   eax,eax
 103f54b:	jne    0x103f491
 103f551:	lea    rcx,[rsp+0x40]
 103f556:	call   QWORD PTR [rip+0xfffffffffffc254c]        # 0x1001aa8
 103f55c:	nop
 103f55d:	lea    rcx,[rsp+0x50]
 103f562:	call   QWORD PTR [rip+0xfffffffffffc2540]        # 0x1001aa8
 103f568:	nop
 103f569:	mov    rcx,QWORD PTR [rsp+0x48]
 103f56e:	test   rcx,rcx
 103f571:	je     0x103f57e
 103f573:	call   QWORD PTR [rip+0xfffffffffffc1aa7]        # 0x1001020
 103f579:	mov    QWORD PTR [rsp+0x48],r14
 103f57e:	lea    rcx,[rsp+0x60]
 103f583:	call   QWORD PTR [rip+0xfffffffffffc251f]        # 0x1001aa8
 103f589:	mov    rax,rbx
 103f58c:	mov    rcx,QWORD PTR [rbp+0x3b0]
 103f593:	xor    rcx,rsp
 103f596:	call   0x103ff40
 103f59b:	mov    rbx,QWORD PTR [rsp+0x500]
 103f5a3:	add    rsp,0x4c0
 103f5aa:	pop    r15
 103f5ac:	pop    r14
 103f5ae:	pop    rdi
 103f5af:	pop    rsi
 103f5b0:	pop    rbp
 103f5b1:	ret    
 103f5b2:	int3   
 103f5b3:	int3   
 103f5b4:	int3   
 103f5b5:	int3   
 103f5b6:	int3   
 103f5b7:	int3   
 103f5b8:	int3   
 103f5b9:	int3   
 103f5ba:	int3   
 103f5bb:	int3   
 103f5bc:	int3   
 103f5bd:	int3   
 103f5be:	int3   
 103f5bf:	int3   
 103f5c0:	mov    DWORD PTR [rsp+0x20],r9d
 103f5c5:	push   rbx
 103f5c6:	push   rsi
 103f5c7:	push   rdi
 103f5c8:	push   r12
 103f5ca:	push   r13
 103f5cc:	push   r14
 103f5ce:	push   r15
 103f5d0:	sub    rsp,0x8e0
 103f5d7:	mov    QWORD PTR [rsp+0xb8],0xfffffffffffffffe
 103f5e3:	mov    rax,QWORD PTR [rip+0x24286]        # 0x1063870
 103f5ea:	xor    rax,rsp
 103f5ed:	mov    QWORD PTR [rsp+0x8d0],rax
 103f5f5:	mov    r14,r8
 103f5f8:	mov    r12,rdx
 103f5fb:	mov    rbx,rcx
 103f5fe:	mov    QWORD PTR [rsp+0x98],rcx
 103f606:	mov    QWORD PTR [rsp+0x90],rdx
 103f60e:	mov    QWORD PTR [rsp+0xb0],r8
 103f616:	mov    r13,QWORD PTR [rsp+0x940]
 103f61e:	mov    QWORD PTR [rsp+0xa8],r13
 103f626:	mov    QWORD PTR [rsp+0x70],r13
 103f62b:	mov    r15,QWORD PTR [rsp+0x948]
 103f633:	xor    edi,edi
 103f635:	mov    DWORD PTR [rsp+0x78],edi
 103f639:	lea    rdx,[rip+0xfffffffffffc27d0]        # 0x1001e10
 103f640:	mov    rcx,r12
 103f643:	call   QWORD PTR [rip+0xfffffffffffc2467]        # 0x1001ab0
 103f649:	mov    DWORD PTR [rsp+0x78],0x1
 103f651:	mov    QWORD PTR [rsp+0x68],rdi
 103f656:	mov    esi,edi
 103f658:	mov    DWORD PTR [rsp+0x40],edi
 103f65c:	mov    rdx,r15
 103f65f:	mov    rcx,rbx
 103f662:	call   0x103f220
 103f667:	mov    QWORD PTR [rsp+0xa0],rax
 103f66f:	test   rax,rax
 103f672:	je     0x103f855
 103f678:	cmp    QWORD PTR [rax+0x20],rdi
 103f67c:	jle    0x103f855
 103f682:	movzx  eax,WORD PTR [r14+0x1a]
 103f687:	add    eax,0xa
 103f68a:	movsxd rcx,eax
 103f68d:	shl    rcx,0x3
 103f691:	call   QWORD PTR [rip+0xfffffffffffc2091]        # 0x1001728
 103f697:	mov    r15,rax
 103f69a:	mov    QWORD PTR [rsp+0x88],rax
 103f6a2:	test   rax,rax
 103f6a5:	jne    0x103f6ac
 103f6a7:	call   0x103f966
 103f6ac:	mov    ecx,edi
 103f6ae:	mov    DWORD PTR [rsp+0x48],ecx
 103f6b2:	mov    esi,edi
 103f6b4:	mov    DWORD PTR [rsp+0x58],edi
 103f6b8:	nop    DWORD PTR [rax+rax*1+0x0]
 103f6c0:	movzx  eax,WORD PTR [r14+0x1a]
 103f6c5:	cmp    esi,eax
 103f6c7:	jge    0x103f74b
 103f6cd:	mov    eax,ecx
 103f6cf:	lea    rbx,[rax*2+0x0]
 103f6d7:	add    rbx,r13
 103f6da:	or     rax,0xffffffffffffffff
 103f6de:	xchg   ax,ax
 103f6e0:	inc    rax
 103f6e3:	cmp    WORD PTR [rbx+rax*2],0x0
 103f6e8:	jne    0x103f6e0
 103f6ea:	lea    r13,[rax*2+0x4]
 103f6f2:	mov    rcx,r13
 103f6f5:	call   QWORD PTR [rip+0xfffffffffffc202d]        # 0x1001728
 103f6fb:	mov    rcx,rax
 103f6fe:	movsxd rax,esi
 103f701:	mov    QWORD PTR [r15+rax*8],rcx
 103f705:	test   rcx,rcx
 103f708:	jne    0x103f70f
 103f70a:	call   0x103f966
 103f70f:	shr    r13,1
 103f712:	mov    r8,rbx
 103f715:	mov    rdx,r13
 103f718:	call   QWORD PTR [rip+0xfffffffffffc2042]        # 0x1001760
 103f71e:	or     rax,0xffffffffffffffff
 103f722:	inc    rax
 103f725:	cmp    WORD PTR [rbx+rax*2],0x0
 103f72a:	jne    0x103f722
 103f72c:	mov    ecx,DWORD PTR [rsp+0x48]
 103f730:	inc    ecx
 103f732:	add    ecx,eax
 103f734:	mov    DWORD PTR [rsp+0x48],ecx
 103f738:	inc    esi
 103f73a:	mov    DWORD PTR [rsp+0x58],esi
 103f73e:	mov    r13,QWORD PTR [rsp+0xa8]
 103f746:	jmp    0x103f6c0
 103f74b:	movzx  ecx,WORD PTR [r14+0x1a]
 103f750:	mov    DWORD PTR [rsp+0x50],ecx
 103f754:	movzx  eax,WORD PTR [r14+0x1a]
 103f759:	add    eax,0xa
 103f75c:	cmp    ecx,eax
 103f75e:	jge    0x103f76b
 103f760:	movsxd rax,ecx
 103f763:	mov    QWORD PTR [r15+rax*8],rdi
 103f767:	inc    ecx
 103f769:	jmp    0x103f750
 103f76b:	mov    rbx,QWORD PTR [rsp+0xa0]
 103f773:	mov    rbx,QWORD PTR [rbx+0x10]
 103f777:	mov    QWORD PTR [rsp+0x80],rbx
 103f77f:	test   rbx,rbx
 103f782:	je     0x103f80f
 103f788:	mov    QWORD PTR [rsp+0x30],r15
 103f78d:	mov    DWORD PTR [rsp+0x28],0x400
 103f795:	lea    rax,[rsp+0x68]
 103f79a:	mov    QWORD PTR [rsp+0x20],rax
 103f79f:	xor    r9d,r9d
 103f7a2:	mov    r8d,DWORD PTR [r14+0x14]
 103f7a6:	mov    rdx,QWORD PTR [rbx+0x10]
 103f7aa:	mov    ecx,0x3900
 103f7af:	call   QWORD PTR [rip+0xfffffffffffc1ab3]        # 0x1001268
 103f7b5:	mov    esi,eax
 103f7b7:	mov    DWORD PTR [rsp+0x40],eax
 103f7bb:	jmp    0x103f7e8
 103f7bd:	xor    edi,edi
 103f7bf:	mov    r15,QWORD PTR [rsp+0x88]
 103f7c7:	mov    rbx,QWORD PTR [rsp+0x80]
 103f7cf:	mov    r12,QWORD PTR [rsp+0x90]
 103f7d7:	mov    r14,QWORD PTR [rsp+0xb0]
 103f7df:	mov    r13,QWORD PTR [rsp+0x70]
 103f7e4:	mov    esi,DWORD PTR [rsp+0x40]
 103f7e8:	test   esi,esi
 103f7ea:	je     0x103f807
 103f7ec:	mov    rdx,QWORD PTR [rsp+0x68]
 103f7f1:	mov    rcx,r12
 103f7f4:	call   QWORD PTR [rip+0xfffffffffffc229e]        # 0x1001a98
 103f7fa:	mov    rcx,QWORD PTR [rsp+0x68]
 103f7ff:	call   QWORD PTR [rip+0xfffffffffffc1a2b]        # 0x1001230
 103f805:	jmp    0x103f80f
 103f807:	mov    rbx,QWORD PTR [rbx]
 103f80a:	jmp    0x103f777
 103f80f:	mov    ebx,edi
 103f811:	mov    DWORD PTR [rsp+0x60],ebx
 103f815:	movzx  eax,WORD PTR [r14+0x1a]
 103f81a:	cmp    ebx,eax
 103f81c:	jge    0x103f83b
 103f81e:	movsxd rax,ebx
 103f821:	lea    rsi,[r15+rax*8]
 103f825:	cmp    QWORD PTR [rsi],0x0
 103f829:	je     0x103f834
 103f82b:	mov    rcx,QWORD PTR [rsi]
 103f82e:	call   QWORD PTR [rip+0xfffffffffffc1e7c]        # 0x10016b0
 103f834:	mov    QWORD PTR [rsi],rdi
 103f837:	inc    ebx
 103f839:	jmp    0x103f811
 103f83b:	test   r15,r15
 103f83e:	je     0x103f849
 103f840:	mov    rcx,r15
 103f843:	call   QWORD PTR [rip+0xfffffffffffc1e67]        # 0x10016b0
 103f849:	mov    QWORD PTR [rsp+0x88],rdi
 103f851:	mov    esi,DWORD PTR [rsp+0x40]
 103f855:	mov    rcx,r12
 103f858:	call   QWORD PTR [rip+0xfffffffffffc2292]        # 0x1001af0
 103f85e:	test   eax,eax
 103f860:	jne    0x103f8ee
 103f866:	test   esi,esi
 103f868:	jne    0x103f8ee
 103f86e:	lea    rdx,[rip+0xfffffffffffca5cb]        # 0x1009e40
 103f875:	mov    rcx,r12
 103f878:	call   QWORD PTR [rip+0xfffffffffffc221a]        # 0x1001a98
 103f87e:	cmp    DWORD PTR [rsp+0x938],esi
 103f885:	jbe    0x103f8ee
 103f887:	mov    DWORD PTR [rsp+0x54],edi
 103f88b:	mov    esi,edi
 103f88d:	mov    DWORD PTR [rsp+0x5c],edi
 103f891:	movzx  eax,WORD PTR [r14+0x1a]
 103f896:	cmp    esi,eax
 103f898:	jae    0x103f8ee
 103f89a:	mov    r15d,edi
 103f89d:	lea    rbx,[r15+r13*1]
 103f8a1:	mov    rdx,rbx
 103f8a4:	mov    rcx,r12
 103f8a7:	call   QWORD PTR [rip+0xfffffffffffc21e3]        # 0x1001a90
 103f8ad:	movzx  r11d,WORD PTR [r14+0x1a]
 103f8b2:	dec    r11d
 103f8b5:	cmp    esi,r11d
 103f8b8:	jae    0x103f8e6
 103f8ba:	lea    rdx,[rip+0xfffffffffffca5fb]        # 0x1009ebc
 103f8c1:	mov    rcx,r12
 103f8c4:	call   QWORD PTR [rip+0xfffffffffffc21c6]        # 0x1001a90
 103f8ca:	or     rax,0xffffffffffffffff
 103f8ce:	xchg   ax,ax
 103f8d0:	inc    rax
 103f8d3:	cmp    WORD PTR [rbx+rax*2],0x0
 103f8d8:	jne    0x103f8d0
 103f8da:	inc    eax
 103f8dc:	lea    rcx,[r15+rax*2]
 103f8e0:	mov    edi,ecx
 103f8e2:	mov    DWORD PTR [rsp+0x54],ecx
 103f8e6:	inc    esi
 103f8e8:	mov    DWORD PTR [rsp+0x5c],esi
 103f8ec:	jmp    0x103f891
 103f8ee:	jmp    0x103f8f8
 103f8f0:	mov    r12,QWORD PTR [rsp+0x90]
 103f8f8:	mov    rax,r12
 103f8fb:	mov    rcx,QWORD PTR [rsp+0x8d0]
 103f903:	xor    rcx,rsp
 103f906:	call   0x103ff40
 103f90b:	add    rsp,0x8e0
 103f912:	pop    r15
 103f914:	pop    r14
 103f916:	pop    r13
 103f918:	pop    r12
 103f91a:	pop    rdi
 103f91b:	pop    rsi
 103f91c:	pop    rbx
 103f91d:	ret    
 103f91e:	int3   
 103f91f:	int3   
 103f920:	int3   
 103f921:	int3   
 103f922:	int3   
 103f923:	int3   
 103f924:	int3   
 103f925:	int3   
 103f926:	int3   
 103f927:	int3   
 103f928:	int3   
 103f929:	int3   
 103f92a:	int3   
 103f92b:	int3   
 103f92c:	int3   
 103f92d:	int3   
 103f92e:	int3   
 103f92f:	int3   
 103f930:	rex push rbx
 103f932:	sub    rsp,0x20
 103f936:	mov    rbx,rcx
 103f939:	mov    rcx,QWORD PTR [rcx]
 103f93c:	test   rcx,rcx
 103f93f:	je     0x103f94e
 103f941:	call   QWORD PTR [rip+0xfffffffffffc17e9]        # 0x1001130
 103f947:	mov    QWORD PTR [rbx],0x0
 103f94e:	add    rsp,0x20
 103f952:	pop    rbx
 103f953:	ret    
 103f954:	int3   
 103f955:	int3   
 103f956:	int3   
 103f957:	int3   
 103f958:	int3   
 103f959:	int3   
 103f95a:	jmp    QWORD PTR [rip+0xfffffffffffc2028]        # 0x1001988
 103f960:	int3   
 103f961:	int3   
 103f962:	int3   
 103f963:	int3   
 103f964:	int3   
 103f965:	int3   
 103f966:	jmp    QWORD PTR [rip+0xfffffffffffc2114]        # 0x1001a80
 103f96c:	int3   
 103f96d:	int3   
 103f96e:	int3   
 103f96f:	int3   
 103f970:	int3   
 103f971:	int3   
 103f972:	jmp    QWORD PTR [rip+0xfffffffffffc2020]        # 0x1001998
 103f978:	int3   
 103f979:	int3   
 103f97a:	int3   
 103f97b:	int3   
 103f97c:	int3   
 103f97d:	int3   
 103f97e:	jmp    QWORD PTR [rip+0xfffffffffffc201c]        # 0x10019a0
 103f984:	int3   
 103f985:	int3   
 103f986:	int3   
 103f987:	int3   
 103f988:	int3   
 103f989:	int3   
 103f98a:	jmp    QWORD PTR [rip+0xfffffffffffc2018]        # 0x10019a8
 103f990:	int3   
 103f991:	int3   
 103f992:	int3   
 103f993:	int3   
 103f994:	int3   
 103f995:	int3   
 103f996:	jmp    QWORD PTR [rip+0xfffffffffffc205c]        # 0x10019f8
 103f99c:	int3   
 103f99d:	int3   
 103f99e:	int3   
 103f99f:	int3   
 103f9a0:	int3   
 103f9a1:	int3   
 103f9a2:	jmp    QWORD PTR [rip+0xfffffffffffc2060]        # 0x1001a08
 103f9a8:	int3   
 103f9a9:	int3   
 103f9aa:	int3   
 103f9ab:	int3   
 103f9ac:	int3   
 103f9ad:	int3   
 103f9ae:	jmp    QWORD PTR [rip+0xfffffffffffc205c]        # 0x1001a10
 103f9b4:	int3   
 103f9b5:	int3   
 103f9b6:	int3   
 103f9b7:	int3   
 103f9b8:	int3   
 103f9b9:	int3   
 103f9ba:	jmp    QWORD PTR [rip+0xfffffffffffc2058]        # 0x1001a18
 103f9c0:	int3   
 103f9c1:	int3   
 103f9c2:	int3   
 103f9c3:	int3   
 103f9c4:	int3   
 103f9c5:	int3   
 103f9c6:	jmp    QWORD PTR [rip+0xfffffffffffc2054]        # 0x1001a20
 103f9cc:	int3   
 103f9cd:	int3   
 103f9ce:	int3   
 103f9cf:	int3   
 103f9d0:	int3   
 103f9d1:	int3   
 103f9d2:	jmp    QWORD PTR [rip+0xfffffffffffc2050]        # 0x1001a28
 103f9d8:	int3   
 103f9d9:	int3   
 103f9da:	int3   
 103f9db:	int3   
 103f9dc:	int3   
 103f9dd:	int3   
 103f9de:	jmp    QWORD PTR [rip+0xfffffffffffc204c]        # 0x1001a30
 103f9e4:	int3   
 103f9e5:	int3   
 103f9e6:	int3   
 103f9e7:	int3   
 103f9e8:	int3   
 103f9e9:	int3   
 103f9ea:	jmp    QWORD PTR [rip+0xfffffffffffc2048]        # 0x1001a38
 103f9f0:	int3   
 103f9f1:	int3   
 103f9f2:	int3   
 103f9f3:	int3   
 103f9f4:	int3   
 103f9f5:	int3   
 103f9f6:	jmp    QWORD PTR [rip+0xfffffffffffc20dc]        # 0x1001ad8
 103f9fc:	int3   
 103f9fd:	int3   
 103f9fe:	int3   
 103f9ff:	int3   
 103fa00:	int3   
 103fa01:	int3   
 103fa02:	jmp    QWORD PTR [rip+0xfffffffffffc20d8]        # 0x1001ae0
 103fa08:	int3   
 103fa09:	int3   
 103fa0a:	int3   
 103fa0b:	int3   
 103fa0c:	int3   
 103fa0d:	int3   
 103fa0e:	jmp    QWORD PTR [rip+0xfffffffffffc2094]        # 0x1001aa8
 103fa14:	int3   
 103fa15:	int3   
 103fa16:	int3   
 103fa17:	int3   
 103fa18:	int3   
 103fa19:	int3   
 103fa1a:	jmp    QWORD PTR [rip+0xfffffffffffc1fd0]        # 0x10019f0
 103fa20:	int3   
 103fa21:	int3   
 103fa22:	int3   
 103fa23:	int3   
 103fa24:	int3   
 103fa25:	int3   
 103fa26:	jmp    QWORD PTR [rip+0xfffffffffffc1f9c]        # 0x10019c8
 103fa2c:	int3   
 103fa2d:	int3   
 103fa2e:	int3   
 103fa2f:	int3   
 103fa30:	int3   
 103fa31:	int3   
 103fa32:	jmp    QWORD PTR [rip+0xfffffffffffc1f88]        # 0x10019c0
 103fa38:	int3   
 103fa39:	int3   
 103fa3a:	int3   
 103fa3b:	int3   
 103fa3c:	int3   
 103fa3d:	int3   
 103fa3e:	jmp    QWORD PTR [rip+0xfffffffffffc1f74]        # 0x10019b8
 103fa44:	int3   
 103fa45:	int3   
 103fa46:	int3   
 103fa47:	int3   
 103fa48:	int3   
 103fa49:	int3   
 103fa4a:	jmp    QWORD PTR [rip+0xfffffffffffc1f30]        # 0x1001980
 103fa50:	int3   
 103fa51:	int3   
 103fa52:	int3   
 103fa53:	int3   
 103fa54:	int3   
 103fa55:	int3   
 103fa56:	int3   
 103fa57:	int3   
 103fa58:	sub    rsp,0x38
 103fa5c:	lea    rcx,[rip+0xa01]        # 0x1040464
 103fa63:	call   0x10401b0
 103fa68:	mov    r11d,DWORD PTR [rip+0x245c5]        # 0x1064034
 103fa6f:	mov    r9d,DWORD PTR [rip+0x245ba]        # 0x1064030
 103fa76:	lea    rax,[rip+0x24037]        # 0x1063ab4
 103fa7d:	lea    r8,[rip+0x2401c]        # 0x1063aa0
 103fa84:	lea    rdx,[rip+0x2401d]        # 0x1063aa8
 103fa8b:	lea    rcx,[rip+0x24006]        # 0x1063a98
 103fa92:	mov    DWORD PTR [rip+0x2401b],r11d        # 0x1063ab4
 103fa99:	mov    QWORD PTR [rsp+0x20],rax
 103fa9e:	call   QWORD PTR [rip+0xfffffffffffc1b84]        # 0x1001628
 103faa4:	mov    DWORD PTR [rip+0x24006],eax        # 0x1063ab0
 103faaa:	test   eax,eax
 103faac:	jns    0x103fab8
 103faae:	mov    ecx,0x8
 103fab3:	call   0x1040416
 103fab8:	add    rsp,0x38
 103fabc:	ret    
 103fabd:	int3   
 103fabe:	int3   
 103fabf:	int3   
 103fac0:	int3   
 103fac1:	int3   
 103fac2:	int3   
 103fac3:	int3   
 103fac4:	mov    QWORD PTR [rsp+0x8],rbx
 103fac9:	push   rdi
 103faca:	sub    rsp,0x20
 103face:	mov    rax,QWORD PTR gs:0x30
 103fad7:	mov    rbx,QWORD PTR [rax+0x8]
 103fadb:	xor    edi,edi
 103fadd:	xor    eax,eax
 103fadf:	lock cmpxchg QWORD PTR [rip+0x24560],rbx        # 0x1064048
 103fae8:	je     0x103fb05
 103faea:	cmp    rax,rbx
 103faed:	jne    0x103faf8
 103faef:	mov    ebx,0x1
 103faf4:	mov    edi,ebx
 103faf6:	jmp    0x103fb0a
 103faf8:	mov    ecx,0x3e8
 103fafd:	call   QWORD PTR [rip+0xfffffffffffc1a45]        # 0x1001548
 103fb03:	jmp    0x103fadd
 103fb05:	mov    ebx,0x1
 103fb0a:	mov    eax,DWORD PTR [rip+0x24530]        # 0x1064040
 103fb10:	cmp    eax,ebx
 103fb12:	jne    0x103fb20
 103fb14:	mov    ecx,0x1f
 103fb19:	call   0x1040416
 103fb1e:	jmp    0x103fb57
 103fb20:	mov    eax,DWORD PTR [rip+0x2451a]        # 0x1064040
 103fb26:	test   eax,eax
 103fb28:	jne    0x103fb51
 103fb2a:	mov    DWORD PTR [rip+0x24510],ebx        # 0x1064040
 103fb30:	lea    rdx,[rip+0xfffffffffffc20c9]        # 0x1001c00
 103fb37:	lea    rcx,[rip+0xfffffffffffc20aa]        # 0x1001be8
 103fb3e:	call   0x1040594
 103fb43:	test   eax,eax
 103fb45:	je     0x103fb57
 103fb47:	mov    eax,0xff
 103fb4c:	jmp    0x103fc39
 103fb51:	mov    DWORD PTR [rip+0x23f65],ebx        # 0x1063abc
 103fb57:	mov    eax,DWORD PTR [rip+0x244e3]        # 0x1064040
 103fb5d:	cmp    eax,ebx
 103fb5f:	jne    0x103fb7e
 103fb61:	lea    rdx,[rip+0xfffffffffffc2078]        # 0x1001be0
 103fb68:	lea    rcx,[rip+0xfffffffffffc2041]        # 0x1001bb0
 103fb6f:	call   0x1040588
 103fb74:	mov    DWORD PTR [rip+0x244c2],0x2        # 0x1064040
 103fb7e:	test   edi,edi
 103fb80:	jne    0x103fb8b
 103fb82:	xor    eax,eax
 103fb84:	xchg   QWORD PTR [rip+0x244bd],rax        # 0x1064048
 103fb8b:	cmp    QWORD PTR [rip+0x244cd],0x0        # 0x1064060
 103fb93:	je     0x103fbb4
 103fb95:	lea    rcx,[rip+0x244c4]        # 0x1064060
 103fb9c:	call   0x1040540
 103fba1:	test   eax,eax
 103fba3:	je     0x103fbb4
 103fba5:	xor    r8d,r8d
 103fba8:	lea    edx,[r8+0x2]
 103fbac:	xor    ecx,ecx
 103fbae:	call   QWORD PTR [rip+0x244ac]        # 0x1064060
 103fbb4:	mov    rcx,QWORD PTR [rip+0xfffffffffffc1a35]        # 0x10015f0
 103fbbb:	mov    rax,QWORD PTR [rip+0x23ede]        # 0x1063aa0
 103fbc2:	mov    QWORD PTR [rcx],rax
 103fbc5:	mov    r8,QWORD PTR [rip+0x23ed4]        # 0x1063aa0
 103fbcc:	mov    rdx,QWORD PTR [rip+0x23ed5]        # 0x1063aa8
 103fbd3:	mov    ecx,DWORD PTR [rip+0x23ebf]        # 0x1063a98
 103fbd9:	call   0x102fa00
 103fbde:	mov    DWORD PTR [rip+0x23ed4],eax        # 0x1063ab8
 103fbe4:	cmp    DWORD PTR [rip+0x23eb1],0x0        # 0x1063a9c
 103fbeb:	jne    0x103fbf5
 103fbed:	mov    ecx,eax
 103fbef:	call   QWORD PTR [rip+0xfffffffffffc1a03]        # 0x10015f8
 103fbf5:	cmp    DWORD PTR [rip+0x23ec0],0x0        # 0x1063abc
 103fbfc:	jne    0x103fc0a
 103fbfe:	call   QWORD PTR [rip+0xfffffffffffc19fc]        # 0x1001600
 103fc04:	mov    eax,DWORD PTR [rip+0x23eae]        # 0x1063ab8
 103fc0a:	jmp    0x103fc39
 103fc0c:	mov    DWORD PTR [rip+0x23ea6],eax        # 0x1063ab8
 103fc12:	cmp    DWORD PTR [rip+0x23e83],0x0        # 0x1063a9c
 103fc19:	jne    0x103fc24
 103fc1b:	mov    ecx,eax
 103fc1d:	call   QWORD PTR [rip+0xfffffffffffc19f5]        # 0x1001618
 103fc23:	int3   
 103fc24:	cmp    DWORD PTR [rip+0x23e91],0x0        # 0x1063abc
 103fc2b:	jne    0x103fc39
 103fc2d:	call   QWORD PTR [rip+0xfffffffffffc19cd]        # 0x1001600
 103fc33:	mov    eax,DWORD PTR [rip+0x23e7f]        # 0x1063ab8
 103fc39:	mov    rbx,QWORD PTR [rsp+0x30]
 103fc3e:	add    rsp,0x20
 103fc42:	pop    rdi
 103fc43:	ret    
 103fc44:	int3   
 103fc45:	int3   
 103fc46:	int3   
 103fc47:	int3   
 103fc48:	int3   
 103fc49:	int3   
 103fc4a:	int3   
 103fc4b:	int3   
 103fc4c:	sub    rsp,0x28
 103fc50:	mov    eax,0x5a4d
 103fc55:	cmp    WORD PTR [rip+0xfffffffffffc03a4],ax        # 0x1000000
 103fc5c:	je     0x103fc62
 103fc5e:	xor    ecx,ecx
 103fc60:	jmp    0x103fc9a
 103fc62:	movsxd rax,DWORD PTR [rip+0xfffffffffffc03d3]        # 0x100003c
 103fc69:	lea    rcx,[rip+0xfffffffffffc0390]        # 0x1000000
 103fc70:	add    rax,rcx
 103fc73:	cmp    DWORD PTR [rax],0x4550
 103fc79:	jne    0x103fc5e
 103fc7b:	mov    ecx,0x20b
 103fc80:	cmp    WORD PTR [rax+0x18],cx
 103fc84:	jne    0x103fc5e
 103fc86:	xor    ecx,ecx
 103fc88:	cmp    DWORD PTR [rax+0x84],0xe
 103fc8f:	jbe    0x103fc9a
 103fc91:	cmp    DWORD PTR [rax+0xf8],ecx
 103fc97:	setne  cl
 103fc9a:	mov    DWORD PTR [rip+0x23dfc],ecx        # 0x1063a9c
 103fca0:	mov    ecx,0x1
 103fca5:	call   QWORD PTR [rip+0xfffffffffffc190d]        # 0x10015b8
 103fcab:	or     rcx,0xffffffffffffffff
 103fcaf:	call   QWORD PTR [rip+0xfffffffffffc187b]        # 0x1001530
 103fcb5:	mov    rcx,QWORD PTR [rip+0xfffffffffffc1904]        # 0x10015c0
 103fcbc:	mov    QWORD PTR [rip+0x2438d],rax        # 0x1064050
 103fcc3:	mov    QWORD PTR [rip+0x2438e],rax        # 0x1064058
 103fcca:	mov    eax,DWORD PTR [rip+0x2436c]        # 0x106403c
 103fcd0:	mov    DWORD PTR [rcx],eax
 103fcd2:	mov    rdx,QWORD PTR [rip+0xfffffffffffc18ef]        # 0x10015c8
 103fcd9:	mov    eax,DWORD PTR [rip+0x24359]        # 0x1064038
 103fcdf:	mov    DWORD PTR [rdx],eax
 103fce1:	call   0x1040424
 103fce6:	call   0x10405ac
 103fceb:	cmp    DWORD PTR [rip+0x23b9a],0x0        # 0x106388c
 103fcf2:	jne    0x103fd01
 103fcf4:	lea    rcx,[rip+0x8a5]        # 0x10405a0
 103fcfb:	call   QWORD PTR [rip+0xfffffffffffc18cf]        # 0x10015d0
 103fd01:	cmp    DWORD PTR [rip+0x23b80],0xffffffff        # 0x1063888
 103fd08:	jne    0x103fd13
 103fd0a:	or     ecx,0xffffffff
 103fd0d:	call   QWORD PTR [rip+0xfffffffffffc18f5]        # 0x1001608
 103fd13:	xor    eax,eax
 103fd15:	add    rsp,0x28
 103fd19:	ret    
 103fd1a:	int3   
 103fd1b:	int3   
 103fd1c:	int3   
 103fd1d:	int3   
 103fd1e:	int3   
 103fd1f:	int3   
 103fd20:	sub    rsp,0x28
 103fd24:	call   0x10405b8
 103fd29:	add    rsp,0x28
 103fd2d:	jmp    0x103fac4
 103fd32:	int3   
 103fd33:	int3   
 103fd34:	int3   
 103fd35:	int3   
 103fd36:	int3   
 103fd37:	int3   
 103fd38:	mov    QWORD PTR [rsp+0x8],rcx
 103fd3d:	sub    rsp,0x88
 103fd44:	lea    rcx,[rip+0x23e15]        # 0x1063b60
 103fd4b:	call   QWORD PTR [rip+0xfffffffffffc17b7]        # 0x1001508
 103fd51:	mov    rax,QWORD PTR [rip+0x23f00]        # 0x1063c58
 103fd58:	mov    QWORD PTR [rsp+0x58],rax
 103fd5d:	xor    r8d,r8d
 103fd60:	lea    rdx,[rsp+0x60]
 103fd65:	mov    rcx,QWORD PTR [rsp+0x58]
 103fd6a:	call   0x10497a6
 103fd6f:	mov    QWORD PTR [rsp+0x50],rax
 103fd74:	cmp    QWORD PTR [rsp+0x50],0x0
 103fd7a:	je     0x103fdbd
 103fd7c:	mov    QWORD PTR [rsp+0x38],0x0
 103fd85:	lea    rax,[rsp+0x48]
 103fd8a:	mov    QWORD PTR [rsp+0x30],rax
 103fd8f:	lea    rax,[rsp+0x40]
 103fd94:	mov    QWORD PTR [rsp+0x28],rax
 103fd99:	lea    rax,[rip+0x23dc0]        # 0x1063b60
 103fda0:	mov    QWORD PTR [rsp+0x20],rax
 103fda5:	mov    r9,QWORD PTR [rsp+0x50]
 103fdaa:	mov    r8,QWORD PTR [rsp+0x58]
 103fdaf:	mov    rdx,QWORD PTR [rsp+0x60]
 103fdb4:	xor    ecx,ecx
 103fdb6:	call   0x104979a
 103fdbb:	jmp    0x103fddf
 103fdbd:	mov    rax,QWORD PTR [rsp+0x88]
 103fdc5:	mov    QWORD PTR [rip+0x23e8c],rax        # 0x1063c58
 103fdcc:	lea    rax,[rsp+0x88]
 103fdd4:	add    rax,0x8
 103fdd8:	mov    QWORD PTR [rip+0x23e19],rax        # 0x1063bf8
 103fddf:	mov    rax,QWORD PTR [rip+0x23e72]        # 0x1063c58
 103fde6:	mov    QWORD PTR [rip+0x23ce3],rax        # 0x1063ad0
 103fded:	mov    rax,QWORD PTR [rsp+0x90]
 103fdf5:	mov    QWORD PTR [rip+0x23de4],rax        # 0x1063be0
 103fdfc:	mov    DWORD PTR [rip+0x23cba],0xc0000409        # 0x1063ac0
 103fe06:	mov    DWORD PTR [rip+0x23cb4],0x1        # 0x1063ac4
 103fe10:	mov    rax,QWORD PTR [rip+0x23a59]        # 0x1063870
 103fe17:	mov    QWORD PTR [rsp+0x68],rax
 103fe1c:	mov    rax,QWORD PTR [rip+0x23a55]        # 0x1063878
 103fe23:	mov    QWORD PTR [rsp+0x70],rax
 103fe28:	call   QWORD PTR [rip+0xfffffffffffc16f2]        # 0x1001520
 103fe2e:	mov    DWORD PTR [rip+0x23d24],eax        # 0x1063b58
 103fe34:	mov    ecx,0x1
 103fe39:	call   0x1040672
 103fe3e:	xor    ecx,ecx
 103fe40:	call   QWORD PTR [rip+0xfffffffffffc174a]        # 0x1001590
 103fe46:	lea    rcx,[rip+0xfffffffffffca273]        # 0x100a0c0
 103fe4d:	call   QWORD PTR [rip+0xfffffffffffc16d5]        # 0x1001528
 103fe53:	cmp    DWORD PTR [rip+0x23cfe],0x0        # 0x1063b58
 103fe5a:	jne    0x103fe66
 103fe5c:	mov    ecx,0x1
 103fe61:	call   0x1040672
 103fe66:	call   QWORD PTR [rip+0xfffffffffffc1444]        # 0x10012b0
 103fe6c:	mov    edx,0xc0000409
 103fe71:	mov    rcx,rax
 103fe74:	call   QWORD PTR [rip+0xfffffffffffc15e6]        # 0x1001460
 103fe7a:	add    rsp,0x88
 103fe81:	ret    
 103fe82:	int3   
 103fe83:	int3   
 103fe84:	int3   
 103fe85:	int3   
 103fe86:	int3   
 103fe87:	int3   
 103fe88:	jmp    QWORD PTR [rip+0xfffffffffffc1822]        # 0x10016b0
 103fe8e:	int3   
 103fe8f:	int3   
 103fe90:	int3   
 103fe91:	int3   
 103fe92:	int3   
 103fe93:	int3   
 103fe94:	jmp    QWORD PTR [rip+0xfffffffffffc181e]        # 0x10016b8
 103fe9a:	int3   
 103fe9b:	int3   
 103fe9c:	int3   
 103fe9d:	int3   
 103fe9e:	int3   
 103fe9f:	int3   
 103fea0:	mov    rax,rsp
 103fea3:	mov    QWORD PTR [rax+0x8],rbx
 103fea7:	mov    QWORD PTR [rax+0x10],rbp
 103feab:	mov    QWORD PTR [rax+0x18],rsi
 103feaf:	mov    QWORD PTR [rax+0x20],rdi
 103feb3:	push   r12
 103feb5:	sub    rsp,0x20
 103feb9:	mov    rbx,QWORD PTR [r9+0x38]
 103febd:	mov    rsi,rdx
 103fec0:	mov    r12,r8
 103fec3:	mov    rbp,rcx
 103fec6:	lea    r8,[rbx+0x4]
 103feca:	mov    rdx,r9
 103fecd:	mov    rcx,rsi
 103fed0:	mov    rdi,r9
 103fed3:	call   0x10401dc
 103fed8:	mov    r11d,DWORD PTR [rbx+0x4]
 103fedc:	mov    r10d,DWORD PTR [rbp+0x4]
 103fee0:	mov    eax,r11d
 103fee3:	and    r11d,0x2
 103fee7:	mov    r8d,0x1
 103feed:	and    eax,r8d
 103fef0:	and    r10b,0x66
 103fef4:	cmove  r11d,eax
 103fef8:	test   r11d,r11d
 103fefb:	je     0x103ff11
 103fefd:	mov    r9,rdi
 103ff00:	mov    r8,r12
 103ff03:	mov    rdx,rsi
 103ff06:	mov    rcx,rbp
 103ff09:	call   0x103fe94
 103ff0e:	mov    r8d,eax
 103ff11:	mov    rbx,QWORD PTR [rsp+0x30]
 103ff16:	mov    rbp,QWORD PTR [rsp+0x38]
 103ff1b:	mov    rsi,QWORD PTR [rsp+0x40]
 103ff20:	mov    rdi,QWORD PTR [rsp+0x48]
 103ff25:	mov    eax,r8d
 103ff28:	add    rsp,0x20
 103ff2c:	pop    r12
 103ff2e:	ret    
 103ff2f:	int3   
 103ff30:	int3   
 103ff31:	int3   
 103ff32:	int3   
 103ff33:	int3   
 103ff34:	int3   
 103ff35:	int3   
 103ff36:	data16 nop WORD PTR [rax+rax*1+0x0]
 103ff40:	cmp    rcx,QWORD PTR [rip+0x23929]        # 0x1063870
 103ff47:	jne    0x103ff5a
 103ff49:	rol    rcx,0x10
 103ff4d:	test   cx,0xffff
 103ff52:	jne    0x103ff56
 103ff54:	repz ret 
 103ff56:	ror    rcx,0x10
 103ff5a:	jmp    0x103fd38
 103ff5f:	int3   
 103ff60:	int3   
 103ff61:	int3   
 103ff62:	int3   
 103ff63:	int3   
 103ff64:	int3   
 103ff65:	int3   
 103ff66:	int3   
 103ff67:	int3   
 103ff68:	mov    QWORD PTR [rsp+0x8],rbx
 103ff6d:	mov    QWORD PTR [rsp+0x10],rsi
 103ff72:	push   rdi
 103ff73:	sub    rsp,0x20
 103ff77:	mov    esi,edx
 103ff79:	mov    rbx,rcx
 103ff7c:	test   dl,0x2
 103ff7f:	je     0x103ffab
 103ff81:	mov    r8d,DWORD PTR [rcx-0x8]
 103ff85:	lea    r9,[rip+0x722]        # 0x10406ae
 103ff8c:	mov    edx,0x18
 103ff91:	call   0x1040094
 103ff96:	test   sil,0x1
 103ff9a:	je     0x103ffa5
 103ff9c:	lea    rcx,[rbx-0x8]
 103ffa0:	call   0x103f95a
 103ffa5:	lea    rax,[rbx-0x8]
 103ffa9:	jmp    0x103ffc1
 103ffab:	call   0x10406ae
 103ffb0:	test   sil,0x1
 103ffb4:	je     0x103ffbe
 103ffb6:	mov    rcx,rbx
 103ffb9:	call   0x103f95a
 103ffbe:	mov    rax,rbx
 103ffc1:	mov    rbx,QWORD PTR [rsp+0x30]
 103ffc6:	mov    rsi,QWORD PTR [rsp+0x38]
 103ffcb:	add    rsp,0x20
 103ffcf:	pop    rdi
 103ffd0:	ret    
 103ffd1:	int3   
 103ffd2:	int3   
 103ffd3:	int3   
 103ffd4:	int3   
 103ffd5:	int3   
 103ffd6:	int3   
 103ffd7:	int3   
 103ffd8:	mov    rax,rsp
 103ffdb:	mov    QWORD PTR [rax+0x18],rbx
 103ffdf:	mov    QWORD PTR [rax+0x20],rsi
 103ffe3:	mov    QWORD PTR [rax+0x10],rdx
 103ffe7:	mov    QWORD PTR [rax+0x8],rcx
 103ffeb:	push   rdi
 103ffec:	push   r12
 103ffee:	push   r13
 103fff0:	sub    rsp,0x30
 103fff4:	mov    r13,r9
 103fff7:	mov    r12d,r8d
 103fffa:	mov    rsi,rdx
 103fffd:	mov    rdi,rcx
 1040000:	xor    ebx,ebx
 1040002:	mov    DWORD PTR [rax-0x28],ebx
 1040005:	mov    DWORD PTR [rsp+0x24],ebx
 1040009:	cmp    ebx,r12d
 104000c:	jge    0x1040020
 104000e:	mov    rcx,rdi
 1040011:	call   r13
 1040014:	add    rdi,rsi
 1040017:	mov    QWORD PTR [rsp+0x50],rdi
 104001c:	inc    ebx
 104001e:	jmp    0x1040005
 1040020:	mov    DWORD PTR [rsp+0x20],0x1
 1040028:	mov    rbx,QWORD PTR [rsp+0x60]
 104002d:	mov    rsi,QWORD PTR [rsp+0x68]
 1040032:	add    rsp,0x30
 1040036:	pop    r13
 1040038:	pop    r12
 104003a:	pop    rdi
 104003b:	ret    
 104003c:	int3   
 104003d:	int3   
 104003e:	int3   
 104003f:	int3   
 1040040:	int3   
 1040041:	int3   
 1040042:	int3   
 1040043:	int3   
 1040044:	mov    QWORD PTR [rsp+0x10],rbx
 1040049:	mov    DWORD PTR [rsp+0x18],r8d
 104004e:	mov    QWORD PTR [rsp+0x8],rcx
 1040053:	push   rsi
 1040054:	push   rdi
 1040055:	push   r12
 1040057:	sub    rsp,0x40
 104005b:	mov    rsi,r9
 104005e:	mov    edi,r8d
 1040061:	mov    r12,rdx
 1040064:	mov    rbx,rcx
 1040067:	dec    edi
 1040069:	mov    DWORD PTR [rsp+0x70],edi
 104006d:	js     0x104007e
 104006f:	sub    rbx,r12
 1040072:	mov    QWORD PTR [rsp+0x60],rbx
 1040077:	mov    rcx,rbx
 104007a:	call   rsi
 104007c:	jmp    0x1040067
 104007e:	jmp    0x1040080
 1040080:	mov    rbx,QWORD PTR [rsp+0x68]
 1040085:	add    rsp,0x40
 1040089:	pop    r12
 104008b:	pop    rdi
 104008c:	pop    rsi
 104008d:	ret    
 104008e:	int3   
 104008f:	int3   
 1040090:	int3   
 1040091:	int3   
 1040092:	int3   
 1040093:	int3   
 1040094:	mov    rax,rsp
 1040097:	mov    QWORD PTR [rax+0x20],r9
 104009b:	mov    DWORD PTR [rax+0x18],r8d
 104009f:	mov    QWORD PTR [rax+0x10],rdx
 10400a3:	push   rbx
 10400a4:	push   rsi
 10400a5:	push   rdi
 10400a6:	push   r12
 10400a8:	sub    rsp,0x38
 10400ac:	mov    r12,r9
 10400af:	movsxd rdi,r8d
 10400b2:	mov    rsi,rdx
 10400b5:	and    DWORD PTR [rax-0x38],0x0
 10400b9:	mov    rbx,rdi
 10400bc:	imul   rbx,rdx
 10400c0:	add    rbx,rcx
 10400c3:	mov    QWORD PTR [rax+0x8],rbx
 10400c7:	dec    edi
 10400c9:	mov    DWORD PTR [rsp+0x70],edi
 10400cd:	js     0x10400df
 10400cf:	sub    rbx,rsi
 10400d2:	mov    QWORD PTR [rsp+0x60],rbx
 10400d7:	mov    rcx,rbx
 10400da:	call   r12
 10400dd:	jmp    0x10400c7
 10400df:	mov    DWORD PTR [rsp+0x20],0x1
 10400e7:	add    rsp,0x38
 10400eb:	pop    r12
 10400ed:	pop    rdi
 10400ee:	pop    rsi
 10400ef:	pop    rbx
 10400f0:	ret    
 10400f1:	int3   
 10400f2:	int3   
 10400f3:	int3   
 10400f4:	int3   
 10400f5:	int3   
 10400f6:	int3   
 10400f7:	int3   
 10400f8:	rex push rbx
 10400fa:	sub    rsp,0x20
 10400fe:	mov    rbx,rcx
 1040101:	mov    rcx,QWORD PTR [rip+0x23f50]        # 0x1064058
 1040108:	call   QWORD PTR [rip+0xfffffffffffc13f2]        # 0x1001500
 104010e:	mov    QWORD PTR [rsp+0x38],rax
 1040113:	cmp    rax,0xffffffffffffffff
 1040117:	jne    0x1040124
 1040119:	mov    rcx,rbx
 104011c:	call   QWORD PTR [rip+0xfffffffffffc156e]        # 0x1001690
 1040122:	jmp    0x10401a2
 1040124:	mov    ecx,0x8
 1040129:	call   0x10406a2
 104012e:	nop
 104012f:	mov    rcx,QWORD PTR [rip+0x23f22]        # 0x1064058
 1040136:	call   QWORD PTR [rip+0xfffffffffffc13c4]        # 0x1001500
 104013c:	mov    QWORD PTR [rsp+0x38],rax
 1040141:	mov    rcx,QWORD PTR [rip+0x23f08]        # 0x1064050
 1040148:	call   QWORD PTR [rip+0xfffffffffffc13b2]        # 0x1001500
 104014e:	mov    QWORD PTR [rsp+0x40],rax
 1040153:	mov    rcx,rbx
 1040156:	call   QWORD PTR [rip+0xfffffffffffc13d4]        # 0x1001530
 104015c:	mov    rcx,rax
 104015f:	lea    r8,[rsp+0x40]
 1040164:	lea    rdx,[rsp+0x38]
 1040169:	call   0x1040696
 104016e:	mov    rbx,rax
 1040171:	mov    rcx,QWORD PTR [rsp+0x38]
 1040176:	call   QWORD PTR [rip+0xfffffffffffc13b4]        # 0x1001530
 104017c:	mov    QWORD PTR [rip+0x23ed5],rax        # 0x1064058
 1040183:	mov    rcx,QWORD PTR [rsp+0x40]
 1040188:	call   QWORD PTR [rip+0xfffffffffffc13a2]        # 0x1001530
 104018e:	mov    QWORD PTR [rip+0x23ebb],rax        # 0x1064050
 1040195:	mov    ecx,0x8
 104019a:	call   0x104068a
 104019f:	mov    rax,rbx
 10401a2:	add    rsp,0x20
 10401a6:	pop    rbx
 10401a7:	ret    
 10401a8:	int3   
 10401a9:	int3   
 10401aa:	int3   
 10401ab:	int3   
 10401ac:	int3   
 10401ad:	int3   
 10401ae:	int3   
 10401af:	int3   
 10401b0:	sub    rsp,0x28
 10401b4:	call   0x10400f8
 10401b9:	neg    rax
 10401bc:	sbb    eax,eax
 10401be:	neg    eax
 10401c0:	dec    eax
 10401c2:	add    rsp,0x28
 10401c6:	ret    
 10401c7:	int3   
 10401c8:	int3   
 10401c9:	int3   
 10401ca:	int3   
 10401cb:	int3   
 10401cc:	int3   
 10401cd:	int3   
 10401ce:	jmp    QWORD PTR [rip+0xfffffffffffc143c]        # 0x1001610
 10401d4:	int3   
 10401d5:	int3   
 10401d6:	int3   
 10401d7:	int3   
 10401d8:	int3   
 10401d9:	int3   
 10401da:	int3   
 10401db:	int3   
 10401dc:	rex push rbx
 10401de:	sub    rsp,0x20
 10401e2:	mov    r11d,DWORD PTR [r8]
 10401e5:	mov    rbx,rdx
 10401e8:	mov    r9,rcx
 10401eb:	and    r11d,0xfffffff8
 10401ef:	test   BYTE PTR [r8],0x4
 10401f3:	mov    r10,rcx
 10401f6:	je     0x104020b
 10401f8:	mov    eax,DWORD PTR [r8+0x8]
 10401fc:	movsxd r10,DWORD PTR [r8+0x4]
 1040200:	neg    eax
 1040202:	add    r10,rcx
 1040205:	movsxd rcx,eax
 1040208:	and    r10,rcx
 104020b:	movsxd rax,r11d
 104020e:	mov    rdx,QWORD PTR [rax+r10*1]
 1040212:	mov    rax,QWORD PTR [rbx+0x10]
 1040216:	mov    ecx,DWORD PTR [rax+0x8]
 1040219:	add    rcx,QWORD PTR [rbx+0x8]
 104021d:	test   BYTE PTR [rcx+0x3],0xf
 1040221:	je     0x104022f
 1040223:	movzx  eax,BYTE PTR [rcx+0x3]
 1040227:	and    eax,0xfffffff0
 104022a:	cdqe   
 104022c:	add    r9,rax
 104022f:	xor    r9,rdx
 1040232:	mov    rcx,r9
 1040235:	add    rsp,0x20
 1040239:	pop    rbx
 104023a:	jmp    0x103ff40
 104023f:	int3   
 1040240:	int3   
 1040241:	int3   
 1040242:	int3   
 1040243:	int3   
 1040244:	int3   
 1040245:	int3   
 1040246:	int3   
 1040247:	int3   
 1040248:	sub    rsp,0x28
 104024c:	mov    r8,QWORD PTR [r9+0x38]
 1040250:	mov    rcx,rdx
 1040253:	mov    rdx,r9
 1040256:	call   0x10401dc
 104025b:	mov    eax,0x1
 1040260:	add    rsp,0x28
 1040264:	ret    
 1040265:	int3   
 1040266:	int3   
 1040267:	int3   
 1040268:	int3   
 1040269:	int3   
 104026a:	int3   
 104026b:	int3   
 104026c:	jmp    QWORD PTR [rip+0xfffffffffffc14ae]        # 0x1001720
 1040272:	int3   
 1040273:	int3   
 1040274:	int3   
 1040275:	int3   
 1040276:	int3   
 1040277:	int3   
 1040278:	jmp    QWORD PTR [rip+0xfffffffffffc14aa]        # 0x1001728
 104027e:	int3   
 104027f:	int3   
 1040280:	int3   
 1040281:	int3   
 1040282:	int3   
 1040283:	int3   
 1040284:	int3   
 1040285:	int3   
 1040286:	data16 nop WORD PTR [rax+rax*1+0x0]
 1040290:	sub    rsp,0x10
 1040294:	mov    QWORD PTR [rsp],r10
 1040298:	mov    QWORD PTR [rsp+0x8],r11
 104029d:	xor    r11,r11
 10402a0:	lea    r10,[rsp+0x18]
 10402a5:	sub    r10,rax
 10402a8:	cmovb  r10,r11
 10402ac:	mov    r11,QWORD PTR gs:0x10
 10402b5:	cmp    r10,r11
 10402b8:	jae    0x10402d0
 10402ba:	and    r10w,0xf000
 10402c0:	lea    r11,[r11-0x1000]
 10402c7:	mov    BYTE PTR [r11],0x0
 10402cb:	cmp    r10,r11
 10402ce:	jne    0x10402c0
 10402d0:	mov    r10,QWORD PTR [rsp]
 10402d4:	mov    r11,QWORD PTR [rsp+0x8]
 10402d9:	add    rsp,0x10
 10402dd:	ret    
 10402de:	int3   
 10402df:	int3   
 10402e0:	int3   
 10402e1:	int3   
 10402e2:	int3   
 10402e3:	int3   
 10402e4:	jmp    QWORD PTR [rip+0xfffffffffffc1446]        # 0x1001730
 10402ea:	int3   
 10402eb:	int3   
 10402ec:	int3   
 10402ed:	int3   
 10402ee:	int3   
 10402ef:	int3   
 10402f0:	jmp    QWORD PTR [rip+0xfffffffffffc1442]        # 0x1001738
 10402f6:	int3   
 10402f7:	int3   
 10402f8:	int3   
 10402f9:	int3   
 10402fa:	int3   
 10402fb:	int3   
 10402fc:	mov    rax,rsp
 10402ff:	mov    QWORD PTR [rax+0x8],rbx
 1040303:	mov    QWORD PTR [rax+0x10],rbp
 1040307:	mov    QWORD PTR [rax+0x18],rsi
 104030b:	mov    QWORD PTR [rax+0x20],rdi
 104030f:	push   r12
 1040311:	sub    rsp,0x20
 1040315:	mov    r10,QWORD PTR [r9+0x38]
 1040319:	mov    rsi,rdx
 104031c:	mov    r12,r8
 104031f:	mov    eax,DWORD PTR [r10]
 1040322:	mov    rbp,rcx
 1040325:	mov    rdx,r9
 1040328:	add    rax,rax
 104032b:	mov    rcx,rsi
 104032e:	mov    rdi,r9
 1040331:	lea    rbx,[r10+rax*8+0x4]
 1040336:	mov    r8,rbx
 1040339:	call   0x10401dc
 104033e:	mov    r11d,DWORD PTR [rbx]
 1040341:	mov    r10d,DWORD PTR [rbp+0x4]
 1040345:	mov    eax,r11d
 1040348:	and    r11d,0x2
 104034c:	mov    edx,0x1
 1040351:	and    eax,edx
 1040353:	and    r10b,0x66
 1040357:	cmove  r11d,eax
 104035b:	test   r11d,r11d
 104035e:	je     0x1040373
 1040360:	mov    r9,rdi
 1040363:	mov    r8,r12
 1040366:	mov    rdx,rsi
 1040369:	mov    rcx,rbp
 104036c:	call   0x1040396
 1040371:	mov    edx,eax
 1040373:	mov    rbx,QWORD PTR [rsp+0x30]
 1040378:	mov    rbp,QWORD PTR [rsp+0x38]
 104037d:	mov    rsi,QWORD PTR [rsp+0x40]
 1040382:	mov    rdi,QWORD PTR [rsp+0x48]
 1040387:	mov    eax,edx
 1040389:	add    rsp,0x20
 104038d:	pop    r12
 104038f:	ret    
 1040390:	int3   
 1040391:	int3   
 1040392:	int3   
 1040393:	int3   
 1040394:	int3   
 1040395:	int3   
 1040396:	jmp    QWORD PTR [rip+0xfffffffffffc12bc]        # 0x1001658
 104039c:	int3   
 104039d:	int3   
 104039e:	int3   
 104039f:	int3   
 10403a0:	int3   
 10403a1:	int3   
 10403a2:	jmp    QWORD PTR [rip+0xfffffffffffc12a8]        # 0x1001650
 10403a8:	int3   
 10403a9:	int3   
 10403aa:	int3   
 10403ab:	int3   
 10403ac:	int3   
 10403ad:	int3   
 10403ae:	int3   
 10403af:	int3   
 10403b0:	sub    rsp,0x28
 10403b4:	mov    rax,QWORD PTR [rcx]
 10403b7:	cmp    DWORD PTR [rax],0xe06d7363
 10403bd:	jne    0x10403ea
 10403bf:	cmp    DWORD PTR [rax+0x18],0x4
 10403c3:	jne    0x10403ea
 10403c5:	mov    eax,DWORD PTR [rax+0x20]
 10403c8:	cmp    eax,0x19930520
 10403cd:	je     0x10403e4
 10403cf:	cmp    eax,0x19930521
 10403d4:	je     0x10403e4
 10403d6:	cmp    eax,0x19930522
 10403db:	je     0x10403e4
 10403dd:	cmp    eax,0x1994000
 10403e2:	jne    0x10403ea
 10403e4:	call   0x104067e
 10403e9:	int3   
 10403ea:	xor    eax,eax
 10403ec:	add    rsp,0x28
 10403f0:	ret    
 10403f1:	int3   
 10403f2:	int3   
 10403f3:	int3   
 10403f4:	int3   
 10403f5:	int3   
 10403f6:	int3   
 10403f7:	int3   
 10403f8:	sub    rsp,0x28
 10403fc:	lea    rcx,[rip+0xffffffffffffffad]        # 0x10403b0
 1040403:	call   QWORD PTR [rip+0xfffffffffffc1187]        # 0x1001590
 1040409:	xor    eax,eax
 104040b:	add    rsp,0x28
 104040f:	ret    
 1040410:	int3   
 1040411:	int3   
 1040412:	int3   
 1040413:	int3   
 1040414:	int3   
 1040415:	int3   
 1040416:	jmp    QWORD PTR [rip+0xfffffffffffc1214]        # 0x1001630
 104041c:	int3   
 104041d:	int3   
 104041e:	int3   
 104041f:	int3   
 1040420:	int3   
 1040421:	int3   
 1040422:	int3   
 1040423:	int3   
 1040424:	mov    QWORD PTR [rsp+0x8],rbx
 1040429:	push   rdi
 104042a:	sub    rsp,0x20
 104042e:	lea    rbx,[rip+0xfffffffffffcaa93]        # 0x100aec8
 1040435:	lea    rdi,[rip+0xfffffffffffcaa8c]        # 0x100aec8
 104043c:	jmp    0x104044c
 104043e:	mov    rax,QWORD PTR [rbx]
 1040441:	test   rax,rax
 1040444:	je     0x1040448
 1040446:	call   rax
 1040448:	add    rbx,0x8
 104044c:	cmp    rbx,rdi
 104044f:	jb     0x104043e
 1040451:	mov    rbx,QWORD PTR [rsp+0x30]
 1040456:	add    rsp,0x20
 104045a:	pop    rdi
 104045b:	ret    
 104045c:	int3   
 104045d:	int3   
 104045e:	int3   
 104045f:	int3   
 1040460:	int3   
 1040461:	int3   
 1040462:	int3   
 1040463:	int3   
 1040464:	mov    QWORD PTR [rsp+0x8],rbx
 1040469:	push   rdi
 104046a:	sub    rsp,0x20
 104046e:	lea    rbx,[rip+0xfffffffffffcaa63]        # 0x100aed8
 1040475:	lea    rdi,[rip+0xfffffffffffcaa5c]        # 0x100aed8
 104047c:	jmp    0x104048c
 104047e:	mov    rax,QWORD PTR [rbx]
 1040481:	test   rax,rax
 1040484:	je     0x1040488
 1040486:	call   rax
 1040488:	add    rbx,0x8
 104048c:	cmp    rbx,rdi
 104048f:	jb     0x104047e
 1040491:	mov    rbx,QWORD PTR [rsp+0x30]
 1040496:	add    rsp,0x20
 104049a:	pop    rdi
 104049b:	ret    
 104049c:	int3   
 104049d:	int3   
 104049e:	int3   
 104049f:	int3   
 10404a0:	int3   
 10404a1:	int3   
 10404a2:	jmp    QWORD PTR [rip+0xfffffffffffc1178]        # 0x1001620
 10404a8:	int3   
 10404a9:	int3   
 10404aa:	int3   
 10404ab:	int3   
 10404ac:	int3   
 10404ad:	int3   
 10404ae:	int3   
 10404af:	int3   
 10404b0:	mov    rax,rcx
 10404b3:	mov    ecx,0x5a4d
 10404b8:	cmp    WORD PTR [rax],cx
 10404bb:	je     0x10404c0
 10404bd:	xor    eax,eax
 10404bf:	ret    
 10404c0:	movsxd rcx,DWORD PTR [rax+0x3c]
 10404c4:	add    rcx,rax
 10404c7:	xor    eax,eax
 10404c9:	cmp    DWORD PTR [rcx],0x4550
 10404cf:	jne    0x10404dd
 10404d1:	mov    edx,0x20b
 10404d6:	cmp    WORD PTR [rcx+0x18],dx
 10404da:	sete   al
 10404dd:	repz ret 
 10404df:	int3   
 10404e0:	int3   
 10404e1:	int3   
 10404e2:	int3   
 10404e3:	int3   
 10404e4:	int3   
 10404e5:	int3   
 10404e6:	int3   
 10404e7:	int3   
 10404e8:	int3   
 10404e9:	int3   
 10404ea:	int3   
 10404eb:	int3   
 10404ec:	int3   
 10404ed:	int3   
 10404ee:	int3   
 10404ef:	int3   
 10404f0:	movsxd r8,DWORD PTR [rcx+0x3c]
 10404f4:	xor    r9d,r9d
 10404f7:	mov    r10,rdx
 10404fa:	add    r8,rcx
 10404fd:	movzx  eax,WORD PTR [r8+0x14]
 1040502:	movzx  r11d,WORD PTR [r8+0x6]
 1040507:	lea    rcx,[rax+r8*1+0x18]
 104050c:	test   r11d,r11d
 104050f:	je     0x104052f
 1040511:	mov    edx,DWORD PTR [rcx+0xc]
 1040514:	cmp    r10,rdx
 1040517:	jb     0x1040523
 1040519:	mov    eax,DWORD PTR [rcx+0x8]
 104051c:	add    eax,edx
 104051e:	cmp    r10,rax
 1040521:	jb     0x1040532
 1040523:	inc    r9d
 1040526:	add    rcx,0x28
 104052a:	cmp    r9d,r11d
 104052d:	jb     0x1040511
 104052f:	xor    eax,eax
 1040531:	ret    
 1040532:	mov    rax,rcx
 1040535:	ret    
 1040536:	int3   
 1040537:	int3   
 1040538:	int3   
 1040539:	int3   
 104053a:	int3   
 104053b:	int3   
 104053c:	int3   
 104053d:	int3   
 104053e:	int3   
 104053f:	int3   
 1040540:	sub    rsp,0x28
 1040544:	mov    r8,rcx
 1040547:	lea    r9,[rip+0xfffffffffffbfab2]        # 0x1000000
 104054e:	mov    rcx,r9
 1040551:	call   0x10404b0
 1040556:	test   eax,eax
 1040558:	je     0x104057c
 104055a:	sub    r8,r9
 104055d:	mov    rdx,r8
 1040560:	mov    rcx,r9
 1040563:	call   0x10404f0
 1040568:	test   rax,rax
 104056b:	je     0x104057c
 104056d:	mov    eax,DWORD PTR [rax+0x24]
 1040570:	shr    eax,0x1f
 1040573:	not    eax
 1040575:	and    eax,0x1
 1040578:	jmp    0x104057c
 104057a:	xor    eax,eax
 104057c:	add    rsp,0x28
 1040580:	ret    
 1040581:	int3   
 1040582:	int3   
 1040583:	int3   
 1040584:	int3   
 1040585:	int3   
 1040586:	int3   
 1040587:	int3   
 1040588:	jmp    QWORD PTR [rip+0xfffffffffffc105a]        # 0x10015e8
 104058e:	int3   
 104058f:	int3   
 1040590:	int3   
 1040591:	int3   
 1040592:	int3   
 1040593:	int3   
 1040594:	jmp    QWORD PTR [rip+0xfffffffffffc1046]        # 0x10015e0
 104059a:	int3   
 104059b:	int3   
 104059c:	int3   
 104059d:	int3   
 104059e:	int3   
 104059f:	int3   
 10405a0:	xor    eax,eax
 10405a2:	ret    
 10405a3:	int3   
 10405a4:	int3   
 10405a5:	int3   
 10405a6:	int3   
 10405a7:	int3   
 10405a8:	int3   
 10405a9:	int3   
 10405aa:	int3   
 10405ab:	int3   
 10405ac:	xor    eax,eax
 10405ae:	ret    
 10405af:	int3   
 10405b0:	int3   
 10405b1:	int3   
 10405b2:	int3   
 10405b3:	int3   
 10405b4:	int3   
 10405b5:	int3   
 10405b6:	int3   
 10405b7:	int3   
 10405b8:	mov    QWORD PTR [rsp+0x18],rbx
 10405bd:	push   rdi
 10405be:	sub    rsp,0x20
 10405c2:	mov    rax,QWORD PTR [rip+0x232a7]        # 0x1063870
 10405c9:	and    QWORD PTR [rsp+0x30],0x0
 10405cf:	movabs rdi,0x2b992ddfa232
 10405d9:	cmp    rax,rdi
 10405dc:	je     0x10405ea
 10405de:	not    rax
 10405e1:	mov    QWORD PTR [rip+0x23290],rax        # 0x1063878
 10405e8:	jmp    0x1040660
 10405ea:	lea    rcx,[rsp+0x30]
 10405ef:	call   QWORD PTR [rip+0xfffffffffffc0ef3]        # 0x10014e8
 10405f5:	mov    rbx,QWORD PTR [rsp+0x30]
 10405fa:	call   QWORD PTR [rip+0xfffffffffffc0cb8]        # 0x10012b8
 1040600:	mov    r11d,eax
 1040603:	xor    rbx,r11
 1040606:	call   QWORD PTR [rip+0xfffffffffffc0ccc]        # 0x10012d8
 104060c:	mov    r11d,eax
 104060f:	xor    rbx,r11
 1040612:	call   QWORD PTR [rip+0xfffffffffffc0ed8]        # 0x10014f0
 1040618:	lea    rcx,[rsp+0x38]
 104061d:	mov    r11d,eax
 1040620:	xor    rbx,r11
 1040623:	call   QWORD PTR [rip+0xfffffffffffc0ecf]        # 0x10014f8
 1040629:	mov    r11,QWORD PTR [rsp+0x38]
 104062e:	xor    r11,rbx
 1040631:	movabs rax,0xffffffffffff
 104063b:	and    r11,rax
 104063e:	movabs rax,0x2b992ddfa233
 1040648:	cmp    r11,rdi
 104064b:	cmove  r11,rax
 104064f:	mov    QWORD PTR [rip+0x2321a],r11        # 0x1063870
 1040656:	not    r11
 1040659:	mov    QWORD PTR [rip+0x23218],r11        # 0x1063878
 1040660:	mov    rbx,QWORD PTR [rsp+0x40]
 1040665:	add    rsp,0x20
 1040669:	pop    rdi
 104066a:	ret    
 104066b:	int3   
 104066c:	int3   
 104066d:	int3   
 104066e:	int3   
 104066f:	int3   
 1040670:	int3   
 1040671:	int3   
 1040672:	jmp    QWORD PTR [rip+0xfffffffffffc0f38]        # 0x10015b0
 1040678:	int3   
 1040679:	int3   
 104067a:	int3   
 104067b:	int3   
 104067c:	int3   
 104067d:	int3   
 104067e:	jmp    QWORD PTR [rip+0xfffffffffffc0f54]        # 0x10015d8
 1040684:	int3   
 1040685:	int3   
 1040686:	int3   
 1040687:	int3   
 1040688:	int3   
 1040689:	int3   
 104068a:	jmp    QWORD PTR [rip+0xfffffffffffc1088]        # 0x1001718
 1040690:	int3   
 1040691:	int3   
 1040692:	int3   
 1040693:	int3   
 1040694:	int3   
 1040695:	int3   
 1040696:	jmp    QWORD PTR [rip+0xfffffffffffc1004]        # 0x10016a0
 104069c:	int3   
 104069d:	int3   
 104069e:	int3   
 104069f:	int3   
 10406a0:	int3   
 10406a1:	int3   
 10406a2:	jmp    QWORD PTR [rip+0xfffffffffffc0ff0]        # 0x1001698
 10406a8:	int3   
 10406a9:	int3   
 10406aa:	int3   
 10406ab:	int3   
 10406ac:	int3   
 10406ad:	int3   
 10406ae:	jmp    QWORD PTR [rip+0xfffffffffffc0fd4]        # 0x1001688
 10406b4:	int3   
 10406b5:	int3   
 10406b6:	int3   
 10406b7:	int3   
 10406b8:	int3   
 10406b9:	int3   
 10406ba:	jmp    QWORD PTR [rip+0xfffffffffffc1220]        # 0x10018e0
 10406c0:	int3   
 10406c1:	int3   
 10406c2:	int3   
 10406c3:	int3   
 10406c4:	int3   
 10406c5:	int3   
 10406c6:	jmp    QWORD PTR [rip+0xfffffffffffc120c]        # 0x10018d8
 10406cc:	int3   
 10406cd:	int3   
 10406ce:	int3   
 10406cf:	int3   
 10406d0:	int3   
 10406d1:	int3   
 10406d2:	jmp    QWORD PTR [rip+0xfffffffffffc11f8]        # 0x10018d0
 10406d8:	int3   
 10406d9:	int3   
 10406da:	int3   
 10406db:	int3   
 10406dc:	int3   
 10406dd:	int3   
 10406de:	jmp    QWORD PTR [rip+0xfffffffffffc0ab4]        # 0x1001198
 10406e4:	int3   
 10406e5:	int3   
 10406e6:	int3   
 10406e7:	int3   
 10406e8:	int3   
 10406e9:	int3   
 10406ea:	jmp    QWORD PTR [rip+0xfffffffffffc0aa0]        # 0x1001190
 10406f0:	int3   
 10406f1:	int3   
 10406f2:	int3   
 10406f3:	int3   
 10406f4:	int3   
 10406f5:	int3   
 10406f6:	jmp    QWORD PTR [rip+0xfffffffffffc0a8c]        # 0x1001188
 10406fc:	int3   
 10406fd:	int3   
 10406fe:	int3   
 10406ff:	int3   
 1040700:	int3   
 1040701:	int3   
 1040702:	jmp    QWORD PTR [rip+0xfffffffffffc0a78]        # 0x1001180
 1040708:	int3   
 1040709:	int3   
 104070a:	int3   
 104070b:	int3   
 104070c:	int3   
 104070d:	int3   
 104070e:	jmp    QWORD PTR [rip+0xfffffffffffc0a8c]        # 0x10011a0
 1040714:	int3   
 1040715:	int3   
 1040716:	int3   
 1040717:	int3   
 1040718:	int3   
 1040719:	int3   
 104071a:	jmp    QWORD PTR [rip+0xfffffffffffc0a50]        # 0x1001170
 1040720:	int3   
 1040721:	int3   
 1040722:	int3   
 1040723:	int3   
 1040724:	int3   
 1040725:	int3   
 1040726:	jmp    QWORD PTR [rip+0xfffffffffffc0a3c]        # 0x1001168
 104072c:	int3   
 104072d:	int3   
 104072e:	int3   
 104072f:	int3   
 1040730:	int3   
 1040731:	int3   
 1040732:	jmp    QWORD PTR [rip+0xfffffffffffc0a28]        # 0x1001160
 1040738:	int3   
 1040739:	int3   
 104073a:	int3   
 104073b:	int3   
 104073c:	int3   
 104073d:	int3   
 104073e:	jmp    QWORD PTR [rip+0xfffffffffffc0a34]        # 0x1001178
 1040744:	int3   
 1040745:	int3   
 1040746:	int3   
 1040747:	int3   
 1040748:	int3   
 1040749:	int3   
 104074a:	jmp    QWORD PTR [rip+0xfffffffffffc1120]        # 0x1001870
 1040750:	int3   
 1040751:	int3   
 1040752:	int3   
 1040753:	int3   
 1040754:	int3   
 1040755:	int3   
 1040756:	jmp    QWORD PTR [rip+0xfffffffffffc0e44]        # 0x10015a0
 104075c:	int3   
 104075d:	int3   
 104075e:	int3   
 104075f:	int3   
 1040760:	int3   
 1040761:	int3   
 1040762:	jmp    QWORD PTR [rip+0xfffffffffffc10f8]        # 0x1001860
 1040768:	int3   
 1040769:	int3   
 104076a:	int3   
 104076b:	int3   
 104076c:	int3   
 104076d:	int3   
 104076e:	jmp    QWORD PTR [rip+0xfffffffffffc13fc]        # 0x1001b70
 1040774:	int3   
 1040775:	int3   
 1040776:	int3   
 1040777:	int3   
 1040778:	int3   
 1040779:	int3   
 104077a:	jmp    QWORD PTR [rip+0xfffffffffffc1420]        # 0x1001ba0
 1040780:	int3   
 1040781:	int3   
 1040782:	int3   
 1040783:	int3   
 1040784:	int3   
 1040785:	int3   
 1040786:	jmp    QWORD PTR [rip+0xfffffffffffc13dc]        # 0x1001b68
 104078c:	int3   
 104078d:	int3   
 104078e:	int3   
 104078f:	int3   
 1040790:	int3   
 1040791:	int3   
 1040792:	jmp    QWORD PTR [rip+0xfffffffffffc1400]        # 0x1001b98
 1040798:	int3   
 1040799:	int3   
 104079a:	int3   
 104079b:	int3   
 104079c:	int3   
 104079d:	int3   
 104079e:	jmp    QWORD PTR [rip+0xfffffffffffc13d4]        # 0x1001b78
 10407a4:	int3   
 10407a5:	int3   
 10407a6:	int3   
 10407a7:	int3   
 10407a8:	int3   
 10407a9:	int3   
 10407aa:	jmp    QWORD PTR [rip+0xfffffffffffc13d0]        # 0x1001b80
 10407b0:	int3   
 10407b1:	int3   
 10407b2:	int3   
 10407b3:	int3   
 10407b4:	int3   
 10407b5:	int3   
 10407b6:	jmp    QWORD PTR [rip+0xfffffffffffc13d4]        # 0x1001b90
 10407bc:	int3   
 10407bd:	int3   
 10407be:	int3   
 10407bf:	int3   
 10407c0:	int3   
 10407c1:	int3   
 10407c2:	jmp    QWORD PTR [rip+0xfffffffffffc13c0]        # 0x1001b88
 10407c8:	int3   
 10407c9:	int3   
 10407ca:	int3   
 10407cb:	int3   
 10407cc:	int3   
 10407cd:	int3   
 10407ce:	int3   
 10407cf:	int3   
 10407d0:	mov    QWORD PTR [rsp+0x8],rbx
 10407d5:	push   rdi
 10407d6:	sub    rsp,0x20
 10407da:	mov    rbx,rcx
 10407dd:	mov    edi,0x1
 10407e2:	test   rcx,rcx
 10407e5:	jne    0x10407eb
 10407e7:	xor    eax,eax
 10407e9:	jmp    0x104081a
 10407eb:	mov    rcx,QWORD PTR [rcx+0x8]
 10407ef:	test   rcx,rcx
 10407f2:	je     0x10407ff
 10407f4:	mov    rdx,QWORD PTR [rbx+0x20]
 10407f8:	call   0x10416b4
 10407fd:	and    edi,eax
 10407ff:	mov    rcx,QWORD PTR [rbx]
 1040802:	test   rcx,rcx
 1040805:	je     0x1040812
 1040807:	mov    rdx,QWORD PTR [rbx+0x20]
 104080b:	call   0x1041fc8
 1040810:	and    edi,eax
 1040812:	mov    rcx,rbx
 1040815:	call   QWORD PTR [rbx+0x18]
 1040818:	mov    eax,edi
 104081a:	mov    rbx,QWORD PTR [rsp+0x30]
 104081f:	add    rsp,0x20
 1040823:	pop    rdi
 1040824:	ret    
 1040825:	int3   
 1040826:	int3   
 1040827:	int3   
 1040828:	int3   
 1040829:	int3   
 104082a:	int3   
 104082b:	int3   
 104082c:	mov    QWORD PTR [rsp+0x10],rbx
 1040831:	mov    QWORD PTR [rsp+0x18],rsi
 1040836:	push   rdi
 1040837:	sub    rsp,0x30
 104083b:	mov    rsi,r9
 104083e:	mov    edi,edx
 1040840:	mov    rbx,rcx
 1040843:	test   rcx,rcx
 1040846:	jne    0x104084c
 1040848:	xor    eax,eax
 104084a:	jmp    0x10408a4
 104084c:	mov    rax,QWORD PTR [rcx+0x20]
 1040850:	mov    QWORD PTR [rsp+0x28],rax
 1040855:	mov    QWORD PTR [rsp+0x20],r9
 104085a:	mov    r9,r8
 104085d:	mov    r8d,edx
 1040860:	mov    rdx,QWORD PTR [rcx+0x8]
 1040864:	mov    rcx,QWORD PTR [rcx]
 1040867:	call   0x10429ec
 104086c:	test   eax,eax
 104086e:	je     0x1040848
 1040870:	test   edi,edi
 1040872:	je     0x104087b
 1040874:	mov    eax,0x1
 1040879:	jmp    0x10408a4
 104087b:	mov    rcx,QWORD PTR [rbx]
 104087e:	and    DWORD PTR [rsp+0x40],0x0
 1040883:	mov    rax,QWORD PTR [rbx+0x20]
 1040887:	mov    r9d,DWORD PTR [rcx+0x178]
 104088e:	lea    r8,[rsp+0x40]
 1040893:	mov    rdx,rsi
 1040896:	add    r9d,DWORD PTR [rcx+0x68]
 104089a:	mov    QWORD PTR [rsp+0x20],rax
 104089f:	call   0x1042268
 10408a4:	mov    rbx,QWORD PTR [rsp+0x48]
 10408a9:	mov    rsi,QWORD PTR [rsp+0x50]
 10408ae:	add    rsp,0x30
 10408b2:	pop    rdi
 10408b3:	ret    
 10408b4:	int3   
 10408b5:	int3   
 10408b6:	int3   
 10408b7:	int3   
 10408b8:	int3   
 10408b9:	int3   
 10408ba:	int3   
 10408bb:	int3   
 10408bc:	mov    r11,rsp
 10408bf:	mov    QWORD PTR [r11+0x8],rbx
 10408c3:	mov    QWORD PTR [r11+0x10],rbp
 10408c7:	mov    QWORD PTR [r11+0x18],rsi
 10408cb:	push   rdi
 10408cc:	push   r12
 10408ce:	push   r13
 10408d0:	sub    rsp,0x40
 10408d4:	mov    r12d,r9d
 10408d7:	mov    rsi,r8
 10408da:	mov    r13,rdx
 10408dd:	mov    rbx,rcx
 10408e0:	test   rcx,rcx
 10408e3:	je     0x1040a06
 10408e9:	test   r8,r8
 10408ec:	je     0x1040a06
 10408f2:	mov    rdx,QWORD PTR [rcx+0x8]
 10408f6:	movzx  edi,WORD PTR [rsp+0x98]
 10408fe:	mov    rbp,QWORD PTR [rsp+0x88]
 1040906:	cmp    di,WORD PTR [rdx+0x2a4]
 104090d:	je     0x104094a
 104090f:	mov    rax,QWORD PTR [rcx+0x20]
 1040913:	mov    r9,QWORD PTR [rsp+0x80]
 104091b:	mov    rcx,QWORD PTR [rcx]
 104091e:	mov    QWORD PTR [r11-0x30],rax
 1040922:	xor    r8d,r8d
 1040925:	mov    QWORD PTR [r11-0x38],rbp
 1040929:	call   0x10429ec
 104092e:	test   eax,eax
 1040930:	je     0x1040a06
 1040936:	mov    rdx,QWORD PTR [rbx+0x8]
 104093a:	movzx  ecx,di
 104093d:	call   0x104165c
 1040942:	test   eax,eax
 1040944:	je     0x1040a06
 104094a:	mov    rax,QWORD PTR [rbx+0x20]
 104094e:	mov    rcx,QWORD PTR [rbx+0x8]
 1040952:	mov    r9d,r12d
 1040955:	mov    QWORD PTR [rsp+0x38],rax
 104095a:	mov    rax,QWORD PTR [rsp+0x90]
 1040962:	mov    WORD PTR [rsp+0x30],di
 1040967:	mov    QWORD PTR [rsp+0x28],rax
 104096c:	mov    r8,rsi
 104096f:	mov    rdx,r13
 1040972:	mov    QWORD PTR [rsp+0x20],rbp
 1040977:	call   0x1041710
 104097c:	test   eax,eax
 104097e:	je     0x1040a06
 1040984:	mov    rcx,QWORD PTR [rbx+0x8]
 1040988:	mov    r10,QWORD PTR [rbx]
 104098b:	mov    eax,DWORD PTR [rcx+0x280]
 1040991:	add    eax,DWORD PTR [rcx+0x60]
 1040994:	cmp    DWORD PTR [r10+0x39c],eax
 104099b:	jb     0x10409df
 104099d:	mov    rax,rcx
 10409a0:	mov    ecx,DWORD PTR [r10+0xb1c]
 10409a7:	add    ecx,DWORD PTR [r10+0xb18]
 10409ae:	add    ecx,DWORD PTR [rax+0x280]
 10409b4:	add    ecx,DWORD PTR [rax+0x170]
 10409ba:	add    ecx,DWORD PTR [rax+0x60]
 10409bd:	add    ecx,DWORD PTR [r10+0x288]
 10409c4:	add    ecx,DWORD PTR [r10+0x178]
 10409cb:	add    ecx,DWORD PTR [r10+0x68]
 10409cf:	cmp    DWORD PTR [r10+0x398],ecx
 10409d6:	jb     0x10409df
 10409d8:	mov    eax,0x1
 10409dd:	jmp    0x1040a08
 10409df:	mov    rax,QWORD PTR [rbx+0x20]
 10409e3:	mov    r9,QWORD PTR [rsp+0x80]
 10409eb:	mov    rdx,QWORD PTR [rbx+0x8]
 10409ef:	mov    QWORD PTR [rsp+0x28],rax
 10409f4:	xor    r8d,r8d
 10409f7:	mov    rcx,r10
 10409fa:	mov    QWORD PTR [rsp+0x20],rbp
 10409ff:	call   0x10429ec
 1040a04:	jmp    0x1040a08
 1040a06:	xor    eax,eax
 1040a08:	mov    rbx,QWORD PTR [rsp+0x60]
 1040a0d:	mov    rbp,QWORD PTR [rsp+0x68]
 1040a12:	mov    rsi,QWORD PTR [rsp+0x70]
 1040a17:	add    rsp,0x40
 1040a1b:	pop    r13
 1040a1d:	pop    r12
 1040a1f:	pop    rdi
 1040a20:	ret    
 1040a21:	int3   
 1040a22:	int3   
 1040a23:	int3   
 1040a24:	int3   
 1040a25:	int3   
 1040a26:	int3   
 1040a27:	int3   
 1040a28:	mov    QWORD PTR [rsp+0x8],rbx
 1040a2d:	mov    QWORD PTR [rsp+0x10],rbp
 1040a32:	mov    QWORD PTR [rsp+0x18],rsi
 1040a37:	push   rdi
 1040a38:	push   r12
 1040a3a:	push   r13
 1040a3c:	push   r14
 1040a3e:	push   r15
 1040a40:	sub    rsp,0x70
 1040a44:	xor    esi,esi
 1040a46:	mov    r12,r9
 1040a49:	mov    rbp,r8
 1040a4c:	mov    r13,rdx
 1040a4f:	mov    rdi,rcx
 1040a52:	cmp    rcx,rsi
 1040a55:	je     0x1040c5e
 1040a5b:	mov    DWORD PTR [rcx],esi
 1040a5d:	mov    DWORD PTR [rcx+0x4],esi
 1040a60:	mov    DWORD PTR [rcx+0x8],esi
 1040a63:	lea    ecx,[rsi+0x28]
 1040a66:	call   rbp
 1040a68:	mov    rcx,rdi
 1040a6b:	mov    rbx,rax
 1040a6e:	cmp    rax,rsi
 1040a71:	jne    0x1040a83
 1040a73:	lea    edx,[rsi+0x3]
 1040a76:	xor    r8d,r8d
 1040a79:	call   0x1040c84
 1040a7e:	jmp    0x1040c5e
 1040a83:	mov    r14,QWORD PTR [rsp+0x100]
 1040a8b:	mov    r15,QWORD PTR [rsp+0xf0]
 1040a93:	mov    r9,QWORD PTR [rsp+0xc0]
 1040a9b:	mov    QWORD PTR [rax],rsi
 1040a9e:	mov    rsi,QWORD PTR [rsp+0xf8]
 1040aa6:	mov    QWORD PTR [rax+0x18],r12
 1040aaa:	mov    QWORD PTR [rax+0x20],r14
 1040aae:	mov    eax,DWORD PTR [rsi+0x10]
 1040ab1:	mov    QWORD PTR [rsp+0x58],r14
 1040ab6:	add    eax,0x8
 1040ab9:	mov    r8,r12
 1040abc:	mov    rdx,rbp
 1040abf:	mov    DWORD PTR [rsp+0x50],eax
 1040ac3:	mov    rax,QWORD PTR [rsp+0xe8]
 1040acb:	mov    QWORD PTR [rsp+0x48],r15
 1040ad0:	mov    QWORD PTR [rsp+0x40],rax
 1040ad5:	mov    rax,QWORD PTR [rsp+0xe0]
 1040add:	mov    QWORD PTR [rsp+0x38],rax
 1040ae2:	mov    rax,QWORD PTR [rsp+0xd8]
 1040aea:	mov    QWORD PTR [rsp+0x30],rax
 1040aef:	mov    rax,QWORD PTR [rsp+0xd0]
 1040af7:	mov    QWORD PTR [rsp+0x28],rax
 1040afc:	mov    rax,QWORD PTR [rsp+0xc8]
 1040b04:	mov    QWORD PTR [rsp+0x20],rax
 1040b09:	call   0x1041a1c
 1040b0e:	mov    QWORD PTR [rbx+0x8],rax
 1040b12:	test   rax,rax
 1040b15:	je     0x1040c56
 1040b1b:	mov    ecx,DWORD PTR [rsi+0x1c]
 1040b1e:	mov    QWORD PTR [rsp+0x60],r14
 1040b23:	mov    QWORD PTR [rsp+0x58],r15
 1040b28:	mov    DWORD PTR [rax+0x2a0],ecx
 1040b2e:	mov    rax,QWORD PTR [rsp+0xe8]
 1040b36:	mov    r9,rbp
 1040b39:	mov    QWORD PTR [rsp+0x50],rax
 1040b3e:	mov    rax,QWORD PTR [rsp+0xe0]
 1040b46:	mov    r8,r13
 1040b49:	mov    QWORD PTR [rsp+0x48],rax
 1040b4e:	mov    rax,QWORD PTR [rsp+0xd8]
 1040b56:	mov    rdx,rdi
 1040b59:	mov    QWORD PTR [rsp+0x40],rax
 1040b5e:	mov    rax,QWORD PTR [rsp+0xd0]
 1040b66:	xor    ecx,ecx
 1040b68:	mov    QWORD PTR [rsp+0x38],rax
 1040b6d:	mov    rax,QWORD PTR [rsp+0xc8]
 1040b75:	mov    QWORD PTR [rsp+0x30],rax
 1040b7a:	mov    rax,QWORD PTR [rsp+0xc0]
 1040b82:	mov    QWORD PTR [rsp+0x28],rax
 1040b87:	mov    QWORD PTR [rsp+0x20],r12
 1040b8c:	call   0x1042014
 1040b91:	xor    edi,edi
 1040b93:	mov    QWORD PTR [rbx],rax
 1040b96:	cmp    rax,rdi
 1040b99:	je     0x1040c56
 1040b9f:	lea    rcx,[rax+0x398]
 1040ba6:	mov    rdx,rsi
 1040ba9:	mov    r8d,0x324
 1040baf:	call   0x10402e4
 1040bb4:	movzx  eax,WORD PTR [rsi+0x20]
 1040bb8:	mov    r11,QWORD PTR [rbx]
 1040bbb:	mov    WORD PTR [r11+0xb26],ax
 1040bc3:	mov    rax,QWORD PTR [rbx]
 1040bc6:	mov    WORD PTR [rax+0xb28],di
 1040bcd:	mov    ecx,DWORD PTR [rsi+0x8]
 1040bd0:	cmp    ecx,0xea60
 1040bd6:	ja     0x1040c56
 1040bd8:	mov    eax,0xff
 1040bdd:	cmp    DWORD PTR [rsi+0xc],eax
 1040be0:	ja     0x1040c56
 1040be2:	cmp    DWORD PTR [rsi+0x10],eax
 1040be5:	ja     0x1040c56
 1040be7:	cmp    ecx,edi
 1040be9:	ja     0x1040c00
 1040beb:	cmp    DWORD PTR [rsi+0xc],edi
 1040bee:	ja     0x1040c00
 1040bf0:	cmp    DWORD PTR [rsi+0x10],edi
 1040bf3:	ja     0x1040c00
 1040bf5:	mov    rax,QWORD PTR [rbx]
 1040bf8:	mov    DWORD PTR [rax+0xb14],edi
 1040bfe:	jmp    0x1040c0c
 1040c00:	mov    rax,QWORD PTR [rbx]
 1040c03:	add    ecx,0x4
 1040c06:	mov    DWORD PTR [rax+0xb14],ecx
 1040c0c:	mov    rcx,QWORD PTR [rbx]
 1040c0f:	mov    eax,DWORD PTR [rcx+0xb14]
 1040c15:	add    eax,0x24
 1040c18:	mov    DWORD PTR [rcx+0xb18],eax
 1040c1e:	mov    ecx,DWORD PTR [rsi+0xc]
 1040c21:	mov    rax,QWORD PTR [rbx]
 1040c24:	add    ecx,0x8
 1040c27:	mov    DWORD PTR [rax+0xb1c],ecx
 1040c2d:	mov    ecx,DWORD PTR [rsi+0x10]
 1040c30:	mov    rax,QWORD PTR [rbx]
 1040c33:	add    ecx,0x8
 1040c36:	mov    DWORD PTR [rax+0xb20],ecx
 1040c3c:	mov    rax,QWORD PTR [rbx]
 1040c3f:	cmp    DWORD PTR [rax+0x398],edi
 1040c45:	jne    0x1040c51
 1040c47:	mov    DWORD PTR [rax+0x398],0x7fffffff
 1040c51:	mov    rax,rbx
 1040c54:	jmp    0x1040c60
 1040c56:	mov    rcx,rbx
 1040c59:	call   0x10407d0
 1040c5e:	xor    eax,eax
 1040c60:	lea    r11,[rsp+0x70]
 1040c65:	mov    rbx,QWORD PTR [r11+0x30]
 1040c69:	mov    rbp,QWORD PTR [r11+0x38]
 1040c6d:	mov    rsi,QWORD PTR [r11+0x40]
 1040c71:	mov    rsp,r11
 1040c74:	pop    r15
 1040c76:	pop    r14
 1040c78:	pop    r13
 1040c7a:	pop    r12
 1040c7c:	pop    rdi
 1040c7d:	ret    
 1040c7e:	int3   
 1040c7f:	int3   
 1040c80:	int3   
 1040c81:	int3   
 1040c82:	int3   
 1040c83:	int3   
 1040c84:	mov    DWORD PTR [rcx],edx
 1040c86:	mov    DWORD PTR [rcx+0x4],r8d
 1040c8a:	mov    DWORD PTR [rcx+0x8],0x1
 1040c91:	ret    
 1040c92:	int3   
 1040c93:	int3   
 1040c94:	int3   
 1040c95:	int3   
 1040c96:	int3   
 1040c97:	int3   
 1040c98:	mov    QWORD PTR [rsp+0x10],rbx
 1040c9d:	push   rdi
 1040c9e:	sub    rsp,0x30
 1040ca2:	mov    rbx,rcx
 1040ca5:	movzx  ecx,WORD PTR [rcx+0x2a4]
 1040cac:	mov    rdi,rdx
 1040caf:	and    ecx,0xf
 1040cb2:	je     0x1040d4a
 1040cb8:	sub    ecx,0x1
 1040cbb:	je     0x1040d0a
 1040cbd:	cmp    ecx,0x2
 1040cc0:	je     0x1040ccc
 1040cc2:	mov    edx,0x5
 1040cc7:	jmp    0x1040d80
 1040ccc:	mov    r9,QWORD PTR [rbx+0x2b0]
 1040cd3:	mov    r8d,DWORD PTR [rbx+0x29c]
 1040cda:	mov    rdx,QWORD PTR [rbx+0x2a8]
 1040ce1:	mov    rcx,QWORD PTR [rbx+0x8]
 1040ce5:	lea    rax,[rsp+0x40]
 1040cea:	mov    QWORD PTR [rsp+0x28],rax
 1040cef:	mov    eax,DWORD PTR [rbx+0x294]
 1040cf5:	mov    DWORD PTR [rsp+0x20],eax
 1040cf9:	call   0x1043600
 1040cfe:	test   eax,eax
 1040d00:	jne    0x1040d7b
 1040d02:	mov    eax,DWORD PTR [rsp+0x40]
 1040d06:	mov    DWORD PTR [rdi],eax
 1040d08:	jmp    0x1040d74
 1040d0a:	mov    r9,QWORD PTR [rbx+0x2b0]
 1040d11:	mov    r8d,DWORD PTR [rbx+0x29c]
 1040d18:	mov    rdx,QWORD PTR [rbx+0x2a8]
 1040d1f:	mov    rcx,QWORD PTR [rbx+0x8]
 1040d23:	lea    rax,[rsp+0x40]
 1040d28:	mov    QWORD PTR [rsp+0x28],rax
 1040d2d:	mov    eax,DWORD PTR [rbx+0x294]
 1040d33:	mov    DWORD PTR [rsp+0x20],eax
 1040d37:	call   0x10437fc
 1040d3c:	test   eax,eax
 1040d3e:	jne    0x1040d7b
 1040d40:	movzx  eax,WORD PTR [rsp+0x40]
 1040d45:	mov    WORD PTR [rdi],ax
 1040d48:	jmp    0x1040d74
 1040d4a:	mov    ecx,DWORD PTR [rbx+0x29c]
 1040d50:	cmp    DWORD PTR [rbx+0x294],ecx
 1040d56:	jb     0x1040d7b
 1040d58:	movzx  ecx,cx
 1040d5b:	mov    WORD PTR [rdx],cx
 1040d5e:	mov    rdx,QWORD PTR [rbx+0x2a8]
 1040d65:	mov    r8,rcx
 1040d68:	mov    rcx,QWORD PTR [rbx+0x2b0]
 1040d6f:	call   0x10402e4
 1040d74:	mov    eax,0x1
 1040d79:	jmp    0x1040d8e
 1040d7b:	mov    edx,0x8
 1040d80:	mov    rcx,QWORD PTR [rbx+0x58]
 1040d84:	xor    r8d,r8d
 1040d87:	call   0x1040c84
 1040d8c:	xor    eax,eax
 1040d8e:	mov    rbx,QWORD PTR [rsp+0x48]
 1040d93:	add    rsp,0x30
 1040d97:	pop    rdi
 1040d98:	ret    
 1040d99:	int3   
 1040d9a:	int3   
 1040d9b:	int3   
 1040d9c:	int3   
 1040d9d:	int3   
 1040d9e:	int3   
 1040d9f:	int3   
 1040da0:	rex push rbx
 1040da2:	sub    rsp,0x20
 1040da6:	movzx  edx,WORD PTR [rcx+0x2a4]
 1040dad:	mov    rbx,rcx
 1040db0:	and    edx,0xf
 1040db3:	je     0x1040dfc
 1040db5:	sub    edx,0x1
 1040db8:	je     0x1040dda
 1040dba:	sub    edx,0x2
 1040dbd:	je     0x1040dcf
 1040dbf:	cmp    edx,0xc
 1040dc2:	je     0x1040dfc
 1040dc4:	mov    rcx,QWORD PTR [rcx+0x58]
 1040dc8:	mov    edx,0x5
 1040dcd:	jmp    0x1040df0
 1040dcf:	mov    rcx,QWORD PTR [rcx+0x8]
 1040dd3:	call   0x10435a8
 1040dd8:	jmp    0x1040de3
 1040dda:	mov    rcx,QWORD PTR [rcx+0x8]
 1040dde:	call   0x10437e0
 1040de3:	test   eax,eax
 1040de5:	je     0x1040dfc
 1040de7:	mov    rcx,QWORD PTR [rbx+0x58]
 1040deb:	mov    edx,0x8
 1040df0:	xor    r8d,r8d
 1040df3:	call   0x1040c84
 1040df8:	xor    eax,eax
 1040dfa:	jmp    0x1040e01
 1040dfc:	mov    eax,0x1
 1040e01:	add    rsp,0x20
 1040e05:	pop    rbx
 1040e06:	ret    
 1040e07:	int3   
 1040e08:	int3   
 1040e09:	int3   
 1040e0a:	int3   
 1040e0b:	int3   
 1040e0c:	int3   
 1040e0d:	int3   
 1040e0e:	int3   
 1040e0f:	int3   
 1040e10:	mov    QWORD PTR [rsp+0x8],rbx
 1040e15:	push   rdi
 1040e16:	sub    rsp,0x20
 1040e1a:	movzx  edx,WORD PTR [rcx+0x2a4]
 1040e21:	mov    rbx,rcx
 1040e24:	mov    edi,0x1
 1040e29:	and    edx,0xf
 1040e2c:	je     0x1040e77
 1040e2e:	sub    edx,edi
 1040e30:	je     0x1040e58
 1040e32:	sub    edx,0x2
 1040e35:	je     0x1040e4d
 1040e37:	cmp    edx,0xc
 1040e3a:	je     0x1040e77
 1040e3c:	mov    rcx,QWORD PTR [rcx+0x58]
 1040e40:	lea    edx,[rdi+0x4]
 1040e43:	xor    r8d,r8d
 1040e46:	call   0x1040c84
 1040e4b:	jmp    0x1040e77
 1040e4d:	mov    rcx,QWORD PTR [rcx+0x8]
 1040e51:	call   0x1043568
 1040e56:	jmp    0x1040e61
 1040e58:	mov    rcx,QWORD PTR [rcx+0x8]
 1040e5c:	call   0x1043760
 1040e61:	test   eax,eax
 1040e63:	je     0x1040e77
 1040e65:	mov    rcx,QWORD PTR [rbx+0x58]
 1040e69:	xor    r8d,r8d
 1040e6c:	lea    edx,[r8+0x8]
 1040e70:	call   0x1040c84
 1040e75:	xor    edi,edi
 1040e77:	mov    rcx,QWORD PTR [rbx+0x2b0]
 1040e7e:	test   rcx,rcx
 1040e81:	je     0x1040e8e
 1040e83:	call   QWORD PTR [rbx+0x18]
 1040e86:	and    QWORD PTR [rbx+0x2b0],0x0
 1040e8e:	mov    rcx,QWORD PTR [rbx+0x2a8]
 1040e95:	test   rcx,rcx
 1040e98:	je     0x1040ea5
 1040e9a:	call   QWORD PTR [rbx+0x18]
 1040e9d:	and    QWORD PTR [rbx+0x2a8],0x0
 1040ea5:	mov    eax,edi
 1040ea7:	mov    rbx,QWORD PTR [rsp+0x30]
 1040eac:	add    rsp,0x20
 1040eb0:	pop    rdi
 1040eb1:	ret    
 1040eb2:	int3   
 1040eb3:	int3   
 1040eb4:	int3   
 1040eb5:	int3   
 1040eb6:	int3   
 1040eb7:	int3   
 1040eb8:	rex push rbx
 1040eba:	sub    rsp,0x30
 1040ebe:	mov    eax,DWORD PTR [rcx]
 1040ec0:	mov    ebx,r8d
 1040ec3:	mov    r10,r9
 1040ec6:	add    r8d,eax
 1040ec9:	cmp    eax,r8d
 1040ecc:	jbe    0x1040ee3
 1040ece:	xor    r8d,r8d
 1040ed1:	lea    edx,[r8+0x9]
 1040ed5:	mov    rcx,QWORD PTR [rsp+0x60]
 1040eda:	call   0x1040c84
 1040edf:	xor    eax,eax
 1040ee1:	jmp    0x1040f19
 1040ee3:	mov    rax,QWORD PTR [rsp+0x68]
 1040ee8:	and    DWORD PTR [rsp+0x50],0x0
 1040eed:	mov    DWORD PTR [rcx],r8d
 1040ef0:	mov    rcx,QWORD PTR [rcx+0x8]
 1040ef4:	lea    r9,[rsp+0x50]
 1040ef9:	mov    r8d,ebx
 1040efc:	mov    QWORD PTR [rsp+0x20],rax
 1040f01:	call   r10
 1040f04:	cmp    ebx,eax
 1040f06:	je     0x1040f14
 1040f08:	mov    r8d,DWORD PTR [rsp+0x50]
 1040f0d:	mov    edx,0x4
 1040f12:	jmp    0x1040ed5
 1040f14:	mov    eax,0x1
 1040f19:	add    rsp,0x30
 1040f1d:	pop    rbx
 1040f1e:	ret    
 1040f1f:	int3   
 1040f20:	int3   
 1040f21:	int3   
 1040f22:	int3   
 1040f23:	int3   
 1040f24:	int3   
 1040f25:	int3   
 1040f26:	int3   
 1040f27:	int3   
 1040f28:	mov    QWORD PTR [rsp+0x8],rbx
 1040f2d:	mov    QWORD PTR [rsp+0x18],rbp
 1040f32:	mov    QWORD PTR [rsp+0x20],rsi
 1040f37:	push   rdi
 1040f38:	push   r12
 1040f3a:	push   r13
 1040f3c:	sub    rsp,0x20
 1040f40:	mov    r12,r9
 1040f43:	mov    r13,r8
 1040f46:	mov    ebx,0x1
 1040f4b:	test   edx,edx
 1040f4d:	jle    0x1040fd8
 1040f53:	lea    rdi,[rcx+0x8]
 1040f57:	lea    rsi,[rcx+0x10]
 1040f5b:	mov    ebp,edx
 1040f5d:	cmp    QWORD PTR [rdi],0xffffffffffffffff
 1040f61:	je     0x1040fc4
 1040f63:	mov    r8,QWORD PTR [rsp+0x68]
 1040f68:	mov    rcx,QWORD PTR [rdi]
 1040f6b:	and    DWORD PTR [rsp+0x48],0x0
 1040f70:	lea    rdx,[rsp+0x48]
 1040f75:	call   r13
 1040f78:	test   eax,eax
 1040f7a:	je     0x1040f92
 1040f7c:	mov    r8d,DWORD PTR [rsp+0x48]
 1040f81:	mov    rcx,QWORD PTR [rsp+0x60]
 1040f86:	mov    edx,0x4
 1040f8b:	call   0x1040c84
 1040f90:	xor    ebx,ebx
 1040f92:	mov    r8,QWORD PTR [rsp+0x68]
 1040f97:	or     QWORD PTR [rdi],0xffffffffffffffff
 1040f9b:	and    DWORD PTR [rsp+0x48],0x0
 1040fa0:	lea    rdx,[rsp+0x48]
 1040fa5:	mov    rcx,rsi
 1040fa8:	call   r12
 1040fab:	cmp    eax,0xffffffff
 1040fae:	jne    0x1040fc4
 1040fb0:	mov    r8d,DWORD PTR [rsp+0x48]
 1040fb5:	mov    rcx,QWORD PTR [rsp+0x60]
 1040fba:	lea    edx,[rax+0x5]
 1040fbd:	call   0x1040c84
 1040fc2:	xor    ebx,ebx
 1040fc4:	add    rsi,0x110
 1040fcb:	add    rdi,0x110
 1040fd2:	sub    rbp,0x1
 1040fd6:	jne    0x1040f5d
 1040fd8:	mov    rbp,QWORD PTR [rsp+0x50]
 1040fdd:	mov    rsi,QWORD PTR [rsp+0x58]
 1040fe2:	mov    eax,ebx
 1040fe4:	mov    rbx,QWORD PTR [rsp+0x40]
 1040fe9:	add    rsp,0x20
 1040fed:	pop    r13
 1040fef:	pop    r12
 1040ff1:	pop    rdi
 1040ff2:	ret    
 1040ff3:	int3   
 1040ff4:	int3   
 1040ff5:	int3   
 1040ff6:	int3   
 1040ff7:	int3   
 1040ff8:	int3   
 1040ff9:	int3   
 1040ffa:	int3   
 1040ffb:	int3   
 1040ffc:	mov    rax,rsp
 1040fff:	mov    QWORD PTR [rax+0x8],rbx
 1041003:	mov    QWORD PTR [rax+0x20],r9
 1041007:	mov    QWORD PTR [rax+0x18],r8
 104100b:	push   rbp
 104100c:	push   rsi
 104100d:	push   rdi
 104100e:	push   r12
 1041010:	push   r13
 1041012:	push   r14
 1041014:	push   r15
 1041016:	sub    rsp,0x30
 104101a:	and    DWORD PTR [rax+0x10],0x0
 104101e:	mov    ebp,edx
 1041020:	mov    r13,rcx
 1041023:	movsxd r10,edx
 1041026:	mov    r14d,0x110
 104102c:	test   edx,edx
 104102e:	jle    0x1041044
 1041030:	mov    rax,rcx
 1041033:	or     QWORD PTR [rax+0x8],0xffffffffffffffff
 1041038:	and    DWORD PTR [rax],0x0
 104103b:	add    rax,r14
 104103e:	sub    r10,0x1
 1041042:	jne    0x1041033
 1041044:	xor    esi,esi
 1041046:	test   ebp,ebp
 1041048:	jle    0x10410e2
 104104e:	mov    r15,QWORD PTR [rsp+0xa8]
 1041056:	lea    rbx,[rcx+0x8]
 104105a:	cmp    QWORD PTR [rbx],0xffffffffffffffff
 104105e:	mov    r12d,0x65
 1041064:	jne    0x10410d5
 1041066:	mov    rdi,QWORD PTR [rsp+0x80]
 104106e:	mov    eax,r12d
 1041071:	dec    r12d
 1041074:	test   eax,eax
 1041076:	je     0x10410c5
 1041078:	movsxd rax,esi
 104107b:	mov    r8,r15
 104107e:	mov    edx,0x100
 1041083:	imul   rax,rax,0x110
 104108a:	lea    r14,[rax+r13*1+0x10]
 104108f:	mov    rcx,r14
 1041092:	call   QWORD PTR [rsp+0x98]
 1041099:	test   eax,eax
 104109b:	je     0x10410bf
 104109d:	and    DWORD PTR [rsp+0x78],0x0
 10410a2:	lea    r9,[rsp+0x78]
 10410a7:	mov    edx,0x8502
 10410ac:	mov    r8d,0x180
 10410b2:	mov    rcx,r14
 10410b5:	mov    QWORD PTR [rsp+0x20],r15
 10410ba:	call   rdi
 10410bc:	mov    QWORD PTR [rbx],rax
 10410bf:	cmp    QWORD PTR [rbx],0xffffffffffffffff
 10410c3:	je     0x104106e
 10410c5:	cmp    QWORD PTR [rbx],0xffffffffffffffff
 10410c9:	lea    rdi,[r13+0x8]
 10410cd:	je     0x10410fc
 10410cf:	mov    r14d,0x110
 10410d5:	inc    esi
 10410d7:	add    rbx,r14
 10410da:	cmp    esi,ebp
 10410dc:	jl     0x104105a
 10410e2:	mov    eax,0x1
 10410e7:	mov    rbx,QWORD PTR [rsp+0x70]
 10410ec:	add    rsp,0x30
 10410f0:	pop    r15
 10410f2:	pop    r14
 10410f4:	pop    r13
 10410f6:	pop    r12
 10410f8:	pop    rdi
 10410f9:	pop    rsi
 10410fa:	pop    rbp
 10410fb:	ret    
 10410fc:	mov    r8d,DWORD PTR [rsp+0x78]
 1041101:	mov    rcx,QWORD PTR [rsp+0xa0]
 1041109:	mov    edx,0x4
 104110e:	call   0x1040c84
 1041113:	mov    rsi,rbp
 1041116:	mov    rbp,QWORD PTR [rsp+0x88]
 104111e:	lea    rbx,[r13+0x10]
 1041122:	mov    r14d,0x110
 1041128:	cmp    QWORD PTR [rdi],0xffffffffffffffff
 104112c:	je     0x104115b
 104112e:	mov    rcx,QWORD PTR [rdi]
 1041131:	and    DWORD PTR [rsp+0x78],0x0
 1041136:	lea    rdx,[rsp+0x78]
 104113b:	mov    r8,r15
 104113e:	call   rbp
 1041140:	and    DWORD PTR [rsp+0x78],0x0
 1041145:	lea    rdx,[rsp+0x78]
 104114a:	mov    r8,r15
 104114d:	mov    rcx,rbx
 1041150:	call   QWORD PTR [rsp+0x90]
 1041157:	or     QWORD PTR [rdi],0xffffffffffffffff
 104115b:	add    rbx,r14
 104115e:	add    rdi,r14
 1041161:	sub    rsi,0x1
 1041165:	jne    0x1041128
 1041167:	xor    eax,eax
 1041169:	jmp    0x10410e7
 104116e:	int3   
 104116f:	int3   
 1041170:	int3   
 1041171:	int3   
 1041172:	int3   
 1041173:	int3   
 1041174:	mov    rax,rsp
 1041177:	mov    QWORD PTR [rax+0x8],rbx
 104117b:	mov    QWORD PTR [rax+0x10],rbp
 104117f:	mov    QWORD PTR [rax+0x18],rsi
 1041183:	mov    QWORD PTR [rax+0x20],rdi
 1041187:	push   r12
 1041189:	push   r13
 104118b:	push   r14
 104118d:	sub    rsp,0x30
 1041191:	xor    edi,edi
 1041193:	mov    rbp,r8
 1041196:	mov    r13,rdx
 1041199:	mov    rbx,rcx
 104119c:	cmp    DWORD PTR [rcx+0x29c],edi
 10411a2:	jne    0x10411ac
 10411a4:	lea    eax,[rdi+0x1]
 10411a7:	jmp    0x1041294
 10411ac:	mov    ecx,DWORD PTR [rcx+0x290]
 10411b2:	call   QWORD PTR [rbx+0x10]
 10411b5:	mov    rsi,rax
 10411b8:	cmp    rax,rdi
 10411bb:	jne    0x10411d4
 10411bd:	mov    rcx,QWORD PTR [rbx+0x58]
 10411c1:	xor    r8d,r8d
 10411c4:	lea    edx,[r8+0x3]
 10411c8:	call   0x1040c84
 10411cd:	xor    eax,eax
 10411cf:	jmp    0x1041294
 10411d4:	mov    r8d,DWORD PTR [rbx+0x290]
 10411db:	xor    edx,edx
 10411dd:	mov    rcx,rax
 10411e0:	call   0x104026c
 10411e5:	lea    rdx,[rsi+0x4]
 10411e9:	mov    rcx,rbx
 10411ec:	call   0x1040c98
 10411f1:	cmp    eax,edi
 10411f3:	je     0x104128c
 10411f9:	movzx  eax,WORD PTR [rbx+0x29c]
 1041200:	lea    rcx,[rbx+0x60]
 1041204:	mov    rdx,rsi
 1041207:	mov    WORD PTR [rsi+0x6],ax
 104120b:	mov    rax,QWORD PTR [rbx+0x58]
 104120f:	mov    r9,QWORD PTR [rbx+0x30]
 1041213:	mov    r8d,DWORD PTR [rbx+0x290]
 104121a:	mov    QWORD PTR [rsp+0x28],rbp
 104121f:	mov    QWORD PTR [rsp+0x20],rax
 1041224:	call   0x1040eb8
 1041229:	cmp    eax,edi
 104122b:	je     0x104128c
 104122d:	mov    rax,QWORD PTR [rbx+0x58]
 1041231:	movzx  r8d,WORD PTR [rsi+0x4]
 1041236:	mov    r9,QWORD PTR [rbx+0x30]
 104123a:	mov    rdx,QWORD PTR [rbx+0x2b0]
 1041241:	lea    rcx,[rbx+0x60]
 1041245:	mov    QWORD PTR [rsp+0x28],rbp
 104124a:	mov    QWORD PTR [rsp+0x20],rax
 104124f:	call   0x1040eb8
 1041254:	cmp    eax,edi
 1041256:	je     0x104128c
 1041258:	movzx  edx,WORD PTR [rsi+0x4]
 104125c:	mov    r8d,DWORD PTR [rbx+0x29c]
 1041263:	mov    r9,rbp
 1041266:	xor    ecx,ecx
 1041268:	call   r13
 104126b:	cmp    eax,0xffffffff
 104126e:	jne    0x1041281
 1041270:	mov    rcx,QWORD PTR [rbx+0x58]
 1041274:	lea    edx,[rax+0x8]
 1041277:	xor    r8d,r8d
 104127a:	call   0x1040c84
 104127f:	jmp    0x104128c
 1041281:	mov    DWORD PTR [rbx+0x29c],edi
 1041287:	mov    edi,0x1
 104128c:	mov    rcx,rsi
 104128f:	call   QWORD PTR [rbx+0x18]
 1041292:	mov    eax,edi
 1041294:	mov    rbx,QWORD PTR [rsp+0x50]
 1041299:	mov    rbp,QWORD PTR [rsp+0x58]
 104129e:	mov    rsi,QWORD PTR [rsp+0x60]
 10412a3:	mov    rdi,QWORD PTR [rsp+0x68]
 10412a8:	add    rsp,0x30
 10412ac:	pop    r14
 10412ae:	pop    r13
 10412b0:	pop    r12
 10412b2:	ret    
 10412b3:	int3   
 10412b4:	int3   
 10412b5:	int3   
 10412b6:	int3   
 10412b7:	int3   
 10412b8:	int3   
 10412b9:	int3   
 10412ba:	int3   
 10412bb:	int3   
 10412bc:	mov    QWORD PTR [rsp+0x10],rbx
 10412c1:	push   rdi
 10412c2:	sub    rsp,0x20
 10412c6:	mov    al,BYTE PTR [rcx+0x2a4]
 10412cc:	mov    r9,r8
 10412cf:	mov    r10,rdx
 10412d2:	and    al,0xf
 10412d4:	mov    rbx,rcx
 10412d7:	cmp    al,0x3
 10412d9:	jne    0x1041341
 10412db:	mov    r8d,DWORD PTR [rcx+0x29c]
 10412e2:	test   r8d,r8d
 10412e5:	je     0x104131e
 10412e7:	xor    edx,edx
 10412e9:	xor    ecx,ecx
 10412eb:	call   r10
 10412ee:	cmp    eax,0xffffffff
 10412f1:	jne    0x1041306
 10412f3:	mov    rcx,QWORD PTR [rbx+0x58]
 10412f7:	lea    edx,[rax+0x8]
 10412fa:	xor    r8d,r8d
 10412fd:	call   0x1040c84
 1041302:	xor    eax,eax
 1041304:	jmp    0x1041359
 1041306:	lea    rdx,[rsp+0x30]
 104130b:	mov    rcx,rbx
 104130e:	call   0x1040c98
 1041313:	test   eax,eax
 1041315:	je     0x1041302
 1041317:	and    DWORD PTR [rbx+0x29c],0x0
 104131e:	mov    rcx,QWORD PTR [rbx+0x8]
 1041322:	call   0x10435d4
 1041327:	and    DWORD PTR [rbx+0x280],0x0
 104132e:	mov    rcx,rbx
 1041331:	call   0x1040da0
 1041336:	test   eax,eax
 1041338:	je     0x1041302
 104133a:	mov    edi,0x1
 104133f:	jmp    0x1041354
 1041341:	call   0x1041174
 1041346:	mov    rcx,rbx
 1041349:	mov    edi,eax
 104134b:	call   0x1040da0
 1041350:	test   eax,eax
 1041352:	je     0x1041302
 1041354:	and    DWORD PTR [rbx],0x0
 1041357:	mov    eax,edi
 1041359:	mov    rbx,QWORD PTR [rsp+0x38]
 104135e:	add    rsp,0x20
 1041362:	pop    rdi
 1041363:	ret    
 1041364:	int3   
 1041365:	int3   
 1041366:	int3   
 1041367:	int3   
 1041368:	int3   
 1041369:	int3   
 104136a:	int3   
 104136b:	int3   
 104136c:	sub    rsp,0x28
 1041370:	mov    r8d,DWORD PTR [rcx]
 1041373:	mov    eax,DWORD PTR [rcx+0x298]
 1041379:	lea    r9d,[r8+rdx*1]
 104137d:	imul   eax,eax,0xffff
 1041383:	cmp    eax,r9d
 1041386:	jb     0x1041391
 1041388:	cmp    r8d,r9d
 104138b:	ja     0x1041391
 104138d:	xor    eax,eax
 104138f:	jmp    0x10413a6
 1041391:	mov    rcx,QWORD PTR [rcx+0x58]
 1041395:	xor    r8d,r8d
 1041398:	lea    edx,[r8+0x9]
 104139c:	call   0x1040c84
 10413a1:	mov    eax,0x1
 10413a6:	add    rsp,0x28
 10413aa:	ret    
 10413ab:	int3   
 10413ac:	int3   
 10413ad:	int3   
 10413ae:	int3   
 10413af:	int3   
 10413b0:	int3   
 10413b1:	int3   
 10413b2:	int3   
 10413b3:	int3   
 10413b4:	rex push rbx
 10413b6:	push   rbp
 10413b7:	push   rsi
 10413b8:	push   rdi
 10413b9:	push   r12
 10413bb:	sub    rsp,0x150
 10413c2:	mov    rax,QWORD PTR [rip+0x224a7]        # 0x1063870
 10413c9:	xor    rax,rsp
 10413cc:	mov    QWORD PTR [rsp+0x140],rax
 10413d4:	mov    eax,DWORD PTR [rcx+0x290]
 10413da:	lea    rdi,[rsp+0x33]
 10413df:	mov    ebp,r9d
 10413e2:	and    rdi,0xfffffffffffffffc
 10413e6:	mov    esi,r8d
 10413e9:	mov    r12,rdx
 10413ec:	mov    rbx,rcx
 10413ef:	cmp    eax,0x10b
 10413f4:	jae    0x1041430
 10413f6:	mov    r8,rax
 10413f9:	xor    edx,edx
 10413fb:	mov    rcx,rdi
 10413fe:	call   0x104026c
 1041403:	mov    r9,QWORD PTR [rbx+0x288]
 104140a:	xor    r8d,r8d
 104140d:	mov    edx,esi
 104140f:	xor    ecx,ecx
 1041411:	mov    WORD PTR [rdi+0x6],bp
 1041415:	mov    WORD PTR [rdi+0x4],si
 1041419:	call   QWORD PTR [rbx+0x50]
 104141c:	cmp    eax,0xffffffff
 104141f:	jne    0x1041453
 1041421:	mov    rcx,QWORD PTR [rbx+0x58]
 1041425:	lea    edx,[rax+0x8]
 1041428:	xor    r8d,r8d
 104142b:	call   0x1040c84
 1041430:	mov    eax,0x1
 1041435:	mov    rcx,QWORD PTR [rsp+0x140]
 104143d:	xor    rcx,rsp
 1041440:	call   0x103ff40
 1041445:	add    rsp,0x150
 104144c:	pop    r12
 104144e:	pop    rdi
 104144f:	pop    rsi
 1041450:	pop    rbp
 1041451:	pop    rbx
 1041452:	ret    
 1041453:	mov    rax,QWORD PTR [rbx+0x288]
 104145a:	mov    r9,QWORD PTR [rbx+0x30]
 104145e:	mov    r8d,DWORD PTR [rbx+0x290]
 1041465:	mov    QWORD PTR [rsp+0x28],rax
 104146a:	mov    rax,QWORD PTR [rbx+0x58]
 104146e:	lea    rcx,[rbx+0x60]
 1041472:	mov    rdx,rdi
 1041475:	mov    QWORD PTR [rsp+0x20],rax
 104147a:	call   0x1040eb8
 104147f:	test   eax,eax
 1041481:	je     0x1041430
 1041483:	mov    rax,QWORD PTR [rbx+0x288]
 104148a:	mov    r9,QWORD PTR [rbx+0x30]
 104148e:	lea    rcx,[rbx+0x60]
 1041492:	mov    QWORD PTR [rsp+0x28],rax
 1041497:	mov    rax,QWORD PTR [rbx+0x58]
 104149b:	mov    r8d,esi
 104149e:	mov    rdx,r12
 10414a1:	mov    QWORD PTR [rsp+0x20],rax
 10414a6:	call   0x1040eb8
 10414ab:	test   eax,eax
 10414ad:	je     0x1041430
 10414af:	xor    eax,eax
 10414b1:	jmp    0x1041435
 10414b3:	int3   
 10414b4:	int3   
 10414b5:	int3   
 10414b6:	int3   
 10414b7:	int3   
 10414b8:	int3   
 10414b9:	int3   
 10414ba:	int3   
 10414bb:	int3   
 10414bc:	mov    QWORD PTR [rsp+0x10],rbx
 10414c1:	mov    QWORD PTR [rsp+0x18],rsi
 10414c6:	push   rdi
 10414c7:	sub    rsp,0x40
 10414cb:	movzx  edx,WORD PTR [rcx+0x2a4]
 10414d2:	and    QWORD PTR [rcx+0x2b0],0x0
 10414da:	and    QWORD PTR [rcx+0x2a8],0x0
 10414e2:	mov    rbx,rcx
 10414e5:	mov    r8d,0x8000
 10414eb:	mov    DWORD PTR [rcx+0x298],r8d
 10414f2:	mov    ecx,edx
 10414f4:	and    ecx,0xf
 10414f7:	je     0x10415b6
 10414fd:	sub    ecx,0x1
 1041500:	je     0x1041576
 1041502:	sub    ecx,0x2
 1041505:	je     0x104151a
 1041507:	cmp    ecx,0xc
 104150a:	je     0x1041600
 1041510:	mov    edx,0x5
 1041515:	jmp    0x10415a6
 104151a:	mov    r9,QWORD PTR [rbx+0x18]
 104151e:	mov    r8,QWORD PTR [rbx+0x10]
 1041522:	shr    edx,0x8
 1041525:	and    edx,0x1f
 1041528:	mov    QWORD PTR [rsp+0x38],rbx
 104152d:	mov    eax,0x1
 1041532:	mov    cl,dl
 1041534:	lea    rdi,[rbx+0x294]
 104153b:	lea    rdx,[rsp+0x50]
 1041540:	shl    eax,cl
 1041542:	lea    rcx,[rip+0xfffffffffffffe6b]        # 0x10413b4
 1041549:	mov    DWORD PTR [rsp+0x54],0x10000
 1041551:	mov    QWORD PTR [rsp+0x30],rcx
 1041556:	mov    DWORD PTR [rsp+0x50],eax
 104155a:	lea    rax,[rbx+0x8]
 104155e:	mov    QWORD PTR [rsp+0x28],rax
 1041563:	lea    rcx,[rbx+0x298]
 104156a:	mov    QWORD PTR [rsp+0x20],rdi
 104156f:	call   0x1043668
 1041574:	jmp    0x104159d
 1041576:	mov    r8,QWORD PTR [rbx+0x18]
 104157a:	mov    rdx,QWORD PTR [rbx+0x10]
 104157e:	lea    rax,[rbx+0x8]
 1041582:	lea    rdi,[rbx+0x294]
 1041589:	lea    rcx,[rbx+0x298]
 1041590:	mov    QWORD PTR [rsp+0x20],rax
 1041595:	mov    r9,rdi
 1041598:	call   0x10438fc
 104159d:	test   eax,eax
 104159f:	je     0x10415c0
 10415a1:	mov    edx,0x8
 10415a6:	mov    rcx,QWORD PTR [rbx+0x58]
 10415aa:	xor    r8d,r8d
 10415ad:	call   0x1040c84
 10415b2:	xor    eax,eax
 10415b4:	jmp    0x1041605
 10415b6:	lea    rdi,[rbx+0x294]
 10415bd:	mov    DWORD PTR [rdi],r8d
 10415c0:	mov    ecx,DWORD PTR [rdi]
 10415c2:	call   QWORD PTR [rbx+0x10]
 10415c5:	mov    QWORD PTR [rbx+0x2b0],rax
 10415cc:	test   rax,rax
 10415cf:	je     0x10415e6
 10415d1:	mov    ecx,DWORD PTR [rbx+0x298]
 10415d7:	call   QWORD PTR [rbx+0x10]
 10415da:	mov    QWORD PTR [rbx+0x2a8],rax
 10415e1:	test   rax,rax
 10415e4:	jne    0x1041600
 10415e6:	mov    rcx,QWORD PTR [rbx+0x58]
 10415ea:	xor    r8d,r8d
 10415ed:	lea    edx,[r8+0x3]
 10415f1:	call   0x1040c84
 10415f6:	mov    rcx,rbx
 10415f9:	call   0x1040e10
 10415fe:	jmp    0x10415b2
 1041600:	mov    eax,0x1
 1041605:	mov    rbx,QWORD PTR [rsp+0x58]
 104160a:	mov    rsi,QWORD PTR [rsp+0x60]
 104160f:	add    rsp,0x40
 1041613:	pop    rdi
 1041614:	ret    
 1041615:	int3   
 1041616:	int3   
 1041617:	int3   
 1041618:	int3   
 1041619:	int3   
 104161a:	int3   
 104161b:	int3   
 104161c:	rex push rdi
 104161e:	sub    rsp,0x30
 1041622:	mov    r10,rcx
 1041625:	or     rcx,0xffffffffffffffff
 1041629:	xor    eax,eax
 104162b:	mov    rdi,rdx
 104162e:	repnz scas al,BYTE PTR es:[rdi]
 1041630:	mov    rax,QWORD PTR [rsp+0x60]
 1041635:	not    rcx
 1041638:	mov    QWORD PTR [rsp+0x28],rax
 104163d:	mov    QWORD PTR [rsp+0x20],r9
 1041642:	mov    r9,r8
 1041645:	mov    r8d,ecx
 1041648:	mov    rcx,r10
 104164b:	call   0x1040eb8
 1041650:	add    rsp,0x30
 1041654:	pop    rdi
 1041655:	ret    
 1041656:	int3   
 1041657:	int3   
 1041658:	int3   
 1041659:	int3   
 104165a:	int3   
 104165b:	int3   
 104165c:	mov    QWORD PTR [rsp+0x8],rbx
 1041661:	push   rdi
 1041662:	sub    rsp,0x20
 1041666:	movzx  edi,cx
 1041669:	mov    rcx,rdx
 104166c:	mov    rbx,rdx
 104166f:	call   0x1040e10
 1041674:	test   eax,eax
 1041676:	jne    0x104167c
 1041678:	xor    eax,eax
 104167a:	jmp    0x10416a2
 104167c:	mov    rcx,rbx
 104167f:	mov    WORD PTR [rbx+0x2a4],di
 1041686:	call   0x10414bc
 104168b:	test   eax,eax
 104168d:	jne    0x104169d
 104168f:	mov    eax,0xf
 1041694:	mov    WORD PTR [rbx+0x2a4],ax
 104169b:	jmp    0x1041678
 104169d:	mov    eax,0x1
 10416a2:	mov    rbx,QWORD PTR [rsp+0x30]
 10416a7:	add    rsp,0x20
 10416ab:	pop    rdi
 10416ac:	ret    
 10416ad:	int3   
 10416ae:	int3   
 10416af:	int3   
 10416b0:	int3   
 10416b1:	int3   
 10416b2:	int3   
 10416b3:	int3   
 10416b4:	mov    QWORD PTR [rsp+0x8],rbx
 10416b9:	push   rdi
 10416ba:	sub    rsp,0x30
 10416be:	mov    rdi,rcx
 10416c1:	mov    rbx,rdx
 10416c4:	mov    ecx,0xf
 10416c9:	mov    rdx,rdi
 10416cc:	call   0x104165c
 10416d1:	mov    rax,QWORD PTR [rdi+0x58]
 10416d5:	mov    r9,QWORD PTR [rdi+0x48]
 10416d9:	mov    r8,QWORD PTR [rdi+0x38]
 10416dd:	lea    rcx,[rdi+0x60]
 10416e1:	mov    edx,0x2
 10416e6:	mov    QWORD PTR [rsp+0x28],rbx
 10416eb:	mov    QWORD PTR [rsp+0x20],rax
 10416f0:	call   0x1040f28
 10416f5:	mov    rcx,rdi
 10416f8:	mov    ebx,eax
 10416fa:	call   QWORD PTR [rdi+0x18]
 10416fd:	mov    eax,ebx
 10416ff:	mov    rbx,QWORD PTR [rsp+0x40]
 1041704:	add    rsp,0x30
 1041708:	pop    rdi
 1041709:	ret    
 104170a:	int3   
 104170b:	int3   
 104170c:	int3   
 104170d:	int3   
 104170e:	int3   
 104170f:	int3   
 1041710:	mov    r11,rsp
 1041713:	mov    QWORD PTR [r11+0x8],rbx
 1041717:	mov    QWORD PTR [r11+0x10],rbp
 104171b:	mov    QWORD PTR [r11+0x18],rsi
 104171f:	mov    QWORD PTR [r11+0x20],rdi
 1041723:	push   r12
 1041725:	push   r13
 1041727:	push   r14
 1041729:	sub    rsp,0x40
 104172d:	mov    eax,DWORD PTR [rcx]
 104172f:	mov    r12,QWORD PTR [rsp+0x80]
 1041737:	mov    rsi,QWORD PTR [rsp+0x98]
 104173f:	mov    DWORD PTR [rsp+0x34],eax
 1041743:	mov    r10,rdx
 1041746:	mov    edi,r9d
 1041749:	mov    r13,r8
 104174c:	lea    rax,[r11+0x28]
 1041750:	mov    rbx,rcx
 1041753:	xor    r14d,r14d
 1041756:	mov    QWORD PTR [rcx+0x50],r12
 104175a:	mov    QWORD PTR [r11-0x30],rsi
 104175e:	lea    r9,[r11-0x1a]
 1041762:	lea    r8,[r11-0x1c]
 1041766:	lea    rdx,[r11-0x1e]
 104176a:	mov    rcx,r10
 104176d:	mov    QWORD PTR [r11-0x38],rax
 1041771:	mov    WORD PTR [r11-0x20],r14w
 1041776:	mov    DWORD PTR [r11+0x28],r14d
 104177a:	call   QWORD PTR [rsp+0x88]
 1041781:	mov    rbp,rax
 1041784:	cmp    rax,0xffffffffffffffff
 1041788:	jne    0x10417bf
 104178a:	mov    r8d,DWORD PTR [rsp+0x80]
 1041792:	mov    rcx,QWORD PTR [rbx+0x58]
 1041796:	lea    edx,[rax+0x2]
 1041799:	call   0x1040c84
 104179e:	xor    eax,eax
 10417a0:	mov    rbx,QWORD PTR [rsp+0x60]
 10417a5:	mov    rbp,QWORD PTR [rsp+0x68]
 10417aa:	mov    rsi,QWORD PTR [rsp+0x70]
 10417af:	mov    rdi,QWORD PTR [rsp+0x78]
 10417b4:	add    rsp,0x40
 10417b8:	pop    r14
 10417ba:	pop    r13
 10417bc:	pop    r12
 10417be:	ret    
 10417bf:	cmp    edi,r14d
 10417c2:	je     0x10417ca
 10417c4:	or     WORD PTR [rsp+0x3e],0x40
 10417ca:	mov    edx,DWORD PTR [rbx+0x29c]
 10417d0:	mov    al,BYTE PTR [rsp+0x90]
 10417d7:	mov    r8d,DWORD PTR [rbx+0x298]
 10417de:	sub    r8d,edx
 10417e1:	add    rdx,QWORD PTR [rbx+0x2a8]
 10417e8:	and    al,0xf
 10417ea:	mov    DWORD PTR [rsp+0x80],r14d
 10417f2:	mov    QWORD PTR [rsp+0x20],rsi
 10417f7:	lea    r9,[rsp+0x80]
 10417ff:	mov    rcx,rbp
 1041802:	cmp    al,0x3
 1041804:	jne    0x104194c
 104180a:	mov    QWORD PTR [rbx+0x288],rsi
 1041811:	call   QWORD PTR [rbx+0x28]
 1041814:	mov    edi,eax
 1041816:	cmp    eax,r14d
 1041819:	je     0x104195a
 104181f:	cmp    eax,0xffffffff
 1041822:	je     0x10419e1
 1041828:	mov    edx,eax
 104182a:	mov    rcx,rbx
 104182d:	mov    DWORD PTR [rsp+0x80],r14d
 1041835:	call   0x104136c
 104183a:	cmp    eax,r14d
 104183d:	jne    0x10419f7
 1041843:	add    DWORD PTR [rbx+0x29c],edi
 1041849:	mov    eax,DWORD PTR [rbx+0x29c]
 104184f:	add    DWORD PTR [rbx],edi
 1041851:	cmp    eax,DWORD PTR [rbx+0x298]
 1041857:	jne    0x104189c
 1041859:	lea    rdx,[rsp+0x88]
 1041861:	mov    rcx,rbx
 1041864:	call   0x1040c98
 1041869:	cmp    eax,r14d
 104186c:	je     0x10419f7
 1041872:	mov    r8d,DWORD PTR [rbx+0x29c]
 1041879:	mov    r9,rsi
 104187c:	xor    edx,edx
 104187e:	xor    ecx,ecx
 1041880:	call   r12
 1041883:	cmp    eax,0xffffffff
 1041886:	je     0x10418c8
 1041888:	mov    eax,DWORD PTR [rsp+0x88]
 104188f:	mov    DWORD PTR [rbx+0x29c],r14d
 1041896:	mov    DWORD PTR [rbx+0x280],eax
 104189c:	mov    edx,DWORD PTR [rbx+0x29c]
 10418a2:	mov    r8d,DWORD PTR [rbx+0x298]
 10418a9:	mov    QWORD PTR [rsp+0x20],rsi
 10418ae:	sub    r8d,edx
 10418b1:	add    rdx,QWORD PTR [rbx+0x2a8]
 10418b8:	lea    r9,[rsp+0x80]
 10418c0:	mov    rcx,rbp
 10418c3:	jmp    0x1041811
 10418c8:	xor    r8d,r8d
 10418cb:	lea    edx,[r8+0x7]
 10418cf:	jmp    0x10419ee
 10418d4:	cmp    edi,0xffffffff
 10418d7:	je     0x10419e1
 10418dd:	mov    edx,edi
 10418df:	mov    rcx,rbx
 10418e2:	mov    DWORD PTR [rsp+0x80],r14d
 10418ea:	call   0x104136c
 10418ef:	cmp    eax,r14d
 10418f2:	jne    0x10419f7
 10418f8:	add    DWORD PTR [rbx+0x29c],edi
 10418fe:	mov    eax,DWORD PTR [rbx+0x29c]
 1041904:	add    DWORD PTR [rbx],edi
 1041906:	cmp    eax,DWORD PTR [rbx+0x298]
 104190c:	jne    0x1041925
 104190e:	mov    r8,rsi
 1041911:	mov    rdx,r12
 1041914:	mov    rcx,rbx
 1041917:	call   0x1041174
 104191c:	cmp    eax,r14d
 104191f:	je     0x10419f7
 1041925:	mov    edx,DWORD PTR [rbx+0x29c]
 104192b:	mov    r8d,DWORD PTR [rbx+0x298]
 1041932:	mov    QWORD PTR [rsp+0x20],rsi
 1041937:	sub    r8d,edx
 104193a:	add    rdx,QWORD PTR [rbx+0x2a8]
 1041941:	lea    r9,[rsp+0x80]
 1041949:	mov    rcx,rbp
 104194c:	call   QWORD PTR [rbx+0x28]
 104194f:	mov    edi,eax
 1041951:	cmp    eax,r14d
 1041954:	jne    0x10418d4
 104195a:	lea    rdx,[rsp+0x80]
 1041962:	mov    r8,rsi
 1041965:	mov    rcx,rbp
 1041968:	mov    DWORD PTR [rsp+0x80],r14d
 1041970:	call   QWORD PTR [rbx+0x38]
 1041973:	mov    r11d,DWORD PTR [rbx]
 1041976:	sub    r11d,DWORD PTR [rsp+0x34]
 104197b:	mov    rax,QWORD PTR [rbx+0x58]
 104197f:	mov    r9,QWORD PTR [rbx+0x30]
 1041983:	lea    rdx,[rsp+0x30]
 1041988:	lea    rcx,[rbx+0x170]
 104198f:	mov    r8d,0x10
 1041995:	mov    QWORD PTR [rsp+0x28],rsi
 104199a:	mov    DWORD PTR [rsp+0x30],r11d
 104199f:	mov    QWORD PTR [rsp+0x20],rax
 10419a4:	call   0x1040eb8
 10419a9:	cmp    eax,r14d
 10419ac:	je     0x104179e
 10419b2:	mov    r9,QWORD PTR [rbx+0x58]
 10419b6:	mov    r8,QWORD PTR [rbx+0x30]
 10419ba:	lea    rcx,[rbx+0x170]
 10419c1:	mov    rdx,r13
 10419c4:	mov    QWORD PTR [rsp+0x20],rsi
 10419c9:	call   0x104161c
 10419ce:	cmp    eax,r14d
 10419d1:	je     0x104179e
 10419d7:	mov    eax,0x1
 10419dc:	jmp    0x10417a0
 10419e1:	mov    r8d,DWORD PTR [rsp+0x80]
 10419e9:	mov    edx,0x2
 10419ee:	mov    rcx,QWORD PTR [rbx+0x58]
 10419f2:	call   0x1040c84
 10419f7:	lea    rdx,[rsp+0x80]
 10419ff:	mov    r8,rsi
 1041a02:	mov    rcx,rbp
 1041a05:	mov    DWORD PTR [rsp+0x80],r14d
 1041a0d:	call   QWORD PTR [rbx+0x38]
 1041a10:	jmp    0x104179e
 1041a15:	int3   
 1041a16:	int3   
 1041a17:	int3   
 1041a18:	int3   
 1041a19:	int3   
 1041a1a:	int3   
 1041a1b:	int3   
 1041a1c:	mov    rax,rsp
 1041a1f:	mov    QWORD PTR [rax+0x8],rbx
 1041a23:	mov    QWORD PTR [rax+0x10],rbp
 1041a27:	mov    QWORD PTR [rax+0x18],rsi
 1041a2b:	mov    QWORD PTR [rax+0x20],rdi
 1041a2f:	push   r12
 1041a31:	sub    rsp,0x40
 1041a35:	mov    rdi,rcx
 1041a38:	mov    rsi,rdx
 1041a3b:	mov    ecx,0x2b8
 1041a40:	mov    rbp,r9
 1041a43:	mov    r12,r8
 1041a46:	call   rsi
 1041a48:	mov    rbx,rax
 1041a4b:	test   rax,rax
 1041a4e:	jne    0x1041a65
 1041a50:	lea    edx,[rax+0x3]
 1041a53:	xor    r8d,r8d
 1041a56:	mov    rcx,rdi
 1041a59:	call   0x1040c84
 1041a5e:	xor    eax,eax
 1041a60:	jmp    0x1041b36
 1041a65:	mov    r8,QWORD PTR [rsp+0x90]
 1041a6d:	mov    r9,QWORD PTR [rsp+0x80]
 1041a75:	and    QWORD PTR [rbx+0x50],0x0
 1041a7a:	and    QWORD PTR [rbx+0x2b0],0x0
 1041a82:	and    QWORD PTR [rbx+0x2a8],0x0
 1041a8a:	mov    QWORD PTR [rax+0x10],rsi
 1041a8e:	mov    rsi,QWORD PTR [rsp+0xa8]
 1041a96:	mov    QWORD PTR [rax+0x58],rdi
 1041a9a:	mov    QWORD PTR [rax+0x18],r12
 1041a9e:	mov    QWORD PTR [rax+0x20],rbp
 1041aa2:	mov    rax,QWORD PTR [rsp+0x70]
 1041aa7:	mov    QWORD PTR [rsp+0x38],rsi
 1041aac:	mov    QWORD PTR [rbx+0x28],rax
 1041ab0:	mov    rax,QWORD PTR [rsp+0x78]
 1041ab5:	mov    QWORD PTR [rsp+0x30],rdi
 1041aba:	mov    QWORD PTR [rbx+0x30],rax
 1041abe:	mov    rax,QWORD PTR [rsp+0x88]
 1041ac6:	mov    QWORD PTR [rbx+0x48],r8
 1041aca:	mov    QWORD PTR [rbx+0x40],rax
 1041ace:	mov    eax,0xf
 1041ad3:	lea    rcx,[rbx+0x60]
 1041ad7:	mov    WORD PTR [rbx+0x2a4],ax
 1041ade:	mov    eax,DWORD PTR [rsp+0xa0]
 1041ae5:	mov    edx,0x2
 1041aea:	mov    DWORD PTR [rbx+0x290],eax
 1041af0:	mov    rax,QWORD PTR [rsp+0x98]
 1041af8:	mov    QWORD PTR [rbx+0x38],r9
 1041afc:	mov    QWORD PTR [rsp+0x28],rax
 1041b01:	mov    QWORD PTR [rsp+0x20],r8
 1041b06:	mov    r8,rbp
 1041b09:	call   0x1040ffc
 1041b0e:	test   eax,eax
 1041b10:	jne    0x1041b22
 1041b12:	mov    rdx,rsi
 1041b15:	mov    rcx,rbx
 1041b18:	call   0x10416b4
 1041b1d:	jmp    0x1041a5e
 1041b22:	and    DWORD PTR [rbx],0x0
 1041b25:	and    DWORD PTR [rbx+0x29c],0x0
 1041b2c:	and    DWORD PTR [rbx+0x280],0x0
 1041b33:	mov    rax,rbx
 1041b36:	mov    rbx,QWORD PTR [rsp+0x50]
 1041b3b:	mov    rbp,QWORD PTR [rsp+0x58]
 1041b40:	mov    rsi,QWORD PTR [rsp+0x60]
 1041b45:	mov    rdi,QWORD PTR [rsp+0x68]
 1041b4a:	add    rsp,0x40
 1041b4e:	pop    r12
 1041b50:	ret    
 1041b51:	int3   
 1041b52:	int3   
 1041b53:	int3   
 1041b54:	int3   
 1041b55:	int3   
 1041b56:	int3   
 1041b57:	int3   
 1041b58:	mov    QWORD PTR [rsp+0x8],rbx
 1041b5d:	mov    QWORD PTR [rsp+0x10],rsi
 1041b62:	push   rdi
 1041b63:	sub    rsp,0x30
 1041b67:	and    DWORD PTR [rsp+0x50],0x0
 1041b6c:	mov    r10,rcx
 1041b6f:	or     rcx,0xffffffffffffffff
 1041b73:	xor    eax,eax
 1041b75:	mov    rdi,rdx
 1041b78:	mov    rsi,r9
 1041b7b:	repnz scas al,BYTE PTR es:[rdi]
 1041b7d:	mov    rax,QWORD PTR [rsp+0x60]
 1041b82:	mov    r11,r8
 1041b85:	not    rcx
 1041b88:	lea    r9,[rsp+0x50]
 1041b8d:	mov    rbx,rdx
 1041b90:	mov    r8d,ecx
 1041b93:	mov    rcx,r10
 1041b96:	mov    QWORD PTR [rsp+0x20],rax
 1041b9b:	call   r11
 1041b9e:	or     rcx,0xffffffffffffffff
 1041ba2:	mov    rdi,rbx
 1041ba5:	mov    r11d,eax
 1041ba8:	xor    eax,eax
 1041baa:	repnz scas al,BYTE PTR es:[rdi]
 1041bac:	not    rcx
 1041baf:	cmp    rcx,r11
 1041bb2:	je     0x1041bc8
 1041bb4:	mov    r8d,DWORD PTR [rsp+0x50]
 1041bb9:	lea    edx,[rax+0x6]
 1041bbc:	mov    rcx,rsi
 1041bbf:	call   0x1040c84
 1041bc4:	xor    eax,eax
 1041bc6:	jmp    0x1041bcd
 1041bc8:	mov    eax,0x1
 1041bcd:	mov    rbx,QWORD PTR [rsp+0x40]
 1041bd2:	mov    rsi,QWORD PTR [rsp+0x48]
 1041bd7:	add    rsp,0x30
 1041bdb:	pop    rdi
 1041bdc:	ret    
 1041bdd:	int3   
 1041bde:	int3   
 1041bdf:	int3   
 1041be0:	int3   
 1041be1:	int3   
 1041be2:	int3   
 1041be3:	int3   
 1041be4:	mov    QWORD PTR [rsp+0x8],rbx
 1041be9:	mov    QWORD PTR [rsp+0x10],rbp
 1041bee:	mov    QWORD PTR [rsp+0x18],rsi
 1041bf3:	push   rdi
 1041bf4:	push   r12
 1041bf6:	push   r13
 1041bf8:	push   r14
 1041bfa:	push   r15
 1041bfc:	sub    rsp,0x30
 1041c00:	mov    rbx,QWORD PTR [rsp+0x90]
 1041c08:	mov    r14,rcx
 1041c0b:	mov    esi,0x8000
 1041c10:	mov    ecx,esi
 1041c12:	mov    r13,r9
 1041c15:	mov    r15,r8
 1041c18:	mov    r12,rdx
 1041c1b:	call   QWORD PTR [rbx+0x18]
 1041c1e:	xor    r8d,r8d
 1041c21:	mov    rdi,rax
 1041c24:	test   rax,rax
 1041c27:	jne    0x1041c40
 1041c29:	lea    edx,[rax+0x3]
 1041c2c:	mov    rcx,QWORD PTR [rsp+0x98]
 1041c34:	call   0x1040c84
 1041c39:	xor    eax,eax
 1041c3b:	jmp    0x1041d16
 1041c40:	mov    rbp,QWORD PTR [rsp+0x88]
 1041c48:	and    DWORD PTR [rsp+0x90],0x0
 1041c50:	lea    r9,[rsp+0x90]
 1041c58:	xor    edx,edx
 1041c5a:	mov    rcx,r12
 1041c5d:	mov    QWORD PTR [rsp+0x20],rbp
 1041c62:	call   QWORD PTR [rbx+0x48]
 1041c65:	cmp    eax,0xffffffff
 1041c68:	jne    0x1041c7f
 1041c6a:	mov    rcx,rdi
 1041c6d:	call   QWORD PTR [rbx+0x20]
 1041c70:	mov    r8d,DWORD PTR [rsp+0x90]
 1041c78:	mov    edx,0x4
 1041c7d:	jmp    0x1041c2c
 1041c7f:	and    DWORD PTR [rsp+0x90],0x0
 1041c87:	mov    r8d,esi
 1041c8a:	jmp    0x1041cef
 1041c8c:	cmp    esi,0x8000
 1041c92:	ja     0x1041d45
 1041c98:	and    DWORD PTR [rsp+0x90],0x0
 1041ca0:	lea    r9,[rsp+0x90]
 1041ca8:	mov    r8d,esi
 1041cab:	mov    rdx,rdi
 1041cae:	mov    rcx,r14
 1041cb1:	mov    QWORD PTR [rsp+0x20],rbp
 1041cb6:	call   QWORD PTR [rbx+0x38]
 1041cb9:	cmp    esi,eax
 1041cbb:	jne    0x1041d45
 1041cc1:	add    DWORD PTR [r13+0x0],esi
 1041cc5:	mov    r8d,DWORD PTR [rsp+0x80]
 1041ccd:	mov    edx,DWORD PTR [r13+0x0]
 1041cd1:	and    DWORD PTR [rsp+0x90],0x0
 1041cd9:	mov    r9,rbp
 1041cdc:	mov    ecx,0x1
 1041ce1:	call   r15
 1041ce4:	cmp    eax,0xffffffff
 1041ce7:	je     0x1041d33
 1041ce9:	mov    r8d,0x8000
 1041cef:	lea    r9,[rsp+0x90]
 1041cf7:	mov    rdx,rdi
 1041cfa:	mov    rcx,r12
 1041cfd:	mov    QWORD PTR [rsp+0x20],rbp
 1041d02:	call   QWORD PTR [rbx+0x30]
 1041d05:	mov    esi,eax
 1041d07:	test   eax,eax
 1041d09:	jne    0x1041c8c
 1041d0b:	mov    rcx,rdi
 1041d0e:	call   QWORD PTR [rbx+0x20]
 1041d11:	mov    eax,0x1
 1041d16:	mov    rbx,QWORD PTR [rsp+0x60]
 1041d1b:	mov    rbp,QWORD PTR [rsp+0x68]
 1041d20:	mov    rsi,QWORD PTR [rsp+0x70]
 1041d25:	add    rsp,0x30
 1041d29:	pop    r15
 1041d2b:	pop    r14
 1041d2d:	pop    r13
 1041d2f:	pop    r12
 1041d31:	pop    rdi
 1041d32:	ret    
 1041d33:	mov    rcx,rdi
 1041d36:	call   QWORD PTR [rbx+0x20]
 1041d39:	xor    r8d,r8d
 1041d3c:	lea    edx,[r8+0x7]
 1041d40:	jmp    0x1041c2c
 1041d45:	mov    rcx,rdi
 1041d48:	call   QWORD PTR [rbx+0x20]
 1041d4b:	mov    r8d,DWORD PTR [rsp+0x90]
 1041d53:	mov    edx,0x6
 1041d58:	jmp    0x1041c2c
 1041d5d:	int3   
 1041d5e:	int3   
 1041d5f:	int3   
 1041d60:	int3   
 1041d61:	int3   
 1041d62:	int3   
 1041d63:	int3   
 1041d64:	mov    rax,rsp
 1041d67:	mov    QWORD PTR [rax+0x8],rbx
 1041d6b:	mov    QWORD PTR [rax+0x10],rbp
 1041d6f:	mov    QWORD PTR [rax+0x18],rsi
 1041d73:	push   rdi
 1041d74:	push   r12
 1041d76:	push   r13
 1041d78:	sub    rsp,0x30
 1041d7c:	mov    r12,QWORD PTR [rsp+0x78]
 1041d81:	and    DWORD PTR [rax+0x20],0x0
 1041d85:	mov    rdi,rdx
 1041d88:	xor    edx,edx
 1041d8a:	mov    rsi,r9
 1041d8d:	movsxd rbx,r8d
 1041d90:	lea    r8d,[rdx+0x1]
 1041d94:	lea    r9,[rax+0x20]
 1041d98:	mov    rbp,rcx
 1041d9b:	mov    QWORD PTR [rax-0x28],r12
 1041d9f:	call   QWORD PTR [rsi+0x48]
 1041da2:	and    DWORD PTR [rsp+0x68],0x0
 1041da7:	lea    r9,[rsp+0x68]
 1041dac:	mov    r8d,ebx
 1041daf:	mov    rdx,rdi
 1041db2:	mov    rcx,rbp
 1041db5:	mov    r13d,eax
 1041db8:	mov    QWORD PTR [rsp+0x20],r12
 1041dbd:	call   QWORD PTR [rsi+0x30]
 1041dc0:	test   eax,eax
 1041dc2:	jle    0x1041e06
 1041dc4:	cmp    eax,ebx
 1041dc6:	jg     0x1041e06
 1041dc8:	mov    dl,BYTE PTR [rbx+rdi*1-0x1]
 1041dcc:	or     rcx,0xffffffffffffffff
 1041dd0:	xor    eax,eax
 1041dd2:	mov    BYTE PTR [rbx+rdi*1-0x1],0x0
 1041dd7:	repnz scas al,BYTE PTR es:[rdi]
 1041dd9:	not    rcx
 1041ddc:	cmp    ecx,ebx
 1041dde:	jl     0x1041de4
 1041de0:	test   dl,dl
 1041de2:	jne    0x1041e06
 1041de4:	and    DWORD PTR [rsp+0x68],eax
 1041de8:	lea    edx,[rcx+r13*1]
 1041dec:	lea    r9,[rsp+0x68]
 1041df1:	xor    r8d,r8d
 1041df4:	mov    rcx,rbp
 1041df7:	mov    QWORD PTR [rsp+0x20],r12
 1041dfc:	call   QWORD PTR [rsi+0x48]
 1041dff:	mov    eax,0x1
 1041e04:	jmp    0x1041e1c
 1041e06:	mov    r8d,DWORD PTR [rsp+0x68]
 1041e0b:	mov    rcx,QWORD PTR [rsp+0x70]
 1041e10:	mov    edx,0x4
 1041e15:	call   0x1040c84
 1041e1a:	xor    eax,eax
 1041e1c:	mov    rbx,QWORD PTR [rsp+0x50]
 1041e21:	mov    rbp,QWORD PTR [rsp+0x58]
 1041e26:	mov    rsi,QWORD PTR [rsp+0x60]
 1041e2b:	add    rsp,0x30
 1041e2f:	pop    r13
 1041e31:	pop    r12
 1041e33:	pop    rdi
 1041e34:	ret    
 1041e35:	int3   
 1041e36:	int3   
 1041e37:	int3   
 1041e38:	int3   
 1041e39:	int3   
 1041e3a:	int3   
 1041e3b:	int3   
 1041e3c:	mov    rax,rsp
 1041e3f:	mov    QWORD PTR [rax+0x8],rbx
 1041e43:	mov    QWORD PTR [rax+0x10],rbp
 1041e47:	mov    QWORD PTR [rax+0x18],rsi
 1041e4b:	mov    QWORD PTR [rax+0x20],rdi
 1041e4f:	push   r12
 1041e51:	sub    rsp,0x30
 1041e55:	mov    rdi,QWORD PTR [rsp+0x60]
 1041e5a:	and    DWORD PTR [rax+0x28],0x0
 1041e5e:	mov    rbx,r8
 1041e61:	and    DWORD PTR [rdi],0x0
 1041e64:	mov    r8d,DWORD PTR [rcx+0xb20]
 1041e6b:	mov    rbp,rcx
 1041e6e:	mov    rcx,QWORD PTR [rbx+0x68]
 1041e72:	mov    r12,r9
 1041e75:	mov    QWORD PTR [rax-0x18],r9
 1041e79:	lea    r9,[rax+0x28]
 1041e7d:	mov    rsi,rdx
 1041e80:	call   QWORD PTR [rbp+0x30]
 1041e83:	mov    ecx,DWORD PTR [rbp+0xb20]
 1041e89:	cmp    eax,ecx
 1041e8b:	je     0x1041eac
 1041e8d:	jbe    0x1041ea8
 1041e8f:	mov    r8d,DWORD PTR [rsp+0x60]
 1041e94:	mov    rcx,QWORD PTR [rbx+0x58]
 1041e98:	mov    edx,0x4
 1041e9d:	call   0x1040c84
 1041ea2:	mov    DWORD PTR [rdi],0x1
 1041ea8:	xor    eax,eax
 1041eaa:	jmp    0x1041ee7
 1041eac:	movzx  eax,WORD PTR [rsi+0x4]
 1041eb0:	cmp    eax,DWORD PTR [rbx+0x294]
 1041eb6:	ja     0x1041ea2
 1041eb8:	movzx  r8d,WORD PTR [rsi+0x4]
 1041ebd:	mov    rdx,QWORD PTR [rbx+0x2b0]
 1041ec4:	mov    rcx,QWORD PTR [rbx+0x68]
 1041ec8:	and    DWORD PTR [rsp+0x60],0x0
 1041ecd:	lea    r9,[rsp+0x60]
 1041ed2:	mov    QWORD PTR [rsp+0x20],r12
 1041ed7:	call   QWORD PTR [rbp+0x30]
 1041eda:	movzx  ecx,WORD PTR [rsi+0x4]
 1041ede:	cmp    ecx,eax
 1041ee0:	jne    0x1041e8f
 1041ee2:	mov    eax,0x1
 1041ee7:	mov    rbx,QWORD PTR [rsp+0x40]
 1041eec:	mov    rbp,QWORD PTR [rsp+0x48]
 1041ef1:	mov    rsi,QWORD PTR [rsp+0x50]
 1041ef6:	mov    rdi,QWORD PTR [rsp+0x58]
 1041efb:	add    rsp,0x30
 1041eff:	pop    r12
 1041f01:	ret    
 1041f02:	int3   
 1041f03:	int3   
 1041f04:	int3   
 1041f05:	int3   
 1041f06:	int3   
 1041f07:	int3   
 1041f08:	mov    rax,rsp
 1041f0b:	mov    QWORD PTR [rax+0x10],rbx
 1041f0f:	mov    QWORD PTR [rax+0x18],rbp
 1041f13:	mov    QWORD PTR [rax+0x20],rsi
 1041f17:	push   rdi
 1041f18:	sub    rsp,0x30
 1041f1c:	and    DWORD PTR [r9],0x0
 1041f20:	and    DWORD PTR [rax+0x8],0x0
 1041f24:	mov    rdi,rdx
 1041f27:	mov    rsi,rcx
 1041f2a:	lea    rdx,[rcx+0xa04]
 1041f31:	mov    rcx,QWORD PTR [rdi+0x178]
 1041f38:	mov    rbx,r9
 1041f3b:	mov    rbp,r8
 1041f3e:	mov    QWORD PTR [rax-0x18],r8
 1041f42:	lea    r9,[rax+0x8]
 1041f46:	mov    r8d,0x10
 1041f4c:	call   QWORD PTR [rsi+0x30]
 1041f4f:	test   eax,eax
 1041f51:	jne    0x1041f57
 1041f53:	xor    eax,eax
 1041f55:	jmp    0x1041faa
 1041f57:	cmp    eax,0x10
 1041f5a:	je     0x1041f77
 1041f5c:	mov    r8d,DWORD PTR [rsp+0x40]
 1041f61:	mov    rcx,QWORD PTR [rdi+0x58]
 1041f65:	mov    edx,0x4
 1041f6a:	call   0x1040c84
 1041f6f:	mov    DWORD PTR [rbx],0x1
 1041f75:	jmp    0x1041f53
 1041f77:	mov    rax,QWORD PTR [rdi+0x58]
 1041f7b:	mov    rcx,QWORD PTR [rdi+0x178]
 1041f82:	lea    rdx,[rsi+0xb2a]
 1041f89:	mov    r9,rsi
 1041f8c:	mov    r8d,0x100
 1041f92:	mov    QWORD PTR [rsp+0x28],rbp
 1041f97:	mov    QWORD PTR [rsp+0x20],rax
 1041f9c:	call   0x1041d64
 1041fa1:	test   eax,eax
 1041fa3:	je     0x1041f6f
 1041fa5:	mov    eax,0x1
 1041faa:	mov    rbx,QWORD PTR [rsp+0x48]
 1041faf:	mov    rbp,QWORD PTR [rsp+0x50]
 1041fb4:	mov    rsi,QWORD PTR [rsp+0x58]
 1041fb9:	add    rsp,0x30
 1041fbd:	pop    rdi
 1041fbe:	ret    
 1041fbf:	int3   
 1041fc0:	int3   
 1041fc1:	int3   
 1041fc2:	int3   
 1041fc3:	int3   
 1041fc4:	int3   
 1041fc5:	int3   
 1041fc6:	int3   
 1041fc7:	int3   
 1041fc8:	mov    QWORD PTR [rsp+0x8],rbx
 1041fcd:	push   rdi
 1041fce:	sub    rsp,0x30
 1041fd2:	mov    rdi,rcx
 1041fd5:	mov    QWORD PTR [rsp+0x28],rdx
 1041fda:	add    rcx,0x68
 1041fde:	mov    rax,QWORD PTR [rdi+0x58]
 1041fe2:	mov    r9,QWORD PTR [rdi+0x50]
 1041fe6:	mov    r8,QWORD PTR [rdi+0x40]
 1041fea:	mov    edx,0x3
 1041fef:	mov    QWORD PTR [rsp+0x20],rax
 1041ff4:	call   0x1040f28
 1041ff9:	mov    rcx,rdi
 1041ffc:	mov    ebx,eax
 1041ffe:	call   QWORD PTR [rdi+0x20]
 1042001:	mov    eax,ebx
 1042003:	mov    rbx,QWORD PTR [rsp+0x40]
 1042008:	add    rsp,0x30
 104200c:	pop    rdi
 104200d:	ret    
 104200e:	int3   
 104200f:	int3   
 1042010:	int3   
 1042011:	int3   
 1042012:	int3   
 1042013:	int3   
 1042014:	mov    rax,rsp
 1042017:	mov    QWORD PTR [rax+0x8],rbx
 104201b:	mov    QWORD PTR [rax+0x10],rbp
 104201f:	mov    QWORD PTR [rax+0x18],rsi
 1042023:	mov    QWORD PTR [rax+0x20],rdi
 1042027:	push   r12
 1042029:	sub    rsp,0x40
 104202d:	mov    rsi,r9
 1042030:	mov    ecx,0x1238
 1042035:	mov    rbp,r8
 1042038:	mov    rdi,rdx
 104203b:	call   rsi
 104203d:	xor    r12d,r12d
 1042040:	mov    rbx,rax
 1042043:	cmp    rax,r12
 1042046:	jne    0x104205f
 1042048:	lea    edx,[r12+0x3]
 104204d:	xor    r8d,r8d
 1042050:	mov    rcx,rdi
 1042053:	call   0x1040c84
 1042058:	xor    eax,eax
 104205a:	jmp    0x1042189
 104205f:	mov    rdx,QWORD PTR [rsp+0xa8]
 1042067:	mov    r10,QWORD PTR [rsp+0xa0]
 104206f:	mov    r8,QWORD PTR [rsp+0x78]
 1042074:	mov    r9,QWORD PTR [rsp+0x90]
 104207c:	mov    QWORD PTR [rax+0x58],rdi
 1042080:	mov    QWORD PTR [rax+0x8],rbp
 1042084:	mov    QWORD PTR [rax+0x18],rsi
 1042088:	mov    rax,QWORD PTR [rsp+0x70]
 104208d:	mov    QWORD PTR [rbx+0x10],rdx
 1042091:	mov    QWORD PTR [rbx+0x20],rax
 1042095:	mov    rax,QWORD PTR [rsp+0x80]
 104209d:	lea    rcx,[rbx+0x68]
 10420a1:	mov    QWORD PTR [rbx+0x30],rax
 10420a5:	mov    rax,QWORD PTR [rsp+0x88]
 10420ad:	mov    QWORD PTR [rbx+0x28],r8
 10420b1:	mov    QWORD PTR [rbx+0x38],rax
 10420b5:	mov    rax,QWORD PTR [rsp+0x98]
 10420bd:	mov    QWORD PTR [rbx+0x40],r9
 10420c1:	mov    QWORD PTR [rbx+0x48],rax
 10420c5:	mov    rax,QWORD PTR [rsp+0xb0]
 10420cd:	mov    QWORD PTR [rbx+0x50],r10
 10420d1:	mov    QWORD PTR [rsp+0x38],rax
 10420d6:	mov    QWORD PTR [rsp+0x30],rdi
 10420db:	mov    QWORD PTR [rsp+0x28],rdx
 10420e0:	mov    edx,0x3
 10420e5:	mov    BYTE PTR [rbx+0xc2b],r12b
 10420ec:	mov    BYTE PTR [rbx+0xd2c],r12b
 10420f3:	mov    BYTE PTR [rbx+0xe2d],r12b
 10420fa:	mov    BYTE PTR [rbx+0xf2e],r12b
 1042101:	mov    BYTE PTR [rbx+0x102f],r12b
 1042108:	mov    BYTE PTR [rbx+0x1130],r12b
 104210f:	mov    QWORD PTR [rsp+0x20],r10
 1042114:	call   0x1040ffc
 1042119:	cmp    eax,r12d
 104211c:	jne    0x1042129
 104211e:	mov    rcx,rbx
 1042121:	call   QWORD PTR [rbx+0x20]
 1042124:	jmp    0x1042058
 1042129:	mov    eax,0x103
 104212e:	mov    DWORD PTR [rbx+0x9e0],0x42414321
 1042138:	mov    DWORD PTR [rbx+0x9e4],r12d
 104213f:	mov    WORD PTR [rbx+0x9f8],ax
 1042146:	mov    DWORD PTR [rbx+0x9e8],r12d
 104214d:	mov    WORD PTR [rbx+0x9fa],r12w
 1042155:	mov    WORD PTR [rbx+0x9fc],r12w
 104215d:	mov    WORD PTR [rbx+0x9fe],r12w
 1042165:	mov    DWORD PTR [rbx+0x9ec],r12d
 104216c:	mov    DWORD PTR [rbx+0x9f0],r12d
 1042173:	mov    DWORD PTR [rbx+0x9f4],r12d
 104217a:	mov    rax,rbx
 104217d:	mov    WORD PTR [rbx+0xb24],r12w
 1042185:	mov    DWORD PTR [rbx+0x60],r12d
 1042189:	mov    rbx,QWORD PTR [rsp+0x50]
 104218e:	mov    rbp,QWORD PTR [rsp+0x58]
 1042193:	mov    rsi,QWORD PTR [rsp+0x60]
 1042198:	mov    rdi,QWORD PTR [rsp+0x68]
 104219d:	add    rsp,0x40
 10421a1:	pop    r12
 10421a3:	ret    
 10421a4:	int3   
 10421a5:	int3   
 10421a6:	int3   
 10421a7:	int3   
 10421a8:	int3   
 10421a9:	int3   
 10421aa:	int3   
 10421ab:	int3   
 10421ac:	mov    QWORD PTR [rsp+0x8],rbx
 10421b1:	mov    r10,rdx
 10421b4:	xor    r9d,r9d
 10421b7:	mov    rbx,r8
 10421ba:	mov    r11,rcx
 10421bd:	mov    edx,0x80070057
 10421c2:	test   r10,r10
 10421c5:	je     0x10421d0
 10421c7:	cmp    r10,0x7fffffff
 10421ce:	jbe    0x10421d3
 10421d0:	mov    r9d,edx
 10421d3:	test   r9d,r9d
 10421d6:	js     0x1042201
 10421d8:	xor    r9d,r9d
 10421db:	mov    rax,r10
 10421de:	test   r10,r10
 10421e1:	je     0x10421fe
 10421e3:	cmp    BYTE PTR [rcx],r9b
 10421e6:	je     0x10421f1
 10421e8:	inc    rcx
 10421eb:	sub    rax,0x1
 10421ef:	jne    0x10421e3
 10421f1:	test   rax,rax
 10421f4:	je     0x10421fe
 10421f6:	mov    r8,r10
 10421f9:	sub    r8,rax
 10421fc:	jmp    0x1042204
 10421fe:	mov    r9d,edx
 1042201:	xor    r8d,r8d
 1042204:	test   r9d,r9d
 1042207:	js     0x1042257
 1042209:	mov    rdx,r10
 104220c:	lea    rcx,[r8+r11*1]
 1042210:	mov    r9d,0x0
 1042216:	sub    rdx,r8
 1042219:	je     0x104224b
 104221b:	mov    rax,rdx
 104221e:	sub    rax,r10
 1042221:	sub    rbx,rcx
 1042224:	lea    r10,[rax+r8*1+0x7fffffff]
 104222c:	test   r10,r10
 104222f:	je     0x1042246
 1042231:	mov    al,BYTE PTR [rbx+rcx*1]
 1042234:	test   al,al
 1042236:	je     0x1042246
 1042238:	mov    BYTE PTR [rcx],al
 104223a:	dec    r10
 104223d:	inc    rcx
 1042240:	sub    rdx,0x1
 1042244:	jne    0x104222c
 1042246:	test   rdx,rdx
 1042249:	jne    0x1042254
 104224b:	dec    rcx
 104224e:	mov    r9d,0x8007007a
 1042254:	mov    BYTE PTR [rcx],0x0
 1042257:	mov    rbx,QWORD PTR [rsp+0x8]
 104225c:	mov    eax,r9d
 104225f:	ret    
 1042260:	int3   
 1042261:	int3   
 1042262:	int3   
 1042263:	int3   
 1042264:	int3   
 1042265:	int3   
 1042266:	int3   
 1042267:	int3   
 1042268:	mov    QWORD PTR [rsp+0x20],rbx
 104226d:	push   rbp
 104226e:	push   rsi
 104226f:	push   rdi
 1042270:	push   r12
 1042272:	push   r13
 1042274:	push   r14
 1042276:	push   r15
 1042278:	sub    rsp,0x180
 104227f:	mov    rax,QWORD PTR [rip+0x215ea]        # 0x1063870
 1042286:	xor    rax,rsp
 1042289:	mov    QWORD PTR [rsp+0x170],rax
 1042291:	mov    rsi,QWORD PTR [rsp+0x1e0]
 1042299:	lea    rdi,[rcx+0x5ba]
 10422a0:	lea    rax,[rsp+0x70]
 10422a5:	sub    rdi,rax
 10422a8:	mov    DWORD PTR [rsp+0x50],r9d
 10422ad:	xor    r13d,r13d
 10422b0:	mov    r9d,0x100
 10422b6:	mov    QWORD PTR [rsp+0x58],r8
 10422bb:	mov    QWORD PTR [rsp+0x60],rdx
 10422c0:	mov    rbx,rcx
 10422c3:	lea    r8d,[r13+0x1]
 10422c7:	lea    rcx,[rsp+0x70]
 10422cc:	mov    rdx,r9
 10422cf:	lea    rax,[rdx+0x7ffffefe]
 10422d6:	cmp    rax,r13
 10422d9:	je     0x10422ed
 10422db:	mov    al,BYTE PTR [rdi+rcx*1]
 10422de:	cmp    al,r13b
 10422e1:	je     0x10422ed
 10422e3:	mov    BYTE PTR [rcx],al
 10422e5:	add    rcx,r8
 10422e8:	sub    rdx,r8
 10422eb:	jne    0x10422cf
 10422ed:	cmp    rdx,r13
 10422f0:	jne    0x10422f5
 10422f2:	sub    rcx,r8
 10422f5:	mov    BYTE PTR [rcx],r13b
 10422f8:	lea    r8,[rbx+0x4ba]
 10422ff:	lea    rcx,[rsp+0x70]
 1042304:	mov    rdx,r9
 1042307:	call   0x10421ac
 104230c:	lea    r9,[rsp+0x40]
 1042311:	lea    rcx,[rsp+0x70]
 1042316:	mov    edx,0x8302
 104231b:	mov    r8d,0x180
 1042321:	mov    DWORD PTR [rsp+0x40],r13d
 1042326:	mov    QWORD PTR [rsp+0x20],rsi
 104232b:	call   QWORD PTR [rbx+0x28]
 104232e:	mov    rbp,rax
 1042331:	cmp    rax,0xffffffffffffffff
 1042335:	jne    0x104234d
 1042337:	mov    r8d,DWORD PTR [rsp+0x40]
 104233c:	mov    rcx,QWORD PTR [rbx+0x58]
 1042340:	lea    edx,[rax+0x7]
 1042343:	call   0x1040c84
 1042348:	jmp    0x10429b6
 104234d:	mov    ecx,DWORD PTR [rbx+0xb1c]
 1042353:	call   QWORD PTR [rbx+0x18]
 1042356:	mov    r15,rax
 1042359:	mov    QWORD PTR [rsp+0x48],rax
 104235e:	cmp    rax,r13
 1042361:	je     0x1042988
 1042367:	mov    r14d,DWORD PTR [rbx+0xb18]
 104236e:	lea    r12,[rbx+0xc2b]
 1042375:	or     r9,0xffffffffffffffff
 1042379:	mov    DWORD PTR [rsp+0x44],r14d
 104237e:	mov    r8d,0x1
 1042384:	cmp    BYTE PTR [r12],r13b
 1042388:	je     0x10423c2
 104238a:	or     WORD PTR [rbx+0x9fe],r8w
 1042392:	xor    eax,eax
 1042394:	lea    rdi,[rbx+0xd2c]
 104239b:	mov    rcx,r9
 104239e:	repnz scas al,BYTE PTR es:[rdi]
 10423a0:	mov    rdi,r12
 10423a3:	not    rcx
 10423a6:	sub    rcx,r8
 10423a9:	lea    edx,[r14+rcx*1]
 10423ad:	mov    rcx,r9
 10423b0:	repnz scas al,BYTE PTR es:[rdi]
 10423b2:	not    rcx
 10423b5:	sub    rcx,r8
 10423b8:	lea    r14d,[rdx+rcx*1+0x2]
 10423bd:	mov    DWORD PTR [rsp+0x44],r14d
 10423c2:	lea    r13,[rbx+0x102f]
 10423c9:	mov    eax,0x2
 10423ce:	cmp    BYTE PTR [r13+0x0],0x0
 10423d3:	je     0x104240c
 10423d5:	or     WORD PTR [rbx+0x9fe],ax
 10423dc:	xor    eax,eax
 10423de:	lea    rdi,[rbx+0x1130]
 10423e5:	mov    rcx,r9
 10423e8:	repnz scas al,BYTE PTR es:[rdi]
 10423ea:	mov    rdi,r13
 10423ed:	not    rcx
 10423f0:	sub    rcx,r8
 10423f3:	lea    edx,[r14+rcx*1]
 10423f7:	mov    rcx,r9
 10423fa:	repnz scas al,BYTE PTR es:[rdi]
 10423fc:	not    rcx
 10423ff:	sub    rcx,r8
 1042402:	lea    r14d,[rdx+rcx*1+0x2]
 1042407:	mov    DWORD PTR [rsp+0x44],r14d
 104240c:	mov    ecx,DWORD PTR [rbx+0x288]
 1042412:	add    ecx,r14d
 1042415:	cmp    r14d,ecx
 1042418:	ja     0x104296c
 104241e:	mov    eax,DWORD PTR [rbx+0x178]
 1042424:	mov    DWORD PTR [rbx+0x9f0],ecx
 104242a:	lea    edx,[rcx+rax*1]
 104242d:	cmp    ecx,edx
 104242f:	ja     0x104296c
 1042435:	mov    ecx,DWORD PTR [rbx+0x68]
 1042438:	add    ecx,edx
 104243a:	mov    DWORD PTR [rbx+0x9e8],ecx
 1042440:	js     0x104296c
 1042446:	cmp    ecx,edx
 1042448:	jb     0x104296c
 104244e:	cmp    DWORD PTR [rbx+0xb14],0x0
 1042455:	mov    eax,0x4
 104245a:	jbe    0x1042463
 104245c:	or     WORD PTR [rbx+0x9fe],ax
 1042463:	movzx  eax,WORD PTR [rbx+0xb26]
 104246a:	and    DWORD PTR [rsp+0x40],0x0
 104246f:	lea    r9,[rsp+0x40]
 1042474:	mov    WORD PTR [rbx+0xa00],ax
 104247b:	movzx  eax,WORD PTR [rbx+0xb28]
 1042482:	lea    rdx,[rbx+0x9e0]
 1042489:	mov    WORD PTR [rbx+0xa02],ax
 1042490:	add    ax,r8w
 1042494:	mov    rcx,rbp
 1042497:	mov    r8d,0x24
 104249d:	mov    WORD PTR [rbx+0xb28],ax
 10424a4:	mov    QWORD PTR [rsp+0x20],rsi
 10424a9:	call   QWORD PTR [rbx+0x38]
 10424ac:	cmp    eax,0x24
 10424af:	je     0x10424c0
 10424b1:	mov    r8d,DWORD PTR [rsp+0x40]
 10424b6:	mov    edx,0x6
 10424bb:	jmp    0x1042974
 10424c0:	cmp    DWORD PTR [rbx+0xb14],0x0
 10424c7:	jbe    0x10425a8
 10424cd:	movzx  eax,WORD PTR [rbx+0x3a0]
 10424d4:	xor    r13d,r13d
 10424d7:	lea    r9,[rsp+0x40]
 10424dc:	mov    WORD PTR [rbx+0xa14],ax
 10424e3:	mov    al,BYTE PTR [rbx+0x3a4]
 10424e9:	lea    rdx,[rbx+0xa14]
 10424f0:	mov    BYTE PTR [rbx+0xa16],al
 10424f6:	mov    al,BYTE PTR [rbx+0x3a8]
 10424fc:	lea    r8d,[r13+0x4]
 1042500:	mov    rcx,rbp
 1042503:	mov    DWORD PTR [rsp+0x40],r13d
 1042508:	mov    QWORD PTR [rsp+0x20],rsi
 104250d:	mov    BYTE PTR [rbx+0xa17],al
 1042513:	call   QWORD PTR [rbx+0x38]
 1042516:	lea    ecx,[r13+0x4]
 104251a:	cmp    eax,ecx
 104251c:	je     0x1042536
 104251e:	mov    edx,0x6
 1042523:	mov    r8d,DWORD PTR [rsp+0x40]
 1042528:	mov    rcx,QWORD PTR [rbx+0x58]
 104252c:	call   0x1040c84
 1042531:	jmp    0x1042980
 1042536:	lea    rcx,[rbx+0xa14]
 104253d:	xor    edx,edx
 104253f:	mov    r8d,0x100
 1042545:	call   0x104026c
 104254a:	movzx  r13d,WORD PTR [rbx+0xb14]
 1042552:	sub    r13w,0x4
 1042557:	je     0x10425a1
 1042559:	mov    eax,0x100
 104255e:	movzx  r14d,ax
 1042562:	cmp    r13w,ax
 1042566:	ja     0x104256c
 1042568:	mov    r14w,r13w
 104256c:	and    DWORD PTR [rsp+0x40],0x0
 1042571:	lea    r9,[rsp+0x40]
 1042576:	lea    rdx,[rbx+0xa14]
 104257d:	movzx  r8d,r14w
 1042581:	mov    rcx,rbp
 1042584:	mov    QWORD PTR [rsp+0x20],rsi
 1042589:	call   QWORD PTR [rbx+0x38]
 104258c:	cmp    r14w,ax
 1042590:	jne    0x10424b1
 1042596:	sub    r13w,r14w
 104259a:	jne    0x1042559
 104259c:	mov    r14d,DWORD PTR [rsp+0x44]
 10425a1:	lea    r13,[rbx+0x102f]
 10425a8:	mov    r8d,0x1
 10425ae:	test   BYTE PTR [rbx+0x9fe],r8b
 10425b5:	je     0x10425fb
 10425b7:	mov    r9,QWORD PTR [rbx+0x58]
 10425bb:	mov    r8,QWORD PTR [rbx+0x38]
 10425bf:	mov    rdx,r12
 10425c2:	mov    rcx,rbp
 10425c5:	mov    QWORD PTR [rsp+0x20],rsi
 10425ca:	call   0x1041b58
 10425cf:	test   eax,eax
 10425d1:	je     0x104297d
 10425d7:	mov    r9,QWORD PTR [rbx+0x58]
 10425db:	mov    r8,QWORD PTR [rbx+0x38]
 10425df:	lea    rdx,[rbx+0xd2c]
 10425e6:	mov    rcx,rbp
 10425e9:	mov    QWORD PTR [rsp+0x20],rsi
 10425ee:	call   0x1041b58
 10425f3:	test   eax,eax
 10425f5:	je     0x104297d
 10425fb:	test   BYTE PTR [rbx+0x9fe],0x2
 1042602:	je     0x1042648
 1042604:	mov    r9,QWORD PTR [rbx+0x58]
 1042608:	mov    r8,QWORD PTR [rbx+0x38]
 104260c:	mov    rdx,r13
 104260f:	mov    rcx,rbp
 1042612:	mov    QWORD PTR [rsp+0x20],rsi
 1042617:	call   0x1041b58
 104261c:	test   eax,eax
 104261e:	je     0x104297d
 1042624:	mov    r9,QWORD PTR [rbx+0x58]
 1042628:	mov    r8,QWORD PTR [rbx+0x38]
 104262c:	lea    rdx,[rbx+0x1130]
 1042633:	mov    rcx,rbp
 1042636:	mov    QWORD PTR [rsp+0x20],rsi
 104263b:	call   0x1041b58
 1042640:	test   eax,eax
 1042642:	je     0x104297d
 1042648:	mov    BYTE PTR [r13+0x0],0x0
 104264d:	xor    r13d,r13d
 1042650:	lea    r8,[rbx+0xe2d]
 1042657:	mov    edx,0x101
 104265c:	sub    r8,r12
 104265f:	lea    r9d,[r13+0x1]
 1042663:	mov    BYTE PTR [rbx+0x1130],r13b
 104266a:	mov    rcx,rdx
 104266d:	lea    rax,[rcx+0x7ffffefd]
 1042674:	cmp    rax,r13
 1042677:	je     0x104268e
 1042679:	mov    al,BYTE PTR [r12+r8*1]
 104267d:	cmp    al,r13b
 1042680:	je     0x104268e
 1042682:	mov    BYTE PTR [r12],al
 1042686:	add    r12,r9
 1042689:	sub    rcx,r9
 104268c:	jne    0x104266d
 104268e:	cmp    rcx,r13
 1042691:	jne    0x1042696
 1042693:	sub    r12,r9
 1042696:	lea    r8,[rbx+0xf2e]
 104269d:	lea    rcx,[rbx+0xd2c]
 10426a4:	mov    BYTE PTR [r12],r13b
 10426a8:	sub    r8,rcx
 10426ab:	lea    rax,[rdx+0x7ffffefd]
 10426b2:	cmp    rax,r13
 10426b5:	je     0x10426ca
 10426b7:	mov    al,BYTE PTR [rcx+r8*1]
 10426bb:	cmp    al,r13b
 10426be:	je     0x10426ca
 10426c0:	mov    BYTE PTR [rcx],al
 10426c2:	add    rcx,r9
 10426c5:	sub    rdx,r9
 10426c8:	jne    0x10426ab
 10426ca:	cmp    rdx,r13
 10426cd:	jne    0x10426d2
 10426cf:	sub    rcx,r9
 10426d2:	mov    BYTE PTR [rcx],r13b
 10426d5:	mov    rcx,QWORD PTR [rbx+0x290]
 10426dc:	lea    r9,[rsp+0x40]
 10426e1:	xor    r8d,r8d
 10426e4:	xor    edx,edx
 10426e6:	mov    DWORD PTR [rsp+0x40],r13d
 10426eb:	mov    QWORD PTR [rsp+0x20],rsi
 10426f0:	call   QWORD PTR [rbx+0x48]
 10426f3:	cmp    eax,0xffffffff
 10426f6:	jne    0x104273f
 10426f8:	mov    edx,0x4
 10426fd:	jmp    0x1042523
 1042702:	mov    eax,DWORD PTR [rbx+0x288]
 1042708:	lea    r9,[rsp+0x40]
 104270d:	mov    rdx,r15
 1042710:	add    eax,DWORD PTR [rbx+0x178]
 1042716:	mov    rcx,rbp
 1042719:	mov    QWORD PTR [rsp+0x20],rsi
 104271e:	add    eax,r14d
 1042721:	add    DWORD PTR [r15],eax
 1042724:	mov    r8d,DWORD PTR [rbx+0xb1c]
 104272b:	mov    DWORD PTR [rsp+0x40],r13d
 1042730:	call   QWORD PTR [rbx+0x38]
 1042733:	cmp    DWORD PTR [rbx+0xb1c],eax
 1042739:	jne    0x104251e
 104273f:	mov    r8d,DWORD PTR [rbx+0xb1c]
 1042746:	mov    rcx,QWORD PTR [rbx+0x290]
 104274d:	lea    r9,[rsp+0x40]
 1042752:	mov    rdx,r15
 1042755:	mov    QWORD PTR [rsp+0x20],rsi
 104275a:	mov    DWORD PTR [rsp+0x40],r13d
 104275f:	call   QWORD PTR [rbx+0x30]
 1042762:	cmp    eax,DWORD PTR [rbx+0xb1c]
 1042768:	je     0x1042702
 104276a:	ja     0x10426f8
 104276c:	mov    rax,QWORD PTR [rbx+0x58]
 1042770:	mov    r13,QWORD PTR [rsp+0x58]
 1042775:	mov    r14,QWORD PTR [rsp+0x60]
 104277a:	mov    r12d,DWORD PTR [rsp+0x50]
 104277f:	mov    rdx,QWORD PTR [rbx+0x180]
 1042786:	mov    QWORD PTR [rsp+0x38],rax
 104278b:	mov    QWORD PTR [rsp+0x30],rbx
 1042790:	mov    r9,r13
 1042793:	mov    r8,r14
 1042796:	mov    rcx,rbp
 1042799:	mov    QWORD PTR [rsp+0x28],rsi
 104279e:	mov    DWORD PTR [rsp+0x20],r12d
 10427a3:	call   0x1041be4
 10427a8:	test   eax,eax
 10427aa:	je     0x104297d
 10427b0:	mov    rax,QWORD PTR [rbx+0x58]
 10427b4:	mov    rdx,QWORD PTR [rbx+0x70]
 10427b8:	mov    r9,r13
 10427bb:	mov    QWORD PTR [rsp+0x38],rax
 10427c0:	mov    QWORD PTR [rsp+0x30],rbx
 10427c5:	mov    r8,r14
 10427c8:	mov    rcx,rbp
 10427cb:	mov    QWORD PTR [rsp+0x28],rsi
 10427d0:	mov    DWORD PTR [rsp+0x20],r12d
 10427d5:	call   0x1041be4
 10427da:	xor    r13d,r13d
 10427dd:	cmp    eax,r13d
 10427e0:	je     0x1042980
 10427e6:	lea    r9,[rsp+0x40]
 10427eb:	lea    r8d,[r13+0x2]
 10427ef:	xor    edx,edx
 10427f1:	mov    rcx,rbp
 10427f4:	mov    DWORD PTR [rsp+0x40],r13d
 10427f9:	mov    QWORD PTR [rsp+0x20],rsi
 10427fe:	call   QWORD PTR [rbx+0x48]
 1042801:	mov    r12d,eax
 1042804:	cmp    eax,0xffffffff
 1042807:	je     0x104251e
 104280d:	lea    r9,[rsp+0x40]
 1042812:	xor    r8d,r8d
 1042815:	xor    edx,edx
 1042817:	mov    rcx,rbp
 104281a:	mov    DWORD PTR [rsp+0x40],r13d
 104281f:	mov    DWORD PTR [rbx+0x9e0],0x4643534d
 1042829:	mov    QWORD PTR [rsp+0x20],rsi
 104282e:	call   QWORD PTR [rbx+0x48]
 1042831:	cmp    eax,0xffffffff
 1042834:	je     0x104251e
 104283a:	lea    r9,[rsp+0x40]
 104283f:	lea    r8d,[r13+0x4]
 1042843:	lea    rdx,[rbx+0x9e0]
 104284a:	mov    rcx,rbp
 104284d:	mov    QWORD PTR [rsp+0x20],rsi
 1042852:	call   QWORD PTR [rbx+0x38]
 1042855:	lea    ecx,[r13+0x4]
 1042859:	cmp    eax,ecx
 104285b:	jne    0x104251e
 1042861:	lea    rdx,[rsp+0x40]
 1042866:	mov    r8,rsi
 1042869:	mov    rcx,rbp
 104286c:	mov    DWORD PTR [rsp+0x40],r13d
 1042871:	call   QWORD PTR [rbx+0x40]
 1042874:	or     rcx,0xffffffffffffffff
 1042878:	mov    rbp,rcx
 104287b:	cmp    eax,ecx
 104287d:	je     0x104251e
 1042883:	mov    rax,QWORD PTR [rbx+0x58]
 1042887:	mov    r9,QWORD PTR [rbx+0x50]
 104288b:	mov    r8,QWORD PTR [rbx+0x40]
 104288f:	lea    edx,[rcx+0x4]
 1042892:	lea    rcx,[rbx+0x68]
 1042896:	mov    QWORD PTR [rsp+0x28],rsi
 104289b:	mov    QWORD PTR [rsp+0x20],rax
 10428a0:	call   0x1040f28
 10428a5:	test   eax,eax
 10428a7:	je     0x1042980
 10428ad:	mov    rax,QWORD PTR [rbx+0x58]
 10428b1:	mov    r9,QWORD PTR [rbx+0x40]
 10428b5:	mov    r8,QWORD PTR [rbx+0x28]
 10428b9:	mov    QWORD PTR [rsp+0x38],rsi
 10428be:	mov    QWORD PTR [rsp+0x30],rax
 10428c3:	mov    rax,QWORD PTR [rbx+0x10]
 10428c7:	mov    QWORD PTR [rsp+0x28],rax
 10428cc:	mov    rax,QWORD PTR [rbx+0x50]
 10428d0:	lea    edx,[rbp+0x4]
 10428d3:	lea    rcx,[rbx+0x68]
 10428d7:	mov    QWORD PTR [rsp+0x20],rax
 10428dc:	call   0x1040ffc
 10428e1:	cmp    eax,r13d
 10428e4:	je     0x1042980
 10428ea:	mov    edx,DWORD PTR [rbx+0x60]
 10428ed:	lea    ecx,[rbp+0x3]
 10428f0:	mov    r9,rsi
 10428f3:	mov    r8d,r12d
 10428f6:	call   r14
 10428f9:	cmp    eax,ebp
 10428fb:	jne    0x1042908
 10428fd:	xor    r8d,r8d
 1042900:	lea    edx,[rbp+0x8]
 1042903:	jmp    0x1042528
 1042908:	sub    DWORD PTR [rbx+0x398],eax
 104290e:	mov    ecx,0x103
 1042913:	mov    DWORD PTR [rbx+0x9e0],0x42414321
 104291d:	mov    WORD PTR [rbx+0x9f8],cx
 1042924:	mov    rcx,r15
 1042927:	mov    DWORD PTR [rbx+0x9e4],r13d
 104292e:	mov    DWORD PTR [rbx+0x9e8],r13d
 1042935:	mov    WORD PTR [rbx+0x9fa],r13w
 104293d:	mov    WORD PTR [rbx+0x9fc],r13w
 1042945:	mov    WORD PTR [rbx+0x9fe],r13w
 104294d:	mov    DWORD PTR [rbx+0x9ec],r13d
 1042954:	mov    DWORD PTR [rbx+0x9f0],r13d
 104295b:	mov    DWORD PTR [rbx+0x9f4],r13d
 1042962:	call   QWORD PTR [rbx+0x20]
 1042965:	mov    eax,0x1
 104296a:	jmp    0x10429b8
 104296c:	mov    edx,0x9
 1042971:	xor    r8d,r8d
 1042974:	mov    rcx,QWORD PTR [rbx+0x58]
 1042978:	call   0x1040c84
 104297d:	xor    r13d,r13d
 1042980:	mov    rcx,QWORD PTR [rsp+0x48]
 1042985:	call   QWORD PTR [rbx+0x20]
 1042988:	cmp    rbp,0xffffffffffffffff
 104298c:	je     0x10429b6
 104298e:	lea    rdx,[rsp+0x40]
 1042993:	mov    r8,rsi
 1042996:	mov    rcx,rbp
 1042999:	mov    DWORD PTR [rsp+0x40],r13d
 104299e:	call   QWORD PTR [rbx+0x40]
 10429a1:	lea    rdx,[rsp+0x40]
 10429a6:	lea    rcx,[rsp+0x70]
 10429ab:	mov    r8,rsi
 10429ae:	mov    DWORD PTR [rsp+0x40],r13d
 10429b3:	call   QWORD PTR [rbx+0x50]
 10429b6:	xor    eax,eax
 10429b8:	mov    rcx,QWORD PTR [rsp+0x170]
 10429c0:	xor    rcx,rsp
 10429c3:	call   0x103ff40
 10429c8:	mov    rbx,QWORD PTR [rsp+0x1d8]
 10429d0:	add    rsp,0x180
 10429d7:	pop    r15
 10429d9:	pop    r14
 10429db:	pop    r13
 10429dd:	pop    r12
 10429df:	pop    rdi
 10429e0:	pop    rsi
 10429e1:	pop    rbp
 10429e2:	ret    
 10429e3:	int3   
 10429e4:	int3   
 10429e5:	int3   
 10429e6:	int3   
 10429e7:	int3   
 10429e8:	int3   
 10429e9:	int3   
 10429ea:	int3   
 10429eb:	int3   
 10429ec:	mov    QWORD PTR [rsp+0x18],rbx
 10429f1:	push   rbp
 10429f2:	push   rsi
 10429f3:	push   rdi
 10429f4:	push   r12
 10429f6:	push   r13
 10429f8:	push   r14
 10429fa:	push   r15
 10429fc:	sub    rsp,0x2c0
 1042a03:	mov    rax,QWORD PTR [rip+0x20e66]        # 0x1063870
 1042a0a:	xor    rax,rsp
 1042a0d:	mov    QWORD PTR [rsp+0x2b0],rax
 1042a15:	mov    r13,QWORD PTR [rsp+0x328]
 1042a1d:	mov    rbx,rcx
 1042a20:	mov    rcx,QWORD PTR [rsp+0x320]
 1042a28:	mov    r12,rdx
 1042a2b:	xor    edi,edi
 1042a2d:	mov    DWORD PTR [rsp+0x60],r8d
 1042a32:	mov    QWORD PTR [rsp+0x78],rcx
 1042a37:	mov    rdx,rcx
 1042a3a:	mov    rcx,r12
 1042a3d:	mov    r8,r13
 1042a40:	mov    QWORD PTR [rsp+0x80],r9
 1042a48:	mov    rbp,rdi
 1042a4b:	mov    BYTE PTR [rbx+0xe2d],dil
 1042a52:	mov    BYTE PTR [rbx+0xf2e],dil
 1042a59:	call   0x10412bc
 1042a5e:	cmp    eax,edi
 1042a60:	je     0x1043532
 1042a66:	lea    r14,[r12+0x60]
 1042a6b:	mov    DWORD PTR [rsp+0x5c],edi
 1042a6f:	mov    eax,DWORD PTR [r14]
 1042a72:	add    eax,DWORD PTR [r12+0x170]
 1042a7a:	jne    0x1042a84
 1042a7c:	lea    eax,[rdi+0x1]
 1042a7f:	jmp    0x1043534
 1042a84:	mov    ecx,DWORD PTR [rbx+0xb20]
 1042a8a:	call   QWORD PTR [rbx+0x18]
 1042a8d:	mov    r15,rax
 1042a90:	mov    QWORD PTR [rsp+0x48],rax
 1042a95:	cmp    rax,rdi
 1042a98:	je     0x1043532
 1042a9e:	mov    ecx,DWORD PTR [rbx+0xb20]
 1042aa4:	call   QWORD PTR [rbx+0x18]
 1042aa7:	xor    esi,esi
 1042aa9:	mov    rdi,rax
 1042aac:	mov    QWORD PTR [rsp+0x70],rax
 1042ab1:	cmp    rax,rsi
 1042ab4:	je     0x104350c
 1042aba:	mov    ecx,DWORD PTR [rbx+0xb1c]
 1042ac0:	call   QWORD PTR [rbx+0x18]
 1042ac3:	mov    rbp,rax
 1042ac6:	mov    QWORD PTR [rsp+0x50],rax
 1042acb:	cmp    rax,rsi
 1042ace:	je     0x104350c
 1042ad4:	mov    r8d,DWORD PTR [rbx+0xb20]
 1042adb:	xor    edx,edx
 1042add:	mov    rcx,r15
 1042ae0:	call   0x104026c
 1042ae5:	mov    r8d,DWORD PTR [rbx+0xb20]
 1042aec:	xor    edx,edx
 1042aee:	mov    rcx,rdi
 1042af1:	call   0x104026c
 1042af6:	mov    r8d,DWORD PTR [rbx+0xb1c]
 1042afd:	xor    edx,edx
 1042aff:	mov    rcx,rbp
 1042b02:	call   0x104026c
 1042b07:	mov    edx,DWORD PTR [r14]
 1042b0a:	lea    rax,[r12+0x170]
 1042b12:	add    edx,DWORD PTR [rax]
 1042b14:	mov    esi,0x1
 1042b19:	je     0x10434a7
 1042b1f:	or     r11,0xffffffffffffffff
 1042b23:	xor    r10d,r10d
 1042b26:	mov    ebp,DWORD PTR [r14]
 1042b29:	lea    rcx,[rbx+0x68]
 1042b2d:	lea    rdx,[rbx+0x178]
 1042b34:	add    ebp,DWORD PTR [rcx]
 1042b36:	lea    rdi,[rbx+0x288]
 1042b3d:	lea    r9,[rbx+0xc2b]
 1042b44:	add    ebp,DWORD PTR [rbx+0xb1c]
 1042b4a:	lea    r8,[rbx+0x102f]
 1042b51:	add    ebp,DWORD PTR [rax]
 1042b53:	add    ebp,DWORD PTR [rdx]
 1042b55:	add    ebp,DWORD PTR [rbx+0xb18]
 1042b5b:	add    ebp,DWORD PTR [rdi]
 1042b5d:	cmp    BYTE PTR [r9],r10b
 1042b60:	je     0x1042b8c
 1042b62:	xor    eax,eax
 1042b64:	lea    rdi,[rbx+0xd2c]
 1042b6b:	mov    rcx,r11
 1042b6e:	repnz scas al,BYTE PTR es:[rdi]
 1042b70:	mov    rdi,r9
 1042b73:	not    rcx
 1042b76:	sub    rcx,rsi
 1042b79:	lea    edx,[rbp+rcx*1+0x0]
 1042b7d:	mov    rcx,r11
 1042b80:	repnz scas al,BYTE PTR es:[rdi]
 1042b82:	not    rcx
 1042b85:	sub    rcx,rsi
 1042b88:	lea    ebp,[rdx+rcx*1+0x2]
 1042b8c:	cmp    BYTE PTR [r8],r10b
 1042b8f:	je     0x1042bbb
 1042b91:	xor    eax,eax
 1042b93:	lea    rdi,[rbx+0x1130]
 1042b9a:	mov    rcx,r11
 1042b9d:	repnz scas al,BYTE PTR es:[rdi]
 1042b9f:	mov    rdi,r8
 1042ba2:	not    rcx
 1042ba5:	sub    rcx,rsi
 1042ba8:	lea    edx,[rbp+rcx*1+0x0]
 1042bac:	mov    rcx,r11
 1042baf:	repnz scas al,BYTE PTR es:[rdi]
 1042bb1:	not    rcx
 1042bb4:	sub    rcx,rsi
 1042bb7:	lea    ebp,[rdx+rcx*1+0x2]
 1042bbb:	mov    r9,r13
 1042bbe:	mov    r8d,ebp
 1042bc1:	xor    edx,edx
 1042bc3:	mov    ecx,esi
 1042bc5:	mov    DWORD PTR [rsp+0x6c],ebp
 1042bc9:	mov    DWORD PTR [rsp+0x58],r10d
 1042bce:	call   QWORD PTR [rsp+0x78]
 1042bd2:	cmp    eax,0xffffffff
 1042bd5:	je     0x10434ef
 1042bdb:	mov    rax,QWORD PTR [rbx+0x58]
 1042bdf:	mov    r14d,DWORD PTR [rbx+0x398]
 1042be6:	mov    r9,QWORD PTR [rbx+0x40]
 1042bea:	mov    r8,QWORD PTR [rbx+0x28]
 1042bee:	mov    QWORD PTR [rsp+0x38],r13
 1042bf3:	mov    QWORD PTR [rsp+0x30],rax
 1042bf8:	mov    rax,QWORD PTR [rbx+0x10]
 1042bfc:	lea    rcx,[rsp+0x90]
 1042c04:	mov    edx,0x2
 1042c09:	mov    QWORD PTR [rsp+0x28],rax
 1042c0e:	mov    rax,QWORD PTR [rbx+0x50]
 1042c12:	sub    r14d,ebp
 1042c15:	mov    QWORD PTR [rsp+0x20],rax
 1042c1a:	call   0x1040ffc
 1042c1f:	xor    r11d,r11d
 1042c22:	cmp    eax,r11d
 1042c25:	je     0x1043500
 1042c2b:	cmp    r14d,r11d
 1042c2e:	jl     0x1042c41
 1042c30:	cmp    DWORD PTR [rsp+0x60],r11d
 1042c35:	jne    0x1042c41
 1042c37:	mov    DWORD PTR [rsp+0x64],r11d
 1042c3c:	jmp    0x1042e2c
 1042c41:	lea    r8,[rbx+0xe2d]
 1042c48:	mov    DWORD PTR [rsp+0x64],esi
 1042c4c:	cmp    BYTE PTR [r8],r11b
 1042c4f:	jne    0x1042cd0
 1042c51:	lea    rax,[rbx+0xf2e]
 1042c58:	mov    r9d,0x101
 1042c5e:	mov    rdi,rbx
 1042c61:	mov    rcx,rax
 1042c64:	sub    rdi,rax
 1042c67:	mov    rdx,r9
 1042c6a:	lea    rax,[rdx+0x7ffffefd]
 1042c71:	cmp    rax,r11
 1042c74:	je     0x1042c8c
 1042c76:	mov    al,BYTE PTR [rdi+rcx*1+0x3ba]
 1042c7d:	cmp    al,r11b
 1042c80:	je     0x1042c8c
 1042c82:	mov    BYTE PTR [rcx],al
 1042c84:	add    rcx,rsi
 1042c87:	sub    rdx,rsi
 1042c8a:	jne    0x1042c6a
 1042c8c:	cmp    rdx,r11
 1042c8f:	jne    0x1042c94
 1042c91:	sub    rcx,rsi
 1042c94:	mov    rdi,rbx
 1042c97:	mov    BYTE PTR [rcx],r11b
 1042c9a:	mov    rdx,r9
 1042c9d:	sub    rdi,r8
 1042ca0:	mov    rcx,r8
 1042ca3:	lea    rax,[rdx+0x7ffffefd]
 1042caa:	cmp    rax,r11
 1042cad:	je     0x1042cc5
 1042caf:	mov    al,BYTE PTR [rdi+rcx*1+0x4ba]
 1042cb6:	cmp    al,r11b
 1042cb9:	je     0x1042cc5
 1042cbb:	mov    BYTE PTR [rcx],al
 1042cbd:	add    rcx,rsi
 1042cc0:	sub    rdx,rsi
 1042cc3:	jne    0x1042ca3
 1042cc5:	cmp    rdx,r11
 1042cc8:	jne    0x1042ccd
 1042cca:	sub    rcx,rsi
 1042ccd:	mov    BYTE PTR [rcx],r11b
 1042cd0:	lea    rdi,[rbx+0x102f]
 1042cd7:	cmp    BYTE PTR [rdi],r11b
 1042cda:	je     0x1042d11
 1042cdc:	or     r8,0xffffffffffffffff
 1042ce0:	xor    eax,eax
 1042ce2:	mov    edx,0xfffffffe
 1042ce7:	mov    rcx,r8
 1042cea:	repnz scas al,BYTE PTR es:[rdi]
 1042cec:	lea    rdi,[rbx+0x1130]
 1042cf3:	not    rcx
 1042cf6:	sub    rcx,rsi
 1042cf9:	sub    edx,ecx
 1042cfb:	mov    rcx,r8
 1042cfe:	repnz scas al,BYTE PTR es:[rdi]
 1042d00:	lea    rdi,[rbx+0x102f]
 1042d07:	not    rcx
 1042d0a:	sub    rcx,rsi
 1042d0d:	sub    edx,ecx
 1042d0f:	add    ebp,edx
 1042d11:	lea    rcx,[rbx+0x6bc]
 1042d18:	lea    rdx,[rbx+0x398]
 1042d1f:	mov    r8d,0x324
 1042d25:	call   0x10402e4
 1042d2a:	add    DWORD PTR [rbx+0x6d0],esi
 1042d30:	lea    rcx,[rbx+0x6bc]
 1042d37:	mov    r8,r13
 1042d3a:	mov    edx,ebp
 1042d3c:	mov    DWORD PTR [rbx+0x60],ebp
 1042d3f:	call   QWORD PTR [rsp+0x80]
 1042d46:	cmp    eax,0xffffffff
 1042d49:	je     0x10434ef
 1042d4f:	mov    rcx,rdi
 1042d52:	lea    rax,[rbx+0x102f]
 1042d59:	lea    rdi,[rbx+0x7de]
 1042d60:	mov    r8d,0x101
 1042d66:	sub    rdi,rax
 1042d69:	xor    r11d,r11d
 1042d6c:	mov    rdx,r8
 1042d6f:	lea    rax,[rdx+0x7ffffefd]
 1042d76:	cmp    rax,r11
 1042d79:	je     0x1042d8d
 1042d7b:	mov    al,BYTE PTR [rdi+rcx*1]
 1042d7e:	cmp    al,r11b
 1042d81:	je     0x1042d8d
 1042d83:	mov    BYTE PTR [rcx],al
 1042d85:	add    rcx,rsi
 1042d88:	sub    rdx,rsi
 1042d8b:	jne    0x1042d6f
 1042d8d:	cmp    rdx,r11
 1042d90:	jne    0x1042d95
 1042d92:	sub    rcx,rsi
 1042d95:	mov    rdx,r8
 1042d98:	mov    BYTE PTR [rcx],r11b
 1042d9b:	lea    rcx,[rbx+0x1130]
 1042da2:	lea    r8,[rbx+0x6de]
 1042da9:	sub    r8,rcx
 1042dac:	lea    rax,[rdx+0x7ffffefd]
 1042db3:	cmp    rax,r11
 1042db6:	je     0x1042dcb
 1042db8:	mov    al,BYTE PTR [r8+rcx*1]
 1042dbc:	cmp    al,r11b
 1042dbf:	je     0x1042dcb
 1042dc1:	mov    BYTE PTR [rcx],al
 1042dc3:	add    rcx,rsi
 1042dc6:	sub    rdx,rsi
 1042dc9:	jne    0x1042dac
 1042dcb:	cmp    rdx,r11
 1042dce:	jne    0x1042dd3
 1042dd0:	sub    rcx,rsi
 1042dd3:	mov    r15,QWORD PTR [rsp+0x48]
 1042dd8:	mov    BYTE PTR [rcx],r11b
 1042ddb:	mov    r14d,DWORD PTR [rbx+0x398]
 1042de2:	sub    r14d,ebp
 1042de5:	or     rdx,0xffffffffffffffff
 1042de9:	xor    eax,eax
 1042deb:	lea    rdi,[rbx+0x7de]
 1042df2:	mov    rcx,rdx
 1042df5:	repnz scas al,BYTE PTR es:[rdi]
 1042df7:	lea    rdi,[rbx+0x6de]
 1042dfe:	not    rcx
 1042e01:	sub    rcx,rsi
 1042e04:	sub    r14d,ecx
 1042e07:	mov    rcx,rdx
 1042e0a:	repnz scas al,BYTE PTR es:[rdi]
 1042e0c:	not    rcx
 1042e0f:	sub    rcx,rsi
 1042e12:	sub    r14d,ecx
 1042e15:	sub    r14d,0x2
 1042e19:	cmp    DWORD PTR [rbx+0x6bc],r11d
 1042e20:	jne    0x1042e2c
 1042e22:	mov    DWORD PTR [rbx+0x6bc],0x7fffffff
 1042e2c:	movzx  eax,WORD PTR [r12+0x2a4]
 1042e35:	mov    rbp,QWORD PTR [rsp+0x50]
 1042e3a:	lea    r9,[rsp+0x40]
 1042e3f:	mov    WORD PTR [rbp+0x6],ax
 1042e43:	mov    WORD PTR [rbp+0x4],r11w
 1042e48:	mov    eax,DWORD PTR [rbx+0x68]
 1042e4b:	mov    DWORD PTR [rbp+0x0],eax
 1042e4e:	mov    rcx,QWORD PTR [r12+0x68]
 1042e53:	xor    r8d,r8d
 1042e56:	xor    edx,edx
 1042e58:	mov    edi,r11d
 1042e5b:	mov    DWORD PTR [rsp+0x40],r11d
 1042e60:	mov    QWORD PTR [rsp+0x20],r13
 1042e65:	call   QWORD PTR [rbx+0x48]
 1042e68:	cmp    eax,0xffffffff
 1042e6b:	je     0x10434da
 1042e71:	xor    eax,eax
 1042e73:	mov    r9,r13
 1042e76:	mov    r8,r12
 1042e79:	mov    DWORD PTR [rsp+0x40],eax
 1042e7d:	lea    rax,[rsp+0x40]
 1042e82:	mov    rdx,r15
 1042e85:	mov    rcx,rbx
 1042e88:	mov    QWORD PTR [rsp+0x20],rax
 1042e8d:	call   0x1041e3c
 1042e92:	xor    r9d,r9d
 1042e95:	cmp    eax,r9d
 1042e98:	je     0x104313a
 1042e9e:	lea    rbp,[r15+0x4]
 1042ea2:	mov    r8d,DWORD PTR [rbx+0xb20]
 1042ea9:	movzx  eax,WORD PTR [rbp+0x0]
 1042ead:	mov    edx,edi
 1042eaf:	add    eax,r8d
 1042eb2:	mov    r15d,r9d
 1042eb5:	add    edi,eax
 1042eb7:	mov    DWORD PTR [rsp+0x68],edi
 1042ebb:	mov    edi,DWORD PTR [r12+0x60]
 1042ec0:	lea    ecx,[rdi+r14*1]
 1042ec4:	cmp    DWORD PTR [rsp+0x68],ecx
 1042ec8:	jae    0x1042f6a
 1042ece:	mov    rdi,QWORD PTR [rsp+0x48]
 1042ed3:	xor    r8d,r8d
 1042ed6:	movzx  eax,WORD PTR [rdi+0x6]
 1042eda:	add    DWORD PTR [rsp+0x5c],eax
 1042ede:	mov    rax,QWORD PTR [rsp+0x50]
 1042ee3:	add    WORD PTR [rax+0x4],si
 1042ee7:	movzx  edx,WORD PTR [rbp+0x0]
 1042eeb:	mov    rcx,QWORD PTR [r12+0x2b0]
 1042ef3:	call   0x1043a3c
 1042ef8:	mov    edx,DWORD PTR [rbx+0xb20]
 1042efe:	mov    rcx,rbp
 1042f01:	sub    edx,0x4
 1042f04:	mov    r8d,eax
 1042f07:	call   0x1043a3c
 1042f0c:	lea    rcx,[rbx+0x68]
 1042f10:	mov    rdx,rdi
 1042f13:	mov    DWORD PTR [rdi],eax
 1042f15:	mov    rax,QWORD PTR [rbx+0x58]
 1042f19:	mov    r9,QWORD PTR [rbx+0x38]
 1042f1d:	mov    r8d,DWORD PTR [rbx+0xb20]
 1042f24:	mov    QWORD PTR [rsp+0x28],r13
 1042f29:	mov    QWORD PTR [rsp+0x20],rax
 1042f2e:	call   0x1040eb8
 1042f33:	test   eax,eax
 1042f35:	je     0x104348f
 1042f3b:	mov    rax,QWORD PTR [rbx+0x58]
 1042f3f:	movzx  r8d,WORD PTR [rbp+0x0]
 1042f44:	mov    r9,QWORD PTR [rbx+0x38]
 1042f48:	mov    rdx,QWORD PTR [r12+0x2b0]
 1042f50:	lea    rcx,[rbx+0x68]
 1042f54:	mov    QWORD PTR [rsp+0x28],r13
 1042f59:	mov    QWORD PTR [rsp+0x20],rax
 1042f5e:	call   0x1040eb8
 1042f63:	test   eax,eax
 1042f65:	jmp    0x10430d5
 1042f6a:	lea    eax,[r8+rdx*1]
 1042f6e:	cmp    eax,ecx
 1042f70:	jae    0x1043072
 1042f76:	mov    rax,QWORD PTR [rsp+0x50]
 1042f7b:	mov    r15d,edi
 1042f7e:	add    WORD PTR [rax+0x4],si
 1042f82:	mov    rax,QWORD PTR [rsp+0x70]
 1042f87:	sub    r15d,r8d
 1042f8a:	sub    r15d,edx
 1042f8d:	lea    rdi,[rax+0x4]
 1042f91:	mov    WORD PTR [rax+0x6],r9w
 1042f96:	add    r15d,r14d
 1042f99:	xor    r8d,r8d
 1042f9c:	mov    WORD PTR [rdi],r15w
 1042fa0:	mov    rcx,QWORD PTR [r12+0x2b0]
 1042fa8:	mov    edx,r15d
 1042fab:	call   0x1043a3c
 1042fb0:	mov    edx,DWORD PTR [rbx+0xb20]
 1042fb6:	mov    rcx,rdi
 1042fb9:	sub    edx,0x4
 1042fbc:	mov    r8d,eax
 1042fbf:	call   0x1043a3c
 1042fc4:	mov    rdx,QWORD PTR [rsp+0x70]
 1042fc9:	lea    rcx,[rbx+0x68]
 1042fcd:	mov    DWORD PTR [rdx],eax
 1042fcf:	mov    rax,QWORD PTR [rbx+0x58]
 1042fd3:	mov    r9,QWORD PTR [rbx+0x38]
 1042fd7:	mov    r8d,DWORD PTR [rbx+0xb20]
 1042fde:	mov    QWORD PTR [rsp+0x28],r13
 1042fe3:	mov    QWORD PTR [rsp+0x20],rax
 1042fe8:	call   0x1040eb8
 1042fed:	xor    ecx,ecx
 1042fef:	cmp    eax,ecx
 1042ff1:	je     0x1043500
 1042ff7:	mov    rax,QWORD PTR [rbx+0x58]
 1042ffb:	mov    r9,QWORD PTR [rbx+0x38]
 1042fff:	mov    rdx,QWORD PTR [r12+0x2b0]
 1043007:	lea    rcx,[rbx+0x68]
 104300b:	mov    r8d,r15d
 104300e:	mov    QWORD PTR [rsp+0x28],r13
 1043013:	mov    QWORD PTR [rsp+0x20],rax
 1043018:	call   0x1040eb8
 104301d:	mov    rdi,QWORD PTR [rsp+0x48]
 1043022:	xor    ecx,ecx
 1043024:	cmp    eax,ecx
 1043026:	je     0x104348f
 104302c:	sub    WORD PTR [rbp+0x0],r15w
 1043031:	mov    rax,QWORD PTR [r12+0x58]
 1043036:	mov    r9,QWORD PTR [rbx+0x38]
 104303a:	mov    r8d,DWORD PTR [rbx+0xb20]
 1043041:	lea    rcx,[rsp+0x90]
 1043049:	mov    rdx,rdi
 104304c:	mov    QWORD PTR [rsp+0x28],r13
 1043051:	mov    QWORD PTR [rsp+0x20],rax
 1043056:	call   0x1040eb8
 104305b:	xor    ecx,ecx
 104305d:	cmp    eax,ecx
 104305f:	je     0x104348f
 1043065:	mov    edx,r15d
 1043068:	add    rdx,QWORD PTR [r12+0x2b0]
 1043070:	jmp    0x10430ac
 1043072:	mov    rax,QWORD PTR [r12+0x58]
 1043077:	mov    rdi,QWORD PTR [rsp+0x48]
 104307c:	mov    r9,QWORD PTR [rbx+0x38]
 1043080:	lea    rcx,[rsp+0x90]
 1043088:	mov    rdx,rdi
 104308b:	mov    QWORD PTR [rsp+0x28],r13
 1043090:	mov    QWORD PTR [rsp+0x20],rax
 1043095:	call   0x1040eb8
 104309a:	xor    ecx,ecx
 104309c:	cmp    eax,ecx
 104309e:	je     0x104348f
 10430a4:	mov    rdx,QWORD PTR [r12+0x2b0]
 10430ac:	mov    rax,QWORD PTR [r12+0x58]
 10430b1:	mov    r9,QWORD PTR [rbx+0x38]
 10430b5:	movzx  r8d,WORD PTR [rbp+0x0]
 10430ba:	lea    rcx,[rsp+0x90]
 10430c2:	mov    QWORD PTR [rsp+0x28],r13
 10430c7:	mov    QWORD PTR [rsp+0x20],rax
 10430cc:	call   0x1040eb8
 10430d1:	xor    ecx,ecx
 10430d3:	cmp    eax,ecx
 10430d5:	je     0x104348f
 10430db:	mov    ecx,DWORD PTR [rsp+0x58]
 10430df:	movzx  eax,WORD PTR [rbp+0x0]
 10430e3:	mov    r8d,DWORD PTR [rsp+0x6c]
 10430e8:	add    eax,r15d
 10430eb:	mov    r9,r13
 10430ee:	add    ecx,eax
 10430f0:	mov    DWORD PTR [rsp+0x58],ecx
 10430f4:	mov    edx,ecx
 10430f6:	mov    ecx,esi
 10430f8:	call   QWORD PTR [rsp+0x78]
 10430fc:	cmp    eax,0xffffffff
 10430ff:	je     0x104347f
 1043105:	mov    r15,QWORD PTR [rsp+0x48]
 104310a:	lea    rax,[rsp+0x40]
 104310f:	mov    r9,r13
 1043112:	mov    r8,r12
 1043115:	mov    rcx,rbx
 1043118:	mov    rdx,r15
 104311b:	mov    QWORD PTR [rsp+0x20],rax
 1043120:	call   0x1041e3c
 1043125:	mov    edi,DWORD PTR [rsp+0x68]
 1043129:	xor    r9d,r9d
 104312c:	cmp    eax,r9d
 104312f:	jne    0x1042ea2
 1043135:	mov    rbp,QWORD PTR [rsp+0x50]
 104313a:	xor    edi,edi
 104313c:	cmp    DWORD PTR [rsp+0x40],edi
 1043140:	jne    0x1043505
 1043146:	add    WORD PTR [rbx+0x9fa],si
 104314d:	mov    eax,0xfffc
 1043152:	cmp    ax,WORD PTR [rbx+0x9fa]
 1043159:	jb     0x10434cc
 104315f:	mov    rax,QWORD PTR [rbx+0x58]
 1043163:	mov    r9,QWORD PTR [rbx+0x38]
 1043167:	mov    r8d,DWORD PTR [rbx+0xb1c]
 104316e:	lea    rcx,[rbx+0x288]
 1043175:	mov    rdx,rbp
 1043178:	mov    QWORD PTR [rsp+0x28],r13
 104317d:	mov    QWORD PTR [rsp+0x20],rax
 1043182:	call   0x1040eb8
 1043187:	cmp    eax,edi
 1043189:	je     0x1043505
 104318f:	mov    rcx,QWORD PTR [r12+0x178]
 1043197:	lea    r9,[rsp+0x40]
 104319c:	xor    r8d,r8d
 104319f:	xor    edx,edx
 10431a1:	mov    DWORD PTR [rsp+0x40],edi
 10431a5:	mov    QWORD PTR [rsp+0x20],r13
 10431aa:	call   QWORD PTR [rbx+0x48]
 10431ad:	cmp    eax,0xffffffff
 10431b0:	je     0x10434da
 10431b6:	lea    r9,[rsp+0x40]
 10431bb:	mov    r8,r13
 10431be:	mov    rdx,r12
 10431c1:	mov    rcx,rbx
 10431c4:	mov    DWORD PTR [rsp+0x40],edi
 10431c8:	call   0x1041f08
 10431cd:	cmp    eax,edi
 10431cf:	je     0x1043382
 10431d5:	xor    ecx,ecx
 10431d7:	movzx  eax,WORD PTR [rbx+0xa0c]
 10431de:	mov    r8d,DWORD PTR [rbx+0xa04]
 10431e5:	mov    edx,0xfffd
 10431ea:	and    ax,dx
 10431ed:	mov    r9d,ecx
 10431f0:	lea    rcx,[rbx+0x398]
 10431f7:	cmp    ax,dx
 10431fa:	lea    rdx,[rbx+0xb2a]
 1043201:	mov    QWORD PTR [rsp+0x20],r13
 1043206:	sete   r9b
 104320a:	call   QWORD PTR [rbx+0x8]
 104320d:	cmp    eax,0xffffffff
 1043210:	je     0x10434ef
 1043216:	movzx  eax,WORD PTR [rbx+0xa0c]
 104321d:	mov    ecx,0xfffd
 1043222:	and    ax,cx
 1043225:	cmp    ax,cx
 1043228:	je     0x1043238
 104322a:	movzx  eax,WORD PTR [rbx+0xb24]
 1043231:	mov    WORD PTR [rbx+0xa0c],ax
 1043238:	mov    eax,DWORD PTR [rbx+0xa08]
 104323e:	add    eax,DWORD PTR [rbx+0xa04]
 1043244:	cmp    eax,DWORD PTR [rsp+0x5c]
 1043248:	jbe    0x104326a
 104324a:	movzx  eax,WORD PTR [rbx+0xa0c]
 1043251:	and    ax,cx
 1043254:	cmp    ax,cx
 1043257:	mov    eax,0xffff
 104325c:	je     0x1043263
 104325e:	mov    eax,0xfffe
 1043263:	mov    WORD PTR [rbx+0xa0c],ax
 104326a:	mov    rax,QWORD PTR [rbx+0x58]
 104326e:	mov    r9,QWORD PTR [rbx+0x38]
 1043272:	lea    rdx,[rbx+0xa04]
 1043279:	lea    rcx,[rbx+0x178]
 1043280:	mov    r8d,0x10
 1043286:	mov    QWORD PTR [rsp+0x28],r13
 104328b:	mov    QWORD PTR [rsp+0x20],rax
 1043290:	call   0x1040eb8
 1043295:	xor    ecx,ecx
 1043297:	cmp    eax,ecx
 1043299:	je     0x1043500
 104329f:	mov    r9,QWORD PTR [rbx+0x58]
 10432a3:	mov    r8,QWORD PTR [rbx+0x38]
 10432a7:	lea    rdx,[rbx+0xb2a]
 10432ae:	lea    rcx,[rbx+0x178]
 10432b5:	mov    QWORD PTR [rsp+0x20],r13
 10432ba:	call   0x104161c
 10432bf:	xor    ecx,ecx
 10432c1:	cmp    eax,ecx
 10432c3:	je     0x1043500
 10432c9:	add    WORD PTR [rbx+0x9fc],si
 10432d0:	cmp    cx,WORD PTR [rbx+0x9fc]
 10432d7:	je     0x1043496
 10432dd:	movzx  eax,WORD PTR [rbx+0xa0c]
 10432e4:	mov    ecx,0xfffe
 10432e9:	and    ax,cx
 10432ec:	cmp    ax,cx
 10432ef:	jne    0x1043360
 10432f1:	mov    r9,QWORD PTR [rbx+0x38]
 10432f5:	lea    r10d,[rcx-0x1]
 10432f9:	lea    rdx,[rbx+0xa04]
 1043300:	mov    WORD PTR [rbx+0xa0c],r10w
 1043308:	mov    rax,QWORD PTR [r12+0x58]
 104330d:	lea    rcx,[rsp+0x1a0]
 1043315:	mov    r8d,0x10
 104331b:	mov    QWORD PTR [rsp+0x28],r13
 1043320:	mov    QWORD PTR [rsp+0x20],rax
 1043325:	call   0x1040eb8
 104332a:	xor    ecx,ecx
 104332c:	cmp    eax,ecx
 104332e:	je     0x1043500
 1043334:	mov    r9,QWORD PTR [r12+0x58]
 1043339:	mov    r8,QWORD PTR [rbx+0x38]
 104333d:	lea    rdx,[rbx+0xb2a]
 1043344:	lea    rcx,[rsp+0x1a0]
 104334c:	mov    QWORD PTR [rsp+0x20],r13
 1043351:	call   0x104161c
 1043356:	xor    ecx,ecx
 1043358:	cmp    eax,ecx
 104335a:	je     0x1043500
 1043360:	lea    r9,[rsp+0x40]
 1043365:	mov    r8,r13
 1043368:	mov    rdx,r12
 104336b:	mov    rcx,rbx
 104336e:	call   0x1041f08
 1043373:	xor    ecx,ecx
 1043375:	cmp    eax,ecx
 1043377:	jne    0x10431d7
 104337d:	mov    rbp,QWORD PTR [rsp+0x50]
 1043382:	cmp    DWORD PTR [rsp+0x40],edi
 1043386:	jne    0x1043505
 104338c:	mov    rax,QWORD PTR [r12+0x58]
 1043391:	mov    r9,QWORD PTR [r12+0x48]
 1043396:	mov    r8,QWORD PTR [r12+0x38]
 104339b:	lea    r14,[r12+0x60]
 10433a0:	mov    edx,0x2
 10433a5:	mov    QWORD PTR [rsp+0x28],r13
 10433aa:	mov    rcx,r14
 10433ad:	mov    QWORD PTR [rsp+0x20],rax
 10433b2:	call   0x1040f28
 10433b7:	cmp    eax,edi
 10433b9:	je     0x1043505
 10433bf:	lea    rdx,[rsp+0x90]
 10433c7:	mov    rcx,r14
 10433ca:	mov    r8d,0x110
 10433d0:	call   0x10402e4
 10433d5:	lea    rcx,[r12+0x170]
 10433dd:	lea    rdx,[rsp+0x1a0]
 10433e5:	mov    r8d,0x110
 10433eb:	call   0x10402e4
 10433f0:	xor    r10d,r10d
 10433f3:	cmp    DWORD PTR [rsp+0x64],r10d
 10433f8:	je     0x1043461
 10433fa:	mov    r9d,DWORD PTR [rsp+0x6c]
 10433ff:	mov    rdx,QWORD PTR [rsp+0x78]
 1043404:	lea    r8,[rsp+0x58]
 1043409:	mov    rcx,rbx
 104340c:	mov    QWORD PTR [rsp+0x20],r13
 1043411:	call   0x1042268
 1043416:	xor    r8d,r8d
 1043419:	cmp    eax,r8d
 104341c:	je     0x1043505
 1043422:	lea    rcx,[rbx+0x398]
 1043429:	mov    edx,DWORD PTR [rcx]
 104342b:	cmp    edx,r8d
 104342e:	jbe    0x1043444
 1043430:	mov    eax,DWORD PTR [rbx+0x6d4]
 1043436:	cmp    DWORD PTR [rbx+0x3b0],eax
 104343c:	jne    0x1043444
 104343e:	mov    DWORD PTR [rbx+0x6bc],edx
 1043444:	lea    rdx,[rbx+0x6bc]
 104344b:	mov    r8d,0x324
 1043451:	call   0x10402e4
 1043456:	xor    r10d,r10d
 1043459:	mov    WORD PTR [rbx+0xb24],r10w
 1043461:	mov    eax,DWORD PTR [r14]
 1043464:	add    eax,DWORD PTR [r12+0x170]
 104346c:	je     0x10434a2
 104346e:	lea    rax,[r12+0x170]
 1043476:	or     r11,0xffffffffffffffff
 104347a:	jmp    0x1042b26
 104347f:	mov    rcx,QWORD PTR [rbx+0x58]
 1043483:	xor    r8d,r8d
 1043486:	lea    edx,[r8+0x7]
 104348a:	call   0x1040c84
 104348f:	mov    rbp,QWORD PTR [rsp+0x50]
 1043494:	jmp    0x104350f
 1043496:	mov    rcx,QWORD PTR [r12+0x58]
 104349b:	mov    edx,0x9
 10434a0:	jmp    0x10434f8
 10434a2:	mov    rdi,QWORD PTR [rsp+0x70]
 10434a7:	xor    eax,eax
 10434a9:	cmp    DWORD PTR [rsp+0x60],eax
 10434ad:	jne    0x10434b6
 10434af:	add    WORD PTR [rbx+0xb24],si
 10434b6:	mov    rcx,r15
 10434b9:	call   QWORD PTR [rbx+0x20]
 10434bc:	mov    rcx,rdi
 10434bf:	call   QWORD PTR [rbx+0x20]
 10434c2:	mov    rcx,rbp
 10434c5:	call   QWORD PTR [rbx+0x20]
 10434c8:	mov    eax,esi
 10434ca:	jmp    0x1043534
 10434cc:	mov    rcx,QWORD PTR [r12+0x58]
 10434d1:	xor    r8d,r8d
 10434d4:	lea    edx,[r8+0x9]
 10434d8:	jmp    0x10434e8
 10434da:	mov    r8d,DWORD PTR [rsp+0x40]
 10434df:	mov    rcx,QWORD PTR [rbx+0x58]
 10434e3:	mov    edx,0x4
 10434e8:	call   0x1040c84
 10434ed:	jmp    0x1043505
 10434ef:	mov    rcx,QWORD PTR [rbx+0x58]
 10434f3:	mov    edx,0x7
 10434f8:	xor    r8d,r8d
 10434fb:	call   0x1040c84
 1043500:	mov    rbp,QWORD PTR [rsp+0x50]
 1043505:	mov    rdi,QWORD PTR [rsp+0x48]
 104350a:	jmp    0x104350f
 104350c:	mov    rdi,r15
 104350f:	mov    rcx,rdi
 1043512:	call   QWORD PTR [rbx+0x20]
 1043515:	mov    rax,QWORD PTR [rsp+0x70]
 104351a:	xor    edi,edi
 104351c:	cmp    rax,rdi
 104351f:	je     0x1043527
 1043521:	mov    rcx,rax
 1043524:	call   QWORD PTR [rbx+0x20]
 1043527:	cmp    rbp,rdi
 104352a:	je     0x1043532
 104352c:	mov    rcx,rbp
 104352f:	call   QWORD PTR [rbx+0x20]
 1043532:	xor    eax,eax
 1043534:	mov    rcx,QWORD PTR [rsp+0x2b0]
 104353c:	xor    rcx,rsp
 104353f:	call   0x103ff40
 1043544:	mov    rbx,QWORD PTR [rsp+0x310]
 104354c:	add    rsp,0x2c0
 1043553:	pop    r15
 1043555:	pop    r14
 1043557:	pop    r13
 1043559:	pop    r12
 104355b:	pop    rdi
 104355c:	pop    rsi
 104355d:	pop    rbp
 104355e:	ret    
 104355f:	int3   
 1043560:	int3   
 1043561:	int3   
 1043562:	int3   
 1043563:	int3   
 1043564:	int3   
 1043565:	int3   
 1043566:	int3   
 1043567:	int3   
 1043568:	rex push rbx
 104356a:	sub    rsp,0x20
 104356e:	cmp    DWORD PTR [rcx],0x4349434c
 1043574:	mov    rbx,rcx
 1043577:	je     0x1043580
 1043579:	mov    eax,0x2
 104357e:	jmp    0x104359b
 1043580:	mov    rcx,QWORD PTR [rcx+0x20]
 1043584:	call   0x1043b48
 1043589:	mov    rcx,QWORD PTR [rbx+0x20]
 104358d:	call   QWORD PTR [rbx+0x10]
 1043590:	and    DWORD PTR [rbx],0x0
 1043593:	mov    rcx,rbx
 1043596:	call   QWORD PTR [rbx+0x10]
 1043599:	xor    eax,eax
 104359b:	add    rsp,0x20
 104359f:	pop    rbx
 10435a0:	ret    
 10435a1:	int3   
 10435a2:	int3   
 10435a3:	int3   
 10435a4:	int3   
 10435a5:	int3   
 10435a6:	int3   
 10435a7:	int3   
 10435a8:	sub    rsp,0x28
 10435ac:	cmp    DWORD PTR [rcx],0x4349434c
 10435b2:	je     0x10435bb
 10435b4:	mov    eax,0x2
 10435b9:	jmp    0x10435c6
 10435bb:	mov    rcx,QWORD PTR [rcx+0x20]
 10435bf:	call   0x1043b3c
 10435c4:	xor    eax,eax
 10435c6:	add    rsp,0x28
 10435ca:	ret    
 10435cb:	int3   
 10435cc:	int3   
 10435cd:	int3   
 10435ce:	int3   
 10435cf:	int3   
 10435d0:	int3   
 10435d1:	int3   
 10435d2:	int3   
 10435d3:	int3   
 10435d4:	sub    rsp,0x28
 10435d8:	cmp    DWORD PTR [rcx],0x4349434c
 10435de:	je     0x10435e7
 10435e0:	mov    eax,0x2
 10435e5:	jmp    0x10435f2
 10435e7:	mov    rcx,QWORD PTR [rcx+0x20]
 10435eb:	call   0x1043abc
 10435f0:	xor    eax,eax
 10435f2:	add    rsp,0x28
 10435f6:	ret    
 10435f7:	int3   
 10435f8:	int3   
 10435f9:	int3   
 10435fa:	int3   
 10435fb:	int3   
 10435fc:	int3   
 10435fd:	int3   
 10435fe:	int3   
 10435ff:	int3   
 1043600:	sub    rsp,0x38
 1043604:	cmp    DWORD PTR [rcx],0x4349434c
 104360a:	je     0x1043613
 104360c:	mov    eax,0x2
 1043611:	jmp    0x104365b
 1043613:	mov    eax,DWORD PTR [rcx+0x18]
 1043616:	cmp    r8d,eax
 1043619:	ja     0x104360c
 104361b:	add    eax,0x1800
 1043620:	cmp    DWORD PTR [rsp+0x60],eax
 1043624:	jb     0x104360c
 1043626:	mov    eax,DWORD PTR [rcx+0x1c]
 1043629:	mov    rcx,QWORD PTR [rcx+0x20]
 104362d:	lea    r9,[rsp+0x40]
 1043632:	mov    DWORD PTR [rsp+0x20],eax
 1043636:	call   0x1043ae0
 104363b:	test   eax,eax
 104363d:	jne    0x104364e
 104363f:	mov    eax,DWORD PTR [rsp+0x40]
 1043643:	mov    rcx,QWORD PTR [rsp+0x68]
 1043648:	mov    DWORD PTR [rcx],eax
 104364a:	xor    eax,eax
 104364c:	jmp    0x104365b
 104364e:	mov    rax,QWORD PTR [rsp+0x68]
 1043653:	and    DWORD PTR [rax],0x0
 1043656:	mov    eax,0x4
 104365b:	add    rsp,0x38
 104365f:	ret    
 1043660:	int3   
 1043661:	int3   
 1043662:	int3   
 1043663:	int3   
 1043664:	int3   
 1043665:	int3   
 1043666:	int3   
 1043667:	int3   
 1043668:	mov    QWORD PTR [rsp+0x8],rbx
 104366d:	mov    QWORD PTR [rsp+0x10],rbp
 1043672:	mov    QWORD PTR [rsp+0x18],rsi
 1043677:	push   rdi
 1043678:	push   r12
 104367a:	push   r13
 104367c:	sub    rsp,0x40
 1043680:	mov    r13,QWORD PTR [rsp+0x88]
 1043688:	mov    r12,rcx
 104368b:	mov    rbp,r8
 104368e:	and    QWORD PTR [r13+0x0],0x0
 1043693:	mov    ecx,0x28
 1043698:	mov    rsi,r9
 104369b:	mov    rdi,rdx
 104369e:	call   rbp
 10436a0:	mov    rbx,rax
 10436a3:	test   rax,rax
 10436a6:	jne    0x10436b0
 10436a8:	lea    eax,[rbx+0x1]
 10436ab:	jmp    0x1043740
 10436b0:	mov    ecx,0x43b8
 10436b5:	mov    DWORD PTR [rax+0x1c],0xb71b00
 10436bc:	call   rbp
 10436be:	mov    rcx,rax
 10436c1:	mov    QWORD PTR [rbx+0x20],rax
 10436c5:	test   rax,rax
 10436c8:	jne    0x10436cf
 10436ca:	lea    edi,[rax+0x1]
 10436cd:	jmp    0x1043708
 10436cf:	mov    rax,QWORD PTR [rsp+0x98]
 10436d7:	mov    r8d,DWORD PTR [rdi+0x4]
 10436db:	mov    edx,DWORD PTR [rdi]
 10436dd:	mov    QWORD PTR [rsp+0x30],rax
 10436e2:	mov    rax,QWORD PTR [rsp+0x90]
 10436ea:	mov    r9,rbp
 10436ed:	mov    QWORD PTR [rsp+0x28],rax
 10436f2:	mov    QWORD PTR [rsp+0x20],rsi
 10436f7:	call   0x1043b54
 10436fc:	mov    edi,eax
 10436fe:	test   eax,eax
 1043700:	je     0x1043711
 1043702:	mov    rcx,QWORD PTR [rbx+0x20]
 1043706:	call   rsi
 1043708:	mov    rcx,rbx
 104370b:	call   rsi
 104370d:	mov    eax,edi
 104370f:	jmp    0x1043740
 1043711:	mov    QWORD PTR [rbx+0x8],rbp
 1043715:	mov    QWORD PTR [rbx+0x10],rsi
 1043719:	mov    eax,DWORD PTR [r12]
 104371d:	mov    DWORD PTR [rbx+0x18],eax
 1043720:	mov    rax,QWORD PTR [rsp+0x80]
 1043728:	mov    DWORD PTR [rbx],0x4349434c
 104372e:	mov    ecx,DWORD PTR [r12]
 1043732:	add    ecx,0x1800
 1043738:	mov    DWORD PTR [rax],ecx
 104373a:	mov    QWORD PTR [r13+0x0],rbx
 104373e:	xor    eax,eax
 1043740:	mov    rbx,QWORD PTR [rsp+0x60]
 1043745:	mov    rbp,QWORD PTR [rsp+0x68]
 104374a:	mov    rsi,QWORD PTR [rsp+0x70]
 104374f:	add    rsp,0x40
 1043753:	pop    r13
 1043755:	pop    r12
 1043757:	pop    rdi
 1043758:	ret    
 1043759:	int3   
 104375a:	int3   
 104375b:	int3   
 104375c:	int3   
 104375d:	int3   
 104375e:	int3   
 104375f:	int3   
 1043760:	mov    QWORD PTR [rsp+0x8],rbx
 1043765:	push   rdi
 1043766:	sub    rsp,0x20
 104376a:	cmp    DWORD PTR [rcx],0x4349434d
 1043770:	mov    rbx,rcx
 1043773:	je     0x104377c
 1043775:	mov    eax,0x2
 104377a:	jmp    0x10437cd
 104377c:	and    DWORD PTR [rcx],0x0
 104377f:	mov    rdi,QWORD PTR [rcx+0x8]
 1043783:	mov    rcx,QWORD PTR [rcx+0x18]
 1043787:	test   rcx,rcx
 104378a:	je     0x104378e
 104378c:	call   rdi
 104378e:	mov    rcx,QWORD PTR [rbx+0x20]
 1043792:	test   rcx,rcx
 1043795:	je     0x1043799
 1043797:	call   rdi
 1043799:	mov    rcx,QWORD PTR [rbx+0x28]
 104379d:	test   rcx,rcx
 10437a0:	je     0x10437a4
 10437a2:	call   rdi
 10437a4:	mov    rcx,QWORD PTR [rbx+0x30]
 10437a8:	test   rcx,rcx
 10437ab:	je     0x10437af
 10437ad:	call   rdi
 10437af:	mov    rcx,QWORD PTR [rbx+0x38]
 10437b3:	test   rcx,rcx
 10437b6:	je     0x10437ba
 10437b8:	call   rdi
 10437ba:	mov    rcx,QWORD PTR [rbx+0x48]
 10437be:	mov    rdx,rdi
 10437c1:	call   0x10445ac
 10437c6:	mov    rcx,rbx
 10437c9:	call   rdi
 10437cb:	xor    eax,eax
 10437cd:	mov    rbx,QWORD PTR [rsp+0x30]
 10437d2:	add    rsp,0x20
 10437d6:	pop    rdi
 10437d7:	ret    
 10437d8:	int3   
 10437d9:	int3   
 10437da:	int3   
 10437db:	int3   
 10437dc:	int3   
 10437dd:	int3   
 10437de:	int3   
 10437df:	int3   
 10437e0:	cmp    DWORD PTR [rcx],0x4349434d
 10437e6:	je     0x10437ee
 10437e8:	mov    eax,0x2
 10437ed:	ret    
 10437ee:	mov    BYTE PTR [rcx+0x40],0x0
 10437f2:	xor    eax,eax
 10437f4:	ret    
 10437f5:	int3   
 10437f6:	int3   
 10437f7:	int3   
 10437f8:	int3   
 10437f9:	int3   
 10437fa:	int3   
 10437fb:	int3   
 10437fc:	mov    rax,rsp
 10437ff:	mov    QWORD PTR [rax+0x8],rbx
 1043803:	mov    QWORD PTR [rax+0x10],rbp
 1043807:	mov    QWORD PTR [rax+0x18],rsi
 104380b:	mov    QWORD PTR [rax+0x20],rdi
 104380f:	push   r12
 1043811:	push   r13
 1043813:	push   r14
 1043815:	sub    rsp,0x50
 1043819:	cmp    DWORD PTR [rcx],0x4349434d
 104381f:	mov    r13,r9
 1043822:	mov    esi,r8d
 1043825:	mov    rbx,rcx
 1043828:	je     0x1043834
 104382a:	mov    eax,0x2
 104382f:	jmp    0x10438d6
 1043834:	mov    eax,DWORD PTR [rcx+0x10]
 1043837:	cmp    esi,eax
 1043839:	ja     0x104382a
 104383b:	mov    ebp,DWORD PTR [rsp+0x90]
 1043842:	add    eax,0xc
 1043845:	cmp    ebp,eax
 1043847:	jb     0x104382a
 1043849:	cmp    BYTE PTR [rcx+0x40],0x0
 104384d:	mov    rdi,QWORD PTR [rcx+0x38]
 1043851:	mov    r14d,0x8000
 1043857:	je     0x104385c
 1043859:	add    rdi,r14
 104385c:	mov    r8,rsi
 104385f:	mov    rcx,rdi
 1043862:	call   0x10402e4
 1043867:	cmp    esi,r14d
 104386a:	jae    0x1043889
 104386c:	mov    eax,0x109
 1043871:	mov    ecx,r14d
 1043874:	sub    ecx,esi
 1043876:	cmp    ecx,eax
 1043878:	cmovb  eax,ecx
 104387b:	lea    rcx,[rsi+rdi*1]
 104387f:	xor    edx,edx
 1043881:	mov    r8d,eax
 1043884:	call   0x104026c
 1043889:	mov    rax,QWORD PTR [rsp+0x98]
 1043891:	mov    rdx,QWORD PTR [rbx+0x38]
 1043895:	mov    rcx,QWORD PTR [rbx+0x48]
 1043899:	mov    QWORD PTR [rsp+0x40],rax
 104389e:	mov    al,BYTE PTR [rbx+0x40]
 10438a1:	mov    r9,r13
 10438a4:	mov    BYTE PTR [rsp+0x38],al
 10438a8:	mov    rax,QWORD PTR [rbx+0x30]
 10438ac:	mov    r8d,esi
 10438af:	mov    QWORD PTR [rsp+0x30],rax
 10438b4:	mov    rax,QWORD PTR [rbx+0x28]
 10438b8:	mov    QWORD PTR [rsp+0x28],rax
 10438bd:	mov    DWORD PTR [rsp+0x20],ebp
 10438c1:	call   0x10455cc
 10438c6:	cmp    esi,r14d
 10438c9:	sete   cl
 10438cc:	neg    eax
 10438ce:	sbb    eax,eax
 10438d0:	mov    BYTE PTR [rbx+0x40],cl
 10438d3:	and    eax,0x4
 10438d6:	lea    r11,[rsp+0x50]
 10438db:	mov    rbx,QWORD PTR [r11+0x20]
 10438df:	mov    rbp,QWORD PTR [r11+0x28]
 10438e3:	mov    rsi,QWORD PTR [r11+0x30]
 10438e7:	mov    rdi,QWORD PTR [r11+0x38]
 10438eb:	mov    rsp,r11
 10438ee:	pop    r14
 10438f0:	pop    r13
 10438f2:	pop    r12
 10438f4:	ret    
 10438f5:	int3   
 10438f6:	int3   
 10438f7:	int3   
 10438f8:	int3   
 10438f9:	int3   
 10438fa:	int3   
 10438fb:	int3   
 10438fc:	mov    QWORD PTR [rsp+0x8],rbx
 1043901:	mov    QWORD PTR [rsp+0x10],rbp
 1043906:	mov    QWORD PTR [rsp+0x18],rsi
 104390b:	push   rdi
 104390c:	push   r12
 104390e:	push   r13
 1043910:	sub    rsp,0x20
 1043914:	mov    rbp,QWORD PTR [rsp+0x60]
 1043919:	mov    r13,r9
 104391c:	mov    r12,r8
 104391f:	and    QWORD PTR [rbp+0x0],0x0
 1043924:	cmp    DWORD PTR [rcx],0x0
 1043927:	mov    rdi,rdx
 104392a:	mov    rsi,rcx
 104392d:	je     0x1043937
 104392f:	cmp    DWORD PTR [rcx],0x8000
 1043935:	jbe    0x104393d
 1043937:	mov    DWORD PTR [rcx],0x8000
 104393d:	mov    ecx,0x50
 1043942:	call   rdi
 1043944:	mov    rbx,rax
 1043947:	test   rax,rax
 104394a:	je     0x1043a16
 1043950:	mov    rcx,rdi
 1043953:	call   0x10445b8
 1043958:	mov    QWORD PTR [rbx+0x48],rax
 104395c:	test   rax,rax
 104395f:	jne    0x104396c
 1043961:	mov    rcx,rbx
 1043964:	call   r12
 1043967:	jmp    0x1043a16
 104396c:	mov    DWORD PTR [rbx],0x4349434d
 1043972:	mov    BYTE PTR [rbx+0x40],0x0
 1043976:	mov    QWORD PTR [rbx+0x8],r12
 104397a:	mov    eax,DWORD PTR [rsi]
 104397c:	mov    ecx,0x8000
 1043981:	mov    DWORD PTR [rbx+0x10],eax
 1043984:	mov    eax,DWORD PTR [rsi]
 1043986:	add    eax,0xc
 1043989:	mov    DWORD PTR [r13+0x0],eax
 104398d:	call   rdi
 104398f:	mov    ecx,0x8000
 1043994:	mov    QWORD PTR [rbx+0x18],rax
 1043998:	call   rdi
 104399a:	mov    esi,0x10000
 104399f:	mov    ecx,esi
 10439a1:	mov    QWORD PTR [rbx+0x20],rax
 10439a5:	call   rdi
 10439a7:	mov    ecx,esi
 10439a9:	mov    QWORD PTR [rbx+0x28],rax
 10439ad:	call   rdi
 10439af:	mov    ecx,0x10122
 10439b4:	mov    QWORD PTR [rbx+0x30],rax
 10439b8:	call   rdi
 10439ba:	cmp    QWORD PTR [rbx+0x18],0x0
 10439bf:	mov    QWORD PTR [rbx+0x38],rax
 10439c3:	je     0x1043a0e
 10439c5:	cmp    QWORD PTR [rbx+0x20],0x0
 10439ca:	je     0x1043a0e
 10439cc:	cmp    QWORD PTR [rbx+0x28],0x0
 10439d1:	je     0x1043a0e
 10439d3:	cmp    QWORD PTR [rbx+0x30],0x0
 10439d8:	je     0x1043a0e
 10439da:	test   rax,rax
 10439dd:	je     0x1043a0e
 10439df:	lea    rcx,[rax+0x10000]
 10439e6:	xor    edx,edx
 10439e8:	mov    r8d,0x122
 10439ee:	call   0x104026c
 10439f3:	mov    r8,QWORD PTR [rbx+0x20]
 10439f7:	mov    rdx,QWORD PTR [rbx+0x18]
 10439fb:	mov    rcx,QWORD PTR [rbx+0x48]
 10439ff:	call   0x104458c
 1043a04:	test   eax,eax
 1043a06:	jne    0x1043a0e
 1043a08:	mov    QWORD PTR [rbp+0x0],rbx
 1043a0c:	jmp    0x1043a1b
 1043a0e:	mov    rcx,rbx
 1043a11:	call   0x1043760
 1043a16:	mov    eax,0x1
 1043a1b:	mov    rbx,QWORD PTR [rsp+0x40]
 1043a20:	mov    rbp,QWORD PTR [rsp+0x48]
 1043a25:	mov    rsi,QWORD PTR [rsp+0x50]
 1043a2a:	add    rsp,0x20
 1043a2e:	pop    r13
 1043a30:	pop    r12
 1043a32:	pop    rdi
 1043a33:	ret    
 1043a34:	int3   
 1043a35:	int3   
 1043a36:	int3   
 1043a37:	int3   
 1043a38:	int3   
 1043a39:	int3   
 1043a3a:	int3   
 1043a3b:	int3   
 1043a3c:	mov    r11d,edx
 1043a3f:	mov    r9,rcx
 1043a42:	shr    r11d,0x2
 1043a46:	xor    r10d,r10d
 1043a49:	jmp    0x1043a77
 1043a4b:	movzx  eax,BYTE PTR [r9+0x1]
 1043a50:	movzx  ecx,BYTE PTR [r9]
 1043a54:	dec    r11d
 1043a57:	shl    eax,0x8
 1043a5a:	add    r9,0x4
 1043a5e:	or     ecx,eax
 1043a60:	movzx  eax,BYTE PTR [r9-0x2]
 1043a65:	shl    eax,0x10
 1043a68:	or     ecx,eax
 1043a6a:	movzx  eax,BYTE PTR [r9-0x1]
 1043a6f:	shl    eax,0x18
 1043a72:	or     ecx,eax
 1043a74:	xor    r8d,ecx
 1043a77:	cmp    r11d,r10d
 1043a7a:	jg     0x1043a4b
 1043a7c:	and    edx,0x3
 1043a7f:	sub    edx,0x1
 1043a82:	je     0x1043aa6
 1043a84:	sub    edx,0x1
 1043a87:	je     0x1043a99
 1043a89:	cmp    edx,0x1
 1043a8c:	jne    0x1043aad
 1043a8e:	movzx  r10d,BYTE PTR [r9]
 1043a92:	shl    r10d,0x10
 1043a96:	inc    r9
 1043a99:	movzx  ecx,BYTE PTR [r9]
 1043a9d:	shl    ecx,0x8
 1043aa0:	or     r10d,ecx
 1043aa3:	inc    r9
 1043aa6:	movzx  ecx,BYTE PTR [r9]
 1043aaa:	or     r10d,ecx
 1043aad:	xor    r10d,r8d
 1043ab0:	mov    eax,r10d
 1043ab3:	ret    
 1043ab4:	int3   
 1043ab5:	int3   
 1043ab6:	int3   
 1043ab7:	int3   
 1043ab8:	int3   
 1043ab9:	int3   
 1043aba:	int3   
 1043abb:	int3   
 1043abc:	rex push rbx
 1043abe:	sub    rsp,0x20
 1043ac2:	mov    rbx,rcx
 1043ac5:	call   0x1046008
 1043aca:	xor    eax,eax
 1043acc:	cmp    DWORD PTR [rbx+0x30],eax
 1043acf:	sete   al
 1043ad2:	add    rsp,0x20
 1043ad6:	pop    rbx
 1043ad7:	ret    
 1043ad8:	int3   
 1043ad9:	int3   
 1043ada:	int3   
 1043adb:	int3   
 1043adc:	int3   
 1043add:	int3   
 1043ade:	int3   
 1043adf:	int3   
 1043ae0:	mov    QWORD PTR [rsp+0x8],rbx
 1043ae5:	push   rdi
 1043ae6:	sub    rsp,0x20
 1043aea:	mov    eax,DWORD PTR [rsp+0x50]
 1043aee:	mov    rbx,r9
 1043af1:	mov    rdi,rcx
 1043af4:	mov    QWORD PTR [rcx+0x9c8],rdx
 1043afb:	mov    DWORD PTR [rcx+0x9d0],r8d
 1043b02:	mov    DWORD PTR [rcx+0x8a4],eax
 1043b08:	call   0x10469a0
 1043b0d:	cmp    DWORD PTR [rdi+0x30],0x0
 1043b11:	je     0x1043b1d
 1043b13:	and    DWORD PTR [rbx],0x0
 1043b16:	mov    eax,0x2
 1043b1b:	jmp    0x1043b29
 1043b1d:	mov    rcx,rdi
 1043b20:	call   0x1045b44
 1043b25:	mov    DWORD PTR [rbx],eax
 1043b27:	xor    eax,eax
 1043b29:	mov    rbx,QWORD PTR [rsp+0x30]
 1043b2e:	add    rsp,0x20
 1043b32:	pop    rdi
 1043b33:	ret    
 1043b34:	int3   
 1043b35:	int3   
 1043b36:	int3   
 1043b37:	int3   
 1043b38:	int3   
 1043b39:	int3   
 1043b3a:	int3   
 1043b3b:	int3   
 1043b3c:	jmp    0x10457a0
 1043b41:	int3   
 1043b42:	int3   
 1043b43:	int3   
 1043b44:	int3   
 1043b45:	int3   
 1043b46:	int3   
 1043b47:	int3   
 1043b48:	jmp    0x10456c0
 1043b4d:	int3   
 1043b4e:	int3   
 1043b4f:	int3   
 1043b50:	int3   
 1043b51:	int3   
 1043b52:	int3   
 1043b53:	int3   
 1043b54:	rex push rbx
 1043b56:	sub    rsp,0x20
 1043b5a:	mov    rax,QWORD PTR [rsp+0x60]
 1043b5f:	mov    rbx,rcx
 1043b62:	mov    DWORD PTR [rcx+0x8],edx
 1043b65:	mov    QWORD PTR [rcx+0x4398],rax
 1043b6c:	lea    eax,[rdx-0x1]
 1043b6f:	test   edx,eax
 1043b71:	jne    0x1043bdd
 1043b73:	mov    eax,0x8000
 1043b78:	cmp    edx,eax
 1043b7a:	jb     0x1043bdd
 1043b7c:	cmp    edx,0x200000
 1043b82:	ja     0x1043bdd
 1043b84:	test   r8d,0x7fff
 1043b8b:	je     0x1043b94
 1043b8d:	and    r8d,0xffff8000
 1043b94:	cmp    r8d,eax
 1043b97:	mov    QWORD PTR [rcx+0x43a0],r9
 1043b9e:	cmovl  r8d,eax
 1043ba2:	mov    rax,QWORD PTR [rsp+0x58]
 1043ba7:	mov    QWORD PTR [rcx+0x43b0],rax
 1043bae:	mov    rax,QWORD PTR [rsp+0x50]
 1043bb3:	mov    DWORD PTR [rcx+0x9bc],r8d
 1043bba:	mov    QWORD PTR [rcx+0x43a8],rax
 1043bc1:	call   0x1045988
 1043bc6:	test   eax,eax
 1043bc8:	jne    0x1043bd1
 1043bca:	mov    eax,0x1
 1043bcf:	jmp    0x1043be2
 1043bd1:	mov    rcx,rbx
 1043bd4:	call   0x10457a0
 1043bd9:	xor    eax,eax
 1043bdb:	jmp    0x1043be2
 1043bdd:	mov    eax,0x5
 1043be2:	add    rsp,0x20
 1043be6:	pop    rbx
 1043be7:	ret    
 1043be8:	int3   
 1043be9:	int3   
 1043bea:	int3   
 1043beb:	int3   
 1043bec:	int3   
 1043bed:	int3   
 1043bee:	int3   
 1043bef:	int3   
 1043bf0:	mov    rax,rsp
 1043bf3:	mov    QWORD PTR [rax+0x8],rbx
 1043bf7:	mov    QWORD PTR [rax+0x10],rbp
 1043bfb:	mov    QWORD PTR [rax+0x18],rsi
 1043bff:	mov    QWORD PTR [rax+0x20],rdi
 1043c03:	push   r12
 1043c05:	push   r13
 1043c07:	push   r14
 1043c09:	movzx  r11d,WORD PTR [rcx+0x54]
 1043c0e:	movsxd r9,DWORD PTR [rcx+0x50]
 1043c12:	mov    r14,QWORD PTR [rcx+0x20]
 1043c16:	lea    r8,[r11+r14*1]
 1043c1a:	mov    eax,0x7efa
 1043c1f:	movzx  ebx,dx
 1043c22:	mov    r12b,BYTE PTR [r9+r8*1-0x1]
 1043c27:	mov    r13b,BYTE PTR [r9+r8*1]
 1043c2b:	mov    rsi,rcx
 1043c2e:	lea    rbp,[r8+0x102]
 1043c35:	mov    edi,0x1000
 1043c3a:	cmp    r11w,ax
 1043c3e:	jbe    0x1043c46
 1043c40:	sub    r11w,ax
 1043c44:	jmp    0x1043c4c
 1043c46:	xor    eax,eax
 1043c48:	mov    r11w,ax
 1043c4c:	cmp    r9d,0x102
 1043c53:	jl     0x1043c5a
 1043c55:	mov    edi,0x400
 1043c5a:	movzx  r10d,bx
 1043c5e:	movsxd rax,r9d
 1043c61:	lea    rdx,[r10+r14*1]
 1043c65:	cmp    BYTE PTR [rax+rdx*1],r13b
 1043c69:	jne    0x1043d28
 1043c6f:	cmp    BYTE PTR [rax+rdx*1-0x1],r12b
 1043c74:	jne    0x1043d28
 1043c7a:	mov    al,BYTE PTR [r8]
 1043c7d:	cmp    BYTE PTR [rdx],al
 1043c7f:	jne    0x1043d28
 1043c85:	mov    al,BYTE PTR [r8+0x1]
 1043c89:	cmp    BYTE PTR [rdx+0x1],al
 1043c8c:	jne    0x1043d28
 1043c92:	lea    rcx,[r8+0x2]
 1043c96:	add    rdx,0x2
 1043c9a:	mov    al,BYTE PTR [rcx]
 1043c9c:	cmp    BYTE PTR [rdx],al
 1043c9e:	jne    0x1043d28
 1043ca4:	mov    al,BYTE PTR [rdx+0x1]
 1043ca7:	inc    rcx
 1043caa:	cmp    BYTE PTR [rcx],al
 1043cac:	jne    0x1043cfc
 1043cae:	mov    al,BYTE PTR [rdx+0x2]
 1043cb1:	inc    rcx
 1043cb4:	cmp    BYTE PTR [rcx],al
 1043cb6:	jne    0x1043cfc
 1043cb8:	mov    al,BYTE PTR [rdx+0x3]
 1043cbb:	inc    rcx
 1043cbe:	cmp    BYTE PTR [rcx],al
 1043cc0:	jne    0x1043cfc
 1043cc2:	mov    al,BYTE PTR [rdx+0x4]
 1043cc5:	inc    rcx
 1043cc8:	cmp    BYTE PTR [rcx],al
 1043cca:	jne    0x1043cfc
 1043ccc:	mov    al,BYTE PTR [rdx+0x5]
 1043ccf:	inc    rcx
 1043cd2:	cmp    BYTE PTR [rcx],al
 1043cd4:	jne    0x1043cfc
 1043cd6:	mov    al,BYTE PTR [rdx+0x6]
 1043cd9:	inc    rcx
 1043cdc:	cmp    BYTE PTR [rcx],al
 1043cde:	jne    0x1043cfc
 1043ce0:	mov    al,BYTE PTR [rdx+0x7]
 1043ce3:	inc    rcx
 1043ce6:	cmp    BYTE PTR [rcx],al
 1043ce8:	jne    0x1043cfc
 1043cea:	add    rdx,0x8
 1043cee:	inc    rcx
 1043cf1:	mov    al,BYTE PTR [rdx]
 1043cf3:	cmp    BYTE PTR [rcx],al
 1043cf5:	jne    0x1043cfc
 1043cf7:	cmp    rcx,rbp
 1043cfa:	jb     0x1043ca4
 1043cfc:	sub    ecx,ebp
 1043cfe:	mov    eax,0x102
 1043d03:	lea    r8,[rbp-0x102]
 1043d0a:	add    ecx,eax
 1043d0c:	cmp    ecx,r9d
 1043d0f:	jle    0x1043d28
 1043d11:	cmp    ecx,eax
 1043d13:	mov    WORD PTR [rsi+0x56],bx
 1043d17:	mov    r9d,ecx
 1043d1a:	jge    0x1043d4c
 1043d1c:	movsxd rax,ecx
 1043d1f:	mov    r12b,BYTE PTR [rax+r8*1-0x1]
 1043d24:	mov    r13b,BYTE PTR [rax+r8*1]
 1043d28:	mov    rcx,QWORD PTR [rsi+0x30]
 1043d2c:	and    r10d,0x7fff
 1043d33:	mov    bx,WORD PTR [rcx+r10*2]
 1043d38:	cmp    bx,r11w
 1043d3c:	jbe    0x1043d4c
 1043d3e:	mov    eax,0xffff
 1043d43:	add    di,ax
 1043d46:	jne    0x1043c5a
 1043d4c:	mov    rbx,QWORD PTR [rsp+0x20]
 1043d51:	mov    rbp,QWORD PTR [rsp+0x28]
 1043d56:	mov    rsi,QWORD PTR [rsp+0x30]
 1043d5b:	mov    rdi,QWORD PTR [rsp+0x38]
 1043d60:	mov    eax,r9d
 1043d63:	pop    r14
 1043d65:	pop    r13
 1043d67:	pop    r12
 1043d69:	ret    
 1043d6a:	int3   
 1043d6b:	int3   
 1043d6c:	int3   
 1043d6d:	int3   
 1043d6e:	int3   
 1043d6f:	int3   
 1043d70:	mov    r8,QWORD PTR [rcx+0x20]
 1043d74:	and    DWORD PTR [rcx+0x38],0x0
 1043d78:	mov    eax,0x8000
 1043d7d:	mov    rdx,rcx
 1043d80:	mov    WORD PTR [rcx+0x54],ax
 1043d84:	mov    DWORD PTR [rcx+0x4c],eax
 1043d87:	add    r8,rax
 1043d8a:	mov    r9d,0x2
 1043d90:	movzx  eax,BYTE PTR [r8]
 1043d94:	mov    ecx,DWORD PTR [rdx+0x38]
 1043d97:	inc    r8
 1043d9a:	shl    ecx,0x5
 1043d9d:	xor    ecx,eax
 1043d9f:	and    ecx,0x7fff
 1043da5:	sub    r9,0x1
 1043da9:	mov    DWORD PTR [rdx+0x38],ecx
 1043dac:	jne    0x1043d90
 1043dae:	repz ret 
 1043db0:	int3   
 1043db1:	int3   
 1043db2:	int3   
 1043db3:	int3   
 1043db4:	int3   
 1043db5:	int3   
 1043db6:	int3   
 1043db7:	int3   
 1043db8:	mov    r11d,0x8000
 1043dbe:	mov    r10,rcx
 1043dc1:	xor    r8d,r8d
 1043dc4:	mov    r9,r11
 1043dc7:	mov    rdx,QWORD PTR [r10+0x28]
 1043dcb:	xor    eax,eax
 1043dcd:	movzx  ecx,WORD PTR [rdx+r8*1]
 1043dd2:	add    cx,r11w
 1043dd6:	cmp    WORD PTR [rdx+r8*1],r11w
 1043ddb:	cmovae ax,cx
 1043ddf:	mov    WORD PTR [rdx+r8*1],ax
 1043de4:	add    r8,0x2
 1043de8:	sub    r9,0x1
 1043dec:	jne    0x1043dc7
 1043dee:	xor    r8d,r8d
 1043df1:	mov    r9,r11
 1043df4:	mov    rdx,QWORD PTR [r10+0x30]
 1043df8:	xor    eax,eax
 1043dfa:	movzx  ecx,WORD PTR [rdx+r8*1]
 1043dff:	add    cx,r11w
 1043e03:	cmp    WORD PTR [rdx+r8*1],r11w
 1043e08:	cmovae ax,cx
 1043e0c:	mov    WORD PTR [rdx+r8*1],ax
 1043e11:	add    r8,0x2
 1043e15:	sub    r9,0x1
 1043e19:	jne    0x1043df4
 1043e1b:	repz ret 
 1043e1d:	int3   
 1043e1e:	int3   
 1043e1f:	int3   
 1043e20:	int3   
 1043e21:	int3   
 1043e22:	int3   
 1043e23:	int3   
 1043e24:	xor    r9d,r9d
 1043e27:	mov    r8d,0x8000
 1043e2d:	mov    rdx,r9
 1043e30:	mov    rax,QWORD PTR [rcx+0x28]
 1043e34:	mov    WORD PTR [rdx+rax*1],r9w
 1043e39:	add    rdx,0x2
 1043e3d:	sub    r8,0x1
 1043e41:	jne    0x1043e30
 1043e43:	repz ret 
 1043e45:	int3   
 1043e46:	int3   
 1043e47:	int3   
 1043e48:	int3   
 1043e49:	int3   
 1043e4a:	int3   
 1043e4b:	int3   
 1043e4c:	mov    QWORD PTR [rsp+0x8],rbx
 1043e51:	mov    QWORD PTR [rsp+0x10],rsi
 1043e56:	mov    QWORD PTR [rsp+0x18],rdi
 1043e5b:	movzx  r9d,WORD PTR [rcx+0x60]
 1043e60:	mov    rax,QWORD PTR [rcx]
 1043e63:	mov    esi,0x1
 1043e68:	mov    BYTE PTR [r9+rax*1],r8b
 1043e6c:	add    WORD PTR [rcx+0x60],si
 1043e70:	xor    r9d,r9d
 1043e73:	mov    r10,rcx
 1043e76:	movsxd rax,r8d
 1043e79:	cmp    edx,r9d
 1043e7c:	jne    0x1043e88
 1043e7e:	add    WORD PTR [rcx+rax*4+0xf0],si
 1043e86:	jmp    0x1043ee4
 1043e88:	movzx  ecx,BYTE PTR [rax+rcx*1+0x1bbd]
 1043e90:	sub    edx,esi
 1043e92:	add    WORD PTR [r10+rcx*4+0x4f4],si
 1043e9b:	cmp    edx,0x100
 1043ea1:	movsxd rax,edx
 1043ea4:	jge    0x1043eb1
 1043ea6:	movzx  ecx,BYTE PTR [rax+r10*1+0x1cbd]
 1043eaf:	jmp    0x1043ebe
 1043eb1:	sar    rax,0x7
 1043eb5:	movzx  ecx,BYTE PTR [rax+r10*1+0x1dbd]
 1043ebe:	movsxd rax,ecx
 1043ec1:	add    WORD PTR [r10+rax*4+0x9e4],si
 1043eca:	movzx  ecx,WORD PTR [r10+0x62]
 1043ecf:	mov    rax,QWORD PTR [r10+0x10]
 1043ed3:	mov    WORD PTR [rax+rcx*2],dx
 1043ed7:	mov    al,BYTE PTR [r10+0x67]
 1043edb:	add    WORD PTR [r10+0x62],si
 1043ee0:	or     BYTE PTR [r10+0x66],al
 1043ee4:	shl    BYTE PTR [r10+0x67],1
 1043ee8:	test   BYTE PTR [r10+0x60],0x7
 1043eed:	jne    0x1043f0d
 1043eef:	movzx  ecx,WORD PTR [r10+0x64]
 1043ef4:	mov    al,BYTE PTR [r10+0x66]
 1043ef8:	mov    BYTE PTR [rcx+r10*1+0x1fac],al
 1043f00:	add    WORD PTR [r10+0x64],si
 1043f05:	mov    BYTE PTR [r10+0x66],r9b
 1043f09:	mov    BYTE PTR [r10+0x67],sil
 1043f0d:	movzx  r8d,WORD PTR [r10+0x60]
 1043f12:	mov    eax,0xfff
 1043f17:	test   ax,r8w
 1043f1b:	jne    0x1043f80
 1043f1d:	movzx  r11d,WORD PTR [r10+0x54]
 1043f22:	movzx  edx,r8w
 1043f26:	lea    rbx,[rip+0xfffffffffffc6343]        # 0x100a270
 1043f2d:	shl    edx,0x3
 1043f30:	sub    r11d,DWORD PTR [r10+0x4c]
 1043f34:	lea    rdi,[r10+0x9e4]
 1043f3b:	movzx  eax,WORD PTR [rdi]
 1043f3e:	mov    ecx,DWORD PTR [rbx]
 1043f40:	add    rbx,0x4
 1043f44:	add    ecx,0x5
 1043f47:	add    rdi,0x4
 1043f4b:	imul   ecx,eax
 1043f4e:	lea    rax,[rip+0xfffffffffffc6393]        # 0x100a2e8
 1043f55:	add    edx,ecx
 1043f57:	cmp    rbx,rax
 1043f5a:	jl     0x1043f3b
 1043f5c:	movzx  ecx,r8w
 1043f60:	shr    cx,1
 1043f63:	cmp    WORD PTR [r10+0x62],cx
 1043f68:	jae    0x1043f80
 1043f6a:	shr    edx,0x2
 1043f6d:	and    r11d,0xfffffffe
 1043f71:	and    edx,0x3ffffffe
 1043f77:	cmp    edx,r11d
 1043f7a:	jae    0x1043f80
 1043f7c:	mov    eax,esi
 1043f7e:	jmp    0x1043f9d
 1043f80:	mov    eax,0x7fff
 1043f85:	cmp    r8w,ax
 1043f89:	je     0x1043f97
 1043f8b:	mov    eax,0x8000
 1043f90:	cmp    WORD PTR [r10+0x62],ax
 1043f95:	jne    0x1043f9a
 1043f97:	mov    r9d,esi
 1043f9a:	mov    eax,r9d
 1043f9d:	mov    rbx,QWORD PTR [rsp+0x8]
 1043fa2:	mov    rsi,QWORD PTR [rsp+0x10]
 1043fa7:	mov    rdi,QWORD PTR [rsp+0x18]
 1043fac:	ret    
 1043fad:	int3   
 1043fae:	int3   
 1043faf:	int3   
 1043fb0:	int3   
 1043fb1:	int3   
 1043fb2:	int3   
 1043fb3:	int3   
 1043fb4:	mov    QWORD PTR [rsp+0x8],rbx
 1043fb9:	mov    QWORD PTR [rsp+0x10],rsi
 1043fbe:	mov    QWORD PTR [rsp+0x18],rdi
 1043fc3:	movzx  edi,WORD PTR [rdx+0x2]
 1043fc7:	or     ebx,0xffffffff
 1043fca:	xor    r11d,r11d
 1043fcd:	mov    r9,rcx
 1043fd0:	lea    eax,[rbx+0x8]
 1043fd3:	lea    r10d,[rbx+0x5]
 1043fd7:	test   edi,edi
 1043fd9:	jne    0x1043fe4
 1043fdb:	mov    eax,0x8a
 1043fe0:	lea    r10d,[rbx+0x4]
 1043fe4:	movsxd rcx,r8d
 1043fe7:	mov    r8d,0xffff
 1043fed:	mov    WORD PTR [rdx+rcx*4+0x6],r8w
 1043ff3:	test   rcx,rcx
 1043ff6:	js     0x1044095
 1043ffc:	add    rdx,0x6
 1044000:	lea    r8,[rcx+0x1]
 1044004:	mov    esi,0x1
 1044009:	add    r11d,esi
 104400c:	movsxd rcx,edi
 104400f:	movzx  edi,WORD PTR [rdx]
 1044012:	cmp    r11d,eax
 1044015:	jge    0x104401b
 1044017:	cmp    ecx,edi
 1044019:	je     0x1044088
 104401b:	cmp    r11d,r10d
 104401e:	jge    0x104402b
 1044020:	add    WORD PTR [r9+rcx*4+0xfd0],r11w
 1044029:	jmp    0x104405e
 104402b:	test   ecx,ecx
 104402d:	je     0x1044046
 104402f:	cmp    ecx,ebx
 1044031:	je     0x104403c
 1044033:	add    WORD PTR [r9+rcx*4+0xfd0],si
 104403c:	add    WORD PTR [r9+0x1010],si
 1044044:	jmp    0x104405e
 1044046:	cmp    r11d,0xa
 104404a:	jg     0x1044056
 104404c:	add    WORD PTR [r9+0x1014],si
 1044054:	jmp    0x104405e
 1044056:	add    WORD PTR [r9+0x1018],si
 104405e:	xor    r11d,r11d
 1044061:	mov    ebx,ecx
 1044063:	test   edi,edi
 1044065:	jne    0x104406e
 1044067:	mov    eax,0x8a
 104406c:	jmp    0x1044077
 104406e:	cmp    ecx,edi
 1044070:	jne    0x104407f
 1044072:	mov    eax,0x6
 1044077:	mov    r10d,0x3
 104407d:	jmp    0x1044088
 104407f:	mov    eax,0x7
 1044084:	lea    r10d,[rax-0x3]
 1044088:	add    rdx,0x4
 104408c:	sub    r8,rsi
 104408f:	jne    0x1044009
 1044095:	mov    rbx,QWORD PTR [rsp+0x8]
 104409a:	mov    rsi,QWORD PTR [rsp+0x10]
 104409f:	mov    rdi,QWORD PTR [rsp+0x18]
 10440a4:	ret    
 10440a5:	int3   
 10440a6:	int3   
 10440a7:	int3   
 10440a8:	int3   
 10440a9:	int3   
 10440aa:	int3   
 10440ab:	int3   
 10440ac:	rex push rbx
 10440ae:	push   rbp
 10440af:	push   rsi
 10440b0:	push   rdi
 10440b1:	push   r12
 10440b3:	push   r13
 10440b5:	push   r14
 10440b7:	push   r15
 10440b9:	movsxd r11,DWORD PTR [rdx+0x18]
 10440bd:	mov    ebx,DWORD PTR [rdx+0x24]
 10440c0:	mov    r12,QWORD PTR [rdx]
 10440c3:	mov    r15,QWORD PTR [rdx+0x10]
 10440c7:	movsxd r9,DWORD PTR [rdx+0x20]
 10440cb:	mov    r14,QWORD PTR [rdx+0x8]
 10440cf:	xor    esi,esi
 10440d1:	mov    r8,rcx
 10440d4:	lea    rdi,[rcx+0x106c]
 10440db:	movzx  eax,si
 10440de:	lea    ecx,[rsi+0x10]
 10440e1:	lea    ebp,[rsi+0x1]
 10440e4:	rep stos WORD PTR es:[rdi],ax
 10440e7:	movsxd rax,DWORD PTR [r8+0x5c]
 10440eb:	mov    edx,0x23d
 10440f0:	movsxd rcx,DWORD PTR [r8+rax*4+0x108c]
 10440f8:	mov    DWORD PTR [rsp+0x48],ebx
 10440fc:	mov    r10d,esi
 10440ff:	mov    WORD PTR [r12+rcx*4+0x2],si
 1044105:	mov    r13d,DWORD PTR [r8+0x5c]
 1044109:	mov    QWORD PTR [rsp+0x60],r11
 104410e:	add    r13d,ebp
 1044111:	movsxd rax,r13d
 1044114:	cmp    rax,rdx
 1044117:	jge    0x10441b9
 104411d:	sub    rdx,rax
 1044120:	lea    rbx,[r8+rax*4+0x108c]
 1044128:	add    r13d,edx
 104412b:	mov    DWORD PTR [rsp+0x58],r13d
 1044130:	mov    r13,r11
 1044133:	movsxd rbp,DWORD PTR [rbx]
 1044136:	mov    edi,0x1
 104413b:	movzx  eax,WORD PTR [r12+rbp*4+0x2]
 1044141:	mov    r11,rbp
 1044144:	movzx  ecx,WORD PTR [r12+rax*4+0x2]
 104414a:	add    ecx,edi
 104414c:	cmp    ecx,r9d
 104414f:	jle    0x1044157
 1044151:	mov    ecx,r9d
 1044154:	add    r10d,edi
 1044157:	cmp    ebp,DWORD PTR [rsp+0x48]
 104415b:	mov    WORD PTR [r12+rbp*4+0x2],cx
 1044161:	jg     0x10441a2
 1044163:	movsxd rax,ecx
 1044166:	add    WORD PTR [r8+rax*2+0x106c],di
 104416f:	xor    edi,edi
 1044171:	cmp    ebp,r13d
 1044174:	jl     0x104417d
 1044176:	sub    r11,r13
 1044179:	mov    edi,DWORD PTR [r15+r11*4]
 104417d:	movzx  r11d,WORD PTR [r12+rbp*4]
 1044182:	lea    eax,[rdi+rcx*1]
 1044185:	imul   eax,r11d
 1044189:	add    DWORD PTR [r8+0x68],eax
 104418d:	test   r14,r14
 1044190:	je     0x10441a2
 1044192:	movzx  eax,WORD PTR [r14+rbp*4+0x2]
 1044198:	add    eax,edi
 104419a:	imul   eax,r11d
 104419e:	add    DWORD PTR [r8+0x6c],eax
 10441a2:	mov    ebp,0x1
 10441a7:	add    rbx,0x4
 10441ab:	sub    rdx,rbp
 10441ae:	jne    0x1044133
 10441b0:	mov    r13d,DWORD PTR [rsp+0x58]
 10441b5:	mov    ebx,DWORD PTR [rsp+0x48]
 10441b9:	cmp    r10d,esi
 10441bc:	je     0x1044274
 10441c2:	lea    edi,[r9-0x1]
 10441c6:	mov    r14d,0xffff
 10441cc:	mov    r11d,0x2
 10441d2:	movsxd rcx,edi
 10441d5:	cmp    WORD PTR [r8+rcx*2+0x106c],si
 10441de:	jne    0x10441f0
 10441e0:	sub    ecx,ebp
 10441e2:	movsxd rax,ecx
 10441e5:	cmp    WORD PTR [r8+rax*2+0x106c],si
 10441ee:	je     0x10441e0
 10441f0:	movsxd rax,ecx
 10441f3:	sub    r10d,r11d
 10441f6:	add    WORD PTR [r8+rax*2+0x106c],r14w
 10441ff:	add    WORD PTR [r8+rax*2+0x106e],r11w
 1044208:	add    WORD PTR [r8+r9*2+0x106c],r14w
 1044211:	cmp    r10d,esi
 1044214:	jg     0x10441d2
 1044216:	movsxd r10,r13d
 1044219:	cmp    r9d,esi
 104421c:	je     0x1044274
 104421e:	movsxd rax,r9d
 1044221:	movzx  edx,WORD PTR [r8+rax*2+0x106c]
 104422a:	cmp    edx,esi
 104422c:	je     0x104426f
 104422e:	lea    rdi,[r8+r10*4+0x108c]
 1044236:	sub    rdi,0x4
 104423a:	sub    r10,rbp
 104423d:	cmp    DWORD PTR [rdi],ebx
 104423f:	jg     0x104426b
 1044241:	movsxd r11,DWORD PTR [rdi]
 1044244:	cmp    WORD PTR [r12+r11*4+0x2],r9w
 104424a:	je     0x1044269
 104424c:	movzx  eax,WORD PTR [r12+r11*4+0x2]
 1044252:	mov    ecx,r9d
 1044255:	sub    ecx,eax
 1044257:	movzx  eax,WORD PTR [r12+r11*4]
 104425c:	imul   ecx,eax
 104425f:	add    DWORD PTR [r8+0x68],ecx
 1044263:	mov    WORD PTR [r12+r11*4+0x2],r9w
 1044269:	sub    edx,ebp
 104426b:	cmp    edx,esi
 104426d:	jne    0x1044236
 104426f:	sub    r9d,ebp
 1044272:	jne    0x104421e
 1044274:	pop    r15
 1044276:	pop    r14
 1044278:	pop    r13
 104427a:	pop    r12
 104427c:	pop    rdi
 104427d:	pop    rsi
 104427e:	pop    rbp
 104427f:	pop    rbx
 1044280:	ret    
 1044281:	int3   
 1044282:	int3   
 1044283:	int3   
 1044284:	int3   
 1044285:	int3   
 1044286:	int3   
 1044287:	int3   
 1044288:	mov    QWORD PTR [rsp+0x8],rbx
 104428d:	mov    QWORD PTR [rsp+0x10],rdi
 1044292:	movsxd rax,r8d
 1044295:	mov    rbx,rdx
 1044298:	lea    r9d,[r8+r8*1]
 104429c:	movsxd r11,DWORD PTR [rcx+rax*4+0x108c]
 10442a4:	jmp    0x1044318
 10442a6:	jge    0x10442dc
 10442a8:	movsxd rax,r9d
 10442ab:	movsxd rdx,DWORD PTR [rcx+rax*4+0x1090]
 10442b3:	movsxd r10,DWORD PTR [rcx+rax*4+0x108c]
 10442bb:	movzx  eax,WORD PTR [rbx+r10*4]
 10442c0:	cmp    WORD PTR [rbx+rdx*4],ax
 10442c4:	jb     0x10442d9
 10442c6:	jne    0x10442dc
 10442c8:	mov    al,BYTE PTR [r10+rcx*1+0x1980]
 10442d0:	cmp    BYTE PTR [rdx+rcx*1+0x1980],al
 10442d7:	ja     0x10442dc
 10442d9:	inc    r9d
 10442dc:	movsxd rax,r9d
 10442df:	movsxd r10,DWORD PTR [rcx+rax*4+0x108c]
 10442e7:	movzx  eax,WORD PTR [rbx+r10*4]
 10442ec:	cmp    WORD PTR [rbx+r11*4],ax
 10442f1:	jb     0x1044320
 10442f3:	jne    0x1044307
 10442f5:	mov    al,BYTE PTR [r10+rcx*1+0x1980]
 10442fd:	cmp    BYTE PTR [r11+rcx*1+0x1980],al
 1044305:	jbe    0x1044320
 1044307:	movsxd rax,r8d
 104430a:	mov    r8d,r9d
 104430d:	add    r9d,r9d
 1044310:	mov    DWORD PTR [rcx+rax*4+0x108c],r10d
 1044318:	mov    eax,DWORD PTR [rcx+0x58]
 104431b:	cmp    r9d,eax
 104431e:	jle    0x10442a6
 1044320:	mov    rbx,QWORD PTR [rsp+0x8]
 1044325:	mov    rdi,QWORD PTR [rsp+0x10]
 104432a:	movsxd rax,r8d
 104432d:	mov    DWORD PTR [rcx+rax*4+0x108c],r11d
 1044335:	ret    
 1044336:	int3   
 1044337:	int3   
 1044338:	int3   
 1044339:	int3   
 104433a:	int3   
 104433b:	int3   
 104433c:	xor    r8d,r8d
 104433f:	lea    rax,[rcx+0xf0]
 1044346:	mov    edx,0x11e
 104434b:	lea    r9d,[r8+0x1]
 104434f:	mov    WORD PTR [rax],r8w
 1044353:	add    rax,0x4
 1044357:	sub    rdx,r9
 104435a:	jne    0x104434f
 104435c:	lea    rax,[rcx+0x9e4]
 1044363:	mov    edx,0x1e
 1044368:	mov    WORD PTR [rax],r8w
 104436c:	add    rax,0x4
 1044370:	sub    rdx,r9
 1044373:	jne    0x1044368
 1044375:	lea    rax,[rcx+0xfd0]
 104437c:	mov    edx,0x13
 1044381:	mov    WORD PTR [rax],r8w
 1044385:	add    rax,0x4
 1044389:	sub    rdx,r9
 104438c:	jne    0x1044381
 104438e:	mov    WORD PTR [rcx+0x4f0],r9w
 1044396:	mov    DWORD PTR [rcx+0x6c],r8d
 104439a:	mov    DWORD PTR [rcx+0x68],r8d
 104439e:	mov    WORD PTR [rcx+0x64],r8w
 10443a3:	mov    WORD PTR [rcx+0x62],r8w
 10443a8:	mov    WORD PTR [rcx+0x60],r8w
 10443ad:	mov    BYTE PTR [rcx+0x66],r8b
 10443b1:	mov    BYTE PTR [rcx+0x67],r9b
 10443b5:	ret    
 10443b6:	int3   
 10443b7:	int3   
 10443b8:	int3   
 10443b9:	int3   
 10443ba:	int3   
 10443bb:	int3   
 10443bc:	xor    r10d,r10d
 10443bf:	cmp    DWORD PTR [rcx+0x48],0x8
 10443c3:	mov    r8,rcx
 10443c6:	jle    0x104442f
 10443c8:	mov    edx,DWORD PTR [rcx+0x1c]
 10443cb:	movzx  ecx,WORD PTR [rcx+0x18]
 10443cf:	lea    r9d,[r10+0x1]
 10443d3:	lea    eax,[rdx-0x2]
 10443d6:	cmp    ecx,eax
 10443d8:	jae    0x10443fc
 10443da:	mov    al,BYTE PTR [r8+0x44]
 10443de:	mov    rdx,rcx
 10443e1:	mov    rcx,QWORD PTR [r8+0x8]
 10443e5:	mov    BYTE PTR [rdx+rcx*1],al
 10443e8:	add    WORD PTR [r8+0x18],r9w
 10443ed:	movzx  edx,WORD PTR [r8+0x18]
 10443f2:	mov    rcx,QWORD PTR [r8+0x8]
 10443f6:	mov    al,BYTE PTR [r8+0x45]
 10443fa:	jmp    0x1044455
 10443fc:	cmp    ecx,edx
 10443fe:	jb     0x1044406
 1044400:	mov    DWORD PTR [r8+0x40],r9d
 1044404:	jmp    0x1044419
 1044406:	mov    al,BYTE PTR [r8+0x44]
 104440a:	mov    rdx,rcx
 104440d:	mov    rcx,QWORD PTR [r8+0x8]
 1044411:	mov    BYTE PTR [rdx+rcx*1],al
 1044414:	add    WORD PTR [r8+0x18],r9w
 1044419:	movzx  eax,WORD PTR [r8+0x18]
 104441e:	cmp    eax,DWORD PTR [r8+0x1c]
 1044422:	jb     0x104442a
 1044424:	mov    DWORD PTR [r8+0x40],r9d
 1044428:	jmp    0x104445d
 104442a:	mov    rdx,rax
 104442d:	jmp    0x10443f2
 104442f:	cmp    DWORD PTR [rcx+0x48],r10d
 1044433:	jle    0x104445d
 1044435:	movzx  eax,WORD PTR [rcx+0x18]
 1044439:	mov    r9d,0x1
 104443f:	cmp    eax,DWORD PTR [rcx+0x1c]
 1044442:	jb     0x104444a
 1044444:	mov    DWORD PTR [rcx+0x40],r9d
 1044448:	jmp    0x104445d
 104444a:	mov    rcx,QWORD PTR [rcx+0x8]
 104444e:	mov    rdx,rax
 1044451:	mov    al,BYTE PTR [r8+0x44]
 1044455:	mov    BYTE PTR [rdx+rcx*1],al
 1044458:	add    WORD PTR [r8+0x18],r9w
 104445d:	mov    WORD PTR [r8+0x44],r10w
 1044462:	mov    DWORD PTR [r8+0x48],r10d
 1044466:	ret    
 1044467:	int3   
 1044468:	int3   
 1044469:	int3   
 104446a:	int3   
 104446b:	int3   
 104446c:	int3   
 104446d:	int3   
 104446e:	int3   
 104446f:	int3   
 1044470:	xor    r10d,r10d
 1044473:	movzx  r8d,r10w
 1044477:	lea    r9d,[r10+0x1]
 104447b:	movzx  eax,cx
 104447e:	sub    edx,r9d
 1044481:	sar    ecx,1
 1044483:	and    ax,r9w
 1044487:	or     r8w,ax
 104448b:	add    r8w,r8w
 104448f:	cmp    edx,r10d
 1044492:	jg     0x104447b
 1044494:	movzx  eax,r8w
 1044498:	shr    eax,1
 104449a:	ret    
 104449b:	int3   
 104449c:	int3   
 104449d:	int3   
 104449e:	int3   
 104449f:	int3   
 10444a0:	int3   
 10444a1:	int3   
 10444a2:	int3   
 10444a3:	int3   
 10444a4:	mov    QWORD PTR [rsp+0x8],rbx
 10444a9:	mov    QWORD PTR [rsp+0x10],rdi
 10444ae:	mov    ebx,0x10
 10444b3:	mov    r9,rcx
 10444b6:	mov    ecx,DWORD PTR [rcx+0x48]
 10444b9:	mov    eax,ebx
 10444bb:	mov    edi,r8d
 10444be:	mov    r10d,edx
 10444c1:	sub    eax,r8d
 10444c4:	cmp    ecx,eax
 10444c6:	jle    0x1044568
 10444cc:	movzx  eax,dx
 10444cf:	mov    edx,DWORD PTR [r9+0x1c]
 10444d3:	lea    r11d,[rbx-0xf]
 10444d7:	shl    ax,cl
 10444da:	movzx  ecx,WORD PTR [r9+0x18]
 10444df:	or     WORD PTR [r9+0x44],ax
 10444e4:	lea    eax,[rdx-0x2]
 10444e7:	cmp    ecx,eax
 10444e9:	jae    0x1044510
 10444eb:	mov    al,BYTE PTR [r9+0x44]
 10444ef:	mov    rdx,rcx
 10444f2:	mov    rcx,QWORD PTR [r9+0x8]
 10444f6:	mov    BYTE PTR [rdx+rcx*1],al
 10444f9:	add    WORD PTR [r9+0x18],r11w
 10444fe:	movzx  edx,WORD PTR [r9+0x18]
 1044503:	mov    rcx,QWORD PTR [r9+0x8]
 1044507:	mov    al,BYTE PTR [r9+0x45]
 104450b:	mov    BYTE PTR [rdx+rcx*1],al
 104450e:	jmp    0x104454d
 1044510:	cmp    ecx,edx
 1044512:	jb     0x104451a
 1044514:	mov    DWORD PTR [r9+0x40],r11d
 1044518:	jmp    0x104452d
 104451a:	mov    al,BYTE PTR [r9+0x44]
 104451e:	mov    rdx,rcx
 1044521:	mov    rcx,QWORD PTR [r9+0x8]
 1044525:	mov    BYTE PTR [rdx+rcx*1],al
 1044528:	add    WORD PTR [r9+0x18],r11w
 104452d:	movzx  eax,WORD PTR [r9+0x18]
 1044532:	cmp    eax,DWORD PTR [r9+0x1c]
 1044536:	jb     0x104453e
 1044538:	mov    DWORD PTR [r9+0x40],r11d
 104453c:	jmp    0x1044552
 104453e:	mov    rdx,QWORD PTR [r9+0x8]
 1044542:	mov    r8,rax
 1044545:	mov    al,BYTE PTR [r9+0x45]
 1044549:	mov    BYTE PTR [r8+rdx*1],al
 104454d:	add    WORD PTR [r9+0x18],r11w
 1044552:	mov    eax,DWORD PTR [r9+0x48]
 1044556:	sub    ebx,eax
 1044558:	mov    cl,bl
 104455a:	lea    eax,[rax+rdi*1-0x10]
 104455e:	sar    r10d,cl
 1044561:	mov    WORD PTR [r9+0x44],r10w
 1044566:	jmp    0x1044575
 1044568:	shl    r10w,cl
 104456c:	lea    eax,[rcx+r8*1]
 1044570:	or     WORD PTR [r9+0x44],r10w
 1044575:	mov    rbx,QWORD PTR [rsp+0x8]
 104457a:	mov    rdi,QWORD PTR [rsp+0x10]
 104457f:	mov    DWORD PTR [r9+0x48],eax
 1044583:	ret    
 1044584:	int3   
 1044585:	int3   
 1044586:	int3   
 1044587:	int3   
 1044588:	int3   
 1044589:	int3   
 104458a:	int3   
 104458b:	int3   
 104458c:	mov    QWORD PTR [rcx],rdx
 104458f:	mov    QWORD PTR [rcx+0x10],r8
 1044593:	test   rdx,rdx
 1044596:	je     0x10445a0
 1044598:	test   r8,r8
 104459b:	je     0x10445a0
 104459d:	xor    eax,eax
 104459f:	ret    
 10445a0:	or     eax,0xffffffff
 10445a3:	ret    
 10445a4:	int3   
 10445a5:	int3   
 10445a6:	int3   
 10445a7:	int3   
 10445a8:	int3   
 10445a9:	int3   
 10445aa:	int3   
 10445ab:	int3   
 10445ac:	rex.W jmp rdx
 10445af:	int3   
 10445b0:	int3   
 10445b1:	int3   
 10445b2:	int3   
 10445b3:	int3   
 10445b4:	int3   
 10445b5:	int3   
 10445b6:	int3   
 10445b7:	int3   
 10445b8:	rex push rbx
 10445ba:	sub    rsp,0x20
 10445be:	mov    rax,rcx
 10445c1:	mov    ecx,0x2fb0
 10445c6:	call   rax
 10445c8:	mov    rbx,rax
 10445cb:	test   rax,rax
 10445ce:	je     0x10446bf
 10445d4:	xor    edx,edx
 10445d6:	mov    r8d,0x2fb0
 10445dc:	mov    rcx,rax
 10445df:	call   0x104026c
 10445e4:	and    DWORD PTR [rbx+0x9c],0x0
 10445eb:	and    DWORD PTR [rbx+0xb8],0x0
 10445f2:	and    DWORD PTR [rbx+0xc4],0x0
 10445f9:	and    QWORD PTR [rbx+0xd0],0x0
 1044601:	and    DWORD PTR [rbx+0xe0],0x0
 1044608:	and    DWORD PTR [rbx+0xec],0x0
 104460f:	lea    rax,[rip+0xfffffffffffc5bda]        # 0x100a1f0
 1044616:	lea    rcx,[rbx+0xad8]
 104461d:	mov    QWORD PTR [rbx+0x88],rax
 1044624:	lea    rax,[rbx+0x9e4]
 104462b:	lea    r11,[rbx+0xf0]
 1044632:	mov    QWORD PTR [rbx+0xa0],rax
 1044639:	lea    rax,[rbx+0xf58]
 1044640:	mov    QWORD PTR [rbx+0x80],rcx
 1044647:	mov    QWORD PTR [rbx+0xa8],rax
 104464e:	lea    rax,[rip+0xfffffffffffc5c1b]        # 0x100a270
 1044655:	mov    ecx,0xf
 104465a:	mov    QWORD PTR [rbx+0xb0],rax
 1044661:	lea    rax,[rbx+0xfd0]
 1044668:	mov    QWORD PTR [rbx+0x78],r11
 104466c:	mov    QWORD PTR [rbx+0xc8],rax
 1044673:	lea    rax,[rip+0xfffffffffffc5c76]        # 0x100a2f0
 104467a:	mov    DWORD PTR [rbx+0x90],0x101
 1044684:	mov    DWORD PTR [rbx+0x94],0x11e
 104468e:	mov    DWORD PTR [rbx+0x98],ecx
 1044694:	mov    DWORD PTR [rbx+0xbc],0x1e
 104469e:	mov    QWORD PTR [rbx+0xd8],rax
 10446a5:	mov    DWORD PTR [rbx+0xc0],ecx
 10446ab:	mov    DWORD PTR [rbx+0xe4],0x13
 10446b5:	mov    DWORD PTR [rbx+0xe8],0x7
 10446bf:	mov    rax,rbx
 10446c2:	add    rsp,0x20
 10446c6:	pop    rbx
 10446c7:	ret    
 10446c8:	int3   
 10446c9:	int3   
 10446ca:	int3   
 10446cb:	int3   
 10446cc:	int3   
 10446cd:	int3   
 10446ce:	int3   
 10446cf:	int3   
 10446d0:	mov    rax,rsp
 10446d3:	mov    QWORD PTR [rax+0x8],rbx
 10446d7:	mov    QWORD PTR [rax+0x10],rbp
 10446db:	mov    QWORD PTR [rax+0x20],rsi
 10446df:	mov    QWORD PTR [rax+0x18],r8
 10446e3:	push   rdi
 10446e4:	push   r12
 10446e6:	push   r13
 10446e8:	push   r14
 10446ea:	push   r15
 10446ec:	sub    rsp,0x20
 10446f0:	xor    eax,eax
 10446f2:	mov    rsi,rdx
 10446f5:	mov    rbx,rcx
 10446f8:	movzx  ebp,ax
 10446fb:	movzx  r14d,ax
 10446ff:	movzx  r13d,ax
 1044703:	mov    r12b,al
 1044706:	cmp    WORD PTR [rcx+0x60],ax
 104470a:	je     0x1044817
 1044710:	test   bpl,0x7
 1044714:	jne    0x1044726
 1044716:	movzx  eax,r13w
 104471a:	inc    r13w
 104471e:	mov    r12b,BYTE PTR [rax+rbx*1+0x1fac]
 1044726:	mov    rax,QWORD PTR [rbx]
 1044729:	movzx  ecx,bp
 104472c:	inc    bp
 104472f:	movzx  edi,BYTE PTR [rcx+rax*1]
 1044733:	test   r12b,0x1
 1044737:	jne    0x104474b
 1044739:	movsxd rax,edi
 104473c:	movzx  r8d,WORD PTR [rsi+rax*4+0x2]
 1044742:	movzx  edx,WORD PTR [rsi+rax*4]
 1044746:	jmp    0x1044802
 104474b:	movzx  ecx,BYTE PTR [rdi+rbx*1+0x1bbd]
 1044753:	mov    r15,rcx
 1044756:	movzx  r8d,WORD PTR [rsi+rcx*4+0x406]
 104475f:	movzx  edx,WORD PTR [rsi+rcx*4+0x404]
 1044767:	mov    rcx,rbx
 104476a:	call   0x10444a4
 104476f:	lea    rax,[rip+0xfffffffffffbb88a]        # 0x1000000
 1044776:	mov    r8d,DWORD PTR [rax+r15*4+0xa1f0]
 104477e:	test   r8d,r8d
 1044781:	je     0x1044795
 1044783:	sub    edi,DWORD PTR [rbx+r15*4+0x1ec0]
 104478b:	mov    rcx,rbx
 104478e:	mov    edx,edi
 1044790:	call   0x10444a4
 1044795:	mov    rax,QWORD PTR [rbx+0x10]
 1044799:	movzx  ecx,r14w
 104479d:	inc    r14w
 10447a1:	movzx  edi,WORD PTR [rax+rcx*2]
 10447a5:	cmp    edi,0x100
 10447ab:	jge    0x10447ba
 10447ad:	movsxd rax,edi
 10447b0:	movzx  ecx,BYTE PTR [rax+rbx*1+0x1cbd]
 10447b8:	jmp    0x10447c9
 10447ba:	mov    rax,rdi
 10447bd:	sar    rax,0x7
 10447c1:	movzx  ecx,BYTE PTR [rax+rbx*1+0x1dbd]
 10447c9:	mov    rax,QWORD PTR [rsp+0x60]
 10447ce:	movsxd r15,ecx
 10447d1:	mov    rcx,rbx
 10447d4:	movzx  r8d,WORD PTR [rax+r15*4+0x2]
 10447da:	movzx  edx,WORD PTR [rax+r15*4]
 10447df:	call   0x10444a4
 10447e4:	lea    rax,[rip+0xfffffffffffbb815]        # 0x1000000
 10447eb:	mov    r8d,DWORD PTR [rax+r15*4+0xa270]
 10447f3:	test   r8d,r8d
 10447f6:	je     0x104480a
 10447f8:	sub    edi,DWORD PTR [rbx+r15*4+0x1f34]
 1044800:	mov    edx,edi
 1044802:	mov    rcx,rbx
 1044805:	call   0x10444a4
 104480a:	shr    r12b,1
 104480d:	cmp    bp,WORD PTR [rbx+0x60]
 1044811:	jb     0x1044710
 1044817:	movzx  r8d,WORD PTR [rsi+0x402]
 104481f:	movzx  edx,WORD PTR [rsi+0x400]
 1044826:	mov    rcx,rbx
 1044829:	mov    rbx,QWORD PTR [rsp+0x50]
 104482e:	mov    rbp,QWORD PTR [rsp+0x58]
 1044833:	mov    rsi,QWORD PTR [rsp+0x68]
 1044838:	add    rsp,0x20
 104483c:	pop    r15
 104483e:	pop    r14
 1044840:	pop    r13
 1044842:	pop    r12
 1044844:	pop    rdi
 1044845:	jmp    0x10444a4
 104484a:	int3   
 104484b:	int3   
 104484c:	int3   
 104484d:	int3   
 104484e:	int3   
 104484f:	int3   
 1044850:	mov    rax,rsp
 1044853:	mov    QWORD PTR [rax+0x8],rbx
 1044857:	mov    QWORD PTR [rax+0x10],rbp
 104485b:	mov    QWORD PTR [rax+0x18],rsi
 104485f:	mov    QWORD PTR [rax+0x20],rdi
 1044863:	push   r12
 1044865:	push   r13
 1044867:	push   r14
 1044869:	sub    rsp,0x20
 104486d:	movzx  r12d,WORD PTR [rdx+0x2]
 1044872:	or     r10d,0xffffffff
 1044876:	xor    ebx,ebx
 1044878:	mov    rbp,rcx
 104487b:	lea    eax,[rbx+0x7]
 104487e:	lea    r9d,[r10+0x5]
 1044882:	test   r12d,r12d
 1044885:	jne    0x1044890
 1044887:	mov    eax,0x8a
 104488c:	lea    r9d,[r10+0x4]
 1044890:	movsxd rcx,r8d
 1044893:	test   r8d,r8d
 1044896:	js     0x10449af
 104489c:	lea    r13,[rdx+0x6]
 10448a0:	lea    r14,[rcx+0x1]
 10448a4:	inc    ebx
 10448a6:	movsxd rdi,r12d
 10448a9:	movzx  r12d,WORD PTR [r13+0x0]
 10448ae:	cmp    ebx,eax
 10448b0:	jge    0x10448bb
 10448b2:	cmp    edi,r12d
 10448b5:	je     0x10449a1
 10448bb:	cmp    ebx,r9d
 10448be:	jge    0x10448e3
 10448c0:	movzx  r8d,WORD PTR [rbp+rdi*4+0xfd2]
 10448c9:	movzx  edx,WORD PTR [rbp+rdi*4+0xfd0]
 10448d1:	mov    rcx,rbp
 10448d4:	call   0x10444a4
 10448d9:	sub    ebx,0x1
 10448dc:	jne    0x10448c0
 10448de:	jmp    0x1044975
 10448e3:	test   edi,edi
 10448e5:	je     0x1044929
 10448e7:	cmp    edi,r10d
 10448ea:	je     0x1044907
 10448ec:	movzx  r8d,WORD PTR [rbp+rdi*4+0xfd2]
 10448f5:	movzx  edx,WORD PTR [rbp+rdi*4+0xfd0]
 10448fd:	mov    rcx,rbp
 1044900:	call   0x10444a4
 1044905:	dec    ebx
 1044907:	movzx  r8d,WORD PTR [rbp+0x1012]
 104490f:	movzx  edx,WORD PTR [rbp+0x1010]
 1044916:	mov    rcx,rbp
 1044919:	call   0x10444a4
 104491e:	lea    edx,[rbx-0x3]
 1044921:	mov    r8d,0x2
 1044927:	jmp    0x104496d
 1044929:	cmp    ebx,0xa
 104492c:	mov    rcx,rbp
 104492f:	jg     0x1044950
 1044931:	movzx  r8d,WORD PTR [rbp+0x1016]
 1044939:	movzx  edx,WORD PTR [rbp+0x1014]
 1044940:	call   0x10444a4
 1044945:	lea    edx,[rbx-0x3]
 1044948:	mov    r8d,0x3
 104494e:	jmp    0x104496d
 1044950:	movzx  r8d,WORD PTR [rbp+0x101a]
 1044958:	movzx  edx,WORD PTR [rbp+0x1018]
 104495f:	call   0x10444a4
 1044964:	lea    edx,[rbx-0xb]
 1044967:	mov    r8d,0x7
 104496d:	mov    rcx,rbp
 1044970:	call   0x10444a4
 1044975:	xor    ebx,ebx
 1044977:	mov    r10d,edi
 104497a:	test   r12d,r12d
 104497d:	jne    0x1044986
 104497f:	mov    eax,0x8a
 1044984:	jmp    0x1044990
 1044986:	cmp    edi,r12d
 1044989:	jne    0x1044998
 104498b:	mov    eax,0x6
 1044990:	mov    r9d,0x3
 1044996:	jmp    0x10449a1
 1044998:	mov    eax,0x7
 104499d:	lea    r9d,[rax-0x3]
 10449a1:	add    r13,0x4
 10449a5:	sub    r14,0x1
 10449a9:	jne    0x10448a4
 10449af:	mov    rbx,QWORD PTR [rsp+0x40]
 10449b4:	mov    rbp,QWORD PTR [rsp+0x48]
 10449b9:	mov    rsi,QWORD PTR [rsp+0x50]
 10449be:	mov    rdi,QWORD PTR [rsp+0x58]
 10449c3:	add    rsp,0x20
 10449c7:	pop    r14
 10449c9:	pop    r13
 10449cb:	pop    r12
 10449cd:	ret    
 10449ce:	int3   
 10449cf:	int3   
 10449d0:	int3   
 10449d1:	int3   
 10449d2:	int3   
 10449d3:	int3   
 10449d4:	mov    QWORD PTR [rsp+0x8],rbx
 10449d9:	mov    QWORD PTR [rsp+0x18],rsi
 10449de:	push   rdi
 10449df:	sub    rsp,0x50
 10449e3:	mov    rax,QWORD PTR [rip+0x1ee86]        # 0x1063870
 10449ea:	xor    rax,rsp
 10449ed:	mov    QWORD PTR [rsp+0x40],rax
 10449f2:	xor    r11d,r11d
 10449f5:	mov    rdi,rdx
 10449f8:	add    rcx,0x106c
 10449ff:	lea    esi,[r11+0x1]
 1044a03:	movzx  r9d,r11w
 1044a07:	mov    r10,rsi
 1044a0a:	add    r9w,WORD PTR [rcx]
 1044a0e:	add    rcx,0x2
 1044a12:	add    r9w,r9w
 1044a16:	mov    WORD PTR [rsp+r10*2+0x20],r9w
 1044a1c:	add    r10,rsi
 1044a1f:	cmp    r10,0xf
 1044a23:	jle    0x1044a0a
 1044a25:	movsxd rbx,r8d
 1044a28:	cmp    rbx,r11
 1044a2b:	jl     0x1044a5a
 1044a2d:	movzx  edx,WORD PTR [rdi+r11*4+0x2]
 1044a33:	lea    eax,[rdx-0x1]
 1044a36:	cmp    eax,0xe
 1044a39:	ja     0x1044a52
 1044a3b:	movzx  ecx,WORD PTR [rsp+rdx*2+0x20]
 1044a40:	lea    eax,[rsi+rcx*1]
 1044a43:	mov    WORD PTR [rsp+rdx*2+0x20],ax
 1044a48:	call   0x1044470
 1044a4d:	mov    WORD PTR [rdi+r11*4],ax
 1044a52:	add    r11,rsi
 1044a55:	cmp    r11,rbx
 1044a58:	jle    0x1044a2d
 1044a5a:	mov    rcx,QWORD PTR [rsp+0x40]
 1044a5f:	xor    rcx,rsp
 1044a62:	call   0x103ff40
 1044a67:	mov    rbx,QWORD PTR [rsp+0x60]
 1044a6c:	mov    rsi,QWORD PTR [rsp+0x70]
 1044a71:	add    rsp,0x50
 1044a75:	pop    rdi
 1044a76:	ret    
 1044a77:	int3   
 1044a78:	int3   
 1044a79:	int3   
 1044a7a:	int3   
 1044a7b:	int3   
 1044a7c:	int3   
 1044a7d:	int3   
 1044a7e:	int3   
 1044a7f:	int3   
 1044a80:	mov    rax,rsp
 1044a83:	mov    QWORD PTR [rax+0x8],rbx
 1044a87:	mov    QWORD PTR [rax+0x10],rbp
 1044a8b:	mov    QWORD PTR [rax+0x18],rsi
 1044a8f:	mov    QWORD PTR [rax+0x20],rdi
 1044a93:	push   r12
 1044a95:	push   r14
 1044a97:	push   r15
 1044a99:	sub    rsp,0x20
 1044a9d:	xor    esi,esi
 1044a9f:	mov    rbx,rcx
 1044aa2:	mov    DWORD PTR [rcx+0x70],esi
 1044aa5:	cmp    WORD PTR [rcx+0xf5a],si
 1044aac:	jne    0x1044cb9
 1044ab2:	mov    r9d,esi
 1044ab5:	mov    edx,esi
 1044ab7:	mov    r11,rsi
 1044aba:	lea    rdi,[rip+0xfffffffffffc572f]        # 0x100a1f0
 1044ac1:	lea    r8,[rcx+0x1ec0]
 1044ac8:	lea    r12d,[rsi+0x1]
 1044acc:	mov    DWORD PTR [r8],r9d
 1044acf:	mov    ecx,DWORD PTR [rdi]
 1044ad1:	mov    eax,r12d
 1044ad4:	shl    eax,cl
 1044ad6:	mov    r10d,esi
 1044ad9:	cmp    eax,esi
 1044adb:	jle    0x1044afa
 1044add:	mov    BYTE PTR [rbx+r11*1+0x1bbd],dl
 1044ae5:	mov    ecx,DWORD PTR [rdi]
 1044ae7:	mov    eax,r12d
 1044aea:	add    r10d,r12d
 1044aed:	shl    eax,cl
 1044aef:	add    r9d,r12d
 1044af2:	add    r11,r12
 1044af5:	cmp    r10d,eax
 1044af8:	jl     0x1044add
 1044afa:	add    edx,r12d
 1044afd:	add    r8,0x4
 1044b01:	add    rdi,0x4
 1044b05:	cmp    edx,0x1c
 1044b08:	jl     0x1044acc
 1044b0a:	movsxd rax,r9d
 1044b0d:	lea    r14,[rip+0xfffffffffffc575c]        # 0x100a270
 1044b14:	mov    r8d,esi
 1044b17:	mov    BYTE PTR [rax+rbx*1+0x1bbc],dl
 1044b1e:	mov    edi,esi
 1044b20:	mov    r11,rsi
 1044b23:	mov    rdx,r14
 1044b26:	lea    r9,[rbx+0x1f34]
 1044b2d:	mov    DWORD PTR [r9],r8d
 1044b30:	mov    ecx,DWORD PTR [rdx]
 1044b32:	mov    eax,r12d
 1044b35:	shl    eax,cl
 1044b37:	mov    r10d,esi
 1044b3a:	cmp    eax,esi
 1044b3c:	jle    0x1044b5b
 1044b3e:	mov    BYTE PTR [rbx+r11*1+0x1cbd],dil
 1044b46:	mov    ecx,DWORD PTR [rdx]
 1044b48:	mov    eax,r12d
 1044b4b:	add    r10d,r12d
 1044b4e:	shl    eax,cl
 1044b50:	add    r8d,r12d
 1044b53:	add    r11,r12
 1044b56:	cmp    r10d,eax
 1044b59:	jl     0x1044b3e
 1044b5b:	add    edi,r12d
 1044b5e:	add    r9,0x4
 1044b62:	add    rdx,0x4
 1044b66:	cmp    edi,0x10
 1044b69:	jl     0x1044b2d
 1044b6b:	sar    r8d,0x7
 1044b6f:	cmp    edi,0x1e
 1044b72:	mov    r15d,0x7
 1044b78:	movsxd rbp,r8d
 1044b7b:	jge    0x1044bd8
 1044b7d:	movsxd rax,edi
 1044b80:	lea    r9,[r14+rax*4]
 1044b84:	lea    r10,[rbx+rax*4+0x1f34]
 1044b8c:	mov    eax,r8d
 1044b8f:	mov    edx,r12d
 1044b92:	mov    r11d,esi
 1044b95:	shl    eax,0x7
 1044b98:	mov    DWORD PTR [r10],eax
 1044b9b:	mov    ecx,DWORD PTR [r9]
 1044b9e:	sub    ecx,r15d
 1044ba1:	shl    edx,cl
 1044ba3:	cmp    edx,esi
 1044ba5:	jle    0x1044bc8
 1044ba7:	mov    BYTE PTR [rbx+rbp*1+0x1dbd],dil
 1044baf:	mov    ecx,DWORD PTR [r9]
 1044bb2:	mov    edx,r12d
 1044bb5:	sub    ecx,r15d
 1044bb8:	add    r11d,r12d
 1044bbb:	add    r8d,r12d
 1044bbe:	shl    edx,cl
 1044bc0:	add    rbp,r12
 1044bc3:	cmp    r11d,edx
 1044bc6:	jl     0x1044ba7
 1044bc8:	add    edi,r12d
 1044bcb:	add    r10,0x4
 1044bcf:	add    r9,0x4
 1044bd3:	cmp    edi,0x1e
 1044bd6:	jl     0x1044b8c
 1044bd8:	movzx  eax,si
 1044bdb:	lea    rdi,[rbx+0x106c]
 1044be2:	mov    ecx,0x10
 1044be7:	rep stos WORD PTR es:[rdi],ax
 1044bea:	lea    rax,[rbx+0xada]
 1044bf1:	mov    ecx,0x90
 1044bf6:	mov    edi,0x8
 1044bfb:	mov    WORD PTR [rax],di
 1044bfe:	add    WORD PTR [rbx+0x107c],r12w
 1044c06:	add    rax,0x4
 1044c0a:	sub    rcx,r12
 1044c0d:	jne    0x1044bfb
 1044c0f:	lea    rax,[rbx+0xd1a]
 1044c16:	mov    ecx,0x70
 1044c1b:	mov    edx,0x9
 1044c20:	mov    WORD PTR [rax],dx
 1044c23:	add    WORD PTR [rbx+0x107e],r12w
 1044c2b:	add    rax,0x4
 1044c2f:	sub    rcx,r12
 1044c32:	jne    0x1044c1b
 1044c34:	lea    rax,[rbx+0xeda]
 1044c3b:	lea    ecx,[rdx+0xf]
 1044c3e:	mov    WORD PTR [rax],r15w
 1044c42:	add    WORD PTR [rbx+0x107a],r12w
 1044c4a:	add    rax,0x4
 1044c4e:	sub    rcx,r12
 1044c51:	jne    0x1044c3e
 1044c53:	lea    rax,[rbx+0xf3a]
 1044c5a:	mov    rcx,rdi
 1044c5d:	mov    WORD PTR [rax],di
 1044c60:	add    WORD PTR [rbx+0x107c],r12w
 1044c68:	add    rax,0x4
 1044c6c:	sub    rcx,r12
 1044c6f:	jne    0x1044c5d
 1044c71:	lea    rdx,[rbx+0xad8]
 1044c78:	mov    r8d,0x11f
 1044c7e:	mov    rcx,rbx
 1044c81:	call   0x10449d4
 1044c86:	lea    rdi,[rbx+0xf58]
 1044c8d:	mov    r11d,0x5
 1044c93:	mov    edx,r11d
 1044c96:	mov    ecx,esi
 1044c98:	mov    WORD PTR [rdi+0x2],r11w
 1044c9d:	call   0x1044470
 1044ca2:	add    esi,r12d
 1044ca5:	mov    WORD PTR [rdi],ax
 1044ca8:	add    rdi,0x4
 1044cac:	cmp    esi,0x1e
 1044caf:	jl     0x1044c93
 1044cb1:	mov    rcx,rbx
 1044cb4:	call   0x104433c
 1044cb9:	mov    rbx,QWORD PTR [rsp+0x40]
 1044cbe:	mov    rbp,QWORD PTR [rsp+0x48]
 1044cc3:	mov    rsi,QWORD PTR [rsp+0x50]
 1044cc8:	mov    rdi,QWORD PTR [rsp+0x58]
 1044ccd:	add    rsp,0x20
 1044cd1:	pop    r15
 1044cd3:	pop    r14
 1044cd5:	pop    r12
 1044cd7:	ret    
 1044cd8:	int3   
 1044cd9:	int3   
 1044cda:	int3   
 1044cdb:	int3   
 1044cdc:	int3   
 1044cdd:	int3   
 1044cde:	int3   
 1044cdf:	int3   
 1044ce0:	mov    QWORD PTR [rsp+0x8],rbx
 1044ce5:	mov    QWORD PTR [rsp+0x10],rsi
 1044cea:	push   rdi
 1044ceb:	sub    rsp,0x20
 1044cef:	mov    r11d,r9d
 1044cf2:	movzx  edi,r8w
 1044cf6:	mov    rsi,rdx
 1044cf9:	mov    rbx,rcx
 1044cfc:	call   0x10443bc
 1044d01:	xor    r9d,r9d
 1044d04:	mov    r10d,0x1
 1044d0a:	cmp    r11d,r9d
 1044d0d:	je     0x1044e21
 1044d13:	mov    r8d,DWORD PTR [rbx+0x1c]
 1044d17:	movzx  ecx,WORD PTR [rbx+0x18]
 1044d1b:	lea    eax,[r8-0x2]
 1044d1f:	cmp    ecx,eax
 1044d21:	jae    0x1044d44
 1044d23:	mov    rax,QWORD PTR [rbx+0x8]
 1044d27:	mov    BYTE PTR [rcx+rax*1],dil
 1044d2b:	add    WORD PTR [rbx+0x18],r10w
 1044d30:	movzx  edx,WORD PTR [rbx+0x18]
 1044d34:	mov    rax,QWORD PTR [rbx+0x8]
 1044d38:	movzx  ecx,di
 1044d3b:	shr    cx,0x8
 1044d3f:	mov    BYTE PTR [rdx+rax*1],cl
 1044d42:	jmp    0x1044d7c
 1044d44:	cmp    ecx,r8d
 1044d47:	jb     0x1044d4f
 1044d49:	mov    DWORD PTR [rbx+0x40],r10d
 1044d4d:	jmp    0x1044d5c
 1044d4f:	mov    rax,QWORD PTR [rbx+0x8]
 1044d53:	mov    BYTE PTR [rcx+rax*1],dil
 1044d57:	add    WORD PTR [rbx+0x18],r10w
 1044d5c:	movzx  eax,WORD PTR [rbx+0x18]
 1044d60:	cmp    eax,DWORD PTR [rbx+0x1c]
 1044d63:	jb     0x1044d6b
 1044d65:	mov    DWORD PTR [rbx+0x40],r10d
 1044d69:	jmp    0x1044d81
 1044d6b:	mov    rcx,rax
 1044d6e:	mov    rax,QWORD PTR [rbx+0x8]
 1044d72:	movzx  edx,di
 1044d75:	shr    dx,0x8
 1044d79:	mov    BYTE PTR [rcx+rax*1],dl
 1044d7c:	add    WORD PTR [rbx+0x18],r10w
 1044d81:	mov    edx,DWORD PTR [rbx+0x1c]
 1044d84:	movzx  ecx,WORD PTR [rbx+0x18]
 1044d88:	lea    eax,[rdx-0x2]
 1044d8b:	cmp    ecx,eax
 1044d8d:	jae    0x1044db7
 1044d8f:	mov    rax,QWORD PTR [rbx+0x8]
 1044d93:	mov    dl,dil
 1044d96:	not    dl
 1044d98:	mov    BYTE PTR [rcx+rax*1],dl
 1044d9b:	add    WORD PTR [rbx+0x18],r10w
 1044da0:	movzx  edx,WORD PTR [rbx+0x18]
 1044da4:	mov    rax,QWORD PTR [rbx+0x8]
 1044da8:	movzx  ecx,di
 1044dab:	not    cx
 1044dae:	shr    cx,0x8
 1044db2:	mov    BYTE PTR [rdx+rax*1],cl
 1044db5:	jmp    0x1044def
 1044db7:	cmp    ecx,edx
 1044db9:	jb     0x1044dc1
 1044dbb:	mov    DWORD PTR [rbx+0x40],r10d
 1044dbf:	jmp    0x1044dd2
 1044dc1:	mov    rax,QWORD PTR [rbx+0x8]
 1044dc5:	mov    dl,dil
 1044dc8:	not    dl
 1044dca:	mov    BYTE PTR [rcx+rax*1],dl
 1044dcd:	add    WORD PTR [rbx+0x18],r10w
 1044dd2:	movzx  eax,WORD PTR [rbx+0x18]
 1044dd6:	cmp    eax,DWORD PTR [rbx+0x1c]
 1044dd9:	jae    0x1044e07
 1044ddb:	mov    rcx,rax
 1044dde:	mov    rax,QWORD PTR [rbx+0x8]
 1044de2:	movzx  edx,di
 1044de5:	not    dx
 1044de8:	shr    dx,0x8
 1044dec:	mov    BYTE PTR [rcx+rax*1],dl
 1044def:	add    WORD PTR [rbx+0x18],r10w
 1044df4:	jmp    0x1044e21
 1044df6:	mov    eax,0xffff
 1044dfb:	add    di,ax
 1044dfe:	movzx  eax,WORD PTR [rbx+0x18]
 1044e02:	cmp    eax,DWORD PTR [rbx+0x1c]
 1044e05:	jb     0x1044e0d
 1044e07:	mov    DWORD PTR [rbx+0x40],r10d
 1044e0b:	jmp    0x1044e21
 1044e0d:	mov    rcx,QWORD PTR [rbx+0x8]
 1044e11:	mov    rdx,rax
 1044e14:	mov    al,BYTE PTR [rsi]
 1044e16:	mov    BYTE PTR [rdx+rcx*1],al
 1044e19:	add    WORD PTR [rbx+0x18],r10w
 1044e1e:	add    rsi,r10
 1044e21:	cmp    di,r9w
 1044e25:	jne    0x1044df6
 1044e27:	mov    rbx,QWORD PTR [rsp+0x30]
 1044e2c:	mov    rsi,QWORD PTR [rsp+0x38]
 1044e31:	add    rsp,0x20
 1044e35:	pop    rdi
 1044e36:	ret    
 1044e37:	int3   
 1044e38:	int3   
 1044e39:	int3   
 1044e3a:	int3   
 1044e3b:	int3   
 1044e3c:	int3   
 1044e3d:	int3   
 1044e3e:	int3   
 1044e3f:	int3   
 1044e40:	mov    rax,rsp
 1044e43:	mov    QWORD PTR [rax+0x8],rbx
 1044e47:	mov    QWORD PTR [rax+0x10],rbp
 1044e4b:	mov    QWORD PTR [rax+0x18],rsi
 1044e4f:	mov    QWORD PTR [rax+0x20],rdi
 1044e53:	push   r12
 1044e55:	sub    rsp,0x20
 1044e59:	mov    r12d,r8d
 1044e5c:	mov    ebp,edx
 1044e5e:	add    edx,0xfffffeff
 1044e64:	mov    r8d,0x5
 1044e6a:	movsxd rdi,r9d
 1044e6d:	mov    rsi,rcx
 1044e70:	call   0x10444a4
 1044e75:	lea    edx,[r12-0x1]
 1044e7a:	mov    r8d,0x5
 1044e80:	mov    rcx,rsi
 1044e83:	call   0x10444a4
 1044e88:	lea    edx,[rdi-0x4]
 1044e8b:	mov    r8d,0x4
 1044e91:	mov    rcx,rsi
 1044e94:	call   0x10444a4
 1044e99:	xor    ebx,ebx
 1044e9b:	cmp    rdi,rbx
 1044e9e:	jle    0x1044ec9
 1044ea0:	lea    rax,[rip+0xfffffffffffc5499]        # 0x100a340
 1044ea7:	mov    r8d,0x3
 1044ead:	mov    rcx,rsi
 1044eb0:	movzx  eax,BYTE PTR [rbx+rax*1]
 1044eb4:	movzx  edx,WORD PTR [rsi+rax*4+0xfd2]
 1044ebc:	call   0x10444a4
 1044ec1:	inc    rbx
 1044ec4:	cmp    rbx,rdi
 1044ec7:	jl     0x1044ea0
 1044ec9:	lea    r8d,[rbp-0x1]
 1044ecd:	lea    rdx,[rsi+0xf0]
 1044ed4:	mov    rcx,rsi
 1044ed7:	call   0x1044850
 1044edc:	lea    rdx,[rsi+0x9e4]
 1044ee3:	lea    r8d,[r12-0x1]
 1044ee8:	mov    rcx,rsi
 1044eeb:	mov    rbx,QWORD PTR [rsp+0x30]
 1044ef0:	mov    rbp,QWORD PTR [rsp+0x38]
 1044ef5:	mov    rsi,QWORD PTR [rsp+0x40]
 1044efa:	mov    rdi,QWORD PTR [rsp+0x48]
 1044eff:	add    rsp,0x20
 1044f03:	pop    r12
 1044f05:	jmp    0x1044850
 1044f0a:	int3   
 1044f0b:	int3   
 1044f0c:	int3   
 1044f0d:	int3   
 1044f0e:	int3   
 1044f0f:	int3   
 1044f10:	mov    rax,rsp
 1044f13:	mov    QWORD PTR [rax+0x8],rbx
 1044f17:	mov    QWORD PTR [rax+0x10],rbp
 1044f1b:	mov    QWORD PTR [rax+0x18],rsi
 1044f1f:	mov    QWORD PTR [rax+0x20],rdi
 1044f23:	push   r12
 1044f25:	push   r13
 1044f27:	push   r14
 1044f29:	sub    rsp,0x20
 1044f2d:	movsxd r12,DWORD PTR [rdx+0x1c]
 1044f31:	mov    rbp,QWORD PTR [rdx]
 1044f34:	mov    r9,QWORD PTR [rdx+0x8]
 1044f38:	xor    r10d,r10d
 1044f3b:	or     esi,0xffffffff
 1044f3e:	mov    rdi,rcx
 1044f41:	cmp    r12,r10
 1044f44:	mov    DWORD PTR [rcx+0x5c],0x23d
 1044f4b:	mov    DWORD PTR [rcx+0x58],r10d
 1044f4f:	mov    r13,rdx
 1044f52:	mov    r8d,r10d
 1044f55:	mov    rcx,r10
 1044f58:	lea    r14d,[rsi+0x2]
 1044f5c:	jle    0x1044f94
 1044f5e:	cmp    WORD PTR [rbp+rcx*4+0x0],r10w
 1044f64:	je     0x1044f83
 1044f66:	add    DWORD PTR [rdi+0x58],r14d
 1044f6a:	movsxd rax,DWORD PTR [rdi+0x58]
 1044f6e:	mov    esi,r8d
 1044f71:	mov    DWORD PTR [rdi+rax*4+0x108c],r8d
 1044f79:	mov    BYTE PTR [rcx+rdi*1+0x1980],r10b
 1044f81:	jmp    0x1044f89
 1044f83:	mov    WORD PTR [rbp+rcx*4+0x2],r10w
 1044f89:	add    rcx,r14
 1044f8c:	add    r8d,r14d
 1044f8f:	cmp    rcx,r12
 1044f92:	jl     0x1044f5e
 1044f94:	movsxd rdx,esi
 1044f97:	jmp    0x1044fe1
 1044f99:	cmp    esi,0x2
 1044f9c:	jge    0x1044fac
 1044f9e:	add    esi,r14d
 1044fa1:	add    rdx,r14
 1044fa4:	mov    rcx,rdx
 1044fa7:	mov    r8d,esi
 1044faa:	jmp    0x1044fb2
 1044fac:	mov    r8d,r10d
 1044faf:	mov    rcx,r10
 1044fb2:	add    DWORD PTR [rdi+0x58],r14d
 1044fb6:	movsxd rax,DWORD PTR [rdi+0x58]
 1044fba:	mov    DWORD PTR [rdi+rax*4+0x108c],r8d
 1044fc2:	mov    WORD PTR [rbp+rcx*4+0x0],r14w
 1044fc8:	mov    BYTE PTR [rdi+rcx*1+0x1980],r10b
 1044fd0:	dec    DWORD PTR [rdi+0x68]
 1044fd3:	cmp    r9,r10
 1044fd6:	je     0x1044fe1
 1044fd8:	movzx  eax,WORD PTR [r9+rcx*4+0x2]
 1044fde:	sub    DWORD PTR [rdi+0x6c],eax
 1044fe1:	cmp    DWORD PTR [rdi+0x58],0x2
 1044fe5:	jl     0x1044f99
 1044fe7:	mov    DWORD PTR [r13+0x24],esi
 1044feb:	mov    eax,DWORD PTR [rdi+0x58]
 1044fee:	cdq    
 1044fef:	sub    eax,edx
 1044ff1:	sar    eax,1
 1044ff3:	cmp    eax,r14d
 1044ff6:	mov    ebx,eax
 1044ff8:	jl     0x1045010
 1044ffa:	mov    r8d,ebx
 1044ffd:	mov    rdx,rbp
 1045000:	mov    rcx,rdi
 1045003:	call   0x1044288
 1045008:	sub    ebx,r14d
 104500b:	cmp    ebx,r14d
 104500e:	jge    0x1044ffa
 1045010:	movsxd rdx,DWORD PTR [rdi+0x58]
 1045014:	movsxd rbx,DWORD PTR [rdi+0x1090]
 104501b:	mov    r8d,r14d
 104501e:	mov    ecx,DWORD PTR [rdi+rdx*4+0x108c]
 1045025:	lea    eax,[rdx-0x1]
 1045028:	mov    rdx,rbp
 104502b:	mov    DWORD PTR [rdi+0x1090],ecx
 1045031:	mov    rcx,rdi
 1045034:	mov    DWORD PTR [rdi+0x58],eax
 1045037:	call   0x1044288
 104503c:	dec    DWORD PTR [rdi+0x5c]
 104503f:	movsxd rcx,DWORD PTR [rdi+0x1090]
 1045046:	movsxd rax,DWORD PTR [rdi+0x5c]
 104504a:	movsxd r9,r12d
 104504d:	mov    rdx,rcx
 1045050:	mov    DWORD PTR [rdi+rax*4+0x108c],ebx
 1045057:	dec    DWORD PTR [rdi+0x5c]
 104505a:	movsxd rax,DWORD PTR [rdi+0x5c]
 104505e:	mov    DWORD PTR [rdi+rax*4+0x108c],ecx
 1045065:	movzx  eax,WORD PTR [rbp+rcx*4+0x0]
 104506a:	add    ax,WORD PTR [rbp+rbx*4+0x0]
 104506f:	mov    WORD PTR [rbp+r9*4+0x0],ax
 1045075:	mov    al,BYTE PTR [rbx+rdi*1+0x1980]
 104507c:	mov    cl,BYTE PTR [rcx+rdi*1+0x1980]
 1045083:	cmp    al,cl
 1045085:	movzx  eax,al
 1045088:	jae    0x104508d
 104508a:	movzx  eax,cl
 104508d:	add    al,r14b
 1045090:	mov    r8d,r14d
 1045093:	mov    rcx,rdi
 1045096:	mov    BYTE PTR [r9+rdi*1+0x1980],al
 104509e:	mov    WORD PTR [rbp+rdx*4+0x2],r12w
 10450a4:	mov    WORD PTR [rbp+rbx*4+0x2],r12w
 10450aa:	mov    DWORD PTR [rdi+0x1090],r12d
 10450b1:	mov    rdx,rbp
 10450b4:	add    r12d,r14d
 10450b7:	call   0x1044288
 10450bc:	cmp    DWORD PTR [rdi+0x58],0x2
 10450c0:	jge    0x1045010
 10450c6:	dec    DWORD PTR [rdi+0x5c]
 10450c9:	movsxd rcx,DWORD PTR [rdi+0x5c]
 10450cd:	mov    eax,DWORD PTR [rdi+0x1090]
 10450d3:	mov    DWORD PTR [rdi+rcx*4+0x108c],eax
 10450da:	mov    rdx,r13
 10450dd:	mov    rcx,rdi
 10450e0:	call   0x10440ac
 10450e5:	mov    r8d,esi
 10450e8:	mov    rdx,rbp
 10450eb:	mov    rcx,rdi
 10450ee:	mov    rbx,QWORD PTR [rsp+0x40]
 10450f3:	mov    rbp,QWORD PTR [rsp+0x48]
 10450f8:	mov    rsi,QWORD PTR [rsp+0x50]
 10450fd:	mov    rdi,QWORD PTR [rsp+0x58]
 1045102:	add    rsp,0x20
 1045106:	pop    r14
 1045108:	pop    r13
 104510a:	pop    r12
 104510c:	jmp    0x10449d4
 1045111:	int3   
 1045112:	int3   
 1045113:	int3   
 1045114:	int3   
 1045115:	int3   
 1045116:	int3   
 1045117:	int3   
 1045118:	rex push rbx
 104511a:	sub    rsp,0x20
 104511e:	mov    r8d,DWORD PTR [rcx+0x9c]
 1045125:	lea    rdx,[rcx+0xf0]
 104512c:	mov    rbx,rcx
 104512f:	call   0x1043fb4
 1045134:	mov    r8d,DWORD PTR [rbx+0xc4]
 104513b:	lea    rdx,[rbx+0x9e4]
 1045142:	mov    rcx,rbx
 1045145:	call   0x1043fb4
 104514a:	lea    rdx,[rbx+0xc8]
 1045151:	mov    rcx,rbx
 1045154:	call   0x1044f10
 1045159:	mov    r11d,0x12
 104515f:	mov    rax,r11
 1045162:	lea    rcx,[rip+0xfffffffffffc51d7]        # 0x100a340
 1045169:	movzx  ecx,BYTE PTR [rax+rcx*1]
 104516d:	cmp    WORD PTR [rbx+rcx*4+0xfd2],0x0
 1045176:	jne    0x1045184
 1045178:	dec    rax
 104517b:	dec    r11d
 104517e:	cmp    rax,0x3
 1045182:	jge    0x1045162
 1045184:	lea    ecx,[r11+r11*2+0x11]
 1045189:	mov    eax,r11d
 104518c:	add    DWORD PTR [rbx+0x68],ecx
 104518f:	add    rsp,0x20
 1045193:	pop    rbx
 1045194:	ret    
 1045195:	int3   
 1045196:	int3   
 1045197:	int3   
 1045198:	int3   
 1045199:	int3   
 104519a:	int3   
 104519b:	int3   
 104519c:	mov    QWORD PTR [rsp+0x8],rbx
 10451a1:	mov    QWORD PTR [rsp+0x10],rbp
 10451a6:	mov    QWORD PTR [rsp+0x18],rsi
 10451ab:	push   rdi
 10451ac:	push   r12
 10451ae:	push   r13
 10451b0:	sub    rsp,0x20
 10451b4:	movzx  r10d,WORD PTR [rcx+0x64]
 10451b9:	mov    al,BYTE PTR [rcx+0x66]
 10451bc:	mov    rsi,rdx
 10451bf:	lea    rdx,[rcx+0x78]
 10451c3:	mov    edi,r9d
 10451c6:	mov    ebp,r8d
 10451c9:	mov    BYTE PTR [r10+rcx*1+0x1fac],al
 10451d1:	mov    rbx,rcx
 10451d4:	call   0x1044f10
 10451d9:	lea    rdx,[rbx+0xa0]
 10451e0:	mov    rcx,rbx
 10451e3:	call   0x1044f10
 10451e8:	mov    rcx,rbx
 10451eb:	call   0x1045118
 10451f0:	mov    ecx,DWORD PTR [rbx+0x68]
 10451f3:	mov    edx,DWORD PTR [rbx+0x6c]
 10451f6:	add    ecx,0xa
 10451f9:	add    edx,0xa
 10451fc:	lea    r12d,[rbp+0x4]
 1045200:	shr    ecx,0x3
 1045203:	shr    edx,0x3
 1045206:	mov    r13d,eax
 1045209:	cmp    edx,ecx
 104520b:	cmovbe ecx,edx
 104520e:	cmp    r12d,ecx
 1045211:	ja     0x104524f
 1045213:	test   rsi,rsi
 1045216:	je     0x104524f
 1045218:	mov    r8d,0x3
 104521e:	mov    edx,edi
 1045220:	mov    rcx,rbx
 1045223:	call   0x10444a4
 1045228:	mov    eax,DWORD PTR [rbx+0x70]
 104522b:	mov    r9d,0x1
 1045231:	add    eax,0xa
 1045234:	movzx  r8d,bp
 1045238:	mov    rdx,rsi
 104523b:	and    eax,0xfffffff8
 104523e:	mov    rcx,rbx
 1045241:	lea    eax,[rax+r12*8]
 1045245:	mov    DWORD PTR [rbx+0x70],eax
 1045248:	call   0x1044ce0
 104524d:	jmp    0x10452c4
 104524f:	cmp    edx,ecx
 1045251:	mov    r8d,0x3
 1045257:	mov    rcx,rbx
 104525a:	jne    0x104527f
 104525c:	lea    edx,[rdi+0x2]
 104525f:	call   0x10444a4
 1045264:	lea    r8,[rbx+0xf58]
 104526b:	lea    rdx,[rbx+0xad8]
 1045272:	mov    rcx,rbx
 1045275:	call   0x10446d0
 104527a:	mov    eax,DWORD PTR [rbx+0x6c]
 104527d:	jmp    0x10452be
 104527f:	lea    edx,[rdi+0x4]
 1045282:	call   0x10444a4
 1045287:	mov    r8d,DWORD PTR [rbx+0xc4]
 104528e:	mov    edx,DWORD PTR [rbx+0x9c]
 1045294:	lea    r9d,[r13+0x1]
 1045298:	inc    r8d
 104529b:	inc    edx
 104529d:	mov    rcx,rbx
 10452a0:	call   0x1044e40
 10452a5:	lea    r8,[rbx+0x9e4]
 10452ac:	lea    rdx,[rbx+0xf0]
 10452b3:	mov    rcx,rbx
 10452b6:	call   0x10446d0
 10452bb:	mov    eax,DWORD PTR [rbx+0x68]
 10452be:	add    eax,0x3
 10452c1:	add    DWORD PTR [rbx+0x70],eax
 10452c4:	mov    rcx,rbx
 10452c7:	call   0x104433c
 10452cc:	test   edi,edi
 10452ce:	je     0x10452d9
 10452d0:	call   0x10443bc
 10452d5:	add    DWORD PTR [rbx+0x70],0x7
 10452d9:	mov    eax,DWORD PTR [rbx+0x70]
 10452dc:	mov    rbp,QWORD PTR [rsp+0x48]
 10452e1:	mov    rsi,QWORD PTR [rsp+0x50]
 10452e6:	mov    rbx,QWORD PTR [rsp+0x40]
 10452eb:	shr    eax,0x3
 10452ee:	add    rsp,0x20
 10452f2:	pop    r13
 10452f4:	pop    r12
 10452f6:	pop    rdi
 10452f7:	ret    
 10452f8:	int3   
 10452f9:	int3   
 10452fa:	int3   
 10452fb:	int3   
 10452fc:	int3   
 10452fd:	int3   
 10452fe:	int3   
 10452ff:	int3   
 1045300:	mov    QWORD PTR [rsp+0x8],rbx
 1045305:	mov    QWORD PTR [rsp+0x10],rbp
 104530a:	mov    QWORD PTR [rsp+0x18],rsi
 104530f:	push   rdi
 1045310:	push   r12
 1045312:	push   r13
 1045314:	push   r14
 1045316:	push   r15
 1045318:	sub    rsp,0x20
 104531c:	xor    edi,edi
 104531e:	mov    rbx,rcx
 1045321:	mov    ebp,0x10000
 1045326:	lea    r15d,[rdi+0x2]
 104532a:	mov    r12d,edi
 104532d:	lea    r14d,[rdi+0x1]
 1045331:	mov    esi,r15d
 1045334:	cmp    DWORD PTR [rcx+0x3c],edi
 1045337:	je     0x104557e
 104533d:	cmp    DWORD PTR [rbx+0x3c],r15d
 1045341:	jle    0x104538e
 1045343:	movzx  edx,WORD PTR [rbx+0x54]
 1045347:	mov    rax,QWORD PTR [rbx+0x20]
 104534b:	movzx  ecx,BYTE PTR [rax+rdx*1+0x2]
 1045350:	mov    eax,DWORD PTR [rbx+0x38]
 1045353:	shl    eax,0x5
 1045356:	xor    ecx,eax
 1045358:	mov    rax,QWORD PTR [rbx+0x28]
 104535c:	and    ecx,0x7fff
 1045362:	and    edx,0x7fff
 1045368:	mov    DWORD PTR [rbx+0x38],ecx
 104536b:	movsxd rcx,ecx
 104536e:	mov    r8w,WORD PTR [rax+rcx*2]
 1045373:	mov    rax,QWORD PTR [rbx+0x30]
 1045377:	mov    WORD PTR [rax+rdx*2],r8w
 104537c:	movsxd rdx,DWORD PTR [rbx+0x38]
 1045380:	mov    rcx,QWORD PTR [rbx+0x28]
 1045384:	movzx  eax,WORD PTR [rbx+0x54]
 1045388:	mov    WORD PTR [rcx+rdx*2],ax
 104538c:	jmp    0x1045394
 104538e:	mov    r8d,edi
 1045391:	mov    DWORD PTR [rbx+0x50],edi
 1045394:	movzx  r13d,WORD PTR [rbx+0x56]
 1045399:	mov    DWORD PTR [rbx+0x50],esi
 104539c:	mov    esi,r15d
 104539f:	cmp    r8w,di
 10453a3:	je     0x10453f7
 10453a5:	cmp    DWORD PTR [rbx+0x50],0x20
 10453a9:	jge    0x10453f7
 10453ab:	movzx  edx,WORD PTR [rbx+0x54]
 10453af:	movzx  eax,r8w
 10453b3:	mov    ecx,edx
 10453b5:	sub    ecx,eax
 10453b7:	cmp    ecx,0x7efa
 10453bd:	jg     0x10453f7
 10453bf:	mov    eax,0xfffd
 10453c4:	cmp    dx,ax
 10453c7:	jae    0x10453f7
 10453c9:	movzx  edx,r8w
 10453cd:	mov    rcx,rbx
 10453d0:	call   0x1043bf0
 10453d5:	cmp    eax,DWORD PTR [rbx+0x3c]
 10453d8:	mov    esi,eax
 10453da:	cmovg  esi,DWORD PTR [rbx+0x3c]
 10453de:	cmp    esi,0x3
 10453e1:	jne    0x10453f7
 10453e3:	movzx  edx,WORD PTR [rbx+0x54]
 10453e7:	movzx  ecx,WORD PTR [rbx+0x56]
 10453eb:	sub    edx,ecx
 10453ed:	cmp    edx,0x1000
 10453f3:	cmovg  esi,r15d
 10453f7:	mov    r8d,DWORD PTR [rbx+0x50]
 10453fb:	cmp    r8d,0x3
 10453ff:	jl     0x10454e5
 1045405:	cmp    esi,r8d
 1045408:	jg     0x10454e5
 104540e:	movzx  edx,WORD PTR [rbx+0x54]
 1045412:	movzx  eax,r13w
 1045416:	add    r8d,0xfffffffd
 104541a:	sub    edx,eax
 104541c:	mov    rcx,rbx
 104541f:	sub    edx,r14d
 1045422:	call   0x1043e4c
 1045427:	mov    edx,DWORD PTR [rbx+0x50]
 104542a:	mov    ecx,r14d
 104542d:	sub    ecx,edx
 104542f:	mov    r11d,eax
 1045432:	mov    r9d,0x7fff
 1045438:	add    DWORD PTR [rbx+0x3c],ecx
 104543b:	lea    ecx,[rdx-0x2]
 104543e:	mov    DWORD PTR [rbx+0x50],ecx
 1045441:	add    WORD PTR [rbx+0x54],r14w
 1045446:	cmp    DWORD PTR [rbx+0x3c],r15d
 104544a:	jle    0x1045490
 104544c:	mov    rax,QWORD PTR [rbx+0x20]
 1045450:	movzx  r8d,WORD PTR [rbx+0x54]
 1045455:	movzx  ecx,BYTE PTR [rax+r8*1+0x2]
 104545b:	mov    eax,DWORD PTR [rbx+0x38]
 104545e:	shl    eax,0x5
 1045461:	xor    ecx,eax
 1045463:	mov    rax,QWORD PTR [rbx+0x28]
 1045467:	and    ecx,r9d
 104546a:	and    r8,r9
 104546d:	mov    DWORD PTR [rbx+0x38],ecx
 1045470:	movsxd rdx,ecx
 1045473:	mov    rcx,QWORD PTR [rbx+0x30]
 1045477:	movzx  eax,WORD PTR [rax+rdx*2]
 104547b:	mov    WORD PTR [rcx+r8*2],ax
 1045480:	movsxd rdx,DWORD PTR [rbx+0x38]
 1045484:	mov    rcx,QWORD PTR [rbx+0x28]
 1045488:	movzx  eax,WORD PTR [rbx+0x54]
 104548c:	mov    WORD PTR [rcx+rdx*2],ax
 1045490:	add    DWORD PTR [rbx+0x50],0xffffffff
 1045494:	jne    0x1045441
 1045496:	add    WORD PTR [rbx+0x54],r14w
 104549b:	mov    r12d,edi
 104549e:	mov    esi,r15d
 10454a1:	cmp    r11d,edi
 10454a4:	je     0x1045552
 10454aa:	mov    eax,DWORD PTR [rbx+0x4c]
 10454ad:	mov    r8d,ebp
 10454b0:	cmp    WORD PTR [rbx+0x54],di
 10454b4:	je     0x10454bb
 10454b6:	movzx  r8d,WORD PTR [rbx+0x54]
 10454bb:	sub    r8d,eax
 10454be:	cmp    eax,edi
 10454c0:	jl     0x10454cc
 10454c2:	movzx  edx,WORD PTR [rbx+0x4c]
 10454c6:	add    rdx,QWORD PTR [rbx+0x20]
 10454ca:	jmp    0x10454cf
 10454cc:	mov    rdx,rdi
 10454cf:	xor    r9d,r9d
 10454d2:	mov    rcx,rbx
 10454d5:	call   0x104519c
 10454da:	movzx  r11d,WORD PTR [rbx+0x54]
 10454df:	mov    DWORD PTR [rbx+0x4c],r11d
 10454e3:	jmp    0x1045552
 10454e5:	cmp    r12d,edi
 10454e8:	je     0x1045547
 10454ea:	movzx  eax,WORD PTR [rbx+0x54]
 10454ee:	xor    edx,edx
 10454f0:	sub    ax,r14w
 10454f4:	movzx  ecx,ax
 10454f7:	mov    rax,QWORD PTR [rbx+0x20]
 10454fb:	movzx  r8d,BYTE PTR [rcx+rax*1]
 1045500:	mov    rcx,rbx
 1045503:	call   0x1043e4c
 1045508:	cmp    eax,edi
 104550a:	je     0x104554a
 104550c:	mov    eax,DWORD PTR [rbx+0x4c]
 104550f:	mov    r8d,ebp
 1045512:	cmp    WORD PTR [rbx+0x54],di
 1045516:	je     0x104551d
 1045518:	movzx  r8d,WORD PTR [rbx+0x54]
 104551d:	sub    r8d,eax
 1045520:	cmp    eax,edi
 1045522:	jl     0x104552e
 1045524:	movzx  edx,WORD PTR [rbx+0x4c]
 1045528:	add    rdx,QWORD PTR [rbx+0x20]
 104552c:	jmp    0x1045531
 104552e:	mov    rdx,rdi
 1045531:	xor    r9d,r9d
 1045534:	mov    rcx,rbx
 1045537:	call   0x104519c
 104553c:	movzx  r11d,WORD PTR [rbx+0x54]
 1045541:	mov    DWORD PTR [rbx+0x4c],r11d
 1045545:	jmp    0x104554a
 1045547:	mov    r12d,r14d
 104554a:	add    WORD PTR [rbx+0x54],r14w
 104554f:	dec    DWORD PTR [rbx+0x3c]
 1045552:	cmp    DWORD PTR [rbx+0x3c],edi
 1045555:	jne    0x104533d
 104555b:	cmp    r12d,edi
 104555e:	je     0x104557e
 1045560:	movzx  eax,WORD PTR [rbx+0x54]
 1045564:	xor    edx,edx
 1045566:	sub    ax,r14w
 104556a:	movzx  ecx,ax
 104556d:	mov    rax,QWORD PTR [rbx+0x20]
 1045571:	movzx  r8d,BYTE PTR [rcx+rax*1]
 1045576:	mov    rcx,rbx
 1045579:	call   0x1043e4c
 104557e:	mov    eax,DWORD PTR [rbx+0x4c]
 1045581:	cmp    WORD PTR [rbx+0x54],di
 1045585:	je     0x104558b
 1045587:	movzx  ebp,WORD PTR [rbx+0x54]
 104558b:	sub    ebp,eax
 104558d:	cmp    eax,edi
 104558f:	jl     0x1045599
 1045591:	movzx  edi,WORD PTR [rbx+0x4c]
 1045595:	add    rdi,QWORD PTR [rbx+0x20]
 1045599:	mov    r9d,r14d
 104559c:	mov    r8d,ebp
 104559f:	mov    rdx,rdi
 10455a2:	mov    rcx,rbx
 10455a5:	mov    rbx,QWORD PTR [rsp+0x50]
 10455aa:	mov    rbp,QWORD PTR [rsp+0x58]
 10455af:	mov    rsi,QWORD PTR [rsp+0x60]
 10455b4:	add    rsp,0x20
 10455b8:	pop    r15
 10455ba:	pop    r14
 10455bc:	pop    r13
 10455be:	pop    r12
 10455c0:	pop    rdi
 10455c1:	jmp    0x104519c
 10455c6:	int3   
 10455c7:	int3   
 10455c8:	int3   
 10455c9:	int3   
 10455ca:	int3   
 10455cb:	int3   
 10455cc:	mov    QWORD PTR [rsp+0x8],rbx
 10455d1:	push   rbp
 10455d2:	sub    rsp,0x20
 10455d6:	mov    rax,QWORD PTR [rsp+0x60]
 10455db:	xor    ebp,ebp
 10455dd:	mov    rbx,rcx
 10455e0:	mov    QWORD PTR [rcx+0x28],rax
 10455e4:	mov    rax,QWORD PTR [rsp+0x58]
 10455e9:	mov    QWORD PTR [rcx+0x8],r9
 10455ed:	mov    QWORD PTR [rcx+0x30],rax
 10455f1:	mov    eax,DWORD PTR [rsp+0x50]
 10455f5:	mov    WORD PTR [rcx+0x18],bp
 10455f9:	mov    QWORD PTR [rcx+0x20],rdx
 10455fd:	mov    DWORD PTR [rcx+0x3c],r8d
 1045601:	mov    DWORD PTR [rcx+0x40],ebp
 1045604:	mov    DWORD PTR [rcx+0x1c],eax
 1045607:	cmp    BYTE PTR [rsp+0x68],bpl
 104560c:	jne    0x1045620
 104560e:	lea    rcx,[rdx+0x8000]
 1045615:	mov    r8d,0x8000
 104561b:	call   0x10402e4
 1045620:	mov    rcx,rbx
 1045623:	mov    WORD PTR [rbx+0x44],bp
 1045627:	mov    DWORD PTR [rbx+0x48],ebp
 104562a:	call   0x1044a80
 104562f:	mov    rcx,rbx
 1045632:	call   0x1043d70
 1045637:	mov    rcx,rbx
 104563a:	cmp    BYTE PTR [rsp+0x68],bpl
 104563f:	je     0x1045648
 1045641:	call   0x1043db8
 1045646:	jmp    0x104564d
 1045648:	call   0x1043e24
 104564d:	mov    edx,0x43
 1045652:	mov    rcx,rbx
 1045655:	lea    r8d,[rdx-0x3b]
 1045659:	call   0x10444a4
 104565e:	mov    edx,0x4b
 1045663:	mov    rcx,rbx
 1045666:	lea    r8d,[rdx-0x43]
 104566a:	call   0x10444a4
 104566f:	mov    rcx,rbx
 1045672:	call   0x1045300
 1045677:	add    ax,0x2
 104567b:	movzx  ecx,ax
 104567e:	mov    rax,QWORD PTR [rsp+0x70]
 1045683:	mov    DWORD PTR [rax],ecx
 1045685:	cmp    BYTE PTR [rsp+0x68],bpl
 104568a:	je     0x10456a2
 104568c:	mov    rcx,QWORD PTR [rbx+0x20]
 1045690:	mov    r8d,0x8000
 1045696:	lea    rdx,[rcx+0x8000]
 104569d:	call   0x10402e4
 10456a2:	mov    eax,DWORD PTR [rbx+0x40]
 10456a5:	mov    rbx,QWORD PTR [rsp+0x30]
 10456aa:	neg    eax
 10456ac:	sbb    eax,eax
 10456ae:	and    eax,0x3
 10456b1:	add    rsp,0x20
 10456b5:	pop    rbp
 10456b6:	ret    
 10456b7:	int3   
 10456b8:	int3   
 10456b9:	int3   
 10456ba:	int3   
 10456bb:	int3   
 10456bc:	int3   
 10456bd:	int3   
 10456be:	int3   
 10456bf:	int3   
 10456c0:	rex push rbx
 10456c2:	sub    rsp,0x20
 10456c6:	mov    rbx,rcx
 10456c9:	mov    rcx,QWORD PTR [rcx+0x10]
 10456cd:	test   rcx,rcx
 10456d0:	je     0x10456dd
 10456d2:	call   QWORD PTR [rbx+0x43a8]
 10456d8:	and    QWORD PTR [rbx+0x10],0x0
 10456dd:	mov    rcx,QWORD PTR [rbx+0x4380]
 10456e4:	test   rcx,rcx
 10456e7:	je     0x10456f7
 10456e9:	call   QWORD PTR [rbx+0x43a8]
 10456ef:	and    QWORD PTR [rbx+0x4380],0x0
 10456f7:	mov    rcx,QWORD PTR [rbx+0x4388]
 10456fe:	test   rcx,rcx
 1045701:	je     0x1045711
 1045703:	call   QWORD PTR [rbx+0x43a8]
 1045709:	and    QWORD PTR [rbx+0x4388],0x0
 1045711:	mov    rcx,QWORD PTR [rbx+0x4378]
 1045718:	test   rcx,rcx
 104571b:	je     0x104572f
 104571d:	call   QWORD PTR [rbx+0x43a8]
 1045723:	and    QWORD PTR [rbx+0x4378],0x0
 104572b:	and    QWORD PTR [rbx],0x0
 104572f:	mov    rcx,QWORD PTR [rbx+0x48]
 1045733:	test   rcx,rcx
 1045736:	je     0x1045743
 1045738:	call   QWORD PTR [rbx+0x43a8]
 104573e:	and    QWORD PTR [rbx+0x48],0x0
 1045743:	mov    rcx,QWORD PTR [rbx+0x40]
 1045747:	test   rcx,rcx
 104574a:	je     0x1045757
 104574c:	call   QWORD PTR [rbx+0x43a8]
 1045752:	and    QWORD PTR [rbx+0x40],0x0
 1045757:	mov    rcx,QWORD PTR [rbx+0x50]
 104575b:	test   rcx,rcx
 104575e:	je     0x104576b
 1045760:	call   QWORD PTR [rbx+0x43a8]
 1045766:	and    QWORD PTR [rbx+0x50],0x0
 104576b:	mov    rcx,QWORD PTR [rbx+0x2580]
 1045772:	test   rcx,rcx
 1045775:	je     0x1045785
 1045777:	call   QWORD PTR [rbx+0x43a8]
 104577d:	and    QWORD PTR [rbx+0x2580],0x0
 1045785:	mov    rcx,rbx
 1045788:	call   0x10471ac
 104578d:	and    DWORD PTR [rbx+0x8ac],0x0
 1045794:	add    rsp,0x20
 1045798:	pop    rbx
 1045799:	ret    
 104579a:	int3   
 104579b:	int3   
 104579c:	int3   
 104579d:	int3   
 104579e:	int3   
 104579f:	int3   
 10457a0:	mov    QWORD PTR [rsp+0x8],rbx
 10457a5:	push   rbp
 10457a6:	sub    rsp,0x20
 10457aa:	mov    rbx,rcx
 10457ad:	mov    rcx,QWORD PTR [rcx+0x10]
 10457b1:	xor    edx,edx
 10457b3:	mov    r8d,0x40000
 10457b9:	call   0x104026c
 10457be:	mov    r8d,DWORD PTR [rbx+0x8]
 10457c2:	mov    rax,QWORD PTR [rbx+0x4378]
 10457c9:	and    DWORD PTR [rbx+0x28],0x0
 10457cd:	and    DWORD PTR [rbx+0x30],0x0
 10457d1:	sub    rax,r8
 10457d4:	mov    QWORD PTR [rbx],rax
 10457d7:	mov    rax,QWORD PTR [rbx+0x4380]
 10457de:	mov    ebp,0x1
 10457e3:	mov    rdx,r8
 10457e6:	mov    DWORD PTR [rbx+0x478],r8d
 10457ed:	mov    DWORD PTR [rbx+0x89c],r8d
 10457f4:	shl    rdx,0x2
 10457f8:	lea    rcx,[rbx+0x39a8]
 10457ff:	mov    DWORD PTR [rbx+0x64],ebp
 1045802:	sub    rax,rdx
 1045805:	mov    DWORD PTR [rbx+0x68],ebp
 1045808:	mov    DWORD PTR [rbx+0x6c],ebp
 104580b:	mov    QWORD PTR [rbx+0x18],rax
 104580f:	mov    rax,QWORD PTR [rbx+0x4388]
 1045816:	mov    DWORD PTR [rbx+0x58],ebp
 1045819:	sub    rax,rdx
 104581c:	xor    edx,edx
 104581e:	mov    DWORD PTR [rbx+0x5c],ebp
 1045821:	mov    QWORD PTR [rbx+0x20],rax
 1045825:	mov    eax,DWORD PTR [rbx+0x8a0]
 104582b:	mov    DWORD PTR [rbx+0x60],ebp
 104582e:	lea    eax,[rax*8+0x100]
 1045835:	mov    BYTE PTR [rbx+0x9b1],bpl
 104583c:	mov    DWORD PTR [rbx+0x9b4],ebp
 1045842:	movsxd r8,eax
 1045845:	mov    BYTE PTR [rbx+0x2c],0x20
 1045849:	call   0x104026c
 104584e:	lea    rcx,[rbx+0x423c]
 1045855:	xor    edx,edx
 1045857:	mov    r8d,0xf9
 104585d:	call   0x104026c
 1045862:	lea    rcx,[rbx+0x2588]
 1045869:	lea    edx,[rbp+0x7]
 104586c:	mov    r8d,0x100
 1045872:	call   0x104026c
 1045877:	mov    r11d,DWORD PTR [rbx+0x8a0]
 104587e:	lea    rcx,[rbx+0x2688]
 1045885:	shl    r11d,0x3
 1045889:	lea    edx,[rbp+0x8]
 104588c:	movsxd r8,r11d
 104588f:	call   0x104026c
 1045894:	lea    rcx,[rbx+0x2845]
 104589b:	lea    edx,[rbp+0x5]
 104589e:	mov    r8d,0xf9
 10458a4:	call   0x104026c
 10458a9:	movabs rax,0x303030303030303
 10458b3:	mov    rcx,rbx
 10458b6:	mov    QWORD PTR [rbx+0x4366],rax
 10458bd:	call   0x1046ef4
 10458c2:	mov    r11d,DWORD PTR [rbx+0x478]
 10458c9:	mov    rcx,QWORD PTR [rbx+0x50]
 10458cd:	and    DWORD PTR [rbx+0x898],0x0
 10458d4:	xor    edx,edx
 10458d6:	mov    r8d,0x2000
 10458dc:	mov    DWORD PTR [rbx+0x9c4],r11d
 10458e3:	mov    DWORD PTR [rbx+0x9c0],r11d
 10458ea:	mov    DWORD PTR [rbx+0x9b8],ebp
 10458f0:	call   0x104026c
 10458f5:	and    DWORD PTR [rbx+0x38],0x0
 10458f9:	and    DWORD PTR [rbx+0x3c],0x0
 10458fd:	mov    rcx,rbx
 1045900:	mov    BYTE PTR [rbx+0x8b0],0x0
 1045907:	mov    DWORD PTR [rbx+0x58],ebp
 104590a:	mov    DWORD PTR [rbx+0x5c],ebp
 104590d:	mov    DWORD PTR [rbx+0x60],ebp
 1045910:	call   0x1047194
 1045915:	and    DWORD PTR [rbx+0x4390],0x0
 104591c:	lea    rcx,[rbx+0x2940]
 1045923:	xor    edx,edx
 1045925:	mov    r8d,0xaf0
 104592b:	call   0x104026c
 1045930:	lea    rcx,[rbx+0x3c66]
 1045937:	xor    edx,edx
 1045939:	mov    r8d,0x3e4
 104593f:	call   0x104026c
 1045944:	lea    rcx,[rbx+0x4336]
 104594b:	lea    r8d,[rbp+0x1f]
 104594f:	xor    edx,edx
 1045951:	call   0x104026c
 1045956:	mov    r11d,DWORD PTR [rbx+0x9bc]
 104595d:	mov    eax,DWORD PTR [rbx+0x8]
 1045960:	mov    rcx,QWORD PTR [rbx+0x4378]
 1045967:	lea    r8d,[r11+rax*1+0x1101]
 104596f:	xor    edx,edx
 1045971:	mov    rbx,QWORD PTR [rsp+0x30]
 1045976:	add    rsp,0x20
 104597a:	pop    rbp
 104597b:	jmp    0x104026c
 1045980:	int3   
 1045981:	int3   
 1045982:	int3   
 1045983:	int3   
 1045984:	int3   
 1045985:	int3   
 1045986:	int3   
 1045987:	int3   
 1045988:	mov    QWORD PTR [rsp+0x8],rbx
 104598d:	mov    QWORD PTR [rsp+0x10],rsi
 1045992:	push   rdi
 1045993:	sub    rsp,0x20
 1045997:	and    QWORD PTR [rcx+0x10],0x0
 104599c:	and    QWORD PTR [rcx+0x4380],0x0
 10459a4:	and    QWORD PTR [rcx+0x4388],0x0
 10459ac:	and    QWORD PTR [rcx],0x0
 10459b0:	and    QWORD PTR [rcx+0x4378],0x0
 10459b8:	and    QWORD PTR [rcx+0x2580],0x0
 10459c0:	and    QWORD PTR [rcx+0x48],0x0
 10459c5:	and    QWORD PTR [rcx+0x40],0x0
 10459ca:	and    QWORD PTR [rcx+0x50],0x0
 10459cf:	and    QWORD PTR [rcx+0x880],0x0
 10459d7:	mov    r8d,0x4
 10459dd:	mov    rbx,rcx
 10459e0:	mov    DWORD PTR [rcx+0x8a0],r8d
 10459e7:	mov    edx,DWORD PTR [rbx+0x8a0]
 10459ed:	lea    rax,[rip+0xfffffffffffc47bc]        # 0x100a1b0
 10459f4:	mov    cl,BYTE PTR [rdx+rax*1]
 10459f7:	mov    eax,0x1
 10459fc:	shl    eax,cl
 10459fe:	add    r8d,eax
 1045a01:	lea    eax,[rdx+0x1]
 1045a04:	mov    DWORD PTR [rbx+0x8a0],eax
 1045a0a:	cmp    r8d,DWORD PTR [rbx+0x8]
 1045a0e:	jb     0x10459e7
 1045a10:	mov    ecx,0x40000
 1045a15:	call   QWORD PTR [rbx+0x43a0]
 1045a1b:	mov    QWORD PTR [rbx+0x10],rax
 1045a1f:	test   rax,rax
 1045a22:	jne    0x1045a3e
 1045a24:	mov    rcx,rbx
 1045a27:	call   0x10456c0
 1045a2c:	xor    eax,eax
 1045a2e:	mov    rbx,QWORD PTR [rsp+0x30]
 1045a33:	mov    rsi,QWORD PTR [rsp+0x38]
 1045a38:	add    rsp,0x20
 1045a3c:	pop    rdi
 1045a3d:	ret    
 1045a3e:	mov    eax,DWORD PTR [rbx+0x8]
 1045a41:	lea    ecx,[rax+0x1101]
 1045a47:	cmp    ecx,eax
 1045a49:	jb     0x1045a2c
 1045a4b:	mov    esi,DWORD PTR [rbx+0x9bc]
 1045a51:	add    esi,ecx
 1045a53:	cmp    esi,ecx
 1045a55:	jb     0x1045a2c
 1045a57:	mov    edi,esi
 1045a59:	mov    eax,0xffffffff
 1045a5e:	shl    rdi,0x2
 1045a62:	cmp    rdi,rax
 1045a65:	ja     0x1045a2c
 1045a67:	mov    ecx,edi
 1045a69:	call   QWORD PTR [rbx+0x43a0]
 1045a6f:	mov    QWORD PTR [rbx+0x4380],rax
 1045a76:	test   rax,rax
 1045a79:	je     0x1045a24
 1045a7b:	mov    ecx,edi
 1045a7d:	call   QWORD PTR [rbx+0x43a0]
 1045a83:	mov    QWORD PTR [rbx+0x4388],rax
 1045a8a:	test   rax,rax
 1045a8d:	je     0x1045a24
 1045a8f:	mov    ecx,esi
 1045a91:	call   QWORD PTR [rbx+0x43a0]
 1045a97:	mov    QWORD PTR [rbx+0x4378],rax
 1045a9e:	test   rax,rax
 1045aa1:	je     0x1045a24
 1045aa3:	mov    ecx,0x10000
 1045aa8:	mov    QWORD PTR [rbx],rax
 1045aab:	call   QWORD PTR [rbx+0x43a0]
 1045ab1:	mov    QWORD PTR [rbx+0x48],rax
 1045ab5:	test   rax,rax
 1045ab8:	je     0x1045a24
 1045abe:	mov    ecx,0x20000
 1045ac3:	call   QWORD PTR [rbx+0x43a0]
 1045ac9:	mov    QWORD PTR [rbx+0x40],rax
 1045acd:	test   rax,rax
 1045ad0:	je     0x1045a24
 1045ad6:	mov    ecx,0x2000
 1045adb:	call   QWORD PTR [rbx+0x43a0]
 1045ae1:	mov    rcx,rbx
 1045ae4:	mov    QWORD PTR [rbx+0x50],rax
 1045ae8:	test   rax,rax
 1045aeb:	je     0x1045a27
 1045af1:	call   0x1047360
 1045af6:	mov    rcx,rbx
 1045af9:	call   0x1047328
 1045afe:	mov    rcx,rbx
 1045b01:	call   0x10471dc
 1045b06:	test   eax,eax
 1045b08:	je     0x1045a24
 1045b0e:	mov    ecx,0x18150
 1045b13:	call   QWORD PTR [rbx+0x43a0]
 1045b19:	mov    QWORD PTR [rbx+0x2580],rax
 1045b20:	test   rax,rax
 1045b23:	je     0x1045a24
 1045b29:	mov    DWORD PTR [rbx+0x8ac],0x1
 1045b33:	mov    eax,0x1
 1045b38:	jmp    0x1045a2e
 1045b3d:	int3   
 1045b3e:	int3   
 1045b3f:	int3   
 1045b40:	int3   
 1045b41:	int3   
 1045b42:	int3   
 1045b43:	int3   
 1045b44:	mov    QWORD PTR [rsp+0x8],rbx
 1045b49:	push   rdi
 1045b4a:	sub    rsp,0x20
 1045b4e:	xor    edx,edx
 1045b50:	mov    rdi,rcx
 1045b53:	call   0x1046b34
 1045b58:	mov    rcx,rdi
 1045b5b:	call   0x1047cdc
 1045b60:	mov    rcx,rdi
 1045b63:	mov    ebx,eax
 1045b65:	call   0x1046f3c
 1045b6a:	mov    eax,ebx
 1045b6c:	mov    rbx,QWORD PTR [rsp+0x30]
 1045b71:	add    rsp,0x20
 1045b75:	pop    rdi
 1045b76:	ret    
 1045b77:	int3   
 1045b78:	int3   
 1045b79:	int3   
 1045b7a:	int3   
 1045b7b:	int3   
 1045b7c:	int3   
 1045b7d:	int3   
 1045b7e:	int3   
 1045b7f:	int3   
 1045b80:	sub    rsp,0x28
 1045b84:	mov    al,BYTE PTR [rcx+0x2c]
 1045b87:	cmp    al,0x20
 1045b89:	jge    0x1045b98
 1045b8b:	sub    al,0x10
 1045b8d:	xor    r8d,r8d
 1045b90:	movzx  edx,al
 1045b93:	call   0x1047224
 1045b98:	add    rsp,0x28
 1045b9c:	ret    
 1045b9d:	int3   
 1045b9e:	int3   
 1045b9f:	int3   
 1045ba0:	int3   
 1045ba1:	int3   
 1045ba2:	int3   
 1045ba3:	int3   
 1045ba4:	mov    QWORD PTR [rsp+0x8],rbx
 1045ba9:	mov    QWORD PTR [rsp+0x10],rbp
 1045bae:	mov    QWORD PTR [rsp+0x18],rsi
 1045bb3:	push   rdi
 1045bb4:	push   r12
 1045bb6:	push   r14
 1045bb8:	sub    rsp,0x20
 1045bbc:	mov    esi,r8d
 1045bbf:	mov    r12d,edx
 1045bc2:	mov    r9d,edx
 1045bc5:	xor    r8d,r8d
 1045bc8:	xor    edx,edx
 1045bca:	mov    rbx,rcx
 1045bcd:	call   0x1047bec
 1045bd2:	mov    edx,esi
 1045bd4:	mov    rcx,rbx
 1045bd7:	mov    ebp,eax
 1045bd9:	call   0x104787c
 1045bde:	mov    edx,0x1
 1045be3:	mov    rcx,rbx
 1045be6:	mov    edi,eax
 1045be8:	call   0x1046b34
 1045bed:	mov    rcx,rbx
 1045bf0:	call   0x1047cdc
 1045bf5:	mov    r14d,0x3
 1045bfb:	cmp    eax,ebp
 1045bfd:	jb     0x1045c0f
 1045bff:	mov    ecx,DWORD PTR [rbx+0x9c0]
 1045c05:	cmp    DWORD PTR [rbx+0x9c4],ecx
 1045c0b:	cmovae edi,r14d
 1045c0f:	movzx  r8d,dil
 1045c13:	mov    edx,r14d
 1045c16:	mov    rcx,rbx
 1045c19:	call   0x1047224
 1045c1e:	mov    r11d,ebp
 1045c21:	mov    edx,0x8
 1045c26:	shr    r11d,0x10
 1045c2a:	mov    rcx,rbx
 1045c2d:	movzx  r8d,r11b
 1045c31:	call   0x1047224
 1045c36:	mov    r11d,ebp
 1045c39:	mov    edx,0x8
 1045c3e:	shr    r11d,0x8
 1045c42:	mov    rcx,rbx
 1045c45:	movzx  r8d,r11b
 1045c49:	call   0x1047224
 1045c4e:	movzx  r8d,bpl
 1045c52:	mov    edx,0x8
 1045c57:	mov    rcx,rbx
 1045c5a:	call   0x1047224
 1045c5f:	cmp    edi,0x1
 1045c62:	jne    0x1045c79
 1045c64:	mov    rcx,rbx
 1045c67:	call   0x1046e7c
 1045c6c:	mov    edx,r12d
 1045c6f:	mov    rcx,rbx
 1045c72:	call   0x1048448
 1045c77:	jmp    0x1045c99
 1045c79:	cmp    edi,0x2
 1045c7c:	jne    0x1045ca5
 1045c7e:	mov    rcx,rbx
 1045c81:	call   0x1046abc
 1045c86:	mov    rcx,rbx
 1045c89:	call   0x1046e7c
 1045c8e:	mov    edx,r12d
 1045c91:	mov    rcx,rbx
 1045c94:	call   0x1047f5c
 1045c99:	mov    edx,esi
 1045c9b:	mov    rcx,rbx
 1045c9e:	call   0x1047eb4
 1045ca3:	jmp    0x1045cc5
 1045ca5:	cmp    edi,r14d
 1045ca8:	jne    0x1045cc5
 1045caa:	mov    edx,esi
 1045cac:	mov    rcx,rbx
 1045caf:	call   0x1047eb4
 1045cb4:	mov    edx,DWORD PTR [rbx+0x9c4]
 1045cba:	mov    r8d,ebp
 1045cbd:	mov    rcx,rbx
 1045cc0:	call   0x1047dd4
 1045cc5:	add    DWORD PTR [rbx+0x9c4],ebp
 1045ccb:	mov    rsi,QWORD PTR [rsp+0x50]
 1045cd0:	mov    rbx,QWORD PTR [rsp+0x40]
 1045cd5:	mov    rbp,QWORD PTR [rsp+0x48]
 1045cda:	add    rsp,0x20
 1045cde:	pop    r14
 1045ce0:	pop    r12
 1045ce2:	pop    rdi
 1045ce3:	ret    
 1045ce4:	int3   
 1045ce5:	int3   
 1045ce6:	int3   
 1045ce7:	int3   
 1045ce8:	int3   
 1045ce9:	int3   
 1045cea:	int3   
 1045ceb:	int3   
 1045cec:	mov    r11,rsp
 1045cef:	push   rbx
 1045cf0:	sub    rsp,0x30
 1045cf4:	mov    r9d,DWORD PTR [rcx+0x3c]
 1045cf8:	mov    r8d,DWORD PTR [rcx+0x38]
 1045cfc:	lea    rax,[r11+0x10]
 1045d00:	mov    QWORD PTR [r11-0x10],rax
 1045d04:	lea    rax,[r11+0x8]
 1045d08:	xor    edx,edx
 1045d0a:	mov    rbx,rcx
 1045d0d:	mov    BYTE PTR [rcx+0x9b1],0x0
 1045d14:	mov    QWORD PTR [r11-0x18],rax
 1045d18:	call   0x1047910
 1045d1d:	mov    r8d,DWORD PTR [rsp+0x48]
 1045d22:	mov    edx,DWORD PTR [rsp+0x40]
 1045d26:	mov    rcx,rbx
 1045d29:	call   0x1045ba4
 1045d2e:	mov    ecx,DWORD PTR [rbx+0x38]
 1045d31:	mov    r9d,DWORD PTR [rsp+0x40]
 1045d36:	cmp    r9d,ecx
 1045d39:	jne    0x1045d59
 1045d3b:	mov    rcx,QWORD PTR [rbx+0x50]
 1045d3f:	mov    r8d,0x2000
 1045d45:	xor    edx,edx
 1045d47:	call   0x104026c
 1045d4c:	and    DWORD PTR [rbx+0x38],0x0
 1045d50:	and    DWORD PTR [rbx+0x3c],0x0
 1045d54:	jmp    0x1045e20
 1045d59:	shr    ecx,0x3
 1045d5c:	mov    eax,r9d
 1045d5f:	shr    eax,0x3
 1045d62:	sub    ecx,eax
 1045d64:	mov    eax,r9d
 1045d67:	cdq    
 1045d68:	inc    ecx
 1045d6a:	and    edx,0x7
 1045d6d:	add    eax,edx
 1045d6f:	mov    edx,0x2000
 1045d74:	sar    eax,0x3
 1045d77:	sub    edx,eax
 1045d79:	cmp    ecx,edx
 1045d7b:	cmovl  edx,ecx
 1045d7e:	mov    rcx,QWORD PTR [rbx+0x50]
 1045d82:	movsxd r8,edx
 1045d85:	mov    rdx,r9
 1045d88:	shr    rdx,0x3
 1045d8c:	add    rdx,rcx
 1045d8f:	call   0x10497b2
 1045d94:	mov    r11d,DWORD PTR [rbx+0x38]
 1045d98:	mov    eax,0x1fff
 1045d9d:	sub    r11d,DWORD PTR [rsp+0x40]
 1045da2:	xor    edx,edx
 1045da4:	shr    r11d,0x3
 1045da8:	sub    eax,r11d
 1045dab:	lea    ecx,[r11+0x1]
 1045daf:	movsxd r8,eax
 1045db2:	add    rcx,QWORD PTR [rbx+0x50]
 1045db6:	call   0x104026c
 1045dbb:	mov    edx,DWORD PTR [rsp+0x40]
 1045dbf:	mov    r11d,DWORD PTR [rbx+0x38]
 1045dc3:	mov    rcx,QWORD PTR [rbx+0x48]
 1045dc7:	sub    r11d,edx
 1045dca:	mov    eax,0x10000
 1045dcf:	sub    eax,edx
 1045dd1:	cmp    r11d,eax
 1045dd4:	cmovb  eax,r11d
 1045dd8:	add    rdx,rcx
 1045ddb:	mov    r8d,eax
 1045dde:	call   0x10497b2
 1045de3:	mov    edx,DWORD PTR [rsp+0x48]
 1045de7:	mov    r11d,DWORD PTR [rbx+0x3c]
 1045deb:	mov    rcx,QWORD PTR [rbx+0x40]
 1045def:	sub    r11d,edx
 1045df2:	mov    eax,0x8000
 1045df7:	sub    eax,edx
 1045df9:	lea    rdx,[rcx+rdx*4]
 1045dfd:	cmp    r11d,eax
 1045e00:	cmovb  eax,r11d
 1045e04:	mov    r8d,eax
 1045e07:	shl    r8,0x2
 1045e0b:	call   0x10497b2
 1045e10:	mov    r11d,DWORD PTR [rsp+0x40]
 1045e15:	mov    eax,DWORD PTR [rsp+0x48]
 1045e19:	sub    DWORD PTR [rbx+0x38],r11d
 1045e1d:	sub    DWORD PTR [rbx+0x3c],eax
 1045e20:	mov    rcx,rbx
 1045e23:	call   0x1046f3c
 1045e28:	add    rsp,0x30
 1045e2c:	pop    rbx
 1045e2d:	ret    
 1045e2e:	int3   
 1045e2f:	int3   
 1045e30:	int3   
 1045e31:	int3   
 1045e32:	int3   
 1045e33:	int3   
 1045e34:	mov    QWORD PTR [rsp+0x10],rbx
 1045e39:	mov    QWORD PTR [rsp+0x18],rsi
 1045e3e:	push   rdi
 1045e3f:	sub    rsp,0x30
 1045e43:	mov    edi,DWORD PTR [rcx+0x89c]
 1045e49:	mov    BYTE PTR [rcx+0x9b1],0x0
 1045e50:	mov    r8d,DWORD PTR [rdx]
 1045e53:	mov    eax,edi
 1045e55:	sub    r8d,edi
 1045e58:	mov    rsi,rdx
 1045e5b:	sub    eax,DWORD PTR [rcx+0x8]
 1045e5e:	mov    rbx,rcx
 1045e61:	cmp    eax,DWORD PTR [rcx+0x8]
 1045e64:	jae    0x1045e6b
 1045e66:	add    r8d,eax
 1045e69:	jmp    0x1045e6f
 1045e6b:	add    r8d,DWORD PTR [rcx+0x8]
 1045e6f:	mov    eax,DWORD PTR [rcx]
 1045e71:	sub    eax,DWORD PTR [rcx+0x4378]
 1045e77:	add    eax,DWORD PTR [rdx]
 1045e79:	cmp    r8d,eax
 1045e7c:	ja     0x1045f21
 1045e82:	mov    r9d,DWORD PTR [rcx+0x3c]
 1045e86:	mov    r8d,DWORD PTR [rcx+0x38]
 1045e8a:	and    QWORD PTR [rsp+0x28],0x0
 1045e90:	lea    rax,[rsp+0x40]
 1045e95:	xor    edx,edx
 1045e97:	mov    QWORD PTR [rsp+0x20],rax
 1045e9c:	call   0x1047910
 1045ea1:	mov    r9d,DWORD PTR [rsp+0x40]
 1045ea6:	xor    r8d,r8d
 1045ea9:	xor    edx,edx
 1045eab:	mov    rcx,rbx
 1045eae:	call   0x1047bec
 1045eb3:	xor    edx,edx
 1045eb5:	mov    rcx,rbx
 1045eb8:	call   0x1046b34
 1045ebd:	mov    rcx,rbx
 1045ec0:	call   0x1046f3c
 1045ec5:	mov    rcx,QWORD PTR [rbx+0x10]
 1045ec9:	xor    edx,edx
 1045ecb:	mov    r8d,0x40000
 1045ed1:	call   0x104026c
 1045ed6:	mov    rcx,QWORD PTR [rbx+0x50]
 1045eda:	xor    edx,edx
 1045edc:	mov    r8d,0x2000
 1045ee2:	call   0x104026c
 1045ee7:	and    DWORD PTR [rbx+0x898],0x0
 1045eee:	and    DWORD PTR [rbx+0x38],0x0
 1045ef2:	mov    ecx,DWORD PTR [rsp+0x40]
 1045ef6:	and    DWORD PTR [rbx+0x3c],0x0
 1045efa:	mov    eax,0x1
 1045eff:	mov    DWORD PTR [rbx+0x64],eax
 1045f02:	mov    DWORD PTR [rbx+0x68],eax
 1045f05:	mov    DWORD PTR [rbx+0x6c],eax
 1045f08:	mov    DWORD PTR [rbx+0x2574],ecx
 1045f0e:	mov    DWORD PTR [rbx+0x58],eax
 1045f11:	mov    DWORD PTR [rbx+0x5c],eax
 1045f14:	mov    DWORD PTR [rbx+0x60],eax
 1045f17:	mov    DWORD PTR [rbx+0x9b4],eax
 1045f1d:	mov    DWORD PTR [rsi],edi
 1045f1f:	jmp    0x1045f23
 1045f21:	xor    eax,eax
 1045f23:	mov    rbx,QWORD PTR [rsp+0x48]
 1045f28:	mov    rsi,QWORD PTR [rsp+0x50]
 1045f2d:	add    rsp,0x30
 1045f31:	pop    rdi
 1045f32:	ret    
 1045f33:	int3   
 1045f34:	int3   
 1045f35:	int3   
 1045f36:	int3   
 1045f37:	int3   
 1045f38:	int3   
 1045f39:	int3   
 1045f3a:	int3   
 1045f3b:	int3   
 1045f3c:	mov    QWORD PTR [rsp+0x8],rbx
 1045f41:	push   rdi
 1045f42:	sub    rsp,0x20
 1045f46:	mov    edi,edx
 1045f48:	mov    rbx,rcx
 1045f4b:	mov    BYTE PTR [rcx+0x9b1],0x0
 1045f52:	mov    DWORD PTR [rcx+0x9b4],0x1
 1045f5c:	call   0x1045cec
 1045f61:	mov    eax,DWORD PTR [rbx+0x38]
 1045f64:	mov    ecx,0x1000
 1045f69:	cmp    eax,ecx
 1045f6b:	jae    0x1045f75
 1045f6d:	mov    DWORD PTR [rbx+0x2574],ecx
 1045f73:	jmp    0x1045f7d
 1045f75:	add    eax,ecx
 1045f77:	mov    DWORD PTR [rbx+0x2574],eax
 1045f7d:	mov    DWORD PTR [rbx+0x89c],edi
 1045f83:	mov    rbx,QWORD PTR [rsp+0x30]
 1045f88:	add    rsp,0x20
 1045f8c:	pop    rdi
 1045f8d:	ret    
 1045f8e:	int3   
 1045f8f:	int3   
 1045f90:	int3   
 1045f91:	int3   
 1045f92:	int3   
 1045f93:	int3   
 1045f94:	rex push rbx
 1045f96:	sub    rsp,0x20
 1045f9a:	mov    r9d,DWORD PTR [rcx+0x38]
 1045f9e:	mov    rbx,rcx
 1045fa1:	test   r9d,r9d
 1045fa4:	je     0x1045ffa
 1045fa6:	cmp    DWORD PTR [rcx+0x9b4],0x0
 1045fad:	je     0x1045fc2
 1045faf:	xor    r8d,r8d
 1045fb2:	xor    edx,edx
 1045fb4:	call   0x1047bec
 1045fb9:	and    DWORD PTR [rbx+0x9b4],0x0
 1045fc0:	jmp    0x1045fd4
 1045fc2:	mov    r8d,DWORD PTR [rcx+0x257c]
 1045fc9:	mov    edx,DWORD PTR [rcx+0x2578]
 1045fcf:	call   0x1047be0
 1045fd4:	xor    edx,edx
 1045fd6:	mov    rcx,rbx
 1045fd9:	call   0x1046b34
 1045fde:	mov    rcx,rbx
 1045fe1:	call   0x1046f3c
 1045fe6:	mov    r11d,DWORD PTR [rbx+0x38]
 1045fea:	mov    eax,DWORD PTR [rbx+0x3c]
 1045fed:	mov    DWORD PTR [rbx+0x2578],r11d
 1045ff4:	mov    DWORD PTR [rbx+0x257c],eax
 1045ffa:	add    rsp,0x20
 1045ffe:	pop    rbx
 1045fff:	ret    
 1046000:	int3   
 1046001:	int3   
 1046002:	int3   
 1046003:	int3   
 1046004:	int3   
 1046005:	int3   
 1046006:	int3   
 1046007:	int3   
 1046008:	rex push rbx
 104600a:	sub    rsp,0x20
 104600e:	cmp    DWORD PTR [rcx+0x38],0x0
 1046012:	mov    rbx,rcx
 1046015:	jbe    0x1046025
 1046017:	mov    rcx,rbx
 104601a:	call   0x1045cec
 104601f:	cmp    DWORD PTR [rbx+0x38],0x0
 1046023:	ja     0x1046017
 1046025:	mov    rcx,rbx
 1046028:	add    rsp,0x20
 104602c:	pop    rbx
 104602d:	jmp    0x1047c6c
 1046032:	int3   
 1046033:	int3   
 1046034:	int3   
 1046035:	int3   
 1046036:	int3   
 1046037:	int3   
 1046038:	mov    rax,rsp
 104603b:	mov    DWORD PTR [rax+0x10],edx
 104603e:	push   rbx
 104603f:	push   rbp
 1046040:	push   rsi
 1046041:	push   rdi
 1046042:	push   r12
 1046044:	push   r13
 1046046:	push   r14
 1046048:	push   r15
 104604a:	sub    rsp,0x38
 104604e:	mov    edi,DWORD PTR [rcx+0x478]
 1046054:	mov    ebp,0x10
 1046059:	xor    r13d,r13d
 104605c:	lea    esi,[rdi+rdx*1]
 104605f:	mov    rbx,rcx
 1046062:	mov    DWORD PTR [rax+0x8],edi
 1046065:	lea    r15d,[rbp-0xf]
 1046069:	mov    DWORD PTR [rsp+0x90],esi
 1046070:	cmp    DWORD PTR [rcx+0x9b8],r13d
 1046077:	je     0x10460c9
 1046079:	mov    DWORD PTR [rcx+0x9b8],r13d
 1046080:	mov    DWORD PTR [rcx+0x2574],0x2710
 104608a:	mov    edx,r15d
 104608d:	cmp    DWORD PTR [rcx+0x8a4],r13d
 1046094:	je     0x10460bf
 1046096:	mov    r8d,r15d
 1046099:	call   0x1047224
 104609e:	movzx  r8d,WORD PTR [rbx+0x8a6]
 10460a6:	mov    edx,ebp
 10460a8:	mov    rcx,rbx
 10460ab:	call   0x1047224
 10460b0:	movzx  r8d,WORD PTR [rbx+0x8a4]
 10460b8:	mov    edx,ebp
 10460ba:	mov    rcx,rbx
 10460bd:	jmp    0x10460c2
 10460bf:	xor    r8d,r8d
 10460c2:	call   0x1047224
 10460c7:	jmp    0x10460f1
 10460c9:	mov    esi,0x32
 10460ce:	mov    r8d,edi
 10460d1:	mov    edx,edi
 10460d3:	mov    rcx,rbx
 10460d6:	sub    r8d,DWORD PTR [rbx+0x8]
 10460da:	sub    edx,esi
 10460dc:	add    r8d,0x4
 10460e0:	call   0x10488b0
 10460e5:	add    esi,0xffffffff
 10460e8:	jne    0x10460ce
 10460ea:	mov    esi,DWORD PTR [rsp+0x90]
 10460f1:	lea    ebp,[rdi+0x8000]
 10460f7:	cmp    edi,esi
 10460f9:	jae    0x1046856
 10460ff:	mov    r14d,ebp
 1046102:	and    r14d,0xffff8000
 1046109:	cmp    r14d,esi
 104610c:	ja     0x1046113
 104610e:	cmp    r14d,edi
 1046111:	jae    0x1046116
 1046113:	mov    r14d,esi
 1046116:	mov    edx,edi
 1046118:	mov    rcx,rbx
 104611b:	call   0x10489e8
 1046120:	cmp    eax,0x2
 1046123:	mov    esi,eax
 1046125:	jl     0x1046139
 1046127:	lea    ecx,[rax+rdi*1]
 104612a:	cmp    ecx,r14d
 104612d:	jbe    0x104617d
 104612f:	mov    esi,r14d
 1046132:	sub    esi,edi
 1046134:	cmp    esi,0x2
 1046137:	jge    0x104617d
 1046139:	mov    rax,QWORD PTR [rbx]
 104613c:	mov    edx,DWORD PTR [rbx+0x38]
 104613f:	mov    rcx,QWORD PTR [rbx+0x48]
 1046143:	mov    esi,DWORD PTR [rsp+0x90]
 104614a:	mov    r8d,edi
 104614d:	add    edi,r15d
 1046150:	mov    al,BYTE PTR [r8+rax*1]
 1046154:	add    ebp,r15d
 1046157:	mov    DWORD PTR [rsp+0x80],edi
 104615e:	mov    BYTE PTR [rdx+rcx*1],al
 1046161:	add    DWORD PTR [rbx+0x38],r15d
 1046165:	cmp    DWORD PTR [rbx+0x38],0xfff8
 104616c:	jb     0x10460f7
 104616e:	mov    edx,edi
 1046170:	mov    rcx,rbx
 1046173:	call   0x1045f3c
 1046178:	jmp    0x10460f7
 104617d:	cmp    esi,0x32
 1046180:	jge    0x104676a
 1046186:	lea    eax,[rdi+0xefd]
 104618c:	mov    ebp,edi
 104618e:	lea    r12d,[rsi+rdi*1]
 1046192:	mov    DWORD PTR [rsp+0x24],eax
 1046196:	mov    rax,QWORD PTR [rbx]
 1046199:	mov    DWORD PTR [rsp+0x80],r12d
 10461a1:	movzx  ecx,BYTE PTR [rax+rbp*1]
 10461a5:	mov    rax,QWORD PTR [rbx+0x2580]
 10461ac:	mov    DWORD PTR [rsp+0x20],edi
 10461b0:	movzx  edx,BYTE PTR [rcx+rbx*1+0x2588]
 10461b8:	mov    DWORD PTR [rax+0x2c],edx
 10461bb:	mov    rax,QWORD PTR [rbx+0x2580]
 10461c2:	mov    edx,0x2
 10461c7:	mov    r9d,edx
 10461ca:	mov    r11,rdx
 10461cd:	mov    DWORD PTR [rax+0x1c],edi
 10461d0:	cmp    esi,edx
 10461d2:	jb     0x1046299
 10461d8:	lea    r8d,[rdx+0x2e]
 10461dc:	lea    r10,[rbx+0x78]
 10461e0:	lea    rbp,[rip+0xfffffffffffc3fc9]        # 0x100a1b0
 10461e7:	movsxd rdx,DWORD PTR [r10]
 10461ea:	cmp    edx,0x400
 10461f0:	jge    0x10461fb
 10461f2:	mov    dl,BYTE PTR [rdx+rbx*1+0x47c]
 10461f9:	jmp    0x104621c
 10461fb:	cmp    edx,0x80000
 1046201:	jge    0x1046216
 1046203:	mov    rax,rdx
 1046206:	sar    rax,0x9
 104620a:	mov    dl,BYTE PTR [rax+rbx*1+0x47c]
 1046211:	add    dl,0x12
 1046214:	jmp    0x104621c
 1046216:	sar    edx,0x11
 1046219:	add    dl,0x22
 104621c:	cmp    r9d,0x9
 1046220:	jae    0x104623e
 1046222:	movzx  eax,dl
 1046225:	lea    ecx,[r9+rax*8+0xfe]
 104622d:	movzx  eax,dl
 1046230:	movzx  ecx,BYTE PTR [rcx+rbx*1+0x2588]
 1046238:	movzx  eax,BYTE PTR [rax+rbp*1]
 104623c:	jmp    0x1046258
 104623e:	movzx  eax,dl
 1046241:	movzx  ecx,BYTE PTR [rbx+rax*8+0x268f]
 1046249:	movzx  eax,BYTE PTR [rax+rbp*1]
 104624d:	add    ecx,eax
 104624f:	movzx  eax,BYTE PTR [r11+rbx*1+0x283c]
 1046258:	add    ecx,eax
 104625a:	mov    rax,QWORD PTR [rbx+0x2580]
 1046261:	add    r9d,r15d
 1046264:	mov    DWORD PTR [r8+rax*1+0x14],ecx
 1046269:	mov    rax,QWORD PTR [rbx+0x2580]
 1046270:	add    r11,r15
 1046273:	mov    DWORD PTR [r8+rax*1+0x4],edi
 1046278:	mov    eax,DWORD PTR [r10]
 104627b:	mov    rcx,QWORD PTR [rbx+0x2580]
 1046282:	mov    DWORD PTR [r8+rcx*1],eax
 1046286:	add    r8,0x18
 104628a:	add    r10,0x4
 104628e:	cmp    r9d,esi
 1046291:	jbe    0x10461e7
 1046297:	mov    ebp,edi
 1046299:	mov    rax,QWORD PTR [rbx+0x2580]
 10462a0:	mov    r10d,r14d
 10462a3:	lea    r15d,[rdi+0x1]
 10462a7:	mov    DWORD PTR [rax+0x14],r13d
 10462ab:	mov    eax,DWORD PTR [rbx+0x64]
 10462ae:	mov    rcx,QWORD PTR [rbx+0x2580]
 10462b5:	mov    DWORD PTR [rcx+0x8],eax
 10462b8:	mov    eax,DWORD PTR [rbx+0x68]
 10462bb:	mov    rcx,QWORD PTR [rbx+0x2580]
 10462c2:	mov    DWORD PTR [rcx+0xc],eax
 10462c5:	mov    eax,DWORD PTR [rbx+0x6c]
 10462c8:	mov    rcx,QWORD PTR [rbx+0x2580]
 10462cf:	mov    DWORD PTR [rcx+0x10],eax
 10462d2:	mov    r13,QWORD PTR [rbx+0x2580]
 10462d9:	lea    rax,[rbp+rbp*2+0x0]
 10462de:	shl    rax,0x3
 10462e2:	sub    r13,rax
 10462e5:	sub    r10d,edi
 10462e8:	jmp    0x10462f2
 10462ea:	mov    r12d,DWORD PTR [rsp+0x80]
 10462f2:	inc    r15d
 10462f5:	inc    edi
 10462f7:	dec    r10d
 10462fa:	lea    rsi,[rdi+rdi*2]
 10462fe:	lea    eax,[r15-0x2]
 1046302:	mov    DWORD PTR [rsp+0x98],r10d
 104630a:	mov    ecx,DWORD PTR [r13+rsi*8+0x4]
 104630f:	mov    DWORD PTR [rsp+0x28],r15d
 1046314:	cmp    ecx,eax
 1046316:	je     0x1046384
 1046318:	mov    eax,DWORD PTR [r13+rsi*8+0x0]
 104631d:	lea    rcx,[rcx+rcx*2]
 1046321:	cmp    eax,0x3
 1046324:	jb     0x104633b
 1046326:	add    eax,0xfffffffe
 1046329:	mov    DWORD PTR [rbx+0x64],eax
 104632c:	mov    eax,DWORD PTR [r13+rcx*8+0x8]
 1046331:	mov    DWORD PTR [rbx+0x68],eax
 1046334:	mov    eax,DWORD PTR [r13+rcx*8+0xc]
 1046339:	jmp    0x1046381
 104633b:	xor    edx,edx
 104633d:	cmp    eax,edx
 104633f:	jne    0x1046358
 1046341:	mov    eax,DWORD PTR [r13+rcx*8+0x8]
 1046346:	mov    DWORD PTR [rbx+0x64],eax
 1046349:	mov    eax,DWORD PTR [r13+rcx*8+0xc]
 104634e:	mov    DWORD PTR [rbx+0x68],eax
 1046351:	mov    eax,DWORD PTR [r13+rcx*8+0x10]
 1046356:	jmp    0x1046381
 1046358:	cmp    eax,0x1
 104635b:	jne    0x104636c
 104635d:	mov    eax,DWORD PTR [r13+rcx*8+0xc]
 1046362:	mov    DWORD PTR [rbx+0x64],eax
 1046365:	mov    eax,DWORD PTR [r13+rcx*8+0x8]
 104636a:	jmp    0x104634e
 104636c:	mov    eax,DWORD PTR [r13+rcx*8+0x10]
 1046371:	mov    DWORD PTR [rbx+0x64],eax
 1046374:	mov    eax,DWORD PTR [r13+rcx*8+0xc]
 1046379:	mov    DWORD PTR [rbx+0x68],eax
 104637c:	mov    eax,DWORD PTR [r13+rcx*8+0x8]
 1046381:	mov    DWORD PTR [rbx+0x6c],eax
 1046384:	mov    eax,DWORD PTR [rbx+0x64]
 1046387:	mov    DWORD PTR [r13+rsi*8+0x8],eax
 104638c:	mov    eax,DWORD PTR [rbx+0x68]
 104638f:	mov    DWORD PTR [r13+rsi*8+0xc],eax
 1046394:	mov    eax,DWORD PTR [rbx+0x6c]
 1046397:	mov    DWORD PTR [r13+rsi*8+0x10],eax
 104639c:	cmp    r12d,edi
 104639f:	je     0x10465f9
 10463a5:	mov    edx,edi
 10463a7:	mov    rcx,rbx
 10463aa:	call   0x10489e8
 10463af:	mov    r10d,DWORD PTR [rsp+0x98]
 10463b7:	lea    ecx,[rax+rdi*1]
 10463ba:	mov    r12d,eax
 10463bd:	cmp    ecx,r14d
 10463c0:	jbe    0x10463d2
 10463c2:	mov    r12d,r10d
 10463c5:	cmp    r10d,0x2
 10463c9:	mov    eax,0x0
 10463ce:	cmovl  r12d,eax
 10463d2:	cmp    r12d,0x32
 10463d6:	jg     0x1046568
 10463dc:	lea    r9d,[r12+rdi*1]
 10463e0:	cmp    r9d,DWORD PTR [rsp+0x24]
 10463e5:	jae    0x1046568
 10463eb:	cmp    r12d,0x2
 10463ef:	jg     0x10463fc
 10463f1:	jne    0x1046460
 10463f3:	cmp    DWORD PTR [rbx+0x78],0x800
 10463fa:	jae    0x1046460
 10463fc:	mov    r8d,DWORD PTR [rsp+0x80]
 1046404:	cmp    r8d,r9d
 1046407:	jae    0x1046460
 1046409:	mov    edx,DWORD PTR [rsp+0x20]
 104640d:	mov    r11d,0xefc
 1046413:	mov    ecx,r12d
 1046416:	sub    ecx,edx
 1046418:	mov    eax,r11d
 104641b:	add    ecx,edi
 104641d:	cmp    ecx,r11d
 1046420:	cmovb  eax,ecx
 1046423:	sub    r8d,edx
 1046426:	inc    r8d
 1046429:	movsxd rdx,eax
 104642c:	movsxd r8,r8d
 104642f:	cmp    r8,rdx
 1046432:	jg     0x1046458
 1046434:	lea    rcx,[r8+r8*2]
 1046438:	sub    rdx,r8
 104643b:	shl    rcx,0x3
 104643f:	inc    rdx
 1046442:	mov    rax,QWORD PTR [rbx+0x2580]
 1046449:	add    rcx,0x18
 104644d:	or     DWORD PTR [rcx+rax*1-0x4],0xffffffff
 1046452:	sub    rdx,0x1
 1046456:	jne    0x1046442
 1046458:	mov    DWORD PTR [rsp+0x80],r9d
 1046460:	mov    rax,QWORD PTR [rbx]
 1046463:	mov    esi,DWORD PTR [r13+rsi*8+0x14]
 1046468:	movzx  ecx,BYTE PTR [rax+rdi*1]
 104646c:	movzx  edx,BYTE PTR [rcx+rbx*1+0x2588]
 1046474:	lea    rcx,[r15+r15*2]
 1046478:	add    edx,esi
 104647a:	cmp    edx,DWORD PTR [r13+rcx*8+0x14]
 104647f:	jae    0x104648b
 1046481:	mov    DWORD PTR [r13+rcx*8+0x14],edx
 1046486:	mov    DWORD PTR [r13+rcx*8+0x4],edi
 104648b:	mov    r8d,0x2
 1046491:	mov    r11,r8
 1046494:	cmp    r12d,r8d
 1046497:	jb     0x10462ea
 104649d:	lea    r10d,[r15+0x1]
 10464a1:	lea    r9,[rbx+0x78]
 10464a5:	lea    r15,[rip+0xfffffffffffc3d04]        # 0x100a1b0
 10464ac:	movsxd rdx,DWORD PTR [r9]
 10464af:	cmp    edx,0x400
 10464b5:	jge    0x10464c0
 10464b7:	mov    dl,BYTE PTR [rdx+rbx*1+0x47c]
 10464be:	jmp    0x10464e1
 10464c0:	cmp    edx,0x80000
 10464c6:	jge    0x10464db
 10464c8:	mov    rax,rdx
 10464cb:	sar    rax,0x9
 10464cf:	mov    dl,BYTE PTR [rax+rbx*1+0x47c]
 10464d6:	add    dl,0x12
 10464d9:	jmp    0x10464e1
 10464db:	sar    edx,0x11
 10464de:	add    dl,0x22
 10464e1:	cmp    r8d,0x9
 10464e5:	jae    0x1046504
 10464e7:	movzx  eax,dl
 10464ea:	lea    ecx,[r8+rax*8+0xfe]
 10464f2:	movzx  eax,dl
 10464f5:	movzx  ecx,BYTE PTR [rcx+rbx*1+0x2588]
 10464fd:	movzx  eax,BYTE PTR [rax+r15*1]
 1046502:	jmp    0x104651f
 1046504:	movzx  eax,dl
 1046507:	movzx  ecx,BYTE PTR [rbx+rax*8+0x268f]
 104650f:	movzx  eax,BYTE PTR [rax+r15*1]
 1046514:	add    ecx,eax
 1046516:	movzx  eax,BYTE PTR [r11+rbx*1+0x283c]
 104651f:	add    ecx,eax
 1046521:	lea    rdx,[r10+r10*2]
 1046525:	add    ecx,esi
 1046527:	cmp    ecx,DWORD PTR [r13+rdx*8+0x14]
 104652c:	jae    0x1046540
 104652e:	mov    DWORD PTR [r13+rdx*8+0x14],ecx
 1046533:	mov    DWORD PTR [r13+rdx*8+0x4],edi
 1046538:	mov    eax,DWORD PTR [r9]
 104653b:	mov    DWORD PTR [r13+rdx*8+0x0],eax
 1046540:	inc    r8d
 1046543:	inc    r10d
 1046546:	inc    r11
 1046549:	add    r9,0x4
 104654d:	cmp    r8d,r12d
 1046550:	jbe    0x10464ac
 1046556:	mov    r15d,DWORD PTR [rsp+0x28]
 104655b:	mov    r10d,DWORD PTR [rsp+0x98]
 1046563:	jmp    0x10462ea
 1046568:	lea    r14d,[r12+rdi*1]
 104656c:	movsxd rax,r12d
 104656f:	mov    esi,DWORD PTR [rbx+rax*4+0x70]
 1046573:	lea    rcx,[r14+r14*2]
 1046577:	mov    DWORD PTR [r13+rcx*8+0x0],esi
 104657c:	mov    DWORD PTR [r13+rcx*8+0x4],edi
 1046581:	cmp    esi,0x3
 1046584:	jne    0x10465a4
 1046586:	cmp    r12d,0x10
 104658a:	jle    0x10465a4
 104658c:	mov    r8d,edi
 104658f:	lea    edx,[rdi+0x1]
 1046592:	mov    rcx,rbx
 1046595:	sub    r8d,DWORD PTR [rbx+0x8]
 1046599:	add    r8d,0x5
 104659d:	call   0x10488b0
 10465a2:	jmp    0x10465cb
 10465a4:	mov    ebp,0x1
 10465a9:	cmp    r12d,ebp
 10465ac:	jbe    0x10465cb
 10465ae:	mov    eax,ebp
 10465b0:	lea    edx,[rbp+rdi*1+0x0]
 10465b4:	mov    rcx,rbx
 10465b7:	sub    eax,DWORD PTR [rbx+0x8]
 10465ba:	lea    r8d,[rax+rdi*1+0x4]
 10465bf:	call   0x10488b0
 10465c4:	inc    ebp
 10465c6:	cmp    ebp,r12d
 10465c9:	jb     0x10465ae
 10465cb:	mov    edi,r14d
 10465ce:	cmp    esi,0x3
 10465d1:	jb     0x10465e7
 10465d3:	mov    eax,DWORD PTR [rbx+0x68]
 10465d6:	mov    DWORD PTR [rbx+0x6c],eax
 10465d9:	mov    eax,DWORD PTR [rbx+0x64]
 10465dc:	mov    DWORD PTR [rbx+0x68],eax
 10465df:	lea    eax,[rsi-0x2]
 10465e2:	mov    DWORD PTR [rbx+0x64],eax
 10465e5:	jmp    0x10465f9
 10465e7:	test   esi,esi
 10465e9:	je     0x10465f9
 10465eb:	mov    eax,DWORD PTR [rbx+rsi*4+0x64]
 10465ef:	mov    edx,DWORD PTR [rbx+0x64]
 10465f2:	mov    DWORD PTR [rbx+0x64],eax
 10465f5:	mov    DWORD PTR [rbx+rsi*4+0x64],edx
 10465f9:	mov    r8d,DWORD PTR [rsp+0x20]
 10465fe:	mov    eax,edi
 1046600:	xor    esi,esi
 1046602:	lea    rcx,[rax+rax*2]
 1046606:	lea    r15d,[rsi+0x1]
 104660a:	mov    edx,DWORD PTR [r13+rcx*8+0x4]
 104660f:	mov    ecx,edx
 1046611:	mov    ebp,edx
 1046613:	add    esi,r15d
 1046616:	lea    rax,[rcx+rcx*2]
 104661a:	mov    edx,DWORD PTR [r13+rax*8+0x4]
 104661f:	lea    rax,[rcx+rcx*2]
 1046623:	mov    DWORD PTR [r13+rax*8+0x4],edi
 1046628:	mov    edi,ebp
 104662a:	cmp    ebp,r8d
 104662d:	jne    0x104660f
 104662f:	mov    eax,DWORD PTR [rbx+0x38]
 1046632:	lea    ecx,[rsi+rax*1]
 1046635:	cmp    ecx,0xfff8
 104663b:	jae    0x104664b
 104663d:	mov    eax,DWORD PTR [rbx+0x3c]
 1046640:	lea    ecx,[rsi+rax*1]
 1046643:	cmp    ecx,0x7ff8
 1046649:	jb     0x1046657
 104664b:	mov    edx,ebp
 104664d:	mov    rcx,rbx
 1046650:	call   0x1045f3c
 1046655:	jmp    0x104662f
 1046657:	mov    r8d,edi
 104665a:	lea    r9d,[rdi+0x1]
 104665e:	lea    r10,[r8+r8*2]
 1046662:	cmp    DWORD PTR [r13+r10*8+0x4],r9d
 1046667:	jbe    0x10466c8
 1046669:	mov    ecx,DWORD PTR [rbx+0x38]
 104666c:	mov    rdx,QWORD PTR [rbx+0x50]
 1046670:	mov    eax,r15d
 1046673:	mov    r8,rcx
 1046676:	and    ecx,0x7
 1046679:	shl    al,cl
 104667b:	shr    r8,0x3
 104667f:	or     BYTE PTR [r8+rdx*1],al
 1046683:	mov    dl,BYTE PTR [r13+r10*8+0x4]
 1046688:	mov    ecx,DWORD PTR [rbx+0x38]
 104668b:	mov    rax,QWORD PTR [rbx+0x48]
 104668f:	sub    dl,dil
 1046692:	sub    dl,0x2
 1046695:	mov    BYTE PTR [rcx+rax*1],dl
 1046698:	add    DWORD PTR [rbx+0x38],r15d
 104669c:	mov    eax,DWORD PTR [r13+r10*8+0x4]
 10466a1:	mov    r8d,DWORD PTR [rbx+0x3c]
 10466a5:	mov    rcx,QWORD PTR [rbx+0x40]
 10466a9:	lea    rdx,[rax+rax*2]
 10466ad:	mov    eax,DWORD PTR [r13+rdx*8+0x0]
 10466b2:	mov    DWORD PTR [rcx+r8*4],eax
 10466b6:	add    DWORD PTR [rbx+0x3c],r15d
 10466ba:	mov    edi,DWORD PTR [r13+r10*8+0x4]
 10466bf:	mov    DWORD PTR [rsp+0x80],edi
 10466c6:	jmp    0x10466e8
 10466c8:	mov    rax,QWORD PTR [rbx]
 10466cb:	mov    edx,DWORD PTR [rbx+0x38]
 10466ce:	mov    rcx,QWORD PTR [rbx+0x48]
 10466d2:	mov    al,BYTE PTR [r8+rax*1]
 10466d6:	mov    edi,r9d
 10466d9:	mov    DWORD PTR [rsp+0x80],r9d
 10466e1:	mov    BYTE PTR [rdx+rcx*1],al
 10466e4:	add    DWORD PTR [rbx+0x38],r15d
 10466e8:	add    esi,0xffffffff
 10466eb:	jne    0x1046657
 10466f1:	mov    eax,DWORD PTR [rbx+0x2574]
 10466f7:	cmp    DWORD PTR [rbx+0x38],eax
 10466fa:	jb     0x104670e
 10466fc:	mov    rcx,rbx
 10466ff:	call   0x1045f94
 1046704:	add    DWORD PTR [rbx+0x2574],0x1000
 104670e:	mov    esi,DWORD PTR [rsp+0x90]
 1046715:	xor    r13d,r13d
 1046718:	cmp    BYTE PTR [rbx+0x9b1],r13b
 104671f:	je     0x10460f1
 1046725:	cmp    DWORD PTR [rbx+0x38],0xfe00
 104672c:	jae    0x104673b
 104672e:	cmp    DWORD PTR [rbx+0x3c],0x7e00
 1046735:	jb     0x10460f1
 104673b:	lea    rdx,[rsp+0x80]
 1046743:	mov    rcx,rbx
 1046746:	call   0x1045e34
 104674b:	mov    edi,DWORD PTR [rsp+0x80]
 1046752:	cmp    eax,r13d
 1046755:	jne    0x10460ea
 104675b:	mov    edx,edi
 104675d:	mov    rcx,rbx
 1046760:	call   0x1045f3c
 1046765:	jmp    0x10460ea
 104676a:	movsxd rax,esi
 104676d:	mov    r12d,DWORD PTR [rbx+rax*4+0x70]
 1046772:	cmp    r12d,0x3
 1046776:	jne    0x1046795
 1046778:	cmp    esi,0x10
 104677b:	jle    0x1046795
 104677d:	mov    r8d,edi
 1046780:	lea    edx,[rdi+0x1]
 1046783:	mov    rcx,rbx
 1046786:	sub    r8d,DWORD PTR [rbx+0x8]
 104678a:	add    r8d,0x5
 104678e:	call   0x10488b0
 1046793:	jmp    0x10467ba
 1046795:	mov    ebp,r15d
 1046798:	cmp    esi,r15d
 104679b:	jbe    0x10467ba
 104679d:	mov    eax,ebp
 104679f:	lea    edx,[rbp+rdi*1+0x0]
 10467a3:	mov    rcx,rbx
 10467a6:	sub    eax,DWORD PTR [rbx+0x8]
 10467a9:	lea    r8d,[rax+rdi*1+0x4]
 10467ae:	call   0x10488b0
 10467b3:	add    ebp,r15d
 10467b6:	cmp    ebp,esi
 10467b8:	jb     0x104679d
 10467ba:	mov    ecx,DWORD PTR [rbx+0x38]
 10467bd:	mov    rdx,QWORD PTR [rbx+0x50]
 10467c1:	add    edi,esi
 10467c3:	mov    r8,rcx
 10467c6:	and    ecx,0x7
 10467c9:	mov    eax,r15d
 10467cc:	shl    al,cl
 10467ce:	shr    r8,0x3
 10467d2:	sub    sil,0x2
 10467d6:	or     BYTE PTR [r8+rdx*1],al
 10467da:	mov    ecx,DWORD PTR [rbx+0x38]
 10467dd:	mov    rax,QWORD PTR [rbx+0x48]
 10467e1:	mov    BYTE PTR [rcx+rax*1],sil
 10467e5:	mov    ecx,DWORD PTR [rbx+0x3c]
 10467e8:	add    DWORD PTR [rbx+0x38],r15d
 10467ec:	mov    rax,QWORD PTR [rbx+0x40]
 10467f0:	mov    DWORD PTR [rsp+0x80],edi
 10467f7:	mov    DWORD PTR [rax+rcx*4],r12d
 10467fb:	add    DWORD PTR [rbx+0x3c],r15d
 10467ff:	cmp    r12d,0x3
 1046803:	jb     0x104681b
 1046805:	mov    eax,DWORD PTR [rbx+0x68]
 1046808:	mov    DWORD PTR [rbx+0x6c],eax
 104680b:	mov    eax,DWORD PTR [rbx+0x64]
 104680e:	mov    DWORD PTR [rbx+0x68],eax
 1046811:	lea    eax,[r12-0x2]
 1046816:	mov    DWORD PTR [rbx+0x64],eax
 1046819:	jmp    0x1046830
 104681b:	cmp    r12d,r13d
 104681e:	je     0x1046830
 1046820:	mov    eax,DWORD PTR [rbx+r12*4+0x64]
 1046825:	mov    edx,DWORD PTR [rbx+0x64]
 1046828:	mov    DWORD PTR [rbx+0x64],eax
 104682b:	mov    DWORD PTR [rbx+r12*4+0x64],edx
 1046830:	cmp    DWORD PTR [rbx+0x38],0xfff8
 1046837:	jae    0x104675b
 104683d:	cmp    DWORD PTR [rbx+0x3c],0x7ff8
 1046844:	mov    esi,DWORD PTR [rsp+0x90]
 104684b:	jb     0x10460f1
 1046851:	jmp    0x104675b
 1046856:	mov    eax,edi
 1046858:	sub    eax,DWORD PTR [rbx+0x8]
 104685b:	cmp    DWORD PTR [rsp+0x88],0x8000
 1046866:	mov    DWORD PTR [rbx+0x9c0],eax
 104686c:	jge    0x10468a0
 104686e:	cmp    BYTE PTR [rbx+0x9b1],r13b
 1046875:	je     0x1046980
 104687b:	lea    rdx,[rsp+0x80]
 1046883:	mov    rcx,rbx
 1046886:	call   0x1045e34
 104688b:	mov    edi,DWORD PTR [rsp+0x80]
 1046892:	cmp    eax,r13d
 1046895:	je     0x1046980
 104689b:	jmp    0x10460f1
 10468a0:	lea    ebp,[rax+0x36]
 10468a3:	mov    esi,r15d
 10468a6:	mov    edx,edi
 10468a8:	mov    r8d,ebp
 10468ab:	mov    rcx,rbx
 10468ae:	sub    edx,esi
 10468b0:	call   0x104880c
 10468b5:	add    esi,r15d
 10468b8:	cmp    esi,0x32
 10468bb:	jbe    0x10468a6
 10468bd:	mov    eax,DWORD PTR [rbx]
 10468bf:	sub    eax,DWORD PTR [rbx+0x4378]
 10468c5:	add    eax,edi
 10468c7:	cmp    eax,DWORD PTR [rbx+0x8]
 10468ca:	jb     0x1046980
 10468d0:	sub    eax,DWORD PTR [rbx+0x8]
 10468d3:	cmp    eax,DWORD PTR [rbx+0x9bc]
 10468d9:	jb     0x1046980
 10468df:	cmp    BYTE PTR [rbx+0x9b1],r13b
 10468e6:	je     0x1046908
 10468e8:	lea    rdx,[rsp+0x80]
 10468f0:	mov    rcx,rbx
 10468f3:	call   0x1045e34
 10468f8:	mov    edi,DWORD PTR [rsp+0x80]
 10468ff:	cmp    eax,r13d
 1046902:	jne    0x10460ea
 1046908:	mov    rcx,QWORD PTR [rbx+0x4378]
 104690f:	mov    edx,DWORD PTR [rbx+0x9bc]
 1046915:	mov    r8d,DWORD PTR [rbx+0x8]
 1046919:	add    rdx,rcx
 104691c:	call   0x10497b2
 1046921:	mov    rcx,QWORD PTR [rbx+0x4380]
 1046928:	mov    eax,DWORD PTR [rbx+0x9bc]
 104692e:	mov    r8d,DWORD PTR [rbx+0x8]
 1046932:	lea    rdx,[rcx+rax*4]
 1046936:	shl    r8,0x2
 104693a:	call   0x10497b2
 104693f:	mov    rcx,QWORD PTR [rbx+0x4388]
 1046946:	mov    eax,DWORD PTR [rbx+0x9bc]
 104694c:	mov    r8d,DWORD PTR [rbx+0x8]
 1046950:	lea    rdx,[rcx+rax*4]
 1046954:	shl    r8,0x2
 1046958:	call   0x10497b2
 104695d:	mov    eax,DWORD PTR [rbx+0x9bc]
 1046963:	mov    r11d,edi
 1046966:	sub    r11d,DWORD PTR [rbx+0x8]
 104696a:	sub    QWORD PTR [rbx],rax
 104696d:	shl    rax,0x2
 1046971:	sub    QWORD PTR [rbx+0x18],rax
 1046975:	sub    QWORD PTR [rbx+0x20],rax
 1046979:	mov    DWORD PTR [rbx+0x9c0],r11d
 1046980:	mov    DWORD PTR [rbx+0x478],edi
 1046986:	add    rsp,0x38
 104698a:	pop    r15
 104698c:	pop    r14
 104698e:	pop    r13
 1046990:	pop    r12
 1046992:	pop    rdi
 1046993:	pop    rsi
 1046994:	pop    rbp
 1046995:	pop    rbx
 1046996:	ret    
 1046997:	int3   
 1046998:	int3   
 1046999:	int3   
 104699a:	int3   
 104699b:	int3   
 104699c:	int3   
 104699d:	int3   
 104699e:	int3   
 104699f:	int3   
 10469a0:	rex push rbx
 10469a2:	sub    rsp,0x20
 10469a6:	mov    edx,DWORD PTR [rcx+0x478]
 10469ac:	mov    r8d,0x8000
 10469b2:	mov    rbx,rcx
 10469b5:	sub    edx,DWORD PTR [rcx+0x4378]
 10469bb:	add    edx,DWORD PTR [rcx]
 10469bd:	call   0x10472ac
 10469c2:	xor    r10d,r10d
 10469c5:	cmp    eax,r10d
 10469c8:	mov    r11d,eax
 10469cb:	jle    0x1046aad
 10469d1:	mov    edx,DWORD PTR [rbx+0x478]
 10469d7:	lea    ecx,[rdx+rax*1]
 10469da:	cmp    ecx,edx
 10469dc:	jae    0x1046aa2
 10469e2:	mov    ecx,DWORD PTR [rbx+0x8]
 10469e5:	mov    rax,r10
 10469e8:	mov    r8d,0x10000
 10469ee:	add    ecx,ecx
 10469f0:	sub    edx,ecx
 10469f2:	mov    DWORD PTR [rbx+0x478],ecx
 10469f8:	sub    DWORD PTR [rbx+0x9c4],edx
 10469fe:	sub    DWORD PTR [rbx+0x9c0],edx
 1046a04:	mov    rcx,QWORD PTR [rbx+0x10]
 1046a08:	cmp    DWORD PTR [rax+rcx*1],edx
 1046a0b:	jbe    0x1046a12
 1046a0d:	sub    DWORD PTR [rax+rcx*1],edx
 1046a10:	jmp    0x1046a16
 1046a12:	mov    DWORD PTR [rax+rcx*1],r10d
 1046a16:	add    rax,0x4
 1046a1a:	sub    r8,0x1
 1046a1e:	jne    0x1046a04
 1046a20:	mov    ecx,DWORD PTR [rbx+0x9bc]
 1046a26:	mov    eax,DWORD PTR [rbx+0x8]
 1046a29:	lea    r8d,[rcx+rax*1+0x1101]
 1046a31:	cmp    r8d,r10d
 1046a34:	jbe    0x1046a91
 1046a36:	mov    rax,r10
 1046a39:	mov    r9d,r8d
 1046a3c:	mov    rcx,QWORD PTR [rbx+0x4380]
 1046a43:	cmp    DWORD PTR [rax+rcx*1],r10d
 1046a47:	je     0x1046a57
 1046a49:	cmp    DWORD PTR [rax+rcx*1],edx
 1046a4c:	jbe    0x1046a53
 1046a4e:	sub    DWORD PTR [rax+rcx*1],edx
 1046a51:	jmp    0x1046a57
 1046a53:	mov    DWORD PTR [rax+rcx*1],r10d
 1046a57:	add    rax,0x4
 1046a5b:	sub    r9,0x1
 1046a5f:	jne    0x1046a3c
 1046a61:	cmp    r8d,r10d
 1046a64:	jbe    0x1046a91
 1046a66:	mov    rax,r10
 1046a69:	mov    r9d,r8d
 1046a6c:	mov    rcx,QWORD PTR [rbx+0x4388]
 1046a73:	cmp    DWORD PTR [rax+rcx*1],r10d
 1046a77:	je     0x1046a87
 1046a79:	cmp    DWORD PTR [rax+rcx*1],edx
 1046a7c:	jbe    0x1046a83
 1046a7e:	sub    DWORD PTR [rax+rcx*1],edx
 1046a81:	jmp    0x1046a87
 1046a83:	mov    DWORD PTR [rax+rcx*1],r10d
 1046a87:	add    rax,0x4
 1046a8b:	sub    r9,0x1
 1046a8f:	jne    0x1046a6c
 1046a91:	mov    eax,edx
 1046a93:	add    QWORD PTR [rbx],rax
 1046a96:	shl    rax,0x2
 1046a9a:	add    QWORD PTR [rbx+0x18],rax
 1046a9e:	add    QWORD PTR [rbx+0x20],rax
 1046aa2:	mov    edx,r11d
 1046aa5:	mov    rcx,rbx
 1046aa8:	call   0x1046038
 1046aad:	add    rsp,0x20
 1046ab1:	pop    rbx
 1046ab2:	ret    
 1046ab3:	int3   
 1046ab4:	int3   
 1046ab5:	int3   
 1046ab6:	int3   
 1046ab7:	int3   
 1046ab8:	int3   
 1046ab9:	int3   
 1046aba:	int3   
 1046abb:	int3   
 1046abc:	mov    QWORD PTR [rsp+0x8],rbx
 1046ac1:	mov    QWORD PTR [rsp+0x10],rsi
 1046ac6:	push   rdi
 1046ac7:	sub    rsp,0x30
 1046acb:	lea    rax,[rcx+0x4356]
 1046ad2:	lea    r8,[rcx+0x4336]
 1046ad9:	lea    r9,[rcx+0x4366]
 1046ae0:	mov    edx,0x8
 1046ae5:	mov    DWORD PTR [rsp+0x28],0x1
 1046aed:	mov    rdi,rcx
 1046af0:	mov    QWORD PTR [rsp+0x20],rax
 1046af5:	call   0x10490d4
 1046afa:	xor    ebx,ebx
 1046afc:	movzx  r8d,BYTE PTR [rdi+rbx*1+0x4366]
 1046b05:	mov    edx,0x3
 1046b0a:	mov    rcx,rdi
 1046b0d:	call   0x1047224
 1046b12:	inc    rbx
 1046b15:	cmp    rbx,0x8
 1046b19:	jl     0x1046afc
 1046b1b:	mov    rbx,QWORD PTR [rsp+0x40]
 1046b20:	mov    rsi,QWORD PTR [rsp+0x48]
 1046b25:	add    rsp,0x30
 1046b29:	pop    rdi
 1046b2a:	ret    
 1046b2b:	int3   
 1046b2c:	int3   
 1046b2d:	int3   
 1046b2e:	int3   
 1046b2f:	int3   
 1046b30:	int3   
 1046b31:	int3   
 1046b32:	int3   
 1046b33:	int3   
 1046b34:	mov    QWORD PTR [rsp+0x8],rbx
 1046b39:	push   rdi
 1046b3a:	sub    rsp,0x30
 1046b3e:	mov    ebx,edx
 1046b40:	mov    edx,DWORD PTR [rcx+0x8a0]
 1046b46:	lea    rax,[rcx+0x3430]
 1046b4d:	lea    r9,[rcx+0x2588]
 1046b54:	lea    r8,[rcx+0x2940]
 1046b5b:	lea    edx,[rdx*8+0x100]
 1046b62:	mov    DWORD PTR [rsp+0x28],ebx
 1046b66:	mov    rdi,rcx
 1046b69:	mov    QWORD PTR [rsp+0x20],rax
 1046b6e:	call   0x10490d4
 1046b73:	lea    r11,[rdi+0x404a]
 1046b7a:	lea    r9,[rdi+0x2845]
 1046b81:	lea    r8,[rdi+0x3c66]
 1046b88:	mov    edx,0xf9
 1046b8d:	mov    rcx,rdi
 1046b90:	mov    DWORD PTR [rsp+0x28],ebx
 1046b94:	mov    QWORD PTR [rsp+0x20],r11
 1046b99:	call   0x10490d4
 1046b9e:	lea    r11,[rdi+0x4356]
 1046ba5:	lea    r9,[rdi+0x4366]
 1046bac:	lea    r8,[rdi+0x4336]
 1046bb3:	mov    edx,0x8
 1046bb8:	mov    rcx,rdi
 1046bbb:	mov    DWORD PTR [rsp+0x28],0x1
 1046bc3:	mov    QWORD PTR [rsp+0x20],r11
 1046bc8:	call   0x10490d4
 1046bcd:	mov    rbx,QWORD PTR [rsp+0x40]
 1046bd2:	add    rsp,0x30
 1046bd6:	pop    rdi
 1046bd7:	ret    
 1046bd8:	int3   
 1046bd9:	int3   
 1046bda:	int3   
 1046bdb:	int3   
 1046bdc:	int3   
 1046bdd:	int3   
 1046bde:	int3   
 1046bdf:	int3   
 1046be0:	rex push rbx
 1046be2:	push   rbp
 1046be3:	push   rsi
 1046be4:	push   rdi
 1046be5:	push   r12
 1046be7:	push   r13
 1046be9:	push   r14
 1046beb:	push   r15
 1046bed:	sub    rsp,0xf8
 1046bf4:	mov    rax,QWORD PTR [rip+0x1cc75]        # 0x1063870
 1046bfb:	xor    rax,rsp
 1046bfe:	mov    QWORD PTR [rsp+0xe0],rax
 1046c06:	mov    rbp,rdx
 1046c09:	xor    edx,edx
 1046c0b:	mov    rsi,r8
 1046c0e:	mov    QWORD PTR [rsp+0x30],r8
 1046c13:	mov    r14,rcx
 1046c16:	lea    r8d,[rdx+0x60]
 1046c1a:	lea    rcx,[rsp+0x50]
 1046c1f:	movsxd r15,r9d
 1046c22:	call   0x104026c
 1046c27:	xor    r8d,r8d
 1046c2a:	lea    rbx,[rip+0xfffffffffffc3727]        # 0x100a358
 1046c31:	lea    edi,[r8+0x1]
 1046c35:	lea    r11d,[r8+0x33]
 1046c39:	lea    r10d,[r8+0x5]
 1046c3d:	test   r15d,r15d
 1046c40:	jle    0x1046cd9
 1046c46:	lea    eax,[r8+0x1]
 1046c4a:	xor    edx,edx
 1046c4c:	movsxd rcx,eax
 1046c4f:	movsxd rax,r8d
 1046c52:	cmp    rcx,r15
 1046c55:	jge    0x1046cb8
 1046c57:	mov    r9b,BYTE PTR [rax+rbp*1]
 1046c5b:	cmp    BYTE PTR [rcx+rbp*1],r9b
 1046c5f:	jne    0x1046c6b
 1046c61:	add    rcx,rdi
 1046c64:	add    edx,edi
 1046c66:	cmp    rcx,r15
 1046c69:	jl     0x1046c5b
 1046c6b:	cmp    edx,0x4
 1046c6e:	jl     0x1046cb8
 1046c70:	cmp    BYTE PTR [rax+rbp*1],0x0
 1046c74:	jne    0x1046c90
 1046c76:	cmp    edx,r11d
 1046c79:	cmovg  edx,r11d
 1046c7d:	cmp    edx,0x13
 1046c80:	jg     0x1046c89
 1046c82:	add    WORD PTR [rsp+0x72],di
 1046c87:	jmp    0x1046cb1
 1046c89:	add    WORD PTR [rsp+0x74],di
 1046c8e:	jmp    0x1046cb1
 1046c90:	movzx  ecx,BYTE PTR [rax+rsi*1]
 1046c94:	movzx  eax,BYTE PTR [rax+rbp*1]
 1046c98:	cmp    edx,r10d
 1046c9b:	cmovg  edx,r10d
 1046c9f:	sub    rcx,rax
 1046ca2:	movzx  eax,BYTE PTR [rcx+rbx*1+0x11]
 1046ca7:	add    WORD PTR [rsp+rax*2+0x50],di
 1046cac:	add    WORD PTR [rsp+0x76],di
 1046cb1:	lea    r8d,[r8+rdx*1-0x1]
 1046cb6:	jmp    0x1046ccd
 1046cb8:	movzx  ecx,BYTE PTR [rax+rsi*1]
 1046cbc:	movzx  eax,BYTE PTR [rax+rbp*1]
 1046cc0:	sub    rcx,rax
 1046cc3:	movzx  eax,BYTE PTR [rcx+rbx*1+0x11]
 1046cc8:	add    WORD PTR [rsp+rax*2+0x50],di
 1046ccd:	add    r8d,edi
 1046cd0:	cmp    r8d,r15d
 1046cd3:	jl     0x1046c46
 1046cd9:	lea    rax,[rsp+0xb0]
 1046ce1:	lea    r9,[rsp+0x38]
 1046ce6:	lea    r8,[rsp+0x50]
 1046ceb:	mov    edx,0x14
 1046cf0:	mov    rcx,r14
 1046cf3:	mov    DWORD PTR [rsp+0x28],edi
 1046cf7:	mov    QWORD PTR [rsp+0x20],rax
 1046cfc:	call   0x10490d4
 1046d01:	xor    ebx,ebx
 1046d03:	movsx  r8d,BYTE PTR [rsp+rbx*1+0x38]
 1046d09:	mov    edx,0x4
 1046d0e:	mov    rcx,r14
 1046d11:	call   0x1047224
 1046d16:	add    rbx,rdi
 1046d19:	cmp    rbx,0x14
 1046d1d:	jl     0x1046d03
 1046d1f:	xor    edi,edi
 1046d21:	test   r15d,r15d
 1046d24:	jle    0x1046ddd
 1046d2a:	lea    eax,[rdi+0x1]
 1046d2d:	xor    ebx,ebx
 1046d2f:	movsxd r12,edi
 1046d32:	movsxd rcx,eax
 1046d35:	cmp    rcx,r15
 1046d38:	jge    0x1046d7f
 1046d3a:	mov    al,BYTE PTR [r12+rbp*1]
 1046d3e:	cmp    BYTE PTR [rcx+rbp*1],al
 1046d41:	jne    0x1046d4d
 1046d43:	inc    rcx
 1046d46:	inc    ebx
 1046d48:	cmp    rcx,r15
 1046d4b:	jl     0x1046d3e
 1046d4d:	cmp    ebx,0x4
 1046d50:	jl     0x1046d7f
 1046d52:	cmp    BYTE PTR [r12+rbp*1],0x0
 1046d57:	jne    0x1046d70
 1046d59:	mov    eax,0x33
 1046d5e:	cmp    ebx,eax
 1046d60:	cmovg  ebx,eax
 1046d63:	cmp    ebx,0x13
 1046d66:	setg   sil
 1046d6a:	add    sil,0x11
 1046d6e:	jmp    0x1046d98
 1046d70:	mov    eax,0x5
 1046d75:	mov    sil,0x13
 1046d78:	cmp    ebx,eax
 1046d7a:	cmovg  ebx,eax
 1046d7d:	jmp    0x1046d98
 1046d7f:	movzx  ecx,BYTE PTR [r12+rsi*1]
 1046d84:	movzx  eax,BYTE PTR [r12+rbp*1]
 1046d89:	sub    rcx,rax
 1046d8c:	lea    rax,[rip+0xfffffffffffc35c5]        # 0x100a358
 1046d93:	mov    sil,BYTE PTR [rcx+rax*1+0x11]
 1046d98:	movsx  rax,sil
 1046d9c:	mov    rcx,r14
 1046d9f:	movzx  r8d,WORD PTR [rsp+rax*2+0xb0]
 1046da8:	movsx  edx,BYTE PTR [rsp+rax*1+0x38]
 1046dad:	call   0x1047224
 1046db2:	cmp    sil,0x11
 1046db6:	jne    0x1046e0f
 1046db8:	lea    r8d,[rbx-0x4]
 1046dbc:	mov    edx,0x4
 1046dc1:	mov    rcx,r14
 1046dc4:	call   0x1047224
 1046dc9:	lea    edi,[rdi+rbx*1-0x1]
 1046dcd:	mov    rsi,QWORD PTR [rsp+0x30]
 1046dd2:	inc    edi
 1046dd4:	cmp    edi,r15d
 1046dd7:	jl     0x1046d2a
 1046ddd:	mov    r8,r15
 1046de0:	mov    rdx,rbp
 1046de3:	mov    rcx,rsi
 1046de6:	call   0x10402e4
 1046deb:	mov    rcx,QWORD PTR [rsp+0xe0]
 1046df3:	xor    rcx,rsp
 1046df6:	call   0x103ff40
 1046dfb:	add    rsp,0xf8
 1046e02:	pop    r15
 1046e04:	pop    r14
 1046e06:	pop    r13
 1046e08:	pop    r12
 1046e0a:	pop    rdi
 1046e0b:	pop    rsi
 1046e0c:	pop    rbp
 1046e0d:	pop    rbx
 1046e0e:	ret    
 1046e0f:	cmp    sil,0x12
 1046e13:	jne    0x1046e20
 1046e15:	lea    r8d,[rbx-0x14]
 1046e19:	mov    edx,0x5
 1046e1e:	jmp    0x1046dc1
 1046e20:	cmp    sil,0x13
 1046e24:	jne    0x1046dcd
 1046e26:	lea    r8d,[rbx-0x4]
 1046e2a:	mov    edx,0x1
 1046e2f:	mov    rcx,r14
 1046e32:	call   0x1047224
 1046e37:	movzx  eax,BYTE PTR [r12+rbp*1]
 1046e3c:	mov    rsi,QWORD PTR [rsp+0x30]
 1046e41:	movzx  r11d,BYTE PTR [r12+rsi*1]
 1046e46:	mov    rcx,r14
 1046e49:	sub    r11,rax
 1046e4c:	lea    rax,[rip+0xfffffffffffc3505]        # 0x100a358
 1046e53:	movsx  rax,BYTE PTR [r11+rax*1+0x11]
 1046e59:	movzx  r8d,WORD PTR [rsp+rax*2+0xb0]
 1046e62:	movsx  edx,BYTE PTR [rsp+rax*1+0x38]
 1046e67:	call   0x1047224
 1046e6c:	lea    edi,[rdi+rbx*1-0x1]
 1046e70:	jmp    0x1046dd2
 1046e75:	int3   
 1046e76:	int3   
 1046e77:	int3   
 1046e78:	int3   
 1046e79:	int3   
 1046e7a:	int3   
 1046e7b:	int3   
 1046e7c:	rex push rbx
 1046e7e:	sub    rsp,0x20
 1046e82:	lea    r8,[rcx+0x39a8]
 1046e89:	lea    rdx,[rcx+0x2588]
 1046e90:	mov    r9d,0x100
 1046e96:	mov    rbx,rcx
 1046e99:	call   0x1046be0
 1046e9e:	mov    r11d,DWORD PTR [rbx+0x8a0]
 1046ea5:	mov    r9d,0x1bc
 1046eab:	shl    r11d,0x3
 1046eaf:	lea    r8,[rbx+0x3aa8]
 1046eb6:	cmp    r11d,r9d
 1046eb9:	lea    rdx,[rbx+0x2688]
 1046ec0:	mov    rcx,rbx
 1046ec3:	cmovb  r9d,r11d
 1046ec7:	call   0x1046be0
 1046ecc:	lea    r8,[rbx+0x423c]
 1046ed3:	lea    rdx,[rbx+0x2845]
 1046eda:	mov    r9d,0xf9
 1046ee0:	mov    rcx,rbx
 1046ee3:	add    rsp,0x20
 1046ee7:	pop    rbx
 1046ee8:	jmp    0x1046be0
 1046eed:	int3   
 1046eee:	int3   
 1046eef:	int3   
 1046ef0:	int3   
 1046ef1:	int3   
 1046ef2:	int3   
 1046ef3:	int3   
 1046ef4:	mov    al,BYTE PTR [rcx+0x57c]
 1046efa:	add    al,0x12
 1046efc:	movzx  edx,al
 1046eff:	cmp    edx,DWORD PTR [rcx+0x8a0]
 1046f05:	jae    0x1046f32
 1046f07:	lea    eax,[rdx*8+0x100]
 1046f0e:	lea    r8,[rcx+rdx*8+0x2688]
 1046f16:	cmp    eax,0x2bd
 1046f1b:	jae    0x1046f21
 1046f1d:	mov    BYTE PTR [r8],0x64
 1046f21:	inc    edx
 1046f23:	add    eax,0x8
 1046f26:	add    r8,0x8
 1046f2a:	cmp    edx,DWORD PTR [rcx+0x8a0]
 1046f30:	jb     0x1046f16
 1046f32:	repz ret 
 1046f34:	int3   
 1046f35:	int3   
 1046f36:	int3   
 1046f37:	int3   
 1046f38:	int3   
 1046f39:	int3   
 1046f3a:	int3   
 1046f3b:	int3   
 1046f3c:	mov    r8d,0x100
 1046f42:	mov    rdx,rcx
 1046f45:	lea    rax,[rcx+0x2588]
 1046f4c:	mov    rcx,r8
 1046f4f:	xor    r9d,r9d
 1046f52:	cmp    BYTE PTR [rax],r9b
 1046f55:	jne    0x1046f5a
 1046f57:	mov    BYTE PTR [rax],0xb
 1046f5a:	inc    rax
 1046f5d:	sub    rcx,0x1
 1046f61:	jne    0x1046f52
 1046f63:	mov    eax,DWORD PTR [rdx+0x8a0]
 1046f69:	lea    eax,[rax*8+0x100]
 1046f70:	cmp    eax,r8d
 1046f73:	jbe    0x1046f9c
 1046f75:	lea    rcx,[rdx+0x2688]
 1046f7c:	cmp    BYTE PTR [rcx],r9b
 1046f7f:	jne    0x1046f84
 1046f81:	mov    BYTE PTR [rcx],0xc
 1046f84:	mov    eax,DWORD PTR [rdx+0x8a0]
 1046f8a:	inc    r8d
 1046f8d:	inc    rcx
 1046f90:	lea    eax,[rax*8+0x100]
 1046f97:	cmp    r8d,eax
 1046f9a:	jb     0x1046f7c
 1046f9c:	lea    rax,[rdx+0x2845]
 1046fa3:	mov    ecx,0xf9
 1046fa8:	cmp    BYTE PTR [rax],r9b
 1046fab:	jne    0x1046fb0
 1046fad:	mov    BYTE PTR [rax],0x8
 1046fb0:	inc    rax
 1046fb3:	sub    rcx,0x1
 1046fb7:	jne    0x1046fa8
 1046fb9:	mov    rcx,rdx
 1046fbc:	jmp    0x1046ef4
 1046fc1:	int3   
 1046fc2:	int3   
 1046fc3:	int3   
 1046fc4:	int3   
 1046fc5:	int3   
 1046fc6:	int3   
 1046fc7:	int3   
 1046fc8:	mov    QWORD PTR [rsp+0x20],rbx
 1046fcd:	push   rdi
 1046fce:	sub    rsp,0x10
 1046fd2:	mov    rax,QWORD PTR [rip+0x1c897]        # 0x1063870
 1046fd9:	xor    rax,rsp
 1046fdc:	mov    QWORD PTR [rsp+0x8],rax
 1046fe1:	cmp    DWORD PTR [rcx+0x8a8],0x0
 1046fe8:	mov    r9,rcx
 1046feb:	je     0x1046ff9
 1046fed:	and    DWORD PTR [rcx+0x8a4],0x0
 1046ff4:	jmp    0x1047110
 1046ff9:	mov    ecx,DWORD PTR [rcx+0x9d4]
 1046fff:	add    ecx,r8d
 1047002:	cmp    ecx,0xa
 1047005:	jae    0x104701f
 1047007:	and    DWORD PTR [r9+0x8a4],0x0
 104700f:	mov    DWORD PTR [r9+0x8a8],0x1
 104701a:	jmp    0x1047110
 104701f:	cmp    r8d,0x6
 1047023:	jg     0x1047031
 1047025:	mov    DWORD PTR [r9+0x9d4],ecx
 104702c:	jmp    0x1047110
 1047031:	lea    rcx,[rsp]
 1047035:	movsxd r11,r8d
 1047038:	add    r11,rdx
 104703b:	mov    eax,DWORD PTR [r11-0x6]
 104703f:	mov    DWORD PTR [rcx],eax
 1047041:	movzx  eax,WORD PTR [r11-0x2]
 1047046:	mov    WORD PTR [rcx+0x4],ax
 104704a:	lea    eax,[r8-0x6]
 104704e:	movsxd rcx,eax
 1047051:	movabs rax,0xe8e8e8e8e8e8e8e8
 104705b:	mov    DWORD PTR [rcx+rdx*1],eax
 104705e:	mov    WORD PTR [rcx+rdx*1+0x4],ax
 1047063:	mov    eax,DWORD PTR [r9+0x9d4]
 104706a:	lea    edi,[rax+r8*1-0xa]
 104706f:	jmp    0x104707b
 1047071:	inc    rdx
 1047074:	inc    DWORD PTR [r9+0x9d4]
 104707b:	cmp    BYTE PTR [rdx],0xe8
 104707e:	jne    0x1047071
 1047080:	mov    r8d,DWORD PTR [r9+0x9d4]
 1047087:	cmp    r8d,edi
 104708a:	jae    0x10470f3
 104708c:	movzx  eax,BYTE PTR [rdx+0x3]
 1047090:	movzx  ebx,BYTE PTR [rdx+0x4]
 1047094:	shl    ebx,0x8
 1047097:	or     ebx,eax
 1047099:	movzx  eax,BYTE PTR [rdx+0x2]
 104709d:	shl    ebx,0x8
 10470a0:	or     ebx,eax
 10470a2:	movzx  eax,BYTE PTR [rdx+0x1]
 10470a6:	shl    ebx,0x8
 10470a9:	or     ebx,eax
 10470ab:	lea    ecx,[r8+rbx*1]
 10470af:	test   ecx,ecx
 10470b1:	js     0x10470e5
 10470b3:	mov    r10d,DWORD PTR [r9+0x8a4]
 10470ba:	lea    eax,[r10+r8*1]
 10470be:	cmp    ecx,eax
 10470c0:	jae    0x10470e5
 10470c2:	cmp    ecx,r10d
 10470c5:	jb     0x10470cc
 10470c7:	mov    ecx,ebx
 10470c9:	sub    ecx,r10d
 10470cc:	mov    eax,ecx
 10470ce:	mov    BYTE PTR [rdx+0x1],cl
 10470d1:	shr    eax,0x8
 10470d4:	mov    BYTE PTR [rdx+0x2],al
 10470d7:	mov    eax,ecx
 10470d9:	shr    eax,0x10
 10470dc:	shr    ecx,0x18
 10470df:	mov    BYTE PTR [rdx+0x4],cl
 10470e2:	mov    BYTE PTR [rdx+0x3],al
 10470e5:	add    rdx,0x5
 10470e9:	add    DWORD PTR [r9+0x9d4],0x5
 10470f1:	jmp    0x104707b
 10470f3:	lea    rcx,[rsp]
 10470f7:	mov    eax,DWORD PTR [rcx]
 10470f9:	mov    DWORD PTR [r11-0x6],eax
 10470fd:	movzx  eax,WORD PTR [rcx+0x4]
 1047101:	mov    WORD PTR [r11-0x2],ax
 1047106:	lea    eax,[rdi+0xa]
 1047109:	mov    DWORD PTR [r9+0x9d4],eax
 1047110:	mov    rcx,QWORD PTR [rsp+0x8]
 1047115:	xor    rcx,rsp
 1047118:	call   0x103ff40
 104711d:	mov    rbx,QWORD PTR [rsp+0x38]
 1047122:	add    rsp,0x10
 1047126:	pop    rdi
 1047127:	ret    
 1047128:	int3   
 1047129:	int3   
 104712a:	int3   
 104712b:	int3   
 104712c:	int3   
 104712d:	int3   
 104712e:	int3   
 104712f:	int3   
 1047130:	mov    QWORD PTR [rsp+0x8],rbx
 1047135:	mov    QWORD PTR [rsp+0x10],rsi
 104713a:	push   rdi
 104713b:	sub    rsp,0x20
 104713f:	mov    edi,DWORD PTR [rcx+0x9d0]
 1047145:	mov    rax,rdx
 1047148:	mov    rsi,rcx
 104714b:	test   edi,edi
 104714d:	jg     0x1047153
 104714f:	xor    eax,eax
 1047151:	jmp    0x104717e
 1047153:	mov    rdx,QWORD PTR [rcx+0x9c8]
 104715a:	cmp    r8d,edi
 104715d:	mov    rcx,rax
 1047160:	cmovl  edi,r8d
 1047164:	movsxd rbx,edi
 1047167:	mov    r8,rbx
 104716a:	call   0x10402e4
 104716f:	sub    DWORD PTR [rsi+0x9d0],edi
 1047175:	add    QWORD PTR [rsi+0x9c8],rbx
 104717c:	mov    eax,edi
 104717e:	mov    rbx,QWORD PTR [rsp+0x30]
 1047183:	mov    rsi,QWORD PTR [rsp+0x38]
 1047188:	add    rsp,0x20
 104718c:	pop    rdi
 104718d:	ret    
 104718e:	int3   
 104718f:	int3   
 1047190:	int3   
 1047191:	int3   
 1047192:	int3   
 1047193:	int3   
 1047194:	and    DWORD PTR [rcx+0x9d4],0x0
 104719b:	and    DWORD PTR [rcx+0x8a8],0x0
 10471a2:	ret    
 10471a3:	int3   
 10471a4:	int3   
 10471a5:	int3   
 10471a6:	int3   
 10471a7:	int3   
 10471a8:	int3   
 10471a9:	int3   
 10471aa:	int3   
 10471ab:	int3   
 10471ac:	rex push rbx
 10471ae:	sub    rsp,0x20
 10471b2:	mov    rbx,rcx
 10471b5:	mov    rcx,QWORD PTR [rcx+0x880]
 10471bc:	test   rcx,rcx
 10471bf:	je     0x10471cf
 10471c1:	call   QWORD PTR [rbx+0x43a8]
 10471c7:	and    QWORD PTR [rbx+0x880],0x0
 10471cf:	add    rsp,0x20
 10471d3:	pop    rbx
 10471d4:	ret    
 10471d5:	int3   
 10471d6:	int3   
 10471d7:	int3   
 10471d8:	int3   
 10471d9:	int3   
 10471da:	int3   
 10471db:	int3   
 10471dc:	rex push rbx
 10471de:	sub    rsp,0x20
 10471e2:	mov    rbx,rcx
 10471e5:	mov    ecx,0x9800
 10471ea:	call   QWORD PTR [rbx+0x43a0]
 10471f0:	mov    QWORD PTR [rbx+0x880],rax
 10471f7:	test   rax,rax
 10471fa:	je     0x1047215
 10471fc:	mov    QWORD PTR [rbx+0x888],rax
 1047203:	add    rax,0x97c0
 1047209:	mov    QWORD PTR [rbx+0x890],rax
 1047210:	mov    eax,0x1
 1047215:	add    rsp,0x20
 1047219:	pop    rbx
 104721a:	ret    
 104721b:	int3   
 104721c:	int3   
 104721d:	int3   
 104721e:	int3   
 104721f:	int3   
 1047220:	int3   
 1047221:	int3   
 1047222:	int3   
 1047223:	int3   
 1047224:	movsx  r9d,BYTE PTR [rcx+0x2c]
 1047229:	mov    r10,rcx
 104722c:	mov    ecx,r9d
 104722f:	sub    r9b,dl
 1047232:	sub    ecx,edx
 1047234:	mov    dl,0x10
 1047236:	mov    BYTE PTR [r10+0x2c],r9b
 104723a:	shl    r8d,cl
 104723d:	or     DWORD PTR [r10+0x28],r8d
 1047241:	cmp    r9b,dl
 1047244:	jg     0x10472a3
 1047246:	mov    rax,QWORD PTR [r10+0x890]
 104724d:	cmp    QWORD PTR [r10+0x888],rax
 1047254:	jb     0x104726c
 1047256:	mov    rax,QWORD PTR [r10+0x880]
 104725d:	mov    DWORD PTR [r10+0x30],0x1
 1047265:	mov    QWORD PTR [r10+0x888],rax
 104726c:	mov    rcx,QWORD PTR [r10+0x888]
 1047273:	mov    al,BYTE PTR [r10+0x2a]
 1047277:	mov    BYTE PTR [rcx],al
 1047279:	inc    QWORD PTR [r10+0x888]
 1047280:	mov    rcx,QWORD PTR [r10+0x888]
 1047287:	mov    al,BYTE PTR [r10+0x2b]
 104728b:	mov    BYTE PTR [rcx],al
 104728d:	inc    QWORD PTR [r10+0x888]
 1047294:	shl    DWORD PTR [r10+0x28],0x10
 1047299:	add    BYTE PTR [r10+0x2c],dl
 104729d:	cmp    BYTE PTR [r10+0x2c],dl
 10472a1:	jle    0x1047246
 10472a3:	repz ret 
 10472a5:	int3   
 10472a6:	int3   
 10472a7:	int3   
 10472a8:	int3   
 10472a9:	int3   
 10472aa:	int3   
 10472ab:	int3   
 10472ac:	mov    QWORD PTR [rsp+0x8],rbx
 10472b1:	mov    QWORD PTR [rsp+0x10],rsi
 10472b6:	push   rdi
 10472b7:	sub    rsp,0x20
 10472bb:	mov    rbx,rcx
 10472be:	test   r8d,r8d
 10472c1:	jg     0x10472c7
 10472c3:	xor    eax,eax
 10472c5:	jmp    0x1047312
 10472c7:	mov    rax,QWORD PTR [rcx+0x4378]
 10472ce:	mov    esi,edx
 10472d0:	lea    rdx,[rsi+rax*1]
 10472d4:	call   0x1047130
 10472d9:	mov    edi,eax
 10472db:	test   eax,eax
 10472dd:	js     0x10472c3
 10472df:	cmp    DWORD PTR [rbx+0x8a4],0x0
 10472e6:	je     0x1047312
 10472e8:	cmp    DWORD PTR [rbx+0x4390],0x8000
 10472f2:	jae    0x1047312
 10472f4:	mov    rax,QWORD PTR [rbx+0x4378]
 10472fb:	mov    r8d,edi
 10472fe:	mov    rcx,rbx
 1047301:	lea    rdx,[rsi+rax*1]
 1047305:	call   0x1046fc8
 104730a:	inc    DWORD PTR [rbx+0x4390]
 1047310:	mov    eax,edi
 1047312:	mov    rbx,QWORD PTR [rsp+0x30]
 1047317:	mov    rsi,QWORD PTR [rsp+0x38]
 104731c:	add    rsp,0x20
 1047320:	pop    rdi
 1047321:	ret    
 1047322:	int3   
 1047323:	int3   
 1047324:	int3   
 1047325:	int3   
 1047326:	int3   
 1047327:	int3   
 1047328:	xor    eax,eax
 104732a:	add    rcx,0x8b1
 1047331:	xor    dl,dl
 1047333:	mov    r8d,eax
 1047336:	test   eax,eax
 1047338:	je     0x1047347
 104733a:	test   r8b,0x1
 104733e:	je     0x1047342
 1047340:	inc    dl
 1047342:	sar    r8d,1
 1047345:	jne    0x104733a
 1047347:	inc    eax
 1047349:	mov    BYTE PTR [rcx],dl
 104734b:	inc    rcx
 104734e:	cmp    eax,0x100
 1047353:	jl     0x1047331
 1047355:	repz ret 
 1047357:	int3   
 1047358:	int3   
 1047359:	int3   
 104735a:	int3   
 104735b:	int3   
 104735c:	int3   
 104735d:	int3   
 104735e:	int3   
 104735f:	int3   
 1047360:	mov    rax,rsp
 1047363:	mov    QWORD PTR [rax+0x8],rbx
 1047367:	mov    QWORD PTR [rax+0x10],rbp
 104736b:	mov    QWORD PTR [rax+0x18],rsi
 104736f:	mov    QWORD PTR [rax+0x20],rdi
 1047373:	push   r12
 1047375:	sub    rsp,0x20
 1047379:	mov    edi,0x2
 104737e:	mov    rbp,rcx
 1047381:	mov    BYTE PTR [rcx+0x47c],0x0
 1047388:	lea    esi,[rdi+0x2]
 104738b:	mov    BYTE PTR [rcx+0x47d],0x1
 1047392:	mov    BYTE PTR [rcx+0x47f],0x3
 1047399:	mov    r12,rsi
 104739c:	mov    BYTE PTR [rcx+0x47e],dil
 10473a3:	test   edi,edi
 10473a5:	jle    0x10473bf
 10473a7:	lea    rcx,[r12+rbp*1+0x47c]
 10473af:	mov    r8d,edi
 10473b2:	mov    dl,sil
 10473b5:	mov    ebx,edi
 10473b7:	call   0x104026c
 10473bc:	add    r12,rbx
 10473bf:	inc    sil
 10473c2:	test   edi,edi
 10473c4:	jle    0x10473de
 10473c6:	lea    rcx,[r12+rbp*1+0x47c]
 10473ce:	mov    r8d,edi
 10473d1:	mov    dl,sil
 10473d4:	mov    ebx,edi
 10473d6:	call   0x104026c
 10473db:	add    r12,rbx
 10473de:	inc    sil
 10473e1:	add    edi,edi
 10473e3:	cmp    r12,0x400
 10473ea:	jl     0x10473a3
 10473ec:	mov    rbx,QWORD PTR [rsp+0x30]
 10473f1:	mov    rbp,QWORD PTR [rsp+0x38]
 10473f6:	mov    rsi,QWORD PTR [rsp+0x40]
 10473fb:	mov    rdi,QWORD PTR [rsp+0x48]
 1047400:	add    rsp,0x20
 1047404:	pop    r12
 1047406:	ret    
 1047407:	int3   
 1047408:	int3   
 1047409:	int3   
 104740a:	int3   
 104740b:	int3   
 104740c:	int3   
 104740d:	int3   
 104740e:	int3   
 104740f:	int3   
 1047410:	rex push rbx
 1047412:	push   rbp
 1047413:	push   rsi
 1047414:	push   rdi
 1047415:	push   r12
 1047417:	push   r13
 1047419:	push   r14
 104741b:	push   r15
 104741d:	sub    rsp,0xcc8
 1047424:	mov    rax,QWORD PTR [rip+0x1c445]        # 0x1063870
 104742b:	xor    rax,rsp
 104742e:	mov    QWORD PTR [rsp+0xcb0],rax
 1047436:	mov    ebp,DWORD PTR [rcx+0x8a0]
 104743c:	movsxd rsi,r9d
 104743f:	mov    r12d,r8d
 1047442:	lea    eax,[rbp*8+0x100]
 1047449:	mov    r13d,edx
 104744c:	mov    rdi,rcx
 104744f:	mov    DWORD PTR [rsp+0x20],ebp
 1047453:	cmp    eax,0x320
 1047458:	jb     0x1047461
 104745a:	xor    eax,eax
 104745c:	jmp    0x10476f1
 1047461:	movsxd rbx,eax
 1047464:	lea    rcx,[rsp+0x30]
 1047469:	xor    edx,edx
 104746b:	add    rbx,rbx
 104746e:	mov    r8,rbx
 1047471:	call   0x104026c
 1047476:	lea    rcx,[rsp+0x670]
 104747e:	mov    r8,rbx
 1047481:	xor    edx,edx
 1047483:	call   0x104026c
 1047488:	movsxd rax,DWORD PTR [rsp+0xd30]
 1047490:	xor    r10d,r10d
 1047493:	mov    r11,rsi
 1047496:	mov    esi,0x1
 104749b:	cmp    DWORD PTR [rsp+0xd38],r10d
 10474a3:	jbe    0x1047656
 10474a9:	mov    r14,QWORD PTR [rdi+0x50]
 10474ad:	mov    r9,QWORD PTR [rdi+0x48]
 10474b1:	mov    esi,DWORD PTR [rsp+0xd38]
 10474b8:	mov    rbx,rax
 10474bb:	lea    ebp,[r10+0x1]
 10474bf:	mov    r15d,0x80000
 10474c5:	shl    rbx,0x2
 10474c9:	shl    r11,0x2
 10474cd:	mov    ecx,r13d
 10474d0:	mov    eax,r13d
 10474d3:	mov    edx,ebp
 10474d5:	and    ecx,0x7
 10474d8:	shr    rax,0x3
 10474dc:	mov    r8d,r13d
 10474df:	shl    edx,cl
 10474e1:	test   BYTE PTR [rax+r14*1],dl
 10474e5:	jne    0x10474f1
 10474e7:	movzx  eax,BYTE PTR [r9+r8*1]
 10474ec:	jmp    0x104757d
 10474f1:	cmp    BYTE PTR [r9+r8*1],0x7
 10474f6:	mov    rax,QWORD PTR [rdi+0x40]
 10474fa:	movsxd rcx,DWORD PTR [r11+rax*1]
 10474fe:	jae    0x1047540
 1047500:	cmp    ecx,0x400
 1047506:	jge    0x1047511
 1047508:	mov    cl,BYTE PTR [rcx+rdi*1+0x47c]
 104750f:	jmp    0x104752f
 1047511:	cmp    ecx,r15d
 1047514:	jge    0x1047529
 1047516:	mov    rax,rcx
 1047519:	sar    rax,0x9
 104751d:	mov    cl,BYTE PTR [rax+rdi*1+0x47c]
 1047524:	add    cl,0x12
 1047527:	jmp    0x104752f
 1047529:	sar    ecx,0x11
 104752c:	add    cl,0x22
 104752f:	movzx  eax,BYTE PTR [r9+r8*1]
 1047534:	movzx  ecx,cl
 1047537:	lea    eax,[rax+rcx*8+0x100]
 104753e:	jmp    0x1047579
 1047540:	cmp    ecx,0x400
 1047546:	jge    0x1047551
 1047548:	mov    cl,BYTE PTR [rcx+rdi*1+0x47c]
 104754f:	jmp    0x104756f
 1047551:	cmp    ecx,r15d
 1047554:	jge    0x1047569
 1047556:	mov    rax,rcx
 1047559:	sar    rax,0x9
 104755d:	mov    cl,BYTE PTR [rax+rdi*1+0x47c]
 1047564:	add    cl,0x12
 1047567:	jmp    0x104756f
 1047569:	sar    ecx,0x11
 104756c:	add    cl,0x22
 104756f:	movzx  eax,cl
 1047572:	lea    eax,[rax*8+0x107]
 1047579:	add    r11,0x4
 104757d:	cdqe   
 104757f:	mov    ecx,r12d
 1047582:	mov    edx,ebp
 1047584:	add    WORD PTR [rsp+rax*2+0x30],bp
 1047589:	and    ecx,0x7
 104758c:	mov    eax,r12d
 104758f:	shr    rax,0x3
 1047593:	shl    edx,cl
 1047595:	add    r13d,ebp
 1047598:	mov    r8d,r12d
 104759b:	test   BYTE PTR [rax+r14*1],dl
 104759f:	jne    0x10475ab
 10475a1:	movzx  eax,BYTE PTR [r8+r9*1]
 10475a6:	jmp    0x1047637
 10475ab:	cmp    BYTE PTR [r8+r9*1],0x7
 10475b0:	mov    rax,QWORD PTR [rdi+0x40]
 10475b4:	movsxd rcx,DWORD PTR [rbx+rax*1]
 10475b8:	jae    0x10475fa
 10475ba:	cmp    ecx,0x400
 10475c0:	jge    0x10475cb
 10475c2:	mov    cl,BYTE PTR [rcx+rdi*1+0x47c]
 10475c9:	jmp    0x10475e9
 10475cb:	cmp    ecx,r15d
 10475ce:	jge    0x10475e3
 10475d0:	mov    rax,rcx
 10475d3:	sar    rax,0x9
 10475d7:	mov    cl,BYTE PTR [rax+rdi*1+0x47c]
 10475de:	add    cl,0x12
 10475e1:	jmp    0x10475e9
 10475e3:	sar    ecx,0x11
 10475e6:	add    cl,0x22
 10475e9:	movzx  eax,BYTE PTR [r8+r9*1]
 10475ee:	movzx  ecx,cl
 10475f1:	lea    eax,[rax+rcx*8+0x100]
 10475f8:	jmp    0x1047633
 10475fa:	cmp    ecx,0x400
 1047600:	jge    0x104760b
 1047602:	mov    cl,BYTE PTR [rcx+rdi*1+0x47c]
 1047609:	jmp    0x1047629
 104760b:	cmp    ecx,r15d
 104760e:	jge    0x1047623
 1047610:	mov    rax,rcx
 1047613:	sar    rax,0x9
 1047617:	mov    cl,BYTE PTR [rax+rdi*1+0x47c]
 104761e:	add    cl,0x12
 1047621:	jmp    0x1047629
 1047623:	sar    ecx,0x11
 1047626:	add    cl,0x22
 1047629:	movzx  eax,cl
 104762c:	lea    eax,[rax*8+0x107]
 1047633:	add    rbx,0x4
 1047637:	cdqe   
 1047639:	add    r12d,ebp
 104763c:	add    WORD PTR [rsp+rax*2+0x670],bp
 1047644:	sub    rsi,rbp
 1047647:	jne    0x10474cd
 104764d:	mov    ebp,DWORD PTR [rsp+0x20]
 1047651:	mov    esi,0x1
 1047656:	lea    eax,[rbp*8+0x100]
 104765d:	cmp    eax,r10d
 1047660:	jbe    0x10476ee
 1047666:	mov    r8,r10
 1047669:	mov    r9d,eax
 104766c:	mov    ebx,0x100
 1047671:	lea    r11,[rip+0xfffffffffffb8988]        # 0x1000000
 1047678:	movzx  eax,WORD PTR [rsp+r8*1+0x30]
 104767e:	cmp    ax,bx
 1047681:	movzx  eax,ax
 1047684:	jae    0x1047691
 1047686:	movzx  edx,BYTE PTR [rax+r11*1+0xa3d0]
 104768f:	jmp    0x10476a1
 1047691:	shr    rax,0x8
 1047695:	movzx  edx,BYTE PTR [rax+r11*1+0xa3d0]
 104769e:	add    edx,0x8
 10476a1:	movzx  eax,WORD PTR [rsp+r8*1+0x670]
 10476aa:	cmp    ax,bx
 10476ad:	movzx  eax,ax
 10476b0:	jae    0x10476bd
 10476b2:	movzx  ecx,BYTE PTR [rax+r11*1+0xa3d0]
 10476bb:	jmp    0x10476cd
 10476bd:	shr    rax,0x8
 10476c1:	movzx  ecx,BYTE PTR [rax+r11*1+0xa3d0]
 10476ca:	add    ecx,0x8
 10476cd:	mov    eax,DWORD PTR [r11+rdx*4+0xa380]
 10476d5:	add    r8,0x2
 10476d9:	sub    eax,DWORD PTR [r11+rcx*4+0xa380]
 10476e1:	cdq    
 10476e2:	xor    eax,edx
 10476e4:	sub    eax,edx
 10476e6:	add    r10d,eax
 10476e9:	sub    r9,rsi
 10476ec:	jne    0x1047678
 10476ee:	mov    eax,r10d
 10476f1:	mov    rcx,QWORD PTR [rsp+0xcb0]
 10476f9:	xor    rcx,rsp
 10476fc:	call   0x103ff40
 1047701:	add    rsp,0xcc8
 1047708:	pop    r15
 104770a:	pop    r14
 104770c:	pop    r13
 104770e:	pop    r12
 1047710:	pop    rdi
 1047711:	pop    rsi
 1047712:	pop    rbp
 1047713:	pop    rbx
 1047714:	ret    
 1047715:	int3   
 1047716:	int3   
 1047717:	int3   
 1047718:	int3   
 1047719:	int3   
 104771a:	int3   
 104771b:	int3   
 104771c:	mov    QWORD PTR [rsp+0x8],rbx
 1047721:	mov    QWORD PTR [rsp+0x10],rsi
 1047726:	mov    QWORD PTR [rsp+0x18],rdi
 104772b:	mov    edi,r9d
 104772e:	xor    r9d,r9d
 1047731:	mov    r11d,edx
 1047734:	mov    r10,rcx
 1047737:	movsxd rax,r8d
 104773a:	cmp    edx,edi
 104773c:	jae    0x1047862
 1047742:	mov    rbx,rax
 1047745:	mov    r8,r11
 1047748:	lea    esi,[r9+0x1]
 104774c:	shl    rbx,0x2
 1047750:	mov    rax,QWORD PTR [r10+0x50]
 1047754:	mov    ecx,r11d
 1047757:	mov    edx,esi
 1047759:	and    ecx,0x7
 104775c:	shl    edx,cl
 104775e:	mov    rcx,r8
 1047761:	shr    rcx,0x3
 1047765:	mov    cl,BYTE PTR [rcx+rax*1]
 1047768:	mov    rax,QWORD PTR [r10+0x48]
 104776c:	test   cl,dl
 104776e:	jne    0x1047786
 1047770:	movzx  ecx,BYTE PTR [rax+r8*1]
 1047775:	add    WORD PTR [r10+rcx*2+0x2940],si
 104777e:	add    r9d,esi
 1047781:	jmp    0x1047853
 1047786:	mov    dl,BYTE PTR [r8+rax*1]
 104778a:	mov    rax,QWORD PTR [r10+0x40]
 104778e:	movsxd rcx,DWORD PTR [rbx+rax*1]
 1047792:	cmp    dl,0x7
 1047795:	jae    0x10477e5
 1047797:	cmp    ecx,0x400
 104779d:	jge    0x10477a9
 104779f:	mov    cl,BYTE PTR [rcx+r10*1+0x47c]
 10477a7:	jmp    0x10477cb
 10477a9:	cmp    ecx,0x80000
 10477af:	jge    0x10477c5
 10477b1:	mov    rax,rcx
 10477b4:	sar    rax,0x9
 10477b8:	mov    cl,BYTE PTR [rax+r10*1+0x47c]
 10477c0:	add    cl,0x12
 10477c3:	jmp    0x10477cb
 10477c5:	sar    ecx,0x11
 10477c8:	add    cl,0x22
 10477cb:	movzx  eax,dl
 10477ce:	movzx  ecx,cl
 10477d1:	lea    eax,[rax+rcx*8+0x100]
 10477d8:	cdqe   
 10477da:	add    WORD PTR [r10+rax*2+0x2940],si
 10477e3:	jmp    0x1047841
 10477e5:	cmp    ecx,0x400
 10477eb:	jge    0x10477f7
 10477ed:	mov    cl,BYTE PTR [rcx+r10*1+0x47c]
 10477f5:	jmp    0x1047819
 10477f7:	cmp    ecx,0x80000
 10477fd:	jge    0x1047813
 10477ff:	mov    rax,rcx
 1047802:	sar    rax,0x9
 1047806:	mov    cl,BYTE PTR [rax+r10*1+0x47c]
 104780e:	add    cl,0x12
 1047811:	jmp    0x1047819
 1047813:	sar    ecx,0x11
 1047816:	add    cl,0x22
 1047819:	movzx  eax,cl
 104781c:	lea    eax,[rax*8+0x107]
 1047823:	movsxd rcx,eax
 1047826:	add    WORD PTR [r10+rcx*2+0x2940],si
 104782f:	mov    rax,QWORD PTR [r10+0x48]
 1047833:	movzx  ecx,BYTE PTR [rax+r8*1]
 1047838:	add    WORD PTR [r10+rcx*2+0x3c58],si
 1047841:	mov    rcx,QWORD PTR [r10+0x48]
 1047845:	add    rbx,0x4
 1047849:	movzx  edx,BYTE PTR [rcx+r8*1]
 104784e:	lea    r9d,[r9+rdx*1+0x2]
 1047853:	add    r11d,esi
 1047856:	add    r8,rsi
 1047859:	cmp    r11d,edi
 104785c:	jb     0x1047750
 1047862:	mov    rbx,QWORD PTR [rsp+0x8]
 1047867:	mov    rsi,QWORD PTR [rsp+0x10]
 104786c:	mov    rdi,QWORD PTR [rsp+0x18]
 1047871:	mov    eax,r9d
 1047874:	ret    
 1047875:	int3   
 1047876:	int3   
 1047877:	int3   
 1047878:	int3   
 1047879:	int3   
 104787a:	int3   
 104787b:	int3   
 104787c:	mov    QWORD PTR [rsp+0x8],rbx
 1047881:	mov    QWORD PTR [rsp+0x10],rdi
 1047886:	xor    eax,eax
 1047888:	mov    ebx,edx
 104788a:	lea    rdx,[rcx+0x4336]
 1047891:	xor    r11d,r11d
 1047894:	mov    QWORD PTR [rdx],rax
 1047897:	mov    QWORD PTR [rdx+0x8],rax
 104789b:	mov    r9,QWORD PTR [rcx+0x40]
 104789f:	mov    r10d,ebx
 10478a2:	lea    edi,[rax+0x1]
 10478a5:	mov    r8d,r11d
 10478a8:	cmp    ebx,r11d
 10478ab:	jbe    0x10478ca
 10478ad:	mov    eax,DWORD PTR [r9]
 10478b0:	add    r9,0x4
 10478b4:	cmp    eax,0x10
 10478b7:	jb     0x10478c4
 10478b9:	and    eax,0x7
 10478bc:	add    WORD PTR [rcx+rax*2+0x4336],di
 10478c4:	add    r10d,0xffffffff
 10478c8:	jne    0x10478ad
 10478ca:	mov    ecx,0x8
 10478cf:	movzx  eax,WORD PTR [rdx]
 10478d2:	cmp    eax,r8d
 10478d5:	cmova  r8d,eax
 10478d9:	add    r11d,eax
 10478dc:	add    rdx,0x2
 10478e0:	sub    rcx,rdi
 10478e3:	jne    0x10478cf
 10478e5:	mov    eax,0xcccccccd
 10478ea:	mul    r11d
 10478ed:	shr    edx,0x2
 10478f0:	cmp    r8d,edx
 10478f3:	jbe    0x10478fd
 10478f5:	lea    eax,[rcx+0x2]
 10478f8:	cmp    ebx,0x64
 10478fb:	jae    0x10478ff
 10478fd:	mov    eax,edi
 10478ff:	mov    rbx,QWORD PTR [rsp+0x8]
 1047904:	mov    rdi,QWORD PTR [rsp+0x10]
 1047909:	ret    
 104790a:	int3   
 104790b:	int3   
 104790c:	int3   
 104790d:	int3   
 104790e:	int3   
 104790f:	int3   
 1047910:	mov    QWORD PTR [rsp+0x18],rbx
 1047915:	push   rbp
 1047916:	push   rsi
 1047917:	push   rdi
 1047918:	push   r12
 104791a:	push   r13
 104791c:	push   r14
 104791e:	push   r15
 1047920:	sub    rsp,0x870
 1047927:	mov    rax,QWORD PTR [rip+0x1bf42]        # 0x1063870
 104792e:	xor    rax,rsp
 1047931:	mov    QWORD PTR [rsp+0x860],rax
 1047939:	mov    rax,QWORD PTR [rsp+0x8d0]
 1047941:	mov    r14,QWORD PTR [rsp+0x8d8]
 1047949:	mov    r15d,edx
 104794c:	mov    DWORD PTR [rax],r8d
 104794f:	mov    rbp,rcx
 1047952:	mov    QWORD PTR [rsp+0x48],rax
 1047957:	mov    QWORD PTR [rsp+0x40],r14
 104795c:	test   r14,r14
 104795f:	je     0x1047964
 1047961:	mov    DWORD PTR [r14],r9d
 1047964:	mov    eax,r8d
 1047967:	sub    eax,edx
 1047969:	cmp    eax,0x1800
 104796e:	jb     0x1047b7f
 1047974:	mov    r12b,BYTE PTR [rcx+0x8b0]
 104797b:	mov    BYTE PTR [rsp+0x30],r12b
 1047980:	cmp    r12b,0x4
 1047984:	jae    0x1047b7f
 104798a:	mov    r9d,r8d
 104798d:	xor    r10d,r10d
 1047990:	xor    ebx,ebx
 1047992:	shr    r9d,0x3
 1047996:	xor    edx,edx
 1047998:	test   r9d,r9d
 104799b:	je     0x10479d8
 104799d:	lea    r11,[rsp+0x50]
 10479a2:	test   dl,0x7
 10479a5:	jne    0x10479bf
 10479a7:	cmp    r10d,0x408
 10479ae:	jae    0x1047b7f
 10479b4:	mov    WORD PTR [r11],bx
 10479b8:	inc    r10d
 10479bb:	add    r11,0x2
 10479bf:	mov    rax,QWORD PTR [rbp+0x50]
 10479c3:	movzx  ecx,BYTE PTR [rax+rdx*1]
 10479c7:	inc    edx
 10479c9:	movzx  eax,BYTE PTR [rcx+rbp*1+0x8b1]
 10479d1:	add    ebx,eax
 10479d3:	cmp    edx,r9d
 10479d6:	jb     0x10479a2
 10479d8:	add    r15d,0x3f
 10479dc:	lea    eax,[r8-0x1000]
 10479e3:	and    r15d,0xffffffc0
 10479e7:	mov    DWORD PTR [rsp+0x38],eax
 10479eb:	lea    ebx,[r15+0x800]
 10479f2:	mov    DWORD PTR [rsp+0x3c],r15d
 10479f7:	cmp    ebx,eax
 10479f9:	jae    0x1047b7f
 10479ff:	mov    r13d,DWORD PTR [rsp+0x38]
 1047a04:	lea    esi,[rbx+0x800]
 1047a0a:	mov    edx,0x400
 1047a0f:	mov    DWORD PTR [rsp+0x28],edx
 1047a13:	lea    r8d,[rsi-0x400]
 1047a1a:	mov    edx,ebx
 1047a1c:	mov    eax,r8d
 1047a1f:	shr    rax,0x6
 1047a23:	movzx  ecx,WORD PTR [rsp+rax*2+0x50]
 1047a28:	mov    eax,ebx
 1047a2a:	shr    rax,0x6
 1047a2e:	mov    DWORD PTR [rsp+0x20],ecx
 1047a32:	mov    rcx,rbp
 1047a35:	movzx  r9d,WORD PTR [rsp+rax*2+0x50]
 1047a3b:	call   0x1047410
 1047a40:	cmp    eax,0x578
 1047a45:	jbe    0x1047b6c
 1047a4b:	lea    edx,[rbx-0x400]
 1047a51:	mov    eax,esi
 1047a53:	mov    edi,0x400
 1047a58:	shr    rax,0x6
 1047a5c:	mov    DWORD PTR [rsp+0x28],edi
 1047a60:	mov    r8d,esi
 1047a63:	movzx  ecx,WORD PTR [rsp+rax*2+0x50]
 1047a68:	mov    eax,edx
 1047a6a:	shr    rax,0x6
 1047a6e:	mov    DWORD PTR [rsp+0x20],ecx
 1047a72:	mov    rcx,rbp
 1047a75:	movzx  r9d,WORD PTR [rsp+rax*2+0x50]
 1047a7b:	call   0x1047410
 1047a80:	cmp    eax,0x578
 1047a85:	jbe    0x1047b6c
 1047a8b:	lea    r8d,[rsi+0x400]
 1047a92:	lea    edx,[rbx-0x800]
 1047a98:	mov    DWORD PTR [rsp+0x28],edi
 1047a9c:	mov    eax,r8d
 1047a9f:	shr    rax,0x6
 1047aa3:	movzx  ecx,WORD PTR [rsp+rax*2+0x50]
 1047aa8:	mov    eax,edx
 1047aaa:	shr    rax,0x6
 1047aae:	mov    DWORD PTR [rsp+0x20],ecx
 1047ab2:	mov    rcx,rbp
 1047ab5:	movzx  r9d,WORD PTR [rsp+rax*2+0x50]
 1047abb:	call   0x1047410
 1047ac0:	cmp    eax,0x578
 1047ac5:	jbe    0x1047b6c
 1047acb:	xor    eax,eax
 1047acd:	lea    edi,[rsi-0x600]
 1047ad3:	mov    DWORD PTR [rsp+0x34],eax
 1047ad7:	lea    eax,[rsi+0x200]
 1047add:	cmp    edi,eax
 1047adf:	jae    0x1047b6c
 1047ae5:	mov    r12d,DWORD PTR [rsp+0x34]
 1047aea:	mov    r14d,edi
 1047aed:	lea    r15d,[rsi+0x200]
 1047af4:	lea    edx,[rdi-0x400]
 1047afa:	mov    rax,r14
 1047afd:	mov    DWORD PTR [rsp+0x28],0x400
 1047b05:	shr    rax,0x6
 1047b09:	mov    r8d,edi
 1047b0c:	movzx  ecx,WORD PTR [rsp+rax*2+0x50]
 1047b11:	mov    eax,edx
 1047b13:	shr    rax,0x6
 1047b17:	mov    DWORD PTR [rsp+0x20],ecx
 1047b1b:	mov    rcx,rbp
 1047b1e:	movzx  r9d,WORD PTR [rsp+rax*2+0x50]
 1047b24:	call   0x1047410
 1047b29:	cmp    eax,r12d
 1047b2c:	jbe    0x1047b34
 1047b2e:	mov    r12d,eax
 1047b31:	mov    r13d,edi
 1047b34:	add    edi,0x40
 1047b37:	add    r14,0x40
 1047b3b:	cmp    edi,r15d
 1047b3e:	jb     0x1047af4
 1047b40:	mov    r14,QWORD PTR [rsp+0x40]
 1047b45:	mov    r15d,DWORD PTR [rsp+0x3c]
 1047b4a:	mov    DWORD PTR [rsp+0x34],r12d
 1047b4f:	mov    eax,DWORD PTR [rsp+0x34]
 1047b53:	mov    r12b,BYTE PTR [rsp+0x30]
 1047b58:	cmp    eax,0x6a4
 1047b5d:	jb     0x1047b6c
 1047b5f:	mov    eax,r13d
 1047b62:	sub    eax,r15d
 1047b65:	cmp    eax,0x1000
 1047b6a:	jae    0x1047bac
 1047b6c:	mov    edx,0x400
 1047b71:	add    ebx,edx
 1047b73:	add    esi,edx
 1047b75:	cmp    ebx,DWORD PTR [rsp+0x38]
 1047b79:	jb     0x1047a0f
 1047b7f:	xor    eax,eax
 1047b81:	mov    rcx,QWORD PTR [rsp+0x860]
 1047b89:	xor    rcx,rsp
 1047b8c:	call   0x103ff40
 1047b91:	mov    rbx,QWORD PTR [rsp+0x8c0]
 1047b99:	add    rsp,0x870
 1047ba0:	pop    r15
 1047ba2:	pop    r14
 1047ba4:	pop    r13
 1047ba6:	pop    r12
 1047ba8:	pop    rdi
 1047ba9:	pop    rsi
 1047baa:	pop    rbp
 1047bab:	ret    
 1047bac:	mov    rcx,QWORD PTR [rsp+0x48]
 1047bb1:	inc    r12b
 1047bb4:	mov    BYTE PTR [rbp+0x8b0],r12b
 1047bbb:	mov    DWORD PTR [rcx],r13d
 1047bbe:	test   r14,r14
 1047bc1:	je     0x1047bd2
 1047bc3:	mov    ecx,r13d
 1047bc6:	shr    rcx,0x6
 1047bca:	movzx  ecx,WORD PTR [rsp+rcx*2+0x50]
 1047bcf:	mov    DWORD PTR [r14],ecx
 1047bd2:	mov    eax,0x1
 1047bd7:	jmp    0x1047b81
 1047bd9:	int3   
 1047bda:	int3   
 1047bdb:	int3   
 1047bdc:	int3   
 1047bdd:	int3   
 1047bde:	int3   
 1047bdf:	int3   
 1047be0:	jmp    0x104771c
 1047be5:	int3   
 1047be6:	int3   
 1047be7:	int3   
 1047be8:	int3   
 1047be9:	int3   
 1047bea:	int3   
 1047beb:	int3   
 1047bec:	mov    QWORD PTR [rsp+0x8],rbx
 1047bf1:	mov    QWORD PTR [rsp+0x10],rbp
 1047bf6:	mov    QWORD PTR [rsp+0x18],rsi
 1047bfb:	push   rdi
 1047bfc:	sub    rsp,0x20
 1047c00:	mov    eax,DWORD PTR [rcx+0x8a0]
 1047c06:	mov    edi,r8d
 1047c09:	mov    esi,edx
 1047c0b:	lea    eax,[rax*8+0x100]
 1047c12:	mov    rbp,rcx
 1047c15:	xor    edx,edx
 1047c17:	movsxd r8,eax
 1047c1a:	add    rcx,0x2940
 1047c21:	mov    ebx,r9d
 1047c24:	add    r8,r8
 1047c27:	call   0x104026c
 1047c2c:	lea    rcx,[rbp+0x3c66]
 1047c33:	xor    edx,edx
 1047c35:	mov    r8d,0x1f2
 1047c3b:	call   0x104026c
 1047c40:	mov    r9d,ebx
 1047c43:	mov    r8d,edi
 1047c46:	mov    edx,esi
 1047c48:	mov    rcx,rbp
 1047c4b:	mov    rbx,QWORD PTR [rsp+0x30]
 1047c50:	mov    rbp,QWORD PTR [rsp+0x38]
 1047c55:	mov    rsi,QWORD PTR [rsp+0x40]
 1047c5a:	add    rsp,0x20
 1047c5e:	pop    rdi
 1047c5f:	jmp    0x104771c
 1047c64:	int3   
 1047c65:	int3   
 1047c66:	int3   
 1047c67:	int3   
 1047c68:	int3   
 1047c69:	int3   
 1047c6a:	int3   
 1047c6b:	int3   
 1047c6c:	rex push rbx
 1047c6e:	sub    rsp,0x20
 1047c72:	cmp    DWORD PTR [rcx+0x898],0x0
 1047c79:	mov    rbx,rcx
 1047c7c:	jbe    0x1047cb1
 1047c7e:	call   0x1045b80
 1047c83:	mov    r8d,DWORD PTR [rbx+0x888]
 1047c8a:	sub    r8d,DWORD PTR [rbx+0x880]
 1047c91:	test   r8d,r8d
 1047c94:	jle    0x1047cb1
 1047c96:	mov    r9d,DWORD PTR [rbx+0x898]
 1047c9d:	mov    rdx,QWORD PTR [rbx+0x880]
 1047ca4:	mov    rcx,QWORD PTR [rbx+0x4398]
 1047cab:	call   QWORD PTR [rbx+0x43b0]
 1047cb1:	mov    rax,QWORD PTR [rbx+0x880]
 1047cb8:	and    DWORD PTR [rbx+0x898],0x0
 1047cbf:	and    DWORD PTR [rbx+0x28],0x0
 1047cc3:	mov    QWORD PTR [rbx+0x888],rax
 1047cca:	mov    BYTE PTR [rbx+0x2c],0x20
 1047cce:	add    rsp,0x20
 1047cd2:	pop    rbx
 1047cd3:	ret    
 1047cd4:	int3   
 1047cd5:	int3   
 1047cd6:	int3   
 1047cd7:	int3   
 1047cd8:	int3   
 1047cd9:	int3   
 1047cda:	int3   
 1047cdb:	int3   
 1047cdc:	mov    QWORD PTR [rsp+0x8],rbx
 1047ce1:	mov    QWORD PTR [rsp+0x10],rsi
 1047ce6:	mov    QWORD PTR [rsp+0x18],rdi
 1047ceb:	mov    r9,rcx
 1047cee:	mov    r8d,0x4b0
 1047cf4:	mov    r11d,0x100
 1047cfa:	lea    r10,[r9+0x2940]
 1047d01:	add    rcx,0x2588
 1047d08:	movzx  edx,WORD PTR [r10]
 1047d0c:	movzx  eax,BYTE PTR [rcx]
 1047d0f:	add    r10,0x2
 1047d13:	inc    rcx
 1047d16:	imul   edx,eax
 1047d19:	add    r8d,edx
 1047d1c:	sub    r11,0x1
 1047d20:	jne    0x1047d08
 1047d22:	mov    r10d,DWORD PTR [r9+0x8a0]
 1047d29:	xor    edx,edx
 1047d2b:	cmp    r10d,edx
 1047d2e:	jbe    0x1047d86
 1047d30:	mov    eax,edx
 1047d32:	lea    eax,[rax*8+0x100]
 1047d39:	lea    r11,[rip+0xfffffffffffc2470]        # 0x100a1b0
 1047d40:	mov    edi,0x8
 1047d45:	movsxd rcx,eax
 1047d48:	movzx  eax,dl
 1047d4b:	movzx  esi,BYTE PTR [rax+r11*1]
 1047d50:	lea    r11,[rcx+r9*1+0x2588]
 1047d58:	lea    rbx,[r9+rcx*2+0x2940]
 1047d60:	movzx  ecx,BYTE PTR [r11]
 1047d64:	movzx  eax,WORD PTR [rbx]
 1047d67:	add    rbx,0x2
 1047d6b:	add    ecx,esi
 1047d6d:	inc    r11
 1047d70:	imul   ecx,eax
 1047d73:	add    r8d,ecx
 1047d76:	sub    rdi,0x1
 1047d7a:	jne    0x1047d60
 1047d7c:	inc    dl
 1047d7e:	movzx  eax,dl
 1047d81:	cmp    eax,r10d
 1047d84:	jb     0x1047d32
 1047d86:	lea    rdx,[r9+0x2845]
 1047d8d:	mov    r10d,0xf9
 1047d93:	add    r9,0x3c66
 1047d9a:	movzx  ecx,BYTE PTR [rdx]
 1047d9d:	movzx  eax,WORD PTR [r9]
 1047da1:	add    r9,0x2
 1047da5:	inc    rdx
 1047da8:	imul   ecx,eax
 1047dab:	add    r8d,ecx
 1047dae:	sub    r10,0x1
 1047db2:	jne    0x1047d9a
 1047db4:	mov    rbx,QWORD PTR [rsp+0x8]
 1047db9:	mov    rsi,QWORD PTR [rsp+0x10]
 1047dbe:	mov    rdi,QWORD PTR [rsp+0x18]
 1047dc3:	lea    eax,[r8+0x7]
 1047dc7:	shr    eax,0x3
 1047dca:	ret    
 1047dcb:	int3   
 1047dcc:	int3   
 1047dcd:	int3   
 1047dce:	int3   
 1047dcf:	int3   
 1047dd0:	int3   
 1047dd1:	int3   
 1047dd2:	int3   
 1047dd3:	int3   
 1047dd4:	mov    QWORD PTR [rsp+0x8],rbx
 1047dd9:	mov    QWORD PTR [rsp+0x10],rbp
 1047dde:	mov    QWORD PTR [rsp+0x18],rsi
 1047de3:	push   rdi
 1047de4:	sub    rsp,0x20
 1047de8:	mov    ebp,edx
 1047dea:	movsx  edx,BYTE PTR [rcx+0x2c]
 1047dee:	mov    esi,r8d
 1047df1:	xor    r8d,r8d
 1047df4:	sub    edx,0x10
 1047df7:	mov    rbx,rcx
 1047dfa:	call   0x1047224
 1047dff:	lea    r8,[rbx+0x58]
 1047e03:	mov    r9d,0x3
 1047e09:	mov    ecx,DWORD PTR [r8]
 1047e0c:	mov    edx,0x4
 1047e11:	mov    rax,QWORD PTR [rbx+0x888]
 1047e18:	mov    BYTE PTR [rax],cl
 1047e1a:	inc    QWORD PTR [rbx+0x888]
 1047e21:	shr    ecx,0x8
 1047e24:	sub    rdx,0x1
 1047e28:	jne    0x1047e11
 1047e2a:	add    r8,0x4
 1047e2e:	sub    r9,0x1
 1047e32:	jne    0x1047e09
 1047e34:	mov    edi,esi
 1047e36:	and    edi,0x1
 1047e39:	jmp    0x1047e78
 1047e3b:	mov    rax,QWORD PTR [rbx]
 1047e3e:	mov    rcx,QWORD PTR [rbx+0x888]
 1047e45:	mov    edx,ebp
 1047e47:	mov    al,BYTE PTR [rdx+rax*1]
 1047e4a:	inc    ebp
 1047e4c:	dec    esi
 1047e4e:	mov    BYTE PTR [rcx],al
 1047e50:	inc    QWORD PTR [rbx+0x888]
 1047e57:	inc    DWORD PTR [rbx+0x898]
 1047e5d:	cmp    DWORD PTR [rbx+0x898],0x8000
 1047e67:	jne    0x1047e78
 1047e69:	mov    rcx,rbx
 1047e6c:	call   0x1047c6c
 1047e71:	mov    BYTE PTR [rbx+0x8b0],0x0
 1047e78:	test   esi,esi
 1047e7a:	jne    0x1047e3b
 1047e7c:	test   edi,edi
 1047e7e:	je     0x1047e91
 1047e80:	mov    rax,QWORD PTR [rbx+0x888]
 1047e87:	mov    BYTE PTR [rax],sil
 1047e8a:	inc    QWORD PTR [rbx+0x888]
 1047e91:	and    DWORD PTR [rbx+0x28],0x0
 1047e95:	mov    rbp,QWORD PTR [rsp+0x38]
 1047e9a:	mov    rsi,QWORD PTR [rsp+0x40]
 1047e9f:	mov    BYTE PTR [rbx+0x2c],0x20
 1047ea3:	mov    rbx,QWORD PTR [rsp+0x30]
 1047ea8:	add    rsp,0x20
 1047eac:	pop    rdi
 1047ead:	ret    
 1047eae:	int3   
 1047eaf:	int3   
 1047eb0:	int3   
 1047eb1:	int3   
 1047eb2:	int3   
 1047eb3:	int3   
 1047eb4:	mov    QWORD PTR [rsp+0x8],rbx
 1047eb9:	lea    r8d,[rdx-0x1]
 1047ebd:	xor    r9b,r9b
 1047ec0:	mov    rbx,rcx
 1047ec3:	movsxd r10,r8d
 1047ec6:	test   r8d,r8d
 1047ec9:	js     0x1047efa
 1047ecb:	mov    rax,QWORD PTR [rcx+0x40]
 1047ecf:	lea    r11,[rax+r10*4]
 1047ed3:	cmp    DWORD PTR [r11],0x2
 1047ed7:	jbe    0x1047ee4
 1047ed9:	inc    r9b
 1047edc:	cmp    r9b,0x3
 1047ee0:	jae    0x1047efd
 1047ee2:	jmp    0x1047ee7
 1047ee4:	xor    r9b,r9b
 1047ee7:	dec    r8d
 1047eea:	sub    r11,0x4
 1047eee:	sub    r10,0x1
 1047ef2:	jns    0x1047ed3
 1047ef4:	cmp    r9b,0x3
 1047ef8:	jae    0x1047efd
 1047efa:	xor    r8d,r8d
 1047efd:	cmp    r8d,edx
 1047f00:	movsxd r9,r8d
 1047f03:	jge    0x1047f4f
 1047f05:	shl    r9,0x2
 1047f09:	sub    edx,r8d
 1047f0c:	mov    r8d,edx
 1047f0f:	mov    rax,QWORD PTR [rbx+0x40]
 1047f13:	mov    ecx,DWORD PTR [r9+rax*1]
 1047f17:	test   ecx,ecx
 1047f19:	je     0x1047f45
 1047f1b:	cmp    ecx,0x2
 1047f1e:	ja     0x1047f33
 1047f20:	mov    eax,DWORD PTR [rbx+0x58]
 1047f23:	mov    rdx,rcx
 1047f26:	mov    ecx,DWORD PTR [rbx+rcx*4+0x58]
 1047f2a:	mov    DWORD PTR [rbx+rdx*4+0x58],eax
 1047f2e:	mov    DWORD PTR [rbx+0x58],ecx
 1047f31:	jmp    0x1047f45
 1047f33:	mov    eax,DWORD PTR [rbx+0x5c]
 1047f36:	mov    DWORD PTR [rbx+0x60],eax
 1047f39:	mov    eax,DWORD PTR [rbx+0x58]
 1047f3c:	mov    DWORD PTR [rbx+0x5c],eax
 1047f3f:	lea    eax,[rcx-0x2]
 1047f42:	mov    DWORD PTR [rbx+0x58],eax
 1047f45:	add    r9,0x4
 1047f49:	sub    r8,0x1
 1047f4d:	jne    0x1047f0f
 1047f4f:	mov    rbx,QWORD PTR [rsp+0x8]
 1047f54:	ret    
 1047f55:	int3   
 1047f56:	int3   
 1047f57:	int3   
 1047f58:	int3   
 1047f59:	int3   
 1047f5a:	int3   
 1047f5b:	int3   
 1047f5c:	test   edx,edx
 1047f5e:	je     0x1048441
 1047f64:	mov    rax,rsp
 1047f67:	mov    QWORD PTR [rax+0x8],rbx
 1047f6b:	mov    QWORD PTR [rax+0x10],rbp
 1047f6f:	mov    QWORD PTR [rax+0x18],rsi
 1047f73:	mov    QWORD PTR [rax+0x20],rdi
 1047f77:	push   r12
 1047f79:	push   r13
 1047f7b:	push   r15
 1047f7d:	sub    rsp,0x20
 1047f81:	xor    edi,edi
 1047f83:	mov    esi,edx
 1047f85:	mov    rbx,rcx
 1047f88:	xor    ebp,ebp
 1047f8a:	mov    r13b,0x10
 1047f8d:	lea    r15,[rip+0xfffffffffffb806c]        # 0x1000000
 1047f94:	lea    r12d,[rdi+0x1]
 1047f98:	mov    rax,QWORD PTR [rbx+0x50]
 1047f9c:	mov    ecx,edi
 1047f9e:	mov    edx,r12d
 1047fa1:	and    ecx,0x7
 1047fa4:	shl    edx,cl
 1047fa6:	mov    ecx,edi
 1047fa8:	shr    rcx,0x3
 1047fac:	mov    cl,BYTE PTR [rcx+rax*1]
 1047faf:	mov    rax,QWORD PTR [rbx+0x48]
 1047fb3:	test   cl,dl
 1047fb5:	jne    0x104804f
 1047fbb:	movzx  r8d,BYTE PTR [rdi+rax*1]
 1047fc0:	movsx  ecx,BYTE PTR [rbx+0x2c]
 1047fc4:	movzx  eax,BYTE PTR [r8+rbx*1+0x2588]
 1047fcd:	movzx  edx,WORD PTR [rbx+r8*2+0x3430]
 1047fd6:	sub    ecx,eax
 1047fd8:	shl    edx,cl
 1047fda:	or     DWORD PTR [rbx+0x28],edx
 1047fdd:	mov    al,BYTE PTR [r8+rbx*1+0x2588]
 1047fe5:	sub    BYTE PTR [rbx+0x2c],al
 1047fe8:	jmp    0x104803a
 1047fea:	mov    rax,QWORD PTR [rbx+0x890]
 1047ff1:	cmp    QWORD PTR [rbx+0x888],rax
 1047ff8:	jb     0x104800c
 1047ffa:	mov    rax,QWORD PTR [rbx+0x880]
 1048001:	mov    DWORD PTR [rbx+0x30],r12d
 1048005:	mov    QWORD PTR [rbx+0x888],rax
 104800c:	mov    rcx,QWORD PTR [rbx+0x888]
 1048013:	mov    al,BYTE PTR [rbx+0x2a]
 1048016:	mov    BYTE PTR [rcx],al
 1048018:	add    QWORD PTR [rbx+0x888],r12
 104801f:	mov    rcx,QWORD PTR [rbx+0x888]
 1048026:	mov    al,BYTE PTR [rbx+0x2b]
 1048029:	mov    BYTE PTR [rcx],al
 104802b:	add    QWORD PTR [rbx+0x888],r12
 1048032:	shl    DWORD PTR [rbx+0x28],0x10
 1048036:	add    BYTE PTR [rbx+0x2c],r13b
 104803a:	cmp    BYTE PTR [rbx+0x2c],r13b
 104803e:	jle    0x1047fea
 1048040:	add    edi,r12d
 1048043:	add    DWORD PTR [rbx+0x898],r12d
 104804a:	jmp    0x1048400
 104804f:	mov    r11b,BYTE PTR [rdi+rax*1]
 1048053:	mov    rax,QWORD PTR [rbx+0x40]
 1048057:	add    edi,r12d
 104805a:	movsxd r9,DWORD PTR [rax+rbp*1]
 104805e:	add    rbp,0x4
 1048062:	cmp    r9d,0x400
 1048069:	jge    0x1048075
 104806b:	mov    cl,BYTE PTR [r9+rbx*1+0x47c]
 1048073:	jmp    0x104809a
 1048075:	cmp    r9d,0x80000
 104807c:	jge    0x1048091
 104807e:	mov    rax,r9
 1048081:	sar    rax,0x9
 1048085:	mov    cl,BYTE PTR [rax+rbx*1+0x47c]
 104808c:	add    cl,0x12
 104808f:	jmp    0x104809a
 1048091:	mov    ecx,r9d
 1048094:	sar    ecx,0x11
 1048097:	add    cl,0x22
 104809a:	movzx  r10d,cl
 104809e:	movsx  ecx,BYTE PTR [rbx+0x2c]
 10480a2:	cmp    r11b,0x7
 10480a6:	jae    0x1048139
 10480ac:	movzx  eax,r11b
 10480b0:	lea    r8,[rax+r10*8+0x100]
 10480b8:	movzx  eax,BYTE PTR [r8+rbx*1+0x2588]
 10480c1:	movzx  edx,WORD PTR [rbx+r8*2+0x3430]
 10480ca:	sub    ecx,eax
 10480cc:	shl    edx,cl
 10480ce:	or     DWORD PTR [rbx+0x28],edx
 10480d1:	mov    al,BYTE PTR [r8+rbx*1+0x2588]
 10480d9:	sub    BYTE PTR [rbx+0x2c],al
 10480dc:	jmp    0x104812e
 10480de:	mov    rax,QWORD PTR [rbx+0x890]
 10480e5:	cmp    QWORD PTR [rbx+0x888],rax
 10480ec:	jb     0x1048100
 10480ee:	mov    rax,QWORD PTR [rbx+0x880]
 10480f5:	mov    DWORD PTR [rbx+0x30],r12d
 10480f9:	mov    QWORD PTR [rbx+0x888],rax
 1048100:	mov    rcx,QWORD PTR [rbx+0x888]
 1048107:	mov    al,BYTE PTR [rbx+0x2a]
 104810a:	mov    BYTE PTR [rcx],al
 104810c:	add    QWORD PTR [rbx+0x888],r12
 1048113:	mov    rcx,QWORD PTR [rbx+0x888]
 104811a:	mov    al,BYTE PTR [rbx+0x2b]
 104811d:	mov    BYTE PTR [rcx],al
 104811f:	add    QWORD PTR [rbx+0x888],r12
 1048126:	shl    DWORD PTR [rbx+0x28],0x10
 104812a:	add    BYTE PTR [rbx+0x2c],r13b
 104812e:	cmp    BYTE PTR [rbx+0x2c],r13b
 1048132:	jle    0x10480de
 1048134:	jmp    0x1048240
 1048139:	mov    r8,r10
 104813c:	shl    r8,0x3
 1048140:	movzx  eax,BYTE PTR [r8+rbx*1+0x268f]
 1048149:	movzx  edx,WORD PTR [rbx+r8*2+0x363e]
 1048152:	sub    ecx,eax
 1048154:	shl    edx,cl
 1048156:	or     DWORD PTR [rbx+0x28],edx
 1048159:	mov    al,BYTE PTR [r8+rbx*1+0x268f]
 1048161:	sub    BYTE PTR [rbx+0x2c],al
 1048164:	jmp    0x10481b6
 1048166:	mov    rax,QWORD PTR [rbx+0x890]
 104816d:	cmp    QWORD PTR [rbx+0x888],rax
 1048174:	jb     0x1048188
 1048176:	mov    rax,QWORD PTR [rbx+0x880]
 104817d:	mov    DWORD PTR [rbx+0x30],r12d
 1048181:	mov    QWORD PTR [rbx+0x888],rax
 1048188:	mov    rcx,QWORD PTR [rbx+0x888]
 104818f:	mov    al,BYTE PTR [rbx+0x2a]
 1048192:	mov    BYTE PTR [rcx],al
 1048194:	add    QWORD PTR [rbx+0x888],r12
 104819b:	mov    rcx,QWORD PTR [rbx+0x888]
 10481a2:	mov    al,BYTE PTR [rbx+0x2b]
 10481a5:	mov    BYTE PTR [rcx],al
 10481a7:	add    QWORD PTR [rbx+0x888],r12
 10481ae:	shl    DWORD PTR [rbx+0x28],0x10
 10481b2:	add    BYTE PTR [rbx+0x2c],r13b
 10481b6:	cmp    BYTE PTR [rbx+0x2c],r13b
 10481ba:	jle    0x1048166
 10481bc:	movsx  ecx,BYTE PTR [rbx+0x2c]
 10481c0:	movzx  r8d,r11b
 10481c4:	movzx  eax,BYTE PTR [r8+rbx*1+0x283e]
 10481cd:	movzx  edx,WORD PTR [rbx+r8*2+0x403c]
 10481d6:	sub    ecx,eax
 10481d8:	shl    edx,cl
 10481da:	or     DWORD PTR [rbx+0x28],edx
 10481dd:	mov    al,BYTE PTR [r8+rbx*1+0x283e]
 10481e5:	sub    BYTE PTR [rbx+0x2c],al
 10481e8:	jmp    0x104823a
 10481ea:	mov    rax,QWORD PTR [rbx+0x890]
 10481f1:	cmp    QWORD PTR [rbx+0x888],rax
 10481f8:	jb     0x104820c
 10481fa:	mov    rax,QWORD PTR [rbx+0x880]
 1048201:	mov    DWORD PTR [rbx+0x30],r12d
 1048205:	mov    QWORD PTR [rbx+0x888],rax
 104820c:	mov    rcx,QWORD PTR [rbx+0x888]
 1048213:	mov    al,BYTE PTR [rbx+0x2a]
 1048216:	mov    BYTE PTR [rcx],al
 1048218:	add    QWORD PTR [rbx+0x888],r12
 104821f:	mov    rcx,QWORD PTR [rbx+0x888]
 1048226:	mov    al,BYTE PTR [rbx+0x2b]
 1048229:	mov    BYTE PTR [rcx],al
 104822b:	add    QWORD PTR [rbx+0x888],r12
 1048232:	shl    DWORD PTR [rbx+0x28],0x10
 1048236:	add    BYTE PTR [rbx+0x2c],r13b
 104823a:	cmp    BYTE PTR [rbx+0x2c],r13b
 104823e:	jle    0x10481ea
 1048240:	mov    al,BYTE PTR [r10+r15*1+0xa1b0]
 1048248:	cmp    al,0x3
 104824a:	jb     0x1048373
 1048250:	jbe    0x10482e6
 1048256:	movzx  edx,al
 1048259:	mov    r8d,r12d
 104825c:	mov    eax,r9d
 104825f:	shr    eax,0x3
 1048262:	lea    ecx,[rdx-0x3]
 1048265:	shl    r8d,cl
 1048268:	movsx  ecx,BYTE PTR [rbx+0x2c]
 104826c:	sub    r8d,r12d
 104826f:	sub    ecx,edx
 1048271:	and    r8d,eax
 1048274:	add    ecx,0x3
 1048277:	mov    eax,0x3
 104827c:	shl    r8d,cl
 104827f:	or     DWORD PTR [rbx+0x28],r8d
 1048283:	sub    al,BYTE PTR [r10+r15*1+0xa1b0]
 104828b:	add    BYTE PTR [rbx+0x2c],al
 104828e:	jmp    0x10482e0
 1048290:	mov    rax,QWORD PTR [rbx+0x890]
 1048297:	cmp    QWORD PTR [rbx+0x888],rax
 104829e:	jb     0x10482b2
 10482a0:	mov    rax,QWORD PTR [rbx+0x880]
 10482a7:	mov    DWORD PTR [rbx+0x30],r12d
 10482ab:	mov    QWORD PTR [rbx+0x888],rax
 10482b2:	mov    rcx,QWORD PTR [rbx+0x888]
 10482b9:	mov    al,BYTE PTR [rbx+0x2a]
 10482bc:	mov    BYTE PTR [rcx],al
 10482be:	add    QWORD PTR [rbx+0x888],r12
 10482c5:	mov    rcx,QWORD PTR [rbx+0x888]
 10482cc:	mov    al,BYTE PTR [rbx+0x2b]
 10482cf:	mov    BYTE PTR [rcx],al
 10482d1:	add    QWORD PTR [rbx+0x888],r12
 10482d8:	shl    DWORD PTR [rbx+0x28],0x10
 10482dc:	add    BYTE PTR [rbx+0x2c],r13b
 10482e0:	cmp    BYTE PTR [rbx+0x2c],r13b
 10482e4:	jle    0x1048290
 10482e6:	movsx  ecx,BYTE PTR [rbx+0x2c]
 10482ea:	and    r9b,0x7
 10482ee:	movzx  r8d,r9b
 10482f2:	movzx  eax,BYTE PTR [r8+rbx*1+0x4366]
 10482fb:	movzx  edx,WORD PTR [rbx+r8*2+0x4356]
 1048304:	sub    ecx,eax
 1048306:	shl    edx,cl
 1048308:	or     DWORD PTR [rbx+0x28],edx
 104830b:	mov    al,BYTE PTR [r8+rbx*1+0x4366]
 1048313:	sub    BYTE PTR [rbx+0x2c],al
 1048316:	jmp    0x1048368
 1048318:	mov    rax,QWORD PTR [rbx+0x890]
 104831f:	cmp    QWORD PTR [rbx+0x888],rax
 1048326:	jb     0x104833a
 1048328:	mov    rax,QWORD PTR [rbx+0x880]
 104832f:	mov    DWORD PTR [rbx+0x30],r12d
 1048333:	mov    QWORD PTR [rbx+0x888],rax
 104833a:	mov    rcx,QWORD PTR [rbx+0x888]
 1048341:	mov    al,BYTE PTR [rbx+0x2a]
 1048344:	mov    BYTE PTR [rcx],al
 1048346:	add    QWORD PTR [rbx+0x888],r12
 104834d:	mov    rcx,QWORD PTR [rbx+0x888]
 1048354:	mov    al,BYTE PTR [rbx+0x2b]
 1048357:	mov    BYTE PTR [rcx],al
 1048359:	add    QWORD PTR [rbx+0x888],r12
 1048360:	shl    DWORD PTR [rbx+0x28],0x10
 1048364:	add    BYTE PTR [rbx+0x2c],r13b
 1048368:	cmp    BYTE PTR [rbx+0x2c],r13b
 104836c:	jle    0x1048318
 104836e:	jmp    0x10483f3
 1048373:	test   al,al
 1048375:	je     0x10483f3
 1048377:	mov    edx,DWORD PTR [r15+r10*4+0xa0e0]
 104837f:	movsx  ecx,BYTE PTR [rbx+0x2c]
 1048383:	movzx  eax,al
 1048386:	sub    ecx,eax
 1048388:	and    edx,r9d
 104838b:	shl    edx,cl
 104838d:	or     DWORD PTR [rbx+0x28],edx
 1048390:	mov    al,BYTE PTR [r10+r15*1+0xa1b0]
 1048398:	sub    BYTE PTR [rbx+0x2c],al
 104839b:	jmp    0x10483ed
 104839d:	mov    rax,QWORD PTR [rbx+0x890]
 10483a4:	cmp    QWORD PTR [rbx+0x888],rax
 10483ab:	jb     0x10483bf
 10483ad:	mov    rax,QWORD PTR [rbx+0x880]
 10483b4:	mov    DWORD PTR [rbx+0x30],r12d
 10483b8:	mov    QWORD PTR [rbx+0x888],rax
 10483bf:	mov    rcx,QWORD PTR [rbx+0x888]
 10483c6:	mov    al,BYTE PTR [rbx+0x2a]
 10483c9:	mov    BYTE PTR [rcx],al
 10483cb:	add    QWORD PTR [rbx+0x888],r12
 10483d2:	mov    rcx,QWORD PTR [rbx+0x888]
 10483d9:	mov    al,BYTE PTR [rbx+0x2b]
 10483dc:	mov    BYTE PTR [rcx],al
 10483de:	add    QWORD PTR [rbx+0x888],r12
 10483e5:	shl    DWORD PTR [rbx+0x28],0x10
 10483e9:	add    BYTE PTR [rbx+0x2c],r13b
 10483ed:	cmp    BYTE PTR [rbx+0x2c],r13b
 10483f1:	jle    0x104839d
 10483f3:	movzx  eax,r11b
 10483f7:	add    eax,0x2
 10483fa:	add    DWORD PTR [rbx+0x898],eax
 1048400:	cmp    DWORD PTR [rbx+0x898],0x8000
 104840a:	jne    0x104841b
 104840c:	mov    rcx,rbx
 104840f:	call   0x1047c6c
 1048414:	mov    BYTE PTR [rbx+0x8b0],0x0
 104841b:	cmp    edi,esi
 104841d:	jb     0x1047f98
 1048423:	mov    rbx,QWORD PTR [rsp+0x40]
 1048428:	mov    rbp,QWORD PTR [rsp+0x48]
 104842d:	mov    rsi,QWORD PTR [rsp+0x50]
 1048432:	mov    rdi,QWORD PTR [rsp+0x58]
 1048437:	add    rsp,0x20
 104843b:	pop    r15
 104843d:	pop    r13
 104843f:	pop    r12
 1048441:	ret    
 1048442:	int3   
 1048443:	int3   
 1048444:	int3   
 1048445:	int3   
 1048446:	int3   
 1048447:	int3   
 1048448:	test   edx,edx
 104844a:	je     0x1048802
 1048450:	mov    rax,rsp
 1048453:	mov    QWORD PTR [rax+0x8],rbx
 1048457:	mov    QWORD PTR [rax+0x10],rbp
 104845b:	mov    QWORD PTR [rax+0x18],rsi
 104845f:	mov    QWORD PTR [rax+0x20],rdi
 1048463:	push   r12
 1048465:	push   r13
 1048467:	push   r14
 1048469:	sub    rsp,0x20
 104846d:	xor    edi,edi
 104846f:	mov    esi,edx
 1048471:	mov    rbx,rcx
 1048474:	xor    ebp,ebp
 1048476:	mov    r13b,0x10
 1048479:	lea    r14,[rip+0xfffffffffffb7b80]        # 0x1000000
 1048480:	lea    r12d,[rdi+0x1]
 1048484:	mov    rax,QWORD PTR [rbx+0x50]
 1048488:	mov    ecx,edi
 104848a:	mov    edx,r12d
 104848d:	and    ecx,0x7
 1048490:	shl    edx,cl
 1048492:	mov    ecx,edi
 1048494:	shr    rcx,0x3
 1048498:	mov    cl,BYTE PTR [rcx+rax*1]
 104849b:	mov    rax,QWORD PTR [rbx+0x48]
 104849f:	test   cl,dl
 10484a1:	jne    0x104853b
 10484a7:	movzx  r8d,BYTE PTR [rdi+rax*1]
 10484ac:	movsx  ecx,BYTE PTR [rbx+0x2c]
 10484b0:	movzx  eax,BYTE PTR [r8+rbx*1+0x2588]
 10484b9:	movzx  edx,WORD PTR [rbx+r8*2+0x3430]
 10484c2:	sub    ecx,eax
 10484c4:	shl    edx,cl
 10484c6:	or     DWORD PTR [rbx+0x28],edx
 10484c9:	mov    al,BYTE PTR [r8+rbx*1+0x2588]
 10484d1:	sub    BYTE PTR [rbx+0x2c],al
 10484d4:	jmp    0x1048526
 10484d6:	mov    rax,QWORD PTR [rbx+0x890]
 10484dd:	cmp    QWORD PTR [rbx+0x888],rax
 10484e4:	jb     0x10484f8
 10484e6:	mov    rax,QWORD PTR [rbx+0x880]
 10484ed:	mov    DWORD PTR [rbx+0x30],r12d
 10484f1:	mov    QWORD PTR [rbx+0x888],rax
 10484f8:	mov    rcx,QWORD PTR [rbx+0x888]
 10484ff:	mov    al,BYTE PTR [rbx+0x2a]
 1048502:	mov    BYTE PTR [rcx],al
 1048504:	add    QWORD PTR [rbx+0x888],r12
 104850b:	mov    rcx,QWORD PTR [rbx+0x888]
 1048512:	mov    al,BYTE PTR [rbx+0x2b]
 1048515:	mov    BYTE PTR [rcx],al
 1048517:	add    QWORD PTR [rbx+0x888],r12
 104851e:	shl    DWORD PTR [rbx+0x28],0x10
 1048522:	add    BYTE PTR [rbx+0x2c],r13b
 1048526:	cmp    BYTE PTR [rbx+0x2c],r13b
 104852a:	jle    0x10484d6
 104852c:	add    edi,r12d
 104852f:	add    DWORD PTR [rbx+0x898],r12d
 1048536:	jmp    0x10487c1
 104853b:	mov    r11b,BYTE PTR [rdi+rax*1]
 104853f:	mov    rax,QWORD PTR [rbx+0x40]
 1048543:	add    edi,r12d
 1048546:	movsxd r9,DWORD PTR [rax+rbp*1]
 104854a:	add    rbp,0x4
 104854e:	cmp    r9d,0x400
 1048555:	jge    0x1048561
 1048557:	mov    cl,BYTE PTR [r9+rbx*1+0x47c]
 104855f:	jmp    0x1048586
 1048561:	cmp    r9d,0x80000
 1048568:	jge    0x104857d
 104856a:	mov    rax,r9
 104856d:	sar    rax,0x9
 1048571:	mov    cl,BYTE PTR [rax+rbx*1+0x47c]
 1048578:	add    cl,0x12
 104857b:	jmp    0x1048586
 104857d:	mov    ecx,r9d
 1048580:	sar    ecx,0x11
 1048583:	add    cl,0x22
 1048586:	movzx  r10d,cl
 104858a:	movsx  ecx,BYTE PTR [rbx+0x2c]
 104858e:	cmp    r11b,0x7
 1048592:	jae    0x1048625
 1048598:	movzx  eax,r11b
 104859c:	lea    r8,[rax+r10*8+0x100]
 10485a4:	movzx  eax,BYTE PTR [r8+rbx*1+0x2588]
 10485ad:	movzx  edx,WORD PTR [rbx+r8*2+0x3430]
 10485b6:	sub    ecx,eax
 10485b8:	shl    edx,cl
 10485ba:	or     DWORD PTR [rbx+0x28],edx
 10485bd:	mov    al,BYTE PTR [r8+rbx*1+0x2588]
 10485c5:	sub    BYTE PTR [rbx+0x2c],al
 10485c8:	jmp    0x104861a
 10485ca:	mov    rax,QWORD PTR [rbx+0x890]
 10485d1:	cmp    QWORD PTR [rbx+0x888],rax
 10485d8:	jb     0x10485ec
 10485da:	mov    rax,QWORD PTR [rbx+0x880]
 10485e1:	mov    DWORD PTR [rbx+0x30],r12d
 10485e5:	mov    QWORD PTR [rbx+0x888],rax
 10485ec:	mov    rcx,QWORD PTR [rbx+0x888]
 10485f3:	mov    al,BYTE PTR [rbx+0x2a]
 10485f6:	mov    BYTE PTR [rcx],al
 10485f8:	add    QWORD PTR [rbx+0x888],r12
 10485ff:	mov    rcx,QWORD PTR [rbx+0x888]
 1048606:	mov    al,BYTE PTR [rbx+0x2b]
 1048609:	mov    BYTE PTR [rcx],al
 104860b:	add    QWORD PTR [rbx+0x888],r12
 1048612:	shl    DWORD PTR [rbx+0x28],0x10
 1048616:	add    BYTE PTR [rbx+0x2c],r13b
 104861a:	cmp    BYTE PTR [rbx+0x2c],r13b
 104861e:	jle    0x10485ca
 1048620:	jmp    0x104872c
 1048625:	mov    r8,r10
 1048628:	shl    r8,0x3
 104862c:	movzx  eax,BYTE PTR [r8+rbx*1+0x268f]
 1048635:	movzx  edx,WORD PTR [rbx+r8*2+0x363e]
 104863e:	sub    ecx,eax
 1048640:	shl    edx,cl
 1048642:	or     DWORD PTR [rbx+0x28],edx
 1048645:	mov    al,BYTE PTR [r8+rbx*1+0x268f]
 104864d:	sub    BYTE PTR [rbx+0x2c],al
 1048650:	jmp    0x10486a2
 1048652:	mov    rax,QWORD PTR [rbx+0x890]
 1048659:	cmp    QWORD PTR [rbx+0x888],rax
 1048660:	jb     0x1048674
 1048662:	mov    rax,QWORD PTR [rbx+0x880]
 1048669:	mov    DWORD PTR [rbx+0x30],r12d
 104866d:	mov    QWORD PTR [rbx+0x888],rax
 1048674:	mov    rcx,QWORD PTR [rbx+0x888]
 104867b:	mov    al,BYTE PTR [rbx+0x2a]
 104867e:	mov    BYTE PTR [rcx],al
 1048680:	add    QWORD PTR [rbx+0x888],r12
 1048687:	mov    rcx,QWORD PTR [rbx+0x888]
 104868e:	mov    al,BYTE PTR [rbx+0x2b]
 1048691:	mov    BYTE PTR [rcx],al
 1048693:	add    QWORD PTR [rbx+0x888],r12
 104869a:	shl    DWORD PTR [rbx+0x28],0x10
 104869e:	add    BYTE PTR [rbx+0x2c],r13b
 10486a2:	cmp    BYTE PTR [rbx+0x2c],r13b
 10486a6:	jle    0x1048652
 10486a8:	movsx  ecx,BYTE PTR [rbx+0x2c]
 10486ac:	movzx  r8d,r11b
 10486b0:	movzx  eax,BYTE PTR [r8+rbx*1+0x283e]
 10486b9:	movzx  edx,WORD PTR [rbx+r8*2+0x403c]
 10486c2:	sub    ecx,eax
 10486c4:	shl    edx,cl
 10486c6:	or     DWORD PTR [rbx+0x28],edx
 10486c9:	mov    al,BYTE PTR [r8+rbx*1+0x283e]
 10486d1:	sub    BYTE PTR [rbx+0x2c],al
 10486d4:	jmp    0x1048726
 10486d6:	mov    rax,QWORD PTR [rbx+0x890]
 10486dd:	cmp    QWORD PTR [rbx+0x888],rax
 10486e4:	jb     0x10486f8
 10486e6:	mov    rax,QWORD PTR [rbx+0x880]
 10486ed:	mov    DWORD PTR [rbx+0x30],r12d
 10486f1:	mov    QWORD PTR [rbx+0x888],rax
 10486f8:	mov    rcx,QWORD PTR [rbx+0x888]
 10486ff:	mov    al,BYTE PTR [rbx+0x2a]
 1048702:	mov    BYTE PTR [rcx],al
 1048704:	add    QWORD PTR [rbx+0x888],r12
 104870b:	mov    rcx,QWORD PTR [rbx+0x888]
 1048712:	mov    al,BYTE PTR [rbx+0x2b]
 1048715:	mov    BYTE PTR [rcx],al
 1048717:	add    QWORD PTR [rbx+0x888],r12
 104871e:	shl    DWORD PTR [rbx+0x28],0x10
 1048722:	add    BYTE PTR [rbx+0x2c],r13b
 1048726:	cmp    BYTE PTR [rbx+0x2c],r13b
 104872a:	jle    0x10486d6
 104872c:	mov    al,BYTE PTR [r10+r14*1+0xa1b0]
 1048734:	test   al,al
 1048736:	je     0x10487b4
 1048738:	mov    edx,DWORD PTR [r14+r10*4+0xa0e0]
 1048740:	movsx  ecx,BYTE PTR [rbx+0x2c]
 1048744:	movzx  eax,al
 1048747:	sub    ecx,eax
 1048749:	and    edx,r9d
 104874c:	shl    edx,cl
 104874e:	or     DWORD PTR [rbx+0x28],edx
 1048751:	mov    al,BYTE PTR [r10+r14*1+0xa1b0]
 1048759:	sub    BYTE PTR [rbx+0x2c],al
 104875c:	jmp    0x10487ae
 104875e:	mov    rax,QWORD PTR [rbx+0x890]
 1048765:	cmp    QWORD PTR [rbx+0x888],rax
 104876c:	jb     0x1048780
 104876e:	mov    rax,QWORD PTR [rbx+0x880]
 1048775:	mov    DWORD PTR [rbx+0x30],r12d
 1048779:	mov    QWORD PTR [rbx+0x888],rax
 1048780:	mov    rcx,QWORD PTR [rbx+0x888]
 1048787:	mov    al,BYTE PTR [rbx+0x2a]
 104878a:	mov    BYTE PTR [rcx],al
 104878c:	add    QWORD PTR [rbx+0x888],r12
 1048793:	mov    rcx,QWORD PTR [rbx+0x888]
 104879a:	mov    al,BYTE PTR [rbx+0x2b]
 104879d:	mov    BYTE PTR [rcx],al
 104879f:	add    QWORD PTR [rbx+0x888],r12
 10487a6:	shl    DWORD PTR [rbx+0x28],0x10
 10487aa:	add    BYTE PTR [rbx+0x2c],r13b
 10487ae:	cmp    BYTE PTR [rbx+0x2c],r13b
 10487b2:	jle    0x104875e
 10487b4:	movzx  eax,r11b
 10487b8:	add    eax,0x2
 10487bb:	add    DWORD PTR [rbx+0x898],eax
 10487c1:	cmp    DWORD PTR [rbx+0x898],0x8000
 10487cb:	jne    0x10487dc
 10487cd:	mov    rcx,rbx
 10487d0:	call   0x1047c6c
 10487d5:	mov    BYTE PTR [rbx+0x8b0],0x0
 10487dc:	cmp    edi,esi
 10487de:	jb     0x1048484
 10487e4:	mov    rbx,QWORD PTR [rsp+0x40]
 10487e9:	mov    rbp,QWORD PTR [rsp+0x48]
 10487ee:	mov    rsi,QWORD PTR [rsp+0x50]
 10487f3:	mov    rdi,QWORD PTR [rsp+0x58]
 10487f8:	add    rsp,0x20
 10487fc:	pop    r14
 10487fe:	pop    r13
 1048800:	pop    r12
 1048802:	ret    
 1048803:	int3   
 1048804:	int3   
 1048805:	int3   
 1048806:	int3   
 1048807:	int3   
 1048808:	int3   
 1048809:	int3   
 104880a:	int3   
 104880b:	int3   
 104880c:	mov    QWORD PTR [rsp+0x8],rbx
 1048811:	mov    QWORD PTR [rsp+0x10],rdi
 1048816:	mov    rax,QWORD PTR [rcx]
 1048819:	mov    r10d,edx
 104881c:	mov    edi,r8d
 104881f:	movzx  r9d,WORD PTR [r10+rax*1]
 1048824:	mov    rax,QWORD PTR [rcx+0x10]
 1048828:	lea    r11,[rax+r9*4]
 104882c:	cmp    DWORD PTR [r11],edx
 104882f:	jne    0x104884b
 1048831:	mov    r9,QWORD PTR [rcx+0x18]
 1048835:	mov    rbx,QWORD PTR [rcx+0x20]
 1048839:	xor    ecx,ecx
 104883b:	cmp    DWORD PTR [r11],r8d
 104883e:	ja     0x1048856
 1048840:	mov    DWORD PTR [r11],ecx
 1048843:	mov    DWORD PTR [rbx+r10*4],ecx
 1048847:	mov    DWORD PTR [r9+r10*4],ecx
 104884b:	mov    rbx,QWORD PTR [rsp+0x8]
 1048850:	mov    rdi,QWORD PTR [rsp+0x10]
 1048855:	ret    
 1048856:	mov    r8d,DWORD PTR [r9+r10*4]
 104885a:	cmp    r8d,edi
 104885d:	ja     0x1048866
 104885f:	mov    DWORD PTR [r9+r10*4],ecx
 1048863:	mov    r8d,ecx
 1048866:	mov    edx,DWORD PTR [rbx+r10*4]
 104886a:	cmp    edx,edi
 104886c:	ja     0x1048874
 104886e:	mov    DWORD PTR [rbx+r10*4],ecx
 1048872:	mov    edx,ecx
 1048874:	cmp    r8d,edx
 1048877:	jbe    0x1048892
 1048879:	cmp    edi,r8d
 104887c:	sbb    eax,eax
 104887e:	and    eax,r8d
 1048881:	mov    DWORD PTR [r11],eax
 1048884:	cmp    eax,ecx
 1048886:	je     0x104884b
 1048888:	mov    r8d,DWORD PTR [rbx+rax*4]
 104888c:	lea    r11,[rbx+rax*4]
 1048890:	jmp    0x1048874
 1048892:	cmp    edi,edx
 1048894:	sbb    eax,eax
 1048896:	and    eax,edx
 1048898:	mov    DWORD PTR [r11],eax
 104889b:	cmp    eax,ecx
 104889d:	je     0x104884b
 104889f:	mov    edx,DWORD PTR [r9+rax*4]
 10488a3:	lea    r11,[r9+rax*4]
 10488a7:	jmp    0x1048874
 10488a9:	int3   
 10488aa:	int3   
 10488ab:	int3   
 10488ac:	int3   
 10488ad:	int3   
 10488ae:	int3   
 10488af:	int3   
 10488b0:	mov    rax,rsp
 10488b3:	mov    QWORD PTR [rax+0x8],rbx
 10488b7:	mov    QWORD PTR [rax+0x10],rbp
 10488bb:	mov    QWORD PTR [rax+0x20],rsi
 10488bf:	mov    DWORD PTR [rax+0x18],r8d
 10488c3:	push   rdi
 10488c4:	push   r12
 10488c6:	push   r13
 10488c8:	push   r14
 10488ca:	push   r15
 10488cc:	mov    rax,QWORD PTR [rcx]
 10488cf:	mov    r11d,edx
 10488d2:	mov    r14,rcx
 10488d5:	movzx  r9d,WORD PTR [r11+rax*1]
 10488da:	mov    rax,QWORD PTR [rcx+0x10]
 10488de:	mov    r10d,DWORD PTR [rax+r9*4]
 10488e2:	mov    DWORD PTR [rax+r9*4],edx
 10488e6:	mov    r9,QWORD PTR [rcx+0x18]
 10488ea:	mov    rbx,QWORD PTR [rcx+0x20]
 10488ee:	cmp    r10d,r8d
 10488f1:	ja     0x1048902
 10488f3:	and    DWORD PTR [rbx+r11*4],0x0
 10488f8:	and    DWORD PTR [r9+r11*4],0x0
 10488fd:	jmp    0x10489b8
 1048902:	mov    edi,0x2
 1048907:	lea    rdx,[r9+r11*4]
 104890b:	lea    r8,[rbx+r11*4]
 104890f:	mov    r12,rdi
 1048912:	mov    r13,rdi
 1048915:	mov    rax,QWORD PTR [r14]
 1048918:	mov    r15d,r10d
 104891b:	mov    rcx,rdi
 104891e:	lea    rsi,[r15+rax*1]
 1048922:	lea    rbp,[rax+r11*1]
 1048926:	mov    al,BYTE PTR [rdi+rbp*1]
 1048929:	cmp    BYTE PTR [rsi+rdi*1],al
 104892c:	jne    0x1048958
 104892e:	inc    rcx
 1048931:	cmp    rcx,0x32
 1048935:	jge    0x10489d1
 104893b:	mov    al,BYTE PTR [rcx+rbp*1]
 104893e:	cmp    BYTE PTR [rsi+rcx*1],al
 1048941:	jne    0x1048958
 1048943:	inc    rcx
 1048946:	cmp    rcx,0x32
 104894a:	jge    0x10489d1
 1048950:	mov    al,BYTE PTR [rcx+rbp*1]
 1048953:	cmp    BYTE PTR [rsi+rcx*1],al
 1048956:	je     0x104892e
 1048958:	mov    al,BYTE PTR [rcx+rbp*1]
 104895b:	cmp    BYTE PTR [rsi+rcx*1],al
 104895e:	jge    0x1048984
 1048960:	cmp    rcx,r13
 1048963:	jle    0x1048978
 1048965:	cmp    rcx,0x32
 1048969:	jge    0x10489d1
 104896b:	mov    rdi,rcx
 104896e:	cmp    r12,rcx
 1048971:	mov    r13,rcx
 1048974:	cmovl  rdi,r12
 1048978:	mov    DWORD PTR [r8],r10d
 104897b:	lea    r8,[r9+r15*4]
 104897f:	mov    r10d,DWORD PTR [r8]
 1048982:	jmp    0x10489a6
 1048984:	cmp    rcx,r12
 1048987:	jle    0x104899c
 1048989:	cmp    rcx,0x32
 104898d:	jge    0x10489d1
 104898f:	mov    rdi,r13
 1048992:	cmp    rcx,r13
 1048995:	mov    r12,rcx
 1048998:	cmovl  rdi,rcx
 104899c:	mov    DWORD PTR [rdx],r10d
 104899f:	lea    rdx,[rbx+r15*4]
 10489a3:	mov    r10d,DWORD PTR [rdx]
 10489a6:	cmp    r10d,DWORD PTR [rsp+0x40]
 10489ab:	ja     0x1048915
 10489b1:	and    DWORD PTR [rdx],0x0
 10489b4:	and    DWORD PTR [r8],0x0
 10489b8:	mov    rbx,QWORD PTR [rsp+0x30]
 10489bd:	mov    rbp,QWORD PTR [rsp+0x38]
 10489c2:	mov    rsi,QWORD PTR [rsp+0x48]
 10489c7:	pop    r15
 10489c9:	pop    r14
 10489cb:	pop    r13
 10489cd:	pop    r12
 10489cf:	pop    rdi
 10489d0:	ret    
 10489d1:	mov    ecx,r10d
 10489d4:	mov    eax,DWORD PTR [r9+rcx*4]
 10489d8:	mov    DWORD PTR [rdx],eax
 10489da:	mov    eax,DWORD PTR [rbx+rcx*4]
 10489dd:	mov    DWORD PTR [r8],eax
 10489e0:	jmp    0x10489b8
 10489e2:	int3   
 10489e3:	int3   
 10489e4:	int3   
 10489e5:	int3   
 10489e6:	int3   
 10489e7:	int3   
 10489e8:	mov    QWORD PTR [rsp+0x10],rbx
 10489ed:	push   rbp
 10489ee:	push   rsi
 10489ef:	push   rdi
 10489f0:	push   r12
 10489f2:	push   r13
 10489f4:	push   r14
 10489f6:	push   r15
 10489f8:	mov    rax,QWORD PTR [rcx]
 10489fb:	mov    ebp,edx
 10489fd:	mov    rbx,rcx
 1048a00:	movzx  r8d,WORD PTR [rbp+rax*1+0x0]
 1048a06:	mov    rax,QWORD PTR [rcx+0x10]
 1048a0a:	mov    r12d,ebp
 1048a0d:	mov    edx,DWORD PTR [rax+r8*4]
 1048a11:	mov    DWORD PTR [rax+r8*4],ebp
 1048a15:	sub    r12d,DWORD PTR [rcx+0x8]
 1048a19:	mov    r13,QWORD PTR [rcx+0x18]
 1048a1d:	mov    r14,QWORD PTR [rcx+0x20]
 1048a21:	add    r12d,0x4
 1048a25:	cmp    edx,r12d
 1048a28:	ja     0x1048a3d
 1048a2a:	xor    r10d,r10d
 1048a2d:	xor    eax,eax
 1048a2f:	mov    DWORD PTR [r14+rbp*4],r10d
 1048a33:	mov    DWORD PTR [r13+rbp*4+0x0],r10d
 1048a38:	jmp    0x1048c8e
 1048a3d:	mov    ecx,0x2
 1048a42:	mov    eax,ebp
 1048a44:	lea    r15,[r13+rbp*4+0x0]
 1048a49:	sub    eax,edx
 1048a4b:	mov    rsi,rcx
 1048a4e:	mov    r8,rcx
 1048a51:	add    eax,ecx
 1048a53:	mov    QWORD PTR [rsp+0x50],rcx
 1048a58:	mov    QWORD PTR [rsp+0x58],rcx
 1048a5d:	mov    DWORD PTR [rbx+0x78],eax
 1048a60:	lea    rax,[r14+rbp*4]
 1048a64:	mov    QWORD PTR [rsp+0x40],rax
 1048a69:	mov    rax,QWORD PTR [rbx]
 1048a6c:	mov    r9d,edx
 1048a6f:	xor    r10d,r10d
 1048a72:	add    r9,rax
 1048a75:	lea    rdi,[rax+rbp*1]
 1048a79:	mov    rcx,rsi
 1048a7c:	mov    al,BYTE PTR [rdi+rsi*1]
 1048a7f:	cmp    BYTE PTR [r9+rsi*1],al
 1048a83:	jne    0x1048aaf
 1048a85:	inc    rcx
 1048a88:	cmp    rcx,0x101
 1048a8f:	jge    0x1048ac4
 1048a91:	mov    al,BYTE PTR [rdi+rcx*1]
 1048a94:	cmp    BYTE PTR [r9+rcx*1],al
 1048a98:	jne    0x1048aaf
 1048a9a:	inc    rcx
 1048a9d:	cmp    rcx,0x101
 1048aa4:	jge    0x1048ac4
 1048aa6:	mov    al,BYTE PTR [rdi+rcx*1]
 1048aa9:	cmp    BYTE PTR [r9+rcx*1],al
 1048aad:	je     0x1048a85
 1048aaf:	mov    al,BYTE PTR [rdi+rcx*1]
 1048ab2:	cmp    BYTE PTR [r9+rcx*1],al
 1048ab6:	jge    0x1048b17
 1048ab8:	cmp    rcx,QWORD PTR [rsp+0x58]
 1048abd:	jle    0x1048b00
 1048abf:	cmp    rcx,r8
 1048ac2:	jle    0x1048aec
 1048ac4:	mov    r9d,ebp
 1048ac7:	lea    rax,[rbx+r8*4+0x70]
 1048acc:	sub    r9d,edx
 1048acf:	add    r9d,0x2
 1048ad3:	add    rax,0x4
 1048ad7:	inc    r8
 1048ada:	cmp    r8,rcx
 1048add:	mov    DWORD PTR [rax],r9d
 1048ae0:	jl     0x1048ad3
 1048ae2:	cmp    rcx,0x32
 1048ae6:	jge    0x1048c9f
 1048aec:	mov    rax,QWORD PTR [rsp+0x50]
 1048af1:	mov    rsi,rcx
 1048af4:	mov    QWORD PTR [rsp+0x58],rcx
 1048af9:	cmp    rax,rcx
 1048afc:	cmovl  rsi,rax
 1048b00:	mov    rcx,QWORD PTR [rsp+0x40]
 1048b05:	mov    eax,edx
 1048b07:	lea    rax,[r13+rax*4+0x0]
 1048b0c:	mov    DWORD PTR [rcx],edx
 1048b0e:	mov    edx,DWORD PTR [rax]
 1048b10:	mov    QWORD PTR [rsp+0x40],rax
 1048b15:	jmp    0x1048b70
 1048b17:	cmp    rcx,QWORD PTR [rsp+0x50]
 1048b1c:	jle    0x1048b5f
 1048b1e:	cmp    rcx,r8
 1048b21:	jle    0x1048b4b
 1048b23:	mov    r9d,ebp
 1048b26:	lea    rax,[rbx+r8*4+0x70]
 1048b2b:	sub    r9d,edx
 1048b2e:	add    r9d,0x2
 1048b32:	add    rax,0x4
 1048b36:	inc    r8
 1048b39:	cmp    r8,rcx
 1048b3c:	mov    DWORD PTR [rax],r9d
 1048b3f:	jl     0x1048b32
 1048b41:	cmp    rcx,0x32
 1048b45:	jge    0x1048c9f
 1048b4b:	mov    rax,QWORD PTR [rsp+0x58]
 1048b50:	mov    QWORD PTR [rsp+0x50],rcx
 1048b55:	mov    rsi,rax
 1048b58:	cmp    rcx,rax
 1048b5b:	cmovl  rsi,rcx
 1048b5f:	mov    eax,edx
 1048b61:	mov    DWORD PTR [r15],edx
 1048b64:	lea    r15,[r14+rax*4]
 1048b68:	mov    rax,QWORD PTR [rsp+0x40]
 1048b6d:	mov    edx,DWORD PTR [r15]
 1048b70:	cmp    edx,r12d
 1048b73:	ja     0x1048a69
 1048b79:	mov    DWORD PTR [r15],r10d
 1048b7c:	mov    DWORD PTR [rax],r10d
 1048b7f:	cmp    r8,r10
 1048b82:	mov    r9d,r10d
 1048b85:	jle    0x1048bac
 1048b87:	mov    rdi,QWORD PTR [rbx]
 1048b8a:	mov    r11d,ebp
 1048b8d:	sub    r11d,DWORD PTR [rbx+0x64]
 1048b91:	mov    cl,BYTE PTR [r11+rdi*1]
 1048b95:	lea    eax,[r9+rbp*1]
 1048b99:	cmp    BYTE PTR [rax+rdi*1],cl
 1048b9c:	jne    0x1048bac
 1048b9e:	inc    r9d
 1048ba1:	inc    r11d
 1048ba4:	movsxd rax,r9d
 1048ba7:	cmp    rax,r8
 1048baa:	jl     0x1048b91
 1048bac:	cmp    r9d,0x2
 1048bb0:	movsxd rsi,r9d
 1048bb3:	mov    rax,rsi
 1048bb6:	jl     0x1048bd7
 1048bb8:	lea    rcx,[rbx+rsi*4+0x70]
 1048bbd:	dec    rax
 1048bc0:	mov    DWORD PTR [rcx],r10d
 1048bc3:	sub    rcx,0x4
 1048bc7:	cmp    rax,0x2
 1048bcb:	jge    0x1048bbd
 1048bcd:	cmp    r9d,0x32
 1048bd1:	jg     0x1048c6f
 1048bd7:	cmp    r8,r10
 1048bda:	mov    r11d,r10d
 1048bdd:	jle    0x1048c02
 1048bdf:	mov    r12,QWORD PTR [rbx]
 1048be2:	mov    edi,ebp
 1048be4:	sub    edi,DWORD PTR [rbx+0x68]
 1048be7:	mov    cl,BYTE PTR [rdi+r12*1]
 1048beb:	lea    eax,[r11+rbp*1]
 1048bef:	cmp    BYTE PTR [rax+r12*1],cl
 1048bf3:	jne    0x1048c02
 1048bf5:	inc    r11d
 1048bf8:	inc    edi
 1048bfa:	movsxd rax,r11d
 1048bfd:	cmp    rax,r8
 1048c00:	jl     0x1048be7
 1048c02:	cmp    r11d,r9d
 1048c05:	jle    0x1048c24
 1048c07:	movsxd rcx,r11d
 1048c0a:	lea    rax,[rbx+rsi*4+0x70]
 1048c0f:	add    rax,0x4
 1048c13:	inc    rsi
 1048c16:	inc    r9d
 1048c19:	cmp    rsi,rcx
 1048c1c:	mov    DWORD PTR [rax],0x1
 1048c22:	jl     0x1048c0f
 1048c24:	cmp    r8,r10
 1048c27:	mov    r11d,r10d
 1048c2a:	jle    0x1048c4d
 1048c2c:	mov    rsi,QWORD PTR [rbx]
 1048c2f:	mov    edi,ebp
 1048c31:	sub    edi,DWORD PTR [rbx+0x6c]
 1048c34:	mov    cl,BYTE PTR [rdi+rsi*1]
 1048c37:	lea    eax,[r11+rbp*1]
 1048c3b:	cmp    BYTE PTR [rax+rsi*1],cl
 1048c3e:	jne    0x1048c4d
 1048c40:	inc    r11d
 1048c43:	inc    edi
 1048c45:	movsxd rax,r11d
 1048c48:	cmp    rax,r8
 1048c4b:	jl     0x1048c34
 1048c4d:	cmp    r11d,r9d
 1048c50:	movsxd rax,r9d
 1048c53:	jle    0x1048c6f
 1048c55:	movsxd rdx,r11d
 1048c58:	lea    rcx,[rbx+rax*4+0x70]
 1048c5d:	add    rcx,0x4
 1048c61:	inc    rax
 1048c64:	cmp    rax,rdx
 1048c67:	mov    DWORD PTR [rcx],0x2
 1048c6d:	jl     0x1048c5d
 1048c6f:	mov    eax,0x7fff
 1048c74:	and    ebp,eax
 1048c76:	sub    eax,ebp
 1048c78:	movsxd rcx,eax
 1048c7b:	cmp    r8,rcx
 1048c7e:	jle    0x1048c8b
 1048c80:	mov    r8,rcx
 1048c83:	cmp    rcx,0x2
 1048c87:	cmovl  r8,r10
 1048c8b:	mov    eax,r8d
 1048c8e:	mov    rbx,QWORD PTR [rsp+0x48]
 1048c93:	pop    r15
 1048c95:	pop    r14
 1048c97:	pop    r13
 1048c99:	pop    r12
 1048c9b:	pop    rdi
 1048c9c:	pop    rsi
 1048c9d:	pop    rbp
 1048c9e:	ret    
 1048c9f:	mov    ecx,edx
 1048ca1:	mov    eax,DWORD PTR [r13+rcx*4+0x0]
 1048ca6:	mov    DWORD PTR [r15],eax
 1048ca9:	mov    eax,DWORD PTR [r14+rcx*4]
 1048cad:	mov    rcx,QWORD PTR [rsp+0x40]
 1048cb2:	mov    DWORD PTR [rcx],eax
 1048cb4:	jmp    0x1048b7f
 1048cb9:	int3   
 1048cba:	int3   
 1048cbb:	int3   
 1048cbc:	int3   
 1048cbd:	int3   
 1048cbe:	int3   
 1048cbf:	int3   
 1048cc0:	rex push rbx
 1048cc2:	sub    rsp,0x30
 1048cc6:	mov    rax,QWORD PTR [rip+0x1aba3]        # 0x1063870
 1048ccd:	xor    rax,rsp
 1048cd0:	mov    QWORD PTR [rsp+0x28],rax
 1048cd5:	xor    r10d,r10d
 1048cd8:	add    rcx,0x254a
 1048cdf:	lea    ebx,[r10+0x1]
 1048ce3:	mov    WORD PTR [rsp],r10w
 1048ce8:	mov    WORD PTR [rsp+0x2],r10w
 1048cee:	mov    r11,rbx
 1048cf1:	movzx  eax,WORD PTR [rsp+r11*2]
 1048cf6:	add    ax,WORD PTR [rcx]
 1048cf9:	add    rcx,0x2
 1048cfd:	add    ax,ax
 1048d00:	mov    WORD PTR [rsp+r11*2+0x2],ax
 1048d06:	add    r11,rbx
 1048d09:	cmp    r11,0x10
 1048d0d:	jle    0x1048cf1
 1048d0f:	movsxd rdx,edx
 1048d12:	cmp    rdx,r10
 1048d15:	jle    0x1048d36
 1048d17:	movsx  rax,BYTE PTR [r10+r8*1]
 1048d1c:	movzx  ecx,WORD PTR [rsp+rax*2]
 1048d20:	mov    WORD PTR [r9+r10*2],cx
 1048d25:	movsx  rax,BYTE PTR [r10+r8*1]
 1048d2a:	add    r10,rbx
 1048d2d:	add    WORD PTR [rsp+rax*2],bx
 1048d31:	cmp    r10,rdx
 1048d34:	jl     0x1048d17
 1048d36:	mov    rcx,QWORD PTR [rsp+0x28]
 1048d3b:	xor    rcx,rsp
 1048d3e:	call   0x103ff40
 1048d43:	add    rsp,0x30
 1048d47:	pop    rbx
 1048d48:	ret    
 1048d49:	int3   
 1048d4a:	int3   
 1048d4b:	int3   
 1048d4c:	int3   
 1048d4d:	int3   
 1048d4e:	int3   
 1048d4f:	int3   
 1048d50:	mov    QWORD PTR [rsp+0x8],rbx
 1048d55:	movsx  r10,dx
 1048d59:	mov    r9,rcx
 1048d5c:	movzx  r11d,WORD PTR [rcx+r10*2+0x9f0]
 1048d65:	mov    rax,r10
 1048d68:	movzx  eax,WORD PTR [rcx+0x2570]
 1048d6f:	movzx  r8d,r10w
 1048d73:	jmp    0x1048de8
 1048d75:	jge    0x1048da2
 1048d77:	mov    rdx,QWORD PTR [r9+0x9d8]
 1048d7e:	movsx  rcx,r8w
 1048d82:	movsx  rax,WORD PTR [r9+rcx*2+0x9f2]
 1048d8b:	movsx  rcx,WORD PTR [r9+rcx*2+0x9f0]
 1048d94:	movzx  eax,WORD PTR [rdx+rax*2]
 1048d98:	cmp    WORD PTR [rdx+rcx*2],ax
 1048d9c:	jbe    0x1048da2
 1048d9e:	inc    r8w
 1048da2:	mov    eax,0x2be
 1048da7:	cmp    r8w,ax
 1048dab:	jge    0x1048df2
 1048dad:	mov    rdx,QWORD PTR [r9+0x9d8]
 1048db4:	movsx  rax,r8w
 1048db8:	movsx  rcx,r11w
 1048dbc:	movsx  rbx,WORD PTR [r9+rax*2+0x9f0]
 1048dc5:	movzx  eax,WORD PTR [rdx+rbx*2]
 1048dc9:	cmp    WORD PTR [rdx+rcx*2],ax
 1048dcd:	jbe    0x1048df2
 1048dcf:	movsx  rax,r10w
 1048dd3:	movzx  r10d,r8w
 1048dd7:	mov    WORD PTR [r9+rax*2+0x9f0],bx
 1048de0:	mov    ax,WORD PTR [r9+0x2570]
 1048de8:	add    r8w,r8w
 1048dec:	cmp    r8w,ax
 1048df0:	jle    0x1048d75
 1048df2:	mov    rbx,QWORD PTR [rsp+0x8]
 1048df7:	movsx  rax,r10w
 1048dfb:	mov    WORD PTR [r9+rax*2+0x9f0],r11w
 1048e04:	ret    
 1048e05:	int3   
 1048e06:	int3   
 1048e07:	int3   
 1048e08:	int3   
 1048e09:	int3   
 1048e0a:	int3   
 1048e0b:	int3   
 1048e0c:	mov    QWORD PTR [rsp+0x8],rbx
 1048e11:	push   rdi
 1048e12:	sub    rsp,0x20
 1048e16:	movsx  eax,dx
 1048e19:	mov    rdi,rcx
 1048e1c:	cmp    eax,DWORD PTR [rcx+0x256c]
 1048e22:	jge    0x1048e42
 1048e24:	mov    cl,BYTE PTR [rcx+0x2572]
 1048e2a:	mov    eax,0x10
 1048e2f:	cmp    cl,al
 1048e31:	jge    0x1048e36
 1048e33:	movsx  eax,cl
 1048e36:	cdqe   
 1048e38:	inc    WORD PTR [rdi+rax*2+0x2548]
 1048e40:	jmp    0x1048e73
 1048e42:	inc    BYTE PTR [rcx+0x2572]
 1048e48:	movsx  rax,dx
 1048e4c:	lea    rbx,[rax+rax*1]
 1048e50:	movzx  edx,WORD PTR [rcx+rbx*2+0xf6c]
 1048e58:	call   0x1048e0c
 1048e5d:	movzx  edx,WORD PTR [rdi+rbx*2+0xf6e]
 1048e65:	mov    rcx,rdi
 1048e68:	call   0x1048e0c
 1048e6d:	dec    BYTE PTR [rdi+0x2572]
 1048e73:	mov    rbx,QWORD PTR [rsp+0x30]
 1048e78:	add    rsp,0x20
 1048e7c:	pop    rdi
 1048e7d:	ret    
 1048e7e:	int3   
 1048e7f:	int3   
 1048e80:	int3   
 1048e81:	int3   
 1048e82:	int3   
 1048e83:	int3   
 1048e84:	mov    QWORD PTR [rsp+0x8],rbx
 1048e89:	mov    QWORD PTR [rsp+0x10],rsi
 1048e8e:	push   rdi
 1048e8f:	sub    rsp,0x20
 1048e93:	mov    r8,rcx
 1048e96:	lea    rdi,[rcx+0x2548]
 1048e9d:	xor    ebx,ebx
 1048e9f:	movzx  eax,bx
 1048ea2:	lea    ecx,[rbx+0x11]
 1048ea5:	rep stos WORD PTR es:[rdi],ax
 1048ea8:	mov    rcx,r8
 1048eab:	call   0x1048e0c
 1048eb0:	lea    r9d,[rbx+0x10]
 1048eb4:	lea    rdi,[r8+0x2568]
 1048ebb:	mov    r10b,r9b
 1048ebe:	mov    r11,rdi
 1048ec1:	movzx  edx,bx
 1048ec4:	lea    esi,[rbx+0x2]
 1048ec7:	movzx  eax,r10b
 1048ecb:	mov    ecx,r9d
 1048ece:	dec    r10b
 1048ed1:	sub    ecx,eax
 1048ed3:	movzx  eax,WORD PTR [r11]
 1048ed7:	sub    r11,rsi
 1048eda:	shl    ax,cl
 1048edd:	add    dx,ax
 1048ee0:	cmp    r10b,bl
 1048ee3:	ja     0x1048ec7
 1048ee5:	cmp    dx,bx
 1048ee8:	je     0x1048f26
 1048eea:	mov    r10d,0xffff
 1048ef0:	add    WORD PTR [rdi],r10w
 1048ef4:	mov    cl,0xf
 1048ef6:	movzx  eax,cl
 1048ef9:	cmp    WORD PTR [r8+rax*2+0x2548],bx
 1048f02:	jne    0x1048f0b
 1048f04:	add    cl,0xff
 1048f07:	jne    0x1048ef6
 1048f09:	jmp    0x1048f20
 1048f0b:	movzx  eax,cl
 1048f0e:	add    WORD PTR [r8+rax*2+0x2548],r10w
 1048f17:	add    WORD PTR [r8+rax*2+0x254a],si
 1048f20:	add    dx,r10w
 1048f24:	jne    0x1048ef0
 1048f26:	movzx  edx,WORD PTR [rdi]
 1048f29:	sub    dx,0x1
 1048f2d:	js     0x1048f51
 1048f2f:	mov    rax,QWORD PTR [r8+0x9e0]
 1048f36:	movzx  ecx,WORD PTR [rax]
 1048f39:	mov    rax,QWORD PTR [r8+0x9e8]
 1048f40:	mov    BYTE PTR [rcx+rax*1],r9b
 1048f44:	add    QWORD PTR [r8+0x9e0],rsi
 1048f4b:	add    dx,0xffff
 1048f4f:	jns    0x1048f2f
 1048f51:	dec    r9b
 1048f54:	sub    rdi,rsi
 1048f57:	cmp    r9b,bl
 1048f5a:	ja     0x1048f26
 1048f5c:	mov    rbx,QWORD PTR [rsp+0x30]
 1048f61:	mov    rsi,QWORD PTR [rsp+0x38]
 1048f66:	add    rsp,0x20
 1048f6a:	pop    rdi
 1048f6b:	ret    
 1048f6c:	int3   
 1048f6d:	int3   
 1048f6e:	int3   
 1048f6f:	int3   
 1048f70:	int3   
 1048f71:	int3   
 1048f72:	int3   
 1048f73:	int3   
 1048f74:	mov    QWORD PTR [rsp+0x8],rbx
 1048f79:	mov    QWORD PTR [rsp+0x10],rbp
 1048f7e:	mov    QWORD PTR [rsp+0x18],rsi
 1048f83:	push   rdi
 1048f84:	push   r12
 1048f86:	push   r13
 1048f88:	push   r14
 1048f8a:	push   r15
 1048f8c:	sub    rsp,0x20
 1048f90:	movzx  ebx,WORD PTR [rcx+0x2570]
 1048f97:	mov    rbp,r9
 1048f9a:	mov    r14,r8
 1048f9d:	movzx  r15d,dx
 1048fa1:	mov    rdi,rcx
 1048fa4:	mov    r12d,0x1
 1048faa:	sar    bx,1
 1048fad:	jmp    0x1048fbd
 1048faf:	movzx  edx,bx
 1048fb2:	mov    rcx,rdi
 1048fb5:	call   0x1048d50
 1048fba:	dec    bx
 1048fbd:	cmp    bx,r12w
 1048fc1:	jge    0x1048faf
 1048fc3:	mov    QWORD PTR [rdi+0x9e0],rbp
 1048fca:	jmp    0x1048fd2
 1048fcc:	mov    r12d,0x1
 1048fd2:	movsx  esi,WORD PTR [rdi+0x9f2]
 1048fd9:	cmp    esi,DWORD PTR [rdi+0x256c]
 1048fdf:	jge    0x1048ff3
 1048fe1:	mov    rax,QWORD PTR [rdi+0x9e0]
 1048fe8:	mov    WORD PTR [rax],si
 1048feb:	add    QWORD PTR [rdi+0x9e0],0x2
 1048ff3:	movsx  rdx,WORD PTR [rdi+0x2570]
 1048ffb:	movzx  ecx,WORD PTR [rdi+rdx*2+0x9f0]
 1049003:	sub    dx,r12w
 1049007:	mov    WORD PTR [rdi+0x9f2],cx
 104900e:	mov    WORD PTR [rdi+0x2570],dx
 1049015:	mov    rcx,rdi
 1049018:	mov    edx,r12d
 104901b:	call   0x1048d50
 1049020:	movsx  r13d,WORD PTR [rdi+0x9f2]
 1049028:	cmp    r13d,DWORD PTR [rdi+0x256c]
 104902f:	jge    0x1049044
 1049031:	mov    rax,QWORD PTR [rdi+0x9e0]
 1049038:	mov    WORD PTR [rax],r13w
 104903c:	add    QWORD PTR [rdi+0x9e0],0x2
 1049044:	movsx  r12,r15w
 1049048:	movsx  rcx,r13w
 104904c:	movsx  rax,si
 1049050:	movzx  ecx,WORD PTR [r14+rcx*2]
 1049055:	mov    edx,0x1
 104905a:	lea    rbx,[r12+r12*1]
 104905e:	add    cx,WORD PTR [r14+rax*2]
 1049063:	add    r15w,dx
 1049067:	mov    WORD PTR [rbx+r14*1],cx
 104906c:	mov    rcx,rdi
 104906f:	mov    WORD PTR [rdi+0x9f2],r12w
 1049077:	call   0x1048d50
 104907c:	mov    eax,0x1
 1049081:	mov    WORD PTR [rdi+rbx*2+0xf6c],si
 1049089:	mov    WORD PTR [rdi+rbx*2+0xf6e],r13w
 1049092:	cmp    WORD PTR [rdi+0x2570],ax
 1049099:	jg     0x1048fcc
 104909f:	movzx  edx,r12w
 10490a3:	mov    rcx,rdi
 10490a6:	mov    QWORD PTR [rdi+0x9e0],rbp
 10490ad:	mov    rbx,QWORD PTR [rsp+0x50]
 10490b2:	mov    rbp,QWORD PTR [rsp+0x58]
 10490b7:	mov    rsi,QWORD PTR [rsp+0x60]
 10490bc:	add    rsp,0x20
 10490c0:	pop    r15
 10490c2:	pop    r14
 10490c4:	pop    r13
 10490c6:	pop    r12
 10490c8:	pop    rdi
 10490c9:	jmp    0x1048e84
 10490ce:	int3   
 10490cf:	int3   
 10490d0:	int3   
 10490d1:	int3   
 10490d2:	int3   
 10490d3:	int3   
 10490d4:	mov    QWORD PTR [rsp+0x8],rbx
 10490d9:	mov    QWORD PTR [rsp+0x10],rbp
 10490de:	mov    QWORD PTR [rsp+0x18],rsi
 10490e3:	push   rdi
 10490e4:	sub    rsp,0x20
 10490e8:	xor    ebp,ebp
 10490ea:	mov    rsi,r9
 10490ed:	mov    edi,edx
 10490ef:	lea    r9d,[rbp+0x1]
 10490f3:	mov    rbx,rcx
 10490f6:	cmp    edi,ebp
 10490f8:	mov    DWORD PTR [rbx+0x256c],edi
 10490fe:	mov    QWORD PTR [rbx+0x9d8],r8
 1049105:	mov    QWORD PTR [rbx+0x9e8],rsi
 104910c:	movzx  r10d,di
 1049110:	mov    BYTE PTR [rbx+0x2572],bpl
 1049117:	mov    WORD PTR [rbx+0x2570],bp
 104911e:	mov    WORD PTR [rbx+0x9f2],bp
 1049125:	movzx  edx,bp
 1049128:	jle    0x10491c0
 104912e:	mov    rax,QWORD PTR [rbx+0x9e8]
 1049135:	movsx  rcx,dx
 1049139:	mov    BYTE PTR [rcx+rax*1],bpl
 104913d:	cmp    WORD PTR [r8+rcx*2],bp
 1049142:	je     0x104915c
 1049144:	add    WORD PTR [rbx+0x2570],r9w
 104914c:	movsx  rax,WORD PTR [rbx+0x2570]
 1049154:	mov    WORD PTR [rbx+rax*2+0x9f0],dx
 104915c:	add    dx,r9w
 1049160:	movsx  eax,dx
 1049163:	cmp    eax,edi
 1049165:	jl     0x104912e
 1049167:	movzx  eax,WORD PTR [rbx+0x2570]
 104916e:	cmp    ax,0x2
 1049172:	jge    0x1049195
 1049174:	cmp    ax,bp
 1049177:	je     0x10491c0
 1049179:	cmp    WORD PTR [rbx+0x9f2],bp
 1049180:	jne    0x104918c
 1049182:	mov    WORD PTR [r8+0x2],r9w
 1049187:	jmp    0x10490f6
 104918c:	mov    WORD PTR [r8],r9w
 1049190:	jmp    0x10490f6
 1049195:	mov    r9,QWORD PTR [rsp+0x50]
 104919a:	movzx  edx,r10w
 104919e:	mov    rcx,rbx
 10491a1:	call   0x1048f74
 10491a6:	cmp    DWORD PTR [rsp+0x58],ebp
 10491aa:	je     0x10491d1
 10491ac:	mov    r9,QWORD PTR [rsp+0x50]
 10491b1:	mov    r8,rsi
 10491b4:	mov    edx,edi
 10491b6:	mov    rcx,rbx
 10491b9:	call   0x1048cc0
 10491be:	jmp    0x10491d1
 10491c0:	movsx  rcx,WORD PTR [rbx+0x9f2]
 10491c8:	mov    rax,QWORD PTR [rsp+0x50]
 10491cd:	mov    WORD PTR [rax+rcx*2],bp
 10491d1:	mov    rbx,QWORD PTR [rsp+0x30]
 10491d6:	mov    rbp,QWORD PTR [rsp+0x38]
 10491db:	mov    rsi,QWORD PTR [rsp+0x40]
 10491e0:	add    rsp,0x20
 10491e4:	pop    rdi
 10491e5:	ret    
 10491e6:	int3   
 10491e7:	int3   
 10491e8:	int3   
 10491e9:	int3   
 10491ea:	int3   
 10491eb:	int3   
 10491ec:	jmp    QWORD PTR [rip+0xfffffffffffb85e6]        # 0x10017d8
 10491f2:	int3   
 10491f3:	int3   
 10491f4:	int3   
 10491f5:	int3   
 10491f6:	int3   
 10491f7:	int3   
 10491f8:	jmp    QWORD PTR [rip+0xfffffffffffb85e2]        # 0x10017e0
 10491fe:	int3   
 10491ff:	int3   
 1049200:	int3   
 1049201:	int3   
 1049202:	int3   
 1049203:	int3   
 1049204:	jmp    QWORD PTR [rip+0xfffffffffffb8696]        # 0x10018a0
 104920a:	int3   
 104920b:	int3   
 104920c:	int3   
 104920d:	int3   
 104920e:	int3   
 104920f:	int3   
 1049210:	rex push rbp
 1049212:	mov    rbp,rsp
 1049215:	sub    rsp,0x20
 1049219:	xor    edx,edx
 104921b:	add    rsp,0x20
 104921f:	pop    rbp
 1049220:	rex.W jmp QWORD PTR [rip+0x1a669]        # 0x1063890
 1049227:	int3   
 1049228:	int3   
 1049229:	int3   
 104922a:	int3   
 104922b:	int3   
 104922c:	int3   
 104922d:	int3   
 104922e:	int3   
 104922f:	int3   
 1049230:	mov    QWORD PTR [rsp+0x8],rbx
 1049235:	push   rbp
 1049236:	mov    rbp,rsp
 1049239:	push   rsi
 104923a:	push   rdi
 104923b:	sub    rsp,0x20
 104923f:	xor    edi,edi
 1049241:	mov    rbx,r8
 1049244:	mov    r9,rdx
 1049247:	mov    esi,ecx
 1049249:	mov    QWORD PTR [rsp+0x48],rdi
 104924e:	test   rdx,rdx
 1049251:	je     0x10492b1
 1049253:	mov    rax,QWORD PTR [rdx]
 1049256:	lea    r8,[rsp+0x58]
 104925b:	lea    rdx,[rip+0xfffffffffffc126e]        # 0x100a4d0
 1049262:	mov    rcx,r9
 1049265:	call   QWORD PTR [rax]
 1049267:	test   eax,eax
 1049269:	js     0x10492ac
 104926b:	mov    rcx,QWORD PTR [rsp+0x58]
 1049270:	mov    rdx,rbx
 1049273:	mov    rax,QWORD PTR [rcx]
 1049276:	call   QWORD PTR [rax+0x18]
 1049279:	mov    rcx,QWORD PTR [rsp+0x58]
 104927e:	mov    rdx,QWORD PTR [rcx]
 1049281:	mov    ebx,eax
 1049283:	call   QWORD PTR [rdx+0x10]
 1049286:	test   ebx,ebx
 1049288:	jne    0x10492ac
 104928a:	lea    rdx,[rsp+0x48]
 104928f:	xor    ecx,ecx
 1049291:	call   QWORD PTR [rip+0xfffffffffffb85b9]        # 0x1001850
 1049297:	mov    rcx,QWORD PTR [rsp+0x48]
 104929c:	test   eax,eax
 104929e:	cmovne rcx,rdi
 10492a2:	mov    rdi,rcx
 10492a5:	mov    QWORD PTR [rsp+0x48],rcx
 10492aa:	jmp    0x10492b1
 10492ac:	mov    rdi,QWORD PTR [rsp+0x48]
 10492b1:	mov    rdx,rdi
 10492b4:	mov    ecx,esi
 10492b6:	call   QWORD PTR [rip+0x1a5d4]        # 0x1063890
 10492bc:	mov    rbx,QWORD PTR [rsp+0x40]
 10492c1:	add    rsp,0x20
 10492c5:	pop    rdi
 10492c6:	pop    rsi
 10492c7:	pop    rbp
 10492c8:	ret    
 10492c9:	int3   
 10492ca:	int3   
 10492cb:	int3   
 10492cc:	int3   
 10492cd:	int3   
 10492ce:	int3   
 10492cf:	int3   
 10492d0:	mov    QWORD PTR [rsp+0x8],rcx
 10492d5:	push   rbp
 10492d6:	push   rdi
 10492d7:	push   r12
 10492d9:	movaps xmm5,XMMWORD PTR [rsp+0x10]
 10492de:	sub    rsp,0x60
 10492e2:	movaps XMMWORD PTR [rsp+0x30],xmm5
 10492e7:	lea    rbp,[rsp+0x30]
 10492ec:	mov    QWORD PTR [rbp+0x58],rbx
 10492f0:	mov    QWORD PTR [rbp+0x60],rsi
 10492f4:	mov    rax,QWORD PTR [rip+0x1a575]        # 0x1063870
 10492fb:	xor    rax,rbp
 10492fe:	mov    QWORD PTR [rbp+0x20],rax
 1049302:	mov    rsi,rcx
 1049305:	test   rcx,rcx
 1049308:	jne    0x1049311
 104930a:	xor    eax,eax
 104930c:	jmp    0x1049440
 1049311:	call   QWORD PTR [rip+0xfffffffffffb81c9]        # 0x10014e0
 1049317:	lea    r12d,[rax+0x1]
 104931b:	mov    DWORD PTR [rbp+0x14],r12d
 104931f:	xor    eax,eax
 1049321:	mov    DWORD PTR [rsp+0x28],eax
 1049325:	mov    QWORD PTR [rsp+0x20],rax
 104932a:	mov    r9d,r12d
 104932d:	mov    r8,rsi
 1049330:	xor    edx,edx
 1049332:	xor    ecx,ecx
 1049334:	call   QWORD PTR [rip+0xfffffffffffb80f6]        # 0x1001430
 104933a:	movsxd rdi,eax
 104933d:	mov    DWORD PTR [rbp+0x10],edi
 1049340:	test   eax,eax
 1049342:	jne    0x104935e
 1049344:	call   QWORD PTR [rip+0xfffffffffffb8206]        # 0x1001550
 104934a:	test   eax,eax
 104934c:	jle    0x1049356
 104934e:	movzx  eax,ax
 1049351:	or     eax,0x80070000
 1049356:	mov    ecx,eax
 1049358:	call   0x1049210
 104935d:	nop
 104935e:	cmp    edi,0x1000
 1049364:	jge    0x1049395
 1049366:	mov    rax,rdi
 1049369:	add    rax,rax
 104936c:	lea    rcx,[rax+0xf]
 1049370:	cmp    rcx,rax
 1049373:	ja     0x104937f
 1049375:	movabs rcx,0xffffffffffffff0
 104937f:	and    rcx,0xfffffffffffffff0
 1049383:	mov    rax,rcx
 1049386:	call   0x1040290
 104938b:	sub    rsp,rcx
 104938e:	lea    rbx,[rsp+0x30]
 1049393:	jmp    0x10493a3
 1049395:	mov    rcx,rdi
 1049398:	add    rcx,rcx
 104939b:	call   0x1040278
 10493a0:	mov    rbx,rax
 10493a3:	mov    QWORD PTR [rbp+0x18],rbx
 10493a7:	jmp    0x10493ba
 10493a9:	xor    ebx,ebx
 10493ab:	mov    QWORD PTR [rbp+0x18],rbx
 10493af:	mov    rsi,QWORD PTR [rbp+0x50]
 10493b3:	mov    r12d,DWORD PTR [rbp+0x14]
 10493b7:	mov    edi,DWORD PTR [rbp+0x10]
 10493ba:	test   rbx,rbx
 10493bd:	jne    0x10493ca
 10493bf:	mov    ecx,0x8007000e
 10493c4:	call   0x1049210
 10493c9:	int3   
 10493ca:	mov    DWORD PTR [rsp+0x28],edi
 10493ce:	mov    QWORD PTR [rsp+0x20],rbx
 10493d3:	mov    r9d,r12d
 10493d6:	mov    r8,rsi
 10493d9:	xor    edx,edx
 10493db:	xor    ecx,ecx
 10493dd:	call   QWORD PTR [rip+0xfffffffffffb804d]        # 0x1001430
 10493e3:	test   eax,eax
 10493e5:	jne    0x1049411
 10493e7:	cmp    edi,0x1000
 10493ed:	jl     0x10493f7
 10493ef:	mov    rcx,rbx
 10493f2:	call   0x103fe88
 10493f7:	call   QWORD PTR [rip+0xfffffffffffb8153]        # 0x1001550
 10493fd:	test   eax,eax
 10493ff:	jle    0x1049409
 1049401:	movzx  eax,ax
 1049404:	or     eax,0x80070000
 1049409:	mov    ecx,eax
 104940b:	call   0x1049210
 1049410:	int3   
 1049411:	mov    rcx,rbx
 1049414:	call   QWORD PTR [rip+0xfffffffffffb8426]        # 0x1001840
 104941a:	mov    rsi,rax
 104941d:	cmp    edi,0x1000
 1049423:	jl     0x104942d
 1049425:	mov    rcx,rbx
 1049428:	call   0x103fe88
 104942d:	test   rsi,rsi
 1049430:	jne    0x104943d
 1049432:	mov    ecx,0x8007000e
 1049437:	call   0x1049210
 104943c:	int3   
 104943d:	mov    rax,rsi
 1049440:	mov    rcx,QWORD PTR [rbp+0x20]
 1049444:	xor    rcx,rbp
 1049447:	call   0x103ff40
 104944c:	mov    rbx,QWORD PTR [rbp+0x58]
 1049450:	mov    rsi,QWORD PTR [rbp+0x60]
 1049454:	lea    rsp,[rbp+0x30]
 1049458:	pop    r12
 104945a:	pop    rdi
 104945b:	pop    rbp
 104945c:	ret    
 104945d:	int3   
 104945e:	int3   
 104945f:	int3   
 1049460:	int3   
 1049461:	int3   
 1049462:	int3   
 1049463:	int3   
 1049464:	int3   
 1049465:	int3   
 1049466:	int3   
 1049467:	int3   
 1049468:	int3   
 1049469:	int3   
 104946a:	int3   
 104946b:	int3   
 104946c:	int3   
 104946d:	int3   
 104946e:	int3   
 104946f:	int3   
 1049470:	mov    r11,rsp
 1049473:	push   rbp
 1049474:	mov    rbp,rsp
 1049477:	push   r12
 1049479:	push   r13
 104947b:	sub    rsp,0x50
 104947f:	mov    QWORD PTR [rsp+0x40],0xfffffffffffffffe
 1049488:	mov    QWORD PTR [r11+0x8],rbx
 104948c:	mov    QWORD PTR [r11+0x10],rsi
 1049490:	mov    QWORD PTR [r11+0x18],rdi
 1049494:	mov    rbx,rcx
 1049497:	xor    eax,eax
 1049499:	test   rcx,rcx
 104949c:	je     0x1049562
 10494a2:	or     rcx,0xffffffffffffffff
 10494a6:	mov    rdi,rbx
 10494a9:	repnz scas ax,WORD PTR es:[rdi]
 10494ac:	not    rcx
 10494af:	lea    r12,[rcx-0x1]
 10494b3:	xor    r13d,r13d
 10494b6:	mov    QWORD PTR [r11-0x30],r13
 10494ba:	mov    QWORD PTR [r11-0x38],r13
 10494be:	mov    DWORD PTR [r11-0x40],r13d
 10494c2:	mov    QWORD PTR [r11-0x48],r13
 10494c6:	mov    r9d,ecx
 10494c9:	mov    r8,rbx
 10494cc:	xor    edx,edx
 10494ce:	xor    ecx,ecx
 10494d0:	call   QWORD PTR [rip+0xfffffffffffb7d42]        # 0x1001218
 10494d6:	movsxd rsi,eax
 10494d9:	test   eax,eax
 10494db:	jne    0x10494f7
 10494dd:	call   QWORD PTR [rip+0xfffffffffffb806d]        # 0x1001550
 10494e3:	test   eax,eax
 10494e5:	jle    0x10494ef
 10494e7:	movzx  eax,ax
 10494ea:	or     eax,0x80070000
 10494ef:	mov    ecx,eax
 10494f1:	call   0x1049210
 10494f6:	nop
 10494f7:	mov    rcx,rsi
 10494fa:	call   0x103f9d2
 10494ff:	mov    rdi,rax
 1049502:	test   rax,rax
 1049505:	je     0x1049557
 1049507:	mov    QWORD PTR [rsp+0x38],r13
 104950c:	mov    QWORD PTR [rsp+0x30],r13
 1049511:	mov    DWORD PTR [rsp+0x28],esi
 1049515:	mov    QWORD PTR [rsp+0x20],rax
 104951a:	lea    r9d,[r12+0x1]
 104951f:	mov    r8,rbx
 1049522:	xor    edx,edx
 1049524:	xor    ecx,ecx
 1049526:	call   QWORD PTR [rip+0xfffffffffffb7cec]        # 0x1001218
 104952c:	test   eax,eax
 104952e:	jne    0x1049552
 1049530:	mov    rcx,rdi
 1049533:	call   0x103f95a
 1049538:	call   QWORD PTR [rip+0xfffffffffffb8012]        # 0x1001550
 104953e:	test   eax,eax
 1049540:	jle    0x104954a
 1049542:	movzx  eax,ax
 1049545:	or     eax,0x80070000
 104954a:	mov    ecx,eax
 104954c:	call   0x1049210
 1049551:	int3   
 1049552:	mov    rax,rdi
 1049555:	jmp    0x1049562
 1049557:	mov    ecx,0x8007000e
 104955c:	call   0x1049210
 1049561:	int3   
 1049562:	mov    rbx,QWORD PTR [rsp+0x70]
 1049567:	mov    rsi,QWORD PTR [rsp+0x78]
 104956c:	mov    rdi,QWORD PTR [rsp+0x80]
 1049574:	add    rsp,0x50
 1049578:	pop    r13
 104957a:	pop    r12
 104957c:	pop    rbp
 104957d:	ret    
 104957e:	int3   
 104957f:	int3   
 1049580:	int3   
 1049581:	int3   
 1049582:	int3   
 1049583:	int3   
 1049584:	int3   
 1049585:	int3   
 1049586:	int3   
 1049587:	int3   
 1049588:	int3   
 1049589:	int3   
 104958a:	int3   
 104958b:	int3   
 104958c:	int3   
 104958d:	int3   
 104958e:	int3   
 104958f:	int3   
 1049590:	mov    QWORD PTR [rsp+0x8],rbx
 1049595:	push   rbp
 1049596:	mov    rbp,rsp
 1049599:	sub    rsp,0x20
 104959d:	lea    rax,[rip+0xfffffffffffc0f64]        # 0x100a508
 10495a4:	mov    rbx,rcx
 10495a7:	mov    QWORD PTR [rcx],rax
 10495aa:	mov    rcx,QWORD PTR [rcx+0x10]
 10495ae:	test   rcx,rcx
 10495b1:	je     0x10495b9
 10495b3:	mov    rax,QWORD PTR [rcx]
 10495b6:	call   QWORD PTR [rax+0x10]
 10495b9:	mov    rcx,QWORD PTR [rbx+0x18]
 10495bd:	test   rcx,rcx
 10495c0:	je     0x10495c8
 10495c2:	call   QWORD PTR [rip+0xfffffffffffb7c68]        # 0x1001230
 10495c8:	mov    rbx,QWORD PTR [rsp+0x30]
 10495cd:	add    rsp,0x20
 10495d1:	pop    rbp
 10495d2:	ret    
 10495d3:	int3   
 10495d4:	int3   
 10495d5:	int3   
 10495d6:	int3   
 10495d7:	int3   
 10495d8:	int3   
 10495d9:	int3   
 10495da:	int3   
 10495db:	int3   
 10495dc:	int3   
 10495dd:	int3   
 10495de:	int3   
 10495df:	int3   
 10495e0:	rex push rbp
 10495e2:	mov    rbp,rsp
 10495e5:	sub    rsp,0x40
 10495e9:	lea    rax,[rip+0xfffffffffffc0f18]        # 0x100a508
 10495f0:	mov    DWORD PTR [rsp+0x28],ecx
 10495f4:	mov    QWORD PTR [rsp+0x30],rdx
 10495f9:	lea    rdx,[rip+0x17300]        # 0x1060900
 1049600:	lea    rcx,[rsp+0x20]
 1049605:	mov    QWORD PTR [rsp+0x38],0x0
 104960e:	mov    QWORD PTR [rsp+0x20],rax
 1049613:	call   0x10401ce
 1049618:	int3   
 1049619:	int3   
 104961a:	int3   
 104961b:	int3   
 104961c:	int3   
 104961d:	int3   
 104961e:	int3   
 104961f:	int3   
 1049620:	mov    QWORD PTR [rsp+0x8],rbx
 1049625:	push   rbp
 1049626:	mov    rbp,rsp
 1049629:	sub    rsp,0x20
 104962d:	lea    rax,[rip+0xfffffffffffc0ed4]        # 0x100a508
 1049634:	mov    rbx,rcx
 1049637:	mov    QWORD PTR [rcx],rax
 104963a:	mov    eax,DWORD PTR [rdx+0x8]
 104963d:	mov    DWORD PTR [rcx+0x8],eax
 1049640:	mov    rax,QWORD PTR [rdx+0x10]
 1049644:	mov    QWORD PTR [rcx+0x18],0x0
 104964c:	mov    QWORD PTR [rcx+0x10],rax
 1049650:	mov    rcx,rax
 1049653:	test   rax,rax
 1049656:	je     0x104965e
 1049658:	mov    rax,QWORD PTR [rax]
 104965b:	call   QWORD PTR [rax+0x8]
 104965e:	mov    rax,rbx
 1049661:	mov    rbx,QWORD PTR [rsp+0x30]
 1049666:	add    rsp,0x20
 104966a:	pop    rbp
 104966b:	ret    
 104966c:	int3   
 104966d:	int3   
 104966e:	int3   
 104966f:	int3   
 1049670:	int3   
 1049671:	int3   
 1049672:	int3   
 1049673:	int3   
 1049674:	int3   
 1049675:	int3   
 1049676:	int3   
 1049677:	int3   
 1049678:	int3   
 1049679:	int3   
 104967a:	int3   
 104967b:	int3   
 104967c:	int3   
 104967d:	int3   
 104967e:	int3   
 104967f:	int3   
 1049680:	mov    QWORD PTR [rsp+0x8],rbx
 1049685:	mov    QWORD PTR [rsp+0x10],rdi
 104968a:	push   rbp
 104968b:	mov    rbp,rsp
 104968e:	sub    rsp,0x20
 1049692:	lea    rax,[rip+0xfffffffffffc0e6f]        # 0x100a508
 1049699:	mov    rbx,rcx
 104969c:	mov    edi,edx
 104969e:	mov    QWORD PTR [rcx],rax
 10496a1:	mov    rcx,QWORD PTR [rcx+0x10]
 10496a5:	test   rcx,rcx
 10496a8:	je     0x10496b0
 10496aa:	mov    rax,QWORD PTR [rcx]
 10496ad:	call   QWORD PTR [rax+0x10]
 10496b0:	mov    rcx,QWORD PTR [rbx+0x18]
 10496b4:	test   rcx,rcx
 10496b7:	je     0x10496bf
 10496b9:	call   QWORD PTR [rip+0xfffffffffffb7b71]        # 0x1001230
 10496bf:	test   dil,0x1
 10496c3:	je     0x10496cd
 10496c5:	mov    rcx,rbx
 10496c8:	call   0x103f95a
 10496cd:	mov    rdi,QWORD PTR [rsp+0x38]
 10496d2:	mov    rax,rbx
 10496d5:	mov    rbx,QWORD PTR [rsp+0x30]
 10496da:	add    rsp,0x20
 10496de:	pop    rbp
 10496df:	ret    
 10496e0:	int3   
 10496e1:	int3   
 10496e2:	int3   
 10496e3:	int3   
 10496e4:	int3   
 10496e5:	int3   
 10496e6:	jmp    QWORD PTR [rip+0xfffffffffffb8104]        # 0x10017f0
 10496ec:	int3   
 10496ed:	int3   
 10496ee:	int3   
 10496ef:	int3   
 10496f0:	int3   
 10496f1:	int3   
 10496f2:	jmp    QWORD PTR [rip+0xfffffffffffb8130]        # 0x1001828
 10496f8:	int3   
 10496f9:	int3   
 10496fa:	int3   
 10496fb:	int3   
 10496fc:	int3   
 10496fd:	int3   
 10496fe:	jmp    QWORD PTR [rip+0xfffffffffffb811c]        # 0x1001820
 1049704:	int3   
 1049705:	int3   
 1049706:	int3   
 1049707:	int3   
 1049708:	int3   
 1049709:	int3   
 104970a:	jmp    QWORD PTR [rip+0xfffffffffffb8108]        # 0x1001818
 1049710:	int3   
 1049711:	int3   
 1049712:	int3   
 1049713:	int3   
 1049714:	int3   
 1049715:	int3   
 1049716:	jmp    QWORD PTR [rip+0xfffffffffffb80f4]        # 0x1001810
 104971c:	int3   
 104971d:	int3   
 104971e:	int3   
 104971f:	int3   
 1049720:	int3   
 1049721:	int3   
 1049722:	jmp    QWORD PTR [rip+0xfffffffffffb80e0]        # 0x1001808
 1049728:	int3   
 1049729:	int3   
 104972a:	int3   
 104972b:	int3   
 104972c:	int3   
 104972d:	int3   
 104972e:	jmp    QWORD PTR [rip+0xfffffffffffb80cc]        # 0x1001800
 1049734:	int3   
 1049735:	int3   
 1049736:	int3   
 1049737:	int3   
 1049738:	int3   
 1049739:	int3   
 104973a:	jmp    QWORD PTR [rip+0xfffffffffffb80b8]        # 0x10017f8
 1049740:	int3   
 1049741:	int3   
 1049742:	int3   
 1049743:	int3   
 1049744:	int3   
 1049745:	int3   
 1049746:	jmp    QWORD PTR [rip+0xfffffffffffb83dc]        # 0x1001b28
 104974c:	int3   
 104974d:	int3   
 104974e:	int3   
 104974f:	int3   
 1049750:	int3   
 1049751:	int3   
 1049752:	jmp    QWORD PTR [rip+0xfffffffffffb83c8]        # 0x1001b20
 1049758:	int3   
 1049759:	int3   
 104975a:	int3   
 104975b:	int3   
 104975c:	int3   
 104975d:	int3   
 104975e:	jmp    QWORD PTR [rip+0xfffffffffffb83b4]        # 0x1001b18
 1049764:	int3   
 1049765:	int3   
 1049766:	int3   
 1049767:	int3   
 1049768:	int3   
 1049769:	int3   
 104976a:	jmp    QWORD PTR [rip+0xfffffffffffb83a0]        # 0x1001b10
 1049770:	int3   
 1049771:	int3   
 1049772:	int3   
 1049773:	int3   
 1049774:	int3   
 1049775:	int3   
 1049776:	jmp    QWORD PTR [rip+0xfffffffffffb83b4]        # 0x1001b30
 104977c:	int3   
 104977d:	int3   
 104977e:	int3   
 104977f:	int3   
 1049780:	int3   
 1049781:	int3   
 1049782:	jmp    QWORD PTR [rip+0xfffffffffffb8378]        # 0x1001b00
 1049788:	int3   
 1049789:	int3   
 104978a:	int3   
 104978b:	int3   
 104978c:	int3   
 104978d:	int3   
 104978e:	jmp    QWORD PTR [rip+0xfffffffffffb8374]        # 0x1001b08
 1049794:	int3   
 1049795:	int3   
 1049796:	int3   
 1049797:	int3   
 1049798:	int3   
 1049799:	int3   
 104979a:	jmp    QWORD PTR [rip+0xfffffffffffb7d78]        # 0x1001518
 10497a0:	int3   
 10497a1:	int3   
 10497a2:	int3   
 10497a3:	int3   
 10497a4:	int3   
 10497a5:	int3   
 10497a6:	jmp    QWORD PTR [rip+0xfffffffffffb7d64]        # 0x1001510
 10497ac:	int3   
 10497ad:	int3   
 10497ae:	int3   
 10497af:	int3   
 10497b0:	int3   
 10497b1:	int3   
 10497b2:	jmp    QWORD PTR [rip+0xfffffffffffb7ea8]        # 0x1001660
 10497b8:	int3   
 10497b9:	int3   
 10497ba:	int3   
 10497bb:	int3   
 10497bc:	int3   
 10497bd:	int3   
 10497be:	int3   
 10497bf:	int3   
 10497c0:	int3   
 10497c1:	int3   
 10497c2:	int3   
 10497c3:	int3   
 10497c4:	int3   
 10497c5:	int3   
 10497c6:	int3   
 10497c7:	int3   
 10497c8:	int3   
 10497c9:	int3   
 10497ca:	int3   
 10497cb:	int3   
 10497cc:	int3   
 10497cd:	int3   
 10497ce:	int3   
 10497cf:	int3   
 10497d0:	mov    rcx,QWORD PTR [rdx+0x88]
 10497d7:	add    rcx,0x8
 10497db:	rex.W jmp QWORD PTR [rip+0xfffffffffffb82c6]        # 0x1001aa8
 10497e2:	int3   
 10497e3:	int3   
 10497e4:	int3   
 10497e5:	int3   
 10497e6:	int3   
 10497e7:	int3   
 10497e8:	int3   
 10497e9:	int3   
 10497ea:	int3   
 10497eb:	int3   
 10497ec:	int3   
 10497ed:	int3   
 10497ee:	int3   
 10497ef:	int3   
 10497f0:	mov    rcx,QWORD PTR [rdx+0x88]
 10497f7:	add    rcx,0x10
 10497fb:	jmp    0x100c4f0
 1049800:	lea    rcx,[rdx+0x78]
 1049807:	rex.W jmp QWORD PTR [rip+0xfffffffffffb829a]        # 0x1001aa8
 104980e:	int3   
 104980f:	int3   
 1049810:	lea    rcx,[rdx+0x70]
 1049817:	rex.W jmp QWORD PTR [rip+0xfffffffffffb828a]        # 0x1001aa8
 104981e:	int3   
 104981f:	int3   
 1049820:	lea    rcx,[rdx+0x70]
 1049827:	rex.W jmp QWORD PTR [rip+0xfffffffffffb827a]        # 0x1001aa8
 104982e:	int3   
 104982f:	int3   
 1049830:	lea    rcx,[rdx+0x70]
 1049837:	rex.W jmp QWORD PTR [rip+0xfffffffffffb826a]        # 0x1001aa8
 104983e:	int3   
 104983f:	int3   
 1049840:	int3   
 1049841:	int3   
 1049842:	int3   
 1049843:	int3   
 1049844:	int3   
 1049845:	int3   
 1049846:	int3   
 1049847:	int3   
 1049848:	int3   
 1049849:	int3   
 104984a:	int3   
 104984b:	int3   
 104984c:	int3   
 104984d:	int3   
 104984e:	int3   
 104984f:	int3   
 1049850:	rex push rbp
 1049852:	sub    rsp,0x20
 1049856:	mov    rbp,rdx
 1049859:	mov    eax,DWORD PTR [rbp+0x30]
 104985c:	and    eax,0x1
 104985f:	test   eax,eax
 1049861:	je     0x1049871
 1049863:	and    DWORD PTR [rbp+0x30],0xfffffffe
 1049867:	mov    rcx,QWORD PTR [rbp+0x60]
 104986b:	call   QWORD PTR [rip+0xfffffffffffb8237]        # 0x1001aa8
 1049871:	add    rsp,0x20
 1049875:	pop    rbp
 1049876:	ret    
 1049877:	int3   
 1049878:	int3   
 1049879:	int3   
 104987a:	int3   
 104987b:	int3   
 104987c:	int3   
 104987d:	int3   
 104987e:	int3   
 104987f:	int3   
 1049880:	lea    rcx,[rdx+0x40]
 1049887:	rex.W jmp QWORD PTR [rip+0xfffffffffffb821a]        # 0x1001aa8
 104988e:	int3   
 104988f:	int3   
 1049890:	lea    rcx,[rdx+0x48]
 1049897:	rex.W jmp QWORD PTR [rip+0xfffffffffffb820a]        # 0x1001aa8
 104989e:	int3   
 104989f:	int3   
 10498a0:	lea    rcx,[rdx+0x48]
 10498a7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb81fa]        # 0x1001aa8
 10498ae:	int3   
 10498af:	int3   
 10498b0:	lea    rcx,[rdx+0x48]
 10498b7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb81ea]        # 0x1001aa8
 10498be:	int3   
 10498bf:	int3   
 10498c0:	int3   
 10498c1:	int3   
 10498c2:	int3   
 10498c3:	int3   
 10498c4:	int3   
 10498c5:	int3   
 10498c6:	int3   
 10498c7:	int3   
 10498c8:	int3   
 10498c9:	int3   
 10498ca:	int3   
 10498cb:	int3   
 10498cc:	int3   
 10498cd:	int3   
 10498ce:	int3   
 10498cf:	int3   
 10498d0:	lea    rcx,[rdx+0x68]
 10498d7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb81ca]        # 0x1001aa8
 10498de:	int3   
 10498df:	int3   
 10498e0:	lea    rcx,[rdx+0x48]
 10498e7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb81ba]        # 0x1001aa8
 10498ee:	int3   
 10498ef:	int3   
 10498f0:	lea    rcx,[rdx+0xc8]
 10498f7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb81aa]        # 0x1001aa8
 10498fe:	int3   
 10498ff:	int3   
 1049900:	lea    rcx,[rdx+0xa0]
 1049907:	rex.W jmp QWORD PTR [rip+0xfffffffffffb819a]        # 0x1001aa8
 104990e:	int3   
 104990f:	int3   
 1049910:	lea    rcx,[rdx+0x50]
 1049917:	rex.W jmp QWORD PTR [rip+0xfffffffffffb818a]        # 0x1001aa8
 104991e:	int3   
 104991f:	int3   
 1049920:	lea    rcx,[rdx+0x60]
 1049927:	rex.W jmp QWORD PTR [rip+0xfffffffffffb817a]        # 0x1001aa8
 104992e:	int3   
 104992f:	int3   
 1049930:	lea    rcx,[rdx+0x78]
 1049937:	rex.W jmp QWORD PTR [rip+0xfffffffffffb816a]        # 0x1001aa8
 104993e:	int3   
 104993f:	int3   
 1049940:	lea    rcx,[rdx+0x70]
 1049947:	rex.W jmp QWORD PTR [rip+0xfffffffffffb815a]        # 0x1001aa8
 104994e:	int3   
 104994f:	int3   
 1049950:	lea    rcx,[rdx+0xc0]
 1049957:	rex.W jmp QWORD PTR [rip+0xfffffffffffb814a]        # 0x1001aa8
 104995e:	int3   
 104995f:	int3   
 1049960:	lea    rcx,[rdx+0x90]
 1049967:	rex.W jmp QWORD PTR [rip+0xfffffffffffb813a]        # 0x1001aa8
 104996e:	int3   
 104996f:	int3   
 1049970:	lea    rcx,[rdx+0xb0]
 1049977:	rex.W jmp QWORD PTR [rip+0xfffffffffffb812a]        # 0x1001aa8
 104997e:	int3   
 104997f:	int3   
 1049980:	lea    rcx,[rdx+0x98]
 1049987:	rex.W jmp QWORD PTR [rip+0xfffffffffffb811a]        # 0x1001aa8
 104998e:	int3   
 104998f:	int3   
 1049990:	lea    rcx,[rdx+0xa8]
 1049997:	rex.W jmp QWORD PTR [rip+0xfffffffffffb810a]        # 0x1001aa8
 104999e:	int3   
 104999f:	int3   
 10499a0:	lea    rcx,[rdx+0x80]
 10499a7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb80fa]        # 0x1001aa8
 10499ae:	int3   
 10499af:	int3   
 10499b0:	lea    rcx,[rdx+0xb8]
 10499b7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb80ea]        # 0x1001aa8
 10499be:	int3   
 10499bf:	int3   
 10499c0:	int3   
 10499c1:	int3   
 10499c2:	int3   
 10499c3:	int3   
 10499c4:	int3   
 10499c5:	int3   
 10499c6:	int3   
 10499c7:	int3   
 10499c8:	int3   
 10499c9:	int3   
 10499ca:	int3   
 10499cb:	int3   
 10499cc:	int3   
 10499cd:	int3   
 10499ce:	int3   
 10499cf:	int3   
 10499d0:	lea    rcx,[rdx+0x78]
 10499d7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb80ca]        # 0x1001aa8
 10499de:	int3   
 10499df:	int3   
 10499e0:	lea    rcx,[rdx+0x40]
 10499e7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb80ba]        # 0x1001aa8
 10499ee:	int3   
 10499ef:	int3   
 10499f0:	lea    rcx,[rdx+0x40]
 10499f7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb80aa]        # 0x1001aa8
 10499fe:	int3   
 10499ff:	int3   
 1049a00:	int3   
 1049a01:	int3   
 1049a02:	int3   
 1049a03:	int3   
 1049a04:	int3   
 1049a05:	int3   
 1049a06:	int3   
 1049a07:	int3   
 1049a08:	int3   
 1049a09:	int3   
 1049a0a:	int3   
 1049a0b:	int3   
 1049a0c:	int3   
 1049a0d:	int3   
 1049a0e:	int3   
 1049a0f:	int3   
 1049a10:	lea    rcx,[rdx+0x40]
 1049a17:	rex.W jmp QWORD PTR [rip+0xfffffffffffb808a]        # 0x1001aa8
 1049a1e:	int3   
 1049a1f:	int3   
 1049a20:	lea    rcx,[rdx+0x48]
 1049a27:	rex.W jmp QWORD PTR [rip+0xfffffffffffb807a]        # 0x1001aa8
 1049a2e:	int3   
 1049a2f:	int3   
 1049a30:	lea    rcx,[rdx+0x48]
 1049a37:	rex.W jmp QWORD PTR [rip+0xfffffffffffb806a]        # 0x1001aa8
 1049a3e:	int3   
 1049a3f:	int3   
 1049a40:	int3   
 1049a41:	int3   
 1049a42:	int3   
 1049a43:	int3   
 1049a44:	int3   
 1049a45:	int3   
 1049a46:	int3   
 1049a47:	int3   
 1049a48:	int3   
 1049a49:	int3   
 1049a4a:	int3   
 1049a4b:	int3   
 1049a4c:	int3   
 1049a4d:	int3   
 1049a4e:	int3   
 1049a4f:	int3   
 1049a50:	lea    rcx,[rdx+0x40]
 1049a57:	rex.W jmp QWORD PTR [rip+0xfffffffffffb804a]        # 0x1001aa8
 1049a5e:	int3   
 1049a5f:	int3   
 1049a60:	lea    rcx,[rdx+0x48]
 1049a67:	rex.W jmp QWORD PTR [rip+0xfffffffffffb803a]        # 0x1001aa8
 1049a6e:	int3   
 1049a6f:	int3   
 1049a70:	int3   
 1049a71:	int3   
 1049a72:	int3   
 1049a73:	int3   
 1049a74:	int3   
 1049a75:	int3   
 1049a76:	int3   
 1049a77:	int3   
 1049a78:	int3   
 1049a79:	int3   
 1049a7a:	int3   
 1049a7b:	int3   
 1049a7c:	int3   
 1049a7d:	int3   
 1049a7e:	int3   
 1049a7f:	int3   
 1049a80:	lea    rcx,[rdx+0x40]
 1049a87:	rex.W jmp QWORD PTR [rip+0xfffffffffffb801a]        # 0x1001aa8
 1049a8e:	int3   
 1049a8f:	int3   
 1049a90:	lea    rcx,[rdx+0x48]
 1049a97:	rex.W jmp QWORD PTR [rip+0xfffffffffffb800a]        # 0x1001aa8
 1049a9e:	int3   
 1049a9f:	int3   
 1049aa0:	int3   
 1049aa1:	int3   
 1049aa2:	int3   
 1049aa3:	int3   
 1049aa4:	int3   
 1049aa5:	int3   
 1049aa6:	int3   
 1049aa7:	int3   
 1049aa8:	int3   
 1049aa9:	int3   
 1049aaa:	int3   
 1049aab:	int3   
 1049aac:	int3   
 1049aad:	int3   
 1049aae:	int3   
 1049aaf:	int3   
 1049ab0:	lea    rcx,[rdx+0x60]
 1049ab7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7fea]        # 0x1001aa8
 1049abe:	int3   
 1049abf:	int3   
 1049ac0:	lea    rcx,[rdx+0x78]
 1049ac7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7fda]        # 0x1001aa8
 1049ace:	int3   
 1049acf:	int3   
 1049ad0:	int3   
 1049ad1:	int3   
 1049ad2:	int3   
 1049ad3:	int3   
 1049ad4:	int3   
 1049ad5:	int3   
 1049ad6:	int3   
 1049ad7:	int3   
 1049ad8:	int3   
 1049ad9:	int3   
 1049ada:	int3   
 1049adb:	int3   
 1049adc:	int3   
 1049add:	int3   
 1049ade:	int3   
 1049adf:	int3   
 1049ae0:	lea    rcx,[rdx+0x40]
 1049ae7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7fba]        # 0x1001aa8
 1049aee:	int3   
 1049aef:	int3   
 1049af0:	int3   
 1049af1:	int3   
 1049af2:	int3   
 1049af3:	int3   
 1049af4:	int3   
 1049af5:	int3   
 1049af6:	int3   
 1049af7:	int3   
 1049af8:	int3   
 1049af9:	int3   
 1049afa:	int3   
 1049afb:	int3   
 1049afc:	int3   
 1049afd:	int3   
 1049afe:	int3   
 1049aff:	int3   
 1049b00:	lea    rcx,[rdx+0x50]
 1049b07:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7f9a]        # 0x1001aa8
 1049b0e:	int3   
 1049b0f:	int3   
 1049b10:	lea    rcx,[rdx+0x88]
 1049b17:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7f8a]        # 0x1001aa8
 1049b1e:	int3   
 1049b1f:	int3   
 1049b20:	lea    rcx,[rdx+0x90]
 1049b27:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7f7a]        # 0x1001aa8
 1049b2e:	int3   
 1049b2f:	int3   
 1049b30:	lea    rcx,[rdx+0x98]
 1049b37:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7f6a]        # 0x1001aa8
 1049b3e:	int3   
 1049b3f:	int3   
 1049b40:	lea    rcx,[rdx+0x28]
 1049b47:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7f5a]        # 0x1001aa8
 1049b4e:	int3   
 1049b4f:	int3   
 1049b50:	lea    rcx,[rdx+0x48]
 1049b57:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7f4a]        # 0x1001aa8
 1049b5e:	int3   
 1049b5f:	int3   
 1049b60:	lea    rcx,[rdx+0x38]
 1049b67:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7f3a]        # 0x1001aa8
 1049b6e:	int3   
 1049b6f:	int3   
 1049b70:	lea    rcx,[rdx+0x58]
 1049b77:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7f2a]        # 0x1001aa8
 1049b7e:	int3   
 1049b7f:	int3   
 1049b80:	lea    rcx,[rdx+0x20]
 1049b87:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7f1a]        # 0x1001aa8
 1049b8e:	int3   
 1049b8f:	int3   
 1049b90:	lea    rcx,[rdx+0x30]
 1049b97:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7f0a]        # 0x1001aa8
 1049b9e:	int3   
 1049b9f:	int3   
 1049ba0:	lea    rcx,[rdx+0x40]
 1049ba7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7efa]        # 0x1001aa8
 1049bae:	int3   
 1049baf:	int3   
 1049bb0:	int3   
 1049bb1:	int3   
 1049bb2:	int3   
 1049bb3:	int3   
 1049bb4:	int3   
 1049bb5:	int3   
 1049bb6:	int3   
 1049bb7:	int3   
 1049bb8:	int3   
 1049bb9:	int3   
 1049bba:	int3   
 1049bbb:	int3   
 1049bbc:	int3   
 1049bbd:	int3   
 1049bbe:	int3   
 1049bbf:	int3   
 1049bc0:	rex push rbp
 1049bc2:	sub    rsp,0x20
 1049bc6:	mov    rbp,rdx
 1049bc9:	mov    r9,QWORD PTR [rip+0xfffffffffffb7ed8]        # 0x1001aa8
 1049bd0:	mov    r8d,0x1
 1049bd6:	mov    edx,0x8
 1049bdb:	lea    rcx,[rbp+0x58]
 1049bdf:	call   0x1040094
 1049be4:	add    rsp,0x20
 1049be8:	pop    rbp
 1049be9:	ret    
 1049bea:	int3   
 1049beb:	int3   
 1049bec:	int3   
 1049bed:	int3   
 1049bee:	int3   
 1049bef:	int3   
 1049bf0:	lea    rcx,[rdx+0x68]
 1049bf7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7eaa]        # 0x1001aa8
 1049bfe:	int3   
 1049bff:	int3   
 1049c00:	lea    rcx,[rdx+0x60]
 1049c07:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7e9a]        # 0x1001aa8
 1049c0e:	int3   
 1049c0f:	int3   
 1049c10:	int3   
 1049c11:	int3   
 1049c12:	int3   
 1049c13:	int3   
 1049c14:	int3   
 1049c15:	int3   
 1049c16:	int3   
 1049c17:	int3   
 1049c18:	int3   
 1049c19:	int3   
 1049c1a:	int3   
 1049c1b:	int3   
 1049c1c:	int3   
 1049c1d:	int3   
 1049c1e:	int3   
 1049c1f:	int3   
 1049c20:	lea    rcx,[rdx+0x48]
 1049c27:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7e7a]        # 0x1001aa8
 1049c2e:	int3   
 1049c2f:	int3   
 1049c30:	lea    rcx,[rdx+0x60]
 1049c37:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7e6a]        # 0x1001aa8
 1049c3e:	int3   
 1049c3f:	int3   
 1049c40:	lea    rcx,[rdx+0x50]
 1049c47:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7e5a]        # 0x1001aa8
 1049c4e:	int3   
 1049c4f:	int3   
 1049c50:	lea    rcx,[rdx+0x50]
 1049c57:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7e4a]        # 0x1001aa8
 1049c5e:	int3   
 1049c5f:	int3   
 1049c60:	lea    rcx,[rdx+0x60]
 1049c67:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7e3a]        # 0x1001aa8
 1049c6e:	int3   
 1049c6f:	int3   
 1049c70:	lea    rcx,[rdx+0x50]
 1049c77:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7e2a]        # 0x1001aa8
 1049c7e:	int3   
 1049c7f:	int3   
 1049c80:	lea    rcx,[rdx+0x60]
 1049c87:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7e1a]        # 0x1001aa8
 1049c8e:	int3   
 1049c8f:	int3   
 1049c90:	lea    rcx,[rdx+0x50]
 1049c97:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7e0a]        # 0x1001aa8
 1049c9e:	int3   
 1049c9f:	int3   
 1049ca0:	lea    rcx,[rdx+0x68]
 1049ca7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7dfa]        # 0x1001aa8
 1049cae:	int3   
 1049caf:	int3   
 1049cb0:	lea    rcx,[rdx+0x68]
 1049cb7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7dea]        # 0x1001aa8
 1049cbe:	int3   
 1049cbf:	int3   
 1049cc0:	int3   
 1049cc1:	int3   
 1049cc2:	int3   
 1049cc3:	int3   
 1049cc4:	int3   
 1049cc5:	int3   
 1049cc6:	int3   
 1049cc7:	int3   
 1049cc8:	int3   
 1049cc9:	int3   
 1049cca:	int3   
 1049ccb:	int3   
 1049ccc:	int3   
 1049ccd:	int3   
 1049cce:	int3   
 1049ccf:	int3   
 1049cd0:	lea    rcx,[rdx+0x80]
 1049cd7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7dca]        # 0x1001aa8
 1049cde:	int3   
 1049cdf:	int3   
 1049ce0:	lea    rcx,[rdx+0x98]
 1049ce7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7dba]        # 0x1001aa8
 1049cee:	int3   
 1049cef:	int3   
 1049cf0:	lea    rcx,[rdx+0x98]
 1049cf7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7daa]        # 0x1001aa8
 1049cfe:	int3   
 1049cff:	int3   
 1049d00:	int3   
 1049d01:	int3   
 1049d02:	int3   
 1049d03:	int3   
 1049d04:	int3   
 1049d05:	int3   
 1049d06:	int3   
 1049d07:	int3   
 1049d08:	int3   
 1049d09:	int3   
 1049d0a:	int3   
 1049d0b:	int3   
 1049d0c:	int3   
 1049d0d:	int3   
 1049d0e:	int3   
 1049d0f:	int3   
 1049d10:	lea    rcx,[rdx+0x78]
 1049d17:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7d8a]        # 0x1001aa8
 1049d1e:	int3   
 1049d1f:	int3   
 1049d20:	lea    rcx,[rdx+0x70]
 1049d27:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7d7a]        # 0x1001aa8
 1049d2e:	int3   
 1049d2f:	int3   
 1049d30:	int3   
 1049d31:	int3   
 1049d32:	int3   
 1049d33:	int3   
 1049d34:	int3   
 1049d35:	int3   
 1049d36:	int3   
 1049d37:	int3   
 1049d38:	int3   
 1049d39:	int3   
 1049d3a:	int3   
 1049d3b:	int3   
 1049d3c:	int3   
 1049d3d:	int3   
 1049d3e:	int3   
 1049d3f:	int3   
 1049d40:	lea    rcx,[rdx+0x40]
 1049d47:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7d5a]        # 0x1001aa8
 1049d4e:	int3   
 1049d4f:	int3   
 1049d50:	rex push rbp
 1049d52:	sub    rsp,0x20
 1049d56:	mov    rbp,rdx
 1049d59:	mov    eax,DWORD PTR [rbp+0x64]
 1049d5c:	and    eax,0x1
 1049d5f:	test   eax,eax
 1049d61:	je     0x1049d71
 1049d63:	and    DWORD PTR [rbp+0x64],0xfffffffe
 1049d67:	mov    rcx,QWORD PTR [rbp+0x70]
 1049d6b:	call   QWORD PTR [rip+0xfffffffffffb7d37]        # 0x1001aa8
 1049d71:	add    rsp,0x20
 1049d75:	pop    rbp
 1049d76:	ret    
 1049d77:	int3   
 1049d78:	int3   
 1049d79:	int3   
 1049d7a:	int3   
 1049d7b:	int3   
 1049d7c:	int3   
 1049d7d:	int3   
 1049d7e:	int3   
 1049d7f:	int3   
 1049d80:	lea    rcx,[rdx+0x68]
 1049d87:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7d1a]        # 0x1001aa8
 1049d8e:	int3   
 1049d8f:	int3   
 1049d90:	lea    rcx,[rdx+0x60]
 1049d97:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7d0a]        # 0x1001aa8
 1049d9e:	int3   
 1049d9f:	int3   
 1049da0:	int3   
 1049da1:	int3   
 1049da2:	int3   
 1049da3:	int3   
 1049da4:	int3   
 1049da5:	int3   
 1049da6:	int3   
 1049da7:	int3   
 1049da8:	int3   
 1049da9:	int3   
 1049daa:	int3   
 1049dab:	int3   
 1049dac:	int3   
 1049dad:	int3   
 1049dae:	int3   
 1049daf:	int3   
 1049db0:	lea    rcx,[rdx+0x70]
 1049db7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7cea]        # 0x1001aa8
 1049dbe:	int3   
 1049dbf:	int3   
 1049dc0:	lea    rcx,[rdx+0x40]
 1049dc7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7cda]        # 0x1001aa8
 1049dce:	int3   
 1049dcf:	int3   
 1049dd0:	lea    rcx,[rdx+0x70]
 1049dd7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7cca]        # 0x1001aa8
 1049dde:	int3   
 1049ddf:	int3   
 1049de0:	lea    rcx,[rdx+0x40]
 1049de7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7cba]        # 0x1001aa8
 1049dee:	int3   
 1049def:	int3   
 1049df0:	lea    rcx,[rdx+0x40]
 1049df7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7caa]        # 0x1001aa8
 1049dfe:	int3   
 1049dff:	int3   
 1049e00:	int3   
 1049e01:	int3   
 1049e02:	int3   
 1049e03:	int3   
 1049e04:	int3   
 1049e05:	int3   
 1049e06:	int3   
 1049e07:	int3   
 1049e08:	int3   
 1049e09:	int3   
 1049e0a:	int3   
 1049e0b:	int3   
 1049e0c:	int3   
 1049e0d:	int3   
 1049e0e:	int3   
 1049e0f:	int3   
 1049e10:	lea    rcx,[rdx+0x70]
 1049e17:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7c8a]        # 0x1001aa8
 1049e1e:	int3   
 1049e1f:	int3   
 1049e20:	lea    rcx,[rdx+0x80]
 1049e27:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7c7a]        # 0x1001aa8
 1049e2e:	int3   
 1049e2f:	int3   
 1049e30:	lea    rcx,[rdx+0x88]
 1049e37:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7c6a]        # 0x1001aa8
 1049e3e:	int3   
 1049e3f:	int3   
 1049e40:	lea    rcx,[rdx+0x88]
 1049e47:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7c5a]        # 0x1001aa8
 1049e4e:	int3   
 1049e4f:	int3   
 1049e50:	lea    rcx,[rdx+0x88]
 1049e57:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7c4a]        # 0x1001aa8
 1049e5e:	int3   
 1049e5f:	int3   
 1049e60:	lea    rcx,[rdx+0x80]
 1049e67:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7c3a]        # 0x1001aa8
 1049e6e:	int3   
 1049e6f:	int3   
 1049e70:	int3   
 1049e71:	int3   
 1049e72:	int3   
 1049e73:	int3   
 1049e74:	int3   
 1049e75:	int3   
 1049e76:	int3   
 1049e77:	int3   
 1049e78:	int3   
 1049e79:	int3   
 1049e7a:	int3   
 1049e7b:	int3   
 1049e7c:	int3   
 1049e7d:	int3   
 1049e7e:	int3   
 1049e7f:	int3   
 1049e80:	mov    rcx,QWORD PTR [rdx+0x40]
 1049e87:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7c1a]        # 0x1001aa8
 1049e8e:	int3   
 1049e8f:	int3   
 1049e90:	mov    rcx,QWORD PTR [rdx+0x40]
 1049e97:	add    rcx,0x8
 1049e9b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7c06]        # 0x1001aa8
 1049ea2:	int3   
 1049ea3:	int3   
 1049ea4:	int3   
 1049ea5:	int3   
 1049ea6:	int3   
 1049ea7:	int3   
 1049ea8:	int3   
 1049ea9:	int3   
 1049eaa:	int3   
 1049eab:	int3   
 1049eac:	int3   
 1049ead:	int3   
 1049eae:	int3   
 1049eaf:	int3   
 1049eb0:	lea    rcx,[rdx+0x50]
 1049eb7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7bea]        # 0x1001aa8
 1049ebe:	int3   
 1049ebf:	int3   
 1049ec0:	int3   
 1049ec1:	int3   
 1049ec2:	int3   
 1049ec3:	int3   
 1049ec4:	int3   
 1049ec5:	int3   
 1049ec6:	int3   
 1049ec7:	int3   
 1049ec8:	int3   
 1049ec9:	int3   
 1049eca:	int3   
 1049ecb:	int3   
 1049ecc:	int3   
 1049ecd:	int3   
 1049ece:	int3   
 1049ecf:	int3   
 1049ed0:	lea    rcx,[rdx+0x50]
 1049ed7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7bca]        # 0x1001aa8
 1049ede:	int3   
 1049edf:	int3   
 1049ee0:	int3   
 1049ee1:	int3   
 1049ee2:	int3   
 1049ee3:	int3   
 1049ee4:	int3   
 1049ee5:	int3   
 1049ee6:	int3   
 1049ee7:	int3   
 1049ee8:	int3   
 1049ee9:	int3   
 1049eea:	int3   
 1049eeb:	int3   
 1049eec:	int3   
 1049eed:	int3   
 1049eee:	int3   
 1049eef:	int3   
 1049ef0:	rex push rbp
 1049ef2:	sub    rsp,0x20
 1049ef6:	mov    rbp,rdx
 1049ef9:	mov    eax,DWORD PTR [rbp+0x20]
 1049efc:	and    eax,0x1
 1049eff:	test   eax,eax
 1049f01:	je     0x1049f11
 1049f03:	and    DWORD PTR [rbp+0x20],0xfffffffe
 1049f07:	mov    rcx,QWORD PTR [rbp+0x30]
 1049f0b:	call   QWORD PTR [rip+0xfffffffffffb7b97]        # 0x1001aa8
 1049f11:	add    rsp,0x20
 1049f15:	pop    rbp
 1049f16:	ret    
 1049f17:	int3   
 1049f18:	int3   
 1049f19:	int3   
 1049f1a:	int3   
 1049f1b:	int3   
 1049f1c:	int3   
 1049f1d:	int3   
 1049f1e:	int3   
 1049f1f:	int3   
 1049f20:	rex push rbp
 1049f22:	sub    rsp,0x20
 1049f26:	mov    rbp,rdx
 1049f29:	mov    rdx,QWORD PTR [rbp+0x40]
 1049f2d:	mov    rcx,QWORD PTR [rbp+0x50]
 1049f31:	call   0x100e5c0
 1049f36:	add    rsp,0x20
 1049f3a:	pop    rbp
 1049f3b:	ret    
 1049f3c:	int3   
 1049f3d:	int3   
 1049f3e:	int3   
 1049f3f:	int3   
 1049f40:	mov    rcx,QWORD PTR [rdx+0x50]
 1049f47:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7b5a]        # 0x1001aa8
 1049f4e:	int3   
 1049f4f:	int3   
 1049f50:	mov    rcx,QWORD PTR [rdx+0x50]
 1049f57:	add    rcx,0x8
 1049f5b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7b46]        # 0x1001aa8
 1049f62:	int3   
 1049f63:	int3   
 1049f64:	int3   
 1049f65:	int3   
 1049f66:	int3   
 1049f67:	int3   
 1049f68:	int3   
 1049f69:	int3   
 1049f6a:	int3   
 1049f6b:	int3   
 1049f6c:	int3   
 1049f6d:	int3   
 1049f6e:	int3   
 1049f6f:	int3   
 1049f70:	mov    rcx,QWORD PTR [rdx+0x50]
 1049f77:	jmp    0x100ebf0
 1049f7c:	int3   
 1049f7d:	int3   
 1049f7e:	int3   
 1049f7f:	int3   
 1049f80:	int3   
 1049f81:	int3   
 1049f82:	int3   
 1049f83:	int3   
 1049f84:	int3   
 1049f85:	int3   
 1049f86:	int3   
 1049f87:	int3   
 1049f88:	int3   
 1049f89:	int3   
 1049f8a:	int3   
 1049f8b:	int3   
 1049f8c:	int3   
 1049f8d:	int3   
 1049f8e:	int3   
 1049f8f:	int3   
 1049f90:	mov    rcx,QWORD PTR [rdx+0x60]
 1049f97:	add    rcx,0x18
 1049f9b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7b06]        # 0x1001aa8
 1049fa2:	int3   
 1049fa3:	int3   
 1049fa4:	int3   
 1049fa5:	int3   
 1049fa6:	int3   
 1049fa7:	int3   
 1049fa8:	int3   
 1049fa9:	int3   
 1049faa:	int3   
 1049fab:	int3   
 1049fac:	int3   
 1049fad:	int3   
 1049fae:	int3   
 1049faf:	int3   
 1049fb0:	mov    rcx,QWORD PTR [rdx+0x60]
 1049fb7:	add    rcx,0x20
 1049fbb:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7ae6]        # 0x1001aa8
 1049fc2:	int3   
 1049fc3:	int3   
 1049fc4:	int3   
 1049fc5:	int3   
 1049fc6:	int3   
 1049fc7:	int3   
 1049fc8:	int3   
 1049fc9:	int3   
 1049fca:	int3   
 1049fcb:	int3   
 1049fcc:	int3   
 1049fcd:	int3   
 1049fce:	int3   
 1049fcf:	int3   
 1049fd0:	mov    rcx,QWORD PTR [rdx+0x60]
 1049fd7:	add    rcx,0x28
 1049fdb:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7ac6]        # 0x1001aa8
 1049fe2:	int3   
 1049fe3:	int3   
 1049fe4:	int3   
 1049fe5:	int3   
 1049fe6:	int3   
 1049fe7:	int3   
 1049fe8:	int3   
 1049fe9:	int3   
 1049fea:	int3   
 1049feb:	int3   
 1049fec:	int3   
 1049fed:	int3   
 1049fee:	int3   
 1049fef:	int3   
 1049ff0:	mov    rcx,QWORD PTR [rdx+0x60]
 1049ff7:	add    rcx,0x30
 1049ffb:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7aa6]        # 0x1001aa8
 104a002:	int3   
 104a003:	int3   
 104a004:	int3   
 104a005:	int3   
 104a006:	int3   
 104a007:	int3   
 104a008:	int3   
 104a009:	int3   
 104a00a:	int3   
 104a00b:	int3   
 104a00c:	int3   
 104a00d:	int3   
 104a00e:	int3   
 104a00f:	int3   
 104a010:	mov    rcx,QWORD PTR [rdx+0x60]
 104a017:	add    rcx,0x38
 104a01b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7a86]        # 0x1001aa8
 104a022:	int3   
 104a023:	int3   
 104a024:	int3   
 104a025:	int3   
 104a026:	int3   
 104a027:	int3   
 104a028:	int3   
 104a029:	int3   
 104a02a:	int3   
 104a02b:	int3   
 104a02c:	int3   
 104a02d:	int3   
 104a02e:	int3   
 104a02f:	int3   
 104a030:	mov    rcx,QWORD PTR [rdx+0x60]
 104a037:	add    rcx,0x18
 104a03b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7a66]        # 0x1001aa8
 104a042:	int3   
 104a043:	int3   
 104a044:	int3   
 104a045:	int3   
 104a046:	int3   
 104a047:	int3   
 104a048:	int3   
 104a049:	int3   
 104a04a:	int3   
 104a04b:	int3   
 104a04c:	int3   
 104a04d:	int3   
 104a04e:	int3   
 104a04f:	int3   
 104a050:	mov    rcx,QWORD PTR [rdx+0x60]
 104a057:	add    rcx,0x20
 104a05b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7a46]        # 0x1001aa8
 104a062:	int3   
 104a063:	int3   
 104a064:	int3   
 104a065:	int3   
 104a066:	int3   
 104a067:	int3   
 104a068:	int3   
 104a069:	int3   
 104a06a:	int3   
 104a06b:	int3   
 104a06c:	int3   
 104a06d:	int3   
 104a06e:	int3   
 104a06f:	int3   
 104a070:	mov    rcx,QWORD PTR [rdx+0x60]
 104a077:	add    rcx,0x28
 104a07b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7a26]        # 0x1001aa8
 104a082:	int3   
 104a083:	int3   
 104a084:	int3   
 104a085:	int3   
 104a086:	int3   
 104a087:	int3   
 104a088:	int3   
 104a089:	int3   
 104a08a:	int3   
 104a08b:	int3   
 104a08c:	int3   
 104a08d:	int3   
 104a08e:	int3   
 104a08f:	int3   
 104a090:	mov    rcx,QWORD PTR [rdx+0x60]
 104a097:	add    rcx,0x30
 104a09b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7a06]        # 0x1001aa8
 104a0a2:	int3   
 104a0a3:	int3   
 104a0a4:	int3   
 104a0a5:	int3   
 104a0a6:	int3   
 104a0a7:	int3   
 104a0a8:	int3   
 104a0a9:	int3   
 104a0aa:	int3   
 104a0ab:	int3   
 104a0ac:	int3   
 104a0ad:	int3   
 104a0ae:	int3   
 104a0af:	int3   
 104a0b0:	mov    rcx,QWORD PTR [rdx+0x60]
 104a0b7:	add    rcx,0x38
 104a0bb:	rex.W jmp QWORD PTR [rip+0xfffffffffffb79e6]        # 0x1001aa8
 104a0c2:	int3   
 104a0c3:	int3   
 104a0c4:	int3   
 104a0c5:	int3   
 104a0c6:	int3   
 104a0c7:	int3   
 104a0c8:	int3   
 104a0c9:	int3   
 104a0ca:	int3   
 104a0cb:	int3   
 104a0cc:	int3   
 104a0cd:	int3   
 104a0ce:	int3   
 104a0cf:	int3   
 104a0d0:	mov    rcx,QWORD PTR [rdx+0x60]
 104a0d7:	add    rcx,0x18
 104a0db:	rex.W jmp QWORD PTR [rip+0xfffffffffffb79c6]        # 0x1001aa8
 104a0e2:	int3   
 104a0e3:	int3   
 104a0e4:	int3   
 104a0e5:	int3   
 104a0e6:	int3   
 104a0e7:	int3   
 104a0e8:	int3   
 104a0e9:	int3   
 104a0ea:	int3   
 104a0eb:	int3   
 104a0ec:	int3   
 104a0ed:	int3   
 104a0ee:	int3   
 104a0ef:	int3   
 104a0f0:	mov    rcx,QWORD PTR [rdx+0x60]
 104a0f7:	add    rcx,0x20
 104a0fb:	rex.W jmp QWORD PTR [rip+0xfffffffffffb79a6]        # 0x1001aa8
 104a102:	int3   
 104a103:	int3   
 104a104:	int3   
 104a105:	int3   
 104a106:	int3   
 104a107:	int3   
 104a108:	int3   
 104a109:	int3   
 104a10a:	int3   
 104a10b:	int3   
 104a10c:	int3   
 104a10d:	int3   
 104a10e:	int3   
 104a10f:	int3   
 104a110:	mov    rcx,QWORD PTR [rdx+0x60]
 104a117:	add    rcx,0x28
 104a11b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7986]        # 0x1001aa8
 104a122:	int3   
 104a123:	int3   
 104a124:	int3   
 104a125:	int3   
 104a126:	int3   
 104a127:	int3   
 104a128:	int3   
 104a129:	int3   
 104a12a:	int3   
 104a12b:	int3   
 104a12c:	int3   
 104a12d:	int3   
 104a12e:	int3   
 104a12f:	int3   
 104a130:	mov    rcx,QWORD PTR [rdx+0x60]
 104a137:	add    rcx,0x30
 104a13b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7966]        # 0x1001aa8
 104a142:	int3   
 104a143:	int3   
 104a144:	int3   
 104a145:	int3   
 104a146:	int3   
 104a147:	int3   
 104a148:	int3   
 104a149:	int3   
 104a14a:	int3   
 104a14b:	int3   
 104a14c:	int3   
 104a14d:	int3   
 104a14e:	int3   
 104a14f:	int3   
 104a150:	mov    rcx,QWORD PTR [rdx+0x60]
 104a157:	add    rcx,0x38
 104a15b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7946]        # 0x1001aa8
 104a162:	int3   
 104a163:	int3   
 104a164:	int3   
 104a165:	int3   
 104a166:	int3   
 104a167:	int3   
 104a168:	int3   
 104a169:	int3   
 104a16a:	int3   
 104a16b:	int3   
 104a16c:	int3   
 104a16d:	int3   
 104a16e:	int3   
 104a16f:	int3   
 104a170:	mov    rcx,QWORD PTR [rdx+0x60]
 104a177:	add    rcx,0x18
 104a17b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7926]        # 0x1001aa8
 104a182:	int3   
 104a183:	int3   
 104a184:	int3   
 104a185:	int3   
 104a186:	int3   
 104a187:	int3   
 104a188:	int3   
 104a189:	int3   
 104a18a:	int3   
 104a18b:	int3   
 104a18c:	int3   
 104a18d:	int3   
 104a18e:	int3   
 104a18f:	int3   
 104a190:	mov    rcx,QWORD PTR [rdx+0x60]
 104a197:	add    rcx,0x20
 104a19b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7906]        # 0x1001aa8
 104a1a2:	int3   
 104a1a3:	int3   
 104a1a4:	int3   
 104a1a5:	int3   
 104a1a6:	int3   
 104a1a7:	int3   
 104a1a8:	int3   
 104a1a9:	int3   
 104a1aa:	int3   
 104a1ab:	int3   
 104a1ac:	int3   
 104a1ad:	int3   
 104a1ae:	int3   
 104a1af:	int3   
 104a1b0:	mov    rcx,QWORD PTR [rdx+0x60]
 104a1b7:	add    rcx,0x28
 104a1bb:	rex.W jmp QWORD PTR [rip+0xfffffffffffb78e6]        # 0x1001aa8
 104a1c2:	int3   
 104a1c3:	int3   
 104a1c4:	int3   
 104a1c5:	int3   
 104a1c6:	int3   
 104a1c7:	int3   
 104a1c8:	int3   
 104a1c9:	int3   
 104a1ca:	int3   
 104a1cb:	int3   
 104a1cc:	int3   
 104a1cd:	int3   
 104a1ce:	int3   
 104a1cf:	int3   
 104a1d0:	mov    rcx,QWORD PTR [rdx+0x60]
 104a1d7:	add    rcx,0x30
 104a1db:	rex.W jmp QWORD PTR [rip+0xfffffffffffb78c6]        # 0x1001aa8
 104a1e2:	int3   
 104a1e3:	int3   
 104a1e4:	int3   
 104a1e5:	int3   
 104a1e6:	int3   
 104a1e7:	int3   
 104a1e8:	int3   
 104a1e9:	int3   
 104a1ea:	int3   
 104a1eb:	int3   
 104a1ec:	int3   
 104a1ed:	int3   
 104a1ee:	int3   
 104a1ef:	int3   
 104a1f0:	mov    rcx,QWORD PTR [rdx+0x60]
 104a1f7:	add    rcx,0x38
 104a1fb:	rex.W jmp QWORD PTR [rip+0xfffffffffffb78a6]        # 0x1001aa8
 104a202:	int3   
 104a203:	int3   
 104a204:	int3   
 104a205:	int3   
 104a206:	int3   
 104a207:	int3   
 104a208:	int3   
 104a209:	int3   
 104a20a:	int3   
 104a20b:	int3   
 104a20c:	int3   
 104a20d:	int3   
 104a20e:	int3   
 104a20f:	int3   
 104a210:	mov    rcx,QWORD PTR [rdx+0x60]
 104a217:	add    rcx,0x18
 104a21b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7886]        # 0x1001aa8
 104a222:	int3   
 104a223:	int3   
 104a224:	int3   
 104a225:	int3   
 104a226:	int3   
 104a227:	int3   
 104a228:	int3   
 104a229:	int3   
 104a22a:	int3   
 104a22b:	int3   
 104a22c:	int3   
 104a22d:	int3   
 104a22e:	int3   
 104a22f:	int3   
 104a230:	mov    rcx,QWORD PTR [rdx+0x60]
 104a237:	add    rcx,0x20
 104a23b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7866]        # 0x1001aa8
 104a242:	int3   
 104a243:	int3   
 104a244:	int3   
 104a245:	int3   
 104a246:	int3   
 104a247:	int3   
 104a248:	int3   
 104a249:	int3   
 104a24a:	int3   
 104a24b:	int3   
 104a24c:	int3   
 104a24d:	int3   
 104a24e:	int3   
 104a24f:	int3   
 104a250:	mov    rcx,QWORD PTR [rdx+0x60]
 104a257:	add    rcx,0x28
 104a25b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7846]        # 0x1001aa8
 104a262:	int3   
 104a263:	int3   
 104a264:	int3   
 104a265:	int3   
 104a266:	int3   
 104a267:	int3   
 104a268:	int3   
 104a269:	int3   
 104a26a:	int3   
 104a26b:	int3   
 104a26c:	int3   
 104a26d:	int3   
 104a26e:	int3   
 104a26f:	int3   
 104a270:	mov    rcx,QWORD PTR [rdx+0x60]
 104a277:	add    rcx,0x30
 104a27b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7826]        # 0x1001aa8
 104a282:	int3   
 104a283:	int3   
 104a284:	int3   
 104a285:	int3   
 104a286:	int3   
 104a287:	int3   
 104a288:	int3   
 104a289:	int3   
 104a28a:	int3   
 104a28b:	int3   
 104a28c:	int3   
 104a28d:	int3   
 104a28e:	int3   
 104a28f:	int3   
 104a290:	mov    rcx,QWORD PTR [rdx+0x60]
 104a297:	add    rcx,0x38
 104a29b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7806]        # 0x1001aa8
 104a2a2:	int3   
 104a2a3:	int3   
 104a2a4:	int3   
 104a2a5:	int3   
 104a2a6:	int3   
 104a2a7:	int3   
 104a2a8:	int3   
 104a2a9:	int3   
 104a2aa:	int3   
 104a2ab:	int3   
 104a2ac:	int3   
 104a2ad:	int3   
 104a2ae:	int3   
 104a2af:	int3   
 104a2b0:	mov    rcx,QWORD PTR [rdx+0x60]
 104a2b7:	add    rcx,0x18
 104a2bb:	rex.W jmp QWORD PTR [rip+0xfffffffffffb77e6]        # 0x1001aa8
 104a2c2:	int3   
 104a2c3:	int3   
 104a2c4:	int3   
 104a2c5:	int3   
 104a2c6:	int3   
 104a2c7:	int3   
 104a2c8:	int3   
 104a2c9:	int3   
 104a2ca:	int3   
 104a2cb:	int3   
 104a2cc:	int3   
 104a2cd:	int3   
 104a2ce:	int3   
 104a2cf:	int3   
 104a2d0:	mov    rcx,QWORD PTR [rdx+0x60]
 104a2d7:	add    rcx,0x20
 104a2db:	rex.W jmp QWORD PTR [rip+0xfffffffffffb77c6]        # 0x1001aa8
 104a2e2:	int3   
 104a2e3:	int3   
 104a2e4:	int3   
 104a2e5:	int3   
 104a2e6:	int3   
 104a2e7:	int3   
 104a2e8:	int3   
 104a2e9:	int3   
 104a2ea:	int3   
 104a2eb:	int3   
 104a2ec:	int3   
 104a2ed:	int3   
 104a2ee:	int3   
 104a2ef:	int3   
 104a2f0:	mov    rcx,QWORD PTR [rdx+0x60]
 104a2f7:	add    rcx,0x28
 104a2fb:	rex.W jmp QWORD PTR [rip+0xfffffffffffb77a6]        # 0x1001aa8
 104a302:	int3   
 104a303:	int3   
 104a304:	int3   
 104a305:	int3   
 104a306:	int3   
 104a307:	int3   
 104a308:	int3   
 104a309:	int3   
 104a30a:	int3   
 104a30b:	int3   
 104a30c:	int3   
 104a30d:	int3   
 104a30e:	int3   
 104a30f:	int3   
 104a310:	mov    rcx,QWORD PTR [rdx+0x60]
 104a317:	add    rcx,0x30
 104a31b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7786]        # 0x1001aa8
 104a322:	int3   
 104a323:	int3   
 104a324:	int3   
 104a325:	int3   
 104a326:	int3   
 104a327:	int3   
 104a328:	int3   
 104a329:	int3   
 104a32a:	int3   
 104a32b:	int3   
 104a32c:	int3   
 104a32d:	int3   
 104a32e:	int3   
 104a32f:	int3   
 104a330:	mov    rcx,QWORD PTR [rdx+0x60]
 104a337:	add    rcx,0x38
 104a33b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7766]        # 0x1001aa8
 104a342:	int3   
 104a343:	int3   
 104a344:	int3   
 104a345:	int3   
 104a346:	int3   
 104a347:	int3   
 104a348:	int3   
 104a349:	int3   
 104a34a:	int3   
 104a34b:	int3   
 104a34c:	int3   
 104a34d:	int3   
 104a34e:	int3   
 104a34f:	int3   
 104a350:	mov    rcx,QWORD PTR [rdx+0x60]
 104a357:	add    rcx,0x18
 104a35b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7746]        # 0x1001aa8
 104a362:	int3   
 104a363:	int3   
 104a364:	int3   
 104a365:	int3   
 104a366:	int3   
 104a367:	int3   
 104a368:	int3   
 104a369:	int3   
 104a36a:	int3   
 104a36b:	int3   
 104a36c:	int3   
 104a36d:	int3   
 104a36e:	int3   
 104a36f:	int3   
 104a370:	mov    rcx,QWORD PTR [rdx+0x60]
 104a377:	add    rcx,0x20
 104a37b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7726]        # 0x1001aa8
 104a382:	int3   
 104a383:	int3   
 104a384:	int3   
 104a385:	int3   
 104a386:	int3   
 104a387:	int3   
 104a388:	int3   
 104a389:	int3   
 104a38a:	int3   
 104a38b:	int3   
 104a38c:	int3   
 104a38d:	int3   
 104a38e:	int3   
 104a38f:	int3   
 104a390:	mov    rcx,QWORD PTR [rdx+0x60]
 104a397:	add    rcx,0x28
 104a39b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7706]        # 0x1001aa8
 104a3a2:	int3   
 104a3a3:	int3   
 104a3a4:	int3   
 104a3a5:	int3   
 104a3a6:	int3   
 104a3a7:	int3   
 104a3a8:	int3   
 104a3a9:	int3   
 104a3aa:	int3   
 104a3ab:	int3   
 104a3ac:	int3   
 104a3ad:	int3   
 104a3ae:	int3   
 104a3af:	int3   
 104a3b0:	mov    rcx,QWORD PTR [rdx+0x60]
 104a3b7:	add    rcx,0x30
 104a3bb:	rex.W jmp QWORD PTR [rip+0xfffffffffffb76e6]        # 0x1001aa8
 104a3c2:	int3   
 104a3c3:	int3   
 104a3c4:	int3   
 104a3c5:	int3   
 104a3c6:	int3   
 104a3c7:	int3   
 104a3c8:	int3   
 104a3c9:	int3   
 104a3ca:	int3   
 104a3cb:	int3   
 104a3cc:	int3   
 104a3cd:	int3   
 104a3ce:	int3   
 104a3cf:	int3   
 104a3d0:	mov    rcx,QWORD PTR [rdx+0x60]
 104a3d7:	add    rcx,0x38
 104a3db:	rex.W jmp QWORD PTR [rip+0xfffffffffffb76c6]        # 0x1001aa8
 104a3e2:	int3   
 104a3e3:	int3   
 104a3e4:	int3   
 104a3e5:	int3   
 104a3e6:	int3   
 104a3e7:	int3   
 104a3e8:	int3   
 104a3e9:	int3   
 104a3ea:	int3   
 104a3eb:	int3   
 104a3ec:	int3   
 104a3ed:	int3   
 104a3ee:	int3   
 104a3ef:	int3   
 104a3f0:	mov    rcx,QWORD PTR [rdx+0x50]
 104a3f7:	add    rcx,0x18
 104a3fb:	rex.W jmp QWORD PTR [rip+0xfffffffffffb76a6]        # 0x1001aa8
 104a402:	int3   
 104a403:	int3   
 104a404:	int3   
 104a405:	int3   
 104a406:	int3   
 104a407:	int3   
 104a408:	int3   
 104a409:	int3   
 104a40a:	int3   
 104a40b:	int3   
 104a40c:	int3   
 104a40d:	int3   
 104a40e:	int3   
 104a40f:	int3   
 104a410:	mov    rcx,QWORD PTR [rdx+0x50]
 104a417:	add    rcx,0x20
 104a41b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7686]        # 0x1001aa8
 104a422:	int3   
 104a423:	int3   
 104a424:	int3   
 104a425:	int3   
 104a426:	int3   
 104a427:	int3   
 104a428:	int3   
 104a429:	int3   
 104a42a:	int3   
 104a42b:	int3   
 104a42c:	int3   
 104a42d:	int3   
 104a42e:	int3   
 104a42f:	int3   
 104a430:	mov    rcx,QWORD PTR [rdx+0x50]
 104a437:	add    rcx,0x28
 104a43b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7666]        # 0x1001aa8
 104a442:	int3   
 104a443:	int3   
 104a444:	int3   
 104a445:	int3   
 104a446:	int3   
 104a447:	int3   
 104a448:	int3   
 104a449:	int3   
 104a44a:	int3   
 104a44b:	int3   
 104a44c:	int3   
 104a44d:	int3   
 104a44e:	int3   
 104a44f:	int3   
 104a450:	mov    rcx,QWORD PTR [rdx+0x50]
 104a457:	add    rcx,0x30
 104a45b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7646]        # 0x1001aa8
 104a462:	int3   
 104a463:	int3   
 104a464:	int3   
 104a465:	int3   
 104a466:	int3   
 104a467:	int3   
 104a468:	int3   
 104a469:	int3   
 104a46a:	int3   
 104a46b:	int3   
 104a46c:	int3   
 104a46d:	int3   
 104a46e:	int3   
 104a46f:	int3   
 104a470:	mov    rcx,QWORD PTR [rdx+0x50]
 104a477:	add    rcx,0x38
 104a47b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7626]        # 0x1001aa8
 104a482:	int3   
 104a483:	int3   
 104a484:	int3   
 104a485:	int3   
 104a486:	int3   
 104a487:	int3   
 104a488:	int3   
 104a489:	int3   
 104a48a:	int3   
 104a48b:	int3   
 104a48c:	int3   
 104a48d:	int3   
 104a48e:	int3   
 104a48f:	int3   
 104a490:	mov    rcx,QWORD PTR [rdx+0x40]
 104a497:	add    rcx,0x18
 104a49b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7606]        # 0x1001aa8
 104a4a2:	int3   
 104a4a3:	int3   
 104a4a4:	int3   
 104a4a5:	int3   
 104a4a6:	int3   
 104a4a7:	int3   
 104a4a8:	int3   
 104a4a9:	int3   
 104a4aa:	int3   
 104a4ab:	int3   
 104a4ac:	int3   
 104a4ad:	int3   
 104a4ae:	int3   
 104a4af:	int3   
 104a4b0:	mov    rcx,QWORD PTR [rdx+0x40]
 104a4b7:	add    rcx,0x20
 104a4bb:	rex.W jmp QWORD PTR [rip+0xfffffffffffb75e6]        # 0x1001aa8
 104a4c2:	int3   
 104a4c3:	int3   
 104a4c4:	int3   
 104a4c5:	int3   
 104a4c6:	int3   
 104a4c7:	int3   
 104a4c8:	int3   
 104a4c9:	int3   
 104a4ca:	int3   
 104a4cb:	int3   
 104a4cc:	int3   
 104a4cd:	int3   
 104a4ce:	int3   
 104a4cf:	int3   
 104a4d0:	mov    rcx,QWORD PTR [rdx+0x40]
 104a4d7:	add    rcx,0x28
 104a4db:	rex.W jmp QWORD PTR [rip+0xfffffffffffb75c6]        # 0x1001aa8
 104a4e2:	int3   
 104a4e3:	int3   
 104a4e4:	int3   
 104a4e5:	int3   
 104a4e6:	int3   
 104a4e7:	int3   
 104a4e8:	int3   
 104a4e9:	int3   
 104a4ea:	int3   
 104a4eb:	int3   
 104a4ec:	int3   
 104a4ed:	int3   
 104a4ee:	int3   
 104a4ef:	int3   
 104a4f0:	mov    rcx,QWORD PTR [rdx+0x40]
 104a4f7:	add    rcx,0x30
 104a4fb:	rex.W jmp QWORD PTR [rip+0xfffffffffffb75a6]        # 0x1001aa8
 104a502:	int3   
 104a503:	int3   
 104a504:	int3   
 104a505:	int3   
 104a506:	int3   
 104a507:	int3   
 104a508:	int3   
 104a509:	int3   
 104a50a:	int3   
 104a50b:	int3   
 104a50c:	int3   
 104a50d:	int3   
 104a50e:	int3   
 104a50f:	int3   
 104a510:	mov    rcx,QWORD PTR [rdx+0x40]
 104a517:	add    rcx,0x38
 104a51b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7586]        # 0x1001aa8
 104a522:	int3   
 104a523:	int3   
 104a524:	int3   
 104a525:	int3   
 104a526:	int3   
 104a527:	int3   
 104a528:	int3   
 104a529:	int3   
 104a52a:	int3   
 104a52b:	int3   
 104a52c:	int3   
 104a52d:	int3   
 104a52e:	int3   
 104a52f:	int3   
 104a530:	mov    rcx,QWORD PTR [rdx+0x40]
 104a537:	jmp    0x100fe80
 104a53c:	int3   
 104a53d:	int3   
 104a53e:	int3   
 104a53f:	int3   
 104a540:	int3   
 104a541:	int3   
 104a542:	int3   
 104a543:	int3   
 104a544:	int3   
 104a545:	int3   
 104a546:	int3   
 104a547:	int3   
 104a548:	int3   
 104a549:	int3   
 104a54a:	int3   
 104a54b:	int3   
 104a54c:	int3   
 104a54d:	int3   
 104a54e:	int3   
 104a54f:	int3   
 104a550:	mov    rcx,QWORD PTR [rdx+0x40]
 104a557:	jmp    0x103f95a
 104a55c:	int3   
 104a55d:	int3   
 104a55e:	int3   
 104a55f:	int3   
 104a560:	mov    rcx,QWORD PTR [rdx+0x40]
 104a567:	add    rcx,0x18
 104a56b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7536]        # 0x1001aa8
 104a572:	int3   
 104a573:	int3   
 104a574:	int3   
 104a575:	int3   
 104a576:	int3   
 104a577:	int3   
 104a578:	int3   
 104a579:	int3   
 104a57a:	int3   
 104a57b:	int3   
 104a57c:	int3   
 104a57d:	int3   
 104a57e:	int3   
 104a57f:	int3   
 104a580:	mov    rcx,QWORD PTR [rdx+0x40]
 104a587:	add    rcx,0x20
 104a58b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7516]        # 0x1001aa8
 104a592:	int3   
 104a593:	int3   
 104a594:	int3   
 104a595:	int3   
 104a596:	int3   
 104a597:	int3   
 104a598:	int3   
 104a599:	int3   
 104a59a:	int3   
 104a59b:	int3   
 104a59c:	int3   
 104a59d:	int3   
 104a59e:	int3   
 104a59f:	int3   
 104a5a0:	mov    rcx,QWORD PTR [rdx+0x40]
 104a5a7:	add    rcx,0x28
 104a5ab:	rex.W jmp QWORD PTR [rip+0xfffffffffffb74f6]        # 0x1001aa8
 104a5b2:	int3   
 104a5b3:	int3   
 104a5b4:	int3   
 104a5b5:	int3   
 104a5b6:	int3   
 104a5b7:	int3   
 104a5b8:	int3   
 104a5b9:	int3   
 104a5ba:	int3   
 104a5bb:	int3   
 104a5bc:	int3   
 104a5bd:	int3   
 104a5be:	int3   
 104a5bf:	int3   
 104a5c0:	mov    rcx,QWORD PTR [rdx+0x40]
 104a5c7:	add    rcx,0x30
 104a5cb:	rex.W jmp QWORD PTR [rip+0xfffffffffffb74d6]        # 0x1001aa8
 104a5d2:	int3   
 104a5d3:	int3   
 104a5d4:	int3   
 104a5d5:	int3   
 104a5d6:	int3   
 104a5d7:	int3   
 104a5d8:	int3   
 104a5d9:	int3   
 104a5da:	int3   
 104a5db:	int3   
 104a5dc:	int3   
 104a5dd:	int3   
 104a5de:	int3   
 104a5df:	int3   
 104a5e0:	mov    rcx,QWORD PTR [rdx+0x40]
 104a5e7:	add    rcx,0x38
 104a5eb:	rex.W jmp QWORD PTR [rip+0xfffffffffffb74b6]        # 0x1001aa8
 104a5f2:	int3   
 104a5f3:	int3   
 104a5f4:	int3   
 104a5f5:	int3   
 104a5f6:	int3   
 104a5f7:	int3   
 104a5f8:	int3   
 104a5f9:	int3   
 104a5fa:	int3   
 104a5fb:	int3   
 104a5fc:	int3   
 104a5fd:	int3   
 104a5fe:	int3   
 104a5ff:	int3   
 104a600:	mov    rcx,QWORD PTR [rdx+0x40]
 104a607:	jmp    0x103f95a
 104a60c:	int3   
 104a60d:	int3   
 104a60e:	int3   
 104a60f:	int3   
 104a610:	mov    rcx,QWORD PTR [rdx+0x40]
 104a617:	add    rcx,0x18
 104a61b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7486]        # 0x1001aa8
 104a622:	int3   
 104a623:	int3   
 104a624:	int3   
 104a625:	int3   
 104a626:	int3   
 104a627:	int3   
 104a628:	int3   
 104a629:	int3   
 104a62a:	int3   
 104a62b:	int3   
 104a62c:	int3   
 104a62d:	int3   
 104a62e:	int3   
 104a62f:	int3   
 104a630:	mov    rcx,QWORD PTR [rdx+0x40]
 104a637:	add    rcx,0x20
 104a63b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7466]        # 0x1001aa8
 104a642:	int3   
 104a643:	int3   
 104a644:	int3   
 104a645:	int3   
 104a646:	int3   
 104a647:	int3   
 104a648:	int3   
 104a649:	int3   
 104a64a:	int3   
 104a64b:	int3   
 104a64c:	int3   
 104a64d:	int3   
 104a64e:	int3   
 104a64f:	int3   
 104a650:	mov    rcx,QWORD PTR [rdx+0x40]
 104a657:	add    rcx,0x28
 104a65b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7446]        # 0x1001aa8
 104a662:	int3   
 104a663:	int3   
 104a664:	int3   
 104a665:	int3   
 104a666:	int3   
 104a667:	int3   
 104a668:	int3   
 104a669:	int3   
 104a66a:	int3   
 104a66b:	int3   
 104a66c:	int3   
 104a66d:	int3   
 104a66e:	int3   
 104a66f:	int3   
 104a670:	mov    rcx,QWORD PTR [rdx+0x40]
 104a677:	add    rcx,0x30
 104a67b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7426]        # 0x1001aa8
 104a682:	int3   
 104a683:	int3   
 104a684:	int3   
 104a685:	int3   
 104a686:	int3   
 104a687:	int3   
 104a688:	int3   
 104a689:	int3   
 104a68a:	int3   
 104a68b:	int3   
 104a68c:	int3   
 104a68d:	int3   
 104a68e:	int3   
 104a68f:	int3   
 104a690:	mov    rcx,QWORD PTR [rdx+0x40]
 104a697:	add    rcx,0x38
 104a69b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7406]        # 0x1001aa8
 104a6a2:	int3   
 104a6a3:	int3   
 104a6a4:	int3   
 104a6a5:	int3   
 104a6a6:	int3   
 104a6a7:	int3   
 104a6a8:	int3   
 104a6a9:	int3   
 104a6aa:	int3   
 104a6ab:	int3   
 104a6ac:	int3   
 104a6ad:	int3   
 104a6ae:	int3   
 104a6af:	int3   
 104a6b0:	mov    rcx,QWORD PTR [rdx+0x50]
 104a6b7:	jmp    0x103f95a
 104a6bc:	int3   
 104a6bd:	int3   
 104a6be:	int3   
 104a6bf:	int3   
 104a6c0:	mov    rcx,QWORD PTR [rdx+0x50]
 104a6c7:	add    rcx,0x18
 104a6cb:	rex.W jmp QWORD PTR [rip+0xfffffffffffb73d6]        # 0x1001aa8
 104a6d2:	int3   
 104a6d3:	int3   
 104a6d4:	int3   
 104a6d5:	int3   
 104a6d6:	int3   
 104a6d7:	int3   
 104a6d8:	int3   
 104a6d9:	int3   
 104a6da:	int3   
 104a6db:	int3   
 104a6dc:	int3   
 104a6dd:	int3   
 104a6de:	int3   
 104a6df:	int3   
 104a6e0:	mov    rcx,QWORD PTR [rdx+0x50]
 104a6e7:	add    rcx,0x20
 104a6eb:	rex.W jmp QWORD PTR [rip+0xfffffffffffb73b6]        # 0x1001aa8
 104a6f2:	int3   
 104a6f3:	int3   
 104a6f4:	int3   
 104a6f5:	int3   
 104a6f6:	int3   
 104a6f7:	int3   
 104a6f8:	int3   
 104a6f9:	int3   
 104a6fa:	int3   
 104a6fb:	int3   
 104a6fc:	int3   
 104a6fd:	int3   
 104a6fe:	int3   
 104a6ff:	int3   
 104a700:	mov    rcx,QWORD PTR [rdx+0x50]
 104a707:	add    rcx,0x28
 104a70b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7396]        # 0x1001aa8
 104a712:	int3   
 104a713:	int3   
 104a714:	int3   
 104a715:	int3   
 104a716:	int3   
 104a717:	int3   
 104a718:	int3   
 104a719:	int3   
 104a71a:	int3   
 104a71b:	int3   
 104a71c:	int3   
 104a71d:	int3   
 104a71e:	int3   
 104a71f:	int3   
 104a720:	mov    rcx,QWORD PTR [rdx+0x50]
 104a727:	add    rcx,0x30
 104a72b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7376]        # 0x1001aa8
 104a732:	int3   
 104a733:	int3   
 104a734:	int3   
 104a735:	int3   
 104a736:	int3   
 104a737:	int3   
 104a738:	int3   
 104a739:	int3   
 104a73a:	int3   
 104a73b:	int3   
 104a73c:	int3   
 104a73d:	int3   
 104a73e:	int3   
 104a73f:	int3   
 104a740:	mov    rcx,QWORD PTR [rdx+0x50]
 104a747:	add    rcx,0x38
 104a74b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7356]        # 0x1001aa8
 104a752:	int3   
 104a753:	int3   
 104a754:	int3   
 104a755:	int3   
 104a756:	int3   
 104a757:	int3   
 104a758:	int3   
 104a759:	int3   
 104a75a:	int3   
 104a75b:	int3   
 104a75c:	int3   
 104a75d:	int3   
 104a75e:	int3   
 104a75f:	int3   
 104a760:	mov    rcx,QWORD PTR [rdx+0x50]
 104a767:	jmp    0x103f95a
 104a76c:	int3   
 104a76d:	int3   
 104a76e:	int3   
 104a76f:	int3   
 104a770:	mov    rcx,QWORD PTR [rdx+0x50]
 104a777:	add    rcx,0x18
 104a77b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7326]        # 0x1001aa8
 104a782:	int3   
 104a783:	int3   
 104a784:	int3   
 104a785:	int3   
 104a786:	int3   
 104a787:	int3   
 104a788:	int3   
 104a789:	int3   
 104a78a:	int3   
 104a78b:	int3   
 104a78c:	int3   
 104a78d:	int3   
 104a78e:	int3   
 104a78f:	int3   
 104a790:	mov    rcx,QWORD PTR [rdx+0x50]
 104a797:	add    rcx,0x20
 104a79b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7306]        # 0x1001aa8
 104a7a2:	int3   
 104a7a3:	int3   
 104a7a4:	int3   
 104a7a5:	int3   
 104a7a6:	int3   
 104a7a7:	int3   
 104a7a8:	int3   
 104a7a9:	int3   
 104a7aa:	int3   
 104a7ab:	int3   
 104a7ac:	int3   
 104a7ad:	int3   
 104a7ae:	int3   
 104a7af:	int3   
 104a7b0:	mov    rcx,QWORD PTR [rdx+0x50]
 104a7b7:	add    rcx,0x28
 104a7bb:	rex.W jmp QWORD PTR [rip+0xfffffffffffb72e6]        # 0x1001aa8
 104a7c2:	int3   
 104a7c3:	int3   
 104a7c4:	int3   
 104a7c5:	int3   
 104a7c6:	int3   
 104a7c7:	int3   
 104a7c8:	int3   
 104a7c9:	int3   
 104a7ca:	int3   
 104a7cb:	int3   
 104a7cc:	int3   
 104a7cd:	int3   
 104a7ce:	int3   
 104a7cf:	int3   
 104a7d0:	mov    rcx,QWORD PTR [rdx+0x50]
 104a7d7:	add    rcx,0x30
 104a7db:	rex.W jmp QWORD PTR [rip+0xfffffffffffb72c6]        # 0x1001aa8
 104a7e2:	int3   
 104a7e3:	int3   
 104a7e4:	int3   
 104a7e5:	int3   
 104a7e6:	int3   
 104a7e7:	int3   
 104a7e8:	int3   
 104a7e9:	int3   
 104a7ea:	int3   
 104a7eb:	int3   
 104a7ec:	int3   
 104a7ed:	int3   
 104a7ee:	int3   
 104a7ef:	int3   
 104a7f0:	mov    rcx,QWORD PTR [rdx+0x50]
 104a7f7:	add    rcx,0x38
 104a7fb:	rex.W jmp QWORD PTR [rip+0xfffffffffffb72a6]        # 0x1001aa8
 104a802:	int3   
 104a803:	int3   
 104a804:	int3   
 104a805:	int3   
 104a806:	int3   
 104a807:	int3   
 104a808:	int3   
 104a809:	int3   
 104a80a:	int3   
 104a80b:	int3   
 104a80c:	int3   
 104a80d:	int3   
 104a80e:	int3   
 104a80f:	int3   
 104a810:	mov    rcx,QWORD PTR [rdx+0x50]
 104a817:	jmp    0x103f95a
 104a81c:	int3   
 104a81d:	int3   
 104a81e:	int3   
 104a81f:	int3   
 104a820:	mov    rcx,QWORD PTR [rdx+0x50]
 104a827:	add    rcx,0x18
 104a82b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7276]        # 0x1001aa8
 104a832:	int3   
 104a833:	int3   
 104a834:	int3   
 104a835:	int3   
 104a836:	int3   
 104a837:	int3   
 104a838:	int3   
 104a839:	int3   
 104a83a:	int3   
 104a83b:	int3   
 104a83c:	int3   
 104a83d:	int3   
 104a83e:	int3   
 104a83f:	int3   
 104a840:	mov    rcx,QWORD PTR [rdx+0x50]
 104a847:	add    rcx,0x20
 104a84b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7256]        # 0x1001aa8
 104a852:	int3   
 104a853:	int3   
 104a854:	int3   
 104a855:	int3   
 104a856:	int3   
 104a857:	int3   
 104a858:	int3   
 104a859:	int3   
 104a85a:	int3   
 104a85b:	int3   
 104a85c:	int3   
 104a85d:	int3   
 104a85e:	int3   
 104a85f:	int3   
 104a860:	mov    rcx,QWORD PTR [rdx+0x50]
 104a867:	add    rcx,0x28
 104a86b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7236]        # 0x1001aa8
 104a872:	int3   
 104a873:	int3   
 104a874:	int3   
 104a875:	int3   
 104a876:	int3   
 104a877:	int3   
 104a878:	int3   
 104a879:	int3   
 104a87a:	int3   
 104a87b:	int3   
 104a87c:	int3   
 104a87d:	int3   
 104a87e:	int3   
 104a87f:	int3   
 104a880:	mov    rcx,QWORD PTR [rdx+0x50]
 104a887:	add    rcx,0x30
 104a88b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7216]        # 0x1001aa8
 104a892:	int3   
 104a893:	int3   
 104a894:	int3   
 104a895:	int3   
 104a896:	int3   
 104a897:	int3   
 104a898:	int3   
 104a899:	int3   
 104a89a:	int3   
 104a89b:	int3   
 104a89c:	int3   
 104a89d:	int3   
 104a89e:	int3   
 104a89f:	int3   
 104a8a0:	mov    rcx,QWORD PTR [rdx+0x50]
 104a8a7:	add    rcx,0x38
 104a8ab:	rex.W jmp QWORD PTR [rip+0xfffffffffffb71f6]        # 0x1001aa8
 104a8b2:	int3   
 104a8b3:	int3   
 104a8b4:	int3   
 104a8b5:	int3   
 104a8b6:	int3   
 104a8b7:	int3   
 104a8b8:	int3   
 104a8b9:	int3   
 104a8ba:	int3   
 104a8bb:	int3   
 104a8bc:	int3   
 104a8bd:	int3   
 104a8be:	int3   
 104a8bf:	int3   
 104a8c0:	mov    rcx,QWORD PTR [rdx+0x50]
 104a8c7:	jmp    0x103f95a
 104a8cc:	int3   
 104a8cd:	int3   
 104a8ce:	int3   
 104a8cf:	int3   
 104a8d0:	mov    rcx,QWORD PTR [rdx+0x50]
 104a8d7:	add    rcx,0x18
 104a8db:	rex.W jmp QWORD PTR [rip+0xfffffffffffb71c6]        # 0x1001aa8
 104a8e2:	int3   
 104a8e3:	int3   
 104a8e4:	int3   
 104a8e5:	int3   
 104a8e6:	int3   
 104a8e7:	int3   
 104a8e8:	int3   
 104a8e9:	int3   
 104a8ea:	int3   
 104a8eb:	int3   
 104a8ec:	int3   
 104a8ed:	int3   
 104a8ee:	int3   
 104a8ef:	int3   
 104a8f0:	mov    rcx,QWORD PTR [rdx+0x50]
 104a8f7:	add    rcx,0x20
 104a8fb:	rex.W jmp QWORD PTR [rip+0xfffffffffffb71a6]        # 0x1001aa8
 104a902:	int3   
 104a903:	int3   
 104a904:	int3   
 104a905:	int3   
 104a906:	int3   
 104a907:	int3   
 104a908:	int3   
 104a909:	int3   
 104a90a:	int3   
 104a90b:	int3   
 104a90c:	int3   
 104a90d:	int3   
 104a90e:	int3   
 104a90f:	int3   
 104a910:	mov    rcx,QWORD PTR [rdx+0x50]
 104a917:	add    rcx,0x28
 104a91b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7186]        # 0x1001aa8
 104a922:	int3   
 104a923:	int3   
 104a924:	int3   
 104a925:	int3   
 104a926:	int3   
 104a927:	int3   
 104a928:	int3   
 104a929:	int3   
 104a92a:	int3   
 104a92b:	int3   
 104a92c:	int3   
 104a92d:	int3   
 104a92e:	int3   
 104a92f:	int3   
 104a930:	mov    rcx,QWORD PTR [rdx+0x50]
 104a937:	add    rcx,0x30
 104a93b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7166]        # 0x1001aa8
 104a942:	int3   
 104a943:	int3   
 104a944:	int3   
 104a945:	int3   
 104a946:	int3   
 104a947:	int3   
 104a948:	int3   
 104a949:	int3   
 104a94a:	int3   
 104a94b:	int3   
 104a94c:	int3   
 104a94d:	int3   
 104a94e:	int3   
 104a94f:	int3   
 104a950:	mov    rcx,QWORD PTR [rdx+0x50]
 104a957:	add    rcx,0x38
 104a95b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7146]        # 0x1001aa8
 104a962:	int3   
 104a963:	int3   
 104a964:	int3   
 104a965:	int3   
 104a966:	int3   
 104a967:	int3   
 104a968:	int3   
 104a969:	int3   
 104a96a:	int3   
 104a96b:	int3   
 104a96c:	int3   
 104a96d:	int3   
 104a96e:	int3   
 104a96f:	int3   
 104a970:	mov    rcx,QWORD PTR [rdx+0x70]
 104a977:	jmp    0x103f95a
 104a97c:	int3   
 104a97d:	int3   
 104a97e:	int3   
 104a97f:	int3   
 104a980:	mov    rcx,QWORD PTR [rdx+0x70]
 104a987:	add    rcx,0x18
 104a98b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7116]        # 0x1001aa8
 104a992:	int3   
 104a993:	int3   
 104a994:	int3   
 104a995:	int3   
 104a996:	int3   
 104a997:	int3   
 104a998:	int3   
 104a999:	int3   
 104a99a:	int3   
 104a99b:	int3   
 104a99c:	int3   
 104a99d:	int3   
 104a99e:	int3   
 104a99f:	int3   
 104a9a0:	mov    rcx,QWORD PTR [rdx+0x70]
 104a9a7:	add    rcx,0x20
 104a9ab:	rex.W jmp QWORD PTR [rip+0xfffffffffffb70f6]        # 0x1001aa8
 104a9b2:	int3   
 104a9b3:	int3   
 104a9b4:	int3   
 104a9b5:	int3   
 104a9b6:	int3   
 104a9b7:	int3   
 104a9b8:	int3   
 104a9b9:	int3   
 104a9ba:	int3   
 104a9bb:	int3   
 104a9bc:	int3   
 104a9bd:	int3   
 104a9be:	int3   
 104a9bf:	int3   
 104a9c0:	mov    rcx,QWORD PTR [rdx+0x70]
 104a9c7:	add    rcx,0x28
 104a9cb:	rex.W jmp QWORD PTR [rip+0xfffffffffffb70d6]        # 0x1001aa8
 104a9d2:	int3   
 104a9d3:	int3   
 104a9d4:	int3   
 104a9d5:	int3   
 104a9d6:	int3   
 104a9d7:	int3   
 104a9d8:	int3   
 104a9d9:	int3   
 104a9da:	int3   
 104a9db:	int3   
 104a9dc:	int3   
 104a9dd:	int3   
 104a9de:	int3   
 104a9df:	int3   
 104a9e0:	mov    rcx,QWORD PTR [rdx+0x70]
 104a9e7:	add    rcx,0x30
 104a9eb:	rex.W jmp QWORD PTR [rip+0xfffffffffffb70b6]        # 0x1001aa8
 104a9f2:	int3   
 104a9f3:	int3   
 104a9f4:	int3   
 104a9f5:	int3   
 104a9f6:	int3   
 104a9f7:	int3   
 104a9f8:	int3   
 104a9f9:	int3   
 104a9fa:	int3   
 104a9fb:	int3   
 104a9fc:	int3   
 104a9fd:	int3   
 104a9fe:	int3   
 104a9ff:	int3   
 104aa00:	mov    rcx,QWORD PTR [rdx+0x70]
 104aa07:	add    rcx,0x38
 104aa0b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7096]        # 0x1001aa8
 104aa12:	int3   
 104aa13:	int3   
 104aa14:	int3   
 104aa15:	int3   
 104aa16:	int3   
 104aa17:	int3   
 104aa18:	int3   
 104aa19:	int3   
 104aa1a:	int3   
 104aa1b:	int3   
 104aa1c:	int3   
 104aa1d:	int3   
 104aa1e:	int3   
 104aa1f:	int3   
 104aa20:	rex push rbp
 104aa22:	sub    rsp,0x20
 104aa26:	mov    rbp,rdx
 104aa29:	mov    rdx,QWORD PTR [rbp+0x50]
 104aa2d:	add    rdx,0x10
 104aa31:	mov    rcx,QWORD PTR [rbp+0x68]
 104aa35:	call   0x100e5c0
 104aa3a:	add    rsp,0x20
 104aa3e:	pop    rbp
 104aa3f:	ret    
 104aa40:	int3   
 104aa41:	int3   
 104aa42:	int3   
 104aa43:	int3   
 104aa44:	int3   
 104aa45:	int3   
 104aa46:	int3   
 104aa47:	int3   
 104aa48:	int3   
 104aa49:	int3   
 104aa4a:	int3   
 104aa4b:	int3   
 104aa4c:	int3   
 104aa4d:	int3   
 104aa4e:	int3   
 104aa4f:	int3   
 104aa50:	mov    rcx,QWORD PTR [rdx+0x40]
 104aa57:	add    rcx,0x18
 104aa5b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7046]        # 0x1001aa8
 104aa62:	int3   
 104aa63:	int3   
 104aa64:	int3   
 104aa65:	int3   
 104aa66:	int3   
 104aa67:	int3   
 104aa68:	int3   
 104aa69:	int3   
 104aa6a:	int3   
 104aa6b:	int3   
 104aa6c:	int3   
 104aa6d:	int3   
 104aa6e:	int3   
 104aa6f:	int3   
 104aa70:	mov    rcx,QWORD PTR [rdx+0x40]
 104aa77:	add    rcx,0x20
 104aa7b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7026]        # 0x1001aa8
 104aa82:	int3   
 104aa83:	int3   
 104aa84:	int3   
 104aa85:	int3   
 104aa86:	int3   
 104aa87:	int3   
 104aa88:	int3   
 104aa89:	int3   
 104aa8a:	int3   
 104aa8b:	int3   
 104aa8c:	int3   
 104aa8d:	int3   
 104aa8e:	int3   
 104aa8f:	int3   
 104aa90:	mov    rcx,QWORD PTR [rdx+0x40]
 104aa97:	add    rcx,0x28
 104aa9b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb7006]        # 0x1001aa8
 104aaa2:	int3   
 104aaa3:	int3   
 104aaa4:	int3   
 104aaa5:	int3   
 104aaa6:	int3   
 104aaa7:	int3   
 104aaa8:	int3   
 104aaa9:	int3   
 104aaaa:	int3   
 104aaab:	int3   
 104aaac:	int3   
 104aaad:	int3   
 104aaae:	int3   
 104aaaf:	int3   
 104aab0:	mov    rcx,QWORD PTR [rdx+0x40]
 104aab7:	add    rcx,0x30
 104aabb:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6fe6]        # 0x1001aa8
 104aac2:	int3   
 104aac3:	int3   
 104aac4:	int3   
 104aac5:	int3   
 104aac6:	int3   
 104aac7:	int3   
 104aac8:	int3   
 104aac9:	int3   
 104aaca:	int3   
 104aacb:	int3   
 104aacc:	int3   
 104aacd:	int3   
 104aace:	int3   
 104aacf:	int3   
 104aad0:	mov    rcx,QWORD PTR [rdx+0x40]
 104aad7:	add    rcx,0x38
 104aadb:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6fc6]        # 0x1001aa8
 104aae2:	int3   
 104aae3:	int3   
 104aae4:	int3   
 104aae5:	int3   
 104aae6:	int3   
 104aae7:	int3   
 104aae8:	int3   
 104aae9:	int3   
 104aaea:	int3   
 104aaeb:	int3   
 104aaec:	int3   
 104aaed:	int3   
 104aaee:	int3   
 104aaef:	int3   
 104aaf0:	rex push rbp
 104aaf2:	sub    rsp,0x20
 104aaf6:	mov    rbp,rdx
 104aaf9:	lea    r9,[rip+0xfffffffffffc4990]        # 0x100f490
 104ab00:	mov    r8d,0x1
 104ab06:	mov    edx,0x40
 104ab0b:	lea    rcx,[rbp+0x40]
 104ab0f:	call   0x1040094
 104ab14:	add    rsp,0x20
 104ab18:	pop    rbp
 104ab19:	ret    
 104ab1a:	int3   
 104ab1b:	int3   
 104ab1c:	int3   
 104ab1d:	int3   
 104ab1e:	int3   
 104ab1f:	int3   
 104ab20:	mov    rcx,QWORD PTR [rdx+0x40]
 104ab27:	jmp    0x100e5d0
 104ab2c:	int3   
 104ab2d:	int3   
 104ab2e:	int3   
 104ab2f:	int3   
 104ab30:	mov    rcx,QWORD PTR [rdx+0x40]
 104ab37:	add    rcx,0x8
 104ab3b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6f66]        # 0x1001aa8
 104ab42:	int3   
 104ab43:	int3   
 104ab44:	int3   
 104ab45:	int3   
 104ab46:	int3   
 104ab47:	int3   
 104ab48:	int3   
 104ab49:	int3   
 104ab4a:	int3   
 104ab4b:	int3   
 104ab4c:	int3   
 104ab4d:	int3   
 104ab4e:	int3   
 104ab4f:	int3   
 104ab50:	mov    rcx,QWORD PTR [rdx+0x40]
 104ab57:	jmp    0x100e5d0
 104ab5c:	int3   
 104ab5d:	int3   
 104ab5e:	int3   
 104ab5f:	int3   
 104ab60:	mov    rcx,QWORD PTR [rdx+0x40]
 104ab67:	add    rcx,0x8
 104ab6b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6f36]        # 0x1001aa8
 104ab72:	int3   
 104ab73:	int3   
 104ab74:	int3   
 104ab75:	int3   
 104ab76:	int3   
 104ab77:	int3   
 104ab78:	int3   
 104ab79:	int3   
 104ab7a:	int3   
 104ab7b:	int3   
 104ab7c:	int3   
 104ab7d:	int3   
 104ab7e:	int3   
 104ab7f:	int3   
 104ab80:	lea    rcx,[rdx+0x50]
 104ab87:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6f1a]        # 0x1001aa8
 104ab8e:	int3   
 104ab8f:	int3   
 104ab90:	lea    rcx,[rdx+0x48]
 104ab97:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6f0a]        # 0x1001aa8
 104ab9e:	int3   
 104ab9f:	int3   
 104aba0:	lea    rcx,[rdx+0x58]
 104aba7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6efa]        # 0x1001aa8
 104abae:	int3   
 104abaf:	int3   
 104abb0:	lea    rcx,[rdx+0x60]
 104abb7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6eea]        # 0x1001aa8
 104abbe:	int3   
 104abbf:	int3   
 104abc0:	lea    rcx,[rdx+0x78]
 104abc7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6eda]        # 0x1001aa8
 104abce:	int3   
 104abcf:	int3   
 104abd0:	rex push rbp
 104abd2:	sub    rsp,0x20
 104abd6:	mov    rbp,rdx
 104abd9:	mov    eax,DWORD PTR [rbp+0x40]
 104abdc:	and    eax,0x1
 104abdf:	test   eax,eax
 104abe1:	je     0x104abf1
 104abe3:	and    DWORD PTR [rbp+0x40],0xfffffffe
 104abe7:	lea    rcx,[rbp+0x70]
 104abeb:	call   QWORD PTR [rip+0xfffffffffffb6eb7]        # 0x1001aa8
 104abf1:	add    rsp,0x20
 104abf5:	pop    rbp
 104abf6:	ret    
 104abf7:	int3   
 104abf8:	int3   
 104abf9:	int3   
 104abfa:	int3   
 104abfb:	int3   
 104abfc:	int3   
 104abfd:	int3   
 104abfe:	int3   
 104abff:	int3   
 104ac00:	rex push rbp
 104ac02:	sub    rsp,0x20
 104ac06:	mov    rbp,rdx
 104ac09:	mov    eax,DWORD PTR [rbp+0x40]
 104ac0c:	and    eax,0x2
 104ac0f:	test   eax,eax
 104ac11:	je     0x104ac21
 104ac13:	and    DWORD PTR [rbp+0x40],0xfffffffd
 104ac17:	lea    rcx,[rbp+0x68]
 104ac1b:	call   QWORD PTR [rip+0xfffffffffffb6e87]        # 0x1001aa8
 104ac21:	add    rsp,0x20
 104ac25:	pop    rbp
 104ac26:	ret    
 104ac27:	int3   
 104ac28:	int3   
 104ac29:	int3   
 104ac2a:	int3   
 104ac2b:	int3   
 104ac2c:	int3   
 104ac2d:	int3   
 104ac2e:	int3   
 104ac2f:	int3   
 104ac30:	lea    rcx,[rdx+0x30]
 104ac37:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6e6a]        # 0x1001aa8
 104ac3e:	int3   
 104ac3f:	int3   
 104ac40:	int3   
 104ac41:	int3   
 104ac42:	int3   
 104ac43:	int3   
 104ac44:	int3   
 104ac45:	int3   
 104ac46:	int3   
 104ac47:	int3   
 104ac48:	int3   
 104ac49:	int3   
 104ac4a:	int3   
 104ac4b:	int3   
 104ac4c:	int3   
 104ac4d:	int3   
 104ac4e:	int3   
 104ac4f:	int3   
 104ac50:	lea    rcx,[rdx+0x78]
 104ac57:	jmp    0x100c4f0
 104ac5c:	int3   
 104ac5d:	int3   
 104ac5e:	int3   
 104ac5f:	int3   
 104ac60:	lea    rcx,[rdx+0x30]
 104ac67:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6e3a]        # 0x1001aa8
 104ac6e:	int3   
 104ac6f:	int3   
 104ac70:	lea    rcx,[rdx+0x40]
 104ac77:	jmp    0x1012ae0
 104ac7c:	int3   
 104ac7d:	int3   
 104ac7e:	int3   
 104ac7f:	int3   
 104ac80:	mov    rcx,QWORD PTR [rdx+0x38]
 104ac87:	jmp    0x100ebf0
 104ac8c:	int3   
 104ac8d:	int3   
 104ac8e:	int3   
 104ac8f:	int3   
 104ac90:	mov    rcx,QWORD PTR [rdx+0x38]
 104ac97:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6e0a]        # 0x1001aa8
 104ac9e:	int3   
 104ac9f:	int3   
 104aca0:	mov    rcx,QWORD PTR [rdx+0x38]
 104aca7:	add    rcx,0x8
 104acab:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6df6]        # 0x1001aa8
 104acb2:	int3   
 104acb3:	int3   
 104acb4:	int3   
 104acb5:	int3   
 104acb6:	int3   
 104acb7:	int3   
 104acb8:	int3   
 104acb9:	int3   
 104acba:	int3   
 104acbb:	int3   
 104acbc:	int3   
 104acbd:	int3   
 104acbe:	int3   
 104acbf:	int3   
 104acc0:	lea    rcx,[rdx+0xb0]
 104acc7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6dda]        # 0x1001aa8
 104acce:	int3   
 104accf:	int3   
 104acd0:	mov    rcx,QWORD PTR [rdx+0x38]
 104acd7:	jmp    0x100ebf0
 104acdc:	int3   
 104acdd:	int3   
 104acde:	int3   
 104acdf:	int3   
 104ace0:	mov    rcx,QWORD PTR [rdx+0x38]
 104ace7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6dba]        # 0x1001aa8
 104acee:	int3   
 104acef:	int3   
 104acf0:	mov    rcx,QWORD PTR [rdx+0x38]
 104acf7:	add    rcx,0x8
 104acfb:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6da6]        # 0x1001aa8
 104ad02:	int3   
 104ad03:	int3   
 104ad04:	int3   
 104ad05:	int3   
 104ad06:	int3   
 104ad07:	int3   
 104ad08:	int3   
 104ad09:	int3   
 104ad0a:	int3   
 104ad0b:	int3   
 104ad0c:	int3   
 104ad0d:	int3   
 104ad0e:	int3   
 104ad0f:	int3   
 104ad10:	lea    rcx,[rdx+0x80]
 104ad17:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6d8a]        # 0x1001aa8
 104ad1e:	int3   
 104ad1f:	int3   
 104ad20:	lea    rcx,[rdx+0x60]
 104ad27:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6d7a]        # 0x1001aa8
 104ad2e:	int3   
 104ad2f:	int3   
 104ad30:	lea    rcx,[rdx+0x48]
 104ad37:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6d6a]        # 0x1001aa8
 104ad3e:	int3   
 104ad3f:	int3   
 104ad40:	lea    rcx,[rdx+0x90]
 104ad47:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6d5a]        # 0x1001aa8
 104ad4e:	int3   
 104ad4f:	int3   
 104ad50:	lea    rcx,[rdx+0x60]
 104ad57:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6d4a]        # 0x1001aa8
 104ad5e:	int3   
 104ad5f:	int3   
 104ad60:	lea    rcx,[rdx+0x60]
 104ad67:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6d3a]        # 0x1001aa8
 104ad6e:	int3   
 104ad6f:	int3   
 104ad70:	lea    rcx,[rdx+0xa0]
 104ad77:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6d2a]        # 0x1001aa8
 104ad7e:	int3   
 104ad7f:	int3   
 104ad80:	rex push rbp
 104ad82:	sub    rsp,0x20
 104ad86:	mov    rbp,rdx
 104ad89:	mov    eax,DWORD PTR [rbp+0x88]
 104ad8f:	and    eax,0x1
 104ad92:	test   eax,eax
 104ad94:	je     0x104adaa
 104ad96:	and    DWORD PTR [rbp+0x88],0xfffffffe
 104ad9d:	lea    rcx,[rbp+0x98]
 104ada4:	call   QWORD PTR [rip+0xfffffffffffb6cfe]        # 0x1001aa8
 104adaa:	add    rsp,0x20
 104adae:	pop    rbp
 104adaf:	ret    
 104adb0:	rex push rbp
 104adb2:	sub    rsp,0x20
 104adb6:	mov    rbp,rdx
 104adb9:	mov    eax,DWORD PTR [rbp+0x88]
 104adbf:	and    eax,0x2
 104adc2:	test   eax,eax
 104adc4:	je     0x104add7
 104adc6:	and    DWORD PTR [rbp+0x88],0xfffffffd
 104adcd:	lea    rcx,[rbp+0x60]
 104add1:	call   QWORD PTR [rip+0xfffffffffffb6cd1]        # 0x1001aa8
 104add7:	add    rsp,0x20
 104addb:	pop    rbp
 104addc:	ret    
 104addd:	int3   
 104adde:	int3   
 104addf:	int3   
 104ade0:	lea    rcx,[rdx+0x98]
 104ade7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6cba]        # 0x1001aa8
 104adee:	int3   
 104adef:	int3   
 104adf0:	lea    rcx,[rdx+0x60]
 104adf7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6caa]        # 0x1001aa8
 104adfe:	int3   
 104adff:	int3   
 104ae00:	lea    rcx,[rdx+0x60]
 104ae07:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6c9a]        # 0x1001aa8
 104ae0e:	int3   
 104ae0f:	int3   
 104ae10:	lea    rcx,[rdx+0x40]
 104ae17:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6c8a]        # 0x1001aa8
 104ae1e:	int3   
 104ae1f:	int3   
 104ae20:	lea    rcx,[rdx+0x50]
 104ae27:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6c7a]        # 0x1001aa8
 104ae2e:	int3   
 104ae2f:	int3   
 104ae30:	lea    rcx,[rdx+0x58]
 104ae37:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6c6a]        # 0x1001aa8
 104ae3e:	int3   
 104ae3f:	int3   
 104ae40:	lea    rcx,[rdx+0x78]
 104ae47:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6c5a]        # 0x1001aa8
 104ae4e:	int3   
 104ae4f:	int3   
 104ae50:	lea    rcx,[rdx+0x70]
 104ae57:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6c4a]        # 0x1001aa8
 104ae5e:	int3   
 104ae5f:	int3   
 104ae60:	lea    rcx,[rdx+0x68]
 104ae67:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6c3a]        # 0x1001aa8
 104ae6e:	int3   
 104ae6f:	int3   
 104ae70:	lea    rcx,[rdx+0xa0]
 104ae77:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6c2a]        # 0x1001aa8
 104ae7e:	int3   
 104ae7f:	int3   
 104ae80:	lea    rcx,[rdx+0x118]
 104ae87:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6c1a]        # 0x1001aa8
 104ae8e:	int3   
 104ae8f:	int3   
 104ae90:	lea    rcx,[rdx+0xb8]
 104ae97:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6c0a]        # 0x1001aa8
 104ae9e:	int3   
 104ae9f:	int3   
 104aea0:	lea    rcx,[rdx+0xc8]
 104aea7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6bfa]        # 0x1001aa8
 104aeae:	int3   
 104aeaf:	int3   
 104aeb0:	lea    rcx,[rdx+0x138]
 104aeb7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6bea]        # 0x1001aa8
 104aebe:	int3   
 104aebf:	int3   
 104aec0:	lea    rcx,[rdx+0xa8]
 104aec7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6bda]        # 0x1001aa8
 104aece:	int3   
 104aecf:	int3   
 104aed0:	lea    rcx,[rdx+0xd8]
 104aed7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6bca]        # 0x1001aa8
 104aede:	int3   
 104aedf:	int3   
 104aee0:	lea    rcx,[rdx+0x150]
 104aee7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6bba]        # 0x1001aa8
 104aeee:	int3   
 104aeef:	int3   
 104aef0:	lea    rcx,[rdx+0xe8]
 104aef7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6baa]        # 0x1001aa8
 104aefe:	int3   
 104aeff:	int3   
 104af00:	lea    rcx,[rdx+0x128]
 104af07:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6b9a]        # 0x1001aa8
 104af0e:	int3   
 104af0f:	int3   
 104af10:	lea    rcx,[rdx+0x148]
 104af17:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6b8a]        # 0x1001aa8
 104af1e:	int3   
 104af1f:	int3   
 104af20:	lea    rcx,[rdx+0xf8]
 104af27:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6b7a]        # 0x1001aa8
 104af2e:	int3   
 104af2f:	int3   
 104af30:	lea    rcx,[rdx+0x108]
 104af37:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6b6a]        # 0x1001aa8
 104af3e:	int3   
 104af3f:	int3   
 104af40:	lea    rcx,[rdx+0xb0]
 104af47:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6b5a]        # 0x1001aa8
 104af4e:	int3   
 104af4f:	int3   
 104af50:	lea    rcx,[rdx+0xc0]
 104af57:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6b4a]        # 0x1001aa8
 104af5e:	int3   
 104af5f:	int3   
 104af60:	lea    rcx,[rdx+0xd0]
 104af67:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6b3a]        # 0x1001aa8
 104af6e:	int3   
 104af6f:	int3   
 104af70:	lea    rcx,[rdx+0xe0]
 104af77:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6b2a]        # 0x1001aa8
 104af7e:	int3   
 104af7f:	int3   
 104af80:	lea    rcx,[rdx+0xf0]
 104af87:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6b1a]        # 0x1001aa8
 104af8e:	int3   
 104af8f:	int3   
 104af90:	lea    rcx,[rdx+0x100]
 104af97:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6b0a]        # 0x1001aa8
 104af9e:	int3   
 104af9f:	int3   
 104afa0:	lea    rcx,[rdx+0x110]
 104afa7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6afa]        # 0x1001aa8
 104afae:	int3   
 104afaf:	int3   
 104afb0:	lea    rcx,[rdx+0x120]
 104afb7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6aea]        # 0x1001aa8
 104afbe:	int3   
 104afbf:	int3   
 104afc0:	lea    rcx,[rdx+0x130]
 104afc7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6ada]        # 0x1001aa8
 104afce:	int3   
 104afcf:	int3   
 104afd0:	lea    rcx,[rdx+0x140]
 104afd7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6aca]        # 0x1001aa8
 104afde:	int3   
 104afdf:	int3   
 104afe0:	lea    rcx,[rdx+0x90]
 104afe7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6aba]        # 0x1001aa8
 104afee:	int3   
 104afef:	int3   
 104aff0:	int3   
 104aff1:	int3   
 104aff2:	int3   
 104aff3:	int3   
 104aff4:	int3   
 104aff5:	int3   
 104aff6:	int3   
 104aff7:	int3   
 104aff8:	int3   
 104aff9:	int3   
 104affa:	int3   
 104affb:	int3   
 104affc:	int3   
 104affd:	int3   
 104affe:	int3   
 104afff:	int3   
 104b000:	mov    rcx,QWORD PTR [rdx+0x50]
 104b007:	jmp    0x100ebf0
 104b00c:	int3   
 104b00d:	int3   
 104b00e:	int3   
 104b00f:	int3   
 104b010:	mov    rcx,QWORD PTR [rdx+0x50]
 104b017:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6a8a]        # 0x1001aa8
 104b01e:	int3   
 104b01f:	int3   
 104b020:	mov    rcx,QWORD PTR [rdx+0x50]
 104b027:	add    rcx,0x8
 104b02b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6a76]        # 0x1001aa8
 104b032:	int3   
 104b033:	int3   
 104b034:	int3   
 104b035:	int3   
 104b036:	int3   
 104b037:	int3   
 104b038:	int3   
 104b039:	int3   
 104b03a:	int3   
 104b03b:	int3   
 104b03c:	int3   
 104b03d:	int3   
 104b03e:	int3   
 104b03f:	int3   
 104b040:	rex push rbp
 104b042:	sub    rsp,0x20
 104b046:	mov    rbp,rdx
 104b049:	mov    r9,QWORD PTR [rip+0xfffffffffffb6a58]        # 0x1001aa8
 104b050:	mov    r8d,0x1
 104b056:	mov    edx,0x8
 104b05b:	lea    rcx,[rbp+0x70]
 104b05f:	call   0x1040094
 104b064:	add    rsp,0x20
 104b068:	pop    rbp
 104b069:	ret    
 104b06a:	int3   
 104b06b:	int3   
 104b06c:	int3   
 104b06d:	int3   
 104b06e:	int3   
 104b06f:	int3   
 104b070:	rex push rbp
 104b072:	sub    rsp,0x20
 104b076:	mov    rbp,rdx
 104b079:	mov    r9,QWORD PTR [rip+0xfffffffffffb6a28]        # 0x1001aa8
 104b080:	mov    r8d,0x1
 104b086:	mov    edx,0x8
 104b08b:	lea    rcx,[rbp+0x68]
 104b08f:	call   0x1040094
 104b094:	add    rsp,0x20
 104b098:	pop    rbp
 104b099:	ret    
 104b09a:	int3   
 104b09b:	int3   
 104b09c:	int3   
 104b09d:	int3   
 104b09e:	int3   
 104b09f:	int3   
 104b0a0:	mov    rcx,QWORD PTR [rdx+0x50]
 104b0a7:	add    rcx,0x10
 104b0ab:	rex.W jmp QWORD PTR [rip+0xfffffffffffb69f6]        # 0x1001aa8
 104b0b2:	int3   
 104b0b3:	int3   
 104b0b4:	int3   
 104b0b5:	int3   
 104b0b6:	int3   
 104b0b7:	int3   
 104b0b8:	int3   
 104b0b9:	int3   
 104b0ba:	int3   
 104b0bb:	int3   
 104b0bc:	int3   
 104b0bd:	int3   
 104b0be:	int3   
 104b0bf:	int3   
 104b0c0:	mov    rcx,QWORD PTR [rdx+0x50]
 104b0c7:	add    rcx,0x20
 104b0cb:	rex.W jmp QWORD PTR [rip+0xfffffffffffb69d6]        # 0x1001aa8
 104b0d2:	int3   
 104b0d3:	int3   
 104b0d4:	int3   
 104b0d5:	int3   
 104b0d6:	int3   
 104b0d7:	int3   
 104b0d8:	int3   
 104b0d9:	int3   
 104b0da:	int3   
 104b0db:	int3   
 104b0dc:	int3   
 104b0dd:	int3   
 104b0de:	int3   
 104b0df:	int3   
 104b0e0:	mov    rcx,QWORD PTR [rdx+0x40]
 104b0e7:	add    rcx,0x10
 104b0eb:	rex.W jmp QWORD PTR [rip+0xfffffffffffb69b6]        # 0x1001aa8
 104b0f2:	int3   
 104b0f3:	int3   
 104b0f4:	int3   
 104b0f5:	int3   
 104b0f6:	int3   
 104b0f7:	int3   
 104b0f8:	int3   
 104b0f9:	int3   
 104b0fa:	int3   
 104b0fb:	int3   
 104b0fc:	int3   
 104b0fd:	int3   
 104b0fe:	int3   
 104b0ff:	int3   
 104b100:	mov    rcx,QWORD PTR [rdx+0x40]
 104b107:	add    rcx,0x20
 104b10b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb6996]        # 0x1001aa8
 104b112:	int3   
 104b113:	int3   
 104b114:	int3   
 104b115:	int3   
 104b116:	int3   
 104b117:	int3   
 104b118:	int3   
 104b119:	int3   
 104b11a:	int3   
 104b11b:	int3   
 104b11c:	int3   
 104b11d:	int3   
 104b11e:	int3   
 104b11f:	int3   
 104b120:	lea    rcx,[rdx+0x38]
 104b127:	rex.W jmp QWORD PTR [rip+0xfffffffffffb697a]        # 0x1001aa8
 104b12e:	int3   
 104b12f:	int3   
 104b130:	rex push rbp
 104b132:	sub    rsp,0x20
 104b136:	mov    rbp,rdx
 104b139:	mov    eax,DWORD PTR [rbp+0x30]
 104b13c:	and    eax,0x1
 104b13f:	test   eax,eax
 104b141:	je     0x104b151
 104b143:	and    DWORD PTR [rbp+0x30],0xfffffffe
 104b147:	mov    rcx,QWORD PTR [rbp+0x48]
 104b14b:	call   QWORD PTR [rip+0xfffffffffffb6957]        # 0x1001aa8
 104b151:	add    rsp,0x20
 104b155:	pop    rbp
 104b156:	ret    
 104b157:	int3   
 104b158:	int3   
 104b159:	int3   
 104b15a:	int3   
 104b15b:	int3   
 104b15c:	int3   
 104b15d:	int3   
 104b15e:	int3   
 104b15f:	int3   
 104b160:	lea    rcx,[rdx+0x40]
 104b167:	rex.W jmp QWORD PTR [rip+0xfffffffffffb693a]        # 0x1001aa8
 104b16e:	int3   
 104b16f:	int3   
 104b170:	int3   
 104b171:	int3   
 104b172:	int3   
 104b173:	int3   
 104b174:	int3   
 104b175:	int3   
 104b176:	int3   
 104b177:	int3   
 104b178:	int3   
 104b179:	int3   
 104b17a:	int3   
 104b17b:	int3   
 104b17c:	int3   
 104b17d:	int3   
 104b17e:	int3   
 104b17f:	int3   
 104b180:	rex push rbp
 104b182:	sub    rsp,0x20
 104b186:	mov    rbp,rdx
 104b189:	mov    eax,DWORD PTR [rbp+0x20]
 104b18c:	and    eax,0x1
 104b18f:	test   eax,eax
 104b191:	je     0x104b1a1
 104b193:	and    DWORD PTR [rbp+0x20],0xfffffffe
 104b197:	mov    rcx,QWORD PTR [rbp+0x48]
 104b19b:	call   QWORD PTR [rip+0xfffffffffffb6907]        # 0x1001aa8
 104b1a1:	add    rsp,0x20
 104b1a5:	pop    rbp
 104b1a6:	ret    
 104b1a7:	int3   
 104b1a8:	int3   
 104b1a9:	int3   
 104b1aa:	int3   
 104b1ab:	int3   
 104b1ac:	int3   
 104b1ad:	int3   
 104b1ae:	int3   
 104b1af:	int3   
 104b1b0:	lea    rcx,[rdx+0x50]
 104b1b7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb68ea]        # 0x1001aa8
 104b1be:	int3   
 104b1bf:	int3   
 104b1c0:	lea    rcx,[rdx+0x20]
 104b1c7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb68da]        # 0x1001aa8
 104b1ce:	int3   
 104b1cf:	int3   
 104b1d0:	mov    rcx,QWORD PTR [rdx+0x30]
 104b1d7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb68ca]        # 0x1001aa8
 104b1de:	int3   
 104b1df:	int3   
 104b1e0:	int3   
 104b1e1:	int3   
 104b1e2:	int3   
 104b1e3:	int3   
 104b1e4:	int3   
 104b1e5:	int3   
 104b1e6:	int3   
 104b1e7:	int3   
 104b1e8:	int3   
 104b1e9:	int3   
 104b1ea:	int3   
 104b1eb:	int3   
 104b1ec:	int3   
 104b1ed:	int3   
 104b1ee:	int3   
 104b1ef:	int3   
 104b1f0:	mov    rcx,QWORD PTR [rdx+0x90]
 104b1f7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb68aa]        # 0x1001aa8
 104b1fe:	int3   
 104b1ff:	int3   
 104b200:	lea    rcx,[rdx+0x40]
 104b207:	rex.W jmp QWORD PTR [rip+0xfffffffffffb689a]        # 0x1001aa8
 104b20e:	int3   
 104b20f:	int3   
 104b210:	lea    rcx,[rdx+0x48]
 104b217:	rex.W jmp QWORD PTR [rip+0xfffffffffffb688a]        # 0x1001aa8
 104b21e:	int3   
 104b21f:	int3   
 104b220:	int3   
 104b221:	int3   
 104b222:	int3   
 104b223:	int3   
 104b224:	int3   
 104b225:	int3   
 104b226:	int3   
 104b227:	int3   
 104b228:	int3   
 104b229:	int3   
 104b22a:	int3   
 104b22b:	int3   
 104b22c:	int3   
 104b22d:	int3   
 104b22e:	int3   
 104b22f:	int3   
 104b230:	rex push rbp
 104b232:	sub    rsp,0x20
 104b236:	mov    rbp,rdx
 104b239:	mov    eax,DWORD PTR [rbp+0x40]
 104b23c:	and    eax,0x1
 104b23f:	test   eax,eax
 104b241:	je     0x104b251
 104b243:	and    DWORD PTR [rbp+0x40],0xfffffffe
 104b247:	mov    rcx,QWORD PTR [rbp+0x60]
 104b24b:	call   QWORD PTR [rip+0xfffffffffffb6857]        # 0x1001aa8
 104b251:	add    rsp,0x20
 104b255:	pop    rbp
 104b256:	ret    
 104b257:	int3   
 104b258:	int3   
 104b259:	int3   
 104b25a:	int3   
 104b25b:	int3   
 104b25c:	int3   
 104b25d:	int3   
 104b25e:	int3   
 104b25f:	int3   
 104b260:	lea    rcx,[rdx+0x70]
 104b267:	rex.W jmp QWORD PTR [rip+0xfffffffffffb683a]        # 0x1001aa8
 104b26e:	int3   
 104b26f:	int3   
 104b270:	int3   
 104b271:	int3   
 104b272:	int3   
 104b273:	int3   
 104b274:	int3   
 104b275:	int3   
 104b276:	int3   
 104b277:	int3   
 104b278:	int3   
 104b279:	int3   
 104b27a:	int3   
 104b27b:	int3   
 104b27c:	int3   
 104b27d:	int3   
 104b27e:	int3   
 104b27f:	int3   
 104b280:	rex push rbp
 104b282:	sub    rsp,0x40
 104b286:	mov    rbp,rdx
 104b289:	mov    rcx,QWORD PTR [rbp+0x50]
 104b28d:	test   rcx,rcx
 104b290:	je     0x104b299
 104b292:	call   QWORD PTR [rip+0xfffffffffffb5fa8]        # 0x1001240
 104b298:	nop
 104b299:	add    rsp,0x40
 104b29d:	pop    rbp
 104b29e:	ret    
 104b29f:	int3   
 104b2a0:	int3   
 104b2a1:	int3   
 104b2a2:	int3   
 104b2a3:	int3   
 104b2a4:	int3   
 104b2a5:	int3   
 104b2a6:	int3   
 104b2a7:	int3   
 104b2a8:	int3   
 104b2a9:	int3   
 104b2aa:	int3   
 104b2ab:	int3   
 104b2ac:	int3   
 104b2ad:	int3   
 104b2ae:	int3   
 104b2af:	int3   
 104b2b0:	lea    rcx,[rdx+0x68]
 104b2b7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb67ea]        # 0x1001aa8
 104b2be:	int3   
 104b2bf:	int3   
 104b2c0:	mov    QWORD PTR [rsp+0x10],rdx
 104b2c5:	push   rbp
 104b2c6:	sub    rsp,0x40
 104b2ca:	mov    rbp,rdx
 104b2cd:	mov    BYTE PTR [rbp+0x40],0x0
 104b2d1:	lea    rax,[rip+0xfffffffffffcb31a]        # 0x10165f2
 104b2d8:	add    rsp,0x40
 104b2dc:	pop    rbp
 104b2dd:	ret    
 104b2de:	int3   
 104b2df:	int3   
 104b2e0:	int3   
 104b2e1:	int3   
 104b2e2:	int3   
 104b2e3:	int3   
 104b2e4:	int3   
 104b2e5:	int3   
 104b2e6:	int3   
 104b2e7:	int3   
 104b2e8:	int3   
 104b2e9:	int3   
 104b2ea:	int3   
 104b2eb:	int3   
 104b2ec:	int3   
 104b2ed:	int3   
 104b2ee:	int3   
 104b2ef:	int3   
 104b2f0:	lea    rcx,[rdx+0xb8]
 104b2f7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb67aa]        # 0x1001aa8
 104b2fe:	int3   
 104b2ff:	int3   
 104b300:	lea    rcx,[rdx+0x78]
 104b307:	rex.W jmp QWORD PTR [rip+0xfffffffffffb679a]        # 0x1001aa8
 104b30e:	int3   
 104b30f:	int3   
 104b310:	lea    rcx,[rdx+0x90]
 104b317:	rex.W jmp QWORD PTR [rip+0xfffffffffffb678a]        # 0x1001aa8
 104b31e:	int3   
 104b31f:	int3   
 104b320:	lea    rcx,[rdx+0x98]
 104b327:	rex.W jmp QWORD PTR [rip+0xfffffffffffb677a]        # 0x1001aa8
 104b32e:	int3   
 104b32f:	int3   
 104b330:	lea    rcx,[rdx+0x78]
 104b337:	rex.W jmp QWORD PTR [rip+0xfffffffffffb676a]        # 0x1001aa8
 104b33e:	int3   
 104b33f:	int3   
 104b340:	lea    rcx,[rdx+0xb0]
 104b347:	rex.W jmp QWORD PTR [rip+0xfffffffffffb675a]        # 0x1001aa8
 104b34e:	int3   
 104b34f:	int3   
 104b350:	lea    rcx,[rdx+0x88]
 104b357:	rex.W jmp QWORD PTR [rip+0xfffffffffffb674a]        # 0x1001aa8
 104b35e:	int3   
 104b35f:	int3   
 104b360:	lea    rcx,[rdx+0xa0]
 104b367:	rex.W jmp QWORD PTR [rip+0xfffffffffffb673a]        # 0x1001aa8
 104b36e:	int3   
 104b36f:	int3   
 104b370:	mov    rcx,QWORD PTR [rdx+0xa8]
 104b377:	jmp    0x103f95a
 104b37c:	int3   
 104b37d:	int3   
 104b37e:	int3   
 104b37f:	int3   
 104b380:	mov    rcx,QWORD PTR [rdx+0xa8]
 104b387:	jmp    0x103f95a
 104b38c:	int3   
 104b38d:	int3   
 104b38e:	int3   
 104b38f:	int3   
 104b390:	lea    rcx,[rdx+0x78]
 104b397:	rex.W jmp QWORD PTR [rip+0xfffffffffffb670a]        # 0x1001aa8
 104b39e:	int3   
 104b39f:	int3   
 104b3a0:	mov    rcx,QWORD PTR [rdx+0xa8]
 104b3a7:	jmp    0x103f95a
 104b3ac:	int3   
 104b3ad:	int3   
 104b3ae:	int3   
 104b3af:	int3   
 104b3b0:	mov    QWORD PTR [rsp+0x10],rdx
 104b3b5:	push   rbx
 104b3b6:	push   rbp
 104b3b7:	push   rdi
 104b3b8:	sub    rsp,0x70
 104b3bc:	mov    rbp,rdx
 104b3bf:	mov    rdi,QWORD PTR [rbp+0x138]
 104b3c6:	mov    rbx,QWORD PTR [rdi]
 104b3c9:	test   rbx,rbx
 104b3cc:	je     0x104b3e5
 104b3ce:	mov    rcx,rbx
 104b3d1:	call   0x103e210
 104b3d6:	mov    rcx,rbx
 104b3d9:	call   0x103f95a
 104b3de:	mov    QWORD PTR [rdi],0x0
 104b3e5:	lea    rcx,[rbp+0xc8]
 104b3ec:	call   QWORD PTR [rip+0xfffffffffffb66b6]        # 0x1001aa8
 104b3f2:	nop
 104b3f3:	lea    rax,[rip+0xfffffffffffd0066]        # 0x101b460
 104b3fa:	add    rsp,0x70
 104b3fe:	pop    rdi
 104b3ff:	pop    rbp
 104b400:	pop    rbx
 104b401:	ret    
 104b402:	int3   
 104b403:	int3   
 104b404:	int3   
 104b405:	int3   
 104b406:	int3   
 104b407:	int3   
 104b408:	int3   
 104b409:	int3   
 104b40a:	int3   
 104b40b:	int3   
 104b40c:	int3   
 104b40d:	int3   
 104b40e:	int3   
 104b40f:	int3   
 104b410:	lea    rcx,[rdx+0xc8]
 104b417:	rex.W jmp QWORD PTR [rip+0xfffffffffffb668a]        # 0x1001aa8
 104b41e:	int3   
 104b41f:	int3   
 104b420:	int3   
 104b421:	int3   
 104b422:	int3   
 104b423:	int3   
 104b424:	int3   
 104b425:	int3   
 104b426:	int3   
 104b427:	int3   
 104b428:	int3   
 104b429:	int3   
 104b42a:	int3   
 104b42b:	int3   
 104b42c:	int3   
 104b42d:	int3   
 104b42e:	int3   
 104b42f:	int3   
 104b430:	lea    rcx,[rdx+0xb8]
 104b437:	rex.W jmp QWORD PTR [rip+0xfffffffffffb666a]        # 0x1001aa8
 104b43e:	int3   
 104b43f:	int3   
 104b440:	lea    rcx,[rdx+0x50]
 104b447:	rex.W jmp QWORD PTR [rip+0xfffffffffffb665a]        # 0x1001aa8
 104b44e:	int3   
 104b44f:	int3   
 104b450:	lea    rcx,[rdx+0x58]
 104b457:	rex.W jmp QWORD PTR [rip+0xfffffffffffb664a]        # 0x1001aa8
 104b45e:	int3   
 104b45f:	int3   
 104b460:	lea    rcx,[rdx+0x48]
 104b467:	rex.W jmp QWORD PTR [rip+0xfffffffffffb663a]        # 0x1001aa8
 104b46e:	int3   
 104b46f:	int3   
 104b470:	rex push rbp
 104b472:	sub    rsp,0x20
 104b476:	mov    rbp,rdx
 104b479:	mov    eax,DWORD PTR [rbp+0x40]
 104b47c:	and    eax,0x1
 104b47f:	test   eax,eax
 104b481:	je     0x104b494
 104b483:	and    DWORD PTR [rbp+0x40],0xfffffffe
 104b487:	mov    rcx,QWORD PTR [rbp+0xa8]
 104b48e:	call   QWORD PTR [rip+0xfffffffffffb6614]        # 0x1001aa8
 104b494:	add    rsp,0x20
 104b498:	pop    rbp
 104b499:	ret    
 104b49a:	int3   
 104b49b:	int3   
 104b49c:	int3   
 104b49d:	int3   
 104b49e:	int3   
 104b49f:	int3   
 104b4a0:	lea    rcx,[rdx+0x68]
 104b4a7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb65fa]        # 0x1001aa8
 104b4ae:	int3   
 104b4af:	int3   
 104b4b0:	lea    rcx,[rdx+0x60]
 104b4b7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb65ea]        # 0x1001aa8
 104b4be:	int3   
 104b4bf:	int3   
 104b4c0:	lea    rcx,[rdx+0x68]
 104b4c7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb65da]        # 0x1001aa8
 104b4ce:	int3   
 104b4cf:	int3   
 104b4d0:	lea    rcx,[rdx+0x68]
 104b4d7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb65ca]        # 0x1001aa8
 104b4de:	int3   
 104b4df:	int3   
 104b4e0:	lea    rcx,[rdx+0x60]
 104b4e7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb65ba]        # 0x1001aa8
 104b4ee:	int3   
 104b4ef:	int3   
 104b4f0:	lea    rcx,[rdx+0x68]
 104b4f7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb65aa]        # 0x1001aa8
 104b4fe:	int3   
 104b4ff:	int3   
 104b500:	lea    rcx,[rdx+0x68]
 104b507:	rex.W jmp QWORD PTR [rip+0xfffffffffffb659a]        # 0x1001aa8
 104b50e:	int3   
 104b50f:	int3   
 104b510:	lea    rcx,[rdx+0x68]
 104b517:	rex.W jmp QWORD PTR [rip+0xfffffffffffb658a]        # 0x1001aa8
 104b51e:	int3   
 104b51f:	int3   
 104b520:	lea    rcx,[rdx+0x68]
 104b527:	rex.W jmp QWORD PTR [rip+0xfffffffffffb657a]        # 0x1001aa8
 104b52e:	int3   
 104b52f:	int3   
 104b530:	lea    rcx,[rdx+0x68]
 104b537:	rex.W jmp QWORD PTR [rip+0xfffffffffffb656a]        # 0x1001aa8
 104b53e:	int3   
 104b53f:	int3   
 104b540:	lea    rcx,[rdx+0x68]
 104b547:	rex.W jmp QWORD PTR [rip+0xfffffffffffb655a]        # 0x1001aa8
 104b54e:	int3   
 104b54f:	int3   
 104b550:	lea    rcx,[rdx+0x70]
 104b557:	rex.W jmp QWORD PTR [rip+0xfffffffffffb654a]        # 0x1001aa8
 104b55e:	int3   
 104b55f:	int3   
 104b560:	lea    rcx,[rdx+0x60]
 104b567:	rex.W jmp QWORD PTR [rip+0xfffffffffffb653a]        # 0x1001aa8
 104b56e:	int3   
 104b56f:	int3   
 104b570:	lea    rcx,[rdx+0x68]
 104b577:	rex.W jmp QWORD PTR [rip+0xfffffffffffb652a]        # 0x1001aa8
 104b57e:	int3   
 104b57f:	int3   
 104b580:	lea    rcx,[rdx+0x70]
 104b587:	rex.W jmp QWORD PTR [rip+0xfffffffffffb651a]        # 0x1001aa8
 104b58e:	int3   
 104b58f:	int3   
 104b590:	mov    QWORD PTR [rsp+0x10],rdx
 104b595:	push   rbp
 104b596:	sub    rsp,0x40
 104b59a:	mov    rbp,rdx
 104b59d:	lea    rdx,[rip+0xfffffffffffb686c]        # 0x1001e10
 104b5a4:	lea    rcx,[rbp+0x48]
 104b5a8:	call   QWORD PTR [rip+0xfffffffffffb64ea]        # 0x1001a98
 104b5ae:	nop
 104b5af:	lea    rax,[rip+0xfffffffffffd402b]        # 0x101f5e1
 104b5b6:	add    rsp,0x40
 104b5ba:	pop    rbp
 104b5bb:	ret    
 104b5bc:	int3   
 104b5bd:	int3   
 104b5be:	int3   
 104b5bf:	int3   
 104b5c0:	int3   
 104b5c1:	int3   
 104b5c2:	int3   
 104b5c3:	int3   
 104b5c4:	int3   
 104b5c5:	int3   
 104b5c6:	int3   
 104b5c7:	int3   
 104b5c8:	int3   
 104b5c9:	int3   
 104b5ca:	int3   
 104b5cb:	int3   
 104b5cc:	int3   
 104b5cd:	int3   
 104b5ce:	int3   
 104b5cf:	int3   
 104b5d0:	rex push rbp
 104b5d2:	sub    rsp,0x20
 104b5d6:	mov    rbp,rdx
 104b5d9:	mov    eax,DWORD PTR [rbp+0x40]
 104b5dc:	and    eax,0x1
 104b5df:	test   eax,eax
 104b5e1:	je     0x104b5f1
 104b5e3:	and    DWORD PTR [rbp+0x40],0xfffffffe
 104b5e7:	mov    rcx,QWORD PTR [rbp+0x68]
 104b5eb:	call   QWORD PTR [rip+0xfffffffffffb64b7]        # 0x1001aa8
 104b5f1:	add    rsp,0x20
 104b5f5:	pop    rbp
 104b5f6:	ret    
 104b5f7:	int3   
 104b5f8:	int3   
 104b5f9:	int3   
 104b5fa:	int3   
 104b5fb:	int3   
 104b5fc:	int3   
 104b5fd:	int3   
 104b5fe:	int3   
 104b5ff:	int3   
 104b600:	mov    QWORD PTR [rsp+0x10],rdx
 104b605:	push   rbp
 104b606:	sub    rsp,0x40
 104b60a:	mov    rbp,rdx
 104b60d:	lea    rax,[rip+0xfffffffffffdd187]        # 0x102879b
 104b614:	add    rsp,0x40
 104b618:	pop    rbp
 104b619:	ret    
 104b61a:	int3   
 104b61b:	int3   
 104b61c:	int3   
 104b61d:	int3   
 104b61e:	int3   
 104b61f:	int3   
 104b620:	int3   
 104b621:	int3   
 104b622:	int3   
 104b623:	int3   
 104b624:	int3   
 104b625:	int3   
 104b626:	int3   
 104b627:	int3   
 104b628:	int3   
 104b629:	int3   
 104b62a:	int3   
 104b62b:	int3   
 104b62c:	int3   
 104b62d:	int3   
 104b62e:	int3   
 104b62f:	int3   
 104b630:	lea    rcx,[rdx+0x78]
 104b637:	rex.W jmp QWORD PTR [rip+0xfffffffffffb646a]        # 0x1001aa8
 104b63e:	int3   
 104b63f:	int3   
 104b640:	lea    rcx,[rdx+0x80]
 104b647:	rex.W jmp QWORD PTR [rip+0xfffffffffffb645a]        # 0x1001aa8
 104b64e:	int3   
 104b64f:	int3   
 104b650:	lea    rcx,[rdx+0x428]
 104b657:	rex.W jmp QWORD PTR [rip+0xfffffffffffb644a]        # 0x1001aa8
 104b65e:	int3   
 104b65f:	int3   
 104b660:	lea    rcx,[rdx+0xa8]
 104b667:	jmp    0x102dde0
 104b66c:	int3   
 104b66d:	int3   
 104b66e:	int3   
 104b66f:	int3   
 104b670:	lea    rcx,[rdx+0xa0]
 104b677:	jmp    0x102dde0
 104b67c:	int3   
 104b67d:	int3   
 104b67e:	int3   
 104b67f:	int3   
 104b680:	lea    rcx,[rdx+0x128]
 104b687:	rex.W jmp QWORD PTR [rip+0xfffffffffffb641a]        # 0x1001aa8
 104b68e:	int3   
 104b68f:	int3   
 104b690:	lea    rcx,[rdx+0x430]
 104b697:	rex.W jmp QWORD PTR [rip+0xfffffffffffb640a]        # 0x1001aa8
 104b69e:	int3   
 104b69f:	int3   
 104b6a0:	lea    rcx,[rdx+0x2f8]
 104b6a7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb63fa]        # 0x1001aa8
 104b6ae:	int3   
 104b6af:	int3   
 104b6b0:	lea    rcx,[rdx+0x308]
 104b6b7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb63ea]        # 0x1001aa8
 104b6be:	int3   
 104b6bf:	int3   
 104b6c0:	lea    rcx,[rdx+0x440]
 104b6c7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb63da]        # 0x1001aa8
 104b6ce:	int3   
 104b6cf:	int3   
 104b6d0:	lea    rcx,[rdx+0x158]
 104b6d7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb63ca]        # 0x1001aa8
 104b6de:	int3   
 104b6df:	int3   
 104b6e0:	lea    rcx,[rdx+0x140]
 104b6e7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb63ba]        # 0x1001aa8
 104b6ee:	int3   
 104b6ef:	int3   
 104b6f0:	lea    rcx,[rdx+0x318]
 104b6f7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb63aa]        # 0x1001aa8
 104b6fe:	int3   
 104b6ff:	int3   
 104b700:	lea    rcx,[rdx+0xf8]
 104b707:	rex.W jmp QWORD PTR [rip+0xfffffffffffb639a]        # 0x1001aa8
 104b70e:	int3   
 104b70f:	int3   
 104b710:	lea    rcx,[rdx+0x450]
 104b717:	rex.W jmp QWORD PTR [rip+0xfffffffffffb638a]        # 0x1001aa8
 104b71e:	int3   
 104b71f:	int3   
 104b720:	lea    rcx,[rdx+0x328]
 104b727:	rex.W jmp QWORD PTR [rip+0xfffffffffffb637a]        # 0x1001aa8
 104b72e:	int3   
 104b72f:	int3   
 104b730:	lea    rcx,[rdx+0x118]
 104b737:	rex.W jmp QWORD PTR [rip+0xfffffffffffb636a]        # 0x1001aa8
 104b73e:	int3   
 104b73f:	int3   
 104b740:	lea    rcx,[rdx+0x460]
 104b747:	rex.W jmp QWORD PTR [rip+0xfffffffffffb635a]        # 0x1001aa8
 104b74e:	int3   
 104b74f:	int3   
 104b750:	lea    rcx,[rdx+0x338]
 104b757:	rex.W jmp QWORD PTR [rip+0xfffffffffffb634a]        # 0x1001aa8
 104b75e:	int3   
 104b75f:	int3   
 104b760:	lea    rcx,[rdx+0x1e0]
 104b767:	rex.W jmp QWORD PTR [rip+0xfffffffffffb633a]        # 0x1001aa8
 104b76e:	int3   
 104b76f:	int3   
 104b770:	lea    rcx,[rdx+0x470]
 104b777:	rex.W jmp QWORD PTR [rip+0xfffffffffffb632a]        # 0x1001aa8
 104b77e:	int3   
 104b77f:	int3   
 104b780:	mov    rcx,QWORD PTR [rdx+0x5e8]
 104b787:	rex.W jmp QWORD PTR [rip+0xfffffffffffb631a]        # 0x1001aa8
 104b78e:	int3   
 104b78f:	int3   
 104b790:	lea    rcx,[rdx+0x480]
 104b797:	rex.W jmp QWORD PTR [rip+0xfffffffffffb630a]        # 0x1001aa8
 104b79e:	int3   
 104b79f:	int3   
 104b7a0:	lea    rcx,[rdx+0x358]
 104b7a7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb62fa]        # 0x1001aa8
 104b7ae:	int3   
 104b7af:	int3   
 104b7b0:	lea    rcx,[rdx+0x188]
 104b7b7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb62ea]        # 0x1001aa8
 104b7be:	int3   
 104b7bf:	int3   
 104b7c0:	rex push rbp
 104b7c2:	sub    rsp,0x20
 104b7c6:	mov    rbp,rdx
 104b7c9:	mov    eax,DWORD PTR [rbp+0x168]
 104b7cf:	and    eax,0x1
 104b7d2:	test   eax,eax
 104b7d4:	je     0x104b7ea
 104b7d6:	and    DWORD PTR [rbp+0x168],0xfffffffe
 104b7dd:	lea    rcx,[rbp+0x490]
 104b7e4:	call   QWORD PTR [rip+0xfffffffffffb62be]        # 0x1001aa8
 104b7ea:	add    rsp,0x20
 104b7ee:	pop    rbp
 104b7ef:	ret    
 104b7f0:	lea    rcx,[rdx+0x4a0]
 104b7f7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb62aa]        # 0x1001aa8
 104b7fe:	int3   
 104b7ff:	int3   
 104b800:	lea    rcx,[rdx+0x270]
 104b807:	rex.W jmp QWORD PTR [rip+0xfffffffffffb629a]        # 0x1001aa8
 104b80e:	int3   
 104b80f:	int3   
 104b810:	lea    rcx,[rdx+0x370]
 104b817:	rex.W jmp QWORD PTR [rip+0xfffffffffffb628a]        # 0x1001aa8
 104b81e:	int3   
 104b81f:	int3   
 104b820:	lea    rcx,[rdx+0x420]
 104b827:	rex.W jmp QWORD PTR [rip+0xfffffffffffb627a]        # 0x1001aa8
 104b82e:	int3   
 104b82f:	int3   
 104b830:	lea    rcx,[rdx+0x2e8]
 104b837:	rex.W jmp QWORD PTR [rip+0xfffffffffffb626a]        # 0x1001aa8
 104b83e:	int3   
 104b83f:	int3   
 104b840:	lea    rcx,[rdx+0x120]
 104b847:	rex.W jmp QWORD PTR [rip+0xfffffffffffb625a]        # 0x1001aa8
 104b84e:	int3   
 104b84f:	int3   
 104b850:	lea    rcx,[rdx+0x4a8]
 104b857:	rex.W jmp QWORD PTR [rip+0xfffffffffffb624a]        # 0x1001aa8
 104b85e:	int3   
 104b85f:	int3   
 104b860:	lea    rcx,[rdx+0x390]
 104b867:	rex.W jmp QWORD PTR [rip+0xfffffffffffb623a]        # 0x1001aa8
 104b86e:	int3   
 104b86f:	int3   
 104b870:	lea    rcx,[rdx+0x170]
 104b877:	rex.W jmp QWORD PTR [rip+0xfffffffffffb622a]        # 0x1001aa8
 104b87e:	int3   
 104b87f:	int3   
 104b880:	lea    rcx,[rdx+0x1d0]
 104b887:	rex.W jmp QWORD PTR [rip+0xfffffffffffb621a]        # 0x1001aa8
 104b88e:	int3   
 104b88f:	int3   
 104b890:	lea    rcx,[rdx+0x438]
 104b897:	rex.W jmp QWORD PTR [rip+0xfffffffffffb620a]        # 0x1001aa8
 104b89e:	int3   
 104b89f:	int3   
 104b8a0:	mov    rcx,QWORD PTR [rdx+0x5b0]
 104b8a7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb61fa]        # 0x1001aa8
 104b8ae:	int3   
 104b8af:	int3   
 104b8b0:	lea    rcx,[rdx+0x488]
 104b8b7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb61ea]        # 0x1001aa8
 104b8be:	int3   
 104b8bf:	int3   
 104b8c0:	lea    rcx,[rdx+0x1f0]
 104b8c7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb61da]        # 0x1001aa8
 104b8ce:	int3   
 104b8cf:	int3   
 104b8d0:	lea    rcx,[rdx+0x448]
 104b8d7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb61ca]        # 0x1001aa8
 104b8de:	int3   
 104b8df:	int3   
 104b8e0:	lea    rcx,[rdx+0x3b0]
 104b8e7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb61ba]        # 0x1001aa8
 104b8ee:	int3   
 104b8ef:	int3   
 104b8f0:	mov    rcx,QWORD PTR [rdx+0x528]
 104b8f7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb61aa]        # 0x1001aa8
 104b8fe:	int3   
 104b8ff:	int3   
 104b900:	lea    rcx,[rdx+0x4c8]
 104b907:	rex.W jmp QWORD PTR [rip+0xfffffffffffb619a]        # 0x1001aa8
 104b90e:	int3   
 104b90f:	int3   
 104b910:	lea    rcx,[rdx+0x1f8]
 104b917:	rex.W jmp QWORD PTR [rip+0xfffffffffffb618a]        # 0x1001aa8
 104b91e:	int3   
 104b91f:	int3   
 104b920:	lea    rcx,[rdx+0x498]
 104b927:	rex.W jmp QWORD PTR [rip+0xfffffffffffb617a]        # 0x1001aa8
 104b92e:	int3   
 104b92f:	int3   
 104b930:	lea    rcx,[rdx+0x3e0]
 104b937:	rex.W jmp QWORD PTR [rip+0xfffffffffffb616a]        # 0x1001aa8
 104b93e:	int3   
 104b93f:	int3   
 104b940:	lea    rcx,[rdx+0x458]
 104b947:	rex.W jmp QWORD PTR [rip+0xfffffffffffb615a]        # 0x1001aa8
 104b94e:	int3   
 104b94f:	int3   
 104b950:	lea    rcx,[rdx+0xc8]
 104b957:	rex.W jmp QWORD PTR [rip+0xfffffffffffb614a]        # 0x1001aa8
 104b95e:	int3   
 104b95f:	int3   
 104b960:	lea    rcx,[rdx+0xc0]
 104b967:	rex.W jmp QWORD PTR [rip+0xfffffffffffb613a]        # 0x1001aa8
 104b96e:	int3   
 104b96f:	int3   
 104b970:	lea    rcx,[rdx+0x90]
 104b977:	rex.W jmp QWORD PTR [rip+0xfffffffffffb612a]        # 0x1001aa8
 104b97e:	int3   
 104b97f:	int3   
 104b980:	lea    rcx,[rdx+0x3f0]
 104b987:	rex.W jmp QWORD PTR [rip+0xfffffffffffb611a]        # 0x1001aa8
 104b98e:	int3   
 104b98f:	int3   
 104b990:	lea    rcx,[rdx+0x468]
 104b997:	rex.W jmp QWORD PTR [rip+0xfffffffffffb610a]        # 0x1001aa8
 104b99e:	int3   
 104b99f:	int3   
 104b9a0:	lea    rcx,[rdx+0x400]
 104b9a7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb60fa]        # 0x1001aa8
 104b9ae:	int3   
 104b9af:	int3   
 104b9b0:	mov    rcx,QWORD PTR [rdx+0x5c0]
 104b9b7:	jmp    0x103f95a
 104b9bc:	int3   
 104b9bd:	int3   
 104b9be:	int3   
 104b9bf:	int3   
 104b9c0:	mov    rcx,QWORD PTR [rdx+0x548]
 104b9c7:	jmp    0x103f95a
 104b9cc:	int3   
 104b9cd:	int3   
 104b9ce:	int3   
 104b9cf:	int3   
 104b9d0:	lea    rcx,[rdx+0xd8]
 104b9d7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb60ca]        # 0x1001aa8
 104b9de:	int3   
 104b9df:	int3   
 104b9e0:	lea    rcx,[rdx+0x478]
 104b9e7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb60ba]        # 0x1001aa8
 104b9ee:	int3   
 104b9ef:	int3   
 104b9f0:	lea    rcx,[rdx+0x378]
 104b9f7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb60aa]        # 0x1001aa8
 104b9fe:	int3   
 104b9ff:	int3   
 104ba00:	lea    rcx,[rdx+0x368]
 104ba07:	rex.W jmp QWORD PTR [rip+0xfffffffffffb609a]        # 0x1001aa8
 104ba0e:	int3   
 104ba0f:	int3   
 104ba10:	lea    rcx,[rdx+0x360]
 104ba17:	rex.W jmp QWORD PTR [rip+0xfffffffffffb608a]        # 0x1001aa8
 104ba1e:	int3   
 104ba1f:	int3   
 104ba20:	lea    rcx,[rdx+0xe0]
 104ba27:	rex.W jmp QWORD PTR [rip+0xfffffffffffb607a]        # 0x1001aa8
 104ba2e:	int3   
 104ba2f:	int3   
 104ba30:	lea    rcx,[rdx+0x238]
 104ba37:	jmp    0x100c4f0
 104ba3c:	int3   
 104ba3d:	int3   
 104ba3e:	int3   
 104ba3f:	int3   
 104ba40:	lea    rcx,[rdx+0x2b0]
 104ba47:	jmp    0x100c4f0
 104ba4c:	int3   
 104ba4d:	int3   
 104ba4e:	int3   
 104ba4f:	int3   
 104ba50:	lea    rcx,[rdx+0xe8]
 104ba57:	rex.W jmp QWORD PTR [rip+0xfffffffffffb604a]        # 0x1001aa8
 104ba5e:	int3   
 104ba5f:	int3   
 104ba60:	lea    rcx,[rdx+0xb0]
 104ba67:	rex.W jmp QWORD PTR [rip+0xfffffffffffb603a]        # 0x1001aa8
 104ba6e:	int3   
 104ba6f:	int3   
 104ba70:	lea    rcx,[rdx+0x200]
 104ba77:	jmp    0x102f720
 104ba7c:	int3   
 104ba7d:	int3   
 104ba7e:	int3   
 104ba7f:	int3   
 104ba80:	mov    rcx,QWORD PTR [rdx+0x590]
 104ba87:	rex.W jmp QWORD PTR [rip+0xfffffffffffb601a]        # 0x1001aa8
 104ba8e:	int3   
 104ba8f:	int3   
 104ba90:	lea    rcx,[rdx+0xd0]
 104ba97:	jmp    0x102dde0
 104ba9c:	int3   
 104ba9d:	int3   
 104ba9e:	int3   
 104ba9f:	int3   
 104baa0:	lea    rcx,[rdx+0x3a8]
 104baa7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5ffa]        # 0x1001aa8
 104baae:	int3   
 104baaf:	int3   
 104bab0:	lea    rcx,[rdx+0x190]
 104bab7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5fea]        # 0x1001aa8
 104babe:	int3   
 104babf:	int3   
 104bac0:	mov    rcx,QWORD PTR [rdx+0x3d8]
 104bac7:	jmp    0x103f95a
 104bacc:	int3   
 104bacd:	int3   
 104bace:	int3   
 104bacf:	int3   
 104bad0:	mov    rcx,QWORD PTR [rdx+0x5a8]
 104bad7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5fca]        # 0x1001aa8
 104bade:	int3   
 104badf:	int3   
 104bae0:	lea    rcx,[rdx+0x3f8]
 104bae7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5fba]        # 0x1001aa8
 104baee:	int3   
 104baef:	int3   
 104baf0:	lea    rcx,[rdx+0x278]
 104baf7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5faa]        # 0x1001aa8
 104bafe:	int3   
 104baff:	int3   
 104bb00:	lea    rcx,[rdx+0x418]
 104bb07:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5f9a]        # 0x1001aa8
 104bb0e:	int3   
 104bb0f:	int3   
 104bb10:	lea    rcx,[rdx+0x110]
 104bb17:	jmp    0x102dde0
 104bb1c:	int3   
 104bb1d:	int3   
 104bb1e:	int3   
 104bb1f:	int3   
 104bb20:	lea    rcx,[rdx+0x290]
 104bb27:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5f7a]        # 0x1001aa8
 104bb2e:	int3   
 104bb2f:	int3   
 104bb30:	lea    rcx,[rdx+0x290]
 104bb37:	add    rcx,0x8
 104bb3b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5f66]        # 0x1001aa8
 104bb42:	int3   
 104bb43:	int3   
 104bb44:	int3   
 104bb45:	int3   
 104bb46:	int3   
 104bb47:	int3   
 104bb48:	int3   
 104bb49:	int3   
 104bb4a:	int3   
 104bb4b:	int3   
 104bb4c:	int3   
 104bb4d:	int3   
 104bb4e:	int3   
 104bb4f:	int3   
 104bb50:	lea    rcx,[rdx+0x290]
 104bb57:	jmp    0x102cd20
 104bb5c:	int3   
 104bb5d:	int3   
 104bb5e:	int3   
 104bb5f:	int3   
 104bb60:	lea    rcx,[rdx+0x180]
 104bb67:	jmp    0x102dde0
 104bb6c:	int3   
 104bb6d:	int3   
 104bb6e:	int3   
 104bb6f:	int3   
 104bb70:	lea    rcx,[rdx+0x150]
 104bb77:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5f2a]        # 0x1001aa8
 104bb7e:	int3   
 104bb7f:	int3   
 104bb80:	lea    rcx,[rdx+0x4d8]
 104bb87:	jmp    0x100c4f0
 104bb8c:	int3   
 104bb8d:	int3   
 104bb8e:	int3   
 104bb8f:	int3   
 104bb90:	lea    rcx,[rdx+0x2f0]
 104bb97:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5f0a]        # 0x1001aa8
 104bb9e:	int3   
 104bb9f:	int3   
 104bba0:	lea    rcx,[rdx+0x310]
 104bba7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5efa]        # 0x1001aa8
 104bbae:	int3   
 104bbaf:	int3   
 104bbb0:	lea    rcx,[rdx+0x300]
 104bbb7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5eea]        # 0x1001aa8
 104bbbe:	int3   
 104bbbf:	int3   
 104bbc0:	mov    rcx,QWORD PTR [rdx+0x320]
 104bbc7:	jmp    0x103f95a
 104bbcc:	int3   
 104bbcd:	int3   
 104bbce:	int3   
 104bbcf:	int3   
 104bbd0:	lea    rcx,[rdx+0x1a8]
 104bbd7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5eca]        # 0x1001aa8
 104bbde:	int3   
 104bbdf:	int3   
 104bbe0:	lea    rcx,[rdx+0x108]
 104bbe7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5eba]        # 0x1001aa8
 104bbee:	int3   
 104bbef:	int3   
 104bbf0:	lea    rcx,[rdx+0x340]
 104bbf7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5eaa]        # 0x1001aa8
 104bbfe:	int3   
 104bbff:	int3   
 104bc00:	lea    rcx,[rdx+0x290]
 104bc07:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5e9a]        # 0x1001aa8
 104bc0e:	int3   
 104bc0f:	int3   
 104bc10:	lea    rcx,[rdx+0x290]
 104bc17:	add    rcx,0x8
 104bc1b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5e86]        # 0x1001aa8
 104bc22:	int3   
 104bc23:	int3   
 104bc24:	int3   
 104bc25:	int3   
 104bc26:	int3   
 104bc27:	int3   
 104bc28:	int3   
 104bc29:	int3   
 104bc2a:	int3   
 104bc2b:	int3   
 104bc2c:	int3   
 104bc2d:	int3   
 104bc2e:	int3   
 104bc2f:	int3   
 104bc30:	mov    QWORD PTR [rsp+0x10],rdx
 104bc35:	push   rbx
 104bc36:	push   rbp
 104bc37:	push   rdi
 104bc38:	sub    rsp,0x70
 104bc3c:	mov    rbp,rdx
 104bc3f:	mov    rdi,QWORD PTR [rbp+0x580]
 104bc46:	mov    rax,QWORD PTR [rdi]
 104bc49:	xor    r9d,r9d
 104bc4c:	mov    r8d,0x400
 104bc52:	lea    rdx,[rbp+0x1290]
 104bc59:	mov    rcx,rdi
 104bc5c:	call   QWORD PTR [rax+0x28]
 104bc5f:	mov    rbx,QWORD PTR [rbp+0x350]
 104bc66:	mov    rax,QWORD PTR [rbx]
 104bc69:	mov    BYTE PTR [rsp+0x28],0x1
 104bc6e:	mov    BYTE PTR [rsp+0x20],0x1
 104bc73:	mov    r9d,0x2
 104bc79:	xor    r8d,r8d
 104bc7c:	mov    edx,0xc000c3b8
 104bc81:	mov    rcx,rbx
 104bc84:	call   QWORD PTR [rax]
 104bc86:	mov    r11,QWORD PTR [rbx]
 104bc89:	mov    BYTE PTR [rsp+0x30],0x1
 104bc8e:	mov    BYTE PTR [rsp+0x28],0x1
 104bc93:	mov    DWORD PTR [rsp+0x20],0x2
 104bc9b:	xor    r9d,r9d
 104bc9e:	lea    r8,[rbp+0x1290]
 104bca5:	mov    edx,0xc000c483
 104bcaa:	mov    rcx,rbx
 104bcad:	call   QWORD PTR [r11+0x8]
 104bcb1:	mov    rcx,rdi
 104bcb4:	call   0x103f9f6
 104bcb9:	mov    rbx,QWORD PTR [rbp+0x178]
 104bcc0:	test   rbx,rbx
 104bcc3:	je     0x104bce2
 104bcc5:	mov    rcx,rbx
 104bcc8:	call   QWORD PTR [rip+0xfffffffffffb5672]        # 0x1001340
 104bcce:	mov    rcx,rbx
 104bcd1:	call   QWORD PTR [rip+0xfffffffffffb5801]        # 0x10014d8
 104bcd7:	mov    QWORD PTR [rbp+0x178],0x0
 104bce2:	lea    rax,[rip+0xfffffffffffdc56b]        # 0x1028254
 104bce9:	add    rsp,0x70
 104bced:	pop    rdi
 104bcee:	pop    rbp
 104bcef:	pop    rbx
 104bcf0:	ret    
 104bcf1:	int3   
 104bcf2:	int3   
 104bcf3:	int3   
 104bcf4:	int3   
 104bcf5:	int3   
 104bcf6:	int3   
 104bcf7:	int3   
 104bcf8:	int3   
 104bcf9:	int3   
 104bcfa:	int3   
 104bcfb:	int3   
 104bcfc:	int3   
 104bcfd:	int3   
 104bcfe:	int3   
 104bcff:	int3   
 104bd00:	lea    rcx,[rdx+0x50]
 104bd07:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5d9a]        # 0x1001aa8
 104bd0e:	int3   
 104bd0f:	int3   
 104bd10:	lea    rcx,[rdx+0x68]
 104bd17:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5d8a]        # 0x1001aa8
 104bd1e:	int3   
 104bd1f:	int3   
 104bd20:	lea    rcx,[rdx+0x90]
 104bd27:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5d7a]        # 0x1001aa8
 104bd2e:	int3   
 104bd2f:	int3   
 104bd30:	lea    rcx,[rdx+0x70]
 104bd37:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5d6a]        # 0x1001aa8
 104bd3e:	int3   
 104bd3f:	int3   
 104bd40:	lea    rcx,[rdx+0x88]
 104bd47:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5d5a]        # 0x1001aa8
 104bd4e:	int3   
 104bd4f:	int3   
 104bd50:	mov    rcx,QWORD PTR [rdx+0x80]
 104bd57:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5d4a]        # 0x1001aa8
 104bd5e:	int3   
 104bd5f:	int3   
 104bd60:	lea    rcx,[rdx+0xa0]
 104bd67:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5d3a]        # 0x1001aa8
 104bd6e:	int3   
 104bd6f:	int3   
 104bd70:	mov    QWORD PTR [rsp+0x10],rdx
 104bd75:	push   rbx
 104bd76:	push   rbp
 104bd77:	push   rdi
 104bd78:	sub    rsp,0x40
 104bd7c:	mov    rbp,rdx
 104bd7f:	mov    edx,0xc000c483
 104bd84:	lea    rcx,[rbp+0x78]
 104bd88:	call   0x10132d0
 104bd8d:	nop
 104bd8e:	lea    rdx,[rbp+0x98]
 104bd95:	mov    rcx,QWORD PTR [rbp+0x48]
 104bd99:	call   0x1012e00
 104bd9e:	nop
 104bd9f:	mov    r8,rax
 104bda2:	lea    rdx,[rip+0xfffffffffffba2c7]        # 0x1006070
 104bda9:	lea    rcx,[rbp+0xb0]
 104bdb0:	call   0x1013d70
 104bdb5:	nop
 104bdb6:	mov    rdx,rax
 104bdb9:	lea    rcx,[rbp+0x78]
 104bdbd:	call   QWORD PTR [rip+0xfffffffffffb5c15]        # 0x10019d8
 104bdc3:	nop
 104bdc4:	lea    rcx,[rbp+0xb0]
 104bdcb:	call   QWORD PTR [rip+0xfffffffffffb5cd7]        # 0x1001aa8
 104bdd1:	nop
 104bdd2:	lea    rcx,[rbp+0x98]
 104bdd9:	call   QWORD PTR [rip+0xfffffffffffb5cc9]        # 0x1001aa8
 104bddf:	mov    rbx,QWORD PTR [rbp+0x60]
 104bde3:	mov    rax,QWORD PTR [rbx+0x8]
 104bde7:	movsxd rcx,DWORD PTR [rax+0x4]
 104bdeb:	mov    rdi,QWORD PTR [rcx+rbx*1+0x8]
 104bdf0:	lea    rcx,[rbp+0x78]
 104bdf4:	call   QWORD PTR [rip+0xfffffffffffb5cee]        # 0x1001ae8
 104bdfa:	mov    r8,rax
 104bdfd:	mov    rax,QWORD PTR [rbx+0x8]
 104be01:	movsxd rcx,DWORD PTR [rax+0x4]
 104be05:	add    rcx,0x8
 104be09:	add    rcx,rbx
 104be0c:	mov    BYTE PTR [rsp+0x30],0x1
 104be11:	mov    BYTE PTR [rsp+0x28],0x1
 104be16:	mov    DWORD PTR [rsp+0x20],0x2
 104be1e:	xor    r9d,r9d
 104be21:	mov    edx,0xc000c483
 104be26:	call   QWORD PTR [rdi+0x8]
 104be29:	nop
 104be2a:	lea    rcx,[rbp+0x78]
 104be2e:	call   QWORD PTR [rip+0xfffffffffffb5c74]        # 0x1001aa8
 104be34:	nop
 104be35:	lea    rax,[rip+0xfffffffffffc9319]        # 0x1015155
 104be3c:	add    rsp,0x40
 104be40:	pop    rdi
 104be41:	pop    rbp
 104be42:	pop    rbx
 104be43:	ret    
 104be44:	int3   
 104be45:	int3   
 104be46:	int3   
 104be47:	int3   
 104be48:	int3   
 104be49:	int3   
 104be4a:	int3   
 104be4b:	int3   
 104be4c:	int3   
 104be4d:	int3   
 104be4e:	int3   
 104be4f:	int3   
 104be50:	lea    rcx,[rdx+0x78]
 104be57:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5c4a]        # 0x1001aa8
 104be5e:	int3   
 104be5f:	int3   
 104be60:	lea    rcx,[rdx+0x98]
 104be67:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5c3a]        # 0x1001aa8
 104be6e:	int3   
 104be6f:	int3   
 104be70:	lea    rcx,[rdx+0xb0]
 104be77:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5c2a]        # 0x1001aa8
 104be7e:	int3   
 104be7f:	int3   
 104be80:	lea    rcx,[rdx+0x48]
 104be87:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5c1a]        # 0x1001aa8
 104be8e:	int3   
 104be8f:	int3   
 104be90:	lea    rcx,[rdx+0xa8]
 104be97:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5c0a]        # 0x1001aa8
 104be9e:	int3   
 104be9f:	int3   
 104bea0:	int3   
 104bea1:	int3   
 104bea2:	int3   
 104bea3:	int3   
 104bea4:	int3   
 104bea5:	int3   
 104bea6:	int3   
 104bea7:	int3   
 104bea8:	int3   
 104bea9:	int3   
 104beaa:	int3   
 104beab:	int3   
 104beac:	int3   
 104bead:	int3   
 104beae:	int3   
 104beaf:	int3   
 104beb0:	mov    rcx,QWORD PTR [rdx+0x80]
 104beb7:	add    rcx,0x60
 104bebb:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5be6]        # 0x1001aa8
 104bec2:	int3   
 104bec3:	int3   
 104bec4:	int3   
 104bec5:	int3   
 104bec6:	int3   
 104bec7:	int3   
 104bec8:	int3   
 104bec9:	int3   
 104beca:	int3   
 104becb:	int3   
 104becc:	int3   
 104becd:	int3   
 104bece:	int3   
 104becf:	int3   
 104bed0:	mov    rcx,QWORD PTR [rdx+0x80]
 104bed7:	add    rcx,0x68
 104bedb:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5bc6]        # 0x1001aa8
 104bee2:	int3   
 104bee3:	int3   
 104bee4:	int3   
 104bee5:	int3   
 104bee6:	int3   
 104bee7:	int3   
 104bee8:	int3   
 104bee9:	int3   
 104beea:	int3   
 104beeb:	int3   
 104beec:	int3   
 104beed:	int3   
 104beee:	int3   
 104beef:	int3   
 104bef0:	mov    rcx,QWORD PTR [rdx+0x80]
 104bef7:	add    rcx,0x70
 104befb:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5ba6]        # 0x1001aa8
 104bf02:	int3   
 104bf03:	int3   
 104bf04:	int3   
 104bf05:	int3   
 104bf06:	int3   
 104bf07:	int3   
 104bf08:	int3   
 104bf09:	int3   
 104bf0a:	int3   
 104bf0b:	int3   
 104bf0c:	int3   
 104bf0d:	int3   
 104bf0e:	int3   
 104bf0f:	int3   
 104bf10:	mov    rcx,QWORD PTR [rdx+0x80]
 104bf17:	add    rcx,0x78
 104bf1b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5b86]        # 0x1001aa8
 104bf22:	int3   
 104bf23:	int3   
 104bf24:	int3   
 104bf25:	int3   
 104bf26:	int3   
 104bf27:	int3   
 104bf28:	int3   
 104bf29:	int3   
 104bf2a:	int3   
 104bf2b:	int3   
 104bf2c:	int3   
 104bf2d:	int3   
 104bf2e:	int3   
 104bf2f:	int3   
 104bf30:	mov    rcx,QWORD PTR [rdx+0x80]
 104bf37:	add    rcx,0x80
 104bf3e:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5b63]        # 0x1001aa8
 104bf45:	int3   
 104bf46:	int3   
 104bf47:	int3   
 104bf48:	int3   
 104bf49:	int3   
 104bf4a:	int3   
 104bf4b:	int3   
 104bf4c:	int3   
 104bf4d:	int3   
 104bf4e:	int3   
 104bf4f:	int3   
 104bf50:	mov    rcx,QWORD PTR [rdx+0x80]
 104bf57:	add    rcx,0x88
 104bf5e:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5b43]        # 0x1001aa8
 104bf65:	int3   
 104bf66:	int3   
 104bf67:	int3   
 104bf68:	int3   
 104bf69:	int3   
 104bf6a:	int3   
 104bf6b:	int3   
 104bf6c:	int3   
 104bf6d:	int3   
 104bf6e:	int3   
 104bf6f:	int3   
 104bf70:	mov    rcx,QWORD PTR [rdx+0x80]
 104bf77:	add    rcx,0x90
 104bf7e:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5b23]        # 0x1001aa8
 104bf85:	int3   
 104bf86:	int3   
 104bf87:	int3   
 104bf88:	int3   
 104bf89:	int3   
 104bf8a:	int3   
 104bf8b:	int3   
 104bf8c:	int3   
 104bf8d:	int3   
 104bf8e:	int3   
 104bf8f:	int3   
 104bf90:	mov    rcx,QWORD PTR [rdx+0x80]
 104bf97:	add    rcx,0x98
 104bf9e:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5b03]        # 0x1001aa8
 104bfa5:	int3   
 104bfa6:	int3   
 104bfa7:	int3   
 104bfa8:	int3   
 104bfa9:	int3   
 104bfaa:	int3   
 104bfab:	int3   
 104bfac:	int3   
 104bfad:	int3   
 104bfae:	int3   
 104bfaf:	int3   
 104bfb0:	mov    rcx,QWORD PTR [rdx+0x80]
 104bfb7:	add    rcx,0xa0
 104bfbe:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5ae3]        # 0x1001aa8
 104bfc5:	int3   
 104bfc6:	int3   
 104bfc7:	int3   
 104bfc8:	int3   
 104bfc9:	int3   
 104bfca:	int3   
 104bfcb:	int3   
 104bfcc:	int3   
 104bfcd:	int3   
 104bfce:	int3   
 104bfcf:	int3   
 104bfd0:	mov    rcx,QWORD PTR [rdx+0x80]
 104bfd7:	add    rcx,0xa8
 104bfde:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5ac3]        # 0x1001aa8
 104bfe5:	int3   
 104bfe6:	int3   
 104bfe7:	int3   
 104bfe8:	int3   
 104bfe9:	int3   
 104bfea:	int3   
 104bfeb:	int3   
 104bfec:	int3   
 104bfed:	int3   
 104bfee:	int3   
 104bfef:	int3   
 104bff0:	mov    rcx,QWORD PTR [rdx+0x80]
 104bff7:	add    rcx,0xb0
 104bffe:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5aa3]        # 0x1001aa8
 104c005:	int3   
 104c006:	int3   
 104c007:	int3   
 104c008:	int3   
 104c009:	int3   
 104c00a:	int3   
 104c00b:	int3   
 104c00c:	int3   
 104c00d:	int3   
 104c00e:	int3   
 104c00f:	int3   
 104c010:	mov    rcx,QWORD PTR [rdx+0x80]
 104c017:	add    rcx,0xc0
 104c01e:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5a83]        # 0x1001aa8
 104c025:	int3   
 104c026:	int3   
 104c027:	int3   
 104c028:	int3   
 104c029:	int3   
 104c02a:	int3   
 104c02b:	int3   
 104c02c:	int3   
 104c02d:	int3   
 104c02e:	int3   
 104c02f:	int3   
 104c030:	mov    rcx,QWORD PTR [rdx+0x80]
 104c037:	add    rcx,0xc8
 104c03e:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5a63]        # 0x1001aa8
 104c045:	int3   
 104c046:	int3   
 104c047:	int3   
 104c048:	int3   
 104c049:	int3   
 104c04a:	int3   
 104c04b:	int3   
 104c04c:	int3   
 104c04d:	int3   
 104c04e:	int3   
 104c04f:	int3   
 104c050:	mov    rcx,QWORD PTR [rdx+0x80]
 104c057:	add    rcx,0xe8
 104c05e:	jmp    0x1012ae0
 104c063:	int3   
 104c064:	int3   
 104c065:	int3   
 104c066:	int3   
 104c067:	int3   
 104c068:	int3   
 104c069:	int3   
 104c06a:	int3   
 104c06b:	int3   
 104c06c:	int3   
 104c06d:	int3   
 104c06e:	int3   
 104c06f:	int3   
 104c070:	mov    rcx,QWORD PTR [rdx+0x80]
 104c077:	add    rcx,0x120
 104c07e:	jmp    0x1012ae0
 104c083:	int3   
 104c084:	int3   
 104c085:	int3   
 104c086:	int3   
 104c087:	int3   
 104c088:	int3   
 104c089:	int3   
 104c08a:	int3   
 104c08b:	int3   
 104c08c:	int3   
 104c08d:	int3   
 104c08e:	int3   
 104c08f:	int3   
 104c090:	mov    rcx,QWORD PTR [rdx+0x80]
 104c097:	add    rcx,0x158
 104c09e:	jmp    0x102bd90
 104c0a3:	int3   
 104c0a4:	int3   
 104c0a5:	int3   
 104c0a6:	int3   
 104c0a7:	int3   
 104c0a8:	int3   
 104c0a9:	int3   
 104c0aa:	int3   
 104c0ab:	int3   
 104c0ac:	int3   
 104c0ad:	int3   
 104c0ae:	int3   
 104c0af:	int3   
 104c0b0:	mov    rcx,QWORD PTR [rdx+0x80]
 104c0b7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb59ea]        # 0x1001aa8
 104c0be:	int3   
 104c0bf:	int3   
 104c0c0:	mov    rcx,QWORD PTR [rdx+0x60]
 104c0c7:	add    rcx,0x10
 104c0cb:	rex.W jmp QWORD PTR [rip+0xfffffffffffb59d6]        # 0x1001aa8
 104c0d2:	int3   
 104c0d3:	int3   
 104c0d4:	int3   
 104c0d5:	int3   
 104c0d6:	int3   
 104c0d7:	int3   
 104c0d8:	int3   
 104c0d9:	int3   
 104c0da:	int3   
 104c0db:	int3   
 104c0dc:	int3   
 104c0dd:	int3   
 104c0de:	int3   
 104c0df:	int3   
 104c0e0:	mov    rcx,QWORD PTR [rdx+0x60]
 104c0e7:	add    rcx,0x18
 104c0eb:	rex.W jmp QWORD PTR [rip+0xfffffffffffb59b6]        # 0x1001aa8
 104c0f2:	int3   
 104c0f3:	int3   
 104c0f4:	int3   
 104c0f5:	int3   
 104c0f6:	int3   
 104c0f7:	int3   
 104c0f8:	int3   
 104c0f9:	int3   
 104c0fa:	int3   
 104c0fb:	int3   
 104c0fc:	int3   
 104c0fd:	int3   
 104c0fe:	int3   
 104c0ff:	int3   
 104c100:	mov    rcx,QWORD PTR [rdx+0x60]
 104c107:	add    rcx,0x30
 104c10b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5996]        # 0x1001aa8
 104c112:	int3   
 104c113:	int3   
 104c114:	int3   
 104c115:	int3   
 104c116:	int3   
 104c117:	int3   
 104c118:	int3   
 104c119:	int3   
 104c11a:	int3   
 104c11b:	int3   
 104c11c:	int3   
 104c11d:	int3   
 104c11e:	int3   
 104c11f:	int3   
 104c120:	mov    rcx,QWORD PTR [rdx+0x60]
 104c127:	add    rcx,0x90
 104c12e:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5973]        # 0x1001aa8
 104c135:	int3   
 104c136:	int3   
 104c137:	int3   
 104c138:	int3   
 104c139:	int3   
 104c13a:	int3   
 104c13b:	int3   
 104c13c:	int3   
 104c13d:	int3   
 104c13e:	int3   
 104c13f:	int3   
 104c140:	mov    rcx,QWORD PTR [rdx+0x60]
 104c147:	add    rcx,0xa0
 104c14e:	jmp    0x1023bd0
 104c153:	int3   
 104c154:	int3   
 104c155:	int3   
 104c156:	int3   
 104c157:	int3   
 104c158:	int3   
 104c159:	int3   
 104c15a:	int3   
 104c15b:	int3   
 104c15c:	int3   
 104c15d:	int3   
 104c15e:	int3   
 104c15f:	int3   
 104c160:	mov    rcx,QWORD PTR [rdx+0x60]
 104c167:	add    rcx,0xf0
 104c16e:	jmp    0x1012ae0
 104c173:	int3   
 104c174:	int3   
 104c175:	int3   
 104c176:	int3   
 104c177:	int3   
 104c178:	int3   
 104c179:	int3   
 104c17a:	int3   
 104c17b:	int3   
 104c17c:	int3   
 104c17d:	int3   
 104c17e:	int3   
 104c17f:	int3   
 104c180:	lea    rcx,[rdx+0x88]
 104c187:	rex.W jmp QWORD PTR [rip+0xfffffffffffb591a]        # 0x1001aa8
 104c18e:	int3   
 104c18f:	int3   
 104c190:	rex push rbp
 104c192:	sub    rsp,0x20
 104c196:	mov    rbp,rdx
 104c199:	mov    eax,DWORD PTR [rbp+0x20]
 104c19c:	and    eax,0x1
 104c19f:	test   eax,eax
 104c1a1:	je     0x104c1b4
 104c1a3:	and    DWORD PTR [rbp+0x20],0xfffffffe
 104c1a7:	lea    rcx,[rbp+0x88]
 104c1ae:	call   QWORD PTR [rip+0xfffffffffffb58f4]        # 0x1001aa8
 104c1b4:	add    rsp,0x20
 104c1b8:	pop    rbp
 104c1b9:	ret    
 104c1ba:	int3   
 104c1bb:	int3   
 104c1bc:	int3   
 104c1bd:	int3   
 104c1be:	int3   
 104c1bf:	int3   
 104c1c0:	mov    rcx,QWORD PTR [rdx+0x40]
 104c1c7:	add    rcx,0x8
 104c1cb:	rex.W jmp QWORD PTR [rip+0xfffffffffffb58d6]        # 0x1001aa8
 104c1d2:	int3   
 104c1d3:	int3   
 104c1d4:	int3   
 104c1d5:	int3   
 104c1d6:	int3   
 104c1d7:	int3   
 104c1d8:	int3   
 104c1d9:	int3   
 104c1da:	int3   
 104c1db:	int3   
 104c1dc:	int3   
 104c1dd:	int3   
 104c1de:	int3   
 104c1df:	int3   
 104c1e0:	mov    rcx,QWORD PTR [rdx+0x40]
 104c1e7:	add    rcx,0x10
 104c1eb:	jmp    0x100c4f0
 104c1f0:	int3   
 104c1f1:	int3   
 104c1f2:	int3   
 104c1f3:	int3   
 104c1f4:	int3   
 104c1f5:	int3   
 104c1f6:	int3   
 104c1f7:	int3   
 104c1f8:	int3   
 104c1f9:	int3   
 104c1fa:	int3   
 104c1fb:	int3   
 104c1fc:	int3   
 104c1fd:	int3   
 104c1fe:	int3   
 104c1ff:	int3   
 104c200:	mov    rcx,QWORD PTR [rdx+0x40]
 104c207:	rex.W jmp QWORD PTR [rip+0xfffffffffffb589a]        # 0x1001aa8
 104c20e:	int3   
 104c20f:	int3   
 104c210:	mov    rcx,QWORD PTR [rdx+0x40]
 104c217:	add    rcx,0x8
 104c21b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5886]        # 0x1001aa8
 104c222:	int3   
 104c223:	int3   
 104c224:	int3   
 104c225:	int3   
 104c226:	int3   
 104c227:	int3   
 104c228:	int3   
 104c229:	int3   
 104c22a:	int3   
 104c22b:	int3   
 104c22c:	int3   
 104c22d:	int3   
 104c22e:	int3   
 104c22f:	int3   
 104c230:	mov    rcx,QWORD PTR [rdx+0x40]
 104c237:	rex.W jmp QWORD PTR [rip+0xfffffffffffb586a]        # 0x1001aa8
 104c23e:	int3   
 104c23f:	int3   
 104c240:	int3   
 104c241:	int3   
 104c242:	int3   
 104c243:	int3   
 104c244:	int3   
 104c245:	int3   
 104c246:	int3   
 104c247:	int3   
 104c248:	int3   
 104c249:	int3   
 104c24a:	int3   
 104c24b:	int3   
 104c24c:	int3   
 104c24d:	int3   
 104c24e:	int3   
 104c24f:	int3   
 104c250:	mov    rcx,QWORD PTR [rdx+0x40]
 104c257:	add    rcx,0x60
 104c25b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5846]        # 0x1001aa8
 104c262:	int3   
 104c263:	int3   
 104c264:	int3   
 104c265:	int3   
 104c266:	int3   
 104c267:	int3   
 104c268:	int3   
 104c269:	int3   
 104c26a:	int3   
 104c26b:	int3   
 104c26c:	int3   
 104c26d:	int3   
 104c26e:	int3   
 104c26f:	int3   
 104c270:	mov    rcx,QWORD PTR [rdx+0x40]
 104c277:	add    rcx,0x68
 104c27b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5826]        # 0x1001aa8
 104c282:	int3   
 104c283:	int3   
 104c284:	int3   
 104c285:	int3   
 104c286:	int3   
 104c287:	int3   
 104c288:	int3   
 104c289:	int3   
 104c28a:	int3   
 104c28b:	int3   
 104c28c:	int3   
 104c28d:	int3   
 104c28e:	int3   
 104c28f:	int3   
 104c290:	mov    rcx,QWORD PTR [rdx+0x40]
 104c297:	add    rcx,0x70
 104c29b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5806]        # 0x1001aa8
 104c2a2:	int3   
 104c2a3:	int3   
 104c2a4:	int3   
 104c2a5:	int3   
 104c2a6:	int3   
 104c2a7:	int3   
 104c2a8:	int3   
 104c2a9:	int3   
 104c2aa:	int3   
 104c2ab:	int3   
 104c2ac:	int3   
 104c2ad:	int3   
 104c2ae:	int3   
 104c2af:	int3   
 104c2b0:	mov    rcx,QWORD PTR [rdx+0x40]
 104c2b7:	add    rcx,0x78
 104c2bb:	rex.W jmp QWORD PTR [rip+0xfffffffffffb57e6]        # 0x1001aa8
 104c2c2:	int3   
 104c2c3:	int3   
 104c2c4:	int3   
 104c2c5:	int3   
 104c2c6:	int3   
 104c2c7:	int3   
 104c2c8:	int3   
 104c2c9:	int3   
 104c2ca:	int3   
 104c2cb:	int3   
 104c2cc:	int3   
 104c2cd:	int3   
 104c2ce:	int3   
 104c2cf:	int3   
 104c2d0:	mov    rcx,QWORD PTR [rdx+0x40]
 104c2d7:	add    rcx,0x80
 104c2de:	rex.W jmp QWORD PTR [rip+0xfffffffffffb57c3]        # 0x1001aa8
 104c2e5:	int3   
 104c2e6:	int3   
 104c2e7:	int3   
 104c2e8:	int3   
 104c2e9:	int3   
 104c2ea:	int3   
 104c2eb:	int3   
 104c2ec:	int3   
 104c2ed:	int3   
 104c2ee:	int3   
 104c2ef:	int3   
 104c2f0:	mov    rcx,QWORD PTR [rdx+0x40]
 104c2f7:	add    rcx,0x88
 104c2fe:	rex.W jmp QWORD PTR [rip+0xfffffffffffb57a3]        # 0x1001aa8
 104c305:	int3   
 104c306:	int3   
 104c307:	int3   
 104c308:	int3   
 104c309:	int3   
 104c30a:	int3   
 104c30b:	int3   
 104c30c:	int3   
 104c30d:	int3   
 104c30e:	int3   
 104c30f:	int3   
 104c310:	mov    rcx,QWORD PTR [rdx+0x40]
 104c317:	add    rcx,0x90
 104c31e:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5783]        # 0x1001aa8
 104c325:	int3   
 104c326:	int3   
 104c327:	int3   
 104c328:	int3   
 104c329:	int3   
 104c32a:	int3   
 104c32b:	int3   
 104c32c:	int3   
 104c32d:	int3   
 104c32e:	int3   
 104c32f:	int3   
 104c330:	mov    rcx,QWORD PTR [rdx+0x40]
 104c337:	add    rcx,0x98
 104c33e:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5763]        # 0x1001aa8
 104c345:	int3   
 104c346:	int3   
 104c347:	int3   
 104c348:	int3   
 104c349:	int3   
 104c34a:	int3   
 104c34b:	int3   
 104c34c:	int3   
 104c34d:	int3   
 104c34e:	int3   
 104c34f:	int3   
 104c350:	mov    rcx,QWORD PTR [rdx+0x40]
 104c357:	add    rcx,0xa0
 104c35e:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5743]        # 0x1001aa8
 104c365:	int3   
 104c366:	int3   
 104c367:	int3   
 104c368:	int3   
 104c369:	int3   
 104c36a:	int3   
 104c36b:	int3   
 104c36c:	int3   
 104c36d:	int3   
 104c36e:	int3   
 104c36f:	int3   
 104c370:	mov    rcx,QWORD PTR [rdx+0x40]
 104c377:	add    rcx,0xa8
 104c37e:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5723]        # 0x1001aa8
 104c385:	int3   
 104c386:	int3   
 104c387:	int3   
 104c388:	int3   
 104c389:	int3   
 104c38a:	int3   
 104c38b:	int3   
 104c38c:	int3   
 104c38d:	int3   
 104c38e:	int3   
 104c38f:	int3   
 104c390:	mov    rcx,QWORD PTR [rdx+0x40]
 104c397:	add    rcx,0xb0
 104c39e:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5703]        # 0x1001aa8
 104c3a5:	int3   
 104c3a6:	int3   
 104c3a7:	int3   
 104c3a8:	int3   
 104c3a9:	int3   
 104c3aa:	int3   
 104c3ab:	int3   
 104c3ac:	int3   
 104c3ad:	int3   
 104c3ae:	int3   
 104c3af:	int3   
 104c3b0:	mov    rcx,QWORD PTR [rdx+0x40]
 104c3b7:	add    rcx,0xc0
 104c3be:	rex.W jmp QWORD PTR [rip+0xfffffffffffb56e3]        # 0x1001aa8
 104c3c5:	int3   
 104c3c6:	int3   
 104c3c7:	int3   
 104c3c8:	int3   
 104c3c9:	int3   
 104c3ca:	int3   
 104c3cb:	int3   
 104c3cc:	int3   
 104c3cd:	int3   
 104c3ce:	int3   
 104c3cf:	int3   
 104c3d0:	mov    rcx,QWORD PTR [rdx+0x40]
 104c3d7:	add    rcx,0xc8
 104c3de:	rex.W jmp QWORD PTR [rip+0xfffffffffffb56c3]        # 0x1001aa8
 104c3e5:	int3   
 104c3e6:	int3   
 104c3e7:	int3   
 104c3e8:	int3   
 104c3e9:	int3   
 104c3ea:	int3   
 104c3eb:	int3   
 104c3ec:	int3   
 104c3ed:	int3   
 104c3ee:	int3   
 104c3ef:	int3   
 104c3f0:	mov    rcx,QWORD PTR [rdx+0x40]
 104c3f7:	add    rcx,0xe8
 104c3fe:	jmp    0x1012ae0
 104c403:	int3   
 104c404:	int3   
 104c405:	int3   
 104c406:	int3   
 104c407:	int3   
 104c408:	int3   
 104c409:	int3   
 104c40a:	int3   
 104c40b:	int3   
 104c40c:	int3   
 104c40d:	int3   
 104c40e:	int3   
 104c40f:	int3   
 104c410:	mov    rcx,QWORD PTR [rdx+0x40]
 104c417:	add    rcx,0x120
 104c41e:	jmp    0x1012ae0
 104c423:	int3   
 104c424:	int3   
 104c425:	int3   
 104c426:	int3   
 104c427:	int3   
 104c428:	int3   
 104c429:	int3   
 104c42a:	int3   
 104c42b:	int3   
 104c42c:	int3   
 104c42d:	int3   
 104c42e:	int3   
 104c42f:	int3   
 104c430:	mov    rcx,QWORD PTR [rdx+0x40]
 104c437:	add    rcx,0x158
 104c43e:	jmp    0x102bd90
 104c443:	int3   
 104c444:	int3   
 104c445:	int3   
 104c446:	int3   
 104c447:	int3   
 104c448:	int3   
 104c449:	int3   
 104c44a:	int3   
 104c44b:	int3   
 104c44c:	int3   
 104c44d:	int3   
 104c44e:	int3   
 104c44f:	int3   
 104c450:	mov    rcx,QWORD PTR [rdx+0x50]
 104c457:	add    rcx,0x10
 104c45b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5646]        # 0x1001aa8
 104c462:	int3   
 104c463:	int3   
 104c464:	int3   
 104c465:	int3   
 104c466:	int3   
 104c467:	int3   
 104c468:	int3   
 104c469:	int3   
 104c46a:	int3   
 104c46b:	int3   
 104c46c:	int3   
 104c46d:	int3   
 104c46e:	int3   
 104c46f:	int3   
 104c470:	mov    rcx,QWORD PTR [rdx+0x50]
 104c477:	add    rcx,0x18
 104c47b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5626]        # 0x1001aa8
 104c482:	int3   
 104c483:	int3   
 104c484:	int3   
 104c485:	int3   
 104c486:	int3   
 104c487:	int3   
 104c488:	int3   
 104c489:	int3   
 104c48a:	int3   
 104c48b:	int3   
 104c48c:	int3   
 104c48d:	int3   
 104c48e:	int3   
 104c48f:	int3   
 104c490:	mov    rcx,QWORD PTR [rdx+0x50]
 104c497:	add    rcx,0x30
 104c49b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb5606]        # 0x1001aa8
 104c4a2:	int3   
 104c4a3:	int3   
 104c4a4:	int3   
 104c4a5:	int3   
 104c4a6:	int3   
 104c4a7:	int3   
 104c4a8:	int3   
 104c4a9:	int3   
 104c4aa:	int3   
 104c4ab:	int3   
 104c4ac:	int3   
 104c4ad:	int3   
 104c4ae:	int3   
 104c4af:	int3   
 104c4b0:	mov    rcx,QWORD PTR [rdx+0x50]
 104c4b7:	add    rcx,0x90
 104c4be:	rex.W jmp QWORD PTR [rip+0xfffffffffffb55e3]        # 0x1001aa8
 104c4c5:	int3   
 104c4c6:	int3   
 104c4c7:	int3   
 104c4c8:	int3   
 104c4c9:	int3   
 104c4ca:	int3   
 104c4cb:	int3   
 104c4cc:	int3   
 104c4cd:	int3   
 104c4ce:	int3   
 104c4cf:	int3   
 104c4d0:	mov    rcx,QWORD PTR [rdx+0x50]
 104c4d7:	add    rcx,0xa0
 104c4de:	jmp    0x1023bd0
 104c4e3:	int3   
 104c4e4:	int3   
 104c4e5:	int3   
 104c4e6:	int3   
 104c4e7:	int3   
 104c4e8:	int3   
 104c4e9:	int3   
 104c4ea:	int3   
 104c4eb:	int3   
 104c4ec:	int3   
 104c4ed:	int3   
 104c4ee:	int3   
 104c4ef:	int3   
 104c4f0:	mov    rcx,QWORD PTR [rdx+0x50]
 104c4f7:	add    rcx,0xf0
 104c4fe:	jmp    0x1012ae0
 104c503:	int3   
 104c504:	int3   
 104c505:	int3   
 104c506:	int3   
 104c507:	int3   
 104c508:	int3   
 104c509:	int3   
 104c50a:	int3   
 104c50b:	int3   
 104c50c:	int3   
 104c50d:	int3   
 104c50e:	int3   
 104c50f:	int3   
 104c510:	rex push rbp
 104c512:	sub    rsp,0x20
 104c516:	mov    rbp,rdx
 104c519:	mov    eax,DWORD PTR [rbp+0x30]
 104c51c:	and    eax,0x1
 104c51f:	test   eax,eax
 104c521:	je     0x104c531
 104c523:	and    DWORD PTR [rbp+0x30],0xfffffffe
 104c527:	mov    rcx,QWORD PTR [rbp+0x60]
 104c52b:	call   QWORD PTR [rip+0xfffffffffffb5577]        # 0x1001aa8
 104c531:	add    rsp,0x20
 104c535:	pop    rbp
 104c536:	ret    
 104c537:	int3   
 104c538:	int3   
 104c539:	int3   
 104c53a:	int3   
 104c53b:	int3   
 104c53c:	int3   
 104c53d:	int3   
 104c53e:	int3   
 104c53f:	int3   
 104c540:	rex push rbp
 104c542:	sub    rsp,0x20
 104c546:	mov    rbp,rdx
 104c549:	mov    eax,DWORD PTR [rbp+0x30]
 104c54c:	and    eax,0x1
 104c54f:	test   eax,eax
 104c551:	je     0x104c561
 104c553:	and    DWORD PTR [rbp+0x30],0xfffffffe
 104c557:	mov    rcx,QWORD PTR [rbp+0x50]
 104c55b:	call   QWORD PTR [rip+0xfffffffffffb5547]        # 0x1001aa8
 104c561:	add    rsp,0x20
 104c565:	pop    rbp
 104c566:	ret    
 104c567:	int3   
 104c568:	int3   
 104c569:	int3   
 104c56a:	int3   
 104c56b:	int3   
 104c56c:	int3   
 104c56d:	int3   
 104c56e:	int3   
 104c56f:	int3   
 104c570:	lea    rcx,[rdx+0x90]
 104c577:	rex.W jmp QWORD PTR [rip+0xfffffffffffb552a]        # 0x1001aa8
 104c57e:	int3   
 104c57f:	int3   
 104c580:	lea    rcx,[rdx+0x80]
 104c587:	rex.W jmp QWORD PTR [rip+0xfffffffffffb551a]        # 0x1001aa8
 104c58e:	int3   
 104c58f:	int3   
 104c590:	lea    rcx,[rdx+0x40]
 104c597:	rex.W jmp QWORD PTR [rip+0xfffffffffffb550a]        # 0x1001aa8
 104c59e:	int3   
 104c59f:	int3   
 104c5a0:	lea    rcx,[rdx+0x98]
 104c5a7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb54fa]        # 0x1001aa8
 104c5ae:	int3   
 104c5af:	int3   
 104c5b0:	lea    rcx,[rdx+0x98]
 104c5b7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb54ea]        # 0x1001aa8
 104c5be:	int3   
 104c5bf:	int3   
 104c5c0:	mov    rcx,QWORD PTR [rdx+0x40]
 104c5c7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb54da]        # 0x1001aa8
 104c5ce:	int3   
 104c5cf:	int3   
 104c5d0:	lea    rcx,[rdx+0x98]
 104c5d7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb54ca]        # 0x1001aa8
 104c5de:	int3   
 104c5df:	int3   
 104c5e0:	lea    rcx,[rdx+0x98]
 104c5e7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb54ba]        # 0x1001aa8
 104c5ee:	int3   
 104c5ef:	int3   
 104c5f0:	int3   
 104c5f1:	int3   
 104c5f2:	int3   
 104c5f3:	int3   
 104c5f4:	int3   
 104c5f5:	int3   
 104c5f6:	int3   
 104c5f7:	int3   
 104c5f8:	int3   
 104c5f9:	int3   
 104c5fa:	int3   
 104c5fb:	int3   
 104c5fc:	int3   
 104c5fd:	int3   
 104c5fe:	int3   
 104c5ff:	int3   
 104c600:	lea    rcx,[rdx+0x80]
 104c607:	rex.W jmp QWORD PTR [rip+0xfffffffffffb549a]        # 0x1001aa8
 104c60e:	int3   
 104c60f:	int3   
 104c610:	lea    rcx,[rdx+0x70]
 104c617:	rex.W jmp QWORD PTR [rip+0xfffffffffffb548a]        # 0x1001aa8
 104c61e:	int3   
 104c61f:	int3   
 104c620:	lea    rcx,[rdx+0x88]
 104c627:	rex.W jmp QWORD PTR [rip+0xfffffffffffb547a]        # 0x1001aa8
 104c62e:	int3   
 104c62f:	int3   
 104c630:	int3   
 104c631:	int3   
 104c632:	int3   
 104c633:	int3   
 104c634:	int3   
 104c635:	int3   
 104c636:	int3   
 104c637:	int3   
 104c638:	int3   
 104c639:	int3   
 104c63a:	int3   
 104c63b:	int3   
 104c63c:	int3   
 104c63d:	int3   
 104c63e:	int3   
 104c63f:	int3   
 104c640:	mov    rcx,QWORD PTR [rdx+0x70]
 104c647:	jmp    0x103f95a
 104c64c:	int3   
 104c64d:	int3   
 104c64e:	int3   
 104c64f:	int3   
 104c650:	int3   
 104c651:	int3   
 104c652:	int3   
 104c653:	int3   
 104c654:	int3   
 104c655:	int3   
 104c656:	int3   
 104c657:	int3   
 104c658:	int3   
 104c659:	int3   
 104c65a:	int3   
 104c65b:	int3   
 104c65c:	int3   
 104c65d:	int3   
 104c65e:	int3   
 104c65f:	int3   
 104c660:	lea    rcx,[rdx+0x38]
 104c667:	rex.W jmp QWORD PTR [rip+0xfffffffffffb543a]        # 0x1001aa8
 104c66e:	int3   
 104c66f:	int3   
 104c670:	lea    rcx,[rdx+0x40]
 104c677:	rex.W jmp QWORD PTR [rip+0xfffffffffffb542a]        # 0x1001aa8
 104c67e:	int3   
 104c67f:	int3   
 104c680:	lea    rcx,[rdx+0x50]
 104c687:	rex.W jmp QWORD PTR [rip+0xfffffffffffb541a]        # 0x1001aa8
 104c68e:	int3   
 104c68f:	int3   
 104c690:	lea    rcx,[rdx+0x60]
 104c697:	rex.W jmp QWORD PTR [rip+0xfffffffffffb540a]        # 0x1001aa8
 104c69e:	int3   
 104c69f:	int3   
 104c6a0:	lea    rcx,[rdx+0x58]
 104c6a7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb53fa]        # 0x1001aa8
 104c6ae:	int3   
 104c6af:	int3   
 104c6b0:	lea    rcx,[rdx+0x60]
 104c6b7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb53ea]        # 0x1001aa8
 104c6be:	int3   
 104c6bf:	int3   
 104c6c0:	lea    rcx,[rdx+0x60]
 104c6c7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb53da]        # 0x1001aa8
 104c6ce:	int3   
 104c6cf:	int3   
 104c6d0:	int3   
 104c6d1:	int3   
 104c6d2:	int3   
 104c6d3:	int3   
 104c6d4:	int3   
 104c6d5:	int3   
 104c6d6:	int3   
 104c6d7:	int3   
 104c6d8:	int3   
 104c6d9:	int3   
 104c6da:	int3   
 104c6db:	int3   
 104c6dc:	int3   
 104c6dd:	int3   
 104c6de:	int3   
 104c6df:	int3   
 104c6e0:	lea    rcx,[rdx+0x50]
 104c6e7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb53ba]        # 0x1001aa8
 104c6ee:	int3   
 104c6ef:	int3   
 104c6f0:	int3   
 104c6f1:	int3   
 104c6f2:	int3   
 104c6f3:	int3   
 104c6f4:	int3   
 104c6f5:	int3   
 104c6f6:	int3   
 104c6f7:	int3   
 104c6f8:	int3   
 104c6f9:	int3   
 104c6fa:	int3   
 104c6fb:	int3   
 104c6fc:	int3   
 104c6fd:	int3   
 104c6fe:	int3   
 104c6ff:	int3   
 104c700:	lea    rcx,[rdx+0x88]
 104c707:	rex.W jmp QWORD PTR [rip+0xfffffffffffb539a]        # 0x1001aa8
 104c70e:	int3   
 104c70f:	int3   
 104c710:	lea    rcx,[rdx+0x40]
 104c717:	rex.W jmp QWORD PTR [rip+0xfffffffffffb538a]        # 0x1001aa8
 104c71e:	int3   
 104c71f:	int3   
 104c720:	int3   
 104c721:	int3   
 104c722:	int3   
 104c723:	int3   
 104c724:	int3   
 104c725:	int3   
 104c726:	int3   
 104c727:	int3   
 104c728:	int3   
 104c729:	int3   
 104c72a:	int3   
 104c72b:	int3   
 104c72c:	int3   
 104c72d:	int3   
 104c72e:	int3   
 104c72f:	int3   
 104c730:	lea    rcx,[rdx+0x50]
 104c737:	rex.W jmp QWORD PTR [rip+0xfffffffffffb536a]        # 0x1001aa8
 104c73e:	int3   
 104c73f:	int3   
 104c740:	lea    rcx,[rdx+0x60]
 104c747:	rex.W jmp QWORD PTR [rip+0xfffffffffffb535a]        # 0x1001aa8
 104c74e:	int3   
 104c74f:	int3   
 104c750:	lea    rcx,[rdx+0x58]
 104c757:	rex.W jmp QWORD PTR [rip+0xfffffffffffb534a]        # 0x1001aa8
 104c75e:	int3   
 104c75f:	int3   
 104c760:	lea    rcx,[rdx+0x68]
 104c767:	rex.W jmp QWORD PTR [rip+0xfffffffffffb533a]        # 0x1001aa8
 104c76e:	int3   
 104c76f:	int3   
 104c770:	int3   
 104c771:	int3   
 104c772:	int3   
 104c773:	int3   
 104c774:	int3   
 104c775:	int3   
 104c776:	int3   
 104c777:	int3   
 104c778:	int3   
 104c779:	int3   
 104c77a:	int3   
 104c77b:	int3   
 104c77c:	int3   
 104c77d:	int3   
 104c77e:	int3   
 104c77f:	int3   
 104c780:	lea    rcx,[rdx+0x40]
 104c787:	rex.W jmp QWORD PTR [rip+0xfffffffffffb531a]        # 0x1001aa8
 104c78e:	int3   
 104c78f:	int3   
 104c790:	mov    rcx,QWORD PTR [rdx+0xc0]
 104c797:	jmp    0x103f95a
 104c79c:	int3   
 104c79d:	int3   
 104c79e:	int3   
 104c79f:	int3   
 104c7a0:	lea    rcx,[rdx+0x48]
 104c7a7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb52fa]        # 0x1001aa8
 104c7ae:	int3   
 104c7af:	int3   
 104c7b0:	int3   
 104c7b1:	int3   
 104c7b2:	int3   
 104c7b3:	int3   
 104c7b4:	int3   
 104c7b5:	int3   
 104c7b6:	int3   
 104c7b7:	int3   
 104c7b8:	int3   
 104c7b9:	int3   
 104c7ba:	int3   
 104c7bb:	int3   
 104c7bc:	int3   
 104c7bd:	int3   
 104c7be:	int3   
 104c7bf:	int3   
 104c7c0:	lea    rcx,[rdx+0xa0]
 104c7c7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb52da]        # 0x1001aa8
 104c7ce:	int3   
 104c7cf:	int3   
 104c7d0:	lea    rcx,[rdx+0xa8]
 104c7d7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb52ca]        # 0x1001aa8
 104c7de:	int3   
 104c7df:	int3   
 104c7e0:	lea    rcx,[rdx+0xb0]
 104c7e7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb52ba]        # 0x1001aa8
 104c7ee:	int3   
 104c7ef:	int3   
 104c7f0:	int3   
 104c7f1:	int3   
 104c7f2:	int3   
 104c7f3:	int3   
 104c7f4:	int3   
 104c7f5:	int3   
 104c7f6:	int3   
 104c7f7:	int3   
 104c7f8:	int3   
 104c7f9:	int3   
 104c7fa:	int3   
 104c7fb:	int3   
 104c7fc:	int3   
 104c7fd:	int3   
 104c7fe:	int3   
 104c7ff:	int3   
 104c800:	lea    rcx,[rdx+0xa0]
 104c807:	rex.W jmp QWORD PTR [rip+0xfffffffffffb529a]        # 0x1001aa8
 104c80e:	int3   
 104c80f:	int3   
 104c810:	lea    rcx,[rdx+0xb8]
 104c817:	rex.W jmp QWORD PTR [rip+0xfffffffffffb528a]        # 0x1001aa8
 104c81e:	int3   
 104c81f:	int3   
 104c820:	int3   
 104c821:	int3   
 104c822:	int3   
 104c823:	int3   
 104c824:	int3   
 104c825:	int3   
 104c826:	int3   
 104c827:	int3   
 104c828:	int3   
 104c829:	int3   
 104c82a:	int3   
 104c82b:	int3   
 104c82c:	int3   
 104c82d:	int3   
 104c82e:	int3   
 104c82f:	int3   
 104c830:	lea    rcx,[rdx+0x70]
 104c837:	rex.W jmp QWORD PTR [rip+0xfffffffffffb526a]        # 0x1001aa8
 104c83e:	int3   
 104c83f:	int3   
 104c840:	lea    rcx,[rdx+0x80]
 104c847:	rex.W jmp QWORD PTR [rip+0xfffffffffffb525a]        # 0x1001aa8
 104c84e:	int3   
 104c84f:	int3   
 104c850:	lea    rcx,[rdx+0x78]
 104c857:	rex.W jmp QWORD PTR [rip+0xfffffffffffb524a]        # 0x1001aa8
 104c85e:	int3   
 104c85f:	int3   
 104c860:	int3   
 104c861:	int3   
 104c862:	int3   
 104c863:	int3   
 104c864:	int3   
 104c865:	int3   
 104c866:	int3   
 104c867:	int3   
 104c868:	int3   
 104c869:	int3   
 104c86a:	int3   
 104c86b:	int3   
 104c86c:	int3   
 104c86d:	int3   
 104c86e:	int3   
 104c86f:	int3   
 104c870:	lea    rcx,[rdx+0x60]
 104c877:	rex.W jmp QWORD PTR [rip+0xfffffffffffb522a]        # 0x1001aa8
 104c87e:	int3   
 104c87f:	int3   
 104c880:	lea    rcx,[rdx+0x70]
 104c887:	rex.W jmp QWORD PTR [rip+0xfffffffffffb521a]        # 0x1001aa8
 104c88e:	int3   
 104c88f:	int3   
 104c890:	lea    rcx,[rdx+0x68]
 104c897:	rex.W jmp QWORD PTR [rip+0xfffffffffffb520a]        # 0x1001aa8
 104c89e:	int3   
 104c89f:	int3   
 104c8a0:	lea    rcx,[rdx+0x68]
 104c8a7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb51fa]        # 0x1001aa8
 104c8ae:	int3   
 104c8af:	int3   
 104c8b0:	lea    rcx,[rdx+0x68]
 104c8b7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb51ea]        # 0x1001aa8
 104c8be:	int3   
 104c8bf:	int3   
 104c8c0:	int3   
 104c8c1:	int3   
 104c8c2:	int3   
 104c8c3:	int3   
 104c8c4:	int3   
 104c8c5:	int3   
 104c8c6:	int3   
 104c8c7:	int3   
 104c8c8:	int3   
 104c8c9:	int3   
 104c8ca:	int3   
 104c8cb:	int3   
 104c8cc:	int3   
 104c8cd:	int3   
 104c8ce:	int3   
 104c8cf:	int3   
 104c8d0:	lea    rcx,[rdx+0x80]
 104c8d7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb51ca]        # 0x1001aa8
 104c8de:	int3   
 104c8df:	int3   
 104c8e0:	lea    rcx,[rdx+0x88]
 104c8e7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb51ba]        # 0x1001aa8
 104c8ee:	int3   
 104c8ef:	int3   
 104c8f0:	lea    rcx,[rdx+0x88]
 104c8f7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb51aa]        # 0x1001aa8
 104c8fe:	int3   
 104c8ff:	int3   
 104c900:	rex push rbp
 104c902:	sub    rsp,0x20
 104c906:	mov    rbp,rdx
 104c909:	mov    eax,DWORD PTR [rbp+0x40]
 104c90c:	and    eax,0x1
 104c90f:	test   eax,eax
 104c911:	je     0x104c924
 104c913:	and    DWORD PTR [rbp+0x40],0xfffffffe
 104c917:	lea    rcx,[rbp+0x98]
 104c91e:	call   QWORD PTR [rip+0xfffffffffffb5184]        # 0x1001aa8
 104c924:	add    rsp,0x20
 104c928:	pop    rbp
 104c929:	ret    
 104c92a:	int3   
 104c92b:	int3   
 104c92c:	int3   
 104c92d:	int3   
 104c92e:	int3   
 104c92f:	int3   
 104c930:	rex push rbp
 104c932:	sub    rsp,0x20
 104c936:	mov    rbp,rdx
 104c939:	mov    eax,DWORD PTR [rbp+0x40]
 104c93c:	and    eax,0x2
 104c93f:	test   eax,eax
 104c941:	je     0x104c954
 104c943:	and    DWORD PTR [rbp+0x40],0xfffffffd
 104c947:	lea    rcx,[rbp+0x90]
 104c94e:	call   QWORD PTR [rip+0xfffffffffffb5154]        # 0x1001aa8
 104c954:	add    rsp,0x20
 104c958:	pop    rbp
 104c959:	ret    
 104c95a:	int3   
 104c95b:	int3   
 104c95c:	int3   
 104c95d:	int3   
 104c95e:	int3   
 104c95f:	int3   
 104c960:	lea    rcx,[rdx+0x88]
 104c967:	rex.W jmp QWORD PTR [rip+0xfffffffffffb513a]        # 0x1001aa8
 104c96e:	int3   
 104c96f:	int3   
 104c970:	int3   
 104c971:	int3   
 104c972:	int3   
 104c973:	int3   
 104c974:	int3   
 104c975:	int3   
 104c976:	int3   
 104c977:	int3   
 104c978:	int3   
 104c979:	int3   
 104c97a:	int3   
 104c97b:	int3   
 104c97c:	int3   
 104c97d:	int3   
 104c97e:	int3   
 104c97f:	int3   
 104c980:	lea    rcx,[rdx+0x118]
 104c987:	jmp    0x1012ae0
 104c98c:	int3   
 104c98d:	int3   
 104c98e:	int3   
 104c98f:	int3   
 104c990:	lea    rcx,[rdx+0xd8]
 104c997:	jmp    0x100c4f0
 104c99c:	int3   
 104c99d:	int3   
 104c99e:	int3   
 104c99f:	int3   
 104c9a0:	lea    rcx,[rdx+0x88]
 104c9a7:	jmp    0x100c4f0
 104c9ac:	int3   
 104c9ad:	int3   
 104c9ae:	int3   
 104c9af:	int3   
 104c9b0:	lea    rcx,[rdx+0x58]
 104c9b7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb50ea]        # 0x1001aa8
 104c9be:	int3   
 104c9bf:	int3   
 104c9c0:	lea    rcx,[rdx+0x48]
 104c9c7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb50da]        # 0x1001aa8
 104c9ce:	int3   
 104c9cf:	int3   
 104c9d0:	lea    rcx,[rdx+0x58]
 104c9d7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb50ca]        # 0x1001aa8
 104c9de:	int3   
 104c9df:	int3   
 104c9e0:	lea    rcx,[rdx+0x48]
 104c9e7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb50ba]        # 0x1001aa8
 104c9ee:	int3   
 104c9ef:	int3   
 104c9f0:	lea    rcx,[rdx+0x48]
 104c9f7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb50aa]        # 0x1001aa8
 104c9fe:	int3   
 104c9ff:	int3   
 104ca00:	mov    rcx,QWORD PTR [rdx+0x150]
 104ca07:	jmp    0x103f95a
 104ca0c:	int3   
 104ca0d:	int3   
 104ca0e:	int3   
 104ca0f:	int3   
 104ca10:	lea    rcx,[rdx+0x48]
 104ca17:	rex.W jmp QWORD PTR [rip+0xfffffffffffb508a]        # 0x1001aa8
 104ca1e:	int3   
 104ca1f:	int3   
 104ca20:	lea    rcx,[rdx+0x58]
 104ca27:	rex.W jmp QWORD PTR [rip+0xfffffffffffb507a]        # 0x1001aa8
 104ca2e:	int3   
 104ca2f:	int3   
 104ca30:	mov    rcx,QWORD PTR [rdx+0x150]
 104ca37:	jmp    0x103f95a
 104ca3c:	int3   
 104ca3d:	int3   
 104ca3e:	int3   
 104ca3f:	int3   
 104ca40:	mov    rcx,QWORD PTR [rdx+0x150]
 104ca47:	jmp    0x103f95a
 104ca4c:	int3   
 104ca4d:	int3   
 104ca4e:	int3   
 104ca4f:	int3   
 104ca50:	int3   
 104ca51:	int3   
 104ca52:	int3   
 104ca53:	int3   
 104ca54:	int3   
 104ca55:	int3   
 104ca56:	int3   
 104ca57:	int3   
 104ca58:	int3   
 104ca59:	int3   
 104ca5a:	int3   
 104ca5b:	int3   
 104ca5c:	int3   
 104ca5d:	int3   
 104ca5e:	int3   
 104ca5f:	int3   
 104ca60:	lea    rcx,[rdx+0x40]
 104ca67:	jmp    0x102dac0
 104ca6c:	int3   
 104ca6d:	int3   
 104ca6e:	int3   
 104ca6f:	int3   
 104ca70:	lea    rcx,[rdx+0xd8]
 104ca77:	jmp    0x102dac0
 104ca7c:	int3   
 104ca7d:	int3   
 104ca7e:	int3   
 104ca7f:	int3   
 104ca80:	lea    rcx,[rdx+0xd0]
 104ca87:	jmp    0x102dac0
 104ca8c:	int3   
 104ca8d:	int3   
 104ca8e:	int3   
 104ca8f:	int3   
 104ca90:	lea    rcx,[rdx+0xc0]
 104ca97:	jmp    0x102dac0
 104ca9c:	int3   
 104ca9d:	int3   
 104ca9e:	int3   
 104ca9f:	int3   
 104caa0:	lea    rcx,[rdx+0xc8]
 104caa7:	jmp    0x102dac0
 104caac:	int3   
 104caad:	int3   
 104caae:	int3   
 104caaf:	int3   
 104cab0:	lea    rcx,[rdx+0x50]
 104cab7:	jmp    0x102dac0
 104cabc:	int3   
 104cabd:	int3   
 104cabe:	int3   
 104cabf:	int3   
 104cac0:	lea    rcx,[rdx+0x58]
 104cac7:	jmp    0x102dac0
 104cacc:	int3   
 104cacd:	int3   
 104cace:	int3   
 104cacf:	int3   
 104cad0:	lea    rcx,[rdx+0x60]
 104cad7:	jmp    0x102dac0
 104cadc:	int3   
 104cadd:	int3   
 104cade:	int3   
 104cadf:	int3   
 104cae0:	int3   
 104cae1:	int3   
 104cae2:	int3   
 104cae3:	int3   
 104cae4:	int3   
 104cae5:	int3   
 104cae6:	int3   
 104cae7:	int3   
 104cae8:	int3   
 104cae9:	int3   
 104caea:	int3   
 104caeb:	int3   
 104caec:	int3   
 104caed:	int3   
 104caee:	int3   
 104caef:	int3   
 104caf0:	lea    rcx,[rdx+0x68]
 104caf7:	jmp    0x102dac0
 104cafc:	int3   
 104cafd:	int3   
 104cafe:	int3   
 104caff:	int3   
 104cb00:	lea    rcx,[rdx+0xb8]
 104cb07:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4f9a]        # 0x1001aa8
 104cb0e:	int3   
 104cb0f:	int3   
 104cb10:	lea    rcx,[rdx+0xd8]
 104cb17:	jmp    0x1012ae0
 104cb1c:	int3   
 104cb1d:	int3   
 104cb1e:	int3   
 104cb1f:	int3   
 104cb20:	lea    rcx,[rdx+0x110]
 104cb27:	jmp    0x100c4f0
 104cb2c:	int3   
 104cb2d:	int3   
 104cb2e:	int3   
 104cb2f:	int3   
 104cb30:	lea    rcx,[rdx+0x78]
 104cb37:	jmp    0x100c4f0
 104cb3c:	int3   
 104cb3d:	int3   
 104cb3e:	int3   
 104cb3f:	int3   
 104cb40:	lea    rcx,[rdx+0x58]
 104cb47:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4f5a]        # 0x1001aa8
 104cb4e:	int3   
 104cb4f:	int3   
 104cb50:	lea    rcx,[rdx+0x60]
 104cb57:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4f4a]        # 0x1001aa8
 104cb5e:	int3   
 104cb5f:	int3   
 104cb60:	mov    rcx,QWORD PTR [rdx+0x58]
 104cb67:	jmp    0x100ebf0
 104cb6c:	int3   
 104cb6d:	int3   
 104cb6e:	int3   
 104cb6f:	int3   
 104cb70:	mov    rcx,QWORD PTR [rdx+0x58]
 104cb77:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4f2a]        # 0x1001aa8
 104cb7e:	int3   
 104cb7f:	int3   
 104cb80:	mov    rcx,QWORD PTR [rdx+0x58]
 104cb87:	add    rcx,0x8
 104cb8b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4f16]        # 0x1001aa8
 104cb92:	int3   
 104cb93:	int3   
 104cb94:	int3   
 104cb95:	int3   
 104cb96:	int3   
 104cb97:	int3   
 104cb98:	int3   
 104cb99:	int3   
 104cb9a:	int3   
 104cb9b:	int3   
 104cb9c:	int3   
 104cb9d:	int3   
 104cb9e:	int3   
 104cb9f:	int3   
 104cba0:	lea    rcx,[rdx+0x60]
 104cba7:	jmp    0x102dac0
 104cbac:	int3   
 104cbad:	int3   
 104cbae:	int3   
 104cbaf:	int3   
 104cbb0:	lea    rcx,[rdx+0xc0]
 104cbb7:	jmp    0x102dac0
 104cbbc:	int3   
 104cbbd:	int3   
 104cbbe:	int3   
 104cbbf:	int3   
 104cbc0:	lea    rcx,[rdx+0xd0]
 104cbc7:	jmp    0x102dac0
 104cbcc:	int3   
 104cbcd:	int3   
 104cbce:	int3   
 104cbcf:	int3   
 104cbd0:	lea    rcx,[rdx+0x48]
 104cbd7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4eca]        # 0x1001aa8
 104cbde:	int3   
 104cbdf:	int3   
 104cbe0:	lea    rcx,[rdx+0x158]
 104cbe7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4eba]        # 0x1001aa8
 104cbee:	int3   
 104cbef:	int3   
 104cbf0:	lea    rcx,[rdx+0x160]
 104cbf7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4eaa]        # 0x1001aa8
 104cbfe:	int3   
 104cbff:	int3   
 104cc00:	lea    rcx,[rdx+0x148]
 104cc07:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4e9a]        # 0x1001aa8
 104cc0e:	int3   
 104cc0f:	int3   
 104cc10:	mov    rcx,QWORD PTR [rdx+0x150]
 104cc17:	jmp    0x103f95a
 104cc1c:	int3   
 104cc1d:	int3   
 104cc1e:	int3   
 104cc1f:	int3   
 104cc20:	lea    rcx,[rdx+0xc8]
 104cc27:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4e7a]        # 0x1001aa8
 104cc2e:	int3   
 104cc2f:	int3   
 104cc30:	lea    rcx,[rdx+0x58]
 104cc37:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4e6a]        # 0x1001aa8
 104cc3e:	int3   
 104cc3f:	int3   
 104cc40:	mov    rcx,QWORD PTR [rdx+0x150]
 104cc47:	jmp    0x103f95a
 104cc4c:	int3   
 104cc4d:	int3   
 104cc4e:	int3   
 104cc4f:	int3   
 104cc50:	mov    rcx,QWORD PTR [rdx+0x150]
 104cc57:	jmp    0x103f95a
 104cc5c:	int3   
 104cc5d:	int3   
 104cc5e:	int3   
 104cc5f:	int3   
 104cc60:	mov    rcx,QWORD PTR [rdx+0x148]
 104cc67:	jmp    0x100ebf0
 104cc6c:	int3   
 104cc6d:	int3   
 104cc6e:	int3   
 104cc6f:	int3   
 104cc70:	mov    rcx,QWORD PTR [rdx+0x148]
 104cc77:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4e2a]        # 0x1001aa8
 104cc7e:	int3   
 104cc7f:	int3   
 104cc80:	mov    rcx,QWORD PTR [rdx+0x148]
 104cc87:	add    rcx,0x8
 104cc8b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4e16]        # 0x1001aa8
 104cc92:	int3   
 104cc93:	int3   
 104cc94:	int3   
 104cc95:	int3   
 104cc96:	int3   
 104cc97:	int3   
 104cc98:	int3   
 104cc99:	int3   
 104cc9a:	int3   
 104cc9b:	int3   
 104cc9c:	int3   
 104cc9d:	int3   
 104cc9e:	int3   
 104cc9f:	int3   
 104cca0:	lea    rcx,[rdx+0x68]
 104cca7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4dfa]        # 0x1001aa8
 104ccae:	int3   
 104ccaf:	int3   
 104ccb0:	lea    rcx,[rdx+0x78]
 104ccb7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4dea]        # 0x1001aa8
 104ccbe:	int3   
 104ccbf:	int3   
 104ccc0:	lea    rcx,[rdx+0x70]
 104ccc7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4dda]        # 0x1001aa8
 104ccce:	int3   
 104cccf:	int3   
 104ccd0:	int3   
 104ccd1:	int3   
 104ccd2:	int3   
 104ccd3:	int3   
 104ccd4:	int3   
 104ccd5:	int3   
 104ccd6:	int3   
 104ccd7:	int3   
 104ccd8:	int3   
 104ccd9:	int3   
 104ccda:	int3   
 104ccdb:	int3   
 104ccdc:	int3   
 104ccdd:	int3   
 104ccde:	int3   
 104ccdf:	int3   
 104cce0:	lea    rcx,[rdx+0x60]
 104cce7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4dba]        # 0x1001aa8
 104ccee:	int3   
 104ccef:	int3   
 104ccf0:	lea    rcx,[rdx+0x58]
 104ccf7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4daa]        # 0x1001aa8
 104ccfe:	int3   
 104ccff:	int3   
 104cd00:	lea    rcx,[rdx+0x48]
 104cd07:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4d9a]        # 0x1001aa8
 104cd0e:	int3   
 104cd0f:	int3   
 104cd10:	lea    rcx,[rdx+0x90]
 104cd17:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4d8a]        # 0x1001aa8
 104cd1e:	int3   
 104cd1f:	int3   
 104cd20:	lea    rcx,[rdx+0x50]
 104cd27:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4d7a]        # 0x1001aa8
 104cd2e:	int3   
 104cd2f:	int3   
 104cd30:	lea    rcx,[rdx+0x80]
 104cd37:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4d6a]        # 0x1001aa8
 104cd3e:	int3   
 104cd3f:	int3   
 104cd40:	lea    rcx,[rdx+0x70]
 104cd47:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4d5a]        # 0x1001aa8
 104cd4e:	int3   
 104cd4f:	int3   
 104cd50:	lea    rcx,[rdx+0x90]
 104cd57:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4d4a]        # 0x1001aa8
 104cd5e:	int3   
 104cd5f:	int3   
 104cd60:	lea    rcx,[rdx+0x78]
 104cd67:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4d3a]        # 0x1001aa8
 104cd6e:	int3   
 104cd6f:	int3   
 104cd70:	lea    rcx,[rdx+0x50]
 104cd77:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4d2a]        # 0x1001aa8
 104cd7e:	int3   
 104cd7f:	int3   
 104cd80:	lea    rcx,[rdx+0x80]
 104cd87:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4d1a]        # 0x1001aa8
 104cd8e:	int3   
 104cd8f:	int3   
 104cd90:	int3   
 104cd91:	int3   
 104cd92:	int3   
 104cd93:	int3   
 104cd94:	int3   
 104cd95:	int3   
 104cd96:	int3   
 104cd97:	int3   
 104cd98:	int3   
 104cd99:	int3   
 104cd9a:	int3   
 104cd9b:	int3   
 104cd9c:	int3   
 104cd9d:	int3   
 104cd9e:	int3   
 104cd9f:	int3   
 104cda0:	lea    rcx,[rdx+0x58]
 104cda7:	jmp    0x102daf0
 104cdac:	int3   
 104cdad:	int3   
 104cdae:	int3   
 104cdaf:	int3   
 104cdb0:	lea    rcx,[rdx+0x68]
 104cdb7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4cea]        # 0x1001aa8
 104cdbe:	int3   
 104cdbf:	int3   
 104cdc0:	lea    rcx,[rdx+0x50]
 104cdc7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4cda]        # 0x1001aa8
 104cdce:	int3   
 104cdcf:	int3   
 104cdd0:	lea    rcx,[rdx+0x48]
 104cdd7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4cca]        # 0x1001aa8
 104cdde:	int3   
 104cddf:	int3   
 104cde0:	lea    rcx,[rdx+0x60]
 104cde7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4cba]        # 0x1001aa8
 104cdee:	int3   
 104cdef:	int3   
 104cdf0:	int3   
 104cdf1:	int3   
 104cdf2:	int3   
 104cdf3:	int3   
 104cdf4:	int3   
 104cdf5:	int3   
 104cdf6:	int3   
 104cdf7:	int3   
 104cdf8:	int3   
 104cdf9:	int3   
 104cdfa:	int3   
 104cdfb:	int3   
 104cdfc:	int3   
 104cdfd:	int3   
 104cdfe:	int3   
 104cdff:	int3   
 104ce00:	lea    rcx,[rdx+0x68]
 104ce07:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4c9a]        # 0x1001aa8
 104ce0e:	int3   
 104ce0f:	int3   
 104ce10:	lea    rcx,[rdx+0x58]
 104ce17:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4c8a]        # 0x1001aa8
 104ce1e:	int3   
 104ce1f:	int3   
 104ce20:	lea    rcx,[rdx+0x78]
 104ce27:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4c7a]        # 0x1001aa8
 104ce2e:	int3   
 104ce2f:	int3   
 104ce30:	lea    rcx,[rdx+0x60]
 104ce37:	jmp    0x102daf0
 104ce3c:	int3   
 104ce3d:	int3   
 104ce3e:	int3   
 104ce3f:	int3   
 104ce40:	lea    rcx,[rdx+0x40]
 104ce47:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4c5a]        # 0x1001aa8
 104ce4e:	int3   
 104ce4f:	int3   
 104ce50:	lea    rcx,[rdx+0x90]
 104ce57:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4c4a]        # 0x1001aa8
 104ce5e:	int3   
 104ce5f:	int3   
 104ce60:	lea    rcx,[rdx+0x50]
 104ce67:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4c3a]        # 0x1001aa8
 104ce6e:	int3   
 104ce6f:	int3   
 104ce70:	lea    rcx,[rdx+0xa0]
 104ce77:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4c2a]        # 0x1001aa8
 104ce7e:	int3   
 104ce7f:	int3   
 104ce80:	lea    rcx,[rdx+0x98]
 104ce87:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4c1a]        # 0x1001aa8
 104ce8e:	int3   
 104ce8f:	int3   
 104ce90:	lea    rcx,[rdx+0x80]
 104ce97:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4c0a]        # 0x1001aa8
 104ce9e:	int3   
 104ce9f:	int3   
 104cea0:	lea    rcx,[rdx+0x88]
 104cea7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4bfa]        # 0x1001aa8
 104ceae:	int3   
 104ceaf:	int3   
 104ceb0:	lea    rcx,[rdx+0x50]
 104ceb7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4bea]        # 0x1001aa8
 104cebe:	int3   
 104cebf:	int3   
 104cec0:	lea    rcx,[rdx+0x40]
 104cec7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4bda]        # 0x1001aa8
 104cece:	int3   
 104cecf:	int3   
 104ced0:	rex push rbp
 104ced2:	sub    rsp,0x20
 104ced6:	mov    rbp,rdx
 104ced9:	mov    eax,DWORD PTR [rbp+0x74]
 104cedc:	and    eax,0x1
 104cedf:	test   eax,eax
 104cee1:	je     0x104cef4
 104cee3:	and    DWORD PTR [rbp+0x74],0xfffffffe
 104cee7:	lea    rcx,[rbp+0x88]
 104ceee:	call   QWORD PTR [rip+0xfffffffffffb4bb4]        # 0x1001aa8
 104cef4:	add    rsp,0x20
 104cef8:	pop    rbp
 104cef9:	ret    
 104cefa:	int3   
 104cefb:	int3   
 104cefc:	int3   
 104cefd:	int3   
 104cefe:	int3   
 104ceff:	int3   
 104cf00:	lea    rcx,[rdx+0x60]
 104cf07:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4b9a]        # 0x1001aa8
 104cf0e:	int3   
 104cf0f:	int3   
 104cf10:	lea    rcx,[rdx+0x80]
 104cf17:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4b8a]        # 0x1001aa8
 104cf1e:	int3   
 104cf1f:	int3   
 104cf20:	int3   
 104cf21:	int3   
 104cf22:	int3   
 104cf23:	int3   
 104cf24:	int3   
 104cf25:	int3   
 104cf26:	int3   
 104cf27:	int3   
 104cf28:	int3   
 104cf29:	int3   
 104cf2a:	int3   
 104cf2b:	int3   
 104cf2c:	int3   
 104cf2d:	int3   
 104cf2e:	int3   
 104cf2f:	int3   
 104cf30:	mov    rcx,QWORD PTR [rdx+0x70]
 104cf37:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4b6a]        # 0x1001aa8
 104cf3e:	int3   
 104cf3f:	int3   
 104cf40:	lea    rcx,[rdx+0x38]
 104cf47:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4b5a]        # 0x1001aa8
 104cf4e:	int3   
 104cf4f:	int3   
 104cf50:	lea    rcx,[rdx+0x48]
 104cf57:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4b4a]        # 0x1001aa8
 104cf5e:	int3   
 104cf5f:	int3   
 104cf60:	mov    rcx,QWORD PTR [rdx+0x60]
 104cf67:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4b3a]        # 0x1001aa8
 104cf6e:	int3   
 104cf6f:	int3   
 104cf70:	lea    rcx,[rdx+0x48]
 104cf77:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4b2a]        # 0x1001aa8
 104cf7e:	int3   
 104cf7f:	int3   
 104cf80:	lea    rcx,[rdx+0x60]
 104cf87:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4b1a]        # 0x1001aa8
 104cf8e:	int3   
 104cf8f:	int3   
 104cf90:	int3   
 104cf91:	int3   
 104cf92:	int3   
 104cf93:	int3   
 104cf94:	int3   
 104cf95:	int3   
 104cf96:	int3   
 104cf97:	int3   
 104cf98:	int3   
 104cf99:	int3   
 104cf9a:	int3   
 104cf9b:	int3   
 104cf9c:	int3   
 104cf9d:	int3   
 104cf9e:	int3   
 104cf9f:	int3   
 104cfa0:	mov    rcx,QWORD PTR [rdx+0xd0]
 104cfa7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4afa]        # 0x1001aa8
 104cfae:	int3   
 104cfaf:	int3   
 104cfb0:	lea    rcx,[rdx+0xd8]
 104cfb7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4aea]        # 0x1001aa8
 104cfbe:	int3   
 104cfbf:	int3   
 104cfc0:	lea    rcx,[rdx+0x40]
 104cfc7:	jmp    0x100c4f0
 104cfcc:	int3   
 104cfcd:	int3   
 104cfce:	int3   
 104cfcf:	int3   
 104cfd0:	mov    rcx,QWORD PTR [rdx+0x38]
 104cfd7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4aca]        # 0x1001aa8
 104cfde:	int3   
 104cfdf:	int3   
 104cfe0:	mov    rcx,QWORD PTR [rdx+0x38]
 104cfe7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4aba]        # 0x1001aa8
 104cfee:	int3   
 104cfef:	int3   
 104cff0:	mov    rcx,QWORD PTR [rdx+0x38]
 104cff7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4aaa]        # 0x1001aa8
 104cffe:	int3   
 104cfff:	int3   
 104d000:	mov    rcx,QWORD PTR [rdx+0x38]
 104d007:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4a9a]        # 0x1001aa8
 104d00e:	int3   
 104d00f:	int3   
 104d010:	mov    rcx,QWORD PTR [rdx+0x88]
 104d017:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4a8a]        # 0x1001aa8
 104d01e:	int3   
 104d01f:	int3   
 104d020:	mov    rcx,QWORD PTR [rdx+0x80]
 104d027:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4a7a]        # 0x1001aa8
 104d02e:	int3   
 104d02f:	int3   
 104d030:	int3   
 104d031:	int3   
 104d032:	int3   
 104d033:	int3   
 104d034:	int3   
 104d035:	int3   
 104d036:	int3   
 104d037:	int3   
 104d038:	int3   
 104d039:	int3   
 104d03a:	int3   
 104d03b:	int3   
 104d03c:	int3   
 104d03d:	int3   
 104d03e:	int3   
 104d03f:	int3   
 104d040:	mov    rcx,QWORD PTR [rdx+0xa0]
 104d047:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4a5a]        # 0x1001aa8
 104d04e:	int3   
 104d04f:	int3   
 104d050:	lea    rcx,[rdx+0x38]
 104d057:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4a4a]        # 0x1001aa8
 104d05e:	int3   
 104d05f:	int3   
 104d060:	mov    rcx,QWORD PTR [rdx+0x48]
 104d067:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4a3a]        # 0x1001aa8
 104d06e:	int3   
 104d06f:	int3   
 104d070:	mov    rcx,QWORD PTR [rdx+0x58]
 104d077:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4a2a]        # 0x1001aa8
 104d07e:	int3   
 104d07f:	int3   
 104d080:	lea    rcx,[rdx+0x30]
 104d087:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4a1a]        # 0x1001aa8
 104d08e:	int3   
 104d08f:	int3   
 104d090:	lea    rcx,[rdx+0x48]
 104d097:	rex.W jmp QWORD PTR [rip+0xfffffffffffb4a0a]        # 0x1001aa8
 104d09e:	int3   
 104d09f:	int3   
 104d0a0:	lea    rcx,[rdx+0x40]
 104d0a7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb49fa]        # 0x1001aa8
 104d0ae:	int3   
 104d0af:	int3   
 104d0b0:	lea    rcx,[rdx+0x48]
 104d0b7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb49ea]        # 0x1001aa8
 104d0be:	int3   
 104d0bf:	int3   
 104d0c0:	int3   
 104d0c1:	int3   
 104d0c2:	int3   
 104d0c3:	int3   
 104d0c4:	int3   
 104d0c5:	int3   
 104d0c6:	int3   
 104d0c7:	int3   
 104d0c8:	int3   
 104d0c9:	int3   
 104d0ca:	int3   
 104d0cb:	int3   
 104d0cc:	int3   
 104d0cd:	int3   
 104d0ce:	int3   
 104d0cf:	int3   
 104d0d0:	lea    rcx,[rdx+0x30]
 104d0d7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb49ca]        # 0x1001aa8
 104d0de:	int3   
 104d0df:	int3   
 104d0e0:	lea    rcx,[rdx+0x38]
 104d0e7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb49ba]        # 0x1001aa8
 104d0ee:	int3   
 104d0ef:	int3   
 104d0f0:	lea    rcx,[rdx+0x40]
 104d0f7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb49aa]        # 0x1001aa8
 104d0fe:	int3   
 104d0ff:	int3   
 104d100:	lea    rcx,[rdx+0x68]
 104d107:	jmp    0x102d9b0
 104d10c:	int3   
 104d10d:	int3   
 104d10e:	int3   
 104d10f:	int3   
 104d110:	lea    rcx,[rdx+0x58]
 104d117:	rex.W jmp QWORD PTR [rip+0xfffffffffffb498a]        # 0x1001aa8
 104d11e:	int3   
 104d11f:	int3   
 104d120:	lea    rcx,[rdx+0x50]
 104d127:	rex.W jmp QWORD PTR [rip+0xfffffffffffb497a]        # 0x1001aa8
 104d12e:	int3   
 104d12f:	int3   
 104d130:	mov    rcx,QWORD PTR [rdx+0x48]
 104d137:	jmp    0x103f95a
 104d13c:	int3   
 104d13d:	int3   
 104d13e:	int3   
 104d13f:	int3   
 104d140:	lea    rcx,[rdx+0x98]
 104d147:	rex.W jmp QWORD PTR [rip+0xfffffffffffb495a]        # 0x1001aa8
 104d14e:	int3   
 104d14f:	int3   
 104d150:	lea    rcx,[rdx+0x90]
 104d157:	rex.W jmp QWORD PTR [rip+0xfffffffffffb494a]        # 0x1001aa8
 104d15e:	int3   
 104d15f:	int3   
 104d160:	lea    rcx,[rdx+0x60]
 104d167:	rex.W jmp QWORD PTR [rip+0xfffffffffffb493a]        # 0x1001aa8
 104d16e:	int3   
 104d16f:	int3   
 104d170:	int3   
 104d171:	int3   
 104d172:	int3   
 104d173:	int3   
 104d174:	int3   
 104d175:	int3   
 104d176:	int3   
 104d177:	int3   
 104d178:	int3   
 104d179:	int3   
 104d17a:	int3   
 104d17b:	int3   
 104d17c:	int3   
 104d17d:	int3   
 104d17e:	int3   
 104d17f:	int3   
 104d180:	rex push rbp
 104d182:	sub    rsp,0x20
 104d186:	mov    rbp,rdx
 104d189:	mov    eax,DWORD PTR [rbp+0x20]
 104d18c:	and    eax,0x1
 104d18f:	test   eax,eax
 104d191:	je     0x104d1a1
 104d193:	and    DWORD PTR [rbp+0x20],0xfffffffe
 104d197:	mov    rcx,QWORD PTR [rbp+0x48]
 104d19b:	call   QWORD PTR [rip+0xfffffffffffb4907]        # 0x1001aa8
 104d1a1:	add    rsp,0x20
 104d1a5:	pop    rbp
 104d1a6:	ret    
 104d1a7:	int3   
 104d1a8:	int3   
 104d1a9:	int3   
 104d1aa:	int3   
 104d1ab:	int3   
 104d1ac:	int3   
 104d1ad:	int3   
 104d1ae:	int3   
 104d1af:	int3   
 104d1b0:	lea    rcx,[rdx+0x58]
 104d1b7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb48ea]        # 0x1001aa8
 104d1be:	int3   
 104d1bf:	int3   
 104d1c0:	lea    rcx,[rdx+0x30]
 104d1c7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb48da]        # 0x1001aa8
 104d1ce:	int3   
 104d1cf:	int3   
 104d1d0:	mov    rcx,QWORD PTR [rdx+0x60]
 104d1d7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb48ca]        # 0x1001aa8
 104d1de:	int3   
 104d1df:	int3   
 104d1e0:	lea    rcx,[rdx+0x30]
 104d1e7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb48ba]        # 0x1001aa8
 104d1ee:	int3   
 104d1ef:	int3   
 104d1f0:	lea    rcx,[rdx+0x30]
 104d1f7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb48aa]        # 0x1001aa8
 104d1fe:	int3   
 104d1ff:	int3   
 104d200:	lea    rcx,[rdx+0x30]
 104d207:	rex.W jmp QWORD PTR [rip+0xfffffffffffb489a]        # 0x1001aa8
 104d20e:	int3   
 104d20f:	int3   
 104d210:	lea    rcx,[rdx+0x30]
 104d217:	rex.W jmp QWORD PTR [rip+0xfffffffffffb488a]        # 0x1001aa8
 104d21e:	int3   
 104d21f:	int3   
 104d220:	mov    rcx,QWORD PTR [rdx+0x68]
 104d227:	rex.W jmp QWORD PTR [rip+0xfffffffffffb487a]        # 0x1001aa8
 104d22e:	int3   
 104d22f:	int3   
 104d230:	lea    rcx,[rdx+0x30]
 104d237:	rex.W jmp QWORD PTR [rip+0xfffffffffffb486a]        # 0x1001aa8
 104d23e:	int3   
 104d23f:	int3   
 104d240:	lea    rcx,[rdx+0x30]
 104d247:	rex.W jmp QWORD PTR [rip+0xfffffffffffb485a]        # 0x1001aa8
 104d24e:	int3   
 104d24f:	int3   
 104d250:	lea    rcx,[rdx+0x30]
 104d257:	rex.W jmp QWORD PTR [rip+0xfffffffffffb484a]        # 0x1001aa8
 104d25e:	int3   
 104d25f:	int3   
 104d260:	lea    rcx,[rdx+0x30]
 104d267:	rex.W jmp QWORD PTR [rip+0xfffffffffffb483a]        # 0x1001aa8
 104d26e:	int3   
 104d26f:	int3   
 104d270:	mov    rcx,QWORD PTR [rdx+0x68]
 104d277:	rex.W jmp QWORD PTR [rip+0xfffffffffffb482a]        # 0x1001aa8
 104d27e:	int3   
 104d27f:	int3   
 104d280:	lea    rcx,[rdx+0x30]
 104d287:	rex.W jmp QWORD PTR [rip+0xfffffffffffb481a]        # 0x1001aa8
 104d28e:	int3   
 104d28f:	int3   
 104d290:	lea    rcx,[rdx+0x30]
 104d297:	rex.W jmp QWORD PTR [rip+0xfffffffffffb480a]        # 0x1001aa8
 104d29e:	int3   
 104d29f:	int3   
 104d2a0:	lea    rcx,[rdx+0x30]
 104d2a7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb47fa]        # 0x1001aa8
 104d2ae:	int3   
 104d2af:	int3   
 104d2b0:	lea    rcx,[rdx+0x30]
 104d2b7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb47ea]        # 0x1001aa8
 104d2be:	int3   
 104d2bf:	int3   
 104d2c0:	int3   
 104d2c1:	int3   
 104d2c2:	int3   
 104d2c3:	int3   
 104d2c4:	int3   
 104d2c5:	int3   
 104d2c6:	int3   
 104d2c7:	int3   
 104d2c8:	int3   
 104d2c9:	int3   
 104d2ca:	int3   
 104d2cb:	int3   
 104d2cc:	int3   
 104d2cd:	int3   
 104d2ce:	int3   
 104d2cf:	int3   
 104d2d0:	rex push rbp
 104d2d2:	sub    rsp,0x20
 104d2d6:	mov    rbp,rdx
 104d2d9:	mov    eax,DWORD PTR [rbp+0x20]
 104d2dc:	and    eax,0x1
 104d2df:	test   eax,eax
 104d2e1:	je     0x104d2f1
 104d2e3:	and    DWORD PTR [rbp+0x20],0xfffffffe
 104d2e7:	mov    rcx,QWORD PTR [rbp+0x48]
 104d2eb:	call   QWORD PTR [rip+0xfffffffffffb47b7]        # 0x1001aa8
 104d2f1:	add    rsp,0x20
 104d2f5:	pop    rbp
 104d2f6:	ret    
 104d2f7:	int3   
 104d2f8:	int3   
 104d2f9:	int3   
 104d2fa:	int3   
 104d2fb:	int3   
 104d2fc:	int3   
 104d2fd:	int3   
 104d2fe:	int3   
 104d2ff:	int3   
 104d300:	mov    rcx,QWORD PTR [rdx+0xb8]
 104d307:	rex.W jmp QWORD PTR [rip+0xfffffffffffb479a]        # 0x1001aa8
 104d30e:	int3   
 104d30f:	int3   
 104d310:	mov    rcx,QWORD PTR [rdx+0xb0]
 104d317:	rex.W jmp QWORD PTR [rip+0xfffffffffffb478a]        # 0x1001aa8
 104d31e:	int3   
 104d31f:	int3   
 104d320:	lea    rcx,[rdx+0x38]
 104d327:	rex.W jmp QWORD PTR [rip+0xfffffffffffb477a]        # 0x1001aa8
 104d32e:	int3   
 104d32f:	int3   
 104d330:	mov    rcx,QWORD PTR [rdx+0x50]
 104d337:	rex.W jmp QWORD PTR [rip+0xfffffffffffb476a]        # 0x1001aa8
 104d33e:	int3   
 104d33f:	int3   
 104d340:	mov    rcx,QWORD PTR [rdx+0x50]
 104d347:	rex.W jmp QWORD PTR [rip+0xfffffffffffb475a]        # 0x1001aa8
 104d34e:	int3   
 104d34f:	int3   
 104d350:	mov    rcx,QWORD PTR [rdx+0x60]
 104d357:	rex.W jmp QWORD PTR [rip+0xfffffffffffb474a]        # 0x1001aa8
 104d35e:	int3   
 104d35f:	int3   
 104d360:	lea    rcx,[rdx+0x40]
 104d367:	rex.W jmp QWORD PTR [rip+0xfffffffffffb473a]        # 0x1001aa8
 104d36e:	int3   
 104d36f:	int3   
 104d370:	lea    rcx,[rdx+0x50]
 104d377:	rex.W jmp QWORD PTR [rip+0xfffffffffffb472a]        # 0x1001aa8
 104d37e:	int3   
 104d37f:	int3   
 104d380:	lea    rcx,[rdx+0x48]
 104d387:	rex.W jmp QWORD PTR [rip+0xfffffffffffb471a]        # 0x1001aa8
 104d38e:	int3   
 104d38f:	int3   
 104d390:	lea    rcx,[rdx+0x50]
 104d397:	rex.W jmp QWORD PTR [rip+0xfffffffffffb470a]        # 0x1001aa8
 104d39e:	int3   
 104d39f:	int3   
 104d3a0:	int3   
 104d3a1:	int3   
 104d3a2:	int3   
 104d3a3:	int3   
 104d3a4:	int3   
 104d3a5:	int3   
 104d3a6:	int3   
 104d3a7:	int3   
 104d3a8:	int3   
 104d3a9:	int3   
 104d3aa:	int3   
 104d3ab:	int3   
 104d3ac:	int3   
 104d3ad:	int3   
 104d3ae:	int3   
 104d3af:	int3   
 104d3b0:	lea    rcx,[rdx+0x40]
 104d3b7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb46ea]        # 0x1001aa8
 104d3be:	int3   
 104d3bf:	int3   
 104d3c0:	lea    rcx,[rdx+0x38]
 104d3c7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb46da]        # 0x1001aa8
 104d3ce:	int3   
 104d3cf:	int3   
 104d3d0:	rex push rbp
 104d3d2:	sub    rsp,0x20
 104d3d6:	mov    rbp,rdx
 104d3d9:	mov    eax,DWORD PTR [rbp+0x30]
 104d3dc:	and    eax,0x1
 104d3df:	test   eax,eax
 104d3e1:	je     0x104d3f1
 104d3e3:	and    DWORD PTR [rbp+0x30],0xfffffffe
 104d3e7:	mov    rcx,QWORD PTR [rbp+0x78]
 104d3eb:	call   QWORD PTR [rip+0xfffffffffffb46b7]        # 0x1001aa8
 104d3f1:	add    rsp,0x20
 104d3f5:	pop    rbp
 104d3f6:	ret    
 104d3f7:	int3   
 104d3f8:	int3   
 104d3f9:	int3   
 104d3fa:	int3   
 104d3fb:	int3   
 104d3fc:	int3   
 104d3fd:	int3   
 104d3fe:	int3   
 104d3ff:	int3   
 104d400:	lea    rcx,[rdx+0x88]
 104d407:	rex.W jmp QWORD PTR [rip+0xfffffffffffb469a]        # 0x1001aa8
 104d40e:	int3   
 104d40f:	int3   
 104d410:	lea    rcx,[rdx+0x70]
 104d417:	rex.W jmp QWORD PTR [rip+0xfffffffffffb468a]        # 0x1001aa8
 104d41e:	int3   
 104d41f:	int3   
 104d420:	lea    rcx,[rdx+0x88]
 104d427:	rex.W jmp QWORD PTR [rip+0xfffffffffffb467a]        # 0x1001aa8
 104d42e:	int3   
 104d42f:	int3   
 104d430:	int3   
 104d431:	int3   
 104d432:	int3   
 104d433:	int3   
 104d434:	int3   
 104d435:	int3   
 104d436:	int3   
 104d437:	int3   
 104d438:	int3   
 104d439:	int3   
 104d43a:	int3   
 104d43b:	int3   
 104d43c:	int3   
 104d43d:	int3   
 104d43e:	int3   
 104d43f:	int3   
 104d440:	rex push rbp
 104d442:	sub    rsp,0x20
 104d446:	mov    rbp,rdx
 104d449:	mov    eax,DWORD PTR [rbp+0x20]
 104d44c:	and    eax,0x1
 104d44f:	test   eax,eax
 104d451:	je     0x104d461
 104d453:	and    DWORD PTR [rbp+0x20],0xfffffffe
 104d457:	mov    rcx,QWORD PTR [rbp+0x78]
 104d45b:	call   QWORD PTR [rip+0xfffffffffffb4647]        # 0x1001aa8
 104d461:	add    rsp,0x20
 104d465:	pop    rbp
 104d466:	ret    
 104d467:	int3   
 104d468:	int3   
 104d469:	int3   
 104d46a:	int3   
 104d46b:	int3   
 104d46c:	int3   
 104d46d:	int3   
 104d46e:	int3   
 104d46f:	int3   
 104d470:	lea    rcx,[rdx+0x88]
 104d477:	rex.W jmp QWORD PTR [rip+0xfffffffffffb462a]        # 0x1001aa8
 104d47e:	int3   
 104d47f:	int3   
 104d480:	rex push rbp
 104d482:	sub    rsp,0x20
 104d486:	mov    rbp,rdx
 104d489:	mov    eax,DWORD PTR [rbp+0x20]
 104d48c:	and    eax,0x2
 104d48f:	test   eax,eax
 104d491:	je     0x104d4a1
 104d493:	and    DWORD PTR [rbp+0x20],0xfffffffd
 104d497:	lea    rcx,[rbp+0x40]
 104d49b:	call   QWORD PTR [rip+0xfffffffffffb4607]        # 0x1001aa8
 104d4a1:	add    rsp,0x20
 104d4a5:	pop    rbp
 104d4a6:	ret    
 104d4a7:	int3   
 104d4a8:	int3   
 104d4a9:	int3   
 104d4aa:	int3   
 104d4ab:	int3   
 104d4ac:	int3   
 104d4ad:	int3   
 104d4ae:	int3   
 104d4af:	int3   
 104d4b0:	rex push rbp
 104d4b2:	sub    rsp,0x20
 104d4b6:	mov    rbp,rdx
 104d4b9:	mov    eax,DWORD PTR [rbp+0x20]
 104d4bc:	and    eax,0x4
 104d4bf:	test   eax,eax
 104d4c1:	je     0x104d4d1
 104d4c3:	and    DWORD PTR [rbp+0x20],0xfffffffb
 104d4c7:	lea    rcx,[rbp+0x38]
 104d4cb:	call   QWORD PTR [rip+0xfffffffffffb45d7]        # 0x1001aa8
 104d4d1:	add    rsp,0x20
 104d4d5:	pop    rbp
 104d4d6:	ret    
 104d4d7:	int3   
 104d4d8:	int3   
 104d4d9:	int3   
 104d4da:	int3   
 104d4db:	int3   
 104d4dc:	int3   
 104d4dd:	int3   
 104d4de:	int3   
 104d4df:	int3   
 104d4e0:	rex push rbp
 104d4e2:	sub    rsp,0x20
 104d4e6:	mov    rbp,rdx
 104d4e9:	mov    eax,DWORD PTR [rbp+0x20]
 104d4ec:	and    eax,0x8
 104d4ef:	test   eax,eax
 104d4f1:	je     0x104d501
 104d4f3:	and    DWORD PTR [rbp+0x20],0xfffffff7
 104d4f7:	lea    rcx,[rbp+0x30]
 104d4fb:	call   QWORD PTR [rip+0xfffffffffffb45a7]        # 0x1001aa8
 104d501:	add    rsp,0x20
 104d505:	pop    rbp
 104d506:	ret    
 104d507:	int3   
 104d508:	int3   
 104d509:	int3   
 104d50a:	int3   
 104d50b:	int3   
 104d50c:	int3   
 104d50d:	int3   
 104d50e:	int3   
 104d50f:	int3   
 104d510:	rex push rbp
 104d512:	sub    rsp,0x20
 104d516:	mov    rbp,rdx
 104d519:	mov    eax,DWORD PTR [rbp+0x20]
 104d51c:	and    eax,0x10
 104d51f:	test   eax,eax
 104d521:	je     0x104d531
 104d523:	and    DWORD PTR [rbp+0x20],0xffffffef
 104d527:	lea    rcx,[rbp+0x28]
 104d52b:	call   QWORD PTR [rip+0xfffffffffffb4577]        # 0x1001aa8
 104d531:	add    rsp,0x20
 104d535:	pop    rbp
 104d536:	ret    
 104d537:	int3   
 104d538:	int3   
 104d539:	int3   
 104d53a:	int3   
 104d53b:	int3   
 104d53c:	int3   
 104d53d:	int3   
 104d53e:	int3   
 104d53f:	int3   
 104d540:	rex push rbp
 104d542:	sub    rsp,0x20
 104d546:	mov    rbp,rdx
 104d549:	mov    eax,DWORD PTR [rbp+0x20]
 104d54c:	and    eax,0x20
 104d54f:	test   eax,eax
 104d551:	je     0x104d561
 104d553:	and    DWORD PTR [rbp+0x20],0xffffffdf
 104d557:	lea    rcx,[rbp+0x28]
 104d55b:	call   QWORD PTR [rip+0xfffffffffffb4547]        # 0x1001aa8
 104d561:	add    rsp,0x20
 104d565:	pop    rbp
 104d566:	ret    
 104d567:	int3   
 104d568:	int3   
 104d569:	int3   
 104d56a:	int3   
 104d56b:	int3   
 104d56c:	int3   
 104d56d:	int3   
 104d56e:	int3   
 104d56f:	int3   
 104d570:	rex push rbp
 104d572:	sub    rsp,0x20
 104d576:	mov    rbp,rdx
 104d579:	mov    eax,DWORD PTR [rbp+0x20]
 104d57c:	and    eax,0x40
 104d57f:	test   eax,eax
 104d581:	je     0x104d591
 104d583:	and    DWORD PTR [rbp+0x20],0xffffffbf
 104d587:	lea    rcx,[rbp+0x30]
 104d58b:	call   QWORD PTR [rip+0xfffffffffffb4517]        # 0x1001aa8
 104d591:	add    rsp,0x20
 104d595:	pop    rbp
 104d596:	ret    
 104d597:	int3   
 104d598:	int3   
 104d599:	int3   
 104d59a:	int3   
 104d59b:	int3   
 104d59c:	int3   
 104d59d:	int3   
 104d59e:	int3   
 104d59f:	int3   
 104d5a0:	rex push rbp
 104d5a2:	sub    rsp,0x20
 104d5a6:	mov    rbp,rdx
 104d5a9:	mov    eax,DWORD PTR [rbp+0x20]
 104d5ac:	and    eax,0x80
 104d5b1:	test   eax,eax
 104d5b3:	je     0x104d5c6
 104d5b5:	and    DWORD PTR [rbp+0x20],0xffffff7f
 104d5bc:	lea    rcx,[rbp+0x38]
 104d5c0:	call   QWORD PTR [rip+0xfffffffffffb44e2]        # 0x1001aa8
 104d5c6:	add    rsp,0x20
 104d5ca:	pop    rbp
 104d5cb:	ret    
 104d5cc:	int3   
 104d5cd:	int3   
 104d5ce:	int3   
 104d5cf:	int3   
 104d5d0:	lea    rcx,[rdx+0x40]
 104d5d7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb44ca]        # 0x1001aa8
 104d5de:	int3   
 104d5df:	int3   
 104d5e0:	rex push rbp
 104d5e2:	sub    rsp,0x20
 104d5e6:	mov    rbp,rdx
 104d5e9:	mov    eax,DWORD PTR [rbp+0x20]
 104d5ec:	and    eax,0x100
 104d5f1:	test   eax,eax
 104d5f3:	je     0x104d606
 104d5f5:	and    DWORD PTR [rbp+0x20],0xfffffeff
 104d5fc:	lea    rcx,[rbp+0x28]
 104d600:	call   QWORD PTR [rip+0xfffffffffffb44a2]        # 0x1001aa8
 104d606:	add    rsp,0x20
 104d60a:	pop    rbp
 104d60b:	ret    
 104d60c:	int3   
 104d60d:	int3   
 104d60e:	int3   
 104d60f:	int3   
 104d610:	rex push rbp
 104d612:	sub    rsp,0x20
 104d616:	mov    rbp,rdx
 104d619:	mov    eax,DWORD PTR [rbp+0x20]
 104d61c:	and    eax,0x200
 104d621:	test   eax,eax
 104d623:	je     0x104d636
 104d625:	and    DWORD PTR [rbp+0x20],0xfffffdff
 104d62c:	lea    rcx,[rbp+0x30]
 104d630:	call   QWORD PTR [rip+0xfffffffffffb4472]        # 0x1001aa8
 104d636:	add    rsp,0x20
 104d63a:	pop    rbp
 104d63b:	ret    
 104d63c:	int3   
 104d63d:	int3   
 104d63e:	int3   
 104d63f:	int3   
 104d640:	rex push rbp
 104d642:	sub    rsp,0x20
 104d646:	mov    rbp,rdx
 104d649:	mov    eax,DWORD PTR [rbp+0x20]
 104d64c:	and    eax,0x400
 104d651:	test   eax,eax
 104d653:	je     0x104d666
 104d655:	and    DWORD PTR [rbp+0x20],0xfffffbff
 104d65c:	lea    rcx,[rbp+0x38]
 104d660:	call   QWORD PTR [rip+0xfffffffffffb4442]        # 0x1001aa8
 104d666:	add    rsp,0x20
 104d66a:	pop    rbp
 104d66b:	ret    
 104d66c:	int3   
 104d66d:	int3   
 104d66e:	int3   
 104d66f:	int3   
 104d670:	rex push rbp
 104d672:	sub    rsp,0x20
 104d676:	mov    rbp,rdx
 104d679:	mov    eax,DWORD PTR [rbp+0x20]
 104d67c:	and    eax,0x800
 104d681:	test   eax,eax
 104d683:	je     0x104d696
 104d685:	and    DWORD PTR [rbp+0x20],0xfffff7ff
 104d68c:	lea    rcx,[rbp+0x40]
 104d690:	call   QWORD PTR [rip+0xfffffffffffb4412]        # 0x1001aa8
 104d696:	add    rsp,0x20
 104d69a:	pop    rbp
 104d69b:	ret    
 104d69c:	int3   
 104d69d:	int3   
 104d69e:	int3   
 104d69f:	int3   
 104d6a0:	int3   
 104d6a1:	int3   
 104d6a2:	int3   
 104d6a3:	int3   
 104d6a4:	int3   
 104d6a5:	int3   
 104d6a6:	int3   
 104d6a7:	int3   
 104d6a8:	int3   
 104d6a9:	int3   
 104d6aa:	int3   
 104d6ab:	int3   
 104d6ac:	int3   
 104d6ad:	int3   
 104d6ae:	int3   
 104d6af:	int3   
 104d6b0:	rex push rbp
 104d6b2:	sub    rsp,0x20
 104d6b6:	mov    rbp,rdx
 104d6b9:	mov    eax,DWORD PTR [rbp+0x20]
 104d6bc:	and    eax,0x1
 104d6bf:	test   eax,eax
 104d6c1:	je     0x104d6d1
 104d6c3:	and    DWORD PTR [rbp+0x20],0xfffffffe
 104d6c7:	mov    rcx,QWORD PTR [rbp+0x48]
 104d6cb:	call   QWORD PTR [rip+0xfffffffffffb43d7]        # 0x1001aa8
 104d6d1:	add    rsp,0x20
 104d6d5:	pop    rbp
 104d6d6:	ret    
 104d6d7:	int3   
 104d6d8:	int3   
 104d6d9:	int3   
 104d6da:	int3   
 104d6db:	int3   
 104d6dc:	int3   
 104d6dd:	int3   
 104d6de:	int3   
 104d6df:	int3   
 104d6e0:	lea    rcx,[rdx+0x58]
 104d6e7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb43ba]        # 0x1001aa8
 104d6ee:	int3   
 104d6ef:	int3   
 104d6f0:	lea    rcx,[rdx+0x90]
 104d6f7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb43aa]        # 0x1001aa8
 104d6fe:	int3   
 104d6ff:	int3   
 104d700:	rex push rbp
 104d702:	sub    rsp,0x20
 104d706:	mov    rbp,rdx
 104d709:	mov    eax,DWORD PTR [rbp+0x50]
 104d70c:	and    eax,0x1
 104d70f:	test   eax,eax
 104d711:	je     0x104d724
 104d713:	and    DWORD PTR [rbp+0x50],0xfffffffe
 104d717:	mov    rcx,QWORD PTR [rbp+0x98]
 104d71e:	call   QWORD PTR [rip+0xfffffffffffb4384]        # 0x1001aa8
 104d724:	add    rsp,0x20
 104d728:	pop    rbp
 104d729:	ret    
 104d72a:	int3   
 104d72b:	int3   
 104d72c:	int3   
 104d72d:	int3   
 104d72e:	int3   
 104d72f:	int3   
 104d730:	lea    rcx,[rdx+0x60]
 104d737:	rex.W jmp QWORD PTR [rip+0xfffffffffffb436a]        # 0x1001aa8
 104d73e:	int3   
 104d73f:	int3   
 104d740:	int3   
 104d741:	int3   
 104d742:	int3   
 104d743:	int3   
 104d744:	int3   
 104d745:	int3   
 104d746:	int3   
 104d747:	int3   
 104d748:	int3   
 104d749:	int3   
 104d74a:	int3   
 104d74b:	int3   
 104d74c:	int3   
 104d74d:	int3   
 104d74e:	int3   
 104d74f:	int3   
 104d750:	lea    rcx,[rdx+0xd8]
 104d757:	rex.W jmp QWORD PTR [rip+0xfffffffffffb434a]        # 0x1001aa8
 104d75e:	int3   
 104d75f:	int3   
 104d760:	lea    rcx,[rdx+0xd0]
 104d767:	rex.W jmp QWORD PTR [rip+0xfffffffffffb433a]        # 0x1001aa8
 104d76e:	int3   
 104d76f:	int3   
 104d770:	lea    rcx,[rdx+0xc0]
 104d777:	rex.W jmp QWORD PTR [rip+0xfffffffffffb432a]        # 0x1001aa8
 104d77e:	int3   
 104d77f:	int3   
 104d780:	lea    rcx,[rdx+0x40]
 104d787:	rex.W jmp QWORD PTR [rip+0xfffffffffffb431a]        # 0x1001aa8
 104d78e:	int3   
 104d78f:	int3   
 104d790:	lea    rcx,[rdx+0x50]
 104d797:	rex.W jmp QWORD PTR [rip+0xfffffffffffb430a]        # 0x1001aa8
 104d79e:	int3   
 104d79f:	int3   
 104d7a0:	lea    rcx,[rdx+0x48]
 104d7a7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb42fa]        # 0x1001aa8
 104d7ae:	int3   
 104d7af:	int3   
 104d7b0:	int3   
 104d7b1:	int3   
 104d7b2:	int3   
 104d7b3:	int3   
 104d7b4:	int3   
 104d7b5:	int3   
 104d7b6:	int3   
 104d7b7:	int3   
 104d7b8:	int3   
 104d7b9:	int3   
 104d7ba:	int3   
 104d7bb:	int3   
 104d7bc:	int3   
 104d7bd:	int3   
 104d7be:	int3   
 104d7bf:	int3   
 104d7c0:	lea    rcx,[rdx+0x30]
 104d7c7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb42da]        # 0x1001aa8
 104d7ce:	int3   
 104d7cf:	int3   
 104d7d0:	lea    rcx,[rdx+0x28]
 104d7d7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb42ca]        # 0x1001aa8
 104d7de:	int3   
 104d7df:	int3   
 104d7e0:	lea    rcx,[rdx+0x30]
 104d7e7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb42ba]        # 0x1001aa8
 104d7ee:	int3   
 104d7ef:	int3   
 104d7f0:	lea    rcx,[rdx+0x80]
 104d7f7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb42aa]        # 0x1001aa8
 104d7fe:	int3   
 104d7ff:	int3   
 104d800:	lea    rcx,[rdx+0x38]
 104d807:	rex.W jmp QWORD PTR [rip+0xfffffffffffb429a]        # 0x1001aa8
 104d80e:	int3   
 104d80f:	int3   
 104d810:	lea    rcx,[rdx+0x30]
 104d817:	rex.W jmp QWORD PTR [rip+0xfffffffffffb428a]        # 0x1001aa8
 104d81e:	int3   
 104d81f:	int3   
 104d820:	lea    rcx,[rdx+0x38]
 104d827:	rex.W jmp QWORD PTR [rip+0xfffffffffffb427a]        # 0x1001aa8
 104d82e:	int3   
 104d82f:	int3   
 104d830:	rex push rbp
 104d832:	sub    rsp,0x20
 104d836:	mov    rbp,rdx
 104d839:	mov    eax,DWORD PTR [rbp+0x20]
 104d83c:	and    eax,0x1
 104d83f:	test   eax,eax
 104d841:	je     0x104d854
 104d843:	and    DWORD PTR [rbp+0x20],0xfffffffe
 104d847:	mov    rcx,QWORD PTR [rbp+0x88]
 104d84e:	call   QWORD PTR [rip+0xfffffffffffb4254]        # 0x1001aa8
 104d854:	add    rsp,0x20
 104d858:	pop    rbp
 104d859:	ret    
 104d85a:	int3   
 104d85b:	int3   
 104d85c:	int3   
 104d85d:	int3   
 104d85e:	int3   
 104d85f:	int3   
 104d860:	rex push rbp
 104d862:	sub    rsp,0x20
 104d866:	mov    rbp,rdx
 104d869:	mov    eax,DWORD PTR [rbp+0x20]
 104d86c:	and    eax,0x1
 104d86f:	test   eax,eax
 104d871:	je     0x104d881
 104d873:	and    DWORD PTR [rbp+0x20],0xfffffffe
 104d877:	mov    rcx,QWORD PTR [rbp+0x48]
 104d87b:	call   QWORD PTR [rip+0xfffffffffffb4227]        # 0x1001aa8
 104d881:	add    rsp,0x20
 104d885:	pop    rbp
 104d886:	ret    
 104d887:	int3   
 104d888:	int3   
 104d889:	int3   
 104d88a:	int3   
 104d88b:	int3   
 104d88c:	int3   
 104d88d:	int3   
 104d88e:	int3   
 104d88f:	int3   
 104d890:	lea    rcx,[rdx+0x90]
 104d897:	rex.W jmp QWORD PTR [rip+0xfffffffffffb420a]        # 0x1001aa8
 104d89e:	int3   
 104d89f:	int3   
 104d8a0:	lea    rcx,[rdx+0x80]
 104d8a7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb41fa]        # 0x1001aa8
 104d8ae:	int3   
 104d8af:	int3   
 104d8b0:	lea    rcx,[rdx+0x88]
 104d8b7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb41ea]        # 0x1001aa8
 104d8be:	int3   
 104d8bf:	int3   
 104d8c0:	lea    rcx,[rdx+0x60]
 104d8c7:	jmp    0x102dac0
 104d8cc:	int3   
 104d8cd:	int3   
 104d8ce:	int3   
 104d8cf:	int3   
 104d8d0:	lea    rcx,[rdx+0x58]
 104d8d7:	jmp    0x102dac0
 104d8dc:	int3   
 104d8dd:	int3   
 104d8de:	int3   
 104d8df:	int3   
 104d8e0:	lea    rcx,[rdx+0x50]
 104d8e7:	jmp    0x102dac0
 104d8ec:	int3   
 104d8ed:	int3   
 104d8ee:	int3   
 104d8ef:	int3   
 104d8f0:	lea    rcx,[rdx+0x70]
 104d8f7:	jmp    0x102dac0
 104d8fc:	int3   
 104d8fd:	int3   
 104d8fe:	int3   
 104d8ff:	int3   
 104d900:	lea    rcx,[rdx+0x68]
 104d907:	jmp    0x102dac0
 104d90c:	int3   
 104d90d:	int3   
 104d90e:	int3   
 104d90f:	int3   
 104d910:	lea    rcx,[rdx+0x78]
 104d917:	jmp    0x102dac0
 104d91c:	int3   
 104d91d:	int3   
 104d91e:	int3   
 104d91f:	int3   
 104d920:	rex push rbp
 104d922:	sub    rsp,0x20
 104d926:	mov    rbp,rdx
 104d929:	mov    eax,DWORD PTR [rbp+0xa8]
 104d92f:	and    eax,0x1
 104d932:	test   eax,eax
 104d934:	je     0x104d94a
 104d936:	and    DWORD PTR [rbp+0xa8],0xfffffffe
 104d93d:	mov    rcx,QWORD PTR [rbp+0xc0]
 104d944:	call   QWORD PTR [rip+0xfffffffffffb415e]        # 0x1001aa8
 104d94a:	add    rsp,0x20
 104d94e:	pop    rbp
 104d94f:	ret    
 104d950:	lea    rcx,[rdx+0x40]
 104d957:	rex.W jmp QWORD PTR [rip+0xfffffffffffb414a]        # 0x1001aa8
 104d95e:	int3   
 104d95f:	int3   
 104d960:	lea    rcx,[rdx+0x40]
 104d967:	rex.W jmp QWORD PTR [rip+0xfffffffffffb413a]        # 0x1001aa8
 104d96e:	int3   
 104d96f:	int3   
 104d970:	mov    rcx,QWORD PTR [rdx+0xa0]
 104d977:	rex.W jmp QWORD PTR [rip+0xfffffffffffb412a]        # 0x1001aa8
 104d97e:	int3   
 104d97f:	int3   
 104d980:	mov    rcx,QWORD PTR [rdx+0xa0]
 104d987:	rex.W jmp QWORD PTR [rip+0xfffffffffffb411a]        # 0x1001aa8
 104d98e:	int3   
 104d98f:	int3   
 104d990:	lea    rcx,[rdx+0x40]
 104d997:	rex.W jmp QWORD PTR [rip+0xfffffffffffb410a]        # 0x1001aa8
 104d99e:	int3   
 104d99f:	int3   
 104d9a0:	mov    rcx,QWORD PTR [rdx+0xa0]
 104d9a7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb40fa]        # 0x1001aa8
 104d9ae:	int3   
 104d9af:	int3   
 104d9b0:	lea    rcx,[rdx+0x40]
 104d9b7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb40ea]        # 0x1001aa8
 104d9be:	int3   
 104d9bf:	int3   
 104d9c0:	mov    rcx,QWORD PTR [rdx+0xa0]
 104d9c7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb40da]        # 0x1001aa8
 104d9ce:	int3   
 104d9cf:	int3   
 104d9d0:	lea    rcx,[rdx+0x40]
 104d9d7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb40ca]        # 0x1001aa8
 104d9de:	int3   
 104d9df:	int3   
 104d9e0:	mov    rcx,QWORD PTR [rdx+0xa0]
 104d9e7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb40ba]        # 0x1001aa8
 104d9ee:	int3   
 104d9ef:	int3   
 104d9f0:	lea    rcx,[rdx+0x40]
 104d9f7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb40aa]        # 0x1001aa8
 104d9fe:	int3   
 104d9ff:	int3   
 104da00:	mov    rcx,QWORD PTR [rdx+0xa0]
 104da07:	rex.W jmp QWORD PTR [rip+0xfffffffffffb409a]        # 0x1001aa8
 104da0e:	int3   
 104da0f:	int3   
 104da10:	mov    rcx,QWORD PTR [rdx+0xa0]
 104da17:	rex.W jmp QWORD PTR [rip+0xfffffffffffb408a]        # 0x1001aa8
 104da1e:	int3   
 104da1f:	int3   
 104da20:	lea    rcx,[rdx+0x40]
 104da27:	rex.W jmp QWORD PTR [rip+0xfffffffffffb407a]        # 0x1001aa8
 104da2e:	int3   
 104da2f:	int3   
 104da30:	mov    rcx,QWORD PTR [rdx+0xa0]
 104da37:	rex.W jmp QWORD PTR [rip+0xfffffffffffb406a]        # 0x1001aa8
 104da3e:	int3   
 104da3f:	int3   
 104da40:	lea    rcx,[rdx+0x40]
 104da47:	rex.W jmp QWORD PTR [rip+0xfffffffffffb405a]        # 0x1001aa8
 104da4e:	int3   
 104da4f:	int3   
 104da50:	int3   
 104da51:	int3   
 104da52:	int3   
 104da53:	int3   
 104da54:	int3   
 104da55:	int3   
 104da56:	int3   
 104da57:	int3   
 104da58:	int3   
 104da59:	int3   
 104da5a:	int3   
 104da5b:	int3   
 104da5c:	int3   
 104da5d:	int3   
 104da5e:	int3   
 104da5f:	int3   
 104da60:	lea    rcx,[rdx+0x70]
 104da67:	rex.W jmp QWORD PTR [rip+0xfffffffffffb403a]        # 0x1001aa8
 104da6e:	int3   
 104da6f:	int3   
 104da70:	rex push rbp
 104da72:	sub    rsp,0x20
 104da76:	mov    rbp,rdx
 104da79:	mov    eax,DWORD PTR [rbp+0x40]
 104da7c:	and    eax,0x1
 104da7f:	test   eax,eax
 104da81:	je     0x104da91
 104da83:	and    DWORD PTR [rbp+0x40],0xfffffffe
 104da87:	mov    rcx,QWORD PTR [rbp+0x78]
 104da8b:	call   QWORD PTR [rip+0xfffffffffffb4017]        # 0x1001aa8
 104da91:	add    rsp,0x20
 104da95:	pop    rbp
 104da96:	ret    
 104da97:	int3   
 104da98:	int3   
 104da99:	int3   
 104da9a:	int3   
 104da9b:	int3   
 104da9c:	int3   
 104da9d:	int3   
 104da9e:	int3   
 104da9f:	int3   
 104daa0:	lea    rcx,[rdx+0x40]
 104daa7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3ffa]        # 0x1001aa8
 104daae:	int3   
 104daaf:	int3   
 104dab0:	int3   
 104dab1:	int3   
 104dab2:	int3   
 104dab3:	int3   
 104dab4:	int3   
 104dab5:	int3   
 104dab6:	int3   
 104dab7:	int3   
 104dab8:	int3   
 104dab9:	int3   
 104daba:	int3   
 104dabb:	int3   
 104dabc:	int3   
 104dabd:	int3   
 104dabe:	int3   
 104dabf:	int3   
 104dac0:	rex push rbp
 104dac2:	sub    rsp,0x20
 104dac6:	mov    rbp,rdx
 104dac9:	mov    eax,DWORD PTR [rbp+0x20]
 104dacc:	and    eax,0x1
 104dacf:	test   eax,eax
 104dad1:	je     0x104dae1
 104dad3:	and    DWORD PTR [rbp+0x20],0xfffffffe
 104dad7:	mov    rcx,QWORD PTR [rbp+0x48]
 104dadb:	call   QWORD PTR [rip+0xfffffffffffb3fc7]        # 0x1001aa8
 104dae1:	add    rsp,0x20
 104dae5:	pop    rbp
 104dae6:	ret    
 104dae7:	int3   
 104dae8:	int3   
 104dae9:	int3   
 104daea:	int3   
 104daeb:	int3   
 104daec:	int3   
 104daed:	int3   
 104daee:	int3   
 104daef:	int3   
 104daf0:	lea    rcx,[rdx+0x70]
 104daf7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3faa]        # 0x1001aa8
 104dafe:	int3   
 104daff:	int3   
 104db00:	lea    rcx,[rdx+0x58]
 104db07:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3f9a]        # 0x1001aa8
 104db0e:	int3   
 104db0f:	int3   
 104db10:	rex push rbp
 104db12:	sub    rsp,0x20
 104db16:	mov    rbp,rdx
 104db19:	mov    eax,DWORD PTR [rbp+0x60]
 104db1c:	and    eax,0x1
 104db1f:	test   eax,eax
 104db21:	je     0x104db34
 104db23:	and    DWORD PTR [rbp+0x60],0xfffffffe
 104db27:	mov    rcx,QWORD PTR [rbp+0xb0]
 104db2e:	call   QWORD PTR [rip+0xfffffffffffb3f74]        # 0x1001aa8
 104db34:	add    rsp,0x20
 104db38:	pop    rbp
 104db39:	ret    
 104db3a:	int3   
 104db3b:	int3   
 104db3c:	int3   
 104db3d:	int3   
 104db3e:	int3   
 104db3f:	int3   
 104db40:	lea    rcx,[rdx+0x50]
 104db47:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3f5a]        # 0x1001aa8
 104db4e:	int3   
 104db4f:	int3   
 104db50:	lea    rcx,[rdx+0xa0]
 104db57:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3f4a]        # 0x1001aa8
 104db5e:	int3   
 104db5f:	int3   
 104db60:	lea    rcx,[rdx+0x98]
 104db67:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3f3a]        # 0x1001aa8
 104db6e:	int3   
 104db6f:	int3   
 104db70:	lea    rcx,[rdx+0x78]
 104db77:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3f2a]        # 0x1001aa8
 104db7e:	int3   
 104db7f:	int3   
 104db80:	lea    rcx,[rdx+0x78]
 104db87:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3f1a]        # 0x1001aa8
 104db8e:	int3   
 104db8f:	int3   
 104db90:	int3   
 104db91:	int3   
 104db92:	int3   
 104db93:	int3   
 104db94:	int3   
 104db95:	int3   
 104db96:	int3   
 104db97:	int3   
 104db98:	int3   
 104db99:	int3   
 104db9a:	int3   
 104db9b:	int3   
 104db9c:	int3   
 104db9d:	int3   
 104db9e:	int3   
 104db9f:	int3   
 104dba0:	lea    rcx,[rdx+0x60]
 104dba7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3efa]        # 0x1001aa8
 104dbae:	int3   
 104dbaf:	int3   
 104dbb0:	int3   
 104dbb1:	int3   
 104dbb2:	int3   
 104dbb3:	int3   
 104dbb4:	int3   
 104dbb5:	int3   
 104dbb6:	int3   
 104dbb7:	int3   
 104dbb8:	int3   
 104dbb9:	int3   
 104dbba:	int3   
 104dbbb:	int3   
 104dbbc:	int3   
 104dbbd:	int3   
 104dbbe:	int3   
 104dbbf:	int3   
 104dbc0:	lea    rcx,[rdx+0x40]
 104dbc7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3eda]        # 0x1001aa8
 104dbce:	int3   
 104dbcf:	int3   
 104dbd0:	int3   
 104dbd1:	int3   
 104dbd2:	int3   
 104dbd3:	int3   
 104dbd4:	int3   
 104dbd5:	int3   
 104dbd6:	int3   
 104dbd7:	int3   
 104dbd8:	int3   
 104dbd9:	int3   
 104dbda:	int3   
 104dbdb:	int3   
 104dbdc:	int3   
 104dbdd:	int3   
 104dbde:	int3   
 104dbdf:	int3   
 104dbe0:	mov    rcx,QWORD PTR [rdx+0x40]
 104dbe7:	jmp    0x103f95a
 104dbec:	int3   
 104dbed:	int3   
 104dbee:	int3   
 104dbef:	int3   
 104dbf0:	mov    rcx,QWORD PTR [rdx+0x40]
 104dbf7:	jmp    0x100fe80
 104dbfc:	int3   
 104dbfd:	int3   
 104dbfe:	int3   
 104dbff:	int3   
 104dc00:	int3   
 104dc01:	int3   
 104dc02:	int3   
 104dc03:	int3   
 104dc04:	int3   
 104dc05:	int3   
 104dc06:	int3   
 104dc07:	int3   
 104dc08:	int3   
 104dc09:	int3   
 104dc0a:	int3   
 104dc0b:	int3   
 104dc0c:	int3   
 104dc0d:	int3   
 104dc0e:	int3   
 104dc0f:	int3   
 104dc10:	mov    rcx,QWORD PTR [rdx+0x128]
 104dc17:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3e8a]        # 0x1001aa8
 104dc1e:	int3   
 104dc1f:	int3   
 104dc20:	mov    rcx,QWORD PTR [rdx+0x120]
 104dc27:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3e7a]        # 0x1001aa8
 104dc2e:	int3   
 104dc2f:	int3   
 104dc30:	lea    rcx,[rdx+0x90]
 104dc37:	jmp    0x1012ae0
 104dc3c:	int3   
 104dc3d:	int3   
 104dc3e:	int3   
 104dc3f:	int3   
 104dc40:	lea    rcx,[rdx+0x58]
 104dc47:	jmp    0x100c4f0
 104dc4c:	int3   
 104dc4d:	int3   
 104dc4e:	int3   
 104dc4f:	int3   
 104dc50:	lea    rcx,[rdx+0x20]
 104dc57:	jmp    0x100c4f0
 104dc5c:	int3   
 104dc5d:	int3   
 104dc5e:	int3   
 104dc5f:	int3   
 104dc60:	lea    rcx,[rdx+0x138]
 104dc67:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3e3a]        # 0x1001aa8
 104dc6e:	int3   
 104dc6f:	int3   
 104dc70:	lea    rcx,[rdx+0x130]
 104dc77:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3e2a]        # 0x1001aa8
 104dc7e:	int3   
 104dc7f:	int3   
 104dc80:	lea    rcx,[rdx+0x130]
 104dc87:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3e1a]        # 0x1001aa8
 104dc8e:	int3   
 104dc8f:	int3   
 104dc90:	int3   
 104dc91:	int3   
 104dc92:	int3   
 104dc93:	int3   
 104dc94:	int3   
 104dc95:	int3   
 104dc96:	int3   
 104dc97:	int3   
 104dc98:	int3   
 104dc99:	int3   
 104dc9a:	int3   
 104dc9b:	int3   
 104dc9c:	int3   
 104dc9d:	int3   
 104dc9e:	int3   
 104dc9f:	int3   
 104dca0:	mov    rcx,QWORD PTR [rdx+0x48]
 104dca7:	jmp    0x103f95a
 104dcac:	int3   
 104dcad:	int3   
 104dcae:	int3   
 104dcaf:	int3   
 104dcb0:	int3   
 104dcb1:	int3   
 104dcb2:	int3   
 104dcb3:	int3   
 104dcb4:	int3   
 104dcb5:	int3   
 104dcb6:	int3   
 104dcb7:	int3   
 104dcb8:	int3   
 104dcb9:	int3   
 104dcba:	int3   
 104dcbb:	int3   
 104dcbc:	int3   
 104dcbd:	int3   
 104dcbe:	int3   
 104dcbf:	int3   
 104dcc0:	rex push rbp
 104dcc2:	sub    rsp,0x20
 104dcc6:	mov    rbp,rdx
 104dcc9:	mov    rdx,QWORD PTR [rbp+0x40]
 104dccd:	mov    rcx,QWORD PTR [rbp+0x50]
 104dcd1:	call   0x100e5c0
 104dcd6:	add    rsp,0x20
 104dcda:	pop    rbp
 104dcdb:	ret    
 104dcdc:	int3   
 104dcdd:	int3   
 104dcde:	int3   
 104dcdf:	int3   
 104dce0:	mov    rcx,QWORD PTR [rdx+0x50]
 104dce7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3dba]        # 0x1001aa8
 104dcee:	int3   
 104dcef:	int3   
 104dcf0:	mov    rcx,QWORD PTR [rdx+0x50]
 104dcf7:	jmp    0x102fe20
 104dcfc:	int3   
 104dcfd:	int3   
 104dcfe:	int3   
 104dcff:	int3   
 104dd00:	int3   
 104dd01:	int3   
 104dd02:	int3   
 104dd03:	int3   
 104dd04:	int3   
 104dd05:	int3   
 104dd06:	int3   
 104dd07:	int3   
 104dd08:	int3   
 104dd09:	int3   
 104dd0a:	int3   
 104dd0b:	int3   
 104dd0c:	int3   
 104dd0d:	int3   
 104dd0e:	int3   
 104dd0f:	int3   
 104dd10:	lea    rcx,[rdx+0x78]
 104dd17:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3d8a]        # 0x1001aa8
 104dd1e:	int3   
 104dd1f:	int3   
 104dd20:	lea    rcx,[rdx+0x70]
 104dd27:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3d7a]        # 0x1001aa8
 104dd2e:	int3   
 104dd2f:	int3   
 104dd30:	int3   
 104dd31:	int3   
 104dd32:	int3   
 104dd33:	int3   
 104dd34:	int3   
 104dd35:	int3   
 104dd36:	int3   
 104dd37:	int3   
 104dd38:	int3   
 104dd39:	int3   
 104dd3a:	int3   
 104dd3b:	int3   
 104dd3c:	int3   
 104dd3d:	int3   
 104dd3e:	int3   
 104dd3f:	int3   
 104dd40:	lea    rcx,[rdx+0x40]
 104dd47:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3d5a]        # 0x1001aa8
 104dd4e:	int3   
 104dd4f:	int3   
 104dd50:	lea    rcx,[rdx+0x48]
 104dd57:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3d4a]        # 0x1001aa8
 104dd5e:	int3   
 104dd5f:	int3   
 104dd60:	lea    rcx,[rdx+0x98]
 104dd67:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3d3a]        # 0x1001aa8
 104dd6e:	int3   
 104dd6f:	int3   
 104dd70:	int3   
 104dd71:	int3   
 104dd72:	int3   
 104dd73:	int3   
 104dd74:	int3   
 104dd75:	int3   
 104dd76:	int3   
 104dd77:	int3   
 104dd78:	int3   
 104dd79:	int3   
 104dd7a:	int3   
 104dd7b:	int3   
 104dd7c:	int3   
 104dd7d:	int3   
 104dd7e:	int3   
 104dd7f:	int3   
 104dd80:	lea    rcx,[rdx+0x50]
 104dd87:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3d1a]        # 0x1001aa8
 104dd8e:	int3   
 104dd8f:	int3   
 104dd90:	lea    rcx,[rdx+0x68]
 104dd97:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3d0a]        # 0x1001aa8
 104dd9e:	int3   
 104dd9f:	int3   
 104dda0:	lea    rcx,[rdx+0x80]
 104dda7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3cfa]        # 0x1001aa8
 104ddae:	int3   
 104ddaf:	int3   
 104ddb0:	lea    rcx,[rdx+0x60]
 104ddb7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3cea]        # 0x1001aa8
 104ddbe:	int3   
 104ddbf:	int3   
 104ddc0:	lea    rcx,[rdx+0x88]
 104ddc7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3cda]        # 0x1001aa8
 104ddce:	int3   
 104ddcf:	int3   
 104ddd0:	rex push rbp
 104ddd2:	sub    rsp,0x20
 104ddd6:	mov    rbp,rdx
 104ddd9:	mov    eax,DWORD PTR [rbp+0x48]
 104dddc:	and    eax,0x1
 104dddf:	test   eax,eax
 104dde1:	je     0x104ddf4
 104dde3:	and    DWORD PTR [rbp+0x48],0xfffffffe
 104dde7:	lea    rcx,[rbp+0x90]
 104ddee:	call   QWORD PTR [rip+0xfffffffffffb3cb4]        # 0x1001aa8
 104ddf4:	add    rsp,0x20
 104ddf8:	pop    rbp
 104ddf9:	ret    
 104ddfa:	int3   
 104ddfb:	int3   
 104ddfc:	int3   
 104ddfd:	int3   
 104ddfe:	int3   
 104ddff:	int3   
 104de00:	lea    rcx,[rdx+0xa8]
 104de07:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3c9a]        # 0x1001aa8
 104de0e:	int3   
 104de0f:	int3   
 104de10:	lea    rcx,[rdx+0x70]
 104de17:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3c8a]        # 0x1001aa8
 104de1e:	int3   
 104de1f:	int3   
 104de20:	lea    rcx,[rdx+0x98]
 104de27:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3c7a]        # 0x1001aa8
 104de2e:	int3   
 104de2f:	int3   
 104de30:	lea    rcx,[rdx+0x78]
 104de37:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3c6a]        # 0x1001aa8
 104de3e:	int3   
 104de3f:	int3   
 104de40:	lea    rcx,[rdx+0xb0]
 104de47:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3c5a]        # 0x1001aa8
 104de4e:	int3   
 104de4f:	int3   
 104de50:	lea    rcx,[rdx+0xa0]
 104de57:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3c4a]        # 0x1001aa8
 104de5e:	int3   
 104de5f:	int3   
 104de60:	lea    rcx,[rdx+0xc0]
 104de67:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3c3a]        # 0x1001aa8
 104de6e:	int3   
 104de6f:	int3   
 104de70:	int3   
 104de71:	int3   
 104de72:	int3   
 104de73:	int3   
 104de74:	int3   
 104de75:	int3   
 104de76:	int3   
 104de77:	int3   
 104de78:	int3   
 104de79:	int3   
 104de7a:	int3   
 104de7b:	int3   
 104de7c:	int3   
 104de7d:	int3   
 104de7e:	int3   
 104de7f:	int3   
 104de80:	lea    rcx,[rdx+0x28]
 104de87:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3c1a]        # 0x1001aa8
 104de8e:	int3   
 104de8f:	int3   
 104de90:	lea    rcx,[rdx+0x88]
 104de97:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3c0a]        # 0x1001aa8
 104de9e:	int3   
 104de9f:	int3   
 104dea0:	lea    rcx,[rdx+0x80]
 104dea7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3bfa]        # 0x1001aa8
 104deae:	int3   
 104deaf:	int3   
 104deb0:	lea    rcx,[rdx+0x30]
 104deb7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3bea]        # 0x1001aa8
 104debe:	int3   
 104debf:	int3   
 104dec0:	lea    rcx,[rdx+0x30]
 104dec7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3bda]        # 0x1001aa8
 104dece:	int3   
 104decf:	int3   
 104ded0:	lea    rcx,[rdx+0x30]
 104ded7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3bca]        # 0x1001aa8
 104dede:	int3   
 104dedf:	int3   
 104dee0:	lea    rcx,[rdx+0x30]
 104dee7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3bba]        # 0x1001aa8
 104deee:	int3   
 104deef:	int3   
 104def0:	lea    rcx,[rdx+0x30]
 104def7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3baa]        # 0x1001aa8
 104defe:	int3   
 104deff:	int3   
 104df00:	lea    rcx,[rdx+0x30]
 104df07:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3b9a]        # 0x1001aa8
 104df0e:	int3   
 104df0f:	int3   
 104df10:	rex push rbp
 104df12:	sub    rsp,0x20
 104df16:	mov    rbp,rdx
 104df19:	mov    eax,DWORD PTR [rbp+0x20]
 104df1c:	and    eax,0x1
 104df1f:	test   eax,eax
 104df21:	je     0x104df31
 104df23:	and    DWORD PTR [rbp+0x20],0xfffffffe
 104df27:	lea    rcx,[rbp+0x38]
 104df2b:	call   QWORD PTR [rip+0xfffffffffffb3b77]        # 0x1001aa8
 104df31:	add    rsp,0x20
 104df35:	pop    rbp
 104df36:	ret    
 104df37:	int3   
 104df38:	int3   
 104df39:	int3   
 104df3a:	int3   
 104df3b:	int3   
 104df3c:	int3   
 104df3d:	int3   
 104df3e:	int3   
 104df3f:	int3   
 104df40:	rex push rbp
 104df42:	sub    rsp,0x20
 104df46:	mov    rbp,rdx
 104df49:	mov    eax,DWORD PTR [rbp+0x20]
 104df4c:	and    eax,0x2
 104df4f:	test   eax,eax
 104df51:	je     0x104df61
 104df53:	and    DWORD PTR [rbp+0x20],0xfffffffd
 104df57:	lea    rcx,[rbp+0x30]
 104df5b:	call   QWORD PTR [rip+0xfffffffffffb3b47]        # 0x1001aa8
 104df61:	add    rsp,0x20
 104df65:	pop    rbp
 104df66:	ret    
 104df67:	int3   
 104df68:	int3   
 104df69:	int3   
 104df6a:	int3   
 104df6b:	int3   
 104df6c:	int3   
 104df6d:	int3   
 104df6e:	int3   
 104df6f:	int3   
 104df70:	lea    rcx,[rdx+0x30]
 104df77:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3b2a]        # 0x1001aa8
 104df7e:	int3   
 104df7f:	int3   
 104df80:	int3   
 104df81:	int3   
 104df82:	int3   
 104df83:	int3   
 104df84:	int3   
 104df85:	int3   
 104df86:	int3   
 104df87:	int3   
 104df88:	int3   
 104df89:	int3   
 104df8a:	int3   
 104df8b:	int3   
 104df8c:	int3   
 104df8d:	int3   
 104df8e:	int3   
 104df8f:	int3   
 104df90:	lea    rcx,[rdx+0x20]
 104df97:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3b0a]        # 0x1001aa8
 104df9e:	int3   
 104df9f:	int3   
 104dfa0:	lea    rcx,[rdx+0x108]
 104dfa7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3afa]        # 0x1001aa8
 104dfae:	int3   
 104dfaf:	int3   
 104dfb0:	lea    rcx,[rdx+0xa0]
 104dfb7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3aea]        # 0x1001aa8
 104dfbe:	int3   
 104dfbf:	int3   
 104dfc0:	lea    rcx,[rdx+0x30]
 104dfc7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3ada]        # 0x1001aa8
 104dfce:	int3   
 104dfcf:	int3   
 104dfd0:	lea    rcx,[rdx+0x108]
 104dfd7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3aca]        # 0x1001aa8
 104dfde:	int3   
 104dfdf:	int3   
 104dfe0:	lea    rcx,[rdx+0x50]
 104dfe7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3aba]        # 0x1001aa8
 104dfee:	int3   
 104dfef:	int3   
 104dff0:	lea    rcx,[rdx+0x80]
 104dff7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3aaa]        # 0x1001aa8
 104dffe:	int3   
 104dfff:	int3   
 104e000:	lea    rcx,[rdx+0x60]
 104e007:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3a9a]        # 0x1001aa8
 104e00e:	int3   
 104e00f:	int3   
 104e010:	lea    rcx,[rdx+0x40]
 104e017:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3a8a]        # 0x1001aa8
 104e01e:	int3   
 104e01f:	int3   
 104e020:	lea    rcx,[rdx+0x90]
 104e027:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3a7a]        # 0x1001aa8
 104e02e:	int3   
 104e02f:	int3   
 104e030:	lea    rcx,[rdx+0x70]
 104e037:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3a6a]        # 0x1001aa8
 104e03e:	int3   
 104e03f:	int3   
 104e040:	lea    rcx,[rdx+0x48]
 104e047:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3a5a]        # 0x1001aa8
 104e04e:	int3   
 104e04f:	int3   
 104e050:	lea    rcx,[rdx+0x68]
 104e057:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3a4a]        # 0x1001aa8
 104e05e:	int3   
 104e05f:	int3   
 104e060:	lea    rcx,[rdx+0x58]
 104e067:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3a3a]        # 0x1001aa8
 104e06e:	int3   
 104e06f:	int3   
 104e070:	lea    rcx,[rdx+0x78]
 104e077:	rex.W jmp QWORD PTR [rip+0xfffffffffffb3a2a]        # 0x1001aa8
 104e07e:	int3   
 104e07f:	int3   
 104e080:	rex push rbp
 104e082:	sub    rsp,0x20
 104e086:	mov    rbp,rdx
 104e089:	mov    eax,DWORD PTR [rbp+0x28]
 104e08c:	and    eax,0x1
 104e08f:	test   eax,eax
 104e091:	je     0x104e0a4
 104e093:	and    DWORD PTR [rbp+0x28],0xfffffffe
 104e097:	lea    rcx,[rbp+0x98]
 104e09e:	call   QWORD PTR [rip+0xfffffffffffb3a04]        # 0x1001aa8
 104e0a4:	add    rsp,0x20
 104e0a8:	pop    rbp
 104e0a9:	ret    
 104e0aa:	int3   
 104e0ab:	int3   
 104e0ac:	int3   
 104e0ad:	int3   
 104e0ae:	int3   
 104e0af:	int3   
 104e0b0:	rex push rbp
 104e0b2:	sub    rsp,0x20
 104e0b6:	mov    rbp,rdx
 104e0b9:	mov    eax,DWORD PTR [rbp+0x28]
 104e0bc:	and    eax,0x2
 104e0bf:	test   eax,eax
 104e0c1:	je     0x104e0d4
 104e0c3:	and    DWORD PTR [rbp+0x28],0xfffffffd
 104e0c7:	lea    rcx,[rbp+0x88]
 104e0ce:	call   QWORD PTR [rip+0xfffffffffffb39d4]        # 0x1001aa8
 104e0d4:	add    rsp,0x20
 104e0d8:	pop    rbp
 104e0d9:	ret    
 104e0da:	int3   
 104e0db:	int3   
 104e0dc:	int3   
 104e0dd:	int3   
 104e0de:	int3   
 104e0df:	int3   
 104e0e0:	lea    rcx,[rdx+0x38]
 104e0e7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb39ba]        # 0x1001aa8
 104e0ee:	int3   
 104e0ef:	int3   
 104e0f0:	lea    rcx,[rdx+0x100]
 104e0f7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb39aa]        # 0x1001aa8
 104e0fe:	int3   
 104e0ff:	int3   
 104e100:	int3   
 104e101:	int3   
 104e102:	int3   
 104e103:	int3   
 104e104:	int3   
 104e105:	int3   
 104e106:	int3   
 104e107:	int3   
 104e108:	int3   
 104e109:	int3   
 104e10a:	int3   
 104e10b:	int3   
 104e10c:	int3   
 104e10d:	int3   
 104e10e:	int3   
 104e10f:	int3   
 104e110:	mov    rcx,QWORD PTR [rdx+0x50]
 104e117:	jmp    0x102fe20
 104e11c:	int3   
 104e11d:	int3   
 104e11e:	int3   
 104e11f:	int3   
 104e120:	mov    rcx,QWORD PTR [rdx+0x50]
 104e127:	rex.W jmp QWORD PTR [rip+0xfffffffffffb397a]        # 0x1001aa8
 104e12e:	int3   
 104e12f:	int3   
 104e130:	int3   
 104e131:	int3   
 104e132:	int3   
 104e133:	int3   
 104e134:	int3   
 104e135:	int3   
 104e136:	int3   
 104e137:	int3   
 104e138:	int3   
 104e139:	int3   
 104e13a:	int3   
 104e13b:	int3   
 104e13c:	int3   
 104e13d:	int3   
 104e13e:	int3   
 104e13f:	int3   
 104e140:	lea    rcx,[rdx+0x60]
 104e147:	rex.W jmp QWORD PTR [rip+0xfffffffffffb395a]        # 0x1001aa8
 104e14e:	int3   
 104e14f:	int3   
 104e150:	lea    rcx,[rdx+0x58]
 104e157:	rex.W jmp QWORD PTR [rip+0xfffffffffffb394a]        # 0x1001aa8
 104e15e:	int3   
 104e15f:	int3   
 104e160:	lea    rcx,[rdx+0xb0]
 104e167:	rex.W jmp QWORD PTR [rip+0xfffffffffffb393a]        # 0x1001aa8
 104e16e:	int3   
 104e16f:	int3   
 104e170:	lea    rcx,[rdx+0x68]
 104e177:	rex.W jmp QWORD PTR [rip+0xfffffffffffb392a]        # 0x1001aa8
 104e17e:	int3   
 104e17f:	int3   
 104e180:	lea    rcx,[rdx+0x70]
 104e187:	rex.W jmp QWORD PTR [rip+0xfffffffffffb391a]        # 0x1001aa8
 104e18e:	int3   
 104e18f:	int3   
 104e190:	rex push rbp
 104e192:	sub    rsp,0x20
 104e196:	mov    rbp,rdx
 104e199:	mov    eax,DWORD PTR [rbp+0x50]
 104e19c:	and    eax,0x1
 104e19f:	test   eax,eax
 104e1a1:	je     0x104e1b1
 104e1a3:	and    DWORD PTR [rbp+0x50],0xfffffffe
 104e1a7:	lea    rcx,[rbp+0x78]
 104e1ab:	call   QWORD PTR [rip+0xfffffffffffb38f7]        # 0x1001aa8
 104e1b1:	add    rsp,0x20
 104e1b5:	pop    rbp
 104e1b6:	ret    
 104e1b7:	int3   
 104e1b8:	int3   
 104e1b9:	int3   
 104e1ba:	int3   
 104e1bb:	int3   
 104e1bc:	int3   
 104e1bd:	int3   
 104e1be:	int3   
 104e1bf:	int3   
 104e1c0:	rex push rbp
 104e1c2:	sub    rsp,0x20
 104e1c6:	mov    rbp,rdx
 104e1c9:	mov    eax,DWORD PTR [rbp+0x50]
 104e1cc:	and    eax,0x2
 104e1cf:	test   eax,eax
 104e1d1:	je     0x104e1e1
 104e1d3:	and    DWORD PTR [rbp+0x50],0xfffffffd
 104e1d7:	lea    rcx,[rbp+0x70]
 104e1db:	call   QWORD PTR [rip+0xfffffffffffb38c7]        # 0x1001aa8
 104e1e1:	add    rsp,0x20
 104e1e5:	pop    rbp
 104e1e6:	ret    
 104e1e7:	int3   
 104e1e8:	int3   
 104e1e9:	int3   
 104e1ea:	int3   
 104e1eb:	int3   
 104e1ec:	int3   
 104e1ed:	int3   
 104e1ee:	int3   
 104e1ef:	int3   
 104e1f0:	rex push rbp
 104e1f2:	sub    rsp,0x20
 104e1f6:	mov    rbp,rdx
 104e1f9:	mov    eax,DWORD PTR [rbp+0x50]
 104e1fc:	and    eax,0x4
 104e1ff:	test   eax,eax
 104e201:	je     0x104e211
 104e203:	and    DWORD PTR [rbp+0x50],0xfffffffb
 104e207:	lea    rcx,[rbp+0x70]
 104e20b:	call   QWORD PTR [rip+0xfffffffffffb3897]        # 0x1001aa8
 104e211:	add    rsp,0x20
 104e215:	pop    rbp
 104e216:	ret    
 104e217:	int3   
 104e218:	int3   
 104e219:	int3   
 104e21a:	int3   
 104e21b:	int3   
 104e21c:	int3   
 104e21d:	int3   
 104e21e:	int3   
 104e21f:	int3   
 104e220:	rex push rbp
 104e222:	sub    rsp,0x20
 104e226:	mov    rbp,rdx
 104e229:	mov    eax,DWORD PTR [rbp+0x50]
 104e22c:	and    eax,0x8
 104e22f:	test   eax,eax
 104e231:	je     0x104e241
 104e233:	and    DWORD PTR [rbp+0x50],0xfffffff7
 104e237:	lea    rcx,[rbp+0x78]
 104e23b:	call   QWORD PTR [rip+0xfffffffffffb3867]        # 0x1001aa8
 104e241:	add    rsp,0x20
 104e245:	pop    rbp
 104e246:	ret    
 104e247:	int3   
 104e248:	int3   
 104e249:	int3   
 104e24a:	int3   
 104e24b:	int3   
 104e24c:	int3   
 104e24d:	int3   
 104e24e:	int3   
 104e24f:	int3   
 104e250:	lea    rcx,[rdx+0x60]
 104e257:	rex.W jmp QWORD PTR [rip+0xfffffffffffb384a]        # 0x1001aa8
 104e25e:	int3   
 104e25f:	int3   
 104e260:	lea    rcx,[rdx+0x58]
 104e267:	rex.W jmp QWORD PTR [rip+0xfffffffffffb383a]        # 0x1001aa8
 104e26e:	int3   
 104e26f:	int3   
 104e270:	lea    rcx,[rdx+0x70]
 104e277:	rex.W jmp QWORD PTR [rip+0xfffffffffffb382a]        # 0x1001aa8
 104e27e:	int3   
 104e27f:	int3   
 104e280:	lea    rcx,[rdx+0xb0]
 104e287:	rex.W jmp QWORD PTR [rip+0xfffffffffffb381a]        # 0x1001aa8
 104e28e:	int3   
 104e28f:	int3   
 104e290:	lea    rcx,[rdx+0x68]
 104e297:	rex.W jmp QWORD PTR [rip+0xfffffffffffb380a]        # 0x1001aa8
 104e29e:	int3   
 104e29f:	int3   
 104e2a0:	lea    rcx,[rdx+0x78]
 104e2a7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb37fa]        # 0x1001aa8
 104e2ae:	int3   
 104e2af:	int3   
 104e2b0:	lea    rcx,[rdx+0x78]
 104e2b7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb37ea]        # 0x1001aa8
 104e2be:	int3   
 104e2bf:	int3   
 104e2c0:	rex push rbp
 104e2c2:	sub    rsp,0x20
 104e2c6:	mov    rbp,rdx
 104e2c9:	mov    eax,DWORD PTR [rbp+0x50]
 104e2cc:	and    eax,0x1
 104e2cf:	test   eax,eax
 104e2d1:	je     0x104e2e4
 104e2d3:	and    DWORD PTR [rbp+0x50],0xfffffffe
 104e2d7:	lea    rcx,[rbp+0x80]
 104e2de:	call   QWORD PTR [rip+0xfffffffffffb37c4]        # 0x1001aa8
 104e2e4:	add    rsp,0x20
 104e2e8:	pop    rbp
 104e2e9:	ret    
 104e2ea:	int3   
 104e2eb:	int3   
 104e2ec:	int3   
 104e2ed:	int3   
 104e2ee:	int3   
 104e2ef:	int3   
 104e2f0:	rex push rbp
 104e2f2:	sub    rsp,0x20
 104e2f6:	mov    rbp,rdx
 104e2f9:	mov    eax,DWORD PTR [rbp+0x50]
 104e2fc:	and    eax,0x2
 104e2ff:	test   eax,eax
 104e301:	je     0x104e311
 104e303:	and    DWORD PTR [rbp+0x50],0xfffffffd
 104e307:	lea    rcx,[rbp+0x78]
 104e30b:	call   QWORD PTR [rip+0xfffffffffffb3797]        # 0x1001aa8
 104e311:	add    rsp,0x20
 104e315:	pop    rbp
 104e316:	ret    
 104e317:	int3   
 104e318:	int3   
 104e319:	int3   
 104e31a:	int3   
 104e31b:	int3   
 104e31c:	int3   
 104e31d:	int3   
 104e31e:	int3   
 104e31f:	int3   
 104e320:	rex push rbp
 104e322:	sub    rsp,0x20
 104e326:	mov    rbp,rdx
 104e329:	mov    eax,DWORD PTR [rbp+0x50]
 104e32c:	and    eax,0x4
 104e32f:	test   eax,eax
 104e331:	je     0x104e341
 104e333:	and    DWORD PTR [rbp+0x50],0xfffffffb
 104e337:	lea    rcx,[rbp+0x78]
 104e33b:	call   QWORD PTR [rip+0xfffffffffffb3767]        # 0x1001aa8
 104e341:	add    rsp,0x20
 104e345:	pop    rbp
 104e346:	ret    
 104e347:	int3   
 104e348:	int3   
 104e349:	int3   
 104e34a:	int3   
 104e34b:	int3   
 104e34c:	int3   
 104e34d:	int3   
 104e34e:	int3   
 104e34f:	int3   
 104e350:	rex push rbp
 104e352:	sub    rsp,0x20
 104e356:	mov    rbp,rdx
 104e359:	mov    eax,DWORD PTR [rbp+0x50]
 104e35c:	and    eax,0x8
 104e35f:	test   eax,eax
 104e361:	je     0x104e374
 104e363:	and    DWORD PTR [rbp+0x50],0xfffffff7
 104e367:	lea    rcx,[rbp+0x80]
 104e36e:	call   QWORD PTR [rip+0xfffffffffffb3734]        # 0x1001aa8
 104e374:	add    rsp,0x20
 104e378:	pop    rbp
 104e379:	ret    
 104e37a:	int3   
 104e37b:	int3   
 104e37c:	int3   
 104e37d:	int3   
 104e37e:	int3   
 104e37f:	int3   
 104e380:	rex push rbp
 104e382:	sub    rsp,0x20
 104e386:	mov    rbp,rdx
 104e389:	mov    r9,QWORD PTR [rip+0xfffffffffffb3718]        # 0x1001aa8
 104e390:	mov    r8d,0x1
 104e396:	mov    edx,0x8
 104e39b:	lea    rcx,[rbp+0x90]
 104e3a2:	call   0x1040094
 104e3a7:	add    rsp,0x20
 104e3ab:	pop    rbp
 104e3ac:	ret    
 104e3ad:	int3   
 104e3ae:	int3   
 104e3af:	int3   
 104e3b0:	int3   
 104e3b1:	int3   
 104e3b2:	int3   
 104e3b3:	int3   
 104e3b4:	int3   
 104e3b5:	int3   
 104e3b6:	int3   
 104e3b7:	int3   
 104e3b8:	int3   
 104e3b9:	int3   
 104e3ba:	int3   
 104e3bb:	int3   
 104e3bc:	int3   
 104e3bd:	int3   
 104e3be:	int3   
 104e3bf:	int3   
 104e3c0:	mov    rcx,QWORD PTR [rdx+0x30]
 104e3c7:	jmp    0x103f95a
 104e3cc:	int3   
 104e3cd:	int3   
 104e3ce:	int3   
 104e3cf:	int3   
 104e3d0:	int3   
 104e3d1:	int3   
 104e3d2:	int3   
 104e3d3:	int3   
 104e3d4:	int3   
 104e3d5:	int3   
 104e3d6:	int3   
 104e3d7:	int3   
 104e3d8:	int3   
 104e3d9:	int3   
 104e3da:	int3   
 104e3db:	int3   
 104e3dc:	int3   
 104e3dd:	int3   
 104e3de:	int3   
 104e3df:	int3   
 104e3e0:	lea    rcx,[rdx+0x70]
 104e3e7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb36ba]        # 0x1001aa8
 104e3ee:	int3   
 104e3ef:	int3   
 104e3f0:	lea    rcx,[rdx+0x88]
 104e3f7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb36aa]        # 0x1001aa8
 104e3fe:	int3   
 104e3ff:	int3   
 104e400:	lea    rcx,[rdx+0x80]
 104e407:	rex.W jmp QWORD PTR [rip+0xfffffffffffb369a]        # 0x1001aa8
 104e40e:	int3   
 104e40f:	int3   
 104e410:	lea    rcx,[rdx+0x80]
 104e417:	rex.W jmp QWORD PTR [rip+0xfffffffffffb368a]        # 0x1001aa8
 104e41e:	int3   
 104e41f:	int3   
 104e420:	lea    rcx,[rdx+0x80]
 104e427:	rex.W jmp QWORD PTR [rip+0xfffffffffffb367a]        # 0x1001aa8
 104e42e:	int3   
 104e42f:	int3   
 104e430:	lea    rcx,[rdx+0x80]
 104e437:	rex.W jmp QWORD PTR [rip+0xfffffffffffb366a]        # 0x1001aa8
 104e43e:	int3   
 104e43f:	int3   
 104e440:	int3   
 104e441:	int3   
 104e442:	int3   
 104e443:	int3   
 104e444:	int3   
 104e445:	int3   
 104e446:	int3   
 104e447:	int3   
 104e448:	int3   
 104e449:	int3   
 104e44a:	int3   
 104e44b:	int3   
 104e44c:	int3   
 104e44d:	int3   
 104e44e:	int3   
 104e44f:	int3   
 104e450:	mov    rcx,QWORD PTR [rdx+0x48]
 104e457:	jmp    0x103f95a
 104e45c:	int3   
 104e45d:	int3   
 104e45e:	int3   
 104e45f:	int3   
 104e460:	int3   
 104e461:	int3   
 104e462:	int3   
 104e463:	int3   
 104e464:	int3   
 104e465:	int3   
 104e466:	int3   
 104e467:	int3   
 104e468:	int3   
 104e469:	int3   
 104e46a:	int3   
 104e46b:	int3   
 104e46c:	int3   
 104e46d:	int3   
 104e46e:	int3   
 104e46f:	int3   
 104e470:	mov    rcx,QWORD PTR [rdx+0x48]
 104e477:	jmp    0x103f95a
 104e47c:	int3   
 104e47d:	int3   
 104e47e:	int3   
 104e47f:	int3   
 104e480:	int3   
 104e481:	int3   
 104e482:	int3   
 104e483:	int3   
 104e484:	int3   
 104e485:	int3   
 104e486:	int3   
 104e487:	int3   
 104e488:	int3   
 104e489:	int3   
 104e48a:	int3   
 104e48b:	int3   
 104e48c:	int3   
 104e48d:	int3   
 104e48e:	int3   
 104e48f:	int3   
 104e490:	lea    rcx,[rdx+0x78]
 104e497:	rex.W jmp QWORD PTR [rip+0xfffffffffffb360a]        # 0x1001aa8
 104e49e:	int3   
 104e49f:	int3   
 104e4a0:	lea    rcx,[rdx+0x70]
 104e4a7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb35fa]        # 0x1001aa8
 104e4ae:	int3   
 104e4af:	int3   
 104e4b0:	lea    rcx,[rdx+0x68]
 104e4b7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb35ea]        # 0x1001aa8
 104e4be:	int3   
 104e4bf:	int3   
 104e4c0:	lea    rcx,[rdx+0x100]
 104e4c7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb35da]        # 0x1001aa8
 104e4ce:	int3   
 104e4cf:	int3   
 104e4d0:	lea    rcx,[rdx+0x108]
 104e4d7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb35ca]        # 0x1001aa8
 104e4de:	int3   
 104e4df:	int3   
 104e4e0:	lea    rcx,[rdx+0xa8]
 104e4e7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb35ba]        # 0x1001aa8
 104e4ee:	int3   
 104e4ef:	int3   
 104e4f0:	lea    rcx,[rdx+0x110]
 104e4f7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb35aa]        # 0x1001aa8
 104e4fe:	int3   
 104e4ff:	int3   
 104e500:	rex push rbp
 104e502:	sub    rsp,0x20
 104e506:	mov    rbp,rdx
 104e509:	mov    eax,DWORD PTR [rbp+0x60]
 104e50c:	and    eax,0x1
 104e50f:	test   eax,eax
 104e511:	je     0x104e524
 104e513:	and    DWORD PTR [rbp+0x60],0xfffffffe
 104e517:	lea    rcx,[rbp+0x90]
 104e51e:	call   QWORD PTR [rip+0xfffffffffffb3584]        # 0x1001aa8
 104e524:	add    rsp,0x20
 104e528:	pop    rbp
 104e529:	ret    
 104e52a:	int3   
 104e52b:	int3   
 104e52c:	int3   
 104e52d:	int3   
 104e52e:	int3   
 104e52f:	int3   
 104e530:	rex push rbp
 104e532:	sub    rsp,0x20
 104e536:	mov    rbp,rdx
 104e539:	mov    eax,DWORD PTR [rbp+0x60]
 104e53c:	and    eax,0x2
 104e53f:	test   eax,eax
 104e541:	je     0x104e554
 104e543:	and    DWORD PTR [rbp+0x60],0xfffffffd
 104e547:	lea    rcx,[rbp+0xb8]
 104e54e:	call   QWORD PTR [rip+0xfffffffffffb3554]        # 0x1001aa8
 104e554:	add    rsp,0x20
 104e558:	pop    rbp
 104e559:	ret    
 104e55a:	int3   
 104e55b:	int3   
 104e55c:	int3   
 104e55d:	int3   
 104e55e:	int3   
 104e55f:	int3   
 104e560:	rex push rbp
 104e562:	sub    rsp,0x20
 104e566:	mov    rbp,rdx
 104e569:	mov    eax,DWORD PTR [rbp+0x60]
 104e56c:	and    eax,0x4
 104e56f:	test   eax,eax
 104e571:	je     0x104e584
 104e573:	and    DWORD PTR [rbp+0x60],0xfffffffb
 104e577:	lea    rcx,[rbp+0xe8]
 104e57e:	call   QWORD PTR [rip+0xfffffffffffb3524]        # 0x1001aa8
 104e584:	add    rsp,0x20
 104e588:	pop    rbp
 104e589:	ret    
 104e58a:	int3   
 104e58b:	int3   
 104e58c:	int3   
 104e58d:	int3   
 104e58e:	int3   
 104e58f:	int3   
 104e590:	lea    rcx,[rdx+0x80]
 104e597:	rex.W jmp QWORD PTR [rip+0xfffffffffffb350a]        # 0x1001aa8
 104e59e:	int3   
 104e59f:	int3   
 104e5a0:	lea    rcx,[rdx+0xc8]
 104e5a7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb34fa]        # 0x1001aa8
 104e5ae:	int3   
 104e5af:	int3   
 104e5b0:	lea    rcx,[rdx+0xf8]
 104e5b7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb34ea]        # 0x1001aa8
 104e5be:	int3   
 104e5bf:	int3   
 104e5c0:	rex push rbp
 104e5c2:	sub    rsp,0x20
 104e5c6:	mov    rbp,rdx
 104e5c9:	mov    eax,DWORD PTR [rbp+0x60]
 104e5cc:	and    eax,0x8
 104e5cf:	test   eax,eax
 104e5d1:	je     0x104e5e4
 104e5d3:	and    DWORD PTR [rbp+0x60],0xfffffff7
 104e5d7:	lea    rcx,[rbp+0xb0]
 104e5de:	call   QWORD PTR [rip+0xfffffffffffb34c4]        # 0x1001aa8
 104e5e4:	add    rsp,0x20
 104e5e8:	pop    rbp
 104e5e9:	ret    
 104e5ea:	int3   
 104e5eb:	int3   
 104e5ec:	int3   
 104e5ed:	int3   
 104e5ee:	int3   
 104e5ef:	int3   
 104e5f0:	rex push rbp
 104e5f2:	sub    rsp,0x20
 104e5f6:	mov    rbp,rdx
 104e5f9:	mov    eax,DWORD PTR [rbp+0x60]
 104e5fc:	and    eax,0x10
 104e5ff:	test   eax,eax
 104e601:	je     0x104e614
 104e603:	and    DWORD PTR [rbp+0x60],0xffffffef
 104e607:	lea    rcx,[rbp+0xa0]
 104e60e:	call   QWORD PTR [rip+0xfffffffffffb3494]        # 0x1001aa8
 104e614:	add    rsp,0x20
 104e618:	pop    rbp
 104e619:	ret    
 104e61a:	int3   
 104e61b:	int3   
 104e61c:	int3   
 104e61d:	int3   
 104e61e:	int3   
 104e61f:	int3   
 104e620:	lea    rcx,[rdx+0x98]
 104e627:	rex.W jmp QWORD PTR [rip+0xfffffffffffb347a]        # 0x1001aa8
 104e62e:	int3   
 104e62f:	int3   
 104e630:	lea    rcx,[rdx+0xd8]
 104e637:	rex.W jmp QWORD PTR [rip+0xfffffffffffb346a]        # 0x1001aa8
 104e63e:	int3   
 104e63f:	int3   
 104e640:	lea    rcx,[rdx+0xc0]
 104e647:	rex.W jmp QWORD PTR [rip+0xfffffffffffb345a]        # 0x1001aa8
 104e64e:	int3   
 104e64f:	int3   
 104e650:	lea    rcx,[rdx+0xd0]
 104e657:	rex.W jmp QWORD PTR [rip+0xfffffffffffb344a]        # 0x1001aa8
 104e65e:	int3   
 104e65f:	int3   
 104e660:	lea    rcx,[rdx+0xf0]
 104e667:	rex.W jmp QWORD PTR [rip+0xfffffffffffb343a]        # 0x1001aa8
 104e66e:	int3   
 104e66f:	int3   
 104e670:	lea    rcx,[rdx+0xe0]
 104e677:	rex.W jmp QWORD PTR [rip+0xfffffffffffb342a]        # 0x1001aa8
 104e67e:	int3   
 104e67f:	int3   
 104e680:	int3   
 104e681:	int3   
 104e682:	int3   
 104e683:	int3   
 104e684:	int3   
 104e685:	int3   
 104e686:	int3   
 104e687:	int3   
 104e688:	int3   
 104e689:	int3   
 104e68a:	int3   
 104e68b:	int3   
 104e68c:	int3   
 104e68d:	int3   
 104e68e:	int3   
 104e68f:	int3   
 104e690:	lea    rcx,[rdx+0xc0]
 104e697:	rex.W jmp QWORD PTR [rip+0xfffffffffffb340a]        # 0x1001aa8
 104e69e:	int3   
 104e69f:	int3   
 104e6a0:	lea    rcx,[rdx+0x138]
 104e6a7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb33fa]        # 0x1001aa8
 104e6ae:	int3   
 104e6af:	int3   
 104e6b0:	lea    rcx,[rdx+0xc8]
 104e6b7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb33ea]        # 0x1001aa8
 104e6be:	int3   
 104e6bf:	int3   
 104e6c0:	lea    rcx,[rdx+0x98]
 104e6c7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb33da]        # 0x1001aa8
 104e6ce:	int3   
 104e6cf:	int3   
 104e6d0:	lea    rcx,[rdx+0x58]
 104e6d7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb33ca]        # 0x1001aa8
 104e6de:	int3   
 104e6df:	int3   
 104e6e0:	lea    rcx,[rdx+0xb8]
 104e6e7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb33ba]        # 0x1001aa8
 104e6ee:	int3   
 104e6ef:	int3   
 104e6f0:	lea    rcx,[rdx+0x68]
 104e6f7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb33aa]        # 0x1001aa8
 104e6fe:	int3   
 104e6ff:	int3   
 104e700:	lea    rcx,[rdx+0x88]
 104e707:	rex.W jmp QWORD PTR [rip+0xfffffffffffb339a]        # 0x1001aa8
 104e70e:	int3   
 104e70f:	int3   
 104e710:	lea    rcx,[rdx+0xa8]
 104e717:	rex.W jmp QWORD PTR [rip+0xfffffffffffb338a]        # 0x1001aa8
 104e71e:	int3   
 104e71f:	int3   
 104e720:	lea    rcx,[rdx+0x78]
 104e727:	rex.W jmp QWORD PTR [rip+0xfffffffffffb337a]        # 0x1001aa8
 104e72e:	int3   
 104e72f:	int3   
 104e730:	lea    rcx,[rdx+0x130]
 104e737:	rex.W jmp QWORD PTR [rip+0xfffffffffffb336a]        # 0x1001aa8
 104e73e:	int3   
 104e73f:	int3   
 104e740:	lea    rcx,[rdx+0x50]
 104e747:	rex.W jmp QWORD PTR [rip+0xfffffffffffb335a]        # 0x1001aa8
 104e74e:	int3   
 104e74f:	int3   
 104e750:	lea    rcx,[rdx+0x48]
 104e757:	rex.W jmp QWORD PTR [rip+0xfffffffffffb334a]        # 0x1001aa8
 104e75e:	int3   
 104e75f:	int3   
 104e760:	rex push rbp
 104e762:	sub    rsp,0x20
 104e766:	mov    rbp,rdx
 104e769:	mov    eax,DWORD PTR [rbp+0x40]
 104e76c:	and    eax,0x1
 104e76f:	test   eax,eax
 104e771:	je     0x104e784
 104e773:	and    DWORD PTR [rbp+0x40],0xfffffffe
 104e777:	lea    rcx,[rbp+0x80]
 104e77e:	call   QWORD PTR [rip+0xfffffffffffb3324]        # 0x1001aa8
 104e784:	add    rsp,0x20
 104e788:	pop    rbp
 104e789:	ret    
 104e78a:	int3   
 104e78b:	int3   
 104e78c:	int3   
 104e78d:	int3   
 104e78e:	int3   
 104e78f:	int3   
 104e790:	rex push rbp
 104e792:	sub    rsp,0x20
 104e796:	mov    rbp,rdx
 104e799:	mov    eax,DWORD PTR [rbp+0x40]
 104e79c:	and    eax,0x2
 104e79f:	test   eax,eax
 104e7a1:	je     0x104e7b1
 104e7a3:	and    DWORD PTR [rbp+0x40],0xfffffffd
 104e7a7:	lea    rcx,[rbp+0x70]
 104e7ab:	call   QWORD PTR [rip+0xfffffffffffb32f7]        # 0x1001aa8
 104e7b1:	add    rsp,0x20
 104e7b5:	pop    rbp
 104e7b6:	ret    
 104e7b7:	int3   
 104e7b8:	int3   
 104e7b9:	int3   
 104e7ba:	int3   
 104e7bb:	int3   
 104e7bc:	int3   
 104e7bd:	int3   
 104e7be:	int3   
 104e7bf:	int3   
 104e7c0:	rex push rbp
 104e7c2:	sub    rsp,0x20
 104e7c6:	mov    rbp,rdx
 104e7c9:	mov    eax,DWORD PTR [rbp+0x40]
 104e7cc:	and    eax,0x4
 104e7cf:	test   eax,eax
 104e7d1:	je     0x104e7e1
 104e7d3:	and    DWORD PTR [rbp+0x40],0xfffffffb
 104e7d7:	lea    rcx,[rbp+0x60]
 104e7db:	call   QWORD PTR [rip+0xfffffffffffb32c7]        # 0x1001aa8
 104e7e1:	add    rsp,0x20
 104e7e5:	pop    rbp
 104e7e6:	ret    
 104e7e7:	int3   
 104e7e8:	int3   
 104e7e9:	int3   
 104e7ea:	int3   
 104e7eb:	int3   
 104e7ec:	int3   
 104e7ed:	int3   
 104e7ee:	int3   
 104e7ef:	int3   
 104e7f0:	rex push rbp
 104e7f2:	sub    rsp,0x20
 104e7f6:	mov    rbp,rdx
 104e7f9:	mov    eax,DWORD PTR [rbp+0x40]
 104e7fc:	and    eax,0x8
 104e7ff:	test   eax,eax
 104e801:	je     0x104e814
 104e803:	and    DWORD PTR [rbp+0x40],0xfffffff7
 104e807:	lea    rcx,[rbp+0xa0]
 104e80e:	call   QWORD PTR [rip+0xfffffffffffb3294]        # 0x1001aa8
 104e814:	add    rsp,0x20
 104e818:	pop    rbp
 104e819:	ret    
 104e81a:	int3   
 104e81b:	int3   
 104e81c:	int3   
 104e81d:	int3   
 104e81e:	int3   
 104e81f:	int3   
 104e820:	rex push rbp
 104e822:	sub    rsp,0x20
 104e826:	mov    rbp,rdx
 104e829:	mov    eax,DWORD PTR [rbp+0x40]
 104e82c:	and    eax,0x10
 104e82f:	test   eax,eax
 104e831:	je     0x104e844
 104e833:	and    DWORD PTR [rbp+0x40],0xffffffef
 104e837:	lea    rcx,[rbp+0x90]
 104e83e:	call   QWORD PTR [rip+0xfffffffffffb3264]        # 0x1001aa8
 104e844:	add    rsp,0x20
 104e848:	pop    rbp
 104e849:	ret    
 104e84a:	int3   
 104e84b:	int3   
 104e84c:	int3   
 104e84d:	int3   
 104e84e:	int3   
 104e84f:	int3   
 104e850:	lea    rcx,[rdx+0xb0]
 104e857:	rex.W jmp QWORD PTR [rip+0xfffffffffffb324a]        # 0x1001aa8
 104e85e:	int3   
 104e85f:	int3   
 104e860:	int3   
 104e861:	int3   
 104e862:	int3   
 104e863:	int3   
 104e864:	int3   
 104e865:	int3   
 104e866:	int3   
 104e867:	int3   
 104e868:	int3   
 104e869:	int3   
 104e86a:	int3   
 104e86b:	int3   
 104e86c:	int3   
 104e86d:	int3   
 104e86e:	int3   
 104e86f:	int3   
 104e870:	lea    rcx,[rdx+0x58]
 104e877:	rex.W jmp QWORD PTR [rip+0xfffffffffffb322a]        # 0x1001aa8
 104e87e:	int3   
 104e87f:	int3   
 104e880:	lea    rcx,[rdx+0xf8]
 104e887:	rex.W jmp QWORD PTR [rip+0xfffffffffffb321a]        # 0x1001aa8
 104e88e:	int3   
 104e88f:	int3   
 104e890:	lea    rcx,[rdx+0x48]
 104e897:	rex.W jmp QWORD PTR [rip+0xfffffffffffb320a]        # 0x1001aa8
 104e89e:	int3   
 104e89f:	int3   
 104e8a0:	lea    rcx,[rdx+0x50]
 104e8a7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb31fa]        # 0x1001aa8
 104e8ae:	int3   
 104e8af:	int3   
 104e8b0:	lea    rcx,[rdx+0x60]
 104e8b7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb31ea]        # 0x1001aa8
 104e8be:	int3   
 104e8bf:	int3   
 104e8c0:	lea    rcx,[rdx+0x70]
 104e8c7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb31da]        # 0x1001aa8
 104e8ce:	int3   
 104e8cf:	int3   
 104e8d0:	rex push rbp
 104e8d2:	sub    rsp,0x20
 104e8d6:	mov    rbp,rdx
 104e8d9:	mov    eax,DWORD PTR [rbp+0x40]
 104e8dc:	and    eax,0x1
 104e8df:	test   eax,eax
 104e8e1:	je     0x104e8f4
 104e8e3:	and    DWORD PTR [rbp+0x40],0xfffffffe
 104e8e7:	lea    rcx,[rbp+0x80]
 104e8ee:	call   QWORD PTR [rip+0xfffffffffffb31b4]        # 0x1001aa8
 104e8f4:	add    rsp,0x20
 104e8f8:	pop    rbp
 104e8f9:	ret    
 104e8fa:	int3   
 104e8fb:	int3   
 104e8fc:	int3   
 104e8fd:	int3   
 104e8fe:	int3   
 104e8ff:	int3   
 104e900:	lea    rcx,[rdx+0x78]
 104e907:	rex.W jmp QWORD PTR [rip+0xfffffffffffb319a]        # 0x1001aa8
 104e90e:	int3   
 104e90f:	int3   
 104e910:	lea    rcx,[rdx+0x68]
 104e917:	rex.W jmp QWORD PTR [rip+0xfffffffffffb318a]        # 0x1001aa8
 104e91e:	int3   
 104e91f:	int3   
 104e920:	int3   
 104e921:	int3   
 104e922:	int3   
 104e923:	int3   
 104e924:	int3   
 104e925:	int3   
 104e926:	int3   
 104e927:	int3   
 104e928:	int3   
 104e929:	int3   
 104e92a:	int3   
 104e92b:	int3   
 104e92c:	int3   
 104e92d:	int3   
 104e92e:	int3   
 104e92f:	int3   
 104e930:	lea    rcx,[rdx+0x68]
 104e937:	rex.W jmp QWORD PTR [rip+0xfffffffffffb316a]        # 0x1001aa8
 104e93e:	int3   
 104e93f:	int3   
 104e940:	lea    rcx,[rdx+0x48]
 104e947:	rex.W jmp QWORD PTR [rip+0xfffffffffffb315a]        # 0x1001aa8
 104e94e:	int3   
 104e94f:	int3   
 104e950:	lea    rcx,[rdx+0x58]
 104e957:	rex.W jmp QWORD PTR [rip+0xfffffffffffb314a]        # 0x1001aa8
 104e95e:	int3   
 104e95f:	int3   
 104e960:	lea    rcx,[rdx+0x108]
 104e967:	rex.W jmp QWORD PTR [rip+0xfffffffffffb313a]        # 0x1001aa8
 104e96e:	int3   
 104e96f:	int3   
 104e970:	lea    rcx,[rdx+0x98]
 104e977:	rex.W jmp QWORD PTR [rip+0xfffffffffffb312a]        # 0x1001aa8
 104e97e:	int3   
 104e97f:	int3   
 104e980:	lea    rcx,[rdx+0x70]
 104e987:	rex.W jmp QWORD PTR [rip+0xfffffffffffb311a]        # 0x1001aa8
 104e98e:	int3   
 104e98f:	int3   
 104e990:	lea    rcx,[rdx+0x60]
 104e997:	rex.W jmp QWORD PTR [rip+0xfffffffffffb310a]        # 0x1001aa8
 104e99e:	int3   
 104e99f:	int3   
 104e9a0:	rex push rbp
 104e9a2:	sub    rsp,0x20
 104e9a6:	mov    rbp,rdx
 104e9a9:	mov    eax,DWORD PTR [rbp+0x40]
 104e9ac:	and    eax,0x1
 104e9af:	test   eax,eax
 104e9b1:	je     0x104e9c1
 104e9b3:	and    DWORD PTR [rbp+0x40],0xfffffffe
 104e9b7:	lea    rcx,[rbp+0x78]
 104e9bb:	call   QWORD PTR [rip+0xfffffffffffb30e7]        # 0x1001aa8
 104e9c1:	add    rsp,0x20
 104e9c5:	pop    rbp
 104e9c6:	ret    
 104e9c7:	int3   
 104e9c8:	int3   
 104e9c9:	int3   
 104e9ca:	int3   
 104e9cb:	int3   
 104e9cc:	int3   
 104e9cd:	int3   
 104e9ce:	int3   
 104e9cf:	int3   
 104e9d0:	lea    rcx,[rdx+0x90]
 104e9d7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb30ca]        # 0x1001aa8
 104e9de:	int3   
 104e9df:	int3   
 104e9e0:	lea    rcx,[rdx+0x80]
 104e9e7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb30ba]        # 0x1001aa8
 104e9ee:	int3   
 104e9ef:	int3   
 104e9f0:	int3   
 104e9f1:	int3   
 104e9f2:	int3   
 104e9f3:	int3   
 104e9f4:	int3   
 104e9f5:	int3   
 104e9f6:	int3   
 104e9f7:	int3   
 104e9f8:	int3   
 104e9f9:	int3   
 104e9fa:	int3   
 104e9fb:	int3   
 104e9fc:	int3   
 104e9fd:	int3   
 104e9fe:	int3   
 104e9ff:	int3   
 104ea00:	lea    rcx,[rdx+0x30]
 104ea07:	rex.W jmp QWORD PTR [rip+0xfffffffffffb309a]        # 0x1001aa8
 104ea0e:	int3   
 104ea0f:	int3   
 104ea10:	lea    rcx,[rdx+0x20]
 104ea17:	rex.W jmp QWORD PTR [rip+0xfffffffffffb308a]        # 0x1001aa8
 104ea1e:	int3   
 104ea1f:	int3   
 104ea20:	lea    rcx,[rdx+0x90]
 104ea27:	rex.W jmp QWORD PTR [rip+0xfffffffffffb307a]        # 0x1001aa8
 104ea2e:	int3   
 104ea2f:	int3   
 104ea30:	lea    rcx,[rdx+0x28]
 104ea37:	rex.W jmp QWORD PTR [rip+0xfffffffffffb306a]        # 0x1001aa8
 104ea3e:	int3   
 104ea3f:	int3   
 104ea40:	lea    rcx,[rdx+0x98]
 104ea47:	rex.W jmp QWORD PTR [rip+0xfffffffffffb305a]        # 0x1001aa8
 104ea4e:	int3   
 104ea4f:	int3   
 104ea50:	lea    rcx,[rdx+0x38]
 104ea57:	rex.W jmp QWORD PTR [rip+0xfffffffffffb304a]        # 0x1001aa8
 104ea5e:	int3   
 104ea5f:	int3   
 104ea60:	lea    rcx,[rdx+0x38]
 104ea67:	rex.W jmp QWORD PTR [rip+0xfffffffffffb303a]        # 0x1001aa8
 104ea6e:	int3   
 104ea6f:	int3   
 104ea70:	int3   
 104ea71:	int3   
 104ea72:	int3   
 104ea73:	int3   
 104ea74:	int3   
 104ea75:	int3   
 104ea76:	int3   
 104ea77:	int3   
 104ea78:	int3   
 104ea79:	int3   
 104ea7a:	int3   
 104ea7b:	int3   
 104ea7c:	int3   
 104ea7d:	int3   
 104ea7e:	int3   
 104ea7f:	int3   
 104ea80:	lea    rcx,[rdx+0x50]
 104ea87:	rex.W jmp QWORD PTR [rip+0xfffffffffffb301a]        # 0x1001aa8
 104ea8e:	int3   
 104ea8f:	int3   
 104ea90:	lea    rcx,[rdx+0x58]
 104ea97:	rex.W jmp QWORD PTR [rip+0xfffffffffffb300a]        # 0x1001aa8
 104ea9e:	int3   
 104ea9f:	int3   
 104eaa0:	lea    rcx,[rdx+0xa0]
 104eaa7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2ffa]        # 0x1001aa8
 104eaae:	int3   
 104eaaf:	int3   
 104eab0:	lea    rcx,[rdx+0xa8]
 104eab7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2fea]        # 0x1001aa8
 104eabe:	int3   
 104eabf:	int3   
 104eac0:	lea    rcx,[rdx+0x98]
 104eac7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2fda]        # 0x1001aa8
 104eace:	int3   
 104eacf:	int3   
 104ead0:	lea    rcx,[rdx+0x80]
 104ead7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2fca]        # 0x1001aa8
 104eade:	int3   
 104eadf:	int3   
 104eae0:	lea    rcx,[rdx+0x90]
 104eae7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2fba]        # 0x1001aa8
 104eaee:	int3   
 104eaef:	int3   
 104eaf0:	lea    rcx,[rdx+0x70]
 104eaf7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2faa]        # 0x1001aa8
 104eafe:	int3   
 104eaff:	int3   
 104eb00:	mov    rcx,QWORD PTR [rdx+0x60]
 104eb07:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2f9a]        # 0x1001aa8
 104eb0e:	int3   
 104eb0f:	int3   
 104eb10:	lea    rcx,[rdx+0x78]
 104eb17:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2f8a]        # 0x1001aa8
 104eb1e:	int3   
 104eb1f:	int3   
 104eb20:	lea    rcx,[rdx+0x88]
 104eb27:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2f7a]        # 0x1001aa8
 104eb2e:	int3   
 104eb2f:	int3   
 104eb30:	lea    rcx,[rdx+0x68]
 104eb37:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2f6a]        # 0x1001aa8
 104eb3e:	int3   
 104eb3f:	int3   
 104eb40:	mov    rcx,QWORD PTR [rdx+0x68]
 104eb47:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2f5a]        # 0x1001aa8
 104eb4e:	int3   
 104eb4f:	int3   
 104eb50:	int3   
 104eb51:	int3   
 104eb52:	int3   
 104eb53:	int3   
 104eb54:	int3   
 104eb55:	int3   
 104eb56:	int3   
 104eb57:	int3   
 104eb58:	int3   
 104eb59:	int3   
 104eb5a:	int3   
 104eb5b:	int3   
 104eb5c:	int3   
 104eb5d:	int3   
 104eb5e:	int3   
 104eb5f:	int3   
 104eb60:	lea    rcx,[rdx+0x48]
 104eb67:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2f3a]        # 0x1001aa8
 104eb6e:	int3   
 104eb6f:	int3   
 104eb70:	lea    rcx,[rdx+0x50]
 104eb77:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2f2a]        # 0x1001aa8
 104eb7e:	int3   
 104eb7f:	int3   
 104eb80:	lea    rcx,[rdx+0x58]
 104eb87:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2f1a]        # 0x1001aa8
 104eb8e:	int3   
 104eb8f:	int3   
 104eb90:	lea    rcx,[rdx+0x60]
 104eb97:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2f0a]        # 0x1001aa8
 104eb9e:	int3   
 104eb9f:	int3   
 104eba0:	mov    rcx,QWORD PTR [rdx+0x60]
 104eba7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2efa]        # 0x1001aa8
 104ebae:	int3   
 104ebaf:	int3   
 104ebb0:	int3   
 104ebb1:	int3   
 104ebb2:	int3   
 104ebb3:	int3   
 104ebb4:	int3   
 104ebb5:	int3   
 104ebb6:	int3   
 104ebb7:	int3   
 104ebb8:	int3   
 104ebb9:	int3   
 104ebba:	int3   
 104ebbb:	int3   
 104ebbc:	int3   
 104ebbd:	int3   
 104ebbe:	int3   
 104ebbf:	int3   
 104ebc0:	lea    rcx,[rdx+0xa8]
 104ebc7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2eda]        # 0x1001aa8
 104ebce:	int3   
 104ebcf:	int3   
 104ebd0:	lea    rcx,[rdx+0x98]
 104ebd7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2eca]        # 0x1001aa8
 104ebde:	int3   
 104ebdf:	int3   
 104ebe0:	lea    rcx,[rdx+0x88]
 104ebe7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2eba]        # 0x1001aa8
 104ebee:	int3   
 104ebef:	int3   
 104ebf0:	rex push rbp
 104ebf2:	sub    rsp,0x20
 104ebf6:	mov    rbp,rdx
 104ebf9:	mov    eax,DWORD PTR [rbp+0x80]
 104ebff:	and    eax,0x1
 104ec02:	test   eax,eax
 104ec04:	je     0x104ec1a
 104ec06:	and    DWORD PTR [rbp+0x80],0xfffffffe
 104ec0d:	lea    rcx,[rbp+0x110]
 104ec14:	call   QWORD PTR [rip+0xfffffffffffb2e8e]        # 0x1001aa8
 104ec1a:	add    rsp,0x20
 104ec1e:	pop    rbp
 104ec1f:	ret    
 104ec20:	rex push rbp
 104ec22:	sub    rsp,0x20
 104ec26:	mov    rbp,rdx
 104ec29:	mov    eax,DWORD PTR [rbp+0x80]
 104ec2f:	and    eax,0x2
 104ec32:	test   eax,eax
 104ec34:	je     0x104ec4a
 104ec36:	and    DWORD PTR [rbp+0x80],0xfffffffd
 104ec3d:	lea    rcx,[rbp+0xc0]
 104ec44:	call   QWORD PTR [rip+0xfffffffffffb2e5e]        # 0x1001aa8
 104ec4a:	add    rsp,0x20
 104ec4e:	pop    rbp
 104ec4f:	ret    
 104ec50:	rex push rbp
 104ec52:	sub    rsp,0x20
 104ec56:	mov    rbp,rdx
 104ec59:	mov    eax,DWORD PTR [rbp+0x80]
 104ec5f:	and    eax,0x4
 104ec62:	test   eax,eax
 104ec64:	je     0x104ec7a
 104ec66:	and    DWORD PTR [rbp+0x80],0xfffffffb
 104ec6d:	lea    rcx,[rbp+0x100]
 104ec74:	call   QWORD PTR [rip+0xfffffffffffb2e2e]        # 0x1001aa8
 104ec7a:	add    rsp,0x20
 104ec7e:	pop    rbp
 104ec7f:	ret    
 104ec80:	lea    rcx,[rdx+0x90]
 104ec87:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2e1a]        # 0x1001aa8
 104ec8e:	int3   
 104ec8f:	int3   
 104ec90:	lea    rcx,[rdx+0xd0]
 104ec97:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2e0a]        # 0x1001aa8
 104ec9e:	int3   
 104ec9f:	int3   
 104eca0:	lea    rcx,[rdx+0xb0]
 104eca7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2dfa]        # 0x1001aa8
 104ecae:	int3   
 104ecaf:	int3   
 104ecb0:	rex push rbp
 104ecb2:	sub    rsp,0x20
 104ecb6:	mov    rbp,rdx
 104ecb9:	mov    eax,DWORD PTR [rbp+0x80]
 104ecbf:	and    eax,0x8
 104ecc2:	test   eax,eax
 104ecc4:	je     0x104ecda
 104ecc6:	and    DWORD PTR [rbp+0x80],0xfffffff7
 104eccd:	lea    rcx,[rbp+0xb8]
 104ecd4:	call   QWORD PTR [rip+0xfffffffffffb2dce]        # 0x1001aa8
 104ecda:	add    rsp,0x20
 104ecde:	pop    rbp
 104ecdf:	ret    
 104ece0:	rex push rbp
 104ece2:	sub    rsp,0x20
 104ece6:	mov    rbp,rdx
 104ece9:	mov    eax,DWORD PTR [rbp+0x80]
 104ecef:	and    eax,0x10
 104ecf2:	test   eax,eax
 104ecf4:	je     0x104ed0a
 104ecf6:	and    DWORD PTR [rbp+0x80],0xffffffef
 104ecfd:	lea    rcx,[rbp+0xf0]
 104ed04:	call   QWORD PTR [rip+0xfffffffffffb2d9e]        # 0x1001aa8
 104ed0a:	add    rsp,0x20
 104ed0e:	pop    rbp
 104ed0f:	ret    
 104ed10:	lea    rcx,[rdx+0x118]
 104ed17:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2d8a]        # 0x1001aa8
 104ed1e:	int3   
 104ed1f:	int3   
 104ed20:	lea    rcx,[rdx+0xe0]
 104ed27:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2d7a]        # 0x1001aa8
 104ed2e:	int3   
 104ed2f:	int3   
 104ed30:	lea    rcx,[rdx+0xa0]
 104ed37:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2d6a]        # 0x1001aa8
 104ed3e:	int3   
 104ed3f:	int3   
 104ed40:	lea    rcx,[rdx+0xd8]
 104ed47:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2d5a]        # 0x1001aa8
 104ed4e:	int3   
 104ed4f:	int3   
 104ed50:	lea    rcx,[rdx+0xc8]
 104ed57:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2d4a]        # 0x1001aa8
 104ed5e:	int3   
 104ed5f:	int3   
 104ed60:	lea    rcx,[rdx+0xe8]
 104ed67:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2d3a]        # 0x1001aa8
 104ed6e:	int3   
 104ed6f:	int3   
 104ed70:	lea    rcx,[rdx+0x108]
 104ed77:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2d2a]        # 0x1001aa8
 104ed7e:	int3   
 104ed7f:	int3   
 104ed80:	lea    rcx,[rdx+0xf8]
 104ed87:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2d1a]        # 0x1001aa8
 104ed8e:	int3   
 104ed8f:	int3   
 104ed90:	int3   
 104ed91:	int3   
 104ed92:	int3   
 104ed93:	int3   
 104ed94:	int3   
 104ed95:	int3   
 104ed96:	int3   
 104ed97:	int3   
 104ed98:	int3   
 104ed99:	int3   
 104ed9a:	int3   
 104ed9b:	int3   
 104ed9c:	int3   
 104ed9d:	int3   
 104ed9e:	int3   
 104ed9f:	int3   
 104eda0:	lea    rcx,[rdx+0x1a8]
 104eda7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2cfa]        # 0x1001aa8
 104edae:	int3   
 104edaf:	int3   
 104edb0:	lea    rcx,[rdx+0x1a0]
 104edb7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2cea]        # 0x1001aa8
 104edbe:	int3   
 104edbf:	int3   
 104edc0:	lea    rcx,[rdx+0x100]
 104edc7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2cda]        # 0x1001aa8
 104edce:	int3   
 104edcf:	int3   
 104edd0:	lea    rcx,[rdx+0xa8]
 104edd7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2cca]        # 0x1001aa8
 104edde:	int3   
 104eddf:	int3   
 104ede0:	lea    rcx,[rdx+0xa0]
 104ede7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2cba]        # 0x1001aa8
 104edee:	int3   
 104edef:	int3   
 104edf0:	lea    rcx,[rdx+0x118]
 104edf7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2caa]        # 0x1001aa8
 104edfe:	int3   
 104edff:	int3   
 104ee00:	lea    rcx,[rdx+0x90]
 104ee07:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2c9a]        # 0x1001aa8
 104ee0e:	int3   
 104ee0f:	int3   
 104ee10:	lea    rcx,[rdx+0x110]
 104ee17:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2c8a]        # 0x1001aa8
 104ee1e:	int3   
 104ee1f:	int3   
 104ee20:	lea    rcx,[rdx+0x198]
 104ee27:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2c7a]        # 0x1001aa8
 104ee2e:	int3   
 104ee2f:	int3   
 104ee30:	lea    rcx,[rdx+0x98]
 104ee37:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2c6a]        # 0x1001aa8
 104ee3e:	int3   
 104ee3f:	int3   
 104ee40:	lea    rcx,[rdx+0xb8]
 104ee47:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2c5a]        # 0x1001aa8
 104ee4e:	int3   
 104ee4f:	int3   
 104ee50:	lea    rcx,[rdx+0xd0]
 104ee57:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2c4a]        # 0x1001aa8
 104ee5e:	int3   
 104ee5f:	int3   
 104ee60:	lea    rcx,[rdx+0xe0]
 104ee67:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2c3a]        # 0x1001aa8
 104ee6e:	int3   
 104ee6f:	int3   
 104ee70:	lea    rcx,[rdx+0xc0]
 104ee77:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2c2a]        # 0x1001aa8
 104ee7e:	int3   
 104ee7f:	int3   
 104ee80:	lea    rcx,[rdx+0xf0]
 104ee87:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2c1a]        # 0x1001aa8
 104ee8e:	int3   
 104ee8f:	int3   
 104ee90:	lea    rcx,[rdx+0x108]
 104ee97:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2c0a]        # 0x1001aa8
 104ee9e:	int3   
 104ee9f:	int3   
 104eea0:	lea    rcx,[rdx+0x70]
 104eea7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2bfa]        # 0x1001aa8
 104eeae:	int3   
 104eeaf:	int3   
 104eeb0:	lea    rcx,[rdx+0xc8]
 104eeb7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2bea]        # 0x1001aa8
 104eebe:	int3   
 104eebf:	int3   
 104eec0:	lea    rcx,[rdx+0xb0]
 104eec7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2bda]        # 0x1001aa8
 104eece:	int3   
 104eecf:	int3   
 104eed0:	lea    rcx,[rdx+0xf8]
 104eed7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2bca]        # 0x1001aa8
 104eede:	int3   
 104eedf:	int3   
 104eee0:	lea    rcx,[rdx+0xe8]
 104eee7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2bba]        # 0x1001aa8
 104eeee:	int3   
 104eeef:	int3   
 104eef0:	lea    rcx,[rdx+0xd8]
 104eef7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2baa]        # 0x1001aa8
 104eefe:	int3   
 104eeff:	int3   
 104ef00:	int3   
 104ef01:	int3   
 104ef02:	int3   
 104ef03:	int3   
 104ef04:	int3   
 104ef05:	int3   
 104ef06:	int3   
 104ef07:	int3   
 104ef08:	int3   
 104ef09:	int3   
 104ef0a:	int3   
 104ef0b:	int3   
 104ef0c:	int3   
 104ef0d:	int3   
 104ef0e:	int3   
 104ef0f:	int3   
 104ef10:	lea    rcx,[rdx+0x60]
 104ef17:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2b8a]        # 0x1001aa8
 104ef1e:	int3   
 104ef1f:	int3   
 104ef20:	lea    rcx,[rdx+0x78]
 104ef27:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2b7a]        # 0x1001aa8
 104ef2e:	int3   
 104ef2f:	int3   
 104ef30:	int3   
 104ef31:	int3   
 104ef32:	int3   
 104ef33:	int3   
 104ef34:	int3   
 104ef35:	int3   
 104ef36:	int3   
 104ef37:	int3   
 104ef38:	int3   
 104ef39:	int3   
 104ef3a:	int3   
 104ef3b:	int3   
 104ef3c:	int3   
 104ef3d:	int3   
 104ef3e:	int3   
 104ef3f:	int3   
 104ef40:	rex push rbp
 104ef42:	sub    rsp,0x20
 104ef46:	mov    rbp,rdx
 104ef49:	mov    eax,DWORD PTR [rbp+0x30]
 104ef4c:	and    eax,0x1
 104ef4f:	test   eax,eax
 104ef51:	je     0x104ef64
 104ef53:	and    DWORD PTR [rbp+0x30],0xfffffffe
 104ef57:	mov    rcx,QWORD PTR [rbp+0x98]
 104ef5e:	call   QWORD PTR [rip+0xfffffffffffb2b44]        # 0x1001aa8
 104ef64:	add    rsp,0x20
 104ef68:	pop    rbp
 104ef69:	ret    
 104ef6a:	int3   
 104ef6b:	int3   
 104ef6c:	int3   
 104ef6d:	int3   
 104ef6e:	int3   
 104ef6f:	int3   
 104ef70:	lea    rcx,[rdx+0x40]
 104ef77:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2b2a]        # 0x1001aa8
 104ef7e:	int3   
 104ef7f:	int3   
 104ef80:	lea    rcx,[rdx+0x90]
 104ef87:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2b1a]        # 0x1001aa8
 104ef8e:	int3   
 104ef8f:	int3   
 104ef90:	lea    rcx,[rdx+0x38]
 104ef97:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2b0a]        # 0x1001aa8
 104ef9e:	int3   
 104ef9f:	int3   
 104efa0:	lea    rcx,[rdx+0x38]
 104efa7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2afa]        # 0x1001aa8
 104efae:	int3   
 104efaf:	int3   
 104efb0:	lea    rcx,[rdx+0x38]
 104efb7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2aea]        # 0x1001aa8
 104efbe:	int3   
 104efbf:	int3   
 104efc0:	lea    rcx,[rdx+0x38]
 104efc7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2ada]        # 0x1001aa8
 104efce:	int3   
 104efcf:	int3   
 104efd0:	lea    rcx,[rdx+0x38]
 104efd7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2aca]        # 0x1001aa8
 104efde:	int3   
 104efdf:	int3   
 104efe0:	lea    rcx,[rdx+0x38]
 104efe7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2aba]        # 0x1001aa8
 104efee:	int3   
 104efef:	int3   
 104eff0:	lea    rcx,[rdx+0x38]
 104eff7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2aaa]        # 0x1001aa8
 104effe:	int3   
 104efff:	int3   
 104f000:	int3   
 104f001:	int3   
 104f002:	int3   
 104f003:	int3   
 104f004:	int3   
 104f005:	int3   
 104f006:	int3   
 104f007:	int3   
 104f008:	int3   
 104f009:	int3   
 104f00a:	int3   
 104f00b:	int3   
 104f00c:	int3   
 104f00d:	int3   
 104f00e:	int3   
 104f00f:	int3   
 104f010:	rex push rbp
 104f012:	sub    rsp,0x20
 104f016:	mov    rbp,rdx
 104f019:	mov    eax,DWORD PTR [rbp+0x30]
 104f01c:	and    eax,0x1
 104f01f:	test   eax,eax
 104f021:	je     0x104f031
 104f023:	and    DWORD PTR [rbp+0x30],0xfffffffe
 104f027:	mov    rcx,QWORD PTR [rbp+0x68]
 104f02b:	call   QWORD PTR [rip+0xfffffffffffb2a77]        # 0x1001aa8
 104f031:	add    rsp,0x20
 104f035:	pop    rbp
 104f036:	ret    
 104f037:	int3   
 104f038:	int3   
 104f039:	int3   
 104f03a:	int3   
 104f03b:	int3   
 104f03c:	int3   
 104f03d:	int3   
 104f03e:	int3   
 104f03f:	int3   
 104f040:	lea    rcx,[rdx+0x38]
 104f047:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2a5a]        # 0x1001aa8
 104f04e:	int3   
 104f04f:	int3   
 104f050:	lea    rcx,[rdx+0x38]
 104f057:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2a4a]        # 0x1001aa8
 104f05e:	int3   
 104f05f:	int3   
 104f060:	int3   
 104f061:	int3   
 104f062:	int3   
 104f063:	int3   
 104f064:	int3   
 104f065:	int3   
 104f066:	int3   
 104f067:	int3   
 104f068:	int3   
 104f069:	int3   
 104f06a:	int3   
 104f06b:	int3   
 104f06c:	int3   
 104f06d:	int3   
 104f06e:	int3   
 104f06f:	int3   
 104f070:	lea    rcx,[rdx+0x58]
 104f077:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2a2a]        # 0x1001aa8
 104f07e:	int3   
 104f07f:	int3   
 104f080:	lea    rcx,[rdx+0x50]
 104f087:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2a1a]        # 0x1001aa8
 104f08e:	int3   
 104f08f:	int3   
 104f090:	lea    rcx,[rdx+0x60]
 104f097:	jmp    0x102daf0
 104f09c:	int3   
 104f09d:	int3   
 104f09e:	int3   
 104f09f:	int3   
 104f0a0:	lea    rcx,[rdx+0x58]
 104f0a7:	jmp    0x102daf0
 104f0ac:	int3   
 104f0ad:	int3   
 104f0ae:	int3   
 104f0af:	int3   
 104f0b0:	lea    rcx,[rdx+0x48]
 104f0b7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb29ea]        # 0x1001aa8
 104f0be:	int3   
 104f0bf:	int3   
 104f0c0:	lea    rcx,[rdx+0x68]
 104f0c7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb29da]        # 0x1001aa8
 104f0ce:	int3   
 104f0cf:	int3   
 104f0d0:	lea    rcx,[rdx+0x70]
 104f0d7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb29ca]        # 0x1001aa8
 104f0de:	int3   
 104f0df:	int3   
 104f0e0:	int3   
 104f0e1:	int3   
 104f0e2:	int3   
 104f0e3:	int3   
 104f0e4:	int3   
 104f0e5:	int3   
 104f0e6:	int3   
 104f0e7:	int3   
 104f0e8:	int3   
 104f0e9:	int3   
 104f0ea:	int3   
 104f0eb:	int3   
 104f0ec:	int3   
 104f0ed:	int3   
 104f0ee:	int3   
 104f0ef:	int3   
 104f0f0:	rex push rbp
 104f0f2:	sub    rsp,0x20
 104f0f6:	mov    rbp,rdx
 104f0f9:	mov    eax,DWORD PTR [rbp+0x20]
 104f0fc:	and    eax,0x1
 104f0ff:	test   eax,eax
 104f101:	je     0x104f111
 104f103:	and    DWORD PTR [rbp+0x20],0xfffffffe
 104f107:	mov    rcx,QWORD PTR [rbp+0x58]
 104f10b:	call   QWORD PTR [rip+0xfffffffffffb2997]        # 0x1001aa8
 104f111:	add    rsp,0x20
 104f115:	pop    rbp
 104f116:	ret    
 104f117:	int3   
 104f118:	int3   
 104f119:	int3   
 104f11a:	int3   
 104f11b:	int3   
 104f11c:	int3   
 104f11d:	int3   
 104f11e:	int3   
 104f11f:	int3   
 104f120:	lea    rcx,[rdx+0x68]
 104f127:	rex.W jmp QWORD PTR [rip+0xfffffffffffb297a]        # 0x1001aa8
 104f12e:	int3   
 104f12f:	int3   
 104f130:	lea    rcx,[rdx+0x50]
 104f137:	rex.W jmp QWORD PTR [rip+0xfffffffffffb296a]        # 0x1001aa8
 104f13e:	int3   
 104f13f:	int3   
 104f140:	int3   
 104f141:	int3   
 104f142:	int3   
 104f143:	int3   
 104f144:	int3   
 104f145:	int3   
 104f146:	int3   
 104f147:	int3   
 104f148:	int3   
 104f149:	int3   
 104f14a:	int3   
 104f14b:	int3   
 104f14c:	int3   
 104f14d:	int3   
 104f14e:	int3   
 104f14f:	int3   
 104f150:	lea    rcx,[rdx+0x80]
 104f157:	rex.W jmp QWORD PTR [rip+0xfffffffffffb294a]        # 0x1001aa8
 104f15e:	int3   
 104f15f:	int3   
 104f160:	lea    rcx,[rdx+0x70]
 104f167:	rex.W jmp QWORD PTR [rip+0xfffffffffffb293a]        # 0x1001aa8
 104f16e:	int3   
 104f16f:	int3   
 104f170:	lea    rcx,[rdx+0x60]
 104f177:	rex.W jmp QWORD PTR [rip+0xfffffffffffb292a]        # 0x1001aa8
 104f17e:	int3   
 104f17f:	int3   
 104f180:	lea    rcx,[rdx+0x58]
 104f187:	rex.W jmp QWORD PTR [rip+0xfffffffffffb291a]        # 0x1001aa8
 104f18e:	int3   
 104f18f:	int3   
 104f190:	lea    rcx,[rdx+0x50]
 104f197:	rex.W jmp QWORD PTR [rip+0xfffffffffffb290a]        # 0x1001aa8
 104f19e:	int3   
 104f19f:	int3   
 104f1a0:	lea    rcx,[rdx+0x68]
 104f1a7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb28fa]        # 0x1001aa8
 104f1ae:	int3   
 104f1af:	int3   
 104f1b0:	lea    rcx,[rdx+0xa8]
 104f1b7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb28ea]        # 0x1001aa8
 104f1be:	int3   
 104f1bf:	int3   
 104f1c0:	lea    rcx,[rdx+0xb0]
 104f1c7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb28da]        # 0x1001aa8
 104f1ce:	int3   
 104f1cf:	int3   
 104f1d0:	lea    rcx,[rdx+0xc0]
 104f1d7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb28ca]        # 0x1001aa8
 104f1de:	int3   
 104f1df:	int3   
 104f1e0:	lea    rcx,[rdx+0x78]
 104f1e7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb28ba]        # 0x1001aa8
 104f1ee:	int3   
 104f1ef:	int3   
 104f1f0:	lea    rcx,[rdx+0x90]
 104f1f7:	jmp    0x102daf0
 104f1fc:	int3   
 104f1fd:	int3   
 104f1fe:	int3   
 104f1ff:	int3   
 104f200:	lea    rcx,[rdx+0xa8]
 104f207:	rex.W jmp QWORD PTR [rip+0xfffffffffffb289a]        # 0x1001aa8
 104f20e:	int3   
 104f20f:	int3   
 104f210:	lea    rcx,[rdx+0x98]
 104f217:	rex.W jmp QWORD PTR [rip+0xfffffffffffb288a]        # 0x1001aa8
 104f21e:	int3   
 104f21f:	int3   
 104f220:	lea    rcx,[rdx+0x88]
 104f227:	rex.W jmp QWORD PTR [rip+0xfffffffffffb287a]        # 0x1001aa8
 104f22e:	int3   
 104f22f:	int3   
 104f230:	int3   
 104f231:	int3   
 104f232:	int3   
 104f233:	int3   
 104f234:	int3   
 104f235:	int3   
 104f236:	int3   
 104f237:	int3   
 104f238:	int3   
 104f239:	int3   
 104f23a:	int3   
 104f23b:	int3   
 104f23c:	int3   
 104f23d:	int3   
 104f23e:	int3   
 104f23f:	int3   
 104f240:	lea    rcx,[rdx+0xe0]
 104f247:	rex.W jmp QWORD PTR [rip+0xfffffffffffb285a]        # 0x1001aa8
 104f24e:	int3   
 104f24f:	int3   
 104f250:	lea    rcx,[rdx+0xf0]
 104f257:	rex.W jmp QWORD PTR [rip+0xfffffffffffb284a]        # 0x1001aa8
 104f25e:	int3   
 104f25f:	int3   
 104f260:	lea    rcx,[rdx+0x60]
 104f267:	rex.W jmp QWORD PTR [rip+0xfffffffffffb283a]        # 0x1001aa8
 104f26e:	int3   
 104f26f:	int3   
 104f270:	lea    rcx,[rdx+0x58]
 104f277:	rex.W jmp QWORD PTR [rip+0xfffffffffffb282a]        # 0x1001aa8
 104f27e:	int3   
 104f27f:	int3   
 104f280:	lea    rcx,[rdx+0x50]
 104f287:	rex.W jmp QWORD PTR [rip+0xfffffffffffb281a]        # 0x1001aa8
 104f28e:	int3   
 104f28f:	int3   
 104f290:	lea    rcx,[rdx+0xf8]
 104f297:	rex.W jmp QWORD PTR [rip+0xfffffffffffb280a]        # 0x1001aa8
 104f29e:	int3   
 104f29f:	int3   
 104f2a0:	lea    rcx,[rdx+0xe8]
 104f2a7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb27fa]        # 0x1001aa8
 104f2ae:	int3   
 104f2af:	int3   
 104f2b0:	lea    rcx,[rdx+0x60]
 104f2b7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb27ea]        # 0x1001aa8
 104f2be:	int3   
 104f2bf:	int3   
 104f2c0:	lea    rcx,[rdx+0xf8]
 104f2c7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb27da]        # 0x1001aa8
 104f2ce:	int3   
 104f2cf:	int3   
 104f2d0:	lea    rcx,[rdx+0xf0]
 104f2d7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb27ca]        # 0x1001aa8
 104f2de:	int3   
 104f2df:	int3   
 104f2e0:	int3   
 104f2e1:	int3   
 104f2e2:	int3   
 104f2e3:	int3   
 104f2e4:	int3   
 104f2e5:	int3   
 104f2e6:	int3   
 104f2e7:	int3   
 104f2e8:	int3   
 104f2e9:	int3   
 104f2ea:	int3   
 104f2eb:	int3   
 104f2ec:	int3   
 104f2ed:	int3   
 104f2ee:	int3   
 104f2ef:	int3   
 104f2f0:	rex push rbp
 104f2f2:	sub    rsp,0x30
 104f2f6:	mov    rbp,rdx
 104f2f9:	mov    QWORD PTR [rbp+0x40],rcx
 104f2fd:	mov    QWORD PTR [rbp+0x38],rcx
 104f301:	xor    edx,edx
 104f303:	mov    rcx,QWORD PTR [rbp+0x38]
 104f307:	call   0x102e410
 104f30c:	mov    eax,0x1
 104f311:	add    rsp,0x30
 104f315:	pop    rbp
 104f316:	ret    
 104f317:	int3   
 104f318:	int3   
 104f319:	int3   
 104f31a:	int3   
 104f31b:	int3   
 104f31c:	int3   
 104f31d:	int3   
 104f31e:	int3   
 104f31f:	int3   
 104f320:	rex push rbp
 104f322:	sub    rsp,0x30
 104f326:	mov    rbp,rdx
 104f329:	mov    QWORD PTR [rbp+0x40],rcx
 104f32d:	mov    QWORD PTR [rbp+0x38],rcx
 104f331:	xor    edx,edx
 104f333:	mov    rcx,QWORD PTR [rbp+0x38]
 104f337:	call   0x102e410
 104f33c:	mov    eax,0x1
 104f341:	add    rsp,0x30
 104f345:	pop    rbp
 104f346:	ret    
 104f347:	int3   
 104f348:	int3   
 104f349:	int3   
 104f34a:	int3   
 104f34b:	int3   
 104f34c:	int3   
 104f34d:	int3   
 104f34e:	int3   
 104f34f:	int3   
 104f350:	rex push rbp
 104f352:	sub    rsp,0x40
 104f356:	mov    rbp,rdx
 104f359:	mov    QWORD PTR [rbp+0x48],rcx
 104f35d:	mov    QWORD PTR [rbp+0x40],rcx
 104f361:	xor    edx,edx
 104f363:	mov    rcx,QWORD PTR [rbp+0x40]
 104f367:	call   0x102e410
 104f36c:	mov    eax,0x1
 104f371:	add    rsp,0x40
 104f375:	pop    rbp
 104f376:	ret    
 104f377:	int3   
 104f378:	int3   
 104f379:	int3   
 104f37a:	int3   
 104f37b:	int3   
 104f37c:	int3   
 104f37d:	int3   
 104f37e:	int3   
 104f37f:	int3   
 104f380:	rex push rbp
 104f382:	sub    rsp,0x30
 104f386:	mov    rbp,rdx
 104f389:	mov    QWORD PTR [rbp+0x40],rcx
 104f38d:	mov    QWORD PTR [rbp+0x38],rcx
 104f391:	xor    edx,edx
 104f393:	mov    rcx,QWORD PTR [rbp+0x38]
 104f397:	call   0x102e410
 104f39c:	mov    eax,0x1
 104f3a1:	add    rsp,0x30
 104f3a5:	pop    rbp
 104f3a6:	ret    
 104f3a7:	int3   
 104f3a8:	int3   
 104f3a9:	int3   
 104f3aa:	int3   
 104f3ab:	int3   
 104f3ac:	int3   
 104f3ad:	int3   
 104f3ae:	int3   
 104f3af:	int3   
 104f3b0:	rex push rbp
 104f3b2:	sub    rsp,0x30
 104f3b6:	mov    rbp,rdx
 104f3b9:	mov    QWORD PTR [rbp+0x50],rcx
 104f3bd:	mov    QWORD PTR [rbp+0x48],rcx
 104f3c1:	xor    edx,edx
 104f3c3:	mov    rcx,QWORD PTR [rbp+0x48]
 104f3c7:	call   0x102e410
 104f3cc:	mov    eax,0x1
 104f3d1:	add    rsp,0x30
 104f3d5:	pop    rbp
 104f3d6:	ret    
 104f3d7:	int3   
 104f3d8:	int3   
 104f3d9:	int3   
 104f3da:	int3   
 104f3db:	int3   
 104f3dc:	int3   
 104f3dd:	int3   
 104f3de:	int3   
 104f3df:	int3   
 104f3e0:	rex push rbp
 104f3e2:	sub    rsp,0x30
 104f3e6:	mov    rbp,rdx
 104f3e9:	mov    QWORD PTR [rbp+0x58],rcx
 104f3ed:	mov    QWORD PTR [rbp+0x50],rcx
 104f3f1:	xor    edx,edx
 104f3f3:	mov    rcx,QWORD PTR [rbp+0x50]
 104f3f7:	call   0x102e410
 104f3fc:	mov    eax,0x1
 104f401:	add    rsp,0x30
 104f405:	pop    rbp
 104f406:	ret    
 104f407:	int3   
 104f408:	int3   
 104f409:	int3   
 104f40a:	int3   
 104f40b:	int3   
 104f40c:	int3   
 104f40d:	int3   
 104f40e:	int3   
 104f40f:	int3   
 104f410:	rex push rbp
 104f412:	sub    rsp,0x60
 104f416:	mov    rbp,rdx
 104f419:	lea    rcx,[rip+0x14628]        # 0x1063a48
 104f420:	call   QWORD PTR [rip+0xfffffffffffb1e1a]        # 0x1001240
 104f426:	nop
 104f427:	add    rsp,0x60
 104f42b:	pop    rbp
 104f42c:	ret    
 104f42d:	int3   
 104f42e:	int3   
 104f42f:	int3   
 104f430:	int3   
 104f431:	int3   
 104f432:	int3   
 104f433:	int3   
 104f434:	int3   
 104f435:	int3   
 104f436:	int3   
 104f437:	int3   
 104f438:	int3   
 104f439:	int3   
 104f43a:	int3   
 104f43b:	int3   
 104f43c:	int3   
 104f43d:	int3   
 104f43e:	int3   
 104f43f:	int3   
 104f440:	rex push rbp
 104f442:	sub    rsp,0x60
 104f446:	mov    rbp,rdx
 104f449:	mov    rcx,QWORD PTR [rbp+0x68]
 104f44d:	test   rcx,rcx
 104f450:	je     0x104f459
 104f452:	call   QWORD PTR [rip+0xfffffffffffb2080]        # 0x10014d8
 104f458:	nop
 104f459:	mov    rcx,QWORD PTR [rbp+0x88]
 104f460:	test   rcx,rcx
 104f463:	je     0x104f46c
 104f465:	call   QWORD PTR [rip+0xfffffffffffb2245]        # 0x10016b0
 104f46b:	nop
 104f46c:	mov    rcx,QWORD PTR [rbp+0x70]
 104f470:	test   rcx,rcx
 104f473:	je     0x104f47c
 104f475:	call   QWORD PTR [rip+0xfffffffffffb1bed]        # 0x1001068
 104f47b:	nop
 104f47c:	mov    rcx,QWORD PTR [rbp+0x80]
 104f483:	test   rcx,rcx
 104f486:	je     0x104f48f
 104f488:	call   QWORD PTR [rip+0xfffffffffffb2222]        # 0x10016b0
 104f48e:	nop
 104f48f:	add    rsp,0x60
 104f493:	pop    rbp
 104f494:	ret    
 104f495:	int3   
 104f496:	int3   
 104f497:	int3   
 104f498:	int3   
 104f499:	int3   
 104f49a:	int3   
 104f49b:	int3   
 104f49c:	int3   
 104f49d:	int3   
 104f49e:	int3   
 104f49f:	int3   
 104f4a0:	mov    QWORD PTR [rsp+0x10],rdx
 104f4a5:	push   rbx
 104f4a6:	push   rbp
 104f4a7:	sub    rsp,0x38
 104f4ab:	mov    rbp,rdx
 104f4ae:	mov    rbx,QWORD PTR [rbp+0x50]
 104f4b2:	mov    rax,QWORD PTR [rbx]
 104f4b5:	xor    r9d,r9d
 104f4b8:	mov    r8d,0x400
 104f4be:	lea    rdx,[rbp+0x490]
 104f4c5:	mov    rcx,rbx
 104f4c8:	call   QWORD PTR [rax+0x28]
 104f4cb:	lea    rdx,[rbp+0x490]
 104f4d2:	lea    rcx,[rip+0xfffffffffffb7487]        # 0x1006960
 104f4d9:	call   QWORD PTR [rip+0xfffffffffffb2291]        # 0x1001770
 104f4df:	mov    rcx,rbx
 104f4e2:	call   0x103f9f6
 104f4e7:	nop
 104f4e8:	lea    rax,[rip+0xfffffffffffe0732]        # 0x102fc21
 104f4ef:	add    rsp,0x38
 104f4f3:	pop    rbp
 104f4f4:	pop    rbx
 104f4f5:	ret    
 104f4f6:	int3   
 104f4f7:	int3   
 104f4f8:	int3   
 104f4f9:	int3   
 104f4fa:	int3   
 104f4fb:	int3   
 104f4fc:	int3   
 104f4fd:	int3   
 104f4fe:	int3   
 104f4ff:	int3   
 104f500:	mov    QWORD PTR [rsp+0x10],rdx
 104f505:	push   rbp
 104f506:	sub    rsp,0x30
 104f50a:	mov    rbp,rdx
 104f50d:	lea    rcx,[rbp+0x48]
 104f511:	call   QWORD PTR [rip+0xfffffffffffb25d1]        # 0x1001ae8
 104f517:	mov    rdx,rax
 104f51a:	lea    rcx,[rip+0xfffffffffffb743f]        # 0x1006960
 104f521:	call   QWORD PTR [rip+0xfffffffffffb2249]        # 0x1001770
 104f527:	nop
 104f528:	lea    rcx,[rbp+0x48]
 104f52c:	call   QWORD PTR [rip+0xfffffffffffb2576]        # 0x1001aa8
 104f532:	nop
 104f533:	lea    rax,[rip+0xfffffffffffe06e7]        # 0x102fc21
 104f53a:	add    rsp,0x30
 104f53e:	pop    rbp
 104f53f:	ret    
 104f540:	int3   
 104f541:	int3   
 104f542:	int3   
 104f543:	int3   
 104f544:	int3   
 104f545:	int3   
 104f546:	int3   
 104f547:	int3   
 104f548:	int3   
 104f549:	int3   
 104f54a:	int3   
 104f54b:	int3   
 104f54c:	int3   
 104f54d:	int3   
 104f54e:	int3   
 104f54f:	int3   
 104f550:	lea    rcx,[rdx+0x48]
 104f557:	rex.W jmp QWORD PTR [rip+0xfffffffffffb254a]        # 0x1001aa8
 104f55e:	int3   
 104f55f:	int3   
 104f560:	int3   
 104f561:	int3   
 104f562:	int3   
 104f563:	int3   
 104f564:	int3   
 104f565:	int3   
 104f566:	int3   
 104f567:	int3   
 104f568:	int3   
 104f569:	int3   
 104f56a:	int3   
 104f56b:	int3   
 104f56c:	int3   
 104f56d:	int3   
 104f56e:	int3   
 104f56f:	int3   
 104f570:	mov    rcx,QWORD PTR [rdx+0x40]
 104f577:	add    rcx,0x20
 104f57b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2526]        # 0x1001aa8
 104f582:	int3   
 104f583:	int3   
 104f584:	int3   
 104f585:	int3   
 104f586:	int3   
 104f587:	int3   
 104f588:	int3   
 104f589:	int3   
 104f58a:	int3   
 104f58b:	int3   
 104f58c:	int3   
 104f58d:	int3   
 104f58e:	int3   
 104f58f:	int3   
 104f590:	mov    rcx,QWORD PTR [rdx+0x40]
 104f597:	add    rcx,0x28
 104f59b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2506]        # 0x1001aa8
 104f5a2:	int3   
 104f5a3:	int3   
 104f5a4:	int3   
 104f5a5:	int3   
 104f5a6:	int3   
 104f5a7:	int3   
 104f5a8:	int3   
 104f5a9:	int3   
 104f5aa:	int3   
 104f5ab:	int3   
 104f5ac:	int3   
 104f5ad:	int3   
 104f5ae:	int3   
 104f5af:	int3   
 104f5b0:	mov    QWORD PTR [rsp+0x10],rdx
 104f5b5:	push   rbp
 104f5b6:	sub    rsp,0x20
 104f5ba:	mov    rbp,rdx
 104f5bd:	lea    rax,[rip+0xfffffffffffe0af4]        # 0x10300b8
 104f5c4:	add    rsp,0x20
 104f5c8:	pop    rbp
 104f5c9:	ret    
 104f5ca:	int3   
 104f5cb:	int3   
 104f5cc:	int3   
 104f5cd:	int3   
 104f5ce:	int3   
 104f5cf:	int3   
 104f5d0:	int3   
 104f5d1:	int3   
 104f5d2:	int3   
 104f5d3:	int3   
 104f5d4:	int3   
 104f5d5:	int3   
 104f5d6:	int3   
 104f5d7:	int3   
 104f5d8:	int3   
 104f5d9:	int3   
 104f5da:	int3   
 104f5db:	int3   
 104f5dc:	int3   
 104f5dd:	int3   
 104f5de:	int3   
 104f5df:	int3   
 104f5e0:	lea    rcx,[rdx+0x50]
 104f5e7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb24ba]        # 0x1001aa8
 104f5ee:	int3   
 104f5ef:	int3   
 104f5f0:	lea    rcx,[rdx+0x58]
 104f5f7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb24aa]        # 0x1001aa8
 104f5fe:	int3   
 104f5ff:	int3   
 104f600:	lea    rcx,[rdx+0x48]
 104f607:	jmp    0x102daf0
 104f60c:	int3   
 104f60d:	int3   
 104f60e:	int3   
 104f60f:	int3   
 104f610:	mov    QWORD PTR [rsp+0x10],rdx
 104f615:	push   rbx
 104f616:	push   rbp
 104f617:	sub    rsp,0x48
 104f61b:	mov    rbp,rdx
 104f61e:	mov    rbx,QWORD PTR [rbp+0x90]
 104f625:	mov    rax,QWORD PTR [rbx]
 104f628:	xor    r9d,r9d
 104f62b:	mov    r8d,0x400
 104f631:	lea    rdx,[rbp+0xa0]
 104f638:	mov    rcx,rbx
 104f63b:	call   QWORD PTR [rax+0x28]
 104f63e:	mov    rcx,QWORD PTR [rbp+0x60]
 104f642:	mov    rax,QWORD PTR [rcx]
 104f645:	mov    BYTE PTR [rsp+0x30],0x1
 104f64a:	mov    BYTE PTR [rsp+0x28],0x1
 104f64f:	mov    DWORD PTR [rsp+0x20],0x2
 104f657:	xor    r9d,r9d
 104f65a:	lea    r8,[rbp+0xa0]
 104f661:	mov    edx,0xc000c483
 104f666:	call   QWORD PTR [rax+0x8]
 104f669:	mov    rcx,rbx
 104f66c:	call   0x103f9f6
 104f671:	nop
 104f672:	lea    rax,[rip+0xfffffffffffe16ae]        # 0x1030d27
 104f679:	add    rsp,0x48
 104f67d:	pop    rbp
 104f67e:	pop    rbx
 104f67f:	ret    
 104f680:	int3   
 104f681:	int3   
 104f682:	int3   
 104f683:	int3   
 104f684:	int3   
 104f685:	int3   
 104f686:	int3   
 104f687:	int3   
 104f688:	int3   
 104f689:	int3   
 104f68a:	int3   
 104f68b:	int3   
 104f68c:	int3   
 104f68d:	int3   
 104f68e:	int3   
 104f68f:	int3   
 104f690:	mov    QWORD PTR [rsp+0x10],rdx
 104f695:	push   rbp
 104f696:	sub    rsp,0x40
 104f69a:	mov    rbp,rdx
 104f69d:	lea    rax,[rip+0xfffffffffffe1683]        # 0x1030d27
 104f6a4:	add    rsp,0x40
 104f6a8:	pop    rbp
 104f6a9:	ret    
 104f6aa:	int3   
 104f6ab:	int3   
 104f6ac:	int3   
 104f6ad:	int3   
 104f6ae:	int3   
 104f6af:	int3   
 104f6b0:	int3   
 104f6b1:	int3   
 104f6b2:	int3   
 104f6b3:	int3   
 104f6b4:	int3   
 104f6b5:	int3   
 104f6b6:	int3   
 104f6b7:	int3   
 104f6b8:	int3   
 104f6b9:	int3   
 104f6ba:	int3   
 104f6bb:	int3   
 104f6bc:	int3   
 104f6bd:	int3   
 104f6be:	int3   
 104f6bf:	int3   
 104f6c0:	mov    QWORD PTR [rsp+0x10],rdx
 104f6c5:	push   rbp
 104f6c6:	sub    rsp,0x20
 104f6ca:	mov    rbp,rdx
 104f6cd:	lea    rax,[rip+0xfffffffffffe4f53]        # 0x1034627
 104f6d4:	add    rsp,0x20
 104f6d8:	pop    rbp
 104f6d9:	ret    
 104f6da:	int3   
 104f6db:	int3   
 104f6dc:	int3   
 104f6dd:	int3   
 104f6de:	int3   
 104f6df:	int3   
 104f6e0:	int3   
 104f6e1:	int3   
 104f6e2:	int3   
 104f6e3:	int3   
 104f6e4:	int3   
 104f6e5:	int3   
 104f6e6:	int3   
 104f6e7:	int3   
 104f6e8:	int3   
 104f6e9:	int3   
 104f6ea:	int3   
 104f6eb:	int3   
 104f6ec:	int3   
 104f6ed:	int3   
 104f6ee:	int3   
 104f6ef:	int3   
 104f6f0:	mov    rcx,QWORD PTR [rdx+0x40]
 104f6f7:	add    rcx,0x20
 104f6fb:	rex.W jmp QWORD PTR [rip+0xfffffffffffb23a6]        # 0x1001aa8
 104f702:	int3   
 104f703:	int3   
 104f704:	int3   
 104f705:	int3   
 104f706:	int3   
 104f707:	int3   
 104f708:	int3   
 104f709:	int3   
 104f70a:	int3   
 104f70b:	int3   
 104f70c:	int3   
 104f70d:	int3   
 104f70e:	int3   
 104f70f:	int3   
 104f710:	mov    rcx,QWORD PTR [rdx+0x40]
 104f717:	add    rcx,0x28
 104f71b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb2386]        # 0x1001aa8
 104f722:	int3   
 104f723:	int3   
 104f724:	int3   
 104f725:	int3   
 104f726:	int3   
 104f727:	int3   
 104f728:	int3   
 104f729:	int3   
 104f72a:	int3   
 104f72b:	int3   
 104f72c:	int3   
 104f72d:	int3   
 104f72e:	int3   
 104f72f:	int3   
 104f730:	rex push rbp
 104f732:	sub    rsp,0x20
 104f736:	mov    rbp,rdx
 104f739:	mov    eax,DWORD PTR [rbp+0x20]
 104f73c:	and    eax,0x1
 104f73f:	test   eax,eax
 104f741:	je     0x104f751
 104f743:	and    DWORD PTR [rbp+0x20],0xfffffffe
 104f747:	mov    rcx,QWORD PTR [rbp+0x40]
 104f74b:	call   QWORD PTR [rip+0xfffffffffffb2357]        # 0x1001aa8
 104f751:	add    rsp,0x20
 104f755:	pop    rbp
 104f756:	ret    
 104f757:	int3   
 104f758:	int3   
 104f759:	int3   
 104f75a:	int3   
 104f75b:	int3   
 104f75c:	int3   
 104f75d:	int3   
 104f75e:	int3   
 104f75f:	int3   
 104f760:	lea    rcx,[rdx+0x50]
 104f767:	rex.W jmp QWORD PTR [rip+0xfffffffffffb233a]        # 0x1001aa8
 104f76e:	int3   
 104f76f:	int3   
 104f770:	int3   
 104f771:	int3   
 104f772:	int3   
 104f773:	int3   
 104f774:	int3   
 104f775:	int3   
 104f776:	int3   
 104f777:	int3   
 104f778:	int3   
 104f779:	int3   
 104f77a:	int3   
 104f77b:	int3   
 104f77c:	int3   
 104f77d:	int3   
 104f77e:	int3   
 104f77f:	int3   
 104f780:	lea    rcx,[rdx+0x28]
 104f787:	jmp    0x1036200
 104f78c:	int3   
 104f78d:	int3   
 104f78e:	int3   
 104f78f:	int3   
 104f790:	int3   
 104f791:	int3   
 104f792:	int3   
 104f793:	int3   
 104f794:	int3   
 104f795:	int3   
 104f796:	int3   
 104f797:	int3   
 104f798:	int3   
 104f799:	int3   
 104f79a:	int3   
 104f79b:	int3   
 104f79c:	int3   
 104f79d:	int3   
 104f79e:	int3   
 104f79f:	int3   
 104f7a0:	lea    rcx,[rdx+0x20]
 104f7a7:	jmp    0x1036200
 104f7ac:	int3   
 104f7ad:	int3   
 104f7ae:	int3   
 104f7af:	int3   
 104f7b0:	lea    rcx,[rdx+0x28]
 104f7b7:	jmp    0x102daf0
 104f7bc:	int3   
 104f7bd:	int3   
 104f7be:	int3   
 104f7bf:	int3   
 104f7c0:	int3   
 104f7c1:	int3   
 104f7c2:	int3   
 104f7c3:	int3   
 104f7c4:	int3   
 104f7c5:	int3   
 104f7c6:	int3   
 104f7c7:	int3   
 104f7c8:	int3   
 104f7c9:	int3   
 104f7ca:	int3   
 104f7cb:	int3   
 104f7cc:	int3   
 104f7cd:	int3   
 104f7ce:	int3   
 104f7cf:	int3   
 104f7d0:	lea    rcx,[rdx+0x90]
 104f7d7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb22ca]        # 0x1001aa8
 104f7de:	int3   
 104f7df:	int3   
 104f7e0:	int3   
 104f7e1:	int3   
 104f7e2:	int3   
 104f7e3:	int3   
 104f7e4:	int3   
 104f7e5:	int3   
 104f7e6:	int3   
 104f7e7:	int3   
 104f7e8:	int3   
 104f7e9:	int3   
 104f7ea:	int3   
 104f7eb:	int3   
 104f7ec:	int3   
 104f7ed:	int3   
 104f7ee:	int3   
 104f7ef:	int3   
 104f7f0:	lea    rcx,[rdx+0x20]
 104f7f7:	jmp    0x1036200
 104f7fc:	int3   
 104f7fd:	int3   
 104f7fe:	int3   
 104f7ff:	int3   
 104f800:	int3   
 104f801:	int3   
 104f802:	int3   
 104f803:	int3   
 104f804:	int3   
 104f805:	int3   
 104f806:	int3   
 104f807:	int3   
 104f808:	int3   
 104f809:	int3   
 104f80a:	int3   
 104f80b:	int3   
 104f80c:	int3   
 104f80d:	int3   
 104f80e:	int3   
 104f80f:	int3   
 104f810:	lea    rcx,[rdx+0x30]
 104f817:	jmp    0x102dac0
 104f81c:	int3   
 104f81d:	int3   
 104f81e:	int3   
 104f81f:	int3   
 104f820:	lea    rcx,[rdx+0x88]
 104f827:	jmp    0x102dac0
 104f82c:	int3   
 104f82d:	int3   
 104f82e:	int3   
 104f82f:	int3   
 104f830:	lea    rcx,[rdx+0x80]
 104f837:	jmp    0x102dac0
 104f83c:	int3   
 104f83d:	int3   
 104f83e:	int3   
 104f83f:	int3   
 104f840:	lea    rcx,[rdx+0x78]
 104f847:	jmp    0x102dac0
 104f84c:	int3   
 104f84d:	int3   
 104f84e:	int3   
 104f84f:	int3   
 104f850:	int3   
 104f851:	int3   
 104f852:	int3   
 104f853:	int3   
 104f854:	int3   
 104f855:	int3   
 104f856:	int3   
 104f857:	int3   
 104f858:	int3   
 104f859:	int3   
 104f85a:	int3   
 104f85b:	int3   
 104f85c:	int3   
 104f85d:	int3   
 104f85e:	int3   
 104f85f:	int3   
 104f860:	lea    rcx,[rdx+0x58]
 104f867:	rex.W jmp QWORD PTR [rip+0xfffffffffffb223a]        # 0x1001aa8
 104f86e:	int3   
 104f86f:	int3   
 104f870:	int3   
 104f871:	int3   
 104f872:	int3   
 104f873:	int3   
 104f874:	int3   
 104f875:	int3   
 104f876:	int3   
 104f877:	int3   
 104f878:	int3   
 104f879:	int3   
 104f87a:	int3   
 104f87b:	int3   
 104f87c:	int3   
 104f87d:	int3   
 104f87e:	int3   
 104f87f:	int3   
 104f880:	lea    rcx,[rdx+0x40]
 104f887:	rex.W jmp QWORD PTR [rip+0xfffffffffffb221a]        # 0x1001aa8
 104f88e:	int3   
 104f88f:	int3   
 104f890:	lea    rcx,[rdx+0x50]
 104f897:	rex.W jmp QWORD PTR [rip+0xfffffffffffb220a]        # 0x1001aa8
 104f89e:	int3   
 104f89f:	int3   
 104f8a0:	lea    rcx,[rdx+0x78]
 104f8a7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb21fa]        # 0x1001aa8
 104f8ae:	int3   
 104f8af:	int3   
 104f8b0:	lea    rcx,[rdx+0x70]
 104f8b7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb21ea]        # 0x1001aa8
 104f8be:	int3   
 104f8bf:	int3   
 104f8c0:	int3   
 104f8c1:	int3   
 104f8c2:	int3   
 104f8c3:	int3   
 104f8c4:	int3   
 104f8c5:	int3   
 104f8c6:	int3   
 104f8c7:	int3   
 104f8c8:	int3   
 104f8c9:	int3   
 104f8ca:	int3   
 104f8cb:	int3   
 104f8cc:	int3   
 104f8cd:	int3   
 104f8ce:	int3   
 104f8cf:	int3   
 104f8d0:	lea    rcx,[rdx+0x28]
 104f8d7:	jmp    0x1036200
 104f8dc:	int3   
 104f8dd:	int3   
 104f8de:	int3   
 104f8df:	int3   
 104f8e0:	int3   
 104f8e1:	int3   
 104f8e2:	int3   
 104f8e3:	int3   
 104f8e4:	int3   
 104f8e5:	int3   
 104f8e6:	int3   
 104f8e7:	int3   
 104f8e8:	int3   
 104f8e9:	int3   
 104f8ea:	int3   
 104f8eb:	int3   
 104f8ec:	int3   
 104f8ed:	int3   
 104f8ee:	int3   
 104f8ef:	int3   
 104f8f0:	lea    rcx,[rdx+0x20]
 104f8f7:	jmp    0x1036200
 104f8fc:	int3   
 104f8fd:	int3   
 104f8fe:	int3   
 104f8ff:	int3   
 104f900:	lea    rcx,[rdx+0x28]
 104f907:	jmp    0x102daf0
 104f90c:	int3   
 104f90d:	int3   
 104f90e:	int3   
 104f90f:	int3   
 104f910:	int3   
 104f911:	int3   
 104f912:	int3   
 104f913:	int3   
 104f914:	int3   
 104f915:	int3   
 104f916:	int3   
 104f917:	int3   
 104f918:	int3   
 104f919:	int3   
 104f91a:	int3   
 104f91b:	int3   
 104f91c:	int3   
 104f91d:	int3   
 104f91e:	int3   
 104f91f:	int3   
 104f920:	rex push rbp
 104f922:	sub    rsp,0x20
 104f926:	mov    rbp,rdx
 104f929:	mov    eax,DWORD PTR [rbp+0x20]
 104f92c:	and    eax,0x1
 104f92f:	test   eax,eax
 104f931:	je     0x104f941
 104f933:	and    DWORD PTR [rbp+0x20],0xfffffffe
 104f937:	mov    rcx,QWORD PTR [rbp+0x30]
 104f93b:	call   QWORD PTR [rip+0xfffffffffffb2167]        # 0x1001aa8
 104f941:	add    rsp,0x20
 104f945:	pop    rbp
 104f946:	ret    
 104f947:	int3   
 104f948:	int3   
 104f949:	int3   
 104f94a:	int3   
 104f94b:	int3   
 104f94c:	int3   
 104f94d:	int3   
 104f94e:	int3   
 104f94f:	int3   
 104f950:	rex push rbp
 104f952:	sub    rsp,0x20
 104f956:	mov    rbp,rdx
 104f959:	mov    eax,DWORD PTR [rbp+0x20]
 104f95c:	and    eax,0x1
 104f95f:	test   eax,eax
 104f961:	je     0x104f971
 104f963:	and    DWORD PTR [rbp+0x20],0xfffffffe
 104f967:	mov    rcx,QWORD PTR [rbp+0x50]
 104f96b:	call   QWORD PTR [rip+0xfffffffffffb2137]        # 0x1001aa8
 104f971:	add    rsp,0x20
 104f975:	pop    rbp
 104f976:	ret    
 104f977:	int3   
 104f978:	int3   
 104f979:	int3   
 104f97a:	int3   
 104f97b:	int3   
 104f97c:	int3   
 104f97d:	int3   
 104f97e:	int3   
 104f97f:	int3   
 104f980:	lea    rcx,[rdx+0x60]
 104f987:	rex.W jmp QWORD PTR [rip+0xfffffffffffb211a]        # 0x1001aa8
 104f98e:	int3   
 104f98f:	int3   
 104f990:	lea    rcx,[rdx+0x68]
 104f997:	rex.W jmp QWORD PTR [rip+0xfffffffffffb210a]        # 0x1001aa8
 104f99e:	int3   
 104f99f:	int3   
 104f9a0:	lea    rcx,[rdx+0x60]
 104f9a7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb20fa]        # 0x1001aa8
 104f9ae:	int3   
 104f9af:	int3   
 104f9b0:	lea    rcx,[rdx+0x60]
 104f9b7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb20ea]        # 0x1001aa8
 104f9be:	int3   
 104f9bf:	int3   
 104f9c0:	lea    rcx,[rdx+0x68]
 104f9c7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb20da]        # 0x1001aa8
 104f9ce:	int3   
 104f9cf:	int3   
 104f9d0:	lea    rcx,[rdx+0x60]
 104f9d7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb20ca]        # 0x1001aa8
 104f9de:	int3   
 104f9df:	int3   
 104f9e0:	lea    rcx,[rdx+0x60]
 104f9e7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb20ba]        # 0x1001aa8
 104f9ee:	int3   
 104f9ef:	int3   
 104f9f0:	lea    rcx,[rdx+0x68]
 104f9f7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb20aa]        # 0x1001aa8
 104f9fe:	int3   
 104f9ff:	int3   
 104fa00:	lea    rcx,[rdx+0x60]
 104fa07:	rex.W jmp QWORD PTR [rip+0xfffffffffffb209a]        # 0x1001aa8
 104fa0e:	int3   
 104fa0f:	int3   
 104fa10:	lea    rcx,[rdx+0x60]
 104fa17:	rex.W jmp QWORD PTR [rip+0xfffffffffffb208a]        # 0x1001aa8
 104fa1e:	int3   
 104fa1f:	int3   
 104fa20:	lea    rcx,[rdx+0x68]
 104fa27:	rex.W jmp QWORD PTR [rip+0xfffffffffffb207a]        # 0x1001aa8
 104fa2e:	int3   
 104fa2f:	int3   
 104fa30:	lea    rcx,[rdx+0x60]
 104fa37:	rex.W jmp QWORD PTR [rip+0xfffffffffffb206a]        # 0x1001aa8
 104fa3e:	int3   
 104fa3f:	int3   
 104fa40:	lea    rcx,[rdx+0x60]
 104fa47:	rex.W jmp QWORD PTR [rip+0xfffffffffffb205a]        # 0x1001aa8
 104fa4e:	int3   
 104fa4f:	int3   
 104fa50:	lea    rcx,[rdx+0x68]
 104fa57:	rex.W jmp QWORD PTR [rip+0xfffffffffffb204a]        # 0x1001aa8
 104fa5e:	int3   
 104fa5f:	int3   
 104fa60:	lea    rcx,[rdx+0x60]
 104fa67:	rex.W jmp QWORD PTR [rip+0xfffffffffffb203a]        # 0x1001aa8
 104fa6e:	int3   
 104fa6f:	int3   
 104fa70:	int3   
 104fa71:	int3   
 104fa72:	int3   
 104fa73:	int3   
 104fa74:	int3   
 104fa75:	int3   
 104fa76:	int3   
 104fa77:	int3   
 104fa78:	int3   
 104fa79:	int3   
 104fa7a:	int3   
 104fa7b:	int3   
 104fa7c:	int3   
 104fa7d:	int3   
 104fa7e:	int3   
 104fa7f:	int3   
 104fa80:	lea    rcx,[rdx+0x68]
 104fa87:	rex.W jmp QWORD PTR [rip+0xfffffffffffb201a]        # 0x1001aa8
 104fa8e:	int3   
 104fa8f:	int3   
 104fa90:	lea    rcx,[rdx+0x28]
 104fa97:	rex.W jmp QWORD PTR [rip+0xfffffffffffb200a]        # 0x1001aa8
 104fa9e:	int3   
 104fa9f:	int3   
 104faa0:	rex push rbp
 104faa2:	sub    rsp,0x20
 104faa6:	mov    rbp,rdx
 104faa9:	mov    eax,DWORD PTR [rbp+0x20]
 104faac:	and    eax,0x1
 104faaf:	test   eax,eax
 104fab1:	je     0x104fac1
 104fab3:	and    DWORD PTR [rbp+0x20],0xfffffffe
 104fab7:	mov    rcx,QWORD PTR [rbp+0x50]
 104fabb:	call   QWORD PTR [rip+0xfffffffffffb1fe7]        # 0x1001aa8
 104fac1:	add    rsp,0x20
 104fac5:	pop    rbp
 104fac6:	ret    
 104fac7:	int3   
 104fac8:	int3   
 104fac9:	int3   
 104faca:	int3   
 104facb:	int3   
 104facc:	int3   
 104facd:	int3   
 104face:	int3   
 104facf:	int3   
 104fad0:	lea    rcx,[rdx+0x50]
 104fad7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb1fca]        # 0x1001aa8
 104fade:	int3   
 104fadf:	int3   
 104fae0:	rex push rbp
 104fae2:	sub    rsp,0x20
 104fae6:	mov    rbp,rdx
 104fae9:	mov    eax,DWORD PTR [rbp+0x20]
 104faec:	and    eax,0x1
 104faef:	test   eax,eax
 104faf1:	je     0x104fb01
 104faf3:	and    DWORD PTR [rbp+0x20],0xfffffffe
 104faf7:	mov    rcx,QWORD PTR [rbp+0x40]
 104fafb:	call   QWORD PTR [rip+0xfffffffffffb1fa7]        # 0x1001aa8
 104fb01:	add    rsp,0x20
 104fb05:	pop    rbp
 104fb06:	ret    
 104fb07:	int3   
 104fb08:	int3   
 104fb09:	int3   
 104fb0a:	int3   
 104fb0b:	int3   
 104fb0c:	int3   
 104fb0d:	int3   
 104fb0e:	int3   
 104fb0f:	int3   
 104fb10:	lea    rcx,[rdx+0x68]
 104fb17:	jmp    0x102daf0
 104fb1c:	int3   
 104fb1d:	int3   
 104fb1e:	int3   
 104fb1f:	int3   
 104fb20:	int3   
 104fb21:	int3   
 104fb22:	int3   
 104fb23:	int3   
 104fb24:	int3   
 104fb25:	int3   
 104fb26:	int3   
 104fb27:	int3   
 104fb28:	int3   
 104fb29:	int3   
 104fb2a:	int3   
 104fb2b:	int3   
 104fb2c:	int3   
 104fb2d:	int3   
 104fb2e:	int3   
 104fb2f:	int3   
 104fb30:	lea    rcx,[rdx+0x20]
 104fb37:	rex.W jmp QWORD PTR [rip+0xfffffffffffb1f6a]        # 0x1001aa8
 104fb3e:	int3   
 104fb3f:	int3   
 104fb40:	lea    rcx,[rdx+0x28]
 104fb47:	rex.W jmp QWORD PTR [rip+0xfffffffffffb1f5a]        # 0x1001aa8
 104fb4e:	int3   
 104fb4f:	int3   
 104fb50:	lea    rcx,[rdx+0x28]
 104fb57:	rex.W jmp QWORD PTR [rip+0xfffffffffffb1f4a]        # 0x1001aa8
 104fb5e:	int3   
 104fb5f:	int3   
 104fb60:	int3   
 104fb61:	int3   
 104fb62:	int3   
 104fb63:	int3   
 104fb64:	int3   
 104fb65:	int3   
 104fb66:	int3   
 104fb67:	int3   
 104fb68:	int3   
 104fb69:	int3   
 104fb6a:	int3   
 104fb6b:	int3   
 104fb6c:	int3   
 104fb6d:	int3   
 104fb6e:	int3   
 104fb6f:	int3   
 104fb70:	rex push rbp
 104fb72:	sub    rsp,0x20
 104fb76:	mov    rbp,rdx
 104fb79:	mov    eax,DWORD PTR [rbp+0x20]
 104fb7c:	and    eax,0x1
 104fb7f:	test   eax,eax
 104fb81:	je     0x104fb91
 104fb83:	and    DWORD PTR [rbp+0x20],0xfffffffe
 104fb87:	mov    rcx,QWORD PTR [rbp+0x30]
 104fb8b:	call   QWORD PTR [rip+0xfffffffffffb1f17]        # 0x1001aa8
 104fb91:	add    rsp,0x20
 104fb95:	pop    rbp
 104fb96:	ret    
 104fb97:	int3   
 104fb98:	int3   
 104fb99:	int3   
 104fb9a:	int3   
 104fb9b:	int3   
 104fb9c:	int3   
 104fb9d:	int3   
 104fb9e:	int3   
 104fb9f:	int3   
 104fba0:	lea    rcx,[rdx+0x90]
 104fba7:	jmp    0x1036200
 104fbac:	int3   
 104fbad:	int3   
 104fbae:	int3   
 104fbaf:	int3   
 104fbb0:	int3   
 104fbb1:	int3   
 104fbb2:	int3   
 104fbb3:	int3   
 104fbb4:	int3   
 104fbb5:	int3   
 104fbb6:	int3   
 104fbb7:	int3   
 104fbb8:	int3   
 104fbb9:	int3   
 104fbba:	int3   
 104fbbb:	int3   
 104fbbc:	int3   
 104fbbd:	int3   
 104fbbe:	int3   
 104fbbf:	int3   
 104fbc0:	lea    rcx,[rdx+0x48]
 104fbc7:	jmp    0x102dac0
 104fbcc:	int3   
 104fbcd:	int3   
 104fbce:	int3   
 104fbcf:	int3   
 104fbd0:	lea    rcx,[rdx+0x40]
 104fbd7:	jmp    0x102dac0
 104fbdc:	int3   
 104fbdd:	int3   
 104fbde:	int3   
 104fbdf:	int3   
 104fbe0:	rex push rbp
 104fbe2:	sub    rsp,0x20
 104fbe6:	mov    rbp,rdx
 104fbe9:	mov    eax,DWORD PTR [rbp+0x38]
 104fbec:	and    eax,0x1
 104fbef:	test   eax,eax
 104fbf1:	je     0x104fc04
 104fbf3:	and    DWORD PTR [rbp+0x38],0xfffffffe
 104fbf7:	mov    rcx,QWORD PTR [rbp+0xb0]
 104fbfe:	call   QWORD PTR [rip+0xfffffffffffb1ea4]        # 0x1001aa8
 104fc04:	add    rsp,0x20
 104fc08:	pop    rbp
 104fc09:	ret    
 104fc0a:	int3   
 104fc0b:	int3   
 104fc0c:	int3   
 104fc0d:	int3   
 104fc0e:	int3   
 104fc0f:	int3   
 104fc10:	lea    rcx,[rdx+0xd8]
 104fc17:	rex.W jmp QWORD PTR [rip+0xfffffffffffb1e8a]        # 0x1001aa8
 104fc1e:	int3   
 104fc1f:	int3   
 104fc20:	lea    rcx,[rdx+0x50]
 104fc27:	rex.W jmp QWORD PTR [rip+0xfffffffffffb1e7a]        # 0x1001aa8
 104fc2e:	int3   
 104fc2f:	int3   
 104fc30:	mov    rcx,QWORD PTR [rdx+0x60]
 104fc37:	rex.W jmp QWORD PTR [rip+0xfffffffffffb1e6a]        # 0x1001aa8
 104fc3e:	int3   
 104fc3f:	int3   
 104fc40:	mov    rcx,QWORD PTR [rdx+0x60]
 104fc47:	rex.W jmp QWORD PTR [rip+0xfffffffffffb1e5a]        # 0x1001aa8
 104fc4e:	int3   
 104fc4f:	int3   
 104fc50:	lea    rcx,[rdx+0xd8]
 104fc57:	rex.W jmp QWORD PTR [rip+0xfffffffffffb1e4a]        # 0x1001aa8
 104fc5e:	int3   
 104fc5f:	int3   
 104fc60:	lea    rcx,[rdx+0x50]
 104fc67:	rex.W jmp QWORD PTR [rip+0xfffffffffffb1e3a]        # 0x1001aa8
 104fc6e:	int3   
 104fc6f:	int3   
 104fc70:	mov    rcx,QWORD PTR [rdx+0x60]
 104fc77:	rex.W jmp QWORD PTR [rip+0xfffffffffffb1e2a]        # 0x1001aa8
 104fc7e:	int3   
 104fc7f:	int3   
 104fc80:	mov    rcx,QWORD PTR [rdx+0x60]
 104fc87:	rex.W jmp QWORD PTR [rip+0xfffffffffffb1e1a]        # 0x1001aa8
 104fc8e:	int3   
 104fc8f:	int3   
 104fc90:	int3   
 104fc91:	int3   
 104fc92:	int3   
 104fc93:	int3   
 104fc94:	int3   
 104fc95:	int3   
 104fc96:	int3   
 104fc97:	int3   
 104fc98:	int3   
 104fc99:	int3   
 104fc9a:	int3   
 104fc9b:	int3   
 104fc9c:	int3   
 104fc9d:	int3   
 104fc9e:	int3   
 104fc9f:	int3   
 104fca0:	lea    rcx,[rdx+0x40]
 104fca7:	jmp    0x102dac0
 104fcac:	int3   
 104fcad:	int3   
 104fcae:	int3   
 104fcaf:	int3   
 104fcb0:	lea    rcx,[rdx+0x38]
 104fcb7:	jmp    0x102dac0
 104fcbc:	int3   
 104fcbd:	int3   
 104fcbe:	int3   
 104fcbf:	int3   
 104fcc0:	lea    rcx,[rdx+0xa0]
 104fcc7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb1dda]        # 0x1001aa8
 104fcce:	int3   
 104fccf:	int3   
 104fcd0:	lea    rcx,[rdx+0x48]
 104fcd7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb1dca]        # 0x1001aa8
 104fcde:	int3   
 104fcdf:	int3   
 104fce0:	mov    rcx,QWORD PTR [rdx+0x58]
 104fce7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb1dba]        # 0x1001aa8
 104fcee:	int3   
 104fcef:	int3   
 104fcf0:	int3   
 104fcf1:	int3   
 104fcf2:	int3   
 104fcf3:	int3   
 104fcf4:	int3   
 104fcf5:	int3   
 104fcf6:	int3   
 104fcf7:	int3   
 104fcf8:	int3   
 104fcf9:	int3   
 104fcfa:	int3   
 104fcfb:	int3   
 104fcfc:	int3   
 104fcfd:	int3   
 104fcfe:	int3   
 104fcff:	int3   
 104fd00:	rex push rbp
 104fd02:	sub    rsp,0x20
 104fd06:	mov    rbp,rdx
 104fd09:	mov    eax,DWORD PTR [rbp+0x20]
 104fd0c:	and    eax,0x1
 104fd0f:	test   eax,eax
 104fd11:	je     0x104fd21
 104fd13:	and    DWORD PTR [rbp+0x20],0xfffffffe
 104fd17:	mov    rcx,QWORD PTR [rbp+0x40]
 104fd1b:	call   QWORD PTR [rip+0xfffffffffffb1d87]        # 0x1001aa8
 104fd21:	add    rsp,0x20
 104fd25:	pop    rbp
 104fd26:	ret    
 104fd27:	int3   
 104fd28:	int3   
 104fd29:	int3   
 104fd2a:	int3   
 104fd2b:	int3   
 104fd2c:	int3   
 104fd2d:	int3   
 104fd2e:	int3   
 104fd2f:	int3   
 104fd30:	rex push rbp
 104fd32:	sub    rsp,0x20
 104fd36:	mov    rbp,rdx
 104fd39:	mov    eax,DWORD PTR [rbp+0x20]
 104fd3c:	and    eax,0x1
 104fd3f:	test   eax,eax
 104fd41:	je     0x104fd51
 104fd43:	and    DWORD PTR [rbp+0x20],0xfffffffe
 104fd47:	mov    rcx,QWORD PTR [rbp+0x40]
 104fd4b:	call   QWORD PTR [rip+0xfffffffffffb1d57]        # 0x1001aa8
 104fd51:	add    rsp,0x20
 104fd55:	pop    rbp
 104fd56:	ret    
 104fd57:	int3   
 104fd58:	int3   
 104fd59:	int3   
 104fd5a:	int3   
 104fd5b:	int3   
 104fd5c:	int3   
 104fd5d:	int3   
 104fd5e:	int3   
 104fd5f:	int3   
 104fd60:	lea    rcx,[rdx+0x20]
 104fd67:	jmp    0x1036200
 104fd6c:	int3   
 104fd6d:	int3   
 104fd6e:	int3   
 104fd6f:	int3   
 104fd70:	lea    rcx,[rdx+0x28]
 104fd77:	jmp    0x102daf0
 104fd7c:	int3   
 104fd7d:	int3   
 104fd7e:	int3   
 104fd7f:	int3   
 104fd80:	int3   
 104fd81:	int3   
 104fd82:	int3   
 104fd83:	int3   
 104fd84:	int3   
 104fd85:	int3   
 104fd86:	int3   
 104fd87:	int3   
 104fd88:	int3   
 104fd89:	int3   
 104fd8a:	int3   
 104fd8b:	int3   
 104fd8c:	int3   
 104fd8d:	int3   
 104fd8e:	int3   
 104fd8f:	int3   
 104fd90:	lea    rcx,[rdx+0x68]
 104fd97:	rex.W jmp QWORD PTR [rip+0xfffffffffffb1d0a]        # 0x1001aa8
 104fd9e:	int3   
 104fd9f:	int3   
 104fda0:	int3   
 104fda1:	int3   
 104fda2:	int3   
 104fda3:	int3   
 104fda4:	int3   
 104fda5:	int3   
 104fda6:	int3   
 104fda7:	int3   
 104fda8:	int3   
 104fda9:	int3   
 104fdaa:	int3   
 104fdab:	int3   
 104fdac:	int3   
 104fdad:	int3   
 104fdae:	int3   
 104fdaf:	int3   
 104fdb0:	lea    rcx,[rdx+0x70]
 104fdb7:	jmp    0x1036200
 104fdbc:	int3   
 104fdbd:	int3   
 104fdbe:	int3   
 104fdbf:	int3   
 104fdc0:	int3   
 104fdc1:	int3   
 104fdc2:	int3   
 104fdc3:	int3   
 104fdc4:	int3   
 104fdc5:	int3   
 104fdc6:	int3   
 104fdc7:	int3   
 104fdc8:	int3   
 104fdc9:	int3   
 104fdca:	int3   
 104fdcb:	int3   
 104fdcc:	int3   
 104fdcd:	int3   
 104fdce:	int3   
 104fdcf:	int3   
 104fdd0:	lea    rcx,[rdx+0x28]
 104fdd7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb1cca]        # 0x1001aa8
 104fdde:	int3   
 104fddf:	int3   
 104fde0:	int3   
 104fde1:	int3   
 104fde2:	int3   
 104fde3:	int3   
 104fde4:	int3   
 104fde5:	int3   
 104fde6:	int3   
 104fde7:	int3   
 104fde8:	int3   
 104fde9:	int3   
 104fdea:	int3   
 104fdeb:	int3   
 104fdec:	int3   
 104fded:	int3   
 104fdee:	int3   
 104fdef:	int3   
 104fdf0:	lea    rcx,[rdx+0x48]
 104fdf7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb1caa]        # 0x1001aa8
 104fdfe:	int3   
 104fdff:	int3   
 104fe00:	lea    rcx,[rdx+0x40]
 104fe07:	rex.W jmp QWORD PTR [rip+0xfffffffffffb1c9a]        # 0x1001aa8
 104fe0e:	int3   
 104fe0f:	int3   
 104fe10:	lea    rcx,[rdx+0x30]
 104fe17:	rex.W jmp QWORD PTR [rip+0xfffffffffffb1c8a]        # 0x1001aa8
 104fe1e:	int3   
 104fe1f:	int3   
 104fe20:	mov    rcx,QWORD PTR [rdx+0x70]
 104fe27:	rex.W jmp QWORD PTR [rip+0xfffffffffffb1c7a]        # 0x1001aa8
 104fe2e:	int3   
 104fe2f:	int3   
 104fe30:	lea    rcx,[rdx+0x30]
 104fe37:	rex.W jmp QWORD PTR [rip+0xfffffffffffb1c6a]        # 0x1001aa8
 104fe3e:	int3   
 104fe3f:	int3   
 104fe40:	int3   
 104fe41:	int3   
 104fe42:	int3   
 104fe43:	int3   
 104fe44:	int3   
 104fe45:	int3   
 104fe46:	int3   
 104fe47:	int3   
 104fe48:	int3   
 104fe49:	int3   
 104fe4a:	int3   
 104fe4b:	int3   
 104fe4c:	int3   
 104fe4d:	int3   
 104fe4e:	int3   
 104fe4f:	int3   
 104fe50:	lea    rcx,[rdx+0x20]
 104fe57:	jmp    0x100c4f0
 104fe5c:	int3   
 104fe5d:	int3   
 104fe5e:	int3   
 104fe5f:	int3   
 104fe60:	lea    rcx,[rdx+0x58]
 104fe67:	jmp    0x1012ae0
 104fe6c:	int3   
 104fe6d:	int3   
 104fe6e:	int3   
 104fe6f:	int3   
 104fe70:	lea    rcx,[rdx+0xd8]
 104fe77:	rex.W jmp QWORD PTR [rip+0xfffffffffffb1c2a]        # 0x1001aa8
 104fe7e:	int3   
 104fe7f:	int3   
 104fe80:	int3   
 104fe81:	int3   
 104fe82:	int3   
 104fe83:	int3   
 104fe84:	int3   
 104fe85:	int3   
 104fe86:	int3   
 104fe87:	int3   
 104fe88:	int3   
 104fe89:	int3   
 104fe8a:	int3   
 104fe8b:	int3   
 104fe8c:	int3   
 104fe8d:	int3   
 104fe8e:	int3   
 104fe8f:	int3   
 104fe90:	lea    rcx,[rdx+0x20]
 104fe97:	jmp    0x1036200
 104fe9c:	int3   
 104fe9d:	int3   
 104fe9e:	int3   
 104fe9f:	int3   
 104fea0:	int3   
 104fea1:	int3   
 104fea2:	int3   
 104fea3:	int3   
 104fea4:	int3   
 104fea5:	int3   
 104fea6:	int3   
 104fea7:	int3   
 104fea8:	int3   
 104fea9:	int3   
 104feaa:	int3   
 104feab:	int3   
 104feac:	int3   
 104fead:	int3   
 104feae:	int3   
 104feaf:	int3   
 104feb0:	lea    rcx,[rdx+0x90]
 104feb7:	jmp    0x102bd90
 104febc:	int3   
 104febd:	int3   
 104febe:	int3   
 104febf:	int3   
 104fec0:	lea    rcx,[rdx+0x58]
 104fec7:	jmp    0x102bd90
 104fecc:	int3   
 104fecd:	int3   
 104fece:	int3   
 104fecf:	int3   
 104fed0:	int3   
 104fed1:	int3   
 104fed2:	int3   
 104fed3:	int3   
 104fed4:	int3   
 104fed5:	int3   
 104fed6:	int3   
 104fed7:	int3   
 104fed8:	int3   
 104fed9:	int3   
 104feda:	int3   
 104fedb:	int3   
 104fedc:	int3   
 104fedd:	int3   
 104fede:	int3   
 104fedf:	int3   
 104fee0:	lea    rcx,[rdx+0x70]
 104fee7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb1bba]        # 0x1001aa8
 104feee:	int3   
 104feef:	int3   
 104fef0:	lea    rcx,[rdx+0x58]
 104fef7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb1baa]        # 0x1001aa8
 104fefe:	int3   
 104feff:	int3   
 104ff00:	lea    rcx,[rdx+0x68]
 104ff07:	rex.W jmp QWORD PTR [rip+0xfffffffffffb1b9a]        # 0x1001aa8
 104ff0e:	int3   
 104ff0f:	int3   
 104ff10:	lea    rcx,[rdx+0x60]
 104ff17:	rex.W jmp QWORD PTR [rip+0xfffffffffffb1b8a]        # 0x1001aa8
 104ff1e:	int3   
 104ff1f:	int3   
 104ff20:	lea    rcx,[rdx+0x90]
 104ff27:	rex.W jmp QWORD PTR [rip+0xfffffffffffb1b7a]        # 0x1001aa8
 104ff2e:	int3   
 104ff2f:	int3   
 104ff30:	int3   
 104ff31:	int3   
 104ff32:	int3   
 104ff33:	int3   
 104ff34:	int3   
 104ff35:	int3   
 104ff36:	int3   
 104ff37:	int3   
 104ff38:	int3   
 104ff39:	int3   
 104ff3a:	int3   
 104ff3b:	int3   
 104ff3c:	int3   
 104ff3d:	int3   
 104ff3e:	int3   
 104ff3f:	int3   
 104ff40:	mov    rcx,QWORD PTR [rdx+0x50]
 104ff47:	jmp    0x103f95a
 104ff4c:	int3   
 104ff4d:	int3   
 104ff4e:	int3   
 104ff4f:	int3   
 104ff50:	mov    rcx,QWORD PTR [rdx+0x50]
 104ff57:	add    rcx,0x20
 104ff5b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb1b46]        # 0x1001aa8
 104ff62:	int3   
 104ff63:	int3   
 104ff64:	int3   
 104ff65:	int3   
 104ff66:	int3   
 104ff67:	int3   
 104ff68:	int3   
 104ff69:	int3   
 104ff6a:	int3   
 104ff6b:	int3   
 104ff6c:	int3   
 104ff6d:	int3   
 104ff6e:	int3   
 104ff6f:	int3   
 104ff70:	mov    rcx,QWORD PTR [rdx+0x50]
 104ff77:	add    rcx,0x28
 104ff7b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb1b26]        # 0x1001aa8
 104ff82:	int3   
 104ff83:	int3   
 104ff84:	int3   
 104ff85:	int3   
 104ff86:	int3   
 104ff87:	int3   
 104ff88:	int3   
 104ff89:	int3   
 104ff8a:	int3   
 104ff8b:	int3   
 104ff8c:	int3   
 104ff8d:	int3   
 104ff8e:	int3   
 104ff8f:	int3   
 104ff90:	lea    rcx,[rdx+0x50]
 104ff97:	jmp    0x102dac0
 104ff9c:	int3   
 104ff9d:	int3   
 104ff9e:	int3   
 104ff9f:	int3   
 104ffa0:	lea    rcx,[rdx+0x48]
 104ffa7:	jmp    0x102dac0
 104ffac:	int3   
 104ffad:	int3   
 104ffae:	int3   
 104ffaf:	int3   
 104ffb0:	lea    rcx,[rdx+0x40]
 104ffb7:	jmp    0x102dac0
 104ffbc:	int3   
 104ffbd:	int3   
 104ffbe:	int3   
 104ffbf:	int3   
 104ffc0:	lea    rcx,[rdx+0x38]
 104ffc7:	jmp    0x102dac0
 104ffcc:	int3   
 104ffcd:	int3   
 104ffce:	int3   
 104ffcf:	int3   
 104ffd0:	lea    rcx,[rdx+0x30]
 104ffd7:	jmp    0x102dac0
 104ffdc:	int3   
 104ffdd:	int3   
 104ffde:	int3   
 104ffdf:	int3   
 104ffe0:	int3   
 104ffe1:	int3   
 104ffe2:	int3   
 104ffe3:	int3   
 104ffe4:	int3   
 104ffe5:	int3   
 104ffe6:	int3   
 104ffe7:	int3   
 104ffe8:	int3   
 104ffe9:	int3   
 104ffea:	int3   
 104ffeb:	int3   
 104ffec:	int3   
 104ffed:	int3   
 104ffee:	int3   
 104ffef:	int3   
 104fff0:	lea    rcx,[rdx+0x58]
 104fff7:	jmp    0x102dac0
 104fffc:	int3   
 104fffd:	int3   
 104fffe:	int3   
 104ffff:	int3   
 1050000:	lea    rcx,[rdx+0x50]
 1050007:	jmp    0x102dac0
 105000c:	int3   
 105000d:	int3   
 105000e:	int3   
 105000f:	int3   
 1050010:	lea    rcx,[rdx+0x48]
 1050017:	jmp    0x102dac0
 105001c:	int3   
 105001d:	int3   
 105001e:	int3   
 105001f:	int3   
 1050020:	lea    rcx,[rdx+0x40]
 1050027:	jmp    0x102dac0
 105002c:	int3   
 105002d:	int3   
 105002e:	int3   
 105002f:	int3   
 1050030:	lea    rcx,[rdx+0x38]
 1050037:	jmp    0x102dac0
 105003c:	int3   
 105003d:	int3   
 105003e:	int3   
 105003f:	int3   
 1050040:	rex push rbp
 1050042:	sub    rsp,0x20
 1050046:	mov    rbp,rdx
 1050049:	mov    eax,DWORD PTR [rbp+0x64]
 105004c:	and    eax,0x1
 105004f:	test   eax,eax
 1050051:	je     0x1050064
 1050053:	and    DWORD PTR [rbp+0x64],0xfffffffe
 1050057:	mov    rcx,QWORD PTR [rbp+0xa0]
 105005e:	call   QWORD PTR [rip+0xfffffffffffb1a44]        # 0x1001aa8
 1050064:	add    rsp,0x20
 1050068:	pop    rbp
 1050069:	ret    
 105006a:	int3   
 105006b:	int3   
 105006c:	int3   
 105006d:	int3   
 105006e:	int3   
 105006f:	int3   
 1050070:	lea    rcx,[rdx+0x58]
 1050077:	jmp    0x102dac0
 105007c:	int3   
 105007d:	int3   
 105007e:	int3   
 105007f:	int3   
 1050080:	lea    rcx,[rdx+0x50]
 1050087:	jmp    0x102dac0
 105008c:	int3   
 105008d:	int3   
 105008e:	int3   
 105008f:	int3   
 1050090:	lea    rcx,[rdx+0x48]
 1050097:	jmp    0x102dac0
 105009c:	int3   
 105009d:	int3   
 105009e:	int3   
 105009f:	int3   
 10500a0:	lea    rcx,[rdx+0x40]
 10500a7:	jmp    0x102dac0
 10500ac:	int3   
 10500ad:	int3   
 10500ae:	int3   
 10500af:	int3   
 10500b0:	lea    rcx,[rdx+0x38]
 10500b7:	jmp    0x102dac0
 10500bc:	int3   
 10500bd:	int3   
 10500be:	int3   
 10500bf:	int3   
 10500c0:	int3   
 10500c1:	int3   
 10500c2:	int3   
 10500c3:	int3   
 10500c4:	int3   
 10500c5:	int3   
 10500c6:	int3   
 10500c7:	int3   
 10500c8:	int3   
 10500c9:	int3   
 10500ca:	int3   
 10500cb:	int3   
 10500cc:	int3   
 10500cd:	int3   
 10500ce:	int3   
 10500cf:	int3   
 10500d0:	lea    rcx,[rdx+0x38]
 10500d7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb19ca]        # 0x1001aa8
 10500de:	int3   
 10500df:	int3   
 10500e0:	lea    rcx,[rdx+0x48]
 10500e7:	jmp    0x102dac0
 10500ec:	int3   
 10500ed:	int3   
 10500ee:	int3   
 10500ef:	int3   
 10500f0:	lea    rcx,[rdx+0x40]
 10500f7:	jmp    0x102dde0
 10500fc:	int3   
 10500fd:	int3   
 10500fe:	int3   
 10500ff:	int3   
 1050100:	lea    rcx,[rdx+0x30]
 1050107:	rex.W jmp QWORD PTR [rip+0xfffffffffffb199a]        # 0x1001aa8
 105010e:	int3   
 105010f:	int3   
 1050110:	lea    rcx,[rdx+0x30]
 1050117:	rex.W jmp QWORD PTR [rip+0xfffffffffffb198a]        # 0x1001aa8
 105011e:	int3   
 105011f:	int3   
 1050120:	lea    rcx,[rdx+0x30]
 1050127:	rex.W jmp QWORD PTR [rip+0xfffffffffffb197a]        # 0x1001aa8
 105012e:	int3   
 105012f:	int3   
 1050130:	lea    rcx,[rdx+0x30]
 1050137:	rex.W jmp QWORD PTR [rip+0xfffffffffffb196a]        # 0x1001aa8
 105013e:	int3   
 105013f:	int3   
 1050140:	lea    rcx,[rdx+0x30]
 1050147:	rex.W jmp QWORD PTR [rip+0xfffffffffffb195a]        # 0x1001aa8
 105014e:	int3   
 105014f:	int3   
 1050150:	lea    rcx,[rdx+0x30]
 1050157:	rex.W jmp QWORD PTR [rip+0xfffffffffffb194a]        # 0x1001aa8
 105015e:	int3   
 105015f:	int3   
 1050160:	lea    rcx,[rdx+0x30]
 1050167:	rex.W jmp QWORD PTR [rip+0xfffffffffffb193a]        # 0x1001aa8
 105016e:	int3   
 105016f:	int3   
 1050170:	lea    rcx,[rdx+0x30]
 1050177:	rex.W jmp QWORD PTR [rip+0xfffffffffffb192a]        # 0x1001aa8
 105017e:	int3   
 105017f:	int3   
 1050180:	lea    rcx,[rdx+0x30]
 1050187:	rex.W jmp QWORD PTR [rip+0xfffffffffffb191a]        # 0x1001aa8
 105018e:	int3   
 105018f:	int3   
 1050190:	lea    rcx,[rdx+0x30]
 1050197:	rex.W jmp QWORD PTR [rip+0xfffffffffffb190a]        # 0x1001aa8
 105019e:	int3   
 105019f:	int3   
 10501a0:	lea    rcx,[rdx+0x30]
 10501a7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb18fa]        # 0x1001aa8
 10501ae:	int3   
 10501af:	int3   
 10501b0:	lea    rcx,[rdx+0x30]
 10501b7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb18ea]        # 0x1001aa8
 10501be:	int3   
 10501bf:	int3   
 10501c0:	lea    rcx,[rdx+0x30]
 10501c7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb18da]        # 0x1001aa8
 10501ce:	int3   
 10501cf:	int3   
 10501d0:	lea    rcx,[rdx+0x30]
 10501d7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb18ca]        # 0x1001aa8
 10501de:	int3   
 10501df:	int3   
 10501e0:	lea    rcx,[rdx+0x30]
 10501e7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb18ba]        # 0x1001aa8
 10501ee:	int3   
 10501ef:	int3   
 10501f0:	lea    rcx,[rdx+0x30]
 10501f7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb18aa]        # 0x1001aa8
 10501fe:	int3   
 10501ff:	int3   
 1050200:	lea    rcx,[rdx+0x30]
 1050207:	rex.W jmp QWORD PTR [rip+0xfffffffffffb189a]        # 0x1001aa8
 105020e:	int3   
 105020f:	int3   
 1050210:	lea    rcx,[rdx+0x30]
 1050217:	rex.W jmp QWORD PTR [rip+0xfffffffffffb188a]        # 0x1001aa8
 105021e:	int3   
 105021f:	int3   
 1050220:	lea    rcx,[rdx+0x30]
 1050227:	rex.W jmp QWORD PTR [rip+0xfffffffffffb187a]        # 0x1001aa8
 105022e:	int3   
 105022f:	int3   
 1050230:	lea    rcx,[rdx+0x30]
 1050237:	rex.W jmp QWORD PTR [rip+0xfffffffffffb186a]        # 0x1001aa8
 105023e:	int3   
 105023f:	int3   
 1050240:	int3   
 1050241:	int3   
 1050242:	int3   
 1050243:	int3   
 1050244:	int3   
 1050245:	int3   
 1050246:	int3   
 1050247:	int3   
 1050248:	int3   
 1050249:	int3   
 105024a:	int3   
 105024b:	int3   
 105024c:	int3   
 105024d:	int3   
 105024e:	int3   
 105024f:	int3   
 1050250:	lea    rcx,[rdx+0x40]
 1050257:	jmp    0x102daf0
 105025c:	int3   
 105025d:	int3   
 105025e:	int3   
 105025f:	int3   
 1050260:	int3   
 1050261:	int3   
 1050262:	int3   
 1050263:	int3   
 1050264:	int3   
 1050265:	int3   
 1050266:	int3   
 1050267:	int3   
 1050268:	int3   
 1050269:	int3   
 105026a:	int3   
 105026b:	int3   
 105026c:	int3   
 105026d:	int3   
 105026e:	int3   
 105026f:	int3   
 1050270:	lea    rcx,[rdx+0x20]
 1050277:	jmp    0x1036200
 105027c:	int3   
 105027d:	int3   
 105027e:	int3   
 105027f:	int3   
 1050280:	int3   
 1050281:	int3   
 1050282:	int3   
 1050283:	int3   
 1050284:	int3   
 1050285:	int3   
 1050286:	int3   
 1050287:	int3   
 1050288:	int3   
 1050289:	int3   
 105028a:	int3   
 105028b:	int3   
 105028c:	int3   
 105028d:	int3   
 105028e:	int3   
 105028f:	int3   
 1050290:	rex push rbp
 1050292:	sub    rsp,0x20
 1050296:	mov    rbp,rdx
 1050299:	mov    eax,DWORD PTR [rbp+0x20]
 105029c:	and    eax,0x1
 105029f:	test   eax,eax
 10502a1:	je     0x10502b1
 10502a3:	and    DWORD PTR [rbp+0x20],0xfffffffe
 10502a7:	mov    rcx,QWORD PTR [rbp+0x60]
 10502ab:	call   QWORD PTR [rip+0xfffffffffffb17f7]        # 0x1001aa8
 10502b1:	add    rsp,0x20
 10502b5:	pop    rbp
 10502b6:	ret    
 10502b7:	int3   
 10502b8:	int3   
 10502b9:	int3   
 10502ba:	int3   
 10502bb:	int3   
 10502bc:	int3   
 10502bd:	int3   
 10502be:	int3   
 10502bf:	int3   
 10502c0:	lea    rcx,[rdx+0x28]
 10502c7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb17da]        # 0x1001aa8
 10502ce:	int3   
 10502cf:	int3   
 10502d0:	lea    rcx,[rdx+0x78]
 10502d7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb17ca]        # 0x1001aa8
 10502de:	int3   
 10502df:	int3   
 10502e0:	lea    rcx,[rdx+0x30]
 10502e7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb17ba]        # 0x1001aa8
 10502ee:	int3   
 10502ef:	int3   
 10502f0:	lea    rcx,[rdx+0x30]
 10502f7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb17aa]        # 0x1001aa8
 10502fe:	int3   
 10502ff:	int3   
 1050300:	int3   
 1050301:	int3   
 1050302:	int3   
 1050303:	int3   
 1050304:	int3   
 1050305:	int3   
 1050306:	int3   
 1050307:	int3   
 1050308:	int3   
 1050309:	int3   
 105030a:	int3   
 105030b:	int3   
 105030c:	int3   
 105030d:	int3   
 105030e:	int3   
 105030f:	int3   
 1050310:	lea    rcx,[rdx+0x60]
 1050317:	rex.W jmp QWORD PTR [rip+0xfffffffffffb178a]        # 0x1001aa8
 105031e:	int3   
 105031f:	int3   
 1050320:	lea    rcx,[rdx+0x68]
 1050327:	rex.W jmp QWORD PTR [rip+0xfffffffffffb177a]        # 0x1001aa8
 105032e:	int3   
 105032f:	int3   
 1050330:	rex push rbp
 1050332:	sub    rsp,0x20
 1050336:	mov    rbp,rdx
 1050339:	mov    eax,DWORD PTR [rbp+0x20]
 105033c:	and    eax,0x1
 105033f:	test   eax,eax
 1050341:	je     0x1050351
 1050343:	and    DWORD PTR [rbp+0x20],0xfffffffe
 1050347:	mov    rcx,QWORD PTR [rbp+0x50]
 105034b:	call   QWORD PTR [rip+0xfffffffffffb1757]        # 0x1001aa8
 1050351:	add    rsp,0x20
 1050355:	pop    rbp
 1050356:	ret    
 1050357:	int3   
 1050358:	int3   
 1050359:	int3   
 105035a:	int3   
 105035b:	int3   
 105035c:	int3   
 105035d:	int3   
 105035e:	int3   
 105035f:	int3   
 1050360:	lea    rcx,[rdx+0x68]
 1050367:	rex.W jmp QWORD PTR [rip+0xfffffffffffb173a]        # 0x1001aa8
 105036e:	int3   
 105036f:	int3   
 1050370:	int3   
 1050371:	int3   
 1050372:	int3   
 1050373:	int3   
 1050374:	int3   
 1050375:	int3   
 1050376:	int3   
 1050377:	int3   
 1050378:	int3   
 1050379:	int3   
 105037a:	int3   
 105037b:	int3   
 105037c:	int3   
 105037d:	int3   
 105037e:	int3   
 105037f:	int3   
 1050380:	rex push rbp
 1050382:	sub    rsp,0x20
 1050386:	mov    rbp,rdx
 1050389:	mov    eax,DWORD PTR [rbp+0x20]
 105038c:	and    eax,0x1
 105038f:	test   eax,eax
 1050391:	je     0x10503a1
 1050393:	and    DWORD PTR [rbp+0x20],0xfffffffe
 1050397:	mov    rcx,QWORD PTR [rbp+0x60]
 105039b:	call   QWORD PTR [rip+0xfffffffffffb1707]        # 0x1001aa8
 10503a1:	add    rsp,0x20
 10503a5:	pop    rbp
 10503a6:	ret    
 10503a7:	int3   
 10503a8:	int3   
 10503a9:	int3   
 10503aa:	int3   
 10503ab:	int3   
 10503ac:	int3   
 10503ad:	int3   
 10503ae:	int3   
 10503af:	int3   
 10503b0:	lea    rcx,[rdx+0x78]
 10503b7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb16ea]        # 0x1001aa8
 10503be:	int3   
 10503bf:	int3   
 10503c0:	lea    rcx,[rdx+0x38]
 10503c7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb16da]        # 0x1001aa8
 10503ce:	int3   
 10503cf:	int3   
 10503d0:	lea    rcx,[rdx+0x30]
 10503d7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb16ca]        # 0x1001aa8
 10503de:	int3   
 10503df:	int3   
 10503e0:	lea    rcx,[rdx+0x28]
 10503e7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb16ba]        # 0x1001aa8
 10503ee:	int3   
 10503ef:	int3   
 10503f0:	int3   
 10503f1:	int3   
 10503f2:	int3   
 10503f3:	int3   
 10503f4:	int3   
 10503f5:	int3   
 10503f6:	int3   
 10503f7:	int3   
 10503f8:	int3   
 10503f9:	int3   
 10503fa:	int3   
 10503fb:	int3   
 10503fc:	int3   
 10503fd:	int3   
 10503fe:	int3   
 10503ff:	int3   
 1050400:	lea    rcx,[rdx+0x68]
 1050407:	jmp    0x102dac0
 105040c:	int3   
 105040d:	int3   
 105040e:	int3   
 105040f:	int3   
 1050410:	lea    rcx,[rdx+0x60]
 1050417:	jmp    0x102dac0
 105041c:	int3   
 105041d:	int3   
 105041e:	int3   
 105041f:	int3   
 1050420:	lea    rcx,[rdx+0x58]
 1050427:	jmp    0x102dac0
 105042c:	int3   
 105042d:	int3   
 105042e:	int3   
 105042f:	int3   
 1050430:	lea    rcx,[rdx+0x50]
 1050437:	jmp    0x102dac0
 105043c:	int3   
 105043d:	int3   
 105043e:	int3   
 105043f:	int3   
 1050440:	lea    rcx,[rdx+0xd8]
 1050447:	jmp    0x102dac0
 105044c:	int3   
 105044d:	int3   
 105044e:	int3   
 105044f:	int3   
 1050450:	lea    rcx,[rdx+0x78]
 1050457:	rex.W jmp QWORD PTR [rip+0xfffffffffffb164a]        # 0x1001aa8
 105045e:	int3   
 105045f:	int3   
 1050460:	lea    rcx,[rdx+0x70]
 1050467:	rex.W jmp QWORD PTR [rip+0xfffffffffffb163a]        # 0x1001aa8
 105046e:	int3   
 105046f:	int3   
 1050470:	int3   
 1050471:	int3   
 1050472:	int3   
 1050473:	int3   
 1050474:	int3   
 1050475:	int3   
 1050476:	int3   
 1050477:	int3   
 1050478:	int3   
 1050479:	int3   
 105047a:	int3   
 105047b:	int3   
 105047c:	int3   
 105047d:	int3   
 105047e:	int3   
 105047f:	int3   
 1050480:	lea    rcx,[rdx+0x38]
 1050487:	rex.W jmp QWORD PTR [rip+0xfffffffffffb161a]        # 0x1001aa8
 105048e:	int3   
 105048f:	int3   
 1050490:	int3   
 1050491:	int3   
 1050492:	int3   
 1050493:	int3   
 1050494:	int3   
 1050495:	int3   
 1050496:	int3   
 1050497:	int3   
 1050498:	int3   
 1050499:	int3   
 105049a:	int3   
 105049b:	int3   
 105049c:	int3   
 105049d:	int3   
 105049e:	int3   
 105049f:	int3   
 10504a0:	rex push rbp
 10504a2:	sub    rsp,0x20
 10504a6:	mov    rbp,rdx
 10504a9:	or     edx,0xffffffff
 10504ac:	mov    rcx,QWORD PTR [rbp+0x30]
 10504b0:	call   QWORD PTR [rip+0xfffffffffffb152a]        # 0x10019e0
 10504b6:	nop
 10504b7:	add    rsp,0x20
 10504bb:	pop    rbp
 10504bc:	ret    
 10504bd:	int3   
 10504be:	int3   
 10504bf:	int3   
 10504c0:	int3   
 10504c1:	int3   
 10504c2:	int3   
 10504c3:	int3   
 10504c4:	int3   
 10504c5:	int3   
 10504c6:	int3   
 10504c7:	int3   
 10504c8:	int3   
 10504c9:	int3   
 10504ca:	int3   
 10504cb:	int3   
 10504cc:	int3   
 10504cd:	int3   
 10504ce:	int3   
 10504cf:	int3   
 10504d0:	lea    rcx,[rdx+0x38]
 10504d7:	jmp    0x10363c0
 10504dc:	int3   
 10504dd:	int3   
 10504de:	int3   
 10504df:	int3   
 10504e0:	mov    rcx,QWORD PTR [rdx+0x80]
 10504e7:	jmp    0x1036350
 10504ec:	int3   
 10504ed:	int3   
 10504ee:	int3   
 10504ef:	int3   
 10504f0:	mov    QWORD PTR [rsp+0x10],rdx
 10504f5:	push   rbp
 10504f6:	sub    rsp,0x30
 10504fa:	mov    rbp,rdx
 10504fd:	mov    rax,QWORD PTR [rbp+0x70]
 1050501:	mov    rcx,QWORD PTR [rax+0x18]
 1050505:	mov    rax,QWORD PTR [rcx]
 1050508:	mov    BYTE PTR [rsp+0x28],0x1
 105050d:	mov    BYTE PTR [rsp+0x20],0x1
 1050512:	xor    r9d,r9d
 1050515:	xor    r8d,r8d
 1050518:	mov    edx,0xc000c460
 105051d:	call   QWORD PTR [rax]
 105051f:	nop
 1050520:	lea    rax,[rip+0xfffffffffffeb78a]        # 0x103bcb1
 1050527:	add    rsp,0x30
 105052b:	pop    rbp
 105052c:	ret    
 105052d:	int3   
 105052e:	int3   
 105052f:	int3   
 1050530:	int3   
 1050531:	int3   
 1050532:	int3   
 1050533:	int3   
 1050534:	int3   
 1050535:	int3   
 1050536:	int3   
 1050537:	int3   
 1050538:	int3   
 1050539:	int3   
 105053a:	int3   
 105053b:	int3   
 105053c:	int3   
 105053d:	int3   
 105053e:	int3   
 105053f:	int3   
 1050540:	mov    rcx,QWORD PTR [rdx+0x150]
 1050547:	jmp    0x100e5d0
 105054c:	int3   
 105054d:	int3   
 105054e:	int3   
 105054f:	int3   
 1050550:	mov    rcx,QWORD PTR [rdx+0x150]
 1050557:	add    rcx,0x8
 105055b:	rex.W jmp QWORD PTR [rip+0xfffffffffffb1546]        # 0x1001aa8
 1050562:	int3   
 1050563:	int3   
 1050564:	int3   
 1050565:	int3   
 1050566:	int3   
 1050567:	int3   
 1050568:	int3   
 1050569:	int3   
 105056a:	int3   
 105056b:	int3   
 105056c:	int3   
 105056d:	int3   
 105056e:	int3   
 105056f:	int3   
 1050570:	mov    rcx,QWORD PTR [rdx+0x150]
 1050577:	add    rcx,0x10
 105057b:	jmp    0x103b0f0
 1050580:	lea    rcx,[rdx+0xc8]
 1050587:	jmp    0x10363c0
 105058c:	int3   
 105058d:	int3   
 105058e:	int3   
 105058f:	int3   
 1050590:	lea    rcx,[rdx+0x40]
 1050597:	rex.W jmp QWORD PTR [rip+0xfffffffffffb150a]        # 0x1001aa8
 105059e:	int3   
 105059f:	int3   
 10505a0:	lea    rcx,[rdx+0x90]
 10505a7:	jmp    0x1036c30
 10505ac:	int3   
 10505ad:	int3   
 10505ae:	int3   
 10505af:	int3   
 10505b0:	lea    rcx,[rdx+0x68]
 10505b7:	jmp    0x1036350
 10505bc:	int3   
 10505bd:	int3   
 10505be:	int3   
 10505bf:	int3   
 10505c0:	lea    rcx,[rdx+0xb0]
 10505c7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb14da]        # 0x1001aa8
 10505ce:	int3   
 10505cf:	int3   
 10505d0:	lea    rcx,[rdx+0x70]
 10505d7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb14ca]        # 0x1001aa8
 10505de:	int3   
 10505df:	int3   
 10505e0:	lea    rcx,[rdx+0x88]
 10505e7:	jmp    0x1036c30
 10505ec:	int3   
 10505ed:	int3   
 10505ee:	int3   
 10505ef:	int3   
 10505f0:	lea    rcx,[rdx+0x60]
 10505f7:	jmp    0x1036350
 10505fc:	int3   
 10505fd:	int3   
 10505fe:	int3   
 10505ff:	int3   
 1050600:	lea    rcx,[rdx+0x80]
 1050607:	jmp    0x1036c30
 105060c:	int3   
 105060d:	int3   
 105060e:	int3   
 105060f:	int3   
 1050610:	lea    rcx,[rdx+0xc0]
 1050617:	jmp    0x1036c30
 105061c:	int3   
 105061d:	int3   
 105061e:	int3   
 105061f:	int3   
 1050620:	lea    rcx,[rdx+0xa0]
 1050627:	jmp    0x1036c30
 105062c:	int3   
 105062d:	int3   
 105062e:	int3   
 105062f:	int3   
 1050630:	lea    rcx,[rdx+0xb8]
 1050637:	jmp    0x1036c30
 105063c:	int3   
 105063d:	int3   
 105063e:	int3   
 105063f:	int3   
 1050640:	lea    rcx,[rdx+0x58]
 1050647:	rex.W jmp QWORD PTR [rip+0xfffffffffffb145a]        # 0x1001aa8
 105064e:	int3   
 105064f:	int3   
 1050650:	lea    rcx,[rdx+0x98]
 1050657:	rex.W jmp QWORD PTR [rip+0xfffffffffffb144a]        # 0x1001aa8
 105065e:	int3   
 105065f:	int3   
 1050660:	int3   
 1050661:	int3   
 1050662:	int3   
 1050663:	int3   
 1050664:	int3   
 1050665:	int3   
 1050666:	int3   
 1050667:	int3   
 1050668:	int3   
 1050669:	int3   
 105066a:	int3   
 105066b:	int3   
 105066c:	int3   
 105066d:	int3   
 105066e:	int3   
 105066f:	int3   
 1050670:	mov    rcx,QWORD PTR [rdx+0x40]
 1050677:	jmp    0x103f95a
 105067c:	int3   
 105067d:	int3   
 105067e:	int3   
 105067f:	int3   
 1050680:	int3   
 1050681:	int3   
 1050682:	int3   
 1050683:	int3   
 1050684:	int3   
 1050685:	int3   
 1050686:	int3   
 1050687:	int3   
 1050688:	int3   
 1050689:	int3   
 105068a:	int3   
 105068b:	int3   
 105068c:	int3   
 105068d:	int3   
 105068e:	int3   
 105068f:	int3   
 1050690:	mov    rcx,QWORD PTR [rdx+0x50]
 1050697:	jmp    0x103f95a
 105069c:	int3   
 105069d:	int3   
 105069e:	int3   
 105069f:	int3   
 10506a0:	int3   
 10506a1:	int3   
 10506a2:	int3   
 10506a3:	int3   
 10506a4:	int3   
 10506a5:	int3   
 10506a6:	int3   
 10506a7:	int3   
 10506a8:	int3   
 10506a9:	int3   
 10506aa:	int3   
 10506ab:	int3   
 10506ac:	int3   
 10506ad:	int3   
 10506ae:	int3   
 10506af:	int3   
 10506b0:	mov    rcx,QWORD PTR [rdx+0x40]
 10506b7:	jmp    0x100e5d0
 10506bc:	int3   
 10506bd:	int3   
 10506be:	int3   
 10506bf:	int3   
 10506c0:	mov    rcx,QWORD PTR [rdx+0x40]
 10506c7:	add    rcx,0x8
 10506cb:	rex.W jmp QWORD PTR [rip+0xfffffffffffb13d6]        # 0x1001aa8
 10506d2:	int3   
 10506d3:	int3   
 10506d4:	int3   
 10506d5:	int3   
 10506d6:	int3   
 10506d7:	int3   
 10506d8:	int3   
 10506d9:	int3   
 10506da:	int3   
 10506db:	int3   
 10506dc:	int3   
 10506dd:	int3   
 10506de:	int3   
 10506df:	int3   
 10506e0:	mov    rcx,QWORD PTR [rdx+0x40]
 10506e7:	add    rcx,0x10
 10506eb:	jmp    0x103b0f0
 10506f0:	int3   
 10506f1:	int3   
 10506f2:	int3   
 10506f3:	int3   
 10506f4:	int3   
 10506f5:	int3   
 10506f6:	int3   
 10506f7:	int3   
 10506f8:	int3   
 10506f9:	int3   
 10506fa:	int3   
 10506fb:	int3   
 10506fc:	int3   
 10506fd:	int3   
 10506fe:	int3   
 10506ff:	int3   
 1050700:	mov    rcx,QWORD PTR [rdx+0xf0]
 1050707:	rex.W jmp QWORD PTR [rip+0xfffffffffffb139a]        # 0x1001aa8
 105070e:	int3   
 105070f:	int3   
 1050710:	mov    rcx,QWORD PTR [rdx+0xe8]
 1050717:	rex.W jmp QWORD PTR [rip+0xfffffffffffb138a]        # 0x1001aa8
 105071e:	int3   
 105071f:	int3   
 1050720:	lea    rcx,[rdx+0x58]
 1050727:	jmp    0x103d330
 105072c:	int3   
 105072d:	int3   
 105072e:	int3   
 105072f:	int3   
 1050730:	lea    rcx,[rdx+0x20]
 1050737:	jmp    0x103d330
 105073c:	int3   
 105073d:	int3   
 105073e:	int3   
 105073f:	int3   
 1050740:	int3   
 1050741:	int3   
 1050742:	int3   
 1050743:	int3   
 1050744:	int3   
 1050745:	int3   
 1050746:	int3   
 1050747:	int3   
 1050748:	int3   
 1050749:	int3   
 105074a:	int3   
 105074b:	int3   
 105074c:	int3   
 105074d:	int3   
 105074e:	int3   
 105074f:	int3   
 1050750:	lea    rcx,[rdx+0x108]
 1050757:	rex.W jmp QWORD PTR [rip+0xfffffffffffb134a]        # 0x1001aa8
 105075e:	int3   
 105075f:	int3   
 1050760:	lea    rcx,[rdx+0x50]
 1050767:	jmp    0x1036bd0
 105076c:	int3   
 105076d:	int3   
 105076e:	int3   
 105076f:	int3   
 1050770:	lea    rcx,[rdx+0x58]
 1050777:	jmp    0x1036bd0
 105077c:	int3   
 105077d:	int3   
 105077e:	int3   
 105077f:	int3   
 1050780:	rex push rbp
 1050782:	sub    rsp,0x20
 1050786:	mov    rbp,rdx
 1050789:	mov    eax,DWORD PTR [rbp+0x48]
 105078c:	and    eax,0x1
 105078f:	test   eax,eax
 1050791:	je     0x10507a4
 1050793:	and    DWORD PTR [rbp+0x48],0xfffffffe
 1050797:	lea    rcx,[rbp+0x100]
 105079e:	call   QWORD PTR [rip+0xfffffffffffb1304]        # 0x1001aa8
 10507a4:	add    rsp,0x20
 10507a8:	pop    rbp
 10507a9:	ret    
 10507aa:	int3   
 10507ab:	int3   
 10507ac:	int3   
 10507ad:	int3   
 10507ae:	int3   
 10507af:	int3   
 10507b0:	rex push rbp
 10507b2:	sub    rsp,0x20
 10507b6:	mov    rbp,rdx
 10507b9:	mov    eax,DWORD PTR [rbp+0x48]
 10507bc:	and    eax,0x2
 10507bf:	test   eax,eax
 10507c1:	je     0x10507d4
 10507c3:	and    DWORD PTR [rbp+0x48],0xfffffffd
 10507c7:	lea    rcx,[rbp+0xb8]
 10507ce:	call   QWORD PTR [rip+0xfffffffffffb12d4]        # 0x1001aa8
 10507d4:	add    rsp,0x20
 10507d8:	pop    rbp
 10507d9:	ret    
 10507da:	int3   
 10507db:	int3   
 10507dc:	int3   
 10507dd:	int3   
 10507de:	int3   
 10507df:	int3   
 10507e0:	lea    rcx,[rdx+0xd0]
 10507e7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb12ba]        # 0x1001aa8
 10507ee:	int3   
 10507ef:	int3   
 10507f0:	mov    rcx,QWORD PTR [rdx+0x80]
 10507f7:	jmp    0x103f95a
 10507fc:	int3   
 10507fd:	int3   
 10507fe:	int3   
 10507ff:	int3   
 1050800:	mov    rcx,QWORD PTR [rdx+0x88]
 1050807:	jmp    0x1036350
 105080c:	int3   
 105080d:	int3   
 105080e:	int3   
 105080f:	int3   
 1050810:	lea    rcx,[rdx+0x40]
 1050817:	jmp    0x1036bf0
 105081c:	int3   
 105081d:	int3   
 105081e:	int3   
 105081f:	int3   
 1050820:	lea    rcx,[rdx+0xf8]
 1050827:	rex.W jmp QWORD PTR [rip+0xfffffffffffb127a]        # 0x1001aa8
 105082e:	int3   
 105082f:	int3   
 1050830:	lea    rcx,[rdx+0x60]
 1050837:	rex.W jmp QWORD PTR [rip+0xfffffffffffb126a]        # 0x1001aa8
 105083e:	int3   
 105083f:	int3   
 1050840:	lea    rcx,[rdx+0x70]
 1050847:	rex.W jmp QWORD PTR [rip+0xfffffffffffb125a]        # 0x1001aa8
 105084e:	int3   
 105084f:	int3   
 1050850:	lea    rcx,[rdx+0x90]
 1050857:	rex.W jmp QWORD PTR [rip+0xfffffffffffb124a]        # 0x1001aa8
 105085e:	int3   
 105085f:	int3   
 1050860:	lea    rcx,[rdx+0x128]
 1050867:	jmp    0x1036bd0
 105086c:	int3   
 105086d:	int3   
 105086e:	int3   
 105086f:	int3   
 1050870:	lea    rcx,[rdx+0xe0]
 1050877:	jmp    0x1036bd0
 105087c:	int3   
 105087d:	int3   
 105087e:	int3   
 105087f:	int3   
 1050880:	mov    rcx,QWORD PTR [rdx+0x120]
 1050887:	jmp    0x103f95a
 105088c:	int3   
 105088d:	int3   
 105088e:	int3   
 105088f:	int3   
 1050890:	mov    rcx,QWORD PTR [rdx+0x88]
 1050897:	jmp    0x1036350
 105089c:	int3   
 105089d:	int3   
 105089e:	int3   
 105089f:	int3   
 10508a0:	lea    rcx,[rdx+0xf0]
 10508a7:	jmp    0x1036c10
 10508ac:	int3   
 10508ad:	int3   
 10508ae:	int3   
 10508af:	int3   
 10508b0:	lea    rcx,[rdx+0x110]
 10508b7:	jmp    0x1036bd0
 10508bc:	int3   
 10508bd:	int3   
 10508be:	int3   
 10508bf:	int3   
 10508c0:	lea    rcx,[rdx+0xa0]
 10508c7:	jmp    0x1036350
 10508cc:	int3   
 10508cd:	int3   
 10508ce:	int3   
 10508cf:	int3   
 10508d0:	mov    rcx,QWORD PTR [rdx+0x120]
 10508d7:	jmp    0x1036350
 10508dc:	int3   
 10508dd:	int3   
 10508de:	int3   
 10508df:	int3   
 10508e0:	lea    rcx,[rdx+0xc8]
 10508e7:	jmp    0x1036c10
 10508ec:	int3   
 10508ed:	int3   
 10508ee:	int3   
 10508ef:	int3   
 10508f0:	lea    rcx,[rdx+0xc0]
 10508f7:	jmp    0x1036bd0
 10508fc:	int3   
 10508fd:	int3   
 10508fe:	int3   
 10508ff:	int3   
 1050900:	lea    rcx,[rdx+0xb0]
 1050907:	jmp    0x1036350
 105090c:	int3   
 105090d:	int3   
 105090e:	int3   
 105090f:	int3   
 1050910:	lea    rcx,[rdx+0xd8]
 1050917:	rex.W jmp QWORD PTR [rip+0xfffffffffffb118a]        # 0x1001aa8
 105091e:	int3   
 105091f:	int3   
 1050920:	lea    rcx,[rdx+0x78]
 1050927:	rex.W jmp QWORD PTR [rip+0xfffffffffffb117a]        # 0x1001aa8
 105092e:	int3   
 105092f:	int3   
 1050930:	lea    rcx,[rdx+0xe8]
 1050937:	rex.W jmp QWORD PTR [rip+0xfffffffffffb116a]        # 0x1001aa8
 105093e:	int3   
 105093f:	int3   
 1050940:	int3   
 1050941:	int3   
 1050942:	int3   
 1050943:	int3   
 1050944:	int3   
 1050945:	int3   
 1050946:	int3   
 1050947:	int3   
 1050948:	int3   
 1050949:	int3   
 105094a:	int3   
 105094b:	int3   
 105094c:	int3   
 105094d:	int3   
 105094e:	int3   
 105094f:	int3   
 1050950:	lea    rcx,[rdx+0x30]
 1050957:	jmp    0x1036bf0
 105095c:	int3   
 105095d:	int3   
 105095e:	int3   
 105095f:	int3   
 1050960:	lea    rcx,[rdx+0x38]
 1050967:	jmp    0x1036bd0
 105096c:	int3   
 105096d:	int3   
 105096e:	int3   
 105096f:	int3   
 1050970:	lea    rcx,[rdx+0x20]
 1050977:	rex.W jmp QWORD PTR [rip+0xfffffffffffb112a]        # 0x1001aa8
 105097e:	int3   
 105097f:	int3   
 1050980:	mov    rcx,QWORD PTR [rdx+0x110]
 1050987:	jmp    0x1036350
 105098c:	int3   
 105098d:	int3   
 105098e:	int3   
 105098f:	int3   
 1050990:	lea    rcx,[rdx+0xa0]
 1050997:	jmp    0x1036bf0
 105099c:	int3   
 105099d:	int3   
 105099e:	int3   
 105099f:	int3   
 10509a0:	rex push rbp
 10509a2:	sub    rsp,0x20
 10509a6:	mov    rbp,rdx
 10509a9:	mov    eax,DWORD PTR [rbp+0x28]
 10509ac:	and    eax,0x1
 10509af:	test   eax,eax
 10509b1:	je     0x10509c4
 10509b3:	and    DWORD PTR [rbp+0x28],0xfffffffe
 10509b7:	mov    rcx,QWORD PTR [rbp+0x118]
 10509be:	call   QWORD PTR [rip+0xfffffffffffb10e4]        # 0x1001aa8
 10509c4:	add    rsp,0x20
 10509c8:	pop    rbp
 10509c9:	ret    
 10509ca:	int3   
 10509cb:	int3   
 10509cc:	int3   
 10509cd:	int3   
 10509ce:	int3   
 10509cf:	int3   
 10509d0:	lea    rcx,[rdx+0x88]
 10509d7:	jmp    0x1036bd0
 10509dc:	int3   
 10509dd:	int3   
 10509de:	int3   
 10509df:	int3   
 10509e0:	lea    rcx,[rdx+0x40]
 10509e7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb10ba]        # 0x1001aa8
 10509ee:	int3   
 10509ef:	int3   
 10509f0:	mov    rcx,QWORD PTR [rdx+0xa8]
 10509f7:	jmp    0x103f95a
 10509fc:	int3   
 10509fd:	int3   
 10509fe:	int3   
 10509ff:	int3   
 1050a00:	mov    rcx,QWORD PTR [rdx+0x78]
 1050a07:	jmp    0x1036350
 1050a0c:	int3   
 1050a0d:	int3   
 1050a0e:	int3   
 1050a0f:	int3   
 1050a10:	lea    rcx,[rdx+0x80]
 1050a17:	jmp    0x1036c10
 1050a1c:	int3   
 1050a1d:	int3   
 1050a1e:	int3   
 1050a1f:	int3   
 1050a20:	lea    rcx,[rdx+0x70]
 1050a27:	jmp    0x1036bd0
 1050a2c:	int3   
 1050a2d:	int3   
 1050a2e:	int3   
 1050a2f:	int3   
 1050a30:	lea    rcx,[rdx+0x60]
 1050a37:	jmp    0x1036350
 1050a3c:	int3   
 1050a3d:	int3   
 1050a3e:	int3   
 1050a3f:	int3   
 1050a40:	mov    rcx,QWORD PTR [rdx+0xa8]
 1050a47:	jmp    0x103f95a
 1050a4c:	int3   
 1050a4d:	int3   
 1050a4e:	int3   
 1050a4f:	int3   
 1050a50:	mov    rcx,QWORD PTR [rdx+0xc0]
 1050a57:	jmp    0x1036350
 1050a5c:	int3   
 1050a5d:	int3   
 1050a5e:	int3   
 1050a5f:	int3   
 1050a60:	lea    rcx,[rdx+0x98]
 1050a67:	jmp    0x1036c10
 1050a6c:	int3   
 1050a6d:	int3   
 1050a6e:	int3   
 1050a6f:	int3   
 1050a70:	lea    rcx,[rdx+0xb0]
 1050a77:	jmp    0x1036bd0
 1050a7c:	int3   
 1050a7d:	int3   
 1050a7e:	int3   
 1050a7f:	int3   
 1050a80:	lea    rcx,[rdx+0x50]
 1050a87:	jmp    0x1036350
 1050a8c:	int3   
 1050a8d:	int3   
 1050a8e:	int3   
 1050a8f:	int3   
 1050a90:	lea    rcx,[rdx+0x90]
 1050a97:	rex.W jmp QWORD PTR [rip+0xfffffffffffb100a]        # 0x1001aa8
 1050a9e:	int3   
 1050a9f:	int3   
 1050aa0:	int3   
 1050aa1:	int3   
 1050aa2:	int3   
 1050aa3:	int3   
 1050aa4:	int3   
 1050aa5:	int3   
 1050aa6:	int3   
 1050aa7:	int3   
 1050aa8:	int3   
 1050aa9:	int3   
 1050aaa:	int3   
 1050aab:	int3   
 1050aac:	int3   
 1050aad:	int3   
 1050aae:	int3   
 1050aaf:	int3   
 1050ab0:	lea    rcx,[rdx+0x58]
 1050ab7:	jmp    0x1036bd0
 1050abc:	int3   
 1050abd:	int3   
 1050abe:	int3   
 1050abf:	int3   
 1050ac0:	mov    rcx,QWORD PTR [rdx+0x90]
 1050ac7:	jmp    0x103f95a
 1050acc:	int3   
 1050acd:	int3   
 1050ace:	int3   
 1050acf:	int3   
 1050ad0:	mov    rcx,QWORD PTR [rdx+0x80]
 1050ad7:	jmp    0x1036350
 1050adc:	int3   
 1050add:	int3   
 1050ade:	int3   
 1050adf:	int3   
 1050ae0:	lea    rcx,[rdx+0x48]
 1050ae7:	jmp    0x1036bf0
 1050aec:	int3   
 1050aed:	int3   
 1050aee:	int3   
 1050aef:	int3   
 1050af0:	mov    rcx,QWORD PTR [rdx+0x90]
 1050af7:	jmp    0x103f95a
 1050afc:	int3   
 1050afd:	int3   
 1050afe:	int3   
 1050aff:	int3   
 1050b00:	mov    rcx,QWORD PTR [rdx+0x80]
 1050b07:	jmp    0x1036350
 1050b0c:	int3   
 1050b0d:	int3   
 1050b0e:	int3   
 1050b0f:	int3   
 1050b10:	lea    rcx,[rdx+0x68]
 1050b17:	jmp    0x1036bf0
 1050b1c:	int3   
 1050b1d:	int3   
 1050b1e:	int3   
 1050b1f:	int3   
 1050b20:	lea    rcx,[rdx+0x40]
 1050b27:	rex.W jmp QWORD PTR [rip+0xfffffffffffb0f7a]        # 0x1001aa8
 1050b2e:	int3   
 1050b2f:	int3   
 1050b30:	lea    rcx,[rdx+0x50]
 1050b37:	rex.W jmp QWORD PTR [rip+0xfffffffffffb0f6a]        # 0x1001aa8
 1050b3e:	int3   
 1050b3f:	int3   
 1050b40:	lea    rcx,[rdx+0xe8]
 1050b47:	jmp    0x1036bd0
 1050b4c:	int3   
 1050b4d:	int3   
 1050b4e:	int3   
 1050b4f:	int3   
 1050b50:	lea    rcx,[rdx+0xa8]
 1050b57:	jmp    0x1036350
 1050b5c:	int3   
 1050b5d:	int3   
 1050b5e:	int3   
 1050b5f:	int3   
 1050b60:	lea    rcx,[rdx+0xe0]
 1050b67:	rex.W jmp QWORD PTR [rip+0xfffffffffffb0f3a]        # 0x1001aa8
 1050b6e:	int3   
 1050b6f:	int3   
 1050b70:	lea    rcx,[rdx+0xc8]
 1050b77:	jmp    0x1036bd0
 1050b7c:	int3   
 1050b7d:	int3   
 1050b7e:	int3   
 1050b7f:	int3   
 1050b80:	lea    rcx,[rdx+0x98]
 1050b87:	jmp    0x1036350
 1050b8c:	int3   
 1050b8d:	int3   
 1050b8e:	int3   
 1050b8f:	int3   
 1050b90:	lea    rcx,[rdx+0xd8]
 1050b97:	rex.W jmp QWORD PTR [rip+0xfffffffffffb0f0a]        # 0x1001aa8
 1050b9e:	int3   
 1050b9f:	int3   
 1050ba0:	mov    rcx,QWORD PTR [rdx+0x70]
 1050ba7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb0efa]        # 0x1001aa8
 1050bae:	int3   
 1050baf:	int3   
 1050bb0:	lea    rcx,[rdx+0x78]
 1050bb7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb0eea]        # 0x1001aa8
 1050bbe:	int3   
 1050bbf:	int3   
 1050bc0:	lea    rcx,[rdx+0x80]
 1050bc7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb0eda]        # 0x1001aa8
 1050bce:	int3   
 1050bcf:	int3   
 1050bd0:	mov    rcx,QWORD PTR [rdx+0x70]
 1050bd7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb0eca]        # 0x1001aa8
 1050bde:	int3   
 1050bdf:	int3   
 1050be0:	mov    rcx,QWORD PTR [rdx+0x88]
 1050be7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb0eba]        # 0x1001aa8
 1050bee:	int3   
 1050bef:	int3   
 1050bf0:	int3   
 1050bf1:	int3   
 1050bf2:	int3   
 1050bf3:	int3   
 1050bf4:	int3   
 1050bf5:	int3   
 1050bf6:	int3   
 1050bf7:	int3   
 1050bf8:	int3   
 1050bf9:	int3   
 1050bfa:	int3   
 1050bfb:	int3   
 1050bfc:	int3   
 1050bfd:	int3   
 1050bfe:	int3   
 1050bff:	int3   
 1050c00:	mov    rcx,QWORD PTR [rdx+0x108]
 1050c07:	rex.W jmp QWORD PTR [rip+0xfffffffffffb0e9a]        # 0x1001aa8
 1050c0e:	int3   
 1050c0f:	int3   
 1050c10:	mov    rcx,QWORD PTR [rdx+0x100]
 1050c17:	rex.W jmp QWORD PTR [rip+0xfffffffffffb0e8a]        # 0x1001aa8
 1050c1e:	int3   
 1050c1f:	int3   
 1050c20:	lea    rcx,[rdx+0x60]
 1050c27:	jmp    0x100c4f0
 1050c2c:	int3   
 1050c2d:	int3   
 1050c2e:	int3   
 1050c2f:	int3   
 1050c30:	mov    rcx,QWORD PTR [rdx+0x50]
 1050c37:	rex.W jmp QWORD PTR [rip+0xfffffffffffb0e6a]        # 0x1001aa8
 1050c3e:	int3   
 1050c3f:	int3   
 1050c40:	mov    rcx,QWORD PTR [rdx+0x50]
 1050c47:	rex.W jmp QWORD PTR [rip+0xfffffffffffb0e5a]        # 0x1001aa8
 1050c4e:	int3   
 1050c4f:	int3   
 1050c50:	mov    rcx,QWORD PTR [rdx+0x58]
 1050c57:	rex.W jmp QWORD PTR [rip+0xfffffffffffb0e4a]        # 0x1001aa8
 1050c5e:	int3   
 1050c5f:	int3   
 1050c60:	lea    rcx,[rdx+0x48]
 1050c67:	rex.W jmp QWORD PTR [rip+0xfffffffffffb0e3a]        # 0x1001aa8
 1050c6e:	int3   
 1050c6f:	int3   
 1050c70:	lea    rcx,[rdx+0x40]
 1050c77:	rex.W jmp QWORD PTR [rip+0xfffffffffffb0e2a]        # 0x1001aa8
 1050c7e:	int3   
 1050c7f:	int3   
 1050c80:	mov    rcx,QWORD PTR [rdx+0x58]
 1050c87:	rex.W jmp QWORD PTR [rip+0xfffffffffffb0e1a]        # 0x1001aa8
 1050c8e:	int3   
 1050c8f:	int3   
 1050c90:	mov    rcx,QWORD PTR [rdx+0x50]
 1050c97:	rex.W jmp QWORD PTR [rip+0xfffffffffffb0e0a]        # 0x1001aa8
 1050c9e:	int3   
 1050c9f:	int3   
 1050ca0:	lea    rcx,[rdx+0x48]
 1050ca7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb0dfa]        # 0x1001aa8
 1050cae:	int3   
 1050caf:	int3   
 1050cb0:	mov    rcx,QWORD PTR [rdx+0x58]
 1050cb7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb0dea]        # 0x1001aa8
 1050cbe:	int3   
 1050cbf:	int3   
 1050cc0:	mov    rcx,QWORD PTR [rdx+0x98]
 1050cc7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb0dda]        # 0x1001aa8
 1050cce:	int3   
 1050ccf:	int3   
 1050cd0:	mov    rcx,QWORD PTR [rdx+0x98]
 1050cd7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb0dca]        # 0x1001aa8
 1050cde:	int3   
 1050cdf:	int3   
 1050ce0:	mov    rcx,QWORD PTR [rdx+0x58]
 1050ce7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb0dba]        # 0x1001aa8
 1050cee:	int3   
 1050cef:	int3   
 1050cf0:	mov    rcx,QWORD PTR [rdx+0x98]
 1050cf7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb0daa]        # 0x1001aa8
 1050cfe:	int3   
 1050cff:	int3   
 1050d00:	mov    rcx,QWORD PTR [rdx+0x58]
 1050d07:	rex.W jmp QWORD PTR [rip+0xfffffffffffb0d9a]        # 0x1001aa8
 1050d0e:	int3   
 1050d0f:	int3   
 1050d10:	lea    rcx,[rdx+0x40]
 1050d17:	rex.W jmp QWORD PTR [rip+0xfffffffffffb0d8a]        # 0x1001aa8
 1050d1e:	int3   
 1050d1f:	int3   
 1050d20:	lea    rcx,[rdx+0x50]
 1050d27:	rex.W jmp QWORD PTR [rip+0xfffffffffffb0d7a]        # 0x1001aa8
 1050d2e:	int3   
 1050d2f:	int3   
 1050d30:	lea    rcx,[rdx+0x40]
 1050d37:	rex.W jmp QWORD PTR [rip+0xfffffffffffb0d6a]        # 0x1001aa8
 1050d3e:	int3   
 1050d3f:	int3   
 1050d40:	lea    rcx,[rdx+0x50]
 1050d47:	rex.W jmp QWORD PTR [rip+0xfffffffffffb0d5a]        # 0x1001aa8
 1050d4e:	int3   
 1050d4f:	int3   
 1050d50:	int3   
 1050d51:	int3   
 1050d52:	int3   
 1050d53:	int3   
 1050d54:	int3   
 1050d55:	int3   
 1050d56:	int3   
 1050d57:	int3   
 1050d58:	int3   
 1050d59:	int3   
 1050d5a:	int3   
 1050d5b:	int3   
 1050d5c:	int3   
 1050d5d:	int3   
 1050d5e:	int3   
 1050d5f:	int3   
 1050d60:	lea    rcx,[rdx+0x58]
 1050d67:	jmp    0x100c4f0
 1050d6c:	int3   
 1050d6d:	int3   
 1050d6e:	int3   
 1050d6f:	int3   
 1050d70:	lea    rcx,[rdx+0x38]
 1050d77:	jmp    0x1036bd0
 1050d7c:	int3   
 1050d7d:	int3   
 1050d7e:	int3   
 1050d7f:	int3   
 1050d80:	mov    rcx,QWORD PTR [rdx+0xc8]
 1050d87:	jmp    0x103f95a
 1050d8c:	int3   
 1050d8d:	int3   
 1050d8e:	int3   
 1050d8f:	int3   
 1050d90:	mov    rcx,QWORD PTR [rdx+0x168]
 1050d97:	jmp    0x1036350
 1050d9c:	int3   
 1050d9d:	int3   
 1050d9e:	int3   
 1050d9f:	int3   
 1050da0:	lea    rcx,[rdx+0x40]
 1050da7:	jmp    0x1036bf0
 1050dac:	int3   
 1050dad:	int3   
 1050dae:	int3   
 1050daf:	int3   
 1050db0:	lea    rcx,[rdx+0xd0]
 1050db7:	jmp    0x1036bd0
 1050dbc:	int3   
 1050dbd:	int3   
 1050dbe:	int3   
 1050dbf:	int3   
 1050dc0:	lea    rcx,[rdx+0xc0]
 1050dc7:	jmp    0x1036350
 1050dcc:	int3   
 1050dcd:	int3   
 1050dce:	int3   
 1050dcf:	int3   
 1050dd0:	lea    rcx,[rdx+0xa8]
 1050dd7:	jmp    0x1036350
 1050ddc:	int3   
 1050ddd:	int3   
 1050dde:	int3   
 1050ddf:	int3   
 1050de0:	lea    rcx,[rdx+0x90]
 1050de7:	jmp    0x1036350
 1050dec:	int3   
 1050ded:	int3   
 1050dee:	int3   
 1050def:	int3   
 1050df0:	lea    rcx,[rdx+0x50]
 1050df7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb0caa]        # 0x1001aa8
 1050dfe:	int3   
 1050dff:	int3   
 1050e00:	lea    rcx,[rdx+0xc8]
 1050e07:	rex.W jmp QWORD PTR [rip+0xfffffffffffb0c9a]        # 0x1001aa8
 1050e0e:	int3   
 1050e0f:	int3   
 1050e10:	lea    rcx,[rdx+0xd8]
 1050e17:	jmp    0x1012ae0
 1050e1c:	int3   
 1050e1d:	int3   
 1050e1e:	int3   
 1050e1f:	int3   
 1050e20:	rex push rbp
 1050e22:	sub    rsp,0x20
 1050e26:	mov    rbp,rdx
 1050e29:	mov    eax,DWORD PTR [rbp+0x30]
 1050e2c:	and    eax,0x1
 1050e2f:	test   eax,eax
 1050e31:	je     0x1050e43
 1050e33:	and    DWORD PTR [rbp+0x30],0xfffffffe
 1050e37:	lea    rcx,[rbp+0xb0]
 1050e3e:	call   0x1036350
 1050e43:	add    rsp,0x20
 1050e47:	pop    rbp
 1050e48:	ret    
 1050e49:	int3   
 1050e4a:	int3   
 1050e4b:	int3   
 1050e4c:	int3   
 1050e4d:	int3   
 1050e4e:	int3   
 1050e4f:	int3   
 1050e50:	lea    rcx,[rdx+0xa0]
 1050e57:	jmp    0x1036350
 1050e5c:	int3   
 1050e5d:	int3   
 1050e5e:	int3   
 1050e5f:	int3   
 1050e60:	lea    rcx,[rdx+0x98]
 1050e67:	jmp    0x1036350
 1050e6c:	int3   
 1050e6d:	int3   
 1050e6e:	int3   
 1050e6f:	int3   
 1050e70:	int3   
 1050e71:	int3   
 1050e72:	int3   
 1050e73:	int3   
 1050e74:	int3   
 1050e75:	int3   
 1050e76:	int3   
 1050e77:	int3   
 1050e78:	int3   
 1050e79:	int3   
 1050e7a:	int3   
 1050e7b:	int3   
 1050e7c:	int3   
 1050e7d:	int3   
 1050e7e:	int3   
 1050e7f:	int3   
 1050e80:	rex push rbp
 1050e82:	sub    rsp,0x20
 1050e86:	mov    rbp,rdx
 1050e89:	mov    eax,DWORD PTR [rbp+0x60]
 1050e8c:	and    eax,0x1
 1050e8f:	test   eax,eax
 1050e91:	je     0x1050ea4
 1050e93:	and    DWORD PTR [rbp+0x60],0xfffffffe
 1050e97:	mov    rcx,QWORD PTR [rbp+0xa0]
 1050e9e:	call   QWORD PTR [rip+0xfffffffffffb0c04]        # 0x1001aa8
 1050ea4:	add    rsp,0x20
 1050ea8:	pop    rbp
 1050ea9:	ret    
 1050eaa:	int3   
 1050eab:	int3   
 1050eac:	int3   
 1050ead:	int3   
 1050eae:	int3   
 1050eaf:	int3   
 1050eb0:	lea    rcx,[rdx+0x40]
 1050eb7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb0bea]        # 0x1001aa8
 1050ebe:	int3   
 1050ebf:	int3   
 1050ec0:	lea    rcx,[rdx+0x68]
 1050ec7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb0bda]        # 0x1001aa8
 1050ece:	int3   
 1050ecf:	int3   
 1050ed0:	mov    rcx,QWORD PTR [rdx+0x88]
 1050ed7:	jmp    0x103f95a
 1050edc:	int3   
 1050edd:	int3   
 1050ede:	int3   
 1050edf:	int3   
 1050ee0:	mov    rcx,QWORD PTR [rdx+0x78]
 1050ee7:	jmp    0x1036350
 1050eec:	int3   
 1050eed:	int3   
 1050eee:	int3   
 1050eef:	int3   
 1050ef0:	lea    rcx,[rdx+0x48]
 1050ef7:	jmp    0x1036bd0
 1050efc:	int3   
 1050efd:	int3   
 1050efe:	int3   
 1050eff:	int3   
 1050f00:	lea    rcx,[rdx+0x58]
 1050f07:	rex.W jmp QWORD PTR [rip+0xfffffffffffb0b9a]        # 0x1001aa8
 1050f0e:	int3   
 1050f0f:	int3   
 1050f10:	lea    rcx,[rdx+0x78]
 1050f17:	jmp    0x1036c30
 1050f1c:	int3   
 1050f1d:	int3   
 1050f1e:	int3   
 1050f1f:	int3   
 1050f20:	lea    rcx,[rdx+0x80]
 1050f27:	jmp    0x1036350
 1050f2c:	int3   
 1050f2d:	int3   
 1050f2e:	int3   
 1050f2f:	int3   
 1050f30:	lea    rcx,[rdx+0x88]
 1050f37:	rex.W jmp QWORD PTR [rip+0xfffffffffffb0b6a]        # 0x1001aa8
 1050f3e:	int3   
 1050f3f:	int3   
 1050f40:	lea    rcx,[rdx+0x90]
 1050f47:	jmp    0x1036350
 1050f4c:	int3   
 1050f4d:	int3   
 1050f4e:	int3   
 1050f4f:	int3   
 1050f50:	int3   
 1050f51:	int3   
 1050f52:	int3   
 1050f53:	int3   
 1050f54:	int3   
 1050f55:	int3   
 1050f56:	int3   
 1050f57:	int3   
 1050f58:	int3   
 1050f59:	int3   
 1050f5a:	int3   
 1050f5b:	int3   
 1050f5c:	int3   
 1050f5d:	int3   
 1050f5e:	int3   
 1050f5f:	int3   
 1050f60:	rex push rbp
 1050f62:	sub    rsp,0x20
 1050f66:	mov    rbp,rdx
 1050f69:	mov    eax,DWORD PTR [rbp+0x20]
 1050f6c:	and    eax,0x1
 1050f6f:	test   eax,eax
 1050f71:	je     0x1050f80
 1050f73:	and    DWORD PTR [rbp+0x20],0xfffffffe
 1050f77:	mov    rcx,QWORD PTR [rbp+0x48]
 1050f7b:	call   0x1036c10
 1050f80:	add    rsp,0x20
 1050f84:	pop    rbp
 1050f85:	ret    
 1050f86:	int3   
 1050f87:	int3   
 1050f88:	int3   
 1050f89:	int3   
 1050f8a:	int3   
 1050f8b:	int3   
 1050f8c:	int3   
 1050f8d:	int3   
 1050f8e:	int3   
 1050f8f:	int3   
 1050f90:	rex push rbp
 1050f92:	sub    rsp,0x20
 1050f96:	mov    rbp,rdx
 1050f99:	mov    eax,DWORD PTR [rbp+0x20]
 1050f9c:	and    eax,0x1
 1050f9f:	test   eax,eax
 1050fa1:	je     0x1050fb0
 1050fa3:	and    DWORD PTR [rbp+0x20],0xfffffffe
 1050fa7:	mov    rcx,QWORD PTR [rbp+0x48]
 1050fab:	call   0x1036bd0
 1050fb0:	add    rsp,0x20
 1050fb4:	pop    rbp
 1050fb5:	ret    
 1050fb6:	int3   
 1050fb7:	int3   
 1050fb8:	int3   
 1050fb9:	int3   
 1050fba:	int3   
 1050fbb:	int3   
 1050fbc:	int3   
 1050fbd:	int3   
 1050fbe:	int3   
 1050fbf:	int3   
 1050fc0:	rex push rbp
 1050fc2:	sub    rsp,0x20
 1050fc6:	mov    rbp,rdx
 1050fc9:	mov    eax,DWORD PTR [rbp+0x20]
 1050fcc:	and    eax,0x1
 1050fcf:	test   eax,eax
 1050fd1:	je     0x1050fe0
 1050fd3:	and    DWORD PTR [rbp+0x20],0xfffffffe
 1050fd7:	mov    rcx,QWORD PTR [rbp+0x48]
 1050fdb:	call   0x1036bd0
 1050fe0:	add    rsp,0x20
 1050fe4:	pop    rbp
 1050fe5:	ret    
 1050fe6:	int3   
 1050fe7:	int3   
 1050fe8:	int3   
 1050fe9:	int3   
 1050fea:	int3   
 1050feb:	int3   
 1050fec:	int3   
 1050fed:	int3   
 1050fee:	int3   
 1050fef:	int3   
 1050ff0:	rex push rbp
 1050ff2:	sub    rsp,0x20
 1050ff6:	mov    rbp,rdx
 1050ff9:	mov    eax,DWORD PTR [rbp+0x20]
 1050ffc:	and    eax,0x1
 1050fff:	test   eax,eax
 1051001:	je     0x1051010
 1051003:	and    DWORD PTR [rbp+0x20],0xfffffffe
 1051007:	mov    rcx,QWORD PTR [rbp+0x48]
 105100b:	call   0x1036c30
 1051010:	add    rsp,0x20
 1051014:	pop    rbp
 1051015:	ret    
 1051016:	int3   
 1051017:	int3   
 1051018:	int3   
 1051019:	int3   
 105101a:	int3   
 105101b:	int3   
 105101c:	int3   
 105101d:	int3   
 105101e:	int3   
 105101f:	int3   
 1051020:	mov    rcx,QWORD PTR [rdx+0x50]
 1051027:	jmp    0x103f95a
 105102c:	int3   
 105102d:	int3   
 105102e:	int3   
 105102f:	int3   
 1051030:	rex push rbp
 1051032:	sub    rsp,0x20
 1051036:	mov    rbp,rdx
 1051039:	mov    eax,DWORD PTR [rbp+0x20]
 105103c:	and    eax,0x1
 105103f:	test   eax,eax
 1051041:	je     0x1051050
 1051043:	and    DWORD PTR [rbp+0x20],0xfffffffe
 1051047:	mov    rcx,QWORD PTR [rbp+0x48]
 105104b:	call   0x1036350
 1051050:	add    rsp,0x20
 1051054:	pop    rbp
 1051055:	ret    
 1051056:	int3   
 1051057:	int3   
 1051058:	int3   
 1051059:	int3   
 105105a:	int3   
 105105b:	int3   
 105105c:	int3   
 105105d:	int3   
 105105e:	int3   
 105105f:	int3   
 1051060:	mov    rcx,QWORD PTR [rdx+0x50]
 1051067:	jmp    0x103f95a
 105106c:	int3   
 105106d:	int3   
 105106e:	int3   
 105106f:	int3   
 1051070:	rex push rbp
 1051072:	sub    rsp,0x20
 1051076:	mov    rbp,rdx
 1051079:	mov    eax,DWORD PTR [rbp+0x20]
 105107c:	and    eax,0x1
 105107f:	test   eax,eax
 1051081:	je     0x1051090
 1051083:	and    DWORD PTR [rbp+0x20],0xfffffffe
 1051087:	mov    rcx,QWORD PTR [rbp+0x48]
 105108b:	call   0x1036350
 1051090:	add    rsp,0x20
 1051094:	pop    rbp
 1051095:	ret    
 1051096:	int3   
 1051097:	int3   
 1051098:	int3   
 1051099:	int3   
 105109a:	int3   
 105109b:	int3   
 105109c:	int3   
 105109d:	int3   
 105109e:	int3   
 105109f:	int3   
 10510a0:	mov    rcx,QWORD PTR [rdx+0x50]
 10510a7:	jmp    0x103f95a
 10510ac:	int3   
 10510ad:	int3   
 10510ae:	int3   
 10510af:	int3   
 10510b0:	rex push rbp
 10510b2:	sub    rsp,0x20
 10510b6:	mov    rbp,rdx
 10510b9:	mov    eax,DWORD PTR [rbp+0x20]
 10510bc:	and    eax,0x1
 10510bf:	test   eax,eax
 10510c1:	je     0x10510d0
 10510c3:	and    DWORD PTR [rbp+0x20],0xfffffffe
 10510c7:	mov    rcx,QWORD PTR [rbp+0x48]
 10510cb:	call   0x1036350
 10510d0:	add    rsp,0x20
 10510d4:	pop    rbp
 10510d5:	ret    
 10510d6:	int3   
 10510d7:	int3   
 10510d8:	int3   
 10510d9:	int3   
 10510da:	int3   
 10510db:	int3   
 10510dc:	int3   
 10510dd:	int3   
 10510de:	int3   
 10510df:	int3   
 10510e0:	mov    rcx,QWORD PTR [rdx+0x48]
 10510e7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb09ba]        # 0x1001aa8
 10510ee:	int3   
 10510ef:	int3   
 10510f0:	lea    rcx,[rdx+0x50]
 10510f7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb09aa]        # 0x1001aa8
 10510fe:	int3   
 10510ff:	int3   
 1051100:	int3   
 1051101:	int3   
 1051102:	int3   
 1051103:	int3   
 1051104:	int3   
 1051105:	int3   
 1051106:	int3   
 1051107:	int3   
 1051108:	int3   
 1051109:	int3   
 105110a:	int3   
 105110b:	int3   
 105110c:	int3   
 105110d:	int3   
 105110e:	int3   
 105110f:	int3   
 1051110:	lea    rcx,[rdx+0x128]
 1051117:	rex.W jmp QWORD PTR [rip+0xfffffffffffb098a]        # 0x1001aa8
 105111e:	int3   
 105111f:	int3   
 1051120:	lea    rcx,[rdx+0x38]
 1051127:	rex.W jmp QWORD PTR [rip+0xfffffffffffb097a]        # 0x1001aa8
 105112e:	int3   
 105112f:	int3   
 1051130:	lea    rcx,[rdx+0x40]
 1051137:	rex.W jmp QWORD PTR [rip+0xfffffffffffb096a]        # 0x1001aa8
 105113e:	int3   
 105113f:	int3   
 1051140:	lea    rcx,[rdx+0x88]
 1051147:	rex.W jmp QWORD PTR [rip+0xfffffffffffb095a]        # 0x1001aa8
 105114e:	int3   
 105114f:	int3   
 1051150:	lea    rcx,[rdx+0x90]
 1051157:	rex.W jmp QWORD PTR [rip+0xfffffffffffb094a]        # 0x1001aa8
 105115e:	int3   
 105115f:	int3   
 1051160:	lea    rcx,[rdx+0x78]
 1051167:	rex.W jmp QWORD PTR [rip+0xfffffffffffb093a]        # 0x1001aa8
 105116e:	int3   
 105116f:	int3   
 1051170:	lea    rcx,[rdx+0x98]
 1051177:	rex.W jmp QWORD PTR [rip+0xfffffffffffb092a]        # 0x1001aa8
 105117e:	int3   
 105117f:	int3   
 1051180:	lea    rcx,[rdx+0xe0]
 1051187:	jmp    0x1036bd0
 105118c:	int3   
 105118d:	int3   
 105118e:	int3   
 105118f:	int3   
 1051190:	lea    rcx,[rdx+0xb0]
 1051197:	jmp    0x1036bf0
 105119c:	int3   
 105119d:	int3   
 105119e:	int3   
 105119f:	int3   
 10511a0:	lea    rcx,[rdx+0xc0]
 10511a7:	jmp    0x1036bd0
 10511ac:	int3   
 10511ad:	int3   
 10511ae:	int3   
 10511af:	int3   
 10511b0:	lea    rcx,[rdx+0xa8]
 10511b7:	jmp    0x1036bf0
 10511bc:	int3   
 10511bd:	int3   
 10511be:	int3   
 10511bf:	int3   
 10511c0:	lea    rcx,[rdx+0xb8]
 10511c7:	jmp    0x1036bf0
 10511cc:	int3   
 10511cd:	int3   
 10511ce:	int3   
 10511cf:	int3   
 10511d0:	lea    rcx,[rdx+0x320]
 10511d7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb08ca]        # 0x1001aa8
 10511de:	int3   
 10511df:	int3   
 10511e0:	lea    rcx,[rdx+0x2e0]
 10511e7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb08ba]        # 0x1001aa8
 10511ee:	int3   
 10511ef:	int3   
 10511f0:	lea    rcx,[rdx+0x310]
 10511f7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb08aa]        # 0x1001aa8
 10511fe:	int3   
 10511ff:	int3   
 1051200:	lea    rcx,[rdx+0x170]
 1051207:	rex.W jmp QWORD PTR [rip+0xfffffffffffb089a]        # 0x1001aa8
 105120e:	int3   
 105120f:	int3   
 1051210:	lea    rcx,[rdx+0x340]
 1051217:	rex.W jmp QWORD PTR [rip+0xfffffffffffb088a]        # 0x1001aa8
 105121e:	int3   
 105121f:	int3   
 1051220:	lea    rcx,[rdx+0x2e8]
 1051227:	rex.W jmp QWORD PTR [rip+0xfffffffffffb087a]        # 0x1001aa8
 105122e:	int3   
 105122f:	int3   
 1051230:	lea    rcx,[rdx+0x278]
 1051237:	rex.W jmp QWORD PTR [rip+0xfffffffffffb086a]        # 0x1001aa8
 105123e:	int3   
 105123f:	int3   
 1051240:	lea    rcx,[rdx+0x188]
 1051247:	rex.W jmp QWORD PTR [rip+0xfffffffffffb085a]        # 0x1001aa8
 105124e:	int3   
 105124f:	int3   
 1051250:	lea    rcx,[rdx+0x198]
 1051257:	rex.W jmp QWORD PTR [rip+0xfffffffffffb084a]        # 0x1001aa8
 105125e:	int3   
 105125f:	int3   
 1051260:	lea    rcx,[rdx+0x1a8]
 1051267:	rex.W jmp QWORD PTR [rip+0xfffffffffffb083a]        # 0x1001aa8
 105126e:	int3   
 105126f:	int3   
 1051270:	lea    rcx,[rdx+0x328]
 1051277:	rex.W jmp QWORD PTR [rip+0xfffffffffffb082a]        # 0x1001aa8
 105127e:	int3   
 105127f:	int3   
 1051280:	lea    rcx,[rdx+0x1b8]
 1051287:	rex.W jmp QWORD PTR [rip+0xfffffffffffb081a]        # 0x1001aa8
 105128e:	int3   
 105128f:	int3   
 1051290:	lea    rcx,[rdx+0x288]
 1051297:	rex.W jmp QWORD PTR [rip+0xfffffffffffb080a]        # 0x1001aa8
 105129e:	int3   
 105129f:	int3   
 10512a0:	lea    rcx,[rdx+0x1c8]
 10512a7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb07fa]        # 0x1001aa8
 10512ae:	int3   
 10512af:	int3   
 10512b0:	lea    rcx,[rdx+0x2f8]
 10512b7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb07ea]        # 0x1001aa8
 10512be:	int3   
 10512bf:	int3   
 10512c0:	lea    rcx,[rdx+0x1d8]
 10512c7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb07da]        # 0x1001aa8
 10512ce:	int3   
 10512cf:	int3   
 10512d0:	lea    rcx,[rdx+0x298]
 10512d7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb07ca]        # 0x1001aa8
 10512de:	int3   
 10512df:	int3   
 10512e0:	lea    rcx,[rdx+0x1e8]
 10512e7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb07ba]        # 0x1001aa8
 10512ee:	int3   
 10512ef:	int3   
 10512f0:	lea    rcx,[rdx+0x338]
 10512f7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb07aa]        # 0x1001aa8
 10512fe:	int3   
 10512ff:	int3   
 1051300:	lea    rcx,[rdx+0x2a8]
 1051307:	rex.W jmp QWORD PTR [rip+0xfffffffffffb079a]        # 0x1001aa8
 105130e:	int3   
 105130f:	int3   
 1051310:	mov    rcx,QWORD PTR [rdx+0x158]
 1051317:	jmp    0x103f95a
 105131c:	int3   
 105131d:	int3   
 105131e:	int3   
 105131f:	int3   
 1051320:	mov    rcx,QWORD PTR [rdx+0x168]
 1051327:	jmp    0x1036350
 105132c:	int3   
 105132d:	int3   
 105132e:	int3   
 105132f:	int3   
 1051330:	lea    rcx,[rdx+0x1f8]
 1051337:	jmp    0x1036bf0
 105133c:	int3   
 105133d:	int3   
 105133e:	int3   
 105133f:	int3   
 1051340:	lea    rcx,[rdx+0x308]
 1051347:	jmp    0x1036bd0
 105134c:	int3   
 105134d:	int3   
 105134e:	int3   
 105134f:	int3   
 1051350:	mov    rcx,QWORD PTR [rdx+0xf8]
 1051357:	jmp    0x103f95a
 105135c:	int3   
 105135d:	int3   
 105135e:	int3   
 105135f:	int3   
 1051360:	mov    rcx,QWORD PTR [rdx+0xd8]
 1051367:	jmp    0x1036350
 105136c:	int3   
 105136d:	int3   
 105136e:	int3   
 105136f:	int3   
 1051370:	lea    rcx,[rdx+0x2b8]
 1051377:	jmp    0x1036c10
 105137c:	int3   
 105137d:	int3   
 105137e:	int3   
 105137f:	int3   
 1051380:	lea    rcx,[rdx+0x208]
 1051387:	jmp    0x1036bd0
 105138c:	int3   
 105138d:	int3   
 105138e:	int3   
 105138f:	int3   
 1051390:	lea    rcx,[rdx+0x138]
 1051397:	jmp    0x1036350
 105139c:	int3   
 105139d:	int3   
 105139e:	int3   
 105139f:	int3   
 10513a0:	lea    rcx,[rdx+0x218]
 10513a7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb06fa]        # 0x1001aa8
 10513ae:	int3   
 10513af:	int3   
 10513b0:	lea    rcx,[rdx+0x228]
 10513b7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb06ea]        # 0x1001aa8
 10513be:	int3   
 10513bf:	int3   
 10513c0:	lea    rcx,[rdx+0x348]
 10513c7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb06da]        # 0x1001aa8
 10513ce:	int3   
 10513cf:	int3   
 10513d0:	lea    rcx,[rdx+0x238]
 10513d7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb06ca]        # 0x1001aa8
 10513de:	int3   
 10513df:	int3   
 10513e0:	lea    rcx,[rdx+0x2c8]
 10513e7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb06ba]        # 0x1001aa8
 10513ee:	int3   
 10513ef:	int3   
 10513f0:	lea    rcx,[rdx+0x248]
 10513f7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb06aa]        # 0x1001aa8
 10513fe:	int3   
 10513ff:	int3   
 1051400:	lea    rcx,[rdx+0x318]
 1051407:	rex.W jmp QWORD PTR [rip+0xfffffffffffb069a]        # 0x1001aa8
 105140e:	int3   
 105140f:	int3   
 1051410:	lea    rcx,[rdx+0x2d8]
 1051417:	rex.W jmp QWORD PTR [rip+0xfffffffffffb068a]        # 0x1001aa8
 105141e:	int3   
 105141f:	int3   
 1051420:	lea    rcx,[rdx+0xc8]
 1051427:	rex.W jmp QWORD PTR [rip+0xfffffffffffb067a]        # 0x1001aa8
 105142e:	int3   
 105142f:	int3   
 1051430:	rex push rbp
 1051432:	sub    rsp,0x20
 1051436:	mov    rbp,rdx
 1051439:	mov    eax,DWORD PTR [rbp+0x68]
 105143c:	and    eax,0x1
 105143f:	test   eax,eax
 1051441:	je     0x1051454
 1051443:	and    DWORD PTR [rbp+0x68],0xfffffffe
 1051447:	lea    rcx,[rbp+0x258]
 105144e:	call   QWORD PTR [rip+0xfffffffffffb0654]        # 0x1001aa8
 1051454:	add    rsp,0x20
 1051458:	pop    rbp
 1051459:	ret    
 105145a:	int3   
 105145b:	int3   
 105145c:	int3   
 105145d:	int3   
 105145e:	int3   
 105145f:	int3   
 1051460:	lea    rcx,[rdx+0x330]
 1051467:	rex.W jmp QWORD PTR [rip+0xfffffffffffb063a]        # 0x1001aa8
 105146e:	int3   
 105146f:	int3   
 1051470:	lea    rcx,[rdx+0x178]
 1051477:	rex.W jmp QWORD PTR [rip+0xfffffffffffb062a]        # 0x1001aa8
 105147e:	int3   
 105147f:	int3   
 1051480:	lea    rcx,[rdx+0x268]
 1051487:	rex.W jmp QWORD PTR [rip+0xfffffffffffb061a]        # 0x1001aa8
 105148e:	int3   
 105148f:	int3   
 1051490:	lea    rcx,[rdx+0x190]
 1051497:	rex.W jmp QWORD PTR [rip+0xfffffffffffb060a]        # 0x1001aa8
 105149e:	int3   
 105149f:	int3   
 10514a0:	lea    rcx,[rdx+0x180]
 10514a7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb05fa]        # 0x1001aa8
 10514ae:	int3   
 10514af:	int3   
 10514b0:	lea    rcx,[rdx+0x1b0]
 10514b7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb05ea]        # 0x1001aa8
 10514be:	int3   
 10514bf:	int3   
 10514c0:	lea    rcx,[rdx+0x1a0]
 10514c7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb05da]        # 0x1001aa8
 10514ce:	int3   
 10514cf:	int3   
 10514d0:	lea    rcx,[rdx+0x1d0]
 10514d7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb05ca]        # 0x1001aa8
 10514de:	int3   
 10514df:	int3   
 10514e0:	lea    rcx,[rdx+0x1c0]
 10514e7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb05ba]        # 0x1001aa8
 10514ee:	int3   
 10514ef:	int3   
 10514f0:	lea    rcx,[rdx+0x1e0]
 10514f7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb05aa]        # 0x1001aa8
 10514fe:	int3   
 10514ff:	int3   
 1051500:	lea    rcx,[rdx+0xd0]
 1051507:	rex.W jmp QWORD PTR [rip+0xfffffffffffb059a]        # 0x1001aa8
 105150e:	int3   
 105150f:	int3   
 1051510:	rex push rbp
 1051512:	sub    rsp,0x20
 1051516:	mov    rbp,rdx
 1051519:	mov    eax,DWORD PTR [rbp+0x68]
 105151c:	and    eax,0x2
 105151f:	test   eax,eax
 1051521:	je     0x1051534
 1051523:	and    DWORD PTR [rbp+0x68],0xfffffffd
 1051527:	lea    rcx,[rbp+0x1f0]
 105152e:	call   QWORD PTR [rip+0xfffffffffffb0574]        # 0x1001aa8
 1051534:	add    rsp,0x20
 1051538:	pop    rbp
 1051539:	ret    
 105153a:	int3   
 105153b:	int3   
 105153c:	int3   
 105153d:	int3   
 105153e:	int3   
 105153f:	int3   
 1051540:	lea    rcx,[rdx+0x200]
 1051547:	rex.W jmp QWORD PTR [rip+0xfffffffffffb055a]        # 0x1001aa8
 105154e:	int3   
 105154f:	int3   
 1051550:	lea    rcx,[rdx+0x220]
 1051557:	rex.W jmp QWORD PTR [rip+0xfffffffffffb054a]        # 0x1001aa8
 105155e:	int3   
 105155f:	int3   
 1051560:	lea    rcx,[rdx+0x210]
 1051567:	rex.W jmp QWORD PTR [rip+0xfffffffffffb053a]        # 0x1001aa8
 105156e:	int3   
 105156f:	int3   
 1051570:	lea    rcx,[rdx+0x240]
 1051577:	rex.W jmp QWORD PTR [rip+0xfffffffffffb052a]        # 0x1001aa8
 105157e:	int3   
 105157f:	int3   
 1051580:	lea    rcx,[rdx+0x230]
 1051587:	rex.W jmp QWORD PTR [rip+0xfffffffffffb051a]        # 0x1001aa8
 105158e:	int3   
 105158f:	int3   
 1051590:	lea    rcx,[rdx+0x100]
 1051597:	rex.W jmp QWORD PTR [rip+0xfffffffffffb050a]        # 0x1001aa8
 105159e:	int3   
 105159f:	int3   
 10515a0:	lea    rcx,[rdx+0x250]
 10515a7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb04fa]        # 0x1001aa8
 10515ae:	int3   
 10515af:	int3   
 10515b0:	mov    rcx,QWORD PTR [rdx+0xd8]
 10515b7:	jmp    0x103f95a
 10515bc:	int3   
 10515bd:	int3   
 10515be:	int3   
 10515bf:	int3   
 10515c0:	mov    rcx,QWORD PTR [rdx+0xf8]
 10515c7:	jmp    0x1036350
 10515cc:	int3   
 10515cd:	int3   
 10515ce:	int3   
 10515cf:	int3   
 10515d0:	lea    rcx,[rdx+0x260]
 10515d7:	jmp    0x1036bf0
 10515dc:	int3   
 10515dd:	int3   
 10515de:	int3   
 10515df:	int3   
 10515e0:	lea    rcx,[rdx+0x270]
 10515e7:	jmp    0x1036bd0
 10515ec:	int3   
 10515ed:	int3   
 10515ee:	int3   
 10515ef:	int3   
 10515f0:	mov    rcx,QWORD PTR [rdx+0xf8]
 10515f7:	jmp    0x1036bd0
 10515fc:	int3   
 10515fd:	int3   
 10515fe:	int3   
 10515ff:	int3   
 1051600:	lea    rcx,[rdx+0x280]
 1051607:	rex.W jmp QWORD PTR [rip+0xfffffffffffb049a]        # 0x1001aa8
 105160e:	int3   
 105160f:	int3   
 1051610:	lea    rcx,[rdx+0x290]
 1051617:	rex.W jmp QWORD PTR [rip+0xfffffffffffb048a]        # 0x1001aa8
 105161e:	int3   
 105161f:	int3   
 1051620:	lea    rcx,[rdx+0x2a0]
 1051627:	rex.W jmp QWORD PTR [rip+0xfffffffffffb047a]        # 0x1001aa8
 105162e:	int3   
 105162f:	int3   
 1051630:	mov    rcx,QWORD PTR [rdx+0x50]
 1051637:	jmp    0x103f95a
 105163c:	int3   
 105163d:	int3   
 105163e:	int3   
 105163f:	int3   
 1051640:	mov    rcx,QWORD PTR [rdx+0xf8]
 1051647:	jmp    0x1036350
 105164c:	int3   
 105164d:	int3   
 105164e:	int3   
 105164f:	int3   
 1051650:	lea    rcx,[rdx+0x2b0]
 1051657:	jmp    0x1036bf0
 105165c:	int3   
 105165d:	int3   
 105165e:	int3   
 105165f:	int3   
 1051660:	lea    rcx,[rdx+0x2c0]
 1051667:	jmp    0x1036bd0
 105166c:	int3   
 105166d:	int3   
 105166e:	int3   
 105166f:	int3   
 1051670:	mov    rcx,QWORD PTR [rdx+0x50]
 1051677:	jmp    0x103f95a
 105167c:	int3   
 105167d:	int3   
 105167e:	int3   
 105167f:	int3   
 1051680:	mov    rcx,QWORD PTR [rdx+0xf8]
 1051687:	jmp    0x1036350
 105168c:	int3   
 105168d:	int3   
 105168e:	int3   
 105168f:	int3   
 1051690:	lea    rcx,[rdx+0x148]
 1051697:	jmp    0x1036c10
 105169c:	int3   
 105169d:	int3   
 105169e:	int3   
 105169f:	int3   
 10516a0:	lea    rcx,[rdx+0x2d0]
 10516a7:	jmp    0x1036bd0
 10516ac:	int3   
 10516ad:	int3   
 10516ae:	int3   
 10516af:	int3   
 10516b0:	lea    rcx,[rdx+0x140]
 10516b7:	jmp    0x1036350
 10516bc:	int3   
 10516bd:	int3   
 10516be:	int3   
 10516bf:	int3   
 10516c0:	mov    rcx,QWORD PTR [rdx+0x148]
 10516c7:	jmp    0x103f95a
 10516cc:	int3   
 10516cd:	int3   
 10516ce:	int3   
 10516cf:	int3   
 10516d0:	mov    rcx,QWORD PTR [rdx+0xf8]
 10516d7:	jmp    0x1036350
 10516dc:	int3   
 10516dd:	int3   
 10516de:	int3   
 10516df:	int3   
 10516e0:	lea    rcx,[rdx+0x2f0]
 10516e7:	jmp    0x1036bf0
 10516ec:	int3   
 10516ed:	int3   
 10516ee:	int3   
 10516ef:	int3   
 10516f0:	lea    rcx,[rdx+0x300]
 10516f7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb03aa]        # 0x1001aa8
 10516fe:	int3   
 10516ff:	int3   
 1051700:	lea    rcx,[rdx+0x158]
 1051707:	rex.W jmp QWORD PTR [rip+0xfffffffffffb039a]        # 0x1001aa8
 105170e:	int3   
 105170f:	int3   
 1051710:	lea    rcx,[rdx+0x168]
 1051717:	rex.W jmp QWORD PTR [rip+0xfffffffffffb038a]        # 0x1001aa8
 105171e:	int3   
 105171f:	int3   
 1051720:	int3   
 1051721:	int3   
 1051722:	int3   
 1051723:	int3   
 1051724:	int3   
 1051725:	int3   
 1051726:	int3   
 1051727:	int3   
 1051728:	int3   
 1051729:	int3   
 105172a:	int3   
 105172b:	int3   
 105172c:	int3   
 105172d:	int3   
 105172e:	int3   
 105172f:	int3   
 1051730:	mov    rcx,QWORD PTR [rdx+0x1d0]
 1051737:	jmp    0x1036bd0
 105173c:	int3   
 105173d:	int3   
 105173e:	int3   
 105173f:	int3   
 1051740:	lea    rcx,[rdx+0x58]
 1051747:	rex.W jmp QWORD PTR [rip+0xfffffffffffb035a]        # 0x1001aa8
 105174e:	int3   
 105174f:	int3   
 1051750:	lea    rcx,[rdx+0x50]
 1051757:	rex.W jmp QWORD PTR [rip+0xfffffffffffb034a]        # 0x1001aa8
 105175e:	int3   
 105175f:	int3   
 1051760:	lea    rcx,[rdx+0x40]
 1051767:	rex.W jmp QWORD PTR [rip+0xfffffffffffb033a]        # 0x1001aa8
 105176e:	int3   
 105176f:	int3   
 1051770:	mov    rcx,QWORD PTR [rdx+0xc8]
 1051777:	jmp    0x103f95a
 105177c:	int3   
 105177d:	int3   
 105177e:	int3   
 105177f:	int3   
 1051780:	mov    rcx,QWORD PTR [rdx+0x1d8]
 1051787:	jmp    0x1036350
 105178c:	int3   
 105178d:	int3   
 105178e:	int3   
 105178f:	int3   
 1051790:	lea    rcx,[rdx+0xd0]
 1051797:	jmp    0x1036c10
 105179c:	int3   
 105179d:	int3   
 105179e:	int3   
 105179f:	int3   
 10517a0:	lea    rcx,[rdx+0x158]
 10517a7:	jmp    0x1036bd0
 10517ac:	int3   
 10517ad:	int3   
 10517ae:	int3   
 10517af:	int3   
 10517b0:	lea    rcx,[rdx+0x90]
 10517b7:	jmp    0x1036350
 10517bc:	int3   
 10517bd:	int3   
 10517be:	int3   
 10517bf:	int3   
 10517c0:	mov    rcx,QWORD PTR [rdx+0x48]
 10517c7:	jmp    0x103f95a
 10517cc:	int3   
 10517cd:	int3   
 10517ce:	int3   
 10517cf:	int3   
 10517d0:	mov    rcx,QWORD PTR [rdx+0x1d8]
 10517d7:	jmp    0x1036350
 10517dc:	int3   
 10517dd:	int3   
 10517de:	int3   
 10517df:	int3   
 10517e0:	lea    rcx,[rdx+0x160]
 10517e7:	jmp    0x1036c10
 10517ec:	int3   
 10517ed:	int3   
 10517ee:	int3   
 10517ef:	int3   
 10517f0:	lea    rcx,[rdx+0xe0]
 10517f7:	jmp    0x1036bd0
 10517fc:	int3   
 10517fd:	int3   
 10517fe:	int3   
 10517ff:	int3   
 1051800:	lea    rcx,[rdx+0xa0]
 1051807:	jmp    0x1036350
 105180c:	int3   
 105180d:	int3   
 105180e:	int3   
 105180f:	int3   
 1051810:	mov    rcx,QWORD PTR [rdx+0x48]
 1051817:	jmp    0x1036350
 105181c:	int3   
 105181d:	int3   
 105181e:	int3   
 105181f:	int3   
 1051820:	lea    rcx,[rdx+0x100]
 1051827:	jmp    0x1036c10
 105182c:	int3   
 105182d:	int3   
 105182e:	int3   
 105182f:	int3   
 1051830:	lea    rcx,[rdx+0x130]
 1051837:	jmp    0x1036bd0
 105183c:	int3   
 105183d:	int3   
 105183e:	int3   
 105183f:	int3   
 1051840:	lea    rcx,[rdx+0xc0]
 1051847:	jmp    0x1036350
 105184c:	int3   
 105184d:	int3   
 105184e:	int3   
 105184f:	int3   
 1051850:	mov    rcx,QWORD PTR [rdx+0x48]
 1051857:	jmp    0x1036350
 105185c:	int3   
 105185d:	int3   
 105185e:	int3   
 105185f:	int3   
 1051860:	lea    rcx,[rdx+0x140]
 1051867:	jmp    0x1036c10
 105186c:	int3   
 105186d:	int3   
 105186e:	int3   
 105186f:	int3   
 1051870:	lea    rcx,[rdx+0x110]
 1051877:	jmp    0x1036bd0
 105187c:	int3   
 105187d:	int3   
 105187e:	int3   
 105187f:	int3   
 1051880:	lea    rcx,[rdx+0x88]
 1051887:	jmp    0x1036350
 105188c:	int3   
 105188d:	int3   
 105188e:	int3   
 105188f:	int3   
 1051890:	lea    rcx,[rdx+0x78]
 1051897:	rex.W jmp QWORD PTR [rip+0xfffffffffffb020a]        # 0x1001aa8
 105189e:	int3   
 105189f:	int3   
 10518a0:	mov    rcx,QWORD PTR [rdx+0x48]
 10518a7:	jmp    0x1036350
 10518ac:	int3   
 10518ad:	int3   
 10518ae:	int3   
 10518af:	int3   
 10518b0:	lea    rcx,[rdx+0xe8]
 10518b7:	jmp    0x1036c10
 10518bc:	int3   
 10518bd:	int3   
 10518be:	int3   
 10518bf:	int3   
 10518c0:	lea    rcx,[rdx+0xd8]
 10518c7:	jmp    0x1036bd0
 10518cc:	int3   
 10518cd:	int3   
 10518ce:	int3   
 10518cf:	int3   
 10518d0:	lea    rcx,[rdx+0x98]
 10518d7:	jmp    0x1036350
 10518dc:	int3   
 10518dd:	int3   
 10518de:	int3   
 10518df:	int3   
 10518e0:	lea    rcx,[rdx+0x68]
 10518e7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb01ba]        # 0x1001aa8
 10518ee:	int3   
 10518ef:	int3   
 10518f0:	mov    rcx,QWORD PTR [rdx+0x48]
 10518f7:	jmp    0x1036350
 10518fc:	int3   
 10518fd:	int3   
 10518fe:	int3   
 10518ff:	int3   
 1051900:	lea    rcx,[rdx+0x118]
 1051907:	jmp    0x1036c10
 105190c:	int3   
 105190d:	int3   
 105190e:	int3   
 105190f:	int3   
 1051910:	lea    rcx,[rdx+0x108]
 1051917:	jmp    0x1036bd0
 105191c:	int3   
 105191d:	int3   
 105191e:	int3   
 105191f:	int3   
 1051920:	lea    rcx,[rdx+0xa8]
 1051927:	jmp    0x1036350
 105192c:	int3   
 105192d:	int3   
 105192e:	int3   
 105192f:	int3   
 1051930:	lea    rcx,[rdx+0x60]
 1051937:	rex.W jmp QWORD PTR [rip+0xfffffffffffb016a]        # 0x1001aa8
 105193e:	int3   
 105193f:	int3   
 1051940:	mov    rcx,QWORD PTR [rdx+0x48]
 1051947:	jmp    0x1036350
 105194c:	int3   
 105194d:	int3   
 105194e:	int3   
 105194f:	int3   
 1051950:	lea    rcx,[rdx+0x138]
 1051957:	jmp    0x1036c10
 105195c:	int3   
 105195d:	int3   
 105195e:	int3   
 105195f:	int3   
 1051960:	lea    rcx,[rdx+0x70]
 1051967:	jmp    0x1036bd0
 105196c:	int3   
 105196d:	int3   
 105196e:	int3   
 105196f:	int3   
 1051970:	lea    rcx,[rdx+0xb8]
 1051977:	jmp    0x1036350
 105197c:	int3   
 105197d:	int3   
 105197e:	int3   
 105197f:	int3   
 1051980:	lea    rcx,[rdx+0x148]
 1051987:	rex.W jmp QWORD PTR [rip+0xfffffffffffb011a]        # 0x1001aa8
 105198e:	int3   
 105198f:	int3   
 1051990:	lea    rcx,[rdx+0xc8]
 1051997:	rex.W jmp QWORD PTR [rip+0xfffffffffffb010a]        # 0x1001aa8
 105199e:	int3   
 105199f:	int3   
 10519a0:	int3   
 10519a1:	int3   
 10519a2:	int3   
 10519a3:	int3   
 10519a4:	int3   
 10519a5:	int3   
 10519a6:	int3   
 10519a7:	int3   
 10519a8:	int3   
 10519a9:	int3   
 10519aa:	int3   
 10519ab:	int3   
 10519ac:	int3   
 10519ad:	int3   
 10519ae:	int3   
 10519af:	int3   
 10519b0:	lea    rcx,[rdx+0x60]
 10519b7:	jmp    0x1036bd0
 10519bc:	int3   
 10519bd:	int3   
 10519be:	int3   
 10519bf:	int3   
 10519c0:	mov    rcx,QWORD PTR [rdx+0xe0]
 10519c7:	jmp    0x1036350
 10519cc:	int3   
 10519cd:	int3   
 10519ce:	int3   
 10519cf:	int3   
 10519d0:	lea    rcx,[rdx+0x48]
 10519d7:	rex.W jmp QWORD PTR [rip+0xfffffffffffb00ca]        # 0x1001aa8
 10519de:	int3   
 10519df:	int3   
 10519e0:	lea    rcx,[rdx+0x80]
 10519e7:	jmp    0x1036c30
 10519ec:	int3   
 10519ed:	int3   
 10519ee:	int3   
 10519ef:	int3   
 10519f0:	lea    rcx,[rdx+0x50]
 10519f7:	jmp    0x1036350
 10519fc:	int3   
 10519fd:	int3   
 10519fe:	int3   
 10519ff:	int3   
 1051a00:	lea    rcx,[rdx+0x90]
 1051a07:	rex.W jmp QWORD PTR [rip+0xfffffffffffb009a]        # 0x1001aa8
 1051a0e:	int3   
 1051a0f:	int3   
 1051a10:	mov    rcx,QWORD PTR [rdx+0xe0]
 1051a17:	jmp    0x1036350
 1051a1c:	int3   
 1051a1d:	int3   
 1051a1e:	int3   
 1051a1f:	int3   
 1051a20:	lea    rcx,[rdx+0x40]
 1051a27:	jmp    0x1036bf0
 1051a2c:	int3   
 1051a2d:	int3   
 1051a2e:	int3   
 1051a2f:	int3   
 1051a30:	lea    rcx,[rdx+0x88]
 1051a37:	jmp    0x1036bd0
 1051a3c:	int3   
 1051a3d:	int3   
 1051a3e:	int3   
 1051a3f:	int3   
 1051a40:	mov    rcx,QWORD PTR [rdx+0xe0]
 1051a47:	jmp    0x1036bd0
 1051a4c:	int3   
 1051a4d:	int3   
 1051a4e:	int3   
 1051a4f:	int3   
 1051a50:	int3   
 1051a51:	int3   
 1051a52:	int3   
 1051a53:	int3   
 1051a54:	int3   
 1051a55:	int3   
 1051a56:	int3   
 1051a57:	int3   
 1051a58:	int3   
 1051a59:	int3   
 1051a5a:	int3   
 1051a5b:	int3   
 1051a5c:	int3   
 1051a5d:	int3   
 1051a5e:	int3   
 1051a5f:	int3   
 1051a60:	mov    rcx,QWORD PTR [rdx+0x60]
 1051a67:	jmp    0x1036350
 1051a6c:	int3   
 1051a6d:	int3   
 1051a6e:	int3   
 1051a6f:	int3   
 1051a70:	rex push rbp
 1051a72:	sub    rsp,0x20
 1051a76:	mov    rbp,rdx
 1051a79:	mov    eax,DWORD PTR [rbp+0x20]
 1051a7c:	and    eax,0x1
 1051a7f:	test   eax,eax
 1051a81:	je     0x1051a90
 1051a83:	and    DWORD PTR [rbp+0x20],0xfffffffe
 1051a87:	mov    rcx,QWORD PTR [rbp+0x58]
 1051a8b:	call   0x1036bd0
 1051a90:	add    rsp,0x20
 1051a94:	pop    rbp
 1051a95:	ret    
 1051a96:	int3   
 1051a97:	int3   
 1051a98:	int3   
 1051a99:	int3   
 1051a9a:	int3   
 1051a9b:	int3   
 1051a9c:	int3   
 1051a9d:	int3   
 1051a9e:	int3   
 1051a9f:	int3   
 1051aa0:	mov    rcx,QWORD PTR [rdx+0x58]
 1051aa7:	jmp    0x1036350
 1051aac:	int3   
 1051aad:	int3   
 1051aae:	int3   
 1051aaf:	int3   
 1051ab0:	int3   
 1051ab1:	int3   
 1051ab2:	int3   
 1051ab3:	int3   
 1051ab4:	int3   
 1051ab5:	int3   
 1051ab6:	int3   
 1051ab7:	int3   
 1051ab8:	int3   
 1051ab9:	int3   
 1051aba:	int3   
 1051abb:	int3   
 1051abc:	int3   
 1051abd:	int3   
 1051abe:	int3   
 1051abf:	int3   
 1051ac0:	mov    rcx,QWORD PTR [rdx+0x60]
 1051ac7:	jmp    0x1036350
 1051acc:	int3   
 1051acd:	int3   
 1051ace:	int3   
 1051acf:	int3   
 1051ad0:	rex push rbp
 1051ad2:	sub    rsp,0x20
 1051ad6:	mov    rbp,rdx
 1051ad9:	mov    eax,DWORD PTR [rbp+0x20]
 1051adc:	and    eax,0x1
 1051adf:	test   eax,eax
 1051ae1:	je     0x1051af0
 1051ae3:	and    DWORD PTR [rbp+0x20],0xfffffffe
 1051ae7:	mov    rcx,QWORD PTR [rbp+0x58]
 1051aeb:	call   0x1036bf0
 1051af0:	add    rsp,0x20
 1051af4:	pop    rbp
 1051af5:	ret    
 1051af6:	int3   
 1051af7:	int3   
 1051af8:	int3   
 1051af9:	int3   
 1051afa:	int3   
 1051afb:	int3   
 1051afc:	int3   
 1051afd:	int3   
 1051afe:	int3   
 1051aff:	int3   
 1051b00:	mov    rcx,QWORD PTR [rdx+0x60]
 1051b07:	jmp    0x1036350
 1051b0c:	int3   
 1051b0d:	int3   
 1051b0e:	int3   
 1051b0f:	int3   
 1051b10:	rex push rbp
 1051b12:	sub    rsp,0x20
 1051b16:	mov    rbp,rdx
 1051b19:	mov    eax,DWORD PTR [rbp+0x20]
 1051b1c:	and    eax,0x1
 1051b1f:	test   eax,eax
 1051b21:	je     0x1051b30
 1051b23:	and    DWORD PTR [rbp+0x20],0xfffffffe
 1051b27:	mov    rcx,QWORD PTR [rbp+0x58]
 1051b2b:	call   0x1036bd0
 1051b30:	add    rsp,0x20
 1051b34:	pop    rbp
 1051b35:	ret    
 1051b36:	int3   
 1051b37:	int3   
 1051b38:	int3   
 1051b39:	int3   
 1051b3a:	int3   
 1051b3b:	int3   
 1051b3c:	int3   
 1051b3d:	int3   
 1051b3e:	int3   
 1051b3f:	int3   
 1051b40:	mov    rcx,QWORD PTR [rdx+0x68]
 1051b47:	jmp    0x1036350
 1051b4c:	int3   
 1051b4d:	int3   
 1051b4e:	int3   
 1051b4f:	int3   
 1051b50:	int3   
 1051b51:	int3   
 1051b52:	int3   
 1051b53:	int3   
 1051b54:	int3   
 1051b55:	int3   
 1051b56:	int3   
 1051b57:	int3   
 1051b58:	int3   
 1051b59:	int3   
 1051b5a:	int3   
 1051b5b:	int3   
 1051b5c:	int3   
 1051b5d:	int3   
 1051b5e:	int3   
 1051b5f:	int3   
 1051b60:	lea    rcx,[rdx+0x50]
 1051b67:	jmp    0x103f930
 1051b6c:	int3   
 1051b6d:	int3   
 1051b6e:	int3   
 1051b6f:	int3   
 1051b70:	mov    QWORD PTR [rsp+0x10],rdx
 1051b75:	push   rbx
 1051b76:	push   rbp
 1051b77:	sub    rsp,0x48
 1051b7b:	mov    rbp,rdx
 1051b7e:	lea    rcx,[rbp+0x60]
 1051b82:	call   QWORD PTR [rip+0xfffffffffffaff38]        # 0x1001ac0
 1051b88:	nop
 1051b89:	mov    edx,0xc000c4a3
 1051b8e:	lea    rcx,[rbp+0x78]
 1051b92:	call   0x10132d0
 1051b97:	nop
 1051b98:	mov    rcx,rax
 1051b9b:	call   QWORD PTR [rip+0xfffffffffffaff47]        # 0x1001ae8
 1051ba1:	mov    rdx,rax
 1051ba4:	mov    r8d,DWORD PTR [rbp+0xf0]
 1051bab:	lea    rcx,[rbp+0x60]
 1051baf:	call   QWORD PTR [rip+0xfffffffffffafe8b]        # 0x1001a40
 1051bb5:	nop
 1051bb6:	lea    rcx,[rbp+0x78]
 1051bba:	call   QWORD PTR [rip+0xfffffffffffafee8]        # 0x1001aa8
 1051bc0:	lea    r11,[rbp+0x80]
 1051bc7:	mov    QWORD PTR [rbp+0x48],r11
 1051bcb:	mov    rax,QWORD PTR [rbp+0xe0]
 1051bd2:	mov    rbx,QWORD PTR [rax+0x68]
 1051bd6:	lea    rdx,[rbp+0x60]
 1051bda:	lea    rcx,[rbp+0x80]
 1051be1:	call   QWORD PTR [rip+0xfffffffffffafdd1]        # 0x10019b8
 1051be7:	nop
 1051be8:	mov    rcx,QWORD PTR [rbx+0x8]
 1051bec:	movsxd rdx,DWORD PTR [rcx+0x4]
 1051bf0:	lea    rcx,[rbx+0x8]
 1051bf4:	add    rcx,rdx
 1051bf7:	mov    r10,QWORD PTR [rcx]
 1051bfa:	xor    r9d,r9d
 1051bfd:	mov    r8,rax
 1051c00:	mov    edx,0xc000c4a3
 1051c05:	call   QWORD PTR [r10+0x28]
 1051c09:	nop
 1051c0a:	lea    rcx,[rbp+0x60]
 1051c0e:	call   QWORD PTR [rip+0xfffffffffffafe94]        # 0x1001aa8
 1051c14:	nop
 1051c15:	lea    rax,[rip+0xfffffffffffed220]        # 0x103ee3c
 1051c1c:	add    rsp,0x48
 1051c20:	pop    rbp
 1051c21:	pop    rbx
 1051c22:	ret    
 1051c23:	int3   
 1051c24:	int3   
 1051c25:	int3   
 1051c26:	int3   
 1051c27:	int3   
 1051c28:	int3   
 1051c29:	int3   
 1051c2a:	int3   
 1051c2b:	int3   
 1051c2c:	int3   
 1051c2d:	int3   
 1051c2e:	int3   
 1051c2f:	int3   
 1051c30:	lea    rcx,[rdx+0x60]
 1051c37:	rex.W jmp QWORD PTR [rip+0xfffffffffffafe6a]        # 0x1001aa8
 1051c3e:	int3   
 1051c3f:	int3   
 1051c40:	lea    rcx,[rdx+0x78]
 1051c47:	rex.W jmp QWORD PTR [rip+0xfffffffffffafe5a]        # 0x1001aa8
 1051c4e:	int3   
 1051c4f:	int3   
 1051c50:	mov    rcx,QWORD PTR [rdx+0x48]
 1051c57:	rex.W jmp QWORD PTR [rip+0xfffffffffffafe4a]        # 0x1001aa8
 1051c5e:	int3   
 1051c5f:	int3   
 1051c60:	int3   
 1051c61:	int3   
 1051c62:	int3   
 1051c63:	int3   
 1051c64:	int3   
 1051c65:	int3   
 1051c66:	int3   
 1051c67:	int3   
 1051c68:	int3   
 1051c69:	int3   
 1051c6a:	int3   
 1051c6b:	int3   
 1051c6c:	int3   
 1051c6d:	int3   
 1051c6e:	int3   
 1051c6f:	int3   
 1051c70:	lea    rcx,[rdx+0x58]
 1051c77:	rex.W jmp QWORD PTR [rip+0xfffffffffffafe2a]        # 0x1001aa8
 1051c7e:	int3   
 1051c7f:	int3   
 1051c80:	lea    rcx,[rdx+0x70]
 1051c87:	rex.W jmp QWORD PTR [rip+0xfffffffffffafe1a]        # 0x1001aa8
 1051c8e:	int3   
 1051c8f:	int3   
 1051c90:	lea    rcx,[rdx+0x78]
 1051c97:	rex.W jmp QWORD PTR [rip+0xfffffffffffafe0a]        # 0x1001aa8
 1051c9e:	int3   
 1051c9f:	int3   
 1051ca0:	lea    rcx,[rdx+0x68]
 1051ca7:	rex.W jmp QWORD PTR [rip+0xfffffffffffafdfa]        # 0x1001aa8
 1051cae:	int3   
 1051caf:	int3   
 1051cb0:	lea    rcx,[rdx+0x80]
 1051cb7:	rex.W jmp QWORD PTR [rip+0xfffffffffffafdea]        # 0x1001aa8
 1051cbe:	int3   
 1051cbf:	int3   
 1051cc0:	lea    rcx,[rdx+0x60]
 1051cc7:	rex.W jmp QWORD PTR [rip+0xfffffffffffafdda]        # 0x1001aa8
 1051cce:	int3   
 1051ccf:	int3   
 1051cd0:	lea    rcx,[rdx+0x60]
 1051cd7:	rex.W jmp QWORD PTR [rip+0xfffffffffffafdca]        # 0x1001aa8
 1051cde:	int3   
 1051cdf:	int3   
 1051ce0:	mov    QWORD PTR [rsp+0x10],rdx
 1051ce5:	push   rbx
 1051ce6:	push   rbp
 1051ce7:	push   rsi
 1051ce8:	push   rdi
 1051ce9:	sub    rsp,0x58
 1051ced:	mov    rbp,rdx
 1051cf0:	mov    rsi,QWORD PTR [rbp+0x98]
 1051cf7:	mov    rax,QWORD PTR [rsi]
 1051cfa:	xor    r9d,r9d
 1051cfd:	mov    r8d,0x400
 1051d03:	lea    rdx,[rbp+0xb0]
 1051d0a:	mov    rcx,rsi
 1051d0d:	call   QWORD PTR [rax+0x28]
 1051d10:	lea    rcx,[rbp+0x60]
 1051d14:	call   QWORD PTR [rip+0xfffffffffffafda6]        # 0x1001ac0
 1051d1a:	nop
 1051d1b:	mov    edx,0xc000c444
 1051d20:	lea    rcx,[rbp+0x88]
 1051d27:	call   0x10132d0
 1051d2c:	nop
 1051d2d:	mov    rcx,rax
 1051d30:	call   QWORD PTR [rip+0xfffffffffffafdb2]        # 0x1001ae8
 1051d36:	mov    rdx,rax
 1051d39:	lea    r8,[rbp+0xb0]
 1051d40:	lea    rcx,[rbp+0x60]
 1051d44:	call   QWORD PTR [rip+0xfffffffffffafcf6]        # 0x1001a40
 1051d4a:	nop
 1051d4b:	lea    rcx,[rbp+0x88]
 1051d52:	call   QWORD PTR [rip+0xfffffffffffafd50]        # 0x1001aa8
 1051d58:	mov    r11,QWORD PTR [rbp+0x90]
 1051d5f:	mov    rbx,QWORD PTR [r11+0x68]
 1051d63:	mov    rax,QWORD PTR [rbx+0x8]
 1051d67:	movsxd rcx,DWORD PTR [rax+0x4]
 1051d6b:	mov    rdi,QWORD PTR [rcx+rbx*1+0x8]
 1051d70:	add    rdi,0x8
 1051d74:	lea    rcx,[rbp+0x60]
 1051d78:	call   QWORD PTR [rip+0xfffffffffffafd6a]        # 0x1001ae8
 1051d7e:	mov    r8,rax
 1051d81:	mov    rax,QWORD PTR [rbx+0x8]
 1051d85:	movsxd rdx,DWORD PTR [rax+0x4]
 1051d89:	lea    rcx,[rbx+0x8]
 1051d8d:	add    rcx,rdx
 1051d90:	mov    BYTE PTR [rsp+0x30],0x1
 1051d95:	mov    BYTE PTR [rsp+0x28],0x1
 1051d9a:	mov    DWORD PTR [rsp+0x20],0x2
 1051da2:	xor    r9d,r9d
 1051da5:	mov    edx,0xc000c444
 1051daa:	call   QWORD PTR [rdi]
 1051dac:	mov    rcx,rsi
 1051daf:	call   0x103f9f6
 1051db4:	nop
 1051db5:	lea    rcx,[rbp+0x60]
 1051db9:	call   QWORD PTR [rip+0xfffffffffffafce9]        # 0x1001aa8
 1051dbf:	nop
 1051dc0:	lea    rax,[rip+0xfffffffffffecc6f]        # 0x103ea36
 1051dc7:	add    rsp,0x58
 1051dcb:	pop    rdi
 1051dcc:	pop    rsi
 1051dcd:	pop    rbp
 1051dce:	pop    rbx
 1051dcf:	ret    
 1051dd0:	int3   
 1051dd1:	int3   
 1051dd2:	int3   
 1051dd3:	int3   
 1051dd4:	int3   
 1051dd5:	int3   
 1051dd6:	int3   
 1051dd7:	int3   
 1051dd8:	int3   
 1051dd9:	int3   
 1051dda:	int3   
 1051ddb:	int3   
 1051ddc:	int3   
 1051ddd:	int3   
 1051dde:	int3   
 1051ddf:	int3   
 1051de0:	lea    rcx,[rdx+0x60]
 1051de7:	rex.W jmp QWORD PTR [rip+0xfffffffffffafcba]        # 0x1001aa8
 1051dee:	int3   
 1051def:	int3   
 1051df0:	lea    rcx,[rdx+0x88]
 1051df7:	rex.W jmp QWORD PTR [rip+0xfffffffffffafcaa]        # 0x1001aa8
 1051dfe:	int3   
 1051dff:	int3   
 1051e00:	int3   
 1051e01:	int3   
 1051e02:	int3   
 1051e03:	int3   
 1051e04:	int3   
 1051e05:	int3   
 1051e06:	int3   
 1051e07:	int3   
 1051e08:	int3   
 1051e09:	int3   
 1051e0a:	int3   
 1051e0b:	int3   
 1051e0c:	int3   
 1051e0d:	int3   
 1051e0e:	int3   
 1051e0f:	int3   
 1051e10:	rex push rbp
 1051e12:	sub    rsp,0x20
 1051e16:	mov    rbp,rdx
 1051e19:	mov    eax,DWORD PTR [rbp+0x78]
 1051e1c:	and    eax,0x1
 1051e1f:	test   eax,eax
 1051e21:	je     0x1051e34
 1051e23:	and    DWORD PTR [rbp+0x78],0xfffffffe
 1051e27:	mov    rcx,QWORD PTR [rbp+0x90]
 1051e2e:	call   QWORD PTR [rip+0xfffffffffffafc74]        # 0x1001aa8
 1051e34:	add    rsp,0x20
 1051e38:	pop    rbp
 1051e39:	ret    
 1051e3a:	int3   
 1051e3b:	int3   
 1051e3c:	int3   
 1051e3d:	int3   
 1051e3e:	int3   
 1051e3f:	int3   
 1051e40:	mov    QWORD PTR [rsp+0x10],rdx
 1051e45:	push   rbp
 1051e46:	sub    rsp,0x40
 1051e4a:	mov    rbp,rdx
 1051e4d:	lea    rax,[rip+0xfffffffffffed969]        # 0x103f7bd
 1051e54:	add    rsp,0x40
 1051e58:	pop    rbp
 1051e59:	ret    
 1051e5a:	int3   
 1051e5b:	int3   
 1051e5c:	int3   
 1051e5d:	int3   
 1051e5e:	int3   
 1051e5f:	int3   
 1051e60:	mov    QWORD PTR [rsp+0x10],rdx
 1051e65:	push   rbx
 1051e66:	push   rbp
 1051e67:	push   rsi
 1051e68:	push   rdi
 1051e69:	sub    rsp,0x48
 1051e6d:	mov    rbp,rdx
 1051e70:	mov    rsi,QWORD PTR [rbp+0xc0]
 1051e77:	mov    rax,QWORD PTR [rsi]
 1051e7a:	xor    r9d,r9d
 1051e7d:	mov    r8d,0x400
 1051e83:	lea    rdx,[rbp+0xd0]
 1051e8a:	mov    rcx,rsi
 1051e8d:	call   QWORD PTR [rax+0x28]
 1051e90:	lea    rcx,[rbp+0x48]
 1051e94:	call   QWORD PTR [rip+0xfffffffffffafc26]        # 0x1001ac0
 1051e9a:	nop
 1051e9b:	mov    edx,0xc000c444
 1051ea0:	lea    rcx,[rbp+0x70]
 1051ea4:	call   0x10132d0
 1051ea9:	nop
 1051eaa:	mov    rcx,rax
 1051ead:	call   QWORD PTR [rip+0xfffffffffffafc35]        # 0x1001ae8
 1051eb3:	mov    rdx,rax
 1051eb6:	lea    r8,[rbp+0xd0]
 1051ebd:	lea    rcx,[rbp+0x48]
 1051ec1:	call   QWORD PTR [rip+0xfffffffffffafb79]        # 0x1001a40
 1051ec7:	nop
 1051ec8:	lea    rcx,[rbp+0x70]
 1051ecc:	call   QWORD PTR [rip+0xfffffffffffafbd6]        # 0x1001aa8
 1051ed2:	mov    r11,QWORD PTR [rbp+0x98]
 1051ed9:	mov    rbx,QWORD PTR [r11+0x68]
 1051edd:	mov    rax,QWORD PTR [rbx+0x8]
 1051ee1:	movsxd rcx,DWORD PTR [rax+0x4]
 1051ee5:	mov    rdi,QWORD PTR [rcx+rbx*1+0x8]
 1051eea:	lea    rcx,[rbp+0x48]
 1051eee:	call   QWORD PTR [rip+0xfffffffffffafbf4]        # 0x1001ae8
 1051ef4:	mov    r8,rax
 1051ef7:	mov    rax,QWORD PTR [rbx+0x8]
 1051efb:	movsxd rdx,DWORD PTR [rax+0x4]
 1051eff:	lea    rcx,[rbx+0x8]
 1051f03:	add    rcx,rdx
 1051f06:	mov    BYTE PTR [rsp+0x30],0x1
 1051f0b:	mov    BYTE PTR [rsp+0x28],0x1
 1051f10:	mov    DWORD PTR [rsp+0x20],0x2
 1051f18:	xor    r9d,r9d
 1051f1b:	mov    edx,0xc000c444
 1051f20:	call   QWORD PTR [rdi+0x8]
 1051f23:	mov    rcx,rsi
 1051f26:	call   0x103f9f6
 1051f2b:	nop
 1051f2c:	lea    rcx,[rbp+0x48]
 1051f30:	call   QWORD PTR [rip+0xfffffffffffafb72]        # 0x1001aa8
 1051f36:	nop
 1051f37:	lea    rax,[rip+0xfffffffffffed9b2]        # 0x103f8f0
 1051f3e:	add    rsp,0x48
 1051f42:	pop    rdi
 1051f43:	pop    rsi
 1051f44:	pop    rbp
 1051f45:	pop    rbx
 1051f46:	ret    
 1051f47:	int3   
 1051f48:	int3   
 1051f49:	int3   
 1051f4a:	int3   
 1051f4b:	int3   
 1051f4c:	int3   
 1051f4d:	int3   
 1051f4e:	int3   
 1051f4f:	int3   
 1051f50:	lea    rcx,[rdx+0x48]
 1051f57:	rex.W jmp QWORD PTR [rip+0xfffffffffffafb4a]        # 0x1001aa8
 1051f5e:	int3   
 1051f5f:	int3   
 1051f60:	lea    rcx,[rdx+0x70]
 1051f67:	rex.W jmp QWORD PTR [rip+0xfffffffffffafb3a]        # 0x1001aa8
 1051f6e:	int3   
 1051f6f:	int3   
 1051f70:	int3   
 1051f71:	int3   
 1051f72:	int3   
 1051f73:	int3   
 1051f74:	int3   
 1051f75:	int3   
 1051f76:	int3   
 1051f77:	int3   
 1051f78:	int3   
 1051f79:	int3   
 1051f7a:	int3   
 1051f7b:	int3   
 1051f7c:	int3   
 1051f7d:	int3   
 1051f7e:	int3   
 1051f7f:	int3   
 1051f80:	mov    rcx,QWORD PTR [rdx+0xb0]
 1051f87:	add    rcx,0x28
 1051f8b:	rex.W jmp QWORD PTR [rip+0xfffffffffffafb16]        # 0x1001aa8
 1051f92:	int3   
 1051f93:	int3   
 1051f94:	int3   
 1051f95:	int3   
 1051f96:	int3   
 1051f97:	int3   
 1051f98:	int3   
 1051f99:	int3   
 1051f9a:	int3   
 1051f9b:	int3   
 1051f9c:	int3   
 1051f9d:	int3   
 1051f9e:	int3   
 1051f9f:	int3   
 1051fa0:	mov    rcx,QWORD PTR [rdx+0xb0]
 1051fa7:	add    rcx,0x30
 1051fab:	rex.W jmp QWORD PTR [rip+0xfffffffffffafaf6]        # 0x1001aa8
 1051fb2:	int3   
 1051fb3:	int3   
 1051fb4:	int3   
 1051fb5:	int3   
 1051fb6:	int3   
 1051fb7:	int3   
 1051fb8:	int3   
 1051fb9:	int3   
 1051fba:	int3   
 1051fbb:	int3   
 1051fbc:	int3   
 1051fbd:	int3   
 1051fbe:	int3   
 1051fbf:	int3   
 1051fc0:	mov    rcx,QWORD PTR [rdx+0xb0]
 1051fc7:	add    rcx,0x40
 1051fcb:	rex.W jmp QWORD PTR [rip+0xfffffffffffafad6]        # 0x1001aa8
 1051fd2:	int3   
 1051fd3:	int3   
 1051fd4:	int3   
 1051fd5:	int3   
 1051fd6:	int3   
 1051fd7:	int3   
 1051fd8:	int3   
 1051fd9:	int3   
 1051fda:	int3   
 1051fdb:	int3   
 1051fdc:	int3   
 1051fdd:	int3   
 1051fde:	int3   
 1051fdf:	int3   
 1051fe0:	mov    rcx,QWORD PTR [rdx+0xb0]
 1051fe7:	add    rcx,0x48
 1051feb:	rex.W jmp QWORD PTR [rip+0xfffffffffffafab6]        # 0x1001aa8
 1051ff2:	int3   
 1051ff3:	int3   
 1051ff4:	int3   
 1051ff5:	int3   
 1051ff6:	int3   
 1051ff7:	int3   
 1051ff8:	int3   
 1051ff9:	int3   
 1051ffa:	int3   
 1051ffb:	int3   
 1051ffc:	int3   
 1051ffd:	int3   
 1051ffe:	int3   
 1051fff:	int3   
 1052000:	mov    rcx,QWORD PTR [rdx+0xb0]
 1052007:	add    rcx,0x50
 105200b:	rex.W jmp QWORD PTR [rip+0xfffffffffffafa96]        # 0x1001aa8
 1052012:	int3   
 1052013:	int3   
 1052014:	int3   
 1052015:	int3   
 1052016:	int3   
 1052017:	int3   
 1052018:	int3   
 1052019:	int3   
 105201a:	int3   
 105201b:	int3   
 105201c:	int3   
 105201d:	int3   
 105201e:	int3   
 105201f:	int3   
 1052020:	mov    rcx,QWORD PTR [rdx+0xb0]
 1052027:	add    rcx,0x70
 105202b:	rex.W jmp QWORD PTR [rip+0xfffffffffffafa76]        # 0x1001aa8
 1052032:	int3   
 1052033:	int3   
 1052034:	int3   
 1052035:	int3   
 1052036:	int3   
 1052037:	int3   
 1052038:	int3   
 1052039:	int3   
 105203a:	int3   
 105203b:	int3   
 105203c:	int3   
 105203d:	int3   
 105203e:	int3   
 105203f:	int3   
 1052040:	lea    rcx,[rdx+0xb8]
 1052047:	rex.W jmp QWORD PTR [rip+0xfffffffffffafa5a]        # 0x1001aa8
 105204e:	int3   
 105204f:	int3   
 1052050:	lea    rcx,[rdx+0x40]
 1052057:	rex.W jmp QWORD PTR [rip+0xfffffffffffafa4a]        # 0x1001aa8
 105205e:	int3   
 105205f:	int3   
 1052060:	lea    rcx,[rdx+0xe8]
 1052067:	rex.W jmp QWORD PTR [rip+0xfffffffffffafa3a]        # 0x1001aa8
 105206e:	int3   
 105206f:	int3   
 1052070:	mov    rcx,QWORD PTR [rdx+0xe8]
 1052077:	jmp    0x103f95a
 105207c:	int3   
 105207d:	int3   
 105207e:	int3   
 105207f:	int3   
 1052080:	lea    rcx,[rdx+0xe8]
 1052087:	rex.W jmp QWORD PTR [rip+0xfffffffffffafa1a]        # 0x1001aa8
 105208e:	int3   
 105208f:	int3   
 1052090:	lea    rcx,[rdx+0x40]
 1052097:	rex.W jmp QWORD PTR [rip+0xfffffffffffafa0a]        # 0x1001aa8
 105209e:	int3   
 105209f:	int3   
 10520a0:	lea    rcx,[rdx+0x40]
 10520a7:	rex.W jmp QWORD PTR [rip+0xfffffffffffaf9fa]        # 0x1001aa8
 10520ae:	int3   
 10520af:	int3   
 10520b0:	lea    rcx,[rdx+0x40]
 10520b7:	rex.W jmp QWORD PTR [rip+0xfffffffffffaf9ea]        # 0x1001aa8
 10520be:	int3   
 10520bf:	int3   
 10520c0:	mov    rcx,QWORD PTR [rdx+0x40]
 10520c7:	jmp    0x103f95a
 10520cc:	int3   
 10520cd:	int3   
 10520ce:	int3   
 10520cf:	int3   
 10520d0:	lea    rcx,[rdx+0x40]
 10520d7:	rex.W jmp QWORD PTR [rip+0xfffffffffffaf9ca]        # 0x1001aa8
 10520de:	int3   
 10520df:	int3   
 10520e0:	lea    rcx,[rdx+0x40]
 10520e7:	rex.W jmp QWORD PTR [rip+0xfffffffffffaf9ba]        # 0x1001aa8
 10520ee:	int3   
 10520ef:	int3   
 10520f0:	int3   
 10520f1:	int3   
 10520f2:	int3   
 10520f3:	int3   
 10520f4:	int3   
 10520f5:	int3   
 10520f6:	int3   
 10520f7:	int3   
 10520f8:	int3   
 10520f9:	int3   
 10520fa:	int3   
 10520fb:	int3   
 10520fc:	int3   
 10520fd:	int3   
 10520fe:	int3   
 10520ff:	int3   
 1052100:	mov    rcx,QWORD PTR [rdx+0x40]
 1052107:	rex.W jmp QWORD PTR [rip+0xfffffffffffaf99a]        # 0x1001aa8
 105210e:	int3   
 105210f:	int3   
 1052110:	mov    rcx,QWORD PTR [rdx+0x40]
 1052117:	add    rcx,0x8
 105211b:	jmp    0x103d790
 1052120:	int3   
 1052121:	int3   
 1052122:	int3   
 1052123:	int3   
 1052124:	int3   
 1052125:	int3   
 1052126:	int3   
 1052127:	int3   
 1052128:	int3   
 1052129:	int3   
 105212a:	int3   
 105212b:	int3   
 105212c:	int3   
 105212d:	int3   
 105212e:	int3   
 105212f:	int3   
 1052130:	mov    rcx,QWORD PTR [rdx+0x60]
 1052137:	add    rcx,0x28
 105213b:	rex.W jmp QWORD PTR [rip+0xfffffffffffaf966]        # 0x1001aa8
 1052142:	int3   
 1052143:	int3   
 1052144:	int3   
 1052145:	int3   
 1052146:	int3   
 1052147:	int3   
 1052148:	int3   
 1052149:	int3   
 105214a:	int3   
 105214b:	int3   
 105214c:	int3   
 105214d:	int3   
 105214e:	int3   
 105214f:	int3   
 1052150:	mov    rcx,QWORD PTR [rdx+0x60]
 1052157:	add    rcx,0x30
 105215b:	rex.W jmp QWORD PTR [rip+0xfffffffffffaf946]        # 0x1001aa8
 1052162:	int3   
 1052163:	int3   
 1052164:	int3   
 1052165:	int3   
 1052166:	int3   
 1052167:	int3   
 1052168:	int3   
 1052169:	int3   
 105216a:	int3   
 105216b:	int3   
 105216c:	int3   
 105216d:	int3   
 105216e:	int3   
 105216f:	int3   
 1052170:	mov    rcx,QWORD PTR [rdx+0x60]
 1052177:	add    rcx,0x40
 105217b:	rex.W jmp QWORD PTR [rip+0xfffffffffffaf926]        # 0x1001aa8
 1052182:	int3   
 1052183:	int3   
 1052184:	int3   
 1052185:	int3   
 1052186:	int3   
 1052187:	int3   
 1052188:	int3   
 1052189:	int3   
 105218a:	int3   
 105218b:	int3   
 105218c:	int3   
 105218d:	int3   
 105218e:	int3   
 105218f:	int3   
 1052190:	mov    rcx,QWORD PTR [rdx+0x60]
 1052197:	add    rcx,0x48
 105219b:	rex.W jmp QWORD PTR [rip+0xfffffffffffaf906]        # 0x1001aa8
 10521a2:	int3   
 10521a3:	int3   
 10521a4:	int3   
 10521a5:	int3   
 10521a6:	int3   
 10521a7:	int3   
 10521a8:	int3   
 10521a9:	int3   
 10521aa:	int3   
 10521ab:	int3   
 10521ac:	int3   
 10521ad:	int3   
 10521ae:	int3   
 10521af:	int3   
 10521b0:	mov    rcx,QWORD PTR [rdx+0x60]
 10521b7:	add    rcx,0x50
 10521bb:	rex.W jmp QWORD PTR [rip+0xfffffffffffaf8e6]        # 0x1001aa8
 10521c2:	int3   
 10521c3:	int3   
 10521c4:	int3   
 10521c5:	int3   
 10521c6:	int3   
 10521c7:	int3   
 10521c8:	int3   
 10521c9:	int3   
 10521ca:	int3   
 10521cb:	int3   
 10521cc:	int3   
 10521cd:	int3   
 10521ce:	int3   
 10521cf:	int3   
 10521d0:	mov    rcx,QWORD PTR [rdx+0x60]
 10521d7:	add    rcx,0x70
 10521db:	rex.W jmp QWORD PTR [rip+0xfffffffffffaf8c6]        # 0x1001aa8
 10521e2:	int3   
 10521e3:	int3   
 10521e4:	int3   
 10521e5:	int3   
 10521e6:	int3   
 10521e7:	int3   
 10521e8:	int3   
 10521e9:	int3   
 10521ea:	int3   
 10521eb:	int3   
 10521ec:	int3   
 10521ed:	int3   
 10521ee:	int3   
 10521ef:	int3   
 10521f0:	mov    rcx,QWORD PTR [rdx+0x68]
 10521f7:	rex.W jmp QWORD PTR [rip+0xfffffffffffaf8aa]        # 0x1001aa8
 10521fe:	int3   
 10521ff:	int3   
 1052200:	mov    rcx,QWORD PTR [rdx+0x68]
 1052207:	add    rcx,0x8
 105220b:	jmp    0x103d790
 1052210:	int3   
 1052211:	int3   
 1052212:	int3   
 1052213:	int3   
 1052214:	int3   
 1052215:	int3   
 1052216:	int3   
 1052217:	int3   
 1052218:	int3   
 1052219:	int3   
 105221a:	int3   
 105221b:	int3   
 105221c:	int3   
 105221d:	int3   
 105221e:	int3   
 105221f:	int3   
 1052220:	lea    rcx,[rdx+0x58]
 1052227:	rex.W jmp QWORD PTR [rip+0xfffffffffffaf87a]        # 0x1001aa8
 105222e:	int3   
 105222f:	int3   
 1052230:	lea    rcx,[rdx+0x50]
 1052237:	rex.W jmp QWORD PTR [rip+0xfffffffffffaf86a]        # 0x1001aa8
 105223e:	int3   
 105223f:	int3   
 1052240:	int3   
 1052241:	int3   
 1052242:	int3   
 1052243:	int3   
 1052244:	int3   
 1052245:	int3   
 1052246:	int3   
 1052247:	int3   
 1052248:	int3   
 1052249:	int3   
 105224a:	int3   
 105224b:	int3   
 105224c:	int3   
 105224d:	int3   
 105224e:	int3   
 105224f:	int3   
 1052250:	rex push rbp
 1052252:	sub    rsp,0x20
 1052256:	mov    rbp,rdx
 1052259:	mov    eax,DWORD PTR [rbp+0x20]
 105225c:	and    eax,0x1
 105225f:	test   eax,eax
 1052261:	je     0x1052271
 1052263:	and    DWORD PTR [rbp+0x20],0xfffffffe
 1052267:	mov    rcx,QWORD PTR [rbp+0x48]
 105226b:	call   QWORD PTR [rip+0xfffffffffffaf837]        # 0x1001aa8
 1052271:	add    rsp,0x20
 1052275:	pop    rbp
 1052276:	ret    
 1052277:	int3   
 1052278:	int3   
 1052279:	int3   
 105227a:	int3   
 105227b:	int3   
 105227c:	int3   
 105227d:	int3   
 105227e:	int3   
 105227f:	int3   
 1052280:	lea    rcx,[rdx+0x60]
 1052287:	rex.W jmp QWORD PTR [rip+0xfffffffffffaf81a]        # 0x1001aa8
 105228e:	int3   
 105228f:	int3   
 1052290:	lea    rcx,[rdx+0x48]
 1052297:	jmp    0x102dac0
 105229c:	int3   
 105229d:	int3   
 105229e:	int3   
 105229f:	int3   
 10522a0:	mov    rcx,QWORD PTR [rdx+0x70]
 10522a7:	jmp    0x103f95a
 10522ac:	int3   
 10522ad:	int3   
 10522ae:	int3   
 10522af:	int3   
 10522b0:	lea    rcx,[rdx+0x40]
 10522b7:	rex.W jmp QWORD PTR [rip+0xfffffffffffaf7ea]        # 0x1001aa8
 10522be:	int3   
 10522bf:	int3   
 10522c0:	lea    rcx,[rdx+0x50]
 10522c7:	rex.W jmp QWORD PTR [rip+0xfffffffffffaf7da]        # 0x1001aa8
 10522ce:	int3   
 10522cf:	int3   
 10522d0:	lea    rcx,[rdx+0x50]
 10522d7:	rex.W jmp QWORD PTR [rip+0xfffffffffffaf7ca]        # 0x1001aa8
 10522de:	int3   
 10522df:	int3   
 10522e0:	lea    rcx,[rdx+0x40]
 10522e7:	rex.W jmp QWORD PTR [rip+0xfffffffffffaf7ba]        # 0x1001aa8
 10522ee:	int3   
 10522ef:	int3   
 10522f0:	lea    rcx,[rdx+0x70]
 10522f7:	rex.W jmp QWORD PTR [rip+0xfffffffffffaf7aa]        # 0x1001aa8
 10522fe:	int3   
 10522ff:	int3   
 1052300:	int3   
 1052301:	int3   
 1052302:	int3   
 1052303:	int3   
 1052304:	int3   
 1052305:	int3   
 1052306:	int3   
 1052307:	int3   
 1052308:	int3   
 1052309:	int3   
 105230a:	int3   
 105230b:	int3   
 105230c:	int3   
 105230d:	int3   
 105230e:	int3   
 105230f:	int3   
 1052310:	lea    rcx,[rdx+0x50]
 1052317:	rex.W jmp QWORD PTR [rip+0xfffffffffffaf78a]        # 0x1001aa8
 105231e:	int3   
 105231f:	int3   
 1052320:	lea    rcx,[rdx+0x50]
 1052327:	rex.W jmp QWORD PTR [rip+0xfffffffffffaf77a]        # 0x1001aa8
 105232e:	int3   
 105232f:	int3   
 1052330:	int3   
 1052331:	int3   
 1052332:	int3   
 1052333:	int3   
 1052334:	int3   
 1052335:	int3   
 1052336:	int3   
 1052337:	int3   
 1052338:	int3   
 1052339:	int3   
 105233a:	int3   
 105233b:	int3   
 105233c:	int3   
 105233d:	int3   
 105233e:	int3   
 105233f:	int3   
 1052340:	lea    rcx,[rdx+0x90]
 1052347:	rex.W jmp QWORD PTR [rip+0xfffffffffffaf75a]        # 0x1001aa8
 105234e:	int3   
 105234f:	int3   
 1052350:	lea    rcx,[rdx+0xa8]
 1052357:	rex.W jmp QWORD PTR [rip+0xfffffffffffaf74a]        # 0x1001aa8
 105235e:	int3   
 105235f:	int3   
 1052360:	lea    rcx,[rdx+0x90]
 1052367:	rex.W jmp QWORD PTR [rip+0xfffffffffffaf73a]        # 0x1001aa8
 105236e:	int3   
 105236f:	int3   
 1052370:	lea    rcx,[rdx+0xa8]
 1052377:	rex.W jmp QWORD PTR [rip+0xfffffffffffaf72a]        # 0x1001aa8
 105237e:	int3   
 105237f:	int3   
 1052380:	int3   
 1052381:	int3   
 1052382:	int3   
 1052383:	int3   
 1052384:	rex push rbp
 1052386:	sub    rsp,0x20
 105238a:	mov    rbp,rdx
 105238d:	mov    rax,QWORD PTR [rcx]
 1052390:	mov    rdx,rcx
 1052393:	mov    ecx,DWORD PTR [rax]
 1052395:	call   0x10404a2
 105239a:	nop
 105239b:	add    rsp,0x20
 105239f:	pop    rbp
 10523a0:	ret    
 10523a1:	int3   
 10523a2:	int3   
 10523a3:	int3   
 10523a4:	int3   
 10523a5:	int3   
 10523a6:	int3   
 10523a7:	int3   
 10523a8:	rex push rbp
 10523aa:	sub    rsp,0x20
 10523ae:	mov    rbp,rdx
 10523b1:	cmp    DWORD PTR [rbp+0x20],0x0
 10523b5:	jne    0x10523cd
 10523b7:	mov    r9,QWORD PTR [rbp+0x70]
 10523bb:	mov    r8d,DWORD PTR [rbp+0x24]
 10523bf:	mov    rdx,QWORD PTR [rbp+0x58]
 10523c3:	mov    rcx,QWORD PTR [rbp+0x50]
 10523c7:	call   0x1040044
 10523cc:	nop
 10523cd:	add    rsp,0x20
 10523d1:	pop    rbp
 10523d2:	ret    
 10523d3:	int3   
 10523d4:	int3   
 10523d5:	int3   
 10523d6:	int3   
 10523d7:	int3   
 10523d8:	int3   
 10523d9:	int3   
 10523da:	rex push rbp
 10523dc:	sub    rsp,0x20
 10523e0:	mov    rbp,rdx
 10523e3:	mov    QWORD PTR [rbp+0x38],rcx
 10523e7:	mov    QWORD PTR [rbp+0x28],rcx
 10523eb:	mov    rax,QWORD PTR [rbp+0x28]
 10523ef:	mov    rcx,QWORD PTR [rax]
 10523f2:	mov    QWORD PTR [rbp+0x30],rcx
 10523f6:	mov    rax,QWORD PTR [rbp+0x30]
 10523fa:	cmp    DWORD PTR [rax],0xe06d7363
 1052400:	je     0x105240e
 1052402:	mov    DWORD PTR [rbp+0x20],0x0
 1052409:	mov    eax,DWORD PTR [rbp+0x20]
 105240c:	jmp    0x1052414
 105240e:	call   0x104067e
 1052413:	nop
 1052414:	add    rsp,0x20
 1052418:	pop    rbp
 1052419:	ret    
 105241a:	int3   
 105241b:	int3   
 105241c:	int3   
 105241d:	int3   
 105241e:	int3   
 105241f:	int3   
 1052420:	int3   
 1052421:	rex push rbp
 1052423:	sub    rsp,0x20
 1052427:	mov    rbp,rdx
 105242a:	cmp    DWORD PTR [rbp+0x20],0x0
 105242e:	jne    0x1052446
 1052430:	mov    r9,QWORD PTR [rbp+0x78]
 1052434:	mov    r8d,DWORD PTR [rbp+0x70]
 1052438:	mov    rdx,QWORD PTR [rbp+0x68]
 105243c:	mov    rcx,QWORD PTR [rbp+0x60]
 1052440:	call   0x1040044
 1052445:	nop
 1052446:	add    rsp,0x20
 105244a:	pop    rbp
 105244b:	ret    
 105244c:	int3   
 105244d:	int3   
 105244e:	int3   
 105244f:	int3   
 1052450:	int3   
 1052451:	int3   
 1052452:	int3   
 1052453:	rex push rbp
 1052455:	sub    rsp,0x20
 1052459:	mov    rbp,rdx
 105245c:	mov    ecx,0x8
 1052461:	call   0x104068a
 1052466:	nop
 1052467:	add    rsp,0x20
 105246b:	pop    rbp
 105246c:	ret    
 105246d:	int3   
 105246e:	int3   
 105246f:	int3   
 1052470:	int3   
 1052471:	int3   
 1052472:	int3   
 1052473:	int3   
 1052474:	int3   
 1052475:	int3   
 1052476:	int3   
 1052477:	int3   
 1052478:	int3   
 1052479:	int3   
 105247a:	int3   
 105247b:	int3   
 105247c:	int3   
 105247d:	int3   
 105247e:	int3   
 105247f:	int3   
 1052480:	rex push rbp
 1052482:	sub    rsp,0x20
 1052486:	mov    rbp,rdx
 1052489:	mov    rax,QWORD PTR [rcx]
 105248c:	xor    ecx,ecx
 105248e:	cmp    DWORD PTR [rax],0xc0000005
 1052494:	sete   cl
 1052497:	mov    eax,ecx
 1052499:	mov    eax,ecx
 105249b:	add    rsp,0x20
 105249f:	pop    rbp
 10524a0:	ret    
 10524a1:	int3   
 10524a2:	int3   
 10524a3:	int3   
 10524a4:	int3   
 10524a5:	int3   
 10524a6:	int3   
 10524a7:	int3   
 10524a8:	int3   
 10524a9:	int3   
 10524aa:	int3   
 10524ab:	int3   
 10524ac:	int3   
 10524ad:	int3   
 10524ae:	int3   
 10524af:	int3   
 10524b0:	mov    QWORD PTR [rsp+0x10],rdx
 10524b5:	push   rbp
 10524b6:	sub    rsp,0x40
 10524ba:	mov    rbp,rdx
 10524bd:	lea    rax,[rip+0xffffffffffff7093]        # 0x1049557
 10524c4:	add    rsp,0x40
 10524c8:	pop    rbp
 10524c9:	ret    
 10524ca:	int3   
 10524cb:	int3   
 10524cc:	int3   
 10524cd:	int3   
 10524ce:	int3   
 10524cf:	int3   
 10524d0:	int3   
 10524d1:	int3   
 10524d2:	int3   
 10524d3:	int3   
 10524d4:	int3   
 10524d5:	int3   
 10524d6:	int3   
 10524d7:	int3   
 10524d8:	int3   
 10524d9:	int3   
 10524da:	int3   
 10524db:	int3   
 10524dc:	int3   
 10524dd:	int3   
 10524de:	int3   
 10524df:	int3   
 10524e0:	sub    rsp,0x28
 10524e4:	lea    rdx,[rip+0xfffffffffffaf925]        # 0x1001e10
 10524eb:	lea    rcx,[rip+0x113fe]        # 0x10638f0
 10524f2:	call   QWORD PTR [rip+0xfffffffffffaf5b8]        # 0x1001ab0
 10524f8:	lea    rcx,[rip+0xa1]        # 0x10525a0
 10524ff:	add    rsp,0x28
 1052503:	jmp    0x10401b0
 1052508:	int3   
 1052509:	int3   
 105250a:	int3   
 105250b:	int3   
 105250c:	int3   
 105250d:	int3   
 105250e:	int3   
 105250f:	int3   
 1052510:	sub    rsp,0x28
 1052514:	lea    rdx,[rip+0xfffffffffffaf8f5]        # 0x1001e10
 105251b:	lea    rcx,[rip+0x113d6]        # 0x10638f8
 1052522:	call   QWORD PTR [rip+0xfffffffffffaf588]        # 0x1001ab0
 1052528:	lea    rcx,[rip+0x91]        # 0x10525c0
 105252f:	add    rsp,0x28
 1052533:	jmp    0x10401b0
 1052538:	int3   
 1052539:	int3   
 105253a:	int3   
 105253b:	int3   
 105253c:	int3   
 105253d:	int3   
 105253e:	int3   
 105253f:	int3   
 1052540:	sub    rsp,0x28
 1052544:	lea    rdx,[rip+0xfffffffffffaf8c5]        # 0x1001e10
 105254b:	lea    rcx,[rip+0x113ae]        # 0x1063900
 1052552:	call   QWORD PTR [rip+0xfffffffffffaf558]        # 0x1001ab0
 1052558:	lea    rcx,[rip+0x81]        # 0x10525e0
 105255f:	add    rsp,0x28
 1052563:	jmp    0x10401b0
 1052568:	int3   
 1052569:	int3   
 105256a:	int3   
 105256b:	int3   
 105256c:	int3   
 105256d:	int3   
 105256e:	int3   
 105256f:	int3   
 1052570:	rex push rbp
 1052572:	mov    rbp,rsp
 1052575:	sub    rsp,0x20
 1052579:	lea    rcx,[rip+0x80]        # 0x1052600
 1052580:	add    rsp,0x20
 1052584:	pop    rbp
 1052585:	jmp    0x10401b0
 105258a:	int3   
 105258b:	int3   
 105258c:	int3   
 105258d:	int3   
 105258e:	int3   
 105258f:	int3   
 1052590:	int3   
 1052591:	int3   
 1052592:	int3   
 1052593:	int3   
 1052594:	int3   
 1052595:	int3   
 1052596:	int3   
 1052597:	int3   
 1052598:	int3   
 1052599:	int3   
 105259a:	int3   
 105259b:	int3   
 105259c:	int3   
 105259d:	int3   
 105259e:	int3   
 105259f:	int3   
 10525a0:	lea    rcx,[rip+0x11349]        # 0x10638f0
 10525a7:	rex.W jmp QWORD PTR [rip+0xfffffffffffaf4fa]        # 0x1001aa8
 10525ae:	int3   
 10525af:	int3   
 10525b0:	int3   
 10525b1:	int3   
 10525b2:	int3   
 10525b3:	int3   
 10525b4:	int3   
 10525b5:	int3   
 10525b6:	int3   
 10525b7:	int3   
 10525b8:	int3   
 10525b9:	int3   
 10525ba:	int3   
 10525bb:	int3   
 10525bc:	int3   
 10525bd:	int3   
 10525be:	int3   
 10525bf:	int3   
 10525c0:	lea    rcx,[rip+0x11331]        # 0x10638f8
 10525c7:	rex.W jmp QWORD PTR [rip+0xfffffffffffaf4da]        # 0x1001aa8
 10525ce:	int3   
 10525cf:	int3   
 10525d0:	int3   
 10525d1:	int3   
 10525d2:	int3   
 10525d3:	int3   
 10525d4:	int3   
 10525d5:	int3   
 10525d6:	int3   
 10525d7:	int3   
 10525d8:	int3   
 10525d9:	int3   
 10525da:	int3   
 10525db:	int3   
 10525dc:	int3   
 10525dd:	int3   
 10525de:	int3   
 10525df:	int3   
 10525e0:	lea    rcx,[rip+0x11319]        # 0x1063900
 10525e7:	rex.W jmp QWORD PTR [rip+0xfffffffffffaf4ba]        # 0x1001aa8
 10525ee:	int3   
 10525ef:	int3   
 10525f0:	int3   
 10525f1:	int3   
 10525f2:	int3   
 10525f3:	int3   
 10525f4:	int3   
 10525f5:	int3   
 10525f6:	int3   
 10525f7:	int3   
 10525f8:	int3   
 10525f9:	int3   
 10525fa:	int3   
 10525fb:	int3   
 10525fc:	int3   
 10525fd:	int3   
 10525fe:	int3   
 10525ff:	int3   
 1052600:	rex push rbp
 1052602:	mov    rbp,rsp
 1052605:	sub    rsp,0x20
 1052609:	lea    rcx,[rip+0x11288]        # 0x1063898
 1052610:	add    rsp,0x20
 1052614:	pop    rbp
 1052615:	rex.W jmp QWORD PTR [rip+0xfffffffffffaf22c]        # 0x1001848
 105261c:	int3   
 105261d:	int3   
 105261e:	int3   
 105261f:	int3   
 1052620:	adc    DWORD PTR [rax],esp
 1052622:	or     BYTE PTR [rax],al
 1052624:	and    BYTE PTR [rsi+rcx*1+0x0],dl
 1052628:	sbb    esi,DWORD PTR [rcx*1+0x9720d00]
 105262f:	loopne 0x1052638
 1052631:	jo     0x1052639
 1052633:	(bad)  
 1052634:	xchg   esp,eax
 1052635:	inc    BYTE PTR [rbx]
 1052637:	add    BYTE PTR [rax],dh
 1052639:	sbb    al,0x0
 105263b:	add    bh,bh
 105263d:	(bad)  
 105263e:	(bad)  
 105263f:	call   QWORD PTR [rax-0x68]
 1052642:	add    al,0x0
 1052644:	adc    BYTE PTR [rdi-0x10000],ch
 105264a:	(bad)  
 105264b:	(bad)  
 105264c:	cmp    DWORD PTR [rdi+0x0],ebp
 1052652:	add    BYTE PTR [rax],al
 1052654:	add    DWORD PTR [rsi],eax
 1052656:	add    al,BYTE PTR [rax]
 1052658:	(bad)  
 1052659:	xor    al,BYTE PTR [rdx]
 105265b:	push   rax
 105265c:	sbb    DWORD PTR [rdx],esi
 105265e:	or     al,BYTE PTR [rax]
 1052660:	adc    al,0x1
 1052662:	adc    eax,0xbf00d01
 1052667:	loopne 0x1052672
 1052669:	rol    BYTE PTR [rdi],1
 105266b:	rol    BYTE PTR [rip+0x3600470],0x50        # 0x4652ae2
 1052672:	add    dh,BYTE PTR [rax]
 1052674:	movabs al,ds:0x9200001c580003fe
 105267d:	or     BYTE PTR [rax],al
 105267f:	add    bh,bh
 1052681:	(bad)  
 1052682:	(bad)  
 1052683:	call   rax
 1052685:	xchg   edi,eax
 1052686:	add    al,0x0
 1052688:	add    BYTE PTR [rax],al
 105268a:	add    BYTE PTR [rax],al
 105268c:	lock xchg edi,eax
 105268e:	add    al,0x0
 1052690:	add    DWORD PTR [rax],eax
 1052692:	add    BYTE PTR [rax],al
 1052694:	add    BYTE PTR [rax+0x20004],bl
 105269a:	add    BYTE PTR [rax],al
 105269c:	adc    BYTE PTR [rax+0x20004],bl
 10526a2:	add    BYTE PTR [rax],al
 10526a4:	and    BYTE PTR [rax+0x20004],bl
 10526aa:	add    BYTE PTR [rax],al
 10526ac:	xor    BYTE PTR [rax-0x504ffffc],bl
 10526b2:	add    BYTE PTR [rax],al
 10526b4:	(bad)  
 10526b5:	(bad)  
 10526b6:	(bad)  
 10526b7:	dec    DWORD PTR [rcx]
 10526b9:	mov    al,0x0
 10526bb:	add    BYTE PTR [rax],al
 10526bd:	add    BYTE PTR [rax],al
 10526bf:	add    BYTE PTR [rbx],dh
 10526c1:	mov    al,0x0
 10526c3:	add    BYTE PTR [rcx],al
 10526c5:	add    BYTE PTR [rax],al
 10526c7:	add    BYTE PTR [rdi],bh
 10526c9:	mov    al,0x0
 10526cb:	add    BYTE PTR [rdx],al
 10526cd:	add    BYTE PTR [rax],al
 10526cf:	add    bl,dh
 10526d1:	mov    al,0x0
 10526d3:	add    BYTE PTR [rbx],al
 10526d5:	add    BYTE PTR [rax],al
 10526d7:	add    BYTE PTR [rax],cl
 10526d9:	mov    cl,0x0
 10526db:	add    BYTE PTR [rdx],al
 10526dd:	add    BYTE PTR [rax],al
 10526df:	add    BYTE PTR [rdx],dh
 10526e1:	mov    bl,0x0
 10526e3:	add    BYTE PTR [rax+rax*1],al
 10526e6:	add    BYTE PTR [rax],al
 10526e8:	gs mov bl,0x0
 10526eb:	add    BYTE PTR [rdx],al
 10526ed:	add    BYTE PTR [rax],al
 10526ef:	add    BYTE PTR [rdx+0x10000b3],ch
 10526f5:	add    BYTE PTR [rax],al
 10526f7:	add    BYTE PTR [rbx+rsi*4+0x20000],ch
 10526fe:	add    BYTE PTR [rax],al
 1052700:	ret    
 1052701:	mov    bl,0x0
 1052703:	add    BYTE PTR [rip+0xffffffffde000000],al        # 0xffffffffdf052709
 1052709:	mov    bl,0x0
 105270b:	add    BYTE PTR [rdx],al
 105270d:	add    BYTE PTR [rax],al
 105270f:	add    BYTE PTR [rbx],ah
 1052711:	mov    ah,0x0
 1052713:	add    BYTE PTR [rcx],al
 1052715:	add    BYTE PTR [rax],al
 1052717:	add    BYTE PTR [rdi],ch
 1052719:	mov    ah,0x0
 105271b:	add    bh,bh
 105271d:	(bad)  
 105271e:	(bad)  
 105271f:	push   QWORD PTR [rsp+rsi*4]
 1052722:	add    BYTE PTR [rax],al
 1052724:	add    al,BYTE PTR [rax]
 1052726:	add    BYTE PTR [rax],al
 1052728:	outs   dx,DWORD PTR ds:[rsi]
 1052729:	mov    ah,0x0
 105272b:	add    bh,bh
 105272d:	(bad)  
 105272e:	(bad)  
 105272f:	inc    DWORD PTR [rcx]
 1052731:	(bad)  
 1052732:	add    al,BYTE PTR [rax]
 1052734:	(bad)  
 1052735:	xor    al,BYTE PTR [rdx]
 1052737:	xor    BYTE PTR [rcx],bl
 1052739:	(bad)  
 105273a:	or     eax,0x71742e00
 105273f:	add    BYTE PTR [rdx],ch
 1052741:	fs jo  0x1052744
 1052744:	es xor al,0x6f
 1052747:	add    BYTE PTR [rdx],bl
 1052749:	add    DWORD PTR [rax+0x0],ebp
 105274c:	or     al,0xf0
 105274e:	or     ah,al
 1052750:	or     al,dl
 1052752:	(bad)  
 1052753:	rol    BYTE PTR [rax+rdx*2],0x0
 1052757:	add    BYTE PTR [rax-0x7ffffc02],ah
 105275d:	sbb    al,0x0
 105275f:	add    BYTE PTR [rdx],dh
 1052761:	add    eax,DWORD PTR [rax]
 1052763:	add    bh,bh
 1052765:	(bad)  
 1052766:	(bad)  
 1052767:	call   rax
 1052769:	cwde   
 105276a:	add    al,0x0
 105276c:	add    BYTE PTR [rax],al
 105276e:	add    BYTE PTR [rax],al
 1052770:	loopne 0x105270a
 1052772:	add    al,0x0
 1052774:	add    DWORD PTR [rax],eax
 1052776:	add    BYTE PTR [rax],al
 1052778:	lock cwde 
 105277a:	add    al,0x0
 105277c:	add    DWORD PTR [rax],eax
 105277e:	add    BYTE PTR [rax],al
 1052780:	add    BYTE PTR [rcx+0x10004],bl
 1052786:	add    BYTE PTR [rax],al
 1052788:	adc    BYTE PTR [rcx+0x40004],bl
 105278e:	add    BYTE PTR [rax],al
 1052790:	and    BYTE PTR [rcx+0x40004],bl
 1052796:	add    BYTE PTR [rax],al
 1052798:	xor    BYTE PTR [rcx+0x60004],bl
 105279e:	add    BYTE PTR [rax],al
 10527a0:	rex cdq 
 10527a2:	add    al,0x0
 10527a4:	(bad)  
 10527a5:	add    BYTE PTR [rax],al
 10527a7:	add    BYTE PTR [rax-0x67],dl
 10527aa:	add    al,0x0
 10527ac:	(bad)  
 10527ad:	add    BYTE PTR [rax],al
 10527af:	add    BYTE PTR [rax-0x67],ah
 10527b2:	add    al,0x0
 10527b4:	or     DWORD PTR [rax],eax
 10527b6:	add    BYTE PTR [rax],al
 10527b8:	jo     0x1052753
 10527ba:	add    al,0x0
 10527bc:	add    al,0x0
 10527be:	add    BYTE PTR [rax],al
 10527c0:	sbb    BYTE PTR [rcx+0x40004],0x0
 10527c7:	add    BYTE PTR [rax+0x1000499],dl
 10527cd:	add    BYTE PTR [rax],al
 10527cf:	add    BYTE PTR [rax+0xd000499],ah
 10527d5:	add    BYTE PTR [rax],al
 10527d7:	add    BYTE PTR [rax-0x2ffffb67],dh
 10527dd:	mov    ah,0x0
 10527df:	add    bh,bh
 10527e1:	(bad)  
 10527e2:	(bad)  
 10527e3:	jmp    FWORD PTR [rdi]
 10527e5:	mov    ch,0x0
 10527e7:	add    BYTE PTR [rax],al
 10527e9:	add    BYTE PTR [rax],al
 10527eb:	add    BYTE PTR [rsi-0x4b],bl
 10527ee:	add    BYTE PTR [rax],al
 10527f0:	add    DWORD PTR [rax],eax
 10527f2:	add    BYTE PTR [rax],al
 10527f4:	movabs ds:0xb1000000020000b5,al
 10527fd:	mov    ch,0x0
 10527ff:	add    BYTE PTR [rcx],al
 1052801:	add    BYTE PTR [rax],al
 1052803:	add    bl,dl
 1052805:	mov    ch,0x0
 1052807:	add    BYTE PTR [rbx],al
 1052809:	add    BYTE PTR [rax],al
 105280b:	add    dl,ah
 105280d:	mov    ch,0x0
 105280f:	add    BYTE PTR [rcx],al
 1052811:	add    BYTE PTR [rax],al
 1052813:	add    BYTE PTR [rsi+0x40000b6],bl
 1052819:	add    BYTE PTR [rax],al
 105281b:	add    dl,bl
 105281d:	mov    dh,0x0
 105281f:	add    BYTE PTR [rcx],al
 1052821:	add    BYTE PTR [rax],al
 1052823:	add    bh,bl
 1052825:	mov    dh,0x0
 1052827:	add    BYTE PTR [rax+rax*1],al
 105282a:	add    BYTE PTR [rax],al
 105282c:	stc    
 105282d:	mov    dh,0x0
 105282f:	add    BYTE PTR [rip+0x6e000000],al        # 0x6f052835
 1052835:	mov    bh,0x0
 1052837:	add    BYTE PTR [rax+rax*1],al
 105283a:	add    BYTE PTR [rax],al
 105283c:	jge    0x10527f5
 105283e:	add    BYTE PTR [rax],al
 1052840:	add    DWORD PTR [rax],eax
 1052842:	add    BYTE PTR [rax],al
 1052844:	(bad)  
 1052845:	mov    bh,0x0
 1052847:	add    BYTE PTR [rax+rax*1],al
 105284a:	add    BYTE PTR [rax],al
 105284c:	sbb    DWORD PTR [rax+0x60000],edi
 1052852:	add    BYTE PTR [rax],al
 1052854:	and    eax,0x70000b8
 1052859:	add    BYTE PTR [rax],al
 105285b:	add    BYTE PTR [rsi-0x48],ah
 105285e:	add    BYTE PTR [rax],al
 1052860:	or     BYTE PTR [rax],al
 1052862:	add    BYTE PTR [rax],al
 1052864:	jne    0x105281e
 1052866:	add    BYTE PTR [rax],al
 1052868:	(bad)  
 1052869:	add    BYTE PTR [rax],al
 105286b:	add    BYTE PTR [rcx+0x90000b8],ah
 1052871:	add    BYTE PTR [rax],al
 1052873:	add    BYTE PTR [rsi+0xa0000b8],dh
 1052879:	add    BYTE PTR [rax],al
 105287b:	add    bh,bl
 105287d:	mov    eax,0x90000
 1052882:	add    BYTE PTR [rax],al
 1052884:	(bad)  
 1052885:	mov    eax,0x70000
 105288a:	add    BYTE PTR [rax],al
 105288c:	cmc    
 105288d:	mov    eax,0x60000
 1052892:	add    BYTE PTR [rax],al
 1052894:	add    DWORD PTR [rcx+0x40000],edi
 105289a:	add    BYTE PTR [rax],al
 105289c:	sbb    edi,DWORD PTR [rcx+0xb0000]
 10528a2:	add    BYTE PTR [rax],al
 10528a4:	(bad)  
 10528a5:	mov    ecx,0x40000
 10528aa:	add    BYTE PTR [rax],al
 10528ac:	pop    rcx
 10528ad:	mov    ecx,0xc0000
 10528b2:	add    BYTE PTR [rax],al
 10528b4:	js     0x105286f
 10528b6:	add    BYTE PTR [rax],al
 10528b8:	add    al,0x0
 10528ba:	add    BYTE PTR [rax],al
 10528bc:	std    
 10528bd:	mov    ecx,0x10000
 10528c2:	add    BYTE PTR [rax],al
 10528c4:	rex.RX mov edx,0xd0000
 10528ca:	add    BYTE PTR [rax],al
 10528cc:	push   rbp
 10528cd:	mov    edx,0xe0000
 10528d2:	add    BYTE PTR [rax],al
 10528d4:	jne    0x1052890
 10528d6:	add    BYTE PTR [rax],al
 10528d8:	or     eax,0xbb000000
 10528dd:	mov    edx,0x10000
 10528e2:	add    BYTE PTR [rax],al
 10528e4:	(bad)  
 10528e5:	mov    edx,0x0
 10528ea:	add    BYTE PTR [rax],al
 10528ec:	enter  0xba,0x0
 10528f0:	add    DWORD PTR [rax],eax
 10528f2:	add    BYTE PTR [rax],al
 10528f4:	fdivr  DWORD PTR [rdx+0x0]
 10528fa:	add    BYTE PTR [rax],al
 10528fc:	push   rbp
 10528fd:	mov    ebx,0x40000
 1052902:	add    BYTE PTR [rax],al
 1052904:	fs mov ebx,0x10000
 105290a:	add    BYTE PTR [rax],al
 105290c:	jo     0x10528c9
 105290e:	add    BYTE PTR [rax],al
 1052910:	add    BYTE PTR [rax],al
 1052912:	add    BYTE PTR [rax],al
 1052914:	jl     0x10528d1
 1052916:	add    BYTE PTR [rax],al
 1052918:	(bad)  
 1052919:	(bad)  
 105291a:	(bad)  
 105291b:	call   FWORD PTR [rcx]
 105291d:	cs (bad) 
 105291f:	add    BYTE PTR [rsp+riz*2],bl
 1052922:	adc    al,BYTE PTR [rcx]
 1052924:	sbb    BYTE PTR [rcx+rdx*1],dh
 1052927:	add    DWORD PTR [rbx],ecx
 1052929:	add    DWORD PTR [rsi],ecx
 105292b:	add    DWORD PTR [rax+rsi*2],eax
 105292e:	add    BYTE PTR [rax],al
 1052930:	movabs al,ds:0x6200001ca80003fe
 1052939:	or     BYTE PTR [rax],al
 105293b:	add    bh,bh
 105293d:	(bad)  
 105293e:	(bad)  
 105293f:	call   QWORD PTR [rax]
 1052941:	(bad)  
 1052942:	add    al,0x0
 1052944:	add    BYTE PTR [rax],al
 1052946:	add    BYTE PTR [rax],al
 1052948:	and    BYTE PTR [rdx+0x4],bl
 105294e:	add    BYTE PTR [rax],al
 1052950:	xor    BYTE PTR [rdx-0x442ffffc],bl
 1052956:	add    BYTE PTR [rax],al
 1052958:	(bad)  
 1052959:	(bad)  
 105295a:	(bad)  
 105295b:	dec    DWORD PTR [rip+0xbc]        # 0x1052a1d
 1052961:	add    BYTE PTR [rax],al
 1052963:	add    BYTE PTR [rsp+rdi*4],dl
 1052966:	add    BYTE PTR [rax],al
 1052968:	(bad)  
 1052969:	(bad)  
 105296a:	(bad)  
 105296b:	jmp    QWORD PTR [rsi]
 105296d:	mov    esp,0x0
 1052972:	add    BYTE PTR [rax],al
 1052974:	xor    al,0xbc
 1052976:	add    BYTE PTR [rax],al
 1052978:	(bad)  
 1052979:	(bad)  
 105297a:	(bad)  
 105297b:	inc    DWORD PTR [rsi-0x44]
 105297e:	add    BYTE PTR [rax],al
 1052980:	add    BYTE PTR [rax],al
 1052982:	add    BYTE PTR [rax],al
 1052984:	jb     0x1052942
 1052986:	add    BYTE PTR [rax],al
 1052988:	add    DWORD PTR [rax],eax
 105298a:	add    BYTE PTR [rax],al
 105298c:	movabs eax,ds:0xe9000000000000bc
 1052995:	mov    esp,0xffff0000
 105299a:	(bad)  
 105299b:	(bad)  
 105299c:	sti    
 105299d:	mov    esp,0x0
 10529a2:	add    BYTE PTR [rax],al
 10529a4:	or     eax,0x20000bd
 10529a9:	add    BYTE PTR [rax],al
 10529ab:	add    BYTE PTR [rip+0xbd],dh        # 0x1052a6e
 10529b1:	add    BYTE PTR [rax],al
 10529b3:	add    BYTE PTR [rbp-0x43],bh
 10529b6:	add    BYTE PTR [rax],al
 10529b8:	(bad)  
 10529b9:	(bad)  
 10529ba:	(bad)  
 10529bb:	call   FWORD PTR [rcx]
 10529bd:	cs (bad) 
 10529bf:	add    BYTE PTR [rsp+riz*2],bl
 10529c2:	adc    eax,DWORD PTR [rcx]
 10529c4:	sbb    BYTE PTR [rdx+rdx*1],dh
 10529c7:	add    DWORD PTR [rbx],ecx
 10529c9:	add    DWORD PTR [rsi],ecx
 10529cb:	add    DWORD PTR [rax+rsi*2],eax
 10529ce:	add    BYTE PTR [rax],al
 10529d0:	movabs al,ds:0x6200001cd00003fe
 10529d9:	or     BYTE PTR [rax],al
 10529db:	add    bh,bh
 10529dd:	(bad)  
 10529de:	(bad)  
 10529df:	inc    DWORD PTR [rax+0x49a]
 10529e5:	add    BYTE PTR [rax],al
 10529e7:	add    BYTE PTR [rax-0x3ffffb66],dl
 10529ed:	mov    ebp,0xffff0000
 10529f2:	(bad)  
 10529f3:	inc    DWORD PTR [rax]
 10529f5:	mov    esi,0x0
 10529fa:	add    BYTE PTR [rax],al
 10529fc:	cmp    al,0xbe
 10529fe:	add    BYTE PTR [rax],al
 1052a00:	add    DWORD PTR [rax],eax
 1052a02:	add    BYTE PTR [rax],al
 1052a04:	imul   edi,DWORD PTR [rsi+0x0],0x0
 1052a0b:	add    BYTE PTR [rbx-0xffff42],dh
 1052a11:	(bad)  
 1052a12:	(bad)  
 1052a13:	inc    edx
 1052a15:	mov    esi,0x0
 1052a1a:	add    BYTE PTR [rax],al
 1052a1c:	in     al,0xbe
 1052a1e:	add    BYTE PTR [rax],al
 1052a20:	(bad)  
 1052a21:	(bad)  
 1052a22:	(bad)  
 1052a23:	inc    DWORD PTR [rcx]
 1052a25:	adc    al,0x8
 1052a27:	add    BYTE PTR [rsp+riz*2],dl
 1052a2a:	or     al,0x0
 1052a2c:	adc    al,0x54
 1052a2e:	or     eax,DWORD PTR [rax]
 1052a30:	adc    al,0x34
 1052a32:	or     al,BYTE PTR [rax]
 1052a34:	adc    al,0x72
 1052a36:	adc    BYTE PTR [rax+0x19],dh
 1052a39:	xor    al,0x9
 1052a3b:	add    BYTE PTR [rdx],bl
 1052a3d:	add    DWORD PTR [rcx+rax*1+0xb],esi
 1052a41:	lock or eax,esp
 1052a44:	(bad)  
 1052a45:	rol    BYTE PTR [rip+0x3600470],0x30        # 0x4652ebc
 1052a4c:	add    dl,BYTE PTR [rax+0x0]
 1052a4f:	add    BYTE PTR [rax-0x7fffc02],ah
 1052a55:	sbb    al,0x0
 1052a57:	add    BYTE PTR [rdx-0xfffff5],dl
 1052a5d:	(bad)  
 1052a5e:	(bad)  
 1052a5f:	inc    DWORD PTR [rax+0x498]
 1052a65:	add    BYTE PTR [rax],al
 1052a67:	add    BYTE PTR [rax+0x498],dl
 1052a6d:	add    BYTE PTR [rax],al
 1052a6f:	add    BYTE PTR [rax+0x498],ah
 1052a75:	add    BYTE PTR [rax],al
 1052a77:	add    BYTE PTR [rax+0x10000498],dh
 1052a7d:	rol    BYTE PTR [rax],0x0
 1052a80:	(bad)  
 1052a81:	(bad)  
 1052a82:	(bad)  
 1052a83:	call   FWORD PTR [rcx-0x40]
 1052a86:	add    BYTE PTR [rax],al
 1052a88:	add    BYTE PTR [rax],al
 1052a8a:	add    BYTE PTR [rax],al
 1052a8c:	(bad)  
 1052a8d:	rol    BYTE PTR [rax],0x0
 1052a90:	(bad)  
 1052a91:	(bad)  
 1052a92:	(bad)  
 1052a93:	push   QWORD PTR [rdx-0x40]
 1052a96:	add    BYTE PTR [rax],al
 1052a98:	add    BYTE PTR [rax],al
 1052a9a:	add    BYTE PTR [rax],al
 1052a9c:	rol    DWORD PTR cs:[rax],0x0
 1052aa0:	add    DWORD PTR [rax],eax
 1052aa2:	add    BYTE PTR [rax],al
 1052aa4:	rol    QWORD PTR [rax],0x0
 1052aa8:	add    BYTE PTR [rax],al
 1052aaa:	add    BYTE PTR [rax],al
 1052aac:	sub    al,0xc2
 1052aae:	add    BYTE PTR [rax],al
 1052ab0:	add    al,BYTE PTR [rax]
 1052ab2:	add    BYTE PTR [rax],al
 1052ab4:	imul   eax,edx,0x0
 1052aba:	add    BYTE PTR [rax],al
 1052abc:	scas   al,BYTE PTR es:[rdi]
 1052abd:	ret    0x0
 1052ac0:	(bad)  
 1052ac1:	(bad)  
 1052ac2:	(bad)  
 1052ac3:	(bad)  
 1052ac4:	mov    ebp,0xc2
 1052ac9:	add    BYTE PTR [rax],al
 1052acb:	add    ch,cl
 1052acd:	ret    0x0
 1052ad0:	add    eax,DWORD PTR [rax]
 1052ad2:	add    BYTE PTR [rax],al
 1052ad4:	call   0x1052b9b
 1052ad9:	add    BYTE PTR [rax],al
 1052adb:	add    BYTE PTR [rip+0xffffffffff0000c3],ch        # 0x52ba4
 1052ae1:	(bad)  
 1052ae2:	(bad)  
 1052ae3:	inc    DWORD PTR [rcx]
 1052ae5:	clts   
 1052ae7:	add    BYTE PTR [rdi],cl
 1052ae9:	fs (bad) 
 1052aeb:	add    BYTE PTR [rdi],cl
 1052aed:	xor    al,0x6
 1052aef:	add    BYTE PTR [rdi],cl
 1052af1:	xor    cl,BYTE PTR [rbx]
 1052af3:	jo     0x1052af6
 1052af5:	or     al,BYTE PTR [rax+rax*1]
 1052af8:	or     dh,BYTE PTR [rsi+rax*1]
 1052afb:	add    BYTE PTR [rdx],cl
 1052afd:	xor    al,BYTE PTR [rsi]
 1052aff:	jo     0x1052b02
 1052b01:	adc    al,0x8
 1052b03:	add    BYTE PTR [rsp+riz*2],dl
 1052b06:	or     BYTE PTR [rax],al
 1052b08:	adc    al,0x54
 1052b0a:	(bad)  
 1052b0b:	add    BYTE PTR [rsp+rsi*1],dl
 1052b0e:	(bad)  
 1052b0f:	add    BYTE PTR [rdx+rsi*1],dl
 1052b12:	adc    BYTE PTR [rax+0x1],dh
 1052b15:	or     al,BYTE PTR [rax+rax*1]
 1052b18:	or     dh,BYTE PTR [rsi+rax*1]
 1052b1b:	add    BYTE PTR [rdx],cl
 1052b1d:	xor    al,BYTE PTR [rsi]
 1052b1f:	jo     0x1052b32
 1052b21:	(bad)  
 1052b22:	or     BYTE PTR [rax],al
 1052b24:	(bad)  
 1052b25:	fs or  eax,0xc541900
 1052b2b:	add    BYTE PTR [rsp+rsi*1],dl
 1052b2e:	or     al,BYTE PTR [rax]
 1052b30:	(bad)  
 1052b31:	jb     0x1052b35
 1052b33:	jo     0x1052ac9
 1052b35:	inc    BYTE PTR [rbx]
 1052b37:	add    BYTE PTR [rax],ah
 1052b39:	sbb    eax,0xffff0000
 1052b3e:	(bad)  
 1052b3f:	inc    eax
 1052b41:	fwait
 1052b42:	add    al,0x0
 1052b44:	(bad)  
 1052b45:	(bad)
 1052b48:	(bad)  
 1052b49:	(bad)  
 1052b4a:	(bad)  
 1052b4b:	call   FWORD PTR [rdx]
 1052b4d:	mov    BYTE PTR [rax],0x0
 1052b50:	add    BYTE PTR [rax],al
 1052b52:	add    BYTE PTR [rax],al
 1052b54:	mov    BYTE PTR fs:[rax],0x0
 1052b58:	(bad)  
 1052b59:	(bad)  
 1052b5a:	(bad)  
 1052b5b:	inc    DWORD PTR [rcx]
 1052b5d:	(bad)  
 1052b5e:	add    al,BYTE PTR [rax]
 1052b60:	(bad)  
 1052b61:	xor    al,BYTE PTR [rdx]
 1052b63:	push   rax
 1052b64:	add    DWORD PTR [rdi],ecx
 1052b66:	(bad)  
 1052b67:	add    BYTE PTR [rdi],cl
 1052b69:	fs (bad) 
 1052b6b:	add    BYTE PTR [rdi],cl
 1052b6d:	xor    al,0x6
 1052b6f:	add    BYTE PTR [rdi],cl
 1052b71:	xor    cl,BYTE PTR [rbx]
 1052b73:	jo     0x1052b76
 1052b75:	(bad)  
 1052b76:	add    al,BYTE PTR [rax]
 1052b78:	(bad)  
 1052b79:	xor    al,BYTE PTR [rdx]
 1052b7b:	xor    BYTE PTR [rcx],al
 1052b7d:	(bad)  
 1052b7e:	add    al,BYTE PTR [rax]
 1052b80:	(bad)  
 1052b81:	xor    al,BYTE PTR [rdx]
 1052b83:	xor    BYTE PTR [rcx],dl
 1052b85:	sbb    DWORD PTR [rsi],eax
 1052b87:	add    BYTE PTR [rcx],bl
 1052b89:	lldt   WORD PTR fs:[rsp+rsi*1]
 1052b8e:	(bad)  
 1052b8f:	add    BYTE PTR [rsi],al
 1052b91:	mov    dl,0x2
 1052b93:	jo     0x1052b29
 1052b95:	inc    BYTE PTR [rbx]
 1052b97:	add    BYTE PTR [rax+0x1d],cl
 1052b9a:	add    BYTE PTR [rax],al
 1052b9c:	(bad)  
 1052b9d:	(bad)  
 1052b9e:	(bad)  
 1052b9f:	call   QWORD PTR [rax-0x66]
 1052ba2:	add    al,0x0
 1052ba4:	add    BYTE PTR [rax],al
 1052ba6:	add    BYTE PTR [rax],al
 1052ba8:	(bad)  
 1052ba9:	(bad)  
 1052baa:	add    al,0x0
 1052bac:	movabs al,ds:0xf1ffffffff0000c7
 1052bb5:	mov    DWORD PTR [rax],0x0
 1052bbb:	add    BYTE PTR [rcx],al
 1052bbd:	enter  0x0,0x1
 1052bc1:	add    BYTE PTR [rax],al
 1052bc3:	add    BYTE PTR [rdi],bl
 1052bc5:	enter  0x0,0x0
 1052bc9:	add    BYTE PTR [rax],al
 1052bcb:	add    BYTE PTR [rdi-0x38],ah
 1052bce:	add    BYTE PTR [rax],al
 1052bd0:	(bad)  
 1052bd1:	(bad)  
 1052bd2:	(bad)  
 1052bd3:	inc    DWORD PTR [rcx]
 1052bd5:	clts   
 1052bd7:	add    BYTE PTR [rdi],cl
 1052bd9:	fs (bad) 
 1052bdb:	add    BYTE PTR [rdi],cl
 1052bdd:	xor    al,0x6
 1052bdf:	add    BYTE PTR [rdi],cl
 1052be1:	xor    cl,BYTE PTR [rbx]
 1052be3:	jo     0x1052be6
 1052be5:	clts   
 1052be7:	add    BYTE PTR [rdi],cl
 1052be9:	fs (bad) 
 1052beb:	add    BYTE PTR [rdi],cl
 1052bed:	xor    al,0x6
 1052bef:	add    BYTE PTR [rdi],cl
 1052bf1:	xor    cl,BYTE PTR [rbx]
 1052bf3:	jo     0x1052bf6
 1052bf5:	or     al,BYTE PTR [rax+rax*1]
 1052bf8:	or     dh,BYTE PTR [rsi+rax*1]
 1052bfb:	add    BYTE PTR [rdx],cl
 1052bfd:	xor    al,BYTE PTR [rsi]
 1052bff:	jo     0x1052c02
 1052c01:	or     al,BYTE PTR [rax+rax*1]
 1052c04:	or     dh,BYTE PTR [rsi+rax*1]
 1052c07:	add    BYTE PTR [rdx],cl
 1052c09:	xor    al,BYTE PTR [rsi]
 1052c0b:	jo     0x1052c0e
 1052c0d:	or     al,BYTE PTR [rax+rax*1]
 1052c10:	or     dh,BYTE PTR [rsi+rax*1]
 1052c13:	add    BYTE PTR [rdx],cl
 1052c15:	xor    al,BYTE PTR [rsi]
 1052c17:	jo     0x1052c32
 1052c19:	es add eax,0x50010b00
 1052c1f:	add    BYTE PTR [rax+rsi*2],al
 1052c22:	add    esp,DWORD PTR [rax+0x2]
 1052c25:	xor    BYTE PTR [rax],al
 1052c27:	add    BYTE PTR [rax+0x700003fe],ah
 1052c2d:	sbb    eax,0x2720000
 1052c32:	add    BYTE PTR [rax],al
 1052c34:	(bad)  
 1052c35:	(bad)  
 1052c36:	(bad)  
 1052c37:	jmp    rax
 1052c39:	(bad)  
 1052c3a:	add    al,0x0
 1052c3c:	adc    dl,cl
 1052c3e:	add    BYTE PTR [rax],al
 1052c40:	(bad)  
 1052c41:	(bad)  
 1052c42:	(bad)  
 1052c43:	(bad)  
 1052c44:	fmul   st(2),st
 1052c46:	add    BYTE PTR [rax],al
 1052c48:	add    BYTE PTR [rax],al
 1052c4a:	add    BYTE PTR [rax],al
 1052c4c:	bswap  ebx
 1052c4e:	add    BYTE PTR [rax],al
 1052c50:	(bad)  
 1052c51:	(bad)  
 1052c52:	(bad)  
 1052c53:	call   QWORD PTR [rcx]
 1052c55:	(bad)  
 1052c56:	or     BYTE PTR [rax],al
 1052c58:	(bad)  
 1052c59:	fs (bad) 
 1052c5b:	add    BYTE PTR [rcx],bl
 1052c5d:	push   rsp
 1052c5e:	or     eax,0xc341400
 1052c63:	add    BYTE PTR [rsi],al
 1052c65:	xchg   edx,eax
 1052c66:	add    dh,BYTE PTR [rax-0x6c]
 1052c69:	inc    BYTE PTR [rbx]
 1052c6b:	add    BYTE PTR [rax-0xffffe3],bl
 1052c71:	(bad)  
 1052c72:	(bad)  
 1052c73:	call   rax
 1052c75:	cdq    
 1052c76:	add    al,0x0
 1052c78:	add    BYTE PTR [rax],al
 1052c7a:	add    BYTE PTR [rax],al
 1052c7c:	loopne 0x1052c17
 1052c7e:	add    al,0x0
 1052c80:	add    BYTE PTR [rax],al
 1052c82:	add    BYTE PTR [rax],al
 1052c84:	lock cdq 
 1052c86:	add    al,0x0
 1052c88:	rex retf 
 1052c8a:	add    BYTE PTR [rax],al
 1052c8c:	(bad)  
 1052c8d:	(bad)  
 1052c8e:	(bad)  
 1052c8f:	push   QWORD PTR [rbx+rcx*8+0x0]
 1052c93:	add    BYTE PTR [rax],al
 1052c95:	add    BYTE PTR [rax],al
 1052c97:	add    BYTE PTR [rsi+0x10000cb],dh
 1052c9d:	add    BYTE PTR [rax],al
 1052c9f:	add    ah,dl
 1052ca1:	retf   
 1052ca2:	add    BYTE PTR [rax],al
 1052ca4:	add    BYTE PTR [rax],al
 1052ca6:	add    BYTE PTR [rax],al
 1052ca8:	rex.R int3 
 1052caa:	add    BYTE PTR [rax],al
 1052cac:	add    al,BYTE PTR [rax]
 1052cae:	add    BYTE PTR [rax],al
 1052cb0:	pop    rdi
 1052cb1:	int3   
 1052cb2:	add    BYTE PTR [rax],al
 1052cb4:	add    BYTE PTR [rax],al
 1052cb6:	add    BYTE PTR [rax],al
 1052cb8:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1052cb9:	int3   
 1052cba:	add    BYTE PTR [rax],al
 1052cbc:	(bad)  
 1052cbd:	(bad)  
 1052cbe:	(bad)  
 1052cbf:	call   QWORD PTR [rcx]
 1052cc1:	adc    al,0x4
 1052cc3:	add    BYTE PTR [rsp+rsi*1],dl
 1052cc6:	or     eax,0x2920600
 1052ccb:	jo     0x1052c61
 1052ccd:	inc    BYTE PTR [rbx]
 1052ccf:	add    al,al
 1052cd1:	sbb    eax,0xffff0000
 1052cd6:	(bad)  
 1052cd7:	push   QWORD PTR [rax+0x49a]
 1052cdd:	add    BYTE PTR [rax],al
 1052cdf:	add    al,al
 1052ce1:	(bad)  
 1052ce2:	add    al,0x0
 1052ce4:	ror    ah,1
 1052ce6:	add    BYTE PTR [rax],al
 1052ce8:	(bad)  
 1052ce9:	(bad)  
 1052cea:	(bad)  
 1052ceb:	push   rbx
 1052ced:	int3   
 1052cee:	add    BYTE PTR [rax],al
 1052cf0:	add    BYTE PTR [rax],al
 1052cf2:	add    BYTE PTR [rax],al
 1052cf4:	es int 0x0
 1052cf7:	add    BYTE PTR [rcx],al
 1052cf9:	add    BYTE PTR [rax],al
 1052cfb:	add    BYTE PTR [rbp-0x33],al
 1052cfe:	add    BYTE PTR [rax],al
 1052d00:	add    BYTE PTR [rax],al
 1052d02:	add    BYTE PTR [rax],al
 1052d04:	(bad)  
 1052d05:	int    0x0
 1052d07:	add    bh,bh
 1052d09:	(bad)  
 1052d0a:	(bad)  
 1052d0b:	call   FWORD PTR [rcx]
 1052d0d:	and    cl,BYTE PTR [rax]
 1052d0f:	add    BYTE PTR [rax],dl
 1052d11:	add    DWORD PTR [rbx],edx
 1052d13:	add    BYTE PTR [rcx],cl
 1052d15:	lock (bad) 
 1052d17:	loopne 0x1052d1e
 1052d19:	jo     0x1052d1f
 1052d1b:	(bad)  
 1052d1c:	add    edx,DWORD PTR [rax+0x2]
 1052d1f:	xor    BYTE PTR [rax+0x2],cl
 1052d22:	add    al,0x0
 1052d24:	add    BYTE PTR [rax],0x0
 1052d27:	add    BYTE PTR [rcx],dl
 1052d29:	(bad)  
 1052d2a:	add    al,0x0
 1052d2c:	(bad)  
 1052d2d:	xor    al,0x10
 1052d2f:	add    BYTE PTR [rsi],al
 1052d31:	rol    BYTE PTR [rdx],cl
 1052d33:	jo     0x1052cc9
 1052d35:	inc    BYTE PTR [rbx]
 1052d37:	add    al,ch
 1052d39:	sbb    eax,0xffff0000
 1052d3e:	(bad)  
 1052d3f:	inc    DWORD PTR [rax]
 1052d41:	fwait
 1052d42:	add    al,0x0
 1052d44:	add    BYTE PTR [rax],al
 1052d46:	add    BYTE PTR [rax],al
 1052d48:	adc    BYTE PTR [rbx+0x4],bl
 1052d4e:	add    BYTE PTR [rax],al
 1052d50:	and    BYTE PTR [rbx+0x4],bl
 1052d56:	add    BYTE PTR [rax],al
 1052d58:	xor    BYTE PTR [rbx+0x4],bl
 1052d5e:	add    BYTE PTR [rax],al
 1052d60:	rex
 1052d61:	fwait
 1052d62:	add    al,0x0
 1052d64:	add    BYTE PTR [rax],al
 1052d66:	add    BYTE PTR [rax],al
 1052d68:	push   rax
 1052d69:	fwait
 1052d6a:	add    al,0x0
 1052d6c:	add    BYTE PTR [rax],al
 1052d6e:	add    BYTE PTR [rax],al
 1052d70:	(bad)  
 1052d71:	fwait
 1052d72:	add    al,0x0
 1052d74:	add    BYTE PTR [rax],al
 1052d76:	add    BYTE PTR [rax],al
 1052d78:	jo     0x1052d15
 1052d7a:	add    al,0x0
 1052d7c:	add    BYTE PTR [rax],al
 1052d7e:	add    BYTE PTR [rax],al
 1052d80:	sbb    BYTE PTR [rbx+0x4],0x0
 1052d87:	add    BYTE PTR [rax+0x49b],dl
 1052d8d:	add    BYTE PTR [rax],al
 1052d8f:	add    BYTE PTR [rax-0x3ffffb65],ah
 1052d95:	(bad)  
 1052d96:	add    BYTE PTR [rax],al
 1052d98:	(bad)  
 1052d99:	(bad)  
 1052d9a:	(bad)  
 1052d9b:	(bad)  
 1052d9c:	jmp    0x1052e6f
 1052da1:	add    BYTE PTR [rax],al
 1052da3:	add    BYTE PTR [rax],bl
 1052da5:	iret   
 1052da6:	add    BYTE PTR [rax],al
 1052da8:	add    DWORD PTR [rax],eax
 1052daa:	add    BYTE PTR [rax],al
 1052dac:	(bad)  
 1052dad:	iret   
 1052dae:	add    BYTE PTR [rax],al
 1052db0:	add    BYTE PTR [rax],al
 1052db2:	add    BYTE PTR [rax],al
 1052db4:	push   rdi
 1052db5:	iret   
 1052db6:	add    BYTE PTR [rax],al
 1052db8:	add    al,BYTE PTR [rax]
 1052dba:	add    BYTE PTR [rax],al
 1052dbc:	jbe    0x1052d8d
 1052dbe:	add    BYTE PTR [rax],al
 1052dc0:	add    BYTE PTR [rax],al
 1052dc2:	add    BYTE PTR [rax],al
 1052dc4:	xchg   esi,eax
 1052dc5:	iret   
 1052dc6:	add    BYTE PTR [rax],al
 1052dc8:	add    eax,DWORD PTR [rax]
 1052dca:	add    BYTE PTR [rax],al
 1052dcc:	mov    ch,0xcf
 1052dce:	add    BYTE PTR [rax],al
 1052dd0:	add    BYTE PTR [rax],al
 1052dd2:	add    BYTE PTR [rax],al
 1052dd4:	ror    bh,cl
 1052dd6:	add    BYTE PTR [rax],al
 1052dd8:	add    al,0x0
 1052dda:	add    BYTE PTR [rax],al
 1052ddc:	icebp  
 1052ddd:	iret   
 1052dde:	add    BYTE PTR [rax],al
 1052de0:	add    BYTE PTR [rax],al
 1052de2:	add    BYTE PTR [rax],al
 1052de4:	or     edx,eax
 1052de6:	add    BYTE PTR [rax],al
 1052de8:	add    eax,0x2a000000
 1052ded:	rol    BYTE PTR [rax],1
 1052def:	add    BYTE PTR [rax],al
 1052df1:	add    BYTE PTR [rax],al
 1052df3:	add    BYTE PTR [rax+rdx*8+0x0],al
 1052df7:	add    BYTE PTR [rsi],al
 1052df9:	add    BYTE PTR [rax],al
 1052dfb:	add    BYTE PTR [rbx-0x30],ah
 1052dfe:	add    BYTE PTR [rax],al
 1052e00:	add    BYTE PTR [rax],al
 1052e02:	add    BYTE PTR [rax],al
 1052e04:	jge    0x1052dd6
 1052e06:	add    BYTE PTR [rax],al
 1052e08:	(bad)  
 1052e09:	add    BYTE PTR [rax],al
 1052e0b:	add    BYTE PTR [rax+rdx*8+0x0],bl
 1052e12:	add    BYTE PTR [rax],al
 1052e14:	mov    dh,0xd0
 1052e16:	add    BYTE PTR [rax],al
 1052e18:	or     BYTE PTR [rax],al
 1052e1a:	add    BYTE PTR [rax],al
 1052e1c:	(bad)  
 1052e1d:	rol    BYTE PTR [rax],1
 1052e1f:	add    BYTE PTR [rax],al
 1052e21:	add    BYTE PTR [rax],al
 1052e23:	add    ah,ch
 1052e25:	rol    BYTE PTR [rax],1
 1052e27:	add    BYTE PTR [rcx],cl
 1052e29:	add    BYTE PTR [rax],al
 1052e2b:	add    BYTE PTR [rbx],cl
 1052e2d:	rol    DWORD PTR [rax],1
 1052e2f:	add    BYTE PTR [rax],al
 1052e31:	add    BYTE PTR [rax],al
 1052e33:	add    BYTE PTR [rdx],ah
 1052e35:	rol    DWORD PTR [rax],1
 1052e37:	add    BYTE PTR [rdx],cl
 1052e39:	add    BYTE PTR [rax],al
 1052e3b:	add    BYTE PTR [rcx-0x2f],al
 1052e3e:	add    BYTE PTR [rax],al
 1052e40:	add    BYTE PTR [rax],al
 1052e42:	add    BYTE PTR [rax],al
 1052e44:	rex.WRB rol QWORD PTR [r8],1
 1052e47:	add    bh,bh
 1052e49:	(bad)  
 1052e4a:	(bad)  
 1052e4b:	jmp    FWORD PTR [rcx+rdx*8+0x0]
 1052e4f:	add    BYTE PTR [rax],al
 1052e51:	add    BYTE PTR [rax],al
 1052e53:	add    BYTE PTR [rcx],al
 1052e55:	add    al,0x1
 1052e57:	add    BYTE PTR [rdx+rax*2],al
 1052e5a:	add    BYTE PTR [rax],al
 1052e5c:	add    DWORD PTR [rcx+rax*1],eax
 1052e5f:	add    BYTE PTR [rdx+rax*2],al
 1052e62:	add    BYTE PTR [rax],al
 1052e64:	add    DWORD PTR [rcx+rax*1],eax
 1052e67:	add    BYTE PTR [rdx+rax*2],al
 1052e6a:	add    BYTE PTR [rax],al
 1052e6c:	add    DWORD PTR [rdx],ecx
 1052e6e:	add    al,0x0
 1052e70:	or     dh,BYTE PTR [rax+rcx*1]
 1052e73:	add    BYTE PTR [rdx],cl
 1052e75:	push   rdx
 1052e76:	(bad)  
 1052e77:	jo     0x1052e7a
 1052e79:	(bad)  
 1052e7a:	add    al,BYTE PTR [rax]
 1052e7c:	(bad)  
 1052e7d:	xor    al,BYTE PTR [rdx]
 1052e7f:	xor    BYTE PTR [rcx],dl
 1052e81:	sbb    eax,0x341d0008
 1052e86:	adc    DWORD PTR [rax],eax
 1052e88:	or     al,0x92
 1052e8a:	or     al,dh
 1052e8c:	(bad)  
 1052e8d:	loopne 0x1052e93
 1052e8f:	jo     0x1052e94
 1052e91:	(bad)  
 1052e92:	add    dl,BYTE PTR [rax-0x6c]
 1052e95:	inc    BYTE PTR [rbx]
 1052e97:	add    BYTE PTR [rax-0xffffe1],al
 1052e9d:	(bad)  
 1052e9e:	(bad)  
 1052e9f:	call   rax
 1052ea1:	pushf  
 1052ea2:	add    al,0x0
 1052ea4:	add    BYTE PTR [rax],al
 1052ea6:	add    BYTE PTR [rax],al
 1052ea8:	loopne 0x1052e46
 1052eaa:	add    al,0x0
 1052eac:	add    BYTE PTR [rax],al
 1052eae:	add    BYTE PTR [rax],al
 1052eb0:	lock pushf 
 1052eb2:	add    al,0x0
 1052eb4:	(bad)  
 1052eb5:	rol    BYTE PTR [rax],cl
 1052eb7:	add    bh,bh
 1052eb9:	(bad)  
 1052eba:	(bad)  
 1052ebb:	call   FWORD PTR [rbx+rdx*8]
 1052ebe:	add    BYTE PTR [rax],al
 1052ec0:	add    BYTE PTR [rax],al
 1052ec2:	add    BYTE PTR [rax],al
 1052ec4:	(bad)  
 1052ec5:	rol    DWORD PTR [rax],cl
 1052ec7:	add    BYTE PTR [rcx],al
 1052ec9:	add    BYTE PTR [rax],al
 1052ecb:	add    BYTE PTR [rbx+rdx*8+0x0],dl
 1052ecf:	add    BYTE PTR [rax],al
 1052ed1:	add    BYTE PTR [rax],al
 1052ed3:	add    BYTE PTR [rbx+0x20000d3],dl
 1052ed9:	add    BYTE PTR [rax],al
 1052edb:	add    bl,cl
 1052edd:	rol    DWORD PTR [rax],cl
 1052edf:	add    BYTE PTR [rax],al
 1052ee1:	add    BYTE PTR [rax],al
 1052ee3:	add    dl,bl
 1052ee5:	rol    DWORD PTR [rax],cl
 1052ee7:	add    bh,bh
 1052ee9:	(bad)  
 1052eea:	(bad)  
 1052eeb:	inc    DWORD PTR [rcx]
 1052eed:	or     DWORD PTR [rcx],eax
 1052eef:	add    BYTE PTR [rcx],cl
 1052ef1:	(bad)  
 1052ef2:	add    BYTE PTR [rax],al
 1052ef4:	add    DWORD PTR [rcx+rax*1],eax
 1052ef7:	add    BYTE PTR [rdx+riz*2],al
 1052efa:	add    BYTE PTR [rax],al
 1052efc:	adc    DWORD PTR [rcx],ebx
 1052efe:	(bad)  
 1052eff:	add    BYTE PTR [rcx],bl
 1052f01:	lldt   WORD PTR fs:[rsp+rsi*1]
 1052f06:	(bad)  
 1052f07:	add    BYTE PTR [rsi],al
 1052f09:	xchg   edx,eax
 1052f0a:	add    dh,BYTE PTR [rax-0x6c]
 1052f0d:	inc    BYTE PTR [rbx]
 1052f0f:	add    BYTE PTR [rax-0xffffe1],ch
 1052f15:	(bad)  
 1052f16:	(bad)  
 1052f17:	inc    DWORD PTR [rax+0x49d]
 1052f1d:	add    BYTE PTR [rax],al
 1052f1f:	add    BYTE PTR [rax-0x7ffffb63],dl
 1052f25:	(bad)  
 1052f26:	add    BYTE PTR [rax],al
 1052f28:	(bad)  
 1052f29:	(bad)  
 1052f2a:	(bad)  
 1052f2b:	inc    eax
 1052f2d:	(bad)  
 1052f2e:	add    BYTE PTR [rax],al
 1052f30:	add    BYTE PTR [rax],al
 1052f32:	add    BYTE PTR [rax],al
 1052f34:	jmp    0x205300d
 1052f39:	add    BYTE PTR [rax],al
 1052f3b:	add    BYTE PTR [rax],ah
 1052f3d:	(bad)  
 1052f3e:	add    BYTE PTR [rax],al
 1052f40:	add    BYTE PTR [rax],al
 1052f42:	add    BYTE PTR [rax],al
 1052f44:	sub    al,0xd5
 1052f46:	add    BYTE PTR [rax],al
 1052f48:	(bad)  
 1052f49:	(bad)  
 1052f4a:	(bad)  
 1052f4b:	call   QWORD PTR [rcx]
 1052f4d:	sbb    DWORD PTR [rsi],eax
 1052f4f:	add    BYTE PTR [rcx],bl
 1052f51:	lldt   WORD PTR fs:[rsp+rsi*1]
 1052f56:	(bad)  
 1052f57:	add    BYTE PTR [rsi],al
 1052f59:	xchg   edx,eax
 1052f5a:	add    dh,BYTE PTR [rax-0x6c]
 1052f5d:	inc    BYTE PTR [rbx]
 1052f5f:	add    al,dl
 1052f61:	(bad)  
 1052f62:	add    BYTE PTR [rax],al
 1052f64:	(bad)  
 1052f65:	(bad)  
 1052f66:	(bad)  
 1052f67:	push   rax
 1052f69:	fwait
 1052f6a:	add    al,0x0
 1052f6c:	add    BYTE PTR [rax],al
 1052f6e:	add    BYTE PTR [rax],al
 1052f70:	add    BYTE PTR [rsp+rax*1+0xd56000],bl
 1052f77:	add    bh,bh
 1052f79:	(bad)  
 1052f7a:	(bad)  
 1052f7b:	jmp    QWORD PTR [rax+0xd5]
 1052f81:	add    BYTE PTR [rax],al
 1052f83:	add    cl,cl
 1052f85:	(bad)  
 1052f86:	add    BYTE PTR [rax],al
 1052f88:	add    DWORD PTR [rax],eax
 1052f8a:	add    BYTE PTR [rax],al
 1052f8c:	add    al,0xd6
 1052f8e:	add    BYTE PTR [rax],al
 1052f90:	add    BYTE PTR [rax],al
 1052f92:	add    BYTE PTR [rax],al
 1052f94:	adc    dh,dl
 1052f96:	add    BYTE PTR [rax],al
 1052f98:	(bad)  
 1052f99:	(bad)  
 1052f9a:	(bad)  
 1052f9b:	call   FWORD PTR [rcx]
 1052f9d:	or     al,BYTE PTR ss:[rax]
 1052fa0:	sbb    al,0x1
 1052fa2:	adc    eax,DWORD PTR [rcx]
 1052fa4:	or     eax,0x9e00bf0
 1052fa9:	rol    BYTE PTR [rdi],1
 1052fab:	rol    BYTE PTR [rip+0x3600470],0x30        # 0x4653422
 1052fb2:	add    dl,BYTE PTR [rax-0x60]
 1052fb5:	inc    BYTE PTR [rbx]
 1052fb7:	add    al,bh
 1052fb9:	(bad)  
 1052fba:	add    BYTE PTR [rax],al
 1052fbc:	(bad)  
 1052fbd:	or     BYTE PTR [rax],al
 1052fbf:	add    bh,bh
 1052fc1:	(bad)  
 1052fc2:	(bad)  
 1052fc3:	jmp    QWORD PTR [rax]
 1052fc5:	pushf  
 1052fc6:	add    al,0x0
 1052fc8:	add    BYTE PTR [rax],al
 1052fca:	add    BYTE PTR [rax],al
 1052fcc:	xor    BYTE PTR [rsp+rax*1+0x100],bl
 1052fd3:	add    BYTE PTR [rax-0x64],al
 1052fd6:	add    al,0x0
 1052fd8:	add    BYTE PTR [rax],al
 1052fda:	add    BYTE PTR [rax],al
 1052fdc:	push   rax
 1052fdd:	pushf  
 1052fde:	add    al,0x0
 1052fe0:	add    eax,DWORD PTR [rax]
 1052fe2:	add    BYTE PTR [rax],al
 1052fe4:	(bad)  
 1052fe5:	pushf  
 1052fe6:	add    al,0x0
 1052fe8:	add    BYTE PTR [rax],al
 1052fea:	add    BYTE PTR [rax],al
 1052fec:	jo     0x1052f8a
 1052fee:	add    al,0x0
 1052ff0:	add    eax,0x80000000
 1052ff5:	pushf  
 1052ff6:	add    al,0x0
 1052ff8:	add    BYTE PTR [rax],al
 1052ffa:	add    BYTE PTR [rax],al
 1052ffc:	nop
 1052ffd:	pushf  
 1052ffe:	add    al,0x0
 1053000:	(bad)  
 1053001:	add    BYTE PTR [rax],al
 1053003:	add    BYTE PTR [rax+0x700049c],ah
 1053009:	add    BYTE PTR [rax],al
 105300b:	add    BYTE PTR [rax+0x4000049c],dh
 1053011:	(bad)  
 1053012:	add    BYTE PTR [rax],al
 1053014:	(bad)  
 1053015:	(bad)  
 1053016:	(bad)  
 1053017:	jmp    FWORD PTR [rbp+0xd6]
 105301d:	add    BYTE PTR [rax],al
 105301f:	add    ah,ch
 1053021:	xlat   BYTE PTR ds:[rbx]
 1053022:	add    BYTE PTR [rax],al
 1053024:	add    DWORD PTR [rax],eax
 1053026:	add    BYTE PTR [rax],al
 1053028:	sbb    al,bl
 105302a:	add    BYTE PTR [rax],al
 105302c:	add    al,BYTE PTR [rax]
 105302e:	add    BYTE PTR [rax],al
 1053030:	rex.WRX fadd DWORD PTR [rax]
 1053033:	add    BYTE PTR [rcx],al
 1053035:	add    BYTE PTR [rax],al
 1053037:	add    BYTE PTR [rdx-0x28],bl
 105303a:	add    BYTE PTR [rax],al
 105303c:	add    BYTE PTR [rax],al
 105303e:	add    BYTE PTR [rax],al
 1053040:	xchg   ebp,eax
 1053041:	fadd   DWORD PTR [rax]
 1053043:	add    BYTE PTR [rbx],al
 1053045:	add    BYTE PTR [rax],al
 1053047:	add    cl,al
 1053049:	fadd   DWORD PTR [rax]
 105304b:	add    BYTE PTR [rax+rax*1],al
 105304e:	add    BYTE PTR [rax],al
 1053050:	neg    eax
 1053052:	add    BYTE PTR [rax],al
 1053054:	add    eax,DWORD PTR [rax]
 1053056:	add    BYTE PTR [rax],al
 1053058:	add    ebx,ecx
 105305a:	add    BYTE PTR [rax],al
 105305c:	add    BYTE PTR [rax],al
 105305e:	add    BYTE PTR [rax],al
 1053060:	rex.RB fld DWORD PTR [r8]
 1053063:	add    BYTE PTR [rip+0x72000000],al        # 0x73053069
 1053069:	fld    DWORD PTR [rax]
 105306b:	add    BYTE PTR [rsi],al
 105306d:	add    BYTE PTR [rax],al
 105306f:	add    BYTE PTR [rax+0x50000d9],ch
 1053075:	add    BYTE PTR [rax],al
 1053077:	add    BYTE PTR [rcx+rbx*8+0x0],dh
 105307e:	add    BYTE PTR [rax],al
 1053080:	sbb    eax,0x70000da
 1053085:	add    BYTE PTR [rax],al
 1053087:	add    BYTE PTR [rip+0x80000da],ch        # 0x9053167
 105308d:	add    BYTE PTR [rax],al
 105308f:	add    BYTE PTR [rsi-0x26],ch
 1053092:	add    BYTE PTR [rax],al
 1053094:	(bad)  
 1053095:	add    BYTE PTR [rax],al
 1053097:	add    BYTE PTR [rax+0x90000da],ch
 105309d:	add    BYTE PTR [rax],al
 105309f:	add    dh,bl
 10530a1:	fiadd  DWORD PTR [rax]
 10530a3:	add    BYTE PTR [rdi],al
 10530a5:	add    BYTE PTR [rax],al
 10530a7:	add    dl,ch
 10530a9:	fiadd  DWORD PTR [rax]
 10530ab:	add    BYTE PTR [rax],al
 10530ad:	add    BYTE PTR [rax],al
 10530af:	add    BYTE PTR [rsi-0x25],ah
 10530b2:	add    BYTE PTR [rax],al
 10530b4:	(bad)  
 10530b5:	(bad)  
 10530b6:	(bad)  
 10530b7:	call   QWORD PTR [rcx]
 10530b9:	sbb    ecx,DWORD PTR [rax]
 10530bb:	add    BYTE PTR [rbx],bl
 10530bd:	push   rsp
 10530be:	adc    DWORD PTR [rax],eax
 10530c0:	(bad)  
 10530c1:	xor    al,0x10
 10530c3:	add    BYTE PTR [rbx],cl
 10530c5:	xchg   edx,eax
 10530c6:	(bad)  
 10530c7:	loopne 0x10530ce
 10530c9:	jo     0x10530cf
 10530cb:	(bad)  
 10530cc:	xchg   esp,eax
 10530cd:	inc    BYTE PTR [rbx]
 10530cf:	add    BYTE PTR [rax],ah
 10530d1:	and    BYTE PTR [rax],al
 10530d3:	add    bh,bh
 10530d5:	(bad)  
 10530d6:	(bad)  
 10530d7:	call   QWORD PTR [rax]
 10530d9:	popf   
 10530da:	add    al,0x0
 10530dc:	add    BYTE PTR [rax],al
 10530de:	add    BYTE PTR [rax],al
 10530e0:	and    BYTE PTR [rbp-0x245ffffc],bl
 10530e6:	add    BYTE PTR [rax],al
 10530e8:	(bad)  
 10530e9:	(bad)  
 10530ea:	(bad)  
 10530eb:	jmp    rbp
 10530ed:	fild   DWORD PTR [rax]
 10530ef:	add    BYTE PTR [rax],al
 10530f1:	add    BYTE PTR [rax],al
 10530f3:	add    BYTE PTR [rsi],cl
 10530f5:	fadd   QWORD PTR [rax]
 10530f7:	add    BYTE PTR [rcx],al
 10530f9:	add    BYTE PTR [rax],al
 10530fb:	add    BYTE PTR [rsi-0x24],al
 10530fe:	add    BYTE PTR [rax],al
 1053100:	add    BYTE PTR [rax],al
 1053102:	add    BYTE PTR [rax],al
 1053104:	push   rdx
 1053105:	fadd   QWORD PTR [rax]
 1053107:	add    bh,bh
 1053109:	(bad)  
 105310a:	(bad)  
 105310b:	call   QWORD PTR [rcx]
 105310d:	adc    DWORD PTR [rax+rax*1],eax
 1053110:	or     BYTE PTR [rdx+0x60037004],dl
 1053116:	add    dh,BYTE PTR [rax]
 1053118:	xchg   esp,eax
 1053119:	inc    BYTE PTR [rbx]
 105311b:	add    BYTE PTR [rax+0x20],cl
 105311e:	add    BYTE PTR [rax],al
 1053120:	(bad)  
 1053121:	(bad)  
 1053122:	(bad)  
 1053123:	call   QWORD PTR [rax]
 1053125:	sahf   
 1053126:	add    al,0x0
 1053128:	add    BYTE PTR [rax],al
 105312a:	add    BYTE PTR [rax],al
 105312c:	and    BYTE PTR [rsi+0x10004],bl
 1053132:	add    BYTE PTR [rax],al
 1053134:	xor    BYTE PTR [rsi+0x10004],bl
 105313a:	add    BYTE PTR [rax],al
 105313c:	rex sahf 
 105313e:	add    al,0x0
 1053140:	add    BYTE PTR [rax],al
 1053142:	add    BYTE PTR [rax],al
 1053144:	push   rax
 1053145:	sahf   
 1053146:	add    al,0x0
 1053148:	add    al,0x0
 105314a:	add    BYTE PTR [rax],al
 105314c:	(bad)  
 105314d:	sahf   
 105314e:	add    al,0x0
 1053150:	mov    al,0xdc
 1053152:	add    BYTE PTR [rax],al
 1053154:	(bad)  
 1053155:	(bad)  
 1053156:	(bad)  
 1053157:	call   rbx
 1053159:	fadd   QWORD PTR [rax]
 105315b:	add    BYTE PTR [rax],al
 105315d:	add    BYTE PTR [rax],al
 105315f:	add    BYTE PTR [rdi],ah
 1053161:	fld    QWORD PTR [rax]
 1053163:	add    BYTE PTR [rcx],al
 1053165:	add    BYTE PTR [rax],al
 1053167:	add    BYTE PTR [rdx],bh
 1053169:	fld    QWORD PTR [rax]
 105316b:	add    BYTE PTR [rdx],al
 105316d:	add    BYTE PTR [rax],al
 105316f:	add    BYTE PTR [rax-0x23],bl
 1053172:	add    BYTE PTR [rax],al
 1053174:	add    DWORD PTR [rax],eax
 1053176:	add    BYTE PTR [rax],al
 1053178:	xchg   edi,eax
 1053179:	fld    QWORD PTR [rax]
 105317b:	add    BYTE PTR [rbx],al
 105317d:	add    BYTE PTR [rax],al
 105317f:	add    dh,cl
 1053181:	fld    QWORD PTR [rax]
 1053183:	add    BYTE PTR [rcx],al
 1053185:	add    BYTE PTR [rax],al
 1053187:	add    ch,bl
 1053189:	fld    QWORD PTR [rax]
 105318b:	add    BYTE PTR [rax],al
 105318d:	add    BYTE PTR [rax],al
 105318f:	add    ah,ch
 1053191:	fld    QWORD PTR [rax]
 1053193:	add    bh,bh
 1053195:	(bad)  
 1053196:	(bad)  
 1053197:	(bad)  
 1053198:	(bad)  
 1053199:	fld    QWORD PTR [rax]
 105319b:	add    BYTE PTR [rax],al
 105319d:	add    BYTE PTR [rax],al
 105319f:	add    BYTE PTR [rdi],ch
 10531a1:	fiadd  WORD PTR [rax]
 10531a3:	add    BYTE PTR [rax+rax*1],al
 10531a6:	add    BYTE PTR [rax],al
 10531a8:	pop    rbp
 10531a9:	fiadd  WORD PTR [rax]
 10531ab:	add    BYTE PTR [rip+0xffffffff94000000],al        # 0xffffffff950531b1
 10531b1:	fiadd  WORD PTR [rax]
 10531b3:	add    BYTE PTR [rax+rax*1],al
 10531b6:	add    BYTE PTR [rax],al
 10531b8:	movabs ds:0xb2000000000000de,eax
 10531c1:	fiadd  WORD PTR [rax]
 10531c3:	add    bh,bh
 10531c5:	(bad)  
 10531c6:	(bad)  
 10531c7:	call   FWORD PTR [rcx]
 10531c9:	rex.XB or eax,DWORD PTR [r8]
 10531cc:	xor    dh,BYTE PTR [rsi+rbx*2]
 10531cf:	add    ah,BYTE PTR [rcx]
 10531d1:	add    DWORD PTR [rsi+0x2],edx
 10531d4:	or     al,0xf0
 10531d6:	or     ah,al
 10531d8:	or     al,dl
 10531da:	(bad)  
 10531db:	rol    BYTE PTR [rax+rsi*2],0x3
 10531df:	(bad)  
 10531e0:	add    dl,BYTE PTR [rax+0x0]
 10531e3:	add    BYTE PTR [rax+0x700003fe],ah
 10531e9:	and    BYTE PTR [rax],al
 10531eb:	add    BYTE PTR [rdx-0xffffee],ah
 10531f1:	(bad)  
 10531f2:	(bad)  
 10531f3:	call   QWORD PTR [rax-0x63]
 10531f6:	add    al,0x0
 10531f8:	add    BYTE PTR [rax],al
 10531fa:	add    BYTE PTR [rax],al
 10531fc:	rex popf 
 10531fe:	add    al,0x0
 1053200:	loopne 0x10531e0
 1053202:	add    BYTE PTR [rax],al
 1053204:	(bad)  
 1053205:	(bad)  
 1053206:	(bad)  
 1053207:	jmp    FWORD PTR [rip+0xdf]        # 0x10532ec
 105320d:	add    BYTE PTR [rax],al
 105320f:	add    BYTE PTR [rsi+0x10000df],ch
 1053215:	add    BYTE PTR [rax],al
 1053217:	add    cl,dh
 1053219:	loop   0x105321b
 105321b:	add    BYTE PTR [rax],al
 105321d:	add    BYTE PTR [rax],al
 105321f:	add    BYTE PTR [rcx],al
 1053221:	(bad)  
 1053222:	add    al,BYTE PTR [rax]
 1053224:	(bad)  
 1053225:	xor    al,BYTE PTR [rdx]
 1053227:	push   rax
 1053228:	adc    DWORD PTR [rax],esp
 105322a:	or     al,BYTE PTR [rax]
 105322c:	and    BYTE PTR [rcx+rdx*1+0x0],ah
 1053230:	sbb    al,0x54
 1053232:	adc    BYTE PTR [rax],al
 1053234:	sbb    BYTE PTR [rdi+rcx*1],dh
 1053237:	add    BYTE PTR [rdx+rdx*4],cl
 105323a:	or     al,dh
 105323c:	(bad)  
 105323d:	loopne 0x1053243
 105323f:	jo     0x10531d5
 1053241:	inc    BYTE PTR [rbx]
 1053243:	add    BYTE PTR [rax-0xffffe0],bl
 1053249:	(bad)  
 105324a:	(bad)  
 105324b:	push   QWORD PTR [rax+0x49d]
 1053251:	add    BYTE PTR [rax],al
 1053253:	add    al,al
 1053255:	popf   
 1053256:	add    al,0x0
 1053258:	(bad)  
 1053259:	(bad)  
 105325a:	(bad)  
 105325b:	call   rax
 105325d:	popf   
 105325e:	add    al,0x0
 1053260:	add    al,BYTE PTR [rax]
 1053262:	add    BYTE PTR [rax],al
 1053264:	loopne 0x1053203
 1053266:	add    al,0x0
 1053268:	add    al,BYTE PTR [rax]
 105326a:	add    BYTE PTR [rax],al
 105326c:	lock popf 
 105326e:	add    al,0x0
 1053270:	xor    bl,ah
 1053272:	add    BYTE PTR [rax],al
 1053274:	(bad)  
 1053275:	(bad)  
 1053276:	(bad)  
 1053277:	push   QWORD PTR [rax]
 1053279:	in     al,0x0
 105327b:	add    BYTE PTR [rdx],al
 105327d:	add    BYTE PTR [rax],al
 105327f:	add    BYTE PTR [rax-0x1c],al
 1053282:	add    BYTE PTR [rax],al
 1053284:	add    eax,DWORD PTR [rax]
 1053286:	add    BYTE PTR [rax],al
 1053288:	pop    rbx
 1053289:	in     al,0x0
 105328b:	add    BYTE PTR [rdx],al
 105328d:	add    BYTE PTR [rax],al
 105328f:	add    BYTE PTR [rbx+0x40000e4],dl
 1053295:	add    BYTE PTR [rax],al
 1053297:	add    bl,cl
 1053299:	in     al,0x0
 105329b:	add    BYTE PTR [rdx],al
 105329d:	add    BYTE PTR [rax],al
 105329f:	add    bh,dl
 10532a1:	in     al,0x0
 10532a3:	add    bh,bh
 10532a5:	(bad)  
 10532a6:	(bad)  
 10532a7:	call   QWORD PTR [rsi]
 10532a9:	in     eax,0x0
 10532ab:	add    BYTE PTR [rax],al
 10532ad:	add    BYTE PTR [rax],al
 10532af:	add    BYTE PTR [rsi],ah
 10532b1:	in     eax,0x0
 10532b3:	add    BYTE PTR [rcx],al
 10532b5:	add    BYTE PTR [rax],al
 10532b7:	add    BYTE PTR [rbx-0x1b],cl
 10532ba:	add    BYTE PTR [rax],al
 10532bc:	add    BYTE PTR [rax],al
 10532be:	add    BYTE PTR [rax],al
 10532c0:	xchg   ebx,eax
 10532c1:	in     eax,0x0
 10532c3:	add    bh,bh
 10532c5:	(bad)  
 10532c6:	(bad)  
 10532c7:	call   QWORD PTR [rcx]
 10532c9:	lar    eax,WORD PTR [rax]
 10532cc:	(bad)  
 10532cd:	push   rdx
 10532ce:	add    dh,BYTE PTR [rax]
 10532d0:	xchg   esp,eax
 10532d1:	inc    BYTE PTR [rbx]
 10532d3:	add    BYTE PTR [rax],dh
 10532d5:	and    eax,DWORD PTR [rax]
 10532d7:	add    bh,bh
 10532d9:	(bad)  
 10532da:	(bad)  
 10532db:	push   QWORD PTR [rax-0xffffb62]
 10532e1:	in     eax,0x0
 10532e3:	add    bh,bh
 10532e5:	(bad)  
 10532e6:	(bad)  
 10532e7:	dec    DWORD PTR [rip+0xe6]        # 0x10533d3
 10532ed:	add    BYTE PTR [rax],al
 10532ef:	add    BYTE PTR [rip+0xffffffffff0000e7],cl        # 0x533dc
 10532f5:	(bad)  
 10532f6:	(bad)  
 10532f7:	call   QWORD PTR [rcx]
 10532f9:	lar    eax,WORD PTR [rax]
 10532fc:	(bad)  
 10532fd:	push   rdx
 10532fe:	add    dh,BYTE PTR [rax]
 1053300:	xchg   esp,eax
 1053301:	inc    BYTE PTR [rbx]
 1053303:	add    BYTE PTR [rax+0x23],bl
 1053306:	add    BYTE PTR [rax],al
 1053308:	(bad)  
 1053309:	(bad)  
 105330a:	(bad)  
 105330b:	call   rax
 105330d:	sahf   
 105330e:	add    al,0x0
 1053310:	xor    bh,ah
 1053312:	add    BYTE PTR [rax],al
 1053314:	(bad)  
 1053315:	(bad)  
 1053316:	(bad)  
 1053317:	dec    DWORD PTR [rbx-0x19]
 105331a:	add    BYTE PTR [rax],al
 105331c:	add    BYTE PTR [rax],al
 105331e:	add    BYTE PTR [rax],al
 1053320:	pushf  
 1053321:	out    0x0,eax
 1053323:	add    bh,bh
 1053325:	(bad)  
 1053326:	(bad)  
 1053327:	call   FWORD PTR [rcx]
 1053329:	(bad)  
 105332a:	add    al,BYTE PTR [rax]
 105332c:	(bad)  
 105332d:	mov    dl,0x2
 105332f:	xor    BYTE PTR [rax-0x7ffffc02],ah
 1053335:	and    eax,DWORD PTR [rax]
 1053337:	add    BYTE PTR [rdx+0x0],bl
 105333a:	add    BYTE PTR [rax],al
 105333c:	(bad)  
 105333d:	(bad)  
 105333e:	(bad)  
 105333f:	push   rax
 1053341:	sahf   
 1053342:	add    al,0x0
 1053344:	shl    bh,0x0
 1053347:	add    bh,bh
 1053349:	(bad)  
 105334a:	(bad)  
 105334b:	jmp    rcx
 105334d:	out    0x0,eax
 105334f:	add    BYTE PTR [rax],al
 1053351:	add    BYTE PTR [rax],al
 1053353:	add    BYTE PTR [rcx],al
 1053355:	(bad)  
 1053356:	add    al,BYTE PTR [rax]
 1053358:	(bad)  
 1053359:	xor    al,BYTE PTR [rdx]
 105335b:	push   rax
 105335c:	add    DWORD PTR [rdx],ecx
 105335e:	add    al,0x0
 1053360:	or     dl,BYTE PTR [rdx+0x6]
 1053363:	lock add al,0xd0
 1053366:	add    ah,BYTE PTR [rax+0x21]
 1053369:	sbb    DWORD PTR [rdx],ecx
 105336b:	add    BYTE PTR [rcx],bl
 105336d:	in     al,0x4
 105336f:	add    BYTE PTR [rsp+rax*8],dl
 1053372:	add    eax,0xc740f00
 1053377:	add    BYTE PTR [rdx],cl
 1053379:	push   rsp
 105337a:	or     eax,DWORD PTR [rax]
 105337c:	add    eax,0xa0000a34
 1053381:	call   0xffffffffe9c23386
 1053386:	add    BYTE PTR [rax],al
 1053388:	pop    rsp
 1053389:	xor    eax,DWORD PTR [rip+0x2100]        # 0x105548f
 105338f:	add    BYTE PTR [rax-0x42ffff18],ah
 1053395:	call   0x3461339a
 105339a:	add    eax,0xa002100
 105339f:	add    BYTE PTR [rax],al
 10533a1:	in     al,0x4
 10533a3:	add    BYTE PTR [rax],al
 10533a5:	(bad)  
 10533a6:	add    eax,0xc740000
 10533ab:	add    BYTE PTR [rax],al
 10533ad:	push   rsp
 10533ae:	or     eax,DWORD PTR [rax]
 10533b0:	add    BYTE PTR [rdx+rcx*1],dh
 10533b3:	add    BYTE PTR [rax-0x42ffff18],ah
 10533b9:	call   0x346133be
 10533be:	add    eax,0xa180100
 10533c3:	add    BYTE PTR [rax],bl
 10533c5:	or     al,BYTE PTR fs:[rax]
 10533c8:	sbb    BYTE PTR [rcx+rcx*1+0x0],dl
 10533cc:	sbb    BYTE PTR [rax+rcx*1],dh
 10533cf:	add    BYTE PTR [rax],bl
 10533d1:	xor    dl,BYTE PTR [rax+rsi*8]
 10533d4:	adc    ah,al
 10533d6:	adc    BYTE PTR [rax+0x11],dh
 10533d9:	sbb    DWORD PTR [rsi],eax
 10533db:	add    BYTE PTR [rcx],bl
 10533dd:	or     eax,DWORD PTR fs:[rax]
 10533e0:	adc    al,0x34
 10533e2:	or     DWORD PTR [rax],eax
 10533e4:	(bad)  
 10533e5:	push   rdx
 10533e6:	add    dh,BYTE PTR [rax-0x6c]
 10533e9:	inc    BYTE PTR [rbx]
 10533eb:	add    BYTE PTR [rax-0xffffdd],ch
 10533f1:	(bad)  
 10533f2:	(bad)  
 10533f3:	jmp    QWORD PTR [rax]
 10533f5:	lahf   
 10533f6:	add    al,0x0
 10533f8:	add    BYTE PTR [rax],al
 10533fa:	add    BYTE PTR [rax],al
 10533fc:	rex lahf 
 10533fe:	add    al,0x0
 1053400:	add    DWORD PTR [rax],eax
 1053402:	add    BYTE PTR [rax],al
 1053404:	push   rax
 1053405:	lahf   
 1053406:	add    al,0x0
 1053408:	add    BYTE PTR [rax],al
 105340a:	add    BYTE PTR [rax],al
 105340c:	jo     0x10533ad
 105340e:	add    al,0x0
 1053410:	adc    bl,ch
 1053412:	add    BYTE PTR [rax],al
 1053414:	(bad)  
 1053415:	(bad)  
 1053416:	(bad)  
 1053417:	(bad)  
 1053418:	mov    edx,0xeb
 105341d:	add    BYTE PTR [rax],al
 105341f:	add    bh,al
 1053421:	jmp    0x1053423
 1053423:	add    BYTE PTR [rcx],al
 1053425:	add    BYTE PTR [rax],al
 1053427:	add    dl,dl
 1053429:	jmp    0x105342b
 105342b:	add    bh,bh
 105342d:	(bad)  
 105342e:	(bad)  
 105342f:	inc    DWORD PTR [rcx]
 1053431:	(bad)  
 1053432:	add    al,BYTE PTR [rax]
 1053434:	(bad)  
 1053435:	xor    al,BYTE PTR [rdx]
 1053437:	push   rax
 1053438:	adc    DWORD PTR [rbx],edx
 105343a:	add    al,BYTE PTR [rax]
 105343c:	or     dl,BYTE PTR [rdx+0x6]
 105343f:	xor    BYTE PTR [rsi+rdi*8+0x23d00003],dl
 1053446:	add    BYTE PTR [rax],al
 1053448:	(bad)  
 1053449:	(bad)  
 105344a:	(bad)  
 105344b:	inc    DWORD PTR [rax+0x49e]
 1053451:	add    BYTE PTR [rax],al
 1053453:	add    BYTE PTR [rax-0xffffb62],dl
 1053459:	jmp    0x105345b
 105345b:	add    bh,bh
 105345d:	(bad)  
 105345e:	(bad)  
 105345f:	inc    DWORD PTR [rsi]
 1053461:	in     al,dx
 1053462:	add    BYTE PTR [rax],al
 1053464:	add    BYTE PTR [rax],al
 1053466:	add    BYTE PTR [rax],al
 1053468:	adc    esp,ebp
 105346a:	add    BYTE PTR [rax],al
 105346c:	(bad)  
 105346d:	(bad)  
 105346e:	(bad)  
 105346f:	call   QWORD PTR [rcx]
 1053471:	and    BYTE PTR [rax],cl
 1053473:	add    BYTE PTR [rax],ah
 1053475:	push   rsp
 1053476:	or     al,0x0
 1053478:	sbb    esi,DWORD PTR [rbx+rcx*1]
 105347b:	add    BYTE PTR [rip+0x7e00952],cl        # 0x8e53dd3
 1053481:	jo     0x1053489
 1053483:	(bad)  
 1053484:	xchg   esp,eax
 1053485:	inc    BYTE PTR [rbx]
 1053487:	add    BYTE PTR [rax+0x25],dl
 105348a:	add    BYTE PTR [rax],al
 105348c:	(bad)  
 105348d:	(bad)  
 105348e:	(bad)  
 105348f:	push   rax
 1053491:	movabs ds:0xa410000000000004,eax
 105349a:	add    al,0x0
 105349c:	add    DWORD PTR [rax],eax
 105349e:	add    BYTE PTR [rax],al
 10534a0:	xor    BYTE PTR [rsp+rax*1+0x200],ah
 10534a7:	add    BYTE PTR [rax-0x5c],dl
 10534aa:	add    al,0x0
 10534ac:	add    eax,DWORD PTR [rax]
 10534ae:	add    BYTE PTR [rax],al
 10534b0:	jo     0x1053456
 10534b2:	add    al,0x0
 10534b4:	xor    ah,ch
 10534b6:	add    BYTE PTR [rax],al
 10534b8:	(bad)  
 10534b9:	(bad)  
 10534ba:	(bad)  
 10534bb:	call   FWORD PTR [rsi-0x14]
 10534be:	add    BYTE PTR [rax],al
 10534c0:	add    BYTE PTR [rax],al
 10534c2:	add    BYTE PTR [rax],al
 10534c4:	imul   ebp,esp,0x10000
 10534ca:	add    BYTE PTR [rax],al
 10534cc:	je     0x10534ba
 10534ce:	add    BYTE PTR [rax],al
 10534d0:	add    al,BYTE PTR [rax]
 10534d2:	add    BYTE PTR [rax],al
 10534d4:	jg     0x10534c2
 10534d6:	add    BYTE PTR [rax],al
 10534d8:	add    eax,DWORD PTR [rax]
 10534da:	add    BYTE PTR [rax],al
 10534dc:	mov    ch,ah
 10534de:	add    BYTE PTR [rax],al
 10534e0:	add    al,0x0
 10534e2:	add    BYTE PTR [rax],al
 10534e4:	jmp    0x535d5
 10534e9:	(bad)  
 10534ea:	(bad)  
 10534eb:	call   QWORD PTR [rcx]
 10534ed:	sub    cl,BYTE PTR [rax+rax*1]
 10534f0:	sub    ah,BYTE PTR [rdi+rcx*1+0x0]
 10534f4:	and    eax,0x20000e54
 10534f9:	xor    al,0xd
 10534fb:	add    BYTE PTR [rdx],dl
 10534fd:	push   rdx
 10534fe:	(bad)  
 10534ff:	lock or al,0xe0
 1053502:	or     dl,al
 1053504:	or     al,al
 1053506:	(bad)  
 1053507:	jo     0x105349d
 1053509:	inc    BYTE PTR [rbx]
 105350b:	add    BYTE PTR [rax+0x25],bh
 105350e:	add    BYTE PTR [rax],al
 1053510:	(bad)  
 1053511:	(bad)  
 1053512:	(bad)  
 1053513:	call   QWORD PTR [rax+0x49f]
 1053519:	add    BYTE PTR [rax],al
 105351b:	add    BYTE PTR [rax+0x100049f],dh
 1053521:	add    BYTE PTR [rax],al
 1053523:	add    al,dl
 1053525:	lahf   
 1053526:	add    al,0x0
 1053528:	add    al,BYTE PTR [rax]
 105352a:	add    BYTE PTR [rax],al
 105352c:	lock lahf 
 105352e:	add    al,0x0
 1053530:	add    eax,DWORD PTR [rax]
 1053532:	add    BYTE PTR [rax],al
 1053534:	adc    BYTE PTR [rax-0x12effffc],ah
 105353a:	add    BYTE PTR [rax],al
 105353c:	(bad)  
 105353d:	(bad)  
 105353e:	(bad)  
 105353f:	dec    DWORD PTR [rsi-0x13]
 1053542:	add    BYTE PTR [rax],al
 1053544:	add    BYTE PTR [rax],al
 1053546:	add    BYTE PTR [rax],al
 1053548:	pop    rcx
 1053549:	in     eax,dx
 105354a:	add    BYTE PTR [rax],al
 105354c:	add    DWORD PTR [rax],eax
 105354e:	add    BYTE PTR [rax],al
 1053550:	fs in  eax,dx
 1053552:	add    BYTE PTR [rax],al
 1053554:	add    al,BYTE PTR [rax]
 1053556:	add    BYTE PTR [rax],al
 1053558:	outs   dx,DWORD PTR ds:[rsi]
 1053559:	in     eax,dx
 105355a:	add    BYTE PTR [rax],al
 105355c:	add    eax,DWORD PTR [rax]
 105355e:	add    BYTE PTR [rax],al
 1053560:	jp     0x105354f
 1053562:	add    BYTE PTR [rax],al
 1053564:	add    al,0x0
 1053566:	add    BYTE PTR [rax],al
 1053568:	jmp    0x1053557
 105356a:	add    BYTE PTR [rax],al
 105356c:	(bad)  
 105356d:	(bad)  
 105356e:	(bad)  
 105356f:	call   QWORD PTR [rcx]
 1053571:	sub    cl,BYTE PTR [rax+rax*1]
 1053574:	sub    ah,BYTE PTR [rdi+rcx*1+0x0]
 1053578:	and    eax,0x20000e54
 105357d:	xor    al,0xd
 105357f:	add    BYTE PTR [rdx],dl
 1053581:	push   rdx
 1053582:	(bad)  
 1053583:	lock or al,0xe0
 1053586:	or     dl,al
 1053588:	or     al,al
 105358a:	(bad)  
 105358b:	jo     0x1053521
 105358d:	inc    BYTE PTR [rbx]
 105358f:	add    BYTE PTR [rax-0xffffdb],ah
 1053595:	(bad)  
 1053596:	(bad)  
 1053597:	push   QWORD PTR [rax+0x4a2]
 105359d:	add    BYTE PTR [rax],al
 105359f:	add    al,dl
 10535a1:	movabs ds:0xa2f0000000010004,al
 10535aa:	add    al,0x0
 10535ac:	add    al,BYTE PTR [rax]
 10535ae:	add    BYTE PTR [rax],al
 10535b0:	adc    BYTE PTR [rbx+0x30004],ah
 10535b6:	add    BYTE PTR [rax],al
 10535b8:	xor    BYTE PTR [rbx-0x11dffffc],ah
 10535be:	add    BYTE PTR [rax],al
 10535c0:	(bad)  
 10535c1:	(bad)  
 10535c2:	(bad)  
 10535c3:	jmp    QWORD PTR [rcx-0x12]
 10535c6:	add    BYTE PTR [rax],al
 10535c8:	add    BYTE PTR [rax],al
 10535ca:	add    BYTE PTR [rax],al
 10535cc:	ins    BYTE PTR es:[rdi],dx
 10535cd:	out    dx,al
 10535ce:	add    BYTE PTR [rax],al
 10535d0:	add    DWORD PTR [rax],eax
 10535d2:	add    BYTE PTR [rax],al
 10535d4:	ja     0x10535c4
 10535d6:	add    BYTE PTR [rax],al
 10535d8:	add    al,BYTE PTR [rax]
 10535da:	add    BYTE PTR [rax],al
 10535dc:	(bad)  
 10535dd:	out    dx,al
 10535de:	add    BYTE PTR [rax],al
 10535e0:	add    eax,DWORD PTR [rax]
 10535e2:	add    BYTE PTR [rax],al
 10535e4:	(bad)  
 10535e5:	out    dx,al
 10535e6:	add    BYTE PTR [rax],al
 10535e8:	add    al,0x0
 10535ea:	add    BYTE PTR [rax],al
 10535ec:	add    ebp,edi
 10535ee:	add    BYTE PTR [rax],al
 10535f0:	(bad)  
 10535f1:	(bad)  
 10535f2:	(bad)  
 10535f3:	call   QWORD PTR [rcx]
 10535f5:	sub    cl,BYTE PTR [rax+rax*1]
 10535f8:	sub    ah,BYTE PTR [rdi+rcx*1+0x0]
 10535fc:	and    eax,0x20000e54
 1053601:	xor    al,0xd
 1053603:	add    BYTE PTR [rdx],dl
 1053605:	push   rdx
 1053606:	(bad)  
 1053607:	lock or al,0xe0
 105360a:	or     dl,al
 105360c:	or     al,al
 105360e:	(bad)  
 105360f:	jo     0x10535a5
 1053611:	inc    BYTE PTR [rbx]
 1053613:	add    al,cl
 1053615:	and    eax,0xffff0000
 105361a:	(bad)  
 105361b:	call   QWORD PTR [rax]
 105361d:	movabs ds:0xa230000000000004,al
 1053626:	add    al,0x0
 1053628:	add    DWORD PTR [rax],eax
 105362a:	add    BYTE PTR [rax],al
 105362c:	push   rax
 105362d:	movabs ds:0xa270000000020004,al
 1053636:	add    al,0x0
 1053638:	add    eax,DWORD PTR [rax]
 105363a:	add    BYTE PTR [rax],al
 105363c:	nop
 105363d:	movabs ds:0xffff0000ef300004,al
 1053646:	(bad)  
 1053647:	push   QWORD PTR [rcx-0x11]
 105364a:	add    BYTE PTR [rax],al
 105364c:	add    BYTE PTR [rax],al
 105364e:	add    BYTE PTR [rax],al
 1053650:	jl     0x1053641
 1053652:	add    BYTE PTR [rax],al
 1053654:	add    DWORD PTR [rax],eax
 1053656:	add    BYTE PTR [rax],al
 1053658:	xchg   edi,ebp
 105365a:	add    BYTE PTR [rax],al
 105365c:	add    al,BYTE PTR [rax]
 105365e:	add    BYTE PTR [rax],al
 1053660:	xchg   edx,eax
 1053661:	out    dx,eax
 1053662:	add    BYTE PTR [rax],al
 1053664:	add    eax,DWORD PTR [rax]
 1053666:	add    BYTE PTR [rax],al
 1053668:	popf   
 1053669:	out    dx,eax
 105366a:	add    BYTE PTR [rax],al
 105366c:	add    al,0x0
 105366e:	add    BYTE PTR [rax],al
 1053670:	adc    al,0xf0
 1053672:	add    BYTE PTR [rax],al
 1053674:	(bad)  
 1053675:	(bad)  
 1053676:	(bad)  
 1053677:	call   QWORD PTR [rcx]
 1053679:	sub    cl,BYTE PTR [rax+rax*1]
 105367c:	sub    ah,BYTE PTR [rdi+rcx*1+0x0]
 1053680:	and    eax,0x20000e54
 1053685:	xor    al,0xd
 1053687:	add    BYTE PTR [rdx],dl
 1053689:	push   rdx
 105368a:	(bad)  
 105368b:	lock or al,0xe0
 105368e:	or     dl,al
 1053690:	or     al,al
 1053692:	(bad)  
 1053693:	jo     0x1053629
 1053695:	inc    BYTE PTR [rbx]
 1053697:	add    al,dh
 1053699:	and    eax,0xffff0000
 105369e:	(bad)  
 105369f:	push   QWORD PTR [rax]
 10536a1:	movabs al,ds:0xa050000000000004
 10536aa:	add    al,0x0
 10536ac:	add    DWORD PTR [rax],eax
 10536ae:	add    BYTE PTR [rax],al
 10536b0:	jo     0x1053652
 10536b2:	add    al,0x0
 10536b4:	add    al,BYTE PTR [rax]
 10536b6:	add    BYTE PTR [rax],al
 10536b8:	nop
 10536b9:	movabs al,ds:0xa0b0000000030004
 10536c2:	add    al,0x0
 10536c4:	rex
 10536c5:	lock add BYTE PTR [rax],al
 10536c8:	(bad)  
 10536c9:	(bad)  
 10536ca:	(bad)  
 10536cb:	inc    DWORD PTR [rcx+0xf0]
 10536d1:	add    BYTE PTR [rax],al
 10536d3:	add    BYTE PTR [rax+rsi*8+0x10000],cl
 10536da:	add    BYTE PTR [rax],al
 10536dc:	xchg   edi,eax
 10536dd:	lock add BYTE PTR [rax],al
 10536e0:	add    al,BYTE PTR [rax]
 10536e2:	add    BYTE PTR [rax],al
 10536e4:	movabs ds:0xad000000030000f0,al
 10536ed:	lock add BYTE PTR [rax],al
 10536f0:	add    al,0x0
 10536f2:	add    BYTE PTR [rax],al
 10536f4:	and    al,0xf1
 10536f6:	add    BYTE PTR [rax],al
 10536f8:	(bad)  
 10536f9:	(bad)  
 10536fa:	(bad)  
 10536fb:	call   QWORD PTR [rcx]
 10536fd:	sub    cl,BYTE PTR [rax+rax*1]
 1053700:	sub    ah,BYTE PTR [rdi+rcx*1+0x0]
 1053704:	and    eax,0x20000e54
 1053709:	xor    al,0xd
 105370b:	add    BYTE PTR [rdx],dl
 105370d:	push   rdx
 105370e:	(bad)  
 105370f:	lock or al,0xe0
 1053712:	or     dl,al
 1053714:	or     al,al
 1053716:	(bad)  
 1053717:	jo     0x10536ad
 1053719:	inc    BYTE PTR [rbx]
 105371b:	add    BYTE PTR [rax],bl
 105371d:	add    BYTE PTR es:[rax],al
 1053720:	(bad)  
 1053721:	(bad)  
 1053722:	(bad)  
 1053723:	push   QWORD PTR [rax-0x5f]
 1053726:	add    al,0x0
 1053728:	add    BYTE PTR [rax],al
 105372a:	add    BYTE PTR [rax],al
 105372c:	nop
 105372d:	movabs eax,ds:0xa1b0000000010004
 1053736:	add    al,0x0
 1053738:	add    al,BYTE PTR [rax]
 105373a:	add    BYTE PTR [rax],al
 105373c:	shl    BYTE PTR [rcx+0x30004],1
 1053742:	add    BYTE PTR [rax],al
 1053744:	lock movabs eax,ds:0xffff0000f1500004
 105374e:	(bad)  
 105374f:	call   QWORD PTR [rcx+0xf1]
 1053755:	add    BYTE PTR [rax],al
 1053757:	add    BYTE PTR [rcx+rsi*8+0x10000],bl
 105375e:	add    BYTE PTR [rax],al
 1053760:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1053761:	icebp  
 1053762:	add    BYTE PTR [rax],al
 1053764:	add    al,BYTE PTR [rax]
 1053766:	add    BYTE PTR [rax],al
 1053768:	mov    dl,0xf1
 105376a:	add    BYTE PTR [rax],al
 105376c:	add    eax,DWORD PTR [rax]
 105376e:	add    BYTE PTR [rax],al
 1053770:	mov    ebp,0x40000f1
 1053775:	add    BYTE PTR [rax],al
 1053777:	add    BYTE PTR [rip+0xffffffffff0000f2],dh        # 0x5386f
 105377d:	(bad)  
 105377e:	(bad)  
 105377f:	call   QWORD PTR [rcx]
 1053781:	sub    cl,BYTE PTR [rax+rax*1]
 1053784:	sub    ah,BYTE PTR [rdi+rcx*1+0x0]
 1053788:	and    eax,0x20000e54
 105378d:	xor    al,0xd
 105378f:	add    BYTE PTR [rdx],dl
 1053791:	push   rdx
 1053792:	(bad)  
 1053793:	lock or al,0xe0
 1053796:	or     dl,al
 1053798:	or     al,al
 105379a:	(bad)  
 105379b:	jo     0x1053731
 105379d:	inc    BYTE PTR [rbx]
 105379f:	add    BYTE PTR [rax+0x26],al
 10537a2:	add    BYTE PTR [rax],al
 10537a4:	(bad)  
 10537a5:	(bad)  
 10537a6:	(bad)  
 10537a7:	call   rax
 10537a9:	movabs al,ds:0xa0f0000000000004
 10537b2:	add    al,0x0
 10537b4:	add    DWORD PTR [rax],eax
 10537b6:	add    BYTE PTR [rax],al
 10537b8:	adc    BYTE PTR [rcx+0x20004],ah
 10537be:	add    BYTE PTR [rax],al
 10537c0:	xor    BYTE PTR [rcx+0x30004],ah
 10537c6:	add    BYTE PTR [rax],al
 10537c8:	push   rax
 10537c9:	movabs eax,ds:0xffff0000f2600004
 10537d2:	(bad)  
 10537d3:	jmp    QWORD PTR [rcx+0xf2]
 10537d9:	add    BYTE PTR [rax],al
 10537db:	add    BYTE PTR [rdx+rsi*8+0x10000],ch
 10537e2:	add    BYTE PTR [rax],al
 10537e4:	mov    bh,0xf2
 10537e6:	add    BYTE PTR [rax],al
 10537e8:	add    al,BYTE PTR [rax]
 10537ea:	add    BYTE PTR [rax],al
 10537ec:	ret    0xf2
 10537ef:	add    BYTE PTR [rbx],al
 10537f1:	add    BYTE PTR [rax],al
 10537f3:	add    ch,cl
 10537f5:	repnz add BYTE PTR [rax],al
 10537f8:	add    al,0x0
 10537fa:	add    BYTE PTR [rax],al
 10537fc:	rex.RX
 10537fd:	repz add BYTE PTR [rax],al
 1053800:	(bad)  
 1053801:	(bad)  
 1053802:	(bad)  
 1053803:	call   QWORD PTR [rcx]
 1053805:	sub    cl,BYTE PTR [rax+rax*1]
 1053808:	sub    ah,BYTE PTR [rdi+rcx*1+0x0]
 105380c:	and    eax,0x20000e54
 1053811:	xor    al,0xd
 1053813:	add    BYTE PTR [rdx],dl
 1053815:	push   rdx
 1053816:	(bad)  
 1053817:	lock or al,0xe0
 105381a:	or     dl,al
 105381c:	or     al,al
 105381e:	(bad)  
 105381f:	jo     0x10537b5
 1053821:	inc    BYTE PTR [rbx]
 1053823:	add    BYTE PTR [rax+0x26],ch
 1053826:	add    BYTE PTR [rax],al
 1053828:	(bad)  
 1053829:	(bad)  
 105382a:	(bad)  
 105382b:	call   QWORD PTR [rax-0x5d]
 105382e:	add    al,0x0
 1053830:	add    BYTE PTR [rax],al
 1053832:	add    BYTE PTR [rax],al
 1053834:	jo     0x10537d9
 1053836:	add    al,0x0
 1053838:	add    DWORD PTR [rax],eax
 105383a:	add    BYTE PTR [rax],al
 105383c:	nop
 105383d:	movabs ds:0xa3b0000000020004,eax
 1053846:	add    al,0x0
 1053848:	add    eax,DWORD PTR [rax]
 105384a:	add    BYTE PTR [rax],al
 105384c:	shl    BYTE PTR [rbx-0xc8ffffc],1
 1053852:	add    BYTE PTR [rax],al
 1053854:	(bad)  
 1053855:	(bad)  
 1053856:	(bad)  
 1053857:	push   QWORD PTR [rcx+0xf3]
 105385d:	add    BYTE PTR [rax],al
 105385f:	add    BYTE PTR [rbx+rsi*8+0x10000],bh
 1053866:	add    BYTE PTR [rax],al
 1053868:	(bad)  
 1053869:	repz add BYTE PTR [rax],al
 105386c:	add    al,BYTE PTR [rax]
 105386e:	add    BYTE PTR [rax],al
 1053870:	shl    bl,cl
 1053872:	add    BYTE PTR [rax],al
 1053874:	add    eax,DWORD PTR [rax]
 1053876:	add    BYTE PTR [rax],al
 1053878:	(bad)  
 105387a:	add    BYTE PTR [rax],al
 105387c:	add    al,0x0
 105387e:	add    BYTE PTR [rax],al
 1053880:	pop    rbp
 1053881:	hlt    
 1053882:	add    BYTE PTR [rax],al
 1053884:	(bad)  
 1053885:	(bad)  
 1053886:	(bad)  
 1053887:	call   QWORD PTR [rcx]
 1053889:	adc    eax,DWORD PTR [rdx]
 105388b:	add    BYTE PTR [rdx],cl
 105388d:	push   rdx
 105388e:	(bad)  
 105388f:	xor    BYTE PTR [rsi+rdi*8+0x26900003],dl
 1053896:	add    BYTE PTR [rax],al
 1053898:	(bad)  
 1053899:	(bad)  
 105389a:	(bad)  
 105389b:	call   QWORD PTR [rax+0x4a4]
 10538a1:	add    BYTE PTR [rax],al
 10538a3:	add    BYTE PTR [rax+0x10004a4],dh
 10538a9:	add    BYTE PTR [rax],al
 10538ab:	add    al,dl
 10538ad:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 10538ae:	add    al,0x0
 10538b0:	add    al,BYTE PTR [rax]
 10538b2:	add    BYTE PTR [rax],al
 10538b4:	lock movs BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 10538b6:	add    al,0x0
 10538b8:	add    eax,DWORD PTR [rax]
 10538ba:	add    BYTE PTR [rax],al
 10538bc:	adc    BYTE PTR [rbp-0xb6ffffc],ah
 10538c2:	add    BYTE PTR [rax],al
 10538c4:	(bad)  
 10538c5:	(bad)  
 10538c6:	(bad)  
 10538c7:	jmp    QWORD PTR [rsi+0x30000f4]
 10538cd:	add    BYTE PTR [rax],al
 10538cf:	add    BYTE PTR [rcx+0x20000f4],dh
 10538d5:	add    BYTE PTR [rax],al
 10538d7:	add    BYTE PTR [rsp+rsi*8+0x10000],bh
 10538de:	add    BYTE PTR [rax],al
 10538e0:	(bad)  
 10538e1:	hlt    
 10538e2:	add    BYTE PTR [rax],al
 10538e4:	add    BYTE PTR [rax],al
 10538e6:	add    BYTE PTR [rax],al
 10538e8:	shl    ah,cl
 10538ea:	add    BYTE PTR [rax],al
 10538ec:	(bad)  
 10538ed:	(bad)  
 10538ee:	(bad)  
 10538ef:	inc    DWORD PTR [rcx]
 10538f1:	or     al,BYTE PTR [rax+rax*1]
 10538f4:	or     dh,BYTE PTR [rsi+rax*1]
 10538f7:	add    BYTE PTR [rdx],cl
 10538f9:	xor    al,BYTE PTR [rsi]
 10538fb:	jo     0x105390e
 10538fd:	adc    eax,DWORD PTR [rdx]
 10538ff:	add    BYTE PTR [rdx],cl
 1053901:	push   rdx
 1053902:	(bad)  
 1053903:	xor    BYTE PTR [rsi+rdi*8+0x26b80003],dl
 105390a:	add    BYTE PTR [rax],al
 105390c:	(bad)  
 105390d:	(bad)  
 105390e:	(bad)  
 105390f:	push   QWORD PTR [rax]
 1053911:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1053912:	add    al,0x0
 1053914:	xor    ch,0x0
 1053917:	add    bh,bh
 1053919:	(bad)  
 105391a:	(bad)  
 105391b:	call   QWORD PTR [rsi+0xf5]
 1053921:	add    BYTE PTR [rax],al
 1053923:	add    BYTE PTR [rbp+rsi*8-0x10000],bl
 105392a:	(bad)  
 105392b:	call   QWORD PTR [rcx]
 105392d:	(bad)  
 105392e:	or     BYTE PTR [rax],al
 1053930:	(bad)  
 1053931:	or     eax,DWORD PTR fs:[rax]
 1053934:	sbb    DWORD PTR [rdx+rcx*1+0x0],edx
 1053938:	adc    al,0x34
 105393a:	or     DWORD PTR [rax],eax
 105393c:	(bad)  
 105393d:	push   rdx
 105393e:	add    dh,BYTE PTR [rax-0x6c]
 1053941:	inc    BYTE PTR [rbx]
 1053943:	add    al,ah
 1053945:	add    BYTE PTR es:[rax],al
 1053948:	(bad)  
 1053949:	(bad)  
 105394a:	(bad)  
 105394b:	call   QWORD PTR [rax-0x5b]
 105394e:	add    al,0x0
 1053950:	(bad)  
 1053951:	(bad)  
 1053952:	(bad)  
 1053953:	jmp    QWORD PTR [rax-0x5b]
 1053956:	add    al,0x0
 1053958:	add    DWORD PTR [rax],eax
 105395a:	add    BYTE PTR [rax],al
 105395c:	and    BYTE PTR [rbp+0x20004],0x0
 1053963:	add    BYTE PTR [rax+0x30004a5],ah
 1053969:	add    BYTE PTR [rax],al
 105396b:	add    al,al
 105396d:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 105396e:	add    al,0x0
 1053970:	add    al,0x0
 1053972:	add    BYTE PTR [rax],al
 1053974:	loopne 0x105391b
 1053976:	add    al,0x0
 1053978:	shl    ch,0x0
 105397b:	add    bh,bh
 105397d:	(bad)  
 105397e:	(bad)  
 105397f:	push   rbp
 1053981:	cmc    
 1053982:	add    BYTE PTR [rax],al
 1053984:	add    BYTE PTR [rax],al
 1053986:	add    BYTE PTR [rax],al
 1053988:	(bad)  
 1053989:	test   BYTE PTR [rax],0x0
 105398c:	(bad)  
 105398d:	(bad)  
 105398e:	(bad)  
 105398f:	dec    DWORD PTR [rsi+rsi*8+0x0]
 1053993:	add    BYTE PTR [rax+rax*1],al
 1053996:	add    BYTE PTR [rax],al
 1053998:	push   rdi
 1053999:	test   BYTE PTR [rax],0x0
 105399c:	add    eax,DWORD PTR [rax]
 105399e:	add    BYTE PTR [rax],al
 10539a0:	(bad)  
 10539a1:	test   BYTE PTR [rax],0x0
 10539a4:	add    al,BYTE PTR [rax]
 10539a6:	add    BYTE PTR [rax],al
 10539a8:	ins    DWORD PTR es:[rdi],dx
 10539a9:	test   BYTE PTR [rax],0x0
 10539ac:	add    DWORD PTR [rax],eax
 10539ae:	add    BYTE PTR [rax],al
 10539b0:	js     0x10539a8
 10539b2:	add    BYTE PTR [rax],al
 10539b4:	(bad)  
 10539b5:	(bad)  
 10539b6:	(bad)  
 10539b7:	call   QWORD PTR [rcx]
 10539b9:	(bad)  
 10539ba:	or     BYTE PTR [rax],al
 10539bc:	(bad)  
 10539bd:	or     eax,DWORD PTR fs:[rax]
 10539c0:	sbb    DWORD PTR [rdx+rcx*1+0x0],edx
 10539c4:	adc    al,0x34
 10539c6:	or     DWORD PTR [rax],eax
 10539c8:	(bad)  
 10539c9:	push   rdx
 10539ca:	add    dh,BYTE PTR [rax-0x6c]
 10539cd:	inc    BYTE PTR [rbx]
 10539cf:	add    BYTE PTR [rax],cl
 10539d1:	(bad)  
 10539d2:	add    BYTE PTR [rax],al
 10539d4:	(bad)  
 10539d5:	(bad)  
 10539d6:	(bad)  
 10539d7:	inc    DWORD PTR [rax]
 10539d9:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 10539da:	add    al,0x0
 10539dc:	(bad)  
 10539dd:	(bad)  
 10539de:	(bad)  
 10539df:	call   QWORD PTR [rax]
 10539e1:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 10539e2:	add    al,0x0
 10539e4:	add    DWORD PTR [rax],eax
 10539e6:	add    BYTE PTR [rax],al
 10539e8:	xor    BYTE PTR [rsi+0x20004],ah
 10539ee:	add    BYTE PTR [rax],al
 10539f0:	push   rax
 10539f1:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 10539f2:	add    al,0x0
 10539f4:	add    eax,DWORD PTR [rax]
 10539f6:	add    BYTE PTR [rax],al
 10539f8:	jo     0x10539a0
 10539fa:	add    al,0x0
 10539fc:	add    al,0x0
 10539fe:	add    BYTE PTR [rax],al
 1053a00:	nop
 1053a01:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1053a02:	add    al,0x0
 1053a04:	mov    al,0xf6
 1053a06:	add    BYTE PTR [rax],al
 1053a08:	(bad)  
 1053a09:	(bad)  
 1053a0a:	(bad)  
 1053a0b:	(bad)  
 1053a0c:	call   0x1053b07
 1053a11:	add    BYTE PTR [rax],al
 1053a13:	add    BYTE PTR [rdi+rsi*8],al
 1053a16:	add    BYTE PTR [rax],al
 1053a18:	(bad)  
 1053a19:	(bad)  
 1053a1a:	(bad)  
 1053a1b:	inc    DWORD PTR [rdx-0x9]
 1053a1e:	add    BYTE PTR [rax],al
 1053a20:	add    al,0x0
 1053a22:	add    BYTE PTR [rax],al
 1053a24:	rex.WRB test QWORD PTR [r8],0x300
 1053a2b:	add    BYTE PTR [rax-0x9],bl
 1053a2e:	add    BYTE PTR [rax],al
 1053a30:	add    al,BYTE PTR [rax]
 1053a32:	add    BYTE PTR [rax],al
 1053a34:	movsxd esi,edi
 1053a36:	add    BYTE PTR [rax],al
 1053a38:	add    DWORD PTR [rax],eax
 1053a3a:	add    BYTE PTR [rax],al
 1053a3c:	outs   dx,BYTE PTR ds:[rsi]
 1053a3d:	test   DWORD PTR [rax],0xffffff00
 1053a43:	call   QWORD PTR [rcx]
 1053a45:	(bad)  
 1053a46:	or     BYTE PTR [rax],al
 1053a48:	(bad)  
 1053a49:	fs or  eax,0xc541900
 1053a4f:	add    BYTE PTR [rsp+rsi*1],dl
 1053a52:	or     eax,DWORD PTR [rax]
 1053a54:	(bad)  
 1053a55:	jb     0x1053a59
 1053a57:	jo     0x10539ed
 1053a59:	inc    BYTE PTR [rbx]
 1053a5b:	add    BYTE PTR [rax],dh
 1053a5d:	(bad)  
 1053a5e:	add    BYTE PTR [rax],al
 1053a60:	(bad)  
 1053a61:	(bad)  
 1053a62:	(bad)  
 1053a63:	jmp    QWORD PTR [rax-0x59]
 1053a66:	add    al,0x0
 1053a68:	(bad)  
 1053a69:	(bad)  
 1053a6a:	(bad)  
 1053a6b:	push   QWORD PTR [rax-0x59]
 1053a6e:	add    al,0x0
 1053a70:	add    DWORD PTR [rax],eax
 1053a72:	add    BYTE PTR [rax],al
 1053a74:	nop
 1053a75:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1053a76:	add    al,0x0
 1053a78:	add    al,BYTE PTR [rax]
 1053a7a:	add    BYTE PTR [rax],al
 1053a7c:	mov    al,0xa7
 1053a7e:	add    al,0x0
 1053a80:	add    eax,DWORD PTR [rax]
 1053a82:	add    BYTE PTR [rax],al
 1053a84:	shl    BYTE PTR [rdi+0x40004],1
 1053a8a:	add    BYTE PTR [rax],al
 1053a8c:	lock cmps DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1053a8e:	add    al,0x0
 1053a90:	movabs al,ds:0xd8ffffffff0000f7
 1053a99:	test   DWORD PTR [rax],0x0
 1053a9f:	add    dh,bh
 1053aa1:	test   DWORD PTR [rax],0xffffff00
 1053aa7:	(bad)  
 1053aa8:	cmp    al,0xf8
 1053aaa:	add    BYTE PTR [rax],al
 1053aac:	add    al,0x0
 1053aae:	add    BYTE PTR [rax],al
 1053ab0:	rex.RXB clc 
 1053ab2:	add    BYTE PTR [rax],al
 1053ab4:	add    eax,DWORD PTR [rax]
 1053ab6:	add    BYTE PTR [rax],al
 1053ab8:	push   rdx
 1053ab9:	clc    
 1053aba:	add    BYTE PTR [rax],al
 1053abc:	add    al,BYTE PTR [rax]
 1053abe:	add    BYTE PTR [rax],al
 1053ac0:	pop    rbp
 1053ac1:	clc    
 1053ac2:	add    BYTE PTR [rax],al
 1053ac4:	add    DWORD PTR [rax],eax
 1053ac6:	add    BYTE PTR [rax],al
 1053ac8:	push   0xffffffffff0000f8
 1053acd:	(bad)  
 1053ace:	(bad)  
 1053acf:	call   QWORD PTR [rcx]
 1053ad1:	(bad)  
 1053ad2:	or     BYTE PTR [rax],al
 1053ad4:	(bad)  
 1053ad5:	fs or  eax,0xc541900
 1053adb:	add    BYTE PTR [rsp+rsi*1],dl
 1053ade:	or     eax,DWORD PTR [rax]
 1053ae0:	(bad)  
 1053ae1:	jb     0x1053ae5
 1053ae3:	jo     0x1053a79
 1053ae5:	inc    BYTE PTR [rbx]
 1053ae7:	add    BYTE PTR [rax+0x27],bl
 1053aea:	add    BYTE PTR [rax],al
 1053aec:	(bad)  
 1053aed:	(bad)  
 1053aee:	(bad)  
 1053aef:	push   QWORD PTR [rax-0xfffb5a]
 1053af5:	(bad)  
 1053af6:	(bad)  
 1053af7:	inc    eax
 1053af9:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1053afa:	add    al,0x0
 1053afc:	add    DWORD PTR [rax],eax
 1053afe:	add    BYTE PTR [rax],al
 1053b00:	loopne 0x1053aa8
 1053b02:	add    al,0x0
 1053b04:	add    al,BYTE PTR [rax]
 1053b06:	add    BYTE PTR [rax],al
 1053b08:	add    BYTE PTR [rdi+0x30004],ah
 1053b0e:	add    BYTE PTR [rax],al
 1053b10:	and    BYTE PTR [rdi+0x40004],ah
 1053b16:	add    BYTE PTR [rax],al
 1053b18:	rex cmps DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1053b1a:	add    al,0x0
 1053b1c:	movabs al,ds:0xd8ffffffff0000f8
 1053b25:	clc    
 1053b26:	add    BYTE PTR [rax],al
 1053b28:	add    BYTE PTR [rax],al
 1053b2a:	add    BYTE PTR [rax],al
 1053b2c:	or     cl,bh
 1053b2e:	add    BYTE PTR [rax],al
 1053b30:	(bad)  
 1053b31:	(bad)  
 1053b32:	(bad)  
 1053b33:	inc    DWORD PTR [rsi-0x7]
 1053b36:	add    BYTE PTR [rax],al
 1053b38:	add    al,0x0
 1053b3a:	add    BYTE PTR [rax],al
 1053b3c:	push   rcx
 1053b3d:	stc    
 1053b3e:	add    BYTE PTR [rax],al
 1053b40:	add    eax,DWORD PTR [rax]
 1053b42:	add    BYTE PTR [rax],al
 1053b44:	pop    rsp
 1053b45:	stc    
 1053b46:	add    BYTE PTR [rax],al
 1053b48:	add    al,BYTE PTR [rax]
 1053b4a:	add    BYTE PTR [rax],al
 1053b4c:	addr32 stc 
 1053b4e:	add    BYTE PTR [rax],al
 1053b50:	add    DWORD PTR [rax],eax
 1053b52:	add    BYTE PTR [rax],al
 1053b54:	jb     0x1053b4f
 1053b56:	add    BYTE PTR [rax],al
 1053b58:	(bad)  
 1053b59:	(bad)  
 1053b5a:	(bad)  
 1053b5b:	call   QWORD PTR [rcx]
 1053b5d:	(bad)  
 1053b5e:	or     BYTE PTR [rax],al
 1053b60:	(bad)  
 1053b61:	fs or  eax,0xc541900
 1053b67:	add    BYTE PTR [rsp+rsi*1],dl
 1053b6a:	or     eax,DWORD PTR [rax]
 1053b6c:	(bad)  
 1053b6d:	jb     0x1053b71
 1053b6f:	jo     0x1053b05
 1053b71:	inc    BYTE PTR [rbx]
 1053b73:	add    BYTE PTR [rax-0xffffd9],al
 1053b79:	(bad)  
 1053b7a:	(bad)  
 1053b7b:	inc    eax
 1053b7d:	test   al,0x4
 1053b7f:	add    bh,bh
 1053b81:	(bad)  
 1053b82:	(bad)  
 1053b83:	call   rax
 1053b85:	test   al,0x4
 1053b87:	add    BYTE PTR [rcx],al
 1053b89:	add    BYTE PTR [rax],al
 1053b8b:	add    al,dh
 1053b8d:	test   al,0x4
 1053b8f:	add    BYTE PTR [rdx],al
 1053b91:	add    BYTE PTR [rax],al
 1053b93:	add    BYTE PTR [rax],dl
 1053b95:	test   eax,0x30004
 1053b9a:	add    BYTE PTR [rax],al
 1053b9c:	xor    BYTE PTR [rcx+0x40004],ch
 1053ba2:	add    BYTE PTR [rax],al
 1053ba4:	push   rax
 1053ba5:	test   eax,0xf9b00004
 1053baa:	add    BYTE PTR [rax],al
 1053bac:	(bad)  
 1053bad:	(bad)  
 1053bae:	(bad)  
 1053baf:	(bad)  
 1053bb0:	jmp    0x1053cae
 1053bb5:	add    BYTE PTR [rax],al
 1053bb7:	add    BYTE PTR [rbx],cl
 1053bb9:	cli    
 1053bba:	add    BYTE PTR [rax],al
 1053bbc:	(bad)  
 1053bbd:	(bad)  
 1053bbe:	(bad)  
 1053bbf:	dec    DWORD PTR [rcx-0x6]
 1053bc2:	add    BYTE PTR [rax],al
 1053bc4:	add    al,0x0
 1053bc6:	add    BYTE PTR [rax],al
 1053bc8:	push   rsp
 1053bc9:	cli    
 1053bca:	add    BYTE PTR [rax],al
 1053bcc:	add    eax,DWORD PTR [rax]
 1053bce:	add    BYTE PTR [rax],al
 1053bd0:	pop    rdi
 1053bd1:	cli    
 1053bd2:	add    BYTE PTR [rax],al
 1053bd4:	add    al,BYTE PTR [rax]
 1053bd6:	add    BYTE PTR [rax],al
 1053bd8:	push   0xfffffffffffffffa
 1053bda:	add    BYTE PTR [rax],al
 1053bdc:	add    DWORD PTR [rax],eax
 1053bde:	add    BYTE PTR [rax],al
 1053be0:	jne    0x1053bdc
 1053be2:	add    BYTE PTR [rax],al
 1053be4:	(bad)  
 1053be5:	(bad)  
 1053be6:	(bad)  
 1053be7:	call   QWORD PTR [rcx]
 1053be9:	(bad)  
 1053bea:	or     BYTE PTR [rax],al
 1053bec:	(bad)  
 1053bed:	fs or  eax,0xc541900
 1053bf3:	add    BYTE PTR [rsp+rsi*1],dl
 1053bf6:	or     eax,DWORD PTR [rax]
 1053bf8:	(bad)  
 1053bf9:	jb     0x1053bfd
 1053bfb:	jo     0x1053b91
 1053bfd:	inc    BYTE PTR [rbx]
 1053bff:	add    BYTE PTR [rax-0xffffd9],ch
 1053c05:	(bad)  
 1053c06:	(bad)  
 1053c07:	call   QWORD PTR [rax]
 1053c09:	test   al,0x4
 1053c0b:	add    bh,bh
 1053c0d:	(bad)  
 1053c0e:	(bad)  
 1053c0f:	jmp    QWORD PTR [rax]
 1053c11:	test   al,0x4
 1053c13:	add    BYTE PTR [rcx],al
 1053c15:	add    BYTE PTR [rax],al
 1053c17:	add    BYTE PTR [rax-0x58],al
 1053c1a:	add    al,0x0
 1053c1c:	add    al,BYTE PTR [rax]
 1053c1e:	add    BYTE PTR [rax],al
 1053c20:	(bad)  
 1053c21:	test   al,0x4
 1053c23:	add    BYTE PTR [rbx],al
 1053c25:	add    BYTE PTR [rax],al
 1053c27:	add    BYTE PTR [rax+0x40004a8],al
 1053c2d:	add    BYTE PTR [rax],al
 1053c2f:	add    BYTE PTR [rax-0x4ffffb58],ah
 1053c35:	cli    
 1053c36:	add    BYTE PTR [rax],al
 1053c38:	(bad)  
 1053c39:	(bad)  
 1053c3a:	(bad)  
 1053c3b:	(bad)  
 1053c3c:	jmp    0x1053d3b
 1053c41:	add    BYTE PTR [rax],al
 1053c43:	add    BYTE PTR [rip+0xffffffffff0000fb],dl        # 0x53d44
 1053c49:	(bad)  
 1053c4a:	(bad)  
 1053c4b:	call   QWORD PTR [rbx-0x5]
 1053c4e:	add    BYTE PTR [rax],al
 1053c50:	add    al,0x0
 1053c52:	add    BYTE PTR [rax],al
 1053c54:	pop    rsi
 1053c55:	sti    
 1053c56:	add    BYTE PTR [rax],al
 1053c58:	add    eax,DWORD PTR [rax]
 1053c5a:	add    BYTE PTR [rax],al
 1053c5c:	imul   edi,ebx,0x20000
 1053c62:	add    BYTE PTR [rax],al
 1053c64:	je     0x1053c61
 1053c66:	add    BYTE PTR [rax],al
 1053c68:	add    DWORD PTR [rax],eax
 1053c6a:	add    BYTE PTR [rax],al
 1053c6c:	jg     0x1053c69
 1053c6e:	add    BYTE PTR [rax],al
 1053c70:	(bad)  
 1053c71:	(bad)  
 1053c72:	(bad)  
 1053c73:	call   QWORD PTR [rcx]
 1053c75:	sbb    al,0x8
 1053c77:	add    BYTE PTR [rsp+riz*2],bl
 1053c7a:	adc    DWORD PTR [rax],eax
 1053c7c:	sbb    BYTE PTR [rax+rdx*1+0x0],dl
 1053c80:	adc    al,0x34
 1053c82:	str    WORD PTR [rax]
 1053c85:	mov    dl,0x4
 1053c87:	jo     0x1053c1d
 1053c89:	inc    BYTE PTR [rbx]
 1053c8b:	add    al,dl
 1053c8d:	(bad)  
 1053c8e:	add    BYTE PTR [rax],al
 1053c90:	(bad)  
 1053c91:	(bad)  
 1053c92:	(bad)  
 1053c93:	push   QWORD PTR [rax-0x57]
 1053c96:	add    al,0x0
 1053c98:	(bad)  
 1053c99:	(bad)  
 1053c9a:	(bad)  
 1053c9b:	inc    DWORD PTR [rax+0x10004a9]
 1053ca1:	add    BYTE PTR [rax],al
 1053ca3:	add    BYTE PTR [rax+0x20004a9],ah
 1053ca9:	add    BYTE PTR [rax],al
 1053cab:	add    al,al
 1053cad:	test   eax,0x30004
 1053cb2:	add    BYTE PTR [rax],al
 1053cb4:	loopne 0x1053c5f
 1053cb6:	add    al,0x0
 1053cb8:	add    al,0x0
 1053cba:	add    BYTE PTR [rax],al
 1053cbc:	add    BYTE PTR [rdx-0x44ffffc],ch
 1053cc2:	add    BYTE PTR [rax],al
 1053cc4:	(bad)  
 1053cc5:	(bad)  
 1053cc6:	(bad)  
 1053cc7:	(bad)  
 1053cc8:	jmp    0x1053dc8
 1053ccd:	add    BYTE PTR [rax],al
 1053ccf:	add    BYTE PTR [rsp+rdi*8+0x0],al
 1053cd3:	add    bh,bh
 1053cd5:	(bad)  
 1053cd6:	(bad)  
 1053cd7:	inc    DWORD PTR [rdx+0x40000fc]
 1053cdd:	add    BYTE PTR [rax],al
 1053cdf:	add    BYTE PTR [rbp+0x30000fc],cl
 1053ce5:	add    BYTE PTR [rax],al
 1053ce7:	add    BYTE PTR [rax+0x20000fc],bl
 1053ced:	add    BYTE PTR [rax],al
 1053cef:	add    BYTE PTR [rbx+0x10000fc],ah
 1053cf5:	add    BYTE PTR [rax],al
 1053cf7:	add    BYTE PTR [rsi-0xffff04],ch
 1053cfd:	(bad)  
 1053cfe:	(bad)  
 1053cff:	call   QWORD PTR [rcx]
 1053d01:	sbb    DWORD PTR [rsi],eax
 1053d03:	add    BYTE PTR [rcx],bl
 1053d05:	or     al,BYTE PTR fs:[rax]
 1053d08:	adc    al,0x34
 1053d0a:	or     DWORD PTR [rax],eax
 1053d0c:	(bad)  
 1053d0d:	push   rdx
 1053d0e:	add    dh,BYTE PTR [rax-0x6c]
 1053d11:	inc    BYTE PTR [rbx]
 1053d13:	add    al,bh
 1053d15:	(bad)  
 1053d16:	add    BYTE PTR [rax],al
 1053d18:	(bad)  
 1053d19:	(bad)  
 1053d1a:	(bad)  
 1053d1b:	call   QWORD PTR [rax-0x56]
 1053d1e:	add    al,0x0
 1053d20:	add    BYTE PTR [rax],al
 1053d22:	add    BYTE PTR [rax],al
 1053d24:	jo     0x1053cd0
 1053d26:	add    al,0x0
 1053d28:	add    DWORD PTR [rax],eax
 1053d2a:	add    BYTE PTR [rax],al
 1053d2c:	nop
 1053d2d:	stos   BYTE PTR es:[rdi],al
 1053d2e:	add    al,0x0
 1053d30:	add    al,BYTE PTR [rax]
 1053d32:	add    BYTE PTR [rax],al
 1053d34:	mov    al,0xaa
 1053d36:	add    al,0x0
 1053d38:	add    eax,DWORD PTR [rax]
 1053d3a:	add    BYTE PTR [rax],al
 1053d3c:	shr    BYTE PTR [rdx-0x2effffc],1
 1053d42:	add    BYTE PTR [rax],al
 1053d44:	(bad)  
 1053d45:	(bad)  
 1053d46:	(bad)  
 1053d47:	dec    DWORD PTR [rcx-0x3]
 1053d4a:	add    BYTE PTR [rax],al
 1053d4c:	add    eax,DWORD PTR [rax]
 1053d4e:	add    BYTE PTR [rax],al
 1053d50:	push   rsp
 1053d51:	std    
 1053d52:	add    BYTE PTR [rax],al
 1053d54:	add    al,BYTE PTR [rax]
 1053d56:	add    BYTE PTR [rax],al
 1053d58:	pop    rdi
 1053d59:	std    
 1053d5a:	add    BYTE PTR [rax],al
 1053d5c:	add    DWORD PTR [rax],eax
 1053d5e:	add    BYTE PTR [rax],al
 1053d60:	push   0xfffffffffffffffd
 1053d62:	add    BYTE PTR [rax],al
 1053d64:	add    BYTE PTR [rax],al
 1053d66:	add    BYTE PTR [rax],al
 1053d68:	jne    0x1053d67
 1053d6a:	add    BYTE PTR [rax],al
 1053d6c:	(bad)  
 1053d6d:	(bad)  
 1053d6e:	(bad)  
 1053d6f:	call   QWORD PTR [rcx]
 1053d71:	(bad)  
 1053d72:	(bad)  
 1053d73:	add    BYTE PTR [rsi],dl
 1053d75:	xor    al,0xb
 1053d77:	add    BYTE PTR [rax],cl
 1053d79:	push   rdx
 1053d7a:	add    al,0x70
 1053d7c:	add    esp,DWORD PTR [rax+0x2]
 1053d7f:	push   rax
 1053d80:	xchg   esp,eax
 1053d81:	inc    BYTE PTR [rbx]
 1053d83:	add    BYTE PTR [rax],ah
 1053d85:	sub    BYTE PTR [rax],al
 1053d87:	add    bh,bh
 1053d89:	(bad)  
 1053d8a:	(bad)  
 1053d8b:	jmp    QWORD PTR [rax]
 1053d8d:	stos   BYTE PTR es:[rdi],al
 1053d8e:	add    al,0x0
 1053d90:	sar    ch,0x0
 1053d93:	add    bh,bh
 1053d95:	(bad)  
 1053d96:	(bad)  
 1053d97:	call   FWORD PTR [rbx-0x2]
 1053d9a:	add    BYTE PTR [rax],al
 1053d9c:	add    BYTE PTR [rax],al
 1053d9e:	add    BYTE PTR [rax],al
 1053da0:	data16 inc BYTE PTR [rax]
 1053da3:	add    bh,bh
 1053da5:	(bad)  
 1053da6:	(bad)  
 1053da7:	inc    DWORD PTR [rcx]
 1053da9:	(bad)  
 1053daa:	add    al,BYTE PTR [rax]
 1053dac:	(bad)  
 1053dad:	xor    al,BYTE PTR [rdx]
 1053daf:	push   rax
 1053db0:	adc    DWORD PTR [rdi],esp
 1053db2:	or     al,0x0
 1053db4:	(bad)  
 1053db5:	sbb    BYTE PTR fs:[rax],al
 1053db8:	and    edx,DWORD PTR [rdi+rdx*1+0x0]
 1053dbc:	(bad)  
 1053dbd:	xor    al,0x16
 1053dbf:	add    BYTE PTR [rbx],dl
 1053dc1:	repnz or al,0xf0
 1053dc4:	or     ah,al
 1053dc6:	or     al,dl
 1053dc8:	(bad)  
 1053dc9:	rol    BYTE PTR [rax+rsi*2],0x94
 1053dcd:	inc    BYTE PTR [rbx]
 1053dcf:	add    BYTE PTR [rax+0x28],cl
 1053dd2:	add    BYTE PTR [rax],al
 1053dd4:	(bad)  
 1053dd5:	(bad)  
 1053dd6:	(bad)  
 1053dd7:	push   rax
 1053dd9:	stos   BYTE PTR es:[rdi],al
 1053dda:	add    al,0x0
 1053ddc:	movabs al,ds:0xe3ffffffff0000fe
 1053de5:	inc    DWORD PTR [rax]
 1053de7:	add    BYTE PTR [rax],al
 1053de9:	add    BYTE PTR [rax],al
 1053deb:	add    BYTE PTR [rip+0xffffffffff000101],dl        # 0x53ef2
 1053df1:	(bad)  
 1053df2:	(bad)  
 1053df3:	push   QWORD PTR [rsi]
 1053df5:	add    DWORD PTR [rcx],eax
 1053df7:	add    BYTE PTR [rax],al
 1053df9:	add    BYTE PTR [rax],al
 1053dfb:	add    BYTE PTR [rcx+0x1],al
 1053dfe:	add    DWORD PTR [rax],eax
 1053e00:	(bad)  
 1053e01:	(bad)  
 1053e02:	(bad)  
 1053e03:	inc    DWORD PTR [rcx]
 1053e05:	(bad)  
 1053e06:	add    al,BYTE PTR [rax]
 1053e08:	(bad)  
 1053e09:	xor    al,BYTE PTR [rdx]
 1053e0b:	push   rax
 1053e0c:	add    DWORD PTR [rdx],ecx
 1053e0e:	add    al,0x0
 1053e10:	or     dh,BYTE PTR [rsi+rax*1]
 1053e13:	add    BYTE PTR [rdx],cl
 1053e15:	xor    al,BYTE PTR [rsi]
 1053e17:	jo     0x1053e2a
 1053e19:	and    ecx,DWORD PTR [rax]
 1053e1b:	add    BYTE PTR [rbx],ah
 1053e1d:	je     0x1053e2a
 1053e1f:	add    BYTE PTR [rsi],bl
 1053e21:	or     al,BYTE PTR fs:[rax]
 1053e24:	sbb    DWORD PTR [rcx+rcx*1],esi
 1053e27:	add    BYTE PTR [rbx],cl
 1053e29:	push   rdx
 1053e2a:	(bad)  
 1053e2b:	loopne 0x1053dc1
 1053e2d:	inc    BYTE PTR [rbx]
 1053e2f:	add    BYTE PTR [rax-0xffffd8],ah
 1053e35:	(bad)  
 1053e36:	(bad)  
 1053e37:	jmp    QWORD PTR [rax]
 1053e39:	stos   DWORD PTR es:[rdi],eax
 1053e3a:	add    al,0x0
 1053e3c:	add    BYTE PTR [rax],al
 1053e3e:	add    BYTE PTR [rax],al
 1053e40:	xor    BYTE PTR [rbx+0x1b00004],ch
 1053e46:	add    DWORD PTR [rax],eax
 1053e48:	(bad)  
 1053e49:	(bad)  
 1053e4a:	(bad)  
 1053e4b:	jmp    rsi
 1053e4d:	add    DWORD PTR [rcx],eax
 1053e4f:	add    BYTE PTR [rax],al
 1053e51:	add    BYTE PTR [rax],al
 1053e53:	add    bl,bh
 1053e55:	add    DWORD PTR [rcx],eax
 1053e57:	add    BYTE PTR [rcx],al
 1053e59:	add    BYTE PTR [rax],al
 1053e5b:	add    BYTE PTR [rdx+rax*1],cl
 1053e5e:	add    DWORD PTR [rax],eax
 1053e60:	(bad)  
 1053e61:	(bad)  
 1053e62:	(bad)  
 1053e63:	call   FWORD PTR [rcx]
 1053e65:	rex.X or eax,DWORD PTR [rax]
 1053e68:	xor    DWORD PTR [rdi+riz*2],esi
 1053e6b:	(bad)  
 1053e6c:	and    DWORD PTR [rcx],eax
 1053e6e:	pop    rsp
 1053e6f:	(bad)  
 1053e70:	or     al,0xf0
 1053e72:	or     ah,al
 1053e74:	or     al,dl
 1053e76:	(bad)  
 1053e77:	rol    BYTE PTR [rax+rsi*2],0x3
 1053e7b:	(bad)  
 1053e7c:	add    dl,BYTE PTR [rax+0x0]
 1053e7f:	add    BYTE PTR [rax-0x37fffc02],ah
 1053e85:	sub    BYTE PTR [rax],al
 1053e87:	add    dl,dl
 1053e89:	xor    al,BYTE PTR [rax]
 1053e8b:	add    bh,bh
 1053e8d:	(bad)  
 1053e8e:	(bad)  
 1053e8f:	call   QWORD PTR [rax-0x54]
 1053e92:	add    al,0x0
 1053e94:	add    BYTE PTR [rax],al
 1053e96:	add    BYTE PTR [rax],al
 1053e98:	(bad)  
 1053e99:	lods   al,BYTE PTR ds:[rsi]
 1053e9a:	add    al,0x0
 1053e9c:	add    DWORD PTR [rax],eax
 1053e9e:	add    BYTE PTR [rax],al
 1053ea0:	jo     0x1053e4e
 1053ea2:	add    al,0x0
 1053ea4:	add    al,BYTE PTR [rax]
 1053ea6:	add    BYTE PTR [rax],al
 1053ea8:	sub    BYTE PTR [rsp+rax*1+0x200],0x0
 1053eb0:	nop
 1053eb1:	lods   al,BYTE PTR ds:[rsi]
 1053eb2:	add    al,0x0
 1053eb4:	add    al,0x0
 1053eb6:	add    BYTE PTR [rax],al
 1053eb8:	movabs al,ds:0xc0000000020004ac
 1053ec1:	lods   al,BYTE PTR ds:[rsi]
 1053ec2:	add    al,0x0
 1053ec4:	add    DWORD PTR [rax],eax
 1053ec6:	add    BYTE PTR [rax],al
 1053ec8:	shr    BYTE PTR [rsp+rax*1+0x100],1
 1053ecf:	add    al,ah
 1053ed1:	lods   al,BYTE PTR ds:[rsi]
 1053ed2:	add    al,0x0
 1053ed4:	or     BYTE PTR [rax],al
 1053ed6:	add    BYTE PTR [rax],al
 1053ed8:	lock lods al,BYTE PTR ds:[rsi]
 1053eda:	add    al,0x0
 1053edc:	xor    BYTE PTR [rdx],al
 1053ede:	add    DWORD PTR [rax],eax
 1053ee0:	(bad)  
 1053ee1:	(bad)  
 1053ee2:	(bad)  
 1053ee3:	jmp    QWORD PTR [rsi+0x102]
 1053ee9:	add    BYTE PTR [rax],al
 1053eeb:	add    BYTE PTR [rcx+0x3],bh
 1053eee:	add    DWORD PTR [rax],eax
 1053ef0:	add    DWORD PTR [rax],eax
 1053ef2:	add    BYTE PTR [rax],al
 1053ef4:	movabs ds:0xd000000002000103,eax
 1053efd:	add    eax,DWORD PTR [rcx]
 1053eff:	add    BYTE PTR [rax+rax*1],al
 1053f02:	add    BYTE PTR [rax],al
 1053f04:	fild   DWORD PTR [rbx]
 1053f06:	add    DWORD PTR [rax],eax
 1053f08:	add    al,BYTE PTR [rax]
 1053f0a:	add    BYTE PTR [rax],al
 1053f0c:	int3   
 1053f0d:	add    al,0x1
 1053f0f:	add    BYTE PTR [rsi],al
 1053f11:	add    BYTE PTR [rax],al
 1053f13:	add    bh,ch
 1053f15:	add    al,0x1
 1053f17:	add    BYTE PTR [rdx],al
 1053f19:	add    BYTE PTR [rax],al
 1053f1b:	add    dl,bh
 1053f1d:	add    al,0x1
 1053f1f:	add    BYTE PTR [rcx],al
 1053f21:	add    BYTE PTR [rax],al
 1053f23:	add    BYTE PTR [rax],dh
 1053f25:	add    eax,0x80001
 1053f2a:	add    BYTE PTR [rax],al
 1053f2c:	cmp    eax,DWORD PTR [rip+0x10001]        # 0x1063f33
 1053f32:	add    BYTE PTR [rax],al
 1053f34:	xchg   ecx,eax
 1053f35:	add    eax,0x1
 1053f3a:	add    BYTE PTR [rax],al
 1053f3c:	enter  0x105,0x0
 1053f40:	(bad)  
 1053f41:	(bad)  
 1053f42:	(bad)  
 1053f43:	call   FWORD PTR [rcx]
 1053f45:	(bad)  
 1053f46:	(bad)  
 1053f47:	add    BYTE PTR [rcx+rax*1],cl
 1053f4a:	sub    eax,0x4700500
 1053f4f:	(bad)  
 1053f50:	add    edx,DWORD PTR [rax+0x2]
 1053f53:	xor    BYTE PTR [rax-0xffffc02],ah
 1053f59:	sub    BYTE PTR [rax],al
 1053f5b:	add    BYTE PTR [rdx+0x1],dl
 1053f5e:	add    BYTE PTR [rax],al
 1053f60:	(bad)  
 1053f61:	(bad)  
 1053f62:	(bad)  
 1053f63:	push   QWORD PTR [rax]
 1053f65:	lods   al,BYTE PTR ds:[rsi]
 1053f66:	add    al,0x0
 1053f68:	push   rax
 1053f69:	(bad)  
 1053f6a:	add    DWORD PTR [rax],eax
 1053f6c:	(bad)  
 1053f6d:	(bad)  
 1053f6e:	(bad)  
 1053f6f:	call   QWORD PTR [rdi]
 1053f71:	(bad)  
 1053f72:	add    DWORD PTR [rax],eax
 1053f74:	add    BYTE PTR [rax],al
 1053f76:	add    BYTE PTR [rax],al
 1053f78:	rex.WR (bad) 
 1053f7a:	add    DWORD PTR [rax],eax
 1053f7c:	(bad)  
 1053f7d:	(bad)  
 1053f7e:	(bad)  
 1053f7f:	call   FWORD PTR [rcx]
 1053f81:	cmp    al,0xb
 1053f83:	add    BYTE PTR [rbx],ch
 1053f85:	xor    al,0x39
 1053f87:	add    DWORD PTR [rbx],ebx
 1053f89:	add    DWORD PTR [rsi],ebp
 1053f8b:	add    DWORD PTR [rax+rsi*8],ecx
 1053f8e:	or     ah,al
 1053f90:	or     al,dl
 1053f92:	(bad)  
 1053f93:	rol    BYTE PTR [rax+rsi*2],0x3
 1053f97:	(bad)  
 1053f98:	add    dl,BYTE PTR [rax+0x0]
 1053f9b:	add    BYTE PTR [rax+0x180003fe],ah
 1053fa1:	sub    DWORD PTR [rax],eax
 1053fa3:	add    BYTE PTR [rdx+0x9],ah
 1053fa6:	add    BYTE PTR [rax],al
 1053fa8:	(bad)  
 1053fa9:	(bad)  
 1053faa:	(bad)  
 1053fab:	call   QWORD PTR [rax]
 1053fad:	lods   eax,DWORD PTR ds:[rsi]
 1053fae:	add    al,0x0
 1053fb0:	add    BYTE PTR [rax],al
 1053fb2:	add    BYTE PTR [rax],al
 1053fb4:	and    BYTE PTR [rbp+0x10004],ch
 1053fba:	add    BYTE PTR [rax],al
 1053fbc:	xor    BYTE PTR [rbp+0x4],ch
 1053fc2:	add    BYTE PTR [rax],al
 1053fc4:	xor    BYTE PTR [rbp+0x30004],ch
 1053fca:	add    BYTE PTR [rax],al
 1053fcc:	rex lods eax,DWORD PTR ds:[rsi]
 1053fce:	add    al,0x0
 1053fd0:	add    eax,DWORD PTR [rax]
 1053fd2:	add    BYTE PTR [rax],al
 1053fd4:	push   rax
 1053fd5:	lods   eax,DWORD PTR ds:[rsi]
 1053fd6:	add    al,0x0
 1053fd8:	add    eax,DWORD PTR [rax]
 1053fda:	add    BYTE PTR [rax],al
 1053fdc:	(bad)  
 1053fdd:	lods   eax,DWORD PTR ds:[rsi]
 1053fde:	add    al,0x0
 1053fe0:	add    eax,DWORD PTR [rax]
 1053fe2:	add    BYTE PTR [rax],al
 1053fe4:	jo     0x1053f93
 1053fe6:	add    al,0x0
 1053fe8:	(bad)  
 1053fe9:	add    BYTE PTR [rax],al
 1053feb:	add    BYTE PTR [rax+0x80004ad],al
 1053ff1:	add    BYTE PTR [rax],al
 1053ff3:	add    BYTE PTR [rax+0x30004ad],dh
 1053ff9:	add    BYTE PTR [rax],al
 1053ffb:	add    al,ah
 1053ffd:	lods   eax,DWORD PTR ds:[rsi]
 1053ffe:	add    al,0x0
 1054000:	or     al,BYTE PTR [rax]
 1054002:	add    BYTE PTR [rax],al
 1054004:	lock lods eax,DWORD PTR ds:[rsi]
 1054006:	add    al,0x0
 1054008:	add    eax,DWORD PTR [rax]
 105400a:	add    BYTE PTR [rax],al
 105400c:	add    BYTE PTR [rsi+0x30004],ch
 1054012:	add    BYTE PTR [rax],al
 1054014:	adc    BYTE PTR [rsi+0xd0004],ch
 105401a:	add    BYTE PTR [rax],al
 105401c:	and    BYTE PTR [rsi+0xe0004],ch
 1054022:	add    BYTE PTR [rax],al
 1054024:	xor    BYTE PTR [rsi+0xf0004],ch
 105402a:	add    BYTE PTR [rax],al
 105402c:	scas   al,BYTE PTR es:[rdi]
 105402e:	add    al,0x0
 1054030:	adc    BYTE PTR [rax],al
 1054032:	add    BYTE PTR [rax],al
 1054034:	push   rax
 1054035:	scas   al,BYTE PTR es:[rdi]
 1054036:	add    al,0x0
 1054038:	adc    DWORD PTR [rax],eax
 105403a:	add    BYTE PTR [rax],al
 105403c:	(bad)  
 105403d:	scas   al,BYTE PTR es:[rdi]
 105403e:	add    al,0x0
 1054040:	adc    al,BYTE PTR [rax]
 1054042:	add    BYTE PTR [rax],al
 1054044:	jo     0x1053ff4
 1054046:	add    al,0x0
 1054048:	adc    al,BYTE PTR [rax]
 105404a:	add    BYTE PTR [rax],al
 105404c:	sub    BYTE PTR [rsi+0x120004],0x0
 1054053:	add    BYTE PTR [rax+0x120004ae],dl
 1054059:	add    BYTE PTR [rax],al
 105405b:	add    BYTE PTR [rax+0x160004ae],ah
 1054061:	add    BYTE PTR [rax],al
 1054063:	add    BYTE PTR [rax+0x120004ae],dh
 1054069:	add    BYTE PTR [rax],al
 105406b:	add    al,al
 105406d:	scas   al,BYTE PTR es:[rdi]
 105406e:	add    al,0x0
 1054070:	adc    al,BYTE PTR [rax]
 1054072:	add    BYTE PTR [rax],al
 1054074:	shr    BYTE PTR [rsi+0x120004],1
 105407a:	add    BYTE PTR [rax],al
 105407c:	loopne 0x105402c
 105407e:	add    al,0x0
 1054080:	adc    al,BYTE PTR [rax]
 1054082:	add    BYTE PTR [rax],al
 1054084:	lock scas al,BYTE PTR es:[rdi]
 1054086:	add    al,0x0
 1054088:	adc    al,BYTE PTR [rax]
 105408a:	add    BYTE PTR [rax],al
 105408c:	add    BYTE PTR [rdi+0x120004],ch
 1054092:	add    BYTE PTR [rax],al
 1054094:	adc    BYTE PTR [rdi+0x1d0004],ch
 105409a:	add    BYTE PTR [rax],al
 105409c:	and    BYTE PTR [rdi+0x120004],ch
 10540a2:	add    BYTE PTR [rax],al
 10540a4:	xor    BYTE PTR [rdi+0x120004],ch
 10540aa:	add    BYTE PTR [rax],al
 10540ac:	rex scas eax,DWORD PTR es:[rdi]
 10540ae:	add    al,0x0
 10540b0:	adc    al,BYTE PTR [rax]
 10540b2:	add    BYTE PTR [rax],al
 10540b4:	push   rax
 10540b5:	scas   eax,DWORD PTR es:[rdi]
 10540b6:	add    al,0x0
 10540b8:	adc    al,BYTE PTR [rax]
 10540ba:	add    BYTE PTR [rax],al
 10540bc:	(bad)  
 10540bd:	scas   eax,DWORD PTR es:[rdi]
 10540be:	add    al,0x0
 10540c0:	adc    al,BYTE PTR [rax]
 10540c2:	add    BYTE PTR [rax],al
 10540c4:	jo     0x1054075
 10540c6:	add    al,0x0
 10540c8:	adc    al,BYTE PTR [rax]
 10540ca:	add    BYTE PTR [rax],al
 10540cc:	sub    BYTE PTR [rdi+0x120004],0x0
 10540d3:	add    BYTE PTR [rax+0x120004af],dl
 10540d9:	add    BYTE PTR [rax],al
 10540db:	add    BYTE PTR [rax+0x120004af],ah
 10540e1:	add    BYTE PTR [rax],al
 10540e3:	add    BYTE PTR [rax+0x120004af],dh
 10540e9:	add    BYTE PTR [rax],al
 10540eb:	add    al,al
 10540ed:	scas   eax,DWORD PTR es:[rdi]
 10540ee:	add    al,0x0
 10540f0:	adc    al,BYTE PTR [rax]
 10540f2:	add    BYTE PTR [rax],al
 10540f4:	shr    BYTE PTR [rdi+0x120004],1
 10540fa:	add    BYTE PTR [rax],al
 10540fc:	loopne 0x10540ad
 10540fe:	add    al,0x0
 1054100:	nop
 1054101:	(bad)  
 1054102:	add    DWORD PTR [rax],eax
 1054104:	(bad)  
 1054105:	(bad)  
 1054106:	(bad)  
 1054107:	(bad)  
 1054108:	jmp    0x1054111
 105410a:	add    DWORD PTR [rax],eax
 105410c:	add    BYTE PTR [rax],al
 105410e:	add    BYTE PTR [rax],al
 1054110:	cli    
 1054111:	(bad)  
 1054112:	add    DWORD PTR [rax],eax
 1054114:	add    DWORD PTR [rax],eax
 1054116:	add    BYTE PTR [rax],al
 1054118:	sbb    eax,0x3000108
 105411d:	add    BYTE PTR [rax],al
 105411f:	add    BYTE PTR [rdx+0x8],dh
 1054122:	add    DWORD PTR [rax],eax
 1054124:	add    BYTE PTR [rax],al
 1054126:	add    BYTE PTR [rax],al
 1054128:	jle    0x1054132
 105412a:	add    DWORD PTR [rax],eax
 105412c:	(bad)  
 105412d:	(bad)  
 105412e:	(bad)  
 105412f:	dec    DWORD PTR [rdi+0x3000108]
 1054135:	add    BYTE PTR [rax],al
 1054137:	add    BYTE PTR [rax],al
 1054139:	or     DWORD PTR [rcx],eax
 105413b:	add    BYTE PTR [rax+rax*1],al
 105413e:	add    BYTE PTR [rax],al
 1054140:	sbb    cl,BYTE PTR [rcx]
 1054142:	add    DWORD PTR [rax],eax
 1054144:	add    eax,DWORD PTR [rax]
 1054146:	add    BYTE PTR [rax],al
 1054148:	imul   ecx,DWORD PTR [rcx],0x1
 105414b:	add    BYTE PTR [rax],al
 105414d:	add    BYTE PTR [rax],al
 105414f:	add    BYTE PTR [rdi+0x9],dh
 1054152:	add    DWORD PTR [rax],eax
 1054154:	(bad)  
 1054155:	(bad)  
 1054156:	(bad)  
 1054157:	dec    DWORD PTR [rax+0x3000109]
 105415d:	add    BYTE PTR [rax],al
 105415f:	add    ch,bh
 1054161:	or     DWORD PTR [rcx],eax
 1054163:	add    BYTE PTR [rip+0x1c000000],al        # 0x1d054169
 1054169:	or     al,BYTE PTR [rcx]
 105416b:	add    BYTE PTR [rbx],al
 105416d:	add    BYTE PTR [rax],al
 105416f:	add    BYTE PTR [rcx+0xa],dl
 1054172:	add    DWORD PTR [rax],eax
 1054174:	(bad)  
 1054175:	add    BYTE PTR [rax],al
 1054177:	add    BYTE PTR [rax+0xa],bh
 105417a:	add    DWORD PTR [rax],eax
 105417c:	add    eax,DWORD PTR [rax]
 105417e:	add    BYTE PTR [rax],al
 1054180:	movabs eax,ds:0xcf0000000700010a
 1054189:	or     al,BYTE PTR [rcx]
 105418b:	add    BYTE PTR [rax],cl
 105418d:	add    BYTE PTR [rax],al
 105418f:	add    dh,dl
 1054191:	or     al,BYTE PTR [rcx]
 1054193:	add    BYTE PTR [rdi],al
 1054195:	add    BYTE PTR [rax],al
 1054197:	add    cl,ch
 1054199:	or     al,BYTE PTR [rcx]
 105419b:	add    BYTE PTR [rcx],cl
 105419d:	add    BYTE PTR [rax],al
 105419f:	add    BYTE PTR [rdi],al
 10541a1:	or     eax,DWORD PTR [rcx]
 10541a3:	add    BYTE PTR [rax],cl
 10541a5:	add    BYTE PTR [rax],al
 10541a7:	add    BYTE PTR [rdi],bl
 10541a9:	or     eax,DWORD PTR [rcx]
 10541ab:	add    BYTE PTR [rdi],al
 10541ad:	add    BYTE PTR [rax],al
 10541af:	add    BYTE PTR [rsi],dh
 10541b1:	or     eax,DWORD PTR [rcx]
 10541b3:	add    BYTE PTR [rbx],al
 10541b5:	add    BYTE PTR [rax],al
 10541b7:	add    al,cl
 10541b9:	or     al,0x1
 10541bb:	add    BYTE PTR [rdx],cl
 10541bd:	add    BYTE PTR [rax],al
 10541bf:	add    BYTE PTR [rbx+0xd],ch
 10541c2:	add    DWORD PTR [rax],eax
 10541c4:	or     eax,DWORD PTR [rax]
 10541c6:	add    BYTE PTR [rax],al
 10541c8:	stos   DWORD PTR es:[rdi],eax
 10541c9:	or     eax,0xa0001
 10541ce:	add    BYTE PTR [rax],al
 10541d0:	mov    bh,0xd
 10541d2:	add    DWORD PTR [rax],eax
 10541d4:	add    eax,DWORD PTR [rax]
 10541d6:	add    BYTE PTR [rax],al
 10541d8:	adc    DWORD PTR [rax],0x1
 10541db:	add    BYTE PTR [rax+rax*1],cl
 10541de:	add    BYTE PTR [rax],al
 10541e0:	mov    bh,0x10
 10541e2:	add    DWORD PTR [rax],eax
 10541e4:	add    eax,DWORD PTR [rax]
 10541e6:	add    BYTE PTR [rax],al
 10541e8:	jo     0x10541fc
 10541ea:	add    DWORD PTR [rax],eax
 10541ec:	or     eax,0x7c000000
 10541f1:	adc    al,BYTE PTR [rcx]
 10541f3:	add    BYTE PTR [rsi],cl
 10541f5:	add    BYTE PTR [rax],al
 10541f7:	add    BYTE PTR [rax+0xf000112],cl
 10541fd:	add    BYTE PTR [rax],al
 10541ff:	add    BYTE PTR [rdx+rdx*1+0x100001],dl
 1054206:	add    BYTE PTR [rax],al
 1054208:	movabs al,ds:0xac00000011000112
 1054211:	adc    al,BYTE PTR [rcx]
 1054213:	add    BYTE PTR [rdx],dl
 1054215:	add    BYTE PTR [rax],al
 1054217:	add    BYTE PTR [rax+0x13],dh
 105421a:	add    DWORD PTR [rax],eax
 105421c:	adc    eax,DWORD PTR [rax]
 105421e:	add    BYTE PTR [rax],al
 1054220:	jg     0x1054235
 1054222:	add    DWORD PTR [rax],eax
 1054224:	adc    al,BYTE PTR [rax]
 1054226:	add    BYTE PTR [rax],al
 1054228:	lahf   
 1054229:	adc    eax,DWORD PTR [rcx]
 105422b:	add    BYTE PTR [rax+rax*1],dl
 105422e:	add    BYTE PTR [rax],al
 1054230:	mov    ch,0x13
 1054232:	add    DWORD PTR [rax],eax
 1054234:	adc    al,BYTE PTR [rax]
 1054236:	add    BYTE PTR [rax],al
 1054238:	ficom  WORD PTR [rbx]
 105423a:	add    DWORD PTR [rax],eax
 105423c:	adc    eax,0xf4000000
 1054241:	adc    eax,DWORD PTR [rcx]
 1054243:	add    BYTE PTR [rdx],dl
 1054245:	add    BYTE PTR [rax],al
 1054247:	add    BYTE PTR [rsp+rdx*1],dl
 105424a:	add    DWORD PTR [rax],eax
 105424c:	(bad)  
 105424d:	add    BYTE PTR [rax],al
 105424f:	add    BYTE PTR [rip+0x17000114],ah        # 0x18054369
 1054255:	add    BYTE PTR [rax],al
 1054257:	add    BYTE PTR [rsp+rdx*1],dh
 105425a:	add    DWORD PTR [rax],eax
 105425c:	(bad)  
 105425d:	add    BYTE PTR [rax],al
 105425f:	add    BYTE PTR [rdi],bh
 1054261:	adc    al,0x1
 1054263:	add    BYTE PTR [rdx],dl
 1054265:	add    BYTE PTR [rax],al
 1054267:	add    BYTE PTR [rsp+rdx*1+0x1],bl
 105426b:	add    BYTE PTR [rax],bl
 105426d:	add    BYTE PTR [rax],al
 105426f:	add    BYTE PTR [rcx+0x14],dh
 1054272:	add    DWORD PTR [rax],eax
 1054274:	adc    al,BYTE PTR [rax]
 1054276:	add    BYTE PTR [rax],al
 1054278:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1054279:	adc    al,0x1
 105427b:	add    BYTE PTR [rcx],bl
 105427d:	add    BYTE PTR [rax],al
 105427f:	add    BYTE PTR [rsp+rdx*1+0x120001],dh
 1054286:	add    BYTE PTR [rax],al
 1054288:	jmp    0x105429e
 105428a:	add    DWORD PTR [rax],eax
 105428c:	sbb    al,BYTE PTR [rax]
 105428e:	add    BYTE PTR [rax],al
 1054290:	cli    
 1054291:	adc    al,0x1
 1054293:	add    BYTE PTR [rdx],dl
 1054295:	add    BYTE PTR [rax],al
 1054297:	add    BYTE PTR [rdx],bl
 1054299:	adc    eax,0x1b0001
 105429e:	add    BYTE PTR [rax],al
 10542a0:	xor    BYTE PTR [rip+0x120001],dl        # 0x11742a7
 10542a6:	add    BYTE PTR [rax],al
 10542a8:	pop    rcx
 10542a9:	adc    eax,0x1c0001
 10542ae:	add    BYTE PTR [rax],al
 10542b0:	outs   dx,DWORD PTR ds:[rsi]
 10542b1:	adc    eax,0x120001
 10542b6:	add    BYTE PTR [rax],al
 10542b8:	(bad)  
 10542b9:	adc    eax,0x1d0001
 10542be:	add    BYTE PTR [rax],al
 10542c0:	movabs al,ds:0xaf0000001e000115
 10542c9:	adc    eax,0x1d0001
 10542ce:	add    BYTE PTR [rax],al
 10542d0:	mov    edx,0x12000115
 10542d5:	add    BYTE PTR [rax],al
 10542d7:	add    bh,dl
 10542d9:	adc    eax,0x1f0001
 10542de:	add    BYTE PTR [rax],al
 10542e0:	in     al,dx
 10542e1:	adc    eax,0x120001
 10542e6:	add    BYTE PTR [rax],al
 10542e8:	and    BYTE PTR [rsi],dl
 10542ea:	add    DWORD PTR [rax],eax
 10542ec:	and    BYTE PTR [rax],al
 10542ee:	add    BYTE PTR [rax],al
 10542f0:	(bad)  
 10542f1:	(bad)  
 10542f2:	add    DWORD PTR [rax],eax
 10542f4:	adc    al,BYTE PTR [rax]
 10542f6:	add    BYTE PTR [rax],al
 10542f8:	data16 (bad) 
 10542fa:	add    DWORD PTR [rax],eax
 10542fc:	and    DWORD PTR [rax],eax
 10542fe:	add    BYTE PTR [rax],al
 1054300:	jne    0x1054318
 1054302:	add    DWORD PTR [rax],eax
 1054304:	adc    al,BYTE PTR [rax]
 1054306:	add    BYTE PTR [rax],al
 1054308:	mov    dl,0x16
 105430a:	add    DWORD PTR [rax],eax
 105430c:	and    al,BYTE PTR [rax]
 105430e:	add    BYTE PTR [rax],al
 1054310:	rcl    DWORD PTR [rsi],0x1
 1054313:	add    BYTE PTR [rdx],dl
 1054315:	add    BYTE PTR [rax],al
 1054317:	add    BYTE PTR [rdx],al
 1054319:	(bad)  
 105431a:	add    DWORD PTR [rax],eax
 105431c:	and    eax,DWORD PTR [rax]
 105431e:	add    BYTE PTR [rax],al
 1054320:	adc    DWORD PTR [rdi],edx
 1054322:	add    DWORD PTR [rax],eax
 1054324:	adc    al,BYTE PTR [rax]
 1054326:	add    BYTE PTR [rax],al
 1054328:	rex.WRX (bad) 
 105432a:	add    DWORD PTR [rax],eax
 105432c:	and    al,0x0
 105432e:	add    BYTE PTR [rax],al
 1054330:	pop    rbp
 1054331:	(bad)  
 1054332:	add    DWORD PTR [rax],eax
 1054334:	adc    al,BYTE PTR [rax]
 1054336:	add    BYTE PTR [rax],al
 1054338:	sahf   
 1054339:	(bad)  
 105433a:	add    DWORD PTR [rax],eax
 105433c:	and    eax,0xad000000
 1054341:	(bad)  
 1054342:	add    DWORD PTR [rax],eax
 1054344:	adc    al,BYTE PTR [rax]
 1054346:	add    BYTE PTR [rax],al
 1054348:	(bad)  
 1054349:	(bad)  
 105434a:	add    DWORD PTR [rax],eax
 105434c:	add    BYTE PTR es:[rax],al
 105434f:	add    cl,bh
 1054351:	(bad)  
 1054352:	add    DWORD PTR [rax],eax
 1054354:	adc    al,BYTE PTR [rax]
 1054356:	add    BYTE PTR [rax],al
 1054358:	cmp    bl,BYTE PTR [rax]
 105435a:	add    DWORD PTR [rax],eax
 105435c:	(bad)  
 105435d:	add    BYTE PTR [rax],al
 105435f:	add    BYTE PTR [rcx+0x18],cl
 1054362:	add    DWORD PTR [rax],eax
 1054364:	adc    al,BYTE PTR [rax]
 1054366:	add    BYTE PTR [rax],al
 1054368:	imul   ebx,DWORD PTR [rax],0x280001
 105436e:	add    BYTE PTR [rax],al
 1054370:	jg     0x105438a
 1054372:	add    DWORD PTR [rax],eax
 1054374:	adc    al,BYTE PTR [rax]
 1054376:	add    BYTE PTR [rax],al
 1054378:	mov    bl,0x18
 105437a:	add    DWORD PTR [rax],eax
 105437c:	sub    DWORD PTR [rax],eax
 105437e:	add    BYTE PTR [rax],al
 1054380:	ret    0x118
 1054383:	add    BYTE PTR [rdx],dl
 1054385:	add    BYTE PTR [rax],al
 1054387:	add    ch,bh
 1054389:	sbb    DWORD PTR [rcx],eax
 105438b:	add    BYTE PTR [rcx],dl
 105438d:	add    BYTE PTR [rax],al
 105438f:	add    BYTE PTR [rcx],cl
 1054391:	sbb    al,BYTE PTR [rcx]
 1054393:	add    BYTE PTR [rax],dl
 1054395:	add    BYTE PTR [rax],al
 1054397:	add    BYTE PTR [rip+0xf00011a],dl        # 0x100544b7
 105439d:	add    BYTE PTR [rax],al
 105439f:	add    BYTE PTR [rcx],ah
 10543a1:	sbb    al,BYTE PTR [rcx]
 10543a3:	add    BYTE PTR [rsi],cl
 10543a5:	add    BYTE PTR [rax],al
 10543a7:	add    BYTE PTR [rip+0xd00011a],ch        # 0xe0544c7
 10543ad:	add    BYTE PTR [rax],al
 10543af:	add    BYTE PTR [rcx],bh
 10543b1:	sbb    al,BYTE PTR [rcx]
 10543b3:	add    BYTE PTR [rbx],al
 10543b5:	add    BYTE PTR [rax],al
 10543b7:	add    BYTE PTR [rbp+0x1a],al
 10543ba:	add    DWORD PTR [rax],eax
 10543bc:	add    BYTE PTR [rax],al
 10543be:	add    BYTE PTR [rax],al
 10543c0:	push   rcx
 10543c1:	sbb    al,BYTE PTR [rcx]
 10543c3:	add    bh,bh
 10543c5:	(bad)  
 10543c6:	(bad)  
 10543c7:	jmp    QWORD PTR [rdx+0x1a]
 10543ca:	add    DWORD PTR [rax],eax
 10543cc:	adc    al,BYTE PTR [rax]
 10543ce:	add    BYTE PTR [rax],al
 10543d0:	(bad)  
 10543d1:	sbb    al,BYTE PTR [rcx]
 10543d3:	add    BYTE PTR [rcx],dl
 10543d5:	add    BYTE PTR [rax],al
 10543d7:	add    BYTE PTR [rbx+0x1000011a],bl
 10543dd:	add    BYTE PTR [rax],al
 10543df:	add    BYTE PTR [rdi+0xf00011a],ah
 10543e5:	add    BYTE PTR [rax],al
 10543e7:	add    BYTE PTR [rbx+0xe00011a],dh
 10543ed:	add    BYTE PTR [rax],al
 10543ef:	add    BYTE PTR [rdi+0xd00011a],bh
 10543f5:	add    BYTE PTR [rax],al
 10543f7:	add    bl,cl
 10543f9:	sbb    al,BYTE PTR [rcx]
 10543fb:	add    BYTE PTR [rbx],al
 10543fd:	add    BYTE PTR [rax],al
 10543ff:	add    bh,dl
 1054401:	sbb    al,BYTE PTR [rcx]
 1054403:	add    BYTE PTR [rax],al
 1054405:	add    BYTE PTR [rax],al
 1054407:	add    bl,ah
 1054409:	sbb    al,BYTE PTR [rcx]
 105440b:	add    bh,bh
 105440d:	(bad)  
 105440e:	(bad)  
 105440f:	push   rsp
 1054411:	sbb    al,BYTE PTR [rcx]
 1054413:	add    BYTE PTR [rdx],dl
 1054415:	add    BYTE PTR [rax],al
 1054417:	add    BYTE PTR [rcx],ah
 1054419:	sbb    eax,DWORD PTR [rcx]
 105441b:	add    BYTE PTR [rcx],dl
 105441d:	add    BYTE PTR [rax],al
 105441f:	add    BYTE PTR [rip+0x1000011b],ch        # 0x11054540
 1054425:	add    BYTE PTR [rax],al
 1054427:	add    BYTE PTR [rcx],bh
 1054429:	sbb    eax,DWORD PTR [rcx]
 105442b:	add    BYTE PTR [rdi],cl
 105442d:	add    BYTE PTR [rax],al
 105442f:	add    BYTE PTR [rbp+0x1b],al
 1054432:	add    DWORD PTR [rax],eax
 1054434:	(bad)  
 1054435:	add    BYTE PTR [rax],al
 1054437:	add    BYTE PTR [rcx+0x1b],dl
 105443a:	add    DWORD PTR [rax],eax
 105443c:	or     eax,0x5d000000
 1054441:	sbb    eax,DWORD PTR [rcx]
 1054443:	add    BYTE PTR [rbx],al
 1054445:	add    BYTE PTR [rax],al
 1054447:	add    BYTE PTR [rcx+0x1b],ch
 105444a:	add    DWORD PTR [rax],eax
 105444c:	add    BYTE PTR [rax],al
 105444e:	add    BYTE PTR [rax],al
 1054450:	jne    0x105446d
 1054452:	add    DWORD PTR [rax],eax
 1054454:	(bad)  
 1054455:	(bad)  
 1054456:	(bad)  
 1054457:	inc    DWORD PTR [rsi+0x1200011b]
 105445d:	add    BYTE PTR [rax],al
 105445f:	add    BYTE PTR [rbx+0x1100011b],dh
 1054465:	add    BYTE PTR [rax],al
 1054467:	add    BYTE PTR [rdi+0x1000011b],bh
 105446d:	add    BYTE PTR [rax],al
 105446f:	add    bl,cl
 1054471:	sbb    eax,DWORD PTR [rcx]
 1054473:	add    BYTE PTR [rdi],cl
 1054475:	add    BYTE PTR [rax],al
 1054477:	add    bh,dl
 1054479:	sbb    eax,DWORD PTR [rcx]
 105447b:	add    BYTE PTR [rsi],cl
 105447d:	add    BYTE PTR [rax],al
 105447f:	add    bl,ah
 1054481:	sbb    eax,DWORD PTR [rcx]
 1054483:	add    BYTE PTR [rip+0xffffffffef000000],cl        # 0xfffffffff0054489
 1054489:	sbb    eax,DWORD PTR [rcx]
 105448b:	add    BYTE PTR [rbx],al
 105448d:	add    BYTE PTR [rax],al
 105448f:	add    bl,bh
 1054491:	sbb    eax,DWORD PTR [rcx]
 1054493:	add    BYTE PTR [rax],al
 1054495:	add    BYTE PTR [rax],al
 1054497:	add    BYTE PTR [rdi],al
 1054499:	sbb    al,0x1
 105449b:	add    bh,bh
 105449d:	(bad)  
 105449e:	(bad)  
 105449f:	call   FWORD PTR [rax]
 10544a1:	sbb    al,0x1
 10544a3:	add    BYTE PTR [rdx],dl
 10544a5:	add    BYTE PTR [rax],al
 10544a7:	add    BYTE PTR [rbp+0x1c],al
 10544aa:	add    DWORD PTR [rax],eax
 10544ac:	adc    DWORD PTR [rax],eax
 10544ae:	add    BYTE PTR [rax],al
 10544b0:	push   rcx
 10544b1:	sbb    al,0x1
 10544b3:	add    BYTE PTR [rax],dl
 10544b5:	add    BYTE PTR [rax],al
 10544b7:	add    BYTE PTR [rbp+0x1c],bl
 10544ba:	add    DWORD PTR [rax],eax
 10544bc:	sldt   WORD PTR [rax]
 10544bf:	add    BYTE PTR [rcx+0x1c],ch
 10544c2:	add    DWORD PTR [rax],eax
 10544c4:	(bad)  
 10544c5:	add    BYTE PTR [rax],al
 10544c7:	add    BYTE PTR [rbp+0x1c],dh
 10544ca:	add    DWORD PTR [rax],eax
 10544cc:	or     eax,0x81000000
 10544d1:	sbb    al,0x1
 10544d3:	add    BYTE PTR [rbx],al
 10544d5:	add    BYTE PTR [rax],al
 10544d7:	add    BYTE PTR [rbp+0x11c],cl
 10544dd:	add    BYTE PTR [rax],al
 10544df:	add    BYTE PTR [rcx-0xfffee4],bl
 10544e5:	(bad)  
 10544e6:	(bad)  
 10544e7:	jmp    FWORD PTR [rdx+0x1200011c]
 10544ed:	add    BYTE PTR [rax],al
 10544ef:	add    bh,dl
 10544f1:	sbb    al,0x1
 10544f3:	add    BYTE PTR [rcx],dl
 10544f5:	add    BYTE PTR [rax],al
 10544f7:	add    bl,ah
 10544f9:	sbb    al,0x1
 10544fb:	add    BYTE PTR [rax],dl
 10544fd:	add    BYTE PTR [rax],al
 10544ff:	add    bh,ch
 1054501:	sbb    al,0x1
 1054503:	add    BYTE PTR [rdi],cl
 1054505:	add    BYTE PTR [rax],al
 1054507:	add    bl,bh
 1054509:	sbb    al,0x1
 105450b:	add    BYTE PTR [rsi],cl
 105450d:	add    BYTE PTR [rax],al
 105450f:	add    BYTE PTR [rdi],al
 1054511:	sbb    eax,0xd0001
 1054516:	add    BYTE PTR [rax],al
 1054518:	adc    ebx,DWORD PTR [rip+0x30001]        # 0x108451f
 105451e:	add    BYTE PTR [rax],al
 1054520:	(bad)  
 1054521:	sbb    eax,0x1
 1054526:	add    BYTE PTR [rax],al
 1054528:	sub    ebx,DWORD PTR [rip+0xffffffffffff0001]        # 0x104452f
 105452e:	(bad)  
 105452f:	(bad)  
 1054530:	cmp    al,0x1d
 1054532:	add    DWORD PTR [rax],eax
 1054534:	adc    al,BYTE PTR [rax]
 1054536:	add    BYTE PTR [rax],al
 1054538:	imul   ebx,DWORD PTR [rip+0x110001],0x1d750000        # 0x1164543
 1054542:	add    DWORD PTR [rax],eax
 1054544:	adc    BYTE PTR [rax],al
 1054546:	add    BYTE PTR [rax],al
 1054548:	sbb    DWORD PTR [rip+0xf0001],0x1d8d0000        # 0x1144553
 1054552:	add    DWORD PTR [rax],eax
 1054554:	(bad)  
 1054555:	add    BYTE PTR [rax],al
 1054557:	add    BYTE PTR [rcx+0xd00011d],bl
 105455d:	add    BYTE PTR [rax],al
 105455f:	add    BYTE PTR [rbp+0x300011d],ah
 1054565:	add    BYTE PTR [rax],al
 1054567:	add    BYTE PTR [rcx+0x11d],dh
 105456d:	add    BYTE PTR [rax],al
 105456f:	add    BYTE PTR [rbp-0xfffee3],bh
 1054575:	(bad)  
 1054576:	(bad)  
 1054577:	dec    esi
 1054579:	sbb    eax,0x120001
 105457e:	add    BYTE PTR [rax],al
 1054580:	loope  0x10545a3
 1054582:	add    DWORD PTR [rax],eax
 1054584:	sub    al,BYTE PTR [rax]
 1054586:	add    BYTE PTR [rax],al
 1054588:	std    
 1054589:	and    DWORD PTR [rcx],eax
 105458b:	add    BYTE PTR [rdx],dl
 105458d:	add    BYTE PTR [rax],al
 105458f:	add    BYTE PTR [rdx],dh
 1054591:	and    eax,0x110001
 1054596:	add    BYTE PTR [rax],al
 1054598:	ds and eax,0x100001
 105459e:	add    BYTE PTR [rax],al
 10545a0:	rex.WX and rax,0xf0001
 10545a6:	add    BYTE PTR [rax],al
 10545a8:	push   rsi
 10545a9:	and    eax,0xe0001
 10545ae:	add    BYTE PTR [rax],al
 10545b0:	(bad)  
 10545b1:	and    eax,0xd0001
 10545b6:	add    BYTE PTR [rax],al
 10545b8:	outs   dx,BYTE PTR ds:[rsi]
 10545b9:	and    eax,0x30001
 10545be:	add    BYTE PTR [rax],al
 10545c0:	jp     0x10545e7
 10545c2:	add    DWORD PTR [rax],eax
 10545c4:	add    BYTE PTR [rax],al
 10545c6:	add    BYTE PTR [rax],al
 10545c8:	xchg   BYTE PTR [rip+0xffffffffffff0001],ah        # 0x10445cf
 10545ce:	(bad)  
 10545cf:	inc    DWORD PTR [rcx]
 10545d1:	(bad)  
 10545d2:	add    al,BYTE PTR [rax]
 10545d4:	(bad)  
 10545d5:	xor    al,BYTE PTR [rdx]
 10545d7:	push   rax
 10545d8:	add    DWORD PTR [rsi],eax
 10545da:	add    al,BYTE PTR [rax]
 10545dc:	(bad)  
 10545dd:	xor    al,BYTE PTR [rdx]
 10545df:	push   rax
 10545e0:	sbb    DWORD PTR [rbx+rcx*1],edi
 10545e3:	add    BYTE PTR [rbx],ch
 10545e5:	xor    al,0x1e
 10545e7:	add    DWORD PTR [rbx],ebx
 10545e9:	add    DWORD PTR [rcx+rax*1],edx
 10545ec:	or     al,0xf0
 10545ee:	or     ah,al
 10545f0:	or     al,dl
 10545f2:	(bad)  
 10545f3:	rol    BYTE PTR [rax+rsi*2],0x3
 10545f7:	(bad)  
 10545f8:	add    dl,BYTE PTR [rax+0x0]
 10545fb:	add    BYTE PTR [rax+0x400003fe],ah
 1054601:	sub    DWORD PTR [rax],eax
 1054603:	add    BYTE PTR [rdx-0xfffff8],dl
 1054609:	(bad)  
 105460a:	(bad)  
 105460b:	inc    DWORD PTR [rax+0x4ab]
 1054611:	add    BYTE PTR [rax],al
 1054613:	add    BYTE PTR [rax+0x10004ab],dl
 1054619:	add    BYTE PTR [rax],al
 105461b:	add    BYTE PTR [rax+0x20004ab],ah
 1054621:	add    BYTE PTR [rax],al
 1054623:	add    BYTE PTR [rax+0x30004ab],dh
 1054629:	add    BYTE PTR [rax],al
 105462b:	add    al,al
 105462d:	stos   DWORD PTR es:[rdi],eax
 105462e:	add    al,0x0
 1054630:	add    eax,DWORD PTR [rax]
 1054632:	add    BYTE PTR [rax],al
 1054634:	shr    BYTE PTR [rbx+0x50004],1
 105463a:	add    BYTE PTR [rax],al
 105463c:	add    BYTE PTR [rsp+rax*1+0x125e000],ch
 1054643:	add    bh,bh
 1054645:	(bad)  
 1054646:	(bad)  
 1054647:	push   QWORD PTR [rsi]
 1054649:	add    DWORD PTR es:[rax],eax
 105464c:	add    BYTE PTR [rax],al
 105464e:	add    BYTE PTR [rax],al
 1054650:	rex.X
 1054651:	add    DWORD PTR es:[rax],eax
 1054654:	add    DWORD PTR [rax],eax
 1054656:	add    BYTE PTR [rax],al
 1054658:	rex.WRX
 1054659:	add    DWORD PTR es:[rax],eax
 105465c:	add    al,BYTE PTR [rax]
 105465e:	add    BYTE PTR [rax],al
 1054660:	pop    rbp
 1054661:	add    DWORD PTR es:[rax],eax
 1054664:	add    eax,DWORD PTR [rax]
 1054666:	add    BYTE PTR [rax],al
 1054668:	shl    DWORD PTR [rsi],0x1
 105466b:	add    BYTE PTR [rdx],al
 105466d:	add    BYTE PTR [rax],al
 105466f:	add    ch,cl
 1054671:	add    DWORD PTR es:[rax],eax
 1054674:	add    DWORD PTR [rax],eax
 1054676:	add    BYTE PTR [rax],al
 1054678:	fldenv [rsi]
 105467a:	add    DWORD PTR [rax],eax
 105467c:	add    BYTE PTR [rax],al
 105467e:	add    BYTE PTR [rax],al
 1054680:	in     eax,0x26
 1054682:	add    DWORD PTR [rax],eax
 1054684:	(bad)  
 1054685:	(bad)  
 1054686:	(bad)  
 1054687:	(bad)  
 1054688:	(bad)  
 1054689:	add    DWORD PTR es:[rax],eax
 105468c:	add    eax,DWORD PTR [rax]
 105468e:	add    BYTE PTR [rax],al
 1054690:	cld    
 1054691:	add    DWORD PTR es:[rax],eax
 1054694:	add    al,0x0
 1054696:	add    BYTE PTR [rax],al
 1054698:	or     esp,DWORD PTR [rdi]
 105469a:	add    DWORD PTR [rax],eax
 105469c:	add    eax,DWORD PTR [rax]
 105469e:	add    BYTE PTR [rax],al
 10546a0:	es (bad) 
 10546a2:	add    DWORD PTR [rax],eax
 10546a4:	add    eax,0x46000000
 10546a9:	(bad)  
 10546aa:	add    DWORD PTR [rax],eax
 10546ac:	(bad)  
 10546ad:	add    BYTE PTR [rax],al
 10546af:	add    BYTE PTR [rdi+riz*1+0x50001],dl
 10546b6:	add    BYTE PTR [rax],al
 10546b8:	lods   eax,DWORD PTR ds:[rsi]
 10546b9:	(bad)  
 10546ba:	add    DWORD PTR [rax],eax
 10546bc:	add    eax,DWORD PTR [rax]
 10546be:	add    BYTE PTR [rax],al
 10546c0:	sub    BYTE PTR [rcx],ch
 10546c2:	add    DWORD PTR [rax],eax
 10546c4:	add    al,BYTE PTR [rax]
 10546c6:	add    BYTE PTR [rax],al
 10546c8:	xor    al,0x29
 10546ca:	add    DWORD PTR [rax],eax
 10546cc:	add    DWORD PTR [rax],eax
 10546ce:	add    BYTE PTR [rax],al
 10546d0:	rex sub DWORD PTR [rcx],eax
 10546d3:	add    BYTE PTR [rax],al
 10546d5:	add    BYTE PTR [rax],al
 10546d7:	add    BYTE PTR [rcx+rbp*1+0x1],cl
 10546db:	add    bh,bh
 10546dd:	(bad)  
 10546de:	(bad)  
 10546df:	call   FWORD PTR [rbx+0x29]
 10546e2:	add    DWORD PTR [rax],eax
 10546e4:	add    al,BYTE PTR [rax]
 10546e6:	add    BYTE PTR [rax],al
 10546e8:	sub    DWORD PTR [ecx],eax
 10546eb:	add    BYTE PTR [rcx],al
 10546ed:	add    BYTE PTR [rax],al
 10546ef:	add    BYTE PTR [rbx+0x29],dh
 10546f2:	add    DWORD PTR [rax],eax
 10546f4:	add    BYTE PTR [rax],al
 10546f6:	add    BYTE PTR [rax],al
 10546f8:	jg     0x1054723
 10546fa:	add    DWORD PTR [rax],eax
 10546fc:	(bad)  
 10546fd:	(bad)  
 10546fe:	(bad)  
 10546ff:	inc    DWORD PTR [rcx]
 1054701:	(bad)  
 1054702:	add    al,BYTE PTR [rax]
 1054704:	(bad)  
 1054705:	xor    al,BYTE PTR [rdx]
 1054707:	push   rax
 1054708:	add    DWORD PTR [rsi],eax
 105470a:	add    al,BYTE PTR [rax]
 105470c:	(bad)  
 105470d:	xor    al,BYTE PTR [rdx]
 105470f:	push   rax
 1054710:	adc    DWORD PTR [rax],ebx
 1054712:	add    al,0x0
 1054714:	sbb    BYTE PTR [rcx+rcx*1],dh
 1054717:	add    BYTE PTR [rdx],cl
 1054719:	push   rdx
 105471a:	(bad)  
 105471b:	jo     0x10546b1
 105471d:	inc    BYTE PTR [rbx]
 105471f:	add    BYTE PTR [rax+0x29],ch
 1054722:	add    BYTE PTR [rax],al
 1054724:	(bad)  
 1054725:	(bad)  
 1054726:	(bad)  
 1054727:	call   QWORD PTR [rax-0x55]
 105472a:	add    al,0x0
 105472c:	add    BYTE PTR [rax],al
 105472e:	add    BYTE PTR [rax],al
 1054730:	(bad)  
 1054731:	stos   DWORD PTR es:[rdi],eax
 1054732:	add    al,0x0
 1054734:	shr    BYTE PTR [rcx],0x1
 1054737:	add    bh,bh
 1054739:	(bad)  
 105473a:	(bad)  
 105473b:	jmp    rdi
 105473d:	sub    DWORD PTR [rcx],eax
 105473f:	add    BYTE PTR [rax],al
 1054741:	add    BYTE PTR [rax],al
 1054743:	add    dl,dh
 1054745:	sub    DWORD PTR [rcx],eax
 1054747:	add    bh,bh
 1054749:	(bad)  
 105474a:	(bad)  
 105474b:	call   QWORD PTR [rcx]
 105474d:	sbb    al,0x8
 105474f:	add    BYTE PTR [rsp+rdx*2],bl
 1054752:	or     al,0x0
 1054754:	(bad)  
 1054755:	xor    al,0xb
 1054757:	add    BYTE PTR [rcx],cl
 1054759:	push   rdx
 105475a:	add    eax,0x27003e0
 105475f:	(bad)  
 1054760:	xchg   esp,eax
 1054761:	inc    BYTE PTR [rbx]
 1054763:	add    BYTE PTR [rax-0xffffd7],dl
 1054769:	(bad)  
 105476a:	(bad)  
 105476b:	inc    DWORD PTR [rax]
 105476d:	mov    al,0x4
 105476f:	add    bh,bh
 1054771:	(bad)  
 1054772:	(bad)  
 1054773:	call   QWORD PTR [rax]
 1054775:	mov    al,0x4
 1054777:	add    BYTE PTR [rcx],al
 1054779:	add    BYTE PTR [rax],al
 105477b:	add    BYTE PTR [rax],ah
 105477d:	mov    al,0x4
 105477f:	add    BYTE PTR [rax],ah
 1054781:	sub    al,BYTE PTR [rcx]
 1054783:	add    bh,bh
 1054785:	(bad)  
 1054786:	(bad)  
 1054787:	push   QWORD PTR [rdx+0x2a]
 105478a:	add    DWORD PTR [rax],eax
 105478c:	add    DWORD PTR [rax],eax
 105478e:	add    BYTE PTR [rax],al
 1054790:	jge    0x10547bc
 1054792:	add    DWORD PTR [rax],eax
 1054794:	(bad)  
 1054795:	(bad)  
 1054796:	(bad)  
 1054797:	call   QWORD PTR [rcx]
 1054799:	sbb    al,0x8
 105479b:	add    BYTE PTR [rsp+rdx*2],bl
 105479e:	lldt   WORD PTR [rdi]
 10547a1:	xor    al,0xc
 10547a3:	add    BYTE PTR [rcx],cl
 10547a5:	jb     0x10547ac
 10547a7:	loopne 0x10547ac
 10547a9:	jo     0x10547ad
 10547ab:	(bad)  
 10547ac:	xchg   esp,eax
 10547ad:	inc    BYTE PTR [rbx]
 10547af:	add    BYTE PTR [rax-0xffffd7],bh
 10547b5:	(bad)  
 10547b6:	(bad)  
 10547b7:	inc    DWORD PTR [rax-0x50]
 10547ba:	add    al,0x0
 10547bc:	add    BYTE PTR [rax],al
 10547be:	add    BYTE PTR [rax],al
 10547c0:	jo     0x1054772
 10547c2:	add    al,0x0
 10547c4:	add    BYTE PTR [rbx],ch
 10547c6:	add    DWORD PTR [rax],eax
 10547c8:	(bad)  
 10547c9:	(bad)  
 10547ca:	(bad)  
 10547cb:	call   rdi
 10547cd:	sub    eax,DWORD PTR [rcx]
 10547cf:	add    BYTE PTR [rax],al
 10547d1:	add    BYTE PTR [rax],al
 10547d3:	add    dh,bh
 10547d5:	sub    eax,DWORD PTR [rcx]
 10547d7:	add    BYTE PTR [rcx],al
 10547d9:	add    BYTE PTR [rax],al
 10547db:	add    BYTE PTR [rbp+0x2c],dl
 10547de:	add    DWORD PTR [rax],eax
 10547e0:	add    BYTE PTR [rax],al
 10547e2:	add    BYTE PTR [rax],al
 10547e4:	jo     0x1054812
 10547e6:	add    DWORD PTR [rax],eax
 10547e8:	(bad)  
 10547e9:	(bad)  
 10547ea:	(bad)  
 10547eb:	inc    DWORD PTR [rcx]
 10547ed:	(bad)  
 10547ee:	add    al,BYTE PTR [rax]
 10547f0:	(bad)  
 10547f1:	xor    al,BYTE PTR [rdx]
 10547f3:	push   rax
 10547f4:	add    DWORD PTR [rsi],eax
 10547f6:	add    al,BYTE PTR [rax]
 10547f8:	(bad)  
 10547f9:	xor    al,BYTE PTR [rdx]
 10547fb:	push   rax
 10547fc:	add    DWORD PTR [rdx],ecx
 10547fe:	add    al,0x0
 1054800:	or     dh,BYTE PTR [rsi+rax*1]
 1054803:	add    BYTE PTR [rdx],cl
 1054805:	xor    al,BYTE PTR [rsi]
 1054807:	jo     0x105481a
 1054809:	or     al,BYTE PTR es:[rax]
 105480c:	es fs or eax,0xc542100
 1054813:	add    BYTE PTR [rsp+rsi*1],bl
 1054816:	or     eax,DWORD PTR [rax]
 1054818:	(bad)  
 1054819:	push   rdx
 105481a:	or     dh,al
 105481c:	or     al,ah
 105481e:	(bad)  
 105481f:	jo     0x10547b5
 1054821:	inc    BYTE PTR [rbx]
 1054823:	add    BYTE PTR [rax-0xffffd0],dh
 1054829:	(bad)  
 105482a:	(bad)  
 105482b:	jmp    QWORD PTR [rax+0x4b0]
 1054831:	add    BYTE PTR [rax],al
 1054833:	add    al,al
 1054835:	mov    al,0x4
 1054837:	add    al,dh
 1054839:	sub    al,0x1
 105483b:	add    bh,bh
 105483d:	(bad)  
 105483e:	(bad)  
 105483f:	jmp    FWORD PTR [rip+0x12d]        # 0x1054972
 1054845:	add    BYTE PTR [rax],al
 1054847:	add    BYTE PTR [rax],bh
 1054849:	sub    eax,0x10001
 105484e:	add    BYTE PTR [rax],al
 1054850:	nop
 1054851:	sub    eax,0xffff0001
 1054856:	(bad)  
 1054857:	call   QWORD PTR [rcx]
 1054859:	adc    eax,DWORD PTR [rdx]
 105485b:	add    BYTE PTR [rdx],cl
 105485d:	push   rdx
 105485e:	(bad)  
 105485f:	xor    BYTE PTR [rsi+rdi*8+0x30d80003],dl
 1054866:	add    BYTE PTR [rax],al
 1054868:	(bad)  
 1054869:	(bad)  
 105486a:	(bad)  
 105486b:	jmp    rax
 105486d:	mov    al,0x4
 105486f:	add    BYTE PTR [rax],al
 1054871:	add    BYTE PTR [rax],al
 1054873:	add    BYTE PTR [rax],al
 1054875:	mov    cl,0x4
 1054877:	add    al,al
 1054879:	sub    eax,0xffff0001
 105487e:	(bad)  
 105487f:	call   rsi
 1054881:	sub    eax,0x1
 1054886:	add    BYTE PTR [rax],al
 1054888:	loope  0x10548b7
 105488a:	add    DWORD PTR [rax],eax
 105488c:	(bad)  
 105488d:	(bad)  
 105488e:	(bad)  
 105488f:	call   QWORD PTR [rcx]
 1054891:	adc    eax,DWORD PTR [rdx]
 1054893:	add    BYTE PTR [rdx],cl
 1054895:	push   rdx
 1054896:	(bad)  
 1054897:	xor    BYTE PTR [rsi+rdi*8+0x31000003],dl
 105489e:	add    BYTE PTR [rax],al
 10548a0:	(bad)  
 10548a1:	(bad)  
 10548a2:	(bad)  
 10548a3:	inc    DWORD PTR [rax+0x4b1]
 10548a9:	add    DWORD PTR cs:[rax],eax
 10548ac:	(bad)  
 10548ad:	(bad)  
 10548ae:	(bad)  
 10548af:	jmp    FWORD PTR [rsi+rbp*1]
 10548b2:	add    DWORD PTR [rax],eax
 10548b4:	add    BYTE PTR [rax],al
 10548b6:	add    BYTE PTR [rax],al
 10548b8:	add    DWORD PTR [rsi],eax
 10548ba:	add    al,BYTE PTR [rax]
 10548bc:	(bad)  
 10548bd:	xor    al,BYTE PTR [rdx]
 10548bf:	push   rax
 10548c0:	sbb    DWORD PTR [rax*1+0x18341a00],ebp
 10548c7:	add    DWORD PTR [rcx],ecx
 10548c9:	add    DWORD PTR [rcx+rax*1],edx
 10548cc:	add    dh,BYTE PTR [rax+0x0]
 10548cf:	add    BYTE PTR [rax+0x280003fe],ah
 10548d5:	xor    DWORD PTR [rax],eax
 10548d7:	add    BYTE PTR [rdx-0xfffff8],dl
 10548dd:	(bad)  
 10548de:	(bad)  
 10548df:	push   QWORD PTR [rax]
 10548e1:	mov    cl,0x4
 10548e3:	add    BYTE PTR [rax],al
 10548e5:	add    BYTE PTR [rax],al
 10548e7:	add    BYTE PTR [rax],ah
 10548e9:	mov    cl,0x4
 10548eb:	add    BYTE PTR [rax+0x2e],dl
 10548ee:	add    DWORD PTR [rax],eax
 10548f0:	(bad)  
 10548f1:	(bad)  
 10548f2:	(bad)  
 10548f3:	(bad)  
 10548f4:	cmp    ch,BYTE PTR [rdi]
 10548f6:	add    DWORD PTR [rax],eax
 10548f8:	add    DWORD PTR [rax],eax
 10548fa:	add    BYTE PTR [rax],al
 10548fc:	data16 (bad) 
 10548fe:	add    DWORD PTR [rax],eax
 1054900:	add    BYTE PTR [rax],al
 1054902:	add    BYTE PTR [rax],al
 1054904:	add    DWORD PTR [rsi],eax
 1054906:	add    al,BYTE PTR [rax]
 1054908:	(bad)  
 1054909:	xor    al,BYTE PTR [rdx]
 105490b:	push   rax
 105490c:	add    DWORD PTR [rcx+rax*1],eax
 105490f:	add    BYTE PTR [rdx+rax*2],al
 1054912:	add    BYTE PTR [rax],al
 1054914:	adc    DWORD PTR [rsp+rax*1],edx
 1054917:	add    BYTE PTR [rsp+rsi*1],dl
 105491a:	or     DWORD PTR [rax],eax
 105491c:	(bad)  
 105491d:	push   rdx
 105491e:	add    dh,BYTE PTR [rax-0x6c]
 1054921:	inc    BYTE PTR [rbx]
 1054923:	add    BYTE PTR [rax+0x31],dl
 1054926:	add    BYTE PTR [rax],al
 1054928:	(bad)  
 1054929:	(bad)  
 105492a:	(bad)  
 105492b:	jmp    QWORD PTR [rax-0x4f]
 105492e:	add    al,0x0
 1054930:	loopne 0x1054961
 1054932:	add    DWORD PTR [rax],eax
 1054934:	(bad)  
 1054935:	(bad)  
 1054936:	(bad)  
 1054937:	jmp    QWORD PTR [rsi]
 1054939:	xor    BYTE PTR [rcx],al
 105493b:	add    BYTE PTR [rax],al
 105493d:	add    BYTE PTR [rax],al
 105493f:	add    BYTE PTR [rdi+0x30],dl
 1054942:	add    DWORD PTR [rax],eax
 1054944:	(bad)  
 1054945:	(bad)  
 1054946:	(bad)  
 1054947:	inc    DWORD PTR [rcx]
 1054949:	or     al,BYTE PTR [rdx]
 105494b:	add    BYTE PTR [rdx],cl
 105494d:	xchg   edx,eax
 105494e:	(bad)  
 105494f:	xor    BYTE PTR [rcx],ah
 1054951:	add    eax,0x74050002
 1054956:	or     eax,0x1309000
 105495b:	add    BYTE PTR [rsi+0x48000130],ch
 1054961:	rex.WB add rax,0x2100
 1054967:	add    BYTE PTR [rax-0x51fffed0],dl
 105496d:	xor    BYTE PTR [rcx],al
 105496f:	add    BYTE PTR [rax+0x49],cl
 1054972:	add    eax,0x31b1900
 1054977:	add    BYTE PTR [rcx],cl
 1054979:	add    DWORD PTR [rax+0x700200],edx
 105497f:	add    BYTE PTR [rax+0x2],cl
 1054982:	add    al,0x0
 1054984:	jo     0x105498a
 1054986:	add    BYTE PTR [rax],al
 1054988:	and    DWORD PTR [rax],ecx
 105498a:	add    al,BYTE PTR [rax]
 105498c:	or     BYTE PTR [rdx+rdx*4],dh
 105498f:	add    BYTE PTR [rax],dh
 1054991:	xor    DWORD PTR [rcx],eax
 1054993:	add    BYTE PTR [rbp+0x74000131],dh
 1054999:	rex.WB add rax,0x2100
 105499f:	add    BYTE PTR [rax],dh
 10549a1:	xor    DWORD PTR [rcx],eax
 10549a3:	add    BYTE PTR [rbp+0x74000131],dh
 10549a9:	rex.WB add rax,0x61d1100
 10549af:	add    BYTE PTR [rip+0x18000f64],bl        # 0x19055919
 10549b5:	xor    al,0xd
 10549b7:	add    BYTE PTR [rdx],cl
 10549b9:	xchg   edx,eax
 10549ba:	(bad)  
 10549bb:	jo     0x1054951
 10549bd:	inc    BYTE PTR [rbx]
 10549bf:	add    al,dl
 10549c1:	xor    DWORD PTR [rax],eax
 10549c3:	add    bh,bh
 10549c5:	(bad)  
 10549c6:	(bad)  
 10549c7:	push   QWORD PTR [rax]
 10549c9:	mov    dl,0x4
 10549cb:	add    al,dl
 10549cd:	xor    al,BYTE PTR [rcx]
 10549cf:	add    bh,bh
 10549d1:	(bad)  
 10549d2:	(bad)  
 10549d3:	push   rdx
 10549d5:	xor    al,BYTE PTR [rcx]
 10549d7:	add    BYTE PTR [rax],al
 10549d9:	add    BYTE PTR [rax],al
 10549db:	add    BYTE PTR [rcx],al
 10549dd:	(bad)  
 10549de:	add    al,BYTE PTR [rax]
 10549e0:	(bad)  
 10549e1:	xor    al,BYTE PTR [rdx]
 10549e3:	push   rax
 10549e4:	sbb    DWORD PTR [rbx+rcx*1],ebp
 10549e7:	add    BYTE PTR [rdx],bl
 10549e9:	fs (bad) 
 10549eb:	add    DWORD PTR [rdx],ebx
 10549ed:	xor    al,0x2d
 10549ef:	add    DWORD PTR [rdx],ebx
 10549f1:	add    DWORD PTR [rsi],esp
 10549f3:	add    DWORD PTR [rbx],edx
 10549f5:	lock adc eax,esp
 10549f8:	(bad)  
 10549fa:	or     eax,0x700bc0
 10549ff:	add    ah,bh
 1054a01:	add    al,BYTE PTR [rax+rax*1]
 1054a04:	add    DWORD PTR [rax],eax
 1054a06:	add    BYTE PTR [rax],al
 1054a08:	pop    rbp
 1054a09:	xor    eax,0x37960001
 1054a0e:	add    DWORD PTR [rax],eax
 1054a10:	xor    BYTE PTR [rdx+0x4],0x0
 1054a17:	add    BYTE PTR [rdx],ah
 1054a19:	or     DWORD PTR [rax],eax
 1054a1b:	add    BYTE PTR [rcx],al
 1054a1d:	(bad)  
 1054a1e:	add    al,BYTE PTR [rax]
 1054a20:	(bad)  
 1054a21:	jb     0x1054a25
 1054a23:	push   rax
 1054a24:	adc    DWORD PTR [rbx],ebx
 1054a26:	or     BYTE PTR [rax],al
 1054a28:	sbb    edx,DWORD PTR [rax+rdx*1+0x0]
 1054a2c:	(bad)  
 1054a2d:	xor    al,0xf
 1054a2f:	add    BYTE PTR [rbx],cl
 1054a31:	xchg   edx,eax
 1054a32:	(bad)  
 1054a33:	loopne 0x1054a3a
 1054a35:	jo     0x1054a3b
 1054a37:	(bad)  
 1054a38:	xchg   esp,eax
 1054a39:	inc    BYTE PTR [rbx]
 1054a3b:	add    al,bh
 1054a3d:	xor    DWORD PTR [rax],eax
 1054a3f:	add    bh,bh
 1054a41:	(bad)  
 1054a42:	(bad)  
 1054a43:	jmp    QWORD PTR [rax-0x4e]
 1054a46:	add    al,0x0
 1054a48:	add    BYTE PTR [rax],bh
 1054a4a:	add    DWORD PTR [rax],eax
 1054a4c:	(bad)  
 1054a4d:	(bad)  
 1054a4e:	(bad)  
 1054a4f:	(bad)  
 1054a50:	cmp    DWORD PTR [rax],edi
 1054a52:	add    DWORD PTR [rax],eax
 1054a54:	add    BYTE PTR [rax],al
 1054a56:	add    BYTE PTR [rax],al
 1054a58:	in     al,0x38
 1054a5a:	add    DWORD PTR [rax],eax
 1054a5c:	(bad)  
 1054a5d:	(bad)  
 1054a5e:	(bad)  
 1054a5f:	inc    DWORD PTR [rcx]
 1054a61:	add    al,0x1
 1054a63:	add    BYTE PTR [rdx+rax*4],al
 1054a66:	add    BYTE PTR [rax],al
 1054a68:	add    DWORD PTR [rcx+rax*1],eax
 1054a6b:	add    BYTE PTR [rdx+riz*2],al
 1054a6e:	add    BYTE PTR [rax],al
 1054a70:	adc    DWORD PTR [rdx+rcx*1],esp
 1054a73:	add    BYTE PTR [rsp+riz*2],ah
 1054a76:	adc    eax,DWORD PTR [rax]
 1054a78:	and    BYTE PTR [rcx+rdx*1+0x0],dl
 1054a7c:	sbb    al,0x34
 1054a7e:	adc    BYTE PTR [rax],al
 1054a80:	adc    BYTE PTR [rdx-0x1ff50ff4],dh
 1054a86:	or     BYTE PTR [rax-0x6c],dh
 1054a89:	inc    BYTE PTR [rbx]
 1054a8b:	add    BYTE PTR [rax],ah
 1054a8d:	xor    al,BYTE PTR [rax]
 1054a8f:	add    bh,bh
 1054a91:	(bad)  
 1054a92:	(bad)  
 1054a93:	push   rax
 1054a95:	mov    cl,0x4
 1054a97:	add    BYTE PTR [rax],al
 1054a99:	add    BYTE PTR [rax],al
 1054a9b:	add    BYTE PTR [rax],al
 1054a9d:	mov    dl,0x4
 1054a9f:	add    BYTE PTR [rcx],al
 1054aa1:	add    BYTE PTR [rax],al
 1054aa3:	add    BYTE PTR [rax],dl
 1054aa5:	mov    dl,0x4
 1054aa7:	add    BYTE PTR [rax-0xfffec7],al
 1054aad:	(bad)  
 1054aae:	(bad)  
 1054aaf:	push   QWORD PTR [rax+0x139]
 1054ab5:	add    BYTE PTR [rax],al
 1054ab7:	add    dl,cl
 1054ab9:	cmp    DWORD PTR [rcx],eax
 1054abb:	add    BYTE PTR [rcx],al
 1054abd:	add    BYTE PTR [rax],al
 1054abf:	add    bh,dl
 1054ac1:	cmp    DWORD PTR [rcx],eax
 1054ac3:	add    BYTE PTR [rdx],al
 1054ac5:	add    BYTE PTR [rax],al
 1054ac7:	add    al,bh
 1054ac9:	cmp    DWORD PTR [rcx],eax
 1054acb:	add    BYTE PTR [rcx],al
 1054acd:	add    BYTE PTR [rax],al
 1054acf:	add    BYTE PTR [rbx],dh
 1054ad1:	cmp    al,BYTE PTR [rcx]
 1054ad3:	add    BYTE PTR [rax],al
 1054ad5:	add    BYTE PTR [rax],al
 1054ad7:	add    BYTE PTR [rdi],bh
 1054ad9:	cmp    al,BYTE PTR [rcx]
 1054adb:	add    bh,bh
 1054add:	(bad)  
 1054ade:	(bad)  
 1054adf:	call   QWORD PTR [rcx]
 1054ae1:	(bad)  
 1054ae2:	or     BYTE PTR [rax],al
 1054ae4:	(bad)  
 1054ae5:	fs or  eax,0xc541900
 1054aeb:	add    BYTE PTR [rsp+rsi*1],dl
 1054aee:	or     eax,DWORD PTR [rax]
 1054af0:	(bad)  
 1054af1:	jb     0x1054af5
 1054af3:	jo     0x1054a89
 1054af5:	inc    BYTE PTR [rbx]
 1054af7:	add    BYTE PTR [rax+0x32],cl
 1054afa:	add    BYTE PTR [rax],al
 1054afc:	(bad)  
 1054afd:	(bad)  
 1054afe:	(bad)  
 1054aff:	push   QWORD PTR [rax+0x4b1]
 1054b05:	add    BYTE PTR [rax],al
 1054b07:	add    al,al
 1054b09:	mov    cl,0x4
 1054b0b:	add    BYTE PTR [rax],al
 1054b0d:	add    BYTE PTR [rax],al
 1054b0f:	add    al,dl
 1054b11:	mov    cl,0x4
 1054b13:	add    BYTE PTR [rax+0x3a],dh
 1054b16:	add    DWORD PTR [rax],eax
 1054b18:	(bad)  
 1054b19:	(bad)  
 1054b1a:	(bad)  
 1054b1b:	jmp    QWORD PTR [rsi+0x13a]
 1054b21:	add    BYTE PTR [rax],al
 1054b23:	add    BYTE PTR [rdi+0x100013a],dh
 1054b29:	add    BYTE PTR [rax],al
 1054b2b:	add    dh,al
 1054b2d:	cmp    al,BYTE PTR [rcx]
 1054b2f:	add    BYTE PTR [rax],al
 1054b31:	add    BYTE PTR [rax],al
 1054b33:	add    BYTE PTR [rax],al
 1054b35:	cmp    eax,DWORD PTR [rcx]
 1054b37:	add    BYTE PTR [rdx],al
 1054b39:	add    BYTE PTR [rax],al
 1054b3b:	add    BYTE PTR [rbx],al
 1054b3d:	cmp    eax,DWORD PTR [rcx]
 1054b3f:	add    BYTE PTR [rax],al
 1054b41:	add    BYTE PTR [rax],al
 1054b43:	add    BYTE PTR [rsi],dl
 1054b45:	cmp    eax,DWORD PTR [rcx]
 1054b47:	add    bh,bh
 1054b49:	(bad)  
 1054b4a:	(bad)  
 1054b4b:	call   FWORD PTR [rcx]
 1054b4d:	(bad)  
 1054b4e:	add    al,0x0
 1054b50:	or     BYTE PTR [rdx+0x60037004],dl
 1054b56:	add    dh,BYTE PTR [rax]
 1054b58:	rex.W add al,BYTE PTR [rax+rax*1]
 1054b5c:	add    BYTE PTR [rax],al
 1054b5f:	add    BYTE PTR [rcx],al
 1054b61:	or     al,BYTE PTR [rax+rax*1]
 1054b64:	or     dh,BYTE PTR [rsi+rcx*1]
 1054b67:	add    BYTE PTR [rdx],cl
 1054b69:	mov    dl,0x6
 1054b6b:	jo     0x1054b6e
 1054b6d:	add    al,0x1
 1054b6f:	add    BYTE PTR [rdx+rax*2],al
 1054b72:	add    BYTE PTR [rax],al
 1054b74:	adc    DWORD PTR [rax],esp
 1054b76:	or     BYTE PTR [rax],al
 1054b78:	and    BYTE PTR [rsi+rcx*1+0x0],dl
 1054b7c:	sbb    esi,DWORD PTR [rcx*1+0x9720d00]
 1054b83:	loopne 0x1054b8c
 1054b85:	jo     0x1054b8d
 1054b87:	(bad)  
 1054b88:	xchg   esp,eax
 1054b89:	inc    BYTE PTR [rbx]
 1054b8b:	add    BYTE PTR [rax],dl
 1054b8d:	xor    al,0x0
 1054b8f:	add    bh,bh
 1054b91:	(bad)  
 1054b92:	(bad)  
 1054b93:	call   QWORD PTR [rax]
 1054b95:	(bad)
 1054b98:	sar    BYTE PTR [rcx+rax*1],0x0
 1054b9c:	(bad)  
 1054b9d:	(bad)  
 1054b9e:	(bad)  
 1054b9f:	(bad)  
 1054ba0:	jmp    0x1054ce1
 1054ba5:	add    BYTE PTR [rax],al
 1054ba7:	add    BYTE PTR [rcx],al
 1054ba9:	(bad)  
 1054baa:	add    al,BYTE PTR [rax]
 1054bac:	(bad)  
 1054bad:	xor    al,BYTE PTR [rdx]
 1054baf:	push   rax
 1054bb0:	adc    DWORD PTR [rdx],esp
 1054bb2:	or     BYTE PTR [rax],al
 1054bb4:	and    ah,BYTE PTR [rbp+rcx*1+0x0]
 1054bb8:	sbb    eax,0x18000c54
 1054bbd:	xor    al,0xb
 1054bbf:	add    BYTE PTR [rdx],cl
 1054bc1:	jb     0x1054bc9
 1054bc3:	jo     0x1054b59
 1054bc5:	inc    BYTE PTR [rbx]
 1054bc7:	add    BYTE PTR [rax],bh
 1054bc9:	xor    al,0x0
 1054bcb:	add    bh,bh
 1054bcd:	(bad)  
 1054bce:	(bad)  
 1054bcf:	inc    DWORD PTR [rax-0x3b]
 1054bd2:	add    al,0x0
 1054bd4:	jo     0x1054c13
 1054bd6:	add    DWORD PTR [rax],eax
 1054bd8:	(bad)  
 1054bd9:	(bad)  
 1054bda:	(bad)  
 1054bdb:	call   FWORD PTR [rbx+0x13d]
 1054be1:	add    BYTE PTR [rax],al
 1054be3:	add    BYTE PTR [rcx],al
 1054be5:	(bad)  
 1054be6:	add    al,BYTE PTR [rax]
 1054be8:	(bad)  
 1054be9:	xor    al,BYTE PTR [rdx]
 1054beb:	push   rax
 1054bec:	sbb    DWORD PTR [rcx],ebp
 1054bee:	or     DWORD PTR [rax],eax
 1054bf0:	(bad)  
 1054bf1:	sbb    al,BYTE PTR fs:[rax]
 1054bf4:	(bad)  
 1054bf5:	xor    al,0x19
 1054bf7:	add    BYTE PTR [rdi],dl
 1054bf9:	add    DWORD PTR [rax+rax*1],edx
 1054bfc:	adc    al,dh
 1054bfe:	(bad)  
 1054bff:	loopne 0x1054c0d
 1054c01:	jo     0x1054c03
 1054c03:	add    ah,bh
 1054c05:	add    al,BYTE PTR [rax+rax*1]
 1054c08:	add    DWORD PTR [rax],eax
 1054c0a:	add    BYTE PTR [rax],al
 1054c0c:	cmp    DWORD PTR [rsi],0x40b30001
 1054c12:	add    DWORD PTR [rax],eax
 1054c14:	rex hlt 
 1054c16:	add    al,0x0
 1054c18:	add    BYTE PTR [rax],al
 1054c1a:	add    BYTE PTR [rax],al
 1054c1c:	(bad)  
 1054c1d:	add    BYTE PTR [rax],al
 1054c1f:	add    BYTE PTR [rcx],al
 1054c21:	(bad)  
 1054c22:	add    al,BYTE PTR [rax]
 1054c24:	(bad)  
 1054c25:	mov    dl,0x2
 1054c27:	push   rax
 1054c28:	add    DWORD PTR [rdi],eax
 1054c2a:	add    DWORD PTR [rax],eax
 1054c2c:	(bad)  
 1054c2d:	(bad)  
 1054c2e:	add    BYTE PTR [rax],al
 1054c30:	and    DWORD PTR [rip+0x34050002],eax        # 0x350a4c38
 1054c36:	or     BYTE PTR [rax],al
 1054c38:	and    BYTE PTR [rcx+0x1],al
 1054c3b:	add    BYTE PTR [rdx+0x41],ch
 1054c3e:	add    DWORD PTR [rax],eax
 1054c40:	sub    BYTE PTR [rbp+rax*1+0x0],cl
 1054c44:	and    DWORD PTR [rax],eax
 1054c46:	add    BYTE PTR [rax],al
 1054c48:	and    BYTE PTR [rcx+0x1],al
 1054c4b:	add    BYTE PTR [rdx+0x41],ch
 1054c4e:	add    DWORD PTR [rax],eax
 1054c50:	sub    BYTE PTR [rbp+rax*1+0x0],cl
 1054c54:	adc    DWORD PTR [rax],ebx
 1054c56:	add    al,0x0
 1054c58:	sbb    BYTE PTR [rcx+rcx*1],dh
 1054c5b:	add    BYTE PTR [rdx],cl
 1054c5d:	push   rdx
 1054c5e:	(bad)  
 1054c5f:	jo     0x1054bf5
 1054c61:	inc    BYTE PTR [rbx]
 1054c63:	add    BYTE PTR [rax+0x34],ah
 1054c66:	add    BYTE PTR [rax],al
 1054c68:	(bad)  
 1054c69:	(bad)  
 1054c6a:	(bad)  
 1054c6b:	inc    eax
 1054c6d:	rol    DWORD PTR [rax+rax*1],0x0
 1054c71:	add    BYTE PTR [rax],al
 1054c73:	add    al,ah
 1054c75:	rol    DWORD PTR [rax+rax*1],0xb0
 1054c79:	add    DWORD PTR [r8],eax
 1054c7c:	(bad)  
 1054c7d:	(bad)  
 1054c7e:	(bad)  
 1054c7f:	dec    ebx
 1054c81:	add    DWORD PTR [r8],eax
 1054c84:	add    BYTE PTR [rax],al
 1054c86:	add    BYTE PTR [rax],al
 1054c88:	adc    DWORD PTR [rdx+0x1],eax
 1054c8b:	add    bh,bh
 1054c8d:	(bad)  
 1054c8e:	(bad)  
 1054c8f:	call   QWORD PTR [rcx]
 1054c91:	sub    al,0xb
 1054c93:	add    BYTE PTR [rsp+rsi*1],ch
 1054c96:	sbb    al,0x0
 1054c98:	sbb    al,0x1
 1054c9a:	adc    al,BYTE PTR [rax]
 1054c9c:	adc    al,dh
 1054c9e:	(bad)  
 1054c9f:	loopne 0x1054cad
 1054ca1:	ror    BYTE PTR [rdx],1
 1054ca3:	ror    BYTE PTR [rax],0x70
 1054ca6:	(bad)  
 1054ca7:	(bad)  
 1054ca8:	(bad)  
 1054ca9:	push   rax
 1054caa:	add    BYTE PTR [rax],al
 1054cac:	xchg   esp,eax
 1054cad:	inc    BYTE PTR [rbx]
 1054caf:	add    BYTE PTR [rax-0xffffcc],cl
 1054cb5:	(bad)  
 1054cb6:	(bad)  
 1054cb7:	jmp    QWORD PTR [rax+0x4cf]
 1054cbd:	add    BYTE PTR [rax],al
 1054cbf:	add    BYTE PTR [rax+0x10004cf],dh
 1054cc5:	add    BYTE PTR [rax],al
 1054cc7:	add    al,al
 1054cc9:	iret   
 1054cca:	add    al,0x0
 1054ccc:	add    al,BYTE PTR [rax]
 1054cce:	add    BYTE PTR [rax],al
 1054cd0:	ror    bh,1
 1054cd2:	add    al,0x0
 1054cd4:	add    al,BYTE PTR [rax]
 1054cd6:	add    BYTE PTR [rax],al
 1054cd8:	loopne 0x1054ca9
 1054cda:	add    al,0x0
 1054cdc:	add    al,BYTE PTR [rax]
 1054cde:	add    BYTE PTR [rax],al
 1054ce0:	lock iret 
 1054ce2:	add    al,0x0
 1054ce4:	add    al,BYTE PTR [rax]
 1054ce6:	add    BYTE PTR [rax],al
 1054ce8:	add    al,dl
 1054cea:	add    al,0x0
 1054cec:	add    al,BYTE PTR [rax]
 1054cee:	add    BYTE PTR [rax],al
 1054cf0:	adc    al,dl
 1054cf2:	add    al,0x0
 1054cf4:	(bad)  
 1054cf5:	add    BYTE PTR [rax],al
 1054cf7:	add    BYTE PTR [rax],ah
 1054cf9:	rol    BYTE PTR [rax+rax*1],1
 1054cfc:	xor    BYTE PTR [rdx+0x1],al
 1054cff:	add    bh,bh
 1054d01:	(bad)  
 1054d02:	(bad)  
 1054d03:	jmp    FWORD PTR [rcx+0x42]
 1054d06:	add    DWORD PTR [rax],eax
 1054d08:	add    BYTE PTR [rax],al
 1054d0a:	add    BYTE PTR [rax],al
 1054d0c:	je     0x1054d50
 1054d0e:	add    DWORD PTR [rax],eax
 1054d10:	add    DWORD PTR [rax],eax
 1054d12:	add    BYTE PTR [rax],al
 1054d14:	popf   
 1054d15:	rex.X add DWORD PTR [rax],eax
 1054d18:	add    al,BYTE PTR [rax]
 1054d1a:	add    BYTE PTR [rax],al
 1054d1c:	xor    eax,DWORD PTR [rcx+rax*1+0x0]
 1054d20:	(bad)  
 1054d21:	add    BYTE PTR [rax],al
 1054d23:	add    BYTE PTR [rcx+0x44],al
 1054d26:	add    DWORD PTR [rax],eax
 1054d28:	add    al,BYTE PTR [rax]
 1054d2a:	add    BYTE PTR [rax],al
 1054d2c:	out    0x44,eax
 1054d2e:	add    DWORD PTR [rax],eax
 1054d30:	add    DWORD PTR [rax],eax
 1054d32:	add    BYTE PTR [rax],al
 1054d34:	xor    DWORD PTR [rbp+0x1],eax
 1054d37:	add    BYTE PTR [rax],al
 1054d39:	add    BYTE PTR [rax],al
 1054d3b:	add    BYTE PTR [rax*2-0xffff],bh
 1054d42:	(bad)  
 1054d43:	call   QWORD PTR [rcx]
 1054d45:	sub    al,0xa
 1054d47:	add    BYTE PTR [rsp+rsi*1],ch
 1054d4a:	sbb    BYTE PTR [rax],al
 1054d4c:	sbb    al,0xd2
 1054d4e:	adc    eax,0x11e013f0
 1054d53:	ror    BYTE PTR [rdi],1
 1054d55:	ror    BYTE PTR [rip+0xb600c70],0x50        # 0xc6559cc
 1054d5c:	xchg   esp,eax
 1054d5d:	inc    BYTE PTR [rbx]
 1054d5f:	add    BYTE PTR [rax-0xffffcc],dh
 1054d65:	(bad)  
 1054d66:	(bad)  
 1054d67:	inc    DWORD PTR [rax]
 1054d69:	rol    DWORD PTR [rax+rax*1],cl
 1054d6c:	add    BYTE PTR [rax],al
 1054d6e:	add    BYTE PTR [rax],al
 1054d70:	adc    bl,dl
 1054d72:	add    al,0x0
 1054d74:	add    DWORD PTR [rax],eax
 1054d76:	add    BYTE PTR [rax],al
 1054d78:	and    bl,dl
 1054d7a:	add    al,0x0
 1054d7c:	add    al,BYTE PTR [rax]
 1054d7e:	add    BYTE PTR [rax],al
 1054d80:	xor    bl,dl
 1054d82:	add    al,0x0
 1054d84:	add    al,BYTE PTR [rax]
 1054d86:	add    BYTE PTR [rax],al
 1054d88:	rol    DWORD PTR [rax+rax*1],cl
 1054d8c:	add    al,0x0
 1054d8e:	add    BYTE PTR [rax],al
 1054d90:	push   rax
 1054d91:	rol    DWORD PTR [rax+rax*1],cl
 1054d94:	add    al,BYTE PTR [rax]
 1054d96:	add    BYTE PTR [rax],al
 1054d98:	(bad)  
 1054d99:	rol    DWORD PTR [rax+rax*1],cl
 1054d9c:	(bad)  
 1054d9d:	add    BYTE PTR [rax],al
 1054d9f:	add    BYTE PTR [rax-0x2d],dh
 1054da2:	add    al,0x0
 1054da4:	(bad)  
 1054da5:	add    BYTE PTR [rax],al
 1054da7:	add    BYTE PTR [rax+0x20004d3],al
 1054dad:	add    BYTE PTR [rax],al
 1054daf:	add    BYTE PTR [rax+0x700004d3],dl
 1054db5:	add    DWORD PTR [r8],r8d
 1054db8:	(bad)  
 1054db9:	(bad)  
 1054dba:	(bad)  
 1054dbb:	jmp    FWORD PTR [rax+0x1000145]
 1054dc1:	add    BYTE PTR [rax],al
 1054dc3:	add    ch,al
 1054dc5:	add    DWORD PTR [r8],r8d
 1054dc8:	add    al,BYTE PTR [rax]
 1054dca:	add    BYTE PTR [rax],al
 1054dcc:	fild   DWORD PTR [rbp+0x1]
 1054dcf:	add    BYTE PTR [rcx],al
 1054dd1:	add    BYTE PTR [rax],al
 1054dd3:	add    dh,ah
 1054dd5:	add    DWORD PTR [r8],r8d
 1054dd8:	add    BYTE PTR [rax],al
 1054dda:	add    BYTE PTR [rax],al
 1054ddc:	lock add DWORD PTR [r8],r8d
 1054de0:	(bad)  
 1054de1:	(bad)  
 1054de2:	(bad)  
 1054de3:	inc    DWORD PTR [rax]
 1054de5:	rex.RX add DWORD PTR [rax],r8d
 1054de8:	add    al,BYTE PTR [rax]
 1054dea:	add    BYTE PTR [rax],al
 1054dec:	rex
 1054ded:	rex.RX add DWORD PTR [rax],r8d
 1054df0:	add    DWORD PTR [rax],eax
 1054df2:	add    BYTE PTR [rax],al
 1054df4:	rex.WXB
 1054df5:	rex.RX add DWORD PTR [rax],r8d
 1054df8:	add    BYTE PTR [rax],al
 1054dfa:	add    BYTE PTR [rax],al
 1054dfc:	push   rbp
 1054dfd:	rex.RX add DWORD PTR [rax],r8d
 1054e00:	(bad)  
 1054e01:	(bad)  
 1054e02:	(bad)  
 1054e03:	call   FWORD PTR [rdx+0x46]
 1054e06:	add    DWORD PTR [rax],eax
 1054e08:	add    al,BYTE PTR [rax]
 1054e0a:	add    BYTE PTR [rax],al
 1054e0c:	add    BYTE PTR [rsi+0x1],0x0
 1054e10:	add    al,0x0
 1054e12:	add    BYTE PTR [rax],al
 1054e14:	mov    es,WORD PTR [rsi+0x1]
 1054e17:	add    BYTE PTR [rdx],al
 1054e19:	add    BYTE PTR [rax],al
 1054e1b:	add    BYTE PTR [rbp+0x1000146],bl
 1054e21:	add    BYTE PTR [rax],al
 1054e23:	add    BYTE PTR [rax+0x146],ch
 1054e29:	add    BYTE PTR [rax],al
 1054e2b:	add    BYTE PTR [rdx-0xfffeba],dh
 1054e31:	(bad)  
 1054e32:	(bad)  
 1054e33:	inc    edx
 1054e35:	rex.RX add DWORD PTR [rax],r8d
 1054e38:	add    al,BYTE PTR [rax]
 1054e3a:	add    BYTE PTR [rax],al
 1054e3c:	fiadd  WORD PTR [rsi+0x1]
 1054e3f:	add    BYTE PTR [rsi],al
 1054e41:	add    BYTE PTR [rax],al
 1054e43:	add    ch,dh
 1054e45:	rex.RX add DWORD PTR [rax],r8d
 1054e48:	(bad)  
 1054e49:	add    BYTE PTR [rax],al
 1054e4b:	add    BYTE PTR [rdi],dh
 1054e4d:	rex.RXB add DWORD PTR [r8],r8d
 1054e50:	or     BYTE PTR [rax],al
 1054e52:	add    BYTE PTR [rax],al
 1054e54:	rex.RB
 1054e55:	rex.RXB add DWORD PTR [r8],r8d
 1054e58:	(bad)  
 1054e59:	add    BYTE PTR [rax],al
 1054e5b:	add    BYTE PTR [rax+0x47],dl
 1054e5e:	add    DWORD PTR [rax],eax
 1054e60:	(bad)  
 1054e61:	add    BYTE PTR [rax],al
 1054e63:	add    BYTE PTR [rax+0x47],ch
 1054e66:	add    DWORD PTR [rax],eax
 1054e68:	add    al,BYTE PTR [rax]
 1054e6a:	add    BYTE PTR [rax],al
 1054e6c:	ret    0x147
 1054e6f:	add    BYTE PTR [rcx],cl
 1054e71:	add    BYTE PTR [rax],al
 1054e73:	add    ch,bh
 1054e75:	rex.RXB add DWORD PTR [r8],r8d
 1054e78:	add    al,BYTE PTR [rax]
 1054e7a:	add    BYTE PTR [rax],al
 1054e7c:	or     BYTE PTR [rax+0x1],cl
 1054e7f:	add    BYTE PTR [rcx],al
 1054e81:	add    BYTE PTR [rax],al
 1054e83:	add    BYTE PTR [rbx],dl
 1054e85:	add    QWORD PTR [rax],rax
 1054e88:	add    BYTE PTR [rax],al
 1054e8a:	add    BYTE PTR [rax],al
 1054e8c:	sbb    eax,0xff000148
 1054e91:	(bad)  
 1054e92:	(bad)  
 1054e93:	call   QWORD PTR [rcx]
 1054e95:	and    al,0xa
 1054e97:	add    BYTE PTR [rsp+rdx*2],ah
 1054e9a:	(bad)  
 1054e9b:	add    BYTE PTR [rdi],bl
 1054e9d:	xor    al,0xd
 1054e9f:	add    BYTE PTR [rcx],dl
 1054ea1:	push   rdx
 1054ea2:	or     eax,0x9e00bf0
 1054ea7:	rol    BYTE PTR [rdi],0x70
 1054eaa:	(bad)  
 1054eab:	(bad)  
 1054eac:	xchg   esp,eax
 1054ead:	inc    BYTE PTR [rbx]
 1054eaf:	add    al,bl
 1054eb1:	xor    al,0x0
 1054eb3:	add    bh,bh
 1054eb5:	(bad)  
 1054eb6:	(bad)  
 1054eb7:	push   QWORD PTR [rax+0x4c0]
 1054ebd:	add    BYTE PTR [rax],al
 1054ebf:	add    al,al
 1054ec1:	rol    BYTE PTR [rax+rax*1],0x1
 1054ec5:	add    BYTE PTR [rax],al
 1054ec7:	add    al,ah
 1054ec9:	rol    BYTE PTR [rax+rax*1],0x2
 1054ecd:	add    BYTE PTR [rax],al
 1054ecf:	add    BYTE PTR [rax],al
 1054ed1:	rol    DWORD PTR [rax+rax*1],0x3
 1054ed5:	add    BYTE PTR [rax],al
 1054ed7:	add    BYTE PTR [rax],ah
 1054ed9:	rol    DWORD PTR [rax+rax*1],0x4
 1054edd:	add    BYTE PTR [rax],al
 1054edf:	add    BYTE PTR [rax-0x3f],al
 1054ee2:	add    al,0x0
 1054ee4:	add    eax,0x60000000
 1054ee9:	rol    DWORD PTR [rax+rax*1],0x6
 1054eed:	add    BYTE PTR [rax],al
 1054eef:	add    BYTE PTR [rax+0x60004c1],al
 1054ef5:	add    BYTE PTR [rax],al
 1054ef7:	add    BYTE PTR [rax+0x500004c1],dl
 1054efd:	add    QWORD PTR [rax],rax
 1054f00:	(bad)  
 1054f01:	(bad)  
 1054f02:	(bad)  
 1054f03:	inc    DWORD PTR [rsi+0x148]
 1054f09:	add    BYTE PTR [rax],al
 1054f0b:	add    BYTE PTR [rcx+rcx*2],al
 1054f0e:	add    DWORD PTR [rax],eax
 1054f10:	add    DWORD PTR [rax],eax
 1054f12:	add    BYTE PTR [rax],al
 1054f14:	cmovns eax,DWORD PTR [rcx]
 1054f17:	add    BYTE PTR [rdx],al
 1054f19:	add    BYTE PTR [rax],al
 1054f1b:	add    BYTE PTR [rdx],bl
 1054f1d:	add    QWORD PTR [r8],rax
 1054f20:	add    eax,DWORD PTR [rax]
 1054f22:	add    BYTE PTR [rax],al
 1054f24:	sub    BYTE PTR [rcx+0x1],cl
 1054f27:	add    BYTE PTR [rax+rax*1],al
 1054f2a:	add    BYTE PTR [rax],al
 1054f2c:	push   rdx
 1054f2d:	add    QWORD PTR [r8],rax
 1054f30:	add    eax,0x91000000
 1054f35:	add    QWORD PTR [r8],rax
 1054f38:	(bad)  
 1054f39:	add    BYTE PTR [rax],al
 1054f3b:	add    BYTE PTR [rip+0x700014b],al        # 0x805508c
 1054f41:	add    BYTE PTR [rax],al
 1054f43:	add    BYTE PTR [rdx],bl
 1054f45:	rex.WXB add QWORD PTR [r8],rax
 1054f48:	(bad)  
 1054f49:	add    BYTE PTR [rax],al
 1054f4b:	add    BYTE PTR [rbp+0x4b],dl
 1054f4e:	add    DWORD PTR [rax],eax
 1054f50:	or     BYTE PTR [rax],al
 1054f52:	add    BYTE PTR [rax],al
 1054f54:	jle    0x1054fa1
 1054f56:	add    DWORD PTR [rax],eax
 1054f58:	(bad)  
 1054f59:	add    BYTE PTR [rax],al
 1054f5b:	add    BYTE PTR [rcx-0xfffeb5],bh
 1054f61:	(bad)  
 1054f62:	(bad)  
 1054f63:	inc    DWORD PTR [rcx]
 1054f65:	(bad)  
 1054f66:	add    al,BYTE PTR [rax]
 1054f68:	(bad)  
 1054f69:	xor    al,BYTE PTR [rdx]
 1054f6b:	push   rax
 1054f6c:	adc    DWORD PTR [rsi],esp
 1054f6e:	or     al,BYTE PTR [rax]
 1054f70:	es fs or eax,0xc542100
 1054f77:	add    BYTE PTR [rsp+rsi*1],bl
 1054f7a:	or     eax,DWORD PTR [rax]
 1054f7c:	(bad)  
 1054f7d:	push   rdx
 1054f7e:	or     dh,al
 1054f80:	or     al,ah
 1054f82:	(bad)  
 1054f83:	jo     0x1054f19
 1054f85:	inc    BYTE PTR [rbx]
 1054f87:	add    BYTE PTR [rax],al
 1054f89:	xor    eax,0xffff0000
 1054f8e:	(bad)  
 1054f8f:	call   QWORD PTR [rax-0x3c]
 1054f92:	add    al,0x0
 1054f94:	add    BYTE PTR [rax],al
 1054f96:	add    BYTE PTR [rax],al
 1054f98:	jo     0x1054f5e
 1054f9a:	add    al,0x0
 1054f9c:	add    DWORD PTR [rax],eax
 1054f9e:	add    BYTE PTR [rax],al
 1054fa0:	nop
 1054fa1:	(bad)  
 1054fa2:	add    al,0x0
 1054fa4:	add    al,BYTE PTR [rax]
 1054fa6:	add    BYTE PTR [rax],al
 1054fa8:	mov    al,0xc4
 1054faa:	add    al,0x0
 1054fac:	add    eax,DWORD PTR [rax]
 1054fae:	add    BYTE PTR [rax],al
 1054fb0:	rol    ah,1
 1054fb2:	add    al,0x0
 1054fb4:	add    al,0x0
 1054fb6:	add    BYTE PTR [rax],al
 1054fb8:	lock (bad) 
 1054fba:	add    al,0x0
 1054fbc:	lock rex.WXB add QWORD PTR [r8],rax
 1054fc0:	(bad)  
 1054fc1:	(bad)  
 1054fc2:	(bad)  
 1054fc3:	dec    DWORD PTR [rcx+0x4c]
 1054fc6:	add    DWORD PTR [rax],eax
 1054fc8:	add    eax,0x3a000000
 1054fcd:	add    QWORD PTR [r8],r8
 1054fd0:	add    al,0x0
 1054fd2:	add    BYTE PTR [rax],al
 1054fd4:	push   rbp
 1054fd5:	add    QWORD PTR [r8],r8
 1054fd8:	add    eax,DWORD PTR [rax]
 1054fda:	add    BYTE PTR [rax],al
 1054fdc:	nop
 1054fdd:	add    QWORD PTR [r8],r8
 1054fe0:	add    al,BYTE PTR [rax]
 1054fe2:	add    BYTE PTR [rax],al
 1054fe4:	sahf   
 1054fe5:	add    QWORD PTR [r8],r8
 1054fe8:	add    DWORD PTR [rax],eax
 1054fea:	add    BYTE PTR [rax],al
 1054fec:	test   eax,0x14d
 1054ff1:	add    BYTE PTR [rax],al
 1054ff3:	add    BYTE PTR [rbp+rcx*2-0xffff],dh
 1054ffa:	(bad)  
 1054ffb:	call   FWORD PTR [rcx]
 1054ffd:	cmp    BYTE PTR [rbx],cl
 1054fff:	add    BYTE PTR [rsi],ah
 1055001:	fs push 0x0
 1055004:	and    dh,BYTE PTR [rcx+rbp*2]
 1055007:	add    BYTE PTR [rbx],dl
 1055009:	add    DWORD PTR [rdx+0x0],esp
 105500c:	or     al,0xf0
 105500e:	or     ah,al
 1055010:	or     al,dl
 1055012:	(bad)  
 1055013:	rol    BYTE PTR [rax+rsi*2],0x0
 1055017:	add    BYTE PTR [rax+0x280003fe],ah
 105501d:	xor    eax,0x3030000
 1055022:	add    BYTE PTR [rax],al
 1055024:	(bad)  
 1055025:	(bad)  
 1055026:	(bad)  
 1055027:	inc    DWORD PTR [rax]
 1055029:	mov    ebp,0x4
 105502e:	add    BYTE PTR [rax],al
 1055030:	adc    BYTE PTR [rbp+0x10004],bh
 1055036:	add    BYTE PTR [rax],al
 1055038:	and    BYTE PTR [rbp+0x10004],bh
 105503e:	add    BYTE PTR [rax],al
 1055040:	xor    BYTE PTR [rbp+0x30004],bh
 1055046:	add    BYTE PTR [rax],al
 1055048:	rex mov ebp,0x30004
 105504e:	add    BYTE PTR [rax],al
 1055050:	push   rax
 1055051:	mov    ebp,0x4
 1055056:	add    BYTE PTR [rax],al
 1055058:	add    BYTE PTR [rax],al
 105505a:	add    BYTE PTR [rax],al
 105505c:	(bad)  
 105505d:	add    BYTE PTR [rax],al
 105505f:	add    BYTE PTR [rax-0x43],ah
 1055062:	add    al,0x0
	...
 105506c:	or     BYTE PTR [rax],al
 105506e:	add    BYTE PTR [rax],al
 1055070:	push   rax
 1055071:	mov    esi,0x90004
 1055076:	add    BYTE PTR [rax],al
 1055078:	(bad)  
 1055079:	mov    esi,0xa0004
 105507e:	add    BYTE PTR [rax],al
 1055080:	jo     0x1055040
 1055082:	add    al,0x0
 1055084:	add    BYTE PTR [rax],al
 1055086:	add    BYTE PTR [rax],al
 1055088:	cmp    BYTE PTR [rsi+0xc0004],0x0
 105508f:	add    BYTE PTR [rax+0x60004be],dl
 1055095:	add    BYTE PTR [rax],al
 1055097:	add    BYTE PTR [rdi],al
 1055099:	add    BYTE PTR [rax],al
 105509b:	add    BYTE PTR [rbx],cl
 105509d:	add    BYTE PTR [rax],al
 105509f:	add    BYTE PTR [rcx],al
 10550a1:	add    BYTE PTR [rax],al
 10550a3:	add    BYTE PTR [rax+0x550],ch
	...
 10550b1:	add    BYTE PTR [rax],al
 10550b3:	add    BYTE PTR [rax-0x43],dh
 10550b6:	add    al,0x0
 10550b8:	push   0xffffffffe0000000
 10550bd:	add    QWORD PTR [r8],r8
 10550c0:	(bad)  
 10550c1:	(bad)  
 10550c2:	(bad)  
 10550c3:	(bad)  
 10550c4:	cmp    al,0x4e
 10550c6:	add    DWORD PTR [rax],eax
 10550c8:	add    BYTE PTR [rax],al
 10550ca:	add    BYTE PTR [rax],al
 10550cc:	test   DWORD PTR [rsi+0x1],0x100
 10550d3:	add    BYTE PTR [rcx],ch
 10550d5:	rex.WRXB add QWORD PTR [r8],r8
 10550d8:	add    al,BYTE PTR [rax]
 10550da:	add    BYTE PTR [rax],al
 10550dc:	cmp    BYTE PTR [rdi+0x1],cl
 10550df:	add    BYTE PTR [rcx],al
 10550e1:	add    BYTE PTR [rax],al
 10550e3:	add    BYTE PTR [rsi+0x300014f],al
 10550e9:	add    BYTE PTR [rax],al
 10550eb:	add    BYTE PTR [rcx+0x400014f],bl
 10550f1:	add    BYTE PTR [rax],al
 10550f3:	add    BYTE PTR [rsi+0x300014f],dh
 10550f9:	add    BYTE PTR [rax],al
 10550fb:	add    al,ch
 10550fd:	rex.WRXB add QWORD PTR [r8],r8
 1055100:	add    eax,0xfa000000
 1055105:	rex.WRXB add QWORD PTR [r8],r8
 1055108:	add    eax,DWORD PTR [rax]
 105510a:	add    BYTE PTR [rax],al
 105510c:	(bad)  
 105510d:	push   rax
 105510e:	add    DWORD PTR [rax],eax
 1055110:	add    DWORD PTR [rax],eax
 1055112:	add    BYTE PTR [rax],al
 1055114:	adc    edx,DWORD PTR [rax+0x1]
 1055117:	add    BYTE PTR [rax],al
 1055119:	add    BYTE PTR [rax],al
 105511b:	add    BYTE PTR [rsi],bl
 105511d:	push   rcx
 105511e:	add    DWORD PTR [rax],eax
 1055120:	(bad)  
 1055121:	add    BYTE PTR [rax],al
 1055123:	add    BYTE PTR [rdi],ch
 1055125:	push   rcx
 1055126:	add    DWORD PTR [rax],eax
 1055128:	(bad)  
 1055129:	add    BYTE PTR [rax],al
 105512b:	add    BYTE PTR [rcx+rdx*2+0x1],al
 105512f:	add    BYTE PTR [rsi],al
 1055131:	add    BYTE PTR [rax],al
 1055133:	add    BYTE PTR [rbx+0x51],dl
 1055136:	add    DWORD PTR [rax],eax
 1055138:	add    BYTE PTR [rax],al
 105513a:	add    BYTE PTR [rax],al
 105513c:	mov    ebp,0xc000154
 1055141:	add    BYTE PTR [rax],al
 1055143:	add    al,dl
 1055145:	push   rsp
 1055146:	add    DWORD PTR [rax],eax
 1055148:	or     eax,0xed000000
 105514d:	push   rsp
 105514e:	add    DWORD PTR [rax],eax
 1055150:	or     al,0x0
 1055152:	add    BYTE PTR [rax],al
 1055154:	pop    rax
 1055155:	push   rbp
 1055156:	add    DWORD PTR [rax],eax
 1055158:	add    BYTE PTR [rax],al
 105515a:	add    BYTE PTR [rax],al
 105515c:	jne    0x10551b4
 105515e:	add    DWORD PTR [rax],eax
 1055160:	(bad)  
 1055161:	(bad)  
 1055162:	(bad)  
 1055163:	push   QWORD PTR [rax-0x43]
 1055166:	add    al,0x0
 1055168:	add    BYTE PTR [rax],al
 105516a:	add    BYTE PTR [rax],al
 105516c:	jg     0x105512b
 105516e:	add    al,0x0
 1055170:	or     BYTE PTR [rax],al
 1055172:	add    BYTE PTR [rax],al
 1055174:	mov    ?,WORD PTR [rbp+0x90004]
 105517a:	add    BYTE PTR [rax],al
 105517c:	lahf   
 105517d:	mov    ebp,0xa0004
 1055182:	add    BYTE PTR [rax],al
 1055184:	mov    dh,0xbd
 1055186:	add    al,0x0
 1055188:	or     eax,DWORD PTR [rax]
 105518a:	add    BYTE PTR [rax],al
 105518c:	(bad)  
 105518d:	mov    ebp,0xa0004
 1055192:	add    BYTE PTR [rax],al
 1055194:	sar    BYTE PTR [rbp+0x90004],cl
 105519a:	add    BYTE PTR [rax],al
 105519c:	sub    bh,BYTE PTR [rsi+0x80004]
 10551a2:	add    BYTE PTR [rax],al
 10551a4:	xor    eax,0x4be
 10551a9:	add    BYTE PTR [rax],al
 10551ab:	add    BYTE PTR [rcx],bl
 10551ad:	or     al,0x4
 10551af:	add    BYTE PTR [rdx+rsi*2],cl
 10551b2:	or     BYTE PTR [rax+0x7],dh
 10551b5:	push   rax
 10551b6:	(bad)  
 10551b7:	xor    BYTE PTR [rsi+rdi*8+0x35280003],dl
 10551be:	add    BYTE PTR [rax],al
 10551c0:	adc    DWORD PTR [rcx],ebx
 10551c2:	(bad)  
 10551c3:	add    BYTE PTR [rcx],bl
 10551c5:	or     al,BYTE PTR fs:[rax]
 10551c8:	adc    al,0x34
 10551ca:	or     DWORD PTR [rax],eax
 10551cc:	(bad)  
 10551cd:	push   rdx
 10551ce:	add    dh,BYTE PTR [rax-0x6c]
 10551d1:	inc    BYTE PTR [rbx]
 10551d3:	add    BYTE PTR [rax+0x35],dl
 10551d6:	add    BYTE PTR [rax],al
 10551d8:	(bad)  
 10551d9:	(bad)  
 10551da:	(bad)  
 10551db:	jmp    QWORD PTR [rax+0x4da]
 10551e1:	push   rdi
 10551e2:	add    DWORD PTR [rax],eax
 10551e4:	(bad)  
 10551e5:	(bad)  
 10551e6:	(bad)  
 10551e7:	jmp    FWORD PTR [rsi]
 10551e9:	push   rdi
 10551ea:	add    DWORD PTR [rax],eax
 10551ec:	add    BYTE PTR [rax],al
 10551ee:	add    BYTE PTR [rax],al
 10551f0:	outs   dx,DWORD PTR ds:[rsi]
 10551f1:	push   rdi
 10551f2:	add    DWORD PTR [rax],eax
 10551f4:	(bad)  
 10551f5:	(bad)  
 10551f6:	(bad)  
 10551f7:	call   QWORD PTR [rcx]
 10551f9:	and    ecx,DWORD PTR [rdx]
 10551fb:	add    BYTE PTR [rbx],ah
 10551fd:	xor    al,0x16
 10551ff:	add    BYTE PTR [rbx],dl
 1055201:	ror    BYTE PTR [rax+rsi*8],cl
 1055204:	or     ah,al
 1055206:	or     al,dl
 1055208:	(bad)  
 1055209:	rol    BYTE PTR [rax+rsi*2],0x3
 105520d:	(bad)  
 105520e:	add    dl,BYTE PTR [rax-0x6c]
 1055211:	inc    BYTE PTR [rbx]
 1055213:	add    BYTE PTR [rax+0x35],bh
 1055216:	add    BYTE PTR [rax],al
 1055218:	(bad)  
 1055219:	(bad)  
 105521a:	(bad)  
 105521b:	jmp    QWORD PTR [rax-0x3a]
 105521e:	add    al,0x0
 1055220:	add    BYTE PTR [rax],al
 1055222:	add    BYTE PTR [rax],al
 1055224:	jo     0x10551ec
 1055226:	add    al,0x0
 1055228:	add    DWORD PTR [rax],eax
 105522a:	add    BYTE PTR [rax],al
 105522c:	add    dh,0x4
 105522f:	add    BYTE PTR [rdx],al
 1055231:	add    BYTE PTR [rax],al
 1055233:	add    BYTE PTR [rax+0x30004c6],dl
 1055239:	add    BYTE PTR [rax],al
 105523b:	add    BYTE PTR [rax+0x10004c6],ah
 1055241:	add    BYTE PTR [rax],al
 1055243:	add    BYTE PTR [rax+0x10004c6],dh
 1055249:	add    BYTE PTR [rax],al
 105524b:	add    al,al
 105524d:	mov    BYTE PTR [rax+rax*1],0xb0
 1055251:	push   rdi
 1055252:	add    DWORD PTR [rax],eax
 1055254:	(bad)  
 1055255:	(bad)  
 1055256:	(bad)  
 1055257:	(bad)  
 1055258:	jmp    0x10552b1
 105525a:	add    DWORD PTR [rax],eax
 105525c:	add    BYTE PTR [rax],al
 105525e:	add    BYTE PTR [rax],al
 1055260:	std    
 1055261:	push   rdi
 1055262:	add    DWORD PTR [rax],eax
 1055264:	add    DWORD PTR [rax],eax
 1055266:	add    BYTE PTR [rax],al
 1055268:	(bad)  
 1055269:	pop    rax
 105526a:	add    DWORD PTR [rax],eax
 105526c:	add    al,BYTE PTR [rax]
 105526e:	add    BYTE PTR [rax],al
 1055270:	(bad)  
 1055271:	pop    rax
 1055272:	add    DWORD PTR [rax],eax
 1055274:	add    eax,DWORD PTR [rax]
 1055276:	add    BYTE PTR [rax],al
 1055278:	mov    ch,0x58
 105527a:	add    DWORD PTR [rax],eax
 105527c:	add    al,0x0
 105527e:	add    BYTE PTR [rax],al
 1055280:	ret    
 1055281:	pop    rax
 1055282:	add    DWORD PTR [rax],eax
 1055284:	add    eax,DWORD PTR [rax]
 1055286:	add    BYTE PTR [rax],al
 1055288:	(bad)  
 1055289:	pop    rax
 105528a:	add    DWORD PTR [rax],eax
 105528c:	add    al,BYTE PTR [rax]
 105528e:	add    BYTE PTR [rax],al
 1055290:	out    dx,eax
 1055291:	pop    rax
 1055292:	add    DWORD PTR [rax],eax
 1055294:	add    DWORD PTR [rax],eax
 1055296:	add    BYTE PTR [rax],al
 1055298:	rex.WXB pop r9
 105529a:	add    DWORD PTR [rax],eax
 105529c:	add    eax,0x86000000
 10552a1:	pop    rcx
 10552a2:	add    DWORD PTR [rax],eax
 10552a4:	add    DWORD PTR [rax],eax
 10552a6:	add    BYTE PTR [rax],al
 10552a8:	(bad)  
 10552a9:	pop    rdx
 10552aa:	add    DWORD PTR [rax],eax
 10552ac:	(bad)  
 10552ad:	add    BYTE PTR [rax],al
 10552af:	add    BYTE PTR [rcx+0x5a],bl
 10552b2:	add    DWORD PTR [rax],eax
 10552b4:	add    DWORD PTR [rax],eax
 10552b6:	add    BYTE PTR [rax],al
 10552b8:	(bad)  
 10552b9:	pop    rdx
 10552ba:	add    DWORD PTR [rax],eax
 10552bc:	add    BYTE PTR [rax],al
 10552be:	add    BYTE PTR [rax],al
 10552c0:	(bad)  
 10552c1:	pop    rdx
 10552c2:	add    DWORD PTR [rax],eax
 10552c4:	(bad)  
 10552c5:	(bad)  
 10552c6:	(bad)  
 10552c7:	inc    DWORD PTR [rcx]
 10552c9:	add    al,0x1
 10552cb:	add    BYTE PTR [rdx+riz*2],al
 10552ce:	add    BYTE PTR [rax],al
 10552d0:	add    DWORD PTR [rcx+rax*1],eax
 10552d3:	add    BYTE PTR [rdx+riz*2],al
 10552d6:	add    BYTE PTR [rax],al
 10552d8:	add    DWORD PTR [rcx+rax*1],eax
 10552db:	add    BYTE PTR [rdx+riz*2],al
 10552de:	add    BYTE PTR [rax],al
 10552e0:	add    DWORD PTR [rcx+rax*1],eax
 10552e3:	add    BYTE PTR [rdx+riz*2],al
 10552e6:	add    BYTE PTR [rax],al
 10552e8:	add    DWORD PTR [rcx+rax*1],eax
 10552eb:	add    BYTE PTR [rdx+riz*2],al
 10552ee:	add    BYTE PTR [rax],al
 10552f0:	add    DWORD PTR [rcx+rax*1],eax
 10552f3:	add    BYTE PTR [rdx+riz*2],al
 10552f6:	add    BYTE PTR [rax],al
 10552f8:	add    DWORD PTR [rcx+rax*1],eax
 10552fb:	add    BYTE PTR [rdx+riz*4],al
 10552fe:	add    BYTE PTR [rax],al
 1055300:	adc    DWORD PTR [rsi],ebx
 1055302:	or     al,BYTE PTR [rax]
 1055304:	(bad)  
 1055305:	xor    al,0xf
 1055307:	add    BYTE PTR [rax],dl
 1055309:	push   rdx
 105530a:	or     al,0xf0
 105530c:	or     ah,al
 105530e:	or     al,dl
 1055310:	(bad)  
 1055311:	rol    BYTE PTR [rax+rsi*2],0x3
 1055315:	(bad)  
 1055316:	add    dl,BYTE PTR [rax-0x6c]
 1055319:	inc    BYTE PTR [rbx]
 105531b:	add    BYTE PTR [rax-0xffffcb],ah
 1055321:	(bad)  
 1055322:	(bad)  
 1055323:	inc    DWORD PTR [rax]
 1055325:	mov    BYTE PTR [rax+rax*1],0x0
 1055329:	add    BYTE PTR [rax],al
 105532b:	add    BYTE PTR [rax],dl
 105532d:	mov    BYTE PTR [rax+rax*1],0x1
 1055331:	add    BYTE PTR [rax],al
 1055333:	add    BYTE PTR [rax],ah
 1055335:	mov    BYTE PTR [rax+rax*1],0xc0
 1055339:	pop    rsp
 105533a:	add    DWORD PTR [rax],eax
 105533c:	(bad)  
 105533d:	(bad)  
 105533e:	(bad)  
 105533f:	push   rbx
 1055341:	pop    rsp
 1055342:	add    DWORD PTR [rax],eax
 1055344:	add    BYTE PTR [rax],al
 1055346:	add    BYTE PTR [rax],al
 1055348:	cmp    al,0x5d
 105534a:	add    DWORD PTR [rax],eax
 105534c:	add    DWORD PTR [rax],eax
 105534e:	add    BYTE PTR [rax],al
 1055350:	fcomp  DWORD PTR [rbp+0x1]
 1055353:	add    BYTE PTR [rdx],al
 1055355:	add    BYTE PTR [rax],al
 1055357:	add    bh,dh
 1055359:	pop    rbp
 105535a:	add    DWORD PTR [rax],eax
 105535c:	add    DWORD PTR [rax],eax
 105535e:	add    BYTE PTR [rax],al
 1055360:	fwait
 1055361:	pop    rsi
 1055362:	add    DWORD PTR [rax],eax
 1055364:	add    BYTE PTR [rax],al
 1055366:	add    BYTE PTR [rax],al
 1055368:	mov    dh,0x5e
 105536a:	add    DWORD PTR [rax],eax
 105536c:	(bad)  
 105536d:	(bad)  
 105536e:	(bad)  
 105536f:	call   QWORD PTR [rcx]
 1055371:	adc    eax,DWORD PTR [rdx]
 1055373:	add    BYTE PTR [rdx],cl
 1055375:	push   rdx
 1055376:	(bad)  
 1055377:	xor    BYTE PTR [rsi+rdi*8+0x35c80003],dl
 105537e:	add    BYTE PTR [rax],al
 1055380:	(bad)  
 1055381:	(bad)  
 1055382:	(bad)  
 1055383:	call   rax
 1055385:	rol    BYTE PTR [rax+rax*1],cl
 1055388:	adc    BYTE PTR [rdi+0x1],bl
 105538b:	add    bh,bh
 105538d:	(bad)  
 105538e:	(bad)  
 105538f:	(bad)  
 1055390:	cmp    al,0x5f
 1055392:	add    DWORD PTR [rax],eax
 1055394:	add    BYTE PTR [rax],al
 1055396:	add    BYTE PTR [rax],al
 1055398:	add    DWORD PTR [rsi],eax
 105539a:	add    al,BYTE PTR [rax]
 105539c:	(bad)  
 105539d:	xor    al,BYTE PTR [rdx]
 105539f:	push   rax
 10553a0:	adc    DWORD PTR [rbx],edx
 10553a2:	add    al,BYTE PTR [rax]
 10553a4:	or     dl,BYTE PTR [rdx+0x6]
 10553a7:	xor    BYTE PTR [rsi+rdi*8+0x35f00003],dl
 10553ae:	add    BYTE PTR [rax],al
 10553b0:	(bad)  
 10553b1:	(bad)  
 10553b2:	(bad)  
 10553b3:	inc    DWORD PTR [rax-0x7ffffb2f]
 10553b9:	pop    rdi
 10553ba:	add    DWORD PTR [rax],eax
 10553bc:	(bad)  
 10553bd:	(bad)  
 10553be:	(bad)  
 10553bf:	jmp    FWORD PTR [rdi+rbx*2+0x1]
 10553c6:	add    BYTE PTR [rax],al
 10553c8:	add    DWORD PTR [rsi],eax
 10553ca:	add    al,BYTE PTR [rax]
 10553cc:	(bad)  
 10553cd:	xor    al,BYTE PTR [rdx]
 10553cf:	push   rax
 10553d0:	adc    DWORD PTR [rbx],edx
 10553d2:	add    al,BYTE PTR [rax]
 10553d4:	or     dl,BYTE PTR [rdx+0x6]
 10553d7:	xor    BYTE PTR [rsi+rdi*8+0x36180003],dl
 10553de:	add    BYTE PTR [rax],al
 10553e0:	(bad)  
 10553e1:	(bad)  
 10553e2:	(bad)  
 10553e3:	inc    eax
 10553e5:	fiadd  DWORD PTR [rax+rax*1]
 10553e8:	and    BYTE PTR [rax+0x1],0x0
 10553ec:	(bad)  
 10553ed:	(bad)  
 10553ee:	(bad)  
 10553ef:	jmp    FWORD PTR [rax+riz*2+0x1]
 10553f6:	add    BYTE PTR [rax],al
 10553f8:	add    DWORD PTR [rsi],eax
 10553fa:	add    al,BYTE PTR [rax]
 10553fc:	(bad)  
 10553fd:	xor    al,BYTE PTR [rdx]
 10553ff:	push   rax
 1055400:	adc    DWORD PTR [rax],ebx
 1055402:	add    al,0x0
 1055404:	sbb    BYTE PTR [rax+rcx*1],dh
 1055407:	add    BYTE PTR [rdx],cl
 1055409:	push   rdx
 105540a:	(bad)  
 105540b:	jo     0x10553a1
 105540d:	inc    BYTE PTR [rbx]
 105540f:	add    BYTE PTR [rax+0x36],al
 1055412:	add    BYTE PTR [rax],al
 1055414:	(bad)  
 1055415:	(bad)  
 1055416:	(bad)  
 1055417:	push   QWORD PTR [rax+0x600004d6]
 105541d:	(bad)  
 105541e:	add    DWORD PTR [rax],eax
 1055420:	(bad)  
 1055421:	(bad)  
 1055422:	(bad)  
 1055423:	push   QWORD PTR [rbx+0x161]
 1055429:	add    BYTE PTR [rax],al
 105542b:	add    BYTE PTR [rcx],al
 105542d:	(bad)  
 105542e:	add    al,BYTE PTR [rax]
 1055430:	(bad)  
 1055431:	xor    al,BYTE PTR [rdx]
 1055433:	push   rax
 1055434:	adc    DWORD PTR [rsp+rax*1],edx
 1055437:	add    BYTE PTR [rsp+rsi*1],dl
 105543a:	or     DWORD PTR [rax],eax
 105543c:	(bad)  
 105543d:	push   rdx
 105543e:	add    dh,BYTE PTR [rax-0x6c]
 1055441:	inc    BYTE PTR [rbx]
 1055443:	add    BYTE PTR [rax+0x36],ch
 1055446:	add    BYTE PTR [rax],al
 1055448:	(bad)  
 1055449:	(bad)  
 105544a:	(bad)  
 105544b:	jmp    rax
 105544d:	fild   DWORD PTR [rax+rax*1]
 1055450:	add    BYTE PTR [rax],al
 1055452:	add    BYTE PTR [rax],al
 1055454:	lock fild DWORD PTR [rax+rax*1]
 1055458:	loopne 0x10554bb
 105545a:	add    DWORD PTR [rax],eax
 105545c:	(bad)  
 105545d:	(bad)  
 105545e:	(bad)  
 105545f:	jmp    QWORD PTR [rbx]
 1055461:	(bad)  
 1055463:	add    BYTE PTR [rax],al
 1055465:	add    BYTE PTR [rax],al
 1055467:	add    BYTE PTR [rsi+0x62],cl
 105546a:	add    DWORD PTR [rax],eax
 105546c:	(bad)  
 105546d:	(bad)  
 105546e:	(bad)  
 105546f:	call   FWORD PTR [rcx]
 1055471:	sbb    eax,DWORD PTR [rbx]
 1055473:	add    BYTE PTR [rcx],cl
 1055475:	add    DWORD PTR [rcx+rax*1],ecx
 1055478:	add    dh,BYTE PTR [rax+0x0]
 105547b:	add    BYTE PTR [rax+0x2],cl
 105547e:	add    al,0x0
 1055480:	push   rax
 1055481:	or     BYTE PTR [rax],al
 1055483:	add    BYTE PTR [rcx],ah
 1055485:	or     BYTE PTR [rdx],al
 1055487:	add    BYTE PTR [rax],cl
 1055489:	xor    al,0x10
 105548b:	add    DWORD PTR [rax+0x62],esi
 105548e:	add    DWORD PTR [rax],eax
 1055490:	or     BYTE PTR [rbx+0x1],ah
 1055493:	add    BYTE PTR [rax+0x54],dh
 1055496:	add    eax,0x2100
 105549b:	add    BYTE PTR [rax+0x62],dh
 105549e:	add    DWORD PTR [rax],eax
 10554a0:	or     BYTE PTR [rbx+0x1],ah
 10554a3:	add    BYTE PTR [rax+0x54],dh
 10554a6:	add    eax,0x41c1900
 10554ab:	add    BYTE PTR [rdx],cl
 10554ad:	add    DWORD PTR [rip+0x2600301],ecx        # 0x36557b4
 10554b3:	xor    BYTE PTR [rax+0x2],cl
 10554b6:	add    al,0x0
 10554b8:	push   rax
 10554b9:	or     BYTE PTR [rax],al
 10554bb:	add    BYTE PTR [rcx],ah
 10554bd:	or     BYTE PTR [rdx],al
 10554bf:	add    BYTE PTR [rax],cl
 10554c1:	je     0x10554cf
 10554c3:	add    DWORD PTR [rax+0x63],esi
 10554c6:	add    DWORD PTR [rax],eax
 10554c8:	mov    cl,0x63
 10554ca:	add    DWORD PTR [rax],eax
 10554cc:	test   al,0x54
 10554ce:	add    eax,0x2082100
 10554d3:	add    BYTE PTR [rax],cl
 10554d5:	push   rsp
 10554d6:	adc    al,BYTE PTR [rcx]
 10554d8:	mov    cl,0x63
 10554da:	add    DWORD PTR [rax],eax
 10554dc:	leave  
 10554dd:	movsxd eax,DWORD PTR [rcx]
 10554df:	add    BYTE PTR [rsp+rdx*2+0x210005],bh
 10554e6:	add    BYTE PTR [rax],al
 10554e8:	mov    cl,0x63
 10554ea:	add    DWORD PTR [rax],eax
 10554ec:	leave  
 10554ed:	movsxd eax,DWORD PTR [rcx]
 10554ef:	add    BYTE PTR [rsp+rdx*2+0x210005],bh
 10554f6:	add    BYTE PTR [rax],al
 10554f8:	jo     0x105555d
 10554fa:	add    DWORD PTR [rax],eax
 10554fc:	mov    cl,0x63
 10554fe:	add    DWORD PTR [rax],eax
 1055500:	test   al,0x54
 1055502:	add    eax,0x61d1900
 1055507:	add    BYTE PTR [rip+0x18000f64],bl        # 0x19056471
 105550d:	xor    al,0xe
 105550f:	add    BYTE PTR [rdx],cl
 1055511:	xchg   edx,eax
 1055512:	(bad)  
 1055513:	jo     0x10554a9
 1055515:	inc    BYTE PTR [rbx]
 1055517:	add    BYTE PTR [rax-0xffffca],dl
 105551d:	(bad)  
 105551e:	(bad)  
 105551f:	push   QWORD PTR [rax+0x4b2]
	...
 1055531:	add    BYTE PTR [rax],al
 1055533:	add    BYTE PTR [rcx],al
 1055535:	add    BYTE PTR [rax],al
 1055537:	add    BYTE PTR [rcx],al
 1055539:	add    BYTE PTR [rax],al
 105553b:	add    BYTE PTR [rdx],al
 105553d:	add    BYTE PTR [rax],al
 105553f:	add    BYTE PTR [rcx],al
 1055541:	add    BYTE PTR [rax],al
 1055543:	add    BYTE PTR [rax+0x55],cl
 1055546:	add    eax,0x0
	...
 1055553:	add    al,al
 1055555:	mov    dl,0x4
 1055557:	add    BYTE PTR [rax+0x0],bl
 105555a:	add    BYTE PTR [rax],al
 105555c:	shl    BYTE PTR [rcx+rax*1+0x0],0xff
 1055561:	(bad)  
 1055562:	(bad)  
 1055563:	inc    DWORD PTR [rax]
 1055565:	add    DWORD PTR gs:[rax],eax
 1055568:	add    BYTE PTR [rax],al
 105556a:	add    BYTE PTR [rax],al
 105556c:	rex.B
 105556d:	add    DWORD PTR gs:[rax],eax
 1055570:	add    DWORD PTR [rax],eax
 1055572:	add    BYTE PTR [rax],al
 1055574:	lock add DWORD PTR gs:[rax],eax
 1055578:	add    BYTE PTR [rax],al
 105557a:	add    BYTE PTR [rax],al
 105557c:	and    al,0x66
 105557e:	add    DWORD PTR [rax],eax
 1055580:	(bad)  
 1055581:	(bad)  
 1055582:	(bad)  
 1055583:	inc    eax
 1055585:	mov    dl,0x4
 1055587:	add    BYTE PTR [rax],al
 1055589:	add    BYTE PTR [rax],al
 105558b:	add    ch,cl
 105558d:	mov    dl,0x4
 105558f:	add    BYTE PTR [rdx],al
 1055591:	add    BYTE PTR [rax],al
 1055593:	add    cl,dl
 1055595:	mov    dl,0x4
 1055597:	add    BYTE PTR [rax],al
 1055599:	add    BYTE PTR [rax],al
 105559b:	add    BYTE PTR [rcx],bl
 105559d:	or     al,BYTE PTR [rdx]
 105559f:	add    BYTE PTR [rdx],cl
 10555a1:	jb     0x10555a9
 10555a3:	push   rax
 10555a4:	xchg   esp,eax
 10555a5:	inc    BYTE PTR [rbx]
 10555a7:	add    BYTE PTR [rax+0x11000036],dl
 10555ad:	(bad)  
 10555ae:	or     BYTE PTR [rax],al
 10555b0:	(bad)  
 10555b1:	push   rsp
 10555b2:	adc    BYTE PTR [rax],al
 10555b4:	(bad)  
 10555b5:	xor    al,0xf
 10555b7:	add    BYTE PTR [rcx],cl
 10555b9:	xchg   edx,eax
 10555ba:	add    eax,0x27003e0
 10555bf:	(bad)  
 10555c0:	xchg   esp,eax
 10555c1:	inc    BYTE PTR [rbx]
 10555c3:	add    BYTE PTR [rax-0xffffca],bh
 10555c9:	(bad)  
 10555ca:	(bad)  
 10555cb:	inc    DWORD PTR [rax-0x3a]
 10555ce:	add    al,0x0
 10555d0:	push   rax
 10555d1:	add    WORD PTR [rax],ax
 10555d4:	(bad)  
 10555d5:	(bad)  
 10555d6:	(bad)  
 10555d7:	jmp    QWORD PTR [rdi+0x166]
 10555dd:	add    BYTE PTR [rax],al
 10555df:	add    ch,ah
 10555e1:	add    WORD PTR [rax],ax
 10555e4:	(bad)  
 10555e5:	(bad)  
 10555e6:	(bad)  
 10555e7:	call   FWORD PTR [rcx]
 10555e9:	xor    eax,0x11c000a
 10555ee:	stc    
 10555ef:	add    BYTE PTR [rip+0x9e00bf0],cl        # 0xae561e5
 10555f5:	rol    BYTE PTR [rdi],1
 10555f7:	rol    BYTE PTR [rip+0x3600470],0x30        # 0x4655a6e
 10555fe:	add    dl,BYTE PTR [rax-0x60]
 1055601:	inc    BYTE PTR [rbx]
 1055603:	add    al,ah
 1055605:	add    BYTE PTR ss:[rax],al
 1055608:	mov    dl,0x7
 105560a:	add    BYTE PTR [rax],al
 105560c:	(bad)  
 105560d:	(bad)  
 105560e:	(bad)  
 105560f:	push   rax
 1055611:	retf   0x4
 1055614:	add    BYTE PTR [rax],al
 1055616:	add    BYTE PTR [rax],al
 1055618:	add    bl,cl
 105561a:	add    al,0x0
 105561c:	add    DWORD PTR [rax],eax
 105561e:	add    BYTE PTR [rax],al
 1055620:	adc    bl,cl
 1055622:	add    al,0x0
 1055624:	add    al,BYTE PTR [rax]
 1055626:	add    BYTE PTR [rax],al
 1055628:	and    bl,cl
 105562a:	add    al,0x0
 105562c:	add    eax,DWORD PTR [rax]
 105562e:	add    BYTE PTR [rax],al
 1055630:	xor    bl,cl
 1055632:	add    al,0x0
 1055634:	add    al,0x0
 1055636:	add    BYTE PTR [rax],al
 1055638:	rex retf 
 105563a:	add    al,0x0
 105563c:	add    eax,0x50000000
 1055641:	retf   
 1055642:	add    al,0x0
 1055644:	add    DWORD PTR [rax],eax
 1055646:	add    BYTE PTR [rax],al
 1055648:	(bad)  
 1055649:	retf   
 105564a:	add    al,0x0
 105564c:	add    DWORD PTR [rax],eax
 105564e:	add    BYTE PTR [rax],al
 1055650:	jo     0x105561d
 1055652:	add    al,0x0
 1055654:	or     BYTE PTR [rax],al
 1055656:	add    BYTE PTR [rax],al
 1055658:	or     bl,0x4
 105565b:	add    BYTE PTR [rax+rax*1],al
 105565e:	add    BYTE PTR [rax],al
 1055660:	movabs al,ds:0xb00000000a0004cb
 1055669:	retf   
 105566a:	add    al,0x0
 105566c:	or     eax,DWORD PTR [rax]
 105566e:	add    BYTE PTR [rax],al
 1055670:	ror    bl,0x4
 1055673:	add    BYTE PTR [rax+rax*1],cl
 1055676:	add    BYTE PTR [rax],al
 1055678:	ror    bl,1
 105567a:	add    al,0x0
 105567c:	or     eax,0xe0000000
 1055681:	retf   
 1055682:	add    al,0x0
 1055684:	or     eax,0xf0000000
 1055689:	retf   
 105568a:	add    al,0x0
 105568c:	or     eax,0x0
 1055691:	int3   
 1055692:	add    al,0x0
 1055694:	or     eax,0x10000000
 1055699:	int3   
 105569a:	add    al,0x0
 105569c:	or     eax,0x20000000
 10556a1:	int3   
 10556a2:	add    al,0x0
 10556a4:	adc    al,BYTE PTR [rax]
 10556a6:	add    BYTE PTR [rax],al
 10556a8:	xor    ah,cl
 10556aa:	add    al,0x0
 10556ac:	adc    eax,DWORD PTR [rax]
 10556ae:	add    BYTE PTR [rax],al
 10556b0:	rex int3 
 10556b2:	add    al,0x0
 10556b4:	adc    eax,DWORD PTR [rax]
 10556b6:	add    BYTE PTR [rax],al
 10556b8:	push   rax
 10556b9:	int3   
 10556ba:	add    al,0x0
 10556bc:	add    DWORD PTR [rax],eax
 10556be:	add    BYTE PTR [rax],al
 10556c0:	(bad)  
 10556c1:	int3   
 10556c2:	add    al,0x0
 10556c4:	add    DWORD PTR [rax],eax
 10556c6:	add    BYTE PTR [rax],al
 10556c8:	jo     0x1055696
 10556ca:	add    al,0x0
 10556cc:	(bad)  
 10556cd:	add    BYTE PTR [rax],al
 10556cf:	add    BYTE PTR [rax+0x100004cc],al
 10556d5:	add    DWORD PTR [eax],eax
 10556d8:	(bad)  
 10556d9:	(bad)  
 10556da:	(bad)  
 10556db:	push   QWORD PTR [rdi+riz*2+0x1]
 10556df:	add    BYTE PTR [rax],al
 10556e1:	add    BYTE PTR [rax],al
 10556e3:	add    BYTE PTR [rsi+0x1000167],al
 10556e9:	add    BYTE PTR [rax],al
 10556eb:	add    ah,bl
 10556ed:	add    DWORD PTR [eax],eax
 10556f0:	add    al,BYTE PTR [rax]
 10556f2:	add    BYTE PTR [rax],al
 10556f4:	add    ebp,DWORD PTR [rax+0x1]
 10556f7:	add    BYTE PTR [rbx],al
 10556f9:	add    BYTE PTR [rax],al
 10556fb:	add    BYTE PTR [rax+rbp*2],ah
 10556fe:	add    DWORD PTR [rax],eax
 1055700:	add    al,0x0
 1055702:	add    BYTE PTR [rax],al
 1055704:	sti    
 1055705:	push   0x50001
 105570a:	add    BYTE PTR [rax],al
 105570c:	(bad)  
 105570d:	imul   eax,DWORD PTR [rcx],0x600
 1055713:	add    BYTE PTR [rcx+0x6a],bl
 1055716:	add    DWORD PTR [rax],eax
 1055718:	add    eax,0x65000000
 105571d:	push   0x1
 105571f:	add    BYTE PTR [rax+rax*1],al
 1055722:	add    BYTE PTR [rax],al
 1055724:	jnp    0x1055790
 1055726:	add    DWORD PTR [rax],eax
 1055728:	(bad)  
 1055729:	add    BYTE PTR [rax],al
 105572b:	add    BYTE PTR [rbx+0x400016a],dl
 1055731:	add    BYTE PTR [rax],al
 1055733:	add    dl,ch
 1055735:	push   0x1
 1055737:	add    BYTE PTR [rbx],al
 1055739:	add    BYTE PTR [rax],al
 105573b:	add    BYTE PTR [rdi],ch
 105573d:	imul   eax,DWORD PTR [rcx],0x0
 1055740:	add    al,BYTE PTR [rax]
 1055742:	add    BYTE PTR [rax],al
 1055744:	outs   dx,DWORD PTR ds:[rsi]
 1055745:	imul   eax,DWORD PTR [rcx],0x0
 1055748:	add    DWORD PTR [rax],eax
 105574a:	add    BYTE PTR [rax],al
 105574c:	movabs al,ds:0xab0000000800016b
 1055755:	imul   eax,DWORD PTR [rcx],0x0
 1055758:	add    DWORD PTR [rax],eax
 105575a:	add    BYTE PTR [rax],al
 105575c:	icebp  
 105575d:	imul   eax,DWORD PTR [rcx],0x0
 1055760:	add    BYTE PTR [rax],al
 1055762:	add    BYTE PTR [rax],al
 1055764:	cld    
 1055765:	imul   eax,DWORD PTR [rcx],0x0
 1055768:	(bad)  
 1055769:	(bad)  
 105576a:	(bad)  
 105576b:	call   FWORD PTR [rax]
 105576d:	ins    BYTE PTR es:[rdi],dx
 105576e:	add    DWORD PTR [rax],eax
 1055770:	add    al,0x0
 1055772:	add    BYTE PTR [rax],al
 1055774:	cli    
 1055775:	ins    BYTE PTR es:[rdi],dx
 1055776:	add    DWORD PTR [rax],eax
 1055778:	or     al,BYTE PTR [rax]
 105577a:	add    BYTE PTR [rax],al
 105577c:	(bad)  
 105577d:	ins    BYTE PTR es:[rdi],dx
 105577e:	add    DWORD PTR [rax],eax
 1055780:	or     eax,DWORD PTR [rax]
 1055782:	add    BYTE PTR [rax],al
 1055784:	add    ch,BYTE PTR [rbp+0x1]
 1055787:	add    BYTE PTR [rax+rax*1],cl
 105578a:	add    BYTE PTR [rax],al
 105578c:	rex.R outs dx,BYTE PTR ds:[rsi]
 105578e:	add    DWORD PTR [rax],eax
 1055790:	or     eax,0x90000000
 1055795:	outs   dx,BYTE PTR ds:[rsi]
 1055796:	add    DWORD PTR [rax],eax
 1055798:	(bad)  
 1055799:	add    BYTE PTR [rax],al
 105579b:	add    BYTE PTR [rdi+0xd00016e],bl
 10557a1:	add    BYTE PTR [rax],al
 10557a3:	add    bh,cl
 10557a5:	outs   dx,BYTE PTR ds:[rsi]
 10557a6:	add    DWORD PTR [rax],eax
 10557a8:	sldt   WORD PTR [rax]
 10557ab:	add    bl,ah
 10557ad:	outs   dx,BYTE PTR ds:[rsi]
 10557ae:	add    DWORD PTR [rax],eax
 10557b0:	or     eax,0x14000000
 10557b5:	outs   dx,DWORD PTR ds:[rsi]
 10557b6:	add    DWORD PTR [rax],eax
 10557b8:	adc    BYTE PTR [rax],al
 10557ba:	add    BYTE PTR [rax],al
 10557bc:	sub    BYTE PTR [rdi+0x1],ch
 10557bf:	add    BYTE PTR [rip+0x7f000000],cl        # 0x800557c5
 10557c5:	outs   dx,DWORD PTR ds:[rsi]
 10557c6:	add    DWORD PTR [rax],eax
 10557c8:	adc    DWORD PTR [rax],eax
 10557ca:	add    BYTE PTR [rax],al
 10557cc:	mov    edi,0xd00016f
 10557d1:	add    BYTE PTR [rax],al
 10557d3:	add    dh,ch
 10557d5:	outs   dx,DWORD PTR ds:[rsi]
 10557d6:	add    DWORD PTR [rax],eax
 10557d8:	adc    al,BYTE PTR [rax]
 10557da:	add    BYTE PTR [rax],al
 10557dc:	(bad)  
 10557dd:	outs   dx,DWORD PTR ds:[rsi]
 10557de:	add    DWORD PTR [rax],eax
 10557e0:	adc    eax,DWORD PTR [rax]
 10557e2:	add    BYTE PTR [rax],al
 10557e4:	mov    DWORD PTR [rax+0x1],esi
 10557e7:	add    BYTE PTR [rax+rax*1],dl
 10557ea:	add    BYTE PTR [rax],al
 10557ec:	int    0x70
 10557ee:	add    DWORD PTR [rax],eax
 10557f0:	adc    eax,DWORD PTR [rax]
 10557f2:	add    BYTE PTR [rax],al
 10557f4:	or     al,0x72
 10557f6:	add    DWORD PTR [rax],eax
 10557f8:	adc    eax,0x4c000000
 10557fd:	jb     0x1055800
 10557ff:	add    BYTE PTR [rbx],dl
 1055801:	add    BYTE PTR [rax],al
 1055803:	add    BYTE PTR [rdi+0x72],ah
 1055806:	add    DWORD PTR [rax],eax
 1055808:	adc    al,BYTE PTR [rax]
 105580a:	add    BYTE PTR [rax],al
 105580c:	jae    0x1055880
 105580e:	add    DWORD PTR [rax],eax
 1055810:	or     eax,0x7e000000
 1055815:	jb     0x1055818
 1055817:	add    BYTE PTR [rax+rax*1],cl
 105581a:	add    BYTE PTR [rax],al
 105581c:	movabs ds:0xbc0000000b000172,eax
 1055825:	jb     0x1055828
 1055827:	add    BYTE PTR [rdx],cl
 1055829:	add    BYTE PTR [rax],al
 105582b:	add    bh,cl
 105582d:	jb     0x1055830
 105582f:	add    BYTE PTR [rax+rax*1],al
 1055832:	add    BYTE PTR [rax],al
 1055834:	(bad)  
 1055835:	jae    0x1055838
 1055837:	add    BYTE PTR [rbx],dl
 1055839:	add    BYTE PTR [rax],al
 105583b:	add    BYTE PTR [rdx],ah
 105583d:	jae    0x1055840
 105583f:	add    BYTE PTR [rax+rax*1],al
 1055842:	add    BYTE PTR [rax],al
 1055844:	sub    BYTE PTR [rbx+0x1],dh
 1055847:	add    BYTE PTR [rbx],al
 1055849:	add    BYTE PTR [rax],al
 105584b:	add    BYTE PTR [rdx+0x73],dh
 105584e:	add    DWORD PTR [rax],eax
 1055850:	add    al,BYTE PTR [rax]
 1055852:	add    BYTE PTR [rax],al
 1055854:	scas   eax,DWORD PTR es:[rdi]
 1055855:	jae    0x1055858
 1055857:	add    BYTE PTR [rcx],al
 1055859:	add    BYTE PTR [rax],al
 105585b:	add    al,ah
 105585d:	jae    0x1055860
 105585f:	add    BYTE PTR [rdi],dl
 1055861:	add    BYTE PTR [rax],al
 1055863:	add    bl,ch
 1055865:	jae    0x1055868
 1055867:	add    BYTE PTR [rcx],al
 1055869:	add    BYTE PTR [rax],al
 105586b:	add    BYTE PTR [rax],dh
 105586d:	je     0x1055870
 105586f:	add    BYTE PTR [rax],al
 1055871:	add    BYTE PTR [rax],al
 1055873:	add    BYTE PTR [rbx],bh
 1055875:	je     0x1055878
 1055877:	add    bh,bh
 1055879:	(bad)  
 105587a:	(bad)  
 105587b:	inc    DWORD PTR [rcx]
 105587d:	xor    al,0x4
 105587f:	add    BYTE PTR [rsp+rsi*1],dh
 1055882:	(bad)  
 1055883:	add    BYTE PTR [rsi],al
 1055885:	xor    al,BYTE PTR [rdx]
 1055887:	jo     0x10558a2
 1055889:	xor    eax,0x11c000a
 105588e:	mov    bl,0x0
 1055890:	or     eax,0x9e00bf0
 1055895:	rol    BYTE PTR [rdi],1
 1055897:	rol    BYTE PTR [rip+0x3600470],0x30        # 0x4655d0e
 105589e:	add    dl,BYTE PTR [rax-0x60]
 10558a1:	inc    BYTE PTR [rbx]
 10558a3:	add    BYTE PTR [rax],cl
 10558a5:	(bad)  
 10558a6:	add    BYTE PTR [rax],al
 10558a8:	(bad)  
 10558a9:	add    eax,0xffff0000
 10558ae:	(bad)  
 10558af:	inc    DWORD PTR [rax+0x4c9]
 10558b5:	add    BYTE PTR [rax],al
 10558b7:	add    BYTE PTR [rax+0x10004c9],dl
 10558bd:	add    BYTE PTR [rax],al
 10558bf:	add    BYTE PTR [rax+0x20004c9],ah
 10558c5:	add    BYTE PTR [rax],al
 10558c7:	add    BYTE PTR [rax+0x30004c9],dh
 10558cd:	add    BYTE PTR [rax],al
 10558cf:	add    al,al
 10558d1:	leave  
 10558d2:	add    al,0x0
 10558d4:	add    al,BYTE PTR [rax]
 10558d6:	add    BYTE PTR [rax],al
 10558d8:	ror    cl,1
 10558da:	add    al,0x0
 10558dc:	add    eax,0xe0000000
 10558e1:	leave  
 10558e2:	add    al,0x0
 10558e4:	add    eax,0xf0000000
 10558e9:	leave  
 10558ea:	add    al,0x0
 10558ec:	add    al,BYTE PTR [rax]
 10558ee:	add    BYTE PTR [rax],al
 10558f0:	add    dl,cl
 10558f2:	add    al,0x0
 10558f4:	add    al,BYTE PTR [rax]
 10558f6:	add    BYTE PTR [rax],al
 10558f8:	adc    dl,cl
 10558fa:	add    al,0x0
 10558fc:	or     DWORD PTR [rax],eax
 10558fe:	add    BYTE PTR [rax],al
 1055900:	and    dl,cl
 1055902:	add    al,0x0
 1055904:	or     al,BYTE PTR [rax]
 1055906:	add    BYTE PTR [rax],al
 1055908:	xor    dl,cl
 105590a:	add    al,0x0
 105590c:	or     al,BYTE PTR [rax]
 105590e:	add    BYTE PTR [rax],al
 1055910:	rex retf 0x4
 1055914:	lock je 0x1055918
 1055917:	add    bh,bh
 1055919:	(bad)  
 105591a:	(bad)  
 105591b:	dec    eax
 105591d:	jne    0x1055920
 105591f:	add    BYTE PTR [rax],al
 1055921:	add    BYTE PTR [rax],al
 1055923:	add    bh,ch
 1055925:	jne    0x1055928
 1055927:	add    BYTE PTR [rcx],al
 1055929:	add    BYTE PTR [rax],al
 105592b:	add    BYTE PTR [rdi],cl
 105592d:	jbe    0x1055930
 105592f:	add    BYTE PTR [rdx],al
 1055931:	add    BYTE PTR [rax],al
 1055933:	add    ah,ch
 1055935:	jbe    0x1055938
 1055937:	add    BYTE PTR [rbx],al
 1055939:	add    BYTE PTR [rax],al
 105593b:	add    al,bh
 105593d:	jbe    0x1055940
 105593f:	add    BYTE PTR [rax+rax*1],al
 1055942:	add    BYTE PTR [rax],al
 1055944:	rex.WB js 0x1055948
 1055947:	add    BYTE PTR [rbx],al
 1055949:	add    BYTE PTR [rax],al
 105594b:	add    BYTE PTR [rbp+0x78],dl
 105594e:	add    DWORD PTR [rax],eax
 1055950:	add    al,BYTE PTR [rax]
 1055952:	add    BYTE PTR [rax],al
 1055954:	push   0x78
 1055956:	add    DWORD PTR [rax],eax
 1055958:	add    al,0x0
 105595a:	add    BYTE PTR [rax],al
 105595c:	jo     0x10559d6
 105595e:	add    DWORD PTR [rax],eax
 1055960:	add    al,BYTE PTR [rax]
 1055962:	add    BYTE PTR [rax],al
 1055964:	jbe    0x10559de
 1055966:	add    DWORD PTR [rax],eax
 1055968:	add    al,0x0
 105596a:	add    BYTE PTR [rax],al
 105596c:	mov    BYTE PTR [rax+0x1],bh
 105596f:	add    BYTE PTR [rdx],al
 1055971:	add    BYTE PTR [rax],al
 1055973:	add    BYTE PTR [rdx+0x7b],bl
 1055976:	add    DWORD PTR [rax],eax
 1055978:	add    eax,0x78000000
 105597d:	jnp    0x1055980
 105597f:	add    BYTE PTR [rsi],al
 1055981:	add    BYTE PTR [rax],al
 1055983:	add    dh,ch
 1055985:	jnp    0x1055988
 1055987:	add    BYTE PTR [rip+0x79000000],al        # 0x7a05598d
 105598d:	jl     0x1055990
 105598f:	add    BYTE PTR [rdi],al
 1055991:	add    BYTE PTR [rax],al
 1055993:	add    BYTE PTR [rbx],ah
 1055995:	jge    0x1055998
 1055997:	add    BYTE PTR [rip+0x3e000000],al        # 0x3f05599d
 105599d:	jge    0x10559a0
 105599f:	add    BYTE PTR [rdx],al
 10559a1:	add    BYTE PTR [rax],al
 10559a3:	add    BYTE PTR [rdi+0x7f],dh
 10559a6:	add    DWORD PTR [rax],eax
 10559a8:	add    DWORD PTR [rax],eax
 10559aa:	add    BYTE PTR [rax],al
 10559ac:	mov    edi,0x17f
 10559b1:	add    BYTE PTR [rax],al
 10559b3:	add    bh,bh
 10559b5:	jg     0x10559b8
 10559b7:	add    bh,bh
 10559b9:	(bad)  
 10559ba:	(bad)  
 10559bb:	inc    DWORD PTR [rax+rax*4]
 10559be:	add    DWORD PTR [rax],eax
 10559c0:	add    al,BYTE PTR [rax]
 10559c2:	add    BYTE PTR [rax],al
 10559c4:	push   rdi
 10559c5:	add    BYTE PTR [rcx],0x0
 10559c8:	add    DWORD PTR [rax],eax
 10559ca:	add    BYTE PTR [rax],al
 10559cc:	lahf   
 10559cd:	add    BYTE PTR [rcx],0x0
 10559d0:	add    BYTE PTR [rax],al
 10559d2:	add    BYTE PTR [rax],al
 10559d4:	fild   WORD PTR [rax-0xffff]
 10559da:	(bad)  
 10559db:	jmp    rsp
 10559dd:	add    BYTE PTR [rcx],0x0
 10559e0:	add    al,BYTE PTR [rax]
 10559e2:	add    BYTE PTR [rax],al
 10559e4:	jmp    0x1055968
 10559e6:	add    DWORD PTR [rax],eax
 10559e8:	or     BYTE PTR [rax],al
 10559ea:	add    BYTE PTR [rax],al
 10559ec:	sub    BYTE PTR [rbx+0x20001],al
 10559f2:	add    BYTE PTR [rax],al
 10559f4:	rex.RXB add DWORD PTR [r9],0x0
 10559f8:	or     DWORD PTR [rax],eax
 10559fa:	add    BYTE PTR [rax],al
 10559fc:	push   rsi
 10559fd:	add    DWORD PTR [rcx],0x0
 1055a00:	or     al,BYTE PTR [rax]
 1055a02:	add    BYTE PTR [rax],al
 1055a04:	in     eax,0x83
 1055a06:	add    DWORD PTR [rax],eax
 1055a08:	or     eax,DWORD PTR [rax]
 1055a0a:	add    BYTE PTR [rax],al
 1055a0c:	and    al,BYTE PTR [rcx+rax*1+0xa00]
 1055a13:	add    BYTE PTR [rbp+rax*4+0x1],al
 1055a17:	add    BYTE PTR [rax+rax*1],cl
 1055a1a:	add    BYTE PTR [rax],al
 1055a1c:	jge    0x10559a3
 1055a1e:	add    DWORD PTR [rax],eax
 1055a20:	or     al,BYTE PTR [rax]
 1055a22:	add    BYTE PTR [rax],al
 1055a24:	mov    eax,DWORD PTR [rbp+0x90001]
 1055a2a:	add    BYTE PTR [rax],al
 1055a2c:	xchg   edi,eax
 1055a2d:	test   DWORD PTR [rcx],eax
 1055a2f:	add    BYTE PTR [rdx],al
 1055a31:	add    BYTE PTR [rax],al
 1055a33:	add    cl,ch
 1055a35:	test   DWORD PTR [rcx],eax
 1055a37:	add    BYTE PTR [rdx],cl
 1055a39:	add    BYTE PTR [rax],al
 1055a3b:	add    ch,dh
 1055a3d:	test   DWORD PTR [rcx],eax
 1055a3f:	add    BYTE PTR [rdx],al
 1055a41:	add    BYTE PTR [rax],al
 1055a43:	add    BYTE PTR [rbp-0x7a],cl
 1055a46:	add    DWORD PTR [rax],eax
 1055a48:	add    DWORD PTR [rax],eax
 1055a4a:	add    BYTE PTR [rax],al
 1055a4c:	nop
 1055a4d:	xchg   BYTE PTR [rcx],al
 1055a4f:	add    BYTE PTR [rax],al
 1055a51:	add    BYTE PTR [rax],al
 1055a53:	add    bh,cl
 1055a55:	xchg   BYTE PTR [rcx],al
 1055a57:	add    bh,bh
 1055a59:	(bad)  
 1055a5a:	(bad)  
 1055a5b:	call   QWORD PTR [rcx]
 1055a5d:	sbb    al,0x9
 1055a5f:	add    BYTE PTR [rdx+riz*8],dl
 1055a62:	or     eax,0x9e00bf0
 1055a67:	rol    BYTE PTR [rdi],1
 1055a69:	rol    BYTE PTR [rip+0x3600470],0x30        # 0x4655ee0
 1055a70:	add    dl,BYTE PTR [rax+0x0]
 1055a73:	add    BYTE PTR [rsi+rdi*8+0x37300003],dl
 1055a7a:	add    BYTE PTR [rax],al
 1055a7c:	(bad)  
 1055a7d:	(bad)  
 1055a7e:	(bad)  
 1055a7f:	jmp    QWORD PTR [rax-0x36]
 1055a82:	add    al,0x0
 1055a84:	add    BYTE PTR [rax],al
 1055a86:	add    BYTE PTR [rax],al
 1055a88:	jo     0x1055a54
 1055a8a:	add    al,0x0
 1055a8c:	add    DWORD PTR [rax],eax
 1055a8e:	add    BYTE PTR [rax],al
 1055a90:	or     dl,0x4
 1055a93:	add    BYTE PTR [rdx],al
 1055a95:	add    BYTE PTR [rax],al
 1055a97:	add    BYTE PTR [rax+0x30004ca],dl
 1055a9d:	add    BYTE PTR [rax],al
 1055a9f:	add    BYTE PTR [rax+0x40004ca],ah
 1055aa5:	add    BYTE PTR [rax],al
 1055aa7:	add    BYTE PTR [rax+0x50004ca],dh
 1055aad:	add    BYTE PTR [rax],al
 1055aaf:	add    al,al
 1055ab1:	retf   0x4
 1055ab4:	(bad)  
 1055ab5:	add    BYTE PTR [rax],al
 1055ab7:	add    al,dl
 1055ab9:	retf   0x4
 1055abc:	adc    BYTE PTR [rdi-0xffff],al
 1055ac2:	(bad)  
 1055ac3:	(bad)  
 1055ac4:	cmp    DWORD PTR [rdi+0x1],eax
 1055aca:	add    BYTE PTR [rax],al
 1055acc:	cmp    eax,0x1000187
 1055ad1:	add    BYTE PTR [rax],al
 1055ad3:	add    BYTE PTR [rcx-0x79],al
 1055ad6:	add    DWORD PTR [rax],eax
 1055ad8:	add    al,BYTE PTR [rax]
 1055ada:	add    BYTE PTR [rax],al
 1055adc:	xchg   DWORD PTR [r9],r8d
 1055adf:	add    BYTE PTR [rbx],al
 1055ae1:	add    BYTE PTR [rax],al
 1055ae3:	add    BYTE PTR [rcx-0x79],cl
 1055ae6:	add    DWORD PTR [rax],eax
 1055ae8:	add    al,0x0
 1055aea:	add    BYTE PTR [rax],al
 1055aec:	xchg   QWORD PTR [r9],r8
 1055aef:	add    BYTE PTR [rip+0x51000000],al        # 0x52055af5
 1055af5:	xchg   DWORD PTR [rcx],eax
 1055af7:	add    BYTE PTR [rsi],al
 1055af9:	add    BYTE PTR [rax],al
 1055afb:	add    BYTE PTR [rbp-0x79],dl
 1055afe:	add    DWORD PTR [rax],eax
 1055b00:	(bad)  
 1055b01:	add    BYTE PTR [rax],al
 1055b03:	add    dh,dh
 1055b05:	mov    WORD PTR [rcx],es
 1055b07:	add    BYTE PTR [rbx],al
 1055b09:	add    BYTE PTR [rax],al
 1055b0b:	add    BYTE PTR [rcx],cl
 1055b0d:	lea    eax,[rcx]
 1055b0f:	add    BYTE PTR [rdx],al
 1055b11:	add    BYTE PTR [rax],al
 1055b13:	add    BYTE PTR [rcx*4+0x10001],bl
 1055b1a:	add    BYTE PTR [rax],al
 1055b1c:	(bad)  
 1055b1d:	lea    eax,[rcx]
 1055b1f:	add    BYTE PTR [rax],al
 1055b21:	add    BYTE PTR [rax],al
 1055b23:	add    BYTE PTR [rdx-0x73],al
 1055b26:	add    DWORD PTR [rax],eax
 1055b28:	(bad)  
 1055b29:	(bad)  
 1055b2a:	(bad)  
 1055b2b:	call   QWORD PTR [rcx]
 1055b2d:	sbb    DWORD PTR [rsi],eax
 1055b2f:	add    BYTE PTR [rcx],bl
 1055b31:	xor    al,0x11
 1055b33:	add    BYTE PTR [rax],cl
 1055b35:	xchg   edx,eax
 1055b36:	add    al,0x70
 1055b38:	add    esp,DWORD PTR [rax+0x2]
 1055b3b:	push   rax
 1055b3c:	xchg   esp,eax
 1055b3d:	inc    BYTE PTR [rbx]
 1055b3f:	add    BYTE PTR [rax+0x37],bl
 1055b42:	add    BYTE PTR [rax],al
 1055b44:	(bad)  
 1055b45:	(bad)  
 1055b46:	(bad)  
 1055b47:	push   QWORD PTR [rax]
 1055b49:	enter  0x4,0x0
 1055b4d:	add    BYTE PTR [rax],al
 1055b4f:	add    BYTE PTR [rax-0x38],al
 1055b52:	add    al,0x0
 1055b54:	add    DWORD PTR [rax],eax
 1055b56:	add    BYTE PTR [rax],al
 1055b58:	push   rax
 1055b59:	enter  0x4,0x70
 1055b5d:	lea    eax,[rcx]
 1055b5f:	add    bh,bh
 1055b61:	(bad)  
 1055b62:	(bad)  
 1055b63:	call   FWORD PTR [rax+0x18d]
 1055b69:	add    BYTE PTR [rax],al
 1055b6b:	add    bl,al
 1055b6d:	lea    eax,[rcx]
 1055b6f:	add    BYTE PTR [rcx],al
 1055b71:	add    BYTE PTR [rax],al
 1055b73:	add    bl,dl
 1055b75:	lea    eax,[rcx]
 1055b77:	add    BYTE PTR [rdx],al
 1055b79:	add    BYTE PTR [rax],al
 1055b7b:	add    dh,ch
 1055b7d:	lea    eax,[rcx]
 1055b7f:	add    BYTE PTR [rcx],al
 1055b81:	add    BYTE PTR [rax],al
 1055b83:	add    dl,bh
 1055b85:	lea    eax,[rcx]
 1055b87:	add    BYTE PTR [rax],al
 1055b89:	add    BYTE PTR [rax],al
 1055b8b:	add    BYTE PTR [rax-0x72],bl
 1055b8e:	add    DWORD PTR [rax],eax
 1055b90:	(bad)  
 1055b91:	(bad)  
 1055b92:	(bad)  
 1055b93:	call   QWORD PTR [rcx]
 1055b95:	and    DWORD PTR [rdx],ecx
 1055b97:	add    BYTE PTR [rcx],bl
 1055b99:	add    DWORD PTR [rbx],edx
 1055b9b:	add    BYTE PTR [rip+0x9e00bf0],cl        # 0xae56791
 1055ba1:	rol    BYTE PTR [rdi],1
 1055ba3:	rol    BYTE PTR [rip+0x3600470],0x30        # 0x465601a
 1055baa:	add    dl,BYTE PTR [rax-0x6c]
 1055bad:	inc    BYTE PTR [rbx]
 1055baf:	add    BYTE PTR [rax-0xffffc9],al
 1055bb5:	(bad)  
 1055bb6:	(bad)  
 1055bb7:	inc    DWORD PTR [rax-0xe]
 1055bba:	add    al,0x0
 1055bbc:	add    BYTE PTR [rax],al
 1055bbe:	add    BYTE PTR [rax],al
 1055bc0:	push   rax
 1055bc1:	repnz add al,0x0
 1055bc4:	add    BYTE PTR [rax],al
 1055bc6:	add    BYTE PTR [rax],al
 1055bc8:	(bad)  
 1055bc9:	repnz add al,0x0
 1055bcc:	add    al,BYTE PTR [rax]
 1055bce:	add    BYTE PTR [rax],al
 1055bd0:	jo     0x1055bc4
 1055bd2:	add    al,0x0
 1055bd4:	add    eax,DWORD PTR [rax]
 1055bd6:	add    BYTE PTR [rax],al
 1055bd8:	xor    dl,0x4
 1055bdb:	add    BYTE PTR [rax+rax*1],al
 1055bde:	add    BYTE PTR [rax],al
 1055be0:	nop
 1055be1:	repnz add al,0x0
 1055be4:	add    BYTE PTR [rax],al
 1055be6:	add    BYTE PTR [rax],al
 1055be8:	movabs al,ds:0xb0000000000004f2
 1055bf1:	repnz add al,0x0
 1055bf4:	(bad)  
 1055bf5:	add    BYTE PTR [rax],al
 1055bf7:	add    al,al
 1055bf9:	repnz add al,0x0
 1055bfc:	or     BYTE PTR [rax],al
 1055bfe:	add    BYTE PTR [rax],al
 1055c00:	shl    dl,1
 1055c02:	add    al,0x0
 1055c04:	or     BYTE PTR [rsi-0xffff],0xff
 1055c0b:	jmp    FWORD PTR [rdi+0x18e]
 1055c11:	add    BYTE PTR [rax],al
 1055c13:	add    bl,ch
 1055c15:	mov    es,WORD PTR [rcx]
 1055c17:	add    BYTE PTR [rcx],al
 1055c19:	add    BYTE PTR [rax],al
 1055c1b:	add    BYTE PTR [rsi],ch
 1055c1d:	pop    QWORD PTR [rcx]
 1055c1f:	add    BYTE PTR [rax],al
 1055c21:	add    BYTE PTR [rax],al
 1055c23:	add    BYTE PTR [rdi-0x71],cl
 1055c26:	add    DWORD PTR [rax],eax
 1055c28:	add    al,BYTE PTR [rax]
 1055c2a:	add    BYTE PTR [rax],al
 1055c2c:	pop    rsi
 1055c2d:	pop    QWORD PTR [rcx]
 1055c2f:	add    BYTE PTR [rbx],al
 1055c31:	add    BYTE PTR [rax],al
 1055c33:	add    BYTE PTR [rbp-0x71],ch
 1055c36:	add    DWORD PTR [rax],eax
 1055c38:	add    al,0x0
 1055c3a:	add    BYTE PTR [rax],al
 1055c3c:	jl     0x1055bcd
 1055c3e:	add    DWORD PTR [rax],eax
 1055c40:	add    eax,0xc5000000
 1055c45:	pop    QWORD PTR [rcx]
 1055c47:	add    BYTE PTR [rax+rax*1],al
 1055c4a:	add    BYTE PTR [rax],al
 1055c4c:	ror    BYTE PTR [rdi+0x30001],1
 1055c52:	add    BYTE PTR [rax],al
 1055c54:	fisttp DWORD PTR [rdi+0x20001]
 1055c5a:	add    BYTE PTR [rax],al
 1055c5c:	out    0x8f,al
 1055c5e:	add    DWORD PTR [rax],eax
 1055c60:	add    BYTE PTR [rax],al
 1055c62:	add    BYTE PTR [rax],al
 1055c64:	lahf   
 1055c65:	nop
 1055c66:	add    DWORD PTR [rax],eax
 1055c68:	(bad)  
 1055c69:	add    BYTE PTR [rax],al
 1055c6b:	add    bl,ah
 1055c6d:	nop
 1055c6e:	add    DWORD PTR [rax],eax
 1055c70:	add    BYTE PTR [rax],al
 1055c72:	add    BYTE PTR [rax],al
 1055c74:	add    eax,0x7000191
 1055c79:	add    BYTE PTR [rax],al
 1055c7b:	add    BYTE PTR [rcx+rdx*4],dl
 1055c7e:	add    DWORD PTR [rax],eax
 1055c80:	or     BYTE PTR [rax],al
 1055c82:	add    BYTE PTR [rax],al
 1055c84:	and    edx,DWORD PTR [rcx+0x90001]
 1055c8a:	add    BYTE PTR [rax],al
 1055c8c:	pop    rbx
 1055c8d:	xchg   ecx,eax
 1055c8e:	add    DWORD PTR [rax],eax
 1055c90:	or     BYTE PTR [rax],al
 1055c92:	add    BYTE PTR [rax],al
 1055c94:	xchg   cx,ax
 1055c96:	add    DWORD PTR [rax],eax
 1055c98:	(bad)  
 1055c99:	add    BYTE PTR [rax],al
 1055c9b:	add    BYTE PTR [rcx-0x6f],dh
 1055c9e:	add    DWORD PTR [rax],eax
 1055ca0:	add    BYTE PTR [rax],al
 1055ca2:	add    BYTE PTR [rax],al
 1055ca4:	add    edx,DWORD PTR [rdx-0xffff]
 1055caa:	(bad)  
 1055cab:	call   QWORD PTR [rcx]
 1055cad:	adc    al,0x4
 1055caf:	add    BYTE PTR [rsp+rsi*1],dl
 1055cb2:	or     DWORD PTR [rax],eax
 1055cb4:	(bad)  
 1055cb5:	push   rdx
 1055cb6:	add    dh,BYTE PTR [rax-0x6c]
 1055cb9:	inc    BYTE PTR [rbx]
 1055cbb:	add    BYTE PTR [rax-0xffffc9],ch
 1055cc1:	(bad)  
 1055cc2:	(bad)  
 1055cc3:	inc    eax
 1055cc5:	fild   DWORD PTR [rax+rax*1]
 1055cc8:	xor    BYTE PTR [rdx-0xffff],dl
 1055cce:	(bad)  
 1055ccf:	jmp    FWORD PTR [rdx-0x6e]
 1055cd2:	add    DWORD PTR [rax],eax
 1055cd4:	add    BYTE PTR [rax],al
 1055cd6:	add    BYTE PTR [rax],al
 1055cd8:	stos   DWORD PTR es:[rdi],eax
 1055cd9:	xchg   edx,eax
 1055cda:	add    DWORD PTR [rax],eax
 1055cdc:	(bad)  
 1055cdd:	(bad)  
 1055cde:	(bad)  
 1055cdf:	(bad)  
 1055ce0:	mov    edx,0x192
 1055ce5:	add    BYTE PTR [rax],al
 1055ce7:	add    bl,bh
 1055ce9:	xchg   edx,eax
 1055cea:	add    DWORD PTR [rax],eax
 1055cec:	(bad)  
 1055ced:	(bad)  
 1055cee:	(bad)  
 1055cef:	inc    DWORD PTR [rcx]
 1055cf1:	or     al,BYTE PTR [rax+rax*1]
 1055cf4:	or     dh,BYTE PTR [rax+rcx*1]
 1055cf7:	add    BYTE PTR [rdx],cl
 1055cf9:	push   rdx
 1055cfa:	(bad)  
 1055cfb:	jo     0x1055d0e
 1055cfd:	lar    eax,WORD PTR [rax]
 1055d00:	(bad)  
 1055d01:	jb     0x1055d05
 1055d03:	xor    BYTE PTR [rsi+rdi*8+0x37d00003],dl
 1055d0a:	add    BYTE PTR [rax],al
 1055d0c:	(bad)  
 1055d0d:	(bad)  
 1055d0e:	(bad)  
 1055d0f:	jmp    rax
 1055d11:	mov    BYTE PTR [rax+rax*1],0xf0
 1055d15:	xchg   ebx,eax
 1055d16:	add    DWORD PTR [rax],eax
 1055d18:	(bad)  
 1055d19:	(bad)  
 1055d1a:	(bad)  
 1055d1b:	dec    DWORD PTR [rsi]
 1055d1d:	xchg   esp,eax
 1055d1e:	add    DWORD PTR [rax],eax
 1055d20:	add    BYTE PTR [rax],al
 1055d22:	add    BYTE PTR [rax],al
 1055d24:	push   rsp
 1055d25:	xchg   esp,eax
 1055d26:	add    DWORD PTR [rax],eax
 1055d28:	(bad)  
 1055d29:	(bad)  
 1055d2a:	(bad)  
 1055d2b:	call   QWORD PTR [rcx]
 1055d2d:	adc    al,0x5
 1055d2f:	add    BYTE PTR [rdx+riz*4],cl
 1055d32:	add    eax,0x3600470
 1055d37:	xor    BYTE PTR [rdx],al
 1055d39:	push   rax
 1055d3a:	add    BYTE PTR [rax],al
 1055d3c:	xchg   esp,eax
 1055d3d:	inc    BYTE PTR [rbx]
 1055d3f:	add    al,bh
 1055d41:	(bad)  
 1055d42:	add    BYTE PTR [rax],al
 1055d44:	(bad)  
 1055d45:	(bad)  
 1055d46:	(bad)  
 1055d47:	call   rax
 1055d49:	enter  0x4,0x0
 1055d4d:	add    BYTE PTR [rax],al
 1055d4f:	add    al,ah
 1055d51:	enter  0x4,0x0
 1055d55:	add    BYTE PTR [rax],al
 1055d57:	add    al,dh
 1055d59:	enter  0x4,0x0
 1055d5d:	add    BYTE PTR [rax],al
 1055d5f:	add    BYTE PTR [rax],al
 1055d61:	leave  
 1055d62:	add    al,0x0
 1055d64:	add    eax,DWORD PTR [rax]
 1055d66:	add    BYTE PTR [rax],al
 1055d68:	xor    cl,cl
 1055d6a:	add    al,0x0
 1055d6c:	add    al,0x0
 1055d6e:	add    BYTE PTR [rax],al
 1055d70:	(bad)  
 1055d71:	leave  
 1055d72:	add    al,0x0
 1055d74:	jo     0x1055d0a
 1055d76:	add    DWORD PTR [rax],eax
 1055d78:	(bad)  
 1055d79:	(bad)  
 1055d7a:	(bad)  
 1055d7b:	call   FWORD PTR [rcx+0x194]
 1055d81:	add    BYTE PTR [rax],al
 1055d83:	add    BYTE PTR [rsp+rdx*4+0x10001],bh
 1055d8a:	add    BYTE PTR [rax],al
 1055d8c:	xlat   BYTE PTR ds:[rbx]
 1055d8d:	xchg   esp,eax
 1055d8e:	add    DWORD PTR [rax],eax
 1055d90:	add    BYTE PTR [rax],al
 1055d92:	add    BYTE PTR [rax],al
 1055d94:	clc    
 1055d95:	xchg   esp,eax
 1055d96:	add    DWORD PTR [rax],eax
 1055d98:	add    al,BYTE PTR [rax]
 1055d9a:	add    BYTE PTR [rax],al
 1055d9c:	(bad)  
 1055d9d:	xchg   ebp,eax
 1055d9e:	add    DWORD PTR [rax],eax
 1055da0:	add    BYTE PTR [rax],al
 1055da2:	add    BYTE PTR [rax],al
 1055da4:	(bad)  
 1055da5:	xchg   ebp,eax
 1055da6:	add    DWORD PTR [rax],eax
 1055da8:	add    eax,DWORD PTR [rax]
 1055daa:	add    BYTE PTR [rax],al
 1055dac:	mov    DWORD PTR [rbp+0x1],edx
 1055db2:	add    BYTE PTR [rax],al
 1055db4:	cwde   
 1055db5:	xchg   ebp,eax
 1055db6:	add    DWORD PTR [rax],eax
 1055db8:	add    al,0x0
 1055dba:	add    BYTE PTR [rax],al
 1055dbc:	mov    dl,0x95
 1055dbe:	add    DWORD PTR [rax],eax
 1055dc0:	add    eax,0xd0000000
 1055dc5:	xchg   ebp,eax
 1055dc6:	add    DWORD PTR [rax],eax
 1055dc8:	add    al,0x0
 1055dca:	add    BYTE PTR [rax],al
 1055dcc:	fist   DWORD PTR [rbp+0x30001]
 1055dd2:	add    BYTE PTR [rax],al
 1055dd4:	repnz xchg ebp,eax
 1055dd6:	add    DWORD PTR [rax],eax
 1055dd8:	add    BYTE PTR [rax],al
 1055dda:	add    BYTE PTR [rax],al
 1055ddc:	rex.WRXB xchg r14,rax
 1055dde:	add    DWORD PTR [rax],eax
 1055de0:	(bad)  
 1055de1:	(bad)  
 1055de2:	(bad)  
 1055de3:	inc    DWORD PTR [rcx]
 1055de5:	(bad)  
 1055de6:	add    al,BYTE PTR [rax]
 1055de8:	(bad)  
 1055de9:	xor    al,BYTE PTR [rdx]
 1055deb:	push   rax
 1055dec:	add    DWORD PTR [rsi],eax
 1055dee:	add    al,BYTE PTR [rax]
 1055df0:	(bad)  
 1055df1:	xor    al,BYTE PTR [rdx]
 1055df3:	push   rax
 1055df4:	add    DWORD PTR [rdi],ecx
 1055df6:	(bad)  
 1055df7:	add    BYTE PTR [rdi],cl
 1055df9:	or     eax,DWORD PTR fs:[rax]
 1055dfc:	sysenter 
 1055dfe:	or     al,BYTE PTR [rax]
 1055e00:	rsqrtps xmm1,XMMWORD PTR [rbx]
 1055e03:	jo     0x1055e26
 1055e05:	add    eax,0x54050002
 1055e0a:	or     BYTE PTR [rax],al
 1055e0c:	jo     0x1055da4
 1055e0e:	add    DWORD PTR [rax],eax
 1055e10:	xchg   esi,eax
 1055e11:	xchg   esi,eax
 1055e12:	add    DWORD PTR [rax],eax
 1055e14:	hlt    
 1055e15:	pop    rbp
 1055e16:	add    eax,0x2100
 1055e1b:	add    BYTE PTR [rax-0x6a],dh
 1055e1e:	add    DWORD PTR [rax],eax
 1055e20:	xchg   esi,eax
 1055e21:	xchg   esi,eax
 1055e22:	add    DWORD PTR [rax],eax
 1055e24:	hlt    
 1055e25:	pop    rbp
 1055e26:	add    eax,0x2002100
 1055e2b:	add    BYTE PTR [rax],al
 1055e2d:	push   rsp
 1055e2e:	or     BYTE PTR [rax],al
 1055e30:	jo     0x1055dc8
 1055e32:	add    DWORD PTR [rax],eax
 1055e34:	xchg   esi,eax
 1055e35:	xchg   esi,eax
 1055e36:	add    DWORD PTR [rax],eax
 1055e38:	hlt    
 1055e39:	pop    rbp
 1055e3a:	add    eax,0xb421900
 1055e3f:	add    BYTE PTR [rcx],dh
 1055e41:	xor    al,0x24
 1055e43:	add    ah,BYTE PTR [rcx]
 1055e45:	add    DWORD PTR [rdx],ebx
 1055e47:	add    cl,BYTE PTR [rax+rsi*8]
 1055e4a:	or     ah,al
 1055e4c:	or     al,dl
 1055e4e:	(bad)  
 1055e4f:	rol    BYTE PTR [rax+rsi*2],0x3
 1055e53:	(bad)  
 1055e54:	add    dl,BYTE PTR [rax+0x0]
 1055e57:	add    BYTE PTR [rax+0x200003fe],ah
 1055e5d:	cmp    BYTE PTR [rax],al
 1055e5f:	add    dl,al
 1055e61:	adc    BYTE PTR [rax],al
 1055e63:	add    bh,bh
 1055e65:	(bad)  
 1055e66:	(bad)  
 1055e67:	jmp    rax
 1055e69:	int3   
 1055e6a:	add    al,0x0
 1055e6c:	add    BYTE PTR [rax],al
 1055e6e:	add    BYTE PTR [rax],al
 1055e70:	lock int3 
 1055e72:	add    al,0x0
 1055e74:	add    DWORD PTR [rax],eax
 1055e76:	add    BYTE PTR [rax],al
 1055e78:	add    ch,cl
 1055e7a:	add    al,0x0
 1055e7c:	add    al,BYTE PTR [rax]
 1055e7e:	add    BYTE PTR [rax],al
 1055e80:	adc    ch,cl
 1055e82:	add    al,0x0
 1055e84:	add    eax,DWORD PTR [rax]
 1055e86:	add    BYTE PTR [rax],al
 1055e88:	and    ch,cl
 1055e8a:	add    al,0x0
 1055e8c:	add    al,0x0
 1055e8e:	add    BYTE PTR [rax],al
 1055e90:	xor    ch,cl
 1055e92:	add    al,0x0
 1055e94:	add    al,BYTE PTR [rax]
 1055e96:	add    BYTE PTR [rax],al
 1055e98:	rex int 0x4
 1055e9b:	add    BYTE PTR [rsi],al
 1055e9d:	add    BYTE PTR [rax],al
 1055e9f:	add    BYTE PTR [rax-0x33],dl
 1055ea2:	add    al,0x0
 1055ea4:	(bad)  
 1055ea5:	add    BYTE PTR [rax],al
 1055ea7:	add    BYTE PTR [rax-0x33],ah
 1055eaa:	add    al,0x0
 1055eac:	or     BYTE PTR [rax],al
 1055eae:	add    BYTE PTR [rax],al
 1055eb0:	jo     0x1055e7f
 1055eb2:	add    al,0x0
 1055eb4:	or     DWORD PTR [rax],eax
 1055eb6:	add    BYTE PTR [rax],al
 1055eb8:	or     ch,0x4
 1055ebb:	add    al,dl
 1055ebd:	cwde   
 1055ebe:	add    DWORD PTR [rax],eax
 1055ec0:	(bad)  
 1055ec1:	(bad)  
 1055ec2:	(bad)  
 1055ec3:	jmp    QWORD PTR [rdi]
 1055ec5:	cdq    
 1055ec6:	add    DWORD PTR [rax],eax
 1055ec8:	add    BYTE PTR [rax],al
 1055eca:	add    BYTE PTR [rax],al
 1055ecc:	xor    ebx,DWORD PTR [rcx+0x10001]
 1055ed2:	add    BYTE PTR [rax],al
 1055ed4:	imul   ebx,DWORD PTR [rcx+0x20001],0x998f0000
 1055ede:	add    DWORD PTR [rax],eax
 1055ee0:	add    eax,DWORD PTR [rax]
 1055ee2:	add    BYTE PTR [rax],al
 1055ee4:	movabs al,ds:0xb400000004000199
 1055eed:	cdq    
 1055eee:	add    DWORD PTR [rax],eax
 1055ef0:	add    eax,0xc3000000
 1055ef5:	cdq    
 1055ef6:	add    DWORD PTR [rax],eax
 1055ef8:	add    al,0x0
 1055efa:	add    BYTE PTR [rax],al
 1055efc:	(bad)  
 1055efd:	cdq    
 1055efe:	add    DWORD PTR [rax],eax
 1055f00:	add    eax,DWORD PTR [rax]
 1055f02:	add    BYTE PTR [rax],al
 1055f04:	ficomp DWORD PTR [rcx+0x20001]
 1055f0a:	add    BYTE PTR [rax],al
 1055f0c:	movsxd ebx,DWORD PTR [rdx+0x10001]
 1055f12:	add    BYTE PTR [rax],al
 1055f14:	outs   dx,DWORD PTR ds:[rsi]
 1055f15:	(bad)  
 1055f16:	add    DWORD PTR [rax],eax
 1055f18:	add    BYTE PTR [rax],al
 1055f1a:	add    BYTE PTR [rax],al
 1055f1c:	jnp    0x1055eb8
 1055f1e:	add    DWORD PTR [rax],eax
 1055f20:	(bad)  
 1055f21:	(bad)  
 1055f22:	(bad)  
 1055f23:	inc    DWORD PTR [rax+0x200019a]
 1055f29:	add    BYTE PTR [rax],al
 1055f2b:	add    cl,bl
 1055f2d:	(bad)  
 1055f2e:	add    DWORD PTR [rax],eax
 1055f30:	add    DWORD PTR [rax],eax
 1055f32:	add    BYTE PTR [rax],al
 1055f34:	in     eax,0x9a
 1055f36:	add    DWORD PTR [rax],eax
 1055f38:	add    BYTE PTR [rax],al
 1055f3a:	add    BYTE PTR [rax],al
 1055f3c:	icebp  
 1055f3d:	(bad)  
 1055f3e:	add    DWORD PTR [rax],eax
 1055f40:	(bad)  
 1055f41:	(bad)  
 1055f42:	(bad)  
 1055f43:	push   rsi
 1055f45:	(bad)  
 1055f46:	add    DWORD PTR [rax],eax
 1055f48:	add    al,BYTE PTR [rax]
 1055f4a:	add    BYTE PTR [rax],al
 1055f4c:	xor    BYTE PTR [rcx+rax*1+0x100],bl
 1055f53:	add    BYTE PTR [rsp+rbx*4],bh
 1055f56:	add    DWORD PTR [rax],eax
 1055f58:	add    BYTE PTR [rax],al
 1055f5a:	add    BYTE PTR [rax],al
 1055f5c:	rex.W pushf 
 1055f5e:	add    DWORD PTR [rax],eax
 1055f60:	(bad)  
 1055f61:	(bad)  
 1055f62:	(bad)  
 1055f63:	dec    DWORD PTR [rbp-0x64]
 1055f66:	add    DWORD PTR [rax],eax
 1055f68:	add    al,BYTE PTR [rax]
 1055f6a:	add    BYTE PTR [rax],al
 1055f6c:	pop    rcx
 1055f6d:	pushf  
 1055f6e:	add    DWORD PTR [rax],eax
 1055f70:	(bad)  
 1055f71:	add    BYTE PTR [rax],al
 1055f73:	add    BYTE PTR [rax-0x64],ch
 1055f76:	add    DWORD PTR [rax],eax
 1055f78:	(bad)  
 1055f79:	add    BYTE PTR [rax],al
 1055f7b:	add    BYTE PTR [rbp+0x600019c],al
 1055f81:	add    BYTE PTR [rax],al
 1055f83:	add    BYTE PTR [rcx-0x63],ah
 1055f86:	add    DWORD PTR [rax],eax
 1055f88:	add    al,BYTE PTR [rax]
 1055f8a:	add    BYTE PTR [rax],al
 1055f8c:	ins    DWORD PTR es:[rdi],dx
 1055f8d:	popf   
 1055f8e:	add    DWORD PTR [rax],eax
 1055f90:	add    DWORD PTR [rax],eax
 1055f92:	add    BYTE PTR [rax],al
 1055f94:	jns    0x1055f33
 1055f96:	add    DWORD PTR [rax],eax
 1055f98:	add    BYTE PTR [rax],al
 1055f9a:	add    BYTE PTR [rax],al
 1055f9c:	test   DWORD PTR [rbp-0xffff],ebx
 1055fa2:	(bad)  
 1055fa3:	dec    DWORD PTR [rdx+0x600019d]
 1055fa9:	add    BYTE PTR [rax],al
 1055fab:	add    cl,ch
 1055fad:	popf   
 1055fae:	add    DWORD PTR [rax],eax
 1055fb0:	or     BYTE PTR [rax],al
 1055fb2:	add    BYTE PTR [rax],al
 1055fb4:	adc    BYTE PTR [rsi+0x90001],bl
 1055fba:	add    BYTE PTR [rax],al
 1055fbc:	cmp    DWORD PTR [rsi+0xa0001],ebx
 1055fc2:	add    BYTE PTR [rax],al
 1055fc4:	(bad)  
 1055fc5:	sahf   
 1055fc6:	add    DWORD PTR [rax],eax
 1055fc8:	or     DWORD PTR [rax],eax
 1055fca:	add    BYTE PTR [rax],al
 1055fcc:	ins    DWORD PTR es:[rdi],dx
 1055fcd:	sahf   
 1055fce:	add    DWORD PTR [rax],eax
 1055fd0:	or     BYTE PTR [rax],al
 1055fd2:	add    BYTE PTR [rax],al
 1055fd4:	pop    rdx
 1055fd5:	lahf   
 1055fd6:	add    DWORD PTR [rax],eax
 1055fd8:	(bad)  
 1055fd9:	add    BYTE PTR [rax],al
 1055fdb:	add    BYTE PTR [rsi-0x61],ah
 1055fde:	add    DWORD PTR [rax],eax
 1055fe0:	add    al,BYTE PTR [rax]
 1055fe2:	add    BYTE PTR [rax],al
 1055fe4:	jb     0x1055f85
 1055fe6:	add    DWORD PTR [rax],eax
 1055fe8:	add    DWORD PTR [rax],eax
 1055fea:	add    BYTE PTR [rax],al
 1055fec:	jle    0x1055f8d
 1055fee:	add    DWORD PTR [rax],eax
 1055ff0:	add    BYTE PTR [rax],al
 1055ff2:	add    BYTE PTR [rax],al
 1055ff4:	mov    bl,BYTE PTR [rdi-0xffff]
 1055ffa:	(bad)  
 1055ffb:	dec    DWORD PTR [rdi+0x800019f]
 1056001:	add    BYTE PTR [rax],al
 1056003:	add    BYTE PTR [rax],dl
 1056005:	movabs al,ds:0xa01c000000060001
 105600e:	add    DWORD PTR [rax],eax
 1056010:	add    al,BYTE PTR [rax]
 1056012:	add    BYTE PTR [rax],al
 1056014:	sub    BYTE PTR [rax+0x10001],ah
 105601a:	add    BYTE PTR [rax],al
 105601c:	xor    al,0xa0
 105601e:	add    DWORD PTR [rax],eax
 1056020:	add    BYTE PTR [rax],al
 1056022:	add    BYTE PTR [rax],al
 1056024:	movabs al,ds:0xa052ffffffff0001
 105602e:	add    DWORD PTR [rax],eax
 1056030:	or     BYTE PTR [rax],al
 1056032:	add    BYTE PTR [rax],al
 1056034:	xchg   edx,eax
 1056035:	movabs al,ds:0xa09e000000060001
 105603e:	add    DWORD PTR [rax],eax
 1056040:	add    al,BYTE PTR [rax]
 1056042:	add    BYTE PTR [rax],al
 1056044:	stos   BYTE PTR es:[rdi],al
 1056045:	movabs al,ds:0xa0b6000000010001
 105604e:	add    DWORD PTR [rax],eax
 1056050:	add    BYTE PTR [rax],al
 1056052:	add    BYTE PTR [rax],al
 1056054:	ret    0x1a0
 1056057:	add    bh,bh
 1056059:	(bad)  
 105605a:	(bad)  
 105605b:	inc    esp
 105605d:	movabs al,ds:0xa114000000060001
 1056066:	add    DWORD PTR [rax],eax
 1056068:	add    al,BYTE PTR [rax]
 105606a:	add    BYTE PTR [rax],al
 105606c:	and    BYTE PTR [rcx+0x10001],ah
 1056072:	add    BYTE PTR [rax],al
 1056074:	sub    al,0xa1
 1056076:	add    DWORD PTR [rax],eax
 1056078:	add    BYTE PTR [rax],al
 105607a:	add    BYTE PTR [rax],al
 105607c:	cmp    BYTE PTR [rcx-0xffff],ah
 1056082:	(bad)  
 1056083:	call   FWORD PTR [rcx]
 1056085:	cmp    ecx,DWORD PTR [rbx]
 1056087:	add    BYTE PTR [rdx],ch
 1056089:	fs (bad) 
 105608b:	add    BYTE PTR [rsi],ah
 105608d:	xor    al,0x3e
 105608f:	add    BYTE PTR [rcx],bl
 1056091:	add    DWORD PTR [rsi],esi
 1056093:	add    BYTE PTR [rbx],cl
 1056095:	lock or eax,esp
 1056098:	(bad)  
 1056099:	rol    BYTE PTR [rip+0x500470],0x0        # 0x1556510
 10560a0:	movabs al,ds:0xa2000038480003fe
 10560a9:	add    DWORD PTR [rax],eax
 10560ab:	add    bh,bh
 10560ad:	(bad)  
 10560ae:	(bad)  
 10560af:	jmp    QWORD PTR [rax-0x15]
 10560b2:	add    al,0x0
 10560b4:	add    BYTE PTR [rax],al
 10560b6:	add    BYTE PTR [rax],al
 10560b8:	jo     0x10560a5
 10560ba:	add    al,0x0
 10560bc:	add    DWORD PTR [rax],eax
 10560be:	add    BYTE PTR [rax],al
 10560c0:	sub    bl,0x4
 10560c3:	add    BYTE PTR [rdx],al
 10560c5:	add    BYTE PTR [rax],al
 10560c7:	add    BYTE PTR [rax+0x20004eb],dl
 10560cd:	add    BYTE PTR [rax],al
 10560cf:	add    BYTE PTR [rax-0x7ffffb15],ah
 10560d5:	movabs eax,ds:0xa1daffffffff0001
 10560de:	add    DWORD PTR [rax],eax
 10560e0:	add    BYTE PTR [rax],al
 10560e2:	add    BYTE PTR [rax],al
 10560e4:	and    eax,0x10001a2
 10560e9:	add    BYTE PTR [rax],al
 10560eb:	add    BYTE PTR [rdi+0x20001a3],al
 10560f1:	add    BYTE PTR [rax],al
 10560f3:	add    BYTE PTR [rdi+0x30001a3],dl
 10560f9:	add    BYTE PTR [rax],al
 10560fb:	add    BYTE PTR [rbx+riz*4+0x20001],dh
 1056102:	add    BYTE PTR [rax],al
 1056104:	mul    DWORD PTR [rbx+0x40001]
 105610a:	add    BYTE PTR [rax],al
 105610c:	movsxd esp,DWORD PTR [rcx+rax*1+0x200]
 1056113:	add    BYTE PTR [rsp+riz*4+0x1],bh
 1056117:	add    BYTE PTR [rcx],al
 1056119:	add    BYTE PTR [rax],al
 105611b:	add    BYTE PTR [rax+0x1a4],cl
 1056121:	add    BYTE PTR [rax],al
 1056123:	add    BYTE PTR [riz*4-0xffff],cl
 105612a:	(bad)  
 105612b:	call   QWORD PTR [rcx]
 105612d:	sbb    eax,DWORD PTR [rsi]
 105612f:	add    BYTE PTR [rbx],bl
 1056131:	xor    al,0x11
 1056133:	add    BYTE PTR [rbx],cl
 1056135:	mov    dl,0x4
 1056137:	jo     0x105613c
 1056139:	(bad)  
 105613a:	add    dl,BYTE PTR [rax-0x6c]
 105613d:	inc    BYTE PTR [rbx]
 105613f:	add    BYTE PTR [rax+0x38],dh
 1056142:	add    BYTE PTR [rax],al
 1056144:	(bad)  
 1056145:	(bad)  
 1056146:	(bad)  
 1056147:	push   QWORD PTR [rax-0x3b]
 105614a:	add    al,0x0
 105614c:	add    BYTE PTR [rax],al
 105614e:	add    BYTE PTR [rax],al
 1056150:	add    ch,0x4
 1056153:	add    BYTE PTR [rcx],al
 1056155:	add    BYTE PTR [rax],al
 1056157:	add    BYTE PTR [rax+0x20004c5],dl
 105615d:	add    BYTE PTR [rax],al
 105615f:	add    BYTE PTR [rax+0x10004c5],ah
 1056165:	add    BYTE PTR [rax],al
 1056167:	add    BYTE PTR [rax+0x10004c5],dh
 105616d:	add    BYTE PTR [rax],al
 105616f:	add    al,al
 1056171:	(bad)
 1056174:	add    DWORD PTR [rax],eax
 1056176:	add    BYTE PTR [rax],al
 1056178:	rol    ch,1
 105617a:	add    al,0x0
 105617c:	add    DWORD PTR [rax],eax
 105617e:	add    BYTE PTR [rax],al
 1056180:	loopne 0x1056147
 1056182:	add    al,0x0
 1056184:	push   rax
 1056185:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1056186:	add    DWORD PTR [rax],eax
 1056188:	(bad)  
 1056189:	(bad)  
 105618a:	(bad)  
 105618b:	(bad)  
 105618c:	jl     0x1056133
 105618e:	add    DWORD PTR [rax],eax
 1056190:	add    BYTE PTR [rax],al
 1056192:	add    BYTE PTR [rax],al
 1056194:	xchg   DWORD PTR [rbp+0x10001],esp
 105619a:	add    BYTE PTR [rax],al
 105619c:	stos   BYTE PTR es:[rdi],al
 105619d:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 105619e:	add    DWORD PTR [rax],eax
 10561a0:	add    al,BYTE PTR [rax]
 10561a2:	add    BYTE PTR [rax],al
 10561a4:	mov    edx,0x30001a5
 10561a9:	add    BYTE PTR [rax],al
 10561ab:	add    al,cl
 10561ad:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 10561ae:	add    DWORD PTR [rax],eax
 10561b0:	add    al,BYTE PTR [rax]
 10561b2:	add    BYTE PTR [rax],al
 10561b4:	shl    DWORD PTR [rbp+0x10001],cl
 10561ba:	add    BYTE PTR [rax],al
 10561bc:	push   rsi
 10561bd:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 10561be:	add    DWORD PTR [rax],eax
 10561c0:	add    al,0x0
 10561c2:	add    BYTE PTR [rax],al
 10561c4:	jno    0x105616c
 10561c6:	add    DWORD PTR [rax],eax
 10561c8:	add    DWORD PTR [rax],eax
 10561ca:	add    BYTE PTR [rax],al
 10561cc:	xchg   edx,eax
 10561cd:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 10561ce:	add    DWORD PTR [rax],eax
 10561d0:	add    eax,0xa4000000
 10561d5:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 10561d6:	add    DWORD PTR [rax],eax
 10561d8:	add    DWORD PTR [rax],eax
 10561da:	add    BYTE PTR [rax],al
 10561dc:	int    0xa6
 10561de:	add    DWORD PTR [rax],eax
 10561e0:	(bad)  
 10561e1:	add    BYTE PTR [rax],al
 10561e3:	add    al,ch
 10561e5:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 10561e6:	add    DWORD PTR [rax],eax
 10561e8:	add    DWORD PTR [rax],eax
 10561ea:	add    BYTE PTR [rax],al
 10561ec:	xor    ah,BYTE PTR [rdi+0x70001]
 10561f2:	add    BYTE PTR [rax],al
 10561f4:	cmps   DWORD PTR fs:[rsi],DWORD PTR es:[rdi]
 10561f6:	add    DWORD PTR [rax],eax
 10561f8:	add    DWORD PTR [rax],eax
 10561fa:	add    BYTE PTR [rax],al
 10561fc:	mov    ebx,0x1a7
 1056201:	add    BYTE PTR [rax],al
 1056203:	add    dh,al
 1056205:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1056206:	add    DWORD PTR [rax],eax
 1056208:	(bad)  
 1056209:	(bad)  
 105620a:	(bad)  
 105620b:	dec    DWORD PTR [rcx]
 105620d:	or     al,BYTE PTR [rdx]
 105620f:	add    BYTE PTR [rdx],cl
 1056211:	xchg   edx,eax
 1056212:	(bad)  
 1056213:	xor    BYTE PTR [rsi+0x1000403],dl
 1056219:	add    BYTE PTR [rax],al
 105621b:	add    BYTE PTR [rbx],al
 105621d:	test   al,0x1
 105621f:	add    BYTE PTR [rax-0x58],al
 1056222:	add    DWORD PTR [rax],eax
 1056224:	push   rax
 1056225:	repz add al,0x0
 1056228:	test   al,0x1
 105622b:	add    BYTE PTR [rcx],al
 105622d:	(bad)  
 105622e:	add    al,BYTE PTR [rax]
 1056230:	(bad)  
 1056231:	jb     0x1056235
 1056233:	push   rax
 1056234:	or     DWORD PTR [rcx],ecx
 1056236:	add    DWORD PTR [rax],eax
 1056238:	or     DWORD PTR [rdx+0x3960000],esp
 105623e:	add    al,0x0
 1056240:	add    DWORD PTR [rax],eax
 1056242:	add    BYTE PTR [rax],al
 1056244:	movabs eax,ds:0xf00001a8b40001a8
 105624d:	repnz add al,0x0
 1056250:	mov    ah,0xa8
 1056252:	add    DWORD PTR [rax],eax
 1056254:	add    DWORD PTR [rsi],eax
 1056256:	add    al,BYTE PTR [rax]
 1056258:	(bad)  
 1056259:	push   rdx
 105625a:	add    dl,BYTE PTR [rax+0x19]
 105625d:	(bad)  
 105625e:	add    eax,0x21340d00
 1056263:	add    BYTE PTR [rip+0x6001c01],cl        # 0x7057e6a
 1056269:	jo     0x105626b
 105626b:	add    ah,bh
 105626d:	add    al,BYTE PTR [rax+rax*1]
 1056270:	add    DWORD PTR [rax],eax
 1056272:	add    BYTE PTR [rax],al
 1056274:	xor    BYTE PTR [rcx-0x566fffff],ch
 105627a:	add    DWORD PTR [rax],eax
 105627c:	mov    al,0xf3
 105627e:	add    al,0x0
 1056280:	nop
 1056281:	test   eax,0xd10001
 1056286:	add    BYTE PTR [rax],al
 1056288:	add    DWORD PTR [rsi],eax
 105628a:	add    al,BYTE PTR [rax]
 105628c:	(bad)  
 105628d:	push   rdx
 105628e:	add    dl,BYTE PTR [rax+0x9]
 1056291:	(bad)  
 1056292:	add    DWORD PTR [rax],eax
 1056294:	(bad)  
 1056295:	movabs ds:0x1000403960000,al
 105629e:	add    BYTE PTR [rax],al
 10562a0:	adc    ch,BYTE PTR [rdx-0x55dbffff]
 10562a6:	add    DWORD PTR [rax],eax
 10562a8:	and    bl,dh
 10562aa:	add    al,0x0
 10562ac:	and    al,0xaa
 10562ae:	add    DWORD PTR [rax],eax
 10562b0:	add    DWORD PTR [rsi],eax
 10562b2:	add    al,BYTE PTR [rax]
 10562b4:	(bad)  
 10562b5:	push   rdx
 10562b6:	add    dl,BYTE PTR [rax+0x11]
 10562b9:	sub    ecx,DWORD PTR [rbx]
 10562bb:	add    BYTE PTR [rbx],ch
 10562bd:	xor    al,0x1e
 10562bf:	add    BYTE PTR [rbx],bl
 10562c1:	add    DWORD PTR [rsi],edx
 10562c3:	add    BYTE PTR [rdi],cl
 10562c5:	lock or eax,0x9d00be0
 10562cb:	rol    BYTE PTR [rdi],0x70
 10562ce:	(bad)  
 10562cf:	(bad)  
 10562d0:	add    eax,0x94000050
 10562d5:	inc    BYTE PTR [rbx]
 10562d7:	add    BYTE PTR [rax-0xffffc8],bl
 10562dd:	(bad)  
 10562de:	(bad)  
 10562df:	call   rax
 10562e1:	rol    BYTE PTR [rax+rax*1],1
 10562e4:	add    BYTE PTR [rax],al
 10562e6:	add    BYTE PTR [rax],al
 10562e8:	loopne 0x10562ba
 10562ea:	add    al,0x0
 10562ec:	add    DWORD PTR [rax],eax
 10562ee:	add    BYTE PTR [rax],al
 10562f0:	lock rol BYTE PTR [rax+rax*1],1
 10562f4:	add    al,BYTE PTR [rax]
 10562f6:	add    BYTE PTR [rax],al
 10562f8:	add    cl,dl
 10562fa:	add    al,0x0
 10562fc:	add    eax,DWORD PTR [rax]
 10562fe:	add    BYTE PTR [rax],al
 1056300:	adc    cl,dl
 1056302:	add    al,0x0
 1056304:	add    al,0x0
 1056306:	add    BYTE PTR [rax],al
 1056308:	and    cl,dl
 105630a:	add    al,0x0
 105630c:	add    eax,DWORD PTR [rax]
 105630e:	add    BYTE PTR [rax],al
 1056310:	xor    cl,dl
 1056312:	add    al,0x0
 1056314:	add    eax,DWORD PTR [rax]
 1056316:	add    BYTE PTR [rax],al
 1056318:	rex rol DWORD PTR [rax+rax*1],1
 105631c:	(bad)  
 105631d:	add    BYTE PTR [rax],al
 105631f:	add    BYTE PTR [rax-0x2f],dl
 1056322:	add    al,0x0
 1056324:	add    eax,DWORD PTR [rax]
 1056326:	add    BYTE PTR [rax],al
 1056328:	(bad)  
 1056329:	rol    DWORD PTR [rax+rax*1],1
 105632c:	sub    BYTE PTR [rdx-0xffff],0xff
 1056333:	inc    esi
 1056335:	stos   BYTE PTR es:[rdi],al
 1056336:	add    DWORD PTR [rax],eax
 1056338:	add    BYTE PTR [rax],al
 105633a:	add    BYTE PTR [rax],al
 105633c:	fsubr  DWORD PTR [rdx+0x10001]
 1056342:	add    BYTE PTR [rax],al
 1056344:	out    0xaa,al
 1056346:	add    DWORD PTR [rax],eax
 1056348:	add    al,BYTE PTR [rax]
 105634a:	add    BYTE PTR [rax],al
 105634c:	(bad)  
 105634d:	stos   DWORD PTR es:[rdi],eax
 105634e:	add    DWORD PTR [rax],eax
 1056350:	add    eax,DWORD PTR [rax]
 1056352:	add    BYTE PTR [rax],al
 1056354:	xor    eax,0x40001ab
 1056359:	add    BYTE PTR [rax],al
 105635b:	add    BYTE PTR [rbx-0x55],cl
 105635e:	add    DWORD PTR [rax],eax
 1056360:	add    eax,0x6d000000
 1056365:	stos   DWORD PTR es:[rdi],eax
 1056366:	add    DWORD PTR [rax],eax
 1056368:	add    al,0x0
 105636a:	add    BYTE PTR [rax],al
 105636c:	js     0x1056319
 105636e:	add    DWORD PTR [rax],eax
 1056370:	add    eax,DWORD PTR [rax]
 1056372:	add    BYTE PTR [rax],al
 1056374:	sahf   
 1056375:	stos   DWORD PTR es:[rdi],eax
 1056376:	add    DWORD PTR [rax],eax
 1056378:	(bad)  
 1056379:	add    BYTE PTR [rax],al
 105637b:	add    cl,al
 105637d:	stos   DWORD PTR es:[rdi],eax
 105637e:	add    DWORD PTR [rax],eax
 1056380:	add    eax,DWORD PTR [rax]
 1056382:	add    BYTE PTR [rax],al
 1056384:	add    al,0xac
 1056386:	add    DWORD PTR [rax],eax
 1056388:	(bad)  
 1056389:	add    BYTE PTR [rax],al
 105638b:	add    BYTE PTR [rax],bl
 105638d:	lods   al,BYTE PTR ds:[rsi]
 105638e:	add    DWORD PTR [rax],eax
 1056390:	or     BYTE PTR [rax],al
 1056392:	add    BYTE PTR [rax],al
 1056394:	lods   al,BYTE PTR es:[rsi]
 1056396:	add    DWORD PTR [rax],eax
 1056398:	(bad)  
 1056399:	add    BYTE PTR [rax],al
 105639b:	add    BYTE PTR [rcx],dh
 105639d:	lods   al,BYTE PTR ds:[rsi]
 105639e:	add    DWORD PTR [rax],eax
 10563a0:	add    eax,DWORD PTR [rax]
 10563a2:	add    BYTE PTR [rax],al
 10563a4:	rex.RB lods eax,DWORD PTR ds:[rsi]
 10563a6:	add    DWORD PTR [rax],eax
 10563a8:	add    al,0x0
 10563aa:	add    BYTE PTR [rax],al
 10563ac:	pop    rbx
 10563ad:	lods   eax,DWORD PTR ds:[rsi]
 10563ae:	add    DWORD PTR [rax],eax
 10563b0:	add    eax,0x7d000000
 10563b5:	lods   eax,DWORD PTR ds:[rsi]
 10563b6:	add    DWORD PTR [rax],eax
 10563b8:	add    al,0x0
 10563ba:	add    BYTE PTR [rax],al
 10563bc:	mov    BYTE PTR [rbp+0x30001],ch
 10563c2:	add    BYTE PTR [rax],al
 10563c4:	mov    esp,0x90001ad
 10563c9:	add    BYTE PTR [rax],al
 10563cb:	add    BYTE PTR [rsi+rbp*4+0x30001],bl
 10563d2:	add    BYTE PTR [rax],al
 10563d4:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 10563d5:	scas   al,BYTE PTR es:[rdi]
 10563d6:	add    DWORD PTR [rax],eax
 10563d8:	add    al,BYTE PTR [rax]
 10563da:	add    BYTE PTR [rax],al
 10563dc:	shr    DWORD PTR [rsi+0x10001],cl
 10563e2:	add    BYTE PTR [rax],al
 10563e4:	fisubr WORD PTR [rsi+0x1]
 10563ea:	add    BYTE PTR [rax],al
 10563ec:	jmp    0x5659f
 10563f1:	(bad)  
 10563f2:	(bad)  
 10563f3:	call   FWORD PTR [rcx]
 10563f5:	sub    DWORD PTR [rcx],ecx
 10563f7:	add    BYTE PTR [rcx],ah
 10563f9:	add    DWORD PTR [rdx],ebx
 10563fb:	add    BYTE PTR [rdx],bl
 10563fd:	lock sbb al,ah
 1056400:	(bad)  
 1056401:	rcl    BYTE PTR [rax+rax*8],1
 1056404:	adc    dh,BYTE PTR [rax+0x11]
 1056407:	(bad)  
 1056408:	adc    BYTE PTR [rax],dh
 105640a:	add    BYTE PTR [rax],al
 105640c:	xchg   esp,eax
 105640d:	inc    BYTE PTR [rbx]
 105640f:	add    al,al
 1056411:	cmp    BYTE PTR [rax],al
 1056413:	add    bh,bh
 1056415:	(bad)  
 1056416:	(bad)  
 1056417:	push   rax
 1056419:	mov    dl,0x4
 105641b:	add    BYTE PTR [rax],al
 105641d:	add    BYTE PTR [rax],al
 105641f:	add    BYTE PTR [rax],al
 1056421:	mov    bl,0x4
	...
 105642b:	add    BYTE PTR [rdx],al
 105642d:	add    BYTE PTR [rax],al
 105642f:	add    BYTE PTR [rax],dl
 1056431:	mov    bl,0x4
 1056433:	add    BYTE PTR [rbx],al
 1056435:	add    BYTE PTR [rax],al
 1056437:	add    BYTE PTR [rax],ah
 1056439:	mov    bl,0x4
 105643b:	add    BYTE PTR [rax+rax*1],al
 105643e:	add    BYTE PTR [rax],al
 1056440:	xor    BYTE PTR [rbx+0x50004],dh
 1056446:	add    BYTE PTR [rax],al
 1056448:	mov    bl,0x4
 105644b:	add    BYTE PTR [rsi],al
 105644d:	add    BYTE PTR [rax],al
 105644f:	add    BYTE PTR [rax-0x4d],dl
 1056452:	add    al,0x0
 1056454:	(bad)  
 1056455:	add    BYTE PTR [rax],al
 1056457:	add    BYTE PTR [rax-0x4d],ah
 105645a:	add    al,0x0
 105645c:	or     BYTE PTR [rax],al
 105645e:	add    BYTE PTR [rax],al
 1056460:	jo     0x1056415
 1056462:	add    al,0x0
 1056464:	or     BYTE PTR [rax],al
 1056466:	add    BYTE PTR [rax],al
 1056468:	xor    BYTE PTR [rbx+0x40004],0x0
 105646f:	add    BYTE PTR [rax+0xb0004b3],dl
 1056475:	add    BYTE PTR [rax],al
 1056477:	add    BYTE PTR [rax+0x4b3],ah
 105647d:	add    BYTE PTR [rax],al
 105647f:	add    BYTE PTR [rax],al
 1056481:	add    BYTE PTR [rax],al
 1056483:	add    BYTE PTR [rip+0x10000000],cl        # 0x11056489
 1056489:	mov    ah,0x4
 105648b:	add    BYTE PTR [rdx],al
 105648d:	add    BYTE PTR [rax],al
 105648f:	add    BYTE PTR [rax+rax*1],cl
 1056492:	add    BYTE PTR [rax],al
 1056494:	(bad)  
 1056495:	add    BYTE PTR [rax],al
 1056497:	add    BYTE PTR [rcx],al
 1056499:	add    BYTE PTR [rax],al
 105649b:	add    BYTE PTR [rax+0x564],ah
 10564a1:	add    BYTE PTR [rax],al
 10564a3:	add    BYTE PTR [rax-0x37fff9cb],al
 10564a9:	add    BYTE PTR [rax],al
 10564ab:	add    BYTE PTR [rax-0x67fffb4d],dh
 10564b1:	add    BYTE PTR [rax],al
 10564b3:	add    BYTE PTR [rax],ah
 10564b5:	scas   eax,DWORD PTR es:[rdi]
 10564b6:	add    DWORD PTR [rax],eax
 10564b8:	(bad)  
 10564b9:	(bad)  
 10564ba:	(bad)  
 10564bb:	jmp    QWORD PTR [rax-0x51]
 10564be:	add    DWORD PTR [rax],eax
 10564c0:	add    BYTE PTR [rax],al
 10564c2:	add    BYTE PTR [rax],al
 10564c4:	jo     0x1056475
 10564c6:	add    DWORD PTR [rax],eax
 10564c8:	add    DWORD PTR [rax],eax
 10564ca:	add    BYTE PTR [rax],al
 10564cc:	mov    gs,WORD PTR [rdi+0x1]
 10564d2:	add    BYTE PTR [rax],al
 10564d4:	out    0xaf,al
 10564d6:	add    DWORD PTR [rax],eax
 10564d8:	add    al,BYTE PTR [rax]
 10564da:	add    BYTE PTR [rax],al
 10564dc:	cmc    
 10564dd:	scas   eax,DWORD PTR es:[rdi]
 10564de:	add    DWORD PTR [rax],eax
 10564e0:	add    eax,DWORD PTR [rax]
 10564e2:	add    BYTE PTR [rax],al
 10564e4:	add    al,0xb0
 10564e6:	add    DWORD PTR [rax],eax
 10564e8:	add    al,0x0
 10564ea:	add    BYTE PTR [rax],al
 10564ec:	fs mov al,0x1
 10564ef:	add    BYTE PTR [rip+0x7a000000],al        # 0x7b0564f5
 10564f5:	mov    al,0x1
 10564f7:	add    BYTE PTR [rsi],al
 10564f9:	add    BYTE PTR [rax],al
 10564fb:	add    BYTE PTR [rax+0x70001b0],dl
 1056501:	add    BYTE PTR [rax],al
 1056503:	add    BYTE PTR [rdi+0x80001b0],ch
 1056509:	add    BYTE PTR [rax],al
 105650b:	add    BYTE PTR [rsi+0x90001b1],dl
 1056511:	add    BYTE PTR [rax],al
 1056513:	add    BYTE PTR [rsi-0x4e],cl
 1056516:	add    DWORD PTR [rax],eax
 1056518:	or     BYTE PTR [rax],al
 105651a:	add    BYTE PTR [rax],al
 105651c:	push   0xa0001b2
 1056521:	add    BYTE PTR [rax],al
 1056523:	add    ch,dh
 1056525:	mov    dl,0x1
 1056527:	add    BYTE PTR [rax],cl
 1056529:	add    BYTE PTR [rax],al
 105652b:	add    BYTE PTR [rax],ah
 105652d:	mov    bl,0x1
 105652f:	add    BYTE PTR [rdi],al
 1056531:	add    BYTE PTR [rax],al
 1056533:	add    BYTE PTR [rdi],ch
 1056535:	mov    bl,0x1
 1056537:	add    BYTE PTR [rsi],al
 1056539:	add    BYTE PTR [rax],al
 105653b:	add    BYTE PTR [rsi],bh
 105653d:	mov    bl,0x1
 105653f:	add    BYTE PTR [rip+0x4d000000],al        # 0x4e056545
 1056545:	mov    bl,0x1
 1056547:	add    BYTE PTR [rax+rax*1],al
 105654a:	add    BYTE PTR [rax],al
 105654c:	pop    rsi
 105654d:	mov    bl,0x1
 105654f:	add    BYTE PTR [rbx],cl
 1056551:	add    BYTE PTR [rax],al
 1056553:	add    BYTE PTR [rdi+0xc0001b3],bh
 1056559:	add    BYTE PTR [rax],al
 105655b:	add    BYTE PTR [rcx],ch
 105655d:	mov    ah,0x1
 105655f:	add    BYTE PTR [rbx],cl
 1056561:	add    BYTE PTR [rax],al
 1056563:	add    BYTE PTR [rsp+rsi*4],dh
 1056566:	add    DWORD PTR [rax],eax
 1056568:	add    al,0x0
 105656a:	add    BYTE PTR [rax],al
 105656c:	mov    spl,0x1
 105656f:	add    BYTE PTR [rbx],al
 1056571:	add    BYTE PTR [rax],al
 1056573:	add    BYTE PTR [rdi-0x4c],cl
 1056576:	add    DWORD PTR [rax],eax
 1056578:	add    al,BYTE PTR [rax]
 105657a:	add    BYTE PTR [rax],al
 105657c:	pop    rsi
 105657d:	mov    ah,0x1
 105657f:	add    BYTE PTR [rax],al
 1056581:	add    BYTE PTR [rax],al
 1056583:	add    bl,ah
 1056585:	mov    ah,0x1
 1056587:	add    bh,bh
 1056589:	(bad)  
 105658a:	(bad)  
 105658b:	push   QWORD PTR [rax+0x4b3]
 1056591:	add    BYTE PTR [rax],al
 1056593:	add    BYTE PTR [rdi+0xe0004b3],bh
 1056599:	add    BYTE PTR [rax],al
 105659b:	add    ch,ah
 105659d:	mov    bl,0x4
 105659f:	add    BYTE PTR [rip+0xfffffffff3000000],cl        # 0xfffffffff40565a5
 10565a5:	mov    bl,0x4
 10565a7:	add    BYTE PTR [rax],al
 10565a9:	add    BYTE PTR [rax],al
 10565ab:	add    BYTE PTR [rcx],bl
 10565ad:	or     al,0x4
 10565af:	add    BYTE PTR [rdx+rdx*8],cl
 10565b2:	or     BYTE PTR [rax+0x7],dh
 10565b5:	push   rax
 10565b6:	(bad)  
 10565b7:	xor    BYTE PTR [rsi+rdi*8+0x38c00003],dl
 10565be:	add    BYTE PTR [rax],al
 10565c0:	adc    DWORD PTR [rcx],esp
 10565c2:	or     al,BYTE PTR [rax]
 10565c4:	and    DWORD PTR [rcx+rbx*1],esi
 10565c7:	add    BYTE PTR [rip+0xcf00ef2],dl        # 0xdf574bf
 10565cd:	loopne 0x10565d9
 10565cf:	ror    BYTE PTR [rax],1
 10565d1:	rol    BYTE PTR [rsi],0x70
 10565d4:	add    eax,0x94500460
 10565d9:	inc    BYTE PTR [rbx]
 10565db:	add    al,ch
 10565dd:	cmp    BYTE PTR [rax],al
 10565df:	add    bh,bh
 10565e1:	(bad)  
 10565e2:	(bad)  
 10565e3:	call   QWORD PTR [rax-0x29]
 10565e6:	add    al,0x0
 10565e8:	add    BYTE PTR [rax],al
 10565ea:	add    BYTE PTR [rax],al
 10565ec:	(bad)  
 10565ed:	xlat   BYTE PTR ds:[rbx]
 10565ee:	add    al,0x0
 10565f0:	add    DWORD PTR [rax],eax
 10565f2:	add    BYTE PTR [rax],al
 10565f4:	jo     0x10565cd
 10565f6:	add    al,0x0
 10565f8:	add    al,BYTE PTR [rax]
 10565fa:	add    BYTE PTR [rax],al
 10565fc:	adc    bh,0x4
 10565ff:	add    BYTE PTR [rdx],al
 1056601:	add    BYTE PTR [rax],al
 1056603:	add    BYTE PTR [rax+0x40004d7],dl
 1056609:	add    BYTE PTR [rax],al
 105660b:	add    BYTE PTR [rax+0x100004d7],ah
 1056611:	mov    ch,0x1
 1056613:	add    bh,bh
 1056615:	(bad)  
 1056616:	(bad)  
 1056617:	inc    DWORD PTR [rdx-0x4b]
 105661a:	add    DWORD PTR [rax],eax
 105661c:	add    BYTE PTR [rax],al
 105661e:	add    BYTE PTR [rax],al
 1056620:	push   rcx
 1056621:	mov    ch,0x1
 1056623:	add    BYTE PTR [rcx],al
 1056625:	add    BYTE PTR [rax],al
 1056627:	add    dl,dl
 1056629:	mov    ch,0x1
 105662b:	add    BYTE PTR [rdx],al
 105662d:	add    BYTE PTR [rax],al
 105662f:	add    cl,bh
 1056631:	mov    ch,0x1
 1056633:	add    BYTE PTR [rbx],al
 1056635:	add    BYTE PTR [rax],al
 1056637:	add    BYTE PTR [rax-0x4a],bl
 105663a:	add    DWORD PTR [rax],eax
 105663c:	add    al,BYTE PTR [rax]
 105663e:	add    BYTE PTR [rax],al
 1056640:	jl     0x10565f8
 1056642:	add    DWORD PTR [rax],eax
 1056644:	add    al,0x0
 1056646:	add    BYTE PTR [rax],al
 1056648:	mov    WORD PTR [rsi+0x50001],?
 105664e:	add    BYTE PTR [rax],al
 1056650:	stos   BYTE PTR es:[rdi],al
 1056651:	mov    dh,0x1
 1056653:	add    BYTE PTR [rax+rax*1],al
 1056656:	add    BYTE PTR [rax],al
 1056658:	mov    dh,0xb6
 105665a:	add    DWORD PTR [rax],eax
 105665c:	add    al,BYTE PTR [rax]
 105665e:	add    BYTE PTR [rax],al
 1056660:	adc    BYTE PTR [rdi+0x10001],dh
 1056666:	add    BYTE PTR [rax],al
 1056668:	xor    DWORD PTR [rdi+0x1],esi
 105666e:	add    BYTE PTR [rax],al
 1056670:	mov    dil,0x1
 1056673:	add    bh,bh
 1056675:	(bad)  
 1056676:	(bad)  
 1056677:	call   QWORD PTR [rcx]
 1056679:	sub    al,0xb
 105667b:	add    BYTE PTR [rsp+rsi*1],ch
 105667e:	xor    BYTE PTR [rax],al
 1056680:	sbb    al,0x1
 1056682:	sub    BYTE PTR [rax],al
 1056684:	adc    al,dh
 1056686:	(bad)  
 1056687:	loopne 0x1056695
 1056689:	ror    BYTE PTR [rdx],1
 105668b:	ror    BYTE PTR [rax],0x70
 105668e:	(bad)  
 105668f:	(bad)  
 1056690:	(bad)  
 1056691:	push   rax
 1056692:	add    BYTE PTR [rax],al
 1056694:	xchg   esp,eax
 1056695:	inc    BYTE PTR [rbx]
 1056697:	add    BYTE PTR [rax],dl
 1056699:	cmp    DWORD PTR [rax],eax
 105669b:	add    bh,bh
 105669d:	(bad)  
 105669e:	(bad)  
 105669f:	inc    eax
 10566a1:	jmp    0x10566a7
 10566a3:	add    BYTE PTR [rax],al
 10566a5:	add    BYTE PTR [rax],al
 10566a7:	add    al,dl
 10566a9:	jmp    0x10566af
 10566ab:	add    BYTE PTR [rcx],al
 10566ad:	add    BYTE PTR [rax],al
 10566af:	add    al,ah
 10566b1:	jmp    0x10566b7
 10566b3:	add    BYTE PTR [rdx],al
 10566b5:	add    BYTE PTR [rax],al
 10566b7:	add    al,dh
 10566b9:	jmp    0x10566bf
 10566bb:	add    BYTE PTR [rbx],al
 10566bd:	add    BYTE PTR [rax],al
 10566bf:	add    BYTE PTR [rax],ah
 10566c1:	in     al,dx
 10566c2:	add    al,0x0
 10566c4:	add    al,0x0
 10566c6:	add    BYTE PTR [rax],al
 10566c8:	push   rax
 10566c9:	in     al,dx
 10566ca:	add    al,0x0
 10566cc:	add    eax,0x80000000
 10566d1:	in     al,dx
 10566d2:	add    al,0x0
 10566d4:	add    al,0x0
 10566d6:	add    BYTE PTR [rax],al
 10566d8:	sub    ah,0x4
 10566db:	add    BYTE PTR [rbx],al
 10566dd:	add    BYTE PTR [rax],al
 10566df:	add    BYTE PTR [rax+0x20004ec],al
 10566e5:	add    BYTE PTR [rax],al
 10566e7:	add    BYTE PTR [rax+0x90004ec],al
 10566ed:	add    BYTE PTR [rax],al
 10566ef:	add    BYTE PTR [rax+0x90004ec],dl
 10566f5:	add    BYTE PTR [rax],al
 10566f7:	add    BYTE PTR [rax+0x90004ec],ah
 10566fd:	add    BYTE PTR [rax],al
 10566ff:	add    BYTE PTR [rax+0xc0004ec],dh
 1056705:	add    BYTE PTR [rax],al
 1056707:	add    al,ah
 1056709:	in     al,dx
 105670a:	add    al,0x0
 105670c:	or     eax,0x10000000
 1056711:	in     eax,dx
 1056712:	add    al,0x0
 1056714:	(bad)  
 1056715:	add    BYTE PTR [rax],al
 1056717:	add    BYTE PTR [rax],ah
 1056719:	in     eax,dx
 105671a:	add    al,0x0
 105671c:	or     DWORD PTR [rax],eax
 105671e:	add    BYTE PTR [rax],al
 1056720:	xor    ch,ch
 1056722:	add    al,0x0
 1056724:	adc    BYTE PTR [rax],al
 1056726:	add    BYTE PTR [rax],al
 1056728:	rex in eax,dx
 105672a:	add    al,0x0
 105672c:	adc    BYTE PTR [rax],al
 105672e:	add    BYTE PTR [rax],al
 1056730:	push   rax
 1056731:	in     eax,dx
 1056732:	add    al,0x0
 1056734:	adc    BYTE PTR [rax],al
 1056736:	add    BYTE PTR [rax],al
 1056738:	(bad)  
 1056739:	in     eax,dx
 105673a:	add    al,0x0
 105673c:	adc    BYTE PTR [rax],al
 105673e:	add    BYTE PTR [rax],al
 1056740:	jo     0x105672f
 1056742:	add    al,0x0
 1056744:	adc    al,0x0
 1056746:	add    BYTE PTR [rax],al
 1056748:	sub    ch,0x4
 105674b:	add    BYTE PTR [rax-0xfffe49],al
 1056751:	(bad)  
 1056752:	(bad)  
 1056753:	dec    esi
 1056755:	mov    bh,0x1
 1056757:	add    BYTE PTR [rax],al
 1056759:	add    BYTE PTR [rax],al
 105675b:	add    cl,bl
 105675d:	mov    bh,0x1
 105675f:	add    BYTE PTR [rcx],al
 1056761:	add    BYTE PTR [rax],al
 1056763:	add    ah,ah
 1056765:	mov    bh,0x1
 1056767:	add    BYTE PTR [rdx],al
 1056769:	add    BYTE PTR [rax],al
 105676b:	add    BYTE PTR [rax+0x30001b8],al
 1056771:	add    BYTE PTR [rax],al
 1056773:	add    BYTE PTR [rbp+0x20001b8],al
 1056779:	add    BYTE PTR [rax],al
 105677b:	add    BYTE PTR [rdx+0x40001b8],dl
 1056781:	add    BYTE PTR [rax],al
 1056783:	add    BYTE PTR [rax+0x50001b8],bh
 1056789:	add    BYTE PTR [rax],al
 105678b:	add    ah,cl
 105678d:	mov    eax,0x70001
 1056792:	add    BYTE PTR [rax],al
 1056794:	loop   0x105674e
 1056796:	add    DWORD PTR [rax],eax
 1056798:	or     BYTE PTR [rax],al
 105679a:	add    BYTE PTR [rax],al
 105679c:	clc    
 105679d:	mov    eax,0x90001
 10567a2:	add    BYTE PTR [rax],al
 10567a4:	cmp    BYTE PTR [rcx+0xa0001],bh
 10567aa:	add    BYTE PTR [rax],al
 10567ac:	cmp    DWORD PTR [rcx+0x90001],0xb9a00000
 10567b6:	add    DWORD PTR [rax],eax
 10567b8:	or     eax,DWORD PTR [rax]
 10567ba:	add    BYTE PTR [rax],al
 10567bc:	(bad)
 10567bf:	add    BYTE PTR [rcx],cl
 10567c1:	add    BYTE PTR [rax],al
 10567c3:	add    bh,ch
 10567c5:	mov    ecx,0xc0001
 10567ca:	add    BYTE PTR [rax],al
 10567cc:	hlt    
 10567cd:	mov    ecx,0x90001
 10567d2:	add    BYTE PTR [rax],al
 10567d4:	(bad)  
 10567d5:	mov    edx,0xd0001
 10567da:	add    BYTE PTR [rax],al
 10567dc:	sbb    edi,DWORD PTR [rdx+0xe0001]
 10567e2:	add    BYTE PTR [rax],al
 10567e4:	rex.XB mov r10d,0xf0001
 10567ea:	add    BYTE PTR [rax],al
 10567ec:	addr32 mov edx,0xe0001
 10567f2:	add    BYTE PTR [rax],al
 10567f4:	jb     0x10567b0
 10567f6:	add    DWORD PTR [rax],eax
 10567f8:	or     eax,0x7d000000
 10567fd:	mov    edx,0xc0001
 1056802:	add    BYTE PTR [rax],al
 1056804:	xchg   ebx,eax
 1056805:	mov    edx,0x90001
 105680a:	add    BYTE PTR [rax],al
 105680c:	rex.RX mov ebx,0x100001
 1056812:	add    BYTE PTR [rax],al
 1056814:	mov    BYTE PTR [rbx+0x120001],bh
 105681a:	add    BYTE PTR [rax],al
 105681c:	sbb    DWORD PTR [rcx+rax*1+0x1000],edi
 1056823:	add    BYTE PTR [rcx],dh
 1056825:	mov    esp,0x110001
 105682a:	add    BYTE PTR [rax],al
 105682c:	fidivr WORD PTR [rcx+rax*1+0x1000]
 1056833:	add    BYTE PTR [rax],cl
 1056835:	mov    ebp,0x130001
 105683a:	add    BYTE PTR [rax],al
 105683c:	xchg   ecx,eax
 105683d:	mov    ebp,0x100001
 1056842:	add    BYTE PTR [rax],al
 1056844:	mov    ebp,0x140001bd
 1056849:	add    BYTE PTR [rax],al
 105684b:	add    ah,cl
 105684d:	mov    ebp,0x150001
 1056852:	add    BYTE PTR [rax],al
 1056854:	out    0xbd,al
 1056856:	add    DWORD PTR [rax],eax
 1056858:	adc    al,0x0
 105685a:	add    BYTE PTR [rax],al
 105685c:	icebp  
 105685d:	mov    ebp,0x100001
 1056862:	add    BYTE PTR [rax],al
 1056864:	rex.WR movabs rsi,0xbe57000000090001
 105686e:	add    DWORD PTR [rax],eax
 1056870:	add    al,BYTE PTR [rax]
 1056872:	add    BYTE PTR [rax],al
 1056874:	mov    bh,BYTE PTR [rsi+0x10001]
 105687a:	add    BYTE PTR [rax],al
 105687c:	xchg   ebp,eax
 105687d:	mov    esi,0x1
 1056882:	add    BYTE PTR [rax],al
 1056884:	movabs al,ds:0x1ffffffff0001be
 105688d:	(bad)  
 105688e:	add    al,BYTE PTR [rax]
 1056890:	(bad)  
 1056891:	xor    al,BYTE PTR [rdx]
 1056893:	push   rax
 1056894:	add    DWORD PTR [rsi],eax
 1056896:	add    al,BYTE PTR [rax]
 1056898:	(bad)  
 1056899:	xor    al,BYTE PTR [rdx]
 105689b:	push   rax
 105689c:	add    DWORD PTR [rsi],eax
 105689e:	add    al,BYTE PTR [rax]
 10568a0:	(bad)  
 10568a1:	xor    al,BYTE PTR [rdx]
 10568a3:	push   rax
 10568a4:	add    DWORD PTR [rsi],eax
 10568a6:	add    al,BYTE PTR [rax]
 10568a8:	(bad)  
 10568a9:	xor    al,BYTE PTR [rdx]
 10568ab:	push   rax
 10568ac:	add    DWORD PTR [rsi],eax
 10568ae:	add    al,BYTE PTR [rax]
 10568b0:	(bad)  
 10568b1:	xor    al,BYTE PTR [rdx]
 10568b3:	push   rax
 10568b4:	adc    DWORD PTR [rbx+rcx*1],ebp
 10568b7:	add    BYTE PTR [rsp+rsi*1],ch
 10568ba:	xor    BYTE PTR [rax],al
 10568bc:	sbb    al,0x1
 10568be:	sub    BYTE PTR [rax],al
 10568c0:	adc    al,dh
 10568c2:	(bad)  
 10568c3:	loopne 0x10568d1
 10568c5:	ror    BYTE PTR [rdx],1
 10568c7:	ror    BYTE PTR [rax],0x70
 10568ca:	(bad)  
 10568cb:	(bad)  
 10568cc:	(bad)  
 10568cd:	push   rax
 10568ce:	add    BYTE PTR [rax],al
 10568d0:	xchg   esp,eax
 10568d1:	inc    BYTE PTR [rbx]
 10568d3:	add    BYTE PTR [rax],bh
 10568d5:	cmp    DWORD PTR [rax],eax
 10568d7:	add    bh,bh
 10568d9:	(bad)  
 10568da:	(bad)  
 10568db:	call   QWORD PTR [rax+0x4e4]
 10568e1:	add    BYTE PTR [rax],al
 10568e3:	add    BYTE PTR [rax+0x10004e4],ah
 10568e9:	add    BYTE PTR [rax],al
 10568eb:	add    BYTE PTR [rax+0x20004e4],dh
 10568f1:	add    BYTE PTR [rax],al
 10568f3:	add    al,al
 10568f5:	in     al,0x4
 10568f7:	add    BYTE PTR [rbx],al
 10568f9:	add    BYTE PTR [rax],al
 10568fb:	add    al,dl
 10568fd:	in     al,0x4
 10568ff:	add    BYTE PTR [rbx],al
 1056901:	add    BYTE PTR [rax],al
 1056903:	add    al,ah
 1056905:	in     al,0x4
 1056907:	add    BYTE PTR [rip+0xfffffffff0000000],al        # 0xfffffffff105690d
 105690d:	in     al,0x4
 105690f:	add    BYTE PTR [rbx],al
 1056911:	add    BYTE PTR [rax],al
 1056913:	add    BYTE PTR [rax],al
 1056915:	in     eax,0x4
 1056917:	add    BYTE PTR [rdi],al
 1056919:	add    BYTE PTR [rax],al
 105691b:	add    BYTE PTR [rax],dh
 105691d:	in     eax,0x4
 105691f:	add    BYTE PTR [rax],cl
 1056921:	add    BYTE PTR [rax],al
 1056923:	add    BYTE PTR [rax-0x1b],ah
 1056926:	add    al,0x0
 1056928:	or     DWORD PTR [rax],eax
 105692a:	add    BYTE PTR [rax],al
 105692c:	nop
 105692d:	in     eax,0x4
 105692f:	add    BYTE PTR [rax],cl
 1056931:	add    BYTE PTR [rax],al
 1056933:	add    BYTE PTR [rax+0x70004e5],dl
 1056939:	add    BYTE PTR [rax],al
 105693b:	add    BYTE PTR [rax+0x30004e5],dl
 1056941:	add    BYTE PTR [rax],al
 1056943:	add    BYTE PTR [rax+0xd0004e5],dl
 1056949:	add    BYTE PTR [rax],al
 105694b:	add    BYTE PTR [rax+0xd0004e5],ah
 1056951:	add    BYTE PTR [rax],al
 1056953:	add    BYTE PTR [rax+0xd0004e5],dh
 1056959:	add    BYTE PTR [rax],al
 105695b:	add    al,al
 105695d:	in     eax,0x4
 105695f:	add    BYTE PTR [rax],dl
 1056961:	add    BYTE PTR [rax],al
 1056963:	add    al,dh
 1056965:	in     eax,0x4
 1056967:	add    BYTE PTR [rcx],dl
 1056969:	add    BYTE PTR [rax],al
 105696b:	add    BYTE PTR [rax],ah
 105696d:	out    0x4,al
 105696f:	add    BYTE PTR [rdx],dl
 1056971:	add    BYTE PTR [rax],al
 1056973:	add    BYTE PTR [rax],dh
 1056975:	out    0x4,al
 1056977:	add    BYTE PTR [rip+0x40000000],cl        # 0x4105697d
 105697d:	out    0x4,al
 105697f:	add    BYTE PTR [rbx],al
 1056981:	add    BYTE PTR [rax],al
 1056983:	add    BYTE PTR [rax-0x1a],dl
 1056986:	add    al,0x0
 1056988:	add    eax,DWORD PTR [rax]
 105698a:	add    BYTE PTR [rax],al
 105698c:	(bad)  
 105698d:	out    0x4,al
 105698f:	add    BYTE PTR [rsi],dl
 1056991:	add    BYTE PTR [rax],al
 1056993:	add    BYTE PTR [rax-0x1a],dh
 1056996:	add    al,0x0
 1056998:	sar    BYTE PTR [rsi-0xffff],1
 105699e:	(bad)  
 105699f:	call   QWORD PTR [rsi]
 10569a1:	mov    edi,0x1
 10569a6:	add    BYTE PTR [rax],al
 10569a8:	and    bh,BYTE PTR [rdi+0x10001]
 10569ae:	add    BYTE PTR [rax],al
 10569b0:	cs mov edi,0x20001
 10569b6:	add    BYTE PTR [rax],al
 10569b8:	cmp    DWORD PTR [rdi+0x30001],edi
 10569be:	add    BYTE PTR [rax],al
 10569c0:	idiv   DWORD PTR [rdi+0x40001]
 10569c6:	add    BYTE PTR [rax],al
 10569c8:	rol    BYTE PTR [ecx],0x0
 10569cc:	add    eax,DWORD PTR [rax]
 10569ce:	add    BYTE PTR [rax],al
 10569d0:	mov    eax,eax
 10569d2:	add    DWORD PTR [rax],eax
 10569d4:	add    eax,0x98000000
 10569d9:	rol    BYTE PTR [rcx],0x0
 10569dc:	(bad)  
 10569dd:	add    BYTE PTR [rax],al
 10569df:	add    BYTE PTR [rbx+0x50001c0],dh
 10569e5:	add    BYTE PTR [rax],al
 10569e7:	add    BYTE PTR [rsi+0x30001c0],bh
 10569ed:	add    BYTE PTR [rax],al
 10569ef:	add    BYTE PTR [rdx],bh
 10569f1:	rol    DWORD PTR [rcx],0x0
 10569f4:	(bad)  
 10569f5:	add    BYTE PTR [rax],al
 10569f7:	add    BYTE PTR [rdi],bh
 10569f9:	rol    DWORD PTR [rcx],0x0
 10569fc:	add    eax,DWORD PTR [rax]
 10569fe:	add    BYTE PTR [rax],al
 1056a00:	rex.WR rol QWORD PTR [rcx],0x0
 1056a04:	or     BYTE PTR [rax],al
 1056a06:	add    BYTE PTR [rax],al
 1056a08:	jae    0x10569cb
 1056a0a:	add    DWORD PTR [rax],eax
 1056a0c:	or     DWORD PTR [rax],eax
 1056a0e:	add    BYTE PTR [rax],al
 1056a10:	mov    cl,al
 1056a12:	add    DWORD PTR [rax],eax
 1056a14:	or     eax,DWORD PTR [rax]
 1056a16:	add    BYTE PTR [rax],al
 1056a18:	lahf   
 1056a19:	rol    DWORD PTR [rcx],0x0
 1056a1c:	or     al,0x0
 1056a1e:	add    BYTE PTR [rax],al
 1056a20:	mov    dh,0xc1
 1056a22:	add    DWORD PTR [rax],eax
 1056a24:	or     eax,0x2000000
 1056a29:	ret    0x1
 1056a2c:	(bad)  
 1056a2d:	add    BYTE PTR [rax],al
 1056a2f:	add    BYTE PTR [rdx+rax*8+0x1],cl
 1056a33:	add    BYTE PTR [rip+0x6a000000],cl        # 0x6b056a39
 1056a39:	ret    0x1
 1056a3c:	sldt   WORD PTR [rax]
 1056a3f:	add    BYTE PTR [rdi+0xd0001c2],cl
 1056a45:	add    BYTE PTR [rax],al
 1056a47:	add    BYTE PTR [rdx+0x100001c2],dh
 1056a4d:	add    BYTE PTR [rax],al
 1056a4f:	add    BYTE PTR [rdi+0xd0001c2],dh
 1056a55:	add    BYTE PTR [rax],al
 1056a57:	add    al,cl
 1056a59:	ret    0x1
 1056a5c:	adc    DWORD PTR [rax],eax
 1056a5e:	add    BYTE PTR [rax],al
 1056a60:	faddp  st(2),st
 1056a62:	add    DWORD PTR [rax],eax
 1056a64:	adc    al,BYTE PTR [rax]
 1056a66:	add    BYTE PTR [rax],al
 1056a68:	(bad)  
 1056a69:	ret    
 1056a6a:	add    DWORD PTR [rax],eax
 1056a6c:	adc    eax,DWORD PTR [rax]
 1056a6e:	add    BYTE PTR [rax],al
 1056a70:	sub    al,bl
 1056a72:	add    DWORD PTR [rax],eax
 1056a74:	adc    al,BYTE PTR [rax]
 1056a76:	add    BYTE PTR [rax],al
 1056a78:	xor    eax,0x110001c3
 1056a7d:	add    BYTE PTR [rax],al
 1056a7f:	add    BYTE PTR [rax-0x3d],al
 1056a82:	add    DWORD PTR [rax],eax
 1056a84:	adc    BYTE PTR [rax],al
 1056a86:	add    BYTE PTR [rax],al
 1056a88:	push   rdi
 1056a89:	ret    
 1056a8a:	add    DWORD PTR [rax],eax
 1056a8c:	or     eax,0x91000000
 1056a91:	ret    
 1056a92:	add    DWORD PTR [rax],eax
 1056a94:	adc    al,0x0
 1056a96:	add    BYTE PTR [rax],al
 1056a98:	inc    bl
 1056a9a:	add    DWORD PTR [rax],eax
 1056a9c:	or     eax,0x9000000
 1056aa1:	(bad)
 1056aa5:	add    BYTE PTR [rax],al
 1056aa7:	add    cl,bl
 1056aa9:	vunpckhps xmm8,xmm15,XMMWORD PTR [r8]
 1056aae:	add    BYTE PTR [rax],al
 1056ab0:	(bad)  
 1056ab1:	(bad)
 1056ab4:	add    eax,DWORD PTR [rax]
 1056ab6:	add    BYTE PTR [rax],al
 1056ab8:	xchg   ebp,eax
 1056aba:	add    DWORD PTR [rax],eax
 1056abc:	(bad)  
 1056abd:	add    BYTE PTR [rax],al
 1056abf:	add    BYTE PTR [rsi+0x170001c5],dl
 1056ac5:	add    BYTE PTR [rax],al
 1056ac7:	add    BYTE PTR [rcx+0x160001c5],dh
 1056acd:	add    BYTE PTR [rax],al
 1056acf:	add    BYTE PTR [rbp+rax*8+0x30001],bh
 1056ad6:	add    BYTE PTR [rax],al
 1056ad8:	rex.X mov BYTE PTR [rcx],0x0
 1056adc:	add    al,BYTE PTR [rax]
 1056ade:	add    BYTE PTR [rax],al
 1056ae0:	rex.WRB mov BYTE PTR [r9],0x0
 1056ae4:	add    DWORD PTR [rax],eax
 1056ae6:	add    BYTE PTR [rax],al
 1056ae8:	pop    rcx
 1056ae9:	mov    BYTE PTR [rcx],0x0
 1056aec:	add    BYTE PTR [rax],al
 1056aee:	add    BYTE PTR [rax],al
 1056af0:	mov    BYTE PTR gs:[rcx],0x0
 1056af4:	(bad)  
 1056af5:	(bad)  
 1056af6:	(bad)  
 1056af7:	inc    DWORD PTR [rcx]
 1056af9:	(bad)  
 1056afa:	add    al,BYTE PTR [rax]
 1056afc:	(bad)  
 1056afd:	xor    al,BYTE PTR [rdx]
 1056aff:	push   rax
 1056b00:	add    DWORD PTR [rsi],eax
 1056b02:	add    al,BYTE PTR [rax]
 1056b04:	(bad)  
 1056b05:	xor    al,BYTE PTR [rdx]
 1056b07:	push   rax
 1056b08:	add    DWORD PTR [rsi],eax
 1056b0a:	add    al,BYTE PTR [rax]
 1056b0c:	(bad)  
 1056b0d:	xor    al,BYTE PTR [rdx]
 1056b0f:	push   rax
 1056b10:	add    DWORD PTR [rsi],eax
 1056b12:	add    al,BYTE PTR [rax]
 1056b14:	(bad)  
 1056b15:	xor    al,BYTE PTR [rdx]
 1056b17:	push   rax
 1056b18:	add    DWORD PTR [rsi],eax
 1056b1a:	add    al,BYTE PTR [rax]
 1056b1c:	(bad)  
 1056b1d:	xor    al,BYTE PTR [rdx]
 1056b1f:	push   rax
 1056b20:	adc    DWORD PTR [rip+0x11d000a],esp        # 0x2226b30
 1056b26:	adc    eax,DWORD PTR [rax]
 1056b28:	adc    eax,esi
 1056b2a:	pavgb  mm1,QWORD PTR [rip+0x9c00bd0]        # 0xac57701
 1056b31:	jo     0x1056b3b
 1056b33:	(bad)  
 1056b34:	(bad)  
 1056b35:	xor    BYTE PTR [rsi],al
 1056b37:	push   rax
 1056b38:	xchg   esp,eax
 1056b39:	inc    BYTE PTR [rbx]
 1056b3b:	add    BYTE PTR [rax+0x39],ah
 1056b3e:	add    BYTE PTR [rax],al
 1056b40:	(bad)  
 1056b41:	(bad)  
 1056b42:	(bad)  
 1056b43:	push   QWORD PTR [rax-0x18]
 1056b46:	add    al,0x0
 1056b48:	add    BYTE PTR [rax],al
 1056b4a:	add    BYTE PTR [rax],al
 1056b4c:	sub    al,0x4
 1056b4f:	add    BYTE PTR [rcx],al
 1056b51:	add    BYTE PTR [rax],al
 1056b53:	add    BYTE PTR [rax+0x20004e8],dl
 1056b59:	add    BYTE PTR [rax],al
 1056b5b:	add    BYTE PTR [rax+0x30004e8],ah
 1056b61:	add    BYTE PTR [rax],al
 1056b63:	add    BYTE PTR [rax+0x30004e8],dh
 1056b69:	add    BYTE PTR [rax],al
 1056b6b:	add    al,al
 1056b6d:	call   0x1086b76
 1056b72:	add    BYTE PTR [rax],al
 1056b74:	shr    al,1
 1056b76:	add    al,0x0
 1056b78:	add    eax,DWORD PTR [rax]
 1056b7a:	add    BYTE PTR [rax],al
 1056b7c:	add    cl,ch
 1056b7e:	add    al,0x0
 1056b80:	(bad)  
 1056b81:	add    BYTE PTR [rax],al
 1056b83:	add    BYTE PTR [rax],dl
 1056b85:	jmp    0xffffffffc7a56b8e
 1056b8a:	add    DWORD PTR [rax],eax
 1056b8c:	(bad)  
 1056b8d:	(bad)  
 1056b8e:	(bad)  
 1056b8f:	jmp    rdx
 1056b91:	mov    BYTE PTR [rcx],0x0
 1056b94:	add    BYTE PTR [rax],al
 1056b96:	add    BYTE PTR [rax],al
 1056b98:	in     eax,dx
 1056b99:	mov    BYTE PTR [rcx],0x0
 1056b9c:	add    DWORD PTR [rax],eax
 1056b9e:	add    BYTE PTR [rax],al
 1056ba0:	clc    
 1056ba1:	mov    BYTE PTR [rcx],0x0
 1056ba4:	add    al,BYTE PTR [rax]
 1056ba6:	add    BYTE PTR [rax],al
 1056ba8:	add    eax,edi
 1056baa:	add    DWORD PTR [rax],eax
 1056bac:	add    eax,DWORD PTR [rax]
 1056bae:	add    BYTE PTR [rax],al
 1056bb0:	fadd   st,st(7)
 1056bb2:	add    DWORD PTR [rax],eax
 1056bb4:	add    al,0x0
 1056bb6:	add    BYTE PTR [rax],al
 1056bb8:	hlt    
 1056bb9:	mov    DWORD PTR [rcx],0x300
 1056bbf:	add    BYTE PTR [rdx],bl
 1056bc1:	enter  0x1,0x5
 1056bc5:	add    BYTE PTR [rax],al
 1056bc7:	add    BYTE PTR [rbp-0x38],cl
 1056bca:	add    DWORD PTR [rax],eax
 1056bcc:	add    eax,DWORD PTR [rax]
 1056bce:	add    BYTE PTR [rax],al
 1056bd0:	leave  
 1056bd1:	enter  0x1,0x6
 1056bd5:	add    BYTE PTR [rax],al
 1056bd7:	add    BYTE PTR [rcx],bh
 1056bd9:	leave  
 1056bda:	add    DWORD PTR [rax],eax
 1056bdc:	add    eax,DWORD PTR [rax]
 1056bde:	add    BYTE PTR [rax],al
 1056be0:	ins    DWORD PTR es:[rdi],dx
 1056be1:	leave  
 1056be2:	add    DWORD PTR [rax],eax
 1056be4:	(bad)  
 1056be5:	add    BYTE PTR [rax],al
 1056be7:	add    BYTE PTR [rcx+rcx*8+0x1],bh
 1056beb:	add    BYTE PTR [rax],cl
 1056bed:	add    BYTE PTR [rax],al
 1056bef:	add    BYTE PTR [rsi+0x70001c9],dl
 1056bf5:	add    BYTE PTR [rax],al
 1056bf7:	add    BYTE PTR [rcx+0x30001c9],ah
 1056bfd:	add    BYTE PTR [rax],al
 1056bff:	add    BYTE PTR [rdx+rcx*8+0x20001],dl
 1056c06:	add    BYTE PTR [rax],al
 1056c08:	lahf   
 1056c09:	retf   0x1
 1056c0c:	add    DWORD PTR [rax],eax
 1056c0e:	add    BYTE PTR [rax],al
 1056c10:	stos   BYTE PTR es:[rdi],al
 1056c11:	retf   0x1
 1056c14:	add    BYTE PTR [rax],al
 1056c16:	add    BYTE PTR [rax],al
 1056c18:	mov    ch,0xca
 1056c1a:	add    DWORD PTR [rax],eax
 1056c1c:	(bad)  
 1056c1d:	(bad)  
 1056c1e:	(bad)  
 1056c1f:	inc    DWORD PTR [rcx]
 1056c21:	(bad)  
 1056c22:	add    al,BYTE PTR [rax]
 1056c24:	(bad)  
 1056c25:	xor    al,BYTE PTR [rdx]
 1056c27:	push   rax
 1056c28:	adc    DWORD PTR [rdi],ebx
 1056c2a:	or     BYTE PTR [rax],al
 1056c2c:	(bad)  
 1056c2d:	xor    al,0x11
 1056c2f:	add    BYTE PTR [rdi],cl
 1056c31:	xchg   edx,eax
 1056c32:	or     al,dh
 1056c34:	(bad)  
 1056c35:	loopne 0x1056c3b
 1056c37:	jo     0x1056c3c
 1056c39:	(bad)  
 1056c3a:	add    dl,BYTE PTR [rax-0x6c]
 1056c3d:	inc    BYTE PTR [rbx]
 1056c3f:	add    BYTE PTR [rax-0xffffc7],cl
 1056c45:	(bad)  
 1056c46:	(bad)  
 1056c47:	inc    DWORD PTR [rax]
 1056c49:	(bad)  
 1056c4a:	add    al,0x0
 1056c4c:	add    BYTE PTR [rax],al
 1056c4e:	add    BYTE PTR [rax],al
 1056c50:	adc    dl,ch
 1056c52:	add    al,0x0
 1056c54:	add    DWORD PTR [rax],eax
 1056c56:	add    BYTE PTR [rax],al
 1056c58:	and    dl,ch
 1056c5a:	add    al,0x0
 1056c5c:	add    al,BYTE PTR [rax]
 1056c5e:	add    BYTE PTR [rax],al
 1056c60:	xor    dl,ch
 1056c62:	add    al,0x0
 1056c64:	add    eax,DWORD PTR [rax]
 1056c66:	add    BYTE PTR [rax],al
 1056c68:	rex (bad) 
 1056c6a:	add    al,0x0
 1056c6c:	add    al,0x0
 1056c6e:	add    BYTE PTR [rax],al
 1056c70:	push   rax
 1056c71:	(bad)  
 1056c72:	add    al,0x0
 1056c74:	add    al,0x0
 1056c76:	add    BYTE PTR [rax],al
 1056c78:	(bad)  
 1056c79:	(bad)  
 1056c7a:	add    al,0x0
 1056c7c:	loopne 0x1056c48
 1056c7e:	add    DWORD PTR [rax],eax
 1056c80:	(bad)  
 1056c81:	(bad)  
 1056c82:	(bad)  
 1056c83:	call   QWORD PTR [rbx]
 1056c85:	retf   
 1056c86:	add    DWORD PTR [rax],eax
 1056c88:	add    BYTE PTR [rax],al
 1056c8a:	add    BYTE PTR [rax],al
 1056c8c:	(bad)  
 1056c8d:	retf   
 1056c8e:	add    DWORD PTR [rax],eax
 1056c90:	add    DWORD PTR [rax],eax
 1056c92:	add    BYTE PTR [rax],al
 1056c94:	sub    ebx,ecx
 1056c96:	add    DWORD PTR [rax],eax
 1056c98:	add    al,BYTE PTR [rax]
 1056c9a:	add    BYTE PTR [rax],al
 1056c9c:	xor    al,0xcb
 1056c9e:	add    DWORD PTR [rax],eax
 1056ca0:	add    eax,DWORD PTR [rax]
 1056ca2:	add    BYTE PTR [rax],al
 1056ca4:	xchg   ebx,eax
 1056ca5:	int3   
 1056ca6:	add    DWORD PTR [rax],eax
 1056ca8:	add    al,0x0
 1056caa:	add    BYTE PTR [rax],al
 1056cac:	mov    esi,0x50001cc
 1056cb1:	add    BYTE PTR [rax],al
 1056cb3:	add    ah,cl
 1056cb5:	int3   
 1056cb6:	add    DWORD PTR [rax],eax
 1056cb8:	add    al,0x0
 1056cba:	add    BYTE PTR [rax],al
 1056cbc:	jl     0x1056c8b
 1056cbe:	add    DWORD PTR [rax],eax
 1056cc0:	(bad)  
 1056cc1:	add    BYTE PTR [rax],al
 1056cc3:	add    BYTE PTR [rdx+0x40001cd],cl
 1056cc9:	add    BYTE PTR [rax],al
 1056ccb:	add    bl,cl
 1056ccd:	int    0x1
 1056ccf:	add    BYTE PTR [rbx],al
 1056cd1:	add    BYTE PTR [rax],al
 1056cd3:	add    dl,dh
 1056cd5:	int    0x1
 1056cd7:	add    BYTE PTR [rdx],al
 1056cd9:	add    BYTE PTR [rax],al
 1056cdb:	add    ch,bh
 1056cdd:	int    0x1
 1056cdf:	add    BYTE PTR [rcx],al
 1056ce1:	add    BYTE PTR [rax],al
 1056ce3:	add    BYTE PTR [rax],cl
 1056ce5:	(bad)  
 1056ce6:	add    DWORD PTR [rax],eax
 1056ce8:	add    BYTE PTR [rax],al
 1056cea:	add    BYTE PTR [rax],al
 1056cec:	adc    ecx,esi
 1056cee:	add    DWORD PTR [rax],eax
 1056cf0:	(bad)  
 1056cf1:	(bad)  
 1056cf2:	(bad)  
 1056cf3:	call   QWORD PTR [rcx]
 1056cf5:	and    eax,0x11d000a
 1056cfa:	sbb    DWORD PTR [rax],eax
 1056cfc:	adc    eax,esi
 1056cfe:	pavgb  mm1,QWORD PTR [rip+0x9c00bd0]        # 0xac578d5
 1056d05:	jo     0x1056d0f
 1056d07:	(bad)  
 1056d08:	(bad)  
 1056d09:	xor    BYTE PTR [rsi],al
 1056d0b:	push   rax
 1056d0c:	xchg   esp,eax
 1056d0d:	inc    BYTE PTR [rbx]
 1056d0f:	add    BYTE PTR [rax-0xffffc7],dh
 1056d15:	(bad)  
 1056d16:	(bad)  
 1056d17:	inc    DWORD PTR [rax+0x4ea]
 1056d1d:	add    BYTE PTR [rax],al
 1056d1f:	add    BYTE PTR [rax+0x10004ea],dl
 1056d25:	add    BYTE PTR [rax],al
 1056d27:	add    BYTE PTR [rax+0x10004ea],ah
 1056d2d:	add    BYTE PTR [rax],al
 1056d2f:	add    BYTE PTR [rax+0x30004ea],dh
 1056d35:	add    BYTE PTR [rax],al
 1056d37:	add    al,al
 1056d39:	(bad)  
 1056d3a:	add    al,0x0
 1056d3c:	add    DWORD PTR [rax],eax
 1056d3e:	add    BYTE PTR [rax],al
 1056d40:	shr    dl,1
 1056d42:	add    al,0x0
 1056d44:	add    DWORD PTR [rax],eax
 1056d46:	add    BYTE PTR [rax],al
 1056d48:	loopne 0x1056d34
 1056d4a:	add    al,0x0
 1056d4c:	(bad)  
 1056d4d:	add    BYTE PTR [rax],al
 1056d4f:	add    al,dh
 1056d51:	(bad)  
 1056d52:	add    al,0x0
 1056d54:	add    DWORD PTR [rax],eax
 1056d56:	add    BYTE PTR [rax],al
 1056d58:	add    bl,ch
 1056d5a:	add    al,0x0
 1056d5c:	add    DWORD PTR [rax],eax
 1056d5e:	add    BYTE PTR [rax],al
 1056d60:	adc    bl,ch
 1056d62:	add    al,0x0
 1056d64:	add    DWORD PTR [rax],eax
 1056d66:	add    BYTE PTR [rax],al
 1056d68:	and    bl,ch
 1056d6a:	add    al,0x0
 1056d6c:	add    DWORD PTR [rax],eax
 1056d6e:	add    BYTE PTR [rax],al
 1056d70:	xor    bl,ch
 1056d72:	add    al,0x0
 1056d74:	add    DWORD PTR [rax],eax
 1056d76:	add    BYTE PTR [rax],al
 1056d78:	rex jmp 0x1056d7f
 1056d7b:	add    BYTE PTR [rax-0x32],al
 1056d7e:	add    DWORD PTR [rax],eax
 1056d80:	(bad)  
 1056d81:	(bad)  
 1056d82:	(bad)  
 1056d83:	push   QWORD PTR [rsi-0x32]
 1056d86:	add    DWORD PTR [rax],eax
 1056d88:	add    BYTE PTR [rax],al
 1056d8a:	add    BYTE PTR [rax],al
 1056d8c:	or     esi,0x10001
 1056d92:	add    BYTE PTR [rax],al
 1056d94:	mov    esp,0x20001ce
 1056d99:	add    BYTE PTR [rax],al
 1056d9b:	add    al,cl
 1056d9d:	(bad)  
 1056d9e:	add    DWORD PTR [rax],eax
 1056da0:	add    DWORD PTR [rax],eax
 1056da2:	add    BYTE PTR [rax],al
 1056da4:	xlat   BYTE PTR ds:[rbx]
 1056da5:	(bad)  
 1056da6:	add    DWORD PTR [rax],eax
 1056da8:	add    BYTE PTR [rax],al
 1056daa:	add    BYTE PTR [rax],al
 1056dac:	loop   0x1056d7c
 1056dae:	add    DWORD PTR [rax],eax
 1056db0:	(bad)  
 1056db1:	(bad)  
 1056db2:	(bad)  
 1056db3:	push   rbx
 1056db5:	(bad)  
 1056db6:	add    DWORD PTR [rax],eax
 1056db8:	add    DWORD PTR [rax],eax
 1056dba:	add    BYTE PTR [rax],al
 1056dbc:	jle    0x1056d8e
 1056dbe:	add    DWORD PTR [rax],eax
 1056dc0:	add    eax,DWORD PTR [rax]
 1056dc2:	add    BYTE PTR [rax],al
 1056dc4:	lods   al,BYTE PTR ds:[rsi]
 1056dc5:	rol    BYTE PTR [rcx],1
 1056dc7:	add    BYTE PTR [rax+rax*1],al
 1056dca:	add    BYTE PTR [rax],al
 1056dcc:	mov    edx,0x30001d0
 1056dd1:	add    BYTE PTR [rax],al
 1056dd3:	add    ch,al
 1056dd5:	rol    BYTE PTR [rcx],1
 1056dd7:	add    BYTE PTR [rcx],al
 1056dd9:	add    BYTE PTR [rax],al
 1056ddb:	add    ah,ah
 1056ddd:	rol    BYTE PTR [rcx],1
 1056ddf:	add    BYTE PTR [rip+0xfffffffff2000000],al        # 0xfffffffff3056de5
 1056de5:	rol    BYTE PTR [rcx],1
 1056de7:	add    BYTE PTR [rcx],al
 1056de9:	add    BYTE PTR [rax],al
 1056deb:	add    BYTE PTR [rcx+rdx*8+0x1],ah
 1056def:	add    BYTE PTR [rsi],al
 1056df1:	add    BYTE PTR [rax],al
 1056df3:	add    BYTE PTR [rbp-0x2f],dh
 1056df6:	add    DWORD PTR [rax],eax
 1056df8:	(bad)  
 1056df9:	add    BYTE PTR [rax],al
 1056dfb:	add    BYTE PTR [rsi+0x60001d1],ah
 1056e01:	add    BYTE PTR [rax],al
 1056e03:	add    BYTE PTR [rcx+0x10001d1],dh
 1056e09:	add    BYTE PTR [rax],al
 1056e0b:	add    ch,bl
 1056e0d:	rol    DWORD PTR [rcx],1
 1056e0f:	add    BYTE PTR [rax],cl
 1056e11:	add    BYTE PTR [rax],al
 1056e13:	add    BYTE PTR [rsi-0x2e],ah
 1056e16:	add    DWORD PTR [rax],eax
 1056e18:	add    DWORD PTR [rax],eax
 1056e1a:	add    BYTE PTR [rax],al
 1056e1c:	rex.WRXB rol QWORD PTR [r9],cl
 1056e1f:	add    BYTE PTR [rcx],cl
 1056e21:	add    BYTE PTR [rax],al
 1056e23:	add    BYTE PTR [rbp-0x2d],bl
 1056e26:	add    DWORD PTR [rax],eax
 1056e28:	add    DWORD PTR [rax],eax
 1056e2a:	add    BYTE PTR [rax],al
 1056e2c:	jl     0x1056e01
 1056e2e:	add    DWORD PTR [rax],eax
 1056e30:	or     al,BYTE PTR [rax]
 1056e32:	add    BYTE PTR [rax],al
 1056e34:	mov    dl,bl
 1056e36:	add    DWORD PTR [rax],eax
 1056e38:	add    DWORD PTR [rax],eax
 1056e3a:	add    BYTE PTR [rax],al
 1056e3c:	(bad)  
 1056e3d:	rol    DWORD PTR [rcx],cl
 1056e3f:	add    BYTE PTR [rbx],cl
 1056e41:	add    BYTE PTR [rax],al
 1056e43:	add    BYTE PTR [rbx],ch
 1056e45:	(bad)  
 1056e46:	add    DWORD PTR [rax],eax
 1056e48:	add    DWORD PTR [rax],eax
 1056e4a:	add    BYTE PTR [rax],al
 1056e4c:	push   rdi
 1056e4d:	(bad)  
 1056e4e:	add    DWORD PTR [rax],eax
 1056e50:	or     al,0x0
 1056e52:	add    BYTE PTR [rax],al
 1056e54:	(bad)  
 1056e56:	add    DWORD PTR [rax],eax
 1056e58:	add    DWORD PTR [rax],eax
 1056e5a:	add    BYTE PTR [rax],al
 1056e5c:	pop    rsp
 1056e5d:	(bad)  
 1056e5e:	add    DWORD PTR [rax],eax
 1056e60:	add    BYTE PTR [rax],al
 1056e62:	add    BYTE PTR [rax],al
 1056e64:	addr32 (bad) 
 1056e66:	add    DWORD PTR [rax],eax
 1056e68:	(bad)  
 1056e69:	(bad)  
 1056e6a:	(bad)  
 1056e6b:	call   QWORD PTR [rcx]
 1056e6d:	sub    BYTE PTR [rbx],cl
 1056e6f:	add    BYTE PTR [rax],ch
 1056e71:	xor    al,0x1f
 1056e73:	add    BYTE PTR [rax],bl
 1056e75:	add    DWORD PTR [rsi],edx
 1056e77:	add    BYTE PTR [rax+rsi*8],cl
 1056e7a:	or     ah,al
 1056e7c:	or     al,dl
 1056e7e:	(bad)  
 1056e7f:	rol    BYTE PTR [rax+rsi*2],0x3
 1056e83:	(bad)  
 1056e84:	add    dl,BYTE PTR [rax+0x0]
 1056e87:	add    BYTE PTR [rsi+rdi*8+0x39d80003],dl
 1056e8e:	add    BYTE PTR [rax],al
 1056e90:	(bad)  
 1056e91:	(bad)  
 1056e92:	(bad)  
 1056e93:	push   QWORD PTR [rax]
 1056e95:	jmp    0x1056e9e
 1056e9a:	add    BYTE PTR [rax],al
 1056e9c:	rex jmp 0x1066ea6
 1056ea2:	add    BYTE PTR [rax],al
 1056ea4:	push   rax
 1056ea5:	jmp    0x1076eae
 1056eaa:	add    BYTE PTR [rax],al
 1056eac:	(bad)  
 1056ead:	jmp    0x1086eb6
 1056eb2:	add    BYTE PTR [rax],al
 1056eb4:	jo     0x1056e9f
 1056eb6:	add    al,0x0
 1056eb8:	add    al,0x0
 1056eba:	add    BYTE PTR [rax],al
 1056ebc:	sub    cl,0x4
 1056ebf:	add    BYTE PTR [rbx],al
 1056ec1:	add    BYTE PTR [rax],al
 1056ec3:	add    BYTE PTR [rax+0x30004e9],dl
 1056ec9:	add    BYTE PTR [rax],al
 1056ecb:	add    BYTE PTR [rax+0x30004e9],ah
 1056ed1:	add    BYTE PTR [rax],al
 1056ed3:	add    al,dl
 1056ed5:	jmp    0x10d6ede
 1056eda:	add    BYTE PTR [rax],al
 1056edc:	loopne 0x1056ec7
 1056ede:	add    al,0x0
 1056ee0:	nop
 1056ee1:	(bad)  
 1056ee2:	add    DWORD PTR [rax],eax
 1056ee4:	(bad)  
 1056ee5:	(bad)  
 1056ee6:	(bad)  
 1056ee7:	call   rdi
 1056ee9:	(bad)  
 1056eea:	add    DWORD PTR [rax],eax
 1056eec:	add    BYTE PTR [rax],al
 1056eee:	add    BYTE PTR [rax],al
 1056ef0:	loop   0x1056ec7
 1056ef2:	add    DWORD PTR [rax],eax
 1056ef4:	add    DWORD PTR [rax],eax
 1056ef6:	add    BYTE PTR [rax],al
 1056ef8:	in     eax,dx
 1056ef9:	(bad)  
 1056efa:	add    DWORD PTR [rax],eax
 1056efc:	add    al,BYTE PTR [rax]
 1056efe:	add    BYTE PTR [rax],al
 1056f00:	clc    
 1056f01:	(bad)  
 1056f02:	add    DWORD PTR [rax],eax
 1056f04:	add    eax,DWORD PTR [rax]
 1056f06:	add    BYTE PTR [rax],al
 1056f08:	mov    dl,dh
 1056f0a:	add    DWORD PTR [rax],eax
 1056f0c:	add    al,0x0
 1056f0e:	add    BYTE PTR [rax],al
 1056f10:	mov    eax,0x50001d6
 1056f15:	add    BYTE PTR [rax],al
 1056f17:	add    dh,al
 1056f19:	(bad)  
 1056f1a:	add    DWORD PTR [rax],eax
 1056f1c:	add    al,0x0
 1056f1e:	add    BYTE PTR [rax],al
 1056f20:	rcl    esi,1
 1056f22:	add    DWORD PTR [rax],eax
 1056f24:	add    eax,DWORD PTR [rax]
 1056f26:	add    BYTE PTR [rax],al
 1056f28:	imul   edx,edi,0x1
 1056f2b:	add    BYTE PTR [rsi],al
 1056f2d:	add    BYTE PTR [rax],al
 1056f2f:	add    BYTE PTR [rbx+0x30001d7],bl
 1056f35:	add    BYTE PTR [rax],al
 1056f37:	add    al,bh
 1056f39:	fadd   DWORD PTR [rcx]
 1056f3b:	add    BYTE PTR [rdi],al
 1056f3d:	add    BYTE PTR [rax],al
 1056f3f:	add    BYTE PTR [rdx-0x27],dh
 1056f42:	add    DWORD PTR [rax],eax
 1056f44:	add    eax,DWORD PTR [rax]
 1056f46:	add    BYTE PTR [rax],al
 1056f48:	lods   eax,DWORD PTR ds:[rsi]
 1056f49:	fld    DWORD PTR [rcx]
 1056f4b:	add    BYTE PTR [rax],cl
 1056f4d:	add    BYTE PTR [rax],al
 1056f4f:	add    BYTE PTR [rcx+rbx*8+0x90001],bh
 1056f56:	add    BYTE PTR [rax],al
 1056f58:	(bad)  
 1056f59:	fld    DWORD PTR [rcx]
 1056f5b:	add    BYTE PTR [rax],cl
 1056f5d:	add    BYTE PTR [rax],al
 1056f5f:	add    cl,ah
 1056f61:	fld    DWORD PTR [rcx]
 1056f63:	add    BYTE PTR [rbx],al
 1056f65:	add    BYTE PTR [rax],al
 1056f67:	add    dl,al
 1056f69:	fiadd  DWORD PTR [rcx]
 1056f6b:	add    BYTE PTR [rdx],al
 1056f6d:	add    BYTE PTR [rax],al
 1056f6f:	add    ch,cl
 1056f71:	fiadd  DWORD PTR [rcx]
 1056f73:	add    BYTE PTR [rcx],al
 1056f75:	add    BYTE PTR [rax],al
 1056f77:	add    al,bl
 1056f79:	fiadd  DWORD PTR [rcx]
 1056f7b:	add    BYTE PTR [rax],al
 1056f7d:	add    BYTE PTR [rax],al
 1056f7f:	add    bl,ah
 1056f81:	fiadd  DWORD PTR [rcx]
 1056f83:	add    bh,bh
 1056f85:	(bad)  
 1056f86:	(bad)  
 1056f87:	inc    DWORD PTR [rcx]
 1056f89:	(bad)  
 1056f8a:	add    al,BYTE PTR [rax]
 1056f8c:	(bad)  
 1056f8d:	xor    al,BYTE PTR [rdx]
 1056f8f:	push   rax
 1056f90:	adc    DWORD PTR [rax],ebp
 1056f92:	or     eax,DWORD PTR [rax]
 1056f94:	sub    BYTE PTR ds:0x1c011800,dh
 1056f9b:	add    BYTE PTR [rax+rsi*8],cl
 1056f9e:	or     ah,al
 1056fa0:	or     al,dl
 1056fa2:	(bad)  
 1056fa3:	rol    BYTE PTR [rax+rsi*2],0x3
 1056fa7:	(bad)  
 1056fa8:	add    dl,BYTE PTR [rax+0x0]
 1056fab:	add    BYTE PTR [rsi+rdi*8+0x3a000003],dl
 1056fb2:	add    BYTE PTR [rax],al
 1056fb4:	(bad)  
 1056fb5:	(bad)  
 1056fb6:	(bad)  
 1056fb7:	call   QWORD PTR [rax+0x4e6]
 1056fbd:	add    BYTE PTR [rax],al
 1056fbf:	add    BYTE PTR [rax+0x10004e6],ah
 1056fc5:	add    BYTE PTR [rax],al
 1056fc7:	add    BYTE PTR [rax+0x10004e6],dh
 1056fcd:	add    BYTE PTR [rax],al
 1056fcf:	add    al,al
 1056fd1:	out    0x4,al
 1056fd3:	add    BYTE PTR [rbx],al
 1056fd5:	add    BYTE PTR [rax],al
 1056fd7:	add    al,dl
 1056fd9:	out    0x4,al
 1056fdb:	add    BYTE PTR [rcx],al
 1056fdd:	add    BYTE PTR [rax],al
 1056fdf:	add    al,ah
 1056fe1:	out    0x4,al
 1056fe3:	add    BYTE PTR [rip+0xfffffffff0000000],al        # 0xfffffffff1056fe9
 1056fe9:	out    0x4,al
 1056feb:	add    BYTE PTR [rcx],al
 1056fed:	add    BYTE PTR [rax],al
 1056fef:	add    BYTE PTR [rax],al
 1056ff1:	out    0x4,eax
 1056ff3:	add    BYTE PTR [rdi],al
 1056ff5:	add    BYTE PTR [rax],al
 1056ff7:	add    BYTE PTR [rax],dl
 1056ff9:	out    0x4,eax
 1056ffb:	add    BYTE PTR [rax],cl
 1056ffd:	add    BYTE PTR [rax],al
 1056fff:	add    BYTE PTR [rax],ah
 1057001:	out    0x4,eax
 1057003:	add    BYTE PTR [rcx],al
 1057005:	add    BYTE PTR [rax],al
 1057007:	add    BYTE PTR [rax],dh
 1057009:	out    0x4,eax
 105700b:	add    BYTE PTR [rdx],cl
 105700d:	add    BYTE PTR [rax],al
 105700f:	add    BYTE PTR [rax-0x19],al
 1057012:	add    al,0x0
 1057014:	or     eax,DWORD PTR [rax]
 1057016:	add    BYTE PTR [rax],al
 1057018:	push   rax
 1057019:	out    0x4,eax
 105701b:	add    BYTE PTR [rdx],cl
 105701d:	add    BYTE PTR [rax],al
 105701f:	add    BYTE PTR [rax-0x19],ah
 1057022:	add    al,0x0
 1057024:	or     eax,0x90000000
 1057029:	out    0x4,eax
 105702b:	add    BYTE PTR [rsi],cl
 105702d:	add    BYTE PTR [rax],al
 105702f:	add    al,al
 1057031:	out    0x4,eax
 1057033:	add    BYTE PTR [rdx],cl
 1057035:	add    BYTE PTR [rax],al
 1057037:	add    al,dh
 1057039:	out    0x4,eax
 105703b:	add    BYTE PTR [rax],dl
 105703d:	add    BYTE PTR [rax],al
 105703f:	add    BYTE PTR [rax],ah
 1057041:	call   0x106704a
 1057046:	add    BYTE PTR [rax],al
 1057048:	push   rax
 1057049:	call   0xffffffffdc257052
 105704e:	add    DWORD PTR [rax],eax
 1057050:	(bad)  
 1057051:	(bad)  
 1057052:	(bad)  
 1057053:	jmp    QWORD PTR [rcx-0x25]
 1057056:	add    DWORD PTR [rax],eax
 1057058:	add    BYTE PTR [rax],al
 105705a:	add    BYTE PTR [rax],al
 105705c:	ins    BYTE PTR es:[rdi],dx
 105705d:	fild   DWORD PTR [rcx]
 105705f:	add    BYTE PTR [rcx],al
 1057061:	add    BYTE PTR [rax],al
 1057063:	add    BYTE PTR [rcx],bl
 1057065:	fadd   QWORD PTR [rcx]
 1057067:	add    BYTE PTR [rax],al
 1057069:	add    BYTE PTR [rax],al
 105706b:	add    BYTE PTR [rbx],bl
 105706d:	fadd   QWORD PTR [rcx]
 105706f:	add    BYTE PTR [rcx],al
 1057071:	add    BYTE PTR [rax],al
 1057073:	add    BYTE PTR [rcx-0x24],ah
 1057076:	add    DWORD PTR [rax],eax
 1057078:	add    al,BYTE PTR [rax]
 105707a:	add    BYTE PTR [rax],al
 105707c:	jle    0x105705a
 105707e:	add    DWORD PTR [rax],eax
 1057080:	add    DWORD PTR [rax],eax
 1057082:	add    BYTE PTR [rax],al
 1057084:	stos   DWORD PTR es:[rdi],eax
 1057085:	fadd   QWORD PTR [rcx]
 1057087:	add    BYTE PTR [rbx],al
 1057089:	add    BYTE PTR [rax],al
 105708b:	add    cl,al
 105708d:	fadd   QWORD PTR [rcx]
 105708f:	add    BYTE PTR [rax+rax*1],al
 1057092:	add    BYTE PTR [rax],al
 1057094:	(bad)  
 1057096:	add    DWORD PTR [rax],eax
 1057098:	add    eax,DWORD PTR [rax]
 105709a:	add    BYTE PTR [rax],al
 105709c:	jmp    0x205727d
 10570a1:	add    BYTE PTR [rax],al
 10570a3:	add    BYTE PTR [rsi],dl
 10570a5:	fld    QWORD PTR [rcx]
 10570a7:	add    BYTE PTR [rip+0x2c000000],al        # 0x2d0570ad
 10570ad:	fld    QWORD PTR [rcx]
 10570af:	add    BYTE PTR [rsi],al
 10570b1:	add    BYTE PTR [rax],al
 10570b3:	add    BYTE PTR [rcx-0x23],cl
 10570b6:	add    DWORD PTR [rax],eax
 10570b8:	add    eax,0x54000000
 10570bd:	fld    QWORD PTR [rcx]
 10570bf:	add    BYTE PTR [rcx],al
 10570c1:	add    BYTE PTR [rax],al
 10570c3:	add    BYTE PTR [rax+0x70001dd],bh
 10570c9:	add    BYTE PTR [rax],al
 10570cb:	add    ah,cl
 10570cd:	fld    QWORD PTR [rcx]
 10570cf:	add    BYTE PTR [rax],cl
 10570d1:	add    BYTE PTR [rax],al
 10570d3:	add    dl,ah
 10570d5:	fld    QWORD PTR [rcx]
 10570d7:	add    BYTE PTR [rcx],cl
 10570d9:	add    BYTE PTR [rax],al
 10570db:	add    bh,bh
 10570dd:	fld    QWORD PTR [rcx]
 10570df:	add    BYTE PTR [rax],cl
 10570e1:	add    BYTE PTR [rax],al
 10570e3:	add    BYTE PTR [rdx],cl
 10570e5:	fiadd  WORD PTR [rcx]
 10570e7:	add    BYTE PTR [rdi],al
 10570e9:	add    BYTE PTR [rax],al
 10570eb:	add    BYTE PTR [rip+0x10001de],dl        # 0x20572cf
 10570f1:	add    BYTE PTR [rax],al
 10570f3:	add    BYTE PTR [rdx-0x22],cl
 10570f6:	add    DWORD PTR [rax],eax
 10570f8:	or     al,BYTE PTR [rax]
 10570fa:	add    BYTE PTR [rax],al
 10570fc:	xchg   esp,eax
 10570fd:	fild   WORD PTR [rcx]
 10570ff:	add    BYTE PTR [rbx],cl
 1057101:	add    BYTE PTR [rax],al
 1057103:	add    dl,al
 1057105:	fild   WORD PTR [rcx]
 1057107:	add    BYTE PTR [rax+rax*1],cl
 105710a:	add    BYTE PTR [rax],al
 105710c:	rcr    bh,1
 105710e:	add    DWORD PTR [rax],eax
 1057110:	or     eax,DWORD PTR [rax]
 1057112:	add    BYTE PTR [rax],al
 1057114:	fcmovnu st,st(7)
 1057116:	add    DWORD PTR [rax],eax
 1057118:	or     al,BYTE PTR [rax]
 105711a:	add    BYTE PTR [rax],al
 105711c:	or     ah,al
 105711e:	add    DWORD PTR [rax],eax
 1057120:	or     eax,0x31000000
 1057125:	loopne 0x1057128
 1057127:	add    BYTE PTR [rsi],cl
 1057129:	add    BYTE PTR [rax],al
 105712b:	add    BYTE PTR [rbx-0x20],cl
 105712e:	add    DWORD PTR [rax],eax
 1057130:	sldt   WORD PTR [rax]
 1057133:	add    BYTE PTR [rax+riz*8+0xe0001],al
 105713a:	add    BYTE PTR [rax],al
 105713c:	(bad)  
 105713d:	loopne 0x1057140
 105713f:	add    BYTE PTR [rip+0xffffffffb0000000],cl        # 0xffffffffb1057145
 1057145:	loopne 0x1057148
 1057147:	add    BYTE PTR [rdx],cl
 1057149:	add    BYTE PTR [rax],al
 105714b:	add    BYTE PTR [rcx],al
 105714d:	loope  0x1057150
 105714f:	add    BYTE PTR [rax],dl
 1057151:	add    BYTE PTR [rax],al
 1057153:	add    BYTE PTR [rcx+riz*8],bl
 1057156:	add    DWORD PTR [rax],eax
 1057158:	adc    DWORD PTR [rax],eax
 105715a:	add    BYTE PTR [rax],al
 105715c:	push   rdi
 105715d:	loope  0x1057160
 105715f:	add    BYTE PTR [rax],dl
 1057161:	add    BYTE PTR [rax],al
 1057163:	add    BYTE PTR [rdx-0x1f],ch
 1057166:	add    DWORD PTR [rax],eax
 1057168:	or     al,BYTE PTR [rax]
 105716a:	add    BYTE PTR [rax],al
 105716c:	and    ecx,0x1
 105716f:	add    BYTE PTR [rcx],al
 1057171:	add    BYTE PTR [rax],al
 1057173:	add    BYTE PTR [rbp+0x120001e1],dh
 1057179:	add    BYTE PTR [rax],al
 105717b:	add    dl,dl
 105717d:	loope  0x1057180
 105717f:	add    BYTE PTR [rcx],al
 1057181:	add    BYTE PTR [rax],al
 1057183:	add    dl,ch
 1057185:	loope  0x1057188
 1057187:	add    BYTE PTR [rax],al
 1057189:	add    BYTE PTR [rax],al
 105718b:	add    ch,dh
 105718d:	loope  0x1057190
 105718f:	add    bh,bh
 1057191:	(bad)  
 1057192:	(bad)  
 1057193:	jmp    QWORD PTR [rax]
 1057195:	loop   0x1057198
 1057197:	add    BYTE PTR [rax],al
 1057199:	add    BYTE PTR [rax],al
 105719b:	add    BYTE PTR [rcx],al
 105719d:	(bad)  
 105719e:	add    al,BYTE PTR [rax]
 10571a0:	(bad)  
 10571a1:	xor    al,BYTE PTR [rdx]
 10571a3:	push   rax
 10571a4:	add    DWORD PTR [rsi],eax
 10571a6:	add    al,BYTE PTR [rax]
 10571a8:	(bad)  
 10571a9:	xor    al,BYTE PTR [rdx]
 10571ab:	push   rax
 10571ac:	add    DWORD PTR [rsi],eax
 10571ae:	add    al,BYTE PTR [rax]
 10571b0:	(bad)  
 10571b1:	xor    al,BYTE PTR [rdx]
 10571b3:	push   rax
 10571b4:	add    DWORD PTR [rsi],eax
 10571b6:	add    al,BYTE PTR [rax]
 10571b8:	(bad)  
 10571b9:	xor    al,BYTE PTR [rdx]
 10571bb:	push   rax
 10571bc:	add    DWORD PTR [rsi],eax
 10571be:	add    al,BYTE PTR [rax]
 10571c0:	(bad)  
 10571c1:	xor    al,BYTE PTR [rdx]
 10571c3:	push   rax
 10571c4:	adc    DWORD PTR [rsp+rax*1],edx
 10571c7:	add    BYTE PTR [rbx],cl
 10571c9:	repnz add al,0x70
 10571cc:	add    esp,DWORD PTR [rax+0x2]
 10571cf:	xor    BYTE PTR [rsi+rdi*8+0x3a280003],dl
 10571d6:	add    BYTE PTR [rax],al
 10571d8:	(bad)  
 10571d9:	(bad)  
 10571da:	(bad)  
 10571db:	inc    eax
 10571dd:	mov    DWORD PTR [rax+rax*1],0x0
 10571e4:	rol    bh,1
 10571e6:	add    al,0x0
 10571e8:	add    DWORD PTR [rax],eax
 10571ea:	add    BYTE PTR [rax],al
 10571ec:	loopne 0x10571b5
 10571ee:	add    al,0x0
 10571f0:	push   rax
 10571f1:	loop   0x10571f4
 10571f3:	add    bh,bh
 10571f5:	(bad)  
 10571f6:	(bad)  
 10571f7:	inc    DWORD PTR [rcx+0x1e2]
 10571fd:	add    BYTE PTR [rax],al
 10571ff:	add    BYTE PTR [rbx+riz*8+0x1],al
 1057203:	add    BYTE PTR [rcx],al
 1057205:	add    BYTE PTR [rax],al
 1057207:	add    BYTE PTR [rdi-0x1d],ch
 105720a:	add    DWORD PTR [rax],eax
 105720c:	add    al,BYTE PTR [rax]
 105720e:	add    BYTE PTR [rax],al
 1057210:	xchg   edx,eax
 1057211:	jrcxz  0x1057214
 1057213:	add    BYTE PTR [rcx],al
 1057215:	add    BYTE PTR [rax],al
 1057217:	add    BYTE PTR [rdi],dl
 1057219:	in     al,0x1
 105721b:	add    BYTE PTR [rax],al
 105721d:	add    BYTE PTR [rax],al
 105721f:	add    BYTE PTR [rsi],ah
 1057221:	in     al,0x1
 1057223:	add    bh,bh
 1057225:	(bad)  
 1057226:	(bad)  
 1057227:	inc    DWORD PTR [rcx]
 1057229:	adc    al,0x8
 105722b:	add    BYTE PTR [rsp+riz*2],dl
 105722e:	or     BYTE PTR [rax],al
 1057230:	adc    al,0x54
 1057232:	(bad)  
 1057233:	add    BYTE PTR [rsp+rsi*1],dl
 1057236:	(bad)  
 1057237:	add    BYTE PTR [rdx+rsi*1],dl
 105723a:	adc    BYTE PTR [rax+0x1],dh
 105723d:	or     al,BYTE PTR [rax+rax*1]
 1057240:	or     ah,BYTE PTR [rdi+rax*1+0x0]
 1057244:	or     dh,BYTE PTR [rdx]
 1057246:	(bad)  
 1057247:	jo     0x105726a
 1057249:	add    eax,0x34050002
 105724e:	(bad)  
 105724f:	add    BYTE PTR [rax],dl
 1057251:	in     eax,0x1
 1057253:	add    BYTE PTR [rcx],dh
 1057255:	in     eax,0x1
 1057257:	add    BYTE PTR [rdx+rsi*2],bh
 105725a:	add    eax,0x2100
 105725f:	add    BYTE PTR [rax],dl
 1057261:	in     eax,0x1
 1057263:	add    BYTE PTR [rcx],dh
 1057265:	in     eax,0x1
 1057267:	add    BYTE PTR [rdx+rsi*2],bh
 105726a:	add    eax,0x51f1900
 105726f:	add    BYTE PTR [rip+0xd011234],cl        # 0xe0684a9
 1057275:	add    DWORD PTR [rsi],ecx
 1057277:	add    DWORD PTR [rsi],eax
 1057279:	jo     0x105727b
 105727b:	add    ah,bh
 105727d:	add    al,BYTE PTR [rax+rax*1]
 1057280:	add    DWORD PTR [rax],eax
 1057282:	add    BYTE PTR [rax],al
 1057284:	(bad)  
 1057285:	out    0x1,al
 1057287:	add    BYTE PTR [rcx-0x1ffffe1a],dl
 105728d:	repz add al,0x0
 1057290:	xchg   ecx,eax
 1057291:	out    0x1,al
 1057293:	add    BYTE PTR [rcx+0x8],ah
 1057296:	add    BYTE PTR [rax],al
 1057298:	add    DWORD PTR [rsi],eax
 105729a:	add    al,BYTE PTR [rax]
 105729c:	(bad)  
 105729d:	push   rdx
 105729e:	add    dl,BYTE PTR [rax+0x11]
 10572a1:	(bad)  
 10572a2:	or     BYTE PTR [rax],al
 10572a4:	(bad)  
 10572a5:	push   rsp
 10572a6:	adc    eax,0x14341b00
 10572ab:	add    BYTE PTR [rdi],cl
 10572ad:	ror    BYTE PTR [rbx],cl
 10572af:	loopne 0x10572ba
 10572b1:	jo     0x10572bb
 10572b3:	(bad)  
 10572b4:	xchg   esp,eax
 10572b5:	inc    BYTE PTR [rbx]
 10572b7:	add    BYTE PTR [rax+0x3a],dl
 10572ba:	add    BYTE PTR [rax],al
 10572bc:	(bad)  
 10572bd:	(bad)  
 10572be:	(bad)  
 10572bf:	inc    DWORD PTR [rax]
 10572c1:	xlat   BYTE PTR ds:[rbx]
 10572c2:	add    al,0x0
 10572c4:	add    BYTE PTR [rax],al
 10572c6:	add    BYTE PTR [rax],al
 10572c8:	loopne 0x10572a0
 10572ca:	add    al,0x0
 10572cc:	add    DWORD PTR [rax],eax
 10572ce:	add    BYTE PTR [rax],al
 10572d0:	lock (bad) 
 10572d2:	add    al,0x0
 10572d4:	add    al,BYTE PTR [rax]
 10572d6:	add    BYTE PTR [rax],al
 10572d8:	xor    bh,dl
 10572da:	add    al,0x0
 10572dc:	rex out 0x1,eax
 10572df:	add    bh,bh
 10572e1:	(bad)  
 10572e2:	(bad)  
 10572e3:	jmp    FWORD PTR [rbx-0x19]
 10572e6:	add    DWORD PTR [rax],eax
 10572e8:	add    BYTE PTR [rax],al
 10572ea:	add    BYTE PTR [rax],al
 10572ec:	xchg   ecx,eax
 10572ed:	out    0x1,eax
 10572ef:	add    BYTE PTR [rcx],al
 10572f1:	add    BYTE PTR [rax],al
 10572f3:	add    BYTE PTR [rbx+0x20001e7],dh
 10572f9:	add    BYTE PTR [rax],al
 10572fb:	add    BYTE PTR [rax+rbp*8+0x30001],cl
 1057302:	add    BYTE PTR [rax],al
 1057304:	imul   al
 1057306:	add    DWORD PTR [rax],eax
 1057308:	add    al,BYTE PTR [rax]
 105730a:	add    BYTE PTR [rax],al
 105730c:	add    ch,cl
 105730e:	add    DWORD PTR [rax],eax
 1057310:	add    DWORD PTR [rax],eax
 1057312:	add    BYTE PTR [rax],al
 1057314:	adc    ecx,ebp
 1057316:	add    DWORD PTR [rax],eax
 1057318:	add    BYTE PTR [rax],al
 105731a:	add    BYTE PTR [rax],al
 105731c:	add    DWORD PTR [rsi],eax
 105731e:	add    al,BYTE PTR [rax]
 1057320:	(bad)  
 1057321:	xor    al,BYTE PTR [rdx]
 1057323:	push   rax
 1057324:	sbb    DWORD PTR [rsi],edi
 1057326:	or     DWORD PTR [rax],eax
 1057328:	sub    eax,0x1d022934
 105732d:	add    DWORD PTR [rax],esp
 105732f:	add    cl,BYTE PTR [rax]
 1057331:	lock (bad) 
 1057333:	loopne 0x1057339
 1057335:	jo     0x105733a
 1057337:	(bad)  
 1057338:	add    dl,BYTE PTR [rax+0x0]
 105733b:	add    BYTE PTR [rax+0x780003fe],ah
 1057341:	cmp    al,BYTE PTR [rax]
 1057343:	add    dl,dh
 1057345:	adc    BYTE PTR [rax],al
 1057347:	add    bh,bh
 1057349:	(bad)  
 105734a:	(bad)  
 105734b:	call   QWORD PTR [rax]
 105734d:	fild   DWORD PTR [rax+rax*1]
 1057350:	add    BYTE PTR [rax],al
 1057352:	add    BYTE PTR [rax],al
 1057354:	lock fiadd DWORD PTR [rax+rax*1]
 1057358:	add    DWORD PTR [rax],eax
 105735a:	add    BYTE PTR [rax],al
 105735c:	add    bl,bl
 105735e:	add    al,0x0
 1057360:	add    al,BYTE PTR [rax]
 1057362:	add    BYTE PTR [rax],al
 1057364:	rex fild DWORD PTR [rax+rax*1]
 1057368:	add    eax,DWORD PTR [rax]
 105736a:	add    BYTE PTR [rax],al
 105736c:	push   rax
 105736d:	fild   DWORD PTR [rax+rax*1]
 1057370:	add    eax,DWORD PTR [rax]
 1057372:	add    BYTE PTR [rax],al
 1057374:	(bad)  
 1057375:	fild   DWORD PTR [rax+rax*1]
 1057378:	add    eax,DWORD PTR [rax]
 105737a:	add    BYTE PTR [rax],al
 105737c:	jo     0x1057359
 105737e:	add    al,0x0
 1057380:	add    eax,DWORD PTR [rax]
 1057382:	add    BYTE PTR [rax],al
 1057384:	sbb    bl,0x4
 1057387:	add    BYTE PTR [rax-0x17],al
 105738a:	add    DWORD PTR [rax],eax
 105738c:	(bad)  
 105738d:	(bad)  
 105738e:	(bad)  
 105738f:	jmp    QWORD PTR [rsi+0x10001e9]
 1057395:	add    BYTE PTR [rax],al
 1057397:	add    BYTE PTR [rcx+0x20001e9],bh
 105739d:	add    BYTE PTR [rax],al
 105739f:	add    BYTE PTR [rip+0x10001ea],ah        # 0x205758f
 10573a5:	add    BYTE PTR [rax],al
 10573a7:	add    BYTE PTR [rcx],dh
 10573a9:	(bad)  
 10573aa:	add    DWORD PTR [rax],eax
 10573ac:	add    BYTE PTR [rax],al
 10573ae:	add    BYTE PTR [rax],al
 10573b0:	ss (bad) 
 10573b2:	add    DWORD PTR [rax],eax
 10573b4:	add    al,BYTE PTR [rax]
 10573b6:	add    BYTE PTR [rax],al
 10573b8:	popf   
 10573b9:	(bad)  
 10573ba:	add    DWORD PTR [rax],eax
 10573bc:	add    DWORD PTR [rax],eax
 10573be:	add    BYTE PTR [rax],al
 10573c0:	test   eax,0x1ea
 10573c5:	add    BYTE PTR [rax],al
 10573c7:	add    BYTE PTR [rsi+0x20001ea],ch
 10573cd:	add    BYTE PTR [rax],al
 10573cf:	add    bh,al
 10573d1:	jmp    0x10573d4
 10573d3:	add    BYTE PTR [rbx],al
 10573d5:	add    BYTE PTR [rax],al
 10573d7:	add    BYTE PTR [rbx],ch
 10573d9:	in     eax,dx
 10573da:	add    DWORD PTR [rax],eax
 10573dc:	add    al,0x0
 10573de:	add    BYTE PTR [rax],al
 10573e0:	cmp    ch,ch
 10573e2:	add    DWORD PTR [rax],eax
 10573e4:	add    eax,DWORD PTR [rax]
 10573e6:	add    BYTE PTR [rax],al
 10573e8:	je     0x10573d7
 10573ea:	add    DWORD PTR [rax],eax
 10573ec:	add    eax,0x83000000
 10573f1:	in     eax,dx
 10573f2:	add    DWORD PTR [rax],eax
 10573f4:	add    eax,DWORD PTR [rax]
 10573f6:	add    BYTE PTR [rax],al
 10573f8:	mov    ebp,0x60001ed
 10573fd:	add    BYTE PTR [rax],al
 10573ff:	add    ah,cl
 1057401:	in     eax,dx
 1057402:	add    DWORD PTR [rax],eax
 1057404:	add    eax,DWORD PTR [rax]
 1057406:	add    BYTE PTR [rax],al
 1057408:	cmp    al,0xee
 105740a:	add    DWORD PTR [rax],eax
 105740c:	add    al,BYTE PTR [rax]
 105740e:	add    BYTE PTR [rax],al
 1057410:	rex.B out dx,al
 1057412:	add    DWORD PTR [rax],eax
 1057414:	add    eax,DWORD PTR [rax]
 1057416:	add    BYTE PTR [rax],al
 1057418:	imul   ebp,esi,0x70001
 105741e:	add    BYTE PTR [rax],al
 1057420:	js     0x1057410
 1057422:	add    DWORD PTR [rax],eax
 1057424:	add    eax,DWORD PTR [rax]
 1057426:	add    BYTE PTR [rax],al
 1057428:	test   dh,ch
 105742a:	add    DWORD PTR [rax],eax
 105742c:	add    al,BYTE PTR [rax]
 105742e:	add    BYTE PTR [rax],al
 1057430:	xchg   dh,ch
 1057432:	add    DWORD PTR [rax],eax
 1057434:	add    eax,DWORD PTR [rax]
 1057436:	add    BYTE PTR [rax],al
 1057438:	(bad)  
 1057439:	out    dx,al
 105743a:	add    DWORD PTR [rax],eax
 105743c:	add    al,BYTE PTR [rax]
 105743e:	add    BYTE PTR [rax],al
 1057440:	(bad)  
 1057442:	add    DWORD PTR [rax],eax
 1057444:	add    DWORD PTR [rax],eax
 1057446:	add    BYTE PTR [rax],al
 1057448:	out    0xee,al
 105744a:	add    DWORD PTR [rax],eax
 105744c:	add    BYTE PTR [rax],al
 105744e:	add    BYTE PTR [rax],al
 1057450:	jmp    0x1057440
 1057452:	add    DWORD PTR [rax],eax
 1057454:	add    al,BYTE PTR [rax]
 1057456:	add    BYTE PTR [rax],al
 1057458:	and    bh,ch
 105745a:	add    DWORD PTR [rax],eax
 105745c:	add    DWORD PTR [rax],eax
 105745e:	add    BYTE PTR [rax],al
 1057460:	sub    al,0xef
 1057462:	add    DWORD PTR [rax],eax
 1057464:	add    BYTE PTR [rax],al
 1057466:	add    BYTE PTR [rax],al
 1057468:	cs out dx,eax
 105746a:	add    DWORD PTR [rax],eax
 105746c:	add    al,BYTE PTR [rax]
 105746e:	add    BYTE PTR [rax],al
 1057470:	jbe    0x1057461
 1057472:	add    DWORD PTR [rax],eax
 1057474:	add    DWORD PTR [rax],eax
 1057476:	add    BYTE PTR [rax],al
 1057478:	(bad)  
 1057479:	out    dx,eax
 105747a:	add    DWORD PTR [rax],eax
 105747c:	add    BYTE PTR [rax],al
 105747e:	add    BYTE PTR [rax],al
 1057480:	add    DWORD PTR [rsi],eax
 1057482:	add    al,BYTE PTR [rax]
 1057484:	(bad)  
 1057485:	xor    al,BYTE PTR [rdx]
 1057487:	push   rax
 1057488:	sbb    DWORD PTR [rbx],esp
 105748a:	or     BYTE PTR [rax],al
 105748c:	and    esp,DWORD PTR [rsi+rdx*1+0x0]
 1057490:	(bad)  
 1057491:	xor    al,0x14
 1057493:	add    BYTE PTR [rbx],dl
 1057495:	repnz or al,0xf0
 1057498:	or     ah,al
 105749a:	or     BYTE PTR [rax-0x6c],dh
 105749d:	inc    BYTE PTR [rbx]
 105749f:	add    BYTE PTR [rax-0xffffc6],ah
 10574a5:	(bad)  
 10574a6:	(bad)  
 10574a7:	push   QWORD PTR [rax-0x4c]
 10574aa:	add    al,0x0
 10574ac:	add    BYTE PTR [rax],al
 10574ae:	add    BYTE PTR [rax],al
 10574b0:	xor    BYTE PTR [rsp+rax*1+0x100],dh
 10574b7:	add    BYTE PTR [rax-0x4c],al
 10574ba:	add    al,0x0
 10574bc:	add    al,BYTE PTR [rax]
 10574be:	add    BYTE PTR [rax],al
 10574c0:	push   rax
 10574c1:	mov    ah,0x4
 10574c3:	add    BYTE PTR [rbx],al
 10574c5:	add    BYTE PTR [rax],al
 10574c7:	add    BYTE PTR [rax-0x4c],ah
 10574ca:	add    al,0x0
 10574cc:	add    al,0x0
 10574ce:	add    BYTE PTR [rax],al
 10574d0:	movabs al,ds:0xb0000000050004b4
 10574d9:	mov    ah,0x4
 10574db:	add    BYTE PTR [rax+rax*1],al
 10574de:	add    BYTE PTR [rax],al
 10574e0:	shl    BYTE PTR [rsp+rax*1+0x400],0x0
 10574e8:	shl    BYTE PTR [rsp+rax*1+0x400],1
 10574ef:	add    al,ah
 10574f1:	mov    ah,0x4
 10574f3:	add    BYTE PTR [rcx],cl
 10574f5:	add    BYTE PTR [rax],al
 10574f7:	add    al,dh
 10574f9:	mov    ah,0x4
 10574fb:	add    BYTE PTR [rax+rax*1],al
 10574fe:	add    BYTE PTR [rax],al
 1057500:	add    BYTE PTR [rbp+0x40004],dh
 1057506:	add    BYTE PTR [rax],al
 1057508:	adc    BYTE PTR [rbp+0x40004],dh
 105750e:	add    BYTE PTR [rax],al
 1057510:	and    BYTE PTR [rbp+0x40004],dh
 1057516:	add    BYTE PTR [rax],al
 1057518:	xor    BYTE PTR [rbp+0x40004],dh
 105751e:	add    BYTE PTR [rax],al
 1057520:	mov    bpl,0x4
 1057523:	add    BYTE PTR [rax+rax*1],al
 1057526:	add    BYTE PTR [rax],al
 1057528:	push   rax
 1057529:	mov    ch,0x4
 105752b:	add    BYTE PTR [rax],dl
 105752d:	add    BYTE PTR [rax],al
 105752f:	add    BYTE PTR [rax-0x4b],ah
 1057532:	add    al,0x0
 1057534:	adc    DWORD PTR [rax],eax
 1057536:	add    BYTE PTR [rax],al
 1057538:	jo     0x10574ef
 105753a:	add    al,0x0
 105753c:	add    al,0x0
 105753e:	add    BYTE PTR [rax],al
 1057540:	add    BYTE PTR [rax],al
 1057542:	add    BYTE PTR [rax],al
 1057544:	adc    eax,DWORD PTR [rax]
 1057546:	add    BYTE PTR [rax],al
 1057548:	xor    BYTE PTR [rbp+0x40004],0x0
 105754f:	add    BYTE PTR [rax],al
 1057551:	add    BYTE PTR [rax],al
 1057553:	add    BYTE PTR [rbx],dl
 1057555:	add    BYTE PTR [rax],al
 1057557:	add    BYTE PTR [rax+rax*1],dl
 105755a:	add    BYTE PTR [rax],al
 105755c:	adc    eax,0x1000000
 1057561:	add    BYTE PTR [rax],al
 1057563:	add    BYTE PTR [rax+0x75],ch
 1057566:	add    eax,0x0
	...
 1057573:	add    BYTE PTR [rax+0x580004b5],dl
 1057579:	add    BYTE PTR [rax],al
 105757b:	add    al,al
 105757d:	out    dx,eax
 105757e:	add    DWORD PTR [rax],eax
 1057580:	(bad)  
 1057581:	(bad)  
 1057582:	(bad)  
 1057583:	(bad)  
 1057584:	(bad)  
 1057585:	out    dx,eax
 1057586:	add    DWORD PTR [rax],eax
 1057588:	add    DWORD PTR [rax],eax
 105758a:	add    BYTE PTR [rax],al
 105758c:	or     dh,al
 105758e:	add    DWORD PTR [rax],eax
 1057590:	add    al,BYTE PTR [rax]
 1057592:	add    BYTE PTR [rax],al
 1057594:	(bad)  
 1057595:	lock add DWORD PTR [rax],eax
 1057598:	add    eax,DWORD PTR [rax]
 105759a:	add    BYTE PTR [rax],al
 105759c:	sub    eax,esi
 105759e:	add    DWORD PTR [rax],eax
 10575a0:	add    al,0x0
 10575a2:	add    BYTE PTR [rax],al
 10575a4:	xchg   eax,esi
 10575a6:	add    DWORD PTR [rax],eax
 10575a8:	add    eax,DWORD PTR [rax]
 10575aa:	add    BYTE PTR [rax],al
 10575ac:	xchg   ebx,eax
 10575ad:	lock add DWORD PTR [rax],eax
 10575b0:	add    al,BYTE PTR [rax]
 10575b2:	add    BYTE PTR [rax],al
 10575b4:	lahf   
 10575b5:	lock add DWORD PTR [rax],eax
 10575b8:	add    DWORD PTR [rax],eax
 10575ba:	add    BYTE PTR [rax],al
 10575bc:	stos   DWORD PTR es:[rdi],eax
 10575bd:	lock add DWORD PTR [rax],eax
 10575c0:	add    BYTE PTR [rax],al
 10575c2:	add    BYTE PTR [rax],al
 10575c4:	mov    al,0xf0
 10575c6:	add    DWORD PTR [rax],eax
 10575c8:	add    al,0x0
 10575ca:	add    BYTE PTR [rax],al
 10575cc:	enter  0x1f0,0x0
 10575d0:	add    eax,0xdf000000
 10575d5:	lock add DWORD PTR [rax],eax
 10575d8:	(bad)  
 10575d9:	add    BYTE PTR [rax],al
 10575db:	add    cl,dh
 10575dd:	lock add DWORD PTR [rax],eax
 10575e0:	add    eax,0xfd000000
 10575e5:	lock add DWORD PTR [rax],eax
 10575e8:	add    al,0x0
 10575ea:	add    BYTE PTR [rax],al
 10575ec:	and    dh,cl
 10575ee:	add    DWORD PTR [rax],eax
 10575f0:	(bad)  
 10575f1:	add    BYTE PTR [rax],al
 10575f3:	add    BYTE PTR [rdi],dh
 10575f5:	icebp  
 10575f6:	add    DWORD PTR [rax],eax
 10575f8:	add    al,0x0
 10575fa:	add    BYTE PTR [rax],al
 10575fc:	fs icebp 
 10575fe:	add    DWORD PTR [rax],eax
 1057600:	or     BYTE PTR [rax],al
 1057602:	add    BYTE PTR [rax],al
 1057604:	jp     0x10575f7
 1057606:	add    DWORD PTR [rax],eax
 1057608:	add    al,0x0
 105760a:	add    BYTE PTR [rax],al
 105760c:	lahf   
 105760d:	icebp  
 105760e:	add    DWORD PTR [rax],eax
 1057610:	or     DWORD PTR [rax],eax
 1057612:	add    BYTE PTR [rax],al
 1057614:	mov    cl,0xf1
 1057616:	add    DWORD PTR [rax],eax
 1057618:	or     al,BYTE PTR [rax]
 105761a:	add    BYTE PTR [rax],al
 105761c:	shl    cl,0x1
 105761f:	add    BYTE PTR [rcx],cl
 1057621:	add    BYTE PTR [rax],al
 1057623:	add    ah,cl
 1057625:	icebp  
 1057626:	add    DWORD PTR [rax],eax
 1057628:	add    al,0x0
 105762a:	add    BYTE PTR [rax],al
 105762c:	out    dx,al
 105762d:	icebp  
 105762e:	add    DWORD PTR [rax],eax
 1057630:	or     eax,DWORD PTR [rax]
 1057632:	add    BYTE PTR [rax],al
 1057634:	add    esi,edx
 1057636:	add    DWORD PTR [rax],eax
 1057638:	add    al,0x0
 105763a:	add    BYTE PTR [rax],al
 105763c:	(bad)  
 105763d:	repnz add DWORD PTR [rax],eax
 1057640:	add    eax,DWORD PTR [rax]
 1057642:	add    BYTE PTR [rax],al
 1057644:	ins    BYTE PTR es:[rdi],dx
 1057645:	repnz add DWORD PTR [rax],eax
 1057648:	add    al,BYTE PTR [rax]
 105764a:	add    BYTE PTR [rax],al
 105764c:	js     0x1057640
 105764e:	add    DWORD PTR [rax],eax
 1057650:	add    DWORD PTR [rax],eax
 1057652:	add    BYTE PTR [rax],al
 1057654:	test   dl,dh
 1057656:	add    DWORD PTR [rax],eax
 1057658:	add    BYTE PTR [rax],al
 105765a:	add    BYTE PTR [rax],al
 105765c:	mov    edx,esi
 105765e:	add    DWORD PTR [rax],eax
 1057660:	add    al,0x0
 1057662:	add    BYTE PTR [rax],al
 1057664:	movabs al,ds:0xaf0000000c0001f2
 105766d:	repnz add DWORD PTR [rax],eax
 1057670:	add    al,0x0
 1057672:	add    BYTE PTR [rax],al
 1057674:	jmp    0x1057668
 1057676:	add    DWORD PTR [rax],eax
 1057678:	or     eax,0xfd000000
 105767d:	repnz add DWORD PTR [rax],eax
 1057680:	add    al,0x0
 1057682:	add    BYTE PTR [rax],al
 1057684:	repz add WORD PTR [rax],ax
 1057688:	add    eax,DWORD PTR [rax]
 105768a:	add    BYTE PTR [rax],al
 105768c:	jb     0x1057681
 105768e:	add    DWORD PTR [rax],eax
 1057690:	add    al,BYTE PTR [rax]
 1057692:	add    BYTE PTR [rax],al
 1057694:	jle    0x1057689
 1057696:	add    DWORD PTR [rax],eax
 1057698:	add    DWORD PTR [rax],eax
 105769a:	add    BYTE PTR [rax],al
 105769c:	mov    dh,bl
 105769e:	add    DWORD PTR [rax],eax
 10576a0:	add    BYTE PTR [rax],al
 10576a2:	add    BYTE PTR [rax],al
 10576a4:	(bad)  
 10576a5:	repz add DWORD PTR [rax],eax
 10576a8:	add    al,0x0
 10576aa:	add    BYTE PTR [rax],al
 10576ac:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 10576ad:	repz add DWORD PTR [rax],eax
 10576b0:	(bad)  
 10576b1:	add    BYTE PTR [rax],al
 10576b3:	add    BYTE PTR [rcx+0x40001f3],bh
 10576b9:	add    BYTE PTR [rax],al
 10576bb:	add    BYTE PTR [rsi],al
 10576bd:	hlt    
 10576be:	add    DWORD PTR [rax],eax
 10576c0:	sldt   WORD PTR [rax]
 10576c3:	add    BYTE PTR [rip+0x40001f4],dl        # 0x50578bd
 10576c9:	add    BYTE PTR [rax],al
 10576cb:	add    BYTE PTR [rsi-0xc],bl
 10576ce:	add    DWORD PTR [rax],eax
 10576d0:	adc    BYTE PTR [rax],al
 10576d2:	add    BYTE PTR [rax],al
 10576d4:	jno    0x10576ca
 10576d6:	add    DWORD PTR [rax],eax
 10576d8:	adc    DWORD PTR [rax],eax
 10576da:	add    BYTE PTR [rax],al
 10576dc:	xchg   ah,dh
 10576de:	add    DWORD PTR [rax],eax
 10576e0:	adc    al,BYTE PTR [rax]
 10576e2:	add    BYTE PTR [rax],al
 10576e4:	xchg   ebp,eax
 10576e5:	hlt    
 10576e6:	add    DWORD PTR [rax],eax
 10576e8:	adc    DWORD PTR [rax],eax
 10576ea:	add    BYTE PTR [rax],al
 10576ec:	movabs eax,ds:0xad000000100001f4
 10576f5:	hlt    
 10576f6:	add    DWORD PTR [rax],eax
 10576f8:	add    al,0x0
 10576fa:	add    BYTE PTR [rax],al
 10576fc:	(bad)  
 10576fd:	hlt    
 10576fe:	add    DWORD PTR [rax],eax
 1057700:	adc    eax,DWORD PTR [rax]
 1057702:	add    BYTE PTR [rax],al
 1057704:	fcomip st,st(4)
 1057706:	add    DWORD PTR [rax],eax
 1057708:	adc    al,0x0
 105770a:	add    BYTE PTR [rax],al
 105770c:	and    eax,0x130001f5
 1057711:	add    BYTE PTR [rax],al
 1057713:	add    bh,bl
 1057715:	cmc    
 1057716:	add    DWORD PTR [rax],eax
 1057718:	add    al,0x0
 105771a:	add    BYTE PTR [rax],al
 105771c:	xor    esi,esi
 105771e:	add    DWORD PTR [rax],eax
 1057720:	add    eax,DWORD PTR [rax]
 1057722:	add    BYTE PTR [rax],al
 1057724:	cmp    eax,0x20001f6
 1057729:	add    BYTE PTR [rax],al
 105772b:	add    BYTE PTR [rcx-0xa],cl
 105772e:	add    DWORD PTR [rax],eax
 1057730:	add    DWORD PTR [rax],eax
 1057732:	add    BYTE PTR [rax],al
 1057734:	push   rbp
 1057735:	test   BYTE PTR [rcx],0x0
 1057738:	add    BYTE PTR [rax],al
 105773a:	add    BYTE PTR [rax],al
 105773c:	popf   
 105773d:	mov    ch,0x4
 105773f:	add    BYTE PTR [rip+0xffffffffaf000000],dl        # 0xffffffffb0057745
 1057745:	mov    ch,0x4
 1057747:	add    BYTE PTR [rax],al
 1057749:	add    BYTE PTR [rax],al
 105774b:	add    BYTE PTR [rcx],al
 105774d:	(bad)  
 105774e:	add    al,BYTE PTR [rax]
 1057750:	(bad)  
 1057751:	xor    al,BYTE PTR [rdx]
 1057753:	push   rax
 1057754:	sbb    DWORD PTR [rdx],ecx
 1057756:	add    al,BYTE PTR [rax]
 1057758:	or     dh,BYTE PTR [rdx+0x6]
 105775b:	push   rax
 105775c:	xchg   esp,eax
 105775d:	inc    BYTE PTR [rbx]
 105775f:	add    BYTE PTR [rax+0x1100003a],ah
 1057765:	adc    eax,DWORD PTR [rdx]
 1057767:	add    BYTE PTR [rdx],cl
 1057769:	push   rdx
 105776a:	(bad)  
 105776b:	xor    BYTE PTR [rsi+rdi*8+0x3ac80003],dl
 1057772:	add    BYTE PTR [rax],al
 1057774:	(bad)  
 1057775:	(bad)  
 1057776:	(bad)  
 1057777:	jmp    QWORD PTR [rax-0x28]
 105777a:	add    al,0x0
 105777c:	nop
 105777d:	test   BYTE PTR [rcx],0x0
 1057780:	(bad)  
 1057781:	(bad)  
 1057782:	(bad)  
 1057783:	(bad)  
 1057784:	mov    ebx,0x1f6
 1057789:	add    BYTE PTR [rax],al
 105778b:	add    BYTE PTR [rcx],al
 105778d:	(bad)  
 105778e:	add    al,BYTE PTR [rax]
 1057790:	(bad)  
 1057791:	xor    al,BYTE PTR [rdx]
 1057793:	push   rax
 1057794:	adc    DWORD PTR [rbx],esp
 1057796:	or     BYTE PTR [rax],al
 1057798:	and    esi,DWORD PTR [rdx+rdx*1]
 105779b:	add    BYTE PTR [rbx],dl
 105779d:	xchg   edx,eax
 105779e:	or     al,0xf0
 10577a0:	or     ah,al
 10577a2:	or     BYTE PTR [rax+0x7],dh
 10577a5:	(bad)  
 10577a6:	(bad)  
 10577a7:	push   rax
 10577a8:	xchg   esp,eax
 10577a9:	inc    BYTE PTR [rbx]
 10577ab:	add    al,dh
 10577ad:	cmp    al,BYTE PTR [rax]
 10577af:	add    bh,bh
 10577b1:	(bad)  
 10577b2:	(bad)  
 10577b3:	push   QWORD PTR [rax]
 10577b5:	fadd   DWORD PTR [rax+rax*1]
 10577b8:	add    BYTE PTR [rax],al
 10577ba:	add    BYTE PTR [rax],al
 10577bc:	rcl    bh,0x4
 10577bf:	add    BYTE PTR [rcx],al
 10577c1:	add    BYTE PTR [rax],al
 10577c3:	add    al,dl
 10577c5:	xlat   BYTE PTR ds:[rbx]
 10577c6:	add    al,0x0
 10577c8:	add    BYTE PTR [rax],al
 10577ca:	add    BYTE PTR [rax],al
 10577cc:	rcl    bh,1
 10577ce:	add    al,0x0
 10577d0:	add    eax,DWORD PTR [rax]
 10577d2:	add    BYTE PTR [rax],al
 10577d4:	loopne 0x10577ad
 10577d6:	add    al,0x0
 10577d8:	add    eax,DWORD PTR [rax]
 10577da:	add    BYTE PTR [rax],al
 10577dc:	lock xlat BYTE PTR ds:[rbx]
 10577de:	add    al,0x0
 10577e0:	add    eax,0x0
 10577e5:	fadd   DWORD PTR [rax+rax*1]
 10577e8:	(bad)  
 10577e9:	add    BYTE PTR [rax],al
 10577eb:	add    BYTE PTR [rax],dl
 10577ed:	fadd   DWORD PTR [rax+rax*1]
 10577f0:	add    eax,0x20000000
 10577f5:	fadd   DWORD PTR [rax+rax*1]
 10577f8:	loopne 0x10577f0
 10577fa:	add    DWORD PTR [rax],eax
 10577fc:	(bad)  
 10577fd:	(bad)  
 10577fe:	(bad)  
 10577ff:	jmp    QWORD PTR [rdi]
 1057801:	test   DWORD PTR [rcx],0x100
 1057807:	add    BYTE PTR [rdi],dh
 1057809:	test   DWORD PTR [rcx],0x300
 105780f:	add    BYTE PTR [rsi-0x9],ch
 1057812:	add    DWORD PTR [rax],eax
 1057814:	add    al,0x0
 1057816:	add    BYTE PTR [rax],al
 1057818:	jl     0x1057811
 105781a:	add    DWORD PTR [rax],eax
 105781c:	add    eax,DWORD PTR [rax]
 105781e:	add    BYTE PTR [rax],al
 1057820:	xchg   ecx,eax
 1057821:	test   DWORD PTR [rcx],0x500
 1057827:	add    dl,al
 1057829:	test   DWORD PTR [rcx],0x600
 105782f:	add    dl,dl
 1057831:	test   DWORD PTR [rcx],0x700
 1057837:	add    al,ah
 1057839:	test   DWORD PTR [rcx],0x600
 105783f:	add    bl,ch
 1057841:	test   DWORD PTR [rcx],0x500
 1057847:	add    BYTE PTR [rdx],ah
 1057849:	clc    
 105784a:	add    DWORD PTR [rax],eax
 105784c:	or     BYTE PTR [rax],al
 105784e:	add    BYTE PTR [rax],al
 1057850:	xor    al,bh
 1057852:	add    DWORD PTR [rax],eax
 1057854:	add    eax,0x64000000
 1057859:	clc    
 105785a:	add    DWORD PTR [rax],eax
 105785c:	add    eax,DWORD PTR [rax]
 105785e:	add    BYTE PTR [rax],al
 1057860:	outs   dx,DWORD PTR ds:[rsi]
 1057861:	clc    
 1057862:	add    DWORD PTR [rax],eax
 1057864:	add    BYTE PTR [rax],al
 1057866:	add    BYTE PTR [rax],al
 1057868:	jno    0x1057862
 105786a:	add    DWORD PTR [rax],eax
 105786c:	add    eax,0x82000000
 1057871:	clc    
 1057872:	add    DWORD PTR [rax],eax
 1057874:	add    eax,DWORD PTR [rax]
 1057876:	add    BYTE PTR [rax],al
 1057878:	(bad)  
 1057879:	clc    
 105787a:	add    DWORD PTR [rax],eax
 105787c:	add    BYTE PTR [rax],al
 105787e:	add    BYTE PTR [rax],al
 1057880:	(bad)  
 1057881:	clc    
 1057882:	add    DWORD PTR [rax],eax
 1057884:	add    eax,0xa3000000
 1057889:	clc    
 105788a:	add    DWORD PTR [rax],eax
 105788c:	add    eax,DWORD PTR [rax]
 105788e:	add    BYTE PTR [rax],al
 1057890:	scas   al,BYTE PTR es:[rdi]
 1057891:	clc    
 1057892:	add    DWORD PTR [rax],eax
 1057894:	add    BYTE PTR [rax],al
 1057896:	add    BYTE PTR [rax],al
 1057898:	add    DWORD PTR [rsi],eax
 105789a:	add    al,BYTE PTR [rax]
 105789c:	(bad)  
 105789d:	xor    al,BYTE PTR [rdx]
 105789f:	push   rax
 10578a0:	sbb    DWORD PTR [rip+0x11c000a],esi        # 0x22178b0
 10578a6:	pop    rdi
 10578a7:	add    BYTE PTR [rip+0x9e00bf0],cl        # 0xae5849d
 10578ad:	rol    BYTE PTR [rdi],1
 10578af:	rol    BYTE PTR [rip+0x3600470],0x30        # 0x4657d26
 10578b6:	add    dl,BYTE PTR [rax-0x60]
 10578b9:	inc    BYTE PTR [rbx]
 10578bb:	add    BYTE PTR [rax],bl
 10578bd:	cmp    eax,DWORD PTR [rax]
 10578bf:	add    dl,ah
 10578c1:	add    al,BYTE PTR [rax]
 10578c3:	add    bh,bh
 10578c5:	(bad)  
 10578c6:	(bad)  
 10578c7:	jmp    QWORD PTR [rax]
 10578c9:	fld    DWORD PTR [rax+rax*1]
 10578cc:	add    BYTE PTR [rax],al
 10578ce:	add    BYTE PTR [rax],al
 10578d0:	nop
 10578d1:	fadd   DWORD PTR [rax+rax*1]
 10578d4:	add    DWORD PTR [rax],eax
 10578d6:	add    BYTE PTR [rax],al
 10578d8:	movabs al,ds:0xb0000000020004d8
 10578e1:	fadd   DWORD PTR [rax+rax*1]
 10578e4:	add    eax,DWORD PTR [rax]
 10578e6:	add    BYTE PTR [rax],al
 10578e8:	rcr    al,0x4
 10578eb:	add    BYTE PTR [rax+rax*1],al
 10578ee:	add    BYTE PTR [rax],al
 10578f0:	rcr    al,1
 10578f2:	add    al,0x0
 10578f4:	add    eax,0xe0000000
 10578f9:	fadd   DWORD PTR [rax+rax*1]
 10578fc:	(bad)  
 10578fd:	add    BYTE PTR [rax],al
 10578ff:	add    al,dh
 1057901:	fadd   DWORD PTR [rax+rax*1]
 1057904:	(bad)  
 1057905:	add    BYTE PTR [rax],al
 1057907:	add    BYTE PTR [rax],al
 1057909:	fld    DWORD PTR [rax+rax*1]
 105790c:	or     BYTE PTR [rax],al
 105790e:	add    BYTE PTR [rax],al
 1057910:	adc    cl,bl
 1057912:	add    al,0x0
 1057914:	or     DWORD PTR [rax],eax
 1057916:	add    BYTE PTR [rax],al
 1057918:	push   rax
 1057919:	fld    DWORD PTR [rax+rax*1]
 105791c:	or     DWORD PTR [rax],eax
 105791e:	add    BYTE PTR [rax],al
 1057920:	(bad)  
 1057921:	fld    DWORD PTR [rax+rax*1]
 1057924:	or     DWORD PTR [rax],eax
 1057926:	add    BYTE PTR [rax],al
 1057928:	jo     0x1057903
 105792a:	add    al,0x0
 105792c:	or     DWORD PTR [rax],eax
 105792e:	add    BYTE PTR [rax],al
 1057930:	sbb    cl,0x4
 1057933:	add    BYTE PTR [rcx],cl
 1057935:	add    BYTE PTR [rax],al
 1057937:	add    BYTE PTR [rax+0x90004d9],dl
 105793d:	add    BYTE PTR [rax],al
 105793f:	add    BYTE PTR [rax+0x90004d9],ah
 1057945:	add    BYTE PTR [rax],al
 1057947:	add    BYTE PTR [rax+0x90004d9],dh
 105794d:	add    BYTE PTR [rax],al
 105794f:	add    al,al
 1057951:	fld    DWORD PTR [rax+rax*1]
 1057954:	or     DWORD PTR [rax],eax
 1057956:	add    BYTE PTR [rax],al
 1057958:	rcr    cl,1
 105795a:	add    al,0x0
 105795c:	or     DWORD PTR [rax],eax
 105795e:	add    BYTE PTR [rax],al
 1057960:	loopne 0x105793b
 1057962:	add    al,0x0
 1057964:	or     DWORD PTR [rax],eax
 1057966:	add    BYTE PTR [rax],al
 1057968:	lock fld DWORD PTR [rax+rax*1]
 105796c:	or     DWORD PTR [rax],eax
 105796e:	add    BYTE PTR [rax],al
 1057970:	add    dl,bl
 1057972:	add    al,0x0
 1057974:	or     DWORD PTR [rax],eax
 1057976:	add    BYTE PTR [rax],al
 1057978:	adc    dl,bl
 105797a:	add    al,0x0
 105797c:	or     DWORD PTR [rax],eax
 105797e:	add    BYTE PTR [rax],al
 1057980:	and    dl,bl
 1057982:	add    al,0x0
 1057984:	or     DWORD PTR [rax],eax
 1057986:	add    BYTE PTR [rax],al
 1057988:	xor    dl,bl
 105798a:	add    al,0x0
 105798c:	or     DWORD PTR [rax],eax
 105798e:	add    BYTE PTR [rax],al
 1057990:	rex fiadd DWORD PTR [rax+rax*1]
 1057994:	loopne 0x105798e
 1057996:	add    DWORD PTR [rax],eax
 1057998:	(bad)  
 1057999:	(bad)  
 105799a:	(bad)  
 105799b:	push   QWORD PTR [rsi]
 105799d:	stc    
 105799e:	add    DWORD PTR [rax],eax
 10579a0:	add    DWORD PTR [rax],eax
 10579a2:	add    BYTE PTR [rax],al
 10579a4:	rex.B stc 
 10579a6:	add    DWORD PTR [rax],eax
 10579a8:	add    al,BYTE PTR [rax]
 10579aa:	add    BYTE PTR [rax],al
 10579ac:	rex.WR stc 
 10579ae:	add    DWORD PTR [rax],eax
 10579b0:	add    eax,DWORD PTR [rax]
 10579b2:	add    BYTE PTR [rax],al
 10579b4:	push   rcx
 10579b5:	stc    
 10579b6:	add    DWORD PTR [rax],eax
 10579b8:	add    al,0x0
 10579ba:	add    BYTE PTR [rax],al
 10579bc:	push   rsi
 10579bd:	stc    
 10579be:	add    DWORD PTR [rax],eax
 10579c0:	add    eax,0x5b000000
 10579c5:	stc    
 10579c6:	add    DWORD PTR [rax],eax
 10579c8:	(bad)  
 10579c9:	add    BYTE PTR [rax],al
 10579cb:	add    BYTE PTR [rax-0x7],ah
 10579ce:	add    DWORD PTR [rax],eax
 10579d0:	(bad)  
 10579d1:	add    BYTE PTR [rax],al
 10579d3:	add    BYTE PTR [rbp-0x7],ah
 10579d6:	add    DWORD PTR [rax],eax
 10579d8:	or     BYTE PTR [rax],al
 10579da:	add    BYTE PTR [rax],al
 10579dc:	push   0xfffffffffffffff9
 10579de:	add    DWORD PTR [rax],eax
 10579e0:	or     DWORD PTR [rax],eax
 10579e2:	add    BYTE PTR [rax],al
 10579e4:	in     eax,dx
 10579e5:	stc    
 10579e6:	add    DWORD PTR [rax],eax
 10579e8:	or     BYTE PTR [rax],al
 10579ea:	add    BYTE PTR [rax],al
 10579ec:	add    bh,dl
 10579ee:	add    DWORD PTR [rax],eax
 10579f0:	(bad)  
 10579f1:	add    BYTE PTR [rax],al
 10579f3:	add    BYTE PTR [rdi],dl
 10579f5:	cli    
 10579f6:	add    DWORD PTR [rax],eax
 10579f8:	(bad)  
 10579f9:	add    BYTE PTR [rax],al
 10579fb:	add    BYTE PTR [rdx+rdi*8],ch
 10579fe:	add    DWORD PTR [rax],eax
 1057a00:	add    eax,0x41000000
 1057a05:	cli    
 1057a06:	add    DWORD PTR [rax],eax
 1057a08:	add    al,0x0
 1057a0a:	add    BYTE PTR [rax],al
 1057a0c:	push   rsi
 1057a0d:	cli    
 1057a0e:	add    DWORD PTR [rax],eax
 1057a10:	add    eax,DWORD PTR [rax]
 1057a12:	add    BYTE PTR [rax],al
 1057a14:	imul   edi,edx,0x1
 1057a17:	add    BYTE PTR [rdx],al
 1057a19:	add    BYTE PTR [rax],al
 1057a1b:	add    BYTE PTR [rsi-0x6],dh
 1057a1e:	add    DWORD PTR [rax],eax
 1057a20:	add    DWORD PTR [rax],eax
 1057a22:	add    BYTE PTR [rax],al
 1057a24:	cmp    edx,0x1
 1057a2a:	add    BYTE PTR [rax],al
 1057a2c:	xchg   dl,bh
 1057a2e:	add    DWORD PTR [rax],eax
 1057a30:	or     DWORD PTR [rax],eax
 1057a32:	add    BYTE PTR [rax],al
 1057a34:	in     al,0xfa
 1057a36:	add    DWORD PTR [rax],eax
 1057a38:	or     al,BYTE PTR [rax]
 1057a3a:	add    BYTE PTR [rax],al
 1057a3c:	stc    
 1057a3d:	cli    
 1057a3e:	add    DWORD PTR [rax],eax
 1057a40:	or     DWORD PTR [rax],eax
 1057a42:	add    BYTE PTR [rax],al
 1057a44:	adc    al,0xfb
 1057a46:	add    DWORD PTR [rax],eax
 1057a48:	or     eax,DWORD PTR [rax]
 1057a4a:	add    BYTE PTR [rax],al
 1057a4c:	xor    bh,bl
 1057a4e:	add    DWORD PTR [rax],eax
 1057a50:	or     DWORD PTR [rax],eax
 1057a52:	add    BYTE PTR [rax],al
 1057a54:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1057a55:	cld    
 1057a56:	add    DWORD PTR [rax],eax
 1057a58:	or     al,0x0
 1057a5a:	add    BYTE PTR [rax],al
 1057a5c:	in     eax,0xfc
 1057a5e:	add    DWORD PTR [rax],eax
 1057a60:	or     DWORD PTR [rax],eax
 1057a62:	add    BYTE PTR [rax],al
 1057a64:	adc    ebp,edi
 1057a66:	add    DWORD PTR [rax],eax
 1057a68:	or     eax,0x58000000
 1057a6d:	std    
 1057a6e:	add    DWORD PTR [rax],eax
 1057a70:	or     DWORD PTR [rax],eax
 1057a72:	add    BYTE PTR [rax],al
 1057a74:	(bad)  
 1057a75:	std    
 1057a76:	add    DWORD PTR [rax],eax
 1057a78:	(bad)  
 1057a79:	add    BYTE PTR [rax],al
 1057a7b:	add    BYTE PTR [rdx+0x90001fd],bl
 1057a81:	add    BYTE PTR [rax],al
 1057a83:	add    BYTE PTR [rbp-0x1],bl
 1057a86:	add    DWORD PTR [rax],eax
 1057a88:	sldt   WORD PTR [rax]
 1057a8b:	add    BYTE PTR [rbp+0x90001ff],bl
 1057a91:	add    BYTE PTR [rax],al
 1057a93:	add    dh,al
 1057a95:	inc    DWORD PTR [rcx]
 1057a97:	add    BYTE PTR [rax],dl
 1057a99:	add    BYTE PTR [rax],al
 1057a9b:	add    al,ah
 1057a9d:	inc    DWORD PTR [rcx]
 1057a9f:	add    BYTE PTR [rcx],cl
 1057aa1:	add    BYTE PTR [rax],al
 1057aa3:	add    BYTE PTR [rdi],ch
 1057aa5:	add    BYTE PTR [rdx],al
 1057aa7:	add    BYTE PTR [rcx],dl
 1057aa9:	add    BYTE PTR [rax],al
 1057aab:	add    BYTE PTR [rcx+0x0],al
 1057aae:	add    al,BYTE PTR [rax]
 1057ab0:	or     DWORD PTR [rax],eax
 1057ab2:	add    BYTE PTR [rax],al
 1057ab4:	pop    rax
 1057ab5:	add    BYTE PTR [rdx],al
 1057ab7:	add    BYTE PTR [rdx],dl
 1057ab9:	add    BYTE PTR [rax],al
 1057abb:	add    BYTE PTR [rcx+0x9000200],dl
 1057ac1:	add    BYTE PTR [rax],al
 1057ac3:	add    BYTE PTR [rdx+rax*1+0x2],ch
 1057ac7:	add    BYTE PTR [rbx],dl
 1057ac9:	add    BYTE PTR [rax],al
 1057acb:	add    BYTE PTR [rdx+rax*1+0x90002],ch
 1057ad2:	add    BYTE PTR [rax],al
 1057ad4:	(bad)  
 1057ad5:	add    al,BYTE PTR [rdx]
 1057ad7:	add    BYTE PTR [rax+rax*1],dl
 1057ada:	add    BYTE PTR [rax],al
 1057adc:	out    dx,eax
 1057add:	add    al,BYTE PTR [rdx]
 1057adf:	add    BYTE PTR [rcx],cl
 1057ae1:	add    BYTE PTR [rax],al
 1057ae3:	add    BYTE PTR [rsi],bh
 1057ae5:	add    eax,DWORD PTR [rdx]
 1057ae7:	add    BYTE PTR [rip+0x50000000],dl        # 0x51057aed
 1057aed:	add    eax,DWORD PTR [rdx]
 1057aef:	add    BYTE PTR [rcx],cl
 1057af1:	add    BYTE PTR [rax],al
 1057af3:	add    BYTE PTR [rax],dh
 1057af5:	add    eax,0x160002
 1057afa:	add    BYTE PTR [rax],al
 1057afc:	jo     0x1057b03
 1057afe:	add    al,BYTE PTR [rax]
 1057b00:	or     DWORD PTR [rax],eax
 1057b02:	add    BYTE PTR [rax],al
 1057b04:	cdq    
 1057b05:	add    eax,0x170002
 1057b0a:	add    BYTE PTR [rax],al
 1057b0c:	mov    bl,0x5
 1057b0e:	add    al,BYTE PTR [rax]
 1057b10:	or     DWORD PTR [rax],eax
 1057b12:	add    BYTE PTR [rax],al
 1057b14:	add    al,BYTE PTR [rsi]
 1057b16:	add    al,BYTE PTR [rax]
 1057b18:	sbb    BYTE PTR [rax],al
 1057b1a:	add    BYTE PTR [rax],al
 1057b1c:	adc    al,0x6
 1057b1e:	add    al,BYTE PTR [rax]
 1057b20:	or     DWORD PTR [rax],eax
 1057b22:	add    BYTE PTR [rax],al
 1057b24:	xor    eax,DWORD PTR [rsi]
 1057b26:	add    al,BYTE PTR [rax]
 1057b28:	sbb    DWORD PTR [rax],eax
 1057b2a:	add    BYTE PTR [rax],al
 1057b2c:	rex.B (bad) 
 1057b2e:	add    al,BYTE PTR [rax]
 1057b30:	or     DWORD PTR [rax],eax
 1057b32:	add    BYTE PTR [rax],al
 1057b34:	(bad)  
 1057b35:	(bad)  
 1057b36:	add    al,BYTE PTR [rax]
 1057b38:	or     BYTE PTR [rax],al
 1057b3a:	add    BYTE PTR [rax],al
 1057b3c:	jne    0x1057b44
 1057b3e:	add    al,BYTE PTR [rax]
 1057b40:	(bad)  
 1057b41:	add    BYTE PTR [rax],al
 1057b43:	add    BYTE PTR [rdx+0x6000206],cl
 1057b49:	add    BYTE PTR [rax],al
 1057b4b:	add    BYTE PTR [rdi+0x5000206],bl
 1057b51:	add    BYTE PTR [rax],al
 1057b53:	add    BYTE PTR [rsi+rax*1+0x40002],dh
 1057b5a:	add    BYTE PTR [rax],al
 1057b5c:	leave  
 1057b5d:	(bad)  
 1057b5e:	add    al,BYTE PTR [rax]
 1057b60:	add    eax,DWORD PTR [rax]
 1057b62:	add    BYTE PTR [rax],al
 1057b64:	fiadd  WORD PTR [rsi]
 1057b66:	add    al,BYTE PTR [rax]
 1057b68:	add    al,BYTE PTR [rax]
 1057b6a:	add    BYTE PTR [rax],al
 1057b6c:	jmp    0x2057d77
 1057b71:	add    BYTE PTR [rax],al
 1057b73:	add    ah,dh
 1057b75:	(bad)  
 1057b76:	add    al,BYTE PTR [rax]
 1057b78:	add    BYTE PTR [rax],al
 1057b7a:	add    BYTE PTR [rax],al
 1057b7c:	add    DWORD PTR [rsi],eax
 1057b7e:	add    al,BYTE PTR [rax]
 1057b80:	(bad)  
 1057b81:	xor    al,BYTE PTR [rdx]
 1057b83:	push   rax
 1057b84:	adc    DWORD PTR [rdx],ebx
 1057b86:	(bad)  
 1057b87:	add    BYTE PTR [rdx],bl
 1057b89:	xor    al,0x10
 1057b8b:	add    BYTE PTR [rsi],cl
 1057b8d:	xchg   edx,eax
 1057b8e:	or     dh,BYTE PTR [rax+0x9]
 1057b91:	(bad)  
 1057b92:	or     BYTE PTR [rax-0x6c],dl
 1057b95:	inc    BYTE PTR [rbx]
 1057b97:	add    BYTE PTR [rax+0x3b],al
 1057b9a:	add    BYTE PTR [rax],al
 1057b9c:	(bad)  
 1057b9d:	(bad)  
 1057b9e:	(bad)  
 1057b9f:	push   QWORD PTR [rax-0x26]
 1057ba2:	add    al,0x0
 1057ba4:	add    BYTE PTR [rax],al
 1057ba6:	add    BYTE PTR [rax],al
 1057ba8:	(bad)  
 1057ba9:	fiadd  DWORD PTR [rax+rax*1]
 1057bac:	xor    BYTE PTR [rdi],al
 1057bae:	add    al,BYTE PTR [rax]
 1057bb0:	(bad)  
 1057bb1:	(bad)  
 1057bb2:	(bad)  
 1057bb3:	jmp    FWORD PTR [rcx+0x7]
 1057bb6:	add    al,BYTE PTR [rax]
 1057bb8:	add    DWORD PTR [rax],eax
 1057bba:	add    BYTE PTR [rax],al
 1057bbc:	cwde   
 1057bbd:	(bad)  
 1057bbe:	add    al,BYTE PTR [rax]
 1057bc0:	add    BYTE PTR [rax],al
 1057bc2:	add    BYTE PTR [rax],al
 1057bc4:	popf   
 1057bc5:	(bad)  
 1057bc6:	add    al,BYTE PTR [rax]
 1057bc8:	add    DWORD PTR [rax],eax
 1057bca:	add    BYTE PTR [rax],al
 1057bcc:	movsxd ecx,DWORD PTR [rcx]
 1057bce:	add    al,BYTE PTR [rax]
 1057bd0:	add    BYTE PTR [rax],al
 1057bd2:	add    BYTE PTR [rax],al
 1057bd4:	add    DWORD PTR [rsi],eax
 1057bd6:	add    al,BYTE PTR [rax]
 1057bd8:	(bad)  
 1057bd9:	xor    al,BYTE PTR [rdx]
 1057bdb:	push   rax
 1057bdc:	adc    DWORD PTR [rbx+rcx*1],ebp
 1057bdf:	add    BYTE PTR [rsp+rsi*1],ch
 1057be2:	(bad)  
 1057be3:	add    BYTE PTR [rcx+rax*1],bl
 1057be6:	(bad)  
 1057be7:	add    BYTE PTR [rax],dl
 1057be9:	lock (bad) 
 1057beb:	loopne 0x1057bf9
 1057bed:	ror    BYTE PTR [rdx],1
 1057bef:	ror    BYTE PTR [rax],0x70
 1057bf2:	(bad)  
 1057bf3:	(bad)  
 1057bf4:	(bad)  
 1057bf5:	push   rax
 1057bf6:	add    BYTE PTR [rax],al
 1057bf8:	xchg   esp,eax
 1057bf9:	inc    BYTE PTR [rbx]
 1057bfb:	add    BYTE PTR [rax+0x3b],ch
 1057bfe:	add    BYTE PTR [rax],al
 1057c00:	(bad)  
 1057c01:	(bad)  
 1057c02:	(bad)  
 1057c03:	call   QWORD PTR [rax+0x4df]
 1057c09:	add    BYTE PTR [rax],al
 1057c0b:	add    BYTE PTR [rax+0x4df],ah
 1057c11:	add    BYTE PTR [rax],al
 1057c13:	add    BYTE PTR [rax+0x4df],dh
 1057c19:	add    BYTE PTR [rax],al
 1057c1b:	add    al,al
 1057c1d:	fild   WORD PTR [rax+rax*1]
 1057c20:	add    eax,DWORD PTR [rax]
 1057c22:	add    BYTE PTR [rax],al
 1057c24:	rcr    bh,1
 1057c26:	add    al,0x0
 1057c28:	add    al,0x0
 1057c2a:	add    BYTE PTR [rax],al
 1057c2c:	loopne 0x1057c0d
 1057c2e:	add    al,0x0
 1057c30:	add    al,0x0
 1057c32:	add    BYTE PTR [rax],al
 1057c34:	lock fild WORD PTR [rax+rax*1]
 1057c38:	add    al,0x0
 1057c3a:	add    BYTE PTR [rax],al
 1057c3c:	add    al,ah
 1057c3e:	add    al,0x0
 1057c40:	add    al,0x0
 1057c42:	add    BYTE PTR [rax],al
 1057c44:	adc    al,ah
 1057c46:	add    al,0x0
 1057c48:	add    al,0x0
 1057c4a:	add    BYTE PTR [rax],al
 1057c4c:	and    al,ah
 1057c4e:	add    al,0x0
 1057c50:	or     DWORD PTR [rax],eax
 1057c52:	add    BYTE PTR [rax],al
 1057c54:	xor    al,ah
 1057c56:	add    al,0x0
 1057c58:	add    al,0x0
 1057c5a:	add    BYTE PTR [rax],al
 1057c5c:	rex loopne 0x1057c63
 1057c5f:	add    BYTE PTR [rax+rax*1],al
 1057c62:	add    BYTE PTR [rax],al
 1057c64:	push   rax
 1057c65:	loopne 0x1057c6b
 1057c67:	add    BYTE PTR [rax+rax*1],cl
 1057c6a:	add    BYTE PTR [rax],al
 1057c6c:	(bad)  
 1057c6d:	loopne 0x1057c73
 1057c6f:	add    BYTE PTR [rax+rax*1],al
 1057c72:	add    BYTE PTR [rax],al
 1057c74:	jo     0x1057c56
 1057c76:	add    al,0x0
 1057c78:	add    al,0x0
 1057c7a:	add    BYTE PTR [rax],al
 1057c7c:	and    al,0x4
 1057c7f:	add    BYTE PTR [rdi],cl
 1057c81:	add    BYTE PTR [rax],al
 1057c83:	add    BYTE PTR [rax+0x40004e0],dh
 1057c89:	add    BYTE PTR [rax],al
 1057c8b:	add    al,ah
 1057c8d:	loopne 0x1057c93
 1057c8f:	add    BYTE PTR [rax],al
 1057c91:	add    BYTE PTR [rax],al
 1057c93:	add    al,dh
 1057c95:	loopne 0x1057c9b
 1057c97:	add    BYTE PTR [rax-0xfffdf7],dl
 1057c9d:	(bad)  
 1057c9e:	(bad)  
 1057c9f:	call   rsp
 1057ca1:	or     DWORD PTR [rdx],eax
 1057ca3:	add    BYTE PTR [rax],al
 1057ca5:	add    BYTE PTR [rax],al
 1057ca7:	add    BYTE PTR [rsi],al
 1057ca9:	or     al,BYTE PTR [rdx]
 1057cab:	add    BYTE PTR [rcx],al
 1057cad:	add    BYTE PTR [rax],al
 1057caf:	add    BYTE PTR [rbx],ch
 1057cb1:	or     al,BYTE PTR [rdx]
 1057cb3:	add    BYTE PTR [rax],al
 1057cb5:	add    BYTE PTR [rax],al
 1057cb7:	add    BYTE PTR [rdi+0x200020a],al
 1057cbd:	add    BYTE PTR [rax],al
 1057cbf:	add    BYTE PTR [rbp+0x20a],dl
 1057cc5:	add    BYTE PTR [rax],al
 1057cc7:	add    BYTE PTR [rcx],bl
 1057cc9:	or     eax,DWORD PTR [rdx]
 1057ccb:	add    BYTE PTR [rbx],al
 1057ccd:	add    BYTE PTR [rax],al
 1057ccf:	add    BYTE PTR [rbx+rcx*1],ah
 1057cd2:	add    al,BYTE PTR [rax]
 1057cd4:	add    al,0x0
 1057cd6:	add    BYTE PTR [rax],al
 1057cd8:	(bad)  
 1057cd9:	or     eax,DWORD PTR [rdx]
 1057cdb:	add    BYTE PTR [rip+0x4d000000],al        # 0x4e057ce1
 1057ce1:	or     eax,DWORD PTR [rdx]
 1057ce3:	add    BYTE PTR [rax+rax*1],al
 1057ce6:	add    BYTE PTR [rax],al
 1057ce8:	push   0xb
 1057cea:	add    al,BYTE PTR [rax]
 1057cec:	(bad)  
 1057ced:	add    BYTE PTR [rax],al
 1057cef:	add    BYTE PTR [rax+0xb],bh
 1057cf2:	add    al,BYTE PTR [rax]
 1057cf4:	add    al,0x0
 1057cf6:	add    BYTE PTR [rax],al
 1057cf8:	pushf  
 1057cf9:	or     eax,DWORD PTR [rdx]
 1057cfb:	add    BYTE PTR [rdi],al
 1057cfd:	add    BYTE PTR [rax],al
 1057cff:	add    BYTE PTR [rdx+0x400020b],ch
 1057d05:	add    BYTE PTR [rax],al
 1057d07:	add    cl,cl
 1057d09:	or     eax,DWORD PTR [rdx]
 1057d0b:	add    BYTE PTR [rax],cl
 1057d0d:	add    BYTE PTR [rax],al
 1057d0f:	add    dh,bl
 1057d11:	or     eax,DWORD PTR [rdx]
 1057d13:	add    BYTE PTR [rax+rax*1],al
 1057d16:	add    BYTE PTR [rax],al
 1057d18:	(bad)  
 1057d1a:	add    al,BYTE PTR [rax]
 1057d1c:	or     DWORD PTR [rax],eax
 1057d1e:	add    BYTE PTR [rax],al
 1057d20:	sub    BYTE PTR [rdx+rax*1],cl
 1057d23:	add    BYTE PTR [rdx],cl
 1057d25:	add    BYTE PTR [rax],al
 1057d27:	add    BYTE PTR [rsi],dh
 1057d29:	or     al,0x2
 1057d2b:	add    BYTE PTR [rcx],cl
 1057d2d:	add    BYTE PTR [rax],al
 1057d2f:	add    BYTE PTR [rcx+0xc],al
 1057d32:	add    al,BYTE PTR [rax]
 1057d34:	add    al,0x0
 1057d36:	add    BYTE PTR [rax],al
 1057d38:	pop    rbx
 1057d39:	or     al,0x2
 1057d3b:	add    BYTE PTR [rbx],cl
 1057d3d:	add    BYTE PTR [rax],al
 1057d3f:	add    BYTE PTR [rax+0xc],dh
 1057d42:	add    al,BYTE PTR [rax]
 1057d44:	add    al,0x0
 1057d46:	add    BYTE PTR [rax],al
 1057d48:	movabs eax,ds:0xba0000000c00020c
 1057d51:	or     al,0x2
 1057d53:	add    BYTE PTR [rip+0xffffffffc8000000],cl        # 0xffffffffc9057d59
 1057d59:	or     al,0x2
 1057d5b:	add    BYTE PTR [rax+rax*1],cl
 1057d5e:	add    BYTE PTR [rax],al
 1057d60:	ror    DWORD PTR [rdx+rax*1],cl
 1057d63:	add    BYTE PTR [rax+rax*1],al
 1057d66:	add    BYTE PTR [rax],al
 1057d68:	hlt    
 1057d69:	or     al,0x2
 1057d6b:	add    BYTE PTR [rsi],cl
 1057d6d:	add    BYTE PTR [rax],al
 1057d6f:	add    BYTE PTR [rdx],al
 1057d71:	or     eax,0x40002
 1057d76:	add    BYTE PTR [rax],al
 1057d78:	and    ecx,DWORD PTR [rip+0xf0002]        # 0x1147d80
 1057d7e:	add    BYTE PTR [rax],al
 1057d80:	pop    rdi
 1057d81:	or     eax,0x100002
 1057d86:	add    BYTE PTR [rax],al
 1057d88:	mov    cl,BYTE PTR [rip+0xf0002]        # 0x1147d90
 1057d8e:	add    BYTE PTR [rax],al
 1057d90:	movabs eax,ds:0xca0000000400020d
 1057d99:	or     eax,0x110002
 1057d9e:	add    BYTE PTR [rax],al
 1057da0:	test   DWORD PTR [rsi],ecx
 1057da2:	add    al,BYTE PTR [rax]
 1057da4:	add    al,0x0
 1057da6:	add    BYTE PTR [rax],al
 1057da8:	ror    DWORD PTR [rsi],cl
 1057daa:	add    al,BYTE PTR [rax]
 1057dac:	add    eax,DWORD PTR [rax]
 1057dae:	add    BYTE PTR [rax],al
 1057db0:	fimul  WORD PTR [rsi]
 1057db2:	add    al,BYTE PTR [rax]
 1057db4:	add    BYTE PTR [rax],al
 1057db6:	add    BYTE PTR [rax],al
 1057db8:	(bad)  
 1057db9:	lar    eax,WORD PTR [rax]
 1057dbc:	adc    al,BYTE PTR [rax]
 1057dbe:	add    BYTE PTR [rax],al
 1057dc0:	adc    al,0xf
 1057dc2:	add    al,BYTE PTR [rax]
 1057dc4:	add    BYTE PTR [rax],al
 1057dc6:	add    BYTE PTR [rax],al
 1057dc8:	and    BYTE PTR [rdi],cl
 1057dca:	add    al,BYTE PTR [rax]
 1057dcc:	(bad)  
 1057dcd:	(bad)  
 1057dce:	(bad)  
 1057dcf:	inc    DWORD PTR [rcx]
 1057dd1:	(bad)  
 1057dd2:	add    al,BYTE PTR [rax]
 1057dd4:	(bad)  
 1057dd5:	xor    al,BYTE PTR [rdx]
 1057dd7:	push   rax
 1057dd8:	add    DWORD PTR [rsi],eax
 1057dda:	add    al,BYTE PTR [rax]
 1057ddc:	(bad)  
 1057ddd:	xor    al,BYTE PTR [rdx]
 1057ddf:	push   rax
 1057de0:	adc    DWORD PTR [rdx+rcx*1],ebp
 1057de3:	add    BYTE PTR [rsp+rsi*1],ch
 1057de6:	adc    al,0x0
 1057de8:	sbb    al,0x92
 1057dea:	adc    eax,0x11e013f0
 1057def:	ror    BYTE PTR [rdi],1
 1057df1:	ror    BYTE PTR [rip+0xb600c70],0x50        # 0xc658a68
 1057df8:	xchg   esp,eax
 1057df9:	inc    BYTE PTR [rbx]
 1057dfb:	add    BYTE PTR [rax-0xffffc5],dl
 1057e01:	(bad)  
 1057e02:	(bad)  
 1057e03:	inc    DWORD PTR [rax-0x11]
 1057e06:	add    al,0x0
 1057e08:	add    BYTE PTR [rax],al
 1057e0a:	add    BYTE PTR [rax],al
 1057e0c:	jo     0x1057dfd
 1057e0e:	add    al,0x0
 1057e10:	add    DWORD PTR [rax],eax
 1057e12:	add    BYTE PTR [rax],al
 1057e14:	sub    bh,0x4
 1057e17:	add    BYTE PTR [rdx],al
 1057e19:	add    BYTE PTR [rax],al
 1057e1b:	add    BYTE PTR [rax+0x20004ef],dl
 1057e21:	add    BYTE PTR [rax],al
 1057e23:	add    BYTE PTR [rax+0x20004ef],ah
 1057e29:	add    BYTE PTR [rax],al
 1057e2b:	add    BYTE PTR [rax+0x20004ef],dh
 1057e31:	add    BYTE PTR [rax],al
 1057e33:	add    al,al
 1057e35:	out    dx,eax
 1057e36:	add    al,0x0
 1057e38:	add    al,BYTE PTR [rax]
 1057e3a:	add    BYTE PTR [rax],al
 1057e3c:	shr    bh,1
 1057e3e:	add    al,0x0
 1057e40:	add    al,BYTE PTR [rax]
 1057e42:	add    BYTE PTR [rax],al
 1057e44:	loopne 0x1057e35
 1057e46:	add    al,0x0
 1057e48:	add    al,BYTE PTR [rax]
 1057e4a:	add    BYTE PTR [rax],al
 1057e4c:	lock out dx,eax
 1057e4e:	add    al,0x0
 1057e50:	push   rax
 1057e51:	lar    eax,WORD PTR [rax]
 1057e54:	(bad)  
 1057e55:	(bad)  
 1057e56:	(bad)  
 1057e57:	inc    DWORD PTR [rbp+0x20f]
 1057e5d:	add    BYTE PTR [rax],al
 1057e5f:	add    BYTE PTR [rdx+0x100020f],ch
 1057e65:	add    BYTE PTR [rax],al
 1057e67:	add    BYTE PTR [rbp+0x200020f],dh
 1057e6d:	add    BYTE PTR [rax],al
 1057e6f:	add    BYTE PTR [rdi+0x10],bh
 1057e72:	add    al,BYTE PTR [rax]
 1057e74:	add    eax,DWORD PTR [rax]
 1057e76:	add    BYTE PTR [rax],al
 1057e78:	pushf  
 1057e79:	adc    BYTE PTR [rdx],al
 1057e7b:	add    BYTE PTR [rdx],al
 1057e7d:	add    BYTE PTR [rax],al
 1057e7f:	add    dh,ah
 1057e81:	adc    BYTE PTR [rdx],al
 1057e83:	add    BYTE PTR [rax+rax*1],al
 1057e86:	add    BYTE PTR [rax],al
 1057e88:	sbb    DWORD PTR [rcx],edx
 1057e8a:	add    al,BYTE PTR [rax]
 1057e8c:	add    al,BYTE PTR [rax]
 1057e8e:	add    BYTE PTR [rax],al
 1057e90:	(bad)  
 1057e91:	adc    DWORD PTR [rdx],eax
 1057e93:	add    BYTE PTR [rip+0xffffffff9f000000],al        # 0xffffffffa0057e99
 1057e99:	adc    DWORD PTR [rdx],eax
 1057e9b:	add    BYTE PTR [rdx],al
 1057e9d:	add    BYTE PTR [rax],al
 1057e9f:	add    ah,dl
 1057ea1:	adc    DWORD PTR [rdx],eax
 1057ea3:	add    BYTE PTR [rsi],al
 1057ea5:	add    BYTE PTR [rax],al
 1057ea7:	add    cl,dh
 1057ea9:	adc    DWORD PTR [rdx],eax
 1057eab:	add    BYTE PTR [rdx],al
 1057ead:	add    BYTE PTR [rax],al
 1057eaf:	add    BYTE PTR [rdx],ch
 1057eb1:	adc    al,BYTE PTR [rdx]
 1057eb3:	add    BYTE PTR [rdi],al
 1057eb5:	add    BYTE PTR [rax],al
 1057eb7:	add    BYTE PTR [rsi+0x12],al
 1057eba:	add    al,BYTE PTR [rax]
 1057ebc:	add    al,BYTE PTR [rax]
 1057ebe:	add    BYTE PTR [rax],al
 1057ec0:	clc    
 1057ec1:	adc    al,BYTE PTR [rdx]
 1057ec3:	add    BYTE PTR [rax],cl
 1057ec5:	add    BYTE PTR [rax],al
 1057ec7:	add    BYTE PTR [rip+0x2000213],dl        # 0x30580e0
 1057ecd:	add    BYTE PTR [rax],al
 1057ecf:	add    BYTE PTR [rsi+0x13],bl
 1057ed2:	add    al,BYTE PTR [rax]
 1057ed4:	or     DWORD PTR [rax],eax
 1057ed6:	add    BYTE PTR [rax],al
 1057ed8:	jnp    0x1057eed
 1057eda:	add    al,BYTE PTR [rax]
 1057edc:	add    al,BYTE PTR [rax]
 1057ede:	add    BYTE PTR [rax],al
 1057ee0:	ds adc eax,0x10002
 1057ee6:	add    BYTE PTR [rax],al
 1057ee8:	rex.WB adc rax,0x2
 1057eee:	add    BYTE PTR [rax],al
 1057ef0:	add    DWORD PTR [rsi],eax
 1057ef2:	add    al,BYTE PTR [rax]
 1057ef4:	(bad)  
 1057ef5:	xor    al,BYTE PTR [rdx]
 1057ef7:	push   rax
 1057ef8:	adc    DWORD PTR [rdx],ebx
 1057efa:	(bad)  
 1057efb:	add    BYTE PTR [rdx],bl
 1057efd:	xor    al,0xc
 1057eff:	add    BYTE PTR [rdx+rdx*2],cl
 1057f02:	or     BYTE PTR [rax+0x7],dh
 1057f05:	(bad)  
 1057f06:	(bad)  
 1057f07:	push   rax
 1057f08:	xchg   esp,eax
 1057f09:	inc    BYTE PTR [rbx]
 1057f0b:	add    BYTE PTR [rax-0xffffc5],bh
 1057f11:	(bad)  
 1057f12:	(bad)  
 1057f13:	push   rax
 1057f15:	lock add al,0x0
 1057f18:	add    BYTE PTR [rax],al
 1057f1a:	add    BYTE PTR [rax],al
 1057f1c:	and    cl,dh
 1057f1e:	add    al,0x0
 1057f20:	add    DWORD PTR [rax],eax
 1057f22:	add    BYTE PTR [rax],al
 1057f24:	xor    cl,dh
 1057f26:	add    al,0x0
 1057f28:	adc    BYTE PTR [rip+0xffffffffffff0002],0xff        # 0x1047f31
 1057f2f:	jmp    QWORD PTR [rax+0x215]
 1057f35:	add    BYTE PTR [rax],al
 1057f37:	add    al,cl
 1057f39:	adc    eax,0x10002
 1057f3e:	add    BYTE PTR [rax],al
 1057f40:	(bad)  
 1057f41:	adc    eax,0x20002
 1057f46:	add    BYTE PTR [rax],al
 1057f48:	stc    
 1057f49:	(bad)  
 1057f4a:	add    al,BYTE PTR [rax]
 1057f4c:	add    DWORD PTR [rax],eax
 1057f4e:	add    BYTE PTR [rax],al
 1057f50:	add    eax,0x218
 1057f55:	add    BYTE PTR [rax],al
 1057f57:	add    BYTE PTR [rcx],al
 1057f59:	(bad)  
 1057f5a:	add    al,BYTE PTR [rax]
 1057f5c:	(bad)  
 1057f5d:	xor    al,BYTE PTR [rdx]
 1057f5f:	push   rax
 1057f60:	adc    DWORD PTR [rdx],esp
 1057f62:	or     BYTE PTR [rax],al
 1057f64:	and    ah,BYTE PTR [rdi+rcx*1+0x0]
 1057f68:	sbb    eax,0x18000e54
 1057f6d:	xor    al,0xc
 1057f6f:	add    BYTE PTR [rdx],cl
 1057f71:	xchg   edx,eax
 1057f72:	(bad)  
 1057f73:	jo     0x1057f09
 1057f75:	inc    BYTE PTR [rbx]
 1057f77:	add    al,ah
 1057f79:	cmp    eax,DWORD PTR [rax]
 1057f7b:	add    bh,bh
 1057f7d:	(bad)  
 1057f7e:	(bad)  
 1057f7f:	call   QWORD PTR [rax]
 1057f81:	lock add al,0x0
 1057f84:	add    BYTE PTR [rax],al
 1057f86:	add    BYTE PTR [rax],al
 1057f88:	rex
 1057f89:	lock add al,0x0
 1057f8c:	add    BYTE PTR [rax],al
 1057f8e:	add    BYTE PTR [rax],al
 1057f90:	push   rax
 1057f91:	lock add al,0x0
 1057f94:	xor    BYTE PTR [rax],bl
 1057f96:	add    al,BYTE PTR [rax]
 1057f98:	(bad)  
 1057f99:	(bad)  
 1057f9a:	(bad)  
 1057f9b:	call   FWORD PTR [rbx+0x18]
 1057f9e:	add    al,BYTE PTR [rax]
 1057fa0:	add    BYTE PTR [rax],al
 1057fa2:	add    BYTE PTR [rax],al
 1057fa4:	movabs eax,ds:0xae00000001000218
 1057fad:	sbb    BYTE PTR [rdx],al
 1057faf:	add    BYTE PTR [rax],al
 1057fb1:	add    BYTE PTR [rax],al
 1057fb3:	add    bl,dl
 1057fb5:	sbb    BYTE PTR [rdx],al
 1057fb7:	add    BYTE PTR [rdx],al
 1057fb9:	add    BYTE PTR [rax],al
 1057fbb:	add    al,ah
 1057fbd:	sbb    BYTE PTR [rdx],al
 1057fbf:	add    BYTE PTR [rax],al
 1057fc1:	add    BYTE PTR [rax],al
 1057fc3:	add    BYTE PTR [rcx],al
 1057fc5:	(bad)  
 1057fc6:	add    al,BYTE PTR [rax]
 1057fc8:	(bad)  
 1057fc9:	xor    al,BYTE PTR [rdx]
 1057fcb:	push   rax
 1057fcc:	sbb    DWORD PTR [rip+0x11c000a],esi        # 0x2217fdc
 1057fd2:	adc    eax,0xbf00d01
 1057fd7:	loopne 0x1057fe2
 1057fd9:	rol    BYTE PTR [rdi],1
 1057fdb:	rol    BYTE PTR [rip+0x3600470],0x30        # 0x4658452
 1057fe2:	add    dl,BYTE PTR [rax-0x60]
 1057fe5:	inc    BYTE PTR [rbx]
 1057fe7:	add    BYTE PTR [rax],cl
 1057fe9:	cmp    al,0x0
 1057feb:	add    BYTE PTR [rdx-0xfffff8],dl
 1057ff1:	(bad)  
 1057ff2:	(bad)  
 1057ff3:	push   QWORD PTR [rax-0x10]
 1057ff6:	add    al,0x0
 1057ff8:	add    BYTE PTR [rax],al
 1057ffa:	add    BYTE PTR [rax],al
 1057ffc:	xor    al,0x4
 1057fff:	add    bh,bh
 1058001:	(bad)  
 1058002:	(bad)  
 1058003:	inc    DWORD PTR [rax+0x20004f0]
 1058009:	add    BYTE PTR [rax],al
 105800b:	add    BYTE PTR [rax+0x30004f0],dl
 1058011:	add    BYTE PTR [rax],al
 1058013:	add    BYTE PTR [rax+0x40004f0],ah
 1058019:	add    BYTE PTR [rax],al
 105801b:	add    BYTE PTR [rax+0x50004f0],dh
 1058021:	add    BYTE PTR [rax],al
 1058023:	add    al,al
 1058025:	lock add al,0x0
 1058028:	add    eax,0xd0000000
 105802d:	lock add al,0x0
 1058030:	mov    al,0x19
 1058032:	add    al,BYTE PTR [rax]
 1058034:	(bad)  
 1058035:	(bad)  
 1058036:	(bad)  
 1058037:	jmp    FWORD PTR [rsi]
 1058039:	sbb    al,BYTE PTR [rdx]
 105803b:	add    BYTE PTR [rax],al
 105803d:	add    BYTE PTR [rax],al
 105803f:	add    BYTE PTR [rbx+0x1a],al
 1058042:	add    al,BYTE PTR [rax]
 1058044:	add    al,BYTE PTR [rax]
 1058046:	add    BYTE PTR [rax],al
 1058048:	mov    ebx,DWORD PTR [rdx]
 105804a:	add    al,BYTE PTR [rax]
 105804c:	add    eax,DWORD PTR [rax]
 105804e:	add    BYTE PTR [rax],al
 1058050:	enter  0x21a,0x0
 1058054:	(bad)  
 1058055:	(bad)  
 1058056:	(bad)  
 1058057:	dec    ebp
 1058059:	sbb    al,BYTE PTR [rdx]
 105805b:	add    BYTE PTR [rbx],al
 105805d:	add    BYTE PTR [rax],al
 105805f:	add    BYTE PTR [rcx],cl
 1058061:	sbb    eax,DWORD PTR [rdx]
 1058063:	add    BYTE PTR [rax+rax*1],al
 1058066:	add    BYTE PTR [rax],al
 1058068:	rex.RX sbb r8d,DWORD PTR [rdx]
 105806b:	add    BYTE PTR [rdx],al
 105806d:	add    BYTE PTR [rax],al
 105806f:	add    BYTE PTR [rbx+rbx*1+0x2],dl
 1058073:	add    bh,bh
 1058075:	(bad)  
 1058076:	(bad)  
 1058077:	call   FWORD PTR [rcx+0x1b]
 105807a:	add    al,BYTE PTR [rax]
 105807c:	add    al,0x0
 105807e:	add    BYTE PTR [rax],al
 1058080:	imul   ebx,DWORD PTR [rbx],0x50002
 1058086:	add    BYTE PTR [rax],al
 1058088:	enter  0x21c,0x0
 105808c:	(bad)  
 105808d:	add    BYTE PTR [rax],al
 105808f:	add    bh,dl
 1058091:	sbb    al,0x2
 1058093:	add    BYTE PTR [rip+0x22000000],al        # 0x23058099
 1058099:	sbb    eax,0x70002
 105809e:	add    BYTE PTR [rax],al
 10580a0:	xor    DWORD PTR [rip+0x50002],ebx        # 0x10a80a8
 10580a6:	add    BYTE PTR [rax],al
 10580a8:	repz sbb eax,0x40002
 10580ae:	add    BYTE PTR [rax],al
 10580b0:	call   FWORD PTR [rip+0x30002]        # 0x10880b8
 10580b6:	add    BYTE PTR [rax],al
 10580b8:	adc    DWORD PTR [rsi],ebx
 10580ba:	add    al,BYTE PTR [rax]
 10580bc:	add    al,BYTE PTR [rax]
 10580be:	add    BYTE PTR [rax],al
 10580c0:	and    ebx,DWORD PTR [rsi]
 10580c2:	add    al,BYTE PTR [rax]
 10580c4:	(bad)  
 10580c5:	(bad)  
 10580c6:	(bad)  
 10580c7:	push   QWORD PTR [rsi+rbx*1]
 10580ca:	add    al,BYTE PTR [rax]
 10580cc:	add    eax,0x6b000000
 10580d1:	(bad)  
 10580d2:	add    al,BYTE PTR [rax]
 10580d4:	add    al,0x0
 10580d6:	add    BYTE PTR [rax],al
 10580d8:	ja     0x10580f8
 10580da:	add    al,BYTE PTR [rax]
 10580dc:	add    eax,DWORD PTR [rax]
 10580de:	add    BYTE PTR [rax],al
 10580e0:	mov    DWORD PTR [rsi],ebx
 10580e2:	add    al,BYTE PTR [rax]
 10580e4:	add    al,BYTE PTR [rax]
 10580e6:	add    BYTE PTR [rax],al
 10580e8:	fwait
 10580e9:	(bad)  
 10580ea:	add    al,BYTE PTR [rax]
 10580ec:	(bad)  
 10580ed:	(bad)  
 10580ee:	(bad)  
 10580ef:	call   QWORD PTR [rcx]
 10580f1:	and    DWORD PTR [rdx],ecx
 10580f3:	add    BYTE PTR [rcx],bl
 10580f5:	add    DWORD PTR [rcx],ebp
 10580f7:	add    BYTE PTR [rip+0x9e00bf0],cl        # 0xae58ced
 10580fd:	rol    BYTE PTR [rdi],1
 10580ff:	rol    BYTE PTR [rip+0x3600470],0x30        # 0x4658576
 1058106:	add    dl,BYTE PTR [rax-0x6c]
 1058109:	inc    BYTE PTR [rbx]
 105810b:	add    BYTE PTR [rax],dh
 105810d:	cmp    al,0x0
 105810f:	add    bh,bh
 1058111:	(bad)  
 1058112:	(bad)  
 1058113:	jmp    QWORD PTR [rax+0x4ed]
 1058119:	add    BYTE PTR [rax],al
 105811b:	add    BYTE PTR [rax+0x10004ed],dh
 1058121:	add    BYTE PTR [rax],al
 1058123:	add    al,al
 1058125:	in     eax,dx
 1058126:	add    al,0x0
 1058128:	(bad)  
 1058129:	(bad)  
 105812a:	(bad)  
 105812b:	call   rax
 105812d:	in     eax,dx
 105812e:	add    al,0x0
 1058130:	add    eax,DWORD PTR [rax]
 1058132:	add    BYTE PTR [rax],al
 1058134:	loopne 0x1058123
 1058136:	add    al,0x0
 1058138:	add    al,0x0
 105813a:	add    BYTE PTR [rax],al
 105813c:	lock in eax,dx
 105813e:	add    al,0x0
 1058140:	(bad)  
 1058141:	(bad)  
 1058142:	(bad)  
 1058143:	inc    DWORD PTR [rax]
 1058145:	out    dx,al
 1058146:	add    al,0x0
 1058148:	(bad)  
 1058149:	add    BYTE PTR [rax],al
 105814b:	add    BYTE PTR [rax],dl
 105814d:	out    dx,al
 105814e:	add    al,0x0
 1058150:	(bad)  
 1058151:	add    BYTE PTR [rax],al
 1058153:	add    BYTE PTR [rax],ah
 1058155:	out    dx,al
 1058156:	add    al,0x0
 1058158:	or     BYTE PTR [rax],al
 105815a:	add    BYTE PTR [rax],al
 105815c:	xor    dh,ch
 105815e:	add    al,0x0
 1058160:	or     DWORD PTR [rax],eax
 1058162:	add    BYTE PTR [rax],al
 1058164:	out    dx,al
 1058166:	add    al,0x0
 1058168:	or     al,BYTE PTR [rax]
 105816a:	add    BYTE PTR [rax],al
 105816c:	push   rax
 105816d:	out    dx,al
 105816e:	add    al,0x0
 1058170:	or     DWORD PTR [rax],eax
 1058172:	add    BYTE PTR [rax],al
 1058174:	(bad)  
 1058175:	out    dx,al
 1058176:	add    al,0x0
 1058178:	or     DWORD PTR [rax],eax
 105817a:	add    BYTE PTR [rax],al
 105817c:	jo     0x105816c
 105817e:	add    al,0x0
 1058180:	or     eax,0x80000000
 1058185:	out    dx,al
 1058186:	add    al,0x0
 1058188:	(bad)  
 1058189:	add    BYTE PTR [rax],al
 105818b:	add    BYTE PTR [rax+0x60004ee],dl
 1058191:	add    BYTE PTR [rax],al
 1058193:	add    BYTE PTR [rax+0x100004ee],ah
 1058199:	add    BYTE PTR [rax],al
 105819b:	add    BYTE PTR [rax+0x110004ee],dh
 10581a1:	add    BYTE PTR [rax],al
 10581a3:	add    al,al
 10581a5:	out    dx,al
 10581a6:	add    al,0x0
 10581a8:	adc    BYTE PTR [rax],al
 10581aa:	add    BYTE PTR [rax],al
 10581ac:	shr    dh,0x4
 10581af:	add    BYTE PTR [rbx],dl
 10581b1:	add    BYTE PTR [rax],al
 10581b3:	add    al,dl
 10581b5:	out    dx,al
 10581b6:	add    al,0x0
 10581b8:	adc    al,0x0
 10581ba:	add    BYTE PTR [rax],al
 10581bc:	loopne 0x10581ac
 10581be:	add    al,0x0
 10581c0:	adc    eax,0xf0000000
 10581c5:	out    dx,al
 10581c6:	add    al,0x0
 10581c8:	loopne 0x10581e8
 10581ca:	add    al,BYTE PTR [rax]
 10581cc:	(bad)  
 10581cd:	(bad)  
 10581ce:	(bad)  
 10581cf:	dec    DWORD PTR [rcx+0x21f]
 10581d5:	add    BYTE PTR [rax],al
 10581d7:	add    BYTE PTR [rbx-0xfffde1],cl
 10581dd:	(bad)  
 10581de:	(bad)  
 10581df:	jmp    rcx
 10581e1:	and    DWORD PTR [rdx],eax
 10581e3:	add    BYTE PTR [rax],al
 10581e5:	add    BYTE PTR [rax],al
 10581e7:	add    BYTE PTR [rax],ch
 10581e9:	and    al,BYTE PTR [rdx]
 10581eb:	add    BYTE PTR [rcx],al
 10581ed:	add    BYTE PTR [rax],al
 10581ef:	add    BYTE PTR [rcx+0x22],bl
 10581f2:	add    al,BYTE PTR [rax]
 10581f4:	add    al,BYTE PTR [rax]
 10581f6:	add    BYTE PTR [rax],al
 10581f8:	mov    dl,0x22
 10581fa:	add    al,BYTE PTR [rax]
 10581fc:	add    DWORD PTR [rax],eax
 10581fe:	add    BYTE PTR [rax],al
 1058200:	mov    ebp,0x222
 1058205:	add    BYTE PTR [rax],al
 1058207:	add    ch,ah
 1058209:	and    al,BYTE PTR [rdx]
 105820b:	add    bh,bh
 105820d:	(bad)  
 105820e:	(bad)  
 105820f:	dec    DWORD PTR [rbx+riz*1]
 1058212:	add    al,BYTE PTR [rax]
 1058214:	add    eax,DWORD PTR [rax]
 1058216:	add    BYTE PTR [rax],al
 1058218:	and    r8d,DWORD PTR [r10]
 105821b:	add    BYTE PTR [rax+rax*1],al
 105821e:	add    BYTE PTR [rax],al
 1058220:	jae    0x1058245
 1058222:	add    al,BYTE PTR [rax]
 1058224:	add    eax,0xc6000000
 1058229:	and    eax,DWORD PTR [rdx]
 105822b:	add    BYTE PTR [rax+rax*1],al
 105822e:	add    BYTE PTR [rax],al
 1058230:	shl    DWORD PTR [rbx],1
 1058232:	add    al,BYTE PTR [rax]
 1058234:	add    eax,DWORD PTR [rax]
 1058236:	add    BYTE PTR [rax],al
 1058238:	out    dx,eax
 1058239:	and    eax,DWORD PTR [rdx]
 105823b:	add    bh,bh
 105823d:	(bad)  
 105823e:	(bad)  
 105823f:	inc    DWORD PTR [rcx+0x24]
 1058242:	add    al,BYTE PTR [rax]
 1058244:	(bad)  
 1058245:	add    BYTE PTR [rax],al
 1058247:	add    BYTE PTR [rbx+0x7000224],al
 105824d:	add    BYTE PTR [rax],al
 105824f:	add    bl,cl
 1058251:	and    al,0x2
 1058253:	add    BYTE PTR [rsi],al
 1058255:	add    BYTE PTR [rax],al
 1058257:	add    BYTE PTR [rcx+0x25],al
 105825a:	add    al,BYTE PTR [rax]
 105825c:	or     BYTE PTR [rax],al
 105825e:	add    BYTE PTR [rax],al
 1058260:	rex.WR and rax,0x90002
 1058266:	add    BYTE PTR [rax],al
 1058268:	xchg   edi,eax
 1058269:	and    eax,0xa0002
 105826e:	add    BYTE PTR [rax],al
 1058270:	mov    bh,0x25
 1058272:	add    al,BYTE PTR [rax]
 1058274:	or     eax,DWORD PTR [rax]
 1058276:	add    BYTE PTR [rax],al
 1058278:	enter  0x225,0x0
 105827c:	or     al,BYTE PTR [rax]
 105827e:	add    BYTE PTR [rax],al
 1058280:	shl    DWORD PTR [rip+0x90002],cl        # 0x10e8288
 1058286:	add    BYTE PTR [rax],al
 1058288:	sbb    ah,BYTE PTR [rsi]
 105828a:	add    al,BYTE PTR [rax]
 105828c:	or     al,0x0
 105828e:	add    BYTE PTR [rax],al
 1058290:	sub    esp,DWORD PTR [rsi]
 1058292:	add    al,BYTE PTR [rax]
 1058294:	or     DWORD PTR [rax],eax
 1058296:	add    BYTE PTR [rax],al
 1058298:	rex.R
 1058299:	add    al,BYTE PTR es:[rax]
 105829c:	or     eax,0x62000000
 10582a1:	add    al,BYTE PTR es:[rax]
 10582a4:	(bad)  
 10582a5:	add    BYTE PTR [rax],al
 10582a7:	add    BYTE PTR [rdi+0x26],ch
 10582aa:	add    al,BYTE PTR [rax]
 10582ac:	sldt   WORD PTR [rax]
 10582af:	add    al,bl
 10582b1:	add    al,BYTE PTR es:[rax]
 10582b4:	(bad)  
 10582b5:	add    BYTE PTR [rax],al
 10582b7:	add    bl,ah
 10582b9:	add    al,BYTE PTR es:[rax]
 10582bc:	or     eax,0xee000000
 10582c1:	add    al,BYTE PTR es:[rax]
 10582c4:	or     DWORD PTR [rax],eax
 10582c6:	add    BYTE PTR [rax],al
 10582c8:	or     BYTE PTR [rax],ch
 10582ca:	add    al,BYTE PTR [rax]
 10582cc:	or     BYTE PTR [rax],al
 10582ce:	add    BYTE PTR [rax],al
 10582d0:	adc    ebp,DWORD PTR [rax]
 10582d2:	add    al,BYTE PTR [rax]
 10582d4:	(bad)  
 10582d5:	add    BYTE PTR [rax],al
 10582d7:	add    BYTE PTR [rax+0x28],ch
 10582da:	add    al,BYTE PTR [rax]
 10582dc:	adc    BYTE PTR [rax],al
 10582de:	add    BYTE PTR [rax],al
 10582e0:	popf   
 10582e1:	sub    BYTE PTR [rdx],al
 10582e3:	add    BYTE PTR [rcx],dl
 10582e5:	add    BYTE PTR [rax],al
 10582e7:	add    BYTE PTR [rbp+0x13000228],bh
 10582ed:	add    BYTE PTR [rax],al
 10582ef:	add    dh,dl
 10582f1:	sub    BYTE PTR [rdx],al
 10582f3:	add    BYTE PTR [rax+rax*1],dl
 10582f6:	add    BYTE PTR [rax],al
 10582f8:	hlt    
 10582f9:	sub    BYTE PTR [rdx],al
 10582fb:	add    BYTE PTR [rip+0x3000000],dl        # 0x4058301
 1058301:	sub    DWORD PTR [rdx],eax
 1058303:	add    BYTE PTR [rsi],dl
 1058305:	add    BYTE PTR [rax],al
 1058307:	add    BYTE PTR [rdx+0x29],ch
 105830a:	add    al,BYTE PTR [rax]
 105830c:	adc    eax,0x75000000
 1058311:	sub    DWORD PTR [rdx],eax
 1058313:	add    BYTE PTR [rax+rax*1],dl
 1058316:	add    BYTE PTR [rax],al
 1058318:	sub    BYTE PTR [rcx],0x2
 105831b:	add    BYTE PTR [rbx],dl
 105831d:	add    BYTE PTR [rax],al
 105831f:	add    BYTE PTR [rdi+0x1000022a],cl
 1058325:	add    BYTE PTR [rax],al
 1058327:	add    BYTE PTR [rsi+0x600022a],ah
 105832d:	add    BYTE PTR [rax],al
 105832f:	add    BYTE PTR [rdx-0xfffdd6],dh
 1058335:	(bad)  
 1058336:	(bad)  
 1058337:	call   rax
 1058339:	sub    al,BYTE PTR [rdx]
 105833b:	add    BYTE PTR [rax],al
 105833d:	add    BYTE PTR [rax],al
 105833f:	add    BYTE PTR [rcx],cl
 1058341:	adc    al,0x6
 1058343:	add    BYTE PTR [rsp+riz*2],dl
 1058346:	(bad)  
 1058347:	add    BYTE PTR [rsp+rsi*1],dl
 105834a:	or     eax,0x10921400
 105834f:	jo     0x10582e7
 1058351:	add    eax,DWORD PTR [rax+rax*1]
 1058354:	add    DWORD PTR [rax],eax
 1058356:	add    BYTE PTR [rax],al
 1058358:	(bad)  
 1058359:	sub    eax,DWORD PTR [rdx]
 105835b:	add    BYTE PTR [rsi+0x2b],dh
 105835e:	add    al,BYTE PTR [rax]
 1058360:	xor    bl,0x4
 1058363:	add    BYTE PTR [rsi+0x2b],dh
 1058366:	add    al,BYTE PTR [rax]
 1058368:	add    DWORD PTR [rsi],eax
 105836a:	add    al,BYTE PTR [rax]
 105836c:	(bad)  
 105836d:	push   rdx
 105836e:	add    dl,BYTE PTR [rax+0x11]
 1058371:	sbb    DWORD PTR [rsi],eax
 1058373:	add    BYTE PTR [rcx],bl
 1058375:	xor    al,0x15
 1058377:	add    BYTE PTR [rip+0x57006f2],cl        # 0x6758a6f
 105837d:	(bad)  
 105837e:	add    al,0x50
 1058380:	xchg   esp,eax
 1058381:	inc    BYTE PTR [rbx]
 1058383:	add    BYTE PTR [rax+0x3c],bl
 1058386:	add    BYTE PTR [rax],al
 1058388:	(bad)  
 1058389:	(bad)  
 105838a:	(bad)  
 105838b:	inc    DWORD PTR [rax]
 105838d:	enter  0x4,0x0
 1058391:	add    BYTE PTR [rax],al
 1058393:	add    BYTE PTR [rax],dl
 1058395:	enter  0x4,0xd0
 1058399:	sub    eax,DWORD PTR [rdx]
 105839b:	add    bh,bh
 105839d:	(bad)  
 105839e:	(bad)  
 105839f:	(bad)  
 10583a0:	std    
 10583a1:	sub    eax,DWORD PTR [rdx]
 10583a3:	add    BYTE PTR [rax],al
 10583a5:	add    BYTE PTR [rax],al
 10583a7:	add    BYTE PTR [rip+0x100022c],bl        # 0x20585d9
 10583ad:	add    BYTE PTR [rax],al
 10583af:	add    BYTE PTR [rsi+0x2c],bh
 10583b2:	add    al,BYTE PTR [rax]
 10583b4:	add    BYTE PTR [rax],al
 10583b6:	add    BYTE PTR [rax],al
 10583b8:	cmp    ebp,DWORD PTR [rip+0xffffffffffff0002]        # 0x10483c0
 10583be:	(bad)  
 10583bf:	call   QWORD PTR [rcx]
 10583c1:	adc    eax,0x920c0004
 10583c6:	or     BYTE PTR [rax+0x7],dh
 10583c9:	(bad)  
 10583ca:	(bad)  
 10583cb:	xor    BYTE PTR [rsi+rdi*8+0x3c800003],dl
 10583d2:	add    BYTE PTR [rax],al
 10583d4:	(bad)  
 10583d5:	(bad)  
 10583d6:	(bad)  
 10583d7:	call   rax
 10583d9:	rol    DWORD PTR [rax+rax*1],cl
 10583dc:	add    BYTE PTR [rax],al
 10583de:	add    BYTE PTR [rax],al
 10583e0:	mov    al,0xd3
 10583e2:	add    al,0x0
 10583e4:	add    DWORD PTR [rax],eax
 10583e6:	add    BYTE PTR [rax],al
 10583e8:	rcl    bl,0x4
 10583eb:	add    BYTE PTR [rdx],al
 10583ed:	add    BYTE PTR [rax],al
 10583ef:	add    BYTE PTR [rax],al
 10583f1:	(bad)  
 10583f2:	add    al,0x0
 10583f4:	add    al,BYTE PTR [rax]
 10583f6:	add    BYTE PTR [rax],al
 10583f8:	adc    ah,dl
 10583fa:	add    al,0x0
 10583fc:	add    al,0x0
 10583fe:	add    BYTE PTR [rax],al
 1058400:	and    ah,dl
 1058402:	add    al,0x0
 1058404:	jo     0x1058433
 1058406:	add    al,BYTE PTR [rax]
 1058408:	(bad)  
 1058409:	(bad)  
 105840a:	(bad)  
 105840b:	dec    DWORD PTR [rsi+0x22d]
 1058411:	add    BYTE PTR [rax],al
 1058413:	add    BYTE PTR [rdx+0x100022d],ah
 1058419:	add    BYTE PTR [rax],al
 105841b:	add    BYTE PTR [rsi+0x200022d],ch
 1058421:	add    BYTE PTR [rax],al
 1058423:	add    bl,dl
 1058425:	sub    eax,0x30002
 105842a:	add    BYTE PTR [rax],al
 105842c:	jmp    0x305865e
 1058431:	add    BYTE PTR [rax],al
 1058433:	add    BYTE PTR [rbx],al
 1058435:	add    al,BYTE PTR cs:[rax]
 1058438:	add    al,0x0
 105843a:	add    BYTE PTR [rax],al
 105843c:	sub    al,0x2e
 105843e:	add    al,BYTE PTR [rax]
 1058440:	add    eax,0x68000000
 1058445:	add    al,BYTE PTR cs:[rax]
 1058448:	add    al,0x0
 105844a:	add    BYTE PTR [rax],al
 105844c:	mov    dh,0x2e
 105844e:	add    al,BYTE PTR [rax]
 1058450:	add    al,BYTE PTR [rax]
 1058452:	add    BYTE PTR [rax],al
 1058454:	ret    0x22e
 1058457:	add    BYTE PTR [rcx],al
 1058459:	add    BYTE PTR [rax],al
 105845b:	add    dh,cl
 105845d:	add    al,BYTE PTR cs:[rax]
 1058460:	add    BYTE PTR [rax],al
 1058462:	add    BYTE PTR [rax],al
 1058464:	add    DWORD PTR [rsi],eax
 1058466:	add    al,BYTE PTR [rax]
 1058468:	(bad)  
 1058469:	xor    al,BYTE PTR [rdx]
 105846b:	push   rax
 105846c:	adc    DWORD PTR [rip+0x64250008],esp        # 0x652a847a
 1058472:	adc    BYTE PTR [rax],al
 1058474:	sbb    eax,0x10000e34
 1058479:	xchg   edx,eax
 105847a:	or     eax,esp
 105847c:	(bad)  
 105847d:	jo     0x1058485
 105847f:	push   rax
 1058480:	xchg   esp,eax
 1058481:	inc    BYTE PTR [rbx]
 1058483:	add    BYTE PTR [rax-0xffffc4],ch
 1058489:	(bad)  
 105848a:	(bad)  
 105848b:	inc    DWORD PTR [rax-0x2c]
 105848e:	add    al,0x0
 1058490:	add    BYTE PTR [rax],al
 1058492:	add    BYTE PTR [rax],al
 1058494:	jo     0x105846a
 1058496:	add    al,0x0
 1058498:	add    DWORD PTR [rax],eax
 105849a:	add    BYTE PTR [rax],al
 105849c:	adc    ah,0x4
 105849f:	add    BYTE PTR [rdx],al
 10584a1:	add    BYTE PTR [rax],al
 10584a3:	add    BYTE PTR [rax+0x30004d4],dh
 10584a9:	add    BYTE PTR [rax],al
 10584ab:	add    al,ah
 10584ad:	(bad)  
 10584ae:	add    al,0x0
 10584b0:	add    al,0x0
 10584b2:	add    BYTE PTR [rax],al
 10584b4:	adc    ch,dl
 10584b6:	add    al,0x0
 10584b8:	add    DWORD PTR [rax],eax
 10584ba:	add    BYTE PTR [rax],al
 10584bc:	rex (bad) 
 10584be:	add    al,0x0
 10584c0:	(bad)  
 10584c1:	add    BYTE PTR [rax],al
 10584c3:	add    BYTE PTR [rax-0x2b],dh
 10584c6:	add    al,0x0
 10584c8:	(bad)  
 10584c9:	add    BYTE PTR [rax],al
 10584cb:	add    BYTE PTR [rax+0x80004d5],ah
 10584d1:	add    BYTE PTR [rax],al
 10584d3:	add    al,dl
 10584d5:	(bad)  
 10584d6:	add    al,0x0
 10584d8:	add    DWORD PTR [rax],eax
 10584da:	add    BYTE PTR [rax],al
 10584dc:	loopne 0x10584b3
 10584de:	add    al,0x0
 10584e0:	or     al,BYTE PTR [rax]
 10584e2:	add    BYTE PTR [rax],al
 10584e4:	adc    dh,dl
 10584e6:	add    al,0x0
 10584e8:	or     eax,DWORD PTR [rax]
 10584ea:	add    BYTE PTR [rax],al
 10584ec:	rex (bad) 
 10584ee:	add    al,0x0
 10584f0:	or     al,0x0
 10584f2:	add    BYTE PTR [rax],al
 10584f4:	jo     0x10584cc
 10584f6:	add    al,0x0
 10584f8:	lock add al,BYTE PTR cs:[rax]
 10584fc:	(bad)  
 10584fd:	(bad)  
 10584fe:	(bad)  
 10584ff:	call   FWORD PTR [rsi]
 1058501:	(bad)  
 1058502:	add    al,BYTE PTR [rax]
 1058504:	add    BYTE PTR [rax],al
 1058506:	add    BYTE PTR [rax],al
 1058508:	rex.XB (bad) 
 105850a:	add    al,BYTE PTR [rax]
 105850c:	add    DWORD PTR [rax],eax
 105850e:	add    BYTE PTR [rax],al
 1058510:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1058511:	(bad)  
 1058512:	add    al,BYTE PTR [rax]
 1058514:	add    al,BYTE PTR [rax]
 1058516:	add    BYTE PTR [rax],al
 1058518:	lods   eax,DWORD PTR ds:[rsi]
 1058519:	(bad)  
 105851a:	add    al,BYTE PTR [rax]
 105851c:	add    DWORD PTR [rax],eax
 105851e:	add    BYTE PTR [rax],al
 1058520:	mov    bh,0x2f
 1058522:	add    al,BYTE PTR [rax]
 1058524:	add    eax,DWORD PTR [rax]
 1058526:	add    BYTE PTR [rax],al
 1058528:	shr    BYTE PTR [rdi],cl
 105852a:	add    al,BYTE PTR [rax]
 105852c:	add    al,0x0
 105852e:	add    BYTE PTR [rax],al
 1058530:	hlt    
 1058531:	(bad)  
 1058532:	add    al,BYTE PTR [rax]
 1058534:	add    eax,0x10000000
 1058539:	xor    BYTE PTR [rdx],al
 105853b:	add    BYTE PTR [rax+rax*1],al
 105853e:	add    BYTE PTR [rax],al
 1058540:	xor    BYTE PTR es:[rdx],al
 1058543:	add    BYTE PTR [rbx],al
 1058545:	add    BYTE PTR [rax],al
 1058547:	add    BYTE PTR [rax+rsi*1],bh
 105854a:	add    al,BYTE PTR [rax]
 105854c:	add    al,BYTE PTR [rax]
 105854e:	add    BYTE PTR [rax],al
 1058550:	push   rdx
 1058551:	xor    BYTE PTR [rdx],al
 1058553:	add    BYTE PTR [rcx],al
 1058555:	add    BYTE PTR [rax],al
 1058557:	add    BYTE PTR [rax+0x6000230],al
 105855d:	add    BYTE PTR [rax],al
 105855f:	add    BYTE PTR [rdi+0x1000230],al
 1058565:	add    BYTE PTR [rax],al
 1058567:	add    BYTE PTR [rax+0x7000230],bl
 105856d:	add    BYTE PTR [rax],al
 105856f:	add    BYTE PTR [rdx+0x8000230],bh
 1058575:	add    BYTE PTR [rax],al
 1058577:	add    cl,ah
 1058579:	xor    BYTE PTR [rdx],al
 105857b:	add    BYTE PTR [rcx],cl
 105857d:	add    BYTE PTR [rax],al
 105857f:	add    al,bh
 1058581:	xor    BYTE PTR [rdx],al
 1058583:	add    BYTE PTR [rax],cl
 1058585:	add    BYTE PTR [rax],al
 1058587:	add    BYTE PTR [rbx],al
 1058589:	xor    DWORD PTR [rdx],eax
 105858b:	add    BYTE PTR [rdi],al
 105858d:	add    BYTE PTR [rax],al
 105858f:	add    BYTE PTR [rdx],bl
 1058591:	xor    DWORD PTR [rdx],eax
 1058593:	add    BYTE PTR [rsi],al
 1058595:	add    BYTE PTR [rax],al
 1058597:	add    BYTE PTR [rcx],dh
 1058599:	xor    DWORD PTR [rdx],eax
 105859b:	add    BYTE PTR [rcx],al
 105859d:	add    BYTE PTR [rax],al
 105859f:	add    BYTE PTR [rsi+0x31],bh
 10585a2:	add    al,BYTE PTR [rax]
 10585a4:	or     al,BYTE PTR [rax]
 10585a6:	add    BYTE PTR [rax],al
 10585a8:	test   DWORD PTR [rcx],esi
 10585aa:	add    al,BYTE PTR [rax]
 10585ac:	add    DWORD PTR [rax],eax
 10585ae:	add    BYTE PTR [rax],al
 10585b0:	(bad)  
 10585b1:	xor    DWORD PTR [rdx],eax
 10585b3:	add    BYTE PTR [rbx],cl
 10585b5:	add    BYTE PTR [rax],al
 10585b7:	add    BYTE PTR [rdx+0xc000231],ch
 10585bd:	add    BYTE PTR [rax],al
 10585bf:	add    ah,cl
 10585c1:	xor    DWORD PTR [rdx],eax
 10585c3:	add    BYTE PTR [rip+0xffffffffe8000000],cl        # 0xffffffffe90585c9
 10585c9:	xor    DWORD PTR [rdx],eax
 10585cb:	add    BYTE PTR [rax+rax*1],cl
 10585ce:	add    BYTE PTR [rax],al
 10585d0:	add    BYTE PTR [rdx],dh
 10585d2:	add    al,BYTE PTR [rax]
 10585d4:	or     eax,DWORD PTR [rax]
 10585d6:	add    BYTE PTR [rax],al
 10585d8:	sbb    BYTE PTR [rdx],dh
 10585da:	add    al,BYTE PTR [rax]
 10585dc:	or     al,BYTE PTR [rax]
 10585de:	add    BYTE PTR [rax],al
 10585e0:	xor    BYTE PTR [rdx],dh
 10585e2:	add    al,BYTE PTR [rax]
 10585e4:	add    DWORD PTR [rax],eax
 10585e6:	add    BYTE PTR [rax],al
 10585e8:	rex.W xor al,BYTE PTR [rdx]
 10585eb:	add    BYTE PTR [rax],al
 10585ed:	add    BYTE PTR [rax],al
 10585ef:	add    BYTE PTR [rcx],al
 10585f1:	(bad)  
 10585f2:	add    al,BYTE PTR [rax]
 10585f4:	(bad)  
 10585f5:	xor    al,BYTE PTR [rdx]
 10585f7:	push   rax
 10585f8:	add    DWORD PTR [rsi],eax
 10585fa:	add    al,BYTE PTR [rax]
 10585fc:	(bad)  
 10585fd:	xor    al,BYTE PTR [rdx]
 10585ff:	push   rax
 1058600:	add    DWORD PTR [rsi],eax
 1058602:	add    al,BYTE PTR [rax]
 1058604:	(bad)  
 1058605:	xor    al,BYTE PTR [rdx]
 1058607:	push   rax
 1058608:	add    DWORD PTR [rsi],eax
 105860a:	add    al,BYTE PTR [rax]
 105860c:	(bad)  
 105860d:	xor    al,BYTE PTR [rdx]
 105860f:	push   rax
 1058610:	add    DWORD PTR [rsi],eax
 1058612:	add    al,BYTE PTR [rax]
 1058614:	(bad)  
 1058615:	xor    al,BYTE PTR [rdx]
 1058617:	push   rax
 1058618:	add    DWORD PTR [rsi],eax
 105861a:	add    al,BYTE PTR [rax]
 105861c:	(bad)  
 105861d:	xor    al,BYTE PTR [rdx]
 105861f:	push   rax
 1058620:	add    DWORD PTR [rsi],eax
 1058622:	add    al,BYTE PTR [rax]
 1058624:	(bad)  
 1058625:	xor    al,BYTE PTR [rdx]
 1058627:	push   rax
 1058628:	add    DWORD PTR [rsi],eax
 105862a:	add    al,BYTE PTR [rax]
 105862c:	(bad)  
 105862d:	xor    al,BYTE PTR [rdx]
 105862f:	push   rax
 1058630:	add    DWORD PTR [rsi],eax
 1058632:	add    al,BYTE PTR [rax]
 1058634:	(bad)  
 1058635:	xor    al,BYTE PTR [rdx]
 1058637:	push   rax
 1058638:	add    DWORD PTR [rsi],eax
 105863a:	add    al,BYTE PTR [rax]
 105863c:	(bad)  
 105863d:	xor    al,BYTE PTR [rdx]
 105863f:	push   rax
 1058640:	add    DWORD PTR [rsi],eax
 1058642:	add    al,BYTE PTR [rax]
 1058644:	(bad)  
 1058645:	xor    al,BYTE PTR [rdx]
 1058647:	push   rax
 1058648:	add    DWORD PTR [rsi],eax
 105864a:	add    al,BYTE PTR [rax]
 105864c:	(bad)  
 105864d:	xor    al,BYTE PTR [rdx]
 105864f:	push   rax
 1058650:	adc    DWORD PTR [rdx],esp
 1058652:	or     DWORD PTR [rax],eax
 1058654:	and    ah,BYTE PTR [rax+rbx*1+0x0]
 1058658:	(bad)  
 1058659:	xor    al,0x17
 105865b:	add    BYTE PTR [rdx],dl
 105865d:	add    DWORD PTR [rdx],edx
 105865f:	add    BYTE PTR [rdi],al
 1058661:	lock add eax,0x500470
 1058667:	add    BYTE PTR [rsi+rdi*8+0x3cd00003],dl
 105866e:	add    BYTE PTR [rax],al
 1058670:	(bad)  
 1058671:	(bad)  
 1058672:	(bad)  
 1058673:	call   QWORD PTR [rax-0x1e]
 1058676:	add    al,0x0
 1058678:	add    BYTE PTR [rax],al
 105867a:	add    BYTE PTR [rax],al
 105867c:	(bad)  
 105867d:	loop   0x1058683
 105867f:	add    BYTE PTR [rcx],al
 1058681:	add    BYTE PTR [rax],al
 1058683:	add    BYTE PTR [rax-0x1e],dh
 1058686:	add    al,0x0
 1058688:	add    al,BYTE PTR [rax]
 105868a:	add    BYTE PTR [rax],al
 105868c:	and    dl,0x4
 105868f:	add    BYTE PTR [rbx],al
 1058691:	add    BYTE PTR [rax],al
 1058693:	add    BYTE PTR [rax+0x40004e2],dl
 1058699:	add    BYTE PTR [rax],al
 105869b:	add    BYTE PTR [rax+0x40004e2],ah
 10586a1:	add    BYTE PTR [rax],al
 10586a3:	add    BYTE PTR [rax+0x40004e2],dh
 10586a9:	add    BYTE PTR [rax],al
 10586ab:	add    al,al
 10586ad:	loop   0x10586b3
 10586af:	add    BYTE PTR [rdi],al
 10586b1:	add    BYTE PTR [rax],al
 10586b3:	add    al,dh
 10586b5:	loop   0x10586bb
 10586b7:	add    BYTE PTR [rax+rax*1],al
 10586ba:	add    BYTE PTR [rax],al
 10586bc:	and    bl,ah
 10586be:	add    al,0x0
 10586c0:	or     DWORD PTR [rax],eax
 10586c2:	add    BYTE PTR [rax],al
 10586c4:	push   rax
 10586c5:	jrcxz  0x10586cb
 10586c7:	add    BYTE PTR [rax-0xfffdce],al
 10586cd:	(bad)  
 10586ce:	(bad)  
 10586cf:	inc    ecx
 10586d1:	xor    al,BYTE PTR [rdx]
 10586d3:	add    BYTE PTR [rax],al
 10586d5:	add    BYTE PTR [rax],al
 10586d7:	add    ah,cl
 10586d9:	xor    al,BYTE PTR [rdx]
 10586db:	add    BYTE PTR [rcx],al
 10586dd:	add    BYTE PTR [rax],al
 10586df:	add    bh,dl
 10586e1:	xor    al,BYTE PTR [rdx]
 10586e3:	add    BYTE PTR [rdx],al
 10586e5:	add    BYTE PTR [rax],al
 10586e7:	add    ch,ah
 10586e9:	xor    al,BYTE PTR [rdx]
 10586eb:	add    BYTE PTR [rbx],al
 10586ed:	add    BYTE PTR [rax],al
 10586ef:	add    ah,dh
 10586f1:	xor    al,BYTE PTR [rdx]
 10586f3:	add    BYTE PTR [rax+rax*1],al
 10586f6:	add    BYTE PTR [rax],al
 10586f8:	sbb    al,0x33
 10586fa:	add    al,BYTE PTR [rax]
 10586fc:	add    eax,0x2a000000
 1058701:	xor    eax,DWORD PTR [rdx]
 1058703:	add    BYTE PTR [rax+rax*1],al
 1058706:	add    BYTE PTR [rax],al
 1058708:	test   eax,0x6000233
 105870d:	add    BYTE PTR [rax],al
 105870f:	add    BYTE PTR [rdi+0x4000233],dh
 1058715:	add    BYTE PTR [rax],al
 1058717:	add    BYTE PTR [rcx],dl
 1058719:	xor    al,0x2
 105871b:	add    BYTE PTR [rdi],al
 105871d:	add    BYTE PTR [rax],al
 105871f:	add    BYTE PTR [rax],bl
 1058721:	xor    al,0x2
 1058723:	add    BYTE PTR [rax+rax*1],al
 1058726:	add    BYTE PTR [rax],al
 1058728:	and    esi,DWORD PTR [rdx+rax*1]
 105872b:	add    BYTE PTR [rax],cl
 105872d:	add    BYTE PTR [rax],al
 105872f:	add    BYTE PTR [rbp+0x34],cl
 1058732:	add    al,BYTE PTR [rax]
 1058734:	(bad)  
 1058735:	add    BYTE PTR [rax],al
 1058737:	add    BYTE PTR [rbx+0x34],ah
 105873a:	add    al,BYTE PTR [rax]
 105873c:	add    al,0x0
 105873e:	add    BYTE PTR [rax],al
 1058740:	mov    dh,BYTE PTR [rdx+rax*1]
 1058743:	add    BYTE PTR [rcx],cl
 1058745:	add    BYTE PTR [rax],al
 1058747:	add    BYTE PTR [rcx+0x4000234],dl
 105874d:	add    BYTE PTR [rax],al
 105874f:	add    BYTE PTR [rsp+rsi*1+0xa0002],bl
 1058756:	add    BYTE PTR [rax],al
 1058758:	(bad)  
 1058759:	xor    al,0x2
 105875b:	add    BYTE PTR [rcx],cl
 105875d:	add    BYTE PTR [rax],al
 105875f:	add    ah,bl
 1058761:	xor    al,0x2
 1058763:	add    BYTE PTR [rax+rax*1],al
 1058766:	add    BYTE PTR [rax],al
 1058768:	or     DWORD PTR [rsi],esi
 105876a:	add    al,BYTE PTR [rax]
 105876c:	add    eax,DWORD PTR [rax]
 105876e:	add    BYTE PTR [rax],al
 1058770:	adc    al,0x36
 1058772:	add    al,BYTE PTR [rax]
 1058774:	add    al,BYTE PTR [rax]
 1058776:	add    BYTE PTR [rax],al
 1058778:	(bad)  
 1058779:	add    al,BYTE PTR ss:[rax]
 105877c:	add    DWORD PTR [rax],eax
 105877e:	add    BYTE PTR [rax],al
 1058780:	sub    dh,BYTE PTR [rsi]
 1058782:	add    al,BYTE PTR [rax]
 1058784:	add    BYTE PTR [rax],al
 1058786:	add    BYTE PTR [rax],al
 1058788:	xor    eax,0xff000236
 105878d:	(bad)  
 105878e:	(bad)  
 105878f:	inc    DWORD PTR [rcx]
 1058791:	(bad)  
 1058792:	add    al,BYTE PTR [rax]
 1058794:	(bad)  
 1058795:	xor    al,BYTE PTR [rdx]
 1058797:	push   rax
 1058798:	add    DWORD PTR [rsi],eax
 105879a:	add    al,BYTE PTR [rax]
 105879c:	(bad)  
 105879d:	xor    al,BYTE PTR [rdx]
 105879f:	push   rax
 10587a0:	add    DWORD PTR [rsi],eax
 10587a2:	add    al,BYTE PTR [rax]
 10587a4:	(bad)  
 10587a5:	xor    al,BYTE PTR [rdx]
 10587a7:	push   rax
 10587a8:	add    DWORD PTR [rsi],eax
 10587aa:	add    al,BYTE PTR [rax]
 10587ac:	(bad)  
 10587ad:	xor    al,BYTE PTR [rdx]
 10587af:	push   rax
 10587b0:	adc    DWORD PTR [rbx],esp
 10587b2:	or     DWORD PTR [rax],eax
 10587b4:	and    esi,DWORD PTR [rax+rbx*1+0x0]
 10587b8:	(bad)  
 10587b9:	xor    al,0x17
 10587bb:	add    BYTE PTR [rbx],dl
 10587bd:	add    DWORD PTR [rdx],edx
 10587bf:	add    BYTE PTR [rax],cl
 10587c1:	loopne 0x10587c9
 10587c3:	rol    BYTE PTR [rax+rdx*2],0x0
 10587c7:	add    BYTE PTR [rsi+rdi*8+0x3cf80003],dl
 10587ce:	add    BYTE PTR [rax],al
 10587d0:	(bad)  
 10587d1:	(bad)  
 10587d2:	(bad)  
 10587d3:	inc    DWORD PTR [rax-0x1f]
 10587d6:	add    al,0x0
 10587d8:	add    BYTE PTR [rax],al
 10587da:	add    BYTE PTR [rax],al
 10587dc:	push   rax
 10587dd:	loope  0x10587e3
 10587df:	add    BYTE PTR [rcx],al
 10587e1:	add    BYTE PTR [rax],al
 10587e3:	add    BYTE PTR [rax-0x1f],ah
 10587e6:	add    al,0x0
 10587e8:	add    al,BYTE PTR [rax]
 10587ea:	add    BYTE PTR [rax],al
 10587ec:	jo     0x10587cf
 10587ee:	add    al,0x0
 10587f0:	add    eax,DWORD PTR [rax]
 10587f2:	add    BYTE PTR [rax],al
 10587f4:	and    cl,0x4
 10587f7:	add    BYTE PTR [rbx],al
 10587f9:	add    BYTE PTR [rax],al
 10587fb:	add    BYTE PTR [rax+0x50004e1],dl
 1058801:	add    BYTE PTR [rax],al
 1058803:	add    al,al
 1058805:	loope  0x105880b
 1058807:	add    BYTE PTR [rbx],al
 1058809:	add    BYTE PTR [rax],al
 105880b:	add    al,dh
 105880d:	loope  0x1058813
 105880f:	add    BYTE PTR [rdi],al
 1058811:	add    BYTE PTR [rax],al
 1058813:	add    BYTE PTR [rax],ah
 1058815:	loop   0x105881b
 1058817:	add    BYTE PTR [rax+0x36],ah
 105881a:	add    al,BYTE PTR [rax]
 105881c:	(bad)  
 105881d:	(bad)  
 105881e:	(bad)  
 105881f:	jmp    QWORD PTR [rdx+0x236]
 1058825:	add    BYTE PTR [rax],al
 1058827:	add    BYTE PTR [rbp+0x1000236],ch
 105882d:	add    BYTE PTR [rax],al
 105882f:	add    BYTE PTR [rax+0x2000236],bh
 1058835:	add    BYTE PTR [rax],al
 1058837:	add    dh,al
 1058839:	add    al,BYTE PTR ss:[rax]
 105883c:	add    eax,DWORD PTR [rax]
 105883e:	add    BYTE PTR [rax],al
 1058840:	push   rbp
 1058841:	(bad)  
 1058842:	add    al,BYTE PTR [rax]
 1058844:	add    al,0x0
 1058846:	add    BYTE PTR [rax],al
 1058848:	movsxd esi,DWORD PTR [rdi]
 105884a:	add    al,BYTE PTR [rax]
 105884c:	add    eax,DWORD PTR [rax]
 105884e:	add    BYTE PTR [rax],al
 1058850:	xchg   ebp,eax
 1058851:	(bad)  
 1058852:	add    al,BYTE PTR [rax]
 1058854:	add    eax,0x9c000000
 1058859:	(bad)  
 105885a:	add    al,BYTE PTR [rax]
 105885c:	add    eax,DWORD PTR [rax]
 105885e:	add    BYTE PTR [rax],al
 1058860:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1058861:	(bad)  
 1058862:	add    al,BYTE PTR [rax]
 1058864:	(bad)  
 1058865:	add    BYTE PTR [rax],al
 1058867:	add    al,dl
 1058869:	(bad)  
 105886a:	add    al,BYTE PTR [rax]
 105886c:	add    eax,0xe6000000
 1058871:	(bad)  
 1058872:	add    al,BYTE PTR [rax]
 1058874:	add    eax,DWORD PTR [rax]
 1058876:	add    BYTE PTR [rax],al
 1058878:	phaddd mm0,QWORD PTR [rax]
 105887c:	(bad)  
 105887d:	add    BYTE PTR [rax],al
 105887f:	add    BYTE PTR [rsi],dl
 1058881:	cmp    BYTE PTR [rdx],al
 1058883:	add    BYTE PTR [rbx],al
 1058885:	add    BYTE PTR [rax],al
 1058887:	add    BYTE PTR [rcx],ah
 1058889:	cmp    BYTE PTR [rdx],al
 105888b:	add    BYTE PTR [rax],cl
 105888d:	add    BYTE PTR [rax],al
 105888f:	add    BYTE PTR [rdx+0x38],cl
 1058892:	add    al,BYTE PTR [rax]
 1058894:	(bad)  
 1058895:	add    BYTE PTR [rax],al
 1058897:	add    BYTE PTR [rax+0x38],ah
 105889a:	add    al,BYTE PTR [rax]
 105889c:	add    eax,DWORD PTR [rax]
 105889e:	add    BYTE PTR [rax],al
 10588a0:	push   rdx
 10588a1:	cmp    DWORD PTR [rdx],eax
 10588a3:	add    BYTE PTR [rdx],al
 10588a5:	add    BYTE PTR [rax],al
 10588a7:	add    BYTE PTR [rbp+0x39],bl
 10588aa:	add    al,BYTE PTR [rax]
 10588ac:	add    DWORD PTR [rax],eax
 10588ae:	add    BYTE PTR [rax],al
 10588b0:	push   0x239
 10588b5:	add    BYTE PTR [rax],al
 10588b7:	add    BYTE PTR [rbx+0x39],dh
 10588ba:	add    al,BYTE PTR [rax]
 10588bc:	(bad)  
 10588bd:	(bad)  
 10588be:	(bad)  
 10588bf:	inc    DWORD PTR [rcx]
 10588c1:	(bad)  
 10588c2:	add    al,BYTE PTR [rax]
 10588c4:	(bad)  
 10588c5:	xor    al,BYTE PTR [rdx]
 10588c7:	push   rax
 10588c8:	add    DWORD PTR [rsi],eax
 10588ca:	add    al,BYTE PTR [rax]
 10588cc:	(bad)  
 10588cd:	xor    al,BYTE PTR [rdx]
 10588cf:	push   rax
 10588d0:	add    DWORD PTR [rsi],eax
 10588d2:	add    al,BYTE PTR [rax]
 10588d4:	(bad)  
 10588d5:	xor    al,BYTE PTR [rdx]
 10588d7:	push   rax
 10588d8:	add    DWORD PTR [rsi],eax
 10588da:	add    al,BYTE PTR [rax]
 10588dc:	(bad)  
 10588dd:	xor    al,BYTE PTR [rdx]
 10588df:	push   rax
 10588e0:	add    DWORD PTR [rdx],ecx
 10588e2:	add    al,0x0
 10588e4:	or     ah,BYTE PTR [rcx+rcx*1+0x0]
 10588e8:	or     dh,BYTE PTR [rdx]
 10588ea:	(bad)  
 10588eb:	jo     0x105890e
 10588ed:	add    eax,0x34050002
 10588f2:	(bad)  
 10588f3:	add    BYTE PTR [rax-0x3bfffdc7],ah
 10588f9:	cmp    DWORD PTR [rdx],eax
 10588fb:	add    al,ah
 10588fd:	mov    BYTE PTR [rip+0x4092100],al        # 0x50eaa03
 1058903:	add    BYTE PTR [rcx],cl
 1058905:	push   rsp
 1058906:	(bad)  
 1058907:	add    BYTE PTR [rax],al
 1058909:	xor    al,0x6
 105890b:	add    BYTE PTR [rax-0x3bfffdc7],ah
 1058911:	cmp    DWORD PTR [rdx],eax
 1058913:	add    al,ah
 1058915:	mov    BYTE PTR [rip+0x2052100],al        # 0x30aaa1b
 105891b:	add    BYTE PTR [rip+0x100008e4],al        # 0x11059205
 1058921:	cmp    al,BYTE PTR [rdx]
 1058923:	add    BYTE PTR [rcx],dh
 1058925:	cmp    eax,DWORD PTR [rdx]
 1058927:	add    BYTE PTR [rax],al
 1058929:	mov    DWORD PTR [rip+0x2100],eax        # 0x105aa2f
 105892f:	add    BYTE PTR [rax],dl
 1058931:	cmp    al,BYTE PTR [rdx]
 1058933:	add    BYTE PTR [rcx],dh
 1058935:	cmp    eax,DWORD PTR [rdx]
 1058937:	add    BYTE PTR [rax],al
 1058939:	mov    DWORD PTR [rip+0x1040100],eax        # 0x2098a3f
 105893f:	add    BYTE PTR [rdx+rax*2],al
 1058942:	add    BYTE PTR [rax],al
 1058944:	add    DWORD PTR [rdx],ecx
 1058946:	add    al,0x0
 1058948:	or     dh,BYTE PTR [rsi+rax*1]
 105894b:	add    BYTE PTR [rdx],cl
 105894d:	xor    al,BYTE PTR [rsi]
 105894f:	jo     0x1058952
 1058951:	or     al,BYTE PTR [rax+rax*1]
 1058954:	or     dh,BYTE PTR [rsi+rax*1]
 1058957:	add    BYTE PTR [rdx],cl
 1058959:	xor    al,BYTE PTR [rsi]
 105895b:	jo     0x105895e
 105895d:	adc    al,0x8
 105895f:	add    BYTE PTR [rsp+riz*2],dl
 1058962:	or     BYTE PTR [rax],al
 1058964:	adc    al,0x54
 1058966:	(bad)  
 1058967:	add    BYTE PTR [rsp+rsi*1],dl
 105896a:	(bad)  
 105896b:	add    BYTE PTR [rdx+rsi*1],dl
 105896e:	adc    BYTE PTR [rax+0x1],dh
 1058971:	sub    al,BYTE PTR [rsi]
 1058973:	add    BYTE PTR [rdx],ch
 1058975:	xor    al,0x6
 1058977:	add    BYTE PTR [rdx],cl
 1058979:	fs (bad) 
 105897b:	add    BYTE PTR [rdx],cl
 105897d:	xor    al,BYTE PTR [rsi]
 105897f:	jo     0x1058992
 1058981:	lar    eax,WORD PTR [rax]
 1058984:	(bad)  
 1058985:	push   rdx
 1058986:	add    dh,BYTE PTR [rax]
 1058988:	xchg   esp,eax
 1058989:	inc    BYTE PTR [rbx]
 105898b:	add    BYTE PTR [rax],ah
 105898d:	cmp    eax,0xffff0000
 1058992:	(bad)  
 1058993:	push   QWORD PTR [rax-0x1c]
 1058996:	add    al,0x0
 1058998:	push   rax
 1058999:	add    al,BYTE PTR ds:[rax]
 105899c:	(bad)  
 105899d:	(bad)  
 105899e:	(bad)  
 105899f:	(bad)  
 10589a0:	jge    0x10589e0
 10589a2:	add    al,BYTE PTR [rax]
 10589a4:	add    BYTE PTR [rax],al
 10589a6:	add    BYTE PTR [rax],al
 10589a8:	mov    ?,WORD PTR [rsi]
 10589aa:	add    al,BYTE PTR [rax]
 10589ac:	(bad)  
 10589ad:	(bad)  
 10589ae:	(bad)  
 10589af:	call   QWORD PTR [rcx]
 10589b1:	and    cl,BYTE PTR [rax]
 10589b3:	add    BYTE PTR [rdx],ah
 10589b5:	or     eax,DWORD PTR fs:[rax]
 10589b8:	sbb    eax,0x18000a54
 10589bd:	xor    al,0x9
 10589bf:	add    BYTE PTR [rdx],cl
 10589c1:	push   rdx
 10589c2:	(bad)  
 10589c3:	jo     0x1058959
 10589c5:	inc    BYTE PTR [rbx]
 10589c7:	add    BYTE PTR [rax+0x3d],cl
 10589ca:	add    BYTE PTR [rax],al
 10589cc:	(bad)  
 10589cd:	(bad)  
 10589ce:	(bad)  
 10589cf:	call   QWORD PTR [rax-0x3e]
 10589d2:	add    al,0x0
 10589d4:	add    BYTE PTR [rax],al
 10589d6:	add    BYTE PTR [rax],al
 10589d8:	jo     0x105899c
 10589da:	add    al,0x0
 10589dc:	add    DWORD PTR [rax],eax
 10589de:	add    BYTE PTR [rax],al
 10589e0:	nop
 10589e1:	ret    0x4
 10589e4:	add    al,BYTE PTR [rax]
 10589e6:	add    BYTE PTR [rax],al
 10589e8:	mov    al,0xc2
 10589ea:	add    al,0x0
 10589ec:	add    eax,DWORD PTR [rax]
 10589ee:	add    BYTE PTR [rax],al
 10589f0:	rol    dl,1
 10589f2:	add    al,0x0
 10589f4:	add    al,0x0
 10589f6:	add    BYTE PTR [rax],al
 10589f8:	lock ret 0x4
 10589fc:	add    eax,0x10000000
 1058a01:	ret    
 1058a02:	add    al,0x0
 1058a04:	(bad)  
 1058a05:	add    BYTE PTR [rax],al
 1058a07:	add    BYTE PTR [rax],dh
 1058a09:	ret    
 1058a0a:	add    al,0x0
 1058a0c:	(bad)  
 1058a0d:	add    BYTE PTR [rax],al
 1058a0f:	add    BYTE PTR [rax-0x3d],dl
 1058a12:	add    al,0x0
 1058a14:	or     BYTE PTR [rax],al
 1058a16:	add    BYTE PTR [rax],al
 1058a18:	jo     0x10589dd
 1058a1a:	add    al,0x0
 1058a1c:	or     DWORD PTR [rax],eax
 1058a1e:	add    BYTE PTR [rax],al
 1058a20:	nop
 1058a21:	ret    
 1058a22:	add    al,0x0
 1058a24:	or     al,BYTE PTR [rax]
 1058a26:	add    BYTE PTR [rax],al
 1058a28:	mov    al,0xc3
 1058a2a:	add    al,0x0
 1058a2c:	or     eax,DWORD PTR [rax]
 1058a2e:	add    BYTE PTR [rax],al
 1058a30:	rol    bl,1
 1058a32:	add    al,0x0
 1058a34:	or     al,0x0
 1058a36:	add    BYTE PTR [rax],al
 1058a38:	lock ret 
 1058a3a:	add    al,0x0
 1058a3c:	or     eax,0x10000000
 1058a41:	(bad)  
 1058a42:	add    al,0x0
 1058a44:	(bad)  
 1058a45:	add    BYTE PTR [rax],al
 1058a47:	add    BYTE PTR [rax],dh
 1058a49:	(bad)  
 1058a4a:	add    al,0x0
 1058a4c:	mov    al,0x3e
 1058a4e:	add    al,BYTE PTR [rax]
 1058a50:	(bad)  
 1058a51:	(bad)  
 1058a52:	(bad)  
 1058a53:	(bad)  
 1058a54:	fistp  QWORD PTR [rsi]
 1058a56:	add    al,BYTE PTR [rax]
 1058a58:	sldt   WORD PTR [rax]
 1058a5b:	add    bh,ah
 1058a5d:	(bad)  
 1058a5e:	add    al,BYTE PTR [rax]
 1058a60:	(bad)  
 1058a61:	add    BYTE PTR [rax],al
 1058a63:	add    BYTE PTR [rax],bh
 1058a65:	add    al,BYTE PTR [rax]
 1058a68:	or     eax,0x53000000
 1058a6d:	add    al,BYTE PTR [rax]
 1058a70:	or     al,0x0
 1058a72:	add    BYTE PTR [rax],al
 1058a74:	movsxd eax,DWORD PTR [rax+0x2]
 1058a77:	add    BYTE PTR [rbx],cl
 1058a79:	add    BYTE PTR [rax],al
 1058a7b:	add    BYTE PTR [rcx+0x40],dh
 1058a7e:	add    al,BYTE PTR [rax]
 1058a80:	or     al,BYTE PTR [rax]
 1058a82:	add    BYTE PTR [rax],al
 1058a84:	jg     0x1058ac6
 1058a86:	add    al,BYTE PTR [rax]
 1058a88:	or     DWORD PTR [rax],eax
 1058a8a:	add    BYTE PTR [rax],al
 1058a8c:	lea    eax,[rax+0x2]
 1058a8f:	add    BYTE PTR [rax],cl
 1058a91:	add    BYTE PTR [rax],al
 1058a93:	add    BYTE PTR [rbx+0x7000240],bl
 1058a99:	add    BYTE PTR [rax],al
 1058a9b:	add    BYTE PTR [rcx+0x6000240],ch
 1058aa1:	add    BYTE PTR [rax],al
 1058aa3:	add    BYTE PTR [rdi+0x5000240],dh
 1058aa9:	add    BYTE PTR [rax],al
 1058aab:	add    ch,al
 1058aad:	add    al,BYTE PTR [rax]
 1058ab0:	add    al,0x0
 1058ab2:	add    BYTE PTR [rax],al
 1058ab4:	rol    DWORD PTR [rax+0x2],cl
 1058ab7:	add    BYTE PTR [rbx],al
 1058ab9:	add    BYTE PTR [rax],al
 1058abb:	add    cl,ah
 1058abd:	add    al,BYTE PTR [rax]
 1058ac0:	add    al,BYTE PTR [rax]
 1058ac2:	add    BYTE PTR [rax],al
 1058ac4:	in     al,dx
 1058ac5:	add    al,BYTE PTR [rax]
 1058ac8:	add    DWORD PTR [rax],eax
 1058aca:	add    BYTE PTR [rax],al
 1058acc:	test   DWORD PTR [rax+0x2],0x0
 1058ad3:	add    BYTE PTR [rdx],al
 1058ad5:	add    al,BYTE PTR [r8]
 1058ad8:	(bad)  
 1058ad9:	(bad)  
 1058ada:	(bad)  
 1058adb:	call   FWORD PTR [rcx]
 1058add:	or     r8d,DWORD PTR [r8]
 1058ae0:	xor    esp,DWORD PTR [rbp+rbx*2+0x3]
 1058ae4:	sub    esi,DWORD PTR [rbx+rbx*2]
 1058ae7:	add    edx,DWORD PTR [rdi]
 1058ae9:	add    DWORD PTR [rbx+rax*1+0xa],edx
 1058aed:	lock or al,ah
 1058af0:	(bad)  
 1058af1:	rol    BYTE PTR [rax+rax*8],1
 1058af4:	add    dh,BYTE PTR [rax+0x0]
 1058af7:	add    BYTE PTR [rax+0x700003fe],ah
 1058afd:	cmp    eax,0x1a930000
 1058b02:	add    BYTE PTR [rax],al
 1058b04:	(bad)  
 1058b05:	(bad)  
 1058b06:	(bad)  
 1058b07:	push   QWORD PTR [rax]
 1058b09:	mov    dh,0x4
 1058b0b:	add    BYTE PTR [rax],al
 1058b0d:	add    BYTE PTR [rax],al
 1058b0f:	add    BYTE PTR [rax-0x4a],al
 1058b12:	add    al,0x0
 1058b14:	add    DWORD PTR [rax],eax
 1058b16:	add    BYTE PTR [rax],al
 1058b18:	add    BYTE PTR [rax],al
 1058b1a:	add    BYTE PTR [rax],al
 1058b1c:	add    al,BYTE PTR [rax]
 1058b1e:	add    BYTE PTR [rax],al
 1058b20:	push   rax
 1058b21:	mov    dh,0x4
 1058b23:	add    BYTE PTR [rdx],al
 1058b25:	add    BYTE PTR [rax],al
 1058b27:	add    BYTE PTR [rax-0x4a],ah
 1058b2a:	add    al,0x0
 1058b2c:	add    al,0x0
 1058b2e:	add    BYTE PTR [rax],al
 1058b30:	jo     0x1058ae8
 1058b32:	add    al,0x0
 1058b34:	add    eax,0x80000000
 1058b39:	mov    dh,0x4
 1058b3b:	add    BYTE PTR [rsi],al
 1058b3d:	add    BYTE PTR [rax],al
 1058b3f:	add    BYTE PTR [rax+0x70004b6],dl
 1058b45:	add    BYTE PTR [rax],al
 1058b47:	add    BYTE PTR [rax+0x60004b6],ah
 1058b4d:	add    BYTE PTR [rax],al
 1058b4f:	add    BYTE PTR [rax+0x60004b6],dh
 1058b55:	add    BYTE PTR [rax],al
 1058b57:	add    al,al
 1058b59:	mov    dh,0x4
 1058b5b:	add    BYTE PTR [rsi],al
 1058b5d:	add    BYTE PTR [rax],al
 1058b5f:	add    al,dl
 1058b61:	mov    dh,0x4
 1058b63:	add    BYTE PTR [rip+0xffffffffe0000000],al        # 0xffffffffe1058b69
 1058b69:	mov    dh,0x4
 1058b6b:	add    BYTE PTR [rax+rax*1],cl
 1058b6e:	add    BYTE PTR [rax],al
 1058b70:	lock mov dh,0x4
 1058b73:	add    BYTE PTR [rip+0x0],al        # 0x1058b79
 1058b79:	mov    bh,0x4
 1058b7b:	add    BYTE PTR [rsi],cl
 1058b7d:	add    BYTE PTR [rax],al
 1058b7f:	add    BYTE PTR [rax],dl
 1058b81:	mov    bh,0x4
 1058b83:	add    BYTE PTR [rsi],cl
 1058b85:	add    BYTE PTR [rax],al
 1058b87:	add    BYTE PTR [rax],ah
 1058b89:	mov    bh,0x4
 1058b8b:	add    BYTE PTR [rip+0x30000000],al        # 0x31058b91
 1058b91:	mov    bh,0x4
 1058b93:	add    BYTE PTR [rcx],dl
 1058b95:	add    BYTE PTR [rax],al
 1058b97:	add    BYTE PTR [rax-0x49],al
 1058b9a:	add    al,0x0
 1058b9c:	add    eax,0x50000000
 1058ba1:	mov    bh,0x4
 1058ba3:	add    BYTE PTR [rip+0x60000000],al        # 0x61058ba9
 1058ba9:	mov    bh,0x4
 1058bab:	add    BYTE PTR [rax+rax*1],dl
 1058bae:	add    BYTE PTR [rax],al
 1058bb0:	jo     0x1058b69
 1058bb2:	add    al,0x0
 1058bb4:	adc    al,0x0
 1058bb6:	add    BYTE PTR [rax],al
 1058bb8:	xor    BYTE PTR [rdi+0x50004],0x0
 1058bbf:	add    BYTE PTR [rax+0x50004b7],dl
 1058bc5:	add    BYTE PTR [rax],al
 1058bc7:	add    BYTE PTR [rax+0x50004b7],ah
 1058bcd:	add    BYTE PTR [rax],al
 1058bcf:	add    BYTE PTR [rax+0x50004b7],dh
 1058bd5:	add    BYTE PTR [rax],al
 1058bd7:	add    al,al
 1058bd9:	mov    bh,0x4
 1058bdb:	add    BYTE PTR [rip+0xfffffffff0000000],al        # 0xfffffffff1058be1
 1058be1:	mov    bh,0x4
 1058be3:	add    BYTE PTR [rbx],bl
 1058be5:	add    BYTE PTR [rax],al
 1058be7:	add    BYTE PTR [rax],al
 1058be9:	mov    eax,0x50004
 1058bee:	add    BYTE PTR [rax],al
 1058bf0:	add    BYTE PTR [rax+0x50004],bh
 1058bf6:	add    BYTE PTR [rax],al
 1058bf8:	adc    BYTE PTR [rax+0x50004],bh
 1058bfe:	add    BYTE PTR [rax],al
 1058c00:	and    BYTE PTR [rax+0x50004],bh
 1058c06:	add    BYTE PTR [rax],al
 1058c08:	xor    BYTE PTR [rax+0x50004],bh
 1058c0e:	add    BYTE PTR [rax],al
 1058c10:	rex mov eax,0x210004
 1058c16:	add    BYTE PTR [rax],al
 1058c18:	push   rax
 1058c19:	mov    eax,0x210004
 1058c1e:	add    BYTE PTR [rax],al
 1058c20:	(bad)  
 1058c21:	mov    eax,0x210004
 1058c26:	add    BYTE PTR [rax],al
 1058c28:	jo     0x1058be2
 1058c2a:	add    al,0x0
 1058c2c:	add    eax,0x80000000
 1058c31:	mov    eax,0x250004
 1058c36:	add    BYTE PTR [rax],al
 1058c38:	nop
 1058c39:	mov    eax,0x250004
 1058c3e:	add    BYTE PTR [rax],al
 1058c40:	movabs al,ds:0xb0000000050004b8
 1058c49:	mov    eax,0x50004
 1058c4e:	add    BYTE PTR [rax],al
 1058c50:	sar    BYTE PTR [rax+0x290004],0x0
 1058c57:	add    al,dl
 1058c59:	mov    eax,0x2a0004
 1058c5e:	add    BYTE PTR [rax],al
 1058c60:	loopne 0x1058c1a
 1058c62:	add    al,0x0
 1058c64:	sub    DWORD PTR [rax],eax
 1058c66:	add    BYTE PTR [rax],al
 1058c68:	lock mov eax,0x50004
 1058c6e:	add    BYTE PTR [rax],al
 1058c70:	add    BYTE PTR [rcx+0x50004],bh
 1058c76:	add    BYTE PTR [rax],al
 1058c78:	adc    BYTE PTR [rcx+0x50004],bh
 1058c7e:	add    BYTE PTR [rax],al
 1058c80:	and    BYTE PTR [rcx+0x2f0004],bh
 1058c86:	add    BYTE PTR [rax],al
 1058c88:	xor    BYTE PTR [rcx+0x300004],bh
 1058c8e:	add    BYTE PTR [rax],al
 1058c90:	rex mov ecx,0x310004
 1058c96:	add    BYTE PTR [rax],al
 1058c98:	push   rax
 1058c99:	mov    ecx,0x300004
 1058c9e:	add    BYTE PTR [rax],al
 1058ca0:	push   rax
 1058ca1:	mov    ecx,0x2f0004
 1058ca6:	add    BYTE PTR [rax],al
 1058ca8:	push   rax
 1058ca9:	mov    ecx,0x50004
 1058cae:	add    BYTE PTR [rax],al
 1058cb0:	push   rax
 1058cb1:	mov    ecx,0x350004
 1058cb6:	add    BYTE PTR [rax],al
 1058cb8:	(bad)  
 1058cb9:	mov    ecx,0x360004
 1058cbe:	add    BYTE PTR [rax],al
 1058cc0:	jo     0x1058c7b
 1058cc2:	add    al,0x0
 1058cc4:	(bad)  
 1058cc5:	add    BYTE PTR [rax],al
 1058cc7:	add    BYTE PTR [rax+0x370004b9],al
 1058ccd:	add    BYTE PTR [rax],al
 1058ccf:	add    BYTE PTR [rax+0x370004b9],dl
 1058cd5:	add    BYTE PTR [rax],al
 1058cd7:	add    BYTE PTR [rax+0x370004b9],ah
 1058cdd:	add    BYTE PTR [rax],al
 1058cdf:	add    BYTE PTR [rax+0x370004b9],dh
 1058ce5:	add    BYTE PTR [rax],al
 1058ce7:	add    al,al
 1058ce9:	mov    ecx,0x370004
 1058cee:	add    BYTE PTR [rax],al
 1058cf0:	sar    BYTE PTR [rcx+0x3d0004],1
 1058cf6:	add    BYTE PTR [rax],al
 1058cf8:	loopne 0x1058cb3
 1058cfa:	add    al,0x0
 1058cfc:	cmp    eax,0xf0000000
 1058d01:	mov    ecx,0x3f0004
 1058d06:	add    BYTE PTR [rax],al
 1058d08:	add    BYTE PTR [rdx+0x400004],bh
 1058d0e:	add    BYTE PTR [rax],al
 1058d10:	adc    BYTE PTR [rdx+0x3d0004],bh
 1058d16:	add    BYTE PTR [rax],al
 1058d18:	and    BYTE PTR [rdx+0x420004],bh
 1058d1e:	add    BYTE PTR [rax],al
 1058d20:	xor    BYTE PTR [rdx+0x430004],bh
 1058d26:	add    BYTE PTR [rax],al
 1058d28:	rex mov edx,0x440004
 1058d2e:	add    BYTE PTR [rax],al
 1058d30:	push   rax
 1058d31:	mov    edx,0x450004
 1058d36:	add    BYTE PTR [rax],al
 1058d38:	(bad)  
 1058d39:	mov    edx,0x460004
 1058d3e:	add    BYTE PTR [rax],al
 1058d40:	jo     0x1058cfc
 1058d42:	add    al,0x0
 1058d44:	rex.RXB add BYTE PTR [r8],r8b
 1058d47:	add    BYTE PTR [rax+0x470004ba],al
 1058d4d:	add    BYTE PTR [rax],al
 1058d4f:	add    BYTE PTR [rax+0x490004ba],dl
 1058d55:	add    BYTE PTR [rax],al
 1058d57:	add    BYTE PTR [rax+0x490004ba],ah
 1058d5d:	add    BYTE PTR [rax],al
 1058d5f:	add    BYTE PTR [rax+0x4b0004ba],dh
 1058d65:	add    BYTE PTR [rax],al
 1058d67:	add    al,al
 1058d69:	mov    edx,0x4c0004
 1058d6e:	add    BYTE PTR [rax],al
 1058d70:	sar    BYTE PTR [rdx+0x4b0004],1
 1058d76:	add    BYTE PTR [rax],al
 1058d78:	loopne 0x1058d34
 1058d7a:	add    al,0x0
 1058d7c:	rex.WXB add BYTE PTR [r8],al
 1058d7f:	add    al,dh
 1058d81:	mov    edx,0x4f0004
 1058d86:	add    BYTE PTR [rax],al
 1058d88:	add    BYTE PTR [rbx+0x4b0004],bh
 1058d8e:	add    BYTE PTR [rax],al
 1058d90:	adc    BYTE PTR [rbx+0x510004],bh
 1058d96:	add    BYTE PTR [rax],al
 1058d98:	and    BYTE PTR [rbx+0x520004],bh
 1058d9e:	add    BYTE PTR [rax],al
 1058da0:	xor    BYTE PTR [rbx+0x510004],bh
 1058da6:	add    BYTE PTR [rax],al
 1058da8:	push   rax
 1058da9:	mov    ebx,0x540004
 1058dae:	add    BYTE PTR [rax],al
 1058db0:	(bad)  
 1058db1:	mov    ebx,0x550004
 1058db6:	add    BYTE PTR [rax],al
 1058db8:	jo     0x1058d75
 1058dba:	add    al,0x0
 1058dbc:	push   rsi
 1058dbd:	add    BYTE PTR [rax],al
 1058dbf:	add    BYTE PTR [rax+0x570004bb],al
 1058dc5:	add    BYTE PTR [rax],al
 1058dc7:	add    BYTE PTR [rax+0x570004bb],dl
 1058dcd:	add    BYTE PTR [rax],al
 1058dcf:	add    BYTE PTR [rax+0x590004bb],ah
 1058dd5:	add    BYTE PTR [rax],al
 1058dd7:	add    BYTE PTR [rax+0x570004bb],dh
 1058ddd:	add    BYTE PTR [rax],al
 1058ddf:	add    al,al
 1058de1:	mov    ebx,0x560004
 1058de6:	add    BYTE PTR [rax],al
 1058de8:	sar    BYTE PTR [rbx+0x5c0004],1
 1058dee:	add    BYTE PTR [rax],al
 1058df0:	loopne 0x1058dad
 1058df2:	add    al,0x0
 1058df4:	pop    rbp
 1058df5:	add    BYTE PTR [rax],al
 1058df7:	add    al,dh
 1058df9:	mov    ebx,0x510004
 1058dfe:	add    BYTE PTR [rax],al
 1058e00:	add    BYTE PTR [rsp+rax*1+0x5f00],bh
 1058e07:	add    BYTE PTR [rax],dl
 1058e09:	mov    esp,0x10004
 1058e0e:	add    BYTE PTR [rax],al
 1058e10:	add    BYTE PTR [rax],al
 1058e12:	add    BYTE PTR [rax],al
 1058e14:	add    al,BYTE PTR [rax]
 1058e16:	add    BYTE PTR [rax],al
 1058e18:	(bad)  
 1058e19:	add    BYTE PTR [rax],al
 1058e1b:	add    BYTE PTR [rcx+0x0],ah
 1058e1e:	add    BYTE PTR [rax],al
 1058e20:	add    DWORD PTR [rax],eax
 1058e22:	add    BYTE PTR [rax],al
 1058e24:	sub    BYTE PTR [rsi+0x5],cl
 1058e2a:	add    BYTE PTR [rax],al
 1058e2c:	push   rax
 1058e2d:	xor    eax,0x5800006
 1058e32:	add    BYTE PTR [rax],al
 1058e34:	xor    BYTE PTR [rsp+rax*1+0x9800],bh
 1058e3b:	add    BYTE PTR [rax],dh
 1058e3d:	add    al,BYTE PTR [r8]
 1058e40:	(bad)  
 1058e41:	(bad)  
 1058e42:	(bad)  
 1058e43:	jmp    FWORD PTR [rbp+0x241]
 1058e49:	add    BYTE PTR [rax],al
 1058e4b:	add    BYTE PTR [rcx+rax*2+0x10002],bh
 1058e52:	add    BYTE PTR [rax],al
 1058e54:	fild   DWORD PTR [rcx+0x2]
 1058e57:	add    BYTE PTR [rdx],al
 1058e59:	add    BYTE PTR [rax],al
 1058e5b:	add    BYTE PTR [rax],dh
 1058e5d:	rex.X add al,BYTE PTR [rax]
 1058e60:	add    eax,DWORD PTR [rax]
 1058e62:	add    BYTE PTR [rax],al
 1058e64:	rex.RB
 1058e65:	rex.X add al,BYTE PTR [rax]
 1058e68:	add    al,BYTE PTR [rax]
 1058e6a:	add    BYTE PTR [rax],al
 1058e6c:	push   rsp
 1058e6d:	rex.X add al,BYTE PTR [rax]
 1058e70:	add    BYTE PTR [rax],al
 1058e72:	add    BYTE PTR [rax],al
 1058e74:	movsxd eax,DWORD PTR [rdx+0x2]
 1058e77:	add    bh,bh
 1058e79:	(bad)  
 1058e7a:	(bad)  
 1058e7b:	push   QWORD PTR [rbp+0x42]
 1058e7e:	add    al,BYTE PTR [rax]
 1058e80:	add    al,BYTE PTR [rax]
 1058e82:	add    BYTE PTR [rax],al
 1058e84:	add    DWORD PTR [rbx+0x2],eax
 1058e87:	add    BYTE PTR [rax+rax*1],al
 1058e8a:	add    BYTE PTR [rax],al
 1058e8c:	or     DWORD PTR [rbx+0x2],eax
 1058e8f:	add    BYTE PTR [rip+0x4a000000],al        # 0x4b058e95
 1058e95:	rex.XB add al,BYTE PTR [r8]
 1058e98:	add    BYTE PTR [rax],al
 1058e9a:	add    BYTE PTR [rax],al
 1058e9c:	pop    rcx
 1058e9d:	rex.XB add al,BYTE PTR [r8]
 1058ea0:	(bad)  
 1058ea1:	(bad)  
 1058ea2:	(bad)  
 1058ea3:	jmp    FWORD PTR [rbx+0x43]
 1058ea6:	add    al,BYTE PTR [rax]
 1058ea8:	add    eax,0xc8000000
 1058ead:	rex.XB add al,BYTE PTR [r8]
 1058eb0:	add    BYTE PTR [rax],al
 1058eb2:	add    BYTE PTR [rax],al
 1058eb4:	xlat   BYTE PTR ds:[rbx]
 1058eb5:	rex.XB add al,BYTE PTR [r8]
 1058eb8:	(bad)  
 1058eb9:	(bad)  
 1058eba:	(bad)  
 1058ebb:	(bad)  
 1058ebc:	jmp    0x6059104
 1058ec1:	add    BYTE PTR [rax],al
 1058ec3:	add    BYTE PTR [rbx],cl
 1058ec5:	add    r8b,BYTE PTR [rax]
 1058ec8:	add    BYTE PTR [rax],al
 1058eca:	add    BYTE PTR [rax],al
 1058ecc:	or     eax,0x5000244
 1058ed1:	add    BYTE PTR [rax],al
 1058ed3:	add    BYTE PTR [rdi+0x44],cl
 1058ed6:	add    al,BYTE PTR [rax]
 1058ed8:	add    BYTE PTR [rax],al
 1058eda:	add    BYTE PTR [rax],al
 1058edc:	pop    rsi
 1058edd:	add    r8b,BYTE PTR [rax]
 1058ee0:	(bad)  
 1058ee1:	(bad)  
 1058ee2:	(bad)  
 1058ee3:	push   QWORD PTR [rax+0x44]
 1058ee6:	add    al,BYTE PTR [rax]
 1058ee8:	add    BYTE PTR [rax],al
 1058eea:	add    BYTE PTR [rax],al
 1058eec:	jg     0x1058f32
 1058eee:	add    al,BYTE PTR [rax]
 1058ef0:	(bad)  
 1058ef1:	(bad)  
 1058ef2:	(bad)  
 1058ef3:	call   QWORD PTR [rcx+0x5000244]
 1058ef9:	add    BYTE PTR [rax],al
 1058efb:	add    dh,dl
 1058efd:	add    r8b,BYTE PTR [rax]
 1058f00:	add    BYTE PTR [rax],al
 1058f02:	add    BYTE PTR [rax],al
 1058f04:	in     eax,0x44
 1058f06:	add    al,BYTE PTR [rax]
 1058f08:	(bad)  
 1058f09:	(bad)  
 1058f0a:	(bad)  
 1058f0b:	push   rdi
 1058f0d:	add    r8b,BYTE PTR [rax]
 1058f10:	add    BYTE PTR [rax],al
 1058f12:	add    BYTE PTR [rax],al
 1058f14:	(bad)  
 1058f15:	add    r8b,BYTE PTR [r8]
 1058f18:	(bad)  
 1058f19:	(bad)  
 1058f1a:	(bad)  
 1058f1b:	call   FWORD PTR [rax]
 1058f1d:	add    r8b,BYTE PTR [r8]
 1058f20:	add    eax,0x5d000000
 1058f25:	add    r8b,BYTE PTR [r8]
 1058f28:	add    BYTE PTR [rax],al
 1058f2a:	add    BYTE PTR [rax],al
 1058f2c:	ins    BYTE PTR es:[rdi],dx
 1058f2d:	add    r8b,BYTE PTR [r8]
 1058f30:	(bad)  
 1058f31:	(bad)  
 1058f32:	(bad)  
 1058f33:	(bad)  
 1058f34:	jle    0x1058f7b
 1058f36:	add    al,BYTE PTR [rax]
 1058f38:	add    BYTE PTR [rax],al
 1058f3a:	add    BYTE PTR [rax],al
 1058f3c:	lea    eax,[rbp+0x2]
 1058f3f:	add    bh,bh
 1058f41:	(bad)  
 1058f42:	(bad)  
 1058f43:	call   FWORD PTR [rdi+0x5000245]
 1058f49:	add    BYTE PTR [rax],al
 1058f4b:	add    dl,al
 1058f4d:	add    r8b,BYTE PTR [r8]
 1058f50:	(bad)  
 1058f51:	add    BYTE PTR [rax],al
 1058f53:	add    ah,bh
 1058f55:	add    r8b,BYTE PTR [r8]
 1058f58:	(bad)  
 1058f59:	add    BYTE PTR [rax],al
 1058f5b:	add    BYTE PTR [rsi+rax*2],dl
 1058f5e:	add    al,BYTE PTR [rax]
 1058f60:	or     BYTE PTR [rax],al
 1058f62:	add    BYTE PTR [rax],al
 1058f64:	rex.RX add r8b,BYTE PTR es:[rax]
 1058f68:	(bad)  
 1058f69:	add    BYTE PTR [rax],al
 1058f6b:	add    BYTE PTR [rip+0x6000246],dh        # 0x70591b7
 1058f71:	add    BYTE PTR [rax],al
 1058f73:	add    BYTE PTR [rbp+0x46],ch
 1058f76:	add    al,BYTE PTR [rax]
 1058f78:	or     DWORD PTR [rax],eax
 1058f7a:	add    BYTE PTR [rax],al
 1058f7c:	add    DWORD PTR [rsi+0x2],0x600
 1058f83:	add    BYTE PTR [rdi+rax*2],dl
 1058f86:	add    al,BYTE PTR [rax]
 1058f88:	or     al,BYTE PTR [rax]
 1058f8a:	add    BYTE PTR [rax],al
 1058f8c:	and    eax,0x6000247
 1058f91:	add    BYTE PTR [rax],al
 1058f93:	add    BYTE PTR [rax+0xb000247],bl
 1058f99:	add    BYTE PTR [rax],al
 1058f9b:	add    dh,dl
 1058f9d:	rex.W add al,BYTE PTR [rax]
 1058fa0:	(bad)  
 1058fa1:	add    BYTE PTR [rax],al
 1058fa3:	add    ch,ah
 1058fa5:	rex.W add al,BYTE PTR [rax]
 1058fa8:	add    eax,0xf4000000
 1058fad:	rex.W add al,BYTE PTR [rax]
 1058fb0:	add    al,0x0
 1058fb2:	add    BYTE PTR [rax],al
 1058fb4:	(bad)  
 1058fb5:	rex.WB add al,BYTE PTR [r8]
 1058fb8:	add    al,BYTE PTR [rax]
 1058fba:	add    BYTE PTR [rax],al
 1058fbc:	sub    BYTE PTR [rcx+0x2],cl
 1058fbf:	add    BYTE PTR [rax],al
 1058fc1:	add    BYTE PTR [rax],al
 1058fc3:	add    BYTE PTR [rdi],dh
 1058fc5:	rex.WB add al,BYTE PTR [r8]
 1058fc8:	(bad)  
 1058fc9:	(bad)  
 1058fca:	(bad)  
 1058fcb:	dec    DWORD PTR [rcx+0x49]
 1058fce:	add    al,BYTE PTR [rax]
 1058fd0:	(bad)  
 1058fd1:	add    BYTE PTR [rax],al
 1058fd3:	add    BYTE PTR [rcx+0x5000249],ch
 1058fd9:	add    BYTE PTR [rax],al
 1058fdb:	add    BYTE PTR [rax+0x249],bh
 1058fe1:	add    BYTE PTR [rax],al
 1058fe3:	add    bh,al
 1058fe5:	rex.WB add al,BYTE PTR [r8]
 1058fe8:	(bad)  
 1058fe9:	(bad)  
 1058fea:	(bad)  
 1058feb:	(bad)  
 1058fec:	(bad)  [rcx+0x2]
 1058fef:	add    BYTE PTR [rip+0x18000000],al        # 0x19058ff5
 1058ff5:	rex.WX add al,BYTE PTR [rax]
 1058ff8:	add    BYTE PTR [rax],al
 1058ffa:	add    BYTE PTR [rax],al
 1058ffc:	(bad)  
 1058ffd:	rex.WX add al,BYTE PTR [rax]
 1059000:	(bad)  
 1059001:	(bad)  
 1059002:	(bad)  
 1059003:	(bad)  
 1059004:	cmp    DWORD PTR [rdx+0x2],ecx
 1059007:	add    BYTE PTR [rip+0xffffffff86000000],al        # 0xffffffff8705900d
 105900d:	rex.WX add al,BYTE PTR [rax]
 1059010:	add    BYTE PTR [rax],al
 1059012:	add    BYTE PTR [rax],al
 1059014:	xchg   ebp,eax
 1059015:	rex.WX add al,BYTE PTR [rax]
 1059018:	(bad)  
 1059019:	(bad)  
 105901a:	(bad)  
 105901b:	jmp    QWORD PTR [rdi+0x500024a]
 1059021:	add    BYTE PTR [rax],al
 1059023:	add    ch,al
 1059025:	rex.WX add al,BYTE PTR [rax]
 1059028:	add    BYTE PTR [rax],al
 105902a:	add    BYTE PTR [rax],al
 105902c:	(bad)  
 105902d:	rex.WX add al,BYTE PTR [rax]
 1059030:	(bad)  
 1059031:	(bad)  
 1059032:	(bad)  
 1059033:	jmp    rsi
 1059035:	rex.WX add al,BYTE PTR [rax]
 1059038:	add    eax,0xfd000000
 105903d:	rex.WX add al,BYTE PTR [rax]
 1059040:	or     al,0x0
 1059042:	add    BYTE PTR [rax],al
 1059044:	sub    eax,0xd00024b
 1059049:	add    BYTE PTR [rax],al
 105904b:	add    BYTE PTR [rdi],bh
 105904d:	rex.WXB add al,BYTE PTR [r8]
 1059050:	or     al,0x0
 1059052:	add    BYTE PTR [rax],al
 1059054:	enter  0x24b,0x0
 1059058:	add    eax,0xd7000000
 105905d:	rex.WXB add al,BYTE PTR [r8]
 1059060:	add    BYTE PTR [rax],al
 1059062:	add    BYTE PTR [rax],al
 1059064:	out    0x4b,al
 1059066:	add    al,BYTE PTR [rax]
 1059068:	(bad)  
 1059069:	(bad)  
 105906a:	(bad)  
 105906b:	(bad)  
 105906c:	clc    
 105906d:	rex.WXB add al,BYTE PTR [r8]
 1059070:	or     al,0x0
 1059072:	add    BYTE PTR [rax],al
 1059074:	sbb    eax,0x500024c
 1059079:	add    BYTE PTR [rax],al
 105907b:	add    BYTE PTR [rdx+0xe00024c],ah
 1059081:	add    BYTE PTR [rax],al
 1059083:	add    BYTE PTR [rdi+0xf00024c],bh
 1059089:	add    BYTE PTR [rax],al
 105908b:	add    cl,ah
 105908d:	rex.WR add r8b,BYTE PTR [rax]
 1059090:	(bad)  
 1059091:	add    BYTE PTR [rax],al
 1059093:	add    BYTE PTR [rcx+0x4d],bl
 1059096:	add    al,BYTE PTR [rax]
 1059098:	adc    BYTE PTR [rax],al
 105909a:	add    BYTE PTR [rax],al
 105909c:	jl     0x10590eb
 105909e:	add    al,BYTE PTR [rax]
 10590a0:	(bad)  
 10590a1:	add    BYTE PTR [rax],al
 10590a3:	add    dh,bl
 10590a5:	rex.WRB add r8b,BYTE PTR [r8]
 10590a8:	add    eax,0xed000000
 10590ad:	rex.WRB add r8b,BYTE PTR [r8]
 10590b0:	add    BYTE PTR [rax],al
 10590b2:	add    BYTE PTR [rax],al
 10590b4:	cld    
 10590b5:	rex.WRB add r8b,BYTE PTR [r8]
 10590b8:	(bad)  
 10590b9:	(bad)  
 10590ba:	(bad)  
 10590bb:	dec    DWORD PTR [rsi]
 10590bd:	rex.WRX add r8b,BYTE PTR [rax]
 10590c0:	add    eax,0x28000000
 10590c5:	rex.WRX add r8b,BYTE PTR [rax]
 10590c8:	adc    DWORD PTR [rax],eax
 10590ca:	add    BYTE PTR [rax],al
 10590cc:	cmp    ecx,DWORD PTR [rsi+0x2]
 10590cf:	add    BYTE PTR [rdx],dl
 10590d1:	add    BYTE PTR [rax],al
 10590d3:	add    BYTE PTR [rbp+0x4e],bl
 10590d6:	add    al,BYTE PTR [rax]
 10590d8:	adc    DWORD PTR [rax],eax
 10590da:	add    BYTE PTR [rax],al
 10590dc:	movabs al,ds:0xaf0000000500024e
 10590e5:	rex.WRX add r8b,BYTE PTR [rax]
 10590e8:	add    BYTE PTR [rax],al
 10590ea:	add    BYTE PTR [rax],al
 10590ec:	mov    esi,0xff00024e
 10590f1:	(bad)  
 10590f2:	(bad)  
 10590f3:	call   rax
 10590f5:	rex.WRX add r8b,BYTE PTR [rax]
 10590f8:	add    eax,0xf3000000
 10590fd:	rex.WRX add r8b,BYTE PTR [rax]
 1059100:	add    BYTE PTR [rax],al
 1059102:	add    BYTE PTR [rax],al
 1059104:	add    cl,BYTE PTR [rdi+0x2]
 1059107:	add    bh,bh
 1059109:	(bad)  
 105910a:	(bad)  
 105910b:	call   QWORD PTR [rdi+rcx*2]
 105910e:	add    al,BYTE PTR [rax]
 1059110:	add    eax,0xf5000000
 1059115:	rex.WRXB add r8b,BYTE PTR [r8]
 1059118:	adc    eax,DWORD PTR [rax]
 105911a:	add    BYTE PTR [rax],al
 105911c:	add    dl,BYTE PTR [rax+0x2]
 105911f:	add    BYTE PTR [rip+0x54000000],al        # 0x55059125
 1059125:	push   rax
 1059126:	add    al,BYTE PTR [rax]
 1059128:	adc    al,0x0
 105912a:	add    BYTE PTR [rax],al
 105912c:	addr32 push rax
 105912e:	add    al,BYTE PTR [rax]
 1059130:	adc    eax,0x85000000
 1059135:	push   rax
 1059136:	add    al,BYTE PTR [rax]
 1059138:	adc    al,0x0
 105913a:	add    BYTE PTR [rax],al
 105913c:	mov    edx,0x16000250
 1059141:	add    BYTE PTR [rax],al
 1059143:	add    BYTE PTR [rbp+0x14000250],bh
 1059149:	add    BYTE PTR [rax],al
 105914b:	add    ch,cl
 105914d:	push   rax
 105914e:	add    al,BYTE PTR [rax]
 1059150:	add    eax,0x11000000
 1059155:	push   rcx
 1059156:	add    al,BYTE PTR [rax]
 1059158:	add    BYTE PTR [rax],al
 105915a:	add    BYTE PTR [rax],al
 105915c:	and    BYTE PTR [rcx+0x2],dl
 105915f:	add    bh,bh
 1059161:	(bad)  
 1059162:	(bad)  
 1059163:	push   QWORD PTR [rdx]
 1059165:	push   rcx
 1059166:	add    al,BYTE PTR [rax]
 1059168:	add    eax,0x48000000
 105916d:	push   rcx
 105916e:	add    al,BYTE PTR [rax]
 1059170:	(bad)  
 1059171:	add    BYTE PTR [rax],al
 1059173:	add    BYTE PTR [rcx+rdx*2+0x2],bl
 1059177:	add    BYTE PTR [rip+0xffffffff8d000000],al        # 0xffffffff8e05917d
 105917d:	push   rcx
 105917e:	add    al,BYTE PTR [rax]
 1059180:	sbb    BYTE PTR [rax],al
 1059182:	add    BYTE PTR [rax],al
 1059184:	(bad)  
 1059185:	push   rcx
 1059186:	add    al,BYTE PTR [rax]
 1059188:	add    eax,0xe1000000
 105918d:	push   rcx
 105918e:	add    al,BYTE PTR [rax]
 1059190:	sbb    DWORD PTR [rax],eax
 1059192:	add    BYTE PTR [rax],al
 1059194:	rex.WX push rdx
 1059196:	add    al,BYTE PTR [rax]
 1059198:	add    eax,0x9d000000
 105919d:	push   rdx
 105919e:	add    al,BYTE PTR [rax]
 10591a0:	sbb    al,BYTE PTR [rax]
 10591a2:	add    BYTE PTR [rax],al
 10591a4:	xlat   BYTE PTR ds:[rbx]
 10591a5:	push   rdx
 10591a6:	add    al,BYTE PTR [rax]
 10591a8:	add    eax,0x21000000
 10591ad:	push   rbx
 10591ae:	add    al,BYTE PTR [rax]
 10591b0:	sbb    eax,DWORD PTR [rax]
 10591b2:	add    BYTE PTR [rax],al
 10591b4:	rex.RB push r11
 10591b6:	add    al,BYTE PTR [rax]
 10591b8:	sbb    eax,0x88000000
 10591bd:	push   rbx
 10591be:	add    al,BYTE PTR [rax]
 10591c0:	add    eax,0xee000000
 10591c5:	push   rbx
 10591c6:	add    al,BYTE PTR [rax]
 10591c8:	add    BYTE PTR [rax],al
 10591ca:	add    BYTE PTR [rax],al
 10591cc:	std    
 10591cd:	push   rbx
 10591ce:	add    al,BYTE PTR [rax]
 10591d0:	(bad)  
 10591d1:	(bad)  
 10591d2:	(bad)  
 10591d3:	dec    DWORD PTR [rdi]
 10591d5:	push   rsp
 10591d6:	add    al,BYTE PTR [rax]
 10591d8:	add    eax,0x63000000
 10591dd:	push   rsp
 10591de:	add    al,BYTE PTR [rax]
 10591e0:	(bad)  
 10591e1:	add    BYTE PTR [rax],al
 10591e3:	add    BYTE PTR [rdi+0x54],bh
 10591e6:	add    al,BYTE PTR [rax]
 10591e8:	add    eax,0x3000000
 10591ed:	push   rbp
 10591ee:	add    al,BYTE PTR [rax]
 10591f0:	(bad)  
 10591f1:	add    BYTE PTR [rax],al
 10591f3:	add    BYTE PTR [rax],dl
 10591f5:	push   rbp
 10591f6:	add    al,BYTE PTR [rax]
 10591f8:	add    eax,0x77000000
 10591fd:	push   rbp
 10591fe:	add    al,BYTE PTR [rax]
 1059200:	and    BYTE PTR [rax],al
 1059202:	add    BYTE PTR [rax],al
 1059204:	test   DWORD PTR [rbp+0x2],edx
 1059207:	add    BYTE PTR [rip+0xfffffffff0000000],al        # 0xfffffffff105920d
 105920d:	push   rbp
 105920e:	add    al,BYTE PTR [rax]
 1059210:	and    DWORD PTR [rax],eax
 1059212:	add    BYTE PTR [rax],al
 1059214:	adc    DWORD PTR [rsi+0x2],edx
 1059217:	add    BYTE PTR [rdx],ah
 1059219:	add    BYTE PTR [rax],al
 105921b:	add    BYTE PTR [rdi],ch
 105921d:	push   rsi
 105921e:	add    al,BYTE PTR [rax]
 1059220:	and    DWORD PTR [rax],eax
 1059222:	add    BYTE PTR [rax],al
 1059224:	imul   edx,DWORD PTR [rsi+0x2],0x0
 1059228:	and    eax,DWORD PTR [rax]
 105922a:	add    BYTE PTR [rax],al
 105922c:	jge    0x1059284
 105922e:	add    al,BYTE PTR [rax]
 1059230:	and    DWORD PTR [rax],eax
 1059232:	add    BYTE PTR [rax],al
 1059234:	(bad)  
 1059235:	push   rsi
 1059236:	add    al,BYTE PTR [rax]
 1059238:	and    al,0x0
 105923a:	add    BYTE PTR [rax],al
 105923c:	pushf  
 105923d:	push   rdi
 105923e:	add    al,BYTE PTR [rax]
 1059240:	and    DWORD PTR [rax],eax
 1059242:	add    BYTE PTR [rax],al
 1059244:	stos   DWORD PTR es:[rdi],eax
 1059245:	push   rdi
 1059246:	add    al,BYTE PTR [rax]
 1059248:	add    eax,0xf7000000
 105924d:	push   rdi
 105924e:	add    al,BYTE PTR [rax]
 1059250:	and    eax,0xa000000
 1059255:	pop    rax
 1059256:	add    al,BYTE PTR [rax]
 1059258:	add    BYTE PTR es:[rax],al
 105925b:	add    BYTE PTR [rcx],ch
 105925d:	pop    rax
 105925e:	add    al,BYTE PTR [rax]
 1059260:	and    eax,0x5e000000
 1059265:	pop    rax
 1059266:	add    al,BYTE PTR [rax]
 1059268:	(bad)  
 1059269:	add    BYTE PTR [rax],al
 105926b:	add    BYTE PTR [rcx+0x58],ah
 105926e:	add    al,BYTE PTR [rax]
 1059270:	and    eax,0x71000000
 1059275:	pop    rax
 1059276:	add    al,BYTE PTR [rax]
 1059278:	add    eax,0xb6000000
 105927d:	pop    rax
 105927e:	add    al,BYTE PTR [rax]
 1059280:	add    al,0x0
 1059282:	add    BYTE PTR [rax],al
 1059284:	rcr    BYTE PTR [rax+0x2],1
 1059287:	add    BYTE PTR [rdx],al
 1059289:	add    BYTE PTR [rax],al
 105928b:	add    dl,ch
 105928d:	pop    rax
 105928e:	add    al,BYTE PTR [rax]
 1059290:	add    BYTE PTR [rax],al
 1059292:	add    BYTE PTR [rax],al
 1059294:	stc    
 1059295:	pop    rax
 1059296:	add    al,BYTE PTR [rax]
 1059298:	(bad)  
 1059299:	(bad)  
 105929a:	(bad)  
 105929b:	dec    DWORD PTR [rbx]
 105929d:	pop    rcx
 105929e:	add    al,BYTE PTR [rax]
 10592a0:	add    eax,0x26000000
 10592a5:	pop    rcx
 10592a6:	add    al,BYTE PTR [rax]
 10592a8:	sub    BYTE PTR [rax],al
 10592aa:	add    BYTE PTR [rax],al
 10592ac:	push   rsp
 10592ad:	pop    rcx
 10592ae:	add    al,BYTE PTR [rax]
 10592b0:	add    eax,0x7a000000
 10592b5:	pop    rcx
 10592b6:	add    al,BYTE PTR [rax]
 10592b8:	sub    DWORD PTR [rax],eax
 10592ba:	add    BYTE PTR [rax],al
 10592bc:	xchg   ebp,eax
 10592bd:	pop    rcx
 10592be:	add    al,BYTE PTR [rax]
 10592c0:	sub    al,BYTE PTR [rax]
 10592c2:	add    BYTE PTR [rax],al
 10592c4:	test   al,0x59
 10592c6:	add    al,BYTE PTR [rax]
 10592c8:	sub    eax,DWORD PTR [rax]
 10592ca:	add    BYTE PTR [rax],al
 10592cc:	(bad)  
 10592cd:	pop    rcx
 10592ce:	add    al,BYTE PTR [rax]
 10592d0:	sub    al,BYTE PTR [rax]
 10592d2:	add    BYTE PTR [rax],al
 10592d4:	(bad)  
 10592d5:	pop    rcx
 10592d6:	add    al,BYTE PTR [rax]
 10592d8:	sub    DWORD PTR [rax],eax
 10592da:	add    BYTE PTR [rax],al
 10592dc:	or     bl,BYTE PTR [rdx+0x2]
 10592df:	add    BYTE PTR [rax+rax*1],ch
 10592e2:	add    BYTE PTR [rax],al
 10592e4:	or     eax,0x2900025a
 10592e9:	add    BYTE PTR [rax],al
 10592eb:	add    BYTE PTR [rsi],bl
 10592ed:	pop    rdx
 10592ee:	add    al,BYTE PTR [rax]
 10592f0:	add    eax,0x45000000
 10592f5:	pop    rdx
 10592f6:	add    al,BYTE PTR [rax]
 10592f8:	sub    eax,0x64000000
 10592fd:	pop    rdx
 10592fe:	add    al,BYTE PTR [rax]
 1059300:	add    eax,0x98000000
 1059305:	pop    rdx
 1059306:	add    al,BYTE PTR [rax]
 1059308:	add    al,0x0
 105930a:	add    BYTE PTR [rax],al
 105930c:	mov    dl,0x5a
 105930e:	add    al,BYTE PTR [rax]
 1059310:	add    al,BYTE PTR [rax]
 1059312:	add    BYTE PTR [rax],al
 1059314:	int3   
 1059315:	pop    rdx
 1059316:	add    al,BYTE PTR [rax]
 1059318:	add    BYTE PTR [rax],al
 105931a:	add    BYTE PTR [rax],al
 105931c:	fistp  DWORD PTR [rdx+0x2]
 105931f:	add    bh,bh
 1059321:	(bad)  
 1059322:	(bad)  
 1059323:	(bad)  
 1059324:	in     eax,dx
 1059325:	pop    rdx
 1059326:	add    al,BYTE PTR [rax]
 1059328:	add    eax,0x1f000000
 105932d:	pop    rbx
 105932e:	add    al,BYTE PTR [rax]
 1059330:	add    al,0x0
 1059332:	add    BYTE PTR [rax],al
 1059334:	cmp    DWORD PTR [rbx+0x2],ebx
 1059337:	add    BYTE PTR [rdx],al
 1059339:	add    BYTE PTR [rax],al
 105933b:	add    BYTE PTR [rbx+0x5b],dl
 105933e:	add    al,BYTE PTR [rax]
 1059340:	add    BYTE PTR [rax],al
 1059342:	add    BYTE PTR [rax],al
 1059344:	(bad)  
 1059345:	pop    rbx
 1059346:	add    al,BYTE PTR [rax]
 1059348:	(bad)  
 1059349:	(bad)  
 105934a:	(bad)  
 105934b:	push   QWORD PTR [rbx+rbx*2+0x2]
 105934f:	add    BYTE PTR [rip+0xffffffffa4000000],al        # 0xffffffffa5059355
 1059355:	pop    rbx
 1059356:	add    al,BYTE PTR [rax]
 1059358:	add    BYTE PTR cs:[rax],al
 105935b:	add    bl,al
 105935d:	pop    rbx
 105935e:	add    al,BYTE PTR [rax]
 1059360:	add    eax,0x3000000
 1059365:	pop    rsp
 1059366:	add    al,BYTE PTR [rax]
 1059368:	add    al,0x0
 105936a:	add    BYTE PTR [rax],al
 105936c:	sbb    eax,0x200025c
 1059371:	add    BYTE PTR [rax],al
 1059373:	add    BYTE PTR [rdi],dh
 1059375:	pop    rsp
 1059376:	add    al,BYTE PTR [rax]
 1059378:	add    BYTE PTR [rax],al
 105937a:	add    BYTE PTR [rax],al
 105937c:	rex.RX pop rsp
 105937e:	add    al,BYTE PTR [rax]
 1059380:	(bad)  
 1059381:	(bad)  
 1059382:	(bad)  
 1059383:	call   FWORD PTR [rax+0x5c]
 1059386:	add    al,BYTE PTR [rax]
 1059388:	add    eax,0x71000000
 105938d:	pop    rsp
 105938e:	add    al,BYTE PTR [rax]
 1059390:	(bad)  
 1059391:	add    BYTE PTR [rax],al
 1059393:	add    BYTE PTR [rcx+0x3000025c],cl
 1059399:	add    BYTE PTR [rax],al
 105939b:	add    BYTE PTR [rcx+0x3100025c],ah
 10593a1:	add    BYTE PTR [rax],al
 10593a3:	add    BYTE PTR [rcx+0x3300025c],bh
 10593a9:	add    BYTE PTR [rax],al
 10593ab:	add    al,cl
 10593ad:	pop    rsp
 10593ae:	add    al,BYTE PTR [rax]
 10593b0:	xor    al,0x0
 10593b2:	add    BYTE PTR [rax],al
 10593b4:	xlat   BYTE PTR ds:[rbx]
 10593b5:	pop    rsp
 10593b6:	add    al,BYTE PTR [rax]
 10593b8:	xor    eax,0x9000000
 10593bd:	pop    rbp
 10593be:	add    al,BYTE PTR [rax]
 10593c0:	add    eax,0x18000000
 10593c5:	pop    rbp
 10593c6:	add    al,BYTE PTR [rax]
 10593c8:	add    al,0x0
 10593ca:	add    BYTE PTR [rax],al
 10593cc:	xor    bl,BYTE PTR [rbp+0x2]
 10593cf:	add    BYTE PTR [rdx],al
 10593d1:	add    BYTE PTR [rax],al
 10593d3:	add    BYTE PTR [rbp+rbx*2+0x2],cl
 10593d7:	add    BYTE PTR [rax],al
 10593d9:	add    BYTE PTR [rax],al
 10593db:	add    BYTE PTR [rbx+0x5d],bl
 10593de:	add    al,BYTE PTR [rax]
 10593e0:	(bad)  
 10593e1:	(bad)  
 10593e2:	(bad)  
 10593e3:	jmp    FWORD PTR [rbp+0x5d]
 10593e6:	add    al,BYTE PTR [rax]
 10593e8:	xor    eax,0x7a000000
 10593ed:	pop    rbp
 10593ee:	add    al,BYTE PTR [rax]
 10593f0:	add    eax,0x89000000
 10593f5:	pop    rbp
 10593f6:	add    al,BYTE PTR [rax]
 10593f8:	add    al,0x0
 10593fa:	add    BYTE PTR [rax],al
 10593fc:	movabs ds:0xbd0000000200025d,eax
 1059405:	pop    rbp
 1059406:	add    al,BYTE PTR [rax]
 1059408:	add    BYTE PTR [rax],al
 105940a:	add    BYTE PTR [rax],al
 105940c:	int3   
 105940d:	pop    rbp
 105940e:	add    al,BYTE PTR [rax]
 1059410:	(bad)  
 1059411:	(bad)  
 1059412:	(bad)  
 1059413:	(bad)  
 1059414:	ficomp WORD PTR [rbp+0x2]
 1059417:	add    BYTE PTR [rip+0xffffffffed000000],dh        # 0xffffffffee05941d
 105941d:	pop    rbp
 105941e:	add    al,BYTE PTR [rax]
 1059420:	add    BYTE PTR ss:[rax],al
 1059423:	add    ah,bh
 1059425:	pop    rbp
 1059426:	add    al,BYTE PTR [rax]
 1059428:	(bad)  
 1059429:	add    BYTE PTR [rax],al
 105942b:	add    BYTE PTR [rdi],cl
 105942d:	pop    rsi
 105942e:	add    al,BYTE PTR [rax]
 1059430:	cmp    BYTE PTR [rax],al
 1059432:	add    BYTE PTR [rax],al
 1059434:	and    DWORD PTR [rsi+0x2],ebx
 1059437:	add    BYTE PTR [rdi],dh
 1059439:	add    BYTE PTR [rax],al
 105943b:	add    BYTE PTR [rax+0x3600025f],dl
 1059441:	add    BYTE PTR [rax],al
 1059443:	add    BYTE PTR [rdi+0x3500025f],bl
 1059449:	add    BYTE PTR [rax],al
 105944b:	add    BYTE PTR [rsi+0x500025f],ch
 1059451:	add    BYTE PTR [rax],al
 1059453:	add    BYTE PTR [rbp+0x400025f],bh
 1059459:	add    BYTE PTR [rax],al
 105945b:	add    bh,dl
 105945d:	pop    rdi
 105945e:	add    al,BYTE PTR [rax]
 1059460:	add    al,BYTE PTR [rax]
 1059462:	add    BYTE PTR [rax],al
 1059464:	icebp  
 1059465:	pop    rdi
 1059466:	add    al,BYTE PTR [rax]
 1059468:	add    BYTE PTR [rax],al
 105946a:	add    BYTE PTR [rax],al
 105946c:	add    BYTE PTR [rax+0x2],ah
 105946f:	add    bh,bh
 1059471:	(bad)  
 1059472:	(bad)  
 1059473:	call   QWORD PTR [rdx]
 1059475:	(bad)  
 1059476:	add    al,BYTE PTR [rax]
 1059478:	(bad)  
 1059479:	add    BYTE PTR [rax],al
 105947b:	add    BYTE PTR [rsi],ch
 105947d:	(bad)  
 105947e:	add    al,BYTE PTR [rax]
 1059480:	cmp    DWORD PTR [rax],eax
 1059482:	add    BYTE PTR [rax],al
 1059484:	rex.WRB (bad) 
 1059486:	add    al,BYTE PTR [rax]
 1059488:	(bad)  
 1059489:	add    BYTE PTR [rax],al
 105948b:	add    BYTE PTR [rdi+0x61],cl
 105948e:	add    al,BYTE PTR [rax]
 1059490:	cmp    al,BYTE PTR [rax]
 1059492:	add    BYTE PTR [rax],al
 1059494:	outs   dx,BYTE PTR ds:[rsi]
 1059495:	(bad)  
 1059496:	add    al,BYTE PTR [rax]
 1059498:	(bad)  
 1059499:	add    BYTE PTR [rax],al
 105949b:	add    dl,dh
 105949d:	(bad)  
 105949e:	add    al,BYTE PTR [rax]
 10594a0:	cmp    eax,DWORD PTR [rax]
 10594a2:	add    BYTE PTR [rax],al
 10594a4:	sub    esp,DWORD PTR [rdx+0x2]
 10594a7:	add    BYTE PTR [rdi],dh
 10594a9:	add    BYTE PTR [rax],al
 10594ab:	add    BYTE PTR [rsi+0x62],bl
 10594ae:	add    al,BYTE PTR [rax]
 10594b0:	cmp    al,0x0
 10594b2:	add    BYTE PTR [rax],al
 10594b4:	xchg   edi,eax
 10594b5:	(bad)  
 10594b7:	add    BYTE PTR [rdi],dh
 10594b9:	add    BYTE PTR [rax],al
 10594bb:	add    al,cl
 10594bd:	(bad)  
 10594bf:	add    BYTE PTR [rsi],dh
 10594c1:	add    BYTE PTR [rax],al
 10594c3:	add    bh,dl
 10594c5:	(bad)  
 10594c7:	add    BYTE PTR [rip+0xffffffffe6000000],dh        # 0xffffffffe70594cd
 10594cd:	(bad)  
 10594cf:	add    BYTE PTR [rip+0xfffffffff5000000],al        # 0xfffffffff60594d5
 10594d5:	(bad)  
 10594d7:	add    BYTE PTR [rax+rax*1],al
 10594da:	add    BYTE PTR [rax],al
 10594dc:	or     esp,DWORD PTR [rbx+0x2]
 10594df:	add    BYTE PTR [rdx],al
 10594e1:	add    BYTE PTR [rax],al
 10594e3:	add    BYTE PTR [rip+0x263],ah        # 0x105974c
 10594e9:	add    BYTE PTR [rax],al
 10594eb:	add    BYTE PTR [rbx+riz*2],dh
 10594ee:	add    al,BYTE PTR [rax]
 10594f0:	(bad)  
 10594f1:	(bad)  
 10594f2:	(bad)  
 10594f3:	inc    DWORD PTR [rsi+0x63]
 10594f6:	add    al,BYTE PTR [rax]
 10594f8:	(bad)  
 10594f9:	add    BYTE PTR [rax],al
 10594fb:	add    BYTE PTR [rbp+0x63],dl
 10594fe:	add    al,BYTE PTR [rax]
 1059500:	cmp    eax,0x85000000
 1059505:	movsxd eax,DWORD PTR [rdx]
 1059507:	add    BYTE PTR [rsi],bh
 1059509:	add    BYTE PTR [rax],al
 105950b:	add    BYTE PTR [rdi+0x3d000263],dl
 1059511:	add    BYTE PTR [rax],al
 1059513:	add    cl,dl
 1059515:	movsxd eax,DWORD PTR [rdx]
 1059517:	add    BYTE PTR [rdi],bh
 1059519:	add    BYTE PTR [rax],al
 105951b:	add    cl,ch
 105951d:	movsxd eax,DWORD PTR [rdx]
 105951f:	add    BYTE PTR [rax+0x0],al
 1059522:	add    BYTE PTR [rax],al
 1059524:	add    ah,BYTE PTR [rdx+rax*1+0x0]
 1059528:	add    BYTE PTR [r8],al
 105952b:	add    BYTE PTR [rsp+riz*2],dl
 105952e:	add    al,BYTE PTR [rax]
 1059530:	add    BYTE PTR [rax],al
 1059533:	add    BYTE PTR [rbx],ah
 1059535:	add    al,BYTE PTR fs:[rax]
 1059538:	(bad)  
 1059539:	add    BYTE PTR [rax],al
 105953b:	add    BYTE PTR [rdx],dh
 105953d:	add    al,BYTE PTR fs:[rax]
 1059540:	cmp    eax,0x78000000
 1059545:	add    al,BYTE PTR fs:[rax]
 1059548:	rex.X add BYTE PTR [rax],al
 105954b:	add    BYTE PTR [rax],bh
 105954d:	add    al,BYTE PTR gs:[rax]
 1059550:	rex.XB add BYTE PTR [r8],al
 1059553:	add    BYTE PTR [rbp+riz*2+0x2],dh
 1059557:	add    BYTE PTR [rax+rax*1+0x0],al
 105955b:	add    BYTE PTR [rbx+0x45000265],al
 1059561:	add    BYTE PTR [rax],al
 1059563:	add    BYTE PTR [rdx+0x46000265],dl
 1059569:	add    BYTE PTR [rax],al
 105956b:	add    dl,dl
 105956d:	add    al,BYTE PTR gs:[rax]
 1059570:	add    BYTE PTR [r8],r8b
 1059573:	add    cl,ah
 1059575:	add    al,BYTE PTR gs:[rax]
 1059578:	add    BYTE PTR [rax],r8b
 105957b:	add    al,dh
 105957d:	add    al,BYTE PTR gs:[rax]
 1059580:	rex.XB add BYTE PTR [r8],al
 1059583:	add    dh,bh
 1059585:	add    al,BYTE PTR gs:[rax]
 1059588:	rex.X add BYTE PTR [rax],al
 105958b:	add    BYTE PTR [rsi+riz*2],cl
 105958e:	add    al,BYTE PTR [rax]
 1059590:	cmp    eax,0x1b000000
 1059595:	data16 add al,BYTE PTR [rax]
 1059598:	(bad)  
 1059599:	add    BYTE PTR [rax],al
 105959b:	add    BYTE PTR [rdx],ch
 105959d:	data16 add al,BYTE PTR [rax]
 10595a0:	add    BYTE PTR ss:[rax],al
 10595a3:	add    BYTE PTR [rcx],bh
 10595a5:	data16 add al,BYTE PTR [rax]
 10595a8:	xor    eax,0x48000000
 10595ad:	data16 add al,BYTE PTR [rax]
 10595b0:	add    eax,0x57000000
 10595b5:	data16 add al,BYTE PTR [rax]
 10595b8:	add    al,0x0
 10595ba:	add    BYTE PTR [rax],al
 10595bc:	ins    DWORD PTR es:[rdi],dx
 10595bd:	data16 add al,BYTE PTR [rax]
 10595c0:	add    al,BYTE PTR [rax]
 10595c2:	add    BYTE PTR [rax],al
 10595c4:	and    DWORD PTR [rsi+0x2],0x0
 10595c8:	add    BYTE PTR [rax],al
 10595ca:	add    BYTE PTR [rax],al
 10595cc:	xchg   edx,eax
 10595cd:	data16 add al,BYTE PTR [rax]
 10595d0:	(bad)  
 10595d1:	(bad)  
 10595d2:	(bad)  
 10595d3:	jmp    QWORD PTR [rsi+riz*2+0x460002]
 10595da:	add    BYTE PTR [rax],al
 10595dc:	out    dx,eax
 10595dd:	data16 add al,BYTE PTR [rax]
 10595e0:	rex.RXB add BYTE PTR [r8],r8b
 10595e3:	add    BYTE PTR [rcx+0x48000268],bl
 10595e9:	add    BYTE PTR [rax],al
 10595eb:	add    BYTE PTR [rax+rbp*2+0x470002],ah
 10595f2:	add    BYTE PTR [rax],al
 10595f4:	mov    cl,0x68
 10595f6:	add    al,BYTE PTR [rax]
 10595f8:	rex.RX add BYTE PTR [rax],r8b
 10595fb:	add    dh,cl
 10595fd:	push   0x450002
 1059602:	add    BYTE PTR [rax],al
 1059604:	(bad)  [rax+0x2]
 1059607:	add    BYTE PTR [rax+rax*1+0x0],al
 105960b:	add    ah,ch
 105960d:	push   0x430002
 1059612:	add    BYTE PTR [rax],al
 1059614:	cli    
 1059615:	push   0x420002
 105961a:	add    BYTE PTR [rax],al
 105961c:	or     BYTE PTR [rcx+0x2],ch
 105961f:	add    BYTE PTR [rip+0x17000000],bh        # 0x18059625
 1059625:	imul   eax,DWORD PTR [rdx],0x3700
 105962b:	add    BYTE PTR [rsi],ah
 105962d:	imul   eax,DWORD PTR [rdx],0x3600
 1059633:	add    BYTE PTR [rip+0x35000269],dh        # 0x360598a2
 1059639:	add    BYTE PTR [rax],al
 105963b:	add    BYTE PTR [rcx+rbp*2+0x2],al
 105963f:	add    BYTE PTR [rip+0x53000000],al        # 0x54059645
 1059645:	imul   eax,DWORD PTR [rdx],0x400
 105964b:	add    BYTE PTR [rbp+0x69],ch
 105964e:	add    al,BYTE PTR [rax]
 1059650:	add    al,BYTE PTR [rax]
 1059652:	add    BYTE PTR [rax],al
 1059654:	xchg   DWORD PTR [rcx+0x2],ebp
 1059657:	add    BYTE PTR [rax],al
 1059659:	add    BYTE PTR [rax],al
 105965b:	add    BYTE PTR [rsi-0xfffd97],dl
 1059661:	(bad)  
 1059662:	(bad)  
 1059663:	jmp    FWORD PTR [rax+0x47000269]
 1059669:	add    BYTE PTR [rax],al
 105966b:	add    dh,cl
 105966d:	imul   eax,DWORD PTR [rdx],0x4900
 1059673:	add    dh,dh
 1059675:	imul   eax,DWORD PTR [rdx],0x4600
 105967b:	add    BYTE PTR [rbx],dl
 105967d:	push   0x2
 105967f:	add    BYTE PTR [rbp+0x0],al
 1059682:	add    BYTE PTR [rax],al
 1059684:	and    ch,BYTE PTR [rdx+0x2]
 1059687:	add    BYTE PTR [rax+rax*1+0x0],al
 105968b:	add    BYTE PTR [rcx],dh
 105968d:	push   0x2
 105968f:	add    BYTE PTR [rbx+0x0],al
 1059692:	add    BYTE PTR [rax],al
 1059694:	(bad)  
 1059695:	push   0x2
 1059697:	add    BYTE PTR [rdx+0x0],al
 105969a:	add    BYTE PTR [rax],al
 105969c:	rex.WRB push 0x2
 105969f:	add    BYTE PTR [rip+0x5c000000],bh        # 0x5d0596a5
 10596a5:	push   0x2
 10596a7:	add    BYTE PTR [rdi],dh
 10596a9:	add    BYTE PTR [rax],al
 10596ab:	add    BYTE PTR [rbx+0x6a],ch
 10596ae:	add    al,BYTE PTR [rax]
 10596b0:	add    BYTE PTR ss:[rax],al
 10596b3:	add    BYTE PTR [rdx+0x6a],bh
 10596b6:	add    al,BYTE PTR [rax]
 10596b8:	xor    eax,0x89000000
 10596bd:	push   0x2
 10596bf:	add    BYTE PTR [rip+0xffffffff98000000],al        # 0xffffffff990596c5
 10596c5:	push   0x2
 10596c7:	add    BYTE PTR [rax+rax*1],al
 10596ca:	add    BYTE PTR [rax],al
 10596cc:	mov    dh,0x6a
 10596ce:	add    al,BYTE PTR [rax]
 10596d0:	add    al,BYTE PTR [rax]
 10596d2:	add    BYTE PTR [rax],al
 10596d4:	int3   
 10596d5:	push   0x2
 10596d7:	add    BYTE PTR [rax],al
 10596d9:	add    BYTE PTR [rax],al
 10596db:	add    bl,bl
 10596dd:	push   0x2
 10596df:	add    bh,bh
 10596e1:	(bad)  
 10596e2:	(bad)  
 10596e3:	(bad)  
 10596e4:	in     eax,dx
 10596e5:	push   0x2
 10596e7:	add    BYTE PTR [rcx+0x0],cl
 10596ea:	add    BYTE PTR [rax],al
 10596ec:	cmp    ch,BYTE PTR [rbx+0x2]
 10596ef:	add    BYTE PTR [rdi+0x0],al
 10596f2:	add    BYTE PTR [rax],al
 10596f4:	imul   r8,QWORD PTR [r10],0x0
 10596f8:	rex.RX add BYTE PTR [rax],r8b
 10596fb:	add    BYTE PTR [rdx+0x6b],ch
 10596fe:	add    al,BYTE PTR [rax]
 1059700:	add    BYTE PTR [r8],r8b
 1059703:	add    BYTE PTR [rcx+0x6b],bh
 1059706:	add    al,BYTE PTR [rax]
 1059708:	add    BYTE PTR [rax],r8b
 105970b:	add    BYTE PTR [rax+0x4300026b],cl
 1059711:	add    BYTE PTR [rax],al
 1059713:	add    BYTE PTR [rsi+0x4200026b],dl
 1059719:	add    BYTE PTR [rax],al
 105971b:	add    BYTE PTR [rbx+rbp*2+0x3d0002],ah
 1059722:	add    BYTE PTR [rax],al
 1059724:	mov    bl,0x6b
 1059726:	add    al,BYTE PTR [rax]
 1059728:	(bad)  
 1059729:	add    BYTE PTR [rax],al
 105972b:	add    dl,al
 105972d:	imul   eax,DWORD PTR [rdx],0x0
 1059730:	add    BYTE PTR ss:[rax],al
 1059733:	add    cl,dl
 1059735:	imul   eax,DWORD PTR [rdx],0x0
 1059738:	xor    eax,0xe0000000
 105973d:	imul   eax,DWORD PTR [rdx],0x0
 1059740:	add    eax,0xef000000
 1059745:	imul   eax,DWORD PTR [rdx],0x0
 1059748:	add    al,0x0
 105974a:	add    BYTE PTR [rax],al
 105974c:	add    eax,0x200026c
 1059751:	add    BYTE PTR [rax],al
 1059753:	add    BYTE PTR [rbx],bl
 1059755:	ins    BYTE PTR es:[rdi],dx
 1059756:	add    al,BYTE PTR [rax]
 1059758:	add    BYTE PTR [rax],al
 105975a:	add    BYTE PTR [rax],al
 105975c:	sub    ch,BYTE PTR [rdx+rax*1+0x0]
 1059760:	(bad)  
 1059761:	(bad)  
 1059762:	(bad)  
 1059763:	(bad)  
 1059764:	cmp    al,0x6c
 1059766:	add    al,BYTE PTR [rax]
 1059768:	rex.WB add BYTE PTR [r8],al
 105976b:	add    BYTE PTR [rdi+0x6c],cl
 105976e:	add    al,BYTE PTR [rax]
 1059770:	rex.WX add BYTE PTR [rax],al
 1059773:	add    BYTE PTR [rsi+0x6c],ch
 1059776:	add    al,BYTE PTR [rax]
 1059778:	rex.WB add BYTE PTR [r8],al
 105977b:	add    bl,cl
 105977d:	ins    BYTE PTR es:[rdi],dx
 105977e:	add    al,BYTE PTR [rax]
 1059780:	rex.WXB add BYTE PTR [r8],al
 1059783:	add    BYTE PTR [rax+0x6e],ah
 1059786:	add    al,BYTE PTR [rax]
 1059788:	rex.WR add BYTE PTR [rax],r8b
 105978b:	add    BYTE PTR [rbx+0x4d00026e],dh
 1059791:	add    BYTE PTR [rax],al
 1059793:	add    BYTE PTR [rdx],ch
 1059795:	outs   dx,DWORD PTR ds:[rsi]
 1059796:	add    al,BYTE PTR [rax]
 1059798:	rex.WR add BYTE PTR [rax],r8b
 105979b:	add    bl,al
 105979d:	outs   dx,DWORD PTR ds:[rsi]
 105979e:	add    al,BYTE PTR [rax]
 10597a0:	rex.WXB add BYTE PTR [r8],al
 10597a3:	add    BYTE PTR [rax+rsi*2],dl
 10597a6:	add    al,BYTE PTR [rax]
 10597a8:	rex.WB add BYTE PTR [r8],al
 10597ab:	add    BYTE PTR [rbx],ah
 10597ad:	jo     0x10597b1
 10597af:	add    BYTE PTR [rdi+0x0],al
 10597b2:	add    BYTE PTR [rax],al
 10597b4:	cmp    esi,DWORD PTR [rax+0x2]
 10597b7:	add    BYTE PTR [rsi+0x0],al
 10597ba:	add    BYTE PTR [rax],al
 10597bc:	pop    rax
 10597bd:	jo     0x10597c1
 10597bf:	add    BYTE PTR [rbp+0x0],al
 10597c2:	add    BYTE PTR [rax],al
 10597c4:	addr32 jo 0x10597c9
 10597c7:	add    BYTE PTR [rax+rax*1+0x0],al
 10597cb:	add    BYTE PTR [rsi+0x70],dh
 10597ce:	add    al,BYTE PTR [rax]
 10597d0:	rex.XB add BYTE PTR [r8],al
 10597d3:	add    BYTE PTR [rax+rsi*2+0x420002],al
 10597da:	add    BYTE PTR [rax],al
 10597dc:	xchg   edx,eax
 10597dd:	jo     0x10597e1
 10597df:	add    BYTE PTR [rip+0xffffffffa1000000],bh        # 0xffffffffa20597e5
 10597e5:	jo     0x10597e9
 10597e7:	add    BYTE PTR [rdi],dh
 10597e9:	add    BYTE PTR [rax],al
 10597eb:	add    BYTE PTR [rax+0x36000270],dh
 10597f1:	add    BYTE PTR [rax],al
 10597f3:	add    BYTE PTR [rdi+0x35000270],bh
 10597f9:	add    BYTE PTR [rax],al
 10597fb:	add    dh,cl
 10597fd:	jo     0x1059801
 10597ff:	add    BYTE PTR [rip+0xffffffffdd000000],al        # 0xffffffffde059805
 1059805:	jo     0x1059809
 1059807:	add    BYTE PTR [rax+rax*1],al
 105980a:	add    BYTE PTR [rax],al
 105980c:	repz jo 0x1059811
 105980f:	add    BYTE PTR [rdx],al
 1059811:	add    BYTE PTR [rax],al
 1059813:	add    BYTE PTR [rcx],cl
 1059815:	jno    0x1059819
 1059817:	add    BYTE PTR [rax],al
 1059819:	add    BYTE PTR [rax],al
 105981b:	add    BYTE PTR [rax],bl
 105981d:	jno    0x1059821
 105981f:	add    bh,bh
 1059821:	(bad)  
 1059822:	(bad)  
 1059823:	jmp    FWORD PTR [rdx]
 1059825:	jno    0x1059829
 1059827:	add    BYTE PTR [rbx+0x0],cl
 105982a:	add    BYTE PTR [rax],al
 105982c:	mov    DWORD PTR [rcx+0x2],esi
 105982f:	add    BYTE PTR [rsi+0x0],cl
 1059832:	add    BYTE PTR [rax],al
 1059834:	(bad)
 1059837:	add    BYTE PTR [rbx+0x0],cl
 105983a:	add    BYTE PTR [rax],al
 105983c:	test   DWORD PTR [rdx+0x2],esi
 105983f:	add    BYTE PTR [rcx+0x0],cl
 1059842:	add    BYTE PTR [rax],al
 1059844:	xchg   esp,eax
 1059845:	jb     0x1059849
 1059847:	add    BYTE PTR [rdi+0x0],al
 105984a:	add    BYTE PTR [rax],al
 105984c:	lods   al,BYTE PTR ds:[rsi]
 105984d:	jb     0x1059851
 105984f:	add    BYTE PTR [rsi+0x0],al
 1059852:	add    BYTE PTR [rax],al
 1059854:	leave  
 1059855:	jb     0x1059859
 1059857:	add    BYTE PTR [rbp+0x0],al
 105985a:	add    BYTE PTR [rax],al
 105985c:	fdiv   DWORD PTR [rdx+0x2]
 105985f:	add    BYTE PTR [rax+rax*1+0x0],al
 1059863:	add    bh,ah
 1059865:	jb     0x1059869
 1059867:	add    BYTE PTR [rbx+0x0],al
 105986a:	add    BYTE PTR [rax],al
 105986c:	cmc    
 105986d:	jb     0x1059871
 105986f:	add    BYTE PTR [rdx+0x0],al
 1059872:	add    BYTE PTR [rax],al
 1059874:	add    esi,DWORD PTR [rbx+0x2]
 1059877:	add    BYTE PTR [rip+0x12000000],bh        # 0x1305987d
 105987d:	jae    0x1059881
 105987f:	add    BYTE PTR [rdi],dh
 1059881:	add    BYTE PTR [rax],al
 1059883:	add    BYTE PTR [rcx],ah
 1059885:	jae    0x1059889
 1059887:	add    BYTE PTR [rsi],dh
 1059889:	add    BYTE PTR [rax],al
 105988b:	add    BYTE PTR [rax],dh
 105988d:	jae    0x1059891
 105988f:	add    BYTE PTR [rip+0x3f000000],dh        # 0x40059895
 1059895:	jae    0x1059899
 1059897:	add    BYTE PTR [rip+0x4e000000],al        # 0x4f05989d
 105989d:	jae    0x10598a1
 105989f:	add    BYTE PTR [rax+rax*1],al
 10598a2:	add    BYTE PTR [rax],al
 10598a4:	fs jae 0x10598a9
 10598a7:	add    BYTE PTR [rdx],al
 10598a9:	add    BYTE PTR [rax],al
 10598ab:	add    BYTE PTR [rdx+0x73],bh
 10598ae:	add    al,BYTE PTR [rax]
 10598b0:	add    BYTE PTR [rax],al
 10598b2:	add    BYTE PTR [rax],al
 10598b4:	mov    DWORD PTR [rbx+0x2],esi
 10598b7:	add    bh,bh
 10598b9:	(bad)  
 10598ba:	(bad)  
 10598bb:	call   FWORD PTR [rbx+0x4b000273]
 10598c1:	add    BYTE PTR [rax],al
 10598c3:	add    bh,dl
 10598c5:	jae    0x10598c9
 10598c7:	add    BYTE PTR [rcx+0x0],cl
 10598ca:	add    BYTE PTR [rax],al
 10598cc:	out    0x73,al
 10598ce:	add    al,BYTE PTR [rax]
 10598d0:	rex.RXB add BYTE PTR [r8],r8b
 10598d3:	add    BYTE PTR [rdi],al
 10598d5:	je     0x10598d9
 10598d7:	add    BYTE PTR [rsi+0x0],al
 10598da:	add    BYTE PTR [rax],al
 10598dc:	and    al,0x74
 10598de:	add    al,BYTE PTR [rax]
 10598e0:	add    BYTE PTR [r8],r8b
 10598e3:	add    BYTE PTR [rbx],dh
 10598e5:	je     0x10598e9
 10598e7:	add    BYTE PTR [rax+rax*1+0x0],al
 10598eb:	add    BYTE PTR [rdx+0x74],al
 10598ee:	add    al,BYTE PTR [rax]
 10598f0:	rex.XB add BYTE PTR [r8],al
 10598f3:	add    BYTE PTR [rax+0x74],dl
 10598f6:	add    al,BYTE PTR [rax]
 10598f8:	rex.X add BYTE PTR [rax],al
 10598fb:	add    BYTE PTR [rsi+0x74],bl
 10598fe:	add    al,BYTE PTR [rax]
 1059900:	cmp    eax,0x6d000000
 1059905:	je     0x1059909
 1059907:	add    BYTE PTR [rdi],dh
 1059909:	add    BYTE PTR [rax],al
 105990b:	add    BYTE PTR [rsp+rsi*2+0x2],bh
 105990f:	add    BYTE PTR [rsi],dh
 1059911:	add    BYTE PTR [rax],al
 1059913:	add    BYTE PTR [rbx+0x35000274],cl
 1059919:	add    BYTE PTR [rax],al
 105991b:	add    BYTE PTR [rdx+0x5000274],bl
 1059921:	add    BYTE PTR [rax],al
 1059923:	add    BYTE PTR [rcx+0x4000274],ch
 1059929:	add    BYTE PTR [rax],al
 105992b:	add    ah,al
 105992d:	je     0x1059931
 105992f:	add    BYTE PTR [rdx],al
 1059931:	add    BYTE PTR [rax],al
 1059933:	add    bh,bl
 1059935:	je     0x1059939
 1059937:	add    BYTE PTR [rax],al
 1059939:	add    BYTE PTR [rax],al
 105993b:	add    dh,ch
 105993d:	je     0x1059941
 105993f:	add    bh,bh
 1059941:	(bad)  
 1059942:	(bad)  
 1059943:	inc    DWORD PTR [rax]
 1059945:	jne    0x1059949
 1059947:	add    BYTE PTR [rbx+0x0],cl
 105994a:	add    BYTE PTR [rax],al
 105994c:	or     al,0x76
 105994e:	add    al,BYTE PTR [rax]
 1059950:	rex.WRXB add BYTE PTR [r8],r8b
 1059953:	add    BYTE PTR [rdi],bl
 1059955:	jbe    0x1059959
 1059957:	add    BYTE PTR [rax+0x0],dl
 105995a:	add    BYTE PTR [rax],al
 105995c:	rex.X jbe 0x1059961
 105995f:	add    BYTE PTR [rdi+0x0],cl
 1059962:	add    BYTE PTR [rax],al
 1059964:	xor    DWORD PTR [rsi+0x2],0x0
 1059968:	rex.WXB add BYTE PTR [r8],al
 105996b:	add    BYTE PTR [rbx+0x51000276],ch
 1059971:	add    BYTE PTR [rax],al
 1059973:	add    BYTE PTR [rdx+0x52000276],bh
 1059979:	add    BYTE PTR [rax],al
 105997b:	add    cl,cl
 105997d:	jbe    0x1059981
 105997f:	add    BYTE PTR [rax+rax*1+0x0],dl
 1059983:	add    cl,dl
 1059985:	jbe    0x1059989
 1059987:	add    BYTE PTR [rbp+0x0],dl
 105998a:	add    BYTE PTR [rax],al
 105998c:	loopne 0x1059a04
 105998e:	add    al,BYTE PTR [rax]
 1059990:	push   rsi
 1059991:	add    BYTE PTR [rax],al
 1059993:	add    BYTE PTR [rbp+0x77],bl
 1059996:	add    al,BYTE PTR [rax]
 1059998:	push   rdi
 1059999:	add    BYTE PTR [rax],al
 105999b:	add    BYTE PTR [rbx+0x58000277],al
 10599a1:	add    BYTE PTR [rax],al
 10599a3:	add    BYTE PTR [rdi+rsi*2+0x570002],dl
 10599aa:	add    BYTE PTR [rax],al
 10599ac:	mov    ebx,0x59000277
 10599b1:	add    BYTE PTR [rax],al
 10599b3:	add    bl,dl
 10599b5:	ja     0x10599b9
 10599b7:	add    BYTE PTR [rdx+0x0],bl
 10599ba:	add    BYTE PTR [rax],al
 10599bc:	in     al,0x77
 10599be:	add    al,BYTE PTR [rax]
 10599c0:	pop    rcx
 10599c1:	add    BYTE PTR [rax],al
 10599c3:	add    bl,dh
 10599c5:	ja     0x10599c9
 10599c7:	add    BYTE PTR [rdi+0x0],dl
 10599ca:	add    BYTE PTR [rax],al
 10599cc:	adc    edi,DWORD PTR [rax+0x2]
 10599cf:	add    BYTE PTR [rbx+0x0],bl
 10599d2:	add    BYTE PTR [rax],al
 10599d4:	lea    edi,[rax+0x2]
 10599d7:	add    BYTE PTR [rdi+0x0],dl
 10599da:	add    BYTE PTR [rax],al
 10599dc:	add    eax,0x56000279
 10599e1:	add    BYTE PTR [rax],al
 10599e3:	add    BYTE PTR [rdi+0x5c00027c],bh
 10599e9:	add    BYTE PTR [rax],al
 10599eb:	add    BYTE PTR [rsi],bh
 10599ed:	jge    0x10599f1
 10599ef:	add    BYTE PTR [rbp+0x0],bl
 10599f2:	add    BYTE PTR [rax],al
 10599f4:	ins    DWORD PTR es:[rdi],dx
 10599f5:	jge    0x10599f9
 10599f7:	add    BYTE PTR [rsi+0x0],bl
 10599fa:	add    BYTE PTR [rax],al
 10599fc:	test   al,0x7d
 10599fe:	add    al,BYTE PTR [rax]
 1059a00:	pop    rbp
 1059a01:	add    BYTE PTR [rax],al
 1059a03:	add    al,dh
 1059a05:	jle    0x1059a09
 1059a07:	add    BYTE PTR [rax+rax*1+0x0],bl
 1059a0b:	add    bh,bh
 1059a0d:	jle    0x1059a11
 1059a0f:	add    BYTE PTR [rsi+0x0],dl
 1059a12:	add    BYTE PTR [rax],al
 1059a14:	or     eax,DWORD PTR [rax+0x550002]
 1059a1a:	add    BYTE PTR [rax],al
 1059a1c:	sbb    al,BYTE PTR [rax+0x540002]
 1059a22:	add    BYTE PTR [rax],al
 1059a24:	cmp    al,BYTE PTR [rax+0x5f0002]
 1059a2a:	add    BYTE PTR [rax],al
 1059a2c:	rex.WB add BYTE PTR [r10],0x0
 1059a30:	push   rcx
 1059a31:	add    BYTE PTR [rax],al
 1059a33:	add    BYTE PTR [rax-0x80],bl
 1059a36:	add    al,BYTE PTR [rax]
 1059a38:	rex.WXB add BYTE PTR [r8],al
 1059a3b:	add    BYTE PTR [rsi-0x80],ch
 1059a3e:	add    al,BYTE PTR [rax]
 1059a40:	rex.WB add BYTE PTR [r8],al
 1059a43:	add    BYTE PTR [rbp-0x80],bh
 1059a46:	add    al,BYTE PTR [rax]
 1059a48:	rex.RXB add BYTE PTR [r8],r8b
 1059a4b:	add    BYTE PTR [rbx+0x46000280],dl
 1059a51:	add    BYTE PTR [rax],al
 1059a53:	add    BYTE PTR [rax+0x45000280],dh
 1059a59:	add    BYTE PTR [rax],al
 1059a5b:	add    BYTE PTR [rdi+0x44000280],bh
 1059a61:	add    BYTE PTR [rax],al
 1059a63:	add    dh,cl
 1059a65:	add    BYTE PTR [rdx],0x0
 1059a68:	rex.XB add BYTE PTR [r8],al
 1059a6b:	add    ah,bl
 1059a6d:	add    BYTE PTR [rdx],0x0
 1059a70:	rex.X add BYTE PTR [rax],al
 1059a73:	add    dl,ch
 1059a75:	add    BYTE PTR [rdx],0x0
 1059a78:	cmp    eax,0xf9000000
 1059a7d:	add    BYTE PTR [rdx],0x0
 1059a80:	(bad)  
 1059a81:	add    BYTE PTR [rax],al
 1059a83:	add    BYTE PTR [rax],cl
 1059a85:	add    DWORD PTR [rdx],0x3600
 1059a8b:	add    BYTE PTR [rdi],dl
 1059a8d:	add    DWORD PTR [rdx],0x3500
 1059a93:	add    BYTE PTR [rsi],ah
 1059a95:	add    DWORD PTR [rdx],0x500
 1059a9b:	add    BYTE PTR [rip+0x4000281],dh        # 0x5059d22
 1059aa1:	add    BYTE PTR [rax],al
 1059aa3:	add    BYTE PTR [rax-0x7f],dl
 1059aa6:	add    al,BYTE PTR [rax]
 1059aa8:	add    al,BYTE PTR [rax]
 1059aaa:	add    BYTE PTR [rax],al
 1059aac:	imul   eax,DWORD PTR [rcx+0x10002],0x0
 1059ab3:	add    BYTE PTR [rbx+0x281],bl
 1059ab9:	add    BYTE PTR [rax],al
 1059abb:	add    BYTE PTR [rdx-0xfffd7f],ch
 1059ac1:	(bad)  
 1059ac2:	(bad)  
 1059ac3:	(bad)  
 1059ac4:	mov    esp,0x37000281
 1059ac9:	add    BYTE PTR [rax],al
 1059acb:	add    ch,bl
 1059acd:	add    DWORD PTR [rdx],0x3600
 1059ad3:	add    ah,ch
 1059ad5:	add    DWORD PTR [rdx],0x3500
 1059adb:	add    bl,bh
 1059add:	add    DWORD PTR [rdx],0x500
 1059ae3:	add    BYTE PTR [rdx],cl
 1059ae5:	(bad)  
 1059ae6:	add    al,BYTE PTR [rax]
 1059ae8:	add    al,0x0
 1059aea:	add    BYTE PTR [rax],al
 1059aec:	and    BYTE PTR [rdx+0x20002],al
 1059af2:	add    BYTE PTR [rax],al
 1059af4:	ss (bad) 
 1059af6:	add    al,BYTE PTR [rax]
 1059af8:	add    BYTE PTR [rax],al
 1059afa:	add    BYTE PTR [rax],al
 1059afc:	rex.RB (bad) 
 1059afe:	add    al,BYTE PTR [rax]
 1059b00:	(bad)  
 1059b01:	(bad)  
 1059b02:	(bad)  
 1059b03:	call   QWORD PTR [rdx+rax*4+0x2]
 1059b07:	add    BYTE PTR [rax],al
 1059b09:	add    BYTE PTR [rax],al
 1059b0b:	add    BYTE PTR [rbx-0x7e],ah
 1059b0e:	add    al,BYTE PTR [rax]
 1059b10:	(bad)  
 1059b11:	(bad)  
 1059b12:	(bad)  
 1059b13:	jmp    QWORD PTR [rax+0x282]
 1059b19:	add    BYTE PTR [rax],al
 1059b1b:	add    BYTE PTR [rdi],bh
 1059b1d:	mov    esp,0x610004
 1059b22:	add    BYTE PTR [rax],al
 1059b24:	loop   0x1059ae2
 1059b26:	add    al,0x0
 1059b28:	add    BYTE PTR [rax],al
 1059b2a:	add    BYTE PTR [rax],al
 1059b2c:	add    DWORD PTR [rsi],eax
 1059b2e:	add    al,BYTE PTR [rax]
 1059b30:	(bad)  
 1059b31:	xor    al,BYTE PTR [rdx]
 1059b33:	push   rax
 1059b34:	sbb    DWORD PTR [rsp+rax*1],ecx
 1059b37:	add    BYTE PTR [rdx+rdx*8],cl
 1059b3a:	or     BYTE PTR [rax+0x7],dh
 1059b3d:	push   rax
 1059b3e:	(bad)  
 1059b3f:	xor    BYTE PTR [rsi+rdi*8+0x3d700003],dl
 1059b46:	add    BYTE PTR [rax],al
 1059b48:	adc    DWORD PTR [rcx],ebx
 1059b4a:	(bad)  
 1059b4b:	add    BYTE PTR [rcx],bl
 1059b4d:	or     al,BYTE PTR fs:[rax]
 1059b50:	adc    al,0x34
 1059b52:	or     BYTE PTR [rax],al
 1059b54:	(bad)  
 1059b55:	push   rdx
 1059b56:	add    dh,BYTE PTR [rax-0x6c]
 1059b59:	inc    BYTE PTR [rbx]
 1059b5b:	add    BYTE PTR [rax-0xffffc3],bl
 1059b61:	(bad)  
 1059b62:	(bad)  
 1059b63:	call   QWORD PTR [rax-0x1c]
 1059b66:	add    al,0x0
 1059b68:	rol    BYTE PTR [rdx-0xfffe],1
 1059b6e:	(bad)  
 1059b6f:	call   QWORD PTR [rax]
 1059b71:	add    DWORD PTR [rdx],0x0
 1059b74:	add    BYTE PTR [rax],al
 1059b76:	add    BYTE PTR [rax],al
 1059b78:	(bad)  
 1059b79:	add    DWORD PTR [rdx],0x0
 1059b7c:	(bad)  
 1059b7d:	(bad)  
 1059b7e:	(bad)  
 1059b7f:	call   QWORD PTR [rcx]
 1059b81:	sub    BYTE PTR [rax+rax*1],cl
 1059b84:	sub    BYTE PTR [rbx+rdx*1+0x0],ah
 1059b88:	and    al,0x54
 1059b8a:	adc    al,BYTE PTR [rax]
 1059b8c:	and    BYTE PTR [rcx+rdx*1],dh
 1059b8f:	add    BYTE PTR [rdx+rdx*4],dl
 1059b92:	adc    al,dh
 1059b94:	(bad)  
 1059b95:	loopne 0x1059ba3
 1059b97:	ror    BYTE PTR [rdx],1
 1059b99:	ror    BYTE PTR [rax],0x70
 1059b9c:	xchg   esp,eax
 1059b9d:	inc    BYTE PTR [rbx]
 1059b9f:	add    al,al
 1059ba1:	cmp    eax,0xffff0000
 1059ba6:	(bad)  
 1059ba7:	push   QWORD PTR [rax+0x4be]
 1059bad:	add    BYTE PTR [rax],al
 1059baf:	add    al,dl
 1059bb1:	mov    esi,0x10004
 1059bb6:	add    BYTE PTR [rax],al
 1059bb8:	lock mov esi,0x20004
 1059bbe:	add    BYTE PTR [rax],al
 1059bc0:	adc    BYTE PTR [rdi+0x30004],bh
 1059bc6:	add    BYTE PTR [rax],al
 1059bc8:	xor    BYTE PTR [rdi+0x40004],bh
 1059bce:	add    BYTE PTR [rax],al
 1059bd0:	push   rax
 1059bd1:	mov    edi,0x50004
 1059bd6:	add    BYTE PTR [rax],al
 1059bd8:	jo     0x1059b99
 1059bda:	add    al,0x0
 1059bdc:	(bad)  
 1059bdd:	add    BYTE PTR [rax],al
 1059bdf:	add    BYTE PTR [rax+0x70004bf],dl
 1059be5:	add    BYTE PTR [rax],al
 1059be7:	add    BYTE PTR [rax+0x80004bf],dh
 1059bed:	add    BYTE PTR [rax],al
 1059bef:	add    al,dl
 1059bf1:	mov    edi,0x90004
 1059bf6:	add    BYTE PTR [rax],al
 1059bf8:	lock mov edi,0xa0004
 1059bfe:	add    BYTE PTR [rax],al
 1059c00:	adc    al,al
 1059c02:	add    al,0x0
 1059c04:	or     eax,DWORD PTR [rax]
 1059c06:	add    BYTE PTR [rax],al
 1059c08:	xor    al,al
 1059c0a:	add    al,0x0
 1059c0c:	or     al,0x0
 1059c0e:	add    BYTE PTR [rax],al
 1059c10:	push   rax
 1059c11:	rol    BYTE PTR [rax+rax*1],0xd
 1059c15:	add    BYTE PTR [rax],al
 1059c17:	add    BYTE PTR [rax-0x40],dh
 1059c1a:	add    al,0x0
 1059c1c:	(bad)  
 1059c1d:	add    BYTE PTR [rax],al
 1059c1f:	add    BYTE PTR [rax-0x6ffffb40],dl
 1059c25:	add    DWORD PTR [rdx],0x0
 1059c28:	(bad)  
 1059c29:	(bad)  
 1059c2a:	(bad)  
 1059c2b:	call   rsp
 1059c2d:	add    DWORD PTR [rdx],0x0
 1059c30:	add    BYTE PTR [rax],al
 1059c32:	add    BYTE PTR [rax],al
 1059c34:	fild   WORD PTR [rbx+0x10002]
 1059c3a:	add    BYTE PTR [rax],al
 1059c3c:	(bad)  
 1059c3d:	add    DWORD PTR [rdx],0x0
 1059c40:	add    al,BYTE PTR [rax]
 1059c42:	add    BYTE PTR [rax],al
 1059c44:	cmc    
 1059c45:	add    DWORD PTR [rdx],0x0
 1059c48:	add    eax,DWORD PTR [rax]
 1059c4a:	add    BYTE PTR [rax],al
 1059c4c:	add    eax,DWORD PTR [rdx+rax*1+0x400]
 1059c53:	add    BYTE PTR [rcx],dl
 1059c55:	test   BYTE PTR [rdx],al
 1059c57:	add    BYTE PTR [rip+0x22000000],al        # 0x23059c5d
 1059c5d:	test   BYTE PTR [rdx],al
 1059c5f:	add    BYTE PTR [rsi],al
 1059c61:	add    BYTE PTR [rax],al
 1059c63:	add    BYTE PTR [rbx],dh
 1059c65:	test   BYTE PTR [rdx],al
 1059c67:	add    BYTE PTR [rdi],al
 1059c69:	add    BYTE PTR [rax],al
 1059c6b:	add    BYTE PTR [rsp+rax*4+0x2],al
 1059c6f:	add    BYTE PTR [rax],cl
 1059c71:	add    BYTE PTR [rax],al
 1059c73:	add    BYTE PTR [rbp-0x7c],dl
 1059c76:	add    al,BYTE PTR [rax]
 1059c78:	or     DWORD PTR [rax],eax
 1059c7a:	add    BYTE PTR [rax],al
 1059c7c:	data16 test BYTE PTR [rdx],al
 1059c7f:	add    BYTE PTR [rdx],cl
 1059c81:	add    BYTE PTR [rax],al
 1059c83:	add    BYTE PTR [rdi-0x7c],dh
 1059c86:	add    al,BYTE PTR [rax]
 1059c88:	or     eax,DWORD PTR [rax]
 1059c8a:	add    BYTE PTR [rax],al
 1059c8c:	test   DWORD PTR [rdx+rax*1+0xc00],eax
 1059c93:	add    dh,al
 1059c95:	test   BYTE PTR [rdx],al
 1059c97:	add    BYTE PTR [rip+0xfffffffffe000000],cl        # 0xffffffffff059c9d
 1059c9d:	test   BYTE PTR [rdx],al
 1059c9f:	add    BYTE PTR [rsi],cl
 1059ca1:	add    BYTE PTR [rax],al
 1059ca3:	add    BYTE PTR [rbx],ch
 1059ca5:	test   DWORD PTR [rdx],eax
 1059ca7:	add    BYTE PTR [rdi],cl
 1059ca9:	add    BYTE PTR [rax],al
 1059cab:	add    BYTE PTR [rdx-0xfffd7a],cl
 1059cb1:	(bad)  
 1059cb2:	(bad)  
 1059cb3:	call   FWORD PTR [rcx]
 1059cb5:	and    al,BYTE PTR [rsi]
 1059cb7:	add    BYTE PTR [rdx],ah
 1059cb9:	ltr    WORD PTR fs:[rip+0xf000e34]        # 0x1005aaf5
 1059cc1:	xchg   edx,eax
 1059cc2:	or     esi,DWORD PTR [rax-0x6c]
 1059cc5:	inc    BYTE PTR [rbx]
 1059cc7:	add    al,ch
 1059cc9:	cmp    eax,0xffff0000
 1059cce:	(bad)  
 1059ccf:	call   rax
 1059cd1:	mov    ch,0x4
	...
 1059ce3:	add    BYTE PTR [rcx],al
 1059ce5:	add    BYTE PTR [rax],al
 1059ce7:	add    BYTE PTR [rcx],al
 1059ce9:	add    BYTE PTR [rax],al
 1059ceb:	add    BYTE PTR [rdx],al
 1059ced:	add    BYTE PTR [rax],al
 1059cef:	add    BYTE PTR [rcx],al
 1059cf1:	add    BYTE PTR [rax],al
 1059cf3:	add    al,bh
 1059cf5:	pushf  
 1059cf6:	add    eax,0x0
	...
 1059d03:	add    BYTE PTR [rax],al
 1059d05:	mov    dh,0x4
 1059d07:	add    BYTE PTR [rax+0x0],bl
 1059d0a:	add    BYTE PTR [rax],al
 1059d0c:	rol    BYTE PTR [rsi-0xfffe],0xff
 1059d13:	(bad)  
 1059d14:	call   0x1059f9f
 1059d19:	add    BYTE PTR [rax],al
 1059d1b:	add    BYTE PTR [rax],ah
 1059d1d:	xchg   DWORD PTR [rdx],eax
 1059d1f:	add    BYTE PTR [rcx],al
 1059d21:	add    BYTE PTR [rax],al
 1059d23:	add    BYTE PTR [rcx+0x287],bl
 1059d29:	add    BYTE PTR [rax],al
 1059d2b:	add    BYTE PTR [rcx],al
 1059d2d:	(bad)  
 1059d2e:	add    al,BYTE PTR [rax]
 1059d30:	(bad)  
 1059d31:	xor    al,BYTE PTR [rdx]
 1059d33:	push   rax
 1059d34:	sbb    DWORD PTR [rdx],ecx
 1059d36:	add    al,BYTE PTR [rax]
 1059d38:	or     dh,BYTE PTR [rdx+0x6]
 1059d3b:	push   rax
 1059d3c:	xchg   esp,eax
 1059d3d:	inc    BYTE PTR [rbx]
 1059d3f:	add    al,ch
 1059d41:	cmp    eax,0xa010000
 1059d46:	add    al,0x0
 1059d48:	or     dh,BYTE PTR [rsi+rax*1]
 1059d4b:	add    BYTE PTR [rdx],cl
 1059d4d:	xor    al,BYTE PTR [rsi]
 1059d4f:	jo     0x1059d62
 1059d51:	adc    DWORD PTR [rax+rax*1],eax
 1059d54:	or     BYTE PTR [rdx+0x60037004],dl
 1059d5a:	add    dh,BYTE PTR [rax]
 1059d5c:	xchg   esp,eax
 1059d5d:	inc    BYTE PTR [rbx]
 1059d5f:	add    BYTE PTR [rax],dl
 1059d61:	add    BYTE PTR ds:[rax],al
 1059d64:	(bad)  
 1059d65:	(bad)  
 1059d66:	(bad)  
 1059d67:	jmp    rax
 1059d69:	jrcxz  0x1059d6f
 1059d6b:	add    BYTE PTR [rax],al
 1059d6d:	add    BYTE PTR [rax],al
 1059d6f:	add    al,dh
 1059d71:	jrcxz  0x1059d77
 1059d73:	add    BYTE PTR [rcx],al
 1059d75:	add    BYTE PTR [rax],al
 1059d77:	add    BYTE PTR [rax],al
 1059d79:	in     al,0x4
 1059d7b:	add    BYTE PTR [rax],al
 1059d7d:	add    BYTE PTR [rax],al
 1059d7f:	add    BYTE PTR [rax],dl
 1059d81:	in     al,0x4
 1059d83:	add    BYTE PTR [rax],al
 1059d85:	add    BYTE PTR [rax],al
 1059d87:	add    BYTE PTR [rax],ah
 1059d89:	in     al,0x4
 1059d8b:	add    BYTE PTR [rax],al
 1059d8d:	add    BYTE PTR [rax],al
 1059d8f:	add    BYTE PTR [rax],dh
 1059d91:	in     al,0x4
 1059d93:	add    BYTE PTR [rax-0x78],dh
 1059d96:	add    al,BYTE PTR [rax]
 1059d98:	(bad)  
 1059d99:	(bad)  
 1059d9a:	(bad)  
 1059d9b:	call   QWORD PTR [rbx+0x288]
 1059da1:	add    BYTE PTR [rax],al
 1059da3:	add    BYTE PTR [rdx+0x1000288],ch
 1059da9:	add    BYTE PTR [rax],al
 1059dab:	add    BYTE PTR [rbp+0x2000288],bh
 1059db1:	add    BYTE PTR [rax],al
 1059db3:	add    al,bl
 1059db5:	mov    BYTE PTR [rdx],al
 1059db7:	add    BYTE PTR [rcx],al
 1059db9:	add    BYTE PTR [rax],al
 1059dbb:	add    bh,ah
 1059dbd:	mov    BYTE PTR [rdx],al
 1059dbf:	add    BYTE PTR [rax],al
 1059dc1:	add    BYTE PTR [rax],al
 1059dc3:	add    BYTE PTR [rbx],bh
 1059dc5:	mov    DWORD PTR [rdx],eax
 1059dc7:	add    BYTE PTR [rbx],al
 1059dc9:	add    BYTE PTR [rax],al
 1059dcb:	add    BYTE PTR [rbx-0x77],ch
 1059dce:	add    al,BYTE PTR [rax]
 1059dd0:	add    BYTE PTR [rax],al
 1059dd2:	add    BYTE PTR [rax],al
 1059dd4:	mov    WORD PTR [rcx+0x40002],cs
 1059dda:	add    BYTE PTR [rax],al
 1059ddc:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1059ddd:	mov    DWORD PTR [rdx],eax
 1059ddf:	add    BYTE PTR [rax],al
 1059de1:	add    BYTE PTR [rax],al
 1059de3:	add    cl,bh
 1059de5:	mov    DWORD PTR [rdx],eax
 1059de7:	add    BYTE PTR [rip+0x1c000000],al        # 0x1d059ded
 1059ded:	mov    al,BYTE PTR [rdx]
 1059def:	add    BYTE PTR [rax],al
 1059df1:	add    BYTE PTR [rax],al
 1059df3:	add    BYTE PTR [rsi],bl
 1059df5:	mov    WORD PTR [rdx],es
 1059df7:	add    bh,bh
 1059df9:	(bad)  
 1059dfa:	(bad)  
 1059dfb:	call   QWORD PTR [rcx]
 1059dfd:	(bad)  
 1059dfe:	or     BYTE PTR [rax],al
 1059e00:	(bad)  
 1059e01:	push   rsp
 1059e02:	adc    BYTE PTR [rax],al
 1059e04:	(bad)  
 1059e05:	xor    al,0xf
 1059e07:	add    BYTE PTR [rcx],cl
 1059e09:	xchg   edx,eax
 1059e0a:	add    eax,0x27003e0
 1059e0f:	(bad)  
 1059e10:	xchg   esp,eax
 1059e11:	inc    BYTE PTR [rbx]
 1059e13:	add    BYTE PTR [rax],bh
 1059e15:	add    BYTE PTR ds:[rax],al
 1059e18:	(bad)  
 1059e19:	(bad)  
 1059e1a:	(bad)  
 1059e1b:	inc    DWORD PTR [rax]
 1059e1d:	mov    DWORD PTR [rax+rax*1],0x0
 1059e24:	adc    bh,al
 1059e26:	add    al,0x0
 1059e28:	rex mov WORD PTR [rdx],es
 1059e2b:	add    bh,bh
 1059e2d:	(bad)  
 1059e2e:	(bad)  
 1059e2f:	jmp    QWORD PTR [rbp+0x28c]
 1059e35:	add    BYTE PTR [rax],al
 1059e37:	add    BYTE PTR [rbp+0x100028c],dh
 1059e3d:	add    BYTE PTR [rax],al
 1059e3f:	add    bl,dl
 1059e41:	mov    WORD PTR [rdx],es
 1059e43:	add    BYTE PTR [rax],al
 1059e45:	add    BYTE PTR [rax],al
 1059e47:	add    BYTE PTR [rbp-0x73],dh
 1059e4a:	add    al,BYTE PTR [rax]
 1059e4c:	(bad)  
 1059e4d:	(bad)  
 1059e4e:	(bad)  
 1059e4f:	call   FWORD PTR [rcx]
 1059e51:	xor    ecx,DWORD PTR [rcx]
 1059e53:	add    BYTE PTR [rdx],bl
 1059e55:	add    DWORD PTR [rax+0x9f00b01],esp
 1059e5b:	loopne 0x1059e64
 1059e5d:	rol    BYTE PTR [rip+0x3600470],0x30        # 0x465a2d4
 1059e64:	add    dl,BYTE PTR [rax+0x0]
 1059e67:	add    BYTE PTR [rax+0x600003fe],ah
 1059e6d:	add    BYTE PTR ds:[rax],al
 1059e70:	repnz or al,0x0
 1059e73:	add    bh,bh
 1059e75:	(bad)  
 1059e76:	(bad)  
 1059e77:	call   QWORD PTR [rax-0xf]
 1059e7a:	add    al,0x0
 1059e7c:	add    BYTE PTR [rax],al
 1059e7e:	add    BYTE PTR [rax],al
 1059e80:	(bad)  
 1059e81:	icebp  
 1059e82:	add    al,0x0
 1059e84:	add    DWORD PTR [rax],eax
 1059e86:	add    BYTE PTR [rax],al
 1059e88:	jo     0x1059e7b
 1059e8a:	add    al,0x0
 1059e8c:	add    al,BYTE PTR [rax]
 1059e8e:	add    BYTE PTR [rax],al
 1059e90:	xor    cl,0x4
 1059e93:	add    BYTE PTR [rbx],al
 1059e95:	add    BYTE PTR [rax],al
 1059e97:	add    BYTE PTR [rax+0x40004f1],dl
 1059e9d:	add    BYTE PTR [rax],al
 1059e9f:	add    BYTE PTR [rax+0x50004f1],ah
 1059ea5:	add    BYTE PTR [rax],al
 1059ea7:	add    BYTE PTR [rax+0x60004f1],dh
 1059ead:	add    BYTE PTR [rax],al
 1059eaf:	add    al,al
 1059eb1:	icebp  
 1059eb2:	add    al,0x0
 1059eb4:	(bad)  
 1059eb5:	add    BYTE PTR [rax],al
 1059eb7:	add    al,dl
 1059eb9:	icebp  
 1059eba:	add    al,0x0
 1059ebc:	or     BYTE PTR [rax],al
 1059ebe:	add    BYTE PTR [rax],al
 1059ec0:	loopne 0x1059eb3
 1059ec2:	add    al,0x0
 1059ec4:	(bad)  
 1059ec5:	add    BYTE PTR [rax],al
 1059ec7:	add    al,ah
 1059ec9:	icebp  
 1059eca:	add    al,0x0
 1059ecc:	(bad)  
 1059ecd:	add    BYTE PTR [rax],al
 1059ecf:	add    al,ah
 1059ed1:	icebp  
 1059ed2:	add    al,0x0
 1059ed4:	add    eax,0xe0000000
 1059ed9:	icebp  
 1059eda:	add    al,0x0
 1059edc:	or     al,0x0
 1059ede:	add    BYTE PTR [rax],al
 1059ee0:	lock icebp 
 1059ee2:	add    al,0x0
 1059ee4:	or     eax,0x0
 1059ee9:	repnz add al,0x0
 1059eec:	(bad)  
 1059eed:	add    BYTE PTR [rax],al
 1059eef:	add    BYTE PTR [rax],dl
 1059ef1:	repnz add al,0x0
 1059ef4:	or     eax,0x10000000
 1059ef9:	repnz add al,0x0
 1059efc:	adc    BYTE PTR [rax],al
 1059efe:	add    BYTE PTR [rax],al
 1059f00:	and    dl,dh
 1059f02:	add    al,0x0
 1059f04:	lock lea eax,[rdx]
 1059f07:	add    bh,bh
 1059f09:	(bad)  
 1059f0a:	(bad)  
 1059f0b:	call   FWORD PTR [rcx-0x72]
 1059f0e:	add    al,BYTE PTR [rax]
 1059f10:	add    BYTE PTR [rax],al
 1059f12:	add    BYTE PTR [rax],al
 1059f14:	mov    es,WORD PTR gs:[rdx]
 1059f17:	add    BYTE PTR [rcx],al
 1059f19:	add    BYTE PTR [rax],al
 1059f1b:	add    BYTE PTR [rcx-0x72],dh
 1059f1e:	add    al,BYTE PTR [rax]
 1059f20:	add    al,BYTE PTR [rax]
 1059f22:	add    BYTE PTR [rax],al
 1059f24:	jge    0x1059eb4
 1059f26:	add    al,BYTE PTR [rax]
 1059f28:	add    eax,DWORD PTR [rax]
 1059f2a:	add    BYTE PTR [rax],al
 1059f2c:	mov    DWORD PTR [rsi+0x40002],ecx
 1059f32:	add    BYTE PTR [rax],al
 1059f34:	(bad)  
 1059f35:	nop
 1059f36:	add    al,BYTE PTR [rax]
 1059f38:	add    eax,0x7c000000
 1059f3d:	nop
 1059f3e:	add    al,BYTE PTR [rax]
 1059f40:	(bad)  
 1059f41:	add    BYTE PTR [rax],al
 1059f43:	add    BYTE PTR [rax+0x7000290],dl
 1059f49:	add    BYTE PTR [rax],al
 1059f4b:	add    BYTE PTR [rax+rdx*4+0x80002],ah
 1059f52:	add    BYTE PTR [rax],al
 1059f54:	mov    ecx,0xa000290
 1059f59:	add    BYTE PTR [rax],al
 1059f5b:	add    ah,al
 1059f5d:	nop
 1059f5e:	add    al,BYTE PTR [rax]
 1059f60:	or     eax,DWORD PTR [rax]
 1059f62:	add    BYTE PTR [rax],al
 1059f64:	iret   
 1059f65:	nop
 1059f66:	add    al,BYTE PTR [rax]
 1059f68:	or     al,0x0
 1059f6a:	add    BYTE PTR [rax],al
 1059f6c:	loope  0x1059efe
 1059f6e:	add    al,BYTE PTR [rax]
 1059f70:	or     eax,0x41000000
 1059f75:	xchg   ecx,eax
 1059f76:	add    al,BYTE PTR [rax]
 1059f78:	add    eax,0x4d000000
 1059f7d:	xchg   ecx,eax
 1059f7e:	add    al,BYTE PTR [rax]
 1059f80:	add    al,0x0
 1059f82:	add    BYTE PTR [rax],al
 1059f84:	pop    rcx
 1059f85:	xchg   ecx,eax
 1059f86:	add    al,BYTE PTR [rax]
 1059f88:	add    eax,DWORD PTR [rax]
 1059f8a:	add    BYTE PTR [rax],al
 1059f8c:	gs xchg ecx,eax
 1059f8e:	add    al,BYTE PTR [rax]
 1059f90:	add    al,BYTE PTR [rax]
 1059f92:	add    BYTE PTR [rax],al
 1059f94:	jno    0x1059f27
 1059f96:	add    al,BYTE PTR [rax]
 1059f98:	add    DWORD PTR [rax],eax
 1059f9a:	add    BYTE PTR [rax],al
 1059f9c:	jge    0x1059f2f
 1059f9e:	add    al,BYTE PTR [rax]
 1059fa0:	add    BYTE PTR [rax],al
 1059fa2:	add    BYTE PTR [rax],al
 1059fa4:	mov    DWORD PTR [rcx-0xfffe],edx
 1059faa:	(bad)  
 1059fab:	call   FWORD PTR [rax+0xd000291]
 1059fb1:	add    BYTE PTR [rax],al
 1059fb3:	add    BYTE PTR [rbx],ah
 1059fb5:	xchg   edx,eax
 1059fb6:	add    al,BYTE PTR [rax]
 1059fb8:	or     al,0x0
 1059fba:	add    BYTE PTR [rax],al
 1059fbc:	xor    al,0x92
 1059fbe:	add    al,BYTE PTR [rax]
 1059fc0:	add    eax,0x40000000
 1059fc5:	xchg   edx,eax
 1059fc6:	add    al,BYTE PTR [rax]
 1059fc8:	add    al,0x0
 1059fca:	add    BYTE PTR [rax],al
 1059fcc:	rex.WR xchg rdx,rax
 1059fce:	add    al,BYTE PTR [rax]
 1059fd0:	add    eax,DWORD PTR [rax]
 1059fd2:	add    BYTE PTR [rax],al
 1059fd4:	pop    rax
 1059fd5:	xchg   edx,eax
 1059fd6:	add    al,BYTE PTR [rax]
 1059fd8:	add    al,BYTE PTR [rax]
 1059fda:	add    BYTE PTR [rax],al
 1059fdc:	fs xchg edx,eax
 1059fde:	add    al,BYTE PTR [rax]
 1059fe0:	add    DWORD PTR [rax],eax
 1059fe2:	add    BYTE PTR [rax],al
 1059fe4:	jo     0x1059f78
 1059fe6:	add    al,BYTE PTR [rax]
 1059fe8:	add    BYTE PTR [rax],al
 1059fea:	add    BYTE PTR [rax],al
 1059fec:	jl     0x1059f80
 1059fee:	add    al,BYTE PTR [rax]
 1059ff0:	(bad)  
 1059ff1:	(bad)  
 1059ff2:	(bad)  
 1059ff3:	dec    DWORD PTR [rbx+0xd000292]
 1059ff9:	add    BYTE PTR [rax],al
 1059ffb:	add    BYTE PTR [rbx],dl
 1059ffd:	xchg   ebx,eax
 1059ffe:	add    al,BYTE PTR [rax]
 105a000:	(bad)  
 105a001:	add    BYTE PTR [rax],al
 105a003:	add    BYTE PTR [rdi],ah
 105a005:	xchg   ebx,eax
 105a006:	add    al,BYTE PTR [rax]
 105a008:	adc    BYTE PTR [rax],al
 105a00a:	add    BYTE PTR [rax],al
 105a00c:	cmp    al,0x93
 105a00e:	add    al,BYTE PTR [rax]
 105a010:	adc    DWORD PTR [rax],eax
 105a012:	add    BYTE PTR [rax],al
 105a014:	adc    eax,0x10000294
 105a019:	add    BYTE PTR [rax],al
 105a01b:	add    BYTE PTR [rax],ah
 105a01d:	xchg   esp,eax
 105a01e:	add    al,BYTE PTR [rax]
 105a020:	or     eax,0x2b000000
 105a025:	xchg   esp,eax
 105a026:	add    al,BYTE PTR [rax]
 105a028:	or     al,0x0
 105a02a:	add    BYTE PTR [rax],al
 105a02c:	cmp    al,0x94
 105a02e:	add    al,BYTE PTR [rax]
 105a030:	add    eax,0x48000000
 105a035:	xchg   esp,eax
 105a036:	add    al,BYTE PTR [rax]
 105a038:	add    al,0x0
 105a03a:	add    BYTE PTR [rax],al
 105a03c:	push   rsp
 105a03d:	xchg   esp,eax
 105a03e:	add    al,BYTE PTR [rax]
 105a040:	add    eax,DWORD PTR [rax]
 105a042:	add    BYTE PTR [rax],al
 105a044:	(bad)  
 105a045:	xchg   esp,eax
 105a046:	add    al,BYTE PTR [rax]
 105a048:	add    al,BYTE PTR [rax]
 105a04a:	add    BYTE PTR [rax],al
 105a04c:	ins    BYTE PTR es:[rdi],dx
 105a04d:	xchg   esp,eax
 105a04e:	add    al,BYTE PTR [rax]
 105a050:	add    DWORD PTR [rax],eax
 105a052:	add    BYTE PTR [rax],al
 105a054:	js     0x1059fea
 105a056:	add    al,BYTE PTR [rax]
 105a058:	add    BYTE PTR [rax],al
 105a05a:	add    BYTE PTR [rax],al
 105a05c:	test   BYTE PTR [rdx+rax*1-0x100],dl
 105a063:	call   QWORD PTR [rbp+0x11000294]
 105a069:	add    BYTE PTR [rax],al
 105a06b:	add    BYTE PTR [rbx+0x10000294],dh
 105a071:	add    BYTE PTR [rax],al
 105a073:	add    BYTE PTR [rsi+0xd000294],bh
 105a079:	add    BYTE PTR [rax],al
 105a07b:	add    cl,cl
 105a07d:	xchg   esp,eax
 105a07e:	add    al,BYTE PTR [rax]
 105a080:	or     al,0x0
 105a082:	add    BYTE PTR [rax],al
 105a084:	ficom  DWORD PTR [rdx+rax*1+0x500]
 105a08b:	add    dh,ah
 105a08d:	xchg   esp,eax
 105a08e:	add    al,BYTE PTR [rax]
 105a090:	add    al,0x0
 105a092:	add    BYTE PTR [rax],al
 105a094:	repnz xchg esp,eax
 105a096:	add    al,BYTE PTR [rax]
 105a098:	add    eax,DWORD PTR [rax]
 105a09a:	add    BYTE PTR [rax],al
 105a09c:	(bad)  
 105a09d:	xchg   esp,eax
 105a09e:	add    al,BYTE PTR [rax]
 105a0a0:	add    al,BYTE PTR [rax]
 105a0a2:	add    BYTE PTR [rax],al
 105a0a4:	or     dl,BYTE PTR [rbp+0x10002]
 105a0aa:	add    BYTE PTR [rax],al
 105a0ac:	(bad)  
 105a0ad:	xchg   ebp,eax
 105a0ae:	add    al,BYTE PTR [rax]
 105a0b0:	add    BYTE PTR [rax],al
 105a0b2:	add    BYTE PTR [rax],al
 105a0b4:	and    dl,BYTE PTR [rbp-0xfffe]
 105a0ba:	(bad)  
 105a0bb:	call   FWORD PTR [rcx]
 105a0bd:	xor    cl,BYTE PTR [rcx]
 105a0bf:	add    BYTE PTR [rax],ah
 105a0c1:	fs xchg edi,eax
 105a0c3:	add    BYTE PTR [rsp+rdx*2],bl
 105a0c6:	xchg   esi,eax
 105a0c7:	add    BYTE PTR [rax],bl
 105a0c9:	xor    al,0x95
 105a0cb:	add    BYTE PTR [rbx],cl
 105a0cd:	add    DWORD PTR [rdx+0x700400],edx
 105a0d3:	add    BYTE PTR [rax-0x77fffc02],ah
 105a0d9:	add    BYTE PTR ds:[rax],al
 105a0dc:	(bad)  
 105a0dd:	add    al,0x0
 105a0df:	add    bh,bh
 105a0e1:	(bad)  
 105a0e2:	(bad)  
 105a0e3:	jmp    QWORD PTR [rax+0x4cd]
 105a0e9:	add    BYTE PTR [rax],al
 105a0eb:	add    BYTE PTR [rax+0x10004cd],dh
 105a0f1:	add    BYTE PTR [rax],al
 105a0f3:	add    al,al
 105a0f5:	int    0x4
 105a0f7:	add    BYTE PTR [rax],al
 105a0f9:	add    BYTE PTR [rax],al
 105a0fb:	add    al,al
 105a0fd:	int    0x4
 105a0ff:	add    BYTE PTR [rbx],al
 105a101:	add    BYTE PTR [rax],al
 105a103:	add    al,dl
 105a105:	int    0x4
 105a107:	add    BYTE PTR [rax+rax*1],al
 105a10a:	add    BYTE PTR [rax],al
 105a10c:	loopne 0x105a0db
 105a10e:	add    al,0x0
 105a110:	adc    BYTE PTR [rbp-0xfffe],0xff
 105a117:	(bad)  
 105a118:	mov    esi,0x295
 105a11d:	add    BYTE PTR [rax],al
 105a11f:	add    ah,dl
 105a121:	xchg   ebp,eax
 105a122:	add    al,BYTE PTR [rax]
 105a124:	add    DWORD PTR [rax],eax
 105a126:	add    BYTE PTR [rax],al
 105a128:	jmp    0x405a3c2
 105a12d:	add    BYTE PTR [rax],al
 105a12f:	add    BYTE PTR [rcx-0x6a],bl
 105a132:	add    al,BYTE PTR [rax]
 105a134:	add    BYTE PTR [rax],al
 105a136:	add    BYTE PTR [rax],al
 105a138:	gs xchg esi,eax
 105a13a:	add    al,BYTE PTR [rax]
 105a13c:	(bad)  
 105a13d:	(bad)  
 105a13e:	(bad)  
 105a13f:	jmp    FWORD PTR [rsi+rdx*4+0x2]
 105a143:	add    BYTE PTR [rbx],al
 105a145:	add    BYTE PTR [rax],al
 105a147:	add    dl,al
 105a149:	xchg   esi,eax
 105a14a:	add    al,BYTE PTR [rax]
 105a14c:	add    al,0x0
 105a14e:	add    BYTE PTR [rax],al
 105a150:	(bad)  
 105a151:	xchg   esi,eax
 105a152:	add    al,BYTE PTR [rax]
 105a154:	add    eax,0xf7000000
 105a159:	xchg   esi,eax
 105a15a:	add    al,BYTE PTR [rax]
 105a15c:	add    al,0x0
 105a15e:	add    BYTE PTR [rax],al
 105a160:	xor    al,0x97
 105a162:	add    al,BYTE PTR [rax]
 105a164:	add    eax,DWORD PTR [rax]
 105a166:	add    BYTE PTR [rax],al
 105a168:	mov    dl,BYTE PTR [rdi+0x2]
 105a16e:	add    BYTE PTR [rax],al
 105a170:	xchg   esi,eax
 105a171:	xchg   edi,eax
 105a172:	add    al,BYTE PTR [rax]
 105a174:	(bad)  
 105a175:	(bad)  
 105a176:	(bad)  
 105a177:	inc    DWORD PTR [rcx]
 105a179:	adc    cl,BYTE PTR [rax]
 105a17b:	add    BYTE PTR [rdx],dl
 105a17d:	xor    al,0xc
 105a17f:	add    BYTE PTR [rdx],dl
 105a181:	xor    cl,BYTE PTR [rsi]
 105a183:	lock or al,0xe0
 105a186:	or     dl,al
 105a188:	or     al,al
 105a18a:	(bad)  
 105a18b:	jo     0x105a1ae
 105a18d:	(bad)  
 105a18e:	add    al,0x0
 105a190:	(bad)  
 105a191:	or     eax,DWORD PTR fs:[rax]
 105a194:	add    eax,0xe0000a54
 105a199:	xchg   edi,eax
 105a19a:	add    al,BYTE PTR [rax]
 105a19c:	rex.RB cwde 
 105a19e:	add    al,BYTE PTR [rax]
 105a1a0:	js     0x105a143
 105a1a2:	add    eax,0x2100
 105a1a7:	add    al,ah
 105a1a9:	xchg   edi,eax
 105a1aa:	add    al,BYTE PTR [rax]
 105a1ac:	rex.RB cwde 
 105a1ae:	add    al,BYTE PTR [rax]
 105a1b0:	js     0x105a153
 105a1b2:	add    eax,0xd3f1900
 105a1b7:	add    BYTE PTR [rsi],ch
 105a1b9:	je     0x105a1dc
 105a1bb:	add    DWORD PTR [rdx],ebp
 105a1bd:	and    BYTE PTR fs:[rcx],al
 105a1c0:	es xor al,0x1f
 105a1c3:	add    DWORD PTR [rdx],ebx
 105a1c5:	add    DWORD PTR [rax],ebx
 105a1c7:	add    DWORD PTR [rax+rsi*8],ecx
 105a1ca:	or     ah,al
 105a1cc:	or     al,dl
 105a1ce:	(bad)  
 105a1cf:	rol    BYTE PTR [rax+rdx*2],0x0
 105a1d3:	add    BYTE PTR [rax-0x4ffffc02],ah
 105a1d9:	add    BYTE PTR ds:[rax],al
 105a1dc:	mov    dl,0x8
 105a1de:	add    BYTE PTR [rax],al
 105a1e0:	(bad)  
 105a1e1:	(bad)  
 105a1e2:	(bad)  
 105a1e3:	inc    DWORD PTR [rax]
 105a1e5:	(bad)  
 105a1e6:	add    al,0x0
 105a1e8:	add    BYTE PTR [rax],al
 105a1ea:	add    BYTE PTR [rax],al
 105a1ec:	adc    dh,cl
 105a1ee:	add    al,0x0
 105a1f0:	add    DWORD PTR [rax],eax
 105a1f2:	add    BYTE PTR [rax],al
 105a1f4:	and    dh,cl
 105a1f6:	add    al,0x0
 105a1f8:	add    al,BYTE PTR [rax]
 105a1fa:	add    BYTE PTR [rax],al
 105a1fc:	xor    dh,cl
 105a1fe:	add    al,0x0
 105a200:	add    eax,DWORD PTR [rax]
 105a202:	add    BYTE PTR [rax],al
 105a204:	rex (bad) 
 105a206:	add    al,0x0
 105a208:	add    al,0x0
 105a20a:	add    BYTE PTR [rax],al
 105a20c:	push   rax
 105a20d:	(bad)  
 105a20e:	add    al,0x0
 105a210:	add    al,0x0
 105a212:	add    BYTE PTR [rax],al
 105a214:	(bad)  
 105a215:	(bad)  
 105a216:	add    al,0x0
 105a218:	(bad)  
 105a219:	add    BYTE PTR [rax],al
 105a21b:	add    BYTE PTR [rax-0x32],dh
 105a21e:	add    al,0x0
 105a220:	(bad)  
 105a221:	add    BYTE PTR [rax],al
 105a223:	add    BYTE PTR [rax+0x60004ce],al
 105a229:	add    BYTE PTR [rax],al
 105a22b:	add    BYTE PTR [rax+0x60004ce],dl
 105a231:	add    BYTE PTR [rax],al
 105a233:	add    BYTE PTR [rax+0x20004ce],ah
 105a239:	add    BYTE PTR [rax],al
 105a23b:	add    BYTE PTR [rax+0xb0004ce],dh
 105a241:	add    BYTE PTR [rax],al
 105a243:	add    al,al
 105a245:	(bad)  
 105a246:	add    al,0x0
 105a248:	or     al,0x0
 105a24a:	add    BYTE PTR [rax],al
 105a24c:	ror    dh,1
 105a24e:	add    al,0x0
 105a250:	or     eax,0x0
 105a255:	iret   
 105a256:	add    al,0x0
 105a258:	or     al,0x0
 105a25a:	add    BYTE PTR [rax],al
 105a25c:	adc    bh,cl
 105a25e:	add    al,0x0
 105a260:	nop
 105a261:	cdq    
 105a262:	add    al,BYTE PTR [rax]
 105a264:	(bad)  
 105a265:	(bad)  
 105a266:	(bad)  
 105a267:	push   rsi
 105a269:	cdq    
 105a26a:	add    al,BYTE PTR [rax]
 105a26c:	add    BYTE PTR [rax],al
 105a26e:	add    BYTE PTR [rax],al
 105a270:	add    bl,BYTE PTR [rdx+0x10002]
 105a276:	add    BYTE PTR [rax],al
 105a278:	(bad)  
 105a279:	(bad)  
 105a27a:	add    al,BYTE PTR [rax]
 105a27c:	add    al,BYTE PTR [rax]
 105a27e:	add    BYTE PTR [rax],al
 105a280:	movsxd ebx,DWORD PTR [rdx+0x30002]
 105a286:	add    BYTE PTR [rax],al
 105a288:	mov    bl,BYTE PTR [rdx+0x10002]
 105a28e:	add    BYTE PTR [rax],al
 105a290:	xchg   esi,eax
 105a291:	(bad)  
 105a292:	add    al,BYTE PTR [rax]
 105a294:	add    BYTE PTR [rax],al
 105a296:	add    BYTE PTR [rax],al
 105a298:	movabs ds:0xb4ffffffff00029a,al
 105a2a1:	(bad)  
 105a2a2:	add    al,BYTE PTR [rax]
 105a2a4:	add    eax,DWORD PTR [rax]
 105a2a6:	add    BYTE PTR [rax],al
 105a2a8:	mov    bl,BYTE PTR [rbx+0x40002]
 105a2ae:	add    BYTE PTR [rax],al
 105a2b0:	fstp   QWORD PTR [rdx+rax*1+0x500]
 105a2b7:	add    ah,ch
 105a2b9:	pushf  
 105a2ba:	add    al,BYTE PTR [rax]
 105a2bc:	add    al,0x0
 105a2be:	add    BYTE PTR [rax],al
 105a2c0:	sbb    BYTE PTR [rbp+0x60002],bl
 105a2c6:	add    BYTE PTR [rax],al
 105a2c8:	rex.RB popf 
 105a2ca:	add    al,BYTE PTR [rax]
 105a2cc:	(bad)  
 105a2cd:	add    BYTE PTR [rax],al
 105a2cf:	add    BYTE PTR [rbp+rbx*4+0x2],dl
 105a2d3:	add    BYTE PTR [rsi],al
 105a2d5:	add    BYTE PTR [rax],al
 105a2d7:	add    BYTE PTR [rdx+0x800029d],ah
 105a2dd:	add    BYTE PTR [rax],al
 105a2df:	add    BYTE PTR [rcx+0x600029d],dh
 105a2e5:	add    BYTE PTR [rax],al
 105a2e7:	add    ch,ch
 105a2e9:	popf   
 105a2ea:	add    al,BYTE PTR [rax]
 105a2ec:	or     DWORD PTR [rax],eax
 105a2ee:	add    BYTE PTR [rax],al
 105a2f0:	cld    
 105a2f1:	popf   
 105a2f2:	add    al,BYTE PTR [rax]
 105a2f4:	(bad)  
 105a2f5:	add    BYTE PTR [rax],al
 105a2f7:	add    BYTE PTR [rbx-0x62],cl
 105a2fa:	add    al,BYTE PTR [rax]
 105a2fc:	or     al,BYTE PTR [rax]
 105a2fe:	add    BYTE PTR [rax],al
 105a300:	pop    rdx
 105a301:	sahf   
 105a302:	add    al,BYTE PTR [rax]
 105a304:	(bad)  
 105a305:	add    BYTE PTR [rax],al
 105a307:	add    BYTE PTR [rax+0x400029e],ah
 105a30d:	add    BYTE PTR [rax],al
 105a30f:	add    dl,bl
 105a311:	sahf   
 105a312:	add    al,BYTE PTR [rax]
 105a314:	add    eax,DWORD PTR [rax]
 105a316:	add    BYTE PTR [rax],al
 105a318:	out    0x9e,al
 105a31a:	add    al,BYTE PTR [rax]
 105a31c:	add    al,BYTE PTR [rax]
 105a31e:	add    BYTE PTR [rax],al
 105a320:	std    
 105a321:	sahf   
 105a322:	add    al,BYTE PTR [rax]
 105a324:	add    al,0x0
 105a326:	add    BYTE PTR [rax],al
 105a328:	(bad)  
 105a329:	lahf   
 105a32a:	add    al,BYTE PTR [rax]
 105a32c:	add    eax,DWORD PTR [rax]
 105a32e:	add    BYTE PTR [rax],al
 105a330:	sub    bl,BYTE PTR [rdi+0x20002]
 105a336:	add    BYTE PTR [rax],al
 105a338:	cmp    al,0x9f
 105a33a:	add    al,BYTE PTR [rax]
 105a33c:	add    DWORD PTR [rax],eax
 105a33e:	add    BYTE PTR [rax],al
 105a340:	rex.W lahf 
 105a342:	add    al,BYTE PTR [rax]
 105a344:	add    BYTE PTR [rax],al
 105a346:	add    BYTE PTR [rax],al
 105a348:	push   rsp
 105a349:	lahf   
 105a34a:	add    al,BYTE PTR [rax]
 105a34c:	(bad)  
 105a34d:	(bad)  
 105a34e:	(bad)  
 105a34f:	jmp    QWORD PTR [rsi-0x61]
 105a352:	add    al,BYTE PTR [rax]
 105a354:	add    al,BYTE PTR [rax]
 105a356:	add    BYTE PTR [rax],al
 105a358:	pop    rax
 105a359:	movabs al,ds:0xa0640000000b0002
 105a362:	add    al,BYTE PTR [rax]
 105a364:	or     al,0x0
 105a366:	add    BYTE PTR [rax],al
 105a368:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 105a369:	movabs al,ds:0xa0cb0000000d0002
 105a372:	add    al,BYTE PTR [rax]
 105a374:	(bad)  
 105a375:	add    BYTE PTR [rax],al
 105a377:	add    bh,ah
 105a379:	movabs al,ds:0xa0f80000000d0002
 105a382:	add    al,BYTE PTR [rax]
 105a384:	or     al,0x0
 105a386:	add    BYTE PTR [rax],al
 105a388:	xor    DWORD PTR [rcx+0xf0002],esp
 105a38e:	add    BYTE PTR [rax],al
 105a390:	rex movabs eax,ds:0xa18c0000000c0002
 105a39a:	add    al,BYTE PTR [rax]
 105a39c:	or     eax,DWORD PTR [rax]
 105a39e:	add    BYTE PTR [rax],al
 105a3a0:	cwde   
 105a3a1:	movabs eax,ds:0xa1a4000000020002
 105a3aa:	add    al,BYTE PTR [rax]
 105a3ac:	add    DWORD PTR [rax],eax
 105a3ae:	add    BYTE PTR [rax],al
 105a3b0:	mov    al,0xa1
 105a3b2:	add    al,BYTE PTR [rax]
 105a3b4:	add    BYTE PTR [rax],al
 105a3b6:	add    BYTE PTR [rax],al
 105a3b8:	mov    esp,0xff0002a1
 105a3bd:	(bad)  
 105a3be:	(bad)  
 105a3bf:	inc    DWORD PTR [rcx]
 105a3c1:	(bad)  
 105a3c2:	add    al,BYTE PTR [rax]
 105a3c4:	(bad)  
 105a3c5:	xor    al,BYTE PTR [rdx]
 105a3c7:	push   rax
 105a3c8:	adc    DWORD PTR [rax],ebx
 105a3ca:	(bad)  
 105a3cb:	add    BYTE PTR [rax],bl
 105a3cd:	xor    al,0xe
 105a3cf:	add    BYTE PTR [rbx],cl
 105a3d1:	xchg   edx,eax
 105a3d2:	add    al,0x70
 105a3d4:	add    esp,DWORD PTR [rax+0x2]
 105a3d7:	push   rax
 105a3d8:	xchg   esp,eax
 105a3d9:	inc    BYTE PTR [rbx]
 105a3db:	add    al,bl
 105a3dd:	add    BYTE PTR ds:[rax],al
 105a3e0:	(bad)  
 105a3e1:	(bad)  
 105a3e2:	(bad)  
 105a3e3:	inc    DWORD PTR [rax+0x4de]
 105a3e9:	add    BYTE PTR [rax],al
 105a3eb:	add    BYTE PTR [rax+0x10004de],dl
 105a3f1:	add    BYTE PTR [rax],al
 105a3f3:	add    BYTE PTR [rax+0x20004de],ah
 105a3f9:	add    BYTE PTR [rax],al
 105a3fb:	add    BYTE PTR [rax+0x20004de],dh
 105a401:	add    BYTE PTR [rax],al
 105a403:	add    al,al
 105a405:	fiadd  WORD PTR [rax+rax*1]
 105a408:	add    al,BYTE PTR [rax]
 105a40a:	add    BYTE PTR [rax],al
 105a40c:	rcr    dh,1
 105a40e:	add    al,0x0
 105a410:	add    al,BYTE PTR [rax]
 105a412:	add    BYTE PTR [rax],al
 105a414:	loopne 0x105a3f4
 105a416:	add    al,0x0
 105a418:	add    al,BYTE PTR [rax]
 105a41a:	add    BYTE PTR [rax],al
 105a41c:	lock fiadd WORD PTR [rax+rax*1]
 105a420:	add    al,BYTE PTR [rax]
 105a422:	add    BYTE PTR [rax],al
 105a424:	add    bh,bl
 105a426:	add    al,0x0
 105a428:	add    al,BYTE PTR [rax]
 105a42a:	add    BYTE PTR [rax],al
 105a42c:	adc    bh,bl
 105a42e:	add    al,0x0
 105a430:	or     DWORD PTR [rax],eax
 105a432:	add    BYTE PTR [rax],al
 105a434:	rex fild WORD PTR [rax+rax*1]
 105a438:	add    al,BYTE PTR [rax]
 105a43a:	add    BYTE PTR [rax],al
 105a43c:	jo     0x105a41d
 105a43e:	add    al,0x0
 105a440:	add    BYTE PTR [rdx-0xfffe],ah
 105a446:	(bad)  
 105a447:	jmp    FWORD PTR [rdi]
 105a449:	movabs ds:0xa2b9000000000002,al
 105a452:	add    al,BYTE PTR [rax]
 105a454:	add    DWORD PTR [rax],eax
 105a456:	add    BYTE PTR [rax],al
 105a458:	(bad)
 105a45c:	add    al,BYTE PTR [rax]
 105a45e:	add    BYTE PTR [rax],al
 105a460:	fbld   TBYTE PTR [rdx+0x30002]
 105a466:	add    BYTE PTR [rax],al
 105a468:	in     eax,dx
 105a469:	movabs ds:0xa30a000000020002,al
 105a472:	add    al,BYTE PTR [rax]
 105a474:	add    al,0x0
 105a476:	add    BYTE PTR [rax],al
 105a478:	sbb    BYTE PTR [rbx+0x20002],ah
 105a47e:	add    BYTE PTR [rax],al
 105a480:	cmp    DWORD PTR [rbx+0x50002],esp
 105a486:	add    BYTE PTR [rax],al
 105a488:	rex.RXB movabs ds:0xa36a000000020002,eax
 105a492:	add    al,BYTE PTR [rax]
 105a494:	(bad)  
 105a495:	add    BYTE PTR [rax],al
 105a497:	add    BYTE PTR [rax+0x20002a3],dl
 105a49d:	add    BYTE PTR [rax],al
 105a49f:	add    BYTE PTR [rbx+riz*4+0x70002],dh
 105a4a6:	add    BYTE PTR [rax],al
 105a4a8:	ret    0x2a3
 105a4ab:	add    BYTE PTR [rdx],al
 105a4ad:	add    BYTE PTR [rax],al
 105a4af:	add    al,ah
 105a4b1:	movabs ds:0xa407000000080002,eax
 105a4ba:	add    al,BYTE PTR [rax]
 105a4bc:	add    al,BYTE PTR [rax]
 105a4be:	add    BYTE PTR [rax],al
 105a4c0:	cmp    esp,DWORD PTR [rdx+rax*1+0x900]
 105a4c7:	add    BYTE PTR [rcx-0x5c],dh
 105a4ca:	add    al,BYTE PTR [rax]
 105a4cc:	or     al,BYTE PTR [rax]
 105a4ce:	add    BYTE PTR [rax],al
 105a4d0:	movabs al,ds:0xb6000000090002a4
 105a4d9:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 105a4da:	add    al,BYTE PTR [rax]
 105a4dc:	add    al,BYTE PTR [rax]
 105a4de:	add    BYTE PTR [rax],al
 105a4e0:	fbld   TBYTE PTR [rdx+rax*1+0xb00]
 105a4e7:	add    BYTE PTR [rcx-0x5b],ah
 105a4ea:	add    al,BYTE PTR [rax]
 105a4ec:	add    al,BYTE PTR [rax]
 105a4ee:	add    BYTE PTR [rax],al
 105a4f0:	xchg   ebp,eax
 105a4f1:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 105a4f2:	add    al,BYTE PTR [rax]
 105a4f4:	add    DWORD PTR [rax],eax
 105a4f6:	add    BYTE PTR [rax],al
 105a4f8:	movabs al,ds:0xab000000000002a5
 105a501:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 105a502:	add    al,BYTE PTR [rax]
 105a504:	(bad)  
 105a505:	(bad)  
 105a506:	(bad)  
 105a507:	inc    DWORD PTR [rcx]
 105a509:	(bad)  
 105a50a:	add    al,BYTE PTR [rax]
 105a50c:	(bad)  
 105a50d:	xor    al,BYTE PTR [rdx]
 105a50f:	push   rax
 105a510:	add    DWORD PTR [rsi],eax
 105a512:	add    al,BYTE PTR [rax]
 105a514:	(bad)  
 105a515:	xor    al,BYTE PTR [rdx]
 105a517:	push   rax
 105a518:	sbb    DWORD PTR [rbx+rcx*1],edi
 105a51b:	add    BYTE PTR [rbx],ch
 105a51d:	xor    al,0x6b
 105a51f:	add    BYTE PTR [rbx],bl
 105a521:	add    DWORD PTR [rdx+0x0],esp
 105a524:	or     al,0xf0
 105a526:	or     ah,al
 105a528:	or     al,dl
 105a52a:	(bad)  
 105a52b:	rol    BYTE PTR [rax+rsi*2],0x3
 105a52f:	(bad)  
 105a530:	add    dl,BYTE PTR [rax+0x0]
 105a533:	add    BYTE PTR [rax+0x3fe],ah
 105a539:	(bad)  
 105a53a:	add    BYTE PTR [rax],al
 105a53c:	add    al,BYTE PTR [rbx]
 105a53e:	add    BYTE PTR [rax],al
 105a540:	(bad)  
 105a541:	(bad)  
 105a542:	(bad)  
 105a543:	inc    DWORD PTR [rax-0xfffb23]
 105a549:	(bad)  
 105a54a:	(bad)  
 105a54b:	call   QWORD PTR [rax+0x10004dd]
 105a551:	add    BYTE PTR [rax],al
 105a553:	add    BYTE PTR [rax-0xfffb23],ah
 105a559:	(bad)  
 105a55a:	(bad)  
 105a55b:	push   QWORD PTR [rax+0x30004dd]
 105a561:	add    BYTE PTR [rax],al
 105a563:	add    al,al
 105a565:	fld    QWORD PTR [rax+rax*1]
 105a568:	(bad)  
 105a569:	(bad)  
 105a56a:	(bad)  
 105a56b:	call   rax
 105a56d:	fld    QWORD PTR [rax+rax*1]
 105a570:	(bad)  
 105a571:	(bad)  
 105a572:	(bad)  
 105a573:	inc    DWORD PTR [rax]
 105a575:	fiadd  WORD PTR [rax+rax*1]
 105a578:	(bad)  
 105a579:	(bad)  
 105a57a:	(bad)  
 105a57b:	call   QWORD PTR [rax]
 105a57d:	fiadd  WORD PTR [rax+rax*1]
 105a580:	(bad)  
 105a581:	add    BYTE PTR [rax],al
 105a583:	add    BYTE PTR [rax],ah
 105a585:	fiadd  WORD PTR [rax+rax*1]
 105a588:	(bad)  
 105a589:	(bad)  
 105a58a:	(bad)  
 105a58b:	push   QWORD PTR [rax]
 105a58d:	fiadd  WORD PTR [rax+rax*1]
 105a590:	(bad)  
 105a591:	(bad)  
 105a592:	(bad)  
 105a593:	inc    DWORD PTR [rax-0x22]
 105a596:	add    al,0x0
 105a598:	(bad)  
 105a599:	(bad)  
 105a59a:	(bad)  
 105a59b:	call   QWORD PTR [rax-0x22]
 105a59e:	add    al,0x0
 105a5a0:	(bad)  
 105a5a1:	(bad)  
 105a5a2:	(bad)  
 105a5a3:	jmp    QWORD PTR [rax-0x22]
 105a5a6:	add    al,0x0
 105a5a8:	shl    BYTE PTR [rbp-0xfffe],1
 105a5ae:	(bad)  
 105a5af:	dec    DWORD PTR [rdi+0x2a6]
 105a5b5:	add    BYTE PTR [rax],al
 105a5b7:	add    BYTE PTR [rdi-0xfffd5a],ch
 105a5bd:	(bad)  
 105a5be:	(bad)  
 105a5bf:	dec    esp
 105a5c1:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 105a5c2:	add    al,BYTE PTR [rax]
 105a5c4:	add    BYTE PTR [rax],al
 105a5c6:	add    BYTE PTR [rax],al
 105a5c8:	in     al,dx
 105a5c9:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 105a5ca:	add    al,BYTE PTR [rax]
 105a5cc:	(bad)  
 105a5cd:	(bad)  
 105a5ce:	(bad)  
 105a5cf:	(bad)  
 105a5d0:	out    dx,al
 105a5d1:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 105a5d2:	add    al,BYTE PTR [rax]
 105a5d4:	add    BYTE PTR [rax],al
 105a5d6:	add    BYTE PTR [rax],al
 105a5d8:	adc    ah,BYTE PTR [rdi-0xfffe]
 105a5de:	(bad)  
 105a5df:	call   QWORD PTR [rsi]
 105a5e1:	test   al,0x2
 105a5e3:	add    BYTE PTR [rax],al
 105a5e5:	add    BYTE PTR [rax],al
 105a5e7:	add    BYTE PTR [rax],bl
 105a5e9:	test   al,0x2
 105a5eb:	add    bh,bh
 105a5ed:	(bad)  
 105a5ee:	(bad)  
 105a5ef:	jmp    rdx
 105a5f1:	stos   BYTE PTR es:[rdi],al
 105a5f2:	add    al,BYTE PTR [rax]
 105a5f4:	add    eax,0x5000000
 105a5f9:	stos   DWORD PTR es:[rdi],eax
 105a5fa:	add    al,BYTE PTR [rax]
 105a5fc:	(bad)  
 105a5fd:	(bad)  
 105a5fe:	(bad)  
 105a5ff:	(bad)  
 105a600:	cmp    ch,BYTE PTR [rbx+0x60002]
 105a606:	add    BYTE PTR [rax],al
 105a608:	rex.WRX stos QWORD PTR es:[rdi],rax
 105a60a:	add    al,BYTE PTR [rax]
 105a60c:	(bad)  
 105a60d:	(bad)  
 105a60e:	(bad)  
 105a60f:	dec    DWORD PTR [rdx]
 105a611:	lods   eax,DWORD PTR ds:[rsi]
 105a612:	add    al,BYTE PTR [rax]
 105a614:	or     DWORD PTR [rax],eax
 105a616:	add    BYTE PTR [rax],al
 105a618:	(bad)  
 105a619:	lods   eax,DWORD PTR ds:[rsi]
 105a61a:	add    al,BYTE PTR [rax]
 105a61c:	(bad)  
 105a61d:	(bad)  
 105a61e:	(bad)  
 105a61f:	call   rbx
 105a621:	lods   eax,DWORD PTR ds:[rsi]
 105a622:	add    al,BYTE PTR [rax]
 105a624:	or     al,BYTE PTR [rax]
 105a626:	add    BYTE PTR [rax],al
 105a628:	call   0x5a8da
 105a62d:	(bad)  
 105a62e:	(bad)  
 105a62f:	jmp    QWORD PTR [rsi]
 105a631:	scas   al,BYTE PTR es:[rdi]
 105a632:	add    al,BYTE PTR [rax]
 105a634:	or     eax,DWORD PTR [rax]
 105a636:	add    BYTE PTR [rax],al
 105a638:	(bad)  
 105a639:	scas   al,BYTE PTR es:[rdi]
 105a63a:	add    al,BYTE PTR [rax]
 105a63c:	(bad)  
 105a63d:	(bad)  
 105a63e:	(bad)  
 105a63f:	call   FWORD PTR [rbx-0x52]
 105a642:	add    al,BYTE PTR [rax]
 105a644:	or     al,0x0
 105a646:	add    BYTE PTR [rax],al
 105a648:	ins    BYTE PTR es:[rdi],dx
 105a649:	scas   al,BYTE PTR es:[rdi]
 105a64a:	add    al,BYTE PTR [rax]
 105a64c:	(bad)  
 105a64d:	(bad)  
 105a64e:	(bad)  
 105a64f:	inc    DWORD PTR [rsi]
 105a651:	mov    al,0x2
 105a653:	add    BYTE PTR [rax],al
 105a655:	add    BYTE PTR [rax],al
 105a657:	add    BYTE PTR [rax],cl
 105a659:	mov    al,0x2
 105a65b:	add    bh,bh
 105a65d:	(bad)  
 105a65e:	(bad)  
 105a65f:	jmp    FWORD PTR [rbx]
 105a661:	mov    al,0x2
 105a663:	add    BYTE PTR [rcx],al
 105a665:	add    BYTE PTR [rax],al
 105a667:	add    BYTE PTR [rdx],bh
 105a669:	mov    al,0x2
 105a66b:	add    BYTE PTR [rdx],al
 105a66d:	add    BYTE PTR [rax],al
 105a66f:	add    BYTE PTR [rax-0x50],bl
 105a672:	add    al,BYTE PTR [rax]
 105a674:	add    DWORD PTR [rax],eax
 105a676:	add    BYTE PTR [rax],al
 105a678:	xchg   esp,eax
 105a679:	mov    al,0x2
 105a67b:	add    bh,bh
 105a67d:	(bad)  
 105a67e:	(bad)  
 105a67f:	call   rsi
 105a681:	mov    al,0x2
 105a683:	add    BYTE PTR [rbx],al
 105a685:	add    BYTE PTR [rax],al
 105a687:	add    ch,ah
 105a689:	mov    al,0x2
 105a68b:	add    BYTE PTR [rax+rax*1],al
 105a68e:	add    BYTE PTR [rax],al
 105a690:	add    esi,DWORD PTR [rcx+0x30002]
 105a696:	add    BYTE PTR [rax],al
 105a698:	(bad)  
 105a699:	mov    cl,0x2
 105a69b:	add    bh,bh
 105a69d:	(bad)  
 105a69e:	(bad)  
 105a69f:	call   QWORD PTR [rcx]
 105a6a1:	mov    dl,0x2
 105a6a3:	add    BYTE PTR [rdi],al
 105a6a5:	add    BYTE PTR [rax],al
 105a6a7:	add    BYTE PTR [rax],ah
 105a6a9:	mov    dl,0x2
 105a6ab:	add    BYTE PTR [rax],cl
 105a6ad:	add    BYTE PTR [rax],al
 105a6af:	add    BYTE PTR [rdi],bh
 105a6b1:	mov    dl,0x2
 105a6b3:	add    BYTE PTR [rdi],al
 105a6b5:	add    BYTE PTR [rax],al
 105a6b7:	add    BYTE PTR [rbx-0x4e],bh
 105a6ba:	add    al,BYTE PTR [rax]
 105a6bc:	(bad)  
 105a6bd:	(bad)  
 105a6be:	(bad)  
 105a6bf:	push   rsp
 105a6c1:	mov    bl,0x2
 105a6c3:	add    BYTE PTR [rax],al
 105a6c5:	add    BYTE PTR [rax],al
 105a6c7:	add    BYTE PTR [rcx],al
 105a6c9:	(bad)  
 105a6ca:	add    al,BYTE PTR [rax]
 105a6cc:	(bad)  
 105a6cd:	xor    al,BYTE PTR [rdx]
 105a6cf:	push   rax
 105a6d0:	adc    DWORD PTR [rsp+rax*1],edx
 105a6d3:	add    BYTE PTR [rsp+rsi*1],dl
 105a6d6:	sldt   WORD PTR [rsi]
 105a6d9:	xchg   edx,eax
 105a6da:	add    dh,BYTE PTR [rax-0x6c]
 105a6dd:	inc    BYTE PTR [rbx]
 105a6df:	add    BYTE PTR [rax],ch
 105a6e1:	(bad)  
 105a6e2:	add    BYTE PTR [rax],al
 105a6e4:	(bad)  
 105a6e5:	(bad)  
 105a6e6:	(bad)  
 105a6e7:	push   QWORD PTR [rax-0x38]
 105a6ea:	add    al,0x0
 105a6ec:	add    BYTE PTR [rax],al
 105a6ee:	add    BYTE PTR [rax],al
 105a6f0:	or     al,0x4
 105a6f3:	add    BYTE PTR [rcx],al
 105a6f5:	add    BYTE PTR [rax],al
 105a6f7:	add    BYTE PTR [rax+0x4c8],dl
 105a6fd:	add    BYTE PTR [rax],al
 105a6ff:	add    BYTE PTR [rax+0x4c8],ah
 105a705:	add    BYTE PTR [rax],al
 105a707:	add    BYTE PTR [rax-0x6ffffb38],dh
 105a70d:	mov    ah,0x2
 105a70f:	add    bh,bh
 105a711:	(bad)  
 105a712:	(bad)  
 105a713:	push   QWORD PTR [rbx+0x2b4]
 105a719:	add    BYTE PTR [rax],al
 105a71b:	add    bh,al
 105a71d:	mov    ah,0x2
 105a71f:	add    BYTE PTR [rcx],al
 105a721:	add    BYTE PTR [rax],al
 105a723:	add    bh,dl
 105a725:	mov    ah,0x2
 105a727:	add    BYTE PTR [rdx],al
 105a729:	add    BYTE PTR [rax],al
 105a72b:	add    dl,dh
 105a72d:	mov    ah,0x2
 105a72f:	add    BYTE PTR [rcx],al
 105a731:	add    BYTE PTR [rax],al
 105a733:	add    dh,bh
 105a735:	mov    ah,0x2
 105a737:	add    BYTE PTR [rax],al
 105a739:	add    BYTE PTR [rax],al
 105a73b:	add    BYTE PTR [rbp+rsi*4+0x2],cl
 105a73f:	add    BYTE PTR [rbx],al
 105a741:	add    BYTE PTR [rax],al
 105a743:	add    BYTE PTR [rbp+rsi*4+0x2],bh
 105a747:	add    BYTE PTR [rax],al
 105a749:	add    BYTE PTR [rax],al
 105a74b:	add    BYTE PTR [rax+0x40002b5],bh
 105a751:	add    BYTE PTR [rax],al
 105a753:	add    ah,dl
 105a755:	mov    ch,0x2
 105a757:	add    BYTE PTR [rax],al
 105a759:	add    BYTE PTR [rax],al
 105a75b:	add    BYTE PTR [rcx],dl
 105a75d:	mov    dh,0x2
 105a75f:	add    bh,bh
 105a761:	(bad)  
 105a762:	(bad)  
 105a763:	call   QWORD PTR [rcx]
 105a765:	lar    eax,WORD PTR [rax]
 105a768:	(bad)  
 105a769:	jb     0x105a76d
 105a76b:	xor    BYTE PTR [rsi+rdi*8+0x3f500003],dl
 105a772:	add    BYTE PTR [rax],al
 105a774:	(bad)  
 105a775:	(bad)  
 105a776:	(bad)  
 105a777:	jmp    QWORD PTR [rax+0x300004db]
 105a77d:	mov    dh,0x2
 105a77f:	add    bh,bh
 105a781:	(bad)  
 105a782:	(bad)  
 105a783:	jmp    FWORD PTR [rax-0x4a]
 105a786:	add    al,BYTE PTR [rax]
 105a788:	add    BYTE PTR [rax],al
 105a78a:	add    BYTE PTR [rax],al
 105a78c:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 105a78d:	mov    dh,0x2
 105a78f:	add    bh,bh
 105a791:	(bad)  
 105a792:	(bad)  
 105a793:	call   FWORD PTR [rcx]
 105a795:	and    ecx,DWORD PTR [rdx]
 105a797:	add    BYTE PTR [rsp+rsi*1],dl
 105a79a:	sbb    BYTE PTR [rax],al
 105a79c:	adc    al,0xd2
 105a79e:	adc    al,dh
 105a7a0:	(bad)  
 105a7a1:	loopne 0x105a7af
 105a7a3:	ror    BYTE PTR [rdx],1
 105a7a5:	ror    BYTE PTR [rax],0x70
 105a7a8:	(bad)  
 105a7a9:	(bad)  
 105a7aa:	(bad)  
 105a7ab:	push   rax
 105a7ac:	rex.W add al,BYTE PTR [rax+rax*1]
 105a7b0:	push   0x11000000
 105a7b5:	sbb    ecx,DWORD PTR [rax]
 105a7b7:	add    BYTE PTR [rbx],bl
 105a7b9:	push   rsp
 105a7ba:	adc    DWORD PTR [rax],eax
 105a7bc:	(bad)  
 105a7bd:	xor    al,0x10
 105a7bf:	add    BYTE PTR [rbx],cl
 105a7c1:	mov    dl,0x7
 105a7c3:	lock add eax,0x94600470
 105a7c9:	inc    BYTE PTR [rbx]
 105a7cb:	add    BYTE PTR [rax+0x3f],bh
 105a7ce:	add    BYTE PTR [rax],al
 105a7d0:	(bad)  
 105a7d1:	(bad)  
 105a7d2:	(bad)  
 105a7d3:	inc    DWORD PTR [rax-0x23]
 105a7d6:	add    al,0x0
 105a7d8:	add    BYTE PTR [rax],al
 105a7da:	add    BYTE PTR [rax],al
 105a7dc:	push   rax
 105a7dd:	fld    QWORD PTR [rax+rax*1]
 105a7e0:	add    BYTE PTR [rax],al
 105a7e2:	add    BYTE PTR [rax],al
 105a7e4:	(bad)  
 105a7e5:	fld    QWORD PTR [rax+rax*1]
 105a7e8:	jo     0x105a7a2
 105a7ea:	add    al,BYTE PTR [rax]
 105a7ec:	(bad)  
 105a7ed:	(bad)  
 105a7ee:	(bad)  
 105a7ef:	call   FWORD PTR [rdi+0x2b8]
 105a7f5:	add    BYTE PTR [rax],al
 105a7f7:	add    bl,bl
 105a7f9:	mov    eax,0x10002
 105a7fe:	add    BYTE PTR [rax],al
 105a800:	idiv   DWORD PTR [rax+0x2]
 105a806:	add    BYTE PTR [rax],al
 105a808:	mov    ch,0xb9
 105a80a:	add    al,BYTE PTR [rax]
 105a80c:	(bad)  
 105a80d:	(bad)  
 105a80e:	(bad)  
 105a80f:	inc    edi
 105a811:	mov    ecx,0x2
 105a816:	add    BYTE PTR [rax],al
 105a818:	adc    al,0xba
 105a81a:	add    al,BYTE PTR [rax]
 105a81c:	add    al,BYTE PTR [rax]
 105a81e:	add    BYTE PTR [rax],al
 105a820:	(bad)  
 105a821:	mov    edx,0x2
 105a826:	add    BYTE PTR [rax],al
 105a828:	ja     0x105a7e4
 105a82a:	add    al,BYTE PTR [rax]
 105a82c:	(bad)  
 105a82d:	(bad)  
 105a82e:	(bad)  
 105a82f:	inc    DWORD PTR [rsi+0x2ba]
 105a835:	add    BYTE PTR [rax],al
 105a837:	add    BYTE PTR [rax-0xfffd46],bl
 105a83d:	(bad)  
 105a83e:	(bad)  
 105a83f:	call   QWORD PTR [rcx]
 105a841:	lar    eax,WORD PTR [rax]
 105a844:	(bad)  
 105a845:	mov    dl,0x2
 105a847:	xor    BYTE PTR [rsi+rdi*8+0x3fa00003],dl
 105a84e:	add    BYTE PTR [rax],al
 105a850:	(bad)  
 105a851:	(bad)  
 105a852:	(bad)  
 105a853:	call   QWORD PTR [rax]
 105a855:	fld    QWORD PTR [rax+rax*1]
 105a858:	add    BYTE PTR [rax],al
 105a85a:	add    BYTE PTR [rax],al
 105a85c:	and    ch,bl
 105a85e:	add    al,0x0
 105a860:	(bad)  
 105a861:	(bad)  
 105a862:	(bad)  
 105a863:	jmp    QWORD PTR [rax]
 105a865:	fld    QWORD PTR [rax+rax*1]
 105a868:	sar    BYTE PTR [rdx-0xfffe],1
 105a86e:	(bad)  
 105a86f:	call   FWORD PTR [rcx]
 105a871:	mov    ebx,0x2
 105a876:	add    BYTE PTR [rax],al
 105a878:	cs mov ebx,0x20002
 105a87e:	add    BYTE PTR [rax],al
 105a880:	mov    edi,DWORD PTR [rbx-0xfffe]
 105a886:	(bad)  
 105a887:	inc    DWORD PTR [rcx]
 105a889:	(bad)  
 105a88a:	add    al,BYTE PTR [rax]
 105a88c:	(bad)  
 105a88d:	xor    al,BYTE PTR [rdx]
 105a88f:	xor    BYTE PTR [rcx],al
 105a891:	(bad)  
 105a892:	add    al,BYTE PTR [rax]
 105a894:	(bad)  
 105a895:	xor    al,BYTE PTR [rdx]
 105a897:	xor    BYTE PTR [rcx],al
 105a899:	(bad)  
 105a89a:	add    al,BYTE PTR [rax]
 105a89c:	(bad)  
 105a89d:	xor    al,BYTE PTR [rdx]
 105a89f:	xor    BYTE PTR [rcx],ah
 105a8a1:	add    eax,0x74050002
 105a8a6:	(bad)  
 105a8a7:	add    BYTE PTR [rax-0x44],ah
 105a8aa:	add    al,BYTE PTR [rax]
 105a8ac:	stos   DWORD PTR es:[rdi],eax
 105a8ad:	mov    esp,0xa8980002
 105a8b2:	add    eax,0x2100
 105a8b7:	add    BYTE PTR [rax-0x44],ah
 105a8ba:	add    al,BYTE PTR [rax]
 105a8bc:	stos   DWORD PTR es:[rdi],eax
 105a8bd:	mov    esp,0xa8980002
 105a8c2:	add    eax,0x60f0100
 105a8c7:	add    BYTE PTR [rdi],cl
 105a8c9:	fs (bad) 
 105a8cb:	add    BYTE PTR [rdi],cl
 105a8cd:	xor    al,0x6
 105a8cf:	add    BYTE PTR [rdi],cl
 105a8d1:	xor    cl,BYTE PTR [rbx]
 105a8d3:	jo     0x105a8d6
 105a8d5:	or     al,BYTE PTR [rax+rax*1]
 105a8d8:	or     dh,BYTE PTR [rsi+rax*1]
 105a8db:	add    BYTE PTR [rdx],cl
 105a8dd:	xor    al,BYTE PTR [rsi]
 105a8df:	jo     0x105a8e2
 105a8e1:	adc    BYTE PTR [rax],cl
 105a8e3:	add    BYTE PTR [rax],dl
 105a8e5:	xor    al,0xd
 105a8e7:	add    BYTE PTR [rax],dl
 105a8e9:	xor    cl,BYTE PTR [rax+rsi*8]
 105a8ec:	or     ah,al
 105a8ee:	or     BYTE PTR [rax+0x7],dh
 105a8f1:	(bad)  
 105a8f2:	(bad)  
 105a8f3:	push   rax
 105a8f4:	and    DWORD PTR [rip+0xffffffffc4050002],eax        # 0xffffffffc50aa8fc
 105a8fa:	or     al,BYTE PTR [rax]
 105a8fc:	lock mov ebp,0xbee00002
 105a902:	add    al,BYTE PTR [rax]
 105a904:	loopne 0x105a8ae
 105a906:	add    eax,0x2052100
 105a90b:	add    BYTE PTR [rip+0xffffffffe0000cd4],al        # 0xffffffffe105b5e5
 105a911:	mov    esi,0xbef60002
 105a916:	add    al,BYTE PTR [rax]
 105a918:	hlt    
 105a919:	test   al,0x5
 105a91b:	add    BYTE PTR [rcx],ah
 105a91d:	add    BYTE PTR [rax],al
 105a91f:	add    al,ah
 105a921:	mov    esi,0xbef60002
 105a926:	add    al,BYTE PTR [rax]
 105a928:	hlt    
 105a929:	test   al,0x5
 105a92b:	add    BYTE PTR [rcx],ah
 105a92d:	add    BYTE PTR [rax],al
 105a92f:	add    al,dh
 105a931:	mov    ebp,0xbee00002
 105a936:	add    al,BYTE PTR [rax]
 105a938:	loopne 0x105a8e2
 105a93a:	add    eax,0x4002100
 105a93f:	add    BYTE PTR [rax],al
 105a941:	(bad)  
 105a942:	or     al,0x0
 105a944:	add    ah,al
 105a946:	or     al,BYTE PTR [rax]
 105a948:	lock mov ebp,0xbee00002
 105a94e:	add    al,BYTE PTR [rax]
 105a950:	loopne 0x105a8fa
 105a952:	add    eax,0x60f0100
 105a957:	add    BYTE PTR [rdi],cl
 105a959:	fs (bad) 
 105a95b:	add    BYTE PTR [rdi],cl
 105a95d:	xor    al,0x6
 105a95f:	add    BYTE PTR [rdi],cl
 105a961:	xor    cl,BYTE PTR [rbx]
 105a963:	jo     0x105a97e
 105a965:	and    DWORD PTR [rdi],eax
 105a967:	add    BYTE PTR [rbx],dl
 105a969:	add    DWORD PTR [rax],ebp
 105a96b:	add    BYTE PTR [rdi],al
 105a96d:	loopne 0x105a974
 105a96f:	jo     0x105a975
 105a971:	(bad)  
 105a972:	add    esi,DWORD PTR [rax]
 105a974:	add    dl,BYTE PTR [rax+0x0]
 105a977:	add    BYTE PTR [rax+0x2],cl
 105a97a:	add    al,0x0
 105a97c:	add    BYTE PTR [rcx],al
 105a97e:	add    BYTE PTR [rax],al
 105a980:	and    DWORD PTR [rdx],ebx
 105a982:	(bad)  
 105a983:	add    BYTE PTR [rdx],bl
 105a985:	hlt    
 105a986:	add    BYTE PTR es:[rdx],dl
 105a989:	(bad)  
 105a98a:	(bad)  
 105a98b:	add    BYTE PTR [rax],cl
 105a98d:	(bad)  
 105a98e:	xor    DWORD PTR [rax],eax
 105a990:	rol    al,1
 105a992:	add    al,BYTE PTR [rax]
 105a994:	and    eax,0x640002c1
 105a999:	test   eax,0x20210005
 105a99e:	add    al,0x0
 105a9a0:	and    BYTE PTR [rax+0x11],bh
 105a9a3:	add    BYTE PTR [rax],cl
 105a9a5:	push   0xffffffffc1250012
 105a9aa:	add    al,BYTE PTR [rax]
 105a9ac:	rol    ebx,1
 105a9ae:	add    al,BYTE PTR [rax]
 105a9b0:	sub    BYTE PTR [rcx+0x210005],0x0
 105a9b7:	add    BYTE PTR [rip+0xffffffffd10002c1],ah        # 0xffffffffd205ac7e
 105a9bd:	ret    
 105a9be:	add    al,BYTE PTR [rax]
 105a9c0:	sub    BYTE PTR [rcx+0x210005],0x0
 105a9c7:	add    al,dl
 105a9c9:	rol    BYTE PTR [rdx],0x0
 105a9cc:	and    eax,0x640002c1
 105a9d1:	test   eax,0x39190005
 105a9d6:	or     eax,0x29742b00
 105a9db:	add    BYTE PTR [rdi],ah
 105a9dd:	sub    BYTE PTR fs:[rax],al
 105a9e0:	and    esi,DWORD PTR [rdi+riz*1]
 105a9e3:	add    BYTE PTR [rdi],dl
 105a9e5:	add    DWORD PTR [rax],esp
 105a9e7:	add    BYTE PTR [rax+rsi*8],cl
 105a9ea:	or     ah,al
 105a9ec:	or     al,dl
 105a9ee:	(bad)  
 105a9ef:	rol    BYTE PTR [rax+rdx*2],0x0
 105a9f3:	add    BYTE PTR [rax-0x37fffc02],ah
 105a9f9:	(bad)  
 105a9fa:	add    BYTE PTR [rax],al
 105a9fc:	cli    
 105a9fd:	add    BYTE PTR [rax],al
 105a9ff:	add    bh,bh
 105aa01:	(bad)  
 105aa02:	(bad)  
 105aa03:	push   QWORD PTR [rax]
 105aa05:	mov    DWORD PTR [rax+rax*1],0x0
 105aa0c:	rex mov DWORD PTR [rax+rax*1],0xffffffff
 105aa14:	push   rax
 105aa15:	mov    DWORD PTR [rax+rax*1],0x2
 105aa1c:	(bad)  
 105aa1d:	mov    DWORD PTR [rax+rax*1],0x2c560
 105aa24:	(bad)  
 105aa25:	(bad)  
 105aa26:	(bad)  
 105aa27:	(bad)  
 105aa28:	out    dx,eax
 105aa29:	mov    BYTE PTR [rdx],0x0
 105aa2c:	add    BYTE PTR [rax],al
 105aa2e:	add    BYTE PTR [rax],al
 105aa30:	inc    dh
 105aa32:	add    al,BYTE PTR [rax]
 105aa34:	add    DWORD PTR [rax],eax
 105aa36:	add    BYTE PTR [rax],al
 105aa38:	and    edi,eax
 105aa3a:	add    al,BYTE PTR [rax]
 105aa3c:	add    BYTE PTR [rax],al
 105aa3e:	add    BYTE PTR [rax],al
 105aa40:	pop    rbx
 105aa41:	enter  0x2,0xff
 105aa45:	(bad)  
 105aa46:	(bad)  
 105aa47:	jmp    QWORD PTR [rdi-0x37]
 105aa4a:	add    al,BYTE PTR [rax]
 105aa4c:	add    al,BYTE PTR [rax]
 105aa4e:	add    BYTE PTR [rax],al
 105aa50:	jbe    0x105aa1b
 105aa52:	add    al,BYTE PTR [rax]
 105aa54:	add    eax,DWORD PTR [rax]
 105aa56:	add    BYTE PTR [rax],al
 105aa58:	cdq    
 105aa59:	leave  
 105aa5a:	add    al,BYTE PTR [rax]
 105aa5c:	add    al,BYTE PTR [rax]
 105aa5e:	add    BYTE PTR [rax],al
 105aa60:	retf   
 105aa61:	retf   0x2
 105aa64:	(bad)  
 105aa65:	(bad)  
 105aa66:	(bad)  
 105aa67:	inc    DWORD PTR [rcx]
 105aa69:	add    al,0x1
 105aa6b:	add    BYTE PTR [rdx+riz*2],al
 105aa6e:	add    BYTE PTR [rax],al
 105aa70:	adc    DWORD PTR [rsp+rax*1],edx
 105aa73:	add    BYTE PTR [rsp+rsi*1],dl
 105aa76:	or     eax,0x2920600
 105aa7b:	jo     0x105aa11
 105aa7d:	inc    BYTE PTR [rbx]
 105aa7f:	add    al,dh
 105aa81:	(bad)  
 105aa82:	add    BYTE PTR [rax],al
 105aa84:	(bad)  
 105aa85:	(bad)  
 105aa86:	(bad)  
 105aa87:	call   QWORD PTR [rax]
 105aa89:	out    dx,eax
 105aa8a:	add    al,0x0
 105aa8c:	add    BYTE PTR [rax],al
 105aa8e:	add    BYTE PTR [rax],al
 105aa90:	and    bh,ch
 105aa92:	add    al,0x0
 105aa94:	(bad)  
 105aa95:	int3   
 105aa96:	add    al,BYTE PTR [rax]
 105aa98:	(bad)  
 105aa99:	(bad)  
 105aa9a:	(bad)  
 105aa9b:	inc    DWORD PTR [rbx+0x2cc]
 105aaa1:	add    BYTE PTR [rax],al
 105aaa3:	add    BYTE PTR [rbx+0x10002cc],dl
 105aaa9:	add    BYTE PTR [rax],al
 105aaab:	add    BYTE PTR [rdi+0x2cc],ch
 105aab1:	add    BYTE PTR [rax],al
 105aab3:	add    cl,bh
 105aab5:	int3   
 105aab6:	add    al,BYTE PTR [rax]
 105aab8:	(bad)  
 105aab9:	(bad)  
 105aaba:	(bad)  
 105aabb:	call   QWORD PTR [rcx]
 105aabd:	adc    eax,DWORD PTR [rdx]
 105aabf:	add    BYTE PTR [rdx],cl
 105aac1:	push   rdx
 105aac2:	(bad)  
 105aac3:	xor    BYTE PTR [rsi+rdi*8+0x40180003],dl
 105aaca:	add    BYTE PTR [rax],al
 105aacc:	(bad)  
 105aacd:	(bad)  
 105aace:	(bad)  
 105aacf:	inc    DWORD PTR [rax]
 105aad1:	ret    0x4
 105aad4:	add    BYTE PTR [rax],al
 105aad6:	add    BYTE PTR [rax],al
 105aad8:	adc    dl,al
 105aada:	add    al,0x0
 105aadc:	and    ch,cl
 105aade:	add    al,BYTE PTR [rax]
 105aae0:	(bad)  
 105aae1:	(bad)  
 105aae2:	(bad)  
 105aae3:	push   QWORD PTR [rsi]
 105aae5:	int    0x2
 105aae7:	add    BYTE PTR [rax],al
 105aae9:	add    BYTE PTR [rax],al
 105aaeb:	add    BYTE PTR [rcx-0x33],al
 105aaee:	add    al,BYTE PTR [rax]
 105aaf0:	(bad)  
 105aaf1:	(bad)  
 105aaf2:	(bad)  
 105aaf3:	inc    DWORD PTR [rcx]
 105aaf5:	add    al,0x1
 105aaf7:	add    BYTE PTR [rdx+rax*2],al
 105aafa:	add    BYTE PTR [rax],al
 105aafc:	add    DWORD PTR [rcx+rax*1],eax
 105aaff:	add    BYTE PTR [rdx+rax*2],al
 105ab02:	add    BYTE PTR [rax],al
 105ab04:	add    DWORD PTR [rax],ecx
 105ab06:	add    al,BYTE PTR [rax]
 105ab08:	or     dl,dl
 105ab0a:	add    al,0x30
 105ab0c:	and    DWORD PTR [rsi+rax*1],ecx
 105ab0f:	add    BYTE PTR [rsp+rsi*2],cl
 105ab12:	adc    al,BYTE PTR [rax]
 105ab14:	or     BYTE PTR [rcx+rdx*1+0x0],ah
 105ab18:	add    al,0x54
 105ab1a:	adc    BYTE PTR [rax],al
 105ab1c:	ror    ch,0x2
 105ab1f:	add    dh,dl
 105ab21:	int    0x2
 105ab23:	add    BYTE PTR [rbx+rbp*4],al
 105ab26:	add    eax,0x2100
 105ab2b:	add    al,al
 105ab2d:	int    0x2
 105ab2f:	add    dh,dl
 105ab31:	int    0x2
 105ab33:	add    BYTE PTR [rbx+rbp*4],al
 105ab36:	add    eax,0x3100100
 105ab3b:	add    BYTE PTR [rax],dl
 105ab3d:	rex.X or al,0x60
 105ab40:	or     esi,DWORD PTR [rax]
 105ab42:	add    BYTE PTR [rax],al
 105ab44:	and    DWORD PTR [rip+0x74050002],eax        # 0x750aab4c
 105ab4a:	add    al,0x0
 105ab4c:	or     dh,0x2
 105ab4f:	add    BYTE PTR [rsi+0x380002ce],ch
 105ab55:	stos   DWORD PTR es:[rdi],eax
 105ab56:	add    eax,0x2002100
 105ab5b:	add    BYTE PTR [rax],al
 105ab5d:	je     0x105ab63
 105ab5f:	add    BYTE PTR [rax-0x51fffd32],al
 105ab65:	(bad)  
 105ab66:	add    al,BYTE PTR [rax]
 105ab68:	cmp    BYTE PTR [rbx+0x210005],ch
 105ab6e:	add    BYTE PTR [rax],al
 105ab70:	or     dh,0x2
 105ab73:	add    BYTE PTR [rsi+0x380002ce],ch
 105ab79:	stos   DWORD PTR es:[rdi],eax
 105ab7a:	add    eax,0x2191900
 105ab7f:	add    BYTE PTR [rdi],al
 105ab81:	add    DWORD PTR [rcx+0x0],ecx
 105ab84:	rex.W add al,BYTE PTR [rax+rax*1]
 105ab88:	xor    BYTE PTR [rdx],al
 105ab8a:	add    BYTE PTR [rax],al
 105ab8c:	and    DWORD PTR [rax],ecx
 105ab8e:	add    al,BYTE PTR [rax]
 105ab90:	or     BYTE PTR [rax+rcx*2],dh
 105ab93:	add    BYTE PTR [rax],dl
 105ab95:	iret   
 105ab96:	add    al,BYTE PTR [rax]
 105ab98:	or     edi,0xab7c0002
 105ab9e:	add    eax,0x2100
 105aba3:	add    BYTE PTR [rax],dl
 105aba5:	iret   
 105aba6:	add    al,BYTE PTR [rax]
 105aba8:	or     edi,0xab7c0002
 105abae:	add    eax,0xa361900
 105abb3:	add    BYTE PTR [rcx+rax*1],bl
 105abb6:	pop    rdi
 105abb7:	add    DWORD PTR [rip+0x9e00bf0],ecx        # 0xae5b7ad
 105abbd:	rol    BYTE PTR [rdi],1
 105abbf:	rol    BYTE PTR [rip+0x3600470],0x30        # 0x465b036
 105abc6:	add    dl,BYTE PTR [rax-0x60]
 105abc9:	inc    BYTE PTR [rbx]
 105abcb:	add    BYTE PTR [rax+0x40],al
 105abce:	add    BYTE PTR [rax],al
 105abd0:	loop   0x105abdc
 105abd2:	add    BYTE PTR [rax],al
 105abd4:	(bad)  
 105abd5:	(bad)  
 105abd6:	(bad)  
 105abd7:	push   QWORD PTR [rax+0x4d1]
 105abdd:	add    BYTE PTR [rax],al
 105abdf:	add    al,al
 105abe1:	rol    DWORD PTR [rax+rax*1],1
 105abe4:	add    BYTE PTR [rax],al
 105abe6:	add    BYTE PTR [rax],al
 105abe8:	rcl    cl,1
 105abea:	add    al,0x0
 105abec:	add    BYTE PTR [rax],al
 105abee:	add    BYTE PTR [rax],al
 105abf0:	loopne 0x105abc3
 105abf2:	add    al,0x0
 105abf4:	add    BYTE PTR [rax],al
 105abf6:	add    BYTE PTR [rax],al
 105abf8:	lock rol DWORD PTR [rax+rax*1],1
 105abfc:	add    BYTE PTR [rax],al
 105abfe:	add    BYTE PTR [rax],al
 105ac00:	add    dl,dl
 105ac02:	add    al,0x0
 105ac04:	add    BYTE PTR [rax],al
 105ac06:	add    BYTE PTR [rax],al
 105ac08:	adc    dl,dl
 105ac0a:	add    al,0x0
 105ac0c:	add    BYTE PTR [rax],al
 105ac0e:	add    BYTE PTR [rax],al
 105ac10:	and    dl,dl
 105ac12:	add    al,0x0
 105ac14:	add    BYTE PTR [rax],al
 105ac16:	add    BYTE PTR [rax],al
 105ac18:	xor    dl,dl
 105ac1a:	add    al,0x0
 105ac1c:	add    BYTE PTR [rax],al
 105ac1e:	add    BYTE PTR [rax],al
 105ac20:	rol    BYTE PTR [rax+rax*1],cl
 105ac24:	add    BYTE PTR [rax],al
 105ac26:	add    BYTE PTR [rax],al
 105ac28:	push   rax
 105ac29:	rol    BYTE PTR [rax+rax*1],cl
 105ac2c:	add    BYTE PTR [rax],al
 105ac2e:	add    BYTE PTR [rax],al
 105ac30:	(bad)  
 105ac31:	rol    BYTE PTR [rax+rax*1],cl
 105ac34:	add    BYTE PTR [rax],al
 105ac36:	add    BYTE PTR [rax],al
 105ac38:	jo     0x105ac0c
 105ac3a:	add    al,0x0
 105ac3c:	add    BYTE PTR [rax],al
 105ac3e:	add    BYTE PTR [rax],al
 105ac40:	adc    dl,0x4
 105ac43:	add    BYTE PTR [rax],al
 105ac45:	add    BYTE PTR [rax],al
 105ac47:	add    BYTE PTR [rax+0x4d2],dl
 105ac4d:	add    BYTE PTR [rax],al
 105ac4f:	add    BYTE PTR [rax+0x4d2],ah
 105ac55:	add    BYTE PTR [rax],al
 105ac57:	add    BYTE PTR [rax-0xffffb2e],dh
 105ac5d:	iret   
 105ac5e:	add    al,BYTE PTR [rax]
 105ac60:	(bad)  
 105ac61:	(bad)  
 105ac62:	(bad)  
 105ac63:	call   FWORD PTR [rbx]
 105ac65:	rol    DWORD PTR [rdx],1
 105ac67:	add    BYTE PTR [rax],al
 105ac69:	add    BYTE PTR [rax],al
 105ac6b:	add    BYTE PTR [rbx],ch
 105ac6d:	rol    DWORD PTR [rdx],1
 105ac6f:	add    BYTE PTR [rcx],al
 105ac71:	add    BYTE PTR [rax],al
 105ac73:	add    BYTE PTR [rsi-0x2f],al
 105ac76:	add    al,BYTE PTR [rax]
 105ac78:	add    BYTE PTR [rax],al
 105ac7a:	add    BYTE PTR [rax],al
 105ac7c:	test   eax,0x20002d1
 105ac81:	add    BYTE PTR [rax],al
 105ac83:	add    bl,dl
 105ac85:	rol    DWORD PTR [rdx],1
 105ac87:	add    BYTE PTR [rax],al
 105ac89:	add    BYTE PTR [rax],al
 105ac8b:	add    BYTE PTR [rsi-0x2e],bl
 105ac8e:	add    al,BYTE PTR [rax]
 105ac90:	add    eax,DWORD PTR [rax]
 105ac92:	add    BYTE PTR [rax],al
 105ac94:	imul   edx,edx,0x2
 105ac97:	add    BYTE PTR [rax],al
 105ac99:	add    BYTE PTR [rax],al
 105ac9b:	add    BYTE PTR [rcx+0x40002d2],bl
 105aca1:	add    BYTE PTR [rax],al
 105aca3:	add    BYTE PTR [rdx+rdx*8+0x2],ch
 105acaa:	add    BYTE PTR [rax],al
 105acac:	fcmovnbe st,st(2)
 105acae:	add    al,BYTE PTR [rax]
 105acb0:	add    eax,0xef000000
 105acb5:	rol    BYTE PTR [rdx],cl
 105acb7:	add    BYTE PTR [rax],al
 105acb9:	add    BYTE PTR [rax],al
 105acbb:	add    BYTE PTR [rdi],bl
 105acbd:	rol    DWORD PTR [rdx],cl
 105acbf:	add    BYTE PTR [rsi],al
 105acc1:	add    BYTE PTR [rax],al
 105acc3:	add    BYTE PTR [rbx+rdx*8],ch
 105acc6:	add    al,BYTE PTR [rax]
 105acc8:	add    BYTE PTR [rax],al
 105acca:	add    BYTE PTR [rax],al
 105accc:	test   ebx,edx
 105acce:	add    al,BYTE PTR [rax]
 105acd0:	(bad)  
 105acd1:	add    BYTE PTR [rax],al
 105acd3:	add    BYTE PTR [rdi+0x2d3],ch
 105acd9:	add    BYTE PTR [rax],al
 105acdb:	add    BYTE PTR [rdx],bh
 105acdd:	(bad)  
 105acde:	add    al,BYTE PTR [rax]
 105ace0:	or     BYTE PTR [rax],al
 105ace2:	add    BYTE PTR [rax],al
 105ace4:	rex.RXB (bad) 
 105ace6:	add    al,BYTE PTR [rax]
 105ace8:	add    BYTE PTR [rax],al
 105acea:	add    BYTE PTR [rax],al
 105acec:	jne    0x105acc2
 105acee:	add    al,BYTE PTR [rax]
 105acf0:	or     DWORD PTR [rax],eax
 105acf2:	add    BYTE PTR [rax],al
 105acf4:	mov    ah,dl
 105acf6:	add    al,BYTE PTR [rax]
 105acf8:	add    BYTE PTR [rax],al
 105acfa:	add    BYTE PTR [rax],al
 105acfc:	mov    bh,0xd4
 105acfe:	add    al,BYTE PTR [rax]
 105ad00:	or     al,BYTE PTR [rax]
 105ad02:	add    BYTE PTR [rax],al
 105ad04:	retf   
 105ad05:	(bad)  
 105ad06:	add    al,BYTE PTR [rax]
 105ad08:	add    BYTE PTR [rax],al
 105ad0a:	add    BYTE PTR [rax],al
 105ad0c:	sti    
 105ad0d:	(bad)  
 105ad0e:	add    al,BYTE PTR [rax]
 105ad10:	or     eax,DWORD PTR [rax]
 105ad12:	add    BYTE PTR [rax],al
 105ad14:	or     ch,dl
 105ad16:	add    al,BYTE PTR [rax]
 105ad18:	add    BYTE PTR [rax],al
 105ad1a:	add    BYTE PTR [rax],al
 105ad1c:	mov    ss,ebp
 105ad1e:	add    al,BYTE PTR [rax]
 105ad20:	or     al,0x0
 105ad22:	add    BYTE PTR [rax],al
 105ad24:	mov    eax,0x2d5
 105ad29:	add    BYTE PTR [rax],al
 105ad2b:	add    BYTE PTR [rbx-0x2a],al
 105ad2e:	add    al,BYTE PTR [rax]
 105ad30:	or     eax,0x50000000
 105ad35:	(bad)  
 105ad36:	add    al,BYTE PTR [rax]
 105ad38:	add    BYTE PTR [rax],al
 105ad3a:	add    BYTE PTR [rax],al
 105ad3c:	jle    0x105ad14
 105ad3e:	add    al,BYTE PTR [rax]
 105ad40:	(bad)  
 105ad41:	add    BYTE PTR [rax],al
 105ad43:	add    BYTE PTR [rcx+0x2d6],dl
 105ad49:	add    BYTE PTR [rax],al
 105ad4b:	add    al,al
 105ad4d:	(bad)  
 105ad4e:	add    al,BYTE PTR [rax]
 105ad50:	sldt   WORD PTR [rax]
 105ad53:	add    ah,dl
 105ad55:	(bad)  
 105ad56:	add    al,BYTE PTR [rax]
 105ad58:	add    BYTE PTR [rax],al
 105ad5a:	add    BYTE PTR [rax],al
 105ad5c:	add    al,0xd7
 105ad5e:	add    al,BYTE PTR [rax]
 105ad60:	adc    BYTE PTR [rax],al
 105ad62:	add    BYTE PTR [rax],al
 105ad64:	adc    edi,edx
 105ad66:	add    al,BYTE PTR [rax]
 105ad68:	add    BYTE PTR [rax],al
 105ad6a:	add    BYTE PTR [rax],al
 105ad6c:	rex.B xlat BYTE PTR ds:[rbx]
 105ad6e:	add    al,BYTE PTR [rax]
 105ad70:	(bad)  
 105ad71:	(bad)  
 105ad72:	(bad)  
 105ad73:	inc    DWORD PTR [rcx]
 105ad75:	or     al,BYTE PTR [rax+rax*1]
 105ad78:	or     ah,BYTE PTR [rcx+rcx*1+0x0]
 105ad7c:	or     dh,BYTE PTR [rdx]
 105ad7e:	(bad)  
 105ad7f:	jo     0x105ada2
 105ad81:	add    eax,0x34050002
 105ad86:	(bad)  
 105ad87:	add    BYTE PTR [rax-0x5bfffd29],al
 105ad8d:	xlat   BYTE PTR ds:[rbx]
 105ad8e:	add    al,BYTE PTR [rax]
 105ad90:	je     0x105ad3f
 105ad92:	add    eax,0x4092100
 105ad97:	add    BYTE PTR [rcx],cl
 105ad99:	push   rsp
 105ad9a:	(bad)  
 105ad9b:	add    BYTE PTR [rax],al
 105ad9d:	xor    al,0x6
 105ad9f:	add    BYTE PTR [rax-0x5bfffd29],al
 105ada5:	xlat   BYTE PTR ds:[rbx]
 105ada6:	add    al,BYTE PTR [rax]
 105ada8:	je     0x105ad57
 105adaa:	add    eax,0x2052100
 105adaf:	add    BYTE PTR [rip+0xfffffffff00008e4],al        # 0xfffffffff105b699
 105adb5:	xlat   BYTE PTR ds:[rbx]
 105adb6:	add    al,BYTE PTR [rax]
 105adb8:	adc    ecx,ebx
 105adba:	add    al,BYTE PTR [rax]
 105adbc:	xchg   esp,eax
 105adbd:	lods   eax,DWORD PTR ds:[rsi]
 105adbe:	add    eax,0x2100
 105adc3:	add    al,dh
 105adc5:	xlat   BYTE PTR ds:[rbx]
 105adc6:	add    al,BYTE PTR [rax]
 105adc8:	adc    ecx,ebx
 105adca:	add    al,BYTE PTR [rax]
 105adcc:	xchg   esp,eax
 105adcd:	lods   eax,DWORD PTR ds:[rsi]
 105adce:	add    eax,0x1040100
 105add3:	add    BYTE PTR [rdx+rax*2],al
 105add6:	add    BYTE PTR [rax],al
 105add8:	add    DWORD PTR [rdx],ecx
 105adda:	add    al,0x0
 105addc:	or     dh,BYTE PTR [rsi+rax*1]
 105addf:	add    BYTE PTR [rdx],cl
 105ade1:	xor    al,BYTE PTR [rsi]
 105ade3:	jo     0x105ade6
 105ade5:	or     al,BYTE PTR [rax+rax*1]
 105ade8:	or     dh,BYTE PTR [rsi+rax*1]
 105adeb:	add    BYTE PTR [rdx],cl
 105aded:	xor    al,BYTE PTR [rsi]
 105adef:	jo     0x105adf2
 105adf1:	(bad)  
 105adf2:	add    al,BYTE PTR [rax]
 105adf4:	(bad)  
 105adf5:	xor    al,BYTE PTR [rdx]
 105adf7:	xor    BYTE PTR [rcx],al
 105adf9:	(bad)  
 105adfa:	add    al,BYTE PTR [rax]
 105adfc:	(bad)  
 105adfd:	xor    al,BYTE PTR [rdx]
 105adff:	xor    BYTE PTR [rcx],dl
 105ae01:	(bad)  
 105ae02:	(bad)  
 105ae03:	add    BYTE PTR [rsi],dl
 105ae05:	xor    al,0xc
 105ae07:	add    BYTE PTR [rax],cl
 105ae09:	jb     0x105ae0f
 105ae0b:	jo     0x105ae10
 105ae0d:	(bad)  
 105ae0e:	add    dl,BYTE PTR [rax-0x6c]
 105ae11:	inc    BYTE PTR [rbx]
 105ae13:	add    BYTE PTR [rax+0x40],ch
 105ae16:	add    BYTE PTR [rax],al
 105ae18:	(bad)  
 105ae19:	(bad)  
 105ae1a:	(bad)  
 105ae1b:	jmp    QWORD PTR [rax+0x4cc]
 105ae21:	add    BYTE PTR [rax],al
 105ae23:	add    BYTE PTR [rax+0x10004cc],dh
 105ae29:	add    BYTE PTR [rax],al
 105ae2b:	add    al,al
 105ae2d:	int3   
 105ae2e:	add    al,0x0
 105ae30:	and    bl,bl
 105ae32:	add    al,BYTE PTR [rax]
 105ae34:	(bad)  
 105ae35:	(bad)  
 105ae36:	(bad)  
 105ae37:	inc    DWORD PTR [rbp-0x25]
 105ae3a:	add    al,BYTE PTR [rax]
 105ae3c:	add    BYTE PTR [rax],al
 105ae3e:	add    BYTE PTR [rax],al
 105ae40:	pop    rdx
 105ae41:	fild   DWORD PTR [rdx]
 105ae43:	add    BYTE PTR [rcx],al
 105ae45:	add    BYTE PTR [rax],al
 105ae47:	add    BYTE PTR [rbx+rbx*8+0x2],ch
 105ae4b:	add    BYTE PTR [rdx],al
 105ae4d:	add    BYTE PTR [rax],al
 105ae4f:	add    BYTE PTR [rdx+0x10002db],bl
 105ae55:	add    BYTE PTR [rax],al
 105ae57:	add    BYTE PTR [rsi+0x2db],ah
 105ae5d:	add    BYTE PTR [rax],al
 105ae5f:	add    bl,dl
 105ae61:	fild   DWORD PTR [rdx]
 105ae63:	add    bh,bh
 105ae65:	(bad)  
 105ae66:	(bad)  
 105ae67:	call   FWORD PTR [rcx]
 105ae69:	adc    eax,DWORD PTR [rcx]
 105ae6b:	add    BYTE PTR [rdx+riz*4],al
 105ae6e:	add    BYTE PTR [rax],al
 105ae70:	rex.W add al,BYTE PTR [rax+rax*1]
 105ae74:	add    BYTE PTR [rax],al
 105ae77:	add    BYTE PTR [rcx],al
 105ae79:	add    al,0x1
 105ae7b:	add    BYTE PTR [rdx+rax*2],al
 105ae7e:	add    BYTE PTR [rax],al
 105ae80:	sbb    DWORD PTR [rcx],ebx
 105ae82:	add    al,0x0
 105ae84:	or     dh,BYTE PTR [rsi+rcx*1]
 105ae87:	add    BYTE PTR [rdx],cl
 105ae89:	mov    dl,0x6
 105ae8b:	jo     0x105aed5
 105ae8d:	add    al,BYTE PTR [rax+rax*1]
 105ae90:	pop    rax
 105ae91:	add    BYTE PTR [rax],al
 105ae93:	add    BYTE PTR [rcx],al
 105ae95:	(bad)  
 105ae96:	add    al,BYTE PTR [rax]
 105ae98:	(bad)  
 105ae99:	xor    al,BYTE PTR [rdx]
 105ae9b:	xor    BYTE PTR [rcx],bl
 105ae9d:	xor    BYTE PTR [rcx],cl
 105ae9f:	add    BYTE PTR [rsi],bl
 105aea1:	push   rsp
 105aea2:	sbb    BYTE PTR [rax],al
 105aea4:	sbb    dh,BYTE PTR [rsi+rdx*1]
 105aea7:	add    BYTE PTR [rsi],cl
 105aea9:	add    DWORD PTR [rdx],edx
 105aeab:	add    BYTE PTR [rdi],al
 105aead:	loopne 0x105aeb4
 105aeaf:	jo     0x105aeb5
 105aeb1:	(bad)  
 105aeb2:	add    BYTE PTR [rax],al
 105aeb4:	movabs al,ds:0x82000040900003fe
 105aebd:	add    BYTE PTR [rax],al
 105aebf:	add    bh,bh
 105aec1:	(bad)  
 105aec2:	(bad)  
 105aec3:	inc    eax
 105aec5:	jrcxz  0x105aecb
 105aec7:	add    BYTE PTR [rax],dl
 105aec9:	fiadd  WORD PTR [rdx]
 105aecb:	add    bh,bh
 105aecd:	(bad)  
 105aece:	(bad)  
 105aecf:	(bad)  
 105aed0:	mov    ebx,0x2de
 105aed5:	add    BYTE PTR [rax],al
 105aed7:	add    dl,dl
 105aed9:	fiadd  WORD PTR [rdx]
 105aedb:	add    bh,bh
 105aedd:	(bad)  
 105aede:	(bad)  
 105aedf:	call   FWORD PTR [rcx]
 105aee1:	sub    al,0xb
 105aee3:	add    BYTE PTR [rdx],bl
 105aee5:	fs lahf 
 105aee7:	add    BYTE PTR [rdx],bl
 105aee9:	xor    al,0x9e
 105aeeb:	add    BYTE PTR [rdx],bl
 105aeed:	add    DWORD PTR [rsi+0x11f01300],edx
 105aef3:	loopne 0x105af04
 105aef5:	ror    BYTE PTR [rip+0x700bc0],1        # 0x175babb
 105aefb:	add    ah,bh
 105aefd:	add    al,BYTE PTR [rax+rax*1]
 105af00:	(bad)  
 105af01:	add    BYTE PTR [rax],al
 105af03:	add    BYTE PTR [rip+0x740002e0],dh        # 0x7505b1e9
 105af09:	loopne 0x105af0d
 105af0b:	add    BYTE PTR [rax],dl
 105af0d:	hlt    
 105af0e:	add    al,0x0
 105af10:	add    BYTE PTR [rax],al
 105af12:	add    BYTE PTR [rax],al
 105af14:	jl     0x105aef6
 105af16:	add    al,BYTE PTR [rax]
 105af18:	shl    al,0x2
 105af1b:	add    BYTE PTR [rax],dl
 105af1d:	hlt    
 105af1e:	add    al,0x0
 105af20:	add    BYTE PTR [rax],al
 105af22:	add    BYTE PTR [rax],al
 105af24:	enter  0x2e0,0x0
 105af28:	movsxd esp,ecx
 105af2a:	add    al,BYTE PTR [rax]
 105af2c:	adc    ah,dh
 105af2e:	add    al,0x0
 105af30:	add    BYTE PTR [rax],al
 105af32:	add    BYTE PTR [rax],al
 105af34:	imul   esp,ecx,0x2
 105af37:	add    BYTE PTR [rdx+riz*8-0xbeffffe],al
 105af3e:	add    al,0x0
 105af40:	add    BYTE PTR [rax],al
 105af42:	add    BYTE PTR [rax],al
 105af44:	mov    edx,fs
 105af46:	add    al,BYTE PTR [rax]
 105af48:	sub    ah,bl
 105af4a:	add    al,BYTE PTR [rax]
 105af4c:	adc    ah,dh
 105af4e:	add    al,0x0
 105af50:	add    BYTE PTR [rax],al
 105af52:	add    BYTE PTR [rax],al
 105af54:	(bad)  
 105af55:	jrcxz  0x105af59
 105af57:	add    BYTE PTR [rbx-0x1d],dl
 105af5a:	add    al,BYTE PTR [rax]
 105af5c:	adc    ah,dh
 105af5e:	add    al,0x0
 105af60:	add    BYTE PTR [rax],al
 105af62:	add    BYTE PTR [rax],al
 105af64:	movabs ds:0x600020601000004,al
 105af6d:	mov    dl,0x2
 105af6f:	push   rax
 105af70:	adc    DWORD PTR [rsp+rax*1],edx
 105af73:	add    BYTE PTR [rsp+rsi*1],dl
 105af76:	or     BYTE PTR [rax],al
 105af78:	(bad)  
 105af79:	push   rdx
 105af7a:	add    dh,BYTE PTR [rax-0x6c]
 105af7d:	inc    BYTE PTR [rbx]
 105af7f:	add    BYTE PTR [rax-0xffffc0],bh
 105af85:	(bad)  
 105af86:	(bad)  
 105af87:	jmp    QWORD PTR [rax-0x6ffffb24]
 105af8d:	jrcxz  0x105af91
 105af8f:	add    bh,bh
 105af91:	(bad)  
 105af92:	(bad)  
 105af93:	inc    esp
 105af95:	jrcxz  0x105af99
 105af97:	add    BYTE PTR [rax],al
 105af99:	add    BYTE PTR [rax],al
 105af9b:	add    al,bl
 105af9d:	jrcxz  0x105afa1
 105af9f:	add    bh,bh
 105afa1:	(bad)  
 105afa2:	(bad)  
 105afa3:	call   QWORD PTR [rcx]
 105afa5:	(bad)  
 105afa6:	(bad)  
 105afa7:	add    BYTE PTR [rsi],cl
 105afa9:	repnz (bad) 
 105afab:	loopne 0x105afb2
 105afad:	jo     0x105afb3
 105afaf:	(bad)  
 105afb0:	add    edx,DWORD PTR [rax+0x2]
 105afb3:	xor    BYTE PTR [rsi+rdi*8+0x40e00003],dl
 105afba:	add    BYTE PTR [rax],al
 105afbc:	(bad)  
 105afbd:	(bad)  
 105afbe:	(bad)  
 105afbf:	inc    DWORD PTR [rax+0x4c7]
 105afc5:	add    BYTE PTR [rax],al
 105afc7:	add    BYTE PTR [rax+0x4c7],dl
 105afcd:	add    BYTE PTR [rax],al
 105afcf:	add    BYTE PTR [rax+0x100004c7],ah
 105afd5:	in     al,0x2
 105afd7:	add    bh,bh
 105afd9:	(bad)  
 105afda:	(bad)  
 105afdb:	call   FWORD PTR [rsp+riz*8+0x2]
 105afdf:	add    BYTE PTR [rax],al
 105afe1:	add    BYTE PTR [rax],al
 105afe3:	add    BYTE PTR [rdi-0x1c],bh
 105afe6:	add    al,BYTE PTR [rax]
 105afe8:	add    DWORD PTR [rax],eax
 105afea:	add    BYTE PTR [rax],al
 105afec:	xchg   ebp,eax
 105afed:	in     al,0x2
 105afef:	add    BYTE PTR [rax],al
 105aff1:	add    BYTE PTR [rax],al
 105aff3:	add    BYTE PTR [rdx],al
 105aff5:	in     eax,0x2
 105aff7:	add    BYTE PTR [rdx],al
 105aff9:	add    BYTE PTR [rax],al
 105affb:	add    BYTE PTR [rip+0x2e5],bl        # 0x105b2e6
 105b001:	add    BYTE PTR [rax],al
 105b003:	add    BYTE PTR [rsi+riz*8],dl
 105b006:	add    al,BYTE PTR [rax]
 105b008:	(bad)  
 105b009:	(bad)  
 105b00a:	(bad)  
 105b00b:	jmp    QWORD PTR [rsi]
 105b00d:	out    0x2,al
 105b00f:	add    BYTE PTR [rax],al
 105b011:	add    BYTE PTR [rax],al
 105b013:	add    BYTE PTR [rbx-0xfffd1a],dl
 105b019:	(bad)  
 105b01a:	(bad)  
 105b01b:	call   QWORD PTR [rcx]
 105b01d:	sub    cl,BYTE PTR [rdx]
 105b01f:	add    BYTE PTR [rdx],ah
 105b021:	add    DWORD PTR [rbx],ebx
 105b023:	add    BYTE PTR [rsi],dl
 105b025:	lock adc al,0xe0
 105b028:	adc    dl,al
 105b02a:	adc    al,al
 105b02c:	(bad)  
 105b02d:	jo     0x105b03c
 105b02f:	(bad)  
 105b030:	or     al,0x30
 105b032:	or     edx,DWORD PTR [rax-0x6c]
 105b035:	inc    BYTE PTR [rbx]
 105b037:	add    BYTE PTR [rax],cl
 105b039:	add    BYTE PTR [r8],al
 105b03c:	(bad)  
 105b03d:	(bad)  
 105b03e:	(bad)  
 105b03f:	call   QWORD PTR [rax]
 105b041:	fadd   QWORD PTR [rax+rax*1]
 105b044:	add    BYTE PTR [rax],al
 105b046:	add    BYTE PTR [rax],al
 105b048:	and    ah,bl
 105b04a:	add    al,0x0
 105b04c:	add    DWORD PTR [rax],eax
 105b04e:	add    BYTE PTR [rax],al
 105b050:	xor    ah,bl
 105b052:	add    al,0x0
 105b054:	add    al,BYTE PTR [rax]
 105b056:	add    BYTE PTR [rax],al
 105b058:	rex fadd QWORD PTR [rax+rax*1]
 105b05c:	add    eax,DWORD PTR [rax]
 105b05e:	add    BYTE PTR [rax],al
 105b060:	push   rax
 105b061:	fadd   QWORD PTR [rax+rax*1]
 105b064:	add    al,0x0
 105b066:	add    BYTE PTR [rax],al
 105b068:	(bad)  
 105b069:	fadd   QWORD PTR [rax+rax*1]
 105b06c:	add    eax,0x70000000
 105b071:	fadd   QWORD PTR [rax+rax*1]
 105b074:	add    al,0x0
 105b076:	add    BYTE PTR [rax],al
 105b078:	sbb    ah,0x4
 105b07b:	add    al,al
 105b07d:	out    0x2,al
 105b07f:	add    bh,bh
 105b081:	(bad)  
 105b082:	(bad)  
 105b083:	push   rax
 105b085:	out    0x2,al
 105b087:	add    BYTE PTR [rcx],al
 105b089:	add    BYTE PTR [rax],al
 105b08b:	add    BYTE PTR [rip+0x20002e7],bl        # 0x305b378
 105b091:	add    BYTE PTR [rax],al
 105b093:	add    BYTE PTR [rdi+riz*8+0x2],al
 105b097:	add    BYTE PTR [rbx],al
 105b099:	add    BYTE PTR [rax],al
 105b09b:	add    BYTE PTR [rax-0x19],ch
 105b09e:	add    al,BYTE PTR [rax]
 105b0a0:	add    al,0x0
 105b0a2:	add    BYTE PTR [rax],al
 105b0a4:	cmp    ebp,eax
 105b0a6:	add    al,BYTE PTR [rax]
 105b0a8:	add    eax,0x46000000
 105b0ad:	call   0x10bb0b4
 105b0b2:	add    BYTE PTR [rax],al
 105b0b4:	fwait
 105b0b5:	jmp    0x10ab0bc
 105b0ba:	add    BYTE PTR [rax],al
 105b0bc:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 105b0bd:	jmp    0x109b0c4
 105b0c2:	add    BYTE PTR [rax],al
 105b0c4:	mov    eax,0x60002e9
 105b0c9:	add    BYTE PTR [rax],al
 105b0cb:	add    al,dl
 105b0cd:	jmp    0x109b0d4
 105b0d2:	add    BYTE PTR [rax],al
 105b0d4:	cmp    dl,ch
 105b0d6:	add    al,BYTE PTR [rax]
 105b0d8:	add    eax,DWORD PTR [rax]
 105b0da:	add    BYTE PTR [rax],al
 105b0dc:	(bad)  
 105b0dd:	(bad)  
 105b0de:	add    al,BYTE PTR [rax]
 105b0e0:	add    al,BYTE PTR [rax]
 105b0e2:	add    BYTE PTR [rax],al
 105b0e4:	mov    edi,0x10002ea
 105b0e9:	add    BYTE PTR [rax],al
 105b0eb:	add    ah,dl
 105b0ed:	(bad)  
 105b0ee:	add    al,BYTE PTR [rax]
 105b0f0:	add    BYTE PTR [rax],al
 105b0f2:	add    BYTE PTR [rax],al
 105b0f4:	fsubp  st(2),st
 105b0f6:	add    al,BYTE PTR [rax]
 105b0f8:	(bad)  
 105b0f9:	(bad)  
 105b0fa:	(bad)  
 105b0fb:	jmp    rbx
 105b0fd:	(bad)  
 105b0fe:	add    al,BYTE PTR [rax]
 105b100:	add    al,0x0
 105b102:	add    BYTE PTR [rax],al
 105b104:	jmp    0x405b3f3
 105b109:	add    BYTE PTR [rax],al
 105b10b:	add    BYTE PTR [rdx],dh
 105b10d:	jmp    0x105b111
 105b10f:	add    BYTE PTR [rdx],al
 105b111:	add    BYTE PTR [rax],al
 105b113:	add    BYTE PTR [rdi-0x15],ch
 105b116:	add    al,BYTE PTR [rax]
 105b118:	add    DWORD PTR [rax],eax
 105b11a:	add    BYTE PTR [rax],al
 105b11c:	test   bl,ch
 105b11e:	add    al,BYTE PTR [rax]
 105b120:	add    BYTE PTR [rax],al
 105b122:	add    BYTE PTR [rax],al
 105b124:	mov    gs,ebx
 105b126:	add    al,BYTE PTR [rax]
 105b128:	(bad)  
 105b129:	(bad)  
 105b12a:	(bad)  
 105b12b:	call   FWORD PTR [rsi+0x40002eb]
 105b131:	add    BYTE PTR [rax],al
 105b133:	add    BYTE PTR [rdi],al
 105b135:	in     al,dx
 105b136:	add    al,BYTE PTR [rax]
 105b138:	(bad)  
 105b139:	add    BYTE PTR [rax],al
 105b13b:	add    BYTE PTR [rbx+0x40002ec],cl
 105b141:	add    BYTE PTR [rax],al
 105b143:	add    BYTE PTR [rsi+0x30002ec],dl
 105b149:	add    BYTE PTR [rax],al
 105b14b:	add    dl,ah
 105b14d:	in     al,dx
 105b14e:	add    al,BYTE PTR [rax]
 105b150:	add    al,BYTE PTR [rax]
 105b152:	add    BYTE PTR [rax],al
 105b154:	(bad)  
 105b155:	in     eax,dx
 105b156:	add    al,BYTE PTR [rax]
 105b158:	add    DWORD PTR [rax],eax
 105b15a:	add    BYTE PTR [rax],al
 105b15c:	xor    al,0xed
 105b15e:	add    al,BYTE PTR [rax]
 105b160:	add    BYTE PTR [rax],al
 105b162:	add    BYTE PTR [rax],al
 105b164:	ds in  eax,dx
 105b166:	add    al,BYTE PTR [rax]
 105b168:	(bad)  
 105b169:	(bad)  
 105b16a:	(bad)  
 105b16b:	dec    DWORD PTR [rsi-0x13]
 105b16e:	add    al,BYTE PTR [rax]
 105b170:	add    al,0x0
 105b172:	add    BYTE PTR [rax],al
 105b174:	pop    rcx
 105b175:	in     eax,dx
 105b176:	add    al,BYTE PTR [rax]
 105b178:	add    eax,DWORD PTR [rax]
 105b17a:	add    BYTE PTR [rax],al
 105b17c:	movabs ds:0xdf000000020002ed,al
 105b185:	in     eax,dx
 105b186:	add    al,BYTE PTR [rax]
 105b188:	add    DWORD PTR [rax],eax
 105b18a:	add    BYTE PTR [rax],al
 105b18c:	hlt    
 105b18d:	in     eax,dx
 105b18e:	add    al,BYTE PTR [rax]
 105b190:	add    BYTE PTR [rax],al
 105b192:	add    BYTE PTR [rax],al
 105b194:	(bad)  
 105b195:	in     eax,dx
 105b196:	add    al,BYTE PTR [rax]
 105b198:	(bad)  
 105b199:	(bad)  
 105b19a:	(bad)  
 105b19b:	inc    DWORD PTR [rbx]
 105b19d:	out    dx,al
 105b19e:	add    al,BYTE PTR [rax]
 105b1a0:	add    al,0x0
 105b1a2:	add    BYTE PTR [rax],al
 105b1a4:	adc    eax,0x30002ee
 105b1a9:	add    BYTE PTR [rax],al
 105b1ab:	add    BYTE PTR [rdx-0x12],ah
 105b1ae:	add    al,BYTE PTR [rax]
 105b1b0:	add    al,BYTE PTR [rax]
 105b1b2:	add    BYTE PTR [rax],al
 105b1b4:	lahf   
 105b1b5:	out    dx,al
 105b1b6:	add    al,BYTE PTR [rax]
 105b1b8:	add    DWORD PTR [rax],eax
 105b1ba:	add    BYTE PTR [rax],al
 105b1bc:	mov    ah,0xee
 105b1be:	add    al,BYTE PTR [rax]
 105b1c0:	add    BYTE PTR [rax],al
 105b1c2:	add    BYTE PTR [rax],al
 105b1c4:	mov    esi,0xff0002ee
 105b1c9:	(bad)  
 105b1ca:	(bad)  
 105b1cb:	call   QWORD PTR [rcx]
 105b1cd:	(bad)  
 105b1ce:	or     al,BYTE PTR [rax]
 105b1d0:	(bad)  
 105b1d1:	xor    al,0x15
 105b1d3:	add    BYTE PTR [rdi],dl
 105b1d5:	mov    dl,0x10
 105b1d7:	lock (bad) 
 105b1d9:	loopne 0x105b1e7
 105b1db:	ror    BYTE PTR [rdx],1
 105b1dd:	ror    BYTE PTR [rax],0x70
 105b1e0:	(bad)  
 105b1e1:	(bad)  
 105b1e2:	(bad)  
 105b1e3:	push   rax
 105b1e4:	xchg   esp,eax
 105b1e5:	inc    BYTE PTR [rbx]
 105b1e7:	add    BYTE PTR [rax],dh
 105b1e9:	add    BYTE PTR [r8],al
 105b1ec:	(bad)  
 105b1ed:	(bad)  
 105b1ee:	(bad)  
 105b1ef:	inc    DWORD PTR [rax-0x30]
 105b1f2:	add    al,0x0
 105b1f4:	add    BYTE PTR [rax],al
 105b1f6:	add    BYTE PTR [rax],al
 105b1f8:	push   rax
 105b1f9:	rol    BYTE PTR [rax+rax*1],1
 105b1fc:	add    DWORD PTR [rax],eax
 105b1fe:	add    BYTE PTR [rax],al
 105b200:	(bad)  
 105b201:	rol    BYTE PTR [rax+rax*1],1
 105b204:	add    al,BYTE PTR [rax]
 105b206:	add    BYTE PTR [rax],al
 105b208:	jo     0x105b1da
 105b20a:	add    al,0x0
 105b20c:	add    DWORD PTR [rax],eax
 105b20e:	add    BYTE PTR [rax],al
 105b210:	adc    al,0x4
 105b213:	add    BYTE PTR [rax+rax*1],al
 105b216:	add    BYTE PTR [rax],al
 105b218:	nop
 105b219:	rol    BYTE PTR [rax+rax*1],1
 105b21c:	add    eax,0xa0000000
 105b221:	rol    BYTE PTR [rax+rax*1],1
 105b224:	add    DWORD PTR [rax],eax
 105b226:	add    BYTE PTR [rax],al
 105b228:	mov    al,0xd0
 105b22a:	add    al,0x0
 105b22c:	lock out dx,al
 105b22e:	add    al,BYTE PTR [rax]
 105b230:	(bad)  
 105b231:	(bad)  
 105b232:	(bad)  
 105b233:	jmp    QWORD PTR [rdi+rbp*8]
 105b236:	add    al,BYTE PTR [rax]
 105b238:	add    BYTE PTR [rax],al
 105b23a:	add    BYTE PTR [rax],al
 105b23c:	ss out dx,eax
 105b23e:	add    al,BYTE PTR [rax]
 105b240:	add    DWORD PTR [rax],eax
 105b242:	add    BYTE PTR [rax],al
 105b244:	pop    rsi
 105b245:	out    dx,eax
 105b246:	add    al,BYTE PTR [rax]
 105b248:	add    al,BYTE PTR [rax]
 105b24a:	add    BYTE PTR [rax],al
 105b24c:	ins    BYTE PTR es:[rdi],dx
 105b24d:	out    dx,eax
 105b24e:	add    al,BYTE PTR [rax]
 105b250:	add    DWORD PTR [rax],eax
 105b252:	add    BYTE PTR [rax],al
 105b254:	jnp    0x105b245
 105b256:	add    al,BYTE PTR [rax]
 105b258:	add    BYTE PTR [rax],al
 105b25a:	add    BYTE PTR [rax],al
 105b25c:	xchg   bh,ch
 105b25e:	add    al,BYTE PTR [rax]
 105b260:	(bad)  
 105b261:	(bad)  
 105b262:	(bad)  
 105b263:	call   QWORD PTR [rsi+0x10002ef]
 105b269:	add    BYTE PTR [rax],al
 105b26b:	add    BYTE PTR [rsi+0x40002ef],bh
 105b271:	add    BYTE PTR [rax],al
 105b273:	add    bl,dl
 105b275:	out    dx,eax
 105b276:	add    al,BYTE PTR [rax]
 105b278:	add    eax,0x9000000
 105b27d:	lock add al,BYTE PTR [rax]
 105b280:	(bad)  
 105b281:	add    BYTE PTR [rax],al
 105b283:	add    BYTE PTR [rdi],dl
 105b285:	lock add al,BYTE PTR [rax]
 105b288:	add    eax,0x22000000
 105b28d:	lock add al,BYTE PTR [rax]
 105b290:	add    al,0x0
 105b292:	add    BYTE PTR [rax],al
 105b294:	cmp    dh,al
 105b296:	add    al,BYTE PTR [rax]
 105b298:	add    DWORD PTR [rax],eax
 105b29a:	add    BYTE PTR [rax],al
 105b29c:	xor    al,0x2
 105b29f:	add    BYTE PTR [rdi],al
 105b2a1:	add    BYTE PTR [rax],al
 105b2a3:	add    BYTE PTR [rbx+0x10002f0],bh
 105b2a9:	add    BYTE PTR [rax],al
 105b2ab:	add    dl,bh
 105b2ad:	lock add al,BYTE PTR [rax]
 105b2b0:	add    BYTE PTR [rax],al
 105b2b2:	add    BYTE PTR [rax],al
 105b2b4:	add    eax,0xff0002f1
 105b2b9:	(bad)  
 105b2ba:	(bad)  
 105b2bb:	call   FWORD PTR [rcx]
 105b2bd:	or     al,BYTE PTR ss:[rax]
 105b2c0:	sbb    al,0x1
 105b2c2:	push   rbp
 105b2c3:	add    BYTE PTR [rip+0x9e00bf0],cl        # 0xae5beb9
 105b2c9:	rol    BYTE PTR [rdi],1
 105b2cb:	rol    BYTE PTR [rip+0x3600470],0x30        # 0x465b742
 105b2d2:	add    dl,BYTE PTR [rax-0x60]
 105b2d5:	inc    BYTE PTR [rbx]
 105b2d7:	add    BYTE PTR [rax+0x41],bl
 105b2da:	add    BYTE PTR [rax],al
 105b2dc:	xchg   edx,eax
 105b2dd:	add    al,BYTE PTR [rax]
 105b2df:	add    bh,bh
 105b2e1:	(bad)  
 105b2e2:	(bad)  
 105b2e3:	push   QWORD PTR [rax]
 105b2e5:	iret   
 105b2e6:	add    al,0x0
 105b2e8:	add    BYTE PTR [rax],al
 105b2ea:	add    BYTE PTR [rax],al
 105b2ec:	rex iret 
 105b2ee:	add    al,0x0
 105b2f0:	add    DWORD PTR [rax],eax
 105b2f2:	add    BYTE PTR [rax],al
 105b2f4:	push   rax
 105b2f5:	iret   
 105b2f6:	add    al,0x0
 105b2f8:	add    DWORD PTR [rax],eax
 105b2fa:	add    BYTE PTR [rax],al
 105b2fc:	(bad)  
 105b2fd:	iret   
 105b2fe:	add    al,0x0
 105b300:	add    DWORD PTR [rax],eax
 105b302:	add    BYTE PTR [rax],al
 105b304:	jo     0x105b2d5
 105b306:	add    al,0x0
 105b308:	add    DWORD PTR [rax],eax
 105b30a:	add    BYTE PTR [rax],al
 105b30c:	or     bh,0x4
 105b30f:	add    BYTE PTR [rax],dh
 105b311:	icebp  
 105b312:	add    al,BYTE PTR [rax]
 105b314:	(bad)  
 105b315:	(bad)  
 105b316:	(bad)  
 105b317:	push   QWORD PTR [rdi-0xf]
 105b31a:	add    al,BYTE PTR [rax]
 105b31c:	add    BYTE PTR [rax],al
 105b31e:	add    BYTE PTR [rax],al
 105b320:	popf   
 105b321:	icebp  
 105b322:	add    al,BYTE PTR [rax]
 105b324:	add    DWORD PTR [rax],eax
 105b326:	add    BYTE PTR [rax],al
 105b328:	lods   eax,DWORD PTR ds:[rsi]
 105b329:	icebp  
 105b32a:	add    al,BYTE PTR [rax]
 105b32c:	add    al,BYTE PTR [rax]
 105b32e:	add    BYTE PTR [rax],al
 105b330:	int3   
 105b331:	icebp  
 105b332:	add    al,BYTE PTR [rax]
 105b334:	add    DWORD PTR [rax],eax
 105b336:	add    BYTE PTR [rax],al
 105b338:	repnz add al,BYTE PTR cs:[rax]
 105b33c:	add    eax,DWORD PTR [rax]
 105b33e:	add    BYTE PTR [rax],al
 105b340:	push   rbp
 105b341:	repnz add al,BYTE PTR [rax]
 105b344:	add    DWORD PTR [rax],eax
 105b346:	add    BYTE PTR [rax],al
 105b348:	mov    ebp,0x2f2
 105b34d:	add    BYTE PTR [rax],al
 105b34f:	add    cl,cl
 105b351:	repnz add al,BYTE PTR [rax]
 105b354:	(bad)  
 105b355:	(bad)  
 105b356:	(bad)  
 105b357:	dec    esi
 105b359:	repnz add al,BYTE PTR [rax]
 105b35c:	add    DWORD PTR [rax],eax
 105b35e:	add    BYTE PTR [rax],al
 105b360:	sti    
 105b361:	repnz add al,BYTE PTR [rax]
 105b364:	add    BYTE PTR [rax],al
 105b366:	add    BYTE PTR [rax],al
 105b368:	(bad)  
 105b369:	repz add al,BYTE PTR [rax]
 105b36c:	(bad)  
 105b36d:	(bad)  
 105b36e:	(bad)  
 105b36f:	dec    DWORD PTR [rbx+rsi*8]
 105b372:	add    al,BYTE PTR [rax]
 105b374:	add    DWORD PTR [rax],eax
 105b376:	add    BYTE PTR [rax],al
 105b378:	jbe    0x105b36d
 105b37a:	add    al,BYTE PTR [rax]
 105b37c:	add    al,0x0
 105b37e:	add    BYTE PTR [rax],al
 105b380:	(bad)  
 105b381:	repz add al,BYTE PTR [rax]
 105b384:	add    DWORD PTR [rax],eax
 105b386:	add    BYTE PTR [rax],al
 105b388:	in     eax,0xf3
 105b38a:	add    al,BYTE PTR [rax]
 105b38c:	add    eax,0xf1000000
 105b391:	repz add al,BYTE PTR [rax]
 105b394:	add    DWORD PTR [rax],eax
 105b396:	add    BYTE PTR [rax],al
 105b398:	sbb    eax,0x40002f4
 105b39d:	add    BYTE PTR [rax],al
 105b39f:	add    BYTE PTR [rbx],ah
 105b3a1:	hlt    
 105b3a2:	add    al,BYTE PTR [rax]
 105b3a4:	add    DWORD PTR [rax],eax
 105b3a6:	add    BYTE PTR [rax],al
 105b3a8:	rex.WR hlt 
 105b3aa:	add    al,BYTE PTR [rax]
 105b3ac:	add    BYTE PTR [rax],al
 105b3ae:	add    BYTE PTR [rax],al
 105b3b0:	pop    rax
 105b3b1:	hlt    
 105b3b2:	add    al,BYTE PTR [rax]
 105b3b4:	(bad)  
 105b3b5:	(bad)  
 105b3b6:	(bad)  
 105b3b7:	inc    DWORD PTR [rcx]
 105b3b9:	sbb    BYTE PTR [rdx],cl
 105b3bb:	add    BYTE PTR [rax],bl
 105b3bd:	or     al,BYTE PTR fs:[rax]
 105b3c0:	sbb    BYTE PTR [rcx+rcx*1+0x0],dl
 105b3c4:	sbb    BYTE PTR [rax+rcx*1],dh
 105b3c7:	add    BYTE PTR [rax],bl
 105b3c9:	xor    dl,BYTE PTR [rax+rsi*8]
 105b3cc:	adc    ah,al
 105b3ce:	adc    BYTE PTR [rax+0x11],dh
 105b3d1:	sbb    al,0x8
 105b3d3:	add    BYTE PTR [rsp+rdx*2],bl
 105b3d6:	or     al,0x0
 105b3d8:	(bad)  
 105b3d9:	xor    al,0xb
 105b3db:	add    BYTE PTR [rcx],cl
 105b3dd:	push   rdx
 105b3de:	add    eax,0x27003e0
 105b3e3:	(bad)  
 105b3e4:	xchg   esp,eax
 105b3e5:	inc    BYTE PTR [rbx]
 105b3e7:	add    BYTE PTR [rax-0xffffbf],al
 105b3ed:	(bad)  
 105b3ee:	(bad)  
 105b3ef:	call   QWORD PTR [rax]
 105b3f1:	loope  0x105b3f7
 105b3f3:	add    bh,bh
 105b3f5:	(bad)  
 105b3f6:	(bad)  
 105b3f7:	jmp    QWORD PTR [rax]
 105b3f9:	loope  0x105b3ff
 105b3fb:	add    BYTE PTR [rax-0xfffd0b],ah
 105b401:	(bad)  
 105b402:	(bad)  
 105b403:	call   QWORD PTR [rcx]
 105b405:	sbb    DWORD PTR [rsi],eax
 105b407:	add    BYTE PTR [rcx],bl
 105b409:	or     eax,DWORD PTR fs:[rax]
 105b40c:	adc    al,0x34
 105b40e:	or     DWORD PTR [rax],eax
 105b410:	(bad)  
 105b411:	push   rdx
 105b412:	add    dh,BYTE PTR [rax-0x6c]
 105b415:	inc    BYTE PTR [rbx]
 105b417:	add    BYTE PTR [rax-0xffffbf],ch
 105b41d:	(bad)  
 105b41e:	(bad)  
 105b41f:	inc    eax
 105b421:	fadd   QWORD PTR [rax+rax*1]
 105b424:	add    BYTE PTR [rax],al
 105b426:	add    BYTE PTR [rax],al
 105b428:	loopne 0x105b406
 105b42a:	add    al,0x0
 105b42c:	add    BYTE PTR [rax],al
 105b42e:	add    BYTE PTR [rax],al
 105b430:	lock fadd QWORD PTR [rax+rax*1]
 105b434:	push   rax
 105b435:	test   BYTE PTR [rdx],0x0
 105b438:	(bad)  
 105b439:	(bad)  
 105b43a:	(bad)  
 105b43b:	(bad)  
 105b43c:	cli    
 105b43d:	test   BYTE PTR [rdx],0x0
 105b440:	add    BYTE PTR [rax],al
 105b442:	add    BYTE PTR [rax],al
 105b444:	(bad)  
 105b445:	test   DWORD PTR [rdx],0xffffff00
 105b44b:	inc    DWORD PTR [rcx]
 105b44d:	(bad)  
 105b44e:	add    al,BYTE PTR [rax]
 105b450:	(bad)  
 105b451:	xor    al,BYTE PTR [rdx]
 105b453:	push   rax
 105b454:	adc    DWORD PTR [rcx],esp
 105b456:	or     al,BYTE PTR [rax]
 105b458:	and    DWORD PTR [rax+rdx*1],esi
 105b45b:	add    BYTE PTR [rax],dl
 105b45d:	jb     0x105b46b
 105b45f:	lock or ah,al
 105b462:	or     al,dl
 105b464:	(bad)  
 105b465:	rol    BYTE PTR [rax+rsi*2],0x3
 105b469:	(bad)  
 105b46a:	add    dl,BYTE PTR [rax-0x6c]
 105b46d:	inc    BYTE PTR [rbx]
 105b46f:	add    al,dl
 105b471:	add    BYTE PTR [r8],al
 105b474:	(bad)  
 105b475:	(bad)  
 105b476:	(bad)  
 105b477:	inc    DWORD PTR [rax+0x400004e3]
 105b47d:	test   DWORD PTR [rdx],0xffffff00
 105b483:	(bad)  
 105b484:	mov    ebp,0x2f8
 105b489:	add    BYTE PTR [rax],al
 105b48b:	add    BYTE PTR [rdx-0x7],ch
 105b48e:	add    al,BYTE PTR [rax]
 105b490:	(bad)  
 105b491:	(bad)  
 105b492:	(bad)  
 105b493:	call   QWORD PTR [rdx+0x2f9]
 105b499:	add    BYTE PTR [rax],al
 105b49b:	add    BYTE PTR [rbp-0xfffd07],bl
 105b4a1:	(bad)  
 105b4a2:	(bad)  
 105b4a3:	inc    DWORD PTR [rcx]
 105b4a5:	(bad)  
 105b4a6:	add    al,BYTE PTR [rax]
 105b4a8:	(bad)  
 105b4a9:	xor    al,BYTE PTR [rdx]
 105b4ab:	push   rax
 105b4ac:	add    DWORD PTR [rdx],ecx
 105b4ae:	add    al,0x0
 105b4b0:	or     dh,BYTE PTR [rsi+rax*1]
 105b4b3:	add    BYTE PTR [rdx],cl
 105b4b5:	xor    al,BYTE PTR [rsi]
 105b4b7:	jo     0x105b4d2
 105b4b9:	or     eax,DWORD PTR ss:[rax]
 105b4bc:	and    al,0x64
 105b4be:	pushf  
 105b4bf:	add    DWORD PTR [rax],esp
 105b4c1:	xor    al,0x9a
 105b4c3:	add    DWORD PTR [rbx],edx
 105b4c5:	add    DWORD PTR [rcx+rax*1-0x1ff50ff4],edx
 105b4cc:	or     al,dl
 105b4ce:	(bad)  
 105b4cf:	rol    BYTE PTR [rax+rsi*2],0x0
 105b4d3:	add    BYTE PTR [rax-0x7fffc02],ah
 105b4d9:	add    BYTE PTR [r8],al
 105b4dc:	xchg   ebx,eax
 105b4dd:	or     al,0x0
 105b4df:	add    bh,bh
 105b4e1:	(bad)  
 105b4e2:	(bad)  
 105b4e3:	inc    DWORD PTR [rax]
 105b4e5:	add    BYTE PTR [rax],al
 105b4e7:	add    bh,bh
 105b4e9:	(bad)  
 105b4ea:	(bad)  
 105b4eb:	inc    DWORD PTR [rax]
 105b4ed:	add    BYTE PTR [rax],al
 105b4ef:	add    BYTE PTR [rcx],al
 105b4f1:	add    BYTE PTR [rax],al
 105b4f3:	add    BYTE PTR [rax-0xb],dl
 105b4f6:	add    al,0x0
	...
 105b500:	add    al,BYTE PTR [rax]
 105b502:	add    BYTE PTR [rax],al
 105b504:	add    al,BYTE PTR [rax]
 105b506:	add    BYTE PTR [rax],al
 105b508:	or     al,0xb5
 105b50a:	add    eax,0x0
 105b50f:	add    BYTE PTR [rax+0x35],dl
 105b512:	(bad)  
 105b513:	add    BYTE PTR [rax+0x0],dl
 105b516:	add    BYTE PTR [rax],al
 105b518:	movabs al,ds:0x580004f4
 105b521:	add    BYTE PTR [rax],al
 105b523:	add    BYTE PTR [rax+0x48000635],al
 105b529:	add    BYTE PTR [rax],al
 105b52b:	add    BYTE PTR [rax],al
 105b52d:	cmc    
 105b52e:	add    al,0x0
 105b530:	rex.W add BYTE PTR [rax],al
 105b533:	add    BYTE PTR [rax],al
 105b535:	cli    
 105b536:	add    al,BYTE PTR [rax]
 105b538:	(bad)  
 105b539:	(bad)  
 105b53a:	(bad)  
 105b53b:	jmp    rax
 105b53d:	cli    
 105b53e:	add    al,BYTE PTR [rax]
 105b540:	add    BYTE PTR [rax],al
 105b542:	add    BYTE PTR [rax],al
 105b544:	loopne 0x105b541
 105b546:	add    al,BYTE PTR [rax]
 105b548:	(bad)  
 105b549:	(bad)  
 105b54a:	(bad)  
 105b54b:	jmp    QWORD PTR [rax+0x4f4]
 105b551:	add    BYTE PTR [rax],al
 105b553:	add    BYTE PTR [rsi+0x10004f4],ch
 105b559:	add    BYTE PTR [rax],al
 105b55b:	add    al,ch
 105b55d:	hlt    
 105b55e:	add    al,0x0
 105b560:	add    BYTE PTR [rax],al
 105b562:	add    BYTE PTR [rax],al
 105b564:	or     eax,0x20004f5
 105b569:	add    BYTE PTR [rax],al
 105b56b:	add    BYTE PTR [rax],ch
 105b56d:	cmc    
 105b56e:	add    al,0x0
 105b570:	add    DWORD PTR [rax],eax
 105b572:	add    BYTE PTR [rax],al
 105b574:	xor    esi,ebp
 105b576:	add    al,0x0
 105b578:	add    BYTE PTR [rax],al
 105b57a:	add    BYTE PTR [rax],al
 105b57c:	sbb    DWORD PTR [rbx],ecx
 105b57e:	add    eax,DWORD PTR [rax]
 105b580:	or     esp,DWORD PTR [rdx+0x7]
 105b583:	push   rax
 105b584:	(bad)  
 105b585:	xor    BYTE PTR [rax],al
 105b587:	add    BYTE PTR [rsi+rdi*8+0x41f80003],dl
 105b58e:	add    BYTE PTR [rax],al
 105b590:	sbb    DWORD PTR [rdx],ecx
 105b592:	add    al,BYTE PTR [rax]
 105b594:	or     dl,BYTE PTR [rdx+0x6]
 105b597:	push   rax
 105b598:	xchg   esp,eax
 105b599:	inc    BYTE PTR [rbx]
 105b59b:	add    al,bh
 105b59d:	add    BYTE PTR [r8],al
 105b5a0:	add    DWORD PTR [rax],edx
 105b5a2:	(bad)  
 105b5a3:	add    BYTE PTR [rax],dl
 105b5a5:	or     DWORD PTR fs:[rax],eax
 105b5a8:	adc    BYTE PTR [rax+rcx*1],dh
 105b5ab:	add    BYTE PTR [rax],dl
 105b5ad:	xor    cl,BYTE PTR [rax+riz*8]
 105b5b0:	and    DWORD PTR [rip+0x74050002],eax        # 0x750ab5b8
 105b5b6:	(bad)  
 105b5b7:	add    BYTE PTR [rax-0x4],ah
 105b5ba:	add    al,BYTE PTR [rax]
 105b5bc:	mov    esp,?
 105b5be:	add    al,BYTE PTR [rax]
 105b5c0:	movabs al,ds:0x5000205210005b5
 105b5c9:	push   rsp
 105b5ca:	(bad)  
 105b5cb:	add    BYTE PTR [rsp+rdi*8-0x32efffe],cl
 105b5d2:	add    al,BYTE PTR [rax]
 105b5d4:	mov    al,0xb5
 105b5d6:	add    eax,0x2100
 105b5db:	add    BYTE PTR [rsp+rdi*8-0x32efffe],cl
 105b5e2:	add    al,BYTE PTR [rax]
 105b5e4:	mov    al,0xb5
 105b5e6:	add    eax,0x4002100
 105b5eb:	add    BYTE PTR [rax],al
 105b5ed:	je     0x105b5f6
 105b5ef:	add    BYTE PTR [rax],al
 105b5f1:	push   rsp
 105b5f2:	(bad)  
 105b5f3:	add    BYTE PTR [rax-0x4],ah
 105b5f6:	add    al,BYTE PTR [rax]
 105b5f8:	mov    esp,?
 105b5fa:	add    al,BYTE PTR [rax]
 105b5fc:	movabs al,ds:0x10000610010005b5
 105b605:	or     DWORD PTR fs:[rax],eax
 105b608:	adc    BYTE PTR [rax+rcx*1],dh
 105b60b:	add    BYTE PTR [rax],dl
 105b60d:	xor    cl,BYTE PTR [rax+riz*8]
 105b610:	and    DWORD PTR [rip+0x74050002],eax        # 0x750ab618
 105b616:	(bad)  
 105b617:	add    BYTE PTR [rax-0x3],al
 105b61a:	add    al,BYTE PTR [rax]
 105b61c:	ins    BYTE PTR es:[rdi],dx
 105b61d:	std    
 105b61e:	add    al,BYTE PTR [rax]
 105b620:	add    BYTE PTR [rsi+0x5210005],dh
 105b626:	add    al,BYTE PTR [rax]
 105b628:	add    eax,0x6c000654
 105b62d:	std    
 105b62e:	add    al,BYTE PTR [rax]
 105b630:	mov    cl,0xfd
 105b632:	add    al,BYTE PTR [rax]
 105b634:	adc    BYTE PTR [rsi+0x210005],dh
 105b63a:	add    BYTE PTR [rax],al
 105b63c:	ins    BYTE PTR es:[rdi],dx
 105b63d:	std    
 105b63e:	add    al,BYTE PTR [rax]
 105b640:	mov    cl,0xfd
 105b642:	add    al,BYTE PTR [rax]
 105b644:	adc    BYTE PTR [rsi+0x210005],dh
 105b64a:	add    al,0x0
 105b64c:	add    BYTE PTR [rdi+rax*1+0x0],dh
 105b650:	add    BYTE PTR [rsi+rax*1+0x0],dl
 105b654:	rex std 
 105b656:	add    al,BYTE PTR [rax]
 105b658:	ins    BYTE PTR es:[rdi],dx
 105b659:	std    
 105b65a:	add    al,BYTE PTR [rax]
 105b65c:	add    BYTE PTR [rsi+0x12110005],dh
 105b662:	add    DWORD PTR [rax],eax
 105b664:	or     DWORD PTR [rdx+0x0],esp
 105b667:	add    BYTE PTR [rsi+rdi*8+0x42200003],dl
 105b66e:	add    BYTE PTR [rax],al
 105b670:	(bad)  
 105b671:	(bad)  
 105b672:	(bad)  
 105b673:	push   QWORD PTR [rax]
 105b675:	ret    0x4
 105b678:	and    dh,bh
 105b67a:	add    al,BYTE PTR [rax]
 105b67c:	(bad)  
 105b67d:	(bad)  
 105b67e:	(bad)  
 105b67f:	inc    DWORD PTR [rcx]
 105b681:	add    al,0x1
 105b683:	add    BYTE PTR [rdx+rax*2],al
 105b686:	add    BYTE PTR [rax],al
 105b688:	sbb    DWORD PTR [rip+0xffffffff92060002],edx        # 0xffffffff930bb690
 105b68e:	add    dh,BYTE PTR [rax]
 105b690:	rex.W add al,BYTE PTR [rax+rax*1]
 105b694:	rex.W add BYTE PTR [rax],al
 105b697:	add    BYTE PTR [rcx],dl
 105b699:	sbb    eax,0x641d0006
 105b69e:	or     al,BYTE PTR [rax]
 105b6a0:	sbb    BYTE PTR [rcx+rcx*1],dh
 105b6a3:	add    BYTE PTR [rdx],cl
 105b6a5:	push   rdx
 105b6a6:	(bad)  
 105b6a7:	jo     0x105b63d
 105b6a9:	inc    BYTE PTR [rbx]
 105b6ab:	add    BYTE PTR [rax-0xffff97],dh
 105b6b1:	(bad)  
 105b6b2:	(bad)  
 105b6b3:	push   rax
 105b6b5:	test   BYTE PTR [rax+rax*1],0x0
 105b6b9:	add    BYTE PTR [rax],al
 105b6bb:	add    BYTE PTR [rax],dl
 105b6bd:	test   DWORD PTR [rax+rax*1],0x30000
 105b6c4:	(bad)  
 105b6c5:	(bad)  
 105b6c6:	(bad)  
 105b6c7:	push   QWORD PTR [rdx]
 105b6c9:	add    BYTE PTR [rbx],al
 105b6cb:	add    BYTE PTR [rax],al
 105b6cd:	add    BYTE PTR [rax],al
 105b6cf:	add    BYTE PTR [rip+0x1000300],bh        # 0x205b9d5
 105b6d5:	add    BYTE PTR [rax],al
 105b6d7:	add    BYTE PTR [rsi+0x0],cl
 105b6da:	add    eax,DWORD PTR [rax]
 105b6dc:	(bad)  
 105b6dd:	(bad)  
 105b6de:	(bad)  
 105b6df:	call   FWORD PTR [rcx]
 105b6e1:	adc    eax,DWORD PTR [rdx]
 105b6e3:	add    BYTE PTR [rdx],cl
 105b6e5:	push   rdx
 105b6e6:	(bad)  
 105b6e7:	xor    BYTE PTR [rsi+rdi*8+0x69d80003],dl
 105b6ee:	add    BYTE PTR [rax],al
 105b6f0:	(bad)  
 105b6f1:	(bad)  
 105b6f2:	(bad)  
 105b6f3:	push   QWORD PTR [rax-0xb]
 105b6f6:	add    al,0x0
 105b6f8:	add    BYTE PTR [rax],al
 105b6fa:	add    BYTE PTR [rax],al
 105b6fc:	nop
 105b6fd:	cmc    
 105b6fe:	add    al,0x0
 105b700:	add    DWORD PTR [rax],eax
 105b702:	add    BYTE PTR [rax],al
 105b704:	add    BYTE PTR [rax],al
 105b706:	add    BYTE PTR [rax],al
 105b708:	add    DWORD PTR [rax],eax
 105b70a:	add    BYTE PTR [rax],al
 105b70c:	add    BYTE PTR [rax],al
 105b70e:	add    BYTE PTR [rax],al
 105b710:	add    al,BYTE PTR [rax]
 105b712:	add    BYTE PTR [rax],al
 105b714:	add    al,BYTE PTR [rax]
 105b716:	add    BYTE PTR [rax],al
 105b718:	add    eax,DWORD PTR [rax]
 105b71a:	add    BYTE PTR [rax],al
 105b71c:	add    DWORD PTR [rax],eax
 105b71e:	add    BYTE PTR [rax],al
 105b720:	and    al,0xb7
 105b722:	add    eax,0x0
	...
 105b72f:	add    BYTE PTR [rax+0x380004f5],dh
 105b735:	add    BYTE PTR [rax],al
 105b737:	add    BYTE PTR [rax+0x0],dh
 105b73a:	add    eax,DWORD PTR [rax]
 105b73c:	(bad)  
 105b73d:	(bad)  
 105b73e:	(bad)  
 105b73f:	inc    DWORD PTR [rsi+0x2000300]
 105b745:	add    BYTE PTR [rax],al
 105b747:	add    BYTE PTR [rsi+0x1000300],dh
 105b74d:	add    BYTE PTR [rax],al
 105b74f:	add    BYTE PTR [rbp+0x300],bh
 105b755:	add    BYTE PTR [rax],al
 105b757:	add    al,cl
 105b759:	add    BYTE PTR [rbx],al
 105b75b:	add    bh,bh
 105b75d:	(bad)  
 105b75e:	(bad)  
 105b75f:	push   QWORD PTR [rax+0x4f5]
 105b765:	add    BYTE PTR [rax],al
 105b767:	add    BYTE PTR [rcx],bl
 105b769:	or     al,BYTE PTR [rdx]
 105b76b:	add    BYTE PTR [rdx],cl
 105b76d:	xor    al,BYTE PTR [rsi]
 105b76f:	push   rax
 105b770:	xchg   esp,eax
 105b771:	inc    BYTE PTR [rbx]
 105b773:	add    al,bl
 105b775:	imul   eax,DWORD PTR [rax],0xa221100
 105b77b:	add    BYTE PTR [rdx],ah
 105b77d:	fs or  eax,0xc541d00
 105b783:	add    BYTE PTR [rax],bl
 105b785:	xor    al,0xb
 105b787:	add    BYTE PTR [rdx],cl
 105b789:	push   rdx
 105b78a:	(bad)  
 105b78b:	lock add al,0xe0
 105b78e:	add    dh,BYTE PTR [rax-0x6c]
 105b791:	inc    BYTE PTR [rbx]
 105b793:	add    BYTE PTR [rax],al
 105b795:	push   0x0
 105b797:	add    bh,bh
 105b799:	(bad)  
 105b79a:	(bad)  
 105b79b:	inc    DWORD PTR [rax-0x1]
 105b79e:	add    al,0x0
 105b7a0:	add    BYTE PTR [rax],al
 105b7a2:	add    BYTE PTR [rax],al
 105b7a4:	push   rax
 105b7a5:	inc    DWORD PTR [rax+rax*1]
 105b7a8:	add    DWORD PTR [rax],eax
 105b7aa:	add    BYTE PTR [rax],al
 105b7ac:	jo     0x105b7ad
 105b7ae:	add    al,0x0
 105b7b0:	loopne 0x105b7b2
 105b7b2:	add    eax,DWORD PTR [rax]
 105b7b4:	(bad)  
 105b7b5:	(bad)  
 105b7b6:	(bad)  
 105b7b7:	jmp    QWORD PTR [rcx]
 105b7b9:	add    DWORD PTR [rbx],eax
 105b7bb:	add    BYTE PTR [rax],al
 105b7bd:	add    BYTE PTR [rax],al
 105b7bf:	add    BYTE PTR [rcx+rax*1],dh
 105b7c2:	add    eax,DWORD PTR [rax]
 105b7c4:	add    DWORD PTR [rax],eax
 105b7c6:	add    BYTE PTR [rax],al
 105b7c8:	(bad)  
 105b7c9:	add    DWORD PTR [rbx],eax
 105b7cb:	add    BYTE PTR [rdx],al
 105b7cd:	add    BYTE PTR [rax],al
 105b7cf:	add    BYTE PTR [rsi+0x1],dl
 105b7d2:	add    eax,DWORD PTR [rax]
 105b7d4:	add    BYTE PTR [rax],al
 105b7d6:	add    BYTE PTR [rax],al
 105b7d8:	pop    rdx
 105b7d9:	add    DWORD PTR [rbx],eax
 105b7db:	add    bh,bh
 105b7dd:	(bad)  
 105b7de:	(bad)  
 105b7df:	call   FWORD PTR [rcx]
 105b7e1:	(bad)  
 105b7e2:	or     DWORD PTR [rax],eax
 105b7e4:	es fs pop rbp
 105b7e7:	add    DWORD PTR [rdx],esp
 105b7e9:	xor    al,0x5c
 105b7eb:	add    DWORD PTR [rip+0x7015601],edx        # 0x8070df2
 105b7f1:	loopne 0x105b7f8
 105b7f3:	jo     0x105b7f9
 105b7f5:	push   rax
 105b7f6:	add    BYTE PTR [rax],al
 105b7f8:	movabs al,ds:0xa200006a280003fe
 105b801:	or     al,BYTE PTR [rax]
 105b803:	add    bh,bh
 105b805:	(bad)  
 105b806:	(bad)  
 105b807:	push   rax
 105b809:	std    
 105b80a:	add    al,0x0
 105b80c:	add    BYTE PTR [rax],al
 105b80e:	add    BYTE PTR [rax],al
 105b810:	add    dh,bh
 105b812:	add    al,0x0
 105b814:	add    DWORD PTR [rax],eax
 105b816:	add    BYTE PTR [rax],al
 105b818:	adc    dh,bh
 105b81a:	add    al,0x0
 105b81c:	add    DWORD PTR [rax],eax
 105b81e:	add    BYTE PTR [rax],al
 105b820:	and    dh,bh
 105b822:	add    al,0x0
 105b824:	add    DWORD PTR [rax],eax
 105b826:	add    BYTE PTR [rax],al
 105b828:	xor    dh,bh
 105b82a:	add    al,0x0
 105b82c:	mov    al,0x1
 105b82e:	add    eax,DWORD PTR [rax]
 105b830:	(bad)  
 105b831:	(bad)  
 105b832:	(bad)  
 105b833:	call   QWORD PTR [rsi]
 105b835:	add    al,BYTE PTR [rbx]
 105b837:	add    BYTE PTR [rax],al
 105b839:	add    BYTE PTR [rax],al
 105b83b:	add    BYTE PTR [rdx+rax*1+0x3],ah
 105b83f:	add    BYTE PTR [rcx],al
 105b841:	add    BYTE PTR [rax],al
 105b843:	add    BYTE PTR [rdx+rax*1+0x3],dh
 105b847:	add    BYTE PTR [rdx],al
 105b849:	add    BYTE PTR [rax],al
 105b84b:	add    BYTE PTR [rbx+0x1000302],dl
 105b851:	add    BYTE PTR [rax],al
 105b853:	add    ah,ch
 105b855:	add    al,BYTE PTR [rbx]
 105b857:	add    BYTE PTR [rbx],al
 105b859:	add    BYTE PTR [rax],al
 105b85b:	add    BYTE PTR [rsi],dl
 105b85d:	add    eax,DWORD PTR [rbx]
 105b85f:	add    BYTE PTR [rcx],al
 105b861:	add    BYTE PTR [rax],al
 105b863:	add    BYTE PTR [rdi+0x3],ah
 105b866:	add    eax,DWORD PTR [rax]
 105b868:	add    al,0x0
 105b86a:	add    BYTE PTR [rax],al
 105b86c:	xchg   esi,eax
 105b86d:	add    eax,DWORD PTR [rbx]
 105b86f:	add    BYTE PTR [rcx],al
 105b871:	add    BYTE PTR [rax],al
 105b873:	add    BYTE PTR [rax+0x303],bh
 105b879:	add    BYTE PTR [rax],al
 105b87b:	add    ah,al
 105b87d:	add    eax,DWORD PTR [rbx]
 105b87f:	add    bh,bh
 105b881:	(bad)  
 105b882:	(bad)  
 105b883:	call   FWORD PTR [rcx]
 105b885:	sbb    al,0x4
 105b887:	add    BYTE PTR [rip+0xd001434],cl        # 0xe05ccc1
 105b88d:	repnz (bad) 
 105b88f:	jo     0x105b8d9
 105b891:	add    al,BYTE PTR [rax+rax*1]
 105b894:	jo     0x105b896
 105b896:	add    BYTE PTR [rax],al
 105b898:	add    DWORD PTR [rsi],eax
 105b89a:	add    al,BYTE PTR [rax]
 105b89c:	(bad)  
 105b89d:	jb     0x105b8a1
 105b89f:	xor    BYTE PTR [rcx],bl
 105b8a1:	sbb    al,0x4
 105b8a3:	add    BYTE PTR [rip+0xd001434],cl        # 0xe05ccdd
 105b8a9:	repnz (bad) 
 105b8ab:	jo     0x105b8f5
 105b8ad:	add    al,BYTE PTR [rax+rax*1]
 105b8b0:	jo     0x105b8b2
 105b8b2:	add    BYTE PTR [rax],al
 105b8b4:	sbb    DWORD PTR [rcx],esp
 105b8b6:	(bad)  
 105b8b7:	add    BYTE PTR [rdx],dl
 105b8b9:	fs adc al,0x0
 105b8bc:	adc    dh,BYTE PTR [rbx+rdx*1]
 105b8bf:	add    BYTE PTR [rdx],dl
 105b8c1:	repnz or esi,DWORD PTR [rax+0x48]
 105b8c5:	add    al,BYTE PTR [rax+rax*1]
 105b8c8:	js     0x105b8ca
 105b8ca:	add    BYTE PTR [rax],al
 105b8cc:	adc    DWORD PTR [rsi+rax*1],edx
 105b8cf:	add    BYTE PTR [rsp+riz*2],dl
 105b8d2:	or     BYTE PTR [rax],al
 105b8d4:	adc    al,0x34
 105b8d6:	(bad)  
 105b8d7:	add    BYTE PTR [rdx+rsi*1],dl
 105b8da:	adc    BYTE PTR [rax-0x6a],dh
 105b8dd:	add    eax,DWORD PTR [rax+rax*1]
 105b8e0:	add    DWORD PTR [rax],eax
 105b8e2:	add    BYTE PTR [rax],al
 105b8e4:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 105b8e5:	(bad)  
 105b8e6:	add    eax,DWORD PTR [rax]
 105b8e8:	rol    DWORD PTR [rdi],1
 105b8ea:	add    eax,DWORD PTR [rax]
 105b8ec:	movabs al,ds:0x100000000000504
 105b8f5:	(bad)  
 105b8f6:	add    al,BYTE PTR [rax]
 105b8f8:	(bad)  
 105b8f9:	xor    al,BYTE PTR [rdx]
 105b8fb:	push   rax
 105b8fc:	adc    DWORD PTR [rax],ebx
 105b8fe:	add    al,0x0
 105b900:	sbb    BYTE PTR [rcx*1+0x6920a00],dh
 105b907:	jo     0x105b89d
 105b909:	inc    BYTE PTR [rbx]
 105b90b:	add    BYTE PTR [rax+0x6a],dl
 105b90e:	add    BYTE PTR [rax],al
 105b910:	(bad)  
 105b911:	(bad)  
 105b912:	(bad)  
 105b913:	inc    DWORD PTR [rax+0x503]
 105b919:	add    BYTE PTR [rax],al
 105b91b:	add    BYTE PTR [rax+0x1000503],dh
 105b921:	add    BYTE PTR [rax],al
 105b923:	add    al,al
 105b925:	add    eax,DWORD PTR [rip+0x200]        # 0x105bb2b
 105b92b:	add    al,dl
 105b92d:	add    eax,DWORD PTR [rip+0x300]        # 0x105bc33
 105b933:	add    al,ah
 105b935:	add    eax,DWORD PTR [rip+0x3080000]        # 0x40db93b
 105b93b:	add    bh,bh
 105b93d:	(bad)  
 105b93e:	(bad)  
 105b93f:	call   FWORD PTR [rsi]
 105b941:	or     BYTE PTR [rbx],al
 105b943:	add    BYTE PTR [rax],al
 105b945:	add    BYTE PTR [rax],al
 105b947:	add    BYTE PTR [rsi+0x8],al
 105b94a:	add    eax,DWORD PTR [rax]
 105b94c:	add    DWORD PTR [rax],eax
 105b94e:	add    BYTE PTR [rax],al
 105b950:	nop
 105b951:	or     BYTE PTR [rbx],al
 105b953:	add    BYTE PTR [rdx],al
 105b955:	add    BYTE PTR [rax],al
 105b957:	add    BYTE PTR [rbp+0x3000308],ah
 105b95d:	add    BYTE PTR [rax],al
 105b95f:	add    BYTE PTR [rsi+0x4000308],dh
 105b965:	add    BYTE PTR [rax],al
 105b967:	add    bl,al
 105b969:	or     BYTE PTR [rbx],al
 105b96b:	add    BYTE PTR [rbx],al
 105b96d:	add    BYTE PTR [rax],al
 105b96f:	add    bh,cl
 105b971:	or     BYTE PTR [rbx],al
 105b973:	add    BYTE PTR [rdx],al
 105b975:	add    BYTE PTR [rax],al
 105b977:	add    bl,bl
 105b979:	or     BYTE PTR [rbx],al
 105b97b:	add    BYTE PTR [rcx],al
 105b97d:	add    BYTE PTR [rax],al
 105b97f:	add    bh,ah
 105b981:	or     BYTE PTR [rbx],al
 105b983:	add    BYTE PTR [rax],al
 105b985:	add    BYTE PTR [rax],al
 105b987:	add    BYTE PTR [rcx],al
 105b989:	(bad)  
 105b98a:	add    al,BYTE PTR [rax]
 105b98c:	(bad)  
 105b98d:	xor    al,BYTE PTR [rdx]
 105b98f:	push   rax
 105b990:	adc    DWORD PTR [rsp+rax*1],edx
 105b993:	add    BYTE PTR [rsp+rsi*1],dl
 105b996:	adc    BYTE PTR [rax],al
 105b998:	or     dl,dl
 105b99a:	add    al,0x70
 105b99c:	xchg   esp,eax
 105b99d:	inc    BYTE PTR [rbx]
 105b99f:	add    BYTE PTR [rax+0x6a],bh
 105b9a2:	add    BYTE PTR [rax],al
 105b9a4:	(bad)  
 105b9a5:	(bad)  
 105b9a6:	(bad)  
 105b9a7:	call   rax
 105b9a9:	test   DWORD PTR [rax+rax*1],0x30910
 105b9b0:	(bad)  
 105b9b1:	(bad)  
 105b9b2:	(bad)  
 105b9b3:	push   QWORD PTR [rip+0x309]        # 0x105bcc2
 105b9b9:	add    BYTE PTR [rax],al
 105b9bb:	add    BYTE PTR [rcx-0xfffcf7],bl
 105b9c1:	(bad)  
 105b9c2:	(bad)  
 105b9c3:	call   QWORD PTR [rcx]
 105b9c5:	sbb    BYTE PTR [rax+rax*1],al
 105b9c8:	sbb    BYTE PTR [rcx+rcx*1],dh
 105b9cb:	add    BYTE PTR [rdx],cl
 105b9cd:	push   rdx
 105b9ce:	(bad)  
 105b9cf:	jo     0x105b965
 105b9d1:	inc    BYTE PTR [rbx]
 105b9d3:	add    BYTE PTR [rax-0xffff96],ah
 105b9d9:	(bad)  
 105b9da:	(bad)  
 105b9db:	push   QWORD PTR [rax]
 105b9dd:	test   DWORD PTR [rax+rax*1],0x0
 105b9e4:	(bad)  
 105b9e5:	test   DWORD PTR [rax+rax*1],0x309c0
 105b9ec:	(bad)  
 105b9ed:	(bad)  
 105b9ee:	(bad)  
 105b9ef:	(bad)  
 105b9f0:	fisttp DWORD PTR [rcx]
 105b9f2:	add    eax,DWORD PTR [rax]
 105b9f4:	add    BYTE PTR [rax],al
 105b9f6:	add    BYTE PTR [rax],al
 105b9f8:	or     BYTE PTR [rdx],cl
 105b9fa:	add    eax,DWORD PTR [rax]
 105b9fc:	add    DWORD PTR [rax],eax
 105b9fe:	add    BYTE PTR [rax],al
 105ba00:	(bad)  
 105ba01:	or     al,BYTE PTR [rbx]
 105ba03:	add    BYTE PTR [rax],al
 105ba05:	add    BYTE PTR [rax],al
 105ba07:	add    BYTE PTR [rcx],al
 105ba09:	(bad)  
 105ba0a:	add    al,BYTE PTR [rax]
 105ba0c:	(bad)  
 105ba0d:	xor    al,BYTE PTR [rdx]
 105ba0f:	push   rax
 105ba10:	add    DWORD PTR [rcx+rax*1],eax
 105ba13:	add    BYTE PTR [rdx+rax*2],al
 105ba16:	add    BYTE PTR [rax],al
 105ba18:	adc    DWORD PTR [rdi],ecx
 105ba1a:	add    al,BYTE PTR [rax]
 105ba1c:	(bad)  
 105ba1d:	xchg   edx,eax
 105ba1e:	add    dh,BYTE PTR [rax]
 105ba20:	xchg   esp,eax
 105ba21:	inc    BYTE PTR [rbx]
 105ba23:	add    al,cl
 105ba25:	push   0x0
 105ba27:	add    bh,bh
 105ba29:	(bad)  
 105ba2a:	(bad)  
 105ba2b:	call   QWORD PTR [rax]
 105ba2d:	sti    
 105ba2e:	add    al,0x0
 105ba30:	movabs al,ds:0xdfffffffff00030a
 105ba39:	or     al,BYTE PTR [rbx]
 105ba3b:	add    BYTE PTR [rax],al
 105ba3d:	add    BYTE PTR [rax],al
 105ba3f:	add    dh,ah
 105ba41:	or     al,BYTE PTR [rbx]
 105ba43:	add    bh,bh
 105ba45:	(bad)  
 105ba46:	(bad)  
 105ba47:	call   FWORD PTR [rcx]
 105ba49:	or     DWORD PTR ss:[rax],eax
 105ba4c:	and    al,0x34
 105ba4e:	sbb    eax,0x16011001
 105ba53:	add    DWORD PTR [rcx],ecx
 105ba55:	lock (bad) 
 105ba57:	loopne 0x105ba5e
 105ba59:	rol    BYTE PTR [rbx],0x70
 105ba5c:	add    ah,BYTE PTR [rax+0x0]
 105ba5f:	add    BYTE PTR [rax-0xffffc02],ah
 105ba65:	push   0x0
 105ba67:	add    BYTE PTR [rbx-0xfffff8],ah
 105ba6d:	(bad)  
 105ba6e:	(bad)  
 105ba6f:	jmp    rax
 105ba71:	cmc    
 105ba72:	add    al,0x0
	...
 105ba7c:	add    DWORD PTR [rax],eax
 105ba7e:	add    BYTE PTR [rax],al
 105ba80:	lock cmc 
 105ba82:	add    al,0x0
 105ba84:	add    DWORD PTR [rax],eax
 105ba86:	add    BYTE PTR [rax],al
 105ba88:	add    dh,dh
 105ba8a:	add    al,0x0
	...
 105ba94:	add    DWORD PTR [rax],eax
 105ba96:	add    BYTE PTR [rax],al
 105ba98:	add    eax,DWORD PTR [rax]
 105ba9a:	add    BYTE PTR [rax],al
 105ba9c:	add    al,0x0
 105ba9e:	add    BYTE PTR [rax],al
 105baa0:	add    al,BYTE PTR [rax]
 105baa2:	add    BYTE PTR [rax],al
 105baa4:	test   al,0xba
 105baa6:	add    eax,0x0
 105baab:	add    BYTE PTR [rax+0x35],dl
 105baae:	(bad)  
 105baaf:	add    BYTE PTR [rax+0x10000000],dl
 105bab5:	test   BYTE PTR [rax+rax*1],0x68
	...
 105bac5:	add    BYTE PTR [rax],al
 105bac7:	add    BYTE PTR [rax+0x580004f6],dl
 105bacd:	add    BYTE PTR [rax],al
 105bacf:	add    BYTE PTR [rax],dl
 105bad1:	or     eax,DWORD PTR [rbx]
 105bad3:	add    bh,bh
 105bad5:	(bad)  
 105bad6:	(bad)  
 105bad7:	push   QWORD PTR [rsi+0xb]
 105bada:	add    eax,DWORD PTR [rax]
 105badc:	add    BYTE PTR [rax],al
 105bade:	add    BYTE PTR [rax],al
 105bae0:	movabs eax,ds:0xb20000000100030b
 105bae9:	or     eax,DWORD PTR [rbx]
 105baeb:	add    BYTE PTR [rdx],al
 105baed:	add    BYTE PTR [rax],al
 105baef:	add    dl,dl
 105baf1:	or     eax,DWORD PTR [rbx]
 105baf3:	add    BYTE PTR [rcx],al
 105baf5:	add    BYTE PTR [rax],al
 105baf7:	add    BYTE PTR [rip+0x300030c],ah        # 0x405be09
 105bafd:	add    BYTE PTR [rax],al
 105baff:	add    dh,bl
 105bb01:	or     al,0x3
 105bb03:	add    BYTE PTR [rcx],al
 105bb05:	add    BYTE PTR [rax],al
 105bb07:	add    BYTE PTR [rip+0x30d],ah        # 0x105be1a
 105bb0d:	add    BYTE PTR [rax],al
 105bb0f:	add    BYTE PTR [rdi],ch
 105bb11:	or     eax,0xffff0003
 105bb16:	(bad)  
 105bb17:	call   QWORD PTR [rax]
 105bb19:	test   BYTE PTR [rax+rax*1],0x0
 105bb1d:	add    BYTE PTR [rax],al
 105bb1f:	add    BYTE PTR [rsi],bl
 105bb21:	test   BYTE PTR [rax+rax*1],0x4
 105bb25:	add    BYTE PTR [rax],al
 105bb27:	add    BYTE PTR [rdx-0xa],dh
 105bb2a:	add    al,0x0
 105bb2c:	add    BYTE PTR [rax],al
 105bb2e:	add    BYTE PTR [rax],al
 105bb30:	sbb    DWORD PTR [rbx],ecx
 105bb32:	add    eax,DWORD PTR [rax]
 105bb34:	or     eax,DWORD PTR [rdx+0x30065007]
 105bb3a:	add    BYTE PTR [rax],al
 105bb3c:	xchg   esp,eax
 105bb3d:	inc    BYTE PTR [rbx]
 105bb3f:	add    al,dh
 105bb41:	push   0x0
 105bb43:	add    BYTE PTR [rcx],bl
 105bb45:	or     al,BYTE PTR [rdx]
 105bb47:	add    BYTE PTR [rdx],cl
 105bb49:	jb     0x105bb51
 105bb4b:	push   rax
 105bb4c:	xchg   esp,eax
 105bb4d:	inc    BYTE PTR [rbx]
 105bb4f:	add    al,dh
 105bb51:	push   0x0
 105bb53:	add    BYTE PTR [rcx],dl
 105bb55:	sbb    al,0x8
 105bb57:	add    BYTE PTR [rsp+rdx*2],bl
 105bb5a:	lldt   WORD PTR [rdi]
 105bb5d:	xor    al,0xe
 105bb5f:	add    BYTE PTR [rcx],cl
 105bb61:	xchg   edx,eax
 105bb62:	add    eax,0x27003e0
 105bb67:	(bad)  
 105bb68:	xchg   esp,eax
 105bb69:	inc    BYTE PTR [rbx]
 105bb6b:	add    BYTE PTR [rax],bl
 105bb6d:	imul   eax,DWORD PTR [rax],0x0
 105bb70:	(bad)  
 105bb71:	(bad)  
 105bb72:	(bad)  
 105bb73:	call   QWORD PTR [rax+0x2]
 105bb76:	add    eax,0x30d7000
 105bb7b:	add    bh,bh
 105bb7d:	(bad)  
 105bb7e:	(bad)  
 105bb7f:	dec    eax
 105bb81:	or     eax,0x3
 105bb86:	add    BYTE PTR [rax],al
 105bb88:	mov    ecx,DWORD PTR [rsi]
 105bb8a:	add    eax,DWORD PTR [rax]
 105bb8c:	(bad)  
 105bb8d:	(bad)  
 105bb8e:	(bad)  
 105bb8f:	call   QWORD PTR [rcx]
 105bb91:	sbb    DWORD PTR [rsi],eax
 105bb93:	add    BYTE PTR [rcx],bl
 105bb95:	fs or  eax,0xc341400
 105bb9b:	add    BYTE PTR [rsi],al
 105bb9d:	xchg   edx,eax
 105bb9e:	add    dh,BYTE PTR [rax-0x6c]
 105bba1:	inc    BYTE PTR [rbx]
 105bba3:	add    BYTE PTR [rax+0x6b],al
 105bba6:	add    BYTE PTR [rax],al
 105bba8:	(bad)  
 105bba9:	(bad)  
 105bbaa:	(bad)  
 105bbab:	inc    DWORD PTR [rax-0x3ffffafc]
 105bbb1:	(bad)  
 105bbb2:	add    eax,DWORD PTR [rax]
 105bbb4:	(bad)  
 105bbb5:	(bad)  
 105bbb6:	(bad)  
 105bbb7:	(bad)  
 105bbb8:	out    dx,al
 105bbb9:	(bad)  
 105bbba:	add    eax,DWORD PTR [rax]
 105bbbc:	add    BYTE PTR [rax],al
 105bbbe:	add    BYTE PTR [rax],al
 105bbc0:	rex lsl eax,WORD PTR [rax]
 105bbc4:	(bad)  
 105bbc5:	(bad)  
 105bbc6:	(bad)  
 105bbc7:	dec    DWORD PTR [rdi+0xf]
 105bbca:	add    eax,DWORD PTR [rax]
 105bbcc:	add    BYTE PTR [rax],al
 105bbce:	add    BYTE PTR [rax],al
 105bbd0:	pop    rbx
 105bbd1:	lsl    eax,WORD PTR [rax]
 105bbd4:	(bad)  
 105bbd5:	(bad)  
 105bbd6:	(bad)  
 105bbd7:	call   QWORD PTR [rcx]
 105bbd9:	adc    eax,DWORD PTR [rdx]
 105bbdb:	add    BYTE PTR [rdx],cl
 105bbdd:	push   rdx
 105bbde:	(bad)  
 105bbdf:	xor    BYTE PTR [rsi+rdi*8+0x6b680003],dl
 105bbe6:	add    BYTE PTR [rax],al
 105bbe8:	(bad)  
 105bbe9:	(bad)  
 105bbea:	(bad)  
 105bbeb:	jmp    rax
 105bbed:	cli    
 105bbee:	add    al,0x0
 105bbf0:	add    BYTE PTR [rax],al
 105bbf2:	add    BYTE PTR [rax],al
 105bbf4:	sar    dl,1
 105bbf6:	add    al,0x0
 105bbf8:	or     BYTE PTR [rdi],0x3
 105bbfb:	add    bh,bh
 105bbfd:	(bad)  
 105bbfe:	(bad)  
 105bbff:	jmp    FWORD PTR [rdx+0x100030f]
 105bc05:	add    BYTE PTR [rax],al
 105bc07:	add    cl,bl
 105bc09:	lsl    eax,WORD PTR [rax]
 105bc0c:	add    BYTE PTR [rax],al
 105bc0e:	add    BYTE PTR [rax],al
 105bc10:	fisttp DWORD PTR [rdi]
 105bc12:	add    eax,DWORD PTR [rax]
 105bc14:	add    DWORD PTR [rax],eax
 105bc16:	add    BYTE PTR [rax],al
 105bc18:	repz lsl eax,WORD PTR [rax]
 105bc1c:	add    BYTE PTR [rax],al
 105bc1e:	add    BYTE PTR [rax],al
 105bc20:	add    DWORD PTR [rsi],eax
 105bc22:	add    al,BYTE PTR [rax]
 105bc24:	(bad)  
 105bc25:	xor    al,BYTE PTR [rdx]
 105bc27:	push   rax
 105bc28:	adc    DWORD PTR [rax],ebx
 105bc2a:	add    al,0x0
 105bc2c:	sbb    BYTE PTR [rbx+rcx*1],dh
 105bc2f:	add    BYTE PTR [rdx],cl
 105bc31:	jb     0x105bc39
 105bc33:	jo     0x105bbc9
 105bc35:	inc    BYTE PTR [rbx]
 105bc37:	add    BYTE PTR [rax-0xffff95],dl
 105bc3d:	(bad)  
 105bc3e:	(bad)  
 105bc3f:	jmp    QWORD PTR [rax+0x4fa]
 105bc45:	add    BYTE PTR [rax],al
 105bc47:	add    BYTE PTR [rax+0x10004fa],al
 105bc4d:	add    BYTE PTR [rax],al
 105bc4f:	add    BYTE PTR [rax+0x100004fa],dl
 105bc55:	adc    BYTE PTR [rbx],al
 105bc57:	add    bh,bh
 105bc59:	(bad)  
 105bc5a:	(bad)  
 105bc5b:	inc    DWORD PTR [rbx+0x10]
 105bc5e:	add    eax,DWORD PTR [rax]
 105bc60:	add    DWORD PTR [rax],eax
 105bc62:	add    BYTE PTR [rax],al
 105bc64:	jno    0x105bc76
 105bc66:	add    eax,DWORD PTR [rax]
 105bc68:	add    al,BYTE PTR [rax]
 105bc6a:	add    BYTE PTR [rax],al
 105bc6c:	adc    BYTE PTR [rax],0x3
 105bc6f:	add    BYTE PTR [rcx],al
 105bc71:	add    BYTE PTR [rax],al
 105bc73:	add    BYTE PTR [rcx+0x310],bh
 105bc79:	add    BYTE PTR [rax],al
 105bc7b:	add    BYTE PTR [rbx+0x1000310],bh
 105bc81:	add    BYTE PTR [rax],al
 105bc83:	add    cl,dl
 105bc85:	adc    BYTE PTR [rbx],al
 105bc87:	add    BYTE PTR [rax],al
 105bc89:	add    BYTE PTR [rax],al
 105bc8b:	add    BYTE PTR [rcx],al
 105bc8d:	(bad)  
 105bc8e:	add    al,BYTE PTR [rax]
 105bc90:	(bad)  
 105bc91:	xor    al,BYTE PTR [rdx]
 105bc93:	push   rax
 105bc94:	sbb    DWORD PTR [rip+0x11c000a],esi        # 0x221bca4
 105bc9a:	add    BYTE PTR [eip+0x9e00bf0],cl        # 0xae5c891
 105bca1:	rol    BYTE PTR [rdi],1
 105bca3:	rol    BYTE PTR [rip+0x3600470],0x30        # 0x465c11a
 105bcaa:	add    dl,BYTE PTR [rax-0x60]
 105bcad:	inc    BYTE PTR [rbx]
 105bcaf:	add    BYTE PTR [rax+0x2200006b],bh
 105bcb5:	add    eax,DWORD PTR [rax]
 105bcb7:	add    bh,bh
 105bcb9:	(bad)  
 105bcba:	(bad)  
 105bcbb:	push   QWORD PTR [rax+0x4fe]
 105bcc1:	add    BYTE PTR [rax],al
 105bcc3:	add    al,al
 105bcc5:	inc    BYTE PTR [rax+rax*1]
 105bcc8:	add    BYTE PTR [rcx],dl
 105bcca:	add    eax,DWORD PTR [rax]
 105bccc:	(bad)  
 105bccd:	(bad)  
 105bcce:	(bad)  
 105bccf:	inc    DWORD PTR [rcx+0x311]
 105bcd5:	add    BYTE PTR [rax],al
 105bcd7:	add    BYTE PTR [rsi+0x1000311],ah
 105bcdd:	add    BYTE PTR [rax],al
 105bcdf:	add    BYTE PTR [rdx+0x314],bl
 105bce5:	add    BYTE PTR [rax],al
 105bce7:	add    cl,bl
 105bce9:	adc    al,0x3
 105bceb:	add    bh,bh
 105bced:	(bad)  
 105bcee:	(bad)  
 105bcef:	call   FWORD PTR [rcx]
 105bcf1:	cmp    al,0xb
 105bcf3:	add    BYTE PTR [rbx],ch
 105bcf5:	xor    al,0xb3
 105bcf7:	add    BYTE PTR [rbx],bl
 105bcf9:	add    DWORD PTR [rax+0xaf00c00],ebp
 105bcff:	loopne 0x105bd09
 105bd01:	rol    BYTE PTR [rsi],1
 105bd03:	rol    BYTE PTR [rax+rsi*2],0x3
 105bd07:	(bad)  
 105bd08:	add    dl,BYTE PTR [rax+0x0]
 105bd0b:	add    BYTE PTR [rax-0x1ffffc02],ah
 105bd11:	imul   eax,DWORD PTR [rax],0x0
 105bd14:	xor    al,BYTE PTR [rip+0xffffffffffff0000]        # 0x104bd1a
 105bd1a:	(bad)  
 105bd1b:	jmp    rax
 105bd1d:	inc    BYTE PTR [rax+rax*1]
 105bd20:	add    BYTE PTR [rax],al
 105bd22:	add    BYTE PTR [rax],al
 105bd24:	lock inc BYTE PTR [rax+rax*1]
 105bd28:	add    DWORD PTR [rax],eax
 105bd2a:	add    BYTE PTR [rax],al
 105bd2c:	add    bh,bh
 105bd2e:	add    al,0x0
 105bd30:	add    al,BYTE PTR [rax]
 105bd32:	add    BYTE PTR [rax],al
 105bd34:	adc    bh,bh
 105bd36:	add    al,0x0
 105bd38:	add    eax,DWORD PTR [rax]
 105bd3a:	add    BYTE PTR [rax],al
 105bd3c:	and    bh,bh
 105bd3e:	add    al,0x0
 105bd40:	rex adc eax,0xffff0003
 105bd46:	(bad)  
 105bd47:	jmp    FWORD PTR [rdx+0x315]
 105bd4d:	add    BYTE PTR [rax],al
 105bd4f:	add    BYTE PTR [rsi+0x1000315],dh
 105bd55:	add    BYTE PTR [rax],al
 105bd57:	add    ch,al
 105bd59:	adc    eax,0x20003
 105bd5e:	add    BYTE PTR [rax],al
 105bd60:	(bad)  
 105bd61:	adc    eax,0x30003
 105bd66:	add    BYTE PTR [rax],al
 105bd68:	call   0x505c082
 105bd6d:	add    BYTE PTR [rax],al
 105bd6f:	add    ch,bh
 105bd71:	adc    eax,0x30003
 105bd76:	add    BYTE PTR [rax],al
 105bd78:	rcl    DWORD PTR [rdi],1
 105bd7a:	add    eax,DWORD PTR [rax]
 105bd7c:	add    al,BYTE PTR [rax]
 105bd7e:	add    BYTE PTR [rax],al
 105bd80:	fst    QWORD PTR [rdi]
 105bd82:	add    eax,DWORD PTR [rax]
 105bd84:	add    DWORD PTR [rax],eax
 105bd86:	add    BYTE PTR [rax],al
 105bd88:	jmp    0x105c0a4
 105bd8d:	add    BYTE PTR [rax],al
 105bd8f:	add    ch,dh
 105bd91:	(bad)  
 105bd92:	add    eax,DWORD PTR [rax]
 105bd94:	(bad)  
 105bd95:	(bad)  
 105bd96:	(bad)  
 105bd97:	(bad)  
 105bd98:	cli    
 105bd99:	(bad)  
 105bd9a:	add    eax,DWORD PTR [rax]
 105bd9c:	add    eax,DWORD PTR [rax]
 105bd9e:	add    BYTE PTR [rax],al
 105bda0:	stc    
 105bda1:	sbb    BYTE PTR [rbx],al
 105bda3:	add    BYTE PTR [rdx],al
 105bda5:	add    BYTE PTR [rax],al
 105bda7:	add    BYTE PTR [rip+0x1000319],al        # 0x205c0c6
 105bdad:	add    BYTE PTR [rax],al
 105bdaf:	add    BYTE PTR [rcx],dl
 105bdb1:	sbb    DWORD PTR [rbx],eax
 105bdb3:	add    BYTE PTR [rax],al
 105bdb5:	add    BYTE PTR [rax],al
 105bdb7:	add    BYTE PTR [rip+0xffffffffff000319],bl        # 0x5c0d6
 105bdbd:	(bad)  
 105bdbe:	(bad)  
 105bdbf:	call   FWORD PTR [rcx]
 105bdc1:	sbb    eax,DWORD PTR [rbx]
 105bdc3:	add    BYTE PTR [rcx],cl
 105bdc5:	add    DWORD PTR [rax+0x0],ecx
 105bdc8:	add    dh,BYTE PTR [rax]
 105bdca:	add    BYTE PTR [rax],al
 105bdcc:	rex.W add al,BYTE PTR [rax+rax*1]
 105bdd0:	xor    BYTE PTR [rdx],al
 105bdd2:	add    BYTE PTR [rax],al
 105bdd4:	sbb    DWORD PTR [rip+0x34240007],esi        # 0x3529bde1
 105bdda:	xchg   esp,eax
 105bddb:	add    BYTE PTR [rbx],dl
 105bddd:	add    DWORD PTR [rsi+0x3700400],ecx
 105bde3:	(bad)  
 105bde4:	add    dl,BYTE PTR [rax+0x0]
 105bde7:	add    BYTE PTR [rax+0x80003fe],ah
 105bded:	ins    BYTE PTR es:[rdi],dx
 105bdee:	add    BYTE PTR [rax],al
 105bdf0:	(bad)  
 105bdf1:	add    al,0x0
 105bdf3:	add    bh,bh
 105bdf5:	(bad)  
 105bdf6:	(bad)  
 105bdf7:	push   QWORD PTR [rax]
 105bdf9:	sti    
 105bdfa:	add    al,0x0
 105bdfc:	add    BYTE PTR [rax],al
 105bdfe:	add    BYTE PTR [rax],al
 105be00:	rex sti 
 105be02:	add    al,0x0
 105be04:	add    BYTE PTR [rax],al
 105be06:	add    BYTE PTR [rax],al
 105be08:	push   rax
 105be09:	sti    
 105be0a:	add    al,0x0
 105be0c:	rcr    BYTE PTR [rcx],1
 105be0e:	add    eax,DWORD PTR [rax]
 105be10:	(bad)  
 105be11:	(bad)  
 105be12:	(bad)  
 105be13:	jmp    FWORD PTR [rip+0x31a]        # 0x105c133
 105be19:	add    BYTE PTR [rax],al
 105be1b:	add    BYTE PTR [rsi+0x1a],al
 105be1e:	add    eax,DWORD PTR [rax]
 105be20:	add    DWORD PTR [rax],eax
 105be22:	add    BYTE PTR [rax],al
 105be24:	push   rbp
 105be25:	sbb    al,BYTE PTR [rbx]
 105be27:	add    BYTE PTR [rax],al
 105be29:	add    BYTE PTR [rax],al
 105be2b:	add    BYTE PTR [rbx-0xfffce6],bh
 105be31:	(bad)  
 105be32:	(bad)  
 105be33:	dec    ebp
 105be35:	sbb    al,BYTE PTR [rbx]
 105be37:	add    BYTE PTR [rax],al
 105be39:	add    BYTE PTR [rax],al
 105be3b:	add    BYTE PTR [rsi],al
 105be3d:	sbb    eax,DWORD PTR [rbx]
 105be3f:	add    BYTE PTR [rdx],al
 105be41:	add    BYTE PTR [rax],al
 105be43:	add    BYTE PTR [rip+0x31b],dl        # 0x105c164
 105be49:	add    BYTE PTR [rax],al
 105be4b:	add    BYTE PTR [rsi+0x1b],ah
 105be4e:	add    eax,DWORD PTR [rax]
 105be50:	(bad)  
 105be51:	(bad)  
 105be52:	(bad)  
 105be53:	push   QWORD PTR [rbp+0x1b]
 105be56:	add    eax,DWORD PTR [rax]
 105be58:	add    BYTE PTR [rax],al
 105be5a:	add    BYTE PTR [rax],al
 105be5c:	ret    0x31b
 105be5f:	add    bh,bh
 105be61:	(bad)  
 105be62:	(bad)  
 105be63:	call   FWORD PTR [rcx]
 105be65:	cs (bad) 
 105be67:	add    BYTE PTR [rsp+rsi*1],bl
 105be6a:	push   rsp
 105be6b:	add    BYTE PTR [rbx],cl
 105be6d:	add    DWORD PTR [rsi+0x0],ecx
 105be70:	add    al,0x70
 105be72:	add    esp,DWORD PTR [rax+0x2]
 105be75:	push   rax
 105be76:	add    BYTE PTR [rax],al
 105be78:	movabs al,ds:0x6200006c300003fe
 105be81:	add    al,BYTE PTR [rax]
 105be83:	add    bh,bh
 105be85:	(bad)  
 105be86:	(bad)  
 105be87:	inc    DWORD PTR [rax]
 105be89:	std    
 105be8a:	add    al,0x0
 105be8c:	adc    BYTE PTR [rbx+rax*1],bl
 105be8f:	add    bh,bh
 105be91:	(bad)  
 105be92:	(bad)  
 105be93:	inc    DWORD PTR [rsp+rbx*1+0x3]
 105be97:	add    BYTE PTR [rax],al
 105be99:	add    BYTE PTR [rax],al
 105be9b:	add    BYTE PTR [rcx],al
 105be9d:	(bad)  
 105be9e:	add    al,BYTE PTR [rax]
 105bea0:	(bad)  
 105bea1:	xor    al,BYTE PTR [rdx]
 105bea3:	push   rax
 105bea4:	sbb    DWORD PTR [rdi],esp
 105bea6:	(bad)  
 105bea7:	add    BYTE PTR [rax],bl
 105bea9:	adc    DWORD PTR fs:[rax],eax
 105beac:	adc    al,0x34
 105beae:	adc    BYTE PTR [rax],al
 105beb0:	or     BYTE PTR [rdx-0x15f8ffc],dh
 105beb6:	add    eax,DWORD PTR [rax]
 105beb8:	pop    rax
 105beb9:	ins    BYTE PTR es:[rdi],dx
 105beba:	add    BYTE PTR [rax],al
 105bebc:	pop    rdx
 105bebd:	add    BYTE PTR [rax],al
 105bebf:	add    bh,bh
 105bec1:	(bad)  
 105bec2:	(bad)  
 105bec3:	push   QWORD PTR [rax-0x5]
 105bec6:	add    al,0x0
 105bec8:	xor    BYTE PTR [rip+0xffffffffffff0003],bl        # 0x104bed1
 105bece:	(bad)  
 105becf:	call   FWORD PTR [rbp+0x1d]
 105bed2:	add    eax,DWORD PTR [rax]
 105bed4:	add    BYTE PTR [rax],al
 105bed6:	add    BYTE PTR [rax],al
 105bed8:	add    DWORD PTR [rsi],eax
 105beda:	add    al,BYTE PTR [rax]
 105bedc:	(bad)  
 105bedd:	xor    al,BYTE PTR [rdx]
 105bedf:	push   rax
 105bee0:	sbb    DWORD PTR [rax*1+0x39341a00],ebp
 105bee7:	add    BYTE PTR [rcx],cl
 105bee9:	add    DWORD PTR [rsi],esi
 105beeb:	add    BYTE PTR [rdx],al
 105beed:	jo     0x105beef
 105beef:	add    BYTE PTR [rax-0x7ffffc02],ah
 105bef5:	ins    BYTE PTR es:[rdi],dx
 105bef6:	add    BYTE PTR [rax],al
 105bef8:	movabs ds:0xd0ffffffff000001,al
 105bf01:	std    
 105bf02:	add    al,0x0
 105bf04:	loopne 0x105bf23
 105bf06:	add    eax,DWORD PTR [rax]
 105bf08:	(bad)  
 105bf09:	(bad)  
 105bf0a:	(bad)  
 105bf0b:	call   FWORD PTR [rbx]
 105bf0d:	(bad)  
 105bf0e:	add    eax,DWORD PTR [rax]
 105bf10:	add    BYTE PTR [rax],al
 105bf12:	add    BYTE PTR [rax],al
 105bf14:	in     eax,dx
 105bf15:	(bad)  
 105bf16:	add    eax,DWORD PTR [rax]
 105bf18:	(bad)  
 105bf19:	(bad)  
 105bf1a:	(bad)  
 105bf1b:	call   FWORD PTR [rcx]
 105bf1d:	xor    DWORD PTR [rcx],ecx
 105bf1f:	add    BYTE PTR [rdi],bl
 105bf21:	push   rsp
 105bf22:	cmp    eax,DWORD PTR [rax]
 105bf24:	sbb    esi,DWORD PTR [rdx+rdi*1]
 105bf27:	add    BYTE PTR [rsi],cl
 105bf29:	add    DWORD PTR [rax+rax*1],esi
 105bf2c:	(bad)  
 105bf2d:	loopne 0x105bf34
 105bf2f:	jo     0x105bf35
 105bf31:	(bad)  
 105bf32:	add    BYTE PTR [rax],al
 105bf34:	movabs al,ds:0x9200006ca80003fe
 105bf3d:	add    DWORD PTR [rax],eax
 105bf3f:	add    bh,bh
 105bf41:	(bad)  
 105bf42:	(bad)  
 105bf43:	jmp    QWORD PTR [rax-0x8]
 105bf46:	add    al,0x0
 105bf48:	xor    BYTE PTR [rdi],bl
 105bf4a:	add    eax,DWORD PTR [rax]
 105bf4c:	(bad)  
 105bf4d:	(bad)  
 105bf4e:	(bad)  
 105bf4f:	(bad)  
 105bf50:	jp     0x105bf71
 105bf52:	add    eax,DWORD PTR [rax]
 105bf54:	add    BYTE PTR [rax],al
 105bf56:	add    BYTE PTR [rax],al
 105bf58:	jl     0x105bf7a
 105bf5a:	add    eax,DWORD PTR [rax]
 105bf5c:	(bad)  
 105bf5d:	(bad)  
 105bf5e:	(bad)  
 105bf5f:	call   QWORD PTR [rcx]
 105bf61:	sbb    BYTE PTR [rax+rax*1],al
 105bf64:	sbb    BYTE PTR [rcx+rcx*1],dh
 105bf67:	add    BYTE PTR [rdx],cl
 105bf69:	push   rdx
 105bf6a:	(bad)  
 105bf6b:	jo     0x105bf01
 105bf6d:	inc    BYTE PTR [rbx]
 105bf6f:	add    al,dl
 105bf71:	ins    BYTE PTR es:[rdi],dx
 105bf72:	add    BYTE PTR [rax],al
 105bf74:	(bad)  
 105bf75:	(bad)  
 105bf76:	(bad)  
 105bf77:	push   QWORD PTR [rax]
 105bf79:	std    
 105bf7a:	add    al,0x0
 105bf7c:	shl    BYTE PTR [rax],1
 105bf7e:	add    eax,DWORD PTR [rax]
 105bf80:	(bad)  
 105bf81:	(bad)  
 105bf82:	(bad)  
 105bf83:	(bad)  
 105bf84:	out    dx,al
 105bf85:	and    BYTE PTR [rbx],al
 105bf87:	add    BYTE PTR [rax],al
 105bf89:	add    BYTE PTR [rax],al
 105bf8b:	add    BYTE PTR [rcx],al
 105bf8d:	(bad)  
 105bf8e:	add    al,BYTE PTR [rax]
 105bf90:	(bad)  
 105bf91:	xor    al,BYTE PTR [rdx]
 105bf93:	push   rax
 105bf94:	add    DWORD PTR [rdx],ebx
 105bf96:	or     al,BYTE PTR [rax]
 105bf98:	sbb    dh,BYTE PTR [rbp+rcx*1+0x0]
 105bf9c:	sbb    ah,BYTE PTR [rsp+rcx*1+0x0]
 105bfa0:	sbb    dl,BYTE PTR [rbx+rcx*1+0x0]
 105bfa4:	sbb    dh,BYTE PTR [rdx+rcx*1]
 105bfa7:	add    BYTE PTR [rdx],bl
 105bfa9:	jb     0x105bfc1
 105bfab:	loopne 0x105bfc6
 105bfad:	rex.X or eax,DWORD PTR [rax]
 105bfb0:	xor    DWORD PTR [rbx+rbp*1],esi
 105bfb3:	add    ah,BYTE PTR [rcx]
 105bfb5:	add    DWORD PTR [rax],esp
 105bfb7:	add    cl,BYTE PTR [rax+rsi*8]
 105bfba:	or     ah,al
 105bfbc:	or     al,dl
 105bfbe:	(bad)  
 105bfbf:	rol    BYTE PTR [rax+rsi*2],0x3
 105bfc3:	(bad)  
 105bfc4:	add    dl,BYTE PTR [rax+0x0]
 105bfc7:	add    BYTE PTR [rax-0x7fffc02],ah
 105bfcd:	ins    BYTE PTR es:[rdi],dx
 105bfce:	add    BYTE PTR [rax],al
 105bfd0:	repnz adc BYTE PTR [rax],al
 105bfd3:	add    bh,bh
 105bfd5:	(bad)  
 105bfd6:	(bad)  
 105bfd7:	inc    DWORD PTR [rax+0x4f8]
 105bfdd:	add    BYTE PTR [rax],al
 105bfdf:	add    BYTE PTR [rax+0x10004f8],dl
 105bfe5:	add    BYTE PTR [rax],al
 105bfe7:	add    BYTE PTR [rax+0x10004f8],ah
 105bfed:	add    BYTE PTR [rax],al
 105bfef:	add    BYTE PTR [rax-0x6ffffb08],dh
 105bff5:	and    al,BYTE PTR [rbx]
 105bff7:	add    bh,bh
 105bff9:	(bad)  
 105bffa:	(bad)  
 105bffb:	(bad)  
 105bffc:	out    dx,al
 105bffd:	and    al,BYTE PTR [rbx]
 105bfff:	add    BYTE PTR [rax],al
 105c001:	add    BYTE PTR [rax],al
 105c003:	add    BYTE PTR [rcx],dh
 105c005:	and    al,0x3
 105c007:	add    BYTE PTR [rcx],al
 105c009:	add    BYTE PTR [rax],al
 105c00b:	add    BYTE PTR [rsi+0x2000324],bh
 105c011:	add    BYTE PTR [rax],al
 105c013:	add    ch,cl
 105c015:	and    al,0x3
 105c017:	add    BYTE PTR [rcx],al
 105c019:	add    BYTE PTR [rax],al
 105c01b:	add    BYTE PTR [rdi],al
 105c01d:	and    eax,0x30003
 105c022:	add    BYTE PTR [rax],al
 105c024:	(bad)  
 105c025:	and    eax,0x10003
 105c02a:	add    BYTE PTR [rax],al
 105c02c:	push   rsi
 105c02d:	and    eax,0x3
 105c032:	add    BYTE PTR [rax],al
 105c034:	stos   DWORD PTR es:[rdi],eax
 105c035:	and    eax,0xffff0003
 105c03a:	(bad)  
 105c03b:	call   FWORD PTR [rcx]
 105c03d:	(bad)  
 105c03e:	add    eax,0x12010c00
 105c043:	add    BYTE PTR [rip+0x26003e0],al        # 0x365c429
 105c049:	push   rax
 105c04a:	add    BYTE PTR [rax],al
 105c04c:	rex.W add al,BYTE PTR [rax+rax*1]
 105c050:	add    BYTE PTR [rax],0x0
 105c053:	add    BYTE PTR [rcx],ah
 105c055:	or     BYTE PTR [rdx],al
 105c057:	add    BYTE PTR [rax],cl
 105c059:	je     0x105c073
 105c05b:	add    al,dh
 105c05d:	and    eax,0x26640003
 105c062:	add    eax,DWORD PTR [rax]
 105c064:	cmp    al,0xc0
 105c066:	add    eax,0x2082100
 105c06b:	add    BYTE PTR [rax],cl
 105c06d:	xor    al,0x17
 105c06f:	add    BYTE PTR [rsi+riz*1+0x3],ah
 105c073:	add    BYTE PTR [rcx+0x54000326],dl
 105c079:	rol    BYTE PTR [rip+0x2100],0x0        # 0x105e180
 105c080:	fs add eax,DWORD PTR es:[rax]
 105c084:	xchg   ecx,eax
 105c085:	add    eax,DWORD PTR es:[rax]
 105c088:	push   rsp
 105c089:	rol    BYTE PTR [rip+0x2100],0x0        # 0x105e190
 105c090:	lock and eax,0x26640003
 105c096:	add    eax,DWORD PTR [rax]
 105c098:	cmp    al,0xc0
 105c09a:	add    eax,0xb261100
 105c09f:	add    BYTE PTR [rsi],ah
 105c0a1:	fs sbb al,0x0
 105c0a4:	and    dh,BYTE PTR [rdx+rbx*1]
 105c0a7:	add    BYTE PTR [rsi],dl
 105c0a9:	add    DWORD PTR [rax+rax*1],edx
 105c0ac:	or     esi,eax
 105c0ae:	or     eax,esp
 105c0b0:	(bad)  
 105c0b1:	rol    BYTE PTR [rip+0x500470],0x0        # 0x155c528
 105c0b8:	xchg   esp,eax
 105c0b9:	inc    BYTE PTR [rbx]
 105c0bb:	add    BYTE PTR [rax],ah
 105c0bd:	ins    DWORD PTR es:[rdi],dx
 105c0be:	add    BYTE PTR [rax],al
 105c0c0:	(bad)  
 105c0c1:	(bad)  
 105c0c2:	(bad)  
 105c0c3:	call   QWORD PTR [rax-0x2]
 105c0c6:	add    al,0x0
 105c0c8:	add    BYTE PTR [rax],al
 105c0ca:	add    BYTE PTR [rax],al
 105c0cc:	(bad)  
 105c0cd:	inc    BYTE PTR [rax+rax*1]
 105c0d0:	add    DWORD PTR [rax],eax
 105c0d2:	add    BYTE PTR [rax],al
 105c0d4:	jo     0x105c0d4
 105c0d6:	add    al,0x0
 105c0d8:	rex (bad) 
 105c0da:	add    eax,DWORD PTR [rax]
 105c0dc:	(bad)  
 105c0dd:	(bad)  
 105c0de:	(bad)  
 105c0df:	call   QWORD PTR [rbx+0x327]
 105c0e5:	add    BYTE PTR [rax],al
 105c0e7:	add    BYTE PTR [rbp+0x1000327],bh
 105c0ed:	add    BYTE PTR [rax],al
 105c0ef:	add    bl,cl
 105c0f1:	(bad)  
 105c0f2:	add    eax,DWORD PTR [rax]
 105c0f4:	add    al,BYTE PTR [rax]
 105c0f6:	add    BYTE PTR [rax],al
 105c0f8:	jge    0x105c122
 105c0fa:	add    eax,DWORD PTR [rax]
 105c0fc:	add    DWORD PTR [rax],eax
 105c0fe:	add    BYTE PTR [rax],al
 105c100:	mov    BYTE PTR [rax],ch
 105c102:	add    eax,DWORD PTR [rax]
 105c104:	add    BYTE PTR [rax],al
 105c106:	add    BYTE PTR [rax],al
 105c108:	xchg   esi,eax
 105c109:	sub    BYTE PTR [rbx],al
 105c10b:	add    bh,bh
 105c10d:	(bad)  
 105c10e:	(bad)  
 105c10f:	inc    DWORD PTR [rcx]
 105c111:	(bad)  
 105c112:	or     al,BYTE PTR [rax]
 105c114:	(bad)  
 105c115:	push   rsp
 105c116:	adc    DWORD PTR [rax],eax
 105c118:	(bad)  
 105c119:	xor    al,0x10
 105c11b:	add    BYTE PTR [rsi],dl
 105c11d:	jb     0x105c131
 105c11f:	loopne 0x105c131
 105c121:	ror    BYTE PTR [rsi],1
 105c123:	ror    BYTE PTR [rax+rsi*2],0xb
 105c127:	(bad)  
 105c128:	and    DWORD PTR [rip+0xfffffffff4050002],eax        # 0xfffffffff50ac130
 105c12e:	(bad)  
 105c12f:	add    BYTE PTR [rax],al
 105c131:	sub    DWORD PTR [rbx],eax
 105c133:	add    BYTE PTR [rip+0x10000329],ch        # 0x1105c462
 105c139:	rol    DWORD PTR [rip+0x2100],0x0        # 0x105e240
 105c140:	add    BYTE PTR [rcx],ch
 105c142:	add    eax,DWORD PTR [rax]
 105c144:	sub    eax,0x10000329
 105c149:	rol    DWORD PTR [rip+0xa261100],0x0        # 0xb2bd250
 105c150:	es fs (bad) 
 105c153:	add    BYTE PTR [rdx],ah
 105c155:	xor    al,0x15
 105c157:	add    BYTE PTR [rsi],dl
 105c159:	ror    BYTE PTR [rdi],cl
 105c15b:	lock or eax,0x9c00be0
 105c161:	jo     0x105c16b
 105c163:	push   rax
 105c164:	xchg   esp,eax
 105c165:	inc    BYTE PTR [rbx]
 105c167:	add    BYTE PTR [rax+0x6d],cl
 105c16a:	add    BYTE PTR [rax],al
 105c16c:	(bad)  
 105c16d:	(bad)  
 105c16e:	(bad)  
 105c16f:	inc    DWORD PTR [rax+0x0]
 105c172:	add    eax,0x0
 105c177:	add    al,dh
 105c179:	inc    DWORD PTR [rax+rax*1]
 105c17c:	add    DWORD PTR [rax],eax
 105c17e:	add    BYTE PTR [rax],al
 105c180:	add    BYTE PTR [rax],al
 105c182:	add    eax,0x200
 105c187:	add    BYTE PTR [rax],dl
 105c189:	add    BYTE PTR [rip+0x300],al        # 0x105c48f
 105c18f:	add    BYTE PTR [rax],ah
 105c191:	add    BYTE PTR [rip+0x400],al        # 0x105c597
 105c197:	add    BYTE PTR [rax],dh
 105c199:	add    BYTE PTR [rip+0x329e000],al        # 0x42fa19f
 105c19f:	add    bh,bh
 105c1a1:	(bad)  
 105c1a2:	(bad)  
 105c1a3:	call   QWORD PTR [rdx]
 105c1a5:	sub    al,BYTE PTR [rbx]
 105c1a7:	add    BYTE PTR [rax],al
 105c1a9:	add    BYTE PTR [rax],al
 105c1ab:	add    BYTE PTR [rip+0x100032a],bl        # 0x205c4db
 105c1b1:	add    BYTE PTR [rax],al
 105c1b3:	add    BYTE PTR [rcx],ah
 105c1b5:	sub    al,BYTE PTR [rbx]
 105c1b7:	add    BYTE PTR [rdx],al
 105c1b9:	add    BYTE PTR [rax],al
 105c1bb:	add    BYTE PTR [rip+0x300032a],ah        # 0x405c4eb
 105c1c1:	add    BYTE PTR [rax],al
 105c1c3:	add    BYTE PTR [rcx],ch
 105c1c5:	sub    al,BYTE PTR [rbx]
 105c1c7:	add    BYTE PTR [rax+rax*1],al
 105c1ca:	add    BYTE PTR [rax],al
 105c1cc:	sub    eax,0x500032a
 105c1d1:	add    BYTE PTR [rax],al
 105c1d3:	add    BYTE PTR [rdx+0x2c],cl
 105c1d6:	add    eax,DWORD PTR [rax]
 105c1d8:	add    al,0x0
 105c1da:	add    BYTE PTR [rax],al
 105c1dc:	pop    rbp
 105c1dd:	sub    al,0x3
 105c1df:	add    BYTE PTR [rbx],al
 105c1e1:	add    BYTE PTR [rax],al
 105c1e3:	add    BYTE PTR [rax+0x2c],dh
 105c1e6:	add    eax,DWORD PTR [rax]
 105c1e8:	add    al,BYTE PTR [rax]
 105c1ea:	add    BYTE PTR [rax],al
 105c1ec:	sub    DWORD PTR [rbx+rax*1],0x0
 105c1f0:	add    DWORD PTR [rax],eax
 105c1f2:	add    BYTE PTR [rax],al
 105c1f4:	xchg   esi,eax
 105c1f5:	sub    al,0x3
 105c1f7:	add    BYTE PTR [rax],al
 105c1f9:	add    BYTE PTR [rax],al
 105c1fb:	add    BYTE PTR [rcx],al
 105c1fd:	(bad)  
 105c1fe:	add    al,BYTE PTR [rax]
 105c200:	(bad)  
 105c201:	xor    al,BYTE PTR [rdx]
 105c203:	push   rax
 105c204:	adc    DWORD PTR [rdx],esp
 105c206:	or     al,BYTE PTR [rax]
 105c208:	and    ah,BYTE PTR [rbx+rdx*1+0x0]
 105c20c:	(bad)  
 105c20d:	xor    al,0x12
 105c20f:	add    BYTE PTR [rdx],dl
 105c211:	mov    dl,0xb
 105c213:	lock or eax,esp
 105c216:	(bad)  
 105c217:	rol    BYTE PTR [rip+0xffffffff94500470],0xfe        # 0xffffffff9555c68e
 105c21e:	add    eax,DWORD PTR [rax]
 105c220:	jo     0x105c28f
 105c222:	add    BYTE PTR [rax],al
 105c224:	(bad)  
 105c225:	(bad)  
 105c226:	(bad)  
 105c227:	call   QWORD PTR [rax+0x4ff]
 105c22d:	add    BYTE PTR [rax],al
 105c22f:	add    BYTE PTR [rax+0x10004ff],ah
 105c235:	add    BYTE PTR [rax],al
 105c237:	add    BYTE PTR [rax+0x20004ff],dh
 105c23d:	add    BYTE PTR [rax],al
 105c23f:	add    al,al
 105c241:	inc    DWORD PTR [rax+rax*1]
 105c244:	add    eax,DWORD PTR [rax]
 105c246:	add    BYTE PTR [rax],al
 105c248:	sar    bh,1
 105c24a:	add    al,0x0
 105c24c:	shr    BYTE PTR [rbx+rax*1],1
 105c24f:	add    bh,bh
 105c251:	(bad)  
 105c252:	(bad)  
 105c253:	inc    DWORD PTR [rip+0x32d]        # 0x105c586
 105c259:	add    BYTE PTR [rax],al
 105c25b:	add    BYTE PTR [rcx],cl
 105c25d:	sub    eax,0x10003
 105c262:	add    BYTE PTR [rax],al
 105c264:	or     eax,0x200032d
 105c269:	add    BYTE PTR [rax],al
 105c26b:	add    BYTE PTR [rcx],dl
 105c26d:	sub    eax,0x30003
 105c272:	add    BYTE PTR [rax],al
 105c274:	adc    eax,0x400032d
 105c279:	add    BYTE PTR [rax],al
 105c27b:	add    BYTE PTR [rsi+rbp*1+0x30003],bl
 105c282:	add    BYTE PTR [rax],al
 105c284:	scas   eax,DWORD PTR es:[rdi]
 105c285:	add    eax,DWORD PTR cs:[rax]
 105c288:	add    al,BYTE PTR [rax]
 105c28a:	add    BYTE PTR [rax],al
 105c28c:	ret    0x32e
 105c28f:	add    BYTE PTR [rcx],al
 105c291:	add    BYTE PTR [rax],al
 105c293:	add    ch,dl
 105c295:	add    eax,DWORD PTR cs:[rax]
 105c298:	add    BYTE PTR [rax],al
 105c29a:	add    BYTE PTR [rax],al
 105c29c:	call   0x5c5cf
 105c2a1:	(bad)  
 105c2a2:	(bad)  
 105c2a3:	call   QWORD PTR [rcx]
 105c2a5:	or     eax,DWORD PTR es:[rax]
 105c2a8:	es sbb DWORD PTR fs:[rax],eax
 105c2ac:	and    dh,BYTE PTR [rax+rbx*1]
 105c2af:	add    BYTE PTR [rsi],dl
 105c2b1:	add    DWORD PTR [rdx],edx
 105c2b3:	add    BYTE PTR [rbx],cl
 105c2b5:	lock or eax,esp
 105c2b8:	(bad)  
 105c2b9:	rol    BYTE PTR [rip+0x500470],0x0        # 0x155c730
 105c2c0:	xchg   esp,eax
 105c2c1:	inc    BYTE PTR [rbx]
 105c2c3:	add    BYTE PTR [rax-0xffff93],bl
 105c2c9:	(bad)  
 105c2ca:	(bad)  
 105c2cb:	inc    DWORD PTR [rax]
 105c2cd:	add    al,0x5
 105c2cf:	add    BYTE PTR [rax],al
 105c2d1:	add    BYTE PTR [rax],al
 105c2d3:	add    BYTE PTR [rax],dl
 105c2d5:	add    al,0x5
 105c2d7:	add    BYTE PTR [rcx],al
 105c2d9:	add    BYTE PTR [rax],al
 105c2db:	add    BYTE PTR [rax],ah
 105c2dd:	add    al,0x5
 105c2df:	add    BYTE PTR [rdx],al
 105c2e1:	add    BYTE PTR [rax],al
 105c2e3:	add    BYTE PTR [rax],dh
 105c2e5:	add    al,0x5
 105c2e7:	add    BYTE PTR [rbx],al
 105c2e9:	add    BYTE PTR [rax],al
 105c2eb:	add    BYTE PTR [rax+0x4],al
 105c2ee:	add    eax,0x400
 105c2f3:	add    BYTE PTR [rax+0x4],dl
 105c2f6:	add    eax,0x500
 105c2fb:	add    BYTE PTR [rax+0x4],ah
 105c2fe:	add    eax,0x32f2000
 105c303:	add    bh,bh
 105c305:	(bad)  
 105c306:	(bad)  
 105c307:	call   QWORD PTR [rsi+0x2f]
 105c30a:	add    eax,DWORD PTR [rax]
 105c30c:	add    BYTE PTR [rax],al
 105c30e:	add    BYTE PTR [rax],al
 105c310:	pop    rdx
 105c311:	(bad)  
 105c312:	add    eax,DWORD PTR [rax]
 105c314:	add    DWORD PTR [rax],eax
 105c316:	add    BYTE PTR [rax],al
 105c318:	pop    rsi
 105c319:	(bad)  
 105c31a:	add    eax,DWORD PTR [rax]
 105c31c:	add    al,BYTE PTR [rax]
 105c31e:	add    BYTE PTR [rax],al
 105c320:	(bad)  
 105c321:	(bad)  
 105c322:	add    eax,DWORD PTR [rax]
 105c324:	add    eax,DWORD PTR [rax]
 105c326:	add    BYTE PTR [rax],al
 105c328:	data16 (bad) 
 105c32a:	add    eax,DWORD PTR [rax]
 105c32c:	add    al,0x0
 105c32e:	add    BYTE PTR [rax],al
 105c330:	js     0x105c361
 105c332:	add    eax,DWORD PTR [rax]
 105c334:	add    eax,0x86000000
 105c339:	(bad)  
 105c33a:	add    eax,DWORD PTR [rax]
 105c33c:	(bad)  
 105c33d:	add    BYTE PTR [rax],al
 105c33f:	add    BYTE PTR [rcx],ch
 105c341:	xor    DWORD PTR [rbx],eax
 105c343:	add    BYTE PTR [rip+0x34000000],al        # 0x3505c349
 105c349:	xor    DWORD PTR [rbx],eax
 105c34b:	add    BYTE PTR [rax+rax*1],al
 105c34e:	add    BYTE PTR [rax],al
 105c350:	(bad)  
 105c351:	xor    DWORD PTR [rbx],eax
 105c353:	add    BYTE PTR [rbx],al
 105c355:	add    BYTE PTR [rax],al
 105c357:	add    BYTE PTR [rdx+0x31],dl
 105c35a:	add    eax,DWORD PTR [rax]
 105c35c:	add    al,BYTE PTR [rax]
 105c35e:	add    BYTE PTR [rax],al
 105c360:	xor    DWORD PTR gs:[rbx],eax
 105c363:	add    BYTE PTR [rcx],al
 105c365:	add    BYTE PTR [rax],al
 105c367:	add    BYTE PTR [rax+0x31],bh
 105c36a:	add    eax,DWORD PTR [rax]
 105c36c:	add    BYTE PTR [rax],al
 105c36e:	add    BYTE PTR [rax],al
 105c370:	mov    esi,DWORD PTR [rcx]
 105c372:	add    eax,DWORD PTR [rax]
 105c374:	(bad)  
 105c375:	(bad)  
 105c376:	(bad)  
 105c377:	call   QWORD PTR [rcx]
 105c379:	adc    eax,0x720d0006
 105c37e:	or     eax,esp
 105c380:	(bad)  
 105c381:	jo     0x105c389
 105c383:	(bad)  
 105c384:	add    eax,0x94300450
 105c389:	inc    BYTE PTR [rbx]
 105c38b:	add    al,al
 105c38d:	ins    DWORD PTR es:[rdi],dx
 105c38e:	add    BYTE PTR [rax],al
 105c390:	(bad)  
 105c391:	(bad)  
 105c392:	(bad)  
 105c393:	call   QWORD PTR [rax]
 105c395:	clc    
 105c396:	add    al,0x0
 105c398:	add    BYTE PTR [rax],al
 105c39a:	add    BYTE PTR [rax],al
 105c39c:	and    al,bh
 105c39e:	add    al,0x0
 105c3a0:	add    DWORD PTR [rax],eax
 105c3a2:	add    BYTE PTR [rax],al
 105c3a4:	xor    al,bh
 105c3a6:	add    al,0x0
 105c3a8:	add    al,BYTE PTR [rax]
 105c3aa:	add    BYTE PTR [rax],al
 105c3ac:	rex clc 
 105c3ae:	add    al,0x0
 105c3b0:	shl    BYTE PTR [rcx],1
 105c3b2:	add    eax,DWORD PTR [rax]
 105c3b4:	(bad)  
 105c3b5:	(bad)  
 105c3b6:	(bad)  
 105c3b7:	push   rdx
 105c3b9:	xor    DWORD PTR [rbx],eax
 105c3bb:	add    BYTE PTR [rax],al
 105c3bd:	add    BYTE PTR [rax],al
 105c3bf:	add    dh,dh
 105c3c1:	xor    DWORD PTR [rbx],eax
 105c3c3:	add    BYTE PTR [rcx],al
 105c3c5:	add    BYTE PTR [rax],al
 105c3c7:	add    dl,bh
 105c3c9:	xor    DWORD PTR [rbx],eax
 105c3cb:	add    BYTE PTR [rdx],al
 105c3cd:	add    BYTE PTR [rax],al
 105c3cf:	add    dh,bh
 105c3d1:	xor    DWORD PTR [rbx],eax
 105c3d3:	add    BYTE PTR [rbx],al
 105c3d5:	add    BYTE PTR [rax],al
 105c3d7:	add    BYTE PTR [rbx],cl
 105c3d9:	xor    eax,DWORD PTR [rbx]
 105c3db:	add    BYTE PTR [rdx],al
 105c3dd:	add    BYTE PTR [rax],al
 105c3df:	add    BYTE PTR [rax],ah
 105c3e1:	xor    eax,DWORD PTR [rbx]
 105c3e3:	add    BYTE PTR [rcx],al
 105c3e5:	add    BYTE PTR [rax],al
 105c3e7:	add    BYTE PTR [rbx],bh
 105c3e9:	xor    eax,DWORD PTR [rbx]
 105c3eb:	add    BYTE PTR [rax],al
 105c3ed:	add    BYTE PTR [rax],al
 105c3ef:	add    BYTE PTR [rsi+0x33],dl
 105c3f2:	add    eax,DWORD PTR [rax]
 105c3f4:	(bad)  
 105c3f5:	(bad)  
 105c3f6:	(bad)  
 105c3f7:	call   QWORD PTR [rcx]
 105c3f9:	and    cl,BYTE PTR [rdx]
 105c3fb:	add    BYTE PTR [rdx],ah
 105c3fd:	fs adc eax,0x14341e00
 105c403:	add    BYTE PTR [rdx],dl
 105c405:	ror    BYTE PTR [rbx],cl
 105c407:	lock or eax,esp
 105c40a:	(bad)  
 105c40b:	rol    BYTE PTR [rip+0xffffffff94500470],0xfe        # 0xffffffff9555c882
 105c412:	add    eax,DWORD PTR [rax]
 105c414:	call   0x5c486
 105c419:	(bad)  
 105c41a:	(bad)  
 105c41b:	push   QWORD PTR [rax+0x0]
 105c41e:	add    eax,0x0
 105c423:	add    BYTE PTR [rax+0x1000500],al
 105c429:	add    BYTE PTR [rax],al
 105c42b:	add    BYTE PTR [rax+0x2000500],dl
 105c431:	add    BYTE PTR [rax],al
 105c433:	add    BYTE PTR [rax+0x3000500],ah
 105c439:	add    BYTE PTR [rax],al
 105c43b:	add    BYTE PTR [rax-0x7ffffb00],dh
 105c441:	xor    eax,DWORD PTR [rbx]
 105c443:	add    bh,bh
 105c445:	(bad)  
 105c446:	(bad)  
 105c447:	push   QWORD PTR [rdx+0x333]
 105c44d:	add    BYTE PTR [rax],al
 105c44f:	add    BYTE PTR [rsi+0x1000333],dh
 105c455:	add    BYTE PTR [rax],al
 105c457:	add    BYTE PTR [rdx+0x2000333],bh
 105c45d:	add    BYTE PTR [rax],al
 105c45f:	add    BYTE PTR [rsi+0x3000333],bh
 105c465:	add    BYTE PTR [rax],al
 105c467:	add    dl,al
 105c469:	xor    eax,DWORD PTR [rbx]
 105c46b:	add    BYTE PTR [rax+rax*1],al
 105c46e:	add    BYTE PTR [rax],al
 105c470:	es xor eax,0x30003
 105c476:	add    BYTE PTR [rax],al
 105c478:	cmp    DWORD PTR [rip+0x20003],esi        # 0x107c481
 105c47e:	add    BYTE PTR [rax],al
 105c480:	rex.WR xor rax,0x10003
 105c486:	add    BYTE PTR [rax],al
 105c488:	pop    rdi
 105c489:	xor    eax,0x3
 105c48e:	add    BYTE PTR [rax],al
 105c490:	jb     0x105c4c7
 105c492:	add    eax,DWORD PTR [rax]
 105c494:	(bad)  
 105c495:	(bad)  
 105c496:	(bad)  
 105c497:	call   FWORD PTR [rcx]
 105c499:	(bad)  
 105c49a:	or     al,BYTE PTR [rax]
 105c49c:	sbb    DWORD PTR [rcx],eax
 105c49e:	adc    DWORD PTR [rax],eax
 105c4a0:	or     eax,0x9e00bf0
 105c4a5:	rol    BYTE PTR [rdi],1
 105c4a7:	rol    BYTE PTR [rip+0x3600470],0x30        # 0x465c91e
 105c4ae:	add    dl,BYTE PTR [rax-0x60]
 105c4b1:	inc    BYTE PTR [rbx]
 105c4b3:	add    BYTE PTR [rax],dl
 105c4b5:	outs   dx,BYTE PTR ds:[rsi]
 105c4b6:	add    BYTE PTR [rax],al
 105c4b8:	jb     0x105c4ba
 105c4ba:	add    BYTE PTR [rax],al
 105c4bc:	(bad)  
 105c4bd:	(bad)  
 105c4be:	(bad)  
 105c4bf:	call   rax
 105c4c1:	add    BYTE PTR [rip+0x0],al        # 0x105c4c7
 105c4c7:	add    al,ah
 105c4c9:	add    BYTE PTR [rip+0x100],al        # 0x105c5cf
 105c4cf:	add    al,dh
 105c4d1:	add    BYTE PTR [rip+0x200],al        # 0x105c6d7
 105c4d7:	add    BYTE PTR [rax],al
 105c4d9:	add    DWORD PTR [rip+0x200],eax        # 0x105c6df
 105c4df:	add    BYTE PTR [rax],dl
 105c4e1:	add    DWORD PTR [rip+0x200],eax        # 0x105c6e7
 105c4e7:	add    BYTE PTR [rax],ah
 105c4e9:	add    DWORD PTR [rip+0x200],eax        # 0x105c6ef
 105c4ef:	add    BYTE PTR [rax],dh
 105c4f1:	add    DWORD PTR [rip+0x200],eax        # 0x105c6f7
 105c4f7:	add    BYTE PTR [rax+0x1],al
 105c4fa:	add    eax,0x200
 105c4ff:	add    BYTE PTR [rax+0x1],dl
 105c502:	add    eax,0x200
 105c507:	add    BYTE PTR [rax+0x1],ah
 105c50a:	add    eax,0x200
 105c50f:	add    BYTE PTR [rax+0x1],dh
 105c512:	add    eax,0x200
 105c517:	add    BYTE PTR [rax+0x2000501],al
 105c51d:	add    BYTE PTR [rax],al
 105c51f:	add    BYTE PTR [rax+0x2000501],dl
 105c525:	add    BYTE PTR [rax],al
 105c527:	add    BYTE PTR [rax+0x2000501],ah
 105c52d:	add    BYTE PTR [rax],al
 105c52f:	add    BYTE PTR [rax+0x2000501],dh
 105c535:	add    BYTE PTR [rax],al
 105c537:	add    al,al
 105c539:	add    DWORD PTR [rip+0x200],eax        # 0x105c73f
 105c53f:	add    al,dl
 105c541:	add    DWORD PTR [rip+0x200],eax        # 0x105c747
 105c547:	add    al,ah
 105c549:	add    DWORD PTR [rip+0x200],eax        # 0x105c74f
 105c54f:	add    al,dh
 105c551:	add    DWORD PTR [rip+0x200],eax        # 0x105c757
 105c557:	add    BYTE PTR [rax],al
 105c559:	add    al,BYTE PTR [rip+0x200]        # 0x105c75f
 105c55f:	add    BYTE PTR [rax],dl
 105c561:	add    al,BYTE PTR [rip+0x200]        # 0x105c767
 105c567:	add    BYTE PTR [rax],ah
 105c569:	add    al,BYTE PTR [rip+0x200]        # 0x105c76f
 105c56f:	add    BYTE PTR [rax],dh
 105c571:	add    al,BYTE PTR [rip+0x335b000]        # 0x43b7577
 105c577:	add    bh,bh
 105c579:	(bad)  
 105c57a:	(bad)  
 105c57b:	push   rsi
 105c57d:	xor    eax,0x3
 105c582:	add    BYTE PTR [rax],al
 105c584:	cld    
 105c585:	xor    eax,0x10003
 105c58a:	add    BYTE PTR [rax],al
 105c58c:	add    esi,DWORD PTR [rsi]
 105c58e:	add    eax,DWORD PTR [rax]
 105c590:	add    al,BYTE PTR [rax]
 105c592:	add    BYTE PTR [rax],al
 105c594:	ds add eax,DWORD PTR ss:[rax]
 105c598:	add    DWORD PTR [rax],eax
 105c59a:	add    BYTE PTR [rax],al
 105c59c:	push   rcx
 105c59d:	add    eax,DWORD PTR ss:[rax]
 105c5a0:	add    BYTE PTR [rax],al
 105c5a2:	add    BYTE PTR [rax],al
 105c5a4:	fs add eax,DWORD PTR ss:[rax]
 105c5a8:	(bad)  
 105c5a9:	(bad)  
 105c5aa:	(bad)  
 105c5ab:	push   QWORD PTR [rbp+0x36]
 105c5ae:	add    eax,DWORD PTR [rax]
 105c5b0:	add    al,BYTE PTR [rax]
 105c5b2:	add    BYTE PTR [rax],al
 105c5b4:	lods   eax,DWORD PTR ds:[rsi]
 105c5b5:	add    eax,DWORD PTR ss:[rax]
 105c5b8:	add    DWORD PTR [rax],eax
 105c5ba:	add    BYTE PTR [rax],al
 105c5bc:	shl    BYTE PTR [rsi],0x3
 105c5bf:	add    BYTE PTR [rax],al
 105c5c1:	add    BYTE PTR [rax],al
 105c5c3:	add    bl,dl
 105c5c5:	add    eax,DWORD PTR ss:[rax]
 105c5c8:	(bad)  
 105c5c9:	(bad)  
 105c5ca:	(bad)  
 105c5cb:	jmp    rsp
 105c5cd:	add    eax,DWORD PTR ss:[rax]
 105c5d0:	add    al,BYTE PTR [rax]
 105c5d2:	add    BYTE PTR [rax],al
 105c5d4:	(bad)  
 105c5d5:	(bad)  
 105c5d6:	add    eax,DWORD PTR [rax]
 105c5d8:	add    DWORD PTR [rax],eax
 105c5da:	add    BYTE PTR [rax],al
 105c5dc:	push   rdx
 105c5dd:	(bad)  
 105c5de:	add    eax,DWORD PTR [rax]
 105c5e0:	add    BYTE PTR [rax],al
 105c5e2:	add    BYTE PTR [rax],al
 105c5e4:	gs (bad) 
 105c5e6:	add    eax,DWORD PTR [rax]
 105c5e8:	(bad)  
 105c5e9:	(bad)  
 105c5ea:	(bad)  
 105c5eb:	push   QWORD PTR [rsi+0x37]
 105c5ee:	add    eax,DWORD PTR [rax]
 105c5f0:	add    al,BYTE PTR [rax]
 105c5f2:	add    BYTE PTR [rax],al
 105c5f4:	mov    esi,DWORD PTR [rdi]
 105c5f6:	add    eax,DWORD PTR [rax]
 105c5f8:	add    eax,DWORD PTR [rax]
 105c5fa:	add    BYTE PTR [rax],al
 105c5fc:	movabs al,ds:0xca00000002000337
 105c605:	(bad)  
 105c606:	add    eax,DWORD PTR [rax]
 105c608:	add    al,0x0
 105c60a:	add    BYTE PTR [rax],al
 105c60c:	fdiv   DWORD PTR [rdi]
 105c60e:	add    eax,DWORD PTR [rax]
 105c610:	add    al,BYTE PTR [rax]
 105c612:	add    BYTE PTR [rax],al
 105c614:	hlt    
 105c615:	(bad)  
 105c616:	add    eax,DWORD PTR [rax]
 105c618:	add    eax,0x9000000
 105c61d:	cmp    BYTE PTR [rbx],al
 105c61f:	add    BYTE PTR [rdx],al
 105c621:	add    BYTE PTR [rax],al
 105c623:	add    BYTE PTR [rbx],dh
 105c625:	cmp    BYTE PTR [rbx],al
 105c627:	add    BYTE PTR [rsi],al
 105c629:	add    BYTE PTR [rax],al
 105c62b:	add    BYTE PTR [rcx+0x38],al
 105c62e:	add    eax,DWORD PTR [rax]
 105c630:	add    al,BYTE PTR [rax]
 105c632:	add    BYTE PTR [rax],al
 105c634:	pop    rbp
 105c635:	cmp    BYTE PTR [rbx],al
 105c637:	add    BYTE PTR [rdi],al
 105c639:	add    BYTE PTR [rax],al
 105c63b:	add    BYTE PTR [rdx+0x38],dh
 105c63e:	add    eax,DWORD PTR [rax]
 105c640:	add    al,BYTE PTR [rax]
 105c642:	add    BYTE PTR [rax],al
 105c644:	pushf  
 105c645:	cmp    BYTE PTR [rbx],al
 105c647:	add    BYTE PTR [rax],cl
 105c649:	add    BYTE PTR [rax],al
 105c64b:	add    BYTE PTR [rdx+0x2000338],ch
 105c651:	add    BYTE PTR [rax],al
 105c653:	add    dh,al
 105c655:	cmp    BYTE PTR [rbx],al
 105c657:	add    BYTE PTR [rcx],cl
 105c659:	add    BYTE PTR [rax],al
 105c65b:	add    bl,bl
 105c65d:	cmp    BYTE PTR [rbx],al
 105c65f:	add    BYTE PTR [rdx],al
 105c661:	add    BYTE PTR [rax],al
 105c663:	add    BYTE PTR [rip+0xa000339],al        # 0xb05c9a2
 105c669:	add    BYTE PTR [rax],al
 105c66b:	add    BYTE PTR [rbx],dl
 105c66d:	cmp    DWORD PTR [rbx],eax
 105c66f:	add    BYTE PTR [rdx],al
 105c671:	add    BYTE PTR [rax],al
 105c673:	add    BYTE PTR [rdi],ch
 105c675:	cmp    DWORD PTR [rbx],eax
 105c677:	add    BYTE PTR [rbx],cl
 105c679:	add    BYTE PTR [rax],al
 105c67b:	add    BYTE PTR [rcx+rdi*1+0x3],al
 105c67f:	add    BYTE PTR [rdx],al
 105c681:	add    BYTE PTR [rax],al
 105c683:	add    BYTE PTR [rsi+0x39],ch
 105c686:	add    eax,DWORD PTR [rax]
 105c688:	or     al,0x0
 105c68a:	add    BYTE PTR [rax],al
 105c68c:	jl     0x105c6c7
 105c68e:	add    eax,DWORD PTR [rax]
 105c690:	add    al,BYTE PTR [rax]
 105c692:	add    BYTE PTR [rax],al
 105c694:	cwde   
 105c695:	cmp    DWORD PTR [rbx],eax
 105c697:	add    BYTE PTR [rip+0xffffffffad000000],cl        # 0xffffffffae05c69d
 105c69d:	cmp    DWORD PTR [rbx],eax
 105c69f:	add    BYTE PTR [rdx],al
 105c6a1:	add    BYTE PTR [rax],al
 105c6a3:	add    bh,dl
 105c6a5:	cmp    DWORD PTR [rbx],eax
 105c6a7:	add    BYTE PTR [rsi],cl
 105c6a9:	add    BYTE PTR [rax],al
 105c6ab:	add    ch,ah
 105c6ad:	cmp    DWORD PTR [rbx],eax
 105c6af:	add    BYTE PTR [rdx],al
 105c6b1:	add    BYTE PTR [rax],al
 105c6b3:	add    BYTE PTR [rcx],al
 105c6b5:	cmp    al,BYTE PTR [rbx]
 105c6b7:	add    BYTE PTR [rdi],cl
 105c6b9:	add    BYTE PTR [rax],al
 105c6bb:	add    BYTE PTR [rsi],dl
 105c6bd:	cmp    al,BYTE PTR [rbx]
 105c6bf:	add    BYTE PTR [rdx],al
 105c6c1:	add    BYTE PTR [rax],al
 105c6c3:	add    BYTE PTR [rax+0x3a],al
 105c6c6:	add    eax,DWORD PTR [rax]
 105c6c8:	adc    BYTE PTR [rax],al
 105c6ca:	add    BYTE PTR [rax],al
 105c6cc:	rex.WRX cmp r8b,BYTE PTR [rbx]
 105c6cf:	add    BYTE PTR [rdx],al
 105c6d1:	add    BYTE PTR [rax],al
 105c6d3:	add    BYTE PTR [rdx+0x3a],ch
 105c6d6:	add    eax,DWORD PTR [rax]
 105c6d8:	adc    DWORD PTR [rax],eax
 105c6da:	add    BYTE PTR [rax],al
 105c6dc:	jg     0x105c718
 105c6de:	add    eax,DWORD PTR [rax]
 105c6e0:	add    al,BYTE PTR [rax]
 105c6e2:	add    BYTE PTR [rax],al
 105c6e4:	test   eax,0x1200033a
 105c6e9:	add    BYTE PTR [rax],al
 105c6eb:	add    BYTE PTR [rdi+0x200033a],dh
 105c6f1:	add    BYTE PTR [rax],al
 105c6f3:	add    bl,dl
 105c6f5:	cmp    al,BYTE PTR [rbx]
 105c6f7:	add    BYTE PTR [rbx],dl
 105c6f9:	add    BYTE PTR [rax],al
 105c6fb:	add    al,ch
 105c6fd:	cmp    al,BYTE PTR [rbx]
 105c6ff:	add    BYTE PTR [rdx],al
 105c701:	add    BYTE PTR [rax],al
 105c703:	add    BYTE PTR [rdx],dl
 105c705:	cmp    eax,DWORD PTR [rbx]
 105c707:	add    BYTE PTR [rax+rax*1],dl
 105c70a:	add    BYTE PTR [rax],al
 105c70c:	and    BYTE PTR [rbx],bh
 105c70e:	add    eax,DWORD PTR [rax]
 105c710:	add    al,BYTE PTR [rax]
 105c712:	add    BYTE PTR [rax],al
 105c714:	cmp    DWORD PTR [rbx],edi
 105c716:	add    eax,DWORD PTR [rax]
 105c718:	adc    eax,0x4e000000
 105c71d:	cmp    eax,DWORD PTR [rbx]
 105c71f:	add    BYTE PTR [rdx],al
 105c721:	add    BYTE PTR [rax],al
 105c723:	add    BYTE PTR [rax+0x3b],bh
 105c726:	add    eax,DWORD PTR [rax]
 105c728:	(bad)  
 105c729:	add    BYTE PTR [rax],al
 105c72b:	add    BYTE PTR [rsi+0x200033b],al
 105c731:	add    BYTE PTR [rax],al
 105c733:	add    BYTE PTR [rdi],ah
 105c735:	cmp    al,0x3
 105c737:	add    BYTE PTR [rcx],al
 105c739:	add    BYTE PTR [rax],al
 105c73b:	add    BYTE PTR [rsi],bh
 105c73d:	cmp    al,0x3
 105c73f:	add    BYTE PTR [rax],al
 105c741:	add    BYTE PTR [rax],al
 105c743:	add    BYTE PTR [rbp+0x3c],dl
 105c746:	add    eax,DWORD PTR [rax]
 105c748:	(bad)  
 105c749:	(bad)  
 105c74a:	(bad)  
 105c74b:	call   QWORD PTR [rcx]
 105c74d:	(bad)  
 105c74e:	add    al,0x0
 105c750:	rsqrtps xmm1,XMMWORD PTR [rax]
 105c753:	jo     0x105c75c
 105c755:	xor    BYTE PTR [rsi],al
 105c757:	push   rax
 105c758:	xchg   esp,eax
 105c759:	inc    BYTE PTR [rbx]
 105c75b:	add    BYTE PTR [rax],bh
 105c75d:	outs   dx,BYTE PTR ds:[rsi]
 105c75e:	add    BYTE PTR [rax],al
 105c760:	(bad)  
 105c761:	(bad)  
 105c762:	(bad)  
 105c763:	call   QWORD PTR [rax-0x7]
 105c766:	add    al,0x0
 105c768:	add    BYTE PTR [rax],al
 105c76a:	add    BYTE PTR [rax],al
 105c76c:	cmp    cl,0x4
 105c76f:	add    BYTE PTR [rax],al
 105c771:	add    BYTE PTR [rax],al
 105c773:	add    BYTE PTR [rax+0x20004f9],dl
 105c779:	add    BYTE PTR [rax],al
 105c77b:	add    BYTE PTR [rax+0x4f9],ah
 105c781:	add    BYTE PTR [rax],al
 105c783:	add    BYTE PTR [rax+0x4f9],dh
 105c789:	add    BYTE PTR [rax],al
 105c78b:	add    al,al
 105c78d:	stc    
 105c78e:	add    al,0x0
 105c790:	add    eax,0xd0000000
 105c795:	stc    
 105c796:	add    al,0x0
 105c798:	add    BYTE PTR [rax],al
 105c79a:	add    BYTE PTR [rax],al
 105c79c:	loopne 0x105c797
 105c79e:	add    al,0x0
 105c7a0:	add    BYTE PTR [rax],al
 105c7a2:	add    BYTE PTR [rax],al
 105c7a4:	lock stc 
 105c7a6:	add    al,0x0
 105c7a8:	or     BYTE PTR [rax],al
 105c7aa:	add    BYTE PTR [rax],al
 105c7ac:	add    dl,bh
 105c7ae:	add    al,0x0
 105c7b0:	add    BYTE PTR [rax],al
 105c7b2:	add    BYTE PTR [rax],al
 105c7b4:	adc    dl,bh
 105c7b6:	add    al,0x0
 105c7b8:	add    BYTE PTR [rax],al
 105c7ba:	add    BYTE PTR [rax],al
 105c7bc:	and    dl,bh
 105c7be:	add    al,0x0
 105c7c0:	or     eax,DWORD PTR [rax]
 105c7c2:	add    BYTE PTR [rax],al
 105c7c4:	xor    dl,bh
 105c7c6:	add    al,0x0
 105c7c8:	add    BYTE PTR [rax],al
 105c7ca:	add    BYTE PTR [rax],al
 105c7cc:	rex cli 
 105c7ce:	add    al,0x0
 105c7d0:	add    BYTE PTR [rax],al
 105c7d2:	add    BYTE PTR [rax],al
 105c7d4:	push   rax
 105c7d5:	cli    
 105c7d6:	add    al,0x0
 105c7d8:	(bad)  
 105c7d9:	add    BYTE PTR [rax],al
 105c7db:	add    BYTE PTR [rax-0x6],ah
 105c7de:	add    al,0x0
 105c7e0:	nop
 105c7e1:	cmp    al,0x3
 105c7e3:	add    bh,bh
 105c7e5:	(bad)  
 105c7e6:	(bad)  
 105c7e7:	jmp    FWORD PTR [rdx+0x33c]
 105c7ed:	add    BYTE PTR [rax],al
 105c7ef:	add    dl,dl
 105c7f1:	cmp    al,0x3
 105c7f3:	add    BYTE PTR [rcx],al
 105c7f5:	add    BYTE PTR [rax],al
 105c7f7:	add    bh,ah
 105c7f9:	cmp    al,0x3
 105c7fb:	add    BYTE PTR [rax],al
 105c7fd:	add    BYTE PTR [rax],al
 105c7ff:	add    BYTE PTR [rcx],cl
 105c801:	cmp    eax,0x20003
 105c806:	add    BYTE PTR [rax],al
 105c808:	sbb    eax,0x300033d
 105c80d:	add    BYTE PTR [rax],al
 105c80f:	add    BYTE PTR [rdx],ch
 105c811:	cmp    eax,0x20003
 105c816:	add    BYTE PTR [rax],al
 105c818:	xor    eax,0x33d
 105c81d:	add    BYTE PTR [rax],al
 105c81f:	add    BYTE PTR [rbp+0x3d],al
 105c822:	add    eax,DWORD PTR [rax]
 105c824:	add    al,0x0
 105c826:	add    BYTE PTR [rax],al
 105c828:	pop    rdx
 105c829:	cmp    eax,0x3
 105c82e:	add    BYTE PTR [rax],al
 105c830:	jl     0x105c86f
 105c832:	add    eax,DWORD PTR [rax]
 105c834:	add    eax,0x90000000
 105c839:	cmp    eax,0x60003
 105c83e:	add    BYTE PTR [rax],al
 105c840:	popf   
 105c841:	cmp    eax,0x50003
 105c846:	add    BYTE PTR [rax],al
 105c848:	test   al,0x3d
 105c84a:	add    eax,DWORD PTR [rax]
 105c84c:	add    BYTE PTR [rax],al
 105c84e:	add    BYTE PTR [rax],al
 105c850:	mov    eax,0x700033d
 105c855:	add    BYTE PTR [rax],al
 105c857:	add    ch,cl
 105c859:	cmp    eax,0x3
 105c85e:	add    BYTE PTR [rax],al
 105c860:	out    dx,eax
 105c861:	cmp    eax,0x80003
 105c866:	add    BYTE PTR [rax],al
 105c868:	add    edi,DWORD PTR [rsi]
 105c86a:	add    eax,DWORD PTR [rax]
 105c86c:	or     DWORD PTR [rax],eax
 105c86e:	add    BYTE PTR [rax],al
 105c870:	adc    BYTE PTR [rsi],bh
 105c872:	add    eax,DWORD PTR [rax]
 105c874:	or     BYTE PTR [rax],al
 105c876:	add    BYTE PTR [rax],al
 105c878:	sbb    edi,DWORD PTR [rsi]
 105c87a:	add    eax,DWORD PTR [rax]
 105c87c:	add    BYTE PTR [rax],al
 105c87e:	add    BYTE PTR [rax],al
 105c880:	sub    edi,DWORD PTR [rsi]
 105c882:	add    eax,DWORD PTR [rax]
 105c884:	or     al,BYTE PTR [rax]
 105c886:	add    BYTE PTR [rax],al
 105c888:	rex
 105c889:	add    eax,DWORD PTR ds:[rax]
 105c88c:	add    BYTE PTR [rax],al
 105c88e:	add    BYTE PTR [rax],al
 105c890:	(bad)  
 105c891:	add    eax,DWORD PTR ds:[rax]
 105c894:	or     eax,DWORD PTR [rax]
 105c896:	add    BYTE PTR [rax],al
 105c898:	jbe    0x105c8d8
 105c89a:	add    eax,DWORD PTR [rax]
 105c89c:	or     al,0x0
 105c89e:	add    BYTE PTR [rax],al
 105c8a0:	cmp    DWORD PTR [rsi],0x3
 105c8a3:	add    BYTE PTR [rbx],cl
 105c8a5:	add    BYTE PTR [rax],al
 105c8a7:	add    BYTE PTR [rsi+0x33e],cl
 105c8ad:	add    BYTE PTR [rax],al
 105c8af:	add    BYTE PTR [rcx+0xd00033e],ah
 105c8b5:	add    BYTE PTR [rax],al
 105c8b7:	add    BYTE PTR [rsi+0x33e],dh
 105c8bd:	add    BYTE PTR [rax],al
 105c8bf:	add    al,bl
 105c8c1:	add    eax,DWORD PTR ds:[rax]
 105c8c4:	(bad)  
 105c8c5:	add    BYTE PTR [rax],al
 105c8c7:	add    ah,ch
 105c8c9:	add    eax,DWORD PTR ds:[rax]
 105c8cc:	sldt   WORD PTR [rax]
 105c8cf:	add    cl,bh
 105c8d1:	add    eax,DWORD PTR ds:[rax]
 105c8d4:	(bad)  
 105c8d5:	add    BYTE PTR [rax],al
 105c8d7:	add    BYTE PTR [rdi+rdi*1],al
 105c8da:	add    eax,DWORD PTR [rax]
 105c8dc:	add    BYTE PTR [rax],al
 105c8de:	add    BYTE PTR [rax],al
 105c8e0:	add    DWORD PTR [rsi],eax
 105c8e2:	add    al,BYTE PTR [rax]
 105c8e4:	(bad)  
 105c8e5:	xor    al,BYTE PTR [rdx]
 105c8e7:	push   rax
 105c8e8:	adc    DWORD PTR [rip+0x342d000a],ebp        # 0x3532c8f8
 105c8ee:	sbb    DWORD PTR [rax],eax
 105c8f0:	and    edx,edx
 105c8f2:	sbb    dh,al
 105c8f4:	sbb    al,ah
 105c8f6:	(bad)  
 105c8f7:	rcl    BYTE PTR [rax+rax*8],1
 105c8fa:	adc    dh,BYTE PTR [rax+0x11]
 105c8fd:	(bad)  
 105c8fe:	adc    BYTE PTR [rax-0x6c],dl
 105c901:	inc    BYTE PTR [rbx]
 105c903:	add    BYTE PTR [rax+0x6e],ah
 105c906:	add    BYTE PTR [rax],al
 105c908:	(bad)  
 105c909:	(bad)  
 105c90a:	(bad)  
 105c90b:	jmp    rax
 105c90d:	sti    
 105c90e:	add    al,0x0
 105c910:	add    BYTE PTR [rax],al
 105c912:	add    BYTE PTR [rax],al
 105c914:	sar    bl,0x4
 105c917:	add    BYTE PTR [rcx],al
 105c919:	add    BYTE PTR [rax],al
 105c91b:	add    al,dl
 105c91d:	sti    
 105c91e:	add    al,0x0
 105c920:	add    al,BYTE PTR [rax]
 105c922:	add    BYTE PTR [rax],al
 105c924:	adc    ah,bh
 105c926:	add    al,0x0
 105c928:	add    eax,DWORD PTR [rax]
 105c92a:	add    BYTE PTR [rax],al
 105c92c:	and    ah,bh
 105c92e:	add    al,0x0
 105c930:	add    eax,DWORD PTR [rax]
 105c932:	add    BYTE PTR [rax],al
 105c934:	xor    ah,bh
 105c936:	add    al,0x0
 105c938:	add    eax,DWORD PTR [rax]
 105c93a:	add    BYTE PTR [rax],al
 105c93c:	rex cld 
 105c93e:	add    al,0x0
 105c940:	add    al,BYTE PTR [rax]
 105c942:	add    BYTE PTR [rax],al
 105c944:	push   rax
 105c945:	cld    
 105c946:	add    al,0x0
 105c948:	(bad)  
 105c949:	add    BYTE PTR [rax],al
 105c94b:	add    BYTE PTR [rax-0x4],ah
 105c94e:	add    al,0x0
 105c950:	(bad)  
 105c951:	add    BYTE PTR [rax],al
 105c953:	add    BYTE PTR [rax-0x4],dh
 105c956:	add    al,0x0
 105c958:	(bad)  
 105c959:	add    BYTE PTR [rax],al
 105c95b:	add    BYTE PTR [rax+0x200004fc],al
 105c961:	(bad)  
 105c962:	add    eax,DWORD PTR [rax]
 105c964:	(bad)  
 105c965:	(bad)  
 105c966:	(bad)  
 105c967:	call   FWORD PTR [rcx+0x3f]
 105c96a:	add    eax,DWORD PTR [rax]
 105c96c:	add    BYTE PTR [rax],al
 105c96e:	add    BYTE PTR [rax],al
 105c970:	(bad)  
 105c971:	(bad)  
 105c972:	add    eax,DWORD PTR [rax]
 105c974:	add    DWORD PTR [rax],eax
 105c976:	add    BYTE PTR [rax],al
 105c978:	data16 (bad) 
 105c97a:	add    eax,DWORD PTR [rax]
 105c97c:	add    al,BYTE PTR [rax]
 105c97e:	add    BYTE PTR [rax],al
 105c980:	sti    
 105c981:	(bad)  
 105c982:	add    eax,DWORD PTR [rax]
 105c984:	add    eax,DWORD PTR [rax]
 105c986:	add    BYTE PTR [rax],al
 105c988:	or     al,BYTE PTR [rax+0x3]
 105c98b:	add    BYTE PTR [rax+rax*1],al
 105c98e:	add    BYTE PTR [rax],al
 105c990:	(bad)  
 105c991:	rex add eax,DWORD PTR [rax]
 105c994:	add    eax,DWORD PTR [rax]
 105c996:	add    BYTE PTR [rax],al
 105c998:	lahf   
 105c999:	rex add eax,DWORD PTR [rax]
 105c99c:	add    eax,0xc5000000
 105c9a1:	rex add eax,DWORD PTR [rax]
 105c9a4:	add    eax,DWORD PTR [rax]
 105c9a6:	add    BYTE PTR [rax],al
 105c9a8:	and    eax,0x6000341
 105c9ad:	add    BYTE PTR [rax],al
 105c9af:	add    BYTE PTR [rax],ch
 105c9b1:	add    eax,DWORD PTR [r8]
 105c9b4:	add    eax,DWORD PTR [rax]
 105c9b6:	add    BYTE PTR [rax],al
 105c9b8:	cmp    eax,0x2000341
 105c9bd:	add    BYTE PTR [rax],al
 105c9bf:	add    ch,bl
 105c9c1:	add    eax,DWORD PTR [r8]
 105c9c4:	(bad)  
 105c9c5:	add    BYTE PTR [rax],al
 105c9c7:	add    ah,ch
 105c9c9:	add    eax,DWORD PTR [r8]
 105c9cc:	or     BYTE PTR [rax],al
 105c9ce:	add    BYTE PTR [rax],al
 105c9d0:	or     DWORD PTR [rdx+0x3],eax
 105c9d3:	add    BYTE PTR [rdi],al
 105c9d5:	add    BYTE PTR [rax],al
 105c9d7:	add    BYTE PTR [rcx+0x9000342],al
 105c9dd:	add    BYTE PTR [rax],al
 105c9df:	add    BYTE PTR [rdi+0x7000342],ah
 105c9e5:	add    BYTE PTR [rax],al
 105c9e7:	add    BYTE PTR [rbx],al
 105c9e9:	rex.XB add eax,DWORD PTR [r8]
 105c9ec:	or     al,BYTE PTR [rax]
 105c9ee:	add    BYTE PTR [rax],al
 105c9f0:	(bad)  
 105c9f1:	rex.XB add eax,DWORD PTR [r8]
 105c9f4:	(bad)  
 105c9f5:	add    BYTE PTR [rax],al
 105c9f7:	add    BYTE PTR [rsi],dl
 105c9f9:	rex.XB add eax,DWORD PTR [r8]
 105c9fc:	add    al,BYTE PTR [rax]
 105c9fe:	add    BYTE PTR [rax],al
 105ca00:	and    DWORD PTR [rbx+0x3],eax
 105ca03:	add    BYTE PTR [rcx],al
 105ca05:	add    BYTE PTR [rax],al
 105ca07:	add    BYTE PTR [rax],bh
 105ca09:	rex.XB add eax,DWORD PTR [r8]
 105ca0c:	add    BYTE PTR [rax],al
 105ca0e:	add    BYTE PTR [rax],al
 105ca10:	add    DWORD PTR [rsi],eax
 105ca12:	add    al,BYTE PTR [rax]
 105ca14:	(bad)  
 105ca15:	xor    al,BYTE PTR [rdx]
 105ca17:	push   rax
 105ca18:	adc    DWORD PTR [rbx],esp
 105ca1a:	or     al,BYTE PTR [rax]
 105ca1c:	and    esi,DWORD PTR [rdx+rdx*1+0x0]
 105ca20:	(bad)  
 105ca21:	adc    DWORD PTR fs:[rax],eax
 105ca24:	sbb    esi,DWORD PTR [rax+rdx*1]
 105ca27:	add    BYTE PTR [rdi],cl
 105ca29:	mov    dl,0x8
 105ca2b:	lock (bad) 
 105ca2d:	loopne 0x105ca33
 105ca2f:	push   rax
 105ca30:	xchg   esp,eax
 105ca31:	inc    BYTE PTR [rbx]
 105ca33:	add    BYTE PTR [rax-0xffff92],cl
 105ca39:	(bad)  
 105ca3a:	(bad)  
 105ca3b:	jmp    QWORD PTR [rax+0x4fc]
 105ca41:	add    BYTE PTR [rax],al
 105ca43:	add    BYTE PTR [rax+0x10004fc],dh
 105ca49:	add    BYTE PTR [rax],al
 105ca4b:	add    al,al
 105ca4d:	cld    
 105ca4e:	add    al,0x0
 105ca50:	add    al,BYTE PTR [rax]
 105ca52:	add    BYTE PTR [rax],al
 105ca54:	sar    ah,1
 105ca56:	add    al,0x0
 105ca58:	add    al,BYTE PTR [rax]
 105ca5a:	add    BYTE PTR [rax],al
 105ca5c:	loopne 0x105ca5a
 105ca5e:	add    al,0x0
 105ca60:	add    BYTE PTR [rbx+0x3],0x0
 105ca64:	(bad)  
 105ca65:	(bad)  
 105ca66:	(bad)  
 105ca67:	push   QWORD PTR [rax+0x343]
 105ca6d:	add    BYTE PTR [rax],al
 105ca6f:	add    BYTE PTR [rbx+rax*2+0x10003],dh
 105ca76:	add    BYTE PTR [rax],al
 105ca78:	(bad)  
 105ca79:	add    r8d,DWORD PTR [rax]
 105ca7c:	add    al,BYTE PTR [rax]
 105ca7e:	add    BYTE PTR [rax],al
 105ca80:	add    r8d,DWORD PTR ds:[rax]
 105ca84:	add    eax,DWORD PTR [rax]
 105ca86:	add    BYTE PTR [rax],al
 105ca88:	pop    rbx
 105ca89:	add    r8d,DWORD PTR [rax]
 105ca8c:	add    al,BYTE PTR [rax]
 105ca8e:	add    BYTE PTR [rax],al
 105ca90:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 105ca91:	add    r8d,DWORD PTR [rax]
 105ca94:	add    al,0x0
 105ca96:	add    BYTE PTR [rax],al
 105ca98:	stos   BYTE PTR es:[rdi],al
 105ca99:	add    r8d,DWORD PTR [rax]
 105ca9c:	add    al,BYTE PTR [rax]
 105ca9e:	add    BYTE PTR [rax],al
 105caa0:	mov    edx,0x1000344
 105caa5:	add    BYTE PTR [rax],al
 105caa7:	add    bh,al
 105caa9:	add    r8d,DWORD PTR [rax]
 105caac:	add    BYTE PTR [rax],al
 105caae:	add    BYTE PTR [rax],al
 105cab0:	fiadd  DWORD PTR [rbx+rax*1+0x0]
 105cab4:	(bad)  
 105cab5:	(bad)  
 105cab6:	(bad)  
 105cab7:	inc    DWORD PTR [rcx]
 105cab9:	(bad)  
 105caba:	add    al,BYTE PTR [rax]
 105cabc:	(bad)  
 105cabd:	xor    al,BYTE PTR [rdx]
 105cabf:	xor    BYTE PTR [rcx],al
 105cac1:	(bad)  
 105cac2:	add    al,BYTE PTR [rax]
 105cac4:	(bad)  
 105cac5:	xor    al,BYTE PTR [rdx]
 105cac7:	xor    BYTE PTR [rcx],bl
 105cac9:	lar    eax,WORD PTR [rax]
 105cacc:	(bad)  
 105cacd:	push   rdx
 105cace:	add    dh,BYTE PTR [rax]
 105cad0:	xchg   esp,eax
 105cad1:	inc    BYTE PTR [rbx]
 105cad3:	add    BYTE PTR [rax-0xffff92],dh
 105cad9:	(bad)  
 105cada:	(bad)  
 105cadb:	inc    DWORD PTR [rax]
 105cadd:	add    BYTE PTR [rax],al
 105cadf:	add    bh,bh
 105cae1:	(bad)  
 105cae2:	(bad)  
 105cae3:	inc    DWORD PTR [rax]
	...
 105caed:	add    BYTE PTR [rax],al
 105caef:	add    BYTE PTR [rcx],al
 105caf1:	add    BYTE PTR [rax],al
 105caf3:	add    BYTE PTR [rcx],al
 105caf5:	add    BYTE PTR [rax],al
 105caf7:	add    ah,bh
 105caf9:	retf   0x5
	...
 105cb08:	shl    dh,0x4
 105cb0b:	add    BYTE PTR [rax],bh
 105cb0d:	add    BYTE PTR [rax],al
 105cb0f:	add    BYTE PTR [rax-0xfffcbb],ah
 105cb15:	(bad)  
 105cb16:	(bad)  
 105cb17:	push   QWORD PTR [rdx+0x345]
 105cb1d:	add    BYTE PTR [rax],al
 105cb1f:	add    BYTE PTR [rip+0xffffffffff000346],ah        # 0x5ce6b
 105cb25:	(bad)  
 105cb26:	(bad)  
 105cb27:	jmp    QWORD PTR [rdi]
 105cb29:	rex.RX add r8d,DWORD PTR [rax]
 105cb2c:	add    BYTE PTR [rax],al
 105cb2e:	add    BYTE PTR [rax],al
 105cb30:	sbb    DWORD PTR [rdx],ecx
 105cb32:	add    al,BYTE PTR [rax]
 105cb34:	or     dh,BYTE PTR [rdx]
 105cb36:	(bad)  
 105cb37:	push   rax
 105cb38:	xchg   esp,eax
 105cb39:	inc    BYTE PTR [rbx]
 105cb3b:	add    BYTE PTR [rax+0x1900006e],dh
 105cb41:	(bad)  
 105cb42:	add    eax,0x2c340d00
 105cb47:	add    BYTE PTR [rip+0x6002a01],cl        # 0x705f54e
 105cb4d:	jo     0x105cb4f
 105cb4f:	add    BYTE PTR [rax+0x2],cl
 105cb52:	add    al,0x0
 105cb54:	rex add DWORD PTR [rax],eax
 105cb57:	add    BYTE PTR [rcx],bl
 105cb59:	rex.WX or rax,0x15643800
 105cb5f:	add    al,0x30
 105cb61:	push   rsp
 105cb62:	adc    al,0x4
 105cb64:	sub    BYTE PTR [rdx+rdx*1],dh
 105cb67:	add    al,0x17
 105cb69:	add    DWORD PTR [rsp+rax*1],ecx
 105cb6c:	or     dh,al
 105cb6e:	or     al,ah
 105cb70:	(bad)  
 105cb71:	rol    BYTE PTR [rax+rax*8],1
 105cb74:	add    dh,BYTE PTR [rax+0x0]
 105cb77:	add    BYTE PTR [rax-0x27fffc02],ah
 105cb7d:	outs   dx,BYTE PTR ds:[rsi]
 105cb7e:	add    BYTE PTR [rax],al
 105cb80:	push   rdx
 105cb81:	and    BYTE PTR [rax],al
 105cb83:	add    bh,bh
 105cb85:	(bad)  
 105cb86:	(bad)  
 105cb87:	inc    DWORD PTR [rax-0x2ffffb09]
 105cb8d:	rex.RX add r8d,DWORD PTR [rax]
 105cb90:	(bad)  
 105cb91:	(bad)  
 105cb92:	(bad)  
 105cb93:	jmp    FWORD PTR [rdx]
 105cb95:	rex.RXB add r8d,DWORD PTR [r8]
 105cb98:	add    BYTE PTR [rax],al
 105cb9a:	add    BYTE PTR [rax],al
 105cb9c:	jnp    0x105cbe6
 105cb9e:	add    eax,DWORD PTR [rax]
 105cba0:	(bad)  
 105cba1:	(bad)  
 105cba2:	(bad)  
 105cba3:	call   FWORD PTR [rcx]
 105cba5:	cmp    cl,BYTE PTR [rip+0x5d642800]        # 0x5e69f3ab
 105cbab:	add    BYTE PTR [rsp+rdx*2],ah
 105cbae:	pop    rsp
 105cbaf:	add    BYTE PTR [rax],ah
 105cbb1:	xor    al,0x5a
 105cbb3:	add    BYTE PTR [rbx],dl
 105cbb5:	add    DWORD PTR [rax+rax*1+0xc],edx
 105cbb9:	lock or ah,al
 105cbbc:	or     al,dl
 105cbbe:	(bad)  
 105cbbf:	rol    BYTE PTR [rax+rsi*2],0x0
 105cbc3:	add    BYTE PTR [rax+0x3fe],ah
 105cbc9:	outs   dx,DWORD PTR ds:[rsi]
 105cbca:	add    BYTE PTR [rax],al
 105cbcc:	xchg   edx,eax
 105cbcd:	add    al,BYTE PTR [rax]
 105cbcf:	add    bh,bh
 105cbd1:	(bad)  
 105cbd2:	(bad)  
 105cbd3:	jmp    QWORD PTR [rax+0x4f7]
 105cbd9:	add    BYTE PTR [rax],al
 105cbdb:	add    BYTE PTR [rax-0x2ffffb09],dh
 105cbe1:	add    rax,QWORD PTR [rax]
 105cbe4:	(bad)  
 105cbe5:	(bad)  
 105cbe6:	(bad)  
 105cbe7:	call   FWORD PTR [rax]
 105cbe9:	add    rax,QWORD PTR [r8]
 105cbec:	add    BYTE PTR [rax],al
 105cbee:	add    BYTE PTR [rax],al
 105cbf0:	xchg   ebp,eax
 105cbf1:	add    rax,QWORD PTR [r8]
 105cbf4:	add    DWORD PTR [rax],eax
 105cbf6:	add    BYTE PTR [rax],al
 105cbf8:	mov    ecx,DWORD PTR [rdx+0x3]
 105cbfb:	add    BYTE PTR [rax],al
 105cbfd:	add    BYTE PTR [rax],al
 105cbff:	add    BYTE PTR [rbx-0xfffcb6],ah
 105cc05:	(bad)  
 105cc06:	(bad)  
 105cc07:	inc    DWORD PTR [rcx]
 105cc09:	or     al,BYTE PTR [rax+rax*1]
 105cc0c:	or     dh,BYTE PTR [rdx+rcx*1]
 105cc0f:	add    BYTE PTR [rdx],cl
 105cc11:	jb     0x105cc19
 105cc13:	jo     0x105cc2e
 105cc15:	sbb    eax,DWORD PTR [rbx]
 105cc17:	add    BYTE PTR [rcx],cl
 105cc19:	add    DWORD PTR [rdx],ebp
 105cc1b:	add    BYTE PTR [rdx],al
 105cc1d:	xor    BYTE PTR [rax],al
 105cc1f:	add    BYTE PTR [rax+0x2],cl
 105cc22:	add    al,0x0
 105cc24:	rex add DWORD PTR [rax],eax
 105cc27:	add    BYTE PTR [rcx],dl
 105cc29:	(bad)  
 105cc2a:	(bad)  
 105cc2b:	add    BYTE PTR [rsi],dl
 105cc2d:	xor    al,0x10
 105cc2f:	add    BYTE PTR [rdx],cl
 105cc31:	mov    dl,0x6
 105cc33:	jo     0x105cc3a
 105cc35:	(bad)  
 105cc36:	add    al,0x50
 105cc38:	xchg   esp,eax
 105cc39:	inc    BYTE PTR [rbx]
 105cc3b:	add    BYTE PTR [rax],ch
 105cc3d:	outs   dx,DWORD PTR ds:[rsi]
 105cc3e:	add    BYTE PTR [rax],al
 105cc40:	(bad)  
 105cc41:	(bad)  
 105cc42:	(bad)  
 105cc43:	jmp    QWORD PTR [rax+0x400004fb]
 105cc49:	add    r8,QWORD PTR [rax]
 105cc4c:	(bad)  
 105cc4d:	(bad)  
 105cc4e:	(bad)  
 105cc4f:	jmp    QWORD PTR [rbx+0x4c]
 105cc52:	add    eax,DWORD PTR [rax]
 105cc54:	add    BYTE PTR [rax],al
 105cc56:	add    BYTE PTR [rax],al
 105cc58:	test   DWORD PTR [rbx+rax*1+0x0],ecx
 105cc5c:	(bad)  
 105cc5d:	(bad)  
 105cc5e:	(bad)  
 105cc5f:	dec    DWORD PTR [rdx+0x34c]
 105cc65:	add    BYTE PTR [rax],al
 105cc67:	add    BYTE PTR [rsi],al
 105cc69:	add    r8,QWORD PTR [r8]
 105cc6c:	(bad)  
 105cc6d:	(bad)  
 105cc6e:	(bad)  
 105cc6f:	call   FWORD PTR [rcx]
 105cc71:	cmp    ecx,DWORD PTR [rip+0x59742900]        # 0x5a79f577
 105cc77:	add    BYTE PTR [rip+0x21005864],ah        # 0x220624e1
 105cc7d:	push   rsp
 105cc7e:	push   rdi
 105cc7f:	add    BYTE PTR [rip+0x10005634],bl        # 0x110622b9
 105cc85:	add    DWORD PTR [rdx+0x0],edx
 105cc88:	or     eax,esi
 105cc8a:	(bad)  
 105cc8b:	loopne 0x105cc92
 105cc8d:	rol    BYTE PTR [rax],0x0
 105cc90:	movabs al,ds:0x8200006f500003fe
 105cc99:	add    al,BYTE PTR [rax]
 105cc9b:	add    bh,bh
 105cc9d:	(bad)  
 105cc9e:	(bad)  
 105cc9f:	jmp    QWORD PTR [rax-0x3]
 105cca2:	add    al,0x0
 105cca4:	add    BYTE PTR [rax],al
 105cca6:	add    BYTE PTR [rax],al
 105cca8:	jo     0x105cca7
 105ccaa:	add    al,0x0
 105ccac:	rex
 105ccad:	add    r8,QWORD PTR [r8]
 105ccb0:	(bad)  
 105ccb1:	(bad)  
 105ccb2:	(bad)  
 105ccb3:	inc    DWORD PTR [rbp+0x34d]
 105ccb9:	add    BYTE PTR [rax],al
 105ccbb:	add    BYTE PTR [rdx-0xfffcb3],ah
 105ccc1:	(bad)  
 105ccc2:	(bad)  
 105ccc3:	jmp    QWORD PTR [rdi+0x34d]
 105ccc9:	add    BYTE PTR [rax],al
 105cccb:	add    al,bh
 105cccd:	add    r8,QWORD PTR [r8]
 105ccd0:	add    DWORD PTR [rax],eax
 105ccd2:	add    BYTE PTR [rax],al
 105ccd4:	cmp    ecx,DWORD PTR [rsi+0x3]
 105ccd7:	add    BYTE PTR [rax],al
 105ccd9:	add    BYTE PTR [rax],al
 105ccdb:	add    BYTE PTR [rbp+0x4e],cl
 105ccde:	add    eax,DWORD PTR [rax]
 105cce0:	(bad)  
 105cce1:	(bad)  
 105cce2:	(bad)  
 105cce3:	call   FWORD PTR [rcx]
 105cce5:	sbb    eax,DWORD PTR [rbx]
 105cce7:	add    BYTE PTR [rcx],cl
 105cce9:	add    DWORD PTR [rdx],ebp
 105cceb:	add    BYTE PTR [rdx],al
 105cced:	xor    BYTE PTR [rax],al
 105ccef:	add    BYTE PTR [rax+0x2],cl
 105ccf2:	add    al,0x0
 105ccf4:	rex add DWORD PTR [rax],eax
 105ccf7:	add    BYTE PTR [rcx],bl
 105ccf9:	rex.X or DWORD PTR [rax],eax
 105ccfc:	xor    BYTE PTR [rdi+rcx*1+0x4],ah
 105cd00:	sub    BYTE PTR [rsi+rcx*1+0x4],dl
 105cd04:	and    BYTE PTR [rcx*1+0xa010f04],dh
 105cd0b:	add    al,0x2
 105cd0d:	jo     0x105cd0f
 105cd0f:	add    BYTE PTR [rax+0x780003fe],ah
 105cd15:	outs   dx,DWORD PTR ds:[rsi]
 105cd16:	add    BYTE PTR [rax],al
 105cd18:	rex.X and BYTE PTR [rax],al
 105cd1b:	add    bh,bh
 105cd1d:	(bad)  
 105cd1e:	(bad)  
 105cd1f:	call   rax
 105cd21:	clc    
 105cd22:	add    al,0x0
 105cd24:	xor    BYTE PTR [rdi+0x3],cl
 105cd27:	add    bh,bh
 105cd29:	(bad)  
 105cd2a:	(bad)  
 105cd2b:	inc    DWORD PTR [rax+0x34f]
 105cd31:	add    BYTE PTR [rax],al
 105cd33:	add    BYTE PTR [rsi],bl
 105cd35:	push   rax
 105cd36:	add    eax,DWORD PTR [rax]
 105cd38:	(bad)  
 105cd39:	(bad)  
 105cd3a:	(bad)  
 105cd3b:	call   FWORD PTR [rcx]
 105cd3d:	or     eax,DWORD PTR ss:[rax]
 105cd40:	and    al,0x64
 105cd42:	pop    rcx
 105cd43:	add    BYTE PTR [rax],ah
 105cd45:	push   rsp
 105cd46:	pop    rax
 105cd47:	add    BYTE PTR [rsp+rsi*1],bl
 105cd4a:	push   rdi
 105cd4b:	add    BYTE PTR [rdi],cl
 105cd4d:	add    DWORD PTR [rdx+0x0],edx
 105cd50:	or     al,dh
 105cd52:	(bad)  
 105cd53:	loopne 0x105cd59
 105cd55:	jo     0x105cd57
 105cd57:	add    BYTE PTR [rax-0x5ffffc02],ah
 105cd5d:	outs   dx,DWORD PTR ds:[rsi]
 105cd5e:	add    BYTE PTR [rax],al
 105cd60:	(bad)  
 105cd61:	add    al,BYTE PTR [rax]
 105cd63:	add    bh,bh
 105cd65:	(bad)  
 105cd66:	(bad)  
 105cd67:	push   rax
 105cd69:	clc    
 105cd6a:	add    al,0x0
 105cd6c:	add    BYTE PTR [rax],al
 105cd6e:	add    BYTE PTR [rax],al
 105cd70:	add    cl,bh
 105cd72:	add    al,0x0
 105cd74:	jo     0x105cdc6
 105cd76:	add    eax,DWORD PTR [rax]
 105cd78:	(bad)  
 105cd79:	(bad)  
 105cd7a:	(bad)  
 105cd7b:	push   QWORD PTR [rdx+0x350]
 105cd81:	add    BYTE PTR [rax],al
 105cd83:	add    BYTE PTR [rax],dh
 105cd85:	push   rcx
 105cd86:	add    eax,DWORD PTR [rax]
 105cd88:	add    DWORD PTR [rax],eax
 105cd8a:	add    BYTE PTR [rax],al
 105cd8c:	movabs ds:0xba00000000000351,al
 105cd95:	push   rcx
 105cd96:	add    eax,DWORD PTR [rax]
 105cd98:	(bad)  
 105cd99:	(bad)  
 105cd9a:	(bad)  
 105cd9b:	call   FWORD PTR [rcx]
 105cd9d:	sub    eax,0x341f0008
 105cda2:	(bad)  
 105cda3:	add    BYTE PTR [rdi],cl
 105cda5:	ror    BYTE PTR [rax],cl
 105cda7:	lock (bad) 
 105cda9:	loopne 0x105cdaf
 105cdab:	jo     0x105cdb0
 105cdad:	(bad)  
 105cdae:	add    dl,BYTE PTR [rax-0x60]
 105cdb1:	inc    BYTE PTR [rbx]
 105cdb3:	add    al,cl
 105cdb5:	outs   dx,DWORD PTR ds:[rsi]
 105cdb6:	add    BYTE PTR [rax],al
 105cdb8:	push   0x0
 105cdba:	add    BYTE PTR [rax],al
 105cdbc:	(bad)  
 105cdbd:	(bad)  
 105cdbe:	(bad)  
 105cdbf:	jmp    QWORD PTR [rax]
 105cdc1:	stc    
 105cdc2:	add    al,0x0
 105cdc4:	adc    BYTE PTR [rdx+0x3],dl
 105cdc7:	add    bh,bh
 105cdc9:	(bad)  
 105cdca:	(bad)  
 105cdcb:	inc    DWORD PTR [rax+0x52]
 105cdce:	add    eax,DWORD PTR [rax]
 105cdd0:	add    BYTE PTR [rax],al
 105cdd2:	add    BYTE PTR [rax],al
 105cdd4:	add    DWORD PTR [rsi],eax
 105cdd6:	add    al,BYTE PTR [rax]
 105cdd8:	(bad)  
 105cdd9:	xor    al,BYTE PTR [rdx]
 105cddb:	push   rax
 105cddc:	adc    DWORD PTR [rdx],ebx
 105cdde:	(bad)  
 105cddf:	add    BYTE PTR [rdx],bl
 105cde1:	xor    al,0xb
 105cde3:	add    BYTE PTR [rdx+rdx*2],cl
 105cde6:	or     BYTE PTR [rax+0x7],dh
 105cde9:	(bad)  
 105cdea:	(bad)  
 105cdeb:	push   rax
 105cdec:	xchg   esp,eax
 105cded:	inc    BYTE PTR [rbx]
 105cdef:	add    al,dh
 105cdf1:	outs   dx,DWORD PTR ds:[rsi]
 105cdf2:	add    BYTE PTR [rax],al
 105cdf4:	(bad)  
 105cdf5:	(bad)  
 105cdf6:	(bad)  
 105cdf7:	push   QWORD PTR [rax]
 105cdf9:	add    eax,DWORD PTR [rip+0x0]        # 0x105cdff
 105cdff:	add    BYTE PTR [rax],dl
 105ce01:	add    eax,DWORD PTR [rip+0x100]        # 0x105cf07
 105ce07:	add    BYTE PTR [rax],ah
 105ce09:	add    eax,DWORD PTR [rip+0x100]        # 0x105cf0f
 105ce0f:	add    BYTE PTR [rax+0x3],ah
 105ce12:	add    eax,0x353c000
 105ce17:	add    bh,bh
 105ce19:	(bad)  
 105ce1a:	(bad)  
 105ce1b:	dec    DWORD PTR [rsp+rdx*2]
 105ce1e:	add    eax,DWORD PTR [rax]
 105ce20:	add    DWORD PTR [rax],eax
 105ce22:	add    BYTE PTR [rax],al
 105ce24:	rex.WB push r12
 105ce26:	add    eax,DWORD PTR [rax]
 105ce28:	add    al,BYTE PTR [rax]
 105ce2a:	add    BYTE PTR [rax],al
 105ce2c:	pop    rax
 105ce2d:	push   rsp
 105ce2e:	add    eax,DWORD PTR [rax]
 105ce30:	add    DWORD PTR [rax],eax
 105ce32:	add    BYTE PTR [rax],al
 105ce34:	lea    edx,[rbx+rax*1+0x0]
 105ce38:	add    BYTE PTR [rax],al
 105ce3a:	add    BYTE PTR [rax],al
 105ce3c:	(bad)  
 105ce3d:	push   rsp
 105ce3e:	add    eax,DWORD PTR [rax]
 105ce40:	add    DWORD PTR [rax],eax
 105ce42:	add    BYTE PTR [rax],al
 105ce44:	ret    0x354
 105ce47:	add    BYTE PTR [rbx],al
 105ce49:	add    BYTE PTR [rax],al
 105ce4b:	add    cl,dl
 105ce4d:	push   rsp
 105ce4e:	add    eax,DWORD PTR [rax]
 105ce50:	add    DWORD PTR [rax],eax
 105ce52:	add    BYTE PTR [rax],al
 105ce54:	repnz push rsp
 105ce56:	add    eax,DWORD PTR [rax]
 105ce58:	add    BYTE PTR [rax],al
 105ce5a:	add    BYTE PTR [rax],al
 105ce5c:	add    DWORD PTR [rsi],eax
 105ce5e:	add    al,BYTE PTR [rax]
 105ce60:	(bad)  
 105ce61:	xor    al,BYTE PTR [rdx]
 105ce63:	push   rax
 105ce64:	adc    DWORD PTR [rax],esp
 105ce66:	or     BYTE PTR [rax],al
 105ce68:	and    BYTE PTR [rsi+rcx*1+0x0],dl
 105ce6c:	sbb    esi,DWORD PTR [rcx*1+0x9720d00]
 105ce73:	loopne 0x105ce7c
 105ce75:	jo     0x105ce7d
 105ce77:	(bad)  
 105ce78:	xchg   esp,eax
 105ce79:	inc    BYTE PTR [rbx]
 105ce7b:	add    BYTE PTR [rax],bl
 105ce7d:	jo     0x105ce7f
 105ce7f:	add    bh,bh
 105ce81:	(bad)  
 105ce82:	(bad)  
 105ce83:	call   QWORD PTR [rax+0x502]
 105ce89:	add    BYTE PTR [rax],al
 105ce8b:	add    al,al
 105ce8d:	add    al,BYTE PTR [rip+0x100]        # 0x105cf93
 105ce93:	add    al,dl
 105ce95:	add    al,BYTE PTR [rip+0x200]        # 0x105d09b
 105ce9b:	add    al,ah
 105ce9d:	add    al,BYTE PTR [rip+0x200]        # 0x105d0a3
 105cea3:	add    al,dh
 105cea5:	add    al,BYTE PTR [rip+0x3552000]        # 0x45aeeab
 105ceab:	add    bh,bh
 105cead:	(bad)  
 105ceae:	(bad)  
 105ceaf:	inc    DWORD PTR [rcx+0x355]
 105ceb5:	add    BYTE PTR [rax],al
 105ceb7:	add    BYTE PTR [rsi-0xfffcab],cl
 105cebd:	(bad)  
 105cebe:	(bad)  
 105cebf:	call   FWORD PTR [rdx+0x1000355]
 105cec5:	add    BYTE PTR [rax],al
 105cec7:	add    BYTE PTR [rsi+0x2000355],ah
 105cecd:	add    BYTE PTR [rax],al
 105cecf:	add    al,bl
 105ced1:	push   rbp
 105ced2:	add    eax,DWORD PTR [rax]
 105ced4:	add    eax,DWORD PTR [rax]
 105ced6:	add    BYTE PTR [rax],al
 105ced8:	out    0x55,eax
 105ceda:	add    eax,DWORD PTR [rax]
 105cedc:	add    al,BYTE PTR [rax]
 105cede:	add    BYTE PTR [rax],al
 105cee0:	orps   xmm0,XMMWORD PTR [rbx]
 105cee3:	add    BYTE PTR [rcx],al
 105cee5:	add    BYTE PTR [rax],al
 105cee7:	add    BYTE PTR [rbx],bl
 105cee9:	push   rsi
 105ceea:	add    eax,DWORD PTR [rax]
 105ceec:	add    BYTE PTR [rax],al
 105ceee:	add    BYTE PTR [rax],al
 105cef0:	sbb    eax,0x2000356
 105cef5:	add    BYTE PTR [rax],al
 105cef7:	add    BYTE PTR [rsi+rdx*2],ah
 105cefa:	add    eax,DWORD PTR [rax]
 105cefc:	add    al,0x0
 105cefe:	add    BYTE PTR [rax],al
 105cf00:	xor    edx,DWORD PTR [rsi+0x3]
 105cf03:	add    BYTE PTR [rdx],al
 105cf05:	add    BYTE PTR [rax],al
 105cf07:	add    BYTE PTR [rbx+0x56],ah
 105cf0a:	add    eax,DWORD PTR [rax]
 105cf0c:	add    DWORD PTR [rax],eax
 105cf0e:	add    BYTE PTR [rax],al
 105cf10:	outs   dx,DWORD PTR ds:[rsi]
 105cf11:	push   rsi
 105cf12:	add    eax,DWORD PTR [rax]
 105cf14:	add    BYTE PTR [rax],al
 105cf16:	add    BYTE PTR [rax],al
 105cf18:	add    DWORD PTR [rsi],eax
 105cf1a:	add    al,BYTE PTR [rax]
 105cf1c:	(bad)  
 105cf1d:	xor    al,BYTE PTR [rdx]
 105cf1f:	push   rax
 105cf20:	sbb    DWORD PTR [rdx],esi
 105cf22:	or     al,BYTE PTR [rax]
 105cf24:	adc    al,0x1
 105cf26:	cmp    DWORD PTR [rcx],eax
 105cf28:	or     eax,0x9e00bf0
 105cf2d:	rol    BYTE PTR [rdi],1
 105cf2f:	rol    BYTE PTR [rip+0x3600470],0x50        # 0x465d3a6
 105cf36:	add    dh,BYTE PTR [rax]
 105cf38:	movabs al,ds:0xb2000070400003fe
 105cf41:	or     DWORD PTR [rax],eax
 105cf43:	add    bh,bh
 105cf45:	(bad)  
 105cf46:	(bad)  
 105cf47:	push   QWORD PTR [rax-0x5ffffb03]
 105cf4d:	push   rsi
 105cf4e:	add    eax,DWORD PTR [rax]
 105cf50:	(bad)  
 105cf51:	(bad)  
 105cf52:	(bad)  
 105cf53:	call   FWORD PTR [rdx]
 105cf55:	pop    rax
 105cf56:	add    eax,DWORD PTR [rax]
 105cf58:	add    BYTE PTR [rax],al
 105cf5a:	add    BYTE PTR [rax],al
 105cf5c:	js     0x105cfb6
 105cf5e:	add    eax,DWORD PTR [rax]
 105cf60:	(bad)  
 105cf61:	(bad)  
 105cf62:	(bad)  
 105cf63:	inc    DWORD PTR [rcx]
 105cf65:	clts   
 105cf67:	add    BYTE PTR [rdi],cl
 105cf69:	or     BYTE PTR fs:[rax],al
 105cf6c:	sysenter 
 105cf6e:	(bad)  
 105cf6f:	add    BYTE PTR [rdi],cl
 105cf71:	xor    cl,BYTE PTR [rbx]
 105cf73:	jo     0x105cf86
 105cf75:	adc    al,0x4
 105cf77:	add    BYTE PTR [rsp+rsi*1],dl
 105cf7a:	or     al,0x0
 105cf7c:	(bad)  
 105cf7d:	xchg   edx,eax
 105cf7e:	add    dh,BYTE PTR [rax-0x6c]
 105cf81:	inc    BYTE PTR [rbx]
 105cf83:	add    BYTE PTR [rax+0x70],ch
 105cf86:	add    BYTE PTR [rax],al
 105cf88:	(bad)  
 105cf89:	(bad)  
 105cf8a:	(bad)  
 105cf8b:	call   QWORD PTR [rax-0x6ffffb03]
 105cf91:	pop    rcx
 105cf92:	add    eax,DWORD PTR [rax]
 105cf94:	(bad)  
 105cf95:	(bad)  
 105cf96:	(bad)  
 105cf97:	dec    DWORD PTR [rdx]
 105cf99:	pop    rdx
 105cf9a:	add    eax,DWORD PTR [rax]
 105cf9c:	add    BYTE PTR [rax],al
 105cf9e:	add    BYTE PTR [rax],al
 105cfa0:	sub    ebx,DWORD PTR [rdx+0x3]
 105cfa3:	add    bh,bh
 105cfa5:	(bad)  
 105cfa6:	(bad)  
 105cfa7:	inc    DWORD PTR [rcx]
 105cfa9:	clts   
 105cfab:	add    BYTE PTR [rdi],cl
 105cfad:	or     BYTE PTR fs:[rax],al
 105cfb0:	sysenter 
 105cfb2:	(bad)  
 105cfb3:	add    BYTE PTR [rdi],cl
 105cfb5:	xor    cl,BYTE PTR [rbx]
 105cfb7:	jo     0x105cfd2
 105cfb9:	(bad)  
 105cfba:	add    al,0x0
 105cfbc:	or     al,0x1
 105cfbe:	adc    eax,DWORD PTR [rax]
 105cfc0:	add    eax,0x48500470
 105cfc5:	add    al,BYTE PTR [rax+rax*1]
 105cfc8:	add    BYTE PTR [rax],0x0
 105cfcb:	add    BYTE PTR [rcx],ah
 105cfcd:	or     al,0x6
 105cfcf:	add    BYTE PTR [rsp+riz*8],cl
 105cfd2:	adc    al,BYTE PTR [rax]
 105cfd4:	or     BYTE PTR [rcx+rbx*1+0x0],ah
 105cfd8:	add    al,0x34
 105cfda:	sbb    BYTE PTR [rax],al
 105cfdc:	add    BYTE PTR [rbx+0x3],bl
 105cfdf:	add    BYTE PTR [rsi],bl
 105cfe1:	pop    rbx
 105cfe2:	add    eax,DWORD PTR [rax]
 105cfe4:	mov    eax,0x210005cf
 105cfe9:	add    BYTE PTR [rax],al
 105cfeb:	add    BYTE PTR [rax],al
 105cfed:	pop    rbx
 105cfee:	add    eax,DWORD PTR [rax]
 105cff0:	(bad)  
 105cff1:	pop    rbx
 105cff2:	add    eax,DWORD PTR [rax]
 105cff4:	mov    eax,0x190005cf
 105cff9:	(bad)  
 105cffa:	add    al,0x0
 105cffc:	or     al,0x1
 105cffe:	adc    eax,DWORD PTR [rax]
 105d000:	add    eax,0x48500470
 105d005:	add    al,BYTE PTR [rax+rax*1]
 105d008:	add    BYTE PTR [rax],0x0
 105d00b:	add    BYTE PTR [rcx],ah
 105d00d:	or     al,0x6
 105d00f:	add    BYTE PTR [rsp+riz*8],cl
 105d012:	adc    al,BYTE PTR [rax]
 105d014:	or     BYTE PTR [rcx+rbx*1+0x0],ah
 105d018:	add    al,0x34
 105d01a:	sbb    BYTE PTR [rax],al
 105d01c:	sbb    BYTE PTR [rbx+rax*1+0x0],0x9e
 105d021:	pop    rsp
 105d022:	add    eax,DWORD PTR [rax]
 105d024:	clc    
 105d025:	iret   
 105d026:	add    eax,0x2100
 105d02b:	add    BYTE PTR [rax-0x61fffca4],al
 105d031:	pop    rsp
 105d032:	add    eax,DWORD PTR [rax]
 105d034:	clc    
 105d035:	iret   
 105d036:	add    eax,0x52c1900
 105d03b:	add    BYTE PTR [rdx],bl
 105d03d:	xor    al,0x2e
 105d03f:	add    BYTE PTR [rcx],cl
 105d041:	add    DWORD PTR [rax+rax*1],ebp
 105d044:	add    dh,BYTE PTR [rax+0x0]
 105d047:	add    BYTE PTR [rax-0x6ffffc02],ah
 105d04d:	jo     0x105d04f
 105d04f:	add    BYTE PTR [rdx+0x1],dl
 105d052:	add    BYTE PTR [rax],al
 105d054:	(bad)  
 105d055:	(bad)  
 105d056:	(bad)  
 105d057:	push   rax
 105d059:	test   DWORD PTR [rax+rax*1],0x35e10
 105d060:	(bad)  
 105d061:	(bad)  
 105d062:	(bad)  
 105d063:	push   QWORD PTR [rsi+0x5e]
 105d066:	add    eax,DWORD PTR [rax]
 105d068:	add    BYTE PTR [rax],al
 105d06a:	add    BYTE PTR [rax],al
 105d06c:	nop
 105d06d:	pop    rsi
 105d06e:	add    eax,DWORD PTR [rax]
 105d070:	(bad)  
 105d071:	(bad)  
 105d072:	(bad)  
 105d073:	call   QWORD PTR [rbp+0x35e]
 105d079:	add    BYTE PTR [rax],al
 105d07b:	add    BYTE PTR [rbp-0xfffca2],ch
 105d081:	(bad)  
 105d082:	(bad)  
 105d083:	(bad)  
 105d084:	mov    ebp,0x35e
 105d089:	add    BYTE PTR [rax],al
 105d08b:	add    BYTE PTR [rdi],bl
 105d08d:	pop    rdi
 105d08e:	add    eax,DWORD PTR [rax]
 105d090:	(bad)  
 105d091:	(bad)  
 105d092:	(bad)  
 105d093:	call   FWORD PTR [rcx]
 105d095:	and    al,0x3
 105d097:	add    BYTE PTR [rcx],cl
 105d099:	add    DWORD PTR [rax+rax*1],ebp
 105d09c:	add    dh,BYTE PTR [rax]
 105d09e:	add    BYTE PTR [rax],al
 105d0a0:	movabs al,ds:0x52000070b80003fe
 105d0a9:	add    DWORD PTR [rax],eax
 105d0ab:	add    bh,bh
 105d0ad:	(bad)  
 105d0ae:	(bad)  
 105d0af:	push   QWORD PTR [rax+0x2]
 105d0b2:	add    eax,0x35f6000
 105d0b7:	add    bh,bh
 105d0b9:	(bad)  
 105d0ba:	(bad)  
 105d0bb:	(bad)  
 105d0bc:	mov    esi,0x35f
 105d0c1:	add    BYTE PTR [rax],al
 105d0c3:	add    al,bl
 105d0c5:	pop    rdi
 105d0c6:	add    eax,DWORD PTR [rax]
 105d0c8:	(bad)  
 105d0c9:	(bad)  
 105d0ca:	(bad)  
 105d0cb:	(bad)  
 105d0cc:	fstp   QWORD PTR [rdi+0x3]
 105d0cf:	add    BYTE PTR [rax],al
 105d0d1:	add    BYTE PTR [rax],al
 105d0d3:	add    dl,dh
 105d0d5:	pop    rdi
 105d0d6:	add    eax,DWORD PTR [rax]
 105d0d8:	(bad)  
 105d0d9:	(bad)  
 105d0da:	(bad)  
 105d0db:	dec    DWORD PTR [rcx]
 105d0dd:	(bad)  
 105d0de:	add    eax,DWORD PTR [rax]
 105d0e0:	add    BYTE PTR [rax],al
 105d0e2:	add    BYTE PTR [rax],al
 105d0e4:	jbe    0x105d146
 105d0e6:	add    eax,DWORD PTR [rax]
 105d0e8:	(bad)  
 105d0e9:	(bad)  
 105d0ea:	(bad)  
 105d0eb:	call   FWORD PTR [rcx]
 105d0ed:	sub    al,0x5
 105d0ef:	add    BYTE PTR [rdx],bl
 105d0f1:	xor    al,0x2f
 105d0f3:	add    BYTE PTR [rcx],cl
 105d0f5:	add    DWORD PTR [rax+rax*1],ebp
 105d0f8:	add    dh,BYTE PTR [rax+0x0]
 105d0fb:	add    BYTE PTR [rax-0x1ffffc02],ah
 105d101:	jo     0x105d103
 105d103:	add    BYTE PTR [rdx+0x1],dl
 105d106:	add    BYTE PTR [rax],al
 105d108:	(bad)  
 105d109:	(bad)  
 105d10a:	(bad)  
 105d10b:	call   QWORD PTR [rax-0x4ffffb02]
 105d111:	(bad)  
 105d112:	add    eax,DWORD PTR [rax]
 105d114:	(bad)  
 105d115:	(bad)  
 105d116:	(bad)  
 105d117:	call   QWORD PTR [rip+0x361]        # 0x105d47e
 105d11d:	add    BYTE PTR [rax],al
 105d11f:	add    BYTE PTR [rdi],ch
 105d121:	(bad)  
 105d122:	add    eax,DWORD PTR [rax]
 105d124:	(bad)  
 105d125:	(bad)  
 105d126:	(bad)  
 105d127:	push   QWORD PTR [rcx]
 105d129:	(bad)  
 105d12a:	add    eax,DWORD PTR [rax]
 105d12c:	add    BYTE PTR [rax],al
 105d12e:	add    BYTE PTR [rax],al
 105d130:	rex.RX (bad) 
 105d132:	add    eax,DWORD PTR [rax]
 105d134:	(bad)  
 105d135:	(bad)  
 105d136:	(bad)  
 105d137:	call   FWORD PTR [rdx+0x61]
 105d13a:	add    eax,DWORD PTR [rax]
 105d13c:	add    BYTE PTR [rax],al
 105d13e:	add    BYTE PTR [rax],al
 105d140:	jb     0x105d1a3
 105d142:	add    eax,DWORD PTR [rax]
 105d144:	(bad)  
 105d145:	(bad)  
 105d146:	(bad)  
 105d147:	inc    DWORD PTR [rcx]
 105d149:	add    al,0x1
 105d14b:	add    BYTE PTR [rdx+rax*2],al
 105d14e:	add    BYTE PTR [rax],al
 105d150:	add    DWORD PTR [rsi],eax
 105d152:	add    al,BYTE PTR [rax]
 105d154:	(bad)  
 105d155:	xor    al,BYTE PTR [rdx]
 105d157:	xor    BYTE PTR [rcx],dl
 105d159:	sbb    DWORD PTR [rsi],eax
 105d15b:	add    BYTE PTR [rcx],bl
 105d15d:	or     al,BYTE PTR fs:[rax]
 105d160:	adc    al,0x34
 105d162:	or     DWORD PTR [rax],eax
 105d164:	(bad)  
 105d165:	push   rdx
 105d166:	add    dh,BYTE PTR [rax-0x6c]
 105d169:	inc    BYTE PTR [rbx]
 105d16b:	add    BYTE PTR [rax+0x75],cl
 105d16e:	add    BYTE PTR [rax],al
 105d170:	(bad)  
 105d171:	(bad)  
 105d172:	(bad)  
 105d173:	push   QWORD PTR [rax+0x6]
 105d176:	add    eax,0x3623000
 105d17b:	add    bh,bh
 105d17d:	(bad)  
 105d17e:	(bad)  
 105d17f:	jmp    QWORD PTR [rcx+0x62]
 105d182:	add    eax,DWORD PTR [rax]
 105d184:	add    BYTE PTR [rax],al
 105d186:	add    BYTE PTR [rax],al
 105d188:	test   BYTE PTR [rdx+0x3],ah
 105d18b:	add    bh,bh
 105d18d:	(bad)  
 105d18e:	(bad)  
 105d18f:	call   QWORD PTR [rcx]
 105d191:	sbb    DWORD PTR [rsi],eax
 105d193:	add    BYTE PTR [rcx],bl
 105d195:	or     DWORD PTR fs:[rax],eax
 105d198:	adc    al,0x34
 105d19a:	or     BYTE PTR [rax],al
 105d19c:	(bad)  
 105d19d:	push   rdx
 105d19e:	add    dh,BYTE PTR [rax-0x6c]
 105d1a1:	inc    BYTE PTR [rbx]
 105d1a3:	add    BYTE PTR [rax+0x75],dh
 105d1a6:	add    BYTE PTR [rax],al
 105d1a8:	(bad)  
 105d1a9:	(bad)  
 105d1aa:	(bad)  
 105d1ab:	call   QWORD PTR [rax-0x4ffffafa]
 105d1b1:	(bad)  
 105d1b3:	add    bh,bh
 105d1b5:	(bad)  
 105d1b6:	(bad)  
 105d1b7:	jmp    rcx
 105d1b9:	(bad)  
 105d1bb:	add    BYTE PTR [rax],al
 105d1bd:	add    BYTE PTR [rax],al
 105d1bf:	add    BYTE PTR [rax],bl
 105d1c1:	movsxd eax,DWORD PTR [rbx]
 105d1c3:	add    bh,bh
 105d1c5:	(bad)  
 105d1c6:	(bad)  
 105d1c7:	inc    DWORD PTR [rcx]
 105d1c9:	or     al,BYTE PTR [rax+rax*1]
 105d1cc:	or     dh,BYTE PTR [rdi+rax*1]
 105d1cf:	add    BYTE PTR [rdx],cl
 105d1d1:	xor    al,BYTE PTR [rsi]
 105d1d3:	jo     0x105d1e6
 105d1d5:	sbb    BYTE PTR [rax+rax*1],al
 105d1d8:	sbb    BYTE PTR [rbx+rcx*1],dh
 105d1db:	add    BYTE PTR [rdx],cl
 105d1dd:	push   rdx
 105d1de:	(bad)  
 105d1df:	jo     0x105d175
 105d1e1:	inc    BYTE PTR [rbx]
 105d1e3:	add    BYTE PTR [rax-0xffff8b],bl
 105d1e9:	(bad)  
 105d1ea:	(bad)  
 105d1eb:	push   QWORD PTR [rax]
 105d1ed:	adc    BYTE PTR [rip+0x0],al        # 0x105d1f3
 105d1f3:	add    BYTE PTR [rax],ah
 105d1f5:	adc    BYTE PTR [rip+0x363d000],al        # 0x469a1fb
 105d1fb:	add    bh,bh
 105d1fd:	(bad)  
 105d1fe:	(bad)  
 105d1ff:	push   QWORD PTR [rbx]
 105d201:	add    eax,DWORD PTR fs:[rax]
 105d204:	add    DWORD PTR [rax],eax
 105d206:	add    BYTE PTR [rax],al
 105d208:	rex.WX
 105d209:	add    eax,DWORD PTR fs:[rax]
 105d20c:	add    BYTE PTR [rax],al
 105d20e:	add    BYTE PTR [rax],al
 105d210:	add    DWORD PTR [rsi],eax
 105d212:	add    al,BYTE PTR [rax]
 105d214:	(bad)  
 105d215:	xor    al,BYTE PTR [rdx]
 105d217:	push   rax
 105d218:	adc    DWORD PTR [rax],ebx
 105d21a:	add    al,0x0
 105d21c:	sbb    BYTE PTR [rbx+rcx*1],dh
 105d21f:	add    BYTE PTR [rdx],cl
 105d221:	push   rdx
 105d222:	(bad)  
 105d223:	jo     0x105d1b9
 105d225:	inc    BYTE PTR [rbx]
 105d227:	add    al,al
 105d229:	jne    0x105d22b
 105d22b:	add    bh,bh
 105d22d:	(bad)  
 105d22e:	(bad)  
 105d22f:	push   QWORD PTR [rax+0x10]
 105d232:	add    eax,0x0
 105d237:	add    BYTE PTR [rax+0x10],ah
 105d23a:	add    eax,0x3648000
 105d23f:	add    bh,bh
 105d241:	(bad)  
 105d242:	(bad)  
 105d243:	jmp    rbx
 105d245:	add    eax,DWORD PTR fs:[rax]
 105d248:	add    DWORD PTR [rax],eax
 105d24a:	add    BYTE PTR [rax],al
 105d24c:	cli    
 105d24d:	add    eax,DWORD PTR fs:[rax]
 105d250:	add    BYTE PTR [rax],al
 105d252:	add    BYTE PTR [rax],al
 105d254:	add    DWORD PTR [rsi],eax
 105d256:	add    al,BYTE PTR [rax]
 105d258:	(bad)  
 105d259:	xor    al,BYTE PTR [rdx]
 105d25b:	push   rax
 105d25c:	adc    DWORD PTR [rax],ebx
 105d25e:	add    al,0x0
 105d260:	sbb    BYTE PTR [rdx+rcx*1],dh
 105d263:	add    BYTE PTR [rdx],cl
 105d265:	push   rdx
 105d266:	(bad)  
 105d267:	jo     0x105d1fd
 105d269:	inc    BYTE PTR [rbx]
 105d26b:	add    al,ch
 105d26d:	jne    0x105d26f
 105d26f:	add    bh,bh
 105d271:	(bad)  
 105d272:	(bad)  
 105d273:	inc    eax
 105d275:	syscall 
 105d277:	add    BYTE PTR [rax],dh
 105d279:	add    eax,DWORD PTR gs:[rax]
 105d27c:	(bad)  
 105d27d:	(bad)  
 105d27e:	(bad)  
 105d27f:	inc    DWORD PTR [rcx+0x365]
 105d285:	add    BYTE PTR [rax],al
 105d287:	add    BYTE PTR [rcx],al
 105d289:	(bad)  
 105d28a:	add    al,BYTE PTR [rax]
 105d28c:	(bad)  
 105d28d:	xor    al,BYTE PTR [rdx]
 105d28f:	push   rax
 105d290:	adc    DWORD PTR [rax],ebx
 105d292:	add    al,0x0
 105d294:	sbb    BYTE PTR [rdx+rcx*1],dh
 105d297:	add    BYTE PTR [rdx],cl
 105d299:	push   rdx
 105d29a:	(bad)  
 105d29b:	jo     0x105d231
 105d29d:	inc    BYTE PTR [rbx]
 105d29f:	add    BYTE PTR [rax],dl
 105d2a1:	jbe    0x105d2a3
 105d2a3:	add    bh,bh
 105d2a5:	(bad)  
 105d2a6:	(bad)  
 105d2a7:	jmp    QWORD PTR [rax+0xf]
 105d2aa:	add    eax,0x365a000
 105d2af:	add    bh,bh
 105d2b1:	(bad)  
 105d2b2:	(bad)  
 105d2b3:	push   rsp
 105d2b5:	add    eax,DWORD PTR gs:[rax]
 105d2b8:	add    BYTE PTR [rax],al
 105d2ba:	add    BYTE PTR [rax],al
 105d2bc:	add    DWORD PTR [rsi],eax
 105d2be:	add    al,BYTE PTR [rax]
 105d2c0:	(bad)  
 105d2c1:	xor    al,BYTE PTR [rdx]
 105d2c3:	push   rax
 105d2c4:	adc    DWORD PTR [rax],ebx
 105d2c6:	add    al,0x0
 105d2c8:	sbb    BYTE PTR [rbx+rcx*1],dh
 105d2cb:	add    BYTE PTR [rdx],cl
 105d2cd:	push   rdx
 105d2ce:	(bad)  
 105d2cf:	jo     0x105d265
 105d2d1:	inc    BYTE PTR [rbx]
 105d2d3:	add    BYTE PTR [rax],bh
 105d2d5:	jbe    0x105d2d7
 105d2d7:	add    bh,bh
 105d2d9:	(bad)  
 105d2da:	(bad)  
 105d2db:	push   QWORD PTR [rax+0x510]
 105d2e1:	add    BYTE PTR [rax],al
 105d2e3:	add    BYTE PTR [rax+0x20000510],ah
 105d2e9:	add    ax,WORD PTR [rax]
 105d2ec:	(bad)  
 105d2ed:	(bad)  
 105d2ee:	(bad)  
 105d2ef:	inc    DWORD PTR [rsi+0x1000366]
 105d2f5:	add    BYTE PTR [rax],al
 105d2f7:	add    BYTE PTR [rbp+0x366],bl
 105d2fd:	add    BYTE PTR [rax],al
 105d2ff:	add    BYTE PTR [rcx],al
 105d301:	(bad)  
 105d302:	add    al,BYTE PTR [rax]
 105d304:	(bad)  
 105d305:	xor    al,BYTE PTR [rdx]
 105d307:	push   rax
 105d308:	adc    DWORD PTR [rdx],ebx
 105d30a:	add    al,0x0
 105d30c:	adc    DWORD PTR [rdx+0xd],edx
 105d30f:	jo     0x105d31d
 105d311:	(bad)  
 105d312:	or     esi,DWORD PTR [rax]
 105d314:	xchg   esp,eax
 105d315:	inc    BYTE PTR [rbx]
 105d317:	add    BYTE PTR [rax+0x76],ah
 105d31a:	add    BYTE PTR [rax],al
 105d31c:	(bad)  
 105d31d:	(bad)  
 105d31e:	(bad)  
 105d31f:	call   rax
 105d321:	sbb    al,BYTE PTR [rip+0x0]        # 0x105d327
 105d327:	add    al,al
 105d329:	sbb    al,BYTE PTR [rip+0x366d000]        # 0x46ca32f
 105d32f:	add    bh,bh
 105d331:	(bad)  
 105d332:	(bad)  
 105d333:	(bad)  
 105d334:	sti    
 105d335:	add    ax,WORD PTR [rax]
 105d338:	add    DWORD PTR [rax],eax
 105d33a:	add    BYTE PTR [rax],al
 105d33c:	rex.RX
 105d33d:	add    eax,DWORD PTR [eax]
 105d340:	add    BYTE PTR [rax],al
 105d342:	add    BYTE PTR [rax],al
 105d344:	add    DWORD PTR [rsi],eax
 105d346:	add    al,BYTE PTR [rax]
 105d348:	(bad)  
 105d349:	xor    al,BYTE PTR [rdx]
 105d34b:	push   rax
 105d34c:	adc    DWORD PTR [rdx],ebx
 105d34e:	add    al,0x0
 105d350:	adc    DWORD PTR [rdx+0xd],edx
 105d353:	jo     0x105d361
 105d355:	(bad)  
 105d356:	or     esi,DWORD PTR [rax]
 105d358:	xchg   esp,eax
 105d359:	inc    BYTE PTR [rbx]
 105d35b:	add    BYTE PTR [rax-0xffff8a],cl
 105d361:	(bad)  
 105d362:	(bad)  
 105d363:	call   QWORD PTR [rax]
 105d365:	sbb    eax,DWORD PTR [rip+0x0]        # 0x105d36b
 105d36b:	add    BYTE PTR [rax],al
 105d36d:	sbb    eax,DWORD PTR [rip+0x367a000]        # 0x46d7373
 105d373:	add    bh,bh
 105d375:	(bad)  
 105d376:	(bad)  
 105d377:	dec    ebx
 105d379:	add    eax,DWORD PTR [eax]
 105d37c:	add    DWORD PTR [rax],eax
 105d37e:	add    BYTE PTR [rax],al
 105d380:	(bad)  
 105d381:	push   0x3
 105d386:	add    BYTE PTR [rax],al
 105d388:	add    DWORD PTR [rsi],eax
 105d38a:	add    al,BYTE PTR [rax]
 105d38c:	(bad)  
 105d38d:	xor    al,BYTE PTR [rdx]
 105d38f:	push   rax
 105d390:	adc    DWORD PTR [rax],ebx
 105d392:	add    al,0x0
 105d394:	sbb    BYTE PTR [rdx+rcx*1],dh
 105d397:	add    BYTE PTR [rdx],cl
 105d399:	push   rdx
 105d39a:	(bad)  
 105d39b:	jo     0x105d331
 105d39d:	inc    BYTE PTR [rbx]
 105d39f:	add    BYTE PTR [rax-0xffff8a],dh
 105d3a5:	(bad)  
 105d3a6:	(bad)  
 105d3a7:	call   QWORD PTR [rax+0x7000050f]
 105d3ad:	push   0xffffffffffff0003
 105d3b2:	(bad)  
 105d3b3:	inc    edi
 105d3b5:	push   0x3
 105d3ba:	add    BYTE PTR [rax],al
 105d3bc:	add    DWORD PTR [rsi],eax
 105d3be:	add    al,BYTE PTR [rax]
 105d3c0:	(bad)  
 105d3c1:	xor    al,BYTE PTR [rdx]
 105d3c3:	push   rax
 105d3c4:	adc    DWORD PTR [rdx],ebx
 105d3c6:	add    al,0x0
 105d3c8:	adc    DWORD PTR [rdx+0xd],edx
 105d3cb:	jo     0x105d3d9
 105d3cd:	(bad)  
 105d3ce:	or     esi,DWORD PTR [rax]
 105d3d0:	xchg   esp,eax
 105d3d1:	inc    BYTE PTR [rbx]
 105d3d3:	add    al,bl
 105d3d5:	jbe    0x105d3d7
 105d3d7:	add    bh,bh
 105d3d9:	(bad)  
 105d3da:	(bad)  
 105d3db:	push   QWORD PTR [rax+0x1a]
 105d3de:	add    eax,0x0
 105d3e3:	add    BYTE PTR [rax+0x1a],ah
 105d3e6:	add    eax,0x368f000
 105d3eb:	add    bh,bh
 105d3ed:	(bad)  
 105d3ee:	(bad)  
 105d3ef:	call   FWORD PTR [rbx]
 105d3f1:	imul   eax,DWORD PTR [rbx],0x100
 105d3f7:	add    BYTE PTR [rbx+0x69],ah
 105d3fa:	add    eax,DWORD PTR [rax]
 105d3fc:	add    BYTE PTR [rax],al
 105d3fe:	add    BYTE PTR [rax],al
 105d400:	add    DWORD PTR [rsi],eax
 105d402:	add    al,BYTE PTR [rax]
 105d404:	(bad)  
 105d405:	xor    al,BYTE PTR [rdx]
 105d407:	push   rax
 105d408:	adc    DWORD PTR [rax],ebx
 105d40a:	add    al,0x0
 105d40c:	sbb    BYTE PTR [rdx+rcx*1],dh
 105d40f:	add    BYTE PTR [rdx],cl
 105d411:	push   rdx
 105d412:	(bad)  
 105d413:	jo     0x105d3a9
 105d415:	inc    BYTE PTR [rbx]
 105d417:	add    BYTE PTR [rax],al
 105d419:	ja     0x105d41b
 105d41b:	add    bh,bh
 105d41d:	(bad)  
 105d41e:	(bad)  
 105d41f:	push   rax
 105d421:	syscall 
 105d423:	add    al,al
 105d425:	imul   eax,DWORD PTR [rbx],0xffffff00
 105d42b:	call   QWORD PTR [rdx+rbp*2]
 105d42e:	add    eax,DWORD PTR [rax]
 105d430:	add    BYTE PTR [rax],al
 105d432:	add    BYTE PTR [rax],al
 105d434:	add    DWORD PTR [rsi],eax
 105d436:	add    al,BYTE PTR [rax]
 105d438:	(bad)  
 105d439:	xor    al,BYTE PTR [rdx]
 105d43b:	push   rax
 105d43c:	adc    DWORD PTR [rdx],ebx
 105d43e:	(bad)  
 105d43f:	add    BYTE PTR [rdx],bl
 105d441:	xor    al,0xc
 105d443:	add    BYTE PTR [rdx+rdx*2],cl
 105d446:	or     BYTE PTR [rax+0x7],dh
 105d449:	(bad)  
 105d44a:	(bad)  
 105d44b:	push   rax
 105d44c:	xchg   esp,eax
 105d44d:	inc    BYTE PTR [rbx]
 105d44f:	add    BYTE PTR [rax],ch
 105d451:	ja     0x105d453
 105d453:	add    bh,bh
 105d455:	(bad)  
 105d456:	(bad)  
 105d457:	jmp    QWORD PTR [rax+0x4000051a]
 105d45d:	push   0x3
 105d45f:	add    bh,bh
 105d461:	(bad)  
 105d462:	(bad)  
 105d463:	jmp    QWORD PTR [rax+0x6a]
 105d466:	add    eax,DWORD PTR [rax]
 105d468:	add    BYTE PTR [rax],al
 105d46a:	add    BYTE PTR [rax],al
 105d46c:	lahf   
 105d46d:	push   0x3
 105d46f:	add    bh,bh
 105d471:	(bad)  
 105d472:	(bad)  
 105d473:	call   QWORD PTR [rcx]
 105d475:	sbb    eax,0x641d0006
 105d47a:	(bad)  
 105d47b:	add    BYTE PTR [rax],bl
 105d47d:	xor    al,0xc
 105d47f:	add    BYTE PTR [rdx],cl
 105d481:	xchg   edx,eax
 105d482:	(bad)  
 105d483:	jo     0x105d419
 105d485:	inc    BYTE PTR [rbx]
 105d487:	add    BYTE PTR [rax+0x77],dl
 105d48a:	add    BYTE PTR [rax],al
 105d48c:	(bad)  
 105d48d:	(bad)  
 105d48e:	(bad)  
 105d48f:	inc    DWORD PTR [rax+0x1b]
 105d492:	add    eax,0x36b0000
 105d497:	add    bh,bh
 105d499:	(bad)  
 105d49a:	(bad)  
 105d49b:	jmp    QWORD PTR [rbx]
 105d49d:	imul   eax,DWORD PTR [rbx],0x0
 105d4a0:	add    BYTE PTR [rax],al
 105d4a2:	add    BYTE PTR [rax],al
 105d4a4:	imul   ebp,DWORD PTR [rbx+0x3],0xffffff00
 105d4ab:	inc    DWORD PTR [rcx]
 105d4ad:	add    al,0x1
 105d4af:	add    BYTE PTR [rdx+rax*2],al
 105d4b2:	add    BYTE PTR [rax],al
 105d4b4:	add    DWORD PTR [rcx+rax*1],eax
 105d4b7:	add    BYTE PTR [rdx+rax*2],al
 105d4ba:	add    BYTE PTR [rax],al
 105d4bc:	add    DWORD PTR [rcx+rax*1],eax
 105d4bf:	add    BYTE PTR [rdx+rax*2],al
 105d4c2:	add    BYTE PTR [rax],al
 105d4c4:	add    DWORD PTR [rcx+rax*1],eax
 105d4c7:	add    BYTE PTR [rdx+rax*2],al
 105d4ca:	add    BYTE PTR [rax],al
 105d4cc:	adc    DWORD PTR [rbx+rcx*1],ebp
 105d4cf:	add    BYTE PTR [rsp+rsi*1],ch
 105d4d2:	sub    al,0x0
 105d4d4:	sbb    al,0x1
 105d4d6:	and    al,BYTE PTR [rax]
 105d4d8:	adc    al,dh
 105d4da:	(bad)  
 105d4db:	loopne 0x105d4e9
 105d4dd:	ror    BYTE PTR [rdx],1
 105d4df:	ror    BYTE PTR [rax],0x70
 105d4e2:	(bad)  
 105d4e3:	(bad)  
 105d4e4:	(bad)  
 105d4e5:	push   rax
 105d4e6:	add    BYTE PTR [rax],al
 105d4e8:	xchg   esp,eax
 105d4e9:	inc    BYTE PTR [rbx]
 105d4eb:	add    BYTE PTR [rax+0x77],bh
 105d4ee:	add    BYTE PTR [rax],al
 105d4f0:	(bad)  
 105d4f1:	(bad)  
 105d4f2:	(bad)  
 105d4f3:	inc    DWORD PTR [rax+0x5]
 105d4f6:	add    eax,0x0
 105d4fb:	add    BYTE PTR [rax+0x5],dl
 105d4fe:	add    eax,0x100
 105d503:	add    BYTE PTR [rax+0x5],dh
 105d506:	add    eax,0x200
 105d50b:	add    BYTE PTR [rax+0x2000505],al
 105d511:	add    BYTE PTR [rax],al
 105d513:	add    BYTE PTR [rax+0x4000505],dl
 105d519:	add    BYTE PTR [rax],al
 105d51b:	add    BYTE PTR [rax+0x5000505],ah
 105d521:	add    BYTE PTR [rax],al
 105d523:	add    BYTE PTR [rax+0x4000505],dh
 105d529:	add    BYTE PTR [rax],al
 105d52b:	add    al,al
 105d52d:	add    eax,0x40005
 105d532:	add    BYTE PTR [rax],al
 105d534:	rol    BYTE PTR [rip+0x80005],1        # 0x10dd53f
 105d53a:	add    BYTE PTR [rax],al
 105d53c:	loopne 0x105d543
 105d53e:	add    eax,0x900
 105d543:	add    al,dh
 105d545:	add    eax,0xa0005
 105d54a:	add    BYTE PTR [rax],al
 105d54c:	add    BYTE PTR [rsi],al
 105d54e:	add    eax,0xb00
 105d553:	add    BYTE PTR [rax],dl
 105d555:	(bad)  
 105d556:	add    eax,0xc00
 105d55b:	add    BYTE PTR [rax],ah
 105d55d:	(bad)  
 105d55e:	add    eax,0xd00
 105d563:	add    BYTE PTR [rax],dh
 105d565:	(bad)  
 105d566:	add    eax,0x800
 105d56b:	add    BYTE PTR [rax+0x6],al
 105d56e:	add    eax,0xf00
 105d573:	add    BYTE PTR [rax+0x6],dl
 105d576:	add    eax,0x36c5000
 105d57b:	add    bh,bh
 105d57d:	(bad)  
 105d57e:	(bad)  
 105d57f:	dec    DWORD PTR [rdi+0x36c]
 105d585:	add    BYTE PTR [rax],al
 105d587:	add    BYTE PTR [rsp+rbp*2+0x10003],ah
 105d58e:	add    BYTE PTR [rax],al
 105d590:	stos   DWORD PTR es:[rdi],eax
 105d591:	ins    BYTE PTR es:[rdi],dx
 105d592:	add    eax,DWORD PTR [rax]
 105d594:	add    al,BYTE PTR [rax]
 105d596:	add    BYTE PTR [rax],al
 105d598:	imul   DWORD PTR [rbx+rax*1+0x0]
 105d59c:	add    eax,DWORD PTR [rax]
 105d59e:	add    BYTE PTR [rax],al
 105d5a0:	push   rbp
 105d5a1:	ins    DWORD PTR es:[rdi],dx
 105d5a2:	add    eax,DWORD PTR [rax]
 105d5a4:	add    al,BYTE PTR [rax]
 105d5a6:	add    BYTE PTR [rax],al
 105d5a8:	jae    0x105d617
 105d5aa:	add    eax,DWORD PTR [rax]
 105d5ac:	add    al,0x0
 105d5ae:	add    BYTE PTR [rax],al
 105d5b0:	xchg   ecx,eax
 105d5b1:	ins    DWORD PTR es:[rdi],dx
 105d5b2:	add    eax,DWORD PTR [rax]
 105d5b4:	add    eax,0xaf000000
 105d5b9:	ins    DWORD PTR es:[rdi],dx
 105d5ba:	add    eax,DWORD PTR [rax]
 105d5bc:	(bad)  
 105d5bd:	add    BYTE PTR [rax],al
 105d5bf:	add    bl,cl
 105d5c1:	ins    DWORD PTR es:[rdi],dx
 105d5c2:	add    eax,DWORD PTR [rax]
 105d5c4:	add    eax,0xe000000
 105d5c9:	outs   dx,BYTE PTR ds:[rsi]
 105d5ca:	add    eax,DWORD PTR [rax]
 105d5cc:	add    al,0x0
 105d5ce:	add    BYTE PTR [rax],al
 105d5d0:	cmp    al,0x6e
 105d5d2:	add    eax,DWORD PTR [rax]
 105d5d4:	(bad)  
 105d5d5:	add    BYTE PTR [rax],al
 105d5d7:	add    BYTE PTR [rbx+0x6e],cl
 105d5da:	add    eax,DWORD PTR [rax]
 105d5dc:	add    al,0x0
 105d5de:	add    BYTE PTR [rax],al
 105d5e0:	(bad)  
 105d5e1:	outs   dx,BYTE PTR ds:[rsi]
 105d5e2:	add    eax,DWORD PTR [rax]
 105d5e4:	or     BYTE PTR [rax],al
 105d5e6:	add    BYTE PTR [rax],al
 105d5e8:	jg     0x105d658
 105d5ea:	add    eax,DWORD PTR [rax]
 105d5ec:	or     DWORD PTR [rax],eax
 105d5ee:	add    BYTE PTR [rax],al
 105d5f0:	lahf   
 105d5f1:	outs   dx,BYTE PTR ds:[rsi]
 105d5f2:	add    eax,DWORD PTR [rax]
 105d5f4:	or     al,BYTE PTR [rax]
 105d5f6:	add    BYTE PTR [rax],al
 105d5f8:	mov    edi,0xb00036e
 105d5fd:	add    BYTE PTR [rax],al
 105d5ff:	add    bh,bl
 105d601:	outs   dx,BYTE PTR ds:[rsi]
 105d602:	add    eax,DWORD PTR [rax]
 105d604:	or     al,0x0
 105d606:	add    BYTE PTR [rax],al
 105d608:	add    DWORD PTR [rdi+0x3],ebp
 105d60b:	add    BYTE PTR [rip+0x23000000],cl        # 0x2405d611
 105d611:	outs   dx,DWORD PTR ds:[rsi]
 105d612:	add    eax,DWORD PTR [rax]
 105d614:	(bad)  
 105d615:	add    BYTE PTR [rax],al
 105d617:	add    BYTE PTR [rdi+0x70],dh
 105d61a:	add    eax,DWORD PTR [rax]
 105d61c:	or     eax,0x87000000
 105d621:	jo     0x105d626
 105d623:	add    BYTE PTR [rax+rax*1],cl
 105d626:	add    BYTE PTR [rax],al
 105d628:	xchg   edi,eax
 105d629:	jo     0x105d62e
 105d62b:	add    BYTE PTR [rbx],cl
 105d62d:	add    BYTE PTR [rax],al
 105d62f:	add    BYTE PTR [rdi+0xa000370],ah
 105d635:	add    BYTE PTR [rax],al
 105d637:	add    BYTE PTR [rdi+0x9000370],dh
 105d63d:	add    BYTE PTR [rax],al
 105d63f:	add    ah,bh
 105d641:	jo     0x105d646
 105d643:	add    BYTE PTR [rax],cl
 105d645:	add    BYTE PTR [rax],al
 105d647:	add    BYTE PTR [rdi],dl
 105d649:	jno    0x105d64e
 105d64b:	add    BYTE PTR [rdi],cl
 105d64d:	add    BYTE PTR [rax],al
 105d64f:	add    BYTE PTR [rax],ch
 105d651:	jno    0x105d656
 105d653:	add    BYTE PTR [rax],dl
 105d655:	add    BYTE PTR [rax],al
 105d657:	add    BYTE PTR [rcx+0x71],dl
 105d65a:	add    eax,DWORD PTR [rax]
 105d65c:	sldt   WORD PTR [rax]
 105d65f:	add    BYTE PTR [rcx-0xfffc8f],dh
 105d665:	(bad)  
 105d666:	(bad)  
 105d667:	call   QWORD PTR [rcx]
 105d669:	adc    eax,DWORD PTR [rdx]
 105d66b:	add    BYTE PTR [rdx],cl
 105d66d:	push   rdx
 105d66e:	(bad)  
 105d66f:	xor    BYTE PTR [rsi+rdi*8+0x77a00003],dl
 105d676:	add    BYTE PTR [rax],al
 105d678:	(bad)  
 105d679:	(bad)  
 105d67a:	(bad)  
 105d67b:	push   QWORD PTR [rax+0x506]
 105d681:	add    BYTE PTR [rax],al
 105d683:	add    al,al
 105d685:	(bad)  
 105d686:	add    eax,0x100
 105d68b:	add    al,ah
 105d68d:	(bad)  
 105d68e:	add    eax,0x371e000
 105d693:	add    bh,bh
 105d695:	(bad)  
 105d696:	(bad)  
 105d697:	inc    DWORD PTR [rax]
 105d699:	jb     0x105d69e
 105d69b:	add    BYTE PTR [rdx],al
 105d69d:	add    BYTE PTR [rax],al
 105d69f:	add    BYTE PTR [rbp+0x72],cl
 105d6a2:	add    eax,DWORD PTR [rax]
 105d6a4:	add    DWORD PTR [rax],eax
 105d6a6:	add    BYTE PTR [rax],al
 105d6a8:	pop    rbp
 105d6a9:	jb     0x105d6ae
 105d6ab:	add    BYTE PTR [rax],al
 105d6ad:	add    BYTE PTR [rax],al
 105d6af:	add    BYTE PTR [rax+0x72],ch
 105d6b2:	add    eax,DWORD PTR [rax]
 105d6b4:	(bad)  
 105d6b5:	(bad)  
 105d6b6:	(bad)  
 105d6b7:	call   QWORD PTR [rcx]
 105d6b9:	sub    ecx,DWORD PTR [rip+0x2c742b00]        # 0x2d7a01bf
 105d6bf:	add    BYTE PTR [rdi],ah
 105d6c1:	sub    eax,DWORD PTR fs:[rax]
 105d6c4:	and    esi,DWORD PTR [rdx+rbp*1]
 105d6c7:	add    BYTE PTR [rdi],dl
 105d6c9:	add    DWORD PTR [rax+rax*1],esp
 105d6cc:	or     al,0xf0
 105d6ce:	or     ah,al
 105d6d0:	or     al,dl
 105d6d2:	(bad)  
 105d6d3:	rol    BYTE PTR [rax+rdx*2],0x0
 105d6d7:	add    BYTE PTR [rsi+rdi*8+0x77c80003],dl
 105d6de:	add    BYTE PTR [rax],al
 105d6e0:	(bad)  
 105d6e1:	(bad)  
 105d6e2:	(bad)  
 105d6e3:	jmp    QWORD PTR [rax+0xd]
 105d6e6:	add    eax,0x0
 105d6eb:	add    BYTE PTR [rax+0xd],dh
 105d6ee:	add    eax,0x100
 105d6f3:	add    BYTE PTR [rax+0x100050d],al
 105d6f9:	add    BYTE PTR [rax],al
 105d6fb:	add    BYTE PTR [rax+0x100050d],dl
 105d701:	add    BYTE PTR [rax],al
 105d703:	add    BYTE PTR [rax+0x400050d],ah
 105d709:	add    BYTE PTR [rax],al
 105d70b:	add    BYTE PTR [rax+0x400050d],dh
 105d711:	add    BYTE PTR [rax],al
 105d713:	add    al,al
 105d715:	or     eax,0x40005
 105d71a:	add    BYTE PTR [rax],al
 105d71c:	ror    BYTE PTR [rip+0x40005],1        # 0x109d727
 105d722:	add    BYTE PTR [rax],al
 105d724:	loopne 0x105d733
 105d726:	add    eax,0x800
 105d72b:	add    al,dh
 105d72d:	or     eax,0x40005
 105d732:	add    BYTE PTR [rax],al
 105d734:	lock or eax,0xa0005
 105d73a:	add    BYTE PTR [rax],al
 105d73c:	add    BYTE PTR [rsi],cl
 105d73e:	add    eax,0xa00
 105d743:	add    BYTE PTR [rax],dl
 105d745:	(bad)  
 105d746:	add    eax,0xc00
 105d74b:	add    BYTE PTR [rax],ah
 105d74d:	(bad)  
 105d74e:	add    eax,0xc00
 105d753:	add    BYTE PTR [rax+0xe],dl
 105d756:	add    eax,0xc00
 105d75b:	add    BYTE PTR [rax+0xe],ah
 105d75e:	add    eax,0x3728000
 105d763:	add    bh,bh
 105d765:	(bad)  
 105d766:	(bad)  
 105d767:	jmp    rdi
 105d769:	jb     0x105d76e
 105d76b:	add    BYTE PTR [rax],al
 105d76d:	add    BYTE PTR [rax],al
 105d76f:	add    dh,ch
 105d771:	jb     0x105d776
 105d773:	add    BYTE PTR [rcx],al
 105d775:	add    BYTE PTR [rax],al
 105d777:	add    BYTE PTR [rip+0x2000373],al        # 0x305daf0
 105d77d:	add    BYTE PTR [rax],al
 105d77f:	add    BYTE PTR [rcx],ch
 105d781:	jae    0x105d786
 105d783:	add    BYTE PTR [rcx],al
 105d785:	add    BYTE PTR [rax],al
 105d787:	add    BYTE PTR [rip+0x3000373],bh        # 0x405db00
 105d78d:	add    BYTE PTR [rax],al
 105d78f:	add    BYTE PTR [rcx+0x73],dl
 105d792:	add    eax,DWORD PTR [rax]
 105d794:	add    DWORD PTR [rax],eax
 105d796:	add    BYTE PTR [rax],al
 105d798:	(bad)  
 105d799:	jae    0x105d79e
 105d79b:	add    BYTE PTR [rax+rax*1],al
 105d79e:	add    BYTE PTR [rax],al
 105d7a0:	ds je  0x105d7a6
 105d7a3:	add    BYTE PTR [rip+0x6b000000],al        # 0x6c05d7a9
 105d7a9:	je     0x105d7ae
 105d7ab:	add    BYTE PTR [rax+rax*1],al
 105d7ae:	add    BYTE PTR [rax],al
 105d7b0:	nop
 105d7b1:	je     0x105d7b6
 105d7b3:	add    BYTE PTR [rsi],al
 105d7b5:	add    BYTE PTR [rax],al
 105d7b7:	add    BYTE PTR [rbx+0x4000374],dh
 105d7bd:	add    BYTE PTR [rax],al
 105d7bf:	add    BYTE PTR [rdx],ah
 105d7c1:	jne    0x105d7c6
 105d7c3:	add    BYTE PTR [rdi],al
 105d7c5:	add    BYTE PTR [rax],al
 105d7c7:	add    BYTE PTR [rdi],bh
 105d7c9:	jne    0x105d7ce
 105d7cb:	add    BYTE PTR [rax+rax*1],al
 105d7ce:	add    BYTE PTR [rax],al
 105d7d0:	movabs al,ds:0xbd00000008000375
 105d7d9:	jne    0x105d7de
 105d7db:	add    BYTE PTR [rdx],cl
 105d7dd:	add    BYTE PTR [rax],al
 105d7df:	add    BYTE PTR [rsi+rsi*2],bl
 105d7e2:	add    eax,DWORD PTR [rax]
 105d7e4:	or     eax,DWORD PTR [rax]
 105d7e6:	add    BYTE PTR [rax],al
 105d7e8:	sub    esi,DWORD PTR [rsi+0x3]
 105d7eb:	add    BYTE PTR [rdx],cl
 105d7ed:	add    BYTE PTR [rax],al
 105d7ef:	add    BYTE PTR [rdi+0x76],bl
 105d7f2:	add    eax,DWORD PTR [rax]
 105d7f4:	or     al,0x0
 105d7f6:	add    BYTE PTR [rax],al
 105d7f8:	jp     0x105d870
 105d7fa:	add    eax,DWORD PTR [rax]
 105d7fc:	or     eax,0xbf000000
 105d801:	jbe    0x105d806
 105d803:	add    BYTE PTR [rax+rax*1],cl
 105d806:	add    BYTE PTR [rax],al
 105d808:	rex.WR ja 0x105d80e
 105d80b:	add    BYTE PTR [rsi],cl
 105d80d:	add    BYTE PTR [rax],al
 105d80f:	add    BYTE PTR [rcx+0x77],ch
 105d812:	add    eax,DWORD PTR [rax]
 105d814:	or     al,0x0
 105d816:	add    BYTE PTR [rax],al
 105d818:	loope  0x105d891
 105d81a:	add    eax,DWORD PTR [rax]
 105d81c:	sldt   WORD PTR [rax]
 105d81f:	add    BYTE PTR [rbx],dl
 105d821:	js     0x105d826
 105d823:	add    BYTE PTR [rax+rax*1],cl
 105d826:	add    BYTE PTR [rax],al
 105d828:	pop    rsi
 105d829:	js     0x105d82e
 105d82b:	add    BYTE PTR [rdx],cl
 105d82d:	add    BYTE PTR [rax],al
 105d82f:	add    BYTE PTR [rbx+0x78],dh
 105d832:	add    eax,DWORD PTR [rax]
 105d834:	add    al,0x0
 105d836:	add    BYTE PTR [rax],al
 105d838:	(bad)  
 105d839:	jns    0x105d83e
 105d83b:	add    BYTE PTR [rcx],al
 105d83d:	add    BYTE PTR [rax],al
 105d83f:	add    BYTE PTR [rax],dh
 105d841:	jns    0x105d846
 105d843:	add    BYTE PTR [rax],al
 105d845:	add    BYTE PTR [rax],al
 105d847:	add    BYTE PTR [rdi],bh
 105d849:	jns    0x105d84e
 105d84b:	add    bh,bh
 105d84d:	(bad)  
 105d84e:	(bad)  
 105d84f:	dec    DWORD PTR [rcx+0x4000379]
 105d855:	add    BYTE PTR [rax],al
 105d857:	add    BYTE PTR [rcx+rdi*2-0xfffd],dl
 105d85e:	(bad)  
 105d85f:	inc    DWORD PTR [rcx]
 105d861:	(bad)  
 105d862:	add    al,BYTE PTR [rax]
 105d864:	(bad)  
 105d865:	xor    al,BYTE PTR [rdx]
 105d867:	push   rax
 105d868:	sbb    DWORD PTR [rip+0x11c000a],esi        # 0x221d878
 105d86e:	add    QWORD PTR [rip+0x9e00bf0],r9        # 0xae5e465
 105d875:	rol    BYTE PTR [rdi],1
 105d877:	rol    BYTE PTR [rip+0x3600470],0x30        # 0x465dcee
 105d87e:	add    dl,BYTE PTR [rax-0x60]
 105d881:	inc    BYTE PTR [rbx]
 105d883:	add    al,dh
 105d885:	ja     0x105d887
 105d887:	add    BYTE PTR [rdx+0xa],dl
 105d88a:	add    BYTE PTR [rax],al
 105d88c:	(bad)  
 105d88d:	(bad)  
 105d88e:	(bad)  
 105d88f:	push   QWORD PTR [rax+0x50a]
 105d895:	add    BYTE PTR [rax],al
 105d897:	add    al,al
 105d899:	or     al,BYTE PTR [rip+0x0]        # 0x105d89f
 105d89f:	add    al,dl
 105d8a1:	or     al,BYTE PTR [rip+0x0]        # 0x105d8a7
 105d8a7:	add    al,ah
 105d8a9:	or     al,BYTE PTR [rip+0x300]        # 0x105dbaf
 105d8af:	add    al,dh
 105d8b1:	or     al,BYTE PTR [rip+0x300]        # 0x105dbb7
 105d8b7:	add    BYTE PTR [rax],al
 105d8b9:	or     eax,DWORD PTR [rip+0x300]        # 0x105dbbf
 105d8bf:	add    BYTE PTR [rax],dl
 105d8c1:	or     eax,DWORD PTR [rip+0x600]        # 0x105dec7
 105d8c7:	add    BYTE PTR [rax],ah
 105d8c9:	or     eax,DWORD PTR [rip+0x700]        # 0x105dfcf
 105d8cf:	add    BYTE PTR [rax],dh
 105d8d1:	or     eax,DWORD PTR [rip+0x800]        # 0x105e0d7
 105d8d7:	add    BYTE PTR [rax+0xb],al
 105d8da:	add    eax,0x800
 105d8df:	add    BYTE PTR [rax+0xb],dl
 105d8e2:	add    eax,0xa00
 105d8e7:	add    BYTE PTR [rax+0xb],ah
 105d8ea:	add    eax,0x800
 105d8ef:	add    BYTE PTR [rax+0xb],dh
 105d8f2:	add    eax,0x800
 105d8f7:	add    BYTE PTR [rax+0xd00050b],al
 105d8fd:	add    BYTE PTR [rax],al
 105d8ff:	add    BYTE PTR [rax+0x800050b],dl
 105d905:	add    BYTE PTR [rax],al
 105d907:	add    BYTE PTR [rax+0x800050b],ah
 105d90d:	add    BYTE PTR [rax],al
 105d90f:	add    BYTE PTR [rax+0x1000050b],dh
 105d915:	add    BYTE PTR [rax],al
 105d917:	add    al,al
 105d919:	or     eax,DWORD PTR [rip+0x800]        # 0x105e11f
 105d91f:	add    al,dl
 105d921:	or     eax,DWORD PTR [rip+0x1200]        # 0x105eb27
 105d927:	add    al,ah
 105d929:	or     eax,DWORD PTR [rip+0x379c000]        # 0x47f992f
 105d92f:	add    bh,bh
 105d931:	(bad)  
 105d932:	(bad)  
 105d933:	inc    DWORD PTR [rdx+rdi*2+0x3]
 105d937:	add    BYTE PTR [rax],al
 105d939:	add    BYTE PTR [rax],al
 105d93b:	add    BYTE PTR [rdi+0x100037a],cl
 105d941:	add    BYTE PTR [rax],al
 105d943:	add    cl,al
 105d945:	jp     0x105d94a
 105d947:	add    BYTE PTR [rax],al
 105d949:	add    BYTE PTR [rax],al
 105d94b:	add    ch,dl
 105d94d:	jp     0x105d952
 105d94f:	add    BYTE PTR [rdx],al
 105d951:	add    BYTE PTR [rax],al
 105d953:	add    cl,ch
 105d955:	jp     0x105d95a
 105d957:	add    BYTE PTR [rax],al
 105d959:	add    BYTE PTR [rax],al
 105d95b:	add    al,bh
 105d95d:	jp     0x105d962
 105d95f:	add    BYTE PTR [rbx],al
 105d961:	add    BYTE PTR [rax],al
 105d963:	add    BYTE PTR [rcx+0x7b],al
 105d966:	add    eax,DWORD PTR [rax]
 105d968:	add    al,0x0
 105d96a:	add    BYTE PTR [rax],al
 105d96c:	ja     0x105d9e9
 105d96e:	add    eax,DWORD PTR [rax]
 105d970:	add    eax,DWORD PTR [rax]
 105d972:	add    BYTE PTR [rax],al
 105d974:	mov    edi,DWORD PTR [rbx+0x3]
 105d977:	add    BYTE PTR [rip+0xffffffff9f000000],al        # 0xffffffffa005d97d
 105d97d:	jnp    0x105d982
 105d97f:	add    BYTE PTR [rbx],al
 105d981:	add    BYTE PTR [rax],al
 105d983:	add    BYTE PTR [rsi+0x600037b],ch
 105d989:	add    BYTE PTR [rax],al
 105d98b:	add    BYTE PTR [rdx+0x700037c],bh
 105d991:	add    BYTE PTR [rax],al
 105d993:	add    dh,al
 105d995:	jl     0x105d99a
 105d997:	add    BYTE PTR [rax],cl
 105d999:	add    BYTE PTR [rax],al
 105d99b:	add    cl,ah
 105d99d:	jl     0x105d9a2
 105d99f:	add    BYTE PTR [rcx],cl
 105d9a1:	add    BYTE PTR [rax],al
 105d9a3:	add    BYTE PTR [rsi],cl
 105d9a5:	jge    0x105d9aa
 105d9a7:	add    BYTE PTR [rax],cl
 105d9a9:	add    BYTE PTR [rax],al
 105d9ab:	add    BYTE PTR [rbx],dh
 105d9ad:	jge    0x105d9b2
 105d9af:	add    BYTE PTR [rdx],cl
 105d9b1:	add    BYTE PTR [rax],al
 105d9b3:	add    BYTE PTR [rbp+0x7d],cl
 105d9b6:	add    eax,DWORD PTR [rax]
 105d9b8:	or     eax,DWORD PTR [rax]
 105d9ba:	add    BYTE PTR [rax],al
 105d9bc:	pop    rsp
 105d9bd:	jge    0x105d9c2
 105d9bf:	add    BYTE PTR [rdx],cl
 105d9c1:	add    BYTE PTR [rax],al
 105d9c3:	add    BYTE PTR [rdi+0x7d],ah
 105d9c6:	add    eax,DWORD PTR [rax]
 105d9c8:	or     BYTE PTR [rax],al
 105d9ca:	add    BYTE PTR [rax],al
 105d9cc:	jrcxz  0x105da4b
 105d9ce:	add    eax,DWORD PTR [rax]
 105d9d0:	(bad)  
 105d9d1:	add    BYTE PTR [rax],al
 105d9d3:	add    bh,ch
 105d9d5:	jge    0x105d9da
 105d9d7:	add    BYTE PTR [rsi],al
 105d9d9:	add    BYTE PTR [rax],al
 105d9db:	add    ah,dh
 105d9dd:	jge    0x105d9e2
 105d9df:	add    BYTE PTR [rax],cl
 105d9e1:	add    BYTE PTR [rax],al
 105d9e3:	add    BYTE PTR [rdi],cl
 105d9e5:	jle    0x105d9ea
 105d9e7:	add    BYTE PTR [rax+rax*1],cl
 105d9ea:	add    BYTE PTR [rax],al
 105d9ec:	cmp    al,0x7e
 105d9ee:	add    eax,DWORD PTR [rax]
 105d9f0:	or     BYTE PTR [rax],al
 105d9f2:	add    BYTE PTR [rax],al
 105d9f4:	(bad)  
 105d9f5:	jle    0x105d9fa
 105d9f7:	add    BYTE PTR [rip+0x7b000000],cl        # 0x7c05d9fd
 105d9fd:	jle    0x105da02
 105d9ff:	add    BYTE PTR [rsi],cl
 105da01:	add    BYTE PTR [rax],al
 105da03:	add    BYTE PTR [rdx+0xd00037e],cl
 105da09:	add    BYTE PTR [rax],al
 105da0b:	add    BYTE PTR [rbp+0x800037e],dl
 105da11:	add    BYTE PTR [rax],al
 105da13:	add    BYTE PTR [rbp+0x1200037f],al
 105da19:	add    BYTE PTR [rax],al
 105da1b:	add    BYTE PTR [rbp+0x800037f],dl
 105da21:	add    BYTE PTR [rax],al
 105da23:	add    BYTE PTR [rdi+0x700037f],dh
 105da29:	add    BYTE PTR [rax],al
 105da2b:	add    bl,al
 105da2d:	jg     0x105da32
 105da2f:	add    BYTE PTR [rsi],al
 105da31:	add    BYTE PTR [rax],al
 105da33:	add    al,cl
 105da35:	jg     0x105da3a
 105da37:	add    BYTE PTR [rax],cl
 105da39:	add    BYTE PTR [rax],al
 105da3b:	add    ah,dl
 105da3d:	jg     0x105da42
 105da3f:	add    BYTE PTR [rax],dl
 105da41:	add    BYTE PTR [rax],al
 105da43:	add    bl,ah
 105da45:	jg     0x105da4a
 105da47:	add    BYTE PTR [rcx],dl
 105da49:	add    BYTE PTR [rax],al
 105da4b:	add    BYTE PTR [rax],al
 105da4d:	add    BYTE PTR [rbx],0x0
 105da50:	adc    BYTE PTR [rax],al
 105da52:	add    BYTE PTR [rax],al
 105da54:	add    BYTE PTR [r11],0x0
 105da58:	or     BYTE PTR [rax],al
 105da5a:	add    BYTE PTR [rax],al
 105da5c:	rex.WRB add BYTE PTR [r11],0x0
 105da60:	(bad)  
 105da61:	add    BYTE PTR [rax],al
 105da63:	add    BYTE PTR [rcx-0x80],bl
 105da66:	add    eax,DWORD PTR [rax]
 105da68:	(bad)  
 105da69:	add    BYTE PTR [rax],al
 105da6b:	add    BYTE PTR [rsi-0x80],bh
 105da6e:	add    eax,DWORD PTR [rax]
 105da70:	or     BYTE PTR [rax],al
 105da72:	add    BYTE PTR [rax],al
 105da74:	stos   BYTE PTR es:[rdi],al
 105da75:	add    BYTE PTR [rbx],0x0
 105da78:	(bad)  
 105da79:	add    BYTE PTR [rax],al
 105da7b:	add    BYTE PTR [rax-0x7f],al
 105da7e:	add    eax,DWORD PTR [rax]
 105da80:	add    eax,DWORD PTR [rax]
 105da82:	add    BYTE PTR [rax],al
 105da84:	push   rcx
 105da85:	add    DWORD PTR [rbx],0x0
 105da8b:	add    BYTE PTR [rdx-0x7f],ah
 105da8e:	add    eax,DWORD PTR [rax]
 105da90:	(bad)  
 105da91:	(bad)  
 105da92:	(bad)  
 105da93:	call   QWORD PTR [rcx]
 105da95:	sub    BYTE PTR [rbx],cl
 105da97:	add    BYTE PTR [rax],ch
 105da99:	xor    al,0x1d
 105da9b:	add    BYTE PTR [rax],bl
 105da9d:	add    DWORD PTR [rax+rax*1],edx
 105daa0:	or     al,0xf0
 105daa2:	or     ah,al
 105daa4:	or     al,dl
 105daa6:	(bad)  
 105daa7:	rol    BYTE PTR [rax+rsi*2],0x3
 105daab:	(bad)  
 105daac:	add    dl,BYTE PTR [rax+0x0]
 105daaf:	add    BYTE PTR [rsi+rdi*8+0x78180003],dl
 105dab6:	add    BYTE PTR [rax],al
 105dab8:	(bad)  
 105dab9:	(bad)  
 105daba:	(bad)  
 105dabb:	push   QWORD PTR [rax+0x519]
 105dac1:	add    BYTE PTR [rax],al
 105dac3:	add    al,al
 105dac5:	sbb    DWORD PTR [rip+0x0],eax        # 0x105dacb
 105dacb:	add    al,dl
 105dacd:	sbb    DWORD PTR [rip+0x200],eax        # 0x105dcd3
 105dad3:	add    al,ah
 105dad5:	sbb    DWORD PTR [rip+0x300],eax        # 0x105dddb
 105dadb:	add    al,dh
 105dadd:	sbb    DWORD PTR [rip+0x400],eax        # 0x105dee3
 105dae3:	add    BYTE PTR [rax],al
 105dae5:	sbb    al,BYTE PTR [rip+0x0]        # 0x105daeb
 105daeb:	add    BYTE PTR [rax],dl
 105daed:	sbb    al,BYTE PTR [rip+0x0]        # 0x105daf3
 105daf3:	add    BYTE PTR [rax],ah
 105daf5:	sbb    al,BYTE PTR [rip+0x700]        # 0x105e1fb
 105dafb:	add    BYTE PTR [rax],dh
 105dafd:	sbb    al,BYTE PTR [rip+0x700]        # 0x105e203
 105db03:	add    BYTE PTR [rax+0x1a],al
 105db06:	add    eax,0x381a000
 105db0b:	add    bh,bh
 105db0d:	(bad)  
 105db0e:	(bad)  
 105db0f:	(bad)  
 105db10:	fadd   DWORD PTR [rcx+0x3]
 105db16:	add    BYTE PTR [rax],al
 105db18:	in     eax,dx
 105db19:	add    DWORD PTR [rbx],0x100
 105db1f:	add    BYTE PTR [rcx],al
 105db21:	(bad)  
 105db22:	add    eax,DWORD PTR [rax]
 105db24:	add    BYTE PTR [rax],al
 105db26:	add    BYTE PTR [rax],al
 105db28:	and    BYTE PTR [rdx+0x20003],al
 105db2e:	add    BYTE PTR [rax],al
 105db30:	ds (bad) 
 105db32:	add    eax,DWORD PTR [rax]
 105db34:	add    eax,DWORD PTR [rax]
 105db36:	add    BYTE PTR [rax],al
 105db38:	pop    rbp
 105db39:	(bad)  
 105db3a:	add    eax,DWORD PTR [rax]
 105db3c:	add    al,0x0
 105db3e:	add    BYTE PTR [rax],al
 105db40:	ins    BYTE PTR es:[rdi],dx
 105db41:	(bad)  
 105db42:	add    eax,DWORD PTR [rax]
 105db44:	add    eax,0x96000000
 105db49:	(bad)  
 105db4a:	add    eax,DWORD PTR [rax]
 105db4c:	add    al,0x0
 105db4e:	add    BYTE PTR [rax],al
 105db50:	movabs eax,ds:0xe000000003000382
 105db59:	(bad)  
 105db5a:	add    eax,DWORD PTR [rax]
 105db5c:	add    al,BYTE PTR [rax]
 105db5e:	add    BYTE PTR [rax],al
 105db60:	rex add DWORD PTR [rbx],0x0
 105db64:	add    BYTE PTR [rax],al
 105db66:	add    BYTE PTR [rax],al
 105db68:	pop    rcx
 105db69:	add    DWORD PTR [rbx],0x0
 105db6c:	(bad)  
 105db6d:	add    BYTE PTR [rax],al
 105db6f:	add    BYTE PTR [rbp-0x7d],ch
 105db72:	add    eax,DWORD PTR [rax]
 105db74:	add    BYTE PTR [rax],al
 105db76:	add    BYTE PTR [rax],al
 105db78:	jp     0x105dafd
 105db7a:	add    eax,DWORD PTR [rax]
 105db7c:	(bad)  
 105db7d:	add    BYTE PTR [rax],al
 105db7f:	add    BYTE PTR [rdx+0x383],dh
 105db85:	add    BYTE PTR [rax],al
 105db87:	add    dl,al
 105db89:	add    DWORD PTR [rbx],0x0
 105db8c:	(bad)  
 105db8d:	(bad)  
 105db8e:	(bad)  
 105db8f:	inc    edi
 105db91:	add    DWORD PTR [rbx],0x0
 105db94:	(bad)  
 105db95:	add    BYTE PTR [rax],al
 105db97:	add    BYTE PTR [rcx-0x7c],ch
 105db9a:	add    eax,DWORD PTR [rax]
 105db9c:	or     BYTE PTR [rax],al
 105db9e:	add    BYTE PTR [rax],al
 105dba0:	xchg   ebp,eax
 105dba1:	test   BYTE PTR [rbx],al
 105dba3:	add    BYTE PTR [rdi],al
 105dba5:	add    BYTE PTR [rax],al
 105dba7:	add    BYTE PTR [rdi+0x9000384],bh
 105dbad:	add    BYTE PTR [rax],al
 105dbaf:	add    dl,al
 105dbb1:	test   BYTE PTR [rbx],al
 105dbb3:	add    BYTE PTR [rdi],al
 105dbb5:	add    BYTE PTR [rax],al
 105dbb7:	add    BYTE PTR [rbx-0x7b],dl
 105dbba:	add    eax,DWORD PTR [rax]
 105dbbc:	add    BYTE PTR [rax],al
 105dbbe:	add    BYTE PTR [rax],al
 105dbc0:	movsxd eax,DWORD PTR [rbp-0xfffd]
 105dbc6:	(bad)  
 105dbc7:	push   QWORD PTR [rdi-0x7b]
 105dbca:	add    eax,DWORD PTR [rax]
 105dbcc:	(bad)  
 105dbcd:	add    BYTE PTR [rax],al
 105dbcf:	add    BYTE PTR [rdx+0x385],al
 105dbd5:	add    BYTE PTR [rax],al
 105dbd7:	add    BYTE PTR [rdx-0xfffc7b],dl
 105dbdd:	(bad)  
 105dbde:	(bad)  
 105dbdf:	call   FWORD PTR [rcx]
 105dbe1:	or     r8d,DWORD PTR [r8]
 105dbe4:	xor    al,0x34
 105dbe6:	jge    0x105dbea
 105dbe8:	and    DWORD PTR [rcx],eax
 105dbea:	jb     0x105dbee
 105dbec:	or     al,0xf0
 105dbee:	or     ah,al
 105dbf0:	or     al,dl
 105dbf2:	(bad)  
 105dbf3:	rol    BYTE PTR [rax+rsi*2],0x3
 105dbf7:	(bad)  
 105dbf8:	add    dl,BYTE PTR [rax+0x0]
 105dbfb:	add    BYTE PTR [rax+0x400003fe],ah
 105dc01:	js     0x105dc03
 105dc03:	add    BYTE PTR [rdx-0xffffed],al
 105dc09:	(bad)  
 105dc0a:	(bad)  
 105dc0b:	call   QWORD PTR [rax]
 105dc0d:	adc    DWORD PTR [rip+0x0],eax        # 0x105dc13
 105dc13:	add    BYTE PTR [rax],ah
 105dc15:	adc    DWORD PTR [rip+0x100],eax        # 0x105dd1b
 105dc1b:	add    BYTE PTR [rax],dh
 105dc1d:	adc    DWORD PTR [rip+0x200],eax        # 0x105de23
 105dc23:	add    BYTE PTR [rax+0x11],al
 105dc26:	add    eax,0x300
 105dc2b:	add    BYTE PTR [rax+0x11],dl
 105dc2e:	add    eax,0x400
 105dc33:	add    BYTE PTR [rax+0x11],ah
 105dc36:	add    eax,0x500
 105dc3b:	add    BYTE PTR [rax+0x11],dh
 105dc3e:	add    eax,0x600
 105dc43:	add    BYTE PTR [rax+0x7000511],al
 105dc49:	add    BYTE PTR [rax],al
 105dc4b:	add    BYTE PTR [rax+0x8000511],dl
 105dc51:	add    BYTE PTR [rax],al
 105dc53:	add    BYTE PTR [rax+0x9000511],ah
 105dc59:	add    BYTE PTR [rax],al
 105dc5b:	add    BYTE PTR [rax+0xa000511],dh
 105dc61:	add    BYTE PTR [rax],al
 105dc63:	add    al,al
 105dc65:	adc    DWORD PTR [rip+0xb00],eax        # 0x105e76b
 105dc6b:	add    al,dl
 105dc6d:	adc    DWORD PTR [rip+0xb00],eax        # 0x105e773
 105dc73:	add    al,ah
 105dc75:	adc    DWORD PTR [rip+0xb00],eax        # 0x105e77b
 105dc7b:	add    al,dh
 105dc7d:	adc    DWORD PTR [rip+0xb00],eax        # 0x105e783
 105dc83:	add    BYTE PTR [rax],al
 105dc85:	adc    al,BYTE PTR [rip+0xb00]        # 0x105e78b
 105dc8b:	add    BYTE PTR [rax],dl
 105dc8d:	adc    al,BYTE PTR [rip+0xb00]        # 0x105e793
 105dc93:	add    BYTE PTR [rax],ah
 105dc95:	adc    al,BYTE PTR [rip+0xb00]        # 0x105e79b
 105dc9b:	add    BYTE PTR [rax],dh
 105dc9d:	adc    al,BYTE PTR [rip+0x1200]        # 0x105eea3
 105dca3:	add    BYTE PTR [rax+0x12],al
 105dca6:	add    eax,0xb00
 105dcab:	add    BYTE PTR [rax+0x12],dl
 105dcae:	add    eax,0xb00
 105dcb3:	add    BYTE PTR [rax+0x12],ah
 105dcb6:	add    eax,0x1500
 105dcbb:	add    BYTE PTR [rax+0x12],dh
 105dcbe:	add    eax,0xb00
 105dcc3:	add    BYTE PTR [rax+0x17000512],al
 105dcc9:	add    BYTE PTR [rax],al
 105dccb:	add    BYTE PTR [rax+0xb000512],dl
 105dcd1:	add    BYTE PTR [rax],al
 105dcd3:	add    BYTE PTR [rax+0x19000512],ah
 105dcd9:	add    BYTE PTR [rax],al
 105dcdb:	add    BYTE PTR [rax+0xb000512],dh
 105dce1:	add    BYTE PTR [rax],al
 105dce3:	add    al,al
 105dce5:	adc    al,BYTE PTR [rip+0x1b00]        # 0x105f7eb
 105dceb:	add    al,dl
 105dced:	adc    al,BYTE PTR [rip+0xb00]        # 0x105e7f3
 105dcf3:	add    al,ah
 105dcf5:	adc    al,BYTE PTR [rip+0x1d00]        # 0x105f9fb
 105dcfb:	add    al,dh
 105dcfd:	adc    al,BYTE PTR [rip+0xb00]        # 0x105e803
 105dd03:	add    BYTE PTR [rax],al
 105dd05:	adc    eax,DWORD PTR [rip+0xb00]        # 0x105e80b
 105dd0b:	add    BYTE PTR [rax],dl
 105dd0d:	adc    eax,DWORD PTR [rip+0xb00]        # 0x105e813
 105dd13:	add    BYTE PTR [rax],ah
 105dd15:	adc    eax,DWORD PTR [rip+0xb00]        # 0x105e81b
 105dd1b:	add    BYTE PTR [rax],dh
 105dd1d:	adc    eax,DWORD PTR [rip+0xb00]        # 0x105e823
 105dd23:	add    BYTE PTR [rax+0x13],al
 105dd26:	add    eax,0xb00
 105dd2b:	add    BYTE PTR [rax+0x13],dl
 105dd2e:	add    eax,0xb00
 105dd33:	add    BYTE PTR [rax+0x13],ah
 105dd36:	add    eax,0x2500
 105dd3b:	add    BYTE PTR [rax+0x13],dh
 105dd3e:	add    eax,0xb00
 105dd43:	add    BYTE PTR [rax+0x13],dh
 105dd46:	add    eax,0x2700
 105dd4b:	add    BYTE PTR [rax+0x28000513],al
 105dd51:	add    BYTE PTR [rax],al
 105dd53:	add    BYTE PTR [rax+0xb000513],dl
 105dd59:	add    BYTE PTR [rax],al
 105dd5b:	add    BYTE PTR [rax+0xb000513],ah
 105dd61:	add    BYTE PTR [rax],al
 105dd63:	add    BYTE PTR [rax+0x2b000513],dh
 105dd69:	add    BYTE PTR [rax],al
 105dd6b:	add    al,al
 105dd6d:	adc    eax,DWORD PTR [rip+0xb00]        # 0x105e873
 105dd73:	add    al,dl
 105dd75:	adc    eax,DWORD PTR [rip+0x2d00]        # 0x1060a7b
 105dd7b:	add    al,ah
 105dd7d:	adc    eax,DWORD PTR [rip+0xb00]        # 0x105e883
 105dd83:	add    al,dh
 105dd85:	adc    eax,DWORD PTR [rip+0x2f00]        # 0x1060c8b
 105dd8b:	add    BYTE PTR [rax],al
 105dd8d:	adc    al,0x5
 105dd8f:	add    BYTE PTR [rbx],cl
 105dd91:	add    BYTE PTR [rax],al
 105dd93:	add    BYTE PTR [rax],dl
 105dd95:	adc    al,0x5
 105dd97:	add    BYTE PTR [rbx],cl
 105dd99:	add    BYTE PTR [rax],al
 105dd9b:	add    BYTE PTR [rax],ah
 105dd9d:	adc    al,0x5
 105dd9f:	add    BYTE PTR [rdx],dh
 105dda1:	add    BYTE PTR [rax],al
 105dda3:	add    BYTE PTR [rax],dh
 105dda5:	adc    al,0x5
 105dda7:	add    BYTE PTR [rdx],dh
 105dda9:	add    BYTE PTR [rax],al
 105ddab:	add    BYTE PTR [rax+0x14],ah
 105ddae:	add    eax,0xb00
 105ddb3:	add    BYTE PTR [rax+0x14],dh
 105ddb6:	add    eax,0x3500
 105ddbb:	add    BYTE PTR [rax+0xb000514],al
 105ddc1:	add    BYTE PTR [rax],al
 105ddc3:	add    BYTE PTR [rax+0x37000514],dl
 105ddc9:	add    BYTE PTR [rax],al
 105ddcb:	add    BYTE PTR [rax+0xb000514],ah
 105ddd1:	add    BYTE PTR [rax],al
 105ddd3:	add    BYTE PTR [rax+0x39000514],dh
 105ddd9:	add    BYTE PTR [rax],al
 105dddb:	add    al,al
 105dddd:	adc    al,0x5
 105dddf:	add    BYTE PTR [rbx],cl
 105dde1:	add    BYTE PTR [rax],al
 105dde3:	add    al,dl
 105dde5:	adc    al,0x5
 105dde7:	add    BYTE PTR [rbx],bh
 105dde9:	add    BYTE PTR [rax],al
 105ddeb:	add    al,ah
 105dded:	adc    al,0x5
 105ddef:	add    BYTE PTR [rbx],cl
 105ddf1:	add    BYTE PTR [rax],al
 105ddf3:	add    al,dh
 105ddf5:	adc    al,0x5
 105ddf7:	add    BYTE PTR [rbx],cl
 105ddf9:	add    BYTE PTR [rax],al
 105ddfb:	add    BYTE PTR [rax],al
 105ddfd:	adc    eax,0x3e0005
 105de02:	add    BYTE PTR [rax],al
 105de04:	adc    BYTE PTR [rip+0x3e0005],dl        # 0x143de0f
 105de0a:	add    BYTE PTR [rax],al
 105de0c:	rex adc eax,0xb0005
 105de12:	add    BYTE PTR [rax],al
 105de14:	push   rax
 105de15:	adc    eax,0x410005
 105de1a:	add    BYTE PTR [rax],al
 105de1c:	(bad)  
 105de1d:	adc    eax,0xb0005
 105de22:	add    BYTE PTR [rax],al
 105de24:	jo     0x105de3b
 105de26:	add    eax,0x4300
 105de2b:	add    BYTE PTR [rax+0xb000515],al
 105de31:	add    BYTE PTR [rax],al
 105de33:	add    BYTE PTR [rax+0xb000515],dl
 105de39:	add    BYTE PTR [rax],al
 105de3b:	add    BYTE PTR [rax+0xb000515],ah
 105de41:	add    BYTE PTR [rax],al
 105de43:	add    BYTE PTR [rax+0xb000515],dh
 105de49:	add    BYTE PTR [rax],al
 105de4b:	add    al,al
 105de4d:	adc    eax,0xb0005
 105de52:	add    BYTE PTR [rax],al
 105de54:	rcl    BYTE PTR [rip+0xb0005],1        # 0x110de5f
 105de5a:	add    BYTE PTR [rax],al
 105de5c:	loopne 0x105de73
 105de5e:	add    eax,0xb00
 105de63:	add    al,dh
 105de65:	adc    eax,0xb0005
 105de6a:	add    BYTE PTR [rax],al
 105de6c:	add    BYTE PTR [rsi],dl
 105de6e:	add    eax,0xb00
 105de73:	add    BYTE PTR [rax],dl
 105de75:	(bad)  
 105de76:	add    eax,0xb00
 105de7b:	add    BYTE PTR [rax],ah
 105de7d:	(bad)  
 105de7e:	add    eax,0xb00
 105de83:	add    BYTE PTR [rax],dh
 105de85:	(bad)  
 105de86:	add    eax,0xb00
 105de8b:	add    BYTE PTR [rax+0x16],al
 105de8e:	add    eax,0xb00
 105de93:	add    BYTE PTR [rax+0x16],dl
 105de96:	add    eax,0xb00
 105de9b:	add    BYTE PTR [rax+0x16],ah
 105de9e:	add    eax,0xb00
 105dea3:	add    BYTE PTR [rax+0x16],dh
 105dea6:	add    eax,0xb00
 105deab:	add    BYTE PTR [rax+0x54000516],al
 105deb1:	add    BYTE PTR [rax],al
 105deb3:	add    BYTE PTR [rax+0xb000516],dl
 105deb9:	add    BYTE PTR [rax],al
 105debb:	add    BYTE PTR [rax+0x56000516],dl
 105dec1:	add    BYTE PTR [rax],al
 105dec3:	add    BYTE PTR [rax+0x57000516],ah
 105dec9:	add    BYTE PTR [rax],al
 105decb:	add    BYTE PTR [rax+0xb000516],dh
 105ded1:	add    BYTE PTR [rax],al
 105ded3:	add    al,al
 105ded5:	(bad)  
 105ded6:	add    eax,0xb00
 105dedb:	add    al,dl
 105dedd:	(bad)  
 105dede:	add    eax,0xb00
 105dee3:	add    al,ah
 105dee5:	(bad)  
 105dee6:	add    eax,0xb00
 105deeb:	add    al,dh
 105deed:	(bad)  
 105deee:	add    eax,0xb00
 105def3:	add    BYTE PTR [rax],al
 105def5:	(bad)  
 105def6:	add    eax,0xb00
 105defb:	add    BYTE PTR [rax],dl
 105defd:	(bad)  
 105defe:	add    eax,0x385c000
 105df03:	add    bh,bh
 105df05:	(bad)  
 105df06:	(bad)  
 105df07:	jmp    QWORD PTR [rip+0x386]        # 0x105e293
 105df0d:	add    BYTE PTR [rax],al
 105df0f:	add    BYTE PTR [rcx],dh
 105df11:	xchg   BYTE PTR [rbx],al
 105df13:	add    BYTE PTR [rcx],al
 105df15:	add    BYTE PTR [rax],al
 105df17:	add    BYTE PTR [rip+0x2000386],bh        # 0x305e2a3
 105df1d:	add    BYTE PTR [rax],al
 105df1f:	add    BYTE PTR [rax-0x7a],cl
 105df22:	add    eax,DWORD PTR [rax]
 105df24:	add    eax,DWORD PTR [rax]
 105df26:	add    BYTE PTR [rax],al
 105df28:	push   rbx
 105df29:	xchg   BYTE PTR [rbx],al
 105df2b:	add    BYTE PTR [rax+rax*1],al
 105df2e:	add    BYTE PTR [rax],al
 105df30:	pop    rdi
 105df31:	xchg   BYTE PTR [rbx],al
 105df33:	add    BYTE PTR [rip+0x6a000000],al        # 0x6b05df39
 105df39:	xchg   BYTE PTR [rbx],al
 105df3b:	add    BYTE PTR [rsi],al
 105df3d:	add    BYTE PTR [rax],al
 105df3f:	add    BYTE PTR [rax-0x7a],dh
 105df42:	add    eax,DWORD PTR [rax]
 105df44:	(bad)  
 105df45:	add    BYTE PTR [rax],al
 105df47:	add    BYTE PTR [rdi-0x7a],dh
 105df4a:	add    eax,DWORD PTR [rax]
 105df4c:	or     BYTE PTR [rax],al
 105df4e:	add    BYTE PTR [rax],al
 105df50:	jge    0x105ded8
 105df52:	add    eax,DWORD PTR [rax]
 105df54:	or     DWORD PTR [rax],eax
 105df56:	add    BYTE PTR [rax],al
 105df58:	test   BYTE PTR [rsi+0xa0003],al
 105df5e:	add    BYTE PTR [rax],al
 105df60:	mov    BYTE PTR [rsi+0xb0003],al
 105df66:	add    BYTE PTR [rax],al
 105df68:	mov    ebp,0xc000386
 105df6d:	add    BYTE PTR [rax],al
 105df6f:	add    ah,cl
 105df71:	xchg   BYTE PTR [rbx],al
 105df73:	add    BYTE PTR [rbx],cl
 105df75:	add    BYTE PTR [rax],al
 105df77:	add    BYTE PTR [rcx],ah
 105df79:	xchg   DWORD PTR [rbx],eax
 105df7b:	add    BYTE PTR [rip+0x30000000],cl        # 0x3105df81
 105df81:	xchg   DWORD PTR [rbx],eax
 105df83:	add    BYTE PTR [rbx],cl
 105df85:	add    BYTE PTR [rax],al
 105df87:	add    BYTE PTR [rdi+rax*4+0x3],ch
 105df8b:	add    BYTE PTR [rsi],cl
 105df8d:	add    BYTE PTR [rax],al
 105df8f:	add    BYTE PTR [rax+0xb000387],dl
 105df95:	add    BYTE PTR [rax],al
 105df97:	add    bh,dl
 105df99:	xchg   DWORD PTR [rbx],eax
 105df9b:	add    BYTE PTR [rdi],cl
 105df9d:	add    BYTE PTR [rax],al
 105df9f:	add    bl,bh
 105dfa1:	xchg   DWORD PTR [rbx],eax
 105dfa3:	add    BYTE PTR [rbx],cl
 105dfa5:	add    BYTE PTR [rax],al
 105dfa7:	add    BYTE PTR [rbx],dh
 105dfa9:	mov    BYTE PTR [rbx],al
 105dfab:	add    BYTE PTR [rax],dl
 105dfad:	add    BYTE PTR [rax],al
 105dfaf:	add    BYTE PTR [rdx-0x78],bl
 105dfb2:	add    eax,DWORD PTR [rax]
 105dfb4:	or     eax,DWORD PTR [rax]
 105dfb6:	add    BYTE PTR [rax],al
 105dfb8:	fimul  DWORD PTR [rax+0x50003]
 105dfbe:	add    BYTE PTR [rax],al
 105dfc0:	in     eax,0x88
 105dfc2:	add    eax,DWORD PTR [rax]
 105dfc4:	add    al,0x0
 105dfc6:	add    BYTE PTR [rax],al
 105dfc8:	icebp  
 105dfc9:	mov    BYTE PTR [rbx],al
 105dfcb:	add    BYTE PTR [rbx],al
 105dfcd:	add    BYTE PTR [rax],al
 105dfcf:	add    ah,bh
 105dfd1:	mov    BYTE PTR [rbx],al
 105dfd3:	add    BYTE PTR [rdx],al
 105dfd5:	add    BYTE PTR [rax],al
 105dfd7:	add    BYTE PTR [rdi],al
 105dfd9:	mov    DWORD PTR [rbx],eax
 105dfdb:	add    BYTE PTR [rcx],al
 105dfdd:	add    BYTE PTR [rax],al
 105dfdf:	add    BYTE PTR [rbx],dl
 105dfe1:	mov    DWORD PTR [rbx],eax
 105dfe3:	add    BYTE PTR [rax],al
 105dfe5:	add    BYTE PTR [rax],al
 105dfe7:	add    BYTE PTR [rdi],bl
 105dfe9:	mov    DWORD PTR [rbx],eax
 105dfeb:	add    bh,bh
 105dfed:	(bad)  
 105dfee:	(bad)  
 105dfef:	push   QWORD PTR [rax]
 105dff1:	mov    DWORD PTR [rbx],eax
 105dff3:	add    BYTE PTR [rbx],cl
 105dff5:	add    BYTE PTR [rax],al
 105dff7:	add    BYTE PTR [rsi],bh
 105dff9:	mov    DWORD PTR [rbx],eax
 105dffb:	add    BYTE PTR [rcx],dl
 105dffd:	add    BYTE PTR [rax],al
 105dfff:	add    BYTE PTR [rbp-0x77],cl
 105e002:	add    eax,DWORD PTR [rax]
 105e004:	or     eax,DWORD PTR [rax]
 105e006:	add    BYTE PTR [rax],al
 105e008:	int    0x89
 105e00a:	add    eax,DWORD PTR [rax]
 105e00c:	adc    al,BYTE PTR [rax]
 105e00e:	add    BYTE PTR [rax],al
 105e010:	jp     0x118e019
 105e016:	add    BYTE PTR [rax],al
 105e018:	(bad)  
 105e019:	mov    al,BYTE PTR [rbx]
 105e01b:	add    BYTE PTR [rdx],dl
 105e01d:	add    BYTE PTR [rax],al
 105e01f:	add    BYTE PTR [rdx+rcx*4],ch
 105e022:	add    eax,DWORD PTR [rax]
 105e024:	or     eax,DWORD PTR [rax]
 105e026:	add    BYTE PTR [rax],al
 105e028:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 105e029:	mov    al,BYTE PTR [rbx]
 105e02b:	add    BYTE PTR [rax+rax*1],dl
 105e02e:	add    BYTE PTR [rax],al
 105e030:	ror    DWORD PTR [rdx+0xb0003],0x0
 105e037:	add    ch,ch
 105e039:	mov    al,BYTE PTR [rbx]
 105e03b:	add    BYTE PTR [rip+0x2f000000],dl        # 0x3005e041
 105e041:	mov    eax,DWORD PTR [rbx]
 105e043:	add    BYTE PTR [rsi],dl
 105e045:	add    BYTE PTR [rax],al
 105e047:	add    BYTE PTR [rsi],bh
 105e049:	mov    eax,DWORD PTR [rbx]
 105e04b:	add    BYTE PTR [rip+0x4c000000],dl        # 0x4d05e051
 105e051:	mov    eax,DWORD PTR [rbx]
 105e053:	add    BYTE PTR [rbx],cl
 105e055:	add    BYTE PTR [rax],al
 105e057:	add    BYTE PTR [rdi+0x1700038b],cl
 105e05d:	add    BYTE PTR [rax],al
 105e05f:	add    cl,dl
 105e061:	mov    eax,DWORD PTR [rbx]
 105e063:	add    BYTE PTR [rax],bl
 105e065:	add    BYTE PTR [rax],al
 105e067:	add    al,ah
 105e069:	mov    eax,DWORD PTR [rbx]
 105e06b:	add    BYTE PTR [rdi],dl
 105e06d:	add    BYTE PTR [rax],al
 105e06f:	add    dh,ch
 105e071:	mov    eax,DWORD PTR [rbx]
 105e073:	add    BYTE PTR [rbx],cl
 105e075:	add    BYTE PTR [rax],al
 105e077:	add    BYTE PTR [rax],bh
 105e079:	mov    WORD PTR [rbx],es
 105e07b:	add    BYTE PTR [rcx],bl
 105e07d:	add    BYTE PTR [rax],al
 105e07f:	add    BYTE PTR [rdx-0x74],bh
 105e082:	add    eax,DWORD PTR [rax]
 105e084:	sbb    al,BYTE PTR [rax]
 105e086:	add    BYTE PTR [rax],al
 105e088:	mov    BYTE PTR [rbx+rax*1+0x1900],cl
 105e08f:	add    BYTE PTR [rsi+0xb00038c],dl
 105e095:	add    BYTE PTR [rax],al
 105e097:	add    bh,ah
 105e099:	mov    WORD PTR [rbx],es
 105e09b:	add    BYTE PTR [rbx],bl
 105e09d:	add    BYTE PTR [rax],al
 105e09f:	add    BYTE PTR [rcx],ch
 105e0a1:	lea    eax,[rbx]
 105e0a3:	add    BYTE PTR [rax+rax*1],bl
 105e0a6:	add    BYTE PTR [rax],al
 105e0a8:	(bad)  
 105e0a9:	lea    eax,[rbx]
 105e0ab:	add    BYTE PTR [rbx],bl
 105e0ad:	add    BYTE PTR [rax],al
 105e0af:	add    BYTE PTR [rbp-0x73],al
 105e0b2:	add    eax,DWORD PTR [rax]
 105e0b4:	or     eax,DWORD PTR [rax]
 105e0b6:	add    BYTE PTR [rax],al
 105e0b8:	cdq    
 105e0b9:	lea    eax,[rbx]
 105e0bb:	add    BYTE PTR [rip+0xffffffffdb000000],bl        # 0xffffffffdc05e0c1
 105e0c1:	lea    eax,[rbx]
 105e0c3:	add    BYTE PTR [rsi],bl
 105e0c5:	add    BYTE PTR [rax],al
 105e0c7:	add    dl,ch
 105e0c9:	lea    eax,[rbx]
 105e0cb:	add    BYTE PTR [rip+0xfffffffff8000000],bl        # 0xfffffffff905e0d1
 105e0d1:	lea    eax,[rbx]
 105e0d3:	add    BYTE PTR [rbx],cl
 105e0d5:	add    BYTE PTR [rax],al
 105e0d7:	add    BYTE PTR [rsi-0x72],al
 105e0da:	add    eax,DWORD PTR [rax]
 105e0dc:	(bad)  
 105e0dd:	add    BYTE PTR [rax],al
 105e0df:	add    BYTE PTR [rbp+0xb00038e],al
 105e0e5:	add    BYTE PTR [rax],al
 105e0e7:	add    BYTE PTR [rbx+0x2000038e],ch
 105e0ed:	add    BYTE PTR [rax],al
 105e0ef:	add    bl,ah
 105e0f1:	mov    es,WORD PTR [rbx]
 105e0f3:	add    BYTE PTR [rbx],cl
 105e0f5:	add    BYTE PTR [rax],al
 105e0f7:	add    bh,dh
 105e0f9:	mov    es,WORD PTR [rbx]
 105e0fb:	add    BYTE PTR [rcx],ah
 105e0fd:	add    BYTE PTR [rax],al
 105e0ff:	add    BYTE PTR [rax],dl
 105e101:	pop    QWORD PTR [rbx]
 105e103:	add    BYTE PTR [rbx],cl
 105e105:	add    BYTE PTR [rax],al
 105e107:	add    BYTE PTR [rcx],ah
 105e109:	pop    QWORD PTR [rbx]
 105e10b:	add    BYTE PTR [rdx],ah
 105e10d:	add    BYTE PTR [rax],al
 105e10f:	add    BYTE PTR [rdi],dh
 105e111:	pop    QWORD PTR [rbx]
 105e113:	add    BYTE PTR [rbx],cl
 105e115:	add    BYTE PTR [rax],al
 105e117:	add    dl,dh
 105e119:	pop    QWORD PTR [rbx]
 105e11b:	add    BYTE PTR [rbx],ah
 105e11d:	add    BYTE PTR [rax],al
 105e11f:	add    BYTE PTR [rsi],bl
 105e121:	nop
 105e122:	add    eax,DWORD PTR [rax]
 105e124:	or     eax,DWORD PTR [rax]
 105e126:	add    BYTE PTR [rax],al
 105e128:	xchg   r8,rax
 105e12a:	add    eax,DWORD PTR [rax]
 105e12c:	and    al,0x0
 105e12e:	add    BYTE PTR [rax],al
 105e130:	outs   dx,BYTE PTR ds:[rsi]
 105e131:	nop
 105e132:	add    eax,DWORD PTR [rax]
 105e134:	or     eax,DWORD PTR [rax]
 105e136:	add    BYTE PTR [rax],al
 105e138:	jnp    0x105e0ca
 105e13a:	add    eax,DWORD PTR [rax]
 105e13c:	and    eax,0x94000000
 105e141:	nop
 105e142:	add    eax,DWORD PTR [rax]
 105e144:	add    BYTE PTR es:[rax],al
 105e147:	add    BYTE PTR [rax+0x27000390],ah
 105e14d:	add    BYTE PTR [rax],al
 105e14f:	add    BYTE PTR [rcx+0x28000390],dh
 105e155:	add    BYTE PTR [rax],al
 105e157:	add    bh,al
 105e159:	nop
 105e15a:	add    eax,DWORD PTR [rax]
 105e15c:	sub    DWORD PTR [rax],eax
 105e15e:	add    BYTE PTR [rax],al
 105e160:	loop   0x105e0f2
 105e162:	add    eax,DWORD PTR [rax]
 105e164:	sub    BYTE PTR [rax],al
 105e166:	add    BYTE PTR [rax],al
 105e168:	sub    al,0x91
 105e16a:	add    eax,DWORD PTR [rax]
 105e16c:	(bad)  
 105e16d:	add    BYTE PTR [rax],al
 105e16f:	add    BYTE PTR [rdi],bh
 105e171:	xchg   ecx,eax
 105e172:	add    eax,DWORD PTR [rax]
 105e174:	or     eax,DWORD PTR [rax]
 105e176:	add    BYTE PTR [rax],al
 105e178:	addr32 xchg ecx,eax
 105e17a:	add    eax,DWORD PTR [rax]
 105e17c:	sub    BYTE PTR [rax],al
 105e17e:	add    BYTE PTR [rax],al
 105e180:	jb     0x105e113
 105e182:	add    eax,DWORD PTR [rax]
 105e184:	add    BYTE PTR es:[rax],al
 105e187:	add    BYTE PTR [rbp-0x6f],bh
 105e18a:	add    eax,DWORD PTR [rax]
 105e18c:	and    eax,0x88000000
 105e191:	xchg   ecx,eax
 105e192:	add    eax,DWORD PTR [rax]
 105e194:	or     eax,DWORD PTR [rax]
 105e196:	add    BYTE PTR [rax],al
 105e198:	mov    bl,0x91
 105e19a:	add    eax,DWORD PTR [rax]
 105e19c:	sub    al,BYTE PTR [rax]
 105e19e:	add    BYTE PTR [rax],al
 105e1a0:	rcl    DWORD PTR [rcx+0xb0003],0x0
 105e1a7:	add    BYTE PTR [rbx],dh
 105e1a9:	xchg   edx,eax
 105e1aa:	add    eax,DWORD PTR [rax]
 105e1ac:	sub    eax,DWORD PTR [rax]
 105e1ae:	add    BYTE PTR [rax],al
 105e1b0:	jae    0x105e144
 105e1b2:	add    eax,DWORD PTR [rax]
 105e1b4:	sub    al,0x0
 105e1b6:	add    BYTE PTR [rax],al
 105e1b8:	mov    BYTE PTR [rdx+0x2b0003],dl
 105e1be:	add    BYTE PTR [rax],al
 105e1c0:	xchg   esi,eax
 105e1c1:	xchg   edx,eax
 105e1c2:	add    eax,DWORD PTR [rax]
 105e1c4:	or     eax,DWORD PTR [rax]
 105e1c6:	add    BYTE PTR [rax],al
 105e1c8:	mov    esi,0x2d000392
 105e1cd:	add    BYTE PTR [rax],al
 105e1cf:	add    dh,bh
 105e1d1:	xchg   edx,eax
 105e1d2:	add    eax,DWORD PTR [rax]
 105e1d4:	add    BYTE PTR cs:[rax],al
 105e1d7:	add    BYTE PTR [rdx],dl
 105e1d9:	xchg   ebx,eax
 105e1da:	add    eax,DWORD PTR [rax]
 105e1dc:	sub    eax,0x20000000
 105e1e1:	xchg   ebx,eax
 105e1e2:	add    eax,DWORD PTR [rax]
 105e1e4:	or     eax,DWORD PTR [rax]
 105e1e6:	add    BYTE PTR [rax],al
 105e1e8:	xchg   rbx,rax
 105e1ea:	add    eax,DWORD PTR [rax]
 105e1ec:	(bad)  
 105e1ed:	add    BYTE PTR [rax],al
 105e1ef:	add    BYTE PTR [rax+0x30000393],cl
 105e1f5:	add    BYTE PTR [rax],al
 105e1f7:	add    BYTE PTR [rbx+rdx*4+0x2f0003],bl
 105e1fe:	add    BYTE PTR [rax],al
 105e200:	stos   BYTE PTR es:[rdi],al
 105e201:	xchg   ebx,eax
 105e202:	add    eax,DWORD PTR [rax]
 105e204:	or     eax,DWORD PTR [rax]
 105e206:	add    BYTE PTR [rax],al
 105e208:	sub    al,0x94
 105e20a:	add    eax,DWORD PTR [rax]
 105e20c:	xor    DWORD PTR [rax],eax
 105e20e:	add    BYTE PTR [rax],al
 105e210:	imul   edx,DWORD PTR [rbx+rax*1+0xb00],0x0
 105e218:	lods   eax,DWORD PTR ds:[rsi]
 105e219:	xchg   esp,eax
 105e21a:	add    eax,DWORD PTR [rax]
 105e21c:	xor    al,BYTE PTR [rax]
 105e21e:	add    BYTE PTR [rax],al
 105e220:	(bad)  
 105e221:	xchg   esp,eax
 105e222:	add    eax,DWORD PTR [rax]
 105e224:	xor    eax,DWORD PTR [rax]
 105e226:	add    BYTE PTR [rax],al
 105e228:	repz xchg esp,eax
 105e22a:	add    eax,DWORD PTR [rax]
 105e22c:	xor    al,BYTE PTR [rax]
 105e22e:	add    BYTE PTR [rax],al
 105e230:	not    DWORD PTR [rbx+rax*1+0x3300]
 105e237:	add    dl,bh
 105e239:	xchg   esp,eax
 105e23a:	add    eax,DWORD PTR [rax]
 105e23c:	xor    al,BYTE PTR [rax]
 105e23e:	add    BYTE PTR [rax],al
 105e240:	xor    DWORD PTR [rbp+0x340003],edx
 105e246:	add    BYTE PTR [rax],al
 105e248:	(bad)  
 105e249:	xchg   ebp,eax
 105e24a:	add    eax,DWORD PTR [rax]
 105e24c:	xor    al,BYTE PTR [rax]
 105e24e:	add    BYTE PTR [rax],al
 105e250:	xchg   DWORD PTR [rbp+0xb0003],edx
 105e256:	add    BYTE PTR [rax],al
 105e258:	rcl    DWORD PTR [rbp+0x350003],0x0
 105e25f:	add    BYTE PTR [rbx],al
 105e261:	xchg   esi,eax
 105e262:	add    eax,DWORD PTR [rax]
 105e264:	add    BYTE PTR ss:[rax],al
 105e267:	add    BYTE PTR [rdx],dl
 105e269:	xchg   esi,eax
 105e26a:	add    eax,DWORD PTR [rax]
 105e26c:	xor    eax,0x20000000
 105e271:	xchg   esi,eax
 105e272:	add    eax,DWORD PTR [rax]
 105e274:	or     eax,DWORD PTR [rax]
 105e276:	add    BYTE PTR [rax],al
 105e278:	addr32 xchg esi,eax
 105e27a:	add    eax,DWORD PTR [rax]
 105e27c:	(bad)  
 105e27d:	add    BYTE PTR [rax],al
 105e27f:	add    BYTE PTR [rcx+0x38000396],ch
 105e285:	add    BYTE PTR [rax],al
 105e287:	add    BYTE PTR [rsi+0x37000396],bh
 105e28d:	add    BYTE PTR [rax],al
 105e28f:	add    ah,cl
 105e291:	xchg   esi,eax
 105e292:	add    eax,DWORD PTR [rax]
 105e294:	or     eax,DWORD PTR [rax]
 105e296:	add    BYTE PTR [rax],al
 105e298:	adc    DWORD PTR [rdi+0x390003],edx
 105e29e:	add    BYTE PTR [rax],al
 105e2a0:	push   rbx
 105e2a1:	xchg   edi,eax
 105e2a2:	add    eax,DWORD PTR [rax]
 105e2a4:	cmp    al,BYTE PTR [rax]
 105e2a6:	add    BYTE PTR [rax],al
 105e2a8:	jae    0x105e241
 105e2aa:	add    eax,DWORD PTR [rax]
 105e2ac:	cmp    DWORD PTR [rax],eax
 105e2ae:	add    BYTE PTR [rax],al
 105e2b0:	adc    DWORD PTR [rdi+0xb0003],0x97a80000
 105e2ba:	add    eax,DWORD PTR [rax]
 105e2bc:	cmp    eax,DWORD PTR [rax]
 105e2be:	add    BYTE PTR [rax],al
 105e2c0:	(bad)  
 105e2c1:	xchg   edi,eax
 105e2c2:	add    eax,DWORD PTR [rax]
 105e2c4:	cmp    al,0x0
 105e2c6:	add    BYTE PTR [rax],al
 105e2c8:	or     DWORD PTR [rax+0x3b0003],ebx
 105e2ce:	add    BYTE PTR [rax],al
 105e2d0:	(bad)  
 105e2d1:	cwde   
 105e2d2:	add    eax,DWORD PTR [rax]
 105e2d4:	or     eax,DWORD PTR [rax]
 105e2d6:	add    BYTE PTR [rax],al
 105e2d8:	pop    rsi
 105e2d9:	cwde   
 105e2da:	add    eax,DWORD PTR [rax]
 105e2dc:	cmp    eax,0x9d000000
 105e2e1:	cwde   
 105e2e2:	add    eax,DWORD PTR [rax]
 105e2e4:	or     eax,DWORD PTR [rax]
 105e2e6:	add    BYTE PTR [rax],al
 105e2e8:	rcr    BYTE PTR [rax+0x3e0003],0x0
 105e2ef:	add    dh,ah
 105e2f1:	cwde   
 105e2f2:	add    eax,DWORD PTR [rax]
 105e2f4:	(bad)  
 105e2f5:	add    BYTE PTR [rax],al
 105e2f7:	add    BYTE PTR [rdi],cl
 105e2f9:	cdq    
 105e2fa:	add    eax,DWORD PTR [rax]
 105e2fc:	add    BYTE PTR ds:[rax],al
 105e2ff:	add    BYTE PTR [rcx+rbx*4],dl
 105e302:	add    eax,DWORD PTR [rax]
 105e304:	(bad)  
 105e305:	add    BYTE PTR [rax],al
 105e307:	add    BYTE PTR [rcx],bl
 105e309:	cdq    
 105e30a:	add    eax,DWORD PTR [rax]
 105e30c:	add    BYTE PTR ds:[rax],al
 105e30f:	add    BYTE PTR [rcx+rbx*4+0x3],dl
 105e313:	add    BYTE PTR [rax+0x0],al
 105e316:	add    BYTE PTR [rax],al
 105e318:	(bad)  
 105e319:	cdq    
 105e31a:	add    eax,DWORD PTR [rax]
 105e31c:	add    BYTE PTR ds:[rax],al
 105e31f:	add    BYTE PTR [rdi-0x67],bh
 105e322:	add    eax,DWORD PTR [rax]
 105e324:	or     eax,DWORD PTR [rax]
 105e326:	add    BYTE PTR [rax],al
 105e328:	movabs ds:0xe500000041000399,eax
 105e331:	cdq    
 105e332:	add    eax,DWORD PTR [rax]
 105e334:	rex.X add BYTE PTR [rax],al
 105e337:	add    dl,bh
 105e339:	cdq    
 105e33a:	add    eax,DWORD PTR [rax]
 105e33c:	add    BYTE PTR [r8],al
 105e33f:	add    BYTE PTR [rax],cl
 105e341:	(bad)  
 105e342:	add    eax,DWORD PTR [rax]
 105e344:	or     eax,DWORD PTR [rax]
 105e346:	add    BYTE PTR [rax],al
 105e348:	xor    BYTE PTR [rdx+0x430003],bl
 105e34e:	add    BYTE PTR [rax],al
 105e350:	jb     0x105e2ec
 105e352:	add    eax,DWORD PTR [rax]
 105e354:	add    BYTE PTR [rax],r8b
 105e357:	add    BYTE PTR [rdi+0x4300039a],al
 105e35d:	add    BYTE PTR [rax],al
 105e35f:	add    BYTE PTR [rbp+0xb00039a],dl
 105e365:	add    BYTE PTR [rax],al
 105e367:	add    BYTE PTR [rbp+0x4500039a],ch
 105e36d:	add    BYTE PTR [rax],al
 105e36f:	add    BYTE PTR [rax],dl
 105e371:	fwait
 105e372:	add    eax,DWORD PTR [rax]
 105e374:	or     eax,DWORD PTR [rax]
 105e376:	add    BYTE PTR [rax],al
 105e378:	cmp    BYTE PTR [rbx+0x460003],bl
 105e37e:	add    BYTE PTR [rax],al
 105e380:	ja     0x105e31d
 105e382:	add    eax,DWORD PTR [rax]
 105e384:	or     eax,DWORD PTR [rax]
 105e386:	add    BYTE PTR [rax],al
 105e388:	popf   
 105e389:	fwait
 105e38a:	add    eax,DWORD PTR [rax]
 105e38c:	rex.RXB add BYTE PTR [r8],r8b
 105e38f:	add    ch,dl
 105e391:	fwait
 105e392:	add    eax,DWORD PTR [rax]
 105e394:	or     eax,DWORD PTR [rax]
 105e396:	add    BYTE PTR [rax],al
 105e398:	jmp    0x4905e738
 105e39d:	add    BYTE PTR [rax],al
 105e39f:	add    BYTE PTR [rdx],al
 105e3a1:	pushf  
 105e3a2:	add    eax,DWORD PTR [rax]
 105e3a4:	or     eax,DWORD PTR [rax]
 105e3a6:	add    BYTE PTR [rax],al
 105e3a8:	adc    ebx,DWORD PTR [rbx+rax*1+0x4900]
 105e3af:	add    BYTE PTR [rcx],ch
 105e3b1:	pushf  
 105e3b2:	add    eax,DWORD PTR [rax]
 105e3b4:	or     eax,DWORD PTR [rax]
 105e3b6:	add    BYTE PTR [rax],al
 105e3b8:	adc    ebx,DWORD PTR [rbp+0x4a0003]
 105e3be:	add    BYTE PTR [rax],al
 105e3c0:	rex.R popf 
 105e3c2:	add    eax,DWORD PTR [rax]
 105e3c4:	or     eax,DWORD PTR [rax]
 105e3c6:	add    BYTE PTR [rax],al
 105e3c8:	jno    0x105e367
 105e3ca:	add    eax,DWORD PTR [rax]
 105e3cc:	rex.WXB add BYTE PTR [r8],al
 105e3cf:	add    BYTE PTR [rbp+rbx*4+0x3],dh
 105e3d3:	add    BYTE PTR [rbx],cl
 105e3d5:	add    BYTE PTR [rax],al
 105e3d7:	add    BYTE PTR [rcx-0x62],bl
 105e3da:	add    eax,DWORD PTR [rax]
 105e3dc:	rex.WR add BYTE PTR [rax],r8b
 105e3df:	add    BYTE PTR [rax-0x62],ch
 105e3e2:	add    eax,DWORD PTR [rax]
 105e3e4:	or     eax,DWORD PTR [rax]
 105e3e6:	add    BYTE PTR [rax],al
 105e3e8:	fcomp  DWORD PTR [rsi+0x4d0003]
 105e3ee:	add    BYTE PTR [rax],al
 105e3f0:	out    0x9e,al
 105e3f2:	add    eax,DWORD PTR [rax]
 105e3f4:	or     eax,DWORD PTR [rax]
 105e3f6:	add    BYTE PTR [rax],al
 105e3f8:	pop    rdi
 105e3f9:	lahf   
 105e3fa:	add    eax,DWORD PTR [rax]
 105e3fc:	rex.WRX add BYTE PTR [rax],r8b
 105e3ff:	add    BYTE PTR [rbp-0x61],ch
 105e402:	add    eax,DWORD PTR [rax]
 105e404:	or     eax,DWORD PTR [rax]
 105e406:	add    BYTE PTR [rax],al
 105e408:	add    ah,BYTE PTR [rax+0x4f0003]
 105e40e:	add    BYTE PTR [rax],al
 105e410:	cmp    eax,0xb0003a0
 105e415:	add    BYTE PTR [rax],al
 105e417:	add    BYTE PTR [rcx-0x60],dl
 105e41a:	add    eax,DWORD PTR [rax]
 105e41c:	push   rax
 105e41d:	add    BYTE PTR [rax],al
 105e41f:	add    BYTE PTR [rbp-0x60],ah
 105e422:	add    eax,DWORD PTR [rax]
 105e424:	or     eax,DWORD PTR [rax]
 105e426:	add    BYTE PTR [rax],al
 105e428:	jbe    0x105e3ca
 105e42a:	add    eax,DWORD PTR [rax]
 105e42c:	push   rcx
 105e42d:	add    BYTE PTR [rax],al
 105e42f:	add    BYTE PTR [rax+riz*4+0xb0003],cl
 105e436:	add    BYTE PTR [rax],al
 105e438:	rex.R movabs eax,ds:0xa170000000520003
 105e442:	add    eax,DWORD PTR [rax]
 105e444:	or     eax,DWORD PTR [rax]
 105e446:	add    BYTE PTR [rax],al
 105e448:	pushf  
 105e449:	movabs eax,ds:0xa1c1000000530003
 105e452:	add    eax,DWORD PTR [rax]
 105e454:	or     eax,DWORD PTR [rax]
 105e456:	add    BYTE PTR [rax],al
 105e458:	(bad)  
 105e459:	movabs eax,ds:0xa1e4000000540003
 105e462:	add    eax,DWORD PTR [rax]
 105e464:	push   rbp
 105e465:	add    BYTE PTR [rax],al
 105e467:	add    al,dh
 105e469:	movabs eax,ds:0xa201000000560003
 105e472:	add    eax,DWORD PTR [rax]
 105e474:	push   rdi
 105e475:	add    BYTE PTR [rax],al
 105e477:	add    BYTE PTR [rdi],dl
 105e479:	movabs ds:0xa232000000580003,al
 105e482:	add    eax,DWORD PTR [rax]
 105e484:	push   rdi
 105e485:	add    BYTE PTR [rax],al
 105e487:	add    BYTE PTR [rdx+riz*4+0x3],bh
 105e48b:	add    BYTE PTR [rsi+0x0],dl
 105e48e:	add    BYTE PTR [rax],al
 105e490:	(bad)  
 105e491:	movabs ds:0xa2b50000000b0003,al
 105e49a:	add    eax,DWORD PTR [rax]
 105e49c:	push   rdi
 105e49d:	add    BYTE PTR [rax],al
 105e49f:	add    al,al
 105e4a1:	movabs ds:0xa2cb000000550003,al
 105e4aa:	add    eax,DWORD PTR [rax]
 105e4ac:	push   rsp
 105e4ad:	add    BYTE PTR [rax],al
 105e4af:	add    dh,dl
 105e4b1:	movabs ds:0xa32f0000000b0003,al
 105e4ba:	add    eax,DWORD PTR [rax]
 105e4bc:	pop    rcx
 105e4bd:	add    BYTE PTR [rax],al
 105e4bf:	add    BYTE PTR [rbx-0x5d],ah
 105e4c2:	add    eax,DWORD PTR [rax]
 105e4c4:	or     eax,DWORD PTR [rax]
 105e4c6:	add    BYTE PTR [rax],al
 105e4c8:	ja     0x105e46d
 105e4ca:	add    eax,DWORD PTR [rax]
 105e4cc:	pop    rdx
 105e4cd:	add    BYTE PTR [rax],al
 105e4cf:	add    BYTE PTR [rbx+0xb0003a3],cl
 105e4d5:	add    BYTE PTR [rax],al
 105e4d7:	add    BYTE PTR [rbx+riz*4+0x5b0003],bl
 105e4de:	add    BYTE PTR [rax],al
 105e4e0:	enter  0x3a3,0x0
 105e4e4:	or     eax,DWORD PTR [rax]
 105e4e6:	add    BYTE PTR [rax],al
 105e4e8:	jne    0x105e48f
 105e4ea:	add    eax,DWORD PTR [rax]
 105e4ec:	pop    rsp
 105e4ed:	add    BYTE PTR [rax],al
 105e4ef:	add    BYTE PTR [rbp+riz*4+0xb0003],al
 105e4f6:	add    BYTE PTR [rax],al
 105e4f8:	icebp  
 105e4f9:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 105e4fa:	add    eax,DWORD PTR [rax]
 105e4fc:	pop    rbp
 105e4fd:	add    BYTE PTR [rax],al
 105e4ff:	add    BYTE PTR [rsi],al
 105e501:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 105e502:	add    eax,DWORD PTR [rax]
 105e504:	or     eax,DWORD PTR [rax]
 105e506:	add    BYTE PTR [rax],al
 105e508:	rex.WRB cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 105e50a:	add    eax,DWORD PTR [rax]
 105e50c:	pop    rsi
 105e50d:	add    BYTE PTR [rax],al
 105e50f:	add    BYTE PTR [rdx-0x5a],ah
 105e512:	add    eax,DWORD PTR [rax]
 105e514:	or     eax,DWORD PTR [rax]
 105e516:	add    BYTE PTR [rax],al
 105e518:	cdq    
 105e519:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 105e51a:	add    eax,DWORD PTR [rax]
 105e51c:	or     al,BYTE PTR [rax]
 105e51e:	add    BYTE PTR [rax],al
 105e520:	test   al,0xa6
 105e522:	add    eax,DWORD PTR [rax]
 105e524:	or     DWORD PTR [rax],eax
 105e526:	add    BYTE PTR [rax],al
 105e528:	mov    bh,0xa6
 105e52a:	add    eax,DWORD PTR [rax]
 105e52c:	or     BYTE PTR [rax],al
 105e52e:	add    BYTE PTR [rax],al
 105e530:	(bad)  
 105e531:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 105e532:	add    eax,DWORD PTR [rax]
 105e534:	(bad)  
 105e535:	add    BYTE PTR [rax],al
 105e537:	add    ch,dl
 105e539:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 105e53a:	add    eax,DWORD PTR [rax]
 105e53c:	(bad)  
 105e53d:	add    BYTE PTR [rax],al
 105e53f:	add    ah,ah
 105e541:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 105e542:	add    eax,DWORD PTR [rax]
 105e544:	add    eax,0xef000000
 105e549:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 105e54a:	add    eax,DWORD PTR [rax]
 105e54c:	add    al,0x0
 105e54e:	add    BYTE PTR [rax],al
 105e550:	sti    
 105e551:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 105e552:	add    eax,DWORD PTR [rax]
 105e554:	add    eax,DWORD PTR [rax]
 105e556:	add    BYTE PTR [rax],al
 105e558:	(bad)  
 105e559:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 105e55a:	add    eax,DWORD PTR [rax]
 105e55c:	add    al,BYTE PTR [rax]
 105e55e:	add    BYTE PTR [rax],al
 105e560:	adc    DWORD PTR [rdi+0x10003],esp
 105e566:	add    BYTE PTR [rax],al
 105e568:	sbb    eax,0x3a7
 105e56d:	add    BYTE PTR [rax],al
 105e56f:	add    BYTE PTR [rcx],ch
 105e571:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 105e572:	add    eax,DWORD PTR [rax]
 105e574:	(bad)  
 105e575:	(bad)  
 105e576:	(bad)  
 105e577:	inc    DWORD PTR [rcx]
 105e579:	(bad)  
 105e57a:	add    al,BYTE PTR [rax]
 105e57c:	(bad)  
 105e57d:	xor    al,BYTE PTR [rdx]
 105e57f:	push   rax
 105e580:	add    DWORD PTR [rsi],eax
 105e582:	add    al,BYTE PTR [rax]
 105e584:	(bad)  
 105e585:	xor    al,BYTE PTR [rdx]
 105e587:	push   rax
 105e588:	sbb    DWORD PTR [rbx+rcx*1],edi
 105e58b:	add    BYTE PTR [rbx],ch
 105e58d:	xor    al,0x36
 105e58f:	add    DWORD PTR [rbx],ebx
 105e591:	add    DWORD PTR [rcx+rax*1],ebp
 105e594:	or     al,0xf0
 105e596:	or     ah,al
 105e598:	or     al,dl
 105e59a:	(bad)  
 105e59b:	rol    BYTE PTR [rax+rsi*2],0x3
 105e59f:	(bad)  
 105e5a0:	add    dl,BYTE PTR [rax+0x0]
 105e5a3:	add    BYTE PTR [rax+0x680003fe],ah
 105e5a9:	js     0x105e5ab
 105e5ab:	add    BYTE PTR [rdx+0x9],dl
 105e5ae:	add    BYTE PTR [rax],al
 105e5b0:	(bad)  
 105e5b1:	(bad)  
 105e5b2:	(bad)  
 105e5b3:	call   QWORD PTR [rax+0x7]
 105e5b6:	add    eax,0x0
 105e5bb:	add    BYTE PTR [rax+0x7],ah
 105e5be:	add    eax,0x100
 105e5c3:	add    BYTE PTR [rax+0x7],dh
 105e5c6:	add    eax,0x200
 105e5cb:	add    BYTE PTR [rax+0x3000507],al
 105e5d1:	add    BYTE PTR [rax],al
 105e5d3:	add    BYTE PTR [rax+0x2000507],dh
 105e5d9:	add    BYTE PTR [rax],al
 105e5db:	add    al,ah
 105e5dd:	(bad)  
 105e5de:	add    eax,0x200
 105e5e3:	add    al,dh
 105e5e5:	(bad)  
 105e5e6:	add    eax,0x200
 105e5eb:	add    BYTE PTR [rax],al
 105e5ed:	or     BYTE PTR [rip+0x200],al        # 0x105e7f3
 105e5f3:	add    BYTE PTR [rax],dl
 105e5f5:	or     BYTE PTR [rip+0x800],al        # 0x105edfb
 105e5fb:	add    BYTE PTR [rax],ah
 105e5fd:	or     BYTE PTR [rip+0x900],al        # 0x105ef03
 105e603:	add    BYTE PTR [rax],dh
 105e605:	or     BYTE PTR [rip+0xa00],al        # 0x105f00b
 105e60b:	add    BYTE PTR [rax+0x8],al
 105e60e:	add    eax,0xb00
 105e613:	add    BYTE PTR [rax+0x8],dl
 105e616:	add    eax,0xc00
 105e61b:	add    BYTE PTR [rax+0x8],ah
 105e61e:	add    eax,0xc00
 105e623:	add    BYTE PTR [rax+0x8],dh
 105e626:	add    eax,0xc00
 105e62b:	add    BYTE PTR [rax+0xc000508],al
 105e631:	add    BYTE PTR [rax],al
 105e633:	add    BYTE PTR [rax+0x10000508],dl
 105e639:	add    BYTE PTR [rax],al
 105e63b:	add    BYTE PTR [rax+0xc000508],ah
 105e641:	add    BYTE PTR [rax],al
 105e643:	add    BYTE PTR [rax+0x12000508],ah
 105e649:	add    BYTE PTR [rax],al
 105e64b:	add    BYTE PTR [rax+0x13000508],dh
 105e651:	add    BYTE PTR [rax],al
 105e653:	add    al,al
 105e655:	or     BYTE PTR [rip+0xc00],al        # 0x105f25b
 105e65b:	add    al,dl
 105e65d:	or     BYTE PTR [rip+0x1500],al        # 0x105fb63
 105e663:	add    al,ah
 105e665:	or     BYTE PTR [rip+0xc00],al        # 0x105f26b
 105e66b:	add    al,ah
 105e66d:	or     BYTE PTR [rip+0x1700],al        # 0x105fd73
 105e673:	add    al,dh
 105e675:	or     BYTE PTR [rip+0x1800],al        # 0x105fe7b
 105e67b:	add    BYTE PTR [rax],al
 105e67d:	or     DWORD PTR [rip+0xc00],eax        # 0x105f283
 105e683:	add    BYTE PTR [rax],dl
 105e685:	or     DWORD PTR [rip+0xc00],eax        # 0x105f28b
 105e68b:	add    BYTE PTR [rax],ah
 105e68d:	or     DWORD PTR [rip+0x1b00],eax        # 0x1060193
 105e693:	add    BYTE PTR [rax],dh
 105e695:	or     DWORD PTR [rip+0x3a77000],eax        # 0x4ad569b
 105e69b:	add    bh,bh
 105e69d:	(bad)  
 105e69e:	(bad)  
 105e69f:	dec    eax
 105e6a1:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 105e6a2:	add    eax,DWORD PTR [rax]
 105e6a4:	add    BYTE PTR [rax],al
 105e6a6:	add    BYTE PTR [rax],al
 105e6a8:	int    0xa7
 105e6aa:	add    eax,DWORD PTR [rax]
 105e6ac:	add    DWORD PTR [rax],eax
 105e6ae:	add    BYTE PTR [rax],al
 105e6b0:	shl    BYTE PTR [rdi+0x20003],cl
 105e6b6:	add    BYTE PTR [rax],al
 105e6b8:	rex.RX test al,0x3
 105e6bb:	add    BYTE PTR [rbx],al
 105e6bd:	add    BYTE PTR [rax],al
 105e6bf:	add    BYTE PTR [rax+rbp*4+0x3],ch
 105e6c3:	add    BYTE PTR [rax+rax*1],al
 105e6c6:	add    BYTE PTR [rax],al
 105e6c8:	mov    edx,0x30003a8
 105e6cd:	add    BYTE PTR [rax],al
 105e6cf:	add    dl,dl
 105e6d1:	test   al,0x3
 105e6d3:	add    BYTE PTR [rdx],al
 105e6d5:	add    BYTE PTR [rax],al
 105e6d7:	add    BYTE PTR [rdx],cl
 105e6d9:	test   eax,0x50003
 105e6de:	add    BYTE PTR [rax],al
 105e6e0:	xor    ebp,DWORD PTR [rcx+0x20003]
 105e6e6:	add    BYTE PTR [rax],al
 105e6e8:	push   rsi
 105e6e9:	test   eax,0x60003
 105e6ee:	add    BYTE PTR [rax],al
 105e6f0:	xchg   BYTE PTR [rcx+0x20003],ch
 105e6f6:	add    BYTE PTR [rax],al
 105e6f8:	(bad)  
 105e6f9:	test   eax,0x70003
 105e6fe:	add    BYTE PTR [rax],al
 105e700:	scas   al,BYTE PTR es:[rdi]
 105e701:	test   eax,0x20003
 105e706:	add    BYTE PTR [rax],al
 105e708:	mov    ebp,0x80003a9
 105e70d:	add    BYTE PTR [rax],al
 105e70f:	add    dh,dh
 105e711:	test   eax,0x20003
 105e716:	add    BYTE PTR [rax],al
 105e718:	rsm    
 105e71a:	add    eax,DWORD PTR [rax]
 105e71c:	or     BYTE PTR [rax],al
 105e71e:	add    BYTE PTR [rax],al
 105e720:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 105e721:	stos   BYTE PTR es:[rdi],al
 105e722:	add    eax,DWORD PTR [rax]
 105e724:	add    al,BYTE PTR [rax]
 105e726:	add    BYTE PTR [rax],al
 105e728:	lods   al,BYTE PTR ds:[rsi]
 105e729:	stos   BYTE PTR es:[rdi],al
 105e72a:	add    eax,DWORD PTR [rax]
 105e72c:	or     BYTE PTR [rax],al
 105e72e:	add    BYTE PTR [rax],al
 105e730:	mov    bh,0xaa
 105e732:	add    eax,DWORD PTR [rax]
 105e734:	or     DWORD PTR [rax],eax
 105e736:	add    BYTE PTR [rax],al
 105e738:	ret    
 105e739:	stos   BYTE PTR es:[rdi],al
 105e73a:	add    eax,DWORD PTR [rax]
 105e73c:	or     al,BYTE PTR [rax]
 105e73e:	add    BYTE PTR [rax],al
 105e740:	iret   
 105e741:	stos   BYTE PTR es:[rdi],al
 105e742:	add    eax,DWORD PTR [rax]
 105e744:	or     eax,DWORD PTR [rax]
 105e746:	add    BYTE PTR [rax],al
 105e748:	loope  0x105e6f4
 105e74a:	add    eax,DWORD PTR [rax]
 105e74c:	or     al,0x0
 105e74e:	add    BYTE PTR [rax],al
 105e750:	rex.WRX stos QWORD PTR es:[rdi],rax
 105e752:	add    eax,DWORD PTR [rax]
 105e754:	or     eax,0x7b000000
 105e759:	stos   DWORD PTR es:[rdi],eax
 105e75a:	add    eax,DWORD PTR [rax]
 105e75c:	or     al,0x0
 105e75e:	add    BYTE PTR [rax],al
 105e760:	movabs al,ds:0xcd0000000e0003ab
 105e769:	stos   DWORD PTR es:[rdi],eax
 105e76a:	add    eax,DWORD PTR [rax]
 105e76c:	or     al,0x0
 105e76e:	add    BYTE PTR [rax],al
 105e770:	cmc    
 105e771:	stos   DWORD PTR es:[rdi],eax
 105e772:	add    eax,DWORD PTR [rax]
 105e774:	sldt   WORD PTR [rax]
 105e777:	add    BYTE PTR [rsp+rbp*4],bl
 105e77a:	add    eax,DWORD PTR [rax]
 105e77c:	or     al,0x0
 105e77e:	add    BYTE PTR [rax],al
 105e780:	sub    DWORD PTR [rbx+rax*1+0x1000],ebp
 105e787:	add    BYTE PTR [rdi],bh
 105e789:	lods   al,BYTE PTR ds:[rsi]
 105e78a:	add    eax,DWORD PTR [rax]
 105e78c:	adc    DWORD PTR [rax],eax
 105e78e:	add    BYTE PTR [rax],al
 105e790:	rex.WXB lods al,BYTE PTR ds:[rsi]
 105e792:	add    eax,DWORD PTR [rax]
 105e794:	adc    al,BYTE PTR [rax]
 105e796:	add    BYTE PTR [rax],al
 105e798:	pop    rcx
 105e799:	lods   al,BYTE PTR ds:[rsi]
 105e79a:	add    eax,DWORD PTR [rax]
 105e79c:	adc    eax,DWORD PTR [rax]
 105e79e:	add    BYTE PTR [rax],al
 105e7a0:	outs   dx,DWORD PTR ds:[rsi]
 105e7a1:	lods   al,BYTE PTR ds:[rsi]
 105e7a2:	add    eax,DWORD PTR [rax]
 105e7a4:	adc    al,0x0
 105e7a6:	add    BYTE PTR [rax],al
 105e7a8:	sahf   
 105e7a9:	lods   al,BYTE PTR ds:[rsi]
 105e7aa:	add    eax,DWORD PTR [rax]
 105e7ac:	adc    eax,DWORD PTR [rax]
 105e7ae:	add    BYTE PTR [rax],al
 105e7b0:	out    dx,al
 105e7b1:	lods   al,BYTE PTR ds:[rsi]
 105e7b2:	add    eax,DWORD PTR [rax]
 105e7b4:	adc    al,BYTE PTR [rax]
 105e7b6:	add    BYTE PTR [rax],al
 105e7b8:	(bad)  
 105e7b9:	lods   al,BYTE PTR ds:[rsi]
 105e7ba:	add    eax,DWORD PTR [rax]
 105e7bc:	or     al,0x0
 105e7be:	add    BYTE PTR [rax],al
 105e7c0:	lods   rax,QWORD PTR ds:[rsi]
 105e7c2:	add    eax,DWORD PTR [rax]
 105e7c4:	adc    eax,0x55000000
 105e7c9:	lods   eax,DWORD PTR ds:[rsi]
 105e7ca:	add    eax,DWORD PTR [rax]
 105e7cc:	(bad)  
 105e7cd:	add    BYTE PTR [rax],al
 105e7cf:	add    BYTE PTR [rcx-0x53],ah
 105e7d2:	add    eax,DWORD PTR [rax]
 105e7d4:	(bad)  
 105e7d5:	add    BYTE PTR [rax],al
 105e7d7:	add    BYTE PTR [rsi-0x53],ch
 105e7da:	add    eax,DWORD PTR [rax]
 105e7dc:	sbb    BYTE PTR [rax],al
 105e7de:	add    BYTE PTR [rax],al
 105e7e0:	test   BYTE PTR [rbp+0x190003],ch
 105e7e6:	add    BYTE PTR [rax],al
 105e7e8:	mov    bl,0xad
 105e7ea:	add    eax,DWORD PTR [rax]
 105e7ec:	sbb    BYTE PTR [rax],al
 105e7ee:	add    BYTE PTR [rax],al
 105e7f0:	add    ebp,DWORD PTR [rsi+0x170003]
 105e7f6:	add    BYTE PTR [rax],al
 105e7f8:	adc    ebp,DWORD PTR [rsi+0xc0003]
 105e7fe:	add    BYTE PTR [rax],al
 105e800:	ss scas al,BYTE PTR es:[rdi]
 105e802:	add    eax,DWORD PTR [rax]
 105e804:	sbb    al,BYTE PTR [rax]
 105e806:	add    BYTE PTR [rax],al
 105e808:	rex.WRX scas al,BYTE PTR es:[rdi]
 105e80a:	add    eax,DWORD PTR [rax]
 105e80c:	or     al,0x0
 105e80e:	add    BYTE PTR [rax],al
 105e810:	iret   
 105e811:	scas   al,BYTE PTR es:[rdi]
 105e812:	add    eax,DWORD PTR [rax]
 105e814:	sbb    BYTE PTR [rax],al
 105e816:	add    BYTE PTR [rax],al
 105e818:	fisubr DWORD PTR [rsi+0x160003]
 105e81e:	add    BYTE PTR [rax],al
 105e820:	in     eax,0xae
 105e822:	add    eax,DWORD PTR [rax]
 105e824:	adc    eax,DWORD PTR [rax]
 105e826:	add    BYTE PTR [rax],al
 105e828:	lock scas al,BYTE PTR es:[rdi]
 105e82a:	add    eax,DWORD PTR [rax]
 105e82c:	adc    DWORD PTR [rax],eax
 105e82e:	add    BYTE PTR [rax],al
 105e830:	sti    
 105e831:	scas   al,BYTE PTR es:[rdi]
 105e832:	add    eax,DWORD PTR [rax]
 105e834:	adc    BYTE PTR [rax],al
 105e836:	add    BYTE PTR [rax],al
 105e838:	(bad)  
 105e839:	scas   eax,DWORD PTR es:[rdi]
 105e83a:	add    eax,DWORD PTR [rax]
 105e83c:	or     al,0x0
 105e83e:	add    BYTE PTR [rax],al
 105e840:	xor    ebp,DWORD PTR [rdi+0x1b0003]
 105e846:	add    BYTE PTR [rax],al
 105e848:	rex.X scas eax,DWORD PTR es:[rdi]
 105e84a:	add    eax,DWORD PTR [rax]
 105e84c:	sbb    al,0x0
 105e84e:	add    BYTE PTR [rax],al
 105e850:	pop    rbp
 105e851:	scas   eax,DWORD PTR es:[rdi]
 105e852:	add    eax,DWORD PTR [rax]
 105e854:	sbb    eax,DWORD PTR [rax]
 105e856:	add    BYTE PTR [rax],al
 105e858:	xor    dh,BYTE PTR [rax+0xc0003]
 105e85e:	add    BYTE PTR [rax],al
 105e860:	ds mov al,0x3
 105e863:	add    BYTE PTR [rbx],cl
 105e865:	add    BYTE PTR [rax],al
 105e867:	add    BYTE PTR [rcx-0x50],cl
 105e86a:	add    eax,DWORD PTR [rax]
 105e86c:	or     al,BYTE PTR [rax]
 105e86e:	add    BYTE PTR [rax],al
 105e870:	push   rbp
 105e871:	mov    al,0x3
 105e873:	add    BYTE PTR [rcx],cl
 105e875:	add    BYTE PTR [rax],al
 105e877:	add    BYTE PTR [rcx-0x50],ah
 105e87a:	add    eax,DWORD PTR [rax]
 105e87c:	or     BYTE PTR [rax],al
 105e87e:	add    BYTE PTR [rax],al
 105e880:	ins    BYTE PTR es:[rdi],dx
 105e881:	mov    al,0x3
 105e883:	add    BYTE PTR [rdx],al
 105e885:	add    BYTE PTR [rax],al
 105e887:	add    BYTE PTR [rsi-0x50],bh
 105e88a:	add    eax,DWORD PTR [rax]
 105e88c:	or     al,0x0
 105e88e:	add    BYTE PTR [rax],al
 105e890:	mov    DWORD PTR [rax+0x20003],esi
 105e896:	add    BYTE PTR [rax],al
 105e898:	xchg   ebx,eax
 105e899:	mov    al,0x3
 105e89b:	add    BYTE PTR [rcx],al
 105e89d:	add    BYTE PTR [rax],al
 105e89f:	add    BYTE PTR [rdx+0x3b0],ah
 105e8a5:	add    BYTE PTR [rax],al
 105e8a7:	add    BYTE PTR [rcx-0xfffc50],dh
 105e8ad:	(bad)  
 105e8ae:	(bad)  
 105e8af:	inc    DWORD PTR [rcx]
 105e8b1:	(bad)  
 105e8b2:	add    al,BYTE PTR [rax]
 105e8b4:	(bad)  
 105e8b5:	xor    al,BYTE PTR [rdx]
 105e8b7:	push   rax
 105e8b8:	add    DWORD PTR [rsi],eax
 105e8ba:	add    al,BYTE PTR [rax]
 105e8bc:	(bad)  
 105e8bd:	xor    al,BYTE PTR [rdx]
 105e8bf:	push   rax
 105e8c0:	add    DWORD PTR [rcx+rax*1],eax
 105e8c3:	add    BYTE PTR [rdx+rax*2],al
 105e8c6:	add    BYTE PTR [rax],al
 105e8c8:	add    DWORD PTR [rax+rcx*1],edx
 105e8cb:	add    BYTE PTR [rsp+riz*2],dl
 105e8ce:	or     eax,DWORD PTR [rax]
 105e8d0:	adc    al,0x54
 105e8d2:	or     al,BYTE PTR [rax]
 105e8d4:	adc    al,0x34
 105e8d6:	or     DWORD PTR [rax],eax
 105e8d8:	adc    al,0x52
 105e8da:	adc    BYTE PTR [rax+0x19],dh
 105e8dd:	xor    ecx,DWORD PTR [rcx]
 105e8df:	add    BYTE PTR [rdx],bl
 105e8e1:	add    DWORD PTR [rdx],ebx
 105e8e3:	add    DWORD PTR [rbx],ecx
 105e8e5:	lock or eax,esp
 105e8e8:	(bad)  
 105e8e9:	rol    BYTE PTR [rip+0x3600470],0x30        # 0x465ed60
 105e8f0:	add    dl,BYTE PTR [rax+0x0]
 105e8f3:	add    BYTE PTR [rax-0x6ffffc02],ah
 105e8f9:	js     0x105e8fb
 105e8fb:	add    dl,al
 105e8fd:	or     BYTE PTR [rax],al
 105e8ff:	add    bh,bh
 105e901:	(bad)  
 105e902:	(bad)  
 105e903:	inc    DWORD PTR [rax+0x50e]
 105e909:	add    BYTE PTR [rax],al
 105e90b:	add    BYTE PTR [rax+0x100050e],dh
 105e911:	add    BYTE PTR [rax],al
 105e913:	add    al,al
 105e915:	(bad)  
 105e916:	add    eax,0x200
 105e91b:	add    al,dl
 105e91d:	(bad)  
 105e91e:	add    eax,0x200
 105e923:	add    al,ah
 105e925:	(bad)  
 105e926:	add    eax,0x200
 105e92b:	add    al,dh
 105e92d:	(bad)  
 105e92e:	add    eax,0x500
 105e933:	add    BYTE PTR [rax],al
 105e935:	syscall 
 105e937:	add    BYTE PTR [rsi],al
 105e939:	add    BYTE PTR [rax],al
 105e93b:	add    BYTE PTR [rax],dl
 105e93d:	syscall 
 105e93f:	add    BYTE PTR [rdi],al
 105e941:	add    BYTE PTR [rax],al
 105e943:	add    BYTE PTR [rax],ah
 105e945:	syscall 
 105e947:	add    BYTE PTR [rax],cl
 105e949:	add    BYTE PTR [rax],al
 105e94b:	add    BYTE PTR [rax],dh
 105e94d:	syscall 
 105e94f:	add    BYTE PTR [rip+0x40000000],al        # 0x4105e955
 105e955:	syscall 
 105e957:	add    al,ah
 105e959:	mov    cl,0x3
 105e95b:	add    bh,bh
 105e95d:	(bad)  
 105e95e:	(bad)  
 105e95f:	call   FWORD PTR [rdi]
 105e961:	mov    dl,0x3
 105e963:	add    BYTE PTR [rax],al
 105e965:	add    BYTE PTR [rax],al
 105e967:	add    BYTE PTR [rdx-0x4e],dl
 105e96a:	add    eax,DWORD PTR [rax]
 105e96c:	add    DWORD PTR [rax],eax
 105e96e:	add    BYTE PTR [rax],al
 105e970:	(bad)  
 105e971:	mov    dl,0x3
 105e973:	add    BYTE PTR [rdx],al
 105e975:	add    BYTE PTR [rax],al
 105e977:	add    BYTE PTR [rsi],cl
 105e979:	mov    bl,0x3
 105e97b:	add    BYTE PTR [rbx],al
 105e97d:	add    BYTE PTR [rax],al
 105e97f:	add    BYTE PTR [rsi],bh
 105e981:	mov    bl,0x3
 105e983:	add    BYTE PTR [rdx],al
 105e985:	add    BYTE PTR [rax],al
 105e987:	add    BYTE PTR [rbx-0x4d],dl
 105e98a:	add    eax,DWORD PTR [rax]
 105e98c:	add    al,0x0
 105e98e:	add    BYTE PTR [rax],al
 105e990:	addr32 mov bl,0x3
 105e993:	add    BYTE PTR [rdx],al
 105e995:	add    BYTE PTR [rax],al
 105e997:	add    BYTE PTR [rdi-0x4d],dh
 105e99a:	add    eax,DWORD PTR [rax]
 105e99c:	add    eax,0xa6000000
 105e9a1:	mov    bl,0x3
 105e9a3:	add    BYTE PTR [rsi],al
 105e9a5:	add    BYTE PTR [rax],al
 105e9a7:	add    ch,al
 105e9a9:	mov    bl,0x3
 105e9ab:	add    BYTE PTR [rdi],al
 105e9ad:	add    BYTE PTR [rax],al
 105e9af:	add    ah,ah
 105e9b1:	mov    bl,0x3
 105e9b3:	add    BYTE PTR [rax],cl
 105e9b5:	add    BYTE PTR [rax],al
 105e9b7:	add    ch,dh
 105e9b9:	mov    bl,0x3
 105e9bb:	add    BYTE PTR [rcx],cl
 105e9bd:	add    BYTE PTR [rax],al
 105e9bf:	add    BYTE PTR [rsp+rsi*4],dh
 105e9c2:	add    eax,DWORD PTR [rax]
 105e9c4:	or     BYTE PTR [rax],al
 105e9c6:	add    BYTE PTR [rax],al
 105e9c8:	(bad)  
 105e9c9:	mov    ah,0x3
 105e9cb:	add    BYTE PTR [rdi],al
 105e9cd:	add    BYTE PTR [rax],al
 105e9cf:	add    BYTE PTR [rcx+0x60003b4],al
 105e9d5:	add    BYTE PTR [rax],al
 105e9d7:	add    ch,al
 105e9d9:	mov    ah,0x3
 105e9db:	add    BYTE PTR [rip+0xffffffffff000000],al        # 0x5e9e1
 105e9e1:	mov    ah,0x3
 105e9e3:	add    BYTE PTR [rdx],cl
 105e9e5:	add    BYTE PTR [rax],al
 105e9e7:	add    BYTE PTR [rcx],bl
 105e9e9:	mov    ch,0x3
 105e9eb:	add    BYTE PTR [rip+0xffffffff8a000000],al        # 0xffffffff8b05e9f1
 105e9f1:	mov    ch,0x3
 105e9f3:	add    BYTE PTR [rdx],al
 105e9f5:	add    BYTE PTR [rax],al
 105e9f7:	add    BYTE PTR [rbx+0x10003b5],bl
 105e9fd:	add    BYTE PTR [rax],al
 105e9ff:	add    BYTE PTR [rdi+0x3b5],ah
 105ea05:	add    BYTE PTR [rax],al
 105ea07:	add    BYTE PTR [rcx],al
 105ea09:	(bad)  
 105ea0a:	add    al,BYTE PTR [rax]
 105ea0c:	(bad)  
 105ea0d:	xor    al,BYTE PTR [rdx]
 105ea0f:	push   rax
 105ea10:	adc    DWORD PTR [rbx+rcx*1],ebp
 105ea13:	add    BYTE PTR [rsp+rsi*1],ch
 105ea16:	and    al,0x0
 105ea18:	sbb    al,0x1
 105ea1a:	sbb    al,BYTE PTR [rax]
 105ea1c:	adc    al,dh
 105ea1e:	(bad)  
 105ea1f:	loopne 0x105ea2d
 105ea21:	ror    BYTE PTR [rdx],1
 105ea23:	ror    BYTE PTR [rax],0x70
 105ea26:	(bad)  
 105ea27:	(bad)  
 105ea28:	(bad)  
 105ea29:	push   rax
 105ea2a:	add    BYTE PTR [rax],al
 105ea2c:	xchg   esp,eax
 105ea2d:	inc    BYTE PTR [rbx]
 105ea2f:	add    BYTE PTR [rax-0xffff88],bh
 105ea35:	(bad)  
 105ea36:	(bad)  
 105ea37:	jmp    QWORD PTR [rax+0x509]
 105ea3d:	add    BYTE PTR [rax],al
 105ea3f:	add    BYTE PTR [rax+0x9],dl
 105ea42:	add    eax,0x100
 105ea47:	add    BYTE PTR [rax+0x9],ah
 105ea4a:	add    eax,0x200
 105ea4f:	add    BYTE PTR [rax+0x9],dh
 105ea52:	add    eax,0x300
 105ea57:	add    BYTE PTR [rax+0x3000509],al
 105ea5d:	add    BYTE PTR [rax],al
 105ea5f:	add    BYTE PTR [rax+0x3000509],dl
 105ea65:	add    BYTE PTR [rax],al
 105ea67:	add    al,dl
 105ea69:	or     DWORD PTR [rip+0x300],eax        # 0x105ed6f
 105ea6f:	add    al,ah
 105ea71:	or     DWORD PTR [rip+0x700],eax        # 0x105f177
 105ea77:	add    al,dh
 105ea79:	or     DWORD PTR [rip+0x700],eax        # 0x105f17f
 105ea7f:	add    BYTE PTR [rax],al
 105ea81:	or     al,BYTE PTR [rip+0x900]        # 0x105f387
 105ea87:	add    BYTE PTR [rax],dl
 105ea89:	or     al,BYTE PTR [rip+0x700]        # 0x105f18f
 105ea8f:	add    BYTE PTR [rax],dl
 105ea91:	or     al,BYTE PTR [rip+0xb00]        # 0x105f597
 105ea97:	add    BYTE PTR [rax],ah
 105ea99:	or     al,BYTE PTR [rip+0xc00]        # 0x105f69f
 105ea9f:	add    BYTE PTR [rax],dh
 105eaa1:	or     al,BYTE PTR [rip+0xd00]        # 0x105f7a7
 105eaa7:	add    BYTE PTR [rax+0xa],al
 105eaaa:	add    eax,0xd00
 105eaaf:	add    BYTE PTR [rax+0xa],dl
 105eab2:	add    eax,0xf00
 105eab7:	add    BYTE PTR [rax+0xa],ah
 105eaba:	add    eax,0xd00
 105eabf:	add    BYTE PTR [rax+0xa],ah
 105eac2:	add    eax,0x1100
 105eac7:	add    BYTE PTR [rax+0xa],dh
 105eaca:	add    eax,0x1200
 105eacf:	add    BYTE PTR [rax+0x300050a],al
 105ead5:	add    BYTE PTR [rax],al
 105ead7:	add    BYTE PTR [rax-0x1ffffaf6],dl
 105eadd:	mov    ch,0x3
 105eadf:	add    bh,bh
 105eae1:	(bad)  
 105eae2:	(bad)  
 105eae3:	jmp    QWORD PTR [rbx]
 105eae5:	mov    dh,0x3
 105eae7:	add    BYTE PTR [rcx],al
 105eae9:	add    BYTE PTR [rax],al
 105eaeb:	add    BYTE PTR [rcx],ch
 105eaed:	mov    dh,0x3
 105eaef:	add    BYTE PTR [rdx],al
 105eaf1:	add    BYTE PTR [rax],al
 105eaf3:	add    BYTE PTR [rip+0x30003b6],dh        # 0x405eeaf
 105eaf9:	add    BYTE PTR [rax],al
 105eafb:	add    BYTE PTR [rdx-0x4a],cl
 105eafe:	add    eax,DWORD PTR [rax]
 105eb00:	add    al,0x0
 105eb02:	add    BYTE PTR [rax],al
 105eb04:	pop    rsi
 105eb05:	mov    dh,0x3
 105eb07:	add    BYTE PTR [rbx],al
 105eb09:	add    BYTE PTR [rax],al
 105eb0b:	add    BYTE PTR [rbx-0x4a],ch
 105eb0e:	add    eax,DWORD PTR [rax]
 105eb10:	add    eax,0x81000000
 105eb15:	mov    dh,0x3
 105eb17:	add    BYTE PTR [rbx],al
 105eb19:	add    BYTE PTR [rax],al
 105eb1b:	add    BYTE PTR [rax],dh
 105eb1d:	mov    bh,0x3
 105eb1f:	add    BYTE PTR [rsi],al
 105eb21:	add    BYTE PTR [rax],al
 105eb23:	add    BYTE PTR [rdi+rsi*4+0x3],bl
 105eb27:	add    BYTE PTR [rbx],al
 105eb29:	add    BYTE PTR [rax],al
 105eb2b:	add    BYTE PTR [rsi-0x49],dh
 105eb2e:	add    eax,DWORD PTR [rax]
 105eb30:	(bad)  
 105eb31:	add    BYTE PTR [rax],al
 105eb33:	add    BYTE PTR [rdi+0x80003b7],dl
 105eb39:	add    BYTE PTR [rax],al
 105eb3b:	add    BYTE PTR [rbx+0x70003b7],bh
 105eb41:	add    BYTE PTR [rax],al
 105eb43:	add    al,cl
 105eb45:	mov    bh,0x3
 105eb47:	add    BYTE PTR [rcx],cl
 105eb49:	add    BYTE PTR [rax],al
 105eb4b:	add    dh,bl
 105eb4d:	mov    bh,0x3
 105eb4f:	add    BYTE PTR [rdx],cl
 105eb51:	add    BYTE PTR [rax],al
 105eb53:	add    dl,ch
 105eb55:	mov    bh,0x3
 105eb57:	add    BYTE PTR [rbx],cl
 105eb59:	add    BYTE PTR [rax],al
 105eb5b:	add    al,bh
 105eb5d:	mov    bh,0x3
 105eb5f:	add    BYTE PTR [rax+rax*1],cl
 105eb62:	add    BYTE PTR [rax],al
 105eb64:	adc    BYTE PTR [rax+0xd0003],bh
 105eb6a:	add    BYTE PTR [rax],al
 105eb6c:	and    DWORD PTR [rax+0xe0003],edi
 105eb72:	add    BYTE PTR [rax],al
 105eb74:	movabs rax,0xb8550000000d0003
 105eb7e:	add    eax,DWORD PTR [rax]
 105eb80:	sldt   WORD PTR [rax]
 105eb83:	add    BYTE PTR [rdx-0x48],ah
 105eb86:	add    eax,DWORD PTR [rax]
 105eb88:	adc    BYTE PTR [rax],al
 105eb8a:	add    BYTE PTR [rax],al
 105eb8c:	outs   dx,BYTE PTR ds:[rsi]
 105eb8d:	mov    eax,0x110003
 105eb92:	add    BYTE PTR [rax],al
 105eb94:	jl     0x105eb4e
 105eb96:	add    eax,DWORD PTR [rax]
 105eb98:	adc    al,BYTE PTR [rax]
 105eb9a:	add    BYTE PTR [rax],al
 105eb9c:	xchg   edx,eax
 105eb9d:	mov    eax,0x130003
 105eba2:	add    BYTE PTR [rax],al
 105eba4:	(bad)  
 105eba5:	mov    eax,0x120003
 105ebaa:	add    BYTE PTR [rax],al
 105ebac:	adc    DWORD PTR [rcx+0x110003],edi
 105ebb2:	add    BYTE PTR [rax],al
 105ebb4:	and    DWORD PTR [rcx+0xd0003],edi
 105ebba:	add    BYTE PTR [rax],al
 105ebbc:	xor    DWORD PTR [rcx+0xc0003],edi
 105ebc2:	add    BYTE PTR [rax],al
 105ebc4:	jnp    0x105eb7f
 105ebc6:	add    eax,DWORD PTR [rax]
 105ebc8:	or     eax,DWORD PTR [rax]
 105ebca:	add    BYTE PTR [rax],al
 105ebcc:	mov    edi,DWORD PTR [rcx+0x70003]
 105ebd2:	add    BYTE PTR [rax],al
 105ebd4:	stos   BYTE PTR es:[rdi],al
 105ebd5:	mov    ecx,0x30003
 105ebda:	add    BYTE PTR [rax],al
 105ebdc:	mov    esp,0x120003b9
 105ebe1:	add    BYTE PTR [rax],al
 105ebe3:	add    bh,al
 105ebe5:	mov    ecx,0x100003
 105ebea:	add    BYTE PTR [rax],al
 105ebec:	sar    BYTE PTR [rcx+0xd0003],cl
 105ebf2:	add    BYTE PTR [rax],al
 105ebf4:	fnstsw WORD PTR [rcx+0xc0003]
 105ebfa:	add    BYTE PTR [rax],al
 105ebfc:	call   0xb05efba
 105ec01:	add    BYTE PTR [rax],al
 105ec03:	add    bl,dh
 105ec05:	mov    ecx,0x90003
 105ec0a:	add    BYTE PTR [rax],al
 105ec0c:	(bad)  
 105ec0d:	mov    ecx,0x70003
 105ec12:	add    BYTE PTR [rax],al
 105ec14:	or     DWORD PTR [rdx+0x30003],edi
 105ec1a:	add    BYTE PTR [rax],al
 105ec1c:	sub    BYTE PTR [rdx+0x140003],bh
 105ec22:	add    BYTE PTR [rax],al
 105ec24:	(bad)  
 105ec25:	mov    edx,0x30003
 105ec2a:	add    BYTE PTR [rax],al
 105ec2c:	movabs al,ds:0xac000000020003ba
 105ec35:	mov    edx,0x10003
 105ec3a:	add    BYTE PTR [rax],al
 105ec3c:	mov    ebx,0x3ba
 105ec41:	add    BYTE PTR [rax],al
 105ec43:	add    BYTE PTR [rbp+0x30003ba],bh
 105ec49:	add    BYTE PTR [rax],al
 105ec4b:	add    ch,dl
 105ec4d:	mov    edx,0x20003
 105ec52:	add    BYTE PTR [rax],al
 105ec54:	loope  0x105ec10
 105ec56:	add    eax,DWORD PTR [rax]
 105ec58:	add    BYTE PTR [rax],al
 105ec5a:	add    BYTE PTR [rax],al
 105ec5c:	add    DWORD PTR [rsi],eax
 105ec5e:	add    al,BYTE PTR [rax]
 105ec60:	(bad)  
 105ec61:	xor    al,BYTE PTR [rdx]
 105ec63:	push   rax
 105ec64:	sbb    DWORD PTR [rip+0xffffffff920c0004],edx        # 0xffffffff9311ec6e
 105ec6a:	or     BYTE PTR [rax+0x7],dh
 105ec6d:	(bad)  
 105ec6e:	(bad)  
 105ec6f:	xor    BYTE PTR [rsi+rdi*8+0x78e00003],dl
 105ec76:	add    BYTE PTR [rax],al
 105ec78:	(bad)  
 105ec79:	(bad)  
 105ec7a:	(bad)  
 105ec7b:	inc    DWORD PTR [rax]
 105ec7d:	add    BYTE PTR [rax],al
 105ec7f:	add    BYTE PTR [rax],al
 105ec81:	add    BYTE PTR [rax],al
 105ec83:	add    al,dl
 105ec85:	add    al,0x5
 105ec87:	add    BYTE PTR [rcx],al
 105ec89:	add    BYTE PTR [rax],al
 105ec8b:	add    al,ah
 105ec8d:	add    al,0x5
 105ec8f:	add    bh,bh
 105ec91:	(bad)  
 105ec92:	(bad)  
 105ec93:	inc    DWORD PTR [rax]
 105ec95:	add    BYTE PTR [rax],al
 105ec97:	add    BYTE PTR [rax],al
 105ec99:	add    BYTE PTR [rax],al
 105ec9b:	add    BYTE PTR [rdx],al
 105ec9d:	add    BYTE PTR [rax],al
 105ec9f:	add    BYTE PTR [rbx],al
 105eca1:	add    BYTE PTR [rax],al
 105eca3:	add    BYTE PTR [rcx],al
 105eca5:	add    BYTE PTR [rax],al
 105eca7:	add    BYTE PTR [rsp+rbp*8+0x5],ch
	...
 105ecb6:	add    BYTE PTR [rax],al
 105ecb8:	lock add al,0x5
 105ecbb:	add    BYTE PTR [rax+0x0],cl
 105ecbe:	add    BYTE PTR [rax],al
 105ecc0:	and    BYTE PTR [rbx-0xfffd],bh
 105ecc6:	(bad)  
 105ecc7:	(bad)  
 105ecc8:	cmp    BYTE PTR [rbx+0x3],bh
 105ecce:	add    BYTE PTR [rax],al
 105ecd0:	(bad)  
 105ecd1:	mov    esp,0x10003
 105ecd6:	add    BYTE PTR [rax],al
 105ecd8:	cmp    DWORD PTR [rbx+rax*1+0x200],0x3bc9400
 105ece3:	add    BYTE PTR [rcx],al
 105ece5:	add    BYTE PTR [rax],al
 105ece7:	add    BYTE PTR [rdx+0x3bc],ah
 105eced:	add    BYTE PTR [rax],al
 105ecef:	add    BYTE PTR [rcx-0xfffc44],dh
 105ecf5:	(bad)  
 105ecf6:	(bad)  
 105ecf7:	push   QWORD PTR [rbx+0x3bc]
 105ecfd:	add    BYTE PTR [rax],al
 105ecff:	add    ch,bh
 105ed01:	add    al,0x5
 105ed03:	add    BYTE PTR [rbx],al
 105ed05:	add    BYTE PTR [rax],al
 105ed07:	add    BYTE PTR [rax],ah
 105ed09:	add    eax,0x5
 105ed0e:	add    BYTE PTR [rax],al
 105ed10:	sbb    DWORD PTR [rdx],ecx
 105ed12:	add    al,BYTE PTR [rax]
 105ed14:	or     dl,BYTE PTR [rdx+0x6]
 105ed17:	push   rax
 105ed18:	xchg   esp,eax
 105ed19:	inc    BYTE PTR [rbx]
 105ed1b:	add    al,ah
 105ed1d:	js     0x105ed1f
 105ed1f:	add    BYTE PTR [rcx],dl
 105ed21:	sbb    BYTE PTR [rax+rax*1],al
 105ed24:	sbb    BYTE PTR [rax+rcx*1],dh
 105ed27:	add    BYTE PTR [rdx],cl
 105ed29:	push   rdx
 105ed2a:	(bad)  
 105ed2b:	jo     0x105ecc1
 105ed2d:	inc    BYTE PTR [rbx]
 105ed2f:	add    BYTE PTR [rax],cl
 105ed31:	jns    0x105ed33
 105ed33:	add    bh,bh
 105ed35:	(bad)  
 105ed36:	(bad)  
 105ed37:	jmp    rax
 105ed39:	adc    BYTE PTR [rip+0x0],al        # 0x105ed3f
 105ed3f:	add    al,dh
 105ed41:	adc    BYTE PTR [rip+0x3bcd000],al        # 0x4c2bd47
 105ed47:	add    bh,bh
 105ed49:	(bad)  
 105ed4a:	(bad)  
 105ed4b:	(bad)  
 105ed4c:	jmp    0x105ed0a
 105ed4e:	add    eax,DWORD PTR [rax]
 105ed50:	add    BYTE PTR [rax],al
 105ed52:	add    BYTE PTR [rax],al
 105ed54:	and    al,0xbd
 105ed56:	add    eax,DWORD PTR [rax]
 105ed58:	add    DWORD PTR [rax],eax
 105ed5a:	add    BYTE PTR [rax],al
 105ed5c:	cmp    BYTE PTR [rbp+0x3],bh
 105ed62:	add    BYTE PTR [rax],al
 105ed64:	pop    rsi
 105ed65:	mov    ebp,0xffff0003
 105ed6a:	(bad)  
 105ed6b:	call   QWORD PTR [rcx]
 105ed6d:	(bad)  
 105ed6e:	or     al,BYTE PTR [rax]
 105ed70:	(bad)  
 105ed71:	add    DWORD PTR [rdi],ebp
 105ed73:	add    BYTE PTR [rbx],bl
 105ed75:	lock sbb eax,esp
 105ed78:	(bad)  
 105ed79:	rcl    BYTE PTR [rip+0x127013c0],1        # 0x1376013f
 105ed7f:	(bad)  
 105ed80:	adc    DWORD PTR [rax],esi
 105ed82:	adc    BYTE PTR [rax-0x6c],dl
 105ed85:	inc    BYTE PTR [rbx]
 105ed87:	add    BYTE PTR [rax],dh
 105ed89:	jns    0x105ed8b
 105ed8b:	add    bh,bh
 105ed8d:	(bad)  
 105ed8e:	(bad)  
 105ed8f:	push   QWORD PTR [rax]
 105ed91:	(bad)  
 105ed92:	add    eax,0x0
 105ed97:	add    BYTE PTR [rax+0x17],al
 105ed9a:	add    eax,0x100
 105ed9f:	add    BYTE PTR [rax+0x17],dl
 105eda2:	add    eax,0x200
 105eda7:	add    BYTE PTR [rax+0x17],ah
 105edaa:	add    eax,0x300
 105edaf:	add    BYTE PTR [rax+0x17],dh
 105edb2:	add    eax,0x300
 105edb7:	add    BYTE PTR [rax+0x5000517],al
 105edbd:	add    BYTE PTR [rax],al
 105edbf:	add    BYTE PTR [rax+0x3000517],dl
 105edc5:	add    BYTE PTR [rax],al
 105edc7:	add    BYTE PTR [rax+0x7000517],dl
 105edcd:	add    BYTE PTR [rax],al
 105edcf:	add    BYTE PTR [rax+0x8000517],ah
 105edd5:	add    BYTE PTR [rax],al
 105edd7:	add    BYTE PTR [rax+0x3000517],dh
 105eddd:	add    BYTE PTR [rax],al
 105eddf:	add    al,al
 105ede1:	(bad)  
 105ede2:	add    eax,0x300
 105ede7:	add    al,dl
 105ede9:	(bad)  
 105edea:	add    eax,0xb00
 105edef:	add    al,ah
 105edf1:	(bad)  
 105edf2:	add    eax,0x300
 105edf7:	add    al,ah
 105edf9:	(bad)  
 105edfa:	add    eax,0xd00
 105edff:	add    al,dh
 105ee01:	(bad)  
 105ee02:	add    eax,0xe00
 105ee07:	add    BYTE PTR [rax],al
 105ee09:	sbb    BYTE PTR [rip+0x300],al        # 0x105f10f
 105ee0f:	add    BYTE PTR [rax],dl
 105ee11:	sbb    BYTE PTR [rip+0x1000],al        # 0x105fe17
 105ee17:	add    BYTE PTR [rax],ah
 105ee19:	sbb    BYTE PTR [rip+0x300],al        # 0x105f11f
 105ee1f:	add    BYTE PTR [rax],ah
 105ee21:	sbb    BYTE PTR [rip+0x1200],al        # 0x1060027
 105ee27:	add    BYTE PTR [rax],dh
 105ee29:	sbb    BYTE PTR [rip+0x1300],al        # 0x106012f
 105ee2f:	add    BYTE PTR [rax+0x18],al
 105ee32:	add    eax,0x300
 105ee37:	add    BYTE PTR [rax+0x18],dl
 105ee3a:	add    eax,0x1500
 105ee3f:	add    BYTE PTR [rax+0x18],ah
 105ee42:	add    eax,0x300
 105ee47:	add    BYTE PTR [rax+0x18],ah
 105ee4a:	add    eax,0x1700
 105ee4f:	add    BYTE PTR [rax+0x18],dh
 105ee52:	add    eax,0x1800
 105ee57:	add    BYTE PTR [rax+0x19000518],al
 105ee5d:	add    BYTE PTR [rax],al
 105ee5f:	add    BYTE PTR [rax+0x18000518],dl
 105ee65:	add    BYTE PTR [rax],al
 105ee67:	add    BYTE PTR [rax+0x17000518],dl
 105ee6d:	add    BYTE PTR [rax],al
 105ee6f:	add    BYTE PTR [rax+0x3000518],dl
 105ee75:	add    BYTE PTR [rax],al
 105ee77:	add    BYTE PTR [rax+0x1d000518],dl
 105ee7d:	add    BYTE PTR [rax],al
 105ee7f:	add    BYTE PTR [rax+0x1e000518],ah
 105ee85:	add    BYTE PTR [rax],al
 105ee87:	add    BYTE PTR [rax+0x1d000518],dh
 105ee8d:	add    BYTE PTR [rax],al
 105ee8f:	add    BYTE PTR [rax+0x20000518],dh
 105ee95:	add    BYTE PTR [rax],al
 105ee97:	add    al,al
 105ee99:	sbb    BYTE PTR [rip+0x2100],al        # 0x1060f9f
 105ee9f:	add    al,dl
 105eea1:	sbb    BYTE PTR [rip+0x2200],al        # 0x10610a7
 105eea7:	add    al,ah
 105eea9:	sbb    BYTE PTR [rip+0x2100],al        # 0x1060faf
 105eeaf:	add    al,ah
 105eeb1:	sbb    BYTE PTR [rip+0x2000],al        # 0x1060eb7
 105eeb7:	add    al,ah
 105eeb9:	sbb    BYTE PTR [rip+0x1d00],al        # 0x1060bbf
 105eebf:	add    al,ah
 105eec1:	sbb    BYTE PTR [rip+0x2600],al        # 0x10614c7
 105eec7:	add    al,dh
 105eec9:	sbb    BYTE PTR [rip+0x2700],al        # 0x10615cf
 105eecf:	add    BYTE PTR [rax],al
 105eed1:	sbb    DWORD PTR [rip+0x2600],eax        # 0x10614d7
 105eed7:	add    BYTE PTR [rax],al
 105eed9:	sbb    DWORD PTR [rip+0x2900],eax        # 0x10617df
 105eedf:	add    BYTE PTR [rax],dl
 105eee1:	sbb    DWORD PTR [rip+0x2a00],eax        # 0x10618e7
 105eee7:	add    BYTE PTR [rax],ah
 105eee9:	sbb    DWORD PTR [rip+0x2b00],eax        # 0x10619ef
 105eeef:	add    BYTE PTR [rax],dh
 105eef1:	sbb    DWORD PTR [rip+0x2a00],eax        # 0x10618f7
 105eef7:	add    BYTE PTR [rax],dh
 105eef9:	sbb    DWORD PTR [rip+0x2900],eax        # 0x10617ff
 105eeff:	add    BYTE PTR [rax],dh
 105ef01:	sbb    DWORD PTR [rip+0x2600],eax        # 0x1061507
 105ef07:	add    BYTE PTR [rax],dh
 105ef09:	sbb    DWORD PTR [rip+0x2f00],eax        # 0x1061e0f
 105ef0f:	add    BYTE PTR [rax+0x19],al
 105ef12:	add    eax,0x3000
 105ef17:	add    BYTE PTR [rax+0x19],dl
 105ef1a:	add    eax,0x2f00
 105ef1f:	add    BYTE PTR [rax+0x19],dl
 105ef22:	add    eax,0x3200
 105ef27:	add    BYTE PTR [rax+0x19],ah
 105ef2a:	add    eax,0x2f00
 105ef2f:	add    BYTE PTR [rax+0x19],ah
 105ef32:	add    eax,0x3400
 105ef37:	add    BYTE PTR [rax+0x19],dh
 105ef3a:	add    eax,0x2f00
 105ef3f:	add    BYTE PTR [rax+0x2f000519],al
 105ef45:	add    BYTE PTR [rax],al
 105ef47:	add    BYTE PTR [rax-0x6ffffae7],dl
 105ef4d:	mov    ebp,0xffff0003
 105ef52:	(bad)  
 105ef53:	dec    eax
 105ef55:	mov    ebp,0x3
 105ef5a:	add    BYTE PTR [rax],al
 105ef5c:	(bad)  
 105ef5d:	mov    ebp,0x10003
 105ef62:	add    BYTE PTR [rax],al
 105ef64:	loopne 0x105ef23
 105ef66:	add    eax,DWORD PTR [rax]
 105ef68:	add    al,BYTE PTR [rax]
 105ef6a:	add    BYTE PTR [rax],al
 105ef6c:	in     al,dx
 105ef6d:	mov    ebp,0x30003
 105ef72:	add    BYTE PTR [rax],al
 105ef74:	or     BYTE PTR [rsi+0x40003],bh
 105ef7a:	add    BYTE PTR [rax],al
 105ef7c:	cs mov esi,0x30003
 105ef82:	add    BYTE PTR [rax],al
 105ef84:	rex.X mov esi,0x50003
 105ef8a:	add    BYTE PTR [rax],al
 105ef8c:	pop    rdi
 105ef8d:	mov    esi,0x60003
 105ef92:	add    BYTE PTR [rax],al
 105ef94:	jb     0x105ef54
 105ef96:	add    eax,DWORD PTR [rax]
 105ef98:	(bad)  
 105ef99:	add    BYTE PTR [rax],al
 105ef9b:	add    BYTE PTR [rax+0x80003be],al
 105efa1:	add    BYTE PTR [rax],al
 105efa3:	add    BYTE PTR [rbp+0x90003be],bl
 105efa9:	add    BYTE PTR [rax],al
 105efab:	add    BYTE PTR [rcx+0x80003be],bh
 105efb1:	add    BYTE PTR [rax],al
 105efb3:	add    ch,bh
 105efb5:	mov    esi,0x70003
 105efba:	add    BYTE PTR [rax],al
 105efbc:	or     eax,0x30003bf
 105efc1:	add    BYTE PTR [rax],al
 105efc3:	add    BYTE PTR [rcx],bh
 105efc5:	mov    edi,0xa0003
 105efca:	add    BYTE PTR [rax],al
 105efcc:	pop    rbp
 105efcd:	mov    edi,0x30003
 105efd2:	add    BYTE PTR [rax],al
 105efd4:	jno    0x105ef95
 105efd6:	add    eax,DWORD PTR [rax]
 105efd8:	or     eax,DWORD PTR [rax]
 105efda:	add    BYTE PTR [rax],al
 105efdc:	mov    ?,WORD PTR [rdi+0xc0003]
 105efe2:	add    BYTE PTR [rax],al
 105efe4:	movabs eax,ds:0xaf0000000d0003bf
 105efed:	mov    edi,0xe0003
 105eff2:	add    BYTE PTR [rax],al
 105eff4:	int3   
 105eff5:	mov    edi,0xf0003
 105effa:	add    BYTE PTR [rax],al
 105effc:	call   0xf05f3c0
 105f001:	add    BYTE PTR [rax],al
 105f003:	add    BYTE PTR [rcx],ch
 105f005:	rol    BYTE PTR [rbx],0x0
 105f008:	or     eax,0x39000000
 105f00d:	rol    BYTE PTR [rbx],0x0
 105f010:	add    eax,DWORD PTR [rax]
 105f012:	add    BYTE PTR [rax],al
 105f014:	ret    0x3c0
 105f017:	add    BYTE PTR [rax],dl
 105f019:	add    BYTE PTR [rax],al
 105f01b:	add    bh,bl
 105f01d:	rol    BYTE PTR [rbx],0x0
 105f020:	adc    DWORD PTR [rax],eax
 105f022:	add    BYTE PTR [rax],al
 105f024:	repnz rol BYTE PTR [rbx],0x0
 105f028:	adc    al,BYTE PTR [rax]
 105f02a:	add    BYTE PTR [rax],al
 105f02c:	inc    eax
 105f02e:	add    eax,DWORD PTR [rax]
 105f030:	adc    eax,DWORD PTR [rax]
 105f032:	add    BYTE PTR [rax],al
 105f034:	sbb    al,0xc1
 105f036:	add    eax,DWORD PTR [rax]
 105f038:	adc    al,0x0
 105f03a:	add    BYTE PTR [rax],al
 105f03c:	cmp    cl,al
 105f03e:	add    eax,DWORD PTR [rax]
 105f040:	adc    eax,DWORD PTR [rax]
 105f042:	add    BYTE PTR [rax],al
 105f044:	jns    0x105f007
 105f046:	add    eax,DWORD PTR [rax]
 105f048:	adc    al,BYTE PTR [rax]
 105f04a:	add    BYTE PTR [rax],al
 105f04c:	mov    ecx,eax
 105f04e:	add    eax,DWORD PTR [rax]
 105f050:	add    eax,DWORD PTR [rax]
 105f052:	add    BYTE PTR [rax],al
 105f054:	mov    ah,0xc1
 105f056:	add    eax,DWORD PTR [rax]
 105f058:	adc    eax,0xd1000000
 105f05d:	rol    DWORD PTR [rbx],0x0
 105f060:	(bad)  
 105f061:	add    BYTE PTR [rax],al
 105f063:	add    ah,ah
 105f065:	rol    DWORD PTR [rbx],0x0
 105f068:	(bad)  
 105f069:	add    BYTE PTR [rax],al
 105f06b:	add    cl,dh
 105f06d:	rol    DWORD PTR [rbx],0x0
 105f070:	sbb    BYTE PTR [rax],al
 105f072:	add    BYTE PTR [rax],al
 105f074:	(bad)  
 105f075:	ret    0x3
 105f078:	sbb    DWORD PTR [rax],eax
 105f07a:	add    BYTE PTR [rax],al
 105f07c:	sub    al,dl
 105f07e:	add    eax,DWORD PTR [rax]
 105f080:	sbb    eax,DWORD PTR [rax]
 105f082:	add    BYTE PTR [rax],al
 105f084:	imul   eax,edx,0x3
 105f087:	add    BYTE PTR [rax+rax*1],bl
 105f08a:	add    BYTE PTR [rax],al
 105f08c:	jnp    0x105f050
 105f08e:	add    eax,DWORD PTR [rax]
 105f090:	sbb    eax,0xa6000000
 105f095:	ret    0x3
 105f098:	(bad)  
 105f099:	add    BYTE PTR [rax],al
 105f09b:	add    bl,al
 105f09d:	ret    0x3
 105f0a0:	(bad)  
 105f0a1:	add    BYTE PTR [rax],al
 105f0a3:	add    dh,dl
 105f0a5:	ret    0x3
 105f0a8:	and    BYTE PTR [rax],al
 105f0aa:	add    BYTE PTR [rax],al
 105f0ac:	jrcxz  0x105f070
 105f0ae:	add    eax,DWORD PTR [rax]
 105f0b0:	and    DWORD PTR [rax],eax
 105f0b2:	add    BYTE PTR [rax],al
 105f0b4:	add    bl,al
 105f0b6:	add    eax,DWORD PTR [rax]
 105f0b8:	and    al,BYTE PTR [rax]
 105f0ba:	add    BYTE PTR [rax],al
 105f0bc:	sbb    al,0xc3
 105f0be:	add    eax,DWORD PTR [rax]
 105f0c0:	and    al,0x0
 105f0c2:	add    BYTE PTR [rax],al
 105f0c4:	pop    rbp
 105f0c5:	ret    
 105f0c6:	add    eax,DWORD PTR [rax]
 105f0c8:	and    eax,0x6d000000
 105f0cd:	ret    
 105f0ce:	add    eax,DWORD PTR [rax]
 105f0d0:	add    BYTE PTR es:[rax],al
 105f0d3:	add    BYTE PTR [rax+0x270003c3],bl
 105f0d9:	add    BYTE PTR [rax],al
 105f0db:	add    BYTE PTR [rbp+0x280003c3],dh
 105f0e1:	add    BYTE PTR [rax],al
 105f0e3:	add    al,cl
 105f0e5:	ret    
 105f0e6:	add    eax,DWORD PTR [rax]
 105f0e8:	sub    DWORD PTR [rax],eax
 105f0ea:	add    BYTE PTR [rax],al
 105f0ec:	(bad)  
 105f0ed:	ret    
 105f0ee:	add    eax,DWORD PTR [rax]
 105f0f0:	sub    al,BYTE PTR [rax]
 105f0f2:	add    BYTE PTR [rax],al
 105f0f4:	bnd ret 
 105f0f6:	add    eax,DWORD PTR [rax]
 105f0f8:	sub    eax,DWORD PTR [rax]
 105f0fa:	add    BYTE PTR [rax],al
 105f0fc:	(bad)  
 105f0fd:	(bad)
 105f101:	add    BYTE PTR [rax],al
 105f103:	add    BYTE PTR [rdi-0x3c],cl
 105f106:	add    eax,DWORD PTR [rax]
 105f108:	add    BYTE PTR cs:[rax],al
 105f10b:	add    BYTE PTR [rdi-0x3c],bl
 105f10e:	add    eax,DWORD PTR [rax]
 105f110:	(bad)  
 105f111:	add    BYTE PTR [rax],al
 105f113:	add    BYTE PTR [rsp+rax*8+0x260003],bh
 105f11a:	add    BYTE PTR [rax],al
 105f11c:	enter  0x3c4,0x0
 105f120:	sbb    eax,0xd4000000
 105f125:	(bad)
 105f129:	add    BYTE PTR [rax],al
 105f12b:	add    al,ah
 105f12d:	(bad)
 105f131:	add    BYTE PTR [rax],al
 105f133:	add    ah,ch
 105f135:	(bad)
 105f139:	add    BYTE PTR [rax],al
 105f13b:	add    al,bh
 105f13d:	(bad)
 105f141:	add    BYTE PTR [rax],al
 105f143:	add    BYTE PTR [rax*8-0xfffd],al
 105f14a:	(bad)  
 105f14b:	call   FWORD PTR [rcx]
 105f14d:	(bad)
 105f150:	(bad)  
 105f151:	add    BYTE PTR [rax],al
 105f153:	add    BYTE PTR [rcx-0x3b],al
 105f156:	add    eax,DWORD PTR [rax]
 105f158:	xor    BYTE PTR [rax],al
 105f15a:	add    BYTE PTR [rax],al
 105f15c:	pop    rsi
 105f15d:	(bad)
 105f160:	xor    DWORD PTR [rax],eax
 105f162:	add    BYTE PTR [rax],al
 105f164:	jno    0x105f12b
 105f166:	add    eax,DWORD PTR [rax]
 105f168:	xor    al,BYTE PTR [rax]
 105f16a:	add    BYTE PTR [rax],al
 105f16c:	jg     0x105f133
 105f16e:	add    eax,DWORD PTR [rax]
 105f170:	xor    al,0x0
 105f172:	add    BYTE PTR [rax],al
 105f174:	rol    ch,0x3
 105f177:	add    BYTE PTR [rip+0xffffffffd9000000],dh        # 0xffffffffda05f17d
 105f17d:	(bad)
 105f180:	xor    al,0x0
 105f182:	add    BYTE PTR [rax],al
 105f184:	rex.RXB mov BYTE PTR [r11],0x0
 105f188:	(bad)  
 105f189:	add    BYTE PTR [rax],al
 105f18b:	add    BYTE PTR [rsi+rax*8+0x260003],ch
 105f192:	add    BYTE PTR [rax],al
 105f194:	mov    eax,0x1d0003c6
 105f199:	add    BYTE PTR [rax],al
 105f19b:	add    ah,al
 105f19d:	mov    BYTE PTR [rbx],0x0
 105f1a0:	add    eax,DWORD PTR [rax]
 105f1a2:	add    BYTE PTR [rax],al
 105f1a4:	rol    dh,1
 105f1a6:	add    eax,DWORD PTR [rax]
 105f1a8:	add    al,BYTE PTR [rax]
 105f1aa:	add    BYTE PTR [rax],al
 105f1ac:	fadd   st(6),st
 105f1ae:	add    eax,DWORD PTR [rax]
 105f1b0:	add    DWORD PTR [rax],eax
 105f1b2:	add    BYTE PTR [rax],al
 105f1b4:	call   0x105f57f
 105f1b9:	add    BYTE PTR [rax],al
 105f1bb:	add    ah,dh
 105f1bd:	mov    BYTE PTR [rbx],0x0
 105f1c0:	(bad)  
 105f1c1:	(bad)  
 105f1c2:	(bad)  
 105f1c3:	dec    DWORD PTR [rip+0x2f0003c7]        # 0x3005f590
 105f1c9:	add    BYTE PTR [rax],al
 105f1cb:	add    BYTE PTR [rbx],ah
 105f1cd:	mov    DWORD PTR [rbx],0x3600
 105f1d3:	add    BYTE PTR [rax],bh
 105f1d5:	mov    DWORD PTR [rbx],0x2f00
 105f1db:	add    BYTE PTR [rbx-0x39],ch
 105f1de:	add    eax,DWORD PTR [rax]
 105f1e0:	(bad)  
 105f1e1:	add    BYTE PTR [rax],al
 105f1e3:	add    BYTE PTR [rdx-0x39],bh
 105f1e6:	add    eax,DWORD PTR [rax]
 105f1e8:	(bad)  
 105f1e9:	add    BYTE PTR [rax],al
 105f1eb:	add    dl,bh
 105f1ed:	mov    DWORD PTR [rbx],0x2600
 105f1f3:	add    BYTE PTR [rsi],al
 105f1f5:	enter  0x3,0x1d
 105f1f9:	add    BYTE PTR [rax],al
 105f1fb:	add    BYTE PTR [rdx],dl
 105f1fd:	enter  0x3,0x3
 105f201:	add    BYTE PTR [rax],al
 105f203:	add    BYTE PTR [rsi],bl
 105f205:	enter  0x3,0x2
 105f209:	add    BYTE PTR [rax],al
 105f20b:	add    BYTE PTR [rdx],ch
 105f20d:	enter  0x3,0x1
 105f211:	add    BYTE PTR [rax],al
 105f213:	add    BYTE PTR [rsi],dh
 105f215:	enter  0x3,0x0
 105f219:	add    BYTE PTR [rax],al
 105f21b:	add    BYTE PTR [rdx-0x38],al
 105f21e:	add    eax,DWORD PTR [rax]
 105f220:	(bad)  
 105f221:	(bad)  
 105f222:	(bad)  
 105f223:	call   QWORD PTR [rcx]
 105f225:	sub    eax,0x342d000b
 105f22a:	(bad)  
 105f22b:	add    BYTE PTR [rcx],ah
 105f22d:	add    DWORD PTR [rsi],edx
 105f22f:	add    BYTE PTR [rsi],dl
 105f231:	lock adc al,0xe0
 105f234:	adc    dl,al
 105f236:	adc    al,al
 105f238:	(bad)  
 105f239:	jo     0x105f248
 105f23b:	(bad)  
 105f23c:	or     al,0x50
 105f23e:	add    BYTE PTR [rax],al
 105f240:	xchg   esp,eax
 105f241:	inc    BYTE PTR [rbx]
 105f243:	add    BYTE PTR [rax+0x79],bl
 105f246:	add    BYTE PTR [rax],al
 105f248:	(bad)  
 105f249:	(bad)  
 105f24a:	(bad)  
 105f24b:	inc    DWORD PTR [rax]
 105f24d:	or     al,0x5
 105f24f:	add    BYTE PTR [rax],al
 105f251:	add    BYTE PTR [rax],al
 105f253:	add    BYTE PTR [rax],dl
 105f255:	or     al,0x5
 105f257:	add    BYTE PTR [rcx],al
 105f259:	add    BYTE PTR [rax],al
 105f25b:	add    BYTE PTR [rax],ah
 105f25d:	or     al,0x5
 105f25f:	add    BYTE PTR [rdx],al
 105f261:	add    BYTE PTR [rax],al
 105f263:	add    BYTE PTR [rax],dh
 105f265:	or     al,0x5
 105f267:	add    BYTE PTR [rdx],al
 105f269:	add    BYTE PTR [rax],al
 105f26b:	add    BYTE PTR [rax+0xc],al
 105f26e:	add    eax,0x400
 105f273:	add    BYTE PTR [rax+0xc],dl
 105f276:	add    eax,0x200
 105f27b:	add    BYTE PTR [rax+0xc],ah
 105f27e:	add    eax,0x600
 105f283:	add    BYTE PTR [rax+0xc],dh
 105f286:	add    eax,0x200
 105f28b:	add    BYTE PTR [rax+0x800050c],al
 105f291:	add    BYTE PTR [rax],al
 105f293:	add    BYTE PTR [rax+0x100050c],dl
 105f299:	add    BYTE PTR [rax],al
 105f29b:	add    BYTE PTR [rax+0xa00050c],ah
 105f2a1:	add    BYTE PTR [rax],al
 105f2a3:	add    BYTE PTR [rax+0xb00050c],dh
 105f2a9:	add    BYTE PTR [rax],al
 105f2ab:	add    al,al
 105f2ad:	or     al,0x5
 105f2af:	add    BYTE PTR [rdx],cl
 105f2b1:	add    BYTE PTR [rax],al
 105f2b3:	add    al,dl
 105f2b5:	or     al,0x5
 105f2b7:	add    BYTE PTR [rip+0xffffffffe0000000],cl        # 0xffffffffe105f2bd
 105f2bd:	or     al,0x5
 105f2bf:	add    BYTE PTR [rdx],cl
 105f2c1:	add    BYTE PTR [rax],al
 105f2c3:	add    al,dh
 105f2c5:	or     al,0x5
 105f2c7:	add    BYTE PTR [rdi],cl
 105f2c9:	add    BYTE PTR [rax],al
 105f2cb:	add    BYTE PTR [rax],al
 105f2cd:	or     eax,0xa0005
 105f2d2:	add    BYTE PTR [rax],al
 105f2d4:	adc    BYTE PTR [rip+0x110005],cl        # 0x116f2df
 105f2da:	add    BYTE PTR [rax],al
 105f2dc:	and    BYTE PTR [rip+0xa0005],cl        # 0x10ff2e7
 105f2e2:	add    BYTE PTR [rax],al
 105f2e4:	xor    BYTE PTR [rip+0x130005],cl        # 0x118f2ef
 105f2ea:	add    BYTE PTR [rax],al
 105f2ec:	rex or eax,0xc8700005
 105f2f2:	add    eax,DWORD PTR [rax]
 105f2f4:	(bad)  
 105f2f5:	(bad)  
 105f2f6:	(bad)  
 105f2f7:	jmp    FWORD PTR [rcx+0x10003c8]
 105f2fd:	add    BYTE PTR [rax],al
 105f2ff:	add    dl,bh
 105f301:	enter  0x3,0x2
 105f305:	add    BYTE PTR [rax],al
 105f307:	add    BYTE PTR [rcx+0x40003c9],dh
 105f30d:	add    BYTE PTR [rax],al
 105f30f:	add    BYTE PTR [rdi+0x20003c9],bh
 105f315:	add    BYTE PTR [rax],al
 105f317:	add    BYTE PTR [rbx-0x36],cl
 105f31a:	add    eax,DWORD PTR [rax]
 105f31c:	or     BYTE PTR [rax],al
 105f31e:	add    BYTE PTR [rax],al
 105f320:	pop    rcx
 105f321:	retf   0x3
 105f324:	add    al,BYTE PTR [rax]
 105f326:	add    BYTE PTR [rax],al
 105f328:	mov    cl,dl
 105f32a:	add    eax,DWORD PTR [rax]
 105f32c:	(bad)  
 105f32d:	add    BYTE PTR [rax],al
 105f32f:	add    BYTE PTR [rcx+0x70003ca],bl
 105f335:	add    BYTE PTR [rax],al
 105f337:	add    BYTE PTR [rbx+0x60003ca],dh
 105f33d:	add    BYTE PTR [rax],al
 105f33f:	add    bl,dh
 105f341:	retf   0x3
 105f344:	add    al,BYTE PTR [rax]
 105f346:	add    BYTE PTR [rax],al
 105f348:	dec    dl
 105f34a:	add    eax,DWORD PTR [rax]
 105f34c:	add    DWORD PTR [rax],eax
 105f34e:	add    BYTE PTR [rax],al
 105f350:	push   rcx
 105f351:	retf   
 105f352:	add    eax,DWORD PTR [rax]
 105f354:	or     al,BYTE PTR [rax]
 105f356:	add    BYTE PTR [rax],al
 105f358:	jno    0x105f325
 105f35a:	add    eax,DWORD PTR [rax]
 105f35c:	or     eax,DWORD PTR [rax]
 105f35e:	add    BYTE PTR [rax],al
 105f360:	jg     0x105f32d
 105f362:	add    eax,DWORD PTR [rax]
 105f364:	or     al,BYTE PTR [rax]
 105f366:	add    BYTE PTR [rax],al
 105f368:	loopne 0x105f335
 105f36a:	add    eax,DWORD PTR [rax]
 105f36c:	or     eax,0xee000000
 105f371:	retf   
 105f372:	add    eax,DWORD PTR [rax]
 105f374:	or     al,BYTE PTR [rax]
 105f376:	add    BYTE PTR [rax],al
 105f378:	sub    ecx,esp
 105f37a:	add    eax,DWORD PTR [rax]
 105f37c:	sldt   WORD PTR [rax]
 105f37f:	add    BYTE PTR [rcx],bh
 105f381:	int3   
 105f382:	add    eax,DWORD PTR [rax]
 105f384:	or     al,BYTE PTR [rax]
 105f386:	add    BYTE PTR [rax],al
 105f388:	fs int3 
 105f38a:	add    eax,DWORD PTR [rax]
 105f38c:	adc    DWORD PTR [rax],eax
 105f38e:	add    BYTE PTR [rax],al
 105f390:	jae    0x105f35e
 105f392:	add    eax,DWORD PTR [rax]
 105f394:	adc    al,BYTE PTR [rax]
 105f396:	add    BYTE PTR [rax],al
 105f398:	(bad)  
 105f399:	int3   
 105f39a:	add    eax,DWORD PTR [rax]
 105f39c:	adc    DWORD PTR [rax],eax
 105f39e:	add    BYTE PTR [rax],al
 105f3a0:	int    0xcc
 105f3a2:	add    eax,DWORD PTR [rax]
 105f3a4:	or     al,BYTE PTR [rax]
 105f3a6:	add    BYTE PTR [rax],al
 105f3a8:	fcmove st,st(4)
 105f3aa:	add    eax,DWORD PTR [rax]
 105f3ac:	adc    eax,DWORD PTR [rax]
 105f3ae:	add    BYTE PTR [rax],al
 105f3b0:	jmp    0x1505f781
 105f3b5:	add    BYTE PTR [rax],al
 105f3b7:	add    BYTE PTR [rbx],al
 105f3b9:	int    0x3
 105f3bb:	add    BYTE PTR [rbx],dl
 105f3bd:	add    BYTE PTR [rax],al
 105f3bf:	add    BYTE PTR [rbx-0x33],al
 105f3c2:	add    eax,DWORD PTR [rax]
 105f3c4:	or     al,BYTE PTR [rax]
 105f3c6:	add    BYTE PTR [rax],al
 105f3c8:	rex.WRX int 0x3
 105f3cb:	add    BYTE PTR [rcx],al
 105f3cd:	add    BYTE PTR [rax],al
 105f3cf:	add    BYTE PTR [rcx-0x33],bl
 105f3d2:	add    eax,DWORD PTR [rax]
 105f3d4:	add    BYTE PTR [rax],al
 105f3d6:	add    BYTE PTR [rax],al
 105f3d8:	movsxd ecx,ebp
 105f3da:	add    eax,DWORD PTR [rax]
 105f3dc:	(bad)  
 105f3dd:	(bad)  
 105f3de:	(bad)  
 105f3df:	call   QWORD PTR [rcx]
 105f3e1:	sub    eax,0x342d000b
 105f3e6:	sbb    al,0x0
 105f3e8:	and    DWORD PTR [rcx],eax
 105f3ea:	adc    al,0x0
 105f3ec:	(bad)  
 105f3ed:	lock adc al,0xe0
 105f3f0:	adc    dl,al
 105f3f2:	adc    al,al
 105f3f4:	(bad)  
 105f3f5:	jo     0x105f404
 105f3f7:	(bad)  
 105f3f8:	or     al,0x50
 105f3fa:	add    BYTE PTR [rax],al
 105f3fc:	xchg   esp,eax
 105f3fd:	inc    BYTE PTR [rbx]
 105f3ff:	add    BYTE PTR [rax-0xffff87],al
 105f405:	(bad)  
 105f406:	(bad)  
 105f407:	inc    DWORD PTR [rax]
 105f409:	(bad)  
 105f40a:	add    eax,0x0
 105f40f:	add    BYTE PTR [rax],dl
 105f411:	(bad)  
 105f412:	add    eax,0x100
 105f417:	add    BYTE PTR [rax],ah
 105f419:	(bad)  
 105f41a:	add    eax,0x200
 105f41f:	add    BYTE PTR [rax],dh
 105f421:	(bad)  
 105f422:	add    eax,0x3cd9000
 105f427:	add    bh,bh
 105f429:	(bad)  
 105f42a:	(bad)  
 105f42b:	inc    esi
 105f42d:	int    0x3
 105f42f:	add    BYTE PTR [rcx],al
 105f431:	add    BYTE PTR [rax],al
 105f433:	add    al,dh
 105f435:	int    0x3
 105f437:	add    BYTE PTR [rdx],al
 105f439:	add    BYTE PTR [rax],al
 105f43b:	add    BYTE PTR [rax],dl
 105f43d:	(bad)  
 105f43e:	add    eax,DWORD PTR [rax]
 105f440:	add    eax,DWORD PTR [rax]
 105f442:	add    BYTE PTR [rax],al
 105f444:	rex.W rol BYTE PTR [rbx],cl
 105f447:	add    BYTE PTR [rdx],al
 105f449:	add    BYTE PTR [rax],al
 105f44b:	add    BYTE PTR [rdi+0x10003d2],al
 105f451:	add    BYTE PTR [rax],al
 105f453:	add    BYTE PTR [rcx+0x3d2],bh
 105f459:	add    BYTE PTR [rax],al
 105f45b:	add    bl,al
 105f45d:	rol    BYTE PTR [rbx],cl
 105f45f:	add    bh,bh
 105f461:	(bad)  
 105f462:	(bad)  
 105f463:	inc    DWORD PTR [rcx]
 105f465:	or     al,BYTE PTR [rax+rax*1]
 105f468:	or     dh,BYTE PTR [rsi+rax*1]
 105f46b:	add    BYTE PTR [rdx],cl
 105f46d:	xor    al,BYTE PTR [rsi]
 105f46f:	jo     0x105f472
 105f471:	or     al,BYTE PTR [rax+rax*1]
 105f474:	or     dh,BYTE PTR [rsi+rax*1]
 105f477:	add    BYTE PTR [rdx],cl
 105f479:	xor    al,BYTE PTR [rsi]
 105f47b:	jo     0x105f47e
 105f47d:	adc    BYTE PTR [rax],cl
 105f47f:	add    BYTE PTR [rax],dl
 105f481:	xor    al,0xd
 105f483:	add    BYTE PTR [rax],dl
 105f485:	xor    cl,BYTE PTR [rax+rsi*8]
 105f488:	or     ah,al
 105f48a:	or     BYTE PTR [rax+0x7],dh
 105f48d:	(bad)  
 105f48e:	(bad)  
 105f48f:	push   rax
 105f490:	and    DWORD PTR [rip+0xffffffffc4050002],eax        # 0xffffffffc50af498
 105f496:	or     al,BYTE PTR [rax]
 105f498:	nop
 105f499:	rol    DWORD PTR [rbx],cl
 105f49b:	add    BYTE PTR [rax+0x7c0003d4],al
 105f4a1:	hlt    
 105f4a2:	add    eax,0x2052100
 105f4a7:	add    BYTE PTR [rip+0xffffffff80000cd4],al        # 0xffffffff81060181
 105f4ad:	(bad)  
 105f4ae:	add    eax,DWORD PTR [rax]
 105f4b0:	xchg   esi,eax
 105f4b1:	(bad)  
 105f4b2:	add    eax,DWORD PTR [rax]
 105f4b4:	nop
 105f4b5:	hlt    
 105f4b6:	add    eax,0x2100
 105f4bb:	add    BYTE PTR [rax-0x69fffc2c],al
 105f4c1:	(bad)  
 105f4c2:	add    eax,DWORD PTR [rax]
 105f4c4:	nop
 105f4c5:	hlt    
 105f4c6:	add    eax,0x2100
 105f4cb:	add    BYTE PTR [rax-0x7ffffc2d],dl
 105f4d1:	(bad)  
 105f4d2:	add    eax,DWORD PTR [rax]
 105f4d4:	jl     0x105f4ca
 105f4d6:	add    eax,0x4002100
 105f4db:	add    BYTE PTR [rax],al
 105f4dd:	(bad)  
 105f4de:	or     al,0x0
 105f4e0:	add    ah,al
 105f4e2:	or     al,BYTE PTR [rax]
 105f4e4:	nop
 105f4e5:	rol    DWORD PTR [rbx],cl
 105f4e7:	add    BYTE PTR [rax+0x7c0003d4],al
 105f4ed:	hlt    
 105f4ee:	add    eax,0x60f0100
 105f4f3:	add    BYTE PTR [rdi],cl
 105f4f5:	fs (bad) 
 105f4f7:	add    BYTE PTR [rdi],cl
 105f4f9:	xor    al,0x6
 105f4fb:	add    BYTE PTR [rdi],cl
 105f4fd:	xor    cl,BYTE PTR [rbx]
 105f4ff:	jo     0x105f512
 105f501:	sbb    eax,0x641d0006
 105f506:	or     al,BYTE PTR [rax]
 105f508:	sbb    BYTE PTR [rcx+rcx*1],dh
 105f50b:	add    BYTE PTR [rdx],cl
 105f50d:	push   rdx
 105f50e:	(bad)  
 105f50f:	jo     0x105f4a5
 105f511:	inc    BYTE PTR [rbx]
 105f513:	add    BYTE PTR [rax],ch
 105f515:	cdq    
 105f516:	add    BYTE PTR [rax],al
 105f518:	(bad)  
 105f519:	(bad)  
 105f51a:	(bad)  
 105f51b:	inc    DWORD PTR [rax]
 105f51d:	and    DWORD PTR [rip+0x0],eax        # 0x105f523
 105f523:	add    BYTE PTR [rax],dl
 105f525:	and    DWORD PTR [rip+0x3d67000],eax        # 0x4dc652b
 105f52b:	add    bh,bh
 105f52d:	(bad)  
 105f52e:	(bad)  
 105f52f:	call   FWORD PTR [rbp+0x3d6]
 105f535:	add    BYTE PTR [rax],al
 105f537:	add    dh,al
 105f539:	(bad)  
 105f53a:	add    eax,DWORD PTR [rax]
 105f53c:	add    DWORD PTR [rax],eax
 105f53e:	add    BYTE PTR [rax],al
 105f540:	(bad)  
 105f541:	(bad)  
 105f542:	add    eax,DWORD PTR [rax]
 105f544:	(bad)  
 105f545:	(bad)  
 105f546:	(bad)  
 105f547:	inc    DWORD PTR [rcx]
 105f549:	clts   
 105f54b:	add    BYTE PTR [rdi],cl
 105f54d:	fs (bad) 
 105f54f:	add    BYTE PTR [rdi],cl
 105f551:	xor    al,0x6
 105f553:	add    BYTE PTR [rdi],cl
 105f555:	xor    cl,BYTE PTR [rbx]
 105f557:	jo     0x105f55a
 105f559:	or     al,BYTE PTR [rax+rax*1]
 105f55c:	or     dh,BYTE PTR [rsi+rax*1]
 105f55f:	add    BYTE PTR [rdx],cl
 105f561:	xor    al,BYTE PTR [rsi]
 105f563:	jo     0x105f566
 105f565:	adc    BYTE PTR [rax],cl
 105f567:	add    BYTE PTR [rax],dl
 105f569:	xor    al,0xd
 105f56b:	add    BYTE PTR [rax],dl
 105f56d:	xor    cl,BYTE PTR [rax+rsi*8]
 105f570:	or     ah,al
 105f572:	or     BYTE PTR [rax+0x7],dh
 105f575:	(bad)  
 105f576:	(bad)  
 105f577:	push   rax
 105f578:	and    DWORD PTR [rip+0xffffffffc4050002],eax        # 0xffffffffc50af580
 105f57e:	or     al,BYTE PTR [rax]
 105f580:	lock xlat BYTE PTR ds:[rbx]
 105f582:	add    eax,DWORD PTR [rax]
 105f584:	loopne 0x105f55e
 105f586:	add    eax,DWORD PTR [rax]
 105f588:	fs cmc 
 105f58a:	add    eax,0x2052100
 105f58f:	add    BYTE PTR [rip+0xffffffffe0000cd4],al        # 0xffffffffe1060269
 105f595:	fadd   DWORD PTR [rbx]
 105f597:	add    dh,dh
 105f599:	fadd   DWORD PTR [rbx]
 105f59b:	add    BYTE PTR [rax-0xb],bh
 105f59e:	add    eax,0x2100
 105f5a3:	add    al,ah
 105f5a5:	fadd   DWORD PTR [rbx]
 105f5a7:	add    dh,dh
 105f5a9:	fadd   DWORD PTR [rbx]
 105f5ab:	add    BYTE PTR [rax-0xb],bh
 105f5ae:	add    eax,0x2100
 105f5b3:	add    al,dh
 105f5b5:	xlat   BYTE PTR ds:[rbx]
 105f5b6:	add    eax,DWORD PTR [rax]
 105f5b8:	loopne 0x105f592
 105f5ba:	add    eax,DWORD PTR [rax]
 105f5bc:	fs cmc 
 105f5be:	add    eax,0x4002100
 105f5c3:	add    BYTE PTR [rax],al
 105f5c5:	(bad)  
 105f5c6:	or     al,0x0
 105f5c8:	add    ah,al
 105f5ca:	or     al,BYTE PTR [rax]
 105f5cc:	lock xlat BYTE PTR ds:[rbx]
 105f5ce:	add    eax,DWORD PTR [rax]
 105f5d0:	loopne 0x105f5aa
 105f5d2:	add    eax,DWORD PTR [rax]
 105f5d4:	fs cmc 
 105f5d6:	add    eax,0x60f0100
 105f5db:	add    BYTE PTR [rdi],cl
 105f5dd:	fs (bad) 
 105f5df:	add    BYTE PTR [rdi],cl
 105f5e1:	xor    al,0x6
 105f5e3:	add    BYTE PTR [rdi],cl
 105f5e5:	xor    cl,BYTE PTR [rbx]
 105f5e7:	jo     0x105f5fa
 105f5e9:	sub    al,0xa
 105f5eb:	add    BYTE PTR [rsp+rsi*1],ch
 105f5ee:	sbb    BYTE PTR [rax],al
 105f5f0:	sbb    al,0xd2
 105f5f2:	adc    eax,0x11e013f0
 105f5f7:	ror    BYTE PTR [rdi],1
 105f5f9:	ror    BYTE PTR [rip+0xb600c70],0x50        # 0xc660270
 105f600:	xchg   esp,eax
 105f601:	inc    BYTE PTR [rbx]
 105f603:	add    BYTE PTR [rax-0x67],dl
 105f606:	add    BYTE PTR [rax],al
 105f608:	(bad)  
 105f609:	(bad)  
 105f60a:	(bad)  
 105f60b:	inc    DWORD PTR [rax+0x51f]
 105f611:	add    BYTE PTR [rax],al
 105f613:	add    BYTE PTR [rax+0x100051f],ah
 105f619:	add    BYTE PTR [rax],al
 105f61b:	add    al,al
 105f61d:	(bad)  
 105f61e:	add    eax,0x200
 105f623:	add    al,ah
 105f625:	(bad)  
 105f626:	add    eax,0x300
 105f62b:	add    BYTE PTR [rax],al
 105f62d:	and    BYTE PTR [rip+0x400],al        # 0x105fa33
 105f633:	add    BYTE PTR [rax],ah
 105f635:	and    BYTE PTR [rip+0x500],al        # 0x105fb3b
 105f63b:	add    BYTE PTR [rax+0x20],al
 105f63e:	add    eax,0x600
 105f643:	add    BYTE PTR [rax+0x20],dl
 105f646:	add    eax,0x700
 105f64b:	add    BYTE PTR [rax+0x20],ah
 105f64e:	add    eax,0x600
 105f653:	add    BYTE PTR [rax+0x20],dh
 105f656:	add    eax,0x600
 105f65b:	add    BYTE PTR [rax+0xa000520],al
 105f661:	add    BYTE PTR [rax],al
 105f663:	add    BYTE PTR [rax+0xa000520],dl
 105f669:	add    BYTE PTR [rax],al
 105f66b:	add    BYTE PTR [rax+0xa000520],ah
 105f671:	add    BYTE PTR [rax],al
 105f673:	add    BYTE PTR [rax+0xa000520],dh
 105f679:	add    BYTE PTR [rax],al
 105f67b:	add    al,al
 105f67d:	and    BYTE PTR [rip+0xa00],al        # 0x1060083
 105f683:	add    al,dl
 105f685:	and    BYTE PTR [rip+0xa00],al        # 0x106008b
 105f68b:	add    al,ah
 105f68d:	and    BYTE PTR [rip+0x3dad000],al        # 0x4e0c693
 105f693:	add    bh,bh
 105f695:	(bad)  
 105f696:	(bad)  
 105f697:	call   QWORD PTR [rax]
 105f699:	fild   DWORD PTR [rbx]
 105f69b:	add    BYTE PTR [rax],al
 105f69d:	add    BYTE PTR [rax],al
 105f69f:	add    BYTE PTR [rbx],bl
 105f6a1:	fild   DWORD PTR [rbx]
 105f6a3:	add    BYTE PTR [rcx],al
 105f6a5:	add    BYTE PTR [rax],al
 105f6a7:	add    BYTE PTR [rsi],ah
 105f6a9:	fild   DWORD PTR [rbx]
 105f6ab:	add    BYTE PTR [rdx],al
 105f6ad:	add    BYTE PTR [rax],al
 105f6af:	add    BYTE PTR [rcx],dh
 105f6b1:	fild   DWORD PTR [rbx]
 105f6b3:	add    BYTE PTR [rbx],al
 105f6b5:	add    BYTE PTR [rax],al
 105f6b7:	add    BYTE PTR [rbx+rbx*8],bh
 105f6ba:	add    eax,DWORD PTR [rax]
 105f6bc:	add    al,0x0
 105f6be:	add    BYTE PTR [rax],al
 105f6c0:	rex.RXB fild DWORD PTR [r11]
 105f6c3:	add    BYTE PTR [rip+0x52000000],al        # 0x5305f6c9
 105f6c9:	fild   DWORD PTR [rbx]
 105f6cb:	add    BYTE PTR [rsi],al
 105f6cd:	add    BYTE PTR [rax],al
 105f6cf:	add    BYTE PTR [rcx],ch
 105f6d1:	fadd   QWORD PTR [rbx]
 105f6d3:	add    BYTE PTR [rdi],al
 105f6d5:	add    BYTE PTR [rax],al
 105f6d7:	add    BYTE PTR [rax],bh
 105f6d9:	fadd   QWORD PTR [rbx]
 105f6db:	add    BYTE PTR [rax],cl
 105f6dd:	add    BYTE PTR [rax],al
 105f6df:	add    BYTE PTR [rbp-0x24],dl
 105f6e2:	add    eax,DWORD PTR [rax]
 105f6e4:	(bad)  
 105f6e5:	add    BYTE PTR [rax],al
 105f6e7:	add    BYTE PTR [rax-0x24],ah
 105f6ea:	add    eax,DWORD PTR [rax]
 105f6ec:	(bad)  
 105f6ed:	add    BYTE PTR [rax],al
 105f6ef:	add    al,ch
 105f6f1:	fadd   QWORD PTR [rbx]
 105f6f3:	add    BYTE PTR [rcx],cl
 105f6f5:	add    BYTE PTR [rax],al
 105f6f7:	add    bh,bh
 105f6f9:	fadd   QWORD PTR [rbx]
 105f6fb:	add    BYTE PTR [rsi],al
 105f6fd:	add    BYTE PTR [rax],al
 105f6ff:	add    BYTE PTR [rip+0xa0003dd],bl        # 0xb05fae2
 105f705:	add    BYTE PTR [rax],al
 105f707:	add    ah,ch
 105f709:	fld    QWORD PTR [rbx]
 105f70b:	add    BYTE PTR [rbx],cl
 105f70d:	add    BYTE PTR [rax],al
 105f70f:	add    BYTE PTR [rsi],cl
 105f711:	fiadd  WORD PTR [rbx]
 105f713:	add    BYTE PTR [rdx],cl
 105f715:	add    BYTE PTR [rax],al
 105f717:	add    BYTE PTR [rcx+0xc0003de],bh
 105f71d:	add    BYTE PTR [rax],al
 105f71f:	add    bl,bl
 105f721:	fiadd  WORD PTR [rbx]
 105f723:	add    BYTE PTR [rdx],cl
 105f725:	add    BYTE PTR [rax],al
 105f727:	add    BYTE PTR [rdx-0x21],bh
 105f72a:	add    eax,DWORD PTR [rax]
 105f72c:	or     eax,0x9c000000
 105f731:	fild   WORD PTR [rbx]
 105f733:	add    BYTE PTR [rdx],cl
 105f735:	add    BYTE PTR [rax],al
 105f737:	add    dh,dl
 105f739:	fild   WORD PTR [rbx]
 105f73b:	add    BYTE PTR [rsi],cl
 105f73d:	add    BYTE PTR [rax],al
 105f73f:	add    BYTE PTR [rbx-0x20],dl
 105f742:	add    eax,DWORD PTR [rax]
 105f744:	or     al,BYTE PTR [rax]
 105f746:	add    BYTE PTR [rax],al
 105f748:	or     eax,0x60003e1
 105f74d:	add    BYTE PTR [rax],al
 105f74f:	add    BYTE PTR [rsi],bl
 105f751:	loope  0x105f756
 105f753:	add    BYTE PTR [rip+0x29000000],al        # 0x2a05f759
 105f759:	loope  0x105f75e
 105f75b:	add    bh,bh
 105f75d:	(bad)  
 105f75e:	(bad)  
 105f75f:	push   QWORD PTR [rcx]
 105f761:	loope  0x105f766
 105f763:	add    BYTE PTR [rdx],cl
 105f765:	add    BYTE PTR [rax],al
 105f767:	add    BYTE PTR [rdx-0x1f],al
 105f76a:	add    eax,DWORD PTR [rax]
 105f76c:	sldt   WORD PTR [rax]
 105f76f:	add    BYTE PTR [rcx+riz*8+0x3],ah
 105f773:	add    BYTE PTR [rdx],cl
 105f775:	add    BYTE PTR [rax],al
 105f777:	add    BYTE PTR [rsi+0x100003e1],bl
 105f77d:	add    BYTE PTR [rax],al
 105f77f:	add    al,al
 105f781:	loope  0x105f786
 105f783:	add    BYTE PTR [rdx],cl
 105f785:	add    BYTE PTR [rax],al
 105f787:	add    cl,ch
 105f789:	loope  0x105f78e
 105f78b:	add    bh,bh
 105f78d:	(bad)  
 105f78e:	(bad)  
 105f78f:	call   QWORD PTR [rcx]
 105f791:	(bad)  
 105f792:	or     BYTE PTR [rax],al
 105f794:	(bad)  
 105f795:	xor    al,0xe
 105f797:	add    BYTE PTR [rax],dl
 105f799:	push   rdx
 105f79a:	or     al,0xf0
 105f79c:	or     ah,al
 105f79e:	or     BYTE PTR [rax+0x7],dh
 105f7a1:	(bad)  
 105f7a2:	(bad)  
 105f7a3:	push   rax
 105f7a4:	xchg   esp,eax
 105f7a5:	inc    BYTE PTR [rbx]
 105f7a7:	add    BYTE PTR [rax-0x67],bh
 105f7aa:	add    BYTE PTR [rax],al
 105f7ac:	(bad)  
 105f7ad:	(bad)  
 105f7ae:	(bad)  
 105f7af:	push   QWORD PTR [rax]
 105f7b1:	and    DWORD PTR [rip+0x0],eax        # 0x105f7b7
 105f7b7:	add    BYTE PTR [rax+0x21],dl
 105f7ba:	add    eax,0x100
 105f7bf:	add    BYTE PTR [rax+0x21],dh
 105f7c2:	add    eax,0x200
 105f7c7:	add    BYTE PTR [rax+0x3000521],dl
 105f7cd:	add    BYTE PTR [rax],al
 105f7cf:	add    BYTE PTR [rax+0x4000521],dh
 105f7d5:	add    BYTE PTR [rax],al
 105f7d7:	add    al,dl
 105f7d9:	and    DWORD PTR [rip+0x500],eax        # 0x105fcdf
 105f7df:	add    al,dh
 105f7e1:	and    DWORD PTR [rip+0x600],eax        # 0x105fde7
 105f7e7:	add    BYTE PTR [rax],al
 105f7e9:	and    al,BYTE PTR [rip+0x3e21000]        # 0x4e807ef
 105f7ef:	add    bh,bh
 105f7f1:	(bad)  
 105f7f2:	(bad)  
 105f7f3:	push   QWORD PTR [rcx]
 105f7f5:	loop   0x105f7fa
 105f7f7:	add    BYTE PTR [rip+0xffffffffaa000000],al        # 0xffffffffab05f7fd
 105f7fd:	loop   0x105f802
 105f7ff:	add    BYTE PTR [rsi],al
 105f801:	add    BYTE PTR [rax],al
 105f803:	add    ah,bl
 105f805:	loop   0x105f80a
 105f807:	add    BYTE PTR [rip+0x45000000],al        # 0x4605f80d
 105f80d:	jrcxz  0x105f812
 105f80f:	add    BYTE PTR [rax+rax*1],al
 105f812:	add    BYTE PTR [rax],al
 105f814:	push   rax
 105f815:	jrcxz  0x105f81a
 105f817:	add    BYTE PTR [rbx],al
 105f819:	add    BYTE PTR [rax],al
 105f81b:	add    BYTE PTR [rbx-0x1d],bl
 105f81e:	add    eax,DWORD PTR [rax]
 105f820:	add    al,BYTE PTR [rax]
 105f822:	add    BYTE PTR [rax],al
 105f824:	data16 jrcxz 0x105f82a
 105f827:	add    BYTE PTR [rcx],al
 105f829:	add    BYTE PTR [rax],al
 105f82b:	add    BYTE PTR [rcx-0x1d],dh
 105f82e:	add    eax,DWORD PTR [rax]
 105f830:	add    BYTE PTR [rax],al
 105f832:	add    BYTE PTR [rax],al
 105f834:	jl     0x105f819
 105f836:	add    eax,DWORD PTR [rax]
 105f838:	(bad)  
 105f839:	(bad)  
 105f83a:	(bad)  
 105f83b:	call   QWORD PTR [rcx]
 105f83d:	sbb    BYTE PTR [rax+rax*1],al
 105f840:	sbb    BYTE PTR [rax+rcx*1],dh
 105f843:	add    BYTE PTR [rdx],cl
 105f845:	push   rdx
 105f846:	(bad)  
 105f847:	jo     0x105f7dd
 105f849:	inc    BYTE PTR [rbx]
 105f84b:	add    BYTE PTR [rax-0xffff67],ah
 105f851:	(bad)  
 105f852:	(bad)  
 105f853:	call   QWORD PTR [rax+0x22]
 105f856:	add    eax,0x3e3a000
 105f85b:	add    bh,bh
 105f85d:	(bad)  
 105f85e:	(bad)  
 105f85f:	(bad)  
 105f860:	mov    edi,0x3e3
 105f865:	add    BYTE PTR [rax],al
 105f867:	add    BYTE PTR [rcx],al
 105f869:	(bad)  
 105f86a:	add    al,BYTE PTR [rax]
 105f86c:	(bad)  
 105f86d:	xor    al,BYTE PTR [rdx]
 105f86f:	push   rax
 105f870:	adc    DWORD PTR [rsp+rax*1],edx
 105f873:	add    BYTE PTR [rsp+rsi*1],dl
 105f876:	or     BYTE PTR [rax],al
 105f878:	(bad)  
 105f879:	push   rdx
 105f87a:	add    dh,BYTE PTR [rax-0x6c]
 105f87d:	inc    BYTE PTR [rbx]
 105f87f:	add    al,cl
 105f881:	cdq    
 105f882:	add    BYTE PTR [rax],al
 105f884:	(bad)  
 105f885:	(bad)  
 105f886:	(bad)  
 105f887:	call   QWORD PTR [rax]
 105f889:	and    eax,DWORD PTR [rip+0xffffffffffffff00]        # 0x105f78f
 105f88f:	jmp    QWORD PTR [rax]
 105f891:	and    eax,DWORD PTR [rip+0x3e4a000]        # 0x4ea9897
 105f897:	add    bh,bh
 105f899:	(bad)  
 105f89a:	(bad)  
 105f89b:	jmp    rdi
 105f89d:	in     al,0x3
 105f89f:	add    BYTE PTR [rax],al
 105f8a1:	add    BYTE PTR [rax],al
 105f8a3:	add    BYTE PTR [rsi],cl
 105f8a5:	in     eax,0x3
 105f8a7:	add    bh,bh
 105f8a9:	(bad)  
 105f8aa:	(bad)  
 105f8ab:	push   QWORD PTR [rip+0x10003e5]        # 0x205fc96
 105f8b1:	add    BYTE PTR [rax],al
 105f8b3:	add    BYTE PTR [rdx-0x1b],al
 105f8b6:	add    eax,DWORD PTR [rax]
 105f8b8:	(bad)  
 105f8b9:	(bad)  
 105f8ba:	(bad)  
 105f8bb:	call   QWORD PTR [rcx]
 105f8bd:	lar    eax,WORD PTR [rax]
 105f8c0:	(bad)  
 105f8c1:	push   rdx
 105f8c2:	add    dh,BYTE PTR [rax]
 105f8c4:	xchg   esp,eax
 105f8c5:	inc    BYTE PTR [rbx]
 105f8c7:	add    al,dh
 105f8c9:	cdq    
 105f8ca:	add    BYTE PTR [rax],al
 105f8cc:	(bad)  
 105f8cd:	(bad)  
 105f8ce:	(bad)  
 105f8cf:	jmp    QWORD PTR [rax]
 105f8d1:	and    al,BYTE PTR [rip+0x0]        # 0x105f8d7
 105f8d7:	add    BYTE PTR [rax],dh
 105f8d9:	and    al,BYTE PTR [rip+0x3e5b000]        # 0x4eba8df
 105f8df:	add    bh,bh
 105f8e1:	(bad)  
 105f8e2:	(bad)  
 105f8e3:	inc    DWORD PTR [rbx]
 105f8e5:	out    0x3,al
 105f8e7:	add    BYTE PTR [rax],al
 105f8e9:	add    BYTE PTR [rax],al
 105f8eb:	add    BYTE PTR [rax],bl
 105f8ed:	out    0x3,al
 105f8ef:	add    BYTE PTR [rcx],al
 105f8f1:	add    BYTE PTR [rax],al
 105f8f3:	add    BYTE PTR [rip+0x3e6],ah        # 0x105fcdf
 105f8f9:	add    BYTE PTR [rax],al
 105f8fb:	add    BYTE PTR [rcx],dh
 105f8fd:	out    0x3,al
 105f8ff:	add    bh,bh
 105f901:	(bad)  
 105f902:	(bad)  
 105f903:	call   FWORD PTR [rcx]
 105f905:	xor    al,BYTE PTR [rdi]
 105f907:	add    BYTE PTR [rax],ah
 105f909:	xor    al,0x1e
 105f90b:	add    DWORD PTR [rcx+rax*1],ecx
 105f90e:	sbb    BYTE PTR [rcx],al
 105f910:	add    eax,0x27003e0
 105f915:	(bad)  
 105f916:	add    BYTE PTR [rax],al
 105f918:	movabs al,ds:0xb300009a180003fe
 105f921:	or     BYTE PTR [rax],al
 105f923:	add    bh,bh
 105f925:	(bad)  
 105f926:	(bad)  
 105f927:	push   QWORD PTR [rax+0x1c]
 105f92a:	add    eax,0x0
 105f92f:	add    BYTE PTR [rax+0x100051c],al
 105f935:	add    BYTE PTR [rax],al
 105f937:	add    BYTE PTR [rax+0x200051c],dl
 105f93d:	add    BYTE PTR [rax],al
 105f93f:	add    BYTE PTR [rax+0x300051c],ah
 105f945:	add    BYTE PTR [rax],al
 105f947:	add    BYTE PTR [rax+0x400051c],dh
 105f94d:	add    BYTE PTR [rax],al
 105f94f:	add    BYTE PTR [rax],al
 105f951:	add    BYTE PTR [rax],al
 105f953:	add    BYTE PTR [rip+0xffffffffc0000000],al        # 0xffffffffc105f959
 105f959:	sbb    al,0x5
 105f95b:	add    BYTE PTR [rip+0xffffffffd0000000],al        # 0xffffffffd105f961
 105f961:	sbb    al,0x5
 105f963:	add    BYTE PTR [rax+rax*1],al
 105f966:	add    BYTE PTR [rax],al
 105f968:	add    BYTE PTR [rax],al
 105f96a:	add    BYTE PTR [rax],al
 105f96c:	or     BYTE PTR [rax],al
 105f96e:	add    BYTE PTR [rax],al
 105f970:	loopne 0x105f98f
 105f972:	add    eax,0x900
 105f977:	add    al,dh
 105f979:	sbb    eax,0x50005
 105f97e:	add    BYTE PTR [rax],al
 105f980:	(bad)  
 105f981:	add    BYTE PTR [rax],al
 105f983:	add    BYTE PTR [rdx],cl
 105f985:	add    BYTE PTR [rax],al
 105f987:	add    BYTE PTR [rcx],al
 105f989:	add    BYTE PTR [rax],al
 105f98b:	add    BYTE PTR [rax+0x5f9],dl
 105f991:	add    BYTE PTR [rax],al
 105f993:	add    BYTE PTR [rax+0x35],dl
 105f996:	(bad)  
 105f997:	add    BYTE PTR [rax-0x20000000],bl
 105f99d:	sbb    al,0x5
 105f99f:	add    BYTE PTR [rax+0x50000000],cl
 105f9a5:	out    0x3,al
 105f9a7:	add    bh,bh
 105f9a9:	(bad)  
 105f9aa:	(bad)  
 105f9ab:	jmp    FWORD PTR [rax+0x3e6]
 105f9b1:	add    BYTE PTR [rax],al
 105f9b3:	add    BYTE PTR [rbx+0x10003e6],bh
 105f9b9:	add    BYTE PTR [rax],al
 105f9bb:	add    dh,cl
 105f9bd:	out    0x3,al
 105f9bf:	add    BYTE PTR [rdx],al
 105f9c1:	add    BYTE PTR [rax],al
 105f9c3:	add    cl,ah
 105f9c5:	out    0x3,al
 105f9c7:	add    BYTE PTR [rbx],al
 105f9c9:	add    BYTE PTR [rax],al
 105f9cb:	add    bh,dh
 105f9cd:	out    0x3,al
 105f9cf:	add    BYTE PTR [rip+0x7c000000],al        # 0x7d05f9d5
 105f9d5:	out    0x3,eax
 105f9d7:	add    BYTE PTR [rsi],al
 105f9d9:	add    BYTE PTR [rax],al
 105f9db:	add    BYTE PTR [rbx+0x50003e7],cl
 105f9e1:	add    BYTE PTR [rax],al
 105f9e3:	add    BYTE PTR [rcx+0x70003e7],ch
 105f9e9:	add    BYTE PTR [rax],al
 105f9eb:	add    BYTE PTR [rax+0x50003e7],bh
 105f9f1:	add    BYTE PTR [rax],al
 105f9f3:	add    BYTE PTR [rdx+rbp*8],dh
 105f9f6:	add    eax,DWORD PTR [rax]
 105f9f8:	add    al,0x0
 105f9fa:	add    BYTE PTR [rax],al
 105f9fc:	cmp    ebp,edx
 105f9fe:	add    eax,DWORD PTR [rax]
 105fa00:	add    eax,DWORD PTR [rax]
 105fa02:	add    BYTE PTR [rax],al
 105fa04:	rex.WX (bad) 
 105fa06:	add    eax,DWORD PTR [rax]
 105fa08:	add    al,BYTE PTR [rax]
 105fa0a:	add    BYTE PTR [rax],al
 105fa0c:	push   rsi
 105fa0d:	(bad)  
 105fa0e:	add    eax,DWORD PTR [rax]
 105fa10:	add    DWORD PTR [rax],eax
 105fa12:	add    BYTE PTR [rax],al
 105fa14:	(bad)  
 105fa15:	(bad)  
 105fa16:	add    eax,DWORD PTR [rax]
 105fa18:	add    BYTE PTR [rax],al
 105fa1a:	add    BYTE PTR [rax],al
 105fa1c:	outs   dx,BYTE PTR ds:[rsi]
 105fa1d:	(bad)  
 105fa1e:	add    eax,DWORD PTR [rax]
 105fa20:	(bad)  
 105fa21:	(bad)  
 105fa22:	(bad)  
 105fa23:	jmp    rax
 105fa25:	sbb    al,0x5
 105fa27:	add    BYTE PTR [rax],al
 105fa29:	add    BYTE PTR [rax],al
 105fa2b:	add    al,dh
 105fa2d:	sbb    al,0x5
 105fa2f:	add    BYTE PTR [rax],cl
 105fa31:	add    BYTE PTR [rax],al
 105fa33:	add    BYTE PTR [rbx],bl
 105fa35:	sbb    eax,0x90005
 105fa3a:	add    BYTE PTR [rax],al
 105fa3c:	sub    eax,0xa00051d
 105fa41:	add    BYTE PTR [rax],al
 105fa43:	add    BYTE PTR [rbx+0x1d],cl
 105fa46:	add    eax,0x900
 105fa4b:	add    BYTE PTR [rbp+0x800051d],dh
 105fa51:	add    BYTE PTR [rax],al
 105fa53:	add    al,al
 105fa55:	sbb    eax,0x5
 105fa5a:	add    BYTE PTR [rax],al
 105fa5c:	sbb    DWORD PTR [rip+0xffffffffa20d0005],ecx        # 0xffffffffa312fa67
 105fa62:	or     DWORD PTR [rax+0x8],esi
 105fa65:	(bad)  
 105fa66:	(bad)  
 105fa67:	push   rax
 105fa68:	(bad)  
 105fa69:	xor    BYTE PTR [rax],al
 105fa6b:	add    BYTE PTR [rsi+rdi*8-0x65e7fffd],dl
 105fa72:	add    BYTE PTR [rax],al
 105fa74:	sbb    DWORD PTR [rcx],esp
 105fa76:	or     DWORD PTR [rax],eax
 105fa78:	sbb    DWORD PTR [rcx],eax
 105fa7a:	adc    al,0x0
 105fa7c:	adc    dh,al
 105fa7e:	adc    al,ah
 105fa80:	(bad)  
 105fa81:	ror    BYTE PTR [rax+rax*8],1
 105fa84:	or     dh,BYTE PTR [rax+0x9]
 105fa87:	(bad)  
 105fa88:	or     BYTE PTR [rax],dh
 105fa8a:	add    BYTE PTR [rax],al
 105fa8c:	xchg   esp,eax
 105fa8d:	inc    BYTE PTR [rbx]
 105fa8f:	add    BYTE PTR [rax-0x66],al
 105fa92:	add    BYTE PTR [rax],al
 105fa94:	(bad)  
 105fa95:	(bad)  
 105fa96:	(bad)  
 105fa97:	jmp    QWORD PTR [rax+0x1b]
 105fa9a:	add    eax,0x0
	...
 105faab:	add    BYTE PTR [rdx],al
 105faad:	add    BYTE PTR [rax],al
 105faaf:	add    BYTE PTR [rax],dh
 105fab1:	sbb    al,0x5
 105fab3:	add    BYTE PTR [rbx],al
 105fab5:	add    BYTE PTR [rax],al
 105fab7:	add    BYTE PTR [rax+0x1c],al
 105faba:	add    eax,0x300
 105fabf:	add    BYTE PTR [rax+0x1c],dl
 105fac2:	add    eax,0x100
 105fac7:	add    BYTE PTR [rcx],al
 105fac9:	add    BYTE PTR [rax],al
 105facb:	add    BYTE PTR [rip+0x1000000],al        # 0x205fad1
 105fad1:	add    BYTE PTR [rax],al
 105fad3:	add    al,bl
 105fad5:	cli    
 105fad6:	add    eax,0x0
	...
 105fae3:	add    BYTE PTR [rax+0x1b],dh
 105fae6:	add    eax,0x6800
 105faeb:	add    BYTE PTR [rax-0xfffc16],dh
 105faf1:	(bad)  
 105faf2:	(bad)  
 105faf3:	(bad)  
 105faf4:	fucomi st,st(2)
 105faf6:	add    eax,DWORD PTR [rax]
 105faf8:	add    BYTE PTR [rax],al
 105fafa:	add    BYTE PTR [rax],al
 105fafc:	(bad)  
 105fafd:	in     eax,dx
 105fafe:	add    eax,DWORD PTR [rax]
 105fb00:	add    DWORD PTR [rax],eax
 105fb02:	add    BYTE PTR [rax],al
 105fb04:	xor    eax,0x3ee
 105fb09:	add    BYTE PTR [rax],al
 105fb0b:	add    ch,bl
 105fb0d:	out    dx,al
 105fb0e:	add    eax,DWORD PTR [rax]
 105fb10:	(bad)  
 105fb11:	(bad)  
 105fb12:	(bad)  
 105fb13:	push   QWORD PTR [rax+0x1b]
 105fb16:	add    eax,0x0
 105fb1b:	add    BYTE PTR [rsi+0x1b],bh
 105fb1e:	add    eax,0x200
 105fb23:	add    BYTE PTR [rcx+0x300051b],cl
 105fb29:	add    BYTE PTR [rax],al
 105fb2b:	add    BYTE PTR [rax+0x400051b],bl
 105fb31:	add    BYTE PTR [rax],al
 105fb33:	add    BYTE PTR [rsi+0x300051b],dh
 105fb39:	add    BYTE PTR [rax],al
 105fb3b:	add    al,ch
 105fb3d:	sbb    eax,DWORD PTR [rip+0x500]        # 0x1060043
 105fb43:	add    dl,bh
 105fb45:	sbb    eax,DWORD PTR [rip+0x300]        # 0x105fe4b
 105fb4b:	add    BYTE PTR [rdx],cl
 105fb4d:	sbb    al,0x5
 105fb4f:	add    BYTE PTR [rdx],al
 105fb51:	add    BYTE PTR [rax],al
 105fb53:	add    BYTE PTR [rip+0x51c],dl        # 0x1060075
 105fb59:	add    BYTE PTR [rax],al
 105fb5b:	add    BYTE PTR [rcx],bl
 105fb5d:	or     eax,DWORD PTR [rbx]
 105fb5f:	add    BYTE PTR [rbx],cl
 105fb61:	(bad)  
 105fb62:	(bad)  
 105fb63:	push   rax
 105fb64:	(bad)  
 105fb65:	xor    BYTE PTR [rax],al
 105fb67:	add    BYTE PTR [rsi+rdi*8-0x65bffffd],dl
 105fb6e:	add    BYTE PTR [rax],al
 105fb70:	adc    DWORD PTR [rcx],esp
 105fb72:	or     al,BYTE PTR [rax]
 105fb74:	and    DWORD PTR [rbx+rdx*1],esi
 105fb77:	add    BYTE PTR [rax],dl
 105fb79:	xchg   edx,eax
 105fb7a:	or     al,0xf0
 105fb7c:	or     ah,al
 105fb7e:	or     al,dl
 105fb80:	(bad)  
 105fb81:	rol    BYTE PTR [rax+rsi*2],0x3
 105fb85:	(bad)  
 105fb86:	add    dl,BYTE PTR [rax-0x6c]
 105fb89:	inc    BYTE PTR [rbx]
 105fb8b:	add    BYTE PTR [rax-0x66],ch
 105fb8e:	add    BYTE PTR [rax],al
 105fb90:	(bad)  
 105fb91:	(bad)  
 105fb92:	(bad)  
 105fb93:	inc    DWORD PTR [rax+0x23]
 105fb96:	add    eax,0x0
 105fb9b:	add    BYTE PTR [rax+0x23],dl
 105fb9e:	add    eax,0xffffff00
 105fba3:	jmp    QWORD PTR [rax+0x23]
 105fba6:	add    eax,0x200
 105fbab:	add    BYTE PTR [rax+0x23],dh
 105fbae:	add    eax,0x3ef1000
 105fbb3:	add    bh,bh
 105fbb5:	(bad)  
 105fbb6:	(bad)  
 105fbb7:	call   rax
 105fbb9:	out    dx,eax
 105fbba:	add    eax,DWORD PTR [rax]
 105fbbc:	add    BYTE PTR [rax],al
 105fbbe:	add    BYTE PTR [rax],al
 105fbc0:	in     eax,0xef
 105fbc2:	add    eax,DWORD PTR [rax]
 105fbc4:	add    DWORD PTR [rax],eax
 105fbc6:	add    BYTE PTR [rax],al
 105fbc8:	or     esi,eax
 105fbca:	add    eax,DWORD PTR [rax]
 105fbcc:	add    BYTE PTR [rax],al
 105fbce:	add    BYTE PTR [rax],al
 105fbd0:	ins    DWORD PTR es:[rdi],dx
 105fbd1:	lock add eax,DWORD PTR [rax]
 105fbd4:	(bad)  
 105fbd5:	(bad)  
 105fbd6:	(bad)  
 105fbd7:	call   QWORD PTR [rcx+rsi*8]
 105fbda:	add    eax,DWORD PTR [rax]
 105fbdc:	add    al,BYTE PTR [rax]
 105fbde:	add    BYTE PTR [rax],al
 105fbe0:	(bad)  
 105fbe1:	icebp  
 105fbe2:	add    eax,DWORD PTR [rax]
 105fbe4:	add    eax,DWORD PTR [rax]
 105fbe6:	add    BYTE PTR [rax],al
 105fbe8:	rex.RB icebp 
 105fbea:	add    eax,DWORD PTR [rax]
 105fbec:	add    al,BYTE PTR [rax]
 105fbee:	add    BYTE PTR [rax],al
 105fbf0:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 105fbf1:	icebp  
 105fbf2:	add    eax,DWORD PTR [rax]
 105fbf4:	(bad)  
 105fbf5:	(bad)  
 105fbf6:	(bad)  
 105fbf7:	call   FWORD PTR [rcx]
 105fbf9:	cmp    BYTE PTR [rcx],cl
 105fbfb:	add    BYTE PTR [rdi],ah
 105fbfd:	xor    al,0xa0
 105fbff:	add    BYTE PTR [rdi],dl
 105fc01:	add    DWORD PTR [rax+0x6f00800],ebx
 105fc07:	loopne 0x105fc0d
 105fc09:	jo     0x105fc0e
 105fc0b:	(bad)  
 105fc0c:	add    dl,BYTE PTR [rax+0x0]
 105fc0f:	add    BYTE PTR [rax-0x6ffffc02],ah
 105fc15:	(bad)  
 105fc16:	add    BYTE PTR [rax],al
 105fc18:	mov    dl,0x4
 105fc1a:	add    BYTE PTR [rax],al
 105fc1c:	(bad)  
 105fc1d:	(bad)  
 105fc1e:	(bad)  
 105fc1f:	inc    DWORD PTR [rax+0x522]
 105fc25:	add    BYTE PTR [rax],al
 105fc27:	add    BYTE PTR [rax+0x1000522],dl
 105fc2d:	add    BYTE PTR [rax],al
 105fc2f:	add    BYTE PTR [rax+0x1000522],ah
 105fc35:	add    BYTE PTR [rax],al
 105fc37:	add    BYTE PTR [rax+0x3000522],dh
 105fc3d:	add    BYTE PTR [rax],al
 105fc3f:	add    al,al
 105fc41:	and    al,BYTE PTR [rip+0x100]        # 0x105fd47
 105fc47:	add    al,dl
 105fc49:	and    al,BYTE PTR [rip+0x500]        # 0x106014f
 105fc4f:	add    al,ah
 105fc51:	and    al,BYTE PTR [rip+0x600]        # 0x1060257
 105fc57:	add    al,dh
 105fc59:	and    al,BYTE PTR [rip+0x3f22000]        # 0x4f81c5f
 105fc5f:	add    bh,bh
 105fc61:	(bad)  
 105fc62:	(bad)  
 105fc63:	push   QWORD PTR [rcx-0xe]
 105fc66:	add    eax,DWORD PTR [rax]
 105fc68:	add    BYTE PTR [rax],al
 105fc6a:	add    BYTE PTR [rax],al
 105fc6c:	jns    0x105fc60
 105fc6e:	add    eax,DWORD PTR [rax]
 105fc70:	add    DWORD PTR [rax],eax
 105fc72:	add    BYTE PTR [rax],al
 105fc74:	mov    bl,0xf2
 105fc76:	add    eax,DWORD PTR [rax]
 105fc78:	add    al,BYTE PTR [rax]
 105fc7a:	add    BYTE PTR [rax],al
 105fc7c:	shl    dl,cl
 105fc7e:	add    eax,DWORD PTR [rax]
 105fc80:	add    DWORD PTR [rax],eax
 105fc82:	add    BYTE PTR [rax],al
 105fc84:	out    0xf2,eax
 105fc86:	add    eax,DWORD PTR [rax]
 105fc88:	add    eax,DWORD PTR [rax]
 105fc8a:	add    BYTE PTR [rax],al
 105fc8c:	div    edx
 105fc8e:	add    eax,DWORD PTR [rax]
 105fc90:	add    al,0x0
 105fc92:	add    BYTE PTR [rax],al
 105fc94:	adc    esi,ebx
 105fc96:	add    eax,DWORD PTR [rax]
 105fc98:	add    eax,DWORD PTR [rax]
 105fc9a:	add    BYTE PTR [rax],al
 105fc9c:	push   0xfffffffffffffff3
 105fc9e:	add    eax,DWORD PTR [rax]
 105fca0:	add    DWORD PTR [rax],eax
 105fca2:	add    BYTE PTR [rax],al
 105fca4:	jbe    0x105fc99
 105fca6:	add    eax,DWORD PTR [rax]
 105fca8:	add    BYTE PTR [rax],al
 105fcaa:	add    BYTE PTR [rax],al
 105fcac:	mov    esi,ebx
 105fcae:	add    eax,DWORD PTR [rax]
 105fcb0:	(bad)  
 105fcb1:	(bad)  
 105fcb2:	(bad)  
 105fcb3:	call   FWORD PTR [rbp+0x10003f3]
 105fcb9:	add    BYTE PTR [rax],al
 105fcbb:	add    BYTE PTR [rdx-0xc],cl
 105fcbe:	add    eax,DWORD PTR [rax]
 105fcc0:	add    eax,0x77000000
 105fcc5:	hlt    
 105fcc6:	add    eax,DWORD PTR [rax]
 105fcc8:	(bad)  
 105fcc9:	add    BYTE PTR [rax],al
 105fccb:	add    BYTE PTR [rip+0x70003f5],bl        # 0x80600c6
 105fcd1:	add    BYTE PTR [rax],al
 105fcd3:	add    BYTE PTR [rsi*8+0x60003],ch
 105fcda:	add    BYTE PTR [rax],al
 105fcdc:	push   rcx
 105fcdd:	cmc    
 105fcde:	add    eax,DWORD PTR [rax]
 105fce0:	add    eax,0x5d000000
 105fce5:	cmc    
 105fce6:	add    eax,DWORD PTR [rax]
 105fce8:	add    DWORD PTR [rax],eax
 105fcea:	add    BYTE PTR [rax],al
 105fcec:	imul   esi,ebp,0x3
 105fcf2:	add    BYTE PTR [rax],al
 105fcf4:	jle    0x105fceb
 105fcf6:	add    eax,DWORD PTR [rax]
 105fcf8:	(bad)  
 105fcf9:	(bad)  
 105fcfa:	(bad)  
 105fcfb:	call   FWORD PTR [rcx]
 105fcfd:	xor    eax,0x1170009
 105fd02:	sbb    al,0x1
 105fd04:	adc    al,dh
 105fd06:	(bad)  
 105fd07:	loopne 0x105fd15
 105fd09:	ror    BYTE PTR [rdx],1
 105fd0b:	ror    BYTE PTR [rax],0x70
 105fd0e:	(bad)  
 105fd0f:	(bad)  
 105fd10:	(bad)  
 105fd11:	xor    BYTE PTR [rax],al
 105fd13:	add    BYTE PTR [rax-0x47fffc02],ah
 105fd19:	(bad)  
 105fd1a:	add    BYTE PTR [rax],al
 105fd1c:	ror    DWORD PTR [rax],cl
 105fd1e:	add    BYTE PTR [rax],al
 105fd20:	(bad)  
 105fd21:	(bad)  
 105fd22:	(bad)  
 105fd23:	call   QWORD PTR [rax]
 105fd25:	(bad)  
 105fd26:	add    eax,0x0
 105fd2b:	add    BYTE PTR [rax],al
 105fd2d:	add    BYTE PTR [rax],al
 105fd2f:	add    BYTE PTR [rcx],al
 105fd31:	add    BYTE PTR [rax],al
 105fd33:	add    BYTE PTR [rax],al
 105fd35:	add    BYTE PTR [rax],al
 105fd37:	add    BYTE PTR [rcx],al
	...
 105fd45:	add    BYTE PTR [rax],al
 105fd47:	add    BYTE PTR [rax+rax*1],al
 105fd4a:	add    BYTE PTR [rax],al
 105fd4c:	push   rax
 105fd4d:	(bad)  
 105fd4e:	add    eax,0x500
 105fd53:	add    BYTE PTR [rax+0x1f],ah
 105fd56:	add    eax,0x200
 105fd5b:	add    BYTE PTR [rdx],al
 105fd5d:	add    BYTE PTR [rax],al
 105fd5f:	add    BYTE PTR [rbx],al
 105fd61:	add    BYTE PTR [rax],al
 105fd63:	add    BYTE PTR [rcx],al
 105fd65:	add    BYTE PTR [rax],al
 105fd67:	add    BYTE PTR [rax+0x10005fd],al
 105fd6d:	add    BYTE PTR [rax],al
 105fd6f:	add    BYTE PTR [rbx],al
 105fd71:	add    BYTE PTR [rax],al
 105fd73:	add    BYTE PTR [rsi],al
 105fd75:	add    BYTE PTR [rax],al
 105fd77:	add    BYTE PTR [rcx],al
 105fd79:	add    BYTE PTR [rax],al
 105fd7b:	add    BYTE PTR [rbp+rdi*8+0x5],dl
	...
 105fd8a:	add    BYTE PTR [rax],al
 105fd8c:	rex (bad) 
 105fd8e:	add    eax,0x5800
 105fd93:	add    BYTE PTR [rax],al
 105fd95:	add    BYTE PTR [rax],al
 105fd97:	add    BYTE PTR [rax+0x35],dl
 105fd9a:	(bad)  
 105fd9b:	add    al,al
 105fd9d:	add    BYTE PTR [rax],al
 105fd9f:	add    BYTE PTR [rax+0x1e],ah
 105fda2:	add    eax,0x7800
 105fda7:	add    al,al
 105fda9:	cmc    
 105fdaa:	add    eax,DWORD PTR [rax]
 105fdac:	(bad)  
 105fdad:	(bad)  
 105fdae:	(bad)  
 105fdaf:	(bad)  
 105fdb0:	(bad)  
 105fdb1:	cmc    
 105fdb2:	add    eax,DWORD PTR [rax]
 105fdb4:	add    BYTE PTR [rax],al
 105fdb6:	add    BYTE PTR [rax],al
 105fdb8:	pop    rsp
 105fdb9:	test   BYTE PTR [rbx],0x0
 105fdbc:	add    DWORD PTR [rax],eax
 105fdbe:	add    BYTE PTR [rax],al
 105fdc0:	mov    bh,dh
 105fdc2:	add    eax,DWORD PTR [rax]
 105fdc4:	add    al,BYTE PTR [rax]
 105fdc6:	add    BYTE PTR [rax],al
 105fdc8:	mov    ebx,0x10003f7
 105fdcd:	add    BYTE PTR [rax],al
 105fdcf:	add    dh,ch
 105fdd1:	clc    
 105fdd2:	add    eax,DWORD PTR [rax]
 105fdd4:	add    BYTE PTR [rax],al
 105fdd6:	add    BYTE PTR [rax],al
 105fdd8:	jo     0x105fdf8
 105fdda:	add    eax,0x400
 105fddf:	add    BYTE PTR [rbx+0x500051e],bl
 105fde5:	add    BYTE PTR [rax],al
 105fde7:	add    BYTE PTR [rdx+0x600051e],ch
 105fded:	add    BYTE PTR [rax],al
 105fdef:	add    al,cl
 105fdf1:	(bad)  
 105fdf2:	add    eax,0x500
 105fdf7:	add    BYTE PTR [rdi+rbx*1],ch
 105fdfa:	add    eax,0x400
 105fdff:	add    BYTE PTR [rdi],dh
 105fe01:	(bad)  
 105fe02:	add    eax,0x0
 105fe07:	add    BYTE PTR [rcx],al
 105fe09:	(bad)  
 105fe0a:	add    al,BYTE PTR [rax]
 105fe0c:	(bad)  
 105fe0d:	xor    al,BYTE PTR [rdx]
 105fe0f:	push   rax
 105fe10:	sbb    DWORD PTR [rdx],ecx
 105fe12:	add    al,BYTE PTR [rax]
 105fe14:	or     dh,BYTE PTR [rdx+0x6]
 105fe17:	push   rax
 105fe18:	xchg   esp,eax
 105fe19:	inc    BYTE PTR [rbx]
 105fe1b:	add    BYTE PTR [rax+0x1900009a],bh
 105fe21:	or     eax,0x820d0005
 105fe26:	or     DWORD PTR [rax+0x8],esi
 105fe29:	(bad)  
 105fe2a:	(bad)  
 105fe2b:	push   rax
 105fe2c:	(bad)  
 105fe2d:	xor    BYTE PTR [rax],al
 105fe2f:	add    BYTE PTR [rsi+rdi*8-0x6547fffd],dl
 105fe36:	add    BYTE PTR [rax],al
 105fe38:	add    DWORD PTR [rsi],eax
 105fe3a:	add    al,BYTE PTR [rax]
 105fe3c:	(bad)  
 105fe3d:	xor    al,BYTE PTR [rdx]
 105fe3f:	xor    BYTE PTR [rcx],al
 105fe41:	add    al,0x1
 105fe43:	add    BYTE PTR [rdx+riz*2],al
 105fe46:	add    BYTE PTR [rax],al
 105fe48:	add    DWORD PTR [rsi],eax
 105fe4a:	add    al,BYTE PTR [rax]
 105fe4c:	(bad)  
 105fe4d:	xor    al,BYTE PTR [rdx]
 105fe4f:	push   rax
 105fe50:	or     DWORD PTR [rdx],ecx
 105fe52:	add    al,0x0
 105fe54:	or     dh,BYTE PTR [rsi+rax*1]
 105fe57:	add    BYTE PTR [rdx],cl
 105fe59:	xor    al,BYTE PTR [rsi]
 105fe5b:	jo     0x105fdf3
 105fe5d:	add    eax,DWORD PTR [rax+rax*1]
 105fe60:	add    DWORD PTR [rax],eax
 105fe62:	add    BYTE PTR [rax],al
 105fe64:	(bad)  
 105fe65:	cli    
 105fe66:	add    eax,DWORD PTR [rax]
 105fe68:	or     al,0xfc
 105fe6a:	add    eax,DWORD PTR [rax]
 105fe6c:	test   BYTE PTR [rbx],ah
 105fe6e:	add    eax,0x3fc0c00
 105fe73:	add    BYTE PTR [rcx],al
 105fe75:	add    al,0x1
 105fe77:	add    BYTE PTR [rdx+rax*2],al
 105fe7a:	add    BYTE PTR [rax],al
 105fe7c:	add    DWORD PTR [rcx+rax*1],eax
 105fe7f:	add    BYTE PTR [rdx+rax*2],al
 105fe82:	add    BYTE PTR [rax],al
 105fe84:	add    DWORD PTR [rdx+rax*1],ecx
 105fe87:	add    BYTE PTR [rcx+rax*1],cl
 105fe8a:	adc    DWORD PTR [rax],eax
 105fe8c:	add    DWORD PTR [rcx],ebx
 105fe8e:	or     al,BYTE PTR [rax]
 105fe90:	sbb    DWORD PTR [rcx+rcx*1+0x0],esi
 105fe94:	sbb    DWORD PTR [rax+rcx*1+0x0],esp
 105fe98:	sbb    DWORD PTR [rdi+rax*1+0x0],edx
 105fe9c:	sbb    DWORD PTR [rsi+rax*1],esi
 105fe9f:	add    BYTE PTR [rcx],bl
 105fea1:	xor    dl,BYTE PTR [rip+0xc0]        # 0x105ff67
 105fea7:	add    BYTE PTR [rcx],al
 105fea9:	add    BYTE PTR [rax],al
 105feab:	add    BYTE PTR [rcx],al
 105fead:	clts   
 105feaf:	add    BYTE PTR [rdi],cl
 105feb1:	fs (bad) 
 105feb3:	add    BYTE PTR [rdi],cl
 105feb5:	xor    al,0x6
 105feb7:	add    BYTE PTR [rdi],cl
 105feb9:	xor    cl,BYTE PTR [rbx]
 105febb:	jo     0x105febe
 105febd:	(bad)  
 105febe:	add    al,BYTE PTR [rax]
 105fec0:	(bad)  
 105fec1:	xor    al,BYTE PTR [rdx]
 105fec3:	push   rax
 105fec4:	adc    DWORD PTR [rax+rcx*1],ebx
 105fec7:	add    BYTE PTR [rsp+riz*2],bl
 105feca:	or     eax,0xc341c00
 105fecf:	add    BYTE PTR [rdx+rdx*2],bl
 105fed2:	sbb    al,dl
 105fed4:	(bad)  
 105fed5:	rcl    BYTE PTR [rax+rsi*2],0x96
 105fed9:	add    eax,DWORD PTR [rax+rax*1]
 105fedc:	add    DWORD PTR [rax],eax
 105fede:	add    BYTE PTR [rax],al
 105fee0:	add    eax,0x28000400
 105fee5:	add    BYTE PTR [rax+rax*1],al
 105fee8:	test   al,0x23
 105feea:	add    eax,0x0
 105feef:	add    BYTE PTR [rcx],al
 105fef1:	(bad)  
 105fef2:	add    al,BYTE PTR [rax]
 105fef4:	(bad)  
 105fef5:	xor    al,BYTE PTR [rdx]
 105fef7:	push   rax
 105fef8:	or     DWORD PTR [rdi],edx
 105fefa:	(bad)  
 105fefb:	add    BYTE PTR [rdi],dl
 105fefd:	xor    al,0xd
 105feff:	add    BYTE PTR [rdi],dl
 105ff01:	jb     0x105ff16
 105ff03:	rcl    BYTE PTR [rcx],0x70
 105ff06:	adc    BYTE PTR [rax-0x6a],ah
 105ff09:	add    eax,DWORD PTR [rax+rax*1]
 105ff0c:	add    DWORD PTR [rax],eax
 105ff0e:	add    BYTE PTR [rax],al
 105ff10:	add    BYTE PTR [eax+eax*1],al
 105ff14:	add    BYTE PTR [rax],0x4
 105ff17:	add    dl,bl
 105ff19:	and    eax,DWORD PTR [rip+0x4008000]        # 0x5067f1f
 105ff1f:	add    BYTE PTR [rcx],al
 105ff21:	(bad)  
 105ff22:	add    al,BYTE PTR [rax]
 105ff24:	(bad)  
 105ff25:	xor    al,BYTE PTR [rdx]
 105ff27:	push   rax
 105ff28:	adc    DWORD PTR [rax],ebx
 105ff2a:	add    eax,0x14621800
 105ff2f:	rcl    BYTE PTR [rdx],0x70
 105ff32:	adc    DWORD PTR [rax+0x10],esp
 105ff35:	xor    BYTE PTR [rax],al
 105ff37:	add    BYTE PTR [rsi+0x1000403],dl
 105ff3d:	add    BYTE PTR [rax],al
 105ff3f:	add    bh,al
 105ff41:	add    BYTE PTR [rax+rax*1],al
 105ff44:	out    0x0,eax
 105ff46:	add    al,0x0
 105ff48:	and    DWORD PTR [rax*1+0x0],esp
 105ff4f:	add    BYTE PTR [rcx],al
 105ff51:	(bad)  
 105ff52:	add    al,BYTE PTR [rax]
 105ff54:	(bad)  
 105ff55:	xor    al,BYTE PTR [rdx]
 105ff57:	push   rax
 105ff58:	adc    DWORD PTR [rsi],eax
 105ff5a:	add    al,BYTE PTR [rax]
 105ff5c:	(bad)  
 105ff5d:	xor    al,BYTE PTR [rdx]
 105ff5f:	xor    BYTE PTR [rsi+0x1000403],dl
 105ff65:	add    BYTE PTR [rax],al
 105ff67:	add    BYTE PTR [rdi],ch
 105ff69:	add    DWORD PTR [rax+rax*1],eax
 105ff6c:	xchg   ebp,eax
 105ff6d:	add    DWORD PTR [rax+rax*1],eax
 105ff70:	push   rbx
 105ff71:	and    al,0x5
 105ff73:	add    BYTE PTR [rax],al
 105ff75:	add    BYTE PTR [rax],al
 105ff77:	add    BYTE PTR [rcx],al
 105ff79:	add    al,0x1
 105ff7b:	add    BYTE PTR [rdx+rax*2],al
 105ff7e:	add    BYTE PTR [rax],al
 105ff80:	add    DWORD PTR [rsi],eax
 105ff82:	add    al,BYTE PTR [rax]
 105ff84:	(bad)  
 105ff85:	xor    al,BYTE PTR [rdx]
 105ff87:	xor    BYTE PTR [rcx],al
 105ff89:	add    al,0x1
 105ff8b:	add    BYTE PTR [rdx+rax*2],al
 105ff8e:	add    BYTE PTR [rax],al
 105ff90:	add    DWORD PTR [rcx+rax*1],eax
 105ff93:	add    BYTE PTR [rdx+rdx*1],al
 105ff96:	add    BYTE PTR [rax],al
 105ff98:	add    DWORD PTR [rcx],ebx
 105ff9a:	or     al,BYTE PTR [rax]
 105ff9c:	sbb    DWORD PTR [rcx+rcx*1+0x0],esi
 105ffa0:	sbb    DWORD PTR [rax+rcx*1+0x0],esp
 105ffa4:	sbb    DWORD PTR [rdi+rax*1+0x0],edx
 105ffa8:	sbb    DWORD PTR [rsi+rax*1],esi
 105ffab:	add    BYTE PTR [rcx],bl
 105ffad:	xor    dl,BYTE PTR [rip+0x10401c0]        # 0x20a0173
 105ffb3:	add    BYTE PTR [rdx+rax*2],al
 105ffb6:	add    BYTE PTR [rax],al
 105ffb8:	add    DWORD PTR [rcx+rax*1],eax
 105ffbb:	add    BYTE PTR [rdx+rax*2],al
 105ffbe:	add    BYTE PTR [rax],al
 105ffc0:	add    DWORD PTR [rdx],ecx
 105ffc2:	add    al,0x0
 105ffc4:	or     dh,BYTE PTR [rsi+rax*1]
 105ffc7:	add    BYTE PTR [rdx],cl
 105ffc9:	xor    al,BYTE PTR [rsi]
 105ffcb:	jo     0x105ffce
 105ffcd:	or     al,BYTE PTR [rax+rax*1]
 105ffd0:	or     dh,BYTE PTR [rsi+rax*1]
 105ffd3:	add    BYTE PTR [rdx],cl
 105ffd5:	xor    al,BYTE PTR [rsi]
 105ffd7:	jo     0x105ffda
 105ffd9:	(bad)  
 105ffda:	add    al,BYTE PTR [rax]
 105ffdc:	(bad)  
 105ffdd:	xor    al,BYTE PTR [rdx]
 105ffdf:	push   rax
 105ffe0:	or     DWORD PTR [rcx+rax*1],eax
 105ffe3:	add    BYTE PTR [rdx+rax*2],al
 105ffe6:	add    BYTE PTR [rax],al
 105ffe8:	xchg   esi,eax
 105ffe9:	add    eax,DWORD PTR [rax+rax*1]
 105ffec:	add    DWORD PTR [rax],eax
 105ffee:	add    BYTE PTR [rax],al
 105fff0:	rex.RXB add eax,0x57a0004
 105fff6:	add    al,0x0
 105fff8:	and    BYTE PTR [rax*1+0x4057a00],0x0
 1060000:	add    DWORD PTR [rdx],ecx
 1060002:	add    al,0x0
 1060004:	or     dh,BYTE PTR [rax+rcx*1]
 1060007:	add    BYTE PTR [rdx],cl
 1060009:	xor    al,BYTE PTR [rsi]
 106000b:	jo     0x106000e
 106000d:	or     al,BYTE PTR [rax+rax*1]
 1060010:	or     dh,BYTE PTR [rsi+rax*1]
 1060013:	add    BYTE PTR [rdx],cl
 1060015:	xor    al,BYTE PTR [rsi]
 1060017:	jo     0x106001a
 1060019:	clts   
 106001b:	add    BYTE PTR [rdi],cl
 106001d:	or     al,BYTE PTR fs:[rax]
 1060020:	sysenter 
 1060022:	or     DWORD PTR [rax],eax
 1060024:	rsqrtps xmm1,XMMWORD PTR [rbx]
 1060027:	jo     0x106002a
 1060029:	sbb    BYTE PTR [rdx],cl
 106002b:	add    BYTE PTR [rax],bl
 106002d:	fs (bad) 
 106002f:	add    BYTE PTR [rax],bl
 1060031:	push   rsp
 1060032:	or     eax,0xc341800
 1060037:	add    BYTE PTR [rax],bl
 1060039:	jb     0x106004f
 106003b:	rcl    BYTE PTR [rdx],1
 106003d:	rcl    BYTE PTR [rax],0x70
 1060040:	add    DWORD PTR [rsp+rcx*1],ebx
 1060043:	add    BYTE PTR [rsp+riz*2],bl
 1060046:	(bad)  
 1060047:	add    BYTE PTR [rsp+rdx*2],bl
 106004a:	adc    eax,0x14341c00
 106004f:	add    BYTE PTR [rdx+rdx*8],bl
 1060052:	sbb    al,dh
 1060054:	(bad)  
 1060055:	loopne 0x106006b
 1060057:	rcl    BYTE PTR [rdx],1
 1060059:	rcl    BYTE PTR [rax],0x70
 106005c:	add    DWORD PTR [rdx],ecx
 106005e:	add    al,0x0
 1060060:	or     dh,BYTE PTR [rcx+rcx*1]
 1060063:	add    BYTE PTR [rdx],cl
 1060065:	push   rdx
 1060066:	(bad)  
 1060067:	jo     0x106006a
 1060069:	(bad)  
 106006a:	add    al,BYTE PTR [rax]
 106006c:	(bad)  
 106006d:	xor    al,BYTE PTR [rdx]
 106006f:	xor    BYTE PTR [rcx],al
 1060071:	or     al,BYTE PTR [rax+rax*1]
 1060074:	or     dh,BYTE PTR [rsi+rax*1]
 1060077:	add    BYTE PTR [rdx],cl
 1060079:	xor    al,BYTE PTR [rsi]
 106007b:	jo     0x106007e
 106007d:	(bad)  
 106007e:	add    al,BYTE PTR [rax]
 1060080:	(bad)  
 1060081:	push   rdx
 1060082:	add    dh,BYTE PTR [rax]
 1060084:	add    DWORD PTR [rax],ebx
 1060086:	or     al,BYTE PTR [rax]
 1060088:	sbb    BYTE PTR [rbx+rcx*1+0x0],ah
 106008c:	sbb    BYTE PTR [rdx+rcx*1+0x0],dl
 1060090:	sbb    BYTE PTR [rax+rcx*1],dh
 1060093:	add    BYTE PTR [rax],bl
 1060095:	xor    dl,BYTE PTR [rax+rdx*8]
 1060098:	adc    al,al
 106009a:	adc    BYTE PTR [rax+0x1],dh
 106009d:	(bad)  
 106009e:	or     al,BYTE PTR [rax]
 10600a0:	(bad)  
 10600a1:	xor    al,0xe
 10600a3:	add    BYTE PTR [rsi],bl
 10600a5:	push   rdx
 10600a6:	sbb    dh,al
 10600a8:	sbb    al,ah
 10600aa:	(bad)  
 10600ab:	rcl    BYTE PTR [rax+rax*8],1
 10600ae:	adc    dh,BYTE PTR [rax+0x11]
 10600b1:	(bad)  
 10600b2:	adc    BYTE PTR [rax+0x1],dl
 10600b5:	sbb    eax,0x741d000c
 10600ba:	or     eax,0xc641d00
 10600bf:	add    BYTE PTR [rip+0x1d000b54],bl        # 0x1e060c19
 10600c5:	xor    al,0xa
 10600c7:	add    BYTE PTR [rip+0x17e01952],bl        # 0x18e61a1f
 10600cd:	rcl    BYTE PTR [rip+0x40a01c0],1        # 0x5100293
 10600d3:	add    BYTE PTR [rdx],cl
 10600d5:	xor    al,0x7
 10600d7:	add    BYTE PTR [rdx],cl
 10600d9:	xor    al,BYTE PTR [rsi]
 10600db:	jo     0x10600de
 10600dd:	add    al,0x1
 10600df:	add    BYTE PTR [rdx+rax*2],al
 10600e2:	add    BYTE PTR [rax],al
 10600e4:	sbb    DWORD PTR [rax],esp
 10600e6:	(bad)  
 10600e7:	add    BYTE PTR [rsi],cl
 10600e9:	add    DWORD PTR [rdx],ebp
 10600eb:	add    BYTE PTR [rdi],al
 10600ed:	rol    BYTE PTR [rip+0x3600470],0x50        # 0x4660564
 10600f4:	add    dh,BYTE PTR [rax]
 10600f6:	add    BYTE PTR [rax],al
 10600f8:	rex.W add al,BYTE PTR [rax+rax*1]
 10600fc:	rex add DWORD PTR [rax],eax
 10600ff:	add    BYTE PTR [rcx],al
 1060101:	clts   
 1060103:	add    BYTE PTR [rdi],cl
 1060105:	fs or  al,0x0
 1060108:	sysenter 
 106010a:	or     eax,DWORD PTR [rax]
 106010c:	(bad)  
 106010e:	or     esi,DWORD PTR [rax+0x1]
 1060111:	(bad)  
 1060112:	add    al,BYTE PTR [rax]
 1060114:	(bad)  
 1060115:	push   rdx
 1060116:	add    dh,BYTE PTR [rax+0x1]
 1060119:	or     al,BYTE PTR [rax+rax*1]
 106011c:	or     dh,BYTE PTR [rsi+rax*1]
 106011f:	add    BYTE PTR [rdx],cl
 1060121:	xor    al,BYTE PTR [rsi]
 1060123:	jo     0x1060126
 1060125:	or     al,BYTE PTR [rax+rax*1]
 1060128:	or     dh,BYTE PTR [rax+rcx*1]
 106012b:	add    BYTE PTR [rdx],cl
 106012d:	push   rdx
 106012e:	(bad)  
 106012f:	jo     0x1060132
 1060131:	sbb    eax,0x741d000c
 1060136:	ltr    WORD PTR [rip+0x1d000e64]        # 0x1e060fa1
 106013d:	push   rsp
 106013e:	or     eax,0xc341d00
 1060143:	add    BYTE PTR [rip+0x17e01972],bl        # 0x18e61abb
 1060149:	rcl    BYTE PTR [rip+0xa1901c0],1        # 0xb1f030f
 106014f:	add    BYTE PTR [rcx],bl
 1060151:	je     0x1060160
 1060153:	add    BYTE PTR [rcx],bl
 1060155:	fs or  al,0x0
 1060158:	sbb    DWORD PTR [rbx+rcx*1+0x0],edx
 106015c:	sbb    DWORD PTR [rdx+rcx*1],esi
 106015f:	add    BYTE PTR [rcx],bl
 1060161:	jb     0x1060178
 1060163:	rol    BYTE PTR [rcx],0xf
 1060166:	(bad)  
 1060167:	add    BYTE PTR [rdi],cl
 1060169:	or     DWORD PTR fs:[rax],eax
 106016c:	sysenter 
 106016e:	or     BYTE PTR [rax],al
 1060170:	rsqrtps xmm1,XMMWORD PTR [rbx]
 1060173:	jo     0x1060176
 1060175:	sbb    al,0xc
 1060177:	add    BYTE PTR [rsp+riz*2],bl
 106017a:	(bad)  
 106017b:	add    BYTE PTR [rsp+rdx*2],bl
 106017e:	or     eax,0xc341c00
 1060183:	add    BYTE PTR [rdx+rdx*2],bl
 1060186:	sbb    al,dh
 1060188:	(bad)  
 1060189:	loopne 0x106019f
 106018b:	rcl    BYTE PTR [rdx],1
 106018d:	rcl    BYTE PTR [rax],0x70
 1060190:	add    DWORD PTR [rax],ebx
 1060192:	or     al,BYTE PTR [rax]
 1060194:	sbb    BYTE PTR [rsp+rcx*1+0x0],ah
 1060198:	sbb    BYTE PTR [rbx+rcx*1+0x0],dl
 106019c:	sbb    BYTE PTR [rdx+rcx*1],dh
 106019f:	add    BYTE PTR [rax],bl
 10601a1:	push   rdx
 10601a2:	adc    al,0xd0
 10601a4:	adc    al,al
 10601a6:	adc    BYTE PTR [rax+0x1],dh
 10601a9:	sbb    DWORD PTR [rdx],ecx
 10601ab:	add    BYTE PTR [rcx],bl
 10601ad:	je     0x10601ba
 10601af:	add    BYTE PTR [rcx],bl
 10601b1:	or     al,BYTE PTR fs:[rax]
 10601b4:	sbb    DWORD PTR [rcx+rcx*1+0x0],edx
 10601b8:	sbb    DWORD PTR [rax+rcx*1],esi
 10601bb:	add    BYTE PTR [rcx],bl
 10601bd:	push   rdx
 10601be:	adc    eax,0x81401c0
 10601c3:	add    BYTE PTR [rsp+riz*2],dl
 10601c6:	or     eax,DWORD PTR [rax]
 10601c8:	adc    al,0x54
 10601ca:	or     al,BYTE PTR [rax]
 10601cc:	adc    al,0x34
 10601ce:	or     DWORD PTR [rax],eax
 10601d0:	adc    al,0x52
 10601d2:	adc    BYTE PTR [rax+0x1],dh
 10601d5:	or     al,BYTE PTR [rax+rax*1]
 10601d8:	or     dh,BYTE PTR [rax+rcx*1]
 10601db:	add    BYTE PTR [rdx],cl
 10601dd:	push   rdx
 10601de:	(bad)  
 10601df:	jo     0x10601e2
 10601e1:	sbb    DWORD PTR [rdx],ecx
 10601e3:	add    BYTE PTR [rcx],bl
 10601e5:	je     0x10601f4
 10601e7:	add    BYTE PTR [rcx],bl
 10601e9:	fs or  al,0x0
 10601ec:	sbb    DWORD PTR [rbx+rcx*1+0x0],edx
 10601f0:	sbb    DWORD PTR [rdx+rcx*1],esi
 10601f3:	add    BYTE PTR [rcx],bl
 10601f5:	jb     0x106020c
 10601f7:	rol    BYTE PTR [rcx],0x5
 10601fa:	add    al,BYTE PTR [rax]
 10601fc:	add    eax,0x19000134
 1060201:	sub    DWORD PTR [rbx],ecx
 1060203:	add    BYTE PTR [rdi],dl
 1060205:	xor    al,0x3b
 1060207:	add    BYTE PTR [rdi],dl
 1060209:	add    DWORD PTR [rax],esi
 106020b:	add    BYTE PTR [rax],dl
 106020d:	lock (bad) 
 106020f:	loopne 0x106021d
 1060211:	ror    BYTE PTR [rdx],1
 1060213:	ror    BYTE PTR [rax],0x70
 1060216:	(bad)  
 1060217:	(bad)  
 1060218:	(bad)  
 1060219:	push   rax
 106021a:	add    BYTE PTR [rax],al
 106021c:	rex.W add al,BYTE PTR [rax+rax*1]
 1060220:	jo     0x1060223
 1060222:	add    BYTE PTR [rax],al
 1060224:	sbb    DWORD PTR [rcx],ebp
 1060226:	or     eax,DWORD PTR [rax]
 1060228:	(bad)  
 1060229:	xor    al,0x62
 106022b:	add    BYTE PTR [rdi],dl
 106022d:	add    DWORD PTR [rax+0x0],ebx
 1060230:	adc    al,dh
 1060232:	(bad)  
 1060233:	loopne 0x1060241
 1060235:	ror    BYTE PTR [rdx],1
 1060237:	ror    BYTE PTR [rax],0x70
 106023a:	(bad)  
 106023b:	(bad)  
 106023c:	(bad)  
 106023d:	push   rax
 106023e:	add    BYTE PTR [rax],al
 1060240:	rex.W add al,BYTE PTR [rax+rax*1]
 1060244:	mov    al,0x2
 1060246:	add    BYTE PTR [rax],al
 1060248:	add    DWORD PTR [rsi],eax
 106024a:	add    al,BYTE PTR [rax]
 106024c:	(bad)  
 106024d:	xor    al,BYTE PTR [rdx]
 106024f:	xor    BYTE PTR [rcx],al
 1060251:	add    al,0x1
 1060253:	add    BYTE PTR [rdx+rax*2],al
 1060256:	add    BYTE PTR [rax],al
 1060258:	add    DWORD PTR [rcx+rax*1],eax
 106025b:	add    BYTE PTR [rdx+rax*2],al
 106025e:	add    BYTE PTR [rax],al
 1060260:	add    DWORD PTR [rcx+rax*1],eax
 1060263:	add    BYTE PTR [rdx+riz*2],al
 1060266:	add    BYTE PTR [rax],al
 1060268:	add    DWORD PTR [rax],ebx
 106026a:	or     al,BYTE PTR [rax]
 106026c:	sbb    BYTE PTR [rsi+rcx*1+0x0],ah
 1060270:	sbb    BYTE PTR [rbp+rcx*1+0x0],dl
 1060274:	sbb    BYTE PTR [rsp+rcx*1],dh
 1060277:	add    BYTE PTR [rax],bl
 1060279:	jb     0x106028f
 106027b:	rcl    BYTE PTR [rdx],1
 106027d:	rcl    BYTE PTR [rax],0x70
 1060280:	add    DWORD PTR [rdx],ecx
 1060282:	add    al,0x0
 1060284:	or     dh,BYTE PTR [rsi+rax*1]
 1060287:	add    BYTE PTR [rdx],cl
 1060289:	xor    al,BYTE PTR [rsi]
 106028b:	jo     0x106028e
 106028d:	sbb    eax,0x741d000c
 1060292:	adc    DWORD PTR [rax],eax
 1060294:	sbb    eax,0x1d001064
 1060299:	push   rsp
 106029a:	ltr    WORD PTR [rip+0x1d000e34]        # 0x1e0610d5
 10602a1:	xchg   edx,eax
 10602a2:	sbb    eax,esp
 10602a4:	(bad)  
 10602a5:	rcl    BYTE PTR [rip+0xa1801c0],1        # 0xb1e046b
 10602ab:	add    BYTE PTR [rax],bl
 10602ad:	or     al,BYTE PTR fs:[rax]
 10602b0:	sbb    BYTE PTR [rcx+rcx*1+0x0],dl
 10602b4:	sbb    BYTE PTR [rax+rcx*1],dh
 10602b7:	add    BYTE PTR [rax],bl
 10602b9:	xor    dl,BYTE PTR [rax+rdx*8]
 10602bc:	adc    al,al
 10602be:	adc    BYTE PTR [rax+0x1],dh
 10602c1:	(bad)  
 10602c2:	add    al,BYTE PTR [rax]
 10602c4:	(bad)  
 10602c5:	xor    al,BYTE PTR [rdx]
 10602c7:	xor    BYTE PTR [rcx],al
 10602c9:	or     al,BYTE PTR [rax+rax*1]
 10602cc:	or     dh,BYTE PTR [rsi+rax*1]
 10602cf:	add    BYTE PTR [rdx],cl
 10602d1:	xor    al,BYTE PTR [rsi]
 10602d3:	jo     0x10602d6
 10602d5:	(bad)  
 10602d6:	add    al,BYTE PTR [rax]
 10602d8:	(bad)  
 10602d9:	xor    al,BYTE PTR [rdx]
 10602db:	xor    BYTE PTR [rcx],al
 10602dd:	sbb    DWORD PTR [rbx],ecx
 10602df:	add    BYTE PTR [rcx],bl
 10602e1:	je     0x10602ea
 10602e3:	add    BYTE PTR [rcx],bl
 10602e5:	fs (bad) 
 10602e7:	add    BYTE PTR [rcx],bl
 10602e9:	push   rsp
 10602ea:	add    eax,0x4341900
 10602ef:	add    BYTE PTR [rcx],bl
 10602f1:	loopne 0x106030a
 10602f3:	rcl    BYTE PTR [rip+0x10000c0],1        # 0x20603b9
 10602f9:	clts   
 10602fb:	add    BYTE PTR [rdi],cl
 10602fd:	je     0x1060302
 10602ff:	add    BYTE PTR [rdx],cl
 1060301:	add    al,BYTE PTR fs:[rax]
 1060304:	add    eax,0x1000134
 1060309:	clts   
 106030b:	add    BYTE PTR [rdi],cl
 106030d:	je     0x1060312
 106030f:	add    BYTE PTR [rdx],cl
 1060311:	add    al,BYTE PTR fs:[rax]
 1060314:	add    eax,0x1000134
 1060319:	or     eax,0xf00d0008
 106031e:	or     esp,eax
 1060320:	or     eax,edx
 1060322:	(bad)  
 1060323:	rol    BYTE PTR [rip+0x3600470],0x50        # 0x466079a
 106032a:	add    dh,BYTE PTR [rax]
 106032c:	add    DWORD PTR [rdx],ecx
 106032e:	add    al,0x0
 1060330:	or     dh,BYTE PTR [rdx+rax*1+0x0]
 1060334:	add    eax,0x1000134
 1060339:	or     al,BYTE PTR [rax+rax*1]
 106033c:	or     dh,BYTE PTR [rdx+rax*1+0x0]
 1060340:	add    eax,0x1000134
 1060345:	(bad)  
 1060346:	add    al,BYTE PTR [rax]
 1060348:	(bad)  
 1060349:	xor    al,BYTE PTR [rdx]
 106034b:	xor    BYTE PTR [rcx],al
 106034d:	and    BYTE PTR [rax+rax*1],cl
 1060350:	and    BYTE PTR [rbp+rcx*1+0x0],ah
 1060354:	and    BYTE PTR [rbx+rcx*1+0x0],dl
 1060358:	and    BYTE PTR [rdx+rcx*1],dh
 106035b:	add    BYTE PTR [rax],ah
 106035d:	xor    bl,BYTE PTR [rax+rsi*8]
 1060360:	sbb    ah,al
 1060362:	sbb    al,dl
 1060364:	(bad)  
 1060365:	rcl    BYTE PTR [rax+rsi*2],0x1
 1060369:	sbb    eax,0x741d000c
 106036e:	or     eax,DWORD PTR [rax]
 1060370:	sbb    eax,0x1d000a64
 1060375:	push   rsp
 1060376:	or     DWORD PTR [rax],eax
 1060378:	sbb    eax,0x1d000834
 106037d:	xor    bl,BYTE PTR [rcx]
 106037f:	loopne 0x1060398
 1060381:	rcl    BYTE PTR [rip+0x61e19c0],1        # 0x7241d47
 1060387:	add    BYTE PTR [rdi],cl
 1060389:	fs (bad) 
 106038b:	add    BYTE PTR [rdi],cl
 106038d:	xor    al,0xc
 106038f:	add    BYTE PTR [rdi],cl
 1060391:	xchg   edx,eax
 1060392:	or     esi,DWORD PTR [rax+0x48]
 1060395:	add    al,BYTE PTR [rax+rax*1]
 1060398:	add    BYTE PTR [rax],al
 106039b:	add    BYTE PTR [rcx],al
 106039d:	sbb    eax,0x741d000c
 10603a2:	or     eax,DWORD PTR [rax]
 10603a4:	sbb    eax,0x1d000a64
 10603a9:	push   rsp
 10603aa:	or     DWORD PTR [rax],eax
 10603ac:	sbb    eax,0x1d000834
 10603b1:	xor    bl,BYTE PTR [rcx]
 10603b3:	lock (bad) 
 10603b5:	loopne 0x10603cc
 10603b7:	rol    BYTE PTR [rcx],0xf
 10603ba:	(bad)  
 10603bb:	add    BYTE PTR [rdi],cl
 10603bd:	fs (bad) 
 10603bf:	add    BYTE PTR [rdi],cl
 10603c1:	xor    al,0x6
 10603c3:	add    BYTE PTR [rdi],cl
 10603c5:	xor    cl,BYTE PTR [rbx]
 10603c7:	jo     0x10603ca
 10603c9:	sbb    DWORD PTR [rdx],ecx
 10603cb:	add    BYTE PTR [rcx],bl
 10603cd:	je     0x10603d8
 10603cf:	add    BYTE PTR [rcx],bl
 10603d1:	or     BYTE PTR fs:[rax],al
 10603d4:	sbb    DWORD PTR [rdi+rax*1+0x0],edx
 10603d8:	sbb    DWORD PTR [rsi+rax*1],esi
 10603db:	add    BYTE PTR [rcx],bl
 10603dd:	xor    dl,BYTE PTR [rip+0xc1d01c0]        # 0xd2305a3
 10603e3:	add    BYTE PTR [rip+0x1d000b74],bl        # 0x1e060f5d
 10603e9:	or     al,BYTE PTR fs:[rax]
 10603ec:	sbb    eax,0x1d000954
 10603f1:	xor    al,0x8
 10603f3:	add    BYTE PTR [rip+0x17e01932],bl        # 0x18e61d2b
 10603f9:	rcl    BYTE PTR [rip+0x20601c0],1        # 0x30c05bf
 10603ff:	add    BYTE PTR [rsi],al
 1060401:	xor    al,BYTE PTR [rdx]
 1060403:	xor    BYTE PTR [rcx],al
 1060405:	sbb    BYTE PTR [rdx],cl
 1060407:	add    BYTE PTR [rax],bl
 1060409:	or     al,BYTE PTR fs:[rax]
 106040c:	sbb    BYTE PTR [rcx+rcx*1+0x0],dl
 1060410:	sbb    BYTE PTR [rax+rcx*1],dh
 1060413:	add    BYTE PTR [rax],bl
 1060415:	xor    dl,BYTE PTR [rax+rdx*8]
 1060418:	adc    al,al
 106041a:	adc    BYTE PTR [rax+0x1],dh
 106041d:	sbb    al,0xc
 106041f:	add    BYTE PTR [rsp+riz*2],bl
 1060422:	or     al,0x0
 1060424:	sbb    al,0x54
 1060426:	or     eax,DWORD PTR [rax]
 1060428:	sbb    al,0x34
 106042a:	or     al,BYTE PTR [rax]
 106042c:	sbb    al,0x32
 106042e:	sbb    al,dh
 1060430:	(bad)  
 1060431:	loopne 0x1060447
 1060433:	rcl    BYTE PTR [rdx],1
 1060435:	rcl    BYTE PTR [rax],0x70
 1060438:	add    DWORD PTR [rdx],ecx
 106043a:	add    al,0x0
 106043c:	or     dh,BYTE PTR [rsi+rax*1]
 106043f:	add    BYTE PTR [rdx],cl
 1060441:	xor    al,BYTE PTR [rsi]
 1060443:	push   rax
 1060444:	add    DWORD PTR [rsi],eax
 1060446:	add    al,BYTE PTR [rax]
 1060448:	(bad)  
 1060449:	xor    al,BYTE PTR [rdx]
 106044b:	xor    BYTE PTR [rcx],al
 106044d:	or     al,BYTE PTR [rax+rax*1]
 1060450:	or     dh,BYTE PTR [rsi+rax*1]
 1060453:	add    BYTE PTR [rdx],cl
 1060455:	xor    al,BYTE PTR [rsi]
 1060457:	push   rax
 1060458:	add    DWORD PTR [rdi],ecx
 106045a:	(bad)  
 106045b:	add    BYTE PTR [rdi],cl
 106045d:	fs (bad) 
 106045f:	add    BYTE PTR [rdi],cl
 1060461:	xor    al,0x6
 1060463:	add    BYTE PTR [rdi],cl
 1060465:	xor    cl,BYTE PTR [rbx]
 1060467:	jo     0x106046a
 1060469:	or     al,BYTE PTR [rax+rax*1]
 106046c:	or     dh,BYTE PTR [rsi+rax*1]
 106046f:	add    BYTE PTR [rdx],cl
 1060471:	xor    al,BYTE PTR [rsi]
 1060473:	jo     0x1060476
 1060475:	add    al,0x1
 1060477:	add    BYTE PTR [rdx+rax*2],al
 106047a:	add    BYTE PTR [rax],al
 106047c:	add    DWORD PTR [rax],ebx
 106047e:	or     al,BYTE PTR [rax]
 1060480:	sbb    BYTE PTR [rdx+rcx*1+0x0],ah
 1060484:	sbb    BYTE PTR [rcx+rcx*1+0x0],dl
 1060488:	sbb    BYTE PTR [rax+rcx*1],dh
 106048b:	add    BYTE PTR [rax],bl
 106048d:	xor    dl,BYTE PTR [rax+riz*8]
 1060490:	adc    al,al
 1060492:	adc    BYTE PTR [rax+0x1],dh
 1060495:	or     BYTE PTR [rdx],al
 1060497:	add    BYTE PTR [rax],cl
 1060499:	push   rdx
 106049a:	add    al,0x30
 106049c:	add    DWORD PTR [rdi],ecx
 106049e:	(bad)  
 106049f:	add    BYTE PTR [rdi],cl
 10604a1:	or     al,BYTE PTR fs:[rax]
 10604a4:	sysenter 
 10604a6:	or     DWORD PTR [rax],eax
 10604a8:	rsqrtps xmm1,XMMWORD PTR [rbx]
 10604ab:	jo     0x10604ae
 10604ad:	or     al,BYTE PTR [rax+rax*1]
 10604b0:	or     dh,BYTE PTR [rsi+rax*1]
 10604b3:	add    BYTE PTR [rdx],cl
 10604b5:	xor    al,BYTE PTR [rsi]
 10604b7:	jo     0x10604ba
 10604b9:	(bad)  
 10604ba:	add    al,BYTE PTR [rax]
 10604bc:	(bad)  
 10604bd:	xor    al,BYTE PTR [rdx]
 10604bf:	xor    BYTE PTR [rcx],al
 10604c1:	(bad)  
 10604c2:	add    al,BYTE PTR [rax]
 10604c4:	(bad)  
 10604c5:	xor    al,BYTE PTR [rdx]
 10604c7:	xor    BYTE PTR [rcx],al
 10604c9:	(bad)  
 10604ca:	or     DWORD PTR [rax],eax
 10604cc:	(bad)  
 10604cd:	(bad)  
 10604cf:	lock adc al,ah
 10604d2:	(bad)  
 10604d3:	ror    BYTE PTR [rax+rax*8],1
 10604d6:	or     dh,BYTE PTR [rax+0x9]
 10604d9:	(bad)  
 10604da:	or     BYTE PTR [rax+0x7],dl
 10604dd:	xor    BYTE PTR [rax],al
 10604df:	add    BYTE PTR [rcx],al
 10604e1:	(bad)  
 10604e2:	add    al,BYTE PTR [rax]
 10604e4:	(bad)  
 10604e5:	xor    al,BYTE PTR [rdx]
 10604e7:	xor    BYTE PTR [rcx],al
 10604e9:	clts   
 10604eb:	add    BYTE PTR [rdi],cl
 10604ed:	or     DWORD PTR fs:[rax],eax
 10604f0:	sysenter 
 10604f2:	or     BYTE PTR [rax],al
 10604f4:	rsqrtps xmm1,XMMWORD PTR [rbx]
 10604f7:	jo     0x10604fa
 10604f9:	or     al,BYTE PTR [rax+rax*1]
 10604fc:	or     dh,BYTE PTR [rax+rcx*1]
 10604ff:	add    BYTE PTR [rdx],cl
 1060501:	push   rdx
 1060502:	(bad)  
 1060503:	jo     0x106051e
 1060505:	or     al,BYTE PTR es:[rax]
 1060508:	adc    al,0x1
 106050a:	(bad)  
 106050b:	add    BYTE PTR [rip+0x9e00bf0],cl        # 0xae61101
 1060511:	rol    BYTE PTR [rdi],1
 1060513:	rol    BYTE PTR [rip+0x3600470],0x50        # 0x466098a
 106051a:	add    dh,BYTE PTR [rax]
 106051c:	rex.W add al,BYTE PTR [rax+rax*1]
 1060520:	loopne 0x1060522
 1060522:	add    BYTE PTR [rax],al
 1060524:	add    DWORD PTR [rsi],eax
 1060526:	add    al,BYTE PTR [rax]
 1060528:	(bad)  
 1060529:	xor    al,BYTE PTR [rdx]
 106052b:	xor    BYTE PTR [rcx],bl
 106052d:	sbb    DWORD PTR [rax+rax*1],eax
 1060530:	or     dh,BYTE PTR [rdi+rax*1]
 1060533:	add    BYTE PTR [rdx],cl
 1060535:	adc    al,BYTE PTR [rsi]
 1060537:	jo     0x1060581
 1060539:	add    al,BYTE PTR [rax+rax*1]
 106053c:	or     BYTE PTR [rax],al
 106053e:	add    BYTE PTR [rax],al
 1060540:	add    DWORD PTR [rdi],ecx
 1060542:	(bad)  
 1060543:	add    BYTE PTR [rdi],cl
 1060545:	fs (bad) 
 1060547:	add    BYTE PTR [rdi],cl
 1060549:	xor    al,0x6
 106054b:	add    BYTE PTR [rdi],cl
 106054d:	xor    cl,BYTE PTR [rbx]
 106054f:	jo     0x1060552
 1060551:	(bad)  
 1060552:	add    al,BYTE PTR [rax]
 1060554:	(bad)  
 1060555:	xor    al,BYTE PTR [rdx]
 1060557:	xor    BYTE PTR [rcx],al
 1060559:	(bad)  
 106055a:	add    al,BYTE PTR [rax]
 106055c:	(bad)  
 106055d:	xor    al,BYTE PTR [rdx]
 106055f:	xor    BYTE PTR [rcx],al
 1060561:	clts   
 1060563:	add    BYTE PTR [rdi],cl
 1060565:	fs (bad) 
 1060567:	add    BYTE PTR [rdi],cl
 1060569:	xor    al,0x6
 106056b:	add    BYTE PTR [rdi],cl
 106056d:	xor    cl,BYTE PTR [rbx]
 106056f:	jo     0x1060572
 1060571:	sbb    DWORD PTR [rdx],ecx
 1060573:	add    BYTE PTR [rcx],bl
 1060575:	je     0x1060580
 1060577:	add    BYTE PTR [rcx],bl
 1060579:	or     BYTE PTR fs:[rax],al
 106057c:	sbb    DWORD PTR [rdi+rax*1+0x0],edx
 1060580:	sbb    DWORD PTR [rsi+rax*1],esi
 1060583:	add    BYTE PTR [rcx],bl
 1060585:	xor    dl,BYTE PTR [rip+0xa2619c0]        # 0xb2c1f4b
 106058b:	add    BYTE PTR [rcx+rax*1],dl
 106058e:	cdq    
 106058f:	add    DWORD PTR [rip+0x9e00bf0],ecx        # 0xae61185
 1060595:	rol    BYTE PTR [rdi],1
 1060597:	rol    BYTE PTR [rip+0x3600470],0x50        # 0x4660a0e
 106059e:	add    dh,BYTE PTR [rax]
 10605a0:	rex.W add al,BYTE PTR [rax+rax*1]
 10605a4:	mov    al,0xc
 10605a6:	add    BYTE PTR [rax],al
 10605a8:	add    DWORD PTR [rdi],ecx
 10605aa:	(bad)  
 10605ab:	add    BYTE PTR [rdi],cl
 10605ad:	je     0x10605b2
 10605af:	add    BYTE PTR [rdx],cl
 10605b1:	add    al,BYTE PTR fs:[rax]
 10605b4:	add    eax,0x1000134
 10605b9:	or     al,BYTE PTR [rax+rax*1]
 10605bc:	or     dh,BYTE PTR [rdx+rax*1+0x0]
 10605c0:	add    eax,0x19000134
 10605c5:	sub    DWORD PTR [rbx],ecx
 10605c7:	add    BYTE PTR [rdi],dl
 10605c9:	xor    al,0x18
 10605cb:	add    DWORD PTR [rdi],edx
 10605cd:	add    DWORD PTR [rsi],ecx
 10605cf:	add    DWORD PTR [rax],edx
 10605d1:	lock (bad) 
 10605d3:	loopne 0x10605e1
 10605d5:	ror    BYTE PTR [rdx],1
 10605d7:	ror    BYTE PTR [rax],0x70
 10605da:	(bad)  
 10605db:	(bad)  
 10605dc:	(bad)  
 10605dd:	push   rax
 10605de:	add    BYTE PTR [rax],al
 10605e0:	rex.W add al,BYTE PTR [rax+rax*1]
 10605e4:	(bad)  
 10605e5:	or     BYTE PTR [rax],al
 10605e7:	add    BYTE PTR [rcx],al
 10605e9:	adc    al,0x8
 10605eb:	add    BYTE PTR [rsp+riz*2],dl
 10605ee:	or     BYTE PTR [rax],al
 10605f0:	adc    al,0x54
 10605f2:	(bad)  
 10605f3:	add    BYTE PTR [rsp+rsi*1],dl
 10605f6:	(bad)  
 10605f7:	add    BYTE PTR [rdx+rsi*1],dl
 10605fa:	adc    BYTE PTR [rax+0x1],dh
 10605fd:	(bad)  
 10605fe:	add    al,BYTE PTR [rax]
 1060600:	(bad)  
 1060601:	xor    al,BYTE PTR [rdx]
 1060603:	xor    BYTE PTR [rcx],al
 1060605:	clts   
 1060607:	add    BYTE PTR [rdi],cl
 1060609:	je     0x106060e
 106060b:	add    BYTE PTR [rdx],cl
 106060d:	add    al,BYTE PTR fs:[rax]
 1060610:	add    eax,0x1000134
 1060615:	adc    al,0x8
 1060617:	add    BYTE PTR [rsp+riz*2],dl
 106061a:	or     BYTE PTR [rax],al
 106061c:	adc    al,0x54
 106061e:	(bad)  
 106061f:	add    BYTE PTR [rsp+rsi*1],dl
 1060622:	(bad)  
 1060623:	add    BYTE PTR [rdx+rsi*1],dl
 1060626:	adc    BYTE PTR [rax+0x1],dh
 1060629:	add    eax,0x34050002
 106062e:	add    DWORD PTR [rax],eax
 1060630:	add    DWORD PTR [rip+0x7425000c],esp        # 0x752b0642
 1060636:	or     eax,DWORD PTR [rax]
 1060638:	and    eax,0x25000a64
 106063d:	push   rsp
 106063e:	or     DWORD PTR [rax],eax
 1060640:	and    eax,0x25000834
 1060645:	xor    ah,BYTE PTR [rcx]
 1060647:	lock (bad) 
 1060649:	rcr    BYTE PTR [rip+0xc2501c0],1        # 0xd2b080f
 106064f:	add    BYTE PTR [rip+0x25000b74],ah        # 0x260611c9
 1060655:	or     al,BYTE PTR fs:[rax]
 1060658:	and    eax,0x25000954
 106065d:	xor    al,0x8
 106065f:	add    BYTE PTR [rip+0x1fe02132],ah        # 0x20e62797
 1060665:	rcr    BYTE PTR [rip+0x40a01c0],1        # 0x510082b
 106066b:	add    BYTE PTR [rdx],cl
 106066d:	je     0x1060671
 106066f:	add    BYTE PTR [rip+0x1000134],al        # 0x20607a9
 1060675:	sbb    al,0xb
 1060677:	add    BYTE PTR [rsp+riz*2],bl
 106067a:	or     DWORD PTR [rax],eax
 106067c:	sbb    al,0x54
 106067e:	(bad)  
 106067f:	add    BYTE PTR [rsp+rsi*1],bl
 1060682:	(bad)  
 1060683:	add    BYTE PTR [rax+rsi*8],bl
 1060686:	sbb    ah,al
 1060688:	sbb    al,dl
 106068a:	(bad)  
 106068b:	rcl    BYTE PTR [rax+rsi*2],0x0
 106068f:	add    BYTE PTR [rcx],al
 1060691:	adc    BYTE PTR [rcx],cl
 1060693:	add    BYTE PTR [rax],dl
 1060695:	xor    al,0x9
 1060697:	add    BYTE PTR [rax],dl
 1060699:	lock (bad) 
 106069b:	loopne 0x10606a9
 106069d:	ror    BYTE PTR [rdx],1
 106069f:	ror    BYTE PTR [rax],0x70
 10606a2:	(bad)  
 10606a3:	(bad)  
 10606a4:	(bad)  
 10606a5:	push   rax
 10606a6:	add    BYTE PTR [rax],al
 10606a8:	sbb    DWORD PTR [rip+0x52060002],edx        # 0x530c06b0
 10606ae:	add    dh,BYTE PTR [rax]
 10606b0:	rex.W add al,BYTE PTR [rax+rax*1]
 10606b4:	sub    BYTE PTR [rax],al
 10606b6:	add    BYTE PTR [rax],al
 10606b8:	add    DWORD PTR [rip+0x34050002],eax        # 0x350b06c0
 10606be:	add    DWORD PTR [rax],eax
 10606c0:	add    DWORD PTR [rdx],ecx
 10606c2:	add    al,0x0
 10606c4:	or     dh,BYTE PTR [rsi+rax*1]
 10606c7:	add    BYTE PTR [rdx],cl
 10606c9:	xor    al,BYTE PTR [rsi]
 10606cb:	jo     0x10606ce
 10606cd:	clts   
 10606cf:	add    BYTE PTR [rdi],cl
 10606d1:	fs (bad) 
 10606d3:	add    BYTE PTR [rdi],cl
 10606d5:	xor    al,0x6
 10606d7:	add    BYTE PTR [rdi],cl
 10606d9:	xor    cl,BYTE PTR [rbx]
 10606db:	jo     0x10606de
 10606dd:	sbb    al,0xc
 10606df:	add    BYTE PTR [rsp+riz*2],bl
 10606e2:	or     al,0x0
 10606e4:	sbb    al,0x54
 10606e6:	or     eax,DWORD PTR [rax]
 10606e8:	sbb    al,0x34
 10606ea:	or     al,BYTE PTR [rax]
 10606ec:	sbb    al,0x32
 10606ee:	sbb    al,dh
 10606f0:	(bad)  
 10606f1:	loopne 0x1060707
 10606f3:	rcl    BYTE PTR [rdx],1
 10606f5:	rcl    BYTE PTR [rax],0x70
 10606f8:	add    DWORD PTR [rax+rcx*1],edx
 10606fb:	add    BYTE PTR [rsp+riz*2],dl
 10606fe:	or     BYTE PTR [rax],al
 1060700:	adc    al,0x54
 1060702:	(bad)  
 1060703:	add    BYTE PTR [rsp+rsi*1],dl
 1060706:	(bad)  
 1060707:	add    BYTE PTR [rdx+rsi*1],dl
 106070a:	adc    BYTE PTR [rax+0x1],dh
 106070d:	or     DWORD PTR [rdx],eax
 106070f:	add    BYTE PTR [rcx],cl
 1060711:	xor    al,BYTE PTR [rdx]
 1060713:	push   rax
 1060714:	add    DWORD PTR [rdi],ecx
 1060716:	(bad)  
 1060717:	add    BYTE PTR [rdi],cl
 1060719:	xor    al,0x8
 106071b:	add    BYTE PTR [rdi],cl
 106071d:	xor    cl,BYTE PTR [rbx]
 106071f:	jo     0x106072b
 1060721:	(bad)  
 1060722:	(bad)  
 1060723:	push   rax
 1060724:	sbb    DWORD PTR [rdx],esi
 1060726:	or     DWORD PTR [rip+0x126424],esi        # 0x1186b50
 106072c:	and    BYTE PTR [rcx+rdx*1],dh
 106072f:	add    BYTE PTR [rbx+rsi*1],bl
 1060732:	adc    dh,BYTE PTR [rdx+0x7007c009]
 1060738:	(bad)  
 1060739:	push   rax
 106073a:	add    BYTE PTR [rax],al
 106073c:	cld    
 106073d:	add    al,BYTE PTR [rax+rax*1]
 1060740:	add    DWORD PTR [rax],eax
 1060742:	add    BYTE PTR [rax],al
 1060744:	pop    rsi
 1060745:	xchg   ebx,eax
 1060746:	add    al,0x0
 1060748:	test   eax,0x1000493
 106074d:	add    BYTE PTR [rax],al
 106074f:	add    BYTE PTR [rcx+0x51000493],ch
 1060755:	add    BYTE PTR [rax],al
 1060757:	add    BYTE PTR [rcx],bl
 1060759:	or     al,BYTE PTR [rdx]
 106075b:	add    BYTE PTR [rdx],cl
 106075d:	jb     0x1060765
 106075f:	push   rax
 1060760:	xchg   esp,eax
 1060761:	inc    BYTE PTR [rbx]
 1060763:	add    al,ah
 1060765:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1060766:	add    BYTE PTR [rax],al
 1060768:	sbb    DWORD PTR [rdx+rcx*1],esp
 106076b:	add    BYTE PTR [rsp+rsi*2],ah
 106076e:	adc    BYTE PTR [rax],al
 1060770:	and    BYTE PTR [rdi+rcx*1+0x0],ah
 1060774:	sbb    al,0x34
 1060776:	(bad)  
 1060777:	add    BYTE PTR [rdi],cl
 1060779:	xchg   edx,eax
 106077a:	or     edx,eax
 106077c:	or     eax,eax
 106077e:	add    al,0x50
 1060780:	xchg   esp,eax
 1060781:	inc    BYTE PTR [rbx]
 1060783:	add    al,ah
 1060785:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
	...
 106078e:	add    BYTE PTR [rax],al
 1060790:	add    DWORD PTR [rax],eax
 1060792:	add    BYTE PTR [rax],al
 1060794:	add    DWORD PTR [rax],eax
 1060796:	add    BYTE PTR [rax],al
 1060798:	pushf  
 1060799:	(bad)  
 106079a:	(bad)  
 106079b:	add    BYTE PTR [rax+0x0],al
	...
 10607a6:	add    BYTE PTR [rax],al
 10607a8:	mov    al,0x24
 10607aa:	add    eax,0x5800
 10607af:	add    bh,bh
 10607b1:	(bad)  
 10607b2:	(bad)  
 10607b3:	inc    DWORD PTR [rax]
 10607b5:	add    BYTE PTR [rax],al
 10607b7:	add    bh,bh
 10607b9:	(bad)  
 10607ba:	(bad)  
 10607bb:	inc    DWORD PTR [rax]
 10607bd:	add    BYTE PTR [rax],al
 10607bf:	add    BYTE PTR [rax-0x6c],dh
 10607c2:	add    al,0x0
 10607c4:	(bad)  
 10607c5:	(bad)  
 10607c6:	(bad)  
 10607c7:	push   rdi
 10607c9:	xchg   esp,eax
 10607ca:	add    al,0x0
 10607cc:	add    BYTE PTR [rax],al
 10607ce:	add    BYTE PTR [rax],al
 10607d0:	add    dl,BYTE PTR [rbp-0xfffc]
 10607d6:	(bad)  
 10607d7:	push   QWORD PTR [rax+0x524]
 10607dd:	add    BYTE PTR [rax],al
 10607df:	add    BYTE PTR [rcx],al
 10607e1:	or     DWORD PTR [rdx],eax
 10607e3:	add    BYTE PTR [rcx],cl
 10607e5:	xor    al,BYTE PTR [rdx]
 10607e7:	push   rax
 10607e8:	add    DWORD PTR [rcx],ecx
 10607ea:	add    al,BYTE PTR [rax]
 10607ec:	or     DWORD PTR [rdx],esi
 10607ee:	add    dl,BYTE PTR [rax+0x1]
 10607f1:	or     eax,0x340d0004
 10607f6:	(bad)  
 10607f7:	add    BYTE PTR [rip+0x1500632],cl        # 0x2560e2f
 10607fd:	or     DWORD PTR [rdx],eax
 10607ff:	add    BYTE PTR [rcx],cl
 1060801:	jb     0x1060805
 1060803:	push   rax
 1060804:	add    DWORD PTR [rip+0x340d0004],ecx        # 0x3513080e
 106080a:	(bad)  
 106080b:	add    BYTE PTR [rip+0x1500632],cl        # 0x2560e43
 1060811:	adc    al,BYTE PTR [rsi]
 1060813:	add    BYTE PTR [rdx],dl
 1060815:	je     0x106081e
 1060817:	add    BYTE PTR [rdx],dl
 1060819:	xor    al,0x6
 106081b:	add    BYTE PTR [rdx],dl
 106081d:	xor    cl,BYTE PTR [rbx]
 106081f:	push   rax
	...
 106082c:	or     BYTE PTR [rsi],al
	...
 106083f:	add    BYTE PTR [rcx],al
 1060841:	add    BYTE PTR [rax],al
 1060843:	add    BYTE PTR [rax+0x8],dl
 1060846:	(bad)  
	...
 106084f:	add    BYTE PTR [rcx],al
 1060851:	add    BYTE PTR [rax],al
 1060853:	add    BYTE PTR [rax],ch
 1060855:	xor    DWORD PTR [rsi],eax
 1060857:	add    BYTE PTR [rax],al
 1060859:	add    BYTE PTR [rax],al
 106085b:	add    bh,bh
 106085d:	(bad)  
 106085e:	(bad)  
 106085f:	inc    DWORD PTR [rax]
 1060861:	add    BYTE PTR [rax],al
 1060863:	add    BYTE PTR [rax+rax*1],al
	...
 106087a:	add    BYTE PTR [rax],al
 106087c:	(bad)  
 106087d:	cli    
 106087e:	add    eax,DWORD PTR [rax]
 1060880:	add    BYTE PTR [rax],al
 1060882:	add    BYTE PTR [rax],al
 1060884:	cwde   
 1060885:	or     BYTE PTR [rsi],al
	...
 1060897:	add    BYTE PTR [rdx],al
 1060899:	add    BYTE PTR [rax],al
 106089b:	add    BYTE PTR [rax-0x27fff9f8],dh
 10608a1:	or     BYTE PTR [rsi],al
	...
 10608b3:	add    BYTE PTR [rax+0x635],al
 10608b9:	add    BYTE PTR [rax],al
 10608bb:	add    bh,bh
 10608bd:	(bad)  
 10608be:	(bad)  
 10608bf:	inc    DWORD PTR [rax]
 10608c1:	add    BYTE PTR [rax],al
 10608c3:	add    BYTE PTR [rax],cl
 10608c5:	add    BYTE PTR [rax],al
 10608c7:	add    BYTE PTR [rsi],bh
 10608c9:	cli    
 10608ca:	add    eax,DWORD PTR [rax]
	...
 10608dc:	xor    BYTE PTR [rdi],0x6
 10608df:	add    BYTE PTR [rax],al
 10608e1:	add    BYTE PTR [rax],al
 10608e3:	add    bh,bh
 10608e5:	(bad)  
 10608e6:	(bad)  
 10608e7:	inc    DWORD PTR [rax]
 10608e9:	add    BYTE PTR [rax],al
 10608eb:	add    BYTE PTR [rax],cl
 10608ed:	add    BYTE PTR [rax],al
 10608ef:	add    BYTE PTR [rdx-0x6],cl
 10608f2:	add    eax,DWORD PTR [rax]
	...
 1060904:	nop
 1060905:	xchg   ebp,eax
 1060906:	add    al,0x0
 1060908:	add    BYTE PTR [rax],al
 106090a:	add    BYTE PTR [rax],al
 106090c:	and    BYTE PTR [rcx],cl
 106090e:	(bad)  
	...
 106091f:	add    BYTE PTR [rcx],al
 1060921:	add    BYTE PTR [rax],al
 1060923:	add    BYTE PTR [rax],dh
 1060925:	or     DWORD PTR [rsi],eax
	...
 1060933:	add    BYTE PTR [rax+0x638],dh
 1060939:	add    BYTE PTR [rax],al
 106093b:	add    bh,bh
 106093d:	(bad)  
 106093e:	(bad)  
 106093f:	inc    DWORD PTR [rax]
 1060941:	add    BYTE PTR [rax],al
 1060943:	add    BYTE PTR [rax],ah
 1060945:	add    BYTE PTR [rax],al
 1060947:	add    BYTE PTR [rax],ah
 1060949:	xchg   esi,eax
 106094a:	add    al,0x0
	...
 1060958:	add    BYTE PTR [rbx],cl
 106095a:	(bad)  
	...
 1060963:	add    ah,bh
 1060965:	sbb    DWORD PTR [rsi],eax
 1060967:	add    BYTE PTR [rax],al
 1060969:	adc    BYTE PTR [rax],al
 106096b:	add    al,cl
 106096d:	or     al,0x6
	...
 1060977:	add    BYTE PTR [rsi+0x22],dh
 106097a:	(bad)  
 106097b:	add    al,cl
 106097d:	adc    DWORD PTR [rax],eax
 106097f:	add    BYTE PTR [rax],cl
 1060981:	adc    al,0x6
	...
 106098b:	add    BYTE PTR [rdx+riz*1+0x19080006],al
 1060992:	add    BYTE PTR [rax],al
 1060994:	mov    al,0x10
 1060996:	(bad)  
	...
 106099f:	add    BYTE PTR [rdx-0x4ffff9db],ch
 10609a5:	adc    eax,0x13d00000
 10609aa:	(bad)  
	...
 10609b3:	add    BYTE PTR [rsi+0x26],ch
 10609b6:	(bad)  
 10609b7:	add    al,dl
 10609b9:	sbb    BYTE PTR [rax],al
 10609bb:	add    BYTE PTR [rax+0xc],ah
 10609be:	(bad)  
	...
 10609c7:	add    BYTE PTR [rdx],ch
 10609c9:	(bad)  
 10609ca:	(bad)  
 10609cb:	add    BYTE PTR [rax+0x11],ah
 10609ce:	add    BYTE PTR [rax],al
 10609d0:	jo     0x10609e5
 10609d2:	(bad)  
	...
 10609db:	add    BYTE PTR [rsi+0x27],cl
 10609de:	(bad)  
 10609df:	add    BYTE PTR [rax+0x18],dh
 10609e2:	add    BYTE PTR [rax],al
 10609e4:	movabs al,ds:0x610
 10609ed:	add    BYTE PTR [rax],al
 10609ef:	add    BYTE PTR [rdi+riz*1+0x6],dh
 10609f3:	add    BYTE PTR [rax+0x60000015],ah
 10609f9:	adc    eax,DWORD PTR [rsi]
	...
 1060a03:	add    BYTE PTR [rdi+riz*1+0x18600006],cl
 1060a0a:	add    BYTE PTR [rax],al
 1060a0c:	mov    al,0x13
 1060a0e:	(bad)  
	...
 1060a17:	add    dh,dl
 1060a19:	(bad)  
 1060a1a:	(bad)  
 1060a1b:	add    BYTE PTR [rax-0x7fffffe8],dh
 1060a21:	adc    eax,DWORD PTR [rsi]
	...
 1060a2b:	add    BYTE PTR [rsi],bl
 1060a2d:	sub    BYTE PTR [rsi],al
 1060a2f:	add    BYTE PTR [rax+0x40000018],al
 1060a35:	(bad)  
 1060a36:	(bad)  
	...
 1060a3f:	add    BYTE PTR [rdx+0x28],ch
 1060a42:	(bad)  
 1060a43:	add    BYTE PTR [rax+0x1b],al
 1060a46:	add    BYTE PTR [rax],al
 1060a48:	cmp    BYTE PTR [rbx],dl
 1060a4a:	(bad)  
	...
 1060a53:	add    BYTE PTR [rax+rbp*1+0x6],dh
 1060a57:	add    BYTE PTR [rax],bh
 1060a59:	sbb    BYTE PTR [rax],al
 1060a5b:	add    BYTE PTR [rax+0x16],ch
 1060a5e:	(bad)  
	...
 1060a67:	add    BYTE PTR [rdx],dl
 1060a69:	sub    DWORD PTR [rsi],eax
 1060a6b:	add    BYTE PTR [rax+0x1b],ch
 1060a6e:	add    BYTE PTR [rax],al
 1060a70:	fcom   DWORD PTR [rdx]
 1060a72:	(bad)  
	...
 1060a7b:	add    BYTE PTR [rsi],bh
 1060a7d:	sub    DWORD PTR [rsi],eax
 1060a7f:	add    al,bl
 1060a81:	(bad)  
 1060a82:	add    BYTE PTR [rax],al
 1060a84:	mov    al,0xc
 1060a86:	(bad)  
	...
 1060a8f:	add    BYTE PTR [rsi+0x29],dh
 1060a92:	(bad)  
 1060a93:	add    BYTE PTR [rax-0xfffffef],dh
 1060a99:	adc    eax,DWORD PTR [rsi]
	...
 1060aa3:	add    BYTE PTR [rax-0xffff9d7],ah
 1060aa9:	sbb    BYTE PTR [rax],al
 1060aab:	add    BYTE PTR [rax+0x613],ah
 1060ab1:	add    BYTE PTR [rax],al
 1060ab3:	add    BYTE PTR [rax],al
 1060ab5:	add    BYTE PTR [rax],al
 1060ab7:	add    BYTE PTR [rsi-0x5ffff9d7],bh
 1060abd:	sbb    BYTE PTR [rax],al
 1060abf:	add    al,dh
 1060ac1:	adc    al,BYTE PTR [rsi]
	...
 1060acb:	add    dl,cl
 1060acd:	sub    DWORD PTR [rsi],eax
 1060acf:	add    al,dh
 1060ad1:	(bad)  
 1060ad2:	add    BYTE PTR [rax],al
 1060ad4:	add    BYTE PTR [rsi],dl
 1060ad6:	(bad)  
	...
 1060adf:	add    dh,dl
 1060ae1:	sub    DWORD PTR [rsi],eax
 1060ae3:	add    BYTE PTR [rax],al
 1060ae5:	sbb    eax,DWORD PTR [rax]
	...
 1060aff:	add    BYTE PTR [rax+0x616],dh
 1060b05:	add    BYTE PTR [rax],al
 1060b07:	add    al,al
 1060b09:	(bad)  
 1060b0a:	(bad)  
 1060b0b:	add    BYTE PTR [rax],al
 1060b0d:	add    BYTE PTR [rax],al
 1060b0f:	add    al,bl
 1060b11:	(bad)  
 1060b12:	(bad)  
 1060b13:	add    BYTE PTR [rax],al
 1060b15:	add    BYTE PTR [rax],al
 1060b17:	add    al,dh
 1060b19:	(bad)  
 1060b1a:	(bad)  
 1060b1b:	add    BYTE PTR [rax],al
 1060b1d:	add    BYTE PTR [rax],al
 1060b1f:	add    BYTE PTR [rax],al
 1060b21:	(bad)  
 1060b22:	(bad)  
 1060b23:	add    BYTE PTR [rax],al
 1060b25:	add    BYTE PTR [rax],al
 1060b27:	add    BYTE PTR [rsi],cl
 1060b29:	(bad)  
 1060b2a:	(bad)  
 1060b2b:	add    BYTE PTR [rax],al
 1060b2d:	add    BYTE PTR [rax],al
 1060b2f:	add    BYTE PTR [rsi],bl
 1060b31:	(bad)  
 1060b32:	(bad)  
 1060b33:	add    BYTE PTR [rax],al
 1060b35:	add    BYTE PTR [rax],al
 1060b37:	add    BYTE PTR [rax],dh
 1060b39:	(bad)  
 1060b3a:	(bad)  
 1060b3b:	add    BYTE PTR [rax],al
 1060b3d:	add    BYTE PTR [rax],al
 1060b3f:	add    BYTE PTR [rax+0x17],al
 1060b42:	(bad)  
 1060b43:	add    BYTE PTR [rax],al
 1060b45:	add    BYTE PTR [rax],al
 1060b47:	add    BYTE PTR [rdi+rdx*1+0x6],dl
 1060b4b:	add    BYTE PTR [rax],al
 1060b4d:	add    BYTE PTR [rax],al
 1060b4f:	add    BYTE PTR [rsi+0x17],ah
 1060b52:	(bad)  
 1060b53:	add    BYTE PTR [rax],al
 1060b55:	add    BYTE PTR [rax],al
 1060b57:	add    BYTE PTR [rdi+rdx*1+0x6],bh
 1060b5b:	add    BYTE PTR [rax],al
 1060b5d:	add    BYTE PTR [rax],al
 1060b5f:	add    BYTE PTR [rax+0x617],cl
 1060b65:	add    BYTE PTR [rax],al
 1060b67:	add    BYTE PTR [rdi+rdx*1+0x6],ah
 1060b6e:	add    BYTE PTR [rax],al
 1060b70:	scas   al,BYTE PTR es:[rdi]
 1060b71:	(bad)  
 1060b72:	(bad)  
 1060b73:	add    BYTE PTR [rax],al
 1060b75:	add    BYTE PTR [rax],al
 1060b77:	add    ah,al
 1060b79:	(bad)  
 1060b7a:	(bad)  
 1060b7b:	add    BYTE PTR [rax],al
 1060b7d:	add    BYTE PTR [rax],al
 1060b7f:	add    ah,dl
 1060b81:	(bad)  
 1060b82:	(bad)  
 1060b83:	add    BYTE PTR [rax],al
 1060b85:	add    BYTE PTR [rax],al
 1060b87:	add    ah,ah
 1060b89:	(bad)  
 1060b8a:	(bad)  
 1060b8b:	add    BYTE PTR [rax],al
 1060b8d:	add    BYTE PTR [rax],al
 1060b8f:	add    al,bh
 1060b91:	(bad)  
 1060b92:	(bad)  
 1060b93:	add    BYTE PTR [rax],al
 1060b95:	add    BYTE PTR [rax],al
 1060b97:	add    BYTE PTR [rdx],cl
 1060b99:	sbb    BYTE PTR [rsi],al
 1060b9b:	add    BYTE PTR [rax],al
 1060b9d:	add    BYTE PTR [rax],al
 1060b9f:	add    BYTE PTR [rax],ch
 1060ba1:	sbb    BYTE PTR [rsi],al
 1060ba3:	add    BYTE PTR [rax],al
 1060ba5:	add    BYTE PTR [rax],al
 1060ba7:	add    BYTE PTR [rax+rbx*1],bh
 1060baa:	(bad)  
 1060bab:	add    BYTE PTR [rax],al
 1060bad:	add    BYTE PTR [rax],al
 1060baf:	add    BYTE PTR [rax+rbx*1+0x6],dl
 1060bb3:	add    BYTE PTR [rax],al
 1060bb5:	add    BYTE PTR [rax],al
 1060bb7:	add    BYTE PTR [rax+rbx*1+0x6],ch
 1060bbb:	add    BYTE PTR [rax],al
 1060bbd:	add    BYTE PTR [rax],al
 1060bbf:	add    BYTE PTR [rax+rbx*1+0x6],al
 1060bc6:	add    BYTE PTR [rax],al
 1060bc8:	xchg   esi,eax
 1060bc9:	sbb    BYTE PTR [rsi],al
 1060bcb:	add    BYTE PTR [rax],al
 1060bcd:	add    BYTE PTR [rax],al
 1060bcf:	add    BYTE PTR [rsi+0x618],ah
 1060bd5:	add    BYTE PTR [rax],al
 1060bd7:	add    BYTE PTR [rax+rbx*1+0x6],dh
 1060bde:	add    BYTE PTR [rax],al
 1060be0:	retf   0x618
 1060be3:	add    BYTE PTR [rax],al
 1060be5:	add    BYTE PTR [rax],al
 1060be7:	add    ah,bl
 1060be9:	sbb    BYTE PTR [rsi],al
 1060beb:	add    BYTE PTR [rax],al
 1060bed:	add    BYTE PTR [rax],al
 1060bef:	add    dh,ch
 1060bf1:	sbb    BYTE PTR [rsi],al
 1060bf3:	add    BYTE PTR [rax],al
 1060bf5:	add    BYTE PTR [rax],al
 1060bf7:	add    dh,bh
 1060bf9:	sbb    BYTE PTR [rsi],al
 1060bfb:	add    BYTE PTR [rax],al
 1060bfd:	add    BYTE PTR [rax],al
 1060bff:	add    BYTE PTR [rcx+rbx*1],dl
 1060c02:	(bad)  
 1060c03:	add    BYTE PTR [rax],al
 1060c05:	add    BYTE PTR [rax],al
 1060c07:	add    BYTE PTR [rsi],ah
 1060c09:	sbb    DWORD PTR [rsi],eax
 1060c0b:	add    BYTE PTR [rax],al
 1060c0d:	add    BYTE PTR [rax],al
 1060c0f:	add    BYTE PTR [rsi],dh
 1060c11:	sbb    DWORD PTR [rsi],eax
 1060c13:	add    BYTE PTR [rax],al
 1060c15:	add    BYTE PTR [rax],al
 1060c17:	add    BYTE PTR [rsi+0x19],cl
 1060c1a:	(bad)  
 1060c1b:	add    BYTE PTR [rax],al
 1060c1d:	add    BYTE PTR [rax],al
 1060c1f:	add    BYTE PTR [rcx+rbx*1+0x6],ch
 1060c23:	add    BYTE PTR [rax],al
 1060c25:	add    BYTE PTR [rax],al
 1060c27:	add    BYTE PTR [rcx+rbx*1+0x6],bh
 1060c2b:	add    BYTE PTR [rax],al
 1060c2d:	add    BYTE PTR [rax],al
 1060c2f:	add    BYTE PTR [rcx+rbx*1+0x6],dl
 1060c36:	add    BYTE PTR [rax],al
 1060c38:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1060c39:	sbb    DWORD PTR [rsi],eax
 1060c3b:	add    BYTE PTR [rax],al
 1060c3d:	add    BYTE PTR [rax],al
 1060c3f:	add    dl,al
 1060c41:	sbb    DWORD PTR [rsi],eax
 1060c43:	add    BYTE PTR [rax],al
 1060c45:	add    BYTE PTR [rax],al
 1060c47:	add    ah,bl
 1060c49:	sbb    DWORD PTR [rsi],eax
 1060c4b:	add    BYTE PTR [rax],al
 1060c4d:	add    BYTE PTR [rax],al
 1060c4f:	add    ah,ch
 1060c51:	sbb    DWORD PTR [rsi],eax
	...
 1060c5f:	add    dl,bh
 1060c61:	es (bad) 
 1060c63:	add    BYTE PTR [rax],al
 1060c65:	add    BYTE PTR [rax],al
 1060c67:	add    dl,ah
 1060c69:	es (bad) 
 1060c6b:	add    BYTE PTR [rax],al
 1060c6d:	add    BYTE PTR [rax],al
 1060c6f:	add    ah,cl
 1060c71:	es (bad) 
 1060c73:	add    BYTE PTR [rax],al
 1060c75:	add    BYTE PTR [rax],al
 1060c77:	add    BYTE PTR [rdi+riz*1],dl
 1060c7a:	(bad)  
 1060c7b:	add    BYTE PTR [rax],al
 1060c7d:	add    BYTE PTR [rax],al
 1060c7f:	add    BYTE PTR [rdx+0x626],ch
 1060c85:	add    BYTE PTR [rax],al
 1060c87:	add    BYTE PTR [rax+0x626],bl
 1060c8d:	add    BYTE PTR [rax],al
 1060c8f:	add    BYTE PTR [rax+0x626],cl
 1060c95:	add    BYTE PTR [rax],al
 1060c97:	add    BYTE PTR [rdx+0x26],bh
 1060c9a:	(bad)  
 1060c9b:	add    BYTE PTR [rax],al
 1060c9d:	add    BYTE PTR [rax],al
 1060c9f:	add    BYTE PTR [rax+0x626],bh
	...
 1060cad:	add    BYTE PTR [rax],al
 1060caf:	add    BYTE PTR [rax+0x29],ah
 1060cb2:	(bad)  
 1060cb3:	add    BYTE PTR [rax],al
 1060cb5:	add    BYTE PTR [rax],al
 1060cb7:	add    BYTE PTR [rcx+rbp*1+0x6],cl
	...
 1060cc7:	add    BYTE PTR [rsi],dh
 1060cc9:	sbb    eax,DWORD PTR [rsi]
 1060ccb:	add    BYTE PTR [rax],al
 1060ccd:	add    BYTE PTR [rax],al
 1060ccf:	add    BYTE PTR [rdx+0x1b],cl
 1060cd2:	(bad)  
 1060cd3:	add    BYTE PTR [rax],al
 1060cd5:	add    BYTE PTR [rax],al
 1060cd7:	add    BYTE PTR [rsi+0x1b],bl
 1060cda:	(bad)  
 1060cdb:	add    BYTE PTR [rax],al
 1060cdd:	add    BYTE PTR [rax],al
 1060cdf:	add    BYTE PTR [rbx+rbx*1+0x6],ch
 1060ce3:	add    BYTE PTR [rax],al
 1060ce5:	add    BYTE PTR [rax],al
 1060ce7:	add    BYTE PTR [rdx+0x1b],bh
 1060cea:	(bad)  
 1060ceb:	add    BYTE PTR [rax],al
 1060ced:	add    BYTE PTR [rax],al
 1060cef:	add    BYTE PTR [rax+0x61b],dl
 1060cf5:	add    BYTE PTR [rax],al
 1060cf7:	add    BYTE PTR [rsi+0x61b],ah
 1060cfd:	add    BYTE PTR [rax],al
 1060cff:	add    BYTE PTR [rbx+rbx*1+0x6],dh
 1060d06:	add    BYTE PTR [rax],al
 1060d08:	(bad)  
 1060d09:	sbb    eax,DWORD PTR [rsi]
 1060d0b:	add    BYTE PTR [rax],al
 1060d0d:	add    BYTE PTR [rax],al
 1060d0f:	add    dh,dl
 1060d11:	sbb    eax,DWORD PTR [rsi]
 1060d13:	add    BYTE PTR [rax],al
 1060d15:	add    BYTE PTR [rax],al
 1060d17:	add    ah,ah
 1060d19:	sbb    eax,DWORD PTR [rsi]
 1060d1b:	add    BYTE PTR [rax],al
 1060d1d:	add    BYTE PTR [rax],al
 1060d1f:	add    dl,bh
 1060d21:	sbb    eax,DWORD PTR [rsi]
 1060d23:	add    BYTE PTR [rax],al
 1060d25:	add    BYTE PTR [rax],al
 1060d27:	add    BYTE PTR [rsi],cl
 1060d29:	sbb    al,0x6
 1060d2b:	add    BYTE PTR [rax],al
 1060d2d:	add    BYTE PTR [rax],al
 1060d2f:	add    BYTE PTR [rdx],ch
 1060d31:	sbb    al,0x6
 1060d33:	add    BYTE PTR [rax],al
 1060d35:	add    BYTE PTR [rax],al
 1060d37:	add    BYTE PTR [rsi],dh
 1060d39:	sbb    al,0x6
 1060d3b:	add    BYTE PTR [rax],al
 1060d3d:	add    BYTE PTR [rax],al
 1060d3f:	add    BYTE PTR [rsi+0x1c],cl
 1060d42:	(bad)  
 1060d43:	add    BYTE PTR [rax],al
 1060d45:	add    BYTE PTR [rax],al
 1060d47:	add    BYTE PTR [rsi+0x1c],ah
 1060d4a:	(bad)  
 1060d4b:	add    BYTE PTR [rax],al
 1060d4d:	add    BYTE PTR [rax],al
 1060d4f:	add    BYTE PTR [rsi+0x1c],dh
 1060d52:	(bad)  
 1060d53:	add    BYTE PTR [rax],al
 1060d55:	add    BYTE PTR [rax],al
 1060d57:	add    BYTE PTR [rdx+0x61c],al
 1060d5d:	add    BYTE PTR [rax],al
 1060d5f:	add    BYTE PTR [rsi+0x61c],dl
 1060d65:	add    BYTE PTR [rax],al
 1060d67:	add    BYTE PTR [rsi+0x61c],ah
 1060d6d:	add    BYTE PTR [rax],al
 1060d6f:	add    BYTE PTR [rax+0x61c],bh
 1060d75:	add    BYTE PTR [rax],al
 1060d77:	add    dh,cl
 1060d79:	sbb    al,0x6
 1060d7b:	add    BYTE PTR [rax],al
 1060d7d:	add    BYTE PTR [rax],al
 1060d7f:	add    ah,ch
 1060d81:	sbb    al,0x6
 1060d83:	add    BYTE PTR [rax],al
 1060d85:	add    BYTE PTR [rax],al
 1060d87:	add    BYTE PTR [rsi],al
 1060d89:	sbb    eax,0x6
 1060d8e:	add    BYTE PTR [rax],al
 1060d90:	(bad)  
 1060d91:	sbb    eax,0x6
 1060d96:	add    BYTE PTR [rax],al
 1060d98:	sub    al,0x1d
 1060d9a:	(bad)  
 1060d9b:	add    BYTE PTR [rax],al
 1060d9d:	add    BYTE PTR [rax],al
 1060d9f:	add    BYTE PTR [rdx],bh
 1060da1:	sbb    eax,0x6
 1060da6:	add    BYTE PTR [rax],al
 1060da8:	sbb    rax,0x6
 1060dae:	add    BYTE PTR [rax],al
 1060db0:	push   rsi
 1060db1:	sbb    eax,0x6
 1060db6:	add    BYTE PTR [rax],al
 1060db8:	push   0x1d
 1060dba:	(bad)  
 1060dbb:	add    BYTE PTR [rax],al
 1060dbd:	add    BYTE PTR [rax],al
 1060dbf:	add    BYTE PTR [rax+0x61d],al
 1060dc5:	add    BYTE PTR [rax],al
 1060dc7:	add    BYTE PTR [rsi],ah
 1060dc9:	sbb    eax,DWORD PTR [rsi]
 1060dcb:	add    BYTE PTR [rax],al
 1060dcd:	add    BYTE PTR [rax],al
 1060dcf:	add    BYTE PTR [rbp+rbx*1+0x6],dh
 1060dd6:	add    BYTE PTR [rax],al
 1060dd8:	enter  0x61d,0x0
 1060ddc:	add    BYTE PTR [rax],al
 1060dde:	add    BYTE PTR [rax],al
 1060de0:	ficomp WORD PTR [rip+0x6]        # 0x1060dec
 1060de6:	add    BYTE PTR [rax],al
 1060de8:	repnz sbb eax,0x6
 1060dee:	add    BYTE PTR [rax],al
 1060df0:	add    al,0x1e
 1060df2:	(bad)  
 1060df3:	add    BYTE PTR [rax],al
 1060df5:	add    BYTE PTR [rax],al
 1060df7:	add    BYTE PTR [rax],bl
 1060df9:	(bad)  
 1060dfa:	(bad)  
 1060dfb:	add    BYTE PTR [rax],al
 1060dfd:	add    BYTE PTR [rax],al
 1060dff:	add    BYTE PTR [rdx],dh
 1060e01:	(bad)  
 1060e02:	(bad)  
 1060e03:	add    BYTE PTR [rax],al
 1060e05:	add    BYTE PTR [rax],al
 1060e07:	add    BYTE PTR [rax+0x1e],dl
 1060e0a:	(bad)  
 1060e0b:	add    BYTE PTR [rax],al
 1060e0d:	add    BYTE PTR [rax],al
 1060e0f:	add    BYTE PTR [rax+0x1e],ah
 1060e12:	(bad)  
 1060e13:	add    BYTE PTR [rax],al
 1060e15:	add    BYTE PTR [rax],al
 1060e17:	add    BYTE PTR [rax+0x1e],dh
 1060e1a:	(bad)  
 1060e1b:	add    BYTE PTR [rax],al
 1060e1d:	add    BYTE PTR [rax],al
 1060e1f:	add    BYTE PTR [rsi+rbx*1+0x6],cl
 1060e26:	add    BYTE PTR [rax],al
 1060e28:	mov    ah,0x1e
 1060e2a:	(bad)  
 1060e2b:	add    BYTE PTR [rax],al
 1060e2d:	add    BYTE PTR [rax],al
 1060e2f:	add    al,al
 1060e31:	(bad)  
 1060e32:	(bad)  
 1060e33:	add    BYTE PTR [rax],al
 1060e35:	add    BYTE PTR [rax],al
 1060e37:	add    dh,cl
 1060e39:	(bad)  
 1060e3a:	(bad)  
 1060e3b:	add    BYTE PTR [rax],al
 1060e3d:	add    BYTE PTR [rax],al
 1060e3f:	add    dl,ah
 1060e41:	(bad)  
 1060e42:	(bad)  
 1060e43:	add    BYTE PTR [rax],al
 1060e45:	add    BYTE PTR [rax],al
 1060e47:	add    dl,dh
 1060e49:	(bad)  
 1060e4a:	(bad)  
 1060e4b:	add    BYTE PTR [rax],al
 1060e4d:	add    BYTE PTR [rax],al
 1060e4f:	add    BYTE PTR [rax],cl
 1060e51:	(bad)  
 1060e52:	(bad)  
 1060e53:	add    BYTE PTR [rax],al
 1060e55:	add    BYTE PTR [rax],al
 1060e57:	add    BYTE PTR [rdi+rbx*1],dl
 1060e5a:	(bad)  
 1060e5b:	add    BYTE PTR [rax],al
 1060e5d:	add    BYTE PTR [rax],al
 1060e5f:	add    BYTE PTR [rsi],ah
 1060e61:	(bad)  
 1060e62:	(bad)  
 1060e63:	add    BYTE PTR [rax],al
 1060e65:	add    BYTE PTR [rax],al
 1060e67:	add    BYTE PTR [rax],bh
 1060e69:	(bad)  
 1060e6a:	(bad)  
 1060e6b:	add    BYTE PTR [rax],al
 1060e6d:	add    BYTE PTR [rax],al
 1060e6f:	add    BYTE PTR [rax+0x1f],cl
 1060e72:	(bad)  
 1060e73:	add    BYTE PTR [rax],al
 1060e75:	add    BYTE PTR [rax],al
 1060e77:	add    BYTE PTR [rax+0x1f],ah
 1060e7a:	(bad)  
 1060e7b:	add    BYTE PTR [rax],al
 1060e7d:	add    BYTE PTR [rax],al
 1060e7f:	add    BYTE PTR [rdx+0x1f],bh
 1060e82:	(bad)  
 1060e83:	add    BYTE PTR [rax],al
 1060e85:	add    BYTE PTR [rax],al
 1060e87:	add    BYTE PTR [rsi+0x61f],cl
 1060e8d:	add    BYTE PTR [rax],al
 1060e8f:	add    BYTE PTR [rdi+rbx*1+0x6],ah
 1060e96:	add    BYTE PTR [rax],al
 1060e98:	mov    esp,0x61f
 1060e9d:	add    BYTE PTR [rax],al
 1060e9f:	add    al,bl
 1060ea1:	(bad)  
 1060ea2:	(bad)  
 1060ea3:	add    BYTE PTR [rax],al
 1060ea5:	add    BYTE PTR [rax],al
 1060ea7:	add    al,ch
 1060ea9:	(bad)  
 1060eaa:	(bad)  
 1060eab:	add    BYTE PTR [rax],al
 1060ead:	add    BYTE PTR [rax],al
 1060eaf:	add    al,bh
 1060eb1:	(bad)  
 1060eb2:	(bad)  
 1060eb3:	add    BYTE PTR [rax],al
 1060eb5:	add    BYTE PTR [rax],al
 1060eb7:	add    BYTE PTR [rax+riz*1],cl
 1060eba:	(bad)  
 1060ebb:	add    BYTE PTR [rax],al
 1060ebd:	add    BYTE PTR [rax],al
 1060ebf:	add    BYTE PTR [rax+riz*1],ah
 1060ec2:	(bad)  
 1060ec3:	add    BYTE PTR [rax],al
 1060ec5:	add    BYTE PTR [rax],al
 1060ec7:	add    BYTE PTR [rax],bh
 1060ec9:	and    BYTE PTR [rsi],al
 1060ecb:	add    BYTE PTR [rax],al
 1060ecd:	add    BYTE PTR [rax],al
 1060ecf:	add    BYTE PTR [rax+0x20],cl
 1060ed2:	(bad)  
 1060ed3:	add    BYTE PTR [rax],al
 1060ed5:	add    BYTE PTR [rax],al
 1060ed7:	add    BYTE PTR [rax+riz*1+0x6],ah
 1060edb:	add    BYTE PTR [rax],al
 1060edd:	add    BYTE PTR [rax],al
 1060edf:	add    BYTE PTR [rdx+0x20],bh
 1060ee2:	(bad)  
 1060ee3:	add    BYTE PTR [rax],al
 1060ee5:	add    BYTE PTR [rax],al
 1060ee7:	add    BYTE PTR [rdx+0x620],dl
 1060eed:	add    BYTE PTR [rax],al
 1060eef:	add    BYTE PTR [rdx+0x620],ch
 1060ef5:	add    BYTE PTR [rax],al
 1060ef7:	add    al,al
 1060ef9:	and    BYTE PTR [rsi],al
 1060efb:	add    BYTE PTR [rax],al
 1060efd:	add    BYTE PTR [rax],al
 1060eff:	add    ah,dl
 1060f01:	and    BYTE PTR [rsi],al
 1060f03:	add    BYTE PTR [rax],al
 1060f05:	add    BYTE PTR [rax],al
 1060f07:	add    al,ch
 1060f09:	and    BYTE PTR [rsi],al
 1060f0b:	add    BYTE PTR [rax],al
 1060f0d:	add    BYTE PTR [rax],al
 1060f0f:	add    ah,dh
 1060f11:	and    BYTE PTR [rsi],al
 1060f13:	add    BYTE PTR [rax],al
 1060f15:	add    BYTE PTR [rax],al
 1060f17:	add    BYTE PTR [rax],al
 1060f19:	and    DWORD PTR [rsi],eax
 1060f1b:	add    BYTE PTR [rax],al
 1060f1d:	add    BYTE PTR [rax],al
 1060f1f:	add    BYTE PTR [rcx+riz*1],dl
 1060f22:	(bad)  
 1060f23:	add    BYTE PTR [rax],al
 1060f25:	add    BYTE PTR [rax],al
 1060f27:	add    BYTE PTR [rcx+riz*1],ah
 1060f2a:	(bad)  
 1060f2b:	add    BYTE PTR [rax],al
 1060f2d:	add    BYTE PTR [rax],al
 1060f2f:	add    BYTE PTR [rdx],bh
 1060f31:	and    DWORD PTR [rsi],eax
 1060f33:	add    BYTE PTR [rax],al
 1060f35:	add    BYTE PTR [rax],al
 1060f37:	add    BYTE PTR [rax+0x21],dl
 1060f3a:	(bad)  
 1060f3b:	add    BYTE PTR [rax],al
 1060f3d:	add    BYTE PTR [rax],al
 1060f3f:	add    BYTE PTR [rax+0x21],ch
 1060f42:	(bad)  
 1060f43:	add    BYTE PTR [rax],al
 1060f45:	add    BYTE PTR [rax],al
 1060f47:	add    BYTE PTR [rcx+riz*1+0x6],bh
 1060f4b:	add    BYTE PTR [rax],al
 1060f4d:	add    BYTE PTR [rax],al
 1060f4f:	add    BYTE PTR [rax+0x621],dl
 1060f55:	add    BYTE PTR [rax],al
 1060f57:	add    BYTE PTR [rax+0x621],ah
 1060f5d:	add    BYTE PTR [rax],al
 1060f5f:	add    BYTE PTR [rsi+0x621],ch
 1060f65:	add    BYTE PTR [rax],al
 1060f67:	add    dl,al
 1060f69:	and    DWORD PTR [rsi],eax
 1060f6b:	add    BYTE PTR [rax],al
 1060f6d:	add    BYTE PTR [rax],al
 1060f6f:	add    dl,dl
 1060f71:	and    DWORD PTR [rsi],eax
 1060f73:	add    BYTE PTR [rax],al
 1060f75:	add    BYTE PTR [rax],al
 1060f77:	add    dh,ch
 1060f79:	and    DWORD PTR [rsi],eax
 1060f7b:	add    BYTE PTR [rax],al
 1060f7d:	add    BYTE PTR [rax],al
 1060f7f:	add    dh,bh
 1060f81:	and    DWORD PTR [rsi],eax
 1060f83:	add    BYTE PTR [rax],al
 1060f85:	add    BYTE PTR [rax],al
 1060f87:	add    BYTE PTR [rax],dl
 1060f89:	and    al,BYTE PTR [rsi]
 1060f8b:	add    BYTE PTR [rax],al
 1060f8d:	add    BYTE PTR [rax],al
 1060f8f:	add    BYTE PTR [rdx],ah
 1060f91:	and    al,BYTE PTR [rsi]
 1060f93:	add    BYTE PTR [rax],al
 1060f95:	add    BYTE PTR [rax],al
 1060f97:	add    BYTE PTR [rdx],dh
 1060f99:	and    al,BYTE PTR [rsi]
 1060f9b:	add    BYTE PTR [rax],al
 1060f9d:	add    BYTE PTR [rax],al
 1060f9f:	add    BYTE PTR [rax+0x22],al
 1060fa2:	(bad)  
 1060fa3:	add    BYTE PTR [rax],al
 1060fa5:	add    BYTE PTR [rax],al
 1060fa7:	add    BYTE PTR [rsi+0x22],cl
 1060faa:	(bad)  
 1060fab:	add    BYTE PTR [rax],al
 1060fad:	add    BYTE PTR [rax],al
 1060faf:	add    BYTE PTR [rdx+riz*1+0x6],ah
 1060fb3:	add    BYTE PTR [rax],al
 1060fb5:	add    BYTE PTR [rax],al
 1060fb7:	add    BYTE PTR [rax],dl
 1060fb9:	sbb    eax,DWORD PTR [rsi]
 1060fbb:	add    BYTE PTR [rax],al
 1060fbd:	add    BYTE PTR [rax],al
 1060fbf:	add    BYTE PTR [rsi],al
 1060fc1:	sbb    eax,DWORD PTR [rsi]
 1060fc3:	add    BYTE PTR [rax],al
 1060fc5:	add    BYTE PTR [rax],al
 1060fc7:	add    dh,ch
 1060fc9:	sbb    al,BYTE PTR [rsi]
 1060fcb:	add    BYTE PTR [rax],al
 1060fcd:	add    BYTE PTR [rax],al
 1060fcf:	add    ah,dl
 1060fd1:	sbb    al,BYTE PTR [rsi]
 1060fd3:	add    BYTE PTR [rax],al
 1060fd5:	add    BYTE PTR [rax],al
 1060fd7:	add    dh,al
 1060fd9:	sbb    al,BYTE PTR [rsi]
 1060fdb:	add    BYTE PTR [rax],al
 1060fdd:	add    BYTE PTR [rax],al
 1060fdf:	add    BYTE PTR [rax+0x62a],bh
 1060fe5:	add    BYTE PTR [rax],al
 1060fe7:	add    BYTE PTR [rsi+0x62a],bl
 1060fed:	add    BYTE PTR [rax],al
 1060fef:	add    BYTE PTR [rsi+0x62a],cl
 1060ff5:	add    BYTE PTR [rax],al
 1060ff7:	add    BYTE PTR [rdx+rbp*1+0x6],dh
 1060ffb:	add    BYTE PTR [rax],al
 1060ffd:	add    BYTE PTR [rax],al
 1060fff:	add    BYTE PTR [rdx+rbp*1+0x6],ah
 1061003:	add    BYTE PTR [rax],al
 1061005:	add    BYTE PTR [rax],al
 1061007:	add    BYTE PTR [rax+0x2a],dl
 106100a:	(bad)  
 106100b:	add    BYTE PTR [rax],al
 106100d:	add    BYTE PTR [rax],al
 106100f:	add    BYTE PTR [rsi],dh
 1061011:	sub    al,BYTE PTR [rsi]
 1061013:	add    BYTE PTR [rax],al
 1061015:	add    BYTE PTR [rax],al
 1061017:	add    BYTE PTR [rdx],ah
 1061019:	sub    al,BYTE PTR [rsi]
 106101b:	add    BYTE PTR [rax],al
 106101d:	add    BYTE PTR [rax],al
 106101f:	add    BYTE PTR [rsi],cl
 1061021:	sub    al,BYTE PTR [rsi]
 1061023:	add    BYTE PTR [rax],al
 1061025:	add    BYTE PTR [rax],al
 1061027:	add    dl,dh
 1061029:	sub    DWORD PTR [rsi],eax
 106102b:	add    BYTE PTR [rax],al
 106102d:	add    BYTE PTR [rax],al
 106102f:	add    dl,ah
 1061031:	sub    DWORD PTR [rsi],eax
 1061033:	add    BYTE PTR [rax],al
 1061035:	add    BYTE PTR [rax],al
 1061037:	add    BYTE PTR [rdx+0x61a],bh
 106103d:	add    BYTE PTR [rax],al
 106103f:	add    BYTE PTR [rdx+rbx*1+0x6],bl
 1061046:	add    BYTE PTR [rax],al
 1061048:	xchg   esp,eax
 1061049:	sbb    al,BYTE PTR [rsi]
 106104b:	add    BYTE PTR [rax],al
 106104d:	add    BYTE PTR [rax],al
 106104f:	add    BYTE PTR [rdx+rbx*1+0x6],al
 1061056:	add    BYTE PTR [rax],al
 1061058:	jb     0x1061074
 106105a:	(bad)  
 106105b:	add    BYTE PTR [rax],al
 106105d:	add    BYTE PTR [rax],al
 106105f:	add    BYTE PTR [rsi+0x1a],ah
 1061062:	(bad)  
 1061063:	add    BYTE PTR [rax],al
 1061065:	add    BYTE PTR [rax],al
 1061067:	add    BYTE PTR [rdx+0x1a],bl
 106106a:	(bad)  
 106106b:	add    BYTE PTR [rax],al
 106106d:	add    BYTE PTR [rax],al
 106106f:	add    BYTE PTR [rsi+0x1a],al
 1061072:	(bad)  
 1061073:	add    BYTE PTR [rax],al
 1061075:	add    BYTE PTR [rax],al
 1061077:	add    BYTE PTR [rsi],ch
 1061079:	sbb    al,BYTE PTR [rsi]
 106107b:	add    BYTE PTR [rax],al
 106107d:	add    BYTE PTR [rax],al
 106107f:	add    BYTE PTR [rdx+rbx*1],bl
 1061082:	(bad)  
 1061083:	add    BYTE PTR [rax],al
 1061085:	add    BYTE PTR [rax],al
 1061087:	add    BYTE PTR [rdx],cl
 1061089:	sbb    al,BYTE PTR [rsi]
 106108b:	add    BYTE PTR [rax],al
 106108d:	add    BYTE PTR [rax],al
 106108f:	add    BYTE PTR [rsi+0x61d],dl
	...
 106109d:	add    BYTE PTR [rax],al
 106109f:	add    BYTE PTR [rdi+riz*1+0x6],bl
	...
 10610af:	add    BYTE PTR [rbp+riz*1+0x6],dl
 10610b6:	add    BYTE PTR [rax],al
 10610b8:	(bad)  
 10610b9:	and    eax,0x6
 10610be:	add    BYTE PTR [rax],al
 10610c0:	js     0x10610e7
 10610c2:	(bad)  
 10610c3:	add    BYTE PTR [rax],al
 10610c5:	add    BYTE PTR [rax],al
 10610c7:	add    BYTE PTR [rbp+riz*1+0x6],ch
 10610cb:	add    BYTE PTR [rax],al
 10610cd:	add    BYTE PTR [rax],al
 10610cf:	add    BYTE PTR [rax+0x25],bl
 10610d2:	(bad)  
 10610d3:	add    BYTE PTR [rax],al
 10610d5:	add    BYTE PTR [rax],al
 10610d7:	add    BYTE PTR [rax+0x625],bh
 10610dd:	add    BYTE PTR [rax],al
 10610df:	add    BYTE PTR ds:0x6,dh
 10610e6:	add    BYTE PTR [rax],al
 10610e8:	sub    BYTE PTR [rip+0x6],ah        # 0x10610f4
 10610ee:	add    BYTE PTR [rax],al
 10610f0:	sbb    ah,BYTE PTR [rip+0x6]        # 0x10610fc
 10610f6:	add    BYTE PTR [rax],al
 10610f8:	adc    ah,BYTE PTR [rip+0x6]        # 0x1061104
 10610fe:	add    BYTE PTR [rax],al
 1061100:	or     BYTE PTR [rip+0x6],ah        # 0x106110c
 1061106:	add    BYTE PTR [rax],al
 1061108:	rex.X and eax,0x6
 106110e:	add    BYTE PTR [rax],al
 1061110:	cmp    ah,BYTE PTR [rbx]
 1061112:	(bad)  
 1061113:	add    BYTE PTR [rax],al
 1061115:	add    BYTE PTR [rax],al
 1061117:	add    BYTE PTR [rax],al
 1061119:	and    eax,0x6
 106111e:	add    BYTE PTR [rax],al
 1061120:	repnz and al,0x6
 1061123:	add    BYTE PTR [rax],al
 1061125:	add    BYTE PTR [rax],al
 1061127:	add    al,ah
 1061129:	and    al,0x6
 106112b:	add    BYTE PTR [rax],al
 106112d:	add    BYTE PTR [rax],al
 106112f:	add    dl,dl
 1061131:	and    al,0x6
 1061133:	add    BYTE PTR [rax],al
 1061135:	add    BYTE PTR [rax],al
 1061137:	add    dh,al
 1061139:	and    al,0x6
 106113b:	add    BYTE PTR [rax],al
 106113d:	add    BYTE PTR [rax],al
 106113f:	add    BYTE PTR [rsp+0x6],dh
 1061146:	add    BYTE PTR [rax],al
 1061148:	test   al,0x24
 106114a:	(bad)  
 106114b:	add    BYTE PTR [rax],al
 106114d:	add    BYTE PTR [rax],al
 106114f:	add    BYTE PTR [rax+0x624],bl
 1061155:	add    BYTE PTR [rax],al
 1061157:	add    BYTE PTR [rax+0x624],al
 106115d:	add    BYTE PTR [rax],al
 106115f:	add    ah,al
 1061161:	sub    al,BYTE PTR [rsi]
 1061163:	add    BYTE PTR [rax],al
 1061165:	add    BYTE PTR [rax],al
 1061167:	add    BYTE PTR [rsi+0x24],ch
 106116a:	(bad)  
 106116b:	add    BYTE PTR [rax],al
 106116d:	add    BYTE PTR [rax],al
 106116f:	add    BYTE PTR [rsp+0x6],ah
 1061173:	add    BYTE PTR [rax],al
 1061175:	add    BYTE PTR [rax],al
 1061177:	add    BYTE PTR [rsp+0x6],dl
 106117b:	add    BYTE PTR [rax],al
 106117d:	add    BYTE PTR [rax],al
 106117f:	add    BYTE PTR [rdx+0x24],cl
 1061182:	(bad)  
 1061183:	add    BYTE PTR [rax],al
 1061185:	add    BYTE PTR [rax],al
 1061187:	add    dh,dh
 1061189:	and    eax,0x6
 106118e:	add    BYTE PTR [rax],al
 1061190:	in     al,dx
 1061191:	and    eax,0x6
 1061196:	add    BYTE PTR [rax],al
 1061198:	in     al,0x25
 106119a:	(bad)  
 106119b:	add    BYTE PTR [rax],al
 106119d:	add    BYTE PTR [rax],al
 106119f:	add    dh,dl
 10611a1:	and    eax,0x6
 10611a6:	add    BYTE PTR [rax],al
 10611a8:	nop
 10611a9:	and    al,BYTE PTR [rsi]
 10611ab:	add    BYTE PTR [rax],al
 10611ad:	add    BYTE PTR [rax],al
 10611af:	add    BYTE PTR [rdx+riz*1+0x6],bl
 10611b6:	add    BYTE PTR [rax],al
 10611b8:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 10611b9:	and    al,BYTE PTR [rsi]
 10611bb:	add    BYTE PTR [rax],al
 10611bd:	add    BYTE PTR [rax],al
 10611bf:	add    BYTE PTR [rdx+0x622],bh
 10611c5:	add    BYTE PTR [rax],al
 10611c7:	add    dh,al
 10611c9:	and    al,BYTE PTR [rsi]
 10611cb:	add    BYTE PTR [rax],al
 10611cd:	add    BYTE PTR [rax],al
 10611cf:	add    al,dl
 10611d1:	and    al,BYTE PTR [rsi]
 10611d3:	add    BYTE PTR [rax],al
 10611d5:	add    BYTE PTR [rax],al
 10611d7:	add    ah,bl
 10611d9:	and    al,BYTE PTR [rsi]
 10611db:	add    BYTE PTR [rax],al
 10611dd:	add    BYTE PTR [rax],al
 10611df:	add    dh,ah
 10611e1:	and    al,BYTE PTR [rsi]
 10611e3:	add    BYTE PTR [rax],al
 10611e5:	add    BYTE PTR [rax],al
 10611e7:	add    ah,dh
 10611e9:	and    al,BYTE PTR [rsi]
 10611eb:	add    BYTE PTR [rax],al
 10611ed:	add    BYTE PTR [rax],al
 10611ef:	add    dh,bh
 10611f1:	and    al,BYTE PTR [rsi]
 10611f3:	add    BYTE PTR [rax],al
 10611f5:	add    BYTE PTR [rax],al
 10611f7:	add    BYTE PTR [rax],cl
 10611f9:	and    eax,DWORD PTR [rsi]
 10611fb:	add    BYTE PTR [rax],al
 10611fd:	add    BYTE PTR [rax],al
 10611ff:	add    BYTE PTR [rdx],dl
 1061201:	and    eax,DWORD PTR [rsi]
 1061203:	add    BYTE PTR [rax],al
 1061205:	add    BYTE PTR [rax],al
 1061207:	add    BYTE PTR [rdx],bl
 1061209:	and    eax,DWORD PTR [rsi]
 106120b:	add    BYTE PTR [rax],al
 106120d:	add    BYTE PTR [rax],al
 106120f:	add    BYTE PTR [rbx+riz*1],ah
 1061212:	(bad)  
 1061213:	add    BYTE PTR [rax],al
 1061215:	add    BYTE PTR [rax],al
 1061217:	add    ah,cl
 1061219:	and    eax,0x6
 106121e:	add    BYTE PTR [rax],al
 1061220:	push   rax
 1061221:	and    eax,DWORD PTR [rsi]
 1061223:	add    BYTE PTR [rax],al
 1061225:	add    BYTE PTR [rax],al
 1061227:	add    BYTE PTR [rdx+0x23],bl
 106122a:	(bad)  
 106122b:	add    BYTE PTR [rax],al
 106122d:	add    BYTE PTR [rax],al
 106122f:	add    BYTE PTR [rbx+riz*1+0x6],ah
 1061233:	add    BYTE PTR [rax],al
 1061235:	add    BYTE PTR [rax],al
 1061237:	add    BYTE PTR [rsi+0x23],ch
 106123a:	(bad)  
 106123b:	add    BYTE PTR [rax],al
 106123d:	add    BYTE PTR [rax],al
 106123f:	add    BYTE PTR [rdx+0x23],bh
 1061242:	(bad)  
 1061243:	add    BYTE PTR [rax],al
 1061245:	add    BYTE PTR [rax],al
 1061247:	add    BYTE PTR [rdx+0x623],al
 106124d:	add    BYTE PTR [rax],al
 106124f:	add    BYTE PTR [rdx+0x623],cl
 1061255:	add    BYTE PTR [rax],al
 1061257:	add    BYTE PTR [rdx+0x623],bl
 106125d:	add    BYTE PTR [rax],al
 106125f:	add    BYTE PTR [rsi+0x623],ah
 1061265:	add    BYTE PTR [rax],al
 1061267:	add    BYTE PTR [rdx+0x623],dh
 106126d:	add    BYTE PTR [rax],al
 106126f:	add    al,al
 1061271:	and    eax,DWORD PTR [rsi]
 1061273:	add    BYTE PTR [rax],al
 1061275:	add    BYTE PTR [rax],al
 1061277:	add    dl,cl
 1061279:	and    eax,DWORD PTR [rsi]
 106127b:	add    BYTE PTR [rax],al
 106127d:	add    BYTE PTR [rax],al
 106127f:	add    ah,dl
 1061281:	and    eax,DWORD PTR [rsi]
 1061283:	add    BYTE PTR [rax],al
 1061285:	add    BYTE PTR [rax],al
 1061287:	add    al,ah
 1061289:	and    eax,DWORD PTR [rsi]
 106128b:	add    BYTE PTR [rax],al
 106128d:	add    BYTE PTR [rax],al
 106128f:	add    ah,ch
 1061291:	and    eax,DWORD PTR [rsi]
 1061293:	add    BYTE PTR [rax],al
 1061295:	add    BYTE PTR [rax],al
 1061297:	add    al,bh
 1061299:	and    eax,DWORD PTR [rsi]
 106129b:	add    BYTE PTR [rax],al
 106129d:	add    BYTE PTR [rax],al
 106129f:	add    BYTE PTR [rsp],al
 10612a2:	(bad)  
 10612a3:	add    BYTE PTR [rax],al
 10612a5:	add    BYTE PTR [rax],al
 10612a7:	add    BYTE PTR [rsi],cl
 10612a9:	and    al,0x6
 10612ab:	add    BYTE PTR [rax],al
 10612ad:	add    BYTE PTR [rax],al
 10612af:	add    BYTE PTR [rdx],bl
 10612b1:	and    al,0x6
 10612b3:	add    BYTE PTR [rax],al
 10612b5:	add    BYTE PTR [rax],al
 10612b7:	add    BYTE PTR [rsp],ah
 10612ba:	(bad)  
 10612bb:	add    BYTE PTR [rax],al
 10612bd:	add    BYTE PTR [rax],al
 10612bf:	add    BYTE PTR [rax],dh
 10612c1:	and    al,0x6
 10612c3:	add    BYTE PTR [rax],al
 10612c5:	add    BYTE PTR [rax],al
 10612c7:	add    BYTE PTR [rsi],bh
 10612c9:	and    al,0x6
	...
 10612d7:	add    BYTE PTR [rdx],bl
 10612d9:	sub    DWORD PTR [rsi],eax
 10612db:	add    BYTE PTR [rax],al
 10612dd:	add    BYTE PTR [rax],al
 10612df:	add    BYTE PTR [rdx],ch
 10612e1:	sub    DWORD PTR [rsi],eax
	...
 10612ef:	add    BYTE PTR [rax],bl
 10612f1:	add    BYTE PTR [rax],al
 10612f3:	add    BYTE PTR [rax],al
 10612f5:	add    BYTE PTR [rax],al
 10612f7:	or     BYTE PTR [rbp+0x0],0x0
 10612fe:	add    BYTE PTR [rax+0x8b],al
 1061304:	add    BYTE PTR [rax],al
 1061306:	add    BYTE PTR [rax+0x88],al
 106130c:	add    BYTE PTR [rax],al
 106130e:	add    BYTE PTR [rax+0x87],al
 1061314:	add    BYTE PTR [rax],al
 1061316:	add    BYTE PTR [rax+0x4b],al
 106131c:	add    BYTE PTR [rax],al
 106131e:	add    BYTE PTR [rax+0x1f],al
 1061324:	add    BYTE PTR [rax],al
 1061326:	add    BYTE PTR [rax+0x9],al
 106132c:	add    BYTE PTR [rax],al
 106132e:	add    BYTE PTR [rax+0x0],al
 1061334:	add    BYTE PTR [rax],al
 1061336:	add    BYTE PTR [rax],al
 1061338:	(bad)  
 1061339:	add    BYTE PTR [rax],al
 106133b:	add    BYTE PTR [rax],al
 106133d:	add    BYTE PTR [rax],al
 106133f:	add    BYTE PTR [rdx],0x0
 1061342:	add    BYTE PTR [rax],al
 1061344:	add    BYTE PTR [rax],al
 1061346:	add    BYTE PTR [rax+0x9],al
 106134c:	add    BYTE PTR [rax],al
 106134e:	add    BYTE PTR [rax+0xc8],al
 1061354:	add    BYTE PTR [rax],al
 1061356:	add    BYTE PTR [rax+0x0],al
 106135c:	add    BYTE PTR [rax],al
 106135e:	add    BYTE PTR [rax],al
 1061360:	jl     0x1061389
 1061362:	(bad)  
	...
 106136f:	add    BYTE PTR [rsi],dh
 1061371:	(bad)  
 1061372:	(bad)  
	...
 106137f:	add    dl,ah
 1061381:	(bad)  
 1061382:	(bad)  
 1061383:	add    BYTE PTR [rax],al
 1061385:	add    BYTE PTR [rax],al
 1061387:	add    BYTE PTR [rax+rbp*1],cl
 106138a:	(bad)  
 106138b:	add    BYTE PTR [rax],al
 106138d:	add    BYTE PTR [rax],al
 106138f:	add    al,bh
 1061391:	(bad)  
 1061392:	(bad)  
	...
 106139f:	add    BYTE PTR [rcx+rbp*1+0x6],ch
	...
 10613ae:	add    BYTE PTR [rax],al
 10613b0:	mov    edx,0x627
 10613b5:	add    BYTE PTR [rax],al
 10613b7:	add    BYTE PTR [rsi+0x627],dl
 10613bd:	add    BYTE PTR [rax],al
 10613bf:	add    BYTE PTR [rdi+riz*1+0x6],ch
	...
 10613ce:	add    BYTE PTR [rax],al
 10613d0:	pop    rsp
 10613d1:	es (bad) 
 10613d3:	add    BYTE PTR [rax],al
 10613d5:	add    BYTE PTR [rax],al
 10613d7:	add    BYTE PTR [rsi+0x26],al
 10613da:	(bad)  
 10613db:	add    BYTE PTR [rax],al
 10613dd:	add    BYTE PTR [rax],al
 10613df:	add    BYTE PTR [rsi+riz*1],ch
 10613e2:	(bad)  
	...
 10613ef:	add    BYTE PTR [rax+0x629],dl
 10613f5:	add    BYTE PTR [rax],al
 10613f7:	add    BYTE PTR [rdx+0x629],al
	...
 1061405:	add    BYTE PTR [rax],al
 1061407:	add    BYTE PTR [rax+0xe],bh
 106140a:	add    BYTE PTR [rax],al
 106140c:	add    BYTE PTR [rax],al
 106140e:	add    BYTE PTR [rax+0x321e],al
 1061414:	add    BYTE PTR [rax],al
 1061416:	add    BYTE PTR [rax+0x1db9],al
 106141c:	add    BYTE PTR [rax],al
 106141e:	add    BYTE PTR [rax+0x1db8],al
 1061424:	add    BYTE PTR [rax],al
 1061426:	add    BYTE PTR [rax+0x2cfd],al
 106142c:	add    BYTE PTR [rax],al
 106142e:	add    BYTE PTR [rax+0x115],al
 1061434:	add    BYTE PTR [rax],al
 1061436:	add    BYTE PTR [rax+0x10dd],al
 106143c:	add    BYTE PTR [rax],al
 106143e:	add    BYTE PTR [rax+0x1b9c],al
 1061444:	add    BYTE PTR [rax],al
 1061446:	add    BYTE PTR [rax+0x125],al
 106144c:	add    BYTE PTR [rax],al
 106144e:	add    BYTE PTR [rax+0x5ac],al
 1061454:	add    BYTE PTR [rax],al
 1061456:	add    BYTE PTR [rax+0xf9d],al
 106145c:	add    BYTE PTR [rax],al
 106145e:	add    BYTE PTR [rax+0x1d95],al
 1061464:	add    BYTE PTR [rax],al
 1061466:	add    BYTE PTR [rax+0x50b],al
 106146c:	add    BYTE PTR [rax],al
 106146e:	add    BYTE PTR [rax+0xcda],al
 1061474:	add    BYTE PTR [rax],al
 1061476:	add    BYTE PTR [rax+0x1b0b],al
 106147c:	add    BYTE PTR [rax],al
 106147e:	add    BYTE PTR [rax+0x10c],al
 1061484:	add    BYTE PTR [rax],al
 1061486:	add    BYTE PTR [rax+0x4fe],al
 106148c:	add    BYTE PTR [rax],al
 106148e:	add    BYTE PTR [rax+0x1d90],al
 1061494:	add    BYTE PTR [rax],al
 1061496:	add    BYTE PTR [rax+0x7e7],al
 106149c:	add    BYTE PTR [rax],al
 106149e:	add    BYTE PTR [rax+0x169e],al
 10614a4:	add    BYTE PTR [rax],al
 10614a6:	add    BYTE PTR [rax+0x2b1b],al
 10614ac:	add    BYTE PTR [rax],al
 10614ae:	add    BYTE PTR [rax+0x2c63],al
 10614b4:	add    BYTE PTR [rax],al
 10614b6:	add    BYTE PTR [rax+0x118],al
 10614bc:	add    BYTE PTR [rax],al
 10614be:	add    BYTE PTR [rax+0x7e3],al
 10614c4:	add    BYTE PTR [rax],al
 10614c6:	add    BYTE PTR [rax+0x102],al
 10614cc:	add    BYTE PTR [rax],al
 10614ce:	add    BYTE PTR [rax+0x58a],al
 10614d4:	add    BYTE PTR [rax],al
 10614d6:	add    BYTE PTR [rax+0x5ae],al
 10614dc:	add    BYTE PTR [rax],al
 10614de:	add    BYTE PTR [rax+0x2ba7],al
 10614e4:	add    BYTE PTR [rax],al
 10614e6:	add    BYTE PTR [rax+0x10fc],al
 10614ec:	add    BYTE PTR [rax],al
 10614ee:	add    BYTE PTR [rax+0x105],al
 10614f4:	add    BYTE PTR [rax],al
 10614f6:	add    BYTE PTR [rax+0x32ec],al
 10614fc:	add    BYTE PTR [rax],al
 10614fe:	add    BYTE PTR [rax+0x9df],al
 1061504:	add    BYTE PTR [rax],al
 1061506:	add    BYTE PTR [rax+0xaaa],al
 106150c:	add    BYTE PTR [rax],al
 106150e:	add    BYTE PTR [rax+0x104b],al
 1061514:	add    BYTE PTR [rax],al
 1061516:	add    BYTE PTR [rax+0x109],al
 106151c:	add    BYTE PTR [rax],al
 106151e:	add    BYTE PTR [rax+0x10a],al
 1061524:	add    BYTE PTR [rax],al
 1061526:	add    BYTE PTR [rax+0x4fc],al
 106152c:	add    BYTE PTR [rax],al
 106152e:	add    BYTE PTR [rax+0x2b04],al
 1061534:	add    BYTE PTR [rax],al
 1061536:	add    BYTE PTR [rax+0x32d9],al
 106153c:	add    BYTE PTR [rax],al
 106153e:	add    BYTE PTR [rax+0x1023],al
 1061544:	add    BYTE PTR [rax],al
 1061546:	add    BYTE PTR [rax+0x1c36],al
 106154c:	add    BYTE PTR [rax],al
 106154e:	add    BYTE PTR [rax+0x2cd8],al
 1061554:	add    BYTE PTR [rax],al
 1061556:	add    BYTE PTR [rax+0xf9e],al
 106155c:	add    BYTE PTR [rax],al
 106155e:	add    BYTE PTR [rax+0x9e5],al
 1061564:	add    BYTE PTR [rax],al
 1061566:	add    BYTE PTR [rax+0x13bc],al
 106156c:	add    BYTE PTR [rax],al
 106156e:	add    BYTE PTR [rax+0x322a],al
 1061574:	add    BYTE PTR [rax],al
 1061576:	add    BYTE PTR [rax+0x3224],al
 106157c:	add    BYTE PTR [rax],al
 106157e:	add    BYTE PTR [rax+0x7e9],al
 1061584:	add    BYTE PTR [rax],al
 1061586:	add    BYTE PTR [rax+0xfdf],al
 106158c:	add    BYTE PTR [rax],al
 106158e:	add    BYTE PTR [rax+0x5b1],al
 1061594:	add    BYTE PTR [rax],al
 1061596:	add    BYTE PTR [rax+0x50a],al
 106159c:	add    BYTE PTR [rax],al
 106159e:	add    BYTE PTR [rax+0x508],al
 10615a4:	add    BYTE PTR [rax],al
 10615a6:	add    BYTE PTR [rax+0x37a],al
 10615ac:	add    BYTE PTR [rax],al
 10615ae:	add    BYTE PTR [rax+0x11e],al
 10615b4:	add    BYTE PTR [rax],al
 10615b6:	add    BYTE PTR [rax+0x11d],al
 10615bc:	add    BYTE PTR [rax],al
 10615be:	add    BYTE PTR [rax+0x128],al
 10615c4:	add    BYTE PTR [rax],al
 10615c6:	add    BYTE PTR [rax+0x9ed],al
 10615cc:	add    BYTE PTR [rax],al
 10615ce:	add    BYTE PTR [rax+0x31d4],al
 10615d4:	add    BYTE PTR [rax],al
 10615d6:	add    BYTE PTR [rax+0xcdc],al
 10615dc:	add    BYTE PTR [rax],al
 10615de:	add    BYTE PTR [rax+0x7ed],al
 10615e4:	add    BYTE PTR [rax],al
 10615e6:	add    BYTE PTR [rax+0x594],al
 10615ec:	add    BYTE PTR [rax],al
 10615ee:	add    BYTE PTR [rax+0x139b],al
 10615f4:	add    BYTE PTR [rax],al
 10615f6:	add    BYTE PTR [rax+0x0],al
 10615fc:	add    BYTE PTR [rax],al
 10615fe:	add    BYTE PTR [rax],al
 1061600:	adc    al,BYTE PTR [rax]
 1061602:	add    BYTE PTR [rax],al
 1061604:	add    BYTE PTR [rax],al
 1061606:	add    BYTE PTR [rax+0xe],al
 106160c:	add    BYTE PTR [rax],al
 106160e:	add    BYTE PTR [rax+0x9],al
 1061614:	add    BYTE PTR [rax],al
 1061616:	add    BYTE PTR [rax+0x6],al
 106161c:	add    BYTE PTR [rax],al
 106161e:	add    BYTE PTR [rax+0x3],al
 1061624:	add    BYTE PTR [rax],al
 1061626:	add    BYTE PTR [rax+0x2],al
 106162c:	add    BYTE PTR [rax],al
 106162e:	add    BYTE PTR [rax+0xa],al
 1061634:	add    BYTE PTR [rax],al
 1061636:	add    BYTE PTR [rax+0x0],al
 106163c:	add    BYTE PTR [rax],al
 106163e:	add    BYTE PTR [rax],al
 1061640:	cmp    ch,BYTE PTR [rax]
 1061642:	(bad)  
 1061643:	add    BYTE PTR [rax],al
 1061645:	add    BYTE PTR [rax],al
 1061647:	add    BYTE PTR [rax+rbp*1+0x6],cl
 106164b:	add    BYTE PTR [rax],al
 106164d:	add    BYTE PTR [rax],al
 106164f:	add    BYTE PTR [rdx],ch
 1061651:	sub    BYTE PTR [rsi],al
 1061653:	add    BYTE PTR [rax],al
 1061655:	add    BYTE PTR [rax],al
 1061657:	add    BYTE PTR [rax+0x28],ah
 106165a:	(bad)  
	...
 1061667:	add    BYTE PTR [rax+0x628],ch
 106166d:	add    BYTE PTR [rax],al
 106166f:	add    BYTE PTR [rdx+0x628],al
 1061675:	add    BYTE PTR [rax],al
 1061677:	add    al,cl
 1061679:	sub    BYTE PTR [rsi],al
 106167b:	add    BYTE PTR [rax],al
 106167d:	add    BYTE PTR [rax],al
 106167f:	add    al,bl
 1061681:	sub    BYTE PTR [rsi],al
 1061683:	add    BYTE PTR [rax],al
 1061685:	add    BYTE PTR [rax],al
 1061687:	add    dl,bh
 1061689:	sub    BYTE PTR [rsi],al
 106168b:	add    BYTE PTR [rax],al
 106168d:	add    BYTE PTR [rax],al
 106168f:	add    ah,ch
 1061691:	sub    BYTE PTR [rsi],al
 1061693:	add    BYTE PTR [rax],al
 1061695:	add    BYTE PTR [rax],al
 1061697:	add    BYTE PTR [rdx+0x628],bh
 106169d:	add    BYTE PTR [rax],al
 106169f:	add    BYTE PTR [rdx+0x628],dl
	...
 10616ad:	add    BYTE PTR [rax],al
 10616af:	add    BYTE PTR [rbp+0x1],ah
 10616b2:	rex.RXB
 10616b3:	gs je  0x106170b
 10616b6:	jae    0x106171d
 10616b8:	jb     0x1061708
 10616ba:	(bad)  
 10616bb:	ins    DWORD PTR es:[rdi],dx
 10616bc:	gs push rdi
 10616be:	add    BYTE PTR [rax],al
 10616c0:	fild   DWORD PTR [rax]
 10616c2:	rex.R
 10616c3:	gs jb  0x106172b
 10616c6:	imul   esi,DWORD PTR [ebx+0x74],0x76457265
 10616ce:	outs   dx,BYTE PTR gs:[rsi]
 10616d0:	je     0x1061725
 10616d2:	outs   dx,DWORD PTR ds:[rsi]
 10616d3:	jne    0x1061747
 10616d5:	movsxd esp,DWORD PTR [rbp+0x0]
 10616d8:	add    DWORD PTR [rdx],0x52
 10616db:	imul   esi,DWORD PTR gs:[ebx+0x74],0x76457265
 10616e4:	outs   dx,BYTE PTR gs:[rsi]
 10616e6:	je     0x106173b
 10616e8:	outs   dx,DWORD PTR ds:[rsi]
 10616e9:	jne    0x106175d
 10616eb:	movsxd esp,DWORD PTR [rbp+0x57]
 10616ee:	add    BYTE PTR [rax],al
 10616f0:	pop    QWORD PTR [rdx]
 10616f2:	push   rdx
 10616f3:	gs jo  0x1061765
 10616f6:	jb     0x106176c
 10616f8:	rex.RB jbe 0x1061760
 10616fb:	outs   dx,BYTE PTR ds:[rsi]
 10616fc:	je     0x1061755
 10616fe:	add    BYTE PTR [rax],al
 1061700:	xor    BYTE PTR [rdx],al
 1061702:	push   rdx
 1061703:	gs rex.XB ins BYTE PTR es:[edi],dx
 1061707:	outs   dx,DWORD PTR ds:[rsi]
 1061708:	jae    0x106176f
 106170a:	rex.WXB
 106170b:	gs jns 0x106170e
 106170e:	cmp    al,0x2
 1061710:	push   rdx
 1061711:	gs addr32 rex.XB jb 0x106177b
 1061716:	(bad)  
 1061717:	je     0x106177e
 1061719:	rex.WXB
 106171a:	gs jns 0x1061774
 106171d:	add    BYTE PTR [rsi+0x2],bh
 1061720:	push   rdx
 1061721:	gs addr32 push rbx
 1061724:	gs je  0x106177d
 1061727:	(bad)  
 1061728:	ins    BYTE PTR es:[rdi],dx
 1061729:	jne    0x1061790
 106172b:	rex.RB js 0x1061785
 106172e:	add    BYTE PTR [rax],al
 1061730:	add    BYTE PTR [rcx],0x49
 1061733:	jae    0x1061789
 1061735:	gs js  0x10617ac
 1061738:	push   rbp
 1061739:	outs   dx,BYTE PTR ds:[rsi]
 106173a:	imul   esp,DWORD PTR [rbx+0x6f],0xf7006564
 1061741:	add    DWORD PTR [rdi+0x70],ecx
 1061744:	outs   dx,BYTE PTR gs:[rsi]
 1061746:	push   rax
 1061747:	jb     0x10617b8
 1061749:	movsxd esp,DWORD PTR [rbp+0x73]
 106174c:	jae    0x10617a2
 106174e:	outs   dx,DWORD PTR ds:[rsi]
 106174f:	imul   esp,DWORD PTR [rbp+0x6e],0x0
 1061753:	add    ah,bh
 1061755:	add    DWORD PTR [rdi+0x70],ecx
 1061758:	outs   dx,BYTE PTR gs:[rsi]
 106175a:	push   rsp
 106175b:	push   0x64616572
 1061760:	push   rsp
 1061761:	outs   dx,DWORD PTR ds:[rsi]
 1061762:	imul   esp,DWORD PTR [rbp+0x6e],0x0
 1061766:	pop    rdx
 1061767:	add    DWORD PTR [rdi+0x65],eax
 106176a:	je     0x10617c0
 106176c:	outs   dx,DWORD PTR ds:[rsi]
 106176d:	imul   esp,DWORD PTR [rbp+0x6e],0x49
 1061771:	outs   dx,BYTE PTR ds:[rsi]
 1061772:	outs   dx,WORD PTR ds:[rsi]
 1061774:	jb     0x10617e3
 1061776:	(bad)  
 1061777:	je     0x10617e2
 1061779:	outs   dx,DWORD PTR ds:[rsi]
 106177a:	outs   dx,BYTE PTR ds:[rsi]
 106177b:	add    BYTE PTR [rdi],al
 106177d:	add    DWORD PTR [rbp+0x71],eax
 1061780:	jne    0x10617e3
 1061782:	ins    BYTE PTR es:[rdi],dx
 1061783:	push   rbx
 1061784:	imul   esp,DWORD PTR [rax+rax*1+0x0],0x6c410020
 106178c:	ins    BYTE PTR es:[rdi],dx
 106178d:	outs   dx,DWORD PTR ds:[rsi]
 106178e:	movsxd esp,DWORD PTR [rcx+0x74]
 1061791:	rex.B outs dx,BYTE PTR gs:[rsi]
 1061794:	rex.WB outs dx,BYTE PTR fs:[rsi]
 1061797:	imul   esi,DWORD PTR [rcx+rbp*2+0x61],0x657a696c
 106179f:	push   rbx
 10617a0:	imul   esp,DWORD PTR [rax+rax*1+0x0],0x72460120
 10617a8:	gs gs push rbx
 10617ab:	imul   esp,DWORD PTR [rax+rax*1+0x34],0x67655202
 10617b3:	rex.XB outs dx,DWORD PTR ds:[rsi]
 10617b5:	outs   dx,BYTE PTR ds:[rsi]
 10617b6:	outs   dx,BYTE PTR ds:[rsi]
 10617b7:	movsxd esi,DWORD PTR gs:[rdx+rdx*2+0x65]
 10617bc:	imul   esi,DWORD PTR [ebx+0x74],0x577972
 10617c4:	push   rdx
 10617c5:	add    dl,BYTE PTR [rdx+0x65]
 10617c8:	rex.RB outs dx,BYTE PTR ds:[esi]
 10617cb:	jne    0x106183a
 10617cd:	push   rsi
 10617ce:	(bad)  
 10617cf:	ins    BYTE PTR es:[rdi],dx
 10617d0:	jne    0x1061837
 10617d2:	push   rdi
 10617d3:	add    BYTE PTR [rcx+0x2],ah
 10617d6:	push   rdx
 10617d7:	gs addr32 rex.WRXB jo 0x1061841
 10617dc:	outs   dx,BYTE PTR ds:[rsi]
 10617dd:	rex.WXB
 10617de:	gs jns 0x1061826
 10617e1:	js     0x106183a
 10617e3:	add    BYTE PTR [rsi+0x2],ch
 10617e6:	push   rdx
 10617e7:	gs addr32 push rcx
 10617ea:	jne    0x1061851
 10617ec:	jb     0x1061867
 10617ee:	push   rsi
 10617ef:	(bad)  
 10617f0:	ins    BYTE PTR es:[rdi],dx
 10617f1:	jne    0x1061858
 10617f3:	rex.RB js 0x106184d
 10617f6:	add    BYTE PTR [rax],al
 10617f8:	rex.WRX add QWORD PTR [rdi+0x65],r8
 10617fc:	je     0x1061851
 10617fe:	movsxd esi,DWORD PTR gs:[rbp+0x72]
 1061802:	imul   esi,DWORD PTR [rcx+rdi*2+0x49],0x6f666e
 106180a:	mov    BYTE PTR [rdx],al
 106180c:	push   rdx
 106180d:	imul   esi,DWORD PTR gs:[ebx+0x74],0x65537265
 1061816:	jb     0x106188e
 1061818:	imul   esp,DWORD PTR [rbx+0x65],0x6c727443
 106181f:	rex.W (bad) 
 1061821:	outs   dx,BYTE PTR ds:[rsi]
 1061822:	fs ins BYTE PTR es:[rdi],dx
 1061824:	gs jb  0x106187e
 1061827:	add    al,al
 1061829:	add    dl,BYTE PTR [rbx+0x65]
 106182c:	je     0x1061881
 106182e:	gs jb  0x10618a7
 1061831:	imul   esp,DWORD PTR [rbx+0x65],0x74617453
 1061838:	jne    0x10618ad
 106183a:	add    BYTE PTR [rax],al
 106183c:	(bad)  
 106183d:	add    BYTE PTR [rcx+0x64],al
 1061840:	push   0x75
 1061842:	jae    0x10618b8
 1061844:	push   rsp
 1061845:	outs   dx,DWORD PTR ds:[rsi]
 1061846:	imul   esp,DWORD PTR [rbp+0x6e],0x50
 106184a:	jb     0x10618b5
 106184c:	jbe    0x10618b7
 106184e:	ins    BYTE PTR es:[rdi],dx
 106184f:	gs addr32 gs jae 0x1061854
 1061854:	xchg   edi,eax
 1061855:	add    DWORD PTR [rdi+rbp*2+0x6f],ecx
 1061859:	imul   esi,DWORD PTR [rbp+0x70],0x50
 106185d:	jb     0x10618c8
 106185f:	jbe    0x10618ca
 1061861:	ins    BYTE PTR es:[rdi],dx
 1061862:	gs addr32 gs push rsi
 1061866:	(bad)  
 1061867:	ins    BYTE PTR es:[rdi],dx
 1061868:	jne    0x10618cf
 106186a:	push   rdi
 106186b:	add    BYTE PTR [rcx+0x0],dl
 106186e:	rex.XB push 0x546b6365
 1061874:	outs   dx,DWORD PTR ds:[rsi]
 1061875:	imul   esp,DWORD PTR [rbp+0x6e],0x4d
 1061879:	gs ins DWORD PTR es:[rdi],dx
 106187b:	(bad)  
 106187c:	gs jb  0x10618f2
 106187f:	push   0x7069
 1061884:	cmp    DWORD PTR [rdx],eax
 1061886:	push   rdx
 1061887:	gs addr32 rex.XB jb 0x10618f1
 106188c:	(bad)  
 106188d:	je     0x10618f4
 106188f:	rex.WXB
 1061890:	gs jns 0x10618d8
 1061893:	js     0x10618ec
 1061895:	add    BYTE PTR [rdx+rax*1+0x52],al
 1061899:	gs addr32 rex.R
 106189c:	gs ins BYTE PTR es:[rdi],dx
 106189e:	gs je  0x1061906
 10618a1:	rex.WXB
 10618a2:	gs jns 0x10618fc
 10618a5:	add    BYTE PTR [rax+0x2],bh
 10618a8:	push   rdx
 10618a9:	gs addr32 push rbx
 10618ac:	(bad)  
 10618ad:	jbe    0x1061914
 10618af:	rex.WXB
 10618b0:	gs jns 0x106190a
 10618b3:	add    BYTE PTR [rdi+0x0],dl
 10618b6:	rex.XB ins BYTE PTR es:[rdi],dx
 10618b8:	outs   dx,DWORD PTR ds:[rsi]
 10618b9:	jae    0x1061920
 10618bb:	push   rbx
 10618bc:	gs jb  0x1061935
 10618bf:	imul   esp,DWORD PTR [rbx+0x65],0x646e6148
 10618c6:	ins    BYTE PTR es:[rdi],dx
 10618c7:	add    BYTE PTR gs:[rax],al
 10618ca:	pop    rsp
 10618cb:	add    BYTE PTR [rbx+0x6f],al
 10618ce:	outs   dx,BYTE PTR ds:[rsi]
 10618cf:	je     0x1061943
 10618d1:	outs   dx,DWORD PTR ds:[rsi]
 10618d2:	ins    BYTE PTR es:[rdi],dx
 10618d3:	push   rbx
 10618d4:	gs jb  0x106194d
 10618d7:	imul   esp,DWORD PTR [rbx+0x65],0x810000
 10618de:	rex.XB jb 0x1061946
 10618e1:	(bad)  
 10618e2:	je     0x1061949
 10618e4:	push   rbx
 10618e5:	gs jb  0x106195e
 10618e8:	imul   esp,DWORD PTR [rbx+0x65],0xda000057
 10618ef:	add    BYTE PTR [rbp+riz*2+0x6c],al
 10618f3:	gs je  0x106195b
 10618f6:	push   rbx
 10618f7:	gs jb  0x1061970
 10618fa:	imul   esp,DWORD PTR [rbx+0x65],0x4c018800
 1061901:	outs   dx,DWORD PTR ds:[rsi]
 1061902:	movsxd ebp,DWORD PTR [rbx+0x53]
 1061905:	gs jb  0x106197e
 1061908:	imul   esp,DWORD PTR [rbx+0x65],0x61746144
 106190f:	(bad)  
 1061911:	jae    0x1061978
 1061913:	add    cl,bh
 1061915:	add    DWORD PTR [rdi+0x70],ecx
 1061918:	outs   dx,BYTE PTR gs:[rsi]
 106191a:	push   rbx
 106191b:	rex.XB
 106191c:	rex.WRB (bad) 
 106191e:	outs   dx,BYTE PTR ds:[rsi]
 106191f:	(bad)  
 1061920:	addr32 gs jb 0x106197b
 1061924:	add    BYTE PTR [rax],al
 1061926:	sti    
 1061927:	add    DWORD PTR [rdi+0x70],ecx
 106192a:	outs   dx,BYTE PTR gs:[rsi]
 106192c:	push   rbx
 106192d:	gs jb  0x10619a6
 1061930:	imul   esp,DWORD PTR [rbx+0x65],0x29000057
 1061937:	add    dl,BYTE PTR [rcx+0x75]
 106193a:	gs jb  0x10619b6
 106193d:	push   rbx
 106193e:	gs jb  0x10619b7
 1061941:	imul   esp,DWORD PTR [rbx+0x65],0x74617453
 1061948:	jne    0x10619bd
 106194a:	rex.RB js 0x106194d
 106194d:	add    al,cl
 106194f:	add    dl,BYTE PTR [rbx+0x74]
 1061952:	(bad)  
 1061953:	jb     0x10619c9
 1061955:	push   rbx
 1061956:	gs jb  0x10619cf
 1061959:	imul   esp,DWORD PTR [rbx+0x65],0x6c727443
 1061960:	imul   r14d,DWORD PTR [rbx+0x70],0x68637461
 1061968:	gs jb  0x10619c2
 106196b:	add    cl,cl
 106196d:	add    dl,BYTE PTR [rbx+0x74]
 1061970:	(bad)  
 1061971:	jb     0x10619e7
 1061973:	push   rbx
 1061974:	gs jb  0x10619ed
 1061977:	imul   esp,DWORD PTR [rbx+0x65],0x3000057
 106197e:	push   rbp
 106197f:	outs   dx,BYTE PTR ds:[rsi]
 1061980:	ins    BYTE PTR es:[rdi],dx
 1061981:	outs   dx,DWORD PTR ds:[rsi]
 1061982:	movsxd ebp,DWORD PTR [rbx+0x53]
 1061985:	gs jb  0x10619fe
 1061988:	imul   esp,DWORD PTR [rbx+0x65],0x61746144
 106198f:	(bad)  
 1061991:	jae    0x10619f8
 1061993:	add    BYTE PTR [rsi+0x0],dl
 1061996:	rex.XB ins BYTE PTR es:[rdi],dx
 1061998:	outs   dx,DWORD PTR ds:[rsi]
 1061999:	jae    0x1061a00
 106199b:	rex.RB jbe 0x1061a03
 106199e:	outs   dx,BYTE PTR ds:[rsi]
 106199f:	je     0x10619ed
 10619a1:	outs   dx,DWORD PTR ds:[rsi]
 10619a2:	add    BYTE PTR [ebx+0x1],al
 10619a6:	rex.RXB
 10619a7:	gs je  0x10619f8
 10619aa:	jne    0x1061a19
 10619ac:	(bad)  
 10619ad:	gs jb  0x10619ff
 10619b0:	data16 rex.RB jbe 0x1061a19
 10619b4:	outs   dx,BYTE PTR ds:[rsi]
 10619b5:	je     0x1061a03
 10619b7:	outs   dx,DWORD PTR ds:[rsi]
 10619b8:	addr32 push rdx
 10619ba:	movsxd ebp,DWORD PTR gs:[rdi+0x72]
 10619be:	fs jae 0x10619c1
 10619c1:	add    BYTE PTR [rcx+rax*1+0x47],al
 10619c5:	gs je  0x1061a17
 10619c8:	ins    BYTE PTR es:[rdi],dx
 10619c9:	fs gs jae 0x1061a41
 10619cd:	rex.RB jbe 0x1061a35
 10619d0:	outs   dx,BYTE PTR ds:[rsi]
 10619d1:	je     0x1061a1f
 10619d3:	outs   dx,DWORD PTR ds:[rsi]
 10619d4:	addr32 push rdx
 10619d6:	movsxd ebp,DWORD PTR gs:[rdi+0x72]
 10619da:	fs add dh,dh
 10619dd:	add    DWORD PTR [rdi+0x70],ecx
 10619e0:	outs   dx,BYTE PTR gs:[rsi]
 10619e2:	rex.RB jbe 0x1061a4a
 10619e5:	outs   dx,BYTE PTR ds:[rsi]
 10619e6:	je     0x1061a34
 10619e8:	outs   dx,DWORD PTR ds:[rsi]
 10619e9:	addr32 push rdi
 10619eb:	add    BYTE PTR [rdi],ch
 10619ed:	add    dl,BYTE PTR [rdx+0x65]
 10619f0:	(bad)  
 10619f1:	fs rex.RB jbe 0x1061a5a
 10619f5:	outs   dx,BYTE PTR ds:[rsi]
 10619f6:	je     0x1061a44
 10619f8:	outs   dx,DWORD PTR ds:[rsi]
 10619f9:	addr32 push rdi
 10619fb:	add    BYTE PTR [rcx+0x44],al
 10619fe:	push   rsi
 10619ff:	push   r8
 1061a01:	xor    rsi,QWORD PTR [r10]
 1061a04:	cs fs ins BYTE PTR es:[rdi],dx
 1061a07:	ins    BYTE PTR es:[rdi],dx
 1061a08:	add    BYTE PTR [rax],al
 1061a0a:	rex.WR add r8b,BYTE PTR [rdi+0x65]
 1061a0e:	je     0x1061a60
 1061a10:	jb     0x1061a81
 1061a12:	movsxd eax,DWORD PTR [rcx+0x64]
 1061a15:	fs jb  0x1061a7d
 1061a18:	jae    0x1061a8d
 1061a1a:	add    BYTE PTR [rax],al
 1061a1c:	mov    ah,0x3
 1061a1e:	push   rdx
 1061a1f:	(bad)  
 1061a20:	imul   esi,DWORD PTR [rbx+0x65],0x65637845
 1061a27:	jo     0x1061a9d
 1061a29:	imul   ebp,DWORD PTR [rdi+0x6e],0xd20000
 1061a30:	rex.R
 1061a31:	gs ins BYTE PTR es:[rdi],dx
 1061a33:	gs je  0x1061a9b
 1061a36:	rex.XB jb 0x1061aa2
 1061a39:	je     0x1061aa4
 1061a3b:	movsxd esp,DWORD PTR [rcx+0x6c]
 1061a3e:	push   rbx
 1061a3f:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 1061a44:	outs   dx,BYTE PTR ds:[rsi]
 1061a45:	add    BYTE PTR [rsi],bl
 1061a47:	add    al,BYTE PTR [rdi+0x65]
 1061a4a:	je     0x1061a99
 1061a4c:	outs   dx,DWORD PTR ds:[rsi]
 1061a4d:	fs jne 0x1061abc
 1061a50:	gs rex.W (bad) 
 1061a53:	outs   dx,BYTE PTR ds:[rsi]
 1061a54:	fs ins BYTE PTR es:[rdi],dx
 1061a56:	gs push rdi
 1061a58:	add    BYTE PTR [rax],al
 1061a5a:	rol    DWORD PTR [rdx],cl
 1061a5c:	rex.W
 1061a5d:	gs (bad) 
 1061a5f:	jo     0x1061aa2
 1061a61:	ins    BYTE PTR es:[rdi],dx
 1061a62:	ins    BYTE PTR es:[rdi],dx
 1061a63:	outs   dx,DWORD PTR ds:[rsi]
 1061a64:	movsxd eax,DWORD PTR [rax]
 1061a66:	xlat   BYTE PTR ds:[rbx]
 1061a67:	add    cl,BYTE PTR [rax+0x65]
 1061a6a:	(bad)  
 1061a6b:	jo     0x1061ab3
 1061a6d:	jb     0x1061ad4
 1061a6f:	add    BYTE PTR gs:[rax],al
 1061a72:	push   rcx
 1061a73:	add    al,BYTE PTR [rdi+0x65]
 1061a76:	je     0x1061ac8
 1061a78:	jb     0x1061ae9
 1061a7a:	movsxd esp,DWORD PTR [rbp+0x73]
 1061a7d:	jae    0x1061ac7
 1061a7f:	gs (bad) 
 1061a81:	jo     0x1061a83
 1061a83:	add    BYTE PTR [rax],cl
 1061a85:	add    al,BYTE PTR [rdi+0x65]
 1061a88:	je     0x1061ad6
 1061a8a:	(bad)  
 1061a8b:	jae    0x1061b01
 1061a8d:	rex.RB jb 0x1061b02
 1061a90:	outs   dx,DWORD PTR ds:[rsi]
 1061a91:	jb     0x1061a93
 1061a93:	add    al,al
 1061a95:	add    al,0x53
 1061a97:	ins    BYTE PTR es:[rdi],dx
 1061a98:	gs gs jo 0x1061a9c
 1061a9c:	repz add DWORD PTR [rdi+0x65],eax
 1061aa0:	je     0x1061ae8
 1061aa2:	imul   ebp,DWORD PTR [rbp+riz*2+0x49],0x726f666e
 1061aaa:	ins    DWORD PTR es:[rdi],dx
 1061aab:	(bad)  
 1061aac:	je     0x1061b17
 1061aae:	outs   dx,DWORD PTR ds:[rsi]
 1061aaf:	outs   dx,BYTE PTR ds:[rsi]
 1061ab0:	rex.X jns 0x1061afb
 1061ab3:	(bad)  
 1061ab4:	outs   dx,BYTE PTR ds:[rsi]
 1061ab5:	fs ins BYTE PTR es:[rdi],dx
 1061ab7:	add    BYTE PTR gs:[rax],al
 1061aba:	xor    al,0x1
 1061abc:	rex.RX imul r13d,DWORD PTR [rsi+0x64],0x736f6c43
 1061ac4:	add    BYTE PTR gs:[rdx+0x0],dl
 1061ac8:	rex.XB ins BYTE PTR es:[rdi],dx
 1061aca:	outs   dx,DWORD PTR ds:[rsi]
 1061acb:	jae    0x1061b32
 1061acd:	rex.W (bad) 
 1061acf:	outs   dx,BYTE PTR ds:[rsi]
 1061ad0:	fs ins BYTE PTR es:[rdi],dx
 1061ad2:	add    BYTE PTR gs:[rdx],ch
 1061ad5:	add    DWORD PTR [rsi+0x69],eax
 1061ad8:	ins    BYTE PTR es:[rdi],dx
 1061ad9:	gs push rsp
 1061adb:	imul   ebp,DWORD PTR [rbp+0x65],0x6f4c6f54
 1061ae2:	movsxd esp,DWORD PTR [rcx+0x6c]
 1061ae5:	imul   r13d,DWORD PTR [rbp+r12*2+0x54],0x656d69
 1061aee:	sub    DWORD PTR [rcx],eax
 1061af0:	imul   r13d,DWORD PTR [rbp+r12*2+0x54],0x54656d69
 1061af9:	outs   dx,DWORD PTR ds:[rsi]
 1061afa:	rex.R outs dx,DWORD PTR ds:[rsi]
 1061afc:	jae    0x1061b42
 1061afe:	(bad)  
 1061aff:	je     0x1061b66
 1061b01:	push   rsp
 1061b02:	imul   ebp,DWORD PTR [rbp+0x65],0x5304c300
 1061b09:	ins    BYTE PTR es:[rdi],dx
 1061b0a:	gs gs jo 0x1061b53
 1061b0e:	js     0x1061b10
 1061b10:	mov    WORD PTR [rbx],es
 1061b12:	rex.WRXB jne 0x1061b89
 1061b15:	jo     0x1061b8c
 1061b17:	je     0x1061b5d
 1061b19:	gs (bad) 
 1061b1b:	jne    0x1061b84
 1061b1d:	push   rbx
 1061b1e:	je     0x1061b92
 1061b20:	imul   ebp,DWORD PTR [rsi+0x67],0x8c000057
 1061b27:	add    al,BYTE PTR [rdi+0x65]
 1061b2a:	je     0x1061b80
 1061b2c:	gs ins DWORD PTR es:[rdi],dx
 1061b2e:	jo     0x1061b80
 1061b30:	(bad)  
 1061b31:	je     0x1061b9b
 1061b33:	push   rdi
 1061b34:	add    BYTE PTR [rax],al
 1061b36:	mov    al,BYTE PTR [rdx]
 1061b38:	rex.RXB
 1061b39:	gs je  0x1061b90
 1061b3c:	gs ins DWORD PTR es:[rdi],dx
 1061b3e:	jo     0x1061b86
 1061b40:	imul   ebp,DWORD PTR [rbp+riz*2+0x4e],0x57656d61
 1061b48:	add    BYTE PTR [rax],al
 1061b4a:	add    DWORD PTR [rax],0x61657243
 1061b50:	je     0x1061bb7
 1061b52:	imul   r14d,DWORD PTR [rdx+0x65],0x726f7463
 1061b5a:	jns    0x1061bb3
 1061b5c:	add    BYTE PTR [rax],al
 1061b5e:	mov    BYTE PTR [rax],al
 1061b60:	rex.XB jb 0x1061bc8
 1061b63:	(bad)  
 1061b64:	je     0x1061bcb
 1061b66:	imul   r13d,DWORD PTR [rbp+r12*2+0x41],0x43008f00
 1061b6f:	jb     0x1061bd6
 1061b71:	(bad)  
 1061b72:	je     0x1061bd9
 1061b74:	imul   r13d,DWORD PTR [rbp+r12*2+0x57],0x4701ec00
 1061b7d:	gs je  0x1061bc6
 1061b80:	imul   ebp,DWORD PTR [rbp+riz*2+0x41],0x69727474
 1061b88:	(bad)  
 1061b89:	jne    0x1061bff
 1061b8b:	gs jae 0x1061bcf
 1061b8e:	add    BYTE PTR [rax],al
 1061b90:	icebp  
 1061b91:	add    DWORD PTR [rdi+0x65],eax
 1061b94:	je     0x1061bdc
 1061b96:	imul   ebp,DWORD PTR [rbp+riz*2+0x41],0x69727474
 1061b9e:	(bad)  
 1061b9f:	jne    0x1061c15
 1061ba1:	gs jae 0x1061bfb
 1061ba4:	add    BYTE PTR [rax],al
 1061ba6:	xlat   BYTE PTR ds:[rbx]
 1061ba7:	add    BYTE PTR [rbp+riz*2+0x6c],al
 1061bab:	gs je  0x1061c13
 1061bae:	imul   r13d,DWORD PTR [rbp+r12*2+0x57],0x46013f00
 1061bb7:	imul   ebp,DWORD PTR [rsi+0x64],0x73726946
 1061bbe:	je     0x1061c06
 1061bc0:	imul   ebp,DWORD PTR [rbp+riz*2+0x57],0x14b0000
 1061bc8:	rex.RX imul r13d,DWORD PTR [rsi+0x64],0x7478654e
 1061bd0:	imul   r13d,DWORD PTR [rbp+r12*2+0x57],0x4d036200
 1061bd9:	outs   dx,DWORD PTR ds:[rsi]
 1061bda:	jbe    0x1061c41
 1061bdc:	imul   r13d,DWORD PTR [rbp+r12*2+0x45],0x20005778
 1061be5:	add    eax,0x65646957
 1061bea:	rex.XB push 0x6f547261
 1061bf0:	rex.WRB jne 0x1061c5f
 1061bf3:	je     0x1061c5e
 1061bf5:	rex.X jns 0x1061c6c
 1061bf8:	add    BYTE PTR gs:[rbp+0x74654701],dl
 1061bff:	rex.XB outs dx,DWORD PTR ds:[rsi]
 1061c01:	ins    DWORD PTR es:[rdi],dx
 1061c02:	jo     0x1061c79
 1061c04:	je     0x1061c6b
 1061c06:	jb     0x1061c56
 1061c08:	(bad)  
 1061c09:	ins    DWORD PTR es:[rdi],dx
 1061c0a:	gs push rdi
 1061c0c:	add    BYTE PTR [rax],al
 1061c0e:	rex.WB add al,BYTE PTR [r15+0x65]
 1061c12:	je     0x1061c64
 1061c14:	jb     0x1061c7f
 1061c16:	jbe    0x1061c79
 1061c18:	je     0x1061c7f
 1061c1a:	push   rax
 1061c1b:	jb     0x1061c8c
 1061c1d:	imul   bp,WORD PTR [rbp+riz*2+0x53],0x7274
 1061c24:	imul   ebp,DWORD PTR [rsi+0x67],0x4a000057
 1061c2b:	add    ecx,DWORD PTR [rdi+rbp*2+0x63]
 1061c2f:	(bad)  
 1061c30:	ins    BYTE PTR es:[rdi],dx
 1061c31:	rex.RX jb 0x1061c99
 1061c34:	gs add dl,dh
 1061c37:	add    BYTE PTR [rbp+0x6e],al
 1061c3a:	je     0x1061ca1
 1061c3c:	jb     0x1061c81
 1061c3e:	jb     0x1061ca9
 1061c40:	je     0x1061cab
 1061c42:	movsxd esp,DWORD PTR [rcx+0x6c]
 1061c45:	push   rbx
 1061c46:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 1061c4b:	outs   dx,BYTE PTR ds:[rsi]
 1061c4c:	add    BYTE PTR [rax],al
 1061c4e:	cmp    eax,DWORD PTR [rbx]
 1061c50:	rex.WR
 1061c51:	gs (bad) 
 1061c53:	jbe    0x1061cba
 1061c55:	rex.XB jb 0x1061cc1
 1061c58:	je     0x1061cc3
 1061c5a:	movsxd esp,DWORD PTR [rcx+0x6c]
 1061c5d:	push   rbx
 1061c5e:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 1061c63:	outs   dx,BYTE PTR ds:[rsi]
 1061c64:	add    BYTE PTR [rax],al
 1061c66:	imul   eax,DWORD PTR [rdx],0x47
 1061c69:	gs je  0x1061cbf
 1061c6c:	je     0x1061cd2
 1061c6e:	rex.W (bad) 
 1061c70:	outs   dx,BYTE PTR ds:[rsi]
 1061c71:	fs ins BYTE PTR es:[rdi],dx
 1061c73:	add    BYTE PTR gs:[rax],al
 1061c76:	xor    al,0x5
 1061c78:	push   rdi
 1061c79:	jb     0x1061ce4
 1061c7b:	je     0x1061ce2
 1061c7d:	imul   r13d,DWORD PTR [rbp+r12*2+0x0],0x6c46015d
 1061c86:	jne    0x1061cfb
 1061c88:	push   0x656c6946
 1061c8d:	rex.X jne 0x1061cf6
 1061c90:	data16 gs jb 0x1061d07
 1061c94:	add    BYTE PTR [rax],al
 1061c96:	or     DWORD PTR [rdx],eax
 1061c98:	rex.RXB
 1061c99:	gs je  0x1061ce8
 1061c9c:	outs   dx,DWORD PTR ds:[rsi]
 1061c9d:	movsxd esp,DWORD PTR [rcx+0x6c]
 1061ca0:	push   rsp
 1061ca1:	imul   ebp,DWORD PTR [rbp+0x65],0x1640000
 1061ca8:	rex.RX outs dx,DWORD PTR ds:[rsi]
 1061caa:	jb     0x1061d19
 1061cac:	(bad)  
 1061cad:	je     0x1061cfc
 1061caf:	gs jae 0x1061d25
 1061cb2:	(bad)  
 1061cb3:	addr32 gs push rdi
 1061cb6:	add    BYTE PTR [rax],al
 1061cb8:	sbb    al,BYTE PTR [rdx]
 1061cba:	rex.RXB
 1061cbb:	gs je  0x1061d0b
 1061cbe:	outs   dx,DWORD PTR ds:[rsi]
 1061cbf:	fs jne 0x1061d2e
 1061cc2:	imul   r13d,DWORD PTR gs:[rbp+r12*2+0x4e],0x57656d61
 1061ccc:	add    BYTE PTR [rax],al
 1061cce:	mov    eax,0x74654701
 1061cd3:	rex.XB outs dx,DWORD PTR ds:[rsi]
 1061cd5:	outs   dx,BYTE PTR ds:[rsi]
 1061cd6:	jae    0x1061d47
 1061cd8:	ins    BYTE PTR es:[rdi],dx
 1061cd9:	gs push rbx
 1061cdb:	movsxd esi,DWORD PTR [rdx+0x65]
 1061cde:	outs   dx,BYTE PTR gs:[rsi]
 1061ce0:	rex.X jne 0x1061d49
 1061ce3:	data16 gs jb 0x1061d30
 1061ce7:	outs   dx,BYTE PTR ds:[rsi]
 1061ce8:	outs   dx,WORD PTR ds:[rsi]
 1061cea:	add    BYTE PTR [rax],al
 1061cec:	push   rsp
 1061ced:	add    al,0x53
 1061cef:	gs je  0x1061d35
 1061cf2:	outs   dx,DWORD PTR ds:[rsi]
 1061cf3:	outs   dx,BYTE PTR ds:[rsi]
 1061cf4:	jae    0x1061d65
 1061cf6:	ins    BYTE PTR es:[rdi],dx
 1061cf7:	gs push rsp
 1061cf9:	gs js  0x1061d70
 1061cfc:	rex.B je 0x1061d73
 1061cff:	jb     0x1061d6a
 1061d01:	(bad)  
 1061d02:	jne    0x1061d78
 1061d04:	add    BYTE PTR gs:[rbx],dh
 1061d07:	add    eax,0x74697257
 1061d0c:	rex.XB outs dx,DWORD PTR gs:[rsi]
 1061d0f:	outs   dx,BYTE PTR ds:[rsi]
 1061d10:	jae    0x1061d81
 1061d12:	ins    BYTE PTR es:[rdi],dx
 1061d13:	gs push rdi
 1061d15:	add    bl,dh
 1061d17:	add    al,0x56
 1061d19:	gs jb  0x1061d6f
 1061d1c:	gs je  0x1061d62
 1061d1f:	outs   dx,DWORD PTR ds:[rsi]
 1061d20:	outs   dx,BYTE PTR ds:[rsi]
 1061d21:	imul   esi,DWORD PTR fs:[rcx+rbp*2+0x6f],0x73614d6e
 1061d2a:	imul   eax,DWORD PTR [rax],0x68
 1061d2d:	add    DWORD PTR [rsi+0x72],eax
 1061d30:	gs imul r12,QWORD PTR gs:[rdx+0x72],0x797261
 1061d3a:	ret    0x4702
 1061d3d:	ins    BYTE PTR es:[rdi],dx
 1061d3e:	outs   dx,DWORD PTR ds:[rsi]
 1061d3f:	(bad)
 1061d44:	gs add BYTE PTR gs:[rax],al
 1061d48:	add    r9d,DWORD PTR [rdi+r13*2+0x63]
 1061d4d:	(bad)  
 1061d4e:	ins    BYTE PTR es:[rdi],dx
 1061d4f:	rex.B ins BYTE PTR es:[rdi],dx
 1061d51:	ins    BYTE PTR es:[rdi],dx
 1061d52:	outs   dx,DWORD PTR ds:[rsi]
 1061d53:	movsxd eax,DWORD PTR [rax]
 1061d55:	add    dh,al
 1061d57:	add    DWORD PTR [rdi+0x65],eax
 1061d5a:	je     0x1061d9f
 1061d5c:	jne    0x1061dd0
 1061d5e:	jb     0x1061dc5
 1061d60:	outs   dx,BYTE PTR ds:[rsi]
 1061d61:	je     0x1061db3
 1061d63:	jb     0x1061dd4
 1061d65:	movsxd esp,DWORD PTR [rbp+0x73]
 1061d68:	jae    0x1061d6a
 1061d6a:	mov    DWORD PTR [rcx],0x43746547
 1061d70:	jne    0x1061de4
 1061d72:	jb     0x1061dd9
 1061d74:	outs   dx,BYTE PTR ds:[rsi]
 1061d75:	je     0x1061dc7
 1061d77:	jb     0x1061de8
 1061d79:	movsxd esp,DWORD PTR [rbp+0x73]
 1061d7c:	jae    0x1061dc7
 1061d7e:	fs add dh,ah
 1061d81:	add    DWORD PTR [rdi+0x65],eax
 1061d84:	je     0x1061dcb
 1061d86:	js     0x1061df1
 1061d88:	je     0x1061dcd
 1061d8a:	outs   dx,DWORD PTR ds:[rsi]
 1061d8b:	fs gs push rax
 1061d8e:	jb     0x1061dff
 1061d90:	movsxd esp,DWORD PTR [rbp+0x73]
 1061d93:	jae    0x1061d95
 1061d95:	add    BYTE PTR [rbx+0x74655304],dh
 1061d9b:	push   rbp
 1061d9c:	outs   dx,BYTE PTR ds:[rsi]
 1061d9d:	push   0x6c646e61
 1061da2:	gs fs rex.RB js 0x1061e0a
 1061da7:	gs jo  0x1061e1e
 1061daa:	imul   ebp,DWORD PTR [rdi+0x6e],0x746c6946
 1061db1:	gs jb  0x1061db4
 1061db4:	retf   0x4701
 1061db7:	gs je  0x1061dfd
 1061dba:	jne    0x1061e2e
 1061dbc:	jb     0x1061e23
 1061dbe:	outs   dx,BYTE PTR ds:[rsi]
 1061dbf:	je     0x1061e15
 1061dc1:	push   0x64616572
 1061dc6:	add    BYTE PTR [rax],al
 1061dc8:	retf   
 1061dc9:	add    DWORD PTR [rdi+0x65],eax
 1061dcc:	je     0x1061e11
 1061dce:	jne    0x1061e42
 1061dd0:	jb     0x1061e37
 1061dd2:	outs   dx,BYTE PTR ds:[rsi]
 1061dd3:	je     0x1061e29
 1061dd5:	push   0x64616572
 1061dda:	rex.WB
 1061ddb:	add    BYTE PTR fs:[rax],al
 1061dde:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1061ddf:	add    al,0x53
 1061de1:	gs je  0x1061e38
 1061de4:	push   0x64616572
 1061de9:	push   rax
 1061dea:	jb     0x1061e55
 1061dec:	outs   dx,DWORD PTR ds:[rsi]
 1061ded:	jb     0x1061e58
 1061def:	je     0x1061e6a
 1061df1:	add    bh,cl
 1061df3:	add    al,0x54
 1061df5:	gs jb  0x1061e65
 1061df8:	imul   ebp,DWORD PTR [rsi+0x61],0x68546574
 1061dff:	jb     0x1061e66
 1061e01:	(bad)  
 1061e02:	fs add bh,ah
 1061e05:	add    DWORD PTR [rdi+0x65],eax
 1061e08:	je     0x1061e4f
 1061e0a:	js     0x1061e75
 1061e0c:	je     0x1061e51
 1061e0e:	outs   dx,DWORD PTR ds:[rsi]
 1061e0f:	fs gs push rsp
 1061e12:	push   0x64616572
 1061e17:	add    BYTE PTR [rax+rax*1+0x61657243],dl
 1061e1e:	je     0x1061e85
 1061e20:	rex.WB outs dx,DWORD PTR ds:[rsi]
 1061e22:	rex.XB outs dx,DWORD PTR ds:[rsi]
 1061e24:	ins    DWORD PTR es:[rdi],dx
 1061e25:	jo     0x1061e93
 1061e27:	gs je  0x1061e93
 1061e2a:	outs   dx,DWORD PTR ds:[rsi]
 1061e2b:	outs   dx,BYTE PTR ds:[rsi]
 1061e2c:	push   rax
 1061e2d:	outs   dx,DWORD PTR ds:[rsi]
 1061e2e:	jb     0x1061ea4
 1061e30:	add    BYTE PTR [rax],al
 1061e32:	nop
 1061e33:	add    edx,DWORD PTR [rax+0x6f]
 1061e36:	jae    0x1061eac
 1061e38:	push   rcx
 1061e39:	jne    0x1061ea0
 1061e3b:	jne    0x1061ea2
 1061e3d:	rex.XB outs dx,DWORD PTR fs:[rsi]
 1061e40:	ins    DWORD PTR es:[rdi],dx
 1061e41:	jo     0x1061eaf
 1061e43:	gs je  0x1061eaf
 1061e46:	outs   dx,DWORD PTR ds:[rsi]
 1061e47:	outs   dx,BYTE PTR ds:[rsi]
 1061e48:	push   rbx
 1061e49:	je     0x1061eac
 1061e4b:	je     0x1061ec2
 1061e4d:	jae    0x1061e4f
 1061e4f:	add    BYTE PTR [rsi+0x4],ah
 1061e52:	push   rbx
 1061e53:	gs je  0x1061e9b
 1061e56:	jb     0x1061eca
 1061e58:	outs   dx,DWORD PTR ds:[rsi]
 1061e59:	jb     0x1061ea8
 1061e5b:	outs   dx,DWORD PTR ds:[rsi]
 1061e5c:	fs add BYTE PTR gs:[rax],al
 1061e60:	mov    dl,0x3
 1061e62:	push   rcx
 1061e63:	jne    0x1061eca
 1061e65:	jne    0x1061ecc
 1061e67:	push   rbp
 1061e68:	jae    0x1061ecf
 1061e6a:	jb     0x1061ead
 1061e6c:	push   rax
 1061e6d:	rex.XB add BYTE PTR [r8],al
 1061e70:	(bad)  
 1061e71:	add    cl,BYTE PTR [rcx+0x6e]
 1061e74:	imul   esi,DWORD PTR [rcx+rbp*2+0x61],0x657a696c
 1061e7c:	rex.XB jb 0x1061ee8
 1061e7f:	je     0x1061eea
 1061e81:	movsxd esp,DWORD PTR [rcx+0x6c]
 1061e84:	push   rbx
 1061e85:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 1061e8a:	outs   dx,BYTE PTR ds:[rsi]
 1061e8b:	add    bl,ch
 1061e8d:	add    cl,BYTE PTR [rcx+0x6e]
 1061e90:	imul   esi,DWORD PTR [rcx+rbp*2+0x61],0x657a696c
 1061e98:	rex.XB jb 0x1061f04
 1061e9b:	je     0x1061f06
 1061e9d:	movsxd esp,DWORD PTR [rcx+0x6c]
 1061ea0:	push   rbx
 1061ea1:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 1061ea6:	outs   dx,BYTE PTR ds:[rsi]
 1061ea7:	rex.B outs dx,BYTE PTR ds:[rsi]
 1061ea9:	fs push rbx
 1061eab:	jo     0x1061f16
 1061ead:	outs   dx,BYTE PTR ds:[rsi]
 1061eae:	rex.XB outs dx,DWORD PTR ds:[rsi]
 1061eb0:	jne    0x1061f20
 1061eb2:	je     0x1061eb4
 1061eb4:	addr32 add al,0x53
 1061eb7:	gs je  0x1061eff
 1061eba:	jbe    0x1061f21
 1061ebc:	outs   dx,BYTE PTR ds:[rsi]
 1061ebd:	je     0x1061ebf
 1061ebf:	add    BYTE PTR [rdx],dl
 1061ec1:	add    al,0x52
 1061ec3:	gs jae 0x1061f2b
 1061ec6:	je     0x1061f0d
 1061ec8:	jbe    0x1061f2f
 1061eca:	outs   dx,BYTE PTR ds:[rsi]
 1061ecb:	je     0x1061ecd
 1061ecd:	add    BYTE PTR [rcx],al
 1061ecf:	add    al,0x52
 1061ed1:	gs ins BYTE PTR es:[rdi],dx
 1061ed3:	gs (bad) 
 1061ed5:	jae    0x1061f3c
 1061ed7:	push   rbx
 1061ed8:	gs ins DWORD PTR es:[rdi],dx
 1061eda:	(bad)  
 1061edb:	jo     0x1061f45
 1061edd:	outs   dx,DWORD PTR ds:[rsi]
 1061ede:	jb     0x1061f45
 1061ee0:	add    BYTE PTR [rax],al
 1061ee2:	std    
 1061ee3:	add    edx,DWORD PTR [rdx+0x65]
 1061ee6:	ins    BYTE PTR es:[rdi],dx
 1061ee7:	gs (bad) 
 1061ee9:	jae    0x1061f50
 1061eeb:	rex.WRB jne 0x1061f62
 1061eee:	gs js  0x1061ef1
 1061ef1:	add    BYTE PTR [rax],cl
 1061ef3:	add    eax,0x74696157
 1061ef8:	rex.RX outs dx,DWORD PTR ds:[rsi]
 1061efa:	jb     0x1061f4f
 1061efc:	imul   ebp,DWORD PTR [rsi+0x67],0x624f656c
 1061f03:	push   0x65
 1061f05:	movsxd esi,DWORD PTR [rax+rax*1-0x3d]
 1061f09:	add    edx,DWORD PTR [rdx+0x65]
 1061f0c:	(bad)  
 1061f0d:	imul   r13d,DWORD PTR fs:[rbp+r12*2+0x0],0x53047400
 1061f17:	gs je  0x1061f60
 1061f1a:	imul   ebp,DWORD PTR [rbp+riz*2+0x50],0x746e696f
 1061f22:	gs jb  0x1061f25
 1061f25:	add    ah,ch
 1061f27:	add    BYTE PTR [rbp+rsi*2+0x70],al
 1061f2b:	ins    BYTE PTR es:[rdi],dx
 1061f2c:	imul   esp,DWORD PTR [rbx+0x61],0x61486574
 1061f33:	outs   dx,BYTE PTR ds:[rsi]
 1061f34:	fs ins BYTE PTR es:[rdi],dx
 1061f36:	add    BYTE PTR gs:[rdx+0x2],bh
 1061f3a:	rex.RXB
 1061f3b:	gs je  0x1061f91
 1061f3e:	jns    0x1061fb3
 1061f40:	je     0x1061fa7
 1061f42:	ins    DWORD PTR es:[rdi],dx
 1061f43:	rex.WB outs dx,BYTE PTR ds:[rsi]
 1061f45:	outs   dx,WORD PTR ds:[rsi]
 1061f47:	add    bl,cl
 1061f49:	add    al,0x53
 1061f4b:	jns    0x1061fc0
 1061f4d:	je     0x1061fb4
 1061f4f:	ins    DWORD PTR es:[rdi],dx
 1061f50:	push   rsp
 1061f51:	imul   ebp,DWORD PTR [rbp+0x65],0x69466f54
 1061f58:	ins    BYTE PTR es:[rdi],dx
 1061f59:	gs push rsp
 1061f5b:	imul   ebp,DWORD PTR [rbp+0x65],0x3480000
 1061f62:	rex.WR outs dx,DWORD PTR ds:[rsi]
 1061f64:	movsxd esp,DWORD PTR [rcx+0x6c]
 1061f67:	imul   r13d,DWORD PTR [rbp+r12*2+0x54],0x54656d69
 1061f70:	outs   dx,DWORD PTR ds:[rsi]
 1061f71:	imul   r13d,DWORD PTR [rbp+r12*2+0x54],0x656d69
 1061f7a:	add    BYTE PTR gs:[rbx+0x6f],al
 1061f7e:	outs   dx,BYTE PTR ds:[rsi]
 1061f7f:	outs   dx,BYTE PTR ds:[rsi]
 1061f80:	movsxd esi,DWORD PTR gs:[rsi+rcx*2+0x61]
 1061f85:	ins    DWORD PTR es:[rdi],dx
 1061f86:	gs fs push rax
 1061f89:	imul   esi,DWORD PTR [rax+0x65],0xe50000
 1061f90:	imul   r14d,DWORD PTR [rbx+0x63],0x656e6e6f
 1061f98:	movsxd esi,DWORD PTR [rsi+rcx*2+0x61]
 1061f9c:	ins    DWORD PTR es:[rdi],dx
 1061f9d:	gs fs push rax
 1061fa0:	imul   esi,DWORD PTR [rax+0x65],0x57050900
 1061fa7:	(bad)  
 1061fa8:	imul   esi,DWORD PTR [rsi+rax*2+0x6f],0x6e695372
 1061fb0:	ins    BYTE PTR es:[edi],dx
 1061fb2:	gs rex.WRXB (bad) 
 1061fb5:	push   0x65
 1061fb7:	movsxd esi,DWORD PTR [rbp+rax*2+0x78]
 1061fbb:	add    BYTE PTR [rdi],al
 1061fbd:	add    eax,0x74696157
 1061fc2:	rex.RX outs dx,DWORD PTR ds:[rsi]
 1061fc4:	jb     0x1062013
 1061fc6:	jne    0x1062034
 1061fc8:	je     0x1062033
 1061fca:	jo     0x1062038
 1061fcc:	gs rex.WRXB (bad) 
 1061fcf:	push   0x65
 1061fd1:	movsxd esi,DWORD PTR [rbx+rsi*2+0x45]
 1061fd5:	js     0x1061fd7
 1061fd7:	add    BYTE PTR [rsi+0x65724300],bl
 1061fdd:	(bad)  
 1061fde:	je     0x1062045
 1061fe0:	rex.WRB jne 0x1062057
 1061fe3:	gs js  0x106203d
 1061fe6:	add    BYTE PTR [rax],al
 1061fe8:	test   DWORD PTR [rax],eax
 1061fea:	rex.XB jb 0x1062052
 1061fed:	(bad)  
 1061fee:	je     0x1062055
 1061ff0:	rex.RB jbe 0x1062058
 1061ff3:	outs   dx,BYTE PTR ds:[rsi]
 1061ff4:	je     0x106204d
 1061ff6:	add    BYTE PTR [rax],al
 1061ff8:	scas   al,BYTE PTR es:[rdi]
 1061ff9:	add    BYTE PTR [rbx+0x72],al
 1061ffc:	gs (bad) 
 1061ffe:	je     0x1062065
 1062000:	push   rbx
 1062001:	gs ins DWORD PTR es:[rdi],dx
 1062003:	(bad)  
 1062004:	jo     0x106206e
 1062006:	outs   dx,DWORD PTR ds:[rsi]
 1062007:	jb     0x106206e
 1062009:	push   rdi
 106200a:	add    BYTE PTR [rax],al
 106200c:	ret    
 106200d:	add    BYTE PTR [rbx+0x72],al
 1062010:	gs (bad) 
 1062012:	je     0x1062079
 1062014:	push   rdi
 1062015:	(bad)  
 1062016:	imul   esi,DWORD PTR [rcx+riz*2+0x62],0x6954656c
 106201e:	ins    DWORD PTR es:[rdi],dx
 106201f:	gs jb  0x1062079
 1062022:	add    BYTE PTR [rax],al
 1062024:	mov    edx,0x74655304
 1062029:	push   rdi
 106202a:	(bad)  
 106202b:	imul   esi,DWORD PTR [rcx+riz*2+0x62],0x6954656c
 1062033:	ins    DWORD PTR es:[rdi],dx
 1062034:	gs jb  0x1062037
 1062037:	add    BYTE PTR [rcx+0x3],al
 106203a:	rex.WR outs dx,DWORD PTR ds:[rsi]
 106203c:	(bad)  
 106203d:	imul   r12,QWORD PTR fs:[rdx+0x72],0x57797261
 1062046:	add    BYTE PTR [rax],al
 1062048:	and    eax,DWORD PTR [rcx]
 106204a:	rex.RB js 0x10620bd
 106204d:	(bad)  
 106204e:	outs   dx,BYTE PTR ds:[rsi]
 106204f:	rex.RB outs dx,BYTE PTR fs:[rsi]
 1062052:	jbe    0x10620bd
 1062054:	jb     0x10620c5
 1062056:	outs   dx,BYTE PTR ds:[rsi]
 1062057:	ins    DWORD PTR es:[rdi],dx
 1062058:	outs   dx,BYTE PTR gs:[rsi]
 106205a:	je     0x10620af
 106205c:	je     0x10620d0
 106205e:	imul   ebp,DWORD PTR [rsi+0x67],0x77005773
 1062065:	add    al,BYTE PTR [rdi+0x65]
 1062068:	je     0x10620bd
 106206a:	jns    0x10620df
 106206c:	je     0x10620d3
 106206e:	ins    DWORD PTR es:[rdi],dx
 106206f:	imul   r14d,DWORD PTR [rdx+0x65],0x726f7463
 1062077:	jns    0x10620d0
 1062079:	add    BYTE PTR [rbx+0x4],bl
 106207c:	push   rbx
 106207d:	gs je  0x10620c3
 1062080:	jne    0x10620f4
 1062082:	jb     0x10620e9
 1062084:	outs   dx,BYTE PTR ds:[rsi]
 1062085:	je     0x10620cb
 1062087:	imul   esi,DWORD PTR [rdx+0x65],0x726f7463
 106208e:	jns    0x10620e7
 1062090:	add    BYTE PTR [rax],al
 1062092:	(bad)
 1062095:	gs je  0x10620db
 1062098:	jne    0x106210c
 106209a:	jb     0x1062101
 106209c:	outs   dx,BYTE PTR ds:[rsi]
 106209d:	je     0x10620e3
 106209f:	imul   esi,DWORD PTR [rdx+0x65],0x726f7463
 10620a6:	jns    0x10620ff
 10620a8:	add    BYTE PTR [rax],al
 10620aa:	(bad)  
 10620ab:	add    DWORD PTR [rdi+0x65],eax
 10620ae:	je     0x10620f4
 10620b0:	imul   esi,DWORD PTR [rbx+0x6b],0x65657246
 10620b7:	push   rbx
 10620b8:	jo     0x106211b
 10620ba:	movsxd esp,DWORD PTR [rbp+0x45]
 10620bd:	js     0x1062116
 10620bf:	add    BYTE PTR [rsi],al
 10620c1:	add    al,0x52
 10620c3:	gs ins DWORD PTR es:[rdi],dx
 10620c5:	outs   dx,DWORD PTR ds:[rsi]
 10620c6:	jbe    0x106212d
 10620c8:	imul   r14d,DWORD PTR [rdx+0x65],0x726f7463
 10620d0:	jns    0x1062129
 10620d2:	add    BYTE PTR [rax],al
 10620d4:	add    al,BYTE PTR [rdx]
 10620d6:	rex.RXB
 10620d7:	gs je  0x1062120
 10620da:	jne    0x1062148
 10620dc:	ins    BYTE PTR es:[rdi],dx
 10620dd:	push   rax
 10620de:	(bad)  
 10620df:	je     0x1062149
 10620e1:	rex.WRX (bad) 
 10620e3:	ins    DWORD PTR es:[rdi],dx
 10620e4:	gs push rdi
 10620e6:	add    BYTE PTR [rax],al
 10620e8:	jne    0x10620ea
 10620ea:	rex.XB outs dx,DWORD PTR ds:[rsi]
 10620ec:	jo     0x1062167
 10620ee:	imul   r13d,DWORD PTR [rbp+r12*2+0x57],0x4d036500
 10620f7:	outs   dx,DWORD PTR ds:[rsi]
 10620f8:	jbe    0x106215f
 10620fa:	imul   r13d,DWORD PTR [rbp+r12*2+0x57],0x4300a000
 1062103:	jb     0x106216a
 1062105:	(bad)  
 1062106:	je     0x106216d
 1062108:	rex.WRX (bad) 
 106210a:	ins    DWORD PTR es:[rdi],dx
 106210b:	gs fs push rax
 106210e:	imul   esi,DWORD PTR [rax+0x65],0xac000057
 1062115:	add    al,BYTE PTR [rdi+0x65]
 1062118:	je     0x1062170
 106211a:	gs jb  0x1062190
 106211d:	imul   ebp,DWORD PTR [rdi+0x6e],0x577845
 1062124:	test   DWORD PTR [rsi+rdx*2],0x66697265
 106212b:	jns    0x1062183
 106212d:	gs jb  0x10621a3
 1062130:	imul   ebp,DWORD PTR [rdi+0x6e],0x6f666e49
 1062137:	push   rdi
 1062138:	add    BYTE PTR [rax],al
 106213a:	imul   eax,DWORD PTR [rbx],0x746c754d
 1062140:	imul   eax,DWORD PTR [rdx+0x79],0x6f546574
 1062147:	push   rdi
 1062148:	imul   esp,DWORD PTR [rbp+riz*2+0x43],0x726168
 1062150:	cmp    eax,DWORD PTR [rbx+rdx*2]
 1062153:	gs je  0x1062199
 1062156:	outs   dx,DWORD PTR ds:[rsi]
 1062157:	outs   dx,BYTE PTR ds:[rsi]
 1062158:	jae    0x10621c9
 106215a:	ins    BYTE PTR es:[rdi],dx
 106215b:	gs rex.XB je 0x10621d1
 106215f:	ins    BYTE PTR es:[rdi],dx
 1062160:	rex.W (bad) 
 1062162:	outs   dx,BYTE PTR ds:[rsi]
 1062163:	fs ins BYTE PTR es:[rdi],dx
 1062165:	gs jb  0x1062168
 1062168:	mov    esp,0x74654701
 106216d:	rex.XB outs dx,DWORD PTR ds:[rsi]
 106216f:	outs   dx,BYTE PTR ds:[rsi]
 1062170:	jae    0x10621e1
 1062172:	ins    BYTE PTR es:[rdi],dx
 1062173:	gs push rsp
 1062175:	imul   esi,DWORD PTR [rsp+rbp*2+0x65],0x56000057
 106217d:	add    al,0x53
 106217f:	gs je  0x10621c5
 1062182:	outs   dx,DWORD PTR ds:[rsi]
 1062183:	outs   dx,BYTE PTR ds:[rsi]
 1062184:	jae    0x10621f5
 1062186:	ins    BYTE PTR es:[rdi],dx
 1062187:	gs push rsp
 1062189:	imul   esi,DWORD PTR [rsp+rbp*2+0x65],0x56000057
 1062191:	add    ecx,DWORD PTR [rdi+rbp*2+0x63]
 1062195:	imul   edx,DWORD PTR [rdx+0x65],0x73
 1062199:	outs   dx,DWORD PTR ds:[rsi]
 106219a:	jne    0x106220e
 106219c:	movsxd esp,DWORD PTR [rbp+0x0]
 106219f:	add    BYTE PTR [rdx+0x65704f03],al
 10621a5:	outs   dx,BYTE PTR ds:[rsi]
 10621a6:	push   rax
 10621a7:	jb     0x1062218
 10621a9:	movsxd esp,DWORD PTR [rbp+0x73]
 10621ac:	jae    0x10621ae
 10621ae:	(bad)  
 10621af:	add    al,0x54
 10621b1:	gs jb  0x1062221
 10621b4:	imul   ebp,DWORD PTR [rsi+0x61],0x72506574
 10621bb:	outs   dx,DWORD PTR ds:[rsi]
 10621bc:	movsxd esp,DWORD PTR [rbp+0x73]
 10621bf:	jae    0x10621c1
 10621c1:	add    BYTE PTR [rax+0x74655304],al
 10621c7:	rex.WR (bad) 
 10621c9:	jae    0x106223f
 10621cb:	rex.RB jb 0x1062240
 10621ce:	outs   dx,DWORD PTR ds:[rsi]
 10621cf:	jb     0x10621d1
 10621d1:	add    BYTE PTR [rbp+0x2],ah
 10621d4:	rex.RXB
 10621d5:	gs je  0x1062229
 10621d8:	jne    0x106223f
 10621da:	jne    0x1062241
 10621dc:	rex.XB outs dx,DWORD PTR fs:[rsi]
 10621df:	ins    DWORD PTR es:[rdi],dx
 10621e0:	jo     0x106224e
 10621e2:	gs je  0x106224e
 10621e5:	outs   dx,DWORD PTR ds:[rsi]
 10621e6:	outs   dx,BYTE PTR ds:[rsi]
 10621e7:	push   rbx
 10621e8:	je     0x106224b
 10621ea:	je     0x1062261
 10621ec:	jae    0x10621ee
 10621ee:	add    ecx,DWORD PTR [r15+r13*2+0x61]
 10621f3:	fs push rdx
 10621f5:	gs jae 0x1062267
 10621f8:	jne    0x106226c
 10621fa:	movsxd esp,DWORD PTR [rbp+0x0]
 10621fd:	add    BYTE PTR [rdi+0x7a695304],bh
 1062203:	outs   dx,DWORD PTR gs:[rsi]
 1062205:	push   dx
 1062207:	gs jae 0x1062279
 106220a:	jne    0x106227e
 106220c:	movsxd esp,DWORD PTR [rbp+0x0]
 106220f:	add    BYTE PTR [rax+0x65724300],ch
 1062215:	(bad)  
 1062216:	je     0x106227d
 1062218:	push   rax
 1062219:	jb     0x106228a
 106221b:	movsxd esp,DWORD PTR [rbp+0x73]
 106221e:	jae    0x1062277
 1062220:	add    BYTE PTR [rax],al
 1062222:	push   rsp
 1062223:	add    DWORD PTR [rsi+0x69],eax
 1062226:	outs   dx,BYTE PTR ds:[rsi]
 1062227:	fs push rdx
 1062229:	gs jae 0x106229b
 106222c:	jne    0x10622a0
 106222e:	movsxd esp,DWORD PTR [rbp+0x57]
 1062231:	add    ch,dl
 1062233:	add    cl,BYTE PTR [rax+0x65]
 1062236:	(bad)  
 1062237:	jo     0x106227c
 1062239:	jb     0x10622a0
 106223b:	(bad)  
 106223c:	je     0x10622a3
 106223e:	add    BYTE PTR [rax],al
 1062240:	(bad)  
 1062241:	add    cl,BYTE PTR [rax+0x65]
 1062244:	(bad)  
 1062245:	jo     0x106228b
 1062247:	gs jae 0x10622be
 106224a:	jb     0x10622bb
 106224c:	jns    0x106224e
 106224e:	(bad)  
 106224f:	add    al,BYTE PTR [rdi+0x65]
 1062252:	je     0x10622a3
 1062254:	jbe    0x10622bb
 1062256:	jb     0x10622c4
 1062258:	(bad)  
 1062259:	jo     0x10622cb
 106225b:	gs fs push rdx
 106225e:	gs jae 0x10622d6
 1062261:	ins    BYTE PTR es:[rdi],dx
 1062262:	je     0x1062264
 1062264:	rex add ecx,DWORD PTR [rdi+rbp*2+0x61]
 1062269:	imul   r12,QWORD PTR fs:[rdx+0x72],0x45797261
 1062272:	js     0x10622cb
 1062274:	add    BYTE PTR [rax],al
 1062276:	rex.WXB
 1062277:	rex.RB push r10
 1062279:	rex.WRX
 106227a:	rex.RB
 106227b:	xor    r14,QWORD PTR [rdx]
 106227e:	cs fs ins BYTE PTR es:[rdi],dx
 1062281:	ins    BYTE PTR es:[rdi],dx
 1062282:	add    BYTE PTR [rax],al
 1062284:	ins    DWORD PTR es:[rdi],dx
 1062285:	movsxd si,DWORD PTR [rcx]
 1062288:	xor    BYTE PTR [rax],dh
 106228a:	jne    0x10622ba
 106228c:	fs ins BYTE PTR es:[rdi],dx
 106228e:	ins    BYTE PTR es:[rdi],dx
 106228f:	add    BYTE PTR [rsi],bl
 1062291:	(bad)  
 1062292:	ja     0x10622f7
 1062294:	jae    0x1062304
 1062296:	movsxd esi,DWORD PTR [rax+0x79]
 1062299:	pop    rdi
 106229a:	jae    0x106229c
 106229c:	movsxd eax,DWORD PTR [rip+0x65657266]        # 0x666b9508
 10622a2:	add    BYTE PTR [rax],al
 10622a4:	sub    BYTE PTR [rcx],al
 10622a6:	pop    rdi
 10622a7:	pop    rdi
 10622a8:	rex.XB js 0x1062323
 10622ab:	rex.RX jb 0x106230f
 10622ae:	ins    DWORD PTR es:[rdi],dx
 10622af:	gs rex.W (bad) 
 10622b2:	outs   dx,BYTE PTR ds:[rsi]
 10622b3:	fs ins BYTE PTR es:[rdi],dx
 10622b5:	gs jb  0x10622eb
 10622b8:	add    BYTE PTR [rax],al
 10622ba:	loop   0x10622c1
 10622bc:	jae    0x1062332
 10622be:	jb     0x106232e
 10622c0:	movsxd esp,DWORD PTR [rcx+0x74]
 10622c3:	pop    rdi
 10622c4:	jae    0x10622c6
 10622c6:	and    eax,0x73637706
 10622cb:	jae    0x1062341
 10622cd:	jb     0x10622cf
 10622cf:	add    BYTE PTR [rsi+0x63775f04],ah
 10622d5:	jae    0x1062340
 10622d7:	movsxd ebp,DWORD PTR [rbp+0x70]
 10622da:	add    BYTE PTR [rax],al
 10622dc:	rol    BYTE PTR [rip+0x6f6d6572],0x76        # 0x70738855
 10622e3:	add    BYTE PTR gs:[rax],al
 10622e6:	jrcxz  0x10622eb
 10622e8:	pop    rdi
 10622e9:	jae    0x1062359
 10622eb:	jo     0x106235f
 10622ed:	imul   ebp,DWORD PTR [rsi+0x74],0x735f66
 10622f4:	test   DWORD PTR [rcx],0x7272655f
 10622fa:	outs   dx,BYTE PTR ds:[rsi]
 10622fb:	outs   dx,DWORD PTR ds:[rsi]
 10622fc:	add    BYTE PTR [rax],al
 10622fe:	ret    0x5f01
 1062301:	movsxd ebp,DWORD PTR [rdi+rbp*2+0x73]
 1062305:	add    BYTE PTR gs:[rax],al
 1062308:	inc    DWORD PTR [rdx]
 106230a:	pop    rdi
 106230b:	ins    BYTE PTR es:[rdi],dx
 106230c:	jae    0x1062373
 106230e:	imul   eax,DWORD PTR gs:[rax],0x0
 1062312:	mov    bl,0x3
 1062314:	pop    rdi
 1062315:	jb     0x106237c
 1062317:	(bad)  
 1062318:	fs add ch,bh
 106231b:	add    al,0x5f
 106231d:	ja     0x1062391
 106231f:	imul   esi,DWORD PTR [rbp+riz*2+0x0],0x3f00e500
 1062327:	pop    rdi
 1062328:	outs   dx,DWORD PTR ds:[rsi]
 1062329:	jo     0x1062390
 106232b:	outs   dx,BYTE PTR ds:[rsi]
 106232c:	rex
 106232d:	rex pop rcx
 106232f:	rex.B
 1062330:	rex.W push rax
 1062332:	rex.RB
 1062333:	rex.X
 1062334:	rex.R
 1062335:	rex.W
 1062336:	rex.W
 1062337:	rex pop rdx
 1062339:	add    BYTE PTR [rsi],cl
 106233b:	add    DWORD PTR [rdi+0x43],ebx
 106233e:	js     0x10623b8
 1062340:	push   rsp
 1062341:	push   0x45776f72
 1062346:	js     0x10623ab
 1062348:	gs jo  0x10623bf
 106234b:	imul   ebp,DWORD PTR [rdi+0x6e],0x5ad0000
 1062352:	ins    DWORD PTR es:[rdi],dx
 1062353:	gs ins DWORD PTR es:[rdi],dx
 1062355:	jae    0x10623bc
 1062357:	je     0x1062359
 1062359:	add    BYTE PTR [rsi+0x6c616d05],bl
 106235f:	ins    BYTE PTR es:[rdi],dx
 1062360:	outs   dx,DWORD PTR ds:[rsi]
 1062361:	movsxd eax,DWORD PTR [rax]
 1062363:	add    BYTE PTR [rcx+0x6d656d05],ch
 1062369:	movsxd esi,DWORD PTR [rax+0x79]
 106236c:	add    BYTE PTR [rax],al
 106236e:	test   eax,0x75705f03
 1062373:	jb     0x10623da
 1062375:	movsxd esp,DWORD PTR [rcx+0x6c]
 1062378:	ins    BYTE PTR es:[rdi],dx
 1062379:	add    BYTE PTR [rsi],bl
 106237b:	add    eax,0x6f74775f
 1062380:	imul   eax,DWORD PTR [rax],0x775f0522
 1062386:	je     0x10623f7
 1062388:	ins    BYTE PTR es:[rdi],dx
 1062389:	add    bl,ch
 106238b:	add    ebx,DWORD PTR [rdi+0x73]
 106238e:	outs   dx,BYTE PTR ds:[rsi]
 106238f:	ja     0x1062401
 1062391:	jb     0x10623fc
 1062393:	outs   dx,BYTE PTR ds:[rsi]
 1062394:	je     0x10623fc
 1062396:	pop    rdi
 1062397:	jae    0x1062399
 1062399:	add    BYTE PTR [rcx],dl
 106239b:	(bad)  
 106239c:	ja     0x1062401
 106239e:	jae    0x1062403
 10623a0:	(bad)  
 10623a1:	je     0x1062402
 10623a3:	jae    0x10623a5
 10623a5:	add    BYTE PTR [rsi],dl
 10623a7:	(bad)  
 10623a8:	ja     0x106240d
 10623aa:	jae    0x106240f
 10623ac:	jo     0x1062427
 10623ae:	pop    rdi
 10623af:	jae    0x10623b1
 10623b1:	add    BYTE PTR [rcx+rax*1+0x5f],dl
 10623b5:	pop    rdi
 10623b6:	imul   ebp,DWORD PTR [rdi+0x62],0x6e75665f
 10623bd:	movsxd eax,DWORD PTR [rax]
 10623bf:	add    BYTE PTR [rbx],dh
 10623c1:	(bad)  
 10623c2:	ja     0x1062434
 10623c4:	jb     0x106242f
 10623c6:	outs   dx,BYTE PTR ds:[rsi]
 10623c7:	je     0x106242f
 10623c9:	add    BYTE PTR [rdi+0x5],cl
 10623cc:	data16 data16 ins BYTE PTR es:[rdi],dx
 10623cf:	jne    0x1062444
 10623d1:	push   0x58c0000
 10623d6:	imul   esi,DWORD PTR [rbx+0x77],0x65776f6c
 10623dd:	jb     0x10623df
 10623df:	add    BYTE PTR [rdx+0x77736905],cl
 10623e5:	imul   esp,DWORD PTR fs:[rdi+0x69],0x74
 10623ed:	(bad)  
 10623ee:	je     0x106245f
 10623f0:	ja     0x1062467
 10623f2:	jo     0x1062464
 10623f4:	gs jb  0x10623f7
 10623f7:	add    BYTE PTR [rdx+0x6d656d05],ch
 10623fd:	movsxd esi,DWORD PTR [rax+0x79]
 1062400:	pop    rdi
 1062401:	jae    0x1062403
 1062403:	add    dl,ch
 1062405:	add    eax,0x73727473
 106240a:	je     0x106247e
 106240c:	add    BYTE PTR [rax],al
 106240e:	sbb    eax,DWORD PTR [rsi]
 1062410:	ja     0x1062475
 1062412:	jae    0x1062482
 1062414:	movsxd esp,DWORD PTR [rcx+0x74]
 1062417:	pop    rdi
 1062418:	jae    0x106241a
 106241a:	outs   dx,DWORD PTR ds:[rsi]
 106241b:	add    bl,BYTE PTR [rdi+0x67]
 106241e:	gs je  0x1062498
 1062421:	movsxd ebp,DWORD PTR [rax+0x0]
 1062424:	jno    0x1062428
 1062426:	pop    rdi
 1062427:	addr32 gs je 0x10624a2
 106242b:	movsxd ebp,DWORD PTR [rax+0x65]
 106242e:	add    BYTE PTR [rax],al
 1062430:	test   DWORD PTR [rdi+rbx*2],eax
 1062433:	jbe    0x10624a8
 1062435:	outs   dx,BYTE PTR ds:[rsi]
 1062436:	ja     0x10624a8
 1062438:	jb     0x10624a3
 106243a:	outs   dx,BYTE PTR ds:[rsi]
 106243b:	je     0x10624a3
 106243d:	add    BYTE PTR [rsi],dh
 106243f:	(bad)  
 1062440:	ja     0x10624b5
 1062442:	movsxd esp,DWORD PTR [rcx+0x6e]
 1062445:	pop    di
 1062447:	jae    0x1062449
 1062449:	add    BYTE PTR [rsi+rax*1],ch
 106244c:	ja     0x10624b1
 106244e:	jae    0x10624c4
 1062450:	outs   dx,DWORD PTR ds:[rsi]
 1062451:	jne    0x10624bf
 1062453:	add    ah,dh
 1062455:	add    bl,BYTE PTR [rdi+0x6c]
 1062458:	outs   dx,DWORD PTR ds:[rsi]
 1062459:	movsxd esp,DWORD PTR [rcx+0x6c]
 106245c:	je     0x10624c7
 106245e:	ins    DWORD PTR es:[rdi],dx
 106245f:	gs ss xor al,0x0
 1062463:	add    BYTE PTR [rdi],bh
 1062465:	add    al,0x5f
 1062467:	je     0x10624d2
 1062469:	ins    DWORD PTR es:[rdi],dx
 106246a:	gs ss xor al,0x0
 106246e:	lods   eax,DWORD PTR ds:[rsi]
 106246f:	add    DWORD PTR [rdi+0x62],ebx
 1062472:	imul   ebp,DWORD PTR gs:[esi+0x74],0x61657268
 106247b:	fs gs js 0x106247f
 106247f:	add    BYTE PTR [rsi],bl
 1062481:	add    DWORD PTR [rdi+0x5f],ebx
 1062484:	rex.XB pop r15
 1062486:	jae    0x10624f8
 1062488:	movsxd ebp,DWORD PTR gs:[rcx+0x66]
 106248c:	imul   esp,DWORD PTR [rbx+0x5f],0x646e6168
 1062493:	ins    BYTE PTR es:[rdi],dx
 1062494:	gs jb  0x1062497
 1062497:	add    cl,dh
 1062499:	add    bl,BYTE PTR [rdi+0x6c]
 106249c:	outs   dx,DWORD PTR ds:[rsi]
 106249d:	movsxd esp,DWORD PTR [rcx+0x6c]
 10624a0:	pop    rdi
 10624a1:	jne    0x1062511
 10624a3:	ja     0x106250e
 10624a5:	outs   dx,BYTE PTR ds:[rsi]
 10624a6:	add    BYTE PTR fs:[rax+0x63775f04],dh
 10624ad:	jae    0x106251d
 10624af:	imul   esp,DWORD PTR [rbx+0x6d],0x2f50070
 10624b6:	pop    rdi
 10624b7:	ins    BYTE PTR es:[rdi],dx
 10624b8:	outs   dx,DWORD PTR ds:[rsi]
 10624b9:	movsxd esp,DWORD PTR [rcx+0x6c]
 10624bc:	je     0x1062527
 10624be:	ins    DWORD PTR es:[rdi],dx
 10624bf:	gs ss xor al,0x5f
 10624c3:	jae    0x10624c5
 10624c5:	add    BYTE PTR [rcx+0x6b6d5f03],bl
 10624cb:	je     0x1062536
 10624cd:	ins    DWORD PTR es:[rdi],dx
 10624ce:	gs ss xor al,0x0
 10624d2:	sahf   
 10624d3:	add    DWORD PTR [rdi+0x61],ebx
 10624d6:	ins    DWORD PTR es:[rdi],dx
 10624d7:	jae    0x1062540
 10624d9:	pop    rdi
 10624da:	gs js  0x1062546
 10624dd:	je     0x10624df
 10624df:	add    BYTE PTR [rax+0x775f5f01],dl
 10624e5:	addr32 gs je 0x1062556
 10624e9:	(bad)  
 10624ea:	imul   ebp,DWORD PTR [rsi+0x61],0x736772
 10624f1:	add    BYTE PTR [rdx],bl
 10624f3:	add    DWORD PTR [rdi+0x58],ebx
 10624f6:	movsxd esi,DWORD PTR [rax+0x74]
 10624f9:	imul   r13d,DWORD PTR [rsp+r14*2+0x65],0x2000072
 1062502:	pop    rdi
 1062503:	gs js  0x106256f
 1062506:	je     0x1062508
 1062508:	mov    ch,0x1
 106250a:	pop    rdi
 106250b:	movsxd esp,DWORD PTR [rbp+0x78]
 106250e:	imul   esi,DWORD PTR [rax+rax*1+0x0],0x78650548
 1062516:	imul   esi,DWORD PTR [rax+rax*1+0x0],0x5f5f0191
 106251e:	ja     0x1062589
 1062520:	outs   dx,BYTE PTR ds:[rsi]
 1062521:	imul   esi,DWORD PTR [rbp+riz*2+0x6e],0x86000076
 1062529:	add    bl,BYTE PTR [rdi+0x69]
 106252c:	outs   dx,BYTE PTR ds:[rsi]
 106252d:	imul   esi,DWORD PTR [rsp+rsi*2+0x65],0x87006d72
 1062535:	add    bl,BYTE PTR [rdi+0x69]
 1062538:	outs   dx,BYTE PTR ds:[rsi]
 1062539:	imul   esi,DWORD PTR [rsp+rsi*2+0x65],0x655f6d72
 1062541:	add    ch,al
 1062543:	add    DWORD PTR [rdi+0x63],ebx
 1062546:	outs   dx,DWORD PTR ds:[rsi]
 1062547:	outs   dx,BYTE PTR ds:[rsi]
 1062548:	imul   sp,WORD PTR [rdi+0x74],0x7268
 106254e:	gs (bad) 
 1062550:	fs ins BYTE PTR es:[rdi],dx
 1062552:	outs   dx,DWORD PTR ds:[rsi]
 1062553:	movsxd esp,DWORD PTR [rcx+0x6c]
 1062556:	add    BYTE PTR gs:[rcx+rax*1+0x5f],bh
 106255b:	pop    rdi
 106255c:	jae    0x10625c3
 106255e:	je     0x10625d5
 1062560:	jae    0x10625c7
 1062562:	jb     0x10625d1
 1062564:	(bad)  
 1062565:	je     0x10625cf
 1062567:	gs jb  0x10625dc
 106256a:	add    BYTE PTR [rax],al
 106256c:	(bad)
 1062570:	outs   dx,DWORD PTR ds:[rsi]
 1062571:	ins    DWORD PTR es:[rdi],dx
 1062572:	ins    DWORD PTR es:[rdi],dx
 1062573:	outs   dx,DWORD PTR ds:[rsi]
 1062574:	fs add BYTE PTR gs:[rax],al
 1062578:	sbb    al,0x2
 106257a:	pop    rdi
 106257b:	ins    WORD PTR es:[rdi],dx
 106257d:	outs   dx,DWORD PTR ds:[rsi]
 106257e:	fs add BYTE PTR gs:[rax],al
 1062582:	jns    0x1062585
 1062584:	pop    rdi
 1062585:	pop    rdi
 1062586:	jae    0x10625ed
 1062588:	je     0x10625e9
 106258a:	(bad)  
 106258b:	jo     0x10625fd
 106258d:	pop    rdi
 106258e:	je     0x1062609
 1062590:	jo     0x10625f7
 1062592:	add    BYTE PTR [rax],al
 1062594:	rex.RX add DWORD PTR [rdi+0x5f],r11d
 1062598:	movsxd esi,DWORD PTR [rdx+0x74]
 106259b:	pop    rdi
 106259c:	fs gs (bad) 
 106259f:	jne    0x1062608
 10625a1:	addr32 gs jb 0x1062604
 10625a5:	push   0x6b6f6f
 10625aa:	rex.WRB push r11
 10625ac:	push   rsi
 10625ad:	rex.XB push r10
 10625af:	xor    DWORD PTR [rax],esi
 10625b1:	xor    BYTE PTR [rsi],ch
 10625b3:	fs ins BYTE PTR es:[rdi],dx
 10625b5:	ins    BYTE PTR es:[rdi],dx
 10625b6:	add    BYTE PTR [rax],al
 10625b8:	add    BYTE PTR [rcx],al
 10625ba:	(bad)  
 10625bb:	je     0x1062622
 10625bd:	jb     0x106262c
 10625bf:	imul   ebp,DWORD PTR [rsi+0x61],0x40406574
 10625c6:	pop    rcx
 10625c7:	pop    r8
 10625c9:	pop    rax
 10625ca:	pop    rdx
 10625cb:	add    BYTE PTR [rbx+0x4],bl
 10625ce:	pop    rdi
 10625cf:	jne    0x106263f
 10625d1:	ins    BYTE PTR es:[rdi],dx
 10625d2:	outs   dx,DWORD PTR ds:[rsi]
 10625d3:	movsxd ebp,DWORD PTR [rbx+0x0]
 10625d6:	add    QWORD PTR [rdi+0x5f],rbx
 10625da:	fs ins BYTE PTR es:[rdi],dx
 10625dc:	ins    BYTE PTR es:[rdi],dx
 10625dd:	outs   dx,DWORD PTR ds:[rsi]
 10625de:	outs   dx,BYTE PTR ds:[rsi]
 10625df:	gs js  0x106264b
 10625e2:	je     0x10625e4
 10625e4:	test   BYTE PTR [rdx],0x5f
 10625e7:	ins    BYTE PTR es:[rdi],dx
 10625e8:	outs   dx,DWORD PTR ds:[rsi]
 10625e9:	movsxd ebp,DWORD PTR [rbx+0x0]
 10625ec:	popf   
 10625ed:	add    ebx,DWORD PTR [rdi+0x6f]
 10625f0:	outs   dx,BYTE PTR ds:[rsi]
 10625f1:	gs js  0x106265d
 10625f4:	je     0x10625f6
 10625f6:	out    dx,al
 10625f7:	add    BYTE PTR [rdi],bh
 10625f9:	pop    rdi
 10625fa:	je     0x1062675
 10625fc:	jo     0x1062663
 10625fe:	pop    rdi
 10625ff:	imul   ebp,DWORD PTR [rsi+0x66],0x74645f6f
 1062606:	outs   dx,DWORD PTR ds:[rsi]
 1062607:	jb     0x1062668
 1062609:	imul   ebp,DWORD PTR [rsi+0x74],0x616e7265
 1062610:	ins    BYTE PTR es:[rdi],dx
 1062611:	pop    rdi
 1062612:	ins    DWORD PTR es:[rdi],dx
 1062613:	gs je  0x106267e
 1062616:	outs   dx,DWORD PTR ds:[rsi]
 1062617:	fs rex je 0x1062694
 106261b:	jo     0x1062682
 106261d:	pop    rdi
 106261e:	imul   ebp,DWORD PTR [rsi+0x66],0x5140406f
 1062625:	rex.RB
 1062626:	rex.B
 1062627:	pop    r8
 1062629:	pop    rax
 106262a:	pop    rdx
 106262b:	add    BYTE PTR [rip+0x74654700],al        # 0x756b6d31
 1062631:	imul   r13d,DWORD PTR [rbp+r12*2+0x56],0x69737265
 106263a:	outs   dx,DWORD PTR ds:[rsi]
 106263b:	outs   dx,BYTE PTR ds:[rsi]
 106263c:	rex.WB outs dx,BYTE PTR ds:[rsi]
 106263e:	outs   dx,WORD PTR ds:[rsi]
 1062640:	push   rbx
 1062641:	imul   edi,DWORD PTR [rdx+0x65],0x60057
 1062648:	rex.RXB
 1062649:	gs je  0x1062692
 106264c:	imul   ebp,DWORD PTR [rbp+riz*2+0x56],0x69737265
 1062654:	outs   dx,DWORD PTR ds:[rsi]
 1062655:	outs   dx,BYTE PTR ds:[rsi]
 1062656:	rex.WB outs dx,BYTE PTR ds:[rsi]
 1062658:	outs   dx,WORD PTR ds:[rsi]
 106265a:	push   rdi
 106265b:	add    BYTE PTR [rsi],cl
 106265d:	add    BYTE PTR [rsi+0x65],dl
 1062660:	jb     0x10626b3
 1062662:	jne    0x10626c9
 1062664:	jb     0x10626df
 1062666:	push   rsi
 1062667:	(bad)  
 1062668:	ins    BYTE PTR es:[rdi],dx
 1062669:	jne    0x10626d0
 106266b:	push   rdi
 106266c:	add    BYTE PTR [rax],al
 106266e:	push   rsi
 106266f:	rex.RB push r10
 1062671:	push   rbx
 1062672:	rex.WB
 1062673:	rex.WRXB
 1062674:	rex.WRX
 1062675:	cs fs ins BYTE PTR es:[rdi],dx
 1062678:	ins    BYTE PTR es:[rdi],dx
 1062679:	add    BYTE PTR [rax+0x0],bh
 106267c:	rex.WRXB jo 0x10626e4
 106267f:	outs   dx,BYTE PTR ds:[rsi]
 1062680:	rex.XB ins BYTE PTR es:[rdi],dx
 1062682:	jne    0x10626f7
 1062684:	je     0x10626eb
 1062686:	jb     0x1062688
 1062688:	(bad)  
 1062689:	add    BYTE PTR [rbx+0x6c],al
 106268c:	outs   dx,DWORD PTR ds:[rsi]
 106268d:	jae    0x10626f4
 106268f:	rex.XB ins BYTE PTR es:[rdi],dx
 1062691:	jne    0x1062706
 1062693:	je     0x10626fa
 1062695:	jb     0x1062697
 1062697:	add    BYTE PTR [rcx],ch
 1062699:	add    BYTE PTR [rbx+0x6c],al
 106269c:	jne    0x1062711
 106269e:	je     0x1062705
 10626a0:	jb     0x10626f1
 10626a2:	jo     0x1062709
 10626a4:	outs   dx,BYTE PTR ds:[rsi]
 10626a5:	rex.RB outs dx,BYTE PTR ds:[rsi]
 10626a7:	jne    0x1062716
 10626a9:	add    BYTE PTR [rcx],dl
 10626ab:	add    BYTE PTR [rbx+0x6c],al
 10626ae:	jne    0x1062723
 10626b0:	je     0x1062717
 10626b2:	jb     0x10626f9
 10626b4:	outs   dx,BYTE PTR ds:[rsi]
 10626b5:	jne    0x1062724
 10626b7:	add    BYTE PTR [rsi],cl
 10626b9:	add    BYTE PTR [rbx+0x6c],al
 10626bc:	jne    0x1062731
 10626be:	je     0x1062725
 10626c0:	jb     0x1062705
 10626c2:	ins    BYTE PTR es:[rdi],dx
 10626c3:	outs   dx,DWORD PTR ds:[rsi]
 10626c4:	jae    0x106272b
 10626c6:	rex.RB outs dx,BYTE PTR ds:[rsi]
 10626c8:	jne    0x1062737
 10626ca:	add    BYTE PTR [rax],al
 10626cc:	(bad)  
 10626cd:	add    BYTE PTR [rdi+0x70],cl
 10626d0:	outs   dx,BYTE PTR gs:[rsi]
 10626d2:	rex.XB ins BYTE PTR es:[rdi],dx
 10626d4:	jne    0x1062749
 10626d6:	je     0x106273d
 10626d8:	jb     0x106272c
 10626da:	gs jae 0x106274c
 10626dd:	jne    0x1062751
 10626df:	movsxd esp,DWORD PTR [rbp+0x0]
 10626e2:	or     eax,0x6f6c4300
 10626e7:	jae    0x106274e
 10626e9:	rex.XB ins BYTE PTR es:[rdi],dx
 10626eb:	jne    0x1062760
 10626ed:	je     0x1062754
 10626ef:	jb     0x1062743
 10626f1:	gs jae 0x1062763
 10626f4:	jne    0x1062768
 10626f6:	movsxd esp,DWORD PTR [rbp+0x0]
 10626f9:	add    BYTE PTR [rax+0x0],al
 10626fc:	rex.XB ins BYTE PTR es:[rdi],dx
 10626fe:	jne    0x1062773
 1062700:	je     0x1062767
 1062702:	jb     0x1062756
 1062704:	gs jae 0x1062776
 1062707:	jne    0x106277b
 1062709:	movsxd esp,DWORD PTR [rbp+0x43]
 106270c:	outs   dx,DWORD PTR ds:[rsi]
 106270d:	outs   dx,BYTE PTR ds:[rsi]
 106270e:	je     0x1062782
 1062710:	outs   dx,DWORD PTR ds:[rsi]
 1062711:	ins    BYTE PTR es:[rdi],dx
 1062712:	add    BYTE PTR [rax],al
 1062714:	jno    0x1062716
 1062716:	rex.RXB
 1062717:	gs je  0x1062768
 106271a:	outs   dx,DWORD PTR ds:[rsi]
 106271b:	fs gs rex.XB ins BYTE PTR es:[rdi],dx
 106271f:	jne    0x1062794
 1062721:	je     0x1062788
 1062723:	jb     0x1062778
 1062725:	je     0x1062788
 1062727:	je     0x106278e
 1062729:	add    BYTE PTR [rbx+0x4c],al
 106272c:	push   rbp
 106272d:	push   rbx
 106272e:	push   r8
 1062730:	rex.WB
 1062731:	cs fs ins BYTE PTR es:[rdi],dx
 1062734:	ins    BYTE PTR es:[rdi],dx
 1062735:	add    BYTE PTR [rdx],bl
 1062737:	add    BYTE PTR [rdx+0x65],dl
 106273a:	jae    0x1062791
 106273c:	je     0x10627a7
 106273e:	ins    BYTE PTR es:[rdi],dx
 106273f:	rex.RX imul r13d,DWORD PTR [rsi+0x64],0x72507a53
 1062747:	outs   dx,DWORD PTR ds:[rsi]
 1062748:	jo     0x10627af
 106274a:	jb     0x10627c0
 106274c:	jns    0x106274e
 106274e:	push   rdx
 106274f:	rex.RB push r11
 1062751:	push   rbp
 1062752:	push   rsp
 1062753:	rex.WB
 1062754:	rex.WR push rbx
 1062756:	cs fs ins BYTE PTR es:[rdi],dx
 1062759:	ins    BYTE PTR es:[rdi],dx
 106275a:	add    BYTE PTR [rax],al
 106275c:	cmp    BYTE PTR [rax],al
 106275e:	push   rdi
 106275f:	rex.WRX
 1062760:	gs je  0x10627aa
 1062763:	gs je  0x10627bb
 1062766:	outs   dx,BYTE PTR ds:[rsi]
 1062767:	imul   esi,DWORD PTR [rsi+0x65],0x6c617372
 106276e:	rex.WRX (bad) 
 1062770:	ins    DWORD PTR es:[rdi],dx
 1062771:	gs push rdi
 1062773:	add    BYTE PTR [rbp+0x50],cl
 1062776:	push   rdx
 1062777:	cs fs ins BYTE PTR es:[rdi],dx
 106277a:	ins    BYTE PTR es:[rdi],dx
 106277b:	add    BYTE PTR [rsi],al
 106277d:	add    BYTE PTR [rbp+0x6e],al
 1062780:	jne    0x10627ef
 1062782:	push   rax
 1062783:	jb     0x10627f4
 1062785:	movsxd esp,DWORD PTR [rbp+0x73]
 1062788:	jae    0x10627ef
 106278a:	jae    0x106278c
 106278c:	push   rax
 106278d:	push   rbx
 106278e:	push   r8
 1062790:	rex.WB
 1062791:	cs rex.R
 1062793:	rex.WR
 1062794:	rex.WR add BYTE PTR [rbx+0x6e655302],r8b
 106279b:	fs rex.WRB
 106279d:	gs jae 0x1062813
 10627a0:	(bad)  
 10627a1:	addr32 gs push rsp
 10627a4:	imul   ebp,DWORD PTR [rbp+0x65],0x5774756f
 10627ab:	add    dl,dh
 10627ad:	add    BYTE PTR [rbp+0x6e],al
 10627b0:	jne    0x106281f
 10627b2:	push   rdi
 10627b3:	imul   ebp,DWORD PTR [rsi+0x64],0x73776f
 10627ba:	test   eax,0x74654701
 10627bf:	push   rdi
 10627c0:	imul   ebp,DWORD PTR [rsi+0x64],0x6854776f
 10627c7:	jb     0x106282e
 10627c9:	(bad)  
 10627ca:	fs push rax
 10627cc:	jb     0x106283d
 10627ce:	movsxd esp,DWORD PTR [rbp+0x73]
 10627d1:	jae    0x106281c
 10627d3:	add    BYTE PTR fs:[rax],al
 10627d6:	push   rbp
 10627d7:	push   rbx
 10627d8:	rex.RB push r10
 10627da:	xor    esi,DWORD PTR [rdx]
 10627dc:	cs fs ins BYTE PTR es:[rdi],dx
 10627df:	ins    BYTE PTR es:[rdi],dx
 10627e0:	add    BYTE PTR [rax],al
 10627e2:	(bad)  
 10627e3:	add    BYTE PTR [rbx+0x6f],al
 10627e6:	ins    DWORD PTR es:[rdi],dx
 10627e7:	ins    DWORD PTR es:[rdi],dx
 10627e8:	(bad)  
 10627e9:	outs   dx,BYTE PTR ds:[rsi]
 10627ea:	imul   r13,QWORD PTR fs:[rsi+0x65],0x72416f54
 10627f3:	addr32 jbe 0x106284d
 10627f6:	add    BYTE PTR [rax],al
 10627f8:	ret    
 10627f9:	add    BYTE PTR [rbx+0x48],dl
 10627fc:	rex.RXB
 10627fd:	gs je  0x1062846
 1062800:	outs   dx,DWORD PTR ds:[rsi]
 1062801:	ins    BYTE PTR es:[rdi],dx
 1062802:	fs gs jb 0x1062856
 1062806:	(bad)  
 1062807:	je     0x1062871
 1062809:	push   rdi
 106280a:	add    BYTE PTR [rax],al
 106280c:	sub    eax,0x6e694600
 1062811:	fs rex.RB js 0x106287a
 1062815:	movsxd esi,DWORD PTR [rbp+0x74]
 1062818:	(bad)  
 1062819:	(bad)  
 106281a:	ins    BYTE PTR es:[rdi],dx
 106281b:	gs push rdi
 106281d:	add    BYTE PTR [rbx+0x48],dl
 1062820:	rex.RB
 1062821:	rex.WR
 1062822:	xor    r14,QWORD PTR [rdx]
 1062825:	cs fs ins BYTE PTR es:[rdi],dx
 1062828:	ins    BYTE PTR es:[rdi],dx
 1062829:	add    BYTE PTR [rdx+0x0],al
 106282c:	rex.XB outs dx,DWORD PTR ds:[rsi]
 106282e:	rex.WB outs dx,BYTE PTR ds:[rsi]
 1062830:	imul   esi,DWORD PTR [rcx+rbp*2+0x61],0x657a696c
 1062838:	add    BYTE PTR [rax],al
 106283a:	jo     0x106283c
 106283c:	rex.XB outs dx,DWORD PTR ds:[rsi]
 106283e:	push   rbp
 106283f:	outs   dx,BYTE PTR ds:[rsi]
 1062840:	imul   ebp,DWORD PTR [rsi+0x69],0x6c616974
 1062847:	imul   edi,DWORD PTR [rdx+0x65],0x140000
 106284e:	rex.XB outs dx,DWORD PTR ds:[rsi]
 1062850:	rex.XB jb 0x10628b8
 1062853:	(bad)  
 1062854:	je     0x10628bb
 1062856:	rex.WB outs dx,BYTE PTR ds:[rsi]
 1062858:	jae    0x10628ce
 106285a:	(bad)  
 106285b:	outs   dx,BYTE PTR ds:[rsi]
 106285c:	movsxd esp,DWORD PTR [rbp+0x0]
 106285f:	add    BYTE PTR [rbp+0x1],dh
 1062862:	rex.WRXB ins BYTE PTR es:[rdi],dx
 1062864:	gs push rdx
 1062866:	jne    0x10628d6
 1062868:	add    BYTE PTR [rax],al
 106286a:	outs   dx,DWORD PTR ds:[rsi]
 106286b:	ins    BYTE PTR es:[rdi],dx
 106286c:	xor    esi,DWORD PTR gs:[rdx]
 106286f:	cs fs ins BYTE PTR es:[rdi],dx
 1062872:	ins    BYTE PTR es:[rdi],dx
 1062873:	add    BYTE PTR [rdi+0x4c],cl
 1062876:	rex.RB
 1062877:	push   r13
 1062879:	push   rsp
 106287a:	xor    esi,DWORD PTR [rdx]
 106287c:	cs fs ins BYTE PTR es:[rdi],dx
 106287f:	ins    BYTE PTR es:[rdi],dx
 1062880:	add    BYTE PTR [rax],al
 1062882:	push   rbp
 1062883:	add    BYTE PTR [rax+0x64],dl
 1062886:	push   0x6e65704f
 106288b:	push   rcx
 106288c:	jne    0x10628f3
 106288e:	jb     0x1062909
 1062890:	push   rdi
 1062891:	add    BYTE PTR [rip+0x68645000],dl        # 0x696a7897
 1062897:	rex.XB outs dx,DWORD PTR ds:[rsi]
 1062899:	outs   dx,BYTE PTR ds:[rsi]
 106289a:	outs   dx,BYTE PTR ds:[rsi]
 106289b:	movsxd esi,DWORD PTR gs:[rbp+rcx*2+0x61]
 10628a0:	movsxd ebp,DWORD PTR [rax+0x69]
 10628a3:	outs   dx,BYTE PTR ds:[rsi]
 10628a4:	gs push rdi
 10628a6:	add    BYTE PTR [rax],al
 10628a8:	add    eax,DWORD PTR [rax]
 10628aa:	push   rax
 10628ab:	fs push 0x43646441
 10628b1:	outs   dx,DWORD PTR ds:[rsi]
 10628b2:	jne    0x1062922
 10628b4:	je     0x106291b
 10628b6:	jb     0x106290f
 10628b8:	add    BYTE PTR [rax],al
 10628ba:	push   rcx
 10628bb:	add    BYTE PTR [rax+0x64],dl
 10628be:	push   0x6e65704f
 10628c3:	rex.WR outs dx,DWORD PTR ds:[rsi]
 10628c5:	addr32 push rdi
 10628c7:	add    BYTE PTR [rax+rax*1+0x50],ch
 10628cb:	fs push 0x61647055
 10628d1:	je     0x1062938
 10628d3:	rex.WR outs dx,DWORD PTR ds:[rsi]
 10628d5:	addr32 push rdi
 10628d7:	add    BYTE PTR [rax+0x0],al
 10628da:	push   rax
 10628db:	fs push 0x4c746547
 10628e1:	outs   dx,DWORD PTR ds:[rsi]
 10628e2:	imul   r13d,DWORD PTR [ebp+r12d*2+0x53],0x657a69
 10628ec:	(bad)  
 10628ed:	add    BYTE PTR [rax+0x64],dl
 10628f0:	push   0x736f6c43
 10628f5:	rex.WR outs dx,DWORD PTR gs:[rsi]
 10628f8:	add    BYTE PTR [ecx],dl
 10628fb:	add    BYTE PTR [rax+0x64],dl
 10628fe:	push   0x6c6c6f43
 1062903:	movsxd esi,DWORD PTR gs:[rcx+rdx*2+0x75]
 1062908:	gs jb  0x1062984
 106290b:	rex.R (bad) 
 106290d:	je     0x1062970
 106290f:	rex.RB js 0x1062912
 1062912:	jo     0x1062978
 1062914:	push   0x6c6c642e
 1062919:	add    dl,bl
 106291b:	add    BYTE PTR [rsi+0x65],cl
 106291e:	je     0x1062973
 1062920:	gs jb  0x1062999
 1062923:	gs jb  0x106296b
 1062926:	outs   dx,BYTE PTR ds:[rsi]
 1062927:	jne    0x1062996
 1062929:	add    BYTE PTR [rbp+0x0],ah
 106292c:	rex.WRX
 106292d:	gs je  0x1062971
 1062930:	jo     0x106299b
 1062932:	rex.X jne 0x106299b
 1062935:	data16 gs jb 0x106297f
 1062939:	jb     0x10629a0
 106293b:	add    BYTE PTR gs:[rax],al
 106293e:	rex.WRX
 106293f:	rex.RB push r12
 1062941:	push   r8
 1062943:	xor    rsi,QWORD PTR [r10]
 1062946:	cs fs ins BYTE PTR es:[rdi],dx
 1062949:	ins    BYTE PTR es:[rdi],dx
 106294a:	add    BYTE PTR [rax],al
 106294c:	mov    edx,0x79724300
 1062951:	jo     0x10629c7
 1062953:	push   rax
 1062954:	jb     0x10629c5
 1062956:	je     0x10629bd
 1062958:	movsxd esi,DWORD PTR [rsp+rax*2+0x61]
 106295c:	je     0x10629bf
 106295e:	add    BYTE PTR [rax],al
 1062960:	(bad)  
 1062961:	add    BYTE PTR [rbx+0x72],al
 1062964:	jns    0x10629d6
 1062966:	je     0x10629bd
 1062968:	outs   dx,BYTE PTR ds:[rsi]
 1062969:	jo     0x10629dd
 106296b:	outs   dx,DWORD PTR ds:[rsi]
 106296c:	je     0x10629d3
 106296e:	movsxd esi,DWORD PTR [rsp+rax*2+0x61]
 1062972:	je     0x10629d5
 1062974:	add    BYTE PTR [rax],al
 1062976:	rex.XB push r10
 1062978:	pop    rcx
 1062979:	push   rax
 106297a:	push   rsp
 106297b:	xor    esi,DWORD PTR [rdx]
 106297d:	cs fs ins BYTE PTR es:[rdi],dx
 1062980:	ins    BYTE PTR es:[rdi],dx
 1062981:	add    BYTE PTR [rsi],ah
 1062983:	add    BYTE PTR [rbx+0x79],dl
 1062986:	ins    DWORD PTR es:[rdi],dx
 1062987:	rex.XB ins BYTE PTR es:[rdi],dx
 1062989:	gs (bad) 
 106298b:	outs   dx,BYTE PTR ds:[rsi]
 106298c:	jne    0x10629fe
 106298e:	add    BYTE PTR [rax],al
 1062990:	test   BYTE PTR [rax],al
 1062992:	push   rbx
 1062993:	jns    0x1062a02
 1062995:	rex.WB outs dx,BYTE PTR ds:[rsi]
 1062997:	imul   esi,DWORD PTR [rcx+rbp*2+0x61],0x657a696c
 106299f:	add    BYTE PTR [rdx+riz*2+0x67],ah
 10629a3:	push   0x2e706c65
 10629a8:	fs ins BYTE PTR es:[rdi],dx
 10629aa:	ins    BYTE PTR es:[rdi],dx
 10629ab:	add    BYTE PTR [rsi],bl
 10629ad:	add    BYTE PTR [rdi+0x65],al
 10629b0:	je     0x1062a07
 10629b2:	jae    0x1062a19
 10629b4:	jb     0x1062a04
 10629b6:	(bad)  
 10629b7:	ins    DWORD PTR es:[rdi],dx
 10629b8:	gs rex.RB js 0x1062a13
 10629bc:	add    BYTE PTR [rax],al
 10629be:	push   rbx
 10629bf:	movsxd esi,DWORD PTR gs:[rbp+0x72]
 10629c3:	xor    esi,DWORD PTR [rdx]
 10629c5:	cs fs ins BYTE PTR es:[rdi],dx
 10629c8:	ins    BYTE PTR es:[rdi],dx
 10629c9:	add    BYTE PTR [rdi+0x44],cl
 10629cc:	rex.X
 10629cd:	rex.XB xor esi,DWORD PTR [r10]
 10629d0:	cs fs ins BYTE PTR es:[rdi],dx
 10629d3:	ins    BYTE PTR es:[rdi],dx
 10629d4:	add    BYTE PTR [rax],al
 10629d6:	outs   dx,DWORD PTR ds:[rsi]
 10629d7:	fs (bad) 
 10629da:	(bad)  
 10629dc:	jo     0x1062a0c
 10629de:	fs ins BYTE PTR es:[rdi],dx
 10629e0:	ins    BYTE PTR es:[rdi],dx
 10629e1:	add    dh,ch
 10629e3:	add    BYTE PTR [rbp+0x6e],al
 10629e6:	movsxd ebp,DWORD PTR [rdi+0x64]
 10629e9:	gs push rax
 10629eb:	outs   dx,DWORD PTR ds:[rsi]
 10629ec:	imul   ebp,DWORD PTR [rsi+0x74],0xe2007265
 10629f3:	add    al,0x55
 10629f5:	outs   dx,BYTE PTR ds:[rsi]
 10629f6:	push   0x6c646e61
 10629fb:	gs fs rex.RB js 0x1062a63
 1062a00:	gs jo  0x1062a77
 1062a03:	imul   ebp,DWORD PTR [rdi+0x6e],0x746c6946
 1062a0a:	gs jb  0x1062a0d
 1062a0d:	add    BYTE PTR [rdx],al
 1062a0f:	add    ecx,DWORD PTR [rcx+0x73]
 1062a12:	rex.R
 1062a13:	gs (bad) 
 1062a15:	jne    0x1062a7e
 1062a17:	addr32 gs jb 0x1062a6b
 1062a1b:	jb     0x1062a82
 1062a1d:	jae    0x1062a84
 1062a1f:	outs   dx,BYTE PTR ds:[rsi]
 1062a20:	je     0x1062a22
 1062a22:	es add al,0x52
 1062a25:	je     0x1062a93
 1062a27:	push   rsi
 1062a28:	imul   esi,DWORD PTR [rdx+0x74],0x556c6175
 1062a2f:	outs   dx,BYTE PTR ds:[rsi]
 1062a30:	ja     0x1062a9b
 1062a32:	outs   dx,BYTE PTR ds:[rsi]
 1062a33:	add    BYTE PTR fs:[rax],al
 1062a36:	(bad)  
 1062a37:	add    al,0x52
 1062a39:	je     0x1062aa7
 1062a3b:	rex.WR outs dx,DWORD PTR ds:[rsi]
 1062a3d:	outs   dx,DWORD PTR ds:[rsi]
 1062a3e:	imul   esi,DWORD PTR [rbp+0x70],0x46
 1062a42:	jne    0x1062ab2
 1062a44:	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
 1062a48:	outs   dx,BYTE PTR ds:[rsi]
 1062a49:	rex.RB outs dx,BYTE PTR ds:[rsi]
 1062a4b:	je     0x1062abf
 1062a4d:	jns    0x1062a4f
 1062a4f:	add    BYTE PTR [rax],bl
 1062a51:	add    al,0x52
 1062a53:	je     0x1062ac1
 1062a55:	rex.XB (bad) 
 1062a57:	jo     0x1062acd
 1062a59:	jne    0x1062acd
 1062a5b:	rex.XB outs dx,DWORD PTR gs:[rsi]
 1062a5e:	outs   dx,BYTE PTR ds:[rsi]
 1062a5f:	je     0x1062ac6
 1062a61:	js     0x1062ad7
 1062a63:	add    bl,cl
 1062a65:	add    BYTE PTR [rbp+riz*2+0x63],al
 1062a69:	outs   dx,DWORD PTR ds:[rsi]
 1062a6a:	fs gs push rax
 1062a6d:	outs   dx,DWORD PTR ds:[rsi]
 1062a6e:	imul   ebp,DWORD PTR [rsi+0x74],0xa9007265
 1062a75:	add    edx,DWORD PTR [rcx+0x75]
 1062a78:	gs jb  0x1062af4
 1062a7b:	push   rax
 1062a7c:	gs jb  0x1062ae5
 1062a7f:	outs   dx,DWORD PTR ds:[rsi]
 1062a80:	jb     0x1062aef
 1062a82:	(bad)  
 1062a83:	outs   dx,BYTE PTR ds:[rsi]
 1062a84:	movsxd esp,DWORD PTR [rbp+0x43]
 1062a87:	outs   dx,DWORD PTR ds:[rsi]
 1062a88:	jne    0x1062af8
 1062a8a:	je     0x1062af1
 1062a8c:	jb     0x1062a8e
 1062a8e:	(bad)  
 1062a8f:	add    al,BYTE PTR [rdi+0x65]
 1062a92:	je     0x1062ae8
 1062a94:	imul   esp,DWORD PTR [rbx+0x6b],0x6e756f43
 1062a9b:	je     0x1062a9d
 1062a9d:	add    BYTE PTR [rax+0x74654702],al
 1062aa3:	push   rbx
 1062aa4:	jns    0x1062b19
 1062aa6:	je     0x1062b0d
 1062aa8:	ins    DWORD PTR es:[rdi],dx
 1062aa9:	push   rsp
 1062aaa:	imul   ebp,DWORD PTR [rbp+0x65],0x69467341
 1062ab1:	ins    BYTE PTR es:[rdi],dx
 1062ab2:	gs push rsp
 1062ab4:	imul   ebp,DWORD PTR [rbp+0x65],0x6c056000
 1062abb:	jae    0x1062b31
 1062abd:	jb     0x1062b2b
 1062abf:	outs   dx,BYTE PTR gs:[rsi]
 1062ac1:	add    BYTE PTR [r8],al
 1062ac4:	stos   DWORD PTR es:[rdi],eax
 1062ac5:	add    eax,0x6d6d656d
 1062aca:	outs   dx,DWORD PTR ds:[rsi]
 1062acb:	jbe    0x1062b32
	...
