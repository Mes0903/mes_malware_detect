
c39f47d2d4525bb4950827f1edb92ccf5067267aa1aaef7137e45482c1436d97.exe:     file format pei-x86-64


Disassembly of section .text:

0000000001001000 <.text>:
 1001000:	nop
 1001001:	jbe    0x1001003
 1001003:	add    BYTE PTR [rax],al
 1001005:	add    BYTE PTR [rax],al
 1001007:	add    BYTE PTR [rsi+rsi*2+0x0],ah
 100100e:	add    BYTE PTR [rax],al
 1001010:	ret    0x76
 1001013:	add    BYTE PTR [rax],al
 1001015:	add    BYTE PTR [rax],al
 1001017:	add    al,bl
 1001019:	jbe    0x100101b
 100101b:	add    BYTE PTR [rax],al
 100101d:	add    BYTE PTR [rax],al
 100101f:	add    ah,ch
 1001021:	jbe    0x1001023
 1001023:	add    BYTE PTR [rax],al
 1001025:	add    BYTE PTR [rax],al
 1001027:	add    BYTE PTR [rdi+rsi*2],cl
 100102a:	add    BYTE PTR [rax],al
 100102c:	add    BYTE PTR [rax],al
 100102e:	add    BYTE PTR [rax],al
 1001030:	sbb    BYTE PTR [rdi+0x0],dh
 1001033:	add    BYTE PTR [rax],al
 1001035:	add    BYTE PTR [rax],al
 1001037:	add    BYTE PTR [rdi+rsi*2],ch
 100103a:	add    BYTE PTR [rax],al
 100103c:	add    BYTE PTR [rax],al
 100103e:	add    BYTE PTR [rax],al
 1001040:	rex.WR ja 0x1001043
 1001043:	add    BYTE PTR [rax],al
 1001045:	add    BYTE PTR [rax],al
 1001047:	add    BYTE PTR [rsi+0x77],ah
 100104a:	add    BYTE PTR [rax],al
 100104c:	add    BYTE PTR [rax],al
 100104e:	add    BYTE PTR [rax],al
 1001050:	jp     0x10010c9
 1001052:	add    BYTE PTR [rax],al
 1001054:	add    BYTE PTR [rax],al
 1001056:	add    BYTE PTR [rax],al
 1001058:	xchg   esi,eax
 1001059:	ja     0x100105b
 100105b:	add    BYTE PTR [rax],al
 100105d:	add    BYTE PTR [rax],al
 100105f:	add    BYTE PTR [rax+0x77],ah
 1001065:	add    BYTE PTR [rax],al
 1001067:	add    BYTE PTR [rsi+0x77],bh
 100106d:	add    BYTE PTR [rax],al
 100106f:	add    dl,dl
 1001071:	ja     0x1001073
 1001073:	add    BYTE PTR [rax],al
 1001075:	add    BYTE PTR [rax],al
 1001077:	add    dl,ah
 1001079:	ja     0x100107b
 100107b:	add    BYTE PTR [rax],al
 100107d:	add    BYTE PTR [rax],al
 100107f:	add    dh,dh
 1001081:	ja     0x1001083
 1001083:	add    BYTE PTR [rax],al
 1001085:	add    BYTE PTR [rax],al
 1001087:	add    BYTE PTR [rax+rdi*2],cl
 100108a:	add    BYTE PTR [rax],al
 100108c:	add    BYTE PTR [rax],al
 100108e:	add    BYTE PTR [rax],al
 1001090:	rex.R js 0x1001093
 1001093:	add    BYTE PTR [rax],al
 1001095:	add    BYTE PTR [rax],al
 1001097:	add    BYTE PTR [rax+rdi*2+0x0],dl
 100109b:	add    BYTE PTR [rax],al
 100109d:	add    BYTE PTR [rax],al
 100109f:	add    BYTE PTR [rsi+0x78],bl
 10010a2:	add    BYTE PTR [rax],al
 10010a4:	add    BYTE PTR [rax],al
 10010a6:	add    BYTE PTR [rax],al
 10010a8:	jl     0x1001122
 10010aa:	add    BYTE PTR [rax],al
 10010ac:	add    BYTE PTR [rax],al
 10010ae:	add    BYTE PTR [rax],al
 10010b0:	mov    WORD PTR [rax+0x0],?
 10010b3:	add    BYTE PTR [rax],al
 10010b5:	add    BYTE PTR [rax],al
 10010b7:	add    BYTE PTR [rsi+0x78],ah
 10010bd:	add    BYTE PTR [rax],al
 10010bf:	add    BYTE PTR [rax+rdi*2+0x0],dh
 10010c6:	add    BYTE PTR [rax],al
 10010c8:	cmp    al,0x7c
	...
 10010d6:	add    BYTE PTR [rax],al
 10010d8:	jo     0x1001158
 10010da:	add    BYTE PTR [rax],al
 10010dc:	add    BYTE PTR [rax],al
 10010de:	add    BYTE PTR [rax],al
 10010e0:	push   rdx
 10010e1:	jp     0x10010e3
 10010e3:	add    BYTE PTR [rax],al
 10010e5:	add    BYTE PTR [rax],al
 10010e7:	add    BYTE PTR [rsi+0x7e],al
 10010ea:	add    BYTE PTR [rax],al
 10010ec:	add    BYTE PTR [rax],al
 10010ee:	add    BYTE PTR [rax],al
 10010f0:	sub    bh,BYTE PTR [rsi+0x0]
 10010f3:	add    BYTE PTR [rax],al
 10010f5:	add    BYTE PTR [rax],al
 10010f7:	add    BYTE PTR [rsi+rdi*2],dl
 10010fa:	add    BYTE PTR [rax],al
 10010fc:	add    BYTE PTR [rax],al
 10010fe:	add    BYTE PTR [rax],al
 1001100:	(bad)  
 1001101:	jle    0x1001103
 1001103:	add    BYTE PTR [rax],al
 1001105:	add    BYTE PTR [rax],al
 1001107:	add    dh,dh
 1001109:	jge    0x100110b
 100110b:	add    BYTE PTR [rax],al
 100110d:	add    BYTE PTR [rax],al
 100110f:	add    dh,ah
 1001111:	jge    0x1001113
 1001113:	add    BYTE PTR [rax],al
 1001115:	add    BYTE PTR [rax],al
 1001117:	add    dl,bl
 1001119:	jge    0x100111b
 100111b:	add    BYTE PTR [rax],al
 100111d:	add    BYTE PTR [rax],al
 100111f:	add    ah,cl
 1001121:	jge    0x1001123
 1001123:	add    BYTE PTR [rax],al
 1001125:	add    BYTE PTR [rax],al
 1001127:	add    BYTE PTR [rdx+0x7d],bh
 100112d:	add    BYTE PTR [rax],al
 100112f:	add    BYTE PTR [rax+0x7d],ah
 1001135:	add    BYTE PTR [rax],al
 1001137:	add    BYTE PTR [rsi+0x7d],al
 100113d:	add    BYTE PTR [rax],al
 100113f:	add    BYTE PTR [rbp+rdi*2+0x0],ch
 1001143:	add    BYTE PTR [rax],al
 1001145:	add    BYTE PTR [rax],al
 1001147:	add    BYTE PTR [rsi+0x7d],dl
 100114a:	add    BYTE PTR [rax],al
 100114c:	add    BYTE PTR [rax],al
 100114e:	add    BYTE PTR [rax],al
 1001150:	jle    0x10011d0
 1001152:	add    BYTE PTR [rax],al
 1001154:	add    BYTE PTR [rax],al
 1001156:	add    BYTE PTR [rax],al
 1001158:	rex jge 0x100115b
 100115b:	add    BYTE PTR [rax],al
 100115d:	add    BYTE PTR [rax],al
 100115f:	add    BYTE PTR [rax],dh
 1001161:	jge    0x1001163
 1001163:	add    BYTE PTR [rax],al
 1001165:	add    BYTE PTR [rax],al
 1001167:	add    BYTE PTR [rsi],dl
 1001169:	jge    0x100116b
 100116b:	add    BYTE PTR [rax],al
 100116d:	add    BYTE PTR [rax],al
 100116f:	add    BYTE PTR [rsi],al
 1001171:	jge    0x1001173
 1001173:	add    BYTE PTR [rax],al
 1001175:	add    BYTE PTR [rax],al
 1001177:	add    dl,dh
 1001179:	jl     0x100117b
 100117b:	add    BYTE PTR [rax],al
 100117d:	add    BYTE PTR [rax],al
 100117f:	add    al,bl
 1001181:	jl     0x1001183
 1001183:	add    BYTE PTR [rax],al
 1001185:	add    BYTE PTR [rax],al
 1001187:	add    ah,al
 1001189:	jl     0x100118b
 100118b:	add    BYTE PTR [rax],al
 100118d:	add    BYTE PTR [rax],al
 100118f:	add    BYTE PTR [rax+0x7c],dh
 1001195:	add    BYTE PTR [rax],al
 1001197:	add    BYTE PTR [rdx+0x7c],dl
 100119d:	add    BYTE PTR [rax],al
 100119f:	add    BYTE PTR [rsi+0x7c],dh
 10011a2:	add    BYTE PTR [rax],al
 10011a4:	add    BYTE PTR [rax],al
 10011a6:	add    BYTE PTR [rax],al
 10011a8:	(bad)  
 10011a9:	jl     0x10011ab
 10011ab:	add    BYTE PTR [rax],al
 10011ad:	add    BYTE PTR [rax],al
 10011af:	add    BYTE PTR [rsi+0x7e],cl
 10011b5:	add    BYTE PTR [rax],al
 10011b7:	add    BYTE PTR [rsi+0x7a],al
 10011ba:	add    BYTE PTR [rax],al
 10011bc:	add    BYTE PTR [rax],al
 10011be:	add    BYTE PTR [rax],al
 10011c0:	cmp    BYTE PTR [rdx+0x0],bh
 10011c3:	add    BYTE PTR [rax],al
 10011c5:	add    BYTE PTR [rax],al
 10011c7:	add    BYTE PTR [rdx],ah
 10011c9:	jp     0x10011cb
 10011cb:	add    BYTE PTR [rax],al
 10011cd:	add    BYTE PTR [rax],al
 10011cf:	add    BYTE PTR [rax],cl
 10011d1:	jp     0x10011d3
 10011d3:	add    BYTE PTR [rax],al
 10011d5:	add    BYTE PTR [rax],al
 10011d7:	add    al,bh
 10011d9:	jns    0x10011db
 10011db:	add    BYTE PTR [rax],al
 10011dd:	add    BYTE PTR [rax],al
 10011df:	add    dh,ah
 10011e1:	jns    0x10011e3
 10011e3:	add    BYTE PTR [rax],al
 10011e5:	add    BYTE PTR [rax],al
 10011e7:	add    dh,dl
 10011e9:	jns    0x10011eb
 10011eb:	add    BYTE PTR [rax],al
 10011ed:	add    BYTE PTR [rax],al
 10011ef:	add    dl,al
 10011f1:	jns    0x10011f3
 10011f3:	add    BYTE PTR [rax],al
 10011f5:	add    BYTE PTR [rax],al
 10011f7:	add    BYTE PTR [rcx+rdi*2+0x0],ch
 10011fe:	add    BYTE PTR [rax],al
 1001200:	sahf   
 1001201:	jns    0x1001203
 1001203:	add    BYTE PTR [rax],al
 1001205:	add    BYTE PTR [rax],al
 1001207:	add    BYTE PTR [rdx+0x79],dl
 100120d:	add    BYTE PTR [rax],al
 100120f:	add    BYTE PTR [rcx+rdi*2+0x0],bh
 1001213:	add    BYTE PTR [rax],al
 1001215:	add    BYTE PTR [rax],al
 1001217:	add    BYTE PTR [rax+0x79],dh
 100121a:	add    BYTE PTR [rax],al
 100121c:	add    BYTE PTR [rax],al
 100121e:	add    BYTE PTR [rax],al
 1001220:	pop    rsi
 1001221:	jns    0x1001223
 1001223:	add    BYTE PTR [rax],al
 1001225:	add    BYTE PTR [rax],al
 1001227:	add    BYTE PTR [rcx+rdi*2+0x0],cl
 100122b:	add    BYTE PTR [rax],al
 100122d:	add    BYTE PTR [rax],al
 100122f:	add    BYTE PTR [rax],bh
 1001231:	jns    0x1001233
 1001233:	add    BYTE PTR [rax],al
 1001235:	add    BYTE PTR [rax],al
 1001237:	add    BYTE PTR [rcx+rdi*2],ch
 100123a:	add    BYTE PTR [rax],al
 100123c:	add    BYTE PTR [rax],al
 100123e:	add    BYTE PTR [rax],al
 1001240:	sbb    BYTE PTR [rcx+0x0],bh
 1001243:	add    BYTE PTR [rax],al
 1001245:	add    BYTE PTR [rax],al
 1001247:	add    BYTE PTR [rdx],cl
 1001249:	jns    0x100124b
 100124b:	add    BYTE PTR [rax],al
 100124d:	add    BYTE PTR [rax],al
 100124f:	add    dh,bh
 1001251:	js     0x1001253
 1001253:	add    BYTE PTR [rax],al
 1001255:	add    BYTE PTR [rax],al
 1001257:	add    ah,ch
 1001259:	js     0x100125b
 100125b:	add    BYTE PTR [rax],al
 100125d:	add    BYTE PTR [rax],al
 100125f:	add    dh,bl
 1001261:	js     0x1001263
 1001263:	add    BYTE PTR [rax],al
 1001265:	add    BYTE PTR [rax],al
 1001267:	add    BYTE PTR [rdx+0x7e],ah
 100126a:	add    BYTE PTR [rax],al
 100126c:	add    BYTE PTR [rax],al
 100126e:	add    BYTE PTR [rax],al
 1001270:	rex.WX jl 0x1001273
 1001273:	add    BYTE PTR [rax],al
 1001275:	add    BYTE PTR [rax],al
 1001277:	add    BYTE PTR [rdx+0x7c],dl
	...
 1001286:	add    BYTE PTR [rax],al
 1001288:	movabs al,ds:0xb00000000000007e
 1001291:	jle    0x1001293
 1001293:	add    BYTE PTR [rax],al
 1001295:	add    BYTE PTR [rax],al
 1001297:	add    BYTE PTR [rdx+0x7e],bh
 100129d:	add    BYTE PTR [rax],al
 100129f:	add    al,cl
 10012a1:	jnp    0x10012a3
 10012a3:	add    BYTE PTR [rax],al
 10012a5:	add    BYTE PTR [rax],al
 10012a7:	add    BYTE PTR [rax+0x7b],dh
 10012ad:	add    BYTE PTR [rax],al
 10012af:	add    BYTE PTR [rax+0x7b],ch
 10012b5:	add    BYTE PTR [rax],al
 10012b7:	add    BYTE PTR [rdx+0x7b],bl
 10012bd:	add    BYTE PTR [rax],al
 10012bf:	add    BYTE PTR [rax+0x7b],dl
 10012c5:	add    BYTE PTR [rax],al
 10012c7:	add    BYTE PTR [rdx+0x7b],bh
 10012ca:	add    BYTE PTR [rax],al
 10012cc:	add    BYTE PTR [rax],al
 10012ce:	add    BYTE PTR [rax],al
 10012d0:	pop    rsi
 10012d1:	jnp    0x10012d3
 10012d3:	add    BYTE PTR [rax],al
 10012d5:	add    BYTE PTR [rax],al
 10012d7:	add    BYTE PTR [rdx+0x7b],dl
 10012da:	add    BYTE PTR [rax],al
 10012dc:	add    BYTE PTR [rax],al
 10012de:	add    BYTE PTR [rax],al
 10012e0:	ds jnp 0x10012e3
 10012e3:	add    BYTE PTR [rax],al
 10012e5:	add    BYTE PTR [rax],al
 10012e7:	add    BYTE PTR [rax],ch
 10012e9:	jnp    0x10012eb
 10012eb:	add    BYTE PTR [rax],al
 10012ed:	add    BYTE PTR [rax],al
 10012ef:	add    BYTE PTR [rdx],bl
 10012f1:	jnp    0x10012f3
 10012f3:	add    BYTE PTR [rax],al
 10012f5:	add    BYTE PTR [rax],al
 10012f7:	add    BYTE PTR [rsi],cl
 10012f9:	jnp    0x10012fb
 10012fb:	add    BYTE PTR [rax],al
 10012fd:	add    BYTE PTR [rax],al
 10012ff:	add    BYTE PTR [rax],al
 1001301:	jnp    0x1001303
 1001303:	add    BYTE PTR [rax],al
 1001305:	add    BYTE PTR [rax],al
 1001307:	add    al,bh
 1001309:	jp     0x100130b
 100130b:	add    BYTE PTR [rax],al
 100130d:	add    BYTE PTR [rax],al
 100130f:	add    dh,ch
 1001311:	jp     0x1001313
 1001313:	add    BYTE PTR [rax],al
 1001315:	add    BYTE PTR [rax],al
 1001317:	add    dh,ah
 1001319:	jp     0x100131b
 100131b:	add    BYTE PTR [rax],al
 100131d:	add    BYTE PTR [rax],al
 100131f:	add    al,bl
 1001321:	jp     0x1001323
 1001323:	add    BYTE PTR [rax],al
 1001325:	add    BYTE PTR [rax],al
 1001327:	add    al,al
 1001329:	jp     0x100132b
 100132b:	add    BYTE PTR [rax],al
 100132d:	add    BYTE PTR [rax],al
 100132f:	add    BYTE PTR [rsi+0x7a],ch
 1001335:	add    BYTE PTR [rax],al
 1001337:	add    BYTE PTR [rax+0x7a],ah
 100133d:	add    BYTE PTR [rax],al
 100133f:	add    BYTE PTR [rsi+0x7a],cl
 1001345:	add    BYTE PTR [rax],al
 1001347:	add    BYTE PTR [rsi+0x7a],bh
 100134a:	add    BYTE PTR [rax],al
 100134c:	add    BYTE PTR [rax],al
 100134e:	add    BYTE PTR [rax],al
 1001350:	jo     0x10013cc
 1001352:	add    BYTE PTR [rax],al
 1001354:	add    BYTE PTR [rax],al
 1001356:	add    BYTE PTR [rax],al
 1001358:	push   0x7b
 100135d:	add    BYTE PTR [rax],al
 100135f:	add    al,dl
 1001361:	jle    0x1001363
	...
 100136f:	add    BYTE PTR [rsp+rdi*2],bl
	...
 100137e:	add    BYTE PTR [rax],al
 1001380:	fdivr  QWORD PTR [rbx+0x0]
 1001383:	add    BYTE PTR [rax],al
 1001385:	add    BYTE PTR [rax],al
 1001387:	add    dh,dh
 1001389:	jnp    0x100138b
	...
 100139f:	add    BYTE PTR [rax+0x3c],dh
 10013a2:	add    BYTE PTR [rcx],al
 10013a4:	add    BYTE PTR [rax],al
 10013a6:	add    BYTE PTR [rax],al
 10013a8:	loopne 0x1001411
 10013aa:	add    BYTE PTR [rcx],al
 10013ac:	add    BYTE PTR [rax],al
 10013ae:	add    BYTE PTR [rax],al
 10013b0:	shl    BYTE PTR [rdi+0x0],0x1
	...
 10013c8:	fs add BYTE PTR ds:[rcx],al
 10013cc:	add    BYTE PTR [rax],al
 10013ce:	add    BYTE PTR [rax],al
 10013d0:	clc    
 10013d1:	add    BYTE PTR [r9],al
	...
 10013e4:	(bad)  
 10013e5:	jmp    0x100141c
 10013e7:	rex.WRXB add BYTE PTR [r8],r8b
 10013ea:	add    BYTE PTR [rax],al
 10013ec:	add    al,BYTE PTR [rax]
 10013ee:	add    BYTE PTR [rax],al
 10013f0:	(bad)  
 10013f1:	add    BYTE PTR [rax],al
 10013f3:	add    BYTE PTR [rax],bl
 10013f5:	and    BYTE PTR [rax],al
 10013f7:	add    BYTE PTR [rax],bl
 10013f9:	adc    al,0x0
	...
 100140f:	add    al,dl
 1001411:	add    DWORD PTR [rax],0x1
 1001417:	add    BYTE PTR [rax-0x7e],dh
 100141a:	add    BYTE PTR [rcx],al
 100141c:	add    BYTE PTR [rax],al
 100141e:	add    BYTE PTR [rax],al
 1001420:	imul   ebp,DWORD PTR [rsi+0x73],0x69706174
 1001427:	xor    DWORD PTR [rcx],esi
 1001429:	xor    BYTE PTR [rsi],ch
 100142b:	fs ins BYTE PTR es:[rdi],dx
 100142d:	ins    BYTE PTR es:[rdi],dx
 100142e:	add    BYTE PTR [rax],al
 1001430:	cmp    eax,DWORD PTR [rax]
 1001432:	add    BYTE PTR [rax],al
 1001434:	add    BYTE PTR [rax],al
 1001436:	add    BYTE PTR [rax],al
 1001438:	push   rax
 1001439:	add    BYTE PTR [rcx+0x0],ah
 100143c:	je     0x100143e
 100143e:	push   0x0
 1001443:	add    BYTE PTR [rax],al
 1001445:	add    BYTE PTR [rax],al
 1001447:	add    BYTE PTR [rdi+0x65],al
 100144a:	je     0x1001490
 100144c:	ins    BYTE PTR es:[rdi],dx
 100144d:	ins    BYTE PTR es:[rdi],dx
 100144e:	imul   r14d,DWORD PTR [rdx+0x65],0x726f7463
 1001456:	jns    0x10014af
	...
 1001460:	push   rbx
 1001461:	gs je  0x10014a8
 1001464:	ins    BYTE PTR es:[rdi],dx
 1001465:	ins    BYTE PTR es:[rdi],dx
 1001466:	imul   r14d,DWORD PTR [rdx+0x65],0x726f7463
 100146e:	jns    0x10014c7
	...
 1001478:	imul   eax,DWORD PTR [rax],0x65
 100147b:	add    BYTE PTR [rdx+0x0],dh
 100147e:	outs   dx,BYTE PTR ds:[rsi]
 100147f:	add    BYTE PTR [rbp+0x0],ah
 1001482:	ins    BYTE PTR es:[rdi],dx
 1001483:	add    BYTE PTR [rbx],dh
 1001485:	add    BYTE PTR [rdx],dh
 1001487:	add    BYTE PTR [rsi],ch
 1001489:	add    BYTE PTR [rax+rax*1+0x6c],ah
 100148d:	add    BYTE PTR [rax+rax*1+0x0],ch
 1001491:	add    BYTE PTR [rax],al
 1001493:	add    BYTE PTR [rax],al
 1001495:	add    BYTE PTR [rax],al
 1001497:	add    BYTE PTR [rbx+0x0],dl
 100149a:	push   0x72006100
 100149f:	add    BYTE PTR [rbp+0x0],ah
 10014a2:	add    BYTE PTR fs:[rbx+0x0],al
 10014a6:	outs   dx,DWORD PTR ds:[rsi]
 10014a7:	add    BYTE PTR [rax+rax*1+0x65],ah
 10014ab:	add    BYTE PTR [rax],al
 10014ad:	add    BYTE PTR [rax],al
 10014af:	add    BYTE PTR [rbx+0x0],dl
 10014b2:	outs   dx,DWORD PTR ds:[rsi]
 10014b3:	add    BYTE PTR [rsi+0x0],ah
 10014b6:	je     0x10014b8
 10014b8:	ja     0x10014ba
 10014ba:	(bad)  
 10014bb:	add    BYTE PTR [rdx+0x0],dh
 10014be:	add    BYTE PTR gs:[rax+rax*1+0x4d],bl
 10014c3:	add    BYTE PTR [rcx+0x0],ch
 10014c6:	movsxd eax,DWORD PTR [rax]
 10014c8:	jb     0x10014ca
 10014ca:	outs   dx,DWORD PTR ds:[rsi]
 10014cb:	add    BYTE PTR [rbx+0x0],dh
 10014ce:	outs   dx,DWORD PTR ds:[rsi]
 10014cf:	add    BYTE PTR [rsi+0x0],ah
 10014d2:	je     0x10014d4
 10014d4:	pop    rsp
 10014d5:	add    BYTE PTR [rbp+0x0],cl
 10014d8:	imul   eax,DWORD PTR [rax],0x720063
 10014de:	outs   dx,DWORD PTR ds:[rsi]
 10014df:	add    BYTE PTR [rbx+0x0],dh
 10014e2:	outs   dx,DWORD PTR ds:[rsi]
 10014e3:	add    BYTE PTR [rsi+0x0],ah
 10014e6:	je     0x10014e8
 10014e8:	and    BYTE PTR [rax],al
 10014ea:	push   rbx
 10014eb:	add    BYTE PTR [rcx+0x0],dl
 10014ee:	rex.WR add BYTE PTR [rax],r12b
 10014f1:	add    BYTE PTR [rbx+0x0],dl
 10014f4:	add    BYTE PTR gs:[rdx+0x0],dh
 10014f8:	jbe    0x10014fa
 10014fa:	add    BYTE PTR gs:[rdx+0x0],dh
 10014fe:	pop    rsp
 10014ff:	add    BYTE PTR [rcx],dh
 1001501:	add    BYTE PTR [rcx],dh
 1001503:	add    BYTE PTR [rax],dh
 1001505:	add    BYTE PTR [rax],al
 1001507:	add    BYTE PTR [rip+0x64007e00],ah        # 0x6500930d
 100150d:	add    BYTE PTR [rax+0x0],dh
 1001510:	and    eax,0xff000000
 1001515:	inc    DWORD PTR [rax]
 1001517:	add    BYTE PTR [rsi],ch
 1001519:	add    BYTE PTR [rbp+0x0],ah
 100151c:	js     0x100151e
 100151e:	je     0x1001520
	...
 1001528:	ins    DWORD PTR es:[rdi],dx
 1001529:	add    BYTE PTR [rbx+0x0],dh
 100152c:	ins    DWORD PTR es:[rdi],dx
 100152d:	add    BYTE PTR [rax+rax*1+0x73],ah
 1001531:	add    BYTE PTR [rdx+0x0],dh
 1001534:	jbe    0x1001536
 1001536:	add    BYTE PTR cs:[rbp+0x0],ah
 100153a:	js     0x100153c
 100153c:	add    BYTE PTR gs:[rax],al
 100153f:	add    BYTE PTR [rax+0x0],cl
 1001542:	rex.WXB add BYTE PTR [r13+0x0],al
 1001546:	pop    rcx
 1001547:	add    BYTE PTR [rdi+0x0],bl
 100154a:	rex.WR add BYTE PTR [rdi+0x0],r9b
 100154e:	rex.XB add BYTE PTR [r9+0x0],al
 1001552:	rex.WR add BYTE PTR [rdi+0x0],r11b
 1001556:	rex.WRB add BYTE PTR [r9+0x0],r8b
 100155a:	rex.XB add BYTE PTR [r8+0x0],cl
 100155e:	rex.WB add BYTE PTR [r14+0x0],cl
 1001562:	add    BYTE PTR [r8+rax*1+0x53],r11b
 1001567:	add    BYTE PTR [rdi+0x0],cl
 100156a:	add    BYTE PTR [rax+r8*1+0x57],r10b
 100156f:	add    BYTE PTR [rcx+0x0],al
 1001572:	push   rdx
 1001573:	add    BYTE PTR [rbp+0x0],al
 1001576:	pop    rsp
 1001577:	add    BYTE PTR [rbp+0x0],cl
 100157a:	imul   eax,DWORD PTR [rax],0x720063
 1001580:	outs   dx,DWORD PTR ds:[rsi]
 1001581:	add    BYTE PTR [rbx+0x0],dh
 1001584:	outs   dx,DWORD PTR ds:[rsi]
 1001585:	add    BYTE PTR [rsi+0x0],ah
 1001588:	je     0x100158a
 100158a:	pop    rsp
 100158b:	add    BYTE PTR [rbp+0x0],cl
 100158e:	imul   eax,DWORD PTR [rax],0x720063
 1001594:	outs   dx,DWORD PTR ds:[rsi]
 1001595:	add    BYTE PTR [rbx+0x0],dh
 1001598:	outs   dx,DWORD PTR ds:[rsi]
 1001599:	add    BYTE PTR [rsi+0x0],ah
 100159c:	je     0x100159e
 100159e:	and    BYTE PTR [rax],al
 10015a0:	push   rbx
 10015a1:	add    BYTE PTR [rcx+0x0],dl
 10015a4:	rex.WR add BYTE PTR [rax],r12b
 10015a7:	add    BYTE PTR [rbx+0x0],dl
 10015aa:	add    BYTE PTR gs:[rdx+0x0],dh
 10015ae:	jbe    0x10015b0
 10015b0:	add    BYTE PTR gs:[rdx+0x0],dh
 10015b4:	pop    rsp
 10015b5:	add    BYTE PTR [rcx+0x0],cl
 10015b8:	outs   dx,BYTE PTR ds:[rsi]
 10015b9:	add    BYTE PTR [rbx+0x0],dh
 10015bc:	je     0x10015be
 10015be:	(bad)  
 10015bf:	add    BYTE PTR [rsi+0x0],ch
 10015c2:	movsxd eax,DWORD PTR [rax]
 10015c4:	add    BYTE PTR gs:[rax],ah
 10015c7:	add    BYTE PTR [rsi+0x0],cl
 10015ca:	(bad)  
 10015cb:	add    BYTE PTR [rbp+0x0],ch
 10015ce:	add    BYTE PTR gs:[rbx+0x0],dh
 10015d2:	pop    rsp
 10015d3:	add    BYTE PTR [rbx+0x0],dl
 10015d6:	push   rcx
 10015d7:	add    BYTE PTR [rax+rax*1+0x0],cl
 10015db:	add    BYTE PTR [rax],al
 10015dd:	add    BYTE PTR [rax],al
 10015df:	add    BYTE PTR [rip+0x51005300],ah        # 0x520068e5
 10015e5:	add    BYTE PTR [rax+rax*1+0x53],cl
 10015e9:	add    BYTE PTR [rbp+0x0],al
 10015ec:	push   rdx
 10015ed:	add    BYTE PTR [rsi+0x0],dl
 10015f0:	push   rdx
 10015f1:	add    BYTE PTR [rdi+0x0],bl
 10015f4:	rex.WB add BYTE PTR [r14+0x0],cl
 10015f8:	push   rbx
 10015f9:	add    BYTE PTR [rax+rax*1+0x4e],dl
 10015fd:	add    BYTE PTR [rcx+0x0],al
 1001600:	rex.WRB add BYTE PTR [r13+0x0],r8b
 1001604:	and    eax,0x69000000
 1001609:	add    BYTE PTR [rsi+0x0],ch
 100160c:	imul   eax,DWORD PTR [rax],0x730000
 1001612:	jno    0x1001614
 1001614:	ins    BYTE PTR es:[rdi],dx
 1001615:	add    BYTE PTR [rbx+0x0],dh
 1001618:	add    BYTE PTR gs:[rdx+0x0],dh
 100161c:	jbe    0x100161e
 100161e:	jb     0x1001620
 1001620:	add    BYTE PTR cs:[rcx+0x0],ch
 1001624:	outs   dx,BYTE PTR ds:[rsi]
 1001625:	add    BYTE PTR [rcx+0x0],ch
	...
 1001630:	rex.W add BYTE PTR [rbx+0x0],cl
 1001634:	add    BYTE PTR [r9+0x0],r11b
 1001638:	pop    rdi
 1001639:	add    BYTE PTR [rbx+0x0],al
 100163c:	rex.WR add BYTE PTR [rcx+0x0],r8b
 1001640:	push   rbx
 1001641:	add    BYTE PTR [rbx+0x0],dl
 1001644:	add    BYTE PTR [r11+0x0],r10b
 1001648:	pop    rdi
 1001649:	add    BYTE PTR [rdx+0x0],dl
 100164c:	rex.WRXB add BYTE PTR [r15+0x0],r9b
 1001650:	push   rsp
 1001651:	add    BYTE PTR [rax],al
 1001653:	add    BYTE PTR [rax],al
 1001655:	add    BYTE PTR [rax],al
 1001657:	add    BYTE PTR [rax+0x0],cl
 100165a:	rex.WXB add BYTE PTR [r13+0x0],al
 100165e:	pop    rcx
 100165f:	add    BYTE PTR [rdi+0x0],bl
 1001662:	rex.XB add BYTE PTR [r13+0x0],dl
 1001666:	push   rdx
 1001667:	add    BYTE PTR [rdx+0x0],dl
 100166a:	add    BYTE PTR [r14+0x0],r9b
 100166e:	push   rsp
 100166f:	add    BYTE PTR [rdi+0x0],bl
 1001672:	push   rbp
 1001673:	add    BYTE PTR [rbx+0x0],dl
 1001676:	add    BYTE PTR [r10+0x0],r10b
 100167a:	add    BYTE PTR [rax],al
 100167c:	add    BYTE PTR [rax],al
 100167e:	add    BYTE PTR [rax],al
 1001680:	rex.W add BYTE PTR [rbx+0x0],cl
 1001684:	add    BYTE PTR [r9+0x0],r11b
 1001688:	pop    rdi
 1001689:	add    BYTE PTR [rax+rax*1+0x4f],cl
 100168d:	add    BYTE PTR [rbx+0x0],al
 1001690:	add    BYTE PTR [r8+rax*1+0x5f],cl
 1001695:	add    BYTE PTR [rbp+0x0],cl
 1001698:	add    BYTE PTR [r11+0x0],al
 100169c:	rex.W add BYTE PTR [rcx+0x0],cl
 10016a0:	rex.WRX add BYTE PTR [rbp+0x0],r8b
 10016a4:	add    BYTE PTR [rax],al
 10016a6:	add    BYTE PTR [rax],al
 10016a8:	rex.W add BYTE PTR [rbx+0x0],cl
 10016ac:	add    BYTE PTR [r9+0x0],r11b
 10016b0:	pop    rdi
 10016b1:	add    BYTE PTR [rbp+0x0],dl
 10016b4:	push   rbx
 10016b5:	add    BYTE PTR [rbp+0x0],al
 10016b8:	push   rdx
 10016b9:	add    BYTE PTR [rbx+0x0],dl
 10016bc:	add    BYTE PTR [rax],al
 10016be:	add    BYTE PTR [rax],al
 10016c0:	rex.W add BYTE PTR [rbx+0x0],cl
 10016c4:	add    BYTE PTR [r9+0x0],r11b
 10016c8:	pop    rdi
 10016c9:	add    BYTE PTR [rax+0x0],dl
 10016cc:	add    BYTE PTR [r10+0x0],r10b
 10016d0:	rex.RX add BYTE PTR [rdi+0x0],r9b
 10016d4:	push   rdx
 10016d5:	add    BYTE PTR [rbp+0x0],cl
 10016d8:	add    BYTE PTR [r14+0x0],cl
 10016dc:	rex.XB add BYTE PTR [r13+0x0],al
 10016e0:	pop    rdi
 10016e1:	add    BYTE PTR [rax+rax*1+0x41],al
 10016e5:	add    BYTE PTR [rax+rax*1+0x41],dl
 10016e9:	add    BYTE PTR [rax],al
 10016eb:	add    BYTE PTR [rax],al
 10016ed:	add    BYTE PTR [rax],al
 10016ef:	add    BYTE PTR [rax+0x0],cl
 10016f2:	rex.WXB add BYTE PTR [r13+0x0],al
 10016f6:	pop    rcx
 10016f7:	add    BYTE PTR [rdi+0x0],bl
 10016fa:	rex.XB add BYTE PTR [r13+0x0],dl
 10016fe:	push   rdx
 10016ff:	add    BYTE PTR [rdx+0x0],dl
 1001702:	add    BYTE PTR [r14+0x0],r9b
 1001706:	push   rsp
 1001707:	add    BYTE PTR [rdi+0x0],bl
 100170a:	rex.XB add BYTE PTR [r15+0x0],cl
 100170e:	rex.WRX add BYTE PTR [rsi+0x0],r8b
 1001712:	rex.WB add BYTE PTR [r15+0x0],al
 1001716:	add    BYTE PTR [rax],al
 1001718:	rex.W add BYTE PTR [rbx+0x0],cl
 100171c:	add    BYTE PTR [r9+0x0],r11b
 1001720:	pop    rdi
 1001721:	add    BYTE PTR [rax+rax*1+0x59],al
 1001725:	add    BYTE PTR [rsi+0x0],cl
 1001728:	pop    rdi
 1001729:	add    BYTE PTR [rax+rax*1+0x41],al
 100172d:	add    BYTE PTR [rax+rax*1+0x41],dl
 1001731:	add    BYTE PTR [rax],al
 1001733:	add    BYTE PTR [rax+0x0],al
 1001736:	add    BYTE PTR [rax],al
 1001738:	add    BYTE PTR fs:[rdi+0x0],dh
 100173c:	outs   dx,DWORD PTR ds:[rsi]
 100173d:	add    BYTE PTR [rdx+0x0],dh
 1001740:	add    BYTE PTR fs:[rdx],bh
 1001743:	add    BYTE PTR [rip+0x38003000],ah        # 0x39004749
 1001749:	add    BYTE PTR [rax+0x0],bh
 100174c:	add    BYTE PTR [rax],al
 100174e:	add    BYTE PTR [rax],al
 1001750:	push   0x78006500
 1001755:	add    BYTE PTR [rdx],bh
	...
 100175f:	add    BYTE PTR [rax+0x0],ch
 1001762:	add    BYTE PTR gs:[rax+0x0],bh
 1001766:	sub    BYTE PTR [rax],al
	...
 1001770:	and    eax,0x29006400
 1001775:	add    BYTE PTR [rdx],bh
	...
 100177f:	add    BYTE PTR [rip+0x38003000],ah        # 0x39004785
 1001785:	add    BYTE PTR [rax+0x0],bh
	...
 1001790:	and    eax,0x34003000
 1001795:	add    BYTE PTR [rax+rax*1+0x2d],ah
 1001799:	add    BYTE PTR [rip+0x32003000],ah        # 0x3300479f
 100179f:	add    BYTE PTR [rax+rax*1+0x2d],ah
 10017a3:	add    BYTE PTR [rip+0x32003000],ah        # 0x330047a9
 10017a9:	add    BYTE PTR [rax+rax*1+0x20],ah
 10017ad:	add    BYTE PTR [rip+0x32003000],ah        # 0x330047b3
 10017b3:	add    BYTE PTR [rax+rax*1+0x3a],ah
 10017b7:	add    BYTE PTR [rip+0x32003000],ah        # 0x330047bd
 10017bd:	add    BYTE PTR [rax+rax*1+0x3a],ah
 10017c1:	add    BYTE PTR [rip+0x32003000],ah        # 0x330047c7
 10017c7:	add    BYTE PTR [rax+rax*1+0x2e],ah
 10017cb:	add    BYTE PTR [rip+0x33003000],ah        # 0x340047d1
 10017d1:	add    BYTE PTR [rax+rax*1+0x9],ah
	...
 10017dd:	add    BYTE PTR [rax],al
 10017df:	add    BYTE PTR [rip+0x73006c00],ah        # 0x740083e5
 10017e5:	add    BYTE PTR [rax+rax*1+0x53],bl
 10017e9:	add    BYTE PTR [rbp+0x0],ah
 10017ec:	je     0x10017ee
 10017ee:	jne    0x10017f0
 10017f0:	jo     0x10017f2
 10017f2:	add    BYTE PTR [rax],al
 10017f4:	add    BYTE PTR [rax],al
 10017f6:	add    BYTE PTR [rax],al
 10017f8:	push   rbx
 10017f9:	add    BYTE PTR [rcx+0x0],dl
 10017fc:	rex.WR add BYTE PTR [rdi+0x0],r8b
 1001800:	jb     0x1001802
 1001802:	outs   dx,DWORD PTR ds:[rsi]
 1001803:	add    BYTE PTR [rbp+0x0],dh
 1001806:	jo     0x1001808
	...
 1001810:	add    BYTE PTR [rax+r8*1+0x48],r8b
 1001815:	add    BYTE PTR [rdi+0x0],ch
 1001818:	jae    0x100181a
 100181a:	je     0x100181c
 100181c:	rex.RXB add BYTE PTR [r10+0x0],r14b
 1001820:	outs   dx,DWORD PTR ds:[rsi]
 1001821:	add    BYTE PTR [rbp+0x0],dh
 1001824:	jo     0x1001826
 1001826:	add    BYTE PTR [rax],al
 1001828:	data16 add BYTE PTR [rax+rax*1+0x68],ah
 100182d:	add    BYTE PTR [rdi+0x0],ch
 1001830:	jae    0x1001832
 1001832:	je     0x1001834
 1001834:	add    BYTE PTR cs:[rbp+0x0],ah
 1001838:	js     0x100183a
 100183a:	add    BYTE PTR gs:[rax],al
 100183d:	add    BYTE PTR [rax],al
 100183f:	add    BYTE PTR [rip+0x73006c00],ah        # 0x74008445
 1001845:	add    BYTE PTR [rax],ah
 1001847:	add    BYTE PTR [rbx+0x0],dh
 100184a:	add    BYTE PTR gs:[rdx+0x0],dh
 100184e:	jbe    0x1001850
 1001850:	imul   eax,DWORD PTR [rax],0x650063
 1001856:	and    BYTE PTR [rax],al
 1001858:	jae    0x100185a
 100185a:	jne    0x100185c
 100185c:	movsxd eax,DWORD PTR [rax]
 100185e:	movsxd eax,DWORD PTR [rax]
 1001860:	add    BYTE PTR gs:[rbx+0x0],dh
 1001864:	jae    0x1001866
 1001866:	data16 add BYTE PTR [rbp+0x0],dh
 100186a:	ins    BYTE PTR es:[rdi],dx
 100186b:	add    BYTE PTR [rax+rax*1+0x79],ch
 100186f:	add    BYTE PTR [rax],ah
 1001871:	add    BYTE PTR [rax+rax*1+0x61],ch
 1001875:	add    BYTE PTR [rbp+0x0],dh
 1001878:	outs   dx,BYTE PTR ds:[rsi]
 1001879:	add    BYTE PTR [rbx+0x0],ah
 100187c:	push   0x64006500
 1001881:	add    BYTE PTR [rax],ah
 1001883:	add    BYTE PTR [rsi+0x0],al
 1001886:	add    BYTE PTR [rax+0x0],r9b
 100188a:	outs   dx,DWORD PTR ds:[rsi]
 100188b:	add    BYTE PTR [rbx+0x0],dh
 100188e:	je     0x1001890
 1001890:	add    BYTE PTR cs:[rbp+0x0],ah
 1001894:	js     0x1001896
 1001896:	add    BYTE PTR gs:[rax],ah
 1001899:	add    BYTE PTR [rax+0x0],dl
 100189c:	jb     0x100189e
 100189e:	outs   dx,DWORD PTR ds:[rsi]
 100189f:	add    BYTE PTR [rbx+0x0],ah
 10018a2:	add    BYTE PTR gs:[rbx+0x0],dh
 10018a6:	jae    0x10018a8
 10018a8:	sub    BYTE PTR [rax],al
 10018aa:	jo     0x10018ac
 10018ac:	jb     0x10018ae
 10018ae:	outs   dx,DWORD PTR ds:[rsi]
 10018af:	add    BYTE PTR [rbx+0x0],ah
 10018b2:	add    BYTE PTR gs:[rbx+0x0],dh
 10018b6:	jae    0x10018b8
 10018b8:	and    BYTE PTR [rax],al
 10018ba:	imul   eax,DWORD PTR [rax],0x200064
 10018c0:	cmp    eax,0x25002000
 10018c5:	add    BYTE PTR [rax+rax*1+0x29],ah
 10018c9:	add    BYTE PTR [rsi],ch
 10018cb:	add    BYTE PTR [rax],al
 10018cd:	add    BYTE PTR [rax],al
 10018cf:	add    BYTE PTR [rip+0x73006c00],ah        # 0x740084d5
 10018d5:	add    BYTE PTR [rip+0x73006c00],ah        # 0x740084db
 10018db:	add    BYTE PTR [rip+0x73006c00],ah        # 0x740084e1
	...
 10018ed:	add    BYTE PTR [rax],al
 10018ef:	add    BYTE PTR [rsi+0x0],al
 10018f2:	(bad)  
 10018f3:	add    BYTE PTR [rcx+0x0],ch
 10018f6:	ins    BYTE PTR es:[rdi],dx
 10018f7:	add    BYTE PTR [rbp+0x0],ah
 10018fa:	add    BYTE PTR fs:[rax],ah
 10018fd:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1001901:	add    BYTE PTR [rax],ah
 1001903:	add    BYTE PTR [rbx+0x0],ah
 1001906:	outs   dx,DWORD PTR ds:[rsi]
 1001907:	add    BYTE PTR [rsi+0x0],ch
 100190a:	outs   dx,BYTE PTR ds:[rsi]
 100190b:	add    BYTE PTR [rbp+0x0],ah
 100190e:	movsxd eax,DWORD PTR [rax]
 1001910:	je     0x1001912
 1001912:	and    BYTE PTR [rax],al
 1001914:	je     0x1001916
 1001916:	outs   dx,DWORD PTR ds:[rsi]
 1001917:	add    BYTE PTR [rax],ah
 1001919:	add    BYTE PTR [rsi+0x0],ch
 100191c:	(bad)  
 100191d:	add    BYTE PTR [rbp+0x0],ch
 1001920:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1001925:	add    BYTE PTR [rax+0x0],dh
 1001928:	imul   eax,DWORD PTR [rax],0x650070
 100192e:	add    BYTE PTR cs:[rax],ah
 1001931:	add    BYTE PTR [rax+0x0],ch
 1001934:	jb     0x1001936
 1001936:	and    BYTE PTR [rax],al
 1001938:	cmp    eax,0x30002000
 100193d:	add    BYTE PTR [rax+0x0],bh
 1001940:	and    eax,0x2e007800
	...
 100194d:	add    BYTE PTR [rax],al
 100194f:	add    BYTE PTR [rsi+0x0],al
 1001952:	(bad)  
 1001953:	add    BYTE PTR [rcx+0x0],ch
 1001956:	ins    BYTE PTR es:[rdi],dx
 1001957:	add    BYTE PTR [rbp+0x0],ah
 100195a:	add    BYTE PTR fs:[rax],ah
 100195d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1001961:	add    BYTE PTR [rax],ah
 1001963:	add    BYTE PTR [rdi+0x0],dh
 1001966:	(bad)  
 1001967:	add    BYTE PTR [rcx+0x0],ch
 100196a:	je     0x100196c
 100196c:	and    BYTE PTR [rax],al
 100196e:	outs   dx,BYTE PTR ds:[rsi]
 100196f:	add    BYTE PTR [rcx+0x0],ah
 1001972:	ins    DWORD PTR es:[rdi],dx
 1001973:	add    BYTE PTR [rbp+0x0],ah
 1001976:	add    BYTE PTR fs:[rax],ah
 1001979:	add    BYTE PTR [rax+0x0],dh
 100197c:	imul   eax,DWORD PTR [rax],0x650070
 1001982:	add    BYTE PTR cs:[rax],ah
 1001985:	add    BYTE PTR [rax+0x0],ch
 1001988:	jb     0x100198a
 100198a:	and    BYTE PTR [rax],al
 100198c:	cmp    eax,0x30002000
 1001991:	add    BYTE PTR [rax+0x0],bh
 1001994:	and    eax,0x2e007800
 1001999:	add    BYTE PTR [rax],al
 100199b:	add    BYTE PTR [rax],al
 100199d:	add    BYTE PTR [rax],al
 100199f:	add    BYTE PTR [rsi+0x0],al
 10019a2:	(bad)  
 10019a3:	add    BYTE PTR [rcx+0x0],ch
 10019a6:	ins    BYTE PTR es:[rdi],dx
 10019a7:	add    BYTE PTR [rbp+0x0],ah
 10019aa:	add    BYTE PTR fs:[rax],ah
 10019ad:	add    BYTE PTR [rax+rax*1+0x6f],dh
 10019b1:	add    BYTE PTR [rax],ah
 10019b3:	add    BYTE PTR [rbx+0x0],dh
 10019b6:	add    BYTE PTR gs:[rax+rax*1+0x20],dh
 10019bb:	add    BYTE PTR [rsi+0x0],ch
 10019be:	(bad)  
 10019bf:	add    BYTE PTR [rbp+0x0],ch
 10019c2:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 10019c7:	add    BYTE PTR [rax+0x0],dh
 10019ca:	imul   eax,DWORD PTR [rax],0x650070
 10019d0:	and    BYTE PTR [rax],al
 10019d2:	jae    0x10019d4
 10019d4:	je     0x10019d6
 10019d6:	(bad)  
 10019d7:	add    BYTE PTR [rax+rax*1+0x65],dh
 10019db:	add    BYTE PTR [rsi],ch
 10019dd:	add    BYTE PTR [rax],ah
 10019df:	add    BYTE PTR [rax+0x0],ch
 10019e2:	jb     0x10019e4
 10019e4:	and    BYTE PTR [rax],al
 10019e6:	cmp    eax,0x30002000
 10019eb:	add    BYTE PTR [rax+0x0],bh
 10019ee:	and    eax,0x2e007800
	...
 10019ff:	add    BYTE PTR [rsi+0x0],al
 1001a02:	(bad)  
 1001a03:	add    BYTE PTR [rcx+0x0],ch
 1001a06:	ins    BYTE PTR es:[rdi],dx
 1001a07:	add    BYTE PTR [rbp+0x0],ah
 1001a0a:	add    BYTE PTR fs:[rax],ah
 1001a0d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1001a11:	add    BYTE PTR [rax],ah
 1001a13:	add    BYTE PTR [rbx+0x0],dh
 1001a16:	je     0x1001a18
 1001a18:	(bad)  
 1001a19:	add    BYTE PTR [rdx+0x0],dh
 1001a1c:	je     0x1001a1e
 1001a1e:	and    BYTE PTR [rax],al
 1001a20:	data16 add BYTE PTR [rax+rax*1+0x68],ah
 1001a25:	add    BYTE PTR [rdi+0x0],ch
 1001a28:	jae    0x1001a2a
 1001a2a:	je     0x1001a2c
 1001a2c:	add    BYTE PTR cs:[rbp+0x0],ah
 1001a30:	js     0x1001a32
 1001a32:	add    BYTE PTR gs:[rsi],ch
 1001a35:	add    BYTE PTR [rax],ah
 1001a37:	add    BYTE PTR [rax+0x0],ch
 1001a3a:	jb     0x1001a3c
 1001a3c:	and    BYTE PTR [rax],al
 1001a3e:	cmp    eax,0x30002000
 1001a43:	add    BYTE PTR [rax+0x0],bh
 1001a46:	and    eax,0x2e007800
 1001a4b:	add    BYTE PTR [rax],al
 1001a4d:	add    BYTE PTR [rax],al
 1001a4f:	add    BYTE PTR [rsi+0x0],al
 1001a52:	(bad)  
 1001a53:	add    BYTE PTR [rcx+0x0],ch
 1001a56:	ins    BYTE PTR es:[rdi],dx
 1001a57:	add    BYTE PTR [rbp+0x0],ah
 1001a5a:	add    BYTE PTR fs:[rax],ah
 1001a5d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1001a61:	add    BYTE PTR [rax],ah
 1001a63:	add    BYTE PTR [rdx+0x0],dh
 1001a66:	add    BYTE PTR gs:[rcx+0x0],ah
 1001a6a:	add    BYTE PTR fs:[rax],ah
 1001a6d:	add    BYTE PTR [rsi+0x0],ah
 1001a70:	jb     0x1001a72
 1001a72:	outs   dx,DWORD PTR ds:[rsi]
 1001a73:	add    BYTE PTR [rbp+0x0],ch
 1001a76:	and    BYTE PTR [rax],al
 1001a78:	outs   dx,BYTE PTR ds:[rsi]
 1001a79:	add    BYTE PTR [rcx+0x0],ah
 1001a7c:	ins    DWORD PTR es:[rdi],dx
 1001a7d:	add    BYTE PTR [rbp+0x0],ah
 1001a80:	add    BYTE PTR fs:[rax],ah
 1001a83:	add    BYTE PTR [rax+0x0],dh
 1001a86:	imul   eax,DWORD PTR [rax],0x650070
 1001a8c:	add    BYTE PTR cs:[rax],ah
 1001a8f:	add    BYTE PTR [rax+0x0],ch
 1001a92:	jb     0x1001a94
 1001a94:	and    BYTE PTR [rax],al
 1001a96:	cmp    eax,0x30002000
 1001a9b:	add    BYTE PTR [rax+0x0],bh
 1001a9e:	and    eax,0x2e007800
	...
 1001aaf:	add    BYTE PTR [rsi+0x0],ah
 1001ab2:	(bad)  
 1001ab3:	add    BYTE PTR [rcx+0x0],ch
 1001ab6:	ins    BYTE PTR es:[rdi],dx
 1001ab7:	add    BYTE PTR [rbp+0x0],ah
 1001aba:	add    BYTE PTR fs:[rax],ah
 1001abd:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1001ac1:	add    BYTE PTR [rax],ah
 1001ac3:	add    BYTE PTR [rbx+0x0],dh
 1001ac6:	add    BYTE PTR gs:[rsi+0x0],ch
 1001aca:	add    BYTE PTR fs:[rax],ah
 1001acd:	add    BYTE PTR [rdx+0x0],ah
 1001ad0:	(bad)  
 1001ad1:	add    BYTE PTR [rbx+0x0],ah
 1001ad4:	imul   eax,DWORD PTR [rax],0x20
 1001ad7:	add    BYTE PTR [rax+0x0],dh
 1001ada:	jb     0x1001adc
 1001adc:	outs   dx,DWORD PTR ds:[rsi]
 1001add:	add    BYTE PTR [rbx+0x0],ah
 1001ae0:	add    BYTE PTR gs:[rbx+0x0],dh
 1001ae4:	jae    0x1001ae6
 1001ae6:	and    BYTE PTR [rax],al
 1001ae8:	imul   eax,DWORD PTR [rax],0x2e0064
 1001aee:	and    BYTE PTR [rax],al
 1001af0:	push   0x20007200
 1001af5:	add    BYTE PTR [rip+0x30002000],bh        # 0x31003afb
 1001afb:	add    BYTE PTR [rax+0x0],bh
 1001afe:	and    eax,0x7800
 1001b03:	add    BYTE PTR [rax],al
 1001b05:	add    BYTE PTR [rax],al
 1001b07:	add    BYTE PTR [rip+0x73006c00],ah        # 0x7400870d
 1001b0d:	add    BYTE PTR [rax],ah
 1001b0f:	add    BYTE PTR [rbx+0x0],dh
 1001b12:	add    BYTE PTR gs:[rdx+0x0],dh
 1001b16:	jbe    0x1001b18
 1001b18:	imul   eax,DWORD PTR [rax],0x650063
 1001b1e:	and    BYTE PTR [rax],al
 1001b20:	jae    0x1001b22
 1001b22:	je     0x1001b24
 1001b24:	outs   dx,DWORD PTR ds:[rsi]
 1001b25:	add    BYTE PTR [rax+0x0],dh
 1001b28:	jo     0x1001b2a
 1001b2a:	add    BYTE PTR gs:[rax+rax*1+0x2e],ah
	...
 1001b3f:	add    BYTE PTR [rip+0x73006c00],ah        # 0x74008745
 1001b45:	add    BYTE PTR [rax],ah
 1001b47:	add    BYTE PTR [rbx+0x0],dh
 1001b4a:	add    BYTE PTR gs:[rdx+0x0],dh
 1001b4e:	jbe    0x1001b50
 1001b50:	imul   eax,DWORD PTR [rax],0x650063
 1001b56:	and    BYTE PTR [rax],al
 1001b58:	jb     0x1001b5a
 1001b5a:	add    BYTE PTR gs:[rbx+0x0],ah
 1001b5e:	add    BYTE PTR gs:[rcx+0x0],ch
 1001b62:	jbe    0x1001b64
 1001b64:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1001b69:	add    BYTE PTR [rbx+0x0],ah
 1001b6c:	outs   dx,DWORD PTR ds:[rsi]
 1001b6d:	add    BYTE PTR [rsi+0x0],ch
 1001b70:	je     0x1001b72
 1001b72:	jb     0x1001b74
 1001b74:	outs   dx,DWORD PTR ds:[rsi]
 1001b75:	add    BYTE PTR [rax+rax*1+0x20],ch
 1001b79:	add    BYTE PTR [rbp+0x0],ch
 1001b7c:	add    BYTE PTR gs:[rbx+0x0],dh
 1001b80:	jae    0x1001b82
 1001b82:	(bad)  
 1001b83:	add    BYTE PTR [rdi+0x0],ah
 1001b86:	add    BYTE PTR gs:[rsi],ch
 1001b89:	add    BYTE PTR [rax],al
 1001b8b:	add    BYTE PTR [rax],al
 1001b8d:	add    BYTE PTR [rax],al
 1001b8f:	add    BYTE PTR [rsi+0x0],al
 1001b92:	(bad)  
 1001b93:	add    BYTE PTR [rcx+0x0],ch
 1001b96:	ins    BYTE PTR es:[rdi],dx
 1001b97:	add    BYTE PTR [rbp+0x0],ah
 1001b9a:	add    BYTE PTR fs:[rax],ah
 1001b9d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1001ba1:	add    BYTE PTR [rax],ah
 1001ba3:	add    BYTE PTR [rbx+0x0],al
 1001ba6:	jb     0x1001ba8
 1001ba8:	add    BYTE PTR gs:[rcx+0x0],ah
 1001bac:	je     0x1001bae
 1001bae:	add    BYTE PTR gs:[rax+rax*1+0x68],dl
 1001bb3:	add    BYTE PTR [rdx+0x0],dh
 1001bb6:	add    BYTE PTR gs:[rcx+0x0],ah
 1001bba:	add    BYTE PTR fs:[rax],ah
 1001bbd:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1001bc1:	add    BYTE PTR [rax],ah
 1001bc3:	add    BYTE PTR [rbx+0x0],dh
 1001bc6:	add    BYTE PTR gs:[rdx+0x0],dh
 1001bca:	jbe    0x1001bcc
 1001bcc:	add    BYTE PTR gs:[rax],ah
 1001bcf:	add    BYTE PTR [rbx+0x0],dh
 1001bd2:	je     0x1001bd4
 1001bd4:	(bad)  
 1001bd5:	add    BYTE PTR [rdx+0x0],dh
 1001bd8:	je     0x1001bda
 1001bda:	and    BYTE PTR [rax],al
 1001bdc:	data16 add BYTE PTR [rax+rax*1+0x68],ah
 1001be1:	add    BYTE PTR [rdi+0x0],ch
 1001be4:	jae    0x1001be6
 1001be6:	je     0x1001be8
 1001be8:	and    BYTE PTR [rax],al
 1001bea:	jb     0x1001bec
 1001bec:	add    BYTE PTR gs:[rcx+0x0],dh
 1001bf0:	jne    0x1001bf2
 1001bf2:	add    BYTE PTR gs:[rbx+0x0],dh
 1001bf6:	je     0x1001bf8
 1001bf8:	add    BYTE PTR cs:[rax],ah
 1001bfb:	add    BYTE PTR [rax+0x0],ch
 1001bfe:	jb     0x1001c00
 1001c00:	and    BYTE PTR [rax],al
 1001c02:	cmp    eax,0x30002000
 1001c07:	add    BYTE PTR [rax+0x0],bh
 1001c0a:	and    eax,0x2e007800
	...
 1001c1f:	add    BYTE PTR [rsi+0x0],al
 1001c22:	(bad)  
 1001c23:	add    BYTE PTR [rcx+0x0],ch
 1001c26:	ins    BYTE PTR es:[rdi],dx
 1001c27:	add    BYTE PTR [rbp+0x0],ah
 1001c2a:	add    BYTE PTR fs:[rax],ah
 1001c2d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1001c31:	add    BYTE PTR [rax],ah
 1001c33:	add    BYTE PTR [rdx+0x0],dh
 1001c36:	add    BYTE PTR gs:[rdi+0x0],ah
 1001c3a:	imul   eax,DWORD PTR [rax],0x740073
 1001c40:	add    BYTE PTR gs:[rdx+0x0],dh
 1001c44:	and    BYTE PTR [rax],al
 1001c46:	and    eax,0x73006c00
 1001c4b:	add    BYTE PTR [rax],ah
 1001c4d:	add    BYTE PTR [rbx+0x0],dh
 1001c50:	add    BYTE PTR gs:[rdx+0x0],dh
 1001c54:	jbe    0x1001c56
 1001c56:	imul   eax,DWORD PTR [rax],0x650063
 1001c5c:	add    BYTE PTR cs:[rax],ah
 1001c5f:	add    BYTE PTR [rax+0x0],ch
 1001c62:	jb     0x1001c64
 1001c64:	and    BYTE PTR [rax],al
 1001c66:	cmp    eax,0x30002000
 1001c6b:	add    BYTE PTR [rax+0x0],bh
 1001c6e:	and    eax,0x2e007800
	...
 1001c7f:	add    BYTE PTR [rsi+0x0],al
 1001c82:	(bad)  
 1001c83:	add    BYTE PTR [rcx+0x0],ch
 1001c86:	ins    BYTE PTR es:[rdi],dx
 1001c87:	add    BYTE PTR [rbp+0x0],ah
 1001c8a:	add    BYTE PTR fs:[rax],ah
 1001c8d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1001c91:	add    BYTE PTR [rax],ah
 1001c93:	add    BYTE PTR [rdi+0x0],ah
 1001c96:	add    BYTE PTR gs:[rax+rax*1+0x20],dh
 1001c9b:	add    BYTE PTR [rbx+0x0],dh
 1001c9e:	jno    0x1001ca0
 1001ca0:	ins    BYTE PTR es:[rdi],dx
 1001ca1:	add    BYTE PTR [rbx+0x0],dh
 1001ca4:	add    BYTE PTR gs:[rdx+0x0],dh
 1001ca8:	jbe    0x1001caa
 1001caa:	add    BYTE PTR gs:[rdx+0x0],dh
 1001cae:	(bad)  
 1001caf:	add    BYTE PTR [rsi+0x0],ah
 1001cb2:	add    BYTE PTR fs:[rax+0x0],ch
 1001cb6:	outs   dx,DWORD PTR ds:[rsi]
 1001cb7:	add    BYTE PTR [rbx+0x0],dh
 1001cba:	je     0x1001cbc
 1001cbc:	and    BYTE PTR [rax],al
 1001cbe:	jae    0x1001cc0
 1001cc0:	add    BYTE PTR gs:[rdx+0x0],dh
 1001cc4:	jbe    0x1001cc6
 1001cc6:	imul   eax,DWORD PTR [rax],0x650063
 1001ccc:	and    BYTE PTR [rax],al
 1001cce:	add    BYTE PTR [edx+0x0],dh
 1001cd2:	outs   dx,DWORD PTR ds:[rsi]
 1001cd3:	add    BYTE PTR [rbp+0x0],dh
 1001cd6:	jo     0x1001cd8
 1001cd8:	and    BYTE PTR [rax],al
 1001cda:	jae    0x1001cdc
 1001cdc:	imul   eax,DWORD PTR [rax],0x2e0064
	...
 1001cee:	add    BYTE PTR [rax],al
 1001cf0:	rex.RX add BYTE PTR [rcx+0x0],r12b
 1001cf4:	imul   eax,DWORD PTR [rax],0x65006c
 1001cfa:	add    BYTE PTR fs:[rax],ah
 1001cfd:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1001d01:	add    BYTE PTR [rax],ah
 1001d03:	add    BYTE PTR [rbx+0x0],ah
 1001d06:	jb     0x1001d08
 1001d08:	add    BYTE PTR gs:[rcx+0x0],ah
 1001d0c:	je     0x1001d0e
 1001d0e:	add    BYTE PTR gs:[rax],ah
 1001d11:	add    BYTE PTR [rsi+0x0],ah
 1001d14:	add    BYTE PTR fs:[rax+0x0],ch
 1001d18:	outs   dx,DWORD PTR ds:[rsi]
 1001d19:	add    BYTE PTR [rbx+0x0],dh
 1001d1c:	je     0x1001d1e
 1001d1e:	add    BYTE PTR cs:[rbp+0x0],ah
 1001d22:	js     0x1001d24
 1001d24:	add    BYTE PTR gs:[rax],ah
 1001d27:	add    BYTE PTR [rax+0x0],dh
 1001d2a:	jb     0x1001d2c
 1001d2c:	outs   dx,DWORD PTR ds:[rsi]
 1001d2d:	add    BYTE PTR [rbx+0x0],ah
 1001d30:	add    BYTE PTR gs:[rbx+0x0],dh
 1001d34:	jae    0x1001d36
 1001d36:	and    BYTE PTR [rax],al
 1001d38:	push   rbx
 1001d39:	add    BYTE PTR [rax+rax*1+0x2e],al
 1001d3d:	add    BYTE PTR [rax],ah
 1001d3f:	add    BYTE PTR [rax+0x0],ch
 1001d42:	jb     0x1001d44
 1001d44:	and    BYTE PTR [rax],al
 1001d46:	cmp    eax,0x30002000
 1001d4b:	add    BYTE PTR [rax+0x0],bh
 1001d4e:	and    eax,0x2e007800
	...
 1001d5f:	add    BYTE PTR [rip+0x73006c00],ah        # 0x74008965
 1001d65:	add    BYTE PTR [rax],ah
 1001d67:	add    BYTE PTR [rbx+0x0],dh
 1001d6a:	add    BYTE PTR gs:[rdx+0x0],dh
 1001d6e:	jbe    0x1001d70
 1001d70:	imul   eax,DWORD PTR [rax],0x650063
 1001d76:	and    BYTE PTR [rax],al
 1001d78:	jae    0x1001d7a
 1001d7a:	jne    0x1001d7c
 1001d7c:	movsxd eax,DWORD PTR [rax]
 1001d7e:	movsxd eax,DWORD PTR [rax]
 1001d80:	add    BYTE PTR gs:[rbx+0x0],dh
 1001d84:	jae    0x1001d86
 1001d86:	data16 add BYTE PTR [rbp+0x0],dh
 1001d8a:	ins    BYTE PTR es:[rdi],dx
 1001d8b:	add    BYTE PTR [rax+rax*1+0x79],ch
 1001d8f:	add    BYTE PTR [rax],ah
 1001d91:	add    BYTE PTR [rbx+0x0],dh
 1001d94:	je     0x1001d96
 1001d96:	(bad)  
 1001d97:	add    BYTE PTR [rdx+0x0],dh
 1001d9a:	je     0x1001d9c
 1001d9c:	add    BYTE PTR gs:[rax+rax*1+0x2e],ah
 1001da1:	add    BYTE PTR [rax],al
 1001da3:	add    BYTE PTR [rax],al
 1001da5:	add    BYTE PTR [rax],al
 1001da7:	add    BYTE PTR [rbx+0x65],dl
 1001daa:	je     0x1001dff
 1001dac:	movsxd esi,DWORD PTR gs:[rbp+0x72]
 1001db0:	imul   esi,DWORD PTR [rcx+rdi*2+0x44],0x72637365
 1001db8:	imul   esi,DWORD PTR [rax+0x74],0x6f43726f
 1001dbf:	outs   dx,BYTE PTR ds:[rsi]
 1001dc0:	je     0x1001e34
 1001dc2:	outs   dx,DWORD PTR ds:[rsi]
 1001dc3:	ins    BYTE PTR es:[rdi],dx
 1001dc4:	add    BYTE PTR [rax],al
 1001dc6:	add    BYTE PTR [rax],al
 1001dc8:	(bad)  
 1001dc9:	add    BYTE PTR [rax+rax*1+0x76],ah
 1001dcd:	add    BYTE PTR [rcx+0x0],ah
 1001dd0:	jo     0x1001dd2
 1001dd2:	imul   eax,DWORD PTR [rax],0x320033
 1001dd8:	add    BYTE PTR cs:[rax+rax*1+0x6c],ah
 1001ddd:	add    BYTE PTR [rax+rax*1+0x0],ch
 1001de1:	add    BYTE PTR [rax],al
 1001de3:	add    BYTE PTR [rax],al
 1001de5:	add    BYTE PTR [rax],al
 1001de7:	add    BYTE PTR [rip+0x73006c00],ah        # 0x740089ed
 1001ded:	add    BYTE PTR [rsi],ch
 1001def:	add    BYTE PTR [rip+0x64002d00],ah        # 0x65004af5
 1001df5:	add    BYTE PTR [rax],al
 1001df7:	add    BYTE PTR [rip+0x73006c00],ah        # 0x740089fd
 1001dfd:	add    BYTE PTR [rax],al
 1001dff:	add    BYTE PTR [rip+0x73006c00],ah        # 0x74008a05
	...
 1001e0d:	add    BYTE PTR [rax],al
 1001e0f:	add    BYTE PTR [rip+0x73006c00],ah        # 0x74008a15
 1001e15:	add    BYTE PTR [rax+rax*1],ah
 1001e18:	and    eax,0x73006c00
	...
 1001e25:	add    BYTE PTR [rax],al
 1001e27:	add    BYTE PTR [rip+0x73006c00],ah        # 0x74008a2d
 1001e2d:	add    BYTE PTR [rax+rax*1+0x4c],bl
 1001e31:	add    BYTE PTR [rdi+0x0],cl
 1001e34:	add    BYTE PTR [r8+r8*1+0x25],r11b
 1001e39:	add    BYTE PTR [rax+rax*1+0x73],ch
	...
 1001e4d:	add    BYTE PTR [rax],al
 1001e4f:	add    BYTE PTR [rsi+0x0],al
 1001e52:	(bad)  
 1001e53:	add    BYTE PTR [rcx+0x0],ch
 1001e56:	ins    BYTE PTR es:[rdi],dx
 1001e57:	add    BYTE PTR [rbp+0x0],ah
 1001e5a:	add    BYTE PTR fs:[rax],ah
 1001e5d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1001e61:	add    BYTE PTR [rax],ah
 1001e63:	add    BYTE PTR [rbx+0x0],dh
 1001e66:	je     0x1001e68
 1001e68:	(bad)  
 1001e69:	add    BYTE PTR [rdx+0x0],dh
 1001e6c:	je     0x1001e6e
 1001e6e:	and    BYTE PTR [rax],al
 1001e70:	and    eax,0x73006c00
 1001e75:	add    BYTE PTR [rax],ah
 1001e77:	add    BYTE PTR [rbx+0x0],dh
 1001e7a:	add    BYTE PTR gs:[rdx+0x0],dh
 1001e7e:	jbe    0x1001e80
 1001e80:	imul   eax,DWORD PTR [rax],0x650063
 1001e86:	add    BYTE PTR cs:[rax],ah
 1001e89:	add    BYTE PTR [rax+0x0],ch
 1001e8c:	jb     0x1001e8e
 1001e8e:	and    BYTE PTR [rax],al
 1001e90:	cmp    eax,0x30002000
 1001e95:	add    BYTE PTR [rax+0x0],bh
 1001e98:	and    eax,0x2e007800
 1001e9d:	add    BYTE PTR [rax],al
 1001e9f:	add    BYTE PTR [rsi+0x0],al
 1001ea2:	add    BYTE PTR [rax+rax*1+0x61],r9b
 1001ea7:	add    BYTE PTR [rbp+0x0],dh
 1001eaa:	outs   dx,BYTE PTR ds:[rsi]
 1001eab:	add    BYTE PTR [rbx+0x0],ah
 1001eae:	push   0x64004100
 1001eb3:	add    BYTE PTR [rbp+0x0],ch
 1001eb6:	imul   eax,DWORD PTR [rax],0x6e
 1001ebc:	add    BYTE PTR [rax],al
 1001ebe:	add    BYTE PTR [rax],al
 1001ec0:	add    BYTE PTR [rax+r8*1+0x4c],r8b
 1001ec5:	add    BYTE PTR [rcx+0x0],al
 1001ec8:	push   rbp
 1001ec9:	add    BYTE PTR [rsi+0x0],cl
 1001ecc:	rex.XB add BYTE PTR [r8+0x0],cl
 1001ed0:	add    BYTE PTR [r10+0x0],r10b
 1001ed4:	push   rdx
 1001ed5:	add    BYTE PTR [rdi+0x0],cl
 1001ed8:	push   rdx
 1001ed9:	add    BYTE PTR [rax+rax*1+0x4f],cl
 1001edd:	add    BYTE PTR [rdi+0x0],al
	...
 1001ee8:	pop    rsp
 1001ee9:	add    BYTE PTR [rax+rax*1+0x2e],bl
 1001eed:	add    BYTE PTR [rax+rax*1+0x70],bl
 1001ef1:	add    BYTE PTR [rcx+0x0],ch
 1001ef4:	jo     0x1001ef6
 1001ef6:	add    BYTE PTR gs:[rax+rax*1+0x6d],bl
 1001efb:	add    BYTE PTR [rbx+0x0],dh
 1001efe:	data16 add BYTE PTR [rax+rax*1+0x65],dh
 1001f03:	add    BYTE PTR [rax+rax*1+0x0],bl
 1001f07:	add    BYTE PTR [rbp+0x0],cl
 1001f0a:	push   rbx
 1001f0b:	add    BYTE PTR [rbx+0x0],dl
 1001f0e:	push   rcx
 1001f0f:	add    BYTE PTR [rax+rax*1+0x46],cl
 1001f13:	add    BYTE PTR [rax+rax*1+0x4c],al
 1001f17:	add    BYTE PTR [rcx+0x0],ah
 1001f1a:	jne    0x1001f1c
 1001f1c:	outs   dx,BYTE PTR ds:[rsi]
 1001f1d:	add    BYTE PTR [rbx+0x0],ah
 1001f20:	push   0x72006500
	...
 1001f2d:	add    BYTE PTR [rax],al
 1001f2f:	add    BYTE PTR [rdi+0x0],cl
 1001f32:	cmp    al,BYTE PTR [rax]
 1001f34:	and    eax,0x47007300
 1001f39:	add    BYTE PTR [rdx],bh
 1001f3b:	add    BYTE PTR [rip+0x44007300],ah        # 0x45009241
 1001f41:	add    BYTE PTR [rdx],bh
 1001f43:	add    BYTE PTR [rax],ch
 1001f45:	add    BYTE PTR [rcx+0x0],al
 1001f48:	cmp    eax,DWORD PTR [rax]
 1001f4a:	cmp    eax,DWORD PTR [rax]
 1001f4c:	xor    BYTE PTR [rax],al
 1001f4e:	js     0x1001f50
 1001f50:	and    eax,0x3b007800
 1001f55:	add    BYTE PTR [rbx],bh
 1001f57:	add    BYTE PTR [rbx],bh
 1001f59:	add    BYTE PTR [rip+0x29007300],ah        # 0x2a00925f
 1001f5f:	add    BYTE PTR [rax],ch
 1001f61:	add    BYTE PTR [rcx+0x0],al
 1001f64:	cmp    eax,DWORD PTR [rax]
 1001f66:	cmp    eax,DWORD PTR [rax]
 1001f68:	xor    BYTE PTR [rax],al
 1001f6a:	js     0x1001f6c
 1001f6c:	and    eax,0x3b007800
 1001f71:	add    BYTE PTR [rbx],bh
 1001f73:	add    BYTE PTR [rbx],bh
 1001f75:	add    BYTE PTR [rip+0x29007300],ah        # 0x2a00927b
 1001f7b:	add    BYTE PTR [rax],ch
 1001f7d:	add    BYTE PTR [rcx+0x0],al
 1001f80:	cmp    eax,DWORD PTR [rax]
 1001f82:	cmp    eax,DWORD PTR [rax]
 1001f84:	xor    BYTE PTR [rax],al
 1001f86:	js     0x1001f88
 1001f88:	and    eax,0x3b007800
 1001f8d:	add    BYTE PTR [rbx],bh
 1001f8f:	add    BYTE PTR [rbx],bh
 1001f91:	add    BYTE PTR [rdx+0x0],al
 1001f94:	add    BYTE PTR [r9],bpl
	...
 1001f9f:	add    BYTE PTR [rdx],ah
 1001fa1:	add    eax,0x21993
 1001fa6:	add    BYTE PTR [rax],al
 1001fa8:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1001fa9:	ins    DWORD PTR es:[rdi],dx
	...
 1001fb2:	add    BYTE PTR [rax],al
 1001fb4:	or     eax,DWORD PTR [rax]
 1001fb6:	add    BYTE PTR [rax],al
 1001fb8:	mov    ah,0x6d
 1001fba:	add    BYTE PTR [rax],al
 1001fbc:	and    BYTE PTR [rax],al
 1001fbe:	add    BYTE PTR [rax],al
 1001fc0:	add    BYTE PTR [rax],al
 1001fc2:	add    BYTE PTR [rax],al
 1001fc4:	add    DWORD PTR [rax],eax
 1001fc6:	add    BYTE PTR [rax],al
 1001fc8:	and    al,BYTE PTR [rip+0x11993]        # 0x1013961
 1001fce:	add    BYTE PTR [rax],al
 1001fd0:	sub    BYTE PTR [rsi+0x0],ch
	...
 1001fdb:	add    BYTE PTR [rbx],cl
 1001fdd:	add    BYTE PTR [rax],al
 1001fdf:	add    BYTE PTR [rax],dh
 1001fe1:	outs   dx,BYTE PTR ds:[rsi]
 1001fe2:	add    BYTE PTR [rax],al
 1001fe4:	pop    rax
 1001fe5:	add    BYTE PTR [rax],al
 1001fe7:	add    BYTE PTR [rax],al
 1001fe9:	add    BYTE PTR [rax],al
 1001feb:	add    BYTE PTR [rcx],al
 1001fed:	add    BYTE PTR [rax],al
 1001fef:	add    BYTE PTR [rdx],ah
 1001ff1:	add    eax,0x31993
 1001ff6:	add    BYTE PTR [rax],al
 1001ff8:	call   0x100206b
 1001ffd:	add    BYTE PTR [rax],al
 1001fff:	add    BYTE PTR [rax],al
 1002001:	add    BYTE PTR [rax],al
 1002003:	add    BYTE PTR [rdi],ch
 1002005:	add    BYTE PTR [rax],al
 1002007:	add    BYTE PTR [rax],al
 1002009:	outs   dx,DWORD PTR ds:[rsi]
 100200a:	add    BYTE PTR [rax],al
 100200c:	(bad)  
 100200d:	add    BYTE PTR [rax],al
 100200f:	add    BYTE PTR [rax],al
 1002011:	add    BYTE PTR [rax],al
 1002013:	add    BYTE PTR [rcx],al
 1002015:	add    BYTE PTR [rax],al
 1002017:	add    BYTE PTR [rdx+0x53],dl
 100201a:	rex.R push rbx
 100201c:	fstp   TBYTE PTR [rcx+0x16]
 100201f:	xchg   ecx,eax
 1002020:	sub    eax,0x8c4801a0
 1002025:	and    al,0x88
 1002027:	rol    BYTE PTR [rax+0x1cb0e37],1
 100202d:	add    BYTE PTR [rax],al
 100202f:	add    BYTE PTR [rsi+0x64],ah
 1002032:	ins    BYTE PTR es:[rdi],dx
 1002033:	(bad)  
 1002034:	jne    0x10020a4
 1002036:	movsxd ebp,DWORD PTR [rax+0x65]
 1002039:	jb     0x1002069
 100203b:	jo     0x10020a1
 100203d:	(bad)  
	...
 10020ce:	add    BYTE PTR [rax],al
 10020d0:	mov    QWORD PTR [rsp+0x18],r8
 10020d5:	mov    QWORD PTR [rsp+0x20],r9
 10020da:	push   rbx
 10020db:	push   rsi
 10020dc:	sub    rsp,0x28
 10020e0:	xor    ebx,ebx
 10020e2:	mov    rsi,rcx
 10020e5:	mov    eax,ebx
 10020e7:	test   rdx,rdx
 10020ea:	je     0x10020f5
 10020ec:	cmp    rdx,0x7fffffff
 10020f3:	jbe    0x10020fa
 10020f5:	mov    eax,0x80070057
 10020fa:	test   eax,eax
 10020fc:	js     0x1002144
 10020fe:	mov    QWORD PTR [rsp+0x20],rdi
 1002103:	lea    rdi,[rdx-0x1]
 1002107:	lea    r9,[rsp+0x58]
 100210c:	mov    rdx,rdi
 100210f:	call   QWORD PTR [rip+0xfffffffffffff23b]        # 0x1001350
 1002115:	test   eax,eax
 1002117:	js     0x1002134
 1002119:	cdqe   
 100211b:	cmp    rax,rdi
 100211e:	ja     0x1002134
 1002120:	jne    0x100213d
 1002122:	mov    WORD PTR [rsi+rdi*2],bx
 1002126:	mov    rdi,QWORD PTR [rsp+0x20]
 100212b:	mov    eax,ebx
 100212d:	add    rsp,0x28
 1002131:	pop    rsi
 1002132:	pop    rbx
 1002133:	ret    
 1002134:	mov    WORD PTR [rsi+rdi*2],bx
 1002138:	mov    ebx,0x8007007a
 100213d:	mov    rdi,QWORD PTR [rsp+0x20]
 1002142:	mov    eax,ebx
 1002144:	add    rsp,0x28
 1002148:	pop    rsi
 1002149:	pop    rbx
 100214a:	ret    
 100214b:	int3   
 100214c:	int3   
 100214d:	int3   
 100214e:	int3   
 100214f:	int3   
 1002150:	int3   
 1002151:	int3   
 1002152:	int3   
 1002153:	int3   
 1002154:	int3   
 1002155:	int3   
 1002156:	int3   
 1002157:	int3   
 1002158:	int3   
 1002159:	int3   
 100215a:	int3   
 100215b:	int3   
 100215c:	int3   
 100215d:	int3   
 100215e:	int3   
 100215f:	int3   
 1002160:	mov    r11,rsp
 1002163:	mov    QWORD PTR [r11+0x8],rcx
 1002167:	mov    QWORD PTR [r11+0x10],rdx
 100216b:	mov    QWORD PTR [r11+0x18],r8
 100216f:	mov    QWORD PTR [r11+0x20],r9
 1002173:	push   rbx
 1002174:	push   rbp
 1002175:	sub    rsp,0x898
 100217c:	mov    rax,QWORD PTR [rip+0x5f8d]        # 0x1008110
 1002183:	xor    rax,rsp
 1002186:	mov    QWORD PTR [rsp+0x870],rax
 100218e:	mov    QWORD PTR [r11-0x20],rdi
 1002192:	mov    QWORD PTR [r11-0x28],r14
 1002196:	lea    rcx,[rsp+0x58]
 100219b:	lea    r14,[r11+0x10]
 100219f:	call   QWORD PTR [rip+0xfffffffffffff033]        # 0x10011d8
 10021a5:	movzx  ecx,WORD PTR [rsp+0x62]
 10021aa:	movzx  edx,WORD PTR [rsp+0x60]
 10021af:	movzx  r8d,WORD PTR [rsp+0x5e]
 10021b5:	movzx  r11d,WORD PTR [rsp+0x66]
 10021bb:	movzx  eax,WORD PTR [rsp+0x64]
 10021c0:	movzx  r10d,WORD PTR [rsp+0x5a]
 10021c6:	movzx  r9d,WORD PTR [rsp+0x58]
 10021cc:	mov    DWORD PTR [rsp+0x48],r11d
 10021d1:	mov    DWORD PTR [rsp+0x40],eax
 10021d5:	mov    DWORD PTR [rsp+0x38],ecx
 10021d9:	mov    DWORD PTR [rsp+0x30],edx
 10021dd:	mov    DWORD PTR [rsp+0x28],r8d
 10021e2:	lea    rcx,[rsp+0x70]
 10021e7:	lea    r8,[rip+0xfffffffffffff5a2]        # 0x1001790
 10021ee:	mov    edx,0x400
 10021f3:	mov    DWORD PTR [rsp+0x20],r10d
 10021f8:	call   0x10020d0
 10021fd:	or     rbx,0xffffffffffffffff
 1002201:	lea    r11,[rsp+0x70]
 1002206:	mov    rax,rbx
 1002209:	nop    DWORD PTR [rax+0x0]
 1002210:	inc    rax
 1002213:	cmp    WORD PTR [r11+rax*2],0x0
 1002219:	jne    0x1002210
 100221b:	mov    ecx,eax
 100221d:	mov    edi,0x400
 1002222:	xor    ebp,ebp
 1002224:	sub    rdi,rcx
 1002227:	je     0x1002276
 1002229:	cmp    rdi,0x7fffffff
 1002230:	ja     0x1002276
 1002232:	mov    r8,QWORD PTR [rsp+0x8b0]
 100223a:	mov    QWORD PTR [rsp+0x890],rsi
 1002242:	lea    rsi,[rsp+0x70]
 1002247:	lea    rsi,[rsi+rcx*2]
 100224b:	dec    rdi
 100224e:	mov    r9,r14
 1002251:	mov    rcx,rsi
 1002254:	mov    rdx,rdi
 1002257:	call   QWORD PTR [rip+0xfffffffffffff0f3]        # 0x1001350
 100225d:	test   eax,eax
 100225f:	js     0x100226a
 1002261:	cdqe   
 1002263:	cmp    rax,rdi
 1002266:	ja     0x100226a
 1002268:	jne    0x100226e
 100226a:	mov    WORD PTR [rsi+rdi*2],bp
 100226e:	mov    rsi,QWORD PTR [rsp+0x890]
 1002276:	mov    r14,QWORD PTR [rsp+0x880]
 100227e:	mov    rdi,QWORD PTR [rsp+0x888]
 1002286:	lea    rax,[rsp+0x70]
 100228b:	nop    DWORD PTR [rax+rax*1+0x0]
 1002290:	inc    rbx
 1002293:	cmp    WORD PTR [rax+rbx*2],bp
 1002297:	jne    0x1002290
 1002299:	lea    eax,[rbx+0x2]
 100229c:	cmp    eax,0x400
 10022a1:	ja     0x10022bd
 10022a3:	mov    eax,ebx
 10022a5:	mov    ecx,0xd
 10022aa:	inc    ebx
 10022ac:	mov    WORD PTR [rsp+rax*2+0x70],cx
 10022b1:	mov    ecx,0xa
 10022b6:	mov    WORD PTR [rsp+rbx*2+0x70],cx
 10022bb:	inc    ebx
 10022bd:	mov    rcx,QWORD PTR [rip+0x5e94]        # 0x1008158
 10022c4:	lea    r8d,[rbx+rbx*1]
 10022c8:	lea    r9,[rsp+0x50]
 10022cd:	lea    rdx,[rsp+0x70]
 10022d2:	mov    QWORD PTR [rsp+0x20],rbp
 10022d7:	call   QWORD PTR [rip+0xffffffffffffef3b]        # 0x1001218
 10022dd:	mov    rcx,QWORD PTR [rsp+0x870]
 10022e5:	xor    rcx,rsp
 10022e8:	call   0x1003f60
 10022ed:	add    rsp,0x898
 10022f4:	pop    rbp
 10022f5:	pop    rbx
 10022f6:	ret    
 10022f7:	int3   
 10022f8:	int3   
 10022f9:	int3   
 10022fa:	int3   
 10022fb:	int3   
 10022fc:	int3   
 10022fd:	int3   
 10022fe:	int3   
 10022ff:	int3   
 1002300:	mov    rax,rsp
 1002303:	push   rbp
 1002304:	push   rdi
 1002305:	push   r12
 1002307:	push   r14
 1002309:	push   r15
 100230b:	lea    rbp,[rax-0x5f]
 100230f:	sub    rsp,0x100
 1002316:	mov    QWORD PTR [rbp-0x69],0xfffffffffffffffe
 100231e:	mov    QWORD PTR [rax+0x18],rbx
 1002322:	mov    QWORD PTR [rax+0x20],rsi
 1002326:	mov    rax,QWORD PTR [rip+0x5de3]        # 0x1008110
 100232d:	xor    rax,rsp
 1002330:	mov    QWORD PTR [rbp+0x27],rax
 1002334:	mov    r14,rdx
 1002337:	mov    rsi,rcx
 100233a:	xor    r15d,r15d
 100233d:	mov    QWORD PTR [rsp+0x38],r15
 1002342:	call   QWORD PTR [rip+0xffffffffffffeef8]        # 0x1001240
 1002348:	mov    rcx,rax
 100234b:	lea    r8,[rsp+0x38]
 1002350:	lea    edx,[r15+0x8]
 1002354:	call   QWORD PTR [rip+0xffffffffffffeca6]        # 0x1001000
 100235a:	test   eax,eax
 100235c:	jne    0x100238a
 100235e:	call   QWORD PTR [rip+0xffffffffffffee84]        # 0x10011e8
 1002364:	mov    ebx,eax
 1002366:	test   eax,eax
 1002368:	jle    0x1002373
 100236a:	movzx  ebx,ax
 100236d:	or     ebx,0x80070000
 1002373:	mov    rcx,QWORD PTR [rsp+0x38]
 1002378:	test   rcx,rcx
 100237b:	je     0x1002383
 100237d:	call   QWORD PTR [rip+0xffffffffffffee3d]        # 0x10011c0
 1002383:	mov    eax,ebx
 1002385:	jmp    0x100276f
 100238a:	mov    DWORD PTR [rsp+0x30],r15d
 100238f:	lea    rax,[rsp+0x30]
 1002394:	mov    QWORD PTR [rsp+0x20],rax
 1002399:	xor    r9d,r9d
 100239c:	xor    r8d,r8d
 100239f:	lea    edx,[r9+0x1]
 10023a3:	mov    rcx,QWORD PTR [rsp+0x38]
 10023a8:	call   QWORD PTR [rip+0xffffffffffffec62]        # 0x1001010
 10023ae:	test   eax,eax
 10023b0:	je     0x10023cc
 10023b2:	mov    rcx,QWORD PTR [rsp+0x38]
 10023b7:	test   rcx,rcx
 10023ba:	je     0x10023c2
 10023bc:	call   QWORD PTR [rip+0xffffffffffffedfe]        # 0x10011c0
 10023c2:	mov    eax,0x8000ffff
 10023c7:	jmp    0x100276f
 10023cc:	call   QWORD PTR [rip+0xffffffffffffee16]        # 0x10011e8
 10023d2:	cmp    eax,0x7a
 10023d5:	je     0x10023ee
 10023d7:	call   QWORD PTR [rip+0xffffffffffffee0b]        # 0x10011e8
 10023dd:	mov    ebx,eax
 10023df:	test   eax,eax
 10023e1:	jle    0x10023ec
 10023e3:	movzx  ebx,ax
 10023e6:	or     ebx,0x80070000
 10023ec:	jmp    0x1002373
 10023ee:	mov    rbx,r15
 10023f1:	mov    QWORD PTR [rbp-0x71],rbx
 10023f5:	mov    r9d,DWORD PTR [rsp+0x30]
 10023fa:	cmp    r9d,0x80
 1002401:	jbe    0x1002452
 1002403:	mov    ecx,r9d
 1002406:	call   QWORD PTR [rip+0xffffffffffffef34]        # 0x1001340
 100240c:	mov    rbx,rax
 100240f:	test   rax,rax
 1002412:	je     0x100241c
 1002414:	xor    ecx,ecx
 1002416:	call   QWORD PTR [rip+0xffffffffffffef2c]        # 0x1001348
 100241c:	mov    QWORD PTR [rbp-0x71],rbx
 1002420:	mov    rdi,rbx
 1002423:	test   rbx,rbx
 1002426:	jne    0x100244b
 1002428:	xor    ecx,ecx
 100242a:	call   QWORD PTR [rip+0xffffffffffffef18]        # 0x1001348
 1002430:	nop
 1002431:	mov    rcx,QWORD PTR [rsp+0x38]
 1002436:	test   rcx,rcx
 1002439:	je     0x1002441
 100243b:	call   QWORD PTR [rip+0xffffffffffffed7f]        # 0x10011c0
 1002441:	mov    eax,0x8007000e
 1002446:	jmp    0x100276f
 100244b:	mov    r9d,DWORD PTR [rsp+0x30]
 1002450:	jmp    0x1002456
 1002452:	lea    rdi,[rbp-0x59]
 1002456:	lea    rax,[rsp+0x30]
 100245b:	mov    QWORD PTR [rsp+0x20],rax
 1002460:	mov    r8,rdi
 1002463:	mov    edx,0x1
 1002468:	mov    rcx,QWORD PTR [rsp+0x38]
 100246d:	call   QWORD PTR [rip+0xffffffffffffeb9d]        # 0x1001010
 1002473:	test   eax,eax
 1002475:	jne    0x10024ad
 1002477:	call   QWORD PTR [rip+0xffffffffffffed6b]        # 0x10011e8
 100247d:	mov    edi,eax
 100247f:	test   eax,eax
 1002481:	jle    0x100248c
 1002483:	movzx  edi,ax
 1002486:	or     edi,0x80070000
 100248c:	mov    rcx,rbx
 100248f:	call   QWORD PTR [rip+0xffffffffffffeeb3]        # 0x1001348
 1002495:	nop
 1002496:	mov    rcx,QWORD PTR [rsp+0x38]
 100249b:	test   rcx,rcx
 100249e:	je     0x10024a6
 10024a0:	call   QWORD PTR [rip+0xffffffffffffed1a]        # 0x10011c0
 10024a6:	mov    eax,edi
 10024a8:	jmp    0x100276f
 10024ad:	mov    QWORD PTR [rsp+0x48],r15
 10024b2:	lea    rdx,[rsp+0x48]
 10024b7:	mov    rcx,QWORD PTR [rdi]
 10024ba:	call   QWORD PTR [rip+0xffffffffffffebf0]        # 0x10010b0
 10024c0:	test   eax,eax
 10024c2:	jne    0x10024e5
 10024c4:	call   QWORD PTR [rip+0xffffffffffffed1e]        # 0x10011e8
 10024ca:	mov    edi,eax
 10024cc:	test   eax,eax
 10024ce:	jle    0x10024d9
 10024d0:	movzx  edi,ax
 10024d3:	or     edi,0x80070000
 10024d9:	mov    rcx,rbx
 10024dc:	call   QWORD PTR [rip+0xffffffffffffee66]        # 0x1001348
 10024e2:	nop
 10024e3:	jmp    0x1002496
 10024e5:	mov    rax,QWORD PTR [rsp+0x48]
 10024ea:	or     r12,0xffffffffffffffff
 10024ee:	mov    rdi,r12
 10024f1:	inc    rdi
 10024f4:	cmp    WORD PTR [rax+rdi*2],0x0
 10024f9:	jne    0x10024f1
 10024fb:	lea    ecx,[rdi+0x1]
 10024fe:	mov    eax,0x2
 1002503:	mul    rcx
 1002506:	cmovo  rax,r12
 100250a:	mov    rcx,rax
 100250d:	call   QWORD PTR [rip+0xffffffffffffee2d]        # 0x1001340
 1002513:	mov    rcx,rax
 1002516:	mov    QWORD PTR [rsi],rax
 1002519:	test   rax,rax
 100251c:	jne    0x1002539
 100251e:	mov    rcx,QWORD PTR [rsp+0x48]
 1002523:	call   QWORD PTR [rip+0xffffffffffffec8f]        # 0x10011b8
 1002529:	nop
 100252a:	mov    rcx,rbx
 100252d:	call   QWORD PTR [rip+0xffffffffffffee15]        # 0x1001348
 1002533:	nop
 1002534:	jmp    0x1002431
 1002539:	mov    eax,edi
 100253b:	lea    rdi,[rax+rax*1]
 100253f:	mov    r8,rdi
 1002542:	mov    rdx,QWORD PTR [rsp+0x48]
 1002547:	call   0x100648a
 100254c:	mov    r11,QWORD PTR [rsi]
 100254f:	mov    WORD PTR [rdi+r11*1],r15w
 1002554:	mov    rcx,QWORD PTR [rsp+0x48]
 1002559:	call   QWORD PTR [rip+0xffffffffffffec59]        # 0x10011b8
 100255f:	mov    DWORD PTR [rsp+0x30],r15d
 1002564:	lea    rax,[rsp+0x30]
 1002569:	mov    QWORD PTR [rsp+0x20],rax
 100256e:	xor    r9d,r9d
 1002571:	xor    r8d,r8d
 1002574:	lea    edx,[r9+0x5]
 1002578:	mov    rcx,QWORD PTR [rsp+0x38]
 100257d:	call   QWORD PTR [rip+0xffffffffffffea8d]        # 0x1001010
 1002583:	test   eax,eax
 1002585:	je     0x1002596
 1002587:	mov    rcx,rbx
 100258a:	call   QWORD PTR [rip+0xffffffffffffedb8]        # 0x1001348
 1002590:	nop
 1002591:	jmp    0x10023b2
 1002596:	call   QWORD PTR [rip+0xffffffffffffec4c]        # 0x10011e8
 100259c:	cmp    eax,0x7a
 100259f:	je     0x10025c5
 10025a1:	call   QWORD PTR [rip+0xffffffffffffec41]        # 0x10011e8
 10025a7:	mov    edi,eax
 10025a9:	test   eax,eax
 10025ab:	jle    0x10025b6
 10025ad:	movzx  edi,ax
 10025b0:	or     edi,0x80070000
 10025b6:	mov    rcx,rbx
 10025b9:	call   QWORD PTR [rip+0xffffffffffffed89]        # 0x1001348
 10025bf:	nop
 10025c0:	jmp    0x1002496
 10025c5:	mov    rdi,r15
 10025c8:	mov    QWORD PTR [rbp-0x79],r15
 10025cc:	mov    r9d,DWORD PTR [rsp+0x30]
 10025d1:	cmp    r9d,0x80
 10025d8:	jbe    0x100261e
 10025da:	mov    ecx,r9d
 10025dd:	call   QWORD PTR [rip+0xffffffffffffed5d]        # 0x1001340
 10025e3:	mov    rdi,rax
 10025e6:	test   rax,rax
 10025e9:	je     0x10025f3
 10025eb:	xor    ecx,ecx
 10025ed:	call   QWORD PTR [rip+0xffffffffffffed55]        # 0x1001348
 10025f3:	mov    QWORD PTR [rbp-0x79],rdi
 10025f7:	mov    rsi,rdi
 10025fa:	test   rdi,rdi
 10025fd:	jne    0x1002617
 10025ff:	xor    ecx,ecx
 1002601:	call   QWORD PTR [rip+0xffffffffffffed41]        # 0x1001348
 1002607:	nop
 1002608:	mov    rcx,rbx
 100260b:	call   QWORD PTR [rip+0xffffffffffffed37]        # 0x1001348
 1002611:	nop
 1002612:	jmp    0x1002431
 1002617:	mov    r9d,DWORD PTR [rsp+0x30]
 100261c:	jmp    0x1002622
 100261e:	lea    rsi,[rbp-0x59]
 1002622:	lea    rax,[rsp+0x30]
 1002627:	mov    QWORD PTR [rsp+0x20],rax
 100262c:	mov    r8,rsi
 100262f:	mov    edx,0x5
 1002634:	mov    rcx,QWORD PTR [rsp+0x38]
 1002639:	call   QWORD PTR [rip+0xffffffffffffe9d1]        # 0x1001010
 100263f:	test   eax,eax
 1002641:	jne    0x1002683
 1002643:	call   QWORD PTR [rip+0xffffffffffffeb9f]        # 0x10011e8
 1002649:	mov    esi,eax
 100264b:	test   eax,eax
 100264d:	jle    0x1002658
 100264f:	movzx  esi,ax
 1002652:	or     esi,0x80070000
 1002658:	mov    rcx,rdi
 100265b:	call   QWORD PTR [rip+0xffffffffffffece7]        # 0x1001348
 1002661:	nop
 1002662:	mov    rcx,rbx
 1002665:	call   QWORD PTR [rip+0xffffffffffffecdd]        # 0x1001348
 100266b:	nop
 100266c:	mov    rcx,QWORD PTR [rsp+0x38]
 1002671:	test   rcx,rcx
 1002674:	je     0x100267c
 1002676:	call   QWORD PTR [rip+0xffffffffffffeb44]        # 0x10011c0
 100267c:	mov    eax,esi
 100267e:	jmp    0x100276f
 1002683:	mov    QWORD PTR [rsp+0x40],r15
 1002688:	lea    rdx,[rsp+0x40]
 100268d:	mov    rcx,QWORD PTR [rsi]
 1002690:	call   QWORD PTR [rip+0xffffffffffffea1a]        # 0x10010b0
 1002696:	test   eax,eax
 1002698:	jne    0x10026c5
 100269a:	call   QWORD PTR [rip+0xffffffffffffeb48]        # 0x10011e8
 10026a0:	mov    esi,eax
 10026a2:	test   eax,eax
 10026a4:	jle    0x10026af
 10026a6:	movzx  esi,ax
 10026a9:	or     esi,0x80070000
 10026af:	mov    rcx,rdi
 10026b2:	call   QWORD PTR [rip+0xffffffffffffec90]        # 0x1001348
 10026b8:	nop
 10026b9:	mov    rcx,rbx
 10026bc:	call   QWORD PTR [rip+0xffffffffffffec86]        # 0x1001348
 10026c2:	nop
 10026c3:	jmp    0x100266c
 10026c5:	mov    rcx,QWORD PTR [rsp+0x40]
 10026ca:	mov    rsi,r12
 10026cd:	nop    DWORD PTR [rax]
 10026d0:	inc    rsi
 10026d3:	cmp    WORD PTR [rcx+rsi*2],0x0
 10026d8:	jne    0x10026d0
 10026da:	lea    edx,[rsi+0x1]
 10026dd:	mov    eax,0x2
 10026e2:	mul    rdx
 10026e5:	cmovo  rax,r12
 10026e9:	mov    rcx,rax
 10026ec:	call   QWORD PTR [rip+0xffffffffffffec4e]        # 0x1001340
 10026f2:	mov    rcx,rax
 10026f5:	mov    QWORD PTR [r14],rax
 10026f8:	test   rax,rax
 10026fb:	jne    0x1002722
 10026fd:	mov    rcx,QWORD PTR [rsp+0x40]
 1002702:	call   QWORD PTR [rip+0xffffffffffffeab0]        # 0x10011b8
 1002708:	nop
 1002709:	mov    rcx,rdi
 100270c:	call   QWORD PTR [rip+0xffffffffffffec36]        # 0x1001348
 1002712:	nop
 1002713:	mov    rcx,rbx
 1002716:	call   QWORD PTR [rip+0xffffffffffffec2c]        # 0x1001348
 100271c:	nop
 100271d:	jmp    0x1002431
 1002722:	mov    eax,esi
 1002724:	lea    rsi,[rax+rax*1]
 1002728:	mov    r8,rsi
 100272b:	mov    rdx,QWORD PTR [rsp+0x40]
 1002730:	call   0x100648a
 1002735:	mov    r11,QWORD PTR [r14]
 1002738:	mov    WORD PTR [rsi+r11*1],r15w
 100273d:	mov    rcx,QWORD PTR [rsp+0x40]
 1002742:	call   QWORD PTR [rip+0xffffffffffffea70]        # 0x10011b8
 1002748:	nop
 1002749:	mov    rcx,rdi
 100274c:	call   QWORD PTR [rip+0xffffffffffffebf6]        # 0x1001348
 1002752:	nop
 1002753:	mov    rcx,rbx
 1002756:	call   QWORD PTR [rip+0xffffffffffffebec]        # 0x1001348
 100275c:	nop
 100275d:	mov    rcx,QWORD PTR [rsp+0x38]
 1002762:	test   rcx,rcx
 1002765:	je     0x100276d
 1002767:	call   QWORD PTR [rip+0xffffffffffffea53]        # 0x10011c0
 100276d:	xor    eax,eax
 100276f:	mov    rcx,QWORD PTR [rbp+0x27]
 1002773:	xor    rcx,rsp
 1002776:	call   0x1003f60
 100277b:	lea    r11,[rsp+0x100]
 1002783:	mov    rbx,QWORD PTR [r11+0x40]
 1002787:	mov    rsi,QWORD PTR [r11+0x48]
 100278b:	mov    rsp,r11
 100278e:	pop    r15
 1002790:	pop    r14
 1002792:	pop    r12
 1002794:	pop    rdi
 1002795:	pop    rbp
 1002796:	ret    
 1002797:	int3   
 1002798:	int3   
 1002799:	int3   
 100279a:	int3   
 100279b:	int3   
 100279c:	int3   
 100279d:	int3   
 100279e:	int3   
 100279f:	int3   
 10027a0:	sub    rsp,0x488
 10027a7:	mov    rax,QWORD PTR [rip+0x5962]        # 0x1008110
 10027ae:	xor    rax,rsp
 10027b1:	mov    QWORD PTR [rsp+0x470],rax
 10027b9:	lea    r8,[rsp+0x40]
 10027be:	lea    rdx,[rsp+0x260]
 10027c6:	lea    rcx,[rip+0x6c33]        # 0x1009400
 10027cd:	mov    DWORD PTR [rsp+0x40],0x104
 10027d5:	call   QWORD PTR [rip+0x5985]        # 0x1008160
 10027db:	test   eax,eax
 10027dd:	jne    0x10027fd
 10027df:	call   QWORD PTR [rip+0xffffffffffffea03]        # 0x10011e8
 10027e5:	mov    rcx,QWORD PTR [rsp+0x470]
 10027ed:	xor    rcx,rsp
 10027f0:	call   0x1003f60
 10027f5:	add    rsp,0x488
 10027fc:	ret    
 10027fd:	lea    r9,[rsp+0x260]
 1002805:	lea    r8,[rip+0xffffffffffffefd4]        # 0x10017e0
 100280c:	lea    rcx,[rsp+0x50]
 1002811:	mov    edx,0x104
 1002816:	mov    QWORD PTR [rsp+0x480],rdi
 100281e:	call   0x10020d0
 1002823:	mov    edi,0x1
 1002828:	lea    r8,[rsp+0x30]
 100282d:	lea    rcx,[rsp+0x50]
 1002832:	mov    edx,edi
 1002834:	mov    DWORD PTR [rsp+0x30],0x0
 100283c:	call   QWORD PTR [rip+0x5926]        # 0x1008168
 1002842:	test   eax,eax
 1002844:	jne    0x100284e
 1002846:	lea    eax,[rdi+0x1]
 1002849:	jmp    0x1002910
 100284e:	mov    r9d,DWORD PTR [rsp+0x30]
 1002853:	lea    rax,[rsp+0x38]
 1002858:	lea    rdx,[rsp+0x50]
 100285d:	xor    r8d,r8d
 1002860:	mov    rcx,0xffffffff80000002
 1002867:	mov    QWORD PTR [rsp+0x20],rax
 100286c:	call   QWORD PTR [rip+0xffffffffffffe81e]        # 0x1001090
 1002872:	test   eax,eax
 1002874:	jne    0x1002910
 100287a:	mov    rcx,QWORD PTR [rsp+0x38]
 100287f:	lea    rax,[rip+0x58ca]        # 0x1008150
 1002886:	lea    rdx,[rip+0xffffffffffffef6b]        # 0x10017f8
 100288d:	mov    QWORD PTR [rsp+0x28],rax
 1002892:	lea    rax,[rip+0x6967]        # 0x1009200
 1002899:	xor    r9d,r9d
 100289c:	xor    r8d,r8d
 100289f:	mov    QWORD PTR [rsp+0x490],rbx
 10028a7:	mov    QWORD PTR [rsp+0x20],rax
 10028ac:	call   QWORD PTR [rip+0xffffffffffffe77e]        # 0x1001030
 10028b2:	mov    rcx,QWORD PTR [rsp+0x38]
 10028b7:	lea    rdx,[rip+0xffffffffffffef52]        # 0x1001810
 10028be:	mov    ebx,eax
 10028c0:	lea    rax,[rip+0x588d]        # 0x1008154
 10028c7:	xor    r9d,r9d
 10028ca:	mov    QWORD PTR [rsp+0x28],rax
 10028cf:	lea    rax,[rip+0x672a]        # 0x1009000
 10028d6:	xor    r8d,r8d
 10028d9:	mov    QWORD PTR [rsp+0x20],rax
 10028de:	call   QWORD PTR [rip+0xffffffffffffe74c]        # 0x1001030
 10028e4:	mov    rcx,QWORD PTR [rsp+0x38]
 10028e9:	or     ebx,eax
 10028eb:	call   QWORD PTR [rip+0xffffffffffffe7c7]        # 0x10010b8
 10028f1:	movzx  r11d,BYTE PTR [rip+0x6701]        # 0x1008ffa
 10028f9:	test   ebx,ebx
 10028fb:	mov    eax,ebx
 10028fd:	mov    rbx,QWORD PTR [rsp+0x490]
 1002905:	cmove  r11d,edi
 1002909:	mov    BYTE PTR [rip+0x66ea],r11b        # 0x1008ffa
 1002910:	mov    rdi,QWORD PTR [rsp+0x480]
 1002918:	mov    rcx,QWORD PTR [rsp+0x470]
 1002920:	xor    rcx,rsp
 1002923:	call   0x1003f60
 1002928:	add    rsp,0x488
 100292f:	ret    
 1002930:	int3   
 1002931:	int3   
 1002932:	int3   
 1002933:	int3   
 1002934:	int3   
 1002935:	int3   
 1002936:	int3   
 1002937:	int3   
 1002938:	int3   
 1002939:	int3   
 100293a:	int3   
 100293b:	int3   
 100293c:	int3   
 100293d:	int3   
 100293e:	int3   
 100293f:	int3   
 1002940:	mov    rax,rsp
 1002943:	push   rsi
 1002944:	push   rdi
 1002945:	push   r14
 1002947:	sub    rsp,0x70
 100294b:	mov    QWORD PTR [rax-0x30],0xfffffffffffffffe
 1002953:	mov    QWORD PTR [rax+0x8],rbx
 1002957:	mov    QWORD PTR [rax+0x10],rbp
 100295b:	mov    rsi,r9
 100295e:	mov    r14,rdx
 1002961:	mov    rdi,rcx
 1002964:	mov    ebp,r8d
 1002967:	mov    eax,0x2
 100296c:	mul    rbp
 100296f:	mov    rcx,0xffffffffffffffff
 1002976:	cmovo  rax,rcx
 100297a:	mov    rcx,rax
 100297d:	call   QWORD PTR [rip+0xffffffffffffe9bd]        # 0x1001340
 1002983:	mov    rbx,rax
 1002986:	mov    QWORD PTR [rsp+0x60],rax
 100298b:	test   rax,rax
 100298e:	jne    0x10029a2
 1002990:	xor    ecx,ecx
 1002992:	call   QWORD PTR [rip+0xffffffffffffe9b0]        # 0x1001348
 1002998:	mov    eax,0x8007000e
 100299d:	jmp    0x1002abb
 10029a2:	mov    DWORD PTR [rsp+0x48],0x10000000
 10029aa:	lea    rax,[rip+0x684f]        # 0x1009200
 10029b1:	mov    QWORD PTR [rsp+0x40],rax
 10029b6:	mov    DWORD PTR [rsp+0x38],0x10000000
 10029be:	mov    QWORD PTR [rsp+0x30],rdi
 10029c3:	mov    DWORD PTR [rsp+0x28],0x10000000
 10029cb:	mov    QWORD PTR [rsp+0x20],r14
 10029d0:	mov    r9,rdi
 10029d3:	lea    r8,[rip+0xfffffffffffff556]        # 0x1001f30
 10029da:	mov    rdx,rbp
 10029dd:	mov    rcx,rbx
 10029e0:	call   0x10020d0
 10029e5:	test   eax,eax
 10029e7:	jns    0x10029fc
 10029e9:	mov    rcx,rbx
 10029ec:	call   QWORD PTR [rip+0xffffffffffffe956]        # 0x1001348
 10029f2:	mov    eax,0x8007000e
 10029f7:	jmp    0x1002abb
 10029fc:	xor    eax,eax
 10029fe:	mov    QWORD PTR [rsp+0x50],rax
 1002a03:	mov    DWORD PTR [rsp+0xa0],eax
 1002a0a:	lea    r9,[rsp+0xa0]
 1002a12:	lea    r8,[rsp+0x50]
 1002a17:	lea    edx,[rax+0x1]
 1002a1a:	mov    rcx,rbx
 1002a1d:	call   QWORD PTR [rip+0xffffffffffffe665]        # 0x1001088
 1002a23:	test   eax,eax
 1002a25:	jne    0x1002a59
 1002a27:	call   QWORD PTR [rip+0xffffffffffffe7bb]        # 0x10011e8
 1002a2d:	mov    edi,eax
 1002a2f:	mov    rcx,QWORD PTR [rsp+0x50]
 1002a34:	test   rcx,rcx
 1002a37:	je     0x1002a3f
 1002a39:	call   QWORD PTR [rip+0xffffffffffffe779]        # 0x10011b8
 1002a3f:	test   edi,edi
 1002a41:	jle    0x1002a4c
 1002a43:	movzx  edi,di
 1002a46:	or     edi,0x80070000
 1002a4c:	mov    rcx,rbx
 1002a4f:	call   QWORD PTR [rip+0xffffffffffffe8f3]        # 0x1001348
 1002a55:	mov    eax,edi
 1002a57:	jmp    0x1002abb
 1002a59:	mov    ecx,DWORD PTR [rsp+0xa0]
 1002a60:	call   QWORD PTR [rip+0xffffffffffffe8da]        # 0x1001340
 1002a66:	mov    QWORD PTR [rsi],rax
 1002a69:	test   rax,rax
 1002a6c:	jne    0x1002a8f
 1002a6e:	mov    rcx,QWORD PTR [rsp+0x50]
 1002a73:	test   rcx,rcx
 1002a76:	je     0x1002a7f
 1002a78:	call   QWORD PTR [rip+0xffffffffffffe73a]        # 0x10011b8
 1002a7e:	nop
 1002a7f:	mov    rcx,rbx
 1002a82:	call   QWORD PTR [rip+0xffffffffffffe8c0]        # 0x1001348
 1002a88:	mov    eax,0x8007000e
 1002a8d:	jmp    0x1002abb
 1002a8f:	mov    r8d,DWORD PTR [rsp+0xa0]
 1002a97:	mov    rdx,QWORD PTR [rsp+0x50]
 1002a9c:	mov    rcx,rax
 1002a9f:	call   0x100648a
 1002aa4:	mov    rcx,QWORD PTR [rsp+0x50]
 1002aa9:	call   QWORD PTR [rip+0xffffffffffffe709]        # 0x10011b8
 1002aaf:	nop
 1002ab0:	mov    rcx,rbx
 1002ab3:	call   QWORD PTR [rip+0xffffffffffffe88f]        # 0x1001348
 1002ab9:	xor    eax,eax
 1002abb:	lea    r11,[rsp+0x70]
 1002ac0:	mov    rbx,QWORD PTR [r11+0x20]
 1002ac4:	mov    rbp,QWORD PTR [r11+0x28]
 1002ac8:	mov    rsp,r11
 1002acb:	pop    r14
 1002acd:	pop    rdi
 1002ace:	pop    rsi
 1002acf:	ret    
 1002ad0:	int3   
 1002ad1:	int3   
 1002ad2:	int3   
 1002ad3:	int3   
 1002ad4:	int3   
 1002ad5:	int3   
 1002ad6:	int3   
 1002ad7:	int3   
 1002ad8:	int3   
 1002ad9:	int3   
 1002ada:	int3   
 1002adb:	int3   
 1002adc:	int3   
 1002add:	int3   
 1002ade:	int3   
 1002adf:	int3   
 1002ae0:	mov    rax,rsp
 1002ae3:	push   rdi
 1002ae4:	sub    rsp,0x30
 1002ae8:	mov    QWORD PTR [rax-0x18],0xfffffffffffffffe
 1002af0:	mov    QWORD PTR [rax+0x18],rbx
 1002af4:	mov    QWORD PTR [rax+0x20],rsi
 1002af8:	mov    QWORD PTR [rax+0x8],0x0
 1002b00:	mov    QWORD PTR [rax+0x10],0x0
 1002b08:	lea    rdx,[rax+0x10]
 1002b0c:	lea    rcx,[rax+0x8]
 1002b10:	call   0x1002300
 1002b15:	mov    ebx,eax
 1002b17:	test   eax,eax
 1002b19:	jns    0x1002b39
 1002b1b:	mov    rcx,QWORD PTR [rsp+0x48]
 1002b20:	call   QWORD PTR [rip+0xffffffffffffe822]        # 0x1001348
 1002b26:	nop
 1002b27:	mov    rcx,QWORD PTR [rsp+0x40]
 1002b2c:	call   QWORD PTR [rip+0xffffffffffffe816]        # 0x1001348
 1002b32:	mov    eax,ebx
 1002b34:	jmp    0x1002bee
 1002b39:	mov    rbx,QWORD PTR [rsp+0x40]
 1002b3e:	or     rax,0xffffffffffffffff
 1002b42:	mov    rcx,rax
 1002b45:	inc    rcx
 1002b48:	cmp    WORD PTR [rbx+rcx*2],0x0
 1002b4d:	jne    0x1002b45
 1002b4f:	mov    rdi,QWORD PTR [rsp+0x48]
 1002b54:	mov    rdx,rax
 1002b57:	nop    WORD PTR [rax+rax*1+0x0]
 1002b60:	inc    rdx
 1002b63:	cmp    WORD PTR [rdi+rdx*2],0x0
 1002b68:	jne    0x1002b60
 1002b6a:	lea    r8,[rip+0x668f]        # 0x1009200
 1002b71:	inc    rax
 1002b74:	cmp    WORD PTR [r8+rax*2],0x0
 1002b7a:	jne    0x1002b71
 1002b7c:	lea    r8d,[rax+rcx*2]
 1002b80:	add    edx,0x52
 1002b83:	add    r8d,edx
 1002b86:	lea    r9,[rip+0x68eb]        # 0x1009478
 1002b8d:	mov    rdx,rdi
 1002b90:	mov    rcx,rbx
 1002b93:	call   0x1002940
 1002b98:	mov    esi,eax
 1002b9a:	test   eax,eax
 1002b9c:	jns    0x1002bb5
 1002b9e:	mov    rcx,rdi
 1002ba1:	call   QWORD PTR [rip+0xffffffffffffe7a1]        # 0x1001348
 1002ba7:	nop
 1002ba8:	mov    rcx,rbx
 1002bab:	call   QWORD PTR [rip+0xffffffffffffe797]        # 0x1001348
 1002bb1:	mov    eax,esi
 1002bb3:	jmp    0x1002bee
 1002bb5:	mov    rcx,QWORD PTR [rip+0x68bc]        # 0x1009478
 1002bbc:	mov    QWORD PTR [rip+0x61f5],rcx        # 0x1008db8
 1002bc3:	call   QWORD PTR [rip+0xffffffffffffe497]        # 0x1001060
 1002bc9:	mov    DWORD PTR [rip+0x61e1],eax        # 0x1008db0
 1002bcf:	mov    DWORD PTR [rip+0x61e7],0x0        # 0x1008dc0
 1002bd9:	mov    rcx,rdi
 1002bdc:	call   QWORD PTR [rip+0xffffffffffffe766]        # 0x1001348
 1002be2:	nop
 1002be3:	mov    rcx,rbx
 1002be6:	call   QWORD PTR [rip+0xffffffffffffe75c]        # 0x1001348
 1002bec:	xor    eax,eax
 1002bee:	mov    rbx,QWORD PTR [rsp+0x50]
 1002bf3:	mov    rsi,QWORD PTR [rsp+0x58]
 1002bf8:	add    rsp,0x30
 1002bfc:	pop    rdi
 1002bfd:	ret    
 1002bfe:	int3   
 1002bff:	int3   
 1002c00:	int3   
 1002c01:	int3   
 1002c02:	int3   
 1002c03:	int3   
 1002c04:	int3   
 1002c05:	int3   
 1002c06:	int3   
 1002c07:	int3   
 1002c08:	int3   
 1002c09:	int3   
 1002c0a:	int3   
 1002c0b:	int3   
 1002c0c:	int3   
 1002c0d:	int3   
 1002c0e:	int3   
 1002c0f:	int3   
 1002c10:	rex push rbp
 1002c12:	push   rbx
 1002c13:	push   rsi
 1002c14:	push   r12
 1002c16:	push   r14
 1002c18:	lea    rbp,[rsp-0x2000]
 1002c20:	mov    eax,0x2100
 1002c25:	call   0x10065e0
 1002c2a:	sub    rsp,rax
 1002c2d:	mov    rax,QWORD PTR [rip+0x54dc]        # 0x1008110
 1002c34:	xor    rax,rsp
 1002c37:	mov    QWORD PTR [rbp+0x1ff0],rax
 1002c3e:	mov    r14,rdx
 1002c41:	mov    rsi,rcx
 1002c44:	or     rbx,0xffffffffffffffff
 1002c48:	mov    QWORD PTR [rdx],rbx
 1002c4b:	lea    r8,[rsp+0x50]
 1002c50:	lea    rcx,[rip+0x67a9]        # 0x1009400
 1002c57:	lea    rdx,[rbp-0xe]
 1002c5b:	mov    r12d,0x22
 1002c61:	mov    DWORD PTR [rsp+0x50],0x103
 1002c69:	mov    WORD PTR [rbp-0x10],r12w
 1002c6e:	call   QWORD PTR [rip+0x54fc]        # 0x1008170
 1002c74:	test   eax,eax
 1002c76:	jne    0x1002c93
 1002c78:	call   QWORD PTR [rip+0xffffffffffffe56a]        # 0x10011e8
 1002c7e:	test   eax,eax
 1002c80:	jle    0x1002d6f
 1002c86:	movzx  eax,ax
 1002c89:	or     eax,0x80070000
 1002c8e:	jmp    0x1002d6f
 1002c93:	lea    rax,[rbp-0x10]
 1002c97:	mov    rdx,rbx
 1002c9a:	nop    WORD PTR [rax+rax*1+0x0]
 1002ca0:	inc    rdx
 1002ca3:	cmp    WORD PTR [rax+rdx*2],0x0
 1002ca8:	jne    0x1002ca0
 1002caa:	lea    ecx,[rdx+0x3]
 1002cad:	add    rcx,0xa
 1002cb1:	cmp    rcx,0x104
 1002cb8:	jbe    0x1002cc4
 1002cba:	mov    eax,0x800700a1
 1002cbf:	jmp    0x1002d6f
 1002cc4:	mov    eax,edx
 1002cc6:	add    rax,rax
 1002cc9:	cmp    rax,0x2000
 1002ccf:	jae    0x1002ed8
 1002cd5:	mov    QWORD PTR [rsp+0x2140],rdi
 1002cdd:	lea    rcx,[rbp-0x10]
 1002ce1:	mov    QWORD PTR [rsp+0x2148],r15
 1002ce9:	xor    r15d,r15d
 1002cec:	mov    WORD PTR [rbp+rax*1-0x10],r15w
 1002cf2:	call   QWORD PTR [rip+0xffffffffffffe678]        # 0x1001370
 1002cf8:	lea    r11,[rbp-0x10]
 1002cfc:	mov    rdi,rbx
 1002cff:	nop
 1002d00:	inc    rdi
 1002d03:	cmp    WORD PTR [r11+rdi*2],r15w
 1002d08:	jne    0x1002d00
 1002d0a:	mov    eax,edi
 1002d0c:	add    edi,0xa
 1002d0f:	lea    rcx,[rbp-0x10]
 1002d13:	lea    rcx,[rcx+rax*2]
 1002d17:	mov    rax,QWORD PTR [rip+0xffffffffffffeb0a]        # 0x1001828
 1002d1e:	mov    QWORD PTR [rcx],rax
 1002d21:	mov    rax,QWORD PTR [rip+0xffffffffffffeb08]        # 0x1001830
 1002d28:	mov    QWORD PTR [rcx+0x8],rax
 1002d2c:	mov    eax,DWORD PTR [rip+0xffffffffffffeb06]        # 0x1001838
 1002d32:	mov    DWORD PTR [rcx+0x10],eax
 1002d35:	mov    WORD PTR [rbp+rdi*2-0x10],r12w
 1002d3b:	inc    edi
 1002d3d:	mov    ecx,edi
 1002d3f:	mov    rax,rbx
 1002d42:	inc    rax
 1002d45:	cmp    WORD PTR [rsi+rax*2],r15w
 1002d4a:	jne    0x1002d42
 1002d4c:	inc    rax
 1002d4f:	add    rax,rcx
 1002d52:	cmp    rax,0x1000
 1002d58:	jbe    0x1002d8d
 1002d5a:	mov    eax,0x800700a1
 1002d5f:	mov    rdi,QWORD PTR [rsp+0x2140]
 1002d67:	mov    r15,QWORD PTR [rsp+0x2148]
 1002d6f:	mov    rcx,QWORD PTR [rbp+0x1ff0]
 1002d76:	xor    rcx,rsp
 1002d79:	call   0x1003f60
 1002d7e:	add    rsp,0x2100
 1002d85:	pop    r14
 1002d87:	pop    r12
 1002d89:	pop    rsi
 1002d8a:	pop    rbx
 1002d8b:	pop    rbp
 1002d8c:	ret    
 1002d8d:	mov    r8,rbx
 1002d90:	inc    r8
 1002d93:	cmp    WORD PTR [rsi+r8*2],r15w
 1002d98:	jne    0x1002d90
 1002d9a:	lea    rdx,[rbp-0x10]
 1002d9e:	add    r8,r8
 1002da1:	lea    rcx,[rdx+rdi*2]
 1002da5:	mov    rdx,rsi
 1002da8:	call   0x100648a
 1002dad:	nop    DWORD PTR [rax]
 1002db0:	inc    rbx
 1002db3:	cmp    WORD PTR [rsi+rbx*2],r15w
 1002db8:	jne    0x1002db0
 1002dba:	lea    eax,[rdi+rbx*1]
 1002dbd:	add    rax,rax
 1002dc0:	cmp    rax,0x2000
 1002dc6:	jae    0x1002ed0
 1002dcc:	xor    edx,edx
 1002dce:	lea    rcx,[rbp-0x80]
 1002dd2:	mov    WORD PTR [rbp+rax*1-0x10],r15w
 1002dd8:	lea    r8d,[rdx+0x68]
 1002ddc:	call   0x1006634
 1002de1:	lea    rax,[rip+0xffffffffffffe9a4]        # 0x100178c
 1002de8:	lea    rcx,[rsp+0x58]
 1002ded:	mov    QWORD PTR [rbp-0x70],rax
 1002df1:	xor    eax,eax
 1002df3:	xor    r8d,r8d
 1002df6:	xor    edx,edx
 1002df8:	mov    DWORD PTR [rbp-0x80],0x68
 1002dff:	mov    QWORD PTR [rsp+0x60],r15
 1002e04:	mov    QWORD PTR [rsp+0x68],rax
 1002e09:	mov    QWORD PTR [rsp+0x70],rax
 1002e0e:	mov    QWORD PTR [rsp+0x58],r15
 1002e13:	call   QWORD PTR [rip+0xffffffffffffe567]        # 0x1001380
 1002e19:	mov    rbx,QWORD PTR [rsp+0x58]
 1002e1e:	test   eax,eax
 1002e20:	je     0x1002e66
 1002e22:	lea    rax,[rsp+0x60]
 1002e27:	lea    r8,[rip+0x5f82]        # 0x1008db0
 1002e2e:	lea    rdx,[rbp-0x10]
 1002e32:	mov    QWORD PTR [rsp+0x48],rax
 1002e37:	lea    rax,[rbp-0x80]
 1002e3b:	xor    r9d,r9d
 1002e3e:	mov    QWORD PTR [rsp+0x40],rax
 1002e43:	mov    QWORD PTR [rsp+0x38],r15
 1002e48:	mov    QWORD PTR [rsp+0x30],rbx
 1002e4d:	xor    ecx,ecx
 1002e4f:	mov    DWORD PTR [rsp+0x28],0x8000600
 1002e57:	mov    DWORD PTR [rsp+0x20],r15d
 1002e5c:	call   QWORD PTR [rip+0xffffffffffffe3f6]        # 0x1001258
 1002e62:	test   eax,eax
 1002e64:	jne    0x1002e90
 1002e66:	call   QWORD PTR [rip+0xffffffffffffe37c]        # 0x10011e8
 1002e6c:	mov    edi,eax
 1002e6e:	test   eax,eax
 1002e70:	jle    0x1002e7b
 1002e72:	movzx  edi,ax
 1002e75:	or     edi,0x80070000
 1002e7b:	test   rbx,rbx
 1002e7e:	je     0x1002e89
 1002e80:	mov    rcx,rbx
 1002e83:	call   QWORD PTR [rip+0xffffffffffffe4ff]        # 0x1001388
 1002e89:	mov    eax,edi
 1002e8b:	jmp    0x1002d5f
 1002e90:	mov    rcx,QWORD PTR [rsp+0x68]
 1002e95:	call   QWORD PTR [rip+0xffffffffffffe325]        # 0x10011c0
 1002e9b:	mov    r8d,DWORD PTR [rsp+0x70]
 1002ea0:	lea    rdx,[rip+0x5f29]        # 0x1008dd0
 1002ea7:	lea    rcx,[rip+0xffffffffffffe992]        # 0x1001840
 1002eae:	call   0x1002160
 1002eb3:	mov    r11,QWORD PTR [rsp+0x60]
 1002eb8:	mov    QWORD PTR [r14],r11
 1002ebb:	test   rbx,rbx
 1002ebe:	je     0x1002ec9
 1002ec0:	mov    rcx,rbx
 1002ec3:	call   QWORD PTR [rip+0xffffffffffffe4bf]        # 0x1001388
 1002ec9:	xor    eax,eax
 1002ecb:	jmp    0x1002d5f
 1002ed0:	xor    ecx,ecx
 1002ed2:	call   0x1003f88
 1002ed7:	int3   
 1002ed8:	xor    ecx,ecx
 1002eda:	call   0x1003f88
 1002edf:	int3   
 1002ee0:	int3   
 1002ee1:	int3   
 1002ee2:	int3   
 1002ee3:	int3   
 1002ee4:	int3   
 1002ee5:	int3   
 1002ee6:	int3   
 1002ee7:	int3   
 1002ee8:	int3   
 1002ee9:	int3   
 1002eea:	int3   
 1002eeb:	int3   
 1002eec:	int3   
 1002eed:	int3   
 1002eee:	int3   
 1002eef:	int3   
 1002ef0:	mov    QWORD PTR [rsp+0x10],rbp
 1002ef5:	mov    QWORD PTR [rsp+0x18],rsi
 1002efa:	push   rdi
 1002efb:	mov    eax,0x2100
 1002f00:	call   0x10065e0
 1002f05:	sub    rsp,rax
 1002f08:	mov    rax,QWORD PTR [rip+0x5201]        # 0x1008110
 1002f0f:	xor    rax,rsp
 1002f12:	mov    QWORD PTR [rsp+0x20f0],rax
 1002f1a:	lea    rax,[rip+0xffffffffffffef7f]        # 0x1001ea0
 1002f21:	lea    r9,[rip+0xffffffffffffefc0]        # 0x1001ee8
 1002f28:	lea    r8,[rip+0xffffffffffffe9a1]        # 0x10018d0
 1002f2f:	mov    QWORD PTR [rsp+0x28],rax
 1002f34:	lea    rax,[rip+0x64c5]        # 0x1009400
 1002f3b:	lea    rcx,[rsp+0x60]
 1002f40:	mov    edx,0x43
 1002f45:	mov    QWORD PTR [rsp+0x20],rax
 1002f4a:	call   0x10020d0
 1002f4f:	xor    ebp,ebp
 1002f51:	mov    QWORD PTR [rsp+0x2110],rbx
 1002f59:	mov    edi,ebp
 1002f5b:	nop    DWORD PTR [rax+rax*1+0x0]
 1002f60:	mov    QWORD PTR [rsp+0x30],rbp
 1002f65:	lea    rcx,[rsp+0x60]
 1002f6a:	xor    r9d,r9d
 1002f6d:	xor    r8d,r8d
 1002f70:	mov    edx,0xc0000000
 1002f75:	mov    DWORD PTR [rsp+0x28],0x120000
 1002f7d:	mov    DWORD PTR [rsp+0x20],0x3
 1002f85:	call   QWORD PTR [rip+0xffffffffffffe275]        # 0x1001200
 1002f8b:	mov    rsi,rax
 1002f8e:	cmp    rax,0xffffffffffffffff
 1002f92:	jne    0x1002fc2
 1002f94:	call   QWORD PTR [rip+0xffffffffffffe24e]        # 0x10011e8
 1002f9a:	mov    ebx,eax
 1002f9c:	cmp    eax,0xe7
 1002fa1:	jne    0x1003033
 1002fa7:	lea    rcx,[rsp+0x60]
 1002fac:	mov    edx,0x4e20
 1002fb1:	call   QWORD PTR [rip+0xffffffffffffe269]        # 0x1001220
 1002fb7:	test   eax,eax
 1002fb9:	je     0x1002ff6
 1002fbb:	inc    edi
 1002fbd:	cmp    edi,0x2
 1002fc0:	jb     0x1002f60
 1002fc2:	lea    rdx,[rsp+0x48]
 1002fc7:	xor    r9d,r9d
 1002fca:	xor    r8d,r8d
 1002fcd:	mov    rcx,rsi
 1002fd0:	mov    DWORD PTR [rsp+0x48],0x2
 1002fd8:	call   QWORD PTR [rip+0xffffffffffffe1f2]        # 0x10011d0
 1002fde:	test   eax,eax
 1002fe0:	jne    0x100308d
 1002fe6:	call   QWORD PTR [rip+0xffffffffffffe1fc]        # 0x10011e8
 1002fec:	mov    ebx,eax
 1002fee:	test   eax,eax
 1002ff0:	jg     0x1003068
 1002ff2:	mov    edx,eax
 1002ff4:	jmp    0x1003071
 1002ff6:	call   QWORD PTR [rip+0xffffffffffffe1ec]        # 0x10011e8
 1002ffc:	mov    ebx,eax
 1002ffe:	test   eax,eax
 1003000:	jg     0x1003017
 1003002:	lea    rcx,[rip+0xffffffffffffe947]        # 0x1001950
 1003009:	mov    edx,eax
 100300b:	call   0x1002160
 1003010:	mov    eax,ebx
 1003012:	jmp    0x10031a7
 1003017:	movzx  edx,ax
 100301a:	lea    rcx,[rip+0xffffffffffffe92f]        # 0x1001950
 1003021:	or     edx,0x80070000
 1003027:	call   0x1002160
 100302c:	mov    eax,ebx
 100302e:	jmp    0x10031a7
 1003033:	test   eax,eax
 1003035:	jg     0x100304c
 1003037:	lea    rcx,[rip+0xffffffffffffe8b2]        # 0x10018f0
 100303e:	mov    edx,eax
 1003040:	call   0x1002160
 1003045:	mov    eax,ebx
 1003047:	jmp    0x10031a7
 100304c:	movzx  edx,ax
 100304f:	lea    rcx,[rip+0xffffffffffffe89a]        # 0x10018f0
 1003056:	or     edx,0x80070000
 100305c:	call   0x1002160
 1003061:	mov    eax,ebx
 1003063:	jmp    0x10031a7
 1003068:	movzx  edx,ax
 100306b:	or     edx,0x80070000
 1003071:	lea    rcx,[rip+0xffffffffffffe928]        # 0x10019a0
 1003078:	call   0x1002160
 100307d:	mov    rcx,rsi
 1003080:	call   QWORD PTR [rip+0xffffffffffffe13a]        # 0x10011c0
 1003086:	mov    eax,ebx
 1003088:	jmp    0x10031a7
 100308d:	lea    r9,[rsp+0x44]
 1003092:	lea    rdx,[rsp+0xf0]
 100309a:	mov    r8d,0x2000
 10030a0:	mov    rcx,rsi
 10030a3:	mov    ebx,ebp
 10030a5:	mov    QWORD PTR [rsp+0x58],0xffffffffffffffff
 10030ae:	mov    QWORD PTR [rsp+0x20],rbp
 10030b3:	call   QWORD PTR [rip+0xffffffffffffe14f]        # 0x1001208
 10030b9:	test   eax,eax
 10030bb:	je     0x1003117
 10030bd:	mov    eax,DWORD PTR [rsp+0x44]
 10030c1:	test   eax,eax
 10030c3:	je     0x100313a
 10030c5:	cmp    eax,0x2000
 10030ca:	jae    0x10030ec
 10030cc:	shr    rax,1
 10030cf:	add    rax,rax
 10030d2:	cmp    rax,0x2000
 10030d8:	jae    0x10030e4
 10030da:	mov    WORD PTR [rsp+rax*1+0xf0],bp
 10030e2:	jmp    0x10030f4
 10030e4:	xor    ecx,ecx
 10030e6:	call   0x1003f88
 10030eb:	int3   
 10030ec:	mov    WORD PTR [rsp+0x20ee],bp
 10030f4:	lea    rdx,[rsp+0x58]
 10030f9:	lea    rcx,[rsp+0xf0]
 1003101:	call   0x1002c10
 1003106:	mov    ebx,eax
 1003108:	test   eax,eax
 100310a:	jns    0x100313a
 100310c:	mov    edx,eax
 100310e:	lea    rcx,[rip+0xffffffffffffe8eb]        # 0x1001a00
 1003115:	jmp    0x1003135
 1003117:	call   QWORD PTR [rip+0xffffffffffffe0cb]        # 0x10011e8
 100311d:	mov    ebx,eax
 100311f:	test   eax,eax
 1003121:	jle    0x100312c
 1003123:	movzx  ebx,ax
 1003126:	or     ebx,0x80070000
 100312c:	mov    edx,ebx
 100312e:	lea    rcx,[rip+0xffffffffffffe91b]        # 0x1001a50
 1003135:	call   0x1002160
 100313a:	lea    r9,[rsp+0x40]
 100313f:	lea    rdx,[rsp+0x50]
 1003144:	mov    r8d,0x10
 100314a:	mov    rcx,rsi
 100314d:	mov    DWORD PTR [rsp+0x50],ebx
 1003151:	mov    QWORD PTR [rsp+0x20],rbp
 1003156:	call   QWORD PTR [rip+0xffffffffffffe0bc]        # 0x1001218
 100315c:	test   eax,eax
 100315e:	je     0x1003167
 1003160:	cmp    DWORD PTR [rsp+0x40],0x10
 1003165:	je     0x1003187
 1003167:	call   QWORD PTR [rip+0xffffffffffffe07b]        # 0x10011e8
 100316d:	test   eax,eax
 100316f:	jle    0x1003179
 1003171:	movzx  eax,ax
 1003174:	or     eax,0x80070000
 1003179:	lea    rcx,[rip+0xffffffffffffe930]        # 0x1001ab0
 1003180:	mov    edx,eax
 1003182:	call   0x1002160
 1003187:	mov    rcx,rsi
 100318a:	call   QWORD PTR [rip+0xffffffffffffe060]        # 0x10011f0
 1003190:	mov    rcx,rsi
 1003193:	call   QWORD PTR [rip+0xffffffffffffe05f]        # 0x10011f8
 1003199:	mov    rcx,rsi
 100319c:	call   QWORD PTR [rip+0xffffffffffffe01e]        # 0x10011c0
 10031a2:	mov    eax,0x1
 10031a7:	mov    rbx,QWORD PTR [rsp+0x2110]
 10031af:	mov    rcx,QWORD PTR [rsp+0x20f0]
 10031b7:	xor    rcx,rsp
 10031ba:	call   0x1003f60
 10031bf:	lea    r11,[rsp+0x2100]
 10031c7:	mov    rbp,QWORD PTR [r11+0x18]
 10031cb:	mov    rsi,QWORD PTR [r11+0x20]
 10031cf:	mov    rsp,r11
 10031d2:	pop    rdi
 10031d3:	ret    
 10031d4:	int3   
 10031d5:	int3   
 10031d6:	int3   
 10031d7:	int3   
 10031d8:	int3   
 10031d9:	int3   
 10031da:	int3   
 10031db:	int3   
 10031dc:	int3   
 10031dd:	int3   
 10031de:	int3   
 10031df:	int3   
 10031e0:	sub    rsp,0x38
 10031e4:	dec    ecx
 10031e6:	je     0x1003281
 10031ec:	sub    ecx,0x4
 10031ef:	je     0x1003281
 10031f5:	cmp    ecx,0x7c
 10031f8:	jne    0x1003263
 10031fa:	lea    rdx,[rip+0x5bcf]        # 0x1008dd0
 1003201:	lea    rcx,[rip+0xffffffffffffe938]        # 0x1001b40
 1003208:	call   0x1002160
 100320d:	lea    r11,[rsp+0x40]
 1003212:	lea    r8,[rip+0xfffffffffffffcd7]        # 0x1002ef0
 1003219:	mov    QWORD PTR [rsp+0x28],r11
 100321e:	xor    r9d,r9d
 1003221:	xor    edx,edx
 1003223:	xor    ecx,ecx
 1003225:	mov    DWORD PTR [rsp+0x20],0x0
 100322d:	call   QWORD PTR [rip+0xffffffffffffdead]        # 0x10010e0
 1003233:	test   rax,rax
 1003236:	jne    0x100325a
 1003238:	call   QWORD PTR [rip+0xffffffffffffdfaa]        # 0x10011e8
 100323e:	test   eax,eax
 1003240:	jle    0x100324a
 1003242:	movzx  eax,ax
 1003245:	or     eax,0x80070000
 100324a:	lea    rcx,[rip+0xffffffffffffe93f]        # 0x1001b90
 1003251:	mov    edx,eax
 1003253:	call   0x1002160
 1003258:	jmp    0x1003263
 100325a:	mov    rcx,rax
 100325d:	call   QWORD PTR [rip+0xffffffffffffdf5d]        # 0x10011c0
 1003263:	mov    rcx,QWORD PTR [rip+0x5b5e]        # 0x1008dc8
 100326a:	test   rcx,rcx
 100326d:	je     0x10032e4
 100326f:	lea    rdx,[rip+0x61e2]        # 0x1009458
 1003276:	call   QWORD PTR [rip+0xffffffffffffddfc]        # 0x1001078
 100327c:	add    rsp,0x38
 1003280:	ret    
 1003281:	cmp    QWORD PTR [rip+0x5b3f],0x0        # 0x1008dc8
 1003289:	je     0x10032e4
 100328b:	lea    rdx,[rip+0x5b3e]        # 0x1008dd0
 1003292:	lea    rcx,[rip+0xffffffffffffe86f]        # 0x1001b08
 1003299:	call   0x1002160
 100329e:	mov    rcx,QWORD PTR [rip+0x5b23]        # 0x1008dc8
 10032a5:	lea    rdx,[rip+0x61ac]        # 0x1009458
 10032ac:	mov    DWORD PTR [rip+0x61ae],0x0        # 0x1009464
 10032b6:	mov    DWORD PTR [rip+0x619c],0x1        # 0x100945c
 10032c0:	call   QWORD PTR [rip+0xffffffffffffddb2]        # 0x1001078
 10032c6:	mov    rcx,QWORD PTR [rip+0x4e8b]        # 0x1008158
 10032cd:	mov    QWORD PTR [rip+0x5af0],0x0        # 0x1008dc8
 10032d8:	cmp    rcx,0xffffffffffffffff
 10032dc:	je     0x10032e4
 10032de:	call   QWORD PTR [rip+0xffffffffffffdedc]        # 0x10011c0
 10032e4:	add    rsp,0x38
 10032e8:	ret    
 10032e9:	int3   
 10032ea:	int3   
 10032eb:	int3   
 10032ec:	int3   
 10032ed:	int3   
 10032ee:	int3   
 10032ef:	int3   
 10032f0:	sub    rsp,0x28
 10032f4:	xor    eax,eax
 10032f6:	lea    rdx,[rip+0xfffffffffffffee3]        # 0x10031e0
 10032fd:	lea    rcx,[rip+0x5acc]        # 0x1008dd0
 1003304:	mov    DWORD PTR [rip+0x614a],0x30        # 0x1009458
 100330e:	mov    DWORD PTR [rip+0x6144],0x2        # 0x100945c
 1003318:	mov    QWORD PTR [rip+0x613d],0x5        # 0x1009460
 1003323:	mov    QWORD PTR [rip+0x613e],rax        # 0x1009468
 100332a:	mov    DWORD PTR [rip+0x6140],eax        # 0x1009470
 1003330:	call   QWORD PTR [rip+0xffffffffffffdd6a]        # 0x10010a0
 1003336:	mov    QWORD PTR [rip+0x5a8b],rax        # 0x1008dc8
 100333d:	test   rax,rax
 1003340:	jne    0x100336e
 1003342:	call   QWORD PTR [rip+0xffffffffffffdea0]        # 0x10011e8
 1003348:	test   eax,eax
 100334a:	jle    0x1003354
 100334c:	movzx  eax,ax
 100334f:	or     eax,0x80070000
 1003354:	lea    rdx,[rip+0x5a75]        # 0x1008dd0
 100335b:	lea    rcx,[rip+0xffffffffffffe8be]        # 0x1001c20
 1003362:	mov    r8d,eax
 1003365:	add    rsp,0x28
 1003369:	jmp    0x1002160
 100336e:	lea    rdx,[rip+0x60e3]        # 0x1009458
 1003375:	mov    rcx,rax
 1003378:	mov    DWORD PTR [rip+0x60da],0x4        # 0x100945c
 1003382:	call   QWORD PTR [rip+0xffffffffffffdcf0]        # 0x1001078
 1003388:	cmp    BYTE PTR [rip+0x5c6b],0x0        # 0x1008ffa
 100338f:	jne    0x10033a1
 1003391:	lea    rcx,[rip+0xffffffffffffe8e8]        # 0x1001c80
 1003398:	add    rsp,0x28
 100339c:	jmp    0x1002160
 10033a1:	call   0x1002ae0
 10033a6:	test   eax,eax
 10033a8:	jns    0x10033bc
 10033aa:	lea    rcx,[rip+0xffffffffffffe93f]        # 0x1001cf0
 10033b1:	mov    edx,eax
 10033b3:	add    rsp,0x28
 10033b7:	jmp    0x1002160
 10033bc:	lea    rdx,[rip+0x5a0d]        # 0x1008dd0
 10033c3:	lea    rcx,[rip+0xffffffffffffe996]        # 0x1001d60
 10033ca:	add    rsp,0x28
 10033ce:	jmp    0x1002160
 10033d3:	int3   
 10033d4:	int3   
 10033d5:	int3   
 10033d6:	int3   
 10033d7:	int3   
 10033d8:	int3   
 10033d9:	int3   
 10033da:	int3   
 10033db:	int3   
 10033dc:	int3   
 10033dd:	int3   
 10033de:	int3   
 10033df:	int3   
 10033e0:	mov    QWORD PTR [rsp+0x10],rbx
 10033e5:	mov    QWORD PTR [rsp+0x18],rsi
 10033ea:	push   rdi
 10033eb:	push   r12
 10033ed:	push   r13
 10033ef:	push   r14
 10033f1:	push   r15
 10033f3:	sub    rsp,0xc0
 10033fa:	mov    rax,QWORD PTR [rip+0x4d0f]        # 0x1008110
 1003401:	xor    rax,rsp
 1003404:	mov    QWORD PTR [rsp+0xb8],rax
 100340c:	mov    r13,rcx
 100340f:	xor    esi,esi
 1003411:	mov    r12d,esi
 1003414:	mov    QWORD PTR [rsp+0x70],rsi
 1003419:	mov    DWORD PTR [rsp+0x34],esi
 100341d:	mov    QWORD PTR [rsp+0x40],rsi
 1003422:	mov    QWORD PTR [rsp+0x58],rsi
 1003427:	mov    r14d,esi
 100342a:	mov    QWORD PTR [rsp+0x68],rsi
 100342f:	mov    QWORD PTR [rsp+0x50],rsi
 1003434:	mov    edi,esi
 1003436:	lea    rdx,[rsp+0x40]
 100343b:	lea    rcx,[rip+0x5bbe]        # 0x1009000
 1003442:	call   QWORD PTR [rip+0xffffffffffffdbf8]        # 0x1001040
 1003448:	test   eax,eax
 100344a:	je     0x1003787
 1003450:	lea    rax,[rsp+0x34]
 1003455:	mov    QWORD PTR [rsp+0x20],rax
 100345a:	xor    r9d,r9d
 100345d:	xor    r8d,r8d
 1003460:	lea    edx,[rsi+0x4]
 1003463:	mov    rcx,r13
 1003466:	call   QWORD PTR [rip+0xffffffffffffdbdc]        # 0x1001048
 100346c:	mov    ebx,DWORD PTR [rsp+0x34]
 1003470:	call   QWORD PTR [rip+0xffffffffffffddb2]        # 0x1001228
 1003476:	mov    rcx,rax
 1003479:	mov    r8d,ebx
 100347c:	lea    edx,[rsi+0x8]
 100347f:	call   QWORD PTR [rip+0xffffffffffffddcb]        # 0x1001250
 1003485:	mov    r12,rax
 1003488:	mov    QWORD PTR [rsp+0x70],rax
 100348d:	test   rax,rax
 1003490:	je     0x1003787
 1003496:	lea    rax,[rsp+0x34]
 100349b:	mov    QWORD PTR [rsp+0x20],rax
 10034a0:	mov    r9d,DWORD PTR [rsp+0x34]
 10034a5:	mov    r8,r12
 10034a8:	lea    edx,[rsi+0x4]
 10034ab:	mov    rcx,r13
 10034ae:	call   QWORD PTR [rip+0xffffffffffffdb94]        # 0x1001048
 10034b4:	test   eax,eax
 10034b6:	je     0x1003787
 10034bc:	lea    edx,[rsi+0x1]
 10034bf:	lea    rcx,[rsp+0x80]
 10034c7:	call   QWORD PTR [rip+0xffffffffffffdb6b]        # 0x1001038
 10034cd:	test   eax,eax
 10034cf:	je     0x1003787
 10034d5:	lea    r9,[rsp+0x78]
 10034da:	lea    r8,[rsp+0x58]
 10034df:	lea    rdx,[rsp+0x38]
 10034e4:	mov    rcx,r12
 10034e7:	call   QWORD PTR [rip+0xffffffffffffdbd3]        # 0x10010c0
 10034ed:	test   eax,eax
 10034ef:	je     0x1003787
 10034f5:	mov    DWORD PTR [rsp+0xa8],esi
 10034fc:	mov    QWORD PTR [rsp+0xac],0x8
 1003508:	mov    rcx,QWORD PTR [rsp+0x58]
 100350d:	test   rcx,rcx
 1003510:	jne    0x1003518
 1003512:	mov    DWORD PTR [rsp+0x38],esi
 1003516:	jmp    0x100353f
 1003518:	cmp    DWORD PTR [rsp+0x38],0x0
 100351d:	je     0x100353f
 100351f:	mov    r9d,0x2
 1003525:	lea    r8d,[r9+0xa]
 1003529:	lea    rdx,[rsp+0xa8]
 1003531:	call   QWORD PTR [rip+0xffffffffffffdae1]        # 0x1001018
 1003537:	test   eax,eax
 1003539:	je     0x1003787
 100353f:	mov    rcx,QWORD PTR [rsp+0x40]
 1003544:	call   QWORD PTR [rip+0xffffffffffffdb5e]        # 0x10010a8
 100354a:	mov    r15d,DWORD PTR [rsp+0xac]
 1003552:	add    r15d,0x8
 1003556:	add    r15d,eax
 1003559:	call   QWORD PTR [rip+0xffffffffffffdcc9]        # 0x1001228
 100355f:	mov    rcx,rax
 1003562:	mov    r8d,r15d
 1003565:	mov    edx,0x8
 100356a:	call   QWORD PTR [rip+0xffffffffffffdce0]        # 0x1001250
 1003570:	mov    r14,rax
 1003573:	mov    QWORD PTR [rsp+0x68],rax
 1003578:	test   rax,rax
 100357b:	je     0x1003787
 1003581:	mov    r8d,0x2
 1003587:	mov    edx,r15d
 100358a:	mov    rcx,rax
 100358d:	call   QWORD PTR [rip+0xffffffffffffdadd]        # 0x1001070
 1003593:	test   eax,eax
 1003595:	je     0x1003787
 100359b:	mov    ebx,esi
 100359d:	mov    DWORD PTR [rsp+0x64],ebx
 10035a1:	cmp    DWORD PTR [rsp+0x38],ebx
 10035a5:	je     0x100363b
 10035ab:	mov    eax,DWORD PTR [rsp+0xa8]
 10035b2:	test   eax,eax
 10035b4:	je     0x100363b
 10035ba:	mov    edi,esi
 10035bc:	mov    DWORD PTR [rsp+0x48],esi
 10035c0:	cmp    edi,eax
 10035c2:	jae    0x100363b
 10035c4:	lea    r8,[rsp+0x50]
 10035c9:	mov    edx,edi
 10035cb:	mov    rcx,QWORD PTR [rsp+0x58]
 10035d0:	call   QWORD PTR [rip+0xffffffffffffda82]        # 0x1001058
 10035d6:	test   eax,eax
 10035d8:	je     0x1003787
 10035de:	mov    rdx,QWORD PTR [rsp+0x50]
 10035e3:	test   BYTE PTR [rdx+0x1],0x10
 10035e7:	jne    0x100363b
 10035e9:	add    rdx,0x8
 10035ed:	mov    rcx,QWORD PTR [rsp+0x40]
 10035f2:	call   QWORD PTR [rip+0xffffffffffffda30]        # 0x1001028
 10035f8:	test   eax,eax
 10035fa:	je     0x10035fe
 10035fc:	jmp    0x100362c
 10035fe:	mov    r9,QWORD PTR [rsp+0x50]
 1003603:	movzx  eax,WORD PTR [r9+0x2]
 1003608:	mov    DWORD PTR [rsp+0x20],eax
 100360c:	or     r8d,0xffffffff
 1003610:	mov    edx,0x2
 1003615:	mov    rcx,r14
 1003618:	call   QWORD PTR [rip+0xffffffffffffda7a]        # 0x1001098
 100361e:	test   eax,eax
 1003620:	je     0x1003787
 1003626:	inc    ebx
 1003628:	mov    DWORD PTR [rsp+0x64],ebx
 100362c:	inc    edi
 100362e:	mov    DWORD PTR [rsp+0x48],edi
 1003632:	mov    eax,DWORD PTR [rsp+0xa8]
 1003639:	jmp    0x10035c0
 100363b:	mov    r9,QWORD PTR [rsp+0x40]
 1003640:	mov    edx,0x2
 1003645:	mov    r8d,0x10000000
 100364b:	mov    rcx,r14
 100364e:	call   QWORD PTR [rip+0xffffffffffffda2c]        # 0x1001080
 1003654:	test   eax,eax
 1003656:	je     0x1003787
 100365c:	cmp    DWORD PTR [rsp+0x38],0x0
 1003661:	je     0x10036c5
 1003663:	mov    eax,DWORD PTR [rsp+0xa8]
 100366a:	test   eax,eax
 100366c:	je     0x10036c5
 100366e:	xchg   ax,ax
 1003670:	cmp    edi,eax
 1003672:	jae    0x10036c5
 1003674:	lea    r8,[rsp+0x50]
 1003679:	mov    edx,edi
 100367b:	mov    rcx,QWORD PTR [rsp+0x58]
 1003680:	call   QWORD PTR [rip+0xffffffffffffd9d2]        # 0x1001058
 1003686:	test   eax,eax
 1003688:	je     0x1003787
 100368e:	mov    r9,QWORD PTR [rsp+0x50]
 1003693:	movzx  eax,WORD PTR [r9+0x2]
 1003698:	mov    DWORD PTR [rsp+0x20],eax
 100369c:	or     r8d,0xffffffff
 10036a0:	mov    edx,0x2
 10036a5:	mov    rcx,r14
 10036a8:	call   QWORD PTR [rip+0xffffffffffffd9ea]        # 0x1001098
 10036ae:	test   eax,eax
 10036b0:	je     0x1003787
 10036b6:	inc    edi
 10036b8:	mov    DWORD PTR [rsp+0x48],edi
 10036bc:	mov    eax,DWORD PTR [rsp+0xa8]
 10036c3:	jmp    0x1003670
 10036c5:	xor    r9d,r9d
 10036c8:	mov    r8,r14
 10036cb:	lea    edx,[r9+0x1]
 10036cf:	lea    rcx,[rsp+0x80]
 10036d7:	call   QWORD PTR [rip+0xffffffffffffd973]        # 0x1001050
 10036dd:	test   eax,eax
 10036df:	je     0x1003787
 10036e5:	lea    rcx,[rip+0xffffffffffffe6dc]        # 0x1001dc8
 10036ec:	call   QWORD PTR [rip+0xffffffffffffdb3e]        # 0x1001230
 10036f2:	mov    rcx,rax
 10036f5:	lea    rdx,[rip+0xffffffffffffe6ac]        # 0x1001da8
 10036fc:	call   QWORD PTR [rip+0xffffffffffffdade]        # 0x10011e0
 1003702:	mov    rdi,rax
 1003705:	test   rax,rax
 1003708:	je     0x1003770
 100370a:	movzx  ebx,si
 100370d:	mov    WORD PTR [rsp+0x30],si
 1003712:	mov    DWORD PTR [rsp+0x60],esi
 1003716:	lea    r8,[rsp+0x60]
 100371b:	lea    rdx,[rsp+0x30]
 1003720:	mov    rcx,r12
 1003723:	call   QWORD PTR [rip+0xffffffffffffd8f7]        # 0x1001020
 1003729:	test   eax,eax
 100372b:	je     0x1003787
 100372d:	movzx  eax,WORD PTR [rsp+0x30]
 1003732:	mov    ecx,0x400
 1003737:	test   cx,ax
 100373a:	je     0x1003746
 100373c:	mov    ebx,0x500
 1003741:	movzx  esi,bx
 1003744:	jmp    0x1003756
 1003746:	mov    ecx,0x1000
 100374b:	test   cx,ax
 100374e:	je     0x1003756
 1003750:	movzx  esi,cx
 1003753:	movzx  ebx,cx
 1003756:	test   si,si
 1003759:	je     0x1003770
 100375b:	movzx  r8d,bx
 100375f:	movzx  edx,si
 1003762:	lea    rcx,[rsp+0x80]
 100376a:	call   rdi
 100376c:	test   eax,eax
 100376e:	je     0x1003787
 1003770:	lea    r8,[rsp+0x80]
 1003778:	mov    edx,0x4
 100377d:	mov    rcx,r13
 1003780:	call   QWORD PTR [rip+0xffffffffffffd8e2]        # 0x1001068
 1003786:	nop
 1003787:	mov    rcx,QWORD PTR [rsp+0x40]
 100378c:	test   rcx,rcx
 100378f:	je     0x1003797
 1003791:	call   QWORD PTR [rip+0xffffffffffffda21]        # 0x10011b8
 1003797:	test   r12,r12
 100379a:	je     0x10037b0
 100379c:	call   QWORD PTR [rip+0xffffffffffffda86]        # 0x1001228
 10037a2:	mov    rcx,rax
 10037a5:	mov    r8,r12
 10037a8:	xor    edx,edx
 10037aa:	call   QWORD PTR [rip+0xffffffffffffda88]        # 0x1001238
 10037b0:	test   r14,r14
 10037b3:	je     0x10037c9
 10037b5:	call   QWORD PTR [rip+0xffffffffffffda6d]        # 0x1001228
 10037bb:	mov    rcx,rax
 10037be:	mov    r8,r14
 10037c1:	xor    edx,edx
 10037c3:	call   QWORD PTR [rip+0xffffffffffffda6f]        # 0x1001238
 10037c9:	mov    rcx,QWORD PTR [rsp+0xb8]
 10037d1:	xor    rcx,rsp
 10037d4:	call   0x1003f60
 10037d9:	lea    r11,[rsp+0xc0]
 10037e1:	mov    rbx,QWORD PTR [r11+0x38]
 10037e5:	mov    rsi,QWORD PTR [r11+0x40]
 10037e9:	mov    rsp,r11
 10037ec:	pop    r15
 10037ee:	pop    r14
 10037f0:	pop    r13
 10037f2:	pop    r12
 10037f4:	pop    rdi
 10037f5:	ret    
 10037f6:	int3   
 10037f7:	int3   
 10037f8:	int3   
 10037f9:	int3   
 10037fa:	int3   
 10037fb:	int3   
 10037fc:	int3   
 10037fd:	int3   
 10037fe:	int3   
 10037ff:	int3   
 1003800:	mov    QWORD PTR [rsp+0x10],rbx
 1003805:	mov    QWORD PTR [rsp+0x18],rsi
 100380a:	push   rdi
 100380b:	sub    rsp,0x480
 1003812:	mov    rax,QWORD PTR [rip+0x48f7]        # 0x1008110
 1003819:	xor    rax,rsp
 100381c:	mov    QWORD PTR [rsp+0x470],rax
 1003824:	mov    rdi,rcx
 1003827:	mov    ebx,0x6
 100382c:	nop    DWORD PTR [rax+0x0]
 1003830:	lea    r8,[rip+0xffffffffffffe5b1]        # 0x1001de8
 1003837:	lea    rcx,[rsp+0x260]
 100383f:	mov    r9,rdi
 1003842:	mov    edx,0x105
 1003847:	mov    DWORD PTR [rsp+0x20],ebx
 100384b:	call   0x10020d0
 1003850:	lea    esi,[rbx-0x1]
 1003853:	lea    r8,[rip+0xffffffffffffe58e]        # 0x1001de8
 100385a:	lea    rcx,[rsp+0x50]
 100385f:	mov    r9,rdi
 1003862:	mov    edx,0x105
 1003867:	mov    DWORD PTR [rsp+0x20],esi
 100386b:	call   0x10020d0
 1003870:	cmp    ebx,0x1
 1003873:	jne    0x100388e
 1003875:	lea    r8,[rip+0xffffffffffffe57c]        # 0x1001df8
 100387c:	lea    rcx,[rsp+0x50]
 1003881:	mov    r9,rdi
 1003884:	mov    edx,0x105
 1003889:	call   0x10020d0
 100388e:	lea    rcx,[rsp+0x50]
 1003893:	call   QWORD PTR [rip+0xffffffffffffd977]        # 0x1001210
 1003899:	cmp    eax,0xffffffff
 100389c:	je     0x10038b7
 100389e:	lea    rdx,[rsp+0x260]
 10038a6:	lea    rcx,[rsp+0x50]
 10038ab:	mov    r8d,0x3
 10038b1:	call   QWORD PTR [rip+0xffffffffffffd991]        # 0x1001248
 10038b7:	mov    ebx,esi
 10038b9:	test   esi,esi
 10038bb:	jg     0x1003830
 10038c1:	xor    ebx,ebx
 10038c3:	xor    r9d,r9d
 10038c6:	mov    edx,0x40000000
 10038cb:	mov    QWORD PTR [rsp+0x30],rbx
 10038d0:	lea    r8d,[rbx+0x1]
 10038d4:	mov    rcx,rdi
 10038d7:	mov    DWORD PTR [rsp+0x28],0x80
 10038df:	mov    QWORD PTR [rip+0x486e],0xffffffffffffffff        # 0x1008158
 10038ea:	mov    DWORD PTR [rsp+0x20],0x2
 10038f2:	call   QWORD PTR [rip+0xffffffffffffd908]        # 0x1001200
 10038f8:	mov    QWORD PTR [rip+0x4859],rax        # 0x1008158
 10038ff:	cmp    rax,0xffffffffffffffff
 1003903:	je     0x1003939
 1003905:	mov    rcx,rdi
 1003908:	call   0x10033e0
 100390d:	mov    rcx,QWORD PTR [rip+0x4844]        # 0x1008158
 1003914:	mov    r11d,0xfeff
 100391a:	lea    r9,[rsp+0x44]
 100391f:	lea    r8d,[rbx+0x2]
 1003923:	lea    rdx,[rsp+0x40]
 1003928:	mov    WORD PTR [rsp+0x40],r11w
 100392e:	mov    QWORD PTR [rsp+0x20],rbx
 1003933:	call   QWORD PTR [rip+0xffffffffffffd8df]        # 0x1001218
 1003939:	mov    rcx,QWORD PTR [rsp+0x470]
 1003941:	xor    rcx,rsp
 1003944:	call   0x1003f60
 1003949:	lea    r11,[rsp+0x480]
 1003951:	mov    rbx,QWORD PTR [r11+0x18]
 1003955:	mov    rsi,QWORD PTR [r11+0x20]
 1003959:	mov    rsp,r11
 100395c:	pop    rdi
 100395d:	ret    
 100395e:	int3   
 100395f:	int3   
 1003960:	int3   
 1003961:	int3   
 1003962:	int3   
 1003963:	int3   
 1003964:	int3   
 1003965:	int3   
 1003966:	int3   
 1003967:	int3   
 1003968:	int3   
 1003969:	int3   
 100396a:	int3   
 100396b:	int3   
 100396c:	int3   
 100396d:	int3   
 100396e:	int3   
 100396f:	int3   
 1003970:	rex push rbx
 1003972:	sub    rsp,0x6a0
 1003979:	mov    rax,QWORD PTR [rip+0x4790]        # 0x1008110
 1003980:	xor    rax,rsp
 1003983:	mov    QWORD PTR [rsp+0x690],rax
 100398b:	lea    r8,[rsp+0x30]
 1003990:	lea    rdx,[rsp+0x270]
 1003998:	lea    rcx,[rip+0x5a61]        # 0x1009400
 100399f:	mov    DWORD PTR [rsp+0x30],0x105
 10039a7:	call   QWORD PTR [rip+0x47db]        # 0x1008188
 10039ad:	lea    rcx,[rip+0x5a4c]        # 0x1009400
 10039b4:	call   QWORD PTR [rip+0x47c6]        # 0x1008180
 10039ba:	lea    rbx,[rip+0x540f]        # 0x1008dd0
 10039c1:	lea    r9,[rip+0xffffffffffffe540]        # 0x1001f08
 10039c8:	mov    edx,0x115
 10039cd:	mov    rcx,rbx
 10039d0:	test   eax,eax
 10039d2:	je     0x10039e2
 10039d4:	lea    r8,[rip+0xffffffffffffe425]        # 0x1001e00
 10039db:	call   0x10020d0
 10039e0:	jmp    0x10039fb
 10039e2:	lea    rax,[rsp+0x270]
 10039ea:	lea    r8,[rip+0xffffffffffffe41f]        # 0x1001e10
 10039f1:	mov    QWORD PTR [rsp+0x20],rax
 10039f6:	call   0x10020d0
 10039fb:	call   0x10027a0
 1003a00:	lea    rax,[rip+0xfffffffffffff8e9]        # 0x10032f0
 1003a07:	lea    r8,[rsp+0x34]
 1003a0c:	mov    QWORD PTR [rsp+0x40],rax
 1003a11:	xor    eax,eax
 1003a13:	lea    rdx,[rsp+0x60]
 1003a18:	lea    rcx,[rip+0x59e1]        # 0x1009400
 1003a1f:	mov    QWORD PTR [rsp+0x38],rbx
 1003a24:	mov    DWORD PTR [rsp+0x34],0x105
 1003a2c:	mov    QWORD PTR [rsp+0x48],rax
 1003a31:	mov    QWORD PTR [rsp+0x50],rax
 1003a36:	call   QWORD PTR [rip+0x473c]        # 0x1008178
 1003a3c:	lea    r11,[rip+0xffffffffffffe47d]        # 0x1001ec0
 1003a43:	lea    r9,[rsp+0x60]
 1003a48:	lea    r8,[rip+0xffffffffffffe3d9]        # 0x1001e28
 1003a4f:	lea    rcx,[rsp+0x480]
 1003a57:	mov    edx,0x105
 1003a5c:	mov    QWORD PTR [rsp+0x20],r11
 1003a61:	call   0x10020d0
 1003a66:	lea    rcx,[rsp+0x480]
 1003a6e:	call   0x1003800
 1003a73:	lea    rcx,[rsp+0x38]
 1003a78:	call   QWORD PTR [rip+0xffffffffffffd58a]        # 0x1001008
 1003a7e:	test   eax,eax
 1003a80:	jne    0x1003aa6
 1003a82:	call   QWORD PTR [rip+0xffffffffffffd760]        # 0x10011e8
 1003a88:	test   eax,eax
 1003a8a:	jle    0x1003a94
 1003a8c:	movzx  eax,ax
 1003a8f:	or     eax,0x80070000
 1003a94:	lea    rcx,[rip+0xffffffffffffe3b5]        # 0x1001e50
 1003a9b:	mov    r8d,eax
 1003a9e:	mov    rdx,rbx
 1003aa1:	call   0x1002160
 1003aa6:	mov    rcx,QWORD PTR [rsp+0x690]
 1003aae:	xor    rcx,rsp
 1003ab1:	call   0x1003f60
 1003ab6:	add    rsp,0x6a0
 1003abd:	pop    rbx
 1003abe:	ret    
 1003abf:	int3   
 1003ac0:	int3   
 1003ac1:	int3   
 1003ac2:	int3   
 1003ac3:	int3   
 1003ac4:	int3   
 1003ac5:	int3   
 1003ac6:	int3   
 1003ac7:	int3   
 1003ac8:	int3   
 1003ac9:	int3   
 1003aca:	int3   
 1003acb:	int3   
 1003acc:	int3   
 1003acd:	int3   
 1003ace:	int3   
 1003acf:	int3   
 1003ad0:	test   ecx,ecx
 1003ad2:	jle    0x1003bb8
 1003ad8:	mov    QWORD PTR [rsp+0x10],rbx
 1003add:	push   rdi
 1003ade:	sub    rsp,0x20
 1003ae2:	xor    edi,edi
 1003ae4:	mov    QWORD PTR [rsp+0x30],rsi
 1003ae9:	mov    ebx,ecx
 1003aeb:	lea    r11,[rdx+0x8]
 1003aef:	lea    rsi,[rip+0x590a]        # 0x1009400
 1003af6:	mov    r10d,edi
 1003af9:	nop    DWORD PTR [rax+0x0]
 1003b00:	mov    rdx,QWORD PTR [r11-0x8]
 1003b04:	movzx  eax,WORD PTR [rdx]
 1003b07:	cmp    ax,0x2d
 1003b0b:	je     0x1003b17
 1003b0d:	cmp    ax,0x2f
 1003b11:	jne    0x1003b99
 1003b17:	cmp    WORD PTR [rdx+0x2],0x73
 1003b1c:	jne    0x1003bcc
 1003b22:	lea    eax,[r10+0x1]
 1003b26:	cmp    eax,ebx
 1003b28:	jge    0x1003bc3
 1003b2e:	mov    rax,QWORD PTR [r11]
 1003b31:	test   rax,rax
 1003b34:	je     0x1003bc3
 1003b3a:	or     r9,0xffffffffffffffff
 1003b3e:	xchg   ax,ax
 1003b40:	inc    r9
 1003b43:	cmp    WORD PTR [rax+r9*2],di
 1003b48:	jne    0x1003b40
 1003b4a:	cmp    r9d,0x26
 1003b4e:	ja     0x1003bba
 1003b50:	mov    r8d,0x27
 1003b56:	mov    rdx,rsi
 1003b59:	nop    DWORD PTR [rax+0x0]
 1003b60:	lea    rcx,[r8+0x7fffffd7]
 1003b67:	test   rcx,rcx
 1003b6a:	je     0x1003b86
 1003b6c:	movzx  ecx,WORD PTR [rax]
 1003b6f:	test   cx,cx
 1003b72:	je     0x1003b86
 1003b74:	mov    WORD PTR [rdx],cx
 1003b77:	add    rdx,0x2
 1003b7b:	add    rax,0x2
 1003b7f:	dec    r8
 1003b82:	jne    0x1003b60
 1003b84:	jmp    0x1003b8b
 1003b86:	test   r8,r8
 1003b89:	jne    0x1003b8f
 1003b8b:	sub    rdx,0x2
 1003b8f:	mov    eax,r9d
 1003b92:	mov    WORD PTR [rdx],di
 1003b95:	mov    WORD PTR [rsi+rax*2],di
 1003b99:	inc    r10d
 1003b9c:	add    r11,0x8
 1003ba0:	cmp    r10d,ebx
 1003ba3:	jl     0x1003b00
 1003ba9:	mov    rsi,QWORD PTR [rsp+0x30]
 1003bae:	mov    rbx,QWORD PTR [rsp+0x38]
 1003bb3:	add    rsp,0x20
 1003bb7:	pop    rdi
 1003bb8:	repz ret 
 1003bba:	xor    ecx,ecx
 1003bbc:	call   QWORD PTR [rip+0xffffffffffffd69e]        # 0x1001260
 1003bc2:	int3   
 1003bc3:	xor    ecx,ecx
 1003bc5:	call   QWORD PTR [rip+0xffffffffffffd695]        # 0x1001260
 1003bcb:	int3   
 1003bcc:	xor    ecx,ecx
 1003bce:	call   QWORD PTR [rip+0xffffffffffffd68c]        # 0x1001260
 1003bd4:	int3   
 1003bd5:	int3   
 1003bd6:	int3   
 1003bd7:	int3   
 1003bd8:	int3   
 1003bd9:	int3   
 1003bda:	int3   
 1003bdb:	int3   
 1003bdc:	int3   
 1003bdd:	int3   
 1003bde:	int3   
 1003bdf:	int3   
 1003be0:	mov    QWORD PTR [rsp+0x8],rbx
 1003be5:	push   rdi
 1003be6:	sub    rsp,0x20
 1003bea:	xor    r9d,r9d
 1003bed:	mov    rbx,rdx
 1003bf0:	mov    edi,ecx
 1003bf2:	lea    edx,[r9+0x1]
 1003bf6:	xor    r8d,r8d
 1003bf9:	xor    ecx,ecx
 1003bfb:	call   QWORD PTR [rip+0xffffffffffffd5c7]        # 0x10011c8
 1003c01:	call   0x1004580
 1003c06:	mov    rdx,rbx
 1003c09:	mov    ecx,edi
 1003c0b:	call   0x1003ad0
 1003c10:	call   0x1003970
 1003c15:	mov    rbx,QWORD PTR [rsp+0x30]
 1003c1a:	xor    eax,eax
 1003c1c:	add    rsp,0x20
 1003c20:	pop    rdi
 1003c21:	ret    
 1003c22:	int3   
 1003c23:	int3   
 1003c24:	int3   
 1003c25:	int3   
 1003c26:	int3   
 1003c27:	int3   
 1003c28:	int3   
 1003c29:	int3   
 1003c2a:	int3   
 1003c2b:	int3   
 1003c2c:	int3   
 1003c2d:	int3   
 1003c2e:	int3   
 1003c2f:	int3   
 1003c30:	sub    rsp,0x28
 1003c34:	mov    rcx,QWORD PTR [rcx]
 1003c37:	test   rcx,rcx
 1003c3a:	je     0x1003c42
 1003c3c:	call   QWORD PTR [rip+0xffffffffffffd57e]        # 0x10011c0
 1003c42:	add    rsp,0x28
 1003c46:	ret    
 1003c47:	int3   
 1003c48:	int3   
 1003c49:	int3   
 1003c4a:	int3   
 1003c4b:	int3   
 1003c4c:	int3   
 1003c4d:	int3   
 1003c4e:	int3   
 1003c4f:	int3   
 1003c50:	mov    rcx,QWORD PTR [rcx]
 1003c53:	rex.W jmp QWORD PTR [rip+0xffffffffffffd6ee]        # 0x1001348
 1003c5a:	int3   
 1003c5b:	int3   
 1003c5c:	int3   
 1003c5d:	int3   
 1003c5e:	int3   
 1003c5f:	int3   
 1003c60:	mov    rcx,QWORD PTR [rcx]
 1003c63:	rex.W jmp QWORD PTR [rip+0xffffffffffffd6de]        # 0x1001348
 1003c6a:	int3   
 1003c6b:	int3   
 1003c6c:	int3   
 1003c6d:	int3   
 1003c6e:	int3   
 1003c6f:	int3   
 1003c70:	sub    rsp,0x38
 1003c74:	lea    rcx,[rip+0x5e9]        # 0x1004264
 1003c7b:	call   0x1004190
 1003c80:	mov    r11d,DWORD PTR [rip+0x4abd]        # 0x1008744
 1003c87:	mov    r9d,DWORD PTR [rip+0x4ab2]        # 0x1008740
 1003c8e:	lea    rax,[rip+0x4527]        # 0x10081bc
 1003c95:	lea    r8,[rip+0x450c]        # 0x10081a8
 1003c9c:	lea    rdx,[rip+0x450d]        # 0x10081b0
 1003ca3:	lea    rcx,[rip+0x44f6]        # 0x10081a0
 1003caa:	mov    DWORD PTR [rip+0x450b],r11d        # 0x10081bc
 1003cb1:	mov    QWORD PTR [rsp+0x20],rax
 1003cb6:	call   QWORD PTR [rip+0xffffffffffffd674]        # 0x1001330
 1003cbc:	mov    DWORD PTR [rip+0x44f6],eax        # 0x10081b8
 1003cc2:	test   eax,eax
 1003cc4:	jns    0x1003cd0
 1003cc6:	mov    ecx,0x8
 1003ccb:	call   0x1004216
 1003cd0:	add    rsp,0x38
 1003cd4:	ret    
 1003cd5:	int3   
 1003cd6:	int3   
 1003cd7:	int3   
 1003cd8:	int3   
 1003cd9:	int3   
 1003cda:	int3   
 1003cdb:	int3   
 1003cdc:	mov    QWORD PTR [rsp+0x8],rbx
 1003ce1:	push   rdi
 1003ce2:	sub    rsp,0x20
 1003ce6:	mov    rax,QWORD PTR gs:0x30
 1003cef:	mov    rbx,QWORD PTR [rax+0x8]
 1003cf3:	xor    edi,edi
 1003cf5:	xor    eax,eax
 1003cf7:	lock cmpxchg QWORD PTR [rip+0x5788],rbx        # 0x1009488
 1003d00:	je     0x1003d1d
 1003d02:	cmp    rax,rbx
 1003d05:	jne    0x1003d10
 1003d07:	mov    ebx,0x1
 1003d0c:	mov    edi,ebx
 1003d0e:	jmp    0x1003d22
 1003d10:	mov    ecx,0x3e8
 1003d15:	call   QWORD PTR [rip+0xffffffffffffd555]        # 0x1001270
 1003d1b:	jmp    0x1003cf5
 1003d1d:	mov    ebx,0x1
 1003d22:	mov    eax,DWORD PTR [rip+0x5758]        # 0x1009480
 1003d28:	cmp    eax,ebx
 1003d2a:	jne    0x1003d38
 1003d2c:	mov    ecx,0x1f
 1003d31:	call   0x1004216
 1003d36:	jmp    0x1003d6f
 1003d38:	mov    eax,DWORD PTR [rip+0x5742]        # 0x1009480
 1003d3e:	test   eax,eax
 1003d40:	jne    0x1003d69
 1003d42:	mov    DWORD PTR [rip+0x5738],ebx        # 0x1009480
 1003d48:	lea    rdx,[rip+0xffffffffffffd689]        # 0x10013d8
 1003d4f:	lea    rcx,[rip+0xffffffffffffd66a]        # 0x10013c0
 1003d56:	call   0x10043a4
 1003d5b:	test   eax,eax
 1003d5d:	je     0x1003d6f
 1003d5f:	mov    eax,0xff
 1003d64:	jmp    0x1003e51
 1003d69:	mov    DWORD PTR [rip+0x4455],ebx        # 0x10081c4
 1003d6f:	mov    eax,DWORD PTR [rip+0x570b]        # 0x1009480
 1003d75:	cmp    eax,ebx
 1003d77:	jne    0x1003d96
 1003d79:	lea    rdx,[rip+0xffffffffffffd638]        # 0x10013b8
 1003d80:	lea    rcx,[rip+0xffffffffffffd611]        # 0x1001398
 1003d87:	call   0x1004398
 1003d8c:	mov    DWORD PTR [rip+0x56ea],0x2        # 0x1009480
 1003d96:	test   edi,edi
 1003d98:	jne    0x1003da3
 1003d9a:	xor    eax,eax
 1003d9c:	xchg   QWORD PTR [rip+0x56e5],rax        # 0x1009488
 1003da3:	cmp    QWORD PTR [rip+0x56f5],0x0        # 0x10094a0
 1003dab:	je     0x1003dcc
 1003dad:	lea    rcx,[rip+0x56ec]        # 0x10094a0
 1003db4:	call   0x1004350
 1003db9:	test   eax,eax
 1003dbb:	je     0x1003dcc
 1003dbd:	xor    r8d,r8d
 1003dc0:	lea    edx,[r8+0x2]
 1003dc4:	xor    ecx,ecx
 1003dc6:	call   QWORD PTR [rip+0x56d4]        # 0x10094a0
 1003dcc:	mov    rcx,QWORD PTR [rip+0xffffffffffffd52d]        # 0x1001300
 1003dd3:	mov    rax,QWORD PTR [rip+0x43ce]        # 0x10081a8
 1003dda:	mov    QWORD PTR [rcx],rax
 1003ddd:	mov    r8,QWORD PTR [rip+0x43c4]        # 0x10081a8
 1003de4:	mov    rdx,QWORD PTR [rip+0x43c5]        # 0x10081b0
 1003deb:	mov    ecx,DWORD PTR [rip+0x43af]        # 0x10081a0
 1003df1:	call   0x1003be0
 1003df6:	mov    DWORD PTR [rip+0x43c4],eax        # 0x10081c0
 1003dfc:	cmp    DWORD PTR [rip+0x43a1],0x0        # 0x10081a4
 1003e03:	jne    0x1003e0d
 1003e05:	mov    ecx,eax
 1003e07:	call   QWORD PTR [rip+0xffffffffffffd4fb]        # 0x1001308
 1003e0d:	cmp    DWORD PTR [rip+0x43b0],0x0        # 0x10081c4
 1003e14:	jne    0x1003e22
 1003e16:	call   QWORD PTR [rip+0xffffffffffffd4f4]        # 0x1001310
 1003e1c:	mov    eax,DWORD PTR [rip+0x439e]        # 0x10081c0
 1003e22:	jmp    0x1003e51
 1003e24:	mov    DWORD PTR [rip+0x4396],eax        # 0x10081c0
 1003e2a:	cmp    DWORD PTR [rip+0x4373],0x0        # 0x10081a4
 1003e31:	jne    0x1003e3c
 1003e33:	mov    ecx,eax
 1003e35:	call   QWORD PTR [rip+0xffffffffffffd4dd]        # 0x1001318
 1003e3b:	int3   
 1003e3c:	cmp    DWORD PTR [rip+0x4381],0x0        # 0x10081c4
 1003e43:	jne    0x1003e51
 1003e45:	call   QWORD PTR [rip+0xffffffffffffd4c5]        # 0x1001310
 1003e4b:	mov    eax,DWORD PTR [rip+0x436f]        # 0x10081c0
 1003e51:	mov    rbx,QWORD PTR [rsp+0x30]
 1003e56:	add    rsp,0x20
 1003e5a:	pop    rdi
 1003e5b:	ret    
 1003e5c:	int3   
 1003e5d:	int3   
 1003e5e:	int3   
 1003e5f:	int3   
 1003e60:	int3   
 1003e61:	int3   
 1003e62:	int3   
 1003e63:	int3   
 1003e64:	sub    rsp,0x28
 1003e68:	mov    eax,0x5a4d
 1003e6d:	cmp    WORD PTR [rip+0xffffffffffffc18c],ax        # 0x1000000
 1003e74:	je     0x1003e7a
 1003e76:	xor    ecx,ecx
 1003e78:	jmp    0x1003eb2
 1003e7a:	movsxd rax,DWORD PTR [rip+0xffffffffffffc1bb]        # 0x100003c
 1003e81:	lea    rcx,[rip+0xffffffffffffc178]        # 0x1000000
 1003e88:	add    rax,rcx
 1003e8b:	cmp    DWORD PTR [rax],0x4550
 1003e91:	jne    0x1003e76
 1003e93:	mov    ecx,0x20b
 1003e98:	cmp    WORD PTR [rax+0x18],cx
 1003e9c:	jne    0x1003e76
 1003e9e:	xor    ecx,ecx
 1003ea0:	cmp    DWORD PTR [rax+0x84],0xe
 1003ea7:	jbe    0x1003eb2
 1003ea9:	cmp    DWORD PTR [rax+0xf8],ecx
 1003eaf:	setne  cl
 1003eb2:	mov    DWORD PTR [rip+0x42ec],ecx        # 0x10081a4
 1003eb8:	mov    ecx,0x1
 1003ebd:	call   QWORD PTR [rip+0xffffffffffffd495]        # 0x1001358
 1003ec3:	or     rcx,0xffffffffffffffff
 1003ec7:	call   QWORD PTR [rip+0xffffffffffffd3ab]        # 0x1001278
 1003ecd:	mov    rcx,QWORD PTR [rip+0xffffffffffffd3fc]        # 0x10012d0
 1003ed4:	mov    QWORD PTR [rip+0x55b5],rax        # 0x1009490
 1003edb:	mov    QWORD PTR [rip+0x55b6],rax        # 0x1009498
 1003ee2:	mov    eax,DWORD PTR [rip+0x4864]        # 0x100874c
 1003ee8:	mov    DWORD PTR [rcx],eax
 1003eea:	mov    rdx,QWORD PTR [rip+0xffffffffffffd3e7]        # 0x10012d8
 1003ef1:	mov    eax,DWORD PTR [rip+0x4851]        # 0x1008748
 1003ef7:	mov    DWORD PTR [rdx],eax
 1003ef9:	call   0x1004224
 1003efe:	call   0x10043bc
 1003f03:	cmp    DWORD PTR [rip+0x4202],0x0        # 0x100810c
 1003f0a:	jne    0x1003f19
 1003f0c:	lea    rcx,[rip+0x49d]        # 0x10043b0
 1003f13:	call   QWORD PTR [rip+0xffffffffffffd3c7]        # 0x10012e0
 1003f19:	cmp    DWORD PTR [rip+0x41e8],0xffffffff        # 0x1008108
 1003f20:	jne    0x1003f2b
 1003f22:	or     ecx,0xffffffff
 1003f25:	call   QWORD PTR [rip+0xffffffffffffd3bd]        # 0x10012e8
 1003f2b:	xor    eax,eax
 1003f2d:	add    rsp,0x28
 1003f31:	ret    
 1003f32:	int3   
 1003f33:	int3   
 1003f34:	int3   
 1003f35:	int3   
 1003f36:	int3   
 1003f37:	int3   
 1003f38:	sub    rsp,0x28
 1003f3c:	call   0x10043c8
 1003f41:	add    rsp,0x28
 1003f45:	jmp    0x1003cdc
 1003f4a:	int3   
 1003f4b:	int3   
 1003f4c:	int3   
 1003f4d:	int3   
 1003f4e:	int3   
 1003f4f:	int3   
 1003f50:	int3   
 1003f51:	int3   
 1003f52:	int3   
 1003f53:	int3   
 1003f54:	int3   
 1003f55:	int3   
 1003f56:	data16 nop WORD PTR [rax+rax*1+0x0]
 1003f60:	cmp    rcx,QWORD PTR [rip+0x41a9]        # 0x1008110
 1003f67:	jne    0x1003f7a
 1003f69:	rol    rcx,0x10
 1003f6d:	test   cx,0xffff
 1003f72:	jne    0x1003f76
 1003f74:	repz ret 
 1003f76:	ror    rcx,0x10
 1003f7a:	jmp    0x1003f88
 1003f7f:	int3   
 1003f80:	int3   
 1003f81:	int3   
 1003f82:	int3   
 1003f83:	int3   
 1003f84:	int3   
 1003f85:	int3   
 1003f86:	int3   
 1003f87:	int3   
 1003f88:	mov    QWORD PTR [rsp+0x8],rcx
 1003f8d:	sub    rsp,0x88
 1003f94:	lea    rcx,[rip+0x42d5]        # 0x1008270
 1003f9b:	call   QWORD PTR [rip+0xffffffffffffd1d7]        # 0x1001178
 1003fa1:	mov    rax,QWORD PTR [rip+0x43c0]        # 0x1008368
 1003fa8:	mov    QWORD PTR [rsp+0x58],rax
 1003fad:	xor    r8d,r8d
 1003fb0:	lea    rdx,[rsp+0x60]
 1003fb5:	mov    rcx,QWORD PTR [rsp+0x58]
 1003fba:	call   0x10063d8
 1003fbf:	mov    QWORD PTR [rsp+0x50],rax
 1003fc4:	cmp    QWORD PTR [rsp+0x50],0x0
 1003fca:	je     0x100400d
 1003fcc:	mov    QWORD PTR [rsp+0x38],0x0
 1003fd5:	lea    rax,[rsp+0x48]
 1003fda:	mov    QWORD PTR [rsp+0x30],rax
 1003fdf:	lea    rax,[rsp+0x40]
 1003fe4:	mov    QWORD PTR [rsp+0x28],rax
 1003fe9:	lea    rax,[rip+0x4280]        # 0x1008270
 1003ff0:	mov    QWORD PTR [rsp+0x20],rax
 1003ff5:	mov    r9,QWORD PTR [rsp+0x50]
 1003ffa:	mov    r8,QWORD PTR [rsp+0x58]
 1003fff:	mov    rdx,QWORD PTR [rsp+0x60]
 1004004:	xor    ecx,ecx
 1004006:	call   0x10063cc
 100400b:	jmp    0x100402f
 100400d:	mov    rax,QWORD PTR [rsp+0x88]
 1004015:	mov    QWORD PTR [rip+0x434c],rax        # 0x1008368
 100401c:	lea    rax,[rsp+0x88]
 1004024:	add    rax,0x8
 1004028:	mov    QWORD PTR [rip+0x42d9],rax        # 0x1008308
 100402f:	mov    rax,QWORD PTR [rip+0x4332]        # 0x1008368
 1004036:	mov    QWORD PTR [rip+0x41a3],rax        # 0x10081e0
 100403d:	mov    rax,QWORD PTR [rsp+0x90]
 1004045:	mov    QWORD PTR [rip+0x42a4],rax        # 0x10082f0
 100404c:	mov    DWORD PTR [rip+0x417a],0xc0000409        # 0x10081d0
 1004056:	mov    DWORD PTR [rip+0x4174],0x1        # 0x10081d4
 1004060:	mov    rax,QWORD PTR [rip+0x40a9]        # 0x1008110
 1004067:	mov    QWORD PTR [rsp+0x68],rax
 100406c:	mov    rax,QWORD PTR [rip+0x40a5]        # 0x1008118
 1004073:	mov    QWORD PTR [rsp+0x70],rax
 1004078:	call   QWORD PTR [rip+0xffffffffffffd112]        # 0x1001190
 100407e:	mov    DWORD PTR [rip+0x41e4],eax        # 0x1008268
 1004084:	mov    ecx,0x1
 1004089:	call   0x1004482
 100408e:	xor    ecx,ecx
 1004090:	call   QWORD PTR [rip+0xffffffffffffd102]        # 0x1001198
 1004096:	lea    rcx,[rip+0xffffffffffffd373]        # 0x1001410
 100409d:	call   QWORD PTR [rip+0xffffffffffffd0fd]        # 0x10011a0
 10040a3:	cmp    DWORD PTR [rip+0x41be],0x0        # 0x1008268
 10040aa:	jne    0x10040b6
 10040ac:	mov    ecx,0x1
 10040b1:	call   0x1004482
 10040b6:	call   QWORD PTR [rip+0xffffffffffffd184]        # 0x1001240
 10040bc:	mov    edx,0xc0000409
 10040c1:	mov    rcx,rax
 10040c4:	call   QWORD PTR [rip+0xffffffffffffd0de]        # 0x10011a8
 10040ca:	add    rsp,0x88
 10040d1:	ret    
 10040d2:	int3   
 10040d3:	int3   
 10040d4:	int3   
 10040d5:	int3   
 10040d6:	int3   
 10040d7:	int3   
 10040d8:	rex push rbx
 10040da:	sub    rsp,0x20
 10040de:	mov    rbx,rcx
 10040e1:	mov    rcx,QWORD PTR [rip+0x53b0]        # 0x1009498
 10040e8:	call   QWORD PTR [rip+0xffffffffffffd082]        # 0x1001170
 10040ee:	mov    QWORD PTR [rsp+0x38],rax
 10040f3:	cmp    rax,0xffffffffffffffff
 10040f7:	jne    0x1004104
 10040f9:	mov    rcx,rbx
 10040fc:	call   QWORD PTR [rip+0xffffffffffffd1a6]        # 0x10012a8
 1004102:	jmp    0x1004182
 1004104:	mov    ecx,0x8
 1004109:	call   0x10044a6
 100410e:	nop
 100410f:	mov    rcx,QWORD PTR [rip+0x5382]        # 0x1009498
 1004116:	call   QWORD PTR [rip+0xffffffffffffd054]        # 0x1001170
 100411c:	mov    QWORD PTR [rsp+0x38],rax
 1004121:	mov    rcx,QWORD PTR [rip+0x5368]        # 0x1009490
 1004128:	call   QWORD PTR [rip+0xffffffffffffd042]        # 0x1001170
 100412e:	mov    QWORD PTR [rsp+0x40],rax
 1004133:	mov    rcx,rbx
 1004136:	call   QWORD PTR [rip+0xffffffffffffd13c]        # 0x1001278
 100413c:	mov    rcx,rax
 100413f:	lea    r8,[rsp+0x40]
 1004144:	lea    rdx,[rsp+0x38]
 1004149:	call   0x100449a
 100414e:	mov    rbx,rax
 1004151:	mov    rcx,QWORD PTR [rsp+0x38]
 1004156:	call   QWORD PTR [rip+0xffffffffffffd11c]        # 0x1001278
 100415c:	mov    QWORD PTR [rip+0x5335],rax        # 0x1009498
 1004163:	mov    rcx,QWORD PTR [rsp+0x40]
 1004168:	call   QWORD PTR [rip+0xffffffffffffd10a]        # 0x1001278
 100416e:	mov    QWORD PTR [rip+0x531b],rax        # 0x1009490
 1004175:	mov    ecx,0x8
 100417a:	call   0x100448e
 100417f:	mov    rax,rbx
 1004182:	add    rsp,0x20
 1004186:	pop    rbx
 1004187:	ret    
 1004188:	int3   
 1004189:	int3   
 100418a:	int3   
 100418b:	int3   
 100418c:	int3   
 100418d:	int3   
 100418e:	int3   
 100418f:	int3   
 1004190:	sub    rsp,0x28
 1004194:	call   0x10040d8
 1004199:	neg    rax
 100419c:	sbb    eax,eax
 100419e:	neg    eax
 10041a0:	dec    eax
 10041a2:	add    rsp,0x28
 10041a6:	ret    
 10041a7:	int3   
 10041a8:	int3   
 10041a9:	int3   
 10041aa:	int3   
 10041ab:	int3   
 10041ac:	int3   
 10041ad:	int3   
 10041ae:	int3   
 10041af:	int3   
 10041b0:	sub    rsp,0x28
 10041b4:	mov    rax,QWORD PTR [rcx]
 10041b7:	cmp    DWORD PTR [rax],0xe06d7363
 10041bd:	jne    0x10041ea
 10041bf:	cmp    DWORD PTR [rax+0x18],0x4
 10041c3:	jne    0x10041ea
 10041c5:	mov    eax,DWORD PTR [rax+0x20]
 10041c8:	cmp    eax,0x19930520
 10041cd:	je     0x10041e4
 10041cf:	cmp    eax,0x19930521
 10041d4:	je     0x10041e4
 10041d6:	cmp    eax,0x19930522
 10041db:	je     0x10041e4
 10041dd:	cmp    eax,0x1994000
 10041e2:	jne    0x10041ea
 10041e4:	call   0x10044b2
 10041e9:	int3   
 10041ea:	xor    eax,eax
 10041ec:	add    rsp,0x28
 10041f0:	ret    
 10041f1:	int3   
 10041f2:	int3   
 10041f3:	int3   
 10041f4:	int3   
 10041f5:	int3   
 10041f6:	int3   
 10041f7:	int3   
 10041f8:	sub    rsp,0x28
 10041fc:	lea    rcx,[rip+0xffffffffffffffad]        # 0x10041b0
 1004203:	call   QWORD PTR [rip+0xffffffffffffcf8f]        # 0x1001198
 1004209:	xor    eax,eax
 100420b:	add    rsp,0x28
 100420f:	ret    
 1004210:	int3   
 1004211:	int3   
 1004212:	int3   
 1004213:	int3   
 1004214:	int3   
 1004215:	int3   
 1004216:	jmp    QWORD PTR [rip+0xffffffffffffd11c]        # 0x1001338
 100421c:	int3   
 100421d:	int3   
 100421e:	int3   
 100421f:	int3   
 1004220:	int3   
 1004221:	int3   
 1004222:	int3   
 1004223:	int3   
 1004224:	mov    QWORD PTR [rsp+0x8],rbx
 1004229:	push   rdi
 100422a:	sub    rsp,0x20
 100422e:	lea    rbx,[rip+0xffffffffffffde6b]        # 0x10020a0
 1004235:	lea    rdi,[rip+0xffffffffffffde64]        # 0x10020a0
 100423c:	jmp    0x100424c
 100423e:	mov    rax,QWORD PTR [rbx]
 1004241:	test   rax,rax
 1004244:	je     0x1004248
 1004246:	call   rax
 1004248:	add    rbx,0x8
 100424c:	cmp    rbx,rdi
 100424f:	jb     0x100423e
 1004251:	mov    rbx,QWORD PTR [rsp+0x30]
 1004256:	add    rsp,0x20
 100425a:	pop    rdi
 100425b:	ret    
 100425c:	int3   
 100425d:	int3   
 100425e:	int3   
 100425f:	int3   
 1004260:	int3   
 1004261:	int3   
 1004262:	int3   
 1004263:	int3   
 1004264:	mov    QWORD PTR [rsp+0x8],rbx
 1004269:	push   rdi
 100426a:	sub    rsp,0x20
 100426e:	lea    rbx,[rip+0xffffffffffffde3b]        # 0x10020b0
 1004275:	lea    rdi,[rip+0xffffffffffffde34]        # 0x10020b0
 100427c:	jmp    0x100428c
 100427e:	mov    rax,QWORD PTR [rbx]
 1004281:	test   rax,rax
 1004284:	je     0x1004288
 1004286:	call   rax
 1004288:	add    rbx,0x8
 100428c:	cmp    rbx,rdi
 100428f:	jb     0x100427e
 1004291:	mov    rbx,QWORD PTR [rsp+0x30]
 1004296:	add    rsp,0x20
 100429a:	pop    rdi
 100429b:	ret    
 100429c:	int3   
 100429d:	int3   
 100429e:	int3   
 100429f:	int3   
 10042a0:	int3   
 10042a1:	int3   
 10042a2:	jmp    QWORD PTR [rip+0xffffffffffffd080]        # 0x1001328
 10042a8:	int3   
 10042a9:	int3   
 10042aa:	int3   
 10042ab:	int3   
 10042ac:	int3   
 10042ad:	int3   
 10042ae:	jmp    QWORD PTR [rip+0xffffffffffffd06c]        # 0x1001320
 10042b4:	int3   
 10042b5:	int3   
 10042b6:	int3   
 10042b7:	int3   
 10042b8:	int3   
 10042b9:	int3   
 10042ba:	int3   
 10042bb:	int3   
 10042bc:	int3   
 10042bd:	int3   
 10042be:	int3   
 10042bf:	int3   
 10042c0:	mov    rax,rcx
 10042c3:	mov    ecx,0x5a4d
 10042c8:	cmp    WORD PTR [rax],cx
 10042cb:	je     0x10042d0
 10042cd:	xor    eax,eax
 10042cf:	ret    
 10042d0:	movsxd rcx,DWORD PTR [rax+0x3c]
 10042d4:	add    rcx,rax
 10042d7:	xor    eax,eax
 10042d9:	cmp    DWORD PTR [rcx],0x4550
 10042df:	jne    0x10042ed
 10042e1:	mov    edx,0x20b
 10042e6:	cmp    WORD PTR [rcx+0x18],dx
 10042ea:	sete   al
 10042ed:	repz ret 
 10042ef:	int3   
 10042f0:	int3   
 10042f1:	int3   
 10042f2:	int3   
 10042f3:	int3   
 10042f4:	int3   
 10042f5:	int3   
 10042f6:	int3   
 10042f7:	int3   
 10042f8:	int3   
 10042f9:	int3   
 10042fa:	int3   
 10042fb:	int3   
 10042fc:	int3   
 10042fd:	int3   
 10042fe:	int3   
 10042ff:	int3   
 1004300:	movsxd r8,DWORD PTR [rcx+0x3c]
 1004304:	xor    r9d,r9d
 1004307:	mov    r10,rdx
 100430a:	add    r8,rcx
 100430d:	movzx  eax,WORD PTR [r8+0x14]
 1004312:	movzx  r11d,WORD PTR [r8+0x6]
 1004317:	lea    rcx,[rax+r8*1+0x18]
 100431c:	test   r11d,r11d
 100431f:	je     0x100433f
 1004321:	mov    edx,DWORD PTR [rcx+0xc]
 1004324:	cmp    r10,rdx
 1004327:	jb     0x1004333
 1004329:	mov    eax,DWORD PTR [rcx+0x8]
 100432c:	add    eax,edx
 100432e:	cmp    r10,rax
 1004331:	jb     0x1004342
 1004333:	inc    r9d
 1004336:	add    rcx,0x28
 100433a:	cmp    r9d,r11d
 100433d:	jb     0x1004321
 100433f:	xor    eax,eax
 1004341:	ret    
 1004342:	mov    rax,rcx
 1004345:	ret    
 1004346:	int3   
 1004347:	int3   
 1004348:	int3   
 1004349:	int3   
 100434a:	int3   
 100434b:	int3   
 100434c:	int3   
 100434d:	int3   
 100434e:	int3   
 100434f:	int3   
 1004350:	sub    rsp,0x28
 1004354:	mov    r8,rcx
 1004357:	lea    r9,[rip+0xffffffffffffbca2]        # 0x1000000
 100435e:	mov    rcx,r9
 1004361:	call   0x10042c0
 1004366:	test   eax,eax
 1004368:	je     0x100438c
 100436a:	sub    r8,r9
 100436d:	mov    rdx,r8
 1004370:	mov    rcx,r9
 1004373:	call   0x1004300
 1004378:	test   rax,rax
 100437b:	je     0x100438c
 100437d:	mov    eax,DWORD PTR [rax+0x24]
 1004380:	shr    eax,0x1f
 1004383:	not    eax
 1004385:	and    eax,0x1
 1004388:	jmp    0x100438c
 100438a:	xor    eax,eax
 100438c:	add    rsp,0x28
 1004390:	ret    
 1004391:	int3   
 1004392:	int3   
 1004393:	int3   
 1004394:	int3   
 1004395:	int3   
 1004396:	int3   
 1004397:	int3   
 1004398:	jmp    QWORD PTR [rip+0xffffffffffffcf5a]        # 0x10012f8
 100439e:	int3   
 100439f:	int3   
 10043a0:	int3   
 10043a1:	int3   
 10043a2:	int3   
 10043a3:	int3   
 10043a4:	jmp    QWORD PTR [rip+0xffffffffffffcf46]        # 0x10012f0
 10043aa:	int3   
 10043ab:	int3   
 10043ac:	int3   
 10043ad:	int3   
 10043ae:	int3   
 10043af:	int3   
 10043b0:	xor    eax,eax
 10043b2:	ret    
 10043b3:	int3   
 10043b4:	int3   
 10043b5:	int3   
 10043b6:	int3   
 10043b7:	int3   
 10043b8:	int3   
 10043b9:	int3   
 10043ba:	int3   
 10043bb:	int3   
 10043bc:	xor    eax,eax
 10043be:	ret    
 10043bf:	int3   
 10043c0:	int3   
 10043c1:	int3   
 10043c2:	int3   
 10043c3:	int3   
 10043c4:	int3   
 10043c5:	int3   
 10043c6:	int3   
 10043c7:	int3   
 10043c8:	mov    QWORD PTR [rsp+0x18],rbx
 10043cd:	push   rdi
 10043ce:	sub    rsp,0x20
 10043d2:	mov    rax,QWORD PTR [rip+0x3d37]        # 0x1008110
 10043d9:	and    QWORD PTR [rsp+0x30],0x0
 10043df:	movabs rdi,0x2b992ddfa232
 10043e9:	cmp    rax,rdi
 10043ec:	je     0x10043fa
 10043ee:	not    rax
 10043f1:	mov    QWORD PTR [rip+0x3d20],rax        # 0x1008118
 10043f8:	jmp    0x1004470
 10043fa:	lea    rcx,[rsp+0x30]
 10043ff:	call   QWORD PTR [rip+0xffffffffffffcd3b]        # 0x1001140
 1004405:	mov    rbx,QWORD PTR [rsp+0x30]
 100440a:	call   QWORD PTR [rip+0xffffffffffffcd38]        # 0x1001148
 1004410:	mov    r11d,eax
 1004413:	xor    rbx,r11
 1004416:	call   QWORD PTR [rip+0xffffffffffffcd3c]        # 0x1001158
 100441c:	mov    r11d,eax
 100441f:	xor    rbx,r11
 1004422:	call   QWORD PTR [rip+0xffffffffffffcd38]        # 0x1001160
 1004428:	lea    rcx,[rsp+0x38]
 100442d:	mov    r11d,eax
 1004430:	xor    rbx,r11
 1004433:	call   QWORD PTR [rip+0xffffffffffffcd2f]        # 0x1001168
 1004439:	mov    r11,QWORD PTR [rsp+0x38]
 100443e:	xor    r11,rbx
 1004441:	movabs rax,0xffffffffffff
 100444b:	and    r11,rax
 100444e:	movabs rax,0x2b992ddfa233
 1004458:	cmp    r11,rdi
 100445b:	cmove  r11,rax
 100445f:	mov    QWORD PTR [rip+0x3caa],r11        # 0x1008110
 1004466:	not    r11
 1004469:	mov    QWORD PTR [rip+0x3ca8],r11        # 0x1008118
 1004470:	mov    rbx,QWORD PTR [rsp+0x40]
 1004475:	add    rsp,0x20
 1004479:	pop    rdi
 100447a:	ret    
 100447b:	int3   
 100447c:	int3   
 100447d:	int3   
 100447e:	int3   
 100447f:	int3   
 1004480:	int3   
 1004481:	int3   
 1004482:	jmp    QWORD PTR [rip+0xffffffffffffce40]        # 0x10012c8
 1004488:	int3   
 1004489:	int3   
 100448a:	int3   
 100448b:	int3   
 100448c:	int3   
 100448d:	int3   
 100448e:	jmp    QWORD PTR [rip+0xffffffffffffce2c]        # 0x10012c0
 1004494:	int3   
 1004495:	int3   
 1004496:	int3   
 1004497:	int3   
 1004498:	int3   
 1004499:	int3   
 100449a:	jmp    QWORD PTR [rip+0xffffffffffffce18]        # 0x10012b8
 10044a0:	int3   
 10044a1:	int3   
 10044a2:	int3   
 10044a3:	int3   
 10044a4:	int3   
 10044a5:	int3   
 10044a6:	jmp    QWORD PTR [rip+0xffffffffffffce04]        # 0x10012b0
 10044ac:	int3   
 10044ad:	int3   
 10044ae:	int3   
 10044af:	int3   
 10044b0:	int3   
 10044b1:	int3   
 10044b2:	jmp    QWORD PTR [rip+0xffffffffffffcde8]        # 0x10012a0
 10044b8:	lea    rax,[rip+0x3cc9]        # 0x1008188
 10044bf:	jmp    0x10044c4
 10044c4:	mov    QWORD PTR [rsp+0x8],rcx
 10044c9:	mov    QWORD PTR [rsp+0x10],rdx
 10044ce:	mov    QWORD PTR [rsp+0x18],r8
 10044d3:	mov    QWORD PTR [rsp+0x20],r9
 10044d8:	sub    rsp,0x68
 10044dc:	movdqa XMMWORD PTR [rsp+0x20],xmm0
 10044e2:	movdqa XMMWORD PTR [rsp+0x30],xmm1
 10044e8:	movdqa XMMWORD PTR [rsp+0x40],xmm2
 10044ee:	movdqa XMMWORD PTR [rsp+0x50],xmm3
 10044f4:	mov    rdx,rax
 10044f7:	lea    rcx,[rip+0x2c42]        # 0x1007140
 10044fe:	call   0x10060d8
 1004503:	movdqa xmm0,XMMWORD PTR [rsp+0x20]
 1004509:	movdqa xmm1,XMMWORD PTR [rsp+0x30]
 100450f:	movdqa xmm2,XMMWORD PTR [rsp+0x40]
 1004515:	movdqa xmm3,XMMWORD PTR [rsp+0x50]
 100451b:	mov    rcx,QWORD PTR [rsp+0x70]
 1004520:	mov    rdx,QWORD PTR [rsp+0x78]
 1004525:	mov    r8,QWORD PTR [rsp+0x80]
 100452d:	mov    r9,QWORD PTR [rsp+0x88]
 1004535:	add    rsp,0x68
 1004539:	jmp    0x100453b
 100453b:	jmp    rax
 100453d:	lea    rax,[rip+0x3c1c]        # 0x1008160
 1004544:	jmp    0x10044c4
 1004549:	lea    rax,[rip+0x3c18]        # 0x1008168
 1004550:	jmp    0x10044c4
 1004555:	lea    rax,[rip+0x3c14]        # 0x1008170
 100455c:	jmp    0x10044c4
 1004561:	lea    rax,[rip+0x3c10]        # 0x1008178
 1004568:	jmp    0x10044c4
 100456d:	lea    rax,[rip+0x3c0c]        # 0x1008180
 1004574:	jmp    0x10044c4
 1004579:	int3   
 100457a:	int3   
 100457b:	int3   
 100457c:	int3   
 100457d:	int3   
 100457e:	int3   
 100457f:	int3   
 1004580:	sub    rsp,0x308
 1004587:	mov    rax,QWORD PTR [rip+0x3b82]        # 0x1008110
 100458e:	xor    rax,rsp
 1004591:	mov    QWORD PTR [rsp+0x2f8],rax
 1004599:	mov    QWORD PTR [rsp+0x280],0x0
 10045a5:	mov    DWORD PTR [rsp+0x250],0x104
 10045b0:	mov    DWORD PTR [rsp+0x25c],0x0
 10045bb:	mov    QWORD PTR [rsp+0x278],0x0
 10045c7:	mov    QWORD PTR [rsp+0x260],0x0
 10045d3:	mov    QWORD PTR [rsp+0x268],0x0
 10045df:	mov    QWORD PTR [rsp+0x288],0x0
 10045eb:	mov    DWORD PTR [rsp+0x258],0x0
 10045f6:	mov    DWORD PTR [rsp+0x274],0x0
 1004601:	mov    DWORD PTR [rsp+0x254],0x409
 100460c:	lea    rax,[rsp+0x280]
 1004614:	mov    QWORD PTR [rsp+0x20],rax
 1004619:	mov    r9d,0x20019
 100461f:	xor    r8d,r8d
 1004622:	lea    rdx,[rip+0xffffffffffffce87]        # 0x10014b0
 1004629:	mov    rcx,0xffffffff80000002
 1004630:	call   0x1005200
 1004635:	mov    DWORD PTR [rsp+0x270],eax
 100463c:	cmp    DWORD PTR [rsp+0x270],0x0
 1004644:	je     0x100464b
 1004646:	jmp    0x1004d3c
 100464b:	lea    rax,[rsp+0x250]
 1004653:	mov    QWORD PTR [rsp+0x28],rax
 1004658:	lea    rax,[rsp+0x40]
 100465d:	mov    QWORD PTR [rsp+0x20],rax
 1004662:	xor    r9d,r9d
 1004665:	xor    r8d,r8d
 1004668:	lea    rdx,[rip+0xffffffffffffce29]        # 0x1001498
 100466f:	mov    rcx,QWORD PTR [rsp+0x280]
 1004677:	call   0x1005240
 100467c:	mov    DWORD PTR [rsp+0x270],eax
 1004683:	cmp    DWORD PTR [rsp+0x270],0x0
 100468b:	je     0x1004692
 100468d:	jmp    0x1004d3c
 1004692:	lea    rcx,[rip+0xffffffffffffcddf]        # 0x1001478
 1004699:	call   QWORD PTR [rip+0xffffffffffffcb91]        # 0x1001230
 100469f:	lea    rdx,[rip+0xffffffffffffcdba]        # 0x1001460
 10046a6:	mov    rcx,rax
 10046a9:	call   QWORD PTR [rip+0xffffffffffffcb31]        # 0x10011e0
 10046af:	mov    QWORD PTR [rsp+0x268],rax
 10046b7:	lea    rcx,[rip+0xffffffffffffcdba]        # 0x1001478
 10046be:	call   QWORD PTR [rip+0xffffffffffffcb6c]        # 0x1001230
 10046c4:	lea    rdx,[rip+0xffffffffffffcd7d]        # 0x1001448
 10046cb:	mov    rcx,rax
 10046ce:	call   QWORD PTR [rip+0xffffffffffffcb0c]        # 0x10011e0
 10046d4:	mov    QWORD PTR [rsp+0x288],rax
 10046dc:	cmp    QWORD PTR [rsp+0x268],0x0
 10046e5:	je     0x10046f2
 10046e7:	cmp    QWORD PTR [rsp+0x288],0x0
 10046f0:	jne    0x1004702
 10046f2:	mov    DWORD PTR [rsp+0x274],0x1
 10046fd:	jmp    0x1004917
 1004702:	xor    edx,edx
 1004704:	xor    ecx,ecx
 1004706:	call   QWORD PTR [rsp+0x288]
 100470d:	mov    DWORD PTR [rsp+0x25c],eax
 1004714:	mov    eax,DWORD PTR [rsp+0x25c]
 100471b:	mov    DWORD PTR [rsp+0x250],eax
 1004722:	lea    rcx,[rsp+0x40]
 1004727:	call   QWORD PTR [rip+0xffffffffffffc9eb]        # 0x1001118
 100472d:	mov    ecx,DWORD PTR [rsp+0x250]
 1004734:	lea    eax,[rcx+rax*1+0x2]
 1004738:	mov    DWORD PTR [rsp+0x250],eax
 100473f:	cmp    QWORD PTR [rsp+0x278],0x0
 1004748:	je     0x10047df
 100474e:	mov    QWORD PTR [rsp+0x290],0x0
 100475a:	mov    eax,DWORD PTR [rsp+0x250]
 1004761:	shl    rax,1
 1004764:	mov    QWORD PTR [rsp+0x2c8],rax
 100476c:	call   QWORD PTR [rip+0xffffffffffffcab6]        # 0x1001228
 1004772:	mov    rcx,QWORD PTR [rsp+0x2c8]
 100477a:	mov    r9,rcx
 100477d:	mov    r8,QWORD PTR [rsp+0x278]
 1004785:	mov    edx,0x8
 100478a:	mov    rcx,rax
 100478d:	call   QWORD PTR [rip+0xffffffffffffc98d]        # 0x1001120
 1004793:	mov    QWORD PTR [rsp+0x290],rax
 100479b:	cmp    QWORD PTR [rsp+0x290],0x0
 10047a4:	jne    0x10047cd
 10047a6:	call   QWORD PTR [rip+0xffffffffffffca7c]        # 0x1001228
 10047ac:	mov    r8,QWORD PTR [rsp+0x278]
 10047b4:	xor    edx,edx
 10047b6:	mov    rcx,rax
 10047b9:	call   QWORD PTR [rip+0xffffffffffffca79]        # 0x1001238
 10047bf:	mov    QWORD PTR [rsp+0x278],0x0
 10047cb:	jmp    0x10047dd
 10047cd:	mov    rax,QWORD PTR [rsp+0x290]
 10047d5:	mov    QWORD PTR [rsp+0x278],rax
 10047dd:	jmp    0x1004818
 10047df:	mov    eax,DWORD PTR [rsp+0x250]
 10047e6:	shl    rax,1
 10047e9:	mov    QWORD PTR [rsp+0x2d0],rax
 10047f1:	call   QWORD PTR [rip+0xffffffffffffca31]        # 0x1001228
 10047f7:	mov    rcx,QWORD PTR [rsp+0x2d0]
 10047ff:	mov    r8,rcx
 1004802:	mov    edx,0x8
 1004807:	mov    rcx,rax
 100480a:	call   QWORD PTR [rip+0xffffffffffffca40]        # 0x1001250
 1004810:	mov    QWORD PTR [rsp+0x278],rax
 1004818:	cmp    QWORD PTR [rsp+0x278],0x0
 1004821:	je     0x1004840
 1004823:	mov    rdx,QWORD PTR [rsp+0x278]
 100482b:	mov    ecx,DWORD PTR [rsp+0x250]
 1004832:	call   QWORD PTR [rsp+0x288]
 1004839:	mov    DWORD PTR [rsp+0x25c],eax
 1004840:	cmp    QWORD PTR [rsp+0x278],0x0
 1004849:	je     0x100485f
 100484b:	mov    eax,DWORD PTR [rsp+0x250]
 1004852:	cmp    DWORD PTR [rsp+0x25c],eax
 1004859:	jae    0x1004702
 100485f:	cmp    QWORD PTR [rsp+0x278],0x0
 1004868:	je     0x1004879
 100486a:	mov    rax,QWORD PTR [rsp+0x278]
 1004872:	movzx  eax,WORD PTR [rax]
 1004875:	test   eax,eax
 1004877:	jne    0x10048a3
 1004879:	lea    rcx,[rsp+0x40]
 100487e:	call   QWORD PTR [rsp+0x268]
 1004885:	mov    DWORD PTR [rsp+0x258],eax
 100488c:	cmp    DWORD PTR [rsp+0x258],0x0
 1004894:	jne    0x10048a1
 1004896:	mov    DWORD PTR [rsp+0x274],0x1
 10048a1:	jmp    0x1004917
 10048a3:	mov    DWORD PTR [rsp+0x28],0xffffffff
 10048ab:	lea    rax,[rsp+0x40]
 10048b0:	mov    QWORD PTR [rsp+0x20],rax
 10048b5:	mov    r9d,0xffffffff
 10048bb:	mov    r8,QWORD PTR [rsp+0x278]
 10048c3:	mov    edx,0x1
 10048c8:	mov    ecx,DWORD PTR [rsp+0x254]
 10048cf:	call   QWORD PTR [rip+0xffffffffffffc853]        # 0x1001128
 10048d5:	cmp    eax,0x2
 10048d8:	je     0x100490c
 10048da:	mov    DWORD PTR [rsp+0x274],0x1
 10048e5:	call   QWORD PTR [rip+0xffffffffffffc93d]        # 0x1001228
 10048eb:	mov    r8,QWORD PTR [rsp+0x278]
 10048f3:	xor    edx,edx
 10048f5:	mov    rcx,rax
 10048f8:	call   QWORD PTR [rip+0xffffffffffffc93a]        # 0x1001238
 10048fe:	mov    QWORD PTR [rsp+0x278],0x0
 100490a:	jmp    0x1004917
 100490c:	mov    DWORD PTR [rsp+0x258],0x1
 1004917:	cmp    DWORD PTR [rsp+0x274],0x0
 100491f:	je     0x1004d3c
 1004925:	xor    r8d,r8d
 1004928:	xor    edx,edx
 100492a:	lea    rcx,[rip+0xffffffffffffcb07]        # 0x1001438
 1004931:	call   QWORD PTR [rip+0xffffffffffffc7f9]        # 0x1001130
 1004937:	mov    DWORD PTR [rsp+0x25c],eax
 100493e:	mov    eax,DWORD PTR [rsp+0x25c]
 1004945:	mov    DWORD PTR [rsp+0x250],eax
 100494c:	cmp    DWORD PTR [rsp+0x250],0x0
 1004954:	jne    0x1004974
 1004956:	lea    rdx,[rsp+0x40]
 100495b:	lea    rcx,[rip+0xffffffffffffcad6]        # 0x1001438
 1004962:	call   QWORD PTR [rip+0xffffffffffffc7d0]        # 0x1001138
 1004968:	mov    DWORD PTR [rsp+0x258],eax
 100496f:	jmp    0x1004d3c
 1004974:	mov    DWORD PTR [rsp+0x2a8],0x0
 100497f:	mov    QWORD PTR [rsp+0x2a0],0x0
 100498b:	mov    DWORD PTR [rsp+0x298],0x0
 1004996:	lea    rcx,[rsp+0x40]
 100499b:	call   QWORD PTR [rip+0xffffffffffffc777]        # 0x1001118
 10049a1:	add    eax,0x1
 10049a4:	mov    DWORD PTR [rsp+0x29c],eax
 10049ab:	mov    eax,DWORD PTR [rsp+0x25c]
 10049b2:	mov    DWORD PTR [rsp+0x250],eax
 10049b9:	lea    rcx,[rsp+0x40]
 10049be:	call   QWORD PTR [rip+0xffffffffffffc754]        # 0x1001118
 10049c4:	mov    ecx,DWORD PTR [rsp+0x250]
 10049cb:	lea    eax,[rcx+rax*1+0x2]
 10049cf:	mov    DWORD PTR [rsp+0x250],eax
 10049d6:	cmp    QWORD PTR [rsp+0x278],0x0
 10049df:	je     0x1004a76
 10049e5:	mov    QWORD PTR [rsp+0x2b0],0x0
 10049f1:	mov    eax,DWORD PTR [rsp+0x250]
 10049f8:	shl    rax,1
 10049fb:	mov    QWORD PTR [rsp+0x2d8],rax
 1004a03:	call   QWORD PTR [rip+0xffffffffffffc81f]        # 0x1001228
 1004a09:	mov    rcx,QWORD PTR [rsp+0x2d8]
 1004a11:	mov    r9,rcx
 1004a14:	mov    r8,QWORD PTR [rsp+0x278]
 1004a1c:	mov    edx,0x8
 1004a21:	mov    rcx,rax
 1004a24:	call   QWORD PTR [rip+0xffffffffffffc6f6]        # 0x1001120
 1004a2a:	mov    QWORD PTR [rsp+0x2b0],rax
 1004a32:	cmp    QWORD PTR [rsp+0x2b0],0x0
 1004a3b:	jne    0x1004a64
 1004a3d:	call   QWORD PTR [rip+0xffffffffffffc7e5]        # 0x1001228
 1004a43:	mov    r8,QWORD PTR [rsp+0x278]
 1004a4b:	xor    edx,edx
 1004a4d:	mov    rcx,rax
 1004a50:	call   QWORD PTR [rip+0xffffffffffffc7e2]        # 0x1001238
 1004a56:	mov    QWORD PTR [rsp+0x278],0x0
 1004a62:	jmp    0x1004a74
 1004a64:	mov    rax,QWORD PTR [rsp+0x2b0]
 1004a6c:	mov    QWORD PTR [rsp+0x278],rax
 1004a74:	jmp    0x1004aaf
 1004a76:	mov    eax,DWORD PTR [rsp+0x250]
 1004a7d:	shl    rax,1
 1004a80:	mov    QWORD PTR [rsp+0x2e0],rax
 1004a88:	call   QWORD PTR [rip+0xffffffffffffc79a]        # 0x1001228
 1004a8e:	mov    rcx,QWORD PTR [rsp+0x2e0]
 1004a96:	mov    r8,rcx
 1004a99:	mov    edx,0x8
 1004a9e:	mov    rcx,rax
 1004aa1:	call   QWORD PTR [rip+0xffffffffffffc7a9]        # 0x1001250
 1004aa7:	mov    QWORD PTR [rsp+0x278],rax
 1004aaf:	cmp    QWORD PTR [rsp+0x278],0x0
 1004ab8:	je     0x1004ade
 1004aba:	mov    r8d,DWORD PTR [rsp+0x250]
 1004ac2:	mov    rdx,QWORD PTR [rsp+0x278]
 1004aca:	lea    rcx,[rip+0xffffffffffffc967]        # 0x1001438
 1004ad1:	call   QWORD PTR [rip+0xffffffffffffc659]        # 0x1001130
 1004ad7:	mov    DWORD PTR [rsp+0x25c],eax
 1004ade:	cmp    QWORD PTR [rsp+0x278],0x0
 1004ae7:	je     0x1004afd
 1004ae9:	mov    eax,DWORD PTR [rsp+0x250]
 1004af0:	cmp    DWORD PTR [rsp+0x25c],eax
 1004af7:	jae    0x10049ab
 1004afd:	mov    rax,QWORD PTR [rsp+0x278]
 1004b05:	mov    QWORD PTR [rsp+0x2a0],rax
 1004b0d:	mov    eax,DWORD PTR [rsp+0x25c]
 1004b14:	add    eax,0x1
 1004b17:	mov    DWORD PTR [rsp+0x298],eax
 1004b1e:	cmp    DWORD PTR [rsp+0x2a8],0x0
 1004b26:	jne    0x1004c5a
 1004b2c:	mov    eax,DWORD PTR [rsp+0x29c]
 1004b33:	cmp    DWORD PTR [rsp+0x298],eax
 1004b3a:	jb     0x1004c5a
 1004b40:	mov    DWORD PTR [rsp+0x2bc],0x0
 1004b4b:	mov    DWORD PTR [rsp+0x2b8],0x0
 1004b56:	mov    WORD PTR [rsp+0x2c0],0x0
 1004b60:	mov    eax,DWORD PTR [rsp+0x2bc]
 1004b67:	mov    rcx,QWORD PTR [rsp+0x2a0]
 1004b6f:	movzx  eax,WORD PTR [rcx+rax*2]
 1004b73:	mov    WORD PTR [rsp+0x2c0],ax
 1004b7b:	movzx  eax,WORD PTR [rsp+0x2c0]
 1004b83:	mov    ecx,DWORD PTR [rsp+0x2bc]
 1004b8a:	movzx  ecx,WORD PTR [rsp+rcx*2+0x40]
 1004b8f:	cmp    eax,ecx
 1004b91:	jne    0x1004ba0
 1004b93:	mov    DWORD PTR [rsp+0x2e8],0x1
 1004b9e:	jmp    0x1004bab
 1004ba0:	mov    DWORD PTR [rsp+0x2e8],0x0
 1004bab:	mov    eax,DWORD PTR [rsp+0x2e8]
 1004bb2:	mov    DWORD PTR [rsp+0x2b8],eax
 1004bb9:	cmp    DWORD PTR [rsp+0x2b8],0x0
 1004bc1:	je     0x1004bee
 1004bc3:	mov    eax,DWORD PTR [rsp+0x29c]
 1004bca:	sub    eax,0x1
 1004bcd:	cmp    DWORD PTR [rsp+0x2bc],eax
 1004bd4:	jne    0x1004bd8
 1004bd6:	jmp    0x1004bee
 1004bd8:	mov    eax,DWORD PTR [rsp+0x2bc]
 1004bdf:	add    eax,0x1
 1004be2:	mov    DWORD PTR [rsp+0x2bc],eax
 1004be9:	jmp    0x1004b60
 1004bee:	cmp    DWORD PTR [rsp+0x2b8],0x0
 1004bf6:	je     0x1004c05
 1004bf8:	mov    DWORD PTR [rsp+0x2a8],0x1
 1004c03:	jmp    0x1004c30
 1004c05:	mov    eax,DWORD PTR [rsp+0x29c]
 1004c0c:	sub    eax,0x1
 1004c0f:	cmp    DWORD PTR [rsp+0x2bc],eax
 1004c16:	jne    0x1004c30
 1004c18:	movzx  eax,WORD PTR [rsp+0x2c0]
 1004c20:	cmp    eax,0x3b
 1004c23:	jne    0x1004c30
 1004c25:	mov    DWORD PTR [rsp+0x2a8],0x1
 1004c30:	mov    rax,QWORD PTR [rsp+0x2a0]
 1004c38:	add    rax,0x2
 1004c3c:	mov    QWORD PTR [rsp+0x2a0],rax
 1004c44:	mov    eax,DWORD PTR [rsp+0x298]
 1004c4b:	sub    eax,0x1
 1004c4e:	mov    DWORD PTR [rsp+0x298],eax
 1004c55:	jmp    0x1004b1e
 1004c5a:	cmp    DWORD PTR [rsp+0x2a8],0x0
 1004c62:	je     0x1004c74
 1004c64:	mov    DWORD PTR [rsp+0x258],0x1
 1004c6f:	jmp    0x1004d3c
 1004c74:	mov    eax,DWORD PTR [rsp+0x250]
 1004c7b:	shl    rax,1
 1004c7e:	mov    QWORD PTR [rsp+0x2f0],rax
 1004c86:	call   QWORD PTR [rip+0xffffffffffffc59c]        # 0x1001228
 1004c8c:	mov    rcx,QWORD PTR [rsp+0x2f0]
 1004c94:	mov    r8,rcx
 1004c97:	mov    edx,0x8
 1004c9c:	mov    rcx,rax
 1004c9f:	call   QWORD PTR [rip+0xffffffffffffc5ab]        # 0x1001250
 1004ca5:	mov    QWORD PTR [rsp+0x260],rax
 1004cad:	cmp    QWORD PTR [rsp+0x278],0x0
 1004cb6:	je     0x1004d3c
 1004cbc:	cmp    QWORD PTR [rsp+0x260],0x0
 1004cc5:	je     0x1004d3c
 1004cc7:	mov    eax,DWORD PTR [rsp+0x250]
 1004cce:	lea    r8,[rsp+0x40]
 1004cd3:	mov    rdx,rax
 1004cd6:	mov    rcx,QWORD PTR [rsp+0x260]
 1004cde:	call   0x1004e70
 1004ce3:	mov    eax,DWORD PTR [rsp+0x250]
 1004cea:	lea    r8,[rip+0xffffffffffffc73f]        # 0x1001430
 1004cf1:	mov    rdx,rax
 1004cf4:	mov    rcx,QWORD PTR [rsp+0x260]
 1004cfc:	call   0x1004ee0
 1004d01:	mov    eax,DWORD PTR [rsp+0x250]
 1004d08:	mov    r8,QWORD PTR [rsp+0x278]
 1004d10:	mov    rdx,rax
 1004d13:	mov    rcx,QWORD PTR [rsp+0x260]
 1004d1b:	call   0x1004ee0
 1004d20:	mov    rdx,QWORD PTR [rsp+0x260]
 1004d28:	lea    rcx,[rip+0xffffffffffffc709]        # 0x1001438
 1004d2f:	call   QWORD PTR [rip+0xffffffffffffc403]        # 0x1001138
 1004d35:	mov    DWORD PTR [rsp+0x258],eax
 1004d3c:	cmp    QWORD PTR [rsp+0x278],0x0
 1004d45:	je     0x1004d6c
 1004d47:	call   QWORD PTR [rip+0xffffffffffffc4db]        # 0x1001228
 1004d4d:	mov    r8,QWORD PTR [rsp+0x278]
 1004d55:	xor    edx,edx
 1004d57:	mov    rcx,rax
 1004d5a:	call   QWORD PTR [rip+0xffffffffffffc4d8]        # 0x1001238
 1004d60:	mov    QWORD PTR [rsp+0x278],0x0
 1004d6c:	cmp    QWORD PTR [rsp+0x260],0x0
 1004d75:	je     0x1004d9c
 1004d77:	call   QWORD PTR [rip+0xffffffffffffc4ab]        # 0x1001228
 1004d7d:	mov    r8,QWORD PTR [rsp+0x260]
 1004d85:	xor    edx,edx
 1004d87:	mov    rcx,rax
 1004d8a:	call   QWORD PTR [rip+0xffffffffffffc4a8]        # 0x1001238
 1004d90:	mov    QWORD PTR [rsp+0x260],0x0
 1004d9c:	cmp    QWORD PTR [rsp+0x280],0x0
 1004da5:	je     0x1004db4
 1004da7:	mov    rcx,QWORD PTR [rsp+0x280]
 1004daf:	call   0x1005e10
 1004db4:	mov    eax,DWORD PTR [rsp+0x258]
 1004dbb:	mov    rcx,QWORD PTR [rsp+0x2f8]
 1004dc3:	xor    rcx,rsp
 1004dc6:	call   0x1003f60
 1004dcb:	add    rsp,0x308
 1004dd2:	ret    
 1004dd3:	int3   
 1004dd4:	int3   
 1004dd5:	int3   
 1004dd6:	int3   
 1004dd7:	int3   
 1004dd8:	int3   
 1004dd9:	int3   
 1004dda:	int3   
 1004ddb:	int3   
 1004ddc:	int3   
 1004ddd:	int3   
 1004dde:	int3   
 1004ddf:	int3   
 1004de0:	rex push rbp
 1004de2:	sub    rsp,0x30
 1004de6:	mov    rbp,rdx
 1004de9:	cmp    QWORD PTR [rbp+0x278],0x0
 1004df1:	je     0x1004e16
 1004df3:	call   QWORD PTR [rip+0xffffffffffffc42f]        # 0x1001228
 1004df9:	mov    r8,QWORD PTR [rbp+0x278]
 1004e00:	xor    edx,edx
 1004e02:	mov    rcx,rax
 1004e05:	call   QWORD PTR [rip+0xffffffffffffc42d]        # 0x1001238
 1004e0b:	mov    QWORD PTR [rbp+0x278],0x0
 1004e16:	cmp    QWORD PTR [rbp+0x260],0x0
 1004e1e:	je     0x1004e43
 1004e20:	call   QWORD PTR [rip+0xffffffffffffc402]        # 0x1001228
 1004e26:	mov    r8,QWORD PTR [rbp+0x260]
 1004e2d:	xor    edx,edx
 1004e2f:	mov    rcx,rax
 1004e32:	call   QWORD PTR [rip+0xffffffffffffc400]        # 0x1001238
 1004e38:	mov    QWORD PTR [rbp+0x260],0x0
 1004e43:	cmp    QWORD PTR [rbp+0x280],0x0
 1004e4b:	je     0x1004e59
 1004e4d:	mov    rcx,QWORD PTR [rbp+0x280]
 1004e54:	call   0x1005e10
 1004e59:	add    rsp,0x30
 1004e5d:	pop    rbp
 1004e5e:	ret    
 1004e5f:	int3   
 1004e60:	int3   
 1004e61:	int3   
 1004e62:	int3   
 1004e63:	int3   
 1004e64:	int3   
 1004e65:	int3   
 1004e66:	int3   
 1004e67:	int3   
 1004e68:	int3   
 1004e69:	int3   
 1004e6a:	int3   
 1004e6b:	int3   
 1004e6c:	int3   
 1004e6d:	int3   
 1004e6e:	int3   
 1004e6f:	int3   
 1004e70:	mov    QWORD PTR [rsp+0x18],r8
 1004e75:	mov    QWORD PTR [rsp+0x10],rdx
 1004e7a:	mov    QWORD PTR [rsp+0x8],rcx
 1004e7f:	sub    rsp,0x48
 1004e83:	mov    r8d,0x7fffffff
 1004e89:	mov    rdx,QWORD PTR [rsp+0x58]
 1004e8e:	mov    rcx,QWORD PTR [rsp+0x50]
 1004e93:	call   0x1004f70
 1004e98:	mov    DWORD PTR [rsp+0x30],eax
 1004e9c:	cmp    DWORD PTR [rsp+0x30],0x0
 1004ea1:	jl     0x1004ec7
 1004ea3:	mov    QWORD PTR [rsp+0x20],0x7ffffffe
 1004eac:	mov    r9,QWORD PTR [rsp+0x60]
 1004eb1:	xor    r8d,r8d
 1004eb4:	mov    rdx,QWORD PTR [rsp+0x58]
 1004eb9:	mov    rcx,QWORD PTR [rsp+0x50]
 1004ebe:	call   0x10050e0
 1004ec3:	mov    DWORD PTR [rsp+0x30],eax
 1004ec7:	mov    eax,DWORD PTR [rsp+0x30]
 1004ecb:	add    rsp,0x48
 1004ecf:	ret    
 1004ed0:	int3   
 1004ed1:	int3   
 1004ed2:	int3   
 1004ed3:	int3   
 1004ed4:	int3   
 1004ed5:	int3   
 1004ed6:	int3   
 1004ed7:	int3   
 1004ed8:	int3   
 1004ed9:	int3   
 1004eda:	int3   
 1004edb:	int3   
 1004edc:	int3   
 1004edd:	int3   
 1004ede:	int3   
 1004edf:	int3   
 1004ee0:	mov    QWORD PTR [rsp+0x18],r8
 1004ee5:	mov    QWORD PTR [rsp+0x10],rdx
 1004eea:	mov    QWORD PTR [rsp+0x8],rcx
 1004eef:	sub    rsp,0x48
 1004ef3:	mov    r9d,0x7fffffff
 1004ef9:	lea    r8,[rsp+0x38]
 1004efe:	mov    rdx,QWORD PTR [rsp+0x58]
 1004f03:	mov    rcx,QWORD PTR [rsp+0x50]
 1004f08:	call   0x1004fc0
 1004f0d:	mov    DWORD PTR [rsp+0x30],eax
 1004f11:	cmp    DWORD PTR [rsp+0x30],0x0
 1004f16:	jl     0x1004f53
 1004f18:	mov    rax,QWORD PTR [rsp+0x38]
 1004f1d:	mov    rcx,QWORD PTR [rsp+0x58]
 1004f22:	sub    rcx,rax
 1004f25:	mov    rax,rcx
 1004f28:	mov    rcx,QWORD PTR [rsp+0x50]
 1004f2d:	mov    rdx,QWORD PTR [rsp+0x38]
 1004f32:	lea    rcx,[rcx+rdx*2]
 1004f36:	mov    QWORD PTR [rsp+0x20],0x7fffffff
 1004f3f:	mov    r9,QWORD PTR [rsp+0x60]
 1004f44:	xor    r8d,r8d
 1004f47:	mov    rdx,rax
 1004f4a:	call   0x10050e0
 1004f4f:	mov    DWORD PTR [rsp+0x30],eax
 1004f53:	mov    eax,DWORD PTR [rsp+0x30]
 1004f57:	add    rsp,0x48
 1004f5b:	ret    
 1004f5c:	int3   
 1004f5d:	int3   
 1004f5e:	int3   
 1004f5f:	int3   
 1004f60:	int3   
 1004f61:	int3   
 1004f62:	int3   
 1004f63:	int3   
 1004f64:	int3   
 1004f65:	int3   
 1004f66:	int3   
 1004f67:	int3   
 1004f68:	int3   
 1004f69:	int3   
 1004f6a:	int3   
 1004f6b:	int3   
 1004f6c:	int3   
 1004f6d:	int3   
 1004f6e:	int3   
 1004f6f:	int3   
 1004f70:	mov    QWORD PTR [rsp+0x18],r8
 1004f75:	mov    QWORD PTR [rsp+0x10],rdx
 1004f7a:	mov    QWORD PTR [rsp+0x8],rcx
 1004f7f:	sub    rsp,0x18
 1004f83:	mov    DWORD PTR [rsp],0x0
 1004f8a:	cmp    QWORD PTR [rsp+0x28],0x0
 1004f90:	je     0x1004f9e
 1004f92:	mov    rax,QWORD PTR [rsp+0x30]
 1004f97:	cmp    QWORD PTR [rsp+0x28],rax
 1004f9c:	jbe    0x1004fa5
 1004f9e:	mov    DWORD PTR [rsp],0x80070057
 1004fa5:	mov    eax,DWORD PTR [rsp]
 1004fa8:	add    rsp,0x18
 1004fac:	ret    
 1004fad:	int3   
 1004fae:	int3   
 1004faf:	int3   
 1004fb0:	int3   
 1004fb1:	int3   
 1004fb2:	int3   
 1004fb3:	int3   
 1004fb4:	int3   
 1004fb5:	int3   
 1004fb6:	int3   
 1004fb7:	int3   
 1004fb8:	int3   
 1004fb9:	int3   
 1004fba:	int3   
 1004fbb:	int3   
 1004fbc:	int3   
 1004fbd:	int3   
 1004fbe:	int3   
 1004fbf:	int3   
 1004fc0:	mov    QWORD PTR [rsp+0x20],r9
 1004fc5:	mov    QWORD PTR [rsp+0x18],r8
 1004fca:	mov    QWORD PTR [rsp+0x10],rdx
 1004fcf:	mov    QWORD PTR [rsp+0x8],rcx
 1004fd4:	sub    rsp,0x38
 1004fd8:	mov    r8,QWORD PTR [rsp+0x58]
 1004fdd:	mov    rdx,QWORD PTR [rsp+0x48]
 1004fe2:	mov    rcx,QWORD PTR [rsp+0x40]
 1004fe7:	call   0x1004f70
 1004fec:	mov    DWORD PTR [rsp+0x20],eax
 1004ff0:	cmp    DWORD PTR [rsp+0x20],0x0
 1004ff5:	jl     0x1005011
 1004ff7:	mov    r8,QWORD PTR [rsp+0x50]
 1004ffc:	mov    rdx,QWORD PTR [rsp+0x48]
 1005001:	mov    rcx,QWORD PTR [rsp+0x40]
 1005006:	call   0x1005030
 100500b:	mov    DWORD PTR [rsp+0x20],eax
 100500f:	jmp    0x100501d
 1005011:	mov    rax,QWORD PTR [rsp+0x50]
 1005016:	mov    QWORD PTR [rax],0x0
 100501d:	mov    eax,DWORD PTR [rsp+0x20]
 1005021:	add    rsp,0x38
 1005025:	ret    
 1005026:	int3   
 1005027:	int3   
 1005028:	int3   
 1005029:	int3   
 100502a:	int3   
 100502b:	int3   
 100502c:	int3   
 100502d:	int3   
 100502e:	int3   
 100502f:	int3   
 1005030:	mov    QWORD PTR [rsp+0x18],r8
 1005035:	mov    QWORD PTR [rsp+0x10],rdx
 100503a:	mov    QWORD PTR [rsp+0x8],rcx
 100503f:	sub    rsp,0x18
 1005043:	mov    DWORD PTR [rsp+0x8],0x0
 100504b:	mov    rax,QWORD PTR [rsp+0x28]
 1005050:	mov    QWORD PTR [rsp],rax
 1005054:	cmp    QWORD PTR [rsp+0x28],0x0
 100505a:	je     0x1005086
 100505c:	mov    rax,QWORD PTR [rsp+0x20]
 1005061:	movzx  eax,WORD PTR [rax]
 1005064:	test   eax,eax
 1005066:	je     0x1005086
 1005068:	mov    rax,QWORD PTR [rsp+0x20]
 100506d:	add    rax,0x2
 1005071:	mov    QWORD PTR [rsp+0x20],rax
 1005076:	mov    rax,QWORD PTR [rsp+0x28]
 100507b:	sub    rax,0x1
 100507f:	mov    QWORD PTR [rsp+0x28],rax
 1005084:	jmp    0x1005054
 1005086:	cmp    QWORD PTR [rsp+0x28],0x0
 100508c:	jne    0x1005096
 100508e:	mov    DWORD PTR [rsp+0x8],0x80070057
 1005096:	cmp    QWORD PTR [rsp+0x30],0x0
 100509c:	je     0x10050ca
 100509e:	cmp    DWORD PTR [rsp+0x8],0x0
 10050a3:	jl     0x10050be
 10050a5:	mov    rax,QWORD PTR [rsp+0x28]
 10050aa:	mov    rcx,QWORD PTR [rsp]
 10050ae:	sub    rcx,rax
 10050b1:	mov    rax,rcx
 10050b4:	mov    rcx,QWORD PTR [rsp+0x30]
 10050b9:	mov    QWORD PTR [rcx],rax
 10050bc:	jmp    0x10050ca
 10050be:	mov    rax,QWORD PTR [rsp+0x30]
 10050c3:	mov    QWORD PTR [rax],0x0
 10050ca:	mov    eax,DWORD PTR [rsp+0x8]
 10050ce:	add    rsp,0x18
 10050d2:	ret    
 10050d3:	int3   
 10050d4:	int3   
 10050d5:	int3   
 10050d6:	int3   
 10050d7:	int3   
 10050d8:	int3   
 10050d9:	int3   
 10050da:	int3   
 10050db:	int3   
 10050dc:	int3   
 10050dd:	int3   
 10050de:	int3   
 10050df:	int3   
 10050e0:	mov    QWORD PTR [rsp+0x20],r9
 10050e5:	mov    QWORD PTR [rsp+0x18],r8
 10050ea:	mov    QWORD PTR [rsp+0x10],rdx
 10050ef:	mov    QWORD PTR [rsp+0x8],rcx
 10050f4:	sub    rsp,0x18
 10050f8:	mov    DWORD PTR [rsp+0x8],0x0
 1005100:	mov    QWORD PTR [rsp],0x0
 1005108:	cmp    QWORD PTR [rsp+0x28],0x0
 100510e:	je     0x100517a
 1005110:	cmp    QWORD PTR [rsp+0x40],0x0
 1005116:	je     0x100517a
 1005118:	mov    rax,QWORD PTR [rsp+0x38]
 100511d:	movzx  eax,WORD PTR [rax]
 1005120:	test   eax,eax
 1005122:	je     0x100517a
 1005124:	mov    rax,QWORD PTR [rsp+0x20]
 1005129:	mov    rcx,QWORD PTR [rsp+0x38]
 100512e:	movzx  ecx,WORD PTR [rcx]
 1005131:	mov    WORD PTR [rax],cx
 1005134:	mov    rax,QWORD PTR [rsp+0x20]
 1005139:	add    rax,0x2
 100513d:	mov    QWORD PTR [rsp+0x20],rax
 1005142:	mov    rax,QWORD PTR [rsp+0x38]
 1005147:	add    rax,0x2
 100514b:	mov    QWORD PTR [rsp+0x38],rax
 1005150:	mov    rax,QWORD PTR [rsp+0x28]
 1005155:	sub    rax,0x1
 1005159:	mov    QWORD PTR [rsp+0x28],rax
 100515e:	mov    rax,QWORD PTR [rsp+0x40]
 1005163:	sub    rax,0x1
 1005167:	mov    QWORD PTR [rsp+0x40],rax
 100516c:	mov    rax,QWORD PTR [rsp]
 1005170:	add    rax,0x1
 1005174:	mov    QWORD PTR [rsp],rax
 1005178:	jmp    0x1005108
 100517a:	cmp    QWORD PTR [rsp+0x28],0x0
 1005180:	jne    0x10051a4
 1005182:	mov    rax,QWORD PTR [rsp+0x20]
 1005187:	sub    rax,0x2
 100518b:	mov    QWORD PTR [rsp+0x20],rax
 1005190:	mov    rax,QWORD PTR [rsp]
 1005194:	sub    rax,0x1
 1005198:	mov    QWORD PTR [rsp],rax
 100519c:	mov    DWORD PTR [rsp+0x8],0x8007007a
 10051a4:	mov    rax,QWORD PTR [rsp+0x20]
 10051a9:	mov    WORD PTR [rax],0x0
 10051ae:	cmp    QWORD PTR [rsp+0x30],0x0
 10051b4:	je     0x10051c2
 10051b6:	mov    rax,QWORD PTR [rsp+0x30]
 10051bb:	mov    rcx,QWORD PTR [rsp]
 10051bf:	mov    QWORD PTR [rax],rcx
 10051c2:	mov    eax,DWORD PTR [rsp+0x8]
 10051c6:	add    rsp,0x18
 10051ca:	ret    
 10051cb:	int3   
 10051cc:	int3   
 10051cd:	int3   
 10051ce:	int3   
 10051cf:	int3   
 10051d0:	int3   
 10051d1:	int3   
 10051d2:	int3   
 10051d3:	int3   
 10051d4:	int3   
 10051d5:	int3   
 10051d6:	int3   
 10051d7:	int3   
 10051d8:	int3   
 10051d9:	int3   
 10051da:	int3   
 10051db:	int3   
 10051dc:	int3   
 10051dd:	int3   
 10051de:	int3   
 10051df:	int3   
 10051e0:	mov    QWORD PTR [rsp+0x8],rcx
 10051e5:	mov    QWORD PTR [rsp+0x10],rdx
 10051ea:	mov    QWORD PTR [rsp+0x18],r8
 10051ef:	mov    QWORD PTR [rsp+0x20],r9
 10051f4:	ret    
 10051f5:	int3   
 10051f6:	int3   
 10051f7:	int3   
 10051f8:	int3   
 10051f9:	int3   
 10051fa:	int3   
 10051fb:	int3   
 10051fc:	int3   
 10051fd:	int3   
 10051fe:	int3   
 10051ff:	int3   
 1005200:	sub    rsp,0x38
 1005204:	cmp    DWORD PTR [rip+0x3555],0x0        # 0x1008760
 100520b:	je     0x100521b
 100520d:	mov    r8,QWORD PTR [rsp+0x60]
 1005212:	add    rsp,0x38
 1005216:	jmp    0x1005fb0
 100521b:	mov    rax,QWORD PTR [rsp+0x60]
 1005220:	mov    QWORD PTR [rsp+0x20],rax
 1005225:	call   QWORD PTR [rip+0xffffffffffffbe65]        # 0x1001090
 100522b:	add    rsp,0x38
 100522f:	ret    
 1005230:	int3   
 1005231:	int3   
 1005232:	int3   
 1005233:	int3   
 1005234:	int3   
 1005235:	int3   
 1005236:	int3   
 1005237:	int3   
 1005238:	int3   
 1005239:	int3   
 100523a:	int3   
 100523b:	int3   
 100523c:	int3   
 100523d:	int3   
 100523e:	int3   
 100523f:	int3   
 1005240:	mov    QWORD PTR [rsp+0x20],r9
 1005245:	push   rbx
 1005246:	push   r14
 1005248:	sub    rsp,0x58
 100524c:	cmp    DWORD PTR [rip+0x350d],0x0        # 0x1008760
 1005253:	mov    r14,r9
 1005256:	mov    rbx,rdx
 1005259:	je     0x100553b
 100525f:	mov    QWORD PTR [rsp+0x70],rbp
 1005264:	mov    QWORD PTR [rsp+0x78],rsi
 1005269:	call   0x1005830
 100526e:	test   rbx,rbx
 1005271:	je     0x1005279
 1005273:	cmp    WORD PTR [rbx],0x0
 1005277:	jne    0x1005280
 1005279:	lea    rbx,[rip+0xffffffffffffc4b4]        # 0x1001734
 1005280:	mov    rdx,rbx
 1005283:	mov    rcx,rax
 1005286:	call   0x1005c40
 100528b:	mov    rsi,rax
 100528e:	test   rax,rax
 1005291:	je     0x100551a
 1005297:	mov    eax,0xffff
 100529c:	cmp    WORD PTR [rsi],ax
 100529f:	jne    0x10052b2
 10052a1:	cmp    WORD PTR [rsi+0x2],0x0
 10052a6:	jne    0x10052b2
 10052a8:	mov    ebp,0x2
 10052ad:	jmp    0x1005504
 10052b2:	mov    QWORD PTR [rsp+0x80],rdi
 10052ba:	mov    QWORD PTR [rsp+0x50],r12
 10052bf:	xor    ebp,ebp
 10052c1:	lea    r9,[rsp+0x30]
 10052c6:	lea    rdx,[rip+0xffffffffffffc46b]        # 0x1001738
 10052cd:	xor    r8d,r8d
 10052d0:	mov    rcx,rsi
 10052d3:	mov    QWORD PTR [rsp+0x48],r13
 10052d8:	lea    r12d,[rbp+0x1]
 10052dc:	mov    QWORD PTR [rsp+0x40],r15
 10052e1:	mov    DWORD PTR [rsp+0x30],ebp
 10052e5:	call   0x100647e
 10052ea:	lea    edi,[rbp+0x4]
 10052ed:	cmp    eax,r12d
 10052f0:	jne    0x10052ff
 10052f2:	mov    r12d,edi
 10052f5:	lea    r13,[rsp+0x30]
 10052fa:	jmp    0x10054b3
 10052ff:	lea    rax,[rip+0xffffffffffffc44a]        # 0x1001750
 1005306:	mov    r9d,edi
 1005309:	mov    r8,rsi
 100530c:	mov    edx,r12d
 100530f:	mov    ecx,0x400
 1005314:	mov    DWORD PTR [rsp+0x28],edi
 1005318:	mov    QWORD PTR [rsp+0x20],rax
 100531d:	call   QWORD PTR [rip+0xffffffffffffbe05]        # 0x1001128
 1005323:	cmp    eax,0x2
 1005326:	jne    0x100532e
 1005328:	lea    r12d,[rax+0x1]
 100532c:	jmp    0x10053a9
 100532e:	lea    rax,[rip+0xffffffffffffc42b]        # 0x1001760
 1005335:	mov    r9d,edi
 1005338:	mov    r8,rsi
 100533b:	mov    edx,r12d
 100533e:	mov    ecx,0x400
 1005343:	mov    DWORD PTR [rsp+0x28],edi
 1005347:	mov    QWORD PTR [rsp+0x20],rax
 100534c:	call   QWORD PTR [rip+0xffffffffffffbdd6]        # 0x1001128
 1005352:	cmp    eax,0x2
 1005355:	jne    0x1005495
 100535b:	lea    rbx,[rsi+0x8]
 100535f:	lea    r9,[rsp+0x34]
 1005364:	lea    rdx,[rip+0xffffffffffffc405]        # 0x1001770
 100536b:	mov    rcx,rbx
 100536e:	xor    r8d,r8d
 1005371:	call   0x100647e
 1005376:	cmp    eax,r12d
 1005379:	jne    0x1005495
 100537f:	cmp    WORD PTR [rbx],0x3a
 1005383:	je     0x100539c
 1005385:	data16 data16 nop WORD PTR [rax+rax*1+0x0]
 1005390:	add    rbx,0x2
 1005394:	inc    edi
 1005396:	cmp    WORD PTR [rbx],0x3a
 100539a:	jne    0x1005390
 100539c:	mov    r12d,DWORD PTR [rsp+0x34]
 10053a1:	inc    edi
 10053a3:	je     0x1005495
 10053a9:	movsxd r8,edi
 10053ac:	or     rcx,0xffffffffffffffff
 10053b0:	inc    rcx
 10053b3:	cmp    WORD PTR [rsi+rcx*2],bp
 10053b7:	jne    0x10053b0
 10053b9:	sub    rcx,r8
 10053bc:	lea    rbx,[rsi+r8*2]
 10053c0:	movabs rax,0xaaaaaaaaaaaaaaab
 10053ca:	lea    r9,[rsp+0x30]
 10053cf:	xor    r8d,r8d
 10053d2:	mov    r13,rsi
 10053d5:	mul    rcx
 10053d8:	mov    rdi,rdx
 10053db:	lea    rdx,[rip+0xffffffffffffc39e]        # 0x1001780
 10053e2:	mov    rcx,rbx
 10053e5:	shr    rdi,1
 10053e8:	mov    r15d,ebp
 10053eb:	inc    edi
 10053ed:	call   0x100647e
 10053f2:	cmp    eax,0x1
 10053f5:	jne    0x1005465
 10053f7:	mov    r14,rsi
 10053fa:	nop    WORD PTR [rax+rax*1+0x0]
 1005400:	movzx  eax,WORD PTR [rbx]
 1005403:	cmp    ax,0x2c
 1005407:	je     0x1005423
 1005409:	nop    DWORD PTR [rax+0x0]
 1005410:	test   ax,ax
 1005413:	je     0x1005423
 1005415:	movzx  eax,WORD PTR [rbx+0x2]
 1005419:	add    rbx,0x2
 100541d:	cmp    ax,0x2c
 1005421:	jne    0x1005410
 1005423:	movzx  eax,BYTE PTR [rsp+0x30]
 1005428:	inc    r14
 100542b:	inc    r15d
 100542e:	mov    BYTE PTR [r14-0x1],al
 1005432:	cmp    WORD PTR [rbx],0x2c
 1005436:	jne    0x100543c
 1005438:	add    rbx,0x2
 100543c:	cmp    WORD PTR [rbx],bp
 100543f:	je     0x100545d
 1005441:	lea    r9,[rsp+0x30]
 1005446:	lea    rdx,[rip+0xffffffffffffc333]        # 0x1001780
 100544d:	xor    r8d,r8d
 1005450:	mov    rcx,rbx
 1005453:	call   0x100647e
 1005458:	cmp    eax,0x1
 100545b:	je     0x1005400
 100545d:	mov    r14,QWORD PTR [rsp+0x88]
 1005465:	cmp    edi,r15d
 1005468:	jne    0x100548e
 100546a:	cmp    r12d,0x1
 100546e:	je     0x100547c
 1005470:	cmp    r12d,0x7
 1005474:	je     0x100547c
 1005476:	cmp    r12d,0x2
 100547a:	jne    0x10054b3
 100547c:	test   dil,0x1
 1005480:	jne    0x100548e
 1005482:	movsxd rax,r15d
 1005485:	add    edi,0x2
 1005488:	mov    WORD PTR [rax+rsi*1],bp
 100548c:	jmp    0x10054b3
 100548e:	mov    ebp,0xd
 1005493:	jmp    0x10054ed
 1005495:	or     rcx,0xffffffffffffffff
 1005499:	nop    DWORD PTR [rax+0x0]
 10054a0:	inc    rcx
 10054a3:	cmp    WORD PTR [rsi+rcx*2],bp
 10054a7:	jne    0x10054a0
 10054a9:	lea    edi,[rcx*2+0x2]
 10054b0:	mov    r13,rsi
 10054b3:	mov    rcx,QWORD PTR [rsp+0x90]
 10054bb:	mov    rbx,QWORD PTR [rsp+0x98]
 10054c3:	test   rcx,rcx
 10054c6:	je     0x10054de
 10054c8:	cmp    DWORD PTR [rbx],edi
 10054ca:	jb     0x10054d9
 10054cc:	mov    r8d,edi
 10054cf:	mov    rdx,r13
 10054d2:	call   0x100648a
 10054d7:	jmp    0x10054de
 10054d9:	mov    ebp,0xea
 10054de:	test   r14,r14
 10054e1:	je     0x10054e6
 10054e3:	mov    DWORD PTR [r14],r12d
 10054e6:	test   rbx,rbx
 10054e9:	je     0x10054ed
 10054eb:	mov    DWORD PTR [rbx],edi
 10054ed:	mov    r13,QWORD PTR [rsp+0x48]
 10054f2:	mov    r12,QWORD PTR [rsp+0x50]
 10054f7:	mov    rdi,QWORD PTR [rsp+0x80]
 10054ff:	mov    r15,QWORD PTR [rsp+0x40]
 1005504:	call   QWORD PTR [rip+0xffffffffffffbd1e]        # 0x1001228
 100550a:	mov    r8,rsi
 100550d:	xor    edx,edx
 100550f:	mov    rcx,rax
 1005512:	call   QWORD PTR [rip+0xffffffffffffbd20]        # 0x1001238
 1005518:	jmp    0x100551f
 100551a:	mov    ebp,0x8
 100551f:	mov    ecx,ebp
 1005521:	call   QWORD PTR [rip+0xffffffffffffbbe1]        # 0x1001108
 1005527:	mov    rsi,QWORD PTR [rsp+0x78]
 100552c:	mov    eax,ebp
 100552e:	mov    rbp,QWORD PTR [rsp+0x70]
 1005533:	add    rsp,0x58
 1005537:	pop    r14
 1005539:	pop    rbx
 100553a:	ret    
 100553b:	mov    rax,QWORD PTR [rsp+0x98]
 1005543:	mov    QWORD PTR [rsp+0x28],rax
 1005548:	mov    rax,QWORD PTR [rsp+0x90]
 1005550:	mov    QWORD PTR [rsp+0x20],rax
 1005555:	call   QWORD PTR [rip+0xffffffffffffbad5]        # 0x1001030
 100555b:	add    rsp,0x58
 100555f:	pop    r14
 1005561:	pop    rbx
 1005562:	ret    
 1005563:	int3   
 1005564:	int3   
 1005565:	int3   
 1005566:	int3   
 1005567:	int3   
 1005568:	int3   
 1005569:	int3   
 100556a:	int3   
 100556b:	int3   
 100556c:	int3   
 100556d:	int3   
 100556e:	int3   
 100556f:	int3   
 1005570:	rex push rbx
 1005572:	push   rsi
 1005573:	push   r15
 1005575:	sub    rsp,0x40
 1005579:	cmp    DWORD PTR [rip+0x31e0],0x0        # 0x1008760
 1005580:	mov    r15d,r8d
 1005583:	mov    rbx,rdx
 1005586:	je     0x1005596
 1005588:	mov    eax,0x1
 100558d:	add    rsp,0x40
 1005591:	pop    r15
 1005593:	pop    rsi
 1005594:	pop    rbx
 1005595:	ret    
 1005596:	mov    QWORD PTR [rsp+0x68],rdi
 100559b:	mov    QWORD PTR [rsp+0x70],r12
 10055a0:	mov    QWORD PTR [rsp+0x30],r14
 10055a5:	call   0x10051e0
 10055aa:	or     rdi,0xffffffffffffffff
 10055ae:	test   rdx,rdx
 10055b1:	je     0x10055c2
 10055b3:	mov    rax,rdi
 10055b6:	inc    rax
 10055b9:	cmp    WORD PTR [rdx+rax*2],0x0
 10055be:	jne    0x10055b6
 10055c0:	jmp    0x10055c7
 10055c2:	mov    eax,0x3
 10055c7:	lea    r14d,[rax+0x1]
 10055cb:	mov    r8d,0x104
 10055d1:	lea    r12,[rip+0x31a8]        # 0x1008780
 10055d8:	sub    r8d,r14d
 10055db:	mov    rdx,r12
 10055de:	mov    QWORD PTR [rsp+0x60],rbp
 10055e3:	mov    QWORD PTR [rsp+0x38],r13
 10055e8:	call   QWORD PTR [rip+0xffffffffffffbb0a]        # 0x10010f8
 10055ee:	mov    r11d,eax
 10055f1:	test   eax,eax
 10055f3:	je     0x100577f
 10055f9:	lea    rcx,[r12-0x2]
 10055fe:	lea    rcx,[rcx+r11*2]
 1005602:	call   0x10051e0
 1005607:	xor    r13d,r13d
 100560a:	mov    edx,r13d
 100560d:	mov    r8d,r13d
 1005610:	cmp    rcx,r12
 1005613:	jbe    0x1005638
 1005615:	test   r8,r8
 1005618:	jne    0x1005625
 100561a:	cmp    WORD PTR [rcx],0x2e
 100561e:	jne    0x100562d
 1005620:	mov    r8,rcx
 1005623:	jmp    0x100562d
 1005625:	cmp    WORD PTR [rcx],0x5c
 1005629:	cmove  rdx,rcx
 100562d:	sub    rcx,0x2
 1005631:	test   rdx,rdx
 1005634:	je     0x1005610
 1005636:	jmp    0x1005641
 1005638:	test   rdx,rdx
 100563b:	je     0x100577f
 1005641:	lea    rcx,[rdx+0x2]
 1005645:	lea    rbp,[r8+0x2]
 1005649:	mov    esi,0x1
 100564e:	test   rbx,rbx
 1005651:	je     0x1005661
 1005653:	lea    r8d,[r14+r14*1]
 1005657:	mov    rdx,rbx
 100565a:	call   0x100648a
 100565f:	jmp    0x10056b6
 1005661:	mov    r9d,DWORD PTR [rip+0x2ac0]        # 0x1008128
 1005668:	mov    r8,QWORD PTR [rip+0x2ab1]        # 0x1008120
 100566f:	mov    rax,rcx
 1005672:	sub    rax,r12
 1005675:	mov    edx,esi
 1005677:	sar    rax,1
 100567a:	sub    r11d,eax
 100567d:	mov    DWORD PTR [rsp+0x28],r11d
 1005682:	mov    QWORD PTR [rsp+0x20],rcx
 1005687:	mov    ecx,0x400
 100568c:	call   QWORD PTR [rip+0xffffffffffffba96]        # 0x1001128
 1005692:	lea    r8d,[r14+r14*1]
 1005696:	lea    rdx,[rip+0xffffffffffffbf6b]        # 0x1001608
 100569d:	cmp    eax,0x2
 10056a0:	mov    ebx,r13d
 10056a3:	mov    rcx,rbp
 10056a6:	cmove  ebx,esi
 10056a9:	call   0x100648a
 10056ae:	test   ebx,ebx
 10056b0:	jne    0x100577f
 10056b6:	mov    rcx,r12
 10056b9:	call   QWORD PTR [rip+0xffffffffffffbb51]        # 0x1001210
 10056bf:	cmp    eax,0xffffffff
 10056c2:	je     0x100577f
 10056c8:	lea    rbx,[rip+0x34d1]        # 0x1008ba0
 10056cf:	mov    rdx,r12
 10056d2:	mov    r8d,0x208
 10056d8:	mov    rcx,rbx
 10056db:	call   0x100648a
 10056e0:	mov    rax,rdi
 10056e3:	inc    rax
 10056e6:	cmp    WORD PTR [rbx+rax*2],r13w
 10056eb:	jne    0x10056e3
 10056ed:	dec    rax
 10056f0:	cmp    WORD PTR [rbx+rax*2],0x5c
 10056f5:	lea    rax,[rbx+rax*2]
 10056f9:	je     0x100570f
 10056fb:	nop    DWORD PTR [rax+rax*1+0x0]
 1005700:	cmp    rax,rbx
 1005703:	jbe    0x100570f
 1005705:	sub    rax,0x2
 1005709:	cmp    WORD PTR [rax],0x5c
 100570d:	jne    0x1005700
 100570f:	mov    WORD PTR [rax],r13w
 1005713:	sub    rax,rbx
 1005716:	mov    rcx,rbx
 1005719:	sar    rax,1
 100571c:	inc    eax
 100571e:	mov    DWORD PTR [rip+0x3040],eax        # 0x1008764
 1005724:	call   0x10051e0
 1005729:	lea    rbx,[rip+0x3260]        # 0x1008990
 1005730:	mov    rcx,rbx
 1005733:	mov    rdx,r12
 1005736:	mov    r8d,0x208
 100573c:	call   0x100648a
 1005741:	inc    rdi
 1005744:	cmp    WORD PTR [rbx+rdi*2],r13w
 1005749:	jne    0x1005741
 100574b:	mov    eax,edi
 100574d:	mov    rcx,rbx
 1005750:	lea    rdx,[rbx+rax*2]
 1005754:	mov    rax,QWORD PTR [rip+0xffffffffffffbdbd]        # 0x1001518
 100575b:	mov    QWORD PTR [rdx],rax
 100575e:	movzx  eax,WORD PTR [rip+0xffffffffffffbdbb]        # 0x1001520
 1005765:	mov    WORD PTR [rdx+0x8],ax
 1005769:	call   0x10051e0
 100576e:	mov    DWORD PTR [rip+0x2ffb],r15d        # 0x1008770
 1005775:	mov    DWORD PTR [rip+0x2fe5],esi        # 0x1008760
 100577b:	mov    eax,esi
 100577d:	jmp    0x1005781
 100577f:	xor    eax,eax
 1005781:	mov    r13,QWORD PTR [rsp+0x38]
 1005786:	mov    rbp,QWORD PTR [rsp+0x60]
 100578b:	mov    rdi,QWORD PTR [rsp+0x68]
 1005790:	mov    r12,QWORD PTR [rsp+0x70]
 1005795:	mov    r14,QWORD PTR [rsp+0x30]
 100579a:	add    rsp,0x40
 100579e:	pop    r15
 10057a0:	pop    rsi
 10057a1:	pop    rbx
 10057a2:	ret    
 10057a3:	int3   
 10057a4:	int3   
 10057a5:	int3   
 10057a6:	int3   
 10057a7:	int3   
 10057a8:	int3   
 10057a9:	int3   
 10057aa:	int3   
 10057ab:	int3   
 10057ac:	int3   
 10057ad:	int3   
 10057ae:	int3   
 10057af:	int3   
 10057b0:	sub    rsp,0x58
 10057b4:	lea    rdx,[rsp+0x20]
 10057b9:	lea    rcx,[rip+0xfffffffffffffff0]        # 0x10057b0
 10057c0:	mov    r8d,0x30
 10057c6:	call   QWORD PTR [rip+0xffffffffffffb944]        # 0x1001110
 10057cc:	test   rax,rax
 10057cf:	jne    0x10057d6
 10057d1:	add    rsp,0x58
 10057d5:	ret    
 10057d6:	mov    QWORD PTR [rsp+0x50],rbx
 10057db:	mov    rbx,QWORD PTR [rsp+0x28]
 10057e0:	xor    r8d,r8d
 10057e3:	mov    rcx,rbx
 10057e6:	xor    edx,edx
 10057e8:	call   0x1005570
 10057ed:	test   eax,eax
 10057ef:	jne    0x1005812
 10057f1:	lea    r8d,[rax+0x1]
 10057f5:	lea    rdx,[rip+0xffffffffffffbe14]        # 0x1001610
 10057fc:	mov    rcx,rbx
 10057ff:	call   0x1005570
 1005804:	test   eax,eax
 1005806:	jne    0x1005812
 1005808:	mov    rbx,QWORD PTR [rsp+0x50]
 100580d:	add    rsp,0x58
 1005811:	ret    
 1005812:	mov    eax,0x1
 1005817:	mov    rbx,QWORD PTR [rsp+0x50]
 100581c:	add    rsp,0x58
 1005820:	ret    
 1005821:	int3   
 1005822:	int3   
 1005823:	int3   
 1005824:	int3   
 1005825:	int3   
 1005826:	int3   
 1005827:	int3   
 1005828:	int3   
 1005829:	int3   
 100582a:	int3   
 100582b:	int3   
 100582c:	int3   
 100582d:	int3   
 100582e:	int3   
 100582f:	int3   
 1005830:	rex push rbx
 1005832:	sub    rsp,0x20
 1005836:	cmp    DWORD PTR [rip+0x2f23],0x0        # 0x1008760
 100583d:	mov    rbx,rcx
 1005840:	jne    0x1005848
 1005842:	call   QWORD PTR [rip+0xffffffffffffb8b8]        # 0x1001100
 1005848:	cmp    rbx,0xffffffff80000000
 100584f:	jne    0x100585e
 1005851:	lea    rax,[rip+0xffffffffffffbdd8]        # 0x1001630
 1005858:	add    rsp,0x20
 100585c:	pop    rbx
 100585d:	ret    
 100585e:	cmp    rbx,0xffffffff80000001
 1005865:	jne    0x1005874
 1005867:	lea    rax,[rip+0xffffffffffffbdea]        # 0x1001658
 100586e:	add    rsp,0x20
 1005872:	pop    rbx
 1005873:	ret    
 1005874:	cmp    rbx,0xffffffff80000002
 100587b:	jne    0x100588a
 100587d:	lea    rax,[rip+0xffffffffffffbdfc]        # 0x1001680
 1005884:	add    rsp,0x20
 1005888:	pop    rbx
 1005889:	ret    
 100588a:	cmp    rbx,0xffffffff80000003
 1005891:	jne    0x10058a0
 1005893:	lea    rax,[rip+0xffffffffffffbe0e]        # 0x10016a8
 100589a:	add    rsp,0x20
 100589e:	pop    rbx
 100589f:	ret    
 10058a0:	cmp    rbx,0xffffffff80000004
 10058a7:	jne    0x10058b6
 10058a9:	lea    rax,[rip+0xffffffffffffbe10]        # 0x10016c0
 10058b0:	add    rsp,0x20
 10058b4:	pop    rbx
 10058b5:	ret    
 10058b6:	cmp    rbx,0xffffffff80000005
 10058bd:	jne    0x10058cc
 10058bf:	lea    rax,[rip+0xffffffffffffbe2a]        # 0x10016f0
 10058c6:	add    rsp,0x20
 10058ca:	pop    rbx
 10058cb:	ret    
 10058cc:	lea    rax,[rip+0xffffffffffffbe45]        # 0x1001718
 10058d3:	cmp    rbx,0xffffffff80000006
 10058da:	je     0x10058df
 10058dc:	mov    rax,rbx
 10058df:	add    rsp,0x20
 10058e3:	pop    rbx
 10058e4:	ret    
 10058e5:	int3   
 10058e6:	int3   
 10058e7:	int3   
 10058e8:	int3   
 10058e9:	int3   
 10058ea:	int3   
 10058eb:	int3   
 10058ec:	int3   
 10058ed:	int3   
 10058ee:	int3   
 10058ef:	int3   
 10058f0:	mov    QWORD PTR [rsp+0x8],rbx
 10058f5:	mov    QWORD PTR [rsp+0x10],rbp
 10058fa:	mov    QWORD PTR [rsp+0x18],rsi
 10058ff:	push   rdi
 1005900:	push   r14
 1005902:	push   r15
 1005904:	sub    rsp,0x20
 1005908:	mov    rbp,rdx
 100590b:	call   0x1005830
 1005910:	or     rbx,0xffffffffffffffff
 1005914:	mov    r14,rax
 1005917:	mov    rsi,rbx
 100591a:	nop    WORD PTR [rax+rax*1+0x0]
 1005920:	inc    rsi
 1005923:	cmp    WORD PTR [rax+rsi*2],0x0
 1005928:	jne    0x1005920
 100592a:	add    rsi,rsi
 100592d:	nop    DWORD PTR [rax]
 1005930:	inc    rbx
 1005933:	cmp    WORD PTR [rbp+rbx*2+0x0],0x0
 1005939:	jne    0x1005930
 100593b:	add    rbx,rbx
 100593e:	lea    rdi,[rsi+0x4]
 1005942:	call   QWORD PTR [rip+0xffffffffffffb8e0]        # 0x1001228
 1005948:	lea    r8,[rdi+rbx*1]
 100594c:	xor    edx,edx
 100594e:	mov    rcx,rax
 1005951:	call   QWORD PTR [rip+0xffffffffffffb8f9]        # 0x1001250
 1005957:	mov    r15,rax
 100595a:	test   rax,rax
 100595d:	je     0x1005998
 100595f:	mov    r8d,esi
 1005962:	mov    rdx,r14
 1005965:	mov    rcx,rax
 1005968:	call   0x100648a
 100596d:	mov    eax,0x5c
 1005972:	shr    rsi,1
 1005975:	lea    rdi,[r15+rsi*2]
 1005979:	mov    r8d,ebx
 100597c:	mov    rdx,rbp
 100597f:	lea    rcx,[rdi+0x2]
 1005983:	mov    WORD PTR [rdi],ax
 1005986:	call   0x100648a
 100598b:	shr    rbx,1
 100598e:	xor    eax,eax
 1005990:	mov    WORD PTR [rdi+rbx*2+0x2],ax
 1005995:	mov    rax,r15
 1005998:	mov    rbx,QWORD PTR [rsp+0x40]
 100599d:	mov    rbp,QWORD PTR [rsp+0x48]
 10059a2:	mov    rsi,QWORD PTR [rsp+0x50]
 10059a7:	add    rsp,0x20
 10059ab:	pop    r15
 10059ad:	pop    r14
 10059af:	pop    rdi
 10059b0:	ret    
 10059b1:	int3   
 10059b2:	int3   
 10059b3:	int3   
 10059b4:	int3   
 10059b5:	int3   
 10059b6:	int3   
 10059b7:	int3   
 10059b8:	int3   
 10059b9:	int3   
 10059ba:	int3   
 10059bb:	int3   
 10059bc:	int3   
 10059bd:	int3   
 10059be:	int3   
 10059bf:	int3   
 10059c0:	mov    QWORD PTR [rsp+0x10],rbx
 10059c5:	mov    QWORD PTR [rsp+0x18],rbp
 10059ca:	mov    QWORD PTR [rsp+0x20],rsi
 10059cf:	push   rdi
 10059d0:	push   r14
 10059d2:	push   r15
 10059d4:	sub    rsp,0x30
 10059d8:	mov    r14,rcx
 10059db:	mov    r15d,0x80
 10059e1:	or     rbx,0xffffffffffffffff
 10059e5:	inc    rbx
 10059e8:	cmp    WORD PTR [rcx+rbx*2],0x0
 10059ed:	jne    0x10059e5
 10059ef:	lea    esi,[rbx+0x80]
 10059f5:	mov    edi,esi
 10059f7:	add    rdi,rdi
 10059fa:	call   QWORD PTR [rip+0xffffffffffffb828]        # 0x1001228
 1005a00:	mov    r8,rdi
 1005a03:	mov    rcx,rax
 1005a06:	xor    edx,edx
 1005a08:	call   QWORD PTR [rip+0xffffffffffffb842]        # 0x1001250
 1005a0e:	mov    rbp,rax
 1005a11:	test   rax,rax
 1005a14:	je     0x1005ad6
 1005a1a:	mov    QWORD PTR [rsp+0x50],r12
 1005a1f:	lea    r12,[rip+0xffffffffffffbae2]        # 0x1001508
 1005a26:	data16 nop WORD PTR [rax+rax*1+0x0]
 1005a30:	mov    r9d,ebx
 1005a33:	mov    r8,r14
 1005a36:	mov    edx,0x1
 1005a3b:	mov    ecx,0x400
 1005a40:	mov    DWORD PTR [rsp+0x28],0x5
 1005a48:	mov    QWORD PTR [rsp+0x20],r12
 1005a4d:	call   QWORD PTR [rip+0xffffffffffffb6d5]        # 0x1001128
 1005a53:	cmp    eax,0x2
 1005a56:	jne    0x1005a77
 1005a58:	mov    edi,DWORD PTR [rip+0x2d06]        # 0x1008764
 1005a5e:	cmp    edi,esi
 1005a60:	ja     0x1005a8a
 1005a62:	lea    r8d,[rdi+rdi*1]
 1005a66:	lea    rdx,[rip+0x3133]        # 0x1008ba0
 1005a6d:	mov    rcx,rbp
 1005a70:	call   0x100648a
 1005a75:	jmp    0x1005a88
 1005a77:	mov    r8d,esi
 1005a7a:	mov    rdx,rbp
 1005a7d:	mov    rcx,r14
 1005a80:	call   QWORD PTR [rip+0xffffffffffffb66a]        # 0x10010f0
 1005a86:	mov    edi,eax
 1005a88:	cmp    edi,esi
 1005a8a:	jle    0x1005ace
 1005a8c:	add    r15d,r15d
 1005a8f:	lea    esi,[rbx+r15*1]
 1005a93:	call   QWORD PTR [rip+0xffffffffffffb78f]        # 0x1001228
 1005a99:	mov    r8,rbp
 1005a9c:	mov    rcx,rax
 1005a9f:	xor    edx,edx
 1005aa1:	call   QWORD PTR [rip+0xffffffffffffb791]        # 0x1001238
 1005aa7:	mov    edi,esi
 1005aa9:	add    rdi,rdi
 1005aac:	call   QWORD PTR [rip+0xffffffffffffb776]        # 0x1001228
 1005ab2:	mov    r8,rdi
 1005ab5:	mov    rcx,rax
 1005ab8:	xor    edx,edx
 1005aba:	call   QWORD PTR [rip+0xffffffffffffb790]        # 0x1001250
 1005ac0:	mov    rbp,rax
 1005ac3:	test   rax,rax
 1005ac6:	jne    0x1005a30
 1005acc:	jmp    0x1005ad1
 1005ace:	mov    rax,rbp
 1005ad1:	mov    r12,QWORD PTR [rsp+0x50]
 1005ad6:	mov    rbx,QWORD PTR [rsp+0x58]
 1005adb:	mov    rbp,QWORD PTR [rsp+0x60]
 1005ae0:	mov    rsi,QWORD PTR [rsp+0x68]
 1005ae5:	add    rsp,0x30
 1005ae9:	pop    r15
 1005aeb:	pop    r14
 1005aed:	pop    rdi
 1005aee:	ret    
 1005aef:	int3   
 1005af0:	int3   
 1005af1:	int3   
 1005af2:	int3   
 1005af3:	int3   
 1005af4:	int3   
 1005af5:	int3   
 1005af6:	int3   
 1005af7:	int3   
 1005af8:	int3   
 1005af9:	int3   
 1005afa:	int3   
 1005afb:	int3   
 1005afc:	int3   
 1005afd:	int3   
 1005afe:	int3   
 1005aff:	int3   
 1005b00:	mov    QWORD PTR [rsp+0x20],rbx
 1005b05:	push   rbp
 1005b06:	push   rsi
 1005b07:	push   rdi
 1005b08:	sub    rsp,0x30
 1005b0c:	mov    rsi,rdx
 1005b0f:	mov    rbp,rcx
 1005b12:	mov    edi,0x80
 1005b17:	call   QWORD PTR [rip+0xffffffffffffb70b]        # 0x1001228
 1005b1d:	xor    edx,edx
 1005b1f:	mov    r8d,0x100
 1005b25:	mov    rcx,rax
 1005b28:	call   QWORD PTR [rip+0xffffffffffffb722]        # 0x1001250
 1005b2e:	mov    rbx,rax
 1005b31:	test   rax,rax
 1005b34:	je     0x1005c2b
 1005b3a:	mov    QWORD PTR [rsp+0x50],r12
 1005b3f:	mov    QWORD PTR [rsp+0x58],r14
 1005b44:	mov    QWORD PTR [rsp+0x60],r15
 1005b49:	lea    r15,[rip+0x2c30]        # 0x1008780
 1005b50:	lea    r12,[rip+0x2e39]        # 0x1008990
 1005b57:	mov    r14d,0xffff
 1005b5d:	nop    DWORD PTR [rax]
 1005b60:	test   rbp,rbp
 1005b63:	je     0x1005ba5
 1005b65:	test   rsi,rsi
 1005b68:	je     0x1005ba5
 1005b6a:	lea    r8,[rip+0xffffffffffffb9a3]        # 0x1001514
 1005b71:	mov    r9,rbx
 1005b74:	mov    rdx,rsi
 1005b77:	mov    rcx,rbp
 1005b7a:	mov    QWORD PTR [rsp+0x28],r12
 1005b7f:	mov    DWORD PTR [rsp+0x20],edi
 1005b83:	call   QWORD PTR [rip+0xffffffffffffb55f]        # 0x10010e8
 1005b89:	lea    ecx,[rdi-0x1]
 1005b8c:	mov    r11d,eax
 1005b8f:	cmp    eax,ecx
 1005b91:	je     0x1005ba0
 1005b93:	cmp    WORD PTR [rbx],r14w
 1005b97:	jne    0x1005ba0
 1005b99:	cmp    WORD PTR [rbx+0x2],0x0
 1005b9e:	je     0x1005ba5
 1005ba0:	cmp    eax,0xffffffff
 1005ba3:	jne    0x1005bc7
 1005ba5:	lea    r8,[rip+0xffffffffffffb968]        # 0x1001514
 1005bac:	mov    r9,rbx
 1005baf:	mov    rdx,rsi
 1005bb2:	mov    rcx,rbp
 1005bb5:	mov    QWORD PTR [rsp+0x28],r15
 1005bba:	mov    DWORD PTR [rsp+0x20],edi
 1005bbe:	call   QWORD PTR [rip+0xffffffffffffb524]        # 0x10010e8
 1005bc4:	mov    r11d,eax
 1005bc7:	test   rbp,rbp
 1005bca:	je     0x1005bd4
 1005bcc:	lea    eax,[rdi-0x1]
 1005bcf:	test   rsi,rsi
 1005bd2:	jne    0x1005bd7
 1005bd4:	lea    eax,[rdi-0x2]
 1005bd7:	cmp    r11d,eax
 1005bda:	jne    0x1005c19
 1005bdc:	add    edi,edi
 1005bde:	call   QWORD PTR [rip+0xffffffffffffb644]        # 0x1001228
 1005be4:	mov    r8,rbx
 1005be7:	mov    rcx,rax
 1005bea:	xor    edx,edx
 1005bec:	call   QWORD PTR [rip+0xffffffffffffb646]        # 0x1001238
 1005bf2:	mov    ebx,edi
 1005bf4:	add    rbx,rbx
 1005bf7:	call   QWORD PTR [rip+0xffffffffffffb62b]        # 0x1001228
 1005bfd:	mov    r8,rbx
 1005c00:	mov    rcx,rax
 1005c03:	xor    edx,edx
 1005c05:	call   QWORD PTR [rip+0xffffffffffffb645]        # 0x1001250
 1005c0b:	mov    rbx,rax
 1005c0e:	test   rax,rax
 1005c11:	jne    0x1005b60
 1005c17:	jmp    0x1005c1c
 1005c19:	mov    rax,rbx
 1005c1c:	mov    r14,QWORD PTR [rsp+0x58]
 1005c21:	mov    r12,QWORD PTR [rsp+0x50]
 1005c26:	mov    r15,QWORD PTR [rsp+0x60]
 1005c2b:	mov    rbx,QWORD PTR [rsp+0x68]
 1005c30:	add    rsp,0x30
 1005c34:	pop    rdi
 1005c35:	pop    rsi
 1005c36:	pop    rbp
 1005c37:	ret    
 1005c38:	int3   
 1005c39:	int3   
 1005c3a:	int3   
 1005c3b:	int3   
 1005c3c:	int3   
 1005c3d:	int3   
 1005c3e:	int3   
 1005c3f:	int3   
 1005c40:	rex push rdi
 1005c42:	push   r12
 1005c44:	push   r13
 1005c46:	sub    rsp,0x40
 1005c4a:	mov    r13,rdx
 1005c4d:	mov    r12,rcx
 1005c50:	call   0x1005b00
 1005c55:	mov    rdi,rax
 1005c58:	test   rax,rax
 1005c5b:	je     0x1005d6c
 1005c61:	test   r13,r13
 1005c64:	je     0x1005d6c
 1005c6a:	test   r12,r12
 1005c6d:	je     0x1005d6c
 1005c73:	mov    QWORD PTR [rsp+0x60],rbx
 1005c78:	mov    QWORD PTR [rsp+0x68],rbp
 1005c7d:	mov    QWORD PTR [rsp+0x70],rsi
 1005c82:	mov    eax,0xffff
 1005c87:	mov    QWORD PTR [rsp+0x38],r14
 1005c8c:	mov    QWORD PTR [rsp+0x30],r15
 1005c91:	cmp    WORD PTR [rdi],ax
 1005c94:	jne    0x1005d1d
 1005c9a:	cmp    WORD PTR [rdi+0x2],0x0
 1005c9f:	jne    0x1005d1d
 1005ca1:	cmp    DWORD PTR [rip+0x2ac8],0x0        # 0x1008770
 1005ca8:	je     0x1005d1d
 1005caa:	or     rbp,0xffffffffffffffff
 1005cae:	mov    rbx,rbp
 1005cb1:	inc    rbx
 1005cb4:	cmp    WORD PTR [r12+rbx*2],0x0
 1005cba:	jne    0x1005cb1
 1005cbc:	mov    rsi,rbp
 1005cbf:	nop
 1005cc0:	inc    rsi
 1005cc3:	cmp    WORD PTR [r13+rsi*2+0x0],0x0
 1005cca:	jne    0x1005cc0
 1005ccc:	xor    r14d,r14d
 1005ccf:	lea    r15,[rip+0x245a]        # 0x1008130
 1005cd6:	data16 nop WORD PTR [rax+rax*1+0x0]
 1005ce0:	mov    rcx,QWORD PTR [r15]
 1005ce3:	mov    eax,DWORD PTR [r15+0x8]
 1005ce7:	mov    r9d,ebx
 1005cea:	mov    DWORD PTR [rsp+0x28],eax
 1005cee:	mov    QWORD PTR [rsp+0x20],rcx
 1005cf3:	mov    r8,r12
 1005cf6:	mov    ecx,0x400
 1005cfb:	mov    edx,0x1
 1005d00:	call   QWORD PTR [rip+0xffffffffffffb422]        # 0x1001128
 1005d06:	cmp    eax,0x2
 1005d09:	je     0x1005d76
 1005d0b:	inc    r14d
 1005d0e:	add    r15,0x20
 1005d12:	cmp    r14d,0x1
 1005d16:	jb     0x1005ce0
 1005d18:	mov    eax,0xffff
 1005d1d:	test   rdi,rdi
 1005d20:	je     0x1005d50
 1005d22:	cmp    WORD PTR [rdi],ax
 1005d25:	jne    0x1005d2e
 1005d27:	cmp    WORD PTR [rdi+0x2],0x0
 1005d2c:	je     0x1005d50
 1005d2e:	mov    rcx,rdi
 1005d31:	call   0x10059c0
 1005d36:	mov    rbx,rax
 1005d39:	call   QWORD PTR [rip+0xffffffffffffb4e9]        # 0x1001228
 1005d3f:	mov    r8,rdi
 1005d42:	mov    rcx,rax
 1005d45:	xor    edx,edx
 1005d47:	call   QWORD PTR [rip+0xffffffffffffb4eb]        # 0x1001238
 1005d4d:	mov    rdi,rbx
 1005d50:	mov    r15,QWORD PTR [rsp+0x30]
 1005d55:	mov    r14,QWORD PTR [rsp+0x38]
 1005d5a:	mov    rsi,QWORD PTR [rsp+0x70]
 1005d5f:	mov    rbp,QWORD PTR [rsp+0x68]
 1005d64:	mov    rbx,QWORD PTR [rsp+0x60]
 1005d69:	mov    rax,rdi
 1005d6c:	add    rsp,0x40
 1005d70:	pop    r13
 1005d72:	pop    r12
 1005d74:	pop    rdi
 1005d75:	ret    
 1005d76:	lea    rcx,[rip+0x23b3]        # 0x1008130
 1005d7d:	movsxd rbx,r14d
 1005d80:	shl    rbx,0x5
 1005d84:	add    rbx,rcx
 1005d87:	mov    rcx,QWORD PTR [rbx+0x10]
 1005d8b:	call   0x10059c0
 1005d90:	test   rax,rax
 1005d93:	je     0x1005def
 1005d95:	inc    rbp
 1005d98:	cmp    WORD PTR [rax+rbp*2],0x0
 1005d9d:	jne    0x1005d95
 1005d9f:	mov    r9d,ebp
 1005da2:	mov    r8,rax
 1005da5:	mov    edx,0x1
 1005daa:	mov    ecx,0x400
 1005daf:	mov    DWORD PTR [rsp+0x28],esi
 1005db3:	mov    QWORD PTR [rsp+0x20],r13
 1005db8:	call   QWORD PTR [rip+0xffffffffffffb36a]        # 0x1001128
 1005dbe:	cmp    eax,0x2
 1005dc1:	jne    0x1005d18
 1005dc7:	call   QWORD PTR [rip+0xffffffffffffb45b]        # 0x1001228
 1005dcd:	mov    r8,rdi
 1005dd0:	xor    edx,edx
 1005dd2:	mov    rcx,rax
 1005dd5:	call   QWORD PTR [rip+0xffffffffffffb45d]        # 0x1001238
 1005ddb:	mov    rdx,QWORD PTR [rbx+0x10]
 1005ddf:	mov    rcx,r12
 1005de2:	call   0x1005b00
 1005de7:	mov    rdi,rax
 1005dea:	jmp    0x1005d18
 1005def:	call   QWORD PTR [rip+0xffffffffffffb433]        # 0x1001228
 1005df5:	mov    r8,rdi
 1005df8:	xor    edx,edx
 1005dfa:	mov    rcx,rax
 1005dfd:	call   QWORD PTR [rip+0xffffffffffffb435]        # 0x1001238
 1005e03:	xor    edi,edi
 1005e05:	jmp    0x1005d50
 1005e0a:	int3   
 1005e0b:	int3   
 1005e0c:	int3   
 1005e0d:	int3   
 1005e0e:	int3   
 1005e0f:	int3   
 1005e10:	rex push rbx
 1005e12:	sub    rsp,0x20
 1005e16:	cmp    DWORD PTR [rip+0x2943],0x0        # 0x1008760
 1005e1d:	mov    rbx,rcx
 1005e20:	je     0x1005e85
 1005e22:	cmp    rcx,0xffffffff80000000
 1005e29:	je     0x1005e75
 1005e2b:	cmp    rcx,0xffffffff80000001
 1005e32:	je     0x1005e75
 1005e34:	cmp    rcx,0xffffffff80000002
 1005e3b:	je     0x1005e75
 1005e3d:	cmp    rcx,0xffffffff80000003
 1005e44:	je     0x1005e75
 1005e46:	cmp    rcx,0xffffffff80000004
 1005e4d:	je     0x1005e75
 1005e4f:	cmp    rcx,0xffffffff80000005
 1005e56:	je     0x1005e75
 1005e58:	cmp    rcx,0xffffffff80000006
 1005e5f:	je     0x1005e75
 1005e61:	call   QWORD PTR [rip+0xffffffffffffb3c1]        # 0x1001228
 1005e67:	mov    r8,rbx
 1005e6a:	xor    edx,edx
 1005e6c:	mov    rcx,rax
 1005e6f:	call   QWORD PTR [rip+0xffffffffffffb3c3]        # 0x1001238
 1005e75:	xor    ecx,ecx
 1005e77:	call   QWORD PTR [rip+0xffffffffffffb28b]        # 0x1001108
 1005e7d:	xor    eax,eax
 1005e7f:	add    rsp,0x20
 1005e83:	pop    rbx
 1005e84:	ret    
 1005e85:	add    rsp,0x20
 1005e89:	pop    rbx
 1005e8a:	rex.W jmp QWORD PTR [rip+0xffffffffffffb227]        # 0x10010b8
 1005e91:	int3   
 1005e92:	int3   
 1005e93:	int3   
 1005e94:	int3   
 1005e95:	int3   
 1005e96:	int3   
 1005e97:	int3   
 1005e98:	int3   
 1005e99:	int3   
 1005e9a:	int3   
 1005e9b:	int3   
 1005e9c:	int3   
 1005e9d:	int3   
 1005e9e:	int3   
 1005e9f:	int3   
 1005ea0:	rex push rdi
 1005ea2:	sub    rsp,0x20
 1005ea6:	mov    rdi,rdx
 1005ea9:	cmp    rcx,0xffffffff80000000
 1005eb0:	je     0x1005f8c
 1005eb6:	cmp    rcx,0xffffffff80000001
 1005ebd:	je     0x1005f8c
 1005ec3:	cmp    rcx,0xffffffff80000002
 1005eca:	je     0x1005f8c
 1005ed0:	cmp    rcx,0xffffffff80000003
 1005ed7:	je     0x1005f8c
 1005edd:	cmp    rcx,0xffffffff80000004
 1005ee4:	je     0x1005f8c
 1005eea:	cmp    rcx,0xffffffff80000005
 1005ef1:	je     0x1005f8c
 1005ef7:	cmp    rcx,0xffffffff80000006
 1005efe:	je     0x1005f8c
 1005f04:	mov    QWORD PTR [rsp+0x30],rbx
 1005f09:	mov    QWORD PTR [rsp+0x38],rbp
 1005f0e:	mov    QWORD PTR [rsp+0x40],rsi
 1005f13:	call   0x1005830
 1005f18:	or     rcx,0xffffffffffffffff
 1005f1c:	mov    rbx,rax
 1005f1f:	nop
 1005f20:	inc    rcx
 1005f23:	cmp    WORD PTR [rax+rcx*2],0x0
 1005f28:	jne    0x1005f20
 1005f2a:	lea    rbp,[rcx*2+0x2]
 1005f32:	call   QWORD PTR [rip+0xffffffffffffb2f0]        # 0x1001228
 1005f38:	mov    r8,rbp
 1005f3b:	mov    rcx,rax
 1005f3e:	xor    edx,edx
 1005f40:	call   QWORD PTR [rip+0xffffffffffffb30a]        # 0x1001250
 1005f46:	mov    rsi,rax
 1005f49:	test   rax,rax
 1005f4c:	jne    0x1005f6f
 1005f4e:	lea    ecx,[rax+0x8]
 1005f51:	call   QWORD PTR [rip+0xffffffffffffb1b1]        # 0x1001108
 1005f57:	lea    eax,[rsi+0x8]
 1005f5a:	mov    rbp,QWORD PTR [rsp+0x38]
 1005f5f:	mov    rbx,QWORD PTR [rsp+0x30]
 1005f64:	mov    rsi,QWORD PTR [rsp+0x40]
 1005f69:	add    rsp,0x20
 1005f6d:	pop    rdi
 1005f6e:	ret    
 1005f6f:	mov    r8d,ebp
 1005f72:	mov    rdx,rbx
 1005f75:	mov    rcx,rax
 1005f78:	call   0x100648a
 1005f7d:	xor    ecx,ecx
 1005f7f:	mov    QWORD PTR [rdi],rsi
 1005f82:	call   QWORD PTR [rip+0xffffffffffffb180]        # 0x1001108
 1005f88:	xor    eax,eax
 1005f8a:	jmp    0x1005f5a
 1005f8c:	mov    QWORD PTR [rdx],rcx
 1005f8f:	xor    ecx,ecx
 1005f91:	call   QWORD PTR [rip+0xffffffffffffb171]        # 0x1001108
 1005f97:	xor    eax,eax
 1005f99:	add    rsp,0x20
 1005f9d:	pop    rdi
 1005f9e:	ret    
 1005f9f:	int3   
 1005fa0:	int3   
 1005fa1:	int3   
 1005fa2:	int3   
 1005fa3:	int3   
 1005fa4:	int3   
 1005fa5:	int3   
 1005fa6:	int3   
 1005fa7:	int3   
 1005fa8:	int3   
 1005fa9:	int3   
 1005faa:	int3   
 1005fab:	int3   
 1005fac:	int3   
 1005fad:	int3   
 1005fae:	int3   
 1005faf:	int3   
 1005fb0:	push   r14
 1005fb2:	sub    rsp,0x20
 1005fb6:	cmp    DWORD PTR [rip+0x27a3],0x0        # 0x1008760
 1005fbd:	mov    r14,r8
 1005fc0:	je     0x10060c3
 1005fc6:	test   rdx,rdx
 1005fc9:	je     0x10060b5
 1005fcf:	cmp    WORD PTR [rdx],0x0
 1005fd3:	je     0x10060b5
 1005fd9:	mov    QWORD PTR [rsp+0x30],rbx
 1005fde:	mov    QWORD PTR [rsp+0x38],rsi
 1005fe3:	call   0x10058f0
 1005fe8:	mov    rsi,rax
 1005feb:	test   rax,rax
 1005fee:	jne    0x1006010
 1005ff0:	mov    ebx,0x8
 1005ff5:	mov    ecx,ebx
 1005ff7:	call   QWORD PTR [rip+0xffffffffffffb10b]        # 0x1001108
 1005ffd:	mov    rsi,QWORD PTR [rsp+0x38]
 1006002:	mov    eax,ebx
 1006004:	mov    rbx,QWORD PTR [rsp+0x30]
 1006009:	add    rsp,0x20
 100600d:	pop    r14
 100600f:	ret    
 1006010:	xor    edx,edx
 1006012:	mov    rcx,rax
 1006015:	mov    QWORD PTR [rsp+0x40],rdi
 100601a:	call   0x1005b00
 100601f:	mov    rdi,rax
 1006022:	test   rax,rax
 1006025:	je     0x100607c
 1006027:	mov    eax,0xffff
 100602c:	cmp    WORD PTR [rdi],ax
 100602f:	jne    0x100603f
 1006031:	cmp    WORD PTR [rdi+0x2],0x0
 1006036:	jne    0x100603f
 1006038:	mov    ebx,0x2
 100603d:	jmp    0x1006041
 100603f:	xor    ebx,ebx
 1006041:	call   QWORD PTR [rip+0xffffffffffffb1e1]        # 0x1001228
 1006047:	mov    r8,rdi
 100604a:	xor    edx,edx
 100604c:	mov    rcx,rax
 100604f:	call   QWORD PTR [rip+0xffffffffffffb1e3]        # 0x1001238
 1006055:	test   ebx,ebx
 1006057:	jne    0x1006081
 1006059:	mov    ecx,ebx
 100605b:	mov    QWORD PTR [r14],rsi
 100605e:	call   QWORD PTR [rip+0xffffffffffffb0a4]        # 0x1001108
 1006064:	mov    rdi,QWORD PTR [rsp+0x40]
 1006069:	mov    rsi,QWORD PTR [rsp+0x38]
 100606e:	mov    eax,ebx
 1006070:	mov    rbx,QWORD PTR [rsp+0x30]
 1006075:	add    rsp,0x20
 1006079:	pop    r14
 100607b:	ret    
 100607c:	mov    ebx,0x8
 1006081:	call   QWORD PTR [rip+0xffffffffffffb1a1]        # 0x1001228
 1006087:	mov    r8,rsi
 100608a:	xor    edx,edx
 100608c:	mov    rcx,rax
 100608f:	call   QWORD PTR [rip+0xffffffffffffb1a3]        # 0x1001238
 1006095:	mov    ecx,ebx
 1006097:	call   QWORD PTR [rip+0xffffffffffffb06b]        # 0x1001108
 100609d:	mov    rdi,QWORD PTR [rsp+0x40]
 10060a2:	mov    rsi,QWORD PTR [rsp+0x38]
 10060a7:	mov    eax,ebx
 10060a9:	mov    rbx,QWORD PTR [rsp+0x30]
 10060ae:	add    rsp,0x20
 10060b2:	pop    r14
 10060b4:	ret    
 10060b5:	mov    rdx,r8
 10060b8:	add    rsp,0x20
 10060bc:	pop    r14
 10060be:	jmp    0x1005ea0
 10060c3:	add    rsp,0x20
 10060c7:	pop    r14
 10060c9:	rex.W jmp QWORD PTR [rip+0xffffffffffffaff8]        # 0x10010c8
 10060d0:	int3   
 10060d1:	int3   
 10060d2:	int3   
 10060d3:	int3   
 10060d4:	int3   
 10060d5:	int3   
 10060d6:	int3   
 10060d7:	int3   
 10060d8:	mov    r11,rsp
 10060db:	mov    QWORD PTR [r11+0x20],rbx
 10060df:	push   rbp
 10060e0:	push   rsi
 10060e1:	push   rdi
 10060e2:	push   r12
 10060e4:	push   r13
 10060e6:	push   r14
 10060e8:	push   r15
 10060ea:	sub    rsp,0x70
 10060ee:	mov    eax,DWORD PTR [rcx+0x4]
 10060f1:	mov    r9d,DWORD PTR [rcx]
 10060f4:	mov    r12d,DWORD PTR [rcx+0x8]
 10060f8:	mov    r10d,DWORD PTR [rcx+0xc]
 10060fc:	mov    DWORD PTR [rsp+0x20],0x48
 1006104:	mov    rsi,rcx
 1006107:	mov    ecx,DWORD PTR [rcx+0x10]
 100610a:	mov    r14d,DWORD PTR [rsi+0x14]
 100610e:	mov    r15d,DWORD PTR [rsi+0x1c]
 1006112:	mov    r13,rdx
 1006115:	lea    rdx,[rip+0xffffffffffff9ee4]        # 0x1000000
 100611c:	mov    QWORD PTR [r11-0x80],rsi
 1006120:	add    rax,rdx
 1006123:	mov    QWORD PTR [r11-0x78],r13
 1006127:	and    r9d,0x1
 100612b:	mov    QWORD PTR [r11-0x70],rax
 100612f:	and    DWORD PTR [rsp+0x40],0x0
 1006134:	xor    eax,eax
 1006136:	and    QWORD PTR [r11-0x58],rax
 100613a:	and    QWORD PTR [r11-0x50],rax
 100613e:	mov    QWORD PTR [r11-0x60],rax
 1006142:	and    DWORD PTR [rsp+0x60],eax
 1006146:	add    r12,rdx
 1006149:	add    r10,rdx
 100614c:	add    rcx,rdx
 100614f:	add    r14,rdx
 1006152:	test   r9b,r9b
 1006155:	jne    0x100617c
 1006157:	xor    edx,edx
 1006159:	lea    rax,[rsp+0x20]
 100615e:	lea    r9,[r11+0x8]
 1006162:	lea    r8d,[rdx+0x1]
 1006166:	mov    ecx,0xc06d0057
 100616b:	mov    QWORD PTR [r11+0x8],rax
 100616f:	call   QWORD PTR [rip+0xffffffffffffb03b]        # 0x10011b0
 1006175:	xor    eax,eax
 1006177:	jmp    0x10063ae
 100617c:	mov    rdi,QWORD PTR [r12]
 1006180:	movabs rax,0x8000000000000000
 100618a:	mov    rbp,r13
 100618d:	sub    rbp,r10
 1006190:	sar    rbp,0x3
 1006194:	mov    ebp,ebp
 1006196:	test   QWORD PTR [rcx+rbp*8],rax
 100619a:	mov    eax,0x0
 100619f:	sete   al
 10061a2:	mov    DWORD PTR [rsp+0x40],eax
 10061a6:	test   eax,eax
 10061a8:	je     0x10061be
 10061aa:	mov    eax,DWORD PTR [rcx+rbp*8]
 10061ad:	lea    rcx,[rip+0xffffffffffff9e4e]        # 0x1000002
 10061b4:	add    rax,rcx
 10061b7:	mov    QWORD PTR [rsp+0x48],rax
 10061bc:	jmp    0x10061c6
 10061be:	movzx  eax,WORD PTR [rcx+rbp*8]
 10061c2:	mov    DWORD PTR [rsp+0x48],eax
 10061c6:	mov    rax,QWORD PTR [rip+0xffffffffffffb233]        # 0x1001400
 10061cd:	xor    ebx,ebx
 10061cf:	test   rax,rax
 10061d2:	je     0x10061f0
 10061d4:	lea    rdx,[rsp+0x20]
 10061d9:	xor    ecx,ecx
 10061db:	call   rax
 10061dd:	mov    rbx,rax
 10061e0:	test   rax,rax
 10061e3:	jne    0x1006384
 10061e9:	mov    rax,QWORD PTR [rip+0xffffffffffffb210]        # 0x1001400
 10061f0:	test   rdi,rdi
 10061f3:	jne    0x10062c7
 10061f9:	test   rax,rax
 10061fc:	je     0x1006210
 10061fe:	lea    rdx,[rsp+0x20]
 1006203:	lea    ecx,[rdi+0x1]
 1006206:	call   rax
 1006208:	mov    rdi,rax
 100620b:	test   rax,rax
 100620e:	jne    0x100627b
 1006210:	mov    rcx,QWORD PTR [rsp+0x38]
 1006215:	call   QWORD PTR [rip+0xffffffffffffaf35]        # 0x1001150
 100621b:	mov    rdi,rax
 100621e:	test   rax,rax
 1006221:	jne    0x100627b
 1006223:	call   QWORD PTR [rip+0xffffffffffffafbf]        # 0x10011e8
 1006229:	mov    DWORD PTR [rsp+0x60],eax
 100622d:	mov    rax,QWORD PTR [rip+0xffffffffffffb1d4]        # 0x1001408
 1006234:	test   rax,rax
 1006237:	je     0x100624b
 1006239:	lea    rdx,[rsp+0x20]
 100623e:	lea    ecx,[rdi+0x3]
 1006241:	call   rax
 1006243:	mov    rdi,rax
 1006246:	test   rax,rax
 1006249:	jne    0x100627b
 100624b:	xor    edx,edx
 100624d:	lea    rax,[rsp+0x20]
 1006252:	lea    r9,[rsp+0xb8]
 100625a:	lea    r8d,[rdx+0x1]
 100625e:	mov    ecx,0xc06d007e
 1006263:	mov    QWORD PTR [rsp+0xb8],rax
 100626b:	call   QWORD PTR [rip+0xffffffffffffaf3f]        # 0x10011b0
 1006271:	mov    rax,QWORD PTR [rsp+0x58]
 1006276:	jmp    0x10063ae
 100627b:	mov    rax,rdi
 100627e:	xchg   QWORD PTR [r12],rax
 1006282:	cmp    rax,rdi
 1006285:	je     0x10062b7
 1006287:	cmp    DWORD PTR [rsi+0x18],0x0
 100628b:	je     0x10062c0
 100628d:	mov    edx,0x10
 1006292:	lea    ecx,[rdx+0x30]
 1006295:	call   QWORD PTR [rip+0xffffffffffffafcd]        # 0x1001268
 100629b:	test   rax,rax
 100629e:	je     0x10062c0
 10062a0:	mov    QWORD PTR [rax+0x8],rsi
 10062a4:	mov    rcx,QWORD PTR [rip+0x2afd]        # 0x1008da8
 10062ab:	mov    QWORD PTR [rax],rcx
 10062ae:	mov    QWORD PTR [rip+0x2af3],rax        # 0x1008da8
 10062b5:	jmp    0x10062c0
 10062b7:	mov    rcx,rdi
 10062ba:	call   QWORD PTR [rip+0xffffffffffffae18]        # 0x10010d8
 10062c0:	mov    rax,QWORD PTR [rip+0xffffffffffffb139]        # 0x1001400
 10062c7:	mov    QWORD PTR [rsp+0x50],rdi
 10062cc:	test   rax,rax
 10062cf:	je     0x10062e0
 10062d1:	lea    rdx,[rsp+0x20]
 10062d6:	mov    ecx,0x2
 10062db:	call   rax
 10062dd:	mov    rbx,rax
 10062e0:	test   rbx,rbx
 10062e3:	jne    0x1006380
 10062e9:	cmp    DWORD PTR [rsi+0x14],ebx
 10062ec:	je     0x1006317
 10062ee:	cmp    DWORD PTR [rsi+0x1c],ebx
 10062f1:	je     0x1006317
 10062f3:	movsxd rax,DWORD PTR [rdi+0x3c]
 10062f7:	cmp    DWORD PTR [rax+rdi*1],0x4550
 10062fe:	jne    0x1006317
 1006300:	cmp    DWORD PTR [rax+rdi*1+0x8],r15d
 1006305:	jne    0x1006317
 1006307:	cmp    rdi,QWORD PTR [rax+rdi*1+0x30]
 100630c:	jne    0x1006317
 100630e:	mov    rbx,QWORD PTR [r14+rbp*8]
 1006312:	test   rbx,rbx
 1006315:	jne    0x1006380
 1006317:	mov    rdx,QWORD PTR [rsp+0x48]
 100631c:	mov    rcx,rdi
 100631f:	call   QWORD PTR [rip+0xffffffffffffaebb]        # 0x10011e0
 1006325:	mov    rbx,rax
 1006328:	test   rax,rax
 100632b:	jne    0x1006380
 100632d:	call   QWORD PTR [rip+0xffffffffffffaeb5]        # 0x10011e8
 1006333:	mov    DWORD PTR [rsp+0x60],eax
 1006337:	mov    rax,QWORD PTR [rip+0xffffffffffffb0ca]        # 0x1001408
 100633e:	test   rax,rax
 1006341:	je     0x1006350
 1006343:	lea    rdx,[rsp+0x20]
 1006348:	lea    ecx,[rbx+0x4]
 100634b:	call   rax
 100634d:	mov    rbx,rax
 1006350:	test   rbx,rbx
 1006353:	jne    0x1006380
 1006355:	lea    rax,[rsp+0x20]
 100635a:	lea    r9,[rsp+0xc0]
 1006362:	lea    r8d,[rbx+0x1]
 1006366:	xor    edx,edx
 1006368:	mov    ecx,0xc06d007f
 100636d:	mov    QWORD PTR [rsp+0xc0],rax
 1006375:	call   QWORD PTR [rip+0xffffffffffffae35]        # 0x10011b0
 100637b:	mov    rbx,QWORD PTR [rsp+0x58]
 1006380:	mov    QWORD PTR [r13+0x0],rbx
 1006384:	mov    rax,QWORD PTR [rip+0xffffffffffffb075]        # 0x1001400
 100638b:	test   rax,rax
 100638e:	je     0x10063ab
 1006390:	and    DWORD PTR [rsp+0x60],0x0
 1006395:	lea    rdx,[rsp+0x20]
 100639a:	mov    ecx,0x5
 100639f:	mov    QWORD PTR [rsp+0x50],rdi
 10063a4:	mov    QWORD PTR [rsp+0x58],rbx
 10063a9:	call   rax
 10063ab:	mov    rax,rbx
 10063ae:	mov    rbx,QWORD PTR [rsp+0xc8]
 10063b6:	add    rsp,0x70
 10063ba:	pop    r15
 10063bc:	pop    r14
 10063be:	pop    r13
 10063c0:	pop    r12
 10063c2:	pop    rdi
 10063c3:	pop    rsi
 10063c4:	pop    rbp
 10063c5:	ret    
 10063c6:	int3   
 10063c7:	int3   
 10063c8:	int3   
 10063c9:	int3   
 10063ca:	int3   
 10063cb:	int3   
 10063cc:	jmp    QWORD PTR [rip+0xffffffffffffadb6]        # 0x1001188
 10063d2:	int3   
 10063d3:	int3   
 10063d4:	int3   
 10063d5:	int3   
 10063d6:	int3   
 10063d7:	int3   
 10063d8:	jmp    QWORD PTR [rip+0xffffffffffffada2]        # 0x1001180
 10063de:	int3   
 10063df:	int3   
 10063e0:	int3   
 10063e1:	int3   
 10063e2:	int3   
 10063e3:	int3   
 10063e4:	mov    rax,rsp
 10063e7:	mov    QWORD PTR [rax+0x8],rbx
 10063eb:	mov    QWORD PTR [rax+0x10],rbp
 10063ef:	mov    QWORD PTR [rax+0x18],rsi
 10063f3:	mov    QWORD PTR [rax+0x20],rdi
 10063f7:	push   r12
 10063f9:	sub    rsp,0x20
 10063fd:	mov    r10,QWORD PTR [r9+0x38]
 1006401:	mov    rsi,rdx
 1006404:	mov    r12,r8
 1006407:	mov    eax,DWORD PTR [r10]
 100640a:	mov    rbp,rcx
 100640d:	mov    rdx,r9
 1006410:	add    rax,rax
 1006413:	mov    rcx,rsi
 1006416:	mov    rdi,r9
 1006419:	lea    rbx,[r10+rax*8+0x4]
 100641e:	mov    r8,rbx
 1006421:	call   0x1006498
 1006426:	mov    r11d,DWORD PTR [rbx]
 1006429:	mov    r10d,DWORD PTR [rbp+0x4]
 100642d:	mov    eax,r11d
 1006430:	and    r11d,0x2
 1006434:	mov    edx,0x1
 1006439:	and    eax,edx
 100643b:	and    r10b,0x66
 100643f:	cmove  r11d,eax
 1006443:	test   r11d,r11d
 1006446:	je     0x100645b
 1006448:	mov    r9,rdi
 100644b:	mov    r8,r12
 100644e:	mov    rdx,rsi
 1006451:	mov    rcx,rbp
 1006454:	call   0x10042a2
 1006459:	mov    edx,eax
 100645b:	mov    rbx,QWORD PTR [rsp+0x30]
 1006460:	mov    rbp,QWORD PTR [rsp+0x38]
 1006465:	mov    rsi,QWORD PTR [rsp+0x40]
 100646a:	mov    rdi,QWORD PTR [rsp+0x48]
 100646f:	mov    eax,edx
 1006471:	add    rsp,0x20
 1006475:	pop    r12
 1006477:	ret    
 1006478:	int3   
 1006479:	int3   
 100647a:	int3   
 100647b:	int3   
 100647c:	int3   
 100647d:	int3   
 100647e:	jmp    QWORD PTR [rip+0xffffffffffffae04]        # 0x1001288
 1006484:	int3   
 1006485:	int3   
 1006486:	int3   
 1006487:	int3   
 1006488:	int3   
 1006489:	int3   
 100648a:	jmp    QWORD PTR [rip+0xffffffffffffae00]        # 0x1001290
 1006490:	int3   
 1006491:	int3   
 1006492:	int3   
 1006493:	int3   
 1006494:	int3   
 1006495:	int3   
 1006496:	int3   
 1006497:	int3   
 1006498:	rex push rbx
 100649a:	sub    rsp,0x20
 100649e:	mov    r11d,DWORD PTR [r8]
 10064a1:	mov    rbx,rdx
 10064a4:	mov    r9,rcx
 10064a7:	and    r11d,0xfffffff8
 10064ab:	test   BYTE PTR [r8],0x4
 10064af:	mov    r10,rcx
 10064b2:	je     0x10064c7
 10064b4:	mov    eax,DWORD PTR [r8+0x8]
 10064b8:	movsxd r10,DWORD PTR [r8+0x4]
 10064bc:	neg    eax
 10064be:	add    r10,rcx
 10064c1:	movsxd rcx,eax
 10064c4:	and    r10,rcx
 10064c7:	movsxd rax,r11d
 10064ca:	mov    rdx,QWORD PTR [rax+r10*1]
 10064ce:	mov    rax,QWORD PTR [rbx+0x10]
 10064d2:	mov    ecx,DWORD PTR [rax+0x8]
 10064d5:	add    rcx,QWORD PTR [rbx+0x8]
 10064d9:	test   BYTE PTR [rcx+0x3],0xf
 10064dd:	je     0x10064eb
 10064df:	movzx  eax,BYTE PTR [rcx+0x3]
 10064e3:	and    eax,0xfffffff0
 10064e6:	cdqe   
 10064e8:	add    r9,rax
 10064eb:	xor    r9,rdx
 10064ee:	mov    rcx,r9
 10064f1:	add    rsp,0x20
 10064f5:	pop    rbx
 10064f6:	jmp    0x1003f60
 10064fb:	int3   
 10064fc:	int3   
 10064fd:	int3   
 10064fe:	int3   
 10064ff:	int3   
 1006500:	int3   
 1006501:	int3   
 1006502:	int3   
 1006503:	int3   
 1006504:	sub    rsp,0x28
 1006508:	mov    r8,QWORD PTR [r9+0x38]
 100650c:	mov    rcx,rdx
 100650f:	mov    rdx,r9
 1006512:	call   0x1006498
 1006517:	mov    eax,0x1
 100651c:	add    rsp,0x28
 1006520:	ret    
 1006521:	int3   
 1006522:	int3   
 1006523:	int3   
 1006524:	int3   
 1006525:	int3   
 1006526:	int3   
 1006527:	int3   
 1006528:	jmp    QWORD PTR [rip+0xffffffffffffad6a]        # 0x1001298
 100652e:	int3   
 100652f:	int3   
 1006530:	int3   
 1006531:	int3   
 1006532:	int3   
 1006533:	int3   
 1006534:	mov    rax,rsp
 1006537:	mov    QWORD PTR [rax+0x8],rbx
 100653b:	mov    QWORD PTR [rax+0x10],rbp
 100653f:	mov    QWORD PTR [rax+0x18],rsi
 1006543:	mov    QWORD PTR [rax+0x20],rdi
 1006547:	push   r12
 1006549:	sub    rsp,0x20
 100654d:	mov    rbx,QWORD PTR [r9+0x38]
 1006551:	mov    rsi,rdx
 1006554:	mov    r12,r8
 1006557:	mov    rbp,rcx
 100655a:	lea    r8,[rbx+0x4]
 100655e:	mov    rdx,r9
 1006561:	mov    rcx,rsi
 1006564:	mov    rdi,r9
 1006567:	call   0x1006498
 100656c:	mov    r11d,DWORD PTR [rbx+0x4]
 1006570:	mov    r10d,DWORD PTR [rbp+0x4]
 1006574:	mov    eax,r11d
 1006577:	and    r11d,0x2
 100657b:	mov    r8d,0x1
 1006581:	and    eax,r8d
 1006584:	and    r10b,0x66
 1006588:	cmove  r11d,eax
 100658c:	test   r11d,r11d
 100658f:	je     0x10065a5
 1006591:	mov    r9,rdi
 1006594:	mov    r8,r12
 1006597:	mov    rdx,rsi
 100659a:	mov    rcx,rbp
 100659d:	call   0x1006528
 10065a2:	mov    r8d,eax
 10065a5:	mov    rbx,QWORD PTR [rsp+0x30]
 10065aa:	mov    rbp,QWORD PTR [rsp+0x38]
 10065af:	mov    rsi,QWORD PTR [rsp+0x40]
 10065b4:	mov    rdi,QWORD PTR [rsp+0x48]
 10065b9:	mov    eax,r8d
 10065bc:	add    rsp,0x20
 10065c0:	pop    r12
 10065c2:	ret    
 10065c3:	int3   
 10065c4:	int3   
 10065c5:	int3   
 10065c6:	int3   
 10065c7:	int3   
 10065c8:	int3   
 10065c9:	int3   
 10065ca:	int3   
 10065cb:	int3   
 10065cc:	int3   
 10065cd:	int3   
 10065ce:	int3   
 10065cf:	int3   
 10065d0:	int3   
 10065d1:	int3   
 10065d2:	int3   
 10065d3:	int3   
 10065d4:	int3   
 10065d5:	int3   
 10065d6:	data16 nop WORD PTR [rax+rax*1+0x0]
 10065e0:	sub    rsp,0x10
 10065e4:	mov    QWORD PTR [rsp],r10
 10065e8:	mov    QWORD PTR [rsp+0x8],r11
 10065ed:	xor    r11,r11
 10065f0:	lea    r10,[rsp+0x18]
 10065f5:	sub    r10,rax
 10065f8:	cmovb  r10,r11
 10065fc:	mov    r11,QWORD PTR gs:0x10
 1006605:	cmp    r10,r11
 1006608:	jae    0x1006620
 100660a:	and    r10w,0xf000
 1006610:	lea    r11,[r11-0x1000]
 1006617:	mov    BYTE PTR [r11],0x0
 100661b:	cmp    r10,r11
 100661e:	jne    0x1006610
 1006620:	mov    r10,QWORD PTR [rsp]
 1006624:	mov    r11,QWORD PTR [rsp+0x8]
 1006629:	add    rsp,0x10
 100662d:	ret    
 100662e:	int3   
 100662f:	int3   
 1006630:	int3   
 1006631:	int3   
 1006632:	int3   
 1006633:	int3   
 1006634:	jmp    QWORD PTR [rip+0xffffffffffffad26]        # 0x1001360
 100663a:	int3   
 100663b:	int3   
 100663c:	int3   
 100663d:	int3   
 100663e:	int3   
 100663f:	int3   
 1006640:	int3   
 1006641:	int3   
 1006642:	int3   
 1006643:	int3   
 1006644:	int3   
 1006645:	int3   
 1006646:	rex push rbp
 1006648:	sub    rsp,0x20
 100664c:	mov    rbp,rdx
 100664f:	mov    rax,QWORD PTR [rcx]
 1006652:	mov    rdx,rcx
 1006655:	mov    ecx,DWORD PTR [rax]
 1006657:	call   0x10042ae
 100665c:	nop
 100665d:	add    rsp,0x20
 1006661:	pop    rbp
 1006662:	ret    
 1006663:	int3   
 1006664:	int3   
 1006665:	int3   
 1006666:	int3   
 1006667:	int3   
 1006668:	int3   
 1006669:	int3   
 100666a:	rex push rbp
 100666c:	sub    rsp,0x20
 1006670:	mov    rbp,rdx
 1006673:	mov    ecx,0x8
 1006678:	call   0x100448e
 100667d:	nop
 100667e:	add    rsp,0x20
 1006682:	pop    rbp
 1006683:	ret    
 1006684:	int3   
 1006685:	int3   
 1006686:	int3   
 1006687:	int3   
 1006688:	int3   
 1006689:	int3   
 100668a:	int3   
 100668b:	int3   
 100668c:	int3   
 100668d:	int3   
 100668e:	int3   
 100668f:	int3   
 1006690:	rex push rbp
 1006692:	sub    rsp,0x20
 1006696:	mov    rbp,rdx
 1006699:	mov    rax,QWORD PTR [rcx]
 100669c:	xor    ecx,ecx
 100669e:	cmp    DWORD PTR [rax],0xc0000005
 10066a4:	sete   cl
 10066a7:	mov    eax,ecx
 10066a9:	mov    eax,ecx
 10066ab:	add    rsp,0x20
 10066af:	pop    rbp
 10066b0:	ret    
 10066b1:	int3   
 10066b2:	int3   
 10066b3:	int3   
 10066b4:	int3   
 10066b5:	int3   
 10066b6:	int3   
 10066b7:	int3   
 10066b8:	int3   
 10066b9:	int3   
 10066ba:	int3   
 10066bb:	int3   
 10066bc:	int3   
 10066bd:	int3   
 10066be:	int3   
 10066bf:	int3   
 10066c0:	lea    rcx,[rdx+0x40]
 10066c7:	jmp    0x1003c60
 10066cc:	int3   
 10066cd:	int3   
 10066ce:	int3   
 10066cf:	int3   
 10066d0:	lea    rcx,[rdx+0x48]
 10066d7:	jmp    0x1003c60
 10066dc:	int3   
 10066dd:	int3   
 10066de:	int3   
 10066df:	int3   
 10066e0:	int3   
 10066e1:	int3   
 10066e2:	int3   
 10066e3:	int3   
 10066e4:	int3   
 10066e5:	int3   
 10066e6:	int3   
 10066e7:	int3   
 10066e8:	int3   
 10066e9:	int3   
 10066ea:	int3   
 10066eb:	int3   
 10066ec:	int3   
 10066ed:	int3   
 10066ee:	int3   
 10066ef:	int3   
 10066f0:	lea    rcx,[rdx+0x60]
 10066f7:	jmp    0x1003c60
 10066fc:	int3   
 10066fd:	int3   
 10066fe:	int3   
 10066ff:	int3   
 1006700:	int3   
 1006701:	int3   
 1006702:	int3   
 1006703:	int3   
 1006704:	int3   
 1006705:	int3   
 1006706:	int3   
 1006707:	int3   
 1006708:	int3   
 1006709:	int3   
 100670a:	int3   
 100670b:	int3   
 100670c:	int3   
 100670d:	int3   
 100670e:	int3   
 100670f:	int3   
 1006710:	lea    rcx,[rdx+0x38]
 1006717:	jmp    0x1003c30
 100671c:	int3   
 100671d:	int3   
 100671e:	int3   
 100671f:	int3   
 1006720:	lea    rcx,[rdx+0x58]
 1006727:	jmp    0x1003c50
 100672c:	int3   
 100672d:	int3   
 100672e:	int3   
 100672f:	int3   
 1006730:	lea    rcx,[rdx+0x50]
 1006737:	jmp    0x1003c50
 100673c:	int3   
 100673d:	int3   
 100673e:	int3   
 100673f:	int3   
 1006740:	int3   
 1006741:	int3   
 1006742:	int3   
 1006743:	int3   
 1006744:	int3   
 1006745:	int3   
 1006746:	int3   
 1006747:	int3   
 1006748:	int3   
 1006749:	int3   
 100674a:	int3   
 100674b:	int3   
 100674c:	int3   
 100674d:	int3   
 100674e:	int3   
 100674f:	int3   
 1006750:	rex push rbx
 1006752:	push   rbp
 1006753:	sub    rsp,0x38
 1006757:	mov    rbp,rdx
 100675a:	mov    rcx,QWORD PTR [rbp+0x40]
 100675e:	test   rcx,rcx
 1006761:	je     0x100676a
 1006763:	call   QWORD PTR [rip+0xffffffffffffaa4f]        # 0x10011b8
 1006769:	nop
 100676a:	mov    rbx,QWORD PTR [rbp+0x70]
 100676e:	test   rbx,rbx
 1006771:	je     0x1006788
 1006773:	call   QWORD PTR [rip+0xffffffffffffaaaf]        # 0x1001228
 1006779:	mov    rcx,rax
 100677c:	mov    r8,rbx
 100677f:	xor    edx,edx
 1006781:	call   QWORD PTR [rip+0xffffffffffffaab1]        # 0x1001238
 1006787:	nop
 1006788:	mov    rbx,QWORD PTR [rbp+0x68]
 100678c:	test   rbx,rbx
 100678f:	je     0x10067a6
 1006791:	call   QWORD PTR [rip+0xffffffffffffaa91]        # 0x1001228
 1006797:	mov    rcx,rax
 100679a:	mov    r8,rbx
 100679d:	xor    edx,edx
 100679f:	call   QWORD PTR [rip+0xffffffffffffaa93]        # 0x1001238
 10067a5:	nop
 10067a6:	add    rsp,0x38
 10067aa:	pop    rbp
 10067ab:	pop    rbx
 10067ac:	ret    
 10067ad:	int3   
 10067ae:	int3   
 10067af:	int3   
 10067b0:	int3   
 10067b1:	int3   
 10067b2:	int3   
 10067b3:	int3   
 10067b4:	int3   
 10067b5:	int3   
 10067b6:	int3   
 10067b7:	int3   
 10067b8:	int3   
 10067b9:	int3   
 10067ba:	int3   
 10067bb:	int3   
 10067bc:	int3   
 10067bd:	int3   
 10067be:	int3   
 10067bf:	int3   
 10067c0:	lea    rcx,[rip+0x49]        # 0x1006810
 10067c7:	jmp    0x1004190
 10067cc:	int3   
 10067cd:	int3   
 10067ce:	int3   
 10067cf:	int3   
 10067d0:	int3   
 10067d1:	int3   
 10067d2:	int3   
 10067d3:	int3   
 10067d4:	int3   
 10067d5:	int3   
 10067d6:	int3   
 10067d7:	int3   
 10067d8:	int3   
 10067d9:	int3   
 10067da:	int3   
 10067db:	int3   
 10067dc:	int3   
 10067dd:	int3   
 10067de:	int3   
 10067df:	int3   
 10067e0:	sub    rsp,0x28
 10067e4:	call   0x10057b0
 10067e9:	mov    DWORD PTR [rip+0x1f85],eax        # 0x1008774
 10067ef:	add    rsp,0x28
 10067f3:	ret    
 10067f4:	int3   
 10067f5:	int3   
 10067f6:	int3   
 10067f7:	int3   
 10067f8:	int3   
 10067f9:	int3   
 10067fa:	int3   
 10067fb:	int3   
 10067fc:	int3   
 10067fd:	int3   
 10067fe:	int3   
 10067ff:	int3   
 1006800:	int3   
 1006801:	int3   
 1006802:	int3   
 1006803:	int3   
 1006804:	int3   
 1006805:	int3   
 1006806:	int3   
 1006807:	int3   
 1006808:	int3   
 1006809:	int3   
 100680a:	int3   
 100680b:	int3   
 100680c:	int3   
 100680d:	int3   
 100680e:	int3   
 100680f:	int3   
 1006810:	mov    rcx,QWORD PTR [rip+0x2c61]        # 0x1009478
 1006817:	rex.W jmp QWORD PTR [rip+0xffffffffffffab2a]        # 0x1001348
 100681e:	int3   
 100681f:	int3   
 1006820:	add    DWORD PTR [rcx+rax*1],eax
 1006823:	add    BYTE PTR [rdx+riz*2],al
 1006826:	add    BYTE PTR [rax],al
 1006828:	add    DWORD PTR [rsi],eax
 100682a:	add    al,BYTE PTR [rax]
 100682c:	(bad)  
 100682d:	xor    al,BYTE PTR [rdx]
 100682f:	push   rax
 1006830:	or     DWORD PTR [rdx],ecx
 1006832:	add    al,0x0
 1006834:	or     dh,BYTE PTR [rsi+rax*1]
 1006837:	add    BYTE PTR [rdx],cl
 1006839:	xor    al,BYTE PTR [rsi]
 100683b:	jo     0x10067df
 100683d:	rex.X add BYTE PTR [rax],al
 1006840:	add    DWORD PTR [rax],eax
 1006842:	add    BYTE PTR [rax],al
 1006844:	out    0x3c,al
 1006846:	add    BYTE PTR [rax],al
 1006848:	and    al,0x3e
 100684a:	add    BYTE PTR [rax],al
 100684c:	rex.RX
 100684d:	data16 add BYTE PTR [rax],al
 1006850:	and    al,0x3e
 1006852:	add    BYTE PTR [rax],al
 1006854:	add    DWORD PTR [rcx+rax*1],eax
 1006857:	add    BYTE PTR [rdx+rax*2],al
 100685a:	add    BYTE PTR [rax],al
 100685c:	add    DWORD PTR [rcx+rax*1],eax
 100685f:	add    BYTE PTR [rdx+rax*2],al
 1006862:	add    BYTE PTR [rax],al
 1006864:	add    BYTE PTR [rax],al
 1006866:	add    BYTE PTR [rax],al
 1006868:	add    DWORD PTR [rax],eax
 100686a:	add    BYTE PTR [rax],al
 100686c:	add    DWORD PTR [rdx+rax*1],ecx
 100686f:	add    BYTE PTR [rcx+rax*1],cl
 1006872:	adc    DWORD PTR [rax],eax
 1006874:	add    DWORD PTR [rsi],eax
 1006876:	add    al,BYTE PTR [rax]
 1006878:	(bad)  
 1006879:	xor    al,BYTE PTR [rdx]
 100687b:	push   rax
 100687c:	adc    DWORD PTR [rsi],eax
 100687e:	add    al,BYTE PTR [rax]
 1006880:	(bad)  
 1006881:	xor    al,BYTE PTR [rdx]
 1006883:	xor    BYTE PTR [rdx+0x1000042],ah
 1006889:	add    BYTE PTR [rax],al
 100688b:	add    BYTE PTR [rdi],cl
 100688d:	add    BYTE PTR [r8],al
 1006890:	jne    0x10068d3
 1006892:	add    BYTE PTR [rax],al
 1006894:	push   0x66
 1006896:	add    BYTE PTR [rax],al
 1006898:	add    BYTE PTR [rax],al
 100689a:	add    BYTE PTR [rax],al
 100689c:	add    DWORD PTR [rcx+rax*1],eax
 100689f:	add    BYTE PTR [rdx+rax*2],al
 10068a2:	add    BYTE PTR [rax],al
 10068a4:	add    DWORD PTR [rcx+rax*1],eax
 10068a7:	add    BYTE PTR [rdx+rax*2],al
 10068aa:	add    BYTE PTR [rax],al
 10068ac:	add    DWORD PTR [rcx+rax*1],eax
 10068af:	add    BYTE PTR [rdx+rax*2],al
 10068b2:	add    BYTE PTR [rax],al
 10068b4:	add    DWORD PTR [rdx],ecx
 10068b6:	add    al,0x0
 10068b8:	or     dh,BYTE PTR [rsi+rax*1]
 10068bb:	add    BYTE PTR [rdx],cl
 10068bd:	xor    al,BYTE PTR [rsi]
 10068bf:	jo     0x10068c2
 10068c1:	or     al,BYTE PTR [rax+rax*1]
 10068c4:	or     dh,BYTE PTR [rsi+rax*1]
 10068c7:	add    BYTE PTR [rdx],cl
 10068c9:	xor    al,BYTE PTR [rsi]
 10068cb:	jo     0x10068ce
 10068cd:	(bad)  
 10068ce:	add    al,BYTE PTR [rax]
 10068d0:	(bad)  
 10068d1:	xor    al,BYTE PTR [rdx]
 10068d3:	push   rax
 10068d4:	or     DWORD PTR [rcx+rax*1],eax
 10068d7:	add    BYTE PTR [rdx+rax*2],al
 10068da:	add    BYTE PTR [rax],al
 10068dc:	movabs ds:0x5700000001000042,al
 10068e5:	rex.XB add BYTE PTR [r8],al
 10068e8:	mov    al,BYTE PTR [rbx+0x0]
 10068eb:	add    BYTE PTR [rax-0x75ffff9a],dl
 10068f1:	rex.XB add BYTE PTR [r8],al
 10068f4:	add    DWORD PTR [rdx],ecx
 10068f6:	add    al,0x0
 10068f8:	or     dh,BYTE PTR [rax+rcx*1]
 10068fb:	add    BYTE PTR [rdx],cl
 10068fd:	xor    al,BYTE PTR [rsi]
 10068ff:	jo     0x1006902
 1006901:	sbb    BYTE PTR [rcx],al
 1006903:	add    BYTE PTR [rax],bl
 1006905:	ret    0x0
 1006908:	add    DWORD PTR [rsi],eax
 100690a:	add    al,BYTE PTR [rax]
 100690c:	(bad)  
 100690d:	push   rdx
 100690e:	add    dl,BYTE PTR [rax+0x19]
 1006911:	sbb    DWORD PTR [rdx],eax
 1006913:	add    BYTE PTR [rdi],al
 1006915:	add    DWORD PTR [rcx+0x0],esp
 1006918:	in     al,0x63
 100691a:	add    BYTE PTR [rax],al
 100691c:	add    DWORD PTR [rax],eax
 100691e:	add    BYTE PTR [rax],al
 1006920:	or     al,0x46
 1006922:	add    BYTE PTR [rax],al
 1006924:	cmp    al,0x4d
 1006926:	add    BYTE PTR [rax],al
 1006928:	loopne 0x1006977
 100692a:	add    BYTE PTR [rax],al
 100692c:	add    BYTE PTR [rax],al
 100692e:	add    BYTE PTR [rax],al
 1006930:	cli    
 1006931:	add    al,BYTE PTR [rax]
 1006933:	add    BYTE PTR [rcx],al
 1006935:	adc    eax,DWORD PTR [rcx]
 1006937:	add    BYTE PTR [rbx],dl
 1006939:	(bad)  
 100693a:	add    BYTE PTR [rax],al
 100693c:	add    DWORD PTR [rbx],edx
 100693e:	add    DWORD PTR [rax],eax
 1006940:	adc    eax,DWORD PTR [rdx+0x13010000]
 1006946:	add    DWORD PTR [rax],eax
 1006948:	adc    esp,DWORD PTR [rdx]
 100694a:	add    BYTE PTR [rax],al
 100694c:	add    DWORD PTR [rax],ebx
 100694e:	add    DWORD PTR [rax],eax
 1006950:	sbb    BYTE PTR [rdx+0x0],ah
 1006953:	add    BYTE PTR [rcx],al
 1006955:	adc    eax,DWORD PTR [rcx]
 1006957:	add    BYTE PTR [rbx],dl
 1006959:	and    al,BYTE PTR [rax]
 100695b:	add    BYTE PTR [rcx],al
 100695d:	sbb    BYTE PTR [rcx],al
 100695f:	add    BYTE PTR [rax],bl
 1006961:	and    al,BYTE PTR [rax]
 1006963:	add    BYTE PTR [rcx],al
 1006965:	add    al,0x1
 1006967:	add    BYTE PTR [rdx+riz*2],al
 100696a:	add    BYTE PTR [rax],al
 100696c:	add    DWORD PTR [rbx+rax*1],ecx
 100696f:	add    BYTE PTR [rdx+riz*4],cl
 1006972:	or     al,ah
 1006974:	(bad)  
 1006975:	xor    BYTE PTR [rax],al
 1006977:	add    BYTE PTR [rcx],ah
 1006979:	or     al,BYTE PTR [rax+rax*1]
 100697c:	or     ah,BYTE PTR [rdi+rcx*1+0x0]
 1006980:	add    eax,0x40000e54
 1006985:	push   rdx
 1006986:	add    BYTE PTR [rax],al
 1006988:	pop    rdi
 1006989:	push   rdx
 100698a:	add    BYTE PTR [rax],al
 100698c:	ins    BYTE PTR es:[rdi],dx
 100698d:	imul   eax,DWORD PTR [rax],0x82f2100
 1006993:	add    BYTE PTR [rdi],ch
 1006995:	hlt    
 1006996:	or     BYTE PTR [rax],al
 1006998:	es (bad) 
 100699a:	or     DWORD PTR [rax],eax
 100699c:	or     eax,0x8000ac4
 10069a1:	je     0x10069b3
 10069a3:	add    BYTE PTR [rdi+0x52],bl
 10069a6:	add    BYTE PTR [rax],al
 10069a8:	mov    dl,0x52
 10069aa:	add    BYTE PTR [rax],al
 10069ac:	js     0x1006a17
 10069ae:	add    BYTE PTR [rax],al
 10069b0:	and    DWORD PTR [rax],eax
 10069b2:	add    BYTE PTR [rax],al
 10069b4:	pop    rdi
 10069b5:	push   rdx
 10069b6:	add    BYTE PTR [rax],al
 10069b8:	mov    dl,0x52
 10069ba:	add    BYTE PTR [rax],al
 10069bc:	js     0x1006a27
 10069be:	add    BYTE PTR [rax],al
 10069c0:	and    DWORD PTR [rax],eax
 10069c2:	add    BYTE PTR [rax],al
 10069c4:	rex push rdx
 10069c6:	add    BYTE PTR [rax],al
 10069c8:	pop    rdi
 10069c9:	push   rdx
 10069ca:	add    BYTE PTR [rax],al
 10069cc:	ins    BYTE PTR es:[rdi],dx
 10069cd:	imul   eax,DWORD PTR [rax],0xe780100
 10069d3:	add    BYTE PTR [rax-0x2c],bh
 10069d6:	(bad)  
 10069d7:	add    BYTE PTR [rbx+0x54],dh
 10069da:	or     al,0x0
 10069dc:	xor    eax,0x300006e4
 10069e1:	(bad)  
 10069e2:	(bad)  
 10069e3:	add    BYTE PTR [rbx],ch
 10069e5:	je     0x10069f4
 10069e7:	add    BYTE PTR [rcx],cl
 10069e9:	jb     0x10069f0
 10069eb:	lock add esp,DWORD PTR [rax+0x2]
 10069ef:	xor    BYTE PTR [rcx],al
 10069f1:	add    al,0x1
 10069f3:	add    BYTE PTR [rdx+riz*4],al
 10069f6:	add    BYTE PTR [rax],al
 10069f8:	and    DWORD PTR [rip+0x34050002],eax        # 0x35056a00
 10069fe:	or     al,BYTE PTR [rax]
 1006a00:	mov    al,0x57
 1006a02:	add    BYTE PTR [rax],al
 1006a04:	(bad)  
 1006a05:	push   rdi
 1006a06:	add    BYTE PTR [rax],al
 1006a08:	lock imul eax,DWORD PTR [rax],0x2002100
 1006a0f:	add    BYTE PTR [rax],al
 1006a11:	xor    al,0xa
 1006a13:	add    BYTE PTR [rax-0x29ffffa9],dh
 1006a19:	push   rdi
 1006a1a:	add    BYTE PTR [rax],al
 1006a1c:	lock imul eax,DWORD PTR [rax],0x1040100
 1006a23:	add    BYTE PTR [rdx+rax*2],al
 1006a26:	add    BYTE PTR [rax],al
 1006a28:	add    DWORD PTR [rsi],eax
 1006a2a:	add    al,BYTE PTR [rax]
 1006a2c:	(bad)  
 1006a2d:	xor    al,BYTE PTR [rdx]
 1006a2f:	xor    BYTE PTR [rcx],al
 1006a31:	sbb    BYTE PTR [rdx],cl
 1006a33:	add    BYTE PTR [rax],bl
 1006a35:	or     al,BYTE PTR fs:[rax]
 1006a38:	sbb    BYTE PTR [rcx+rcx*1+0x0],dl
 1006a3c:	sbb    BYTE PTR [rax+rcx*1],dh
 1006a3f:	add    BYTE PTR [rax],bl
 1006a41:	xor    dl,BYTE PTR [rax+rsi*8]
 1006a44:	adc    ah,al
 1006a46:	adc    BYTE PTR [rax+0x1],dh
 1006a49:	sbb    BYTE PTR [rdx],cl
 1006a4b:	add    BYTE PTR [rax],bl
 1006a4d:	fs or  eax,0xc541800
 1006a53:	add    BYTE PTR [rax],bl
 1006a55:	xor    al,0xb
 1006a57:	add    BYTE PTR [rax],bl
 1006a59:	push   rdx
 1006a5a:	adc    al,0xf0
 1006a5c:	adc    ah,al
 1006a5e:	adc    BYTE PTR [rax+0x21],dh
 1006a61:	add    eax,0xc4050002
 1006a66:	or     al,BYTE PTR [rax]
 1006a68:	rcr    BYTE PTR [rcx+0x0],0x0
 1006a6c:	sbb    bl,BYTE PTR [rdx+0x0]
 1006a6f:	add    BYTE PTR [rax+0x6a],cl
 1006a72:	add    BYTE PTR [rax],al
 1006a74:	and    DWORD PTR [rax],eax
 1006a76:	add    BYTE PTR [rax],al
 1006a78:	rcr    BYTE PTR [rcx+0x0],0x0
 1006a7c:	sbb    bl,BYTE PTR [rdx+0x0]
 1006a7f:	add    BYTE PTR [rax+0x6a],cl
 1006a82:	add    BYTE PTR [rax],al
 1006a84:	add    DWORD PTR [rsi+rax*1],ecx
 1006a87:	add    BYTE PTR [rsp+rsi*1],cl
 1006a8a:	or     eax,0x8520c00
 1006a8f:	jo     0x1006a98
 1006a91:	(bad)  
 1006a92:	(bad)  
 1006a93:	push   rax
 1006a94:	and    DWORD PTR [rdi],ecx
 1006a96:	(bad)  
 1006a97:	add    BYTE PTR [rdi],cl
 1006a99:	hlt    
 1006a9a:	or     al,0x0
 1006a9c:	or     ah,ah
 1006a9e:	or     eax,DWORD PTR [rax]
 1006aa0:	add    eax,0xac4
 1006aa5:	pop    rbx
 1006aa6:	add    BYTE PTR [rax],al
 1006aa8:	cmp    bl,BYTE PTR [rbx+0x0]
 1006aab:	add    BYTE PTR [rdx+rbp*2+0x210000],al
 1006ab2:	add    BYTE PTR [rax],al
 1006ab4:	add    BYTE PTR [rbx+0x0],bl
 1006ab7:	add    BYTE PTR [rdx],bh
 1006ab9:	pop    rbx
 1006aba:	add    BYTE PTR [rax],al
 1006abc:	test   BYTE PTR [rdx+0x0],ch
 1006abf:	add    BYTE PTR [rcx],al
 1006ac1:	or     al,BYTE PTR [rax+rax*1]
 1006ac4:	or     dh,BYTE PTR [rdx+0x6]
 1006ac7:	rol    BYTE PTR [rax+rax*8],1
 1006aca:	add    dh,BYTE PTR [rax+0x21]
 1006acd:	(bad)  
 1006ace:	or     al,BYTE PTR [rax]
 1006ad0:	(bad)  
 1006ad1:	hlt    
 1006ad2:	(bad)  
 1006ad3:	add    BYTE PTR [rcx],bl
 1006ad5:	in     al,0x7
 1006ad7:	add    BYTE PTR [rdi],cl
 1006ad9:	fs (bad) 
 1006adb:	add    BYTE PTR [rdx],cl
 1006add:	push   rsp
 1006ade:	or     eax,0xc340500
 1006ae3:	add    BYTE PTR [rax+0x5c],al
 1006ae6:	add    BYTE PTR [rax],al
 1006ae8:	jae    0x1006b46
 1006aea:	add    BYTE PTR [rax],al
 1006aec:	shr    BYTE PTR [rdx+0x0],0x0
 1006af0:	and    DWORD PTR [rax],eax
 1006af2:	add    BYTE PTR [rax],al
 1006af4:	rex pop rsp
 1006af6:	add    BYTE PTR [rax],al
 1006af8:	jae    0x1006b56
 1006afa:	add    BYTE PTR [rax],al
 1006afc:	shr    BYTE PTR [rdx+0x0],0x0
 1006b00:	and    DWORD PTR [rax],eax
 1006b02:	or     al,BYTE PTR [rax]
 1006b04:	add    ah,dh
 1006b06:	(bad)  
 1006b07:	add    BYTE PTR [rax],al
 1006b09:	in     al,0x7
 1006b0b:	add    BYTE PTR [rax],al
 1006b0d:	fs (bad) 
 1006b0f:	add    BYTE PTR [rax],al
 1006b11:	push   rsp
 1006b12:	or     eax,0xc340000
 1006b17:	add    BYTE PTR [rax+0x5c],al
 1006b1a:	add    BYTE PTR [rax],al
 1006b1c:	jae    0x1006b7a
 1006b1e:	add    BYTE PTR [rax],al
 1006b20:	shr    BYTE PTR [rdx+0x0],0x0
 1006b24:	add    DWORD PTR [rsi],eax
 1006b26:	add    al,BYTE PTR [rax]
 1006b28:	(bad)  
 1006b29:	xor    al,BYTE PTR [rdx]
 1006b2b:	xor    BYTE PTR [rcx],al
 1006b2d:	(bad)  
 1006b2e:	add    al,BYTE PTR [rax]
 1006b30:	(bad)  
 1006b31:	xor    al,BYTE PTR [rdx]
 1006b33:	jo     0x1006b56
 1006b35:	clts   
 1006b37:	add    BYTE PTR [rdi],cl
 1006b39:	or     BYTE PTR fs:[rax],al
 1006b3c:	or     dl,BYTE PTR [rdi+rax*1+0x0]
 1006b40:	add    eax,0xa0000634
 1006b45:	pop    rsi
 1006b46:	add    BYTE PTR [rax],al
 1006b48:	add    al,0x5f
 1006b4a:	add    BYTE PTR [rax],al
 1006b4c:	sub    al,0x6b
 1006b4e:	add    BYTE PTR [rax],al
 1006b50:	and    DWORD PTR [rax],eax
 1006b52:	(bad)  
 1006b53:	add    BYTE PTR [rax],al
 1006b55:	or     BYTE PTR fs:[rax],al
 1006b58:	add    BYTE PTR [rdi+rax*1+0x0],dl
 1006b5c:	add    BYTE PTR [rsi+rax*1],dh
 1006b5f:	add    BYTE PTR [rax+0x400005e],ah
 1006b65:	pop    rdi
 1006b66:	add    BYTE PTR [rax],al
 1006b68:	sub    al,0x6b
 1006b6a:	add    BYTE PTR [rax],al
 1006b6c:	and    DWORD PTR [rax],eax
 1006b6e:	add    BYTE PTR [rax],al
 1006b70:	movabs al,ds:0x2c00005f0400005e
 1006b79:	imul   eax,DWORD PTR [rax],0x0
 1006b7c:	add    DWORD PTR [rsi],eax
 1006b7e:	add    al,BYTE PTR [rax]
 1006b80:	(bad)  
 1006b81:	xor    al,BYTE PTR [rdx]
 1006b83:	loopne 0x1006ba6
 1006b85:	or     al,BYTE PTR [rax+rax*1]
 1006b88:	or     ah,BYTE PTR [rdi+rax*1+0x0]
 1006b8c:	add    eax,0xb0000634
 1006b91:	pop    rdi
 1006b92:	add    BYTE PTR [rax],al
 1006b94:	fstp   DWORD PTR [rdi+0x0]
 1006b97:	add    BYTE PTR [rbx+rbp*2+0x0],bh
 1006b9b:	add    BYTE PTR [rcx],ah
 1006b9d:	or     al,BYTE PTR [rsi]
 1006b9f:	add    BYTE PTR [rdx],cl
 1006ba1:	je     0x1006bab
 1006ba3:	add    BYTE PTR [rax],al
 1006ba5:	fs (bad) 
 1006ba7:	add    BYTE PTR [rax],al
 1006ba9:	xor    al,0x6
 1006bab:	add    BYTE PTR [rax-0x26ffffa1],dh
 1006bb1:	pop    rdi
 1006bb2:	add    BYTE PTR [rax],al
 1006bb4:	jl     0x1006c21
 1006bb6:	add    BYTE PTR [rax],al
 1006bb8:	and    DWORD PTR [rax],eax
 1006bba:	(bad)  
 1006bbb:	add    BYTE PTR [rax],al
 1006bbd:	je     0x1006bc7
 1006bbf:	add    BYTE PTR [rax],al
 1006bc1:	fs (bad) 
 1006bc3:	add    BYTE PTR [rax],al
 1006bc5:	xor    al,0x6
 1006bc7:	add    BYTE PTR [rax-0x26ffffa1],dh
 1006bcd:	pop    rdi
 1006bce:	add    BYTE PTR [rax],al
 1006bd0:	jl     0x1006c3d
 1006bd2:	add    BYTE PTR [rax],al
 1006bd4:	and    DWORD PTR [rax],eax
 1006bd6:	add    BYTE PTR [rax],al
 1006bd8:	mov    al,0x5f
 1006bda:	add    BYTE PTR [rax],al
 1006bdc:	fstp   DWORD PTR [rdi+0x0]
 1006bdf:	add    BYTE PTR [rbx+rbp*2+0x0],bh
 1006be3:	add    BYTE PTR [rcx],al
 1006be5:	(bad)  
 1006be6:	or     al,BYTE PTR [rax]
 1006be8:	(bad)  
 1006be9:	xor    al,0x19
 1006beb:	add    BYTE PTR [rsi],dl
 1006bed:	rcl    BYTE PTR [rdx],cl
 1006bef:	lock adc al,ah
 1006bf2:	(bad)  
 1006bf3:	ror    BYTE PTR [rax+rax*8],1
 1006bf6:	or     dh,BYTE PTR [rax+0x9]
 1006bf9:	(bad)  
 1006bfa:	or     BYTE PTR [rax+0x1],dl
 1006bfd:	sbb    DWORD PTR [rdx],ecx
 1006bff:	add    BYTE PTR [rcx],bl
 1006c01:	je     0x1006c0c
 1006c03:	add    BYTE PTR [rcx],bl
 1006c05:	or     BYTE PTR fs:[rax],al
 1006c08:	sbb    DWORD PTR [rdi+rax*1+0x0],edx
 1006c0c:	sbb    DWORD PTR [rsi+rax*1],esi
 1006c0f:	add    BYTE PTR [rcx],bl
 1006c11:	xor    dl,BYTE PTR [rip+0x20601c0]        # 0x3066dd7
 1006c17:	add    BYTE PTR [rsi],al
 1006c19:	xor    al,BYTE PTR [rdx]
 1006c1b:	xor    BYTE PTR [rcx],al
 1006c1d:	add    al,0x1
 1006c1f:	add    BYTE PTR [rdx+rax*2],al
 1006c22:	add    BYTE PTR [rax],al
 1006c24:	add    DWORD PTR [rcx+rax*1],eax
 1006c27:	add    BYTE PTR [rdx+rax*2],al
 1006c2a:	add    BYTE PTR [rax],al
 1006c2c:	add    DWORD PTR [rdx],ecx
 1006c2e:	add    al,0x0
 1006c30:	or     dh,BYTE PTR [rsi+rax*1]
 1006c33:	add    BYTE PTR [rdx],cl
 1006c35:	xor    al,BYTE PTR [rsi]
 1006c37:	jo     0x1006c3a
 1006c39:	adc    al,BYTE PTR [rax+rax*1]
 1006c3c:	adc    dh,BYTE PTR [rdi+rax*1]
 1006c3f:	add    BYTE PTR [rdx],dl
 1006c41:	xor    cl,BYTE PTR [rsi]
 1006c43:	jo     0x1006c66
 1006c45:	add    eax,0x64050002
 1006c4a:	(bad)  
 1006c4b:	add    al,dl
 1006c4d:	cmp    al,BYTE PTR [rax]
 1006c4f:	add    ah,ah
 1006c51:	cmp    al,BYTE PTR [rax]
 1006c53:	add    BYTE PTR [rax],bh
 1006c55:	ins    BYTE PTR es:[rdi],dx
 1006c56:	add    BYTE PTR [rax],al
 1006c58:	and    DWORD PTR [rax],eax
 1006c5a:	add    BYTE PTR [rax],al
 1006c5c:	sar    BYTE PTR [rdx],1
 1006c5e:	add    BYTE PTR [rax],al
 1006c60:	in     al,0x3a
 1006c62:	add    BYTE PTR [rax],al
 1006c64:	cmp    BYTE PTR [rax+rax*1+0x0],ch
 1006c68:	and    DWORD PTR [rax],eax
 1006c6a:	add    al,BYTE PTR [rax]
 1006c6c:	add    BYTE PTR [rsi+rax*1+0x0],ah
 1006c70:	sar    BYTE PTR [rdx],1
 1006c72:	add    BYTE PTR [rax],al
 1006c74:	in     al,0x3a
 1006c76:	add    BYTE PTR [rax],al
 1006c78:	cmp    BYTE PTR [rax+rax*1+0x0],ch
 1006c7c:	sbb    DWORD PTR [rbx],ebx
 1006c7e:	add    eax,DWORD PTR [rax]
 1006c80:	or     DWORD PTR [rcx],eax
 1006c82:	(bad)  
 1006c83:	add    BYTE PTR [rdx],al
 1006c85:	xor    BYTE PTR [rax],al
 1006c87:	add    BYTE PTR [riz*2+0x6900000],al
 1006c8e:	add    BYTE PTR [rax],al
 1006c90:	sbb    DWORD PTR [rdi+rax*1],esp
 1006c93:	add    BYTE PTR [rdx],dl
 1006c95:	fs xchg esp,eax
 1006c97:	add    BYTE PTR [rdx],dl
 1006c99:	xor    al,0x93
 1006c9b:	add    BYTE PTR [rdx],dl
 1006c9d:	add    DWORD PTR [rax+0x700b00],edx
 1006ca3:	add    BYTE PTR [riz*2+0x4700000],al
 1006caa:	add    BYTE PTR [rax],al
 1006cac:	sbb    DWORD PTR [rbx+rcx*1],ebp
 1006caf:	add    BYTE PTR [rdx],bl
 1006cb1:	and    BYTE PTR fs:[rax],al
 1006cb4:	sbb    dh,BYTE PTR [rdi+rbx*1]
 1006cb7:	add    BYTE PTR [rdx],bl
 1006cb9:	add    DWORD PTR [rax],ebx
 1006cbb:	add    BYTE PTR [rbx],dl
 1006cbd:	lock adc eax,esp
 1006cc0:	(bad)  
 1006cc2:	or     eax,0x700bc0
 1006cc7:	add    ah,ah
 1006cc9:	movsxd eax,DWORD PTR [rax]
 1006ccb:	add    BYTE PTR [rcx],al
 1006ccd:	add    BYTE PTR [rax],al
 1006ccf:	add    BYTE PTR [rsi],dh
 1006cd1:	xor    al,0x0
 1006cd3:	add    BYTE PTR [rdi+0x50000037],al
 1006cd9:	add    BYTE PTR [eax],al
 1006cdc:	add    BYTE PTR [rax],al
 1006cde:	add    BYTE PTR [rax],al
 1006ce0:	mov    edx,0x1000000
 1006ce5:	(bad)  
 1006ce6:	add    eax,DWORD PTR [rax]
 1006ce8:	(bad)  
 1006ce9:	(bad)  
 1006ceb:	push   rax
 1006cec:	add    dh,BYTE PTR [rax]
 1006cee:	add    BYTE PTR [rax],al
 1006cf0:	add    DWORD PTR [rcx+rax*1],eax
 1006cf3:	add    BYTE PTR [rdx+rax*2],al
 1006cf6:	add    BYTE PTR [rax],al
 1006cf8:	add    DWORD PTR [rcx+rax*1],eax
 1006cfb:	add    BYTE PTR [rdx+riz*2],al
 1006cfe:	add    BYTE PTR [rax],al
 1006d00:	sbb    DWORD PTR [rcx+0x9],ebp
 1006d03:	add    BYTE PTR [rcx+0x34],ch
 1006d06:	and    al,BYTE PTR [rax+rbx*1]
 1006d09:	fs and al,0x4
 1006d0c:	sbb    BYTE PTR [rbx+riz*1+0x4],dl
 1006d10:	sbb    BYTE PTR [rcx],al
 1006d12:	and    BYTE PTR [rbx+rcx*1],al
 1006d15:	jo     0x1006d17
 1006d17:	add    BYTE PTR [riz*2+0x20f00000],al
 1006d1e:	add    BYTE PTR [rax],al
 1006d20:	sbb    DWORD PTR [rsi],ebp
 1006d22:	(bad)  
 1006d23:	add    BYTE PTR [rip+0x8042001],bl        # 0x9048d2a
 1006d29:	loopne 0x1006d31
 1006d2b:	rol    BYTE PTR [rax+riz*2],0x3
 1006d2f:	xor    BYTE PTR [rdx],al
 1006d31:	push   rax
 1006d32:	add    BYTE PTR [rax],al
 1006d34:	add    al,0x65
 1006d36:	add    BYTE PTR [rax],al
 1006d38:	lock and BYTE PTR [rax],al
 1006d3b:	add    BYTE PTR [rcx],ah
 1006d3d:	adc    al,0x4
 1006d3f:	add    BYTE PTR [rsp+rsi*8],dl
 1006d42:	sub    DWORD PTR [rax+rcx*1],eax
 1006d45:	je     0x1006d6f
 1006d47:	add    al,0x10
 1006d49:	sub    al,0x0
 1006d4b:	add    ch,dl
 1006d4d:	sub    al,0x0
 1006d4f:	add    BYTE PTR [rax],ah
 1006d51:	ins    DWORD PTR es:[rdi],dx
 1006d52:	add    BYTE PTR [rax],al
 1006d54:	and    DWORD PTR [rax],eax
 1006d56:	add    BYTE PTR [rax],al
 1006d58:	adc    BYTE PTR [rax+rax*1],ch
 1006d5b:	add    ch,dl
 1006d5d:	sub    al,0x0
 1006d5f:	add    BYTE PTR [rax],ah
 1006d61:	ins    DWORD PTR es:[rdi],dx
 1006d62:	add    BYTE PTR [rax],al
 1006d64:	and    DWORD PTR [rax],eax
 1006d66:	add    al,0x0
 1006d68:	add    ah,dh
 1006d6a:	sub    DWORD PTR [rax+rax*1],eax
 1006d6d:	je     0x1006d97
 1006d6f:	add    al,0x10
 1006d71:	sub    al,0x0
 1006d73:	add    ch,dl
 1006d75:	sub    al,0x0
 1006d77:	add    BYTE PTR [rax],ah
 1006d79:	ins    DWORD PTR es:[rdi],dx
 1006d7a:	add    BYTE PTR [rax],al
 1006d7c:	and    DWORD PTR [rax],eax
 1006d7e:	add    BYTE PTR [rax],al
 1006d80:	adc    BYTE PTR [rax+rax*1],ch
 1006d83:	add    ch,dl
 1006d85:	sub    al,0x0
 1006d87:	add    BYTE PTR [rax],ah
 1006d89:	ins    DWORD PTR es:[rdi],dx
 1006d8a:	add    BYTE PTR [rax],al
 1006d8c:	adc    DWORD PTR [rax],ebx
 1006d8e:	(bad)  
 1006d8f:	add    BYTE PTR [rax],bl
 1006d91:	or     eax,DWORD PTR fs:[rax]
 1006d94:	adc    al,0x34
 1006d96:	or     al,BYTE PTR [rax]
 1006d98:	or     BYTE PTR [rdx+0x4],dl
 1006d9b:	jo     0x1006dc5
 1006d9d:	add    BYTE PTR gs:[rax],al
 1006da0:	movabs al,ds:0xc0ffffffff00001f
 1006da9:	data16 add BYTE PTR [rax],al
 1006dac:	add    BYTE PTR [rax],al
 1006dae:	add    BYTE PTR [rax],al
 1006db0:	shl    BYTE PTR [rsi+0x0],1
 1006db3:	add    al,ah
 1006db5:	sub    al,BYTE PTR [rax]
 1006db7:	add    bh,bh
 1006db9:	(bad)  
 1006dba:	(bad)  
 1006dbb:	inc    DWORD PTR [rax]
 1006dbd:	sub    eax,DWORD PTR [rax]
 1006dbf:	add    BYTE PTR [rax],al
 1006dc1:	add    BYTE PTR [rax],al
 1006dc3:	add    BYTE PTR [rax],cl
 1006dc5:	sub    eax,DWORD PTR [rax]
 1006dc7:	add    BYTE PTR [rcx],al
 1006dc9:	add    BYTE PTR [rax],al
 1006dcb:	add    BYTE PTR [rbx],bl
 1006dcd:	sub    eax,DWORD PTR [rax]
 1006dcf:	add    BYTE PTR [rax],al
 1006dd1:	add    BYTE PTR [rax],al
 1006dd3:	add    BYTE PTR [rdi],ah
 1006dd5:	sub    eax,DWORD PTR [rax]
 1006dd7:	add    bh,bh
 1006dd9:	(bad)  
 1006dda:	(bad)  
 1006ddb:	(bad)  
 1006ddc:	cmp    DWORD PTR [rbx],ebp
 1006dde:	add    BYTE PTR [rax],al
 1006de0:	add    DWORD PTR [rax],eax
 1006de2:	add    BYTE PTR [rax],al
 1006de4:	sahf   
 1006de5:	sub    eax,DWORD PTR [rax]
 1006de7:	add    BYTE PTR [rax],al
 1006de9:	add    BYTE PTR [rax],al
 1006deb:	add    BYTE PTR [rax-0xffffd5],ch
 1006df1:	(bad)  
 1006df2:	(bad)  
 1006df3:	push   QWORD PTR [rbp+0x100002b]
 1006df9:	add    BYTE PTR [rax],al
 1006dfb:	add    cl,bl
 1006dfd:	sub    eax,DWORD PTR [rax]
 1006dff:	add    BYTE PTR [rax],al
 1006e01:	add    BYTE PTR [rax],al
 1006e03:	add    bl,ah
 1006e05:	sub    eax,DWORD PTR [rax]
 1006e07:	add    bh,bh
 1006e09:	(bad)  
 1006e0a:	(bad)  
 1006e0b:	call   QWORD PTR [rcx]
 1006e0d:	sbb    ecx,DWORD PTR [rax]
 1006e0f:	add    BYTE PTR [rbx],bl
 1006e11:	push   rsp
 1006e12:	adc    eax,DWORD PTR [rax]
 1006e14:	(bad)  
 1006e15:	xor    al,0x12
 1006e17:	add    BYTE PTR [rbx],cl
 1006e19:	rol    BYTE PTR [rdi],cl
 1006e1b:	loopne 0x1006e22
 1006e1d:	jo     0x1006e23
 1006e1f:	(bad)  
 1006e20:	sub    BYTE PTR [rbp+0x0],ah
 1006e23:	add    al,cl
 1006e25:	(bad)  
 1006e26:	add    BYTE PTR [rax],al
 1006e28:	(bad)  
 1006e29:	(bad)  
 1006e2a:	(bad)  
 1006e2b:	push   rax
 1006e2d:	data16 add BYTE PTR [rax],al
 1006e30:	rex sub DWORD PTR [rax],eax
 1006e33:	add    bh,bh
 1006e35:	(bad)  
 1006e36:	(bad)  
 1006e37:	dec    DWORD PTR [rbx+0x29]
 1006e3d:	add    BYTE PTR [rax],al
 1006e3f:	add    BYTE PTR [rax-0xffffd7],dl
 1006e45:	(bad)  
 1006e46:	(bad)  
 1006e47:	jmp    QWORD PTR [rdx+0x29]
 1006e4d:	add    BYTE PTR [rax],al
 1006e4f:	add    cl,ch
 1006e51:	sub    DWORD PTR [rax],eax
 1006e53:	add    bh,bh
 1006e55:	(bad)  
 1006e56:	(bad)  
 1006e57:	(bad)  
 1006e58:	cld    
 1006e59:	sub    DWORD PTR [rax],eax
 1006e5b:	add    BYTE PTR [rax],al
 1006e5d:	add    BYTE PTR [rax],al
 1006e5f:	add    BYTE PTR [rdx+rbp*1+0x0],cl
 1006e63:	add    bh,bh
 1006e65:	(bad)  
 1006e66:	(bad)  
 1006e67:	call   FWORD PTR [rcx+0x2a]
 1006e6a:	add    BYTE PTR [rax],al
 1006e6c:	add    BYTE PTR [rax],al
 1006e6e:	add    BYTE PTR [rax],al
 1006e70:	jg     0x1006e9c
 1006e72:	add    BYTE PTR [rax],al
 1006e74:	(bad)  
 1006e75:	(bad)  
 1006e76:	(bad)  
 1006e77:	dec    DWORD PTR [rdi+0x2a]
 1006e7d:	add    BYTE PTR [rax],al
 1006e7f:	add    BYTE PTR [rax-0xffffd6],dh
 1006e85:	(bad)  
 1006e86:	(bad)  
 1006e87:	call   FWORD PTR [rcx]
 1006e89:	jle    0x1006e8f
 1006e8b:	add    BYTE PTR [rsi+0x74],bh
 1006e8e:	nop
 1006e8f:	add    BYTE PTR [rdi],al
 1006e91:	add    DWORD PTR [rcx+0x650400],edx
 1006e97:	add    BYTE PTR [rax+0x4],dh
 1006e9a:	add    BYTE PTR [rax],al
 1006e9c:	and    DWORD PTR [rax],ecx
 1006e9e:	add    al,BYTE PTR [rax]
 1006ea0:	or     BYTE PTR [rdx+rdx*4],dh
 1006ea3:	add    BYTE PTR [rax-0x60ffffd9],ah
 1006ea9:	sub    BYTE PTR [rax],al
 1006eab:	add    BYTE PTR [rax+0x2100006e],cl
 1006eb1:	add    BYTE PTR [rax],al
 1006eb3:	add    BYTE PTR [rax-0x60ffffd9],ah
 1006eb9:	sub    BYTE PTR [rax],al
 1006ebb:	add    BYTE PTR [rax+0x1900006e],cl
 1006ec1:	xor    al,0xb
 1006ec3:	add    BYTE PTR [rsi],ah
 1006ec5:	sub    DWORD PTR fs:[rax],eax
 1006ec8:	and    dh,BYTE PTR [rax+rbp*1]
 1006ecb:	add    BYTE PTR [rsi],dl
 1006ecd:	add    DWORD PTR [rax],esp
 1006ecf:	add    BYTE PTR [rbx],cl
 1006ed1:	lock or eax,esp
 1006ed4:	(bad)  
 1006ed5:	rol    BYTE PTR [rip+0x500470],0x0        # 0x150734c
 1006edc:	xor    al,0x65
 1006ede:	add    BYTE PTR [rax],al
 1006ee0:	lock (bad) 
 1006ee2:	add    BYTE PTR [rax],al
 1006ee4:	repnz add BYTE PTR [rax],al
 1006ee7:	add    bh,bh
 1006ee9:	(bad)  
 1006eea:	(bad)  
 1006eeb:	call   QWORD PTR [rax]
 1006eed:	add    BYTE PTR [eax],al
 1006ef0:	add    BYTE PTR [rax],al
 1006ef2:	add    BYTE PTR [rax],al
 1006ef4:	and    BYTE PTR [rdi+0x0],ah
 1006ef7:	add    BYTE PTR [rcx],al
 1006ef9:	add    BYTE PTR [rax],al
 1006efb:	add    BYTE PTR [rax],dh
 1006efd:	add    BYTE PTR [eax],al
 1006f00:	add    BYTE PTR [rbx],ah
 1006f02:	add    BYTE PTR [rax],al
 1006f04:	(bad)  
 1006f05:	(bad)  
 1006f06:	(bad)  
 1006f07:	inc    DWORD PTR [rdx+0x23]
 1006f0a:	add    BYTE PTR [rax],al
 1006f0c:	add    BYTE PTR [rax],al
 1006f0e:	add    BYTE PTR [rax],al
 1006f10:	jae    0x1006f35
 1006f12:	add    BYTE PTR [rax],al
 1006f14:	(bad)  
 1006f15:	(bad)  
 1006f16:	(bad)  
 1006f17:	dec    DWORD PTR [rdx+0x23]
 1006f1d:	add    BYTE PTR [rax],al
 1006f1f:	add    BYTE PTR [rdx-0xffffdd],dh
 1006f25:	(bad)  
 1006f26:	(bad)  
 1006f27:	dec    esp
 1006f29:	and    eax,DWORD PTR [rax]
 1006f2b:	add    BYTE PTR [rax],al
 1006f2d:	add    BYTE PTR [rax],al
 1006f2f:	add    ah,ch
 1006f31:	and    eax,DWORD PTR [rax]
 1006f33:	add    bh,bh
 1006f35:	(bad)  
 1006f36:	(bad)  
 1006f37:	(bad)  
 1006f38:	out    dx,al
 1006f39:	and    eax,DWORD PTR [rax]
 1006f3b:	add    BYTE PTR [rax],al
 1006f3d:	add    BYTE PTR [rax],al
 1006f3f:	add    ch,dh
 1006f41:	and    eax,DWORD PTR [rax]
 1006f43:	add    BYTE PTR [rcx],al
 1006f45:	add    BYTE PTR [rax],al
 1006f47:	add    BYTE PTR [rax],ch
 1006f49:	and    al,0x0
 1006f4b:	add    BYTE PTR [rax],al
 1006f4d:	add    BYTE PTR [rax],al
 1006f4f:	add    BYTE PTR [rcx],dh
 1006f51:	and    al,0x0
 1006f53:	add    bh,bh
 1006f55:	(bad)  
 1006f56:	(bad)  
 1006f57:	dec    DWORD PTR [rbx+0x24]
 1006f5a:	add    BYTE PTR [rax],al
 1006f5c:	add    DWORD PTR [rax],eax
 1006f5e:	add    BYTE PTR [rax],al
 1006f60:	mov    WORD PTR [rax+rax*1],fs
 1006f63:	add    BYTE PTR [rax],al
 1006f65:	add    BYTE PTR [rax],al
 1006f67:	add    BYTE PTR [rsi-0xffffdc],dl
 1006f6d:	(bad)  
 1006f6e:	(bad)  
 1006f6f:	jmp    FWORD PTR [rbp+0x1000024]
 1006f75:	add    BYTE PTR [rax],al
 1006f77:	add    cl,bl
 1006f79:	and    al,0x0
 1006f7b:	add    BYTE PTR [rax],al
 1006f7d:	add    BYTE PTR [rax],al
 1006f7f:	add    bl,ah
 1006f81:	and    al,0x0
 1006f83:	add    bh,bh
 1006f85:	(bad)  
 1006f86:	(bad)  
 1006f87:	jmp    rbp
 1006f89:	and    al,0x0
 1006f8b:	add    BYTE PTR [rcx],al
 1006f8d:	add    BYTE PTR [rax],al
 1006f8f:	add    BYTE PTR [rdx],ch
 1006f91:	and    eax,0x0
 1006f96:	add    BYTE PTR [rax],al
 1006f98:	xor    al,0x25
 1006f9a:	add    BYTE PTR [rax],al
 1006f9c:	(bad)  
 1006f9d:	(bad)  
 1006f9e:	(bad)  
 1006f9f:	(bad)  
 1006fa0:	cmp    DWORD PTR [rip+0x10000],esp        # 0x1016fa6
 1006fa6:	add    BYTE PTR [rax],al
 1006fa8:	xchg   DWORD PTR [rip+0x0],esp        # 0x1006fae
 1006fae:	add    BYTE PTR [rax],al
 1006fb0:	xchg   ecx,eax
 1006fb1:	and    eax,0xffff0000
 1006fb6:	(bad)  
 1006fb7:	call   QWORD PTR [rsi+0x1000025]
 1006fbd:	add    BYTE PTR [rax],al
 1006fbf:	add    BYTE PTR [rsi+0x25],dh
 1006fc5:	add    BYTE PTR [rax],al
 1006fc7:	add    al,al
 1006fc9:	and    eax,0xffff0000
 1006fce:	(bad)  
 1006fcf:	inc    ebp
 1006fd1:	and    eax,0x10000
 1006fd6:	add    BYTE PTR [rax],al
 1006fd8:	int3   
 1006fd9:	and    eax,0x20000
 1006fde:	add    BYTE PTR [rax],al
 1006fe0:	jmp    QWORD PTR [rip+0x10000]        # 0x1016fe6
 1006fe6:	add    BYTE PTR [rax],al
 1006fe8:	or     BYTE PTR [rsi],ah
 1006fea:	add    BYTE PTR [rax],al
 1006fec:	add    BYTE PTR [rax],al
 1006fee:	add    BYTE PTR [rax],al
 1006ff0:	adc    ah,BYTE PTR [rsi]
 1006ff2:	add    BYTE PTR [rax],al
 1006ff4:	(bad)  
 1006ff5:	(bad)  
 1006ff6:	(bad)  
 1006ff7:	call   QWORD PTR [rdi]
 1006ff9:	add    BYTE PTR es:[rax],al
 1006ffc:	add    al,BYTE PTR [rax]
 1006ffe:	add    BYTE PTR [rax],al
 1007000:	pop    rax
 1007001:	add    BYTE PTR es:[rax],al
 1007004:	add    DWORD PTR [rax],eax
 1007006:	add    BYTE PTR [rax],al
 1007008:	(bad)  
 1007009:	add    BYTE PTR es:[rax],al
 100700c:	add    BYTE PTR [rax],al
 100700e:	add    BYTE PTR [rax],al
 1007010:	ins    BYTE PTR es:[rdi],dx
 1007011:	add    BYTE PTR es:[rax],al
 1007014:	(bad)  
 1007015:	(bad)  
 1007016:	(bad)  
 1007017:	inc    DWORD PTR [rbx+0x2000026]
 100701d:	add    BYTE PTR [rax],al
 100701f:	add    BYTE PTR [rdi+0x1000026],ch
 1007025:	add    BYTE PTR [rax],al
 1007027:	add    BYTE PTR [rcx+0x26],bh
 100702d:	add    BYTE PTR [rax],al
 100702f:	add    bl,al
 1007031:	add    BYTE PTR es:[rax],al
 1007034:	(bad)  
 1007035:	(bad)  
 1007036:	(bad)  
 1007037:	inc    ebp
 1007039:	add    BYTE PTR es:[rax],al
 100703c:	add    al,BYTE PTR [rax]
 100703e:	add    BYTE PTR [rax],al
 1007040:	or     DWORD PTR [rdi],esp
 1007042:	add    BYTE PTR [rax],al
 1007044:	add    DWORD PTR [rax],eax
 1007046:	add    BYTE PTR [rax],al
 1007048:	adc    esp,DWORD PTR [rdi]
 100704a:	add    BYTE PTR [rax],al
 100704c:	add    BYTE PTR [rax],al
 100704e:	add    BYTE PTR [rax],al
 1007050:	sbb    eax,0xff000027
 1007055:	(bad)  
 1007056:	(bad)  
 1007057:	jmp    QWORD PTR [rdx]
 1007059:	(bad)  
 100705a:	add    BYTE PTR [rax],al
 100705c:	add    al,BYTE PTR [rax]
 100705e:	add    BYTE PTR [rax],al
 1007060:	rex.WB (bad) 
 1007062:	add    BYTE PTR [rax],al
 1007064:	add    DWORD PTR [rax],eax
 1007066:	add    BYTE PTR [rax],al
 1007068:	push   rbx
 1007069:	(bad)  
 100706a:	add    BYTE PTR [rax],al
 100706c:	add    BYTE PTR [rax],al
 100706e:	add    BYTE PTR [rax],al
 1007070:	pop    rbp
 1007071:	(bad)  
 1007072:	add    BYTE PTR [rax],al
 1007074:	(bad)  
 1007075:	(bad)  
 1007076:	(bad)  
 1007077:	call   FWORD PTR [rcx]
 1007079:	cs add al,0x0
 100707c:	sbb    al,0x1
 100707e:	adc    eax,DWORD PTR [rcx]
 1007080:	adc    eax,0x4301450
 1007085:	add    BYTE PTR gs:[rax],al
 1007088:	jo     0x1007092
 100708a:	add    BYTE PTR [rax],al
 100708c:	and    DWORD PTR [rax],ecx
 100708e:	add    al,0x0
 1007090:	or     ah,ah
 1007092:	adc    BYTE PTR [rcx],al
 1007094:	add    al,0x74
 1007096:	adc    DWORD PTR [rcx],eax
 1007098:	(bad)  
 1007099:	and    DWORD PTR [rax],eax
 100709b:	add    BYTE PTR [rsi+0x78000021],cl
 10070a1:	jo     0x10070a3
 10070a3:	add    BYTE PTR [rcx],ah
 10070a5:	or     BYTE PTR [rdx],al
 10070a7:	add    BYTE PTR [rax],cl
 10070a9:	adc    al,BYTE PTR fs:[rcx]
 10070ac:	mov    fs,WORD PTR [rcx]
 10070ae:	add    BYTE PTR [rax],al
 10070b0:	cmp    ah,BYTE PTR [rdx]
 10070b2:	add    BYTE PTR [rax],al
 10070b4:	mov    WORD PTR [rax+0x0],?
 10070b7:	add    BYTE PTR [rcx],ah
 10070b9:	add    BYTE PTR [rax],al
 10070bb:	add    BYTE PTR [rsi+0x3a000021],cl
 10070c1:	and    al,BYTE PTR [rax]
 10070c3:	add    BYTE PTR [rax+rsi*2+0x210000],cl
 10070ca:	add    BYTE PTR [rax],al
 10070cc:	(bad)  
 10070cd:	and    DWORD PTR [rax],eax
 10070cf:	add    BYTE PTR [rsi+0x78000021],cl
 10070d5:	jo     0x10070d7
 10070d7:	add    BYTE PTR [rcx],al
 10070d9:	adc    BYTE PTR [rbx],al
 10070db:	add    BYTE PTR [rax],dl
 10070dd:	rex.X or al,0x60
 10070e0:	or     esi,DWORD PTR [rax]
 10070e2:	add    BYTE PTR [rax],al
 10070e4:	and    DWORD PTR [rip+0x74050002],eax        # 0x750570ec
 10070ea:	add    al,0x0
 10070ec:	shl    BYTE PTR [rax],1
 10070ee:	add    BYTE PTR [rax],al
 10070f0:	(bad)  
 10070f1:	and    BYTE PTR [rax],al
 10070f3:	add    al,bl
 10070f5:	jo     0x10070f7
 10070f7:	add    BYTE PTR [rcx],ah
 10070f9:	add    BYTE PTR [rdx],al
 10070fb:	add    BYTE PTR [rax],al
 10070fd:	je     0x1007103
 10070ff:	add    al,dl
 1007101:	and    BYTE PTR [rax],al
 1007103:	add    dh,bh
 1007105:	and    BYTE PTR [rax],al
 1007107:	add    al,bl
 1007109:	jo     0x100710b
 100710b:	add    BYTE PTR [rcx],ah
 100710d:	add    BYTE PTR [rax],al
 100710f:	add    al,dl
 1007111:	and    BYTE PTR [rax],al
 1007113:	add    dh,bh
 1007115:	and    BYTE PTR [rax],al
 1007117:	add    al,bl
 1007119:	jo     0x100711b
 100711b:	add    BYTE PTR [rcx],al
 100711d:	sbb    DWORD PTR [rdx],ecx
 100711f:	add    BYTE PTR [rcx],bl
 1007121:	je     0x100712c
 1007123:	add    BYTE PTR [rcx],bl
 1007125:	or     BYTE PTR fs:[rax],al
 1007128:	sbb    DWORD PTR [rdi+rax*1+0x0],edx
 100712c:	sbb    DWORD PTR [rsi+rax*1],esi
 100712f:	add    BYTE PTR [rcx],bl
 1007131:	xor    dl,BYTE PTR [rip+0xc0]        # 0x10071f7
 1007137:	add    BYTE PTR [rcx],al
 1007139:	add    al,0x1
 100713b:	add    BYTE PTR [rdx+rdx*1],al
 100713e:	add    BYTE PTR [rax],al
 1007140:	add    DWORD PTR [rax],eax
 1007142:	add    BYTE PTR [rax],al
 1007144:	and    BYTE PTR [rax+rax*1],dl
 1007147:	add    BYTE PTR [rax-0x79],dl
 100714a:	add    BYTE PTR [rax],al
 100714c:	(bad)  
 100714d:	add    DWORD PTR [rax],0x718000
 1007153:	add    BYTE PTR [rax+0x72],cl
	...
 100717e:	add    BYTE PTR [rax],al
 1007180:	shl    BYTE PTR [rcx+0x0],1
 1007183:	add    BYTE PTR [rax],al
 1007185:	add    BYTE PTR [rax],al
 1007187:	add    dl,ch
 1007189:	jno    0x100718b
 100718b:	add    BYTE PTR [rax],al
 100718d:	add    BYTE PTR [rax],al
 100718f:	add    BYTE PTR [rax],al
 1007191:	jb     0x1007193
 1007193:	add    BYTE PTR [rax],al
 1007195:	add    BYTE PTR [rax],al
 1007197:	add    BYTE PTR [rax],bl
 1007199:	jb     0x100719b
 100719b:	add    BYTE PTR [rax],al
 100719d:	add    BYTE PTR [rax],al
 100719f:	add    BYTE PTR [rdx],dh
 10071a1:	jb     0x10071a3
 10071a3:	add    BYTE PTR [rax],al
 10071a5:	add    BYTE PTR [rax],al
 10071a7:	add    BYTE PTR [rax+0x71],bh
	...
 10071b9:	add    BYTE PTR [rdi+0x65],al
 10071bc:	je     0x1007207
 10071be:	outs   dx,BYTE PTR ds:[rsi]
 10071bf:	jae    0x1007235
 10071c1:	(bad)  
 10071c2:	outs   dx,BYTE PTR ds:[rsi]
 10071c3:	movsxd esp,DWORD PTR [rbp+0x4e]
 10071c6:	(bad)  
 10071c7:	ins    DWORD PTR es:[rdi],dx
 10071c8:	gs rex.RX jb 0x100723b
 10071cc:	ins    DWORD PTR es:[rdi],dx
 10071cd:	rex.WB
 10071ce:	add    BYTE PTR [rax],r8b
 10071d1:	add    BYTE PTR [rdi+0x65],al
 10071d4:	je     0x100721f
 10071d6:	outs   dx,BYTE PTR ds:[rsi]
 10071d7:	jae    0x100724d
 10071d9:	push   rdx
 10071da:	outs   dx,DWORD PTR ds:[rsi]
 10071db:	outs   dx,DWORD PTR ds:[rsi]
 10071dc:	je     0x1007230
 10071de:	gs addr32 push rax
 10071e1:	(bad)  
 10071e2:	je     0x100724c
 10071e4:	rex.X jns 0x1007230
 10071e7:	add    BYTE PTR [rax+0x0],r14b
 10071eb:	add    BYTE PTR [rdi+0x65],al
 10071ee:	je     0x1007242
 10071f0:	gs addr32 rex.WXB
 10071f3:	gs jns 0x1007237
 10071f6:	movsxd esp,DWORD PTR [rbx+0x65]
 10071f9:	jae    0x100726e
 10071fb:	rex.WRB (bad) 
 10071fd:	jae    0x100726a
 10071ff:	add    BYTE PTR [rax],al
 1007201:	add    BYTE PTR [rdi+0x65],al
 1007204:	je     0x1007259
 1007206:	push   rcx
 1007207:	rex.WR
 1007208:	rex.X imul ebp,DWORD PTR [rsi+0x50],0x42687461
 1007210:	jns    0x100725b
 1007212:	outs   dx,BYTE PTR ds:[rsi]
 1007213:	jae    0x1007289
 1007215:	rex.WB
 1007216:	add    BYTE PTR [rax],r8b
 1007219:	add    BYTE PTR [rdi+0x65],al
 100721c:	je     0x1007271
 100721e:	push   rcx
 100721f:	rex.WR
 1007220:	rex.R (bad) 
 1007222:	je     0x1007285
 1007224:	push   rdx
 1007225:	outs   dx,DWORD PTR ds:[rsi]
 1007226:	outs   dx,DWORD PTR ds:[rsi]
 1007227:	je     0x100726b
 1007229:	jns    0x1007274
 100722b:	outs   dx,BYTE PTR ds:[rsi]
 100722c:	jae    0x10072a2
 100722e:	rex.WB
 100722f:	add    BYTE PTR [rax+0x0],r14b
 1007233:	add    BYTE PTR [rcx+0x73],cl
 1007236:	rex.R
 1007237:	gs data16 (bad) 
 100723a:	jne    0x10072a8
 100723c:	je     0x1007287
 100723e:	outs   dx,BYTE PTR ds:[rsi]
 100723f:	jae    0x10072b5
 1007241:	(bad)  
 1007242:	outs   dx,BYTE PTR ds:[rsi]
 1007243:	movsxd esp,DWORD PTR [rbp+0x49]
 1007246:	add    BYTE PTR [rax],r8b
	...
 100727d:	add    BYTE PTR [rax],al
 100727f:	add    al,bh
 1007281:	jb     0x1007283
	...
 100728b:	add    al,dl
 100728d:	js     0x100728f
 100728f:	add    BYTE PTR [rax],al
 1007291:	adc    BYTE PTR [rax],al
 1007293:	add    al,dl
 1007295:	jae    0x1007297
	...
 100729f:	add    BYTE PTR [rdx+0x7a],ah
 10072a2:	add    BYTE PTR [rax],al
 10072a4:	fcom   DWORD PTR [rax]
 10072a6:	add    BYTE PTR [rax],al
 10072a8:	xor    BYTE PTR [rbp+0x0],0x0
	...
 10072b4:	mov    edx,0x8800007b
 10072b9:	adc    al,BYTE PTR [rax]
 10072bb:	add    BYTE PTR [rax+0x76],bh
	...
 10072c6:	add    BYTE PTR [rax],al
 10072c8:	adc    BYTE PTR [rax+rax*1+0x0],bh
 10072cc:	adc    BYTE PTR [rbx],0x0
 10072cf:	add    BYTE PTR [rax+0x76],ch
	...
 10072da:	add    BYTE PTR [rax],al
 10072dc:	xor    BYTE PTR [rax+rax*1+0x0],bh
 10072e0:	jo     0x10072f5
	...
 10072f6:	add    BYTE PTR [rax],al
 10072f8:	nop
 10072f9:	jbe    0x10072fb
 10072fb:	add    BYTE PTR [rax],al
 10072fd:	add    BYTE PTR [rax],al
 10072ff:	add    BYTE PTR [rsi+rsi*2+0x0],ah
 1007306:	add    BYTE PTR [rax],al
 1007308:	ret    0x76
 100730b:	add    BYTE PTR [rax],al
 100730d:	add    BYTE PTR [rax],al
 100730f:	add    al,bl
 1007311:	jbe    0x1007313
 1007313:	add    BYTE PTR [rax],al
 1007315:	add    BYTE PTR [rax],al
 1007317:	add    ah,ch
 1007319:	jbe    0x100731b
 100731b:	add    BYTE PTR [rax],al
 100731d:	add    BYTE PTR [rax],al
 100731f:	add    BYTE PTR [rdi+rsi*2],cl
 1007322:	add    BYTE PTR [rax],al
 1007324:	add    BYTE PTR [rax],al
 1007326:	add    BYTE PTR [rax],al
 1007328:	sbb    BYTE PTR [rdi+0x0],dh
 100732b:	add    BYTE PTR [rax],al
 100732d:	add    BYTE PTR [rax],al
 100732f:	add    BYTE PTR [rdi+rsi*2],ch
 1007332:	add    BYTE PTR [rax],al
 1007334:	add    BYTE PTR [rax],al
 1007336:	add    BYTE PTR [rax],al
 1007338:	rex.WR ja 0x100733b
 100733b:	add    BYTE PTR [rax],al
 100733d:	add    BYTE PTR [rax],al
 100733f:	add    BYTE PTR [rsi+0x77],ah
 1007342:	add    BYTE PTR [rax],al
 1007344:	add    BYTE PTR [rax],al
 1007346:	add    BYTE PTR [rax],al
 1007348:	jp     0x10073c1
 100734a:	add    BYTE PTR [rax],al
 100734c:	add    BYTE PTR [rax],al
 100734e:	add    BYTE PTR [rax],al
 1007350:	xchg   esi,eax
 1007351:	ja     0x1007353
 1007353:	add    BYTE PTR [rax],al
 1007355:	add    BYTE PTR [rax],al
 1007357:	add    BYTE PTR [rax+0x77],ah
 100735d:	add    BYTE PTR [rax],al
 100735f:	add    BYTE PTR [rsi+0x77],bh
 1007365:	add    BYTE PTR [rax],al
 1007367:	add    dl,dl
 1007369:	ja     0x100736b
 100736b:	add    BYTE PTR [rax],al
 100736d:	add    BYTE PTR [rax],al
 100736f:	add    dl,ah
 1007371:	ja     0x1007373
 1007373:	add    BYTE PTR [rax],al
 1007375:	add    BYTE PTR [rax],al
 1007377:	add    dh,dh
 1007379:	ja     0x100737b
 100737b:	add    BYTE PTR [rax],al
 100737d:	add    BYTE PTR [rax],al
 100737f:	add    BYTE PTR [rax+rdi*2],cl
 1007382:	add    BYTE PTR [rax],al
 1007384:	add    BYTE PTR [rax],al
 1007386:	add    BYTE PTR [rax],al
 1007388:	rex.R js 0x100738b
 100738b:	add    BYTE PTR [rax],al
 100738d:	add    BYTE PTR [rax],al
 100738f:	add    BYTE PTR [rax+rdi*2+0x0],dl
 1007393:	add    BYTE PTR [rax],al
 1007395:	add    BYTE PTR [rax],al
 1007397:	add    BYTE PTR [rsi+0x78],bl
 100739a:	add    BYTE PTR [rax],al
 100739c:	add    BYTE PTR [rax],al
 100739e:	add    BYTE PTR [rax],al
 10073a0:	jl     0x100741a
 10073a2:	add    BYTE PTR [rax],al
 10073a4:	add    BYTE PTR [rax],al
 10073a6:	add    BYTE PTR [rax],al
 10073a8:	mov    WORD PTR [rax+0x0],?
 10073ab:	add    BYTE PTR [rax],al
 10073ad:	add    BYTE PTR [rax],al
 10073af:	add    BYTE PTR [rsi+0x78],ah
 10073b5:	add    BYTE PTR [rax],al
 10073b7:	add    BYTE PTR [rax+rdi*2+0x0],dh
 10073be:	add    BYTE PTR [rax],al
 10073c0:	cmp    al,0x7c
	...
 10073ce:	add    BYTE PTR [rax],al
 10073d0:	jo     0x1007450
 10073d2:	add    BYTE PTR [rax],al
 10073d4:	add    BYTE PTR [rax],al
 10073d6:	add    BYTE PTR [rax],al
 10073d8:	push   rdx
 10073d9:	jp     0x10073db
 10073db:	add    BYTE PTR [rax],al
 10073dd:	add    BYTE PTR [rax],al
 10073df:	add    BYTE PTR [rsi+0x7e],al
 10073e2:	add    BYTE PTR [rax],al
 10073e4:	add    BYTE PTR [rax],al
 10073e6:	add    BYTE PTR [rax],al
 10073e8:	sub    bh,BYTE PTR [rsi+0x0]
 10073eb:	add    BYTE PTR [rax],al
 10073ed:	add    BYTE PTR [rax],al
 10073ef:	add    BYTE PTR [rsi+rdi*2],dl
 10073f2:	add    BYTE PTR [rax],al
 10073f4:	add    BYTE PTR [rax],al
 10073f6:	add    BYTE PTR [rax],al
 10073f8:	(bad)  
 10073f9:	jle    0x10073fb
 10073fb:	add    BYTE PTR [rax],al
 10073fd:	add    BYTE PTR [rax],al
 10073ff:	add    dh,dh
 1007401:	jge    0x1007403
 1007403:	add    BYTE PTR [rax],al
 1007405:	add    BYTE PTR [rax],al
 1007407:	add    dh,ah
 1007409:	jge    0x100740b
 100740b:	add    BYTE PTR [rax],al
 100740d:	add    BYTE PTR [rax],al
 100740f:	add    dl,bl
 1007411:	jge    0x1007413
 1007413:	add    BYTE PTR [rax],al
 1007415:	add    BYTE PTR [rax],al
 1007417:	add    ah,cl
 1007419:	jge    0x100741b
 100741b:	add    BYTE PTR [rax],al
 100741d:	add    BYTE PTR [rax],al
 100741f:	add    BYTE PTR [rdx+0x7d],bh
 1007425:	add    BYTE PTR [rax],al
 1007427:	add    BYTE PTR [rax+0x7d],ah
 100742d:	add    BYTE PTR [rax],al
 100742f:	add    BYTE PTR [rsi+0x7d],al
 1007435:	add    BYTE PTR [rax],al
 1007437:	add    BYTE PTR [rbp+rdi*2+0x0],ch
 100743b:	add    BYTE PTR [rax],al
 100743d:	add    BYTE PTR [rax],al
 100743f:	add    BYTE PTR [rsi+0x7d],dl
 1007442:	add    BYTE PTR [rax],al
 1007444:	add    BYTE PTR [rax],al
 1007446:	add    BYTE PTR [rax],al
 1007448:	jle    0x10074c8
 100744a:	add    BYTE PTR [rax],al
 100744c:	add    BYTE PTR [rax],al
 100744e:	add    BYTE PTR [rax],al
 1007450:	rex jge 0x1007453
 1007453:	add    BYTE PTR [rax],al
 1007455:	add    BYTE PTR [rax],al
 1007457:	add    BYTE PTR [rax],dh
 1007459:	jge    0x100745b
 100745b:	add    BYTE PTR [rax],al
 100745d:	add    BYTE PTR [rax],al
 100745f:	add    BYTE PTR [rsi],dl
 1007461:	jge    0x1007463
 1007463:	add    BYTE PTR [rax],al
 1007465:	add    BYTE PTR [rax],al
 1007467:	add    BYTE PTR [rsi],al
 1007469:	jge    0x100746b
 100746b:	add    BYTE PTR [rax],al
 100746d:	add    BYTE PTR [rax],al
 100746f:	add    dl,dh
 1007471:	jl     0x1007473
 1007473:	add    BYTE PTR [rax],al
 1007475:	add    BYTE PTR [rax],al
 1007477:	add    al,bl
 1007479:	jl     0x100747b
 100747b:	add    BYTE PTR [rax],al
 100747d:	add    BYTE PTR [rax],al
 100747f:	add    ah,al
 1007481:	jl     0x1007483
 1007483:	add    BYTE PTR [rax],al
 1007485:	add    BYTE PTR [rax],al
 1007487:	add    BYTE PTR [rax+0x7c],dh
 100748d:	add    BYTE PTR [rax],al
 100748f:	add    BYTE PTR [rdx+0x7c],dl
 1007495:	add    BYTE PTR [rax],al
 1007497:	add    BYTE PTR [rsi+0x7c],dh
 100749a:	add    BYTE PTR [rax],al
 100749c:	add    BYTE PTR [rax],al
 100749e:	add    BYTE PTR [rax],al
 10074a0:	(bad)  
 10074a1:	jl     0x10074a3
 10074a3:	add    BYTE PTR [rax],al
 10074a5:	add    BYTE PTR [rax],al
 10074a7:	add    BYTE PTR [rsi+0x7e],cl
 10074ad:	add    BYTE PTR [rax],al
 10074af:	add    BYTE PTR [rsi+0x7a],al
 10074b2:	add    BYTE PTR [rax],al
 10074b4:	add    BYTE PTR [rax],al
 10074b6:	add    BYTE PTR [rax],al
 10074b8:	cmp    BYTE PTR [rdx+0x0],bh
 10074bb:	add    BYTE PTR [rax],al
 10074bd:	add    BYTE PTR [rax],al
 10074bf:	add    BYTE PTR [rdx],ah
 10074c1:	jp     0x10074c3
 10074c3:	add    BYTE PTR [rax],al
 10074c5:	add    BYTE PTR [rax],al
 10074c7:	add    BYTE PTR [rax],cl
 10074c9:	jp     0x10074cb
 10074cb:	add    BYTE PTR [rax],al
 10074cd:	add    BYTE PTR [rax],al
 10074cf:	add    al,bh
 10074d1:	jns    0x10074d3
 10074d3:	add    BYTE PTR [rax],al
 10074d5:	add    BYTE PTR [rax],al
 10074d7:	add    dh,ah
 10074d9:	jns    0x10074db
 10074db:	add    BYTE PTR [rax],al
 10074dd:	add    BYTE PTR [rax],al
 10074df:	add    dh,dl
 10074e1:	jns    0x10074e3
 10074e3:	add    BYTE PTR [rax],al
 10074e5:	add    BYTE PTR [rax],al
 10074e7:	add    dl,al
 10074e9:	jns    0x10074eb
 10074eb:	add    BYTE PTR [rax],al
 10074ed:	add    BYTE PTR [rax],al
 10074ef:	add    BYTE PTR [rcx+rdi*2+0x0],ch
 10074f6:	add    BYTE PTR [rax],al
 10074f8:	sahf   
 10074f9:	jns    0x10074fb
 10074fb:	add    BYTE PTR [rax],al
 10074fd:	add    BYTE PTR [rax],al
 10074ff:	add    BYTE PTR [rdx+0x79],dl
 1007505:	add    BYTE PTR [rax],al
 1007507:	add    BYTE PTR [rcx+rdi*2+0x0],bh
 100750b:	add    BYTE PTR [rax],al
 100750d:	add    BYTE PTR [rax],al
 100750f:	add    BYTE PTR [rax+0x79],dh
 1007512:	add    BYTE PTR [rax],al
 1007514:	add    BYTE PTR [rax],al
 1007516:	add    BYTE PTR [rax],al
 1007518:	pop    rsi
 1007519:	jns    0x100751b
 100751b:	add    BYTE PTR [rax],al
 100751d:	add    BYTE PTR [rax],al
 100751f:	add    BYTE PTR [rcx+rdi*2+0x0],cl
 1007523:	add    BYTE PTR [rax],al
 1007525:	add    BYTE PTR [rax],al
 1007527:	add    BYTE PTR [rax],bh
 1007529:	jns    0x100752b
 100752b:	add    BYTE PTR [rax],al
 100752d:	add    BYTE PTR [rax],al
 100752f:	add    BYTE PTR [rcx+rdi*2],ch
 1007532:	add    BYTE PTR [rax],al
 1007534:	add    BYTE PTR [rax],al
 1007536:	add    BYTE PTR [rax],al
 1007538:	sbb    BYTE PTR [rcx+0x0],bh
 100753b:	add    BYTE PTR [rax],al
 100753d:	add    BYTE PTR [rax],al
 100753f:	add    BYTE PTR [rdx],cl
 1007541:	jns    0x1007543
 1007543:	add    BYTE PTR [rax],al
 1007545:	add    BYTE PTR [rax],al
 1007547:	add    dh,bh
 1007549:	js     0x100754b
 100754b:	add    BYTE PTR [rax],al
 100754d:	add    BYTE PTR [rax],al
 100754f:	add    ah,ch
 1007551:	js     0x1007553
 1007553:	add    BYTE PTR [rax],al
 1007555:	add    BYTE PTR [rax],al
 1007557:	add    dh,bl
 1007559:	js     0x100755b
 100755b:	add    BYTE PTR [rax],al
 100755d:	add    BYTE PTR [rax],al
 100755f:	add    BYTE PTR [rdx+0x7e],ah
 1007562:	add    BYTE PTR [rax],al
 1007564:	add    BYTE PTR [rax],al
 1007566:	add    BYTE PTR [rax],al
 1007568:	rex.WX jl 0x100756b
 100756b:	add    BYTE PTR [rax],al
 100756d:	add    BYTE PTR [rax],al
 100756f:	add    BYTE PTR [rdx+0x7c],dl
	...
 100757e:	add    BYTE PTR [rax],al
 1007580:	movabs al,ds:0xb00000000000007e
 1007589:	jle    0x100758b
 100758b:	add    BYTE PTR [rax],al
 100758d:	add    BYTE PTR [rax],al
 100758f:	add    BYTE PTR [rdx+0x7e],bh
 1007595:	add    BYTE PTR [rax],al
 1007597:	add    al,cl
 1007599:	jnp    0x100759b
 100759b:	add    BYTE PTR [rax],al
 100759d:	add    BYTE PTR [rax],al
 100759f:	add    BYTE PTR [rax+0x7b],dh
 10075a5:	add    BYTE PTR [rax],al
 10075a7:	add    BYTE PTR [rax+0x7b],ch
 10075ad:	add    BYTE PTR [rax],al
 10075af:	add    BYTE PTR [rdx+0x7b],bl
 10075b5:	add    BYTE PTR [rax],al
 10075b7:	add    BYTE PTR [rax+0x7b],dl
 10075bd:	add    BYTE PTR [rax],al
 10075bf:	add    BYTE PTR [rdx+0x7b],bh
 10075c2:	add    BYTE PTR [rax],al
 10075c4:	add    BYTE PTR [rax],al
 10075c6:	add    BYTE PTR [rax],al
 10075c8:	pop    rsi
 10075c9:	jnp    0x10075cb
 10075cb:	add    BYTE PTR [rax],al
 10075cd:	add    BYTE PTR [rax],al
 10075cf:	add    BYTE PTR [rdx+0x7b],dl
 10075d2:	add    BYTE PTR [rax],al
 10075d4:	add    BYTE PTR [rax],al
 10075d6:	add    BYTE PTR [rax],al
 10075d8:	ds jnp 0x10075db
 10075db:	add    BYTE PTR [rax],al
 10075dd:	add    BYTE PTR [rax],al
 10075df:	add    BYTE PTR [rax],ch
 10075e1:	jnp    0x10075e3
 10075e3:	add    BYTE PTR [rax],al
 10075e5:	add    BYTE PTR [rax],al
 10075e7:	add    BYTE PTR [rdx],bl
 10075e9:	jnp    0x10075eb
 10075eb:	add    BYTE PTR [rax],al
 10075ed:	add    BYTE PTR [rax],al
 10075ef:	add    BYTE PTR [rsi],cl
 10075f1:	jnp    0x10075f3
 10075f3:	add    BYTE PTR [rax],al
 10075f5:	add    BYTE PTR [rax],al
 10075f7:	add    BYTE PTR [rax],al
 10075f9:	jnp    0x10075fb
 10075fb:	add    BYTE PTR [rax],al
 10075fd:	add    BYTE PTR [rax],al
 10075ff:	add    al,bh
 1007601:	jp     0x1007603
 1007603:	add    BYTE PTR [rax],al
 1007605:	add    BYTE PTR [rax],al
 1007607:	add    dh,ch
 1007609:	jp     0x100760b
 100760b:	add    BYTE PTR [rax],al
 100760d:	add    BYTE PTR [rax],al
 100760f:	add    dh,ah
 1007611:	jp     0x1007613
 1007613:	add    BYTE PTR [rax],al
 1007615:	add    BYTE PTR [rax],al
 1007617:	add    al,bl
 1007619:	jp     0x100761b
 100761b:	add    BYTE PTR [rax],al
 100761d:	add    BYTE PTR [rax],al
 100761f:	add    al,al
 1007621:	jp     0x1007623
 1007623:	add    BYTE PTR [rax],al
 1007625:	add    BYTE PTR [rax],al
 1007627:	add    BYTE PTR [rsi+0x7a],ch
 100762d:	add    BYTE PTR [rax],al
 100762f:	add    BYTE PTR [rax+0x7a],ah
 1007635:	add    BYTE PTR [rax],al
 1007637:	add    BYTE PTR [rsi+0x7a],cl
 100763d:	add    BYTE PTR [rax],al
 100763f:	add    BYTE PTR [rsi+0x7a],bh
 1007642:	add    BYTE PTR [rax],al
 1007644:	add    BYTE PTR [rax],al
 1007646:	add    BYTE PTR [rax],al
 1007648:	jo     0x10076c4
 100764a:	add    BYTE PTR [rax],al
 100764c:	add    BYTE PTR [rax],al
 100764e:	add    BYTE PTR [rax],al
 1007650:	push   0x7b
 1007655:	add    BYTE PTR [rax],al
 1007657:	add    al,dl
 1007659:	jle    0x100765b
	...
 1007667:	add    BYTE PTR [rsp+rdi*2],bl
	...
 1007676:	add    BYTE PTR [rax],al
 1007678:	fdivr  QWORD PTR [rbx+0x0]
 100767b:	add    BYTE PTR [rax],al
 100767d:	add    BYTE PTR [rax],al
 100767f:	add    dh,dh
 1007681:	jnp    0x1007683
	...
 100768f:	add    bh,dh
 1007691:	add    DWORD PTR [rdi+0x70],ecx
 1007694:	outs   dx,BYTE PTR gs:[rsi]
 1007696:	push   rax
 1007697:	jb     0x1007708
 1007699:	movsxd esp,DWORD PTR [rbp+0x73]
 100769c:	jae    0x10076f2
 100769e:	outs   dx,DWORD PTR ds:[rsi]
 100769f:	imul   esp,DWORD PTR [rbp+0x6e],0x0
 10076a3:	add    al,cl
 10076a5:	add    dl,BYTE PTR [rbx+0x74]
 10076a8:	(bad)  
 10076a9:	jb     0x100771f
 10076ab:	push   rbx
 10076ac:	gs jb  0x1007725
 10076af:	imul   esp,DWORD PTR [rbx+0x65],0x6c727443
 10076b6:	imul   r14d,DWORD PTR [rbx+0x70],0x68637461
 10076be:	gs jb  0x1007718
 10076c1:	add    BYTE PTR [rdx+0x1],bl
 10076c4:	rex.RXB
 10076c5:	gs je  0x100771c
 10076c8:	outs   dx,DWORD PTR ds:[rsi]
 10076c9:	imul   esp,DWORD PTR [rbp+0x6e],0x49
 10076cd:	outs   dx,BYTE PTR ds:[rsi]
 10076ce:	outs   dx,WORD PTR ds:[rsi]
 10076d0:	jb     0x100773f
 10076d2:	(bad)  
 10076d3:	je     0x100773e
 10076d5:	outs   dx,DWORD PTR ds:[rsi]
 10076d6:	outs   dx,BYTE PTR ds:[rsi]
 10076d7:	add    BYTE PTR [rcx+rax*1],ah
 10076da:	rex.RXB
 10076db:	gs je  0x100771f
 10076de:	movsxd ebp,DWORD PTR [rcx+rcx*2+0x6e]
 10076e2:	outs   dx,WORD PTR ds:[rsi]
 10076e4:	jb     0x1007753
 10076e6:	(bad)  
 10076e7:	je     0x1007752
 10076e9:	outs   dx,DWORD PTR ds:[rsi]
 10076ea:	outs   dx,BYTE PTR ds:[rsi]
 10076eb:	add    BYTE PTR [rdi+0x1],al
 10076ee:	rex.RXB
 10076ef:	gs je  0x1007745
 10076f2:	movsxd esi,DWORD PTR gs:[rbp+0x72]
 10076f6:	imul   esi,DWORD PTR [rcx+rdi*2+0x44],0x72637365
 10076fe:	imul   esi,DWORD PTR [rax+0x74],0x6f43726f
 1007705:	outs   dx,BYTE PTR ds:[rsi]
 1007706:	je     0x100777a
 1007708:	outs   dx,DWORD PTR ds:[rsi]
 1007709:	ins    BYTE PTR es:[rdi],dx
 100770a:	add    BYTE PTR [rax],al
 100770c:	(bad)  
 100770d:	add    DWORD PTR [rbp+0x71],eax
 1007710:	jne    0x1007773
 1007712:	ins    BYTE PTR es:[rdi],dx
 1007713:	push   rbx
 1007714:	imul   esp,DWORD PTR [rax+rax*1+0x0],0x6552026e
 100771c:	addr32 push rcx
 100771e:	jne    0x1007785
 1007720:	jb     0x100779b
 1007722:	push   rsi
 1007723:	(bad)  
 1007724:	ins    BYTE PTR es:[rdi],dx
 1007725:	jne    0x100778c
 1007727:	rex.RB js 0x1007781
 100772a:	add    BYTE PTR [rax],al
 100772c:	ja     0x100772f
 100772e:	rex.WB outs dx,BYTE PTR ds:[rsi]
 1007730:	imul   esi,DWORD PTR [rcx+rbp*2+0x61],0x657a696c
 1007738:	push   rbx
 1007739:	movsxd esi,DWORD PTR gs:[rbp+0x72]
 100773d:	imul   esi,DWORD PTR [rcx+rdi*2+0x44],0x72637365
 1007745:	imul   esi,DWORD PTR [rax+0x74],0x726f
 100774c:	je     0x100774e
 100774e:	rex.XB outs dx,DWORD PTR ds:[rsi]
 1007750:	outs   dx,BYTE PTR ds:[rsi]
 1007751:	jbe    0x10077b8
 1007753:	jb     0x10077c9
 1007755:	push   rbx
 1007756:	je     0x10077ca
 1007758:	imul   ebp,DWORD PTR [rsi+0x67],0x54646953
 100775f:	outs   dx,DWORD PTR ds:[rsi]
 1007760:	push   rbx
 1007761:	imul   esp,DWORD PTR [rdi+rdx*2+0x0],0x47013000
 1007769:	gs je  0x10077b2
 100776c:	imul   ebp,DWORD PTR [rbp+riz*2+0x53],0x72756365
 1007774:	imul   esi,DWORD PTR [rcx+rdi*2+0x57],0x2b60000
 100777c:	push   rbx
 100777d:	gs je  0x10077d3
 1007780:	movsxd esi,DWORD PTR gs:[rbp+0x72]
 1007784:	imul   esi,DWORD PTR [rcx+rdi*2+0x44],0x72637365
 100778c:	imul   esi,DWORD PTR [rax+0x74],0x6144726f
 1007793:	movsxd ebp,DWORD PTR [rax+rax*1+0x23]
 1007797:	add    DWORD PTR [rdi+0x65],eax
 100779a:	je     0x10077dd
 100779c:	movsxd esp,DWORD PTR [rbp+0x0]
 100779f:	add    BYTE PTR [rdx+0x1],cl
 10077a2:	rex.RXB
 10077a3:	gs je  0x10077f9
 10077a6:	movsxd esi,DWORD PTR gs:[rbp+0x72]
 10077aa:	imul   esi,DWORD PTR [rcx+rdi*2+0x44],0x72637365
 10077b2:	imul   esi,DWORD PTR [rax+0x74],0x654c726f
 10077b9:	outs   dx,BYTE PTR ds:[rsi]
 10077ba:	addr32 je 0x1007825
 10077bd:	add    BYTE PTR [rdx+0x74655302],ch
 10077c3:	imul   r13d,DWORD PTR [rbp+r12*2+0x53],0x72756365
 10077cc:	imul   esi,DWORD PTR [rcx+rdi*2+0x57],0x1760000
 10077d4:	rex.WB outs dx,BYTE PTR ds:[rsi]
 10077d6:	imul   esi,DWORD PTR [rcx+rbp*2+0x61],0x657a696c
 10077de:	movsxd ebp,DWORD PTR [r8+rax*1-0x40]
 10077e3:	add    dl,BYTE PTR [rbx+0x65]
 10077e6:	je     0x100783b
 10077e8:	gs jb  0x1007861
 10077eb:	imul   esp,DWORD PTR [rbx+0x65],0x74617453
 10077f2:	jne    0x1007867
 10077f4:	add    BYTE PTR [rax],al
 10077f6:	adc    BYTE PTR [rax],al
 10077f8:	rex.B
 10077f9:	fs movsxd esp,DWORD PTR fs:[r11+0x65]
 10077ff:	jae    0x1007874
 1007801:	rex.B ins BYTE PTR es:[rdi],dx
 1007803:	ins    BYTE PTR es:[rdi],dx
 1007804:	outs   dx,DWORD PTR ds:[rsi]
 1007805:	ja     0x100786c
 1007807:	movsxd esp,DWORD PTR fs:[r13+0x0]
 100780c:	jb     0x100780e
 100780e:	rex.XB outs dx,DWORD PTR ds:[rsi]
 1007810:	outs   dx,BYTE PTR ds:[rsi]
 1007811:	jbe    0x1007878
 1007813:	jb     0x1007889
 1007815:	push   rbx
 1007816:	je     0x100788a
 1007818:	imul   ebp,DWORD PTR [rsi+0x67],0x75636553
 100781f:	jb     0x100788a
 1007821:	je     0x100789c
 1007823:	rex.R
 1007824:	gs jae 0x100788a
 1007827:	jb     0x1007892
 1007829:	jo     0x100789f
 100782b:	outs   dx,DWORD PTR ds:[rsi]
 100782c:	jb     0x1007882
 100782e:	outs   dx,DWORD PTR ds:[rsi]
 100782f:	push   rbx
 1007830:	movsxd esi,DWORD PTR gs:[rbp+0x72]
 1007834:	imul   esi,DWORD PTR [rcx+rdi*2+0x44],0x72637365
 100783c:	imul   esi,DWORD PTR [rax+0x74],0x57726f
 1007843:	add    BYTE PTR [rcx+0x2],ah
 1007846:	push   rdx
 1007847:	gs addr32 rex.WRXB jo 0x10078b1
 100784c:	outs   dx,BYTE PTR ds:[rsi]
 100784d:	rex.WXB
 100784e:	gs jns 0x1007896
 1007851:	js     0x10078aa
 1007853:	add    BYTE PTR [rsi],dl
 1007855:	add    BYTE PTR [rcx+0x64],al
 1007858:	movsxd esp,DWORD PTR fs:[r13+0x0]
 100785d:	add    BYTE PTR [rax+0x67655202],cl
 1007863:	imul   esi,DWORD PTR [rbx+0x74],0x65537265
 100786a:	jb     0x10078e2
 100786c:	imul   esp,DWORD PTR [rbx+0x65],0x6c727443
 1007873:	rex.W (bad) 
 1007875:	outs   dx,BYTE PTR ds:[rsi]
 1007876:	fs ins BYTE PTR es:[rdi],dx
 1007878:	gs jb  0x10078d2
 100787b:	add    BYTE PTR [rsi],dh
 100787d:	add    DWORD PTR [rdi+0x65],eax
 1007880:	je     0x10078ce
 1007882:	outs   dx,BYTE PTR gs:[rsi]
 1007884:	addr32 je 0x10078ef
 1007887:	push   rbx
 1007888:	imul   esp,DWORD PTR [rax+rax*1+0x0],0x6f43006c
 1007890:	outs   dx,BYTE PTR ds:[rsi]
 1007891:	jbe    0x10078f8
 1007893:	jb     0x1007909
 1007895:	push   rbx
 1007896:	imul   esp,DWORD PTR [rsp+rdx*2+0x6f],0x69727453
 100789e:	outs   dx,BYTE PTR ds:[rsi]
 100789f:	addr32 push rbx
 10078a1:	imul   esp,DWORD PTR [rdi+rdx*2+0x0],0x52023000
 10078a9:	gs rex.XB ins BYTE PTR es:[edi],dx
 10078ad:	outs   dx,DWORD PTR ds:[rsi]
 10078ae:	jae    0x1007915
 10078b0:	rex.WXB
 10078b1:	gs jns 0x10078b4
 10078b4:	add    QWORD PTR [rdi+0x65],rax
 10078b8:	je     0x100790d
 10078ba:	movsxd esi,DWORD PTR gs:[rbp+0x72]
 10078be:	imul   esi,DWORD PTR [rcx+rdi*2+0x44],0x72637365
 10078c6:	imul   esi,DWORD PTR [rax+0x74],0x6144726f
 10078cd:	movsxd ebp,DWORD PTR [rax+rax*1+0x41]
 10078d1:	rex.R push rsi
 10078d3:	push   r8
 10078d5:	xor    rsi,QWORD PTR [r10]
 10078d8:	cs fs ins BYTE PTR es:[rdi],dx
 10078db:	ins    BYTE PTR es:[rdi],dx
 10078dc:	add    BYTE PTR [rax],al
 10078de:	(bad)  
 10078df:	add    DWORD PTR [rbp+0x78],eax
 10078e2:	imul   esi,DWORD PTR [rax+rdx*2+0x72],0x7365636f
 10078ea:	jae    0x10078ec
 10078ec:	test   al,0x0
 10078ee:	rex.XB jb 0x1007956
 10078f1:	(bad)  
 10078f2:	je     0x1007959
 10078f4:	push   rax
 10078f5:	jb     0x1007966
 10078f7:	movsxd esp,DWORD PTR [rbp+0x73]
 10078fa:	jae    0x1007953
 10078fc:	add    BYTE PTR [rax],al
 10078fe:	rol    DWORD PTR [rdx],cl
 1007900:	rex.W
 1007901:	gs (bad) 
 1007903:	jo     0x1007946
 1007905:	ins    BYTE PTR es:[rdi],dx
 1007906:	ins    BYTE PTR es:[rdi],dx
 1007907:	outs   dx,DWORD PTR ds:[rsi]
 1007908:	movsxd eax,DWORD PTR [rax]
 100790a:	(bad)
 100790f:	imul   r13d,DWORD PTR gs:[rbp+r12*2+0x45],0xc6005778
 1007919:	add    DWORD PTR [rdi+0x65],eax
 100791c:	je     0x1007961
 100791e:	jne    0x1007992
 1007920:	jb     0x1007987
 1007922:	outs   dx,BYTE PTR ds:[rsi]
 1007923:	je     0x1007975
 1007925:	jb     0x1007996
 1007927:	movsxd esp,DWORD PTR [rbp+0x73]
 100792a:	jae    0x100792c
 100792c:	xlat   BYTE PTR ds:[rbx]
 100792d:	add    cl,BYTE PTR [rax+0x65]
 1007930:	(bad)  
 1007931:	jo     0x1007979
 1007933:	jb     0x100799a
 1007935:	add    BYTE PTR gs:[rax],al
 1007938:	(bad)  
 1007939:	add    al,BYTE PTR [rdi+0x65]
 100793c:	je     0x100798b
 100793e:	outs   dx,DWORD PTR ds:[rsi]
 100793f:	fs jne 0x10079ae
 1007942:	gs rex.W (bad) 
 1007945:	outs   dx,BYTE PTR ds:[rsi]
 1007946:	fs ins BYTE PTR es:[rdi],dx
 1007948:	gs push rdi
 100794a:	add    BYTE PTR [rax],al
 100794c:	push   rcx
 100794d:	add    al,BYTE PTR [rdi+0x65]
 1007950:	je     0x10079a2
 1007952:	jb     0x10079c3
 1007954:	movsxd esp,DWORD PTR [rbp+0x73]
 1007957:	jae    0x10079a1
 1007959:	gs (bad) 
 100795b:	jo     0x100795d
 100795d:	add    BYTE PTR [rdi],cl
 100795f:	add    eax,0x74696157
 1007964:	rex.WRX (bad) 
 1007966:	ins    DWORD PTR es:[rdi],dx
 1007967:	gs fs push rax
 100796a:	imul   esi,DWORD PTR [rax+0x65],0x34000057
 1007971:	add    eax,0x74697257
 1007976:	imul   r13d,DWORD PTR gs:[rbp+r12*2+0x0],0x654701f1
 1007980:	je     0x10079c8
 1007982:	imul   ebp,DWORD PTR [rbp+riz*2+0x41],0x69727474
 100798a:	(bad)  
 100798b:	jne    0x1007a01
 100798d:	gs jae 0x10079e7
 1007990:	add    BYTE PTR [rax],al
 1007992:	ret    
 1007993:	add    edx,DWORD PTR [rdx+0x65]
 1007996:	(bad)  
 1007997:	imul   r13d,DWORD PTR fs:[rbp+r12*2+0x0],0x43008f00
 10079a1:	jb     0x1007a08
 10079a3:	(bad)  
 10079a4:	je     0x1007a0b
 10079a6:	imul   r13d,DWORD PTR [rbp+r12*2+0x57],0x4400e500
 10079af:	imul   esi,DWORD PTR [rbx+0x63],0x656e6e6f
 10079b6:	movsxd esi,DWORD PTR [rsi+rcx*2+0x61]
 10079ba:	ins    DWORD PTR es:[rdi],dx
 10079bb:	gs fs push rax
 10079be:	imul   esi,DWORD PTR [rax+0x65],0x46015d00
 10079c5:	ins    BYTE PTR es:[rdi],dx
 10079c6:	jne    0x1007a3b
 10079c8:	push   0x656c6946
 10079cd:	rex.X jne 0x1007a36
 10079d0:	data16 gs jb 0x1007a47
 10079d4:	add    BYTE PTR [rax],al
 10079d6:	or     BYTE PTR [rdx],al
 10079d8:	rex.RXB
 10079d9:	gs je  0x1007a28
 10079dc:	(bad)  
 10079dd:	jae    0x1007a53
 10079df:	rex.RB jb 0x1007a54
 10079e2:	outs   dx,DWORD PTR ds:[rsi]
 10079e3:	jb     0x10079e5
 10079e5:	add    BYTE PTR [rdx+rax*1+0x47],cl
 10079e9:	gs je  0x1007a3c
 10079ec:	jb     0x1007a5d
 10079ee:	movsxd eax,DWORD PTR [rcx+0x64]
 10079f1:	fs jb  0x1007a59
 10079f4:	jae    0x1007a69
 10079f6:	add    BYTE PTR [rax],al
 10079f8:	or     DWORD PTR [rdx],eax
 10079fa:	rex.RXB
 10079fb:	gs je  0x1007a4a
 10079fe:	outs   dx,DWORD PTR ds:[rsi]
 10079ff:	movsxd esp,DWORD PTR [rcx+0x6c]
 1007a02:	push   rsp
 1007a03:	imul   ebp,DWORD PTR [rbp+0x65],0x4890000
 1007a0a:	push   rbx
 1007a0b:	gs je  0x1007a5c
 1007a0e:	(bad)  
 1007a0f:	ins    DWORD PTR es:[rdi],dx
 1007a10:	gs fs push rax
 1007a13:	imul   esi,DWORD PTR [rax+0x65],0x646e6148
 1007a1a:	ins    BYTE PTR es:[rdi],dx
 1007a1b:	gs push rbx
 1007a1d:	je     0x1007a80
 1007a1f:	je     0x1007a86
 1007a21:	add    bl,bl
 1007a23:	add    cl,BYTE PTR [rax+0x65]
 1007a26:	(bad)  
 1007a27:	jo     0x1007a7c
 1007a29:	gs je  0x1007a75
 1007a2c:	outs   dx,BYTE PTR ds:[rsi]
 1007a2d:	outs   dx,WORD PTR ds:[rsi]
 1007a2f:	jb     0x1007a9e
 1007a31:	(bad)  
 1007a32:	je     0x1007a9d
 1007a34:	outs   dx,DWORD PTR ds:[rsi]
 1007a35:	outs   dx,BYTE PTR ds:[rsi]
 1007a36:	add    BYTE PTR [rax],al
 1007a38:	push   rdx
 1007a39:	add    BYTE PTR [rbx+0x6c],al
 1007a3c:	outs   dx,DWORD PTR ds:[rsi]
 1007a3d:	jae    0x1007aa4
 1007a3f:	rex.W (bad) 
 1007a41:	outs   dx,BYTE PTR ds:[rsi]
 1007a42:	fs ins BYTE PTR es:[rdi],dx
 1007a44:	add    BYTE PTR gs:[rdx+0x3],cl
 1007a48:	rex.WR outs dx,DWORD PTR ds:[rsi]
 1007a4a:	movsxd esp,DWORD PTR [rcx+0x6c]
 1007a4d:	rex.RX jb 0x1007ab5
 1007a50:	add    BYTE PTR gs:[rax+rax*1+0x61657243],dh
 1007a58:	je     0x1007abf
 1007a5a:	push   rsp
 1007a5b:	push   0x64616572
 1007a60:	add    BYTE PTR [rax],al
 1007a62:	rex.WXB
 1007a63:	rex.RB push r10
 1007a65:	rex.WRX
 1007a66:	rex.RB
 1007a67:	xor    r14,QWORD PTR [rdx]
 1007a6a:	cs fs ins BYTE PTR es:[rdi],dx
 1007a6d:	ins    BYTE PTR es:[rdi],dx
 1007a6e:	add    BYTE PTR [rax],al
 1007a70:	test   DWORD PTR [rdi+rbx*2],eax
 1007a73:	jbe    0x1007ae8
 1007a75:	outs   dx,BYTE PTR ds:[rsi]
 1007a76:	ja     0x1007ae8
 1007a78:	jb     0x1007ae3
 1007a7a:	outs   dx,BYTE PTR ds:[rsi]
 1007a7b:	je     0x1007ae3
 1007a7d:	add    BYTE PTR [rbp+0x0],ah
 1007a80:	(bad)  
 1007a81:	(bad)  
 1007a82:	xor    eax,DWORD PTR [rax+0x59]
 1007a85:	pop    r8
 1007a87:	push   rax
 1007a88:	rex.RB
 1007a89:	pop    r8
 1007a8b:	rex pop rdx
 1007a8d:	add    BYTE PTR [rbx+0x0],ah
 1007a90:	(bad)  
 1007a91:	(bad)  
 1007a92:	xor    al,BYTE PTR [rax+0x59]
 1007a95:	push   r8
 1007a97:	rex.RB
 1007a98:	pop    r8
 1007a9a:	pop    rdi
 1007a9b:	rex.WXB
 1007a9c:	rex pop rdx
 1007a9e:	add    BYTE PTR [rax],al
 1007aa0:	sahf   
 1007aa1:	add    DWORD PTR [rdi+0x61],ebx
 1007aa4:	ins    DWORD PTR es:[rdi],dx
 1007aa5:	jae    0x1007b0e
 1007aa7:	pop    rdi
 1007aa8:	gs js  0x1007b14
 1007aab:	je     0x1007aad
 1007aad:	add    BYTE PTR [rax+0x775f5f01],dl
 1007ab3:	addr32 gs je 0x1007b24
 1007ab7:	(bad)  
 1007ab8:	imul   ebp,DWORD PTR [rsi+0x61],0x736772
 1007abf:	add    BYTE PTR [rsi],bl
 1007ac1:	add    DWORD PTR [rdi+0x5f],ebx
 1007ac4:	rex.XB pop r15
 1007ac6:	jae    0x1007b38
 1007ac8:	movsxd ebp,DWORD PTR gs:[rcx+0x66]
 1007acc:	imul   esp,DWORD PTR [rbx+0x5f],0x646e6168
 1007ad3:	ins    BYTE PTR es:[rdi],dx
 1007ad4:	gs jb  0x1007ad7
 1007ad7:	add    BYTE PTR [rdx],bl
 1007ad9:	add    DWORD PTR [rdi+0x58],ebx
 1007adc:	movsxd esi,DWORD PTR [rax+0x74]
 1007adf:	imul   r13d,DWORD PTR [rsp+r14*2+0x65],0x2000072
 1007ae8:	pop    rdi
 1007ae9:	gs js  0x1007b55
 1007aec:	je     0x1007aee
 1007aee:	mov    ch,0x1
 1007af0:	pop    rdi
 1007af1:	movsxd esp,DWORD PTR [rbp+0x78]
 1007af4:	imul   esi,DWORD PTR [rax+rax*1+0x0],0x78650548
 1007afc:	imul   esi,DWORD PTR [rax+rax*1+0x0],0x5f5f0191
 1007b04:	ja     0x1007b6f
 1007b06:	outs   dx,BYTE PTR ds:[rsi]
 1007b07:	imul   esi,DWORD PTR [rbp+riz*2+0x6e],0x86000076
 1007b0f:	add    bl,BYTE PTR [rdi+0x69]
 1007b12:	outs   dx,BYTE PTR ds:[rsi]
 1007b13:	imul   esi,DWORD PTR [rsp+rsi*2+0x65],0x87006d72
 1007b1b:	add    bl,BYTE PTR [rdi+0x69]
 1007b1e:	outs   dx,BYTE PTR ds:[rsi]
 1007b1f:	imul   esi,DWORD PTR [rsp+rsi*2+0x65],0x655f6d72
 1007b27:	add    ch,al
 1007b29:	add    DWORD PTR [rdi+0x63],ebx
 1007b2c:	outs   dx,DWORD PTR ds:[rsi]
 1007b2d:	outs   dx,BYTE PTR ds:[rsi]
 1007b2e:	imul   sp,WORD PTR [rdi+0x74],0x7268
 1007b34:	gs (bad) 
 1007b36:	fs ins BYTE PTR es:[rdi],dx
 1007b38:	outs   dx,DWORD PTR ds:[rsi]
 1007b39:	movsxd esp,DWORD PTR [rcx+0x6c]
 1007b3c:	add    BYTE PTR gs:[rcx+rax*1+0x5f],bh
 1007b41:	pop    rdi
 1007b42:	jae    0x1007ba9
 1007b44:	je     0x1007bbb
 1007b46:	jae    0x1007bad
 1007b48:	jb     0x1007bb7
 1007b4a:	(bad)  
 1007b4b:	je     0x1007bb5
 1007b4d:	gs jb  0x1007bc2
 1007b50:	add    BYTE PTR [rax],al
 1007b52:	(bad)
 1007b56:	outs   dx,DWORD PTR ds:[rsi]
 1007b57:	ins    DWORD PTR es:[rdi],dx
 1007b58:	ins    DWORD PTR es:[rdi],dx
 1007b59:	outs   dx,DWORD PTR ds:[rsi]
 1007b5a:	fs add BYTE PTR gs:[rax],al
 1007b5e:	sbb    al,0x2
 1007b60:	pop    rdi
 1007b61:	ins    WORD PTR es:[rdi],dx
 1007b63:	outs   dx,DWORD PTR ds:[rsi]
 1007b64:	fs add BYTE PTR gs:[rax],al
 1007b68:	jns    0x1007b6b
 1007b6a:	pop    rdi
 1007b6b:	pop    rdi
 1007b6c:	jae    0x1007bd3
 1007b6e:	je     0x1007bcf
 1007b70:	(bad)  
 1007b71:	jo     0x1007be3
 1007b73:	pop    rdi
 1007b74:	je     0x1007bef
 1007b76:	jo     0x1007bdd
 1007b78:	add    BYTE PTR [rax],al
 1007b7a:	rex.RX add DWORD PTR [rdi+0x5f],r11d
 1007b7e:	movsxd esi,DWORD PTR [rdx+0x74]
 1007b81:	pop    rdi
 1007b82:	fs gs (bad) 
 1007b85:	jne    0x1007bee
 1007b87:	addr32 gs jb 0x1007bea
 1007b8b:	push   0x6b6f6f
 1007b90:	pop    rbx
 1007b91:	add    al,0x5f
 1007b93:	jne    0x1007c03
 1007b95:	ins    BYTE PTR es:[rdi],dx
 1007b96:	outs   dx,DWORD PTR ds:[rsi]
 1007b97:	movsxd ebp,DWORD PTR [rbx+0x0]
 1007b9a:	add    QWORD PTR [rdi+0x5f],rbx
 1007b9e:	fs ins BYTE PTR es:[rdi],dx
 1007ba0:	ins    BYTE PTR es:[rdi],dx
 1007ba1:	outs   dx,DWORD PTR ds:[rsi]
 1007ba2:	outs   dx,BYTE PTR ds:[rsi]
 1007ba3:	gs js  0x1007c0f
 1007ba6:	je     0x1007ba8
 1007ba8:	test   BYTE PTR [rdx],0x5f
 1007bab:	ins    BYTE PTR es:[rdi],dx
 1007bac:	outs   dx,DWORD PTR ds:[rsi]
 1007bad:	movsxd ebp,DWORD PTR [rbx+0x0]
 1007bb0:	popf   
 1007bb1:	add    ebx,DWORD PTR [rdi+0x6f]
 1007bb4:	outs   dx,BYTE PTR ds:[rsi]
 1007bb5:	gs js  0x1007c21
 1007bb8:	je     0x1007bba
 1007bba:	rex.WRB push r11
 1007bbc:	push   rsi
 1007bbd:	rex.XB push r10
 1007bbf:	xor    DWORD PTR [rax],esi
 1007bc1:	xor    BYTE PTR [rsi],ch
 1007bc3:	fs ins BYTE PTR es:[rdi],dx
 1007bc5:	ins    BYTE PTR es:[rdi],dx
 1007bc6:	add    BYTE PTR [rax],al
 1007bc8:	add    BYTE PTR [rcx],al
 1007bca:	(bad)  
 1007bcb:	je     0x1007c32
 1007bcd:	jb     0x1007c3c
 1007bcf:	imul   ebp,DWORD PTR [rsi+0x61],0x40406574
 1007bd6:	pop    rcx
 1007bd7:	pop    r8
 1007bd9:	pop    rax
 1007bda:	pop    rdx
 1007bdb:	add    BYTE PTR [rax],al
 1007bdd:	add    BYTE PTR [rbx+0x72],al
 1007be0:	gs (bad) 
 1007be2:	je     0x1007c49
 1007be4:	rex.RB outs dx,BYTE PTR ds:[rsi]
 1007be6:	jbe    0x1007c51
 1007be8:	jb     0x1007c59
 1007bea:	outs   dx,BYTE PTR ds:[rsi]
 1007beb:	ins    DWORD PTR es:[rdi],dx
 1007bec:	outs   dx,BYTE PTR gs:[rsi]
 1007bee:	je     0x1007c32
 1007bf0:	ins    BYTE PTR es:[rdi],dx
 1007bf1:	outs   dx,DWORD PTR ds:[rsi]
 1007bf2:	movsxd ebp,DWORD PTR [rbx+0x0]
 1007bf5:	add    BYTE PTR [rax+rax*1],al
 1007bf8:	rex.R
 1007bf9:	gs jae 0x1007c70
 1007bfc:	jb     0x1007c6d
 1007bfe:	jns    0x1007c45
 1007c00:	outs   dx,BYTE PTR ds:[rsi]
 1007c01:	jbe    0x1007c6c
 1007c03:	jb     0x1007c74
 1007c05:	outs   dx,BYTE PTR ds:[rsi]
 1007c06:	ins    DWORD PTR es:[rdi],dx
 1007c07:	outs   dx,BYTE PTR gs:[rsi]
 1007c09:	je     0x1007c4d
 1007c0b:	ins    BYTE PTR es:[rdi],dx
 1007c0c:	outs   dx,DWORD PTR ds:[rsi]
 1007c0d:	movsxd ebp,DWORD PTR [rbx+0x0]
 1007c10:	push   rbp
 1007c11:	push   rbx
 1007c12:	rex.RB push r10
 1007c14:	rex.RB
 1007c15:	rex.WRX push rsi
 1007c17:	cs fs ins BYTE PTR es:[rdi],dx
 1007c1a:	ins    BYTE PTR es:[rdi],dx
 1007c1b:	add    BYTE PTR [rax],dh
 1007c1d:	add    BYTE PTR [rax+0x61],dl
 1007c20:	je     0x1007c8a
 1007c22:	rex.B
 1007c23:	fs fs rex.X (bad) 
 1007c27:	movsxd ebp,DWORD PTR [rbx+0x73]
 1007c2a:	ins    BYTE PTR es:[rdi],dx
 1007c2b:	(bad)  
 1007c2c:	jae    0x1007c96
 1007c2e:	push   rdi
 1007c2f:	add    BYTE PTR [rbx+0x48],dl
 1007c32:	rex.WR push rdi
 1007c34:	push   r8
 1007c36:	rex.WB
 1007c37:	cs fs ins BYTE PTR es:[rdi],dx
 1007c3a:	ins    BYTE PTR es:[rdi],dx
 1007c3b:	add    BYTE PTR [rdx+rax*1+0x52],ah
 1007c3f:	gs addr32 rex.WRXB jo 0x1007ca9
 1007c44:	outs   dx,BYTE PTR ds:[rsi]
 1007c45:	rex.WXB
 1007c46:	gs jns 0x1007ca0
 1007c49:	add    al,al
 1007c4b:	add    al,0x53
 1007c4d:	ins    BYTE PTR es:[rdi],dx
 1007c4e:	gs gs jo 0x1007c52
 1007c52:	out    dx,al
 1007c53:	add    BYTE PTR [rbp+0x6e],al
 1007c56:	movsxd ebp,DWORD PTR [rdi+0x64]
 1007c59:	gs push rax
 1007c5b:	outs   dx,DWORD PTR ds:[rsi]
 1007c5c:	imul   ebp,DWORD PTR [rsi+0x74],0xce007265
 1007c63:	add    al,0x54
 1007c65:	gs jb  0x1007cd5
 1007c68:	imul   ebp,DWORD PTR [rsi+0x61],0x72506574
 1007c6f:	outs   dx,DWORD PTR ds:[rsi]
 1007c70:	movsxd esp,DWORD PTR [rbp+0x73]
 1007c73:	jae    0x1007c75
 1007c75:	add    dl,ah
 1007c77:	add    al,0x55
 1007c79:	outs   dx,BYTE PTR ds:[rsi]
 1007c7a:	push   0x6c646e61
 1007c7f:	gs fs rex.RB js 0x1007ce7
 1007c84:	gs jo  0x1007cfb
 1007c87:	imul   ebp,DWORD PTR [rdi+0x6e],0x746c6946
 1007c8e:	gs jb  0x1007c91
 1007c91:	add    BYTE PTR [rbx+0x74655304],dh
 1007c97:	push   rbp
 1007c98:	outs   dx,BYTE PTR ds:[rsi]
 1007c99:	push   0x6c646e61
 1007c9e:	gs fs rex.RB js 0x1007d06
 1007ca3:	gs jo  0x1007d1a
 1007ca6:	imul   ebp,DWORD PTR [rdi+0x6e],0x746c6946
 1007cad:	gs jb  0x1007cb0
 1007cb0:	add    al,BYTE PTR [rbx]
 1007cb2:	rex.WB jae 0x1007cf9
 1007cb5:	gs (bad) 
 1007cb7:	jne    0x1007d20
 1007cb9:	addr32 gs jb 0x1007d0d
 1007cbd:	jb     0x1007d24
 1007cbf:	jae    0x1007d26
 1007cc1:	outs   dx,BYTE PTR ds:[rsi]
 1007cc2:	je     0x1007cc4
 1007cc4:	es add al,0x52
 1007cc7:	je     0x1007d35
 1007cc9:	push   rsi
 1007cca:	imul   esi,DWORD PTR [rdx+0x74],0x556c6175
 1007cd1:	outs   dx,BYTE PTR ds:[rsi]
 1007cd2:	ja     0x1007d3d
 1007cd4:	outs   dx,BYTE PTR ds:[rsi]
 1007cd5:	add    BYTE PTR fs:[rax],al
 1007cd8:	(bad)  
 1007cd9:	add    al,0x52
 1007cdb:	je     0x1007d49
 1007cdd:	rex.WR outs dx,DWORD PTR ds:[rsi]
 1007cdf:	outs   dx,DWORD PTR ds:[rsi]
 1007ce0:	imul   esi,DWORD PTR [rbp+0x70],0x46
 1007ce4:	jne    0x1007d54
 1007ce6:	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
 1007cea:	outs   dx,BYTE PTR ds:[rsi]
 1007ceb:	rex.RB outs dx,BYTE PTR ds:[rsi]
 1007ced:	je     0x1007d61
 1007cef:	jns    0x1007cf1
 1007cf1:	add    BYTE PTR [rax],bl
 1007cf3:	add    al,0x52
 1007cf5:	je     0x1007d63
 1007cf7:	rex.XB (bad) 
 1007cf9:	jo     0x1007d6f
 1007cfb:	jne    0x1007d6f
 1007cfd:	rex.XB outs dx,DWORD PTR gs:[rsi]
 1007d00:	outs   dx,BYTE PTR ds:[rsi]
 1007d01:	je     0x1007d68
 1007d03:	js     0x1007d79
 1007d05:	add    bl,cl
 1007d07:	add    BYTE PTR [rbp+riz*2+0x63],al
 1007d0b:	outs   dx,DWORD PTR ds:[rsi]
 1007d0c:	fs gs push rax
 1007d0f:	outs   dx,DWORD PTR ds:[rsi]
 1007d10:	imul   ebp,DWORD PTR [rsi+0x74],0xa9007265
 1007d17:	add    edx,DWORD PTR [rcx+0x75]
 1007d1a:	gs jb  0x1007d96
 1007d1d:	push   rax
 1007d1e:	gs jb  0x1007d87
 1007d21:	outs   dx,DWORD PTR ds:[rsi]
 1007d22:	jb     0x1007d91
 1007d24:	(bad)  
 1007d25:	outs   dx,BYTE PTR ds:[rsi]
 1007d26:	movsxd esp,DWORD PTR [rbp+0x43]
 1007d29:	outs   dx,DWORD PTR ds:[rsi]
 1007d2a:	jne    0x1007d9a
 1007d2c:	je     0x1007d93
 1007d2e:	jb     0x1007d30
 1007d30:	(bad)  
 1007d31:	add    al,BYTE PTR [rdi+0x65]
 1007d34:	je     0x1007d8a
 1007d36:	imul   esp,DWORD PTR [rbx+0x6b],0x6e756f43
 1007d3d:	je     0x1007d3f
 1007d3f:	add    bl,cl
 1007d41:	add    DWORD PTR [rdi+0x65],eax
 1007d44:	je     0x1007d89
 1007d46:	jne    0x1007dba
 1007d48:	jb     0x1007daf
 1007d4a:	outs   dx,BYTE PTR ds:[rsi]
 1007d4b:	je     0x1007da1
 1007d4d:	push   0x64616572
 1007d52:	rex.WB
 1007d53:	add    BYTE PTR fs:[rax],al
 1007d56:	mov    DWORD PTR [rcx],0x43746547
 1007d5c:	jne    0x1007dd0
 1007d5e:	jb     0x1007dc5
 1007d60:	outs   dx,BYTE PTR ds:[rsi]
 1007d61:	je     0x1007db3
 1007d63:	jb     0x1007dd4
 1007d65:	movsxd esp,DWORD PTR [rbp+0x73]
 1007d68:	jae    0x1007db3
 1007d6a:	add    BYTE PTR fs:[rax+0x74654702],al
 1007d71:	push   rbx
 1007d72:	jns    0x1007de7
 1007d74:	je     0x1007ddb
 1007d76:	ins    DWORD PTR es:[rdi],dx
 1007d77:	push   rsp
 1007d78:	imul   ebp,DWORD PTR [rbp+0x65],0x69467341
 1007d7f:	ins    BYTE PTR es:[rdi],dx
 1007d80:	gs push rsp
 1007d82:	imul   ebp,DWORD PTR [rbp+0x65],0x53046500
 1007d89:	gs je  0x1007dd1
 1007d8c:	outs   dx,BYTE PTR ds:[rsi]
 1007d8d:	jbe    0x1007df8
 1007d8f:	jb     0x1007e00
 1007d91:	outs   dx,BYTE PTR ds:[rsi]
 1007d92:	ins    DWORD PTR es:[rdi],dx
 1007d93:	outs   dx,BYTE PTR gs:[rsi]
 1007d95:	je     0x1007ded
 1007d97:	(bad)  
 1007d98:	jb     0x1007e03
 1007d9a:	(bad)  
 1007d9b:	(bad)  
 1007d9c:	ins    BYTE PTR es:[rdi],dx
 1007d9d:	gs push rdi
 1007d9f:	add    bl,ah
 1007da1:	add    DWORD PTR [rdi+0x65],eax
 1007da4:	je     0x1007deb
 1007da6:	outs   dx,BYTE PTR ds:[rsi]
 1007da7:	jbe    0x1007e12
 1007da9:	jb     0x1007e1a
 1007dab:	outs   dx,BYTE PTR ds:[rsi]
 1007dac:	ins    DWORD PTR es:[rdi],dx
 1007dad:	outs   dx,BYTE PTR gs:[rsi]
 1007daf:	je     0x1007e07
 1007db1:	(bad)  
 1007db2:	jb     0x1007e1d
 1007db4:	(bad)  
 1007db5:	(bad)  
 1007db6:	ins    BYTE PTR es:[rdi],dx
 1007db7:	gs push rdi
 1007db9:	add    BYTE PTR [rax+rax*1+0x43],ah
 1007dbd:	outs   dx,DWORD PTR ds:[rsi]
 1007dbe:	ins    DWORD PTR es:[rdi],dx
 1007dbf:	jo     0x1007e22
 1007dc1:	jb     0x1007e28
 1007dc3:	push   rbx
 1007dc4:	je     0x1007e38
 1007dc6:	imul   ebp,DWORD PTR [rsi+0x67],0xda000057
 1007dcd:	add    cl,BYTE PTR [rax+0x65]
 1007dd0:	(bad)  
 1007dd1:	jo     0x1007e25
 1007dd3:	gs rex.B ins BYTE PTR es:[rdi],dx
 1007dd6:	ins    BYTE PTR es:[rdi],dx
 1007dd7:	outs   dx,DWORD PTR ds:[rsi]
 1007dd8:	movsxd eax,DWORD PTR [rax]
 1007dda:	(bad)  
 1007ddb:	add    eax,0x7274736c
 1007de0:	ins    BYTE PTR es:[rdi],dx
 1007de1:	outs   dx,BYTE PTR gs:[rsi]
 1007de3:	push   rdi
 1007de4:	add    BYTE PTR [rax],al
 1007de6:	add    BYTE PTR [rip+0x74726956],al        # 0x7572e742
 1007dec:	jne    0x1007e4f
 1007dee:	ins    BYTE PTR es:[rdi],dx
 1007def:	push   rcx
 1007df0:	jne    0x1007e57
 1007df2:	jb     0x1007e6d
 1007df4:	add    BYTE PTR [rax],al
 1007df6:	add    BYTE PTR [rbx+rdx*2],0x65
 1007dfa:	je     0x1007e48
 1007dfc:	(bad)  
 1007dfd:	jae    0x1007e73
 1007dff:	rex.RB jb 0x1007e74
 1007e02:	outs   dx,DWORD PTR ds:[rsi]
 1007e03:	jb     0x1007e05
 1007e05:	add    al,cl
 1007e07:	add    BYTE PTR [rbp+riz*2+0x62],al
 1007e0b:	jne    0x1007e74
 1007e0d:	rex.X jb 0x1007e75
 1007e10:	(bad)  
 1007e11:	imul   eax,DWORD PTR [rax],0x0
 1007e14:	sbb    al,BYTE PTR [rdx]
 1007e16:	rex.RXB
 1007e17:	gs je  0x1007e67
 1007e1a:	outs   dx,DWORD PTR ds:[rsi]
 1007e1b:	fs jne 0x1007e8a
 1007e1e:	imul   r13d,DWORD PTR gs:[rbp+r12*2+0x4e],0x57656d61
 1007e28:	add    BYTE PTR [rax],al
 1007e2a:	and    eax,DWORD PTR [rcx]
 1007e2c:	rex.RB js 0x1007e9f
 1007e2f:	(bad)  
 1007e30:	outs   dx,BYTE PTR ds:[rsi]
 1007e31:	rex.RB outs dx,BYTE PTR fs:[rsi]
 1007e34:	jbe    0x1007e9f
 1007e36:	jb     0x1007ea7
 1007e38:	outs   dx,BYTE PTR ds:[rsi]
 1007e39:	ins    DWORD PTR es:[rdi],dx
 1007e3a:	outs   dx,BYTE PTR gs:[rsi]
 1007e3c:	je     0x1007e91
 1007e3e:	je     0x1007eb2
 1007e40:	imul   ebp,DWORD PTR [rsi+0x67],0x49005773
 1007e47:	add    al,BYTE PTR [rdi+0x65]
 1007e4a:	je     0x1007e9c
 1007e4c:	jb     0x1007eb7
 1007e4e:	jbe    0x1007eb1
 1007e50:	je     0x1007eb7
 1007e52:	push   rax
 1007e53:	jb     0x1007ec4
 1007e55:	imul   bp,WORD PTR [rbp+riz*2+0x53],0x7274
 1007e5c:	imul   ebp,DWORD PTR [rsi+0x67],0x46000057
 1007e63:	add    ecx,DWORD PTR [rdi+rbp*2+0x63]
 1007e67:	(bad)  
 1007e68:	ins    BYTE PTR es:[rdi],dx
 1007e69:	rex.B ins BYTE PTR es:[rdi],dx
 1007e6b:	ins    BYTE PTR es:[rdi],dx
 1007e6c:	outs   dx,DWORD PTR ds:[rsi]
 1007e6d:	movsxd eax,DWORD PTR [rax]
 1007e6f:	add    BYTE PTR [rax+0x1],ch
 1007e72:	rex.RX jb 0x1007eda
 1007e75:	imul   r12,QWORD PTR gs:[rdx+0x72],0x797261
 1007e7e:	add    ecx,DWORD PTR ds:[rdi+rbp*2+0x61]
 1007e83:	imul   r12,QWORD PTR fs:[rdx+0x72],0x41797261
 1007e8c:	add    BYTE PTR [rax],al
 1007e8e:	mov    ah,0x3
 1007e90:	push   rdx
 1007e91:	(bad)  
 1007e92:	imul   esi,DWORD PTR [rbx+0x65],0x65637845
 1007e99:	jo     0x1007f0f
 1007e9b:	imul   ebp,DWORD PTR [rdi+0x6e],0x4380000
 1007ea2:	pop    rdi
 1007ea3:	jae    0x1007f1c
 1007ea5:	jae    0x1007f0a
 1007ea7:	(bad)  
 1007ea8:	outs   dx,BYTE PTR ds:[rsi]
 1007ea9:	pop    di
 1007eab:	jae    0x1007f0c
 1007ead:	ins    BYTE PTR es:[rdi],dx
 1007eae:	add    BYTE PTR [rax],al
 1007eb0:	test   eax,0x6d656d05
 1007eb5:	movsxd esi,DWORD PTR [rax+0x79]
 1007eb8:	add    BYTE PTR [rax],al
 1007eba:	sub    BYTE PTR [rcx],al
 1007ebc:	pop    rdi
 1007ebd:	pop    rdi
 1007ebe:	rex.XB js 0x1007f39
 1007ec1:	rex.RX jb 0x1007f25
 1007ec4:	ins    DWORD PTR es:[rdi],dx
 1007ec5:	gs rex.W (bad) 
 1007ec8:	outs   dx,BYTE PTR ds:[rsi]
 1007ec9:	fs ins BYTE PTR es:[rdi],dx
 1007ecb:	gs jb  0x1007f01
 1007ece:	add    BYTE PTR [rax],al
 1007ed0:	lods   eax,DWORD PTR ds:[rsi]
 1007ed1:	add    eax,0x736d656d
 1007ed6:	gs je  0x1007ed9
	...

Disassembly of section .data:

0000000001008000 <.data>:
 1008000:	add    BYTE PTR [rax],al
 1008002:	add    BYTE PTR [rax],al
 1008004:	add    BYTE PTR [rcx],al
	...
 10080fe:	add    BYTE PTR [rax],al
 1008100:	(bad)  
 1008101:	(bad)  
 1008102:	(bad)  
 1008103:	(bad)  
 1008104:	(bad)  
 1008105:	(bad)  
 1008106:	(bad)  
 1008107:	(bad)  
 1008108:	(bad)  
 1008109:	(bad)  
 100810a:	(bad)  
 100810b:	inc    DWORD PTR [rcx]
 100810d:	add    BYTE PTR [rax],al
 100810f:	add    BYTE PTR [rdx],dh
 1008111:	movabs ds:0x5dcd00002b992ddf,al
 100811a:	and    dl,dl
 100811c:	data16 (bad) 
 100811e:	(bad)  
 100811f:	jmp    FWORD PTR [rax]
 1008121:	adc    eax,0x100
 1008126:	add    BYTE PTR [rax],al
 1008128:	or     eax,DWORD PTR [rax]
 100812a:	add    BYTE PTR [rax],al
 100812c:	add    BYTE PTR [rax],al
 100812e:	add    BYTE PTR [rax],al
 1008130:	rex adc eax,0x100
 1008136:	add    BYTE PTR [rax],al
 1008138:	rex.WRB add BYTE PTR [r8],r8b
 100813b:	add    BYTE PTR [rax],al
 100813d:	add    BYTE PTR [rax],al
 100813f:	add    al,ah
 1008141:	adc    eax,0x100
 1008146:	add    BYTE PTR [rax],al
 1008148:	adc    eax,DWORD PTR [rax]
 100814a:	add    BYTE PTR [rax],al
 100814c:	add    BYTE PTR [rax],al
 100814e:	add    BYTE PTR [rax],al
 1008150:	add    BYTE PTR [rdx],al
 1008152:	add    BYTE PTR [rax],al
 1008154:	add    BYTE PTR [rdx],al
 1008156:	add    BYTE PTR [rax],al
 1008158:	(bad)  
 1008159:	(bad)  
 100815a:	(bad)  
 100815b:	(bad)  
 100815c:	(bad)  
 100815d:	(bad)  
 100815e:	(bad)  
 100815f:	(bad)  
 1008160:	cmp    eax,0x10045
 1008165:	add    BYTE PTR [rax],al
 1008167:	add    BYTE PTR [rcx+0x45],cl
 100816a:	add    BYTE PTR [rcx],al
 100816c:	add    BYTE PTR [rax],al
 100816e:	add    BYTE PTR [rax],al
 1008170:	push   rbp
 1008171:	add    BYTE PTR [r9],r8b
 1008174:	add    BYTE PTR [rax],al
 1008176:	add    BYTE PTR [rax],al
 1008178:	(bad)  
 1008179:	add    BYTE PTR [r9],r8b
 100817c:	add    BYTE PTR [rax],al
 100817e:	add    BYTE PTR [rax],al
 1008180:	ins    DWORD PTR es:[rdi],dx
 1008181:	add    BYTE PTR [r9],r8b
 1008184:	add    BYTE PTR [rax],al
 1008186:	add    BYTE PTR [rax],al
 1008188:	mov    eax,0x10044
	...

Disassembly of section .pdata:

000000000100a000 <.pdata>:
 100a000:	shl    BYTE PTR [rax],1
 100a002:	add    BYTE PTR [rax],al
 100a004:	(bad)  
 100a005:	and    BYTE PTR [rax],al
 100a007:	add    al,bl
 100a009:	jo     0x100a00b
 100a00b:	add    dh,bh
 100a00d:	and    BYTE PTR [rax],al
 100a00f:	add    BYTE PTR [rcx+riz*1],dh
 100a012:	add    BYTE PTR [rax],al
 100a014:	in     al,0x70
 100a016:	add    BYTE PTR [rax],al
 100a018:	xor    al,0x21
 100a01a:	add    BYTE PTR [rax],al
 100a01c:	and    DWORD PTR [rax],r8d
 100a01f:	add    al,bh
 100a021:	jo     0x100a023
 100a023:	add    BYTE PTR [rcx+riz*1+0x0],al
 100a027:	add    BYTE PTR [rbx+0x21],cl
 100a02a:	add    BYTE PTR [rax],al
 100a02c:	or     al,0x71
 100a02e:	add    BYTE PTR [rax],al
 100a030:	(bad)  
 100a031:	and    DWORD PTR [rax],eax
 100a033:	add    BYTE PTR [rsi+0x78000021],cl
 100a039:	jo     0x100a03b
 100a03b:	add    BYTE PTR [rsi+0x3a000021],cl
 100a041:	and    al,BYTE PTR [rax]
 100a043:	add    BYTE PTR [rax+rsi*2+0x223a0000],cl
 100a04a:	add    BYTE PTR [rax],al
 100a04c:	jbe    0x100a070
 100a04e:	add    BYTE PTR [rax],al
 100a050:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 100a051:	jo     0x100a053
 100a053:	add    BYTE PTR [rsi+0x22],dh
 100a056:	add    BYTE PTR [rax],al
 100a058:	nop
 100a059:	and    al,BYTE PTR [rax]
 100a05b:	add    BYTE PTR [rax-0x6fffff90],bh
 100a061:	and    al,BYTE PTR [rax]
 100a063:	add    bh,dh
 100a065:	and    al,BYTE PTR [rax]
 100a067:	add    al,cl
 100a069:	jo     0x100a06b
 100a06b:	add    BYTE PTR [rax],al
 100a06d:	and    eax,DWORD PTR [rax]
 100a06f:	add    BYTE PTR [rdi-0x3fffffd9],dl
 100a075:	outs   dx,BYTE PTR ds:[rsi]
 100a076:	add    BYTE PTR [rax],al
 100a078:	movabs al,ds:0x880000289f000027
 100a081:	outs   dx,BYTE PTR ds:[rsi]
 100a082:	add    BYTE PTR [rax],al
 100a084:	lahf   
 100a085:	sub    BYTE PTR [rax],al
 100a087:	add    BYTE PTR [rax],dl
 100a089:	sub    DWORD PTR [rax],eax
 100a08b:	add    BYTE PTR [rsi+rbp*2+0x29100000],bl
 100a092:	add    BYTE PTR [rax],al
 100a094:	xor    BYTE PTR [rcx],ch
 100a096:	add    BYTE PTR [rax],al
 100a098:	mov    al,0x6e
 100a09a:	add    BYTE PTR [rax],al
 100a09c:	rex sub DWORD PTR [rax],eax
 100a09f:	add    al,dl
 100a0a1:	sub    al,BYTE PTR [rax]
 100a0a3:	add    BYTE PTR [rsi+rbp*2],cl
 100a0a6:	add    BYTE PTR [rax],al
 100a0a8:	loopne 0x100a0d4
 100a0aa:	add    BYTE PTR [rax],al
 100a0ac:	(bad)  
 100a0ad:	sub    eax,DWORD PTR [rax]
 100a0af:	add    BYTE PTR [rbp+rbp*2+0x2c100000],cl
 100a0b6:	add    BYTE PTR [rax],al
 100a0b8:	(bad)  
 100a0b9:	sub    al,0x0
 100a0bb:	add    BYTE PTR [rax],ah
 100a0bd:	ins    DWORD PTR es:[rdi],dx
 100a0be:	add    BYTE PTR [rax],al
 100a0c0:	(bad)  
 100a0c1:	sub    al,0x0
 100a0c3:	add    BYTE PTR [rdi+0x2d],ch
 100a0c6:	add    BYTE PTR [rax],al
 100a0c8:	cmp    al,0x6d
 100a0ca:	add    BYTE PTR [rax],al
 100a0cc:	outs   dx,DWORD PTR ds:[rsi]
 100a0cd:	sub    eax,0x2d8d0000
 100a0d2:	add    BYTE PTR [rax],al
 100a0d4:	push   rsp
 100a0d5:	ins    DWORD PTR es:[rdi],dx
 100a0d6:	add    BYTE PTR [rax],al
 100a0d8:	lea    ebp,[rip+0x2ed80000]        # 0x2fd8a0de
 100a0de:	add    BYTE PTR [rax],al
 100a0e0:	fs ins DWORD PTR es:[rdi],dx
 100a0e2:	add    BYTE PTR [rax],al
 100a0e4:	fsubr  DWORD PTR [rsi]
 100a0e6:	add    BYTE PTR [rax],al
 100a0e8:	loopne 0x100a118
 100a0ea:	add    BYTE PTR [rax],al
 100a0ec:	jl     0x100a15b
 100a0ee:	add    BYTE PTR [rax],al
 100a0f0:	lock add BYTE PTR cs:[rax],al
 100a0f4:	(bad)  
 100a0f5:	xor    DWORD PTR [rax],eax
 100a0f7:	add    BYTE PTR [rax],al
 100a0f9:	ins    DWORD PTR es:[rdi],dx
 100a0fa:	add    BYTE PTR [rax],al
 100a0fc:	loopne 0x100a12f
 100a0fe:	add    BYTE PTR [rax],al
 100a100:	jmp    0xfffffffff900a137
 100a105:	ins    BYTE PTR es:[rdi],dx
 100a106:	add    BYTE PTR [rax],al
 100a108:	lock xor al,BYTE PTR [rax]
 100a10b:	add    bl,dl
 100a10d:	xor    eax,DWORD PTR [rax]
 100a10f:	add    al,dh
 100a111:	ins    BYTE PTR es:[rdi],dx
 100a112:	add    BYTE PTR [rax],al
 100a114:	loopne 0x100a149
 100a116:	add    BYTE PTR [rax],al
 100a118:	div    BYTE PTR [rdi]
 100a11a:	add    BYTE PTR [rax],al
 100a11c:	lods   al,BYTE PTR ds:[rsi]
 100a11d:	ins    BYTE PTR es:[rdi],dx
 100a11e:	add    BYTE PTR [rax],al
 100a120:	add    BYTE PTR [rax],bh
 100a122:	add    BYTE PTR [rax],al
 100a124:	pop    rsi
 100a125:	cmp    DWORD PTR [rax],eax
 100a127:	add    BYTE PTR [rax+0x7000006c],dl
 100a12d:	cmp    DWORD PTR [rax],eax
 100a12f:	add    BYTE PTR [rdi+0x7c00003a],bh
 100a135:	ins    BYTE PTR es:[rdi],dx
 100a136:	add    BYTE PTR [rax],al
 100a138:	sar    BYTE PTR [rdx],1
 100a13a:	add    BYTE PTR [rax],al
 100a13c:	in     al,0x3a
 100a13e:	add    BYTE PTR [rax],al
 100a140:	cmp    BYTE PTR [rax+rax*1+0x0],ch
 100a144:	in     al,0x3a
 100a146:	add    BYTE PTR [rax],al
 100a148:	mov    eax,0x4400003b
 100a14d:	ins    BYTE PTR es:[rdi],dx
 100a14e:	add    BYTE PTR [rax],al
 100a150:	mov    eax,0xba00003b
 100a155:	cmp    eax,DWORD PTR [rax]
 100a157:	add    BYTE PTR [rax+0x6c],bl
 100a15a:	add    BYTE PTR [rax],al
 100a15c:	mov    edx,0xd500003b
 100a161:	cmp    eax,DWORD PTR [rax]
 100a163:	add    BYTE PTR [rax+0x6c],ch
 100a166:	add    BYTE PTR [rax],al
 100a168:	loopne 0x100a1a5
 100a16a:	add    BYTE PTR [rax],al
 100a16c:	and    bh,BYTE PTR [rax+rax*1]
 100a16f:	add    BYTE PTR [rsp+rbp*2],ch
 100a172:	add    BYTE PTR [rax],al
 100a174:	xor    BYTE PTR [rax+rax*1],bh
 100a177:	add    BYTE PTR [rdi+0x3c],al
 100a17a:	add    BYTE PTR [rax],al
 100a17c:	and    al,0x6c
 100a17e:	add    BYTE PTR [rax],al
 100a180:	jo     0x100a1be
 100a182:	add    BYTE PTR [rax],al
 100a184:	(bad)  
 100a185:	cmp    al,0x0
 100a187:	add    BYTE PTR [rax],ah
 100a189:	push   0x3cdc0000
 100a18e:	add    BYTE PTR [rax],al
 100a190:	pop    rsp
 100a191:	add    BYTE PTR ds:[rax],al
 100a194:	xor    BYTE PTR [rax+0x0],ch
 100a197:	add    BYTE PTR [rsi+rdi*1+0x0],ah
 100a19b:	add    BYTE PTR [rdx],dh
 100a19d:	(bad)  
 100a19e:	add    BYTE PTR [rax],al
 100a1a0:	push   rsp
 100a1a1:	push   0x3f380000
 100a1a6:	add    BYTE PTR [rax],al
 100a1a8:	rex.WX (bad) 
 100a1aa:	add    BYTE PTR [rax],al
 100a1ac:	pop    rsp
 100a1ad:	push   0x3f600000
 100a1b2:	add    BYTE PTR [rax],al
 100a1b4:	jg     0x100a1f5
 100a1b6:	add    BYTE PTR [rax],al
 100a1b8:	push   0xffffffff88000068
 100a1bd:	(bad)  
 100a1be:	add    BYTE PTR [rax],al
 100a1c0:	rol    BYTE PTR [rax+0x0],cl
 100a1c3:	add    BYTE PTR [rax+rbp*2+0x0],ch
 100a1c7:	add    al,bl
 100a1c9:	add    BYTE PTR [rax],al
 100a1cc:	mov    BYTE PTR [rcx+0x0],al
 100a1cf:	add    BYTE PTR [rax+rbp*2+0x0],bh
 100a1d3:	add    BYTE PTR [rax-0x58ffffbf],dl
 100a1d9:	add    BYTE PTR [r8],al
 100a1dc:	pushf  
 100a1dd:	push   0x41b00000
 100a1e2:	add    BYTE PTR [rax],al
 100a1e4:	icebp  
 100a1e5:	add    BYTE PTR [r8],al
 100a1e8:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 100a1e9:	push   0x41f80000
 100a1ee:	add    BYTE PTR [rax],al
 100a1f0:	adc    BYTE PTR [rdx+0x0],al
 100a1f3:	add    BYTE PTR [rax+rbp*2+0x42240000],ch
 100a1fa:	add    BYTE PTR [rax],al
 100a1fc:	pop    rsp
 100a1fd:	rex.X add BYTE PTR [rax],al
 100a200:	mov    ah,0x68
 100a202:	add    BYTE PTR [rax],al
 100a204:	rex.X add BYTE PTR fs:[rax],al
 100a208:	pushf  
 100a209:	rex.X add BYTE PTR [rax],al
 100a20c:	shr    BYTE PTR [rax+0x0],0x0
 100a210:	push   rax
 100a211:	rex.XB add BYTE PTR [r8],al
 100a214:	xchg   ecx,eax
 100a215:	rex.XB add BYTE PTR [r8],al
 100a218:	(bad)  
 100a219:	push   0x43c80000
 100a21e:	add    BYTE PTR [rax],al
 100a220:	jnp    0x100a266
 100a222:	add    BYTE PTR [rax],al
 100a224:	hlt    
 100a225:	push   0x44c40000
 100a22a:	add    BYTE PTR [rax],al
 100a22c:	cmp    eax,DWORD PTR [rbp+0x0]
 100a22f:	add    BYTE PTR [rax],al
 100a231:	imul   eax,DWORD PTR [rax],0x458000
 100a237:	add    bl,dl
 100a239:	rex.WRB add BYTE PTR [r8],r8b
 100a23c:	adc    BYTE PTR [rcx+0x0],ch
 100a23f:	add    al,ah
 100a241:	rex.WRB add BYTE PTR [r8],r8b
 100a244:	pop    rdi
 100a245:	rex.WRX add BYTE PTR [rax],r8b
 100a248:	or     BYTE PTR [rcx+0x0],ch
 100a24b:	add    BYTE PTR [rax+0x4e],dh
 100a24e:	add    BYTE PTR [rax],al
 100a250:	ror    BYTE PTR [rsi+0x0],1
 100a253:	add    BYTE PTR [rcx+rbp*2],dh
 100a256:	add    BYTE PTR [rax],al
 100a258:	loopne 0x100a2a8
 100a25a:	add    BYTE PTR [rax],al
 100a25c:	pop    rsp
 100a25d:	rex.WRXB add BYTE PTR [r8],r8b
 100a260:	cmp    al,0x69
 100a262:	add    BYTE PTR [rax],al
 100a264:	jo     0x100a2b5
 100a266:	add    BYTE PTR [rax],al
 100a268:	lods   eax,DWORD PTR ds:[rsi]
 100a269:	rex.WRXB add BYTE PTR [r8],r8b
 100a26c:	imul   r8d,DWORD PTR [rax],0x4fc000
 100a273:	add    BYTE PTR [rsi],ah
 100a275:	push   rax
 100a276:	add    BYTE PTR [rax],al
 100a278:	imul   r8,QWORD PTR [rax],0x503000
 100a27f:	add    bl,dl
 100a281:	push   rax
 100a282:	add    BYTE PTR [rax],al
 100a284:	push   rsp
 100a285:	imul   eax,DWORD PTR [rax],0x50e000
 100a28b:	add    bl,cl
 100a28d:	push   rcx
 100a28e:	add    BYTE PTR [rax],al
 100a290:	pop    rsp
 100a291:	imul   eax,DWORD PTR [rax],0x520000
 100a297:	add    BYTE PTR [rax],dh
 100a299:	push   rdx
 100a29a:	add    BYTE PTR [rax],al
 100a29c:	imul   eax,DWORD PTR fs:[rax],0x524000
 100a2a3:	add    BYTE PTR [rdi+0x52],bl
 100a2a6:	add    BYTE PTR [rax],al
 100a2a8:	ins    BYTE PTR es:[rdi],dx
 100a2a9:	imul   eax,DWORD PTR [rax],0x525f00
 100a2af:	add    BYTE PTR [rdx+0x78000052],dh
 100a2b5:	imul   eax,DWORD PTR [rax],0x52b200
 100a2bb:	add    BYTE PTR [rdx*2+0x69900000],al
 100a2c2:	add    BYTE PTR [rax],al
 100a2c4:	add    al,0x55
 100a2c6:	add    BYTE PTR [rax],al
 100a2c8:	cmp    edx,DWORD PTR [rbp+0x0]
 100a2cb:	add    BYTE PTR [rax+0x3b000069],dh
 100a2d1:	push   rbp
 100a2d2:	add    BYTE PTR [rax],al
 100a2d4:	movsxd edx,DWORD PTR [rbp+0x0]
 100a2d7:	add    al,al
 100a2d9:	imul   eax,DWORD PTR [rax],0x557000
 100a2df:	add    BYTE PTR [rbx-0x2fffffa9],ah
 100a2e5:	imul   eax,DWORD PTR [rax],0x57b000
 100a2eb:	add    dh,dl
 100a2ed:	push   rdi
 100a2ee:	add    BYTE PTR [rax],al
 100a2f0:	lock imul eax,DWORD PTR [rax],0x57d600
 100a2f7:	add    BYTE PTR [rdx],dl
 100a2f9:	pop    rax
 100a2fa:	add    BYTE PTR [rax],al
 100a2fc:	clc    
 100a2fd:	imul   eax,DWORD PTR [rax],0x581200
 100a303:	add    BYTE PTR [rcx],ah
 100a305:	pop    rax
 100a306:	add    BYTE PTR [rax],al
 100a308:	or     al,0x6a
 100a30a:	add    BYTE PTR [rax],al
 100a30c:	xor    BYTE PTR [rax+0x0],bl
 100a30f:	add    ch,ah
 100a311:	pop    rax
 100a312:	add    BYTE PTR [rax],al
 100a314:	sub    BYTE PTR [rdx+0x0],ch
 100a317:	add    al,dh
 100a319:	pop    rax
 100a31a:	add    BYTE PTR [rax],al
 100a31c:	mov    cl,0x59
 100a31e:	add    BYTE PTR [rax],al
 100a320:	xor    BYTE PTR [rdx+0x0],ch
 100a323:	add    al,al
 100a325:	pop    rcx
 100a326:	add    BYTE PTR [rax],al
 100a328:	sbb    bl,BYTE PTR [rdx+0x0]
 100a32b:	add    BYTE PTR [rax+0x6a],cl
 100a32e:	add    BYTE PTR [rax],al
 100a330:	sbb    bl,BYTE PTR [rdx+0x0]
 100a333:	add    dh,dl
 100a335:	pop    rdx
 100a336:	add    BYTE PTR [rax],al
 100a338:	(bad)  
 100a339:	push   0x0
 100a33b:	add    dh,dl
 100a33d:	pop    rdx
 100a33e:	add    BYTE PTR [rax],al
 100a340:	out    dx,eax
 100a341:	pop    rdx
 100a342:	add    BYTE PTR [rax],al
 100a344:	je     0x100a3b0
 100a346:	add    BYTE PTR [rax],al
 100a348:	add    BYTE PTR [rbx+0x0],bl
 100a34b:	add    BYTE PTR [rdx],bh
 100a34d:	pop    rbx
 100a34e:	add    BYTE PTR [rax],al
 100a350:	test   BYTE PTR [rdx+0x0],ch
 100a353:	add    BYTE PTR [rdx],bh
 100a355:	pop    rbx
 100a356:	add    BYTE PTR [rax],al
 100a358:	sub    ebx,DWORD PTR [rax+rax*1+0x0]
 100a35c:	xchg   esp,eax
 100a35d:	push   0x0
 100a35f:	add    BYTE PTR [rbx],ch
 100a361:	pop    rsp
 100a362:	add    BYTE PTR [rax],al
 100a364:	cmp    BYTE PTR [rax+rax*1+0x0],bl
 100a368:	mov    al,0x6a
 100a36a:	add    BYTE PTR [rax],al
 100a36c:	rex pop rsp
 100a36e:	add    BYTE PTR [rax],al
 100a370:	jae    0x100a3ce
 100a372:	add    BYTE PTR [rax],al
 100a374:	shr    BYTE PTR [rdx+0x0],0x0
 100a378:	jae    0x100a3d6
 100a37a:	add    BYTE PTR [rax],al
 100a37c:	ins    BYTE PTR es:[rdi],dx
 100a37d:	pop    rbp
 100a37e:	add    BYTE PTR [rax],al
 100a380:	int3   
 100a381:	push   0x0
 100a383:	add    BYTE PTR [rbp+rbx*2+0x0],ch
 100a387:	add    BYTE PTR [rsi+0x5d],dh
 100a38a:	add    BYTE PTR [rax],al
 100a38c:	lock push 0x0
 100a38f:	add    BYTE PTR [rsi+0x5d],dh
 100a392:	add    BYTE PTR [rax],al
 100a394:	or     bl,BYTE PTR [rsi+0x0]
 100a397:	add    BYTE PTR [rax],al
 100a399:	imul   eax,DWORD PTR [rax],0x0
 100a39c:	adc    BYTE PTR [rsi+0x0],bl
 100a39f:	add    BYTE PTR [rcx+0x2400005e],dl
 100a3a5:	imul   eax,DWORD PTR [rax],0x0
 100a3a8:	movabs al,ds:0x2c00005f0400005e
 100a3b1:	imul   eax,DWORD PTR [rax],0x0
 100a3b4:	add    al,0x5f
 100a3b6:	add    BYTE PTR [rax],al
 100a3b8:	outs   dx,DWORD PTR ds:[rsi]
 100a3b9:	pop    rdi
 100a3ba:	add    BYTE PTR [rax],al
 100a3bc:	xor    al,0x6b
 100a3be:	add    BYTE PTR [rax],al
 100a3c0:	outs   dx,DWORD PTR ds:[rsi]
 100a3c1:	pop    rdi
 100a3c2:	add    BYTE PTR [rax],al
 100a3c4:	mov    WORD PTR [rdi+0x0],ds
 100a3c7:	add    BYTE PTR [rax+0x6b],dl
 100a3ca:	add    BYTE PTR [rax],al
 100a3cc:	mov    WORD PTR [rdi+0x0],ds
 100a3cf:	add    BYTE PTR [rdi+0x6c00005f],bl
 100a3d5:	imul   eax,DWORD PTR [rax],0x0
 100a3d8:	mov    al,0x5f
 100a3da:	add    BYTE PTR [rax],al
 100a3dc:	fstp   DWORD PTR [rdi+0x0]
 100a3df:	add    BYTE PTR [rbx+rbp*2+0x0],bh
 100a3e3:	add    cl,bl
 100a3e5:	pop    rdi
 100a3e6:	add    BYTE PTR [rax],al
 100a3e8:	adc    BYTE PTR [rax+0x0],ah
 100a3eb:	add    BYTE PTR [rbx+rbp*2+0x60100000],al
 100a3f2:	add    BYTE PTR [rax],al
 100a3f4:	jl     0x100a456
 100a3f6:	add    BYTE PTR [rax],al
 100a3f8:	pushf  
 100a3f9:	imul   eax,DWORD PTR [rax],0x0
 100a3fc:	jl     0x100a45e
 100a3fe:	add    BYTE PTR [rax],al
 100a400:	mov    ch,0x60
 100a402:	add    BYTE PTR [rax],al
 100a404:	mov    eax,0xb500006b
 100a409:	(bad)  
 100a40a:	add    BYTE PTR [rax],al
 100a40c:	shl    BYTE PTR [rax+0x0],1
 100a40f:	add    ah,dl
 100a411:	imul   eax,DWORD PTR [rax],0x0
 100a414:	fsub   DWORD PTR [rax+0x0]
 100a417:	add    dh,al
 100a419:	movsxd eax,DWORD PTR [rax]
 100a41b:	add    ah,ah
 100a41d:	imul   eax,DWORD PTR [rax],0x0
 100a420:	in     al,0x63
 100a422:	add    BYTE PTR [rax],al
 100a424:	js     0x100a48a
 100a426:	add    BYTE PTR [rax],al
 100a428:	cld    
 100a429:	imul   eax,DWORD PTR [rax],0x0
 100a42c:	cwde   
 100a42d:	add    BYTE PTR fs:[rax],al
 100a430:	sti    
 100a431:	add    BYTE PTR fs:[rax],al
 100a434:	adc    al,0x6c
 100a436:	add    BYTE PTR [rax],al
 100a438:	add    al,0x65
 100a43a:	add    BYTE PTR [rax],al
 100a43c:	and    DWORD PTR [rbp+0x0],esp
 100a43f:	add    BYTE PTR [rsp+rbp*2],bl
 100a442:	add    BYTE PTR [rax],al
 100a444:	xor    al,0x65
 100a446:	add    BYTE PTR [rax],al
 100a448:	ret    
 100a449:	add    BYTE PTR gs:[rax],al
 100a44c:	sbb    al,0x71
 100a44e:	add    BYTE PTR [rax],al
 100a450:	loopne 0x100a4b7
 100a452:	add    BYTE PTR [rax],al
 100a454:	data16 add BYTE PTR cs:[rax],al
 100a458:	cmp    BYTE PTR [rcx+0x0],dh
 100a45b:	add    BYTE PTR [rsi+0x66],al
 100a45e:	add    BYTE PTR [rax],al
 100a460:	data16 add BYTE PTR fs:[rax],al
 100a464:	sub    BYTE PTR [rax+0x0],ch
 100a467:	add    BYTE PTR [rdx+0x66],ch
 100a46a:	add    BYTE PTR [rax],al
 100a46c:	test   DWORD PTR [rsi+0x0],esp
 100a46f:	add    BYTE PTR [rax+rbp*2+0x0],dh
 100a473:	add    BYTE PTR [rax-0x4dffff9a],dl
 100a479:	data16 add BYTE PTR [rax],al
 100a47c:	int3   
 100a47d:	push   0x67500000
 100a482:	add    BYTE PTR [rax],al
 100a484:	scas   al,BYTE PTR es:[rdi]
 100a485:	add    BYTE PTR [eax],al
 100a488:	in     al,0x6c
 100a48a:	add    BYTE PTR [rax],al
 100a48c:	loopne 0x100a4f5
 100a48e:	add    BYTE PTR [rax],al
 100a490:	hlt    
 100a491:	add    BYTE PTR [eax],al
 100a494:	and    BYTE PTR [rdx+0x0],ch
	...

Disassembly of section .rsrc:

000000000100b000 <.rsrc>:
	...
 100b008:	add    al,0x0
 100b00a:	add    BYTE PTR [rax],al
 100b00c:	add    BYTE PTR [rax],al
 100b00e:	add    al,BYTE PTR [rax]
 100b010:	adc    BYTE PTR [rax],al
 100b012:	add    BYTE PTR [rax],al
 100b014:	and    BYTE PTR [rax],al
 100b016:	add    BYTE PTR [rax+0x18],al
 100b01c:	cmp    BYTE PTR [rax],al
 100b01e:	add    BYTE PTR [rax+0x0],al
 100b024:	add    BYTE PTR [rax],al
 100b026:	add    BYTE PTR [rax],al
 100b028:	add    al,0x0
 100b02a:	add    BYTE PTR [rax],al
 100b02c:	add    BYTE PTR [rax],al
 100b02e:	add    DWORD PTR [rax],eax
 100b030:	add    DWORD PTR [rax],eax
 100b032:	add    BYTE PTR [rax],al
 100b034:	push   rax
 100b035:	add    BYTE PTR [rax],al
 100b037:	add    BYTE PTR [rax],0x0
 100b03a:	add    BYTE PTR [rax],al
 100b03c:	add    BYTE PTR [rax],al
 100b03e:	add    BYTE PTR [rax],al
 100b040:	add    al,0x0
 100b042:	add    BYTE PTR [rax],al
 100b044:	add    BYTE PTR [rax],al
 100b046:	add    DWORD PTR [rax],eax
 100b048:	add    DWORD PTR [rax],eax
 100b04a:	add    BYTE PTR [rax],al
 100b04c:	push   0x800000
 100b051:	add    BYTE PTR [rax],al
 100b053:	add    BYTE PTR [rax],al
 100b055:	add    BYTE PTR [rax],al
 100b057:	add    BYTE PTR [rax+rax*1],al
 100b05a:	add    BYTE PTR [rax],al
 100b05c:	add    BYTE PTR [rax],al
 100b05e:	add    DWORD PTR [rax],eax
 100b060:	or     DWORD PTR [rax+rax*1],eax
 100b063:	add    BYTE PTR [rax+0x0],al
 100b069:	add    BYTE PTR [rax],al
 100b06b:	add    BYTE PTR [rax],al
 100b06d:	add    BYTE PTR [rax],al
 100b06f:	add    BYTE PTR [rax+rax*1],al
 100b072:	add    BYTE PTR [rax],al
 100b074:	add    BYTE PTR [rax],al
 100b076:	add    DWORD PTR [rax],eax
 100b078:	or     DWORD PTR [rax+rax*1],eax
 100b07b:	add    BYTE PTR [rax-0x60000000],dl
 100b081:	mov    al,0x0
 100b083:	add    ah,cl
 100b085:	add    al,0x0
 100b087:	add    ah,ah
 100b089:	add    al,0x0
 100b08b:	add    BYTE PTR [rax],al
 100b08d:	add    BYTE PTR [rax],al
 100b08f:	add    BYTE PTR [rbp+rsi*4+0x0],ch
 100b093:	add    BYTE PTR [rdx+0x1],bl
 100b096:	add    BYTE PTR [rax],al
 100b098:	in     al,0x4
 100b09a:	add    BYTE PTR [rax],al
 100b09c:	add    BYTE PTR [rax],al
 100b09e:	add    BYTE PTR [rax],al
 100b0a0:	int3   
 100b0a1:	add    al,0x34
 100b0a3:	add    BYTE PTR [rax],al
 100b0a5:	add    BYTE PTR [rsi+0x0],dl
 100b0a8:	push   rbx
 100b0a9:	add    BYTE PTR [rdi+0x0],bl
 100b0ac:	push   rsi
 100b0ad:	add    BYTE PTR [rbp+0x0],al
 100b0b0:	push   rdx
 100b0b1:	add    BYTE PTR [rbx+0x0],dl
 100b0b4:	rex.WB add BYTE PTR [r15+0x0],cl
 100b0b8:	rex.WRX add BYTE PTR [rdi+0x0],r11b
 100b0bc:	rex.WB add BYTE PTR [r14+0x0],cl
 100b0c0:	rex.RX add BYTE PTR [rdi+0x0],r9b
 100b0c4:	add    BYTE PTR [rax],al
 100b0c6:	add    BYTE PTR [rax],al
 100b0c8:	mov    ebp,0xfeef04
 100b0cd:	add    BYTE PTR [rcx],al
 100b0cf:	add    BYTE PTR [rsi+0x0],ch
 100b0d2:	fild   DWORD PTR [rdi]
 100b0d4:	cmp    al,0x0
 100b0d6:	xor    al,0x8
 100b0d8:	add    BYTE PTR [rax],al
 100b0da:	or     eax,DWORD PTR [rax]
 100b0dc:	cmp    al,0x0
 100b0de:	xor    al,0x8
 100b0e0:	(bad)  
 100b0e1:	add    BYTE PTR [rax],al
 100b0e3:	add    BYTE PTR [rax],cl
 100b0e5:	add    BYTE PTR [rax],al
 100b0e7:	add    BYTE PTR [rax],al
 100b0e9:	add    BYTE PTR [rax+rax*1],al
 100b0ec:	add    DWORD PTR [rax],eax
	...
 100b0fa:	add    BYTE PTR [rax],al
 100b0fc:	sub    al,BYTE PTR [rax+rax*1]
 100b0ff:	add    BYTE PTR [rcx],al
 100b101:	add    BYTE PTR [rbx+0x0],dl
 100b104:	je     0x100b106
 100b106:	jb     0x100b108
 100b108:	imul   eax,DWORD PTR [rax],0x67006e
 100b10e:	rex.RX add BYTE PTR [rcx+0x0],r13b
 100b112:	ins    BYTE PTR es:[rdi],dx
 100b113:	add    BYTE PTR [rbp+0x0],ah
 100b116:	rex.WB add BYTE PTR [r14+0x0],bpl
 100b11a:	data16 add BYTE PTR [rdi+0x0],ch
 100b11e:	add    BYTE PTR [rax],al
 100b120:	(bad)  
 100b121:	add    al,0x0
 100b123:	add    BYTE PTR [rcx],al
 100b125:	add    BYTE PTR [rax],dh
 100b127:	add    BYTE PTR [rax+rax*1],dh
 100b12a:	xor    BYTE PTR [rax],al
 100b12c:	cmp    DWORD PTR [rax],eax
 100b12e:	xor    BYTE PTR [rax],al
 100b130:	xor    al,0x0
 100b132:	rex.X add BYTE PTR [rax],sil
 100b135:	add    BYTE PTR [rax],al
 100b137:	add    BYTE PTR [rsi],ah
 100b139:	add    BYTE PTR [rdi],al
 100b13b:	add    BYTE PTR [rcx],al
 100b13d:	add    BYTE PTR [rax+0x0],dl
 100b140:	ins    BYTE PTR es:[rdi],dx
 100b141:	add    BYTE PTR [rcx+0x0],ah
 100b144:	je     0x100b146
 100b146:	data16 add BYTE PTR [rdi+0x0],ch
 100b14a:	jb     0x100b14c
 100b14c:	ins    DWORD PTR es:[rdi],dx
 100b14d:	add    BYTE PTR [rax],al
 100b14f:	add    BYTE PTR [rsi+0x0],cl
 100b152:	push   rsp
 100b153:	add    BYTE PTR [rax],ah
 100b155:	add    BYTE PTR [rax+0x0],bh
 100b158:	add    BYTE PTR ss:[rax+rax*1],dh
 100b15c:	add    BYTE PTR [rax],al
 100b15e:	add    BYTE PTR [rax],al
 100b160:	mov    edx,0x1004900
 100b165:	add    BYTE PTR [rax+rax*1+0x65],cl
 100b169:	add    BYTE PTR [rdi+0x0],ah
 100b16c:	(bad)  
 100b16d:	add    BYTE PTR [rax+rax*1+0x54],ch
 100b171:	add    BYTE PTR [rdx+0x0],dh
 100b174:	(bad)  
 100b175:	add    BYTE PTR [rax+rax*1+0x65],ah
 100b179:	add    BYTE PTR [rbp+0x0],ch
 100b17c:	(bad)  
 100b17d:	add    BYTE PTR [rdx+0x0],dh
 100b180:	imul   eax,DWORD PTR [rax],0x73
 100b183:	add    BYTE PTR [rax],al
 100b185:	add    BYTE PTR [rax],al
 100b187:	add    BYTE PTR [rbp+0x0],cl
 100b18a:	imul   eax,DWORD PTR [rax],0x720063
 100b190:	outs   dx,DWORD PTR ds:[rsi]
 100b191:	add    BYTE PTR [rbx+0x0],dh
 100b194:	outs   dx,DWORD PTR ds:[rsi]
 100b195:	add    BYTE PTR [rsi+0x0],ah
 100b198:	je     0x100b19a
 100b19a:	and    BYTE PTR [rax],al
 100b19c:	push   rbx
 100b19d:	add    BYTE PTR [rcx+0x0],dl
 100b1a0:	rex.WR add BYTE PTR [rax],r12b
 100b1a3:	add    BYTE PTR [rbx+0x0],dl
 100b1a6:	add    BYTE PTR gs:[rdx+0x0],dh
 100b1aa:	jbe    0x100b1ac
 100b1ac:	add    BYTE PTR gs:[rdx+0x0],dh
 100b1b0:	and    BYTE PTR [rax],al
 100b1b2:	imul   eax,DWORD PTR [rax],0x200073
 100b1b8:	(bad)  
 100b1b9:	add    BYTE PTR [rax],ah
 100b1bb:	add    BYTE PTR [rdx+0x0],dh
 100b1be:	add    BYTE PTR gs:[rdi+0x0],ah
 100b1c2:	imul   eax,DWORD PTR [rax],0x740073
 100b1c8:	add    BYTE PTR gs:[rdx+0x0],dh
 100b1cc:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 100b1d1:	add    BYTE PTR [rax+rax*1+0x72],dh
 100b1d5:	add    BYTE PTR [rcx+0x0],ah
 100b1d8:	add    BYTE PTR fs:[rbp+0x0],ah
 100b1dc:	ins    DWORD PTR es:[rdi],dx
 100b1dd:	add    BYTE PTR [rcx+0x0],ah
 100b1e0:	jb     0x100b1e2
 100b1e2:	imul   eax,DWORD PTR [rax],0x20
 100b1e5:	add    BYTE PTR [rdi+0x0],ch
 100b1e8:	data16 add BYTE PTR [rax],ah
 100b1eb:	add    BYTE PTR [rbp+0x0],cl
 100b1ee:	imul   eax,DWORD PTR [rax],0x720063
 100b1f4:	outs   dx,DWORD PTR ds:[rsi]
 100b1f5:	add    BYTE PTR [rbx+0x0],dh
 100b1f8:	outs   dx,DWORD PTR ds:[rsi]
 100b1f9:	add    BYTE PTR [rsi+0x0],ah
 100b1fc:	je     0x100b1fe
 100b1fe:	and    BYTE PTR [rax],al
 100b200:	rex.XB add BYTE PTR [r15+0x0],bpl
 100b204:	jb     0x100b206
 100b206:	jo     0x100b208
 100b208:	outs   dx,DWORD PTR ds:[rsi]
 100b209:	add    BYTE PTR [rdx+0x0],dh
 100b20c:	(bad)  
 100b20d:	add    BYTE PTR [rax+rax*1+0x69],dh
 100b211:	add    BYTE PTR [rdi+0x0],ch
 100b214:	outs   dx,BYTE PTR ds:[rsi]
 100b215:	add    BYTE PTR [rsi],ch
 100b217:	add    BYTE PTR [rax],al
 100b219:	add    BYTE PTR [rax],al
 100b21b:	add    BYTE PTR [rax],ah
 100b21d:	add    BYTE PTR [rax+rax*1],al
 100b220:	add    DWORD PTR [rax],eax
 100b222:	rex.XB add BYTE PTR [r15+0x0],bpl
 100b226:	ins    DWORD PTR es:[rdi],dx
 100b227:	add    BYTE PTR [rbp+0x0],ch
 100b22a:	add    BYTE PTR gs:[rsi+0x0],ch
 100b22e:	je     0x100b230
 100b230:	jae    0x100b232
 100b232:	add    BYTE PTR [rax],al
 100b234:	push   rbx
 100b235:	add    BYTE PTR [rcx+0x0],dl
 100b238:	rex.WR add BYTE PTR [rax],r8b
 100b23b:	add    BYTE PTR [rsi],ah
 100b23d:	add    BYTE PTR [rip+0x47000100],al        # 0x4800b343
 100b243:	add    BYTE PTR [rdi+0x0],ch
 100b246:	ins    BYTE PTR es:[rdi],dx
 100b247:	add    BYTE PTR [rax+rax*1+0x65],ah
 100b24b:	add    BYTE PTR [rsi+0x0],ch
 100b24e:	rex.X add BYTE PTR [rcx+0x0],bpl
 100b252:	je     0x100b254
 100b254:	jae    0x100b256
 100b256:	add    BYTE PTR [rax],al
 100b258:	push   rsp
 100b259:	add    BYTE PTR [rdx+0x0],dh
 100b25c:	jne    0x100b25e
 100b25e:	add    BYTE PTR gs:[rax],al
 100b261:	add    BYTE PTR [rax],al
 100b263:	add    BYTE PTR [rax+rax*1+0x16],cl
 100b267:	add    BYTE PTR [rcx],al
 100b269:	add    BYTE PTR [rbx+0x0],al
 100b26c:	outs   dx,DWORD PTR ds:[rsi]
 100b26d:	add    BYTE PTR [rbp+0x0],ch
 100b270:	jo     0x100b272
 100b272:	(bad)  
 100b273:	add    BYTE PTR [rsi+0x0],ch
 100b276:	jns    0x100b278
 100b278:	rex.WRX add BYTE PTR [rcx+0x0],r12b
 100b27c:	ins    DWORD PTR es:[rdi],dx
 100b27d:	add    BYTE PTR [rbp+0x0],ah
 100b280:	add    BYTE PTR [rax],al
 100b282:	add    BYTE PTR [rax],al
 100b284:	rex.WRB add BYTE PTR [r9+0x0],r13b
 100b288:	movsxd eax,DWORD PTR [rax]
 100b28a:	jb     0x100b28c
 100b28c:	outs   dx,DWORD PTR ds:[rsi]
 100b28d:	add    BYTE PTR [rbx+0x0],dh
 100b290:	outs   dx,DWORD PTR ds:[rsi]
 100b291:	add    BYTE PTR [rsi+0x0],ah
 100b294:	je     0x100b296
 100b296:	and    BYTE PTR [rax],al
 100b298:	rex.XB add BYTE PTR [r15+0x0],bpl
 100b29c:	jb     0x100b29e
 100b29e:	jo     0x100b2a0
 100b2a0:	outs   dx,DWORD PTR ds:[rsi]
 100b2a1:	add    BYTE PTR [rdx+0x0],dh
 100b2a4:	(bad)  
 100b2a5:	add    BYTE PTR [rax+rax*1+0x69],dh
 100b2a9:	add    BYTE PTR [rdi+0x0],ch
 100b2ac:	outs   dx,BYTE PTR ds:[rsi]
 100b2ad:	add    BYTE PTR [rax],al
 100b2af:	add    BYTE PTR [rsi+0x0],bh
 100b2b2:	sub    eax,DWORD PTR [rax]
 100b2b4:	add    DWORD PTR [rax],eax
 100b2b6:	rex.RX add BYTE PTR [rcx+0x0],r13b
 100b2ba:	ins    BYTE PTR es:[rdi],dx
 100b2bb:	add    BYTE PTR [rbp+0x0],ah
 100b2be:	add    BYTE PTR [rbp+0x0],r12b
 100b2c2:	jae    0x100b2c4
 100b2c4:	movsxd eax,DWORD PTR [rax]
 100b2c6:	jb     0x100b2c8
 100b2c8:	imul   eax,DWORD PTR [rax],0x740070
 100b2ce:	imul   eax,DWORD PTR [rax],0x6e006f
 100b2d4:	add    BYTE PTR [rax],al
 100b2d6:	add    BYTE PTR [rax],al
 100b2d8:	push   rbx
 100b2d9:	add    BYTE PTR [rcx+0x0],dl
 100b2dc:	rex.WR add BYTE PTR [rax],r12b
 100b2df:	add    BYTE PTR [rsi+0x0],al
 100b2e2:	jne    0x100b2e4
 100b2e4:	ins    BYTE PTR es:[rdi],dx
 100b2e5:	add    BYTE PTR [rax+rax*1+0x2d],ch
 100b2e9:	add    BYTE PTR [rax+rax*1+0x65],dh
 100b2ed:	add    BYTE PTR [rax+0x0],bh
 100b2f0:	je     0x100b2f2
 100b2f2:	and    BYTE PTR [rax],al
 100b2f4:	rex.RX add BYTE PTR [rcx+0x0],r13b
 100b2f8:	ins    BYTE PTR es:[rdi],dx
 100b2f9:	add    BYTE PTR [rax+rax*1+0x65],dh
 100b2fd:	add    BYTE PTR [rdx+0x0],dh
 100b300:	and    BYTE PTR [rax],al
 100b302:	add    BYTE PTR [rcx+0x0],r12b
 100b306:	add    BYTE PTR gs:[rbp+0x0],ch
 100b30a:	outs   dx,DWORD PTR ds:[rsi]
 100b30b:	add    BYTE PTR [rsi+0x0],ch
 100b30e:	and    BYTE PTR [rax],al
 100b310:	rex.WR add BYTE PTR [rcx+0x0],r12b
 100b314:	jne    0x100b316
 100b316:	outs   dx,BYTE PTR ds:[rsi]
 100b317:	add    BYTE PTR [rbx+0x0],ah
 100b31a:	push   0x53002000
 100b31f:	add    BYTE PTR [rbp+0x0],ah
 100b322:	jb     0x100b324
 100b324:	jbe    0x100b326
 100b326:	imul   eax,DWORD PTR [rax],0x650063
 100b32c:	add    BYTE PTR [rax],al
 100b32e:	add    BYTE PTR [rax],al
 100b330:	jl     0x100b332
 100b332:	add    BYTE PTR cs:[rcx],al
 100b335:	add    BYTE PTR [rsi+0x0],al
 100b338:	imul   eax,DWORD PTR [rax],0x65006c
 100b33e:	push   rsi
 100b33f:	add    BYTE PTR [rbp+0x0],ah
 100b342:	jb     0x100b344
 100b344:	jae    0x100b346
 100b346:	imul   eax,DWORD PTR [rax],0x6e006f
 100b34c:	add    BYTE PTR [rax],al
 100b34e:	add    BYTE PTR [rax],al
 100b350:	xor    al,BYTE PTR [rax]
 100b352:	xor    BYTE PTR [rax],al
 100b354:	xor    DWORD PTR [rax],eax
 100b356:	xor    DWORD PTR [rax],eax
 100b358:	add    BYTE PTR cs:[rax],dh
 100b35b:	add    BYTE PTR [rcx],dh
 100b35d:	add    BYTE PTR [rcx],dh
 100b35f:	add    BYTE PTR [rax],dh
 100b361:	add    BYTE PTR [rsi],ch
 100b363:	add    BYTE PTR [rdx],dh
 100b365:	add    BYTE PTR [rcx],dh
 100b367:	add    BYTE PTR [rax],dh
 100b369:	add    BYTE PTR [rax],dh
 100b36b:	add    BYTE PTR [rsi],ch
 100b36d:	add    BYTE PTR [rax],dh
 100b36f:	add    BYTE PTR [rsi],dh
 100b371:	add    BYTE PTR [rax],dh
 100b373:	add    BYTE PTR [rax],ah
 100b375:	add    BYTE PTR [rax],ch
 100b377:	add    BYTE PTR [rax],ch
 100b379:	add    BYTE PTR [rbx+0x0],dl
 100b37c:	push   rcx
 100b37d:	add    BYTE PTR [rax+rax*1+0x31],cl
 100b381:	add    BYTE PTR [rcx],dh
 100b383:	add    BYTE PTR [rdi+0x0],bl
 100b386:	push   rdx
 100b387:	add    BYTE PTR [rax+rax*1+0x4d],dl
 100b38b:	add    BYTE PTR [rcx],ch
 100b38d:	add    BYTE PTR [rsi],ch
 100b38f:	add    BYTE PTR [rcx],dh
 100b391:	add    BYTE PTR [rdx],dh
 100b393:	add    BYTE PTR [rax],dh
 100b395:	add    BYTE PTR [rdx],dh
 100b397:	add    BYTE PTR [rcx],dh
 100b399:	add    BYTE PTR [rax],dh
 100b39b:	add    BYTE PTR [rip+0x39003100],ch        # 0x3a00e4a1
 100b3a1:	add    BYTE PTR [rcx],dh
 100b3a3:	add    BYTE PTR [rdi],dh
 100b3a5:	add    BYTE PTR [rax],ah
 100b3a7:	add    BYTE PTR [rcx],ch
 100b3a9:	add    BYTE PTR [rax],al
 100b3ab:	add    BYTE PTR [rsi],dh
 100b3ad:	add    BYTE PTR [rbx],cl
 100b3af:	add    BYTE PTR [rcx],al
 100b3b1:	add    BYTE PTR [rcx+0x0],cl
 100b3b4:	outs   dx,BYTE PTR ds:[rsi]
 100b3b5:	add    BYTE PTR [rax+rax*1+0x65],dh
 100b3b9:	add    BYTE PTR [rdx+0x0],dh
 100b3bc:	outs   dx,BYTE PTR ds:[rsi]
 100b3bd:	add    BYTE PTR [rcx+0x0],ah
 100b3c0:	ins    BYTE PTR es:[rdi],dx
 100b3c1:	add    BYTE PTR [rsi+0x0],cl
 100b3c4:	(bad)  
 100b3c5:	add    BYTE PTR [rbp+0x0],ch
 100b3c8:	add    BYTE PTR gs:[rax],al
 100b3cb:	add    BYTE PTR [rsi+0x0],ah
 100b3ce:	add    BYTE PTR fs:[rax+rax*1+0x61],ch
 100b3d3:	add    BYTE PTR [rbp+0x0],dh
 100b3d6:	outs   dx,BYTE PTR ds:[rsi]
 100b3d7:	add    BYTE PTR [rbx+0x0],ah
 100b3da:	push   0x72006500
 100b3df:	add    BYTE PTR [rax],al
 100b3e1:	add    BYTE PTR [rax],al
 100b3e3:	add    BYTE PTR [rsi+0x0],ch
 100b3e6:	and    eax,0x4c000100
 100b3eb:	add    BYTE PTR [rbp+0x0],ah
 100b3ee:	add    BYTE PTR [ecx+0x0],ah
 100b3f2:	ins    BYTE PTR es:[rdi],dx
 100b3f3:	add    BYTE PTR [rbx+0x0],al
 100b3f6:	outs   dx,DWORD PTR ds:[rsi]
 100b3f7:	add    BYTE PTR [rax+0x0],dh
 100b3fa:	jns    0x100b3fc
 100b3fc:	jb     0x100b3fe
 100b3fe:	imul   eax,DWORD PTR [rax],0x680067
 100b404:	je     0x100b406
 100b406:	add    BYTE PTR [rax],al
 100b408:	rex.WRB add BYTE PTR [r9+0x0],r13b
 100b40c:	movsxd eax,DWORD PTR [rax]
 100b40e:	jb     0x100b410
 100b410:	outs   dx,DWORD PTR ds:[rsi]
 100b411:	add    BYTE PTR [rbx+0x0],dh
 100b414:	outs   dx,DWORD PTR ds:[rsi]
 100b415:	add    BYTE PTR [rsi+0x0],ah
 100b418:	je     0x100b41a
 100b41a:	and    BYTE PTR [rax],al
 100b41c:	rex.XB add BYTE PTR [r15+0x0],bpl
 100b420:	jb     0x100b422
 100b422:	jo     0x100b424
 100b424:	add    BYTE PTR cs:[rax],ah
 100b427:	add    BYTE PTR [rcx+0x0],al
 100b42a:	ins    BYTE PTR es:[rdi],dx
 100b42b:	add    BYTE PTR [rax+rax*1+0x20],ch
 100b42f:	add    BYTE PTR [rdx+0x0],dh
 100b432:	imul   eax,DWORD PTR [rax],0x680067
 100b438:	je     0x100b43a
 100b43a:	jae    0x100b43c
 100b43c:	and    BYTE PTR [rax],al
 100b43e:	jb     0x100b440
 100b440:	add    BYTE PTR gs:[rbx+0x0],dh
 100b444:	add    BYTE PTR gs:[rdx+0x0],dh
 100b448:	jbe    0x100b44a
 100b44a:	add    BYTE PTR gs:[rax+rax*1+0x2e],ah
 100b44f:	add    BYTE PTR [rax],al
 100b451:	add    BYTE PTR [rax],al
 100b453:	add    BYTE PTR [rsi+0x0],al
 100b456:	sldt   WORD PTR [rcx]
 100b459:	add    BYTE PTR [rdi+0x0],cl
 100b45c:	jb     0x100b45e
 100b45e:	imul   eax,DWORD PTR [rax],0x690067
 100b464:	outs   dx,BYTE PTR ds:[rsi]
 100b465:	add    BYTE PTR [rcx+0x0],ah
 100b468:	ins    BYTE PTR es:[rdi],dx
 100b469:	add    BYTE PTR [rsi+0x0],al
 100b46c:	imul   eax,DWORD PTR [rax],0x65006c
 100b472:	outs   dx,BYTE PTR ds:[rsi]
 100b473:	add    BYTE PTR [rcx+0x0],ah
 100b476:	ins    DWORD PTR es:[rdi],dx
 100b477:	add    BYTE PTR [rbp+0x0],ah
 100b47a:	add    BYTE PTR [rax],al
 100b47c:	data16 add BYTE PTR [rax+rax*1+0x6c],ah
 100b481:	add    BYTE PTR [rcx+0x0],ah
 100b484:	jne    0x100b486
 100b486:	outs   dx,BYTE PTR ds:[rsi]
 100b487:	add    BYTE PTR [rbx+0x0],ah
 100b48a:	push   0x72006500
 100b48f:	add    BYTE PTR [rsi],ch
 100b491:	add    BYTE PTR [rbp+0x0],ah
 100b494:	js     0x100b496
 100b496:	add    BYTE PTR gs:[rax],al
 100b499:	add    BYTE PTR [rax],al
 100b49b:	add    BYTE PTR [rdx+0x0],cl
 100b49e:	adc    eax,0x50000100
 100b4a3:	add    BYTE PTR [rdx+0x0],dh
 100b4a6:	outs   dx,DWORD PTR ds:[rsi]
 100b4a7:	add    BYTE PTR [rax+rax*1+0x75],ah
 100b4ab:	add    BYTE PTR [rbx+0x0],ah
 100b4ae:	je     0x100b4b0
 100b4b0:	rex.WRX add BYTE PTR [rcx+0x0],r12b
 100b4b4:	ins    DWORD PTR es:[rdi],dx
 100b4b5:	add    BYTE PTR [rbp+0x0],ah
 100b4b8:	add    BYTE PTR [rax],al
 100b4ba:	add    BYTE PTR [rax],al
 100b4bc:	rex.WRB add BYTE PTR [r9+0x0],r13b
 100b4c0:	movsxd eax,DWORD PTR [rax]
 100b4c2:	jb     0x100b4c4
 100b4c4:	outs   dx,DWORD PTR ds:[rsi]
 100b4c5:	add    BYTE PTR [rbx+0x0],dh
 100b4c8:	outs   dx,DWORD PTR ds:[rsi]
 100b4c9:	add    BYTE PTR [rsi+0x0],ah
 100b4cc:	je     0x100b4ce
 100b4ce:	and    BYTE PTR [rax],al
 100b4d0:	push   rbx
 100b4d1:	add    BYTE PTR [rcx+0x0],dl
 100b4d4:	rex.WR add BYTE PTR [rax],r12b
 100b4d7:	add    BYTE PTR [rbx+0x0],dl
 100b4da:	add    BYTE PTR gs:[rdx+0x0],dh
 100b4de:	jbe    0x100b4e0
 100b4e0:	add    BYTE PTR gs:[rdx+0x0],dh
 100b4e4:	add    BYTE PTR [rax],al
 100b4e6:	add    BYTE PTR [rax],al
 100b4e8:	add    BYTE PTR ds:[rip+0x50000100],cl        # 0x5100b5ef
 100b4ef:	add    BYTE PTR [rdx+0x0],dh
 100b4f2:	outs   dx,DWORD PTR ds:[rsi]
 100b4f3:	add    BYTE PTR [rax+rax*1+0x75],ah
 100b4f7:	add    BYTE PTR [rbx+0x0],ah
 100b4fa:	je     0x100b4fc
 100b4fc:	push   rsi
 100b4fd:	add    BYTE PTR [rbp+0x0],ah
 100b500:	jb     0x100b502
 100b502:	jae    0x100b504
 100b504:	imul   eax,DWORD PTR [rax],0x6e006f
 100b50a:	add    BYTE PTR [rax],al
 100b50c:	xor    DWORD PTR [rax],eax
 100b50e:	xor    DWORD PTR [rax],eax
 100b510:	add    BYTE PTR cs:[rax],dh
 100b513:	add    BYTE PTR [rsi],ch
 100b515:	add    BYTE PTR [rdx],dh
 100b517:	add    BYTE PTR [rcx],dh
 100b519:	add    BYTE PTR [rax],dh
 100b51b:	add    BYTE PTR [rax],dh
 100b51d:	add    BYTE PTR [rsi],ch
 100b51f:	add    BYTE PTR [rsi],dh
 100b521:	add    BYTE PTR [rax],dh
 100b523:	add    BYTE PTR [rax],al
 100b525:	add    BYTE PTR [rax],al
 100b527:	add    BYTE PTR [rax+rax*1+0x0],al
 100b52b:	add    BYTE PTR [rcx],al
 100b52d:	add    BYTE PTR [rsi+0x0],dl
 100b530:	(bad)  
 100b531:	add    BYTE PTR [rdx+0x0],dh
 100b534:	rex.RX add BYTE PTR [rcx+0x0],r13b
 100b538:	ins    BYTE PTR es:[rdi],dx
 100b539:	add    BYTE PTR [rbp+0x0],ah
 100b53c:	rex.WB add BYTE PTR [r14+0x0],bpl
 100b540:	data16 add BYTE PTR [rdi+0x0],ch
 100b544:	add    BYTE PTR [rax],al
 100b546:	add    BYTE PTR [rax],al
 100b548:	and    al,0x0
 100b54a:	add    al,0x0
 100b54c:	add    BYTE PTR [rax],al
 100b54e:	push   rsp
 100b54f:	add    BYTE PTR [rdx+0x0],dh
 100b552:	(bad)  
 100b553:	add    BYTE PTR [rsi+0x0],ch
 100b556:	jae    0x100b558
 100b558:	ins    BYTE PTR es:[rdi],dx
 100b559:	add    BYTE PTR [rcx+0x0],ah
 100b55c:	je     0x100b55e
 100b55e:	imul   eax,DWORD PTR [rax],0x6e006f
 100b564:	add    BYTE PTR [rax],al
 100b566:	add    BYTE PTR [rax],al
 100b568:	or     DWORD PTR [rax+rsi*4],eax
 100b56b:	add    al,0x3c
 100b56d:	(bad)  
 100b56e:	jae    0x100b5e3
 100b570:	gs ins DWORD PTR es:[rdi],dx
 100b572:	(bad)  
 100b573:	ins    BYTE PTR es:[rdi],dx
 100b574:	jns    0x100b596
 100b576:	js     0x100b5e5
 100b578:	ins    BYTE PTR es:[rdi],dx
 100b579:	outs   dx,BYTE PTR ds:[rsi]
 100b57a:	jae    0x100b5b9
 100b57c:	and    dh,BYTE PTR [rbp+0x72]
 100b57f:	outs   dx,BYTE PTR ds:[rsi]
 100b580:	cmp    dh,BYTE PTR [rbx+0x63]
 100b583:	push   0x73616d65
 100b588:	sub    eax,0x7263696d
 100b58d:	outs   dx,DWORD PTR ds:[rsi]
 100b58e:	jae    0x100b5ff
 100b590:	data16 je 0x100b5c0
 100b593:	movsxd ebp,DWORD PTR [rdi+0x6d]
 100b596:	cmp    ah,BYTE PTR [rcx+0x73]
 100b599:	ins    DWORD PTR es:[rdi],dx
 100b59a:	cs jbe 0x100b5ce
 100b59d:	and    ah,BYTE PTR [rax]
 100b59f:	ins    DWORD PTR es:[rdi],dx
 100b5a0:	(bad)  
 100b5a1:	outs   dx,BYTE PTR ds:[rsi]
 100b5a2:	imul   esp,DWORD PTR [rsi+0x65],0x65567473
 100b5a9:	jb     0x100b61e
 100b5ab:	imul   ebp,DWORD PTR [rdi+0x6e],0x2e31223d
 100b5b2:	xor    BYTE PTR [rdx],ah
 100b5b4:	ds or  eax,0x3c20200a
 100b5ba:	je     0x100b62e
 100b5bc:	jne    0x100b631
 100b5be:	je     0x100b609
 100b5c0:	outs   dx,BYTE PTR ds:[rsi]
 100b5c1:	outs   dx,WORD PTR ds:[rsi]
 100b5c3:	and    BYTE PTR [rax+0x6d],bh
 100b5c6:	ins    BYTE PTR es:[rdi],dx
 100b5c7:	outs   dx,BYTE PTR ds:[rsi]
 100b5c8:	jae    0x100b607
 100b5ca:	and    dh,BYTE PTR [rbp+0x72]
 100b5cd:	outs   dx,BYTE PTR ds:[rsi]
 100b5ce:	cmp    dh,BYTE PTR [rbx+0x63]
 100b5d1:	push   0x73616d65
 100b5d6:	sub    eax,0x7263696d
 100b5db:	outs   dx,DWORD PTR ds:[rsi]
 100b5dc:	jae    0x100b64d
 100b5de:	data16 je 0x100b60e
 100b5e1:	movsxd ebp,DWORD PTR [rdi+0x6d]
 100b5e4:	cmp    ah,BYTE PTR [rcx+0x73]
 100b5e7:	ins    DWORD PTR es:[rdi],dx
 100b5e8:	cs jbe 0x100b61e
 100b5eb:	and    bh,BYTE PTR [rsi]
 100b5ed:	or     eax,0x2020200a
 100b5f2:	and    BYTE PTR [rbx+rsi*2],bh
 100b5f5:	movsxd esi,DWORD PTR gs:[rbp+0x72]
 100b5f9:	imul   esi,DWORD PTR [rcx+rdi*2+0x3e],0x20200a0d
 100b601:	and    BYTE PTR [rax],ah
 100b603:	and    BYTE PTR [rax],ah
 100b605:	cmp    al,0x72
 100b607:	gs jno 0x100b67f
 100b60a:	gs jae 0x100b681
 100b60d:	gs fs push rax
 100b610:	jb     0x100b67b
 100b612:	jbe    0x100b67d
 100b614:	ins    BYTE PTR es:[rdi],dx
 100b615:	gs addr32 gs jae 0x100b658
 100b61a:	or     eax,0x2020200a
 100b61f:	and    BYTE PTR [rax],ah
 100b621:	and    BYTE PTR [rax],ah
 100b623:	and    BYTE PTR [rdx+rsi*2],bh
 100b626:	gs jno 0x100b69e
 100b629:	gs jae 0x100b6a0
 100b62c:	gs fs rex.RB js 0x100b696
 100b631:	movsxd esi,DWORD PTR [rbp+0x74]
 100b634:	imul   ebp,DWORD PTR [rdi+0x6e],0x6576654c
 100b63b:	ins    BYTE PTR es:[rdi],dx
 100b63c:	and    BYTE PTR [rbp+riz*2+0x76],ch
 100b640:	gs ins BYTE PTR es:[rdi],dx
 100b642:	cmp    eax,0x49736122
 100b647:	outs   dx,BYTE PTR ds:[rsi]
 100b648:	jbe    0x100b6b9
 100b64a:	imul   esp,DWORD PTR [rbp+0x72],0x22
 100b64e:	and    BYTE PTR [rbp+0x69],dh
 100b651:	movsxd esp,DWORD PTR [r11+0x65]
 100b655:	jae    0x100b6ca
 100b657:	cmp    eax,0x6c616622
 100b65c:	jae    0x100b6c3
 100b65e:	and    bh,BYTE PTR [rsi]
 100b660:	cmp    al,0x2f
 100b662:	jb     0x100b6c9
 100b664:	jno    0x100b6db
 100b666:	gs jae 0x100b6dd
 100b669:	gs fs rex.RB js 0x100b6d3
 100b66e:	movsxd esi,DWORD PTR [rbp+0x74]
 100b671:	imul   ebp,DWORD PTR [rdi+0x6e],0x6576654c
 100b678:	ins    BYTE PTR es:[rdi],dx
 100b679:	ds or  eax,0x2020200a
 100b67f:	and    BYTE PTR [rax],ah
 100b681:	and    BYTE PTR [rdi+rbp*1],bh
 100b684:	jb     0x100b6eb
 100b686:	jno    0x100b6fd
 100b688:	gs jae 0x100b6ff
 100b68b:	gs fs push rax
 100b68e:	jb     0x100b6f9
 100b690:	jbe    0x100b6fb
 100b692:	ins    BYTE PTR es:[rdi],dx
 100b693:	gs addr32 gs jae 0x100b6d6
 100b698:	or     eax,0x2020200a
 100b69d:	and    BYTE PTR [rdi+rbp*1],bh
 100b6a0:	jae    0x100b707
 100b6a2:	movsxd esi,DWORD PTR [rbp+0x72]
 100b6a5:	imul   esi,DWORD PTR [rcx+rdi*2+0x3e],0x20200a0d
 100b6ad:	cmp    al,0x2f
 100b6af:	je     0x100b723
 100b6b1:	jne    0x100b726
 100b6b3:	je     0x100b6fe
 100b6b5:	outs   dx,BYTE PTR ds:[rsi]
 100b6b6:	outs   dx,WORD PTR ds:[rsi]
 100b6b8:	ds or  eax,0x612f3c0a
 100b6be:	jae    0x100b733
 100b6c0:	gs ins DWORD PTR es:[rdi],dx
 100b6c2:	(bad)  
 100b6c3:	ins    BYTE PTR es:[rdi],dx
 100b6c4:	jns    0x100b704
 100b6c6:	push   rax
 100b6c7:	rex.B

Disassembly of section .reloc:

000000000100c000 <.reloc>:
 100c000:	add    BYTE PTR [rax],dl
 100c002:	add    BYTE PTR [rax],al
 100c004:	sbb    BYTE PTR [rax],al
 100c006:	add    BYTE PTR [rax],al
 100c008:	movabs al,ds:0xd0a3c8a3b0a3a8a3
 100c011:	movabs ds:0x80000000a418a410,eax
 100c01a:	add    BYTE PTR [rax],al
 100c01c:	sbb    al,0x0
 100c01e:	add    BYTE PTR [rax],al
 100c020:	and    BYTE PTR [rcx-0x5ebf5ed0],ah
 100c026:	(bad)  
 100c027:	movabs eax,ds:0xa180a178a170a168
 100c030:	mov    BYTE PTR [rcx+0x0],ah
	...
