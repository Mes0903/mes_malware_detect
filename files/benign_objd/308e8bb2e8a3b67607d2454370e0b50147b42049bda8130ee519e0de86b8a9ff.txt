
308e8bb2e8a3b67607d2454370e0b50147b42049bda8130ee519e0de86b8a9ff.exe:     file format pei-x86-64


Disassembly of section .text:

0000000001001000 <.text>:
 1001000:	or     BYTE PTR [rcx],al
 1001002:	add    DWORD PTR [rax],eax
 1001004:	add    BYTE PTR [rax],al
 1001006:	add    BYTE PTR [rax],al
 1001008:	(bad)  
 1001009:	add    DWORD PTR [rcx],eax
 100100b:	add    BYTE PTR [rax],al
 100100d:	add    BYTE PTR [rax],al
 100100f:	add    BYTE PTR [rsi],ah
 1001011:	add    DWORD PTR [rcx],eax
 1001013:	add    BYTE PTR [rax],al
 1001015:	add    BYTE PTR [rax],al
 1001017:	add    ah,bl
 1001019:	add    eax,0x1
	...
 1001026:	add    BYTE PTR [rax],al
 1001028:	and    BYTE PTR [rax],al
 100102a:	add    BYTE PTR [rax],al
 100102c:	add    BYTE PTR [rax],al
 100102e:	add    BYTE PTR [rax+0x40],al
 1001034:	add    BYTE PTR [rax],al
 1001036:	add    BYTE PTR [rax+0x0],al
 100103c:	add    BYTE PTR [rax],al
 100103e:	add    BYTE PTR [rax],al
 1001040:	ror    BYTE PTR [rcx],0x1
 1001043:	add    BYTE PTR [rax],al
 1001045:	add    BYTE PTR [rax],al
 1001047:	add    BYTE PTR [rdx+0x109],ch
 100104d:	add    BYTE PTR [rax],al
 100104f:	add    BYTE PTR [rsi+0x109],dl
 1001055:	add    BYTE PTR [rax],al
 1001057:	add    BYTE PTR [rax+0x109],cl
 100105d:	add    BYTE PTR [rax],al
 100105f:	add    BYTE PTR [rdx+0x9],bh
 1001062:	add    DWORD PTR [rax],eax
 1001064:	add    BYTE PTR [rax],al
 1001066:	add    BYTE PTR [rax],al
 1001068:	push   0x9
 100106a:	add    DWORD PTR [rax],eax
 100106c:	add    BYTE PTR [rax],al
 100106e:	add    BYTE PTR [rax],al
 1001070:	pop    rsp
 1001071:	or     DWORD PTR [rcx],eax
 1001073:	add    BYTE PTR [rax],al
 1001075:	add    BYTE PTR [rax],al
 1001077:	add    BYTE PTR [rcx+rcx*1+0x1],cl
 100107b:	add    BYTE PTR [rax],al
 100107d:	add    BYTE PTR [rax],al
 100107f:	add    BYTE PTR [rcx+rcx*1],dh
 1001082:	add    DWORD PTR [rax],eax
 1001084:	add    BYTE PTR [rax],al
 1001086:	add    BYTE PTR [rax],al
 1001088:	(bad)  
 1001089:	or     DWORD PTR [rcx],eax
 100108b:	add    BYTE PTR [rax],al
 100108d:	add    BYTE PTR [rax],al
 100108f:	add    BYTE PTR [rsi],cl
 1001091:	or     DWORD PTR [rcx],eax
 1001093:	add    BYTE PTR [rax],al
 1001095:	add    BYTE PTR [rax],al
 1001097:	add    al,bh
 1001099:	or     BYTE PTR [rcx],al
 100109b:	add    BYTE PTR [rax],al
 100109d:	add    BYTE PTR [rax],al
 100109f:	add    ah,bl
 10010a1:	or     BYTE PTR [rcx],al
 10010a3:	add    BYTE PTR [rax],al
 10010a5:	add    BYTE PTR [rax],al
 10010a7:	add    al,al
 10010a9:	or     BYTE PTR [rcx],al
 10010ab:	add    BYTE PTR [rax],al
 10010ad:	add    BYTE PTR [rax],al
 10010af:	add    BYTE PTR [rdx+0x108],dh
 10010b5:	add    BYTE PTR [rax],al
 10010b7:	add    BYTE PTR [rdx+0x108],ah
 10010bd:	add    BYTE PTR [rax],al
 10010bf:	add    dl,dl
 10010c1:	or     DWORD PTR [rcx],eax
 10010c3:	add    BYTE PTR [rax],al
 10010c5:	add    BYTE PTR [rax],al
 10010c7:	add    BYTE PTR [rax+0x108],al
 10010cd:	add    BYTE PTR [rax],al
 10010cf:	add    BYTE PTR [rdx+0x8],dh
 10010d2:	add    DWORD PTR [rax],eax
 10010d4:	add    BYTE PTR [rax],al
 10010d6:	add    BYTE PTR [rax],al
 10010d8:	data16 or BYTE PTR [rcx],al
 10010db:	add    BYTE PTR [rax],al
 10010dd:	add    BYTE PTR [rax],al
 10010df:	add    BYTE PTR [rdx+0x8],bl
 10010e2:	add    DWORD PTR [rax],eax
 10010e4:	add    BYTE PTR [rax],al
 10010e6:	add    BYTE PTR [rax],al
 10010e8:	rex.W or BYTE PTR [rcx],al
 10010eb:	add    BYTE PTR [rax],al
 10010ed:	add    BYTE PTR [rax],al
 10010ef:	add    BYTE PTR [rax+0x10b],dl
 10010f5:	add    BYTE PTR [rax],al
 10010f7:	add    BYTE PTR [rax+rcx*1],dl
 10010fa:	add    DWORD PTR [rax],eax
 10010fc:	add    BYTE PTR [rax],al
 10010fe:	add    BYTE PTR [rax],al
 1001100:	add    cl,BYTE PTR [rax]
 1001102:	add    DWORD PTR [rax],eax
 1001104:	add    BYTE PTR [rax],al
 1001106:	add    BYTE PTR [rax],al
 1001108:	lock (bad) 
 100110a:	add    DWORD PTR [rax],eax
 100110c:	add    BYTE PTR [rax],al
 100110e:	add    BYTE PTR [rax],al
 1001110:	fiadd  WORD PTR [rdi]
 1001112:	add    DWORD PTR [rax],eax
 1001114:	add    BYTE PTR [rax],al
 1001116:	add    BYTE PTR [rax],al
 1001118:	(bad)  
 1001119:	(bad)  
 100111a:	add    DWORD PTR [rax],eax
 100111c:	add    BYTE PTR [rax],al
 100111e:	add    BYTE PTR [rax],al
 1001120:	mov    edx,0x107
 1001125:	add    BYTE PTR [rax],al
 1001127:	add    BYTE PTR [rdi+rax*1+0x1],ah
 100112e:	add    BYTE PTR [rax],al
 1001130:	mov    es,WORD PTR [rdi]
 1001132:	add    DWORD PTR [rax],eax
 1001134:	add    BYTE PTR [rax],al
 1001136:	add    BYTE PTR [rax],al
 1001138:	(bad)  
 1001139:	(bad)  
 100113a:	add    DWORD PTR [rax],eax
 100113c:	add    BYTE PTR [rax],al
 100113e:	add    BYTE PTR [rax],al
 1001140:	ins    BYTE PTR es:[rdi],dx
 1001141:	(bad)  
 1001142:	add    DWORD PTR [rax],eax
 1001144:	add    BYTE PTR [rax],al
 1001146:	add    BYTE PTR [rax],al
 1001148:	out    0x9,al
 100114a:	add    DWORD PTR [rax],eax
 100114c:	add    BYTE PTR [rax],al
 100114e:	add    BYTE PTR [rax],al
 1001150:	cli    
 1001151:	or     DWORD PTR [rcx],eax
 1001153:	add    BYTE PTR [rax],al
 1001155:	add    BYTE PTR [rax],al
 1001157:	add    BYTE PTR [rsi],cl
 1001159:	or     al,BYTE PTR [rcx]
 100115b:	add    BYTE PTR [rax],al
 100115d:	add    BYTE PTR [rax],al
 100115f:	add    BYTE PTR [rbx+rcx*1+0x1],al
 1001166:	add    BYTE PTR [rax],al
 1001168:	js     0x1001175
 100116a:	add    DWORD PTR [rax],eax
 100116c:	add    BYTE PTR [rax],al
 100116e:	add    BYTE PTR [rax],al
 1001170:	xchg   edx,eax
 1001171:	or     BYTE PTR [rcx],al
 1001173:	add    BYTE PTR [rax],al
 1001175:	add    BYTE PTR [rax],al
 1001177:	add    BYTE PTR [rax+0x7],ah
 100117a:	add    DWORD PTR [rax],eax
 100117c:	add    BYTE PTR [rax],al
 100117e:	add    BYTE PTR [rax],al
 1001180:	push   rdx
 1001181:	(bad)  
 1001182:	add    DWORD PTR [rax],eax
 1001184:	add    BYTE PTR [rax],al
 1001186:	add    BYTE PTR [rax],al
 1001188:	ss (bad) 
 100118a:	add    DWORD PTR [rax],eax
 100118c:	add    BYTE PTR [rax],al
 100118e:	add    BYTE PTR [rax],al
 1001190:	es (bad) 
 1001192:	add    DWORD PTR [rax],eax
 1001194:	add    BYTE PTR [rax],al
 1001196:	add    BYTE PTR [rax],al
 1001198:	adc    al,0x7
 100119a:	add    DWORD PTR [rax],eax
 100119c:	add    BYTE PTR [rax],al
 100119e:	add    BYTE PTR [rax],al
 10011a0:	add    al,0x7
 10011a2:	add    DWORD PTR [rax],eax
 10011a4:	add    BYTE PTR [rax],al
 10011a6:	add    BYTE PTR [rax],al
 10011a8:	clc    
 10011a9:	(bad)  
 10011aa:	add    DWORD PTR [rax],eax
 10011ac:	add    BYTE PTR [rax],al
 10011ae:	add    BYTE PTR [rax],al
 10011b0:	call   0x10012bb
 10011b5:	add    BYTE PTR [rax],al
 10011b7:	add    dh,cl
 10011b9:	(bad)  
 10011ba:	add    DWORD PTR [rax],eax
 10011bc:	add    BYTE PTR [rax],al
 10011be:	add    BYTE PTR [rax],al
 10011c0:	mov    eax,0x106
 10011c5:	add    BYTE PTR [rax],al
 10011c7:	add    BYTE PTR [rax+0x106],ch
 10011cd:	add    BYTE PTR [rax],al
 10011cf:	add    BYTE PTR [rsi+0x106],cl
 10011d5:	add    BYTE PTR [rax],al
 10011d7:	add    BYTE PTR [rsi+0x6],bh
 10011da:	add    DWORD PTR [rax],eax
 10011dc:	add    BYTE PTR [rax],al
 10011de:	add    BYTE PTR [rax],al
 10011e0:	push   0x6
 10011e2:	add    DWORD PTR [rax],eax
 10011e4:	add    BYTE PTR [rax],al
 10011e6:	add    BYTE PTR [rax],al
 10011e8:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 10011e9:	or     eax,DWORD PTR [rcx]
 10011eb:	add    BYTE PTR [rax],al
 10011ed:	add    BYTE PTR [rax],al
 10011ef:	add    ah,cl
 10011f1:	add    al,BYTE PTR [rcx]
 10011f3:	add    BYTE PTR [rax],al
 10011f5:	add    BYTE PTR [rax],al
 10011f7:	add    BYTE PTR [rdx+rax*1+0x1],bh
 10011fe:	add    BYTE PTR [rax],al
 1001200:	mov    al,0x2
 1001202:	add    DWORD PTR [rax],eax
 1001204:	add    BYTE PTR [rax],al
 1001206:	add    BYTE PTR [rax],al
 1001208:	movabs ds:0x9a00000000000102,al
 1001211:	add    al,BYTE PTR [rcx]
 1001213:	add    BYTE PTR [rax],al
 1001215:	add    BYTE PTR [rax],al
 1001217:	add    BYTE PTR [rsi+0x102],cl
 100121d:	add    BYTE PTR [rax],al
 100121f:	add    BYTE PTR [rsi+0x2],ah
 1001222:	add    DWORD PTR [rax],eax
 1001224:	add    BYTE PTR [rax],al
 1001226:	add    BYTE PTR [rax],al
 1001228:	rex.WRX add r8b,BYTE PTR [rcx]
 100122b:	add    BYTE PTR [rax],al
 100122d:	add    BYTE PTR [rax],al
 100122f:	add    BYTE PTR [rsi],dh
 1001231:	add    al,BYTE PTR [rcx]
 1001233:	add    BYTE PTR [rax],al
 1001235:	add    BYTE PTR [rax],al
 1001237:	add    BYTE PTR [rdx],bl
 1001239:	add    al,BYTE PTR [rcx]
 100123b:	add    BYTE PTR [rax],al
 100123d:	add    BYTE PTR [rax],al
 100123f:	add    BYTE PTR [rdx],cl
 1001241:	add    al,BYTE PTR [rcx]
 1001243:	add    BYTE PTR [rax],al
 1001245:	add    BYTE PTR [rax],al
 1001247:	add    ah,dh
 1001249:	add    DWORD PTR [rcx],eax
 100124b:	add    BYTE PTR [rax],al
 100124d:	add    BYTE PTR [rax],al
 100124f:	add    dh,dl
 1001251:	add    DWORD PTR [rcx],eax
 1001253:	add    BYTE PTR [rax],al
 1001255:	add    BYTE PTR [rax],al
 1001257:	add    dl,al
 1001259:	add    DWORD PTR [rcx],eax
 100125b:	add    BYTE PTR [rax],al
 100125d:	add    BYTE PTR [rax],al
 100125f:	add    BYTE PTR [rsi+0x101],ch
 1001265:	add    BYTE PTR [rax],al
 1001267:	add    BYTE PTR [rax+0x101],bl
 100126d:	add    BYTE PTR [rax],al
 100126f:	add    BYTE PTR [rcx+rax*1+0x1],al
 1001276:	add    BYTE PTR [rax],al
 1001278:	ins    BYTE PTR es:[rdi],dx
 1001279:	add    DWORD PTR [rcx],eax
 100127b:	add    BYTE PTR [rax],al
 100127d:	add    BYTE PTR [rax],al
 100127f:	add    BYTE PTR [rdx+0x1],bl
 1001282:	add    DWORD PTR [rax],eax
 1001284:	add    BYTE PTR [rax],al
 1001286:	add    BYTE PTR [rax],al
 1001288:	add    QWORD PTR [rcx],rax
 100128b:	add    BYTE PTR [rax],al
 100128d:	add    BYTE PTR [rax],al
 100128f:	add    BYTE PTR [rsi],ch
 1001291:	or     BYTE PTR [rcx],al
 1001293:	add    BYTE PTR [rax],al
 1001295:	add    BYTE PTR [rax],al
 1001297:	add    dl,ch
 1001299:	add    eax,0x1
 100129e:	add    BYTE PTR [rax],al
 10012a0:	cld    
 10012a1:	add    eax,0x1
 10012a6:	add    BYTE PTR [rax],al
 10012a8:	or     al,0x6
 10012aa:	add    DWORD PTR [rax],eax
 10012ac:	add    BYTE PTR [rax],al
 10012ae:	add    BYTE PTR [rax],al
 10012b0:	sub    BYTE PTR [rsi],al
 10012b2:	add    DWORD PTR [rax],eax
 10012b4:	add    BYTE PTR [rax],al
 10012b6:	add    BYTE PTR [rax],al
 10012b8:	cmp    al,0x6
 10012ba:	add    DWORD PTR [rax],eax
 10012bc:	add    BYTE PTR [rax],al
 10012be:	add    BYTE PTR [rax],al
 10012c0:	push   rax
 10012c1:	(bad)  
 10012c2:	add    DWORD PTR [rax],eax
 10012c4:	add    BYTE PTR [rax],al
 10012c6:	add    BYTE PTR [rax],al
 10012c8:	mov    dh,0xb
 10012ca:	add    DWORD PTR [rax],eax
	...
 10012d8:	ror    BYTE PTR [rdx],cl
 10012da:	add    DWORD PTR [rax],eax
 10012dc:	add    BYTE PTR [rax],al
 10012de:	add    BYTE PTR [rax],al
 10012e0:	mov    eax,0x10a
 10012e5:	add    BYTE PTR [rax],al
 10012e7:	add    BYTE PTR [rdx+rcx*1+0x1],bl
	...
 10012f6:	add    BYTE PTR [rax],al
 10012f8:	sbb    BYTE PTR [rbx],al
 10012fa:	add    DWORD PTR [rax],eax
 10012fc:	add    BYTE PTR [rax],al
 10012fe:	add    BYTE PTR [rax],al
 1001300:	xor    BYTE PTR [rbx],al
 1001302:	add    DWORD PTR [rax],eax
 1001304:	add    BYTE PTR [rax],al
 1001306:	add    BYTE PTR [rax],al
 1001308:	rex.X add eax,DWORD PTR [rcx]
 100130b:	add    BYTE PTR [rax],al
 100130d:	add    BYTE PTR [rax],al
 100130f:	add    BYTE PTR [rbx+rax*1+0x1],cl
 1001313:	add    BYTE PTR [rax],al
 1001315:	add    BYTE PTR [rax],al
 1001317:	add    BYTE PTR [rsi],bl
 1001319:	or     al,BYTE PTR [rcx]
 100131b:	add    BYTE PTR [rax],al
 100131d:	add    BYTE PTR [rax],al
 100131f:	add    BYTE PTR [rdx],ch
 1001321:	or     al,BYTE PTR [rcx]
 1001323:	add    BYTE PTR [rax],al
 1001325:	add    BYTE PTR [rax],al
 1001327:	add    BYTE PTR [rdx+rcx*1],dh
 100132a:	add    DWORD PTR [rax],eax
 100132c:	add    BYTE PTR [rax],al
 100132e:	add    BYTE PTR [rax],al
 1001330:	rex.X or al,BYTE PTR [rcx]
 1001333:	add    BYTE PTR [rax],al
 1001335:	add    BYTE PTR [rax],al
 1001337:	add    BYTE PTR [rdx+rcx*1+0x1],cl
 100133b:	add    BYTE PTR [rax],al
 100133d:	add    BYTE PTR [rax],al
 100133f:	add    BYTE PTR [rdx+rcx*1+0x1],bl
 1001343:	add    BYTE PTR [rax],al
 1001345:	add    BYTE PTR [rax],al
 1001347:	add    BYTE PTR [rdx+rcx*1+0x1],ch
 100134b:	add    BYTE PTR [rax],al
 100134d:	add    BYTE PTR [rax],al
 100134f:	add    BYTE PTR [rdx+rcx*1+0x1],bh
 1001353:	add    BYTE PTR [rax],al
 1001355:	add    BYTE PTR [rax],al
 1001357:	add    BYTE PTR [rdx+rcx*1+0x1],cl
 100135e:	add    BYTE PTR [rax],al
 1001360:	push   rsi
 1001361:	add    eax,DWORD PTR [rcx]
 1001363:	add    BYTE PTR [rax],al
 1001365:	add    BYTE PTR [rax],al
 1001367:	add    BYTE PTR [rdx+0x3],ah
 100136a:	add    DWORD PTR [rax],eax
 100136c:	add    BYTE PTR [rax],al
 100136e:	add    BYTE PTR [rax],al
 1001370:	jo     0x1001375
 1001372:	add    DWORD PTR [rax],eax
 1001374:	add    BYTE PTR [rax],al
 1001376:	add    BYTE PTR [rax],al
 1001378:	xchg   BYTE PTR [rbx],al
 100137a:	add    DWORD PTR [rax],eax
 100137c:	add    BYTE PTR [rax],al
 100137e:	add    BYTE PTR [rax],al
 1001380:	nop
 1001381:	add    eax,DWORD PTR [rcx]
 1001383:	add    BYTE PTR [rax],al
 1001385:	add    BYTE PTR [rax],al
 1001387:	add    BYTE PTR [rsi+0x103],bl
 100138d:	add    BYTE PTR [rax],al
 100138f:	add    BYTE PTR [rsi+0x103],ch
 1001395:	add    BYTE PTR [rax],al
 1001397:	add    dh,al
 1001399:	add    eax,DWORD PTR [rcx]
 100139b:	add    BYTE PTR [rax],al
 100139d:	add    BYTE PTR [rax],al
 100139f:	add    ah,dl
 10013a1:	add    eax,DWORD PTR [rcx]
 10013a3:	add    BYTE PTR [rax],al
 10013a5:	add    BYTE PTR [rax],al
 10013a7:	add    ah,bl
 10013a9:	add    eax,DWORD PTR [rcx]
 10013ab:	add    BYTE PTR [rax],al
 10013ad:	add    BYTE PTR [rax],al
 10013af:	add    dl,ch
 10013b1:	add    eax,DWORD PTR [rcx]
 10013b3:	add    BYTE PTR [rax],al
 10013b5:	add    BYTE PTR [rax],al
 10013b7:	add    ah,dh
 10013b9:	add    eax,DWORD PTR [rcx]
 10013bb:	add    BYTE PTR [rax],al
 10013bd:	add    BYTE PTR [rax],al
 10013bf:	add    ah,bh
 10013c1:	add    eax,DWORD PTR [rcx]
 10013c3:	add    BYTE PTR [rax],al
 10013c5:	add    BYTE PTR [rax],al
 10013c7:	add    BYTE PTR [rsi],al
 10013c9:	add    al,0x1
 10013cb:	add    BYTE PTR [rax],al
 10013cd:	add    BYTE PTR [rax],al
 10013cf:	add    BYTE PTR [rdx],dl
 10013d1:	add    al,0x1
 10013d3:	add    BYTE PTR [rax],al
 10013d5:	add    BYTE PTR [rax],al
 10013d7:	add    BYTE PTR [rax],ah
 10013d9:	add    al,0x1
 10013db:	add    BYTE PTR [rax],al
 10013dd:	add    BYTE PTR [rax],al
 10013df:	add    BYTE PTR [rsi],dh
 10013e1:	add    al,0x1
 10013e3:	add    BYTE PTR [rax],al
 10013e5:	add    BYTE PTR [rax],al
 10013e7:	add    BYTE PTR [rdx+0x4],cl
 10013ea:	add    DWORD PTR [rax],eax
 10013ec:	add    BYTE PTR [rax],al
 10013ee:	add    BYTE PTR [rax],al
 10013f0:	push   rsi
 10013f1:	add    al,0x1
 10013f3:	add    BYTE PTR [rax],al
 10013f5:	add    BYTE PTR [rax],al
 10013f7:	add    BYTE PTR [rax+0x4],ah
 10013fa:	add    DWORD PTR [rax],eax
 10013fc:	add    BYTE PTR [rax],al
 10013fe:	add    BYTE PTR [rax],al
 1001400:	add    BYTE PTR [rcx+rax*1],0x0
 1001404:	add    BYTE PTR [rax],al
 1001406:	add    BYTE PTR [rax],al
 1001408:	xchg   esp,eax
 1001409:	add    al,0x1
 100140b:	add    BYTE PTR [rax],al
 100140d:	add    BYTE PTR [rax],al
 100140f:	add    BYTE PTR [rdx+0x104],ch
 1001415:	add    BYTE PTR [rax],al
 1001417:	add    BYTE PTR [rsp+rax*1+0x1],dh
 100141e:	add    BYTE PTR [rax],al
 1001420:	ret    0x104
 1001423:	add    BYTE PTR [rax],al
 1001425:	add    BYTE PTR [rax],al
 1001427:	add    dl,cl
 1001429:	add    al,0x1
 100142b:	add    BYTE PTR [rax],al
 100142d:	add    BYTE PTR [rax],al
 100142f:	add    BYTE PTR [rax],ch
 1001431:	add    eax,DWORD PTR [rcx]
	...
 100143f:	add    BYTE PTR [rax+rax*1],al
 1001442:	add    BYTE PTR [rax],al
 1001444:	add    BYTE PTR [rax],al
 1001446:	add    BYTE PTR [rax+0x6],al
 100144c:	add    BYTE PTR [rax],al
 100144e:	add    BYTE PTR [rax+0x0],al
 1001454:	add    BYTE PTR [rax],al
 1001456:	add    BYTE PTR [rax],al
 1001458:	push   rsi
 1001459:	or     eax,DWORD PTR [rcx]
 100145b:	add    BYTE PTR [rax],al
 100145d:	add    BYTE PTR [rax],al
 100145f:	add    BYTE PTR [rax+0xb],al
 1001462:	add    DWORD PTR [rax],eax
	...
 1001470:	mov    esi,0x105
	...
 100147d:	add    BYTE PTR [rax],al
 100147f:	add    al,ch
 1001481:	add    al,BYTE PTR [rcx]
 1001483:	add    BYTE PTR [rax],al
 1001485:	add    BYTE PTR [rax],al
 1001487:	add    dh,bh
 1001489:	add    al,BYTE PTR [rcx]
	...
 1001497:	add    BYTE PTR [rbx+rcx*1],cl
 100149a:	add    DWORD PTR [rax],eax
 100149c:	add    BYTE PTR [rax],al
 100149e:	add    BYTE PTR [rax],al
 10014a0:	and    cl,BYTE PTR [rbx]
 10014a2:	add    DWORD PTR [rax],eax
	...
 10014b0:	loopne 0x10014b6
 10014b2:	add    DWORD PTR [rax],eax
 10014b4:	add    BYTE PTR [rax],al
 10014b6:	add    BYTE PTR [rax],al
 10014b8:	repnz add al,0x1
 10014bb:	add    BYTE PTR [rax],al
 10014bd:	add    BYTE PTR [rax],al
 10014bf:	add    BYTE PTR [rdx],cl
 10014c1:	add    eax,0x1
 10014c6:	add    BYTE PTR [rax],al
 10014c8:	and    BYTE PTR [rip+0x1],al        # 0x10014cf
 10014ce:	add    BYTE PTR [rax],al
 10014d0:	cmp    BYTE PTR [rip+0x1],al        # 0x10014d7
 10014d6:	add    BYTE PTR [rax],al
 10014d8:	push   rdx
 10014d9:	add    eax,0x1
 10014de:	add    BYTE PTR [rax],al
 10014e0:	push   0x105
 10014e5:	add    BYTE PTR [rax],al
 10014e7:	add    BYTE PTR [rbp+rax*1+0x1],dl
 10014ee:	add    BYTE PTR [rax],al
 10014f0:	add    BYTE PTR [rip+0x1],0x0        # 0x10014f8
	...
 1001507:	add    BYTE PTR [rdx+rdx*2+0x0],ah
 100150b:	add    DWORD PTR [rax],eax
 100150d:	add    BYTE PTR [rax],al
 100150f:	add    al,bl
 1001511:	in     eax,0x0
 1001513:	add    DWORD PTR [rax],eax
 1001515:	add    BYTE PTR [rax],al
 1001517:	add    BYTE PTR [rsi+riz*8],al
 100151a:	add    BYTE PTR [rcx],al
 100151c:	add    BYTE PTR [rax],al
 100151e:	add    BYTE PTR [rax],al
 1001520:	rex.WR out 0x0,al
 1001523:	add    DWORD PTR [rax],eax
 1001525:	add    BYTE PTR [rax],al
 1001527:	add    BYTE PTR [rsi+riz*8+0x0],ch
 100152b:	add    DWORD PTR [rax],eax
 100152d:	add    BYTE PTR [rax],al
 100152f:	add    BYTE PTR [rax+0x100e6],dh
 1001535:	add    BYTE PTR [rax],al
 1001537:	add    al,al
 1001539:	in     al,0x0
 100153b:	add    DWORD PTR [rax],eax
 100153d:	add    BYTE PTR [rax],al
 100153f:	add    BYTE PTR [rax],dh
 1001541:	out    0x0,al
 1001543:	add    DWORD PTR [rax],eax
	...
 1001555:	add    BYTE PTR [rax],al
 1001557:	add    al,bl
 1001559:	push   rsp
 100155a:	add    BYTE PTR [rcx],al
 100155c:	add    BYTE PTR [rax],al
 100155e:	add    BYTE PTR [rax],al
 1001560:	fcomp  DWORD PTR [rcx+0x0]
 1001563:	add    DWORD PTR [rax],eax
	...
 1001571:	add    BYTE PTR [rax],al
 1001573:	add    cl,ah
 1001575:	(bad)  
 1001576:	xor    eax,0x4f
 100157b:	add    BYTE PTR [rdx],al
 100157d:	add    BYTE PTR [rax],al
 100157f:	add    BYTE PTR [rax+rax*1],ah
 1001582:	add    BYTE PTR [rax],al
 1001584:	mov    WORD PTR [rcx+0x0],es
 1001587:	add    BYTE PTR [rbp+rsi*1+0x0],cl
 100158e:	add    BYTE PTR [rax],al
 1001590:	add    BYTE PTR fs:[rax+rax*1+0x73],dh
 1001595:	add    BYTE PTR [rax+0x0],dh
 1001598:	imul   eax,DWORD PTR [rax],0x650070
 100159e:	ins    BYTE PTR es:[rdi],dx
 100159f:	add    BYTE PTR [rcx+0x0],ch
 10015a2:	outs   dx,BYTE PTR ds:[rsi]
 10015a3:	add    BYTE PTR [rbp+0x0],ah
 10015a6:	add    BYTE PTR cs:[rax+rax*1+0x6c],ah
 10015ab:	add    BYTE PTR [rax+rax*1+0x0],ch
 10015af:	add    BYTE PTR [rdx],ah
 10015b1:	add    eax,0x21993
 10015b6:	add    BYTE PTR [rax],al
 10015b8:	fs jmp 0x10115be
 10015be:	add    BYTE PTR [rax],al
 10015c0:	je     0x10015ab
 10015c2:	add    BYTE PTR [rax],al
 10015c4:	add    al,0x0
 10015c6:	add    BYTE PTR [rax],al
 10015c8:	pushf  
 10015c9:	jmp    0x12015ce
 10015ce:	add    BYTE PTR [rax],al
 10015d0:	add    BYTE PTR [rax],al
 10015d2:	add    BYTE PTR [rax],al
 10015d4:	add    DWORD PTR [rax],eax
 10015d6:	add    BYTE PTR [rax],al
 10015d8:	add    BYTE PTR [r8+rax*1+0x76],spl
 10015dd:	add    BYTE PTR [rcx+0x0],ah
 10015e0:	jo     0x10015e2
 10015e2:	imul   eax,DWORD PTR [rax],0x320033
 10015e8:	add    BYTE PTR cs:[rax+rax*1+0x6c],ah
 10015ed:	add    BYTE PTR [rax+rax*1+0x0],ch
 10015f1:	add    BYTE PTR [rax],al
 10015f3:	add    BYTE PTR [rax],al
 10015f5:	add    BYTE PTR [rax],al
 10015f7:	add    BYTE PTR [rdx+0x65],dl
 10015fa:	addr32 rex.WRXB jo 0x1001663
 10015fe:	outs   dx,BYTE PTR ds:[rsi]
 10015ff:	rex.WXB
 1001600:	gs jns 0x1001657
 1001603:	jb     0x1001666
 1001605:	outs   dx,BYTE PTR ds:[rsi]
 1001606:	jae    0x1001669
 1001608:	movsxd esi,DWORD PTR [rbp+riz*2+0x64]
 100160c:	push   rdi
 100160d:	add    BYTE PTR [rax],al
 100160f:	add    BYTE PTR [rsi+0x1],al
 1001612:	add    BYTE PTR [rax],al
 1001614:	add    BYTE PTR [rax],al
 1001616:	add    BYTE PTR [rax],al
 1001618:	rol    BYTE PTR [rax],0x0
 100161b:	add    BYTE PTR [rax],al
 100161d:	add    BYTE PTR [rax],al
 100161f:	rex.RX add BYTE PTR [rax],r8b
 1001622:	add    BYTE PTR [rax],al
 1001624:	add    BYTE PTR [rax],al
 1001626:	add    BYTE PTR [rax],al
 1001628:	add    BYTE PTR [r8+0x0],dl
 100162c:	push   rax
 100162d:	add    BYTE PTR [rcx+0x0],cl
 1001630:	add    BYTE PTR [rax],r8b
 1001633:	add    BYTE PTR [rax],al
 1001635:	add    BYTE PTR [rax],al
 1001637:	add    BYTE PTR [rbp+rbp*2+0x70],al
 100163b:	rex.RXB
 100163c:	gs je  0x1001682
 100163f:	ins    BYTE PTR es:[rdi],dx
 1001640:	imul   esp,DWORD PTR [rbp+0x6e],0x70784574
 1001647:	outs   dx,DWORD PTR ds:[rsi]
 1001648:	jb     0x10016be
 100164a:	add    BYTE PTR [rax],al
 100164c:	add    BYTE PTR [rax],al
 100164e:	add    BYTE PTR [rax],al
 1001650:	and    eax,0x25007300
 1001655:	add    BYTE PTR [rbx+0x0],dh
 1001658:	pop    rdi
 1001659:	add    BYTE PTR [rip+0x2e006400],ah        # 0x2f007a5f
 100165f:	add    BYTE PTR [rax+rax*1+0x6d],dh
 1001663:	add    BYTE PTR [rax+0x0],dh
 1001666:	add    BYTE PTR [rax],al
 1001668:	and    eax,0x25007300
 100166d:	add    BYTE PTR [rbx+0x0],dh
 1001670:	pop    rdi
 1001671:	add    BYTE PTR [rip+0x2e006400],ah        # 0x2f007a77
 1001677:	add    BYTE PTR [rbp+0x0],ch
 100167a:	add    BYTE PTR fs:[rbp+0x0],ch
 100167e:	jo     0x1001680
	...
 1001690:	push   rbx
 1001691:	add    BYTE PTR [rdi+0x0],cl
 1001694:	add    BYTE PTR [rax+r8*1+0x57],r10b
 1001699:	add    BYTE PTR [rcx+0x0],al
 100169c:	push   rdx
 100169d:	add    BYTE PTR [rbp+0x0],al
 10016a0:	pop    rsp
 10016a1:	add    BYTE PTR [rbp+0x0],cl
 10016a4:	imul   eax,DWORD PTR [rax],0x720063
 10016aa:	outs   dx,DWORD PTR ds:[rsi]
 10016ab:	add    BYTE PTR [rbx+0x0],dh
 10016ae:	outs   dx,DWORD PTR ds:[rsi]
 10016af:	add    BYTE PTR [rsi+0x0],ah
 10016b2:	je     0x10016b4
 10016b4:	pop    rsp
 10016b5:	add    BYTE PTR [rbp+0x0],cl
 10016b8:	imul   eax,DWORD PTR [rax],0x720063
 10016be:	outs   dx,DWORD PTR ds:[rsi]
 10016bf:	add    BYTE PTR [rbx+0x0],dh
 10016c2:	outs   dx,DWORD PTR ds:[rsi]
 10016c3:	add    BYTE PTR [rsi+0x0],ah
 10016c6:	je     0x10016c8
 10016c8:	and    BYTE PTR [rax],al
 10016ca:	push   rbx
 10016cb:	add    BYTE PTR [rcx+0x0],dl
 10016ce:	rex.WR add BYTE PTR [rax],r12b
 10016d1:	add    BYTE PTR [rbx+0x0],dl
 10016d4:	add    BYTE PTR gs:[rdx+0x0],dh
 10016d8:	jbe    0x10016da
 10016da:	add    BYTE PTR gs:[rdx+0x0],dh
 10016de:	pop    rsp
 10016df:	add    BYTE PTR [rcx],dh
 10016e1:	add    BYTE PTR [rcx],dh
 10016e3:	add    BYTE PTR [rax],dh
 10016e5:	add    BYTE PTR [rax+rax*1+0x53],bl
 10016e9:	add    BYTE PTR [rbx+0x0],dl
 10016ec:	rex.WB add BYTE PTR [r11+0x0],dl
 10016f0:	pop    rsp
 10016f1:	add    BYTE PTR [rbx+0x0],dl
 10016f4:	add    BYTE PTR gs:[rax+rax*1+0x75],dh
 10016f9:	add    BYTE PTR [rax+0x0],dh
 10016fc:	pop    rsp
 10016fd:	add    BYTE PTR [rax+rax*1+0x74],al
 1001701:	add    BYTE PTR [rbx+0x0],dh
 1001704:	push   rax
 1001705:	add    BYTE PTR [rcx+0x0],ah
 1001708:	je     0x100170a
 100170a:	push   0x0
 100170f:	add    BYTE PTR [rbx+0x0],dl
 1001712:	jno    0x1001714
 1001714:	ins    BYTE PTR es:[rdi],dx
 1001715:	add    BYTE PTR [rax+rax*1+0x75],al
 1001719:	add    BYTE PTR [rbp+0x0],ch
 100171c:	jo     0x100171e
 100171e:	add    BYTE PTR gs:[rdx+0x0],dh
 1001722:	add    BYTE PTR [rax+r8*1+0x61],r13b
 1001727:	add    BYTE PTR [rdi+0x0],ah
 100172a:	jae    0x100172c
 100172c:	add    BYTE PTR [rax],al
 100172e:	add    BYTE PTR [rax],al
 1001730:	push   rbx
 1001731:	add    BYTE PTR [rcx+0x0],dh
 1001734:	ins    BYTE PTR es:[rdi],dx
 1001735:	add    BYTE PTR [rax+rax*1+0x75],al
 1001739:	add    BYTE PTR [rbp+0x0],ch
 100173c:	jo     0x100173e
 100173e:	add    BYTE PTR gs:[rdx+0x0],dh
 1001742:	rex.WRB add BYTE PTR [r9+0x0],r13b
 1001746:	outs   dx,BYTE PTR ds:[rsi]
 1001747:	add    BYTE PTR [rcx+0x0],ch
 100174a:	add    BYTE PTR fs:[rbp+0x0],dh
 100174e:	ins    DWORD PTR es:[rdi],dx
 100174f:	add    BYTE PTR [rax+0x0],dh
 1001752:	add    BYTE PTR [rax+r8*1+0x61],r13b
 1001757:	add    BYTE PTR [rdi+0x0],ah
 100175a:	jae    0x100175c
 100175c:	add    BYTE PTR [rax],al
 100175e:	add    BYTE PTR [rax],al
 1001760:	rex
 1001761:	rex.WRB add BYTE PTR [r9],r8b
 1001764:	add    BYTE PTR [rax],al
 1001766:	add    BYTE PTR [rax],al
 1001768:	ror    BYTE PTR [rax+rax*1+0x1],1
 100176c:	add    BYTE PTR [rax],al
 100176e:	add    BYTE PTR [rax],al
 1001770:	loopne 0x10017be
 1001772:	add    BYTE PTR [rcx],al
 1001774:	add    BYTE PTR [rax],al
 1001776:	add    BYTE PTR [rax],al
 1001778:	xor    BYTE PTR [rax+rax*1+0x1],al
 100177c:	add    BYTE PTR [rax],al
 100177e:	add    BYTE PTR [rax],al
 1001780:	rex
 1001781:	add    BYTE PTR [rcx],r8b
 1001784:	add    BYTE PTR [rax],al
 1001786:	add    BYTE PTR [rax],al
 1001788:	jo     0x10017d5
 100178a:	add    BYTE PTR [rcx],al
 100178c:	add    BYTE PTR [rax],al
 100178e:	add    BYTE PTR [rax],al
 1001790:	rcl    BYTE PTR [rdi],0x0
 1001793:	add    DWORD PTR [rax],eax
	...
 100179d:	add    BYTE PTR [rax],al
 100179f:	add    BYTE PTR [rcx],al
	...
 10017bd:	add    BYTE PTR [rax],al
 10017bf:	add    BYTE PTR [rdx],ah
 10017c1:	add    BYTE PTR [rax],al
 10017c3:	add    BYTE PTR [rax],al
 10017c5:	add    BYTE PTR [rax],al
 10017c7:	add    al,al
 10017c9:	add    BYTE PTR [rax],al
 10017cb:	add    BYTE PTR [rax],al
 10017cd:	add    BYTE PTR [rax],al
 10017cf:	rex.RX push rbx
 10017d1:	add    BYTE PTR [rdi+0x0],cl
 10017d4:	add    BYTE PTR [rax+r8*1+0x57],r10b
 10017d9:	add    BYTE PTR [rcx+0x0],al
 10017dc:	push   rdx
 10017dd:	add    BYTE PTR [rbp+0x0],al
 10017e0:	pop    rsp
 10017e1:	add    BYTE PTR [rbx+0x0],al
 10017e4:	ins    BYTE PTR es:[rdi],dx
 10017e5:	add    BYTE PTR [rcx+0x0],ah
 10017e8:	jae    0x10017ea
 10017ea:	jae    0x10017ec
 10017ec:	add    BYTE PTR gs:[rbx+0x0],dh
 10017f0:	pop    rsp
 10017f1:	add    BYTE PTR [rbx+0x0],al
 10017f4:	rex.WR add BYTE PTR [rbx+0x0],r10b
 10017f8:	rex.WB add BYTE PTR [r8+rax*1+0x5c],al
 10017fd:	add    BYTE PTR [rip+0x5c007300],ah        # 0x5d008b03
 1001803:	add    BYTE PTR [rcx+0x0],cl
 1001806:	outs   dx,BYTE PTR ds:[rsi]
 1001807:	add    BYTE PTR [rax+0x0],dh
 100180a:	jb     0x100180c
 100180c:	outs   dx,DWORD PTR ds:[rsi]
 100180d:	add    BYTE PTR [rbx+0x0],ah
 1001810:	push   rbx
 1001811:	add    BYTE PTR [rbp+0x0],ah
 1001814:	jb     0x1001816
 1001816:	jbe    0x1001818
 1001818:	add    BYTE PTR gs:[rdx+0x0],dh
 100181c:	xor    eax,DWORD PTR [rax]
 100181e:	xor    al,BYTE PTR [rax]
	...
 1001828:	rex.R ins BYTE PTR es:[rdi],dx
 100182a:	ins    BYTE PTR es:[rdi],dx
 100182b:	rex.RXB
 100182c:	gs je  0x1001872
 100182f:	ins    BYTE PTR es:[rdi],dx
 1001830:	(bad)  
 1001831:	jae    0x10018a6
 1001833:	rex.WRXB (bad) 
 1001835:	push   0x65
 1001837:	movsxd esi,DWORD PTR [rax+rax*1+0x0]
 100183b:	add    BYTE PTR [rax],al
 100183d:	add    BYTE PTR [rax],al
 100183f:	add    BYTE PTR [rip+0x72727573],ch        # 0x73728db8
 1001845:	outs   dx,DWORD PTR ds:[rsi]
 1001846:	addr32 (bad) 
 1001848:	je     0x10018af
 100184a:	add    BYTE PTR [rax],al
 100184c:	add    BYTE PTR [rax],al
 100184e:	add    BYTE PTR [rax],al
 1001850:	rcl    BYTE PTR [rax+0x0],1
 1001853:	add    DWORD PTR [rax],eax
 1001855:	add    BYTE PTR [rax],al
 1001857:	add    BYTE PTR [rax+0x10050],al
 100185d:	add    BYTE PTR [rax],al
 100185f:	add    BYTE PTR [rax+0x10050],ah
 1001865:	add    BYTE PTR [rax],al
 1001867:	add    BYTE PTR [rax+0x1004d],al
 100186d:	add    BYTE PTR [rax],al
 100186f:	add    BYTE PTR [rax],dh
 1001871:	push   rax
 1001872:	add    BYTE PTR [rcx],al
 1001874:	add    BYTE PTR [rax],al
 1001876:	add    BYTE PTR [rax],al
 1001878:	add    BYTE PTR [rdx+0x0],dl
 100187b:	add    DWORD PTR [rax],eax
 100187d:	add    BYTE PTR [rax],al
 100187f:	add    BYTE PTR [rip+0x6b736174],ch        # 0x6c7379f9
 1001885:	movsxd esi,DWORD PTR [rdx+0x65]
 1001888:	(bad)  
 1001889:	je     0x10018fa
 100188b:	jb     0x100188d
	...
 100189d:	add    BYTE PTR [rax],al
 100189f:	add    al,al
 10018a1:	adc    al,0x1
 10018a3:	add    DWORD PTR [rax],eax
 10018a5:	add    BYTE PTR [rax],al
 10018a7:	add    BYTE PTR [rax+0x15],ah
 10018aa:	add    DWORD PTR [rcx],eax
 10018ac:	add    BYTE PTR [rax],al
 10018ae:	add    BYTE PTR [rax],al
 10018b0:	adc    BYTE PTR [rcx+0x2f],bl
 10018b3:	mov    dh,0x28
 10018b5:	rcl    DWORD PTR gs:[rcx],1
 10018b8:	xchg   esi,eax
 10018b9:	adc    DWORD PTR [rax],eax
 10018bb:	add    al,bh
 10018bd:	(bad)  
 10018be:	or     eax,0x4c3de00d
 10018c3:	cmp    DWORD PTR [rdi+0x3c],ebp
 10018c6:	rcl    BYTE PTR [rcx],cl
 10018c8:	cmp    DWORD PTR [rbx+0x0],0x7a794fc0
 10018cf:	mov    bh,0xca
 10018d1:	test   eax,0x92a25dc0
 10018d6:	add    al,0x42
 10018d8:	nop
 10018d9:	add    esp,esp
 10018db:	(bad)  
 10018dc:	pop    rdi
 10018dd:	adc    ecx,esp
 10018df:	test   al,0x0
 10018e1:	add    BYTE PTR [rax],al
 10018e3:	add    BYTE PTR [rax],al
 10018e5:	add    BYTE PTR [rax],al
 10018e7:	add    al,al
 10018e9:	add    BYTE PTR [rax],al
 10018eb:	add    BYTE PTR [rax],al
 10018ed:	add    BYTE PTR [rax],al
 10018ef:	rex.RX and r8d,DWORD PTR [rbx]
 10018f2:	add    BYTE PTR [rax],al
 10018f4:	add    BYTE PTR [rax],al
 10018f6:	add    BYTE PTR [rax],al
 10018f8:	rol    BYTE PTR [rax],0x0
 10018fb:	add    BYTE PTR [rax],al
 10018fd:	add    BYTE PTR [rax],al
 10018ff:	rex.RX pop rsp
 1001901:	add    BYTE PTR [rbp+0x0],dl
 1001904:	rex.WRX add BYTE PTR [rbx+0x0],r8b
 1001908:	pop    rsp
 1001909:	add    BYTE PTR [rax],al
 100190b:	add    BYTE PTR [rdx],bh
 100190d:	add    BYTE PTR [rax+rax*1+0x0],bl
 1001911:	add    BYTE PTR [rax],al
 1001913:	add    BYTE PTR [rax],al
 1001915:	add    BYTE PTR [rax],al
 1001917:	add    BYTE PTR [rax+rax*1+0x5c],bl
 100191b:	add    BYTE PTR [rdi],bh
 100191d:	add    BYTE PTR [rax+rax*1+0x0],bl
 1001921:	add    BYTE PTR [rax],al
 1001923:	add    BYTE PTR [rax+rax*1+0x0],bl
 1001927:	add    BYTE PTR [rax+rax*1+0x5c],bl
 100192b:	add    BYTE PTR [rdi],bh
 100192d:	add    BYTE PTR [rax+rax*1+0x55],bl
 1001931:	add    BYTE PTR [rsi+0x0],cl
 1001934:	add    BYTE PTR [r8+r8*1+0x0],bl
 1001939:	add    BYTE PTR [rax],al
 100193b:	add    BYTE PTR [rax+rax*1+0x5c],bl
	...
 1001947:	add    BYTE PTR [rdx],bh
 1001949:	add    BYTE PTR [rdx],bh
 100194b:	add    BYTE PTR [rax+rax*1],ah
 100194e:	add    BYTE PTR [rcx+0x0],r8b
 1001952:	push   rsp
 1001953:	add    BYTE PTR [rcx+0x0],al
	...
 100195e:	add    BYTE PTR [rax],al
 1001960:	jnp    0x1001962
 1001962:	xor    BYTE PTR [rax],al
 1001964:	xor    BYTE PTR [rax],al
 1001966:	xor    BYTE PTR [rax],al
 1001968:	xor    BYTE PTR [rax],al
 100196a:	xor    BYTE PTR [rax],al
 100196c:	xor    BYTE PTR [rax],al
 100196e:	xor    BYTE PTR [rax],al
 1001970:	xor    BYTE PTR [rax],al
 1001972:	sub    eax,0x30003000
 1001977:	add    BYTE PTR [rax],dh
 1001979:	add    BYTE PTR [rax],dh
 100197b:	add    BYTE PTR [rip+0x30003000],ch        # 0x31004981
 1001981:	add    BYTE PTR [rax],dh
 1001983:	add    BYTE PTR [rax],dh
 1001985:	add    BYTE PTR [rip+0x30003000],ch        # 0x3100498b
 100198b:	add    BYTE PTR [rax],dh
 100198d:	add    BYTE PTR [rax],dh
 100198f:	add    BYTE PTR [rip+0x30003000],ch        # 0x31004995
 1001995:	add    BYTE PTR [rax],dh
 1001997:	add    BYTE PTR [rax],dh
 1001999:	add    BYTE PTR [rax],dh
 100199b:	add    BYTE PTR [rax],dh
 100199d:	add    BYTE PTR [rax],dh
 100199f:	add    BYTE PTR [rax],dh
 10019a1:	add    BYTE PTR [rax],dh
 10019a3:	add    BYTE PTR [rax],dh
 10019a5:	add    BYTE PTR [rax],dh
 10019a7:	add    BYTE PTR [rax],dh
 10019a9:	add    BYTE PTR [rbp+0x0],bh
 10019ac:	add    BYTE PTR [rax],al
 10019ae:	add    BYTE PTR [rax],al
 10019b0:	pop    rsp
 10019b1:	add    BYTE PTR [rax+rax*1+0x3f],bl
 10019b5:	add    BYTE PTR [rax+rax*1+0x56],bl
 10019b9:	add    BYTE PTR [rdi+0x0],ch
 10019bc:	ins    BYTE PTR es:[rdi],dx
 10019bd:	add    BYTE PTR [rbp+0x0],dh
 10019c0:	ins    DWORD PTR es:[rdi],dx
 10019c1:	add    BYTE PTR [rbp+0x0],ah
 10019c4:	add    BYTE PTR [rax],al
 10019c6:	add    BYTE PTR [rax],al
 10019c8:	rex.X add BYTE PTR [rcx+0x0],bpl
 10019cc:	outs   dx,BYTE PTR ds:[rsi]
 10019cd:	add    BYTE PTR [rsi+0x0],ch
	...
 10019d8:	push   rsp
 10019d9:	add    BYTE PTR [rcx+0x0],ah
 10019dc:	jae    0x10019de
 10019de:	imul   eax,DWORD PTR [rax],0x73
 10019e1:	add    BYTE PTR [rax],al
 10019e3:	add    BYTE PTR [rax],al
 10019e5:	add    BYTE PTR [rax],al
 10019e7:	add    BYTE PTR [rax+0x0],dl
 10019ea:	imul   eax,DWORD PTR [rax],0x650070
 10019f0:	ins    BYTE PTR es:[rdi],dx
 10019f1:	add    BYTE PTR [rcx+0x0],ch
 10019f4:	outs   dx,BYTE PTR ds:[rsi]
 10019f5:	add    BYTE PTR [rbp+0x0],ah
 10019f8:	rex.XB add BYTE PTR [r15+0x0],bpl
 10019fc:	ins    DWORD PTR es:[rdi],dx
 10019fd:	add    BYTE PTR [rax+0x0],dh
 1001a00:	outs   dx,DWORD PTR ds:[rsi]
 1001a01:	add    BYTE PTR [rsi+0x0],ch
 1001a04:	add    BYTE PTR gs:[rsi+0x0],ch
 1001a08:	je     0x1001a0a
 1001a0a:	jae    0x1001a0c
 1001a0c:	add    BYTE PTR [rax],al
 1001a0e:	add    BYTE PTR [rax],al
 1001a10:	rex.RX add BYTE PTR [rdi+0x0],r13b
 1001a14:	jb     0x1001a16
 1001a16:	add    BYTE PTR [r9+0x0],r12b
 1001a1a:	movsxd eax,DWORD PTR [rax]
 1001a1c:	push   0x6e004500
 1001a21:	add    BYTE PTR [rbp+0x0],dh
 1001a24:	ins    DWORD PTR es:[rdi],dx
 1001a25:	add    BYTE PTR [rbp+0x0],ah
 1001a28:	jb     0x1001a2a
 1001a2a:	(bad)  
 1001a2b:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1001a2f:	add    BYTE PTR [rdx+0x0],dh
 1001a32:	jae    0x1001a34
 1001a34:	add    BYTE PTR [rax],al
 1001a36:	add    BYTE PTR [rax],al
 1001a38:	rex.XB add BYTE PTR [r15+0x0],bpl
 1001a3c:	outs   dx,BYTE PTR ds:[rsi]
 1001a3d:	add    BYTE PTR [rsi+0x0],ch
 1001a40:	add    BYTE PTR gs:[rbx+0x0],ah
 1001a44:	je     0x1001a46
 1001a46:	imul   eax,DWORD PTR [rax],0x6e006f
 1001a4c:	jae    0x1001a4e
 1001a4e:	add    BYTE PTR [rax],al
 1001a50:	rex.WR add BYTE PTR [rdi+0x0],r13b
 1001a54:	add    BYTE PTR [eax+0x0],dl
 1001a58:	jb     0x1001a5a
 1001a5a:	outs   dx,DWORD PTR ds:[rsi]
 1001a5b:	add    BYTE PTR [rsi+0x0],dh
 1001a5e:	imul   eax,DWORD PTR [rax],0x650064
 1001a64:	jb     0x1001a66
 1001a66:	jae    0x1001a68
	...
 1001a70:	push   rax
 1001a71:	add    BYTE PTR [rcx+0x0],ah
 1001a74:	movsxd eax,DWORD PTR [rax]
 1001a76:	imul   eax,DWORD PTR [rax],0x61
 1001a79:	add    BYTE PTR [rdi+0x0],ah
 1001a7c:	add    BYTE PTR gs:[rbx+0x0],dh
	...
 1001a88:	add    BYTE PTR [rcx+0x0],r12b
 1001a8c:	je     0x1001a8e
 1001a8e:	(bad)  
 1001a8f:	add    BYTE PTR [rax+rax*1+0x75],al
 1001a93:	add    BYTE PTR [rbp+0x0],ch
 1001a96:	jo     0x1001a98
 1001a98:	jae    0x1001a9a
 1001a9a:	add    BYTE PTR [rax],al
 1001a9c:	add    BYTE PTR [rax],al
 1001a9e:	add    BYTE PTR [rax],al
 1001aa0:	push   rbx
 1001aa1:	add    BYTE PTR [rbx+0x0],dl
 1001aa4:	rex.WB add BYTE PTR [r11+0x0],dl
 1001aa8:	pop    rsp
 1001aa9:	add    BYTE PTR [rbx+0x0],dl
 1001aac:	add    BYTE PTR gs:[rax+rax*1+0x75],dh
 1001ab1:	add    BYTE PTR [rax+0x0],dh
 1001ab4:	pop    rsp
 1001ab5:	add    BYTE PTR [rax+rax*1+0x74],al
 1001ab9:	add    BYTE PTR [rbx+0x0],dh
 1001abc:	push   rax
 1001abd:	add    BYTE PTR [rcx+0x0],ah
 1001ac0:	je     0x1001ac2
 1001ac2:	push   0x0
 1001ac7:	add    BYTE PTR [rbx+0x53],dl
 1001aca:	rex.WB push r11
 1001acc:	rex.X
 1001acd:	imul   ebp,DWORD PTR gs:[esi+0x44],0x706d75
 1001ad6:	add    BYTE PTR [rax],al
 1001ad8:	push   rbx
 1001ad9:	push   rbx
 1001ada:	rex.WB push r11
 1001adc:	rex.RXB
 1001add:	gs je  0x1001b25
 1001ae0:	js     0x1001b56
 1001ae2:	jb     0x1001b45
 1001ae4:	rex.R jne 0x1001b54
 1001ae7:	jo     0x1001b2f
 1001ae9:	imul   ebp,DWORD PTR [rbp+riz*2+0x48],0x6c646e61
 1001af1:	add    BYTE PTR gs:[rax],al
	...
 1001b00:	rol    BYTE PTR [rax],0x0
 1001b03:	add    BYTE PTR [rax],al
 1001b05:	add    BYTE PTR [rax],al
 1001b07:	rex.RX xor al,0x11
 1001b0a:	sbb    ecx,esp
 1001b0c:	jmp    0x1001a9d
 1001b0e:	pop    rdi
 1001b0f:	rex.WX cdqe 
 1001b11:	xor    DWORD PTR [rax+0x60],esi
 1001b14:	xchg   ecx,eax
 1001b15:	rex.W jns 0x1001b1f
	...
 1001b20:	push   rbx
 1001b21:	add    BYTE PTR [rdi+0x0],cl
 1001b24:	add    BYTE PTR [rax+r8*1+0x57],r10b
 1001b29:	add    BYTE PTR [rcx+0x0],al
 1001b2c:	push   rdx
 1001b2d:	add    BYTE PTR [rbp+0x0],al
 1001b30:	pop    rsp
 1001b31:	add    BYTE PTR [rbp+0x0],cl
 1001b34:	imul   eax,DWORD PTR [rax],0x720063
 1001b3a:	outs   dx,DWORD PTR ds:[rsi]
 1001b3b:	add    BYTE PTR [rbx+0x0],dh
 1001b3e:	outs   dx,DWORD PTR ds:[rsi]
 1001b3f:	add    BYTE PTR [rsi+0x0],ah
 1001b42:	je     0x1001b44
 1001b44:	pop    rsp
 1001b45:	add    BYTE PTR [rbp+0x0],cl
 1001b48:	imul   eax,DWORD PTR [rax],0x720063
 1001b4e:	outs   dx,DWORD PTR ds:[rsi]
 1001b4f:	add    BYTE PTR [rbx+0x0],dh
 1001b52:	outs   dx,DWORD PTR ds:[rsi]
 1001b53:	add    BYTE PTR [rsi+0x0],ah
 1001b56:	je     0x1001b58
 1001b58:	and    BYTE PTR [rax],al
 1001b5a:	push   rbx
 1001b5b:	add    BYTE PTR [rcx+0x0],dl
 1001b5e:	rex.WR add BYTE PTR [rax],r12b
 1001b61:	add    BYTE PTR [rbx+0x0],dl
 1001b64:	add    BYTE PTR gs:[rdx+0x0],dh
 1001b68:	jbe    0x1001b6a
 1001b6a:	add    BYTE PTR gs:[rdx+0x0],dh
 1001b6e:	pop    rsp
 1001b6f:	add    BYTE PTR [rcx],dh
 1001b71:	add    BYTE PTR [rcx],dh
 1001b73:	add    BYTE PTR [rax],dh
 1001b75:	add    BYTE PTR [rax],al
 1001b77:	add    BYTE PTR [rsi],ch
 1001b79:	add    BYTE PTR [rax],al
 1001b7b:	add    BYTE PTR [rax],al
 1001b7d:	add    BYTE PTR [rax],al
 1001b7f:	add    BYTE PTR [rbp+0x0],al
 1001b82:	jb     0x1001b84
 1001b84:	jb     0x1001b86
 1001b86:	outs   dx,DWORD PTR ds:[rsi]
 1001b87:	add    BYTE PTR [rdx+0x0],dh
 1001b8a:	push   rdx
 1001b8b:	add    BYTE PTR [rbp+0x0],ah
 1001b8e:	jo     0x1001b90
 1001b90:	outs   dx,DWORD PTR ds:[rsi]
 1001b91:	add    BYTE PTR [rdx+0x0],dh
 1001b94:	je     0x1001b96
 1001b96:	imul   eax,DWORD PTR [rax],0x67006e
 1001b9c:	add    BYTE PTR [rcx+0x0],r13b
 1001ba0:	jb     0x1001ba2
 1001ba2:	add    BYTE PTR [rax],al
 1001ba4:	add    BYTE PTR [rax],al
 1001ba6:	add    BYTE PTR [rax],al
 1001ba8:	rex.WB add BYTE PTR [r11+0x0],dl
 1001bac:	add    BYTE PTR [rax],r8b
 1001baf:	add    BYTE PTR [rcx+0x0],bh
 1001bb2:	jns    0x1001bb4
 1001bb4:	jns    0x1001bb6
 1001bb6:	jns    0x1001bb8
 1001bb8:	sub    eax,0x4d004d00
 1001bbd:	add    BYTE PTR [rip+0x64006400],ch        # 0x65007fc3
 1001bc3:	add    BYTE PTR [rax],al
 1001bc5:	add    BYTE PTR [rax],al
 1001bc7:	add    BYTE PTR [rax+0x0],cl
 1001bca:	rex.W add BYTE PTR [rdx],dil
 1001bcd:	add    BYTE PTR [rbp+0x0],ch
 1001bd0:	ins    DWORD PTR es:[rdi],dx
 1001bd1:	add    BYTE PTR [rdx],bh
 1001bd3:	add    BYTE PTR [rbx+0x0],dh
 1001bd6:	jae    0x1001bd8
	...
 1001be0:	and    eax,DWORD PTR [rax]
 1001be2:	and    BYTE PTR [rax],al
 1001be4:	push   rbx
 1001be5:	add    BYTE PTR [rbx+0x0],dl
 1001be8:	rex.WB add BYTE PTR [r11+0x0],dl
 1001bec:	and    BYTE PTR [rax],al
 1001bee:	push   rsp
 1001bef:	add    BYTE PTR [rbp+0x0],ah
 1001bf2:	js     0x1001bf4
 1001bf4:	je     0x1001bf6
 1001bf6:	jne    0x1001bf8
 1001bf8:	(bad)  
 1001bf9:	add    BYTE PTR [rax+rax*1+0x20],ch
 1001bfd:	add    BYTE PTR [rax+rax*1+0x75],al
 1001c01:	add    BYTE PTR [rbp+0x0],ch
 1001c04:	jo     0x1001c06
 1001c06:	and    BYTE PTR [rax],al
 1001c08:	je     0x1001c0a
 1001c0a:	(bad)  
 1001c0b:	add    BYTE PTR [rbx+0x0],ch
 1001c0e:	add    BYTE PTR gs:[rsi+0x0],ch
 1001c12:	and    BYTE PTR [rax],al
 1001c14:	(bad)  
 1001c15:	add    BYTE PTR [rax+rax*1+0x20],dh
 1001c19:	add    BYTE PTR [rip+0x20007300],ah        # 0x21008f1f
 1001c1f:	add    BYTE PTR [rip+0xd007300],ah        # 0xe008f25
 1001c25:	add    BYTE PTR [rdx],cl
	...
 1001c2f:	add    BYTE PTR [rbx],ah
 1001c31:	add    BYTE PTR [rax],ah
 1001c33:	add    BYTE PTR [rax+0x0],dl
 1001c36:	rex.WB add BYTE PTR [r8+rax*1+0x20],al
 1001c3b:	add    BYTE PTR [rip+0xd006400],ah        # 0xe008041
 1001c41:	add    BYTE PTR [rdx],cl
 1001c43:	add    BYTE PTR [rax],al
 1001c45:	add    BYTE PTR [rax],al
 1001c47:	add    BYTE PTR [rbx],ah
 1001c49:	add    BYTE PTR [rax],ah
 1001c4b:	add    BYTE PTR [rcx+0x0],cl
 1001c4e:	ins    DWORD PTR es:[rdi],dx
 1001c4f:	add    BYTE PTR [rcx+0x0],ah
 1001c52:	add    BYTE PTR [ebp+0x0],ah
 1001c56:	and    BYTE PTR [rax],al
 1001c58:	rex.WRX add BYTE PTR [rcx+0x0],r12b
 1001c5c:	ins    DWORD PTR es:[rdi],dx
 1001c5d:	add    BYTE PTR [rbp+0x0],ah
 1001c60:	and    BYTE PTR [rax],al
 1001c62:	pop    rbx
 1001c63:	add    BYTE PTR [rip+0x5d007300],ah        # 0x5e008f69
 1001c69:	add    BYTE PTR [rip+0xa00],cl        # 0x100266f
 1001c6f:	add    BYTE PTR [rbx],ah
 1001c71:	add    BYTE PTR [rax],ah
 1001c73:	add    BYTE PTR [rdi+0x0],cl
 1001c76:	push   rbx
 1001c77:	add    BYTE PTR [rax],ah
 1001c79:	add    BYTE PTR [rbp+0x0],ch
 1001c7c:	(bad)  
 1001c7d:	add    BYTE PTR [rdx+0x0],ch
 1001c80:	outs   dx,DWORD PTR ds:[rsi]
 1001c81:	add    BYTE PTR [rdx+0x0],dh
 1001c84:	cmp    eax,0x64002500
 1001c89:	add    BYTE PTR [rax],ah
 1001c8b:	add    BYTE PTR [rbp+0x0],ch
 1001c8e:	imul   eax,DWORD PTR [rax],0x6f006e
 1001c94:	jb     0x1001c96
 1001c96:	cmp    eax,0x64002500
 1001c9b:	add    BYTE PTR [rax],ah
 1001c9d:	add    BYTE PTR [rdx+0x0],ah
 1001ca0:	jne    0x1001ca2
 1001ca2:	imul   eax,DWORD PTR [rax],0x64006c
 1001ca8:	cmp    eax,0x64002500
 1001cad:	add    BYTE PTR [rax],ah
 1001caf:	add    BYTE PTR [rip+0xd007300],ah        # 0xe008fb5
 1001cb5:	add    BYTE PTR [rdx],cl
	...
 1001cbf:	add    BYTE PTR [rcx+0x0],ah
 1001cc2:	ins    DWORD PTR es:[rdi],dx
 1001cc3:	add    BYTE PTR [rax+rax*1+0x36],ah
 1001cc7:	add    BYTE PTR [rax+rax*1],dh
 1001cca:	add    BYTE PTR [rax],al
 1001ccc:	add    BYTE PTR [rax],al
 1001cce:	add    BYTE PTR [rax],al
 1001cd0:	imul   eax,DWORD PTR [rax],0x360061
 1001cd6:	xor    al,0x0
	...
 1001ce0:	js     0x1001ce2
 1001ce2:	cmp    BYTE PTR [rax],al
 1001ce4:	add    BYTE PTR ss:[rax],al
 1001ce7:	add    BYTE PTR [rbp+0x0],dh
 1001cea:	outs   dx,BYTE PTR ds:[rsi]
 1001ceb:	add    BYTE PTR [rbx+0x0],ch
 1001cee:	outs   dx,BYTE PTR ds:[rsi]
 1001cef:	add    BYTE PTR [rdi+0x0],ch
 1001cf2:	ja     0x1001cf4
 1001cf4:	outs   dx,BYTE PTR ds:[rsi]
 1001cf5:	add    BYTE PTR [rdi],bh
	...
 1001cff:	add    BYTE PTR [rbp+0x0],dh
 1001d02:	outs   dx,BYTE PTR ds:[rsi]
 1001d03:	add    BYTE PTR [rax+rax*1+0x65],ah
 1001d07:	add    BYTE PTR [rdx+0x0],dh
 1001d0a:	and    BYTE PTR [rax],al
 1001d0c:	push   rdi
 1001d0d:	add    BYTE PTR [rdi+0x0],cl
 1001d10:	push   rdi
 1001d11:	add    BYTE PTR [rsi],dh
 1001d13:	add    BYTE PTR [rax+rax*1],dh
 1001d16:	add    BYTE PTR [rax],al
 1001d18:	jo     0x1001d1a
 1001d1a:	jb     0x1001d1c
 1001d1c:	outs   dx,DWORD PTR ds:[rsi]
 1001d1d:	add    BYTE PTR [rbx+0x0],ah
 1001d20:	add    BYTE PTR gs:[rbx+0x0],dh
 1001d24:	jae    0x1001d26
 1001d26:	outs   dx,DWORD PTR ds:[rsi]
 1001d27:	add    BYTE PTR [rdx+0x0],dh
 1001d2a:	jae    0x1001d2c
 1001d2c:	add    BYTE PTR [rax],al
 1001d2e:	add    BYTE PTR [rax],al
 1001d30:	jo     0x1001d32
 1001d32:	jb     0x1001d34
 1001d34:	outs   dx,DWORD PTR ds:[rsi]
 1001d35:	add    BYTE PTR [rbx+0x0],ah
 1001d38:	add    BYTE PTR gs:[rbx+0x0],dh
 1001d3c:	jae    0x1001d3e
 1001d3e:	outs   dx,DWORD PTR ds:[rsi]
 1001d3f:	add    BYTE PTR [rdx+0x0],dh
 1001d42:	add    BYTE PTR [rax],al
 1001d44:	add    BYTE PTR [rax],al
 1001d46:	add    BYTE PTR [rax],al
 1001d48:	and    eax,DWORD PTR [rax]
 1001d4a:	and    BYTE PTR [rax],al
 1001d4c:	push   rdx
 1001d4d:	add    BYTE PTR [rbp+0x0],dh
 1001d50:	outs   dx,BYTE PTR ds:[rsi]
 1001d51:	add    BYTE PTR [rsi+0x0],ch
 1001d54:	imul   eax,DWORD PTR [rax],0x67006e
 1001d5a:	and    BYTE PTR [rax],al
 1001d5c:	outs   dx,DWORD PTR ds:[rsi]
 1001d5d:	add    BYTE PTR [rsi+0x0],ch
 1001d60:	and    BYTE PTR [rax],al
 1001d62:	and    eax,0x20006400
 1001d67:	add    BYTE PTR [rip+0x20007300],ah        # 0x2100906d
 1001d6d:	add    BYTE PTR [rip+0x20007300],ah        # 0x21009073
 1001d73:	add    BYTE PTR [rip+0xd007300],ah        # 0xe009079
 1001d79:	add    BYTE PTR [rdx],cl
 1001d7b:	add    BYTE PTR [rax],al
 1001d7d:	add    BYTE PTR [rax],al
 1001d7f:	add    BYTE PTR [rbx],ah
 1001d81:	add    BYTE PTR [rax],ah
 1001d83:	add    BYTE PTR [rbp+0x0],cl
 1001d86:	add    BYTE PTR gs:[rbp+0x0],ch
 1001d8a:	outs   dx,DWORD PTR ds:[rsi]
 1001d8b:	add    BYTE PTR [rdx+0x0],dh
 1001d8e:	jns    0x1001d90
 1001d90:	cmp    al,BYTE PTR [rax]
 1001d92:	and    BYTE PTR [rax],al
 1001d94:	and    eax,0x25006400
 1001d99:	add    BYTE PTR [rip+0x69002000],ah        # 0x6a003d9f
 1001d9f:	add    BYTE PTR [rsi+0x0],ch
 1001da2:	and    BYTE PTR [rax],al
 1001da4:	jne    0x1001da6
 1001da6:	jae    0x1001da8
 1001da8:	add    BYTE PTR gs:[rsi],ch
 1001dab:	add    BYTE PTR [rax],ah
 1001dad:	add    BYTE PTR [rax+0x0],dl
 1001db0:	push   0x73007900
 1001db5:	add    BYTE PTR [rcx+0x0],ch
 1001db8:	movsxd eax,DWORD PTR [rax]
 1001dba:	(bad)  
 1001dbb:	add    BYTE PTR [rax+rax*1+0x3a],ch
 1001dbf:	add    BYTE PTR [rax],ah
 1001dc1:	add    BYTE PTR [rip+0x64006c00],ah        # 0x650089c7
 1001dc7:	add    BYTE PTR [rbp+0x0],cl
 1001dca:	(bad)  
 1001dcb:	add    BYTE PTR [rip+0x64006c00],ah        # 0x650089d1
 1001dd1:	add    BYTE PTR [rbp+0x0],cl
 1001dd4:	and    BYTE PTR [rax],al
 1001dd6:	and    BYTE PTR [rax],al
 1001dd8:	push   rax
 1001dd9:	add    BYTE PTR [rcx+0x0],ah
 1001ddc:	add    BYTE PTR [ecx+0x0],ch
 1001de0:	outs   dx,BYTE PTR ds:[rsi]
 1001de1:	add    BYTE PTR [rdi+0x0],ah
 1001de4:	cmp    al,BYTE PTR [rax]
 1001de6:	and    BYTE PTR [rax],al
 1001de8:	and    eax,0x4d006400
 1001ded:	add    BYTE PTR [rdi],ch
 1001def:	add    BYTE PTR [rip+0x4d006400],ah        # 0x4e0081f5
 1001df5:	add    BYTE PTR [rax],ah
 1001df7:	add    BYTE PTR [rax],ch
 1001df9:	add    BYTE PTR [rcx+0x0],ah
 1001dfc:	jbe    0x1001dfe
 1001dfe:	(bad)  
 1001dff:	add    BYTE PTR [rcx+0x0],ch
 1001e02:	ins    BYTE PTR es:[rdi],dx
 1001e03:	add    BYTE PTR [rdi],ch
 1001e05:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1001e09:	add    BYTE PTR [rax+rax*1+0x61],dh
 1001e0d:	add    BYTE PTR [rax+rax*1+0x29],ch
 1001e11:	add    BYTE PTR [rip+0xa00],cl        # 0x1002817
	...
 1001e1f:	add    BYTE PTR [rbx],ah
 1001e21:	add    BYTE PTR [rax],ah
 1001e23:	add    BYTE PTR [rax+rax*1+0x6f],cl
 1001e27:	add    BYTE PTR [rcx+0x0],ah
 1001e2a:	add    BYTE PTR fs:[rbp+0x0],ah
 1001e2e:	add    BYTE PTR fs:[rax],ah
 1001e31:	add    BYTE PTR [rbp+0x0],cl
 1001e34:	outs   dx,DWORD PTR ds:[rsi]
 1001e35:	add    BYTE PTR [rax+rax*1+0x75],ah
 1001e39:	add    BYTE PTR [rax+rax*1+0x65],ch
 1001e3d:	add    BYTE PTR [rdx],bh
 1001e3f:	add    BYTE PTR [rax],ah
 1001e41:	add    BYTE PTR [rip+0x20007300],ah        # 0x21009147
 1001e47:	add    BYTE PTR [rax],ch
 1001e49:	add    BYTE PTR [rip+0x64006c00],ah        # 0x65008a4f
 1001e4f:	add    BYTE PTR [rsi],ch
 1001e51:	add    BYTE PTR [rip+0x64006c00],ah        # 0x65008a57
 1001e57:	add    BYTE PTR [rsi],ch
 1001e59:	add    BYTE PTR [rip+0x64006c00],ah        # 0x65008a5f
 1001e5f:	add    BYTE PTR [rsi],ch
 1001e61:	add    BYTE PTR [rip+0x64006c00],ah        # 0x65008a67
 1001e67:	add    BYTE PTR [rcx],ch
 1001e69:	add    BYTE PTR [rip+0xa00],cl        # 0x100286f
 1001e6f:	add    BYTE PTR [rbx],ah
 1001e71:	add    BYTE PTR [rax],ah
 1001e73:	add    BYTE PTR [rax+rax*1+0x6f],cl
 1001e77:	add    BYTE PTR [rcx+0x0],ah
 1001e7a:	add    BYTE PTR fs:[rbp+0x0],ah
 1001e7e:	add    BYTE PTR fs:[rax],ah
 1001e81:	add    BYTE PTR [rbp+0x0],cl
 1001e84:	outs   dx,DWORD PTR ds:[rsi]
 1001e85:	add    BYTE PTR [rax+rax*1+0x75],ah
 1001e89:	add    BYTE PTR [rax+rax*1+0x65],ch
 1001e8d:	add    BYTE PTR [rdx],bh
 1001e8f:	add    BYTE PTR [rax],ah
 1001e91:	add    BYTE PTR [rip+0x20007300],ah        # 0x21009197
 1001e97:	add    BYTE PTR [rax],ch
 1001e99:	add    BYTE PTR [rbp+0x0],dh
 1001e9c:	outs   dx,BYTE PTR ds:[rsi]
 1001e9d:	add    BYTE PTR [rbx+0x0],ch
 1001ea0:	outs   dx,BYTE PTR ds:[rsi]
 1001ea1:	add    BYTE PTR [rdi+0x0],ch
 1001ea4:	ja     0x1001ea6
 1001ea6:	outs   dx,BYTE PTR ds:[rsi]
 1001ea7:	add    BYTE PTR [rax],ah
 1001ea9:	add    BYTE PTR [rsi+0x0],dh
 1001eac:	add    BYTE PTR gs:[rdx+0x0],dh
 1001eb0:	jae    0x1001eb2
 1001eb2:	imul   eax,DWORD PTR [rax],0x6e006f
 1001eb8:	sub    DWORD PTR [rax],eax
 1001eba:	or     eax,0xa00
 1001ebf:	add    BYTE PTR [rdi+0x56],ah
 1001ec2:	xor    ch,BYTE PTR [rsi+0x49fb5ec7]
 1001ec8:	lods   al,BYTE PTR ds:[rsi]
 1001ec9:	cmp    esp,esi
 1001ecb:	in     eax,dx
 1001ecc:	test   DWORD PTR [rcx-0x18ca9b50],ebp
 1001ed2:	rcr    esi,cl
 1001ed4:	out    0x56,al
 1001ed6:	jp     0x1001f18
 1001ed8:	fwait
 1001ed9:	mov    ebp,0x4455015b
 1001ede:	sbb    bh,BYTE PTR [rdi-0x4f]
 1001ee1:	(bad)  
 1001ee2:	rex.RX xchg ecx,eax
 1001ee4:	mov    ecx,0xb44734c5
 1001ee9:	mov    edx,0xb3d0457d
 1001eee:	(bad)  
 1001eef:	ror    DWORD PTR [rip+0xffffffffdd8ca21a],1        # 0xffffffffde8cc10f
 1001ef5:	jnp    0x1001ea4
 1001ef7:	rex.WRB movs BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1001ef9:	xor    DWORD PTR [rcx],eax
 1001efb:	(bad)  
 1001efc:	add    ebx,DWORD PTR [rdx]
 1001efe:	xchg   esp,eax
 1001eff:	push   rbp
 1001f00:	xchg   edx,eax
 1001f01:	sbb    ch,bh
 1001f03:	add    BYTE PTR [rdi-0x7fba581d],0x94
 1001f0a:	xchg   edi,eax
 1001f0b:	clc    
 1001f0c:	xor    DWORD PTR [rax],ecx
 1001f0e:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1001f10:	sbb    eax,0x4deabbde
 1001f15:	xlat   BYTE PTR ds:[rbx]
 1001f16:	jmp    0xffffffffa874ca5c
 1001f1b:	and    ah,bh
 1001f1d:	in     al,dx
 1001f1e:	ss int3 
 1001f20:	test   BYTE PTR [rdi-0x7d],ah
 1001f23:	add    eax,0x4aa59b51
 1001f28:	pushf  
 1001f29:	pop    rdi
 1001f2a:	jmp    0x712ad5ef
 1001f2f:	add    DWORD PTR [rbx-0x66f4b50f],ecx
 1001f35:	test   BYTE PTR ss:[rdx-0x65],al
 1001f39:	test   edx,0x783dbe9d
 1001f3f:	mov    edi,0x888c05e0
 1001f44:	cs retf 
 1001f46:	test   BYTE PTR [rcx-0x47],cl
 1001f49:	movsxd esp,DWORD PTR [rdx+rsi*4+0x14b05045]
 1001f50:	jbe    0x1001f2a
 1001f52:	imul   esp,DWORD PTR [rax+0x42b00ff5],0xffffff83
 1001f59:	lahf   
 1001f5a:	cmp    ecx,DWORD PTR ss:[rdx]
 1001f5d:	loope  0x1001f52
 1001f5f:	rex.RX xor al,0xdb
 1001f62:	rex.WRXB
 1001f63:	fwait
 1001f64:	mov    BYTE PTR [rdx],dh
 1001f66:	cmp    BYTE PTR [rsi-0x4d],cl
 1001f69:	or     eax,0x69a787d
 1001f6e:	shl    BYTE PTR [rax],0x6f
 1001f71:	mov    esp,0x4871de6f
 1001f76:	in     eax,dx
 1001f77:	rex.WR mov ?,WORD PTR [rdi+rdx*8+0x42dc96dd]
 1001f7f:	dec    DWORD PTR [rcx]
 1001f81:	adc    DWORD PTR [rbx-0x4c093d55],esi
 1001f87:	rex.WRB mov r15b,0x57
 1001f8a:	rex.WR
 1001f8b:	rex.X imul ebp,DWORD PTR [rdx-0x14],0xffffffd1
 1001f90:	rex.WB cmp al,0x37
 1001f93:	rex.WR cmp al,0x7e
 1001f96:	rex.WB
 1001f97:	rex.RB mov r9d,0xe7a12067
 1001f9d:	cwde   
 1001f9e:	pop    rdi
 1001f9f:	add    DWORD PTR [rbp+0x3203e24],edi
 1001fa5:	push   rdx
 1001fa6:	jbe    0x1001ff4
 1001fa8:	scas   eax,DWORD PTR es:[rdi]
 1001fa9:	(bad)  
 1001faa:	jl     0x1001f31
 1001fac:	rex.RB jmp 0x1001f50
 1001faf:	movabs al,ds:0x42f1feadc93bc9f0
 1001fb8:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1001fb9:	pop    rdi
 1001fba:	mov    bl,0xb8
 1001fbc:	xchg   BYTE PTR [rcx],ah
 1001fbe:	cmp    bl,cl
 1001fc0:	fucomi st,st(1)
 1001fc2:	shl    DWORD PTR [rbp+0x43162dd4],cl
 1001fc8:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1001fc9:	pop    rsp
 1001fca:	sub    ah,BYTE PTR [rdx-0x56b5e31f]
 1001fd0:	rex.WRB shl BYTE PTR [r9],0xfe
 1001fd4:	test   DWORD PTR [rbx-0x77],edi
 1001fd7:	rex.WRX xchg BYTE PTR [rax-0x8],r12b
 1001fdb:	js     0x1001f86
 1001fdd:	add    ebx,DWORD PTR [rbx]
 1001fdf:	(bad)  
 1001fe0:	pop    rsi
 1001fe1:	outs   dx,BYTE PTR ds:[rsi]
 1001fe2:	and    DWORD PTR [rax+0x4b2850cf],0xffffff95
 1001fe9:	ja     0x1001fcd
 1001feb:	push   rcx
 1001fec:	jae    0x1002060
 1001fee:	pop    rdi
 1001fef:	or     edi,DWORD PTR [rbx]
 1001ff1:	clc    
 1001ff2:	fs sub al,0x7f
 1001ff5:	mov    es,esi
 1001ff7:	rex.WX xchg rcx,rax
 1001ff9:	cmp    BYTE PTR [rbp-0x41],dh
 1001ffc:	xor    BYTE PTR ss:[rdx],al
 1001fff:	out    dx,al
 1002000:	(bad)  
 1002001:	lahf   
 1002002:	lods   eax,DWORD PTR ds:[rsi]
 1002003:	rex.RB fld DWORD PTR [r11+0x228147e0]
 100200a:	scas   eax,DWORD PTR es:[rdi]
 100200b:	lahf   
 100200c:	xchg   ecx,eax
 100200d:	cs rex.WR iretq 
 1002010:	(bad)  
 1002011:	rex.B (bad) 
 1002013:	add    r15d,DWORD PTR [rcx]
 1002016:	rex.R
 1002017:	rex.B (bad) 
 1002019:	pop    rdi
 100201a:	div    dl
 100201c:	xor    al,0xff
 100201e:	xchg   esi,eax
 100201f:	popf   
 1002020:	mov    al,0x46
 1002022:	adc    BYTE PTR [rdi+0x63],ah
 1002025:	stos   BYTE PTR es:[rdi],al
 1002026:	lahf   
 1002027:	rex.WR xchg rax,rax
 1002029:	in     al,0xc0
 100202b:	outs   dx,BYTE PTR ds:[rsi]
 100202c:	or     esi,DWORD PTR [rcx+0xc]
 100202f:	jrcxz  0x1001fd5
 1002031:	jo     0x1001ff1
 1002033:	mov    dh,BYTE PTR [rdi-0x49b1bd99]
 1002039:	(bad)  
 100203a:	test   eax,0x83fe6fa0
 100203f:	cmp    ebx,eax
 1002041:	and    esp,DWORD PTR [riz*2+0x4d2f95b6]
 1002048:	movabs al,ds:0xb7e622a596737c96
 1002051:	hlt    
 1002052:	rex.XB push r15
 1002054:	retf   
 1002055:	mov    esp,0xf3b24699
 100205a:	int3   
 100205b:	push   rdx
 100205c:	xchg   esi,eax
 100205d:	pop    rcx
 100205e:	rex.W cld 
 1002060:	fimul  DWORD PTR [rax-0xdcf7da6]
 1002066:	jp     0x10020ad
 1002068:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1002069:	rex.WRXB leave 
 100206b:	xchg   ebp,eax
 100206c:	test   al,0xb0
 100206e:	not    DWORD PTR [rcx-0x18]
 1002071:	rex.WRXB push r10
 1002073:	loop   0x10020ab
 1002075:	movabs eax,ds:0xea9ca314bda24457
 100207e:	outs   dx,BYTE PTR ds:[rsi]
 100207f:	cli    
 1002080:	cmc    
 1002081:	(bad)  
 1002082:	xchg   ecx,eax
 1002083:	sub    eax,0x452f349e
 1002088:	and    ah,0xe7
 100208b:	jns    0x10020cc
 100208d:	or     al,cl
 100208f:	rex.XB
 1002090:	rex movsxd esi,DWORD PTR [rsi-0x5155ba39]
 1002097:	rex xchg eax,eax
 1002099:	loop   0x100205c
 100209b:	mov    ch,ch
 100209d:	jle    0x100204e
 100209f:	(bad)  
 10020a1:	loope  0x100208c
 10020a3:	rex.WX in al,dx
 10020a5:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 10020a6:	test   BYTE PTR [rbp+riz*4-0x6],cl
 10020aa:	(bad)  
 10020ab:	jp     0x1002057
 10020ad:	in     al,0x9a
 10020af:	cwde   
 10020b0:	rcl    BYTE PTR [rdx],1
 10020b2:	shufps xmm6,XMMWORD PTR [rbp+riz*1-0x73],0x40
 10020b8:	xchg   esp,eax
 10020b9:	push   rdx
 10020ba:	(bad)  
 10020bb:	jb     0x1002081
 10020bd:	(bad)  
 10020be:	push   0xffffffffffffffde
 10020c0:	(bad)  
 10020c1:	out    dx,eax
 10020c2:	rex.WRB (bad) 
 10020c4:	pop    rsp
 10020c5:	add    ch,BYTE PTR [rsi+rcx*2-0x73]
 10020c9:	std    
 10020ca:	(bad)  
 10020cb:	rex.W mov bl,0xf8
 10020ce:	(bad)  
 10020cf:	mov    esp,0xa4123393
 10020d4:	xor    eax,0x934540ea
 10020d9:	scas   al,BYTE PTR es:[rdi]
 10020da:	rex.W (bad) 
 10020dc:	rex.WRXB xchg BYTE PTR [r14-0x5],r11b
 10020e0:	pop    rdx
 10020e1:	ficom  DWORD PTR [rdx-0x4c]
 10020e4:	loop   0x100213a
 10020e6:	movsxd ecx,DWORD PTR [rdi-0x73]
 10020e9:	(bad)  
 10020ea:	sbb    ebx,DWORD PTR [rcx]
 10020ec:	(bad)  
 10020ed:	rex.R xchg eax,eax
 10020ef:	rex.WRB clc 
 10020f1:	(bad)  
 10020f2:	sbb    DWORD PTR [rsi*2-0x65bd65f0],ebx
 10020f9:	fst    DWORD PTR [rdi-0x4e]
 10020fc:	ret    
 10020fd:	neg    DWORD PTR [rax]
 10020ff:	test   BYTE PTR [rdi],ah
 1002101:	(bad)  
 1002102:	lock rex.WR je 0x1002131
 1002106:	ret    0xb647
 1002109:	gs pop rsi
 100210b:	or     ch,BYTE PTR [rbx]
 100210d:	and    eax,0x449f09e4
 1002112:	in     eax,0x92
 1002114:	adc    eax,0xaa493b03
 1002119:	push   rdx
 100211a:	(bad)  
 100211b:	scas   eax,DWORD PTR es:[rdi]
 100211c:	ror    edx,1
 100211e:	test   al,0x86
 1002120:	mov    bl,0x18
 1002122:	ret    
 1002123:	test   WORD PTR [rbx+rdi*8+0x48],sp
 1002128:	mov    cl,0xaf
 100212a:	add    BYTE PTR [rbx+rcx*8+0x3e],dh
 100212e:	out    dx,al
 100212f:	fistp  DWORD PTR [rsi+0x1a6ec6d]
 1002135:	test   al,0x84
 1002137:	rex xor DWORD PTR [rdi-0x4a],0xa4cbe5e
 100213f:	pop    rdi
 1002140:	(bad)  
 1002141:	mov    esi,0x5f325d77
 1002146:	mov    ecx,0x1d83854b
 100214b:	fnclex 
 100214d:	xor    BYTE PTR [rdx],cl
 100214f:	add    eax,0xf015652a
 1002154:	mov    ebx,0x8b41b25d
 1002159:	mov    dh,0xaa
 100215b:	sahf   
 100215c:	mov    WORD PTR [rax-0x43f66e79],?
 1002162:	lea    ecx,[rcx+0x4587e7c9]
 1002168:	xchg   esi,eax
 1002169:	sub    DWORD PTR [rdx+0x6d],ecx
 100216c:	movsxd ebp,DWORD PTR [rdi]
 100216e:	cmp    eax,0x1d51c3f4
 1002173:	adc    dl,BYTE PTR [rdx+rdx*4+0x31]
 1002177:	rex.RXB cwde 
 1002179:	rex.X out dx,al
 100217b:	adc    eax,0xf6185f87
 1002180:	rex.WRXB jmp 0xffffffff94e8b83a
 1002186:	ins    BYTE PTR es:[rdi],dx
 1002187:	rex.XB xchg r11d,eax
 1002189:	xchg   edi,eax
 100218a:	(bad)  
 100218b:	jne    0x100211f
 100218d:	movabs ds:0x8c2e124414cdf638,al
 1002196:	xor    BYTE PTR [rcx-0x70],al
 1002199:	(bad)  
 100219a:	fisubr WORD PTR [rdi+0x2]
 100219d:	addr32 out dx,eax
 100219f:	push   0xffffffffa92f23fc
 10021a4:	pop    rdx
 10021a5:	mov    esp,0xbfaa4d68
 10021aa:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 10021ab:	push   rbx
 10021ac:	repz adc DWORD PTR [rdx+0x4b],ecx
 10021b0:	fld    DWORD PTR [rax+rax*1+0x17c38b20]
 10021b7:	rex.WRB movabs r13,0x195deda5f662479
 10021c1:	imul   ecx,ecx,0xffffff87
 10021c4:	jbe    0x1002197
 10021c6:	gs rex.X popf 
 10021c9:	(bad)  
 10021ca:	movabs ds:0xe3a50c9c03d808d2,eax
 10021d3:	add    al,0xf4
 10021d5:	jb     0x10021ae
 10021d7:	rex.WXB mov rcx,QWORD PTR [r15+0x32143da9]
 10021de:	xchg   esi,eax
 10021df:	and    al,0x25
 10021e1:	(bad)  
 10021e2:	(bad)  
 10021e3:	or     al,0x6b
 10021e5:	pop    rcx
 10021e6:	test   BYTE PTR [rbp-0x52],0xe3
 10021ea:	adc    eax,0xa9b8baba
 10021ef:	pop    rsp
 10021f0:	lea    eax,[rdi-0x7ff301ba]
 10021f6:	jno    0x1002238
 10021f8:	cdq    
 10021f9:	imul   edx,ecx,0xffffffd7
 10021fc:	(bad)  
 10021fd:	lods   eax,DWORD PTR ds:[rsi]
 10021fe:	cmp    eax,0x966192be
 1002203:	rex.RB js 0x10021aa
 1002206:	mov    eax,0x6a9eaa40
 100220b:	xchg   esp,eax
 100220c:	(bad)  
 100220d:	ja     0x1002221
 100220f:	and    ecx,DWORD PTR [rip+0xffffffffb06223c9]        # 0xffffffffb16245de
 1002215:	call   0x45bd623d
 100221a:	(bad)  
 100221b:	cmp    ebx,esp
 100221d:	mov    ch,0xdb
 100221f:	push   rsi
 1002220:	(bad)  
 1002221:	out    0x40,eax
 1002223:	movabs ds:0x398e2dab430eb8c0,eax
 100222c:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 100222d:	(bad)  
 100222e:	shl    DWORD PTR [rbx],cl
 1002230:	rex.B jg 0x10021bc
 1002233:	xchg   ebx,edx
 1002235:	cmp    ecx,DWORD PTR [rbx]
 1002237:	rex.WRXB mov r11b,0x23
 100223a:	push   rsp
 100223b:	lods   eax,DWORD PTR ds:[rsi]
 100223c:	and    bl,bl
 100223e:	mov    ebx,edi
 1002240:	(bad)  
 1002241:	(bad)  
 1002242:	add    eax,0xbb1f3449
 1002247:	rex.R and BYTE PTR [rbx+0x15],0x2f
 100224c:	out    dx,eax
 100224d:	out    dx,al
 100224e:	rex.WRB add BYTE PTR [r8-0x63],r13b
 1002252:	sbb    ebp,DWORD PTR [rdx+rbp*2]
 1002255:	in     al,dx
 1002256:	mov    WORD PTR [rbx-0x4b],es
 1002259:	(bad)  
 100225a:	jrcxz  0x100226e
 100225c:	jge    0x1002240
 100225e:	mov    edx,0x244d48ae
 1002263:	and    al,0x64
 1002265:	(bad)  
 1002266:	jns    0x10022b7
 1002268:	mov    ?,WORD PTR [rbx]
 100226a:	rex.WR (bad) 
 100226c:	jnp    0x10021fb
 100226e:	rex.WRX sub rax,0x4a5411b3
 1002274:	(bad)  
 1002275:	(bad)  
 1002276:	iret   
 1002277:	rex.XB test eax,0x963400c4
 100227d:	imul   ebp,DWORD PTR [rdx-0xe9ff8b9],0x1a76fd4
 1002287:	rex.RXB mov r13b,r14b
 100228a:	mov    ah,0x56
 100228c:	ret    
 100228d:	rex.RX cmp r9d,DWORD PTR [rdi]
 1002290:	mov    dl,0x52
 1002292:	sub    edx,DWORD PTR [rsi+rbp*1-0x7bb99a13]
 1002299:	test   al,0xfe
 100229b:	outs   dx,DWORD PTR ds:[rsi]
 100229c:	(bad)  
 100229d:	xchg   ebp,eax
 100229e:	sti    
 100229f:	sti    
 10022a0:	js     0x1002258
 10022a2:	mov    edi,0xc7720c8
 10022a7:	rex.XB movabs al,ds:0xc9fa183b632c9d23
 10022b1:	movabs eax,ds:0xfc9e45d1c2b4dedc
 10022ba:	(bad)  
 10022bb:	iret   
 10022bc:	xchg   ecx,eax
 10022bd:	(bad)  
 10022be:	mov    WORD PTR [rbp-0x32],es
 10022c1:	jbe    0x100233b
 10022c3:	cmc    
 10022c4:	(bad)  
 10022c5:	ja     0x100226e
 10022c7:	mov    r14,rsi
 10022ca:	push   rax
 10022cb:	(bad)  
 10022cc:	movabs eax,ds:0x6aaa82becd135d5
 10022d5:	push   rbp
 10022d6:	or     eax,0x3e7d8f45
 10022db:	pop    rsi
 10022dc:	rex.WB pop r10
 10022de:	neg    BYTE PTR [rbp+0x3c7fcbe0]
 10022e4:	xchg   DWORD PTR [rdx+0x32b64b97],eax
 10022ea:	jl     0x100234c
 10022ec:	(bad)  
 10022ed:	cmp    eax,0xdae0f4aa
 10022f2:	rex.R xchg edi,eax
 10022f4:	jp     0x10022ee
 10022f6:	cld    
 10022f7:	rex.RB mov r12b,0x44
 10022fa:	mov    esi,esp
 10022fc:	pop    rsp
 10022fd:	je     0x10022ba
 10022ff:	not    BYTE PTR [rcx-0x1e]
 1002302:	push   rbx
 1002303:	rex.RX outs dx,BYTE PTR ds:[rsi]
 1002305:	(bad)  
 1002307:	rex.RX (bad) 
 1002309:	mov    ah,0xa2
 100230b:	rex.WXB mov r14b,0xc6
 100230e:	shl    BYTE PTR [rcx+0x4f],1
 1002311:	xor    esi,DWORD PTR [rcx+0x249d6fe5]
 1002317:	mov    r15d,0x7bf56517
 100231d:	ret    0xb4c4
 1002320:	jae    0x10022b5
 1002322:	rex.WR
 1002323:	rex.XB std 
 1002325:	adc    al,BYTE PTR [rsi+rax*2-0x7171360]
 100232c:	hlt    
 100232d:	and    dl,ah
 100232f:	test   esp,ebp
 1002331:	sbb    DWORD PTR [rax-0x55],ebp
 1002334:	sub    al,BYTE PTR [rcx-0x18]
 1002337:	mov    cl,0x74
 100233a:	or     ah,BYTE PTR [rbp+rbx*1-0x11900ae6]
 1002341:	rex.WXB mov r11b,0xd8
 1002344:	sbb    ebx,DWORD PTR [rdi+0x65]
 1002347:	rex xchg eax,eax
 1002349:	or     DWORD PTR [rdx-0x4c],ebp
 100234c:	test   eax,0xf47692b4
 1002351:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1002352:	(bad)  
 1002353:	cmp    al,0xc5
 1002355:	cmp    al,0xee
 1002357:	rex.RXB cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1002359:	add    esi,DWORD PTR [rax-0x3e]
 100235c:	jbe    0x1002347
 100235e:	rex.WX (bad) 
 1002360:	in     al,dx
 1002361:	(bad)  
 1002362:	xchg   esp,eax
 1002363:	mov    esp,0x46652cea
 1002368:	movabs ds:0x7d9f950c0a203891,al
 1002371:	repz loop 0x10023bf
 1002374:	xchg   esi,eax
 1002375:	(bad)  
 1002376:	xor    eax,DWORD PTR [rsi-0x68]
 1002379:	(bad)  
 100237a:	pop    rdi
 100237b:	fwait
 100237c:	or     eax,0x1c6bd6e0
 1002381:	xchg   ebx,eax
 1002382:	pop    rdi
 1002383:	mov    ah,0xcd
 1002385:	cmc    
 1002386:	mov    ah,0x4f
 1002388:	mov    bl,0x49
 100238a:	mov    BYTE PTR [rbp+0x5c],cl
 100238d:	in     al,dx
 100238e:	xor    al,0x4b
 1002390:	fiadd  WORD PTR [rdi-0x59d41b29]
 1002396:	or     DWORD PTR [rcx-0x59],eax
 1002399:	pop    rbx
 100239a:	push   rdi
 100239b:	sbb    dl,BYTE PTR [rsi+0x3b]
 100239e:	in     al,0xb9
 10023a0:	push   rdx
 10023a1:	jge    0x1002336
 10023a3:	jp     0x1002399
 10023a5:	mov    bh,0x7d
 10023a7:	rex.WR xchg rdi,rax
 10023a9:	fcom   QWORD PTR [rsi]
 10023ab:	jmp    FWORD PTR [rcx-0x3f3222d7]
 10023b1:	(bad)  
 10023b2:	jb     0x1002391
 10023b4:	sbb    ebp,0xd29e4b2a
 10023ba:	mov    DWORD PTR [rsi+rbx*4-0xde5e3aa],0x1d070750
 10023c5:	movsxd edi,DWORD PTR [rsi]
 10023c7:	rex.WRX (bad) 
 10023c9:	in     eax,0xbe
 10023cb:	imul   ebx,DWORD PTR [rdi+rbx*8],0x26
 10023cf:	xor    ah,BYTE PTR [rcx]
 10023d1:	shl    dh,cl
 10023d3:	mov    dh,0x27
 10023d5:	cld    
 10023d6:	jno    0x1002427
 10023d8:	mov    ch,0xa0
 10023da:	pop    rcx
 10023db:	jne    0x1002360
 10023dd:	cwde   
 10023de:	ins    BYTE PTR es:[rdi],dx
 10023df:	sub    BYTE PTR [rbx+0x74],ch
 10023e2:	mov    esp,0x3a6b251d
 10023e7:	xchg   r14,rax
 10023e9:	(bad)  
 10023ea:	and    DWORD PTR [rdi-0x38b801eb],edx
 10023f0:	cmp    esi,DWORD PTR [rax+0x1791cf04]
 10023f6:	jb     0x1002447
 10023f8:	xchg   BYTE PTR [rcx],al
 10023fa:	xor    BYTE PTR [rax],bh
 10023fc:	xchg   edi,eax
 10023fd:	movabs ds:0xbbcfd5ddb62c2e76,al
 1002406:	lahf   
 1002407:	rex.RXB mov r10d,0xa98243c2
 100240d:	push   rax
 100240e:	mov    bl,0x56
 1002410:	pop    rsi
 1002411:	add    BYTE PTR [rdi+rcx*1+0x4d1e5abd],ch
 1002418:	fwait
 1002419:	and    DWORD PTR [rax],ebx
 100241b:	repz fisub WORD PTR [rdx+0x2b]
 100241f:	and    al,0x41
 1002421:	test   al,0x5f
 1002423:	in     al,0xf5
 1002425:	jno    0x100243e
 1002427:	rex.XB mov r11b,0xf
 100242a:	mov    eax,0xf7bb1d9e
 100242f:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1002430:	xor    ch,ch
 1002432:	jl     0x10023df
 1002434:	sub    DWORD PTR [rax+0x6f],edx
 1002437:	rex.WX cmp rbx,0x7d
 100243b:	sbb    al,0xe9
 100243d:	(bad)  
 100243e:	movsxd esi,DWORD PTR [rdi-0x74]
 1002441:	xor    al,0x13
 1002443:	repnz (bad) 
 1002445:	mov    ebx,0x12b14243
 100244a:	stos   BYTE PTR es:[rdi],al
 100244b:	(bad)  
 100244c:	mov    es,WORD PTR [rdx]
 100244e:	imul   bh
 1002450:	jmp    0xffffffff972930dd
 1002455:	sbb    ch,BYTE PTR [rdx]
 1002457:	rex.WX pop QWORD PTR [rcx+0x45]
 100245b:	rex.WXB
 100245c:	rex.W lods al,BYTE PTR ds:[rsi]
 100245e:	nop
 100245f:	scas   al,BYTE PTR es:[rdi]
 1002460:	and    BYTE PTR [rax+rdi*2],bl
 1002463:	clc    
 1002464:	xchg   ecx,eax
 1002465:	out    dx,eax
 1002466:	(bad)  
 1002467:	xchg   rdx,rax
 1002469:	lods   al,BYTE PTR ds:[rsi]
 100246a:	movabs ds:0xce8f043c3fe19df0,al
 1002473:	lods   eax,DWORD PTR ds:[rsi]
 1002474:	lods   eax,DWORD PTR ds:[rsi]
 1002475:	and    edi,ebp
 1002477:	rex.WR mov bpl,0x47
 100247a:	movabs al,ds:0x2b5304275b92d0c2
 1002483:	(bad)  
 1002484:	push   0xffffffffa34a01fd
 1002489:	(bad)  
 100248a:	(bad)  
 100248b:	ss rex.XB stc 
 100248e:	es iret 
 1002490:	vminsd xmm3,xmm8,QWORD PTR [rcx+0x1b]
 1002495:	or     BYTE PTR [rdi-0xec95bb8],ch
 100249b:	push   0xffffffffd6cd4257
 10024a0:	add    al,BYTE PTR [rax-0x8]
 10024a3:	ja     0x100251d
 10024a5:	enter  0x4b38,0x84
 10024a9:	sub    eax,0x9f5ae2b1
 10024ae:	mov    esp,0x43fc2dc8
 10024b3:	adc    al,0x41
 10024b5:	(bad)  
 10024b6:	(bad)  
 10024b7:	mov    r10,QWORD PTR [r8]
 10024ba:	jno    0x10024fd
 10024bc:	(bad)  
 10024be:	loop   0x100248f
 10024c0:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 10024c1:	(bad)  
 10024c2:	popf   
 10024c3:	push   0x489b08da
 10024c8:	mov    bl,0xe2
 10024ca:	sub    al,0x37
 10024cc:	(bad)  
 10024cd:	fs mov al,0x5f
 10024d0:	(bad)  
 10024d1:	repz cdq 
 10024d3:	movabs eax,ds:0x6eb8f08748e40141
 10024dc:	ins    DWORD PTR es:[rdi],dx
 10024dd:	loope  0x1002495
 10024df:	push   0xffffffffffffffe8
 10024e1:	retf   0xadc8
 10024e4:	xchg   ebp,eax
 10024e5:	sbb    al,0x65
 10024e7:	mov    al,0x49
 10024ea:	add    al,0x59
 10024ec:	adc    ebx,DWORD PTR [rbp+0x144eb421]
 10024f2:	int    0x5c
 10024f4:	lods   eax,DWORD PTR ds:[rsi]
 10024f5:	push   rcx
 10024f6:	(bad)  
 10024f7:	rex.B test eax,0x50aee9d4
 10024fd:	(bad)  
 10024fe:	push   rax
 10024ff:	hlt    
 1002500:	in     eax,dx
 1002501:	add    dl,BYTE PTR [rbp-0x4fa56654]
 1002507:	rex.WR movs BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1002509:	addr32 mov dl,0xab
 100250c:	pop    rdx
 100250d:	adc    eax,0x5b3e707e
 1002512:	jb     0x10024de
 1002514:	push   rcx
 1002515:	add    dl,ch
 1002517:	rex.WXB movabs r15,0x73b47f74f9ecaba3
 1002521:	idiv   BYTE PTR [rbx]
 1002523:	(bad)  
 1002524:	fst    QWORD PTR [rbp-0x6852b71a]
 100252a:	rex.RB
 100252b:	rex.WRX movs BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 100252d:	jnp    0x10024dc
 100252f:	cs push 0x5e663ba9
 1002535:	xor    al,0x39
 1002537:	rex.RB popf 
 1002539:	(bad)  
 100253a:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 100253b:	(bad)  
 100253c:	cmp    BYTE PTR [rdx+0xe],ah
 100253f:	rol    BYTE PTR [rax+rbx*1+0x1a6dcb1a],1
 1002546:	retf   
 1002547:	rex.RXB (bad) 
 1002549:	(bad)  
 100254a:	push   rax
 100254b:	fwait
 100254c:	sbb    al,0x7b
 100254e:	scas   eax,DWORD PTR es:[rdi]
 100254f:	pop    rdx
 1002550:	test   dh,dh
 1002552:	rex.R cdq 
 1002554:	(bad)  
 1002555:	rex.WB push r12
 1002557:	rex.XB stos DWORD PTR es:[rdi],eax
 1002559:	jg     0x1002549
 100255b:	rex.X sub spl,BYTE PTR [rbp+0xe]
 100255f:	(bad)  
 1002560:	xchg   esp,eax
 1002561:	xor    eax,DWORD PTR [rsi-0x2f87922a]
 1002567:	rex.WRX movabs ds:0xd8b5a5cd9546a7fd,rax
 1002571:	test   al,0xa4
 1002573:	(bad)  
 1002574:	cmp    esi,DWORD PTR fs:[rax+0x6a77ba4e]
 100257b:	out    0x79,al
 100257d:	cwde   
 100257e:	push   rdx
 100257f:	pop    rcx
 1002580:	sub    al,0x72
 1002582:	or     eax,0x7a2e0073
 1002587:	rex.WR xchg BYTE PTR [rcx+0xd],r8b
 100258b:	(bad)  
 100258c:	adc    DWORD PTR [rbx-0x57],0x44
 1002590:	cwde   
 1002591:	jne    0x10025d5
 1002593:	mov    esp,0x4ecb5fad
 1002598:	mov    dh,0xf4
 100259a:	xor    bl,al
 100259c:	movabs eax,ds:0x97313b935a6db147
 10025a5:	(bad)  
 10025a6:	or     BYTE PTR [rbp-0x72],al
 10025a9:	rex and eax,0x8b1af5ad
 10025af:	(bad)  
 10025b3:	fs rex.RXB (bad) 
 10025b6:	(bad)  
 10025b7:	rex.RX movabs eax,ds:0xff6f631385e37cec
 10025c1:	out    dx,eax
 10025c2:	(bad)  
 10025c3:	(bad)  
 10025c4:	loop   0x10025a3
 10025c6:	(bad)  
 10025c7:	rex.RX movabs al,ds:0x359741b2f3aa2b91
 10025d1:	repnz imul ebx,esp,0x48
 10025d5:	movabs ds:0xe9ca9590c7ae46fc,eax
 10025de:	std    
 10025df:	xchg   ebx,eax
 10025e0:	retf   0xd16b
 10025e3:	nop
 10025e4:	jp     0x100259a
 10025e6:	mov    ebp,0xb126bb43
 10025eb:	jne    0x100263d
 10025ed:	nop
 10025ee:	xchg   edx,eax
 10025ef:	sub    dl,BYTE PTR [rdi-0x2a]
 10025f2:	repz cli 
 10025f4:	or     eax,0x8241b79e
 10025f9:	out    0xeb,al
 10025fb:	repnz leave 
 10025fd:	(bad)  
 10025fe:	(bad)  
 1002600:	mov    ebp,0x506a331e
 1002605:	test   eax,0xa28343b5
 100260a:	add    esi,DWORD PTR [rip+0xfffffffff717f485]        # 0xfffffffff8181a95
 1002610:	out    dx,al
 1002611:	ds cs xchg esp,eax
 1002614:	cmp    ebp,DWORD PTR [rdx+0x519e4895]
 100261a:	mov    dh,0xfb
 100261c:	sbb    dh,BYTE PTR [rbp+rax*2-0x72ae19dc]
 1002623:	jne    0x10025f8
 1002625:	cli    
 1002626:	sub    al,BYTE PTR [rdx-0x51]
 1002629:	mul    DWORD PTR [rdx]
 100262b:	(bad)  
 100262c:	lods   al,BYTE PTR cs:[rsi]
 100262e:	or     BYTE PTR [rax+0x4b],al
 1002631:	add    BYTE PTR [rsp+rbp*1],dl
 1002634:	shl    edx,cl
 1002636:	scas   eax,DWORD PTR es:[rdi]
 1002637:	rex.XB xchg r13d,eax
 1002639:	fcomp  st(2)
 100263b:	imul   BYTE PTR [rsi+0x33]
 100263e:	(bad)
 1002641:	rol    DWORD PTR [rbx],0xe7
 1002644:	push   rbp
 1002645:	mov    ebx,0xbeaa4604
 100264a:	add    eax,DWORD PTR [rcx+rsi*1]
 100264d:	iret   
 100264e:	push   rax
 100264f:	cmp    BYTE PTR [rbp+rdx*1+0x71f26af4],al
 1002656:	(bad)  
 1002657:	mov    cl,0x3e
 100265a:	(bad)  
 100265b:	js     0x1002616
 100265d:	sub    eax,0xa57d5a3a
 1002662:	pop    rbp
 1002663:	rex.W
 1002664:	es xchg esp,eax
 1002666:	or     DWORD PTR [rdx-0x60],0x52
 100266a:	enter  0x74d1,0x46
 100266e:	pop    rdx
 100266f:	rex.WRX cmp BYTE PTR [rsi],r11b
 1002672:	rex.WR fmulp st(2),st
 1002675:	(bad)  
 1002676:	ins    BYTE PTR es:[rdi],dx
 1002677:	xchg   rbx,rax
 1002679:	stc    
 100267a:	dec    DWORD PTR [rdi+0x64ef3341]
 1002680:	rex.WRB or rax,0x3ea562f5
 1002686:	pop    rcx
 1002687:	rex.W cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1002689:	(bad)  
 100268a:	xchg   ebp,eax
 100268b:	retf   0xdd9f
 100268e:	ret    
 100268f:	push   rsi
 1002690:	(bad)  
 1002691:	test   al,0x97
 1002693:	and    al,0xc7
 1002695:	lahf   
 1002696:	stos   BYTE PTR es:[rdi],al
 1002697:	rex.WRX mov dl,r11b
 100269a:	(bad)
 100269d:	adc    DWORD PTR [rdi-0x1cb96b97],0xd290e345
 10026a7:	rex.WXB mov r10b,0x15
 10026aa:	(bad)  
 10026ab:	adc    bh,BYTE PTR [rcx-0x39]
 10026ae:	mov    ebx,0xa8473675
 10026b3:	sub    edx,ebp
 10026b5:	mov    ch,0xd0
 10026b7:	rex.WX movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
 10026b9:	movabs eax,ds:0x2ab3ba209cd26f12
 10026c2:	add    ch,BYTE PTR [rdx+0x44]
 10026c5:	xor    DWORD PTR [rbx+0x41],0xffffff8d
 10026c9:	scas   al,BYTE PTR es:[rdi]
 10026ca:	ins    DWORD PTR es:[rdi],dx
 10026cb:	sub    cl,BYTE PTR [rip+0x68a53ce]        # 0x78a7a9f
 10026d1:	jrcxz  0x100268b
 10026d3:	mov    DWORD PTR [rdx],ebp
 10026d5:	jl     0x1002706
 10026d7:	rex.RXB mov BYTE PTR [r8+0x72],r10b
 10026db:	add    dh,BYTE PTR [rdx+rbx*8-0x1574840f]
 10026e2:	(bad)  
 10026e3:	test   al,0xaa
 10026e5:	scas   al,BYTE PTR es:[rdi]
 10026e6:	(bad)  
 10026e7:	rex.WXB mov r11b,0xf2
 10026ea:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 10026eb:	icebp  
 10026ec:	mov    eax,DWORD PTR [rbp-0x3c]
 10026ef:	pop    rbp
 10026f0:	(bad)  
 10026f1:	pop    rbx
 10026f2:	lods   al,BYTE PTR ds:[rsi]
 10026f3:	adc    ch,BYTE PTR [rdx+riz*1]
 10026f6:	mov    ah,0x4b
 10026f8:	mov    esi,0x30ec6527
 10026fd:	pop    rbx
 10026fe:	sub    bl,ch
 1002700:	cmp    ch,BYTE PTR [rdx+0x47]
 1002703:	stos   BYTE PTR es:[rdi],al
 1002704:	push   rdx
 1002705:	cmp    eax,0x9f814ae4
 100270a:	(bad)  
 100270b:	(bad)  
 100270c:	jb     0x1002734
 100270e:	(bad)  
 100270f:	rex.WX outs dx,DWORD PTR ds:[rsi]
 1002711:	(bad)  
 1002712:	lods   eax,DWORD PTR ds:[rsi]
 1002713:	pop    gs
 1002715:	(bad)  
 1002716:	scas   al,BYTE PTR es:[rdi]
 1002717:	rex.WR xchg rdi,rax
 1002719:	mov    es,WORD PTR [rbp-0x138e357a]
 100271f:	cmc    
 1002720:	(bad)  [rbp-0x4f]
 1002723:	jbe    0x1002725
 1002725:	(bad)  
 1002726:	(bad)  
 1002727:	rex.RB mov r12d,0x3b687392
 100272d:	jge    0x100270d
 100272f:	push   rsi
 1002730:	xor    ecx,esp
 1002732:	or     bl,bl
 1002734:	out    dx,eax
 1002735:	rex.W pop rsp
 1002737:	movabs ds:0x7e318ebecd45831e,rax
 1002741:	out    0xa3,eax
 1002743:	rex.R cmc 
 1002745:	push   rsi
 1002746:	cwde   
 1002747:	rex.WRXB pop QWORD PTR [r15+0x65dfe3a1]
 100274e:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 100274f:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1002750:	rex.WX sub QWORD PTR ss:[rsi+0x49bec48d],rdi
 1002758:	and    DWORD PTR [rbx+0x10169b88],0xffffffc2
 100275f:	xchg   ebx,eax
 1002760:	ins    BYTE PTR es:[rdi],dx
 1002761:	jo     0x1002763
 1002763:	out    0x3c,eax
 1002765:	repnz or al,BYTE PTR [rax-0x43]
 1002769:	(bad)  
 100276a:	lods   al,BYTE PTR ds:[rsi]
 100276b:	jbe    0x1002778
 100276d:	adc    DWORD PTR [rcx-0x32cbc47b],edi
 1002773:	push   rax
 1002774:	rex.RX
 1002775:	lock sbb DWORD PTR [rdi-0x7e],ecx
 1002779:	sub    esp,DWORD PTR [rdi+0x308d5c75]
 100277f:	pop    rax
 1002780:	rex.RX mov edi,0x30638e98
 1002786:	and    al,0x43
 1002788:	(bad)  
 1002789:	jns    0x1002763
 100278b:	or     al,0x6
 100278d:	pushf  
 100278e:	sbb    eax,DWORD PTR [rdx]
 1002790:	test   eax,0xf8202f02
 1002795:	push   rbx
 1002796:	or     eax,0xac02b842
 100279b:	adc    ebx,DWORD PTR [rax]
 100279d:	out    0xd3,eax
 100279f:	cmp    BYTE PTR [rbp-0x438eaf21],dh
 10027a5:	(bad)  
 10027a7:	rex.WR (bad) 
 10027a9:	or     DWORD PTR [rdx-0x56],eax
 10027ac:	add    DWORD PTR [rcx+r13*8-0x59],r10d
 10027b1:	rex jno 0x10027ce
 10027b4:	lock jnp 0x100277a
 10027b7:	rex.RB cwde 
 10027b9:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 10027ba:	(bad)  
 10027bb:	jrcxz  0x10027e6
 10027bd:	xchg   edx,eax
 10027be:	mov    bl,0x84
 10027c0:	xchg   ebx,eax
 10027c1:	je     0x1002760
 10027c3:	pop    rdx
 10027c4:	jp     0x100275c
 10027c6:	jg     0x100280d
 10027c8:	lods   al,BYTE PTR ds:[rsi]
 10027c9:	std    
 10027ca:	(bad)  
 10027cb:	(bad)  
 10027cc:	mul    ch
 10027ce:	mov    ecx,0xfd1dfcaf
 10027d3:	xlat   BYTE PTR ds:[rbx]
 10027d4:	rex.WRX
 10027d5:	ss mov bl,0x47
 10027d8:	xchg   ebp,eax
 10027d9:	(bad)  
 10027da:	(bad)  
 10027db:	ins    BYTE PTR es:[rdi],dx
 10027dc:	sbb    eax,0xc2a53ddb
 10027e1:	mov    WORD PTR [rbx],es
 10027e3:	(bad)  
 10027e4:	clc    
 10027e5:	std    
 10027e6:	jne    0x1002833
 10027e8:	stos   BYTE PTR es:[rdi],al
 10027e9:	(bad)  
 10027ea:	push   rdi
 10027eb:	xchg   edi,edi
 10027ed:	(bad)  
 10027ee:	mov    edi,0xa494216d
 10027f3:	lea    esp,[rdi-0x49be2839]
 10027f9:	jo     0x10027bc
 10027fb:	movabs eax,ds:0x4555b0a5d454becb
 1002804:	xlat   BYTE PTR ds:[rbx]
 1002805:	call   0xffffffff9ab271c7
 100280a:	xor    DWORD PTR [rax-0x3d],eax
 100280d:	rex.WRB (bad) 
 100280f:	imul   ebp,DWORD PTR [rip+0x4b8bf657],0x90494e67        # 0x4c8c1e70
 1002819:	rex.RXB fst st(0)
 100281c:	loop   0x1002869
 100281e:	mov    bh,0x85
 1002820:	ret    0x85fc
 1002823:	mov    es,WORD PTR [rax]
 1002825:	mov    DWORD PTR [rcx+0x46],ecx
 1002828:	mov    ch,0x6f
 100282a:	jb     0x100286f
 100282c:	xor    eax,0x5cc4fe78
 1002831:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1002832:	mov    edx,0x1014c122
 1002837:	rex.X xchg ecx,eax
 1002839:	(bad)  
 100283a:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 100283b:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 100283c:	mov    dh,0x67
 100283e:	clc    
 100283f:	ret    0x9262
 1002842:	mov    dh,0x26
 1002844:	(bad)  
 1002845:	jp     0x1002850
 1002847:	rex.WRXB scas al,BYTE PTR es:[rdi]
 1002849:	pop    rax
 100284a:	xchg   esi,eax
 100284b:	sbb    eax,0xc55bc2cd
 1002850:	rex.WX
 1002851:	rex.R push 0xffffffff95a60f17
 1002857:	rex.WXB sub r13b,0x44
 100285b:	out    0xab,eax
 100285d:	push   0xffffffff84044d0b
 1002862:	(bad)  
 1002863:	(bad)  
 1002865:	rcl    ebp,cl
 1002867:	rex.WR pushf 
 1002869:	(bad)  
 100286a:	xchg   esp,eax
 100286b:	rex int 0x5c
 100286e:	and    ch,ah
 1002870:	(bad)  
 1002871:	xor    al,0x7e
 1002873:	push   rcx
 1002874:	rex.RXB
 1002875:	ss xchg ebp,eax
 1002877:	rex.WRXB mov r8b,0xe9
 100287a:	ja     0x10028fb
 100287c:	fiadd  DWORD PTR [rax]
 100287e:	adc    edx,DWORD PTR [rbp+0x6920f08]
 1002884:	mov    BYTE PTR [rdx+rax*1+0x4a],ah
 1002888:	mov    edx,?
 100288a:	(bad)  
 100288b:	cmp    al,0x50
 100288d:	sbb    dh,BYTE PTR [rsi+0x263d5b9]
 1002893:	cmp    bl,BYTE PTR [rbp-0x79]
 1002896:	(bad)  
 1002897:	rex.WXB movabs rax,ds:0x6534e4babf2efc33
 10028a1:	(bad)  
 10028a2:	pop    rsi
 10028a3:	loop   0x1002855
 10028a5:	jge    0x10028a0
 10028a7:	mov    r8b,0xfc
 10028aa:	in     eax,0x83
 10028ac:	sbb    dl,bl
 10028ae:	fs mov esp,0xb8e051b0
 10028b4:	add    eax,0xa649c72b
 10028b9:	mov    rax,cr5
 10028bc:	ja     0x10028f7
 10028be:	sub    eax,0x4b8c445e
 10028c3:	(bad)  
 10028c4:	rex.WR div BYTE PTR [rdi+rax*2-0x1b1cb255]
 10028cc:	pop    rdi
 10028cd:	enter  0xe2aa,0x93
 10028d1:	mov    BYTE PTR [rdx-0x27],al
 10028d4:	xchg   ebp,eax
 10028d5:	mov    bh,ch
 10028d7:	rex.WRB (bad) 
 10028d9:	ins    BYTE PTR es:[rdi],dx
 10028da:	rex xor eax,0x608c72e5
 10028e0:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 10028e1:	and    DWORD PTR [rdi-0x3a],eax
 10028e4:	rex.RXB
 10028e5:	rex.WB push r13
 10028e7:	rex mov ebx,ebp
 10028ea:	nop
 10028eb:	rex.R jmp 0x100291b
 10028ee:	rcl    edx,cl
 10028f0:	sub    bh,BYTE PTR [rdi+0x35]
 10028f3:	mov    ch,0xd8
 10028f5:	xor    eax,0x59b94f58
 10028fa:	rcr    DWORD PTR [rdi],cl
 10028fc:	adc    al,BYTE PTR [rdx]
 10028fe:	outs   dx,DWORD PTR ds:[rsi]
 10028ff:	(bad)  
 1002900:	rol    DWORD PTR [rbp+0x42],1
 1002903:	addr32 mov dl,0xb1
 1002906:	sbb    eax,0xc93eb84a
 100290b:	rex.R cli 
 100290d:	mov    ah,0x28
 100290f:	xor    al,0xd7
 1002911:	sti    
 1002912:	imul   esi,DWORD PTR [rdx],0x4cdf897b
 1002918:	mov    DWORD PTR [rax-0x4edbe5d2],ecx
 100291e:	btc    DWORD PTR [rsi],eax
 1002921:	(bad)  
 1002922:	(bad)  
 1002923:	jrcxz  0x10029a0
 1002925:	cdq    
 1002926:	test   BYTE PTR [rsi-0x70],0xad
 100292a:	rex.XB
 100292b:	rex.W cmp dil,BYTE PTR [rax-0x74]
 100292f:	ret    
 1002930:	xchg   edi,eax
 1002931:	out    dx,eax
 1002932:	xchg   DWORD PTR [rax-0x25],ecx
 1002935:	xchg   ebx,eax
 1002936:	in     al,dx
 1002937:	rex.R xchg edx,eax
 1002939:	sahf   
 100293a:	stos   DWORD PTR es:[rdi],eax
 100293b:	fnstcw WORD PTR [rsi+0x3f]
 100293e:	xor    al,0xf3
 1002940:	(bad)  
 1002941:	add    DWORD PTR [rax+0x1c2afc32],0x4e
 1002948:	movabs al,ds:0x86babda377849f3a
 1002951:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1002952:	jmp    FWORD PTR [rax-0x5b]
 1002955:	(bad)  
 1002956:	fadd   QWORD PTR [rcx-0x72]
 1002959:	ficom  WORD PTR [rbx]
 100295b:	adc    BYTE PTR [rax],ah
 100295d:	xchg   edi,ebp
 100295f:	xor    edi,DWORD PTR [rdi]
 1002961:	jp     0x10028e7
 1002963:	mov    ecx,?
 1002965:	(bad)  
 1002966:	rex.RX
 1002967:	rex.WXB xchg r12,rax
 1002969:	mov    cl,0x21
 100296b:	in     al,0x7f
 100296d:	pop    rbx
 100296e:	(bad)  
 100296f:	(bad)
 1002973:	cmp    DWORD PTR [rdx-0x5ab3ce9b],eax
 1002979:	mov    BYTE PTR [rax+0x5a],0x86
 100297d:	(bad)  
 100297e:	out    dx,al
 100297f:	shr    DWORD PTR [rdi+0x66],0x8
 1002983:	jnp    0x1002923
 1002985:	(bad)  
 1002986:	(bad)  
 1002987:	rex.WX sub QWORD PTR [rbp+0x6d3e221c],0xffffffff8de54b96
 1002992:	jl     0x10029d4
 1002994:	mov    dh,0x65
 1002996:	fiadd  DWORD PTR [rbx-0x49]
 1002999:	ins    BYTE PTR es:[rdi],dx
 100299a:	jae    0x10029fd
 100299c:	(bad)  
 100299d:	ins    BYTE PTR es:[rdi],dx
 100299e:	adc    bl,BYTE PTR [rsi]
 10029a0:	nop
 10029a1:	(bad)  
 10029a2:	push   0xffffffffb07d5f33
 10029a7:	scas   al,BYTE PTR es:[rdi]
 10029a9:	sub    ebp,esi
 10029ab:	xchg   edi,eax
 10029ac:	jb     0x100296f
 10029ae:	xchg   bh,bl
 10029b0:	jb     0x10029c8
 10029b2:	icebp  
 10029b3:	jl     0x1002995
 10029b5:	sbb    eax,0x239145ac
 10029ba:	movabs ds:0x540458970891b72a,al
 10029c3:	mul    BYTE PTR [rax]
 10029c5:	jno    0x10029a0
 10029c7:	rex.X mov esp,0xee9dc5ec
 10029cd:	xchg   ebp,eax
 10029ce:	mov    bh,0xdd
 10029d0:	sub    bh,BYTE PTR [rbx+0x33]
 10029d3:	(bad)
 10029d6:	fimul  DWORD PTR [rcx+rdi*4+0x77]
 10029da:	(bad)  
 10029db:	mov    bl,BYTE PTR [rcx]
 10029dd:	sub    ah,BYTE PTR [rbx]
 10029df:	xchg   edx,eax
 10029e0:	ins    DWORD PTR es:[rdi],dx
 10029e1:	(bad)  
 10029e2:	rex.WRXB (bad) 
 10029e4:	sub    bh,BYTE PTR [rax]
 10029e6:	adc    cl,BYTE PTR [rax-0x72]
 10029e9:	or     ch,al
 10029eb:	(bad)  
 10029ec:	movabs al,ds:0x2203e07f2d98fe4f
 10029f5:	(bad)  
 10029f6:	or     eax,DWORD PTR [rbp+rcx*4-0x17]
 10029fa:	mov    ch,0x6a
 10029fc:	and    dh,al
 10029fe:	jmp    0x1492ec02
 1002a03:	popf   
 1002a04:	rol    BYTE PTR [rcx],0x48
 1002a07:	rex.B movabs ds:0x5f3eeae4f60af258,al
 1002a11:	rex.RB (bad) 
 1002a13:	fwait
 1002a14:	cwde   
 1002a15:	jnp    0x1002997
 1002a17:	rex.X (bad) 
 1002a19:	test   eax,0xb4c82e93
 1002a1e:	adc    ecx,ebx
 1002a20:	xchg   esi,eax
 1002a21:	addr32 (bad) 
 1002a23:	jrcxz  0x1002a4e
 1002a25:	rex.R cdq 
 1002a27:	rex.B sahf 
 1002a29:	xor    DWORD PTR [rdi-0x16],ebx
 1002a2c:	and    eax,0xd1e8d84d
 1002a31:	or     al,0x1d
 1002a33:	(bad)  
 1002a34:	cs addr32 (bad) 
 1002a37:	rex.WRXB movabs r10,0x726000ceb5f7bf58
 1002a41:	mov    bh,0x72
 1002a43:	push   rbp
 1002a44:	lods   al,BYTE PTR ds:[rsi]
 1002a45:	mov    BYTE PTR [rip+0xffffffffe2f8964a],dh        # 0xffffffffe3f8c095
 1002a4b:	xchg   BYTE PTR [rsi],ah
 1002a4d:	lods   al,BYTE PTR ds:[rsi]
 1002a4e:	jle    0x10029df
 1002a50:	out    0x5e,eax
 1002a52:	(bad)  
 1002a53:	rex.XB mov r9d,0x9c4c984e
 1002a59:	jmp    0xffffffff9aaa3cb4
 1002a5e:	or     dh,al
 1002a60:	mov    al,0x6
 1002a62:	cli    
 1002a63:	fdivrp st(0),st
 1002a65:	popf   
 1002a66:	mov    ah,0x47
 1002a68:	mov    edi,0x2a6b857
 1002a6d:	stc    
 1002a6e:	sahf   
 1002a6f:	xchg   ecx,eax
 1002a70:	imul   ebp,eax,0xffffff9e
 1002a73:	ret    0x9d47
 1002a76:	mov    edx,0xe35b9647
 1002a7b:	fs jae 0x1002a9a
 1002a7e:	mov    ch,BYTE PTR [rdx]
 1002a80:	mov    edx,0xa87ed456
 1002a85:	(bad)  
 1002a86:	(bad)  
 1002a87:	test   BYTE PTR [rdx+rdx*8],r14b
 1002a8b:	and    eax,0x822249f9
 1002a90:	and    ebp,edx
 1002a92:	rex.X xor al,0xc4
 1002a95:	sbb    BYTE PTR [rax],al
 1002a97:	rex.WX mov dil,BYTE PTR [rbp-0x7f87ea3c]
 1002a9e:	retf   0x40a7
 1002aa1:	and    edx,esi
 1002aa3:	rex.WRXB pop r8
 1002aa5:	ret    0x42c0
 1002aa8:	xchg   esp,eax
 1002aa9:	mov    al,0xb4
 1002aab:	leave  
 1002aac:	cmp    eax,0x339920d2
 1002ab1:	(bad)  
 1002ab2:	shr    DWORD PTR [rbx+rbp*2-0x76bcb924],1
 1002ab9:	(bad)  
 1002abb:	adc    dh,bh
 1002abd:	(bad)  
 1002abe:	(bad)  
 1002abf:	push   rsp
 1002ac0:	ret    0xc285
 1002ac3:	xor    eax,0x470947f4
 1002ac8:	lahf   
 1002ac9:	nop
 1002aca:	push   rax
 1002acb:	push   rax
 1002acc:	(bad)  
 1002acd:	rex.WB push r11
 1002acf:	shl    dl,1
 1002ad1:	xchg   esp,eax
 1002ad2:	jrcxz  0x1002ace
 1002ad4:	xor    DWORD PTR [rsi-0x7c],esi
 1002ad7:	rex.X movabs ds:0x16e7339f55c43b63,eax
 1002ae1:	(bad)  
 1002ae2:	movabs ds:0xaf994926e88502,eax
 1002aeb:	movabs ds:0x9e24c6d5934c78b7,eax
 1002af4:	(bad)  
 1002af5:	fadd   DWORD PTR [rax+rax*2-0x59704345]
 1002afc:	mov    DWORD PTR [rax+0x2],edi
 1002aff:	cmp    DWORD PTR [rcx+rax*1],ebp
 1002b02:	(bad)
 1002b05:	call   0x1d94764c
 1002b0a:	pop    rcx
 1002b0b:	push   rax
 1002b0c:	rex.RX adc BYTE PTR [rdx+0x5c],r15b
 1002b10:	mov    dh,0x56
 1002b12:	jmp    0x30e9784a
 1002b17:	rex.R cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1002b19:	rex.WB stc 
 1002b1b:	test   BYTE PTR [rbx],bl
 1002b1d:	or     eax,0xf5557314
 1002b22:	xor    dl,bh
 1002b24:	xor    eax,0xa4428c77
 1002b29:	jle    0x1002b0c
 1002b2b:	pop    rdx
 1002b2c:	(bad)  
 1002b2d:	shr    DWORD PTR [rsi-0x31],cl
 1002b30:	sti    
 1002b31:	jl     0x1002b7c
 1002b33:	in     al,0x44
 1002b35:	lock fisttp QWORD PTR [rax-0x6d]
 1002b39:	xchg   esi,eax
 1002b3a:	(bad)  
 1002b3b:	test   DWORD PTR [rsi+0x26],eax
 1002b3e:	xor    dl,al
 1002b40:	(bad)  
 1002b41:	sar    BYTE PTR [rbx-0x78],1
 1002b44:	(bad)  
 1002b45:	(bad)  
 1002b46:	(bad)  
 1002b47:	rex.WRXB movabs ds:0xc796f8e7427d3322,al
 1002b51:	jno    0x1002adf
 1002b53:	(bad)  
 1002b54:	stc    
 1002b55:	cdq    
 1002b56:	icebp  
 1002b57:	test   QWORD PTR [r13+0x77],rax
 1002b5b:	xor    DWORD PTR [rax+0x10],ebp
 1002b5e:	xor    al,0xcb
 1002b60:	je     0x1002b97
 1002b62:	test   DWORD PTR [rsi-0x1d],ecx
 1002b65:	ret    0x4cae
 1002b68:	mov    bh,0x91
 1002b6a:	sub    eax,0xc1d5d4a
 1002b6f:	cwde   
 1002b70:	(bad)  
 1002b71:	call   0x1e002d68
 1002b76:	jle    0x1002bc3
 1002b78:	movabs ds:0x9d8140fe2a120c97,al
 1002b81:	and    eax,0x1eec6100
 1002b86:	push   rbp
 1002b87:	rex.WXB xchg r9,rax
 1002b8a:	clc    
 1002b8b:	or     eax,DWORD PTR [rip+0x12560849]        # 0x135633da
 1002b91:	xor    edi,ebx
 1002b93:	shl    BYTE PTR [rsi],1
 1002b95:	fwait
 1002b96:	adc    cl,BYTE PTR [rbp+rbp*4+0x60]
 1002b9a:	fs push rax
 1002b9c:	cmp    al,dl
 1002b9e:	vminps xmm5,xmm0,XMMWORD PTR [rdx]
 1002ba2:	xlat   BYTE PTR ds:[rbx]
 1002ba3:	push   rbp
 1002ba4:	cmp    dh,ch
 1002ba6:	jbe    0x1002bf3
 1002ba8:	test   al,al
 1002baa:	pop    QWORD PTR [rdx-0x24]
 1002bad:	jae    0x1002b35
 1002baf:	jb     0x1002bdd
 1002bb1:	(bad)  
 1002bb2:	and    DWORD PTR [rsi],esp
 1002bb4:	leave  
 1002bb5:	mov    ebp,0x1eb742a8
 1002bba:	cld    
 1002bbb:	loopne 0x1002c2e
 1002bbd:	es in  eax,dx
 1002bbf:	rex.WRX
 1002bc0:	rex.XB adc al,0x28
 1002bc3:	shl    BYTE PTR [rcx+rcx*4-0x4b],cl
 1002bc7:	rex.WB xchg BYTE PTR [r8-0x54],sil
 1002bcb:	xor    bl,BYTE PTR [rbx]
 1002bcd:	jne    0x1002b5f
 1002bcf:	outs   dx,BYTE PTR ds:[rsi]
 1002bd0:	lock (bad) 
 1002bd2:	loopne 0x1002b56
 1002bd4:	sub    al,BYTE PTR [rcx-0x4b]
 1002bd7:	rex.R mov esp,0x5709252
 1002bdd:	and    al,0xf5
 1002bdf:	jrcxz  0x1002c38
 1002be1:	pop    rbp
 1002be2:	sub    edx,ebx
 1002be4:	adc    eax,0x894abd3d
 1002be9:	rex.WRXB cdqe 
 1002beb:	cmp    dh,BYTE PTR [rdi]
 1002bed:	retf   0x602a
 1002bf0:	jg     0x1002b7c
 1002bf2:	imul   esp,esp,0x47ad9e40
 1002bf8:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1002bf9:	(bad)  
 1002bfa:	js     0x1002c47
 1002bfc:	cli    
 1002bfd:	retf   0xa90c
 1002c00:	mov    ecx,0x699d3338
 1002c05:	shl    eax,cl
 1002c07:	rex.WX movabs ds:0x4c3c485f1ccd9214,rax
 1002c11:	and    ebx,DWORD PTR [rsi-0x1e]
 1002c14:	(bad)  
 1002c15:	cvtps2pi mm1,QWORD PTR [rdx-0x6d]
 1002c19:	test   al,0x1a
 1002c1b:	movabs al,ds:0xb008e5cb5c35e697
 1002c24:	fmul   DWORD PTR [rdx+rbp*1]
 1002c27:	rex.WRXB xchg r10,rax
 1002c29:	xchg   esi,edx
 1002c2b:	rex.XB (bad) 
 1002c2d:	movabs ds:0x26b9be4349e31d4d,al
 1002c36:	mov    dh,0x4e
 1002c38:	sub    BYTE PTR [rdx],0x48
 1002c3b:	sahf   
 1002c3c:	xchg   ebp,eax
 1002c3d:	(bad)
 1002c40:	(bad)  
 1002c41:	test   ebx,edx
 1002c43:	es add al,0x13
 1002c46:	(bad)  
 1002c47:	rex.WX lods rax,QWORD PTR ds:[rsi]
 1002c49:	adc    al,0x8d
 1002c4b:	enter  0x9ec0,0x62
 1002c4f:	xor    ebx,DWORD PTR [rbx+0x10]
 1002c52:	scas   eax,DWORD PTR es:[rdi]
 1002c53:	mov    cl,0x19
 1002c55:	xchg   edx,eax
 1002c56:	xchg   esp,eax
 1002c57:	rex.WXB stos QWORD PTR es:[rdi],rax
 1002c59:	(bad)  
 1002c5a:	(bad)  
 1002c5b:	ja     0x1002c3e
 1002c5d:	cmp    al,BYTE PTR [rsi-0x45]
 1002c60:	xor    al,0xb1
 1002c62:	scas   al,BYTE PTR es:[rdi]
 1002c63:	fsincos 
 1002c65:	pop    rdx
 1002c66:	push   rdx
 1002c67:	rex.WRX test rax,0x5c04dcb5
 1002c6d:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1002c6e:	xor    eax,edi
 1002c70:	movabs ds:0xa44e7db096c040d4,eax
 1002c79:	or     al,0xf1
 1002c7b:	jne    0x1002c8f
 1002c7d:	cmp    bl,ch
 1002c7f:	adc    ebp,DWORD PTR [rdx]
 1002c81:	xor    ah,bh
 1002c83:	xor    eax,0x43e4d009
 1002c88:	movabs eax,ds:0xe96654ef0abfb7ea
 1002c91:	xchg   ecx,eax
 1002c92:	(bad)  
 1002c93:	rex.B
 1002c94:	rex.RB sub al,0x7a
 1002c97:	test   QWORD PTR [rdx],rbx
 1002c9a:	pop    rbx
 1002c9b:	cmp    eax,0x297374fe
 1002ca0:	cld    
 1002ca1:	movsxd esp,DWORD PTR [rdx]
 1002ca3:	adc    DWORD PTR [rdi-0x4db7ee89],ebp
 1002ca9:	int3   
 1002caa:	icebp  
 1002cab:	xor    al,0xeb
 1002cad:	jmp    0xffffffff98b0a822
 1002cb2:	rex.WRX clc 
 1002cb4:	xlat   BYTE PTR ds:[rbx]
 1002cb5:	repz dec DWORD PTR [rsi-0x54]
 1002cb9:	stos   BYTE PTR es:[rdi],al
 1002cba:	cmp    BYTE PTR [rax],0x5e
 1002cbd:	adc    ebp,ebx
 1002cbf:	xor    al,0x14
 1002cc1:	cwde   
 1002cc2:	sbb    cl,BYTE PTR [rsp+rbp*1-0x5d]
 1002cc6:	jle    0x1002d17
 1002cc8:	cdq    
 1002cc9:	mov    ebp,0x2005eaaf
 1002cce:	loop   0x1002d2e
 1002cd0:	cmp    al,0x61
 1002cd2:	enter  0x685e,0x6c
 1002cd6:	adc    al,0x4a
 1002cd8:	mov    ebx,0xb8f4bc6d
 1002cdd:	sar    DWORD PTR [rip+0xffffffff9f29a416],1        # 0xffffffffa029d0f9
 1002ce3:	sub    DWORD PTR [rdx-0x9],edx
 1002ce6:	sub    eax,DWORD PTR [rsi-0x68]
 1002ce9:	push   rbp
 1002cea:	data16 rex.W movs BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1002ced:	push   rcx
 1002cee:	data16 stc 
 1002cf0:	sub    dl,0x1e
 1002cf3:	sbb    ch,ah
 1002cf5:	retf   0x408b
 1002cf8:	mov    edi,?
 1002cfa:	ja     0x1002c7d
 1002cfc:	sub    al,BYTE PTR [rsp+riz*8-0x368c30d6]
 1002d03:	loopne 0x1002cbd
 1002d05:	lahf   
 1002d06:	xlat   BYTE PTR ds:[rbx]
 1002d07:	rex.RB xchg r15d,eax
 1002d09:	sbb    eax,0x5cf56606
 1002d0e:	cmovl  esp,DWORD PTR [rsi]
 1002d11:	mov    cl,cl
 1002d13:	enterw 0x5911,0x43
 1002d18:	or     edi,0xf60a27ae
 1002d1e:	adc    eax,0xca72da19
 1002d23:	xlat   BYTE PTR ds:[rbx]
 1002d24:	rex.WX (bad) 
 1002d26:	push   rsi
 1002d27:	rex.W pushf 
 1002d29:	fistp  DWORD PTR [rax-0x5919fe0b]
 1002d2f:	movabs ds:0x41d2895b3a199961,al
 1002d38:	movabs ds:0xf18f251e710b3e04,eax
 1002d41:	rcr    DWORD PTR [rbp-0x1],cl
 1002d44:	rcr    DWORD PTR [rcx-0x684fb005],0x1b
 1002d4b:	sbb    ebp,DWORD PTR [rbx]
 1002d4d:	sahf   
 1002d4e:	fwait
 1002d4f:	sub    eax,0xe2c1cc88
 1002d54:	rex.WRX
 1002d55:	lock test eax,0x4518ab49
 1002d5b:	rex.RB jmp 0x1002d93
 1002d5e:	(bad)  
 1002d5f:	es mov eax,0x941b6a2e
 1002d65:	imul   esp,DWORD PTR [rcx],0xcdb78840
 1002d6b:	jmp    0x6a543c8
 1002d70:	sbb    esp,DWORD PTR [rip+0x29705918]        # 0x2a70868e
 1002d76:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1002d77:	rex.RB stos DWORD PTR es:[rdi],eax
 1002d79:	pop    rdi
 1002d7a:	add    ebx,eax
 1002d7c:	(bad)
 1002d7f:	pop    rdx
 1002d80:	xchg   ebp,eax
 1002d81:	jne    0x1002dd2
 1002d83:	xchg   DWORD PTR [rdi-0x5],ebx
 1002d86:	inc    DWORD PTR [rax-0x6a]
 1002d89:	scas   eax,DWORD PTR es:[rdi]
 1002d8a:	sti    
 1002d8b:	inc    DWORD PTR [rdx+0xaefe350]
 1002d91:	mov    ch,0x3
 1002d93:	xor    rsp,QWORD PTR gs:[r11+0x4f]
 1002d98:	mov    dl,0xb0
 1002d9a:	movabs ds:0x1026167b9599a310,eax
 1002da3:	call   0x49276bcc
 1002da8:	test   DWORD PTR [rdx+0x1be79748],esi
 1002dae:	pop    rcx
 1002daf:	mov    eax,DWORD PTR [rsi]
 1002db1:	test   al,0xa3
 1002db3:	ins    BYTE PTR es:[rdi],dx
 1002db4:	mov    esi,ebx
 1002db6:	stc    
 1002db7:	rex.RX xchg esi,eax
 1002db9:	cmc    
 1002dba:	(bad)  
 1002dbb:	mov    edx,0x438ea37d
 1002dc0:	rex (bad) 
 1002dc2:	(bad)  
 1002dc3:	push   QWORD PTR es:[rsi+rax*4-0x6fe473b5]
 1002dcb:	push   rax
 1002dcc:	ror    BYTE PTR [rsi-0x49fe4f7d],cl
 1002dd2:	movabs al,ds:0xf6e4b9434afdef9b
 1002ddb:	shl    BYTE PTR [rsp+rdi*8+0x74],1
 1002ddf:	sub    al,0x22
 1002de1:	cld    
 1002de2:	loope  0x1002e18
 1002de4:	rex.RX frstor [rip+0x202ea94a]        # 0x212ed735
 1002deb:	fwait
 1002dec:	rex.XB cwde 
 1002dee:	lock (bad) 
 1002df0:	xor    ecx,ecx
 1002df2:	(bad)  
 1002df3:	and    BYTE PTR [rdx-0x57b865e9],bh
 1002df9:	pop    rbx
 1002dfa:	jno    0x1002e16
 1002dfc:	push   rsi
 1002dfd:	loop   0x1002dbf
 1002dff:	push   rsp
 1002e00:	and    edi,ecx
 1002e02:	pop    rsi
 1002e03:	(bad)  
 1002e04:	cmp    ah,BYTE PTR [rcx-0x467ebaee]
 1002e0a:	fcomp  DWORD PTR [rsi+rax*4+0x3b]
 1002e0e:	pop    rsp
 1002e0f:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1002e10:	or     al,ah
 1002e12:	pushf  
 1002e13:	jg     0x1002e34
 1002e15:	(bad)  
 1002e16:	adc    al,0x43
 1002e18:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1002e19:	stc    
 1002e1a:	jle    0x1002e95
 1002e1c:	mov    dl,0x43
 1002e1e:	push   rcx
 1002e1f:	(bad)  
 1002e20:	ins    BYTE PTR es:[rdi],dx
 1002e21:	sbb    ebp,DWORD PTR [rax-0x2f8d35b9]
 1002e27:	rex.X mov edi,0xa9c36d1f
 1002e2d:	mov    esp,0xf64e9d76
 1002e32:	mov    QWORD PTR [rcx+0xd],r10
 1002e36:	rex.W
 1002e37:	rex.RB lods eax,DWORD PTR ds:[rsi]
 1002e39:	cwde   
 1002e3a:	or     esi,DWORD PTR [rsp+rcx*8+0x238444a7]
 1002e41:	mov    ebp,0xb9796c5d
 1002e46:	or     cl,BYTE PTR [rax-0x7e]
 1002e49:	(bad)  
 1002e4a:	je     0x1002dda
 1002e4c:	cmc    
 1002e4d:	test   al,0x99
 1002e4f:	adc    DWORD PTR [rdx+rcx*4-0x27687e54],0x90a24c3e
 1002e5a:	in     ax,0x75
 1002e5d:	in     al,0xd4
 1002e5f:	sub    BYTE PTR [rdi-0x13],bl
 1002e62:	retf   0x1174
 1002e65:	rex.RXB ins DWORD PTR es:[rdi],dx
 1002e67:	rex.X mov bpl,BYTE PTR [rax-0x3decb300]
 1002e6e:	rex.WR jmp 0x1002e2b
 1002e71:	(bad)  
 1002e72:	sub    cl,BYTE PTR [rdx+0x4aac91da]
 1002e78:	lahf   
 1002e79:	sbb    DWORD PTR [rbx-0x6],esi
 1002e7c:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1002e7d:	leave  
 1002e7e:	jns    0x1002e0a
 1002e80:	sub    al,BYTE PTR [rsi-0x40]
 1002e83:	add    ebp,esp
 1002e85:	outs   dx,BYTE PTR ds:[rsi]
 1002e86:	je     0x1002ed4
 1002e88:	lea    ebx,[rdi]
 1002e8a:	mov    esi,0x34493a69
 1002e8f:	(bad)  
 1002e90:	lods   eax,DWORD PTR ds:[rsi]
 1002e91:	rex.X or ecx,edx
 1002e94:	adc    dh,BYTE PTR [rax]
 1002e96:	rex.R
 1002e97:	rex.WRX mov sil,0x2e
 1002e9a:	xchg   ecx,eax
 1002e9b:	xlat   BYTE PTR ds:[rbx]
 1002e9c:	int3   
 1002e9d:	adc    al,0xca
 1002e9f:	imul   ebp,DWORD PTR [esi+0x73],0x69706174
 1002ea7:	xor    DWORD PTR [rcx],esi
 1002ea9:	xor    BYTE PTR [rsi],ch
 1002eab:	fs ins BYTE PTR es:[rdi],dx
 1002ead:	ins    BYTE PTR es:[rdi],dx
 1002eae:	add    BYTE PTR [rax],al
 1002eb0:	cmp    eax,DWORD PTR [rax]
 1002eb2:	add    BYTE PTR [rax],al
 1002eb4:	add    BYTE PTR [rax],al
 1002eb6:	add    BYTE PTR [rax],al
 1002eb8:	push   rax
 1002eb9:	add    BYTE PTR [rcx+0x0],ah
 1002ebc:	je     0x1002ebe
 1002ebe:	push   0x0
 1002ec3:	add    BYTE PTR [rax],al
 1002ec5:	add    BYTE PTR [rax],al
 1002ec7:	add    BYTE PTR [rdi+0x65],al
 1002eca:	je     0x1002f10
 1002ecc:	ins    BYTE PTR es:[rdi],dx
 1002ecd:	ins    BYTE PTR es:[rdi],dx
 1002ece:	imul   r14d,DWORD PTR [rdx+0x65],0x726f7463
 1002ed6:	jns    0x1002f2f
	...
 1002ee0:	push   rbx
 1002ee1:	gs je  0x1002f28
 1002ee4:	ins    BYTE PTR es:[rdi],dx
 1002ee5:	ins    BYTE PTR es:[rdi],dx
 1002ee6:	imul   r14d,DWORD PTR [rdx+0x65],0x726f7463
 1002eee:	jns    0x1002f47
	...
 1002ef8:	imul   eax,DWORD PTR [rax],0x65
 1002efb:	add    BYTE PTR [rdx+0x0],dh
 1002efe:	outs   dx,BYTE PTR ds:[rsi]
 1002eff:	add    BYTE PTR [rbp+0x0],ah
 1002f02:	ins    BYTE PTR es:[rdi],dx
 1002f03:	add    BYTE PTR [rbx],dh
 1002f05:	add    BYTE PTR [rdx],dh
 1002f07:	add    BYTE PTR [rsi],ch
 1002f09:	add    BYTE PTR [rax+rax*1+0x6c],ah
 1002f0d:	add    BYTE PTR [rax+rax*1+0x0],ch
 1002f11:	add    BYTE PTR [rax],al
 1002f13:	add    BYTE PTR [rax],al
 1002f15:	add    BYTE PTR [rax],al
 1002f17:	add    BYTE PTR [rbx+0x0],dl
 1002f1a:	push   0x72006100
 1002f1f:	add    BYTE PTR [rbp+0x0],ah
 1002f22:	add    BYTE PTR fs:[rbx+0x0],al
 1002f26:	outs   dx,DWORD PTR ds:[rsi]
 1002f27:	add    BYTE PTR [rax+rax*1+0x65],ah
 1002f2b:	add    BYTE PTR [rax],al
 1002f2d:	add    BYTE PTR [rax],al
 1002f2f:	add    BYTE PTR [rbx+0x0],dl
 1002f32:	outs   dx,DWORD PTR ds:[rsi]
 1002f33:	add    BYTE PTR [rsi+0x0],ah
 1002f36:	je     0x1002f38
 1002f38:	ja     0x1002f3a
 1002f3a:	(bad)  
 1002f3b:	add    BYTE PTR [rdx+0x0],dh
 1002f3e:	add    BYTE PTR gs:[rax+rax*1+0x4d],bl
 1002f43:	add    BYTE PTR [rcx+0x0],ch
 1002f46:	movsxd eax,DWORD PTR [rax]
 1002f48:	jb     0x1002f4a
 1002f4a:	outs   dx,DWORD PTR ds:[rsi]
 1002f4b:	add    BYTE PTR [rbx+0x0],dh
 1002f4e:	outs   dx,DWORD PTR ds:[rsi]
 1002f4f:	add    BYTE PTR [rsi+0x0],ah
 1002f52:	je     0x1002f54
 1002f54:	pop    rsp
 1002f55:	add    BYTE PTR [rbp+0x0],cl
 1002f58:	imul   eax,DWORD PTR [rax],0x720063
 1002f5e:	outs   dx,DWORD PTR ds:[rsi]
 1002f5f:	add    BYTE PTR [rbx+0x0],dh
 1002f62:	outs   dx,DWORD PTR ds:[rsi]
 1002f63:	add    BYTE PTR [rsi+0x0],ah
 1002f66:	je     0x1002f68
 1002f68:	and    BYTE PTR [rax],al
 1002f6a:	push   rbx
 1002f6b:	add    BYTE PTR [rcx+0x0],dl
 1002f6e:	rex.WR add BYTE PTR [rax],r12b
 1002f71:	add    BYTE PTR [rbx+0x0],dl
 1002f74:	add    BYTE PTR gs:[rdx+0x0],dh
 1002f78:	jbe    0x1002f7a
 1002f7a:	add    BYTE PTR gs:[rdx+0x0],dh
 1002f7e:	pop    rsp
 1002f7f:	add    BYTE PTR [rcx],dh
 1002f81:	add    BYTE PTR [rcx],dh
 1002f83:	add    BYTE PTR [rax],dh
 1002f85:	add    BYTE PTR [rax],al
 1002f87:	add    BYTE PTR [rip+0x64007e00],ah        # 0x6500ad8d
 1002f8d:	add    BYTE PTR [rax+0x0],dh
 1002f90:	and    eax,0xff000000
 1002f95:	inc    DWORD PTR [rax]
 1002f97:	add    BYTE PTR [rsi],ch
 1002f99:	add    BYTE PTR [rbp+0x0],ah
 1002f9c:	js     0x1002f9e
 1002f9e:	je     0x1002fa0
	...
 1002fa8:	ins    DWORD PTR es:[rdi],dx
 1002fa9:	add    BYTE PTR [rbx+0x0],dh
 1002fac:	ins    DWORD PTR es:[rdi],dx
 1002fad:	add    BYTE PTR [rax+rax*1+0x73],ah
 1002fb1:	add    BYTE PTR [rdx+0x0],dh
 1002fb4:	jbe    0x1002fb6
 1002fb6:	add    BYTE PTR cs:[rbp+0x0],ah
 1002fba:	js     0x1002fbc
 1002fbc:	add    BYTE PTR gs:[rax],al
 1002fbf:	add    BYTE PTR [rax+0x0],cl
 1002fc2:	rex.WXB add BYTE PTR [r13+0x0],al
 1002fc6:	pop    rcx
 1002fc7:	add    BYTE PTR [rdi+0x0],bl
 1002fca:	rex.WR add BYTE PTR [rdi+0x0],r9b
 1002fce:	rex.XB add BYTE PTR [r9+0x0],al
 1002fd2:	rex.WR add BYTE PTR [rdi+0x0],r11b
 1002fd6:	rex.WRB add BYTE PTR [r9+0x0],r8b
 1002fda:	rex.XB add BYTE PTR [r8+0x0],cl
 1002fde:	rex.WB add BYTE PTR [r14+0x0],cl
 1002fe2:	add    BYTE PTR [r8+rax*1+0x53],r11b
 1002fe7:	add    BYTE PTR [rdi+0x0],cl
 1002fea:	add    BYTE PTR [rax+r8*1+0x57],r10b
 1002fef:	add    BYTE PTR [rcx+0x0],al
 1002ff2:	push   rdx
 1002ff3:	add    BYTE PTR [rbp+0x0],al
 1002ff6:	pop    rsp
 1002ff7:	add    BYTE PTR [rbp+0x0],cl
 1002ffa:	imul   eax,DWORD PTR [rax],0x720063
 1003000:	outs   dx,DWORD PTR ds:[rsi]
 1003001:	add    BYTE PTR [rbx+0x0],dh
 1003004:	outs   dx,DWORD PTR ds:[rsi]
 1003005:	add    BYTE PTR [rsi+0x0],ah
 1003008:	je     0x100300a
 100300a:	pop    rsp
 100300b:	add    BYTE PTR [rbp+0x0],cl
 100300e:	imul   eax,DWORD PTR [rax],0x720063
 1003014:	outs   dx,DWORD PTR ds:[rsi]
 1003015:	add    BYTE PTR [rbx+0x0],dh
 1003018:	outs   dx,DWORD PTR ds:[rsi]
 1003019:	add    BYTE PTR [rsi+0x0],ah
 100301c:	je     0x100301e
 100301e:	and    BYTE PTR [rax],al
 1003020:	push   rbx
 1003021:	add    BYTE PTR [rcx+0x0],dl
 1003024:	rex.WR add BYTE PTR [rax],r12b
 1003027:	add    BYTE PTR [rbx+0x0],dl
 100302a:	add    BYTE PTR gs:[rdx+0x0],dh
 100302e:	jbe    0x1003030
 1003030:	add    BYTE PTR gs:[rdx+0x0],dh
 1003034:	pop    rsp
 1003035:	add    BYTE PTR [rcx+0x0],cl
 1003038:	outs   dx,BYTE PTR ds:[rsi]
 1003039:	add    BYTE PTR [rbx+0x0],dh
 100303c:	je     0x100303e
 100303e:	(bad)  
 100303f:	add    BYTE PTR [rsi+0x0],ch
 1003042:	movsxd eax,DWORD PTR [rax]
 1003044:	add    BYTE PTR gs:[rax],ah
 1003047:	add    BYTE PTR [rsi+0x0],cl
 100304a:	(bad)  
 100304b:	add    BYTE PTR [rbp+0x0],ch
 100304e:	add    BYTE PTR gs:[rbx+0x0],dh
 1003052:	pop    rsp
 1003053:	add    BYTE PTR [rbx+0x0],dl
 1003056:	push   rcx
 1003057:	add    BYTE PTR [rax+rax*1+0x0],cl
 100305b:	add    BYTE PTR [rax],al
 100305d:	add    BYTE PTR [rax],al
 100305f:	add    BYTE PTR [rip+0x51005300],ah        # 0x52008365
 1003065:	add    BYTE PTR [rax+rax*1+0x53],cl
 1003069:	add    BYTE PTR [rbp+0x0],al
 100306c:	push   rdx
 100306d:	add    BYTE PTR [rsi+0x0],dl
 1003070:	push   rdx
 1003071:	add    BYTE PTR [rdi+0x0],bl
 1003074:	rex.WB add BYTE PTR [r14+0x0],cl
 1003078:	push   rbx
 1003079:	add    BYTE PTR [rax+rax*1+0x4e],dl
 100307d:	add    BYTE PTR [rcx+0x0],al
 1003080:	rex.WRB add BYTE PTR [r13+0x0],r8b
 1003084:	and    eax,0x69000000
 1003089:	add    BYTE PTR [rsi+0x0],ch
 100308c:	imul   eax,DWORD PTR [rax],0x730000
 1003092:	jno    0x1003094
 1003094:	ins    BYTE PTR es:[rdi],dx
 1003095:	add    BYTE PTR [rbx+0x0],dh
 1003098:	add    BYTE PTR gs:[rdx+0x0],dh
 100309c:	jbe    0x100309e
 100309e:	jb     0x10030a0
 10030a0:	add    BYTE PTR cs:[rcx+0x0],ch
 10030a4:	outs   dx,BYTE PTR ds:[rsi]
 10030a5:	add    BYTE PTR [rcx+0x0],ch
	...
 10030b0:	rex.W add BYTE PTR [rbx+0x0],cl
 10030b4:	add    BYTE PTR [r9+0x0],r11b
 10030b8:	pop    rdi
 10030b9:	add    BYTE PTR [rbx+0x0],al
 10030bc:	rex.WR add BYTE PTR [rcx+0x0],r8b
 10030c0:	push   rbx
 10030c1:	add    BYTE PTR [rbx+0x0],dl
 10030c4:	add    BYTE PTR [r11+0x0],r10b
 10030c8:	pop    rdi
 10030c9:	add    BYTE PTR [rdx+0x0],dl
 10030cc:	rex.WRXB add BYTE PTR [r15+0x0],r9b
 10030d0:	push   rsp
 10030d1:	add    BYTE PTR [rax],al
 10030d3:	add    BYTE PTR [rax],al
 10030d5:	add    BYTE PTR [rax],al
 10030d7:	add    BYTE PTR [rax+0x0],cl
 10030da:	rex.WXB add BYTE PTR [r13+0x0],al
 10030de:	pop    rcx
 10030df:	add    BYTE PTR [rdi+0x0],bl
 10030e2:	rex.XB add BYTE PTR [r13+0x0],dl
 10030e6:	push   rdx
 10030e7:	add    BYTE PTR [rdx+0x0],dl
 10030ea:	add    BYTE PTR [r14+0x0],r9b
 10030ee:	push   rsp
 10030ef:	add    BYTE PTR [rdi+0x0],bl
 10030f2:	push   rbp
 10030f3:	add    BYTE PTR [rbx+0x0],dl
 10030f6:	add    BYTE PTR [r10+0x0],r10b
 10030fa:	add    BYTE PTR [rax],al
 10030fc:	add    BYTE PTR [rax],al
 10030fe:	add    BYTE PTR [rax],al
 1003100:	rex.W add BYTE PTR [rbx+0x0],cl
 1003104:	add    BYTE PTR [r9+0x0],r11b
 1003108:	pop    rdi
 1003109:	add    BYTE PTR [rax+rax*1+0x4f],cl
 100310d:	add    BYTE PTR [rbx+0x0],al
 1003110:	add    BYTE PTR [r8+rax*1+0x5f],cl
 1003115:	add    BYTE PTR [rbp+0x0],cl
 1003118:	add    BYTE PTR [r11+0x0],al
 100311c:	rex.W add BYTE PTR [rcx+0x0],cl
 1003120:	rex.WRX add BYTE PTR [rbp+0x0],r8b
 1003124:	add    BYTE PTR [rax],al
 1003126:	add    BYTE PTR [rax],al
 1003128:	rex.W add BYTE PTR [rbx+0x0],cl
 100312c:	add    BYTE PTR [r9+0x0],r11b
 1003130:	pop    rdi
 1003131:	add    BYTE PTR [rbp+0x0],dl
 1003134:	push   rbx
 1003135:	add    BYTE PTR [rbp+0x0],al
 1003138:	push   rdx
 1003139:	add    BYTE PTR [rbx+0x0],dl
 100313c:	add    BYTE PTR [rax],al
 100313e:	add    BYTE PTR [rax],al
 1003140:	rex.W add BYTE PTR [rbx+0x0],cl
 1003144:	add    BYTE PTR [r9+0x0],r11b
 1003148:	pop    rdi
 1003149:	add    BYTE PTR [rax+0x0],dl
 100314c:	add    BYTE PTR [r10+0x0],r10b
 1003150:	rex.RX add BYTE PTR [rdi+0x0],r9b
 1003154:	push   rdx
 1003155:	add    BYTE PTR [rbp+0x0],cl
 1003158:	add    BYTE PTR [r14+0x0],cl
 100315c:	rex.XB add BYTE PTR [r13+0x0],al
 1003160:	pop    rdi
 1003161:	add    BYTE PTR [rax+rax*1+0x41],al
 1003165:	add    BYTE PTR [rax+rax*1+0x41],dl
 1003169:	add    BYTE PTR [rax],al
 100316b:	add    BYTE PTR [rax],al
 100316d:	add    BYTE PTR [rax],al
 100316f:	add    BYTE PTR [rax+0x0],cl
 1003172:	rex.WXB add BYTE PTR [r13+0x0],al
 1003176:	pop    rcx
 1003177:	add    BYTE PTR [rdi+0x0],bl
 100317a:	rex.XB add BYTE PTR [r13+0x0],dl
 100317e:	push   rdx
 100317f:	add    BYTE PTR [rdx+0x0],dl
 1003182:	add    BYTE PTR [r14+0x0],r9b
 1003186:	push   rsp
 1003187:	add    BYTE PTR [rdi+0x0],bl
 100318a:	rex.XB add BYTE PTR [r15+0x0],cl
 100318e:	rex.WRX add BYTE PTR [rsi+0x0],r8b
 1003192:	rex.WB add BYTE PTR [r15+0x0],al
 1003196:	add    BYTE PTR [rax],al
 1003198:	rex.W add BYTE PTR [rbx+0x0],cl
 100319c:	add    BYTE PTR [r9+0x0],r11b
 10031a0:	pop    rdi
 10031a1:	add    BYTE PTR [rax+rax*1+0x59],al
 10031a5:	add    BYTE PTR [rsi+0x0],cl
 10031a8:	pop    rdi
 10031a9:	add    BYTE PTR [rax+rax*1+0x41],al
 10031ad:	add    BYTE PTR [rax+rax*1+0x41],dl
 10031b1:	add    BYTE PTR [rax],al
 10031b3:	add    BYTE PTR [rax+0x0],al
 10031b6:	add    BYTE PTR [rax],al
 10031b8:	add    BYTE PTR fs:[rdi+0x0],dh
 10031bc:	outs   dx,DWORD PTR ds:[rsi]
 10031bd:	add    BYTE PTR [rdx+0x0],dh
 10031c0:	add    BYTE PTR fs:[rdx],bh
 10031c3:	add    BYTE PTR [rip+0x38003000],ah        # 0x390061c9
 10031c9:	add    BYTE PTR [rax+0x0],bh
 10031cc:	add    BYTE PTR [rax],al
 10031ce:	add    BYTE PTR [rax],al
 10031d0:	push   0x78006500
 10031d5:	add    BYTE PTR [rdx],bh
	...
 10031df:	add    BYTE PTR [rax+0x0],ch
 10031e2:	add    BYTE PTR gs:[rax+0x0],bh
 10031e6:	sub    BYTE PTR [rax],al
	...
 10031f0:	and    eax,0x29006400
 10031f5:	add    BYTE PTR [rdx],bh
	...
 10031ff:	add    BYTE PTR [rip+0x38003000],ah        # 0x39006205
 1003205:	add    BYTE PTR [rax+0x0],bh
	...
 1003220:	push   rbx
 1003221:	add    BYTE PTR [rdi+0x0],cl
 1003224:	add    BYTE PTR [rax+r8*1+0x57],r10b
 1003229:	add    BYTE PTR [rcx+0x0],al
 100322c:	push   rdx
 100322d:	add    BYTE PTR [rbp+0x0],al
 1003230:	pop    rsp
 1003231:	add    BYTE PTR [rbp+0x0],cl
 1003234:	imul   eax,DWORD PTR [rax],0x720063
 100323a:	outs   dx,DWORD PTR ds:[rsi]
 100323b:	add    BYTE PTR [rbx+0x0],dh
 100323e:	outs   dx,DWORD PTR ds:[rsi]
 100323f:	add    BYTE PTR [rsi+0x0],ah
 1003242:	je     0x1003244
 1003244:	pop    rsp
 1003245:	add    BYTE PTR [rbp+0x0],cl
 1003248:	imul   eax,DWORD PTR [rax],0x720063
 100324e:	outs   dx,DWORD PTR ds:[rsi]
 100324f:	add    BYTE PTR [rbx+0x0],dh
 1003252:	outs   dx,DWORD PTR ds:[rsi]
 1003253:	add    BYTE PTR [rsi+0x0],ah
 1003256:	je     0x1003258
 1003258:	and    BYTE PTR [rax],al
 100325a:	push   rbx
 100325b:	add    BYTE PTR [rcx+0x0],dl
 100325e:	rex.WR add BYTE PTR [rax],r12b
 1003261:	add    BYTE PTR [rbx+0x0],dl
 1003264:	add    BYTE PTR gs:[rdx+0x0],dh
 1003268:	jbe    0x100326a
 100326a:	add    BYTE PTR gs:[rdx+0x0],dh
 100326e:	pop    rsp
 100326f:	add    BYTE PTR [rcx],dh
 1003271:	add    BYTE PTR [rcx],dh
 1003273:	add    BYTE PTR [rax],dh
 1003275:	add    BYTE PTR [rax],al
 1003277:	add    BYTE PTR [rbx+0x0],dl
 100327a:	push   rcx
 100327b:	add    BYTE PTR [rax+rax*1+0x44],cl
 100327f:	add    BYTE PTR [rbp+0x0],dl
 1003282:	rex.WRB add BYTE PTR [r8+0x0],r10b
 1003286:	add    BYTE PTR [r10+0x0],r10b
 100328a:	add    BYTE PTR cs:[rbp+0x0],al
 100328e:	pop    rax
 100328f:	add    BYTE PTR [rbp+0x0],al
 1003292:	add    BYTE PTR [rax],al
 1003294:	add    BYTE PTR [rax],al
 1003296:	add    BYTE PTR [rax],al
 1003298:	ja     0x1003286
 100329a:	enter  0x7bf4,0x7d
 100329e:	mov    ecx,0x42cd8c4d
 10032a3:	rex (bad) 
 10032a5:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 10032a6:	pop    rdx
 10032a7:	stc    
 10032a8:	and    eax,0x73006c00
 10032ad:	add    BYTE PTR [rax+rax*1+0x25],bl
 10032b1:	add    BYTE PTR [rax+rax*1+0x73],ch
	...
 10032bd:	add    BYTE PTR [rax],al
 10032bf:	add    al,dh
 10032c1:	lahf   
 10032c2:	add    BYTE PTR [rcx],al
 10032c4:	add    BYTE PTR [rax],al
 10032c6:	add    BYTE PTR [rax],al
 10032c8:	nop
 10032c9:	movabs al,ds:0xa0a0000000000100
 10032d2:	add    BYTE PTR [rcx],al
 10032d4:	add    BYTE PTR [rax],al
 10032d6:	add    BYTE PTR [rax],al
 10032d8:	loopne 0x1003285
 10032da:	add    BYTE PTR [rcx],al
 10032dc:	add    BYTE PTR [rax],al
 10032de:	add    BYTE PTR [rax],al
 10032e0:	nop
 10032e1:	lahf   
 10032e2:	add    BYTE PTR [rcx],al
 10032e4:	add    BYTE PTR [rax],al
 10032e6:	add    BYTE PTR [rax],al
 10032e8:	shl    BYTE PTR [rdi+0x100],0x0
 10032ef:	add    BYTE PTR [rax-0x52],dl
 10032f2:	add    BYTE PTR [rcx],al
 10032f4:	add    BYTE PTR [rax],al
 10032f6:	add    BYTE PTR [rax],al
 10032f8:	movabs ds:0xa0b0000000000100,al
 1003302:	add    BYTE PTR [rcx],al
 1003304:	add    BYTE PTR [rax],al
 1003306:	add    BYTE PTR [rax],al
 1003308:	lock movabs al,ds:0xa6f0000000000100
 1003312:	add    BYTE PTR [rcx],al
	...
 1003324:	xchg   esi,eax
 1003325:	xor    BYTE PTR [rdi],al
 1003327:	ja     0x1003355
 1003329:	(bad)  
 100332a:	(bad)  
 100332b:	out    dx,al
 100332c:	mov    edx,0x19990951
 1003331:	(bad)  
 1003332:	ins    DWORD PTR es:[rdi],dx
 1003333:	(bad)  
 1003334:	(bad)  
 1003335:	hlt    
 1003336:	push   0x70
 1003338:	xor    eax,0xa3e963a5
 100333d:	xchg   ebp,eax
 100333e:	fs sahf 
 1003340:	xor    cl,BYTE PTR [rax-0x475bf125]
 1003346:	fdivr  QWORD PTR [rcx+0x1e]
 1003349:	jmp    0xffffffffda891423
 100334e:	rcl    BYTE PTR [rdi+0x9b64c2b],cl
 1003354:	mov    ebp,0x77eb17c
 1003359:	sub    eax,0x1d91e7b8
 100335e:	mov    edi,0xb7106490
 1003363:	sbb    eax,0x6ab020f2
 1003368:	rex.W jno 0x1003324
 100336b:	repz fiadd WORD PTR [rcx-0x42]
 100336f:	test   BYTE PTR [rbp-0x2c],bh
 1003372:	ficomp DWORD PTR [rdx]
 1003374:	jmp    0x100335a
 1003376:	(bad)  [rbp+0x51]
 1003379:	mov    ch,0xd4
 100337b:	hlt    
 100337c:	mov    DWORD PTR [rbp-0x67a97c2d],0xa8c0136c
 1003386:	imul   esp,DWORD PTR [rdx+rdi*2-0x7],0x62
 100338b:	std    
 100338c:	in     al,dx
 100338d:	leave  
 100338e:	mov    cl,BYTE PTR gs:[rdi+0x5c]
 1003392:	add    DWORD PTR [rcx+rbx*8],edx
 1003395:	ins    BYTE PTR es:[rdi],dx
 1003396:	(bad)  
 1003397:	movsxd esp,DWORD PTR [rbx+0x3d]
 100339a:	psubd  mm6,mm5
 100339d:	or     eax,0x20c88d08
 10033a2:	outs   dx,BYTE PTR ds:[rsi]
 10033a3:	cmp    ebx,DWORD PTR [rsi+0x10]
 10033a6:	imul   ecx,DWORD PTR [rsp+riz*8+0x41],0x7172d560
 10033ae:	addr32 mov ds:0x3c03e4d1,al
 10033b4:	rex.RXB (bad) 
 10033b6:	add    al,0x4b
 10033b8:	std    
 10033b9:	test   DWORD PTR [rip+0xab56bd2],ecx        # 0xbb59f91
 10033bf:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 10033c0:	cli    
 10033c1:	test   al,0xb5
 10033c3:	xor    eax,0x42b2986c
 10033c8:	(bad)  
 10033c9:	leave  
 10033ca:	mov    ebx,0xbcf940db
 10033cf:	lods   al,BYTE PTR ds:[rsi]
 10033d0:	jrcxz  0x100343e
 10033d2:	fdiv   DWORD PTR [rdx]
 10033d4:	jne    0x1003432
 10033d6:	fild   WORD PTR [rbp-0x31]
 10033d9:	or     eax,0x3d59dcd6
 10033de:	shr    DWORD PTR [rbx+0x26d930ac],1
 10033e4:	cmp    al,BYTE PTR [rax]
 10033e6:	ficom  WORD PTR [rcx-0x80]
 10033e9:	push   rcx
 10033ea:	xlat   BYTE PTR ds:[rbx]
 10033eb:	enter  0x6116,0xd0
 10033ef:	mov    edi,0x21b4f4b5
 10033f4:	and    eax,esp
 10033f6:	mov    bl,0x56
 10033f8:	cdq    
 10033f9:	xchg   ebp,eax
 10033fa:	mov    edx,0xbda50fcf
 10033ff:	mov    eax,0x2802b89e
 1003404:	or     BYTE PTR [rax-0x264da0fb],cl
 100340a:	or     al,0xc6
 100340c:	and    al,0xe9
 100340e:	or     esi,DWORD PTR [rcx+0x2f6f7c87]
 1003414:	adc    DWORD PTR [rax+rbp*2+0x58],ecx
 1003418:	stos   DWORD PTR es:[rdi],eax
 1003419:	sbb    eax,0x2d3dc161
 100341e:	data16 mov dh,0x90
 1003421:	fdiv   QWORD PTR [r14+0x6]
 1003425:	jno    0x1003402
 1003427:	add    DWORD PTR [rax+riz*1+0x102a98d2],edi
 100342e:	(bad)  
 100342f:	out    dx,eax
 1003430:	mov    DWORD PTR [rbp-0x4ae08e4f],eax
 1003436:	mov    dh,0x6
 1003438:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1003439:	in     al,0xbf
 100343b:	lahf   
 100343c:	xor    edx,esp
 100343e:	mov    eax,0x7c9a2e8
 1003443:	js     0x1003479
 1003445:	stc    
 1003446:	add    BYTE PTR [rdi],cl
 1003448:	mov    gs,WORD PTR [rax-0x67e769f7]
 100344e:	(bad)  
 100344f:	loope  0x100340c
 1003451:	or     eax,0x3d2d7f6a
 1003456:	ins    DWORD PTR es:[rdi],dx
 1003457:	or     BYTE PTR [rdi+0x191646c],dl
 100345d:	pop    rsp
 100345e:	movsxd esp,esi
 1003460:	hlt    
 1003461:	push   rcx
 1003462:	imul   ebp,DWORD PTR [rbx+0x62],0x61
 1003466:	ins    BYTE PTR es:[rdi],dx
 1003467:	sbb    al,0xd8
 1003469:	xor    BYTE PTR [rbp-0x7b],ah
 100346c:	rex.WRX add BYTE PTR [rdx-0xe],r12b
 1003470:	in     eax,dx
 1003471:	xchg   ebp,eax
 1003472:	(bad)  
 1003473:	ins    BYTE PTR es:[rdi],dx
 1003474:	jnp    0x100341b
 1003476:	add    DWORD PTR [rbx],ebx
 1003478:	shl    esp,0x8
 100347b:	(bad)  
 100347c:	push   rdi
 100347d:	(bad)  
 100347e:	pmaddwd mm0,mm6
 1003481:	fnstenv [rax-0x4816af9b]
 1003487:	adc    ch,dl
 1003489:	mov    eax,0x887c8bbe
 100348e:	mov    ecx,0xdd1ddffc
 1003493:	(bad)  
 1003494:	rex.WB sub rax,0x7cf315da
 100349a:	ror    DWORD PTR [rbp+riz*2+0x58fbd44c],cl
 10034a1:	(bad)  
 10034a2:	mov    dl,0x4d
 10034a4:	(bad)  
 10034a5:	push   rcx
 10034a6:	mov    ch,0x3a
 10034a8:	je     0x10034aa
 10034aa:	mov    esp,0xbb30e2a3
 10034af:	(bad)  
 10034b0:	rex.B movs DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 10034b2:	fisttp WORD PTR [rdx-0x29]
 10034b5:	xchg   ebp,eax
 10034b6:	fdivr  DWORD PTR [rip+0xffffffffa4d1c46d]        # 0xffffffffa5d1f929
 10034bc:	sti    
 10034bd:	hlt    
 10034be:	(bad)  
 10034bf:	shr    DWORD PTR [rdx-0x17],cl
 10034c2:	imul   eax,DWORD PTR [rbx-0x4],0x46346ed9
 10034c9:	mov    BYTE PTR [rdi-0x53],ah
 10034cc:	sar    BYTE PTR [rax+0x2d73da60],1
 10034d2:	add    al,0x44
 10034d4:	in     eax,0x1d
 10034d6:	add    esi,DWORD PTR [rbx]
 10034d8:	pop    rdi
 10034d9:	rex.WR or r13b,BYTE PTR [rdx-0x22f28337]
 10034e0:	cmp    al,0x71
 10034e2:	add    eax,0x241aa50
 10034e7:	(bad)  
 10034e8:	adc    BYTE PTR [rax],dl
 10034ea:	or     edi,DWORD PTR [rsi-0x36f3df7a]
 10034f0:	and    eax,0xb35768b5
 10034f5:	test   DWORD PTR [rdi+0x20],ebp
 10034f8:	or     esp,edx
 10034fa:	mov    cx,0xe49f
 10034fe:	(bad)  
 10034ff:	(bad)  
 1003500:	(bad)  
 1003501:	stc    
 1003502:	ficomp WORD PTR [rsi-0x68]
 1003505:	leave  
 1003506:	fldcw  WORD PTR [rcx]
 1003508:	and    bl,BYTE PTR [rax-0x574b4f30]
 100350e:	xlat   BYTE PTR ds:[rbx]
 100350f:	(bad)  
 1003510:	(bad)  
 1003511:	cmp    eax,0xd8159b3
 1003516:	mov    ah,0x2e
 1003518:	cmp    ebx,DWORD PTR [rbp+rdi*4-0x49]
 100351c:	lods   eax,DWORD PTR ds:[rsi]
 100351d:	ins    BYTE PTR es:[rdi],dx
 100351e:	mov    edx,0xb88320c0
 1003523:	in     eax,dx
 1003524:	mov    dh,0xb3
 1003526:	mov    edi,0xb6e20c9a
 100352b:	add    ebx,DWORD PTR [rdx+0x3974b1d2]
 1003531:	rex.RXB (bad) 
 1003533:	(bad)  
 1003534:	scas   eax,DWORD PTR es:[rdi]
 1003535:	ja     0x1003509
 1003537:	popf   
 1003538:	adc    eax,0x8304db26
 100353d:	(bad)  
 100353e:	fdiv   QWORD PTR [rbx+0x12]
 1003541:	or     esp,DWORD PTR [rbx-0x1d]
 1003544:	test   BYTE PTR [rbx],bh
 1003546:	fs xchg esp,eax
 1003548:	ds push 0x6d
 100354b:	or     eax,0x7a6a5aa8
 1003550:	or     ecx,edi
 1003552:	(bad)  
 1003553:	in     al,0x9d
 1003555:	dec    DWORD PTR [rcx]
 1003557:	xchg   ebx,eax
 1003558:	(bad)  
 1003559:	scas   al,BYTE PTR es:[rdi]
 100355a:	add    BYTE PTR [rdx],cl
 100355c:	mov    cl,0x9e
 100355e:	(bad)  
 100355f:	jge    0x10035a5
 1003561:	xchg   ebx,eax
 1003562:	(bad)  
 1003564:	shl    BYTE PTR [rbx-0xd9778f8],cl
 100356a:	add    DWORD PTR [rsi],ebx
 100356c:	inc    dl
 100356e:	(bad)  
 100356f:	imul   ebx,DWORD PTR [rbp+0x57],0x67cbf762
 1003576:	xor    BYTE PTR gs:[rcx+0x36],0x6c
 100357b:	sbb    edi,esp
 100357d:	(bad)  
 100357e:	imul   ebp,DWORD PTR [rsi+0x76],0x1b
 1003582:	(bad)  
 1003583:	(bad)  
 1003584:	loopne 0x10035b1
 1003586:	ror    DWORD PTR [rcx+0x10da7a5a],cl
 100358c:	int3   
 100358d:	rex.WX frstor [rdi+0x6f]
 1003591:	fistp  QWORD PTR [rcx-0x41100607]
 1003597:	mov    es,WORD PTR [rbx-0x42]
 100359a:	mov    bh,0x17
 100359c:	(bad)  
 100359d:	mov    ?,WORD PTR [rax-0x295c17a0]
 10035a3:	(bad)  
 10035a4:	jle    0x1003539
 10035a6:	shl    DWORD PTR [rcx+0x38d8c2c4],1
 10035ac:	push   rdx
 10035ad:	repnz fisttp WORD PTR [rdi-0xf]
 10035b1:	addr32 mov ebx,0xbc5767d1
 10035b7:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 10035b8:	fld    QWORD PTR [rsi]
 10035ba:	mov    ch,0x3f
 10035bc:	rex.WXB
 10035bd:	ss mov dl,0x48
 10035c0:	fisubr DWORD PTR [rbx]
 10035c2:	or     eax,0xa1b4cd8
 10035c7:	scas   eax,DWORD PTR es:[rdi]
 10035c8:	test   BYTE PTR [rdx+0x3],0x36
 10035cc:	(bad)  
 10035cd:	jp     0x10035d3
 10035cf:	rex.B ret 
 10035d1:	out    dx,eax
 10035d2:	(bad)  
 10035d3:	fist   WORD PTR [rbp-0x21]
 10035d6:	addr32 test al,0xef
 10035d9:	mov    gs,WORD PTR [rsi+0x31]
 10035dc:	jns    0x100359c
 10035de:	imul   eax,DWORD PTR [rsi-0x74],0x1acb61b3
 10035e5:	and    DWORD PTR [rsi-0x44],0xffffffa0
 10035e9:	shr    BYTE PTR [rdi+0x25],cl
 10035ec:	ss loop 0x1003657
 10035ef:	push   rdx
 10035f0:	xchg   ebp,eax
 10035f1:	ja     0x10035ff
 10035f3:	int3   
 10035f4:	add    eax,DWORD PTR [rdi+0xb]
 10035f7:	mov    ebx,0x220216b9
 10035fc:	(bad)  
 10035fd:	es add eax,0xba3bbe55
 1003603:	(bad)
 1003606:	mov    ebp,0xb45a92b2
 100360b:	sub    eax,DWORD PTR [rdx+rbp*2]
 100360e:	mov    bl,0x5c
 1003610:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1003611:	call   rdi
 1003613:	ret    0xcf31
 1003616:	shl    BYTE PTR [rbp+0x2cd99e8b],1
 100361c:	sbb    eax,0xb05bdeae
 1003621:	ret    0x9b64
 1003624:	es repnz movsxd ebp,esp
 1003628:	pushf  
 1003629:	movabs ds:0x6a9026d930a756a,eax
 1003632:	or     DWORD PTR [rdi+rdi*1-0x7a14f1ca],ebx
 1003639:	addr32 (bad) 
 100363b:	jb     0x1003650
 100363d:	push   rdi
 100363e:	add    BYTE PTR [rip+0xffffffff95bf4a82],al        # 0xffffffff96bf80c6
 1003644:	adc    al,0x7a
 1003646:	mov    eax,0xb12baee2
 100364b:	jnp    0x1003685
 100364d:	sbb    esi,DWORD PTR [rsi-0x2d7164f4]
 1003653:	xchg   edx,eax
 1003654:	or     eax,0xb7e5d5be
 1003659:	out    dx,eax
 100365a:	fdivr  QWORD PTR [rcx+riz*1-0x21]
 100365e:	fisttp DWORD PTR [rbx]
 1003660:	(bad)  
 1003661:	rcl    bl,cl
 1003663:	xchg   BYTE PTR [rdx-0x1e],al
 1003666:	(bad)  
 1003667:	icebp  
 1003668:	clc    
 1003669:	mov    bl,0xdd
 100366b:	push   0x1fda836e
 1003670:	int    0x16
 1003672:	mov    esi,0xb9265b81
 1003677:	mul    cl
 1003679:	ja     0x100362b
 100367b:	outs   dx,DWORD PTR ds:[rsi]
 100367c:	ja     0x10036c5
 100367e:	mov    bh,0x18
 1003680:	out    0x5a,al
 1003682:	or     BYTE PTR [rax-0xf09590],cl
 1003688:	retf   0x63b
 100368b:	pop    sp
 100368d:	or     eax,DWORD PTR [rcx]
 100368f:	adc    edi,edi
 1003691:	sahf   
 1003692:	(bad)
 1003697:	clc    
 1003698:	sar    edi,cl
 100369a:	imul   esp,DWORD PTR [rcx+0x45],0xffffffcf
 100369e:	ins    BYTE PTR es:[rdi],dx
 100369f:	(bad)  
 10036a0:	js     0x1003684
 10036a2:	or     ah,BYTE PTR [rax-0x28f22d12]
 10036a8:	push   rsp
 10036a9:	add    DWORD PTR [rsi+rcx*2],0xffffffc2
 10036ad:	mov    bl,0x3
 10036af:	cmp    DWORD PTR [rcx+0x26],esp
 10036b2:	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
 10036b4:	not    DWORD PTR [rsi]
 10036b6:	(bad)  
 10036b7:	ror    BYTE PTR [rbp+0x47],1
 10036ba:	imul   ecx,DWORD PTR [rcx-0x25],0x4a3e6e77
 10036c1:	push   0xffffffffffffffd1
 10036c3:	scas   al,BYTE PTR es:[rdi]
 10036c4:	fcomp  QWORD PTR [rdx-0x2a]
 10036c7:	fldenv [rsi+0xb]
 10036ca:	fild   WORD PTR [rax-0x10]
 10036cd:	cmp    ebx,eax
 10036cf:	(bad)  
 10036d0:	push   rbx
 10036d1:	scas   al,BYTE PTR es:[rdi]
 10036d2:	mov    esp,0xbb9ec5a9
 10036d7:	fidivr WORD PTR [rdi-0x31]
 10036da:	mov    dl,0x47
 10036dc:	jmp    0x1d30ece0
 10036e1:	repnz mov ebp,0xbac28abd
 10036e7:	retf   0x9330
 10036ea:	mov    bl,0x53
 10036ec:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 10036ed:	movabs ds:0x693bad0360524b4,eax
 10036f6:	xlat   BYTE PTR ds:[rbx]
 10036f7:	int    0x29
 10036f9:	push   rdi
 10036fa:	ficom  WORD PTR [rdi+rdi*4+0x67]
 10036fe:	fldenv [rbx]
 1003700:	cs jp  0x1003769
 1003703:	mov    bl,0xb8
 1003705:	rex.WX (bad) 
 1003707:	(bad)
 100370b:	pop    rbp
 100370c:	xchg   esp,eax
 100370d:	sub    ebp,DWORD PTR [rdi+0x2a]
 1003710:	(bad)  
 1003711:	mov    esi,0x8ea1b40b
 1003716:	or     al,0xc3
 1003718:	sbb    ebx,edi
 100371a:	add    eax,0x2ef8d5a
 100371f:	sub    eax,0x72657551
 1003724:	jns    0x100377d
 1003726:	outs   dx,DWORD PTR ds:[rsi]
 1003727:	jb     0x1003794
 1003729:	imul   ebp,DWORD PTR [rsi+0x67],0x45746553
 1003730:	js     0x1003732
 1003732:	add    BYTE PTR [rax],al
 1003734:	add    BYTE PTR [rax],al
 1003736:	add    BYTE PTR [rax],al
 1003738:	jo     0x100373a
 100373a:	jae    0x100373c
 100373c:	(bad)  
 100373d:	add    BYTE PTR [rax+0x0],dh
 1003740:	imul   eax,DWORD PTR [rax],0x64002e
 1003746:	ins    BYTE PTR es:[rdi],dx
 1003747:	add    BYTE PTR [rax+rax*1+0x0],ch
	...
 1003757:	add    BYTE PTR [rbx+0x0],dl
 100375a:	push   rcx
 100375b:	add    BYTE PTR [rax+rax*1+0x44],cl
 100375f:	add    BYTE PTR [rbp+0x0],dl
 1003762:	rex.WRB add BYTE PTR [r8+0x0],r10b
 1003766:	add    BYTE PTR [r10+0x0],r10b
 100376a:	add    BYTE PTR cs:[rbp+0x0],al
 100376e:	pop    rax
 100376f:	add    BYTE PTR [rbp+0x0],al
 1003772:	add    BYTE PTR [rax],al
 1003774:	add    BYTE PTR [rax],al
 1003776:	add    BYTE PTR [rax],al
 1003778:	(bad)  
 1003779:	(bad)  
 100377a:	ret    
 100377b:	sbb    edx,DWORD PTR [rcx-0x61b65b7b]
 1003781:	movabs ds:0xe6b57640b44f,al
 100378a:	add    BYTE PTR [rax],al
 100378c:	add    BYTE PTR [rax],al
 100378e:	add    BYTE PTR [rax],al
 1003790:	add    BYTE PTR [rax],dl
 1003792:	add    BYTE PTR [rax],ah
 1003794:	add    BYTE PTR [rax],al
 1003796:	add    BYTE PTR [rax],al
 1003798:	sar    BYTE PTR [rcx],0x0
 100379b:	add    DWORD PTR [rax],eax
 100379d:	add    BYTE PTR [rax],al
 100379f:	add    BYTE PTR [rdx],al
 10037a1:	add    BYTE PTR [rax],al
 10037a3:	and    BYTE PTR [rax],al
 10037a5:	add    BYTE PTR [rax],al
 10037a7:	add    BYTE PTR [rax],dl
 10037a9:	cmp    al,BYTE PTR [rax]
 10037ab:	add    DWORD PTR [rax],eax
 10037ad:	add    BYTE PTR [rax],al
 10037af:	add    BYTE PTR [rax+rax*1],al
 10037b2:	add    BYTE PTR [rax],ah
 10037b4:	add    BYTE PTR [rax],al
 10037b6:	add    BYTE PTR [rax],al
 10037b8:	(bad)  
 10037b9:	cmp    al,BYTE PTR [rax]
 10037bb:	add    DWORD PTR [rax],eax
 10037bd:	add    BYTE PTR [rax],al
 10037bf:	add    BYTE PTR [rax],cl
 10037c1:	add    BYTE PTR [rax],al
 10037c3:	and    BYTE PTR [rax],al
 10037c5:	add    BYTE PTR [rax],al
 10037c7:	add    al,al
 10037c9:	cmp    al,BYTE PTR [rax]
 10037cb:	add    DWORD PTR [rax],eax
 10037cd:	add    BYTE PTR [rax],al
 10037cf:	add    BYTE PTR [rax],dl
 10037d1:	add    BYTE PTR [rax],al
 10037d3:	and    BYTE PTR [rax],al
 10037d5:	add    BYTE PTR [rax],al
 10037d7:	add    BYTE PTR [rax],dl
 10037d9:	cmp    eax,DWORD PTR [rax]
 10037db:	add    DWORD PTR [rax],eax
 10037dd:	add    BYTE PTR [rax],al
 10037df:	add    BYTE PTR [rax],ah
 10037e1:	add    BYTE PTR [rax],al
 10037e3:	and    BYTE PTR [rax],al
 10037e5:	add    BYTE PTR [rax],al
 10037e7:	add    BYTE PTR [rax+0x3b],dh
 10037ea:	add    BYTE PTR [rcx],al
 10037ec:	add    BYTE PTR [rax],al
 10037ee:	add    BYTE PTR [rax],al
 10037f0:	add    BYTE PTR [rax],al
 10037f3:	and    BYTE PTR [rax],al
 10037f5:	add    BYTE PTR [rax],al
 10037f7:	add    al,al
 10037f9:	cmp    eax,DWORD PTR [rax]
 10037fb:	add    DWORD PTR [rax],eax
 10037fd:	add    BYTE PTR [rax],al
 10037ff:	add    BYTE PTR [rax+0x200000],al
 1003805:	add    BYTE PTR [rax],al
 1003807:	add    BYTE PTR [rax],ah
 1003809:	cmp    al,0x0
 100380b:	add    DWORD PTR [rax],eax
 100380d:	add    BYTE PTR [rax],al
 100380f:	add    BYTE PTR [rax],al
 1003811:	add    DWORD PTR [rax],eax
 1003813:	and    BYTE PTR [rax],al
 1003815:	add    BYTE PTR [rax],al
 1003817:	add    BYTE PTR [rax+0x1003c],al
 100381d:	add    BYTE PTR [rax],al
 100381f:	add    BYTE PTR [rax],al
 1003821:	add    al,BYTE PTR [rax]
 1003823:	and    BYTE PTR [rax],al
 1003825:	add    BYTE PTR [rax],al
 1003827:	add    al,dl
 1003829:	cmp    al,0x0
 100382b:	add    DWORD PTR [rax],eax
 100382d:	add    BYTE PTR [rax],al
 100382f:	add    BYTE PTR [rax],al
 1003831:	add    al,0x0
 1003833:	and    BYTE PTR [rax],al
 1003835:	add    BYTE PTR [rax],al
 1003837:	add    BYTE PTR [rax],ah
 1003839:	cmp    eax,0x100
 100383e:	add    BYTE PTR [rax],al
 1003840:	add    BYTE PTR [rax],cl
 1003842:	add    BYTE PTR [rax],ah
 1003844:	add    BYTE PTR [rax],al
 1003846:	add    BYTE PTR [rax],al
 1003848:	cmp    BYTE PTR [rip+0x100],0x0        # 0x100394f
 100384f:	add    BYTE PTR [rax],al
 1003851:	and    BYTE PTR [rax],al
 1003853:	and    BYTE PTR [rax],al
 1003855:	add    BYTE PTR [rax],al
 1003857:	add    al,ah
 1003859:	cmp    eax,0x100
 100385e:	add    BYTE PTR [rax],al
 1003860:	add    BYTE PTR [rax+0x2000],al
 1003866:	add    BYTE PTR [rax],al
 1003868:	jo     0x10038a8
 100386a:	add    BYTE PTR [rcx],al
 100386c:	add    BYTE PTR [rax],al
 100386e:	add    BYTE PTR [rax],al
 1003870:	add    BYTE PTR [r10+0x0],r14b
 1003874:	jb     0x1003876
 1003876:	outs   dx,DWORD PTR ds:[rsi]
 1003877:	add    BYTE PTR [rdx+0x0],dh
 100387a:	and    BYTE PTR [rax],al
 100387c:	sub    eax,0x44002000
 1003881:	add    BYTE PTR [rbp+0x0],dh
 1003884:	ins    DWORD PTR es:[rdi],dx
 1003885:	add    BYTE PTR [rax+0x0],dh
 1003888:	imul   eax,DWORD PTR [rax],0x67006e
 100388e:	and    BYTE PTR [rax],al
 1003890:	jo     0x1003892
 1003892:	jb     0x1003894
 1003894:	outs   dx,DWORD PTR ds:[rsi]
 1003895:	add    BYTE PTR [rbx+0x0],ah
 1003898:	add    BYTE PTR gs:[rbx+0x0],dh
 100389c:	jae    0x100389e
 100389e:	and    BYTE PTR [rax],al
 10038a0:	ja     0x10038a2
 10038a2:	(bad)  
 10038a3:	add    BYTE PTR [rbx+0x0],dh
 10038a6:	and    BYTE PTR [rax],al
 10038a8:	outs   dx,BYTE PTR ds:[rsi]
 10038a9:	add    BYTE PTR [rdi+0x0],ch
 10038ac:	je     0x10038ae
 10038ae:	and    BYTE PTR [rax],al
 10038b0:	jae    0x10038b2
 10038b2:	je     0x10038b4
 10038b4:	(bad)  
 10038b5:	add    BYTE PTR [rdx+0x0],dh
 10038b8:	je     0x10038ba
 10038ba:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 10038bf:	add    BYTE PTR [rdi+0x0],ch
 10038c2:	jb     0x10038c4
 10038c4:	and    BYTE PTR [rax],al
 10038c6:	je     0x10038c8
 10038c8:	add    BYTE PTR gs:[rdx+0x0],dh
 10038cc:	ins    DWORD PTR es:[rdi],dx
 10038cd:	add    BYTE PTR [rcx+0x0],ch
 10038d0:	outs   dx,BYTE PTR ds:[rsi]
 10038d1:	add    BYTE PTR [rcx+0x0],ah
 10038d4:	je     0x10038d6
 10038d6:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 10038db:	add    BYTE PTR [rax+0x0],dh
 10038de:	jb     0x10038e0
 10038e0:	add    BYTE PTR gs:[rbp+0x0],ch
 10038e4:	(bad)  
 10038e5:	add    BYTE PTR [rax+rax*1+0x75],dh
 10038e9:	add    BYTE PTR [rdx+0x0],dh
 10038ec:	add    BYTE PTR gs:[rax+rax*1+0x79],ch
 10038f1:	add    BYTE PTR [rsi],ch
 10038f3:	add    BYTE PTR [rip+0xa00],cl        # 0x10042f9
 10038f9:	add    BYTE PTR [rax],al
 10038fb:	add    BYTE PTR [rax],al
 10038fd:	add    BYTE PTR [rax],al
 10038ff:	add    BYTE PTR [rbp+0x0],al
 1003902:	js     0x1003904
 1003904:	je     0x1003906
 1003906:	add    BYTE PTR gs:[rdx+0x0],dh
 100390a:	outs   dx,BYTE PTR ds:[rsi]
 100390b:	add    BYTE PTR [rcx+0x0],ah
 100390e:	ins    BYTE PTR es:[rdi],dx
 100390f:	add    BYTE PTR [rax],ah
 1003911:	add    BYTE PTR [rax+rax*1+0x75],ah
 1003915:	add    BYTE PTR [rbp+0x0],ch
 1003918:	jo     0x100391a
 100391a:	and    BYTE PTR [rax],al
 100391c:	jo     0x100391e
 100391e:	jb     0x1003920
 1003920:	outs   dx,DWORD PTR ds:[rsi]
 1003921:	add    BYTE PTR [rbx+0x0],ah
 1003924:	add    BYTE PTR gs:[rbx+0x0],dh
 1003928:	jae    0x100392a
 100392a:	and    BYTE PTR [rax],al
 100392c:	jb     0x100392e
 100392e:	add    BYTE PTR gs:[rax+rax*1+0x75],dh
 1003933:	add    BYTE PTR [rdx+0x0],dh
 1003936:	outs   dx,BYTE PTR ds:[rsi]
 1003937:	add    BYTE PTR [rbp+0x0],ah
 100393a:	add    BYTE PTR fs:[rax],ah
 100393d:	add    BYTE PTR [rsi+0x0],ch
 1003940:	outs   dx,DWORD PTR ds:[rsi]
 1003941:	add    BYTE PTR [rax],ah
 1003943:	add    BYTE PTR [rbp+0x0],ah
 1003946:	jb     0x1003948
 1003948:	jb     0x100394a
 100394a:	outs   dx,DWORD PTR ds:[rsi]
 100394b:	add    BYTE PTR [rdx+0x0],dh
 100394e:	jae    0x1003950
 1003950:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x1004357
	...
 100395f:	add    BYTE PTR [rbp+0x0],al
 1003962:	js     0x1003964
 1003964:	je     0x1003966
 1003966:	add    BYTE PTR gs:[rdx+0x0],dh
 100396a:	outs   dx,BYTE PTR ds:[rsi]
 100396b:	add    BYTE PTR [rcx+0x0],ah
 100396e:	ins    BYTE PTR es:[rdi],dx
 100396f:	add    BYTE PTR [rax],ah
 1003971:	add    BYTE PTR [rax+rax*1+0x75],ah
 1003975:	add    BYTE PTR [rbp+0x0],ch
 1003978:	jo     0x100397a
 100397a:	and    BYTE PTR [rax],al
 100397c:	jo     0x100397e
 100397e:	jb     0x1003980
 1003980:	outs   dx,DWORD PTR ds:[rsi]
 1003981:	add    BYTE PTR [rbx+0x0],ah
 1003984:	add    BYTE PTR gs:[rbx+0x0],dh
 1003988:	jae    0x100398a
 100398a:	and    BYTE PTR [rax],al
 100398c:	jb     0x100398e
 100398e:	add    BYTE PTR gs:[rax+rax*1+0x75],dh
 1003993:	add    BYTE PTR [rdx+0x0],dh
 1003996:	outs   dx,BYTE PTR ds:[rsi]
 1003997:	add    BYTE PTR [rax],ah
 1003999:	add    BYTE PTR [rbx+0x0],ah
 100399c:	outs   dx,DWORD PTR ds:[rsi]
 100399d:	add    BYTE PTR [rax+rax*1+0x65],ah
 10039a1:	add    BYTE PTR [rax],ah
 10039a3:	add    BYTE PTR [rax],dh
 10039a5:	add    BYTE PTR [rax+0x0],bh
 10039a8:	and    eax,0x2e007800
 10039ad:	add    BYTE PTR [rip+0xa00],cl        # 0x10043b3
	...
 10039bf:	add    BYTE PTR [rbp+0x0],al
 10039c2:	jb     0x10039c4
 10039c4:	jb     0x10039c6
 10039c6:	outs   dx,DWORD PTR ds:[rsi]
 10039c7:	add    BYTE PTR [rdx+0x0],dh
 10039ca:	and    BYTE PTR [rax],al
 10039cc:	sub    eax,0x49002000
 10039d1:	add    BYTE PTR [rsi+0x0],ch
 10039d4:	jo     0x10039d6
 10039d6:	jne    0x10039d8
 10039d8:	je     0x10039da
 10039da:	and    BYTE PTR [rax],al
 10039dc:	jo     0x10039de
 10039de:	(bad)  
 10039df:	add    BYTE PTR [rdx+0x0],dh
 10039e2:	(bad)  
 10039e3:	add    BYTE PTR [rbp+0x0],ch
 10039e6:	add    BYTE PTR gs:[rax+rax*1+0x65],dh
 10039eb:	add    BYTE PTR [rdx+0x0],dh
 10039ee:	jae    0x10039f0
 10039f0:	and    BYTE PTR [rax],al
 10039f2:	imul   eax,DWORD PTR [rax],0x76006e
 10039f8:	(bad)  
 10039f9:	add    BYTE PTR [rax+rax*1+0x69],ch
 10039fd:	add    BYTE PTR [rax+rax*1+0x2e],ah
 1003a01:	add    BYTE PTR [rip+0xa00],cl        # 0x1004407
	...
 1003a0f:	add    BYTE PTR [rbp+0x0],al
 1003a12:	jb     0x1003a14
 1003a14:	jb     0x1003a16
 1003a16:	outs   dx,DWORD PTR ds:[rsi]
 1003a17:	add    BYTE PTR [rdx+0x0],dh
 1003a1a:	and    BYTE PTR [rax],al
 1003a1c:	sub    eax,0x46002000
 1003a21:	add    BYTE PTR [rcx+0x0],ah
 1003a24:	imul   eax,DWORD PTR [rax],0x65006c
 1003a2a:	add    BYTE PTR fs:[rax],ah
 1003a2d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1003a31:	add    BYTE PTR [rax],ah
 1003a33:	add    BYTE PTR [rbx+0x0],ah
 1003a36:	jb     0x1003a38
 1003a38:	add    BYTE PTR gs:[rcx+0x0],ah
 1003a3c:	je     0x1003a3e
 1003a3e:	add    BYTE PTR gs:[rax],ah
 1003a41:	add    BYTE PTR [rax+rax*1+0x75],ah
 1003a45:	add    BYTE PTR [rbp+0x0],ch
 1003a48:	jo     0x1003a4a
 1003a4a:	and    BYTE PTR [rax],al
 1003a4c:	data16 add BYTE PTR [rcx+0x0],ch
 1003a50:	ins    BYTE PTR es:[rdi],dx
 1003a51:	add    BYTE PTR [rbp+0x0],ah
 1003a54:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x100445b
 1003a5b:	add    BYTE PTR [rax],al
 1003a5d:	add    BYTE PTR [rax],al
 1003a5f:	add    BYTE PTR [rbp+0x0],al
 1003a62:	jb     0x1003a64
 1003a64:	jb     0x1003a66
 1003a66:	outs   dx,DWORD PTR ds:[rsi]
 1003a67:	add    BYTE PTR [rdx+0x0],dh
 1003a6a:	and    BYTE PTR [rax],al
 1003a6c:	sub    eax,0x46002000
 1003a71:	add    BYTE PTR [rcx+0x0],ah
 1003a74:	imul   eax,DWORD PTR [rax],0x65006c
 1003a7a:	add    BYTE PTR fs:[rax],ah
 1003a7d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1003a81:	add    BYTE PTR [rax],ah
 1003a83:	add    BYTE PTR [rbx+0x0],ah
 1003a86:	jb     0x1003a88
 1003a88:	add    BYTE PTR gs:[rcx+0x0],ah
 1003a8c:	je     0x1003a8e
 1003a8e:	add    BYTE PTR gs:[rax],ah
 1003a91:	add    BYTE PTR [rbp+0x0],ch
 1003a94:	(bad)  
 1003a95:	add    BYTE PTR [rsi+0x0],ch
 1003a98:	imul   eax,DWORD PTR [rax],0x650066
 1003a9e:	jae    0x1003aa0
 1003aa0:	je     0x1003aa2
 1003aa2:	and    BYTE PTR [rax],al
 1003aa4:	data16 add BYTE PTR [rcx+0x0],ch
 1003aa8:	ins    BYTE PTR es:[rdi],dx
 1003aa9:	add    BYTE PTR [rbp+0x0],ah
 1003aac:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x10044b3
	...
 1003abf:	add    BYTE PTR [rbp+0x0],al
 1003ac2:	jb     0x1003ac4
 1003ac4:	jb     0x1003ac6
 1003ac6:	outs   dx,DWORD PTR ds:[rsi]
 1003ac7:	add    BYTE PTR [rdx+0x0],dh
 1003aca:	and    BYTE PTR [rax],al
 1003acc:	sub    eax,0x46002000
 1003ad1:	add    BYTE PTR [rcx+0x0],ah
 1003ad4:	imul   eax,DWORD PTR [rax],0x65006c
 1003ada:	add    BYTE PTR fs:[rax],ah
 1003add:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1003ae1:	add    BYTE PTR [rax],ah
 1003ae3:	add    BYTE PTR [rdi+0x0],ch
 1003ae6:	jo     0x1003ae8
 1003ae8:	add    BYTE PTR gs:[rsi+0x0],ch
 1003aec:	and    BYTE PTR [rax],al
 1003aee:	add    BYTE PTR fs:[rbp+0x0],ah
 1003af2:	(bad)  
 1003af3:	add    BYTE PTR [rbp+0x0],dh
 1003af6:	add    BYTE PTR [eax],ah
 1003af9:	add    BYTE PTR [rax+0x0],dh
 1003afc:	jb     0x1003afe
 1003afe:	outs   dx,DWORD PTR ds:[rsi]
 1003aff:	add    BYTE PTR [rbx+0x0],ah
 1003b02:	add    BYTE PTR gs:[rbx+0x0],dh
 1003b06:	jae    0x1003b08
 1003b08:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x100450f
 1003b0f:	add    BYTE PTR [rbp+0x0],al
 1003b12:	jb     0x1003b14
 1003b14:	jb     0x1003b16
 1003b16:	outs   dx,DWORD PTR ds:[rsi]
 1003b17:	add    BYTE PTR [rdx+0x0],dh
 1003b1a:	and    BYTE PTR [rax],al
 1003b1c:	sub    eax,0x46002000
 1003b21:	add    BYTE PTR [rcx+0x0],ah
 1003b24:	imul   eax,DWORD PTR [rax],0x65006c
 1003b2a:	add    BYTE PTR fs:[rax],ah
 1003b2d:	add    BYTE PTR [rdi+0x0],dh
 1003b30:	push   0x6c006900
 1003b35:	add    BYTE PTR [rbp+0x0],ah
 1003b38:	and    BYTE PTR [rax],al
 1003b3a:	ja     0x1003b3c
 1003b3c:	jb     0x1003b3e
 1003b3e:	imul   eax,DWORD PTR [rax],0x690074
 1003b44:	outs   dx,BYTE PTR ds:[rsi]
 1003b45:	add    BYTE PTR [rdi+0x0],ah
 1003b48:	and    BYTE PTR [rax],al
 1003b4a:	ins    DWORD PTR es:[rdi],dx
 1003b4b:	add    BYTE PTR [rcx+0x0],ch
 1003b4e:	outs   dx,BYTE PTR ds:[rsi]
 1003b4f:	add    BYTE PTR [rcx+0x0],ch
 1003b52:	and    BYTE PTR [rax],al
 1003b54:	add    BYTE PTR fs:[rbp+0x0],dh
 1003b58:	ins    DWORD PTR es:[rdi],dx
 1003b59:	add    BYTE PTR [rax+0x0],dh
 1003b5c:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x1004563
	...
 1003b6f:	add    BYTE PTR [rbp+0x0],al
 1003b72:	jb     0x1003b74
 1003b74:	jb     0x1003b76
 1003b76:	outs   dx,DWORD PTR ds:[rsi]
 1003b77:	add    BYTE PTR [rdx+0x0],dh
 1003b7a:	and    BYTE PTR [rax],al
 1003b7c:	sub    eax,0x46002000
 1003b81:	add    BYTE PTR [rcx+0x0],ah
 1003b84:	imul   eax,DWORD PTR [rax],0x65006c
 1003b8a:	add    BYTE PTR fs:[rax],ah
 1003b8d:	add    BYTE PTR [rdx+0x0],dh
 1003b90:	add    BYTE PTR gs:[rcx+0x0],ah
 1003b94:	add    BYTE PTR fs:[rcx+0x0],ch
 1003b98:	outs   dx,BYTE PTR ds:[rsi]
 1003b99:	add    BYTE PTR [rdi+0x0],ah
 1003b9c:	and    BYTE PTR [rax],al
 1003b9e:	jb     0x1003ba0
 1003ba0:	add    BYTE PTR gs:[rdi+0x0],ah
 1003ba4:	imul   eax,DWORD PTR [rax],0x740073
 1003baa:	jb     0x1003bac
 1003bac:	jns    0x1003bae
 1003bae:	and    BYTE PTR [rax],al
 1003bb0:	imul   eax,DWORD PTR [rax],0x65
 1003bb3:	add    BYTE PTR [rcx+0x0],bh
 1003bb6:	jae    0x1003bb8
 1003bb8:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x10045bf
 1003bbf:	add    BYTE PTR [rbp+0x0],al
 1003bc2:	jb     0x1003bc4
 1003bc4:	jb     0x1003bc6
 1003bc6:	outs   dx,DWORD PTR ds:[rsi]
 1003bc7:	add    BYTE PTR [rdx+0x0],dh
 1003bca:	and    BYTE PTR [rax],al
 1003bcc:	sub    eax,0x46002000
 1003bd1:	add    BYTE PTR [rcx+0x0],ah
 1003bd4:	imul   eax,DWORD PTR [rax],0x65006c
 1003bda:	add    BYTE PTR fs:[rax],ah
 1003bdd:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1003be1:	add    BYTE PTR [rax],ah
 1003be3:	add    BYTE PTR [rbx+0x0],dh
 1003be6:	je     0x1003be8
 1003be8:	(bad)  
 1003be9:	add    BYTE PTR [rdx+0x0],dh
 1003bec:	je     0x1003bee
 1003bee:	and    BYTE PTR [rax],al
 1003bf0:	push   rdi
 1003bf1:	add    BYTE PTR [rcx+0x0],ah
 1003bf4:	je     0x1003bf6
 1003bf6:	jae    0x1003bf8
 1003bf8:	outs   dx,DWORD PTR ds:[rsi]
 1003bf9:	add    BYTE PTR [rsi+0x0],ch
 1003bfc:	and    BYTE PTR [rax],al
 1003bfe:	jo     0x1003c00
 1003c00:	jb     0x1003c02
 1003c02:	outs   dx,DWORD PTR ds:[rsi]
 1003c03:	add    BYTE PTR [rbx+0x0],ah
 1003c06:	add    BYTE PTR gs:[rbx+0x0],dh
 1003c0a:	jae    0x1003c0c
 1003c0c:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x1004613
	...
 1003c1f:	add    BYTE PTR [rbp+0x0],al
 1003c22:	jb     0x1003c24
 1003c24:	jb     0x1003c26
 1003c26:	outs   dx,DWORD PTR ds:[rsi]
 1003c27:	add    BYTE PTR [rdx+0x0],dh
 1003c2a:	and    BYTE PTR [rax],al
 1003c2c:	sub    eax,0x46002000
 1003c31:	add    BYTE PTR [rcx+0x0],ah
 1003c34:	imul   eax,DWORD PTR [rax],0x65006c
 1003c3a:	add    BYTE PTR fs:[rax],ah
 1003c3d:	add    BYTE PTR [rdi+0x0],dh
 1003c40:	jb     0x1003c42
 1003c42:	imul   eax,DWORD PTR [rax],0x690074
 1003c48:	outs   dx,BYTE PTR ds:[rsi]
 1003c49:	add    BYTE PTR [rdi+0x0],ah
 1003c4c:	and    BYTE PTR [rax],al
 1003c4e:	je     0x1003c50
 1003c50:	push   0x20006500
 1003c55:	add    BYTE PTR [rdi+0x0],dl
 1003c58:	(bad)  
 1003c59:	add    BYTE PTR [rax+rax*1+0x73],dh
 1003c5d:	add    BYTE PTR [rdi+0x0],ch
 1003c60:	outs   dx,BYTE PTR ds:[rsi]
 1003c61:	add    BYTE PTR [rax],ah
 1003c63:	add    BYTE PTR [rbp+0x0],ch
 1003c66:	(bad)  
 1003c67:	add    BYTE PTR [rsi+0x0],ch
 1003c6a:	imul   eax,DWORD PTR [rax],0x650066
 1003c70:	jae    0x1003c72
 1003c72:	je     0x1003c74
 1003c74:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x100467b
 1003c7b:	add    BYTE PTR [rax],al
 1003c7d:	add    BYTE PTR [rax],al
 1003c7f:	add    BYTE PTR [rbp+0x0],al
 1003c82:	jb     0x1003c84
 1003c84:	jb     0x1003c86
 1003c86:	outs   dx,DWORD PTR ds:[rsi]
 1003c87:	add    BYTE PTR [rdx+0x0],dh
 1003c8a:	and    BYTE PTR [rax],al
 1003c8c:	sub    eax,0x56002000
 1003c91:	add    BYTE PTR [rbp+0x0],ah
 1003c94:	jb     0x1003c96
 1003c96:	jae    0x1003c98
 1003c98:	imul   eax,DWORD PTR [rax],0x6e006f
 1003c9e:	and    BYTE PTR [rax],al
 1003ca0:	ins    DWORD PTR es:[rdi],dx
 1003ca1:	add    BYTE PTR [rcx+0x0],ch
 1003ca4:	jae    0x1003ca6
 1003ca6:	ins    DWORD PTR es:[rdi],dx
 1003ca7:	add    BYTE PTR [rcx+0x0],ah
 1003caa:	je     0x1003cac
 1003cac:	movsxd eax,DWORD PTR [rax]
 1003cae:	push   0x64002000
 1003cb3:	add    BYTE PTR [rbp+0x0],ah
 1003cb6:	je     0x1003cb8
 1003cb8:	add    BYTE PTR gs:[rbx+0x0],ah
 1003cbc:	je     0x1003cbe
 1003cbe:	add    BYTE PTR gs:[rax+rax*1+0x2e],ah
 1003cc3:	add    BYTE PTR [rip+0xa00],cl        # 0x10046c9
 1003cc9:	add    BYTE PTR [rax],al
 1003ccb:	add    BYTE PTR [rax],al
 1003ccd:	add    BYTE PTR [rax],al
 1003ccf:	add    BYTE PTR [rbp+0x0],al
 1003cd2:	jb     0x1003cd4
 1003cd4:	jb     0x1003cd6
 1003cd6:	outs   dx,DWORD PTR ds:[rsi]
 1003cd7:	add    BYTE PTR [rdx+0x0],dh
 1003cda:	and    BYTE PTR [rax],al
 1003cdc:	sub    eax,0x52002000
 1003ce1:	add    BYTE PTR [rbp+0x0],ah
 1003ce4:	ins    DWORD PTR es:[rdi],dx
 1003ce5:	add    BYTE PTR [rdi+0x0],ch
 1003ce8:	je     0x1003cea
 1003cea:	add    BYTE PTR gs:[rax],ah
 1003ced:	add    BYTE PTR [rbp+0x0],ch
 1003cf0:	add    BYTE PTR gs:[rbp+0x0],ch
 1003cf4:	outs   dx,DWORD PTR ds:[rsi]
 1003cf5:	add    BYTE PTR [rdx+0x0],dh
 1003cf8:	jns    0x1003cfa
 1003cfa:	and    BYTE PTR [rax],al
 1003cfc:	jb     0x1003cfe
 1003cfe:	add    BYTE PTR gs:[rcx+0x0],ah
 1003d02:	add    BYTE PTR fs:[rax],ah
 1003d05:	add    BYTE PTR [rsi+0x0],ah
 1003d08:	(bad)  
 1003d09:	add    BYTE PTR [rcx+0x0],ch
 1003d0c:	ins    BYTE PTR es:[rdi],dx
 1003d0d:	add    BYTE PTR [rbp+0x0],ah
 1003d10:	add    BYTE PTR fs:[rsi],ch
 1003d13:	add    BYTE PTR [rip+0xa00],cl        # 0x1004719
 1003d19:	add    BYTE PTR [rax],al
 1003d1b:	add    BYTE PTR [rax],al
 1003d1d:	add    BYTE PTR [rax],al
 1003d1f:	add    BYTE PTR [rbp+0x0],al
 1003d22:	jb     0x1003d24
 1003d24:	jb     0x1003d26
 1003d26:	outs   dx,DWORD PTR ds:[rsi]
 1003d27:	add    BYTE PTR [rdx+0x0],dh
 1003d2a:	and    BYTE PTR [rax],al
 1003d2c:	sub    eax,0x52002000
 1003d31:	add    BYTE PTR [rbp+0x0],ah
 1003d34:	ins    DWORD PTR es:[rdi],dx
 1003d35:	add    BYTE PTR [rdi+0x0],ch
 1003d38:	je     0x1003d3a
 1003d3a:	add    BYTE PTR gs:[rax],ah
 1003d3d:	add    BYTE PTR [rbp+0x0],ch
 1003d40:	add    BYTE PTR gs:[rbp+0x0],ch
 1003d44:	outs   dx,DWORD PTR ds:[rsi]
 1003d45:	add    BYTE PTR [rdx+0x0],dh
 1003d48:	jns    0x1003d4a
 1003d4a:	and    BYTE PTR [rax],al
 1003d4c:	data16 add BYTE PTR [rcx+0x0],ah
 1003d50:	imul   eax,DWORD PTR [rax],0x65006c
 1003d56:	add    BYTE PTR fs:[rax],ah
 1003d59:	add    BYTE PTR [rbx+0x0],ah
 1003d5c:	push   0x63006500
 1003d61:	add    BYTE PTR [rbx+0x0],ch
 1003d64:	jae    0x1003d66
 1003d66:	jne    0x1003d68
 1003d68:	ins    DWORD PTR es:[rdi],dx
 1003d69:	add    BYTE PTR [rsi],ch
 1003d6b:	add    BYTE PTR [rip+0xa00],cl        # 0x1004771
	...
 1003d7d:	add    BYTE PTR [rax],al
 1003d7f:	add    BYTE PTR [rbp+0x0],al
 1003d82:	jb     0x1003d84
 1003d84:	jb     0x1003d86
 1003d86:	outs   dx,DWORD PTR ds:[rsi]
 1003d87:	add    BYTE PTR [rdx+0x0],dh
 1003d8a:	and    BYTE PTR [rax],al
 1003d8c:	sub    eax,0x52002000
 1003d91:	add    BYTE PTR [rbp+0x0],ah
 1003d94:	ins    DWORD PTR es:[rdi],dx
 1003d95:	add    BYTE PTR [rdi+0x0],ch
 1003d98:	je     0x1003d9a
 1003d9a:	add    BYTE PTR gs:[rax],ah
 1003d9d:	add    BYTE PTR [rbp+0x0],ch
 1003da0:	add    BYTE PTR gs:[rbp+0x0],ch
 1003da4:	outs   dx,DWORD PTR ds:[rsi]
 1003da5:	add    BYTE PTR [rdx+0x0],dh
 1003da8:	jns    0x1003daa
 1003daa:	and    BYTE PTR [rax],al
 1003dac:	data16 add BYTE PTR [rcx+0x0],ah
 1003db0:	imul   eax,DWORD PTR [rax],0x65006c
 1003db6:	add    BYTE PTR fs:[rax],ah
 1003db9:	add    BYTE PTR [rbx+0x0],dh
 1003dbc:	(bad)  
 1003dbd:	add    BYTE PTR [rsi+0x0],ch
 1003dc0:	imul   eax,DWORD PTR [rax],0x790074
 1003dc6:	and    BYTE PTR [rax],al
 1003dc8:	movsxd eax,DWORD PTR [rax]
 1003dca:	push   0x63006500
 1003dcf:	add    BYTE PTR [rbx+0x0],ch
 1003dd2:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x10047d9
 1003dd9:	add    BYTE PTR [rax],al
 1003ddb:	add    BYTE PTR [rax],al
 1003ddd:	add    BYTE PTR [rax],al
 1003ddf:	add    BYTE PTR [rax+rax*1+0x68],dl
 1003de3:	add    BYTE PTR [rbp+0x0],ah
 1003de6:	and    BYTE PTR [rax],al
 1003de8:	add    BYTE PTR gs:[rdx+0x0],dh
 1003dec:	jb     0x1003dee
 1003dee:	outs   dx,DWORD PTR ds:[rsi]
 1003def:	add    BYTE PTR [rdx+0x0],dh
 1003df2:	and    BYTE PTR [rax],al
 1003df4:	imul   eax,DWORD PTR [rax],0x66006e
 1003dfa:	outs   dx,DWORD PTR ds:[rsi]
 1003dfb:	add    BYTE PTR [rdx+0x0],dh
 1003dfe:	ins    DWORD PTR es:[rdi],dx
 1003dff:	add    BYTE PTR [rcx+0x0],ah
 1003e02:	je     0x1003e04
 1003e04:	imul   eax,DWORD PTR [rax],0x6e006f
 1003e0a:	and    BYTE PTR [rax],al
 1003e0c:	push   0x73006100
 1003e11:	add    BYTE PTR [rax],ah
 1003e13:	add    BYTE PTR [rdx+0x0],ah
 1003e16:	add    BYTE PTR gs:[rbp+0x0],ah
 1003e1a:	outs   dx,BYTE PTR ds:[rsi]
 1003e1b:	add    BYTE PTR [rax],ah
 1003e1d:	add    BYTE PTR [rbx+0x0],dh
 1003e20:	jne    0x1003e22
 1003e22:	(bad)  
 1003e23:	add    BYTE PTR [rbp+0x0],ch
 1003e26:	imul   eax,DWORD PTR [rax],0x740074
 1003e2c:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1003e31:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1003e35:	add    BYTE PTR [rax],ah
 1003e37:	add    BYTE PTR [rdi+0x0],dl
 1003e3a:	(bad)  
 1003e3b:	add    BYTE PTR [rax+rax*1+0x73],dh
 1003e3f:	add    BYTE PTR [rdi+0x0],ch
 1003e42:	outs   dx,BYTE PTR ds:[rsi]
 1003e43:	add    BYTE PTR [rax],ah
 1003e45:	add    BYTE PTR [rbp+0x0],ah
 1003e48:	jb     0x1003e4a
 1003e4a:	jb     0x1003e4c
 1003e4c:	outs   dx,DWORD PTR ds:[rsi]
 1003e4d:	add    BYTE PTR [rdx+0x0],dh
 1003e50:	and    BYTE PTR [rax],al
 1003e52:	jb     0x1003e54
 1003e54:	add    BYTE PTR gs:[rax+0x0],dh
 1003e58:	outs   dx,DWORD PTR ds:[rsi]
 1003e59:	add    BYTE PTR [rdx+0x0],dh
 1003e5c:	je     0x1003e5e
 1003e5e:	imul   eax,DWORD PTR [rax],0x67006e
 1003e64:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x100486b
 1003e6b:	add    BYTE PTR [rax],al
 1003e6d:	add    BYTE PTR [rax],al
 1003e6f:	add    BYTE PTR [rbp+0x0],al
 1003e72:	jb     0x1003e74
 1003e74:	jb     0x1003e76
 1003e76:	outs   dx,DWORD PTR ds:[rsi]
 1003e77:	add    BYTE PTR [rdx+0x0],dh
 1003e7a:	and    BYTE PTR [rax],al
 1003e7c:	sub    eax,0x73002000
 1003e81:	add    BYTE PTR [rdi+0x0],ch
 1003e84:	ins    DWORD PTR es:[rdi],dx
 1003e85:	add    BYTE PTR [rbp+0x0],ah
 1003e88:	and    BYTE PTR [rax],al
 1003e8a:	outs   dx,DWORD PTR ds:[rsi]
 1003e8b:	add    BYTE PTR [rsi+0x0],ah
 1003e8e:	and    BYTE PTR [rax],al
 1003e90:	je     0x1003e92
 1003e92:	push   0x20006500
 1003e97:	add    BYTE PTR [rax+rax*1+0x75],ah
 1003e9b:	add    BYTE PTR [rbp+0x0],ch
 1003e9e:	jo     0x1003ea0
 1003ea0:	and    BYTE PTR [rax],al
 1003ea2:	data16 add BYTE PTR [rcx+0x0],ch
 1003ea6:	ins    BYTE PTR es:[rdi],dx
 1003ea7:	add    BYTE PTR [rbp+0x0],ah
 1003eaa:	jae    0x1003eac
 1003eac:	and    BYTE PTR [rax],al
 1003eae:	ja     0x1003eb0
 1003eb0:	add    BYTE PTR gs:[rdx+0x0],dh
 1003eb4:	add    BYTE PTR gs:[rax],ah
 1003eb7:	add    BYTE PTR [rsi+0x0],ch
 1003eba:	outs   dx,DWORD PTR ds:[rsi]
 1003ebb:	add    BYTE PTR [rax+rax*1+0x20],dh
 1003ebf:	add    BYTE PTR [rdi+0x0],ah
 1003ec2:	add    BYTE PTR gs:[rsi+0x0],ch
 1003ec6:	add    BYTE PTR gs:[rdx+0x0],dh
 1003eca:	(bad)  
 1003ecb:	add    BYTE PTR [rax+rax*1+0x65],dh
 1003ecf:	add    BYTE PTR [rax+rax*1+0x20],ah
 1003ed3:	add    BYTE PTR [rdi+0x0],ch
 1003ed6:	outs   dx,BYTE PTR ds:[rsi]
 1003ed7:	add    BYTE PTR [rax],ah
 1003ed9:	add    BYTE PTR [rdx+0x0],dh
 1003edc:	add    BYTE PTR gs:[rbp+0x0],ch
 1003ee0:	outs   dx,DWORD PTR ds:[rsi]
 1003ee1:	add    BYTE PTR [rax+rax*1+0x65],dh
 1003ee5:	add    BYTE PTR [rax],ah
 1003ee7:	add    BYTE PTR [rsi+0x0],ch
 1003eea:	outs   dx,DWORD PTR ds:[rsi]
 1003eeb:	add    BYTE PTR [rax+rax*1+0x65],ah
 1003eef:	add    BYTE PTR [rbx+0x0],dh
 1003ef2:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x10048f9
 1003ef9:	add    BYTE PTR [rax],al
 1003efb:	add    BYTE PTR [rax],al
 1003efd:	add    BYTE PTR [rax],al
 1003eff:	add    BYTE PTR [rax-0x46],dl
 1003f02:	add    BYTE PTR [rcx],al
 1003f04:	add    BYTE PTR [rax],al
 1003f06:	add    BYTE PTR [rax],al
 1003f08:	lock mov edx,0x100
 1003f0e:	add    BYTE PTR [rax],al
 1003f10:	adc    BYTE PTR [rbx+0x100],bh
 1003f16:	add    BYTE PTR [rax],al
 1003f18:	jo     0x1003ee8
 1003f1a:	add    BYTE PTR [rcx],al
 1003f1c:	add    BYTE PTR [rax],al
 1003f1e:	add    BYTE PTR [rax],al
 1003f20:	loopne 0x1003eda
 1003f22:	add    BYTE PTR [rcx],al
 1003f24:	add    BYTE PTR [rax],al
 1003f26:	add    BYTE PTR [rax],al
 1003f28:	sar    BYTE PTR [rax+0x100],0x0
 1003f2f:	add    BYTE PTR [rax],al
 1003f31:	mov    eax,0x100
 1003f36:	add    BYTE PTR [rax],al
 1003f38:	xor    BYTE PTR [rax+rax*1+0x1],bh
 1003f3f:	add    BYTE PTR [rax-0x47],dl
 1003f42:	add    BYTE PTR [rcx],al
 1003f44:	add    BYTE PTR [rax],al
 1003f46:	add    BYTE PTR [rax],al
 1003f48:	loopne 0x1003f01
 1003f4a:	add    BYTE PTR [rcx],al
 1003f4c:	add    BYTE PTR [rax],al
 1003f4e:	add    BYTE PTR [rax],al
 1003f50:	and    ch,al
 1003f52:	add    BYTE PTR [rcx],al
 1003f54:	add    BYTE PTR [rax],al
 1003f56:	add    BYTE PTR [rax],al
 1003f58:	and    dh,al
 1003f5a:	add    BYTE PTR [rcx],al
 1003f5c:	add    BYTE PTR [rax],al
 1003f5e:	add    BYTE PTR [rax],al
 1003f60:	adc    BYTE PTR [rax+0x100],bh
 1003f66:	add    BYTE PTR [rax],al
 1003f68:	nop
 1003f69:	mov    eax,0x100
 1003f6e:	add    BYTE PTR [rax],al
 1003f70:	rex mov ecx,0x100
 1003f76:	add    BYTE PTR [rax],al
 1003f78:	xor    BYTE PTR [rcx+0x100],bh
 1003f7e:	add    BYTE PTR [rax],al
 1003f80:	mov    al,0xb9
 1003f82:	add    BYTE PTR [rcx],al
 1003f84:	add    BYTE PTR [rax],al
 1003f86:	add    BYTE PTR [rax],al
 1003f88:	sar    BYTE PTR [rcx+0x100],0x0
 1003f8f:	add    BYTE PTR [rax+0x100b9],ah
 1003f95:	add    BYTE PTR [rax],al
 1003f97:	add    BYTE PTR [rax-0x47],dh
 1003f9a:	add    BYTE PTR [rcx],al
 1003f9c:	add    BYTE PTR [rax],al
 1003f9e:	add    BYTE PTR [rax],al
 1003fa0:	cmp    BYTE PTR [rcx+0x100],0x0
 1003fa7:	add    BYTE PTR [rax+0x100b9],dl
 1003fad:	add    BYTE PTR [rax],al
 1003faf:	add    BYTE PTR [rax+0x100b8],al
 1003fb5:	add    BYTE PTR [rax],al
 1003fb7:	add    BYTE PTR [rax-0x34],al
 1003fba:	add    BYTE PTR [rcx],al
 1003fbc:	add    BYTE PTR [rax],al
 1003fbe:	add    BYTE PTR [rax],al
 1003fc0:	adc    BYTE PTR [rdx+0x100],bh
 1003fc6:	add    BYTE PTR [rax],al
 1003fc8:	add    BYTE PTR [rdx+0x100],bh
 1003fce:	add    BYTE PTR [rax],al
 1003fd0:	loopne 0x1003f8b
 1003fd2:	add    BYTE PTR [rcx],al
 1003fd4:	add    BYTE PTR [rax],al
 1003fd6:	add    BYTE PTR [rax],al
 1003fd8:	lock mov ecx,0x100
 1003fde:	add    BYTE PTR [rax],al
 1003fe0:	movabs al,ds:0xf0000000000100b8
 1003fe9:	mov    edi,0x100
 1003fee:	add    BYTE PTR [rax],al
 1003ff0:	and    bh,al
 1003ff2:	add    BYTE PTR [rcx],al
 1003ff4:	add    BYTE PTR [rax],al
 1003ff6:	add    BYTE PTR [rax],al
 1003ff8:	and    eax,0x73006c00
 1003ffd:	add    BYTE PTR [rax],ah
 1003fff:	add    BYTE PTR [rip+0x64006c00],ah        # 0x6500ac05
 1004005:	add    BYTE PTR [rax],ah
 1004007:	add    BYTE PTR [rax],dh
 1004009:	add    BYTE PTR [rax],ah
 100400b:	add    BYTE PTR [rax],dh
 100400d:	add    BYTE PTR [rdx],bh
 100400f:	add    BYTE PTR [rax],dh
 1004011:	add    BYTE PTR [rax],ah
 1004013:	add    BYTE PTR [rip+0x7000],ah        # 0x100b019
 1004019:	add    BYTE PTR [rax],al
 100401b:	add    BYTE PTR [rax],al
 100401d:	add    BYTE PTR [rax],al
 100401f:	add    BYTE PTR [rax+rax*1+0x69],dl
 1004023:	add    BYTE PTR [rbp+0x0],ch
 1004026:	add    BYTE PTR gs:[rdi+0x0],ch
 100402a:	jne    0x100402c
 100402c:	je     0x100402e
 100402e:	and    BYTE PTR [rax],al
 1004030:	ja     0x1004032
 1004032:	(bad)  
 1004033:	add    BYTE PTR [rcx+0x0],ch
 1004036:	je     0x1004038
 1004038:	imul   eax,DWORD PTR [rax],0x67006e
 100403e:	and    BYTE PTR [rax],al
 1004040:	data16 add BYTE PTR [rdi+0x0],ch
 1004044:	jb     0x1004046
 1004046:	and    BYTE PTR [rax],al
 1004048:	add    BYTE PTR gs:[rax+0x0],bh
 100404c:	je     0x100404e
 100404e:	add    BYTE PTR gs:[rdx+0x0],dh
 1004052:	outs   dx,BYTE PTR ds:[rsi]
 1004053:	add    BYTE PTR [rcx+0x0],ah
 1004056:	ins    BYTE PTR es:[rdi],dx
 1004057:	add    BYTE PTR [rax],ah
 1004059:	add    BYTE PTR [rax+rax*1+0x75],ah
 100405d:	add    BYTE PTR [rbp+0x0],ch
 1004060:	jo     0x1004062
 1004062:	and    BYTE PTR [rax],al
 1004064:	jo     0x1004066
 1004066:	jb     0x1004068
 1004068:	outs   dx,DWORD PTR ds:[rsi]
 1004069:	add    BYTE PTR [rbx+0x0],ah
 100406c:	add    BYTE PTR gs:[rbx+0x0],dh
 1004070:	jae    0x1004072
 1004072:	and    BYTE PTR [rax],al
 1004074:	and    eax,0x2e006400
 1004079:	add    BYTE PTR [rip+0xa00],cl        # 0x1004a7f
 100407f:	add    BYTE PTR [rbp+0x0],al
 1004082:	js     0x1004084
 1004084:	je     0x1004086
 1004086:	add    BYTE PTR gs:[rdx+0x0],dh
 100408a:	outs   dx,BYTE PTR ds:[rsi]
 100408b:	add    BYTE PTR [rcx+0x0],ah
 100408e:	ins    BYTE PTR es:[rdi],dx
 100408f:	add    BYTE PTR [rax],ah
 1004091:	add    BYTE PTR [rax+rax*1+0x75],ah
 1004095:	add    BYTE PTR [rbp+0x0],ch
 1004098:	jo     0x100409a
 100409a:	and    BYTE PTR [rax],al
 100409c:	jo     0x100409e
 100409e:	jb     0x10040a0
 10040a0:	outs   dx,DWORD PTR ds:[rsi]
 10040a1:	add    BYTE PTR [rbx+0x0],ah
 10040a4:	add    BYTE PTR gs:[rbx+0x0],dh
 10040a8:	jae    0x10040aa
 10040aa:	and    BYTE PTR [rax],al
 10040ac:	outs   dx,BYTE PTR ds:[rsi]
 10040ad:	add    BYTE PTR [rdi+0x0],ch
 10040b0:	je     0x10040b2
 10040b2:	and    BYTE PTR [rax],al
 10040b4:	add    BYTE PTR gs:[rax+0x0],bh
 10040b8:	add    BYTE PTR gs:[rbx+0x0],ah
 10040bc:	jne    0x10040be
 10040be:	je     0x10040c0
 10040c0:	add    BYTE PTR gs:[rax+rax*1+0x2e],ah
 10040c5:	add    BYTE PTR [rip+0xa00],cl        # 0x1004acb
 10040cb:	add    BYTE PTR [rax],al
 10040cd:	add    BYTE PTR [rax],al
 10040cf:	add    BYTE PTR [rdx],ah
 10040d1:	add    eax,0x11993
 10040d6:	add    BYTE PTR [rax],al
 10040d8:	in     al,0xf8
	...
 10040e2:	add    BYTE PTR [rax],al
 10040e4:	add    eax,DWORD PTR [rax]
 10040e6:	add    BYTE PTR [rax],al
 10040e8:	in     al,dx
 10040e9:	clc    
 10040ea:	add    BYTE PTR [rax],al
 10040ec:	and    BYTE PTR [rax],al
 10040ee:	add    BYTE PTR [rax],al
 10040f0:	add    BYTE PTR [rax],al
 10040f2:	add    BYTE PTR [rax],al
 10040f4:	add    DWORD PTR [rax],eax
 10040f6:	add    BYTE PTR [rax],al
 10040f8:	cld    
 10040f9:	rol    BYTE PTR [rax],cl
 10040fb:	add    DWORD PTR [rax],eax
 10040fd:	add    BYTE PTR [rax],al
 10040ff:	add    BYTE PTR [rax],ah
 1004101:	rol    DWORD PTR [rax],cl
 1004103:	add    DWORD PTR [rax],eax
 1004105:	add    BYTE PTR [rax],al
 1004107:	add    BYTE PTR [rax-0x2d],cl
 100410a:	add    BYTE PTR [rcx],al
 100410c:	add    BYTE PTR [rax],al
 100410e:	add    BYTE PTR [rax],al
 1004110:	cwde   
 1004111:	rol    DWORD PTR [rax],cl
 1004113:	add    DWORD PTR [rax],eax
 1004115:	add    BYTE PTR [rax],al
 1004117:	add    BYTE PTR [rbx+rdx*8+0x100],bh
 100411e:	add    BYTE PTR [rax],al
 1004120:	pushf  
 1004121:	(bad)  
 1004122:	add    BYTE PTR [rcx],al
 1004124:	add    BYTE PTR [rax],al
 1004126:	add    BYTE PTR [rax],al
 1004128:	sbb    al,0xd4
 100412a:	add    BYTE PTR [rcx],al
 100412c:	add    BYTE PTR [rax],al
 100412e:	add    BYTE PTR [rax],al
 1004130:	and    al,0xd5
 1004132:	add    BYTE PTR [rcx],al
 1004134:	add    BYTE PTR [rax],al
 1004136:	add    BYTE PTR [rax],al
 1004138:	cmp    al,0xd4
 100413a:	add    BYTE PTR [rcx],al
 100413c:	add    BYTE PTR [rax],al
 100413e:	add    BYTE PTR [rax],al
 1004140:	push   rsp
 1004141:	(bad)  
 1004142:	add    BYTE PTR [rcx],al
 1004144:	add    BYTE PTR [rax],al
 1004146:	add    BYTE PTR [rax],al
 1004148:	fs (bad) 
 100414a:	add    BYTE PTR [rcx],al
 100414c:	add    BYTE PTR [rax],al
 100414e:	add    BYTE PTR [rax],al
 1004150:	add    BYTE PTR cs:[rdx+0x0],dh
 1004154:	ins    BYTE PTR es:[rdi],dx
 1004155:	add    BYTE PTR [rax+rax*1+0x0],ch
 1004159:	add    BYTE PTR [rax],al
 100415b:	add    BYTE PTR [rax],al
 100415d:	add    BYTE PTR [rax],al
 100415f:	add    BYTE PTR [rdx+0x0],dh
 1004162:	add    BYTE PTR gs:[rbx+0x0],dh
 1004166:	outs   dx,DWORD PTR ds:[rsi]
 1004167:	add    BYTE PTR [rbp+0x0],dh
 100416a:	jb     0x100416c
 100416c:	movsxd eax,DWORD PTR [rax]
 100416e:	add    BYTE PTR gs:[rbx+0x0],dh
 1004172:	add    BYTE PTR [rax],al
 1004174:	add    BYTE PTR [rax],al
 1004176:	add    BYTE PTR [rax],al
 1004178:	push   rdx
 1004179:	add    BYTE PTR [rbp+0x0],ah
 100417c:	jae    0x100417e
 100417e:	outs   dx,DWORD PTR ds:[rsi]
 100417f:	add    BYTE PTR [rbp+0x0],dh
 1004182:	jb     0x1004184
 1004184:	movsxd eax,DWORD PTR [rax]
 1004186:	add    BYTE PTR gs:[rbx+0x0],dh
 100418a:	add    BYTE PTR [rax],al
 100418c:	push   rdx
 100418d:	push   rbx
 100418e:	rex.R push rbx
 1004190:	mov    al,0x64
 1004192:	pop    rsi
 1004193:	and    BYTE PTR [rdx-0xe],ah
 1004196:	out    dx,al
 1004197:	rex.WRXB movabs r13,0x1d1677fea711624
 10041a1:	add    BYTE PTR [rax],al
 10041a3:	add    BYTE PTR [rsp+rsi*2+0x73],ah
 10041a7:	push   0x2e74736f
 10041ac:	jo     0x1004212
 10041ae:	(bad)  
	...
 100422f:	add    BYTE PTR [rax-0x77],cl
 1004232:	pop    rsp
 1004233:	and    al,0x10
 1004235:	push   rdi
 1004236:	sub    rsp,0x50
 100423a:	mov    rax,QWORD PTR [rip+0xcecf]        # 0x1011110
 1004241:	xor    rax,rsp
 1004244:	mov    QWORD PTR [rsp+0x40],rax
 1004249:	mov    rax,QWORD PTR [rip+0xffffffffffffd5f0]        # 0x1001840
 1004250:	mov    rdi,r8
 1004253:	mov    rbx,rcx
 1004256:	mov    QWORD PTR [rsp+0x30],rax
 100425b:	movzx  eax,WORD PTR [rip+0xffffffffffffd5e6]        # 0x1001848
 1004262:	lea    rdx,[rsp+0x30]
 1004267:	mov    WORD PTR [rsp+0x38],ax
 100426c:	movzx  eax,BYTE PTR [rip+0xffffffffffffd5d7]        # 0x100184a
 1004273:	mov    r8d,0xa
 1004279:	mov    rcx,rdi
 100427c:	mov    BYTE PTR [rsp+0x3a],al
 1004280:	call   QWORD PTR [rip+0xffffffffffffd082]        # 0x1001308
 1004286:	test   eax,eax
 1004288:	je     0x100431b
 100428e:	mov    rcx,rdi
 1004291:	call   QWORD PTR [rip+0xffffffffffffcf69]        # 0x1001200
 1004297:	test   eax,eax
 1004299:	jne    0x1004301
 100429b:	xor    eax,eax
 100429d:	lea    r8,[rsp+0x20]
 10042a2:	mov    edx,0xca
 10042a7:	mov    rcx,rbx
 10042aa:	mov    QWORD PTR [rsp+0x20],rax
 10042af:	mov    QWORD PTR [rsp+0x28],rax
 10042b4:	call   0x1005ee0
 10042b9:	test   eax,eax
 10042bb:	je     0x10042eb
 10042bd:	lea    r8,[rsp+0x28]
 10042c2:	mov    edx,0xcb
 10042c7:	mov    rcx,rbx
 10042ca:	call   0x1005ee0
 10042cf:	test   eax,eax
 10042d1:	je     0x10042eb
 10042d3:	mov    r8,QWORD PTR [rsp+0x20]
 10042d8:	mov    rdx,QWORD PTR [rsp+0x28]
 10042dd:	mov    r9d,0x40
 10042e3:	xor    ecx,ecx
 10042e5:	call   QWORD PTR [rip+0xffffffffffffd19d]        # 0x1001488
 10042eb:	mov    rcx,QWORD PTR [rsp+0x28]
 10042f0:	call   QWORD PTR [rip+0xffffffffffffd152]        # 0x1001448
 10042f6:	mov    rcx,QWORD PTR [rsp+0x20]
 10042fb:	call   QWORD PTR [rip+0xffffffffffffd147]        # 0x1001448
 1004301:	xor    eax,eax
 1004303:	mov    rcx,QWORD PTR [rsp+0x40]
 1004308:	xor    rcx,rsp
 100430b:	call   0x10057d0
 1004310:	mov    rbx,QWORD PTR [rsp+0x68]
 1004315:	add    rsp,0x50
 1004319:	pop    rdi
 100431a:	ret    
 100431b:	xor    edx,edx
 100431d:	xor    ecx,ecx
 100431f:	call   QWORD PTR [rip+0xffffffffffffd18b]        # 0x10014b0
 1004325:	xor    ecx,ecx
 1004327:	call   0x1004950
 100432c:	xor    eax,eax
 100432e:	lea    rcx,[rsp+0x20]
 1004333:	mov    QWORD PTR [rsp+0x20],rax
 1004338:	call   0x10050f0
 100433d:	test   eax,eax
 100433f:	js     0x1004303
 1004341:	mov    rbx,QWORD PTR [rsp+0x20]
 1004346:	mov    rcx,rbx
 1004349:	mov    rax,QWORD PTR [rbx]
 100434c:	call   QWORD PTR [rax+0x8]
 100434f:	mov    rcx,rbx
 1004352:	call   QWORD PTR [rip+0xffffffffffffd180]        # 0x10014d8
 1004358:	test   eax,eax
 100435a:	js     0x1004303
 100435c:	lea    rdx,[rip+0xffffffffffffd51d]        # 0x1001880
 1004363:	mov    rcx,rdi
 1004366:	call   QWORD PTR [rip+0xffffffffffffcfa4]        # 0x1001310
 100436c:	mov    rcx,rbx
 100436f:	lea    rdx,[rip+0xffffffffffffe4ca]        # 0x1002840
 1004376:	test   rax,rax
 1004379:	mov    rax,QWORD PTR [rbx]
 100437c:	je     0x1004385
 100437e:	lea    rdx,[rip+0xffffffffffffe4eb]        # 0x1002870
 1004385:	call   QWORD PTR [rax+0x18]
 1004388:	test   eax,eax
 100438a:	js     0x1004303
 1004390:	mov    ecx,0x1388
 1004395:	call   QWORD PTR [rip+0xffffffffffffce75]        # 0x1001210
 100439b:	call   QWORD PTR [rip+0xffffffffffffd13f]        # 0x10014e0
 10043a1:	jmp    0x1004390
 10043a3:	int3   
 10043a4:	int3   
 10043a5:	int3   
 10043a6:	int3   
 10043a7:	int3   
 10043a8:	int3   
 10043a9:	int3   
 10043aa:	int3   
 10043ab:	int3   
 10043ac:	int3   
 10043ad:	int3   
 10043ae:	int3   
 10043af:	int3   
 10043b0:	rex push rsi
 10043b2:	sub    rsp,0x20
 10043b6:	cmp    DWORD PTR [rcx],0x0
 10043b9:	mov    rsi,rcx
 10043bc:	je     0x1004420
 10043be:	mov    QWORD PTR [rsp+0x30],rbx
 10043c3:	mov    rbx,QWORD PTR [rcx+0x10]
 10043c7:	mov    QWORD PTR [rsp+0x38],rbp
 10043cc:	xor    ebp,ebp
 10043ce:	cmp    rbx,QWORD PTR [rcx+0x18]
 10043d2:	jae    0x100440a
 10043d4:	mov    QWORD PTR [rsp+0x40],rdi
 10043d9:	nop    DWORD PTR [rax+0x0]
 10043e0:	mov    rdi,QWORD PTR [rbx]
 10043e3:	test   rdi,rdi
 10043e6:	je     0x10043fb
 10043e8:	mov    rcx,QWORD PTR [rdi+0x20]
 10043ec:	test   rcx,rcx
 10043ef:	je     0x10043f7
 10043f1:	mov    rax,QWORD PTR [rcx]
 10043f4:	call   QWORD PTR [rax+0x10]
 10043f7:	mov    QWORD PTR [rdi+0x20],rbp
 10043fb:	add    rbx,0x8
 10043ff:	cmp    rbx,QWORD PTR [rsi+0x18]
 1004403:	jb     0x10043e0
 1004405:	mov    rdi,QWORD PTR [rsp+0x40]
 100440a:	lea    rcx,[rsi+0x20]
 100440e:	call   QWORD PTR [rip+0xffffffffffffce64]        # 0x1001278
 1004414:	mov    rbx,QWORD PTR [rsp+0x30]
 1004419:	mov    DWORD PTR [rsi],ebp
 100441b:	mov    rbp,QWORD PTR [rsp+0x38]
 1004420:	add    rsp,0x20
 1004424:	pop    rsi
 1004425:	ret    
 1004426:	int3   
 1004427:	int3   
 1004428:	int3   
 1004429:	int3   
 100442a:	int3   
 100442b:	int3   
 100442c:	int3   
 100442d:	int3   
 100442e:	int3   
 100442f:	int3   
 1004430:	mov    eax,DWORD PTR [rcx+0xc]
 1004433:	ret    
 1004434:	int3   
 1004435:	int3   
 1004436:	int3   
 1004437:	int3   
 1004438:	int3   
 1004439:	int3   
 100443a:	int3   
 100443b:	int3   
 100443c:	int3   
 100443d:	int3   
 100443e:	int3   
 100443f:	int3   
 1004440:	rex push rsi
 1004442:	sub    rsp,0x30
 1004446:	mov    rsi,rdx
 1004449:	test   rdx,rdx
 100444c:	jne    0x1004459
 100444e:	mov    eax,0x80004003
 1004453:	add    rsp,0x30
 1004457:	pop    rsi
 1004458:	ret    
 1004459:	mov    QWORD PTR [rsp+0x40],rbx
 100445e:	lea    rbx,[rcx+0x40]
 1004462:	mov    QWORD PTR [rsp+0x48],rdi
 1004467:	xor    edi,edi
 1004469:	cmp    QWORD PTR [rbx],rdi
 100446c:	jne    0x1004493
 100446e:	lea    r9,[rip+0xffffffffffffd19b]        # 0x1001610
 1004475:	lea    r8d,[rdi+0x1]
 1004479:	lea    rcx,[rip+0xffffffffffffd470]        # 0x10018f0
 1004480:	xor    edx,edx
 1004482:	mov    QWORD PTR [rsp+0x20],rbx
 1004487:	call   QWORD PTR [rip+0xffffffffffffd063]        # 0x10014f0
 100448d:	mov    edi,eax
 100448f:	test   eax,eax
 1004491:	js     0x10044a2
 1004493:	mov    rcx,QWORD PTR [rbx]
 1004496:	mov    QWORD PTR [rsi],rcx
 1004499:	mov    rcx,QWORD PTR [rbx]
 100449c:	mov    rdx,QWORD PTR [rcx]
 100449f:	call   QWORD PTR [rdx+0x8]
 10044a2:	mov    rbx,QWORD PTR [rsp+0x40]
 10044a7:	mov    eax,edi
 10044a9:	mov    rdi,QWORD PTR [rsp+0x48]
 10044ae:	add    rsp,0x30
 10044b2:	pop    rsi
 10044b3:	ret    
 10044b4:	int3   
 10044b5:	int3   
 10044b6:	int3   
 10044b7:	int3   
 10044b8:	int3   
 10044b9:	int3   
 10044ba:	int3   
 10044bb:	int3   
 10044bc:	int3   
 10044bd:	int3   
 10044be:	int3   
 10044bf:	int3   
 10044c0:	mov    QWORD PTR [rsp+0x10],rbx
 10044c5:	mov    QWORD PTR [rsp+0x18],rbp
 10044ca:	push   rsi
 10044cb:	push   rdi
 10044cc:	push   r14
 10044ce:	sub    rsp,0x40
 10044d2:	mov    rsi,QWORD PTR [rcx+0x10]
 10044d6:	mov    edi,r9d
 10044d9:	mov    rbp,r8
 10044dc:	mov    r14,rdx
 10044df:	mov    rbx,rcx
 10044e2:	mov    QWORD PTR [rsp+0x60],0x0
 10044eb:	test   rsi,rsi
 10044ee:	je     0x100455c
 10044f0:	cmp    QWORD PTR [rsi],0x0
 10044f4:	je     0x100454f
 10044f6:	lea    rcx,[rip+0xffffffffffffd0db]        # 0x10015d8
 10044fd:	call   QWORD PTR [rip+0xffffffffffffcd6d]        # 0x1001270
 1004503:	test   rax,rax
 1004506:	jne    0x100450f
 1004508:	mov    eax,0x1
 100450d:	jmp    0x1004575
 100450f:	lea    rdx,[rip+0xffffffffffffd0e2]        # 0x10015f8
 1004516:	mov    rcx,rax
 1004519:	call   QWORD PTR [rip+0xffffffffffffcd69]        # 0x1001288
 100451f:	test   rax,rax
 1004522:	je     0x1004555
 1004524:	mov    rcx,QWORD PTR [rsi]
 1004527:	mov    QWORD PTR [rsp+0x30],0x0
 1004530:	mov    r9d,edi
 1004533:	mov    QWORD PTR [rsp+0x28],rcx
 1004538:	lea    rcx,[rsp+0x60]
 100453d:	xor    r8d,r8d
 1004540:	mov    QWORD PTR [rsp+0x20],rcx
 1004545:	mov    rcx,r14
 1004548:	mov    rdx,rbp
 100454b:	call   rax
 100454d:	jmp    0x1004575
 100454f:	cmp    DWORD PTR [rsi+0x8],0x0
 1004553:	jne    0x100455c
 1004555:	mov    eax,0x1
 100455a:	jmp    0x1004575
 100455c:	lea    rax,[rsp+0x60]
 1004561:	xor    r8d,r8d
 1004564:	mov    rdx,rbp
 1004567:	mov    rcx,r14
 100456a:	mov    QWORD PTR [rsp+0x20],rax
 100456f:	call   QWORD PTR [rip+0xffffffffffffca93]        # 0x1001008
 1004575:	test   eax,eax
 1004577:	jne    0x100459f
 1004579:	mov    rcx,QWORD PTR [rbx]
 100457c:	test   rcx,rcx
 100457f:	je     0x100458e
 1004581:	call   QWORD PTR [rip+0xffffffffffffca79]        # 0x1001000
 1004587:	mov    QWORD PTR [rbx],0x0
 100458e:	mov    rcx,QWORD PTR [rsp+0x60]
 1004593:	and    edi,0x300
 1004599:	mov    QWORD PTR [rbx],rcx
 100459c:	mov    DWORD PTR [rbx+0x8],edi
 100459f:	mov    rbx,QWORD PTR [rsp+0x68]
 10045a4:	mov    rbp,QWORD PTR [rsp+0x70]
 10045a9:	add    rsp,0x40
 10045ad:	pop    r14
 10045af:	pop    rdi
 10045b0:	pop    rsi
 10045b1:	ret    
 10045b2:	int3   
 10045b3:	int3   
 10045b4:	int3   
 10045b5:	int3   
 10045b6:	int3   
 10045b7:	int3   
 10045b8:	int3   
 10045b9:	int3   
 10045ba:	int3   
 10045bb:	int3   
 10045bc:	int3   
 10045bd:	int3   
 10045be:	int3   
 10045bf:	int3   
 10045c0:	xor    r11d,r11d
 10045c3:	mov    eax,r11d
 10045c6:	test   rdx,rdx
 10045c9:	je     0x10045d4
 10045cb:	cmp    rdx,0x7fffffff
 10045d2:	jbe    0x10045d9
 10045d4:	mov    eax,0x80070057
 10045d9:	test   eax,eax
 10045db:	js     0x1004638
 10045dd:	mov    r10d,r11d
 10045e0:	test   rdx,rdx
 10045e3:	je     0x1004627
 10045e5:	mov    r9d,0x7ffffffe
 10045eb:	sub    r9,rdx
 10045ee:	sub    r8,rcx
 10045f1:	lea    rax,[r9+rdx*1]
 10045f5:	test   rax,rax
 10045f8:	je     0x1004622
 10045fa:	movzx  eax,WORD PTR [r8+rcx*1]
 10045ff:	test   ax,ax
 1004602:	je     0x1004622
 1004604:	mov    WORD PTR [rcx],ax
 1004607:	add    rcx,0x2
 100460b:	dec    rdx
 100460e:	jne    0x10045f1
 1004610:	sub    rcx,0x2
 1004614:	mov    r10d,0x8007007a
 100461a:	mov    WORD PTR [rcx],r11w
 100461e:	mov    eax,r10d
 1004621:	ret    
 1004622:	test   rdx,rdx
 1004625:	jne    0x1004631
 1004627:	sub    rcx,0x2
 100462b:	mov    r10d,0x8007007a
 1004631:	mov    WORD PTR [rcx],r11w
 1004635:	mov    eax,r10d
 1004638:	repz ret 
 100463a:	int3   
 100463b:	int3   
 100463c:	int3   
 100463d:	int3   
 100463e:	int3   
 100463f:	int3   
 1004640:	mov    QWORD PTR [rsp+0x18],rbx
 1004645:	mov    QWORD PTR [rsp+0x20],rsi
 100464a:	push   rdi
 100464b:	push   r14
 100464d:	push   r15
 100464f:	sub    rsp,0x6a0
 1004656:	mov    rax,QWORD PTR [rip+0xcab3]        # 0x1011110
 100465d:	xor    rax,rsp
 1004660:	mov    QWORD PTR [rsp+0x690],rax
 1004668:	mov    rdi,rdx
 100466b:	mov    rsi,rcx
 100466e:	mov    r14,QWORD PTR [rip+0xcb6b]        # 0x10111e0
 1004675:	test   r14,r14
 1004678:	je     0x1004903
 100467e:	xor    r15d,r15d
 1004681:	mov    QWORD PTR [rsp+0x40],r15
 1004686:	mov    QWORD PTR [rsp+0x48],r15
 100468b:	mov    rax,QWORD PTR [r14]
 100468e:	lea    rdx,[rsp+0x40]
 1004693:	mov    rcx,r14
 1004696:	call   QWORD PTR [rax+0x28]
 1004699:	mov    DWORD PTR [rsp+0x50],eax
 100469d:	test   eax,eax
 100469f:	js     0x1004903
 10046a5:	lea    rcx,[rip+0xcb44]        # 0x10111f0
 10046ac:	call   QWORD PTR [rip+0xffffffffffffcb7e]        # 0x1001230
 10046b2:	nop
 10046b3:	lea    r8,[rsp+0x48]
 10046b8:	mov    edx,0xca
 10046bd:	mov    rcx,QWORD PTR [rip+0xd384]        # 0x1011a48
 10046c4:	call   0x1005f30
 10046c9:	mov    rdx,QWORD PTR [rsp+0x48]
 10046ce:	test   rdx,rdx
 10046d1:	je     0x10046e1
 10046d3:	mov    rcx,QWORD PTR [rsp+0x40]
 10046d8:	mov    rax,QWORD PTR [rcx]
 10046db:	call   QWORD PTR [rax+0x90]
 10046e1:	mov    rcx,QWORD PTR [rsp+0x40]
 10046e6:	mov    edx,DWORD PTR [rip+0xca1c]        # 0x1011108
 10046ec:	mov    rax,QWORD PTR [rcx]
 10046ef:	test   rsi,rsi
 10046f2:	je     0x10046f9
 10046f4:	xor    r8d,r8d
 10046f7:	jmp    0x1004703
 10046f9:	btr    edx,0xa
 10046fd:	mov    r8d,0x400
 1004703:	call   QWORD PTR [rax+0x20]
 1004706:	mov    edx,DWORD PTR [rip+0xca00]        # 0x101110c
 100470c:	test   edx,edx
 100470e:	je     0x100471e
 1004710:	mov    rcx,QWORD PTR [rsp+0x40]
 1004715:	mov    rax,QWORD PTR [rcx]
 1004718:	xor    r8d,r8d
 100471b:	call   QWORD PTR [rax+0x28]
 100471e:	test   rsi,rsi
 1004721:	je     0x1004744
 1004723:	mov    rax,QWORD PTR [rsp+0x40]
 1004728:	mov    rbx,QWORD PTR [rax]
 100472b:	call   QWORD PTR [rip+0xffffffffffffcb17]        # 0x1001248
 1004731:	mov    edx,eax
 1004733:	mov    r9,QWORD PTR [rsi+0x8]
 1004737:	mov    r8,QWORD PTR [rsi]
 100473a:	mov    rcx,QWORD PTR [rsp+0x40]
 100473f:	call   QWORD PTR [rbx+0x40]
 1004742:	jmp    0x100475a
 1004744:	mov    rcx,QWORD PTR [rsp+0x40]
 1004749:	mov    rax,QWORD PTR [rcx]
 100474c:	mov    rdx,QWORD PTR [rsp+0x6b8]
 1004754:	call   QWORD PTR [rax+0xc8]
 100475a:	mov    edx,0x104
 100475f:	cmp    WORD PTR [rip+0xcab9],0x0        # 0x1011220
 1004767:	je     0x100481a
 100476d:	lea    rcx,[rsp+0x270]
 1004775:	call   0x10079e0
 100477a:	mov    r11d,DWORD PTR [rip+0xca97]        # 0x1011218
 1004781:	mov    DWORD PTR [rsp+0x28],r11d
 1004786:	lea    rbx,[rip+0xca93]        # 0x1011220
 100478d:	mov    QWORD PTR [rsp+0x20],rbx
 1004792:	lea    r9,[rsp+0x270]
 100479a:	lea    r8,[rip+0xffffffffffffceaf]        # 0x1001650
 10047a1:	mov    edx,0x104
 10047a6:	lea    rcx,[rsp+0x60]
 10047ab:	call   QWORD PTR [rip+0xffffffffffffcbb7]        # 0x1001368
 10047b1:	mov    r11d,DWORD PTR [rip+0xca60]        # 0x1011218
 10047b8:	mov    DWORD PTR [rsp+0x28],r11d
 10047bd:	mov    QWORD PTR [rsp+0x20],rbx
 10047c2:	lea    r9,[rsp+0x270]
 10047ca:	lea    r8,[rip+0xffffffffffffce97]        # 0x1001668
 10047d1:	mov    edx,0x104
 10047d6:	lea    rcx,[rsp+0x480]
 10047de:	call   QWORD PTR [rip+0xffffffffffffcb84]        # 0x1001368
 10047e4:	mov    rcx,QWORD PTR [rsp+0x40]
 10047e9:	mov    rax,QWORD PTR [rcx]
 10047ec:	lea    rdx,[rsp+0x480]
 10047f4:	call   QWORD PTR [rax+0x70]
 10047f7:	test   rdi,rdi
 10047fa:	je     0x1004811
 10047fc:	lea    r8,[rsp+0x480]
 1004804:	mov    edx,0x104
 1004809:	mov    rcx,rdi
 100480c:	call   0x10045c0
 1004811:	lock inc DWORD PTR [rip+0xca00]        # 0x1011218
 1004818:	jmp    0x1004824
 100481a:	lea    rcx,[rsp+0x60]
 100481f:	call   0x1007b50
 1004824:	mov    QWORD PTR [rsp+0x30],r15
 1004829:	mov    DWORD PTR [rsp+0x28],0x80
 1004831:	mov    DWORD PTR [rsp+0x20],0x2
 1004839:	xor    r9d,r9d
 100483c:	mov    edx,0x40000000
 1004841:	lea    r8d,[r9+0x1]
 1004845:	lea    rcx,[rsp+0x60]
 100484a:	call   QWORD PTR [rip+0xffffffffffffc9a0]        # 0x10011f0
 1004850:	mov    QWORD PTR [rip+0xc991],rax        # 0x10111e8
 1004857:	test   rax,rax
 100485a:	je     0x1004893
 100485c:	mov    rcx,QWORD PTR [rsp+0x40]
 1004861:	mov    rax,QWORD PTR [rcx]
 1004864:	lea    rdx,[rsp+0x60]
 1004869:	call   QWORD PTR [rax+0x68]
 100486c:	mov    rcx,QWORD PTR [rip+0xc975]        # 0x10111e8
 1004873:	call   0x1007c50
 1004878:	test   rdi,rdi
 100487b:	je     0x1004893
 100487d:	lea    rcx,[rdi+0x208]
 1004884:	lea    r8,[rsp+0x60]
 1004889:	mov    edx,0x104
 100488e:	call   0x10045c0
 1004893:	test   DWORD PTR [rip+0xc86b],0x8000        # 0x1011108
 100489d:	je     0x10048ac
 100489f:	mov    rdx,QWORD PTR [rsp+0x40]
 10048a4:	mov    rcx,r14
 10048a7:	call   0x100a600
 10048ac:	mov    rcx,QWORD PTR [rsp+0x40]
 10048b1:	mov    rax,QWORD PTR [rcx]
 10048b4:	call   QWORD PTR [rax+0x18]
 10048b7:	test   rdi,rdi
 10048ba:	je     0x10048c2
 10048bc:	mov    DWORD PTR [rdi+0x410],eax
 10048c2:	mov    rcx,QWORD PTR [rsp+0x40]
 10048c7:	mov    rax,QWORD PTR [rcx]
 10048ca:	call   QWORD PTR [rax+0x10]
 10048cd:	mov    rcx,QWORD PTR [rsp+0x48]
 10048d2:	test   rcx,rcx
 10048d5:	je     0x10048e2
 10048d7:	call   QWORD PTR [rip+0xffffffffffffcb6b]        # 0x1001448
 10048dd:	mov    QWORD PTR [rsp+0x48],r15
 10048e2:	mov    rcx,QWORD PTR [rip+0xc8ff]        # 0x10111e8
 10048e9:	call   QWORD PTR [rip+0xffffffffffffc919]        # 0x1001208
 10048ef:	mov    QWORD PTR [rip+0xc8f2],r15        # 0x10111e8
 10048f6:	lea    rcx,[rip+0xc8f3]        # 0x10111f0
 10048fd:	call   QWORD PTR [rip+0xffffffffffffc925]        # 0x1001228
 1004903:	mov    eax,0x1
 1004908:	mov    rcx,QWORD PTR [rsp+0x690]
 1004910:	xor    rcx,rsp
 1004913:	call   0x10057d0
 1004918:	lea    r11,[rsp+0x6a0]
 1004920:	mov    rbx,QWORD PTR [r11+0x30]
 1004924:	mov    rsi,QWORD PTR [r11+0x38]
 1004928:	mov    rsp,r11
 100492b:	pop    r15
 100492d:	pop    r14
 100492f:	pop    rdi
 1004930:	ret    
 1004931:	int3   
 1004932:	int3   
 1004933:	int3   
 1004934:	int3   
 1004935:	int3   
 1004936:	int3   
 1004937:	int3   
 1004938:	int3   
 1004939:	int3   
 100493a:	int3   
 100493b:	int3   
 100493c:	int3   
 100493d:	int3   
 100493e:	int3   
 100493f:	int3   
 1004940:	xor    edx,edx
 1004942:	jmp    0x1004640
 1004947:	int3   
 1004948:	int3   
 1004949:	int3   
 100494a:	int3   
 100494b:	int3   
 100494c:	int3   
 100494d:	int3   
 100494e:	int3   
 100494f:	int3   
 1004950:	rex push rbx
 1004952:	push   rsi
 1004953:	push   rdi
 1004954:	sub    rsp,0x50
 1004958:	xor    r9d,r9d
 100495b:	mov    rdi,rcx
 100495e:	xor    r8d,r8d
 1004961:	lea    edx,[r9+0x1]
 1004965:	xor    ecx,ecx
 1004967:	call   QWORD PTR [rip+0xffffffffffffc8fb]        # 0x1001268
 100496d:	lea    rcx,[rip+0xc87c]        # 0x10111f0
 1004974:	call   QWORD PTR [rip+0xffffffffffffc8be]        # 0x1001238
 100497a:	lea    rcx,[rip+0xc89f]        # 0x1011220
 1004981:	xor    esi,esi
 1004983:	xor    edx,edx
 1004985:	mov    r8d,0x208
 100498b:	mov    QWORD PTR [rip+0xc856],rsi        # 0x10111e8
 1004992:	call   0x1005982
 1004997:	xor    ecx,ecx
 1004999:	mov    QWORD PTR [rsp+0x88],rsi
 10049a1:	call   QWORD PTR [rip+0xffffffffffffc8c9]        # 0x1001270
 10049a7:	test   rax,rax
 10049aa:	je     0x10049cf
 10049ac:	lea    rdx,[rip+0xffffffffffffcc85]        # 0x1001638
 10049b3:	mov    rcx,rax
 10049b6:	call   QWORD PTR [rip+0xffffffffffffc8cc]        # 0x1001288
 10049bc:	test   rax,rax
 10049bf:	je     0x10049cf
 10049c1:	lea    rcx,[rsp+0x88]
 10049c9:	call   rax
 10049cb:	mov    ebx,eax
 10049cd:	jmp    0x10049e4
 10049cf:	call   QWORD PTR [rip+0xffffffffffffc86b]        # 0x1001240
 10049d5:	mov    ebx,eax
 10049d7:	test   eax,eax
 10049d9:	jle    0x10049e4
 10049db:	movzx  ebx,ax
 10049de:	or     ebx,0x80070000
 10049e4:	test   ebx,ebx
 10049e6:	js     0x1004b15
 10049ec:	mov    rcx,QWORD PTR [rsp+0x88]
 10049f4:	mov    rax,QWORD PTR [rcx]
 10049f7:	call   QWORD PTR [rax+0x20]
 10049fa:	mov    rcx,QWORD PTR [rsp+0x88]
 1004a02:	mov    ebx,eax
 1004a04:	test   eax,eax
 1004a06:	js     0x1004b0f
 1004a0c:	mov    QWORD PTR [rip+0xc7cd],rcx        # 0x10111e0
 1004a13:	test   rdi,rdi
 1004a16:	je     0x1004a58
 1004a18:	lea    rdx,[rsp+0x80]
 1004a20:	lea    rcx,[rsp+0x78]
 1004a25:	mov    DWORD PTR [rsp+0x78],esi
 1004a29:	mov    DWORD PTR [rsp+0x80],esi
 1004a30:	call   rdi
 1004a32:	mov    ebx,eax
 1004a34:	test   eax,eax
 1004a36:	js     0x1004b15
 1004a3c:	mov    eax,DWORD PTR [rsp+0x78]
 1004a40:	mov    DWORD PTR [rip+0xc6c2],eax        # 0x1011108
 1004a46:	mov    eax,DWORD PTR [rsp+0x80]
 1004a4d:	mov    DWORD PTR [rip+0xc6b9],eax        # 0x101110c
 1004a53:	jmp    0x1004b15
 1004a58:	lea    r8,[rip+0xffffffffffffcc31]        # 0x1001690
 1004a5f:	lea    rcx,[rsp+0x30]
 1004a64:	mov    r9d,0x20019
 1004a6a:	mov    rdx,0xffffffff80000002
 1004a71:	mov    QWORD PTR [rsp+0x30],rsi
 1004a76:	mov    DWORD PTR [rsp+0x38],esi
 1004a7a:	mov    QWORD PTR [rsp+0x40],rsi
 1004a7f:	call   0x10044c0
 1004a84:	mov    rdi,QWORD PTR [rsp+0x30]
 1004a89:	test   eax,eax
 1004a8b:	jne    0x1004aff
 1004a8d:	lea    rax,[rsp+0x78]
 1004a92:	lea    r9,[rsp+0x80]
 1004a9a:	lea    rdx,[rip+0xffffffffffffcc6f]        # 0x1001710
 1004aa1:	mov    QWORD PTR [rsp+0x28],rax
 1004aa6:	lea    rax,[rip+0xc65b]        # 0x1011108
 1004aad:	xor    r8d,r8d
 1004ab0:	mov    rcx,rdi
 1004ab3:	mov    DWORD PTR [rsp+0x78],0x4
 1004abb:	mov    QWORD PTR [rsp+0x20],rax
 1004ac0:	call   QWORD PTR [rip+0xffffffffffffc54a]        # 0x1001010
 1004ac6:	lea    rax,[rsp+0x78]
 1004acb:	lea    r9,[rsp+0x80]
 1004ad3:	mov    QWORD PTR [rsp+0x28],rax
 1004ad8:	lea    rax,[rip+0xc62d]        # 0x101110c
 1004adf:	lea    rdx,[rip+0xffffffffffffcc4a]        # 0x1001730
 1004ae6:	xor    r8d,r8d
 1004ae9:	mov    rcx,rdi
 1004aec:	mov    DWORD PTR [rsp+0x78],0x4
 1004af4:	mov    QWORD PTR [rsp+0x20],rax
 1004af9:	call   QWORD PTR [rip+0xffffffffffffc511]        # 0x1001010
 1004aff:	test   rdi,rdi
 1004b02:	je     0x1004b15
 1004b04:	mov    rcx,rdi
 1004b07:	call   QWORD PTR [rip+0xffffffffffffc4f3]        # 0x1001000
 1004b0d:	jmp    0x1004b15
 1004b0f:	mov    rax,QWORD PTR [rcx]
 1004b12:	call   QWORD PTR [rax+0x10]
 1004b15:	lea    rcx,[rip+0xfffffffffffffe24]        # 0x1004940
 1004b1c:	call   QWORD PTR [rip+0xffffffffffffc72e]        # 0x1001250
 1004b22:	mov    eax,ebx
 1004b24:	add    rsp,0x50
 1004b28:	pop    rdi
 1004b29:	pop    rsi
 1004b2a:	pop    rbx
 1004b2b:	ret    
 1004b2c:	int3   
 1004b2d:	int3   
 1004b2e:	int3   
 1004b2f:	int3   
 1004b30:	int3   
 1004b31:	int3   
 1004b32:	int3   
 1004b33:	int3   
 1004b34:	int3   
 1004b35:	int3   
 1004b36:	int3   
 1004b37:	int3   
 1004b38:	int3   
 1004b39:	int3   
 1004b3a:	int3   
 1004b3b:	int3   
 1004b3c:	int3   
 1004b3d:	int3   
 1004b3e:	int3   
 1004b3f:	int3   
 1004b40:	mov    rdx,rcx
 1004b43:	xor    ecx,ecx
 1004b45:	jmp    0x1004640
 1004b4a:	int3   
 1004b4b:	int3   
 1004b4c:	int3   
 1004b4d:	int3   
 1004b4e:	int3   
 1004b4f:	int3   
 1004b50:	mov    rax,QWORD PTR [rip+0xc691]        # 0x10111e8
 1004b57:	ret    
 1004b58:	int3   
 1004b59:	int3   
 1004b5a:	int3   
 1004b5b:	int3   
 1004b5c:	int3   
 1004b5d:	int3   
 1004b5e:	int3   
 1004b5f:	int3   
 1004b60:	xor    eax,eax
 1004b62:	ret    
 1004b63:	int3   
 1004b64:	int3   
 1004b65:	int3   
 1004b66:	int3   
 1004b67:	int3   
 1004b68:	int3   
 1004b69:	int3   
 1004b6a:	int3   
 1004b6b:	int3   
 1004b6c:	int3   
 1004b6d:	int3   
 1004b6e:	int3   
 1004b6f:	int3   
 1004b70:	mov    rax,QWORD PTR [rdx]
 1004b73:	mov    rcx,rdx
 1004b76:	lea    r8,[rip+0xffffffffffffcaa3]        # 0x1001620
 1004b7d:	lea    rdx,[rip+0xffffffffffffcaa4]        # 0x1001628
 1004b84:	rex.W jmp QWORD PTR [rax+0x18]
 1004b88:	int3   
 1004b89:	int3   
 1004b8a:	int3   
 1004b8b:	int3   
 1004b8c:	int3   
 1004b8d:	int3   
 1004b8e:	int3   
 1004b8f:	int3   
 1004b90:	mov    QWORD PTR [rsp+0x18],rbp
 1004b95:	mov    QWORD PTR [rsp+0x20],rsi
 1004b9a:	push   r14
 1004b9c:	sub    rsp,0x20
 1004ba0:	mov    rax,QWORD PTR [rip+0xcf11]        # 0x1011ab8
 1004ba7:	mov    QWORD PTR [rsp+0x30],rbx
 1004bac:	mov    rbx,QWORD PTR [rip+0xcefd]        # 0x1011ab0
 1004bb3:	mov    rsi,rcx
 1004bb6:	cmp    rbx,rax
 1004bb9:	jae    0x1004bdd
 1004bbb:	nop    DWORD PTR [rax+rax*1+0x0]
 1004bc0:	mov    rdx,QWORD PTR [rbx]
 1004bc3:	test   rdx,rdx
 1004bc6:	je     0x1004bd4
 1004bc8:	xor    ecx,ecx
 1004bca:	call   QWORD PTR [rdx+0x40]
 1004bcd:	mov    rax,QWORD PTR [rip+0xcee4]        # 0x1011ab8
 1004bd4:	add    rbx,0x8
 1004bd8:	cmp    rbx,rax
 1004bdb:	jb     0x1004bc0
 1004bdd:	xor    ebp,ebp
 1004bdf:	cmp    DWORD PTR [rsi+0x8],ebp
 1004be2:	je     0x1004c1b
 1004be4:	cmp    QWORD PTR [rsi+0x10],rbp
 1004be8:	je     0x1004bf8
 1004bea:	lea    rcx,[rsi+0x8]
 1004bee:	call   QWORD PTR [rip+0xffffffffffffc43c]        # 0x1001030
 1004bf4:	mov    QWORD PTR [rsi+0x10],rbp
 1004bf8:	mov    rcx,QWORD PTR [rsi+0x40]
 1004bfc:	test   rcx,rcx
 1004bff:	je     0x1004c07
 1004c01:	mov    rax,QWORD PTR [rcx]
 1004c04:	call   QWORD PTR [rax+0x10]
 1004c07:	lea    rcx,[rsi+0x18]
 1004c0b:	call   QWORD PTR [rip+0xffffffffffffc667]        # 0x1001278
 1004c11:	mov    DWORD PTR [rsi+0x8],ebp
 1004c14:	mov    rax,QWORD PTR [rip+0xce9d]        # 0x1011ab8
 1004c1b:	cmp    DWORD PTR [rip+0xce7f],ebp        # 0x1011aa0
 1004c21:	je     0x1004c77
 1004c23:	mov    rbx,QWORD PTR [rip+0xce86]        # 0x1011ab0
 1004c2a:	cmp    rbx,rax
 1004c2d:	jae    0x1004c64
 1004c2f:	mov    QWORD PTR [rsp+0x38],rdi
 1004c34:	mov    rdi,QWORD PTR [rbx]
 1004c37:	test   rdi,rdi
 1004c3a:	je     0x1004c56
 1004c3c:	mov    rcx,QWORD PTR [rdi+0x20]
 1004c40:	test   rcx,rcx
 1004c43:	je     0x1004c4b
 1004c45:	mov    rax,QWORD PTR [rcx]
 1004c48:	call   QWORD PTR [rax+0x10]
 1004c4b:	mov    QWORD PTR [rdi+0x20],rbp
 1004c4f:	mov    rax,QWORD PTR [rip+0xce62]        # 0x1011ab8
 1004c56:	add    rbx,0x8
 1004c5a:	cmp    rbx,rax
 1004c5d:	jb     0x1004c34
 1004c5f:	mov    rdi,QWORD PTR [rsp+0x38]
 1004c64:	lea    rcx,[rip+0xce55]        # 0x1011ac0
 1004c6b:	call   QWORD PTR [rip+0xffffffffffffc607]        # 0x1001278
 1004c71:	mov    DWORD PTR [rip+0xce29],ebp        # 0x1011aa0
 1004c77:	mov    rbx,QWORD PTR [rsp+0x30]
 1004c7c:	cmp    DWORD PTR [rsi+0x8],ebp
 1004c7f:	je     0x1004cb1
 1004c81:	cmp    QWORD PTR [rsi+0x10],rbp
 1004c85:	je     0x1004c95
 1004c87:	lea    rcx,[rsi+0x8]
 1004c8b:	call   QWORD PTR [rip+0xffffffffffffc39f]        # 0x1001030
 1004c91:	mov    QWORD PTR [rsi+0x10],rbp
 1004c95:	mov    rcx,QWORD PTR [rsi+0x40]
 1004c99:	test   rcx,rcx
 1004c9c:	je     0x1004ca4
 1004c9e:	mov    rax,QWORD PTR [rcx]
 1004ca1:	call   QWORD PTR [rax+0x10]
 1004ca4:	lea    rcx,[rsi+0x18]
 1004ca8:	call   QWORD PTR [rip+0xffffffffffffc5ca]        # 0x1001278
 1004cae:	mov    DWORD PTR [rsi+0x8],ebp
 1004cb1:	mov    rbp,QWORD PTR [rsp+0x40]
 1004cb6:	mov    rsi,QWORD PTR [rsp+0x48]
 1004cbb:	add    rsp,0x20
 1004cbf:	pop    r14
 1004cc1:	ret    
 1004cc2:	int3   
 1004cc3:	int3   
 1004cc4:	int3   
 1004cc5:	int3   
 1004cc6:	int3   
 1004cc7:	int3   
 1004cc8:	int3   
 1004cc9:	int3   
 1004cca:	int3   
 1004ccb:	int3   
 1004ccc:	int3   
 1004ccd:	int3   
 1004cce:	int3   
 1004ccf:	int3   
 1004cd0:	rex.W jmp QWORD PTR [rip+0xffffffffffffc7f1]        # 0x10014c8
 1004cd7:	int3   
 1004cd8:	int3   
 1004cd9:	int3   
 1004cda:	int3   
 1004cdb:	int3   
 1004cdc:	int3   
 1004cdd:	int3   
 1004cde:	int3   
 1004cdf:	int3   
 1004ce0:	mov    QWORD PTR [rsp+0x8],rbx
 1004ce5:	push   rdi
 1004ce6:	sub    rsp,0x20
 1004cea:	mov    rbx,rcx
 1004ced:	call   QWORD PTR [rip+0xffffffffffffc7dd]        # 0x10014d0
 1004cf3:	mov    edi,eax
 1004cf5:	test   eax,eax
 1004cf7:	jne    0x1004d2e
 1004cf9:	cmp    BYTE PTR [rbx+0x60],al
 1004cfc:	je     0x1004d19
 1004cfe:	mov    rcx,QWORD PTR [rbx+0x50]
 1004d02:	mov    BYTE PTR [rbx+0x61],0x1
 1004d06:	call   QWORD PTR [rip+0xffffffffffffc50c]        # 0x1001218
 1004d0c:	mov    eax,edi
 1004d0e:	mov    rbx,QWORD PTR [rsp+0x30]
 1004d13:	add    rsp,0x20
 1004d17:	pop    rdi
 1004d18:	ret    
 1004d19:	mov    ecx,DWORD PTR [rbx+0x48]
 1004d1c:	xor    r9d,r9d
 1004d1f:	xor    r8d,r8d
 1004d22:	lea    edx,[r9+0x12]
 1004d26:	call   QWORD PTR [rip+0xffffffffffffc754]        # 0x1001480
 1004d2c:	mov    eax,edi
 1004d2e:	mov    rbx,QWORD PTR [rsp+0x30]
 1004d33:	add    rsp,0x20
 1004d37:	pop    rdi
 1004d38:	ret    
 1004d39:	int3   
 1004d3a:	int3   
 1004d3b:	int3   
 1004d3c:	int3   
 1004d3d:	int3   
 1004d3e:	int3   
 1004d3f:	int3   
 1004d40:	mov    QWORD PTR [rsp+0x8],rbx
 1004d45:	push   rdi
 1004d46:	sub    rsp,0x20
 1004d4a:	mov    ebx,edx
 1004d4c:	mov    rdi,rcx
 1004d4f:	call   0x1004b90
 1004d54:	test   bl,0x1
 1004d57:	je     0x1004d61
 1004d59:	mov    rcx,rdi
 1004d5c:	call   0x10055c4
 1004d61:	mov    rax,rdi
 1004d64:	mov    rbx,QWORD PTR [rsp+0x30]
 1004d69:	add    rsp,0x20
 1004d6d:	pop    rdi
 1004d6e:	ret    
 1004d6f:	int3   
 1004d70:	int3   
 1004d71:	int3   
 1004d72:	int3   
 1004d73:	int3   
 1004d74:	int3   
 1004d75:	int3   
 1004d76:	int3   
 1004d77:	int3   
 1004d78:	int3   
 1004d79:	int3   
 1004d7a:	int3   
 1004d7b:	int3   
 1004d7c:	int3   
 1004d7d:	int3   
 1004d7e:	int3   
 1004d7f:	int3   
 1004d80:	rex push rbp
 1004d82:	push   rsi
 1004d83:	push   rdi
 1004d84:	push   r14
 1004d86:	push   r15
 1004d88:	lea    rbp,[rsp-0xbd0]
 1004d90:	sub    rsp,0xcd0
 1004d97:	mov    rax,QWORD PTR [rip+0xc372]        # 0x1011110
 1004d9e:	xor    rax,rsp
 1004da1:	mov    QWORD PTR [rbp+0xbc0],rax
 1004da8:	mov    r8,QWORD PTR [rdx]
 1004dab:	lea    r15,[rip+0xffffffffffffb24e]        # 0x1000000
 1004db2:	xor    edi,edi
 1004db4:	mov    rsi,rdx
 1004db7:	mov    r14,rcx
 1004dba:	cmp    r8,QWORD PTR [r15+0x2840]
 1004dc1:	jne    0x1004dd4
 1004dc3:	mov    r8,QWORD PTR [rdx+0x8]
 1004dc7:	cmp    r8,QWORD PTR [r15+0x2848]
 1004dce:	jne    0x1004dd4
 1004dd0:	mov    eax,edi
 1004dd2:	jmp    0x1004dd9
 1004dd4:	sbb    eax,eax
 1004dd6:	sbb    eax,0xffffffff
 1004dd9:	test   eax,eax
 1004ddb:	je     0x1004e0d
 1004ddd:	mov    rdx,QWORD PTR [rdx]
 1004de0:	cmp    rdx,QWORD PTR [r15+0x2870]
 1004de7:	jne    0x1004dfa
 1004de9:	mov    rdx,QWORD PTR [rsi+0x8]
 1004ded:	cmp    rdx,QWORD PTR [r15+0x2878]
 1004df4:	jne    0x1004dfa
 1004df6:	mov    eax,edi
 1004df8:	jmp    0x1004dff
 1004dfa:	sbb    eax,eax
 1004dfc:	sbb    eax,0xffffffff
 1004dff:	test   eax,eax
 1004e01:	je     0x1004e0d
 1004e03:	mov    eax,0x80004005
 1004e08:	jmp    0x100500a
 1004e0d:	lea    rdx,[rsp+0x50]
 1004e12:	lea    rcx,[rip+0xffffffffffffd9e7]        # 0x1002800
 1004e19:	mov    r8d,0x27
 1004e1f:	call   QWORD PTR [rip+0xffffffffffffc6c3]        # 0x10014e8
 1004e25:	test   eax,eax
 1004e27:	jne    0x1004e33
 1004e29:	mov    eax,0x8000ffff
 1004e2e:	jmp    0x100500a
 1004e33:	lea    r9,[rsp+0x50]
 1004e38:	lea    r8,[rip+0xffffffffffffc991]        # 0x10017d0
 1004e3f:	lea    rcx,[rbp+0x3c0]
 1004e46:	mov    edx,0x400
 1004e4b:	call   QWORD PTR [rip+0xffffffffffffc517]        # 0x1001368
 1004e51:	lea    rax,[rsp+0x40]
 1004e56:	lea    rdx,[rbp+0x3c0]
 1004e5d:	mov    r9d,0x80000000
 1004e63:	xor    r8d,r8d
 1004e66:	mov    rcx,0xffffffff80000002
 1004e6d:	mov    QWORD PTR [rsp+0x20],rax
 1004e72:	mov    DWORD PTR [rsp+0x34],0x208
 1004e7a:	call   QWORD PTR [rip+0xffffffffffffc188]        # 0x1001008
 1004e80:	test   eax,eax
 1004e82:	je     0x1004e97
 1004e84:	jle    0x100500a
 1004e8a:	movzx  eax,ax
 1004e8d:	or     eax,0x80070000
 1004e92:	jmp    0x100500a
 1004e97:	mov    rcx,QWORD PTR [rsp+0x40]
 1004e9c:	lea    rax,[rsp+0x34]
 1004ea1:	xor    r9d,r9d
 1004ea4:	mov    QWORD PTR [rsp+0x28],rax
 1004ea9:	lea    rax,[rbp-0x60]
 1004ead:	xor    r8d,r8d
 1004eb0:	xor    edx,edx
 1004eb2:	mov    QWORD PTR [rsp+0xd10],rbx
 1004eba:	mov    QWORD PTR [rsp+0x20],rax
 1004ebf:	call   QWORD PTR [rip+0xffffffffffffc14b]        # 0x1001010
 1004ec5:	mov    rcx,QWORD PTR [rsp+0x40]
 1004eca:	mov    ebx,eax
 1004ecc:	call   QWORD PTR [rip+0xffffffffffffc12e]        # 0x1001000
 1004ed2:	test   ebx,ebx
 1004ed4:	je     0x1004ee8
 1004ed6:	jle    0x1004ee1
 1004ed8:	movzx  ebx,bx
 1004edb:	or     ebx,0x80070000
 1004ee1:	mov    eax,ebx
 1004ee3:	jmp    0x1005002
 1004ee8:	lea    rcx,[rbp-0x60]
 1004eec:	call   QWORD PTR [rip+0xffffffffffffc57e]        # 0x1001470
 1004ef2:	test   eax,eax
 1004ef4:	je     0x1004f50
 1004ef6:	lea    rcx,[rbp+0x1b4]
 1004efd:	xor    edx,edx
 1004eff:	mov    r8d,0x204
 1004f05:	mov    DWORD PTR [rbp+0x1b0],edi
 1004f0b:	call   0x1005982
 1004f10:	lea    r9,[rsp+0x30]
 1004f15:	lea    r8,[rbp+0x1b0]
 1004f1c:	lea    rcx,[rbp-0x60]
 1004f20:	mov    edx,0x1
 1004f25:	mov    DWORD PTR [rsp+0x30],0x104
 1004f2d:	call   0x10061f0
 1004f32:	test   eax,eax
 1004f34:	js     0x1005002
 1004f3a:	lea    r8,[rbp+0x1b0]
 1004f41:	lea    rcx,[rbp-0x60]
 1004f45:	mov    edx,0x104
 1004f4a:	call   QWORD PTR [rip+0xffffffffffffc410]        # 0x1001360
 1004f50:	lea    rcx,[rbp-0x60]
 1004f54:	call   QWORD PTR [rip+0xffffffffffffc29e]        # 0x10011f8
 1004f5a:	test   rax,rax
 1004f5d:	je     0x1004f74
 1004f5f:	lea    rdx,[rip+0xffffffffffffc8c2]        # 0x1001828
 1004f66:	mov    rcx,rax
 1004f69:	call   QWORD PTR [rip+0xffffffffffffc319]        # 0x1001288
 1004f6f:	test   rax,rax
 1004f72:	jne    0x1004f8c
 1004f74:	call   QWORD PTR [rip+0xffffffffffffc2c6]        # 0x1001240
 1004f7a:	test   eax,eax
 1004f7c:	jle    0x1005002
 1004f82:	movzx  eax,ax
 1004f85:	or     eax,0x80070000
 1004f8a:	jmp    0x1005002
 1004f8c:	lea    r8,[rsp+0x38]
 1004f91:	lea    rdx,[rip+0xffffffffffffc948]        # 0x10018e0
 1004f98:	mov    rcx,rsi
 1004f9b:	mov    QWORD PTR [rsp+0x38],rdi
 1004fa0:	call   rax
 1004fa2:	test   eax,eax
 1004fa4:	js     0x1005002
 1004fa6:	mov    rdx,QWORD PTR [rsi]
 1004fa9:	cmp    rdx,QWORD PTR [r15+0x2840]
 1004fb0:	jne    0x1004fc3
 1004fb2:	mov    rdx,QWORD PTR [rsi+0x8]
 1004fb6:	cmp    rdx,QWORD PTR [r15+0x2848]
 1004fbd:	jne    0x1004fc3
 1004fbf:	mov    eax,edi
 1004fc1:	jmp    0x1004fc8
 1004fc3:	sbb    eax,eax
 1004fc5:	sbb    eax,0xffffffff
 1004fc8:	test   eax,eax
 1004fca:	lea    rax,[r14+0x40]
 1004fce:	je     0x1004fd4
 1004fd0:	lea    rax,[r14+0x44]
 1004fd4:	mov    rdx,QWORD PTR [rsp+0x38]
 1004fd9:	xor    r9d,r9d
 1004fdc:	mov    rcx,rsi
 1004fdf:	lea    r8d,[r9+0x4]
 1004fe3:	mov    QWORD PTR [rsp+0x20],rax
 1004fe8:	call   QWORD PTR [rip+0xffffffffffffc4ca]        # 0x10014b8
 1004fee:	mov    rcx,QWORD PTR [rsp+0x38]
 1004ff3:	mov    rdx,QWORD PTR [rcx]
 1004ff6:	mov    ebx,eax
 1004ff8:	call   QWORD PTR [rdx+0x10]
 1004ffb:	test   ebx,ebx
 1004ffd:	cmovs  edi,ebx
 1005000:	mov    eax,edi
 1005002:	mov    rbx,QWORD PTR [rsp+0xd10]
 100500a:	mov    rcx,QWORD PTR [rbp+0xbc0]
 1005011:	xor    rcx,rsp
 1005014:	call   0x10057d0
 1005019:	add    rsp,0xcd0
 1005020:	pop    r15
 1005022:	pop    r14
 1005024:	pop    rdi
 1005025:	pop    rsi
 1005026:	pop    rbp
 1005027:	ret    
 1005028:	int3   
 1005029:	int3   
 100502a:	int3   
 100502b:	int3   
 100502c:	int3   
 100502d:	int3   
 100502e:	int3   
 100502f:	int3   
 1005030:	rex push rbx
 1005032:	sub    rsp,0x20
 1005036:	mov    rbx,rcx
 1005039:	mov    ecx,DWORD PTR [rcx+0x40]
 100503c:	test   ecx,ecx
 100503e:	je     0x1005046
 1005040:	call   QWORD PTR [rip+0xffffffffffffc47a]        # 0x10014c0
 1005046:	mov    ecx,DWORD PTR [rbx+0x44]
 1005049:	test   ecx,ecx
 100504b:	je     0x1005053
 100504d:	call   QWORD PTR [rip+0xffffffffffffc46d]        # 0x10014c0
 1005053:	call   QWORD PTR [rip+0xffffffffffffc207]        # 0x1001260
 1005059:	xor    edx,edx
 100505b:	mov    rcx,rax
 100505e:	call   QWORD PTR [rip+0xffffffffffffc1f4]        # 0x1001258
 1005064:	xor    eax,eax
 1005066:	add    rsp,0x20
 100506a:	pop    rbx
 100506b:	ret    
 100506c:	int3   
 100506d:	int3   
 100506e:	int3   
 100506f:	int3   
 1005070:	int3   
 1005071:	int3   
 1005072:	int3   
 1005073:	int3   
 1005074:	int3   
 1005075:	int3   
 1005076:	int3   
 1005077:	int3   
 1005078:	int3   
 1005079:	int3   
 100507a:	int3   
 100507b:	int3   
 100507c:	int3   
 100507d:	int3   
 100507e:	int3   
 100507f:	int3   
 1005080:	mov    eax,0x1
 1005085:	lock xadd DWORD PTR [rcx+0x8],eax
 100508a:	inc    eax
 100508c:	ret    
 100508d:	int3   
 100508e:	int3   
 100508f:	int3   
 1005090:	int3   
 1005091:	int3   
 1005092:	int3   
 1005093:	int3   
 1005094:	int3   
 1005095:	int3   
 1005096:	int3   
 1005097:	int3   
 1005098:	int3   
 1005099:	int3   
 100509a:	int3   
 100509b:	int3   
 100509c:	int3   
 100509d:	int3   
 100509e:	int3   
 100509f:	int3   
 10050a0:	rex push rbx
 10050a2:	sub    rsp,0x20
 10050a6:	or     ebx,0xffffffff
 10050a9:	lock xadd DWORD PTR [rcx+0x8],ebx
 10050ae:	dec    ebx
 10050b0:	jne    0x10050c1
 10050b2:	test   rcx,rcx
 10050b5:	je     0x10050c1
 10050b7:	mov    r8,QWORD PTR [rcx]
 10050ba:	lea    edx,[rbx+0x1]
 10050bd:	call   QWORD PTR [r8+0x28]
 10050c1:	mov    eax,ebx
 10050c3:	add    rsp,0x20
 10050c7:	pop    rbx
 10050c8:	ret    
 10050c9:	int3   
 10050ca:	int3   
 10050cb:	int3   
 10050cc:	int3   
 10050cd:	int3   
 10050ce:	int3   
 10050cf:	int3   
 10050d0:	mov    r9,r8
 10050d3:	mov    r8,rdx
 10050d6:	lea    rdx,[rip+0xffffffffffffc6b3]        # 0x1001790
 10050dd:	rex.W jmp QWORD PTR [rip+0xffffffffffffbf44]        # 0x1001028
 10050e4:	int3   
 10050e5:	int3   
 10050e6:	int3   
 10050e7:	int3   
 10050e8:	int3   
 10050e9:	int3   
 10050ea:	int3   
 10050eb:	int3   
 10050ec:	int3   
 10050ed:	int3   
 10050ee:	int3   
 10050ef:	int3   
 10050f0:	mov    QWORD PTR [rsp+0x8],rcx
 10050f5:	push   rbx
 10050f6:	push   rsi
 10050f7:	push   rdi
 10050f8:	push   r14
 10050fa:	push   r15
 10050fc:	sub    rsp,0x30
 1005100:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1005109:	mov    r14,rcx
 100510c:	test   rcx,rcx
 100510f:	jne    0x100511b
 1005111:	mov    eax,0x80004003
 1005116:	jmp    0x10051e4
 100511b:	xor    esi,esi
 100511d:	mov    QWORD PTR [rcx],rsi
 1005120:	mov    edi,0x8007000e
 1005125:	mov    DWORD PTR [rsp+0x68],edi
 1005129:	mov    QWORD PTR [rsp+0x70],rsi
 100512e:	lea    ecx,[rsi+0x48]
 1005131:	call   0x10057f6
 1005136:	mov    rbx,rax
 1005139:	test   rax,rax
 100513c:	je     0x1005177
 100513e:	mov    DWORD PTR [rax+0x8],esi
 1005141:	xor    eax,eax
 1005143:	mov    QWORD PTR [rbx+0x10],rax
 1005147:	mov    QWORD PTR [rbx+0x18],rax
 100514b:	mov    QWORD PTR [rbx+0x20],rax
 100514f:	mov    QWORD PTR [rbx+0x28],rax
 1005153:	mov    QWORD PTR [rbx+0x30],rax
 1005157:	mov    BYTE PTR [rbx+0x38],al
 100515a:	mov    QWORD PTR [rbx+0x40],rsi
 100515e:	lea    rax,[rip+0xffffffffffffc6eb]        # 0x1001850
 1005165:	mov    QWORD PTR [rbx],rax
 1005168:	mov    rcx,QWORD PTR [rip+0xc059]        # 0x10111c8
 100516f:	mov    rax,QWORD PTR [rcx]
 1005172:	call   QWORD PTR [rax+0x8]
 1005175:	jmp    0x100517a
 1005177:	mov    rbx,rsi
 100517a:	mov    QWORD PTR [rsp+0x70],rbx
 100517f:	jmp    0x1005191
 1005181:	xor    esi,esi
 1005183:	mov    r14,QWORD PTR [rsp+0x60]
 1005188:	mov    edi,DWORD PTR [rsp+0x68]
 100518c:	mov    rbx,QWORD PTR [rsp+0x70]
 1005191:	test   rbx,rbx
 1005194:	je     0x10051df
 1005196:	mov    edi,esi
 1005198:	xor    edx,edx
 100519a:	lea    rcx,[rbx+0x10]
 100519e:	call   QWORD PTR [rip+0xffffffffffffc07c]        # 0x1001220
 10051a4:	test   eax,eax
 10051a6:	jne    0x10051c1
 10051a8:	call   QWORD PTR [rip+0xffffffffffffc092]        # 0x1001240
 10051ae:	mov    edi,eax
 10051b0:	test   eax,eax
 10051b2:	jle    0x10051bd
 10051b4:	movzx  edi,ax
 10051b7:	or     edi,0x80070000
 10051bd:	test   edi,edi
 10051bf:	js     0x10051cd
 10051c1:	mov    BYTE PTR [rbx+0x38],0x1
 10051c5:	test   edi,edi
 10051c7:	js     0x10051cd
 10051c9:	mov    edi,esi
 10051cb:	jmp    0x10051df
 10051cd:	mov    r8,QWORD PTR [rbx]
 10051d0:	mov    edx,0x1
 10051d5:	mov    rcx,rbx
 10051d8:	call   QWORD PTR [r8+0x28]
 10051dc:	mov    rbx,rsi
 10051df:	mov    QWORD PTR [r14],rbx
 10051e2:	mov    eax,edi
 10051e4:	add    rsp,0x30
 10051e8:	pop    r15
 10051ea:	pop    r14
 10051ec:	pop    rdi
 10051ed:	pop    rsi
 10051ee:	pop    rbx
 10051ef:	ret    
 10051f0:	int3   
 10051f1:	int3   
 10051f2:	int3   
 10051f3:	int3   
 10051f4:	int3   
 10051f5:	int3   
 10051f6:	int3   
 10051f7:	int3   
 10051f8:	int3   
 10051f9:	int3   
 10051fa:	int3   
 10051fb:	int3   
 10051fc:	int3   
 10051fd:	int3   
 10051fe:	int3   
 10051ff:	int3   
 1005200:	mov    QWORD PTR [rsp+0x8],rbx
 1005205:	push   rdi
 1005206:	sub    rsp,0x20
 100520a:	mov    DWORD PTR [rcx+0x8],0xc0000001
 1005211:	lea    rax,[rip+0xffffffffffffc638]        # 0x1001850
 1005218:	mov    rbx,rcx
 100521b:	mov    QWORD PTR [rcx],rax
 100521e:	mov    rcx,QWORD PTR [rip+0xbfa3]        # 0x10111c8
 1005225:	mov    edi,edx
 1005227:	mov    rax,QWORD PTR [rcx]
 100522a:	call   QWORD PTR [rax+0x10]
 100522d:	cmp    BYTE PTR [rbx+0x38],0x0
 1005231:	lea    rcx,[rbx+0x10]
 1005235:	je     0x1005241
 1005237:	mov    BYTE PTR [rcx+0x28],0x0
 100523b:	call   QWORD PTR [rip+0xffffffffffffc037]        # 0x1001278
 1005241:	test   dil,0x1
 1005245:	je     0x100524f
 1005247:	mov    rcx,rbx
 100524a:	call   0x10055c4
 100524f:	mov    rax,rbx
 1005252:	mov    rbx,QWORD PTR [rsp+0x30]
 1005257:	add    rsp,0x20
 100525b:	pop    rdi
 100525c:	ret    
 100525d:	int3   
 100525e:	int3   
 100525f:	int3   
 1005260:	int3   
 1005261:	int3   
 1005262:	int3   
 1005263:	int3   
 1005264:	sub    rsp,0x38
 1005268:	lea    rcx,[rip+0x7d5]        # 0x1005a44
 100526f:	call   0x10058bc
 1005274:	mov    r11d,DWORD PTR [rip+0xc7b9]        # 0x1011a34
 100527b:	mov    r9d,DWORD PTR [rip+0xc7ae]        # 0x1011a30
 1005282:	lea    rax,[rip+0xc22b]        # 0x10114b4
 1005289:	lea    r8,[rip+0xc210]        # 0x10114a0
 1005290:	lea    rdx,[rip+0xc211]        # 0x10114a8
 1005297:	lea    rcx,[rip+0xc1fa]        # 0x1011498
 100529e:	mov    DWORD PTR [rip+0xc20f],r11d        # 0x10114b4
 10052a5:	mov    QWORD PTR [rsp+0x20],rax
 10052aa:	call   QWORD PTR [rip+0xffffffffffffc0d8]        # 0x1001388
 10052b0:	mov    DWORD PTR [rip+0xc1fa],eax        # 0x10114b0
 10052b6:	test   eax,eax
 10052b8:	jns    0x10052c4
 10052ba:	mov    ecx,0x8
 10052bf:	call   0x10059f6
 10052c4:	add    rsp,0x38
 10052c8:	ret    
 10052c9:	int3   
 10052ca:	int3   
 10052cb:	int3   
 10052cc:	int3   
 10052cd:	int3   
 10052ce:	int3   
 10052cf:	int3   
 10052d0:	mov    QWORD PTR [rsp+0x8],rbx
 10052d5:	push   rdi
 10052d6:	sub    rsp,0xa0
 10052dd:	and    DWORD PTR [rsp+0x20],0x0
 10052e2:	lea    rcx,[rsp+0x30]
 10052e7:	call   QWORD PTR [rip+0xffffffffffffbfab]        # 0x1001298
 10052ed:	nop
 10052ee:	mov    rax,QWORD PTR gs:0x30
 10052f7:	mov    rbx,QWORD PTR [rax+0x8]
 10052fb:	xor    edi,edi
 10052fd:	xor    eax,eax
 10052ff:	lock cmpxchg QWORD PTR [rip+0xea00],rbx        # 0x1013d08
 1005308:	je     0x1005323
 100530a:	cmp    rax,rbx
 100530d:	jne    0x1005316
 100530f:	mov    edi,0x1
 1005314:	jmp    0x1005323
 1005316:	mov    ecx,0x3e8
 100531b:	call   QWORD PTR [rip+0xffffffffffffbeef]        # 0x1001210
 1005321:	jmp    0x10052fd
 1005323:	mov    eax,DWORD PTR [rip+0xe9d7]        # 0x1013d00
 1005329:	cmp    eax,0x1
 100532c:	jne    0x1005338
 100532e:	lea    ecx,[rax+0x1e]
 1005331:	call   0x10059f6
 1005336:	jmp    0x1005377
 1005338:	mov    eax,DWORD PTR [rip+0xe9c2]        # 0x1013d00
 100533e:	test   eax,eax
 1005340:	jne    0x100536d
 1005342:	mov    DWORD PTR [rip+0xe9b4],0x1        # 0x1013d00
 100534c:	lea    rdx,[rip+0xffffffffffffc215]        # 0x1001568
 1005353:	lea    rcx,[rip+0xffffffffffffc1f6]        # 0x1001550
 100535a:	call   0x1005b84
 100535f:	test   eax,eax
 1005361:	je     0x1005377
 1005363:	mov    eax,0xff
 1005368:	jmp    0x10054be
 100536d:	mov    DWORD PTR [rip+0xc145],0x1        # 0x10114bc
 1005377:	mov    eax,DWORD PTR [rip+0xe983]        # 0x1013d00
 100537d:	cmp    eax,0x1
 1005380:	jne    0x100539f
 1005382:	lea    rdx,[rip+0xffffffffffffc1bf]        # 0x1001548
 1005389:	lea    rcx,[rip+0xffffffffffffc170]        # 0x1001500
 1005390:	call   0x1005b78
 1005395:	mov    DWORD PTR [rip+0xe961],0x2        # 0x1013d00
 100539f:	test   edi,edi
 10053a1:	jne    0x10053ac
 10053a3:	xor    eax,eax
 10053a5:	xchg   QWORD PTR [rip+0xe95c],rax        # 0x1013d08
 10053ac:	cmp    QWORD PTR [rip+0xe96c],0x0        # 0x1013d20
 10053b4:	je     0x10053d5
 10053b6:	lea    rcx,[rip+0xe963]        # 0x1013d20
 10053bd:	call   0x1005b30
 10053c2:	test   eax,eax
 10053c4:	je     0x10053d5
 10053c6:	xor    r8d,r8d
 10053c9:	lea    edx,[r8+0x2]
 10053cd:	xor    ecx,ecx
 10053cf:	call   QWORD PTR [rip+0xe94b]        # 0x1013d20
 10053d5:	mov    rax,QWORD PTR [rip+0xffffffffffffbfe4]        # 0x10013c0
 10053dc:	mov    rbx,QWORD PTR [rax]
 10053df:	mov    QWORD PTR [rsp+0x28],rbx
 10053e4:	mov    edi,DWORD PTR [rsp+0x20]
 10053e8:	cmp    BYTE PTR [rbx],0x20
 10053eb:	ja     0x100545d
 10053ed:	cmp    BYTE PTR [rbx],0x0
 10053f0:	je     0x10053f6
 10053f2:	test   edi,edi
 10053f4:	jne    0x100545d
 10053f6:	mov    al,BYTE PTR [rbx]
 10053f8:	test   al,al
 10053fa:	je     0x100540a
 10053fc:	cmp    al,0x20
 10053fe:	ja     0x100540a
 1005400:	inc    rbx
 1005403:	mov    QWORD PTR [rsp+0x28],rbx
 1005408:	jmp    0x10053f6
 100540a:	test   BYTE PTR [rsp+0x6c],0x1
 100540f:	movzx  eax,WORD PTR [rsp+0x70]
 1005414:	mov    r9d,0xa
 100541a:	cmovne r9d,eax
 100541e:	mov    r8,rbx
 1005421:	xor    edx,edx
 1005423:	lea    rcx,[rip+0xffffffffffffabd6]        # 0x1000000
 100542a:	call   0x1004230
 100542f:	mov    DWORD PTR [rip+0xc083],eax        # 0x10114b8
 1005435:	cmp    DWORD PTR [rip+0xc060],0x0        # 0x101149c
 100543c:	jne    0x1005446
 100543e:	mov    ecx,eax
 1005440:	call   QWORD PTR [rip+0xffffffffffffbf72]        # 0x10013b8
 1005446:	cmp    DWORD PTR [rip+0xc06f],0x0        # 0x10114bc
 100544d:	jne    0x100545b
 100544f:	call   QWORD PTR [rip+0xffffffffffffbf5b]        # 0x10013b0
 1005455:	mov    eax,DWORD PTR [rip+0xc05d]        # 0x10114b8
 100545b:	jmp    0x10054be
 100545d:	cmp    BYTE PTR [rbx],0x22
 1005460:	jne    0x100546f
 1005462:	xor    eax,eax
 1005464:	test   edi,edi
 1005466:	sete   al
 1005469:	mov    edi,eax
 100546b:	mov    DWORD PTR [rsp+0x20],eax
 100546f:	movzx  ecx,BYTE PTR [rbx]
 1005472:	call   QWORD PTR [rip+0xffffffffffffbf30]        # 0x10013a8
 1005478:	test   eax,eax
 100547a:	je     0x1005484
 100547c:	inc    rbx
 100547f:	mov    QWORD PTR [rsp+0x28],rbx
 1005484:	inc    rbx
 1005487:	mov    QWORD PTR [rsp+0x28],rbx
 100548c:	jmp    0x10053e8
 1005491:	mov    DWORD PTR [rip+0xc021],eax        # 0x10114b8
 1005497:	cmp    DWORD PTR [rip+0xbffe],0x0        # 0x101149c
 100549e:	jne    0x10054a9
 10054a0:	mov    ecx,eax
 10054a2:	call   QWORD PTR [rip+0xffffffffffffbef8]        # 0x10013a0
 10054a8:	int3   
 10054a9:	cmp    DWORD PTR [rip+0xc00c],0x0        # 0x10114bc
 10054b0:	jne    0x10054be
 10054b2:	call   QWORD PTR [rip+0xffffffffffffbef8]        # 0x10013b0
 10054b8:	mov    eax,DWORD PTR [rip+0xbffa]        # 0x10114b8
 10054be:	mov    rbx,QWORD PTR [rsp+0xb0]
 10054c6:	add    rsp,0xa0
 10054cd:	pop    rdi
 10054ce:	ret    
 10054cf:	int3   
 10054d0:	int3   
 10054d1:	int3   
 10054d2:	int3   
 10054d3:	int3   
 10054d4:	int3   
 10054d5:	int3   
 10054d6:	int3   
 10054d7:	int3   
 10054d8:	sub    rsp,0x28
 10054dc:	mov    eax,0x5a4d
 10054e1:	cmp    WORD PTR [rip+0xffffffffffffab18],ax        # 0x1000000
 10054e8:	je     0x10054ee
 10054ea:	xor    ecx,ecx
 10054ec:	jmp    0x1005526
 10054ee:	movsxd rax,DWORD PTR [rip+0xffffffffffffab47]        # 0x100003c
 10054f5:	lea    rcx,[rip+0xffffffffffffab04]        # 0x1000000
 10054fc:	add    rax,rcx
 10054ff:	cmp    DWORD PTR [rax],0x4550
 1005505:	jne    0x10054ea
 1005507:	mov    ecx,0x20b
 100550c:	cmp    WORD PTR [rax+0x18],cx
 1005510:	jne    0x10054ea
 1005512:	xor    ecx,ecx
 1005514:	cmp    DWORD PTR [rax+0x84],0xe
 100551b:	jbe    0x1005526
 100551d:	cmp    DWORD PTR [rax+0xf8],ecx
 1005523:	setne  cl
 1005526:	mov    DWORD PTR [rip+0xbf70],ecx        # 0x101149c
 100552c:	mov    ecx,0x2
 1005531:	call   QWORD PTR [rip+0xffffffffffffbec1]        # 0x10013f8
 1005537:	or     rcx,0xffffffffffffffff
 100553b:	call   QWORD PTR [rip+0xffffffffffffbd5f]        # 0x10012a0
 1005541:	mov    rcx,QWORD PTR [rip+0xffffffffffffbea8]        # 0x10013f0
 1005548:	mov    QWORD PTR [rip+0xe7c1],rax        # 0x1013d10
 100554f:	mov    QWORD PTR [rip+0xe7c2],rax        # 0x1013d18
 1005556:	mov    eax,DWORD PTR [rip+0xc4e0]        # 0x1011a3c
 100555c:	mov    DWORD PTR [rcx],eax
 100555e:	mov    rdx,QWORD PTR [rip+0xffffffffffffbe83]        # 0x10013e8
 1005565:	mov    eax,DWORD PTR [rip+0xc4cd]        # 0x1011a38
 100556b:	mov    DWORD PTR [rdx],eax
 100556d:	call   0x1005a04
 1005572:	call   0x1005b9c
 1005577:	cmp    DWORD PTR [rip+0xbbae],0x0        # 0x101112c
 100557e:	jne    0x100558d
 1005580:	lea    rcx,[rip+0x609]        # 0x1005b90
 1005587:	call   QWORD PTR [rip+0xffffffffffffbe53]        # 0x10013e0
 100558d:	cmp    DWORD PTR [rip+0xbb94],0xffffffff        # 0x1011128
 1005594:	jne    0x100559f
 1005596:	or     ecx,0xffffffff
 1005599:	call   QWORD PTR [rip+0xffffffffffffbe39]        # 0x10013d8
 100559f:	xor    eax,eax
 10055a1:	add    rsp,0x28
 10055a5:	ret    
 10055a6:	int3   
 10055a7:	int3   
 10055a8:	int3   
 10055a9:	int3   
 10055aa:	int3   
 10055ab:	int3   
 10055ac:	sub    rsp,0x28
 10055b0:	call   0x1005ba8
 10055b5:	add    rsp,0x28
 10055b9:	jmp    0x10052d0
 10055be:	int3   
 10055bf:	int3   
 10055c0:	int3   
 10055c1:	int3   
 10055c2:	int3   
 10055c3:	int3   
 10055c4:	jmp    QWORD PTR [rip+0xffffffffffffbd2e]        # 0x10012f8
 10055ca:	int3   
 10055cb:	int3   
 10055cc:	int3   
 10055cd:	int3   
 10055ce:	int3   
 10055cf:	int3   
 10055d0:	mov    QWORD PTR [rsp+0x8],rcx
 10055d5:	sub    rsp,0x88
 10055dc:	lea    rcx,[rip+0xbf7d]        # 0x1011560
 10055e3:	call   QWORD PTR [rip+0xffffffffffffbbf7]        # 0x10011e0
 10055e9:	mov    rax,QWORD PTR [rip+0xc068]        # 0x1011658
 10055f0:	mov    QWORD PTR [rsp+0x58],rax
 10055f5:	xor    r8d,r8d
 10055f8:	lea    rdx,[rsp+0x60]
 10055fd:	mov    rcx,QWORD PTR [rsp+0x58]
 1005602:	call   0x100d1f8
 1005607:	mov    QWORD PTR [rsp+0x50],rax
 100560c:	cmp    QWORD PTR [rsp+0x50],0x0
 1005612:	je     0x1005655
 1005614:	mov    QWORD PTR [rsp+0x38],0x0
 100561d:	lea    rax,[rsp+0x48]
 1005622:	mov    QWORD PTR [rsp+0x30],rax
 1005627:	lea    rax,[rsp+0x40]
 100562c:	mov    QWORD PTR [rsp+0x28],rax
 1005631:	lea    rax,[rip+0xbf28]        # 0x1011560
 1005638:	mov    QWORD PTR [rsp+0x20],rax
 100563d:	mov    r9,QWORD PTR [rsp+0x50]
 1005642:	mov    r8,QWORD PTR [rsp+0x58]
 1005647:	mov    rdx,QWORD PTR [rsp+0x60]
 100564c:	xor    ecx,ecx
 100564e:	call   0x100d1ec
 1005653:	jmp    0x1005677
 1005655:	mov    rax,QWORD PTR [rsp+0x88]
 100565d:	mov    QWORD PTR [rip+0xbff4],rax        # 0x1011658
 1005664:	lea    rax,[rsp+0x88]
 100566c:	add    rax,0x8
 1005670:	mov    QWORD PTR [rip+0xbf81],rax        # 0x10115f8
 1005677:	mov    rax,QWORD PTR [rip+0xbfda]        # 0x1011658
 100567e:	mov    QWORD PTR [rip+0xbe4b],rax        # 0x10114d0
 1005685:	mov    rax,QWORD PTR [rsp+0x90]
 100568d:	mov    QWORD PTR [rip+0xbf4c],rax        # 0x10115e0
 1005694:	mov    DWORD PTR [rip+0xbe22],0xc0000409        # 0x10114c0
 100569e:	mov    DWORD PTR [rip+0xbe1c],0x1        # 0x10114c4
 10056a8:	mov    rax,QWORD PTR [rip+0xba61]        # 0x1011110
 10056af:	mov    QWORD PTR [rsp+0x68],rax
 10056b4:	mov    rax,QWORD PTR [rip+0xba5d]        # 0x1011118
 10056bb:	mov    QWORD PTR [rsp+0x70],rax
 10056c0:	call   QWORD PTR [rip+0xffffffffffffbbea]        # 0x10012b0
 10056c6:	mov    DWORD PTR [rip+0xbe8c],eax        # 0x1011558
 10056cc:	mov    ecx,0x1
 10056d1:	call   0x1005c6e
 10056d6:	xor    ecx,ecx
 10056d8:	call   QWORD PTR [rip+0xffffffffffffbb72]        # 0x1001250
 10056de:	lea    rcx,[rip+0xffffffffffffc1bb]        # 0x10018a0
 10056e5:	call   QWORD PTR [rip+0xffffffffffffbbbd]        # 0x10012a8
 10056eb:	cmp    DWORD PTR [rip+0xbe66],0x0        # 0x1011558
 10056f2:	jne    0x10056fe
 10056f4:	mov    ecx,0x1
 10056f9:	call   0x1005c6e
 10056fe:	call   QWORD PTR [rip+0xffffffffffffbb5c]        # 0x1001260
 1005704:	mov    edx,0xc0000409
 1005709:	mov    rcx,rax
 100570c:	call   QWORD PTR [rip+0xffffffffffffbb46]        # 0x1001258
 1005712:	add    rsp,0x88
 1005719:	ret    
 100571a:	int3   
 100571b:	int3   
 100571c:	int3   
 100571d:	int3   
 100571e:	int3   
 100571f:	int3   
 1005720:	jmp    QWORD PTR [rip+0xffffffffffffbd0a]        # 0x1001430
 1005726:	int3   
 1005727:	int3   
 1005728:	int3   
 1005729:	int3   
 100572a:	int3   
 100572b:	int3   
 100572c:	rex push rbx
 100572e:	sub    rsp,0x20
 1005732:	mov    r11d,DWORD PTR [r8]
 1005735:	mov    rbx,rdx
 1005738:	mov    r9,rcx
 100573b:	and    r11d,0xfffffff8
 100573f:	test   BYTE PTR [r8],0x4
 1005743:	mov    r10,rcx
 1005746:	je     0x100575b
 1005748:	mov    eax,DWORD PTR [r8+0x8]
 100574c:	movsxd r10,DWORD PTR [r8+0x4]
 1005750:	neg    eax
 1005752:	add    r10,rcx
 1005755:	movsxd rcx,eax
 1005758:	and    r10,rcx
 100575b:	movsxd rax,r11d
 100575e:	mov    rdx,QWORD PTR [rax+r10*1]
 1005762:	mov    rax,QWORD PTR [rbx+0x10]
 1005766:	mov    ecx,DWORD PTR [rax+0x8]
 1005769:	add    rcx,QWORD PTR [rbx+0x8]
 100576d:	test   BYTE PTR [rcx+0x3],0xf
 1005771:	je     0x100577f
 1005773:	movzx  eax,BYTE PTR [rcx+0x3]
 1005777:	and    eax,0xfffffff0
 100577a:	cdqe   
 100577c:	add    r9,rax
 100577f:	xor    r9,rdx
 1005782:	mov    rcx,r9
 1005785:	add    rsp,0x20
 1005789:	pop    rbx
 100578a:	jmp    0x10057d0
 100578f:	int3   
 1005790:	int3   
 1005791:	int3   
 1005792:	int3   
 1005793:	int3   
 1005794:	int3   
 1005795:	int3   
 1005796:	int3   
 1005797:	int3   
 1005798:	sub    rsp,0x28
 100579c:	mov    r8,QWORD PTR [r9+0x38]
 10057a0:	mov    rcx,rdx
 10057a3:	mov    rdx,r9
 10057a6:	call   0x100572c
 10057ab:	mov    eax,0x1
 10057b0:	add    rsp,0x28
 10057b4:	ret    
 10057b5:	int3   
 10057b6:	int3   
 10057b7:	int3   
 10057b8:	int3   
 10057b9:	int3   
 10057ba:	int3   
 10057bb:	int3   
 10057bc:	int3   
 10057bd:	int3   
 10057be:	int3   
 10057bf:	int3   
 10057c0:	int3   
 10057c1:	int3   
 10057c2:	int3   
 10057c3:	int3   
 10057c4:	int3   
 10057c5:	int3   
 10057c6:	data16 nop WORD PTR [rax+rax*1+0x0]
 10057d0:	cmp    rcx,QWORD PTR [rip+0xb939]        # 0x1011110
 10057d7:	jne    0x10057ea
 10057d9:	rol    rcx,0x10
 10057dd:	test   cx,0xffff
 10057e2:	jne    0x10057e6
 10057e4:	repz ret 
 10057e6:	ror    rcx,0x10
 10057ea:	jmp    0x10055d0
 10057ef:	int3   
 10057f0:	int3   
 10057f1:	int3   
 10057f2:	int3   
 10057f3:	int3   
 10057f4:	int3   
 10057f5:	int3   
 10057f6:	jmp    QWORD PTR [rip+0xffffffffffffbb04]        # 0x1001300
 10057fc:	int3   
 10057fd:	int3   
 10057fe:	int3   
 10057ff:	int3   
 1005800:	int3   
 1005801:	int3   
 1005802:	int3   
 1005803:	int3   
 1005804:	rex push rbx
 1005806:	sub    rsp,0x20
 100580a:	mov    rbx,rcx
 100580d:	mov    rcx,QWORD PTR [rip+0xe504]        # 0x1013d18
 1005814:	call   QWORD PTR [rip+0xffffffffffffb9be]        # 0x10011d8
 100581a:	mov    QWORD PTR [rsp+0x38],rax
 100581f:	cmp    rax,0xffffffffffffffff
 1005823:	jne    0x1005830
 1005825:	mov    rcx,rbx
 1005828:	call   QWORD PTR [rip+0xffffffffffffbbfa]        # 0x1001428
 100582e:	jmp    0x10058ae
 1005830:	mov    ecx,0x8
 1005835:	call   0x1005c92
 100583a:	nop
 100583b:	mov    rcx,QWORD PTR [rip+0xe4d6]        # 0x1013d18
 1005842:	call   QWORD PTR [rip+0xffffffffffffb990]        # 0x10011d8
 1005848:	mov    QWORD PTR [rsp+0x38],rax
 100584d:	mov    rcx,QWORD PTR [rip+0xe4bc]        # 0x1013d10
 1005854:	call   QWORD PTR [rip+0xffffffffffffb97e]        # 0x10011d8
 100585a:	mov    QWORD PTR [rsp+0x40],rax
 100585f:	mov    rcx,rbx
 1005862:	call   QWORD PTR [rip+0xffffffffffffba38]        # 0x10012a0
 1005868:	mov    rcx,rax
 100586b:	lea    r8,[rsp+0x40]
 1005870:	lea    rdx,[rsp+0x38]
 1005875:	call   0x1005c86
 100587a:	mov    rbx,rax
 100587d:	mov    rcx,QWORD PTR [rsp+0x38]
 1005882:	call   QWORD PTR [rip+0xffffffffffffba18]        # 0x10012a0
 1005888:	mov    QWORD PTR [rip+0xe489],rax        # 0x1013d18
 100588f:	mov    rcx,QWORD PTR [rsp+0x40]
 1005894:	call   QWORD PTR [rip+0xffffffffffffba06]        # 0x10012a0
 100589a:	mov    QWORD PTR [rip+0xe46f],rax        # 0x1013d10
 10058a1:	mov    ecx,0x8
 10058a6:	call   0x1005c7a
 10058ab:	mov    rax,rbx
 10058ae:	add    rsp,0x20
 10058b2:	pop    rbx
 10058b3:	ret    
 10058b4:	int3   
 10058b5:	int3   
 10058b6:	int3   
 10058b7:	int3   
 10058b8:	int3   
 10058b9:	int3   
 10058ba:	int3   
 10058bb:	int3   
 10058bc:	sub    rsp,0x28
 10058c0:	call   0x1005804
 10058c5:	neg    rax
 10058c8:	sbb    eax,eax
 10058ca:	neg    eax
 10058cc:	dec    eax
 10058ce:	add    rsp,0x28
 10058d2:	ret    
 10058d3:	int3   
 10058d4:	int3   
 10058d5:	int3   
 10058d6:	int3   
 10058d7:	int3   
 10058d8:	int3   
 10058d9:	int3   
 10058da:	jmp    QWORD PTR [rip+0xffffffffffffba90]        # 0x1001370
 10058e0:	int3   
 10058e1:	int3   
 10058e2:	int3   
 10058e3:	int3   
 10058e4:	int3   
 10058e5:	int3   
 10058e6:	int3   
 10058e7:	int3   
 10058e8:	mov    rax,rsp
 10058eb:	mov    QWORD PTR [rax+0x8],rbx
 10058ef:	mov    QWORD PTR [rax+0x10],rbp
 10058f3:	mov    QWORD PTR [rax+0x18],rsi
 10058f7:	mov    QWORD PTR [rax+0x20],rdi
 10058fb:	push   r12
 10058fd:	sub    rsp,0x20
 1005901:	mov    r10,QWORD PTR [r9+0x38]
 1005905:	mov    rsi,rdx
 1005908:	mov    r12,r8
 100590b:	mov    eax,DWORD PTR [r10]
 100590e:	mov    rbp,rcx
 1005911:	mov    rdx,r9
 1005914:	add    rax,rax
 1005917:	mov    rcx,rsi
 100591a:	mov    rdi,r9
 100591d:	lea    rbx,[r10+rax*8+0x4]
 1005922:	mov    r8,rbx
 1005925:	call   0x100572c
 100592a:	mov    r11d,DWORD PTR [rbx]
 100592d:	mov    r10d,DWORD PTR [rbp+0x4]
 1005931:	mov    eax,r11d
 1005934:	and    r11d,0x2
 1005938:	mov    edx,0x1
 100593d:	and    eax,edx
 100593f:	and    r10b,0x66
 1005943:	cmove  r11d,eax
 1005947:	test   r11d,r11d
 100594a:	je     0x100595f
 100594c:	mov    r9,rdi
 100594f:	mov    r8,r12
 1005952:	mov    rdx,rsi
 1005955:	mov    rcx,rbp
 1005958:	call   0x1005a82
 100595d:	mov    edx,eax
 100595f:	mov    rbx,QWORD PTR [rsp+0x30]
 1005964:	mov    rbp,QWORD PTR [rsp+0x38]
 1005969:	mov    rsi,QWORD PTR [rsp+0x40]
 100596e:	mov    rdi,QWORD PTR [rsp+0x48]
 1005973:	mov    eax,edx
 1005975:	add    rsp,0x20
 1005979:	pop    r12
 100597b:	ret    
 100597c:	int3   
 100597d:	int3   
 100597e:	int3   
 100597f:	int3   
 1005980:	int3   
 1005981:	int3   
 1005982:	jmp    QWORD PTR [rip+0xffffffffffffb9f0]        # 0x1001378
 1005988:	int3   
 1005989:	int3   
 100598a:	int3   
 100598b:	int3   
 100598c:	int3   
 100598d:	int3   
 100598e:	int3   
 100598f:	int3   
 1005990:	sub    rsp,0x28
 1005994:	mov    rax,QWORD PTR [rcx]
 1005997:	cmp    DWORD PTR [rax],0xe06d7363
 100599d:	jne    0x10059ca
 100599f:	cmp    DWORD PTR [rax+0x18],0x4
 10059a3:	jne    0x10059ca
 10059a5:	mov    eax,DWORD PTR [rax+0x20]
 10059a8:	cmp    eax,0x19930520
 10059ad:	je     0x10059c4
 10059af:	cmp    eax,0x19930521
 10059b4:	je     0x10059c4
 10059b6:	cmp    eax,0x19930522
 10059bb:	je     0x10059c4
 10059bd:	cmp    eax,0x1994000
 10059c2:	jne    0x10059ca
 10059c4:	call   0x1005c62
 10059c9:	int3   
 10059ca:	xor    eax,eax
 10059cc:	add    rsp,0x28
 10059d0:	ret    
 10059d1:	int3   
 10059d2:	int3   
 10059d3:	int3   
 10059d4:	int3   
 10059d5:	int3   
 10059d6:	int3   
 10059d7:	int3   
 10059d8:	sub    rsp,0x28
 10059dc:	lea    rcx,[rip+0xffffffffffffffad]        # 0x1005990
 10059e3:	call   QWORD PTR [rip+0xffffffffffffb867]        # 0x1001250
 10059e9:	xor    eax,eax
 10059eb:	add    rsp,0x28
 10059ef:	ret    
 10059f0:	int3   
 10059f1:	int3   
 10059f2:	int3   
 10059f3:	int3   
 10059f4:	int3   
 10059f5:	int3   
 10059f6:	jmp    QWORD PTR [rip+0xffffffffffffb984]        # 0x1001380
 10059fc:	int3   
 10059fd:	int3   
 10059fe:	int3   
 10059ff:	int3   
 1005a00:	int3   
 1005a01:	int3   
 1005a02:	int3   
 1005a03:	int3   
 1005a04:	mov    QWORD PTR [rsp+0x8],rbx
 1005a09:	push   rdi
 1005a0a:	sub    rsp,0x20
 1005a0e:	lea    rbx,[rip+0xffffffffffffe7eb]        # 0x1004200
 1005a15:	lea    rdi,[rip+0xffffffffffffe7e4]        # 0x1004200
 1005a1c:	jmp    0x1005a2c
 1005a1e:	mov    rax,QWORD PTR [rbx]
 1005a21:	test   rax,rax
 1005a24:	je     0x1005a28
 1005a26:	call   rax
 1005a28:	add    rbx,0x8
 1005a2c:	cmp    rbx,rdi
 1005a2f:	jb     0x1005a1e
 1005a31:	mov    rbx,QWORD PTR [rsp+0x30]
 1005a36:	add    rsp,0x20
 1005a3a:	pop    rdi
 1005a3b:	ret    
 1005a3c:	int3   
 1005a3d:	int3   
 1005a3e:	int3   
 1005a3f:	int3   
 1005a40:	int3   
 1005a41:	int3   
 1005a42:	int3   
 1005a43:	int3   
 1005a44:	mov    QWORD PTR [rsp+0x8],rbx
 1005a49:	push   rdi
 1005a4a:	sub    rsp,0x20
 1005a4e:	lea    rbx,[rip+0xffffffffffffe7bb]        # 0x1004210
 1005a55:	lea    rdi,[rip+0xffffffffffffe7b4]        # 0x1004210
 1005a5c:	jmp    0x1005a6c
 1005a5e:	mov    rax,QWORD PTR [rbx]
 1005a61:	test   rax,rax
 1005a64:	je     0x1005a68
 1005a66:	call   rax
 1005a68:	add    rbx,0x8
 1005a6c:	cmp    rbx,rdi
 1005a6f:	jb     0x1005a5e
 1005a71:	mov    rbx,QWORD PTR [rsp+0x30]
 1005a76:	add    rsp,0x20
 1005a7a:	pop    rdi
 1005a7b:	ret    
 1005a7c:	int3   
 1005a7d:	int3   
 1005a7e:	int3   
 1005a7f:	int3   
 1005a80:	int3   
 1005a81:	int3   
 1005a82:	jmp    QWORD PTR [rip+0xffffffffffffb908]        # 0x1001390
 1005a88:	int3   
 1005a89:	int3   
 1005a8a:	int3   
 1005a8b:	int3   
 1005a8c:	int3   
 1005a8d:	int3   
 1005a8e:	jmp    QWORD PTR [rip+0xffffffffffffb904]        # 0x1001398
 1005a94:	int3   
 1005a95:	int3   
 1005a96:	int3   
 1005a97:	int3   
 1005a98:	int3   
 1005a99:	int3   
 1005a9a:	int3   
 1005a9b:	int3   
 1005a9c:	int3   
 1005a9d:	int3   
 1005a9e:	int3   
 1005a9f:	int3   
 1005aa0:	mov    rax,rcx
 1005aa3:	mov    ecx,0x5a4d
 1005aa8:	cmp    WORD PTR [rax],cx
 1005aab:	je     0x1005ab0
 1005aad:	xor    eax,eax
 1005aaf:	ret    
 1005ab0:	movsxd rcx,DWORD PTR [rax+0x3c]
 1005ab4:	add    rcx,rax
 1005ab7:	xor    eax,eax
 1005ab9:	cmp    DWORD PTR [rcx],0x4550
 1005abf:	jne    0x1005acd
 1005ac1:	mov    edx,0x20b
 1005ac6:	cmp    WORD PTR [rcx+0x18],dx
 1005aca:	sete   al
 1005acd:	repz ret 
 1005acf:	int3   
 1005ad0:	int3   
 1005ad1:	int3   
 1005ad2:	int3   
 1005ad3:	int3   
 1005ad4:	int3   
 1005ad5:	int3   
 1005ad6:	int3   
 1005ad7:	int3   
 1005ad8:	int3   
 1005ad9:	int3   
 1005ada:	int3   
 1005adb:	int3   
 1005adc:	int3   
 1005add:	int3   
 1005ade:	int3   
 1005adf:	int3   
 1005ae0:	movsxd r8,DWORD PTR [rcx+0x3c]
 1005ae4:	xor    r9d,r9d
 1005ae7:	mov    r10,rdx
 1005aea:	add    r8,rcx
 1005aed:	movzx  eax,WORD PTR [r8+0x14]
 1005af2:	movzx  r11d,WORD PTR [r8+0x6]
 1005af7:	lea    rcx,[rax+r8*1+0x18]
 1005afc:	test   r11d,r11d
 1005aff:	je     0x1005b1f
 1005b01:	mov    edx,DWORD PTR [rcx+0xc]
 1005b04:	cmp    r10,rdx
 1005b07:	jb     0x1005b13
 1005b09:	mov    eax,DWORD PTR [rcx+0x8]
 1005b0c:	add    eax,edx
 1005b0e:	cmp    r10,rax
 1005b11:	jb     0x1005b22
 1005b13:	inc    r9d
 1005b16:	add    rcx,0x28
 1005b1a:	cmp    r9d,r11d
 1005b1d:	jb     0x1005b01
 1005b1f:	xor    eax,eax
 1005b21:	ret    
 1005b22:	mov    rax,rcx
 1005b25:	ret    
 1005b26:	int3   
 1005b27:	int3   
 1005b28:	int3   
 1005b29:	int3   
 1005b2a:	int3   
 1005b2b:	int3   
 1005b2c:	int3   
 1005b2d:	int3   
 1005b2e:	int3   
 1005b2f:	int3   
 1005b30:	sub    rsp,0x28
 1005b34:	mov    r8,rcx
 1005b37:	lea    r9,[rip+0xffffffffffffa4c2]        # 0x1000000
 1005b3e:	mov    rcx,r9
 1005b41:	call   0x1005aa0
 1005b46:	test   eax,eax
 1005b48:	je     0x1005b6c
 1005b4a:	sub    r8,r9
 1005b4d:	mov    rdx,r8
 1005b50:	mov    rcx,r9
 1005b53:	call   0x1005ae0
 1005b58:	test   rax,rax
 1005b5b:	je     0x1005b6c
 1005b5d:	mov    eax,DWORD PTR [rax+0x24]
 1005b60:	shr    eax,0x1f
 1005b63:	not    eax
 1005b65:	and    eax,0x1
 1005b68:	jmp    0x1005b6c
 1005b6a:	xor    eax,eax
 1005b6c:	add    rsp,0x28
 1005b70:	ret    
 1005b71:	int3   
 1005b72:	int3   
 1005b73:	int3   
 1005b74:	int3   
 1005b75:	int3   
 1005b76:	int3   
 1005b77:	int3   
 1005b78:	jmp    QWORD PTR [rip+0xffffffffffffb84a]        # 0x10013c8
 1005b7e:	int3   
 1005b7f:	int3   
 1005b80:	int3   
 1005b81:	int3   
 1005b82:	int3   
 1005b83:	int3   
 1005b84:	jmp    QWORD PTR [rip+0xffffffffffffb846]        # 0x10013d0
 1005b8a:	int3   
 1005b8b:	int3   
 1005b8c:	int3   
 1005b8d:	int3   
 1005b8e:	int3   
 1005b8f:	int3   
 1005b90:	xor    eax,eax
 1005b92:	ret    
 1005b93:	int3   
 1005b94:	int3   
 1005b95:	int3   
 1005b96:	int3   
 1005b97:	int3   
 1005b98:	int3   
 1005b99:	int3   
 1005b9a:	int3   
 1005b9b:	int3   
 1005b9c:	xor    eax,eax
 1005b9e:	ret    
 1005b9f:	int3   
 1005ba0:	int3   
 1005ba1:	int3   
 1005ba2:	int3   
 1005ba3:	int3   
 1005ba4:	int3   
 1005ba5:	int3   
 1005ba6:	int3   
 1005ba7:	int3   
 1005ba8:	mov    QWORD PTR [rsp+0x18],rbx
 1005bad:	push   rdi
 1005bae:	sub    rsp,0x20
 1005bb2:	mov    rax,QWORD PTR [rip+0xb557]        # 0x1011110
 1005bb9:	and    QWORD PTR [rsp+0x30],0x0
 1005bbf:	movabs rdi,0x2b992ddfa232
 1005bc9:	cmp    rax,rdi
 1005bcc:	je     0x1005bda
 1005bce:	not    rax
 1005bd1:	mov    QWORD PTR [rip+0xb540],rax        # 0x1011118
 1005bd8:	jmp    0x1005c50
 1005bda:	lea    rcx,[rsp+0x30]
 1005bdf:	call   QWORD PTR [rip+0xffffffffffffb5d3]        # 0x10011b8
 1005be5:	mov    rbx,QWORD PTR [rsp+0x30]
 1005bea:	call   QWORD PTR [rip+0xffffffffffffb5d0]        # 0x10011c0
 1005bf0:	mov    r11d,eax
 1005bf3:	xor    rbx,r11
 1005bf6:	call   QWORD PTR [rip+0xffffffffffffb64c]        # 0x1001248
 1005bfc:	mov    r11d,eax
 1005bff:	xor    rbx,r11
 1005c02:	call   QWORD PTR [rip+0xffffffffffffb5c0]        # 0x10011c8
 1005c08:	lea    rcx,[rsp+0x38]
 1005c0d:	mov    r11d,eax
 1005c10:	xor    rbx,r11
 1005c13:	call   QWORD PTR [rip+0xffffffffffffb5b7]        # 0x10011d0
 1005c19:	mov    r11,QWORD PTR [rsp+0x38]
 1005c1e:	xor    r11,rbx
 1005c21:	movabs rax,0xffffffffffff
 1005c2b:	and    r11,rax
 1005c2e:	movabs rax,0x2b992ddfa233
 1005c38:	cmp    r11,rdi
 1005c3b:	cmove  r11,rax
 1005c3f:	mov    QWORD PTR [rip+0xb4ca],r11        # 0x1011110
 1005c46:	not    r11
 1005c49:	mov    QWORD PTR [rip+0xb4c8],r11        # 0x1011118
 1005c50:	mov    rbx,QWORD PTR [rsp+0x40]
 1005c55:	add    rsp,0x20
 1005c59:	pop    rdi
 1005c5a:	ret    
 1005c5b:	int3   
 1005c5c:	int3   
 1005c5d:	int3   
 1005c5e:	int3   
 1005c5f:	int3   
 1005c60:	int3   
 1005c61:	int3   
 1005c62:	jmp    QWORD PTR [rip+0xffffffffffffb798]        # 0x1001400
 1005c68:	int3   
 1005c69:	int3   
 1005c6a:	int3   
 1005c6b:	int3   
 1005c6c:	int3   
 1005c6d:	int3   
 1005c6e:	jmp    QWORD PTR [rip+0xffffffffffffb794]        # 0x1001408
 1005c74:	int3   
 1005c75:	int3   
 1005c76:	int3   
 1005c77:	int3   
 1005c78:	int3   
 1005c79:	int3   
 1005c7a:	jmp    QWORD PTR [rip+0xffffffffffffb790]        # 0x1001410
 1005c80:	int3   
 1005c81:	int3   
 1005c82:	int3   
 1005c83:	int3   
 1005c84:	int3   
 1005c85:	int3   
 1005c86:	jmp    QWORD PTR [rip+0xffffffffffffb78c]        # 0x1001418
 1005c8c:	int3   
 1005c8d:	int3   
 1005c8e:	int3   
 1005c8f:	int3   
 1005c90:	int3   
 1005c91:	int3   
 1005c92:	jmp    QWORD PTR [rip+0xffffffffffffb788]        # 0x1001420
 1005c98:	int3   
 1005c99:	int3   
 1005c9a:	int3   
 1005c9b:	int3   
 1005c9c:	int3   
 1005c9d:	int3   
 1005c9e:	int3   
 1005c9f:	int3   
 1005ca0:	mov    QWORD PTR [rsp+0x8],rbx
 1005ca5:	push   rbp
 1005ca6:	mov    rbp,rsp
 1005ca9:	sub    rsp,0x20
 1005cad:	mov    rbx,rcx
 1005cb0:	add    rcx,0x28
 1005cb4:	call   QWORD PTR [rip+0xffffffffffffb5be]        # 0x1001278
 1005cba:	mov    rcx,QWORD PTR [rbx+0x50]
 1005cbe:	test   rcx,rcx
 1005cc1:	je     0x1005ccd
 1005cc3:	call   0x1005720
 1005cc8:	and    QWORD PTR [rbx+0x50],0x0
 1005ccd:	and    DWORD PTR [rbx+0x58],0x0
 1005cd1:	and    DWORD PTR [rbx+0x5c],0x0
 1005cd5:	mov    rbx,QWORD PTR [rsp+0x30]
 1005cda:	add    rsp,0x20
 1005cde:	pop    rbp
 1005cdf:	ret    
 1005ce0:	int3   
 1005ce1:	int3   
 1005ce2:	int3   
 1005ce3:	int3   
 1005ce4:	int3   
 1005ce5:	int3   
 1005ce6:	int3   
 1005ce7:	int3   
 1005ce8:	mov    QWORD PTR [rsp+0x8],rbx
 1005ced:	mov    QWORD PTR [rsp+0x10],rdi
 1005cf2:	push   rbp
 1005cf3:	mov    rbp,rsp
 1005cf6:	sub    rsp,0x20
 1005cfa:	xor    edx,edx
 1005cfc:	mov    rdi,rcx
 1005cff:	lea    r8d,[rdx+0x28]
 1005d03:	add    rcx,r8
 1005d06:	call   0x1005982
 1005d0b:	and    QWORD PTR [rdi+0x50],0x0
 1005d10:	and    DWORD PTR [rdi+0x58],0x0
 1005d14:	and    DWORD PTR [rdi+0x5c],0x0
 1005d18:	lea    rax,[rip+0xffffffffffffa2e1]        # 0x1000000
 1005d1f:	lea    rcx,[rdi+0x28]
 1005d23:	mov    QWORD PTR [rdi+0x10],rax
 1005d27:	mov    QWORD PTR [rdi+0x8],rax
 1005d2b:	lea    rax,[rip+0xffffffffffffbb9e]        # 0x10018d0
 1005d32:	xor    edx,edx
 1005d34:	mov    DWORD PTR [rdi],0x60
 1005d3a:	mov    DWORD PTR [rdi+0x18],0xa00
 1005d41:	mov    QWORD PTR [rdi+0x20],rax
 1005d45:	call   QWORD PTR [rip+0xffffffffffffb4d5]        # 0x1001220
 1005d4b:	test   eax,eax
 1005d4d:	jne    0x1005d7a
 1005d4f:	call   QWORD PTR [rip+0xffffffffffffb4eb]        # 0x1001240
 1005d55:	mov    edx,0x1
 1005d5a:	movzx  ecx,ax
 1005d5d:	or     ecx,0x80070000
 1005d63:	test   eax,eax
 1005d65:	cmovle ecx,eax
 1005d68:	movzx  eax,BYTE PTR [rip+0xb451]        # 0x10111c0
 1005d6f:	test   ecx,ecx
 1005d71:	cmovs  eax,edx
 1005d74:	mov    BYTE PTR [rip+0xb446],al        # 0x10111c0
 1005d7a:	mov    rbx,QWORD PTR [rsp+0x30]
 1005d7f:	mov    rax,rdi
 1005d82:	mov    rdi,QWORD PTR [rsp+0x38]
 1005d87:	add    rsp,0x20
 1005d8b:	pop    rbp
 1005d8c:	ret    
 1005d8d:	int3   
 1005d8e:	int3   
 1005d8f:	int3   
 1005d90:	int3   
 1005d91:	int3   
 1005d92:	int3   
 1005d93:	int3   
 1005d94:	mov    QWORD PTR [rsp+0x8],rbx
 1005d99:	mov    QWORD PTR [rsp+0x10],rdi
 1005d9e:	push   rbp
 1005d9f:	mov    rbp,rsp
 1005da2:	sub    rsp,0x20
 1005da6:	xor    edx,edx
 1005da8:	mov    rdi,rcx
 1005dab:	add    rcx,0x20
 1005daf:	lea    r8d,[rdx+0x28]
 1005db3:	call   0x1005982
 1005db8:	and    DWORD PTR [rdi],0x0
 1005dbb:	lea    rax,[rip+0xffffffffffffa23e]        # 0x1000000
 1005dc2:	mov    QWORD PTR [rdi+0x8],rax
 1005dc6:	lea    rax,[rip+0x9cc3]        # 0x100fa90
 1005dcd:	lea    rcx,[rdi+0x20]
 1005dd1:	mov    QWORD PTR [rdi+0x10],rax
 1005dd5:	lea    rax,[rip+0x9cb4]        # 0x100fa90
 1005ddc:	xor    edx,edx
 1005dde:	mov    QWORD PTR [rdi+0x18],rax
 1005de2:	call   QWORD PTR [rip+0xffffffffffffb438]        # 0x1001220
 1005de8:	test   eax,eax
 1005dea:	jne    0x1005e0d
 1005dec:	call   QWORD PTR [rip+0xffffffffffffb44e]        # 0x1001240
 1005df2:	movzx  ecx,ax
 1005df5:	or     ecx,0x80070000
 1005dfb:	test   eax,eax
 1005dfd:	cmovle ecx,eax
 1005e00:	test   ecx,ecx
 1005e02:	jns    0x1005e0d
 1005e04:	mov    BYTE PTR [rip+0xb3b5],0x1        # 0x10111c0
 1005e0b:	jmp    0x1005e13
 1005e0d:	mov    DWORD PTR [rdi],0x48
 1005e13:	mov    rbx,QWORD PTR [rsp+0x30]
 1005e18:	mov    rax,rdi
 1005e1b:	mov    rdi,QWORD PTR [rsp+0x38]
 1005e20:	add    rsp,0x20
 1005e24:	pop    rbp
 1005e25:	ret    
 1005e26:	int3   
 1005e27:	int3   
 1005e28:	int3   
 1005e29:	int3   
 1005e2a:	int3   
 1005e2b:	int3   
 1005e2c:	int3   
 1005e2d:	int3   
 1005e2e:	int3   
 1005e2f:	int3   
 1005e30:	mov    QWORD PTR [rsp+0x10],rbp
 1005e35:	mov    QWORD PTR [rsp+0x18],rsi
 1005e3a:	push   rdi
 1005e3b:	sub    rsp,0x20
 1005e3f:	mov    edi,r8d
 1005e42:	mov    rsi,rdx
 1005e45:	mov    rbp,rcx
 1005e48:	call   QWORD PTR [rip+0xffffffffffffb352]        # 0x10011a0
 1005e4e:	test   rax,rax
 1005e51:	jne    0x1005e63
 1005e53:	mov    rbp,QWORD PTR [rsp+0x38]
 1005e58:	mov    rsi,QWORD PTR [rsp+0x40]
 1005e5d:	add    rsp,0x20
 1005e61:	pop    rdi
 1005e62:	ret    
 1005e63:	mov    rcx,rax
 1005e66:	mov    QWORD PTR [rsp+0x30],rbx
 1005e6b:	call   QWORD PTR [rip+0xffffffffffffb33f]        # 0x10011b0
 1005e71:	mov    rbx,rax
 1005e74:	test   rax,rax
 1005e77:	je     0x1005ea9
 1005e79:	mov    rdx,rsi
 1005e7c:	mov    rcx,rbp
 1005e7f:	call   QWORD PTR [rip+0xffffffffffffb313]        # 0x1001198
 1005e85:	mov    r11d,eax
 1005e88:	add    r11,rbx
 1005e8b:	and    edi,0xf
 1005e8e:	jbe    0x1005ea4
 1005e90:	cmp    rbx,r11
 1005e93:	jae    0x1005ea9
 1005e95:	movzx  eax,WORD PTR [rbx]
 1005e98:	lea    rbx,[rbx+rax*2]
 1005e9c:	add    rbx,0x2
 1005ea0:	dec    edi
 1005ea2:	jne    0x1005e90
 1005ea4:	cmp    rbx,r11
 1005ea7:	jb     0x1005ead
 1005ea9:	xor    eax,eax
 1005eab:	jmp    0x1005eb9
 1005ead:	xor    eax,eax
 1005eaf:	cmp    WORD PTR [rbx],ax
 1005eb2:	cmove  rbx,rax
 1005eb6:	mov    rax,rbx
 1005eb9:	mov    rbx,QWORD PTR [rsp+0x30]
 1005ebe:	mov    rbp,QWORD PTR [rsp+0x38]
 1005ec3:	mov    rsi,QWORD PTR [rsp+0x40]
 1005ec8:	add    rsp,0x20
 1005ecc:	pop    rdi
 1005ecd:	ret    
 1005ece:	int3   
 1005ecf:	int3   
 1005ed0:	int3   
 1005ed1:	int3   
 1005ed2:	int3   
 1005ed3:	int3   
 1005ed4:	int3   
 1005ed5:	int3   
 1005ed6:	int3   
 1005ed7:	int3   
 1005ed8:	int3   
 1005ed9:	int3   
 1005eda:	int3   
 1005edb:	int3   
 1005edc:	int3   
 1005edd:	int3   
 1005ede:	int3   
 1005edf:	int3   
 1005ee0:	mov    QWORD PTR [rsp+0x8],rbx
 1005ee5:	mov    QWORD PTR [rsp+0x10],rsi
 1005eea:	push   rdi
 1005eeb:	sub    rsp,0x20
 1005eef:	mov    rdi,r8
 1005ef2:	lea    r8,[rsp+0x40]
 1005ef7:	call   0x1005f30
 1005efc:	mov    rcx,QWORD PTR [rdi]
 1005eff:	mov    rsi,QWORD PTR [rsp+0x40]
 1005f04:	mov    ebx,eax
 1005f06:	cmp    rcx,rsi
 1005f09:	je     0x1005f16
 1005f0b:	call   QWORD PTR [rip+0xffffffffffffb537]        # 0x1001448
 1005f11:	mov    QWORD PTR [rdi],rsi
 1005f14:	mov    eax,ebx
 1005f16:	mov    rbx,QWORD PTR [rsp+0x30]
 1005f1b:	mov    rsi,QWORD PTR [rsp+0x38]
 1005f20:	add    rsp,0x20
 1005f24:	pop    rdi
 1005f25:	ret    
 1005f26:	int3   
 1005f27:	int3   
 1005f28:	int3   
 1005f29:	int3   
 1005f2a:	int3   
 1005f2b:	int3   
 1005f2c:	int3   
 1005f2d:	int3   
 1005f2e:	int3   
 1005f2f:	int3   
 1005f30:	mov    QWORD PTR [rsp+0x8],rbx
 1005f35:	mov    QWORD PTR [rsp+0x10],rbp
 1005f3a:	mov    QWORD PTR [rsp+0x18],rsi
 1005f3f:	push   rdi
 1005f40:	push   r14
 1005f42:	push   r15
 1005f44:	sub    rsp,0x20
 1005f48:	cmp    BYTE PTR [rip+0xbba1],0x0        # 0x1011af0
 1005f4f:	mov    r14,r8
 1005f52:	mov    ebp,edx
 1005f54:	mov    rsi,rcx
 1005f57:	jne    0x1005f9e
 1005f59:	call   QWORD PTR [rip+0xffffffffffffb229]        # 0x1001188
 1005f5f:	mov    ecx,0x409
 1005f64:	cmp    ax,cx
 1005f67:	jne    0x1005f7c
 1005f69:	mov    rbx,rsi
 1005f6c:	mov    BYTE PTR [rip+0xbb7d],0x1        # 0x1011af0
 1005f73:	mov    QWORD PTR [rip+0xbb6e],rbx        # 0x1011ae8
 1005f7a:	jmp    0x1005fa5
 1005f7c:	mov    rcx,rsi
 1005f7f:	call   0x100d5c0
 1005f84:	mov    BYTE PTR [rip+0xbb65],0x1        # 0x1011af0
 1005f8b:	mov    rbx,rax
 1005f8e:	test   rax,rax
 1005f91:	cmove  rbx,rsi
 1005f95:	mov    QWORD PTR [rip+0xbb4c],rbx        # 0x1011ae8
 1005f9c:	jmp    0x1005fa5
 1005f9e:	mov    rbx,QWORD PTR [rip+0xbb43]        # 0x1011ae8
 1005fa5:	xor    ecx,ecx
 1005fa7:	call   QWORD PTR [rip+0xffffffffffffb49b]        # 0x1001448
 1005fad:	mov    r11d,ebp
 1005fb0:	mov    r8d,0x6
 1005fb6:	shr    r11d,0x4
 1005fba:	mov    rcx,rbx
 1005fbd:	inc    r11w
 1005fc1:	movzx  r15d,r11w
 1005fc5:	mov    edx,r15d
 1005fc8:	call   QWORD PTR [rip+0xffffffffffffb1c2]        # 0x1001190
 1005fce:	xor    edi,edi
 1005fd0:	test   rax,rax
 1005fd3:	je     0x1005ff7
 1005fd5:	mov    r8d,ebp
 1005fd8:	mov    rdx,rax
 1005fdb:	mov    rcx,rbx
 1005fde:	call   0x1005e30
 1005fe3:	test   rax,rax
 1005fe6:	je     0x1005ff7
 1005fe8:	movzx  edx,WORD PTR [rax]
 1005feb:	lea    rcx,[rax+0x2]
 1005fef:	call   QWORD PTR [rip+0xffffffffffffb44b]        # 0x1001440
 1005ff5:	jmp    0x1005ffa
 1005ff7:	mov    rax,rdi
 1005ffa:	test   rax,rax
 1005ffd:	setne  bl
 1006000:	test   bl,bl
 1006002:	jne    0x1006058
 1006004:	mov    rcx,rax
 1006007:	call   QWORD PTR [rip+0xffffffffffffb43b]        # 0x1001448
 100600d:	mov    r8d,0x6
 1006013:	mov    rdx,r15
 1006016:	mov    rcx,rsi
 1006019:	call   QWORD PTR [rip+0xffffffffffffb171]        # 0x1001190
 100601f:	test   rax,rax
 1006022:	je     0x1006046
 1006024:	mov    r8d,ebp
 1006027:	mov    rdx,rax
 100602a:	mov    rcx,rsi
 100602d:	call   0x1005e30
 1006032:	test   rax,rax
 1006035:	je     0x1006046
 1006037:	movzx  edx,WORD PTR [rax]
 100603a:	lea    rcx,[rax+0x2]
 100603e:	call   QWORD PTR [rip+0xffffffffffffb3fc]        # 0x1001440
 1006044:	jmp    0x1006049
 1006046:	mov    rax,rdi
 1006049:	test   rax,rax
 100604c:	setne  bl
 100604f:	test   bl,bl
 1006051:	jne    0x1006058
 1006053:	mov    QWORD PTR [r14],rdi
 1006056:	jmp    0x1006061
 1006058:	mov    rcx,rax
 100605b:	mov    rax,rdi
 100605e:	mov    QWORD PTR [r14],rcx
 1006061:	mov    rcx,rax
 1006064:	call   QWORD PTR [rip+0xffffffffffffb3de]        # 0x1001448
 100606a:	mov    rbp,QWORD PTR [rsp+0x48]
 100606f:	mov    rsi,QWORD PTR [rsp+0x50]
 1006074:	test   bl,bl
 1006076:	mov    rbx,QWORD PTR [rsp+0x40]
 100607b:	setne  dil
 100607f:	mov    eax,edi
 1006081:	add    rsp,0x20
 1006085:	pop    r15
 1006087:	pop    r14
 1006089:	pop    rdi
 100608a:	ret    
 100608b:	int3   
 100608c:	int3   
 100608d:	int3   
 100608e:	int3   
 100608f:	int3   
 1006090:	int3   
 1006091:	int3   
 1006092:	int3   
 1006093:	int3   
 1006094:	int3   
 1006095:	int3   
 1006096:	int3   
 1006097:	int3   
 1006098:	int3   
 1006099:	int3   
 100609a:	int3   
 100609b:	int3   
 100609c:	int3   
 100609d:	int3   
 100609e:	int3   
 100609f:	int3   
 10060a0:	mov    QWORD PTR [rsp+0x10],rbx
 10060a5:	mov    QWORD PTR [rsp+0x18],rsi
 10060aa:	push   rdi
 10060ab:	sub    rsp,0x20
 10060af:	mov    rdi,r8
 10060b2:	mov    rsi,rdx
 10060b5:	cmp    ecx,0x8
 10060b8:	ja     0x10061ae
 10060be:	lea    rdx,[rip+0xffffffffffff9f3b]        # 0x1000000
 10060c5:	movsxd rax,ecx
 10060c8:	mov    ecx,DWORD PTR [rdx+rax*4+0x61c4]
 10060cf:	add    rcx,rdx
 10060d2:	jmp    rcx
 10060d4:	xor    ebx,ebx
 10060d6:	mov    eax,ebx
 10060d8:	jmp    0x100612b
 10060da:	lea    rbx,[rip+0xffffffffffffb8e7]        # 0x10019c8
 10060e1:	jmp    0x1006120
 10060e3:	lea    rbx,[rip+0xffffffffffffb8ee]        # 0x10019d8
 10060ea:	jmp    0x1006120
 10060ec:	lea    rbx,[rip+0xffffffffffffb8f5]        # 0x10019e8
 10060f3:	jmp    0x1006120
 10060f5:	lea    rbx,[rip+0xffffffffffffb914]        # 0x1001a10
 10060fc:	jmp    0x1006120
 10060fe:	lea    rbx,[rip+0xffffffffffffb933]        # 0x1001a38
 1006105:	jmp    0x1006120
 1006107:	lea    rbx,[rip+0xffffffffffffb942]        # 0x1001a50
 100610e:	jmp    0x1006120
 1006110:	lea    rbx,[rip+0xffffffffffffb959]        # 0x1001a70
 1006117:	jmp    0x1006120
 1006119:	lea    rbx,[rip+0xffffffffffffb968]        # 0x1001a88
 1006120:	mov    rcx,rbx
 1006123:	call   QWORD PTR [rip+0xffffffffffffb04f]        # 0x1001178
 1006129:	inc    eax
 100612b:	mov    ecx,DWORD PTR [rdi]
 100612d:	sub    ecx,eax
 100612f:	mov    DWORD PTR [rsp+0x30],ecx
 1006133:	call   0x1008430
 1006138:	test   eax,eax
 100613a:	jne    0x100615e
 100613c:	call   QWORD PTR [rip+0xffffffffffffb0fe]        # 0x1001240
 1006142:	test   eax,eax
 1006144:	jle    0x10061b3
 1006146:	movzx  eax,ax
 1006149:	or     eax,0x80070000
 100614e:	mov    rbx,QWORD PTR [rsp+0x38]
 1006153:	mov    rsi,QWORD PTR [rsp+0x40]
 1006158:	add    rsp,0x20
 100615c:	pop    rdi
 100615d:	ret    
 100615e:	lea    r9,[rsp+0x30]
 1006163:	lea    rcx,[rip+0xffffffffffffb936]        # 0x1001aa0
 100616a:	mov    r8,rsi
 100616d:	xor    edx,edx
 100616f:	call   0x1008416
 1006174:	test   eax,eax
 1006176:	je     0x100613c
 1006178:	test   rbx,rbx
 100617b:	je     0x1006191
 100617d:	mov    edx,DWORD PTR [rdi]
 100617f:	xor    r9d,r9d
 1006182:	mov    r8,rbx
 1006185:	mov    rcx,rsi
 1006188:	call   0x1007820
 100618d:	test   eax,eax
 100618f:	js     0x10061b3
 1006191:	mov    edx,DWORD PTR [rdi]
 1006193:	mov    r8,rdi
 1006196:	mov    rcx,rsi
 1006199:	call   0x10064a0
 100619e:	mov    rbx,QWORD PTR [rsp+0x38]
 10061a3:	mov    rsi,QWORD PTR [rsp+0x40]
 10061a8:	add    rsp,0x20
 10061ac:	pop    rdi
 10061ad:	ret    
 10061ae:	mov    eax,0x8000ffff
 10061b3:	mov    rbx,QWORD PTR [rsp+0x38]
 10061b8:	mov    rsi,QWORD PTR [rsp+0x40]
 10061bd:	add    rsp,0x20
 10061c1:	pop    rdi
 10061c2:	ret    
 10061c3:	nop
 10061c4:	(bad)  
 10061c5:	(bad)  
 10061c6:	add    BYTE PTR [rax],al
 10061c8:	fisub  DWORD PTR [rax+0x0]
 10061cb:	add    bl,ah
 10061cd:	(bad)  
 10061ce:	add    BYTE PTR [rax],al
 10061d0:	in     al,dx
 10061d1:	(bad)  
 10061d2:	add    BYTE PTR [rax],al
 10061d4:	cmc    
 10061d5:	(bad)  
 10061d6:	add    BYTE PTR [rax],al
 10061d8:	(bad)  
 10061d9:	(bad)  
 10061da:	add    BYTE PTR [rax],al
 10061dc:	(bad)  
 10061dd:	(bad)  
 10061de:	add    BYTE PTR [rax],al
 10061e0:	adc    BYTE PTR [rcx+0x0],ah
 10061e3:	add    BYTE PTR [rcx],bl
 10061e5:	(bad)  
 10061e6:	add    BYTE PTR [rax],al
 10061e8:	int3   
 10061e9:	int3   
 10061ea:	int3   
 10061eb:	int3   
 10061ec:	int3   
 10061ed:	int3   
 10061ee:	int3   
 10061ef:	int3   
 10061f0:	mov    QWORD PTR [rsp+0x8],rbx
 10061f5:	mov    QWORD PTR [rsp+0x10],rsi
 10061fa:	push   rdi
 10061fb:	sub    rsp,0x20
 10061ff:	mov    eax,DWORD PTR [r9]
 1006202:	mov    rdi,r8
 1006205:	mov    r10d,edx
 1006208:	mov    rsi,rcx
 100620b:	lea    r8,[rsp+0x48]
 1006210:	mov    rdx,rdi
 1006213:	mov    ecx,r10d
 1006216:	mov    DWORD PTR [rsp+0x48],eax
 100621a:	mov    rbx,r9
 100621d:	call   0x10060a0
 1006222:	test   eax,eax
 1006224:	js     0x1006247
 1006226:	mov    edx,DWORD PTR [rbx]
 1006228:	xor    r9d,r9d
 100622b:	mov    r8,rsi
 100622e:	mov    rcx,rdi
 1006231:	call   0x1007820
 1006236:	test   eax,eax
 1006238:	js     0x1006247
 100623a:	mov    edx,DWORD PTR [rbx]
 100623c:	mov    r8,rbx
 100623f:	mov    rcx,rdi
 1006242:	call   0x10064a0
 1006247:	mov    rbx,QWORD PTR [rsp+0x30]
 100624c:	mov    rsi,QWORD PTR [rsp+0x38]
 1006251:	add    rsp,0x20
 1006255:	pop    rdi
 1006256:	ret    
 1006257:	int3   
 1006258:	int3   
 1006259:	int3   
 100625a:	int3   
 100625b:	int3   
 100625c:	int3   
 100625d:	int3   
 100625e:	int3   
 100625f:	int3   
 1006260:	rex push rbx
 1006262:	push   r12
 1006264:	push   r13
 1006266:	push   r15
 1006268:	sub    rsp,0x28
 100626c:	mov    r12d,DWORD PTR [rsp+0x80]
 1006274:	mov    r15,rcx
 1006277:	xor    r13d,r13d
 100627a:	mov    ecx,r12d
 100627d:	mov    rbx,rdx
 1006280:	mov    r10,r8
 1006283:	mov    eax,r13d
 1006286:	mov    edx,0x80070057
 100628b:	and    ecx,0x100
 1006291:	je     0x100629f
 1006293:	test   r15,r15
 1006296:	jne    0x10062a4
 1006298:	test   rbx,rbx
 100629b:	jne    0x10062ad
 100629d:	jmp    0x10062a4
 100629f:	test   rbx,rbx
 10062a2:	je     0x10062ad
 10062a4:	cmp    rbx,0x7fffffff
 10062ab:	jbe    0x10062af
 10062ad:	mov    eax,edx
 10062af:	test   eax,eax
 10062b1:	js     0x100648a
 10062b7:	mov    QWORD PTR [rsp+0x50],rbp
 10062bc:	mov    QWORD PTR [rsp+0x60],rdi
 10062c1:	mov    QWORD PTR [rsp+0x20],r14
 10062c6:	mov    r14,rbx
 10062c9:	mov    rbp,r15
 10062cc:	mov    edi,r13d
 10062cf:	cmp    r9,0x7fffffff
 10062d6:	jb     0x10062dc
 10062d8:	mov    edi,edx
 10062da:	jmp    0x10062ef
 10062dc:	test   ecx,ecx
 10062de:	je     0x10062ef
 10062e0:	test   r8,r8
 10062e3:	jne    0x10062ef
 10062e5:	lea    r10,[rip+0xffffffffffffb334]        # 0x1001620
 10062ec:	mov    r9,r13
 10062ef:	test   edi,edi
 10062f1:	js     0x10063be
 10062f7:	test   r12d,0xffffe000
 10062fe:	je     0x1006314
 1006300:	mov    edi,edx
 1006302:	test   rbx,rbx
 1006305:	je     0x10063cf
 100630b:	mov    WORD PTR [r15],r13w
 100630f:	jmp    0x10063cf
 1006314:	test   rbx,rbx
 1006317:	jne    0x100633c
 1006319:	test   r9,r9
 100631c:	je     0x10063c7
 1006322:	cmp    WORD PTR [r10],r13w
 1006326:	je     0x10063c7
 100632c:	mov    edi,0x8007007a
 1006331:	test   r15,r15
 1006334:	cmove  edi,edx
 1006337:	jmp    0x10063cf
 100633c:	sub    r9,rbx
 100633f:	mov    rdx,rbx
 1006342:	mov    rcx,r15
 1006345:	sub    r10,r15
 1006348:	mov    edi,r13d
 100634b:	mov    r8,r13
 100634e:	xchg   ax,ax
 1006350:	lea    rax,[r9+rdx*1]
 1006354:	test   rax,rax
 1006357:	je     0x1006374
 1006359:	movzx  eax,WORD PTR [r10+rcx*1]
 100635e:	test   ax,ax
 1006361:	je     0x1006374
 1006363:	mov    WORD PTR [rcx],ax
 1006366:	add    rcx,0x2
 100636a:	inc    r8
 100636d:	dec    rdx
 1006370:	jne    0x1006350
 1006372:	jmp    0x1006379
 1006374:	test   rdx,rdx
 1006377:	jne    0x1006385
 1006379:	sub    rcx,0x2
 100637d:	mov    edi,0x8007007a
 1006382:	dec    r8
 1006385:	sub    r14,r8
 1006388:	mov    WORD PTR [rcx],r13w
 100638c:	lea    rbp,[r15+r8*2]
 1006390:	test   edi,edi
 1006392:	js     0x10063cf
 1006394:	bt     r12d,0x9
 1006399:	jae    0x10063c7
 100639b:	cmp    r14,0x1
 100639f:	jbe    0x10063c7
 10063a1:	lea    r8,[r14+r14*1]
 10063a5:	cmp    r8,0x2
 10063a9:	jbe    0x10063c7
 10063ab:	lea    rcx,[rbp+0x2]
 10063af:	add    r8,0xfffffffffffffffe
 10063b3:	movzx  edx,r12b
 10063b7:	call   0x1005982
 10063bc:	jmp    0x10063c7
 10063be:	test   rbx,rbx
 10063c1:	je     0x10063c7
 10063c3:	mov    WORD PTR [r15],r13w
 10063c7:	test   edi,edi
 10063c9:	jns    0x100645f
 10063cf:	test   r12d,0x1c00
 10063d6:	je     0x1006453
 10063d8:	test   rbx,rbx
 10063db:	je     0x1006453
 10063dd:	mov    QWORD PTR [rsp+0x58],rsi
 10063e2:	lea    r8,[rbx+rbx*1]
 10063e6:	mov    rsi,r8
 10063e9:	shr    rsi,1
 10063ec:	je     0x10063ff
 10063ee:	bt     r12d,0xc
 10063f3:	jae    0x10063ff
 10063f5:	mov    rbp,r15
 10063f8:	mov    r14,rsi
 10063fb:	mov    WORD PTR [r15],r13w
 10063ff:	bt     r12d,0xa
 1006404:	jae    0x1006438
 1006406:	movzx  edx,r12b
 100640a:	mov    rcx,r15
 100640d:	call   0x1005982
 1006412:	test   r12b,r12b
 1006415:	jne    0x100641f
 1006417:	mov    rbp,r15
 100641a:	mov    r14,rsi
 100641d:	jmp    0x1006438
 100641f:	test   rsi,rsi
 1006422:	je     0x100644e
 1006424:	lea    rbp,[r15-0x2]
 1006428:	mov    r14d,0x1
 100642e:	lea    rbp,[rbp+rsi*2+0x0]
 1006433:	mov    WORD PTR [rbp+0x0],r13w
 1006438:	test   rsi,rsi
 100643b:	je     0x100644e
 100643d:	bt     r12d,0xb
 1006442:	jae    0x100644e
 1006444:	mov    rbp,r15
 1006447:	mov    r14,rsi
 100644a:	mov    WORD PTR [r15],r13w
 100644e:	mov    rsi,QWORD PTR [rsp+0x58]
 1006453:	test   edi,edi
 1006455:	jns    0x100645f
 1006457:	cmp    edi,0x8007007a
 100645d:	jne    0x1006479
 100645f:	mov    rax,QWORD PTR [rsp+0x70]
 1006464:	test   rax,rax
 1006467:	je     0x100646c
 1006469:	mov    QWORD PTR [rax],rbp
 100646c:	mov    rax,QWORD PTR [rsp+0x78]
 1006471:	test   rax,rax
 1006474:	je     0x1006479
 1006476:	mov    QWORD PTR [rax],r14
 1006479:	mov    rbp,QWORD PTR [rsp+0x50]
 100647e:	mov    r14,QWORD PTR [rsp+0x20]
 1006483:	mov    eax,edi
 1006485:	mov    rdi,QWORD PTR [rsp+0x60]
 100648a:	add    rsp,0x28
 100648e:	pop    r15
 1006490:	pop    r13
 1006492:	pop    r12
 1006494:	pop    rbx
 1006495:	ret    
 1006496:	int3   
 1006497:	int3   
 1006498:	int3   
 1006499:	int3   
 100649a:	int3   
 100649b:	int3   
 100649c:	int3   
 100649d:	int3   
 100649e:	int3   
 100649f:	int3   
 10064a0:	xor    r10d,r10d
 10064a3:	test   rcx,rcx
 10064a6:	je     0x10064f4
 10064a8:	cmp    rdx,0x7fffffff
 10064af:	ja     0x10064f4
 10064b1:	mov    r9,rdx
 10064b4:	mov    eax,r10d
 10064b7:	test   rdx,rdx
 10064ba:	je     0x10064d5
 10064bc:	nop    DWORD PTR [rax+0x0]
 10064c0:	cmp    WORD PTR [rcx],ax
 10064c3:	je     0x10064d0
 10064c5:	add    rcx,0x2
 10064c9:	dec    r9
 10064cc:	jne    0x10064c0
 10064ce:	jmp    0x10064d5
 10064d0:	test   r9,r9
 10064d3:	jne    0x10064da
 10064d5:	mov    eax,0x80070057
 10064da:	test   r8,r8
 10064dd:	je     0x10064ee
 10064df:	test   eax,eax
 10064e1:	js     0x10064eb
 10064e3:	sub    rdx,r9
 10064e6:	mov    QWORD PTR [r8],rdx
 10064e9:	jmp    0x10064ee
 10064eb:	mov    QWORD PTR [r8],r10
 10064ee:	test   eax,eax
 10064f0:	js     0x10064f9
 10064f2:	repz ret 
 10064f4:	mov    eax,0x80070057
 10064f9:	test   r8,r8
 10064fc:	je     0x1006501
 10064fe:	mov    QWORD PTR [r8],r10
 1006501:	repz ret 
 1006503:	int3   
 1006504:	int3   
 1006505:	int3   
 1006506:	int3   
 1006507:	int3   
 1006508:	int3   
 1006509:	int3   
 100650a:	int3   
 100650b:	int3   
 100650c:	int3   
 100650d:	int3   
 100650e:	int3   
 100650f:	int3   
 1006510:	rex push rbx
 1006512:	sub    rsp,0x20
 1006516:	mov    rbx,rcx
 1006519:	movzx  ecx,WORD PTR [rcx]
 100651c:	cmp    cx,0x5c
 1006520:	jne    0x100652a
 1006522:	xor    eax,eax
 1006524:	add    rsp,0x20
 1006528:	pop    rbx
 1006529:	ret    
 100652a:	call   QWORD PTR [rip+0xffffffffffffade8]        # 0x1001318
 1006530:	test   eax,eax
 1006532:	je     0x100653b
 1006534:	cmp    WORD PTR [rbx+0x2],0x3a
 1006539:	je     0x1006522
 100653b:	mov    eax,0x1
 1006540:	add    rsp,0x20
 1006544:	pop    rbx
 1006545:	ret    
 1006546:	int3   
 1006547:	int3   
 1006548:	int3   
 1006549:	int3   
 100654a:	int3   
 100654b:	int3   
 100654c:	int3   
 100654d:	int3   
 100654e:	int3   
 100654f:	int3   
 1006550:	sub    rsp,0x28
 1006554:	mov    r11,rcx
 1006557:	mov    r10d,0xa
 100655d:	lea    r9,[rip+0xffffffffffffb44c]        # 0x10019b0
 1006564:	mov    r8,rcx
 1006567:	nop    WORD PTR [rax+rax*1+0x0]
 1006570:	movzx  edx,WORD PTR [r8]
 1006574:	add    r8,0x2
 1006578:	lea    eax,[rdx-0x41]
 100657b:	cmp    eax,0x19
 100657e:	ja     0x1006583
 1006580:	add    edx,0x20
 1006583:	movzx  ecx,WORD PTR [r9]
 1006587:	add    r9,0x2
 100658b:	lea    eax,[rcx-0x41]
 100658e:	cmp    eax,0x19
 1006591:	ja     0x1006596
 1006593:	add    ecx,0x20
 1006596:	dec    r10d
 1006599:	je     0x10065a3
 100659b:	test   edx,edx
 100659d:	je     0x10065a3
 100659f:	cmp    edx,ecx
 10065a1:	je     0x1006570
 10065a3:	xor    eax,eax
 10065a5:	cmp    edx,ecx
 10065a7:	sete   al
 10065aa:	test   eax,eax
 10065ac:	je     0x10065c5
 10065ae:	lea    rcx,[r11+0x14]
 10065b2:	call   0x1007970
 10065b7:	test   eax,eax
 10065b9:	je     0x10065c5
 10065bb:	mov    eax,0x1
 10065c0:	add    rsp,0x28
 10065c4:	ret    
 10065c5:	xor    eax,eax
 10065c7:	add    rsp,0x28
 10065cb:	ret    
 10065cc:	int3   
 10065cd:	int3   
 10065ce:	int3   
 10065cf:	int3   
 10065d0:	int3   
 10065d1:	int3   
 10065d2:	int3   
 10065d3:	int3   
 10065d4:	int3   
 10065d5:	int3   
 10065d6:	int3   
 10065d7:	int3   
 10065d8:	int3   
 10065d9:	int3   
 10065da:	int3   
 10065db:	int3   
 10065dc:	int3   
 10065dd:	int3   
 10065de:	int3   
 10065df:	int3   
 10065e0:	mov    QWORD PTR [rsp+0x8],rbx
 10065e5:	push   rdi
 10065e6:	sub    rsp,0x20
 10065ea:	mov    rdi,rdx
 10065ed:	mov    rbx,rcx
 10065f0:	test   rdx,rdx
 10065f3:	je     0x10065fc
 10065f5:	mov    QWORD PTR [rdx],0x0
 10065fc:	cmp    WORD PTR [rcx],0x5c
 1006600:	jne    0x100669f
 1006606:	cmp    WORD PTR [rcx+0x2],0x5c
 100660b:	jne    0x100669f
 1006611:	cmp    WORD PTR [rcx+0x4],0x3f
 1006616:	je     0x1006626
 1006618:	call   0x1006550
 100661d:	test   eax,eax
 100661f:	jne    0x100669f
 1006621:	lea    ecx,[rax+0x2]
 1006624:	jmp    0x1006683
 1006626:	mov    r10d,0x5
 100662c:	lea    r9,[rip+0xffffffffffffb2cd]        # 0x1001900
 1006633:	lea    r8,[rcx+0x6]
 1006637:	nop    WORD PTR [rax+rax*1+0x0]
 1006640:	movzx  ecx,WORD PTR [r8]
 1006644:	add    r8,0x2
 1006648:	lea    eax,[rcx-0x41]
 100664b:	cmp    eax,0x19
 100664e:	ja     0x1006653
 1006650:	add    ecx,0x20
 1006653:	movzx  edx,WORD PTR [r9]
 1006657:	add    r9,0x2
 100665b:	lea    eax,[rdx-0x41]
 100665e:	cmp    eax,0x19
 1006661:	ja     0x1006666
 1006663:	add    edx,0x20
 1006666:	dec    r10d
 1006669:	je     0x1006673
 100666b:	test   ecx,ecx
 100666d:	je     0x1006673
 100666f:	cmp    ecx,edx
 1006671:	je     0x1006640
 1006673:	xor    eax,eax
 1006675:	cmp    ecx,edx
 1006677:	sete   al
 100667a:	test   eax,eax
 100667c:	je     0x100669f
 100667e:	mov    ecx,0x8
 1006683:	mov    eax,0x1
 1006688:	test   rdi,rdi
 100668b:	je     0x10066a1
 100668d:	lea    rcx,[rbx+rcx*2]
 1006691:	mov    QWORD PTR [rdi],rcx
 1006694:	mov    rbx,QWORD PTR [rsp+0x30]
 1006699:	add    rsp,0x20
 100669d:	pop    rdi
 100669e:	ret    
 100669f:	xor    eax,eax
 10066a1:	mov    rbx,QWORD PTR [rsp+0x30]
 10066a6:	add    rsp,0x20
 10066aa:	pop    rdi
 10066ab:	ret    
 10066ac:	int3   
 10066ad:	int3   
 10066ae:	int3   
 10066af:	int3   
 10066b0:	int3   
 10066b1:	int3   
 10066b2:	int3   
 10066b3:	int3   
 10066b4:	int3   
 10066b5:	int3   
 10066b6:	int3   
 10066b7:	int3   
 10066b8:	int3   
 10066b9:	int3   
 10066ba:	int3   
 10066bb:	int3   
 10066bc:	int3   
 10066bd:	int3   
 10066be:	int3   
 10066bf:	int3   
 10066c0:	rex push rdi
 10066c2:	sub    rsp,0x20
 10066c6:	mov    rdi,rcx
 10066c9:	test   rcx,rcx
 10066cc:	je     0x1006892
 10066d2:	movzx  ecx,WORD PTR [rcx]
 10066d5:	test   cx,cx
 10066d8:	je     0x1006892
 10066de:	mov    QWORD PTR [rsp+0x38],rbx
 10066e3:	mov    QWORD PTR [rsp+0x40],rbp
 10066e8:	mov    QWORD PTR [rsp+0x48],rsi
 10066ed:	call   QWORD PTR [rip+0xffffffffffffac25]        # 0x1001318
 10066f3:	xor    ebx,ebx
 10066f5:	mov    ebp,0x3
 10066fa:	lea    rsi,[rip+0xffffffffffffb20b]        # 0x100190c
 1006701:	test   eax,eax
 1006703:	je     0x1006752
 1006705:	mov    r10d,ebp
 1006708:	mov    r9,rsi
 100670b:	lea    r8,[rdi+0x2]
 100670f:	nop
 1006710:	movzx  ecx,WORD PTR [r8]
 1006714:	add    r8,0x2
 1006718:	lea    eax,[rcx-0x41]
 100671b:	cmp    eax,0x19
 100671e:	ja     0x1006723
 1006720:	add    ecx,0x20
 1006723:	movzx  edx,WORD PTR [r9]
 1006727:	add    r9,0x2
 100672b:	lea    eax,[rdx-0x41]
 100672e:	cmp    eax,0x19
 1006731:	ja     0x1006736
 1006733:	add    edx,0x20
 1006736:	dec    r10d
 1006739:	je     0x1006743
 100673b:	test   ecx,ecx
 100673d:	je     0x1006743
 100673f:	cmp    ecx,edx
 1006741:	je     0x1006710
 1006743:	cmp    ecx,edx
 1006745:	mov    eax,ebx
 1006747:	sete   al
 100674a:	test   eax,eax
 100674c:	jne    0x1006874
 1006752:	cmp    WORD PTR [rdi],0x5c
 1006756:	jne    0x1006762
 1006758:	cmp    WORD PTR [rdi+0x2],bx
 100675c:	je     0x1006874
 1006762:	lea    rdx,[rsp+0x30]
 1006767:	mov    rcx,rdi
 100676a:	call   0x10065e0
 100676f:	test   eax,eax
 1006771:	je     0x10067b2
 1006773:	mov    rax,QWORD PTR [rsp+0x30]
 1006778:	movzx  ecx,WORD PTR [rax]
 100677b:	test   cx,cx
 100677e:	je     0x1006874
 1006784:	cmp    cx,0x5c
 1006788:	jne    0x10067a0
 100678a:	inc    ebx
 100678c:	cmp    ebx,0x1
 100678f:	jg     0x100688e
 1006795:	cmp    WORD PTR [rax+0x2],0x0
 100679a:	je     0x100688e
 10067a0:	movzx  ecx,WORD PTR [rax+0x2]
 10067a4:	add    rax,0x2
 10067a8:	test   cx,cx
 10067ab:	jne    0x1006784
 10067ad:	jmp    0x1006874
 10067b2:	mov    r10d,0x4
 10067b8:	lea    r9,[rip+0xffffffffffffb159]        # 0x1001918
 10067bf:	mov    r8,rdi
 10067c2:	data16 data16 data16 data16 data16 nop WORD PTR [rax+rax*1+0x0]
 10067d0:	movzx  ecx,WORD PTR [r8]
 10067d4:	add    r8,0x2
 10067d8:	lea    eax,[rcx-0x41]
 10067db:	cmp    eax,0x19
 10067de:	ja     0x10067e3
 10067e0:	add    ecx,0x20
 10067e3:	movzx  edx,WORD PTR [r9]
 10067e7:	add    r9,0x2
 10067eb:	lea    eax,[rdx-0x41]
 10067ee:	cmp    eax,0x19
 10067f1:	ja     0x10067f6
 10067f3:	add    edx,0x20
 10067f6:	dec    r10d
 10067f9:	je     0x1006803
 10067fb:	test   ecx,ecx
 10067fd:	je     0x1006803
 10067ff:	cmp    ecx,edx
 1006801:	je     0x10067d0
 1006803:	cmp    ecx,edx
 1006805:	mov    eax,ebx
 1006807:	sete   al
 100680a:	test   eax,eax
 100680c:	je     0x100685a
 100680e:	movzx  ecx,WORD PTR [rdi+0x8]
 1006812:	call   QWORD PTR [rip+0xffffffffffffab00]        # 0x1001318
 1006818:	test   eax,eax
 100681a:	je     0x100685a
 100681c:	lea    r8,[rdi+0xa]
 1006820:	movzx  ecx,WORD PTR [r8]
 1006824:	add    r8,0x2
 1006828:	lea    eax,[rcx-0x41]
 100682b:	cmp    eax,0x19
 100682e:	ja     0x1006833
 1006830:	add    ecx,0x20
 1006833:	movzx  edx,WORD PTR [rsi]
 1006836:	add    rsi,0x2
 100683a:	lea    eax,[rdx-0x41]
 100683d:	cmp    eax,0x19
 1006840:	ja     0x1006845
 1006842:	add    edx,0x20
 1006845:	dec    ebp
 1006847:	je     0x1006851
 1006849:	test   ecx,ecx
 100684b:	je     0x1006851
 100684d:	cmp    ecx,edx
 100684f:	je     0x1006820
 1006851:	cmp    ecx,edx
 1006853:	sete   bl
 1006856:	test   ebx,ebx
 1006858:	jne    0x1006874
 100685a:	mov    rcx,rdi
 100685d:	call   0x1006550
 1006862:	test   eax,eax
 1006864:	je     0x100688e
 1006866:	cmp    WORD PTR [rdi+0x60],0x5c
 100686b:	jne    0x100688e
 100686d:	cmp    WORD PTR [rdi+0x62],0x0
 1006872:	jne    0x100688e
 1006874:	mov    eax,0x1
 1006879:	mov    rbp,QWORD PTR [rsp+0x40]
 100687e:	mov    rbx,QWORD PTR [rsp+0x38]
 1006883:	mov    rsi,QWORD PTR [rsp+0x48]
 1006888:	add    rsp,0x20
 100688c:	pop    rdi
 100688d:	ret    
 100688e:	xor    eax,eax
 1006890:	jmp    0x1006879
 1006892:	xor    eax,eax
 1006894:	add    rsp,0x20
 1006898:	pop    rdi
 1006899:	ret    
 100689a:	int3   
 100689b:	int3   
 100689c:	int3   
 100689d:	int3   
 100689e:	int3   
 100689f:	int3   
 10068a0:	mov    QWORD PTR [rsp+0x18],rbp
 10068a5:	mov    QWORD PTR [rsp+0x20],rsi
 10068aa:	push   r14
 10068ac:	xor    ebp,ebp
 10068ae:	mov    rsi,r9
 10068b1:	mov    r14,r8
 10068b4:	mov    r10,rdx
 10068b7:	test   r8,r8
 10068ba:	je     0x10068bf
 10068bc:	mov    QWORD PTR [r8],rbp
 10068bf:	test   r9,r9
 10068c2:	je     0x10068c7
 10068c4:	mov    QWORD PTR [r9],rbp
 10068c7:	or     rax,0xffffffffffffffff
 10068cb:	nop    DWORD PTR [rax+rax*1+0x0]
 10068d0:	inc    rax
 10068d3:	cmp    WORD PTR [rcx+rax*2],bp
 10068d7:	jne    0x10068d0
 10068d9:	cmp    rax,rdx
 10068dc:	jb     0x10068f0
 10068de:	mov    eax,0x8007007a
 10068e3:	mov    rbp,QWORD PTR [rsp+0x20]
 10068e8:	mov    rsi,QWORD PTR [rsp+0x28]
 10068ed:	pop    r14
 10068ef:	ret    
 10068f0:	sub    r10,rax
 10068f3:	lea    r11,[rcx+rax*2]
 10068f7:	test   rax,rax
 10068fa:	je     0x10069c6
 1006900:	mov    eax,0x5c
 1006905:	cmp    ax,WORD PTR [r11-0x2]
 100690a:	je     0x10069c6
 1006910:	mov    edx,ebp
 1006912:	test   r10,r10
 1006915:	je     0x1006920
 1006917:	cmp    r10,0x7fffffff
 100691e:	jbe    0x1006925
 1006920:	mov    edx,0x80070057
 1006925:	test   edx,edx
 1006927:	js     0x10069db
 100692d:	mov    rcx,r11
 1006930:	mov    rax,r10
 1006933:	test   r10,r10
 1006936:	jne    0x100693f
 1006938:	mov    edx,0x8007007a
 100693d:	jmp    0x10069ba
 100693f:	mov    QWORD PTR [rsp+0x10],rbx
 1006944:	mov    QWORD PTR [rsp+0x18],rdi
 1006949:	lea    rdi,[rip+0xffffffffffffafd4]        # 0x1001924
 1006950:	mov    ebx,0x7ffffffe
 1006955:	mov    r8,r10
 1006958:	mov    edx,ebp
 100695a:	sub    rbx,r10
 100695d:	sub    rdi,r11
 1006960:	mov    r9,rbp
 1006963:	lea    rax,[rbx+r8*1]
 1006967:	test   rax,rax
 100696a:	je     0x1006986
 100696c:	movzx  eax,WORD PTR [rdi+rcx*1]
 1006970:	test   ax,ax
 1006973:	je     0x1006986
 1006975:	mov    WORD PTR [rcx],ax
 1006978:	add    rcx,0x2
 100697c:	inc    r9
 100697f:	dec    r8
 1006982:	jne    0x1006963
 1006984:	jmp    0x100698b
 1006986:	test   r8,r8
 1006989:	jne    0x1006997
 100698b:	sub    rcx,0x2
 100698f:	mov    edx,0x8007007a
 1006994:	dec    r9
 1006997:	mov    rdi,QWORD PTR [rsp+0x18]
 100699c:	mov    rbx,QWORD PTR [rsp+0x10]
 10069a1:	mov    rax,r10
 10069a4:	sub    rax,r9
 10069a7:	mov    WORD PTR [rcx],bp
 10069aa:	lea    rcx,[r11+r9*2]
 10069ae:	test   edx,edx
 10069b0:	jns    0x10069ba
 10069b2:	cmp    edx,0x8007007a
 10069b8:	jne    0x10069c0
 10069ba:	mov    r11,rcx
 10069bd:	mov    r10,rax
 10069c0:	test   edx,edx
 10069c2:	js     0x10069db
 10069c4:	jmp    0x10069cb
 10069c6:	mov    edx,0x1
 10069cb:	test   r14,r14
 10069ce:	je     0x10069d3
 10069d0:	mov    QWORD PTR [r14],r11
 10069d3:	test   rsi,rsi
 10069d6:	je     0x10069db
 10069d8:	mov    QWORD PTR [rsi],r10
 10069db:	mov    rbp,QWORD PTR [rsp+0x20]
 10069e0:	mov    rsi,QWORD PTR [rsp+0x28]
 10069e5:	mov    eax,edx
 10069e7:	pop    r14
 10069e9:	ret    
 10069ea:	int3   
 10069eb:	int3   
 10069ec:	int3   
 10069ed:	int3   
 10069ee:	int3   
 10069ef:	int3   
 10069f0:	sub    rsp,0x28
 10069f4:	or     rax,0xffffffffffffffff
 10069f8:	nop    DWORD PTR [rax+rax*1+0x0]
 1006a00:	inc    rax
 1006a03:	cmp    WORD PTR [rcx+rax*2],0x0
 1006a08:	jne    0x1006a00
 1006a0a:	cmp    rax,rdx
 1006a0d:	jb     0x1006a19
 1006a0f:	mov    eax,0x80070057
 1006a14:	add    rsp,0x28
 1006a18:	ret    
 1006a19:	mov    QWORD PTR [rsp+0x30],rbx
 1006a1e:	mov    ebx,0x1
 1006a23:	test   rax,rax
 1006a26:	je     0x1006a4d
 1006a28:	cmp    WORD PTR [rcx+rax*2-0x2],0x5c
 1006a2e:	mov    QWORD PTR [rsp+0x20],rdi
 1006a33:	lea    rdi,[rcx+rax*2]
 1006a37:	jne    0x1006a48
 1006a39:	call   0x10066c0
 1006a3e:	test   eax,eax
 1006a40:	jne    0x1006a48
 1006a42:	xor    ebx,ebx
 1006a44:	mov    WORD PTR [rdi-0x2],bx
 1006a48:	mov    rdi,QWORD PTR [rsp+0x20]
 1006a4d:	mov    eax,ebx
 1006a4f:	mov    rbx,QWORD PTR [rsp+0x30]
 1006a54:	add    rsp,0x28
 1006a58:	ret    
 1006a59:	int3   
 1006a5a:	int3   
 1006a5b:	int3   
 1006a5c:	int3   
 1006a5d:	int3   
 1006a5e:	int3   
 1006a5f:	int3   
 1006a60:	mov    QWORD PTR [rsp+0x20],rbx
 1006a65:	push   r14
 1006a67:	sub    rsp,0x20
 1006a6b:	mov    r14,rdx
 1006a6e:	mov    rbx,rcx
 1006a71:	test   rcx,rcx
 1006a74:	je     0x1006be5
 1006a7a:	cmp    WORD PTR [rcx],0x0
 1006a7e:	je     0x1006be5
 1006a84:	test   rdx,rdx
 1006a87:	je     0x1006be5
 1006a8d:	mov    QWORD PTR [rsp+0x38],rsi
 1006a92:	mov    QWORD PTR [rsp+0x40],rdi
 1006a97:	xor    edi,edi
 1006a99:	mov    QWORD PTR [rdx],rdi
 1006a9c:	lea    rdx,[rsp+0x30]
 1006aa1:	call   0x10065e0
 1006aa6:	test   eax,eax
 1006aa8:	je     0x1006b23
 1006aaa:	mov    rbx,QWORD PTR [rsp+0x30]
 1006aaf:	lea    edx,[rdi+0x5c]
 1006ab2:	mov    rcx,rbx
 1006ab5:	call   QWORD PTR [rip+0xffffffffffffa865]        # 0x1001320
 1006abb:	mov    rdi,rax
 1006abe:	test   rax,rax
 1006ac1:	je     0x1006b03
 1006ac3:	lea    rsi,[rax+0x2]
 1006ac7:	mov    edx,0x5c
 1006acc:	mov    rcx,rsi
 1006acf:	call   QWORD PTR [rip+0xffffffffffffa84b]        # 0x1001320
 1006ad5:	mov    rbx,rax
 1006ad8:	test   rax,rax
 1006adb:	je     0x1006aeb
 1006add:	cmp    rax,rsi
 1006ae0:	je     0x1006bc3
 1006ae6:	jmp    0x1006bbf
 1006aeb:	or     rax,0xffffffffffffffff
 1006aef:	nop
 1006af0:	inc    rax
 1006af3:	cmp    WORD PTR [rdi+rax*2],0x0
 1006af8:	jne    0x1006af0
 1006afa:	lea    rbx,[rdi+rax*2]
 1006afe:	jmp    0x1006bc3
 1006b03:	or     rax,0xffffffffffffffff
 1006b07:	nop    WORD PTR [rax+rax*1+0x0]
 1006b10:	inc    rax
 1006b13:	cmp    WORD PTR [rbx+rax*2],0x0
 1006b18:	jne    0x1006b10
 1006b1a:	lea    rbx,[rbx+rax*2]
 1006b1e:	jmp    0x1006bc3
 1006b23:	cmp    WORD PTR [rbx],0x5c
 1006b27:	jne    0x1006b34
 1006b29:	cmp    WORD PTR [rbx+0x2],0x5c
 1006b2e:	jne    0x1006bbf
 1006b34:	mov    rcx,rbx
 1006b37:	call   0x1006550
 1006b3c:	test   eax,eax
 1006b3e:	je     0x1006b46
 1006b40:	add    rbx,0x60
 1006b44:	jmp    0x1006bb9
 1006b46:	mov    r10d,0x4
 1006b4c:	lea    r9,[rip+0xffffffffffffadc5]        # 0x1001918
 1006b53:	mov    r8,rbx
 1006b56:	data16 nop WORD PTR [rax+rax*1+0x0]
 1006b60:	movzx  ecx,WORD PTR [r8]
 1006b64:	add    r8,0x2
 1006b68:	lea    eax,[rcx-0x41]
 1006b6b:	cmp    eax,0x19
 1006b6e:	ja     0x1006b73
 1006b70:	add    ecx,0x20
 1006b73:	movzx  edx,WORD PTR [r9]
 1006b77:	add    r9,0x2
 1006b7b:	lea    eax,[rdx-0x41]
 1006b7e:	cmp    eax,0x19
 1006b81:	ja     0x1006b86
 1006b83:	add    edx,0x20
 1006b86:	dec    r10d
 1006b89:	je     0x1006b93
 1006b8b:	test   ecx,ecx
 1006b8d:	je     0x1006b93
 1006b8f:	cmp    ecx,edx
 1006b91:	je     0x1006b60
 1006b93:	cmp    ecx,edx
 1006b95:	sete   dil
 1006b99:	test   edi,edi
 1006b9b:	je     0x1006ba1
 1006b9d:	add    rbx,0x8
 1006ba1:	movzx  ecx,WORD PTR [rbx]
 1006ba4:	call   QWORD PTR [rip+0xffffffffffffa76e]        # 0x1001318
 1006baa:	test   eax,eax
 1006bac:	je     0x1006bde
 1006bae:	cmp    WORD PTR [rbx+0x2],0x3a
 1006bb3:	jne    0x1006bde
 1006bb5:	add    rbx,0x4
 1006bb9:	cmp    WORD PTR [rbx],0x5c
 1006bbd:	jne    0x1006bc3
 1006bbf:	add    rbx,0x2
 1006bc3:	mov    QWORD PTR [r14],rbx
 1006bc6:	xor    eax,eax
 1006bc8:	mov    rsi,QWORD PTR [rsp+0x38]
 1006bcd:	mov    rdi,QWORD PTR [rsp+0x40]
 1006bd2:	mov    rbx,QWORD PTR [rsp+0x48]
 1006bd7:	add    rsp,0x20
 1006bdb:	pop    r14
 1006bdd:	ret    
 1006bde:	mov    eax,0x80070057
 1006be3:	jmp    0x1006bc8
 1006be5:	mov    eax,0x80070057
 1006bea:	mov    rbx,QWORD PTR [rsp+0x48]
 1006bef:	add    rsp,0x20
 1006bf3:	pop    r14
 1006bf5:	ret    
 1006bf6:	int3   
 1006bf7:	int3   
 1006bf8:	int3   
 1006bf9:	int3   
 1006bfa:	int3   
 1006bfb:	int3   
 1006bfc:	int3   
 1006bfd:	int3   
 1006bfe:	int3   
 1006bff:	int3   
 1006c00:	mov    QWORD PTR [rsp+0x10],rbx
 1006c05:	mov    QWORD PTR [rsp+0x18],rsi
 1006c0a:	push   rdi
 1006c0b:	sub    rsp,0x20
 1006c0f:	mov    rdi,rdx
 1006c12:	mov    rsi,rcx
 1006c15:	test   rcx,rcx
 1006c18:	je     0x1006caf
 1006c1e:	test   rdx,rdx
 1006c21:	je     0x1006caf
 1006c27:	cmp    rdx,0x8000
 1006c2e:	ja     0x1006caf
 1006c30:	lea    rdx,[rsp+0x30]
 1006c35:	call   0x1006a60
 1006c3a:	mov    ebx,eax
 1006c3c:	test   eax,eax
 1006c3e:	js     0x1006c53
 1006c40:	mov    rcx,QWORD PTR [rsp+0x30]
 1006c45:	lea    rax,[rsi+rdi*2]
 1006c49:	cmp    rcx,rax
 1006c4c:	jb     0x1006c77
 1006c4e:	mov    ebx,0x80070057
 1006c53:	lea    r8,[rip+0xffffffffffffa9c6]        # 0x1001620
 1006c5a:	mov    rdx,rdi
 1006c5d:	mov    rcx,rsi
 1006c60:	call   0x10045c0
 1006c65:	mov    eax,ebx
 1006c67:	mov    rbx,QWORD PTR [rsp+0x38]
 1006c6c:	mov    rsi,QWORD PTR [rsp+0x40]
 1006c71:	add    rsp,0x20
 1006c75:	pop    rdi
 1006c76:	ret    
 1006c77:	cmp    WORD PTR [rcx],0x0
 1006c7b:	mov    rdx,rdi
 1006c7e:	jne    0x1006c90
 1006c80:	mov    rcx,rsi
 1006c83:	call   0x10069f0
 1006c88:	mov    ebx,eax
 1006c8a:	test   eax,eax
 1006c8c:	jns    0x1006c65
 1006c8e:	jmp    0x1006c53
 1006c90:	xor    ebx,ebx
 1006c92:	mov    WORD PTR [rcx],bx
 1006c95:	mov    rcx,rsi
 1006c98:	call   0x10069f0
 1006c9d:	mov    eax,ebx
 1006c9f:	mov    rbx,QWORD PTR [rsp+0x38]
 1006ca4:	mov    rsi,QWORD PTR [rsp+0x40]
 1006ca9:	add    rsp,0x20
 1006cad:	pop    rdi
 1006cae:	ret    
 1006caf:	mov    rbx,QWORD PTR [rsp+0x38]
 1006cb4:	mov    rsi,QWORD PTR [rsp+0x40]
 1006cb9:	mov    eax,0x80070057
 1006cbe:	add    rsp,0x20
 1006cc2:	pop    rdi
 1006cc3:	ret    
 1006cc4:	int3   
 1006cc5:	int3   
 1006cc6:	int3   
 1006cc7:	int3   
 1006cc8:	int3   
 1006cc9:	int3   
 1006cca:	int3   
 1006ccb:	int3   
 1006ccc:	int3   
 1006ccd:	int3   
 1006cce:	int3   
 1006ccf:	int3   
 1006cd0:	mov    QWORD PTR [rsp+0x18],r8
 1006cd5:	mov    QWORD PTR [rsp+0x10],rdx
 1006cda:	push   rbp
 1006cdb:	push   rbx
 1006cdc:	push   rsi
 1006cdd:	push   rdi
 1006cde:	push   r13
 1006ce0:	push   r14
 1006ce2:	push   r15
 1006ce4:	mov    rbp,rsp
 1006ce7:	sub    rsp,0x70
 1006ceb:	xor    esi,esi
 1006ced:	mov    ebx,r9d
 1006cf0:	mov    rax,r8
 1006cf3:	mov    rdi,rdx
 1006cf6:	mov    r14,rcx
 1006cf9:	mov    QWORD PTR [rbp-0x18],rsi
 1006cfd:	mov    r15d,esi
 1006d00:	test   rdx,rdx
 1006d03:	je     0x1006d0e
 1006d05:	cmp    rdx,0x7fffffff
 1006d0c:	jbe    0x1006d14
 1006d0e:	mov    r15d,0x80070057
 1006d14:	mov    r13d,0x7ffffffe
 1006d1a:	test   r15d,r15d
 1006d1d:	js     0x1006d73
 1006d1f:	mov    r15d,esi
 1006d22:	test   rdi,rdi
 1006d25:	je     0x1006d5d
 1006d27:	lea    r9,[rip+0xffffffffffffa8f2]        # 0x1001620
 1006d2e:	mov    r8d,r13d
 1006d31:	sub    r8,rdi
 1006d34:	sub    r9,r14
 1006d37:	lea    rax,[r8+rdx*1]
 1006d3b:	test   rax,rax
 1006d3e:	je     0x1006d58
 1006d40:	movzx  eax,WORD PTR [r9+rcx*1]
 1006d45:	test   ax,ax
 1006d48:	je     0x1006d58
 1006d4a:	mov    WORD PTR [rcx],ax
 1006d4d:	add    rcx,0x2
 1006d51:	dec    rdx
 1006d54:	jne    0x1006d37
 1006d56:	jmp    0x1006d5d
 1006d58:	test   rdx,rdx
 1006d5b:	jne    0x1006d67
 1006d5d:	sub    rcx,0x2
 1006d61:	mov    r15d,0x8007007a
 1006d67:	mov    rax,QWORD PTR [rbp+0x50]
 1006d6b:	mov    WORD PTR [rcx],si
 1006d6e:	test   r15d,r15d
 1006d71:	jns    0x1006d85
 1006d73:	mov    eax,r15d
 1006d76:	add    rsp,0x70
 1006d7a:	pop    r15
 1006d7c:	pop    r14
 1006d7e:	pop    r13
 1006d80:	pop    rdi
 1006d81:	pop    rsi
 1006d82:	pop    rbx
 1006d83:	pop    rbp
 1006d84:	ret    
 1006d85:	cmp    rdi,0x8000
 1006d8c:	jbe    0x1006da2
 1006d8e:	mov    eax,0x80070057
 1006d93:	add    rsp,0x70
 1006d97:	pop    r15
 1006d99:	pop    r14
 1006d9b:	pop    r13
 1006d9d:	pop    rdi
 1006d9e:	pop    rsi
 1006d9f:	pop    rbx
 1006da0:	pop    rbp
 1006da1:	ret    
 1006da2:	mov    ecx,0x104
 1006da7:	mov    QWORD PTR [rsp+0xb0],r12
 1006daf:	cmp    rdi,rcx
 1006db2:	ja     0x1006db7
 1006db4:	and    ebx,0xfffffffe
 1006db7:	and    ebx,0x1
 1006dba:	mov    DWORD PTR [rbp+0x58],ebx
 1006dbd:	jne    0x1006dca
 1006dbf:	cmp    rdi,rcx
 1006dc2:	cmova  rdi,rcx
 1006dc6:	mov    QWORD PTR [rbp+0x48],rdi
 1006dca:	lea    rdx,[rbp-0x10]
 1006dce:	mov    rcx,rax
 1006dd1:	mov    r12,rdi
 1006dd4:	mov    QWORD PTR [rbp-0x20],rdi
 1006dd8:	call   0x10065e0
 1006ddd:	mov    DWORD PTR [rbp-0x30],eax
 1006de0:	test   eax,eax
 1006de2:	je     0x1006fcd
 1006de8:	mov    r15d,esi
 1006deb:	test   ebx,ebx
 1006ded:	je     0x1006ee1
 1006df3:	mov    r11d,0x6
 1006df9:	mov    QWORD PTR [rbp-0x18],r11
 1006dfd:	test   rdi,rdi
 1006e00:	je     0x1006e0b
 1006e02:	cmp    rdi,0x7fffffff
 1006e09:	jbe    0x1006e11
 1006e0b:	mov    r15d,0x80070057
 1006e11:	test   r15d,r15d
 1006e14:	js     0x1006e2c
 1006e16:	mov    rbx,r14
 1006e19:	mov    rax,rdi
 1006e1c:	test   rdi,rdi
 1006e1f:	jne    0x1006e5b
 1006e21:	test   r14,r14
 1006e24:	jne    0x1006e3d
 1006e26:	mov    r15d,0x80070057
 1006e2c:	mov    rbx,QWORD PTR [rbp-0x28]
 1006e30:	mov    rsi,QWORD PTR [rbp-0x10]
 1006e34:	mov    r10,QWORD PTR [rbp+0x50]
 1006e38:	jmp    0x100718d
 1006e3d:	mov    rsi,QWORD PTR [rbp-0x10]
 1006e41:	mov    r10,QWORD PTR [rbp+0x50]
 1006e45:	mov    r15d,0x8007007a
 1006e4b:	mov    QWORD PTR [rbp-0x28],rbx
 1006e4f:	mov    r12,rax
 1006e52:	mov    QWORD PTR [rbp-0x20],rax
 1006e56:	jmp    0x100718d
 1006e5b:	lea    r9,[rip+0xffffffffffffaac6]        # 0x1001928
 1006e62:	sub    r13,rdi
 1006e65:	mov    rdx,rdi
 1006e68:	mov    rcx,r14
 1006e6b:	mov    r15d,esi
 1006e6e:	mov    r8,rsi
 1006e71:	sub    r9,r14
 1006e74:	lea    rax,[rdx+r13*1]
 1006e78:	test   rax,rax
 1006e7b:	je     0x1006e98
 1006e7d:	movzx  eax,WORD PTR [r9+rcx*1]
 1006e82:	test   ax,ax
 1006e85:	je     0x1006e98
 1006e87:	mov    WORD PTR [rcx],ax
 1006e8a:	add    rcx,0x2
 1006e8e:	inc    r8
 1006e91:	dec    rdx
 1006e94:	jne    0x1006e74
 1006e96:	jmp    0x1006e9d
 1006e98:	test   rdx,rdx
 1006e9b:	jne    0x1006eaa
 1006e9d:	sub    rcx,0x2
 1006ea1:	mov    r15d,0x8007007a
 1006ea7:	dec    r8
 1006eaa:	mov    rax,rdi
 1006ead:	mov    WORD PTR [rcx],si
 1006eb0:	lea    rbx,[r14+r8*2]
 1006eb4:	sub    rax,r8
 1006eb7:	test   r15d,r15d
 1006eba:	jns    0x1006ec9
 1006ebc:	cmp    r15d,0x8007007a
 1006ec3:	jne    0x1006e2c
 1006ec9:	mov    rsi,QWORD PTR [rbp-0x10]
 1006ecd:	mov    r10,QWORD PTR [rbp+0x50]
 1006ed1:	mov    QWORD PTR [rbp-0x28],rbx
 1006ed5:	mov    r12,rax
 1006ed8:	mov    QWORD PTR [rbp-0x20],rax
 1006edc:	jmp    0x100718d
 1006ee1:	test   rdi,rdi
 1006ee4:	je     0x1006eef
 1006ee6:	cmp    rdi,0x7fffffff
 1006eed:	jbe    0x1006ef5
 1006eef:	mov    r15d,0x80070057
 1006ef5:	test   r15d,r15d
 1006ef8:	js     0x1006f10
 1006efa:	mov    rbx,r14
 1006efd:	mov    rax,rdi
 1006f00:	test   rdi,rdi
 1006f03:	jne    0x1006f3f
 1006f05:	test   r14,r14
 1006f08:	jne    0x1006f21
 1006f0a:	mov    r15d,0x80070057
 1006f10:	mov    rbx,QWORD PTR [rbp-0x28]
 1006f14:	mov    rsi,QWORD PTR [rbp-0x10]
 1006f18:	mov    r10,QWORD PTR [rbp+0x50]
 1006f1c:	jmp    0x1007189
 1006f21:	mov    rsi,QWORD PTR [rbp-0x10]
 1006f25:	mov    r10,QWORD PTR [rbp+0x50]
 1006f29:	mov    r15d,0x8007007a
 1006f2f:	mov    QWORD PTR [rbp-0x28],rbx
 1006f33:	mov    r12,rax
 1006f36:	mov    QWORD PTR [rbp-0x20],rax
 1006f3a:	jmp    0x1007189
 1006f3f:	lea    r9,[rip+0xffffffffffffa9f6]        # 0x100193c
 1006f46:	sub    r13,rdi
 1006f49:	mov    rdx,rdi
 1006f4c:	mov    rcx,r14
 1006f4f:	mov    r15d,esi
 1006f52:	mov    r8,rsi
 1006f55:	sub    r9,r14
 1006f58:	nop    DWORD PTR [rax+rax*1+0x0]
 1006f60:	lea    rax,[rdx+r13*1]
 1006f64:	test   rax,rax
 1006f67:	je     0x1006f84
 1006f69:	movzx  eax,WORD PTR [r9+rcx*1]
 1006f6e:	test   ax,ax
 1006f71:	je     0x1006f84
 1006f73:	mov    WORD PTR [rcx],ax
 1006f76:	add    rcx,0x2
 1006f7a:	inc    r8
 1006f7d:	dec    rdx
 1006f80:	jne    0x1006f60
 1006f82:	jmp    0x1006f89
 1006f84:	test   rdx,rdx
 1006f87:	jne    0x1006f96
 1006f89:	sub    rcx,0x2
 1006f8d:	mov    r15d,0x8007007a
 1006f93:	dec    r8
 1006f96:	mov    rax,rdi
 1006f99:	mov    WORD PTR [rcx],si
 1006f9c:	lea    rbx,[r14+r8*2]
 1006fa0:	sub    rax,r8
 1006fa3:	test   r15d,r15d
 1006fa6:	jns    0x1006fb5
 1006fa8:	cmp    r15d,0x8007007a
 1006faf:	jne    0x1006f10
 1006fb5:	mov    rsi,QWORD PTR [rbp-0x10]
 1006fb9:	mov    r10,QWORD PTR [rbp+0x50]
 1006fbd:	mov    QWORD PTR [rbp-0x28],rbx
 1006fc1:	mov    r12,rax
 1006fc4:	mov    QWORD PTR [rbp-0x20],rax
 1006fc8:	jmp    0x1007189
 1006fcd:	mov    r11,QWORD PTR [rbp+0x50]
 1006fd1:	mov    rbx,r14
 1006fd4:	mov    r10d,0x4
 1006fda:	mov    rsi,r11
 1006fdd:	mov    r8,r11
 1006fe0:	mov    QWORD PTR [rbp-0x28],rbx
 1006fe4:	lea    r9,[rip+0xffffffffffffa92d]        # 0x1001918
 1006feb:	nop    DWORD PTR [rax+rax*1+0x0]
 1006ff0:	movzx  ecx,WORD PTR [r8]
 1006ff4:	add    r8,0x2
 1006ff8:	lea    eax,[rcx-0x41]
 1006ffb:	cmp    eax,0x19
 1006ffe:	ja     0x1007003
 1007000:	add    ecx,0x20
 1007003:	movzx  edx,WORD PTR [r9]
 1007007:	add    r9,0x2
 100700b:	lea    eax,[rdx-0x41]
 100700e:	cmp    eax,0x19
 1007011:	ja     0x1007016
 1007013:	add    edx,0x20
 1007016:	dec    r10d
 1007019:	je     0x1007023
 100701b:	test   ecx,ecx
 100701d:	je     0x1007023
 100701f:	cmp    ecx,edx
 1007021:	je     0x1006ff0
 1007023:	xor    r9d,r9d
 1007026:	cmp    ecx,edx
 1007028:	mov    edi,r9d
 100702b:	sete   dil
 100702f:	test   edi,edi
 1007031:	je     0x100706b
 1007033:	movzx  ecx,WORD PTR [r11+0x8]
 1007038:	lea    r13,[r11+0x8]
 100703c:	call   QWORD PTR [rip+0xffffffffffffa2d6]        # 0x1001318
 1007042:	mov    r10,QWORD PTR [rbp+0x50]
 1007046:	test   eax,eax
 1007048:	je     0x100705d
 100704a:	cmp    WORD PTR [r10+0xa],0x3a
 1007050:	jne    0x100705d
 1007052:	mov    rsi,r13
 1007055:	mov    r13d,0x7ffffffe
 100705b:	jmp    0x100708b
 100705d:	xor    r8d,r8d
 1007060:	mov    r13d,0x7ffffffe
 1007066:	mov    edi,r8d
 1007069:	jmp    0x100708e
 100706b:	movzx  ecx,WORD PTR [r11]
 100706f:	call   QWORD PTR [rip+0xffffffffffffa2a3]        # 0x1001318
 1007075:	mov    r10,QWORD PTR [rbp+0x50]
 1007079:	test   eax,eax
 100707b:	je     0x100708b
 100707d:	cmp    WORD PTR [r10+0x2],0x3a
 1007083:	mov    eax,0x1
 1007088:	cmove  edi,eax
 100708b:	xor    r8d,r8d
 100708e:	cmp    DWORD PTR [rbp+0x58],0x0
 1007092:	je     0x1007185
 1007098:	test   edi,edi
 100709a:	mov    rdi,QWORD PTR [rbp+0x48]
 100709e:	je     0x1007189
 10070a4:	mov    r11d,0x4
 10070aa:	mov    r15d,r8d
 10070ad:	mov    QWORD PTR [rbp-0x18],r11
 10070b1:	test   rdi,rdi
 10070b4:	je     0x10070bf
 10070b6:	cmp    rdi,0x7fffffff
 10070bd:	jbe    0x10070c5
 10070bf:	mov    r15d,0x80070057
 10070c5:	test   r15d,r15d
 10070c8:	js     0x100718d
 10070ce:	mov    rcx,r14
 10070d1:	mov    rax,rdi
 10070d4:	test   rdi,rdi
 10070d7:	jne    0x1007105
 10070d9:	xor    r9d,r9d
 10070dc:	test   r14,r14
 10070df:	jne    0x10070ec
 10070e1:	mov    r15d,0x80070057
 10070e7:	jmp    0x1007190
 10070ec:	mov    r15d,0x8007007a
 10070f2:	mov    rbx,rcx
 10070f5:	mov    QWORD PTR [rbp-0x28],rcx
 10070f9:	mov    r12,rax
 10070fc:	mov    QWORD PTR [rbp-0x20],rax
 1007100:	jmp    0x1007190
 1007105:	lea    r9,[rip+0xffffffffffffa80c]        # 0x1001918
 100710c:	sub    r13,rdi
 100710f:	mov    rdx,rdi
 1007112:	sub    r9,r14
 1007115:	mov    r15d,r8d
 1007118:	nop    DWORD PTR [rax+rax*1+0x0]
 1007120:	lea    rax,[rdx+r13*1]
 1007124:	test   rax,rax
 1007127:	je     0x1007144
 1007129:	movzx  eax,WORD PTR [r9+rcx*1]
 100712e:	test   ax,ax
 1007131:	je     0x1007144
 1007133:	mov    WORD PTR [rcx],ax
 1007136:	add    rcx,0x2
 100713a:	inc    r8
 100713d:	dec    rdx
 1007140:	jne    0x1007120
 1007142:	jmp    0x1007149
 1007144:	test   rdx,rdx
 1007147:	jne    0x1007156
 1007149:	sub    rcx,0x2
 100714d:	mov    r15d,0x8007007a
 1007153:	dec    r8
 1007156:	xor    r9d,r9d
 1007159:	mov    rax,rdi
 100715c:	sub    rax,r8
 100715f:	mov    WORD PTR [rcx],r9w
 1007163:	lea    rcx,[r14+r8*2]
 1007167:	test   r15d,r15d
 100716a:	jns    0x1007175
 100716c:	cmp    r15d,0x8007007a
 1007173:	jne    0x1007190
 1007175:	mov    rbx,rcx
 1007178:	mov    QWORD PTR [rbp-0x28],rcx
 100717c:	mov    r12,rax
 100717f:	mov    QWORD PTR [rbp-0x20],rax
 1007183:	jmp    0x1007190
 1007185:	mov    rdi,QWORD PTR [rbp+0x48]
 1007189:	mov    r11,QWORD PTR [rbp-0x18]
 100718d:	xor    r9d,r9d
 1007190:	mov    r13d,DWORD PTR [rbp+0x58]
 1007194:	test   r13d,r13d
 1007197:	je     0x10071e4
 1007199:	test   r11,r11
 100719c:	je     0x10071e4
 100719e:	lea    rax,[r11+0x104]
 10071a5:	cmp    rdi,rax
 10071a8:	ja     0x10071e4
 10071aa:	mov    eax,0x104
 10071af:	lea    r8,[rip+0xffffffffffffa46a]        # 0x1001620
 10071b6:	mov    rbx,r14
 10071b9:	cmp    rdi,rax
 10071bc:	mov    rcx,r14
 10071bf:	mov    rsi,r10
 10071c2:	cmova  rdi,rax
 10071c6:	mov    QWORD PTR [rbp-0x28],rbx
 10071ca:	mov    QWORD PTR [rbp-0x18],r9
 10071ce:	mov    rdx,rdi
 10071d1:	mov    QWORD PTR [rbp+0x48],rdi
 10071d5:	mov    r12,rdi
 10071d8:	mov    QWORD PTR [rbp-0x20],rdi
 10071dc:	call   0x10045c0
 10071e1:	mov    r15d,eax
 10071e4:	test   r15d,r15d
 10071e7:	js     0x1007411
 10071ed:	or     rdi,0xffffffffffffffff
 10071f1:	cmp    WORD PTR [rsi],0x0
 10071f5:	lea    eax,[rdi+0x5d]
 10071f8:	je     0x100747e
 10071fe:	mov    edx,eax
 1007200:	mov    rcx,rsi
 1007203:	call   QWORD PTR [rip+0xffffffffffffa117]        # 0x1001320
 1007209:	mov    r13,rax
 100720c:	test   rax,rax
 100720f:	je     0x1007220
 1007211:	mov    rdi,rax
 1007214:	sub    rdi,rsi
 1007217:	sar    rdi,1
 100721a:	jmp    0x100722a
 100721c:	nop    DWORD PTR [rax+0x0]
 1007220:	inc    rdi
 1007223:	cmp    WORD PTR [rsi+rdi*2],0x0
 1007228:	jne    0x1007220
 100722a:	cmp    rdi,0x100
 1007231:	jbe    0x100723d
 1007233:	cmp    DWORD PTR [rbp+0x58],0x0
 1007237:	je     0x1007476
 100723d:	cmp    rdi,0x8000
 1007244:	jae    0x1007476
 100724a:	cmp    rdi,0x1
 100724e:	jne    0x10072ae
 1007250:	cmp    WORD PTR [rsi],0x2e
 1007254:	jne    0x1007367
 100725a:	test   rax,rax
 100725d:	je     0x1007268
 100725f:	lea    rsi,[rax+0x2]
 1007263:	jmp    0x1007404
 1007268:	add    rsi,0x2
 100726c:	cmp    rbx,r14
 100726f:	jbe    0x1007404
 1007275:	mov    rcx,r14
 1007278:	call   0x10066c0
 100727d:	test   eax,eax
 100727f:	jne    0x1007404
 1007285:	sub    rbx,0x2
 1007289:	inc    r12
 100728c:	lea    r8,[rip+0xffffffffffffa38d]        # 0x1001620
 1007293:	mov    rdx,r12
 1007296:	mov    rcx,rbx
 1007299:	mov    QWORD PTR [rbp-0x28],rbx
 100729d:	mov    QWORD PTR [rbp-0x20],r12
 10072a1:	call   0x10045c0
 10072a6:	mov    r15d,eax
 10072a9:	jmp    0x1007404
 10072ae:	cmp    rdi,0x2
 10072b2:	jne    0x1007355
 10072b8:	cmp    WORD PTR [rsi],0x2e
 10072bc:	jne    0x1007367
 10072c2:	cmp    WORD PTR [rsi+0x2],0x2e
 10072c7:	jne    0x1007367
 10072cd:	cmp    rbx,r14
 10072d0:	jbe    0x1007347
 10072d2:	mov    rcx,r14
 10072d5:	call   0x10066c0
 10072da:	test   eax,eax
 10072dc:	jne    0x1007347
 10072de:	add    rbx,0xfffffffffffffffe
 10072e2:	cmp    r14,rbx
 10072e5:	jae    0x10072ff
 10072e7:	nop    WORD PTR [rax+rax*1+0x0]
 10072f0:	sub    rbx,0x2
 10072f4:	cmp    WORD PTR [rbx],0x5c
 10072f8:	je     0x1007303
 10072fa:	cmp    r14,rbx
 10072fd:	jb     0x10072f0
 10072ff:	xor    eax,eax
 1007301:	mov    ebx,eax
 1007303:	mov    r12,QWORD PTR [rbp+0x48]
 1007307:	mov    QWORD PTR [rbp-0x28],rbx
 100730b:	test   rbx,rbx
 100730e:	je     0x100731e
 1007310:	mov    rax,rbx
 1007313:	sub    rax,r14
 1007316:	sar    rax,1
 1007319:	sub    r12,rax
 100731c:	jmp    0x1007325
 100731e:	mov    rbx,r14
 1007321:	mov    QWORD PTR [rbp-0x28],rbx
 1007325:	lea    r8,[rip+0xffffffffffffa2f4]        # 0x1001620
 100732c:	mov    rdx,r12
 100732f:	mov    rcx,rbx
 1007332:	mov    QWORD PTR [rbp-0x20],r12
 1007336:	call   0x10045c0
 100733b:	mov    r15d,eax
 100733e:	add    rsi,0x4
 1007342:	jmp    0x1007404
 1007347:	test   r13,r13
 100734a:	je     0x100733e
 100734c:	lea    rsi,[r13+0x2]
 1007350:	jmp    0x1007404
 1007355:	test   rdi,rdi
 1007358:	jne    0x1007367
 100735a:	cmp    WORD PTR [rsi],0x5c
 100735e:	mov    eax,0x1
 1007363:	cmove  rdi,rax
 1007367:	lea    rax,[rbp-0x20]
 100736b:	xor    r13d,r13d
 100736e:	mov    r9,rdi
 1007371:	mov    DWORD PTR [rsp+0x30],r13d
 1007376:	mov    QWORD PTR [rsp+0x28],rax
 100737b:	lea    rax,[rbp-0x28]
 100737f:	mov    r8,rsi
 1007382:	mov    rdx,r12
 1007385:	mov    rcx,rbx
 1007388:	mov    QWORD PTR [rsp+0x20],rax
 100738d:	call   0x1006260
 1007392:	mov    r15d,eax
 1007395:	cmp    eax,0x8007007a
 100739a:	jne    0x10073f8
 100739c:	cmp    rdi,0x1
 10073a0:	jne    0x10073f8
 10073a2:	cmp    WORD PTR [rsi],0x5c
 10073a6:	jne    0x10073f8
 10073a8:	movzx  eax,WORD PTR [rsi+0x2]
 10073ac:	test   ax,ax
 10073af:	je     0x100746c
 10073b5:	cmp    ax,0x2e
 10073b9:	jne    0x10073c6
 10073bb:	cmp    WORD PTR [rsi+0x4],r13w
 10073c0:	je     0x100746c
 10073c6:	mov    r12,QWORD PTR [rbp-0x20]
 10073ca:	cmp    r12,0x1
 10073ce:	jne    0x10073fc
 10073d0:	cmp    ax,0x2e
 10073d4:	jne    0x10073fc
 10073d6:	cmp    WORD PTR [rsi+0x4],ax
 10073da:	jne    0x10073fc
 10073dc:	mov    rbx,QWORD PTR [rbp-0x28]
 10073e0:	mov    r12,r13
 10073e3:	mov    QWORD PTR [rbp-0x20],r13
 10073e7:	mov    WORD PTR [rbx],r13w
 10073eb:	add    rbx,0x2
 10073ef:	mov    r15d,r13d
 10073f2:	mov    QWORD PTR [rbp-0x28],rbx
 10073f6:	jmp    0x1007400
 10073f8:	mov    r12,QWORD PTR [rbp-0x20]
 10073fc:	mov    rbx,QWORD PTR [rbp-0x28]
 1007400:	lea    rsi,[rsi+rdi*2]
 1007404:	test   r15d,r15d
 1007407:	jns    0x10071ed
 100740d:	mov    r13d,DWORD PTR [rbp+0x58]
 1007411:	mov    rbx,QWORD PTR [rbp+0x48]
 1007415:	lea    r8,[rip+0xffffffffffffa204]        # 0x1001620
 100741c:	mov    rcx,r14
 100741f:	mov    rdx,rbx
 1007422:	call   0x10045c0
 1007427:	cmp    r15d,0x8007007a
 100742e:	jne    0x1007452
 1007430:	test   r13d,r13d
 1007433:	jne    0x1007443
 1007435:	cmp    rbx,0x104
 100743c:	je     0x100744c
 100743e:	test   r13d,r13d
 1007441:	je     0x1007452
 1007443:	cmp    rbx,0x8000
 100744a:	jne    0x1007452
 100744c:	mov    r15d,0x800700ce
 1007452:	mov    eax,r15d
 1007455:	mov    r12,QWORD PTR [rsp+0xb0]
 100745d:	add    rsp,0x70
 1007461:	pop    r15
 1007463:	pop    r14
 1007465:	pop    r13
 1007467:	pop    rdi
 1007468:	pop    rsi
 1007469:	pop    rbx
 100746a:	pop    rbp
 100746b:	ret    
 100746c:	mov    rbx,QWORD PTR [rbp-0x28]
 1007470:	or     rdi,0xffffffffffffffff
 1007474:	jmp    0x1007486
 1007476:	mov    r15d,0x800700ce
 100747c:	jmp    0x100740d
 100747e:	test   r15d,r15d
 1007481:	js     0x100740d
 1007483:	xor    r13d,r13d
 1007486:	cmp    rbx,r14
 1007489:	jbe    0x10074b8
 100748b:	sub    rbx,0x2
 100748f:	cmp    WORD PTR [rbx],0x2e
 1007493:	jne    0x10074b8
 1007495:	cmp    rbx,r14
 1007498:	je     0x10074b4
 100749a:	cmp    WORD PTR [rbx-0x2],0x2a
 100749f:	lea    rax,[rbx-0x2]
 10074a3:	je     0x10074b8
 10074a5:	mov    WORD PTR [rbx],r13w
 10074a9:	cmp    WORD PTR [rax],0x2e
 10074ad:	mov    rbx,rax
 10074b0:	je     0x1007495
 10074b2:	jmp    0x10074b8
 10074b4:	mov    WORD PTR [rbx],r13w
 10074b8:	mov    rax,rdi
 10074bb:	nop    DWORD PTR [rax+rax*1+0x0]
 10074c0:	inc    rax
 10074c3:	cmp    WORD PTR [r14+rax*2],0x0
 10074c9:	jne    0x10074c0
 10074cb:	lea    r11,[r14+rax*2]
 10074cf:	lea    rax,[r14+0xe]
 10074d3:	cmp    r11,rax
 10074d6:	jb     0x1007534
 10074d8:	mov    r10d,0x7
 10074de:	lea    r9,[rip+0xffffffffffffa463]        # 0x1001948
 10074e5:	lea    r8,[r11-0xe]
 10074e9:	nop    DWORD PTR [rax+0x0]
 10074f0:	movzx  ecx,WORD PTR [r8]
 10074f4:	add    r8,0x2
 10074f8:	lea    eax,[rcx-0x41]
 10074fb:	cmp    eax,0x19
 10074fe:	ja     0x1007503
 1007500:	add    ecx,0x20
 1007503:	movzx  edx,WORD PTR [r9]
 1007507:	add    r9,0x2
 100750b:	lea    eax,[rdx-0x41]
 100750e:	cmp    eax,0x19
 1007511:	ja     0x1007516
 1007513:	add    edx,0x20
 1007516:	dec    r10d
 1007519:	je     0x1007523
 100751b:	test   ecx,ecx
 100751d:	je     0x1007523
 100751f:	cmp    ecx,edx
 1007521:	je     0x10074f0
 1007523:	cmp    ecx,edx
 1007525:	mov    eax,r13d
 1007528:	sete   al
 100752b:	test   eax,eax
 100752d:	je     0x1007534
 100752f:	mov    WORD PTR [r11-0xe],r13w
 1007534:	mov    rax,QWORD PTR [rbp-0x18]
 1007538:	test   rax,rax
 100753b:	je     0x1007578
 100753d:	lea    rax,[r14+rax*2]
 1007541:	inc    rdi
 1007544:	cmp    WORD PTR [rax+rdi*2],0x0
 1007549:	jne    0x1007541
 100754b:	cmp    rdi,0x104
 1007552:	jae    0x1007578
 1007554:	cmp    DWORD PTR [rbp-0x30],0x0
 1007558:	mov    rdx,QWORD PTR [rbp+0x48]
 100755c:	je     0x100756c
 100755e:	lea    r8,[r14+0x10]
 1007562:	add    rdx,0xfffffffffffffffe
 1007566:	lea    rcx,[r14+0x4]
 100756a:	jmp    0x1007573
 100756c:	lea    r8,[r14+0x8]
 1007570:	mov    rcx,r14
 1007573:	call   0x10045c0
 1007578:	mov    rax,QWORD PTR [rbp+0x48]
 100757c:	cmp    rax,0x1
 1007580:	jbe    0x1007590
 1007582:	cmp    WORD PTR [r14],0x0
 1007587:	jne    0x1007590
 1007589:	mov    DWORD PTR [r14],0x5c
 1007590:	cmp    rax,0x3
 1007594:	jbe    0x10075ae
 1007596:	cmp    WORD PTR [r14+0x2],0x3a
 100759c:	jne    0x10075ae
 100759e:	cmp    WORD PTR [r14+0x4],0x0
 10075a4:	jne    0x10075ae
 10075a6:	mov    DWORD PTR [r14+0x4],0x5c
 10075ae:	xor    eax,eax
 10075b0:	jmp    0x1007455
 10075b5:	int3   
 10075b6:	int3   
 10075b7:	int3   
 10075b8:	int3   
 10075b9:	int3   
 10075ba:	int3   
 10075bb:	int3   
 10075bc:	int3   
 10075bd:	int3   
 10075be:	int3   
 10075bf:	int3   
 10075c0:	rex push rbx
 10075c2:	push   rbp
 10075c3:	push   rsi
 10075c4:	push   rdi
 10075c5:	push   r12
 10075c7:	push   r13
 10075c9:	push   r15
 10075cb:	sub    rsp,0x260
 10075d2:	mov    rax,QWORD PTR [rip+0x9b37]        # 0x1011110
 10075d9:	xor    rax,rsp
 10075dc:	mov    QWORD PTR [rsp+0x240],rax
 10075e4:	xor    esi,esi
 10075e6:	mov    rbp,r9
 10075e9:	mov    r15,r8
 10075ec:	mov    r12,rdx
 10075ef:	mov    r13,rcx
 10075f2:	mov    edi,esi
 10075f4:	mov    ebx,esi
 10075f6:	test   rcx,rcx
 10075f9:	je     0x10077f0
 10075ff:	test   rdx,rdx
 1007602:	je     0x10077f0
 1007608:	cmp    rdx,0x8000
 100760f:	ja     0x10077f0
 1007615:	mov    QWORD PTR [rsp+0x258],r14
 100761d:	test   r8,r8
 1007620:	jne    0x1007631
 1007622:	test   r9,r9
 1007625:	jne    0x100765f
 1007627:	mov    ebx,0x80070057
 100762c:	jmp    0x10077a5
 1007631:	or     rdi,0xffffffffffffffff
 1007635:	inc    rdi
 1007638:	cmp    WORD PTR [r8+rdi*2],bx
 100763d:	jne    0x1007635
 100763f:	cmp    rdi,0x8000
 1007646:	jb     0x1007652
 1007648:	mov    ebx,0x800700ce
 100764d:	jmp    0x10077a5
 1007652:	test   rdi,rdi
 1007655:	je     0x100765a
 1007657:	inc    rdi
 100765a:	test   r9,r9
 100765d:	je     0x1007688
 100765f:	or     rbx,0xffffffffffffffff
 1007663:	inc    rbx
 1007666:	cmp    WORD PTR [r9+rbx*2],si
 100766b:	jne    0x1007663
 100766d:	cmp    rbx,0x8000
 1007674:	jb     0x1007680
 1007676:	mov    ebx,0x800700ce
 100767b:	jmp    0x10077a5
 1007680:	test   rbx,rbx
 1007683:	je     0x1007688
 1007685:	inc    rbx
 1007688:	lea    r14,[rbx+rdi*1]
 100768c:	cmp    r14,0x104
 1007693:	jbe    0x10076b6
 1007695:	lea    rdx,[r14+r14*1]
 1007699:	mov    ecx,0x40
 100769e:	call   QWORD PTR [rip+0xffffffffffff9adc]        # 0x1001180
 10076a4:	mov    rsi,rax
 10076a7:	test   rax,rax
 10076aa:	jne    0x10076c6
 10076ac:	mov    ebx,0x8007000e
 10076b1:	jmp    0x10077a5
 10076b6:	mov    WORD PTR [rsp+0x30],si
 10076bb:	mov    r14d,0x104
 10076c1:	lea    rsi,[rsp+0x30]
 10076c6:	test   rdi,rdi
 10076c9:	je     0x100778c
 10076cf:	test   rbx,rbx
 10076d2:	jne    0x10076dc
 10076d4:	mov    r8,r15
 10076d7:	jmp    0x1007794
 10076dc:	mov    rcx,rbp
 10076df:	call   0x1006510
 10076e4:	test   eax,eax
 10076e6:	je     0x100772e
 10076e8:	mov    r8,r15
 10076eb:	mov    rdx,r14
 10076ee:	mov    rcx,rsi
 10076f1:	call   0x10045c0
 10076f6:	mov    ebx,eax
 10076f8:	test   eax,eax
 10076fa:	js     0x10077a5
 1007700:	lea    r9,[rsp+0x28]
 1007705:	lea    r8,[rsp+0x20]
 100770a:	mov    rdx,r14
 100770d:	mov    rcx,rsi
 1007710:	call   0x10068a0
 1007715:	mov    ebx,eax
 1007717:	test   eax,eax
 1007719:	js     0x10077a5
 100771f:	mov    rdx,QWORD PTR [rsp+0x28]
 1007724:	mov    rcx,QWORD PTR [rsp+0x20]
 1007729:	mov    r8,rbp
 100772c:	jmp    0x100779a
 100772e:	cmp    WORD PTR [rbp+0x0],0x5c
 1007733:	jne    0x1007791
 1007735:	cmp    WORD PTR [rbp+0x2],0x5c
 100773a:	je     0x1007791
 100773c:	mov    r8,r15
 100773f:	mov    rdx,r14
 1007742:	mov    rcx,rsi
 1007745:	call   0x10045c0
 100774a:	mov    ebx,eax
 100774c:	test   eax,eax
 100774e:	js     0x10077a5
 1007750:	mov    rdx,r14
 1007753:	mov    rcx,rsi
 1007756:	call   0x1006c00
 100775b:	mov    ebx,eax
 100775d:	test   eax,eax
 100775f:	js     0x10077a5
 1007761:	lea    r9,[rsp+0x20]
 1007766:	lea    r8,[rsp+0x28]
 100776b:	mov    rdx,r14
 100776e:	mov    rcx,rsi
 1007771:	call   0x10068a0
 1007776:	mov    ebx,eax
 1007778:	test   eax,eax
 100777a:	js     0x10077a5
 100777c:	mov    rdx,QWORD PTR [rsp+0x20]
 1007781:	mov    rcx,QWORD PTR [rsp+0x28]
 1007786:	lea    r8,[rbp+0x2]
 100778a:	jmp    0x100779a
 100778c:	test   rbx,rbx
 100778f:	je     0x10077b9
 1007791:	mov    r8,rbp
 1007794:	mov    rcx,rsi
 1007797:	mov    rdx,r14
 100779a:	call   0x10045c0
 100779f:	mov    ebx,eax
 10077a1:	test   eax,eax
 10077a3:	jns    0x10077b9
 10077a5:	lea    r8,[rip+0xffffffffffff9e74]        # 0x1001620
 10077ac:	mov    rdx,r12
 10077af:	mov    rcx,r13
 10077b2:	call   0x10045c0
 10077b7:	jmp    0x10077d1
 10077b9:	mov    r9d,DWORD PTR [rsp+0x2c0]
 10077c1:	mov    r8,rsi
 10077c4:	mov    rdx,r12
 10077c7:	mov    rcx,r13
 10077ca:	call   0x1006cd0
 10077cf:	mov    ebx,eax
 10077d1:	mov    r14,QWORD PTR [rsp+0x258]
 10077d9:	lea    rax,[rsp+0x30]
 10077de:	cmp    rsi,rax
 10077e1:	je     0x10077ec
 10077e3:	mov    rcx,rsi
 10077e6:	call   QWORD PTR [rip+0xffffffffffff99bc]        # 0x10011a8
 10077ec:	mov    eax,ebx
 10077ee:	jmp    0x10077f5
 10077f0:	mov    eax,0x80070057
 10077f5:	mov    rcx,QWORD PTR [rsp+0x240]
 10077fd:	xor    rcx,rsp
 1007800:	call   0x10057d0
 1007805:	add    rsp,0x260
 100780c:	pop    r15
 100780e:	pop    r13
 1007810:	pop    r12
 1007812:	pop    rdi
 1007813:	pop    rsi
 1007814:	pop    rbp
 1007815:	pop    rbx
 1007816:	ret    
 1007817:	int3   
 1007818:	int3   
 1007819:	int3   
 100781a:	int3   
 100781b:	int3   
 100781c:	int3   
 100781d:	int3   
 100781e:	int3   
 100781f:	int3   
 1007820:	mov    QWORD PTR [rsp+0x10],rbx
 1007825:	mov    QWORD PTR [rsp+0x18],rbp
 100782a:	mov    QWORD PTR [rsp+0x20],r14
 100782f:	push   r15
 1007831:	sub    rsp,0x30
 1007835:	mov    r14d,r9d
 1007838:	mov    rbx,r8
 100783b:	mov    r15,rdx
 100783e:	mov    rbp,rcx
 1007841:	test   r8,r8
 1007844:	je     0x1007932
 100784a:	mov    QWORD PTR [rsp+0x40],rsi
 100784f:	xor    esi,esi
 1007851:	cmp    WORD PTR [r8],0x5c
 1007856:	jne    0x10078ce
 1007858:	cmp    WORD PTR [r8+0x2],0x5c
 100785e:	jne    0x10078ce
 1007860:	cmp    WORD PTR [r8+0x4],0x3f
 1007866:	je     0x100787a
 1007868:	mov    rcx,rbx
 100786b:	call   0x1006550
 1007870:	test   eax,eax
 1007872:	je     0x100792d
 1007878:	jmp    0x10078ce
 100787a:	mov    r10d,0x5
 1007880:	lea    r9,[rip+0xffffffffffffa079]        # 0x1001900
 1007887:	add    r8,0x6
 100788b:	nop    DWORD PTR [rax+rax*1+0x0]
 1007890:	movzx  ecx,WORD PTR [r8]
 1007894:	add    r8,0x2
 1007898:	lea    eax,[rcx-0x41]
 100789b:	cmp    eax,0x19
 100789e:	ja     0x10078a3
 10078a0:	add    ecx,0x20
 10078a3:	movzx  edx,WORD PTR [r9]
 10078a7:	add    r9,0x2
 10078ab:	lea    eax,[rdx-0x41]
 10078ae:	cmp    eax,0x19
 10078b1:	ja     0x10078b6
 10078b3:	add    edx,0x20
 10078b6:	dec    r10d
 10078b9:	je     0x10078c3
 10078bb:	test   ecx,ecx
 10078bd:	je     0x10078c3
 10078bf:	cmp    ecx,edx
 10078c1:	je     0x1007890
 10078c3:	cmp    ecx,edx
 10078c5:	mov    eax,esi
 10078c7:	sete   al
 10078ca:	test   eax,eax
 10078cc:	jne    0x100792d
 10078ce:	mov    r10d,0x4
 10078d4:	lea    r9,[rip+0xffffffffffffa03d]        # 0x1001918
 10078db:	mov    r8,rbx
 10078de:	xchg   ax,ax
 10078e0:	movzx  ecx,WORD PTR [r8]
 10078e4:	add    r8,0x2
 10078e8:	lea    eax,[rcx-0x41]
 10078eb:	cmp    eax,0x19
 10078ee:	ja     0x10078f3
 10078f0:	add    ecx,0x20
 10078f3:	movzx  edx,WORD PTR [r9]
 10078f7:	add    r9,0x2
 10078fb:	lea    eax,[rdx-0x41]
 10078fe:	cmp    eax,0x19
 1007901:	ja     0x1007906
 1007903:	add    edx,0x20
 1007906:	dec    r10d
 1007909:	je     0x1007913
 100790b:	test   ecx,ecx
 100790d:	je     0x1007913
 100790f:	cmp    ecx,edx
 1007911:	je     0x10078e0
 1007913:	cmp    ecx,edx
 1007915:	sete   sil
 1007919:	test   esi,esi
 100791b:	jne    0x100792d
 100791d:	cmp    WORD PTR [rbx],0x5c
 1007921:	jne    0x100792d
 1007923:	add    rbx,0x2
 1007927:	cmp    WORD PTR [rbx],0x5c
 100792b:	je     0x1007923
 100792d:	mov    rsi,QWORD PTR [rsp+0x40]
 1007932:	mov    r9,rbx
 1007935:	mov    r8,rbp
 1007938:	mov    rdx,r15
 100793b:	mov    rcx,rbp
 100793e:	mov    DWORD PTR [rsp+0x20],r14d
 1007943:	call   0x10075c0
 1007948:	mov    rbx,QWORD PTR [rsp+0x48]
 100794d:	mov    rbp,QWORD PTR [rsp+0x50]
 1007952:	mov    r14,QWORD PTR [rsp+0x58]
 1007957:	add    rsp,0x30
 100795b:	pop    r15
 100795d:	ret    
 100795e:	int3   
 100795f:	int3   
 1007960:	int3   
 1007961:	int3   
 1007962:	int3   
 1007963:	int3   
 1007964:	int3   
 1007965:	int3   
 1007966:	int3   
 1007967:	int3   
 1007968:	int3   
 1007969:	int3   
 100796a:	int3   
 100796b:	int3   
 100796c:	int3   
 100796d:	int3   
 100796e:	int3   
 100796f:	int3   
 1007970:	lea    rdx,[rip+0xffffffffffff9fe9]        # 0x1001960
 1007977:	xor    r8d,r8d
 100797a:	sub    rcx,rdx
 100797d:	nop    DWORD PTR [rax]
 1007980:	movzx  eax,WORD PTR [rcx+rdx*1]
 1007984:	movzx  r9d,WORD PTR [rdx]
 1007988:	cmp    ax,r9w
 100798c:	je     0x10079b9
 100798e:	cmp    r9w,0x30
 1007993:	jne    0x10079cc
 1007995:	cmp    ax,r9w
 1007999:	jb     0x10079a1
 100799b:	cmp    ax,0x39
 100799f:	jbe    0x10079b9
 10079a1:	cmp    ax,0x41
 10079a5:	jb     0x10079ad
 10079a7:	cmp    ax,0x46
 10079ab:	jbe    0x10079b9
 10079ad:	cmp    ax,0x61
 10079b1:	jb     0x10079cc
 10079b3:	cmp    ax,0x66
 10079b7:	ja     0x10079cc
 10079b9:	inc    r8d
 10079bc:	add    rdx,0x2
 10079c0:	cmp    r8d,0x26
 10079c4:	jb     0x1007980
 10079c6:	mov    eax,0x1
 10079cb:	ret    
 10079cc:	xor    eax,eax
 10079ce:	ret    
 10079cf:	int3   
 10079d0:	int3   
 10079d1:	int3   
 10079d2:	int3   
 10079d3:	int3   
 10079d4:	int3   
 10079d5:	int3   
 10079d6:	int3   
 10079d7:	int3   
 10079d8:	int3   
 10079d9:	int3   
 10079da:	int3   
 10079db:	int3   
 10079dc:	int3   
 10079dd:	int3   
 10079de:	int3   
 10079df:	int3   
 10079e0:	rex push rbx
 10079e2:	push   rbp
 10079e3:	push   rsi
 10079e4:	sub    rsp,0x50
 10079e8:	xor    ebp,ebp
 10079ea:	mov    rbx,rcx
 10079ed:	mov    esi,edx
 10079ef:	lea    rcx,[rsp+0x30]
 10079f4:	lea    r8,[rip+0xffffffffffffa125]        # 0x1001b20
 10079fb:	mov    r9d,0x20019
 1007a01:	mov    rdx,0xffffffff80000002
 1007a08:	mov    QWORD PTR [rsp+0x30],rbp
 1007a0d:	mov    DWORD PTR [rsp+0x38],ebp
 1007a11:	mov    QWORD PTR [rsp+0x40],rbp
 1007a16:	call   0x10044c0
 1007a1b:	test   eax,eax
 1007a1d:	je     0x1007a89
 1007a1f:	mov    ecx,esi
 1007a21:	test   esi,esi
 1007a23:	je     0x1007a6d
 1007a25:	cmp    rcx,0x7fffffff
 1007a2c:	ja     0x1007a6d
 1007a2e:	lea    r8,[rip+0xffffffffffffa143]        # 0x1001b78
 1007a35:	mov    edx,0x7ffffffe
 1007a3a:	sub    rdx,rcx
 1007a3d:	sub    r8,rbx
 1007a40:	lea    rax,[rdx+rcx*1]
 1007a44:	test   rax,rax
 1007a47:	je     0x1007a61
 1007a49:	movzx  eax,WORD PTR [r8+rbx*1]
 1007a4e:	test   ax,ax
 1007a51:	je     0x1007a61
 1007a53:	mov    WORD PTR [rbx],ax
 1007a56:	add    rbx,0x2
 1007a5a:	dec    rcx
 1007a5d:	jne    0x1007a40
 1007a5f:	jmp    0x1007a66
 1007a61:	test   rcx,rcx
 1007a64:	jne    0x1007a6a
 1007a66:	sub    rbx,0x2
 1007a6a:	mov    WORD PTR [rbx],bp
 1007a6d:	mov    rcx,QWORD PTR [rsp+0x30]
 1007a72:	test   rcx,rcx
 1007a75:	je     0x1007b25
 1007a7b:	add    rsp,0x50
 1007a7f:	pop    rsi
 1007a80:	pop    rbp
 1007a81:	pop    rbx
 1007a82:	rex.W jmp QWORD PTR [rip+0xffffffffffff9577]        # 0x1001000
 1007a89:	lea    eax,[rsi+rsi*1]
 1007a8c:	mov    QWORD PTR [rsp+0x70],rdi
 1007a91:	mov    rdi,QWORD PTR [rsp+0x30]
 1007a96:	mov    DWORD PTR [rsp+0x80],eax
 1007a9d:	lea    rax,[rsp+0x80]
 1007aa5:	lea    r9,[rsp+0x88]
 1007aad:	mov    QWORD PTR [rsp+0x28],rax
 1007ab2:	lea    rdx,[rip+0xffffffffffffa0c7]        # 0x1001b80
 1007ab9:	xor    r8d,r8d
 1007abc:	mov    rcx,rdi
 1007abf:	mov    QWORD PTR [rsp+0x20],rbx
 1007ac4:	call   QWORD PTR [rip+0xffffffffffff9546]        # 0x1001010
 1007aca:	test   eax,eax
 1007acc:	jne    0x1007b00
 1007ace:	mov    eax,DWORD PTR [rsp+0x88]
 1007ad5:	cmp    eax,0x1
 1007ad8:	je     0x1007adf
 1007ada:	cmp    eax,0x2
 1007add:	jne    0x1007b00
 1007adf:	mov    ecx,DWORD PTR [rsp+0x80]
 1007ae6:	test   rbx,rbx
 1007ae9:	je     0x1007b30
 1007aeb:	test   ecx,ecx
 1007aed:	je     0x1007b2d
 1007aef:	test   cl,0x1
 1007af2:	jne    0x1007b00
 1007af4:	mov    eax,ecx
 1007af6:	shr    rax,1
 1007af9:	cmp    WORD PTR [rbx+rax*2-0x2],bp
 1007afe:	je     0x1007b30
 1007b00:	lea    r8,[rip+0xffffffffffffa071]        # 0x1001b78
 1007b07:	mov    rdx,rsi
 1007b0a:	mov    rcx,rbx
 1007b0d:	call   0x10045c0
 1007b12:	test   rdi,rdi
 1007b15:	je     0x1007b20
 1007b17:	mov    rcx,rdi
 1007b1a:	call   QWORD PTR [rip+0xffffffffffff94e0]        # 0x1001000
 1007b20:	mov    rdi,QWORD PTR [rsp+0x70]
 1007b25:	add    rsp,0x50
 1007b29:	pop    rsi
 1007b2a:	pop    rbp
 1007b2b:	pop    rbx
 1007b2c:	ret    
 1007b2d:	mov    WORD PTR [rbx],bp
 1007b30:	shr    ecx,1
 1007b32:	cmp    ecx,esi
 1007b34:	jae    0x1007b00
 1007b36:	mov    WORD PTR [rbx+rcx*2],bp
 1007b3a:	jmp    0x1007b12
 1007b3c:	int3   
 1007b3d:	int3   
 1007b3e:	int3   
 1007b3f:	int3   
 1007b40:	int3   
 1007b41:	int3   
 1007b42:	int3   
 1007b43:	int3   
 1007b44:	int3   
 1007b45:	int3   
 1007b46:	int3   
 1007b47:	int3   
 1007b48:	int3   
 1007b49:	int3   
 1007b4a:	int3   
 1007b4b:	int3   
 1007b4c:	int3   
 1007b4d:	int3   
 1007b4e:	int3   
 1007b4f:	int3   
 1007b50:	mov    QWORD PTR [rsp+0x18],rbx
 1007b55:	push   rdi
 1007b56:	sub    rsp,0x240
 1007b5d:	mov    rax,QWORD PTR [rip+0x95ac]        # 0x1011110
 1007b64:	xor    rax,rsp
 1007b67:	mov    QWORD PTR [rsp+0x230],rax
 1007b6f:	mov    edi,edx
 1007b71:	mov    rbx,rcx
 1007b74:	cmp    edx,0x104
 1007b7a:	jae    0x1007bdf
 1007b7c:	mov    ecx,edi
 1007b7e:	test   edx,edx
 1007b80:	je     0x1007c1c
 1007b86:	cmp    rcx,0x7fffffff
 1007b8d:	ja     0x1007c1c
 1007b93:	lea    r8,[rip+0xffffffffffff9a86]        # 0x1001620
 1007b9a:	mov    edx,0x7ffffffe
 1007b9f:	sub    rdx,rcx
 1007ba2:	sub    r8,rbx
 1007ba5:	lea    rax,[rdx+rcx*1]
 1007ba9:	test   rax,rax
 1007bac:	je     0x1007bcf
 1007bae:	movzx  eax,WORD PTR [r8+rbx*1]
 1007bb3:	test   ax,ax
 1007bb6:	je     0x1007bcf
 1007bb8:	mov    WORD PTR [rbx],ax
 1007bbb:	add    rbx,0x2
 1007bbf:	dec    rcx
 1007bc2:	jne    0x1007ba5
 1007bc4:	sub    rbx,0x2
 1007bc8:	xor    eax,eax
 1007bca:	mov    WORD PTR [rbx],ax
 1007bcd:	jmp    0x1007c1c
 1007bcf:	test   rcx,rcx
 1007bd2:	jne    0x1007bd8
 1007bd4:	sub    rbx,0x2
 1007bd8:	xor    eax,eax
 1007bda:	mov    WORD PTR [rbx],ax
 1007bdd:	jmp    0x1007c1c
 1007bdf:	lea    rcx,[rsp+0x20]
 1007be4:	mov    edx,0x104
 1007be9:	call   0x10079e0
 1007bee:	lea    rdx,[rip+0xffffffffffff9fb3]        # 0x1001ba8
 1007bf5:	lea    rcx,[rsp+0x20]
 1007bfa:	mov    r9,rbx
 1007bfd:	xor    r8d,r8d
 1007c00:	call   QWORD PTR [rip+0xffffffffffff951a]        # 0x1001120
 1007c06:	test   eax,eax
 1007c08:	jne    0x1007c1c
 1007c0a:	lea    r8,[rip+0xffffffffffff9a0f]        # 0x1001620
 1007c11:	mov    rdx,rdi
 1007c14:	mov    rcx,rbx
 1007c17:	call   0x10045c0
 1007c1c:	mov    rcx,QWORD PTR [rsp+0x230]
 1007c24:	xor    rcx,rsp
 1007c27:	call   0x10057d0
 1007c2c:	mov    rbx,QWORD PTR [rsp+0x260]
 1007c34:	add    rsp,0x240
 1007c3b:	pop    rdi
 1007c3c:	ret    
 1007c3d:	int3   
 1007c3e:	int3   
 1007c3f:	int3   
 1007c40:	int3   
 1007c41:	int3   
 1007c42:	int3   
 1007c43:	int3   
 1007c44:	int3   
 1007c45:	int3   
 1007c46:	int3   
 1007c47:	int3   
 1007c48:	int3   
 1007c49:	int3   
 1007c4a:	int3   
 1007c4b:	int3   
 1007c4c:	int3   
 1007c4d:	int3   
 1007c4e:	int3   
 1007c4f:	int3   
 1007c50:	mov    QWORD PTR [rsp+0x10],rbx
 1007c55:	mov    QWORD PTR [rsp+0x18],rsi
 1007c5a:	mov    QWORD PTR [rsp+0x20],rdi
 1007c5f:	push   rbp
 1007c60:	lea    rbp,[rsp-0x3110]
 1007c68:	mov    eax,0x3210
 1007c6d:	call   0x100d210
 1007c72:	sub    rsp,rax
 1007c75:	mov    rax,QWORD PTR [rip+0x9494]        # 0x1011110
 1007c7c:	xor    rax,rsp
 1007c7f:	mov    QWORD PTR [rbp+0x3100],rax
 1007c86:	xor    esi,esi
 1007c88:	lea    r9,[rsp+0x40]
 1007c8d:	lea    rdx,[rsp+0x44]
 1007c92:	lea    r8d,[rsi+0x2]
 1007c96:	mov    rdi,rcx
 1007c99:	mov    WORD PTR [rsp+0x44],0xfeff
 1007ca0:	mov    QWORD PTR [rsp+0x20],rsi
 1007ca5:	call   QWORD PTR [rip+0xffffffffffff948d]        # 0x1001138
 1007cab:	lea    rcx,[rbp+0x22f2]
 1007cb2:	xor    edx,edx
 1007cb4:	mov    r8d,0x7fe
 1007cba:	mov    WORD PTR [rbp+0x22f0],si
 1007cc1:	call   0x1005982
 1007cc6:	lea    rcx,[rbp+0x20f2]
 1007ccd:	xor    edx,edx
 1007ccf:	mov    r8d,0xfe
 1007cd5:	mov    WORD PTR [rbp+0x20f0],si
 1007cdc:	call   0x1005982
 1007ce1:	lea    rcx,[rbp+0x21f2]
 1007ce8:	xor    edx,edx
 1007cea:	mov    r8d,0xfe
 1007cf0:	mov    WORD PTR [rbp+0x21f0],si
 1007cf7:	call   0x1005982
 1007cfc:	lea    rax,[rbp+0x20f0]
 1007d03:	mov    ebx,0x80
 1007d08:	lea    r9,[rip+0xffffffffffff9ea1]        # 0x1001bb0
 1007d0f:	xor    r8d,r8d
 1007d12:	xor    edx,edx
 1007d14:	mov    ecx,0x400
 1007d19:	mov    DWORD PTR [rsp+0x28],ebx
 1007d1d:	mov    QWORD PTR [rsp+0x20],rax
 1007d22:	call   QWORD PTR [rip+0xffffffffffff93d8]        # 0x1001100
 1007d28:	test   eax,eax
 1007d2a:	je     0x1007db9
 1007d30:	lea    rax,[rbp+0x21f0]
 1007d37:	lea    r9,[rip+0xffffffffffff9e8a]        # 0x1001bc8
 1007d3e:	xor    r8d,r8d
 1007d41:	xor    edx,edx
 1007d43:	mov    ecx,0x400
 1007d48:	mov    DWORD PTR [rsp+0x28],ebx
 1007d4c:	mov    QWORD PTR [rsp+0x20],rax
 1007d51:	call   QWORD PTR [rip+0xffffffffffff93b1]        # 0x1001108
 1007d57:	test   eax,eax
 1007d59:	je     0x1007db9
 1007d5b:	lea    rax,[rbp+0x21f0]
 1007d62:	lea    r9,[rbp+0x20f0]
 1007d69:	lea    r8,[rip+0xffffffffffff9e70]        # 0x1001be0
 1007d70:	lea    rcx,[rbp+0x22f0]
 1007d77:	mov    edx,0x400
 1007d7c:	mov    QWORD PTR [rsp+0x20],rax
 1007d81:	call   0x1008310
 1007d86:	lea    r11,[rbp+0x22f0]
 1007d8d:	or     rax,0xffffffffffffffff
 1007d91:	inc    rax
 1007d94:	cmp    WORD PTR [r11+rax*2],si
 1007d99:	jne    0x1007d91
 1007d9b:	lea    r8d,[rax+rax*1]
 1007d9f:	lea    r9,[rsp+0x40]
 1007da4:	lea    rdx,[rbp+0x22f0]
 1007dab:	mov    rcx,rdi
 1007dae:	mov    QWORD PTR [rsp+0x20],rsi
 1007db3:	call   QWORD PTR [rip+0xffffffffffff937f]        # 0x1001138
 1007db9:	call   QWORD PTR [rip+0xffffffffffff9401]        # 0x10011c0
 1007dbf:	lea    r8,[rip+0xffffffffffff9e6a]        # 0x1001c30
 1007dc6:	lea    rcx,[rbp+0x22f0]
 1007dcd:	mov    r9d,eax
 1007dd0:	mov    edx,0x400
 1007dd5:	call   0x1008310
 1007dda:	lea    r11,[rbp+0x22f0]
 1007de1:	or     rax,0xffffffffffffffff
 1007de5:	inc    rax
 1007de8:	cmp    WORD PTR [r11+rax*2],si
 1007ded:	jne    0x1007de5
 1007def:	lea    r8d,[rax+rax*1]
 1007df3:	lea    r9,[rsp+0x40]
 1007df8:	lea    rdx,[rbp+0x22f0]
 1007dff:	mov    rcx,rdi
 1007e02:	mov    QWORD PTR [rsp+0x20],rsi
 1007e07:	call   QWORD PTR [rip+0xffffffffffff932b]        # 0x1001138
 1007e0d:	lea    rdx,[rbp+0x20f0]
 1007e14:	mov    r8d,ebx
 1007e17:	xor    ecx,ecx
 1007e19:	call   QWORD PTR [rip+0xffffffffffff9309]        # 0x1001128
 1007e1f:	test   eax,eax
 1007e21:	je     0x1007e78
 1007e23:	lea    r9,[rbp+0x20f0]
 1007e2a:	lea    r8,[rip+0xffffffffffff9e17]        # 0x1001c48
 1007e31:	lea    rcx,[rbp+0x22f0]
 1007e38:	mov    edx,0x400
 1007e3d:	call   0x1008310
 1007e42:	lea    r11,[rbp+0x22f0]
 1007e49:	or     rax,0xffffffffffffffff
 1007e4d:	nop    DWORD PTR [rax]
 1007e50:	inc    rax
 1007e53:	cmp    WORD PTR [r11+rax*2],si
 1007e58:	jne    0x1007e50
 1007e5a:	lea    r8d,[rax+rax*1]
 1007e5e:	lea    r9,[rsp+0x40]
 1007e63:	lea    rdx,[rbp+0x22f0]
 1007e6a:	mov    rcx,rdi
 1007e6d:	mov    QWORD PTR [rsp+0x20],rsi
 1007e72:	call   QWORD PTR [rip+0xffffffffffff92c0]        # 0x1001138
 1007e78:	lea    rcx,[rbp+0x1fd0]
 1007e7f:	xor    edx,edx
 1007e81:	mov    r8d,0x11c
 1007e87:	call   0x1005982
 1007e8c:	lea    rcx,[rbp+0x1fd0]
 1007e93:	mov    DWORD PTR [rbp+0x1fd0],0x11c
 1007e9d:	call   QWORD PTR [rip+0xffffffffffff9275]        # 0x1001118
 1007ea3:	test   eax,eax
 1007ea5:	je     0x1007f19
 1007ea7:	mov    r9d,DWORD PTR [rbp+0x1fd4]
 1007eae:	lea    rax,[rbp+0x1fe4]
 1007eb5:	lea    r8,[rip+0xffffffffffff9db4]        # 0x1001c70
 1007ebc:	mov    QWORD PTR [rsp+0x30],rax
 1007ec1:	mov    eax,DWORD PTR [rbp+0x1fdc]
 1007ec7:	lea    rcx,[rbp+0x22f0]
 1007ece:	mov    DWORD PTR [rsp+0x28],eax
 1007ed2:	mov    eax,DWORD PTR [rbp+0x1fd8]
 1007ed8:	mov    edx,0x400
 1007edd:	mov    DWORD PTR [rsp+0x20],eax
 1007ee1:	call   0x1008310
 1007ee6:	lea    r11,[rbp+0x22f0]
 1007eed:	or     rax,0xffffffffffffffff
 1007ef1:	inc    rax
 1007ef4:	cmp    WORD PTR [r11+rax*2],si
 1007ef9:	jne    0x1007ef1
 1007efb:	lea    r8d,[rax+rax*1]
 1007eff:	lea    r9,[rsp+0x40]
 1007f04:	lea    rdx,[rbp+0x22f0]
 1007f0b:	mov    rcx,rdi
 1007f0e:	mov    QWORD PTR [rsp+0x20],rsi
 1007f13:	call   QWORD PTR [rip+0xffffffffffff921f]        # 0x1001138
 1007f19:	lea    rcx,[rsp+0x60]
 1007f1e:	call   QWORD PTR [rip+0xffffffffffff920c]        # 0x1001130
 1007f24:	movzx  r11d,WORD PTR [rsp+0x60]
 1007f2a:	lea    rcx,[rbp+0x20f0]
 1007f31:	lea    rax,[rbp+0x20f0]
 1007f38:	test   r11d,r11d
 1007f3b:	je     0x1007ff3
 1007f41:	cmp    r11d,0x6
 1007f45:	je     0x1007fc3
 1007f47:	cmp    r11d,0x9
 1007f4b:	je     0x1007f8e
 1007f4d:	lea    rdx,[rip+0xffffffffffff9d94]        # 0x1001ce8
 1007f54:	sub    rdx,rax
 1007f57:	nop    WORD PTR [rax+rax*1+0x0]
 1007f60:	lea    rax,[rbx+0x7fffff7e]
 1007f67:	test   rax,rax
 1007f6a:	je     0x1008023
 1007f70:	movzx  eax,WORD PTR [rdx+rcx*1]
 1007f74:	test   ax,ax
 1007f77:	je     0x1008023
 1007f7d:	mov    WORD PTR [rcx],ax
 1007f80:	add    rcx,0x2
 1007f84:	dec    rbx
 1007f87:	jne    0x1007f60
 1007f89:	jmp    0x1008028
 1007f8e:	lea    rdx,[rip+0xffffffffffff9d2b]        # 0x1001cc0
 1007f95:	sub    rdx,rax
 1007f98:	nop    DWORD PTR [rax+rax*1+0x0]
 1007fa0:	lea    rax,[rbx+0x7fffff7e]
 1007fa7:	test   rax,rax
 1007faa:	je     0x1008023
 1007fac:	movzx  eax,WORD PTR [rdx+rcx*1]
 1007fb0:	test   ax,ax
 1007fb3:	je     0x1008023
 1007fb5:	mov    WORD PTR [rcx],ax
 1007fb8:	add    rcx,0x2
 1007fbc:	dec    rbx
 1007fbf:	jne    0x1007fa0
 1007fc1:	jmp    0x1008028
 1007fc3:	lea    rdx,[rip+0xffffffffffff9d06]        # 0x1001cd0
 1007fca:	sub    rdx,rax
 1007fcd:	nop    DWORD PTR [rax]
 1007fd0:	lea    rax,[rbx+0x7fffff7e]
 1007fd7:	test   rax,rax
 1007fda:	je     0x1008023
 1007fdc:	movzx  eax,WORD PTR [rdx+rcx*1]
 1007fe0:	test   ax,ax
 1007fe3:	je     0x1008023
 1007fe5:	mov    WORD PTR [rcx],ax
 1007fe8:	add    rcx,0x2
 1007fec:	dec    rbx
 1007fef:	jne    0x1007fd0
 1007ff1:	jmp    0x1008028
 1007ff3:	lea    rdx,[rip+0xffffffffffff9ce6]        # 0x1001ce0
 1007ffa:	sub    rdx,rax
 1007ffd:	nop    DWORD PTR [rax]
 1008000:	lea    rax,[rbx+0x7fffff7e]
 1008007:	test   rax,rax
 100800a:	je     0x1008023
 100800c:	movzx  eax,WORD PTR [rdx+rcx*1]
 1008010:	test   ax,ax
 1008013:	je     0x1008023
 1008015:	mov    WORD PTR [rcx],ax
 1008018:	add    rcx,0x2
 100801c:	dec    rbx
 100801f:	jne    0x1008000
 1008021:	jmp    0x1008028
 1008023:	test   rbx,rbx
 1008026:	jne    0x100802c
 1008028:	sub    rcx,0x2
 100802c:	mov    WORD PTR [rcx],si
 100802f:	mov    DWORD PTR [rsp+0x4c],esi
 1008033:	call   QWORD PTR [rip+0xffffffffffff9227]        # 0x1001260
 1008039:	lea    rdx,[rsp+0x4c]
 100803e:	mov    rcx,rax
 1008041:	call   QWORD PTR [rip+0xffffffffffff90c9]        # 0x1001110
 1008047:	cmp    DWORD PTR [rsp+0x4c],esi
 100804b:	mov    r9d,DWORD PTR [rbp-0x80]
 100804f:	lea    rax,[rip+0xffffffffffff9caa]        # 0x1001d00
 1008056:	lea    rdx,[rip+0xffffffffffff9cbb]        # 0x1001d18
 100805d:	lea    rcx,[rip+0xffffffffffff95bc]        # 0x1001620
 1008064:	cmovne rcx,rax
 1008068:	cmp    r9d,0x1
 100806c:	lea    rax,[rip+0xffffffffffff9cbd]        # 0x1001d30
 1008073:	cmova  rax,rdx
 1008077:	mov    QWORD PTR [rsp+0x30],rcx
 100807c:	lea    r8,[rip+0xffffffffffff9cc5]        # 0x1001d48
 1008083:	mov    QWORD PTR [rsp+0x28],rax
 1008088:	lea    rax,[rbp+0x20f0]
 100808f:	lea    rcx,[rbp+0x22f0]
 1008096:	mov    edx,0x400
 100809b:	mov    QWORD PTR [rsp+0x20],rax
 10080a0:	call   0x1008310
 10080a5:	lea    r11,[rbp+0x22f0]
 10080ac:	or     rax,0xffffffffffffffff
 10080b0:	inc    rax
 10080b3:	cmp    WORD PTR [r11+rax*2],si
 10080b8:	jne    0x10080b0
 10080ba:	lea    r8d,[rax+rax*1]
 10080be:	lea    r9,[rsp+0x40]
 10080c3:	lea    rdx,[rbp+0x22f0]
 10080ca:	mov    rcx,rdi
 10080cd:	mov    QWORD PTR [rsp+0x20],rsi
 10080d2:	call   QWORD PTR [rip+0xffffffffffff9060]        # 0x1001138
 10080d8:	lea    rcx,[rbp+0x1f90]
 10080df:	call   QWORD PTR [rip+0xffffffffffff905b]        # 0x1001140
 10080e5:	mov    r11,QWORD PTR [rbp+0x1fa8]
 10080ec:	mov    rdx,QWORD PTR [rbp+0x1fb0]
 10080f3:	mov    rcx,QWORD PTR [rbp+0x1f98]
 10080fa:	mov    rax,QWORD PTR [rbp+0x1fa0]
 1008101:	mov    r9d,DWORD PTR [rbp+0x1f94]
 1008108:	shr    rdx,0x14
 100810c:	shr    rcx,0x14
 1008110:	shr    r11,0x14
 1008114:	mov    QWORD PTR [rsp+0x38],r11
 1008119:	mov    QWORD PTR [rsp+0x30],rdx
 100811e:	mov    QWORD PTR [rsp+0x28],rcx
 1008123:	shr    rax,0x14
 1008127:	lea    rcx,[rbp+0x22f0]
 100812e:	lea    r8,[rip+0xffffffffffff9c4b]        # 0x1001d80
 1008135:	mov    edx,0x400
 100813a:	mov    QWORD PTR [rsp+0x20],rax
 100813f:	call   0x1008310
 1008144:	lea    r11,[rbp+0x22f0]
 100814b:	or     rax,0xffffffffffffffff
 100814f:	nop
 1008150:	inc    rax
 1008153:	cmp    WORD PTR [r11+rax*2],si
 1008158:	jne    0x1008150
 100815a:	lea    r8d,[rax+rax*1]
 100815e:	lea    r9,[rsp+0x40]
 1008163:	lea    rdx,[rbp+0x22f0]
 100816a:	mov    rcx,rdi
 100816d:	mov    QWORD PTR [rsp+0x20],rsi
 1008172:	call   QWORD PTR [rip+0xffffffffffff8fc0]        # 0x1001138
 1008178:	mov    DWORD PTR [rsp+0x48],esi
 100817c:	call   QWORD PTR [rip+0xffffffffffff90de]        # 0x1001260
 1008182:	lea    r9,[rsp+0x48]
 1008187:	lea    rdx,[rbp-0x70]
 100818b:	mov    rcx,rax
 100818e:	mov    r8d,0x400
 1008194:	call   0x100d5a0
 1008199:	test   eax,eax
 100819b:	je     0x10082dc
 10081a1:	mov    eax,DWORD PTR [rsp+0x48]
 10081a5:	mov    ecx,0x2000
 10081aa:	mov    rbx,rsi
 10081ad:	cmp    eax,ecx
 10081af:	cmova  eax,ecx
 10081b2:	mov    DWORD PTR [rsp+0x48],eax
 10081b6:	test   rax,0xfffffffffffffff8
 10081bc:	jbe    0x10082dc
 10081c2:	call   QWORD PTR [rip+0xffffffffffff9098]        # 0x1001260
 10081c8:	mov    rdx,QWORD PTR [rbp+rbx*8-0x70]
 10081cd:	lea    r8,[rbp+0x2af0]
 10081d4:	mov    rcx,rax
 10081d7:	mov    r9d,0x104
 10081dd:	call   0x100d5ac
 10081e2:	test   eax,eax
 10081e4:	je     0x10082c8
 10081ea:	lea    r9,[rbp+0x2d00]
 10081f1:	lea    rcx,[rbp+0x2af0]
 10081f8:	xor    edx,edx
 10081fa:	mov    r8d,0x400
 1008200:	mov    QWORD PTR [rsp+0x50],rsi
 1008205:	call   0x100d588
 100820a:	test   eax,eax
 100820c:	je     0x1008277
 100820e:	lea    r9,[rsp+0x58]
 1008213:	lea    r8,[rsp+0x50]
 1008218:	lea    rdx,[rip+0xffffffffffff9705]        # 0x1001924
 100821f:	lea    rcx,[rbp+0x2d00]
 1008226:	call   0x100d594
 100822b:	test   eax,eax
 100822d:	je     0x1008277
 100822f:	mov    rcx,QWORD PTR [rsp+0x50]
 1008234:	lea    r9,[rbp+0x2af0]
 100823b:	movzx  edx,WORD PTR [rcx+0x14]
 100823f:	movzx  r8d,WORD PTR [rcx+0x16]
 1008244:	movzx  eax,WORD PTR [rcx+0x10]
 1008248:	movzx  ecx,WORD PTR [rcx+0x12]
 100824c:	mov    DWORD PTR [rsp+0x38],edx
 1008250:	mov    DWORD PTR [rsp+0x30],r8d
 1008255:	mov    DWORD PTR [rsp+0x28],eax
 1008259:	mov    DWORD PTR [rsp+0x20],ecx
 100825d:	lea    r8,[rip+0xffffffffffff9bbc]        # 0x1001e20
 1008264:	lea    rcx,[rbp+0x22f0]
 100826b:	mov    edx,0x400
 1008270:	call   0x1008310
 1008275:	jmp    0x1008296
 1008277:	lea    r9,[rbp+0x2af0]
 100827e:	lea    r8,[rip+0xffffffffffff9beb]        # 0x1001e70
 1008285:	lea    rcx,[rbp+0x22f0]
 100828c:	mov    edx,0x400
 1008291:	call   0x1008310
 1008296:	lea    rcx,[rbp+0x22f0]
 100829d:	or     rax,0xffffffffffffffff
 10082a1:	inc    rax
 10082a4:	cmp    WORD PTR [rcx+rax*2],si
 10082a8:	jne    0x10082a1
 10082aa:	lea    r8d,[rax+rax*1]
 10082ae:	lea    r9,[rsp+0x40]
 10082b3:	lea    rdx,[rbp+0x22f0]
 10082ba:	mov    rcx,rdi
 10082bd:	mov    QWORD PTR [rsp+0x20],rsi
 10082c2:	call   QWORD PTR [rip+0xffffffffffff8e70]        # 0x1001138
 10082c8:	mov    eax,DWORD PTR [rsp+0x48]
 10082cc:	inc    rbx
 10082cf:	shr    rax,0x3
 10082d3:	cmp    rbx,rax
 10082d6:	jb     0x10081c2
 10082dc:	mov    rcx,QWORD PTR [rbp+0x3100]
 10082e3:	xor    rcx,rsp
 10082e6:	call   0x10057d0
 10082eb:	lea    r11,[rsp+0x3210]
 10082f3:	mov    rbx,QWORD PTR [r11+0x18]
 10082f7:	mov    rsi,QWORD PTR [r11+0x20]
 10082fb:	mov    rdi,QWORD PTR [r11+0x28]
 10082ff:	mov    rsp,r11
 1008302:	pop    rbp
 1008303:	ret    
 1008304:	int3   
 1008305:	int3   
 1008306:	int3   
 1008307:	int3   
 1008308:	int3   
 1008309:	int3   
 100830a:	int3   
 100830b:	int3   
 100830c:	int3   
 100830d:	int3   
 100830e:	int3   
 100830f:	int3   
 1008310:	mov    QWORD PTR [rsp+0x18],r8
 1008315:	mov    QWORD PTR [rsp+0x20],r9
 100831a:	push   rbx
 100831b:	push   rsi
 100831c:	sub    rsp,0x28
 1008320:	xor    ebx,ebx
 1008322:	mov    rsi,rcx
 1008325:	mov    eax,ebx
 1008327:	test   rdx,rdx
 100832a:	je     0x1008335
 100832c:	cmp    rdx,0x7fffffff
 1008333:	jbe    0x100833a
 1008335:	mov    eax,0x80070057
 100833a:	test   eax,eax
 100833c:	js     0x1008384
 100833e:	mov    QWORD PTR [rsp+0x20],rdi
 1008343:	lea    rdi,[rdx-0x1]
 1008347:	lea    r9,[rsp+0x58]
 100834c:	mov    rdx,rdi
 100834f:	call   QWORD PTR [rip+0xffffffffffff8fd3]        # 0x1001328
 1008355:	test   eax,eax
 1008357:	js     0x1008374
 1008359:	cdqe   
 100835b:	cmp    rax,rdi
 100835e:	ja     0x1008374
 1008360:	jne    0x100837d
 1008362:	mov    WORD PTR [rsi+rdi*2],bx
 1008366:	mov    rdi,QWORD PTR [rsp+0x20]
 100836b:	mov    eax,ebx
 100836d:	add    rsp,0x28
 1008371:	pop    rsi
 1008372:	pop    rbx
 1008373:	ret    
 1008374:	mov    WORD PTR [rsi+rdi*2],bx
 1008378:	mov    ebx,0x8007007a
 100837d:	mov    rdi,QWORD PTR [rsp+0x20]
 1008382:	mov    eax,ebx
 1008384:	add    rsp,0x28
 1008388:	pop    rsi
 1008389:	pop    rbx
 100838a:	ret    
 100838b:	lea    rax,[rip+0x8e1e]        # 0x10111b0
 1008392:	jmp    0x1008397
 1008397:	mov    QWORD PTR [rsp+0x8],rcx
 100839c:	mov    QWORD PTR [rsp+0x10],rdx
 10083a1:	mov    QWORD PTR [rsp+0x18],r8
 10083a6:	mov    QWORD PTR [rsp+0x20],r9
 10083ab:	sub    rsp,0x68
 10083af:	movdqa XMMWORD PTR [rsp+0x20],xmm0
 10083b5:	movdqa XMMWORD PTR [rsp+0x30],xmm1
 10083bb:	movdqa XMMWORD PTR [rsp+0x40],xmm2
 10083c1:	movdqa XMMWORD PTR [rsp+0x50],xmm3
 10083c7:	mov    rdx,rax
 10083ca:	lea    rcx,[rip+0x76c7]        # 0x100fa98
 10083d1:	call   0x100cef8
 10083d6:	movdqa xmm0,XMMWORD PTR [rsp+0x20]
 10083dc:	movdqa xmm1,XMMWORD PTR [rsp+0x30]
 10083e2:	movdqa xmm2,XMMWORD PTR [rsp+0x40]
 10083e8:	movdqa xmm3,XMMWORD PTR [rsp+0x50]
 10083ee:	mov    rcx,QWORD PTR [rsp+0x70]
 10083f3:	mov    rdx,QWORD PTR [rsp+0x78]
 10083f8:	mov    r8,QWORD PTR [rsp+0x80]
 1008400:	mov    r9,QWORD PTR [rsp+0x88]
 1008408:	add    rsp,0x68
 100840c:	jmp    0x100840e
 100840e:	jmp    rax
 1008410:	int3   
 1008411:	int3   
 1008412:	int3   
 1008413:	int3   
 1008414:	int3   
 1008415:	int3   
 1008416:	jmp    QWORD PTR [rip+0x8d94]        # 0x10111b0
 100841c:	int3   
 100841d:	int3   
 100841e:	int3   
 100841f:	int3   
 1008420:	int3   
 1008421:	int3   
 1008422:	int3   
 1008423:	int3   
 1008424:	int3   
 1008425:	int3   
 1008426:	int3   
 1008427:	int3   
 1008428:	int3   
 1008429:	int3   
 100842a:	int3   
 100842b:	int3   
 100842c:	int3   
 100842d:	int3   
 100842e:	int3   
 100842f:	int3   
 1008430:	sub    rsp,0x308
 1008437:	mov    rax,QWORD PTR [rip+0x8cd2]        # 0x1011110
 100843e:	xor    rax,rsp
 1008441:	mov    QWORD PTR [rsp+0x2f8],rax
 1008449:	mov    QWORD PTR [rsp+0x280],0x0
 1008455:	mov    DWORD PTR [rsp+0x250],0x104
 1008460:	mov    DWORD PTR [rsp+0x25c],0x0
 100846b:	mov    QWORD PTR [rsp+0x278],0x0
 1008477:	mov    QWORD PTR [rsp+0x260],0x0
 1008483:	mov    QWORD PTR [rsp+0x268],0x0
 100848f:	mov    QWORD PTR [rsp+0x288],0x0
 100849b:	mov    DWORD PTR [rsp+0x258],0x0
 10084a6:	mov    DWORD PTR [rsp+0x274],0x0
 10084b1:	mov    DWORD PTR [rsp+0x254],0x409
 10084bc:	lea    rax,[rsp+0x280]
 10084c4:	mov    QWORD PTR [rsp+0x20],rax
 10084c9:	mov    r9d,0x20019
 10084cf:	xor    r8d,r8d
 10084d2:	lea    rdx,[rip+0xffffffffffffaa57]        # 0x1002f30
 10084d9:	mov    rcx,0xffffffff80000002
 10084e0:	call   0x10090b0
 10084e5:	mov    DWORD PTR [rsp+0x270],eax
 10084ec:	cmp    DWORD PTR [rsp+0x270],0x0
 10084f4:	je     0x10084fb
 10084f6:	jmp    0x1008bec
 10084fb:	lea    rax,[rsp+0x250]
 1008503:	mov    QWORD PTR [rsp+0x28],rax
 1008508:	lea    rax,[rsp+0x40]
 100850d:	mov    QWORD PTR [rsp+0x20],rax
 1008512:	xor    r9d,r9d
 1008515:	xor    r8d,r8d
 1008518:	lea    rdx,[rip+0xffffffffffffa9f9]        # 0x1002f18
 100851f:	mov    rcx,QWORD PTR [rsp+0x280]
 1008527:	call   0x10090f0
 100852c:	mov    DWORD PTR [rsp+0x270],eax
 1008533:	cmp    DWORD PTR [rsp+0x270],0x0
 100853b:	je     0x1008542
 100853d:	jmp    0x1008bec
 1008542:	lea    rcx,[rip+0xffffffffffffa9af]        # 0x1002ef8
 1008549:	call   QWORD PTR [rip+0xffffffffffff8d21]        # 0x1001270
 100854f:	lea    rdx,[rip+0xffffffffffffa98a]        # 0x1002ee0
 1008556:	mov    rcx,rax
 1008559:	call   QWORD PTR [rip+0xffffffffffff8d29]        # 0x1001288
 100855f:	mov    QWORD PTR [rsp+0x268],rax
 1008567:	lea    rcx,[rip+0xffffffffffffa98a]        # 0x1002ef8
 100856e:	call   QWORD PTR [rip+0xffffffffffff8cfc]        # 0x1001270
 1008574:	lea    rdx,[rip+0xffffffffffffa94d]        # 0x1002ec8
 100857b:	mov    rcx,rax
 100857e:	call   QWORD PTR [rip+0xffffffffffff8d04]        # 0x1001288
 1008584:	mov    QWORD PTR [rsp+0x288],rax
 100858c:	cmp    QWORD PTR [rsp+0x268],0x0
 1008595:	je     0x10085a2
 1008597:	cmp    QWORD PTR [rsp+0x288],0x0
 10085a0:	jne    0x10085b2
 10085a2:	mov    DWORD PTR [rsp+0x274],0x1
 10085ad:	jmp    0x10087c7
 10085b2:	xor    edx,edx
 10085b4:	xor    ecx,ecx
 10085b6:	call   QWORD PTR [rsp+0x288]
 10085bd:	mov    DWORD PTR [rsp+0x25c],eax
 10085c4:	mov    eax,DWORD PTR [rsp+0x25c]
 10085cb:	mov    DWORD PTR [rsp+0x250],eax
 10085d2:	lea    rcx,[rsp+0x40]
 10085d7:	call   QWORD PTR [rip+0xffffffffffff8b9b]        # 0x1001178
 10085dd:	mov    ecx,DWORD PTR [rsp+0x250]
 10085e4:	lea    eax,[rcx+rax*1+0x2]
 10085e8:	mov    DWORD PTR [rsp+0x250],eax
 10085ef:	cmp    QWORD PTR [rsp+0x278],0x0
 10085f8:	je     0x100868f
 10085fe:	mov    QWORD PTR [rsp+0x290],0x0
 100860a:	mov    eax,DWORD PTR [rsp+0x250]
 1008611:	shl    rax,1
 1008614:	mov    QWORD PTR [rsp+0x2c8],rax
 100861c:	call   QWORD PTR [rip+0xffffffffffff8aa6]        # 0x10010c8
 1008622:	mov    rcx,QWORD PTR [rsp+0x2c8]
 100862a:	mov    r9,rcx
 100862d:	mov    r8,QWORD PTR [rsp+0x278]
 1008635:	mov    edx,0x8
 100863a:	mov    rcx,rax
 100863d:	call   QWORD PTR [rip+0xffffffffffff8a8d]        # 0x10010d0
 1008643:	mov    QWORD PTR [rsp+0x290],rax
 100864b:	cmp    QWORD PTR [rsp+0x290],0x0
 1008654:	jne    0x100867d
 1008656:	call   QWORD PTR [rip+0xffffffffffff8a6c]        # 0x10010c8
 100865c:	mov    r8,QWORD PTR [rsp+0x278]
 1008664:	xor    edx,edx
 1008666:	mov    rcx,rax
 1008669:	call   QWORD PTR [rip+0xffffffffffff8a69]        # 0x10010d8
 100866f:	mov    QWORD PTR [rsp+0x278],0x0
 100867b:	jmp    0x100868d
 100867d:	mov    rax,QWORD PTR [rsp+0x290]
 1008685:	mov    QWORD PTR [rsp+0x278],rax
 100868d:	jmp    0x10086c8
 100868f:	mov    eax,DWORD PTR [rsp+0x250]
 1008696:	shl    rax,1
 1008699:	mov    QWORD PTR [rsp+0x2d0],rax
 10086a1:	call   QWORD PTR [rip+0xffffffffffff8a21]        # 0x10010c8
 10086a7:	mov    rcx,QWORD PTR [rsp+0x2d0]
 10086af:	mov    r8,rcx
 10086b2:	mov    edx,0x8
 10086b7:	mov    rcx,rax
 10086ba:	call   QWORD PTR [rip+0xffffffffffff8a20]        # 0x10010e0
 10086c0:	mov    QWORD PTR [rsp+0x278],rax
 10086c8:	cmp    QWORD PTR [rsp+0x278],0x0
 10086d1:	je     0x10086f0
 10086d3:	mov    rdx,QWORD PTR [rsp+0x278]
 10086db:	mov    ecx,DWORD PTR [rsp+0x250]
 10086e2:	call   QWORD PTR [rsp+0x288]
 10086e9:	mov    DWORD PTR [rsp+0x25c],eax
 10086f0:	cmp    QWORD PTR [rsp+0x278],0x0
 10086f9:	je     0x100870f
 10086fb:	mov    eax,DWORD PTR [rsp+0x250]
 1008702:	cmp    DWORD PTR [rsp+0x25c],eax
 1008709:	jae    0x10085b2
 100870f:	cmp    QWORD PTR [rsp+0x278],0x0
 1008718:	je     0x1008729
 100871a:	mov    rax,QWORD PTR [rsp+0x278]
 1008722:	movzx  eax,WORD PTR [rax]
 1008725:	test   eax,eax
 1008727:	jne    0x1008753
 1008729:	lea    rcx,[rsp+0x40]
 100872e:	call   QWORD PTR [rsp+0x268]
 1008735:	mov    DWORD PTR [rsp+0x258],eax
 100873c:	cmp    DWORD PTR [rsp+0x258],0x0
 1008744:	jne    0x1008751
 1008746:	mov    DWORD PTR [rsp+0x274],0x1
 1008751:	jmp    0x10087c7
 1008753:	mov    DWORD PTR [rsp+0x28],0xffffffff
 100875b:	lea    rax,[rsp+0x40]
 1008760:	mov    QWORD PTR [rsp+0x20],rax
 1008765:	mov    r9d,0xffffffff
 100876b:	mov    r8,QWORD PTR [rsp+0x278]
 1008773:	mov    edx,0x1
 1008778:	mov    ecx,DWORD PTR [rsp+0x254]
 100877f:	call   QWORD PTR [rip+0xffffffffffff8963]        # 0x10010e8
 1008785:	cmp    eax,0x2
 1008788:	je     0x10087bc
 100878a:	mov    DWORD PTR [rsp+0x274],0x1
 1008795:	call   QWORD PTR [rip+0xffffffffffff892d]        # 0x10010c8
 100879b:	mov    r8,QWORD PTR [rsp+0x278]
 10087a3:	xor    edx,edx
 10087a5:	mov    rcx,rax
 10087a8:	call   QWORD PTR [rip+0xffffffffffff892a]        # 0x10010d8
 10087ae:	mov    QWORD PTR [rsp+0x278],0x0
 10087ba:	jmp    0x10087c7
 10087bc:	mov    DWORD PTR [rsp+0x258],0x1
 10087c7:	cmp    DWORD PTR [rsp+0x274],0x0
 10087cf:	je     0x1008bec
 10087d5:	xor    r8d,r8d
 10087d8:	xor    edx,edx
 10087da:	lea    rcx,[rip+0xffffffffffffa6d7]        # 0x1002eb8
 10087e1:	call   QWORD PTR [rip+0xffffffffffff8aa9]        # 0x1001290
 10087e7:	mov    DWORD PTR [rsp+0x25c],eax
 10087ee:	mov    eax,DWORD PTR [rsp+0x25c]
 10087f5:	mov    DWORD PTR [rsp+0x250],eax
 10087fc:	cmp    DWORD PTR [rsp+0x250],0x0
 1008804:	jne    0x1008824
 1008806:	lea    rdx,[rsp+0x40]
 100880b:	lea    rcx,[rip+0xffffffffffffa6a6]        # 0x1002eb8
 1008812:	call   QWORD PTR [rip+0xffffffffffff88e0]        # 0x10010f8
 1008818:	mov    DWORD PTR [rsp+0x258],eax
 100881f:	jmp    0x1008bec
 1008824:	mov    DWORD PTR [rsp+0x2a8],0x0
 100882f:	mov    QWORD PTR [rsp+0x2a0],0x0
 100883b:	mov    DWORD PTR [rsp+0x298],0x0
 1008846:	lea    rcx,[rsp+0x40]
 100884b:	call   QWORD PTR [rip+0xffffffffffff8927]        # 0x1001178
 1008851:	add    eax,0x1
 1008854:	mov    DWORD PTR [rsp+0x29c],eax
 100885b:	mov    eax,DWORD PTR [rsp+0x25c]
 1008862:	mov    DWORD PTR [rsp+0x250],eax
 1008869:	lea    rcx,[rsp+0x40]
 100886e:	call   QWORD PTR [rip+0xffffffffffff8904]        # 0x1001178
 1008874:	mov    ecx,DWORD PTR [rsp+0x250]
 100887b:	lea    eax,[rcx+rax*1+0x2]
 100887f:	mov    DWORD PTR [rsp+0x250],eax
 1008886:	cmp    QWORD PTR [rsp+0x278],0x0
 100888f:	je     0x1008926
 1008895:	mov    QWORD PTR [rsp+0x2b0],0x0
 10088a1:	mov    eax,DWORD PTR [rsp+0x250]
 10088a8:	shl    rax,1
 10088ab:	mov    QWORD PTR [rsp+0x2d8],rax
 10088b3:	call   QWORD PTR [rip+0xffffffffffff880f]        # 0x10010c8
 10088b9:	mov    rcx,QWORD PTR [rsp+0x2d8]
 10088c1:	mov    r9,rcx
 10088c4:	mov    r8,QWORD PTR [rsp+0x278]
 10088cc:	mov    edx,0x8
 10088d1:	mov    rcx,rax
 10088d4:	call   QWORD PTR [rip+0xffffffffffff87f6]        # 0x10010d0
 10088da:	mov    QWORD PTR [rsp+0x2b0],rax
 10088e2:	cmp    QWORD PTR [rsp+0x2b0],0x0
 10088eb:	jne    0x1008914
 10088ed:	call   QWORD PTR [rip+0xffffffffffff87d5]        # 0x10010c8
 10088f3:	mov    r8,QWORD PTR [rsp+0x278]
 10088fb:	xor    edx,edx
 10088fd:	mov    rcx,rax
 1008900:	call   QWORD PTR [rip+0xffffffffffff87d2]        # 0x10010d8
 1008906:	mov    QWORD PTR [rsp+0x278],0x0
 1008912:	jmp    0x1008924
 1008914:	mov    rax,QWORD PTR [rsp+0x2b0]
 100891c:	mov    QWORD PTR [rsp+0x278],rax
 1008924:	jmp    0x100895f
 1008926:	mov    eax,DWORD PTR [rsp+0x250]
 100892d:	shl    rax,1
 1008930:	mov    QWORD PTR [rsp+0x2e0],rax
 1008938:	call   QWORD PTR [rip+0xffffffffffff878a]        # 0x10010c8
 100893e:	mov    rcx,QWORD PTR [rsp+0x2e0]
 1008946:	mov    r8,rcx
 1008949:	mov    edx,0x8
 100894e:	mov    rcx,rax
 1008951:	call   QWORD PTR [rip+0xffffffffffff8789]        # 0x10010e0
 1008957:	mov    QWORD PTR [rsp+0x278],rax
 100895f:	cmp    QWORD PTR [rsp+0x278],0x0
 1008968:	je     0x100898e
 100896a:	mov    r8d,DWORD PTR [rsp+0x250]
 1008972:	mov    rdx,QWORD PTR [rsp+0x278]
 100897a:	lea    rcx,[rip+0xffffffffffffa537]        # 0x1002eb8
 1008981:	call   QWORD PTR [rip+0xffffffffffff8909]        # 0x1001290
 1008987:	mov    DWORD PTR [rsp+0x25c],eax
 100898e:	cmp    QWORD PTR [rsp+0x278],0x0
 1008997:	je     0x10089ad
 1008999:	mov    eax,DWORD PTR [rsp+0x250]
 10089a0:	cmp    DWORD PTR [rsp+0x25c],eax
 10089a7:	jae    0x100885b
 10089ad:	mov    rax,QWORD PTR [rsp+0x278]
 10089b5:	mov    QWORD PTR [rsp+0x2a0],rax
 10089bd:	mov    eax,DWORD PTR [rsp+0x25c]
 10089c4:	add    eax,0x1
 10089c7:	mov    DWORD PTR [rsp+0x298],eax
 10089ce:	cmp    DWORD PTR [rsp+0x2a8],0x0
 10089d6:	jne    0x1008b0a
 10089dc:	mov    eax,DWORD PTR [rsp+0x29c]
 10089e3:	cmp    DWORD PTR [rsp+0x298],eax
 10089ea:	jb     0x1008b0a
 10089f0:	mov    DWORD PTR [rsp+0x2bc],0x0
 10089fb:	mov    DWORD PTR [rsp+0x2b8],0x0
 1008a06:	mov    WORD PTR [rsp+0x2c0],0x0
 1008a10:	mov    eax,DWORD PTR [rsp+0x2bc]
 1008a17:	mov    rcx,QWORD PTR [rsp+0x2a0]
 1008a1f:	movzx  eax,WORD PTR [rcx+rax*2]
 1008a23:	mov    WORD PTR [rsp+0x2c0],ax
 1008a2b:	movzx  eax,WORD PTR [rsp+0x2c0]
 1008a33:	mov    ecx,DWORD PTR [rsp+0x2bc]
 1008a3a:	movzx  ecx,WORD PTR [rsp+rcx*2+0x40]
 1008a3f:	cmp    eax,ecx
 1008a41:	jne    0x1008a50
 1008a43:	mov    DWORD PTR [rsp+0x2e8],0x1
 1008a4e:	jmp    0x1008a5b
 1008a50:	mov    DWORD PTR [rsp+0x2e8],0x0
 1008a5b:	mov    eax,DWORD PTR [rsp+0x2e8]
 1008a62:	mov    DWORD PTR [rsp+0x2b8],eax
 1008a69:	cmp    DWORD PTR [rsp+0x2b8],0x0
 1008a71:	je     0x1008a9e
 1008a73:	mov    eax,DWORD PTR [rsp+0x29c]
 1008a7a:	sub    eax,0x1
 1008a7d:	cmp    DWORD PTR [rsp+0x2bc],eax
 1008a84:	jne    0x1008a88
 1008a86:	jmp    0x1008a9e
 1008a88:	mov    eax,DWORD PTR [rsp+0x2bc]
 1008a8f:	add    eax,0x1
 1008a92:	mov    DWORD PTR [rsp+0x2bc],eax
 1008a99:	jmp    0x1008a10
 1008a9e:	cmp    DWORD PTR [rsp+0x2b8],0x0
 1008aa6:	je     0x1008ab5
 1008aa8:	mov    DWORD PTR [rsp+0x2a8],0x1
 1008ab3:	jmp    0x1008ae0
 1008ab5:	mov    eax,DWORD PTR [rsp+0x29c]
 1008abc:	sub    eax,0x1
 1008abf:	cmp    DWORD PTR [rsp+0x2bc],eax
 1008ac6:	jne    0x1008ae0
 1008ac8:	movzx  eax,WORD PTR [rsp+0x2c0]
 1008ad0:	cmp    eax,0x3b
 1008ad3:	jne    0x1008ae0
 1008ad5:	mov    DWORD PTR [rsp+0x2a8],0x1
 1008ae0:	mov    rax,QWORD PTR [rsp+0x2a0]
 1008ae8:	add    rax,0x2
 1008aec:	mov    QWORD PTR [rsp+0x2a0],rax
 1008af4:	mov    eax,DWORD PTR [rsp+0x298]
 1008afb:	sub    eax,0x1
 1008afe:	mov    DWORD PTR [rsp+0x298],eax
 1008b05:	jmp    0x10089ce
 1008b0a:	cmp    DWORD PTR [rsp+0x2a8],0x0
 1008b12:	je     0x1008b24
 1008b14:	mov    DWORD PTR [rsp+0x258],0x1
 1008b1f:	jmp    0x1008bec
 1008b24:	mov    eax,DWORD PTR [rsp+0x250]
 1008b2b:	shl    rax,1
 1008b2e:	mov    QWORD PTR [rsp+0x2f0],rax
 1008b36:	call   QWORD PTR [rip+0xffffffffffff858c]        # 0x10010c8
 1008b3c:	mov    rcx,QWORD PTR [rsp+0x2f0]
 1008b44:	mov    r8,rcx
 1008b47:	mov    edx,0x8
 1008b4c:	mov    rcx,rax
 1008b4f:	call   QWORD PTR [rip+0xffffffffffff858b]        # 0x10010e0
 1008b55:	mov    QWORD PTR [rsp+0x260],rax
 1008b5d:	cmp    QWORD PTR [rsp+0x278],0x0
 1008b66:	je     0x1008bec
 1008b6c:	cmp    QWORD PTR [rsp+0x260],0x0
 1008b75:	je     0x1008bec
 1008b77:	mov    eax,DWORD PTR [rsp+0x250]
 1008b7e:	lea    r8,[rsp+0x40]
 1008b83:	mov    rdx,rax
 1008b86:	mov    rcx,QWORD PTR [rsp+0x260]
 1008b8e:	call   0x1008d20
 1008b93:	mov    eax,DWORD PTR [rsp+0x250]
 1008b9a:	lea    r8,[rip+0xffffffffffffa30f]        # 0x1002eb0
 1008ba1:	mov    rdx,rax
 1008ba4:	mov    rcx,QWORD PTR [rsp+0x260]
 1008bac:	call   0x1008d90
 1008bb1:	mov    eax,DWORD PTR [rsp+0x250]
 1008bb8:	mov    r8,QWORD PTR [rsp+0x278]
 1008bc0:	mov    rdx,rax
 1008bc3:	mov    rcx,QWORD PTR [rsp+0x260]
 1008bcb:	call   0x1008d90
 1008bd0:	mov    rdx,QWORD PTR [rsp+0x260]
 1008bd8:	lea    rcx,[rip+0xffffffffffffa2d9]        # 0x1002eb8
 1008bdf:	call   QWORD PTR [rip+0xffffffffffff8513]        # 0x10010f8
 1008be5:	mov    DWORD PTR [rsp+0x258],eax
 1008bec:	cmp    QWORD PTR [rsp+0x278],0x0
 1008bf5:	je     0x1008c1c
 1008bf7:	call   QWORD PTR [rip+0xffffffffffff84cb]        # 0x10010c8
 1008bfd:	mov    r8,QWORD PTR [rsp+0x278]
 1008c05:	xor    edx,edx
 1008c07:	mov    rcx,rax
 1008c0a:	call   QWORD PTR [rip+0xffffffffffff84c8]        # 0x10010d8
 1008c10:	mov    QWORD PTR [rsp+0x278],0x0
 1008c1c:	cmp    QWORD PTR [rsp+0x260],0x0
 1008c25:	je     0x1008c4c
 1008c27:	call   QWORD PTR [rip+0xffffffffffff849b]        # 0x10010c8
 1008c2d:	mov    r8,QWORD PTR [rsp+0x260]
 1008c35:	xor    edx,edx
 1008c37:	mov    rcx,rax
 1008c3a:	call   QWORD PTR [rip+0xffffffffffff8498]        # 0x10010d8
 1008c40:	mov    QWORD PTR [rsp+0x260],0x0
 1008c4c:	cmp    QWORD PTR [rsp+0x280],0x0
 1008c55:	je     0x1008c64
 1008c57:	mov    rcx,QWORD PTR [rsp+0x280]
 1008c5f:	call   0x1009cc0
 1008c64:	mov    eax,DWORD PTR [rsp+0x258]
 1008c6b:	mov    rcx,QWORD PTR [rsp+0x2f8]
 1008c73:	xor    rcx,rsp
 1008c76:	call   0x10057d0
 1008c7b:	add    rsp,0x308
 1008c82:	ret    
 1008c83:	int3   
 1008c84:	int3   
 1008c85:	int3   
 1008c86:	int3   
 1008c87:	int3   
 1008c88:	int3   
 1008c89:	int3   
 1008c8a:	int3   
 1008c8b:	int3   
 1008c8c:	int3   
 1008c8d:	int3   
 1008c8e:	int3   
 1008c8f:	int3   
 1008c90:	rex push rbp
 1008c92:	sub    rsp,0x30
 1008c96:	mov    rbp,rdx
 1008c99:	cmp    QWORD PTR [rbp+0x278],0x0
 1008ca1:	je     0x1008cc6
 1008ca3:	call   QWORD PTR [rip+0xffffffffffff841f]        # 0x10010c8
 1008ca9:	mov    r8,QWORD PTR [rbp+0x278]
 1008cb0:	xor    edx,edx
 1008cb2:	mov    rcx,rax
 1008cb5:	call   QWORD PTR [rip+0xffffffffffff841d]        # 0x10010d8
 1008cbb:	mov    QWORD PTR [rbp+0x278],0x0
 1008cc6:	cmp    QWORD PTR [rbp+0x260],0x0
 1008cce:	je     0x1008cf3
 1008cd0:	call   QWORD PTR [rip+0xffffffffffff83f2]        # 0x10010c8
 1008cd6:	mov    r8,QWORD PTR [rbp+0x260]
 1008cdd:	xor    edx,edx
 1008cdf:	mov    rcx,rax
 1008ce2:	call   QWORD PTR [rip+0xffffffffffff83f0]        # 0x10010d8
 1008ce8:	mov    QWORD PTR [rbp+0x260],0x0
 1008cf3:	cmp    QWORD PTR [rbp+0x280],0x0
 1008cfb:	je     0x1008d09
 1008cfd:	mov    rcx,QWORD PTR [rbp+0x280]
 1008d04:	call   0x1009cc0
 1008d09:	add    rsp,0x30
 1008d0d:	pop    rbp
 1008d0e:	ret    
 1008d0f:	int3   
 1008d10:	int3   
 1008d11:	int3   
 1008d12:	int3   
 1008d13:	int3   
 1008d14:	int3   
 1008d15:	int3   
 1008d16:	int3   
 1008d17:	int3   
 1008d18:	int3   
 1008d19:	int3   
 1008d1a:	int3   
 1008d1b:	int3   
 1008d1c:	int3   
 1008d1d:	int3   
 1008d1e:	int3   
 1008d1f:	int3   
 1008d20:	mov    QWORD PTR [rsp+0x18],r8
 1008d25:	mov    QWORD PTR [rsp+0x10],rdx
 1008d2a:	mov    QWORD PTR [rsp+0x8],rcx
 1008d2f:	sub    rsp,0x48
 1008d33:	mov    r8d,0x7fffffff
 1008d39:	mov    rdx,QWORD PTR [rsp+0x58]
 1008d3e:	mov    rcx,QWORD PTR [rsp+0x50]
 1008d43:	call   0x1008e20
 1008d48:	mov    DWORD PTR [rsp+0x30],eax
 1008d4c:	cmp    DWORD PTR [rsp+0x30],0x0
 1008d51:	jl     0x1008d77
 1008d53:	mov    QWORD PTR [rsp+0x20],0x7ffffffe
 1008d5c:	mov    r9,QWORD PTR [rsp+0x60]
 1008d61:	xor    r8d,r8d
 1008d64:	mov    rdx,QWORD PTR [rsp+0x58]
 1008d69:	mov    rcx,QWORD PTR [rsp+0x50]
 1008d6e:	call   0x1008f90
 1008d73:	mov    DWORD PTR [rsp+0x30],eax
 1008d77:	mov    eax,DWORD PTR [rsp+0x30]
 1008d7b:	add    rsp,0x48
 1008d7f:	ret    
 1008d80:	int3   
 1008d81:	int3   
 1008d82:	int3   
 1008d83:	int3   
 1008d84:	int3   
 1008d85:	int3   
 1008d86:	int3   
 1008d87:	int3   
 1008d88:	int3   
 1008d89:	int3   
 1008d8a:	int3   
 1008d8b:	int3   
 1008d8c:	int3   
 1008d8d:	int3   
 1008d8e:	int3   
 1008d8f:	int3   
 1008d90:	mov    QWORD PTR [rsp+0x18],r8
 1008d95:	mov    QWORD PTR [rsp+0x10],rdx
 1008d9a:	mov    QWORD PTR [rsp+0x8],rcx
 1008d9f:	sub    rsp,0x48
 1008da3:	mov    r9d,0x7fffffff
 1008da9:	lea    r8,[rsp+0x38]
 1008dae:	mov    rdx,QWORD PTR [rsp+0x58]
 1008db3:	mov    rcx,QWORD PTR [rsp+0x50]
 1008db8:	call   0x1008e70
 1008dbd:	mov    DWORD PTR [rsp+0x30],eax
 1008dc1:	cmp    DWORD PTR [rsp+0x30],0x0
 1008dc6:	jl     0x1008e03
 1008dc8:	mov    rax,QWORD PTR [rsp+0x38]
 1008dcd:	mov    rcx,QWORD PTR [rsp+0x58]
 1008dd2:	sub    rcx,rax
 1008dd5:	mov    rax,rcx
 1008dd8:	mov    rcx,QWORD PTR [rsp+0x50]
 1008ddd:	mov    rdx,QWORD PTR [rsp+0x38]
 1008de2:	lea    rcx,[rcx+rdx*2]
 1008de6:	mov    QWORD PTR [rsp+0x20],0x7fffffff
 1008def:	mov    r9,QWORD PTR [rsp+0x60]
 1008df4:	xor    r8d,r8d
 1008df7:	mov    rdx,rax
 1008dfa:	call   0x1008f90
 1008dff:	mov    DWORD PTR [rsp+0x30],eax
 1008e03:	mov    eax,DWORD PTR [rsp+0x30]
 1008e07:	add    rsp,0x48
 1008e0b:	ret    
 1008e0c:	int3   
 1008e0d:	int3   
 1008e0e:	int3   
 1008e0f:	int3   
 1008e10:	int3   
 1008e11:	int3   
 1008e12:	int3   
 1008e13:	int3   
 1008e14:	int3   
 1008e15:	int3   
 1008e16:	int3   
 1008e17:	int3   
 1008e18:	int3   
 1008e19:	int3   
 1008e1a:	int3   
 1008e1b:	int3   
 1008e1c:	int3   
 1008e1d:	int3   
 1008e1e:	int3   
 1008e1f:	int3   
 1008e20:	mov    QWORD PTR [rsp+0x18],r8
 1008e25:	mov    QWORD PTR [rsp+0x10],rdx
 1008e2a:	mov    QWORD PTR [rsp+0x8],rcx
 1008e2f:	sub    rsp,0x18
 1008e33:	mov    DWORD PTR [rsp],0x0
 1008e3a:	cmp    QWORD PTR [rsp+0x28],0x0
 1008e40:	je     0x1008e4e
 1008e42:	mov    rax,QWORD PTR [rsp+0x30]
 1008e47:	cmp    QWORD PTR [rsp+0x28],rax
 1008e4c:	jbe    0x1008e55
 1008e4e:	mov    DWORD PTR [rsp],0x80070057
 1008e55:	mov    eax,DWORD PTR [rsp]
 1008e58:	add    rsp,0x18
 1008e5c:	ret    
 1008e5d:	int3   
 1008e5e:	int3   
 1008e5f:	int3   
 1008e60:	int3   
 1008e61:	int3   
 1008e62:	int3   
 1008e63:	int3   
 1008e64:	int3   
 1008e65:	int3   
 1008e66:	int3   
 1008e67:	int3   
 1008e68:	int3   
 1008e69:	int3   
 1008e6a:	int3   
 1008e6b:	int3   
 1008e6c:	int3   
 1008e6d:	int3   
 1008e6e:	int3   
 1008e6f:	int3   
 1008e70:	mov    QWORD PTR [rsp+0x20],r9
 1008e75:	mov    QWORD PTR [rsp+0x18],r8
 1008e7a:	mov    QWORD PTR [rsp+0x10],rdx
 1008e7f:	mov    QWORD PTR [rsp+0x8],rcx
 1008e84:	sub    rsp,0x38
 1008e88:	mov    r8,QWORD PTR [rsp+0x58]
 1008e8d:	mov    rdx,QWORD PTR [rsp+0x48]
 1008e92:	mov    rcx,QWORD PTR [rsp+0x40]
 1008e97:	call   0x1008e20
 1008e9c:	mov    DWORD PTR [rsp+0x20],eax
 1008ea0:	cmp    DWORD PTR [rsp+0x20],0x0
 1008ea5:	jl     0x1008ec1
 1008ea7:	mov    r8,QWORD PTR [rsp+0x50]
 1008eac:	mov    rdx,QWORD PTR [rsp+0x48]
 1008eb1:	mov    rcx,QWORD PTR [rsp+0x40]
 1008eb6:	call   0x1008ee0
 1008ebb:	mov    DWORD PTR [rsp+0x20],eax
 1008ebf:	jmp    0x1008ecd
 1008ec1:	mov    rax,QWORD PTR [rsp+0x50]
 1008ec6:	mov    QWORD PTR [rax],0x0
 1008ecd:	mov    eax,DWORD PTR [rsp+0x20]
 1008ed1:	add    rsp,0x38
 1008ed5:	ret    
 1008ed6:	int3   
 1008ed7:	int3   
 1008ed8:	int3   
 1008ed9:	int3   
 1008eda:	int3   
 1008edb:	int3   
 1008edc:	int3   
 1008edd:	int3   
 1008ede:	int3   
 1008edf:	int3   
 1008ee0:	mov    QWORD PTR [rsp+0x18],r8
 1008ee5:	mov    QWORD PTR [rsp+0x10],rdx
 1008eea:	mov    QWORD PTR [rsp+0x8],rcx
 1008eef:	sub    rsp,0x18
 1008ef3:	mov    DWORD PTR [rsp+0x8],0x0
 1008efb:	mov    rax,QWORD PTR [rsp+0x28]
 1008f00:	mov    QWORD PTR [rsp],rax
 1008f04:	cmp    QWORD PTR [rsp+0x28],0x0
 1008f0a:	je     0x1008f36
 1008f0c:	mov    rax,QWORD PTR [rsp+0x20]
 1008f11:	movzx  eax,WORD PTR [rax]
 1008f14:	test   eax,eax
 1008f16:	je     0x1008f36
 1008f18:	mov    rax,QWORD PTR [rsp+0x20]
 1008f1d:	add    rax,0x2
 1008f21:	mov    QWORD PTR [rsp+0x20],rax
 1008f26:	mov    rax,QWORD PTR [rsp+0x28]
 1008f2b:	sub    rax,0x1
 1008f2f:	mov    QWORD PTR [rsp+0x28],rax
 1008f34:	jmp    0x1008f04
 1008f36:	cmp    QWORD PTR [rsp+0x28],0x0
 1008f3c:	jne    0x1008f46
 1008f3e:	mov    DWORD PTR [rsp+0x8],0x80070057
 1008f46:	cmp    QWORD PTR [rsp+0x30],0x0
 1008f4c:	je     0x1008f7a
 1008f4e:	cmp    DWORD PTR [rsp+0x8],0x0
 1008f53:	jl     0x1008f6e
 1008f55:	mov    rax,QWORD PTR [rsp+0x28]
 1008f5a:	mov    rcx,QWORD PTR [rsp]
 1008f5e:	sub    rcx,rax
 1008f61:	mov    rax,rcx
 1008f64:	mov    rcx,QWORD PTR [rsp+0x30]
 1008f69:	mov    QWORD PTR [rcx],rax
 1008f6c:	jmp    0x1008f7a
 1008f6e:	mov    rax,QWORD PTR [rsp+0x30]
 1008f73:	mov    QWORD PTR [rax],0x0
 1008f7a:	mov    eax,DWORD PTR [rsp+0x8]
 1008f7e:	add    rsp,0x18
 1008f82:	ret    
 1008f83:	int3   
 1008f84:	int3   
 1008f85:	int3   
 1008f86:	int3   
 1008f87:	int3   
 1008f88:	int3   
 1008f89:	int3   
 1008f8a:	int3   
 1008f8b:	int3   
 1008f8c:	int3   
 1008f8d:	int3   
 1008f8e:	int3   
 1008f8f:	int3   
 1008f90:	mov    QWORD PTR [rsp+0x20],r9
 1008f95:	mov    QWORD PTR [rsp+0x18],r8
 1008f9a:	mov    QWORD PTR [rsp+0x10],rdx
 1008f9f:	mov    QWORD PTR [rsp+0x8],rcx
 1008fa4:	sub    rsp,0x18
 1008fa8:	mov    DWORD PTR [rsp+0x8],0x0
 1008fb0:	mov    QWORD PTR [rsp],0x0
 1008fb8:	cmp    QWORD PTR [rsp+0x28],0x0
 1008fbe:	je     0x100902a
 1008fc0:	cmp    QWORD PTR [rsp+0x40],0x0
 1008fc6:	je     0x100902a
 1008fc8:	mov    rax,QWORD PTR [rsp+0x38]
 1008fcd:	movzx  eax,WORD PTR [rax]
 1008fd0:	test   eax,eax
 1008fd2:	je     0x100902a
 1008fd4:	mov    rax,QWORD PTR [rsp+0x20]
 1008fd9:	mov    rcx,QWORD PTR [rsp+0x38]
 1008fde:	movzx  ecx,WORD PTR [rcx]
 1008fe1:	mov    WORD PTR [rax],cx
 1008fe4:	mov    rax,QWORD PTR [rsp+0x20]
 1008fe9:	add    rax,0x2
 1008fed:	mov    QWORD PTR [rsp+0x20],rax
 1008ff2:	mov    rax,QWORD PTR [rsp+0x38]
 1008ff7:	add    rax,0x2
 1008ffb:	mov    QWORD PTR [rsp+0x38],rax
 1009000:	mov    rax,QWORD PTR [rsp+0x28]
 1009005:	sub    rax,0x1
 1009009:	mov    QWORD PTR [rsp+0x28],rax
 100900e:	mov    rax,QWORD PTR [rsp+0x40]
 1009013:	sub    rax,0x1
 1009017:	mov    QWORD PTR [rsp+0x40],rax
 100901c:	mov    rax,QWORD PTR [rsp]
 1009020:	add    rax,0x1
 1009024:	mov    QWORD PTR [rsp],rax
 1009028:	jmp    0x1008fb8
 100902a:	cmp    QWORD PTR [rsp+0x28],0x0
 1009030:	jne    0x1009054
 1009032:	mov    rax,QWORD PTR [rsp+0x20]
 1009037:	sub    rax,0x2
 100903b:	mov    QWORD PTR [rsp+0x20],rax
 1009040:	mov    rax,QWORD PTR [rsp]
 1009044:	sub    rax,0x1
 1009048:	mov    QWORD PTR [rsp],rax
 100904c:	mov    DWORD PTR [rsp+0x8],0x8007007a
 1009054:	mov    rax,QWORD PTR [rsp+0x20]
 1009059:	mov    WORD PTR [rax],0x0
 100905e:	cmp    QWORD PTR [rsp+0x30],0x0
 1009064:	je     0x1009072
 1009066:	mov    rax,QWORD PTR [rsp+0x30]
 100906b:	mov    rcx,QWORD PTR [rsp]
 100906f:	mov    QWORD PTR [rax],rcx
 1009072:	mov    eax,DWORD PTR [rsp+0x8]
 1009076:	add    rsp,0x18
 100907a:	ret    
 100907b:	int3   
 100907c:	int3   
 100907d:	int3   
 100907e:	int3   
 100907f:	int3   
 1009080:	int3   
 1009081:	int3   
 1009082:	int3   
 1009083:	int3   
 1009084:	int3   
 1009085:	int3   
 1009086:	int3   
 1009087:	int3   
 1009088:	int3   
 1009089:	int3   
 100908a:	int3   
 100908b:	int3   
 100908c:	int3   
 100908d:	int3   
 100908e:	int3   
 100908f:	int3   
 1009090:	mov    QWORD PTR [rsp+0x8],rcx
 1009095:	mov    QWORD PTR [rsp+0x10],rdx
 100909a:	mov    QWORD PTR [rsp+0x18],r8
 100909f:	mov    QWORD PTR [rsp+0x20],r9
 10090a4:	ret    
 10090a5:	int3   
 10090a6:	int3   
 10090a7:	int3   
 10090a8:	int3   
 10090a9:	int3   
 10090aa:	int3   
 10090ab:	int3   
 10090ac:	int3   
 10090ad:	int3   
 10090ae:	int3   
 10090af:	int3   
 10090b0:	sub    rsp,0x38
 10090b4:	cmp    DWORD PTR [rip+0x8a45],0x0        # 0x1011b00
 10090bb:	je     0x10090cb
 10090bd:	mov    r8,QWORD PTR [rsp+0x60]
 10090c2:	add    rsp,0x38
 10090c6:	jmp    0x1009e60
 10090cb:	mov    rax,QWORD PTR [rsp+0x60]
 10090d0:	mov    QWORD PTR [rsp+0x20],rax
 10090d5:	call   QWORD PTR [rip+0xffffffffffff7f2d]        # 0x1001008
 10090db:	add    rsp,0x38
 10090df:	ret    
 10090e0:	int3   
 10090e1:	int3   
 10090e2:	int3   
 10090e3:	int3   
 10090e4:	int3   
 10090e5:	int3   
 10090e6:	int3   
 10090e7:	int3   
 10090e8:	int3   
 10090e9:	int3   
 10090ea:	int3   
 10090eb:	int3   
 10090ec:	int3   
 10090ed:	int3   
 10090ee:	int3   
 10090ef:	int3   
 10090f0:	mov    QWORD PTR [rsp+0x20],r9
 10090f5:	push   rbx
 10090f6:	push   r14
 10090f8:	sub    rsp,0x58
 10090fc:	cmp    DWORD PTR [rip+0x89fd],0x0        # 0x1011b00
 1009103:	mov    r14,r9
 1009106:	mov    rbx,rdx
 1009109:	je     0x10093eb
 100910f:	mov    QWORD PTR [rsp+0x70],rbp
 1009114:	mov    QWORD PTR [rsp+0x78],rsi
 1009119:	call   0x10096e0
 100911e:	test   rbx,rbx
 1009121:	je     0x1009129
 1009123:	cmp    WORD PTR [rbx],0x0
 1009127:	jne    0x1009130
 1009129:	lea    rbx,[rip+0xffffffffffffa084]        # 0x10031b4
 1009130:	mov    rdx,rbx
 1009133:	mov    rcx,rax
 1009136:	call   0x1009af0
 100913b:	mov    rsi,rax
 100913e:	test   rax,rax
 1009141:	je     0x10093ca
 1009147:	mov    eax,0xffff
 100914c:	cmp    WORD PTR [rsi],ax
 100914f:	jne    0x1009162
 1009151:	cmp    WORD PTR [rsi+0x2],0x0
 1009156:	jne    0x1009162
 1009158:	mov    ebp,0x2
 100915d:	jmp    0x10093b4
 1009162:	mov    QWORD PTR [rsp+0x80],rdi
 100916a:	mov    QWORD PTR [rsp+0x50],r12
 100916f:	xor    ebp,ebp
 1009171:	lea    r9,[rsp+0x30]
 1009176:	lea    rdx,[rip+0xffffffffffffa03b]        # 0x10031b8
 100917d:	xor    r8d,r8d
 1009180:	mov    rcx,rsi
 1009183:	mov    QWORD PTR [rsp+0x48],r13
 1009188:	lea    r12d,[rbp+0x1]
 100918c:	mov    QWORD PTR [rsp+0x40],r15
 1009191:	mov    DWORD PTR [rsp+0x30],ebp
 1009195:	call   0x100d270
 100919a:	lea    edi,[rbp+0x4]
 100919d:	cmp    eax,r12d
 10091a0:	jne    0x10091af
 10091a2:	mov    r12d,edi
 10091a5:	lea    r13,[rsp+0x30]
 10091aa:	jmp    0x1009363
 10091af:	lea    rax,[rip+0xffffffffffffa01a]        # 0x10031d0
 10091b6:	mov    r9d,edi
 10091b9:	mov    r8,rsi
 10091bc:	mov    edx,r12d
 10091bf:	mov    ecx,0x400
 10091c4:	mov    DWORD PTR [rsp+0x28],edi
 10091c8:	mov    QWORD PTR [rsp+0x20],rax
 10091cd:	call   QWORD PTR [rip+0xffffffffffff7f15]        # 0x10010e8
 10091d3:	cmp    eax,0x2
 10091d6:	jne    0x10091de
 10091d8:	lea    r12d,[rax+0x1]
 10091dc:	jmp    0x1009259
 10091de:	lea    rax,[rip+0xffffffffffff9ffb]        # 0x10031e0
 10091e5:	mov    r9d,edi
 10091e8:	mov    r8,rsi
 10091eb:	mov    edx,r12d
 10091ee:	mov    ecx,0x400
 10091f3:	mov    DWORD PTR [rsp+0x28],edi
 10091f7:	mov    QWORD PTR [rsp+0x20],rax
 10091fc:	call   QWORD PTR [rip+0xffffffffffff7ee6]        # 0x10010e8
 1009202:	cmp    eax,0x2
 1009205:	jne    0x1009345
 100920b:	lea    rbx,[rsi+0x8]
 100920f:	lea    r9,[rsp+0x34]
 1009214:	lea    rdx,[rip+0xffffffffffff9fd5]        # 0x10031f0
 100921b:	mov    rcx,rbx
 100921e:	xor    r8d,r8d
 1009221:	call   0x100d270
 1009226:	cmp    eax,r12d
 1009229:	jne    0x1009345
 100922f:	cmp    WORD PTR [rbx],0x3a
 1009233:	je     0x100924c
 1009235:	data16 data16 nop WORD PTR [rax+rax*1+0x0]
 1009240:	add    rbx,0x2
 1009244:	inc    edi
 1009246:	cmp    WORD PTR [rbx],0x3a
 100924a:	jne    0x1009240
 100924c:	mov    r12d,DWORD PTR [rsp+0x34]
 1009251:	inc    edi
 1009253:	je     0x1009345
 1009259:	movsxd r8,edi
 100925c:	or     rcx,0xffffffffffffffff
 1009260:	inc    rcx
 1009263:	cmp    WORD PTR [rsi+rcx*2],bp
 1009267:	jne    0x1009260
 1009269:	sub    rcx,r8
 100926c:	lea    rbx,[rsi+r8*2]
 1009270:	movabs rax,0xaaaaaaaaaaaaaaab
 100927a:	lea    r9,[rsp+0x30]
 100927f:	xor    r8d,r8d
 1009282:	mov    r13,rsi
 1009285:	mul    rcx
 1009288:	mov    rdi,rdx
 100928b:	lea    rdx,[rip+0xffffffffffff9f6e]        # 0x1003200
 1009292:	mov    rcx,rbx
 1009295:	shr    rdi,1
 1009298:	mov    r15d,ebp
 100929b:	inc    edi
 100929d:	call   0x100d270
 10092a2:	cmp    eax,0x1
 10092a5:	jne    0x1009315
 10092a7:	mov    r14,rsi
 10092aa:	nop    WORD PTR [rax+rax*1+0x0]
 10092b0:	movzx  eax,WORD PTR [rbx]
 10092b3:	cmp    ax,0x2c
 10092b7:	je     0x10092d3
 10092b9:	nop    DWORD PTR [rax+0x0]
 10092c0:	test   ax,ax
 10092c3:	je     0x10092d3
 10092c5:	movzx  eax,WORD PTR [rbx+0x2]
 10092c9:	add    rbx,0x2
 10092cd:	cmp    ax,0x2c
 10092d1:	jne    0x10092c0
 10092d3:	movzx  eax,BYTE PTR [rsp+0x30]
 10092d8:	inc    r14
 10092db:	inc    r15d
 10092de:	mov    BYTE PTR [r14-0x1],al
 10092e2:	cmp    WORD PTR [rbx],0x2c
 10092e6:	jne    0x10092ec
 10092e8:	add    rbx,0x2
 10092ec:	cmp    WORD PTR [rbx],bp
 10092ef:	je     0x100930d
 10092f1:	lea    r9,[rsp+0x30]
 10092f6:	lea    rdx,[rip+0xffffffffffff9f03]        # 0x1003200
 10092fd:	xor    r8d,r8d
 1009300:	mov    rcx,rbx
 1009303:	call   0x100d270
 1009308:	cmp    eax,0x1
 100930b:	je     0x10092b0
 100930d:	mov    r14,QWORD PTR [rsp+0x88]
 1009315:	cmp    edi,r15d
 1009318:	jne    0x100933e
 100931a:	cmp    r12d,0x1
 100931e:	je     0x100932c
 1009320:	cmp    r12d,0x7
 1009324:	je     0x100932c
 1009326:	cmp    r12d,0x2
 100932a:	jne    0x1009363
 100932c:	test   dil,0x1
 1009330:	jne    0x100933e
 1009332:	movsxd rax,r15d
 1009335:	add    edi,0x2
 1009338:	mov    WORD PTR [rax+rsi*1],bp
 100933c:	jmp    0x1009363
 100933e:	mov    ebp,0xd
 1009343:	jmp    0x100939d
 1009345:	or     rcx,0xffffffffffffffff
 1009349:	nop    DWORD PTR [rax+0x0]
 1009350:	inc    rcx
 1009353:	cmp    WORD PTR [rsi+rcx*2],bp
 1009357:	jne    0x1009350
 1009359:	lea    edi,[rcx*2+0x2]
 1009360:	mov    r13,rsi
 1009363:	mov    rcx,QWORD PTR [rsp+0x90]
 100936b:	mov    rbx,QWORD PTR [rsp+0x98]
 1009373:	test   rcx,rcx
 1009376:	je     0x100938e
 1009378:	cmp    DWORD PTR [rbx],edi
 100937a:	jb     0x1009389
 100937c:	mov    r8d,edi
 100937f:	mov    rdx,r13
 1009382:	call   0x100d264
 1009387:	jmp    0x100938e
 1009389:	mov    ebp,0xea
 100938e:	test   r14,r14
 1009391:	je     0x1009396
 1009393:	mov    DWORD PTR [r14],r12d
 1009396:	test   rbx,rbx
 1009399:	je     0x100939d
 100939b:	mov    DWORD PTR [rbx],edi
 100939d:	mov    r13,QWORD PTR [rsp+0x48]
 10093a2:	mov    r12,QWORD PTR [rsp+0x50]
 10093a7:	mov    rdi,QWORD PTR [rsp+0x80]
 10093af:	mov    r15,QWORD PTR [rsp+0x40]
 10093b4:	call   QWORD PTR [rip+0xffffffffffff7d0e]        # 0x10010c8
 10093ba:	mov    r8,rsi
 10093bd:	xor    edx,edx
 10093bf:	mov    rcx,rax
 10093c2:	call   QWORD PTR [rip+0xffffffffffff7d10]        # 0x10010d8
 10093c8:	jmp    0x10093cf
 10093ca:	mov    ebp,0x8
 10093cf:	mov    ecx,ebp
 10093d1:	call   QWORD PTR [rip+0xffffffffffff7ce1]        # 0x10010b8
 10093d7:	mov    rsi,QWORD PTR [rsp+0x78]
 10093dc:	mov    eax,ebp
 10093de:	mov    rbp,QWORD PTR [rsp+0x70]
 10093e3:	add    rsp,0x58
 10093e7:	pop    r14
 10093e9:	pop    rbx
 10093ea:	ret    
 10093eb:	mov    rax,QWORD PTR [rsp+0x98]
 10093f3:	mov    QWORD PTR [rsp+0x28],rax
 10093f8:	mov    rax,QWORD PTR [rsp+0x90]
 1009400:	mov    QWORD PTR [rsp+0x20],rax
 1009405:	call   QWORD PTR [rip+0xffffffffffff7c05]        # 0x1001010
 100940b:	add    rsp,0x58
 100940f:	pop    r14
 1009411:	pop    rbx
 1009412:	ret    
 1009413:	int3   
 1009414:	int3   
 1009415:	int3   
 1009416:	int3   
 1009417:	int3   
 1009418:	int3   
 1009419:	int3   
 100941a:	int3   
 100941b:	int3   
 100941c:	int3   
 100941d:	int3   
 100941e:	int3   
 100941f:	int3   
 1009420:	rex push rbx
 1009422:	push   rsi
 1009423:	push   r15
 1009425:	sub    rsp,0x40
 1009429:	cmp    DWORD PTR [rip+0x86d0],0x0        # 0x1011b00
 1009430:	mov    r15d,r8d
 1009433:	mov    rbx,rdx
 1009436:	je     0x1009446
 1009438:	mov    eax,0x1
 100943d:	add    rsp,0x40
 1009441:	pop    r15
 1009443:	pop    rsi
 1009444:	pop    rbx
 1009445:	ret    
 1009446:	mov    QWORD PTR [rsp+0x68],rdi
 100944b:	mov    QWORD PTR [rsp+0x70],r12
 1009450:	mov    QWORD PTR [rsp+0x30],r14
 1009455:	call   0x1009090
 100945a:	or     rdi,0xffffffffffffffff
 100945e:	test   rdx,rdx
 1009461:	je     0x1009472
 1009463:	mov    rax,rdi
 1009466:	inc    rax
 1009469:	cmp    WORD PTR [rdx+rax*2],0x0
 100946e:	jne    0x1009466
 1009470:	jmp    0x1009477
 1009472:	mov    eax,0x3
 1009477:	lea    r14d,[rax+0x1]
 100947b:	mov    r8d,0x104
 1009481:	lea    r12,[rip+0x8698]        # 0x1011b20
 1009488:	sub    r8d,r14d
 100948b:	mov    rdx,r12
 100948e:	mov    QWORD PTR [rsp+0x60],rbp
 1009493:	mov    QWORD PTR [rsp+0x38],r13
 1009498:	call   QWORD PTR [rip+0xffffffffffff7c8a]        # 0x1001128
 100949e:	mov    r11d,eax
 10094a1:	test   eax,eax
 10094a3:	je     0x100962f
 10094a9:	lea    rcx,[r12-0x2]
 10094ae:	lea    rcx,[rcx+r11*2]
 10094b2:	call   0x1009090
 10094b7:	xor    r13d,r13d
 10094ba:	mov    edx,r13d
 10094bd:	mov    r8d,r13d
 10094c0:	cmp    rcx,r12
 10094c3:	jbe    0x10094e8
 10094c5:	test   r8,r8
 10094c8:	jne    0x10094d5
 10094ca:	cmp    WORD PTR [rcx],0x2e
 10094ce:	jne    0x10094dd
 10094d0:	mov    r8,rcx
 10094d3:	jmp    0x10094dd
 10094d5:	cmp    WORD PTR [rcx],0x5c
 10094d9:	cmove  rdx,rcx
 10094dd:	sub    rcx,0x2
 10094e1:	test   rdx,rdx
 10094e4:	je     0x10094c0
 10094e6:	jmp    0x10094f1
 10094e8:	test   rdx,rdx
 10094eb:	je     0x100962f
 10094f1:	lea    rcx,[rdx+0x2]
 10094f5:	lea    rbp,[r8+0x2]
 10094f9:	mov    esi,0x1
 10094fe:	test   rbx,rbx
 1009501:	je     0x1009511
 1009503:	lea    r8d,[r14+r14*1]
 1009507:	mov    rdx,rbx
 100950a:	call   0x100d264
 100950f:	jmp    0x1009566
 1009511:	mov    r9d,DWORD PTR [rip+0x7c38]        # 0x1011150
 1009518:	mov    r8,QWORD PTR [rip+0x7c29]        # 0x1011148
 100951f:	mov    rax,rcx
 1009522:	sub    rax,r12
 1009525:	mov    edx,esi
 1009527:	sar    rax,1
 100952a:	sub    r11d,eax
 100952d:	mov    DWORD PTR [rsp+0x28],r11d
 1009532:	mov    QWORD PTR [rsp+0x20],rcx
 1009537:	mov    ecx,0x400
 100953c:	call   QWORD PTR [rip+0xffffffffffff7ba6]        # 0x10010e8
 1009542:	lea    r8d,[r14+r14*1]
 1009546:	lea    rdx,[rip+0xffffffffffff9b3b]        # 0x1003088
 100954d:	cmp    eax,0x2
 1009550:	mov    ebx,r13d
 1009553:	mov    rcx,rbp
 1009556:	cmove  ebx,esi
 1009559:	call   0x100d264
 100955e:	test   ebx,ebx
 1009560:	jne    0x100962f
 1009566:	mov    rcx,r12
 1009569:	call   QWORD PTR [rip+0xffffffffffff7b29]        # 0x1001098
 100956f:	cmp    eax,0xffffffff
 1009572:	je     0x100962f
 1009578:	lea    rbx,[rip+0x89c1]        # 0x1011f40
 100957f:	mov    rdx,r12
 1009582:	mov    r8d,0x208
 1009588:	mov    rcx,rbx
 100958b:	call   0x100d264
 1009590:	mov    rax,rdi
 1009593:	inc    rax
 1009596:	cmp    WORD PTR [rbx+rax*2],r13w
 100959b:	jne    0x1009593
 100959d:	dec    rax
 10095a0:	cmp    WORD PTR [rbx+rax*2],0x5c
 10095a5:	lea    rax,[rbx+rax*2]
 10095a9:	je     0x10095bf
 10095ab:	nop    DWORD PTR [rax+rax*1+0x0]
 10095b0:	cmp    rax,rbx
 10095b3:	jbe    0x10095bf
 10095b5:	sub    rax,0x2
 10095b9:	cmp    WORD PTR [rax],0x5c
 10095bd:	jne    0x10095b0
 10095bf:	mov    WORD PTR [rax],r13w
 10095c3:	sub    rax,rbx
 10095c6:	mov    rcx,rbx
 10095c9:	sar    rax,1
 10095cc:	inc    eax
 10095ce:	mov    DWORD PTR [rip+0x8530],eax        # 0x1011b04
 10095d4:	call   0x1009090
 10095d9:	lea    rbx,[rip+0x8750]        # 0x1011d30
 10095e0:	mov    rcx,rbx
 10095e3:	mov    rdx,r12
 10095e6:	mov    r8d,0x208
 10095ec:	call   0x100d264
 10095f1:	inc    rdi
 10095f4:	cmp    WORD PTR [rbx+rdi*2],r13w
 10095f9:	jne    0x10095f1
 10095fb:	mov    eax,edi
 10095fd:	mov    rcx,rbx
 1009600:	lea    rdx,[rbx+rax*2]
 1009604:	mov    rax,QWORD PTR [rip+0xffffffffffff998d]        # 0x1002f98
 100960b:	mov    QWORD PTR [rdx],rax
 100960e:	movzx  eax,WORD PTR [rip+0xffffffffffff998b]        # 0x1002fa0
 1009615:	mov    WORD PTR [rdx+0x8],ax
 1009619:	call   0x1009090
 100961e:	mov    DWORD PTR [rip+0x84eb],r15d        # 0x1011b10
 1009625:	mov    DWORD PTR [rip+0x84d5],esi        # 0x1011b00
 100962b:	mov    eax,esi
 100962d:	jmp    0x1009631
 100962f:	xor    eax,eax
 1009631:	mov    r13,QWORD PTR [rsp+0x38]
 1009636:	mov    rbp,QWORD PTR [rsp+0x60]
 100963b:	mov    rdi,QWORD PTR [rsp+0x68]
 1009640:	mov    r12,QWORD PTR [rsp+0x70]
 1009645:	mov    r14,QWORD PTR [rsp+0x30]
 100964a:	add    rsp,0x40
 100964e:	pop    r15
 1009650:	pop    rsi
 1009651:	pop    rbx
 1009652:	ret    
 1009653:	int3   
 1009654:	int3   
 1009655:	int3   
 1009656:	int3   
 1009657:	int3   
 1009658:	int3   
 1009659:	int3   
 100965a:	int3   
 100965b:	int3   
 100965c:	int3   
 100965d:	int3   
 100965e:	int3   
 100965f:	int3   
 1009660:	sub    rsp,0x58
 1009664:	lea    rdx,[rsp+0x20]
 1009669:	lea    rcx,[rip+0xfffffffffffffff0]        # 0x1009660
 1009670:	mov    r8d,0x30
 1009676:	call   QWORD PTR [rip+0xffffffffffff7af4]        # 0x1001170
 100967c:	test   rax,rax
 100967f:	jne    0x1009686
 1009681:	add    rsp,0x58
 1009685:	ret    
 1009686:	mov    QWORD PTR [rsp+0x50],rbx
 100968b:	mov    rbx,QWORD PTR [rsp+0x28]
 1009690:	xor    r8d,r8d
 1009693:	mov    rcx,rbx
 1009696:	xor    edx,edx
 1009698:	call   0x1009420
 100969d:	test   eax,eax
 100969f:	jne    0x10096c2
 10096a1:	lea    r8d,[rax+0x1]
 10096a5:	lea    rdx,[rip+0xffffffffffff99e4]        # 0x1003090
 10096ac:	mov    rcx,rbx
 10096af:	call   0x1009420
 10096b4:	test   eax,eax
 10096b6:	jne    0x10096c2
 10096b8:	mov    rbx,QWORD PTR [rsp+0x50]
 10096bd:	add    rsp,0x58
 10096c1:	ret    
 10096c2:	mov    eax,0x1
 10096c7:	mov    rbx,QWORD PTR [rsp+0x50]
 10096cc:	add    rsp,0x58
 10096d0:	ret    
 10096d1:	int3   
 10096d2:	int3   
 10096d3:	int3   
 10096d4:	int3   
 10096d5:	int3   
 10096d6:	int3   
 10096d7:	int3   
 10096d8:	int3   
 10096d9:	int3   
 10096da:	int3   
 10096db:	int3   
 10096dc:	int3   
 10096dd:	int3   
 10096de:	int3   
 10096df:	int3   
 10096e0:	rex push rbx
 10096e2:	sub    rsp,0x20
 10096e6:	cmp    DWORD PTR [rip+0x8413],0x0        # 0x1011b00
 10096ed:	mov    rbx,rcx
 10096f0:	jne    0x10096f8
 10096f2:	call   QWORD PTR [rip+0xffffffffffff79b8]        # 0x10010b0
 10096f8:	cmp    rbx,0xffffffff80000000
 10096ff:	jne    0x100970e
 1009701:	lea    rax,[rip+0xffffffffffff99a8]        # 0x10030b0
 1009708:	add    rsp,0x20
 100970c:	pop    rbx
 100970d:	ret    
 100970e:	cmp    rbx,0xffffffff80000001
 1009715:	jne    0x1009724
 1009717:	lea    rax,[rip+0xffffffffffff99ba]        # 0x10030d8
 100971e:	add    rsp,0x20
 1009722:	pop    rbx
 1009723:	ret    
 1009724:	cmp    rbx,0xffffffff80000002
 100972b:	jne    0x100973a
 100972d:	lea    rax,[rip+0xffffffffffff99cc]        # 0x1003100
 1009734:	add    rsp,0x20
 1009738:	pop    rbx
 1009739:	ret    
 100973a:	cmp    rbx,0xffffffff80000003
 1009741:	jne    0x1009750
 1009743:	lea    rax,[rip+0xffffffffffff99de]        # 0x1003128
 100974a:	add    rsp,0x20
 100974e:	pop    rbx
 100974f:	ret    
 1009750:	cmp    rbx,0xffffffff80000004
 1009757:	jne    0x1009766
 1009759:	lea    rax,[rip+0xffffffffffff99e0]        # 0x1003140
 1009760:	add    rsp,0x20
 1009764:	pop    rbx
 1009765:	ret    
 1009766:	cmp    rbx,0xffffffff80000005
 100976d:	jne    0x100977c
 100976f:	lea    rax,[rip+0xffffffffffff99fa]        # 0x1003170
 1009776:	add    rsp,0x20
 100977a:	pop    rbx
 100977b:	ret    
 100977c:	lea    rax,[rip+0xffffffffffff9a15]        # 0x1003198
 1009783:	cmp    rbx,0xffffffff80000006
 100978a:	je     0x100978f
 100978c:	mov    rax,rbx
 100978f:	add    rsp,0x20
 1009793:	pop    rbx
 1009794:	ret    
 1009795:	int3   
 1009796:	int3   
 1009797:	int3   
 1009798:	int3   
 1009799:	int3   
 100979a:	int3   
 100979b:	int3   
 100979c:	int3   
 100979d:	int3   
 100979e:	int3   
 100979f:	int3   
 10097a0:	mov    QWORD PTR [rsp+0x8],rbx
 10097a5:	mov    QWORD PTR [rsp+0x10],rbp
 10097aa:	mov    QWORD PTR [rsp+0x18],rsi
 10097af:	push   rdi
 10097b0:	push   r14
 10097b2:	push   r15
 10097b4:	sub    rsp,0x20
 10097b8:	mov    rbp,rdx
 10097bb:	call   0x10096e0
 10097c0:	or     rbx,0xffffffffffffffff
 10097c4:	mov    r14,rax
 10097c7:	mov    rsi,rbx
 10097ca:	nop    WORD PTR [rax+rax*1+0x0]
 10097d0:	inc    rsi
 10097d3:	cmp    WORD PTR [rax+rsi*2],0x0
 10097d8:	jne    0x10097d0
 10097da:	add    rsi,rsi
 10097dd:	nop    DWORD PTR [rax]
 10097e0:	inc    rbx
 10097e3:	cmp    WORD PTR [rbp+rbx*2+0x0],0x0
 10097e9:	jne    0x10097e0
 10097eb:	add    rbx,rbx
 10097ee:	lea    rdi,[rsi+0x4]
 10097f2:	call   QWORD PTR [rip+0xffffffffffff78d0]        # 0x10010c8
 10097f8:	lea    r8,[rdi+rbx*1]
 10097fc:	xor    edx,edx
 10097fe:	mov    rcx,rax
 1009801:	call   QWORD PTR [rip+0xffffffffffff78d9]        # 0x10010e0
 1009807:	mov    r15,rax
 100980a:	test   rax,rax
 100980d:	je     0x1009848
 100980f:	mov    r8d,esi
 1009812:	mov    rdx,r14
 1009815:	mov    rcx,rax
 1009818:	call   0x100d264
 100981d:	mov    eax,0x5c
 1009822:	shr    rsi,1
 1009825:	lea    rdi,[r15+rsi*2]
 1009829:	mov    r8d,ebx
 100982c:	mov    rdx,rbp
 100982f:	lea    rcx,[rdi+0x2]
 1009833:	mov    WORD PTR [rdi],ax
 1009836:	call   0x100d264
 100983b:	shr    rbx,1
 100983e:	xor    eax,eax
 1009840:	mov    WORD PTR [rdi+rbx*2+0x2],ax
 1009845:	mov    rax,r15
 1009848:	mov    rbx,QWORD PTR [rsp+0x40]
 100984d:	mov    rbp,QWORD PTR [rsp+0x48]
 1009852:	mov    rsi,QWORD PTR [rsp+0x50]
 1009857:	add    rsp,0x20
 100985b:	pop    r15
 100985d:	pop    r14
 100985f:	pop    rdi
 1009860:	ret    
 1009861:	int3   
 1009862:	int3   
 1009863:	int3   
 1009864:	int3   
 1009865:	int3   
 1009866:	int3   
 1009867:	int3   
 1009868:	int3   
 1009869:	int3   
 100986a:	int3   
 100986b:	int3   
 100986c:	int3   
 100986d:	int3   
 100986e:	int3   
 100986f:	int3   
 1009870:	mov    QWORD PTR [rsp+0x10],rbx
 1009875:	mov    QWORD PTR [rsp+0x18],rbp
 100987a:	mov    QWORD PTR [rsp+0x20],rsi
 100987f:	push   rdi
 1009880:	push   r14
 1009882:	push   r15
 1009884:	sub    rsp,0x30
 1009888:	mov    r14,rcx
 100988b:	mov    r15d,0x80
 1009891:	or     rbx,0xffffffffffffffff
 1009895:	inc    rbx
 1009898:	cmp    WORD PTR [rcx+rbx*2],0x0
 100989d:	jne    0x1009895
 100989f:	lea    esi,[rbx+0x80]
 10098a5:	mov    edi,esi
 10098a7:	add    rdi,rdi
 10098aa:	call   QWORD PTR [rip+0xffffffffffff7818]        # 0x10010c8
 10098b0:	mov    r8,rdi
 10098b3:	mov    rcx,rax
 10098b6:	xor    edx,edx
 10098b8:	call   QWORD PTR [rip+0xffffffffffff7822]        # 0x10010e0
 10098be:	mov    rbp,rax
 10098c1:	test   rax,rax
 10098c4:	je     0x1009986
 10098ca:	mov    QWORD PTR [rsp+0x50],r12
 10098cf:	lea    r12,[rip+0xffffffffffff96b2]        # 0x1002f88
 10098d6:	data16 nop WORD PTR [rax+rax*1+0x0]
 10098e0:	mov    r9d,ebx
 10098e3:	mov    r8,r14
 10098e6:	mov    edx,0x1
 10098eb:	mov    ecx,0x400
 10098f0:	mov    DWORD PTR [rsp+0x28],0x5
 10098f8:	mov    QWORD PTR [rsp+0x20],r12
 10098fd:	call   QWORD PTR [rip+0xffffffffffff77e5]        # 0x10010e8
 1009903:	cmp    eax,0x2
 1009906:	jne    0x1009927
 1009908:	mov    edi,DWORD PTR [rip+0x81f6]        # 0x1011b04
 100990e:	cmp    edi,esi
 1009910:	ja     0x100993a
 1009912:	lea    r8d,[rdi+rdi*1]
 1009916:	lea    rdx,[rip+0x8623]        # 0x1011f40
 100991d:	mov    rcx,rbp
 1009920:	call   0x100d264
 1009925:	jmp    0x1009938
 1009927:	mov    r8d,esi
 100992a:	mov    rdx,rbp
 100992d:	mov    rcx,r14
 1009930:	call   QWORD PTR [rip+0xffffffffffff7772]        # 0x10010a8
 1009936:	mov    edi,eax
 1009938:	cmp    edi,esi
 100993a:	jle    0x100997e
 100993c:	add    r15d,r15d
 100993f:	lea    esi,[rbx+r15*1]
 1009943:	call   QWORD PTR [rip+0xffffffffffff777f]        # 0x10010c8
 1009949:	mov    r8,rbp
 100994c:	mov    rcx,rax
 100994f:	xor    edx,edx
 1009951:	call   QWORD PTR [rip+0xffffffffffff7781]        # 0x10010d8
 1009957:	mov    edi,esi
 1009959:	add    rdi,rdi
 100995c:	call   QWORD PTR [rip+0xffffffffffff7766]        # 0x10010c8
 1009962:	mov    r8,rdi
 1009965:	mov    rcx,rax
 1009968:	xor    edx,edx
 100996a:	call   QWORD PTR [rip+0xffffffffffff7770]        # 0x10010e0
 1009970:	mov    rbp,rax
 1009973:	test   rax,rax
 1009976:	jne    0x10098e0
 100997c:	jmp    0x1009981
 100997e:	mov    rax,rbp
 1009981:	mov    r12,QWORD PTR [rsp+0x50]
 1009986:	mov    rbx,QWORD PTR [rsp+0x58]
 100998b:	mov    rbp,QWORD PTR [rsp+0x60]
 1009990:	mov    rsi,QWORD PTR [rsp+0x68]
 1009995:	add    rsp,0x30
 1009999:	pop    r15
 100999b:	pop    r14
 100999d:	pop    rdi
 100999e:	ret    
 100999f:	int3   
 10099a0:	int3   
 10099a1:	int3   
 10099a2:	int3   
 10099a3:	int3   
 10099a4:	int3   
 10099a5:	int3   
 10099a6:	int3   
 10099a7:	int3   
 10099a8:	int3   
 10099a9:	int3   
 10099aa:	int3   
 10099ab:	int3   
 10099ac:	int3   
 10099ad:	int3   
 10099ae:	int3   
 10099af:	int3   
 10099b0:	mov    QWORD PTR [rsp+0x20],rbx
 10099b5:	push   rbp
 10099b6:	push   rsi
 10099b7:	push   rdi
 10099b8:	sub    rsp,0x30
 10099bc:	mov    rsi,rdx
 10099bf:	mov    rbp,rcx
 10099c2:	mov    edi,0x80
 10099c7:	call   QWORD PTR [rip+0xffffffffffff76fb]        # 0x10010c8
 10099cd:	xor    edx,edx
 10099cf:	mov    r8d,0x100
 10099d5:	mov    rcx,rax
 10099d8:	call   QWORD PTR [rip+0xffffffffffff7702]        # 0x10010e0
 10099de:	mov    rbx,rax
 10099e1:	test   rax,rax
 10099e4:	je     0x1009adb
 10099ea:	mov    QWORD PTR [rsp+0x50],r12
 10099ef:	mov    QWORD PTR [rsp+0x58],r14
 10099f4:	mov    QWORD PTR [rsp+0x60],r15
 10099f9:	lea    r15,[rip+0x8120]        # 0x1011b20
 1009a00:	lea    r12,[rip+0x8329]        # 0x1011d30
 1009a07:	mov    r14d,0xffff
 1009a0d:	nop    DWORD PTR [rax]
 1009a10:	test   rbp,rbp
 1009a13:	je     0x1009a55
 1009a15:	test   rsi,rsi
 1009a18:	je     0x1009a55
 1009a1a:	lea    r8,[rip+0xffffffffffff9573]        # 0x1002f94
 1009a21:	mov    r9,rbx
 1009a24:	mov    rdx,rsi
 1009a27:	mov    rcx,rbp
 1009a2a:	mov    QWORD PTR [rsp+0x28],r12
 1009a2f:	mov    DWORD PTR [rsp+0x20],edi
 1009a33:	call   QWORD PTR [rip+0xffffffffffff7667]        # 0x10010a0
 1009a39:	lea    ecx,[rdi-0x1]
 1009a3c:	mov    r11d,eax
 1009a3f:	cmp    eax,ecx
 1009a41:	je     0x1009a50
 1009a43:	cmp    WORD PTR [rbx],r14w
 1009a47:	jne    0x1009a50
 1009a49:	cmp    WORD PTR [rbx+0x2],0x0
 1009a4e:	je     0x1009a55
 1009a50:	cmp    eax,0xffffffff
 1009a53:	jne    0x1009a77
 1009a55:	lea    r8,[rip+0xffffffffffff9538]        # 0x1002f94
 1009a5c:	mov    r9,rbx
 1009a5f:	mov    rdx,rsi
 1009a62:	mov    rcx,rbp
 1009a65:	mov    QWORD PTR [rsp+0x28],r15
 1009a6a:	mov    DWORD PTR [rsp+0x20],edi
 1009a6e:	call   QWORD PTR [rip+0xffffffffffff762c]        # 0x10010a0
 1009a74:	mov    r11d,eax
 1009a77:	test   rbp,rbp
 1009a7a:	je     0x1009a84
 1009a7c:	lea    eax,[rdi-0x1]
 1009a7f:	test   rsi,rsi
 1009a82:	jne    0x1009a87
 1009a84:	lea    eax,[rdi-0x2]
 1009a87:	cmp    r11d,eax
 1009a8a:	jne    0x1009ac9
 1009a8c:	add    edi,edi
 1009a8e:	call   QWORD PTR [rip+0xffffffffffff7634]        # 0x10010c8
 1009a94:	mov    r8,rbx
 1009a97:	mov    rcx,rax
 1009a9a:	xor    edx,edx
 1009a9c:	call   QWORD PTR [rip+0xffffffffffff7636]        # 0x10010d8
 1009aa2:	mov    ebx,edi
 1009aa4:	add    rbx,rbx
 1009aa7:	call   QWORD PTR [rip+0xffffffffffff761b]        # 0x10010c8
 1009aad:	mov    r8,rbx
 1009ab0:	mov    rcx,rax
 1009ab3:	xor    edx,edx
 1009ab5:	call   QWORD PTR [rip+0xffffffffffff7625]        # 0x10010e0
 1009abb:	mov    rbx,rax
 1009abe:	test   rax,rax
 1009ac1:	jne    0x1009a10
 1009ac7:	jmp    0x1009acc
 1009ac9:	mov    rax,rbx
 1009acc:	mov    r14,QWORD PTR [rsp+0x58]
 1009ad1:	mov    r12,QWORD PTR [rsp+0x50]
 1009ad6:	mov    r15,QWORD PTR [rsp+0x60]
 1009adb:	mov    rbx,QWORD PTR [rsp+0x68]
 1009ae0:	add    rsp,0x30
 1009ae4:	pop    rdi
 1009ae5:	pop    rsi
 1009ae6:	pop    rbp
 1009ae7:	ret    
 1009ae8:	int3   
 1009ae9:	int3   
 1009aea:	int3   
 1009aeb:	int3   
 1009aec:	int3   
 1009aed:	int3   
 1009aee:	int3   
 1009aef:	int3   
 1009af0:	rex push rdi
 1009af2:	push   r12
 1009af4:	push   r13
 1009af6:	sub    rsp,0x40
 1009afa:	mov    r13,rdx
 1009afd:	mov    r12,rcx
 1009b00:	call   0x10099b0
 1009b05:	mov    rdi,rax
 1009b08:	test   rax,rax
 1009b0b:	je     0x1009c1c
 1009b11:	test   r13,r13
 1009b14:	je     0x1009c1c
 1009b1a:	test   r12,r12
 1009b1d:	je     0x1009c1c
 1009b23:	mov    QWORD PTR [rsp+0x60],rbx
 1009b28:	mov    QWORD PTR [rsp+0x68],rbp
 1009b2d:	mov    QWORD PTR [rsp+0x70],rsi
 1009b32:	mov    eax,0xffff
 1009b37:	mov    QWORD PTR [rsp+0x38],r14
 1009b3c:	mov    QWORD PTR [rsp+0x30],r15
 1009b41:	cmp    WORD PTR [rdi],ax
 1009b44:	jne    0x1009bcd
 1009b4a:	cmp    WORD PTR [rdi+0x2],0x0
 1009b4f:	jne    0x1009bcd
 1009b51:	cmp    DWORD PTR [rip+0x7fb8],0x0        # 0x1011b10
 1009b58:	je     0x1009bcd
 1009b5a:	or     rbp,0xffffffffffffffff
 1009b5e:	mov    rbx,rbp
 1009b61:	inc    rbx
 1009b64:	cmp    WORD PTR [r12+rbx*2],0x0
 1009b6a:	jne    0x1009b61
 1009b6c:	mov    rsi,rbp
 1009b6f:	nop
 1009b70:	inc    rsi
 1009b73:	cmp    WORD PTR [r13+rsi*2+0x0],0x0
 1009b7a:	jne    0x1009b70
 1009b7c:	xor    r14d,r14d
 1009b7f:	lea    r15,[rip+0x75d2]        # 0x1011158
 1009b86:	data16 nop WORD PTR [rax+rax*1+0x0]
 1009b90:	mov    rcx,QWORD PTR [r15]
 1009b93:	mov    eax,DWORD PTR [r15+0x8]
 1009b97:	mov    r9d,ebx
 1009b9a:	mov    DWORD PTR [rsp+0x28],eax
 1009b9e:	mov    QWORD PTR [rsp+0x20],rcx
 1009ba3:	mov    r8,r12
 1009ba6:	mov    ecx,0x400
 1009bab:	mov    edx,0x1
 1009bb0:	call   QWORD PTR [rip+0xffffffffffff7532]        # 0x10010e8
 1009bb6:	cmp    eax,0x2
 1009bb9:	je     0x1009c26
 1009bbb:	inc    r14d
 1009bbe:	add    r15,0x20
 1009bc2:	cmp    r14d,0x1
 1009bc6:	jb     0x1009b90
 1009bc8:	mov    eax,0xffff
 1009bcd:	test   rdi,rdi
 1009bd0:	je     0x1009c00
 1009bd2:	cmp    WORD PTR [rdi],ax
 1009bd5:	jne    0x1009bde
 1009bd7:	cmp    WORD PTR [rdi+0x2],0x0
 1009bdc:	je     0x1009c00
 1009bde:	mov    rcx,rdi
 1009be1:	call   0x1009870
 1009be6:	mov    rbx,rax
 1009be9:	call   QWORD PTR [rip+0xffffffffffff74d9]        # 0x10010c8
 1009bef:	mov    r8,rdi
 1009bf2:	mov    rcx,rax
 1009bf5:	xor    edx,edx
 1009bf7:	call   QWORD PTR [rip+0xffffffffffff74db]        # 0x10010d8
 1009bfd:	mov    rdi,rbx
 1009c00:	mov    r15,QWORD PTR [rsp+0x30]
 1009c05:	mov    r14,QWORD PTR [rsp+0x38]
 1009c0a:	mov    rsi,QWORD PTR [rsp+0x70]
 1009c0f:	mov    rbp,QWORD PTR [rsp+0x68]
 1009c14:	mov    rbx,QWORD PTR [rsp+0x60]
 1009c19:	mov    rax,rdi
 1009c1c:	add    rsp,0x40
 1009c20:	pop    r13
 1009c22:	pop    r12
 1009c24:	pop    rdi
 1009c25:	ret    
 1009c26:	lea    rcx,[rip+0x752b]        # 0x1011158
 1009c2d:	movsxd rbx,r14d
 1009c30:	shl    rbx,0x5
 1009c34:	add    rbx,rcx
 1009c37:	mov    rcx,QWORD PTR [rbx+0x10]
 1009c3b:	call   0x1009870
 1009c40:	test   rax,rax
 1009c43:	je     0x1009c9f
 1009c45:	inc    rbp
 1009c48:	cmp    WORD PTR [rax+rbp*2],0x0
 1009c4d:	jne    0x1009c45
 1009c4f:	mov    r9d,ebp
 1009c52:	mov    r8,rax
 1009c55:	mov    edx,0x1
 1009c5a:	mov    ecx,0x400
 1009c5f:	mov    DWORD PTR [rsp+0x28],esi
 1009c63:	mov    QWORD PTR [rsp+0x20],r13
 1009c68:	call   QWORD PTR [rip+0xffffffffffff747a]        # 0x10010e8
 1009c6e:	cmp    eax,0x2
 1009c71:	jne    0x1009bc8
 1009c77:	call   QWORD PTR [rip+0xffffffffffff744b]        # 0x10010c8
 1009c7d:	mov    r8,rdi
 1009c80:	xor    edx,edx
 1009c82:	mov    rcx,rax
 1009c85:	call   QWORD PTR [rip+0xffffffffffff744d]        # 0x10010d8
 1009c8b:	mov    rdx,QWORD PTR [rbx+0x10]
 1009c8f:	mov    rcx,r12
 1009c92:	call   0x10099b0
 1009c97:	mov    rdi,rax
 1009c9a:	jmp    0x1009bc8
 1009c9f:	call   QWORD PTR [rip+0xffffffffffff7423]        # 0x10010c8
 1009ca5:	mov    r8,rdi
 1009ca8:	xor    edx,edx
 1009caa:	mov    rcx,rax
 1009cad:	call   QWORD PTR [rip+0xffffffffffff7425]        # 0x10010d8
 1009cb3:	xor    edi,edi
 1009cb5:	jmp    0x1009c00
 1009cba:	int3   
 1009cbb:	int3   
 1009cbc:	int3   
 1009cbd:	int3   
 1009cbe:	int3   
 1009cbf:	int3   
 1009cc0:	rex push rbx
 1009cc2:	sub    rsp,0x20
 1009cc6:	cmp    DWORD PTR [rip+0x7e33],0x0        # 0x1011b00
 1009ccd:	mov    rbx,rcx
 1009cd0:	je     0x1009d35
 1009cd2:	cmp    rcx,0xffffffff80000000
 1009cd9:	je     0x1009d25
 1009cdb:	cmp    rcx,0xffffffff80000001
 1009ce2:	je     0x1009d25
 1009ce4:	cmp    rcx,0xffffffff80000002
 1009ceb:	je     0x1009d25
 1009ced:	cmp    rcx,0xffffffff80000003
 1009cf4:	je     0x1009d25
 1009cf6:	cmp    rcx,0xffffffff80000004
 1009cfd:	je     0x1009d25
 1009cff:	cmp    rcx,0xffffffff80000005
 1009d06:	je     0x1009d25
 1009d08:	cmp    rcx,0xffffffff80000006
 1009d0f:	je     0x1009d25
 1009d11:	call   QWORD PTR [rip+0xffffffffffff73b1]        # 0x10010c8
 1009d17:	mov    r8,rbx
 1009d1a:	xor    edx,edx
 1009d1c:	mov    rcx,rax
 1009d1f:	call   QWORD PTR [rip+0xffffffffffff73b3]        # 0x10010d8
 1009d25:	xor    ecx,ecx
 1009d27:	call   QWORD PTR [rip+0xffffffffffff738b]        # 0x10010b8
 1009d2d:	xor    eax,eax
 1009d2f:	add    rsp,0x20
 1009d33:	pop    rbx
 1009d34:	ret    
 1009d35:	add    rsp,0x20
 1009d39:	pop    rbx
 1009d3a:	rex.W jmp QWORD PTR [rip+0xffffffffffff72bf]        # 0x1001000
 1009d41:	int3   
 1009d42:	int3   
 1009d43:	int3   
 1009d44:	int3   
 1009d45:	int3   
 1009d46:	int3   
 1009d47:	int3   
 1009d48:	int3   
 1009d49:	int3   
 1009d4a:	int3   
 1009d4b:	int3   
 1009d4c:	int3   
 1009d4d:	int3   
 1009d4e:	int3   
 1009d4f:	int3   
 1009d50:	rex push rdi
 1009d52:	sub    rsp,0x20
 1009d56:	mov    rdi,rdx
 1009d59:	cmp    rcx,0xffffffff80000000
 1009d60:	je     0x1009e3c
 1009d66:	cmp    rcx,0xffffffff80000001
 1009d6d:	je     0x1009e3c
 1009d73:	cmp    rcx,0xffffffff80000002
 1009d7a:	je     0x1009e3c
 1009d80:	cmp    rcx,0xffffffff80000003
 1009d87:	je     0x1009e3c
 1009d8d:	cmp    rcx,0xffffffff80000004
 1009d94:	je     0x1009e3c
 1009d9a:	cmp    rcx,0xffffffff80000005
 1009da1:	je     0x1009e3c
 1009da7:	cmp    rcx,0xffffffff80000006
 1009dae:	je     0x1009e3c
 1009db4:	mov    QWORD PTR [rsp+0x30],rbx
 1009db9:	mov    QWORD PTR [rsp+0x38],rbp
 1009dbe:	mov    QWORD PTR [rsp+0x40],rsi
 1009dc3:	call   0x10096e0
 1009dc8:	or     rcx,0xffffffffffffffff
 1009dcc:	mov    rbx,rax
 1009dcf:	nop
 1009dd0:	inc    rcx
 1009dd3:	cmp    WORD PTR [rax+rcx*2],0x0
 1009dd8:	jne    0x1009dd0
 1009dda:	lea    rbp,[rcx*2+0x2]
 1009de2:	call   QWORD PTR [rip+0xffffffffffff72e0]        # 0x10010c8
 1009de8:	mov    r8,rbp
 1009deb:	mov    rcx,rax
 1009dee:	xor    edx,edx
 1009df0:	call   QWORD PTR [rip+0xffffffffffff72ea]        # 0x10010e0
 1009df6:	mov    rsi,rax
 1009df9:	test   rax,rax
 1009dfc:	jne    0x1009e1f
 1009dfe:	lea    ecx,[rax+0x8]
 1009e01:	call   QWORD PTR [rip+0xffffffffffff72b1]        # 0x10010b8
 1009e07:	lea    eax,[rsi+0x8]
 1009e0a:	mov    rbp,QWORD PTR [rsp+0x38]
 1009e0f:	mov    rbx,QWORD PTR [rsp+0x30]
 1009e14:	mov    rsi,QWORD PTR [rsp+0x40]
 1009e19:	add    rsp,0x20
 1009e1d:	pop    rdi
 1009e1e:	ret    
 1009e1f:	mov    r8d,ebp
 1009e22:	mov    rdx,rbx
 1009e25:	mov    rcx,rax
 1009e28:	call   0x100d264
 1009e2d:	xor    ecx,ecx
 1009e2f:	mov    QWORD PTR [rdi],rsi
 1009e32:	call   QWORD PTR [rip+0xffffffffffff7280]        # 0x10010b8
 1009e38:	xor    eax,eax
 1009e3a:	jmp    0x1009e0a
 1009e3c:	mov    QWORD PTR [rdx],rcx
 1009e3f:	xor    ecx,ecx
 1009e41:	call   QWORD PTR [rip+0xffffffffffff7271]        # 0x10010b8
 1009e47:	xor    eax,eax
 1009e49:	add    rsp,0x20
 1009e4d:	pop    rdi
 1009e4e:	ret    
 1009e4f:	int3   
 1009e50:	int3   
 1009e51:	int3   
 1009e52:	int3   
 1009e53:	int3   
 1009e54:	int3   
 1009e55:	int3   
 1009e56:	int3   
 1009e57:	int3   
 1009e58:	int3   
 1009e59:	int3   
 1009e5a:	int3   
 1009e5b:	int3   
 1009e5c:	int3   
 1009e5d:	int3   
 1009e5e:	int3   
 1009e5f:	int3   
 1009e60:	push   r14
 1009e62:	sub    rsp,0x20
 1009e66:	cmp    DWORD PTR [rip+0x7c93],0x0        # 0x1011b00
 1009e6d:	mov    r14,r8
 1009e70:	je     0x1009f73
 1009e76:	test   rdx,rdx
 1009e79:	je     0x1009f65
 1009e7f:	cmp    WORD PTR [rdx],0x0
 1009e83:	je     0x1009f65
 1009e89:	mov    QWORD PTR [rsp+0x30],rbx
 1009e8e:	mov    QWORD PTR [rsp+0x38],rsi
 1009e93:	call   0x10097a0
 1009e98:	mov    rsi,rax
 1009e9b:	test   rax,rax
 1009e9e:	jne    0x1009ec0
 1009ea0:	mov    ebx,0x8
 1009ea5:	mov    ecx,ebx
 1009ea7:	call   QWORD PTR [rip+0xffffffffffff720b]        # 0x10010b8
 1009ead:	mov    rsi,QWORD PTR [rsp+0x38]
 1009eb2:	mov    eax,ebx
 1009eb4:	mov    rbx,QWORD PTR [rsp+0x30]
 1009eb9:	add    rsp,0x20
 1009ebd:	pop    r14
 1009ebf:	ret    
 1009ec0:	xor    edx,edx
 1009ec2:	mov    rcx,rax
 1009ec5:	mov    QWORD PTR [rsp+0x40],rdi
 1009eca:	call   0x10099b0
 1009ecf:	mov    rdi,rax
 1009ed2:	test   rax,rax
 1009ed5:	je     0x1009f2c
 1009ed7:	mov    eax,0xffff
 1009edc:	cmp    WORD PTR [rdi],ax
 1009edf:	jne    0x1009eef
 1009ee1:	cmp    WORD PTR [rdi+0x2],0x0
 1009ee6:	jne    0x1009eef
 1009ee8:	mov    ebx,0x2
 1009eed:	jmp    0x1009ef1
 1009eef:	xor    ebx,ebx
 1009ef1:	call   QWORD PTR [rip+0xffffffffffff71d1]        # 0x10010c8
 1009ef7:	mov    r8,rdi
 1009efa:	xor    edx,edx
 1009efc:	mov    rcx,rax
 1009eff:	call   QWORD PTR [rip+0xffffffffffff71d3]        # 0x10010d8
 1009f05:	test   ebx,ebx
 1009f07:	jne    0x1009f31
 1009f09:	mov    ecx,ebx
 1009f0b:	mov    QWORD PTR [r14],rsi
 1009f0e:	call   QWORD PTR [rip+0xffffffffffff71a4]        # 0x10010b8
 1009f14:	mov    rdi,QWORD PTR [rsp+0x40]
 1009f19:	mov    rsi,QWORD PTR [rsp+0x38]
 1009f1e:	mov    eax,ebx
 1009f20:	mov    rbx,QWORD PTR [rsp+0x30]
 1009f25:	add    rsp,0x20
 1009f29:	pop    r14
 1009f2b:	ret    
 1009f2c:	mov    ebx,0x8
 1009f31:	call   QWORD PTR [rip+0xffffffffffff7191]        # 0x10010c8
 1009f37:	mov    r8,rsi
 1009f3a:	xor    edx,edx
 1009f3c:	mov    rcx,rax
 1009f3f:	call   QWORD PTR [rip+0xffffffffffff7193]        # 0x10010d8
 1009f45:	mov    ecx,ebx
 1009f47:	call   QWORD PTR [rip+0xffffffffffff716b]        # 0x10010b8
 1009f4d:	mov    rdi,QWORD PTR [rsp+0x40]
 1009f52:	mov    rsi,QWORD PTR [rsp+0x38]
 1009f57:	mov    eax,ebx
 1009f59:	mov    rbx,QWORD PTR [rsp+0x30]
 1009f5e:	add    rsp,0x20
 1009f62:	pop    r14
 1009f64:	ret    
 1009f65:	mov    rdx,r8
 1009f68:	add    rsp,0x20
 1009f6c:	pop    r14
 1009f6e:	jmp    0x1009d50
 1009f73:	add    rsp,0x20
 1009f77:	pop    r14
 1009f79:	rex.W jmp QWORD PTR [rip+0xffffffffffff7098]        # 0x1001018
 1009f80:	int3   
 1009f81:	int3   
 1009f82:	int3   
 1009f83:	int3   
 1009f84:	int3   
 1009f85:	int3   
 1009f86:	int3   
 1009f87:	int3   
 1009f88:	int3   
 1009f89:	int3   
 1009f8a:	int3   
 1009f8b:	int3   
 1009f8c:	int3   
 1009f8d:	int3   
 1009f8e:	int3   
 1009f8f:	int3   
 1009f90:	mov    rax,QWORD PTR [rcx]
 1009f93:	xor    edx,edx
 1009f95:	rex.W jmp QWORD PTR [rax+0x18]
 1009f99:	int3   
 1009f9a:	int3   
 1009f9b:	int3   
 1009f9c:	int3   
 1009f9d:	int3   
 1009f9e:	int3   
 1009f9f:	int3   
 1009fa0:	lea    rax,[rcx+0x10]
 1009fa4:	ret    
 1009fa5:	int3   
 1009fa6:	int3   
 1009fa7:	int3   
 1009fa8:	int3   
 1009fa9:	int3   
 1009faa:	int3   
 1009fab:	int3   
 1009fac:	int3   
 1009fad:	int3   
 1009fae:	int3   
 1009faf:	int3   
 1009fb0:	rex push rbx
 1009fb2:	sub    rsp,0x20
 1009fb6:	mov    rax,rdx
 1009fb9:	xor    ebx,ebx
 1009fbb:	xor    edx,edx
 1009fbd:	mov    rcx,rax
 1009fc0:	call   0x100b080
 1009fc5:	jmp    0x1009fe0
 1009fc7:	mov    ebx,eax
 1009fc9:	cmp    eax,0xc00000fd
 1009fce:	jne    0x1009fd6
 1009fd0:	call   QWORD PTR [rip+0xffffffffffff736a]        # 0x1001340
 1009fd6:	mov    eax,0x80004005
 1009fdb:	test   ebx,ebx
 1009fdd:	cmovns ebx,eax
 1009fe0:	mov    eax,ebx
 1009fe2:	add    rsp,0x20
 1009fe6:	pop    rbx
 1009fe7:	ret    
 1009fe8:	int3   
 1009fe9:	int3   
 1009fea:	int3   
 1009feb:	int3   
 1009fec:	int3   
 1009fed:	int3   
 1009fee:	int3   
 1009fef:	int3   
 1009ff0:	rex push rbx
 1009ff2:	sub    rsp,0x20
 1009ff6:	xor    r9d,r9d
 1009ff9:	lea    rbx,[rip+0xffffffffffff6000]        # 0x1000000
 100a000:	mov    r10,r8
 100a003:	mov    QWORD PTR [r8],r9
 100a006:	mov    r11,QWORD PTR [rbx+0x1af8]
 100a00d:	cmp    r11,QWORD PTR [rdx]
 100a010:	jne    0x100a024
 100a012:	mov    r11,QWORD PTR [rbx+0x1b00]
 100a019:	cmp    r11,QWORD PTR [rdx+0x8]
 100a01d:	jne    0x100a024
 100a01f:	mov    eax,r9d
 100a022:	jmp    0x100a029
 100a024:	sbb    eax,eax
 100a026:	sbb    eax,0xffffffff
 100a029:	test   eax,eax
 100a02b:	jne    0x100a03e
 100a02d:	mov    QWORD PTR [r8],rcx
 100a030:	mov    rax,QWORD PTR [rcx]
 100a033:	call   QWORD PTR [rax+0x8]
 100a036:	xor    eax,eax
 100a038:	add    rsp,0x20
 100a03c:	pop    rbx
 100a03d:	ret    
 100a03e:	mov    r8,QWORD PTR [rbx+0x3298]
 100a045:	cmp    r8,QWORD PTR [rdx]
 100a048:	jne    0x100a057
 100a04a:	mov    r8,QWORD PTR [rbx+0x32a0]
 100a051:	cmp    r8,QWORD PTR [rdx+0x8]
 100a055:	je     0x100a05f
 100a057:	sbb    eax,eax
 100a059:	sbb    eax,0xffffffff
 100a05c:	mov    r9d,eax
 100a05f:	test   r9d,r9d
 100a062:	jne    0x100a075
 100a064:	mov    QWORD PTR [r10],rcx
 100a067:	mov    rax,QWORD PTR [rcx]
 100a06a:	call   QWORD PTR [rax+0x8]
 100a06d:	xor    eax,eax
 100a06f:	add    rsp,0x20
 100a073:	pop    rbx
 100a074:	ret    
 100a075:	mov    eax,0x80004002
 100a07a:	add    rsp,0x20
 100a07e:	pop    rbx
 100a07f:	ret    
 100a080:	int3   
 100a081:	int3   
 100a082:	int3   
 100a083:	int3   
 100a084:	int3   
 100a085:	int3   
 100a086:	int3   
 100a087:	int3   
 100a088:	int3   
 100a089:	int3   
 100a08a:	int3   
 100a08b:	int3   
 100a08c:	int3   
 100a08d:	int3   
 100a08e:	int3   
 100a08f:	int3   
 100a090:	mov    eax,0x1
 100a095:	ret    
 100a096:	int3   
 100a097:	int3   
 100a098:	int3   
 100a099:	int3   
 100a09a:	int3   
 100a09b:	int3   
 100a09c:	int3   
 100a09d:	int3   
 100a09e:	int3   
 100a09f:	int3   
 100a0a0:	mov    eax,0x1
 100a0a5:	ret    
 100a0a6:	int3   
 100a0a7:	int3   
 100a0a8:	int3   
 100a0a9:	int3   
 100a0aa:	int3   
 100a0ab:	int3   
 100a0ac:	int3   
 100a0ad:	int3   
 100a0ae:	int3   
 100a0af:	int3   
 100a0b0:	rex push rbx
 100a0b2:	sub    rsp,0x20
 100a0b6:	add    rcx,0x8
 100a0ba:	mov    rbx,rdx
 100a0bd:	call   0x100b1f0
 100a0c2:	mov    DWORD PTR [rbx],eax
 100a0c4:	xor    eax,eax
 100a0c6:	add    rsp,0x20
 100a0ca:	pop    rbx
 100a0cb:	ret    
 100a0cc:	int3   
 100a0cd:	int3   
 100a0ce:	int3   
 100a0cf:	int3   
 100a0d0:	int3   
 100a0d1:	int3   
 100a0d2:	int3   
 100a0d3:	int3   
 100a0d4:	int3   
 100a0d5:	int3   
 100a0d6:	int3   
 100a0d7:	int3   
 100a0d8:	int3   
 100a0d9:	int3   
 100a0da:	int3   
 100a0db:	int3   
 100a0dc:	int3   
 100a0dd:	int3   
 100a0de:	int3   
 100a0df:	int3   
 100a0e0:	mov    eax,DWORD PTR [rcx+0x1b50]
 100a0e6:	ret    
 100a0e7:	int3   
 100a0e8:	int3   
 100a0e9:	int3   
 100a0ea:	int3   
 100a0eb:	int3   
 100a0ec:	int3   
 100a0ed:	int3   
 100a0ee:	int3   
 100a0ef:	int3   
 100a0f0:	mov    QWORD PTR [rcx+0x1b58],rdx
 100a0f7:	xor    eax,eax
 100a0f9:	ret    
 100a0fa:	int3   
 100a0fb:	int3   
 100a0fc:	int3   
 100a0fd:	int3   
 100a0fe:	int3   
 100a0ff:	int3   
 100a100:	mov    rax,QWORD PTR [rcx+0x1b58]
 100a107:	test   rax,rax
 100a10a:	je     0x100a112
 100a10c:	mov    rcx,rdx
 100a10f:	rex.W jmp rax
 100a112:	mov    eax,0x80004001
 100a117:	ret    
 100a118:	int3   
 100a119:	int3   
 100a11a:	int3   
 100a11b:	int3   
 100a11c:	int3   
 100a11d:	int3   
 100a11e:	int3   
 100a11f:	int3   
 100a120:	lea    rax,[rcx+0x1740]
 100a127:	ret    
 100a128:	int3   
 100a129:	int3   
 100a12a:	int3   
 100a12b:	int3   
 100a12c:	int3   
 100a12d:	int3   
 100a12e:	int3   
 100a12f:	int3   
 100a130:	mov    QWORD PTR [rsp+0x8],rbx
 100a135:	mov    QWORD PTR [rsp+0x10],rsi
 100a13a:	push   rdi
 100a13b:	push   r12
 100a13d:	push   r13
 100a13f:	sub    rsp,0x30
 100a143:	mov    r12,r8
 100a146:	mov    r13,rdx
 100a149:	mov    rdi,rcx
 100a14c:	xor    esi,esi
 100a14e:	mov    ebx,esi
 100a150:	mov    DWORD PTR [rsp+0x20],ebx
 100a154:	mov    DWORD PTR [rsp+0x68],esi
 100a158:	call   0x100b0f0
 100a15d:	test   rax,rax
 100a160:	je     0x100a1fa
 100a166:	mov    QWORD PTR [rsp+0x28],rsi
 100a16b:	mov    rcx,rdi
 100a16e:	call   0x100b0f0
 100a173:	mov    r9,QWORD PTR [rax]
 100a176:	lea    r8,[rsp+0x28]
 100a17b:	lea    rdx,[rip+0xffffffffffff7986]        # 0x1001b08
 100a182:	mov    rcx,rax
 100a185:	call   QWORD PTR [r9]
 100a188:	mov    ebx,eax
 100a18a:	mov    DWORD PTR [rsp+0x20],eax
 100a18e:	test   eax,eax
 100a190:	js     0x100a1fa
 100a192:	mov    rcx,QWORD PTR [rsp+0x28]
 100a197:	test   rcx,rcx
 100a19a:	je     0x100a1f1
 100a19c:	mov    edi,esi
 100a19e:	mov    DWORD PTR [rsp+0x24],esi
 100a1a2:	mov    rax,QWORD PTR [rcx]
 100a1a5:	mov    r8,r12
 100a1a8:	mov    rdx,r13
 100a1ab:	call   QWORD PTR [rax+0x18]
 100a1ae:	mov    ebx,eax
 100a1b0:	mov    DWORD PTR [rsp+0x20],eax
 100a1b4:	jmp    0x100a1db
 100a1b6:	mov    edi,eax
 100a1b8:	cmp    eax,0xc00000fd
 100a1bd:	jne    0x100a1c5
 100a1bf:	call   QWORD PTR [rip+0xffffffffffff717b]        # 0x1001340
 100a1c5:	mov    eax,0x80004005
 100a1ca:	test   edi,edi
 100a1cc:	cmovns edi,eax
 100a1cf:	mov    DWORD PTR [rsp+0x24],edi
 100a1d3:	mov    ebx,DWORD PTR [rsp+0x20]
 100a1d7:	mov    esi,DWORD PTR [rsp+0x68]
 100a1db:	test   ebx,ebx
 100a1dd:	cmovns ebx,edi
 100a1e0:	mov    DWORD PTR [rsp+0x20],ebx
 100a1e4:	mov    rcx,QWORD PTR [rsp+0x28]
 100a1e9:	mov    rax,QWORD PTR [rcx]
 100a1ec:	call   QWORD PTR [rax+0x10]
 100a1ef:	jmp    0x100a1fa
 100a1f1:	mov    ebx,0x80070057
 100a1f6:	mov    DWORD PTR [rsp+0x20],ebx
 100a1fa:	jmp    0x100a21b
 100a1fc:	mov    ebx,eax
 100a1fe:	cmp    eax,0xc00000fd
 100a203:	jne    0x100a20b
 100a205:	call   QWORD PTR [rip+0xffffffffffff7135]        # 0x1001340
 100a20b:	mov    eax,0x80004005
 100a210:	test   ebx,ebx
 100a212:	cmovns ebx,eax
 100a215:	mov    esi,ebx
 100a217:	mov    ebx,DWORD PTR [rsp+0x20]
 100a21b:	test   ebx,ebx
 100a21d:	cmovns ebx,esi
 100a220:	mov    eax,ebx
 100a222:	mov    rbx,QWORD PTR [rsp+0x50]
 100a227:	mov    rsi,QWORD PTR [rsp+0x58]
 100a22c:	add    rsp,0x30
 100a230:	pop    r13
 100a232:	pop    r12
 100a234:	pop    rdi
 100a235:	ret    
 100a236:	int3   
 100a237:	int3   
 100a238:	int3   
 100a239:	int3   
 100a23a:	int3   
 100a23b:	int3   
 100a23c:	int3   
 100a23d:	int3   
 100a23e:	int3   
 100a23f:	int3   
 100a240:	mov    QWORD PTR [rsp+0x10],rbx
 100a245:	mov    QWORD PTR [rsp+0x18],rsi
 100a24a:	mov    QWORD PTR [rsp+0x20],rdi
 100a24f:	mov    QWORD PTR [rsp+0x8],rcx
 100a254:	push   r12
 100a256:	sub    rsp,0x30
 100a25a:	mov    r12,rdx
 100a25d:	mov    rsi,rcx
 100a260:	xor    edi,edi
 100a262:	mov    DWORD PTR [rsp+0x20],edi
 100a266:	add    rcx,0x8
 100a26a:	call   0x100b1f0
 100a26f:	test   eax,eax
 100a271:	je     0x100a2f2
 100a273:	mov    edx,0x4e20
 100a278:	mov    rcx,QWORD PTR [rsi+0x18]
 100a27c:	call   QWORD PTR [rip+0xffffffffffff6e06]        # 0x1001088
 100a282:	test   eax,eax
 100a284:	je     0x100a2ac
 100a286:	cmp    eax,0x80
 100a28b:	je     0x100a2ac
 100a28d:	call   QWORD PTR [rip+0xffffffffffff6fad]        # 0x1001240
 100a293:	mov    ebx,eax
 100a295:	test   eax,eax
 100a297:	jle    0x100a2a2
 100a299:	movzx  ebx,ax
 100a29c:	or     ebx,0x80070000
 100a2a2:	mov    rcx,r12
 100a2a5:	call   0x100b0e0
 100a2aa:	jmp    0x100a2ff
 100a2ac:	mov    rdx,r12
 100a2af:	mov    rcx,rsi
 100a2b2:	call   0x1009fb0
 100a2b7:	mov    ebx,eax
 100a2b9:	mov    DWORD PTR [rsp+0x20],eax
 100a2bd:	jmp    0x100a2e1
 100a2bf:	mov    edi,eax
 100a2c1:	cmp    eax,0xc00000fd
 100a2c6:	jne    0x100a2ce
 100a2c8:	call   QWORD PTR [rip+0xffffffffffff7072]        # 0x1001340
 100a2ce:	mov    eax,0x80004005
 100a2d3:	test   edi,edi
 100a2d5:	cmovns edi,eax
 100a2d8:	mov    rsi,QWORD PTR [rsp+0x40]
 100a2dd:	mov    ebx,DWORD PTR [rsp+0x20]
 100a2e1:	test   ebx,ebx
 100a2e3:	cmovns ebx,edi
 100a2e6:	mov    rcx,QWORD PTR [rsi+0x18]
 100a2ea:	call   QWORD PTR [rip+0xffffffffffff6da0]        # 0x1001090
 100a2f0:	jmp    0x100a2ff
 100a2f2:	mov    rdx,r12
 100a2f5:	mov    rcx,rsi
 100a2f8:	call   0x1009fb0
 100a2fd:	mov    ebx,eax
 100a2ff:	mov    eax,ebx
 100a301:	mov    rbx,QWORD PTR [rsp+0x48]
 100a306:	mov    rsi,QWORD PTR [rsp+0x50]
 100a30b:	mov    rdi,QWORD PTR [rsp+0x58]
 100a310:	add    rsp,0x30
 100a314:	pop    r12
 100a316:	ret    
 100a317:	int3   
 100a318:	int3   
 100a319:	int3   
 100a31a:	int3   
 100a31b:	int3   
 100a31c:	int3   
 100a31d:	int3   
 100a31e:	int3   
 100a31f:	int3   
 100a320:	mov    QWORD PTR [rsp+0x10],rbx
 100a325:	mov    QWORD PTR [rsp+0x18],rsi
 100a32a:	mov    QWORD PTR [rsp+0x8],rcx
 100a32f:	push   rdi
 100a330:	sub    rsp,0x30
 100a334:	mov    rsi,rcx
 100a337:	xor    ebx,ebx
 100a339:	mov    DWORD PTR [rsp+0x20],ebx
 100a33d:	lea    rax,[rcx+0xe8]
 100a344:	cmp    rdx,rax
 100a347:	jne    0x100a38e
 100a349:	mov    edi,ebx
 100a34b:	mov    rcx,rdx
 100a34e:	call   0x100be10
 100a353:	mov    ebx,eax
 100a355:	mov    DWORD PTR [rsp+0x20],eax
 100a359:	jmp    0x100a37d
 100a35b:	mov    edi,eax
 100a35d:	cmp    eax,0xc00000fd
 100a362:	jne    0x100a36a
 100a364:	call   QWORD PTR [rip+0xffffffffffff6fd6]        # 0x1001340
 100a36a:	mov    eax,0x80004005
 100a36f:	test   edi,edi
 100a371:	cmovns edi,eax
 100a374:	mov    rsi,QWORD PTR [rsp+0x40]
 100a379:	mov    ebx,DWORD PTR [rsp+0x20]
 100a37d:	test   ebx,ebx
 100a37f:	cmovns ebx,edi
 100a382:	mov    rcx,QWORD PTR [rsi+0x20]
 100a386:	call   QWORD PTR [rip+0xffffffffffff6d04]        # 0x1001090
 100a38c:	jmp    0x100a39c
 100a38e:	test   rdx,rdx
 100a391:	je     0x100a39c
 100a393:	add    rcx,0x10
 100a397:	call   0x100afd0
 100a39c:	mov    eax,ebx
 100a39e:	mov    rbx,QWORD PTR [rsp+0x48]
 100a3a3:	mov    rsi,QWORD PTR [rsp+0x50]
 100a3a8:	add    rsp,0x30
 100a3ac:	pop    rdi
 100a3ad:	ret    
 100a3ae:	int3   
 100a3af:	int3   
 100a3b0:	int3   
 100a3b1:	int3   
 100a3b2:	int3   
 100a3b3:	int3   
 100a3b4:	int3   
 100a3b5:	int3   
 100a3b6:	int3   
 100a3b7:	int3   
 100a3b8:	int3   
 100a3b9:	int3   
 100a3ba:	int3   
 100a3bb:	int3   
 100a3bc:	int3   
 100a3bd:	int3   
 100a3be:	int3   
 100a3bf:	int3   
 100a3c0:	mov    rdx,QWORD PTR [rcx]
 100a3c3:	test   rdx,rdx
 100a3c6:	je     0x100a401
 100a3c8:	mov    eax,DWORD PTR [rdx+0xc]
 100a3cb:	cmp    QWORD PTR [rcx+0x8],rax
 100a3cf:	jb     0x100a3df
 100a3d1:	mov    rax,QWORD PTR [rdx]
 100a3d4:	mov    QWORD PTR [rcx+0x8],0x0
 100a3dc:	mov    QWORD PTR [rcx],rax
 100a3df:	mov    rdx,QWORD PTR [rcx]
 100a3e2:	test   rdx,rdx
 100a3e5:	je     0x100a401
 100a3e7:	mov    r8,QWORD PTR [rcx+0x8]
 100a3eb:	mov    eax,DWORD PTR [rdx+0xc]
 100a3ee:	cmp    r8,rax
 100a3f1:	jae    0x100a401
 100a3f3:	lea    rax,[r8+0x1]
 100a3f7:	mov    QWORD PTR [rcx+0x8],rax
 100a3fb:	lea    rax,[rdx+r8*8+0x18]
 100a400:	ret    
 100a401:	xor    eax,eax
 100a403:	ret    
 100a404:	int3   
 100a405:	int3   
 100a406:	int3   
 100a407:	int3   
 100a408:	int3   
 100a409:	int3   
 100a40a:	int3   
 100a40b:	int3   
 100a40c:	int3   
 100a40d:	int3   
 100a40e:	int3   
 100a40f:	int3   
 100a410:	mov    QWORD PTR [rsp+0x20],r9
 100a415:	push   rsi
 100a416:	push   rdi
 100a417:	sub    rsp,0x38
 100a41b:	xor    edi,edi
 100a41d:	test   rdx,rdx
 100a420:	mov    rsi,rcx
 100a423:	mov    eax,edi
 100a425:	je     0x100a430
 100a427:	cmp    rdx,0x7fffffff
 100a42e:	jbe    0x100a435
 100a430:	mov    eax,0x80070057
 100a435:	test   eax,eax
 100a437:	js     0x100a487
 100a439:	lea    rax,[rsp+0x70]
 100a43e:	mov    QWORD PTR [rsp+0x30],rbx
 100a443:	lea    rbx,[rdx-0x1]
 100a447:	mov    rdx,rbx
 100a44a:	mov    QWORD PTR [rsp+0x20],rax
 100a44f:	call   QWORD PTR [rip+0xffffffffffff6ef3]        # 0x1001348
 100a455:	test   eax,eax
 100a457:	js     0x100a477
 100a459:	cdqe   
 100a45b:	cmp    rax,rbx
 100a45e:	ja     0x100a477
 100a460:	cmp    rax,rbx
 100a463:	jne    0x100a480
 100a465:	mov    WORD PTR [rsi+rbx*2],di
 100a469:	mov    rbx,QWORD PTR [rsp+0x30]
 100a46e:	mov    eax,edi
 100a470:	add    rsp,0x38
 100a474:	pop    rdi
 100a475:	pop    rsi
 100a476:	ret    
 100a477:	mov    WORD PTR [rsi+rbx*2],di
 100a47b:	mov    edi,0x8007007a
 100a480:	mov    rbx,QWORD PTR [rsp+0x30]
 100a485:	mov    eax,edi
 100a487:	add    rsp,0x38
 100a48b:	pop    rdi
 100a48c:	pop    rsi
 100a48d:	ret    
 100a48e:	int3   
 100a48f:	int3   
 100a490:	int3   
 100a491:	int3   
 100a492:	int3   
 100a493:	int3   
 100a494:	int3   
 100a495:	int3   
 100a496:	int3   
 100a497:	int3   
 100a498:	int3   
 100a499:	int3   
 100a49a:	int3   
 100a49b:	int3   
 100a49c:	int3   
 100a49d:	int3   
 100a49e:	int3   
 100a49f:	int3   
 100a4a0:	rex push rdi
 100a4a2:	sub    rsp,0xab0
 100a4a9:	mov    rax,QWORD PTR [rip+0x6c60]        # 0x1011110
 100a4b0:	xor    rax,rsp
 100a4b3:	mov    QWORD PTR [rsp+0xaa0],rax
 100a4bb:	mov    rdi,rcx
 100a4be:	xor    ecx,ecx
 100a4c0:	call   QWORD PTR [rip+0xffffffffffff6daa]        # 0x1001270
 100a4c6:	lea    rdx,[rsp+0x260]
 100a4ce:	mov    r8d,0x104
 100a4d4:	mov    rcx,rax
 100a4d7:	call   QWORD PTR [rip+0xffffffffffff6c4b]        # 0x1001128
 100a4dd:	test   eax,eax
 100a4df:	je     0x100a5db
 100a4e5:	mov    QWORD PTR [rsp+0x40],0x105
 100a4ee:	lea    rax,[rsp+0x680]
 100a4f6:	lea    r9,[rsp+0x470]
 100a4fe:	mov    QWORD PTR [rsp+0x38],rax
 100a503:	lea    rax,[rsp+0x890]
 100a50b:	mov    QWORD PTR [rsp+0x30],0x105
 100a514:	mov    QWORD PTR [rsp+0x28],rax
 100a519:	lea    rdx,[rsp+0x50]
 100a51e:	lea    rcx,[rsp+0x260]
 100a526:	mov    r8d,0x105
 100a52c:	mov    QWORD PTR [rsp+0x20],0x105
 100a535:	mov    QWORD PTR [rsp+0xac8],rbx
 100a53d:	mov    WORD PTR [rsp+0x468],0x0
 100a547:	call   QWORD PTR [rip+0xffffffffffff6e0b]        # 0x1001358
 100a54d:	lea    rbx,[rdi+0x1948]
 100a554:	lea    r9,[rsp+0x470]
 100a55c:	lea    r8,[rsp+0x50]
 100a561:	mov    rcx,rbx
 100a564:	mov    edx,0x104
 100a569:	mov    QWORD PTR [rsp+0x28],0x0
 100a572:	mov    WORD PTR [rsp+0x56],0x0
 100a579:	mov    WORD PTR [rsp+0x670],0x0
 100a583:	mov    WORD PTR [rbx],0x0
 100a588:	mov    QWORD PTR [rsp+0x20],0x0
 100a591:	call   QWORD PTR [rip+0xffffffffffff6db9]        # 0x1001350
 100a597:	mov    WORD PTR [rdi+0x1b4e],0x0
 100a5a0:	call   0x1004b60
 100a5a5:	mov    r9,rax
 100a5a8:	lea    rax,[rip+0xffffffffffff8cc9]        # 0x1003278
 100a5af:	lea    rcx,[rdi+0x1740]
 100a5b6:	mov    QWORD PTR [rsp+0x28],rax
 100a5bb:	lea    r8,[rip+0xffffffffffff8ce6]        # 0x10032a8
 100a5c2:	mov    edx,0x104
 100a5c7:	mov    QWORD PTR [rsp+0x20],rbx
 100a5cc:	call   0x100a410
 100a5d1:	mov    rbx,QWORD PTR [rsp+0xac8]
 100a5d9:	jmp    0x100a5dd
 100a5db:	xor    eax,eax
 100a5dd:	mov    rcx,QWORD PTR [rsp+0xaa0]
 100a5e5:	xor    rcx,rsp
 100a5e8:	call   0x10057d0
 100a5ed:	add    rsp,0xab0
 100a5f4:	pop    rdi
 100a5f5:	ret    
 100a5f6:	int3   
 100a5f7:	int3   
 100a5f8:	int3   
 100a5f9:	int3   
 100a5fa:	int3   
 100a5fb:	int3   
 100a5fc:	int3   
 100a5fd:	int3   
 100a5fe:	int3   
 100a5ff:	int3   
 100a600:	mov    QWORD PTR [rsp+0x10],rbx
 100a605:	mov    QWORD PTR [rsp+0x18],rsi
 100a60a:	mov    QWORD PTR [rsp+0x20],rdi
 100a60f:	mov    QWORD PTR [rsp+0x8],rcx
 100a614:	push   r12
 100a616:	sub    rsp,0x40
 100a61a:	mov    r12,rdx
 100a61d:	mov    rsi,rcx
 100a620:	xor    ebx,ebx
 100a622:	mov    DWORD PTR [rsp+0x20],ebx
 100a626:	mov    edx,0x4e20
 100a62b:	mov    rcx,QWORD PTR [rcx+0x18]
 100a62f:	call   QWORD PTR [rip+0xffffffffffff6a53]        # 0x1001088
 100a635:	test   eax,eax
 100a637:	je     0x100a657
 100a639:	cmp    eax,0x80
 100a63e:	je     0x100a657
 100a640:	call   QWORD PTR [rip+0xffffffffffff6bfa]        # 0x1001240
 100a646:	mov    ebx,eax
 100a648:	test   eax,eax
 100a64a:	jle    0x100a6cb
 100a64c:	movzx  ebx,ax
 100a64f:	or     ebx,0x80070000
 100a655:	jmp    0x100a6cb
 100a657:	mov    edi,ebx
 100a659:	lea    rax,[rsi+0x28]
 100a65d:	mov    QWORD PTR [rsp+0x28],rax
 100a662:	mov    QWORD PTR [rsp+0x30],rbx
 100a667:	data16 xchg ax,ax
 100a66a:	data16 xchg ax,ax
 100a66d:	data16 xchg ax,ax
 100a670:	lea    rcx,[rsp+0x28]
 100a675:	call   0x100a3c0
 100a67a:	test   rax,rax
 100a67d:	je     0x100a698
 100a67f:	mov    r8,r12
 100a682:	mov    rdx,rsi
 100a685:	mov    rcx,rax
 100a688:	call   0x100a130
 100a68d:	test   ebx,ebx
 100a68f:	cmovns ebx,eax
 100a692:	mov    DWORD PTR [rsp+0x20],ebx
 100a696:	jmp    0x100a670
 100a698:	jmp    0x100a6bc
 100a69a:	mov    edi,eax
 100a69c:	cmp    eax,0xc00000fd
 100a6a1:	jne    0x100a6a9
 100a6a3:	call   QWORD PTR [rip+0xffffffffffff6c97]        # 0x1001340
 100a6a9:	mov    eax,0x80004005
 100a6ae:	test   edi,edi
 100a6b0:	cmovns edi,eax
 100a6b3:	mov    rsi,QWORD PTR [rsp+0x50]
 100a6b8:	mov    ebx,DWORD PTR [rsp+0x20]
 100a6bc:	mov    rcx,QWORD PTR [rsi+0x18]
 100a6c0:	call   QWORD PTR [rip+0xffffffffffff69ca]        # 0x1001090
 100a6c6:	test   ebx,ebx
 100a6c8:	cmovns ebx,edi
 100a6cb:	mov    eax,ebx
 100a6cd:	mov    rbx,QWORD PTR [rsp+0x58]
 100a6d2:	mov    rsi,QWORD PTR [rsp+0x60]
 100a6d7:	mov    rdi,QWORD PTR [rsp+0x68]
 100a6dc:	add    rsp,0x40
 100a6e0:	pop    r12
 100a6e2:	ret    
 100a6e3:	int3   
 100a6e4:	int3   
 100a6e5:	int3   
 100a6e6:	int3   
 100a6e7:	int3   
 100a6e8:	int3   
 100a6e9:	int3   
 100a6ea:	int3   
 100a6eb:	int3   
 100a6ec:	int3   
 100a6ed:	int3   
 100a6ee:	int3   
 100a6ef:	int3   
 100a6f0:	rex push rbx
 100a6f2:	sub    rsp,0x30
 100a6f6:	test   rdx,rdx
 100a6f9:	mov    rbx,rcx
 100a6fc:	je     0x100a7aa
 100a702:	mov    QWORD PTR [rsp+0x40],rdi
 100a707:	lea    rdi,[rcx+0x1948]
 100a70e:	xor    r10d,r10d
 100a711:	mov    r8,rdi
 100a714:	sub    rdx,rdi
 100a717:	mov    r9d,0x104
 100a71d:	data16 xchg ax,ax
 100a720:	lea    rax,[r9+0x7ffffefa]
 100a727:	test   rax,rax
 100a72a:	je     0x100a746
 100a72c:	movzx  eax,WORD PTR [rdx+r8*1]
 100a731:	test   ax,ax
 100a734:	je     0x100a746
 100a736:	mov    WORD PTR [r8],ax
 100a73a:	add    r8,0x2
 100a73e:	sub    r9,0x1
 100a742:	jne    0x100a720
 100a744:	jmp    0x100a74b
 100a746:	test   r9,r9
 100a749:	jne    0x100a755
 100a74b:	sub    r8,0x2
 100a74f:	mov    r10d,0x8007007a
 100a755:	test   r10d,r10d
 100a758:	mov    WORD PTR [r8],0x0
 100a75e:	js     0x100a79c
 100a760:	call   0x1004b60
 100a765:	lea    rcx,[rbx+0x1740]
 100a76c:	lea    r8,[rip+0xffffffffffff8b35]        # 0x10032a8
 100a773:	mov    r9,rax
 100a776:	lea    rax,[rip+0xffffffffffff8afb]        # 0x1003278
 100a77d:	mov    edx,0x104
 100a782:	mov    QWORD PTR [rsp+0x28],rax
 100a787:	mov    QWORD PTR [rsp+0x20],rdi
 100a78c:	call   0x100a410
 100a791:	mov    rdi,QWORD PTR [rsp+0x40]
 100a796:	add    rsp,0x30
 100a79a:	pop    rbx
 100a79b:	ret    
 100a79c:	mov    eax,r10d
 100a79f:	mov    rdi,QWORD PTR [rsp+0x40]
 100a7a4:	add    rsp,0x30
 100a7a8:	pop    rbx
 100a7a9:	ret    
 100a7aa:	mov    eax,0x80070057
 100a7af:	add    rsp,0x30
 100a7b3:	pop    rbx
 100a7b4:	ret    
 100a7b5:	int3   
 100a7b6:	int3   
 100a7b7:	int3   
 100a7b8:	int3   
 100a7b9:	int3   
 100a7ba:	int3   
 100a7bb:	int3   
 100a7bc:	int3   
 100a7bd:	int3   
 100a7be:	int3   
 100a7bf:	int3   
 100a7c0:	mov    QWORD PTR [rsp+0x20],rbx
 100a7c5:	mov    QWORD PTR [rsp+0x10],rdx
 100a7ca:	mov    QWORD PTR [rsp+0x8],rcx
 100a7cf:	push   rsi
 100a7d0:	push   rdi
 100a7d1:	push   r12
 100a7d3:	push   r13
 100a7d5:	push   r14
 100a7d7:	sub    rsp,0x20
 100a7db:	mov    r14,rdx
 100a7de:	mov    r13,rcx
 100a7e1:	xor    esi,esi
 100a7e3:	mov    r12,rsi
 100a7e6:	mov    QWORD PTR [rsp+0x60],rsi
 100a7eb:	mov    QWORD PTR [rdx],rsi
 100a7ee:	add    rcx,0x8
 100a7f2:	call   0x100b1f0
 100a7f7:	test   eax,eax
 100a7f9:	je     0x100a8ff
 100a7ff:	lea    rcx,[r13+0x8]
 100a803:	call   0x100b210
 100a808:	test   eax,eax
 100a80a:	js     0x100a8ff
 100a810:	call   QWORD PTR [rip+0xffffffffffff6b2a]        # 0x1001340
 100a816:	mov    edx,0x7530
 100a81b:	mov    rcx,QWORD PTR [r13+0x20]
 100a81f:	call   QWORD PTR [rip+0xffffffffffff6863]        # 0x1001088
 100a825:	mov    edi,eax
 100a827:	test   eax,eax
 100a829:	je     0x100a85e
 100a82b:	cmp    eax,0x80
 100a830:	je     0x100a85e
 100a832:	call   QWORD PTR [rip+0xffffffffffff6a08]        # 0x1001240
 100a838:	mov    ebx,eax
 100a83a:	test   eax,eax
 100a83c:	jle    0x100a847
 100a83e:	movzx  ebx,ax
 100a841:	or     ebx,0x80070000
 100a847:	test   ebx,ebx
 100a849:	js     0x100a8b8
 100a84b:	test   edi,edi
 100a84d:	jg     0x100a853
 100a84f:	mov    ebx,edi
 100a851:	jmp    0x100a8b8
 100a853:	movzx  ebx,di
 100a856:	or     ebx,0x80070000
 100a85c:	jmp    0x100a8b8
 100a85e:	mov    ebx,esi
 100a860:	lea    rcx,[r13+0xe8]
 100a867:	mov    r8d,0x4e20
 100a86d:	mov    rdx,r13
 100a870:	call   0x100cd30
 100a875:	jmp    0x100a8a1
 100a877:	mov    ebx,eax
 100a879:	cmp    eax,0xc00000fd
 100a87e:	jne    0x100a886
 100a880:	call   QWORD PTR [rip+0xffffffffffff6aba]        # 0x1001340
 100a886:	mov    eax,0x80004005
 100a88b:	test   ebx,ebx
 100a88d:	cmovns ebx,eax
 100a890:	xor    esi,esi
 100a892:	mov    r13,QWORD PTR [rsp+0x50]
 100a897:	mov    r14,QWORD PTR [rsp+0x58]
 100a89c:	mov    r12,QWORD PTR [rsp+0x60]
 100a8a1:	test   ebx,ebx
 100a8a3:	js     0x100a8ae
 100a8a5:	lea    r12,[r13+0xe8]
 100a8ac:	jmp    0x100a8b8
 100a8ae:	mov    rcx,QWORD PTR [r13+0x20]
 100a8b2:	call   QWORD PTR [rip+0xffffffffffff67d8]        # 0x1001090
 100a8b8:	test   r12,r12
 100a8bb:	jne    0x100a8f8
 100a8bd:	lea    rcx,[r13+0x10]
 100a8c1:	mov    edx,0x1658
 100a8c6:	call   0x100af70
 100a8cb:	test   rax,rax
 100a8ce:	je     0x100a8eb
 100a8d0:	mov    r8d,0x4e20
 100a8d6:	mov    rdx,r13
 100a8d9:	mov    rcx,rax
 100a8dc:	call   0x100c3b0
 100a8e1:	mov    r12,rax
 100a8e4:	test   rax,rax
 100a8e7:	jne    0x100a8f3
 100a8e9:	jmp    0x100a8ee
 100a8eb:	mov    r12,rsi
 100a8ee:	mov    esi,0x8007000e
 100a8f3:	test   esi,esi
 100a8f5:	cmovns ebx,esi
 100a8f8:	mov    QWORD PTR [r14],r12
 100a8fb:	mov    eax,ebx
 100a8fd:	jmp    0x100a904
 100a8ff:	mov    eax,0x80004005
 100a904:	mov    rbx,QWORD PTR [rsp+0x68]
 100a909:	add    rsp,0x20
 100a90d:	pop    r14
 100a90f:	pop    r13
 100a911:	pop    r12
 100a913:	pop    rdi
 100a914:	pop    rsi
 100a915:	ret    
 100a916:	int3   
 100a917:	int3   
 100a918:	int3   
 100a919:	int3   
 100a91a:	int3   
 100a91b:	int3   
 100a91c:	int3   
 100a91d:	int3   
 100a91e:	int3   
 100a91f:	int3   
 100a920:	mov    QWORD PTR [rsp+0x8],rbx
 100a925:	push   rdi
 100a926:	sub    rsp,0x20
 100a92a:	mov    rdx,QWORD PTR [rcx+0x20]
 100a92e:	mov    rbx,rcx
 100a931:	mov    eax,DWORD PTR [rdx+0x10]
 100a934:	cmp    DWORD PTR [rdx+0xc],eax
 100a937:	jb     0x100a970
 100a939:	mov    rcx,QWORD PTR [rcx+0x10]
 100a93d:	test   rcx,rcx
 100a940:	je     0x100a996
 100a942:	mov    rdi,QWORD PTR [rbx]
 100a945:	lea    rdx,[rdi*8+0x18]
 100a94d:	call   0x100af70
 100a952:	test   rax,rax
 100a955:	je     0x100a996
 100a957:	xor    ecx,ecx
 100a959:	mov    DWORD PTR [rax+0x10],edi
 100a95c:	mov    QWORD PTR [rax],rcx
 100a95f:	mov    DWORD PTR [rax+0x8],ecx
 100a962:	mov    DWORD PTR [rax+0xc],ecx
 100a965:	mov    rcx,QWORD PTR [rbx+0x20]
 100a969:	mov    QWORD PTR [rcx],rax
 100a96c:	mov    QWORD PTR [rbx+0x20],rax
 100a970:	mov    rcx,QWORD PTR [rbx+0x20]
 100a974:	mov    edx,DWORD PTR [rcx+0xc]
 100a977:	lea    eax,[rdx+0x1]
 100a97a:	mov    DWORD PTR [rcx+0xc],eax
 100a97d:	mov    rax,QWORD PTR [rbx+0x20]
 100a981:	add    QWORD PTR [rbx+0x8],0x1
 100a986:	lea    rax,[rax+rdx*8+0x18]
 100a98b:	mov    rbx,QWORD PTR [rsp+0x30]
 100a990:	add    rsp,0x20
 100a994:	pop    rdi
 100a995:	ret    
 100a996:	xor    eax,eax
 100a998:	mov    rbx,QWORD PTR [rsp+0x30]
 100a99d:	add    rsp,0x20
 100a9a1:	pop    rdi
 100a9a2:	ret    
 100a9a3:	int3   
 100a9a4:	int3   
 100a9a5:	int3   
 100a9a6:	int3   
 100a9a7:	int3   
 100a9a8:	int3   
 100a9a9:	int3   
 100a9aa:	int3   
 100a9ab:	int3   
 100a9ac:	int3   
 100a9ad:	int3   
 100a9ae:	int3   
 100a9af:	int3   
 100a9b0:	mov    QWORD PTR [rsp+0x8],rbx
 100a9b5:	mov    QWORD PTR [rsp+0x10],rsi
 100a9ba:	push   rdi
 100a9bb:	sub    rsp,0x20
 100a9bf:	lea    rax,[rip+0xffffffffffff88fa]        # 0x10032c0
 100a9c6:	mov    rdi,rcx
 100a9c9:	add    rcx,0x8
 100a9cd:	mov    QWORD PTR [rcx-0x8],rax
 100a9d1:	call   0x100b1d0
 100a9d6:	lea    rcx,[rdi+0x10]
 100a9da:	call   0x100af50
 100a9df:	lea    rbx,[rdi+0x28]
 100a9e3:	xor    esi,esi
 100a9e5:	mov    QWORD PTR [rdi+0x18],rsi
 100a9e9:	mov    QWORD PTR [rdi+0x20],rsi
 100a9ed:	lea    rcx,[rbx+0x18]
 100a9f1:	xor    edx,edx
 100a9f3:	mov    r8d,0x80
 100a9f9:	mov    QWORD PTR [rbx],rsi
 100a9fc:	mov    DWORD PTR [rbx+0x8],esi
 100a9ff:	mov    DWORD PTR [rbx+0xc],esi
 100aa02:	mov    DWORD PTR [rbx+0x10],0x10
 100aa09:	mov    DWORD PTR [rbx+0x14],esi
 100aa0c:	call   0x1005982
 100aa11:	lea    rcx,[rdi+0xe8]
 100aa18:	xor    edx,edx
 100aa1a:	mov    r8d,0x4e20
 100aa20:	mov    QWORD PTR [rdi+0xc0],0x10
 100aa2b:	mov    QWORD PTR [rdi+0xc8],rsi
 100aa32:	mov    QWORD PTR [rdi+0xd0],rsi
 100aa39:	mov    QWORD PTR [rdi+0xd8],rbx
 100aa40:	mov    QWORD PTR [rdi+0xe0],rbx
 100aa47:	call   0x100c3b0
 100aa4c:	lea    rcx,[rdi+0x1740]
 100aa53:	xor    edx,edx
 100aa55:	mov    r8d,0x208
 100aa5b:	mov    DWORD PTR [rdi+0x1b50],esi
 100aa61:	mov    QWORD PTR [rdi+0x1b58],rsi
 100aa68:	call   0x1005982
 100aa6d:	lea    rcx,[rdi+0x1948]
 100aa74:	xor    edx,edx
 100aa76:	mov    r8d,0x208
 100aa7c:	call   0x1005982
 100aa81:	lea    rcx,[rdi+0xe8]
 100aa88:	mov    rdx,rdi
 100aa8b:	call   0x100bbc0
 100aa90:	mov    rbx,QWORD PTR [rsp+0x30]
 100aa95:	mov    rsi,QWORD PTR [rsp+0x38]
 100aa9a:	mov    rax,rdi
 100aa9d:	add    rsp,0x20
 100aaa1:	pop    rdi
 100aaa2:	ret    
 100aaa3:	int3   
 100aaa4:	int3   
 100aaa5:	int3   
 100aaa6:	int3   
 100aaa7:	int3   
 100aaa8:	int3   
 100aaa9:	int3   
 100aaaa:	int3   
 100aaab:	int3   
 100aaac:	int3   
 100aaad:	int3   
 100aaae:	int3   
 100aaaf:	int3   
 100aab0:	mov    QWORD PTR [rsp+0x18],rbx
 100aab5:	push   rdi
 100aab6:	sub    rsp,0x30
 100aaba:	test   rdx,rdx
 100aabd:	mov    rdi,rcx
 100aac0:	mov    QWORD PTR [rsp+0x48],0x0
 100aac9:	je     0x100ab97
 100aacf:	lea    rax,[rsp+0x48]
 100aad4:	mov    r9d,0x1
 100aada:	xor    r8d,r8d
 100aadd:	mov    rcx,0xffffffff80000002
 100aae4:	mov    QWORD PTR [rsp+0x20],rax
 100aae9:	call   QWORD PTR [rip+0xffffffffffff6519]        # 0x1001008
 100aaef:	test   eax,eax
 100aaf1:	jne    0x100ab8b
 100aaf7:	mov    rcx,QWORD PTR [rsp+0x48]
 100aafc:	mov    QWORD PTR [rsp+0x40],rsi
 100ab01:	lea    rsi,[rdi+0x1948]
 100ab08:	lea    rdx,[rip+0xffffffffffff8409]        # 0x1002f18
 100ab0f:	mov    r8,rsi
 100ab12:	mov    r9d,0x104
 100ab18:	call   0x100b6c0
 100ab1d:	test   eax,eax
 100ab1f:	mov    ebx,eax
 100ab21:	js     0x100ab68
 100ab23:	call   0x1004b60
 100ab28:	lea    rcx,[rdi+0x1740]
 100ab2f:	lea    r8,[rip+0xffffffffffff8772]        # 0x10032a8
 100ab36:	mov    r9,rax
 100ab39:	lea    rax,[rip+0xffffffffffff8738]        # 0x1003278
 100ab40:	mov    edx,0x104
 100ab45:	mov    QWORD PTR [rsp+0x28],rax
 100ab4a:	mov    QWORD PTR [rsp+0x20],rsi
 100ab4f:	call   0x100a410
 100ab54:	mov    rcx,QWORD PTR [rsp+0x48]
 100ab59:	mov    ebx,eax
 100ab5b:	call   QWORD PTR [rip+0xffffffffffff649f]        # 0x1001000
 100ab61:	mov    rsi,QWORD PTR [rsp+0x40]
 100ab66:	jmp    0x100ab9e
 100ab68:	cmp    eax,0x80070002
 100ab6d:	jne    0x100ab79
 100ab6f:	mov    rcx,rdi
 100ab72:	call   0x100a4a0
 100ab77:	mov    ebx,eax
 100ab79:	mov    rcx,QWORD PTR [rsp+0x48]
 100ab7e:	call   QWORD PTR [rip+0xffffffffffff647c]        # 0x1001000
 100ab84:	mov    rsi,QWORD PTR [rsp+0x40]
 100ab89:	jmp    0x100ab9e
 100ab8b:	mov    rcx,rdi
 100ab8e:	call   0x100a4a0
 100ab93:	mov    ebx,eax
 100ab95:	jmp    0x100ab9e
 100ab97:	call   0x100a4a0
 100ab9c:	mov    ebx,eax
 100ab9e:	test   ebx,ebx
 100aba0:	jns    0x100abca
 100aba2:	lea    rcx,[rdi+0x1948]
 100aba9:	xor    edx,edx
 100abab:	mov    r8d,0x208
 100abb1:	call   0x1005982
 100abb6:	lea    rcx,[rdi+0x1740]
 100abbd:	xor    edx,edx
 100abbf:	mov    r8d,0x208
 100abc5:	call   0x1005982
 100abca:	mov    eax,ebx
 100abcc:	mov    rbx,QWORD PTR [rsp+0x50]
 100abd1:	add    rsp,0x30
 100abd5:	pop    rdi
 100abd6:	ret    
 100abd7:	int3   
 100abd8:	int3   
 100abd9:	int3   
 100abda:	int3   
 100abdb:	int3   
 100abdc:	int3   
 100abdd:	int3   
 100abde:	int3   
 100abdf:	int3   
 100abe0:	mov    QWORD PTR [rsp+0x18],rbp
 100abe5:	push   rdi
 100abe6:	sub    rsp,0x20
 100abea:	test   edx,edx
 100abec:	mov    rdi,rcx
 100abef:	je     0x100abfb
 100abf1:	mov    DWORD PTR [rcx+0x1b50],0x1
 100abfb:	add    rcx,0x8
 100abff:	call   0x100b450
 100ac04:	test   eax,eax
 100ac06:	je     0x100ad26
 100ac0c:	mov    QWORD PTR [rsp+0x30],rbx
 100ac11:	mov    QWORD PTR [rsp+0x38],rsi
 100ac16:	lea    rsi,[rdi+0x10]
 100ac1a:	mov    rcx,rsi
 100ac1d:	call   0x100b3c0
 100ac22:	test   eax,eax
 100ac24:	mov    ebx,eax
 100ac26:	js     0x100ad11
 100ac2c:	xor    r8d,r8d
 100ac2f:	xor    edx,edx
 100ac31:	xor    ecx,ecx
 100ac33:	mov    QWORD PTR [rdi+0xd0],rsi
 100ac3a:	call   QWORD PTR [rip+0xffffffffffff6438]        # 0x1001078
 100ac40:	test   rax,rax
 100ac43:	mov    QWORD PTR [rdi+0x18],rax
 100ac47:	jne    0x100ac5e
 100ac49:	call   QWORD PTR [rip+0xffffffffffff65f1]        # 0x1001240
 100ac4f:	test   eax,eax
 100ac51:	mov    ebx,eax
 100ac53:	jle    0x100ac5e
 100ac55:	movzx  ebx,ax
 100ac58:	or     ebx,0x80070000
 100ac5e:	test   ebx,ebx
 100ac60:	js     0x100ad11
 100ac66:	mov    rcx,QWORD PTR [rdi+0x18]
 100ac6a:	mov    edx,0x2
 100ac6f:	mov    r8d,edx
 100ac72:	call   QWORD PTR [rip+0xffffffffffff6408]        # 0x1001080
 100ac78:	test   eax,eax
 100ac7a:	jne    0x100ac91
 100ac7c:	call   QWORD PTR [rip+0xffffffffffff65be]        # 0x1001240
 100ac82:	test   eax,eax
 100ac84:	mov    ebx,eax
 100ac86:	jle    0x100ac91
 100ac88:	movzx  ebx,ax
 100ac8b:	or     ebx,0x80070000
 100ac91:	test   ebx,ebx
 100ac93:	js     0x100ad11
 100ac95:	xor    r8d,r8d
 100ac98:	xor    edx,edx
 100ac9a:	xor    ecx,ecx
 100ac9c:	call   QWORD PTR [rip+0xffffffffffff63d6]        # 0x1001078
 100aca2:	test   rax,rax
 100aca5:	mov    QWORD PTR [rdi+0x20],rax
 100aca9:	jne    0x100acc0
 100acab:	call   QWORD PTR [rip+0xffffffffffff658f]        # 0x1001240
 100acb1:	test   eax,eax
 100acb3:	mov    ebx,eax
 100acb5:	jle    0x100acc0
 100acb7:	movzx  ebx,ax
 100acba:	or     ebx,0x80070000
 100acc0:	test   ebx,ebx
 100acc2:	js     0x100ad11
 100acc4:	mov    rcx,QWORD PTR [rdi+0x20]
 100acc8:	mov    edx,0x2
 100accd:	mov    r8d,edx
 100acd0:	call   QWORD PTR [rip+0xffffffffffff63aa]        # 0x1001080
 100acd6:	test   eax,eax
 100acd8:	jne    0x100acef
 100acda:	call   QWORD PTR [rip+0xffffffffffff6560]        # 0x1001240
 100ace0:	test   eax,eax
 100ace2:	mov    ebx,eax
 100ace4:	jle    0x100acef
 100ace6:	movzx  ebx,ax
 100ace9:	or     ebx,0x80070000
 100acef:	test   ebx,ebx
 100acf1:	js     0x100ad11
 100acf3:	cmp    DWORD PTR [rdi+0x1b50],0x0
 100acfa:	je     0x100ad00
 100acfc:	xor    edx,edx
 100acfe:	jmp    0x100ad07
 100ad00:	lea    rdx,[rip+0xffffffffffff8519]        # 0x1003220
 100ad07:	mov    rcx,rdi
 100ad0a:	call   0x100aab0
 100ad0f:	mov    ebx,eax
 100ad11:	lea    rcx,[rdi+0x8]
 100ad15:	mov    edx,ebx
 100ad17:	call   0x100b4b0
 100ad1c:	mov    rsi,QWORD PTR [rsp+0x38]
 100ad21:	mov    rbx,QWORD PTR [rsp+0x30]
 100ad26:	call   0x100b220
 100ad2b:	lea    rcx,[rdi+0x8]
 100ad2f:	mov    rbp,QWORD PTR [rsp+0x40]
 100ad34:	add    rsp,0x20
 100ad38:	pop    rdi
 100ad39:	jmp    0x100b210
 100ad3e:	int3   
 100ad3f:	int3   
 100ad40:	int3   
 100ad41:	int3   
 100ad42:	int3   
 100ad43:	int3   
 100ad44:	int3   
 100ad45:	int3   
 100ad46:	int3   
 100ad47:	int3   
 100ad48:	int3   
 100ad49:	int3   
 100ad4a:	int3   
 100ad4b:	int3   
 100ad4c:	int3   
 100ad4d:	int3   
 100ad4e:	int3   
 100ad4f:	int3   
 100ad50:	mov    r11,rsp
 100ad53:	mov    QWORD PTR [r11+0x8],rbx
 100ad57:	mov    QWORD PTR [r11+0x10],rsi
 100ad5b:	mov    QWORD PTR [r11+0x20],rdi
 100ad5f:	mov    QWORD PTR [r11+0x18],r8
 100ad63:	push   r12
 100ad65:	push   r13
 100ad67:	push   r14
 100ad69:	sub    rsp,0x40
 100ad6d:	mov    r13,r8
 100ad70:	mov    r14,rdx
 100ad73:	mov    r12,rcx
 100ad76:	xor    esi,esi
 100ad78:	mov    DWORD PTR [rsp+0x20],esi
 100ad7c:	mov    QWORD PTR [r11-0x30],rsi
 100ad80:	mov    edi,esi
 100ad82:	lea    rax,[rcx+0x28]
 100ad86:	mov    QWORD PTR [r11-0x28],rax
 100ad8a:	mov    QWORD PTR [r11-0x20],rsi
 100ad8e:	xchg   ax,ax
 100ad90:	lea    rcx,[rsp+0x30]
 100ad95:	call   0x100a3c0
 100ad9a:	mov    rbx,rax
 100ad9d:	test   rax,rax
 100ada0:	je     0x100adb1
 100ada2:	mov    rcx,rax
 100ada5:	call   0x100b0f0
 100adaa:	test   rax,rax
 100adad:	je     0x100adb1
 100adaf:	jmp    0x100ad90
 100adb1:	test   rbx,rbx
 100adb4:	jne    0x100adc6
 100adb6:	lea    rcx,[r12+0xc0]
 100adbe:	call   0x100a920
 100adc3:	mov    rbx,rax
 100adc6:	test   rbx,rbx
 100adc9:	je     0x100adf1
 100adcb:	xor    eax,eax
 100adcd:	mov    QWORD PTR [rbx],rax
 100add0:	mov    rcx,rbx
 100add3:	call   0x100b000
 100add8:	mov    rdx,r14
 100addb:	mov    rcx,rbx
 100adde:	call   0x100b080
 100ade3:	mov    DWORD PTR [rsp+0x20],eax
 100ade7:	mov    rsi,rbx
 100adea:	mov    QWORD PTR [rsp+0x28],rbx
 100adef:	jmp    0x100adfa
 100adf1:	mov    eax,0x8007000e
 100adf6:	mov    DWORD PTR [rsp+0x20],eax
 100adfa:	jmp    0x100ae23
 100adfc:	mov    edi,eax
 100adfe:	cmp    eax,0xc00000fd
 100ae03:	jne    0x100ae0b
 100ae05:	call   QWORD PTR [rip+0xffffffffffff6535]        # 0x1001340
 100ae0b:	mov    eax,0x80004005
 100ae10:	test   edi,edi
 100ae12:	cmovns edi,eax
 100ae15:	mov    r13,QWORD PTR [rsp+0x70]
 100ae1a:	mov    eax,DWORD PTR [rsp+0x20]
 100ae1e:	mov    rsi,QWORD PTR [rsp+0x28]
 100ae23:	mov    QWORD PTR [r13+0x0],rsi
 100ae27:	test   eax,eax
 100ae29:	cmovns eax,edi
 100ae2c:	mov    rbx,QWORD PTR [rsp+0x60]
 100ae31:	mov    rsi,QWORD PTR [rsp+0x68]
 100ae36:	mov    rdi,QWORD PTR [rsp+0x78]
 100ae3b:	add    rsp,0x40
 100ae3f:	pop    r14
 100ae41:	pop    r13
 100ae43:	pop    r12
 100ae45:	ret    
 100ae46:	int3   
 100ae47:	int3   
 100ae48:	int3   
 100ae49:	int3   
 100ae4a:	int3   
 100ae4b:	int3   
 100ae4c:	int3   
 100ae4d:	int3   
 100ae4e:	int3   
 100ae4f:	int3   
 100ae50:	mov    QWORD PTR [rsp+0x10],rbx
 100ae55:	mov    QWORD PTR [rsp+0x18],r8
 100ae5a:	mov    QWORD PTR [rsp+0x8],rcx
 100ae5f:	push   rsi
 100ae60:	push   rdi
 100ae61:	push   r12
 100ae63:	sub    rsp,0x30
 100ae67:	mov    rsi,r8
 100ae6a:	mov    rbx,rdx
 100ae6d:	mov    rdi,rcx
 100ae70:	xor    r12d,r12d
 100ae73:	mov    DWORD PTR [rsp+0x20],r12d
 100ae78:	mov    QWORD PTR [rsp+0x68],r12
 100ae7d:	add    rcx,0x8
 100ae81:	call   0x100b1f0
 100ae86:	test   eax,eax
 100ae88:	je     0x100af11
 100ae8e:	or     edx,0xffffffff
 100ae91:	mov    rcx,QWORD PTR [rdi+0x18]
 100ae95:	call   QWORD PTR [rip+0xffffffffffff61ed]        # 0x1001088
 100ae9b:	test   eax,eax
 100ae9d:	je     0x100aebd
 100ae9f:	cmp    eax,0x80
 100aea4:	je     0x100aebd
 100aea6:	call   QWORD PTR [rip+0xffffffffffff6394]        # 0x1001240
 100aeac:	mov    ebx,eax
 100aeae:	test   eax,eax
 100aeb0:	jle    0x100af23
 100aeb2:	movzx  ebx,ax
 100aeb5:	or     ebx,0x80070000
 100aebb:	jmp    0x100af23
 100aebd:	lea    r8,[rsp+0x68]
 100aec2:	mov    rdx,rbx
 100aec5:	mov    rcx,rdi
 100aec8:	call   0x100ad50
 100aecd:	mov    ebx,eax
 100aecf:	mov    DWORD PTR [rsp+0x20],eax
 100aed3:	jmp    0x100aeff
 100aed5:	mov    ebx,eax
 100aed7:	cmp    eax,0xc00000fd
 100aedc:	jne    0x100aee4
 100aede:	call   QWORD PTR [rip+0xffffffffffff645c]        # 0x1001340
 100aee4:	mov    eax,0x80004005
 100aee9:	test   ebx,ebx
 100aeeb:	cmovns ebx,eax
 100aeee:	mov    r12d,ebx
 100aef1:	mov    rdi,QWORD PTR [rsp+0x50]
 100aef6:	mov    rsi,QWORD PTR [rsp+0x60]
 100aefb:	mov    ebx,DWORD PTR [rsp+0x20]
 100aeff:	test   ebx,ebx
 100af01:	cmovns ebx,r12d
 100af05:	mov    rcx,QWORD PTR [rdi+0x18]
 100af09:	call   QWORD PTR [rip+0xffffffffffff6181]        # 0x1001090
 100af0f:	jmp    0x100af23
 100af11:	lea    r8,[rsp+0x68]
 100af16:	mov    rdx,rbx
 100af19:	mov    rcx,rdi
 100af1c:	call   0x100ad50
 100af21:	mov    ebx,eax
 100af23:	mov    rcx,QWORD PTR [rsp+0x68]
 100af28:	mov    QWORD PTR [rsi],rcx
 100af2b:	mov    eax,ebx
 100af2d:	mov    rbx,QWORD PTR [rsp+0x58]
 100af32:	add    rsp,0x30
 100af36:	pop    r12
 100af38:	pop    rdi
 100af39:	pop    rsi
 100af3a:	ret    
 100af3b:	int3   
 100af3c:	int3   
 100af3d:	int3   
 100af3e:	int3   
 100af3f:	int3   
 100af40:	int3   
 100af41:	int3   
 100af42:	int3   
 100af43:	int3   
 100af44:	int3   
 100af45:	int3   
 100af46:	int3   
 100af47:	int3   
 100af48:	int3   
 100af49:	int3   
 100af4a:	int3   
 100af4b:	int3   
 100af4c:	int3   
 100af4d:	int3   
 100af4e:	int3   
 100af4f:	int3   
 100af50:	mov    QWORD PTR [rcx],0x0
 100af57:	mov    rax,rcx
 100af5a:	ret    
 100af5b:	int3   
 100af5c:	int3   
 100af5d:	int3   
 100af5e:	int3   
 100af5f:	int3   
 100af60:	int3   
 100af61:	int3   
 100af62:	int3   
 100af63:	int3   
 100af64:	int3   
 100af65:	int3   
 100af66:	int3   
 100af67:	int3   
 100af68:	int3   
 100af69:	int3   
 100af6a:	int3   
 100af6b:	int3   
 100af6c:	int3   
 100af6d:	int3   
 100af6e:	int3   
 100af6f:	int3   
 100af70:	mov    QWORD PTR [rsp+0x8],rbx
 100af75:	push   rdi
 100af76:	sub    rsp,0x30
 100af7a:	xor    edi,edi
 100af7c:	mov    QWORD PTR [rsp+0x20],rdi
 100af81:	mov    ebx,edi
 100af83:	mov    r8,rdx
 100af86:	xor    edx,edx
 100af88:	mov    rcx,QWORD PTR [rcx]
 100af8b:	call   QWORD PTR [rip+0xffffffffffff614f]        # 0x10010e0
 100af91:	mov    QWORD PTR [rsp+0x20],rax
 100af96:	jmp    0x100afb8
 100af98:	mov    ebx,eax
 100af9a:	cmp    eax,0xc00000fd
 100af9f:	jne    0x100afa7
 100afa1:	call   QWORD PTR [rip+0xffffffffffff6399]        # 0x1001340
 100afa7:	mov    eax,0x80004005
 100afac:	test   ebx,ebx
 100afae:	cmovns ebx,eax
 100afb1:	xor    edi,edi
 100afb3:	mov    rax,QWORD PTR [rsp+0x20]
 100afb8:	test   ebx,ebx
 100afba:	cmovs  rax,rdi
 100afbe:	mov    rbx,QWORD PTR [rsp+0x40]
 100afc3:	add    rsp,0x30
 100afc7:	pop    rdi
 100afc8:	ret    
 100afc9:	int3   
 100afca:	int3   
 100afcb:	int3   
 100afcc:	int3   
 100afcd:	int3   
 100afce:	int3   
 100afcf:	int3   
 100afd0:	sub    rsp,0x28
 100afd4:	mov    r8,rdx
 100afd7:	xor    edx,edx
 100afd9:	mov    rcx,QWORD PTR [rcx]
 100afdc:	call   QWORD PTR [rip+0xffffffffffff60f6]        # 0x10010d8
 100afe2:	jmp    0x100aff2
 100afe4:	cmp    eax,0xc00000fd
 100afe9:	jne    0x100aff2
 100afeb:	call   QWORD PTR [rip+0xffffffffffff634f]        # 0x1001340
 100aff1:	nop
 100aff2:	add    rsp,0x28
 100aff6:	ret    
 100aff7:	int3   
 100aff8:	int3   
 100aff9:	int3   
 100affa:	int3   
 100affb:	int3   
 100affc:	int3   
 100affd:	int3   
 100affe:	int3   
 100afff:	int3   
 100b000:	mov    QWORD PTR [rcx],0x0
 100b007:	mov    rax,rcx
 100b00a:	ret    
 100b00b:	int3   
 100b00c:	int3   
 100b00d:	int3   
 100b00e:	int3   
 100b00f:	int3   
 100b010:	int3   
 100b011:	int3   
 100b012:	int3   
 100b013:	int3   
 100b014:	int3   
 100b015:	int3   
 100b016:	int3   
 100b017:	int3   
 100b018:	int3   
 100b019:	int3   
 100b01a:	int3   
 100b01b:	int3   
 100b01c:	int3   
 100b01d:	int3   
 100b01e:	int3   
 100b01f:	int3   
 100b020:	mov    QWORD PTR [rsp+0x10],rbx
 100b025:	mov    QWORD PTR [rsp+0x8],rcx
 100b02a:	push   rdi
 100b02b:	sub    rsp,0x20
 100b02f:	mov    rdi,rcx
 100b032:	xor    ebx,ebx
 100b034:	mov    rcx,QWORD PTR [rcx]
 100b037:	test   rcx,rcx
 100b03a:	je     0x100b042
 100b03c:	mov    rax,QWORD PTR [rcx]
 100b03f:	call   QWORD PTR [rax+0x10]
 100b042:	jmp    0x100b062
 100b044:	mov    ebx,eax
 100b046:	cmp    eax,0xc00000fd
 100b04b:	jne    0x100b053
 100b04d:	call   QWORD PTR [rip+0xffffffffffff62ed]        # 0x1001340
 100b053:	mov    eax,0x80004005
 100b058:	test   ebx,ebx
 100b05a:	cmovns ebx,eax
 100b05d:	mov    rdi,QWORD PTR [rsp+0x30]
 100b062:	mov    QWORD PTR [rdi],0x0
 100b069:	mov    eax,ebx
 100b06b:	mov    rbx,QWORD PTR [rsp+0x38]
 100b070:	add    rsp,0x20
 100b074:	pop    rdi
 100b075:	ret    
 100b076:	int3   
 100b077:	int3   
 100b078:	int3   
 100b079:	int3   
 100b07a:	int3   
 100b07b:	int3   
 100b07c:	int3   
 100b07d:	int3   
 100b07e:	int3   
 100b07f:	int3   
 100b080:	mov    QWORD PTR [rsp+0x8],rbx
 100b085:	mov    QWORD PTR [rsp+0x10],rsi
 100b08a:	push   rdi
 100b08b:	sub    rsp,0x20
 100b08f:	mov    rdi,rdx
 100b092:	mov    rsi,rcx
 100b095:	call   0x100b020
 100b09a:	xor    ebx,ebx
 100b09c:	test   rdi,rdi
 100b09f:	je     0x100b0aa
 100b0a1:	mov    rax,QWORD PTR [rdi]
 100b0a4:	mov    rcx,rdi
 100b0a7:	call   QWORD PTR [rax+0x8]
 100b0aa:	mov    QWORD PTR [rsi],rdi
 100b0ad:	jmp    0x100b0c8
 100b0af:	mov    ebx,eax
 100b0b1:	cmp    eax,0xc00000fd
 100b0b6:	jne    0x100b0be
 100b0b8:	call   QWORD PTR [rip+0xffffffffffff6282]        # 0x1001340
 100b0be:	mov    eax,0x80004005
 100b0c3:	test   ebx,ebx
 100b0c5:	cmovns ebx,eax
 100b0c8:	mov    eax,ebx
 100b0ca:	mov    rbx,QWORD PTR [rsp+0x30]
 100b0cf:	mov    rsi,QWORD PTR [rsp+0x38]
 100b0d4:	add    rsp,0x20
 100b0d8:	pop    rdi
 100b0d9:	ret    
 100b0da:	int3   
 100b0db:	int3   
 100b0dc:	int3   
 100b0dd:	int3   
 100b0de:	int3   
 100b0df:	int3   
 100b0e0:	mov    QWORD PTR [rcx],0x0
 100b0e7:	ret    
 100b0e8:	int3   
 100b0e9:	int3   
 100b0ea:	int3   
 100b0eb:	int3   
 100b0ec:	int3   
 100b0ed:	int3   
 100b0ee:	int3   
 100b0ef:	int3   
 100b0f0:	mov    rax,QWORD PTR [rcx]
 100b0f3:	ret    
 100b0f4:	int3   
 100b0f5:	int3   
 100b0f6:	int3   
 100b0f7:	int3   
 100b0f8:	int3   
 100b0f9:	int3   
 100b0fa:	int3   
 100b0fb:	int3   
 100b0fc:	int3   
 100b0fd:	int3   
 100b0fe:	int3   
 100b0ff:	int3   
 100b100:	or     r9d,0xffffffff
 100b104:	test   rdx,rdx
 100b107:	mov    r10,rcx
 100b10a:	je     0x100b142
 100b10c:	lea    r11,[rip+0xffffffffffff820d]        # 0x1003320
 100b113:	nop
 100b114:	data16 data16 xchg ax,ax
 100b118:	data16 data16 xchg ax,ax
 100b11c:	data16 data16 xchg ax,ax
 100b120:	movzx  r8d,BYTE PTR [r10]
 100b124:	mov    ecx,r9d
 100b127:	add    r10,0x1
 100b12b:	xor    r8b,r9b
 100b12e:	shr    ecx,0x8
 100b131:	movzx  eax,r8b
 100b135:	mov    r9d,DWORD PTR [r11+rax*4]
 100b139:	xor    r9d,ecx
 100b13c:	sub    rdx,0x1
 100b140:	jne    0x100b120
 100b142:	mov    eax,r9d
 100b145:	ret    
 100b146:	int3   
 100b147:	int3   
 100b148:	int3   
 100b149:	int3   
 100b14a:	int3   
 100b14b:	int3   
 100b14c:	int3   
 100b14d:	int3   
 100b14e:	int3   
 100b14f:	int3   
 100b150:	sub    rsp,0x8
 100b154:	test   rcx,rcx
 100b157:	mov    r8,rcx
 100b15a:	je     0x100b1ba
 100b15c:	mov    QWORD PTR [rsp],rdi
 100b160:	or     rcx,0xffffffffffffffff
 100b164:	xor    eax,eax
 100b166:	mov    rdi,r8
 100b169:	repnz scas ax,WORD PTR es:[rdi]
 100b16c:	mov    edi,0xffffffff
 100b171:	not    rcx
 100b174:	lea    r9,[rcx-0x1]
 100b178:	add    r9,r9
 100b17b:	je     0x100b1af
 100b17d:	lea    r10,[rip+0xffffffffffff819c]        # 0x1003320
 100b184:	data16 data16 xchg ax,ax
 100b188:	data16 data16 xchg ax,ax
 100b18c:	data16 data16 xchg ax,ax
 100b190:	movzx  edx,BYTE PTR [r8]
 100b194:	mov    eax,edi
 100b196:	add    r8,0x1
 100b19a:	xor    dl,dil
 100b19d:	shr    eax,0x8
 100b1a0:	movzx  ecx,dl
 100b1a3:	mov    edi,DWORD PTR [r10+rcx*4]
 100b1a7:	xor    edi,eax
 100b1a9:	sub    r9,0x1
 100b1ad:	jne    0x100b190
 100b1af:	mov    eax,edi
 100b1b1:	mov    rdi,QWORD PTR [rsp]
 100b1b5:	add    rsp,0x8
 100b1b9:	ret    
 100b1ba:	xor    eax,eax
 100b1bc:	add    rsp,0x8
 100b1c0:	ret    
 100b1c1:	int3   
 100b1c2:	int3   
 100b1c3:	int3   
 100b1c4:	int3   
 100b1c5:	int3   
 100b1c6:	int3   
 100b1c7:	int3   
 100b1c8:	int3   
 100b1c9:	int3   
 100b1ca:	int3   
 100b1cb:	int3   
 100b1cc:	int3   
 100b1cd:	int3   
 100b1ce:	int3   
 100b1cf:	int3   
 100b1d0:	xor    eax,eax
 100b1d2:	mov    DWORD PTR [rcx],eax
 100b1d4:	mov    DWORD PTR [rcx+0x4],eax
 100b1d7:	mov    rax,rcx
 100b1da:	ret    
 100b1db:	int3   
 100b1dc:	int3   
 100b1dd:	int3   
 100b1de:	int3   
 100b1df:	int3   
 100b1e0:	int3   
 100b1e1:	int3   
 100b1e2:	int3   
 100b1e3:	int3   
 100b1e4:	int3   
 100b1e5:	int3   
 100b1e6:	int3   
 100b1e7:	int3   
 100b1e8:	int3   
 100b1e9:	int3   
 100b1ea:	int3   
 100b1eb:	int3   
 100b1ec:	int3   
 100b1ed:	int3   
 100b1ee:	int3   
 100b1ef:	int3   
 100b1f0:	mov    edx,DWORD PTR [rcx]
 100b1f2:	xor    eax,eax
 100b1f4:	cmp    edx,0x2
 100b1f7:	sete   al
 100b1fa:	ret    
 100b1fb:	int3   
 100b1fc:	int3   
 100b1fd:	int3   
 100b1fe:	int3   
 100b1ff:	int3   
 100b200:	int3   
 100b201:	int3   
 100b202:	int3   
 100b203:	int3   
 100b204:	int3   
 100b205:	int3   
 100b206:	int3   
 100b207:	int3   
 100b208:	int3   
 100b209:	int3   
 100b20a:	int3   
 100b20b:	int3   
 100b20c:	int3   
 100b20d:	int3   
 100b20e:	int3   
 100b20f:	int3   
 100b210:	mov    eax,DWORD PTR [rcx+0x4]
 100b213:	ret    
 100b214:	int3   
 100b215:	int3   
 100b216:	int3   
 100b217:	int3   
 100b218:	int3   
 100b219:	int3   
 100b21a:	int3   
 100b21b:	int3   
 100b21c:	int3   
 100b21d:	int3   
 100b21e:	int3   
 100b21f:	int3   
 100b220:	rex push rbx
 100b222:	sub    rsp,0x50
 100b226:	lea    rcx,[rip+0xffffffffffff850b]        # 0x1003738
 100b22d:	call   QWORD PTR [rip+0xffffffffffff5fc5]        # 0x10011f8
 100b233:	lea    rdx,[rip+0xffffffffffff84e6]        # 0x1003720
 100b23a:	mov    rcx,rax
 100b23d:	mov    rbx,rax
 100b240:	call   QWORD PTR [rip+0xffffffffffff6042]        # 0x1001288
 100b246:	test   rax,rax
 100b249:	mov    QWORD PTR [rip+0x6f00],rax        # 0x1012150
 100b250:	jne    0x100b25b
 100b252:	mov    rcx,rbx
 100b255:	call   QWORD PTR [rip+0xffffffffffff5e05]        # 0x1001060
 100b25b:	lea    rcx,[rsp+0x20]
 100b260:	call   QWORD PTR [rip+0xffffffffffff5e02]        # 0x1001068
 100b266:	mov    r11d,DWORD PTR [rsp+0x24]
 100b26b:	mov    DWORD PTR [rip+0x6ee6],r11d        # 0x1012158
 100b272:	add    rsp,0x50
 100b276:	pop    rbx
 100b277:	ret    
 100b278:	int3   
 100b279:	int3   
 100b27a:	int3   
 100b27b:	int3   
 100b27c:	int3   
 100b27d:	int3   
 100b27e:	int3   
 100b27f:	int3   
 100b280:	mov    QWORD PTR [rsp+0x18],rsi
 100b285:	push   rdi
 100b286:	sub    rsp,0x60
 100b28a:	test   rcx,rcx
 100b28d:	mov    rsi,rdx
 100b290:	mov    rdi,rcx
 100b293:	jne    0x100b2a5
 100b295:	xor    eax,eax
 100b297:	mov    rsi,QWORD PTR [rsp+0x80]
 100b29f:	add    rsp,0x60
 100b2a3:	pop    rdi
 100b2a4:	ret    
 100b2a5:	mov    QWORD PTR [rsp+0x70],rbx
 100b2aa:	mov    QWORD PTR [rsp+0x78],rbp
 100b2af:	mov    eax,0xee
 100b2b4:	mov    ebp,0xcc
 100b2b9:	test   r8d,r8d
 100b2bc:	mov    rbx,rcx
 100b2bf:	cmovne ebp,eax
 100b2c2:	cmp    QWORD PTR [rip+0x6e86],0x0        # 0x1012150
 100b2ca:	je     0x100b33a
 100b2cc:	mov    QWORD PTR [rsp+0x20],rbx
 100b2d1:	call   QWORD PTR [rip+0xffffffffffff5f89]        # 0x1001260
 100b2d7:	lea    rdx,[rsp+0x20]
 100b2dc:	mov    rcx,rax
 100b2df:	mov    r8d,0x10
 100b2e5:	call   QWORD PTR [rip+0x6e65]        # 0x1012150
 100b2eb:	test   eax,eax
 100b2ed:	je     0x100b33a
 100b2ef:	mov    rax,QWORD PTR [rsp+0x28]
 100b2f4:	test   al,0x1
 100b2f6:	je     0x100b33a
 100b2f8:	shr    rax,0x4
 100b2fc:	and    eax,0x7ff
 100b301:	test   ebp,eax
 100b303:	je     0x100b39f
 100b309:	mov    edx,DWORD PTR [rip+0x6e49]        # 0x1012158
 100b30f:	lea    ecx,[rdx-0x1]
 100b312:	not    rcx
 100b315:	and    rbx,rcx
 100b318:	mov    rcx,rsi
 100b31b:	add    rbx,rdx
 100b31e:	mov    rax,rbx
 100b321:	sub    rax,rdi
 100b324:	cmp    rax,rsi
 100b327:	cmovb  rcx,rax
 100b32b:	add    rdi,rcx
 100b32e:	sub    rsi,rcx
 100b331:	jne    0x100b396
 100b333:	mov    eax,0x1
 100b338:	jmp    0x100b3a1
 100b33a:	lea    rdx,[rsp+0x30]
 100b33f:	mov    r8d,0x30
 100b345:	mov    rcx,rbx
 100b348:	call   QWORD PTR [rip+0xffffffffffff5e22]        # 0x1001170
 100b34e:	cmp    rax,0x30
 100b352:	jne    0x100b39f
 100b354:	mov    rcx,QWORD PTR [rsp+0x30]
 100b359:	mov    rbx,QWORD PTR [rsp+0x48]
 100b35e:	add    rbx,rcx
 100b361:	cmp    rdi,rbx
 100b364:	jae    0x100b396
 100b366:	cmp    DWORD PTR [rsp+0x50],0x1000
 100b36e:	jne    0x100b39f
 100b370:	mov    eax,DWORD PTR [rsp+0x54]
 100b374:	test   ebp,eax
 100b376:	je     0x100b39f
 100b378:	bt     eax,0x8
 100b37c:	jb     0x100b39f
 100b37e:	mov    rcx,rsi
 100b381:	mov    rax,rbx
 100b384:	sub    rax,rdi
 100b387:	cmp    rax,rsi
 100b38a:	cmovb  rcx,rax
 100b38e:	add    rdi,rcx
 100b391:	sub    rsi,rcx
 100b394:	je     0x100b333
 100b396:	cmp    rbx,rdi
 100b399:	jbe    0x100b2c2
 100b39f:	xor    eax,eax
 100b3a1:	mov    rbx,QWORD PTR [rsp+0x70]
 100b3a6:	mov    rbp,QWORD PTR [rsp+0x78]
 100b3ab:	mov    rsi,QWORD PTR [rsp+0x80]
 100b3b3:	add    rsp,0x60
 100b3b7:	pop    rdi
 100b3b8:	ret    
 100b3b9:	int3   
 100b3ba:	int3   
 100b3bb:	int3   
 100b3bc:	int3   
 100b3bd:	int3   
 100b3be:	int3   
 100b3bf:	int3   
 100b3c0:	mov    QWORD PTR [rsp+0x8],rbx
 100b3c5:	mov    QWORD PTR [rsp+0x10],rsi
 100b3ca:	push   rdi
 100b3cb:	sub    rsp,0x30
 100b3cf:	mov    rsi,rcx
 100b3d2:	xor    ebx,ebx
 100b3d4:	mov    DWORD PTR [rsp+0x20],ebx
 100b3d8:	mov    edi,ebx
 100b3da:	cmp    QWORD PTR [rcx],rbx
 100b3dd:	jne    0x100b410
 100b3df:	xor    r8d,r8d
 100b3e2:	mov    edx,0x10000
 100b3e7:	xor    ecx,ecx
 100b3e9:	call   QWORD PTR [rip+0xffffffffffff5c69]        # 0x1001058
 100b3ef:	mov    QWORD PTR [rsi],rax
 100b3f2:	test   rax,rax
 100b3f5:	jne    0x100b410
 100b3f7:	call   QWORD PTR [rip+0xffffffffffff5e43]        # 0x1001240
 100b3fd:	mov    ebx,eax
 100b3ff:	test   eax,eax
 100b401:	jle    0x100b40c
 100b403:	movzx  ebx,ax
 100b406:	or     ebx,0x80070000
 100b40c:	mov    DWORD PTR [rsp+0x20],ebx
 100b410:	jmp    0x100b42f
 100b412:	mov    edi,eax
 100b414:	cmp    eax,0xc00000fd
 100b419:	jne    0x100b421
 100b41b:	call   QWORD PTR [rip+0xffffffffffff5f1f]        # 0x1001340
 100b421:	mov    eax,0x80004005
 100b426:	test   edi,edi
 100b428:	cmovns edi,eax
 100b42b:	mov    ebx,DWORD PTR [rsp+0x20]
 100b42f:	test   ebx,ebx
 100b431:	cmovns ebx,edi
 100b434:	mov    eax,ebx
 100b436:	mov    rbx,QWORD PTR [rsp+0x40]
 100b43b:	mov    rsi,QWORD PTR [rsp+0x48]
 100b440:	add    rsp,0x30
 100b444:	pop    rdi
 100b445:	ret    
 100b446:	int3   
 100b447:	int3   
 100b448:	int3   
 100b449:	int3   
 100b44a:	int3   
 100b44b:	int3   
 100b44c:	int3   
 100b44d:	int3   
 100b44e:	int3   
 100b44f:	int3   
 100b450:	mov    QWORD PTR [rsp+0x8],rbx
 100b455:	push   rdi
 100b456:	sub    rsp,0x20
 100b45a:	mov    rbx,rcx
 100b45d:	mov    edi,0x1
 100b462:	xor    eax,eax
 100b464:	lock cmpxchg DWORD PTR [rcx],edi
 100b468:	jne    0x100b477
 100b46a:	mov    eax,edi
 100b46c:	mov    rbx,QWORD PTR [rsp+0x30]
 100b471:	add    rsp,0x20
 100b475:	pop    rdi
 100b476:	ret    
 100b477:	mov    eax,DWORD PTR [rcx]
 100b479:	cmp    eax,0x2
 100b47c:	je     0x100b491
 100b47e:	xchg   ax,ax
 100b480:	mov    ecx,edi
 100b482:	call   QWORD PTR [rip+0xffffffffffff5d88]        # 0x1001210
 100b488:	mov    r11d,DWORD PTR [rbx]
 100b48b:	cmp    r11d,0x2
 100b48f:	jne    0x100b480
 100b491:	xor    eax,eax
 100b493:	mov    rbx,QWORD PTR [rsp+0x30]
 100b498:	add    rsp,0x20
 100b49c:	pop    rdi
 100b49d:	ret    
 100b49e:	int3   
 100b49f:	int3   
 100b4a0:	int3   
 100b4a1:	int3   
 100b4a2:	int3   
 100b4a3:	int3   
 100b4a4:	int3   
 100b4a5:	int3   
 100b4a6:	int3   
 100b4a7:	int3   
 100b4a8:	int3   
 100b4a9:	int3   
 100b4aa:	int3   
 100b4ab:	int3   
 100b4ac:	int3   
 100b4ad:	int3   
 100b4ae:	int3   
 100b4af:	int3   
 100b4b0:	mov    DWORD PTR [rcx+0x4],edx
 100b4b3:	mov    eax,0x1
 100b4b8:	mov    edx,0x2
 100b4bd:	lock cmpxchg DWORD PTR [rcx],edx
 100b4c1:	ret    
 100b4c2:	int3   
 100b4c3:	int3   
 100b4c4:	int3   
 100b4c5:	int3   
 100b4c6:	int3   
 100b4c7:	int3   
 100b4c8:	int3   
 100b4c9:	int3   
 100b4ca:	int3   
 100b4cb:	int3   
 100b4cc:	int3   
 100b4cd:	int3   
 100b4ce:	int3   
 100b4cf:	int3   
 100b4d0:	mov    QWORD PTR [rsp+0x8],rbx
 100b4d5:	mov    QWORD PTR [rsp+0x18],rbp
 100b4da:	mov    QWORD PTR [rsp+0x20],rsi
 100b4df:	push   rdi
 100b4e0:	sub    rsp,0x30
 100b4e4:	xor    ebp,ebp
 100b4e6:	test   rdx,rdx
 100b4e9:	mov    rbx,r8
 100b4ec:	mov    rdi,rdx
 100b4ef:	mov    rsi,rcx
 100b4f2:	mov    QWORD PTR [rsp+0x48],rbp
 100b4f7:	je     0x100b566
 100b4f9:	test   rcx,rcx
 100b4fc:	je     0x100b566
 100b4fe:	test   rbx,rbx
 100b501:	je     0x100b566
 100b503:	lea    r8d,[rbp+0x1]
 100b507:	mov    rdx,rbx
 100b50a:	mov    rcx,rdi
 100b50d:	call   0x100b280
 100b512:	test   eax,eax
 100b514:	jne    0x100b51d
 100b516:	mov    eax,0x800703e6
 100b51b:	jmp    0x100b56b
 100b51d:	call   QWORD PTR [rip+0xffffffffffff5d3d]        # 0x1001260
 100b523:	mov    r9,rbx
 100b526:	mov    r8,rsi
 100b529:	mov    rcx,rax
 100b52c:	lea    rax,[rsp+0x48]
 100b531:	mov    rdx,rdi
 100b534:	mov    QWORD PTR [rsp+0x20],rax
 100b539:	call   QWORD PTR [rip+0xffffffffffff5b11]        # 0x1001050
 100b53f:	test   eax,eax
 100b541:	je     0x100b552
 100b543:	cmp    QWORD PTR [rsp+0x48],rbx
 100b548:	mov    eax,0x8007012b
 100b54d:	cmove  eax,ebp
 100b550:	jmp    0x100b56b
 100b552:	call   QWORD PTR [rip+0xffffffffffff5ce8]        # 0x1001240
 100b558:	test   eax,eax
 100b55a:	jle    0x100b56b
 100b55c:	movzx  eax,ax
 100b55f:	or     eax,0x80070000
 100b564:	jmp    0x100b56b
 100b566:	mov    eax,0x80070057
 100b56b:	mov    rbx,QWORD PTR [rsp+0x40]
 100b570:	mov    rbp,QWORD PTR [rsp+0x50]
 100b575:	mov    rsi,QWORD PTR [rsp+0x58]
 100b57a:	add    rsp,0x30
 100b57e:	pop    rdi
 100b57f:	ret    
 100b580:	int3   
 100b581:	int3   
 100b582:	int3   
 100b583:	int3   
 100b584:	int3   
 100b585:	int3   
 100b586:	int3   
 100b587:	int3   
 100b588:	int3   
 100b589:	int3   
 100b58a:	int3   
 100b58b:	int3   
 100b58c:	int3   
 100b58d:	int3   
 100b58e:	int3   
 100b58f:	int3   
 100b590:	mov    QWORD PTR [rsp+0x18],r8
 100b595:	mov    QWORD PTR [rsp+0x20],r9
 100b59a:	push   rsi
 100b59b:	push   rdi
 100b59c:	sub    rsp,0x48
 100b5a0:	cmp    rdx,0x7fffffff
 100b5a7:	mov    rsi,rdx
 100b5aa:	mov    rdi,rcx
 100b5ad:	jbe    0x100b5bb
 100b5af:	mov    eax,0x80070057
 100b5b4:	add    rsp,0x48
 100b5b8:	pop    rdi
 100b5b9:	pop    rsi
 100b5ba:	ret    
 100b5bb:	test   rcx,rcx
 100b5be:	mov    QWORD PTR [rsp+0x40],rbx
 100b5c3:	je     0x100b5fb
 100b5c5:	mov    rcx,rdx
 100b5c8:	xor    edx,edx
 100b5ca:	test   rsi,rsi
 100b5cd:	mov    rax,rdi
 100b5d0:	je     0x100b5e1
 100b5d2:	cmp    WORD PTR [rax],dx
 100b5d5:	je     0x100b5ee
 100b5d7:	add    rax,0x2
 100b5db:	sub    rcx,0x1
 100b5df:	jne    0x100b5d2
 100b5e1:	mov    edx,0x80070057
 100b5e6:	xor    ebx,ebx
 100b5e8:	test   edx,edx
 100b5ea:	jns    0x100b602
 100b5ec:	jmp    0x100b600
 100b5ee:	test   rcx,rcx
 100b5f1:	je     0x100b5e1
 100b5f3:	mov    rbx,rsi
 100b5f6:	sub    rbx,rcx
 100b5f9:	jmp    0x100b5e8
 100b5fb:	mov    edx,0x80070057
 100b600:	xor    ebx,ebx
 100b602:	test   edx,edx
 100b604:	js     0x100b6ac
 100b60a:	mov    QWORD PTR [rsp+0x38],rbp
 100b60f:	mov    QWORD PTR [rsp+0x30],r12
 100b614:	lea    r12,[rsp+0x78]
 100b619:	call   0x1004b60
 100b61e:	sub    rsi,rbx
 100b621:	lea    rbp,[rdi+rbx*2]
 100b625:	mov    edi,0x0
 100b62a:	je     0x100b635
 100b62c:	cmp    rsi,0x7fffffff
 100b633:	jbe    0x100b63a
 100b635:	mov    edi,0x80070057
 100b63a:	test   edi,edi
 100b63c:	js     0x100b694
 100b63e:	mov    r8,QWORD PTR [rsp+0x70]
 100b643:	lea    rbx,[rsi-0x1]
 100b647:	mov    r9,rax
 100b64a:	mov    rcx,rbp
 100b64d:	mov    rdx,rbx
 100b650:	xor    edi,edi
 100b652:	mov    QWORD PTR [rsp+0x20],r12
 100b657:	call   QWORD PTR [rip+0xffffffffffff5ceb]        # 0x1001348
 100b65d:	test   eax,eax
 100b65f:	js     0x100b68a
 100b661:	cdqe   
 100b663:	cmp    rax,rbx
 100b666:	ja     0x100b68a
 100b668:	cmp    rax,rbx
 100b66b:	jne    0x100b694
 100b66d:	mov    r12,QWORD PTR [rsp+0x30]
 100b672:	mov    WORD PTR [rbp+rbx*2+0x0],di
 100b677:	mov    rbp,QWORD PTR [rsp+0x38]
 100b67c:	mov    rbx,QWORD PTR [rsp+0x40]
 100b681:	mov    eax,edi
 100b683:	add    rsp,0x48
 100b687:	pop    rdi
 100b688:	pop    rsi
 100b689:	ret    
 100b68a:	mov    WORD PTR [rbp+rbx*2+0x0],di
 100b68f:	mov    edi,0x8007007a
 100b694:	mov    r12,QWORD PTR [rsp+0x30]
 100b699:	mov    rbp,QWORD PTR [rsp+0x38]
 100b69e:	mov    rbx,QWORD PTR [rsp+0x40]
 100b6a3:	mov    eax,edi
 100b6a5:	add    rsp,0x48
 100b6a9:	pop    rdi
 100b6aa:	pop    rsi
 100b6ab:	ret    
 100b6ac:	mov    eax,edx
 100b6ae:	mov    rbx,QWORD PTR [rsp+0x40]
 100b6b3:	add    rsp,0x48
 100b6b7:	pop    rdi
 100b6b8:	pop    rsi
 100b6b9:	ret    
 100b6ba:	int3   
 100b6bb:	int3   
 100b6bc:	int3   
 100b6bd:	int3   
 100b6be:	int3   
 100b6bf:	int3   
 100b6c0:	mov    QWORD PTR [rsp+0x8],rbx
 100b6c5:	mov    QWORD PTR [rsp+0x10],rbp
 100b6ca:	mov    QWORD PTR [rsp+0x18],rsi
 100b6cf:	push   rdi
 100b6d0:	sub    rsp,0x40
 100b6d4:	xor    ebx,ebx
 100b6d6:	test   r9,r9
 100b6d9:	lea    r10d,[r9+r9*1]
 100b6dd:	mov    rdi,r9
 100b6e0:	mov    rsi,r8
 100b6e3:	mov    r11,rdx
 100b6e6:	mov    DWORD PTR [rsp+0x30],r10d
 100b6eb:	mov    rbp,rcx
 100b6ee:	mov    DWORD PTR [rsp+0x68],ebx
 100b6f2:	je     0x100b743
 100b6f4:	cmp    r9,0x7fffffff
 100b6fb:	ja     0x100b743
 100b6fd:	mov    r8,r9
 100b700:	mov    ecx,0x7ffffffe
 100b705:	mov    rdx,rsi
 100b708:	sub    rcx,r9
 100b70b:	lea    r9,[rip+0xffffffffffff5f0e]        # 0x1001620
 100b712:	sub    r9,rsi
 100b715:	lea    rax,[rcx+r8*1]
 100b719:	test   rax,rax
 100b71c:	je     0x100b737
 100b71e:	movzx  eax,WORD PTR [r9+rdx*1]
 100b723:	test   ax,ax
 100b726:	je     0x100b737
 100b728:	mov    WORD PTR [rdx],ax
 100b72b:	add    rdx,0x2
 100b72f:	sub    r8,0x1
 100b733:	jne    0x100b715
 100b735:	jmp    0x100b73c
 100b737:	test   r8,r8
 100b73a:	jne    0x100b740
 100b73c:	sub    rdx,0x2
 100b740:	mov    WORD PTR [rdx],bx
 100b743:	mov    eax,r10d
 100b746:	cmp    rax,rdi
 100b749:	jae    0x100b752
 100b74b:	mov    eax,0x80070057
 100b750:	jmp    0x100b7c1
 100b752:	lea    rax,[rsp+0x30]
 100b757:	lea    r9,[rsp+0x68]
 100b75c:	xor    r8d,r8d
 100b75f:	mov    QWORD PTR [rsp+0x28],rax
 100b764:	mov    rdx,r11
 100b767:	mov    rcx,rbp
 100b76a:	mov    QWORD PTR [rsp+0x20],rsi
 100b76f:	call   QWORD PTR [rip+0xffffffffffff589b]        # 0x1001010
 100b775:	test   eax,eax
 100b777:	jne    0x100b7b0
 100b779:	cmp    DWORD PTR [rsp+0x68],0x1
 100b77e:	jne    0x100b7a9
 100b780:	mov    eax,DWORD PTR [rsp+0x30]
 100b784:	test   al,0x1
 100b786:	jne    0x100b7a9
 100b788:	cmp    eax,0x2
 100b78b:	jb     0x100b7a9
 100b78d:	shr    rax,1
 100b790:	cmp    WORD PTR [rsi+rax*2-0x2],bx
 100b795:	je     0x100b7bf
 100b797:	cmp    rax,rdi
 100b79a:	jae    0x100b7a2
 100b79c:	mov    WORD PTR [rsi+rax*2],bx
 100b7a0:	jmp    0x100b7bf
 100b7a2:	mov    ebx,0x8007007a
 100b7a7:	jmp    0x100b7bf
 100b7a9:	mov    ebx,0x8007000b
 100b7ae:	jmp    0x100b7bf
 100b7b0:	jg     0x100b7b6
 100b7b2:	mov    ebx,eax
 100b7b4:	jmp    0x100b7bf
 100b7b6:	movzx  ebx,ax
 100b7b9:	or     ebx,0x80070000
 100b7bf:	mov    eax,ebx
 100b7c1:	mov    rbx,QWORD PTR [rsp+0x50]
 100b7c6:	mov    rbp,QWORD PTR [rsp+0x58]
 100b7cb:	mov    rsi,QWORD PTR [rsp+0x60]
 100b7d0:	add    rsp,0x40
 100b7d4:	pop    rdi
 100b7d5:	ret    
 100b7d6:	int3   
 100b7d7:	int3   
 100b7d8:	int3   
 100b7d9:	int3   
 100b7da:	int3   
 100b7db:	int3   
 100b7dc:	int3   
 100b7dd:	int3   
 100b7de:	int3   
 100b7df:	int3   
 100b7e0:	mov    rax,r8
 100b7e3:	mov    rcx,rdx
 100b7e6:	mov    r8,r9
 100b7e9:	mov    rdx,rax
 100b7ec:	jmp    0x100b4d0
 100b7f1:	int3   
 100b7f2:	int3   
 100b7f3:	int3   
 100b7f4:	int3   
 100b7f5:	int3   
 100b7f6:	int3   
 100b7f7:	int3   
 100b7f8:	int3   
 100b7f9:	int3   
 100b7fa:	int3   
 100b7fb:	int3   
 100b7fc:	int3   
 100b7fd:	int3   
 100b7fe:	int3   
 100b7ff:	int3   
 100b800:	mov    DWORD PTR [rcx+0x74],edx
 100b803:	xor    eax,eax
 100b805:	ret    
 100b806:	int3   
 100b807:	int3   
 100b808:	int3   
 100b809:	int3   
 100b80a:	int3   
 100b80b:	int3   
 100b80c:	int3   
 100b80d:	int3   
 100b80e:	int3   
 100b80f:	int3   
 100b810:	mov    QWORD PTR [rsp+0x8],rbx
 100b815:	push   rdi
 100b816:	sub    rsp,0x20
 100b81a:	cmp    DWORD PTR [rcx+0x74],0x0
 100b81e:	mov    rdi,rdx
 100b821:	mov    rbx,rcx
 100b824:	je     0x100b864
 100b826:	mov    eax,DWORD PTR [rcx+0xac]
 100b82c:	not    eax
 100b82e:	and    eax,DWORD PTR [rcx+0xa8]
 100b834:	test   al,0x20
 100b836:	jne    0x100b864
 100b838:	call   QWORD PTR [rip+0xffffffffffff5a0a]        # 0x1001248
 100b83e:	cmp    eax,DWORD PTR [rbx+0x74]
 100b841:	je     0x100b864
 100b843:	call   QWORD PTR [rip+0xffffffffffff59ff]        # 0x1001248
 100b849:	cmp    eax,DWORD PTR [rbx+0xa4]
 100b84f:	je     0x100b864
 100b851:	mov    DWORD PTR [rdi],0x0
 100b857:	xor    eax,eax
 100b859:	mov    rbx,QWORD PTR [rsp+0x30]
 100b85e:	add    rsp,0x20
 100b862:	pop    rdi
 100b863:	ret    
 100b864:	mov    rbx,QWORD PTR [rsp+0x30]
 100b869:	mov    DWORD PTR [rdi],0x1
 100b86f:	xor    eax,eax
 100b871:	add    rsp,0x20
 100b875:	pop    rdi
 100b876:	ret    
 100b877:	int3   
 100b878:	int3   
 100b879:	int3   
 100b87a:	int3   
 100b87b:	int3   
 100b87c:	int3   
 100b87d:	int3   
 100b87e:	int3   
 100b87f:	int3   
 100b880:	mov    DWORD PTR [rcx+0x13b0],edx
 100b886:	xor    eax,eax
 100b888:	ret    
 100b889:	int3   
 100b88a:	int3   
 100b88b:	int3   
 100b88c:	int3   
 100b88d:	int3   
 100b88e:	int3   
 100b88f:	int3   
 100b890:	mov    QWORD PTR [rcx+0x90],rdx
 100b897:	xor    eax,eax
 100b899:	ret    
 100b89a:	int3   
 100b89b:	int3   
 100b89c:	int3   
 100b89d:	int3   
 100b89e:	int3   
 100b89f:	int3   
 100b8a0:	mov    QWORD PTR [rcx+0x98],rdx
 100b8a7:	mov    DWORD PTR [rcx+0xa0],r8d
 100b8ae:	xor    eax,eax
 100b8b0:	ret    
 100b8b1:	int3   
 100b8b2:	int3   
 100b8b3:	int3   
 100b8b4:	int3   
 100b8b5:	int3   
 100b8b6:	int3   
 100b8b7:	int3   
 100b8b8:	int3   
 100b8b9:	int3   
 100b8ba:	int3   
 100b8bb:	int3   
 100b8bc:	int3   
 100b8bd:	int3   
 100b8be:	int3   
 100b8bf:	int3   
 100b8c0:	mov    DWORD PTR [rcx+0xb0],edx
 100b8c6:	mov    DWORD PTR [rcx+0xb4],r8d
 100b8cd:	xor    eax,eax
 100b8cf:	ret    
 100b8d0:	int3   
 100b8d1:	int3   
 100b8d2:	int3   
 100b8d3:	int3   
 100b8d4:	int3   
 100b8d5:	int3   
 100b8d6:	int3   
 100b8d7:	int3   
 100b8d8:	int3   
 100b8d9:	int3   
 100b8da:	int3   
 100b8db:	int3   
 100b8dc:	int3   
 100b8dd:	int3   
 100b8de:	int3   
 100b8df:	int3   
 100b8e0:	rex push rbx
 100b8e2:	sub    rsp,0x20
 100b8e6:	mov    rbx,rcx
 100b8e9:	mov    DWORD PTR [rcx+0xa8],edx
 100b8ef:	mov    DWORD PTR [rcx+0xac],r8d
 100b8f6:	mov    rcx,QWORD PTR [rcx+0x10]
 100b8fa:	test   rcx,rcx
 100b8fd:	je     0x100b91c
 100b8ff:	call   0x100a0e0
 100b904:	test   eax,eax
 100b906:	je     0x100b91c
 100b908:	bt     DWORD PTR [rbx+0xac],0x11
 100b910:	jb     0x100b91c
 100b912:	or     DWORD PTR [rbx+0xa8],0x20000
 100b91c:	xor    eax,eax
 100b91e:	add    rsp,0x20
 100b922:	pop    rbx
 100b923:	ret    
 100b924:	int3   
 100b925:	int3   
 100b926:	int3   
 100b927:	int3   
 100b928:	int3   
 100b929:	int3   
 100b92a:	int3   
 100b92b:	int3   
 100b92c:	int3   
 100b92d:	int3   
 100b92e:	int3   
 100b92f:	int3   
 100b930:	mov    QWORD PTR [rcx+0x40],rdx
 100b934:	xor    eax,eax
 100b936:	ret    
 100b937:	int3   
 100b938:	int3   
 100b939:	int3   
 100b93a:	int3   
 100b93b:	int3   
 100b93c:	int3   
 100b93d:	int3   
 100b93e:	int3   
 100b93f:	int3   
 100b940:	mov    QWORD PTR [rcx+0x38],rdx
 100b944:	xor    eax,eax
 100b946:	ret    
 100b947:	int3   
 100b948:	int3   
 100b949:	int3   
 100b94a:	int3   
 100b94b:	int3   
 100b94c:	int3   
 100b94d:	int3   
 100b94e:	int3   
 100b94f:	int3   
 100b950:	mov    DWORD PTR [rcx+0xa4],edx
 100b956:	mov    QWORD PTR [rcx+0x30],r8
 100b95a:	mov    QWORD PTR [rcx+0x28],r9
 100b95e:	xor    eax,eax
 100b960:	ret    
 100b961:	int3   
 100b962:	int3   
 100b963:	int3   
 100b964:	int3   
 100b965:	int3   
 100b966:	int3   
 100b967:	int3   
 100b968:	int3   
 100b969:	int3   
 100b96a:	int3   
 100b96b:	int3   
 100b96c:	int3   
 100b96d:	int3   
 100b96e:	int3   
 100b96f:	int3   
 100b970:	mov    QWORD PTR [rcx+0x80],rdx
 100b977:	xor    eax,eax
 100b979:	ret    
 100b97a:	int3   
 100b97b:	int3   
 100b97c:	int3   
 100b97d:	int3   
 100b97e:	int3   
 100b97f:	int3   
 100b980:	mov    QWORD PTR [rcx+0x50],rdx
 100b984:	xor    eax,eax
 100b986:	ret    
 100b987:	int3   
 100b988:	int3   
 100b989:	int3   
 100b98a:	int3   
 100b98b:	int3   
 100b98c:	int3   
 100b98d:	int3   
 100b98e:	int3   
 100b98f:	int3   
 100b990:	mov    QWORD PTR [rcx+0x48],rdx
 100b994:	xor    eax,eax
 100b996:	ret    
 100b997:	int3   
 100b998:	int3   
 100b999:	int3   
 100b99a:	int3   
 100b99b:	int3   
 100b99c:	int3   
 100b99d:	int3   
 100b99e:	int3   
 100b99f:	int3   
 100b9a0:	mov    QWORD PTR [rcx+0x20],rdx
 100b9a4:	xor    eax,eax
 100b9a6:	ret    
 100b9a7:	int3   
 100b9a8:	int3   
 100b9a9:	int3   
 100b9aa:	int3   
 100b9ab:	int3   
 100b9ac:	int3   
 100b9ad:	int3   
 100b9ae:	int3   
 100b9af:	int3   
 100b9b0:	mov    QWORD PTR [rcx+0x58],rdx
 100b9b4:	xor    eax,eax
 100b9b6:	ret    
 100b9b7:	int3   
 100b9b8:	int3   
 100b9b9:	int3   
 100b9ba:	int3   
 100b9bb:	int3   
 100b9bc:	int3   
 100b9bd:	int3   
 100b9be:	int3   
 100b9bf:	int3   
 100b9c0:	mov    DWORD PTR [rcx+0x88],edx
 100b9c6:	mov    DWORD PTR [rcx+0x8c],r8d
 100b9cd:	xor    eax,eax
 100b9cf:	ret    
 100b9d0:	int3   
 100b9d1:	int3   
 100b9d2:	int3   
 100b9d3:	int3   
 100b9d4:	int3   
 100b9d5:	int3   
 100b9d6:	int3   
 100b9d7:	int3   
 100b9d8:	int3   
 100b9d9:	int3   
 100b9da:	int3   
 100b9db:	int3   
 100b9dc:	int3   
 100b9dd:	int3   
 100b9de:	int3   
 100b9df:	int3   
 100b9e0:	mov    QWORD PTR [rcx+0x60],rdx
 100b9e4:	xor    eax,eax
 100b9e6:	ret    
 100b9e7:	int3   
 100b9e8:	int3   
 100b9e9:	int3   
 100b9ea:	int3   
 100b9eb:	int3   
 100b9ec:	int3   
 100b9ed:	int3   
 100b9ee:	int3   
 100b9ef:	int3   
 100b9f0:	mov    QWORD PTR [rcx+0x68],rdx
 100b9f4:	xor    eax,eax
 100b9f6:	ret    
 100b9f7:	int3   
 100b9f8:	int3   
 100b9f9:	int3   
 100b9fa:	int3   
 100b9fb:	int3   
 100b9fc:	int3   
 100b9fd:	int3   
 100b9fe:	int3   
 100b9ff:	int3   
 100ba00:	mov    QWORD PTR [rcx+0x13c8],rdx
 100ba07:	xor    eax,eax
 100ba09:	ret    
 100ba0a:	int3   
 100ba0b:	int3   
 100ba0c:	int3   
 100ba0d:	int3   
 100ba0e:	int3   
 100ba0f:	int3   
 100ba10:	cmp    DWORD PTR [rcx+0x13c0],0x0
 100ba17:	je     0x100ba36
 100ba19:	cmp    DWORD PTR [rcx+0x13bc],0x0
 100ba20:	jne    0x100ba36
 100ba22:	cmp    DWORD PTR [rcx+0x13b8],0x0
 100ba29:	je     0x100ba36
 100ba2b:	mov    eax,DWORD PTR [rcx+0x13b4]
 100ba31:	mov    DWORD PTR [rdx],eax
 100ba33:	xor    eax,eax
 100ba35:	ret    
 100ba36:	mov    eax,0x80004005
 100ba3b:	ret    
 100ba3c:	int3   
 100ba3d:	int3   
 100ba3e:	int3   
 100ba3f:	int3   
 100ba40:	int3   
 100ba41:	int3   
 100ba42:	int3   
 100ba43:	int3   
 100ba44:	int3   
 100ba45:	int3   
 100ba46:	int3   
 100ba47:	int3   
 100ba48:	int3   
 100ba49:	int3   
 100ba4a:	int3   
 100ba4b:	int3   
 100ba4c:	int3   
 100ba4d:	int3   
 100ba4e:	int3   
 100ba4f:	int3   
 100ba50:	rex push rbx
 100ba52:	sub    rsp,0x20
 100ba56:	xor    r9d,r9d
 100ba59:	lea    rbx,[rip+0xffffffffffff45a0]        # 0x1000000
 100ba60:	mov    r10,r8
 100ba63:	mov    QWORD PTR [r8],r9
 100ba66:	mov    r11,QWORD PTR [rbx+0x1af8]
 100ba6d:	cmp    r11,QWORD PTR [rdx]
 100ba70:	jne    0x100ba84
 100ba72:	mov    r11,QWORD PTR [rbx+0x1b00]
 100ba79:	cmp    r11,QWORD PTR [rdx+0x8]
 100ba7d:	jne    0x100ba84
 100ba7f:	mov    eax,r9d
 100ba82:	jmp    0x100ba89
 100ba84:	sbb    eax,eax
 100ba86:	sbb    eax,0xffffffff
 100ba89:	test   eax,eax
 100ba8b:	jne    0x100ba9e
 100ba8d:	mov    QWORD PTR [r8],rcx
 100ba90:	mov    rax,QWORD PTR [rcx]
 100ba93:	call   QWORD PTR [rax+0x8]
 100ba96:	xor    eax,eax
 100ba98:	add    rsp,0x20
 100ba9c:	pop    rbx
 100ba9d:	ret    
 100ba9e:	mov    r8,QWORD PTR [rbx+0x3778]
 100baa5:	cmp    r8,QWORD PTR [rdx]
 100baa8:	jne    0x100bab7
 100baaa:	mov    r8,QWORD PTR [rbx+0x3780]
 100bab1:	cmp    r8,QWORD PTR [rdx+0x8]
 100bab5:	je     0x100babf
 100bab7:	sbb    eax,eax
 100bab9:	sbb    eax,0xffffffff
 100babc:	mov    r9d,eax
 100babf:	test   r9d,r9d
 100bac2:	jne    0x100bad5
 100bac4:	mov    QWORD PTR [r10],rcx
 100bac7:	mov    rax,QWORD PTR [rcx]
 100baca:	call   QWORD PTR [rax+0x8]
 100bacd:	xor    eax,eax
 100bacf:	add    rsp,0x20
 100bad3:	pop    rbx
 100bad4:	ret    
 100bad5:	mov    eax,0x80004002
 100bada:	add    rsp,0x20
 100bade:	pop    rbx
 100badf:	ret    
 100bae0:	int3   
 100bae1:	int3   
 100bae2:	int3   
 100bae3:	int3   
 100bae4:	int3   
 100bae5:	int3   
 100bae6:	int3   
 100bae7:	int3   
 100bae8:	int3   
 100bae9:	int3   
 100baea:	int3   
 100baeb:	int3   
 100baec:	int3   
 100baed:	int3   
 100baee:	int3   
 100baef:	int3   
 100baf0:	mov    eax,0x1
 100baf5:	lock xadd DWORD PTR [rcx+0x8],eax
 100bafa:	add    eax,0x1
 100bafd:	ret    
 100bafe:	int3   
 100baff:	int3   
 100bb00:	int3   
 100bb01:	int3   
 100bb02:	int3   
 100bb03:	int3   
 100bb04:	int3   
 100bb05:	int3   
 100bb06:	int3   
 100bb07:	int3   
 100bb08:	int3   
 100bb09:	int3   
 100bb0a:	int3   
 100bb0b:	int3   
 100bb0c:	int3   
 100bb0d:	int3   
 100bb0e:	int3   
 100bb0f:	int3   
 100bb10:	rex push rbx
 100bb12:	sub    rsp,0x20
 100bb16:	or     ebx,0xffffffff
 100bb19:	lock xadd DWORD PTR [rcx+0x8],ebx
 100bb1e:	add    ebx,0xffffffff
 100bb21:	jne    0x100bb2f
 100bb23:	mov    rdx,rcx
 100bb26:	mov    rcx,QWORD PTR [rcx+0x10]
 100bb2a:	call   0x100a320
 100bb2f:	mov    eax,ebx
 100bb31:	add    rsp,0x20
 100bb35:	pop    rbx
 100bb36:	ret    
 100bb37:	int3   
 100bb38:	int3   
 100bb39:	int3   
 100bb3a:	int3   
 100bb3b:	int3   
 100bb3c:	int3   
 100bb3d:	int3   
 100bb3e:	int3   
 100bb3f:	int3   
 100bb40:	mov    QWORD PTR [rsp+0x8],rbx
 100bb45:	mov    QWORD PTR [rsp+0x10],rbp
 100bb4a:	mov    QWORD PTR [rsp+0x18],rsi
 100bb4f:	push   rdi
 100bb50:	sub    rsp,0x20
 100bb54:	mov    ebx,DWORD PTR [rcx+0x228]
 100bb5a:	mov    edx,0x220
 100bb5f:	mov    rbp,rcx
 100bb62:	call   0x100b100
 100bb67:	xor    esi,esi
 100bb69:	test   ebx,ebx
 100bb6b:	lea    edi,[rbx+rax*1]
 100bb6e:	je     0x100bb97
 100bb70:	mov    ecx,esi
 100bb72:	mov    edx,0xb3c
 100bb77:	imul   rcx,rcx,0xb3c
 100bb7e:	add    rcx,QWORD PTR [rbp+0x220]
 100bb85:	call   0x100b100
 100bb8a:	add    esi,0x1
 100bb8d:	add    edi,eax
 100bb8f:	cmp    esi,DWORD PTR [rbp+0x228]
 100bb95:	jb     0x100bb70
 100bb97:	mov    rbx,QWORD PTR [rsp+0x30]
 100bb9c:	mov    rbp,QWORD PTR [rsp+0x38]
 100bba1:	mov    rsi,QWORD PTR [rsp+0x40]
 100bba6:	mov    eax,edi
 100bba8:	add    rsp,0x20
 100bbac:	pop    rdi
 100bbad:	ret    
 100bbae:	int3   
 100bbaf:	int3   
 100bbb0:	int3   
 100bbb1:	int3   
 100bbb2:	int3   
 100bbb3:	int3   
 100bbb4:	int3   
 100bbb5:	int3   
 100bbb6:	int3   
 100bbb7:	int3   
 100bbb8:	int3   
 100bbb9:	int3   
 100bbba:	int3   
 100bbbb:	int3   
 100bbbc:	int3   
 100bbbd:	int3   
 100bbbe:	int3   
 100bbbf:	int3   
 100bbc0:	mov    QWORD PTR [rsp+0x8],rbx
 100bbc5:	push   rdi
 100bbc6:	sub    rsp,0x20
 100bbca:	mov    rbx,rcx
 100bbcd:	mov    rcx,QWORD PTR [rcx+0x10]
 100bbd1:	mov    rdi,rdx
 100bbd4:	test   rcx,rcx
 100bbd7:	je     0x100bbe7
 100bbd9:	mov    rax,QWORD PTR [rcx]
 100bbdc:	call   QWORD PTR [rax+0x10]
 100bbdf:	mov    QWORD PTR [rbx+0x10],0x0
 100bbe7:	mov    QWORD PTR [rbx+0x10],rdi
 100bbeb:	mov    rax,QWORD PTR [rdi]
 100bbee:	mov    rcx,rdi
 100bbf1:	call   QWORD PTR [rax+0x8]
 100bbf4:	mov    rcx,QWORD PTR [rbx+0x10]
 100bbf8:	call   0x1009fa0
 100bbfd:	mov    rcx,QWORD PTR [rbx+0x10]
 100bc01:	mov    QWORD PTR [rbx+0x1370],rax
 100bc08:	call   0x1009fa0
 100bc0d:	mov    QWORD PTR [rbx+0x1398],rax
 100bc14:	mov    rbx,QWORD PTR [rsp+0x30]
 100bc19:	add    rsp,0x20
 100bc1d:	pop    rdi
 100bc1e:	ret    
 100bc1f:	int3   
 100bc20:	int3   
 100bc21:	int3   
 100bc22:	int3   
 100bc23:	int3   
 100bc24:	int3   
 100bc25:	int3   
 100bc26:	int3   
 100bc27:	int3   
 100bc28:	int3   
 100bc29:	int3   
 100bc2a:	int3   
 100bc2b:	int3   
 100bc2c:	int3   
 100bc2d:	int3   
 100bc2e:	int3   
 100bc2f:	int3   
 100bc30:	test   rdx,rdx
 100bc33:	jne    0x100bc3b
 100bc35:	mov    eax,0x80070057
 100bc3a:	ret    
 100bc3b:	mov    eax,DWORD PTR [rcx+0xa4]
 100bc41:	test   eax,eax
 100bc43:	je     0x100bc4f
 100bc45:	bt     DWORD PTR [rcx+0xa8],0x15
 100bc4d:	jae    0x100bc52
 100bc4f:	mov    eax,DWORD PTR [rcx+0x74]
 100bc52:	mov    DWORD PTR [rdx],eax
 100bc54:	xor    eax,eax
 100bc56:	ret    
 100bc57:	int3   
 100bc58:	int3   
 100bc59:	int3   
 100bc5a:	int3   
 100bc5b:	int3   
 100bc5c:	int3   
 100bc5d:	int3   
 100bc5e:	int3   
 100bc5f:	int3   
 100bc60:	mov    QWORD PTR [rsp+0x18],rbx
 100bc65:	mov    QWORD PTR [rsp+0x20],rsi
 100bc6a:	mov    QWORD PTR [rsp+0x8],rcx
 100bc6f:	push   rdi
 100bc70:	push   r12
 100bc72:	push   r13
 100bc74:	sub    rsp,0x20
 100bc78:	mov    rsi,rcx
 100bc7b:	xor    r12d,r12d
 100bc7e:	mov    ebx,r12d
 100bc81:	mov    r13d,r12d
 100bc84:	mov    rax,QWORD PTR [rcx+0x18]
 100bc88:	mov    rdx,QWORD PTR [rax]
 100bc8b:	xchg   ax,ax
 100bc8d:	data16 xchg ax,ax
 100bc90:	test   rdx,rdx
 100bc93:	je     0x100bca6
 100bc95:	mov    rdi,QWORD PTR [rdx]
 100bc98:	mov    rcx,QWORD PTR [rsi+0x10]
 100bc9c:	call   0x100afd0
 100bca1:	mov    rdx,rdi
 100bca4:	jmp    0x100bc90
 100bca6:	jmp    0x100bccf
 100bca8:	mov    r13d,eax
 100bcab:	cmp    eax,0xc00000fd
 100bcb0:	jne    0x100bcb8
 100bcb2:	call   QWORD PTR [rip+0xffffffffffff5688]        # 0x1001340
 100bcb8:	mov    ecx,0x80004005
 100bcbd:	test   r13d,r13d
 100bcc0:	cmovns r13d,ecx
 100bcc4:	xor    r12d,r12d
 100bcc7:	mov    rsi,QWORD PTR [rsp+0x40]
 100bccc:	mov    ebx,r12d
 100bccf:	test   ebx,ebx
 100bcd1:	cmovns ebx,r13d
 100bcd5:	mov    DWORD PTR [rsp+0x48],ebx
 100bcd9:	mov    rax,QWORD PTR [rsi+0x18]
 100bcdd:	mov    QWORD PTR [rax],r12
 100bce0:	mov    rax,QWORD PTR [rsi+0x18]
 100bce4:	mov    QWORD PTR [rsi+0x20],rax
 100bce8:	jmp    0x100bd0a
 100bcea:	mov    ebx,eax
 100bcec:	cmp    eax,0xc00000fd
 100bcf1:	jne    0x100bcf9
 100bcf3:	call   QWORD PTR [rip+0xffffffffffff5647]        # 0x1001340
 100bcf9:	mov    ecx,0x80004005
 100bcfe:	test   ebx,ebx
 100bd00:	cmovns ebx,ecx
 100bd03:	mov    r12d,ebx
 100bd06:	mov    ebx,DWORD PTR [rsp+0x48]
 100bd0a:	test   ebx,ebx
 100bd0c:	cmovns ebx,r12d
 100bd10:	mov    eax,ebx
 100bd12:	mov    rbx,QWORD PTR [rsp+0x50]
 100bd17:	mov    rsi,QWORD PTR [rsp+0x58]
 100bd1c:	add    rsp,0x20
 100bd20:	pop    r13
 100bd22:	pop    r12
 100bd24:	pop    rdi
 100bd25:	ret    
 100bd26:	int3   
 100bd27:	int3   
 100bd28:	int3   
 100bd29:	int3   
 100bd2a:	int3   
 100bd2b:	int3   
 100bd2c:	int3   
 100bd2d:	int3   
 100bd2e:	int3   
 100bd2f:	int3   
 100bd30:	mov    QWORD PTR [rsp+0x8],rbx
 100bd35:	mov    QWORD PTR [rsp+0x10],rdi
 100bd3a:	xor    r10d,r10d
 100bd3d:	test   rdx,rdx
 100bd40:	mov    rbx,r8
 100bd43:	mov    r11,rdx
 100bd46:	mov    rdi,rcx
 100bd49:	mov    r9d,r10d
 100bd4c:	je     0x100bd57
 100bd4e:	cmp    rdx,0x7fffffff
 100bd55:	jbe    0x100bd5d
 100bd57:	mov    r9d,0x80070057
 100bd5d:	test   r9d,r9d
 100bd60:	js     0x100bd86
 100bd62:	test   rdx,rdx
 100bd65:	mov    rcx,rdx
 100bd68:	mov    rax,rdi
 100bd6b:	mov    r9d,r10d
 100bd6e:	je     0x100bd80
 100bd70:	cmp    WORD PTR [rax],r9w
 100bd74:	je     0x100bdc9
 100bd76:	add    rax,0x2
 100bd7a:	sub    rcx,0x1
 100bd7e:	jne    0x100bd70
 100bd80:	mov    r9d,0x80070057
 100bd86:	mov    r8,r10
 100bd89:	test   r9d,r9d
 100bd8c:	js     0x100bdf8
 100bd8e:	sub    rdx,r8
 100bd91:	lea    rcx,[rdi+r8*2]
 100bd95:	je     0x100bddb
 100bd97:	mov    rax,rdx
 100bd9a:	sub    rax,r11
 100bd9d:	sub    rbx,rcx
 100bda0:	lea    r8,[rax+r8*1+0x7fffffff]
 100bda8:	test   r8,r8
 100bdab:	je     0x100bdd6
 100bdad:	movzx  eax,WORD PTR [rbx+rcx*1]
 100bdb1:	test   ax,ax
 100bdb4:	je     0x100bdd6
 100bdb6:	mov    WORD PTR [rcx],ax
 100bdb9:	add    rcx,0x2
 100bdbd:	sub    r8,0x1
 100bdc1:	sub    rdx,0x1
 100bdc5:	jne    0x100bda8
 100bdc7:	jmp    0x100bddb
 100bdc9:	test   rcx,rcx
 100bdcc:	je     0x100bd80
 100bdce:	mov    r8,rdx
 100bdd1:	sub    r8,rcx
 100bdd4:	jmp    0x100bd89
 100bdd6:	test   rdx,rdx
 100bdd9:	jne    0x100bde5
 100bddb:	sub    rcx,0x2
 100bddf:	mov    r10d,0x8007007a
 100bde5:	mov    WORD PTR [rcx],0x0
 100bdea:	mov    eax,r10d
 100bded:	mov    rbx,QWORD PTR [rsp+0x8]
 100bdf2:	mov    rdi,QWORD PTR [rsp+0x10]
 100bdf7:	ret    
 100bdf8:	mov    rbx,QWORD PTR [rsp+0x8]
 100bdfd:	mov    rdi,QWORD PTR [rsp+0x10]
 100be02:	mov    eax,r9d
 100be05:	ret    
 100be06:	int3   
 100be07:	int3   
 100be08:	int3   
 100be09:	int3   
 100be0a:	int3   
 100be0b:	int3   
 100be0c:	int3   
 100be0d:	int3   
 100be0e:	int3   
 100be0f:	int3   
 100be10:	rex push rbx
 100be12:	sub    rsp,0x20
 100be16:	mov    rbx,rcx
 100be19:	add    rcx,0x1360
 100be20:	call   0x100bc60
 100be25:	test   eax,eax
 100be27:	jne    0x100be35
 100be29:	lea    rcx,[rbx+0x1388]
 100be30:	call   0x100bc60
 100be35:	add    rsp,0x20
 100be39:	pop    rbx
 100be3a:	ret    
 100be3b:	int3   
 100be3c:	int3   
 100be3d:	int3   
 100be3e:	int3   
 100be3f:	int3   
 100be40:	int3   
 100be41:	int3   
 100be42:	int3   
 100be43:	int3   
 100be44:	int3   
 100be45:	int3   
 100be46:	int3   
 100be47:	int3   
 100be48:	int3   
 100be49:	int3   
 100be4a:	int3   
 100be4b:	int3   
 100be4c:	int3   
 100be4d:	int3   
 100be4e:	int3   
 100be4f:	int3   
 100be50:	mov    QWORD PTR [rsp+0x8],rbx
 100be55:	mov    DWORD PTR [rcx+0x22c],edx
 100be5b:	lea    rdx,[rcx+0x14]
 100be5f:	mov    rbx,r9
 100be62:	xor    r11d,r11d
 100be65:	mov    r9,rcx
 100be68:	mov    r10d,0x105
 100be6e:	sub    r8,rdx
 100be71:	lea    rax,[r10+0x7ffffef9]
 100be78:	test   rax,rax
 100be7b:	je     0x100be96
 100be7d:	movzx  eax,WORD PTR [r8+rdx*1]
 100be82:	test   ax,ax
 100be85:	je     0x100be96
 100be87:	mov    WORD PTR [rdx],ax
 100be8a:	add    rdx,0x2
 100be8e:	sub    r10,0x1
 100be92:	jne    0x100be71
 100be94:	jmp    0x100be9b
 100be96:	test   r10,r10
 100be99:	jne    0x100bea5
 100be9b:	sub    rdx,0x2
 100be9f:	mov    r11d,0x8007007a
 100bea5:	test   r11d,r11d
 100bea8:	mov    WORD PTR [rdx],0x0
 100bead:	mov    eax,r11d
 100beb0:	jne    0x100bed8
 100beb2:	mov    ecx,DWORD PTR [rbx]
 100beb4:	mov    DWORD PTR [r9],ecx
 100beb7:	mov    ecx,DWORD PTR [rbx+0x4]
 100beba:	mov    DWORD PTR [r9+0x4],ecx
 100bebe:	mov    ecx,DWORD PTR [rbx+0x8]
 100bec1:	mov    DWORD PTR [r9+0x8],ecx
 100bec5:	mov    ecx,DWORD PTR [rbx+0xc]
 100bec8:	mov    DWORD PTR [r9+0xc],ecx
 100becc:	mov    rcx,QWORD PTR [rsp+0x28]
 100bed1:	mov    QWORD PTR [r9+0x220],rcx
 100bed8:	mov    rbx,QWORD PTR [rsp+0x8]
 100bedd:	ret    
 100bede:	int3   
 100bedf:	int3   
 100bee0:	int3   
 100bee1:	int3   
 100bee2:	int3   
 100bee3:	int3   
 100bee4:	int3   
 100bee5:	int3   
 100bee6:	int3   
 100bee7:	int3   
 100bee8:	int3   
 100bee9:	int3   
 100beea:	int3   
 100beeb:	int3   
 100beec:	int3   
 100beed:	int3   
 100beee:	int3   
 100beef:	int3   
 100bef0:	rex push rsi
 100bef2:	mov    eax,DWORD PTR [rcx+0x228]
 100bef8:	movzx  esi,r9w
 100befc:	mov    r11,r8
 100beff:	cmp    eax,DWORD PTR [rcx+0x22c]
 100bf05:	mov    r10,rdx
 100bf08:	jne    0x100bf11
 100bf0a:	mov    eax,0x80004005
 100bf0f:	pop    rsi
 100bf10:	ret    
 100bf11:	mov    QWORD PTR [rsp+0x10],rbx
 100bf16:	mov    QWORD PTR [rsp+0x18],rdi
 100bf1b:	mov    rdi,rax
 100bf1e:	add    eax,0x1
 100bf21:	xor    ebx,ebx
 100bf23:	mov    edx,0x105
 100bf28:	imul   rdi,rdi,0xb3c
 100bf2f:	add    rdi,QWORD PTR [rcx+0x220]
 100bf36:	mov    DWORD PTR [rcx+0x228],eax
 100bf3c:	mov    r8,rdx
 100bf3f:	lea    rcx,[rdi+0x6]
 100bf43:	mov    r9d,ebx
 100bf46:	sub    r10,rcx
 100bf49:	data16 xchg ax,ax
 100bf4c:	data16 data16 xchg ax,ax
 100bf50:	lea    rax,[r8+0x7ffffef9]
 100bf57:	test   rax,rax
 100bf5a:	je     0x100bf75
 100bf5c:	movzx  eax,WORD PTR [r10+rcx*1]
 100bf61:	test   ax,ax
 100bf64:	je     0x100bf75
 100bf66:	mov    WORD PTR [rcx],ax
 100bf69:	add    rcx,0x2
 100bf6d:	sub    r8,0x1
 100bf71:	jne    0x100bf50
 100bf73:	jmp    0x100bf7a
 100bf75:	test   r8,r8
 100bf78:	jne    0x100bf84
 100bf7a:	sub    rcx,0x2
 100bf7e:	mov    r9d,0x8007007a
 100bf84:	mov    WORD PTR [rcx],bx
 100bf87:	lea    rcx,[rdi+0x316]
 100bf8e:	sub    r11,rcx
 100bf91:	lea    rax,[rdx+0x7ffffef9]
 100bf98:	test   rax,rax
 100bf9b:	je     0x100bfb6
 100bf9d:	movzx  eax,WORD PTR [r11+rcx*1]
 100bfa2:	test   ax,ax
 100bfa5:	je     0x100bfb6
 100bfa7:	mov    WORD PTR [rcx],ax
 100bfaa:	add    rcx,0x2
 100bfae:	sub    rdx,0x1
 100bfb2:	jne    0x100bf91
 100bfb4:	jmp    0x100bfbb
 100bfb6:	test   rdx,rdx
 100bfb9:	jne    0x100bfc4
 100bfbb:	sub    rcx,0x2
 100bfbf:	mov    ebx,0x8007007a
 100bfc4:	test   r9d,r9d
 100bfc7:	mov    WORD PTR [rcx],0x0
 100bfcc:	mov    WORD PTR [rdi+0x4],si
 100bfd0:	mov    rdi,QWORD PTR [rsp+0x18]
 100bfd5:	cmovns r9d,ebx
 100bfd9:	mov    rbx,QWORD PTR [rsp+0x10]
 100bfde:	mov    eax,r9d
 100bfe1:	pop    rsi
 100bfe2:	ret    
 100bfe3:	int3   
 100bfe4:	int3   
 100bfe5:	int3   
 100bfe6:	int3   
 100bfe7:	int3   
 100bfe8:	int3   
 100bfe9:	int3   
 100bfea:	int3   
 100bfeb:	int3   
 100bfec:	int3   
 100bfed:	int3   
 100bfee:	int3   
 100bfef:	int3   
 100bff0:	mov    QWORD PTR [rsp+0x8],rbx
 100bff5:	mov    QWORD PTR [rsp+0x10],rsi
 100bffa:	mov    QWORD PTR [rsp+0x18],rdi
 100bfff:	mov    QWORD PTR [rsp+0x20],r12
 100c004:	push   r13
 100c006:	sub    rsp,0x40
 100c00a:	mov    r12,r9
 100c00d:	mov    r13,r8
 100c010:	mov    edi,edx
 100c012:	mov    rsi,rcx
 100c015:	xor    ebx,ebx
 100c017:	mov    DWORD PTR [rsp+0x30],ebx
 100c01b:	mov    rcx,QWORD PTR [rcx+0x10]
 100c01f:	call   0x1009fa0
 100c024:	mov    rcx,rax
 100c027:	mov    eax,0xb3c
 100c02c:	mul    rdi
 100c02f:	mov    rdx,0xffffffffffffffff
 100c036:	cmovo  rax,rdx
 100c03a:	mov    rdx,rax
 100c03d:	call   0x100af70
 100c042:	test   rax,rax
 100c045:	jne    0x100c052
 100c047:	mov    eax,0x8007000e
 100c04c:	mov    DWORD PTR [rsp+0x30],eax
 100c050:	jmp    0x100c06f
 100c052:	lea    rcx,[rsi+0x1120]
 100c059:	mov    QWORD PTR [rsp+0x20],rax
 100c05e:	mov    r9,r12
 100c061:	mov    r8,r13
 100c064:	mov    edx,edi
 100c066:	call   0x100be50
 100c06b:	mov    DWORD PTR [rsp+0x30],eax
 100c06f:	jmp    0x100c08e
 100c071:	mov    ebx,eax
 100c073:	cmp    eax,0xc00000fd
 100c078:	jne    0x100c080
 100c07a:	call   QWORD PTR [rip+0xffffffffffff52c0]        # 0x1001340
 100c080:	mov    eax,0x80004005
 100c085:	test   ebx,ebx
 100c087:	cmovns ebx,eax
 100c08a:	mov    eax,DWORD PTR [rsp+0x30]
 100c08e:	test   eax,eax
 100c090:	cmovns eax,ebx
 100c093:	mov    rbx,QWORD PTR [rsp+0x50]
 100c098:	mov    rsi,QWORD PTR [rsp+0x58]
 100c09d:	mov    rdi,QWORD PTR [rsp+0x60]
 100c0a2:	mov    r12,QWORD PTR [rsp+0x68]
 100c0a7:	add    rsp,0x40
 100c0ab:	pop    r13
 100c0ad:	ret    
 100c0ae:	int3   
 100c0af:	int3   
 100c0b0:	int3   
 100c0b1:	int3   
 100c0b2:	int3   
 100c0b3:	int3   
 100c0b4:	int3   
 100c0b5:	int3   
 100c0b6:	int3   
 100c0b7:	int3   
 100c0b8:	int3   
 100c0b9:	int3   
 100c0ba:	int3   
 100c0bb:	int3   
 100c0bc:	int3   
 100c0bd:	int3   
 100c0be:	int3   
 100c0bf:	int3   
 100c0c0:	mov    QWORD PTR [rsp+0x18],rbp
 100c0c5:	mov    QWORD PTR [rsp+0x20],rsi
 100c0ca:	push   rdi
 100c0cb:	sub    rsp,0x20
 100c0cf:	cmp    DWORD PTR [rcx+0x13b8],0x0
 100c0d6:	mov    rsi,r8
 100c0d9:	mov    rbp,rdx
 100c0dc:	mov    rdi,rcx
 100c0df:	jne    0x100c0f3
 100c0e1:	xor    eax,eax
 100c0e3:	mov    rbp,QWORD PTR [rsp+0x40]
 100c0e8:	mov    rsi,QWORD PTR [rsp+0x48]
 100c0ed:	add    rsp,0x20
 100c0f1:	pop    rdi
 100c0f2:	ret    
 100c0f3:	mov    r9d,DWORD PTR [rcx+0x13b4]
 100c0fa:	lea    r8,[rip+0xffffffffffff785f]        # 0x1003960
 100c101:	mov    rdx,rsi
 100c104:	mov    rcx,rbp
 100c107:	call   0x100b590
 100c10c:	test   eax,eax
 100c10e:	mov    r11d,eax
 100c111:	js     0x100c1c1
 100c117:	mov    eax,DWORD PTR [rdi+0x13b4]
 100c11d:	cmp    eax,0x20000001
 100c122:	jne    0x100c145
 100c124:	lea    r8,[rip+0xffffffffffff77d5]        # 0x1003900
 100c12b:	mov    rdx,rsi
 100c12e:	mov    rcx,rbp
 100c131:	mov    rbp,QWORD PTR [rsp+0x40]
 100c136:	mov    rsi,QWORD PTR [rsp+0x48]
 100c13b:	add    rsp,0x20
 100c13f:	pop    rdi
 100c140:	jmp    0x100bd30
 100c145:	test   eax,eax
 100c147:	jne    0x100c16a
 100c149:	lea    r8,[rip+0xffffffffffff7720]        # 0x1003870
 100c150:	mov    rdx,rsi
 100c153:	mov    rcx,rbp
 100c156:	mov    rbp,QWORD PTR [rsp+0x40]
 100c15b:	mov    rsi,QWORD PTR [rsp+0x48]
 100c160:	add    rsp,0x20
 100c164:	pop    rdi
 100c165:	jmp    0x100bd30
 100c16a:	mov    QWORD PTR [rsp+0x30],rbx
 100c16f:	mov    QWORD PTR [rsp+0x38],r12
 100c174:	lea    r12,[rip+0xffffffffffff7615]        # 0x1003790
 100c17b:	xor    ebx,ebx
 100c17d:	data16 xchg ax,ax
 100c180:	mov    ecx,DWORD PTR [rbx+r12*1]
 100c184:	mov    eax,ecx
 100c186:	and    eax,DWORD PTR [rdi+0x13b4]
 100c18c:	cmp    ecx,eax
 100c18e:	jne    0x100c1a7
 100c190:	mov    r8,QWORD PTR [rbx+r12*1+0x8]
 100c195:	mov    rdx,rsi
 100c198:	mov    rcx,rbp
 100c19b:	call   0x100bd30
 100c1a0:	test   eax,eax
 100c1a2:	mov    r11d,eax
 100c1a5:	js     0x100c1b7
 100c1a7:	add    rbx,0x10
 100c1ab:	cmp    rbx,0xe0
 100c1b2:	jb     0x100c180
 100c1b4:	mov    eax,r11d
 100c1b7:	mov    rbx,QWORD PTR [rsp+0x30]
 100c1bc:	mov    r12,QWORD PTR [rsp+0x38]
 100c1c1:	mov    rbp,QWORD PTR [rsp+0x40]
 100c1c6:	mov    rsi,QWORD PTR [rsp+0x48]
 100c1cb:	add    rsp,0x20
 100c1cf:	pop    rdi
 100c1d0:	ret    
 100c1d1:	int3   
 100c1d2:	int3   
 100c1d3:	int3   
 100c1d4:	int3   
 100c1d5:	int3   
 100c1d6:	int3   
 100c1d7:	int3   
 100c1d8:	int3   
 100c1d9:	int3   
 100c1da:	int3   
 100c1db:	int3   
 100c1dc:	int3   
 100c1dd:	int3   
 100c1de:	int3   
 100c1df:	int3   
 100c1e0:	mov    QWORD PTR [rsp+0x8],rbx
 100c1e5:	push   rdi
 100c1e6:	sub    rsp,0x30
 100c1ea:	xor    edi,edi
 100c1ec:	mov    rbx,QWORD PTR [rcx+0x18]
 100c1f0:	mov    QWORD PTR [rsp+0x20],rbx
 100c1f5:	test   rbx,rbx
 100c1f8:	je     0x100c21a
 100c1fa:	lea    rcx,[rbx+0xc]
 100c1fe:	mov    edx,DWORD PTR [rcx]
 100c200:	shl    rdx,0x4
 100c204:	add    rdx,0xc
 100c208:	call   0x100b100
 100c20d:	mov    DWORD PTR [rbx+0x8],eax
 100c210:	mov    rbx,QWORD PTR [rbx]
 100c213:	mov    QWORD PTR [rsp+0x20],rbx
 100c218:	jmp    0x100c1f5
 100c21a:	jmp    0x100c235
 100c21c:	mov    edi,eax
 100c21e:	cmp    eax,0xc00000fd
 100c223:	jne    0x100c22b
 100c225:	call   QWORD PTR [rip+0xffffffffffff5115]        # 0x1001340
 100c22b:	mov    eax,0x80004005
 100c230:	test   edi,edi
 100c232:	cmovns edi,eax
 100c235:	mov    eax,edi
 100c237:	mov    rbx,QWORD PTR [rsp+0x40]
 100c23c:	add    rsp,0x30
 100c240:	pop    rdi
 100c241:	ret    
 100c242:	int3   
 100c243:	int3   
 100c244:	int3   
 100c245:	int3   
 100c246:	int3   
 100c247:	int3   
 100c248:	int3   
 100c249:	int3   
 100c24a:	int3   
 100c24b:	int3   
 100c24c:	int3   
 100c24d:	int3   
 100c24e:	int3   
 100c24f:	int3   
 100c250:	mov    QWORD PTR [rsp+0x8],rbx
 100c255:	push   rdi
 100c256:	sub    rsp,0x20
 100c25a:	xor    edi,edi
 100c25c:	mov    DWORD PTR [rcx],0x2
 100c262:	mov    rbx,rcx
 100c265:	mov    DWORD PTR [rcx+0x4],edi
 100c268:	mov    QWORD PTR [rcx+0x8],rdi
 100c26c:	mov    QWORD PTR [rcx+0x10],rdi
 100c270:	mov    QWORD PTR [rcx+0x18],rdi
 100c274:	mov    QWORD PTR [rcx+0x20],rdi
 100c278:	mov    QWORD PTR [rcx+0x28],rdi
 100c27c:	mov    QWORD PTR [rcx+0x30],rdi
 100c280:	mov    QWORD PTR [rcx+0x38],rdi
 100c284:	mov    QWORD PTR [rcx+0x40],rdi
 100c288:	mov    QWORD PTR [rcx+0x48],rdi
 100c28c:	mov    QWORD PTR [rcx+0x50],rdi
 100c290:	mov    DWORD PTR [rcx+0x58],edi
 100c293:	mov    DWORD PTR [rcx+0x5c],edi
 100c296:	mov    DWORD PTR [rcx+0x60],edi
 100c299:	mov    DWORD PTR [rcx+0x64],edi
 100c29c:	mov    QWORD PTR [rcx+0x68],rdi
 100c2a0:	mov    QWORD PTR [rcx+0x78],rdi
 100c2a4:	mov    QWORD PTR [rcx+0x80],rdi
 100c2ab:	mov    DWORD PTR [rcx+0x88],edi
 100c2b1:	mov    DWORD PTR [rcx+0x8c],edi
 100c2b7:	mov    DWORD PTR [rcx+0x90],edi
 100c2bd:	mov    DWORD PTR [rcx+0x94],edi
 100c2c3:	mov    DWORD PTR [rcx+0x98],edi
 100c2c9:	mov    DWORD PTR [rcx+0x9c],edi
 100c2cf:	mov    DWORD PTR [rcx+0xa0],edi
 100c2d5:	mov    DWORD PTR [rcx+0xa4],edi
 100c2db:	mov    DWORD PTR [rcx+0xa8],edi
 100c2e1:	mov    DWORD PTR [rcx+0xac],edi
 100c2e7:	mov    DWORD PTR [rcx+0xb0],edi
 100c2ed:	mov    DWORD PTR [rcx+0xb4],edi
 100c2f3:	mov    DWORD PTR [rcx+0xb8],edi
 100c2f9:	mov    DWORD PTR [rcx+0xbc],edi
 100c2ff:	mov    DWORD PTR [rcx+0xc4],edi
 100c305:	mov    DWORD PTR [rcx+0xc8],edi
 100c30b:	mov    DWORD PTR [rcx+0xcc],edi
 100c311:	mov    QWORD PTR [rcx+0xd0],rdi
 100c318:	mov    DWORD PTR [rcx+0xd8],edi
 100c31e:	mov    DWORD PTR [rcx+0xdc],edi
 100c324:	mov    DWORD PTR [rcx+0xe0],0x80
 100c32e:	mov    DWORD PTR [rcx+0xe4],edi
 100c334:	add    rcx,0xe8
 100c33b:	xor    edx,edx
 100c33d:	mov    r8d,0x800
 100c343:	call   0x1005982
 100c348:	lea    rcx,[rbx+0x900]
 100c34f:	xor    edx,edx
 100c351:	mov    r8d,0x800
 100c357:	mov    QWORD PTR [rbx+0x8e8],rdi
 100c35e:	mov    DWORD PTR [rbx+0x8f0],edi
 100c364:	mov    DWORD PTR [rbx+0x8f4],edi
 100c36a:	mov    DWORD PTR [rbx+0x8f8],0x80
 100c374:	mov    DWORD PTR [rbx+0x8fc],edi
 100c37a:	call   0x1005982
 100c37f:	lea    rcx,[rbx+0x1108]
 100c386:	xor    edx,edx
 100c388:	mov    r8d,0x230
 100c38e:	call   0x1005982
 100c393:	mov    DWORD PTR [rbx+0x70],edi
 100c396:	mov    DWORD PTR [rbx+0x74],edi
 100c399:	mov    rax,rbx
 100c39c:	mov    rbx,QWORD PTR [rsp+0x30]
 100c3a1:	add    rsp,0x20
 100c3a5:	pop    rdi
 100c3a6:	ret    
 100c3a7:	int3   
 100c3a8:	int3   
 100c3a9:	int3   
 100c3aa:	int3   
 100c3ab:	int3   
 100c3ac:	int3   
 100c3ad:	int3   
 100c3ae:	int3   
 100c3af:	int3   
 100c3b0:	mov    QWORD PTR [rsp+0x8],rbx
 100c3b5:	mov    QWORD PTR [rsp+0x10],rbp
 100c3ba:	mov    QWORD PTR [rsp+0x18],rsi
 100c3bf:	push   rdi
 100c3c0:	sub    rsp,0x20
 100c3c4:	lea    rax,[rip+0xffffffffffff7b35]        # 0x1003f00
 100c3cb:	mov    rdi,rcx
 100c3ce:	mov    DWORD PTR [rcx+0x8],0x1
 100c3d5:	mov    QWORD PTR [rcx],rax
 100c3d8:	xor    ebp,ebp
 100c3da:	add    rcx,0x18
 100c3de:	mov    QWORD PTR [rcx-0x8],rbp
 100c3e2:	mov    ebx,r8d
 100c3e5:	mov    rsi,rdx
 100c3e8:	call   0x100c250
 100c3ed:	test   rsi,rsi
 100c3f0:	mov    QWORD PTR [rdi+0x1360],0x200
 100c3fb:	mov    QWORD PTR [rdi+0x1368],rbp
 100c402:	mov    QWORD PTR [rdi+0x1370],rbp
 100c409:	lea    r11,[rdi+0xe8]
 100c410:	mov    QWORD PTR [rdi+0x1378],r11
 100c417:	mov    QWORD PTR [rdi+0x1380],r11
 100c41e:	mov    QWORD PTR [rdi+0x1388],0x200
 100c429:	mov    QWORD PTR [rdi+0x1390],rbp
 100c430:	mov    QWORD PTR [rdi+0x1398],rbp
 100c437:	lea    rax,[rdi+0x900]
 100c43e:	mov    QWORD PTR [rdi+0x13a0],rax
 100c445:	mov    QWORD PTR [rdi+0x13a8],rax
 100c44c:	mov    DWORD PTR [rdi+0x13b0],ebx
 100c452:	mov    DWORD PTR [rdi+0x13b4],ebp
 100c458:	mov    DWORD PTR [rdi+0x13b8],ebp
 100c45e:	mov    DWORD PTR [rdi+0x13bc],ebp
 100c464:	mov    DWORD PTR [rdi+0x13c0],ebp
 100c46a:	mov    QWORD PTR [rdi+0x13c8],rbp
 100c471:	je     0x100c4b3
 100c473:	mov    rcx,QWORD PTR [rdi+0x10]
 100c477:	test   rcx,rcx
 100c47a:	je     0x100c486
 100c47c:	mov    rax,QWORD PTR [rcx]
 100c47f:	call   QWORD PTR [rax+0x10]
 100c482:	mov    QWORD PTR [rdi+0x10],rbp
 100c486:	mov    QWORD PTR [rdi+0x10],rsi
 100c48a:	mov    rax,QWORD PTR [rsi]
 100c48d:	mov    rcx,rsi
 100c490:	call   QWORD PTR [rax+0x8]
 100c493:	mov    rcx,QWORD PTR [rdi+0x10]
 100c497:	call   0x1009fa0
 100c49c:	mov    rcx,QWORD PTR [rdi+0x10]
 100c4a0:	mov    QWORD PTR [rdi+0x1370],rax
 100c4a7:	call   0x1009fa0
 100c4ac:	mov    QWORD PTR [rdi+0x1398],rax
 100c4b3:	call   QWORD PTR [rip+0xffffffffffff4d8f]        # 0x1001248
 100c4b9:	lea    rcx,[rdi+0x13d0]
 100c4c0:	xor    edx,edx
 100c4c2:	mov    r8d,0x208
 100c4c8:	mov    DWORD PTR [rdi+0x74],eax
 100c4cb:	call   0x1005982
 100c4d0:	xor    edx,edx
 100c4d2:	lea    rcx,[rdi+0x15d8]
 100c4d9:	lea    r8d,[rdx+0x68]
 100c4dd:	call   0x1005982
 100c4e2:	mov    rbx,QWORD PTR [rsp+0x30]
 100c4e7:	mov    rbp,QWORD PTR [rsp+0x38]
 100c4ec:	mov    rsi,QWORD PTR [rsp+0x40]
 100c4f1:	xor    eax,eax
 100c4f3:	mov    QWORD PTR [rdi+0x1640],rax
 100c4fa:	mov    QWORD PTR [rdi+0x1648],rax
 100c501:	mov    QWORD PTR [rdi+0x1650],rax
 100c508:	mov    rax,rdi
 100c50b:	add    rsp,0x20
 100c50f:	pop    rdi
 100c510:	ret    
 100c511:	int3   
 100c512:	int3   
 100c513:	int3   
 100c514:	int3   
 100c515:	int3   
 100c516:	int3   
 100c517:	int3   
 100c518:	int3   
 100c519:	int3   
 100c51a:	int3   
 100c51b:	int3   
 100c51c:	int3   
 100c51d:	int3   
 100c51e:	int3   
 100c51f:	int3   
 100c520:	mov    QWORD PTR [rsp+0x10],rbx
 100c525:	mov    QWORD PTR [rsp+0x18],rbp
 100c52a:	mov    QWORD PTR [rsp+0x20],rsi
 100c52f:	push   rdi
 100c530:	sub    rsp,0x20
 100c534:	xor    ebx,ebx
 100c536:	test   rdx,rdx
 100c539:	mov    rsi,r8
 100c53c:	mov    rbp,rdx
 100c53f:	mov    rdi,rcx
 100c542:	je     0x100c5fa
 100c548:	test   r8,r8
 100c54b:	je     0x100c5fa
 100c551:	mov    r9,QWORD PTR [rcx+0x1380]
 100c558:	mov    QWORD PTR [rsp+0x30],r12
 100c55d:	mov    eax,DWORD PTR [r9+0x10]
 100c561:	cmp    DWORD PTR [r9+0xc],eax
 100c565:	jb     0x100c5b0
 100c567:	mov    rcx,QWORD PTR [rcx+0x1370]
 100c56e:	test   rcx,rcx
 100c571:	je     0x100c5ec
 100c573:	mov    r12,QWORD PTR [rdi+0x1360]
 100c57a:	mov    rdx,r12
 100c57d:	shl    rdx,0x4
 100c581:	add    rdx,0x18
 100c585:	call   0x100af70
 100c58a:	test   rax,rax
 100c58d:	mov    r11,rax
 100c590:	je     0x100c5ec
 100c592:	mov    QWORD PTR [rax],rbx
 100c595:	mov    DWORD PTR [rax+0x8],ebx
 100c598:	mov    DWORD PTR [rax+0xc],ebx
 100c59b:	mov    DWORD PTR [rax+0x10],r12d
 100c59f:	mov    rax,QWORD PTR [rdi+0x1380]
 100c5a6:	mov    QWORD PTR [rax],r11
 100c5a9:	mov    QWORD PTR [rdi+0x1380],r11
 100c5b0:	mov    rcx,QWORD PTR [rdi+0x1380]
 100c5b7:	mov    edx,DWORD PTR [rcx+0xc]
 100c5ba:	lea    eax,[rdx+0x1]
 100c5bd:	add    rdx,rdx
 100c5c0:	mov    DWORD PTR [rcx+0xc],eax
 100c5c3:	mov    rax,QWORD PTR [rdi+0x1380]
 100c5ca:	add    QWORD PTR [rdi+0x1368],0x1
 100c5d2:	lea    rcx,[rax+rdx*8+0x18]
 100c5d7:	test   rcx,rcx
 100c5da:	je     0x100c5ec
 100c5dc:	mov    r12,QWORD PTR [rsp+0x30]
 100c5e1:	mov    QWORD PTR [rcx],rbp
 100c5e4:	mov    QWORD PTR [rcx+0x8],rsi
 100c5e8:	mov    eax,ebx
 100c5ea:	jmp    0x100c5fc
 100c5ec:	mov    r12,QWORD PTR [rsp+0x30]
 100c5f1:	mov    ebx,0x8007000e
 100c5f6:	mov    eax,ebx
 100c5f8:	jmp    0x100c5fc
 100c5fa:	xor    eax,eax
 100c5fc:	mov    rbx,QWORD PTR [rsp+0x38]
 100c601:	mov    rbp,QWORD PTR [rsp+0x40]
 100c606:	mov    rsi,QWORD PTR [rsp+0x48]
 100c60b:	add    rsp,0x20
 100c60f:	pop    rdi
 100c610:	ret    
 100c611:	int3   
 100c612:	int3   
 100c613:	int3   
 100c614:	int3   
 100c615:	int3   
 100c616:	int3   
 100c617:	int3   
 100c618:	int3   
 100c619:	int3   
 100c61a:	int3   
 100c61b:	int3   
 100c61c:	int3   
 100c61d:	int3   
 100c61e:	int3   
 100c61f:	int3   
 100c620:	mov    QWORD PTR [rsp+0x10],rbx
 100c625:	mov    QWORD PTR [rsp+0x18],rbp
 100c62a:	mov    QWORD PTR [rsp+0x20],rsi
 100c62f:	push   rdi
 100c630:	sub    rsp,0x20
 100c634:	xor    ebx,ebx
 100c636:	test   rdx,rdx
 100c639:	mov    rsi,r8
 100c63c:	mov    rbp,rdx
 100c63f:	mov    rdi,rcx
 100c642:	je     0x100c6fa
 100c648:	test   r8,r8
 100c64b:	je     0x100c6fa
 100c651:	mov    r9,QWORD PTR [rcx+0x13a8]
 100c658:	mov    QWORD PTR [rsp+0x30],r12
 100c65d:	mov    eax,DWORD PTR [r9+0x10]
 100c661:	cmp    DWORD PTR [r9+0xc],eax
 100c665:	jb     0x100c6b0
 100c667:	mov    rcx,QWORD PTR [rcx+0x1398]
 100c66e:	test   rcx,rcx
 100c671:	je     0x100c6ec
 100c673:	mov    r12,QWORD PTR [rdi+0x1388]
 100c67a:	mov    rdx,r12
 100c67d:	shl    rdx,0x4
 100c681:	add    rdx,0x18
 100c685:	call   0x100af70
 100c68a:	test   rax,rax
 100c68d:	mov    r11,rax
 100c690:	je     0x100c6ec
 100c692:	mov    QWORD PTR [rax],rbx
 100c695:	mov    DWORD PTR [rax+0x8],ebx
 100c698:	mov    DWORD PTR [rax+0xc],ebx
 100c69b:	mov    DWORD PTR [rax+0x10],r12d
 100c69f:	mov    rax,QWORD PTR [rdi+0x13a8]
 100c6a6:	mov    QWORD PTR [rax],r11
 100c6a9:	mov    QWORD PTR [rdi+0x13a8],r11
 100c6b0:	mov    rcx,QWORD PTR [rdi+0x13a8]
 100c6b7:	mov    edx,DWORD PTR [rcx+0xc]
 100c6ba:	lea    eax,[rdx+0x1]
 100c6bd:	add    rdx,rdx
 100c6c0:	mov    DWORD PTR [rcx+0xc],eax
 100c6c3:	mov    rax,QWORD PTR [rdi+0x13a8]
 100c6ca:	add    QWORD PTR [rdi+0x1390],0x1
 100c6d2:	lea    rcx,[rax+rdx*8+0x18]
 100c6d7:	test   rcx,rcx
 100c6da:	je     0x100c6ec
 100c6dc:	mov    r12,QWORD PTR [rsp+0x30]
 100c6e1:	mov    QWORD PTR [rcx],rbp
 100c6e4:	mov    QWORD PTR [rcx+0x8],rsi
 100c6e8:	mov    eax,ebx
 100c6ea:	jmp    0x100c6fc
 100c6ec:	mov    r12,QWORD PTR [rsp+0x30]
 100c6f1:	mov    ebx,0x8007000e
 100c6f6:	mov    eax,ebx
 100c6f8:	jmp    0x100c6fc
 100c6fa:	xor    eax,eax
 100c6fc:	mov    rbx,QWORD PTR [rsp+0x38]
 100c701:	mov    rbp,QWORD PTR [rsp+0x40]
 100c706:	mov    rsi,QWORD PTR [rsp+0x48]
 100c70b:	add    rsp,0x20
 100c70f:	pop    rdi
 100c710:	ret    
 100c711:	int3   
 100c712:	int3   
 100c713:	int3   
 100c714:	int3   
 100c715:	int3   
 100c716:	int3   
 100c717:	int3   
 100c718:	int3   
 100c719:	int3   
 100c71a:	int3   
 100c71b:	int3   
 100c71c:	int3   
 100c71d:	int3   
 100c71e:	int3   
 100c71f:	int3   
 100c720:	rex push rbx
 100c722:	sub    rsp,0x30
 100c726:	xor    ebx,ebx
 100c728:	mov    DWORD PTR [rsp+0x20],ebx
 100c72c:	add    rcx,0x1120
 100c733:	call   0x100bef0
 100c738:	mov    DWORD PTR [rsp+0x20],eax
 100c73c:	jmp    0x100c75b
 100c73e:	mov    ebx,eax
 100c740:	cmp    eax,0xc00000fd
 100c745:	jne    0x100c74d
 100c747:	call   QWORD PTR [rip+0xffffffffffff4bf3]        # 0x1001340
 100c74d:	mov    eax,0x80004005
 100c752:	test   ebx,ebx
 100c754:	cmovns ebx,eax
 100c757:	mov    eax,DWORD PTR [rsp+0x20]
 100c75b:	test   eax,eax
 100c75d:	cmovns eax,ebx
 100c760:	add    rsp,0x30
 100c764:	pop    rbx
 100c765:	ret    
 100c766:	int3   
 100c767:	int3   
 100c768:	int3   
 100c769:	int3   
 100c76a:	int3   
 100c76b:	int3   
 100c76c:	int3   
 100c76d:	int3   
 100c76e:	int3   
 100c76f:	int3   
 100c770:	mov    QWORD PTR [rsp+0x8],rbx
 100c775:	mov    QWORD PTR [rsp+0x10],rsi
 100c77a:	push   rdi
 100c77b:	sub    rsp,0x30
 100c77f:	mov    rsi,rcx
 100c782:	xor    edi,edi
 100c784:	mov    DWORD PTR [rsp+0x20],edi
 100c788:	add    rcx,0x18
 100c78c:	mov    edx,0xa0
 100c791:	call   0x100b100
 100c796:	mov    DWORD PTR [rsi+0xb8],eax
 100c79c:	mov    rcx,QWORD PTR [rsi+0x38]
 100c7a0:	call   0x100b150
 100c7a5:	mov    DWORD PTR [rsi+0xc0],eax
 100c7ab:	mov    rcx,QWORD PTR [rsi+0x40]
 100c7af:	call   0x100b150
 100c7b4:	mov    DWORD PTR [rsi+0xc4],eax
 100c7ba:	lea    rcx,[rsi+0x1360]
 100c7c1:	call   0x100c1e0
 100c7c6:	mov    ebx,eax
 100c7c8:	mov    DWORD PTR [rsp+0x20],eax
 100c7cc:	test   eax,eax
 100c7ce:	jne    0x100c7e2
 100c7d0:	lea    rcx,[rsi+0x1388]
 100c7d7:	call   0x100c1e0
 100c7dc:	mov    ebx,eax
 100c7de:	mov    DWORD PTR [rsp+0x20],eax
 100c7e2:	mov    rcx,QWORD PTR [rsi+0x90]
 100c7e9:	call   0x100b150
 100c7ee:	mov    DWORD PTR [rsi+0xd4],eax
 100c7f4:	mov    rcx,QWORD PTR [rsi+0x98]
 100c7fb:	call   0x100b150
 100c800:	mov    DWORD PTR [rsi+0xd8],eax
 100c806:	mov    rcx,QWORD PTR [rsi+0x58]
 100c80a:	call   0x100b150
 100c80f:	mov    DWORD PTR [rsi+0xd0],eax
 100c815:	mov    rcx,QWORD PTR [rsi+0x20]
 100c819:	call   0x100b150
 100c81e:	mov    DWORD PTR [rsi+0xbc],eax
 100c824:	mov    rcx,QWORD PTR [rsi+0x48]
 100c828:	call   0x100b150
 100c82d:	mov    DWORD PTR [rsi+0xc8],eax
 100c833:	mov    rcx,QWORD PTR [rsi+0x50]
 100c837:	call   0x100b150
 100c83c:	mov    DWORD PTR [rsi+0xcc],eax
 100c842:	mov    rcx,QWORD PTR [rsi+0x60]
 100c846:	call   0x100b150
 100c84b:	mov    DWORD PTR [rsi+0xdc],eax
 100c851:	mov    rcx,QWORD PTR [rsi+0x68]
 100c855:	call   0x100b150
 100c85a:	mov    DWORD PTR [rsi+0xe0],eax
 100c860:	lea    rcx,[rsi+0x1120]
 100c867:	call   0x100bb40
 100c86c:	mov    DWORD PTR [rsi+0x1350],eax
 100c872:	jmp    0x100c891
 100c874:	mov    edi,eax
 100c876:	cmp    eax,0xc00000fd
 100c87b:	jne    0x100c883
 100c87d:	call   QWORD PTR [rip+0xffffffffffff4abd]        # 0x1001340
 100c883:	mov    eax,0x80004005
 100c888:	test   edi,edi
 100c88a:	cmovns edi,eax
 100c88d:	mov    ebx,DWORD PTR [rsp+0x20]
 100c891:	test   ebx,ebx
 100c893:	cmovns ebx,edi
 100c896:	mov    eax,ebx
 100c898:	mov    rbx,QWORD PTR [rsp+0x40]
 100c89d:	mov    rsi,QWORD PTR [rsp+0x48]
 100c8a2:	add    rsp,0x30
 100c8a6:	pop    rdi
 100c8a7:	ret    
 100c8a8:	int3   
 100c8a9:	int3   
 100c8aa:	int3   
 100c8ab:	int3   
 100c8ac:	int3   
 100c8ad:	int3   
 100c8ae:	int3   
 100c8af:	int3   
 100c8b0:	mov    QWORD PTR [rsp+0x8],rcx
 100c8b5:	push   rbx
 100c8b6:	push   rsi
 100c8b7:	push   rdi
 100c8b8:	push   r12
 100c8ba:	push   r13
 100c8bc:	push   r14
 100c8be:	push   r15
 100c8c0:	sub    rsp,0x60
 100c8c4:	mov    rsi,rcx
 100c8c7:	xor    r12d,r12d
 100c8ca:	mov    ebx,r12d
 100c8cd:	mov    DWORD PTR [rsp+0x50],ebx
 100c8d1:	call   QWORD PTR [rip+0xffffffffffff4879]        # 0x1001150
 100c8d7:	mov    rcx,rax
 100c8da:	call   QWORD PTR [rip+0xffffffffffff4868]        # 0x1001148
 100c8e0:	mov    r15d,eax
 100c8e3:	mov    DWORD PTR [rsp+0xa8],eax
 100c8ea:	cmp    eax,0x7fffffff
 100c8ef:	je     0x100c905
 100c8f1:	call   QWORD PTR [rip+0xffffffffffff4859]        # 0x1001150
 100c8f7:	mov    rcx,rax
 100c8fa:	lea    edx,[r12+0x1]
 100c8ff:	call   QWORD PTR [rip+0xffffffffffff47bb]        # 0x10010c0
 100c905:	mov    r13d,r12d
 100c908:	mov    edi,DWORD PTR [rsi+0xa4]
 100c90e:	call   QWORD PTR [rip+0xffffffffffff4934]        # 0x1001248
 100c914:	cmp    edi,eax
 100c916:	jne    0x100c924
 100c918:	mov    rax,QWORD PTR [rsi+0x30]
 100c91c:	cmp    DWORD PTR [rax],0xc00000fd
 100c922:	je     0x100c948
 100c924:	mov    eax,DWORD PTR [rsi+0xa8]
 100c92a:	bt     eax,0xc
 100c92e:	jb     0x100c948
 100c930:	bt     eax,0xf
 100c934:	jb     0x100c948
 100c936:	mov    rdx,rsi
 100c939:	mov    rcx,QWORD PTR [rsi+0x10]
 100c93d:	call   0x100a600
 100c942:	mov    ebx,eax
 100c944:	mov    DWORD PTR [rsp+0x50],eax
 100c948:	mov    rax,QWORD PTR [rsi]
 100c94b:	mov    r8d,0x1658
 100c951:	mov    rdx,rsi
 100c954:	mov    rcx,rsi
 100c957:	call   QWORD PTR [rax+0x50]
 100c95a:	test   ebx,ebx
 100c95c:	cmovns ebx,eax
 100c95f:	mov    DWORD PTR [rsp+0x50],ebx
 100c963:	mov    rdx,QWORD PTR [rsi+0x50]
 100c967:	test   rdx,rdx
 100c96a:	je     0x100c993
 100c96c:	mov    r9,QWORD PTR [rsi]
 100c96f:	xor    eax,eax
 100c971:	or     rcx,0xffffffffffffffff
 100c975:	mov    rdi,rdx
 100c978:	repnz scas ax,WORD PTR es:[rdi]
 100c97b:	not    rcx
 100c97e:	lea    r8,[rcx+rcx*1-0x2]
 100c983:	mov    rcx,rsi
 100c986:	call   QWORD PTR [r9+0x50]
 100c98a:	test   ebx,ebx
 100c98c:	cmovns ebx,eax
 100c98f:	mov    DWORD PTR [rsp+0x50],ebx
 100c993:	mov    rdx,QWORD PTR [rsi+0x48]
 100c997:	test   rdx,rdx
 100c99a:	je     0x100c9c3
 100c99c:	mov    r9,QWORD PTR [rsi]
 100c99f:	xor    eax,eax
 100c9a1:	or     rcx,0xffffffffffffffff
 100c9a5:	mov    rdi,rdx
 100c9a8:	repnz scas ax,WORD PTR es:[rdi]
 100c9ab:	not    rcx
 100c9ae:	lea    r8,[rcx+rcx*1-0x2]
 100c9b3:	mov    rcx,rsi
 100c9b6:	call   QWORD PTR [r9+0x50]
 100c9ba:	test   ebx,ebx
 100c9bc:	cmovns ebx,eax
 100c9bf:	mov    DWORD PTR [rsp+0x50],ebx
 100c9c3:	call   QWORD PTR [rip+0xffffffffffff47f7]        # 0x10011c0
 100c9c9:	mov    DWORD PTR [rsi+0x78],eax
 100c9cc:	mov    rcx,rsi
 100c9cf:	call   0x100c770
 100c9d4:	test   ebx,ebx
 100c9d6:	cmovns ebx,eax
 100c9d9:	mov    DWORD PTR [rsp+0x50],ebx
 100c9dd:	lea    rdi,[rsi+0x18]
 100c9e1:	call   0x1004b60
 100c9e6:	mov    r9,rax
 100c9e9:	mov    QWORD PTR [rsp+0x30],rdi
 100c9ee:	mov    eax,DWORD PTR [rsi+0x78]
 100c9f1:	mov    DWORD PTR [rsp+0x28],eax
 100c9f5:	lea    rax,[rip+0xffffffffffff6d5c]        # 0x1003758
 100c9fc:	mov    QWORD PTR [rsp+0x20],rax
 100ca01:	lea    r8,[rip+0xffffffffffff75f0]        # 0x1003ff8
 100ca08:	mov    edx,0x104
 100ca0d:	lea    rcx,[rsi+0x13d0]
 100ca14:	call   0x100a410
 100ca19:	test   eax,eax
 100ca1b:	js     0x100cbca
 100ca21:	lea    rdi,[rsi+0x15d8]
 100ca28:	mov    rcx,rdi
 100ca2b:	call   QWORD PTR [rip+0xffffffffffff4867]        # 0x1001298
 100ca31:	mov    QWORD PTR [rsi+0x15e0],r12
 100ca38:	mov    QWORD PTR [rsi+0x15f0],r12
 100ca3f:	lea    r14,[rsi+0x1640]
 100ca46:	mov    rcx,QWORD PTR [rsi+0x10]
 100ca4a:	call   0x100a120
 100ca4f:	mov    rcx,rax
 100ca52:	mov    QWORD PTR [rsp+0x48],r14
 100ca57:	mov    QWORD PTR [rsp+0x40],rdi
 100ca5c:	mov    QWORD PTR [rsp+0x38],r12
 100ca61:	mov    QWORD PTR [rsp+0x30],r12
 100ca66:	mov    DWORD PTR [rsp+0x28],0xc008010
 100ca6e:	mov    DWORD PTR [rsp+0x20],r12d
 100ca73:	xor    r9d,r9d
 100ca76:	xor    r8d,r8d
 100ca79:	lea    rdx,[rsi+0x13d0]
 100ca80:	call   QWORD PTR [rip+0xffffffffffff45ba]        # 0x1001040
 100ca86:	test   eax,eax
 100ca88:	je     0x100cbad
 100ca8e:	mov    edi,r12d
 100ca91:	mov    DWORD PTR [rsp+0x54],r12d
 100ca96:	call   QWORD PTR [rip+0xffffffffffff472c]        # 0x10011c8
 100ca9c:	mov    DWORD PTR [rsp+0xb0],eax
 100caa3:	nop
 100caa4:	data16 data16 xchg ax,ax
 100caa8:	data16 data16 xchg ax,ax
 100caac:	data16 data16 xchg ax,ax
 100cab0:	mov    edx,0x64
 100cab5:	mov    rcx,QWORD PTR [r14]
 100cab8:	call   QWORD PTR [rip+0xffffffffffff45ca]        # 0x1001088
 100cabe:	mov    r14d,eax
 100cac1:	cmp    eax,0x102
 100cac6:	jne    0x100caef
 100cac8:	cmp    DWORD PTR [rsi+0x13b0],0xffffffff
 100cacf:	je     0x100cae6
 100cad1:	call   QWORD PTR [rip+0xffffffffffff46f1]        # 0x10011c8
 100cad7:	sub    eax,DWORD PTR [rsp+0xb0]
 100cade:	cmp    eax,DWORD PTR [rsi+0x13b0]
 100cae4:	jae    0x100caef
 100cae6:	lea    r14,[rsi+0x1640]
 100caed:	jmp    0x100cab0
 100caef:	mov    eax,r12d
 100caf2:	cmp    r14d,0x102
 100caf9:	sete   al
 100cafc:	mov    DWORD PTR [rsi+0x13bc],eax
 100cb02:	mov    DWORD PTR [rsi+0x13c0],0x1
 100cb0c:	lea    rdx,[rsi+0x13b4]
 100cb13:	mov    rcx,QWORD PTR [rsi+0x1640]
 100cb1a:	call   QWORD PTR [rip+0xffffffffffff4528]        # 0x1001048
 100cb20:	test   eax,eax
 100cb22:	je     0x100cb41
 100cb24:	cmp    DWORD PTR [rsi+0x13b4],0x103
 100cb2e:	je     0x100cb41
 100cb30:	mov    DWORD PTR [rsi+0x13b8],0x1
 100cb3a:	mov    DWORD PTR [rsi+0x13bc],r12d
 100cb41:	jmp    0x100cb7a
 100cb43:	mov    edi,eax
 100cb45:	cmp    eax,0xc00000fd
 100cb4a:	jne    0x100cb52
 100cb4c:	call   QWORD PTR [rip+0xffffffffffff47ee]        # 0x1001340
 100cb52:	mov    eax,0x80004005
 100cb57:	test   edi,edi
 100cb59:	cmovns edi,eax
 100cb5c:	mov    DWORD PTR [rsp+0x54],edi
 100cb60:	xor    r12d,r12d
 100cb63:	mov    rsi,QWORD PTR [rsp+0xa0]
 100cb6b:	mov    ebx,DWORD PTR [rsp+0x50]
 100cb6f:	mov    r15d,DWORD PTR [rsp+0xa8]
 100cb77:	mov    r13d,r12d
 100cb7a:	test   ebx,ebx
 100cb7c:	cmovns ebx,edi
 100cb7f:	mov    DWORD PTR [rsp+0x50],ebx
 100cb83:	mov    rcx,QWORD PTR [rsi+0x1648]
 100cb8a:	call   QWORD PTR [rip+0xffffffffffff4678]        # 0x1001208
 100cb90:	mov    QWORD PTR [rsi+0x1648],r12
 100cb97:	mov    rcx,QWORD PTR [rsi+0x1640]
 100cb9e:	call   QWORD PTR [rip+0xffffffffffff4664]        # 0x1001208
 100cba4:	mov    QWORD PTR [rsi+0x1640],r12
 100cbab:	jmp    0x100cbd3
 100cbad:	call   QWORD PTR [rip+0xffffffffffff468d]        # 0x1001240
 100cbb3:	test   eax,eax
 100cbb5:	jle    0x100cbbf
 100cbb7:	movzx  eax,ax
 100cbba:	or     eax,0x80070000
 100cbbf:	test   ebx,ebx
 100cbc1:	cmovns ebx,eax
 100cbc4:	mov    DWORD PTR [rsp+0x50],ebx
 100cbc8:	jmp    0x100cbd3
 100cbca:	test   ebx,ebx
 100cbcc:	cmovns ebx,eax
 100cbcf:	mov    DWORD PTR [rsp+0x50],ebx
 100cbd3:	jmp    0x100cbfd
 100cbd5:	mov    r13d,eax
 100cbd8:	cmp    eax,0xc00000fd
 100cbdd:	jne    0x100cbe5
 100cbdf:	call   QWORD PTR [rip+0xffffffffffff475b]        # 0x1001340
 100cbe5:	mov    eax,0x80004005
 100cbea:	test   r13d,r13d
 100cbed:	cmovns r13d,eax
 100cbf1:	mov    ebx,DWORD PTR [rsp+0x50]
 100cbf5:	mov    r15d,DWORD PTR [rsp+0xa8]
 100cbfd:	cmp    r15d,0x7fffffff
 100cc04:	je     0x100cc18
 100cc06:	call   QWORD PTR [rip+0xffffffffffff4544]        # 0x1001150
 100cc0c:	mov    rcx,rax
 100cc0f:	mov    edx,r15d
 100cc12:	call   QWORD PTR [rip+0xffffffffffff44a8]        # 0x10010c0
 100cc18:	test   ebx,ebx
 100cc1a:	cmovns ebx,r13d
 100cc1e:	mov    eax,ebx
 100cc20:	add    rsp,0x60
 100cc24:	pop    r15
 100cc26:	pop    r14
 100cc28:	pop    r13
 100cc2a:	pop    r12
 100cc2c:	pop    rdi
 100cc2d:	pop    rsi
 100cc2e:	pop    rbx
 100cc2f:	ret    
 100cc30:	int3   
 100cc31:	int3   
 100cc32:	int3   
 100cc33:	int3   
 100cc34:	int3   
 100cc35:	int3   
 100cc36:	int3   
 100cc37:	int3   
 100cc38:	int3   
 100cc39:	int3   
 100cc3a:	int3   
 100cc3b:	int3   
 100cc3c:	int3   
 100cc3d:	int3   
 100cc3e:	int3   
 100cc3f:	int3   
 100cc40:	mov    QWORD PTR [rsp+0x8],rbx
 100cc45:	mov    QWORD PTR [rsp+0x10],rsi
 100cc4a:	mov    QWORD PTR [rsp+0x18],rdi
 100cc4f:	push   r12
 100cc51:	sub    rsp,0x30
 100cc55:	mov    rsi,r8
 100cc58:	mov    r12,rdx
 100cc5b:	mov    rdi,rcx
 100cc5e:	xor    ebx,ebx
 100cc60:	mov    DWORD PTR [rsp+0x20],ebx
 100cc64:	lea    r8,[rip+0xffffffffffff49b5]        # 0x1001620
 100cc6b:	mov    rdx,rsi
 100cc6e:	mov    rcx,r12
 100cc71:	call   0x10045c0
 100cc76:	mov    DWORD PTR [rsp+0x20],eax
 100cc7a:	test   eax,eax
 100cc7c:	js     0x100cd14
 100cc82:	cmp    DWORD PTR [rdi+0x1650],0x0
 100cc89:	jne    0x100cca5
 100cc8b:	lea    r8,[rip+0xffffffffffff73ee]        # 0x1004080
 100cc92:	mov    rdx,rsi
 100cc95:	mov    rcx,r12
 100cc98:	call   0x100bd30
 100cc9d:	mov    DWORD PTR [rsp+0x20],eax
 100cca1:	test   eax,eax
 100cca3:	js     0x100cd14
 100cca5:	cmp    DWORD PTR [rdi+0x13c0],0x0
 100ccac:	je     0x100ccf0
 100ccae:	cmp    DWORD PTR [rdi+0x13bc],0x0
 100ccb5:	je     0x100ccda
 100ccb7:	mov    r9d,DWORD PTR [rdi+0x1650]
 100ccbe:	lea    r8,[rip+0xffffffffffff735b]        # 0x1004020
 100ccc5:	mov    rdx,rsi
 100ccc8:	mov    rcx,r12
 100cccb:	call   0x100b590
 100ccd0:	mov    DWORD PTR [rsp+0x20],eax
 100ccd4:	test   eax,eax
 100ccd6:	jns    0x100ccf0
 100ccd8:	jmp    0x100cd14
 100ccda:	mov    r8,rsi
 100ccdd:	mov    rdx,r12
 100cce0:	mov    rcx,rdi
 100cce3:	call   0x100c0c0
 100cce8:	mov    DWORD PTR [rsp+0x20],eax
 100ccec:	test   eax,eax
 100ccee:	js     0x100cd14
 100ccf0:	jmp    0x100cd0f
 100ccf2:	mov    ebx,eax
 100ccf4:	cmp    eax,0xc00000fd
 100ccf9:	jne    0x100cd01
 100ccfb:	call   QWORD PTR [rip+0xffffffffffff463f]        # 0x1001340
 100cd01:	mov    eax,0x80004005
 100cd06:	test   ebx,ebx
 100cd08:	cmovns ebx,eax
 100cd0b:	mov    eax,DWORD PTR [rsp+0x20]
 100cd0f:	test   eax,eax
 100cd11:	cmovns eax,ebx
 100cd14:	mov    rbx,QWORD PTR [rsp+0x40]
 100cd19:	mov    rsi,QWORD PTR [rsp+0x48]
 100cd1e:	mov    rdi,QWORD PTR [rsp+0x50]
 100cd23:	add    rsp,0x30
 100cd27:	pop    r12
 100cd29:	ret    
 100cd2a:	int3   
 100cd2b:	int3   
 100cd2c:	int3   
 100cd2d:	int3   
 100cd2e:	int3   
 100cd2f:	int3   
 100cd30:	mov    QWORD PTR [rsp+0x8],rbx
 100cd35:	mov    QWORD PTR [rsp+0x10],rsi
 100cd3a:	push   rdi
 100cd3b:	sub    rsp,0x20
 100cd3f:	cmp    QWORD PTR [rcx+0x1340],0x0
 100cd47:	lea    rax,[rip+0xffffffffffff71b2]        # 0x1003f00
 100cd4e:	mov    edi,r8d
 100cd51:	mov    rsi,rdx
 100cd54:	mov    rbx,rcx
 100cd57:	mov    QWORD PTR [rcx],rax
 100cd5a:	je     0x100cd79
 100cd5c:	mov    rcx,QWORD PTR [rcx+0x10]
 100cd60:	call   0x1009fa0
 100cd65:	mov    rdx,QWORD PTR [rbx+0x1340]
 100cd6c:	test   rdx,rdx
 100cd6f:	je     0x100cd79
 100cd71:	mov    rcx,rax
 100cd74:	call   0x100afd0
 100cd79:	mov    rcx,QWORD PTR [rbx+0x10]
 100cd7d:	test   rcx,rcx
 100cd80:	je     0x100cd90
 100cd82:	mov    rax,QWORD PTR [rcx]
 100cd85:	call   QWORD PTR [rax+0x10]
 100cd88:	mov    QWORD PTR [rbx+0x10],0x0
 100cd90:	lea    rcx,[rbx+0x1388]
 100cd97:	call   0x100bc60
 100cd9c:	lea    rcx,[rbx+0x1360]
 100cda3:	call   0x100bc60
 100cda8:	xor    edx,edx
 100cdaa:	mov    r8d,0x1658
 100cdb0:	mov    rcx,rbx
 100cdb3:	call   0x1005982
 100cdb8:	mov    r8d,edi
 100cdbb:	mov    rdx,rsi
 100cdbe:	mov    rcx,rbx
 100cdc1:	mov    rbx,QWORD PTR [rsp+0x30]
 100cdc6:	mov    rsi,QWORD PTR [rsp+0x38]
 100cdcb:	add    rsp,0x20
 100cdcf:	pop    rdi
 100cdd0:	jmp    0x100c3b0
 100cdd5:	int3   
 100cdd6:	int3   
 100cdd7:	int3   
 100cdd8:	int3   
 100cdd9:	int3   
 100cdda:	int3   
 100cddb:	int3   
 100cddc:	int3   
 100cddd:	int3   
 100cdde:	int3   
 100cddf:	int3   
 100cde0:	mov    QWORD PTR [rsp+0x8],rbx
 100cde5:	mov    QWORD PTR [rsp+0x10],rbp
 100cdea:	mov    QWORD PTR [rsp+0x18],rsi
 100cdef:	push   rdi
 100cdf0:	sub    rsp,0xc0
 100cdf7:	mov    rdi,rdx
 100cdfa:	mov    rdx,QWORD PTR [rdx]
 100cdfd:	mov    rsi,rcx
 100ce00:	mov    rbp,r8
 100ce03:	lea    rcx,[rsp+0x20]
 100ce08:	mov    r8d,0x98
 100ce0e:	call   0x100d264
 100ce13:	mov    r11,QWORD PTR [rsi+0x13c8]
 100ce1a:	mov    rbx,QWORD PTR [rsi]
 100ce1d:	mov    QWORD PTR [rsp+0x30],r11
 100ce22:	call   QWORD PTR [rip+0xffffffffffff4420]        # 0x1001248
 100ce28:	mov    r9,QWORD PTR [rdi+0x8]
 100ce2c:	lea    r8,[rsp+0x20]
 100ce31:	mov    edx,eax
 100ce33:	mov    rcx,rsi
 100ce36:	call   QWORD PTR [rbx+0x40]
 100ce39:	mov    rcx,rsi
 100ce3c:	mov    DWORD PTR [rbp+0x0],eax
 100ce3f:	call   0x100c8b0
 100ce44:	lea    r11,[rsp+0xc0]
 100ce4c:	mov    rbx,QWORD PTR [r11+0x10]
 100ce50:	mov    rsi,QWORD PTR [r11+0x20]
 100ce54:	mov    DWORD PTR [rbp+0x0],eax
 100ce57:	mov    rbp,QWORD PTR [r11+0x18]
 100ce5b:	mov    eax,0x1
 100ce60:	mov    rsp,r11
 100ce63:	pop    rdi
 100ce64:	ret    
 100ce65:	int3   
 100ce66:	int3   
 100ce67:	int3   
 100ce68:	int3   
 100ce69:	int3   
 100ce6a:	int3   
 100ce6b:	int3   
 100ce6c:	int3   
 100ce6d:	int3   
 100ce6e:	int3   
 100ce6f:	int3   
 100ce70:	mov    QWORD PTR [rsp+0x8],rcx
 100ce75:	push   rbx
 100ce76:	sub    rsp,0x30
 100ce7a:	mov    ebx,0x80004005
 100ce7f:	mov    DWORD PTR [rsp+0x20],ebx
 100ce83:	mov    rax,QWORD PTR [rsp+0x38]
 100ce88:	cmp    QWORD PTR [rcx+0x30],0x0
 100ce8d:	je     0x100ce98
 100ce8f:	call   0x100c8b0
 100ce94:	mov    ebx,eax
 100ce96:	jmp    0x100cec2
 100ce98:	cmp    QWORD PTR [rcx+0x13c8],0x0
 100cea0:	jne    0x100cea9
 100cea2:	mov    QWORD PTR [rcx+0x13c8],rax
 100cea9:	xor    r9d,r9d
 100ceac:	xor    r8d,r8d
 100ceaf:	xor    edx,edx
 100ceb1:	mov    ecx,0x42ac
 100ceb6:	call   QWORD PTR [rip+0xffffffffffff43c4]        # 0x1001280
 100cebc:	jmp    0x100cec2
 100cebe:	mov    ebx,DWORD PTR [rsp+0x20]
 100cec2:	mov    eax,ebx
 100cec4:	add    rsp,0x30
 100cec8:	pop    rbx
 100cec9:	ret    
 100ceca:	int3   
 100cecb:	int3   
 100cecc:	int3   
 100cecd:	int3   
 100cece:	int3   
 100cecf:	int3   
 100ced0:	rex push rbp
 100ced2:	sub    rsp,0x20
 100ced6:	mov    rbp,rdx
 100ced9:	mov    rdx,rcx
 100cedc:	lea    r8,[rbp+0x20]
 100cee0:	mov    rcx,QWORD PTR [rbp+0x40]
 100cee4:	call   0x100cde0
 100cee9:	add    rsp,0x20
 100ceed:	pop    rbp
 100ceee:	ret    
 100ceef:	int3   
 100cef0:	int3   
 100cef1:	int3   
 100cef2:	int3   
 100cef3:	int3   
 100cef4:	int3   
 100cef5:	int3   
 100cef6:	int3   
 100cef7:	int3   
 100cef8:	mov    r11,rsp
 100cefb:	mov    QWORD PTR [r11+0x20],rbx
 100ceff:	push   rbp
 100cf00:	push   rsi
 100cf01:	push   rdi
 100cf02:	push   r12
 100cf04:	push   r13
 100cf06:	push   r14
 100cf08:	push   r15
 100cf0a:	sub    rsp,0x70
 100cf0e:	mov    eax,DWORD PTR [rcx+0x4]
 100cf11:	mov    r9d,DWORD PTR [rcx]
 100cf14:	mov    r12d,DWORD PTR [rcx+0x8]
 100cf18:	mov    r10d,DWORD PTR [rcx+0xc]
 100cf1c:	mov    DWORD PTR [rsp+0x20],0x48
 100cf24:	mov    rsi,rcx
 100cf27:	mov    ecx,DWORD PTR [rcx+0x10]
 100cf2a:	mov    r14d,DWORD PTR [rsi+0x14]
 100cf2e:	mov    r15d,DWORD PTR [rsi+0x1c]
 100cf32:	mov    r13,rdx
 100cf35:	lea    rdx,[rip+0xffffffffffff30c4]        # 0x1000000
 100cf3c:	mov    QWORD PTR [r11-0x80],rsi
 100cf40:	add    rax,rdx
 100cf43:	mov    QWORD PTR [r11-0x78],r13
 100cf47:	and    r9d,0x1
 100cf4b:	mov    QWORD PTR [r11-0x70],rax
 100cf4f:	and    DWORD PTR [rsp+0x40],0x0
 100cf54:	xor    eax,eax
 100cf56:	and    QWORD PTR [r11-0x58],rax
 100cf5a:	and    QWORD PTR [r11-0x50],rax
 100cf5e:	mov    QWORD PTR [r11-0x60],rax
 100cf62:	and    DWORD PTR [rsp+0x60],eax
 100cf66:	add    r12,rdx
 100cf69:	add    r10,rdx
 100cf6c:	add    rcx,rdx
 100cf6f:	add    r14,rdx
 100cf72:	test   r9b,r9b
 100cf75:	jne    0x100cf9c
 100cf77:	xor    edx,edx
 100cf79:	lea    rax,[rsp+0x20]
 100cf7e:	lea    r9,[r11+0x8]
 100cf82:	lea    r8d,[rdx+0x1]
 100cf86:	mov    ecx,0xc06d0057
 100cf8b:	mov    QWORD PTR [r11+0x8],rax
 100cf8f:	call   QWORD PTR [rip+0xffffffffffff42eb]        # 0x1001280
 100cf95:	xor    eax,eax
 100cf97:	jmp    0x100d1ce
 100cf9c:	mov    rdi,QWORD PTR [r12]
 100cfa0:	movabs rax,0x8000000000000000
 100cfaa:	mov    rbp,r13
 100cfad:	sub    rbp,r10
 100cfb0:	sar    rbp,0x3
 100cfb4:	mov    ebp,ebp
 100cfb6:	test   QWORD PTR [rcx+rbp*8],rax
 100cfba:	mov    eax,0x0
 100cfbf:	sete   al
 100cfc2:	mov    DWORD PTR [rsp+0x40],eax
 100cfc6:	test   eax,eax
 100cfc8:	je     0x100cfde
 100cfca:	mov    eax,DWORD PTR [rcx+rbp*8]
 100cfcd:	lea    rcx,[rip+0xffffffffffff302e]        # 0x1000002
 100cfd4:	add    rax,rcx
 100cfd7:	mov    QWORD PTR [rsp+0x48],rax
 100cfdc:	jmp    0x100cfe6
 100cfde:	movzx  eax,WORD PTR [rcx+rbp*8]
 100cfe2:	mov    DWORD PTR [rsp+0x48],eax
 100cfe6:	mov    rax,QWORD PTR [rip+0xffffffffffff48a3]        # 0x1001890
 100cfed:	xor    ebx,ebx
 100cfef:	test   rax,rax
 100cff2:	je     0x100d010
 100cff4:	lea    rdx,[rsp+0x20]
 100cff9:	xor    ecx,ecx
 100cffb:	call   rax
 100cffd:	mov    rbx,rax
 100d000:	test   rax,rax
 100d003:	jne    0x100d1a4
 100d009:	mov    rax,QWORD PTR [rip+0xffffffffffff4880]        # 0x1001890
 100d010:	test   rdi,rdi
 100d013:	jne    0x100d0e7
 100d019:	test   rax,rax
 100d01c:	je     0x100d030
 100d01e:	lea    rdx,[rsp+0x20]
 100d023:	lea    ecx,[rdi+0x1]
 100d026:	call   rax
 100d028:	mov    rdi,rax
 100d02b:	test   rax,rax
 100d02e:	jne    0x100d09b
 100d030:	mov    rcx,QWORD PTR [rsp+0x38]
 100d035:	call   QWORD PTR [rip+0xffffffffffff411d]        # 0x1001158
 100d03b:	mov    rdi,rax
 100d03e:	test   rax,rax
 100d041:	jne    0x100d09b
 100d043:	call   QWORD PTR [rip+0xffffffffffff41f7]        # 0x1001240
 100d049:	mov    DWORD PTR [rsp+0x60],eax
 100d04d:	mov    rax,QWORD PTR [rip+0xffffffffffff4844]        # 0x1001898
 100d054:	test   rax,rax
 100d057:	je     0x100d06b
 100d059:	lea    rdx,[rsp+0x20]
 100d05e:	lea    ecx,[rdi+0x3]
 100d061:	call   rax
 100d063:	mov    rdi,rax
 100d066:	test   rax,rax
 100d069:	jne    0x100d09b
 100d06b:	xor    edx,edx
 100d06d:	lea    rax,[rsp+0x20]
 100d072:	lea    r9,[rsp+0xb8]
 100d07a:	lea    r8d,[rdx+0x1]
 100d07e:	mov    ecx,0xc06d007e
 100d083:	mov    QWORD PTR [rsp+0xb8],rax
 100d08b:	call   QWORD PTR [rip+0xffffffffffff41ef]        # 0x1001280
 100d091:	mov    rax,QWORD PTR [rsp+0x58]
 100d096:	jmp    0x100d1ce
 100d09b:	mov    rax,rdi
 100d09e:	xchg   QWORD PTR [r12],rax
 100d0a2:	cmp    rax,rdi
 100d0a5:	je     0x100d0d7
 100d0a7:	cmp    DWORD PTR [rsi+0x18],0x0
 100d0ab:	je     0x100d0e0
 100d0ad:	mov    edx,0x10
 100d0b2:	lea    ecx,[rdx+0x30]
 100d0b5:	call   QWORD PTR [rip+0xffffffffffff40c5]        # 0x1001180
 100d0bb:	test   rax,rax
 100d0be:	je     0x100d0e0
 100d0c0:	mov    QWORD PTR [rax+0x8],rsi
 100d0c4:	mov    rcx,QWORD PTR [rip+0x5095]        # 0x1012160
 100d0cb:	mov    QWORD PTR [rax],rcx
 100d0ce:	mov    QWORD PTR [rip+0x508b],rax        # 0x1012160
 100d0d5:	jmp    0x100d0e0
 100d0d7:	mov    rcx,rdi
 100d0da:	call   QWORD PTR [rip+0xffffffffffff3f80]        # 0x1001060
 100d0e0:	mov    rax,QWORD PTR [rip+0xffffffffffff47a9]        # 0x1001890
 100d0e7:	mov    QWORD PTR [rsp+0x50],rdi
 100d0ec:	test   rax,rax
 100d0ef:	je     0x100d100
 100d0f1:	lea    rdx,[rsp+0x20]
 100d0f6:	mov    ecx,0x2
 100d0fb:	call   rax
 100d0fd:	mov    rbx,rax
 100d100:	test   rbx,rbx
 100d103:	jne    0x100d1a0
 100d109:	cmp    DWORD PTR [rsi+0x14],ebx
 100d10c:	je     0x100d137
 100d10e:	cmp    DWORD PTR [rsi+0x1c],ebx
 100d111:	je     0x100d137
 100d113:	movsxd rax,DWORD PTR [rdi+0x3c]
 100d117:	cmp    DWORD PTR [rax+rdi*1],0x4550
 100d11e:	jne    0x100d137
 100d120:	cmp    DWORD PTR [rax+rdi*1+0x8],r15d
 100d125:	jne    0x100d137
 100d127:	cmp    rdi,QWORD PTR [rax+rdi*1+0x30]
 100d12c:	jne    0x100d137
 100d12e:	mov    rbx,QWORD PTR [r14+rbp*8]
 100d132:	test   rbx,rbx
 100d135:	jne    0x100d1a0
 100d137:	mov    rdx,QWORD PTR [rsp+0x48]
 100d13c:	mov    rcx,rdi
 100d13f:	call   QWORD PTR [rip+0xffffffffffff4143]        # 0x1001288
 100d145:	mov    rbx,rax
 100d148:	test   rax,rax
 100d14b:	jne    0x100d1a0
 100d14d:	call   QWORD PTR [rip+0xffffffffffff40ed]        # 0x1001240
 100d153:	mov    DWORD PTR [rsp+0x60],eax
 100d157:	mov    rax,QWORD PTR [rip+0xffffffffffff473a]        # 0x1001898
 100d15e:	test   rax,rax
 100d161:	je     0x100d170
 100d163:	lea    rdx,[rsp+0x20]
 100d168:	lea    ecx,[rbx+0x4]
 100d16b:	call   rax
 100d16d:	mov    rbx,rax
 100d170:	test   rbx,rbx
 100d173:	jne    0x100d1a0
 100d175:	lea    rax,[rsp+0x20]
 100d17a:	lea    r9,[rsp+0xc0]
 100d182:	lea    r8d,[rbx+0x1]
 100d186:	xor    edx,edx
 100d188:	mov    ecx,0xc06d007f
 100d18d:	mov    QWORD PTR [rsp+0xc0],rax
 100d195:	call   QWORD PTR [rip+0xffffffffffff40e5]        # 0x1001280
 100d19b:	mov    rbx,QWORD PTR [rsp+0x58]
 100d1a0:	mov    QWORD PTR [r13+0x0],rbx
 100d1a4:	mov    rax,QWORD PTR [rip+0xffffffffffff46e5]        # 0x1001890
 100d1ab:	test   rax,rax
 100d1ae:	je     0x100d1cb
 100d1b0:	and    DWORD PTR [rsp+0x60],0x0
 100d1b5:	lea    rdx,[rsp+0x20]
 100d1ba:	mov    ecx,0x5
 100d1bf:	mov    QWORD PTR [rsp+0x50],rdi
 100d1c4:	mov    QWORD PTR [rsp+0x58],rbx
 100d1c9:	call   rax
 100d1cb:	mov    rax,rbx
 100d1ce:	mov    rbx,QWORD PTR [rsp+0xc8]
 100d1d6:	add    rsp,0x70
 100d1da:	pop    r15
 100d1dc:	pop    r14
 100d1de:	pop    r13
 100d1e0:	pop    r12
 100d1e2:	pop    rdi
 100d1e3:	pop    rsi
 100d1e4:	pop    rbp
 100d1e5:	ret    
 100d1e6:	int3   
 100d1e7:	int3   
 100d1e8:	int3   
 100d1e9:	int3   
 100d1ea:	int3   
 100d1eb:	int3   
 100d1ec:	jmp    QWORD PTR [rip+0xffffffffffff40c6]        # 0x10012b8
 100d1f2:	int3   
 100d1f3:	int3   
 100d1f4:	int3   
 100d1f5:	int3   
 100d1f6:	int3   
 100d1f7:	int3   
 100d1f8:	jmp    QWORD PTR [rip+0xffffffffffff40c2]        # 0x10012c0
 100d1fe:	int3   
 100d1ff:	int3   
 100d200:	int3   
 100d201:	int3   
 100d202:	int3   
 100d203:	int3   
 100d204:	int3   
 100d205:	int3   
 100d206:	data16 nop WORD PTR [rax+rax*1+0x0]
 100d210:	sub    rsp,0x10
 100d214:	mov    QWORD PTR [rsp],r10
 100d218:	mov    QWORD PTR [rsp+0x8],r11
 100d21d:	xor    r11,r11
 100d220:	lea    r10,[rsp+0x18]
 100d225:	sub    r10,rax
 100d228:	cmovb  r10,r11
 100d22c:	mov    r11,QWORD PTR gs:0x10
 100d235:	cmp    r10,r11
 100d238:	jae    0x100d250
 100d23a:	and    r10w,0xf000
 100d240:	lea    r11,[r11-0x1000]
 100d247:	mov    BYTE PTR [r11],0x0
 100d24b:	cmp    r10,r11
 100d24e:	jne    0x100d240
 100d250:	mov    r10,QWORD PTR [rsp]
 100d254:	mov    r11,QWORD PTR [rsp+0x8]
 100d259:	add    rsp,0x10
 100d25d:	ret    
 100d25e:	int3   
 100d25f:	int3   
 100d260:	int3   
 100d261:	int3   
 100d262:	int3   
 100d263:	int3   
 100d264:	jmp    QWORD PTR [rip+0xffffffffffff40c6]        # 0x1001330
 100d26a:	int3   
 100d26b:	int3   
 100d26c:	int3   
 100d26d:	int3   
 100d26e:	int3   
 100d26f:	int3   
 100d270:	jmp    QWORD PTR [rip+0xffffffffffff40c2]        # 0x1001338
 100d276:	int3   
 100d277:	int3   
 100d278:	int3   
 100d279:	int3   
 100d27a:	int3   
 100d27b:	int3   
 100d27c:	rex push rbp
 100d27e:	mov    rbp,rsp
 100d281:	sub    rsp,0x30
 100d285:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100d28e:	mov    QWORD PTR [rsp+0x40],rbx
 100d293:	xor    edx,edx
 100d295:	lea    rcx,[rsp+0x48]
 100d29a:	call   QWORD PTR [rip+0xffffffffffff4048]        # 0x10012e8
 100d2a0:	nop
 100d2a1:	jmp    0x100d2d2
 100d2a3:	mov    rax,QWORD PTR [rbx]
 100d2a6:	mov    QWORD PTR [rip+0x4ebb],rax        # 0x1012168
 100d2ad:	mov    rcx,QWORD PTR [rbx+0x8]
 100d2b1:	call   QWORD PTR [rip+0xffffffffffff4021]        # 0x10012d8
 100d2b7:	test   rax,rax
 100d2ba:	je     0x100d2ca
 100d2bc:	mov    r8,QWORD PTR [rax]
 100d2bf:	mov    edx,0x1
 100d2c4:	mov    rcx,rax
 100d2c7:	call   QWORD PTR [r8]
 100d2ca:	mov    rcx,rbx
 100d2cd:	call   0x10055c4
 100d2d2:	mov    rbx,QWORD PTR [rip+0x4e8f]        # 0x1012168
 100d2d9:	test   rbx,rbx
 100d2dc:	jne    0x100d2a3
 100d2de:	lea    rcx,[rsp+0x48]
 100d2e3:	call   QWORD PTR [rip+0xffffffffffff3ff7]        # 0x10012e0
 100d2e9:	mov    rbx,QWORD PTR [rsp+0x40]
 100d2ee:	add    rsp,0x30
 100d2f2:	pop    rbp
 100d2f3:	ret    
 100d2f4:	int3   
 100d2f5:	int3   
 100d2f6:	int3   
 100d2f7:	int3   
 100d2f8:	int3   
 100d2f9:	int3   
 100d2fa:	int3   
 100d2fb:	int3   
 100d2fc:	rex push rbp
 100d2fe:	mov    rbp,rsp
 100d301:	sub    rsp,0x20
 100d305:	mov    rcx,QWORD PTR [rcx+0x8]
 100d309:	mov    r8,rdx
 100d30c:	xor    edx,edx
 100d30e:	add    rsp,0x20
 100d312:	pop    rbp
 100d313:	rex.W jmp QWORD PTR [rip+0xffffffffffff3dc6]        # 0x10010e0
 100d31a:	int3   
 100d31b:	int3   
 100d31c:	int3   
 100d31d:	int3   
 100d31e:	int3   
 100d31f:	int3   
 100d320:	test   rdx,rdx
 100d323:	je     0x100d341
 100d325:	push   rbp
 100d326:	mov    rbp,rsp
 100d329:	sub    rsp,0x20
 100d32d:	mov    rcx,QWORD PTR [rcx+0x8]
 100d331:	mov    r8,rdx
 100d334:	xor    edx,edx
 100d336:	call   QWORD PTR [rip+0xffffffffffff3d9c]        # 0x10010d8
 100d33c:	add    rsp,0x20
 100d340:	pop    rbp
 100d341:	ret    
 100d342:	int3   
 100d343:	int3   
 100d344:	int3   
 100d345:	int3   
 100d346:	int3   
 100d347:	int3   
 100d348:	rex push rbp
 100d34a:	mov    rbp,rsp
 100d34d:	sub    rsp,0x20
 100d351:	test   rdx,rdx
 100d354:	jne    0x100d364
 100d356:	mov    rax,QWORD PTR [rcx]
 100d359:	mov    rdx,r8
 100d35c:	add    rsp,0x20
 100d360:	pop    rbp
 100d361:	rex.W jmp QWORD PTR [rax]
 100d364:	test   r8,r8
 100d367:	jne    0x100d377
 100d369:	mov    rax,QWORD PTR [rcx]
 100d36c:	call   QWORD PTR [rax+0x8]
 100d36f:	xor    eax,eax
 100d371:	add    rsp,0x20
 100d375:	pop    rbp
 100d376:	ret    
 100d377:	mov    rcx,QWORD PTR [rcx+0x8]
 100d37b:	mov    r9,r8
 100d37e:	mov    r8,rdx
 100d381:	xor    edx,edx
 100d383:	add    rsp,0x20
 100d387:	pop    rbp
 100d388:	rex.W jmp QWORD PTR [rip+0xffffffffffff3d41]        # 0x10010d0
 100d38f:	int3   
 100d390:	int3   
 100d391:	int3   
 100d392:	int3   
 100d393:	int3   
 100d394:	int3   
 100d395:	int3   
 100d396:	int3   
 100d397:	int3   
 100d398:	rex push rbp
 100d39a:	mov    rbp,rsp
 100d39d:	sub    rsp,0x20
 100d3a1:	mov    rcx,QWORD PTR [rcx+0x8]
 100d3a5:	mov    r8,rdx
 100d3a8:	xor    edx,edx
 100d3aa:	add    rsp,0x20
 100d3ae:	pop    rbp
 100d3af:	rex.W jmp QWORD PTR [rip+0xffffffffffff3db2]        # 0x1001168
 100d3b6:	int3   
 100d3b7:	int3   
 100d3b8:	int3   
 100d3b9:	int3   
 100d3ba:	int3   
 100d3bb:	int3   
 100d3bc:	mov    QWORD PTR [rsp+0x8],rbx
 100d3c1:	mov    QWORD PTR [rsp+0x10],rdi
 100d3c6:	push   rbp
 100d3c7:	mov    rbp,rsp
 100d3ca:	sub    rsp,0x20
 100d3ce:	cmp    BYTE PTR [rcx+0x10],0x0
 100d3d2:	lea    rax,[rip+0xffffffffffff6d1f]        # 0x10040f8
 100d3d9:	mov    edi,edx
 100d3db:	mov    QWORD PTR [rcx],rax
 100d3de:	mov    rbx,rcx
 100d3e1:	je     0x100d3f2
 100d3e3:	mov    rcx,QWORD PTR [rcx+0x8]
 100d3e7:	test   rcx,rcx
 100d3ea:	je     0x100d3f2
 100d3ec:	call   QWORD PTR [rip+0xffffffffffff3c7e]        # 0x1001070
 100d3f2:	test   dil,0x1
 100d3f6:	je     0x100d400
 100d3f8:	mov    rcx,rbx
 100d3fb:	call   0x10055c4
 100d400:	mov    rdi,QWORD PTR [rsp+0x38]
 100d405:	mov    rax,rbx
 100d408:	mov    rbx,QWORD PTR [rsp+0x30]
 100d40d:	add    rsp,0x20
 100d411:	pop    rbp
 100d412:	ret    
 100d413:	int3   
 100d414:	int3   
 100d415:	int3   
 100d416:	int3   
 100d417:	int3   
 100d418:	int3   
 100d419:	int3   
 100d41a:	int3   
 100d41b:	int3   
 100d41c:	rex push rbp
 100d41e:	mov    rbp,rsp
 100d421:	sub    rsp,0x20
 100d425:	mov    rcx,QWORD PTR [rcx+0x8]
 100d429:	mov    rax,QWORD PTR [rcx]
 100d42c:	add    rsp,0x20
 100d430:	pop    rbp
 100d431:	rex.W jmp QWORD PTR [rax+0x8]
 100d435:	int3   
 100d436:	int3   
 100d437:	int3   
 100d438:	int3   
 100d439:	int3   
 100d43a:	int3   
 100d43b:	int3   
 100d43c:	rex push rbp
 100d43e:	mov    rbp,rsp
 100d441:	lock inc DWORD PTR [rcx+0x20]
 100d445:	lea    rax,[rcx+0x10]
 100d449:	pop    rbp
 100d44a:	ret    
 100d44b:	int3   
 100d44c:	int3   
 100d44d:	int3   
 100d44e:	int3   
 100d44f:	int3   
 100d450:	int3   
 100d451:	int3   
 100d452:	int3   
 100d453:	int3   
 100d454:	rex push rbp
 100d456:	mov    rbp,rsp
 100d459:	mov    rax,rcx
 100d45c:	pop    rbp
 100d45d:	ret    
 100d45e:	int3   
 100d45f:	int3   
 100d460:	int3   
 100d461:	int3   
 100d462:	int3   
 100d463:	int3   
 100d464:	mov    QWORD PTR [rsp+0x8],rbx
 100d469:	push   rbp
 100d46a:	mov    rbp,rsp
 100d46d:	sub    rsp,0x20
 100d471:	lea    rax,[rip+0xffffffffffff6ca8]        # 0x1004120
 100d478:	mov    rbx,rcx
 100d47b:	mov    QWORD PTR [rcx],rax
 100d47e:	test   dl,0x1
 100d481:	je     0x100d488
 100d483:	call   0x10055c4
 100d488:	mov    rax,rbx
 100d48b:	mov    rbx,QWORD PTR [rsp+0x30]
 100d490:	add    rsp,0x20
 100d494:	pop    rbp
 100d495:	ret    
 100d496:	int3   
 100d497:	int3   
 100d498:	int3   
 100d499:	int3   
 100d49a:	int3   
 100d49b:	int3   
 100d49c:	mov    QWORD PTR [rsp+0x8],rbx
 100d4a1:	mov    QWORD PTR [rsp+0x10],rdi
 100d4a6:	push   rbp
 100d4a7:	mov    rbp,rsp
 100d4aa:	sub    rsp,0x20
 100d4ae:	lea    ebx,[rdx+0x8]
 100d4b1:	movsxd r9,r8d
 100d4b4:	mov    rdi,rcx
 100d4b7:	and    ebx,0xfffffff8
 100d4ba:	movsxd r8,ebx
 100d4bd:	jne    0x100d4c4
 100d4bf:	xor    r8d,r8d
 100d4c2:	jmp    0x100d4dc
 100d4c4:	xor    edx,edx
 100d4c6:	or     rax,0xffffffffffffffff
 100d4ca:	div    r8
 100d4cd:	cmp    rax,r9
 100d4d0:	jb     0x100d50c
 100d4d2:	imul   r8,r9
 100d4d6:	cmp    r8,0xffffffffffffffe7
 100d4da:	ja     0x100d50c
 100d4dc:	mov    rcx,QWORD PTR [rcx+0x8]
 100d4e0:	lea    rdx,[r8+0x18]
 100d4e4:	mov    rax,QWORD PTR [rcx]
 100d4e7:	call   QWORD PTR [rax]
 100d4e9:	mov    r11,rax
 100d4ec:	test   rax,rax
 100d4ef:	je     0x100d50c
 100d4f1:	and    DWORD PTR [r11+0x8],0x0
 100d4f6:	mov    QWORD PTR [rax],rdi
 100d4f9:	mov    DWORD PTR [rax+0x10],0x1
 100d500:	lea    eax,[rbx-0x1]
 100d503:	mov    DWORD PTR [r11+0xc],eax
 100d507:	mov    rax,r11
 100d50a:	jmp    0x100d50e
 100d50c:	xor    eax,eax
 100d50e:	mov    rbx,QWORD PTR [rsp+0x30]
 100d513:	mov    rdi,QWORD PTR [rsp+0x38]
 100d518:	add    rsp,0x20
 100d51c:	pop    rbp
 100d51d:	ret    
 100d51e:	int3   
 100d51f:	int3   
 100d520:	int3   
 100d521:	int3   
 100d522:	int3   
 100d523:	int3   
 100d524:	mov    QWORD PTR [rsp+0x8],rbx
 100d529:	push   rbp
 100d52a:	mov    rbp,rsp
 100d52d:	sub    rsp,0x20
 100d531:	lea    ebx,[r8+0x8]
 100d535:	mov    eax,r9d
 100d538:	and    ebx,0xfffffff8
 100d53b:	mov    r8d,ebx
 100d53e:	imul   r8,rax
 100d542:	mov    eax,0xffffffff
 100d547:	cmp    r8,rax
 100d54a:	ja     0x100d575
 100d54c:	cmp    r8d,0xffffffe7
 100d550:	ja     0x100d575
 100d552:	mov    rcx,QWORD PTR [rcx+0x8]
 100d556:	add    r8d,0x18
 100d55a:	mov    r9,QWORD PTR [rcx]
 100d55d:	call   QWORD PTR [r9+0x10]
 100d561:	mov    r11,rax
 100d564:	test   rax,rax
 100d567:	je     0x100d575
 100d569:	lea    eax,[rbx-0x1]
 100d56c:	mov    DWORD PTR [r11+0xc],eax
 100d570:	mov    rax,r11
 100d573:	jmp    0x100d577
 100d575:	xor    eax,eax
 100d577:	mov    rbx,QWORD PTR [rsp+0x30]
 100d57c:	add    rsp,0x20
 100d580:	pop    rbp
 100d581:	ret    
 100d582:	int3   
 100d583:	int3   
 100d584:	int3   
 100d585:	int3   
 100d586:	int3   
 100d587:	int3   
 100d588:	jmp    QWORD PTR [rip+0xffffffffffff3f0a]        # 0x1001498
 100d58e:	int3   
 100d58f:	int3   
 100d590:	int3   
 100d591:	int3   
 100d592:	int3   
 100d593:	int3   
 100d594:	jmp    QWORD PTR [rip+0xffffffffffff3f06]        # 0x10014a0
 100d59a:	int3   
 100d59b:	int3   
 100d59c:	int3   
 100d59d:	int3   
 100d59e:	int3   
 100d59f:	int3   
 100d5a0:	jmp    QWORD PTR [rip+0xffffffffffff3eba]        # 0x1001460
 100d5a6:	int3   
 100d5a7:	int3   
 100d5a8:	int3   
 100d5a9:	int3   
 100d5aa:	int3   
 100d5ab:	int3   
 100d5ac:	jmp    QWORD PTR [rip+0xffffffffffff3ea6]        # 0x1001458
 100d5b2:	int3   
 100d5b3:	int3   
 100d5b4:	int3   
 100d5b5:	int3   
 100d5b6:	int3   
 100d5b7:	int3   
 100d5b8:	int3   
 100d5b9:	int3   
 100d5ba:	int3   
 100d5bb:	int3   
 100d5bc:	int3   
 100d5bd:	int3   
 100d5be:	int3   
 100d5bf:	int3   
 100d5c0:	rex push rbx
 100d5c2:	sub    rsp,0x20
 100d5c6:	mov    rbx,rcx
 100d5c9:	call   QWORD PTR [rip+0xffffffffffff3bb9]        # 0x1001188
 100d5cf:	mov    rcx,rbx
 100d5d2:	movzx  edx,ax
 100d5d5:	add    rsp,0x20
 100d5d9:	pop    rbx
 100d5da:	jmp    0x100d5f0
 100d5df:	int3   
 100d5e0:	int3   
 100d5e1:	int3   
 100d5e2:	int3   
 100d5e3:	int3   
 100d5e4:	int3   
 100d5e5:	int3   
 100d5e6:	int3   
 100d5e7:	int3   
 100d5e8:	int3   
 100d5e9:	int3   
 100d5ea:	int3   
 100d5eb:	int3   
 100d5ec:	int3   
 100d5ed:	int3   
 100d5ee:	int3   
 100d5ef:	int3   
 100d5f0:	rex push rbp
 100d5f2:	push   rsi
 100d5f3:	push   r12
 100d5f5:	push   r14
 100d5f7:	lea    rbp,[rsp-0xf58]
 100d5ff:	mov    eax,0x1058
 100d604:	call   0x100d210
 100d609:	sub    rsp,rax
 100d60c:	mov    rax,QWORD PTR [rip+0x3afd]        # 0x1011110
 100d613:	xor    rax,rsp
 100d616:	mov    QWORD PTR [rbp+0xf40],rax
 100d61d:	movzx  esi,dx
 100d620:	xor    r12d,r12d
 100d623:	mov    WORD PTR [rsp+0x30],r12w
 100d629:	mov    eax,esi
 100d62b:	cmp    esi,0xc04
 100d631:	je     0x100d641
 100d633:	cmp    eax,0x1004
 100d638:	jne    0x100d646
 100d63a:	mov    esi,0x804
 100d63f:	jmp    0x100d646
 100d641:	mov    esi,0x404
 100d646:	mov    QWORD PTR [rsp+0x1088],rbx
 100d64e:	mov    r14d,0x105
 100d654:	mov    QWORD PTR [rsp+0x1090],rdi
 100d65c:	lea    r9,[rsp+0x30]
 100d661:	lea    rdx,[rbp+0xd30]
 100d668:	mov    r8d,r14d
 100d66b:	mov    QWORD PTR [rsp+0x1098],r13
 100d673:	mov    QWORD PTR [rsp+0x20],r14
 100d678:	mov    QWORD PTR [rsp+0x1050],r15
 100d680:	call   0x100de10
 100d685:	test   al,al
 100d687:	je     0x100ddc2
 100d68d:	lea    rax,[rsp+0x30]
 100d692:	lea    r13,[rip+0xffffffffffff6ac7]        # 0x1004160
 100d699:	lea    r9,[rbp+0xd30]
 100d6a0:	lea    rcx,[rbp+0xb20]
 100d6a7:	movzx  r8d,si
 100d6ab:	mov    edx,r14d
 100d6ae:	mov    QWORD PTR [rsp+0x28],r13
 100d6b3:	mov    QWORD PTR [rsp+0x20],rax
 100d6b8:	call   0x100e020
 100d6bd:	lea    rdx,[rbp+0x3d0]
 100d6c4:	lea    rcx,[rbp+0xb20]
 100d6cb:	call   QWORD PTR [rip+0xffffffffffff3b17]        # 0x10011e8
 100d6d1:	cmp    rax,0xffffffffffffffff
 100d6d5:	jne    0x100ddaa
 100d6db:	mov    rax,r12
 100d6de:	xchg   ax,ax
 100d6e0:	movzx  ecx,WORD PTR [rbp+rax*2+0xd30]
 100d6e8:	cmp    r12w,cx
 100d6ec:	je     0x100d701
 100d6ee:	mov    WORD PTR [rbp+rax*2+0xb20],cx
 100d6f6:	inc    rax
 100d6f9:	cmp    rax,0x104
 100d6ff:	jb     0x100d6e0
 100d701:	movzx  r15d,WORD PTR [rsp+0x30]
 100d707:	mov    WORD PTR [rbp+rax*2+0xb20],r12w
 100d710:	mov    edi,0x1
 100d715:	cmp    r12w,WORD PTR [rbp+rax*2+0xd30]
 100d71e:	jne    0x100d967
 100d724:	movzx  r11d,si
 100d728:	lea    r9,[rbp+0xac0]
 100d72f:	mov    WORD PTR [rbp+0xac0],r12w
 100d737:	lea    r8,[rbp+0xac2]
 100d73e:	mov    r10d,edi
 100d741:	mov    eax,0xcccccccd
 100d746:	add    r8,0x2
 100d74a:	mul    r11d
 100d74d:	shr    edx,0x3
 100d750:	movzx  eax,dx
 100d753:	shl    ax,0x2
 100d757:	lea    ecx,[rax+rdx*1]
 100d75a:	add    cx,cx
 100d75d:	sub    r11w,cx
 100d761:	add    r11w,0x30
 100d766:	mov    WORD PTR [r8-0x2],r11w
 100d76b:	mov    r11d,edx
 100d76e:	test   edx,edx
 100d770:	je     0x100d77b
 100d772:	inc    r10d
 100d775:	cmp    r10d,0x29
 100d779:	jb     0x100d741
 100d77b:	lea    rax,[rbp+0xac0]
 100d782:	sub    r8,0x2
 100d786:	cmp    rax,r8
 100d789:	jae    0x100d7ae
 100d78b:	nop    DWORD PTR [rax+rax*1+0x0]
 100d790:	movzx  eax,WORD PTR [r8]
 100d794:	movzx  ecx,WORD PTR [r9]
 100d798:	sub    r8,0x2
 100d79c:	mov    WORD PTR [r9],ax
 100d7a0:	mov    WORD PTR [r8+0x2],cx
 100d7a5:	add    r9,0x2
 100d7a9:	cmp    r9,r8
 100d7ac:	jb     0x100d790
 100d7ae:	lea    rax,[rbp+0xb20]
 100d7b5:	mov    rbx,r12
 100d7b8:	cmp    r12w,WORD PTR [rbp+0xb20]
 100d7c0:	je     0x100d7cf
 100d7c2:	add    rax,0x2
 100d7c6:	inc    rbx
 100d7c9:	cmp    r12w,WORD PTR [rax]
 100d7cd:	jne    0x100d7c2
 100d7cf:	mov    rax,rbx
 100d7d2:	test   rbx,rbx
 100d7d5:	je     0x100d7db
 100d7d7:	lea    rax,[rbx-0x1]
 100d7db:	movzx  ecx,WORD PTR [rbp+rax*2+0xb20]
 100d7e3:	mov    edx,0x5c
 100d7e8:	lea    r11d,[rdx-0x2d]
 100d7ec:	cmp    dx,cx
 100d7ef:	je     0x100d837
 100d7f1:	cmp    r11w,cx
 100d7f5:	je     0x100d837
 100d7f7:	movzx  eax,WORD PTR [rbp+0xac0]
 100d7fe:	cmp    dx,ax
 100d801:	je     0x100d837
 100d803:	cmp    r11w,ax
 100d807:	je     0x100d837
 100d809:	lea    rcx,[rbp+0xb20]
 100d810:	mov    rdx,r14
 100d813:	lea    r8,[rip+0xffffffffffff410a]        # 0x1001924
 100d81a:	lea    rcx,[rcx+rbx*2]
 100d81e:	sub    rdx,rbx
 100d821:	call   0x100e180
 100d826:	test   al,al
 100d828:	je     0x100d972
 100d82e:	inc    rbx
 100d831:	mov    r11d,0x2f
 100d837:	lea    r10,[rbp+0xb20]
 100d83e:	mov    r9,r14
 100d841:	lea    r10,[r10+rbx*2]
 100d845:	sub    r9,rbx
 100d848:	je     0x100d967
 100d84e:	mov    rcx,r12
 100d851:	dec    r9
 100d854:	je     0x100d87d
 100d856:	lea    r8,[rbp+0xac0]
 100d85d:	mov    rax,r10
 100d860:	sub    r8,r10
 100d863:	movzx  edx,WORD PTR [r8+rax*1]
 100d868:	cmp    r12w,dx
 100d86c:	je     0x100d87d
 100d86e:	inc    rcx
 100d871:	mov    WORD PTR [rax],dx
 100d874:	add    rax,0x2
 100d878:	cmp    rcx,r9
 100d87b:	jb     0x100d863
 100d87d:	mov    WORD PTR [r10+rcx*2],r12w
 100d882:	cmp    r12w,WORD PTR [rbp+rcx*2+0xac0]
 100d88b:	jne    0x100d967
 100d891:	lea    rax,[rbp+0xb20]
 100d898:	mov    rbx,r12
 100d89b:	cmp    r12w,WORD PTR [rbp+0xb20]
 100d8a3:	je     0x100d8bd
 100d8a5:	data16 data16 nop WORD PTR [rax+rax*1+0x0]
 100d8b0:	add    rax,0x2
 100d8b4:	inc    rbx
 100d8b7:	cmp    r12w,WORD PTR [rax]
 100d8bb:	jne    0x100d8b0
 100d8bd:	mov    rax,rbx
 100d8c0:	test   rbx,rbx
 100d8c3:	je     0x100d8c9
 100d8c5:	lea    rax,[rbx-0x1]
 100d8c9:	movzx  ecx,WORD PTR [rbp+rax*2+0xb20]
 100d8d1:	mov    eax,0x5c
 100d8d6:	cmp    ax,cx
 100d8d9:	je     0x100d911
 100d8db:	cmp    r11w,cx
 100d8df:	je     0x100d911
 100d8e1:	cmp    ax,r15w
 100d8e5:	je     0x100d911
 100d8e7:	cmp    r11w,r15w
 100d8eb:	je     0x100d911
 100d8ed:	lea    rcx,[rbp+0xb20]
 100d8f4:	mov    rdx,r14
 100d8f7:	lea    r8,[rip+0xffffffffffff4026]        # 0x1001924
 100d8fe:	lea    rcx,[rcx+rbx*2]
 100d902:	sub    rdx,rbx
 100d905:	call   0x100e180
 100d90a:	test   al,al
 100d90c:	je     0x100d972
 100d90e:	inc    rbx
 100d911:	lea    r10,[rbp+0xb20]
 100d918:	mov    r9,r14
 100d91b:	lea    r10,[r10+rbx*2]
 100d91f:	sub    r9,rbx
 100d922:	je     0x100d967
 100d924:	mov    rcx,r12
 100d927:	dec    r9
 100d92a:	je     0x100d95a
 100d92c:	lea    r8,[rsp+0x30]
 100d931:	mov    rax,r10
 100d934:	sub    r8,r10
 100d937:	nop    WORD PTR [rax+rax*1+0x0]
 100d940:	movzx  edx,WORD PTR [r8+rax*1]
 100d945:	cmp    r12w,dx
 100d949:	je     0x100d95a
 100d94b:	inc    rcx
 100d94e:	mov    WORD PTR [rax],dx
 100d951:	add    rax,0x2
 100d955:	cmp    rcx,r9
 100d958:	jb     0x100d940
 100d95a:	mov    WORD PTR [r10+rcx*2],r12w
 100d95f:	cmp    r12w,WORD PTR [rsp+rcx*2+0x30]
 100d965:	je     0x100d972
 100d967:	mov    ecx,0x7a
 100d96c:	call   QWORD PTR [rip+0xffffffffffff3746]        # 0x10010b8
 100d972:	lea    rdx,[rbp+0x870]
 100d979:	lea    rcx,[rbp+0xb20]
 100d980:	call   QWORD PTR [rip+0xffffffffffff3862]        # 0x10011e8
 100d986:	cmp    rax,0xffffffffffffffff
 100d98a:	jne    0x100ddaa
 100d990:	mov    ebx,0x409
 100d995:	cmp    bx,si
 100d998:	je     0x100dc75
 100d99e:	lea    rax,[rsp+0x30]
 100d9a3:	lea    r9,[rbp+0xd30]
 100d9aa:	lea    rcx,[rbp+0xb20]
 100d9b1:	mov    r8d,ebx
 100d9b4:	mov    rdx,r14
 100d9b7:	mov    QWORD PTR [rsp+0x28],r13
 100d9bc:	mov    QWORD PTR [rsp+0x20],rax
 100d9c1:	call   0x100e020
 100d9c6:	lea    rdx,[rbp+0x620]
 100d9cd:	lea    rcx,[rbp+0xb20]
 100d9d4:	call   QWORD PTR [rip+0xffffffffffff380e]        # 0x10011e8
 100d9da:	cmp    rax,0xffffffffffffffff
 100d9de:	jne    0x100ddaa
 100d9e4:	mov    rax,r12
 100d9e7:	nop    WORD PTR [rax+rax*1+0x0]
 100d9f0:	movzx  ecx,WORD PTR [rbp+rax*2+0xd30]
 100d9f8:	cmp    r12w,cx
 100d9fc:	je     0x100da11
 100d9fe:	mov    WORD PTR [rbp+rax*2+0xb20],cx
 100da06:	inc    rax
 100da09:	cmp    rax,0x104
 100da0f:	jb     0x100d9f0
 100da11:	mov    WORD PTR [rbp+rax*2+0xb20],r12w
 100da1a:	cmp    r12w,WORD PTR [rbp+rax*2+0xd30]
 100da23:	jne    0x100dc4c
 100da29:	lea    r9,[rbp+0xac0]
 100da30:	mov    WORD PTR [rbp+0xac0],r12w
 100da38:	lea    r8,[rbp+0xac2]
 100da3f:	nop
 100da40:	mov    eax,0xcccccccd
 100da45:	add    r8,0x2
 100da49:	mul    ebx
 100da4b:	shr    edx,0x3
 100da4e:	movzx  eax,dx
 100da51:	shl    ax,0x2
 100da55:	lea    ecx,[rax+rdx*1]
 100da58:	add    cx,cx
 100da5b:	sub    bx,cx
 100da5e:	add    bx,0x30
 100da62:	mov    WORD PTR [r8-0x2],bx
 100da67:	mov    ebx,edx
 100da69:	test   edx,edx
 100da6b:	je     0x100da74
 100da6d:	inc    edi
 100da6f:	cmp    edi,0x29
 100da72:	jb     0x100da40
 100da74:	lea    rax,[rbp+0xac0]
 100da7b:	sub    r8,0x2
 100da7f:	cmp    rax,r8
 100da82:	jae    0x100daae
 100da84:	data16 data16 data16 nop WORD PTR [rax+rax*1+0x0]
 100da90:	movzx  eax,WORD PTR [r8]
 100da94:	movzx  ecx,WORD PTR [r9]
 100da98:	sub    r8,0x2
 100da9c:	mov    WORD PTR [r9],ax
 100daa0:	mov    WORD PTR [r8+0x2],cx
 100daa5:	add    r9,0x2
 100daa9:	cmp    r9,r8
 100daac:	jb     0x100da90
 100daae:	lea    rax,[rbp+0xb20]
 100dab5:	mov    rbx,r12
 100dab8:	cmp    r12w,WORD PTR [rbp+0xb20]
 100dac0:	je     0x100dacf
 100dac2:	add    rax,0x2
 100dac6:	inc    rbx
 100dac9:	cmp    r12w,WORD PTR [rax]
 100dacd:	jne    0x100dac2
 100dacf:	mov    rax,rbx
 100dad2:	test   rbx,rbx
 100dad5:	je     0x100dadb
 100dad7:	lea    rax,[rbx-0x1]
 100dadb:	movzx  ecx,WORD PTR [rbp+rax*2+0xb20]
 100dae3:	mov    edi,0x5c
 100dae8:	lea    r11d,[rdi-0x2d]
 100daec:	cmp    di,cx
 100daef:	je     0x100db35
 100daf1:	cmp    r11w,cx
 100daf5:	je     0x100db35
 100daf7:	movzx  eax,WORD PTR [rbp+0xac0]
 100dafe:	cmp    di,ax
 100db01:	je     0x100db35
 100db03:	cmp    r11w,ax
 100db07:	je     0x100db35
 100db09:	lea    rcx,[rbp+0xb20]
 100db10:	mov    rdx,r14
 100db13:	lea    r8,[rip+0xffffffffffff3e0a]        # 0x1001924
 100db1a:	lea    rcx,[rcx+rbx*2]
 100db1e:	sub    rdx,rbx
 100db21:	call   0x100e180
 100db26:	test   al,al
 100db28:	je     0x100dc57
 100db2e:	inc    rbx
 100db31:	lea    r11d,[rdi-0x2d]
 100db35:	lea    r10,[rbp+0xb20]
 100db3c:	mov    r9,r14
 100db3f:	lea    r10,[r10+rbx*2]
 100db43:	sub    r9,rbx
 100db46:	je     0x100dc4c
 100db4c:	mov    rcx,r12
 100db4f:	dec    r9
 100db52:	je     0x100db7b
 100db54:	lea    r8,[rbp+0xac0]
 100db5b:	mov    rax,r10
 100db5e:	sub    r8,r10
 100db61:	movzx  edx,WORD PTR [r8+rax*1]
 100db66:	cmp    r12w,dx
 100db6a:	je     0x100db7b
 100db6c:	inc    rcx
 100db6f:	mov    WORD PTR [rax],dx
 100db72:	add    rax,0x2
 100db76:	cmp    rcx,r9
 100db79:	jb     0x100db61
 100db7b:	mov    WORD PTR [r10+rcx*2],r12w
 100db80:	cmp    r12w,WORD PTR [rbp+rcx*2+0xac0]
 100db89:	jne    0x100dc4c
 100db8f:	lea    rax,[rbp+0xb20]
 100db96:	mov    rbx,r12
 100db99:	cmp    r12w,WORD PTR [rbp+0xb20]
 100dba1:	je     0x100dbb0
 100dba3:	add    rax,0x2
 100dba7:	inc    rbx
 100dbaa:	cmp    r12w,WORD PTR [rax]
 100dbae:	jne    0x100dba3
 100dbb0:	mov    rax,rbx
 100dbb3:	test   rbx,rbx
 100dbb6:	je     0x100dbbc
 100dbb8:	lea    rax,[rbx-0x1]
 100dbbc:	movzx  ecx,WORD PTR [rbp+rax*2+0xb20]
 100dbc4:	cmp    di,cx
 100dbc7:	je     0x100dbff
 100dbc9:	cmp    r11w,cx
 100dbcd:	je     0x100dbff
 100dbcf:	cmp    di,r15w
 100dbd3:	je     0x100dbff
 100dbd5:	cmp    r11w,r15w
 100dbd9:	je     0x100dbff
 100dbdb:	lea    rcx,[rbp+0xb20]
 100dbe2:	mov    rdx,r14
 100dbe5:	lea    r8,[rip+0xffffffffffff3d38]        # 0x1001924
 100dbec:	lea    rcx,[rcx+rbx*2]
 100dbf0:	sub    rdx,rbx
 100dbf3:	call   0x100e180
 100dbf8:	test   al,al
 100dbfa:	je     0x100dc57
 100dbfc:	inc    rbx
 100dbff:	lea    r10,[rbp+0xb20]
 100dc06:	mov    r9,r14
 100dc09:	lea    r10,[r10+rbx*2]
 100dc0d:	sub    r9,rbx
 100dc10:	je     0x100dc4c
 100dc12:	mov    rcx,r12
 100dc15:	dec    r9
 100dc18:	je     0x100dc3f
 100dc1a:	lea    r8,[rsp+0x30]
 100dc1f:	mov    rax,r10
 100dc22:	sub    r8,r10
 100dc25:	movzx  edx,WORD PTR [r8+rax*1]
 100dc2a:	cmp    r12w,dx
 100dc2e:	je     0x100dc3f
 100dc30:	inc    rcx
 100dc33:	mov    WORD PTR [rax],dx
 100dc36:	add    rax,0x2
 100dc3a:	cmp    rcx,r9
 100dc3d:	jb     0x100dc25
 100dc3f:	mov    WORD PTR [r10+rcx*2],r12w
 100dc44:	cmp    r12w,WORD PTR [rsp+rcx*2+0x30]
 100dc4a:	je     0x100dc57
 100dc4c:	mov    ecx,0x7a
 100dc51:	call   QWORD PTR [rip+0xffffffffffff3461]        # 0x10010b8
 100dc57:	lea    rdx,[rbp+0x180]
 100dc5e:	lea    rcx,[rbp+0xb20]
 100dc65:	call   QWORD PTR [rip+0xffffffffffff357d]        # 0x10011e8
 100dc6b:	cmp    rax,0xffffffffffffffff
 100dc6f:	jne    0x100ddaa
 100dc75:	mov    rax,r12
 100dc78:	nop    DWORD PTR [rax+rax*1+0x0]
 100dc80:	movzx  edx,WORD PTR [rbp+rax*2+0xd30]
 100dc88:	cmp    r12w,dx
 100dc8c:	je     0x100dca1
 100dc8e:	mov    WORD PTR [rbp+rax*2+0xb20],dx
 100dc96:	inc    rax
 100dc99:	cmp    rax,0x104
 100dc9f:	jb     0x100dc80
 100dca1:	mov    WORD PTR [rbp+rax*2+0xb20],r12w
 100dcaa:	cmp    r12w,WORD PTR [rbp+rax*2+0xd30]
 100dcb3:	jne    0x100dd87
 100dcb9:	lea    rax,[rbp+0xb20]
 100dcc0:	mov    rbx,r12
 100dcc3:	cmp    r12w,WORD PTR [rbp+0xb20]
 100dccb:	je     0x100dcdd
 100dccd:	nop    DWORD PTR [rax]
 100dcd0:	add    rax,0x2
 100dcd4:	inc    rbx
 100dcd7:	cmp    r12w,WORD PTR [rax]
 100dcdb:	jne    0x100dcd0
 100dcdd:	mov    rax,rbx
 100dce0:	test   rbx,rbx
 100dce3:	je     0x100dce9
 100dce5:	lea    rax,[rbx-0x1]
 100dce9:	movzx  ecx,WORD PTR [rbp+rax*2+0xb20]
 100dcf1:	mov    edx,0x5c
 100dcf6:	cmp    dx,cx
 100dcf9:	je     0x100dd35
 100dcfb:	mov    eax,0x2f
 100dd00:	cmp    ax,cx
 100dd03:	je     0x100dd35
 100dd05:	cmp    dx,r15w
 100dd09:	je     0x100dd35
 100dd0b:	cmp    ax,r15w
 100dd0f:	je     0x100dd35
 100dd11:	lea    rcx,[rbp+0xb20]
 100dd18:	mov    rdx,r14
 100dd1b:	lea    r8,[rip+0xffffffffffff3c02]        # 0x1001924
 100dd22:	lea    rcx,[rcx+rbx*2]
 100dd26:	sub    rdx,rbx
 100dd29:	call   0x100e180
 100dd2e:	test   al,al
 100dd30:	je     0x100dd92
 100dd32:	inc    rbx
 100dd35:	lea    r10,[rbp+0xb20]
 100dd3c:	lea    r10,[r10+rbx*2]
 100dd40:	sub    r14,rbx
 100dd43:	je     0x100dd87
 100dd45:	lea    r9,[r14-0x1]
 100dd49:	mov    rcx,r12
 100dd4c:	test   r9,r9
 100dd4f:	je     0x100dd7a
 100dd51:	lea    r8,[rsp+0x30]
 100dd56:	mov    rax,r10
 100dd59:	sub    r8,r10
 100dd5c:	nop    DWORD PTR [rax+0x0]
 100dd60:	movzx  edx,WORD PTR [r8+rax*1]
 100dd65:	cmp    r12w,dx
 100dd69:	je     0x100dd7a
 100dd6b:	inc    rcx
 100dd6e:	mov    WORD PTR [rax],dx
 100dd71:	add    rax,0x2
 100dd75:	cmp    rcx,r9
 100dd78:	jb     0x100dd60
 100dd7a:	mov    WORD PTR [r10+rcx*2],r12w
 100dd7f:	cmp    r12w,WORD PTR [rsp+rcx*2+0x30]
 100dd85:	je     0x100dd92
 100dd87:	mov    ecx,0x7a
 100dd8c:	call   QWORD PTR [rip+0xffffffffffff3326]        # 0x10010b8
 100dd92:	lea    rdx,[rsp+0x30]
 100dd97:	lea    rcx,[rbp+0xb20]
 100dd9e:	call   QWORD PTR [rip+0xffffffffffff3444]        # 0x10011e8
 100dda4:	cmp    rax,0xffffffffffffffff
 100dda8:	je     0x100ddc2
 100ddaa:	mov    rcx,rax
 100ddad:	call   QWORD PTR [rip+0xffffffffffff33ad]        # 0x1001160
 100ddb3:	lea    rcx,[rbp+0xb20]
 100ddba:	call   QWORD PTR [rip+0xffffffffffff3438]        # 0x10011f8
 100ddc0:	jmp    0x100ddc4
 100ddc2:	xor    eax,eax
 100ddc4:	mov    r15,QWORD PTR [rsp+0x1050]
 100ddcc:	mov    r13,QWORD PTR [rsp+0x1098]
 100ddd4:	mov    rdi,QWORD PTR [rsp+0x1090]
 100dddc:	mov    rbx,QWORD PTR [rsp+0x1088]
 100dde4:	mov    rcx,QWORD PTR [rbp+0xf40]
 100ddeb:	xor    rcx,rsp
 100ddee:	call   0x10057d0
 100ddf3:	add    rsp,0x1058
 100ddfa:	pop    r14
 100ddfc:	pop    r12
 100ddfe:	pop    rsi
 100ddff:	pop    rbp
 100de00:	ret    
 100de01:	int3   
 100de02:	int3   
 100de03:	int3   
 100de04:	int3   
 100de05:	int3   
 100de06:	int3   
 100de07:	int3   
 100de08:	int3   
 100de09:	int3   
 100de0a:	int3   
 100de0b:	int3   
 100de0c:	int3   
 100de0d:	int3   
 100de0e:	int3   
 100de0f:	int3   
 100de10:	rex push rbx
 100de12:	push   rsi
 100de13:	push   rdi
 100de14:	sub    rsp,0x250
 100de1b:	mov    rax,QWORD PTR [rip+0x32ee]        # 0x1011110
 100de22:	xor    rax,rsp
 100de25:	mov    QWORD PTR [rsp+0x240],rax
 100de2d:	mov    rsi,rdx
 100de30:	mov    rdi,r8
 100de33:	lea    rdx,[rsp+0x30]
 100de38:	mov    r8d,0x105
 100de3e:	mov    rbx,r9
 100de41:	call   QWORD PTR [rip+0xffffffffffff32e1]        # 0x1001128
 100de47:	test   eax,eax
 100de49:	je     0x100deee
 100de4f:	lea    r9,[rsp+0x20]
 100de54:	lea    rcx,[rsp+0x30]
 100de59:	mov    r8,rsi
 100de5c:	mov    edx,edi
 100de5e:	call   QWORD PTR [rip+0xffffffffffff328c]        # 0x10010f0
 100de64:	test   eax,eax
 100de66:	je     0x100deee
 100de6c:	mov    eax,eax
 100de6e:	cmp    rax,rdi
 100de71:	ja     0x100deee
 100de73:	mov    rdi,QWORD PTR [rsp+0x290]
 100de7b:	xor    esi,esi
 100de7d:	cmp    si,WORD PTR [rbx]
 100de80:	jne    0x100de96
 100de82:	mov    r8,QWORD PTR [rsp+0x20]
 100de87:	mov    rdx,rdi
 100de8a:	mov    rcx,rbx
 100de8d:	call   0x100e180
 100de92:	test   al,al
 100de94:	je     0x100deee
 100de96:	mov    rax,QWORD PTR [rsp+0x20]
 100de9b:	mov    rcx,rsi
 100de9e:	mov    WORD PTR [rax],si
 100dea1:	mov    rax,rbx
 100dea4:	cmp    si,WORD PTR [rbx]
 100dea7:	je     0x100debc
 100dea9:	nop    DWORD PTR [rax+0x0]
 100deb0:	add    rax,0x2
 100deb4:	inc    rcx
 100deb7:	cmp    si,WORD PTR [rax]
 100deba:	jne    0x100deb0
 100debc:	mov    rax,rcx
 100debf:	mov    edx,0x2e
 100dec4:	test   rax,rax
 100dec7:	je     0x100ded2
 100dec9:	dec    rax
 100decc:	cmp    dx,WORD PTR [rbx+rax*2]
 100ded0:	jne    0x100dec4
 100ded2:	cmp    dx,WORD PTR [rbx+rax*2]
 100ded6:	cmovne rax,rcx
 100deda:	lea    r10,[rbx+rax*2]
 100dede:	sub    rdi,rax
 100dee1:	jne    0x100df0b
 100dee3:	mov    ecx,0x7a
 100dee8:	call   QWORD PTR [rip+0xffffffffffff31ca]        # 0x10010b8
 100deee:	xor    al,al
 100def0:	mov    rcx,QWORD PTR [rsp+0x240]
 100def8:	xor    rcx,rsp
 100defb:	call   0x10057d0
 100df00:	add    rsp,0x250
 100df07:	pop    rdi
 100df08:	pop    rsi
 100df09:	pop    rbx
 100df0a:	ret    
 100df0b:	lea    r9,[rdi-0x1]
 100df0f:	mov    rcx,rsi
 100df12:	lea    r11,[rip+0xffffffffffff6237]        # 0x1004150
 100df19:	test   r9,r9
 100df1c:	je     0x100df49
 100df1e:	mov    r8,r11
 100df21:	mov    rax,r10
 100df24:	sub    r8,r10
 100df27:	nop    WORD PTR [rax+rax*1+0x0]
 100df30:	movzx  edx,WORD PTR [r8+rax*1]
 100df35:	cmp    si,dx
 100df38:	je     0x100df49
 100df3a:	inc    rcx
 100df3d:	mov    WORD PTR [rax],dx
 100df40:	add    rax,0x2
 100df44:	cmp    rcx,r9
 100df47:	jb     0x100df30
 100df49:	mov    WORD PTR [r10+rcx*2],si
 100df4e:	cmp    si,WORD PTR [r11+rcx*2]
 100df53:	jne    0x100dee3
 100df55:	mov    al,0x1
 100df57:	jmp    0x100def0
 100df59:	int3   
 100df5a:	int3   
 100df5b:	int3   
 100df5c:	int3   
 100df5d:	int3   
 100df5e:	int3   
 100df5f:	int3   
 100df60:	mov    QWORD PTR [rsp+0x8],rbx
 100df65:	mov    QWORD PTR [rsp+0x10],rsi
 100df6a:	mov    QWORD PTR [rsp+0x18],rdi
 100df6f:	push   r14
 100df71:	sub    rsp,0x20
 100df75:	mov    rax,rcx
 100df78:	mov    rdi,rcx
 100df7b:	xor    ecx,ecx
 100df7d:	mov    r14,r8
 100df80:	mov    rsi,rdx
 100df83:	mov    ebx,ecx
 100df85:	cmp    cx,WORD PTR [rax]
 100df88:	je     0x100df9c
 100df8a:	nop    WORD PTR [rax+rax*1+0x0]
 100df90:	add    rax,0x2
 100df94:	inc    rbx
 100df97:	cmp    cx,WORD PTR [rax]
 100df9a:	jne    0x100df90
 100df9c:	mov    rax,rbx
 100df9f:	test   rbx,rbx
 100dfa2:	je     0x100dfa8
 100dfa4:	lea    rax,[rbx-0x1]
 100dfa8:	movzx  ecx,WORD PTR [rdi+rax*2]
 100dfac:	mov    r8d,0x5c
 100dfb2:	cmp    r8w,cx
 100dfb6:	je     0x100dfee
 100dfb8:	mov    edx,0x2f
 100dfbd:	cmp    dx,cx
 100dfc0:	je     0x100dfee
 100dfc2:	movzx  eax,WORD PTR [r14]
 100dfc6:	cmp    r8w,ax
 100dfca:	je     0x100dfee
 100dfcc:	cmp    dx,ax
 100dfcf:	je     0x100dfee
 100dfd1:	mov    rdx,rsi
 100dfd4:	lea    rcx,[rdi+rbx*2]
 100dfd8:	lea    r8,[rip+0xffffffffffff3945]        # 0x1001924
 100dfdf:	sub    rdx,rbx
 100dfe2:	call   0x100e180
 100dfe7:	test   al,al
 100dfe9:	je     0x100e000
 100dfeb:	inc    rbx
 100dfee:	sub    rsi,rbx
 100dff1:	lea    rcx,[rdi+rbx*2]
 100dff5:	mov    r8,r14
 100dff8:	mov    rdx,rsi
 100dffb:	call   0x100e180
 100e000:	mov    rbx,QWORD PTR [rsp+0x30]
 100e005:	mov    rsi,QWORD PTR [rsp+0x38]
 100e00a:	mov    rdi,QWORD PTR [rsp+0x40]
 100e00f:	add    rsp,0x20
 100e013:	pop    r14
 100e015:	ret    
 100e016:	int3   
 100e017:	int3   
 100e018:	int3   
 100e019:	int3   
 100e01a:	int3   
 100e01b:	int3   
 100e01c:	int3   
 100e01d:	int3   
 100e01e:	int3   
 100e01f:	int3   
 100e020:	rex push rbx
 100e022:	push   rsi
 100e023:	push   rdi
 100e024:	sub    rsp,0x90
 100e02b:	mov    rax,QWORD PTR [rip+0x30de]        # 0x1011110
 100e032:	xor    rax,rsp
 100e035:	mov    QWORD PTR [rsp+0x80],rax
 100e03d:	movzx  esi,r8w
 100e041:	mov    r8,r9
 100e044:	mov    rdi,rdx
 100e047:	mov    rbx,rcx
 100e04a:	call   0x100e180
 100e04f:	test   al,al
 100e051:	je     0x100e154
 100e057:	mov    rax,QWORD PTR [rsp+0xd8]
 100e05f:	mov    QWORD PTR [rsp+0xc0],rbp
 100e067:	xor    ebp,ebp
 100e069:	test   rax,rax
 100e06c:	je     0x100e08d
 100e06e:	cmp    bp,WORD PTR [rax]
 100e071:	je     0x100e08d
 100e073:	lea    r8,[rip+0xffffffffffff60fe]        # 0x1004178
 100e07a:	mov    rdx,rdi
 100e07d:	mov    rcx,rbx
 100e080:	call   0x100df60
 100e085:	test   al,al
 100e087:	je     0x100e130
 100e08d:	movzx  r11d,si
 100e091:	lea    r9,[rsp+0x20]
 100e096:	mov    WORD PTR [rsp+0x20],bp
 100e09b:	lea    rcx,[rsp+0x22]
 100e0a0:	mov    r10d,0x1
 100e0a6:	data16 nop WORD PTR [rax+rax*1+0x0]
 100e0b0:	mov    eax,0xcccccccd
 100e0b5:	add    rcx,0x2
 100e0b9:	mul    r11d
 100e0bc:	mov    r8d,edx
 100e0bf:	shr    r8d,0x3
 100e0c3:	movzx  eax,r8w
 100e0c7:	shl    ax,0x2
 100e0cb:	lea    edx,[rax+r8*1]
 100e0cf:	add    dx,dx
 100e0d2:	sub    r11w,dx
 100e0d6:	add    r11w,0x30
 100e0db:	mov    WORD PTR [rcx-0x2],r11w
 100e0e0:	mov    r11d,r8d
 100e0e3:	test   r8d,r8d
 100e0e6:	je     0x100e0f1
 100e0e8:	inc    r10d
 100e0eb:	cmp    r10d,0x29
 100e0ef:	jb     0x100e0b0
 100e0f1:	lea    rax,[rsp+0x20]
 100e0f6:	sub    rcx,0x2
 100e0fa:	cmp    rax,rcx
 100e0fd:	jae    0x100e11c
 100e0ff:	nop
 100e100:	movzx  eax,WORD PTR [rcx]
 100e103:	movzx  edx,WORD PTR [r9]
 100e107:	sub    rcx,0x2
 100e10b:	mov    WORD PTR [r9],ax
 100e10f:	mov    WORD PTR [rcx+0x2],dx
 100e113:	add    r9,0x2
 100e117:	cmp    r9,rcx
 100e11a:	jb     0x100e100
 100e11c:	lea    r8,[rsp+0x20]
 100e121:	mov    rdx,rdi
 100e124:	mov    rcx,rbx
 100e127:	call   0x100df60
 100e12c:	test   al,al
 100e12e:	jne    0x100e134
 100e130:	xor    al,al
 100e132:	jmp    0x100e14c
 100e134:	mov    r8,QWORD PTR [rsp+0xd0]
 100e13c:	mov    rdx,rdi
 100e13f:	mov    rcx,rbx
 100e142:	call   0x100df60
 100e147:	test   al,al
 100e149:	setne  al
 100e14c:	mov    rbp,QWORD PTR [rsp+0xc0]
 100e154:	mov    rcx,QWORD PTR [rsp+0x80]
 100e15c:	xor    rcx,rsp
 100e15f:	call   0x10057d0
 100e164:	add    rsp,0x90
 100e16b:	pop    rdi
 100e16c:	pop    rsi
 100e16d:	pop    rbx
 100e16e:	ret    
 100e16f:	int3   
 100e170:	int3   
 100e171:	int3   
 100e172:	int3   
 100e173:	int3   
 100e174:	int3   
 100e175:	int3   
 100e176:	int3   
 100e177:	int3   
 100e178:	int3   
 100e179:	int3   
 100e17a:	int3   
 100e17b:	int3   
 100e17c:	int3   
 100e17d:	int3   
 100e17e:	int3   
 100e17f:	int3   
 100e180:	sub    rsp,0x28
 100e184:	mov    r11,r8
 100e187:	mov    r10,rcx
 100e18a:	test   rdx,rdx
 100e18d:	jne    0x100e1a1
 100e18f:	mov    ecx,0x7a
 100e194:	call   QWORD PTR [rip+0xffffffffffff2f1e]        # 0x10010b8
 100e19a:	xor    al,al
 100e19c:	add    rsp,0x28
 100e1a0:	ret    
 100e1a1:	lea    r8,[rdx-0x1]
 100e1a5:	mov    QWORD PTR [rsp+0x20],rbx
 100e1aa:	xor    ebx,ebx
 100e1ac:	mov    ecx,ebx
 100e1ae:	test   r8,r8
 100e1b1:	je     0x100e1d9
 100e1b3:	mov    r9,r11
 100e1b6:	mov    rax,r10
 100e1b9:	sub    r9,r10
 100e1bc:	nop    DWORD PTR [rax+0x0]
 100e1c0:	movzx  edx,WORD PTR [r9+rax*1]
 100e1c5:	cmp    bx,dx
 100e1c8:	je     0x100e1d9
 100e1ca:	inc    rcx
 100e1cd:	mov    WORD PTR [rax],dx
 100e1d0:	add    rax,0x2
 100e1d4:	cmp    rcx,r8
 100e1d7:	jb     0x100e1c0
 100e1d9:	mov    WORD PTR [r10+rcx*2],bx
 100e1de:	cmp    bx,WORD PTR [r11+rcx*2]
 100e1e3:	mov    rbx,QWORD PTR [rsp+0x20]
 100e1e8:	jne    0x100e18f
 100e1ea:	mov    al,0x1
 100e1ec:	add    rsp,0x28
 100e1f0:	ret    
 100e1f1:	int3   
 100e1f2:	int3   
 100e1f3:	int3   
 100e1f4:	int3   
 100e1f5:	int3   
 100e1f6:	int3   
 100e1f7:	int3   
 100e1f8:	int3   
 100e1f9:	int3   
 100e1fa:	int3   
 100e1fb:	int3   
 100e1fc:	int3   
 100e1fd:	int3   
 100e1fe:	int3   
 100e1ff:	int3   
 100e200:	mov    QWORD PTR [rsp+0x8],rbx
 100e205:	push   rdi
 100e206:	sub    rsp,0x20
 100e20a:	mov    rdi,rcx
 100e20d:	lea    rcx,[rip+0x3f7c]        # 0x1012190
 100e214:	call   0x100b1f0
 100e219:	test   eax,eax
 100e21b:	jne    0x100e262
 100e21d:	lea    rcx,[rip+0x3f6c]        # 0x1012190
 100e224:	call   0x100b450
 100e229:	test   eax,eax
 100e22b:	je     0x100e262
 100e22d:	lea    rcx,[rip+0x3f6c]        # 0x10121a0
 100e234:	xor    edx,edx
 100e236:	mov    r8d,0x1b60
 100e23c:	call   0x1005982
 100e241:	lea    rcx,[rip+0x3f58]        # 0x10121a0
 100e248:	call   0x100a9b0
 100e24d:	lea    rcx,[rip+0x3f3c]        # 0x1012190
 100e254:	xor    edx,edx
 100e256:	mov    QWORD PTR [rip+0x3f3b],rax        # 0x1012198
 100e25d:	call   0x100b4b0
 100e262:	lea    rcx,[rip+0x3f27]        # 0x1012190
 100e269:	call   0x100b210
 100e26e:	test   eax,eax
 100e270:	mov    ebx,eax
 100e272:	js     0x100e291
 100e274:	mov    rcx,QWORD PTR [rip+0x3f1d]        # 0x1012198
 100e27b:	mov    QWORD PTR [rdi],rcx
 100e27e:	mov    rdx,QWORD PTR [rcx]
 100e281:	call   QWORD PTR [rdx+0x8]
 100e284:	mov    eax,ebx
 100e286:	mov    rbx,QWORD PTR [rsp+0x30]
 100e28b:	add    rsp,0x20
 100e28f:	pop    rdi
 100e290:	ret    
 100e291:	mov    QWORD PTR [rdi],0x0
 100e298:	mov    rbx,QWORD PTR [rsp+0x30]
 100e29d:	add    rsp,0x20
 100e2a1:	pop    rdi
 100e2a2:	ret    
 100e2a3:	int3   
 100e2a4:	int3   
 100e2a5:	int3   
 100e2a6:	int3   
 100e2a7:	int3   
 100e2a8:	int3   
 100e2a9:	int3   
 100e2aa:	int3   
 100e2ab:	int3   
 100e2ac:	int3   
 100e2ad:	int3   
 100e2ae:	int3   
 100e2af:	int3   
 100e2b0:	mov    QWORD PTR [rsp+0x10],rsi
 100e2b5:	push   rdi
 100e2b6:	sub    rsp,0x20
 100e2ba:	mov    rsi,rcx
 100e2bd:	lea    rcx,[rip+0x3ecc]        # 0x1012190
 100e2c4:	call   0x100b1f0
 100e2c9:	test   eax,eax
 100e2cb:	jne    0x100e312
 100e2cd:	lea    rcx,[rip+0x3ebc]        # 0x1012190
 100e2d4:	call   0x100b450
 100e2d9:	test   eax,eax
 100e2db:	je     0x100e312
 100e2dd:	lea    rcx,[rip+0x3ebc]        # 0x10121a0
 100e2e4:	xor    edx,edx
 100e2e6:	mov    r8d,0x1b60
 100e2ec:	call   0x1005982
 100e2f1:	lea    rcx,[rip+0x3ea8]        # 0x10121a0
 100e2f8:	call   0x100a9b0
 100e2fd:	lea    rcx,[rip+0x3e8c]        # 0x1012190
 100e304:	xor    edx,edx
 100e306:	mov    QWORD PTR [rip+0x3e8b],rax        # 0x1012198
 100e30d:	call   0x100b4b0
 100e312:	lea    rcx,[rip+0x3e77]        # 0x1012190
 100e319:	mov    QWORD PTR [rsp+0x30],rbx
 100e31e:	call   0x100b210
 100e323:	test   eax,eax
 100e325:	mov    edi,eax
 100e327:	js     0x100e33b
 100e329:	mov    rbx,QWORD PTR [rip+0x3e68]        # 0x1012198
 100e330:	mov    rcx,rbx
 100e333:	mov    rax,QWORD PTR [rbx]
 100e336:	call   QWORD PTR [rax+0x8]
 100e339:	jmp    0x100e33d
 100e33b:	xor    ebx,ebx
 100e33d:	test   edi,edi
 100e33f:	jne    0x100e357
 100e341:	mov    rdx,rsi
 100e344:	mov    rcx,rbx
 100e347:	call   0x100a100
 100e34c:	mov    rdx,QWORD PTR [rbx]
 100e34f:	mov    rcx,rbx
 100e352:	mov    edi,eax
 100e354:	call   QWORD PTR [rdx+0x10]
 100e357:	xor    edx,edx
 100e359:	mov    r8d,0x8000
 100e35f:	mov    rcx,rsi
 100e362:	call   QWORD PTR [rip+0xffffffffffff2f60]        # 0x10012c8
 100e368:	mov    rbx,QWORD PTR [rsp+0x30]
 100e36d:	mov    rsi,QWORD PTR [rsp+0x38]
 100e372:	mov    eax,edi
 100e374:	add    rsp,0x20
 100e378:	pop    rdi
 100e379:	ret    
 100e37a:	int3   
 100e37b:	int3   
 100e37c:	int3   
 100e37d:	int3   
 100e37e:	int3   
 100e37f:	int3   
 100e380:	int3   
 100e381:	int3   
 100e382:	int3   
 100e383:	int3   
 100e384:	int3   
 100e385:	int3   
 100e386:	int3   
 100e387:	int3   
 100e388:	int3   
 100e389:	int3   
 100e38a:	int3   
 100e38b:	int3   
 100e38c:	int3   
 100e38d:	int3   
 100e38e:	int3   
 100e38f:	int3   
 100e390:	mov    QWORD PTR [rsp+0x10],rdx
 100e395:	push   rbp
 100e396:	sub    rsp,0x20
 100e39a:	mov    rbp,rdx
 100e39d:	lea    rax,[rip+0xffffffffffff6ddd]        # 0x1005181
 100e3a4:	add    rsp,0x20
 100e3a8:	pop    rbp
 100e3a9:	ret    
 100e3aa:	int3   
 100e3ab:	int3   
 100e3ac:	int3   
 100e3ad:	int3   
 100e3ae:	int3   
 100e3af:	int3   
 100e3b0:	int3   
 100e3b1:	int3   
 100e3b2:	int3   
 100e3b3:	int3   
 100e3b4:	int3   
 100e3b5:	int3   
 100e3b6:	int3   
 100e3b7:	int3   
 100e3b8:	int3   
 100e3b9:	int3   
 100e3ba:	int3   
 100e3bb:	int3   
 100e3bc:	int3   
 100e3bd:	int3   
 100e3be:	int3   
 100e3bf:	int3   
 100e3c0:	rex push rbp
 100e3c2:	sub    rsp,0x40
 100e3c6:	mov    rbp,rdx
 100e3c9:	mov    rcx,QWORD PTR [rbp+0x40]
 100e3cd:	mov    rax,QWORD PTR [rcx]
 100e3d0:	call   QWORD PTR [rax+0x10]
 100e3d3:	mov    rcx,QWORD PTR [rbp+0x48]
 100e3d7:	test   rcx,rcx
 100e3da:	je     0x100e3ea
 100e3dc:	call   QWORD PTR [rip+0xffffffffffff3066]        # 0x1001448
 100e3e2:	mov    QWORD PTR [rbp+0x48],0x0
 100e3ea:	mov    rcx,QWORD PTR [rip+0x2df7]        # 0x10111e8
 100e3f1:	call   QWORD PTR [rip+0xffffffffffff2e11]        # 0x1001208
 100e3f7:	mov    QWORD PTR [rip+0x2de6],0x0        # 0x10111e8
 100e402:	lea    rcx,[rip+0x2de7]        # 0x10111f0
 100e409:	call   QWORD PTR [rip+0xffffffffffff2e19]        # 0x1001228
 100e40f:	nop
 100e410:	add    rsp,0x40
 100e414:	pop    rbp
 100e415:	ret    
 100e416:	int3   
 100e417:	int3   
 100e418:	int3   
 100e419:	int3   
 100e41a:	int3   
 100e41b:	int3   
 100e41c:	int3   
 100e41d:	rex push rbp
 100e41f:	sub    rsp,0x20
 100e423:	mov    rbp,rdx
 100e426:	mov    rax,QWORD PTR [rcx]
 100e429:	mov    rdx,rcx
 100e42c:	mov    ecx,DWORD PTR [rax]
 100e42e:	call   0x1005a8e
 100e433:	nop
 100e434:	add    rsp,0x20
 100e438:	pop    rbp
 100e439:	ret    
 100e43a:	int3   
 100e43b:	int3   
 100e43c:	int3   
 100e43d:	int3   
 100e43e:	int3   
 100e43f:	int3   
 100e440:	int3   
 100e441:	rex push rbp
 100e443:	sub    rsp,0x20
 100e447:	mov    rbp,rdx
 100e44a:	mov    ecx,0x8
 100e44f:	call   0x1005c7a
 100e454:	nop
 100e455:	add    rsp,0x20
 100e459:	pop    rbp
 100e45a:	ret    
 100e45b:	int3   
 100e45c:	int3   
 100e45d:	int3   
 100e45e:	int3   
 100e45f:	int3   
 100e460:	int3   
 100e461:	int3   
 100e462:	int3   
 100e463:	int3   
 100e464:	int3   
 100e465:	int3   
 100e466:	int3   
 100e467:	int3   
 100e468:	int3   
 100e469:	int3   
 100e46a:	int3   
 100e46b:	int3   
 100e46c:	int3   
 100e46d:	int3   
 100e46e:	int3   
 100e46f:	int3   
 100e470:	rex push rbp
 100e472:	sub    rsp,0x20
 100e476:	mov    rbp,rdx
 100e479:	mov    rax,QWORD PTR [rcx]
 100e47c:	xor    ecx,ecx
 100e47e:	cmp    DWORD PTR [rax],0xc0000005
 100e484:	sete   cl
 100e487:	mov    eax,ecx
 100e489:	mov    eax,ecx
 100e48b:	add    rsp,0x20
 100e48f:	pop    rbp
 100e490:	ret    
 100e491:	int3   
 100e492:	int3   
 100e493:	int3   
 100e494:	int3   
 100e495:	int3   
 100e496:	int3   
 100e497:	int3   
 100e498:	lea    rcx,[rdx+0x48]
 100e49f:	rex.W jmp QWORD PTR [rip+0xffffffffffff2e3a]        # 0x10012e0
 100e4a6:	int3   
 100e4a7:	int3   
 100e4a8:	int3   
 100e4a9:	int3   
 100e4aa:	int3   
 100e4ab:	int3   
 100e4ac:	int3   
 100e4ad:	int3   
 100e4ae:	int3   
 100e4af:	int3   
 100e4b0:	int3   
 100e4b1:	int3   
 100e4b2:	int3   
 100e4b3:	int3   
 100e4b4:	int3   
 100e4b5:	int3   
 100e4b6:	int3   
 100e4b7:	int3   
 100e4b8:	int3   
 100e4b9:	int3   
 100e4ba:	int3   
 100e4bb:	int3   
 100e4bc:	int3   
 100e4bd:	int3   
 100e4be:	int3   
 100e4bf:	int3   
 100e4c0:	rex push rbx
 100e4c2:	sub    rsp,0x20
 100e4c6:	xor    eax,eax
 100e4c8:	xor    ebx,ebx
 100e4ca:	lea    rcx,[rip+0x2f77]        # 0x1011448
 100e4d1:	mov    QWORD PTR [rip+0x2f70],rax        # 0x1011448
 100e4d8:	mov    QWORD PTR [rip+0x2f71],rax        # 0x1011450
 100e4df:	mov    QWORD PTR [rip+0x2f72],rax        # 0x1011458
 100e4e6:	mov    QWORD PTR [rip+0x2f73],rax        # 0x1011460
 100e4ed:	mov    QWORD PTR [rip+0x2f74],rax        # 0x1011468
 100e4f4:	lea    rax,[rip+0x2f35]        # 0x1011430
 100e4fb:	xor    edx,edx
 100e4fd:	mov    QWORD PTR [rip+0x2f34],rbx        # 0x1011438
 100e504:	mov    QWORD PTR [rip+0x2f35],rbx        # 0x1011440
 100e50b:	mov    QWORD PTR [rip+0x2cb6],rax        # 0x10111c8
 100e512:	mov    QWORD PTR [rip+0x2f57],rbx        # 0x1011470
 100e519:	call   QWORD PTR [rip+0xffffffffffff2d01]        # 0x1001220
 100e51f:	test   eax,eax
 100e521:	jne    0x100e542
 100e523:	call   QWORD PTR [rip+0xffffffffffff2d17]        # 0x1001240
 100e529:	test   eax,eax
 100e52b:	jle    0x100e537
 100e52d:	movzx  eax,ax
 100e530:	or     eax,0x80070000
 100e535:	test   eax,eax
 100e537:	jns    0x100e542
 100e539:	mov    BYTE PTR [rip+0x2c80],0x1        # 0x10111c0
 100e540:	jmp    0x100e54c
 100e542:	mov    DWORD PTR [rip+0x2eec],0x38        # 0x1011438
 100e54c:	call   QWORD PTR [rip+0xffffffffffff2cf6]        # 0x1001248
 100e552:	mov    rcx,QWORD PTR [rip+0x355f]        # 0x1011ab8
 100e559:	mov    QWORD PTR [rip+0x2f20],rbx        # 0x1011480
 100e560:	mov    BYTE PTR [rip+0x2f2c],bl        # 0x1011492
 100e566:	mov    rbx,QWORD PTR [rip+0x3543]        # 0x1011ab0
 100e56d:	mov    DWORD PTR [rip+0x2f05],eax        # 0x1011478
 100e573:	mov    DWORD PTR [rip+0x2f0b],0x1388        # 0x1011488
 100e57d:	mov    DWORD PTR [rip+0x2f05],0x3e8        # 0x101148c
 100e587:	mov    BYTE PTR [rip+0x2f02],0x1        # 0x1011490
 100e58e:	cmp    rbx,rcx
 100e591:	jae    0x100e5b0
 100e593:	mov    rax,QWORD PTR [rbx]
 100e596:	test   rax,rax
 100e599:	je     0x100e5a7
 100e59b:	mov    cl,0x1
 100e59d:	call   QWORD PTR [rax+0x40]
 100e5a0:	mov    rcx,QWORD PTR [rip+0x3511]        # 0x1011ab8
 100e5a7:	add    rbx,0x8
 100e5ab:	cmp    rbx,rcx
 100e5ae:	jb     0x100e593
 100e5b0:	lea    rax,[rip+0xffffffffffff31a9]        # 0x1001760
 100e5b7:	lea    rcx,[rip+0x122]        # 0x100e6e0
 100e5be:	mov    QWORD PTR [rip+0x2e6b],rax        # 0x1011430
 100e5c5:	add    rsp,0x20
 100e5c9:	pop    rbx
 100e5ca:	jmp    0x10058bc
 100e5cf:	int3   
 100e5d0:	int3   
 100e5d1:	int3   
 100e5d2:	int3   
 100e5d3:	int3   
 100e5d4:	int3   
 100e5d5:	int3   
 100e5d6:	int3   
 100e5d7:	int3   
 100e5d8:	rex push rbp
 100e5da:	mov    rbp,rsp
 100e5dd:	sub    rsp,0x20
 100e5e1:	lea    rcx,[rip+0x3458]        # 0x1011a40
 100e5e8:	call   0x1005ce8
 100e5ed:	lea    rcx,[rip+0x100]        # 0x100e6f4
 100e5f4:	add    rsp,0x20
 100e5f8:	pop    rbp
 100e5f9:	jmp    0x10058bc
 100e5fe:	int3   
 100e5ff:	int3   
 100e600:	int3   
 100e601:	int3   
 100e602:	int3   
 100e603:	int3   
 100e604:	rex push rbp
 100e606:	mov    rbp,rsp
 100e609:	sub    rsp,0x20
 100e60d:	lea    rcx,[rip+0x348c]        # 0x1011aa0
 100e614:	call   0x1005d94
 100e619:	lea    rcx,[rip+0xf4]        # 0x100e714
 100e620:	add    rsp,0x20
 100e624:	pop    rbp
 100e625:	jmp    0x10058bc
 100e62a:	int3   
 100e62b:	int3   
 100e62c:	int3   
 100e62d:	int3   
 100e62e:	int3   
 100e62f:	int3   
 100e630:	sub    rsp,0x28
 100e634:	call   0x1009660
 100e639:	mov    DWORD PTR [rip+0x34d5],eax        # 0x1011b14
 100e63f:	add    rsp,0x28
 100e643:	ret    
 100e644:	int3   
 100e645:	int3   
 100e646:	int3   
 100e647:	int3   
 100e648:	int3   
 100e649:	int3   
 100e64a:	int3   
 100e64b:	int3   
 100e64c:	rex push rbp
 100e64e:	mov    rbp,rsp
 100e651:	sub    rsp,0x20
 100e655:	lea    rcx,[rip+0xd8]        # 0x100e734
 100e65c:	add    rsp,0x20
 100e660:	pop    rbp
 100e661:	jmp    0x10058bc
 100e666:	int3   
 100e667:	int3   
 100e668:	int3   
 100e669:	int3   
 100e66a:	int3   
 100e66b:	int3   
 100e66c:	rex push rbp
 100e66e:	mov    rbp,rsp
 100e671:	sub    rsp,0x20
 100e675:	call   QWORD PTR [rip+0xffffffffffff2a4d]        # 0x10010c8
 100e67b:	lea    rcx,[rip+0xffffffffffff5a76]        # 0x10040f8
 100e682:	mov    BYTE PTR [rip+0x3aff],0x0        # 0x1012188
 100e689:	mov    QWORD PTR [rip+0x3ae8],rcx        # 0x1012178
 100e690:	lea    rcx,[rip+0xbd]        # 0x100e754
 100e697:	mov    QWORD PTR [rip+0x3ae2],rax        # 0x1012180
 100e69e:	add    rsp,0x20
 100e6a2:	pop    rbp
 100e6a3:	jmp    0x10058bc
 100e6a8:	int3   
 100e6a9:	int3   
 100e6aa:	int3   
 100e6ab:	int3   
 100e6ac:	int3   
 100e6ad:	int3   
 100e6ae:	int3   
 100e6af:	int3   
 100e6b0:	rex push rbp
 100e6b2:	mov    rbp,rsp
 100e6b5:	sub    rsp,0x20
 100e6b9:	lea    rcx,[rip+0xd4]        # 0x100e794
 100e6c0:	add    rsp,0x20
 100e6c4:	pop    rbp
 100e6c5:	jmp    0x10058bc
 100e6ca:	int3   
 100e6cb:	int3   
 100e6cc:	int3   
 100e6cd:	int3   
 100e6ce:	int3   
 100e6cf:	int3   
 100e6d0:	int3   
 100e6d1:	int3   
 100e6d2:	int3   
 100e6d3:	int3   
 100e6d4:	int3   
 100e6d5:	int3   
 100e6d6:	int3   
 100e6d7:	int3   
 100e6d8:	int3   
 100e6d9:	int3   
 100e6da:	int3   
 100e6db:	int3   
 100e6dc:	int3   
 100e6dd:	int3   
 100e6de:	int3   
 100e6df:	int3   
 100e6e0:	lea    rcx,[rip+0x2d49]        # 0x1011430
 100e6e7:	jmp    0x1004b90
 100e6ec:	int3   
 100e6ed:	int3   
 100e6ee:	int3   
 100e6ef:	int3   
 100e6f0:	int3   
 100e6f1:	int3   
 100e6f2:	int3   
 100e6f3:	int3   
 100e6f4:	rex push rbp
 100e6f6:	mov    rbp,rsp
 100e6f9:	sub    rsp,0x20
 100e6fd:	lea    rcx,[rip+0x333c]        # 0x1011a40
 100e704:	add    rsp,0x20
 100e708:	pop    rbp
 100e709:	jmp    0x1005ca0
 100e70e:	int3   
 100e70f:	int3   
 100e710:	int3   
 100e711:	int3   
 100e712:	int3   
 100e713:	int3   
 100e714:	rex push rbp
 100e716:	mov    rbp,rsp
 100e719:	sub    rsp,0x20
 100e71d:	lea    rcx,[rip+0x337c]        # 0x1011aa0
 100e724:	add    rsp,0x20
 100e728:	pop    rbp
 100e729:	jmp    0x10043b0
 100e72e:	int3   
 100e72f:	int3   
 100e730:	int3   
 100e731:	int3   
 100e732:	int3   
 100e733:	int3   
 100e734:	rex push rbp
 100e736:	mov    rbp,rsp
 100e739:	sub    rsp,0x20
 100e73d:	lea    rcx,[rip+0x3a2c]        # 0x1012170
 100e744:	add    rsp,0x20
 100e748:	pop    rbp
 100e749:	jmp    0x100d27c
 100e74e:	int3   
 100e74f:	int3   
 100e750:	int3   
 100e751:	int3   
 100e752:	int3   
 100e753:	int3   
 100e754:	rex push rbp
 100e756:	mov    rbp,rsp
 100e759:	sub    rsp,0x20
 100e75d:	cmp    BYTE PTR [rip+0x3a24],0x0        # 0x1012188
 100e764:	lea    rax,[rip+0xffffffffffff598d]        # 0x10040f8
 100e76b:	mov    QWORD PTR [rip+0x3a06],rax        # 0x1012178
 100e772:	je     0x100e786
 100e774:	mov    rcx,QWORD PTR [rip+0x3a05]        # 0x1012180
 100e77b:	test   rcx,rcx
 100e77e:	je     0x100e786
 100e780:	call   QWORD PTR [rip+0xffffffffffff28ea]        # 0x1001070
 100e786:	add    rsp,0x20
 100e78a:	pop    rbp
 100e78b:	ret    
 100e78c:	int3   
 100e78d:	int3   
 100e78e:	int3   
 100e78f:	int3   
 100e790:	int3   
 100e791:	int3   
 100e792:	int3   
 100e793:	int3   
 100e794:	rex push rbp
 100e796:	mov    rbp,rsp
 100e799:	lea    rax,[rip+0xffffffffffff5980]        # 0x1004120
 100e7a0:	mov    QWORD PTR [rip+0x29d9],rax        # 0x1011180
 100e7a7:	pop    rbp
 100e7a8:	ret    
 100e7a9:	int3   
 100e7aa:	int3   
 100e7ab:	int3   
 100e7ac:	int3   
 100e7ad:	int3   
 100e7ae:	int3   
 100e7af:	int3   
 100e7b0:	sbb    DWORD PTR [rcx],ebx
 100e7b2:	add    al,0x0
 100e7b4:	or     dh,BYTE PTR [rcx*1+0x6920a00]
 100e7bb:	jo     0x100e755
 100e7bd:	push   rdi
 100e7be:	add    BYTE PTR [rax],al
 100e7c0:	add    BYTE PTR [rax],al
 100e7c3:	add    BYTE PTR [rcx],al
 100e7c5:	(bad)  
 100e7c6:	add    al,BYTE PTR [rax]
 100e7c8:	(bad)  
 100e7c9:	xor    al,BYTE PTR [rdx]
 100e7cb:	(bad)  
 100e7cc:	and    DWORD PTR [rsi],ecx
 100e7ce:	add    al,0x0
 100e7d0:	(bad)  
 100e7d1:	push   rsp
 100e7d2:	(bad)  
 100e7d3:	add    BYTE PTR [rip+0xffffffffb0000634],al        # 0xffffffffb100ee0d
 100e7d9:	rex.XB add BYTE PTR [r8],al
 100e7dc:	mov    esi,0xc4000043
 100e7e1:	out    0x0,eax
 100e7e3:	add    BYTE PTR [rcx],ah
 100e7e5:	add    eax,0x74050002
 100e7ea:	or     BYTE PTR [rax],al
 100e7ec:	mov    esi,0xd4000043
 100e7f1:	rex.XB add BYTE PTR [r8],al
 100e7f4:	int3   
 100e7f5:	out    0x0,eax
 100e7f7:	add    BYTE PTR [rcx],ah
 100e7f9:	add    BYTE PTR [rax],al
 100e7fb:	add    BYTE PTR [rsi-0x2bffffbd],bh
 100e801:	rex.XB add BYTE PTR [r8],al
 100e804:	int3   
 100e805:	out    0x0,eax
 100e807:	add    BYTE PTR [rcx],ah
 100e809:	add    BYTE PTR [rax],al
 100e80b:	add    BYTE PTR [rax-0x41ffffbd],dh
 100e811:	rex.XB add BYTE PTR [r8],al
 100e814:	(bad)  
 100e815:	out    0x0,eax
 100e817:	add    BYTE PTR [rcx],al
 100e819:	(bad)  
 100e81a:	(bad)  
 100e81b:	add    BYTE PTR [rdi],ah
 100e81d:	je     0x100e828
 100e81f:	add    BYTE PTR [rsi],bl
 100e821:	xor    al,0x8
 100e823:	add    BYTE PTR [rsi],al
 100e825:	push   rdx
 100e826:	add    ah,BYTE PTR [rax+0x1]
 100e829:	adc    cl,BYTE PTR [rax]
 100e82b:	add    BYTE PTR [rdx],dl
 100e82d:	push   rsp
 100e82e:	(bad)  
 100e82f:	add    BYTE PTR [rdx],dl
 100e831:	xor    al,0xd
 100e833:	add    BYTE PTR [rdx],dl
 100e835:	jb     0x100e845
 100e837:	loopne 0x100e845
 100e839:	jo     0x100e846
 100e83b:	(bad)  
 100e83c:	sbb    DWORD PTR [rax],ebp
 100e83e:	or     DWORD PTR [rax],eax
 100e840:	(bad)  
 100e841:	fild   DWORD PTR fs:[rax]
 100e844:	(bad)  
 100e845:	xor    al,0xda
 100e847:	add    BYTE PTR [rsi],dl
 100e849:	add    esp,edx
 100e84b:	add    BYTE PTR [rdi],cl
 100e84d:	lock or eax,0x700be0
 100e853:	add    al,ch
 100e855:	pop    rax
 100e856:	add    BYTE PTR [rax],al
 100e858:	add    DWORD PTR [rax],eax
 100e85a:	add    BYTE PTR [rax],al
 100e85c:	mov    bl,0x46
 100e85e:	add    BYTE PTR [rax],al
 100e860:	ret    0x48
 100e863:	add    al,al
 100e865:	jrcxz  0x100e867
 100e867:	add    BYTE PTR [rax],al
 100e869:	add    BYTE PTR [rax],al
 100e86b:	add    BYTE PTR [rdx+0x1000006],dl
 100e871:	(bad)  
 100e872:	add    al,BYTE PTR [rax]
 100e874:	(bad)  
 100e875:	jb     0x100e879
 100e877:	push   rax
 100e878:	add    DWORD PTR [rax],ecx
 100e87a:	add    al,0x0
 100e87c:	or     BYTE PTR [rdx+0x60037004],dl
 100e882:	add    dh,BYTE PTR [rax]
 100e884:	add    DWORD PTR [rax],edx
 100e886:	(bad)  
 100e887:	add    BYTE PTR [rax],dl
 100e889:	or     DWORD PTR fs:[rax],eax
 100e88c:	adc    BYTE PTR [rax+rcx*1+0x0],dl
 100e890:	adc    BYTE PTR [rdx],dh
 100e892:	or     al,0xe0
 100e894:	and    DWORD PTR [rip+0x34050002],eax        # 0x3505e89c
 100e89a:	(bad)  
 100e89b:	add    BYTE PTR [rax-0x58ffffb5],dl
 100e8a1:	rex.WXB add BYTE PTR [r8],al
 100e8a4:	test   al,ch
 100e8a6:	add    BYTE PTR [rax],al
 100e8a8:	and    DWORD PTR [rip+0x74050002],eax        # 0x7505e8b0
 100e8ae:	(bad)  
 100e8af:	add    BYTE PTR [rdi+0x2f00004b],ah
 100e8b5:	rex.WR add BYTE PTR [rax],r8b
 100e8b8:	xchg   esp,eax
 100e8b9:	call   0x121e8be
 100e8be:	add    BYTE PTR [rax],al
 100e8c0:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 100e8c1:	rex.WXB add BYTE PTR [r8],al
 100e8c4:	(bad)  
 100e8c5:	rex.WR add BYTE PTR [rax],r8b
 100e8c8:	xchg   esp,eax
 100e8c9:	call   0x121e8ce
 100e8ce:	add    BYTE PTR [rax],al
 100e8d0:	nop
 100e8d1:	rex.WXB add BYTE PTR [r8],al
 100e8d4:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 100e8d5:	rex.WXB add BYTE PTR [r8],al
 100e8d8:	test   al,ch
 100e8da:	add    BYTE PTR [rax],al
 100e8dc:	add    DWORD PTR [rdx],ecx
 100e8de:	add    al,0x0
 100e8e0:	or     dh,BYTE PTR [rsi+rax*1]
 100e8e3:	add    BYTE PTR [rdx],cl
 100e8e5:	xor    al,BYTE PTR [rsi]
 100e8e7:	jo     0x100e8ea
 100e8e9:	or     al,BYTE PTR [rax+rax*1]
 100e8ec:	or     dh,BYTE PTR [rsi+rax*1]
 100e8ef:	add    BYTE PTR [rdx],cl
 100e8f1:	xor    al,BYTE PTR [rsi]
 100e8f3:	jo     0x100e8f6
 100e8f5:	(bad)  
 100e8f6:	add    al,BYTE PTR [rax]
 100e8f8:	(bad)  
 100e8f9:	xor    al,BYTE PTR [rdx]
 100e8fb:	xor    BYTE PTR [rcx],bl
 100e8fd:	sub    BYTE PTR [rdi],al
 100e8ff:	add    BYTE PTR [rdi],dl
 100e901:	add    DWORD PTR [rdx+0x6f00801],ebx
 100e907:	loopne 0x100e90d
 100e909:	jo     0x100e90e
 100e90b:	(bad)  
 100e90c:	add    dl,BYTE PTR [rax+0x0]
 100e90f:	add    BYTE PTR [rax-0x3fffffa9],bl
 100e915:	or     al,0x0
 100e917:	add    BYTE PTR [rcx],ah
 100e919:	or     BYTE PTR [rdx],al
 100e91b:	add    BYTE PTR [rax],cl
 100e91d:	xor    al,0xa2
 100e91f:	add    DWORD PTR [rax-0x4dffffb3],eax
 100e925:	rex.WRX add BYTE PTR [rax],r8b
 100e928:	cld    
 100e929:	call   0x121e92e
 100e92e:	add    BYTE PTR [rax],al
 100e930:	or     BYTE PTR [rbp+0x0],0x0
 100e934:	mov    dl,0x4e
 100e936:	add    BYTE PTR [rax],al
 100e938:	cld    
 100e939:	call   0x701e93e
 100e93e:	add    al,BYTE PTR [rax]
 100e940:	(bad)  
 100e941:	xor    al,BYTE PTR [rdx]
 100e943:	xor    BYTE PTR [rcx],al
 100e945:	(bad)  
 100e946:	add    al,BYTE PTR [rax]
 100e948:	(bad)  
 100e949:	xor    al,BYTE PTR [rdx]
 100e94b:	xor    BYTE PTR [rcx],bl
 100e94d:	sbb    DWORD PTR [rsi],eax
 100e94f:	add    BYTE PTR [rax],dl
 100e951:	push   rdx
 100e952:	or     al,0xf0
 100e954:	or     ah,al
 100e956:	or     BYTE PTR [rax+0x7],dh
 100e959:	(bad)  
 100e95a:	(bad)  
 100e95b:	xor    dl,bl
 100e95d:	pop    rax
 100e95e:	add    BYTE PTR [rax],al
 100e960:	mov    al,0x15
 100e962:	add    BYTE PTR [rax],al
 100e964:	(bad)  
 100e965:	(bad)  
 100e966:	(bad)  
 100e967:	inc    DWORD PTR [rax]
 100e969:	add    BYTE PTR [rax],al
 100e96b:	add    bh,bh
 100e96d:	(bad)  
 100e96e:	(bad)  
 100e96f:	inc    DWORD PTR [rax]
	...
 100e979:	add    BYTE PTR [rax],al
 100e97b:	add    BYTE PTR [rcx],al
 100e97d:	add    BYTE PTR [rax],al
 100e97f:	add    BYTE PTR [rcx],al
 100e981:	add    BYTE PTR [rax],al
 100e983:	add    BYTE PTR [rax+0x400000e9],cl
	...
 100e991:	add    BYTE PTR [rax],al
 100e993:	add    BYTE PTR [rax+0x380000e3],dl
 100e999:	add    BYTE PTR [rax],al
 100e99b:	add    al,dh
 100e99d:	push   rax
 100e99e:	add    BYTE PTR [rax],al
 100e9a0:	(bad)  
 100e9a1:	(bad)  
 100e9a2:	(bad)  
 100e9a3:	jmp    FWORD PTR [rsi]
 100e9a5:	push   rcx
 100e9a6:	add    BYTE PTR [rax],al
 100e9a8:	add    BYTE PTR [rax],al
 100e9aa:	add    BYTE PTR [rax],al
 100e9ac:	jg     0x100e9ff
 100e9ae:	add    BYTE PTR [rax],al
 100e9b0:	(bad)  
 100e9b1:	(bad)  
 100e9b2:	(bad)  
 100e9b3:	call   QWORD PTR [rax+0xe3]
 100e9b9:	add    BYTE PTR [rax],al
 100e9bb:	add    BYTE PTR [rcx],bl
 100e9bd:	or     al,BYTE PTR [rdx]
 100e9bf:	add    BYTE PTR [rdx],cl
 100e9c1:	xor    al,BYTE PTR [rsi]
 100e9c3:	push   rax
 100e9c4:	ficomp DWORD PTR [rax+0x0]
 100e9c7:	add    BYTE PTR [rax+0x1000015],dh
 100e9cd:	or     al,BYTE PTR [rax+rax*1]
 100e9d0:	or     dh,BYTE PTR [rsi+rax*1]
 100e9d3:	add    BYTE PTR [rdx],cl
 100e9d5:	xor    al,BYTE PTR [rsi]
 100e9d7:	jo     0x100e9da
 100e9d9:	add    al,0x1
 100e9db:	add    BYTE PTR [rdx+riz*2],al
 100e9de:	add    BYTE PTR [rax],al
 100e9e0:	add    DWORD PTR [rsi],eax
 100e9e2:	add    al,BYTE PTR [rax]
 100e9e4:	(bad)  
 100e9e5:	xor    al,BYTE PTR [rdx]
 100e9e7:	push   rax
 100e9e8:	or     DWORD PTR [rip+0x340d0005],ecx        # 0x350de9f3
 100e9ee:	(bad)  
 100e9ef:	add    BYTE PTR [rip+0x6001401],cl        # 0x700fdf6
 100e9f5:	jo     0x100e9f7
 100e9f7:	add    BYTE PTR [rdx+0x100005a],al
 100e9fd:	add    BYTE PTR [rax],al
 100e9ff:	add    dh,ch
 100ea01:	push   rdx
 100ea02:	add    BYTE PTR [rax],al
 100ea04:	xchg   ecx,eax
 100ea05:	push   rsp
 100ea06:	add    BYTE PTR [rax],al
 100ea08:	sbb    eax,0x910000e4
 100ea0d:	push   rsp
 100ea0e:	add    BYTE PTR [rax],al
 100ea10:	add    DWORD PTR [rcx+rax*1],eax
 100ea13:	add    BYTE PTR [rdx+rax*2],al
 100ea16:	add    BYTE PTR [rax],al
 100ea18:	add    DWORD PTR [rcx+rax*1],eax
 100ea1b:	add    BYTE PTR [rdx+rax*2],al
 100ea1e:	add    BYTE PTR [rax],al
 100ea20:	add    DWORD PTR [rdx+rax*1],ecx
 100ea23:	add    BYTE PTR [rcx+rax*1],cl
 100ea26:	adc    DWORD PTR [rax],eax
 100ea28:	add    DWORD PTR [rsi],eax
 100ea2a:	add    al,BYTE PTR [rax]
 100ea2c:	(bad)  
 100ea2d:	xor    al,BYTE PTR [rdx]
 100ea2f:	xor    BYTE PTR [rcx],al
 100ea31:	add    al,0x1
 100ea33:	add    BYTE PTR [rdx+rax*2],al
 100ea36:	add    BYTE PTR [rax],al
 100ea38:	add    DWORD PTR [rax],eax
 100ea3a:	add    BYTE PTR [rax],al
 100ea3c:	add    DWORD PTR [rsi],eax
 100ea3e:	add    al,BYTE PTR [rax]
 100ea40:	(bad)  
 100ea41:	xor    al,BYTE PTR [rdx]
 100ea43:	push   rax
 100ea44:	adc    DWORD PTR [rsi],eax
 100ea46:	add    al,BYTE PTR [rax]
 100ea48:	(bad)  
 100ea49:	xor    al,BYTE PTR [rdx]
 100ea4b:	xor    BYTE PTR [rdx+0x100005a],al
 100ea51:	add    BYTE PTR [rax],al
 100ea53:	add    BYTE PTR [rbx],bh
 100ea55:	pop    rax
 100ea56:	add    BYTE PTR [rax],al
 100ea58:	movabs eax,ds:0xe441000058
 100ea61:	add    BYTE PTR [rax],al
 100ea63:	add    BYTE PTR [rcx],al
 100ea65:	add    al,0x1
 100ea67:	add    BYTE PTR [rdx+rax*2],al
 100ea6a:	add    BYTE PTR [rax],al
 100ea6c:	add    DWORD PTR [rcx],ebx
 100ea6e:	or     al,BYTE PTR [rax]
 100ea70:	sbb    DWORD PTR [rcx+rcx*1+0x0],esi
 100ea74:	sbb    DWORD PTR [rax+rcx*1+0x0],esp
 100ea78:	sbb    DWORD PTR [rdi+rax*1+0x0],edx
 100ea7c:	sbb    DWORD PTR [rsi+rax*1],esi
 100ea7f:	add    BYTE PTR [rcx],bl
 100ea81:	xor    dl,BYTE PTR [rip+0x10401c0]        # 0x204ec47
 100ea87:	add    BYTE PTR [rdx+rax*2],al
 100ea8a:	add    BYTE PTR [rax],al
 100ea8c:	add    DWORD PTR [rcx+rax*1],eax
 100ea8f:	add    BYTE PTR [rdx+rax*2],al
 100ea92:	add    BYTE PTR [rax],al
 100ea94:	add    DWORD PTR [rdx],ecx
 100ea96:	add    al,0x0
 100ea98:	or     dh,BYTE PTR [rsi+rax*1]
 100ea9b:	add    BYTE PTR [rdx],cl
 100ea9d:	xor    al,BYTE PTR [rsi]
 100ea9f:	jo     0x100eaa2
 100eaa1:	or     al,BYTE PTR [rax+rax*1]
 100eaa4:	or     dh,BYTE PTR [rsi+rax*1]
 100eaa7:	add    BYTE PTR [rdx],cl
 100eaa9:	xor    al,BYTE PTR [rsi]
 100eaab:	jo     0x100eaae
 100eaad:	(bad)  
 100eaae:	add    al,BYTE PTR [rax]
 100eab0:	(bad)  
 100eab1:	xor    al,BYTE PTR [rdx]
 100eab3:	push   rax
 100eab4:	or     DWORD PTR [rcx+rax*1],eax
 100eab7:	add    BYTE PTR [rdx+rax*2],al
 100eaba:	add    BYTE PTR [rax],al
 100eabc:	(bad)  
 100eabd:	pop    rdx
 100eabe:	add    BYTE PTR [rax],al
 100eac0:	add    DWORD PTR [rax],eax
 100eac2:	add    BYTE PTR [rax],al
 100eac4:	(bad)  
 100eac5:	pop    rbx
 100eac6:	add    BYTE PTR [rax],al
 100eac8:	push   0x5b
 100eaca:	add    BYTE PTR [rax],al
 100eacc:	jo     0x100eab2
 100eace:	add    BYTE PTR [rax],al
 100ead0:	push   0x5b
 100ead2:	add    BYTE PTR [rax],al
 100ead4:	add    DWORD PTR [rdx],ecx
 100ead6:	add    al,0x0
 100ead8:	or     dh,BYTE PTR [rax+rcx*1]
 100eadb:	add    BYTE PTR [rdx],cl
 100eadd:	xor    al,BYTE PTR [rsi]
 100eadf:	jo     0x100eae2
 100eae1:	or     eax,0x340d0004
 100eae6:	(bad)  
 100eae7:	add    BYTE PTR [rip+0x1500632],cl        # 0x250f11f
 100eaed:	adc    al,BYTE PTR [rsi]
 100eaef:	add    BYTE PTR [rdx],dl
 100eaf1:	je     0x100eafa
 100eaf3:	add    BYTE PTR [rdx],dl
 100eaf5:	xor    al,0x6
 100eaf7:	add    BYTE PTR [rdx],dl
 100eaf9:	xor    cl,BYTE PTR [rbx]
 100eafb:	push   rax
 100eafc:	add    DWORD PTR [rcx],ecx
 100eafe:	add    al,BYTE PTR [rax]
 100eb00:	or     DWORD PTR [rdx],esi
 100eb02:	add    dl,BYTE PTR [rax+0x1]
 100eb05:	or     DWORD PTR [rdx],eax
 100eb07:	add    BYTE PTR [rcx],cl
 100eb09:	xor    al,BYTE PTR [rdx]
 100eb0b:	push   rax
 100eb0c:	add    DWORD PTR [rdx],edx
 100eb0e:	(bad)  
 100eb0f:	add    BYTE PTR [rdx],dl
 100eb11:	je     0x100eb1a
 100eb13:	add    BYTE PTR [rdx],dl
 100eb15:	xor    al,0x6
 100eb17:	add    BYTE PTR [rdx],dl
 100eb19:	xor    cl,BYTE PTR [rbx]
 100eb1b:	push   rax
 100eb1c:	add    DWORD PTR [rcx],ecx
 100eb1e:	add    al,BYTE PTR [rax]
 100eb20:	or     DWORD PTR [rdx],esi
 100eb22:	add    dl,BYTE PTR [rax+0x1]
 100eb25:	or     DWORD PTR [rdx],eax
 100eb27:	add    BYTE PTR [rcx],cl
 100eb29:	xor    al,BYTE PTR [rdx]
 100eb2b:	push   rax
 100eb2c:	add    DWORD PTR [rbx],edi
 100eb2e:	or     BYTE PTR [rax],al
 100eb30:	cmp    esi,DWORD PTR [rsi+rax*1]
 100eb33:	add    BYTE PTR [rdi],cl
 100eb35:	or     BYTE PTR fs:[rax],al
 100eb38:	andps  xmm0,XMMWORD PTR [rdi]
 100eb3b:	add    BYTE PTR [rdi],cl
 100eb3d:	xor    cl,BYTE PTR [rbx]
 100eb3f:	jo     0x100eb42
 100eb41:	clts   
 100eb43:	add    BYTE PTR [rdi],cl
 100eb45:	fs (bad) 
 100eb47:	add    BYTE PTR [rdi],cl
 100eb49:	xor    al,0x6
 100eb4b:	add    BYTE PTR [rdi],cl
 100eb4d:	xor    cl,BYTE PTR [rbx]
 100eb4f:	jo     0x100eb52
 100eb51:	sbb    BYTE PTR [rdx],cl
 100eb53:	add    BYTE PTR [rax],bl
 100eb55:	or     al,BYTE PTR fs:[rax]
 100eb58:	sbb    BYTE PTR [rcx+rcx*1+0x0],dl
 100eb5c:	sbb    BYTE PTR [rax+rcx*1],dh
 100eb5f:	add    BYTE PTR [rax],bl
 100eb61:	xor    dl,BYTE PTR [rax+rsi*8]
 100eb64:	adc    ah,al
 100eb66:	adc    BYTE PTR [rax+0x1],dh
 100eb69:	clts   
 100eb6b:	add    BYTE PTR [rdi],cl
 100eb6d:	or     BYTE PTR fs:[rax],al
 100eb70:	sysenter 
 100eb72:	(bad)  
 100eb73:	add    BYTE PTR [rdi],cl
 100eb75:	xor    cl,BYTE PTR [rbx]
 100eb77:	jo     0x100eb7a
 100eb79:	clts   
 100eb7b:	add    BYTE PTR [rdi],cl
 100eb7d:	fs (bad) 
 100eb7f:	add    BYTE PTR [rdi],cl
 100eb81:	xor    al,0x6
 100eb83:	add    BYTE PTR [rdi],cl
 100eb85:	xor    cl,BYTE PTR [rbx]
 100eb87:	jo     0x100eb8a
 100eb89:	or     al,0x5
 100eb8b:	add    BYTE PTR [rdx+rax*2],cl
 100eb8e:	or     al,dh
 100eb90:	(bad)  
 100eb91:	rol    BYTE PTR [rax+rax*8],1
 100eb94:	add    dh,BYTE PTR [rax]
 100eb96:	add    BYTE PTR [rax],al
 100eb98:	and    DWORD PTR [rdi],ecx
 100eb9a:	(bad)  
 100eb9b:	add    BYTE PTR [rdi],cl
 100eb9d:	in     al,0x4
 100eb9f:	add    BYTE PTR [rdx],cl
 100eba1:	je     0x100ebaf
 100eba3:	add    BYTE PTR [rip+0x60000a54],al        # 0x6100f5fd
 100eba9:	(bad)  
 100ebaa:	add    BYTE PTR [rax],al
 100ebac:	mov    bh,0x62
 100ebae:	add    BYTE PTR [rax],al
 100ebb0:	mov    bl,ch
 100ebb2:	add    BYTE PTR [rax],al
 100ebb4:	and    DWORD PTR [rip+0x64050002],eax        # 0x6505ebbc
 100ebba:	or     eax,DWORD PTR [rax]
 100ebbc:	mov    bh,0x62
 100ebbe:	add    BYTE PTR [rax],al
 100ebc0:	frstor [rbx+0x0]
 100ebc3:	add    BYTE PTR [rax+0x210000eb],bl
 100ebc9:	add    BYTE PTR [rax],al
 100ebcb:	add    BYTE PTR [rdi-0x22ffff9e],dh
 100ebd1:	movsxd eax,DWORD PTR [rax]
 100ebd3:	add    BYTE PTR [rax+0x210000eb],bl
 100ebd9:	add    BYTE PTR [rax],al
 100ebdb:	add    BYTE PTR [rax+0x62],ah
 100ebde:	add    BYTE PTR [rax],al
 100ebe0:	mov    bh,0x62
 100ebe2:	add    BYTE PTR [rax],al
 100ebe4:	mov    bl,ch
 100ebe6:	add    BYTE PTR [rax],al
 100ebe8:	add    DWORD PTR [rsi],eax
 100ebea:	add    al,BYTE PTR [rax]
 100ebec:	(bad)  
 100ebed:	xor    al,BYTE PTR [rdx]
 100ebef:	xor    BYTE PTR [rcx],al
 100ebf1:	add    al,0x1
 100ebf3:	add    BYTE PTR [rdx+rax*2],al
 100ebf6:	add    BYTE PTR [rax],al
 100ebf8:	add    DWORD PTR [rdx],ecx
 100ebfa:	add    al,0x0
 100ebfc:	or     dh,BYTE PTR [rsi+rax*1]
 100ebff:	add    BYTE PTR [rdx],cl
 100ec01:	xor    al,BYTE PTR [rsi]
 100ec03:	jo     0x100ec06
 100ec05:	(bad)  
 100ec06:	add    al,BYTE PTR [rax]
 100ec08:	(bad)  
 100ec09:	xor    al,BYTE PTR [rdx]
 100ec0b:	jo     0x100ec2e
 100ec0d:	clts   
 100ec0f:	add    BYTE PTR [rdi],cl
 100ec11:	or     DWORD PTR fs:[rax],eax
 100ec14:	or     dl,BYTE PTR [rax+rcx*1+0x0]
 100ec18:	add    eax,0xc0000734
 100ec1d:	data16 add BYTE PTR [rax],al
 100ec20:	fisub  WORD PTR [rsi+0x0]
 100ec23:	add    BYTE PTR [rsp+rbp*8],al
 100ec26:	add    BYTE PTR [rax],al
 100ec28:	and    DWORD PTR [rax],eax
 100ec2a:	(bad)  
 100ec2b:	add    BYTE PTR [rax],al
 100ec2d:	or     DWORD PTR fs:[rax],eax
 100ec30:	add    BYTE PTR [rax+rcx*1+0x0],dl
 100ec34:	add    BYTE PTR [rdi+rax*1],dh
 100ec37:	add    al,al
 100ec39:	data16 add BYTE PTR [rax],al
 100ec3c:	fisub  WORD PTR [rsi+0x0]
 100ec3f:	add    BYTE PTR [rsp+rbp*8],al
 100ec42:	add    BYTE PTR [rax],al
 100ec44:	and    DWORD PTR [rax],eax
 100ec46:	add    BYTE PTR [rax],al
 100ec48:	shl    BYTE PTR [rsi+0x0],0x0
 100ec4c:	fisub  WORD PTR [rsi+0x0]
 100ec4f:	add    BYTE PTR [rsp+rbp*8],al
 100ec52:	add    BYTE PTR [rax],al
 100ec54:	add    DWORD PTR [rax*1+0x5640c00],ecx
 100ec5b:	add    BYTE PTR [rsp+rdx*2],cl
 100ec5e:	add    al,0x0
 100ec60:	or     al,0xe0
 100ec62:	add    BYTE PTR [rax],al
 100ec64:	and    DWORD PTR [rdx],ecx
 100ec66:	add    al,0x0
 100ec68:	or     dh,BYTE PTR [rbx+rax*1+0x0]
 100ec6c:	add    eax,0xa0000234
 100ec71:	push   0x693f0000
 100ec76:	add    BYTE PTR [rax],al
 100ec78:	push   rsp
 100ec79:	in     al,dx
 100ec7a:	add    BYTE PTR [rax],al
 100ec7c:	and    DWORD PTR [rax],eax
 100ec7e:	add    BYTE PTR [rax],al
 100ec80:	movabs al,ds:0x540000693f000068
 100ec89:	in     al,dx
 100ec8a:	add    BYTE PTR [rax],al
 100ec8c:	add    DWORD PTR [rsi],ebp
 100ec8e:	add    eax,DWORD PTR [rax]
 100ec90:	cs xor al,0x6
 100ec93:	add    BYTE PTR [rdx+rax*2],al
 100ec96:	add    BYTE PTR [rax],al
 100ec98:	and    DWORD PTR [rip+0x74050002],eax        # 0x7505eca0
 100ec9e:	add    al,0x0
 100eca0:	lock imul eax,DWORD PTR [rax],0x6a2e00
 100eca7:	add    BYTE PTR [rsp+rbp*8+0x210000],cl
 100ecae:	add    BYTE PTR [rax],al
 100ecb0:	lock imul eax,DWORD PTR [rax],0x6a2e00
 100ecb7:	add    BYTE PTR [rsp+rbp*8+0xb010000],cl
 100ecbe:	add    al,0x0
 100ecc0:	or     esi,DWORD PTR [rcx+rcx*1]
 100ecc3:	add    BYTE PTR [rbx],cl
 100ecc5:	xor    al,BYTE PTR [rdi]
 100ecc7:	loopne 0x100ecea
 100ecc9:	or     al,BYTE PTR [rax+rax*1]
 100eccc:	or     dh,BYTE PTR [rax+rcx*1+0x0]
 100ecd0:	add    eax,0x60000764
 100ecd5:	push   0x0
 100ecd7:	add    BYTE PTR [rbp-0x43ffff96],cl
 100ecdd:	in     al,dx
 100ecde:	add    BYTE PTR [rax],al
 100ece0:	and    DWORD PTR [rax],eax
 100ece2:	add    al,0x0
 100ece4:	add    BYTE PTR [rax+rcx*1+0x0],dh
 100ece8:	add    BYTE PTR [rdi+rax*1+0x0],ah
 100ecec:	(bad)  
 100eced:	push   0x0
 100ecef:	add    BYTE PTR [rbp-0x43ffff96],cl
 100ecf5:	in     al,dx
 100ecf6:	add    BYTE PTR [rax],al
 100ecf8:	and    DWORD PTR [rax],eax
 100ecfa:	add    BYTE PTR [rax],al
 100ecfc:	(bad)  
 100ecfd:	push   0x0
 100ecff:	add    BYTE PTR [rbp-0x43ffff96],cl
 100ed05:	in     al,dx
 100ed06:	add    BYTE PTR [rax],al
 100ed08:	add    DWORD PTR [rdi],ecx
 100ed0a:	(bad)  
 100ed0b:	add    BYTE PTR [rdi],cl
 100ed0d:	or     BYTE PTR fs:[rax],al
 100ed10:	sysenter 
 100ed12:	(bad)  
 100ed13:	add    BYTE PTR [rdi],cl
 100ed15:	xor    cl,BYTE PTR [rbx]
 100ed17:	jo     0x100ed1a
 100ed19:	sbb    ecx,DWORD PTR [rax]
 100ed1b:	add    BYTE PTR [rbx],bl
 100ed1d:	rcl    BYTE PTR [rax+rsi*8],cl
 100ed20:	adc    ah,al
 100ed22:	adc    al,dl
 100ed24:	(bad)  
 100ed25:	jo     0x100ed34
 100ed27:	(bad)  
 100ed28:	or     al,0x30
 100ed2a:	or     edx,DWORD PTR [rax+0x21]
 100ed2d:	or     BYTE PTR [rdx],al
 100ed2f:	add    BYTE PTR [rax],cl
 100ed31:	(bad)  
 100ed32:	(bad)  
 100ed33:	add    al,dl
 100ed35:	ins    BYTE PTR es:[rdi],dx
 100ed36:	add    BYTE PTR [rax],al
 100ed38:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 100ed39:	ins    DWORD PTR es:[rdi],dx
 100ed3a:	add    BYTE PTR [rax],al
 100ed3c:	sbb    ch,ch
 100ed3e:	add    BYTE PTR [rax],al
 100ed40:	and    DWORD PTR [rax],eax
 100ed42:	add    al,BYTE PTR [rax]
 100ed44:	add    ah,al
 100ed46:	(bad)  
 100ed47:	add    al,dl
 100ed49:	ins    BYTE PTR es:[rdi],dx
 100ed4a:	add    BYTE PTR [rax],al
 100ed4c:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 100ed4d:	ins    DWORD PTR es:[rdi],dx
 100ed4e:	add    BYTE PTR [rax],al
 100ed50:	sbb    ch,ch
 100ed52:	add    BYTE PTR [rax],al
 100ed54:	sbb    DWORD PTR [rcx+rcx*1],esp
 100ed57:	add    BYTE PTR [rdx],dl
 100ed59:	add    DWORD PTR [rax+rax*1+0xb],ecx
 100ed5d:	lock or eax,edx
 100ed60:	(bad)  
 100ed61:	rol    BYTE PTR [rip+0x3600470],0x50        # 0x460f1d8
 100ed68:	add    dh,BYTE PTR [rax]
 100ed6a:	add    BYTE PTR [rax],al
 100ed6c:	cwde   
 100ed6d:	push   rdi
 100ed6e:	add    BYTE PTR [rax],al
 100ed70:	add    al,BYTE PTR [rax]
 100ed73:	add    BYTE PTR [rcx],ah
 100ed75:	or     BYTE PTR [rdx],al
 100ed77:	add    BYTE PTR [rax],cl
 100ed79:	in     al,0x4b
 100ed7b:	add    al,al
 100ed7d:	jne    0x100ed7f
 100ed7f:	add    BYTE PTR [rip+0x54000076],dl        # 0x5500edfb
 100ed85:	in     eax,dx
 100ed86:	add    BYTE PTR [rax],al
 100ed88:	and    DWORD PTR [rax],eax
 100ed8a:	add    BYTE PTR [rax],al
 100ed8c:	shl    BYTE PTR [rbp+0x0],0x0
 100ed90:	adc    eax,0x54000076
 100ed95:	in     eax,dx
 100ed96:	add    BYTE PTR [rax],al
 100ed98:	add    DWORD PTR [rip+0xffffffffe4150008],edx        # 0xffffffffe515eda6
 100ed9e:	or     eax,DWORD PTR [rax]
 100eda0:	adc    eax,0x15000a54
 100eda5:	xor    al,0x9
 100eda7:	add    BYTE PTR [rip+0x21f01152],dl        # 0x22f0feff
 100edad:	add    eax,0x64050002
 100edb2:	or     BYTE PTR [rax],al
 100edb4:	and    BYTE PTR [rax+0x0],bh
 100edb7:	add    BYTE PTR [rdx+0x78],cl
 100edba:	add    BYTE PTR [rax],al
 100edbc:	cwde   
 100edbd:	in     eax,dx
 100edbe:	add    BYTE PTR [rax],al
 100edc0:	and    DWORD PTR [rax],eax
 100edc2:	add    BYTE PTR [rax],al
 100edc4:	and    BYTE PTR [rax+0x0],bh
 100edc7:	add    BYTE PTR [rdx+0x78],cl
 100edca:	add    BYTE PTR [rax],al
 100edcc:	cwde   
 100edcd:	in     eax,dx
 100edce:	add    BYTE PTR [rax],al
 100edd0:	add    DWORD PTR [rax],ecx
 100edd2:	add    al,0x0
 100edd4:	or     BYTE PTR [rdx+0x50036004],dl
 100edda:	add    dh,BYTE PTR [rax]
 100eddc:	and    DWORD PTR [rip+0x74050002],eax        # 0x7505ede4
 100ede2:	(bad)  
 100ede3:	add    al,ah
 100ede5:	jns    0x100ede7
 100ede7:	add    BYTE PTR [rdx+rdi*2-0x12300000],cl
 100edee:	add    BYTE PTR [rax],al
 100edf0:	and    DWORD PTR [rax],eax
 100edf2:	add    BYTE PTR [rax],al
 100edf4:	loopne 0x100ee6f
 100edf6:	add    BYTE PTR [rax],al
 100edf8:	mov    WORD PTR [rdx+0x0],?
 100edfb:	add    al,dl
 100edfd:	in     eax,dx
 100edfe:	add    BYTE PTR [rax],al
 100ee00:	and    DWORD PTR [rax],eax
 100ee02:	add    al,BYTE PTR [rax]
 100ee04:	add    BYTE PTR [rsi+rcx*1+0x0],dh
 100ee08:	loopne 0x100ee83
 100ee0a:	add    BYTE PTR [rax],al
 100ee0c:	mov    WORD PTR [rdx+0x0],?
 100ee0f:	add    al,dl
 100ee11:	in     eax,dx
 100ee12:	add    BYTE PTR [rax],al
 100ee14:	sbb    DWORD PTR [rdi],ebx
 100ee16:	add    eax,0x4c340d00
 100ee1b:	add    BYTE PTR [rip+0x6004801],cl        # 0x7013622
 100ee21:	jo     0x100ee23
 100ee23:	add    BYTE PTR [rax+0x30000057],bl
 100ee29:	add    al,BYTE PTR [rax]
 100ee2b:	add    BYTE PTR [rcx],bl
 100ee2d:	or     DWORD PTR ss:[rax],eax
 100ee30:	and    eax,0x25064774
 100ee35:	fs rex.RX (bad) 
 100ee38:	and    eax,0x25064534
 100ee3d:	add    DWORD PTR [rdx+0x6],eax
 100ee40:	adc    BYTE PTR [rax+0x0],dl
 100ee43:	add    BYTE PTR [rax+0x57],bl
 100ee49:	xor    al,BYTE PTR [rax]
 100ee4b:	add    BYTE PTR [rcx],al
 100ee4d:	adc    BYTE PTR [rbx],al
 100ee4f:	add    BYTE PTR [rax],dl
 100ee51:	rex.X or al,0x60
 100ee54:	or     esi,DWORD PTR [rax]
 100ee56:	add    BYTE PTR [rax],al
 100ee58:	and    DWORD PTR [rip+0x74050002],eax        # 0x7505ee60
 100ee5e:	add    al,0x0
 100ee60:	adc    BYTE PTR [rbx-0x7cc20000],al
 100ee66:	add    BYTE PTR [rax],al
 100ee68:	rex.WR out dx,al
 100ee6a:	add    BYTE PTR [rax],al
 100ee6c:	and    DWORD PTR [rax],eax
 100ee6e:	add    al,BYTE PTR [rax]
 100ee70:	add    BYTE PTR [rsp+rax*1+0x0],dh
 100ee74:	adc    BYTE PTR [rbx-0x7cc20000],al
 100ee7a:	add    BYTE PTR [rax],al
 100ee7c:	rex.WR out dx,al
 100ee7e:	add    BYTE PTR [rax],al
 100ee80:	and    DWORD PTR [rax],eax
 100ee82:	add    BYTE PTR [rax],al
 100ee84:	adc    BYTE PTR [rbx-0x7cc20000],al
 100ee8a:	add    BYTE PTR [rax],al
 100ee8c:	rex.WR out dx,al
 100ee8e:	add    BYTE PTR [rax],al
 100ee90:	add    DWORD PTR [rax],ebx
 100ee92:	add    DWORD PTR [rax],eax
 100ee94:	sbb    dl,al
 100ee96:	add    BYTE PTR [rax],al
 100ee98:	add    DWORD PTR [rsi],eax
 100ee9a:	add    al,BYTE PTR [rax]
 100ee9c:	(bad)  
 100ee9d:	push   rdx
 100ee9e:	add    dl,BYTE PTR [rax+0x19]
 100eea1:	sbb    DWORD PTR [rdx],eax
 100eea3:	add    BYTE PTR [rdi],al
 100eea5:	add    DWORD PTR [rcx+0x0],esp
 100eea8:	call   0x200ef05
 100eead:	add    BYTE PTR [rax],al
 100eeaf:	add    BYTE PTR [rsp+rax*4-0x74140000],bh
 100eeb6:	add    BYTE PTR [rax],al
 100eeb8:	nop
 100eeb9:	mov    WORD PTR [rax],es
 100eebb:	add    BYTE PTR [rax],al
 100eebd:	add    BYTE PTR [rax],al
 100eebf:	add    dl,bh
 100eec1:	add    al,BYTE PTR [rax]
 100eec3:	add    BYTE PTR [rcx],al
 100eec5:	adc    eax,DWORD PTR [rcx]
 100eec7:	add    BYTE PTR [rbx],dl
 100eec9:	(bad)  
 100eeca:	add    BYTE PTR [rax],al
 100eecc:	add    DWORD PTR [rbx],edx
 100eece:	add    DWORD PTR [rax],eax
 100eed0:	adc    eax,DWORD PTR [rdx+0x13010000]
 100eed6:	add    DWORD PTR [rax],eax
 100eed8:	adc    esp,DWORD PTR [rdx]
 100eeda:	add    BYTE PTR [rax],al
 100eedc:	add    DWORD PTR [rax],ebx
 100eede:	add    DWORD PTR [rax],eax
 100eee0:	sbb    BYTE PTR [rdx+0x0],ah
 100eee3:	add    BYTE PTR [rcx],al
 100eee5:	adc    eax,DWORD PTR [rcx]
 100eee7:	add    BYTE PTR [rbx],dl
 100eee9:	and    al,BYTE PTR [rax]
 100eeeb:	add    BYTE PTR [rcx],al
 100eeed:	sbb    BYTE PTR [rcx],al
 100eeef:	add    BYTE PTR [rax],bl
 100eef1:	and    al,BYTE PTR [rax]
 100eef3:	add    BYTE PTR [rcx],al
 100eef5:	add    al,0x1
 100eef7:	add    BYTE PTR [rdx+riz*2],al
 100eefa:	add    BYTE PTR [rax],al
 100eefc:	add    DWORD PTR [rbx+rax*1],ecx
 100eeff:	add    BYTE PTR [rdx+riz*4],cl
 100ef02:	or     al,ah
 100ef04:	(bad)  
 100ef05:	xor    BYTE PTR [rax],al
 100ef07:	add    BYTE PTR [rcx],ah
 100ef09:	or     al,BYTE PTR [rax+rax*1]
 100ef0c:	or     ah,BYTE PTR [rdi+rcx*1+0x0]
 100ef10:	add    eax,0xf0000e54
 100ef15:	nop
 100ef16:	add    BYTE PTR [rax],al
 100ef18:	setno  BYTE PTR [rax]
 100ef1b:	add    ah,bh
 100ef1d:	out    dx,al
 100ef1e:	add    BYTE PTR [rax],al
 100ef20:	and    DWORD PTR [rdi],ebp
 100ef22:	or     BYTE PTR [rax],al
 100ef24:	(bad)  
 100ef25:	hlt    
 100ef26:	or     BYTE PTR [rax],al
 100ef28:	es (bad) 
 100ef2a:	or     DWORD PTR [rax],eax
 100ef2c:	or     eax,0x8000ac4
 100ef31:	je     0x100ef43
 100ef33:	add    BYTE PTR [rdi],cl
 100ef35:	xchg   ecx,eax
 100ef36:	add    BYTE PTR [rax],al
 100ef38:	(bad)  
 100ef3a:	add    BYTE PTR [rax],al
 100ef3c:	or     bh,ch
 100ef3e:	add    BYTE PTR [rax],al
 100ef40:	and    DWORD PTR [rax],eax
 100ef42:	add    BYTE PTR [rax],al
 100ef44:	setno  BYTE PTR [rax]
 100ef47:	add    BYTE PTR [rdx-0x6f],ah
 100ef4a:	add    BYTE PTR [rax],al
 100ef4c:	or     bh,ch
 100ef4e:	add    BYTE PTR [rax],al
 100ef50:	and    DWORD PTR [rax],eax
 100ef52:	add    BYTE PTR [rax],al
 100ef54:	lock nop
 100ef56:	add    BYTE PTR [rax],al
 100ef58:	setno  BYTE PTR [rax]
 100ef5b:	add    ah,bh
 100ef5d:	out    dx,al
 100ef5e:	add    BYTE PTR [rax],al
 100ef60:	add    DWORD PTR [rax+0xe],edi
 100ef63:	add    BYTE PTR [rax-0x2c],bh
 100ef66:	(bad)  
 100ef67:	add    BYTE PTR [rbx+0x54],dh
 100ef6a:	or     al,0x0
 100ef6c:	xor    eax,0x300006e4
 100ef71:	(bad)  
 100ef72:	(bad)  
 100ef73:	add    BYTE PTR [rbx],ch
 100ef75:	je     0x100ef84
 100ef77:	add    BYTE PTR [rcx],cl
 100ef79:	jb     0x100ef80
 100ef7b:	lock add esp,DWORD PTR [rax+0x2]
 100ef7f:	xor    BYTE PTR [rcx],al
 100ef81:	add    al,0x1
 100ef83:	add    BYTE PTR [rdx+riz*4],al
 100ef86:	add    BYTE PTR [rax],al
 100ef88:	and    DWORD PTR [rip+0x34050002],eax        # 0x3505ef90
 100ef8e:	or     al,BYTE PTR [rax]
 100ef90:	(bad)  
 100ef91:	xchg   esi,eax
 100ef92:	add    BYTE PTR [rax],al
 100ef94:	xchg   BYTE PTR [rsi-0x10800000],dl
 100ef9a:	add    BYTE PTR [rax],al
 100ef9c:	and    DWORD PTR [rax],eax
 100ef9e:	add    al,BYTE PTR [rax]
 100efa0:	add    BYTE PTR [rdx+rcx*1],dh
 100efa3:	add    BYTE PTR [rax-0x6a],ah
 100efa6:	add    BYTE PTR [rax],al
 100efa8:	xchg   BYTE PTR [rsi-0x10800000],dl
 100efae:	add    BYTE PTR [rax],al
 100efb0:	add    DWORD PTR [rcx+rax*1],eax
 100efb3:	add    BYTE PTR [rdx+rax*2],al
 100efb6:	add    BYTE PTR [rax],al
 100efb8:	add    DWORD PTR [rsi],eax
 100efba:	add    al,BYTE PTR [rax]
 100efbc:	(bad)  
 100efbd:	xor    al,BYTE PTR [rdx]
 100efbf:	xor    BYTE PTR [rcx],al
 100efc1:	sbb    BYTE PTR [rdx],cl
 100efc3:	add    BYTE PTR [rax],bl
 100efc5:	or     al,BYTE PTR fs:[rax]
 100efc8:	sbb    BYTE PTR [rcx+rcx*1+0x0],dl
 100efcc:	sbb    BYTE PTR [rax+rcx*1],dh
 100efcf:	add    BYTE PTR [rax],bl
 100efd1:	xor    dl,BYTE PTR [rax+rsi*8]
 100efd4:	adc    ah,al
 100efd6:	adc    BYTE PTR [rax+0x1],dh
 100efd9:	sbb    BYTE PTR [rdx],cl
 100efdb:	add    BYTE PTR [rax],bl
 100efdd:	fs or  eax,0xc541800
 100efe3:	add    BYTE PTR [rax],bl
 100efe5:	xor    al,0xb
 100efe7:	add    BYTE PTR [rax],bl
 100efe9:	push   rdx
 100efea:	adc    al,0xf0
 100efec:	adc    ah,al
 100efee:	adc    BYTE PTR [rax+0x21],dh
 100eff1:	add    eax,0xc4050002
 100eff6:	or     al,BYTE PTR [rax]
 100eff8:	jo     0x100ef92
 100effa:	add    BYTE PTR [rax],al
 100effc:	retf   0x98
 100efff:	add    al,bl
 100f001:	out    dx,eax
 100f002:	add    BYTE PTR [rax],al
 100f004:	and    DWORD PTR [rax],eax
 100f006:	add    BYTE PTR [rax],al
 100f008:	jo     0x100efa2
 100f00a:	add    BYTE PTR [rax],al
 100f00c:	retf   0x98
 100f00f:	add    al,bl
 100f011:	out    dx,eax
 100f012:	add    BYTE PTR [rax],al
 100f014:	add    DWORD PTR [rsi+rax*1],ecx
 100f017:	add    BYTE PTR [rsp+rsi*1],cl
 100f01a:	or     eax,0x8520c00
 100f01f:	jo     0x100f028
 100f021:	(bad)  
 100f022:	(bad)  
 100f023:	push   rax
 100f024:	and    DWORD PTR [rdi],ecx
 100f026:	(bad)  
 100f027:	add    BYTE PTR [rdi],cl
 100f029:	hlt    
 100f02a:	or     al,0x0
 100f02c:	or     ah,ah
 100f02e:	or     eax,DWORD PTR [rax]
 100f030:	add    eax,0xb0000ac4
 100f035:	cdq    
 100f036:	add    BYTE PTR [rax],al
 100f038:	(bad)  
 100f039:	cdq    
 100f03a:	add    BYTE PTR [rax],al
 100f03c:	adc    al,0xf0
 100f03e:	add    BYTE PTR [rax],al
 100f040:	and    DWORD PTR [rax],eax
 100f042:	add    BYTE PTR [rax],al
 100f044:	mov    al,0x99
 100f046:	add    BYTE PTR [rax],al
 100f048:	(bad)  
 100f049:	cdq    
 100f04a:	add    BYTE PTR [rax],al
 100f04c:	adc    al,0xf0
 100f04e:	add    BYTE PTR [rax],al
 100f050:	add    DWORD PTR [rdx],ecx
 100f052:	add    al,0x0
 100f054:	or     dh,BYTE PTR [rdx+0x6]
 100f057:	rol    BYTE PTR [rax+rax*8],1
 100f05a:	add    dh,BYTE PTR [rax+0x21]
 100f05d:	(bad)  
 100f05e:	or     al,BYTE PTR [rax]
 100f060:	(bad)  
 100f061:	hlt    
 100f062:	(bad)  
 100f063:	add    BYTE PTR [rcx],bl
 100f065:	in     al,0x7
 100f067:	add    BYTE PTR [rdi],cl
 100f069:	fs (bad) 
 100f06b:	add    BYTE PTR [rdx],cl
 100f06d:	push   rsp
 100f06e:	or     eax,0xc340500
 100f073:	add    al,dh
 100f075:	(bad)  
 100f076:	add    BYTE PTR [rax],al
 100f078:	and    ebx,DWORD PTR [rbx-0xfb00000]
 100f07e:	add    BYTE PTR [rax],al
 100f080:	and    DWORD PTR [rax],eax
 100f082:	add    BYTE PTR [rax],al
 100f084:	lock (bad) 
 100f086:	add    BYTE PTR [rax],al
 100f088:	and    ebx,DWORD PTR [rbx-0xfb00000]
 100f08e:	add    BYTE PTR [rax],al
 100f090:	and    DWORD PTR [rax],eax
 100f092:	or     al,BYTE PTR [rax]
 100f094:	add    ah,dh
 100f096:	(bad)  
 100f097:	add    BYTE PTR [rax],al
 100f099:	in     al,0x7
 100f09b:	add    BYTE PTR [rax],al
 100f09d:	fs (bad) 
 100f09f:	add    BYTE PTR [rax],al
 100f0a1:	push   rsp
 100f0a2:	or     eax,0xc340000
 100f0a7:	add    al,dh
 100f0a9:	(bad)  
 100f0aa:	add    BYTE PTR [rax],al
 100f0ac:	and    ebx,DWORD PTR [rbx-0xfb00000]
 100f0b2:	add    BYTE PTR [rax],al
 100f0b4:	add    DWORD PTR [rsi],eax
 100f0b6:	add    al,BYTE PTR [rax]
 100f0b8:	(bad)  
 100f0b9:	xor    al,BYTE PTR [rdx]
 100f0bb:	xor    BYTE PTR [rcx],al
 100f0bd:	(bad)  
 100f0be:	add    al,BYTE PTR [rax]
 100f0c0:	(bad)  
 100f0c1:	xor    al,BYTE PTR [rdx]
 100f0c3:	jo     0x100f0e6
 100f0c5:	clts   
 100f0c7:	add    BYTE PTR [rdi],cl
 100f0c9:	or     BYTE PTR fs:[rax],al
 100f0cc:	or     dl,BYTE PTR [rdi+rax*1+0x0]
 100f0d0:	add    eax,0x50000634
 100f0d5:	popf   
 100f0d6:	add    BYTE PTR [rax],al
 100f0d8:	mov    ah,0x9d
 100f0da:	add    BYTE PTR [rax],al
 100f0dc:	mov    esp,0x210000f0
 100f0e1:	add    BYTE PTR [rsi],al
 100f0e3:	add    BYTE PTR [rax],al
 100f0e5:	or     BYTE PTR fs:[rax],al
 100f0e8:	add    BYTE PTR [rdi+rax*1+0x0],dl
 100f0ec:	add    BYTE PTR [rsi+rax*1],dh
 100f0ef:	add    BYTE PTR [rax-0x63],dl
 100f0f2:	add    BYTE PTR [rax],al
 100f0f4:	mov    ah,0x9d
 100f0f6:	add    BYTE PTR [rax],al
 100f0f8:	mov    esp,0x210000f0
 100f0fd:	add    BYTE PTR [rax],al
 100f0ff:	add    BYTE PTR [rax-0x63],dl
 100f102:	add    BYTE PTR [rax],al
 100f104:	mov    ah,0x9d
 100f106:	add    BYTE PTR [rax],al
 100f108:	mov    esp,0x10000f0
 100f10d:	(bad)  
 100f10e:	add    al,BYTE PTR [rax]
 100f110:	(bad)  
 100f111:	xor    al,BYTE PTR [rdx]
 100f113:	loopne 0x100f136
 100f115:	or     al,BYTE PTR [rax+rax*1]
 100f118:	or     ah,BYTE PTR [rdi+rax*1+0x0]
 100f11c:	add    eax,0x60000634
 100f121:	sahf   
 100f122:	add    BYTE PTR [rax],al
 100f124:	mov    DWORD PTR [rsi-0xef40000],ebx
 100f12a:	add    BYTE PTR [rax],al
 100f12c:	and    DWORD PTR [rdx],ecx
 100f12e:	(bad)  
 100f12f:	add    BYTE PTR [rdx],cl
 100f131:	je     0x100f13b
 100f133:	add    BYTE PTR [rax],al
 100f135:	fs (bad) 
 100f137:	add    BYTE PTR [rax],al
 100f139:	xor    al,0x6
 100f13b:	add    BYTE PTR [rax-0x62],ah
 100f13e:	add    BYTE PTR [rax],al
 100f140:	mov    DWORD PTR [rsi-0xef40000],ebx
 100f146:	add    BYTE PTR [rax],al
 100f148:	and    DWORD PTR [rax],eax
 100f14a:	(bad)  
 100f14b:	add    BYTE PTR [rax],al
 100f14d:	je     0x100f157
 100f14f:	add    BYTE PTR [rax],al
 100f151:	fs (bad) 
 100f153:	add    BYTE PTR [rax],al
 100f155:	xor    al,0x6
 100f157:	add    BYTE PTR [rax-0x62],ah
 100f15a:	add    BYTE PTR [rax],al
 100f15c:	mov    DWORD PTR [rsi-0xef40000],ebx
 100f162:	add    BYTE PTR [rax],al
 100f164:	and    DWORD PTR [rax],eax
 100f166:	add    BYTE PTR [rax],al
 100f168:	(bad)  
 100f169:	sahf   
 100f16a:	add    BYTE PTR [rax],al
 100f16c:	mov    DWORD PTR [rsi-0xef40000],ebx
 100f172:	add    BYTE PTR [rax],al
 100f174:	or     DWORD PTR [rsi],eax
 100f176:	add    al,BYTE PTR [rax]
 100f178:	(bad)  
 100f179:	xor    al,BYTE PTR [rdx]
 100f17b:	xor    BYTE PTR [rdx+0x100005a],al
 100f181:	add    BYTE PTR [rax],al
 100f183:	add    BYTE PTR [rbx-0x38ffff61],bh
 100f189:	lahf   
 100f18a:	add    BYTE PTR [rax],al
 100f18c:	add    DWORD PTR [rax],eax
 100f18e:	add    BYTE PTR [rax],al
 100f190:	(bad)  
 100f191:	lahf   
 100f192:	add    BYTE PTR [rax],al
 100f194:	add    DWORD PTR [rsi],eax
 100f196:	add    al,BYTE PTR [rax]
 100f198:	(bad)  
 100f199:	xor    al,BYTE PTR [rdx]
 100f19b:	xor    BYTE PTR [rcx],al
 100f19d:	(bad)  
 100f19e:	add    al,BYTE PTR [rax]
 100f1a0:	(bad)  
 100f1a1:	xor    al,BYTE PTR [rdx]
 100f1a3:	xor    BYTE PTR [rcx],cl
 100f1a5:	adc    ecx,DWORD PTR [rax]
 100f1a7:	add    BYTE PTR [rbx],dl
 100f1a9:	or     eax,DWORD PTR fs:[rax]
 100f1ac:	adc    esi,DWORD PTR [rdx+rcx*1]
 100f1af:	add    BYTE PTR [rbx],dl
 100f1b1:	push   rdx
 100f1b2:	(bad)  
 100f1b4:	or     eax,0x82700bc0
 100f1b9:	pop    rdx
 100f1ba:	add    BYTE PTR [rax],al
 100f1bc:	add    al,BYTE PTR [rax]
 100f1be:	add    BYTE PTR [rax],al
 100f1c0:	movabs ds:0x10000a1b60000a1,al
 100f1c9:	add    BYTE PTR [rax],al
 100f1cb:	add    BYTE PTR [rsi+0x580000a1],dh
 100f1d1:	movabs eax,ds:0x10000a1fc0000
 100f1da:	add    BYTE PTR [rax],al
 100f1dc:	cld    
 100f1dd:	movabs eax,ds:0x741a00081a090000
 100f1e6:	or     eax,DWORD PTR [rax]
 100f1e8:	sbb    ah,BYTE PTR [rdx+rcx*1+0x0]
 100f1ec:	sbb    dh,BYTE PTR [rcx+rcx*1]
 100f1ef:	add    BYTE PTR [rdx],bl
 100f1f1:	push   rdx
 100f1f2:	(bad)  
 100f1f3:	rol    BYTE PTR [rdx+0x100005a],0x0
 100f1fa:	add    BYTE PTR [rax],al
 100f1fc:	lods   al,BYTE PTR ds:[rsi]
 100f1fd:	movabs ds:0x10000a2bf0000,al
 100f206:	add    BYTE PTR [rax],al
 100f208:	mov    edi,0x90000a2
 100f20d:	adc    al,0x6
 100f20f:	add    BYTE PTR [rsp+riz*2],dl
 100f212:	or     al,BYTE PTR [rax]
 100f214:	adc    al,0x34
 100f216:	or     DWORD PTR [rax],eax
 100f218:	adc    al,0x52
 100f21a:	adc    BYTE PTR [rax-0x7e],dh
 100f21d:	pop    rdx
 100f21e:	add    BYTE PTR [rax],al
 100f220:	add    DWORD PTR [rax],eax
 100f222:	add    BYTE PTR [rax],al
 100f224:	rex.WXB movabs ds:0x10000a35b0000,rax
 100f22e:	add    BYTE PTR [rax],al
 100f230:	pop    rbx
 100f231:	movabs ds:0xa410000000210000,eax
 100f23a:	add    BYTE PTR [rax],al
 100f23c:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 100f23e:	add    BYTE PTR [rax],al
 100f240:	ins    BYTE PTR es:[rdi],dx
 100f241:	repnz add BYTE PTR [rax],al
 100f244:	and    DWORD PTR [rax],eax
 100f246:	add    al,BYTE PTR [rax]
 100f248:	add    BYTE PTR [rsi+rax*1],dh
 100f24b:	add    BYTE PTR [rax],dl
 100f24d:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 100f24e:	add    BYTE PTR [rax],al
 100f250:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 100f252:	add    BYTE PTR [rax],al
 100f254:	ins    BYTE PTR es:[rdi],dx
 100f255:	repnz add BYTE PTR [rax],al
 100f258:	and    DWORD PTR [rip+0x34050002],eax        # 0x3505f260
 100f25e:	(bad)  
 100f25f:	add    BYTE PTR [rax],dl
 100f261:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 100f262:	add    BYTE PTR [rax],al
 100f264:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 100f266:	add    BYTE PTR [rax],al
 100f268:	ins    BYTE PTR es:[rdi],dx
 100f269:	repnz add BYTE PTR [rax],al
 100f26c:	add    DWORD PTR [rbx],ecx
 100f26e:	add    eax,DWORD PTR [rax]
 100f270:	or     esp,DWORD PTR [rdx+0x7]
 100f273:	jo     0x100f27b
 100f275:	(bad)  
 100f276:	add    BYTE PTR [rax],al
 100f278:	and    DWORD PTR [rax],eax
 100f27a:	add    BYTE PTR [rax],al
 100f27c:	movabs al,ds:0x9c0000a5350000a4
 100f285:	repnz add BYTE PTR [rax],al
 100f288:	and    DWORD PTR [rax],ecx
 100f28a:	add    al,BYTE PTR [rax]
 100f28c:	or     BYTE PTR [rcx+rbx*2],dh
 100f28f:	add    DWORD PTR [rax+0x350000a4],esp
 100f295:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 100f296:	add    BYTE PTR [rax],al
 100f298:	pushf  
 100f299:	repnz add BYTE PTR [rax],al
 100f29c:	sbb    DWORD PTR [rbx],ebx
 100f29e:	add    eax,DWORD PTR [rax]
 100f2a0:	or     DWORD PTR [rcx],eax
 100f2a2:	push   rsi
 100f2a3:	add    DWORD PTR [rdx],eax
 100f2a5:	jo     0x100f2a7
 100f2a7:	add    BYTE PTR [rax-0x5fffffa9],bl
 100f2ad:	or     al,BYTE PTR [rax]
 100f2af:	add    BYTE PTR [rcx],cl
 100f2b1:	sbb    cl,BYTE PTR [rax]
 100f2b3:	add    BYTE PTR [rdx],bl
 100f2b5:	je     0x100f2c4
 100f2b7:	add    BYTE PTR [rdx],bl
 100f2b9:	fs or  al,0x0
 100f2bc:	sbb    dh,BYTE PTR [rbx+rcx*1]
 100f2bf:	add    BYTE PTR [rdx],bl
 100f2c1:	jb     0x100f2d9
 100f2c3:	rol    BYTE PTR [rdx+0x100005a],0x0
 100f2ca:	add    BYTE PTR [rax],al
 100f2cc:	pop    rcx
 100f2cd:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 100f2ce:	add    BYTE PTR [rax],al
 100f2d0:	(bad)  
 100f2d1:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 100f2d2:	add    BYTE PTR [rax],al
 100f2d4:	add    DWORD PTR [rax],eax
 100f2d6:	add    BYTE PTR [rax],al
 100f2d8:	(bad)  
 100f2d9:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 100f2da:	add    BYTE PTR [rax],al
 100f2dc:	and    DWORD PTR [rax],eax
 100f2de:	add    BYTE PTR [rax],al
 100f2e0:	lock cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 100f2e2:	add    BYTE PTR [rax],al
 100f2e4:	add    ah,BYTE PTR [rdi-0xcec0000]
 100f2ea:	add    BYTE PTR [rax],al
 100f2ec:	and    DWORD PTR [rax],eax
 100f2ee:	add    al,BYTE PTR [rax]
 100f2f0:	add    BYTE PTR [rax+rcx*1+0x0],dh
 100f2f4:	lock cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 100f2f6:	add    BYTE PTR [rax],al
 100f2f8:	add    ah,BYTE PTR [rdi-0xcec0000]
 100f2fe:	add    BYTE PTR [rax],al
 100f300:	and    DWORD PTR [rip+0x74050002],eax        # 0x7505f308
 100f306:	or     BYTE PTR [rax],al
 100f308:	lock cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 100f30a:	add    BYTE PTR [rax],al
 100f30c:	add    ah,BYTE PTR [rdi-0xcec0000]
 100f312:	add    BYTE PTR [rax],al
 100f314:	add    DWORD PTR [rsi],eax
 100f316:	add    al,BYTE PTR [rax]
 100f318:	(bad)  
 100f319:	push   rdx
 100f31a:	add    dh,BYTE PTR [rax]
 100f31c:	or     DWORD PTR [rbx],ebx
 100f31e:	or     BYTE PTR [rax],al
 100f320:	sbb    esi,DWORD PTR [rcx*1+0x17321b00]
 100f327:	loopne 0x100f33e
 100f329:	rcl    BYTE PTR [rbx],1
 100f32b:	rcl    BYTE PTR [rcx],0x70
 100f32e:	adc    BYTE PTR [rax-0x7e],ah
 100f331:	pop    rdx
 100f332:	add    BYTE PTR [rax],al
 100f334:	add    DWORD PTR [rax],eax
 100f336:	add    BYTE PTR [rax],al
 100f338:	(bad)  
 100f339:	test   al,0x0
 100f33b:	add    BYTE PTR [rdi-0x58],dh
 100f33e:	add    BYTE PTR [rax],al
 100f340:	add    DWORD PTR [rax],eax
 100f342:	add    BYTE PTR [rax],al
 100f344:	ja     0x100f2ee
 100f346:	add    BYTE PTR [rax],al
 100f348:	add    DWORD PTR [rdx],ecx
 100f34a:	add    al,0x0
 100f34c:	or     dh,BYTE PTR [rsi+rax*1]
 100f34f:	add    BYTE PTR [rdx],cl
 100f351:	xor    al,BYTE PTR [rsi]
 100f353:	jo     0x100f356
 100f355:	clts   
 100f357:	add    BYTE PTR [rdi],cl
 100f359:	fs (bad) 
 100f35b:	add    BYTE PTR [rdi],cl
 100f35d:	xor    al,0x6
 100f35f:	add    BYTE PTR [rdi],cl
 100f361:	xor    cl,BYTE PTR [rbx]
 100f363:	jo     0x100f386
 100f365:	add    BYTE PTR [rax],al
 100f367:	add    BYTE PTR [rax-0x3ffff56],dh
 100f36d:	stos   BYTE PTR es:[rdi],al
 100f36e:	add    BYTE PTR [rax],al
 100f370:	pushf  
 100f371:	repz add BYTE PTR [rax],al
 100f374:	and    DWORD PTR [rax],eax
 100f376:	add    al,BYTE PTR [rax]
 100f378:	add    BYTE PTR [rax+rcx*1+0x0],ah
 100f37c:	mov    al,0xaa
 100f37e:	add    BYTE PTR [rax],al
 100f380:	cld    
 100f381:	stos   BYTE PTR es:[rdi],al
 100f382:	add    BYTE PTR [rax],al
 100f384:	pushf  
 100f385:	repz add BYTE PTR [rax],al
 100f388:	and    DWORD PTR [rip+0x64050002],eax        # 0x6505f390
 100f38e:	or     BYTE PTR [rax],al
 100f390:	mov    al,0xaa
 100f392:	add    BYTE PTR [rax],al
 100f394:	cld    
 100f395:	stos   BYTE PTR es:[rdi],al
 100f396:	add    BYTE PTR [rax],al
 100f398:	pushf  
 100f399:	repz add BYTE PTR [rax],al
 100f39c:	add    DWORD PTR [rdx],ecx
 100f39e:	add    al,0x0
 100f3a0:	or     dh,BYTE PTR [rdx+rcx*1]
 100f3a3:	add    BYTE PTR [rdx],cl
 100f3a5:	push   rdx
 100f3a6:	(bad)  
 100f3a7:	jo     0x100f3ca
 100f3a9:	add    BYTE PTR [rax],al
 100f3ab:	add    al,ah
 100f3ad:	stos   DWORD PTR es:[rdi],eax
 100f3ae:	add    BYTE PTR [rax],al
 100f3b0:	or     al,0xac
 100f3b2:	add    BYTE PTR [rax],al
 100f3b4:	shl    bl,1
 100f3b6:	add    BYTE PTR [rax],al
 100f3b8:	and    DWORD PTR [rdx],ecx
 100f3ba:	add    al,0x0
 100f3bc:	or     ah,BYTE PTR [rdi+rax*1+0x0]
 100f3c0:	add    eax,0xe0000634
 100f3c5:	stos   DWORD PTR es:[rdi],eax
 100f3c6:	add    BYTE PTR [rax],al
 100f3c8:	or     al,0xac
 100f3ca:	add    BYTE PTR [rax],al
 100f3cc:	shl    bl,1
 100f3ce:	add    BYTE PTR [rax],al
 100f3d0:	add    DWORD PTR [rdx],ecx
 100f3d2:	add    al,0x0
 100f3d4:	or     dl,BYTE PTR [rax+rcx*1+0x0]
 100f3d8:	or     dh,BYTE PTR [rdx]
 100f3da:	(bad)  
 100f3db:	jo     0x100f3e6
 100f3dd:	sbb    eax,0x741d000a
 100f3e2:	ltr    WORD PTR [rip+0x1d000d64]        # 0x1e01014d
 100f3e9:	xor    al,0xc
 100f3eb:	add    BYTE PTR [rip+0x17e01972],bl        # 0x18e10d63
 100f3f1:	rcl    BYTE PTR [rip+0x5a82c0],1        # 0x15b76b7
 100f3f7:	add    BYTE PTR [rcx],al
 100f3f9:	add    BYTE PTR [rax],al
 100f3fb:	add    BYTE PTR [rdx-0x3ffff53],al
 100f401:	lods   eax,DWORD PTR ds:[rsi]
 100f402:	add    BYTE PTR [rax],al
 100f404:	add    DWORD PTR [rax],eax
 100f406:	add    BYTE PTR [rax],al
 100f408:	cld    
 100f409:	lods   eax,DWORD PTR ds:[rsi]
 100f40a:	add    BYTE PTR [rax],al
 100f40c:	or     DWORD PTR [rdi],edx
 100f40e:	(bad)  
 100f40f:	add    BYTE PTR [rdi],dl
 100f411:	xor    al,0xb
 100f413:	add    BYTE PTR [rdi],dl
 100f415:	push   rdx
 100f416:	adc    eax,eax
 100f418:	adc    DWORD PTR [rax+0x10],esi
 100f41b:	(bad)  
 100f41c:	(bad)  
 100f41d:	pop    rdx
 100f41e:	add    BYTE PTR [rax],al
 100f420:	add    DWORD PTR [rax],eax
 100f422:	add    BYTE PTR [rax],al
 100f424:	mov    ebp,0xd50000ae
 100f429:	scas   al,BYTE PTR es:[rdi]
 100f42a:	add    BYTE PTR [rax],al
 100f42c:	add    DWORD PTR [rax],eax
 100f42e:	add    BYTE PTR [rax],al
 100f430:	(bad)  
 100f431:	scas   al,BYTE PTR es:[rdi]
 100f432:	add    BYTE PTR [rax],al
 100f434:	or     DWORD PTR [rdx],ecx
 100f436:	add    al,0x0
 100f438:	or     dh,BYTE PTR [rax+rcx*1]
 100f43b:	add    BYTE PTR [rdx],cl
 100f43d:	push   rdx
 100f43e:	(bad)  
 100f43f:	jo     0x100f3c3
 100f441:	pop    rdx
 100f442:	add    BYTE PTR [rax],al
 100f444:	add    DWORD PTR [rax],eax
 100f446:	add    BYTE PTR [rax],al
 100f448:	sub    DWORD PTR [rdi-0x50680000],0x0
 100f44f:	add    BYTE PTR [rcx],al
 100f451:	add    BYTE PTR [rax],al
 100f453:	add    BYTE PTR [rax+0x90000af],bl
 100f459:	add    al,0x1
 100f45b:	add    BYTE PTR [rdx+rax*2],al
 100f45e:	add    BYTE PTR [rax],al
 100f460:	(bad)  
 100f461:	pop    rdx
 100f462:	add    BYTE PTR [rax],al
 100f464:	add    DWORD PTR [rax],eax
 100f466:	add    BYTE PTR [rax],al
 100f468:	(bad)  
 100f469:	scas   eax,DWORD PTR es:[rdi]
 100f46a:	add    BYTE PTR [rax],al
 100f46c:	in     al,0xaf
 100f46e:	add    BYTE PTR [rax],al
 100f470:	add    DWORD PTR [rax],eax
 100f472:	add    BYTE PTR [rax],al
 100f474:	in     al,0xaf
 100f476:	add    BYTE PTR [rax],al
 100f478:	or     DWORD PTR [rdi],ecx
 100f47a:	add    al,0x0
 100f47c:	sysenter 
 100f47e:	(bad)  
 100f47f:	add    BYTE PTR [rdi],cl
 100f481:	xor    cl,BYTE PTR [rbx]
 100f483:	jo     0x100f407
 100f485:	pop    rdx
 100f486:	add    BYTE PTR [rax],al
 100f488:	add    DWORD PTR [rax],eax
 100f48a:	add    BYTE PTR [rax],al
 100f48c:	xor    al,0xb0
 100f48e:	add    BYTE PTR [rax],al
 100f490:	rex.R mov al,0x0
 100f493:	add    BYTE PTR [rcx],al
 100f495:	add    BYTE PTR [rax],al
 100f497:	add    BYTE PTR [rax+rsi*4+0x0],al
 100f49b:	add    BYTE PTR [rcx],cl
 100f49d:	clts   
 100f49f:	add    BYTE PTR [rdi],cl
 100f4a1:	fs (bad) 
 100f4a3:	add    BYTE PTR [rdi],cl
 100f4a5:	xor    al,0x6
 100f4a7:	add    BYTE PTR [rdi],cl
 100f4a9:	xor    cl,BYTE PTR [rbx]
 100f4ab:	jo     0x100f42f
 100f4ad:	pop    rdx
 100f4ae:	add    BYTE PTR [rax],al
 100f4b0:	add    DWORD PTR [rax],eax
 100f4b2:	add    BYTE PTR [rax],al
 100f4b4:	pushf  
 100f4b5:	mov    al,0x0
 100f4b7:	add    BYTE PTR [rdi+0x10000b0],ch
 100f4bd:	add    BYTE PTR [rax],al
 100f4bf:	add    BYTE PTR [rdi+0x210000b0],ch
 100f4c5:	add    BYTE PTR [rax],al
 100f4c7:	add    BYTE PTR [rax-0x4f],dl
 100f4ca:	add    BYTE PTR [rax],al
 100f4cc:	pop    rsp
 100f4cd:	mov    cl,0x0
 100f4cf:	add    al,ch
 100f4d1:	hlt    
 100f4d2:	add    BYTE PTR [rax],al
 100f4d4:	and    DWORD PTR [rdx+rax*1],eax
 100f4d7:	add    BYTE PTR [rsp+rsi*2],al
 100f4da:	add    BYTE PTR [rax],al
 100f4dc:	push   rax
 100f4dd:	mov    cl,0x0
 100f4df:	add    BYTE PTR [rcx+rsi*4+0x0],bl
 100f4e3:	add    al,ch
 100f4e5:	hlt    
 100f4e6:	add    BYTE PTR [rax],al
 100f4e8:	add    DWORD PTR [rcx+rax*1],eax
 100f4eb:	add    BYTE PTR [rdx+rax*1],al
 100f4ee:	add    BYTE PTR [rax],al
 100f4f0:	add    DWORD PTR [rsi],eax
 100f4f2:	add    al,BYTE PTR [rax]
 100f4f4:	(bad)  
 100f4f5:	xchg   edx,eax
 100f4f6:	add    dh,BYTE PTR [rax]
 100f4f8:	add    DWORD PTR [rdi],ebp
 100f4fa:	or     BYTE PTR [rax],al
 100f4fc:	(bad)  
 100f4fd:	push   rsp
 100f4fe:	verw   WORD PTR [rdx]
 100f501:	xor    al,0xe
 100f503:	add    BYTE PTR [rdx],cl
 100f505:	adc    BYTE PTR fs:[rax],al
 100f508:	or     dh,BYTE PTR [rdx+0xf097006]
 100f50e:	(bad)  
 100f50f:	add    BYTE PTR [rdi],cl
 100f511:	or     DWORD PTR fs:[rax],eax
 100f514:	sysenter 
 100f516:	or     BYTE PTR [rax],al
 100f518:	rsqrtps xmm1,XMMWORD PTR [rbx]
 100f51b:	jo     0x100f49f
 100f51d:	pop    rdx
 100f51e:	add    BYTE PTR [rax],al
 100f520:	add    DWORD PTR [rax],eax
 100f522:	add    BYTE PTR [rax],al
 100f524:	fidiv  DWORD PTR [rbx-0x4bee0000]
 100f52a:	add    BYTE PTR [rax],al
 100f52c:	add    DWORD PTR [rax],eax
 100f52e:	add    BYTE PTR [rax],al
 100f530:	adc    dh,BYTE PTR [rax+rax*1+0x40a0100]
 100f537:	add    BYTE PTR [rdx],cl
 100f539:	xor    al,0x6
 100f53b:	add    BYTE PTR [rdx],cl
 100f53d:	xor    al,BYTE PTR [rsi]
 100f53f:	jo     0x100f542
 100f541:	adc    al,0x8
 100f543:	add    BYTE PTR [rsp+riz*2],dl
 100f546:	or     eax,DWORD PTR [rax]
 100f548:	adc    al,0x54
 100f54a:	or     al,BYTE PTR [rax]
 100f54c:	adc    al,0x34
 100f54e:	or     BYTE PTR [rax],al
 100f550:	adc    al,0x52
 100f552:	adc    BYTE PTR [rax+0x21],dh
 100f555:	add    BYTE PTR [rdx],al
 100f557:	add    BYTE PTR [rax],al
 100f559:	xor    al,0x8
 100f55b:	add    BYTE PTR [rax-0x41ffff4b],dl
 100f561:	mov    ch,0x0
 100f563:	add    BYTE PTR [rax+0x210000f5],ah
 100f569:	add    BYTE PTR [rsi],al
 100f56b:	add    BYTE PTR [rax],al
 100f56d:	(bad)  
 100f56e:	(bad)  
 100f56f:	add    BYTE PTR [rax],al
 100f571:	push   rsp
 100f572:	(bad)  
 100f573:	add    BYTE PTR [rax],al
 100f575:	xor    al,0x8
 100f577:	add    BYTE PTR [rax-0x41ffff4b],dl
 100f57d:	mov    ch,0x0
 100f57f:	add    BYTE PTR [rax+0x210000f5],ah
 100f585:	push   rsi
 100f586:	(bad)  
 100f587:	add    BYTE PTR [rsi-0x3c],dl
 100f58a:	(bad)  
 100f58b:	add    BYTE PTR [rcx+0x54],dl
 100f58e:	(bad)  
 100f58f:	add    BYTE PTR [rip+0xffffffff90000834],al        # 0xffffffff9100fdc9
 100f595:	mov    ch,0x0
 100f597:	add    BYTE PTR [rsi-0x5fffff4b],bh
 100f59d:	cmc    
 100f59e:	add    BYTE PTR [rax],al
 100f5a0:	add    DWORD PTR [rax],edx
 100f5a2:	add    eax,DWORD PTR [rax]
 100f5a4:	adc    BYTE PTR [rdx+0x600b700c],al
 100f5aa:	add    BYTE PTR [rax],al
 100f5ac:	add    DWORD PTR [rax+rcx*1],edx
 100f5af:	add    BYTE PTR [rsp+riz*2],dl
 100f5b2:	or     al,0x0
 100f5b4:	adc    al,0x54
 100f5b6:	or     eax,DWORD PTR [rax]
 100f5b8:	adc    al,0x34
 100f5ba:	or     al,BYTE PTR [rax]
 100f5bc:	adc    al,0x72
 100f5be:	adc    BYTE PTR [rax+0x1],dh
 100f5c1:	or     al,BYTE PTR [rax+rax*1]
 100f5c4:	or     dh,BYTE PTR [rsi+rax*1]
 100f5c7:	add    BYTE PTR [rdx],cl
 100f5c9:	xor    al,BYTE PTR [rsi]
 100f5cb:	jo     0x100f5ce
 100f5cd:	(bad)  
 100f5ce:	add    al,BYTE PTR [rax]
 100f5d0:	(bad)  
 100f5d1:	xor    al,BYTE PTR [rdx]
 100f5d3:	xor    BYTE PTR [rcx],al
 100f5d5:	(bad)  
 100f5d6:	add    al,BYTE PTR [rax]
 100f5d8:	(bad)  
 100f5d9:	xor    al,BYTE PTR [rdx]
 100f5db:	xor    BYTE PTR [rcx],al
 100f5dd:	(bad)  
 100f5de:	add    al,BYTE PTR [rax]
 100f5e0:	(bad)  
 100f5e1:	xor    al,BYTE PTR [rdx]
 100f5e3:	xor    BYTE PTR [rcx],al
 100f5e5:	adc    al,0x8
 100f5e7:	add    BYTE PTR [rsp+riz*2],dl
 100f5ea:	or     BYTE PTR [rax],al
 100f5ec:	adc    al,0x54
 100f5ee:	(bad)  
 100f5ef:	add    BYTE PTR [rsp+rsi*1],dl
 100f5f2:	(bad)  
 100f5f3:	add    BYTE PTR [rdx+rsi*1],dl
 100f5f6:	adc    BYTE PTR [rax+0x1],dh
 100f5f9:	or     al,BYTE PTR [rax+rax*1]
 100f5fc:	or     dh,BYTE PTR [rsi+rax*1]
 100f5ff:	add    BYTE PTR [rdx],cl
 100f601:	xor    al,BYTE PTR [rsi]
 100f603:	jo     0x100f60e
 100f605:	sbb    BYTE PTR [rax],cl
 100f607:	add    BYTE PTR [rax],bl
 100f609:	or     eax,DWORD PTR fs:[rax]
 100f60c:	sbb    BYTE PTR [rdx+rcx*1],dh
 100f60f:	add    BYTE PTR [rax],bl
 100f611:	xor    dl,BYTE PTR [rax+rdx*8]
 100f614:	adc    al,al
 100f616:	adc    BYTE PTR [rax-0x7e],dh
 100f619:	pop    rdx
 100f61a:	add    BYTE PTR [rax],al
 100f61c:	add    al,BYTE PTR [rax]
 100f61e:	add    BYTE PTR [rax],al
 100f620:	test   BYTE PTR [rax+rax*1+0xbca800],bh
 100f627:	add    BYTE PTR [rcx],al
 100f629:	add    BYTE PTR [rax],al
 100f62b:	add    BYTE PTR [rax-0x26ffff44],ch
 100f631:	mov    esp,0xbcea0000
 100f636:	add    BYTE PTR [rax],al
 100f638:	add    DWORD PTR [rax],eax
 100f63a:	add    BYTE PTR [rax],al
 100f63c:	(bad)  
 100f63d:	mov    esp,0xa010000
 100f642:	add    al,0x0
 100f644:	or     dh,BYTE PTR [rdx+rax*1+0x0]
 100f648:	add    eax,0x1000134
 100f64d:	(bad)  
 100f64e:	add    al,BYTE PTR [rax]
 100f650:	(bad)  
 100f651:	xor    al,BYTE PTR [rdx]
 100f653:	xor    BYTE PTR [rcx],al
 100f655:	add    eax,0x34050002
 100f65a:	add    DWORD PTR [rax],eax
 100f65c:	add    DWORD PTR [rbx],ebp
 100f65e:	add    eax,0x3742b00
 100f663:	add    BYTE PTR [rsi],ah
 100f665:	xor    al,0x2
 100f667:	add    BYTE PTR [rdx],al
 100f669:	(bad)  
 100f66a:	add    BYTE PTR [rax],al
 100f66c:	or     DWORD PTR [rdx],ebx
 100f66e:	or     al,BYTE PTR [rax]
 100f670:	sbb    al,ah
 100f672:	or     eax,0xc741a00
 100f677:	add    BYTE PTR [rdx],bl
 100f679:	or     eax,DWORD PTR fs:[rax]
 100f67c:	sbb    dh,BYTE PTR [rdx+rcx*1]
 100f67f:	add    BYTE PTR [rdx],bl
 100f681:	jb     0x100f699
 100f683:	rol    BYTE PTR [rdx+0x100005a],1
 100f689:	add    BYTE PTR [rax],al
 100f68b:	add    BYTE PTR [rbx],bl
 100f68d:	rol    BYTE PTR [rax],0x0
 100f690:	jno    0x100f652
 100f692:	add    BYTE PTR [rax],al
 100f694:	add    DWORD PTR [rax],eax
 100f696:	add    BYTE PTR [rax],al
 100f698:	jno    0x100f65a
 100f69a:	add    BYTE PTR [rax],al
 100f69c:	and    DWORD PTR [rax],eax
 100f69e:	add    BYTE PTR [rax],al
 100f6a0:	rol    al,0x0
 100f6a3:	add    BYTE PTR [rdx-0x3f],ch
 100f6a6:	add    BYTE PTR [rax],al
 100f6a8:	(bad)  
 100f6a9:	test   BYTE PTR [rax],0x0
 100f6ac:	and    DWORD PTR [rdx],ecx
 100f6ae:	add    al,0x0
 100f6b0:	or     al,ah
 100f6b2:	(bad)  
 100f6b3:	add    BYTE PTR [rip+0xffffffffc0000634],al        # 0xffffffffc100fced
 100f6b9:	rol    BYTE PTR [rax],0x0
 100f6bc:	push   0xffffffffffffffc1
 100f6be:	add    BYTE PTR [rax],al
 100f6c0:	(bad)  
 100f6c1:	test   BYTE PTR [rax],0x0
 100f6c4:	add    DWORD PTR [rdi],ecx
 100f6c6:	(bad)  
 100f6c7:	add    BYTE PTR [rdi],cl
 100f6c9:	or     DWORD PTR fs:[rax],eax
 100f6cc:	andps  xmm1,XMMWORD PTR [rax]
 100f6cf:	add    BYTE PTR [rdi],cl
 100f6d1:	xor    cl,BYTE PTR [rbx]
 100f6d3:	jo     0x100f6de
 100f6d5:	or     al,BYTE PTR [rax+rax*1]
 100f6d8:	or     dh,BYTE PTR [rax+rcx*1]
 100f6db:	add    BYTE PTR [rdx],cl
 100f6dd:	push   rdx
 100f6de:	(bad)  
 100f6df:	jo     0x100f663
 100f6e1:	pop    rdx
 100f6e2:	add    BYTE PTR [rax],al
 100f6e4:	add    DWORD PTR [rax],eax
 100f6e6:	add    BYTE PTR [rax],al
 100f6e8:	in     al,dx
 100f6e9:	rol    DWORD PTR [rax],0x0
 100f6ec:	sbb    al,0xc2
 100f6ee:	add    BYTE PTR [rax],al
 100f6f0:	add    DWORD PTR [rax],eax
 100f6f2:	add    BYTE PTR [rax],al
 100f6f4:	sbb    al,0xc2
 100f6f6:	add    BYTE PTR [rax],al
 100f6f8:	add    DWORD PTR [rdx],ecx
 100f6fa:	add    al,0x0
 100f6fc:	or     dh,BYTE PTR [rsi+rax*1]
 100f6ff:	add    BYTE PTR [rdx],cl
 100f701:	xor    al,BYTE PTR [rsi]
 100f703:	jo     0x100f706
 100f705:	adc    al,0x8
 100f707:	add    BYTE PTR [rsp+riz*2],dl
 100f70a:	or     BYTE PTR [rax],al
 100f70c:	adc    al,0x54
 100f70e:	(bad)  
 100f70f:	add    BYTE PTR [rsp+rsi*1],dl
 100f712:	(bad)  
 100f713:	add    BYTE PTR [rdx+rsi*1],dl
 100f716:	adc    BYTE PTR [rax+0x21],dh
 100f719:	add    BYTE PTR [rax],al
 100f71b:	add    BYTE PTR [rax],ah
 100f71d:	(bad)
 100f720:	pop    rax
 100f721:	(bad)
 100f724:	push   rax
 100f725:	test   DWORD PTR [rax],0x2002100
 100f72b:	add    BYTE PTR [rax],al
 100f72d:	(bad)  
 100f72e:	(bad)  
 100f72f:	add    BYTE PTR [rax],ah
 100f731:	(bad)
 100f734:	pop    rax
 100f735:	(bad)
 100f738:	push   rax
 100f739:	test   DWORD PTR [rax],0x2052100
 100f73f:	add    BYTE PTR [rip+0x200006c4],al        # 0x2100fe09
 100f745:	(bad)
 100f748:	pop    rax
 100f749:	(bad)
 100f74c:	push   rax
 100f74d:	test   DWORD PTR [rax],0x8140100
 100f753:	add    BYTE PTR [rsp+riz*2],dl
 100f756:	or     DWORD PTR [rax],eax
 100f758:	adc    al,0x54
 100f75a:	or     BYTE PTR [rax],al
 100f75c:	adc    al,0x34
 100f75e:	(bad)  
 100f75f:	add    BYTE PTR [rdx+rsi*1],dl
 100f762:	adc    BYTE PTR [rax+0x21],dh
 100f765:	add    BYTE PTR [rax],al
 100f767:	add    BYTE PTR [rax],ah
 100f769:	mov    BYTE PTR [rax],0x0
 100f76c:	pop    rax
 100f76d:	mov    BYTE PTR [rax],0x0
 100f770:	pushf  
 100f771:	test   DWORD PTR [rax],0x2002100
 100f777:	add    BYTE PTR [rax],al
 100f779:	(bad)  
 100f77a:	(bad)  
 100f77b:	add    BYTE PTR [rax],ah
 100f77d:	mov    BYTE PTR [rax],0x0
 100f780:	pop    rax
 100f781:	mov    BYTE PTR [rax],0x0
 100f784:	pushf  
 100f785:	test   DWORD PTR [rax],0x2052100
 100f78b:	add    BYTE PTR [rip+0x200006c4],al        # 0x2100fe55
 100f791:	mov    BYTE PTR [rax],0x0
 100f794:	pop    rax
 100f795:	mov    BYTE PTR [rax],0x0
 100f798:	pushf  
 100f799:	test   DWORD PTR [rax],0x8140100
 100f79f:	add    BYTE PTR [rsp+riz*2],dl
 100f7a2:	or     DWORD PTR [rax],eax
 100f7a4:	adc    al,0x54
 100f7a6:	or     BYTE PTR [rax],al
 100f7a8:	adc    al,0x34
 100f7aa:	(bad)  
 100f7ab:	add    BYTE PTR [rdx+rsi*1],dl
 100f7ae:	adc    BYTE PTR [rax+0x9],dh
 100f7b1:	(bad)  
 100f7b2:	add    al,BYTE PTR [rax]
 100f7b4:	(bad)  
 100f7b5:	push   rdx
 100f7b6:	add    dh,BYTE PTR [rax]
 100f7b8:	(bad)  
 100f7b9:	pop    rdx
 100f7ba:	add    BYTE PTR [rax],al
 100f7bc:	add    DWORD PTR [rax],eax
 100f7be:	add    BYTE PTR [rax],al
 100f7c0:	sub    al,0xc7
 100f7c2:	add    BYTE PTR [rax],al
 100f7c4:	mov    DWORD PTR ds:[rax],0x100
 100f7cb:	add    BYTE PTR [rsi],bh
 100f7cd:	mov    DWORD PTR [rax],0x60f0900
 100f7d3:	add    BYTE PTR [rdi],cl
 100f7d5:	or     DWORD PTR fs:[rax],eax
 100f7d8:	sysenter 
 100f7da:	or     BYTE PTR [rax],al
 100f7dc:	rsqrtps xmm1,XMMWORD PTR [rbx]
 100f7df:	jo     0x100f763
 100f7e1:	pop    rdx
 100f7e2:	add    BYTE PTR [rax],al
 100f7e4:	add    DWORD PTR [rax],eax
 100f7e6:	add    BYTE PTR [rax],al
 100f7e8:	mov    bh,al
 100f7ea:	add    BYTE PTR [rax],al
 100f7ec:	je     0x100f7b6
 100f7ee:	add    BYTE PTR [rax],al
 100f7f0:	add    DWORD PTR [rax],eax
 100f7f2:	add    BYTE PTR [rax],al
 100f7f4:	je     0x100f7be
 100f7f6:	add    BYTE PTR [rax],al
 100f7f8:	or     DWORD PTR [rax+rcx*1],edx
 100f7fb:	add    BYTE PTR [rdx+rsi*4],dl
 100f7fe:	adc    al,dh
 100f800:	(bad)  
 100f801:	loopne 0x100f80f
 100f803:	ror    BYTE PTR [rdx],1
 100f805:	ror    BYTE PTR [rax],0x70
 100f808:	(bad)  
 100f809:	(bad)  
 100f80a:	(bad)  
 100f80b:	xor    BYTE PTR [rdx+0x200005a],al
 100f811:	add    BYTE PTR [rax],al
 100f813:	add    BYTE PTR [rsi+0x430000ca],dl
 100f819:	retf   
 100f81a:	add    BYTE PTR [rax],al
 100f81c:	add    DWORD PTR [rax],eax
 100f81e:	add    BYTE PTR [rax],al
 100f820:	rex.XB retf 
 100f822:	add    BYTE PTR [rax],al
 100f824:	or     cl,cl
 100f826:	add    BYTE PTR [rax],al
 100f828:	(bad)  
 100f829:	retf   
 100f82a:	add    BYTE PTR [rax],al
 100f82c:	add    DWORD PTR [rax],eax
 100f82e:	add    BYTE PTR [rax],al
 100f830:	(bad)  
 100f831:	retf   
 100f832:	add    BYTE PTR [rax],al
 100f834:	or     DWORD PTR [rip+0x74150008],edx        # 0x7515f842
 100f83a:	or     al,BYTE PTR [rax]
 100f83c:	adc    eax,0x15000964
 100f841:	xor    al,0x8
 100f843:	add    BYTE PTR [rip+0xffffffff82c01152],dl        # 0xffffffff83c1099b
 100f849:	pop    rdx
 100f84a:	add    BYTE PTR [rax],al
 100f84c:	add    DWORD PTR [rax],eax
 100f84e:	add    BYTE PTR [rax],al
 100f850:	fs int3 
 100f852:	add    BYTE PTR [rax],al
 100f854:	repnz int3 
 100f856:	add    BYTE PTR [rax],al
 100f858:	add    DWORD PTR [rax],eax
 100f85a:	add    BYTE PTR [rax],al
 100f85c:	repnz int3 
 100f85e:	add    BYTE PTR [rax],al
 100f860:	add    DWORD PTR [rdi],ecx
 100f862:	(bad)  
 100f863:	add    BYTE PTR [rdi],cl
 100f865:	fs (bad) 
 100f867:	add    BYTE PTR [rdi],cl
 100f869:	xor    al,0x6
 100f86b:	add    BYTE PTR [rdi],cl
 100f86d:	xor    cl,BYTE PTR [rbx]
 100f86f:	jo     0x100f872
 100f871:	(bad)  
 100f872:	or     DWORD PTR [rax],eax
 100f874:	(bad)  
 100f875:	fs sbb al,0x0
 100f878:	(bad)  
 100f879:	push   rsp
 100f87a:	sbb    eax,DWORD PTR [rax]
 100f87c:	(bad)  
 100f87d:	xor    al,0x1a
 100f87f:	add    BYTE PTR [rdi],dl
 100f881:	add    DWORD PTR [rax],ebx
 100f883:	add    BYTE PTR [rax],dl
 100f885:	jo     0x100f887
 100f887:	add    BYTE PTR [rcx],al
 100f889:	(bad)  
 100f88a:	add    al,BYTE PTR [rax]
 100f88c:	(bad)  
 100f88d:	xor    al,BYTE PTR [rdx]
 100f88f:	push   rax
 100f890:	or     DWORD PTR [rdx],ecx
 100f892:	add    al,BYTE PTR [rax]
 100f894:	or     dl,BYTE PTR [rdx+0x6]
 100f897:	xor    BYTE PTR [rdx+0x100005a],al
 100f89d:	add    BYTE PTR [rax],al
 100f89f:	add    BYTE PTR [rax-0x41ffff32],bl
 100f8a5:	(bad)  
 100f8a6:	add    BYTE PTR [rax],al
 100f8a8:	ror    dh,1
 100f8aa:	add    BYTE PTR [rax],al
 100f8ac:	mov    esi,0x10000ce
 100f8b1:	(bad)  
 100f8b2:	or     al,BYTE PTR [rax]
 100f8b4:	(bad)  
 100f8b5:	xor    al,0x19
 100f8b7:	add    BYTE PTR [rsi],dl
 100f8b9:	rcl    BYTE PTR [rdx],cl
 100f8bb:	lock adc al,ah
 100f8be:	(bad)  
 100f8bf:	ror    BYTE PTR [rax+rax*8],1
 100f8c2:	or     dh,BYTE PTR [rax+0x9]
 100f8c5:	(bad)  
 100f8c6:	or     BYTE PTR [rax+0x1],dl
 100f8c9:	add    al,0x1
 100f8cb:	add    BYTE PTR [rdx+rdx*1],al
 100f8ce:	add    BYTE PTR [rax],al
 100f8d0:	adc    DWORD PTR [rdi],edx
 100f8d2:	add    al,0x0
 100f8d4:	(bad)  
 100f8d5:	xor    al,0x8
 100f8d7:	add    BYTE PTR [rcx],cl
 100f8d9:	push   rdx
 100f8da:	add    dl,BYTE PTR [rax-0x26]
 100f8dd:	pop    rax
 100f8de:	add    BYTE PTR [rax],al
 100f8e0:	rol    BYTE PTR [rax+0x0],1
 100f8e3:	add    bh,bh
 100f8e5:	(bad)  
 100f8e6:	(bad)  
 100f8e7:	call   FWORD PTR [rax+0x7c0000e4]
 100f8ed:	rol    BYTE PTR [rax],cl
 100f8ef:	add    bh,bh
 100f8f1:	(bad)  
 100f8f2:	(bad)  
 100f8f3:	jmp    QWORD PTR [rcx+0xd2]
 100f8f9:	add    BYTE PTR [rax],al
 100f8fb:	add    dh,bl
 100f8fd:	rol    BYTE PTR [rax],cl
 100f8ff:	add    bh,bh
 100f901:	(bad)  
 100f902:	(bad)  
 100f903:	inc    DWORD PTR [rcx]
 100f905:	or     DWORD PTR [rdx],eax
 100f907:	add    BYTE PTR [rcx],cl
 100f909:	xor    al,BYTE PTR [rdx]
 100f90b:	push   rax
 100f90c:	add    DWORD PTR [rcx],ecx
 100f90e:	add    al,BYTE PTR [rax]
 100f910:	or     DWORD PTR [rdx],esi
 100f912:	add    dl,BYTE PTR [rax+0x1]
 100f915:	or     DWORD PTR [rdx],eax
 100f917:	add    BYTE PTR [rcx],cl
 100f919:	xor    al,BYTE PTR [rdx]
 100f91b:	push   rax
 100f91c:	add    DWORD PTR [rip+0x320d0002],ecx        # 0x330df924
 100f922:	(bad)  
 100f923:	push   rax
 100f924:	add    DWORD PTR [rcx],ecx
 100f926:	add    al,BYTE PTR [rax]
 100f928:	or     DWORD PTR [rdx],esi
 100f92a:	add    dl,BYTE PTR [rax+0x1]
 100f92d:	or     DWORD PTR [rdx],eax
 100f92f:	add    BYTE PTR [rcx],cl
 100f931:	xor    al,BYTE PTR [rdx]
 100f933:	push   rax
 100f934:	add    DWORD PTR [rdx],edx
 100f936:	(bad)  
 100f937:	add    BYTE PTR [rdx],dl
 100f939:	je     0x100f942
 100f93b:	add    BYTE PTR [rdx],dl
 100f93d:	xor    al,0x6
 100f93f:	add    BYTE PTR [rdx],dl
 100f941:	xor    cl,BYTE PTR [rbx]
 100f943:	push   rax
 100f944:	add    DWORD PTR [rcx],ecx
 100f946:	add    al,BYTE PTR [rax]
 100f948:	or     DWORD PTR [rdx],esi
 100f94a:	add    dl,BYTE PTR [rax+0x1]
 100f94d:	add    eax,0x50020001
 100f952:	add    BYTE PTR [rax],al
 100f954:	add    DWORD PTR [rip+0x50020001],eax        # 0x5102f95b
 100f95a:	add    BYTE PTR [rax],al
 100f95c:	add    DWORD PTR [rip+0x340d0004],ecx        # 0x350df966
 100f962:	(bad)  
 100f963:	add    BYTE PTR [rip+0x1500632],cl        # 0x250ff9b
 100f969:	adc    al,BYTE PTR [rsi]
 100f96b:	add    BYTE PTR [rdx],dl
 100f96d:	je     0x100f976
 100f96f:	add    BYTE PTR [rdx],dl
 100f971:	xor    al,0x6
 100f973:	add    BYTE PTR [rdx],dl
 100f975:	xor    cl,BYTE PTR [rbx]
 100f977:	push   rax
 100f978:	add    DWORD PTR [rip+0x340d0004],ecx        # 0x350df982
 100f97e:	(bad)  
 100f97f:	add    BYTE PTR [rip+0x1500632],cl        # 0x250ffb7
 100f985:	or     DWORD PTR [rdx],eax
 100f987:	add    BYTE PTR [rcx],cl
 100f989:	xor    al,BYTE PTR [rdx]
 100f98b:	push   rax
 100f98c:	add    DWORD PTR [rcx],ecx
 100f98e:	add    al,BYTE PTR [rax]
 100f990:	or     DWORD PTR [rdx],esi
 100f992:	add    dl,BYTE PTR [rax+0x1]
 100f995:	or     DWORD PTR [rdx],eax
 100f997:	add    BYTE PTR [rcx],cl
 100f999:	xor    al,BYTE PTR [rdx]
 100f99b:	push   rax
 100f99c:	add    DWORD PTR [rip+0x50020001],eax        # 0x5102f9a3
 100f9a2:	add    BYTE PTR [rax],al
 100f9a4:	add    DWORD PTR [rsi],eax
 100f9a6:	add    al,BYTE PTR [rax]
 100f9a8:	(bad)  
 100f9a9:	xor    al,BYTE PTR [rdx]
 100f9ab:	xor    BYTE PTR [rcx],bl
 100f9ad:	nop
 100f9ae:	(bad)  
 100f9af:	add    BYTE PTR [rax-0x7cfdf50c],dl
 100f9b5:	(bad)  
 100f9b6:	adc    eax,DWORD PTR [rdx]
 100f9b8:	ins    BYTE PTR es:[rdi],dx
 100f9b9:	je     0x100f9cd
 100f9bb:	add    bl,BYTE PTR [rsi+0x34]
 100f9be:	adc    DWORD PTR [rdx],eax
 100f9c0:	sbb    al,0x1
 100f9c2:	or     eax,DWORD PTR [rdx]
 100f9c4:	(bad)  
 100f9c5:	loopne 0x100f9cc
 100f9c7:	rol    BYTE PTR [rbx],0x60
 100f9ca:	add    dl,BYTE PTR [rax-0x68]
 100f9cd:	push   rdi
 100f9ce:	add    BYTE PTR [rax],al
 100f9d0:	adc    BYTE PTR [rax],al
 100f9d3:	add    BYTE PTR [rcx],bl
 100f9d5:	sbb    eax,0x10b0005
 100f9da:	rex.WX add BYTE PTR [rax+r14*2],al
 100f9de:	add    esp,DWORD PTR [rax+0x2]
 100f9e1:	xor    BYTE PTR [rax],al
 100f9e3:	add    BYTE PTR [rax+0x40000057],bl
 100f9e9:	add    al,BYTE PTR [rax]
 100f9eb:	add    BYTE PTR [rcx],al
 100f9ed:	adc    eax,0x74150008
 100f9f2:	or     BYTE PTR [rax],al
 100f9f4:	adc    eax,0x15000764
 100f9f9:	xor    al,0x6
 100f9fb:	add    BYTE PTR [rip+0x19e01132],dl        # 0x1ae10b33
 100fa01:	sbb    eax,0x10b0005
 100fa06:	adc    al,BYTE PTR [rax]
 100fa08:	add    al,0x70
 100fa0a:	add    esp,DWORD PTR [rax+0x2]
 100fa0d:	xor    BYTE PTR [rax],al
 100fa0f:	add    BYTE PTR [rax-0x7fffffa9],bl
 100fa15:	add    BYTE PTR [rax],al
 100fa17:	add    BYTE PTR [rcx],ah
 100fa19:	or     BYTE PTR [rdx],al
 100fa1b:	add    BYTE PTR [rax],cl
 100fa1d:	push   rsp
 100fa1e:	sbb    BYTE PTR [rax],al
 100fa20:	and    al,ah
 100fa22:	add    BYTE PTR [rax],al
 100fa24:	pop    rdi
 100fa25:	loopne 0x100fa27
 100fa27:	add    BYTE PTR [rax],al
 100fa29:	cli    
 100fa2a:	add    BYTE PTR [rax],al
 100fa2c:	and    DWORD PTR [rax],eax
 100fa2e:	add    BYTE PTR [rax],al
 100fa30:	and    al,ah
 100fa32:	add    BYTE PTR [rax],al
 100fa34:	pop    rdi
 100fa35:	loopne 0x100fa37
 100fa37:	add    BYTE PTR [rax],al
 100fa39:	cli    
 100fa3a:	add    BYTE PTR [rax],al
 100fa3c:	add    DWORD PTR [rcx+rax*1],eax
 100fa3f:	add    BYTE PTR [rdx+rax*2],al
 100fa42:	add    BYTE PTR [rax],al
 100fa44:	and    DWORD PTR [rip+0x34050002],eax        # 0x3505fa4c
 100fa4a:	add    al,0x0
 100fa4c:	and    cl,0x0
 100fa4f:	add    BYTE PTR [rbp+0x3c0000e1],ah
 100fa55:	cli    
 100fa56:	add    BYTE PTR [rax],al
 100fa58:	and    DWORD PTR [rax],eax
 100fa5a:	add    BYTE PTR [rax],al
 100fa5c:	and    cl,0x0
 100fa5f:	add    BYTE PTR [rbp+0x3c0000e1],ah
 100fa65:	cli    
 100fa66:	add    BYTE PTR [rax],al
 100fa68:	add    DWORD PTR [rdx],ecx
 100fa6a:	add    al,0x0
 100fa6c:	or     dh,BYTE PTR [rsi+rax*1]
 100fa6f:	add    BYTE PTR [rdx],cl
 100fa71:	xor    al,BYTE PTR [rsi]
 100fa73:	jo     0x100fa76
 100fa75:	outs   dx,BYTE PTR ds:[rsi]
 100fa76:	(bad)  
 100fa77:	add    BYTE PTR [rsi+0x34],ch
 100fa7a:	(bad)  
 100fa7b:	add    BYTE PTR [rdx],cl
 100fa7d:	fs (bad) 
 100fa7f:	add    BYTE PTR [rdx],cl
 100fa81:	xor    al,BYTE PTR [rsi]
 100fa83:	jo     0x100fa85
	...
 100fa95:	add    BYTE PTR [rax],al
 100fa97:	add    BYTE PTR [rcx],al
 100fa99:	add    BYTE PTR [rax],al
 100fa9b:	add    BYTE PTR [rax-0x7ffffd2],ah
 100faa1:	sbb    al,BYTE PTR [rcx]
 100faa3:	add    BYTE PTR [rax-0x27fffeef],dh
 100faa9:	cli    
 100faaa:	add    BYTE PTR [rax],al
 100faac:	or     bl,bh
	...
 100fad6:	add    BYTE PTR [rax],al
 100fad8:	call   0x100fbd7
	...
 100fae9:	add    BYTE PTR [rdi+0x65],al
 100faec:	je     0x100fb41
 100faee:	push   rcx
 100faef:	rex.WR push rsi
 100faf1:	gs jb  0x100fb47
 100faf4:	jo     0x100fb5b
 100faf6:	movsxd ebp,DWORD PTR [rcx+0x66]
 100faf9:	imul   esp,DWORD PTR [rbx+0x52],0x74536765
 100fb00:	jb     0x100fb6b
 100fb02:	outs   dx,BYTE PTR ds:[rsi]
 100fb03:	add    BYTE PTR [eax],dh
	...
 100fb16:	add    BYTE PTR [rax],al
 100fb18:	or     ah,bh
	...
 100fb22:	add    BYTE PTR [rax],al
 100fb24:	cmp    al,BYTE PTR [rcx]
 100fb26:	add    DWORD PTR [rax],eax
 100fb28:	add    BYTE PTR [rax],dl
 100fb2a:	add    BYTE PTR [rax],al
 100fb2c:	rex.W cld 
	...
 100fb36:	add    BYTE PTR [rax],al
 100fb38:	fiadd  DWORD PTR [rdx]
 100fb3a:	add    DWORD PTR [rax],eax
 100fb3c:	adc    BYTE PTR [rax],al
 100fb3f:	add    BYTE PTR [rax+0x100],cl
 100fb45:	add    BYTE PTR [rax],al
 100fb47:	add    BYTE PTR [rax],al
 100fb49:	add    BYTE PTR [rax],al
 100fb4b:	add    BYTE PTR [rbx+rax*1],cl
 100fb4e:	add    DWORD PTR [rax],eax
 100fb50:	adc    BYTE PTR [rax+rax*1],0x0
 100fb54:	add    bh,bh
	...
 100fb5e:	add    BYTE PTR [rax],al
 100fb60:	jb     0x100fb66
 100fb62:	add    DWORD PTR [rax],eax
 100fb64:	clc    
 100fb65:	adc    al,BYTE PTR [rax]
 100fb67:	add    BYTE PTR [rax],dh
 100fb69:	cld    
	...
 100fb72:	add    BYTE PTR [rax],al
 100fb74:	(bad)  
 100fb75:	add    al,0x1
 100fb77:	add    BYTE PTR [rax],ch
 100fb79:	adc    BYTE PTR [rax],al
 100fb7b:	add    BYTE PTR [rax+0x100],bh
 100fb81:	add    BYTE PTR [rax],al
 100fb83:	add    BYTE PTR [rax],al
 100fb85:	add    BYTE PTR [rax],al
 100fb87:	add    BYTE PTR [rsi-0x4ffffefb],ah
 100fb8d:	adc    al,0x0
 100fb8f:	add    BYTE PTR [rax+0x0],cl
 100fb92:	add    DWORD PTR [rax],eax
	...
 100fb9c:	mov    al,0x5
 100fb9e:	add    DWORD PTR [rax],eax
 100fba0:	adc    al,0x0
 100fba3:	add    BYTE PTR [rax+0x0],bh
 100fba6:	add    DWORD PTR [rax],eax
	...
 100fbb0:	rol    BYTE PTR [rip+0x14700001],1        # 0x1570fbb7
 100fbb6:	add    BYTE PTR [rax],al
 100fbb8:	loopne 0x100fbb8
	...
 100fbc2:	add    BYTE PTR [rax],al
 100fbc4:	dec    BYTE PTR [rdx]
 100fbc6:	add    DWORD PTR [rax],eax
 100fbc8:	fcom   DWORD PTR [rdx]
 100fbca:	add    BYTE PTR [rax],al
 100fbcc:	movabs al,ds:0x100
 100fbd5:	add    BYTE PTR [rax],al
 100fbd7:	add    BYTE PTR [rbx+rcx*1],dh
 100fbda:	add    DWORD PTR [rax],eax
 100fbdc:	cwde   
 100fbdd:	adc    al,0x0
 100fbdf:	add    BYTE PTR [rax+0x0],ah
 100fbe2:	add    DWORD PTR [rax],eax
	...
 100fbec:	outs   dx,BYTE PTR ds:[rsi]
 100fbed:	or     eax,DWORD PTR [rcx]
 100fbef:	add    BYTE PTR [rax+0x14],bl
	...
 100fc06:	add    BYTE PTR [rax],al
 100fc08:	or     BYTE PTR [rcx],al
 100fc0a:	add    DWORD PTR [rax],eax
 100fc0c:	add    BYTE PTR [rax],al
 100fc0e:	add    BYTE PTR [rax],al
 100fc10:	(bad)  
 100fc11:	add    DWORD PTR [rcx],eax
 100fc13:	add    BYTE PTR [rax],al
 100fc15:	add    BYTE PTR [rax],al
 100fc17:	add    BYTE PTR [rsi],ah
 100fc19:	add    DWORD PTR [rcx],eax
 100fc1b:	add    BYTE PTR [rax],al
 100fc1d:	add    BYTE PTR [rax],al
 100fc1f:	add    ah,bl
 100fc21:	add    eax,0x1
	...
 100fc2e:	add    BYTE PTR [rax],al
 100fc30:	and    BYTE PTR [rax],al
 100fc32:	add    BYTE PTR [rax],al
 100fc34:	add    BYTE PTR [rax],al
 100fc36:	add    BYTE PTR [rax+0x40],al
 100fc3c:	add    BYTE PTR [rax],al
 100fc3e:	add    BYTE PTR [rax+0x0],al
 100fc44:	add    BYTE PTR [rax],al
 100fc46:	add    BYTE PTR [rax],al
 100fc48:	ror    BYTE PTR [rcx],0x1
 100fc4b:	add    BYTE PTR [rax],al
 100fc4d:	add    BYTE PTR [rax],al
 100fc4f:	add    BYTE PTR [rdx+0x109],ch
 100fc55:	add    BYTE PTR [rax],al
 100fc57:	add    BYTE PTR [rsi+0x109],dl
 100fc5d:	add    BYTE PTR [rax],al
 100fc5f:	add    BYTE PTR [rax+0x109],cl
 100fc65:	add    BYTE PTR [rax],al
 100fc67:	add    BYTE PTR [rdx+0x9],bh
 100fc6a:	add    DWORD PTR [rax],eax
 100fc6c:	add    BYTE PTR [rax],al
 100fc6e:	add    BYTE PTR [rax],al
 100fc70:	push   0x9
 100fc72:	add    DWORD PTR [rax],eax
 100fc74:	add    BYTE PTR [rax],al
 100fc76:	add    BYTE PTR [rax],al
 100fc78:	pop    rsp
 100fc79:	or     DWORD PTR [rcx],eax
 100fc7b:	add    BYTE PTR [rax],al
 100fc7d:	add    BYTE PTR [rax],al
 100fc7f:	add    BYTE PTR [rcx+rcx*1+0x1],cl
 100fc83:	add    BYTE PTR [rax],al
 100fc85:	add    BYTE PTR [rax],al
 100fc87:	add    BYTE PTR [rcx+rcx*1],dh
 100fc8a:	add    DWORD PTR [rax],eax
 100fc8c:	add    BYTE PTR [rax],al
 100fc8e:	add    BYTE PTR [rax],al
 100fc90:	(bad)  
 100fc91:	or     DWORD PTR [rcx],eax
 100fc93:	add    BYTE PTR [rax],al
 100fc95:	add    BYTE PTR [rax],al
 100fc97:	add    BYTE PTR [rsi],cl
 100fc99:	or     DWORD PTR [rcx],eax
 100fc9b:	add    BYTE PTR [rax],al
 100fc9d:	add    BYTE PTR [rax],al
 100fc9f:	add    al,bh
 100fca1:	or     BYTE PTR [rcx],al
 100fca3:	add    BYTE PTR [rax],al
 100fca5:	add    BYTE PTR [rax],al
 100fca7:	add    ah,bl
 100fca9:	or     BYTE PTR [rcx],al
 100fcab:	add    BYTE PTR [rax],al
 100fcad:	add    BYTE PTR [rax],al
 100fcaf:	add    al,al
 100fcb1:	or     BYTE PTR [rcx],al
 100fcb3:	add    BYTE PTR [rax],al
 100fcb5:	add    BYTE PTR [rax],al
 100fcb7:	add    BYTE PTR [rdx+0x108],dh
 100fcbd:	add    BYTE PTR [rax],al
 100fcbf:	add    BYTE PTR [rdx+0x108],ah
 100fcc5:	add    BYTE PTR [rax],al
 100fcc7:	add    dl,dl
 100fcc9:	or     DWORD PTR [rcx],eax
 100fccb:	add    BYTE PTR [rax],al
 100fccd:	add    BYTE PTR [rax],al
 100fccf:	add    BYTE PTR [rax+0x108],al
 100fcd5:	add    BYTE PTR [rax],al
 100fcd7:	add    BYTE PTR [rdx+0x8],dh
 100fcda:	add    DWORD PTR [rax],eax
 100fcdc:	add    BYTE PTR [rax],al
 100fcde:	add    BYTE PTR [rax],al
 100fce0:	data16 or BYTE PTR [rcx],al
 100fce3:	add    BYTE PTR [rax],al
 100fce5:	add    BYTE PTR [rax],al
 100fce7:	add    BYTE PTR [rdx+0x8],bl
 100fcea:	add    DWORD PTR [rax],eax
 100fcec:	add    BYTE PTR [rax],al
 100fcee:	add    BYTE PTR [rax],al
 100fcf0:	rex.W or BYTE PTR [rcx],al
 100fcf3:	add    BYTE PTR [rax],al
 100fcf5:	add    BYTE PTR [rax],al
 100fcf7:	add    BYTE PTR [rax+0x10b],dl
 100fcfd:	add    BYTE PTR [rax],al
 100fcff:	add    BYTE PTR [rax+rcx*1],dl
 100fd02:	add    DWORD PTR [rax],eax
 100fd04:	add    BYTE PTR [rax],al
 100fd06:	add    BYTE PTR [rax],al
 100fd08:	add    cl,BYTE PTR [rax]
 100fd0a:	add    DWORD PTR [rax],eax
 100fd0c:	add    BYTE PTR [rax],al
 100fd0e:	add    BYTE PTR [rax],al
 100fd10:	lock (bad) 
 100fd12:	add    DWORD PTR [rax],eax
 100fd14:	add    BYTE PTR [rax],al
 100fd16:	add    BYTE PTR [rax],al
 100fd18:	fiadd  WORD PTR [rdi]
 100fd1a:	add    DWORD PTR [rax],eax
 100fd1c:	add    BYTE PTR [rax],al
 100fd1e:	add    BYTE PTR [rax],al
 100fd20:	(bad)  
 100fd21:	(bad)  
 100fd22:	add    DWORD PTR [rax],eax
 100fd24:	add    BYTE PTR [rax],al
 100fd26:	add    BYTE PTR [rax],al
 100fd28:	mov    edx,0x107
 100fd2d:	add    BYTE PTR [rax],al
 100fd2f:	add    BYTE PTR [rdi+rax*1+0x1],ah
 100fd36:	add    BYTE PTR [rax],al
 100fd38:	mov    es,WORD PTR [rdi]
 100fd3a:	add    DWORD PTR [rax],eax
 100fd3c:	add    BYTE PTR [rax],al
 100fd3e:	add    BYTE PTR [rax],al
 100fd40:	(bad)  
 100fd41:	(bad)  
 100fd42:	add    DWORD PTR [rax],eax
 100fd44:	add    BYTE PTR [rax],al
 100fd46:	add    BYTE PTR [rax],al
 100fd48:	ins    BYTE PTR es:[rdi],dx
 100fd49:	(bad)  
 100fd4a:	add    DWORD PTR [rax],eax
 100fd4c:	add    BYTE PTR [rax],al
 100fd4e:	add    BYTE PTR [rax],al
 100fd50:	out    0x9,al
 100fd52:	add    DWORD PTR [rax],eax
 100fd54:	add    BYTE PTR [rax],al
 100fd56:	add    BYTE PTR [rax],al
 100fd58:	cli    
 100fd59:	or     DWORD PTR [rcx],eax
 100fd5b:	add    BYTE PTR [rax],al
 100fd5d:	add    BYTE PTR [rax],al
 100fd5f:	add    BYTE PTR [rsi],cl
 100fd61:	or     al,BYTE PTR [rcx]
 100fd63:	add    BYTE PTR [rax],al
 100fd65:	add    BYTE PTR [rax],al
 100fd67:	add    BYTE PTR [rbx+rcx*1+0x1],al
 100fd6e:	add    BYTE PTR [rax],al
 100fd70:	js     0x100fd7d
 100fd72:	add    DWORD PTR [rax],eax
 100fd74:	add    BYTE PTR [rax],al
 100fd76:	add    BYTE PTR [rax],al
 100fd78:	xchg   edx,eax
 100fd79:	or     BYTE PTR [rcx],al
 100fd7b:	add    BYTE PTR [rax],al
 100fd7d:	add    BYTE PTR [rax],al
 100fd7f:	add    BYTE PTR [rax+0x7],ah
 100fd82:	add    DWORD PTR [rax],eax
 100fd84:	add    BYTE PTR [rax],al
 100fd86:	add    BYTE PTR [rax],al
 100fd88:	push   rdx
 100fd89:	(bad)  
 100fd8a:	add    DWORD PTR [rax],eax
 100fd8c:	add    BYTE PTR [rax],al
 100fd8e:	add    BYTE PTR [rax],al
 100fd90:	ss (bad) 
 100fd92:	add    DWORD PTR [rax],eax
 100fd94:	add    BYTE PTR [rax],al
 100fd96:	add    BYTE PTR [rax],al
 100fd98:	es (bad) 
 100fd9a:	add    DWORD PTR [rax],eax
 100fd9c:	add    BYTE PTR [rax],al
 100fd9e:	add    BYTE PTR [rax],al
 100fda0:	adc    al,0x7
 100fda2:	add    DWORD PTR [rax],eax
 100fda4:	add    BYTE PTR [rax],al
 100fda6:	add    BYTE PTR [rax],al
 100fda8:	add    al,0x7
 100fdaa:	add    DWORD PTR [rax],eax
 100fdac:	add    BYTE PTR [rax],al
 100fdae:	add    BYTE PTR [rax],al
 100fdb0:	clc    
 100fdb1:	(bad)  
 100fdb2:	add    DWORD PTR [rax],eax
 100fdb4:	add    BYTE PTR [rax],al
 100fdb6:	add    BYTE PTR [rax],al
 100fdb8:	call   0x100fec3
 100fdbd:	add    BYTE PTR [rax],al
 100fdbf:	add    dh,cl
 100fdc1:	(bad)  
 100fdc2:	add    DWORD PTR [rax],eax
 100fdc4:	add    BYTE PTR [rax],al
 100fdc6:	add    BYTE PTR [rax],al
 100fdc8:	mov    eax,0x106
 100fdcd:	add    BYTE PTR [rax],al
 100fdcf:	add    BYTE PTR [rax+0x106],ch
 100fdd5:	add    BYTE PTR [rax],al
 100fdd7:	add    BYTE PTR [rsi+0x106],cl
 100fddd:	add    BYTE PTR [rax],al
 100fddf:	add    BYTE PTR [rsi+0x6],bh
 100fde2:	add    DWORD PTR [rax],eax
 100fde4:	add    BYTE PTR [rax],al
 100fde6:	add    BYTE PTR [rax],al
 100fde8:	push   0x6
 100fdea:	add    DWORD PTR [rax],eax
 100fdec:	add    BYTE PTR [rax],al
 100fdee:	add    BYTE PTR [rax],al
 100fdf0:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 100fdf1:	or     eax,DWORD PTR [rcx]
 100fdf3:	add    BYTE PTR [rax],al
 100fdf5:	add    BYTE PTR [rax],al
 100fdf7:	add    ah,cl
 100fdf9:	add    al,BYTE PTR [rcx]
 100fdfb:	add    BYTE PTR [rax],al
 100fdfd:	add    BYTE PTR [rax],al
 100fdff:	add    BYTE PTR [rdx+rax*1+0x1],bh
 100fe06:	add    BYTE PTR [rax],al
 100fe08:	mov    al,0x2
 100fe0a:	add    DWORD PTR [rax],eax
 100fe0c:	add    BYTE PTR [rax],al
 100fe0e:	add    BYTE PTR [rax],al
 100fe10:	movabs ds:0x9a00000000000102,al
 100fe19:	add    al,BYTE PTR [rcx]
 100fe1b:	add    BYTE PTR [rax],al
 100fe1d:	add    BYTE PTR [rax],al
 100fe1f:	add    BYTE PTR [rsi+0x102],cl
 100fe25:	add    BYTE PTR [rax],al
 100fe27:	add    BYTE PTR [rsi+0x2],ah
 100fe2a:	add    DWORD PTR [rax],eax
 100fe2c:	add    BYTE PTR [rax],al
 100fe2e:	add    BYTE PTR [rax],al
 100fe30:	rex.WRX add r8b,BYTE PTR [rcx]
 100fe33:	add    BYTE PTR [rax],al
 100fe35:	add    BYTE PTR [rax],al
 100fe37:	add    BYTE PTR [rsi],dh
 100fe39:	add    al,BYTE PTR [rcx]
 100fe3b:	add    BYTE PTR [rax],al
 100fe3d:	add    BYTE PTR [rax],al
 100fe3f:	add    BYTE PTR [rdx],bl
 100fe41:	add    al,BYTE PTR [rcx]
 100fe43:	add    BYTE PTR [rax],al
 100fe45:	add    BYTE PTR [rax],al
 100fe47:	add    BYTE PTR [rdx],cl
 100fe49:	add    al,BYTE PTR [rcx]
 100fe4b:	add    BYTE PTR [rax],al
 100fe4d:	add    BYTE PTR [rax],al
 100fe4f:	add    ah,dh
 100fe51:	add    DWORD PTR [rcx],eax
 100fe53:	add    BYTE PTR [rax],al
 100fe55:	add    BYTE PTR [rax],al
 100fe57:	add    dh,dl
 100fe59:	add    DWORD PTR [rcx],eax
 100fe5b:	add    BYTE PTR [rax],al
 100fe5d:	add    BYTE PTR [rax],al
 100fe5f:	add    dl,al
 100fe61:	add    DWORD PTR [rcx],eax
 100fe63:	add    BYTE PTR [rax],al
 100fe65:	add    BYTE PTR [rax],al
 100fe67:	add    BYTE PTR [rsi+0x101],ch
 100fe6d:	add    BYTE PTR [rax],al
 100fe6f:	add    BYTE PTR [rax+0x101],bl
 100fe75:	add    BYTE PTR [rax],al
 100fe77:	add    BYTE PTR [rcx+rax*1+0x1],al
 100fe7e:	add    BYTE PTR [rax],al
 100fe80:	ins    BYTE PTR es:[rdi],dx
 100fe81:	add    DWORD PTR [rcx],eax
 100fe83:	add    BYTE PTR [rax],al
 100fe85:	add    BYTE PTR [rax],al
 100fe87:	add    BYTE PTR [rdx+0x1],bl
 100fe8a:	add    DWORD PTR [rax],eax
 100fe8c:	add    BYTE PTR [rax],al
 100fe8e:	add    BYTE PTR [rax],al
 100fe90:	add    QWORD PTR [rcx],rax
 100fe93:	add    BYTE PTR [rax],al
 100fe95:	add    BYTE PTR [rax],al
 100fe97:	add    BYTE PTR [rsi],ch
 100fe99:	or     BYTE PTR [rcx],al
 100fe9b:	add    BYTE PTR [rax],al
 100fe9d:	add    BYTE PTR [rax],al
 100fe9f:	add    dl,ch
 100fea1:	add    eax,0x1
 100fea6:	add    BYTE PTR [rax],al
 100fea8:	cld    
 100fea9:	add    eax,0x1
 100feae:	add    BYTE PTR [rax],al
 100feb0:	or     al,0x6
 100feb2:	add    DWORD PTR [rax],eax
 100feb4:	add    BYTE PTR [rax],al
 100feb6:	add    BYTE PTR [rax],al
 100feb8:	sub    BYTE PTR [rsi],al
 100feba:	add    DWORD PTR [rax],eax
 100febc:	add    BYTE PTR [rax],al
 100febe:	add    BYTE PTR [rax],al
 100fec0:	cmp    al,0x6
 100fec2:	add    DWORD PTR [rax],eax
 100fec4:	add    BYTE PTR [rax],al
 100fec6:	add    BYTE PTR [rax],al
 100fec8:	push   rax
 100fec9:	(bad)  
 100feca:	add    DWORD PTR [rax],eax
 100fecc:	add    BYTE PTR [rax],al
 100fece:	add    BYTE PTR [rax],al
 100fed0:	mov    dh,0xb
 100fed2:	add    DWORD PTR [rax],eax
	...
 100fee0:	ror    BYTE PTR [rdx],cl
 100fee2:	add    DWORD PTR [rax],eax
 100fee4:	add    BYTE PTR [rax],al
 100fee6:	add    BYTE PTR [rax],al
 100fee8:	mov    eax,0x10a
 100feed:	add    BYTE PTR [rax],al
 100feef:	add    BYTE PTR [rdx+rcx*1+0x1],bl
	...
 100fefe:	add    BYTE PTR [rax],al
 100ff00:	sbb    BYTE PTR [rbx],al
 100ff02:	add    DWORD PTR [rax],eax
 100ff04:	add    BYTE PTR [rax],al
 100ff06:	add    BYTE PTR [rax],al
 100ff08:	xor    BYTE PTR [rbx],al
 100ff0a:	add    DWORD PTR [rax],eax
 100ff0c:	add    BYTE PTR [rax],al
 100ff0e:	add    BYTE PTR [rax],al
 100ff10:	rex.X add eax,DWORD PTR [rcx]
 100ff13:	add    BYTE PTR [rax],al
 100ff15:	add    BYTE PTR [rax],al
 100ff17:	add    BYTE PTR [rbx+rax*1+0x1],cl
 100ff1b:	add    BYTE PTR [rax],al
 100ff1d:	add    BYTE PTR [rax],al
 100ff1f:	add    BYTE PTR [rsi],bl
 100ff21:	or     al,BYTE PTR [rcx]
 100ff23:	add    BYTE PTR [rax],al
 100ff25:	add    BYTE PTR [rax],al
 100ff27:	add    BYTE PTR [rdx],ch
 100ff29:	or     al,BYTE PTR [rcx]
 100ff2b:	add    BYTE PTR [rax],al
 100ff2d:	add    BYTE PTR [rax],al
 100ff2f:	add    BYTE PTR [rdx+rcx*1],dh
 100ff32:	add    DWORD PTR [rax],eax
 100ff34:	add    BYTE PTR [rax],al
 100ff36:	add    BYTE PTR [rax],al
 100ff38:	rex.X or al,BYTE PTR [rcx]
 100ff3b:	add    BYTE PTR [rax],al
 100ff3d:	add    BYTE PTR [rax],al
 100ff3f:	add    BYTE PTR [rdx+rcx*1+0x1],cl
 100ff43:	add    BYTE PTR [rax],al
 100ff45:	add    BYTE PTR [rax],al
 100ff47:	add    BYTE PTR [rdx+rcx*1+0x1],bl
 100ff4b:	add    BYTE PTR [rax],al
 100ff4d:	add    BYTE PTR [rax],al
 100ff4f:	add    BYTE PTR [rdx+rcx*1+0x1],ch
 100ff53:	add    BYTE PTR [rax],al
 100ff55:	add    BYTE PTR [rax],al
 100ff57:	add    BYTE PTR [rdx+rcx*1+0x1],bh
 100ff5b:	add    BYTE PTR [rax],al
 100ff5d:	add    BYTE PTR [rax],al
 100ff5f:	add    BYTE PTR [rdx+rcx*1+0x1],cl
 100ff66:	add    BYTE PTR [rax],al
 100ff68:	push   rsi
 100ff69:	add    eax,DWORD PTR [rcx]
 100ff6b:	add    BYTE PTR [rax],al
 100ff6d:	add    BYTE PTR [rax],al
 100ff6f:	add    BYTE PTR [rdx+0x3],ah
 100ff72:	add    DWORD PTR [rax],eax
 100ff74:	add    BYTE PTR [rax],al
 100ff76:	add    BYTE PTR [rax],al
 100ff78:	jo     0x100ff7d
 100ff7a:	add    DWORD PTR [rax],eax
 100ff7c:	add    BYTE PTR [rax],al
 100ff7e:	add    BYTE PTR [rax],al
 100ff80:	xchg   BYTE PTR [rbx],al
 100ff82:	add    DWORD PTR [rax],eax
 100ff84:	add    BYTE PTR [rax],al
 100ff86:	add    BYTE PTR [rax],al
 100ff88:	nop
 100ff89:	add    eax,DWORD PTR [rcx]
 100ff8b:	add    BYTE PTR [rax],al
 100ff8d:	add    BYTE PTR [rax],al
 100ff8f:	add    BYTE PTR [rsi+0x103],bl
 100ff95:	add    BYTE PTR [rax],al
 100ff97:	add    BYTE PTR [rsi+0x103],ch
 100ff9d:	add    BYTE PTR [rax],al
 100ff9f:	add    dh,al
 100ffa1:	add    eax,DWORD PTR [rcx]
 100ffa3:	add    BYTE PTR [rax],al
 100ffa5:	add    BYTE PTR [rax],al
 100ffa7:	add    ah,dl
 100ffa9:	add    eax,DWORD PTR [rcx]
 100ffab:	add    BYTE PTR [rax],al
 100ffad:	add    BYTE PTR [rax],al
 100ffaf:	add    ah,bl
 100ffb1:	add    eax,DWORD PTR [rcx]
 100ffb3:	add    BYTE PTR [rax],al
 100ffb5:	add    BYTE PTR [rax],al
 100ffb7:	add    dl,ch
 100ffb9:	add    eax,DWORD PTR [rcx]
 100ffbb:	add    BYTE PTR [rax],al
 100ffbd:	add    BYTE PTR [rax],al
 100ffbf:	add    ah,dh
 100ffc1:	add    eax,DWORD PTR [rcx]
 100ffc3:	add    BYTE PTR [rax],al
 100ffc5:	add    BYTE PTR [rax],al
 100ffc7:	add    ah,bh
 100ffc9:	add    eax,DWORD PTR [rcx]
 100ffcb:	add    BYTE PTR [rax],al
 100ffcd:	add    BYTE PTR [rax],al
 100ffcf:	add    BYTE PTR [rsi],al
 100ffd1:	add    al,0x1
 100ffd3:	add    BYTE PTR [rax],al
 100ffd5:	add    BYTE PTR [rax],al
 100ffd7:	add    BYTE PTR [rdx],dl
 100ffd9:	add    al,0x1
 100ffdb:	add    BYTE PTR [rax],al
 100ffdd:	add    BYTE PTR [rax],al
 100ffdf:	add    BYTE PTR [rax],ah
 100ffe1:	add    al,0x1
 100ffe3:	add    BYTE PTR [rax],al
 100ffe5:	add    BYTE PTR [rax],al
 100ffe7:	add    BYTE PTR [rsi],dh
 100ffe9:	add    al,0x1
 100ffeb:	add    BYTE PTR [rax],al
 100ffed:	add    BYTE PTR [rax],al
 100ffef:	add    BYTE PTR [rdx+0x4],cl
 100fff2:	add    DWORD PTR [rax],eax
 100fff4:	add    BYTE PTR [rax],al
 100fff6:	add    BYTE PTR [rax],al
 100fff8:	push   rsi
 100fff9:	add    al,0x1
 100fffb:	add    BYTE PTR [rax],al
 100fffd:	add    BYTE PTR [rax],al
 100ffff:	add    BYTE PTR [rax+0x4],ah
 1010002:	add    DWORD PTR [rax],eax
 1010004:	add    BYTE PTR [rax],al
 1010006:	add    BYTE PTR [rax],al
 1010008:	add    BYTE PTR [rcx+rax*1],0x0
 101000c:	add    BYTE PTR [rax],al
 101000e:	add    BYTE PTR [rax],al
 1010010:	xchg   esp,eax
 1010011:	add    al,0x1
 1010013:	add    BYTE PTR [rax],al
 1010015:	add    BYTE PTR [rax],al
 1010017:	add    BYTE PTR [rdx+0x104],ch
 101001d:	add    BYTE PTR [rax],al
 101001f:	add    BYTE PTR [rsp+rax*1+0x1],dh
 1010026:	add    BYTE PTR [rax],al
 1010028:	ret    0x104
 101002b:	add    BYTE PTR [rax],al
 101002d:	add    BYTE PTR [rax],al
 101002f:	add    dl,cl
 1010031:	add    al,0x1
 1010033:	add    BYTE PTR [rax],al
 1010035:	add    BYTE PTR [rax],al
 1010037:	add    BYTE PTR [rax],ch
 1010039:	add    eax,DWORD PTR [rcx]
	...
 1010047:	add    BYTE PTR [rax+rax*1],al
 101004a:	add    BYTE PTR [rax],al
 101004c:	add    BYTE PTR [rax],al
 101004e:	add    BYTE PTR [rax+0x6],al
 1010054:	add    BYTE PTR [rax],al
 1010056:	add    BYTE PTR [rax+0x0],al
 101005c:	add    BYTE PTR [rax],al
 101005e:	add    BYTE PTR [rax],al
 1010060:	push   rsi
 1010061:	or     eax,DWORD PTR [rcx]
 1010063:	add    BYTE PTR [rax],al
 1010065:	add    BYTE PTR [rax],al
 1010067:	add    BYTE PTR [rax+0xb],al
 101006a:	add    DWORD PTR [rax],eax
	...
 1010078:	mov    esi,0x105
	...
 1010085:	add    BYTE PTR [rax],al
 1010087:	add    al,ch
 1010089:	add    al,BYTE PTR [rcx]
 101008b:	add    BYTE PTR [rax],al
 101008d:	add    BYTE PTR [rax],al
 101008f:	add    dh,bh
 1010091:	add    al,BYTE PTR [rcx]
	...
 101009f:	add    BYTE PTR [rbx+rcx*1],cl
 10100a2:	add    DWORD PTR [rax],eax
 10100a4:	add    BYTE PTR [rax],al
 10100a6:	add    BYTE PTR [rax],al
 10100a8:	and    cl,BYTE PTR [rbx]
 10100aa:	add    DWORD PTR [rax],eax
	...
 10100b8:	loopne 0x10100be
 10100ba:	add    DWORD PTR [rax],eax
 10100bc:	add    BYTE PTR [rax],al
 10100be:	add    BYTE PTR [rax],al
 10100c0:	repnz add al,0x1
 10100c3:	add    BYTE PTR [rax],al
 10100c5:	add    BYTE PTR [rax],al
 10100c7:	add    BYTE PTR [rdx],cl
 10100c9:	add    eax,0x1
 10100ce:	add    BYTE PTR [rax],al
 10100d0:	and    BYTE PTR [rip+0x1],al        # 0x10100d7
 10100d6:	add    BYTE PTR [rax],al
 10100d8:	cmp    BYTE PTR [rip+0x1],al        # 0x10100df
 10100de:	add    BYTE PTR [rax],al
 10100e0:	push   rdx
 10100e1:	add    eax,0x1
 10100e6:	add    BYTE PTR [rax],al
 10100e8:	push   0x105
 10100ed:	add    BYTE PTR [rax],al
 10100ef:	add    BYTE PTR [rbp+rax*1+0x1],dl
 10100f6:	add    BYTE PTR [rax],al
 10100f8:	add    BYTE PTR [rip+0x1],0x0        # 0x1010100
	...
 1010107:	add    BYTE PTR [rax],dh
 1010109:	add    dl,BYTE PTR [rdx+0x65]
 101010c:	rex.XB ins BYTE PTR es:[edi],dx
 101010f:	outs   dx,DWORD PTR ds:[rsi]
 1010110:	jae    0x1010177
 1010112:	rex.WXB
 1010113:	gs jns 0x1010116
 1010116:	(bad)  
 1010117:	add    dl,BYTE PTR [rdx+0x65]
 101011a:	addr32 rex.WRXB jo 0x1010183
 101011e:	outs   dx,BYTE PTR ds:[rsi]
 101011f:	rex.WXB
 1010120:	gs jns 0x1010168
 1010123:	js     0x101017c
 1010125:	add    BYTE PTR [rsi+0x2],ch
 1010128:	push   rdx
 1010129:	gs addr32 push rcx
 101012c:	jne    0x1010193
 101012e:	jb     0x10101a9
 1010130:	push   rsi
 1010131:	(bad)  
 1010132:	ins    BYTE PTR es:[rdi],dx
 1010133:	jne    0x101019a
 1010135:	rex.RB js 0x101018f
 1010138:	add    BYTE PTR [rax],al
 101013a:	rex.B
 101013b:	rex.R push rsi
 101013d:	push   r8
 101013f:	xor    rsi,QWORD PTR [r10]
 1010142:	cs fs ins BYTE PTR es:[rdi],dx
 1010145:	ins    BYTE PTR es:[rdi],dx
 1010146:	add    BYTE PTR [rax],al
 1010148:	rex.WR add r8b,BYTE PTR [rdi+0x65]
 101014c:	je     0x101019e
 101014e:	jb     0x10101bf
 1010150:	movsxd eax,DWORD PTR [rcx+0x64]
 1010153:	fs jb  0x10101bb
 1010156:	jae    0x10101cb
 1010158:	add    BYTE PTR [rax],al
 101015a:	mov    ah,0x3
 101015c:	push   rdx
 101015d:	(bad)  
 101015e:	imul   esi,DWORD PTR [rbx+0x65],0x65637845
 1010165:	jo     0x10101db
 1010167:	imul   ebp,DWORD PTR [rdi+0x6e],0xd20000
 101016e:	rex.R
 101016f:	gs ins BYTE PTR es:[rdi],dx
 1010171:	gs je  0x10101d9
 1010174:	rex.XB jb 0x10101e0
 1010177:	je     0x10101e2
 1010179:	movsxd esp,DWORD PTR [rcx+0x6c]
 101017c:	push   rbx
 101017d:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 1010182:	outs   dx,BYTE PTR ds:[rsi]
 1010183:	add    BYTE PTR [rsi],bl
 1010185:	add    al,BYTE PTR [rdi+0x65]
 1010188:	je     0x10101d7
 101018a:	outs   dx,DWORD PTR ds:[rsi]
 101018b:	fs jne 0x10101fa
 101018e:	gs rex.W (bad) 
 1010191:	outs   dx,BYTE PTR ds:[rsi]
 1010192:	fs ins BYTE PTR es:[rdi],dx
 1010194:	gs push rdi
 1010196:	add    BYTE PTR [rax],al
 1010198:	fild   DWORD PTR [rdx]
 101019a:	rex.W
 101019b:	gs (bad) 
 101019d:	jo     0x10101f2
 101019f:	gs je  0x10101eb
 10101a2:	outs   dx,BYTE PTR ds:[rsi]
 10101a3:	outs   dx,WORD PTR ds:[rsi]
 10101a5:	jb     0x1010214
 10101a7:	(bad)  
 10101a8:	je     0x1010213
 10101aa:	outs   dx,DWORD PTR ds:[rsi]
 10101ab:	outs   dx,BYTE PTR ds:[rsi]
 10101ac:	add    BYTE PTR [rax],al
 10101ae:	mov    BYTE PTR [rcx],0x47
 10101b1:	gs je  0x10101f7
 10101b4:	jne    0x1010228
 10101b6:	jb     0x101021d
 10101b8:	outs   dx,BYTE PTR ds:[rsi]
 10101b9:	je     0x101020b
 10101bb:	jb     0x101022c
 10101bd:	movsxd esp,DWORD PTR [rbp+0x73]
 10101c0:	jae    0x10101c2
 10101c2:	(bad)  
 10101c3:	add    al,0x54
 10101c5:	gs jb  0x1010235
 10101c8:	imul   ebp,DWORD PTR [rsi+0x61],0x72506574
 10101cf:	outs   dx,DWORD PTR ds:[rsi]
 10101d0:	movsxd esp,DWORD PTR [rbp+0x73]
 10101d3:	jae    0x10101d5
 10101d5:	add    BYTE PTR [rbx+0x74655304],dh
 10101db:	push   rbp
 10101dc:	outs   dx,BYTE PTR ds:[rsi]
 10101dd:	push   0x6c646e61
 10101e2:	gs fs rex.RB js 0x101024a
 10101e7:	gs jo  0x101025e
 10101ea:	imul   ebp,DWORD PTR [rdi+0x6e],0x746c6946
 10101f1:	gs jb  0x10101f4
 10101f4:	retf   
 10101f5:	add    DWORD PTR [rdi+0x65],eax
 10101f8:	je     0x101023d
 10101fa:	jne    0x101026e
 10101fc:	jb     0x1010263
 10101fe:	outs   dx,BYTE PTR ds:[rsi]
 10101ff:	je     0x1010255
 1010201:	push   0x64616572
 1010206:	rex.WB
 1010207:	add    BYTE PTR fs:[rax],al
 101020a:	or     BYTE PTR [rdx],al
 101020c:	rex.RXB
 101020d:	gs je  0x101025c
 1010210:	(bad)  
 1010211:	jae    0x1010287
 1010213:	rex.RB jb 0x1010288
 1010216:	outs   dx,DWORD PTR ds:[rsi]
 1010217:	jb     0x1010219
 1010219:	add    dl,ch
 101021b:	add    cl,BYTE PTR [rcx+0x6e]
 101021e:	imul   esi,DWORD PTR [rcx+rbp*2+0x61],0x657a696c
 1010226:	rex.XB jb 0x1010292
 1010229:	je     0x1010294
 101022b:	movsxd esp,DWORD PTR [rcx+0x6c]
 101022e:	push   rbx
 101022f:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 1010234:	outs   dx,BYTE PTR ds:[rsi]
 1010235:	add    dl,dh
 1010237:	add    BYTE PTR [rbp+0x6e],al
 101023a:	je     0x10102a1
 101023c:	jb     0x1010281
 101023e:	jb     0x10102a9
 1010240:	je     0x10102ab
 1010242:	movsxd esp,DWORD PTR [rcx+0x6c]
 1010245:	push   rbx
 1010246:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 101024b:	outs   dx,BYTE PTR ds:[rsi]
 101024c:	add    BYTE PTR [rax],al
 101024e:	cmp    eax,DWORD PTR [rbx]
 1010250:	rex.WR
 1010251:	gs (bad) 
 1010253:	jbe    0x10102ba
 1010255:	rex.XB jb 0x10102c1
 1010258:	je     0x10102c3
 101025a:	movsxd esp,DWORD PTR [rcx+0x6c]
 101025d:	push   rbx
 101025e:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 1010263:	outs   dx,BYTE PTR ds:[rsi]
 1010264:	add    BYTE PTR [rax],al
 1010266:	jmp    0x101026a
 1010268:	rex.WB outs dx,BYTE PTR ds:[rsi]
 101026a:	imul   esi,DWORD PTR [rcx+rbp*2+0x61],0x657a696c
 1010272:	rex.XB jb 0x10102de
 1010275:	je     0x10102e0
 1010277:	movsxd esp,DWORD PTR [rcx+0x6c]
 101027a:	push   rbx
 101027b:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 1010280:	outs   dx,BYTE PTR ds:[rsi]
 1010281:	rex.B outs dx,BYTE PTR ds:[rsi]
 1010283:	fs push rbx
 1010285:	jo     0x10102f0
 1010287:	outs   dx,BYTE PTR ds:[rsi]
 1010288:	rex.XB outs dx,DWORD PTR ds:[rsi]
 101028a:	jne    0x10102fa
 101028c:	je     0x101028e
 101028e:	addr32 add al,0x53
 1010291:	gs je  0x10102d9
 1010294:	jbe    0x10102fb
 1010296:	outs   dx,BYTE PTR ds:[rsi]
 1010297:	je     0x1010299
 1010299:	add    al,al
 101029b:	add    al,0x53
 101029d:	ins    BYTE PTR es:[rdi],dx
 101029e:	gs gs jo 0x10102a2
 10102a2:	push   rdx
 10102a3:	add    BYTE PTR [rbx+0x6c],al
 10102a6:	outs   dx,DWORD PTR ds:[rsi]
 10102a7:	jae    0x101030e
 10102a9:	rex.W (bad) 
 10102ab:	outs   dx,BYTE PTR ds:[rsi]
 10102ac:	fs ins BYTE PTR es:[rdi],dx
 10102ae:	add    BYTE PTR gs:[rax+0x5],ah
 10102b2:	ins    BYTE PTR es:[rdi],dx
 10102b3:	jae    0x1010329
 10102b5:	jb     0x1010323
 10102b7:	outs   dx,BYTE PTR gs:[rsi]
 10102b9:	add    BYTE PTR [r8],al
 10102bc:	add    ecx,DWORD PTR [r15+rbp*2+0x61]
 10102c1:	imul   r12,QWORD PTR fs:[rdx+0x72],0x57797261
 10102ca:	add    BYTE PTR [rax],al
 10102cc:	pop    QWORD PTR [rax]
 10102ce:	rex.XB jb 0x1010336
 10102d1:	(bad)  
 10102d2:	je     0x1010339
 10102d4:	imul   r13d,DWORD PTR [rbp+r12*2+0x57],0x52454b00
 10102dd:	rex.WRX
 10102de:	rex.RB
 10102df:	xor    r14,QWORD PTR [rdx]
 10102e2:	cs fs ins BYTE PTR es:[rdi],dx
 10102e5:	ins    BYTE PTR es:[rdi],dx
 10102e6:	add    BYTE PTR [rax],al
 10102e8:	add    dl,BYTE PTR [rax+0x6f]
 10102ec:	jae    0x1010362
 10102ee:	push   rsp
 10102ef:	push   0x64616572
 10102f4:	rex.WRB
 10102f5:	gs jae 0x101036b
 10102f8:	(bad)  
 10102f9:	addr32 gs push rdi
 10102fc:	add    BYTE PTR [rax],al
 10102fe:	sbb    eax,DWORD PTR [rdx]
 1010300:	rex.WRB
 1010301:	gs jae 0x1010377
 1010304:	(bad)  
 1010305:	rex.X outs dx,DWORD PTR gs:[esi]
 1010309:	js     0x1010362
 101030b:	add    BYTE PTR [rbp+0x53],dl
 101030e:	rex.RB push r10
 1010310:	xor    esi,DWORD PTR [rdx]
 1010312:	cs fs ins BYTE PTR es:[rdi],dx
 1010315:	ins    BYTE PTR es:[rdi],dx
 1010316:	add    BYTE PTR [rax],al
 1010318:	add    BYTE PTR gs:[rdi],bh
 101031b:	(bad)  
 101031c:	xor    eax,DWORD PTR [rax+0x59]
 101031f:	pop    r8
 1010321:	push   rax
 1010322:	rex.RB
 1010323:	pop    r8
 1010325:	rex pop rdx
 1010327:	add    BYTE PTR [rbx+0x5],ah
 101032a:	data16 jb 0x1010392
 101032d:	add    BYTE PTR gs:[rax],al
 1010330:	movsxd eax,DWORD PTR [rax]
 1010332:	(bad)  
 1010333:	(bad)  
 1010334:	xor    al,BYTE PTR [rax+0x59]
 1010337:	push   r8
 1010339:	rex.RB
 101033a:	pop    r8
 101033c:	pop    rdi
 101033d:	rex.WXB
 101033e:	rex pop rdx
 1010340:	add    BYTE PTR [rax],al
 1010342:	jrcxz  0x1010349
 1010344:	jae    0x10103ba
 1010346:	jb     0x10103b6
 1010348:	movsxd ebp,DWORD PTR [rbp+0x70]
 101034b:	add    dl,ch
 101034d:	add    eax,0x73727473
 1010352:	je     0x10103c6
 1010354:	add    BYTE PTR [rax],al
 1010356:	(bad)  
 1010357:	(bad)  
 1010358:	ja     0x10103bd
 101035a:	jae    0x10103bf
 101035c:	jo     0x10103d7
 101035e:	pop    rdi
 101035f:	jae    0x1010361
 1010361:	add    cl,dh
 1010363:	add    eax,0x72707773
 1010368:	imul   ebp,DWORD PTR [rsi+0x74],0x735f66
 101036f:	add    BYTE PTR [rax],ch
 1010371:	add    DWORD PTR [rdi+0x5f],ebx
 1010374:	rex.XB js 0x10103ef
 1010377:	rex.RX jb 0x10103db
 101037a:	ins    DWORD PTR es:[rdi],dx
 101037b:	gs rex.W (bad) 
 101037e:	outs   dx,BYTE PTR ds:[rsi]
 101037f:	fs ins BYTE PTR es:[rdi],dx
 1010381:	gs jb  0x10103b7
 1010384:	add    BYTE PTR [rax],al
 1010386:	lods   eax,DWORD PTR ds:[rsi]
 1010387:	add    eax,0x736d656d
 101038c:	gs je  0x101038f
 101038f:	add    BYTE PTR [rsi+0x6d615f01],bl
 1010395:	jae    0x10103fe
 1010397:	pop    rdi
 1010398:	gs js  0x1010404
 101039b:	je     0x101039d
 101039d:	add    BYTE PTR [rdx+0x1],dl
 10103a0:	pop    rdi
 10103a1:	pop    rdi
 10103a2:	addr32 gs je 0x1010413
 10103a6:	(bad)  
 10103a7:	imul   ebp,DWORD PTR [rsi+0x61],0x736772
 10103ae:	(bad)  
 10103af:	add    DWORD PTR [rdi+0x5f],ebx
 10103b2:	rex.XB pop r15
 10103b4:	jae    0x1010426
 10103b6:	movsxd ebp,DWORD PTR gs:[rcx+0x66]
 10103ba:	imul   esp,DWORD PTR [rbx+0x5f],0x646e6168
 10103c1:	ins    BYTE PTR es:[rdi],dx
 10103c2:	gs jb  0x10103c5
 10103c5:	add    BYTE PTR [rdx],bl
 10103c7:	add    DWORD PTR [rdi+0x58],ebx
 10103ca:	movsxd esi,DWORD PTR [rax+0x74]
 10103cd:	imul   r13d,DWORD PTR [rsp+r14*2+0x65],0x2000072
 10103d6:	pop    rdi
 10103d7:	gs js  0x1010443
 10103da:	je     0x10103dc
 10103dc:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 10103dd:	add    bl,BYTE PTR [rdi+0x69]
 10103e0:	jae    0x101044f
 10103e2:	(bad)
 10103e7:	add    BYTE PTR fs:[rax],al
 10103ea:	mov    ch,0x1
 10103ec:	pop    rdi
 10103ed:	movsxd esp,DWORD PTR [rbp+0x78]
 10103f0:	imul   esi,DWORD PTR [rax+rax*1+0x0],0x78650548
 10103f8:	imul   esi,DWORD PTR [rax+rax*1+0x0],0x615f0195
 1010400:	movsxd ebp,DWORD PTR [rbp+0x64]
 1010403:	ins    BYTE PTR es:[rdi],dx
 1010404:	outs   dx,BYTE PTR ds:[rsi]
 1010405:	add    BYTE PTR [rsi+0x6e695f02],al
 101040b:	imul   esi,DWORD PTR [rsp+rsi*2+0x65],0x87006d72
 1010413:	add    bl,BYTE PTR [rdi+0x69]
 1010416:	outs   dx,BYTE PTR ds:[rsi]
 1010417:	imul   esi,DWORD PTR [rsp+rsi*2+0x65],0x655f6d72
 101041f:	add    ch,al
 1010421:	add    DWORD PTR [rdi+0x63],ebx
 1010424:	outs   dx,DWORD PTR ds:[rsi]
 1010425:	outs   dx,BYTE PTR ds:[rsi]
 1010426:	imul   sp,WORD PTR [rdi+0x74],0x7268
 101042c:	gs (bad) 
 101042e:	fs ins BYTE PTR es:[rdi],dx
 1010430:	outs   dx,DWORD PTR ds:[rsi]
 1010431:	movsxd esp,DWORD PTR [rcx+0x6c]
 1010434:	add    BYTE PTR gs:[rcx+rax*1+0x5f],bh
 1010439:	pop    rdi
 101043a:	jae    0x10104a1
 101043c:	je     0x10104b3
 101043e:	jae    0x10104a5
 1010440:	jb     0x10104af
 1010442:	(bad)  
 1010443:	je     0x10104ad
 1010445:	gs jb  0x10104ba
 1010448:	add    BYTE PTR [rax],al
 101044a:	(bad)
 101044e:	outs   dx,DWORD PTR ds:[rsi]
 101044f:	ins    DWORD PTR es:[rdi],dx
 1010450:	ins    DWORD PTR es:[rdi],dx
 1010451:	outs   dx,DWORD PTR ds:[rsi]
 1010452:	fs add BYTE PTR gs:[rax],al
 1010456:	sbb    al,0x2
 1010458:	pop    rdi
 1010459:	ins    WORD PTR es:[rdi],dx
 101045b:	outs   dx,DWORD PTR ds:[rsi]
 101045c:	fs add BYTE PTR gs:[rax],al
 1010460:	jns    0x1010463
 1010462:	pop    rdi
 1010463:	pop    rdi
 1010464:	jae    0x10104cb
 1010466:	je     0x10104c7
 1010468:	(bad)  
 1010469:	jo     0x10104db
 101046b:	pop    rdi
 101046c:	je     0x10104e7
 101046e:	jo     0x10104d5
 1010470:	add    BYTE PTR [rax],al
 1010472:	rex.WRB push r11
 1010474:	push   rsi
 1010475:	rex.XB push r10
 1010477:	xor    DWORD PTR [rax],esi
 1010479:	xor    BYTE PTR [rsi],ch
 101047b:	fs ins BYTE PTR es:[rdi],dx
 101047d:	ins    BYTE PTR es:[rdi],dx
 101047e:	add    BYTE PTR [rax],al
 1010480:	add    BYTE PTR [rcx],al
 1010482:	(bad)  
 1010483:	je     0x10104ea
 1010485:	jb     0x10104f4
 1010487:	imul   ebp,DWORD PTR [rsi+0x61],0x40406574
 101048e:	pop    rcx
 101048f:	pop    r8
 1010491:	pop    rax
 1010492:	pop    rdx
 1010493:	add    BYTE PTR [rsi+0x1],al
 1010496:	pop    rdi
 1010497:	pop    rdi
 1010498:	movsxd esi,DWORD PTR [rdx+0x74]
 101049b:	pop    rdi
 101049c:	fs gs (bad) 
 101049f:	jne    0x1010508
 10104a1:	addr32 gs jb 0x1010504
 10104a5:	push   0x6b6f6f
 10104aa:	pop    rbx
 10104ab:	add    al,0x5f
 10104ad:	jne    0x101051d
 10104af:	ins    BYTE PTR es:[rdi],dx
 10104b0:	outs   dx,DWORD PTR ds:[rsi]
 10104b1:	movsxd ebp,DWORD PTR [rbx+0x0]
 10104b4:	add    QWORD PTR [rdi+0x5f],rbx
 10104b8:	fs ins BYTE PTR es:[rdi],dx
 10104ba:	ins    BYTE PTR es:[rdi],dx
 10104bb:	outs   dx,DWORD PTR ds:[rsi]
 10104bc:	outs   dx,BYTE PTR ds:[rsi]
 10104bd:	gs js  0x1010529
 10104c0:	je     0x10104c2
 10104c2:	test   BYTE PTR [rdx],0x5f
 10104c5:	ins    BYTE PTR es:[rdi],dx
 10104c6:	outs   dx,DWORD PTR ds:[rsi]
 10104c7:	movsxd ebp,DWORD PTR [rbx+0x0]
 10104ca:	popf   
 10104cb:	add    ebx,DWORD PTR [rdi+0x6f]
 10104ce:	outs   dx,BYTE PTR ds:[rsi]
 10104cf:	gs js  0x101053b
 10104d2:	je     0x10104d4
 10104d4:	push   r12
 10104d6:	xor    QWORD PTR [rax],r14
 10104d9:	xor    BYTE PTR [rsi],ch
 10104db:	rex.R
 10104dc:	rex.WR
 10104dd:	rex.WR add BYTE PTR [rax],r8b
 10104e0:	rex.XB add BYTE PTR [r11+0x6f],al
 10104e4:	rex.WB outs dx,BYTE PTR ds:[rsi]
 10104e6:	imul   esi,DWORD PTR [rcx+rbp*2+0x61],0x657a696c
 10104ee:	rex.RB js 0x10104f1
 10104f1:	add    BYTE PTR [rdi+0x0],dl
 10104f4:	rex.XB outs dx,DWORD PTR ds:[rsi]
 10104f6:	push   rdx
 10104f7:	imul   esi,DWORD PTR gs:[ebx+0x74],0x6c437265
 1010500:	(bad)  
 1010501:	jae    0x1010576
 1010503:	rex.WRXB (bad) 
 1010505:	push   0x65
 1010507:	movsxd esi,DWORD PTR [rax+rax*1+0x63]
 101050b:	add    BYTE PTR [rbx+0x6f],al
 101050e:	push   rdx
 101050f:	gs jbe 0x1010581
 1010512:	imul   esp,DWORD PTR [rbp+0x43],0x6c
 1010516:	(bad)  
 1010517:	jae    0x101058c
 1010519:	rex.WRXB (bad) 
 101051b:	push   0x65
 101051d:	movsxd esi,DWORD PTR [rax+rax*1+0xd]
 1010521:	add    BYTE PTR [rbx+0x6f],al
 1010524:	rex.B
 1010525:	fs fs push rdx
 1010528:	gs push bx
 101052b:	gs jb  0x10105a4
 101052e:	gs jb  0x1010581
 1010531:	jb     0x10105a2
 1010533:	movsxd esp,DWORD PTR [rbp+0x73]
 1010536:	jae    0x1010538
 1010538:	pop    rdi
 1010539:	add    BYTE PTR [rbx+0x6f],al
 101053c:	push   rdx
 101053d:	gs ins BYTE PTR es:[rdi],dx
 101053f:	gs (bad) 
 1010541:	jae    0x10105a8
 1010543:	push   rbx
 1010544:	gs jb  0x10105bd
 1010547:	gs jb  0x101059a
 101054a:	jb     0x10105bb
 101054c:	movsxd esp,DWORD PTR [rbp+0x73]
 101054f:	jae    0x1010551
 1010551:	add    BYTE PTR [rax+rax*1+0x43],bl
 1010555:	outs   dx,DWORD PTR ds:[rsi]
 1010556:	push   rdx
 1010557:	imul   esi,DWORD PTR gs:[ebx+0x74],0x75537265
 1010560:	jb     0x10105d4
 1010562:	outs   dx,DWORD PTR ds:[rsi]
 1010563:	addr32 (bad) 
 1010565:	je     0x10105cc
 1010567:	add    BYTE PTR [rcx],ah
 1010569:	add    BYTE PTR [rbx+0x6f],al
 101056c:	rex.RX jb 0x10105d4
 101056f:	gs push rbp
 1010571:	outs   dx,BYTE PTR ds:[rsi]
 1010572:	jne    0x10105e7
 1010574:	gs imul r12,QWORD PTR fs:[rdx+0x72],0x65697261
 101057e:	jae    0x1010580
 1010580:	adc    al,0x0
 1010582:	rex.XB outs dx,DWORD PTR ds:[rsi]
 1010584:	rex.XB jb 0x10105ec
 1010587:	(bad)  
 1010588:	je     0x10105ef
 101058a:	rex.WB outs dx,BYTE PTR ds:[rsi]
 101058c:	jae    0x1010602
 101058e:	(bad)  
 101058f:	outs   dx,BYTE PTR ds:[rsi]
 1010590:	movsxd esp,DWORD PTR [rbp+0x0]
 1010593:	add    BYTE PTR [rbp+0x72745301],dh
 1010599:	imul   ebp,DWORD PTR [rsi+0x67],0x6d6f7246
 10105a0:	rex.RXB push r13
 10105a2:	rex.WB
 10105a3:	xor    r8b,BYTE PTR [rax]
 10105a6:	outs   dx,DWORD PTR ds:[rsi]
 10105a7:	ins    BYTE PTR es:[rdi],dx
 10105a8:	xor    esi,DWORD PTR gs:[rdx]
 10105ab:	cs fs ins BYTE PTR es:[rdi],dx
 10105ae:	ins    BYTE PTR es:[rdi],dx
 10105af:	add    BYTE PTR [rdi+0x4c],cl
 10105b2:	rex.RB
 10105b3:	push   r13
 10105b5:	push   rsp
 10105b6:	xor    esi,DWORD PTR [rdx]
 10105b8:	cs fs ins BYTE PTR es:[rdi],dx
 10105bb:	ins    BYTE PTR es:[rdi],dx
 10105bc:	add    BYTE PTR [rax],al
 10105be:	add    BYTE PTR gs:[rax+0x61],dl
 10105c2:	je     0x101062c
 10105c4:	rex.WB jae 0x1010619
 10105c7:	gs ins BYTE PTR es:[rdi],dx
 10105c9:	(bad)  
 10105ca:	je     0x1010635
 10105cc:	jbe    0x1010633
 10105ce:	push   rdi
 10105cf:	add    BYTE PTR [rbx+0x48],dl
 10105d2:	rex.WR push rdi
 10105d4:	push   r8
 10105d6:	rex.WB
 10105d7:	cs fs ins BYTE PTR es:[rdi],dx
 10105da:	ins    BYTE PTR es:[rdi],dx
 10105db:	add    BYTE PTR [rdx+rax*1+0x52],ah
 10105df:	gs addr32 rex.WRXB jo 0x1010649
 10105e4:	outs   dx,BYTE PTR ds:[rsi]
 10105e5:	rex.WXB
 10105e6:	gs jns 0x1010640
 10105e9:	add    BYTE PTR [rdx+0x2],ch
 10105ec:	rex.RXB
 10105ed:	gs je  0x1010643
 10105f0:	je     0x1010653
 10105f2:	jb     0x1010668
 10105f4:	jne    0x1010666
 10105f6:	rex.WB outs dx,BYTE PTR ds:[rsi]
 10105f8:	outs   dx,WORD PTR ds:[rsi]
 10105fa:	push   rdi
 10105fb:	add    dh,ch
 10105fd:	add    BYTE PTR [rbp+0x6e],al
 1010600:	movsxd ebp,DWORD PTR [rdi+0x64]
 1010603:	gs push rax
 1010605:	outs   dx,DWORD PTR ds:[rsi]
 1010606:	imul   ebp,DWORD PTR [rsi+0x74],0xe2007265
 101060d:	add    al,0x55
 101060f:	outs   dx,BYTE PTR ds:[rsi]
 1010610:	push   0x6c646e61
 1010615:	gs fs rex.RB js 0x101067d
 101061a:	gs jo  0x1010691
 101061d:	imul   ebp,DWORD PTR [rdi+0x6e],0x746c6946
 1010624:	gs jb  0x1010627
 1010627:	add    BYTE PTR [rdx],al
 1010629:	add    ecx,DWORD PTR [rcx+0x73]
 101062c:	rex.R
 101062d:	gs (bad) 
 101062f:	jne    0x1010698
 1010631:	addr32 gs jb 0x1010685
 1010635:	jb     0x101069c
 1010637:	jae    0x101069e
 1010639:	outs   dx,BYTE PTR ds:[rsi]
 101063a:	je     0x101063c
 101063c:	es add al,0x52
 101063f:	je     0x10106ad
 1010641:	push   rsi
 1010642:	imul   esi,DWORD PTR [rdx+0x74],0x556c6175
 1010649:	outs   dx,BYTE PTR ds:[rsi]
 101064a:	ja     0x10106b5
 101064c:	outs   dx,BYTE PTR ds:[rsi]
 101064d:	add    BYTE PTR fs:[rax],al
 1010650:	(bad)  
 1010651:	add    al,0x52
 1010653:	je     0x10106c1
 1010655:	rex.WR outs dx,DWORD PTR ds:[rsi]
 1010657:	outs   dx,DWORD PTR ds:[rsi]
 1010658:	imul   esi,DWORD PTR [rbp+0x70],0x46
 101065c:	jne    0x10106cc
 101065e:	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
 1010662:	outs   dx,BYTE PTR ds:[rsi]
 1010663:	rex.RB outs dx,BYTE PTR ds:[rsi]
 1010665:	je     0x10106d9
 1010667:	jns    0x1010669
 1010669:	add    BYTE PTR [rax],bl
 101066b:	add    al,0x52
 101066d:	je     0x10106db
 101066f:	rex.XB (bad) 
 1010671:	jo     0x10106e7
 1010673:	jne    0x10106e7
 1010675:	rex.XB outs dx,DWORD PTR gs:[rsi]
 1010678:	outs   dx,BYTE PTR ds:[rsi]
 1010679:	je     0x10106e0
 101067b:	js     0x10106f1
 101067d:	add    bl,cl
 101067f:	add    BYTE PTR [rbp+riz*2+0x63],al
 1010683:	outs   dx,DWORD PTR ds:[rsi]
 1010684:	fs gs push rax
 1010687:	outs   dx,DWORD PTR ds:[rsi]
 1010688:	imul   ebp,DWORD PTR [rsi+0x74],0xa9007265
 101068f:	add    edx,DWORD PTR [rcx+0x75]
 1010692:	gs jb  0x101070e
 1010695:	push   rax
 1010696:	gs jb  0x10106ff
 1010699:	outs   dx,DWORD PTR ds:[rsi]
 101069a:	jb     0x1010709
 101069c:	(bad)  
 101069d:	outs   dx,BYTE PTR ds:[rsi]
 101069e:	movsxd esp,DWORD PTR [rbp+0x43]
 10106a1:	outs   dx,DWORD PTR ds:[rsi]
 10106a2:	jne    0x1010712
 10106a4:	je     0x101070b
 10106a6:	jb     0x10106a8
 10106a8:	(bad)  
 10106a9:	add    al,BYTE PTR [rdi+0x65]
 10106ac:	je     0x1010702
 10106ae:	imul   esp,DWORD PTR [rbx+0x6b],0x6e756f43
 10106b5:	je     0x10106b7
 10106b7:	add    bh,al
 10106b9:	add    DWORD PTR [rdi+0x65],eax
 10106bc:	je     0x1010701
 10106be:	jne    0x1010732
 10106c0:	jb     0x1010727
 10106c2:	outs   dx,BYTE PTR ds:[rsi]
 10106c3:	je     0x1010715
 10106c5:	jb     0x1010736
 10106c7:	movsxd esp,DWORD PTR [rbp+0x73]
 10106ca:	jae    0x1010715
 10106cc:	add    BYTE PTR fs:[rax+0x74654702],al
 10106d3:	push   rbx
 10106d4:	jns    0x1010749
 10106d6:	je     0x101073d
 10106d8:	ins    DWORD PTR es:[rdi],dx
 10106d9:	push   rsp
 10106da:	imul   ebp,DWORD PTR [rbp+0x65],0x69467341
 10106e1:	ins    BYTE PTR es:[rdi],dx
 10106e2:	gs push rsp
 10106e4:	imul   ebp,DWORD PTR [rbp+0x65],0x4c035600
 10106eb:	outs   dx,DWORD PTR ds:[rsi]
 10106ec:	movsxd ebp,DWORD PTR [rbx+0x52]
 10106ef:	gs jae 0x1010761
 10106f2:	jne    0x1010766
 10106f4:	movsxd esp,DWORD PTR [rbp+0x0]
 10106f7:	add    BYTE PTR [rdx+0x3],cl
 10106fa:	rex.WR outs dx,DWORD PTR ds:[rsi]
 10106fc:	movsxd esp,DWORD PTR [rcx+0x6c]
 10106ff:	rex.RX jb 0x1010767
 1010702:	add    BYTE PTR gs:[rbx+0x3],al
 1010706:	rex.WR outs dx,DWORD PTR ds:[rsi]
 1010708:	(bad)  
 1010709:	fs push rdx
 101070b:	gs jae 0x101077d
 101070e:	jne    0x1010782
 1010710:	movsxd esp,DWORD PTR [rbp+0x0]
 1010713:	add    BYTE PTR [rdi+0x7a695304],bh
 1010719:	outs   dx,DWORD PTR gs:[rsi]
 101071b:	push   dx
 101071d:	gs jae 0x101078f
 1010720:	jne    0x1010794
 1010722:	movsxd esp,DWORD PTR [rbp+0x0]
 1010725:	add    BYTE PTR [rcx+rax*1+0x46],dl
 1010729:	imul   ebp,DWORD PTR [rsi+0x64],0x6f736552
 1010730:	jne    0x10107a4
 1010732:	movsxd esp,DWORD PTR [rbp+0x57]
 1010735:	add    BYTE PTR [rsi+0x74654702],ah
 101073b:	push   rbp
 101073c:	jae    0x10107a3
 101073e:	jb     0x1010784
 1010740:	gs data16 (bad) 
 1010743:	jne    0x10107b1
 1010745:	je     0x101079c
 1010747:	rex.WB
 1010748:	rex.WR (bad) 
 101074a:	outs   dx,BYTE PTR ds:[rsi]
 101074b:	addr32 jne 0x10107af
 101074e:	add    BYTE PTR gs:[eax],al
 1010752:	add    r9d,DWORD PTR [rdi+r13*2+0x63]
 1010757:	(bad)  
 1010758:	ins    BYTE PTR es:[rdi],dx
 1010759:	rex.B ins BYTE PTR es:[rdi],dx
 101075b:	ins    BYTE PTR es:[rdi],dx
 101075c:	outs   dx,DWORD PTR ds:[rsi]
 101075d:	movsxd eax,DWORD PTR [rax]
 101075f:	add    BYTE PTR [rcx+0x5],ah
 1010762:	ins    BYTE PTR es:[rdi],dx
 1010763:	jae    0x10107d9
 1010765:	jb     0x10107d3
 1010767:	outs   dx,BYTE PTR gs:[rsi]
 1010769:	push   rdi
 101076a:	add    BYTE PTR [rax],al
 101076c:	mov    DWORD PTR [rdx],0x626f6c47
 1010772:	(bad)  
 1010773:	ins    BYTE PTR es:[rdi],dx
 1010774:	rex.WRB
 1010775:	gs ins DWORD PTR es:[rdi],dx
 1010777:	outs   dx,DWORD PTR ds:[rsi]
 1010778:	jb     0x10107f3
 101077a:	push   rbx
 101077b:	je     0x10107de
 101077d:	je     0x10107f4
 101077f:	jae    0x1010781
 1010781:	add    BYTE PTR [rax*1+0x74697257],dh
 1010788:	imul   r13d,DWORD PTR gs:[rbp+r12*2+0x0],0x6547022b
 1010792:	je     0x10107e2
 1010794:	(bad)  
 1010795:	je     0x1010800
 1010797:	jbe    0x10107fe
 1010799:	push   rbx
 101079a:	jns    0x101080f
 101079c:	je     0x1010803
 101079e:	ins    DWORD PTR es:[rdi],dx
 101079f:	rex.WB outs dx,BYTE PTR ds:[rsi]
 10107a1:	outs   dx,WORD PTR ds:[rsi]
 10107a3:	add    BYTE PTR [rdx],bl
 10107a5:	add    al,BYTE PTR [rdi+0x65]
 10107a8:	je     0x10107f7
 10107aa:	outs   dx,DWORD PTR ds:[rsi]
 10107ab:	fs jne 0x101081a
 10107ae:	imul   r13d,DWORD PTR gs:[rbp+r12*2+0x4e],0x57656d61
 10107b8:	add    BYTE PTR [rax],al
 10107ba:	mov    al,BYTE PTR [rdx]
 10107bc:	rex.RXB
 10107bd:	gs je  0x1010814
 10107c0:	gs ins DWORD PTR es:[rdi],dx
 10107c2:	jo     0x101080a
 10107c4:	imul   ebp,DWORD PTR [rbp+riz*2+0x4e],0x57656d61
 10107cc:	add    BYTE PTR [rax],al
 10107ce:	lods   al,BYTE PTR ds:[rsi]
 10107cf:	add    al,BYTE PTR [rdi+0x65]
 10107d2:	je     0x101082a
 10107d4:	gs jb  0x101084a
 10107d7:	imul   ebp,DWORD PTR [rdi+0x6e],0x577845
 10107de:	adc    BYTE PTR [rbx],al
 10107e0:	rex.WB jae 0x101083a
 10107e3:	outs   dx,DWORD PTR ds:[rsi]
 10107e4:	ja     0x101081c
 10107e6:	xor    al,0x50
 10107e8:	jb     0x1010859
 10107ea:	movsxd esp,DWORD PTR [rbp+0x73]
 10107ed:	jae    0x10107ef
 10107ef:	add    BYTE PTR [rsi+0x74654702],bl
 10107f5:	push   rsp
 10107f6:	imul   ebp,DWORD PTR [rbp+0x65],0x6d726f46
 10107fd:	(bad)  
 10107fe:	je     0x1010857
 1010800:	add    BYTE PTR [rax],al
 1010802:	iret   
 1010803:	add    DWORD PTR [rdi+0x65],eax
 1010806:	je     0x101084c
 1010808:	(bad)  
 1010809:	je     0x1010870
 101080b:	rex.RX outs dx,DWORD PTR ds:[rsi]
 101080d:	jb     0x101087c
 101080f:	(bad)  
 1010810:	je     0x1010869
 1010812:	add    BYTE PTR [rax],al
 1010814:	gs add al,0x53
 1010817:	gs je  0x101085f
 101081a:	outs   dx,BYTE PTR ds:[rsi]
 101081b:	jbe    0x1010886
 101081d:	jb     0x101088e
 101081f:	outs   dx,BYTE PTR ds:[rsi]
 1010820:	ins    DWORD PTR es:[rdi],dx
 1010821:	outs   dx,BYTE PTR gs:[rsi]
 1010823:	je     0x101087b
 1010825:	(bad)  
 1010826:	jb     0x1010891
 1010828:	(bad)  
 1010829:	(bad)  
 101082a:	ins    BYTE PTR es:[rdi],dx
 101082b:	gs push rdi
 101082d:	add    bl,ah
 101082f:	add    DWORD PTR [rdi+0x65],eax
 1010832:	je     0x1010879
 1010834:	outs   dx,BYTE PTR ds:[rsi]
 1010835:	jbe    0x10108a0
 1010837:	jb     0x10108a8
 1010839:	outs   dx,BYTE PTR ds:[rsi]
 101083a:	ins    DWORD PTR es:[rdi],dx
 101083b:	outs   dx,BYTE PTR gs:[rsi]
 101083d:	je     0x1010895
 101083f:	(bad)  
 1010840:	jb     0x10108ab
 1010842:	(bad)  
 1010843:	(bad)  
 1010844:	ins    BYTE PTR es:[rdi],dx
 1010845:	gs push rdi
 1010847:	add    BYTE PTR [rax+rax*1+0x43],ah
 101084b:	outs   dx,DWORD PTR ds:[rsi]
 101084c:	ins    DWORD PTR es:[rdi],dx
 101084d:	jo     0x10108b0
 101084f:	jb     0x10108b6
 1010851:	push   rbx
 1010852:	je     0x10108c6
 1010854:	imul   ebp,DWORD PTR [rsi+0x67],0xd3000057
 101085b:	add    cl,BYTE PTR [rax+0x65]
 101085e:	(bad)  
 101085f:	jo     0x10108a2
 1010861:	ins    BYTE PTR es:[rdi],dx
 1010862:	ins    BYTE PTR es:[rdi],dx
 1010863:	outs   dx,DWORD PTR ds:[rsi]
 1010864:	movsxd eax,DWORD PTR [rax]
 1010866:	xlat   BYTE PTR ds:[rbx]
 1010867:	add    cl,BYTE PTR [rax+0x65]
 101086a:	(bad)  
 101086b:	jo     0x10108b3
 101086d:	jb     0x10108d4
 101086f:	add    BYTE PTR gs:[rax],al
 1010872:	fiadd  DWORD PTR [rdx]
 1010874:	rex.W
 1010875:	gs (bad) 
 1010877:	jo     0x10108cb
 1010879:	gs rex.B ins BYTE PTR es:[rdi],dx
 101087c:	ins    BYTE PTR es:[rdi],dx
 101087d:	outs   dx,DWORD PTR ds:[rsi]
 101087e:	movsxd eax,DWORD PTR [rax]
 1010880:	push   rcx
 1010881:	add    al,BYTE PTR [rdi+0x65]
 1010884:	je     0x10108d6
 1010886:	jb     0x10108f7
 1010888:	movsxd esp,DWORD PTR [rbp+0x73]
 101088b:	jae    0x10108d5
 101088d:	gs (bad) 
 101088f:	jo     0x1010891
 1010891:	add    BYTE PTR [rax],al
 1010893:	add    eax,0x74726956
 1010898:	jne    0x10108fb
 101089a:	ins    BYTE PTR es:[rdi],dx
 101089b:	push   rcx
 101089c:	jne    0x1010903
 101089e:	jb     0x1010919
 10108a0:	add    BYTE PTR [rax],al
 10108a2:	add    BYTE PTR [rbx+rdx*2],0x65
 10108a6:	je     0x10108f4
 10108a8:	(bad)  
 10108a9:	jae    0x101091f
 10108ab:	rex.RB jb 0x1010920
 10108ae:	outs   dx,DWORD PTR ds:[rsi]
 10108af:	jb     0x10108b1
 10108b1:	add    al,cl
 10108b3:	add    BYTE PTR [rbp+riz*2+0x62],al
 10108b7:	jne    0x1010920
 10108b9:	rex.X jb 0x1010921
 10108bc:	(bad)  
 10108bd:	imul   eax,DWORD PTR [rax],0x0
 10108c0:	and    eax,DWORD PTR [rcx]
 10108c2:	rex.RB js 0x1010935
 10108c5:	(bad)  
 10108c6:	outs   dx,BYTE PTR ds:[rsi]
 10108c7:	rex.RB outs dx,BYTE PTR fs:[rsi]
 10108ca:	jbe    0x1010935
 10108cc:	jb     0x101093d
 10108ce:	outs   dx,BYTE PTR ds:[rsi]
 10108cf:	ins    DWORD PTR es:[rdi],dx
 10108d0:	outs   dx,BYTE PTR gs:[rsi]
 10108d2:	je     0x1010927
 10108d4:	je     0x1010948
 10108d6:	imul   ebp,DWORD PTR [rsi+0x67],0x49005773
 10108dd:	add    al,BYTE PTR [rdi+0x65]
 10108e0:	je     0x1010932
 10108e2:	jb     0x101094d
 10108e4:	jbe    0x1010947
 10108e6:	je     0x101094d
 10108e8:	push   rax
 10108e9:	jb     0x101095a
 10108eb:	imul   bp,WORD PTR [rbp+riz*2+0x53],0x7274
 10108f2:	imul   ebp,DWORD PTR [rsi+0x67],0xf1000057
 10108f9:	add    DWORD PTR [rdi+0x65],eax
 10108fc:	je     0x1010944
 10108fe:	imul   ebp,DWORD PTR [rbp+riz*2+0x41],0x69727474
 1010906:	(bad)  
 1010907:	jne    0x101097d
 1010909:	gs jae 0x1010963
 101090c:	add    BYTE PTR [rax],al
 101090e:	std    
 101090f:	add    edx,DWORD PTR [rdx+0x65]
 1010912:	ins    BYTE PTR es:[rdi],dx
 1010913:	gs (bad) 
 1010915:	jae    0x101097c
 1010917:	rex.WRB jne 0x101098e
 101091a:	gs js  0x101091d
 101091d:	add    BYTE PTR [rax],cl
 101091f:	add    eax,0x74696157
 1010924:	rex.RX outs dx,DWORD PTR ds:[rsi]
 1010926:	jb     0x101097b
 1010928:	imul   ebp,DWORD PTR [rsi+0x67],0x624f656c
 101092f:	push   0x65
 1010931:	movsxd esi,DWORD PTR [rax+rax*1+0x7d]
 1010935:	add    al,0x53
 1010937:	gs je  0x1010982
 101093a:	(bad)  
 101093b:	outs   dx,BYTE PTR ds:[rsi]
 101093c:	fs ins BYTE PTR es:[rdi],dx
 101093e:	rex.WB outs dx,BYTE PTR gs:[rsi]
 1010941:	outs   dx,WORD PTR ds:[rsi]
 1010943:	jb     0x10109b2
 1010945:	(bad)  
 1010946:	je     0x10109b1
 1010948:	outs   dx,DWORD PTR ds:[rsi]
 1010949:	outs   dx,BYTE PTR ds:[rsi]
 101094a:	add    BYTE PTR [rax],al
 101094c:	sahf   
 101094d:	add    BYTE PTR [rbx+0x72],al
 1010950:	gs (bad) 
 1010952:	je     0x10109b9
 1010954:	rex.WRB jne 0x10109cb
 1010957:	gs js  0x10109b1
 101095a:	add    BYTE PTR [rax],al
 101095c:	(bad)  
 101095d:	add    cl,BYTE PTR [rax+0x65]
 1010960:	(bad)  
 1010961:	jo     0x10109a7
 1010963:	gs jae 0x10109da
 1010966:	jb     0x10109d7
 1010968:	jns    0x101096a
 101096a:	jp     0x101096e
 101096c:	rex.RXB
 101096d:	gs je  0x10109c3
 1010970:	jns    0x10109e5
 1010972:	je     0x10109d9
 1010974:	ins    DWORD PTR es:[rdi],dx
 1010975:	rex.WB outs dx,BYTE PTR ds:[rsi]
 1010977:	outs   dx,WORD PTR ds:[rsi]
 1010979:	add    BYTE PTR [rax+0x1],ch
 101097c:	rex.RX jb 0x10109e4
 101097f:	imul   r12,QWORD PTR gs:[rdx+0x72],0x797261
 1010988:	(bad)  
 1010989:	add    cl,BYTE PTR [rax+0x65]
 101098c:	(bad)  
 101098d:	jo     0x10109d2
 101098f:	jb     0x10109f6
 1010991:	(bad)  
 1010992:	je     0x10109f9
 1010994:	add    BYTE PTR [rax],al
 1010996:	mov    BYTE PTR [rbx],0x52
 1010999:	gs (bad) 
 101099b:	fs push rax
 101099d:	jb     0x1010a0e
 101099f:	movsxd esp,DWORD PTR [rbp+0x73]
 10109a2:	jae    0x10109f1
 10109a4:	gs ins DWORD PTR es:[rdi],dx
 10109a6:	outs   dx,DWORD PTR ds:[rsi]
 10109a7:	jb     0x1010a22
 10109a9:	add    dh,ah
 10109ab:	add    DWORD PTR [rdi+0x65],eax
 10109ae:	je     0x10109f5
 10109b0:	js     0x1010a1b
 10109b2:	je     0x10109f7
 10109b4:	outs   dx,DWORD PTR ds:[rsi]
 10109b5:	fs gs push rax
 10109b8:	jb     0x1010a29
 10109ba:	movsxd esp,DWORD PTR [rbp+0x73]
 10109bd:	jae    0x10109bf
 10109bf:	add    BYTE PTR [rax+0x65724300],ch
 10109c5:	(bad)  
 10109c6:	je     0x1010a2d
 10109c8:	push   rax
 10109c9:	jb     0x1010a3a
 10109cb:	movsxd esp,DWORD PTR [rbp+0x73]
 10109ce:	jae    0x1010a27
 10109d0:	add    BYTE PTR [rax],al
 10109d2:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 10109d3:	add    al,0x53
 10109d5:	gs je  0x1010a2c
 10109d8:	push   0x64616572
 10109dd:	push   rax
 10109de:	jb     0x1010a49
 10109e0:	outs   dx,DWORD PTR ds:[rsi]
 10109e1:	jb     0x1010a4c
 10109e3:	je     0x1010a5e
 10109e5:	add    BYTE PTR [rbp+0x74654702],dl
 10109eb:	push   rsp
 10109ec:	push   0x64616572
 10109f1:	push   rax
 10109f2:	jb     0x1010a5d
 10109f4:	outs   dx,DWORD PTR ds:[rsi]
 10109f5:	jb     0x1010a60
 10109f7:	je     0x1010a72
 10109f9:	add    dl,cl
 10109fb:	add    DWORD PTR [rdi+0x65],eax
 10109fe:	je     0x1010a43
 1010a00:	jne    0x1010a74
 1010a02:	jb     0x1010a69
 1010a04:	outs   dx,BYTE PTR ds:[rsi]
 1010a05:	je     0x1010a5b
 1010a07:	push   0x64616572
 1010a0c:	add    BYTE PTR [rax],al
 1010a0e:	add    ecx,DWORD PTR ds:[rdi+rbp*2+0x61]
 1010a13:	imul   r12,QWORD PTR fs:[rdx+0x72],0x41797261
 1010a1c:	add    BYTE PTR [rax],al
 1010a1e:	xchg   BYTE PTR [rip+0x61777369],al        # 0x62787d8d
 1010a24:	ins    BYTE PTR es:[rdi],dx
 1010a25:	jo     0x1010a8f
 1010a27:	(bad)  
 1010a28:	add    BYTE PTR [rax],al
 1010a2a:	adc    al,BYTE PTR [rsi]
 1010a2c:	ja     0x1010a91
 1010a2e:	jae    0x1010a93
 1010a30:	push   0xffffffff85000072
 1010a35:	add    al,0x5f
 1010a37:	jbe    0x1010aac
 1010a39:	outs   dx,BYTE PTR ds:[rsi]
 1010a3a:	ja     0x1010aac
 1010a3c:	jb     0x1010aa7
 1010a3e:	outs   dx,BYTE PTR ds:[rsi]
 1010a3f:	je     0x1010aa7
 1010a41:	add    BYTE PTR [rcx+0x6d656d05],ch
 1010a47:	movsxd esi,DWORD PTR [rax+0x79]
 1010a4a:	add    BYTE PTR [rax],al
 1010a4c:	cmp    BYTE PTR [rdi+rbx*2],al
 1010a4f:	jae    0x1010ac8
 1010a51:	jae    0x1010ab6
 1010a53:	(bad)  
 1010a54:	outs   dx,BYTE PTR ds:[rsi]
 1010a55:	pop    di
 1010a57:	jae    0x1010ab8
 1010a59:	ins    BYTE PTR es:[rdi],dx
 1010a5a:	add    BYTE PTR [rax],al
 1010a5c:	mov    bh,0x3
 1010a5e:	pop    rdi
 1010a5f:	jb     0x1010ac6
 1010a61:	jae    0x1010ac8
 1010a63:	je     0x1010ad8
 1010a65:	je     0x1010ad2
 1010a67:	outs   dx,DWORD PTR ds:[rsi]
 1010a68:	data16 ins BYTE PTR es:[rdi],dx
 1010a6a:	ja     0x1010a6c
 1010a6c:	xchg   BYTE PTR [rdi+rbx*2],al
 1010a6f:	jbe    0x1010ae4
 1010a71:	outs   dx,BYTE PTR ds:[rsi]
 1010a72:	ja     0x1010ae4
 1010a74:	jb     0x1010adf
 1010a76:	outs   dx,BYTE PTR ds:[rsi]
 1010a77:	je     0x1010adf
 1010a79:	pop    rdi
 1010a7a:	ins    BYTE PTR es:[rdi],dx
 1010a7b:	add    ch,ch
 1010a7d:	add    al,0x5f
 1010a7f:	ja     0x1010aee
 1010a81:	(bad)  
 1010a82:	imul   esp,DWORD PTR [rbp+0x70],0x61
 1010a86:	je     0x1010af0
 1010a88:	pop    rdi
 1010a89:	jae    0x1010a8b
 1010a8b:	add    BYTE PTR [rdi],cl
 1010a8d:	add    eax,0x7073775f
 1010a92:	ins    BYTE PTR es:[rdi],dx
 1010a93:	imul   esi,DWORD PTR [rax+rsi*2+0x61],0x735f6874
 1010a9b:	add    BYTE PTR [rax+0x0],ah
 1010a9e:	(bad)  
 1010a9f:	(bad)  
 1010aa0:	xor    BYTE PTR [rdi+0x4c],bl
 1010aa3:	outs   dx,DWORD PTR ds:[rsi]
 1010aa4:	movsxd ebp,DWORD PTR [rbx+0x69]
 1010aa7:	je     0x1010ae9
 1010aa9:	jae    0x1010b1f
 1010aab:	fs rex
 1010aad:	rex push rcx
 1010aaf:	rex.RB
 1010ab0:	rex.B
 1010ab1:	rex.B
 1010ab2:	rex
 1010ab3:	rex.W
 1010ab4:	rex pop rdx
 1010ab6:	add    BYTE PTR [rax],al
 1010ab8:	sahf   
 1010ab9:	add    BYTE PTR [rdi],bh
 1010abb:	(bad)  
 1010abc:	xor    DWORD PTR [rdi+0x4c],ebx
 1010abf:	outs   dx,DWORD PTR ds:[rsi]
 1010ac0:	movsxd ebp,DWORD PTR [rbx+0x69]
 1010ac3:	je     0x1010b05
 1010ac5:	jae    0x1010b3b
 1010ac7:	fs rex
 1010ac9:	rex push rcx
 1010acb:	rex.RB
 1010acc:	rex.B
 1010acd:	rex.B
 1010ace:	rex pop rax
 1010ad0:	pop    rdx
 1010ad1:	add    BYTE PTR [rsi+0x445f3f01],bl
 1010ad7:	movsxd esi,DWORD PTR gs:[rdx+0x65]
 1010adb:	data16 rex
 1010add:	data16 (bad) 
 1010adf:	movsxd esp,DWORD PTR [rbp+0x74]
 1010ae2:	rex ins BYTE PTR es:[rdi],dx
 1010ae4:	outs   dx,DWORD PTR ds:[rsi]
 1010ae5:	movsxd esp,DWORD PTR [rcx+0x6c]
 1010ae8:	gs rex jae 0x1010b60
 1010aec:	fs rex
 1010aee:	rex push rcx
 1010af0:	rex.RB
 1010af1:	rex.B
 1010af2:	push   r8
 1010af4:	rex.RB
 1010af5:	push   r14
 1010af7:	xor    DWORD PTR [rdx],esi
 1010af9:	xor    eax,DWORD PTR [rax+0x58]
 1010afc:	pop    rdx
 1010afd:	add    BYTE PTR [rbp+0x53],cl
 1010b00:	push   rsi
 1010b01:	rex.XB push r8
 1010b03:	xor    DWORD PTR [rax],esi
 1010b05:	xor    BYTE PTR [rsi],ch
 1010b07:	fs ins BYTE PTR es:[rdi],dx
 1010b09:	ins    BYTE PTR es:[rdi],dx
 1010b0a:	add    BYTE PTR [rax],al
 1010b0c:	(bad)  
 1010b0d:	add    BYTE PTR [rdi+0x65],al
 1010b10:	je     0x1010b58
 1010b12:	imul   ebp,DWORD PTR [rbp+riz*2+0x56],0x69737265
 1010b1a:	outs   dx,DWORD PTR ds:[rsi]
 1010b1b:	outs   dx,BYTE PTR ds:[rsi]
 1010b1c:	rex.WB outs dx,BYTE PTR ds:[rsi]
 1010b1e:	outs   dx,WORD PTR ds:[rsi]
 1010b20:	push   rdi
 1010b21:	add    BYTE PTR [rsi],cl
 1010b23:	add    BYTE PTR [rsi+0x65],dl
 1010b26:	jb     0x1010b79
 1010b28:	jne    0x1010b8f
 1010b2a:	jb     0x1010ba5
 1010b2c:	push   rsi
 1010b2d:	(bad)  
 1010b2e:	ins    BYTE PTR es:[rdi],dx
 1010b2f:	jne    0x1010b96
 1010b31:	push   rdi
 1010b32:	add    BYTE PTR [rax],al
 1010b34:	push   rsi
 1010b35:	rex.RB push r10
 1010b37:	push   rbx
 1010b38:	rex.WB
 1010b39:	rex.WRXB
 1010b3a:	rex.WRX
 1010b3b:	cs fs ins BYTE PTR es:[rdi],dx
 1010b3e:	ins    BYTE PTR es:[rdi],dx
 1010b3f:	add    BYTE PTR [rax+rax*1],al
 1010b42:	rex.RB outs dx,BYTE PTR ds:[rsi]
 1010b44:	jne    0x1010bb3
 1010b46:	push   rax
 1010b47:	jb     0x1010bb8
 1010b49:	movsxd esp,DWORD PTR [rbp+0x73]
 1010b4c:	jae    0x1010b9b
 1010b4e:	outs   dx,DWORD PTR ds:[rsi]
 1010b4f:	fs jne 0x1010bbe
 1010b52:	gs jae 0x1010b55
 1010b55:	add    BYTE PTR [rax],dl
 1010b57:	add    BYTE PTR [rdi+0x65],al
 1010b5a:	je     0x1010ba9
 1010b5c:	outs   dx,DWORD PTR ds:[rsi]
 1010b5d:	fs jne 0x1010bcc
 1010b60:	imul   r13d,DWORD PTR gs:[rbp+r12*2+0x4e],0x45656d61
 1010b6a:	js     0x1010bc3
 1010b6c:	add    BYTE PTR [rax],al
 1010b6e:	push   rax
 1010b6f:	push   rbx
 1010b70:	push   r8
 1010b72:	rex.WB
 1010b73:	cs rex.R
 1010b75:	rex.WR
 1010b76:	rex.WR add spl,r11b
 1010b79:	add    cl,BYTE PTR [rax+0x65]
 1010b7c:	(bad)  
 1010b7d:	jo     0x1010bd2
 1010b7f:	imul   edi,DWORD PTR [rdx+0x65],0x1340000
 1010b86:	rex.RX imul r13d,DWORD PTR [rsi+0x64],0x736f6c43
 1010b8e:	add    BYTE PTR gs:[rdx],al
 1010b91:	add    al,BYTE PTR [rdi+0x65]
 1010b94:	je     0x1010bdc
 1010b96:	jne    0x1010c04
 1010b98:	ins    BYTE PTR es:[rdi],dx
 1010b99:	push   rax
 1010b9a:	(bad)  
 1010b9b:	je     0x1010c05
 1010b9d:	rex.WRX (bad) 
 1010b9f:	ins    DWORD PTR es:[rdi],dx
 1010ba0:	gs push rdi
 1010ba2:	add    BYTE PTR [rax],al
 1010ba4:	(bad)  
 1010ba5:	add    DWORD PTR [rsi+0x69],eax
 1010ba8:	outs   dx,BYTE PTR ds:[rsi]
 1010ba9:	rex.RX imul r14d,DWORD PTR fs:[rdx+0x73],0x6c694674
 1010bb2:	gs push rdi
 1010bb4:	add    BYTE PTR [rax],al
 1010bb6:	sti    
 1010bb7:	add    al,0x56
 1010bb9:	imul   esi,DWORD PTR [rdx+0x74],0x466c6175
 1010bc0:	jb     0x1010c27
 1010bc2:	add    BYTE PTR gs:[rax],al
	...
 1010bd1:	add    BYTE PTR [rax],al
 1010bd3:	add    cl,ah
 1010bd5:	(bad)  
 1010bd6:	xor    eax,0x4f
 1010bdb:	add    BYTE PTR [rax],ah
 1010bdd:	or     al,0x1
 1010bdf:	add    BYTE PTR [rcx],al
 1010be1:	add    BYTE PTR [rax],al
 1010be3:	add    BYTE PTR [rax+rax*1],al
 1010be6:	add    BYTE PTR [rax],al
 1010be8:	add    al,0x0
 1010bea:	add    BYTE PTR [rax],al
 1010bec:	clc    
 1010bed:	or     eax,DWORD PTR [rcx]
 1010bef:	add    BYTE PTR [rax],cl
 1010bf1:	or     al,0x1
 1010bf3:	add    BYTE PTR [rax],bl
 1010bf5:	or     al,0x1
 1010bf7:	add    BYTE PTR [rax],al
 1010bf9:	loop   0x1010bfb
 1010bfb:	add    BYTE PTR [rax+0x400000e2],dh
 1010c01:	rex.WXB add BYTE PTR [r8],al
 1010c04:	push   rax
 1010c05:	rex.WXB add BYTE PTR [r8],al
 1010c08:	sub    al,0xc
 1010c0a:	add    DWORD PTR [rax],eax
 1010c0c:	(bad)  
 1010c0d:	or     al,0x1
 1010c0f:	add    BYTE PTR [rsp+rcx*1+0x1],dl
 1010c13:	add    BYTE PTR [rdx+0xc],ah
 1010c16:	add    DWORD PTR [rax],eax
 1010c18:	add    BYTE PTR [rax],al
 1010c1a:	add    DWORD PTR [rax],eax
 1010c1c:	add    al,BYTE PTR [rax]
 1010c1e:	add    eax,DWORD PTR [rax]
 1010c20:	fs je  0x1010c96
 1010c23:	push   0x2e74736f
 1010c28:	gs js  0x1010c90
 1010c2b:	add    BYTE PTR [rbp+rbp*2+0x70],al
 1010c2f:	rex.RXB
 1010c30:	gs je  0x1010c76
 1010c33:	ins    BYTE PTR es:[rdi],dx
 1010c34:	imul   esp,DWORD PTR [rbp+0x6e],0x70784574
 1010c3b:	outs   dx,DWORD PTR ds:[rsi]
 1010c3c:	jb     0x1010cb2
 1010c3e:	add    BYTE PTR [rbp+rbp*2+0x70],al
 1010c42:	push   rdx
 1010c43:	gs ins DWORD PTR es:[rdi],dx
 1010c45:	outs   dx,DWORD PTR ds:[rsi]
 1010c46:	je     0x1010cad
 1010c48:	rex.R jne 0x1010cb8
 1010c4b:	jo     0x1010c9f
 1010c4d:	gs jno 0x1010cc5
 1010c50:	gs jae 0x1010cc7
 1010c53:	add    BYTE PTR [rbx+0x53],dl
 1010c56:	rex.WB push r11
 1010c58:	rex.X
 1010c59:	imul   ebp,DWORD PTR gs:[esi+0x44],0x706d75
 1010c62:	push   rbx
 1010c63:	push   rbx
 1010c64:	rex.WB push r11
 1010c66:	rex.RXB
 1010c67:	gs je  0x1010caf
 1010c6a:	js     0x1010ce0
 1010c6c:	jb     0x1010ccf
 1010c6e:	rex.R jne 0x1010cde
 1010c71:	jo     0x1010cb9
 1010c73:	imul   ebp,DWORD PTR [rbp+riz*2+0x48],0x6c646e61
 1010c7b:	gs
	...
