
e614bb23131efe77b8ef6cfe08a28ceec7a9adccc03d183b7a287ac6c822de1f.exe:     file format pei-x86-64


Disassembly of section .text:

0000000001001000 <.text>:
 1001000:	push   rsi
 1001001:	(bad)  
 1001002:	add    al,BYTE PTR [rax]
 1001004:	add    BYTE PTR [rax],al
 1001006:	add    BYTE PTR [rax],al
 1001008:	rex.RX (bad) 
 100100a:	add    al,BYTE PTR [rax]
 100100c:	add    BYTE PTR [rax],al
 100100e:	add    BYTE PTR [rax],al
 1001010:	cmp    BYTE PTR [rdi],ch
 1001012:	add    al,BYTE PTR [rax]
 1001014:	add    BYTE PTR [rax],al
 1001016:	add    BYTE PTR [rax],al
 1001018:	sub    BYTE PTR [rdi],ch
 100101a:	add    al,BYTE PTR [rax]
 100101c:	add    BYTE PTR [rax],al
 100101e:	add    BYTE PTR [rax],al
 1001020:	adc    BYTE PTR [rdi],ch
 1001022:	add    al,BYTE PTR [rax]
 1001024:	add    BYTE PTR [rax],al
 1001026:	add    BYTE PTR [rax],al
 1001028:	clc    
 1001029:	add    al,BYTE PTR cs:[rax]
 100102c:	add    BYTE PTR [rax],al
 100102e:	add    BYTE PTR [rax],al
 1001030:	jp     0x1001064
 1001032:	add    al,BYTE PTR [rax]
	...
 1001040:	add    BYTE PTR [rax],al
 1001043:	add    BYTE PTR [rax],al
 1001045:	add    BYTE PTR [rax],al
 1001047:	cmp    BYTE PTR [rdx],0x0
 100104a:	add    BYTE PTR [rax],al
 100104c:	add    BYTE PTR [rax],al
 100104e:	add    BYTE PTR [rax+0x38],al
 1001054:	add    BYTE PTR [rax],al
 1001056:	add    BYTE PTR [rax+0x44],al
 100105c:	add    BYTE PTR [rax],al
 100105e:	add    BYTE PTR [rax+0x17],al
 1001064:	add    BYTE PTR [rax],al
 1001066:	add    BYTE PTR [rax+0x31],al
 100106c:	add    BYTE PTR [rax],al
 100106e:	add    BYTE PTR [rax+0x14],al
 1001074:	add    BYTE PTR [rax],al
 1001076:	add    BYTE PTR [rax+0x11],al
 100107c:	add    BYTE PTR [rax],al
 100107e:	add    BYTE PTR [rax+0x20],al
 1001084:	add    BYTE PTR [rax],al
 1001086:	add    BYTE PTR [rax+0x1f],al
 100108c:	add    BYTE PTR [rax],al
 100108e:	add    BYTE PTR [rax+0x1e],al
 1001094:	add    BYTE PTR [rax],al
 1001096:	add    BYTE PTR [rax+0x3d],al
 100109c:	add    BYTE PTR [rax],al
 100109e:	add    BYTE PTR [rax+0x0],al
 10010a4:	add    BYTE PTR [rax],al
 10010a6:	add    BYTE PTR [rax],al
 10010a8:	or     dh,BYTE PTR [rdx+rax*1]
 10010ab:	add    BYTE PTR [rax],al
 10010ad:	add    BYTE PTR [rax],al
 10010af:	add    dh,dh
 10010b1:	xor    eax,DWORD PTR [rdx]
 10010b3:	add    BYTE PTR [rax],al
 10010b5:	add    BYTE PTR [rax],al
 10010b7:	add    al,ch
 10010b9:	xor    eax,DWORD PTR [rdx]
 10010bb:	add    BYTE PTR [rax],al
 10010bd:	add    BYTE PTR [rax],al
 10010bf:	add    dl,bl
 10010c1:	xor    eax,DWORD PTR [rdx]
 10010c3:	add    BYTE PTR [rax],al
 10010c5:	add    BYTE PTR [rax],al
 10010c7:	add    BYTE PTR [rax+0x33],ch
 10010ca:	add    al,BYTE PTR [rax]
 10010cc:	add    BYTE PTR [rax],al
 10010ce:	add    BYTE PTR [rax],al
 10010d0:	xor    r8,QWORD PTR [rdx]
 10010d3:	add    BYTE PTR [rax],al
 10010d5:	add    BYTE PTR [rax],al
 10010d7:	add    BYTE PTR [rax],dh
 10010d9:	xor    eax,DWORD PTR [rdx]
 10010db:	add    BYTE PTR [rax],al
 10010dd:	add    BYTE PTR [rax],al
 10010df:	add    BYTE PTR [rdx],ah
 10010e1:	xor    eax,DWORD PTR [rdx]
 10010e3:	add    BYTE PTR [rax],al
 10010e5:	add    BYTE PTR [rax],al
 10010e7:	add    BYTE PTR [rdx],dl
 10010e9:	xor    eax,DWORD PTR [rdx]
 10010eb:	add    BYTE PTR [rax],al
 10010ed:	add    BYTE PTR [rax],al
 10010ef:	add    BYTE PTR [rax],al
 10010f1:	xor    eax,DWORD PTR [rdx]
 10010f3:	add    BYTE PTR [rax],al
 10010f5:	add    BYTE PTR [rax],al
 10010f7:	add    dl,dh
 10010f9:	xor    al,BYTE PTR [rdx]
 10010fb:	add    BYTE PTR [rax],al
 10010fd:	add    BYTE PTR [rax],al
 10010ff:	add    dh,ah
 1001101:	xor    al,BYTE PTR [rdx]
 1001103:	add    BYTE PTR [rax],al
 1001105:	add    BYTE PTR [rax],al
 1001107:	add    dl,bl
 1001109:	xor    al,BYTE PTR [rdx]
 100110b:	add    BYTE PTR [rax],al
 100110d:	add    BYTE PTR [rax],al
 100110f:	add    al,cl
 1001111:	xor    al,BYTE PTR [rdx]
 1001113:	add    BYTE PTR [rax],al
 1001115:	add    BYTE PTR [rax],al
 1001117:	add    BYTE PTR [rsi+0x22b],bl
 100111d:	add    BYTE PTR [rax],al
 100111f:	add    BYTE PTR [rdx],bl
 1001121:	xor    al,0x2
 1001123:	add    BYTE PTR [rax],al
 1001125:	add    BYTE PTR [rax],al
 1001127:	add    BYTE PTR [rax+0x232],cl
 100112d:	add    BYTE PTR [rax],al
 100112f:	add    BYTE PTR [rax+0x22b],al
 1001135:	add    BYTE PTR [rax],al
 1001137:	add    BYTE PTR [rdx+0x2b],ch
 100113a:	add    al,BYTE PTR [rax]
 100113c:	add    BYTE PTR [rax],al
 100113e:	add    BYTE PTR [rax],al
 1001140:	pop    rdx
 1001141:	sub    eax,DWORD PTR [rdx]
 1001143:	add    BYTE PTR [rax],al
 1001145:	add    BYTE PTR [rax],al
 1001147:	add    BYTE PTR [rdx+0x2b],al
 100114a:	add    al,BYTE PTR [rax]
 100114c:	add    BYTE PTR [rax],al
 100114e:	add    BYTE PTR [rax],al
 1001150:	and    al,0x2b
 1001152:	add    al,BYTE PTR [rax]
 1001154:	add    BYTE PTR [rax],al
 1001156:	add    BYTE PTR [rax],al
 1001158:	(bad)  
 1001159:	sub    eax,DWORD PTR [rdx]
 100115b:	add    BYTE PTR [rax],al
 100115d:	add    BYTE PTR [rax],al
 100115f:	add    al,dh
 1001161:	sub    al,BYTE PTR [rdx]
 1001163:	add    BYTE PTR [rax],al
 1001165:	add    BYTE PTR [rax],al
 1001167:	add    dh,bl
 1001169:	sub    al,BYTE PTR [rdx]
 100116b:	add    BYTE PTR [rax],al
 100116d:	add    BYTE PTR [rax],al
 100116f:	add    dl,cl
 1001171:	sub    al,BYTE PTR [rdx]
 1001173:	add    BYTE PTR [rax],al
 1001175:	add    BYTE PTR [rax],al
 1001177:	add    BYTE PTR [rsi+0x22a],dh
 100117d:	add    BYTE PTR [rax],al
 100117f:	add    BYTE PTR [rax+0x22a],ah
 1001185:	add    BYTE PTR [rax],al
 1001187:	add    BYTE PTR [rdx+0x22a],cl
 100118d:	add    BYTE PTR [rax],al
 100118f:	add    BYTE PTR [rdx+0x2a],bh
 1001192:	add    al,BYTE PTR [rax]
 1001194:	add    BYTE PTR [rax],al
 1001196:	add    BYTE PTR [rax],al
 1001198:	ins    BYTE PTR es:[rdi],dx
 1001199:	sub    al,BYTE PTR [rdx]
 100119b:	add    BYTE PTR [rax],al
 100119d:	add    BYTE PTR [rax],al
 100119f:	add    BYTE PTR [rax+0x2a],ah
 10011a2:	add    al,BYTE PTR [rax]
 10011a4:	add    BYTE PTR [rax],al
 10011a6:	add    BYTE PTR [rax],al
 10011a8:	xor    dh,BYTE PTR [rdx+rax*1]
 10011ab:	add    BYTE PTR [rax],al
 10011ad:	add    BYTE PTR [rax],al
 10011af:	add    BYTE PTR [rdx+0x34],al
 10011b2:	add    al,BYTE PTR [rax]
 10011b4:	add    BYTE PTR [rax],al
 10011b6:	add    BYTE PTR [rax],al
 10011b8:	pop    rax
 10011b9:	xor    al,0x2
 10011bb:	add    BYTE PTR [rax],al
 10011bd:	add    BYTE PTR [rax],al
 10011bf:	add    BYTE PTR [rdx+0x34],ch
 10011c2:	add    al,BYTE PTR [rax]
 10011c4:	add    BYTE PTR [rax],al
 10011c6:	add    BYTE PTR [rax],al
 10011c8:	jl     0x10011fe
 10011ca:	add    al,BYTE PTR [rax]
 10011cc:	add    BYTE PTR [rax],al
 10011ce:	add    BYTE PTR [rax],al
 10011d0:	nop
 10011d1:	xor    al,0x2
 10011d3:	add    BYTE PTR [rax],al
 10011d5:	add    BYTE PTR [rax],al
 10011d7:	add    BYTE PTR [rsp+rsi*1+0x2],ah
 10011de:	add    BYTE PTR [rax],al
 10011e0:	loop   0x100120d
 10011e2:	add    al,BYTE PTR [rax]
 10011e4:	add    BYTE PTR [rax],al
 10011e6:	add    BYTE PTR [rax],al
 10011e8:	(bad)  
 10011e9:	sub    eax,DWORD PTR [rdx]
 10011eb:	add    BYTE PTR [rax],al
 10011ed:	add    BYTE PTR [rax],al
 10011ef:	add    BYTE PTR [rbx+rbp*1+0x2],bh
 10011f6:	add    BYTE PTR [rax],al
 10011f8:	xchg   esp,eax
 10011f9:	xor    al,BYTE PTR [rdx]
 10011fb:	add    BYTE PTR [rax],al
 10011fd:	add    BYTE PTR [rax],al
 10011ff:	add    BYTE PTR [rsi+0x22b],ch
 1001205:	add    BYTE PTR [rax],al
 1001207:	add    BYTE PTR [rax+0x2a],dl
 100120a:	add    al,BYTE PTR [rax]
 100120c:	add    BYTE PTR [rax],al
 100120e:	add    BYTE PTR [rax],al
 1001210:	sub    al,BYTE PTR ss:[rdx]
 1001213:	add    BYTE PTR [rax],al
 1001215:	add    BYTE PTR [rax],al
 1001217:	add    BYTE PTR [rax],ah
 1001219:	sub    al,BYTE PTR [rdx]
 100121b:	add    BYTE PTR [rax],al
 100121d:	add    BYTE PTR [rax],al
 100121f:	add    BYTE PTR [rdx],dl
 1001221:	sub    al,BYTE PTR [rdx]
 1001223:	add    BYTE PTR [rax],al
 1001225:	add    BYTE PTR [rax],al
 1001227:	add    BYTE PTR [rsi],al
 1001229:	sub    al,BYTE PTR [rdx]
 100122b:	add    BYTE PTR [rax],al
 100122d:	add    BYTE PTR [rax],al
 100122f:	add    BYTE PTR [rax],bh
 1001231:	xor    DWORD PTR [rdx],eax
 1001233:	add    BYTE PTR [rax],al
 1001235:	add    BYTE PTR [rax],al
 1001237:	add    BYTE PTR [rax],ch
 1001239:	xor    DWORD PTR [rdx],eax
 100123b:	add    BYTE PTR [rax],al
 100123d:	add    BYTE PTR [rax],al
 100123f:	add    BYTE PTR [rcx+rsi*1],cl
 1001242:	add    al,BYTE PTR [rax]
 1001244:	add    BYTE PTR [rax],al
 1001246:	add    BYTE PTR [rax],al
 1001248:	out    dx,al
 1001249:	sub    DWORD PTR [rdx],eax
 100124b:	add    BYTE PTR [rax],al
 100124d:	add    BYTE PTR [rax],al
 100124f:	add    dh,al
 1001251:	sub    DWORD PTR [rdx],eax
 1001253:	add    BYTE PTR [rax],al
 1001255:	add    BYTE PTR [rax],al
 1001257:	add    BYTE PTR [rsi+0x229],ch
 100125d:	add    BYTE PTR [rax],al
 100125f:	add    BYTE PTR [rsi+0x229],dl
 1001265:	add    BYTE PTR [rax],al
 1001267:	add    BYTE PTR [rdx+0x29],bh
 100126a:	add    al,BYTE PTR [rax]
 100126c:	add    BYTE PTR [rax],al
 100126e:	add    BYTE PTR [rax],al
 1001270:	push   0x29
 1001272:	add    al,BYTE PTR [rax]
 1001274:	add    BYTE PTR [rax],al
 1001276:	add    BYTE PTR [rax],al
 1001278:	push   rsp
 1001279:	sub    DWORD PTR [rdx],eax
 100127b:	add    BYTE PTR [rax],al
 100127d:	add    BYTE PTR [rax],al
 100127f:	add    BYTE PTR [rdx+0x29],al
 1001282:	add    al,BYTE PTR [rax]
 1001284:	add    BYTE PTR [rax],al
 1001286:	add    BYTE PTR [rax],al
 1001288:	scas   al,BYTE PTR es:[rdi]
 1001289:	xor    al,BYTE PTR [rdx]
 100128b:	add    BYTE PTR [rax],al
 100128d:	add    BYTE PTR [rax],al
 100128f:	add    BYTE PTR [rax],dh
 1001291:	sub    DWORD PTR [rdx],eax
 1001293:	add    BYTE PTR [rax],al
 1001295:	add    BYTE PTR [rax],al
 1001297:	add    BYTE PTR [rax+0x2f],bh
 100129a:	add    al,BYTE PTR [rax]
 100129c:	add    BYTE PTR [rax],al
 100129e:	add    BYTE PTR [rax],al
 10012a0:	sub    BYTE PTR [rdi],0x2
 10012a3:	add    BYTE PTR [rax],al
 10012a5:	add    BYTE PTR [rax],al
 10012a7:	add    BYTE PTR [rax+0x22f],dl
 10012ad:	add    BYTE PTR [rax],al
 10012af:	add    BYTE PTR [rax+0x22f],ah
 10012b5:	add    BYTE PTR [rax],al
 10012b7:	add    BYTE PTR [rdi+rbp*1+0x2],bh
 10012be:	add    BYTE PTR [rax],al
 10012c0:	shr    BYTE PTR [rdi],1
 10012c2:	add    al,BYTE PTR [rax]
 10012c4:	add    BYTE PTR [rax],al
 10012c6:	add    BYTE PTR [rax],al
 10012c8:	in     al,0x2f
 10012ca:	add    al,BYTE PTR [rax]
 10012cc:	add    BYTE PTR [rax],al
 10012ce:	add    BYTE PTR [rax],al
 10012d0:	(bad)  
 10012d1:	(bad)  
 10012d2:	add    al,BYTE PTR [rax]
 10012d4:	add    BYTE PTR [rax],al
 10012d6:	add    BYTE PTR [rax],al
 10012d8:	adc    dh,BYTE PTR [rax]
 10012da:	add    al,BYTE PTR [rax]
 10012dc:	add    BYTE PTR [rax],al
 10012de:	add    BYTE PTR [rax],al
 10012e0:	sub    al,0x30
 10012e2:	add    al,BYTE PTR [rax]
 10012e4:	add    BYTE PTR [rax],al
 10012e6:	add    BYTE PTR [rax],al
 10012e8:	cmp    al,0x30
 10012ea:	add    al,BYTE PTR [rax]
 10012ec:	add    BYTE PTR [rax],al
 10012ee:	add    BYTE PTR [rax],al
 10012f0:	push   rdx
 10012f1:	xor    BYTE PTR [rdx],al
 10012f3:	add    BYTE PTR [rax],al
 10012f5:	add    BYTE PTR [rax],al
 10012f7:	add    BYTE PTR [rax+rsi*1+0x2],ch
 10012fb:	add    BYTE PTR [rax],al
 10012fd:	add    BYTE PTR [rax],al
 10012ff:	add    BYTE PTR [rdx+0x30],bh
 1001302:	add    al,BYTE PTR [rax]
 1001304:	add    BYTE PTR [rax],al
 1001306:	add    BYTE PTR [rax],al
 1001308:	mov    WORD PTR [rax],?
 100130a:	add    al,BYTE PTR [rax]
 100130c:	add    BYTE PTR [rax],al
 100130e:	add    BYTE PTR [rax],al
 1001310:	sahf   
 1001311:	xor    BYTE PTR [rdx],al
 1001313:	add    BYTE PTR [rax],al
 1001315:	add    BYTE PTR [rax],al
 1001317:	add    BYTE PTR [rsi+0x230],ch
 100131d:	add    BYTE PTR [rax],al
 100131f:	add    BYTE PTR [rsi+0x230],bh
 1001325:	add    BYTE PTR [rax],al
 1001327:	add    al,bl
 1001329:	xor    BYTE PTR [rdx],al
 100132b:	add    BYTE PTR [rax],al
 100132d:	add    BYTE PTR [rax],al
 100132f:	add    al,dh
 1001331:	xor    BYTE PTR [rdx],al
 1001333:	add    BYTE PTR [rax],al
 1001335:	add    BYTE PTR [rax],al
 1001337:	add    BYTE PTR [rax],al
 1001339:	xor    DWORD PTR [rdx],eax
	...
 1001347:	add    BYTE PTR [rsp+rbp*1],dl
 100134a:	add    al,BYTE PTR [rax]
 100134c:	add    BYTE PTR [rax],al
 100134e:	add    BYTE PTR [rax],al
 1001350:	adc    BYTE PTR [rip+0x2],ch        # 0x1001358
 1001356:	add    BYTE PTR [rax],al
 1001358:	(bad)  
 1001359:	sub    eax,0x2
 100135e:	add    BYTE PTR [rax],al
 1001360:	cs sub eax,0x2
 1001366:	add    BYTE PTR [rax],al
 1001368:	cmp    al,0x2d
 100136a:	add    al,BYTE PTR [rax]
 100136c:	add    BYTE PTR [rax],al
 100136e:	add    BYTE PTR [rax],al
 1001370:	rex.R sub eax,0x2
 1001376:	add    BYTE PTR [rax],al
 1001378:	rex.WRX sub rax,0x2
 100137e:	add    BYTE PTR [rax],al
 1001380:	push   rsi
 1001381:	sub    eax,0x2
 1001386:	add    BYTE PTR [rax],al
 1001388:	and    BYTE PTR [rdx+rax*1],ch
 100138b:	add    BYTE PTR [rax],al
 100138d:	add    BYTE PTR [rax],al
 100138f:	add    BYTE PTR [rdx],dh
 1001391:	sub    al,0x2
 1001393:	add    BYTE PTR [rax],al
 1001395:	add    BYTE PTR [rax],al
 1001397:	add    BYTE PTR [rax+0x31],cl
 100139a:	add    al,BYTE PTR [rax]
 100139c:	add    BYTE PTR [rax],al
 100139e:	add    BYTE PTR [rax],al
 10013a0:	pop    rax
 10013a1:	xor    DWORD PTR [rdx],eax
 10013a3:	add    BYTE PTR [rax],al
 10013a5:	add    BYTE PTR [rax],al
 10013a7:	add    BYTE PTR [rdx+0x31],ah
 10013aa:	add    al,BYTE PTR [rax]
 10013ac:	add    BYTE PTR [rax],al
 10013ae:	add    BYTE PTR [rax],al
 10013b0:	outs   dx,BYTE PTR ds:[rsi]
 10013b1:	xor    DWORD PTR [rdx],eax
 10013b3:	add    BYTE PTR [rax],al
 10013b5:	add    BYTE PTR [rax],al
 10013b7:	add    BYTE PTR [rdx+0x31],bh
 10013ba:	add    al,BYTE PTR [rax]
 10013bc:	add    BYTE PTR [rax],al
 10013be:	add    BYTE PTR [rax],al
 10013c0:	mov    dh,BYTE PTR [rcx]
 10013c2:	add    al,BYTE PTR [rax]
 10013c4:	add    BYTE PTR [rax],al
 10013c6:	add    BYTE PTR [rax],al
 10013c8:	xchg   esi,eax
 10013c9:	xor    DWORD PTR [rdx],eax
 10013cb:	add    BYTE PTR [rax],al
 10013cd:	add    BYTE PTR [rax],al
 10013cf:	add    BYTE PTR [rdx+0x231],ah
 10013d5:	add    BYTE PTR [rax],al
 10013d7:	add    BYTE PTR [rcx+rsi*1+0x2],ch
 10013de:	add    BYTE PTR [rax],al
 10013e0:	mov    eax,0x231
 10013e5:	add    BYTE PTR [rax],al
 10013e7:	add    ah,al
 10013e9:	xor    DWORD PTR [rdx],eax
 10013eb:	add    BYTE PTR [rax],al
 10013ed:	add    BYTE PTR [rax],al
 10013ef:	add    dl,dl
 10013f1:	xor    DWORD PTR [rdx],eax
 10013f3:	add    BYTE PTR [rax],al
 10013f5:	add    BYTE PTR [rax],al
 10013f7:	add    dh,bl
 10013f9:	xor    DWORD PTR [rdx],eax
 10013fb:	add    BYTE PTR [rax],al
 10013fd:	add    BYTE PTR [rax],al
 10013ff:	add    dl,ch
 1001401:	xor    DWORD PTR [rdx],eax
 1001403:	add    BYTE PTR [rax],al
 1001405:	add    BYTE PTR [rax],al
 1001407:	add    BYTE PTR [rsp+rbp*1],al
 100140a:	add    al,BYTE PTR [rax]
 100140c:	add    BYTE PTR [rax],al
 100140e:	add    BYTE PTR [rax],al
 1001410:	add    BYTE PTR [rdx],dh
 1001412:	add    al,BYTE PTR [rax]
 1001414:	add    BYTE PTR [rax],al
 1001416:	add    BYTE PTR [rax],al
 1001418:	(bad)  
 1001419:	xor    al,BYTE PTR [rdx]
 100141b:	add    BYTE PTR [rax],al
 100141d:	add    BYTE PTR [rax],al
 100141f:	add    BYTE PTR [rax],ah
 1001421:	xor    al,BYTE PTR [rdx]
 1001423:	add    BYTE PTR [rax],al
 1001425:	add    BYTE PTR [rax],al
 1001427:	add    BYTE PTR [rsi],bh
 1001429:	sub    al,0x2
 100142b:	add    BYTE PTR [rax],al
 100142d:	add    BYTE PTR [rax],al
 100142f:	add    BYTE PTR [rdx+0x2c],cl
 1001432:	add    al,BYTE PTR [rax]
 1001434:	add    BYTE PTR [rax],al
 1001436:	add    BYTE PTR [rax],al
 1001438:	push   rdx
 1001439:	sub    al,0x2
 100143b:	add    BYTE PTR [rax],al
 100143d:	add    BYTE PTR [rax],al
 100143f:	add    BYTE PTR [rsp+rbp*1+0x2],bl
 1001443:	add    BYTE PTR [rax],al
 1001445:	add    BYTE PTR [rax],al
 1001447:	add    BYTE PTR [rdx+0x2c],ch
 100144a:	add    al,BYTE PTR [rax]
 100144c:	add    BYTE PTR [rax],al
 100144e:	add    BYTE PTR [rax],al
 1001450:	jp     0x100147e
 1001452:	add    al,BYTE PTR [rax]
 1001454:	add    BYTE PTR [rax],al
 1001456:	add    BYTE PTR [rax],al
 1001458:	(bad)  
 1001459:	sub    eax,0x2
 100145e:	add    BYTE PTR [rax],al
 1001460:	outs   dx,BYTE PTR ds:[rsi]
 1001461:	sub    eax,0x2
 1001466:	add    BYTE PTR [rax],al
 1001468:	jl     0x1001497
 100146a:	add    al,BYTE PTR [rax]
 100146c:	add    BYTE PTR [rax],al
 100146e:	add    BYTE PTR [rax],al
 1001470:	xchg   edx,eax
 1001471:	sub    eax,0x2
 1001476:	add    BYTE PTR [rax],al
 1001478:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1001479:	sub    eax,0x2
 100147e:	add    BYTE PTR [rax],al
 1001480:	mov    dl,0x2d
 1001482:	add    al,BYTE PTR [rax]
 1001484:	add    BYTE PTR [rax],al
 1001486:	add    BYTE PTR [rax],al
 1001488:	mov    esp,0x22d
 100148d:	add    BYTE PTR [rax],al
 100148f:	add    ah,bl
 1001491:	sub    eax,0x2
 1001496:	add    BYTE PTR [rax],al
 1001498:	out    0x2d,al
 100149a:	add    al,BYTE PTR [rax]
 100149c:	add    BYTE PTR [rax],al
 100149e:	add    BYTE PTR [rax],al
 10014a0:	hlt    
 10014a1:	sub    eax,0x2
 10014a6:	add    BYTE PTR [rax],al
 10014a8:	cld    
 10014a9:	sub    eax,0x2
 10014ae:	add    BYTE PTR [rax],al
 10014b0:	(bad)  
 10014b1:	add    al,BYTE PTR cs:[rax]
 10014b4:	add    BYTE PTR [rax],al
 10014b6:	add    BYTE PTR [rax],al
 10014b8:	sbb    al,0x2e
 10014ba:	add    al,BYTE PTR [rax]
 10014bc:	add    BYTE PTR [rax],al
 10014be:	add    BYTE PTR [rax],al
 10014c0:	mov    WORD PTR [rdx+rax*1],gs
 10014c3:	add    BYTE PTR [rax],al
 10014c5:	add    BYTE PTR [rax],al
 10014c7:	add    BYTE PTR [rsi+0x22c],bl
 10014cd:	add    BYTE PTR [rax],al
 10014cf:	add    BYTE PTR [rax+0x22c],ch
 10014d5:	add    BYTE PTR [rax],al
 10014d7:	add    BYTE PTR [rax+0x234],bh
 10014dd:	add    BYTE PTR [rax],al
 10014df:	add    dh,dh
 10014e1:	xor    DWORD PTR [rdx],eax
 10014e3:	add    BYTE PTR [rax],al
 10014e5:	add    BYTE PTR [rax],al
 10014e7:	add    al,cl
 10014e9:	xor    al,0x2
 10014eb:	add    BYTE PTR [rax],al
 10014ed:	add    BYTE PTR [rax],al
 10014ef:	add    al,bh
 10014f1:	sub    al,0x2
 10014f3:	add    BYTE PTR [rax],al
 10014f5:	add    BYTE PTR [rax],al
 10014f7:	add    dl,ch
 10014f9:	sub    al,0x2
 10014fb:	add    BYTE PTR [rax],al
 10014fd:	add    BYTE PTR [rax],al
 10014ff:	add    al,ah
 1001501:	sub    al,0x2
 1001503:	add    BYTE PTR [rax],al
 1001505:	add    BYTE PTR [rax],al
 1001507:	add    BYTE PTR [rbx+rsi*1+0x2],ah
 100150e:	add    BYTE PTR [rax],al
 1001510:	xchg   esp,eax
 1001511:	xor    eax,DWORD PTR [rdx]
 1001513:	add    BYTE PTR [rax],al
 1001515:	add    BYTE PTR [rax],al
 1001517:	add    BYTE PTR [rsi+0x33],bh
 100151a:	add    al,BYTE PTR [rax]
 100151c:	add    BYTE PTR [rax],al
 100151e:	add    BYTE PTR [rax],al
 1001520:	mov    dl,0x2c
 1001522:	add    al,BYTE PTR [rax]
 1001524:	add    BYTE PTR [rax],al
 1001526:	add    BYTE PTR [rax],al
 1001528:	mov    esp,0x22c
 100152d:	add    BYTE PTR [rax],al
 100152f:	add    al,cl
 1001531:	sub    al,0x2
 1001533:	add    BYTE PTR [rax],al
 1001535:	add    BYTE PTR [rax],al
 1001537:	add    BYTE PTR [rsi],al
 1001539:	sub    eax,0x2
	...
 1001546:	add    BYTE PTR [rax],al
 1001548:	mov    edx,0x0
 100154d:	add    BYTE PTR [rax],al
 100154f:	and    BYTE PTR [rbx+0x0],0x0
 1001556:	add    BYTE PTR [rax+0xa2],al
 100155c:	add    BYTE PTR [rax],al
 100155e:	add    BYTE PTR [rax+0xa1],al
 1001564:	add    BYTE PTR [rax],al
 1001566:	add    BYTE PTR [rax+0x7],al
 100156c:	add    BYTE PTR [rax],al
 100156e:	add    BYTE PTR [rax+0x6],al
 1001574:	add    BYTE PTR [rax],al
 1001576:	add    BYTE PTR [rax+0x2],al
 100157c:	add    BYTE PTR [rax],al
 100157e:	add    BYTE PTR [rax+0x95],al
 1001584:	add    BYTE PTR [rax],al
 1001586:	add    BYTE PTR [rax+0xc],al
 100158c:	add    BYTE PTR [rax],al
 100158e:	add    BYTE PTR [rax+0x9],al
 1001594:	add    BYTE PTR [rax],al
 1001596:	add    BYTE PTR [rax+0x8],al
 100159c:	add    BYTE PTR [rax],al
 100159e:	add    BYTE PTR [rax+0x0],al
 10015a4:	add    BYTE PTR [rax],al
 10015a6:	add    BYTE PTR [rax],al
 10015a8:	fisubr WORD PTR [rsi]
 10015aa:	add    al,BYTE PTR [rax]
 10015ac:	add    BYTE PTR [rax],al
 10015ae:	add    BYTE PTR [rax],al
 10015b0:	shr    BYTE PTR [rsi],cl
 10015b2:	add    al,BYTE PTR [rax]
 10015b4:	add    BYTE PTR [rax],al
 10015b6:	add    BYTE PTR [rax],al
 10015b8:	ins    BYTE PTR es:[rdi],dx
 10015b9:	xor    al,BYTE PTR [rdx]
	...
 10015c7:	add    BYTE PTR [rax],dh
 10015c9:	xor    al,BYTE PTR [rdx]
 10015cb:	add    BYTE PTR [rax],al
 10015cd:	add    BYTE PTR [rax],al
 10015cf:	add    BYTE PTR [rsi],bh
 10015d1:	xor    al,BYTE PTR [rdx]
	...
 10015df:	add    BYTE PTR [rsi+0x22e],cl
 10015e5:	add    BYTE PTR [rax],al
 10015e7:	add    BYTE PTR [rsi+0x22e],ah
 10015ed:	add    BYTE PTR [rax],al
 10015ef:	add    BYTE PTR [rax+0x2e],bh
 10015f2:	add    al,BYTE PTR [rax]
 10015f4:	add    BYTE PTR [rax],al
 10015f6:	add    BYTE PTR [rax],al
 10015f8:	(bad)  
 10015f9:	add    al,BYTE PTR cs:[rax]
 10015fc:	add    BYTE PTR [rax],al
 10015fe:	add    BYTE PTR [rax],al
 1001600:	rex.WRX
 1001601:	add    al,BYTE PTR cs:[rax]
 1001604:	add    BYTE PTR [rax],al
 1001606:	add    BYTE PTR [rax],al
 1001608:	cmp    al,0x2e
 100160a:	add    al,BYTE PTR [rax]
	...
 1001620:	in     al,dx
 1001621:	mov    ecx,0x100
 1001626:	add    BYTE PTR [rax],al
 1001628:	pushf  
 1001629:	fld    QWORD PTR [rcx]
 100162b:	add    DWORD PTR [rax],eax
 100162d:	add    BYTE PTR [rax],al
 100162f:	add    al,cl
 1001631:	fld    QWORD PTR [rcx]
 1001633:	add    DWORD PTR [rax],eax
 1001635:	add    BYTE PTR [rax],al
 1001637:	add    BYTE PTR [rax],dh
 1001639:	fadd   QWORD PTR [rcx]
 100163b:	add    DWORD PTR [rax],eax
 100163d:	add    BYTE PTR [rax],al
 100163f:	add    BYTE PTR [rax-0x24],dl
 1001642:	add    DWORD PTR [rcx],eax
 1001644:	add    BYTE PTR [rax],al
 1001646:	add    BYTE PTR [rax],al
 1001648:	adc    ch,bl
 100164a:	add    DWORD PTR [rcx],eax
 100164c:	add    BYTE PTR [rax],al
 100164e:	add    BYTE PTR [rax],al
 1001650:	rex fld QWORD PTR [rcx]
 1001653:	add    DWORD PTR [rax],eax
 1001655:	add    BYTE PTR [rax],al
 1001657:	add    BYTE PTR [rax],al
 1001659:	fiadd  WORD PTR [rcx]
 100165b:	add    DWORD PTR [rax],eax
 100165d:	add    BYTE PTR [rax],al
 100165f:	add    BYTE PTR [rax],dh
 1001661:	fiadd  WORD PTR [rcx]
 1001663:	add    DWORD PTR [rax],eax
 1001665:	add    BYTE PTR [rax],al
 1001667:	add    BYTE PTR [rax-0x22],ah
 100166a:	add    DWORD PTR [rcx],eax
 100166c:	add    BYTE PTR [rax],al
 100166e:	add    BYTE PTR [rax],al
 1001670:	nop
 1001671:	fiadd  WORD PTR [rcx]
 1001673:	add    DWORD PTR [rax],eax
 1001675:	add    BYTE PTR [rax],al
 1001677:	add    BYTE PTR [rax+0x101de],dh
 100167d:	add    BYTE PTR [rax],al
 100167f:	add    al,ah
 1001681:	fiadd  WORD PTR [rcx]
 1001683:	add    DWORD PTR [rax],eax
	...
 1001695:	add    BYTE PTR [rax],al
 1001697:	add    al,ah
 1001699:	mov    ebx,0x100
 100169e:	add    BYTE PTR [rax],al
 10016a0:	rol    DWORD PTR fs:[rax],0x1
	...
 10016b4:	(bad)  
 10016b5:	repnz xor eax,0x4f
 10016bb:	add    BYTE PTR [rdx],al
 10016bd:	add    BYTE PTR [rax],al
 10016bf:	add    BYTE PTR [rax+rax*1],ah
 10016c2:	add    BYTE PTR [rax],al
 10016c4:	rex.WR jb 0x10016c7
 10016c7:	add    BYTE PTR [rsi+riz*2+0x0],cl
	...
 10016d7:	add    al,al
 10016d9:	add    BYTE PTR [rax],al
 10016db:	add    BYTE PTR [rax],al
 10016dd:	add    BYTE PTR [rax],al
 10016df:	rex.RX
 10016e0:	rex.WRXB add BYTE PTR [r8+r8*1+0x45],r9b
 10016e5:	add    BYTE PTR [rcx+0x0],al
 10016e8:	push   rbp
 10016e9:	add    BYTE PTR [rax+rax*1+0x33],dl
 10016ed:	add    BYTE PTR [rdx],dh
 10016ef:	add    BYTE PTR [rsi],ch
 10016f1:	add    BYTE PTR [rax+rax*1+0x4c],al
 10016f5:	add    BYTE PTR [rax+rax*1+0x0],cl
 10016f9:	add    BYTE PTR [rax],al
 10016fb:	add    BYTE PTR [rax],al
 10016fd:	add    BYTE PTR [rax],al
 10016ff:	add    BYTE PTR [rbp+0x6e],dl
 1001702:	push   rdx
 1001703:	imul   esi,DWORD PTR gs:[ebx+0x74],0x79547265
 100170c:	jo     0x1001773
 100170e:	imul   r12,QWORD PTR [rdx+0x46],0x7355726f
 1001716:	gs jb  0x1001719
 1001719:	add    BYTE PTR [rax],al
 100171b:	add    BYTE PTR [rax],al
 100171d:	add    BYTE PTR [rax],al
 100171f:	add    BYTE PTR [rdx+0x65],dl
 1001722:	imul   esi,DWORD PTR [ebx+0x74],0x79547265
 100172a:	jo     0x1001791
 100172c:	imul   r12,QWORD PTR [rdx+0x46],0x7355726f
 1001734:	gs jb  0x1001737
 1001737:	add    al,bl
 1001739:	mov    esp,0x100
 100173e:	add    BYTE PTR [rax],al
 1001740:	fdivr  DWORD PTR [rax+rax*1+0x1]
 1001747:	add    al,bl
 1001749:	mov    esp,0x100
 100174e:	add    BYTE PTR [rax],al
 1001750:	nop
 1001751:	jle    0x1001753
 1001753:	add    DWORD PTR [rax],eax
 1001755:	add    BYTE PTR [rax],al
 1001757:	add    al,dh
 1001759:	jle    0x100175b
 100175b:	add    DWORD PTR [rax],eax
 100175d:	add    BYTE PTR [rax],al
 100175f:	add    BYTE PTR [rax],ah
 1001761:	jg     0x1001763
 1001763:	add    DWORD PTR [rax],eax
 1001765:	add    BYTE PTR [rax],al
 1001767:	add    BYTE PTR [rax+0x10017],bl
	...
 1001775:	add    BYTE PTR [rax],al
 1001777:	add    BYTE PTR [rcx],al
	...
 1001795:	add    BYTE PTR [rax],al
 1001797:	add    BYTE PTR [rcx],al
 1001799:	add    BYTE PTR [rax],al
 100179b:	add    BYTE PTR [rax],al
 100179d:	add    BYTE PTR [rax],al
 100179f:	add    al,al
 10017a1:	add    BYTE PTR [rax],al
 10017a3:	add    BYTE PTR [rax],al
 10017a5:	add    BYTE PTR [rax],al
 10017a7:	rex.RX xchg DWORD PTR [rdx-0x454b4e6a],r14d
 10017ae:	sbb    dl,BYTE PTR [rax]
 10017b0:	mov    dh,0x9c
 10017b2:	add    BYTE PTR [rdx+0x71d3400],ch
 10017b8:	test   DWORD PTR [rdx-0x454b4e6a],esi
 10017be:	sbb    dl,BYTE PTR [rax]
 10017c0:	mov    dh,0x9c
 10017c2:	add    BYTE PTR [rdx+0x71d3400],ch
	...
 10017d0:	sbb    BYTE PTR [rax],bl
 10017d2:	add    BYTE PTR [rcx],al
 10017d4:	add    BYTE PTR [rax],al
 10017d6:	add    BYTE PTR [rax],al
 10017d8:	or     BYTE PTR [rax],al
 10017da:	add    BYTE PTR [rax],al
 10017dc:	add    BYTE PTR [rax],al
 10017de:	add    BYTE PTR [rax],al
 10017e0:	add    DWORD PTR [rax],eax
 10017e2:	add    BYTE PTR [rax],al
 10017e4:	add    BYTE PTR [rax],al
 10017e6:	add    BYTE PTR [rax],al
 10017e8:	sub    BYTE PTR [rax],bl
 10017ea:	add    BYTE PTR [rcx],al
	...
 10017f8:	add    DWORD PTR [rax],eax
	...
 1001816:	add    BYTE PTR [rax],al
 1001818:	scas   al,BYTE PTR es:[rdi]
 1001819:	lods   al,BYTE PTR ds:[rsi]
 100181a:	mov    ch,0x65
 100181c:	mov    edx,0x9549c4fc
 1001821:	sbb    ebx,DWORD PTR [rax+0x62637774]
 1001827:	xor    DWORD PTR [rdx+rsi*4-0x454b4e6a],eax
 100182e:	sbb    dl,BYTE PTR [rax]
 1001830:	mov    dh,0x9c
 1001832:	add    BYTE PTR [rdx+0x71d3400],ch
 1001838:	(bad)  
 1001839:	push   rbp
 100183a:	outs   dx,BYTE PTR ds:[rsi]
 100183b:	push   rdx
 100183c:	gs addr32 push rbx
 100183f:	gs jb  0x10018b8
 1001842:	gs jb  0x1001845
 1001845:	add    BYTE PTR [rax],al
 1001847:	add    BYTE PTR [rip+0x65526e55],ch        # 0x665286a2
 100184d:	addr32 push rbx
 100184f:	gs jb  0x10018c8
 1001852:	gs jb  0x1001855
 1001855:	add    BYTE PTR [rax],al
 1001857:	add    BYTE PTR [rdi],ch
 1001859:	push   rdx
 100185a:	gs addr32 push rbx
 100185d:	gs jb  0x10018d6
 1001860:	gs jb  0x1001863
 1001863:	add    BYTE PTR [rax],al
 1001865:	add    BYTE PTR [rax],al
 1001867:	add    BYTE PTR [rip+0x53676552],ch        # 0x54677dbf
 100186d:	gs jb  0x10018e6
 1001870:	gs jb  0x1001873
 1001873:	add    BYTE PTR [rax],al
 1001875:	add    BYTE PTR [rax],al
 1001877:	add    BYTE PTR [rdi],ch
 1001879:	rex.RB ins DWORD PTR es:[rdi],dx
 100187b:	(bad)  
 100187c:	gs fs imul ebp,DWORD PTR fs:[rsi+0x67],0x0
 1001886:	add    BYTE PTR [rax],al
 1001888:	sub    eax,0x65626d45
 100188d:	fs imul ebp,DWORD PTR fs:[rsi+0x67],0x620000
 1001896:	add    BYTE PTR [rax],al
 1001898:	jb     0x100189a
 100189a:	add    BYTE PTR [rax],al
 100189c:	rex.XB
 100189d:	rex.WRXB
 100189e:	rex.WRX
 100189f:	rex.WB
 10018a0:	rex.WRX and al,0x0
 10018a3:	add    BYTE PTR [rdi+0x0],dh
 10018a6:	add    BYTE PTR [rax],al
 10018a8:	rex.XB
 10018a9:	rex.WRXB
 10018aa:	rex.WRX
 10018ab:	rex.WRXB push r13
 10018ad:	push   rsp
 10018ae:	and    al,0x0
 10018b0:	lock (bad) 
 10018b2:	add    BYTE PTR [rcx],al
 10018b4:	add    BYTE PTR [rax],al
 10018b6:	add    BYTE PTR [rax],al
 10018b8:	mov    al,0x9a
 10018ba:	add    BYTE PTR [rcx],al
 10018bc:	add    BYTE PTR [rax],al
 10018be:	add    BYTE PTR [rax],al
 10018c0:	rcr    BYTE PTR [rdx+0x100],0x0
 10018c7:	add    BYTE PTR [rax],ah
 10018c9:	xchg   esi,eax
 10018ca:	add    BYTE PTR [rcx],al
 10018cc:	add    BYTE PTR [rax],al
 10018ce:	add    BYTE PTR [rax],al
 10018d0:	and    BYTE PTR [rdi+0x100],dl
 10018d6:	add    BYTE PTR [rax],al
 10018d8:	(bad)  
 10018d9:	xchg   edi,eax
 10018da:	add    BYTE PTR [rcx],al
 10018dc:	add    BYTE PTR [rax],al
 10018de:	add    BYTE PTR [rax],al
 10018e0:	adc    BYTE PTR [rdi+0x100],0x0
 10018e7:	add    BYTE PTR [rax],dl
 10018e9:	fwait
 10018ea:	add    BYTE PTR [rcx],al
 10018ec:	add    BYTE PTR [rax],al
 10018ee:	add    BYTE PTR [rax],al
 10018f0:	xchg   BYTE PTR [rdx-0x454b4e6a],dh
 10018f6:	sbb    dl,BYTE PTR [rax]
 10018f8:	mov    dh,0x9c
 10018fa:	add    BYTE PTR [rdx+0x71d3400],ch
 1001900:	nop
 1001901:	fwait
 1001902:	add    BYTE PTR [rcx],al
 1001904:	add    BYTE PTR [rax],al
 1001906:	add    BYTE PTR [rax],al
 1001908:	push   rax
 1001909:	fwait
 100190a:	add    BYTE PTR [rcx],al
 100190c:	add    BYTE PTR [rax],al
 100190e:	add    BYTE PTR [rax],al
 1001910:	(bad)  
 1001911:	fwait
 1001912:	add    BYTE PTR [rcx],al
 1001914:	add    BYTE PTR [rax],al
 1001916:	add    BYTE PTR [rax],al
 1001918:	nop
 1001919:	jle    0x100191b
 100191b:	add    DWORD PTR [rax],eax
 100191d:	add    BYTE PTR [rax],al
 100191f:	add    al,dh
 1001921:	jle    0x1001923
 1001923:	add    DWORD PTR [rax],eax
 1001925:	add    BYTE PTR [rax],al
 1001927:	add    BYTE PTR [rax+0x1009b],dh
 100192d:	add    BYTE PTR [rax],al
 100192f:	add    BYTE PTR [rax-0x63],dl
 1001932:	add    BYTE PTR [rcx],al
 1001934:	add    BYTE PTR [rax],al
 1001936:	add    BYTE PTR [rax],al
 1001938:	add    BYTE PTR [rbp+0x100],bl
 100193e:	add    BYTE PTR [rax],al
 1001940:	and    BYTE PTR [rbp+0x100],bl
 1001946:	add    BYTE PTR [rax],al
 1001948:	ror    BYTE PTR [rbx+0x100],1
 100194e:	add    BYTE PTR [rax],al
 1001950:	lock lea eax,[rax]
 1001953:	add    DWORD PTR [rax],eax
 1001955:	add    BYTE PTR [rax],al
 1001957:	add    BYTE PTR [rax-0x63],dh
 100195a:	add    BYTE PTR [rcx],al
 100195c:	add    BYTE PTR [rax],al
 100195e:	add    BYTE PTR [rax],al
 1001960:	and    BYTE PTR [rdx+0x100],ah
 1001966:	add    BYTE PTR [rax],al
 1001968:	xor    BYTE PTR [rdx+0x100],ah
 100196e:	add    BYTE PTR [rax],al
 1001970:	movabs ds:0xa760000000000100,al
 100197a:	add    BYTE PTR [rcx],al
 100197c:	add    BYTE PTR [rax],al
 100197e:	add    BYTE PTR [rax],al
 1001980:	and    BYTE PTR [rdi+0x100],ah
 1001986:	add    BYTE PTR [rax],al
 1001988:	add    BYTE PTR [rdi+0x100],ah
 100198e:	add    BYTE PTR [rax],al
 1001990:	xor    BYTE PTR [rax+0x100],ch
	...
 100199e:	add    BYTE PTR [rax],al
 10019a0:	and    BYTE PTR [rdi+0x100],cl
 10019a6:	add    BYTE PTR [rax],al
 10019a8:	push   rax
 10019a9:	movabs ds:0xa260000000000100,al
 10019b2:	add    BYTE PTR [rcx],al
 10019b4:	add    BYTE PTR [rax],al
 10019b6:	add    BYTE PTR [rax],al
 10019b8:	mov    al,0x8f
 10019ba:	add    BYTE PTR [rcx],al
 10019bc:	add    BYTE PTR [rax],al
 10019be:	add    BYTE PTR [rax],al
 10019c0:	lock pop QWORD PTR [rax]
 10019c3:	add    DWORD PTR [rax],eax
 10019c5:	add    BYTE PTR [rax],al
 10019c7:	add    BYTE PTR [rax],ah
 10019c9:	nop
 10019ca:	add    BYTE PTR [rcx],al
 10019cc:	add    BYTE PTR [rax],al
 10019ce:	add    BYTE PTR [rax],al
 10019d0:	and    BYTE PTR [rcx+0x100],dl
 10019d6:	add    BYTE PTR [rax],al
 10019d8:	rcl    BYTE PTR [rcx+0x100],1
 10019de:	add    BYTE PTR [rax],al
 10019e0:	jo     0x1001984
 10019e2:	add    BYTE PTR [rcx],al
 10019e4:	add    BYTE PTR [rax],al
 10019e6:	add    BYTE PTR [rax],al
 10019e8:	and    BYTE PTR [rdx+0x100],0x0
 10019ef:	add    BYTE PTR [rax+0x100a2],dl
 10019f5:	add    BYTE PTR [rax],al
 10019f7:	add    BYTE PTR [rax+0x10093],ah
 10019fd:	add    BYTE PTR [rax],al
 10019ff:	add    BYTE PTR [rax],al
 1001a01:	xchg   esp,eax
 1001a02:	add    BYTE PTR [rcx],al
 1001a04:	add    BYTE PTR [rax],al
 1001a06:	add    BYTE PTR [rax],al
 1001a08:	mov    eax,0x10017
	...
 1001a15:	add    BYTE PTR [rax],al
 1001a17:	add    BYTE PTR [rcx],al
	...
 1001a35:	add    BYTE PTR [rax],al
 1001a37:	add    BYTE PTR [rdx],dl
 1001a39:	add    al,0x2
 1001a3b:	add    BYTE PTR [rax],al
 1001a3d:	add    BYTE PTR [rax],al
 1001a3f:	add    al,al
 1001a41:	add    BYTE PTR [rax],al
 1001a43:	add    BYTE PTR [rax],al
 1001a45:	add    BYTE PTR [rax],al
 1001a47:	add    DWORD PTR [rdx+r8*1],r8d
 1001a4b:	add    BYTE PTR [rax],al
 1001a4d:	add    BYTE PTR [rax],al
 1001a4f:	add    al,al
 1001a51:	add    BYTE PTR [rax],al
 1001a53:	add    BYTE PTR [rax],al
 1001a55:	add    BYTE PTR [rax],al
 1001a57:	rex.RX add BYTE PTR [rax],r8b
 1001a5a:	add    BYTE PTR [rax],al
 1001a5c:	add    BYTE PTR [rax],al
 1001a5e:	add    BYTE PTR [rax],al
 1001a60:	shl    BYTE PTR [rcx+0x100],0x0
 1001a67:	add    BYTE PTR [rax+0x100a1],al
 1001a6d:	add    BYTE PTR [rax],al
 1001a6f:	add    BYTE PTR [rax+0x100a1],dl
 1001a75:	add    BYTE PTR [rax],al
 1001a77:	add    al,dh
 1001a79:	popf   
 1001a7a:	add    BYTE PTR [rcx],al
 1001a7c:	add    BYTE PTR [rax],al
 1001a7e:	add    BYTE PTR [rax],al
 1001a80:	lock sahf 
 1001a82:	add    BYTE PTR [rcx],al
 1001a84:	add    BYTE PTR [rax],al
 1001a86:	add    BYTE PTR [rax],al
 1001a88:	xor    BYTE PTR [rdi+0x100],bl
 1001a8e:	add    BYTE PTR [rax],al
 1001a90:	push   rax
 1001a91:	lahf   
 1001a92:	add    BYTE PTR [rcx],al
 1001a94:	add    BYTE PTR [rax],al
 1001a96:	add    BYTE PTR [rax],al
 1001a98:	loopne 0x1001a3b
 1001a9a:	add    BYTE PTR [rcx],al
 1001a9c:	add    BYTE PTR [rax],al
 1001a9e:	add    BYTE PTR [rax],al
 1001aa0:	test   al,0x17
 1001aa2:	add    BYTE PTR [rcx],al
	...
 1001ab0:	add    DWORD PTR [rax],eax
	...
 1001ace:	add    BYTE PTR [rax],al
 1001ad0:	scas   al,BYTE PTR es:[rdi]
 1001ad1:	lods   al,BYTE PTR ds:[rsi]
 1001ad2:	mov    ch,0x65
 1001ad4:	mov    edx,0x9549c4fc
 1001ad9:	sbb    ebx,DWORD PTR [rax+0x62637774]
 1001adf:	xor    DWORD PTR [rax],esp
 1001ae1:	push   rdi
 1001ae2:	(bad)  
 1001ae3:	movabs eax,ds:0x6e6e2a8b4973be85
 1001aec:	ds xchg edi,eax
 1001aee:	int    0xa4
 1001af0:	es pop rsi
 1001af2:	sbb    eax,0x80b406ed
 1001af7:	rex.WX xor QWORD PTR [rbx],0x76
 1001afb:	rex.RB stos BYTE PTR es:[rdi],al
 1001afd:	(bad)  
 1001afe:	or     edx,DWORD PTR [rdi-0x6e]
 1001b01:	mov    esi,0x3cc4379f
 1001b06:	or     eax,0xd9d0ad4f
 1001b0b:	not    DWORD PTR [rbx+riz*8+0x6096d478]
 1001b12:	imul   esi,DWORD PTR [rbp+0x45cad853],0x869939a7
 1001b1c:	jae    0x1001afb
 1001b1e:	pop    rdi
 1001b1f:	leave  
 1001b20:	jmp    0x14d42cb7
 1001b25:	stos   DWORD PTR es:[rdi],eax
 1001b26:	and    ecx,DWORD PTR [rdx-0x55]
 1001b29:	cmp    esp,DWORD PTR [rbp+0x683d9fe]
 1001b2f:	fld    TBYTE PTR [rbx+0x899434d]
 1001b35:	wrmsr  
 1001b37:	rex.WRXB mov r15,cs
 1001b3a:	mov    bl,0xe8
 1001b3c:	add    dl,BYTE PTR [rsi+0x2e4807c9]
 1001b42:	mov    WORD PTR [rsi],?
 1001b44:	mov    DWORD PTR [rsi+0x70],edi
 1001b47:	xchg   r12,rax
 1001b49:	leave  
 1001b4a:	addr32 push rdi
 1001b4c:	jmp    0x45af64bd
 1001b51:	loopne 0x1001b4a
 1001b53:	std    
 1001b54:	outs   dx,BYTE PTR ds:[rsi]
 1001b55:	(bad)
 1001b59:	xchg   esi,eax
 1001b5a:	xor    BYTE PTR [rcx+rdi*2-0x56],0xfb
 1001b5f:	rex.WRB
 1001b60:	rex
 1001b61:	sub    al,BYTE PTR [r15+r10*8]
 1001b65:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1001b66:	fld    QWORD PTR [rdx+riz*4+0x2e]
 1001b6a:	xchg   ebx,eax
 1001b6b:	(bad)  
 1001b6c:	(bad)  
 1001b6d:	mov    ch,0x24
 1001b6f:	jne    0x1001b75
 1001b71:	ja     0x1001be6
 1001b73:	std    
 1001b74:	retf   
 1001b75:	rex.XB xchg r9d,eax
 1001b77:	rex.RXB mov r12b,0xdb
 1001b7a:	out    dx,al
 1001b7b:	mov    ebx,ds
 1001b7d:	mov    BYTE PTR [rax+rdx*2+0x46],0x1
 1001b82:	add    BYTE PTR [rax],al
 1001b84:	add    BYTE PTR [rax],al
 1001b86:	add    BYTE PTR [rax],al
 1001b88:	rol    BYTE PTR [rax],0x0
 1001b8b:	add    BYTE PTR [rax],al
 1001b8d:	add    BYTE PTR [rax],al
 1001b8f:	rex.RX mov al,0xa3
 1001b92:	add    BYTE PTR [rcx],al
 1001b94:	add    BYTE PTR [rax],al
 1001b96:	add    BYTE PTR [rax],al
 1001b98:	movabs al,ds:0xb0000000000100a2
 1001ba1:	movabs ds:0xa2c0000000000100,al
 1001baa:	add    BYTE PTR [rcx],al
 1001bac:	add    BYTE PTR [rax],al
 1001bae:	add    BYTE PTR [rax],al
 1001bb0:	shl    BYTE PTR [rdx+0x100],1
 1001bb6:	add    BYTE PTR [rax],al
 1001bb8:	push   rax
 1001bb9:	movabs ds:0x7e80000000000100,eax
 1001bc2:	add    BYTE PTR [rcx],al
 1001bc4:	add    BYTE PTR [rax],al
 1001bc6:	add    BYTE PTR [rax],al
 1001bc8:	jo     0x1001b6d
 1001bca:	add    BYTE PTR [rcx],al
 1001bcc:	add    BYTE PTR [rax],al
 1001bce:	add    BYTE PTR [rax],al
 1001bd0:	movabs al,ds:0x90000000000100a3
 1001bd9:	movabs ds:0x100,eax
	...
 1001bee:	add    BYTE PTR [rax],al
 1001bf0:	jo     0x1001b96
 1001bf2:	add    BYTE PTR [rcx],al
 1001bf4:	add    BYTE PTR [rax],al
 1001bf6:	add    BYTE PTR [rax],al
 1001bf8:	movabs al,ds:0x40000000000100a2
 1001c01:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1001c02:	add    BYTE PTR [rcx],al
 1001c04:	add    BYTE PTR [rax],al
 1001c06:	add    BYTE PTR [rax],al
 1001c08:	shl    BYTE PTR [rdx+0x100],0x0
 1001c0f:	add    al,dl
 1001c11:	movabs ds:0xa350000000000100,al
 1001c1a:	add    BYTE PTR [rcx],al
 1001c1c:	add    BYTE PTR [rax],al
 1001c1e:	add    BYTE PTR [rax],al
 1001c20:	cmp    BYTE PTR [rsi+0x0],0x1
 1001c24:	add    BYTE PTR [rax],al
 1001c26:	add    BYTE PTR [rax],al
 1001c28:	jo     0x1001bcd
 1001c2a:	add    BYTE PTR [rcx],al
 1001c2c:	add    BYTE PTR [rax],al
 1001c2e:	add    BYTE PTR [rax],al
 1001c30:	movabs al,ds:0x90000000000100a3
 1001c39:	movabs ds:0x8f20000000000100,eax
 1001c42:	add    BYTE PTR [rcx],al
 1001c44:	add    BYTE PTR [rax],al
 1001c46:	add    BYTE PTR [rax],al
 1001c48:	fdivr  DWORD PTR [rax+rax*1+0x1]
 1001c4f:	add    al,bl
 1001c51:	mov    esp,0x100
 1001c56:	add    BYTE PTR [rax],al
 1001c58:	mov    al,0x8f
 1001c5a:	add    BYTE PTR [rcx],al
 1001c5c:	add    BYTE PTR [rax],al
 1001c5e:	add    BYTE PTR [rax],al
 1001c60:	lock pop QWORD PTR [rax]
 1001c63:	add    DWORD PTR [rax],eax
 1001c65:	add    BYTE PTR [rax],al
 1001c67:	add    BYTE PTR [rax],ah
 1001c69:	nop
 1001c6a:	add    BYTE PTR [rcx],al
 1001c6c:	add    BYTE PTR [rax],al
 1001c6e:	add    BYTE PTR [rax],al
 1001c70:	and    BYTE PTR [rcx+0x100],dl
 1001c76:	add    BYTE PTR [rax],al
 1001c78:	rcl    BYTE PTR [rcx+0x100],1
 1001c7e:	add    BYTE PTR [rax],al
 1001c80:	add    BYTE PTR fs:[rcx+0x0],ch
 1001c84:	jae    0x1001c86
 1001c86:	je     0x1001c88
 1001c88:	jb     0x1001c8a
 1001c8a:	imul   eax,DWORD PTR [rax],0x2e0062
 1001c90:	add    BYTE PTR gs:[rax+0x0],bh
 1001c94:	add    BYTE PTR gs:[rax],ah
 1001c97:	add    BYTE PTR [rax],al
 1001c99:	add    BYTE PTR [rax],al
 1001c9b:	add    BYTE PTR [rax],ah
 1001c9d:	add    BYTE PTR [rax],al
 1001c9f:	add    BYTE PTR [rcx+0x0],al
 1001ca2:	push   rax
 1001ca3:	add    BYTE PTR [rax+0x0],dl
 1001ca6:	rex.WB add BYTE PTR [r8+rax*1+0x0],al
 1001cab:	add    BYTE PTR [rax],al
 1001cad:	add    BYTE PTR [rax],al
 1001caf:	add    BYTE PTR [rbp+0x0],ch
 1001cb2:	imul   eax,DWORD PTR [rax],0x720063
 1001cb8:	outs   dx,DWORD PTR ds:[rsi]
 1001cb9:	add    BYTE PTR [rbx+0x0],dh
 1001cbc:	outs   dx,DWORD PTR ds:[rsi]
 1001cbd:	add    BYTE PTR [rsi+0x0],ah
 1001cc0:	je     0x1001cc2
 1001cc2:	pop    rdi
 1001cc3:	add    BYTE PTR [rbx+0x0],dh
 1001cc6:	jno    0x1001cc8
 1001cc8:	ins    BYTE PTR es:[rdi],dx
 1001cc9:	add    BYTE PTR [rbx+0x0],dh
 1001ccc:	add    BYTE PTR gs:[rdx+0x0],dh
 1001cd0:	jbe    0x1001cd2
 1001cd2:	add    BYTE PTR gs:[rdx+0x0],dh
 1001cd6:	pop    rdi
 1001cd7:	add    BYTE PTR [rdx+0x0],dh
 1001cda:	add    BYTE PTR gs:[rax+0x0],dh
 1001cde:	ins    BYTE PTR es:[rdi],dx
 1001cdf:	add    BYTE PTR [rcx+0x0],ch
 1001ce2:	movsxd eax,DWORD PTR [rax]
 1001ce4:	(bad)  
 1001ce5:	add    BYTE PTR [rax+rax*1+0x69],dh
 1001ce9:	add    BYTE PTR [rdi+0x0],ch
 1001cec:	outs   dx,BYTE PTR ds:[rsi]
 1001ced:	add    BYTE PTR [rdi+0x0],bl
 1001cf0:	add    BYTE PTR [eax+eax*1+0x6f],ch
 1001cf5:	add    BYTE PTR [rdx+0x0],ah
 1001cf8:	(bad)  
 1001cf9:	add    BYTE PTR [rax+rax*1+0x5f],ch
 1001cfd:	add    BYTE PTR [rbp+0x0],ah
 1001d00:	outs   dx,BYTE PTR ds:[rsi]
 1001d01:	add    BYTE PTR [rbx+0x0],ah
 1001d04:	jb     0x1001d06
 1001d06:	jns    0x1001d08
 1001d08:	jo     0x1001d0a
 1001d0a:	je     0x1001d0c
 1001d0c:	imul   eax,DWORD PTR [rax],0x6e006f
 1001d12:	pop    rdi
 1001d13:	add    BYTE PTR [rax+rax*1+0x65],ch
 1001d17:	add    BYTE PTR [rsi+0x0],dh
 1001d1a:	add    BYTE PTR gs:[rax+rax*1+0x0],ch
 1001d1f:	add    BYTE PTR [rax],al
 1001d21:	add    BYTE PTR [rax],al
 1001d23:	(bad)  
 1001d24:	add    BYTE PTR [rax+rax*1],al
 1001d27:	(bad)  
 1001d28:	add    BYTE PTR [rax],cl
 1001d2a:	add    BYTE PTR [rax+0x0],ah
 1001d2d:	or     al,0x0
 1001d2f:	(bad)  
 1001d30:	add    BYTE PTR [rax],dl
 1001d32:	add    BYTE PTR [rax+0x0],ah
 1001d35:	adc    al,0x0
 1001d37:	(bad)  
 1001d38:	add    BYTE PTR [rax],bl
 1001d3a:	add    BYTE PTR [rax+0x0],ah
 1001d3d:	sbb    al,0x0
 1001d3f:	(bad)  
 1001d40:	add    BYTE PTR [rax],ah
 1001d42:	add    BYTE PTR [rax+0x0],ah
 1001d45:	and    al,0x0
 1001d47:	(bad)  
 1001d48:	add    BYTE PTR [rax],ch
 1001d4a:	add    BYTE PTR [rax+0x0],ah
 1001d4d:	xor    BYTE PTR [rax],al
 1001d4f:	(bad)  
 1001d50:	add    BYTE PTR [rax+rax*1],dh
 1001d53:	(bad)  
 1001d54:	add    BYTE PTR [rax],bh
 1001d56:	add    BYTE PTR [rax+0x0],ah
 1001d59:	cmp    al,0x0
 1001d5b:	(bad)  
 1001d5c:	add    BYTE PTR [rax+0x0],al
 1001d5f:	(bad)  
 1001d60:	add    BYTE PTR [rax+rax*1+0x60],cl
 1001d64:	add    BYTE PTR [rax+0x0],dl
 1001d67:	(bad)  
 1001d68:	add    BYTE PTR [rax+rax*1+0x60],dl
 1001d6c:	add    BYTE PTR [rax+0x0],bl
 1001d6f:	(bad)  
 1001d70:	add    BYTE PTR [rax+rax*1+0x60],bl
 1001d74:	add    BYTE PTR [rax],al
 1001d76:	add    BYTE PTR [rax],al
 1001d78:	add    BYTE PTR [rcx+0x0],r13b
 1001d7c:	jae    0x1001d7e
 1001d7e:	je     0x1001d80
 1001d80:	jb     0x1001d82
 1001d82:	imul   eax,DWORD PTR [rax],0x750062
 1001d88:	je     0x1001d8a
 1001d8a:	outs   dx,DWORD PTR ds:[rsi]
 1001d8b:	add    BYTE PTR [rdx+0x0],dh
 1001d8e:	add    BYTE PTR [rax],al
 1001d90:	rex.R
 1001d91:	rex.WB push r11
 1001d93:	push   rsp
 1001d94:	push   rdx
 1001d95:	rex.WB
 1001d96:	rex.X
 1001d97:	cs rex.RB pop r8
 1001d9a:	add    BYTE PTR [r8],r8b
 1001d9d:	add    BYTE PTR [rax],al
 1001d9f:	add    BYTE PTR [rax+rax*1+0x69],ah
 1001da3:	add    BYTE PTR [rbx+0x0],dh
 1001da6:	je     0x1001da8
 1001da8:	jb     0x1001daa
 1001daa:	imul   eax,DWORD PTR [rax],0x780062
 1001db0:	add    BYTE PTR gs:[rsi],ch
 1001db3:	add    BYTE PTR [rax+0x0],bh
 1001db6:	ins    DWORD PTR es:[rdi],dx
 1001db7:	add    BYTE PTR [rax+rax*1+0x0],ch
 1001dbb:	add    BYTE PTR [rax],al
 1001dbd:	add    BYTE PTR [rax],al
 1001dbf:	add    ah,dh
 1001dc1:	fcmovb st,st(6)
 1001dc3:	mov    edx,0x480ef8c5
 1001dc8:	lods   eax,DWORD PTR ds:[rsi]
 1001dc9:	adc    ch,BYTE PTR [rdi+0x5f]
 1001dcc:	movabs al,ds:0x4c3671fb24cdc0cb
 1001dd5:	rex.WRX push rdx
 1001dd7:	rex.RB pushf 
 1001dd9:	cdq    
 1001dda:	sbb    DWORD PTR [rax-0x56],edi
 1001ddd:	jne    0x1001e46
 1001ddf:	(bad)  
 1001de0:	add    BYTE PTR [rax],al
 1001de2:	add    BYTE PTR [rax+0x0],ah
 1001de5:	add    al,0x0
 1001de7:	(bad)  
 1001de8:	add    BYTE PTR [rax],cl
 1001dea:	add    BYTE PTR [rax+0x0],ah
 1001ded:	or     al,0x0
 1001def:	(bad)  
 1001df0:	add    BYTE PTR [rax],dl
 1001df2:	add    BYTE PTR [rax+0x0],ah
 1001df5:	adc    al,0x0
 1001df7:	(bad)  
 1001df8:	add    BYTE PTR [rax],bl
 1001dfa:	add    BYTE PTR [rax+0x0],ah
 1001dfd:	sbb    al,0x0
 1001dff:	(bad)  
 1001e00:	add    BYTE PTR [rax],ah
 1001e02:	add    BYTE PTR [rax+0x0],ah
 1001e05:	and    al,0x0
 1001e07:	(bad)  
 1001e08:	add    BYTE PTR [rax],ch
 1001e0a:	add    BYTE PTR [rax+0x0],ah
 1001e0d:	xor    BYTE PTR [rax],al
 1001e0f:	(bad)  
 1001e10:	add    BYTE PTR [rax+rax*1],dh
 1001e13:	(bad)  
 1001e14:	add    BYTE PTR [rax],bh
 1001e16:	add    BYTE PTR [rax+0x0],ah
 1001e19:	cmp    al,0x0
 1001e1b:	(bad)  
 1001e1c:	add    BYTE PTR [rax+0x0],al
 1001e1f:	(bad)  
 1001e20:	add    BYTE PTR [rax+rax*1+0x60],cl
 1001e24:	add    BYTE PTR [rax+0x0],dl
 1001e27:	(bad)  
 1001e28:	add    BYTE PTR [rax+rax*1+0x60],dl
 1001e2c:	add    BYTE PTR [rax+0x0],bl
 1001e2f:	(bad)  
 1001e30:	add    BYTE PTR [rax+rax*1+0x60],bl
 1001e34:	add    BYTE PTR [rax+rax*1],al
 1001e37:	xor    BYTE PTR [rax+0x1001e],cl
 1001e3d:	add    BYTE PTR [rax],al
 1001e3f:	add    BYTE PTR [rax+rax*1+0x69],ah
 1001e43:	add    BYTE PTR [rbx+0x0],dh
 1001e46:	je     0x1001e48
 1001e48:	jb     0x1001e4a
 1001e4a:	imul   eax,DWORD PTR [rax],0x62
 1001e50:	push   rdx
 1001e51:	add    BYTE PTR [rbp+0x0],ah
 1001e54:	jo     0x1001e56
 1001e56:	ins    BYTE PTR es:[rdi],dx
 1001e57:	add    BYTE PTR [rcx+0x0],ch
 1001e5a:	movsxd eax,DWORD PTR [rax]
 1001e5c:	(bad)  
 1001e5d:	add    BYTE PTR [rax+rax*1+0x69],dh
 1001e61:	add    BYTE PTR [rdi+0x0],ch
 1001e64:	outs   dx,BYTE PTR ds:[rsi]
 1001e65:	add    BYTE PTR [rax],ah
 1001e67:	add    BYTE PTR [rax+rax*1+0x69],ah
 1001e6b:	add    BYTE PTR [rbx+0x0],dh
 1001e6e:	je     0x1001e70
 1001e70:	jb     0x1001e72
 1001e72:	imul   eax,DWORD PTR [rax],0x200062
 1001e78:	jo     0x1001e7a
 1001e7a:	(bad)  
 1001e7b:	add    BYTE PTR [rbx+0x0],ah
 1001e7e:	imul   eax,DWORD PTR [rax],0x61
 1001e81:	add    BYTE PTR [rdi+0x0],ah
 1001e84:	add    BYTE PTR gs:[rax],al
 1001e87:	add    BYTE PTR [rax+0x0],dh
 1001e8a:	(bad)  
 1001e8b:	add    BYTE PTR [rbx+0x0],ah
 1001e8e:	imul   eax,DWORD PTR [rax],0x61
 1001e91:	add    BYTE PTR [rdi+0x0],ah
 1001e94:	add    BYTE PTR gs:[rax],dh
	...
 1001e9f:	add    al,bl
 1001ea1:	mov    esp,0x100
 1001ea6:	add    BYTE PTR [rax],al
 1001ea8:	fdivr  DWORD PTR [rax+rax*1+0x1]
 1001eaf:	add    al,bl
 1001eb1:	mov    esp,0x100
 1001eb6:	add    BYTE PTR [rax],al
 1001eb8:	fdivr  DWORD PTR [rax+rax*1+0x1]
 1001ebf:	add    al,bl
 1001ec1:	mov    esp,0x100
 1001ec6:	add    BYTE PTR [rax],al
 1001ec8:	fdivr  DWORD PTR [rax+rax*1+0x1]
 1001ecf:	add    al,bl
 1001ed1:	mov    esp,0x100
 1001ed6:	add    BYTE PTR [rax],al
 1001ed8:	shr    BYTE PTR [rsi+0x100],0x0
 1001edf:	add    BYTE PTR [rax+0x0],bl
 1001ee2:	add    BYTE PTR gs:[rax+rax*1+0x69],al
 1001ee7:	add    BYTE PTR [rbx+0x0],dh
 1001eea:	je     0x1001eec
 1001eec:	je     0x1001eee
 1001eee:	(bad)  
 1001eef:	add    BYTE PTR [rbx+0x0],dh
 1001ef2:	imul   eax,DWORD PTR [rax],0x50
 1001ef5:	add    BYTE PTR [rbx+0x0],ch
 1001ef8:	add    BYTE PTR [esi],ch
 1001efb:	add    BYTE PTR [rdx+0x0],dh
 1001efe:	ins    BYTE PTR es:[rdi],dx
 1001eff:	add    BYTE PTR [rax+rax*1+0x0],ch
 1001f03:	add    BYTE PTR [rax],al
 1001f05:	add    BYTE PTR [rax],al
 1001f07:	add    BYTE PTR [rbp+0x0],dl
 1001f0a:	push   rbp
 1001f0b:	add    BYTE PTR [rcx+0x0],cl
 1001f0e:	add    BYTE PTR [rax],r8b
 1001f11:	add    BYTE PTR [rax],al
 1001f13:	add    BYTE PTR [rax],al
 1001f15:	add    BYTE PTR [rax],al
 1001f17:	add    BYTE PTR [rdi+0x0],al
 1001f1a:	ins    BYTE PTR es:[rdi],dx
 1001f1b:	add    BYTE PTR [rdi+0x0],ch
 1001f1e:	(bad)  
 1001f1f:	add    BYTE PTR [rcx+0x0],ah
 1001f22:	ins    BYTE PTR es:[rdi],dx
 1001f23:	add    BYTE PTR [rax+rax*1+0x79],ch
 1001f27:	add    BYTE PTR [rax],ah
 1001f29:	add    BYTE PTR [rbp+0x0],dl
 1001f2c:	outs   dx,BYTE PTR ds:[rsi]
 1001f2d:	add    BYTE PTR [rcx+0x0],ch
 1001f30:	jno    0x1001f32
 1001f32:	jne    0x1001f34
 1001f34:	add    BYTE PTR gs:[rax],ah
 1001f37:	add    BYTE PTR [rcx+0x0],cl
 1001f3a:	add    BYTE PTR [rax],r8b
 1001f3d:	add    BYTE PTR [rax],al
 1001f3f:	add    BYTE PTR [rsi+0x0],dl
 1001f42:	add    BYTE PTR [r10+0x0],r10b
 1001f46:	push   rbx
 1001f47:	add    BYTE PTR [rcx+0x0],cl
 1001f4a:	rex.WRXB add BYTE PTR [r14+0x0],r9b
 1001f4e:	add    BYTE PTR [rax],al
 1001f50:	add    BYTE PTR [r14+0x0],r14b
 1001f54:	add    BYTE PTR gs:[rsi+0x0],ch
 1001f58:	je     0x1001f5a
 1001f5a:	and    BYTE PTR [rax],al
 1001f5c:	jae    0x1001f5e
 1001f5e:	movsxd eax,DWORD PTR [rax]
 1001f60:	push   0x6d006500
 1001f65:	add    BYTE PTR [rcx+0x0],ah
 1001f68:	and    BYTE PTR [rax],al
 1001f6a:	jbe    0x1001f6c
 1001f6c:	add    BYTE PTR gs:[rdx+0x0],dh
 1001f70:	jae    0x1001f72
 1001f72:	imul   eax,DWORD PTR [rax],0x6e006f
	...
 1001f80:	rex.XB add BYTE PTR [r8+0x0],cl
 1001f84:	add    BYTE PTR [r14+0x0],cl
 1001f88:	rex.WRX add BYTE PTR [rbp+0x0],r8b
 1001f8c:	rex.WR add BYTE PTR [rax],r8b
 1001f8f:	add    BYTE PTR [rbp+0x0],al
 1001f92:	push   rsp
 1001f93:	add    BYTE PTR [rdi+0x0],dl
 1001f96:	and    BYTE PTR [rax],al
 1001f98:	rex.XB add BYTE PTR [r8+0x0],bpl
 1001f9c:	(bad)  
 1001f9d:	add    BYTE PTR [rsi+0x0],ch
 1001fa0:	outs   dx,BYTE PTR ds:[rsi]
 1001fa1:	add    BYTE PTR [rbp+0x0],ah
 1001fa4:	ins    BYTE PTR es:[rdi],dx
 1001fa5:	add    BYTE PTR [rax],al
 1001fa7:	add    BYTE PTR [rdx+0x0],dh
 1001faa:	add    BYTE PTR gs:[rax+0x0],dh
 1001fae:	ins    BYTE PTR es:[rdi],dx
 1001faf:	add    BYTE PTR [rdi+0x0],bl
 1001fb2:	add    BYTE PTR fs:[rcx+0x0],ch
 1001fb6:	jae    0x1001fb8
 1001fb8:	je     0x1001fba
 1001fba:	jb     0x1001fbc
 1001fbc:	imul   eax,DWORD PTR [rax],0x5f0062
 1001fc2:	add    BYTE PTR [ebp+0x0],ah
 1001fc6:	outs   dx,BYTE PTR ds:[rsi]
 1001fc7:	add    BYTE PTR [rbp+0x0],ah
 1001fca:	jb     0x1001fcc
 1001fcc:	imul   eax,DWORD PTR [rax],0x5f0063
 1001fd2:	add    BYTE PTR gs:[rsi+0x0],dh
 1001fd6:	add    BYTE PTR gs:[rsi+0x0],ch
 1001fda:	je     0x1001fdc
 1001fdc:	add    BYTE PTR [rax],al
 1001fde:	add    BYTE PTR [rax],al
 1001fe0:	lock scas al,BYTE PTR es:[rdi]
 1001fe2:	add    BYTE PTR [rcx],al
 1001fe4:	add    BYTE PTR [rax],al
 1001fe6:	add    BYTE PTR [rax],al
 1001fe8:	add    BYTE PTR [rdx+0x100],dh
 1001fee:	add    BYTE PTR [rax],al
 1001ff0:	movabs al,ds:0xb0000000000100b4
 1001ff9:	mov    ah,0x0
 1001ffb:	add    DWORD PTR [rax],eax
 1001ffd:	add    BYTE PTR [rax],al
 1001fff:	add    BYTE PTR [rax+0x100b5],al
 1002005:	add    BYTE PTR [rax],al
 1002007:	add    al,dh
 1002009:	mov    ch,0x0
 100200b:	add    DWORD PTR [rax],eax
 100200d:	add    BYTE PTR [rax],al
 100200f:	add    al,ah
 1002011:	mov    dh,0x0
 1002013:	add    DWORD PTR [rax],eax
 1002015:	add    BYTE PTR [rax],al
 1002017:	add    al,al
 1002019:	mov    ecx,0x100
 100201e:	add    BYTE PTR [rax],al
 1002020:	xor    BYTE PTR [rdi+0x100],0x0
 1002027:	add    BYTE PTR [rax+0x100b7],dl
	...
 100203d:	add    BYTE PTR [rax],al
 100203f:	add    BYTE PTR [rbp+0x0],dh
 1002042:	jae    0x1002044
 1002044:	add    BYTE PTR gs:[rdx+0x0],dh
 1002048:	xor    eax,DWORD PTR [rax]
 100204a:	xor    al,BYTE PTR [rax]
 100204c:	add    BYTE PTR cs:[rax+rax*1+0x6c],ah
 1002051:	add    BYTE PTR [rax+rax*1+0x0],ch
 1002055:	add    BYTE PTR [rax],al
 1002057:	add    BYTE PTR [rdi+rbp*2+0x61],cl
 100205b:	fs push rbx
 100205d:	je     0x10020d1
 100205f:	imul   ebp,DWORD PTR [rsi+0x67],0x57
 1002066:	add    BYTE PTR [rax],al
 1002068:	jae    0x100206a
 100206a:	push   0x77006c00
 100206f:	add    BYTE PTR [rcx+0x0],ah
 1002072:	jo     0x1002074
 1002074:	imul   eax,DWORD PTR [rax],0x64002e
 100207a:	ins    BYTE PTR es:[rdi],dx
 100207b:	add    BYTE PTR [rax+rax*1+0x0],ch
 100207f:	add    BYTE PTR [rax+0x61],dl
 1002082:	je     0x10020ec
 1002084:	push   rdx
 1002085:	gs ins DWORD PTR es:[rdi],dx
 1002087:	outs   dx,DWORD PTR ds:[rsi]
 1002088:	jbe    0x10020ef
 100208a:	imul   r13d,DWORD PTR [rbp+r12*2+0x53],0x57636570
 1002093:	add    BYTE PTR [rax],al
 1002095:	add    BYTE PTR [rax],al
 1002097:	add    BYTE PTR [rax+0x61],dl
 100209a:	je     0x1002104
 100209c:	rex.B jo 0x100210f
 100209f:	outs   dx,BYTE PTR gs:[rsi]
 10020a1:	fs push rdi
 10020a3:	add    BYTE PTR [rax],al
 10020a5:	add    BYTE PTR [rax],al
 10020a7:	add    BYTE PTR [rax+rax*1+0x52],bl
 10020ab:	add    BYTE PTR [rbp+0x0],ah
 10020ae:	jae    0x10020b0
 10020b0:	outs   dx,DWORD PTR ds:[rsi]
 10020b1:	add    BYTE PTR [rbp+0x0],dh
 10020b4:	jb     0x10020b6
 10020b6:	movsxd eax,DWORD PTR [rax]
 10020b8:	add    BYTE PTR gs:[rbx+0x0],dh
 10020bc:	add    BYTE PTR [rax],al
 10020be:	add    BYTE PTR [rax],al
 10020c0:	and    eax,0x5c007300
 10020c5:	add    BYTE PTR [rip+0x5c006400],ah        # 0x5d0084cb
 10020cb:	add    BYTE PTR [rip+0x7300],ah        # 0x10093d1
 10020d1:	add    BYTE PTR [rax],al
 10020d3:	add    BYTE PTR [rax],al
 10020d5:	add    BYTE PTR [rax],al
 10020d7:	add    BYTE PTR [rax+0x0],bl
 10020da:	add    BYTE PTR [r8+0x0],r10b
 10020de:	(bad)  
 10020df:	add    BYTE PTR [rbx+0x0],ah
 10020e2:	imul   eax,DWORD PTR [rax],0x61
 10020e5:	add    BYTE PTR [rdi+0x0],ah
 10020e8:	add    BYTE PTR gs:[rcx+0x0],al
 10020ec:	push   rax
 10020ed:	add    BYTE PTR [rcx+0x0],cl
	...
 10020f8:	pop    rax
 10020f9:	add    BYTE PTR [rbp+0x0],al
 10020fc:	push   rsp
 10020fd:	add    BYTE PTR [rcx+0x0],ah
 1002100:	jb     0x1002102
 1002102:	add    BYTE PTR [ebp+0x0],ah
 1002106:	je     0x1002108
 1002108:	add    BYTE PTR [r8+0x0],dl
 100210c:	rex.WB add BYTE PTR [r8],al
 100210f:	add    BYTE PTR [rax],al
 1002111:	add    BYTE PTR [rax],al
 1002113:	(bad)  
 1002114:	add    BYTE PTR [rax+rax*1],al
 1002117:	(bad)  
 1002118:	add    BYTE PTR [rax],cl
 100211a:	add    BYTE PTR [rax+0x0],ah
 100211d:	or     al,0x0
 100211f:	(bad)  
 1002120:	add    BYTE PTR [rax],dl
 1002122:	add    BYTE PTR [rax+0x0],ah
 1002125:	adc    al,0x0
 1002127:	(bad)  
 1002128:	add    BYTE PTR [rax],bl
 100212a:	add    BYTE PTR [rax+0x0],ah
 100212d:	sbb    al,0x0
 100212f:	(bad)  
 1002130:	add    BYTE PTR [rax],ah
 1002132:	add    BYTE PTR [rax+0x0],ah
 1002135:	and    al,0x0
 1002137:	(bad)  
 1002138:	add    BYTE PTR [rax],ch
 100213a:	add    BYTE PTR [rax+0x0],ah
 100213d:	xor    BYTE PTR [rax],al
 100213f:	(bad)  
 1002140:	add    BYTE PTR [rax+rax*1],dh
 1002143:	(bad)  
 1002144:	add    BYTE PTR [rax],bh
 1002146:	add    BYTE PTR [rax+0x0],ah
 1002149:	cmp    al,0x0
 100214b:	(bad)  
 100214c:	add    BYTE PTR [rax+0x0],al
 100214f:	(bad)  
 1002150:	add    BYTE PTR [rax+rax*1+0x60],cl
 1002154:	add    BYTE PTR [rax+0x0],dl
 1002157:	(bad)  
 1002158:	add    BYTE PTR [rax+rax*1+0x60],dl
 100215c:	add    BYTE PTR [rax+0x0],bl
 100215f:	(bad)  
 1002160:	add    BYTE PTR [rax+rax*1+0x60],bl
 1002164:	add    BYTE PTR [rax],al
 1002166:	add    BYTE PTR [rax],al
 1002168:	and    BYTE PTR [rsi+0x2],dl
 100216b:	add    DWORD PTR [rax],eax
 100216d:	add    BYTE PTR [rax],al
 100216f:	add    BYTE PTR [rax+0x10256],al
 1002175:	add    BYTE PTR [rax],al
 1002177:	add    BYTE PTR [rax],ah
 1002179:	push   rdi
 100217a:	add    al,BYTE PTR [rcx]
 100217c:	add    BYTE PTR [rax],al
 100217e:	add    BYTE PTR [rax],al
 1002180:	adc    BYTE PTR [rcx+0x2f],bl
 1002183:	mov    dh,0x28
 1002185:	rcl    DWORD PTR gs:[rcx],1
 1002188:	xchg   esi,eax
 1002189:	adc    DWORD PTR [rax],eax
 100218b:	add    al,bh
 100218d:	(bad)  
 100218e:	or     eax,0x4c3de00d
 1002193:	cmp    DWORD PTR [rdi+0x3c],ebp
 1002196:	rcl    BYTE PTR [rcx],cl
 1002198:	cmp    DWORD PTR [rbx+0x0],0x7a794fc0
 100219f:	mov    bh,0xca
 10021a1:	test   eax,0x92a25dc0
 10021a6:	add    al,0x42
 10021a8:	nop
 10021a9:	add    esp,esp
 10021ab:	(bad)  
 10021ac:	pop    rdi
 10021ad:	adc    ecx,esp
 10021af:	test   al,0x0
	...
 10021bd:	add    BYTE PTR [rax],al
 10021bf:	add    BYTE PTR [rbx],ah
 10021c1:	add    eax,DWORD PTR [rax]
 10021c3:	add    BYTE PTR [rax],al
 10021c5:	add    BYTE PTR [rax],al
 10021c7:	add    al,al
 10021c9:	add    BYTE PTR [rax],al
 10021cb:	add    BYTE PTR [rax],al
 10021cd:	add    BYTE PTR [rax],al
 10021cf:	rex.RX push rbx
 10021d1:	add    BYTE PTR [rdi+0x0],cl
 10021d4:	add    BYTE PTR [rax+r8*1+0x57],r10b
 10021d9:	add    BYTE PTR [rcx+0x0],al
 10021dc:	push   rdx
 10021dd:	add    BYTE PTR [rbp+0x0],al
 10021e0:	pop    rsp
 10021e1:	add    BYTE PTR [rbp+0x0],cl
 10021e4:	imul   eax,DWORD PTR [rax],0x720063
 10021ea:	outs   dx,DWORD PTR ds:[rsi]
 10021eb:	add    BYTE PTR [rbx+0x0],dh
 10021ee:	outs   dx,DWORD PTR ds:[rsi]
 10021ef:	add    BYTE PTR [rsi+0x0],ah
 10021f2:	je     0x10021f4
 10021f4:	pop    rsp
 10021f5:	add    BYTE PTR [rbp+0x0],cl
 10021f8:	imul   eax,DWORD PTR [rax],0x720063
 10021fe:	outs   dx,DWORD PTR ds:[rsi]
 10021ff:	add    BYTE PTR [rbx+0x0],dh
 1002202:	outs   dx,DWORD PTR ds:[rsi]
 1002203:	add    BYTE PTR [rsi+0x0],ah
 1002206:	je     0x1002208
 1002208:	and    BYTE PTR [rax],al
 100220a:	push   rbx
 100220b:	add    BYTE PTR [rcx+0x0],dl
 100220e:	rex.WR add BYTE PTR [rax],r12b
 1002211:	add    BYTE PTR [rbx+0x0],dl
 1002214:	add    BYTE PTR gs:[rdx+0x0],dh
 1002218:	jbe    0x100221a
 100221a:	add    BYTE PTR gs:[rdx+0x0],dh
 100221e:	pop    rsp
 100221f:	add    BYTE PTR [rcx],dh
 1002221:	add    BYTE PTR [rcx],dh
 1002223:	add    BYTE PTR [rax],dh
 1002225:	add    BYTE PTR [rax],al
 1002227:	add    BYTE PTR [rbp+0x0],al
 100222a:	jb     0x100222c
 100222c:	jb     0x100222e
 100222e:	outs   dx,DWORD PTR ds:[rsi]
 100222f:	add    BYTE PTR [rdx+0x0],dh
 1002232:	push   rdx
 1002233:	add    BYTE PTR [rbp+0x0],ah
 1002236:	jo     0x1002238
 1002238:	outs   dx,DWORD PTR ds:[rsi]
 1002239:	add    BYTE PTR [rdx+0x0],dh
 100223c:	je     0x100223e
 100223e:	imul   eax,DWORD PTR [rax],0x67006e
 1002244:	add    BYTE PTR [rcx+0x0],r13b
 1002248:	jb     0x100224a
 100224a:	add    BYTE PTR [rax],al
 100224c:	add    BYTE PTR [rax],al
 100224e:	add    BYTE PTR [rax],al
 1002250:	add    BYTE PTR [r14+0x0],r13b
 1002254:	(bad)  
 1002255:	add    BYTE PTR [rdx+0x0],ah
 1002258:	ins    BYTE PTR es:[rdi],dx
 1002259:	add    BYTE PTR [rbp+0x0],ah
 100225c:	add    BYTE PTR [r10+0x0],r14b
 1002260:	jb     0x1002262
 1002262:	outs   dx,DWORD PTR ds:[rsi]
 1002263:	add    BYTE PTR [rdx+0x0],dh
 1002266:	push   rdx
 1002267:	add    BYTE PTR [rbp+0x0],ah
 100226a:	jo     0x100226c
 100226c:	outs   dx,DWORD PTR ds:[rsi]
 100226d:	add    BYTE PTR [rdx+0x0],dh
 1002270:	je     0x1002272
 1002272:	imul   eax,DWORD PTR [rax],0x67006e
	...
 1002280:	push   rdx
 1002281:	add    BYTE PTR [rbp+0x0],ah
 1002284:	jo     0x1002286
 1002286:	ins    BYTE PTR es:[rdi],dx
 1002287:	add    BYTE PTR [rcx+0x0],al
 100228a:	add    BYTE PTR [ebp+0x0],ah
 100228e:	outs   dx,BYTE PTR ds:[rsi]
 100228f:	add    BYTE PTR [rax+rax*1+0x0],dh
 1002293:	add    BYTE PTR [rax],al
 1002295:	add    BYTE PTR [rax],al
 1002297:	add    BYTE PTR [rsi],ch
 1002299:	add    BYTE PTR [rbp+0x0],ch
 100229c:	add    BYTE PTR fs:[rbp+0x0],ch
 10022a0:	jo     0x10022a2
	...
 10022ae:	add    BYTE PTR [rax],al
 10022b0:	sub    al,BYTE PTR [rax]
 10022b2:	sub    al,BYTE PTR [rax]
 10022b4:	sub    al,BYTE PTR [rax]
 10022b6:	sub    al,BYTE PTR [rax]
 10022b8:	sub    al,BYTE PTR [rax]
 10022ba:	sub    al,BYTE PTR [rax]
 10022bc:	sub    al,BYTE PTR [rax]
 10022be:	sub    al,BYTE PTR [rax]
 10022c0:	sub    al,BYTE PTR [rax]
 10022c2:	sub    al,BYTE PTR [rax]
 10022c4:	sub    al,BYTE PTR [rax]
 10022c6:	sub    al,BYTE PTR [rax]
 10022c8:	sub    al,BYTE PTR [rax]
 10022ca:	sub    al,BYTE PTR [rax]
 10022cc:	sub    al,BYTE PTR [rax]
 10022ce:	sub    al,BYTE PTR [rax]
 10022d0:	sub    al,BYTE PTR [rax]
 10022d2:	sub    al,BYTE PTR [rax]
 10022d4:	sub    al,BYTE PTR [rax]
 10022d6:	sub    al,BYTE PTR [rax]
 10022d8:	sub    al,BYTE PTR [rax]
 10022da:	sub    al,BYTE PTR [rax]
 10022dc:	sub    al,BYTE PTR [rax]
 10022de:	sub    al,BYTE PTR [rax]
 10022e0:	sub    al,BYTE PTR [rax]
 10022e2:	sub    al,BYTE PTR [rax]
 10022e4:	sub    al,BYTE PTR [rax]
 10022e6:	sub    al,BYTE PTR [rax]
 10022e8:	sub    al,BYTE PTR [rax]
 10022ea:	sub    al,BYTE PTR [rax]
 10022ec:	sub    al,BYTE PTR [rax]
 10022ee:	sub    al,BYTE PTR [rax]
 10022f0:	sub    al,BYTE PTR [rax]
 10022f2:	sub    al,BYTE PTR [rax]
 10022f4:	sub    al,BYTE PTR [rax]
 10022f6:	sub    al,BYTE PTR [rax]
 10022f8:	sub    al,BYTE PTR [rax]
 10022fa:	sub    al,BYTE PTR [rax]
 10022fc:	sub    al,BYTE PTR [rax]
 10022fe:	sub    al,BYTE PTR [rax]
 1002300:	sub    al,BYTE PTR [rax]
 1002302:	sub    al,BYTE PTR [rax]
 1002304:	sub    al,BYTE PTR [rax]
 1002306:	sub    al,BYTE PTR [rax]
 1002308:	sub    al,BYTE PTR [rax]
 100230a:	sub    al,BYTE PTR [rax]
 100230c:	sub    al,BYTE PTR [rax]
 100230e:	sub    al,BYTE PTR [rax]
 1002310:	sub    al,BYTE PTR [rax]
 1002312:	sub    al,BYTE PTR [rax]
 1002314:	sub    al,BYTE PTR [rax]
 1002316:	sub    al,BYTE PTR [rax]
 1002318:	sub    al,BYTE PTR [rax]
 100231a:	sub    al,BYTE PTR [rax]
 100231c:	sub    al,BYTE PTR [rax]
 100231e:	sub    al,BYTE PTR [rax]
 1002320:	sub    al,BYTE PTR [rax]
 1002322:	sub    al,BYTE PTR [rax]
 1002324:	sub    al,BYTE PTR [rax]
 1002326:	sub    al,BYTE PTR [rax]
 1002328:	sub    al,BYTE PTR [rax]
 100232a:	sub    al,BYTE PTR [rax]
 100232c:	sub    al,BYTE PTR [rax]
 100232e:	sub    al,BYTE PTR [rax]
 1002330:	sub    al,BYTE PTR [rax]
 1002332:	sub    al,BYTE PTR [rax]
 1002334:	sub    al,BYTE PTR [rax]
 1002336:	sub    al,BYTE PTR [rax]
 1002338:	sub    al,BYTE PTR [rax]
 100233a:	sub    al,BYTE PTR [rax]
 100233c:	sub    al,BYTE PTR [rax]
 100233e:	sub    al,BYTE PTR [rax]
 1002340:	sub    al,BYTE PTR [rax]
 1002342:	sub    al,BYTE PTR [rax]
 1002344:	sub    al,BYTE PTR [rax]
 1002346:	sub    al,BYTE PTR [rax]
 1002348:	sub    al,BYTE PTR [rax]
 100234a:	sub    al,BYTE PTR [rax]
 100234c:	sub    al,BYTE PTR [rax]
 100234e:	sub    al,BYTE PTR [rax]
	...
 1002360:	rex.WRB add BYTE PTR [r9+0x0],r13b
 1002364:	movsxd eax,DWORD PTR [rax]
 1002366:	jb     0x1002368
 1002368:	outs   dx,DWORD PTR ds:[rsi]
 1002369:	add    BYTE PTR [rbx+0x0],dh
 100236c:	outs   dx,DWORD PTR ds:[rsi]
 100236d:	add    BYTE PTR [rsi+0x0],ah
 1002370:	je     0x1002372
 1002372:	and    BYTE PTR [rax],al
 1002374:	sub    BYTE PTR [rax],al
 1002376:	push   rdx
 1002377:	add    BYTE PTR [rcx],ch
 1002379:	add    BYTE PTR [rax],ah
 100237b:	add    BYTE PTR [rbx+0x0],dl
 100237e:	push   rcx
 100237f:	add    BYTE PTR [rax+rax*1+0x20],cl
 1002383:	add    BYTE PTR [rbx+0x0],dl
 1002386:	add    BYTE PTR gs:[rdx+0x0],dh
 100238a:	jbe    0x100238c
 100238c:	add    BYTE PTR gs:[rdx+0x0],dh
 1002390:	and    BYTE PTR [rax],al
 1002392:	push   rdx
 1002393:	add    BYTE PTR [rbp+0x0],ah
 1002396:	jo     0x1002398
 1002398:	ins    BYTE PTR es:[rdi],dx
 1002399:	add    BYTE PTR [rcx+0x0],ch
 100239c:	movsxd eax,DWORD PTR [rax]
 100239e:	(bad)  
 100239f:	add    BYTE PTR [rax+rax*1+0x69],dh
 10023a3:	add    BYTE PTR [rdi+0x0],ch
 10023a6:	outs   dx,BYTE PTR ds:[rsi]
 10023a7:	add    BYTE PTR [rax],ah
 10023a9:	add    BYTE PTR [rcx+0x0],al
 10023ac:	add    BYTE PTR [ebp+0x0],ah
 10023b0:	outs   dx,BYTE PTR ds:[rsi]
 10023b1:	add    BYTE PTR [rax+rax*1+0x0],dh
 10023b5:	add    BYTE PTR [rax],al
 10023b7:	add    BYTE PTR [rax],ch
 10023b9:	add    BYTE PTR [rcx+0x0],al
 10023bc:	movsxd eax,DWORD PTR [rax]
 10023be:	je     0x10023c0
 10023c0:	imul   eax,DWORD PTR [rax],0x650076
 10023c6:	pop    rax
 10023c7:	add    BYTE PTR [rcx],ch
 10023c9:	add    BYTE PTR [rax],al
 10023cb:	add    BYTE PTR [rax],al
 10023cd:	add    BYTE PTR [rax],al
 10023cf:	add    BYTE PTR [rcx+0x0],al
 10023d2:	and    BYTE PTR [rax],al
 10023d4:	jb     0x10023d6
 10023d6:	add    BYTE PTR gs:[rax+0x0],dh
 10023da:	ins    BYTE PTR es:[rdi],dx
 10023db:	add    BYTE PTR [rcx+0x0],ch
 10023de:	movsxd eax,DWORD PTR [rax]
 10023e0:	(bad)  
 10023e1:	add    BYTE PTR [rax+rax*1+0x69],dh
 10023e5:	add    BYTE PTR [rdi+0x0],ch
 10023e8:	outs   dx,BYTE PTR ds:[rsi]
 10023e9:	add    BYTE PTR [rax],ah
 10023eb:	add    BYTE PTR [rcx+0x0],ah
 10023ee:	add    BYTE PTR [ebp+0x0],ah
 10023f2:	outs   dx,BYTE PTR ds:[rsi]
 10023f3:	add    BYTE PTR [rax+rax*1+0x20],dh
 10023f7:	add    BYTE PTR [rbp+0x0],ah
 10023fa:	outs   dx,BYTE PTR ds:[rsi]
 10023fb:	add    BYTE PTR [rbx+0x0],ah
 10023fe:	outs   dx,DWORD PTR ds:[rsi]
 10023ff:	add    BYTE PTR [rbp+0x0],dh
 1002402:	outs   dx,BYTE PTR ds:[rsi]
 1002403:	add    BYTE PTR [rax+rax*1+0x65],dh
 1002407:	add    BYTE PTR [rdx+0x0],dh
 100240a:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 100240f:	add    BYTE PTR [rcx+0x0],ah
 1002412:	and    BYTE PTR [rax],al
 1002414:	data16 add BYTE PTR [rcx+0x0],ah
 1002418:	je     0x100241a
 100241a:	(bad)  
 100241b:	add    BYTE PTR [rax+rax*1+0x20],ch
 100241f:	add    BYTE PTR [rbp+0x0],ah
 1002422:	jb     0x1002424
 1002424:	jb     0x1002426
 1002426:	outs   dx,DWORD PTR ds:[rsi]
 1002427:	add    BYTE PTR [rdx+0x0],dh
 100242a:	and    BYTE PTR [rax],al
 100242c:	(bad)  
 100242d:	add    BYTE PTR [rsi+0x0],ch
 1002430:	add    BYTE PTR fs:[rax],ah
 1002433:	add    BYTE PTR [rdi+0x0],dh
 1002436:	(bad)  
 1002437:	add    BYTE PTR [rbx+0x0],dh
 100243a:	and    BYTE PTR [rax],al
 100243c:	jae    0x100243e
 100243e:	push   0x74007500
 1002443:	add    BYTE PTR [rax],ah
 1002445:	add    BYTE PTR [rax+rax*1+0x6f],ah
 1002449:	add    BYTE PTR [rdi+0x0],dh
 100244c:	outs   dx,BYTE PTR ds:[rsi]
 100244d:	add    BYTE PTR [rsi],ch
	...
 100245f:	add    BYTE PTR [rcx+0x0],al
 1002462:	and    BYTE PTR [rax],al
 1002464:	ins    DWORD PTR es:[rdi],dx
 1002465:	add    BYTE PTR [rcx+0x0],ch
 1002468:	outs   dx,BYTE PTR ds:[rsi]
 1002469:	add    BYTE PTR [rcx+0x0],ch
 100246c:	sub    eax,0x75006400
 1002471:	add    BYTE PTR [rbp+0x0],ch
 1002474:	jo     0x1002476
 1002476:	and    BYTE PTR [rax],al
 1002478:	push   0x73006100
 100247d:	add    BYTE PTR [rax],ah
 100247f:	add    BYTE PTR [rdx+0x0],ah
 1002482:	add    BYTE PTR gs:[rbp+0x0],ah
 1002486:	outs   dx,BYTE PTR ds:[rsi]
 1002487:	add    BYTE PTR [rax],ah
 1002489:	add    BYTE PTR [rdi+0x0],ah
 100248c:	add    BYTE PTR gs:[rsi+0x0],ch
 1002490:	add    BYTE PTR gs:[rdx+0x0],dh
 1002494:	(bad)  
 1002495:	add    BYTE PTR [rax+rax*1+0x65],dh
 1002499:	add    BYTE PTR [rax+rax*1+0x20],ah
 100249d:	add    BYTE PTR [rcx+0x0],ah
 10024a0:	je     0x10024a2
 10024a2:	and    BYTE PTR [rax],al
 10024a4:	je     0x10024a6
 10024a6:	push   0x20006500
 10024ab:	add    BYTE PTR [rsi+0x0],ah
 10024ae:	outs   dx,DWORD PTR ds:[rsi]
 10024af:	add    BYTE PTR [rax+rax*1+0x6c],ch
 10024b3:	add    BYTE PTR [rdi+0x0],ch
 10024b6:	ja     0x10024b8
 10024b8:	imul   eax,DWORD PTR [rax],0x67006e
 10024be:	and    BYTE PTR [rax],al
 10024c0:	ins    BYTE PTR es:[rdi],dx
 10024c1:	add    BYTE PTR [rdi+0x0],ch
 10024c4:	movsxd eax,DWORD PTR [rax]
 10024c6:	(bad)  
 10024c7:	add    BYTE PTR [rax+rax*1+0x69],dh
 10024cb:	add    BYTE PTR [rdi+0x0],ch
 10024ce:	outs   dx,BYTE PTR ds:[rsi]
 10024cf:	add    BYTE PTR [rdx],bh
 10024d1:	add    BYTE PTR [rax],al
 10024d3:	add    BYTE PTR [rax],al
 10024d5:	add    BYTE PTR [rax],al
 10024d7:	add    BYTE PTR [rbp+rbp*2+0x70],al
 10024db:	rex.RXB
 10024dc:	gs je  0x1002522
 10024df:	ins    BYTE PTR es:[rdi],dx
 10024e0:	imul   esp,DWORD PTR [rbp+0x6e],0x70784574
 10024e7:	outs   dx,DWORD PTR ds:[rsi]
 10024e8:	jb     0x100255e
 10024ea:	add    BYTE PTR [rax],al
 10024ec:	add    BYTE PTR [rax],al
 10024ee:	add    BYTE PTR [rax],al
 10024f0:	and    eax,0x25005900
 10024f5:	add    BYTE PTR [rbp+0x0],ch
 10024f8:	and    eax,0x25006400
 10024fd:	add    BYTE PTR [rax+0x0],cl
 1002500:	and    eax,0x25004d00
 1002505:	add    BYTE PTR [rbx+0x0],dl
	...
 1002510:	and    eax,0x25007300
 1002515:	add    BYTE PTR [rbx+0x0],dh
 1002518:	and    eax,0x5f007300
 100251d:	add    BYTE PTR [rip+0x25006400],ah        # 0x26008923
 1002523:	add    BYTE PTR [rbx+0x0],dh
 1002526:	add    BYTE PTR [rax],al
 1002528:	or     al,BYTE PTR [rax]
 100252a:	or     al,BYTE PTR [rax]
 100252c:	add    BYTE PTR [rax],al
 100252e:	add    BYTE PTR [rax],al
 1002530:	or     al,BYTE PTR [rax]
 1002532:	add    BYTE PTR [rax],al
 1002534:	add    BYTE PTR [rax],al
 1002536:	add    BYTE PTR [rax],al
 1002538:	and    eax,0xa007300
 100253d:	add    BYTE PTR [rax],al
 100253f:	add    BYTE PTR [rip+0xa007300],ah        # 0xb009845
 1002545:	add    BYTE PTR [rdx],cl
	...
 100254f:	add    BYTE PTR [rbx+0x0],dl
 1002552:	push   rcx
 1002553:	add    BYTE PTR [rax+rax*1+0x53],cl
 1002557:	add    BYTE PTR [rbp+0x0],al
 100255a:	push   rdx
 100255b:	add    BYTE PTR [rsi+0x0],dl
 100255e:	add    BYTE PTR [r10+0x0],r10b
 1002562:	add    BYTE PTR [r15+0x0],al
 1002566:	add    BYTE PTR [r14+0x0],r9b
 100256a:	push   rsp
 100256b:	add    BYTE PTR [rax],al
 100256d:	add    BYTE PTR [rax],al
 100256f:	add    BYTE PTR [rdx+0x45],dl
 1002572:	push   rax
 1002573:	rex.WR push rdx
 1002575:	rex.RB push r11
 1002577:	cs push rdx
 1002579:	rex.WR
 100257a:	rex.WR add BYTE PTR [rax],r8b
 100257d:	add    BYTE PTR [rax],al
 100257f:	add    BYTE PTR [rdx+0x0],dl
 1002582:	add    BYTE PTR [r8+0x0],r10b
 1002586:	rex.WR add BYTE PTR [rdx+0x0],r10b
 100258a:	add    BYTE PTR [r11+0x0],r10b
 100258e:	add    BYTE PTR cs:[rdx+0x0],dl
 1002592:	rex.WR add BYTE PTR [rax+rax*1+0x0],r9b
 1002597:	add    al,dh
 1002599:	rol    DWORD PTR [rax],1
 100259b:	add    DWORD PTR [rax],eax
 100259d:	add    BYTE PTR [rax],al
 100259f:	add    BYTE PTR [rbx+0x65],ch
 10025a2:	jb     0x1002612
 10025a4:	gs ins BYTE PTR es:[rdi],dx
 10025a6:	xor    esi,DWORD PTR [rdx]
 10025a8:	cs fs ins BYTE PTR es:[rdi],dx
 10025ab:	ins    BYTE PTR es:[rdi],dx
 10025ac:	add    BYTE PTR [rax],al
 10025ae:	add    BYTE PTR [rax],al
 10025b0:	rex.RXB
 10025b1:	gs je  0x1002609
 10025b4:	jae    0x100261b
 10025b6:	jb     0x10025fc
 10025b8:	gs data16 (bad) 
 10025bb:	jne    0x1002629
 10025bd:	je     0x1002614
 10025bf:	rex.WB
 10025c0:	rex.WR (bad) 
 10025c2:	outs   dx,BYTE PTR ds:[rsi]
 10025c3:	addr32 jne 0x1002627
 10025c6:	add    BYTE PTR gs:[eax],al
 10025ca:	add    BYTE PTR [rax],al
 10025cc:	add    BYTE PTR [rax],al
 10025ce:	add    BYTE PTR [rax],al
 10025d0:	push   rbx
 10025d1:	je     0x1002645
 10025d3:	imul   ebp,DWORD PTR [rsi+0x67],0x616f4c20
 10025da:	and    BYTE PTR fs:[rbp+0x72],al
 10025de:	jb     0x100264f
 10025e0:	jb     0x10025e2
 10025e2:	add    BYTE PTR [rax],al
 10025e4:	add    BYTE PTR [rax],al
 10025e6:	add    BYTE PTR [rax],al
 10025e8:	rex.WB outs dx,BYTE PTR ds:[rsi]
 10025ea:	jbe    0x100264d
 10025ec:	ins    BYTE PTR es:[rdi],dx
 10025ed:	imul   esp,DWORD PTR [rax+riz*1+0x68],0x6c646e61
 10025f5:	and    BYTE PTR gs:[rcx+0x74],ah
 10025f9:	je     0x1002660
 10025fb:	ins    DWORD PTR es:[rdi],dx
 10025fc:	jo     0x1002672
 10025fe:	imul   ebp,DWORD PTR [rsi+0x67],0x206f7420
 1002605:	ins    BYTE PTR es:[rdi],dx
 1002606:	outs   dx,DWORD PTR ds:[rsi]
 1002607:	(bad)  
 1002608:	and    BYTE PTR fs:[rbp+0x65],ch
 100260c:	jae    0x1002681
 100260e:	(bad)  
 100260f:	and    BYTE PTR gs:[esi+0x72],ah
 1002614:	outs   dx,DWORD PTR ds:[rsi]
 1002615:	ins    DWORD PTR es:[rdi],dx
 1002616:	and    BYTE PTR [rdx+0x65],dh
 1002619:	jae    0x100268a
 100261b:	jne    0x100268f
 100261d:	movsxd esp,DWORD PTR [rbp+0x20]
 1002620:	rex.R
 1002621:	rex.WR
 1002622:	rex.WR
 1002623:	add    BYTE PTR cs:[rax],al
 1002626:	add    BYTE PTR [rax],al
 1002628:	pop    rsp
 1002629:	add    BYTE PTR [rax],al
 100262b:	add    BYTE PTR [rax],al
 100262d:	add    BYTE PTR [rax],al
 100262f:	add    BYTE PTR [rip+0x202d2073],ah        # 0x212d46a8
 1002635:	rex.R
 1002636:	rex.WR
 1002637:	rex.WR and BYTE PTR [rdi+rbp*2+0x61],r9b
 100263c:	and    BYTE PTR fs:[rbp+0x72],al
 1002640:	jb     0x10026b1
 1002642:	jb     0x1002644
 1002644:	add    BYTE PTR [rax],al
 1002646:	add    BYTE PTR [rax],al
 1002648:	rex.XB (bad) 
 100264a:	outs   dx,BYTE PTR ds:[rsi]
 100264b:	outs   dx,BYTE PTR ds:[rsi]
 100264c:	outs   dx,DWORD PTR ds:[rsi]
 100264d:	je     0x100266f
 100264f:	ins    BYTE PTR es:[rdi],dx
 1002650:	outs   dx,DWORD PTR ds:[rsi]
 1002651:	(bad)  
 1002652:	and    BYTE PTR fs:[rdx+0x65],dh
 1002656:	jae    0x10026c7
 1002658:	jne    0x10026cc
 100265a:	movsxd esp,DWORD PTR [rbp+0x20]
 100265d:	fs ins BYTE PTR es:[rdi],dx
 100265f:	ins    BYTE PTR es:[rdi],dx
 1002660:	cmp    ah,BYTE PTR [rax]
 1002662:	add    BYTE PTR [rax],al
 1002664:	or     cl,BYTE PTR [rdx]
 1002666:	add    BYTE PTR [rax],al
 1002668:	push   rdx
 1002669:	add    BYTE PTR [rbp+0x0],ah
 100266c:	jae    0x100266e
 100266e:	outs   dx,DWORD PTR ds:[rsi]
 100266f:	add    BYTE PTR [rbp+0x0],dh
 1002672:	jb     0x1002674
 1002674:	movsxd eax,DWORD PTR [rax]
 1002676:	add    BYTE PTR gs:[rbx+0x0],dh
 100267a:	pop    rsp
 100267b:	add    BYTE PTR [rax],al
 100267d:	add    BYTE PTR [rax],al
 100267f:	add    BYTE PTR [rip+0x7500],ah        # 0x1009b85
 1002685:	add    BYTE PTR [rax],al
 1002687:	add    BYTE PTR [rcx],ah
 1002689:	add    BYTE PTR [rbx+0x0],dl
 100268c:	and    DWORD PTR [rax],eax
 100268e:	add    BYTE PTR [rax],al
 1002690:	xor    BYTE PTR [rax],al
 1002692:	js     0x1002694
 1002694:	add    BYTE PTR [rax],al
 1002696:	add    BYTE PTR [rax],al
 1002698:	add    BYTE PTR [rax],al
 100269a:	add    BYTE PTR [rax+0x0],ah
 100269d:	add    al,0x0
 100269f:	(bad)  
 10026a0:	add    BYTE PTR [rax],cl
 10026a2:	add    BYTE PTR [rax+0x0],ah
 10026a5:	or     al,0x0
 10026a7:	(bad)  
 10026a8:	add    BYTE PTR [rax],dl
 10026aa:	add    BYTE PTR [rax+0x0],ah
 10026ad:	adc    al,0x0
 10026af:	(bad)  
 10026b0:	add    BYTE PTR [rax],bl
 10026b2:	add    BYTE PTR [rax+0x0],ah
 10026b5:	sbb    al,0x0
 10026b7:	(bad)  
 10026b8:	add    BYTE PTR [rax],ah
 10026ba:	add    BYTE PTR [rax+0x0],ah
 10026bd:	and    al,0x0
 10026bf:	(bad)  
 10026c0:	add    BYTE PTR [rax],ch
 10026c2:	add    BYTE PTR [rax+0x0],ah
 10026c5:	xor    BYTE PTR [rax],al
 10026c7:	(bad)  
 10026c8:	add    BYTE PTR [rax+rax*1],dh
 10026cb:	(bad)  
 10026cc:	add    BYTE PTR [rax],bh
 10026ce:	add    BYTE PTR [rax+0x0],ah
 10026d1:	cmp    al,0x0
 10026d3:	(bad)  
 10026d4:	add    BYTE PTR [rax+0x0],al
 10026d7:	(bad)  
 10026d8:	add    BYTE PTR [rax+rax*1+0x60],cl
 10026dc:	add    BYTE PTR [rax+0x0],dl
 10026df:	(bad)  
 10026e0:	add    BYTE PTR [rax+rax*1+0x60],dl
 10026e4:	add    BYTE PTR [rax+0x0],bl
 10026e7:	(bad)  
 10026e8:	add    BYTE PTR [rax+rax*1+0x60],bl
 10026ec:	add    BYTE PTR [rax],al
 10026ee:	add    BYTE PTR [rax],al
 10026f0:	and    al,BYTE PTR [rip+0x21993]        # 0x1024089
 10026f6:	add    BYTE PTR [rax],al
 10026f8:	in     al,dx
 10026f9:	out    dx,al
 10026fa:	add    DWORD PTR [rax],eax
	...
 1002704:	add    eax,0xfc000000
 1002709:	out    dx,al
 100270a:	add    DWORD PTR [rax],eax
 100270c:	and    BYTE PTR [rax],al
 100270e:	add    BYTE PTR [rax],al
 1002710:	add    BYTE PTR [rax],al
 1002712:	add    BYTE PTR [rax],al
 1002714:	add    DWORD PTR [rax],eax
 1002716:	add    BYTE PTR [rax],al
 1002718:	and    al,BYTE PTR [rip+0x31993]        # 0x10340b1
 100271e:	add    BYTE PTR [rax],al
 1002720:	push   rsp
 1002721:	out    dx,eax
 1002722:	add    DWORD PTR [rax],eax
	...
 100272c:	(bad)  
 100272d:	add    BYTE PTR [rax],al
 100272f:	add    BYTE PTR [rdi+rbp*8+0x1],ch
 1002733:	add    BYTE PTR [rax+0x0],ah
 1002736:	add    BYTE PTR [rax],al
 1002738:	add    BYTE PTR [rax],al
 100273a:	add    BYTE PTR [rax],al
 100273c:	add    DWORD PTR [rax],eax
 100273e:	add    BYTE PTR [rax],al
 1002740:	push   rbx
 1002741:	add    BYTE PTR [rax+0x0],ch
 1002744:	(bad)  
 1002745:	add    BYTE PTR [rdx+0x0],dh
 1002748:	add    BYTE PTR gs:[rax+rax*1+0x43],ah
 100274d:	add    BYTE PTR [rdi+0x0],ch
 1002750:	add    BYTE PTR fs:[rbp+0x0],ah
 1002754:	add    BYTE PTR [rax],al
 1002756:	add    BYTE PTR [rax],al
 1002758:	rex.RX (bad) 
 100275a:	imul   ebp,DWORD PTR [rbp+riz*2+0x64],0x206f7420
 1002762:	jb     0x10027c9
 1002764:	(bad)  
 1002765:	and    BYTE PTR fs:[rdx+0x65],dh
 1002769:	imul   esi,DWORD PTR [ebx+0x74],0x66207972
 1002771:	outs   dx,DWORD PTR ds:[rsi]
 1002772:	jb     0x1002794
 1002774:	js     0x10027db
 1002776:	cs fs ins BYTE PTR es:[rdi],dx
 1002779:	ins    BYTE PTR es:[rdi],dx
 100277a:	and    BYTE PTR [rdi+rbp*2+0x63],ch
 100277e:	(bad)  
 100277f:	je     0x10027ea
 1002781:	outs   dx,DWORD PTR ds:[rsi]
 1002782:	outs   dx,BYTE PTR ds:[rsi]
 1002783:	or     al,BYTE PTR cs:[rax]
 1002786:	add    BYTE PTR [rax],al
 1002788:	js     0x100278a
 100278a:	add    BYTE PTR gs:[rsi],ch
 100278d:	add    BYTE PTR [rax+rax*1+0x6c],ah
 1002791:	add    BYTE PTR [rax+rax*1+0x0],ch
 1002795:	add    BYTE PTR [rax],al
 1002797:	add    BYTE PTR [rsi+0x61],al
 100279a:	imul   ebp,DWORD PTR [rbp+riz*2+0x64],0x206f7420
 10027a2:	(bad)  
 10027a3:	jne    0x100280e
 10027a5:	ins    BYTE PTR es:[rdi],dx
 10027a6:	and    BYTE PTR fs:[rax+0x61],dh
 10027aa:	je     0x1002814
 10027ac:	and    BYTE PTR [rsi+0x6f],ah
 10027af:	jb     0x10027d1
 10027b1:	js     0x1002818
 10027b3:	cs fs ins BYTE PTR es:[rdi],dx
 10027b6:	ins    BYTE PTR es:[rdi],dx
 10027b7:	and    BYTE PTR [rdi+rbp*2+0x63],ch
 10027bb:	(bad)  
 10027bc:	je     0x1002827
 10027be:	outs   dx,DWORD PTR ds:[rsi]
 10027bf:	outs   dx,BYTE PTR ds:[rsi]
 10027c0:	or     al,BYTE PTR cs:[rax]
 10027c3:	add    BYTE PTR [rax],al
 10027c5:	add    BYTE PTR [rax],al
 10027c7:	add    BYTE PTR [rsi+0x61],al
 10027ca:	imul   ebp,DWORD PTR [rbp+riz*2+0x64],0x206f7420
 10027d2:	ins    BYTE PTR es:[rdi],dx
 10027d3:	outs   dx,DWORD PTR ds:[rsi]
 10027d4:	(bad)  
 10027d5:	and    BYTE PTR fs:[rax+0x65],bh
 10027d9:	cs fs ins BYTE PTR es:[rdi],dx
 10027dc:	ins    BYTE PTR es:[rdi],dx
 10027dd:	or     al,BYTE PTR cs:[rax]
 10027e0:	rex.RX (bad) 
 10027e2:	imul   ebp,DWORD PTR [rbp+riz*2+0x64],0x206f7420
 10027ea:	imul   ebp,DWORD PTR [rsi+0x69],0x6c616974
 10027f1:	imul   edi,DWORD PTR [rdx+0x65],0x65687420
 10027f8:	and    BYTE PTR [rax+0x45],bl
 10027fb:	and    BYTE PTR [rbx+0x6c],al
 10027fe:	imul   esp,DWORD PTR [rbp+0x6e],0x49504174
 1002805:	and    BYTE PTR cs:[rdx],cl
	...
 1002810:	rex.RX (bad) 
 1002812:	imul   ebp,DWORD PTR [rbp+riz*2+0x64],0x206f7420
 100281a:	outs   dx,BYTE PTR gs:[rsi]
 100281c:	(bad)  
 100281d:	(bad)  
 100281e:	ins    BYTE PTR es:[rdi],dx
 100281f:	and    BYTE PTR gs:[rax+0x45],bl
 1002823:	and    BYTE PTR [rcx+rbp*2+0x61],ah
 1002827:	outs   dx,BYTE PTR ds:[esi]
 1002829:	outs   dx,DWORD PTR ds:[rsi]
 100282a:	jae    0x10028a0
 100282c:	imul   esp,DWORD PTR [rbx+0x73],0xa202e
 1002833:	add    BYTE PTR [rax],al
 1002835:	add    BYTE PTR [rax],al
 1002837:	add    BYTE PTR [rsi+0x61],al
 100283a:	imul   ebp,DWORD PTR [rbp+riz*2+0x64],0x206f7420
 1002842:	imul   ebp,DWORD PTR [rsi+0x69],0x6c616974
 1002849:	imul   edi,DWORD PTR [rdx+0x65],0x65687420
 1002850:	and    BYTE PTR [rax+0x45],bl
 1002853:	and    BYTE PTR [rax+0x61],dl
 1002856:	movsxd ebp,DWORD PTR [rbx+0x61]
 1002859:	addr32 gs rex.WRB (bad) 
 100285d:	outs   dx,BYTE PTR ds:[rsi]
 100285e:	(bad)  
 100285f:	addr32 gs jb 0x1002891
 1002863:	and    BYTE PTR [rdx],cl
 1002865:	add    BYTE PTR [rax],al
 1002867:	add    BYTE PTR [rsi+0x61],al
 100286a:	imul   ebp,DWORD PTR [rbp+riz*2+0x64],0x206f7420
 1002872:	(bad)  
 1002873:	ins    BYTE PTR es:[rdi],dx
 1002874:	ins    BYTE PTR es:[rdi],dx
 1002875:	outs   dx,DWORD PTR ds:[rsi]
 1002876:	movsxd esp,DWORD PTR [rcx+0x74]
 1002879:	and    BYTE PTR gs:[rax+0x45],bl
 100287d:	and    BYTE PTR [rbx+0x6f],ah
 1002880:	outs   dx,BYTE PTR ds:[rsi]
 1002881:	imul   sp,WORD PTR [rdi+0x20],0x7473
 1002887:	outs   dx,DWORD PTR ds:[rsi]
 1002888:	jb     0x10028ef
 100288a:	and    BYTE PTR cs:[rdx],cl
 100288d:	add    BYTE PTR [rax],al
 100288f:	add    BYTE PTR [rax+0x0],dl
 1002892:	(bad)  
 1002893:	add    BYTE PTR [rbx+0x0],ah
 1002896:	imul   eax,DWORD PTR [rax],0x61
 1002899:	add    BYTE PTR [rdi+0x0],ah
 100289c:	add    BYTE PTR gs:[rax],dh
 100289f:	add    BYTE PTR [rsi],ch
 10028a1:	add    BYTE PTR [rdx+0x0],dh
 10028a4:	imul   eax,DWORD PTR [rax],0x67006e
 10028aa:	pop    rdi
 10028ab:	add    BYTE PTR [rdx+0x0],ah
 10028ae:	jne    0x10028b0
 10028b0:	data16 add BYTE PTR [rsi+0x0],ah
 10028b4:	add    BYTE PTR gs:[rdx+0x0],dh
	...
 10028c0:	push   rax
 10028c1:	add    BYTE PTR [rcx+0x0],ah
 10028c4:	movsxd eax,DWORD PTR [rax]
 10028c6:	imul   eax,DWORD PTR [rax],0x61
 10028c9:	add    BYTE PTR [rdi+0x0],ah
 10028cc:	add    BYTE PTR gs:[rax],dh
 10028cf:	add    BYTE PTR [rsi],ch
 10028d1:	add    BYTE PTR [rbp+0x0],ah
 10028d4:	jbe    0x10028d6
 10028d6:	add    BYTE PTR gs:[rsi+0x0],ch
 10028da:	je     0x10028dc
 10028dc:	pop    rdi
 10028dd:	add    BYTE PTR [rsi+0x0],ah
 10028e0:	imul   eax,DWORD PTR [rax],0x65006c
 10028e6:	add    BYTE PTR [rax],al
 10028e8:	mov    dh,0xc6
 10028ea:	or     eax,0x2decb41d
 10028ef:	stos   BYTE PTR es:[rdi],al
 10028f1:	rcr    DWORD PTR [rcx],cl
 10028f3:	in     al,0x4d
 10028f5:	outs   dx,BYTE PTR ds:[rsi]
 10028f6:	mov    esi,0x8320743a
 10028fb:	mov    gs,WORD PTR [rdx-0x5]
 10028fe:	cmovo  ecx,DWORD PTR [rdi-0x1d111e97]
 1002905:	mov    dl,0xdc
 1002907:	nop
 1002908:	jb     0x100290a
 100290a:	add    BYTE PTR gs:[rax+0x0],dh
 100290e:	ins    BYTE PTR es:[rdi],dx
 100290f:	add    BYTE PTR [rbx+0x0],ah
 1002912:	outs   dx,DWORD PTR ds:[rsi]
 1002913:	add    BYTE PTR [rbp+0x0],ch
 1002916:	ins    DWORD PTR es:[rdi],dx
 1002917:	add    BYTE PTR [rdi+0x0],ch
 100291a:	outs   dx,BYTE PTR ds:[rsi]
 100291b:	add    BYTE PTR [rax],al
 100291d:	add    BYTE PTR [rax],al
 100291f:	add    BYTE PTR [rdx+0x0],dl
 1002922:	add    BYTE PTR gs:[rax+0x0],dh
 1002926:	ins    BYTE PTR es:[rdi],dx
 1002927:	add    BYTE PTR [rcx+0x0],ch
 100292a:	movsxd eax,DWORD PTR [rax]
 100292c:	(bad)  
 100292d:	add    BYTE PTR [rax+rax*1+0x69],dh
 1002931:	add    BYTE PTR [rdi+0x0],ch
 1002934:	outs   dx,BYTE PTR ds:[rsi]
 1002935:	add    BYTE PTR [rax],ah
 1002937:	add    BYTE PTR [rax+0x0],dh
 100293a:	(bad)  
 100293b:	add    BYTE PTR [rbx+0x0],ah
 100293e:	imul   eax,DWORD PTR [rax],0x61
 1002941:	add    BYTE PTR [rdi+0x0],ah
 1002944:	add    BYTE PTR gs:[rax],ah
 1002947:	add    BYTE PTR [rsi+0x0],ah
 100294a:	outs   dx,DWORD PTR ds:[rsi]
 100294b:	add    BYTE PTR [rdx+0x0],dh
 100294e:	and    BYTE PTR [rax],al
 1002950:	jb     0x1002952
 1002952:	add    BYTE PTR gs:[rax+0x0],dh
 1002956:	ins    BYTE PTR es:[rdi],dx
 1002957:	add    BYTE PTR [rbx+0x0],ah
 100295a:	outs   dx,DWORD PTR ds:[rsi]
 100295b:	add    BYTE PTR [rbp+0x0],ch
 100295e:	ins    DWORD PTR es:[rdi],dx
 100295f:	add    BYTE PTR [rdi+0x0],ch
 1002962:	outs   dx,BYTE PTR ds:[rsi]
 1002963:	add    BYTE PTR [rax],al
 1002965:	add    BYTE PTR [rax],al
 1002967:	add    dl,dl
 1002969:	(bad)  
 100296a:	(bad)  
 100296b:	rex.WRX mov r13,QWORD PTR [rsi]
 100296e:	in     eax,0x4f
 1002970:	mov    esi,0xde0421c3
 1002975:	adc    cl,BYTE PTR [rbp+0x2c22000f]
 100297b:	repz (bad) 
 100297d:	xchg   ebx,eax
 100297e:	fisttp WORD PTR [rsi-0x61]
 1002981:	(bad)  
 1002982:	lea    ecx,[rsi]
 1002984:	jns    0x10029c5
 1002986:	shr    DWORD PTR [rdi],1
 1002988:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1002989:	jne    0x10029ee
 100298b:	int    0x8a
 100298d:	rex
 100298e:	rex.WRX
 100298f:	rex.W test al,0x91
 1002992:	rex.XB (bad) 
 1002994:	cmp    al,0xd4
 1002996:	push   rcx
 1002997:	test   eax,0xb44d73c4
 100299c:	cli    
 100299d:	xchg   ecx,eax
 100299e:	sub    BYTE PTR [rbx-0x44],cl
 10029a1:	(bad)  
 10029a2:	pop    rsi
 10029a3:	pop    rsp
 10029a4:	out    0xe8,eax
 10029a6:	xor    edi,ecx
 10029a8:	lahf   
 10029a9:	movabs ds:0x588c4a2810c2be15,eax
 10029b2:	xor    dl,BYTE PTR [rbp-0x1be0f0ef]
 10029b8:	jbe    0x10029f7
 10029ba:	mov    al,0xd2
 10029bc:	mul    DWORD PTR [rsi]
 10029be:	add    al,0x48
 10029c0:	mov    bl,0xfa
 10029c2:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 10029c3:	push   rdi
 10029c4:	fcom   st(4)
 10029c6:	imul   edi,DWORD PTR [rdi+0x0],0x0
 10029ca:	add    BYTE PTR [rax+0x0],ah
 10029cd:	add    al,0x0
 10029cf:	(bad)  
 10029d0:	add    BYTE PTR [rax],cl
 10029d2:	add    BYTE PTR [rax+0x0],ah
 10029d5:	or     al,0x0
 10029d7:	(bad)  
 10029d8:	add    BYTE PTR [rax],dl
 10029da:	add    BYTE PTR [rax+0x0],ah
 10029dd:	adc    al,0x0
 10029df:	(bad)  
 10029e0:	add    BYTE PTR [rax],bl
 10029e2:	add    BYTE PTR [rax+0x0],ah
 10029e5:	sbb    al,0x0
 10029e7:	(bad)  
 10029e8:	add    BYTE PTR [rax],ah
 10029ea:	add    BYTE PTR [rax+0x0],ah
 10029ed:	and    al,0x0
 10029ef:	(bad)  
 10029f0:	add    BYTE PTR [rax],ch
 10029f2:	add    BYTE PTR [rax+0x0],ah
 10029f5:	xor    BYTE PTR [rax],al
 10029f7:	(bad)  
 10029f8:	add    BYTE PTR [rax+rax*1],dh
 10029fb:	(bad)  
 10029fc:	add    BYTE PTR [rax],bh
 10029fe:	add    BYTE PTR [rax+0x0],ah
 1002a01:	cmp    al,0x0
 1002a03:	(bad)  
 1002a04:	add    BYTE PTR [rax+0x0],al
 1002a07:	(bad)  
 1002a08:	add    BYTE PTR [rax+rax*1+0x60],cl
 1002a0c:	add    BYTE PTR [rax+0x0],dl
 1002a0f:	(bad)  
 1002a10:	add    BYTE PTR [rax+rax*1+0x60],dl
 1002a14:	add    BYTE PTR [rax+0x0],bl
 1002a17:	(bad)  
 1002a18:	add    BYTE PTR [rax+rax*1+0x60],bl
 1002a1c:	add    BYTE PTR [rax+rax*1],al
 1002a1f:	xor    BYTE PTR [rax+0x1001e],cl
 1002a25:	add    BYTE PTR [rax],al
 1002a27:	add    BYTE PTR [rax+0x1c],ah
 1002a2a:	add    r9,QWORD PTR [r8-0x5e]
 1002a2e:	rex.WRB
 1002a2f:	rex.XB mov r8b,0xd0
 1002a32:	cmp    al,0xb9
 1002a34:	and    al,0x5a
 1002a36:	mov    ebp,DWORD PTR [rdi-0x46]
 1002a39:	jrcxz  0x10029da
 1002a3b:	icebp  
 1002a3c:	(bad)
 1002a3f:	rex.X test DWORD PTR [rdi],ebx
 1002a42:	nop
 1002a43:	sahf   
 1002a44:	or     DWORD PTR [rdx],ebx
 1002a46:	push   rcx
 1002a47:	cmp    eax,0x51f994dc
 1002a4c:	adc    cl,BYTE PTR ss:[rbp-0x75]
 1002a51:	iret   
 1002a52:	(bad)  
 1002a53:	sub    eax,0x4ee5ab61
 1002a58:	and    al,BYTE PTR [rip+0x11993]        # 0x10143f1
 1002a5e:	add    BYTE PTR [rax],al
 1002a60:	xchg   esp,eax
 1002a61:	lock add DWORD PTR [rax],eax
	...
 1002a6c:	add    eax,DWORD PTR [rax]
 1002a6e:	add    BYTE PTR [rax],al
 1002a70:	pushf  
 1002a71:	lock add DWORD PTR [rax],eax
 1002a74:	and    BYTE PTR [rax],al
 1002a76:	add    BYTE PTR [rax],al
 1002a78:	add    BYTE PTR [rax],al
 1002a7a:	add    BYTE PTR [rax],al
 1002a7c:	add    DWORD PTR [rax],eax
 1002a7e:	add    BYTE PTR [rax],al
 1002a80:	pop    rax
 1002a81:	add    BYTE PTR [rbp+0x0],ah
 1002a84:	push   rdx
 1002a85:	add    BYTE PTR [rbp+0x0],ah
 1002a88:	jo     0x1002a8a
 1002a8a:	ins    BYTE PTR es:[rdi],dx
 1002a8b:	add    BYTE PTR [rbx+0x0],al
 1002a8e:	outs   dx,DWORD PTR ds:[rsi]
 1002a8f:	add    BYTE PTR [rbp+0x0],ch
 1002a92:	ins    DWORD PTR es:[rdi],dx
 1002a93:	add    BYTE PTR [rdi+0x0],ch
 1002a96:	outs   dx,BYTE PTR ds:[rsi]
 1002a97:	add    BYTE PTR [rax+0x0],dl
 1002a9a:	imul   eax,DWORD PTR [rax],0x67
 1002a9d:	add    BYTE PTR [rsi],ch
 1002a9f:	add    BYTE PTR [rdx+0x0],dh
 1002aa2:	ins    BYTE PTR es:[rdi],dx
 1002aa3:	add    BYTE PTR [rax+rax*1+0x0],ch
 1002aa7:	add    BYTE PTR [rax+rax*1+0x69],dl
 1002aab:	add    BYTE PTR [rbp+0x0],ch
 1002aae:	add    BYTE PTR gs:[rbp+0x0],cl
 1002ab2:	push   rbx
	...
 1002abf:	add    BYTE PTR [rdx+0x0],dh
 1002ac2:	add    BYTE PTR gs:[rax+0x0],dh
 1002ac6:	ins    BYTE PTR es:[rdi],dx
 1002ac7:	add    BYTE PTR [rdi+0x0],bl
 1002aca:	ins    BYTE PTR es:[rdi],dx
 1002acb:	add    BYTE PTR [rdi+0x0],ch
 1002ace:	add    BYTE PTR [edx+0x0],dh
 1002ad2:	add    BYTE PTR gs:[rcx+0x0],ah
 1002ad6:	add    BYTE PTR fs:[rdi+0x0],bl
 1002ada:	jb     0x1002adc
 1002adc:	add    BYTE PTR gs:[rcx+0x0],ah
 1002ae0:	add    BYTE PTR fs:[rbp+0x0],ah
 1002ae4:	jb     0x1002ae6
 1002ae6:	pop    rdi
 1002ae7:	add    BYTE PTR [rdi+0x0],dh
 1002aea:	(bad)  
 1002aeb:	add    BYTE PTR [rcx+0x0],ch
 1002aee:	je     0x1002af0
 1002af0:	imul   eax,DWORD PTR [rax],0x67006e
 1002af6:	pop    rdi
 1002af7:	add    BYTE PTR [rdi+0x0],ch
 1002afa:	outs   dx,BYTE PTR ds:[rsi]
 1002afb:	add    BYTE PTR [rdi+0x0],bl
 1002afe:	ja     0x1002b00
 1002b00:	jb     0x1002b02
 1002b02:	imul   eax,DWORD PTR [rax],0x650074
 1002b08:	jb     0x1002b0a
 1002b0a:	add    BYTE PTR [rax],al
 1002b0c:	add    BYTE PTR [rax],al
 1002b0e:	add    BYTE PTR [rax],al
 1002b10:	rex.WR add BYTE PTR [rdi+0x0],r13b
 1002b14:	add    BYTE PTR [edx+0x0],dh
 1002b18:	add    BYTE PTR gs:[rcx+0x0],ah
 1002b1c:	add    BYTE PTR fs:[rax],ah
 1002b1f:	add    BYTE PTR [rdx+0x0],dh
 1002b22:	add    BYTE PTR gs:[rcx+0x0],ah
 1002b26:	add    BYTE PTR fs:[rbp+0x0],ah
 1002b2a:	jb     0x1002b2c
 1002b2c:	and    BYTE PTR [rax],al
 1002b2e:	je     0x1002b30
 1002b30:	push   0x65007200
 1002b35:	add    BYTE PTR [rcx+0x0],ah
 1002b38:	add    BYTE PTR fs:[rax],ah
 1002b3b:	add    BYTE PTR [rcx+0x0],ch
 1002b3e:	jae    0x1002b40
 1002b40:	and    BYTE PTR [rax],al
 1002b42:	ja     0x1002b44
 1002b44:	(bad)  
 1002b45:	add    BYTE PTR [rcx+0x0],ch
 1002b48:	je     0x1002b4a
 1002b4a:	imul   eax,DWORD PTR [rax],0x67006e
 1002b50:	and    BYTE PTR [rax],al
 1002b52:	outs   dx,DWORD PTR ds:[rsi]
 1002b53:	add    BYTE PTR [rsi+0x0],ch
 1002b56:	and    BYTE PTR [rax],al
 1002b58:	je     0x1002b5a
 1002b5a:	push   0x20006500
 1002b5f:	add    BYTE PTR [rdi+0x0],dh
 1002b62:	jb     0x1002b64
 1002b64:	imul   eax,DWORD PTR [rax],0x650074
 1002b6a:	jb     0x1002b6c
 1002b6c:	and    BYTE PTR [rax],al
 1002b6e:	je     0x1002b70
 1002b70:	push   0x65007200
 1002b75:	add    BYTE PTR [rcx+0x0],ah
 1002b78:	add    BYTE PTR fs:[rsi],ch
 1002b7b:	add    BYTE PTR [rax],al
 1002b7d:	add    BYTE PTR [rax],al
 1002b7f:	add    BYTE PTR [rdx+0x0],dh
 1002b82:	add    BYTE PTR gs:[rax+0x0],dh
 1002b86:	ins    BYTE PTR es:[rdi],dx
 1002b87:	add    BYTE PTR [rdi+0x0],bl
 1002b8a:	ins    BYTE PTR es:[rdi],dx
 1002b8b:	add    BYTE PTR [rdi+0x0],ch
 1002b8e:	add    BYTE PTR [edx+0x0],dh
 1002b92:	add    BYTE PTR gs:[rcx+0x0],ah
 1002b96:	add    BYTE PTR fs:[rdi+0x0],bl
 1002b9a:	ja     0x1002b9c
 1002b9c:	jb     0x1002b9e
 1002b9e:	imul   eax,DWORD PTR [rax],0x650074
 1002ba4:	jb     0x1002ba6
 1002ba6:	pop    rdi
 1002ba7:	add    BYTE PTR [rdi+0x0],dh
 1002baa:	(bad)  
 1002bab:	add    BYTE PTR [rcx+0x0],ch
 1002bae:	je     0x1002bb0
 1002bb0:	imul   eax,DWORD PTR [rax],0x67006e
 1002bb6:	pop    rdi
 1002bb7:	add    BYTE PTR [rdi+0x0],ch
 1002bba:	outs   dx,BYTE PTR ds:[rsi]
 1002bbb:	add    BYTE PTR [rdi+0x0],bl
 1002bbe:	jb     0x1002bc0
 1002bc0:	add    BYTE PTR gs:[rcx+0x0],ah
 1002bc4:	add    BYTE PTR fs:[rbp+0x0],ah
 1002bc8:	jb     0x1002bca
 1002bca:	add    BYTE PTR [rax],al
 1002bcc:	add    BYTE PTR [rax],al
 1002bce:	add    BYTE PTR [rax],al
 1002bd0:	rex.WR add BYTE PTR [rdi+0x0],r13b
 1002bd4:	add    BYTE PTR [edx+0x0],dh
 1002bd8:	add    BYTE PTR gs:[rcx+0x0],ah
 1002bdc:	add    BYTE PTR fs:[rax],ah
 1002bdf:	add    BYTE PTR [rdi+0x0],dh
 1002be2:	jb     0x1002be4
 1002be4:	imul   eax,DWORD PTR [rax],0x650074
 1002bea:	jb     0x1002bec
 1002bec:	and    BYTE PTR [rax],al
 1002bee:	je     0x1002bf0
 1002bf0:	push   0x65007200
 1002bf5:	add    BYTE PTR [rcx+0x0],ah
 1002bf8:	add    BYTE PTR fs:[rax],ah
 1002bfb:	add    BYTE PTR [rcx+0x0],ch
 1002bfe:	jae    0x1002c00
 1002c00:	and    BYTE PTR [rax],al
 1002c02:	ja     0x1002c04
 1002c04:	(bad)  
 1002c05:	add    BYTE PTR [rcx+0x0],ch
 1002c08:	je     0x1002c0a
 1002c0a:	imul   eax,DWORD PTR [rax],0x67006e
 1002c10:	and    BYTE PTR [rax],al
 1002c12:	outs   dx,DWORD PTR ds:[rsi]
 1002c13:	add    BYTE PTR [rsi+0x0],ch
 1002c16:	and    BYTE PTR [rax],al
 1002c18:	je     0x1002c1a
 1002c1a:	push   0x20006500
 1002c1f:	add    BYTE PTR [rdx+0x0],dh
 1002c22:	add    BYTE PTR gs:[rcx+0x0],ah
 1002c26:	add    BYTE PTR fs:[rbp+0x0],ah
 1002c2a:	jb     0x1002c2c
 1002c2c:	and    BYTE PTR [rax],al
 1002c2e:	je     0x1002c30
 1002c30:	push   0x65007200
 1002c35:	add    BYTE PTR [rcx+0x0],ah
 1002c38:	add    BYTE PTR fs:[rsi],ch
 1002c3b:	add    BYTE PTR [rax],al
 1002c3d:	add    BYTE PTR [rax],al
 1002c3f:	add    BYTE PTR [rdx+0x0],dh
 1002c42:	add    BYTE PTR gs:[rax+0x0],dh
 1002c46:	ins    BYTE PTR es:[rdi],dx
 1002c47:	add    BYTE PTR [rdi+0x0],bl
 1002c4a:	add    BYTE PTR fs:[rcx+0x0],ch
 1002c4e:	jae    0x1002c50
 1002c50:	je     0x1002c52
 1002c52:	jb     0x1002c54
 1002c54:	imul   eax,DWORD PTR [rax],0x5f0062
 1002c5a:	jb     0x1002c5c
 1002c5c:	add    BYTE PTR gs:[rcx+0x0],ah
 1002c60:	add    BYTE PTR fs:[rbp+0x0],ah
 1002c64:	jb     0x1002c66
 1002c66:	pop    rdi
 1002c67:	add    BYTE PTR [rdi+0x0],dh
 1002c6a:	(bad)  
 1002c6b:	add    BYTE PTR [rcx+0x0],ch
 1002c6e:	je     0x1002c70
 1002c70:	imul   eax,DWORD PTR [rax],0x67006e
 1002c76:	pop    rdi
 1002c77:	add    BYTE PTR [rax+0x0],dh
 1002c7a:	outs   dx,DWORD PTR ds:[rsi]
 1002c7b:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1002c7f:	add    BYTE PTR [rcx+0x0],ch
 1002c82:	outs   dx,BYTE PTR ds:[rsi]
 1002c83:	add    BYTE PTR [rdi+0x0],ah
 1002c86:	pop    rdi
 1002c87:	add    BYTE PTR [rcx+0x0],ch
 1002c8a:	outs   dx,BYTE PTR ds:[rsi]
 1002c8b:	add    BYTE PTR [rax+rax*1+0x65],dh
 1002c8f:	add    BYTE PTR [rdx+0x0],dh
 1002c92:	jbe    0x1002c94
 1002c94:	(bad)  
 1002c95:	add    BYTE PTR [rax+rax*1+0x0],ch
 1002c99:	add    BYTE PTR [rax],al
 1002c9b:	add    BYTE PTR [rax],al
 1002c9d:	add    BYTE PTR [rax],al
 1002c9f:	add    BYTE PTR [rax+rax*1+0x69],al
 1002ca3:	add    BYTE PTR [rbx+0x0],dh
 1002ca6:	je     0x1002ca8
 1002ca8:	jb     0x1002caa
 1002caa:	imul   eax,DWORD PTR [rax],0x200062
 1002cb0:	jb     0x1002cb2
 1002cb2:	add    BYTE PTR gs:[rcx+0x0],ah
 1002cb6:	add    BYTE PTR fs:[rbp+0x0],ah
 1002cba:	jb     0x1002cbc
 1002cbc:	and    BYTE PTR [rax],al
 1002cbe:	je     0x1002cc0
 1002cc0:	push   0x65007200
 1002cc5:	add    BYTE PTR [rcx+0x0],ah
 1002cc8:	add    BYTE PTR fs:[rax],ah
 1002ccb:	add    BYTE PTR [rcx+0x0],ch
 1002cce:	jae    0x1002cd0
 1002cd0:	and    BYTE PTR [rax],al
 1002cd2:	imul   eax,DWORD PTR [rax],0x6c0064
 1002cd8:	add    BYTE PTR gs:[rax],ah
 1002cdb:	add    BYTE PTR [rdx+0x0],ah
 1002cde:	add    BYTE PTR gs:[rbx+0x0],ah
 1002ce2:	(bad)  
 1002ce3:	add    BYTE PTR [rbp+0x0],dh
 1002ce6:	jae    0x1002ce8
 1002ce8:	add    BYTE PTR gs:[rax],ah
 1002ceb:	add    BYTE PTR [rax+rax*1+0x68],dh
 1002cef:	add    BYTE PTR [rbp+0x0],ah
 1002cf2:	jb     0x1002cf4
 1002cf4:	add    BYTE PTR gs:[rax],ah
 1002cf7:	add    BYTE PTR [rcx+0x0],ah
 1002cfa:	jb     0x1002cfc
 1002cfc:	add    BYTE PTR gs:[rax],ah
 1002cff:	add    BYTE PTR [rsi+0x0],ch
 1002d02:	outs   dx,DWORD PTR ds:[rsi]
 1002d03:	add    BYTE PTR [rax],ah
 1002d05:	add    BYTE PTR [rdx+0x0],dh
 1002d08:	add    BYTE PTR gs:[rax+0x0],dh
 1002d0c:	ins    BYTE PTR es:[rdi],dx
 1002d0d:	add    BYTE PTR [rcx+0x0],ch
 1002d10:	movsxd eax,DWORD PTR [rax]
 1002d12:	(bad)  
 1002d13:	add    BYTE PTR [rax+rax*1+0x65],dh
 1002d17:	add    BYTE PTR [rax+rax*1+0x20],ah
 1002d1b:	add    BYTE PTR [rbx+0x0],ah
 1002d1e:	outs   dx,DWORD PTR ds:[rsi]
 1002d1f:	add    BYTE PTR [rbp+0x0],ch
 1002d22:	ins    DWORD PTR es:[rdi],dx
 1002d23:	add    BYTE PTR [rcx+0x0],ah
 1002d26:	outs   dx,BYTE PTR ds:[rsi]
 1002d27:	add    BYTE PTR [rax+rax*1+0x73],ah
 1002d2b:	add    BYTE PTR [rax],ah
 1002d2d:	add    BYTE PTR [rcx+0x0],ah
 1002d30:	jbe    0x1002d32
 1002d32:	(bad)  
 1002d33:	add    BYTE PTR [rcx+0x0],ch
 1002d36:	ins    BYTE PTR es:[rdi],dx
 1002d37:	add    BYTE PTR [rcx+0x0],ah
 1002d3a:	(bad)  
 1002d3b:	add    BYTE PTR [rax+rax*1+0x65],ch
 1002d3f:	add    BYTE PTR [rsi],ch
 1002d41:	add    BYTE PTR [rax],ah
 1002d43:	add    BYTE PTR [rax],ah
 1002d45:	add    BYTE PTR [rcx+0x0],al
 1002d48:	data16 add BYTE PTR [rax+rax*1+0x65],dh
 1002d4d:	add    BYTE PTR [rdx+0x0],dh
 1002d50:	and    BYTE PTR [rax],al
 1002d52:	je     0x1002d54
 1002d54:	push   0x20006500
 1002d59:	add    BYTE PTR [rax+0x0],dh
 1002d5c:	outs   dx,DWORD PTR ds:[rsi]
 1002d5d:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1002d61:	add    BYTE PTR [rcx+0x0],ch
 1002d64:	outs   dx,BYTE PTR ds:[rsi]
 1002d65:	add    BYTE PTR [rdi+0x0],ah
 1002d68:	and    BYTE PTR [rax],al
 1002d6a:	imul   eax,DWORD PTR [rax],0x74006e
 1002d70:	add    BYTE PTR gs:[rdx+0x0],dh
 1002d74:	jbe    0x1002d76
 1002d76:	(bad)  
 1002d77:	add    BYTE PTR [rax+rax*1+0x20],ch
 1002d7b:	add    BYTE PTR [rbp+0x0],ah
 1002d7e:	ins    BYTE PTR es:[rdi],dx
 1002d7f:	add    BYTE PTR [rcx+0x0],ah
 1002d82:	jo     0x1002d84
 1002d84:	jae    0x1002d86
 1002d86:	add    BYTE PTR gs:[rbx+0x0],dh
 1002d8a:	sub    al,0x0
 1002d8c:	and    BYTE PTR [rax],al
 1002d8e:	je     0x1002d90
 1002d90:	push   0x20006500
 1002d95:	add    BYTE PTR [rdx+0x0],dh
 1002d98:	add    BYTE PTR gs:[rcx+0x0],ah
 1002d9c:	add    BYTE PTR fs:[rbp+0x0],ah
 1002da0:	jb     0x1002da2
 1002da2:	and    BYTE PTR [rax],al
 1002da4:	je     0x1002da6
 1002da6:	push   0x65007200
 1002dab:	add    BYTE PTR [rcx+0x0],ah
 1002dae:	add    BYTE PTR fs:[rax],ah
 1002db1:	add    BYTE PTR [rdi+0x0],dh
 1002db4:	imul   eax,DWORD PTR [rax],0x6c006c
 1002dba:	and    BYTE PTR [rax],al
 1002dbc:	jb     0x1002dbe
 1002dbe:	add    BYTE PTR gs:[rbx+0x0],dh
 1002dc2:	jne    0x1002dc4
 1002dc4:	ins    DWORD PTR es:[rdi],dx
 1002dc5:	add    BYTE PTR [rbp+0x0],ah
 1002dc8:	add    BYTE PTR cs:[rax],al
 1002dcb:	add    BYTE PTR [rax],al
 1002dcd:	add    BYTE PTR [rax],al
 1002dcf:	add    BYTE PTR [rdi+0x0],dl
 1002dd2:	(bad)  
 1002dd3:	add    BYTE PTR [rcx+0x0],ch
 1002dd6:	je     0x1002dd8
 1002dd8:	imul   eax,DWORD PTR [rax],0x67006e
 1002dde:	rex.WRXB add BYTE PTR [r14+0x0],r13b
 1002de2:	push   rdi
 1002de3:	add    BYTE PTR [rdx+0x0],dh
 1002de6:	imul   eax,DWORD PTR [rax],0x650074
 1002dec:	jb     0x1002dee
 1002dee:	rex.WB add BYTE PTR [r8+rax*1+0x0],al
	...
 1002dff:	add    BYTE PTR [rdx+0x0],dh
 1002e02:	add    BYTE PTR gs:[rax+0x0],dh
 1002e06:	ins    BYTE PTR es:[rdi],dx
 1002e07:	add    BYTE PTR [rdi+0x0],bl
 1002e0a:	add    BYTE PTR fs:[rcx+0x0],ch
 1002e0e:	jae    0x1002e10
 1002e10:	je     0x1002e12
 1002e12:	jb     0x1002e14
 1002e14:	imul   eax,DWORD PTR [rax],0x5f0062
 1002e1a:	jb     0x1002e1c
 1002e1c:	add    BYTE PTR gs:[rcx+0x0],ah
 1002e20:	add    BYTE PTR fs:[rbp+0x0],ah
 1002e24:	jb     0x1002e26
 1002e26:	pop    rdi
 1002e27:	add    BYTE PTR [rdi+0x0],dh
 1002e2a:	(bad)  
 1002e2b:	add    BYTE PTR [rcx+0x0],ch
 1002e2e:	je     0x1002e30
 1002e30:	imul   eax,DWORD PTR [rax],0x67006e
 1002e36:	pop    rdi
 1002e37:	add    BYTE PTR [rdi+0x0],ch
 1002e3a:	outs   dx,BYTE PTR ds:[rsi]
 1002e3b:	add    BYTE PTR [rdi+0x0],bl
 1002e3e:	ja     0x1002e40
 1002e40:	jb     0x1002e42
 1002e42:	imul   eax,DWORD PTR [rax],0x650074
 1002e48:	jb     0x1002e4a
 1002e4a:	add    BYTE PTR [rax],al
 1002e4c:	add    BYTE PTR [rax],al
 1002e4e:	add    BYTE PTR [rax],al
 1002e50:	add    BYTE PTR [rcx+0x0],r13b
 1002e54:	jae    0x1002e56
 1002e56:	je     0x1002e58
 1002e58:	jb     0x1002e5a
 1002e5a:	imul   eax,DWORD PTR [rax],0x200062
 1002e60:	jb     0x1002e62
 1002e62:	add    BYTE PTR gs:[rcx+0x0],ah
 1002e66:	add    BYTE PTR fs:[rbp+0x0],ah
 1002e6a:	jb     0x1002e6c
 1002e6c:	and    BYTE PTR [rax],al
 1002e6e:	je     0x1002e70
 1002e70:	push   0x65007200
 1002e75:	add    BYTE PTR [rcx+0x0],ah
 1002e78:	add    BYTE PTR fs:[rax],ah
 1002e7b:	add    BYTE PTR [rcx+0x0],ch
 1002e7e:	jae    0x1002e80
 1002e80:	and    BYTE PTR [rax],al
 1002e82:	ja     0x1002e84
 1002e84:	(bad)  
 1002e85:	add    BYTE PTR [rcx+0x0],ch
 1002e88:	je     0x1002e8a
 1002e8a:	imul   eax,DWORD PTR [rax],0x67006e
 1002e90:	and    BYTE PTR [rax],al
 1002e92:	outs   dx,DWORD PTR ds:[rsi]
 1002e93:	add    BYTE PTR [rsi+0x0],ch
 1002e96:	and    BYTE PTR [rax],al
 1002e98:	je     0x1002e9a
 1002e9a:	push   0x20006500
 1002e9f:	add    BYTE PTR [rdi+0x0],dh
 1002ea2:	jb     0x1002ea4
 1002ea4:	imul   eax,DWORD PTR [rax],0x650074
 1002eaa:	jb     0x1002eac
 1002eac:	and    BYTE PTR [rax],al
 1002eae:	je     0x1002eb0
 1002eb0:	push   0x65007200
 1002eb5:	add    BYTE PTR [rcx+0x0],ah
 1002eb8:	add    BYTE PTR fs:[rsi],ch
 1002ebb:	add    BYTE PTR [rax],al
 1002ebd:	add    BYTE PTR [rax],al
 1002ebf:	add    BYTE PTR [rdi+0x0],dl
 1002ec2:	jb     0x1002ec4
 1002ec4:	imul   eax,DWORD PTR [rax],0x650074
 1002eca:	jb     0x1002ecc
 1002ecc:	rex.WB add BYTE PTR [r8+rax*1+0x0],al
	...
 1002edd:	add    BYTE PTR [rax],al
 1002edf:	add    BYTE PTR [rdx+0x0],dh
 1002ee2:	add    BYTE PTR gs:[rax+0x0],dh
 1002ee6:	ins    BYTE PTR es:[rdi],dx
 1002ee7:	add    BYTE PTR [rdi+0x0],bl
 1002eea:	add    BYTE PTR fs:[rcx+0x0],ch
 1002eee:	jae    0x1002ef0
 1002ef0:	je     0x1002ef2
 1002ef2:	jb     0x1002ef4
 1002ef4:	imul   eax,DWORD PTR [rax],0x5f0062
 1002efa:	ja     0x1002efc
 1002efc:	jb     0x1002efe
 1002efe:	imul   eax,DWORD PTR [rax],0x650074
 1002f04:	jb     0x1002f06
 1002f06:	pop    rdi
 1002f07:	add    BYTE PTR [rdi+0x0],dh
 1002f0a:	(bad)  
 1002f0b:	add    BYTE PTR [rcx+0x0],ch
 1002f0e:	je     0x1002f10
 1002f10:	imul   eax,DWORD PTR [rax],0x67006e
 1002f16:	pop    rdi
 1002f17:	add    BYTE PTR [rdi+0x0],ch
 1002f1a:	outs   dx,BYTE PTR ds:[rsi]
 1002f1b:	add    BYTE PTR [rdi+0x0],bl
 1002f1e:	jb     0x1002f20
 1002f20:	add    BYTE PTR gs:[rcx+0x0],ah
 1002f24:	add    BYTE PTR fs:[rbp+0x0],ah
 1002f28:	jb     0x1002f2a
 1002f2a:	add    BYTE PTR [rax],al
 1002f2c:	add    BYTE PTR [rax],al
 1002f2e:	add    BYTE PTR [rax],al
 1002f30:	add    BYTE PTR [rcx+0x0],r13b
 1002f34:	jae    0x1002f36
 1002f36:	je     0x1002f38
 1002f38:	jb     0x1002f3a
 1002f3a:	imul   eax,DWORD PTR [rax],0x200062
 1002f40:	ja     0x1002f42
 1002f42:	jb     0x1002f44
 1002f44:	imul   eax,DWORD PTR [rax],0x650074
 1002f4a:	jb     0x1002f4c
 1002f4c:	and    BYTE PTR [rax],al
 1002f4e:	je     0x1002f50
 1002f50:	push   0x65007200
 1002f55:	add    BYTE PTR [rcx+0x0],ah
 1002f58:	add    BYTE PTR fs:[rax],ah
 1002f5b:	add    BYTE PTR [rcx+0x0],ch
 1002f5e:	jae    0x1002f60
 1002f60:	and    BYTE PTR [rax],al
 1002f62:	ja     0x1002f64
 1002f64:	(bad)  
 1002f65:	add    BYTE PTR [rcx+0x0],ch
 1002f68:	je     0x1002f6a
 1002f6a:	imul   eax,DWORD PTR [rax],0x67006e
 1002f70:	and    BYTE PTR [rax],al
 1002f72:	outs   dx,DWORD PTR ds:[rsi]
 1002f73:	add    BYTE PTR [rsi+0x0],ch
 1002f76:	and    BYTE PTR [rax],al
 1002f78:	je     0x1002f7a
 1002f7a:	push   0x20006500
 1002f7f:	add    BYTE PTR [rdx+0x0],dh
 1002f82:	add    BYTE PTR gs:[rcx+0x0],ah
 1002f86:	add    BYTE PTR fs:[rbp+0x0],ah
 1002f8a:	jb     0x1002f8c
 1002f8c:	and    BYTE PTR [rax],al
 1002f8e:	je     0x1002f90
 1002f90:	push   0x65007200
 1002f95:	add    BYTE PTR [rcx+0x0],ah
 1002f98:	add    BYTE PTR fs:[rsi],ch
 1002f9b:	add    BYTE PTR [rax],al
 1002f9d:	add    BYTE PTR [rax],al
 1002f9f:	add    BYTE PTR [rdi+0x0],dl
 1002fa2:	jb     0x1002fa4
 1002fa4:	imul   eax,DWORD PTR [rax],0x650074
 1002faa:	jb     0x1002fac
 1002fac:	rex.WB add BYTE PTR [r8+rax*1+0x0],spl
 1002fb1:	add    BYTE PTR [rax],al
 1002fb3:	add    BYTE PTR [rax],al
 1002fb5:	add    BYTE PTR [rax],al
 1002fb7:	add    BYTE PTR [rax+0x0],bl
 1002fba:	(bad)  
 1002fbb:	add    BYTE PTR [rbx+0x0],ah
 1002fbe:	je     0x1002fc0
 1002fc0:	push   rbx
 1002fc1:	add    BYTE PTR [rbp+0x0],ah
 1002fc4:	jno    0x1002fc6
 1002fc6:	outs   dx,BYTE PTR ds:[rsi]
 1002fc7:	add    BYTE PTR [rdi+0x0],ch
 1002fca:	add    BYTE PTR [rax],al
 1002fcc:	add    BYTE PTR [rax],al
 1002fce:	add    BYTE PTR [rax],al
 1002fd0:	jb     0x1002fd2
 1002fd2:	add    BYTE PTR gs:[rax+0x0],dh
 1002fd6:	ins    BYTE PTR es:[rdi],dx
 1002fd7:	add    BYTE PTR [rdi+0x0],bl
 1002fda:	add    BYTE PTR fs:[rcx+0x0],ch
 1002fde:	jae    0x1002fe0
 1002fe0:	je     0x1002fe2
 1002fe2:	jb     0x1002fe4
 1002fe4:	imul   eax,DWORD PTR [rax],0x5f0062
 1002fea:	jne    0x1002fec
 1002fec:	jo     0x1002fee
 1002fee:	add    BYTE PTR fs:[rcx+0x0],ah
 1002ff2:	je     0x1002ff4
 1002ff4:	add    BYTE PTR gs:[rax+rax*1+0x5f],ah
 1002ff9:	add    BYTE PTR [rbx+0x0],ah
 1002ffc:	outs   dx,DWORD PTR ds:[rsi]
 1002ffd:	add    BYTE PTR [rbp+0x0],ch
 1003000:	ins    DWORD PTR es:[rdi],dx
 1003001:	add    BYTE PTR [rcx+0x0],ch
 1003004:	je     0x1003006
 1003006:	je     0x1003008
 1003008:	add    BYTE PTR gs:[rax+rax*1+0x5f],ah
 100300d:	add    BYTE PTR [rax+rax*1+0x73],ch
 1003011:	add    BYTE PTR [rsi+0x0],ch
	...
 1003020:	add    BYTE PTR [rcx+0x0],r13b
 1003024:	jae    0x1003026
 1003026:	je     0x1003028
 1003028:	jb     0x100302a
 100302a:	imul   eax,DWORD PTR [rax],0x200062
 1003030:	ja     0x1003032
 1003032:	jb     0x1003034
 1003034:	imul   eax,DWORD PTR [rax],0x650074
 100303a:	jb     0x100303c
 100303c:	and    BYTE PTR [rax],al
 100303e:	je     0x1003040
 1003040:	push   0x65007200
 1003045:	add    BYTE PTR [rcx+0x0],ah
 1003048:	add    BYTE PTR fs:[rax],ah
 100304b:	add    BYTE PTR [rax+0x0],ch
 100304e:	(bad)  
 100304f:	add    BYTE PTR [rbx+0x0],dh
 1003052:	and    BYTE PTR [rax],al
 1003054:	jne    0x1003056
 1003056:	jo     0x1003058
 1003058:	add    BYTE PTR fs:[rcx+0x0],ah
 100305c:	je     0x100305e
 100305e:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1003063:	add    BYTE PTR [rax+rax*1+0x68],dh
 1003067:	add    BYTE PTR [rbp+0x0],ah
 100306a:	and    BYTE PTR [rax],al
 100306c:	je     0x100306e
 100306e:	jb     0x1003070
 1003070:	(bad)  
 1003071:	add    BYTE PTR [rsi+0x0],ch
 1003074:	jae    0x1003076
 1003076:	(bad)  
 1003077:	add    BYTE PTR [rbx+0x0],ah
 100307a:	je     0x100307c
 100307c:	imul   eax,DWORD PTR [rax],0x6e006f
 1003082:	pop    rdi
 1003083:	add    BYTE PTR [rax+rax*1+0x69],dh
 1003087:	add    BYTE PTR [rbp+0x0],ch
 100308a:	add    BYTE PTR gs:[rbx+0x0],dh
 100308e:	je     0x1003090
 1003090:	(bad)  
 1003091:	add    BYTE PTR [rbp+0x0],ch
 1003094:	jo     0x1003096
 1003096:	and    BYTE PTR [rax],al
 1003098:	jbe    0x100309a
 100309a:	(bad)  
 100309b:	add    BYTE PTR [rax+rax*1+0x75],ch
 100309f:	add    BYTE PTR [rbp+0x0],ah
 10030a2:	and    BYTE PTR [rax],al
 10030a4:	imul   eax,DWORD PTR [rax],0x20006e
 10030aa:	je     0x10030ac
 10030ac:	push   0x20006500
 10030b1:	add    BYTE PTR [rbp+0x0],cl
 10030b4:	push   rbx
 10030b5:	add    BYTE PTR [rdx+0x0],dh
 10030b8:	add    BYTE PTR gs:[rax+0x0],dh
 10030bc:	ins    BYTE PTR es:[rdi],dx
 10030bd:	add    BYTE PTR [rcx+0x0],ch
 10030c0:	movsxd eax,DWORD PTR [rax]
 10030c2:	(bad)  
 10030c3:	add    BYTE PTR [rax+rax*1+0x69],dh
 10030c7:	add    BYTE PTR [rdi+0x0],ch
 10030ca:	outs   dx,BYTE PTR ds:[rsi]
 10030cb:	add    BYTE PTR [rdi+0x0],bl
 10030ce:	jae    0x10030d0
 10030d0:	jne    0x10030d2
 10030d2:	(bad)  
 10030d3:	add    BYTE PTR [rbx+0x0],dh
 10030d6:	movsxd eax,DWORD PTR [rax]
 10030d8:	jb     0x10030da
 10030da:	imul   eax,DWORD PTR [rax],0x740070
 10030e0:	imul   eax,DWORD PTR [rax],0x6e006f
 10030e6:	jae    0x10030e8
 10030e8:	and    BYTE PTR [rax],al
 10030ea:	je     0x10030ec
 10030ec:	(bad)  
 10030ed:	add    BYTE PTR [rdx+0x0],ah
 10030f0:	ins    BYTE PTR es:[rdi],dx
 10030f1:	add    BYTE PTR [rbp+0x0],ah
 10030f4:	and    BYTE PTR [rax],al
 10030f6:	(bad)  
 10030f7:	add    BYTE PTR [rax+rax*1+0x20],dh
 10030fb:	add    BYTE PTR [rax+rax*1+0x68],dh
 10030ff:	add    BYTE PTR [rbp+0x0],ah
 1003102:	and    BYTE PTR [rax],al
 1003104:	jae    0x1003106
 1003106:	jne    0x1003108
 1003108:	(bad)  
 1003109:	add    BYTE PTR [rbx+0x0],dh
 100310c:	movsxd eax,DWORD PTR [rax]
 100310e:	jb     0x1003110
 1003110:	imul   eax,DWORD PTR [rax],0x650062
 1003116:	jb     0x1003118
 1003118:	add    BYTE PTR cs:[rax],al
 100311b:	add    BYTE PTR [rax],al
 100311d:	add    BYTE PTR [rax],al
 100311f:	add    BYTE PTR [rax+0x0],bl
 1003122:	(bad)  
 1003123:	add    BYTE PTR [rbx+0x0],ah
 1003126:	je     0x1003128
 1003128:	rex.WB add BYTE PTR [r8+rax*1+0x0],spl
 100312d:	add    BYTE PTR [rax],al
 100312f:	add    BYTE PTR [rdx+0x0],dh
 1003132:	add    BYTE PTR gs:[rax+0x0],dh
 1003136:	ins    BYTE PTR es:[rdi],dx
 1003137:	add    BYTE PTR [rdi+0x0],bl
 100313a:	add    BYTE PTR fs:[rcx+0x0],ch
 100313e:	jae    0x1003140
 1003140:	je     0x1003142
 1003142:	jb     0x1003144
 1003144:	imul   eax,DWORD PTR [rax],0x5f0062
 100314a:	ja     0x100314c
 100314c:	jb     0x100314e
 100314e:	imul   eax,DWORD PTR [rax],0x690074
 1003154:	outs   dx,BYTE PTR ds:[rsi]
 1003155:	add    BYTE PTR [rdi+0x0],ah
 1003158:	pop    rdi
 1003159:	add    BYTE PTR [rax+rax*1+0x72],dh
 100315d:	add    BYTE PTR [rcx+0x0],ah
 1003160:	outs   dx,BYTE PTR ds:[rsi]
 1003161:	add    BYTE PTR [rbx+0x0],dh
 1003164:	(bad)  
 1003165:	add    BYTE PTR [rbx+0x0],ah
 1003168:	je     0x100316a
 100316a:	imul   eax,DWORD PTR [rax],0x6e006f
	...
 1003180:	add    BYTE PTR [rcx+0x0],r13b
 1003184:	jae    0x1003186
 1003186:	je     0x1003188
 1003188:	jb     0x100318a
 100318a:	imul   eax,DWORD PTR [rax],0x200062
 1003190:	ja     0x1003192
 1003192:	jb     0x1003194
 1003194:	imul   eax,DWORD PTR [rax],0x650074
 100319a:	jb     0x100319c
 100319c:	and    BYTE PTR [rax],al
 100319e:	je     0x10031a0
 10031a0:	push   0x65007200
 10031a5:	add    BYTE PTR [rcx+0x0],ah
 10031a8:	add    BYTE PTR fs:[rax],ah
 10031ab:	add    BYTE PTR [rcx+0x0],ch
 10031ae:	jae    0x10031b0
 10031b0:	and    BYTE PTR [rax],al
 10031b2:	ja     0x10031b4
 10031b4:	jb     0x10031b6
 10031b6:	imul   eax,DWORD PTR [rax],0x690074
 10031bc:	outs   dx,BYTE PTR ds:[rsi]
 10031bd:	add    BYTE PTR [rdi+0x0],ah
 10031c0:	and    BYTE PTR [rax],al
 10031c2:	(bad)  
 10031c3:	add    BYTE PTR [rax],ah
 10031c5:	add    BYTE PTR [rdx+0x0],dh
 10031c8:	add    BYTE PTR gs:[rax+0x0],dh
 10031cc:	ins    BYTE PTR es:[rdi],dx
 10031cd:	add    BYTE PTR [rcx+0x0],ch
 10031d0:	movsxd eax,DWORD PTR [rax]
 10031d2:	(bad)  
 10031d3:	add    BYTE PTR [rax+rax*1+0x65],dh
 10031d7:	add    BYTE PTR [rax+rax*1+0x20],ah
 10031db:	add    BYTE PTR [rax+rax*1+0x72],dh
 10031df:	add    BYTE PTR [rcx+0x0],ah
 10031e2:	outs   dx,BYTE PTR ds:[rsi]
 10031e3:	add    BYTE PTR [rbx+0x0],dh
 10031e6:	(bad)  
 10031e7:	add    BYTE PTR [rbx+0x0],ah
 10031ea:	je     0x10031ec
 10031ec:	imul   eax,DWORD PTR [rax],0x6e006f
 10031f2:	and    BYTE PTR [rax],al
 10031f4:	je     0x10031f6
 10031f6:	outs   dx,DWORD PTR ds:[rsi]
 10031f7:	add    BYTE PTR [rax],ah
 10031f9:	add    BYTE PTR [rax+rax*1+0x68],dh
 10031fd:	add    BYTE PTR [rbp+0x0],ah
 1003200:	and    BYTE PTR [rax],al
 1003202:	jae    0x1003204
 1003204:	jne    0x1003206
 1003206:	(bad)  
 1003207:	add    BYTE PTR [rbx+0x0],dh
 100320a:	movsxd eax,DWORD PTR [rax]
 100320c:	jb     0x100320e
 100320e:	imul   eax,DWORD PTR [rax],0x650062
 1003214:	jb     0x1003216
 1003216:	add    BYTE PTR cs:[rax],al
 1003219:	add    BYTE PTR [rax],al
 100321b:	add    BYTE PTR [rax],al
 100321d:	add    BYTE PTR [rax],al
 100321f:	add    BYTE PTR [rbx+0x0],al
 1003222:	outs   dx,DWORD PTR ds:[rsi]
 1003223:	add    BYTE PTR [rbp+0x0],ch
 1003226:	ins    DWORD PTR es:[rdi],dx
 1003227:	add    BYTE PTR [rcx+0x0],ah
 100322a:	outs   dx,BYTE PTR ds:[rsi]
 100322b:	add    BYTE PTR [rax+rax*1+0x49],ah
 100322f:	add    BYTE PTR [rax+rax*1+0x0],ah
 1003233:	add    BYTE PTR [rax],al
 1003235:	add    BYTE PTR [rax],al
 1003237:	add    BYTE PTR [rdx+0x0],dh
 100323a:	add    BYTE PTR gs:[rax+0x0],dh
 100323e:	ins    BYTE PTR es:[rdi],dx
 100323f:	add    BYTE PTR [rdi+0x0],bl
 1003242:	add    BYTE PTR fs:[rcx+0x0],ch
 1003246:	jae    0x1003248
 1003248:	je     0x100324a
 100324a:	jb     0x100324c
 100324c:	imul   eax,DWORD PTR [rax],0x5f0062
 1003252:	ja     0x1003254
 1003254:	jb     0x1003256
 1003256:	imul   eax,DWORD PTR [rax],0x690074
 100325c:	outs   dx,BYTE PTR ds:[rsi]
 100325d:	add    BYTE PTR [rdi+0x0],ah
 1003260:	pop    rdi
 1003261:	add    BYTE PTR [rbx+0x0],ah
 1003264:	outs   dx,DWORD PTR ds:[rsi]
 1003265:	add    BYTE PTR [rbp+0x0],ch
 1003268:	ins    DWORD PTR es:[rdi],dx
 1003269:	add    BYTE PTR [rcx+0x0],ah
 100326c:	outs   dx,BYTE PTR ds:[rsi]
 100326d:	add    BYTE PTR [rax+rax*1+0x0],ah
	...
 100327d:	add    BYTE PTR [rax],al
 100327f:	add    BYTE PTR [rax+rax*1+0x69],al
 1003283:	add    BYTE PTR [rbx+0x0],dh
 1003286:	je     0x1003288
 1003288:	jb     0x100328a
 100328a:	imul   eax,DWORD PTR [rax],0x200062
 1003290:	ja     0x1003292
 1003292:	jb     0x1003294
 1003294:	imul   eax,DWORD PTR [rax],0x650074
 100329a:	jb     0x100329c
 100329c:	and    BYTE PTR [rax],al
 100329e:	je     0x10032a0
 10032a0:	push   0x65007200
 10032a5:	add    BYTE PTR [rcx+0x0],ah
 10032a8:	add    BYTE PTR fs:[rax],ah
 10032ab:	add    BYTE PTR [rcx+0x0],ch
 10032ae:	jae    0x10032b0
 10032b0:	and    BYTE PTR [rax],al
 10032b2:	ja     0x10032b4
 10032b4:	jb     0x10032b6
 10032b6:	imul   eax,DWORD PTR [rax],0x690074
 10032bc:	outs   dx,BYTE PTR ds:[rsi]
 10032bd:	add    BYTE PTR [rdi+0x0],ah
 10032c0:	and    BYTE PTR [rax],al
 10032c2:	(bad)  
 10032c3:	add    BYTE PTR [rax],ah
 10032c5:	add    BYTE PTR [rdx+0x0],dh
 10032c8:	add    BYTE PTR gs:[rax+0x0],dh
 10032cc:	ins    BYTE PTR es:[rdi],dx
 10032cd:	add    BYTE PTR [rcx+0x0],ch
 10032d0:	movsxd eax,DWORD PTR [rax]
 10032d2:	(bad)  
 10032d3:	add    BYTE PTR [rax+rax*1+0x65],dh
 10032d7:	add    BYTE PTR [rax+rax*1+0x20],ah
 10032db:	add    BYTE PTR [rbx+0x0],ah
 10032de:	outs   dx,DWORD PTR ds:[rsi]
 10032df:	add    BYTE PTR [rbp+0x0],ch
 10032e2:	ins    DWORD PTR es:[rdi],dx
 10032e3:	add    BYTE PTR [rcx+0x0],ah
 10032e6:	outs   dx,BYTE PTR ds:[rsi]
 10032e7:	add    BYTE PTR [rax+rax*1+0x2e],ah
 10032eb:	add    BYTE PTR [rax],ah
 10032ed:	add    BYTE PTR [rax],ah
 10032ef:	add    BYTE PTR [rax+rax*1+0x68],dl
 10032f3:	add    BYTE PTR [rcx+0x0],ch
 10032f6:	jae    0x10032f8
 10032f8:	and    BYTE PTR [rax],al
 10032fa:	imul   eax,DWORD PTR [rax],0x200073
 1003300:	(bad)  
 1003301:	add    BYTE PTR [rax],ah
 1003303:	add    BYTE PTR [rsi+0x0],ah
 1003306:	imul   eax,DWORD PTR [rax],0x65006e
 100330c:	jb     0x100330e
 100330e:	and    BYTE PTR [rax],al
 1003310:	add    BYTE PTR [edx+0x0],dh
 1003314:	(bad)  
 1003315:	add    BYTE PTR [rsi+0x0],ch
 1003318:	jne    0x100331a
 100331a:	ins    BYTE PTR es:[rdi],dx
 100331b:	add    BYTE PTR [rcx+0x0],ah
 100331e:	jb     0x1003320
 1003320:	imul   eax,DWORD PTR [rax],0x790074
 1003326:	and    BYTE PTR [rax],al
 1003328:	je     0x100332a
 100332a:	push   0x6e006100
 100332f:	add    BYTE PTR [rax],ah
 1003331:	add    BYTE PTR [rdx+0x0],dh
 1003334:	add    BYTE PTR gs:[rax+0x0],dh
 1003338:	ins    BYTE PTR es:[rdi],dx
 1003339:	add    BYTE PTR [rdi+0x0],bl
 100333c:	add    BYTE PTR fs:[rcx+0x0],ch
 1003340:	jae    0x1003342
 1003342:	je     0x1003344
 1003344:	jb     0x1003346
 1003346:	imul   eax,DWORD PTR [rax],0x5f0062
 100334c:	ja     0x100334e
 100334e:	jb     0x1003350
 1003350:	imul   eax,DWORD PTR [rax],0x690074
 1003356:	outs   dx,BYTE PTR ds:[rsi]
 1003357:	add    BYTE PTR [rdi+0x0],ah
 100335a:	pop    rdi
 100335b:	add    BYTE PTR [rax+rax*1+0x72],dh
 100335f:	add    BYTE PTR [rcx+0x0],ah
 1003362:	outs   dx,BYTE PTR ds:[rsi]
 1003363:	add    BYTE PTR [rbx+0x0],dh
 1003366:	(bad)  
 1003367:	add    BYTE PTR [rbx+0x0],ah
 100336a:	je     0x100336c
 100336c:	imul   eax,DWORD PTR [rax],0x6e006f
 1003372:	add    BYTE PTR cs:[rax],al
	...
 100337d:	add    BYTE PTR [rax],al
 100337f:	add    BYTE PTR [rax],dl
 1003381:	call   0x1003486
 1003386:	add    BYTE PTR [rax],al
 1003388:	and    bl,ch
 100338a:	add    BYTE PTR [rcx],al
 100338c:	add    BYTE PTR [rax],al
 100338e:	add    BYTE PTR [rax],al
 1003390:	shr    ch,0x0
 1003393:	add    DWORD PTR [rax],eax
 1003395:	add    BYTE PTR [rax],al
 1003397:	add    al,dl
 1003399:	in     eax,dx
 100339a:	add    BYTE PTR [rcx],al
 100339c:	add    BYTE PTR [rax],al
 100339e:	add    BYTE PTR [rax],al
 10033a0:	movabs al,ds:0x10000000000100ee
 10033a9:	out    dx,eax
 10033aa:	add    BYTE PTR [rcx],al
 10033ac:	add    BYTE PTR [rax],al
 10033ae:	add    BYTE PTR [rax],al
 10033b0:	add    al,dh
 10033b2:	add    BYTE PTR [rcx],al
 10033b4:	add    BYTE PTR [rax],al
 10033b6:	add    BYTE PTR [rax],al
 10033b8:	lock xacquire add BYTE PTR [rcx],al
 10033bc:	add    BYTE PTR [rax],al
 10033be:	add    BYTE PTR [rax],al
 10033c0:	mov    al,0xf0
 10033c2:	add    BYTE PTR [rcx],al
 10033c4:	add    BYTE PTR [rax],al
 10033c6:	add    BYTE PTR [rax],al
 10033c8:	shl    al,0x0
 10033cb:	add    DWORD PTR [rax],eax
	...
 10033dd:	add    BYTE PTR [rax],al
 10033df:	add    BYTE PTR [rdx],ah
 10033e1:	add    eax,0x31993
 10033e6:	add    BYTE PTR [rax],al
 10033e8:	rex.WR icebp 
 10033ea:	add    DWORD PTR [rax],eax
	...
 10033f4:	(bad)  
 10033f5:	add    BYTE PTR [rax],al
 10033f7:	add    BYTE PTR [rcx+rsi*8+0x1],ah
 10033fb:	add    BYTE PTR [rax],ah
	...
 1003405:	add    BYTE PTR [rax],al
 1003407:	add    BYTE PTR [rdx],ah
 1003409:	add    eax,0x11993
 100340e:	add    BYTE PTR [rax],al
 1003410:	rex.W
 1003411:	repnz add DWORD PTR [rax],eax
	...
 100341c:	add    eax,DWORD PTR [rax]
 100341e:	add    BYTE PTR [rax],al
 1003420:	push   rax
 1003421:	repnz add DWORD PTR [rax],eax
 1003424:	and    BYTE PTR [rax],al
	...
 100342e:	add    BYTE PTR [rax],al
 1003430:	and    al,BYTE PTR [rip+0x11993]        # 0x1014dc9
 1003436:	add    BYTE PTR [rax],al
 1003438:	test   dl,dh
 100343a:	add    DWORD PTR [rax],eax
	...
 1003444:	add    eax,DWORD PTR [rax]
 1003446:	add    BYTE PTR [rax],al
 1003448:	mov    edx,?
 100344a:	add    DWORD PTR [rax],eax
 100344c:	and    BYTE PTR [rax],al
	...
 1003456:	add    BYTE PTR [rax],al
 1003458:	and    al,BYTE PTR [rip+0x11993]        # 0x1014df1
 100345e:	add    BYTE PTR [rax],al
 1003460:	shl    dl,0x1
	...
 100346b:	add    BYTE PTR [rbx],al
 100346d:	add    BYTE PTR [rax],al
 100346f:	add    al,cl
 1003471:	repnz add DWORD PTR [rax],eax
 1003474:	and    BYTE PTR [rax],al
	...
 100347e:	add    BYTE PTR [rax],al
 1003480:	and    al,BYTE PTR [rip+0x11993]        # 0x1014e19
 1003486:	add    BYTE PTR [rax],al
 1003488:	clc    
 1003489:	repnz add DWORD PTR [rax],eax
	...
 1003494:	add    eax,DWORD PTR [rax]
 1003496:	add    BYTE PTR [rax],al
 1003498:	add    bl,dh
 100349a:	add    DWORD PTR [rax],eax
 100349c:	and    BYTE PTR [rax],al
	...
 10034a6:	add    BYTE PTR [rax],al
 10034a8:	and    al,BYTE PTR [rip+0x11993]        # 0x1014e41
 10034ae:	add    BYTE PTR [rax],al
 10034b0:	sub    al,0xf3
 10034b2:	add    DWORD PTR [rax],eax
	...
 10034bc:	add    eax,DWORD PTR [rax]
 10034be:	add    BYTE PTR [rax],al
 10034c0:	xor    al,0xf3
 10034c2:	add    DWORD PTR [rax],eax
 10034c4:	and    BYTE PTR [rax],al
	...
 10034ce:	add    BYTE PTR [rax],al
 10034d0:	and    al,BYTE PTR [rip+0x11993]        # 0x1014e69
 10034d6:	add    BYTE PTR [rax],al
 10034d8:	je     0x10034cd
 10034da:	add    DWORD PTR [rax],eax
	...
 10034e4:	add    eax,DWORD PTR [rax]
 10034e6:	add    BYTE PTR [rax],al
 10034e8:	jl     0x10034dd
 10034ea:	add    DWORD PTR [rax],eax
 10034ec:	and    BYTE PTR [rax],al
	...
 10034f6:	add    BYTE PTR [rax],al
 10034f8:	and    al,BYTE PTR [rip+0x11993]        # 0x1014e91
 10034fe:	add    BYTE PTR [rax],al
 1003500:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1003501:	repz add DWORD PTR [rax],eax
	...
 100350c:	add    eax,DWORD PTR [rax]
 100350e:	add    BYTE PTR [rax],al
 1003510:	lods   al,BYTE PTR ds:[rsi]
 1003511:	repz add DWORD PTR [rax],eax
 1003514:	and    BYTE PTR [rax],al
	...
 1003522:	add    BYTE PTR [rax+0x0],ah
 1003525:	add    al,0x0
 1003527:	(bad)  
 1003528:	add    BYTE PTR [rax],cl
 100352a:	add    BYTE PTR [rax+0x0],ah
 100352d:	or     al,0x0
 100352f:	(bad)  
 1003530:	add    BYTE PTR [rax],dl
 1003532:	add    BYTE PTR [rax+0x0],ah
 1003535:	adc    al,0x0
 1003537:	(bad)  
 1003538:	add    BYTE PTR [rax],bl
 100353a:	add    BYTE PTR [rax+0x0],ah
 100353d:	sbb    al,0x0
 100353f:	(bad)  
 1003540:	add    BYTE PTR [rax],ah
 1003542:	add    BYTE PTR [rax+0x0],ah
 1003545:	and    al,0x0
 1003547:	(bad)  
 1003548:	add    BYTE PTR [rax],ch
 100354a:	add    BYTE PTR [rax+0x0],ah
 100354d:	xor    BYTE PTR [rax],al
 100354f:	(bad)  
 1003550:	add    BYTE PTR [rax+rax*1],dh
 1003553:	(bad)  
 1003554:	add    BYTE PTR [rax],bh
 1003556:	add    BYTE PTR [rax+0x0],ah
 1003559:	cmp    al,0x0
 100355b:	(bad)  
 100355c:	add    BYTE PTR [rax+0x0],al
 100355f:	(bad)  
 1003560:	add    BYTE PTR [rax+rax*1+0x60],cl
 1003564:	add    BYTE PTR [rax+0x0],dl
 1003567:	(bad)  
 1003568:	add    BYTE PTR [rax+rax*1+0x60],dl
 100356c:	add    BYTE PTR [rax+0x0],bl
 100356f:	(bad)  
 1003570:	add    BYTE PTR [rax+rax*1+0x60],bl
	...
 1003580:	sbb    BYTE PTR [rax+rax*1+0x1],al
 1003584:	add    BYTE PTR [rax],al
 1003586:	add    BYTE PTR [rax],al
 1003588:	cmp    BYTE PTR [rax+rax*1+0x1],al
 100358c:	add    BYTE PTR [rax],al
 100358e:	add    BYTE PTR [rax],al
 1003590:	sub    BYTE PTR [rax+rax*1+0x1],al
 1003594:	add    BYTE PTR [rax],al
 1003596:	add    BYTE PTR [rax],al
 1003598:	add    BYTE PTR cs:[rax],al
 100359b:	add    BYTE PTR [rax],al
 100359d:	add    BYTE PTR [rax],al
 100359f:	add    BYTE PTR [rcx+0x0],ah
 10035a2:	ins    BYTE PTR es:[rdi],dx
 10035a3:	add    BYTE PTR [rax+rax*1+0x6f],ch
 10035a7:	add    BYTE PTR [rdi+0x0],dh
 10035aa:	push   rbx
 10035ab:	add    BYTE PTR [rcx+0x0],ch
 10035ae:	outs   dx,BYTE PTR ds:[rsi]
 10035af:	add    BYTE PTR [rdi+0x0],ah
 10035b2:	ins    BYTE PTR es:[rdi],dx
 10035b3:	add    BYTE PTR [rbp+0x0],ah
 10035b6:	add    BYTE PTR [r14+0x0],r14b
 10035ba:	add    BYTE PTR gs:[rsi+0x0],ch
 10035be:	je     0x10035c0
 10035c0:	rex.WR add BYTE PTR [rdi+0x0],r13b
 10035c4:	jae    0x10035c6
 10035c6:	jae    0x10035c8
	...
 10037a4:	outs   dx,BYTE PTR ds:[rsi]
 10037a5:	add    BYTE PTR [rdi+0x0],ch
 10037a8:	add    BYTE PTR [r14+0x0],r14b
 10037ac:	add    BYTE PTR gs:[rsi+0x0],ch
 10037b0:	je     0x10037b2
 10037b2:	rex.WR add BYTE PTR [rdi+0x0],r13b
 10037b6:	jae    0x10037b8
 10037b8:	jae    0x10037ba
	...
 10039a2:	add    BYTE PTR [rax],al
 10039a4:	add    DWORD PTR [rax],eax
 10039a6:	add    BYTE PTR [rax],al
 10039a8:	(bad)  
 10039a9:	add    BYTE PTR [rax+rax*1+0x6c],ch
 10039ad:	add    BYTE PTR [rdi+0x0],ch
 10039b0:	movsxd eax,DWORD PTR [rax]
	...
 1003ba6:	add    BYTE PTR [rax],al
 1003ba8:	add    al,BYTE PTR [rax]
 1003baa:	add    BYTE PTR [rax],al
 1003bac:	(bad)  
 1003bad:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1003bb1:	add    BYTE PTR [rdi+0x0],ch
 1003bb4:	ja     0x1003bb6
 1003bb6:	rex.WRB add BYTE PTR [r13+0x0],r14b
 1003bba:	ins    BYTE PTR es:[rdi],dx
 1003bbb:	add    BYTE PTR [rax+rax*1+0x69],dh
 1003bbf:	add    BYTE PTR [rax+0x0],dh
 1003bc2:	ins    BYTE PTR es:[rdi],dx
 1003bc3:	add    BYTE PTR [rbp+0x0],ah
 1003bc6:	add    BYTE PTR [r14+0x0],r14b
 1003bca:	add    BYTE PTR gs:[rsi+0x0],ch
 1003bce:	je     0x1003bd0
 1003bd0:	rex.WR add BYTE PTR [rdi+0x0],r13b
 1003bd4:	jae    0x1003bd6
 1003bd6:	jae    0x1003bd8
	...
 1003dac:	add    eax,DWORD PTR [rax]
 1003dae:	add    BYTE PTR [rax],al
 1003db0:	outs   dx,BYTE PTR ds:[rsi]
 1003db1:	add    BYTE PTR [rdi+0x0],ch
 1003db4:	outs   dx,BYTE PTR ds:[rsi]
 1003db5:	add    BYTE PTR [rbp+0x0],ah
	...
 1003fb4:	jo     0x1003fb6
 1003fb6:	add    BYTE PTR gs:[rdx+0x0],dh
 1003fba:	rex.WRX add BYTE PTR [rdi+0x0],r13b
 1003fbe:	add    BYTE PTR fs:[rbp+0x0],ah
	...
 10041b2:	add    BYTE PTR [rax],al
 10041b4:	add    DWORD PTR [rax],eax
 10041b6:	add    BYTE PTR [rax],al
 10041b8:	jo     0x10041ba
 10041ba:	add    BYTE PTR gs:[rdx+0x0],dh
 10041be:	rex.XB add BYTE PTR [r8+0x0],sil
 10041c2:	jne    0x10041c4
	...
 10043b8:	add    al,BYTE PTR [rax]
 10043ba:	add    BYTE PTR [rax],al
 10043bc:	add    BYTE PTR [rax],al
 10043be:	add    BYTE PTR [rax+0x0],ah
 10043c1:	add    al,0x0
 10043c3:	(bad)  
 10043c4:	add    BYTE PTR [rax],cl
 10043c6:	add    BYTE PTR [rax+0x0],ah
 10043c9:	or     al,0x0
 10043cb:	(bad)  
 10043cc:	add    BYTE PTR [rax],dl
 10043ce:	add    BYTE PTR [rax+0x0],ah
 10043d1:	adc    al,0x0
 10043d3:	(bad)  
 10043d4:	add    BYTE PTR [rax],bl
 10043d6:	add    BYTE PTR [rax+0x0],ah
 10043d9:	sbb    al,0x0
 10043db:	(bad)  
 10043dc:	add    BYTE PTR [rax],ah
 10043de:	add    BYTE PTR [rax+0x0],ah
 10043e1:	and    al,0x0
 10043e3:	(bad)  
 10043e4:	add    BYTE PTR [rax],ch
 10043e6:	add    BYTE PTR [rax+0x0],ah
 10043e9:	xor    BYTE PTR [rax],al
 10043eb:	(bad)  
 10043ec:	add    BYTE PTR [rax+rax*1],dh
 10043ef:	(bad)  
 10043f0:	add    BYTE PTR [rax],bh
 10043f2:	add    BYTE PTR [rax+0x0],ah
 10043f5:	cmp    al,0x0
 10043f7:	(bad)  
 10043f8:	add    BYTE PTR [rax+0x0],al
 10043fb:	(bad)  
 10043fc:	add    BYTE PTR [rax+rax*1+0x60],cl
 1004400:	add    BYTE PTR [rax+0x0],dl
 1004403:	(bad)  
 1004404:	add    BYTE PTR [rax+rax*1+0x60],dl
 1004408:	add    BYTE PTR [rax+0x0],bl
 100440b:	(bad)  
 100440c:	add    BYTE PTR [rax+rax*1+0x60],bl
 1004410:	add    BYTE PTR [rax+0x0],ch
 1004413:	(bad)  
 1004414:	add    BYTE PTR [rax],al
 1004416:	add    BYTE PTR [rax],al
 1004418:	ins    DWORD PTR es:[rdi],dx
 1004419:	add    BYTE PTR [rdi+0x0],ch
 100441c:	add    BYTE PTR fs:[rbp+0x0],dh
 1004420:	ins    BYTE PTR es:[rdi],dx
 1004421:	add    BYTE PTR [rbp+0x0],ah
 1004424:	add    BYTE PTR [rax],al
 1004426:	add    BYTE PTR [rax],al
 1004428:	outs   dx,BYTE PTR ds:[rsi]
 1004429:	add    BYTE PTR [rcx+0x0],ah
 100442c:	ins    DWORD PTR es:[rdi],dx
 100442d:	add    BYTE PTR [rbp+0x0],ah
	...
 1004438:	jo     0x100443a
 100443a:	(bad)  
 100443b:	add    BYTE PTR [rbx+0x0],ah
 100443e:	imul   eax,DWORD PTR [rax],0x61
 1004441:	add    BYTE PTR [rdi+0x0],ah
 1004444:	add    BYTE PTR gs:[rax],al
	...
 100444f:	add    BYTE PTR [rdx],ah
 1004451:	add    eax,0x11993
 1004456:	add    BYTE PTR [rax],al
 1004458:	in     al,dx
 1004459:	repz add DWORD PTR [rax],eax
	...
 1004464:	add    eax,DWORD PTR [rax]
 1004466:	add    BYTE PTR [rax],al
 1004468:	hlt    
 1004469:	repz add DWORD PTR [rax],eax
 100446c:	and    BYTE PTR [rax],al
	...
 100447e:	add    BYTE PTR [rax],al
 1004480:	and    al,BYTE PTR [rip+0x21993]        # 0x1025e19
 1004486:	add    BYTE PTR [rax],al
 1004488:	rex.W hlt 
 100448a:	add    DWORD PTR [rax],eax
	...
 1004494:	add    eax,DWORD PTR [rax]
 1004496:	add    BYTE PTR [rax],al
 1004498:	pop    rax
 1004499:	hlt    
 100449a:	add    DWORD PTR [rax],eax
 100449c:	and    BYTE PTR [rax],al
	...
 10044ae:	add    BYTE PTR [rax],al
 10044b0:	and    al,BYTE PTR [rip+0x41993]        # 0x1045e49
 10044b6:	add    BYTE PTR [rax],al
 10044b8:	test   ah,dh
 10044ba:	add    DWORD PTR [rax],eax
	...
 10044c4:	add    eax,0xa4000000
 10044c9:	hlt    
 10044ca:	add    DWORD PTR [rax],eax
 10044cc:	and    BYTE PTR [rax],al
	...
 10044de:	add    BYTE PTR [rax],al
 10044e0:	and    al,BYTE PTR [rip+0x11993]        # 0x1015e79
 10044e6:	add    BYTE PTR [rax],al
 10044e8:	fdivr  st(4),st
 10044ea:	add    DWORD PTR [rax],eax
	...
 10044f4:	add    DWORD PTR [rax],eax
 10044f6:	add    BYTE PTR [rax],al
 10044f8:	in     al,0xf4
 10044fa:	add    DWORD PTR [rax],eax
	...
 1004510:	and    al,BYTE PTR [rip+0x21993]        # 0x1025ea9
 1004516:	add    BYTE PTR [rax],al
 1004518:	cld    
 1004519:	hlt    
 100451a:	add    DWORD PTR [rax],eax
	...
 1004524:	add    al,0x0
 1004526:	add    BYTE PTR [rax],al
 1004528:	or     al,0xf5
 100452a:	add    DWORD PTR [rax],eax
 100452c:	and    BYTE PTR [rax],al
	...
 100453e:	add    BYTE PTR [rax],al
 1004540:	and    al,BYTE PTR [rip+0x21993]        # 0x1025ed9
 1004546:	add    BYTE PTR [rax],al
 1004548:	rex.R cmc 
 100454a:	add    DWORD PTR [rax],eax
	...
 1004554:	add    al,0x0
 1004556:	add    BYTE PTR [rax],al
 1004558:	push   rsp
 1004559:	cmc    
 100455a:	add    DWORD PTR [rax],eax
 100455c:	and    BYTE PTR [rax],al
	...
 100456e:	add    BYTE PTR [rax],al
 1004570:	and    al,BYTE PTR [rip+0x51993]        # 0x1055f09
 1004576:	add    BYTE PTR [rax],al
 1004578:	nop
 1004579:	cmc    
 100457a:	add    DWORD PTR [rax],eax
	...
 1004584:	or     eax,DWORD PTR [rax]
 1004586:	add    BYTE PTR [rax],al
 1004588:	mov    eax,0x300001f5
	...
 100459d:	add    BYTE PTR [rax],al
 100459f:	add    BYTE PTR [rdx],ah
 10045a1:	add    eax,0x11993
 10045a6:	add    BYTE PTR [rax],al
 10045a8:	rex.R test BYTE PTR [rcx],0x0
	...
 10045b4:	add    eax,DWORD PTR [rax]
 10045b6:	add    BYTE PTR [rax],al
 10045b8:	rex.WR test BYTE PTR [rcx],0x0
 10045bc:	add    BYTE PTR [rax],al
	...
 10045cf:	add    BYTE PTR [rdx],ah
 10045d1:	add    eax,0x61993
 10045d6:	add    BYTE PTR [rax],al
 10045d8:	mov    esi,?
 10045da:	add    DWORD PTR [rax],eax
	...
 10045e4:	add    eax,0xbc000000
 10045e9:	test   BYTE PTR [rcx],0x0
 10045ec:	push   0x0
	...
 10045fd:	add    BYTE PTR [rax],al
 10045ff:	add    BYTE PTR [rdx],ah
 1004601:	add    eax,0xa1993
 1004606:	add    BYTE PTR [rax],al
 1004608:	or     bh,dh
 100460a:	add    DWORD PTR [rax],eax
	...
 1004614:	(bad)  
 1004615:	add    BYTE PTR [rax],al
 1004617:	add    BYTE PTR [rax-0x9],bl
 100461a:	add    DWORD PTR [rax],eax
 100461c:	js     0x100461e
	...
 100462e:	add    BYTE PTR [rax],al
 1004630:	and    al,BYTE PTR [rip+0x91993]        # 0x1095fc9
 1004636:	add    BYTE PTR [rax],al
 1004638:	in     al,dx
 1004639:	test   DWORD PTR [rcx],0x0
 100463f:	add    BYTE PTR [rax],al
 1004641:	add    BYTE PTR [rax],al
 1004643:	add    BYTE PTR [rdi],al
 1004645:	add    BYTE PTR [rax],al
 1004647:	add    BYTE PTR [rax+rdi*8],dh
 100464a:	add    DWORD PTR [rax],eax
 100464c:	add    BYTE PTR [rax],0x0
	...
 100465f:	add    BYTE PTR [rdx],ah
 1004661:	add    eax,0x41993
 1004666:	add    BYTE PTR [rax],al
 1004668:	cwde   
 1004669:	clc    
 100466a:	add    DWORD PTR [rax],eax
	...
 1004674:	adc    eax,0xb8000000
 1004679:	clc    
 100467a:	add    DWORD PTR [rax],eax
 100467c:	(bad)  
	...
 100468d:	add    BYTE PTR [rax],al
 100468f:	add    BYTE PTR [rdx],ah
 1004691:	add    eax,0x131993
 1004696:	add    BYTE PTR [rax],al
 1004698:	test   cl,bh
 100469a:	add    DWORD PTR [rax],eax
	...
 10046a4:	sub    DWORD PTR [rax],eax
 10046a6:	add    BYTE PTR [rax],al
 10046a8:	sbb    al,0xfa
 10046aa:	add    DWORD PTR [rax],eax
 10046ac:	rol    BYTE PTR [rax],0x0
	...
 10046bf:	add    BYTE PTR [rdx],ah
 10046c1:	add    eax,0xa1993
 10046c6:	add    BYTE PTR [rax],al
 10046c8:	mov    bl,bh
 10046ca:	add    DWORD PTR [rax],eax
	...
 10046d4:	or     DWORD PTR [rax],eax
 10046d6:	add    BYTE PTR [rax],al
 10046d8:	fdivr  st,st(3)
 10046da:	add    DWORD PTR [rax],eax
 10046dc:	push   0x0
	...
 10046ed:	add    BYTE PTR [rax],al
 10046ef:	add    BYTE PTR [rdx],ah
 10046f1:	add    eax,0xa1993
 10046f6:	add    BYTE PTR [rax],al
 10046f8:	rex cld 
 10046fa:	add    DWORD PTR [rax],eax
	...
 1004704:	or     al,BYTE PTR [rax]
 1004706:	add    BYTE PTR [rax],al
 1004708:	nop
 1004709:	cld    
 100470a:	add    DWORD PTR [rax],eax
 100470c:	cmp    BYTE PTR [rax],al
	...
 100471e:	add    BYTE PTR [rax],al
 1004720:	and    al,BYTE PTR [rip+0x51993]        # 0x10560b9
 1004726:	add    BYTE PTR [rax],al
 1004728:	xchg   esp,eax
 1004729:	std    
 100472a:	add    DWORD PTR [rax],eax
	...
 1004734:	(bad)  
 1004735:	add    BYTE PTR [rax],al
 1004737:	add    BYTE PTR [rbp+rdi*8+0x700001],bh
	...
 100474e:	add    BYTE PTR [rax],al
 1004750:	and    al,BYTE PTR [rip+0x21993]        # 0x10260e9
 1004756:	add    BYTE PTR [rax],al
 1004758:	adc    dh,bh
 100475a:	add    DWORD PTR [rax],eax
	...
 1004764:	add    eax,DWORD PTR [rax]
 1004766:	add    BYTE PTR [rax],al
 1004768:	and    dh,bh
 100476a:	add    DWORD PTR [rax],eax
 100476c:	and    BYTE PTR [rax],al
	...
 100477e:	add    BYTE PTR [rax],al
 1004780:	and    al,BYTE PTR [rip+0x21993]        # 0x1026119
 1004786:	add    BYTE PTR [rax],al
 1004788:	push   rax
 1004789:	inc    BYTE PTR [rcx]
	...
 1004793:	add    BYTE PTR [rip+0x60000000],al        # 0x61004799
 1004799:	inc    BYTE PTR [rcx]
 100479b:	add    BYTE PTR [rax],ah
	...
 10047ad:	add    BYTE PTR [rax],al
 10047af:	add    BYTE PTR [rdx],ah
 10047b1:	add    eax,0x11993
 10047b6:	add    BYTE PTR [rax],al
 10047b8:	pushf  
 10047b9:	inc    BYTE PTR [rcx]
	...
 10047c3:	add    BYTE PTR [rip+0xffffffffa4000000],al        # 0xffffffffa50047c9
 10047c9:	inc    BYTE PTR [rcx]
 10047cb:	add    BYTE PTR [rax],ah
	...
 10047dd:	add    BYTE PTR [rax],al
 10047df:	add    BYTE PTR [rdx],ah
 10047e1:	add    eax,0x11993
 10047e6:	add    BYTE PTR [rax],al
 10047e8:	call   0x10049eb
 10047ed:	add    BYTE PTR [rax],al
 10047ef:	add    BYTE PTR [rax],al
 10047f1:	add    BYTE PTR [rax],al
 10047f3:	add    BYTE PTR [rbx],al
 10047f5:	add    BYTE PTR [rax],al
 10047f7:	add    al,dh
 10047f9:	inc    BYTE PTR [rcx]
 10047fb:	add    BYTE PTR [rax],ah
	...
 100480d:	add    BYTE PTR [rax],al
 100480f:	add    BYTE PTR [rdx],ah
 1004811:	add    eax,0x61993
 1004816:	add    BYTE PTR [rax],al
 1004818:	and    al,0xff
 100481a:	add    DWORD PTR [rax],eax
	...
 1004824:	or     DWORD PTR [rax],eax
 1004826:	add    BYTE PTR [rax],al
 1004828:	push   rsp
 1004829:	inc    DWORD PTR [rcx]
 100482b:	add    BYTE PTR [rax],ah
	...
 100483d:	add    BYTE PTR [rax],al
 100483f:	add    BYTE PTR [rdx],ah
 1004841:	add    eax,0x1c1993
 1004846:	add    BYTE PTR [rax],al
 1004848:	mov    esp,0x1ff
 100484d:	add    BYTE PTR [rax],al
 100484f:	add    BYTE PTR [rax],al
 1004851:	add    BYTE PTR [rax],al
 1004853:	add    BYTE PTR [rax+rax*1],ch
 1004856:	add    BYTE PTR [rax],al
 1004858:	pushf  
 1004859:	add    BYTE PTR [rdx],al
 100485b:	add    al,al
	...
 100486d:	add    BYTE PTR [rax],al
 100486f:	add    BYTE PTR [rdx],ah
 1004871:	add    eax,0x41993
 1004876:	add    BYTE PTR [rax],al
 1004878:	sub    BYTE PTR [rdx],al
 100487a:	add    al,BYTE PTR [rax]
	...
 1004884:	or     DWORD PTR [rax],eax
 1004886:	add    BYTE PTR [rax],al
 1004888:	rex.W add al,BYTE PTR [rdx]
 100488b:	add    BYTE PTR [rax+0x0],al
	...
 100489e:	add    BYTE PTR [rax],al
 10048a0:	and    al,BYTE PTR [rip+0xd1993]        # 0x10d6239
 10048a6:	add    BYTE PTR [rax],al
 10048a8:	mov    eax,0x202
 10048ad:	add    BYTE PTR [rax],al
 10048af:	add    BYTE PTR [rax],al
 10048b1:	add    BYTE PTR [rax],al
 10048b3:	add    BYTE PTR [rax+rax*1+0x0],dl
 10048b7:	add    BYTE PTR [rax],ah
 10048b9:	add    eax,DWORD PTR [rdx]
 10048bb:	add    BYTE PTR [rax],ah
 10048bd:	add    DWORD PTR [rax],eax
	...
 10048cf:	add    BYTE PTR [rdx],ah
 10048d1:	add    eax,0x21993
 10048d6:	add    BYTE PTR [rax],al
 10048d8:	hlt    
 10048d9:	add    eax,0x2
 10048de:	add    BYTE PTR [rax],al
 10048e0:	add    BYTE PTR [rax],al
 10048e2:	add    BYTE PTR [rax],al
 10048e4:	add    eax,0x4000000
 10048e9:	(bad)  
 10048ea:	add    al,BYTE PTR [rax]
 10048ec:	xor    BYTE PTR [rax],al
	...
 10048fe:	add    BYTE PTR [rax],al
 1004900:	and    al,BYTE PTR [rip+0x71993]        # 0x1076299
 1004906:	add    BYTE PTR [rax],al
 1004908:	rex.WR (bad) 
 100490a:	add    al,BYTE PTR [rax]
	...
 1004914:	or     eax,0x84000000
 1004919:	(bad)  
 100491a:	add    al,BYTE PTR [rax]
 100491c:	xor    BYTE PTR [rax],al
	...
 100492e:	add    BYTE PTR [rax],al
 1004930:	and    al,BYTE PTR [rip+0x11993]        # 0x10162c9
 1004936:	add    BYTE PTR [rax],al
 1004938:	add    BYTE PTR [rdi],al
 100493a:	add    al,BYTE PTR [rax]
	...
 1004944:	add    eax,DWORD PTR [rax]
 1004946:	add    BYTE PTR [rax],al
 1004948:	or     BYTE PTR [rdi],al
 100494a:	add    al,BYTE PTR [rax]
 100494c:	and    BYTE PTR [rax],al
	...
 100495e:	add    BYTE PTR [rax],al
 1004960:	and    al,BYTE PTR [rip+0x11993]        # 0x10162f9
 1004966:	add    BYTE PTR [rax],al
 1004968:	pop    rsp
 1004969:	(bad)  
 100496a:	add    al,BYTE PTR [rax]
	...
 1004974:	add    eax,DWORD PTR [rax]
 1004976:	add    BYTE PTR [rax],al
 1004978:	fs (bad) 
 100497a:	add    al,BYTE PTR [rax]
 100497c:	and    BYTE PTR [rax],al
	...
 100498e:	add    BYTE PTR [rax],al
 1004990:	and    al,BYTE PTR [rip+0x11993]        # 0x1016329
 1004996:	add    BYTE PTR [rax],al
 1004998:	cwde   
 1004999:	(bad)  
 100499a:	add    al,BYTE PTR [rax]
	...
 10049a4:	add    eax,DWORD PTR [rax]
 10049a6:	add    BYTE PTR [rax],al
 10049a8:	movabs al,ds:0x20000207
	...
 10049bd:	add    BYTE PTR [rax],al
 10049bf:	add    BYTE PTR [rdx],ah
 10049c1:	add    eax,0x11993
 10049c6:	add    BYTE PTR [rax],al
 10049c8:	fadd   DWORD PTR [rdi]
 10049ca:	add    al,BYTE PTR [rax]
	...
 10049d4:	add    eax,DWORD PTR [rax]
 10049d6:	add    BYTE PTR [rax],al
 10049d8:	loopne 0x10049e1
 10049da:	add    al,BYTE PTR [rax]
 10049dc:	and    BYTE PTR [rax],al
	...
 10049ee:	add    BYTE PTR [rax],al
 10049f0:	and    al,BYTE PTR [rip+0x41993]        # 0x1046389
 10049f6:	add    BYTE PTR [rax],al
 10049f8:	adc    al,0x8
 10049fa:	add    al,BYTE PTR [rax]
	...
 1004a04:	add    al,0x0
 1004a06:	add    BYTE PTR [rax],al
 1004a08:	xor    al,0x8
 1004a0a:	add    al,BYTE PTR [rax]
 1004a0c:	and    BYTE PTR [rax],al
	...
 1004a1e:	add    BYTE PTR [rax],al
 1004a20:	and    al,BYTE PTR [rip+0x11993]        # 0x10163b9
 1004a26:	add    BYTE PTR [rax],al
 1004a28:	ins    BYTE PTR es:[rdi],dx
 1004a29:	or     BYTE PTR [rdx],al
	...
 1004a33:	add    BYTE PTR [rbx],al
 1004a35:	add    BYTE PTR [rax],al
 1004a37:	add    BYTE PTR [rax+rcx*1+0x2],dh
 1004a3b:	add    BYTE PTR [rax],ah
	...
 1004a4d:	add    BYTE PTR [rax],al
 1004a4f:	add    BYTE PTR [rdx],ah
 1004a51:	add    eax,0x41993
 1004a56:	add    BYTE PTR [rax],al
 1004a58:	test   al,0x8
 1004a5a:	add    al,BYTE PTR [rax]
	...
 1004a64:	or     DWORD PTR [rax],eax
 1004a66:	add    BYTE PTR [rax],al
 1004a68:	enter  0x208,0x0
 1004a6c:	and    BYTE PTR [rax],al
	...
 1004a7e:	add    BYTE PTR [rax],al
 1004a80:	and    al,BYTE PTR [rip+0x41993]        # 0x1046419
 1004a86:	add    BYTE PTR [rax],al
 1004a88:	xor    BYTE PTR [rcx],cl
 1004a8a:	add    al,BYTE PTR [rax]
	...
 1004a94:	or     DWORD PTR [rax],eax
 1004a96:	add    BYTE PTR [rax],al
 1004a98:	push   rax
 1004a99:	or     DWORD PTR [rdx],eax
 1004a9b:	add    BYTE PTR [rax],ch
	...
 1004aad:	add    BYTE PTR [rax],al
 1004aaf:	add    BYTE PTR [rdx],ah
 1004ab1:	add    eax,0x21993
 1004ab6:	add    BYTE PTR [rax],al
 1004ab8:	mov    ah,0x9
 1004aba:	add    al,BYTE PTR [rax]
	...
 1004ac4:	add    eax,0xc4000000
 1004ac9:	or     DWORD PTR [rdx],eax
 1004acb:	add    BYTE PTR [rax],ah
	...
 1004add:	add    BYTE PTR [rax],al
 1004adf:	add    BYTE PTR [rdx],ah
 1004ae1:	add    eax,0x151993
 1004ae6:	add    BYTE PTR [rax],al
 1004ae8:	adc    BYTE PTR [rdx],cl
 1004aea:	add    al,BYTE PTR [rax]
	...
 1004af4:	and    al,BYTE PTR [rax]
 1004af6:	add    BYTE PTR [rax],al
 1004af8:	mov    eax,0x2000020a
	...
 1004b0d:	add    BYTE PTR [rax],al
 1004b0f:	add    BYTE PTR [rdx],ah
 1004b11:	add    eax,0x11993
 1004b16:	add    BYTE PTR [rax],al
 1004b18:	fmul   DWORD PTR [rbx]
 1004b1a:	add    al,BYTE PTR [rax]
	...
 1004b24:	add    eax,DWORD PTR [rax]
 1004b26:	add    BYTE PTR [rax],al
 1004b28:	loopne 0x1004b35
 1004b2a:	add    al,BYTE PTR [rax]
 1004b2c:	and    BYTE PTR [rax],al
	...
 1004b3e:	add    BYTE PTR [rax],al
 1004b40:	and    al,BYTE PTR [rip+0x11993]        # 0x10164d9
 1004b46:	add    BYTE PTR [rax],al
 1004b48:	or     BYTE PTR [rdx+rax*1],cl
	...
 1004b53:	add    BYTE PTR [rbx],al
 1004b55:	add    BYTE PTR [rax],al
 1004b57:	add    BYTE PTR [rax],dl
 1004b59:	or     al,0x2
 1004b5b:	add    BYTE PTR [rax],ah
	...
 1004b6d:	add    BYTE PTR [rax],al
 1004b6f:	add    BYTE PTR [rdx],ah
 1004b71:	add    eax,0x11993
 1004b76:	add    BYTE PTR [rax],al
 1004b78:	rex.WR or al,0x2
	...
 1004b83:	add    BYTE PTR [rbx],al
 1004b85:	add    BYTE PTR [rax],al
 1004b87:	add    BYTE PTR [rsp+rcx*1+0x2],dl
 1004b8b:	add    BYTE PTR [rax],ch
	...
 1004b9d:	add    BYTE PTR [rax],al
 1004b9f:	add    BYTE PTR [rdx],ah
 1004ba1:	add    eax,0x11993
 1004ba6:	add    BYTE PTR [rax],al
 1004ba8:	mov    WORD PTR [rdx+rax*1],cs
	...
 1004bb3:	add    BYTE PTR [rbx],al
 1004bb5:	add    BYTE PTR [rax],al
 1004bb7:	add    BYTE PTR [rsp+rcx*1+0x200002],dl
	...
 1004bce:	add    BYTE PTR [rax],al
 1004bd0:	and    al,BYTE PTR [rip+0x11993]        # 0x1016569
 1004bd6:	add    BYTE PTR [rax],al
 1004bd8:	int3   
 1004bd9:	or     al,0x2
	...
 1004be3:	add    BYTE PTR [rbx],al
 1004be5:	add    BYTE PTR [rax],al
 1004be7:	add    ah,dl
 1004be9:	or     al,0x2
 1004beb:	add    BYTE PTR [rax],ah
	...
 1004bfd:	add    BYTE PTR [rax],al
 1004bff:	add    BYTE PTR [rdx],ah
 1004c01:	add    eax,0x41993
 1004c06:	add    BYTE PTR [rax],al
 1004c08:	and    BYTE PTR [rip+0x2],cl        # 0x1004c10
 1004c0e:	add    BYTE PTR [rax],al
 1004c10:	add    BYTE PTR [rax],al
 1004c12:	add    BYTE PTR [rax],al
 1004c14:	or     DWORD PTR [rax],eax
 1004c16:	add    BYTE PTR [rax],al
 1004c18:	rex or eax,0x200002
	...
 1004c2e:	add    BYTE PTR [rax],al
 1004c30:	and    al,BYTE PTR [rip+0x41993]        # 0x10465c9
 1004c36:	add    BYTE PTR [rax],al
 1004c38:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1004c39:	or     eax,0x2
 1004c3e:	add    BYTE PTR [rax],al
 1004c40:	add    BYTE PTR [rax],al
 1004c42:	add    BYTE PTR [rax],al
 1004c44:	or     DWORD PTR [rax],eax
 1004c46:	add    BYTE PTR [rax],al
 1004c48:	(bad)  
 1004c49:	or     eax,0x200002
	...
 1004c5e:	add    BYTE PTR [rax],al
 1004c60:	and    al,BYTE PTR [rip+0x11993]        # 0x10165f9
 1004c66:	add    BYTE PTR [rax],al
 1004c68:	sbb    al,0xe
 1004c6a:	add    al,BYTE PTR [rax]
	...
 1004c74:	add    eax,DWORD PTR [rax]
 1004c76:	add    BYTE PTR [rax],al
 1004c78:	and    al,0xe
 1004c7a:	add    al,BYTE PTR [rax]
 1004c7c:	and    BYTE PTR [rax],al
	...
 1004c8e:	add    BYTE PTR [rax],al
 1004c90:	and    al,BYTE PTR [rip+0x11993]        # 0x1016629
 1004c96:	add    BYTE PTR [rax],al
 1004c98:	rex.WR (bad) 
 1004c9a:	add    al,BYTE PTR [rax]
	...
 1004ca4:	add    DWORD PTR [rax],eax
 1004ca6:	add    BYTE PTR [rax],al
 1004ca8:	push   rsp
 1004ca9:	(bad)  
 1004caa:	add    al,BYTE PTR [rax]
 1004cac:	and    BYTE PTR [rax],al
	...
 1004cbe:	add    BYTE PTR [rax],al
 1004cc0:	and    al,BYTE PTR [rip+0x21993]        # 0x1026659
 1004cc6:	add    BYTE PTR [rax],al
 1004cc8:	enter  0x20e,0x0
	...
 1004cd4:	add    DWORD PTR [rax],eax
 1004cd6:	add    BYTE PTR [rax],al
 1004cd8:	fmul   DWORD PTR [rsi]
 1004cda:	add    al,BYTE PTR [rax]
 1004cdc:	and    BYTE PTR [rax],al
	...
 1004cee:	add    BYTE PTR [rax],al
 1004cf0:	and    al,BYTE PTR [rip+0x11993]        # 0x1016689
 1004cf6:	add    BYTE PTR [rax],al
 1004cf8:	lar    r8,WORD PTR [rax]
	...
 1004d04:	add    DWORD PTR [rax],eax
 1004d06:	add    BYTE PTR [rax],al
 1004d08:	push   rsp
 1004d09:	lar    eax,WORD PTR [rax]
 1004d0c:	and    BYTE PTR [rax],al
	...
 1004d1e:	add    BYTE PTR [rax],al
 1004d20:	and    al,BYTE PTR [rip+0x21993]        # 0x10266b9
 1004d26:	add    BYTE PTR [rax],al
 1004d28:	enter  0x20f,0x0
	...
 1004d34:	add    DWORD PTR [rax],eax
 1004d36:	add    BYTE PTR [rax],al
 1004d38:	fmul   DWORD PTR [rdi]
 1004d3a:	add    al,BYTE PTR [rax]
 1004d3c:	and    BYTE PTR [rax],al
	...
 1004d4e:	add    BYTE PTR [rax],al
 1004d50:	and    al,BYTE PTR [rip+0x11993]        # 0x10166e9
 1004d56:	add    BYTE PTR [rax],al
 1004d58:	lock lar eax,WORD PTR [rax]
	...
 1004d64:	add    eax,DWORD PTR [rax]
 1004d66:	add    BYTE PTR [rax],al
 1004d68:	clc    
 1004d69:	lar    eax,WORD PTR [rax]
 1004d6c:	and    BYTE PTR [rax],al
	...
 1004d7e:	add    BYTE PTR [rax],al
 1004d80:	and    al,BYTE PTR [rip+0x11993]        # 0x1016719
 1004d86:	add    BYTE PTR [rax],al
 1004d88:	sub    al,0x10
 1004d8a:	add    al,BYTE PTR [rax]
	...
 1004d94:	add    eax,DWORD PTR [rax]
 1004d96:	add    BYTE PTR [rax],al
 1004d98:	xor    al,0x10
 1004d9a:	add    al,BYTE PTR [rax]
 1004d9c:	and    BYTE PTR [rax],al
	...
 1004dae:	add    BYTE PTR [rax],al
 1004db0:	and    al,BYTE PTR [rip+0x31993]        # 0x1036749
 1004db6:	add    BYTE PTR [rax],al
 1004db8:	ins    BYTE PTR es:[rdi],dx
 1004db9:	adc    BYTE PTR [rdx],al
	...
 1004dc3:	add    BYTE PTR [rbx],al
 1004dc5:	add    BYTE PTR [rax],al
 1004dc7:	add    BYTE PTR [rax+rdx*1+0x200002],al
	...
 1004dde:	add    BYTE PTR [rax],al
 1004de0:	and    al,BYTE PTR [rip+0x11993]        # 0x1016779
 1004de6:	add    BYTE PTR [rax],al
 1004de8:	lods   al,BYTE PTR ds:[rsi]
 1004de9:	adc    BYTE PTR [rdx],al
	...
 1004df3:	add    BYTE PTR [rcx],al
 1004df5:	add    BYTE PTR [rax],al
 1004df7:	add    BYTE PTR [rax+rdx*1+0x200002],dh
	...
 1004e0e:	add    BYTE PTR [rax],al
 1004e10:	and    al,BYTE PTR [rip+0x21993]        # 0x10267a9
 1004e16:	add    BYTE PTR [rax],al
 1004e18:	sub    BYTE PTR [rcx],dl
 1004e1a:	add    al,BYTE PTR [rax]
	...
 1004e24:	add    DWORD PTR [rax],eax
 1004e26:	add    BYTE PTR [rax],al
 1004e28:	cmp    BYTE PTR [rcx],dl
 1004e2a:	add    al,BYTE PTR [rax]
 1004e2c:	and    BYTE PTR [rax],al
	...
 1004e3e:	add    BYTE PTR [rax],al
 1004e40:	and    al,BYTE PTR [rip+0x11993]        # 0x10167d9
 1004e46:	add    BYTE PTR [rax],al
 1004e48:	push   0x211
 1004e4d:	add    BYTE PTR [rax],al
 1004e4f:	add    BYTE PTR [rax],al
 1004e51:	add    BYTE PTR [rax],al
 1004e53:	add    BYTE PTR [rcx],al
 1004e55:	add    BYTE PTR [rax],al
 1004e57:	add    BYTE PTR [rax+0x11],dh
 1004e5a:	add    al,BYTE PTR [rax]
 1004e5c:	and    BYTE PTR [rax],al
	...
 1004e6e:	add    BYTE PTR [rax],al
 1004e70:	and    al,BYTE PTR [rip+0x21993]        # 0x1026809
 1004e76:	add    BYTE PTR [rax],al
 1004e78:	in     al,0x11
 1004e7a:	add    al,BYTE PTR [rax]
	...
 1004e84:	add    DWORD PTR [rax],eax
 1004e86:	add    BYTE PTR [rax],al
 1004e88:	hlt    
 1004e89:	adc    DWORD PTR [rdx],eax
 1004e8b:	add    BYTE PTR [rax],ah
	...
 1004e9d:	add    BYTE PTR [rax],al
 1004e9f:	add    BYTE PTR [rdx],ah
 1004ea1:	add    eax,0x11993
 1004ea6:	add    BYTE PTR [rax],al
 1004ea8:	and    al,0x12
 1004eaa:	add    al,BYTE PTR [rax]
	...
 1004eb4:	add    DWORD PTR [rax],eax
 1004eb6:	add    BYTE PTR [rax],al
 1004eb8:	sub    al,0x12
 1004eba:	add    al,BYTE PTR [rax]
 1004ebc:	and    BYTE PTR [rax],al
	...
 1004ece:	add    BYTE PTR [rax],al
 1004ed0:	and    al,BYTE PTR [rip+0x21993]        # 0x1026869
 1004ed6:	add    BYTE PTR [rax],al
 1004ed8:	movabs al,ds:0x212
 1004ee1:	add    BYTE PTR [rax],al
 1004ee3:	add    BYTE PTR [rcx],al
 1004ee5:	add    BYTE PTR [rax],al
 1004ee7:	add    BYTE PTR [rax+0x20000212],dh
	...
 1004efd:	add    BYTE PTR [rax],al
 1004eff:	add    BYTE PTR [rdx],ah
 1004f01:	add    eax,0x31993
 1004f06:	add    BYTE PTR [rax],al
 1004f08:	fcom   DWORD PTR [rdx]
 1004f0a:	add    al,BYTE PTR [rax]
	...
 1004f14:	add    eax,DWORD PTR [rax]
 1004f16:	add    BYTE PTR [rax],al
 1004f18:	lock adc al,BYTE PTR [rdx]
 1004f1b:	add    BYTE PTR [rax],ah
	...
 1004f2d:	add    BYTE PTR [rax],al
 1004f2f:	add    BYTE PTR [rdx],ah
 1004f31:	add    eax,0x11993
 1004f36:	add    BYTE PTR [rax],al
 1004f38:	and    al,0x13
 1004f3a:	add    al,BYTE PTR [rax]
	...
 1004f44:	add    eax,DWORD PTR [rax]
 1004f46:	add    BYTE PTR [rax],al
 1004f48:	sub    al,0x13
 1004f4a:	add    al,BYTE PTR [rax]
 1004f4c:	and    BYTE PTR [rax],al
	...
 1004f5e:	add    BYTE PTR [rax],al
 1004f60:	and    al,BYTE PTR [rip+0x21993]        # 0x10268f9
 1004f66:	add    BYTE PTR [rax],al
 1004f68:	push   0x213
 1004f6d:	add    BYTE PTR [rax],al
 1004f6f:	add    BYTE PTR [rax],al
 1004f71:	add    BYTE PTR [rax],al
 1004f73:	add    BYTE PTR [rip+0x78000000],al        # 0x79004f79
 1004f79:	adc    eax,DWORD PTR [rdx]
 1004f7b:	add    BYTE PTR [rax+0x0],dl
	...
 1004f8e:	add    BYTE PTR [rax],al
 1004f90:	and    al,BYTE PTR [rip+0x21993]        # 0x1026929
 1004f96:	add    BYTE PTR [rax],al
 1004f98:	(bad)  
 1004f99:	adc    eax,DWORD PTR [rdx]
	...
 1004fa3:	add    BYTE PTR [rip+0xffffffffd4000000],al        # 0xffffffffd5004fa9
 1004fa9:	adc    eax,DWORD PTR [rdx]
 1004fab:	add    BYTE PTR [rax+0x0],dl
	...
 1004fb6:	add    BYTE PTR [rax],al
 1004fb8:	add    BYTE PTR gs:[rsi+0x0],dh
 1004fbc:	add    BYTE PTR gs:[rsi+0x0],ch
 1004fc0:	je     0x1004fc2
 1004fc2:	add    BYTE PTR [rax],al
 1004fc4:	add    BYTE PTR [rax],al
 1004fc6:	add    BYTE PTR [rax],al
 1004fc8:	(bad)  
 1004fc9:	add    BYTE PTR [rbx+0x0],ah
 1004fcc:	je     0x1004fce
 1004fce:	imul   eax,DWORD PTR [rax],0x6e006f
 1004fd4:	add    BYTE PTR [rax],al
 1004fd6:	add    BYTE PTR [rax],al
 1004fd8:	fdivr  DWORD PTR [rax+rax*1+0x1]
 1004fdf:	add    al,bl
 1004fe1:	mov    esp,0x100
 1004fe6:	add    BYTE PTR [rax],al
 1004fe8:	mov    al,0x0
 1004fea:	add    DWORD PTR [rcx],eax
 1004fec:	add    BYTE PTR [rax],al
 1004fee:	add    BYTE PTR [rax],al
 1004ff0:	rol    BYTE PTR [rax],1
 1004ff2:	add    DWORD PTR [rcx],eax
 1004ff4:	add    BYTE PTR [rax],al
 1004ff6:	add    BYTE PTR [rax],al
 1004ff8:	rol    BYTE PTR [rax],0x1
 1004ffb:	add    DWORD PTR [rax],eax
 1004ffd:	add    BYTE PTR [rax],al
 1004fff:	add    BYTE PTR [rax],ah
 1005001:	add    eax,DWORD PTR [rcx]
 1005003:	add    DWORD PTR [rax],eax
 1005005:	add    BYTE PTR [rax],al
 1005007:	add    BYTE PTR [rax+0x3],ah
 100500a:	add    DWORD PTR [rcx],eax
 100500c:	add    BYTE PTR [rax],al
 100500e:	add    BYTE PTR [rax],al
 1005010:	adc    BYTE PTR [rcx+rax*1+0x1],ch
 1005014:	add    BYTE PTR [rax],al
 1005016:	add    BYTE PTR [rax],al
 1005018:	jo     0x1005020
 100501a:	add    DWORD PTR [rcx],eax
 100501c:	add    BYTE PTR [rax],al
 100501e:	add    BYTE PTR [rax],al
 1005020:	xor    BYTE PTR [rcx],ah
 1005022:	add    DWORD PTR [rcx],eax
 1005024:	add    BYTE PTR [rax],al
 1005026:	add    BYTE PTR [rax],al
 1005028:	push   rax
 1005029:	and    al,BYTE PTR [rcx]
 100502b:	add    DWORD PTR [rax],eax
 100502d:	add    BYTE PTR [rax],al
 100502f:	add    BYTE PTR [rax+0x10129],dl
 1005035:	add    BYTE PTR [rax],al
 1005037:	add    BYTE PTR [rax+0x10138],dh
 100503d:	add    BYTE PTR [rax],al
 100503f:	add    BYTE PTR [rax],al
 1005041:	cmp    al,BYTE PTR [rcx]
 1005043:	add    DWORD PTR [rax],eax
 1005045:	add    BYTE PTR [rax],al
 1005047:	add    BYTE PTR [rax],dh
 1005049:	add    BYTE PTR [rax+0x0],bh
 100504c:	and    eax,0x7000
 1005051:	add    BYTE PTR [rax],al
 1005053:	add    BYTE PTR [rax],al
 1005055:	add    BYTE PTR [rax],al
 1005057:	add    BYTE PTR [rax+rax*1+0x72],dh
 100505b:	add    BYTE PTR [rbp+0x0],dh
 100505e:	add    BYTE PTR gs:[rax],al
 1005061:	add    BYTE PTR [rax],al
 1005063:	add    BYTE PTR [rcx],dh
 1005065:	add    BYTE PTR [rax],al
 1005067:	add    BYTE PTR [rsi+0x0],ah
 100506a:	(bad)  
 100506b:	add    BYTE PTR [rax+rax*1+0x73],ch
 100506f:	add    BYTE PTR [rbp+0x0],ah
 1005072:	add    BYTE PTR [rax],al
 1005074:	xor    BYTE PTR [rax],al
	...
 100507e:	add    BYTE PTR [rax],al
 1005080:	(bad)  
 1005081:	add    BYTE PTR [rdi],ch
 1005083:	add    BYTE PTR [rbp+0x0],ah
 1005086:	jbe    0x1005088
 1005088:	add    BYTE PTR gs:[rsi+0x0],ch
 100508c:	je     0x100508e
 100508e:	pop    rdi
 100508f:	add    BYTE PTR [rbx+0x0],dh
 1005092:	add    BYTE PTR gs:[rbx+0x0],dh
 1005096:	jae    0x1005098
 1005098:	imul   eax,DWORD PTR [rax],0x6e006f
 100509e:	add    BYTE PTR [rax],al
 10050a0:	xchg   ebp,eax
 10050a1:	mov    edi,0x7b362933
 10050a6:	rcl    BYTE PTR [rcx],cl
 10050a8:	mov    dl,0xe
 10050aa:	add    al,al
 10050ac:	rex.WRXB cdqe 
 10050ae:	ds (bad) 
 10050b0:	rex.WRB add BYTE PTR [r9+0x0],r12b
 10050b4:	js     0x10050b6
 10050b6:	add    BYTE PTR [r8+rax*1+0x65],r13b
 10050bb:	add    BYTE PTR [rbp+0x0],ch
 10050be:	add    BYTE PTR gs:[rsi+0x0],ch
 10050c2:	je     0x10050c4
 10050c4:	add    BYTE PTR [rbp+0x0],r12b
 10050c8:	jo     0x10050ca
 10050ca:	je     0x10050cc
 10050cc:	push   0x4d000000
 10050d1:	add    BYTE PTR [rcx+0x0],ah
 10050d4:	js     0x10050d6
 10050d6:	pop    rax
 10050d7:	add    BYTE PTR [rbp+0x0],ch
 10050da:	ins    BYTE PTR es:[rdi],dx
 10050db:	add    BYTE PTR [rbx+0x0],dl
 10050de:	imul   eax,DWORD PTR [rax],0x65007a
 10050e4:	add    BYTE PTR [rax],al
 10050e6:	add    BYTE PTR [rax],al
 10050e8:	push   rax
 10050e9:	add    BYTE PTR [rdx+0x0],dh
 10050ec:	outs   dx,DWORD PTR ds:[rsi]
 10050ed:	add    BYTE PTR [rax+0x0],ch
 10050f0:	imul   eax,DWORD PTR [rax],0x690062
 10050f6:	je     0x10050f8
 10050f8:	add    BYTE PTR [rax+rax*1+0x44],r10b
 10050fd:	add    BYTE PTR [rax],al
 10050ff:	add    BYTE PTR [rdx+0x0],dl
 1005102:	add    BYTE PTR gs:[rbx+0x0],dh
 1005106:	outs   dx,DWORD PTR ds:[rsi]
 1005107:	add    BYTE PTR [rax+rax*1+0x76],ch
 100510b:	add    BYTE PTR [rbp+0x0],ah
 100510e:	add    BYTE PTR [r8+0x0],r15b
 1005112:	je     0x1005114
 1005114:	add    BYTE PTR gs:[rdx+0x0],dh
 1005118:	outs   dx,BYTE PTR ds:[rsi]
 1005119:	add    BYTE PTR [rcx+0x0],ah
 100511c:	ins    BYTE PTR es:[rdi],dx
 100511d:	add    BYTE PTR [rbx+0x0],dh
	...
 1005128:	and    eax,0x20007300
 100512d:	add    BYTE PTR [rcx+0x0],ah
 1005130:	je     0x1005132
 1005132:	and    BYTE PTR [rax],al
 1005134:	ins    BYTE PTR es:[rdi],dx
 1005135:	add    BYTE PTR [rcx+0x0],ch
 1005138:	outs   dx,BYTE PTR ds:[rsi]
 1005139:	add    BYTE PTR [rbp+0x0],ah
 100513c:	and    BYTE PTR [rax],al
 100513e:	and    eax,0x20006400
 1005143:	add    BYTE PTR [rax+0x0],dh
 1005146:	outs   dx,DWORD PTR ds:[rsi]
 1005147:	add    BYTE PTR [rbx+0x0],dh
 100514a:	imul   eax,DWORD PTR [rax],0x690074
 1005150:	outs   dx,DWORD PTR ds:[rsi]
 1005151:	add    BYTE PTR [rsi+0x0],ch
 1005154:	and    BYTE PTR [rax],al
 1005156:	and    eax,0xa006400
 100515b:	add    BYTE PTR [rip+0x7300],ah        # 0x100c461
 1005161:	add    BYTE PTR [rax],al
 1005163:	add    BYTE PTR [rax],al
 1005165:	add    BYTE PTR [rax],al
 1005167:	add    BYTE PTR [rbp+0x0],ah
 100516a:	jbe    0x100516c
 100516c:	add    BYTE PTR gs:[rsi+0x0],ch
 1005170:	je     0x1005172
 1005172:	pop    rdi
 1005173:	add    BYTE PTR [rbx+0x0],dh
 1005176:	add    BYTE PTR gs:[rbx+0x0],dh
 100517a:	jae    0x100517c
 100517c:	imul   eax,DWORD PTR [rax],0x6e006f
 1005182:	add    BYTE PTR [rax],al
 1005184:	add    BYTE PTR [rax],al
 1005186:	add    BYTE PTR [rax],al
 1005188:	(bad)  
 1005189:	add    BYTE PTR [rdi],ch
 100518b:	add    BYTE PTR [rbp+0x0],ah
 100518e:	jbe    0x1005190
 1005190:	add    BYTE PTR gs:[rsi+0x0],ch
 1005194:	je     0x1005196
 1005196:	pop    rdi
 1005197:	add    BYTE PTR [rbx+0x0],dh
 100519a:	add    BYTE PTR gs:[rbx+0x0],dh
 100519e:	jae    0x10051a0
 10051a0:	imul   eax,DWORD PTR [rax],0x6e006f
 10051a6:	pop    rbx
 10051a7:	add    BYTE PTR [rax+0x0],al
 10051aa:	outs   dx,BYTE PTR ds:[rsi]
 10051ab:	add    BYTE PTR [rcx+0x0],ah
 10051ae:	ins    DWORD PTR es:[rdi],dx
 10051af:	add    BYTE PTR [rbp+0x0],ah
 10051b2:	cmp    eax,0x25002700
 10051b7:	add    BYTE PTR [rbx+0x0],dh
 10051ba:	(bad)  
 10051bb:	add    BYTE PTR [rbp+0x0],bl
 10051be:	add    BYTE PTR [rax],al
 10051c0:	ins    DWORD PTR es:[rdi],dx
 10051c1:	add    BYTE PTR [rcx+0x0],ah
 10051c4:	js     0x10051c6
 10051c6:	add    BYTE PTR [r14+0x0],r14b
 10051ca:	add    BYTE PTR gs:[rsi+0x0],ch
 10051ce:	je     0x10051d0
 10051d0:	push   rbx
 10051d1:	add    BYTE PTR [rcx+0x0],ch
 10051d4:	jp     0x10051d6
 10051d6:	add    BYTE PTR gs:[rax],al
 10051d9:	add    BYTE PTR [rax],al
 10051db:	add    BYTE PTR [rax],al
 10051dd:	add    BYTE PTR [rax],al
 10051df:	add    BYTE PTR [rbp+0x0],ch
 10051e2:	(bad)  
 10051e3:	add    BYTE PTR [rax+0x0],bh
 10051e6:	rex.WRB add BYTE PTR [r13+0x0],r12b
 10051ea:	ins    DWORD PTR es:[rdi],dx
 10051eb:	add    BYTE PTR [rdi+0x0],ch
 10051ee:	jb     0x10051f0
 10051f0:	jns    0x10051f2
 10051f2:	add    BYTE PTR [rax],al
 10051f4:	add    BYTE PTR [rax],al
 10051f6:	add    BYTE PTR [rax],al
 10051f8:	je     0x10051fa
 10051fa:	jb     0x10051fc
 10051fc:	(bad)  
 10051fd:	add    BYTE PTR [rbx+0x0],ah
 1005200:	imul   eax,DWORD PTR [rax],0x43
 1005203:	add    BYTE PTR [rcx+0x0],ah
 1005206:	jne    0x1005208
 1005208:	jae    0x100520a
 100520a:	(bad)  
 100520b:	add    BYTE PTR [rax+rax*1+0x69],ch
 100520f:	add    BYTE PTR [rax+rax*1+0x79],dh
 1005213:	add    BYTE PTR [rax],al
 1005215:	add    BYTE PTR [rax],al
 1005217:	add    BYTE PTR [rax+rax*1+0x69],ah
 100521b:	add    BYTE PTR [rbx+0x0],dh
 100521e:	jo     0x1005220
 1005220:	(bad)  
 1005221:	add    BYTE PTR [rax+rax*1+0x63],dh
 1005225:	add    BYTE PTR [rax+0x0],ch
 1005228:	rex.WR add BYTE PTR [rcx+0x0],r12b
 100522c:	je     0x100522e
 100522e:	add    BYTE PTR gs:[rsi+0x0],ch
 1005232:	movsxd eax,DWORD PTR [rax]
 1005234:	jns    0x1005236
 1005236:	add    BYTE PTR [rax],al
 1005238:	add    BYTE PTR gs:[rsi+0x0],dh
 100523c:	add    BYTE PTR gs:[rsi+0x0],ch
 1005240:	je     0x1005242
 1005242:	push   rdx
 1005243:	add    BYTE PTR [rbp+0x0],ah
 1005246:	je     0x1005248
 1005248:	add    BYTE PTR gs:[rsi+0x0],ch
 100524c:	je     0x100524e
 100524e:	imul   eax,DWORD PTR [rax],0x6e006f
 1005254:	rex.WRB add BYTE PTR [r15+0x0],r13b
 1005258:	add    BYTE PTR fs:[rbp+0x0],ah
 100525c:	add    BYTE PTR [rax],al
 100525e:	add    BYTE PTR [rax],al
 1005260:	ins    DWORD PTR es:[rdi],dx
 1005261:	add    BYTE PTR [rbp+0x0],ah
 1005264:	ins    DWORD PTR es:[rdi],dx
 1005265:	add    BYTE PTR [rdi+0x0],ch
 1005268:	jb     0x100526a
 100526a:	jns    0x100526c
 100526c:	push   rax
 100526d:	add    BYTE PTR [rcx+0x0],ah
 1005270:	jb     0x1005272
 1005272:	je     0x1005274
 1005274:	imul   eax,DWORD PTR [rax],0x690074
 100527a:	outs   dx,DWORD PTR ds:[rsi]
 100527b:	add    BYTE PTR [rsi+0x0],ch
 100527e:	rex.WRB add BYTE PTR [r15+0x0],r13b
 1005282:	add    BYTE PTR fs:[rbp+0x0],ah
 1005286:	add    BYTE PTR [rax],al
 1005288:	(bad)  
 1005289:	add    BYTE PTR [rbp+0x0],ah
 100528c:	jbe    0x100528e
 100528e:	add    BYTE PTR gs:[rsi+0x0],ch
 1005292:	je     0x1005294
 1005294:	add    BYTE PTR [rax],al
 1005296:	add    BYTE PTR [rax],al
 1005298:	(bad)  
 1005299:	add    BYTE PTR [rax+rax*1+0x61],dh
 100529d:	add    BYTE PTR [rdx+0x0],dh
 10052a0:	add    BYTE PTR [ebp+0x0],ah
 10052a4:	je     0x10052a6
 10052a6:	add    BYTE PTR [rax],al
 10052a8:	and    eax,0x2e007300
 10052ad:	add    BYTE PTR [rip+0x2e007300],ah        # 0x2f00c5b3
 10052b3:	add    BYTE PTR [rip+0x7300],ah        # 0x100c5b9
 10052b9:	add    BYTE PTR [rax],al
 10052bb:	add    BYTE PTR [rax],al
 10052bd:	add    BYTE PTR [rax],al
 10052bf:	add    BYTE PTR [rip+0x2e007300],ah        # 0x2f00c5c5
 10052c5:	add    BYTE PTR [rip+0x7300],ah        # 0x100c5cb
 10052cb:	add    BYTE PTR [rax],al
 10052cd:	add    BYTE PTR [rax],al
 10052cf:	add    BYTE PTR [rax+0x0],dh
 10052d2:	jb     0x10052d4
 10052d4:	add    BYTE PTR gs:[rax+rax*1+0x69],ah
 10052d9:	add    BYTE PTR [rbx+0x0],ah
 10052dc:	(bad)  
 10052dd:	add    BYTE PTR [rax+rax*1+0x65],dh
 10052e1:	add    BYTE PTR [rax],al
 10052e3:	add    BYTE PTR [rax],al
 10052e5:	add    BYTE PTR [rax],al
 10052e7:	add    BYTE PTR [rax+rax*1+0x65],ch
 10052eb:	add    BYTE PTR [rcx+0x0],ah
 10052ee:	data16 add BYTE PTR [rax],al
 10052f1:	add    BYTE PTR [rax],al
 10052f3:	add    BYTE PTR [rax],al
 10052f5:	add    BYTE PTR [rax],al
 10052f7:	add    BYTE PTR [rcx+0x0],ah
 10052fa:	outs   dx,BYTE PTR ds:[rsi]
 10052fb:	add    BYTE PTR [rax+rax*1+0x0],ah
 10052ff:	add    BYTE PTR [rdi+0x0],ch
 1005302:	jb     0x1005304
 1005304:	add    BYTE PTR [rax],al
 1005306:	add    BYTE PTR [rax],al
 1005308:	outs   dx,BYTE PTR ds:[rsi]
 1005309:	add    BYTE PTR [rdi+0x0],ch
 100530c:	je     0x100530e
 100530e:	add    BYTE PTR [rax],al
 1005310:	movsxd eax,DWORD PTR [rax]
 1005312:	outs   dx,DWORD PTR ds:[rsi]
 1005313:	add    BYTE PTR [rbp+0x0],ch
 1005316:	jo     0x1005318
 1005318:	(bad)  
 1005319:	add    BYTE PTR [rdx+0x0],dh
 100531c:	(bad)  
 100531d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1005321:	add    BYTE PTR [rdx+0x0],dh
 1005324:	add    BYTE PTR [rax],al
 1005326:	add    BYTE PTR [rax],al
 1005328:	jbe    0x100532a
 100532a:	(bad)  
 100532b:	add    BYTE PTR [rax+rax*1+0x75],ch
 100532f:	add    BYTE PTR [rbp+0x0],ah
 1005332:	(bad)  
 1005333:	add    BYTE PTR [rax+rax*1+0x65],dh
 1005337:	add    BYTE PTR [rax+0x0],bh
 100533a:	je     0x100533c
 100533c:	sub    BYTE PTR [rax],al
 100533e:	sub    DWORD PTR [rax],eax
	...
 1005348:	add    BYTE PTR [eax+eax*1+0x6f],ch
 100534d:	add    BYTE PTR [rdx+0x0],ah
 1005350:	(bad)  
 1005351:	add    BYTE PTR [rax+rax*1+0x0],ch
 1005355:	add    BYTE PTR [rax],al
 1005357:	add    BYTE PTR [rsi+0x0],ah
 100535a:	imul   eax,DWORD PTR [rax],0x6c0065
 1005360:	add    BYTE PTR fs:[rax],al
 1005363:	add    BYTE PTR [rip+0x7300],ah        # 0x100c669
 1005369:	add    BYTE PTR [rax],al
 100536b:	add    BYTE PTR [rax],al
 100536d:	add    BYTE PTR [rax],al
 100536f:	add    BYTE PTR [rax+0x0],dh
 1005372:	(bad)  
 1005373:	add    BYTE PTR [rdx+0x0],dh
 1005376:	(bad)  
 1005377:	add    BYTE PTR [rbp+0x0],ch
 100537a:	add    BYTE PTR gs:[rax+rax*1+0x65],dh
 100537f:	add    BYTE PTR [rdx+0x0],dh
 1005382:	add    BYTE PTR [rax],al
 1005384:	add    BYTE PTR [rax],al
 1005386:	add    BYTE PTR [rax],al
 1005388:	jbe    0x100538a
 100538a:	(bad)  
 100538b:	add    BYTE PTR [rax+rax*1+0x75],ch
 100538f:	add    BYTE PTR [rbp+0x0],ah
 1005392:	add    BYTE PTR [rax],al
 1005394:	add    BYTE PTR [rax],al
 1005396:	add    BYTE PTR [rax+0x0],ah
 1005399:	add    al,0x0
 100539b:	(bad)  
 100539c:	add    BYTE PTR [rax],cl
 100539e:	add    BYTE PTR [rax+0x0],ah
 10053a1:	or     al,0x0
 10053a3:	(bad)  
 10053a4:	add    BYTE PTR [rax],dl
 10053a6:	add    BYTE PTR [rax+0x0],ah
 10053a9:	adc    al,0x0
 10053ab:	(bad)  
 10053ac:	add    BYTE PTR [rax],bl
 10053ae:	add    BYTE PTR [rax+0x0],ah
 10053b1:	sbb    al,0x0
 10053b3:	(bad)  
 10053b4:	add    BYTE PTR [rax],ah
 10053b6:	add    BYTE PTR [rax+0x0],ah
 10053b9:	and    al,0x0
 10053bb:	(bad)  
 10053bc:	add    BYTE PTR [rax],ch
 10053be:	add    BYTE PTR [rax+0x0],ah
 10053c1:	xor    BYTE PTR [rax],al
 10053c3:	(bad)  
 10053c4:	add    BYTE PTR [rax+rax*1],dh
 10053c7:	(bad)  
 10053c8:	add    BYTE PTR [rax],bh
 10053ca:	add    BYTE PTR [rax+0x0],ah
 10053cd:	cmp    al,0x0
 10053cf:	(bad)  
 10053d0:	add    BYTE PTR [rax+0x0],al
 10053d3:	(bad)  
 10053d4:	add    BYTE PTR [rax+rax*1+0x60],cl
 10053d8:	add    BYTE PTR [rax+0x0],dl
 10053db:	(bad)  
 10053dc:	add    BYTE PTR [rax+rax*1+0x60],dl
 10053e0:	add    BYTE PTR [rax+0x0],bl
 10053e3:	(bad)  
 10053e4:	add    BYTE PTR [rax+rax*1+0x60],bl
 10053e8:	and    al,BYTE PTR [rip+0x21993]        # 0x1026d81
 10053ee:	add    BYTE PTR [rax],al
 10053f0:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 10053f1:	adc    al,0x2
	...
 10053fb:	add    BYTE PTR [rip+0xffffffffb4000000],al        # 0xffffffffb5005401
 1005401:	adc    al,0x2
 1005403:	add    BYTE PTR [rax],ah
	...
 100540d:	add    BYTE PTR [rax],al
 100540f:	add    BYTE PTR [rdx],ah
 1005411:	add    eax,0x31993
 1005416:	add    BYTE PTR [rax],al
 1005418:	sbb    al,0x15
 100541a:	add    al,BYTE PTR [rax]
	...
 1005424:	add    al,0x0
 1005426:	add    BYTE PTR [rax],al
 1005428:	xor    al,0x15
 100542a:	add    al,BYTE PTR [rax]
	...
 1005438:	and    al,BYTE PTR [rip+0x11993]        # 0x1016dd1
 100543e:	add    BYTE PTR [rax],al
 1005440:	mov    esp,0x215
 1005445:	add    BYTE PTR [rax],al
 1005447:	add    BYTE PTR [rax],al
 1005449:	add    BYTE PTR [rax],al
 100544b:	add    BYTE PTR [rbx],al
 100544d:	add    BYTE PTR [rax],al
 100544f:	add    ah,al
 1005451:	adc    eax,0x200002
	...
 100545e:	add    BYTE PTR [rax],al
 1005460:	and    al,BYTE PTR [rip+0x11993]        # 0x1016df9
 1005466:	add    BYTE PTR [rax],al
 1005468:	sbb    al,0x16
 100546a:	add    al,BYTE PTR [rax]
	...
 1005474:	add    DWORD PTR [rax],eax
 1005476:	add    BYTE PTR [rax],al
 1005478:	and    al,0x16
 100547a:	add    al,BYTE PTR [rax]
	...
 1005488:	fdivr  DWORD PTR [rax+rax*1+0x1]
 100548f:	add    al,bl
 1005491:	mov    esp,0x100
 1005496:	add    BYTE PTR [rax],al
 1005498:	fdivr  DWORD PTR [rax+rax*1+0x1]
 100549f:	add    al,bl
 10054a1:	mov    esp,0x100
 10054a6:	add    BYTE PTR [rax],al
 10054a8:	fdivr  DWORD PTR [rax+rax*1+0x1]
 10054af:	add    BYTE PTR [rax],dl
 10054b1:	ins    BYTE PTR es:[rdi],dx
 10054b2:	add    DWORD PTR [rcx],eax
 10054b4:	add    BYTE PTR [rax],al
 10054b6:	add    BYTE PTR [rax],al
 10054b8:	fdivr  DWORD PTR [rax+rax*1+0x1]
 10054bf:	add    BYTE PTR [rax+0x45],bl
 10054c2:	rex.RXB
 10054c3:	gs je  0x100550b
 10054c6:	outs   dx,BYTE PTR ds:[rsi]
 10054c7:	imul   ebp,DWORD PTR [esi+0x65],0x0
	...
 100586f:	(bad)  
 1005870:	add    BYTE PTR [rax+rax*1],al
 1005873:	(bad)  
 1005874:	add    BYTE PTR [rax],cl
 1005876:	add    BYTE PTR [rax+0x0],ah
 1005879:	or     al,0x0
 100587b:	(bad)  
 100587c:	add    BYTE PTR [rax],dl
 100587e:	add    BYTE PTR [rax+0x0],ah
 1005881:	adc    al,0x0
 1005883:	(bad)  
 1005884:	add    BYTE PTR [rax],bl
 1005886:	add    BYTE PTR [rax+0x0],ah
 1005889:	sbb    al,0x0
 100588b:	(bad)  
 100588c:	add    BYTE PTR [rax],ah
 100588e:	add    BYTE PTR [rax+0x0],ah
 1005891:	and    al,0x0
 1005893:	(bad)  
 1005894:	add    BYTE PTR [rax],ch
 1005896:	add    BYTE PTR [rax+0x0],ah
 1005899:	xor    BYTE PTR [rax],al
 100589b:	(bad)  
 100589c:	add    BYTE PTR [rax+rax*1],dh
 100589f:	(bad)  
 10058a0:	add    BYTE PTR [rax],bh
 10058a2:	add    BYTE PTR [rax+0x0],ah
 10058a5:	cmp    al,0x0
 10058a7:	(bad)  
 10058a8:	add    BYTE PTR [rax+0x0],al
 10058ab:	(bad)  
 10058ac:	add    BYTE PTR [rax+rax*1+0x60],cl
 10058b0:	add    BYTE PTR [rax+0x0],dl
 10058b3:	(bad)  
 10058b4:	add    BYTE PTR [rax+rax*1+0x60],dl
 10058b8:	add    BYTE PTR [rax+0x0],bl
 10058bb:	(bad)  
 10058bc:	add    BYTE PTR [rax+rax*1+0x60],bl
 10058c0:	add    BYTE PTR [rax+0x0],ah
 10058c3:	(bad)  
 10058c4:	add    BYTE PTR [rax+rax*1+0x60],ah
 10058c8:	add    BYTE PTR [rax+rax*1],al
 10058cb:	adc    BYTE PTR [rax],al
 10058cd:	or     BYTE PTR [rax],al
 10058cf:	adc    BYTE PTR [rax],dh
 10058d1:	pop    rcx
 10058d2:	add    BYTE PTR [rcx],al
 10058d4:	add    BYTE PTR [rax],al
 10058d6:	add    BYTE PTR [rax],al
 10058d8:	jl     0x10058da
 10058da:	add    BYTE PTR [rax],al
 10058dc:	add    BYTE PTR [rax],al
 10058de:	add    BYTE PTR [rax],al
 10058e0:	sbb    BYTE PTR [rcx+0x0],0x1
 10058e4:	add    BYTE PTR [rax],al
 10058e6:	add    BYTE PTR [rax],al
 10058e8:	cwde   
 10058e9:	pop    rcx
 10058ea:	add    BYTE PTR [rcx],al
 10058ec:	add    BYTE PTR [rax],al
 10058ee:	add    BYTE PTR [rax],al
 10058f0:	mov    eax,0x10059
 10058f5:	add    BYTE PTR [rax],al
 10058f7:	add    al,ah
 10058f9:	pop    rcx
 10058fa:	add    BYTE PTR [rcx],al
 10058fc:	add    BYTE PTR [rax],al
 10058fe:	add    BYTE PTR [rax],al
 1005900:	clc    
 1005901:	pop    rcx
 1005902:	add    BYTE PTR [rcx],al
 1005904:	add    BYTE PTR [rax],al
 1005906:	add    BYTE PTR [rax],al
 1005908:	adc    BYTE PTR [rdx+0x0],bl
 100590b:	add    DWORD PTR [rax],eax
 100590d:	add    BYTE PTR [rax],al
 100590f:	add    BYTE PTR [rax],dh
 1005911:	pop    rdx
 1005912:	add    BYTE PTR [rcx],al
 1005914:	add    BYTE PTR [rax],al
 1005916:	add    BYTE PTR [rax],al
 1005918:	push   rax
 1005919:	pop    rdx
 100591a:	add    BYTE PTR [rcx],al
 100591c:	add    BYTE PTR [rax],al
 100591e:	add    BYTE PTR [rax],al
 1005920:	push   0x1005a
 1005925:	add    BYTE PTR [rax],al
 1005927:	add    BYTE PTR [rax+0x1005a],cl
 100592d:	add    BYTE PTR [rax],al
 100592f:	add    BYTE PTR [rax+rax*1+0x0],bh
 1005933:	add    BYTE PTR [rax],al
 1005935:	add    BYTE PTR [rax],al
 1005937:	add    BYTE PTR [rdx],ch
 1005939:	add    BYTE PTR [rdx],ch
 100593b:	add    BYTE PTR [rdx],ch
 100593d:	add    BYTE PTR [rax],ah
 100593f:	add    BYTE PTR [rsi+0x0],ch
 1005942:	outs   dx,DWORD PTR ds:[rsi]
 1005943:	add    BYTE PTR [rax+rax*1+0x20],dh
 1005947:	add    BYTE PTR [rcx+0x0],ah
 100594a:	jbe    0x100594c
 100594c:	(bad)  
 100594d:	add    BYTE PTR [rcx+0x0],ch
 1005950:	ins    BYTE PTR es:[rdi],dx
 1005951:	add    BYTE PTR [rcx+0x0],ah
 1005954:	(bad)  
 1005955:	add    BYTE PTR [rax+rax*1+0x65],ch
 1005959:	add    BYTE PTR [rax],ah
 100595b:	add    BYTE PTR [rdx],ch
 100595d:	add    BYTE PTR [rdx],ch
 100595f:	add    BYTE PTR [rdx],ch
 1005961:	add    BYTE PTR [rax],al
 1005963:	add    BYTE PTR [rax],al
 1005965:	add    BYTE PTR [rax],al
 1005967:	add    BYTE PTR [rdx],ch
 1005969:	sub    ch,BYTE PTR [rdx]
 100596b:	and    BYTE PTR [rsi+0x6f],ch
 100596e:	je     0x1005990
 1005970:	(bad)  
 1005971:	jbe    0x10059d4
 1005973:	imul   ebp,DWORD PTR [rcx+riz*2+0x62],0x2a20656c
 100597b:	sub    ch,BYTE PTR [rdx]
 100597d:	add    BYTE PTR [rax],al
 100597f:	add    BYTE PTR [rsi+0x0],ah
 1005982:	imul   eax,DWORD PTR [rax],0x65006c
 1005988:	outs   dx,BYTE PTR ds:[rsi]
 1005989:	add    BYTE PTR [rcx+0x0],ah
 100598c:	ins    DWORD PTR es:[rdi],dx
 100598d:	add    BYTE PTR [rbp+0x0],ah
	...
 1005998:	ins    DWORD PTR es:[rdi],dx
 1005999:	add    BYTE PTR [rcx+0x0],ah
 100599c:	js     0x100599e
 100599e:	pop    rdi
 100599f:	add    BYTE PTR [rsi+0x0],ah
 10059a2:	imul   eax,DWORD PTR [rax],0x65006c
 10059a8:	pop    rdi
 10059a9:	add    BYTE PTR [rbx+0x0],dh
 10059ac:	imul   eax,DWORD PTR [rax],0x65007a
 10059b2:	add    BYTE PTR [rax],al
 10059b4:	add    BYTE PTR [rax],al
 10059b6:	add    BYTE PTR [rax],al
 10059b8:	ins    DWORD PTR es:[rdi],dx
 10059b9:	add    BYTE PTR [rcx+0x0],ah
 10059bc:	js     0x10059be
 10059be:	pop    rdi
 10059bf:	add    BYTE PTR [rdx+0x0],dh
 10059c2:	outs   dx,DWORD PTR ds:[rsi]
 10059c3:	add    BYTE PTR [rax+rax*1+0x6c],ch
 10059c7:	add    BYTE PTR [rdi+0x0],ch
 10059ca:	jbe    0x10059cc
 10059cc:	add    BYTE PTR gs:[rdx+0x0],dh
 10059d0:	pop    rdi
 10059d1:	add    BYTE PTR [rsi+0x0],ah
 10059d4:	imul   eax,DWORD PTR [rax],0x65006c
 10059da:	jae    0x10059dc
 10059dc:	add    BYTE PTR [rax],al
 10059de:	add    BYTE PTR [rax],al
 10059e0:	ins    DWORD PTR es:[rdi],dx
 10059e1:	add    BYTE PTR [rcx+0x0],ah
 10059e4:	js     0x10059e6
 10059e6:	pop    rdi
 10059e7:	add    BYTE PTR [rsi+0x0],ah
 10059ea:	imul   eax,DWORD PTR [rax],0x65006c
 10059f0:	jae    0x10059f2
 10059f2:	add    BYTE PTR [rax],al
 10059f4:	add    BYTE PTR [rax],al
 10059f6:	add    BYTE PTR [rax],al
 10059f8:	imul   eax,DWORD PTR [rax],0x63006e
 10059fe:	jb     0x1005a00
 1005a00:	add    BYTE PTR gs:[rbp+0x0],ch
 1005a04:	add    BYTE PTR gs:[rsi+0x0],ch
 1005a08:	je     0x1005a0a
 1005a0a:	add    BYTE PTR [rax],al
 1005a0c:	add    BYTE PTR [rax],al
 1005a0e:	add    BYTE PTR [rax],al
 1005a10:	ins    DWORD PTR es:[rdi],dx
 1005a11:	add    BYTE PTR [rbp+0x0],ah
 1005a14:	je     0x1005a16
 1005a16:	(bad)  
 1005a17:	add    BYTE PTR [rax+rax*1+0x61],ah
 1005a1b:	add    BYTE PTR [rax+rax*1+0x61],dh
 1005a1f:	add    BYTE PTR [rsi+0x0],ah
 1005a22:	imul   eax,DWORD PTR [rax],0x65006c
	...
 1005a30:	jae    0x1005a32
 1005a32:	outs   dx,DWORD PTR ds:[rsi]
 1005a33:	add    BYTE PTR [rdx+0x0],dh
 1005a36:	je     0x1005a38
 1005a38:	pop    rdi
 1005a39:	add    BYTE PTR [rdi+0x0],ch
 1005a3c:	jo     0x1005a3e
 1005a3e:	je     0x1005a40
 1005a40:	imul   eax,DWORD PTR [rax],0x6e006f
 1005a46:	jae    0x1005a48
	...
 1005a50:	(bad)  
 1005a51:	add    BYTE PTR [rbp+0x0],dh
 1005a54:	data16 add BYTE PTR [rsi+0x0],ah
 1005a58:	add    BYTE PTR gs:[rdx+0x0],dh
 1005a5c:	pop    rdi
 1005a5d:	add    BYTE PTR [rbx+0x0],dh
 1005a60:	imul   eax,DWORD PTR [rax],0x65007a
 1005a66:	add    BYTE PTR [rax],al
 1005a68:	(bad)  
 1005a69:	add    BYTE PTR [rbp+0x0],dh
 1005a6c:	data16 add BYTE PTR [rsi+0x0],ah
 1005a70:	add    BYTE PTR gs:[rdx+0x0],dh
 1005a74:	pop    rdi
 1005a75:	add    BYTE PTR [rax+rax*1+0x69],dh
 1005a79:	add    BYTE PTR [rbp+0x0],ch
 1005a7c:	add    BYTE PTR gs:[rdi+0x0],ch
 1005a80:	jne    0x1005a82
 1005a82:	je     0x1005a84
 1005a84:	add    BYTE PTR [rax],al
 1005a86:	add    BYTE PTR [rax],al
 1005a88:	ins    BYTE PTR es:[rdi],dx
 1005a89:	add    BYTE PTR [rcx+0x0],ch
 1005a8c:	jbe    0x1005a8e
 1005a8e:	add    BYTE PTR gs:[rdi+0x0],bl
 1005a92:	ja     0x1005a94
 1005a94:	jb     0x1005a96
 1005a96:	imul   eax,DWORD PTR [rax],0x650074
 1005a9c:	jb     0x1005a9e
 1005a9e:	pop    rdi
 1005a9f:	add    BYTE PTR [rax+0x0],dh
 1005aa2:	je     0x1005aa4
 1005aa4:	jb     0x1005aa6
 1005aa6:	add    BYTE PTR [rax],al
 1005aa8:	add    BYTE PTR [rax],al
 1005aaa:	add    BYTE PTR [rax+0x0],ah
 1005aad:	add    BYTE PTR [rax],al
 1005aaf:	add    BYTE PTR [rax+0x5b],dl
 1005ab2:	add    BYTE PTR [rcx],al
 1005ab4:	add    BYTE PTR [rax],al
 1005ab6:	add    BYTE PTR [rax],al
 1005ab8:	rcr    BYTE PTR [rbx+0x0],0x1
 1005abc:	add    BYTE PTR [rax],al
 1005abe:	add    BYTE PTR [rax],al
 1005ac0:	add    BYTE PTR [rax],al
 1005ac2:	add    BYTE PTR [rax+0x0],ah
 1005ac5:	add    al,0x0
 1005ac7:	(bad)  
 1005ac8:	add    BYTE PTR [rax],cl
 1005aca:	add    BYTE PTR [rax+0x0],ah
 1005acd:	or     al,0x0
 1005acf:	(bad)  
 1005ad0:	add    BYTE PTR [rax],dl
 1005ad2:	add    BYTE PTR [rax+0x0],ah
 1005ad5:	adc    al,0x0
 1005ad7:	(bad)  
 1005ad8:	add    BYTE PTR [rax],bl
 1005ada:	add    BYTE PTR [rax+0x0],ah
 1005add:	sbb    al,0x0
 1005adf:	(bad)  
 1005ae0:	add    BYTE PTR [rax],ah
 1005ae2:	add    BYTE PTR [rax+0x0],ah
 1005ae5:	and    al,0x0
 1005ae7:	(bad)  
 1005ae8:	add    BYTE PTR [rax],ch
 1005aea:	add    BYTE PTR [rax+0x0],ah
 1005aed:	sub    al,0x0
 1005aef:	(bad)  
 1005af0:	add    BYTE PTR [rax],dh
 1005af2:	add    BYTE PTR [rax+0x0],ah
 1005af5:	xor    al,0x0
 1005af7:	(bad)  
 1005af8:	add    BYTE PTR [rax],bh
 1005afa:	add    BYTE PTR [rax+0x0],ah
 1005afd:	cmp    al,0x0
 1005aff:	(bad)  
 1005b00:	add    BYTE PTR [rax+0x0],al
 1005b03:	(bad)  
 1005b04:	add    BYTE PTR [rax+rax*1+0x60],al
 1005b08:	add    BYTE PTR [rax+0x0],cl
 1005b0b:	(bad)  
 1005b0c:	add    BYTE PTR [rax+rax*1+0x60],cl
 1005b10:	add    BYTE PTR [rax+0x0],dl
 1005b13:	(bad)  
 1005b14:	add    BYTE PTR [rax+rax*1+0x60],dl
 1005b18:	add    BYTE PTR [rax+0x0],bl
 1005b1b:	(bad)  
 1005b1c:	add    BYTE PTR [rax+rax*1+0x60],bl
 1005b20:	add    BYTE PTR [rax+0x0],ah
 1005b23:	(bad)  
 1005b24:	add    BYTE PTR [rax+rax*1+0x60],ah
 1005b28:	add    BYTE PTR [rax+0x0],ch
 1005b2b:	(bad)  
 1005b2c:	add    BYTE PTR [rax+rax*1+0x60],ch
 1005b30:	je     0x1005b32
 1005b32:	jb     0x1005b34
 1005b34:	jne    0x1005b36
 1005b36:	outs   dx,BYTE PTR ds:[rsi]
 1005b37:	add    BYTE PTR [rbx+0x0],ah
 1005b3a:	(bad)  
 1005b3b:	add    BYTE PTR [rax+rax*1+0x65],dh
 1005b3f:	add    BYTE PTR [rax+rax*1+0x0],ah
	...
 1005b4f:	add    BYTE PTR [rip+0x38003000],ah        # 0x39008b55
 1005b55:	add    BYTE PTR [rax+0x0],bl
 1005b58:	sub    eax,0x30002500
 1005b5d:	add    BYTE PTR [rax+rax*1],dh
 1005b60:	pop    rax
 1005b61:	add    BYTE PTR [rip+0x30002500],ch        # 0x31008067
 1005b67:	add    BYTE PTR [rax+rax*1],dh
 1005b6a:	pop    rax
 1005b6b:	add    BYTE PTR [rip+0x30002500],ch        # 0x31008071
 1005b71:	add    BYTE PTR [rdx],dh
 1005b73:	add    BYTE PTR [rax+0x0],bl
 1005b76:	and    eax,0x32003000
 1005b7b:	add    BYTE PTR [rax+0x0],bl
 1005b7e:	sub    eax,0x30002500
 1005b83:	add    BYTE PTR [rdx],dh
 1005b85:	add    BYTE PTR [rax+0x0],bl
 1005b88:	and    eax,0x32003000
 1005b8d:	add    BYTE PTR [rax+0x0],bl
 1005b90:	and    eax,0x32003000
 1005b95:	add    BYTE PTR [rax+0x0],bl
 1005b98:	and    eax,0x32003000
 1005b9d:	add    BYTE PTR [rax+0x0],bl
 1005ba0:	and    eax,0x32003000
 1005ba5:	add    BYTE PTR [rax+0x0],bl
 1005ba8:	and    eax,0x32003000
 1005bad:	add    BYTE PTR [rax+0x0],bl
	...
 1005bc0:	and    eax,0x34003000
 1005bc5:	add    BYTE PTR [rax+0x0],ch
 1005bc8:	add    BYTE PTR fs:[rip+0x30002500],ch        # 0x310080cf
 1005bcf:	add    BYTE PTR [rdx],dh
 1005bd1:	add    BYTE PTR [rax+0x0],ch
 1005bd4:	add    BYTE PTR fs:[rip+0x30002500],ch        # 0x310080db
 1005bdb:	add    BYTE PTR [rdx],dh
 1005bdd:	add    BYTE PTR [rax+0x0],ch
 1005be0:	add    BYTE PTR fs:[rax+rax*1+0x25],dl
 1005be5:	add    BYTE PTR [rax],dh
 1005be7:	add    BYTE PTR [rdx],dh
 1005be9:	add    BYTE PTR [rax+0x0],ch
 1005bec:	add    BYTE PTR fs:[rdx],bh
 1005bef:	add    BYTE PTR [rip+0x32003000],ah        # 0x33008bf5
 1005bf5:	add    BYTE PTR [rax+0x0],ch
 1005bf8:	add    BYTE PTR fs:[rdx],bh
 1005bfb:	add    BYTE PTR [rip+0x32003000],ah        # 0x33008c01
 1005c01:	add    BYTE PTR [rax+0x0],ch
 1005c04:	add    BYTE PTR fs:[rsi],ch
 1005c07:	add    BYTE PTR [rip+0x33003000],ah        # 0x34008c0d
 1005c0d:	add    BYTE PTR [rax+0x0],ch
 1005c10:	add    BYTE PTR fs:[rdx+0x0],bl
	...
 1005c24:	xchg   esi,eax
 1005c25:	xor    BYTE PTR [rdi],al
 1005c27:	ja     0x1005c55
 1005c29:	(bad)  
 1005c2a:	(bad)  
 1005c2b:	out    dx,al
 1005c2c:	mov    edx,0x19990951
 1005c31:	(bad)  
 1005c32:	ins    DWORD PTR es:[rdi],dx
 1005c33:	(bad)  
 1005c34:	(bad)  
 1005c35:	hlt    
 1005c36:	push   0x70
 1005c38:	xor    eax,0xa3e963a5
 1005c3d:	xchg   ebp,eax
 1005c3e:	fs sahf 
 1005c40:	xor    cl,BYTE PTR [rax-0x475bf125]
 1005c46:	fdivr  QWORD PTR [rcx+0x1e]
 1005c49:	jmp    0xffffffffda893d23
 1005c4e:	rcl    BYTE PTR [rdi+0x9b64c2b],cl
 1005c54:	mov    ebp,0x77eb17c
 1005c59:	sub    eax,0x1d91e7b8
 1005c5e:	mov    edi,0xb7106490
 1005c63:	sbb    eax,0x6ab020f2
 1005c68:	rex.W jno 0x1005c24
 1005c6b:	repz fiadd WORD PTR [rcx-0x42]
 1005c6f:	test   BYTE PTR [rbp-0x2c],bh
 1005c72:	ficomp DWORD PTR [rdx]
 1005c74:	jmp    0x1005c5a
 1005c76:	(bad)  [rbp+0x51]
 1005c79:	mov    ch,0xd4
 1005c7b:	hlt    
 1005c7c:	mov    DWORD PTR [rbp-0x67a97c2d],0xa8c0136c
 1005c86:	imul   esp,DWORD PTR [rdx+rdi*2-0x7],0x62
 1005c8b:	std    
 1005c8c:	in     al,dx
 1005c8d:	leave  
 1005c8e:	mov    cl,BYTE PTR gs:[rdi+0x5c]
 1005c92:	add    DWORD PTR [rcx+rbx*8],edx
 1005c95:	ins    BYTE PTR es:[rdi],dx
 1005c96:	(bad)  
 1005c97:	movsxd esp,DWORD PTR [rbx+0x3d]
 1005c9a:	psubd  mm6,mm5
 1005c9d:	or     eax,0x20c88d08
 1005ca2:	outs   dx,BYTE PTR ds:[rsi]
 1005ca3:	cmp    ebx,DWORD PTR [rsi+0x10]
 1005ca6:	imul   ecx,DWORD PTR [rsp+riz*8+0x41],0x7172d560
 1005cae:	addr32 mov ds:0x3c03e4d1,al
 1005cb4:	rex.RXB (bad) 
 1005cb6:	add    al,0x4b
 1005cb8:	std    
 1005cb9:	test   DWORD PTR [rip+0xab56bd2],ecx        # 0xbb5c891
 1005cbf:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1005cc0:	cli    
 1005cc1:	test   al,0xb5
 1005cc3:	xor    eax,0x42b2986c
 1005cc8:	(bad)  
 1005cc9:	leave  
 1005cca:	mov    ebx,0xbcf940db
 1005ccf:	lods   al,BYTE PTR ds:[rsi]
 1005cd0:	jrcxz  0x1005d3e
 1005cd2:	fdiv   DWORD PTR [rdx]
 1005cd4:	jne    0x1005d32
 1005cd6:	fild   WORD PTR [rbp-0x31]
 1005cd9:	or     eax,0x3d59dcd6
 1005cde:	shr    DWORD PTR [rbx+0x26d930ac],1
 1005ce4:	cmp    al,BYTE PTR [rax]
 1005ce6:	ficom  WORD PTR [rcx-0x80]
 1005ce9:	push   rcx
 1005cea:	xlat   BYTE PTR ds:[rbx]
 1005ceb:	enter  0x6116,0xd0
 1005cef:	mov    edi,0x21b4f4b5
 1005cf4:	and    eax,esp
 1005cf6:	mov    bl,0x56
 1005cf8:	cdq    
 1005cf9:	xchg   ebp,eax
 1005cfa:	mov    edx,0xbda50fcf
 1005cff:	mov    eax,0x2802b89e
 1005d04:	or     BYTE PTR [rax-0x264da0fb],cl
 1005d0a:	or     al,0xc6
 1005d0c:	and    al,0xe9
 1005d0e:	or     esi,DWORD PTR [rcx+0x2f6f7c87]
 1005d14:	adc    DWORD PTR [rax+rbp*2+0x58],ecx
 1005d18:	stos   DWORD PTR es:[rdi],eax
 1005d19:	sbb    eax,0x2d3dc161
 1005d1e:	data16 mov dh,0x90
 1005d21:	fdiv   QWORD PTR [r14+0x6]
 1005d25:	jno    0x1005d02
 1005d27:	add    DWORD PTR [rax+riz*1+0x102a98d2],edi
 1005d2e:	(bad)  
 1005d2f:	out    dx,eax
 1005d30:	mov    DWORD PTR [rbp-0x4ae08e4f],eax
 1005d36:	mov    dh,0x6
 1005d38:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1005d39:	in     al,0xbf
 1005d3b:	lahf   
 1005d3c:	xor    edx,esp
 1005d3e:	mov    eax,0x7c9a2e8
 1005d43:	js     0x1005d79
 1005d45:	stc    
 1005d46:	add    BYTE PTR [rdi],cl
 1005d48:	mov    gs,WORD PTR [rax-0x67e769f7]
 1005d4e:	(bad)  
 1005d4f:	loope  0x1005d0c
 1005d51:	or     eax,0x3d2d7f6a
 1005d56:	ins    DWORD PTR es:[rdi],dx
 1005d57:	or     BYTE PTR [rdi+0x191646c],dl
 1005d5d:	pop    rsp
 1005d5e:	movsxd esp,esi
 1005d60:	hlt    
 1005d61:	push   rcx
 1005d62:	imul   ebp,DWORD PTR [rbx+0x62],0x61
 1005d66:	ins    BYTE PTR es:[rdi],dx
 1005d67:	sbb    al,0xd8
 1005d69:	xor    BYTE PTR [rbp-0x7b],ah
 1005d6c:	rex.WRX add BYTE PTR [rdx-0xe],r12b
 1005d70:	in     eax,dx
 1005d71:	xchg   ebp,eax
 1005d72:	(bad)  
 1005d73:	ins    BYTE PTR es:[rdi],dx
 1005d74:	jnp    0x1005d1b
 1005d76:	add    DWORD PTR [rbx],ebx
 1005d78:	shl    esp,0x8
 1005d7b:	(bad)  
 1005d7c:	push   rdi
 1005d7d:	(bad)  
 1005d7e:	pmaddwd mm0,mm6
 1005d81:	fnstenv [rax-0x4816af9b]
 1005d87:	adc    ch,dl
 1005d89:	mov    eax,0x887c8bbe
 1005d8e:	mov    ecx,0xdd1ddffc
 1005d93:	(bad)  
 1005d94:	rex.WB sub rax,0x7cf315da
 1005d9a:	ror    DWORD PTR [rbp+riz*2+0x58fbd44c],cl
 1005da1:	(bad)  
 1005da2:	mov    dl,0x4d
 1005da4:	(bad)  
 1005da5:	push   rcx
 1005da6:	mov    ch,0x3a
 1005da8:	je     0x1005daa
 1005daa:	mov    esp,0xbb30e2a3
 1005daf:	(bad)  
 1005db0:	rex.B movs DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1005db2:	fisttp WORD PTR [rdx-0x29]
 1005db5:	xchg   ebp,eax
 1005db6:	fdivr  DWORD PTR [rip+0xffffffffa4d1c46d]        # 0xffffffffa5d22229
 1005dbc:	sti    
 1005dbd:	hlt    
 1005dbe:	(bad)  
 1005dbf:	shr    DWORD PTR [rdx-0x17],cl
 1005dc2:	imul   eax,DWORD PTR [rbx-0x4],0x46346ed9
 1005dc9:	mov    BYTE PTR [rdi-0x53],ah
 1005dcc:	sar    BYTE PTR [rax+0x2d73da60],1
 1005dd2:	add    al,0x44
 1005dd4:	in     eax,0x1d
 1005dd6:	add    esi,DWORD PTR [rbx]
 1005dd8:	pop    rdi
 1005dd9:	rex.WR or r13b,BYTE PTR [rdx-0x22f28337]
 1005de0:	cmp    al,0x71
 1005de2:	add    eax,0x241aa50
 1005de7:	(bad)  
 1005de8:	adc    BYTE PTR [rax],dl
 1005dea:	or     edi,DWORD PTR [rsi-0x36f3df7a]
 1005df0:	and    eax,0xb35768b5
 1005df5:	test   DWORD PTR [rdi+0x20],ebp
 1005df8:	or     esp,edx
 1005dfa:	mov    cx,0xe49f
 1005dfe:	(bad)  
 1005dff:	(bad)  
 1005e00:	(bad)  
 1005e01:	stc    
 1005e02:	ficomp WORD PTR [rsi-0x68]
 1005e05:	leave  
 1005e06:	fldcw  WORD PTR [rcx]
 1005e08:	and    bl,BYTE PTR [rax-0x574b4f30]
 1005e0e:	xlat   BYTE PTR ds:[rbx]
 1005e0f:	(bad)  
 1005e10:	(bad)  
 1005e11:	cmp    eax,0xd8159b3
 1005e16:	mov    ah,0x2e
 1005e18:	cmp    ebx,DWORD PTR [rbp+rdi*4-0x49]
 1005e1c:	lods   eax,DWORD PTR ds:[rsi]
 1005e1d:	ins    BYTE PTR es:[rdi],dx
 1005e1e:	mov    edx,0xb88320c0
 1005e23:	in     eax,dx
 1005e24:	mov    dh,0xb3
 1005e26:	mov    edi,0xb6e20c9a
 1005e2b:	add    ebx,DWORD PTR [rdx+0x3974b1d2]
 1005e31:	rex.RXB (bad) 
 1005e33:	(bad)  
 1005e34:	scas   eax,DWORD PTR es:[rdi]
 1005e35:	ja     0x1005e09
 1005e37:	popf   
 1005e38:	adc    eax,0x8304db26
 1005e3d:	(bad)  
 1005e3e:	fdiv   QWORD PTR [rbx+0x12]
 1005e41:	or     esp,DWORD PTR [rbx-0x1d]
 1005e44:	test   BYTE PTR [rbx],bh
 1005e46:	fs xchg esp,eax
 1005e48:	ds push 0x6d
 1005e4b:	or     eax,0x7a6a5aa8
 1005e50:	or     ecx,edi
 1005e52:	(bad)  
 1005e53:	in     al,0x9d
 1005e55:	dec    DWORD PTR [rcx]
 1005e57:	xchg   ebx,eax
 1005e58:	(bad)  
 1005e59:	scas   al,BYTE PTR es:[rdi]
 1005e5a:	add    BYTE PTR [rdx],cl
 1005e5c:	mov    cl,0x9e
 1005e5e:	(bad)  
 1005e5f:	jge    0x1005ea5
 1005e61:	xchg   ebx,eax
 1005e62:	(bad)  
 1005e64:	shl    BYTE PTR [rbx-0xd9778f8],cl
 1005e6a:	add    DWORD PTR [rsi],ebx
 1005e6c:	inc    dl
 1005e6e:	(bad)  
 1005e6f:	imul   ebx,DWORD PTR [rbp+0x57],0x67cbf762
 1005e76:	xor    BYTE PTR gs:[rcx+0x36],0x6c
 1005e7b:	sbb    edi,esp
 1005e7d:	(bad)  
 1005e7e:	imul   ebp,DWORD PTR [rsi+0x76],0x1b
 1005e82:	(bad)  
 1005e83:	(bad)  
 1005e84:	loopne 0x1005eb1
 1005e86:	ror    DWORD PTR [rcx+0x10da7a5a],cl
 1005e8c:	int3   
 1005e8d:	rex.WX frstor [rdi+0x6f]
 1005e91:	fistp  QWORD PTR [rcx-0x41100607]
 1005e97:	mov    es,WORD PTR [rbx-0x42]
 1005e9a:	mov    bh,0x17
 1005e9c:	(bad)  
 1005e9d:	mov    ?,WORD PTR [rax-0x295c17a0]
 1005ea3:	(bad)  
 1005ea4:	jle    0x1005e39
 1005ea6:	shl    DWORD PTR [rcx+0x38d8c2c4],1
 1005eac:	push   rdx
 1005ead:	repnz fisttp WORD PTR [rdi-0xf]
 1005eb1:	addr32 mov ebx,0xbc5767d1
 1005eb7:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1005eb8:	fld    QWORD PTR [rsi]
 1005eba:	mov    ch,0x3f
 1005ebc:	rex.WXB
 1005ebd:	ss mov dl,0x48
 1005ec0:	fisubr DWORD PTR [rbx]
 1005ec2:	or     eax,0xa1b4cd8
 1005ec7:	scas   eax,DWORD PTR es:[rdi]
 1005ec8:	test   BYTE PTR [rdx+0x3],0x36
 1005ecc:	(bad)  
 1005ecd:	jp     0x1005ed3
 1005ecf:	rex.B ret 
 1005ed1:	out    dx,eax
 1005ed2:	(bad)  
 1005ed3:	fist   WORD PTR [rbp-0x21]
 1005ed6:	addr32 test al,0xef
 1005ed9:	mov    gs,WORD PTR [rsi+0x31]
 1005edc:	jns    0x1005e9c
 1005ede:	imul   eax,DWORD PTR [rsi-0x74],0x1acb61b3
 1005ee5:	and    DWORD PTR [rsi-0x44],0xffffffa0
 1005ee9:	shr    BYTE PTR [rdi+0x25],cl
 1005eec:	ss loop 0x1005f57
 1005eef:	push   rdx
 1005ef0:	xchg   ebp,eax
 1005ef1:	ja     0x1005eff
 1005ef3:	int3   
 1005ef4:	add    eax,DWORD PTR [rdi+0xb]
 1005ef7:	mov    ebx,0x220216b9
 1005efc:	(bad)  
 1005efd:	es add eax,0xba3bbe55
 1005f03:	(bad)
 1005f06:	mov    ebp,0xb45a92b2
 1005f0b:	sub    eax,DWORD PTR [rdx+rbp*2]
 1005f0e:	mov    bl,0x5c
 1005f10:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1005f11:	call   rdi
 1005f13:	ret    0xcf31
 1005f16:	shl    BYTE PTR [rbp+0x2cd99e8b],1
 1005f1c:	sbb    eax,0xb05bdeae
 1005f21:	ret    0x9b64
 1005f24:	es repnz movsxd ebp,esp
 1005f28:	pushf  
 1005f29:	movabs ds:0x6a9026d930a756a,eax
 1005f32:	or     DWORD PTR [rdi+rdi*1-0x7a14f1ca],ebx
 1005f39:	addr32 (bad) 
 1005f3b:	jb     0x1005f50
 1005f3d:	push   rdi
 1005f3e:	add    BYTE PTR [rip+0xffffffff95bf4a82],al        # 0xffffffff96bfa9c6
 1005f44:	adc    al,0x7a
 1005f46:	mov    eax,0xb12baee2
 1005f4b:	jnp    0x1005f85
 1005f4d:	sbb    esi,DWORD PTR [rsi-0x2d7164f4]
 1005f53:	xchg   edx,eax
 1005f54:	or     eax,0xb7e5d5be
 1005f59:	out    dx,eax
 1005f5a:	fdivr  QWORD PTR [rcx+riz*1-0x21]
 1005f5e:	fisttp DWORD PTR [rbx]
 1005f60:	(bad)  
 1005f61:	rcl    bl,cl
 1005f63:	xchg   BYTE PTR [rdx-0x1e],al
 1005f66:	(bad)  
 1005f67:	icebp  
 1005f68:	clc    
 1005f69:	mov    bl,0xdd
 1005f6b:	push   0x1fda836e
 1005f70:	int    0x16
 1005f72:	mov    esi,0xb9265b81
 1005f77:	mul    cl
 1005f79:	ja     0x1005f2b
 1005f7b:	outs   dx,DWORD PTR ds:[rsi]
 1005f7c:	ja     0x1005fc5
 1005f7e:	mov    bh,0x18
 1005f80:	out    0x5a,al
 1005f82:	or     BYTE PTR [rax-0xf09590],cl
 1005f88:	retf   0x63b
 1005f8b:	pop    sp
 1005f8d:	or     eax,DWORD PTR [rcx]
 1005f8f:	adc    edi,edi
 1005f91:	sahf   
 1005f92:	(bad)
 1005f97:	clc    
 1005f98:	sar    edi,cl
 1005f9a:	imul   esp,DWORD PTR [rcx+0x45],0xffffffcf
 1005f9e:	ins    BYTE PTR es:[rdi],dx
 1005f9f:	(bad)  
 1005fa0:	js     0x1005f84
 1005fa2:	or     ah,BYTE PTR [rax-0x28f22d12]
 1005fa8:	push   rsp
 1005fa9:	add    DWORD PTR [rsi+rcx*2],0xffffffc2
 1005fad:	mov    bl,0x3
 1005faf:	cmp    DWORD PTR [rcx+0x26],esp
 1005fb2:	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
 1005fb4:	not    DWORD PTR [rsi]
 1005fb6:	(bad)  
 1005fb7:	ror    BYTE PTR [rbp+0x47],1
 1005fba:	imul   ecx,DWORD PTR [rcx-0x25],0x4a3e6e77
 1005fc1:	push   0xffffffffffffffd1
 1005fc3:	scas   al,BYTE PTR es:[rdi]
 1005fc4:	fcomp  QWORD PTR [rdx-0x2a]
 1005fc7:	fldenv [rsi+0xb]
 1005fca:	fild   WORD PTR [rax-0x10]
 1005fcd:	cmp    ebx,eax
 1005fcf:	(bad)  
 1005fd0:	push   rbx
 1005fd1:	scas   al,BYTE PTR es:[rdi]
 1005fd2:	mov    esp,0xbb9ec5a9
 1005fd7:	fidivr WORD PTR [rdi-0x31]
 1005fda:	mov    dl,0x47
 1005fdc:	jmp    0x1d3115e0
 1005fe1:	repnz mov ebp,0xbac28abd
 1005fe7:	retf   0x9330
 1005fea:	mov    bl,0x53
 1005fec:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1005fed:	movabs ds:0x693bad0360524b4,eax
 1005ff6:	xlat   BYTE PTR ds:[rbx]
 1005ff7:	int    0x29
 1005ff9:	push   rdi
 1005ffa:	ficom  WORD PTR [rdi+rdi*4+0x67]
 1005ffe:	fldenv [rbx]
 1006000:	cs jp  0x1006069
 1006003:	mov    bl,0xb8
 1006005:	rex.WX (bad) 
 1006007:	(bad)
 100600b:	pop    rbp
 100600c:	xchg   esp,eax
 100600d:	sub    ebp,DWORD PTR [rdi+0x2a]
 1006010:	(bad)  
 1006011:	mov    esi,0x8ea1b40b
 1006016:	or     al,0xc3
 1006018:	sbb    ebx,edi
 100601a:	add    eax,0x2ef8d5a
 100601f:	sub    eax,0x2933bf91
 1006024:	ss jnp 0x1005ff9
 1006027:	adc    DWORD PTR [rdx+0x4fc0000e],esi
 100602d:	cwde   
 100602e:	ds (bad) 
 1006030:	adc    BYTE PTR [rax+0x1],bh
 1006033:	add    DWORD PTR [rax],eax
 1006035:	add    BYTE PTR [rax],al
 1006037:	add    BYTE PTR [rbx],bh
 1006039:	add    BYTE PTR [rax],al
 100603b:	add    BYTE PTR [rax],al
 100603d:	add    BYTE PTR [rax],al
 100603f:	add    BYTE PTR [rax+0x0],dl
 1006042:	(bad)  
 1006043:	add    BYTE PTR [rax+rax*1+0x68],dh
	...
 100604f:	add    BYTE PTR [rdi+0x65],al
 1006052:	je     0x1006098
 1006054:	ins    BYTE PTR es:[rdi],dx
 1006055:	ins    BYTE PTR es:[rdi],dx
 1006056:	imul   r14d,DWORD PTR [rdx+0x65],0x726f7463
 100605e:	jns    0x10060b7
	...
 1006068:	push   rbx
 1006069:	gs je  0x10060b0
 100606c:	ins    BYTE PTR es:[rdi],dx
 100606d:	ins    BYTE PTR es:[rdi],dx
 100606e:	imul   r14d,DWORD PTR [rdx+0x65],0x726f7463
 1006076:	jns    0x10060cf
	...
 1006080:	imul   eax,DWORD PTR [rax],0x65
 1006083:	add    BYTE PTR [rdx+0x0],dh
 1006086:	outs   dx,BYTE PTR ds:[rsi]
 1006087:	add    BYTE PTR [rbp+0x0],ah
 100608a:	ins    BYTE PTR es:[rdi],dx
 100608b:	add    BYTE PTR [rbx],dh
 100608d:	add    BYTE PTR [rdx],dh
 100608f:	add    BYTE PTR [rsi],ch
 1006091:	add    BYTE PTR [rax+rax*1+0x6c],ah
 1006095:	add    BYTE PTR [rax+rax*1+0x0],ch
 1006099:	add    BYTE PTR [rax],al
 100609b:	add    BYTE PTR [rax],al
 100609d:	add    BYTE PTR [rax],al
 100609f:	add    BYTE PTR [rbx+0x0],dl
 10060a2:	outs   dx,DWORD PTR ds:[rsi]
 10060a3:	add    BYTE PTR [rsi+0x0],ah
 10060a6:	je     0x10060a8
 10060a8:	ja     0x10060aa
 10060aa:	(bad)  
 10060ab:	add    BYTE PTR [rdx+0x0],dh
 10060ae:	add    BYTE PTR gs:[rax+rax*1+0x4d],bl
 10060b3:	add    BYTE PTR [rcx+0x0],ch
 10060b6:	movsxd eax,DWORD PTR [rax]
 10060b8:	jb     0x10060ba
 10060ba:	outs   dx,DWORD PTR ds:[rsi]
 10060bb:	add    BYTE PTR [rbx+0x0],dh
 10060be:	outs   dx,DWORD PTR ds:[rsi]
 10060bf:	add    BYTE PTR [rsi+0x0],ah
 10060c2:	je     0x10060c4
 10060c4:	pop    rsp
 10060c5:	add    BYTE PTR [rbp+0x0],cl
 10060c8:	imul   eax,DWORD PTR [rax],0x720063
 10060ce:	outs   dx,DWORD PTR ds:[rsi]
 10060cf:	add    BYTE PTR [rbx+0x0],dh
 10060d2:	outs   dx,DWORD PTR ds:[rsi]
 10060d3:	add    BYTE PTR [rsi+0x0],ah
 10060d6:	je     0x10060d8
 10060d8:	and    BYTE PTR [rax],al
 10060da:	push   rbx
 10060db:	add    BYTE PTR [rcx+0x0],dl
 10060de:	rex.WR add BYTE PTR [rax],r12b
 10060e1:	add    BYTE PTR [rbx+0x0],dl
 10060e4:	add    BYTE PTR gs:[rdx+0x0],dh
 10060e8:	jbe    0x10060ea
 10060ea:	add    BYTE PTR gs:[rdx+0x0],dh
 10060ee:	pop    rsp
 10060ef:	add    BYTE PTR [rcx],dh
 10060f1:	add    BYTE PTR [rcx],dh
 10060f3:	add    BYTE PTR [rax],dh
 10060f5:	add    BYTE PTR [rax],al
 10060f7:	add    BYTE PTR [rip+0x64007e00],ah        # 0x6500defd
 10060fd:	add    BYTE PTR [rax+0x0],dh
 1006100:	and    eax,0xff000000
 1006105:	inc    DWORD PTR [rax]
 1006107:	add    BYTE PTR [rsi],ch
 1006109:	add    BYTE PTR [rbp+0x0],ah
 100610c:	js     0x100610e
 100610e:	je     0x1006110
	...
 1006118:	ins    DWORD PTR es:[rdi],dx
 1006119:	add    BYTE PTR [rbx+0x0],dh
 100611c:	ins    DWORD PTR es:[rdi],dx
 100611d:	add    BYTE PTR [rax+rax*1+0x73],ah
 1006121:	add    BYTE PTR [rdx+0x0],dh
 1006124:	jbe    0x1006126
 1006126:	add    BYTE PTR cs:[rbp+0x0],ah
 100612a:	js     0x100612c
 100612c:	add    BYTE PTR gs:[rax],al
 100612f:	add    BYTE PTR [rax+0x0],cl
 1006132:	rex.WXB add BYTE PTR [r13+0x0],al
 1006136:	pop    rcx
 1006137:	add    BYTE PTR [rdi+0x0],bl
 100613a:	rex.WR add BYTE PTR [rdi+0x0],r9b
 100613e:	rex.XB add BYTE PTR [r9+0x0],al
 1006142:	rex.WR add BYTE PTR [rdi+0x0],r11b
 1006146:	rex.WRB add BYTE PTR [r9+0x0],r8b
 100614a:	rex.XB add BYTE PTR [r8+0x0],cl
 100614e:	rex.WB add BYTE PTR [r14+0x0],cl
 1006152:	add    BYTE PTR [r8+rax*1+0x53],r11b
 1006157:	add    BYTE PTR [rdi+0x0],cl
 100615a:	add    BYTE PTR [rax+r8*1+0x57],r10b
 100615f:	add    BYTE PTR [rcx+0x0],al
 1006162:	push   rdx
 1006163:	add    BYTE PTR [rbp+0x0],al
 1006166:	pop    rsp
 1006167:	add    BYTE PTR [rbp+0x0],cl
 100616a:	imul   eax,DWORD PTR [rax],0x720063
 1006170:	outs   dx,DWORD PTR ds:[rsi]
 1006171:	add    BYTE PTR [rbx+0x0],dh
 1006174:	outs   dx,DWORD PTR ds:[rsi]
 1006175:	add    BYTE PTR [rsi+0x0],ah
 1006178:	je     0x100617a
 100617a:	pop    rsp
 100617b:	add    BYTE PTR [rbp+0x0],cl
 100617e:	imul   eax,DWORD PTR [rax],0x720063
 1006184:	outs   dx,DWORD PTR ds:[rsi]
 1006185:	add    BYTE PTR [rbx+0x0],dh
 1006188:	outs   dx,DWORD PTR ds:[rsi]
 1006189:	add    BYTE PTR [rsi+0x0],ah
 100618c:	je     0x100618e
 100618e:	and    BYTE PTR [rax],al
 1006190:	push   rbx
 1006191:	add    BYTE PTR [rcx+0x0],dl
 1006194:	rex.WR add BYTE PTR [rax],r12b
 1006197:	add    BYTE PTR [rbx+0x0],dl
 100619a:	add    BYTE PTR gs:[rdx+0x0],dh
 100619e:	jbe    0x10061a0
 10061a0:	add    BYTE PTR gs:[rdx+0x0],dh
 10061a4:	pop    rsp
 10061a5:	add    BYTE PTR [rcx+0x0],cl
 10061a8:	outs   dx,BYTE PTR ds:[rsi]
 10061a9:	add    BYTE PTR [rbx+0x0],dh
 10061ac:	je     0x10061ae
 10061ae:	(bad)  
 10061af:	add    BYTE PTR [rsi+0x0],ch
 10061b2:	movsxd eax,DWORD PTR [rax]
 10061b4:	add    BYTE PTR gs:[rax],ah
 10061b7:	add    BYTE PTR [rsi+0x0],cl
 10061ba:	(bad)  
 10061bb:	add    BYTE PTR [rbp+0x0],ch
 10061be:	add    BYTE PTR gs:[rbx+0x0],dh
 10061c2:	pop    rsp
 10061c3:	add    BYTE PTR [rbx+0x0],dl
 10061c6:	push   rcx
 10061c7:	add    BYTE PTR [rax+rax*1+0x0],cl
 10061cb:	add    BYTE PTR [rax],al
 10061cd:	add    BYTE PTR [rax],al
 10061cf:	add    BYTE PTR [rip+0x51005300],ah        # 0x5200b4d5
 10061d5:	add    BYTE PTR [rax+rax*1+0x53],cl
 10061d9:	add    BYTE PTR [rbp+0x0],al
 10061dc:	push   rdx
 10061dd:	add    BYTE PTR [rsi+0x0],dl
 10061e0:	push   rdx
 10061e1:	add    BYTE PTR [rdi+0x0],bl
 10061e4:	rex.WB add BYTE PTR [r14+0x0],cl
 10061e8:	push   rbx
 10061e9:	add    BYTE PTR [rax+rax*1+0x4e],dl
 10061ed:	add    BYTE PTR [rcx+0x0],al
 10061f0:	rex.WRB add BYTE PTR [r13+0x0],r8b
 10061f4:	and    eax,0x69000000
 10061f9:	add    BYTE PTR [rsi+0x0],ch
 10061fc:	imul   eax,DWORD PTR [rax],0x730000
 1006202:	jno    0x1006204
 1006204:	ins    BYTE PTR es:[rdi],dx
 1006205:	add    BYTE PTR [rbx+0x0],dh
 1006208:	add    BYTE PTR gs:[rdx+0x0],dh
 100620c:	jbe    0x100620e
 100620e:	jb     0x1006210
 1006210:	add    BYTE PTR cs:[rcx+0x0],ch
 1006214:	outs   dx,BYTE PTR ds:[rsi]
 1006215:	add    BYTE PTR [rcx+0x0],ch
	...
 1006220:	rex.W add BYTE PTR [rbx+0x0],cl
 1006224:	add    BYTE PTR [r9+0x0],r11b
 1006228:	pop    rdi
 1006229:	add    BYTE PTR [rbx+0x0],al
 100622c:	rex.WR add BYTE PTR [rcx+0x0],r8b
 1006230:	push   rbx
 1006231:	add    BYTE PTR [rbx+0x0],dl
 1006234:	add    BYTE PTR [r11+0x0],r10b
 1006238:	pop    rdi
 1006239:	add    BYTE PTR [rdx+0x0],dl
 100623c:	rex.WRXB add BYTE PTR [r15+0x0],r9b
 1006240:	push   rsp
 1006241:	add    BYTE PTR [rax],al
 1006243:	add    BYTE PTR [rax],al
 1006245:	add    BYTE PTR [rax],al
 1006247:	add    BYTE PTR [rax+0x0],cl
 100624a:	rex.WXB add BYTE PTR [r13+0x0],al
 100624e:	pop    rcx
 100624f:	add    BYTE PTR [rdi+0x0],bl
 1006252:	rex.XB add BYTE PTR [r13+0x0],dl
 1006256:	push   rdx
 1006257:	add    BYTE PTR [rdx+0x0],dl
 100625a:	add    BYTE PTR [r14+0x0],r9b
 100625e:	push   rsp
 100625f:	add    BYTE PTR [rdi+0x0],bl
 1006262:	push   rbp
 1006263:	add    BYTE PTR [rbx+0x0],dl
 1006266:	add    BYTE PTR [r10+0x0],r10b
 100626a:	add    BYTE PTR [rax],al
 100626c:	add    BYTE PTR [rax],al
 100626e:	add    BYTE PTR [rax],al
 1006270:	rex.W add BYTE PTR [rbx+0x0],cl
 1006274:	add    BYTE PTR [r9+0x0],r11b
 1006278:	pop    rdi
 1006279:	add    BYTE PTR [rax+rax*1+0x4f],cl
 100627d:	add    BYTE PTR [rbx+0x0],al
 1006280:	add    BYTE PTR [r8+rax*1+0x5f],cl
 1006285:	add    BYTE PTR [rbp+0x0],cl
 1006288:	add    BYTE PTR [r11+0x0],al
 100628c:	rex.W add BYTE PTR [rcx+0x0],cl
 1006290:	rex.WRX add BYTE PTR [rbp+0x0],r8b
 1006294:	add    BYTE PTR [rax],al
 1006296:	add    BYTE PTR [rax],al
 1006298:	rex.W add BYTE PTR [rbx+0x0],cl
 100629c:	add    BYTE PTR [r9+0x0],r11b
 10062a0:	pop    rdi
 10062a1:	add    BYTE PTR [rbp+0x0],dl
 10062a4:	push   rbx
 10062a5:	add    BYTE PTR [rbp+0x0],al
 10062a8:	push   rdx
 10062a9:	add    BYTE PTR [rbx+0x0],dl
 10062ac:	add    BYTE PTR [rax],al
 10062ae:	add    BYTE PTR [rax],al
 10062b0:	rex.W add BYTE PTR [rbx+0x0],cl
 10062b4:	add    BYTE PTR [r9+0x0],r11b
 10062b8:	pop    rdi
 10062b9:	add    BYTE PTR [rax+0x0],dl
 10062bc:	add    BYTE PTR [r10+0x0],r10b
 10062c0:	rex.RX add BYTE PTR [rdi+0x0],r9b
 10062c4:	push   rdx
 10062c5:	add    BYTE PTR [rbp+0x0],cl
 10062c8:	add    BYTE PTR [r14+0x0],cl
 10062cc:	rex.XB add BYTE PTR [r13+0x0],al
 10062d0:	pop    rdi
 10062d1:	add    BYTE PTR [rax+rax*1+0x41],al
 10062d5:	add    BYTE PTR [rax+rax*1+0x41],dl
 10062d9:	add    BYTE PTR [rax],al
 10062db:	add    BYTE PTR [rax],al
 10062dd:	add    BYTE PTR [rax],al
 10062df:	add    BYTE PTR [rax+0x0],cl
 10062e2:	rex.WXB add BYTE PTR [r13+0x0],al
 10062e6:	pop    rcx
 10062e7:	add    BYTE PTR [rdi+0x0],bl
 10062ea:	rex.XB add BYTE PTR [r13+0x0],dl
 10062ee:	push   rdx
 10062ef:	add    BYTE PTR [rdx+0x0],dl
 10062f2:	add    BYTE PTR [r14+0x0],r9b
 10062f6:	push   rsp
 10062f7:	add    BYTE PTR [rdi+0x0],bl
 10062fa:	rex.XB add BYTE PTR [r15+0x0],cl
 10062fe:	rex.WRX add BYTE PTR [rsi+0x0],r8b
 1006302:	rex.WB add BYTE PTR [r15+0x0],al
 1006306:	add    BYTE PTR [rax],al
 1006308:	rex.W add BYTE PTR [rbx+0x0],cl
 100630c:	add    BYTE PTR [r9+0x0],r11b
 1006310:	pop    rdi
 1006311:	add    BYTE PTR [rax+rax*1+0x59],al
 1006315:	add    BYTE PTR [rsi+0x0],cl
 1006318:	pop    rdi
 1006319:	add    BYTE PTR [rax+rax*1+0x41],al
 100631d:	add    BYTE PTR [rax+rax*1+0x41],dl
 1006321:	add    BYTE PTR [rax],al
 1006323:	add    BYTE PTR [rax+0x0],al
 1006326:	add    BYTE PTR [rax],al
 1006328:	add    BYTE PTR fs:[rdi+0x0],dh
 100632c:	outs   dx,DWORD PTR ds:[rsi]
 100632d:	add    BYTE PTR [rdx+0x0],dh
 1006330:	add    BYTE PTR fs:[rdx],bh
 1006333:	add    BYTE PTR [rip+0x38003000],ah        # 0x39009339
 1006339:	add    BYTE PTR [rax+0x0],bh
 100633c:	add    BYTE PTR [rax],al
 100633e:	add    BYTE PTR [rax],al
 1006340:	push   0x78006500
 1006345:	add    BYTE PTR [rdx],bh
	...
 100634f:	add    BYTE PTR [rax+0x0],ch
 1006352:	add    BYTE PTR gs:[rax+0x0],bh
 1006356:	sub    BYTE PTR [rax],al
	...
 1006360:	and    eax,0x29006400
 1006365:	add    BYTE PTR [rdx],bh
	...
 100636f:	add    BYTE PTR [rip+0x38003000],ah        # 0x39009375
 1006375:	add    BYTE PTR [rax+0x0],bh
	...
 1006380:	mov    eax,0x10072
 1006385:	add    BYTE PTR [rax],al
 1006387:	add    ah,dh
 1006389:	xchg   ebx,eax
 100638a:	add    DWORD PTR [rcx],eax
	...
 1006394:	xchg   esi,eax
 1006395:	xor    BYTE PTR [rdi],al
 1006397:	ja     0x10063c5
 1006399:	(bad)  
 100639a:	(bad)  
 100639b:	out    dx,al
 100639c:	mov    edx,0x19990951
 10063a1:	(bad)  
 10063a2:	ins    DWORD PTR es:[rdi],dx
 10063a3:	(bad)  
 10063a4:	(bad)  
 10063a5:	hlt    
 10063a6:	push   0x70
 10063a8:	xor    eax,0xa3e963a5
 10063ad:	xchg   ebp,eax
 10063ae:	fs sahf 
 10063b0:	xor    cl,BYTE PTR [rax-0x475bf125]
 10063b6:	fdivr  QWORD PTR [rcx+0x1e]
 10063b9:	jmp    0xffffffffda894493
 10063be:	rcl    BYTE PTR [rdi+0x9b64c2b],cl
 10063c4:	mov    ebp,0x77eb17c
 10063c9:	sub    eax,0x1d91e7b8
 10063ce:	mov    edi,0xb7106490
 10063d3:	sbb    eax,0x6ab020f2
 10063d8:	rex.W jno 0x1006394
 10063db:	repz fiadd WORD PTR [rcx-0x42]
 10063df:	test   BYTE PTR [rbp-0x2c],bh
 10063e2:	ficomp DWORD PTR [rdx]
 10063e4:	jmp    0x10063ca
 10063e6:	(bad)  [rbp+0x51]
 10063e9:	mov    ch,0xd4
 10063eb:	hlt    
 10063ec:	mov    DWORD PTR [rbp-0x67a97c2d],0xa8c0136c
 10063f6:	imul   esp,DWORD PTR [rdx+rdi*2-0x7],0x62
 10063fb:	std    
 10063fc:	in     al,dx
 10063fd:	leave  
 10063fe:	mov    cl,BYTE PTR gs:[rdi+0x5c]
 1006402:	add    DWORD PTR [rcx+rbx*8],edx
 1006405:	ins    BYTE PTR es:[rdi],dx
 1006406:	(bad)  
 1006407:	movsxd esp,DWORD PTR [rbx+0x3d]
 100640a:	psubd  mm6,mm5
 100640d:	or     eax,0x20c88d08
 1006412:	outs   dx,BYTE PTR ds:[rsi]
 1006413:	cmp    ebx,DWORD PTR [rsi+0x10]
 1006416:	imul   ecx,DWORD PTR [rsp+riz*8+0x41],0x7172d560
 100641e:	addr32 mov ds:0x3c03e4d1,al
 1006424:	rex.RXB (bad) 
 1006426:	add    al,0x4b
 1006428:	std    
 1006429:	test   DWORD PTR [rip+0xab56bd2],ecx        # 0xbb5d001
 100642f:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1006430:	cli    
 1006431:	test   al,0xb5
 1006433:	xor    eax,0x42b2986c
 1006438:	(bad)  
 1006439:	leave  
 100643a:	mov    ebx,0xbcf940db
 100643f:	lods   al,BYTE PTR ds:[rsi]
 1006440:	jrcxz  0x10064ae
 1006442:	fdiv   DWORD PTR [rdx]
 1006444:	jne    0x10064a2
 1006446:	fild   WORD PTR [rbp-0x31]
 1006449:	or     eax,0x3d59dcd6
 100644e:	shr    DWORD PTR [rbx+0x26d930ac],1
 1006454:	cmp    al,BYTE PTR [rax]
 1006456:	ficom  WORD PTR [rcx-0x80]
 1006459:	push   rcx
 100645a:	xlat   BYTE PTR ds:[rbx]
 100645b:	enter  0x6116,0xd0
 100645f:	mov    edi,0x21b4f4b5
 1006464:	and    eax,esp
 1006466:	mov    bl,0x56
 1006468:	cdq    
 1006469:	xchg   ebp,eax
 100646a:	mov    edx,0xbda50fcf
 100646f:	mov    eax,0x2802b89e
 1006474:	or     BYTE PTR [rax-0x264da0fb],cl
 100647a:	or     al,0xc6
 100647c:	and    al,0xe9
 100647e:	or     esi,DWORD PTR [rcx+0x2f6f7c87]
 1006484:	adc    DWORD PTR [rax+rbp*2+0x58],ecx
 1006488:	stos   DWORD PTR es:[rdi],eax
 1006489:	sbb    eax,0x2d3dc161
 100648e:	data16 mov dh,0x90
 1006491:	fdiv   QWORD PTR [r14+0x6]
 1006495:	jno    0x1006472
 1006497:	add    DWORD PTR [rax+riz*1+0x102a98d2],edi
 100649e:	(bad)  
 100649f:	out    dx,eax
 10064a0:	mov    DWORD PTR [rbp-0x4ae08e4f],eax
 10064a6:	mov    dh,0x6
 10064a8:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 10064a9:	in     al,0xbf
 10064ab:	lahf   
 10064ac:	xor    edx,esp
 10064ae:	mov    eax,0x7c9a2e8
 10064b3:	js     0x10064e9
 10064b5:	stc    
 10064b6:	add    BYTE PTR [rdi],cl
 10064b8:	mov    gs,WORD PTR [rax-0x67e769f7]
 10064be:	(bad)  
 10064bf:	loope  0x100647c
 10064c1:	or     eax,0x3d2d7f6a
 10064c6:	ins    DWORD PTR es:[rdi],dx
 10064c7:	or     BYTE PTR [rdi+0x191646c],dl
 10064cd:	pop    rsp
 10064ce:	movsxd esp,esi
 10064d0:	hlt    
 10064d1:	push   rcx
 10064d2:	imul   ebp,DWORD PTR [rbx+0x62],0x61
 10064d6:	ins    BYTE PTR es:[rdi],dx
 10064d7:	sbb    al,0xd8
 10064d9:	xor    BYTE PTR [rbp-0x7b],ah
 10064dc:	rex.WRX add BYTE PTR [rdx-0xe],r12b
 10064e0:	in     eax,dx
 10064e1:	xchg   ebp,eax
 10064e2:	(bad)  
 10064e3:	ins    BYTE PTR es:[rdi],dx
 10064e4:	jnp    0x100648b
 10064e6:	add    DWORD PTR [rbx],ebx
 10064e8:	shl    esp,0x8
 10064eb:	(bad)  
 10064ec:	push   rdi
 10064ed:	(bad)  
 10064ee:	pmaddwd mm0,mm6
 10064f1:	fnstenv [rax-0x4816af9b]
 10064f7:	adc    ch,dl
 10064f9:	mov    eax,0x887c8bbe
 10064fe:	mov    ecx,0xdd1ddffc
 1006503:	(bad)  
 1006504:	rex.WB sub rax,0x7cf315da
 100650a:	ror    DWORD PTR [rbp+riz*2+0x58fbd44c],cl
 1006511:	(bad)  
 1006512:	mov    dl,0x4d
 1006514:	(bad)  
 1006515:	push   rcx
 1006516:	mov    ch,0x3a
 1006518:	je     0x100651a
 100651a:	mov    esp,0xbb30e2a3
 100651f:	(bad)  
 1006520:	rex.B movs DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1006522:	fisttp WORD PTR [rdx-0x29]
 1006525:	xchg   ebp,eax
 1006526:	fdivr  DWORD PTR [rip+0xffffffffa4d1c46d]        # 0xffffffffa5d22999
 100652c:	sti    
 100652d:	hlt    
 100652e:	(bad)  
 100652f:	shr    DWORD PTR [rdx-0x17],cl
 1006532:	imul   eax,DWORD PTR [rbx-0x4],0x46346ed9
 1006539:	mov    BYTE PTR [rdi-0x53],ah
 100653c:	sar    BYTE PTR [rax+0x2d73da60],1
 1006542:	add    al,0x44
 1006544:	in     eax,0x1d
 1006546:	add    esi,DWORD PTR [rbx]
 1006548:	pop    rdi
 1006549:	rex.WR or r13b,BYTE PTR [rdx-0x22f28337]
 1006550:	cmp    al,0x71
 1006552:	add    eax,0x241aa50
 1006557:	(bad)  
 1006558:	adc    BYTE PTR [rax],dl
 100655a:	or     edi,DWORD PTR [rsi-0x36f3df7a]
 1006560:	and    eax,0xb35768b5
 1006565:	test   DWORD PTR [rdi+0x20],ebp
 1006568:	or     esp,edx
 100656a:	mov    cx,0xe49f
 100656e:	(bad)  
 100656f:	(bad)  
 1006570:	(bad)  
 1006571:	stc    
 1006572:	ficomp WORD PTR [rsi-0x68]
 1006575:	leave  
 1006576:	fldcw  WORD PTR [rcx]
 1006578:	and    bl,BYTE PTR [rax-0x574b4f30]
 100657e:	xlat   BYTE PTR ds:[rbx]
 100657f:	(bad)  
 1006580:	(bad)  
 1006581:	cmp    eax,0xd8159b3
 1006586:	mov    ah,0x2e
 1006588:	cmp    ebx,DWORD PTR [rbp+rdi*4-0x49]
 100658c:	lods   eax,DWORD PTR ds:[rsi]
 100658d:	ins    BYTE PTR es:[rdi],dx
 100658e:	mov    edx,0xb88320c0
 1006593:	in     eax,dx
 1006594:	mov    dh,0xb3
 1006596:	mov    edi,0xb6e20c9a
 100659b:	add    ebx,DWORD PTR [rdx+0x3974b1d2]
 10065a1:	rex.RXB (bad) 
 10065a3:	(bad)  
 10065a4:	scas   eax,DWORD PTR es:[rdi]
 10065a5:	ja     0x1006579
 10065a7:	popf   
 10065a8:	adc    eax,0x8304db26
 10065ad:	(bad)  
 10065ae:	fdiv   QWORD PTR [rbx+0x12]
 10065b1:	or     esp,DWORD PTR [rbx-0x1d]
 10065b4:	test   BYTE PTR [rbx],bh
 10065b6:	fs xchg esp,eax
 10065b8:	ds push 0x6d
 10065bb:	or     eax,0x7a6a5aa8
 10065c0:	or     ecx,edi
 10065c2:	(bad)  
 10065c3:	in     al,0x9d
 10065c5:	dec    DWORD PTR [rcx]
 10065c7:	xchg   ebx,eax
 10065c8:	(bad)  
 10065c9:	scas   al,BYTE PTR es:[rdi]
 10065ca:	add    BYTE PTR [rdx],cl
 10065cc:	mov    cl,0x9e
 10065ce:	(bad)  
 10065cf:	jge    0x1006615
 10065d1:	xchg   ebx,eax
 10065d2:	(bad)  
 10065d4:	shl    BYTE PTR [rbx-0xd9778f8],cl
 10065da:	add    DWORD PTR [rsi],ebx
 10065dc:	inc    dl
 10065de:	(bad)  
 10065df:	imul   ebx,DWORD PTR [rbp+0x57],0x67cbf762
 10065e6:	xor    BYTE PTR gs:[rcx+0x36],0x6c
 10065eb:	sbb    edi,esp
 10065ed:	(bad)  
 10065ee:	imul   ebp,DWORD PTR [rsi+0x76],0x1b
 10065f2:	(bad)  
 10065f3:	(bad)  
 10065f4:	loopne 0x1006621
 10065f6:	ror    DWORD PTR [rcx+0x10da7a5a],cl
 10065fc:	int3   
 10065fd:	rex.WX frstor [rdi+0x6f]
 1006601:	fistp  QWORD PTR [rcx-0x41100607]
 1006607:	mov    es,WORD PTR [rbx-0x42]
 100660a:	mov    bh,0x17
 100660c:	(bad)  
 100660d:	mov    ?,WORD PTR [rax-0x295c17a0]
 1006613:	(bad)  
 1006614:	jle    0x10065a9
 1006616:	shl    DWORD PTR [rcx+0x38d8c2c4],1
 100661c:	push   rdx
 100661d:	repnz fisttp WORD PTR [rdi-0xf]
 1006621:	addr32 mov ebx,0xbc5767d1
 1006627:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1006628:	fld    QWORD PTR [rsi]
 100662a:	mov    ch,0x3f
 100662c:	rex.WXB
 100662d:	ss mov dl,0x48
 1006630:	fisubr DWORD PTR [rbx]
 1006632:	or     eax,0xa1b4cd8
 1006637:	scas   eax,DWORD PTR es:[rdi]
 1006638:	test   BYTE PTR [rdx+0x3],0x36
 100663c:	(bad)  
 100663d:	jp     0x1006643
 100663f:	rex.B ret 
 1006641:	out    dx,eax
 1006642:	(bad)  
 1006643:	fist   WORD PTR [rbp-0x21]
 1006646:	addr32 test al,0xef
 1006649:	mov    gs,WORD PTR [rsi+0x31]
 100664c:	jns    0x100660c
 100664e:	imul   eax,DWORD PTR [rsi-0x74],0x1acb61b3
 1006655:	and    DWORD PTR [rsi-0x44],0xffffffa0
 1006659:	shr    BYTE PTR [rdi+0x25],cl
 100665c:	ss loop 0x10066c7
 100665f:	push   rdx
 1006660:	xchg   ebp,eax
 1006661:	ja     0x100666f
 1006663:	int3   
 1006664:	add    eax,DWORD PTR [rdi+0xb]
 1006667:	mov    ebx,0x220216b9
 100666c:	(bad)  
 100666d:	es add eax,0xba3bbe55
 1006673:	(bad)
 1006676:	mov    ebp,0xb45a92b2
 100667b:	sub    eax,DWORD PTR [rdx+rbp*2]
 100667e:	mov    bl,0x5c
 1006680:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1006681:	call   rdi
 1006683:	ret    0xcf31
 1006686:	shl    BYTE PTR [rbp+0x2cd99e8b],1
 100668c:	sbb    eax,0xb05bdeae
 1006691:	ret    0x9b64
 1006694:	es repnz movsxd ebp,esp
 1006698:	pushf  
 1006699:	movabs ds:0x6a9026d930a756a,eax
 10066a2:	or     DWORD PTR [rdi+rdi*1-0x7a14f1ca],ebx
 10066a9:	addr32 (bad) 
 10066ab:	jb     0x10066c0
 10066ad:	push   rdi
 10066ae:	add    BYTE PTR [rip+0xffffffff95bf4a82],al        # 0xffffffff96bfb136
 10066b4:	adc    al,0x7a
 10066b6:	mov    eax,0xb12baee2
 10066bb:	jnp    0x10066f5
 10066bd:	sbb    esi,DWORD PTR [rsi-0x2d7164f4]
 10066c3:	xchg   edx,eax
 10066c4:	or     eax,0xb7e5d5be
 10066c9:	out    dx,eax
 10066ca:	fdivr  QWORD PTR [rcx+riz*1-0x21]
 10066ce:	fisttp DWORD PTR [rbx]
 10066d0:	(bad)  
 10066d1:	rcl    bl,cl
 10066d3:	xchg   BYTE PTR [rdx-0x1e],al
 10066d6:	(bad)  
 10066d7:	icebp  
 10066d8:	clc    
 10066d9:	mov    bl,0xdd
 10066db:	push   0x1fda836e
 10066e0:	int    0x16
 10066e2:	mov    esi,0xb9265b81
 10066e7:	mul    cl
 10066e9:	ja     0x100669b
 10066eb:	outs   dx,DWORD PTR ds:[rsi]
 10066ec:	ja     0x1006735
 10066ee:	mov    bh,0x18
 10066f0:	out    0x5a,al
 10066f2:	or     BYTE PTR [rax-0xf09590],cl
 10066f8:	retf   0x63b
 10066fb:	pop    sp
 10066fd:	or     eax,DWORD PTR [rcx]
 10066ff:	adc    edi,edi
 1006701:	sahf   
 1006702:	(bad)
 1006707:	clc    
 1006708:	sar    edi,cl
 100670a:	imul   esp,DWORD PTR [rcx+0x45],0xffffffcf
 100670e:	ins    BYTE PTR es:[rdi],dx
 100670f:	(bad)  
 1006710:	js     0x10066f4
 1006712:	or     ah,BYTE PTR [rax-0x28f22d12]
 1006718:	push   rsp
 1006719:	add    DWORD PTR [rsi+rcx*2],0xffffffc2
 100671d:	mov    bl,0x3
 100671f:	cmp    DWORD PTR [rcx+0x26],esp
 1006722:	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
 1006724:	not    DWORD PTR [rsi]
 1006726:	(bad)  
 1006727:	ror    BYTE PTR [rbp+0x47],1
 100672a:	imul   ecx,DWORD PTR [rcx-0x25],0x4a3e6e77
 1006731:	push   0xffffffffffffffd1
 1006733:	scas   al,BYTE PTR es:[rdi]
 1006734:	fcomp  QWORD PTR [rdx-0x2a]
 1006737:	fldenv [rsi+0xb]
 100673a:	fild   WORD PTR [rax-0x10]
 100673d:	cmp    ebx,eax
 100673f:	(bad)  
 1006740:	push   rbx
 1006741:	scas   al,BYTE PTR es:[rdi]
 1006742:	mov    esp,0xbb9ec5a9
 1006747:	fidivr WORD PTR [rdi-0x31]
 100674a:	mov    dl,0x47
 100674c:	jmp    0x1d311d50
 1006751:	repnz mov ebp,0xbac28abd
 1006757:	retf   0x9330
 100675a:	mov    bl,0x53
 100675c:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 100675d:	movabs ds:0x693bad0360524b4,eax
 1006766:	xlat   BYTE PTR ds:[rbx]
 1006767:	int    0x29
 1006769:	push   rdi
 100676a:	ficom  WORD PTR [rdi+rdi*4+0x67]
 100676e:	fldenv [rbx]
 1006770:	cs jp  0x10067d9
 1006773:	mov    bl,0xb8
 1006775:	rex.WX (bad) 
 1006777:	(bad)
 100677b:	pop    rbp
 100677c:	xchg   esp,eax
 100677d:	sub    ebp,DWORD PTR [rdi+0x2a]
 1006780:	(bad)  
 1006781:	mov    esi,0x8ea1b40b
 1006786:	or     al,0xc3
 1006788:	sbb    ebx,edi
 100678a:	add    eax,0x2ef8d5a
 100678f:	sub    eax,0x72657551
 1006794:	jns    0x10067ed
 1006796:	outs   dx,DWORD PTR ds:[rsi]
 1006797:	jb     0x1006804
 1006799:	imul   ebp,DWORD PTR [rsi+0x67],0x45746553
 10067a0:	js     0x10067a2
 10067a2:	add    BYTE PTR [rax],al
 10067a4:	add    BYTE PTR [rax],al
 10067a6:	add    BYTE PTR [rax],al
 10067a8:	jo     0x10067aa
 10067aa:	jae    0x10067ac
 10067ac:	(bad)  
 10067ad:	add    BYTE PTR [rax+0x0],dh
 10067b0:	imul   eax,DWORD PTR [rax],0x64002e
 10067b6:	ins    BYTE PTR es:[rdi],dx
 10067b7:	add    BYTE PTR [rax+rax*1+0x0],ch
	...
 10067cf:	add    BYTE PTR [rbx+0x0],dl
 10067d2:	rex.WRXB add BYTE PTR [r14+0x0],r8b
 10067d6:	push   rsp
 10067d7:	add    BYTE PTR [rdi+0x0],dl
 10067da:	add    BYTE PTR [r10+0x0],dl
 10067de:	add    BYTE PTR [r8+rax*1+0x4d],r11b
 10067e3:	add    BYTE PTR [rcx+0x0],ch
 10067e6:	movsxd eax,DWORD PTR [rax]
 10067e8:	jb     0x10067ea
 10067ea:	outs   dx,DWORD PTR ds:[rsi]
 10067eb:	add    BYTE PTR [rbx+0x0],dh
 10067ee:	outs   dx,DWORD PTR ds:[rsi]
 10067ef:	add    BYTE PTR [rsi+0x0],ah
 10067f2:	je     0x10067f4
 10067f4:	pop    rsp
 10067f5:	add    BYTE PTR [rbp+0x0],cl
 10067f8:	imul   eax,DWORD PTR [rax],0x720063
 10067fe:	outs   dx,DWORD PTR ds:[rsi]
 10067ff:	add    BYTE PTR [rbx+0x0],dh
 1006802:	outs   dx,DWORD PTR ds:[rsi]
 1006803:	add    BYTE PTR [rsi+0x0],ah
 1006806:	je     0x1006808
 1006808:	and    BYTE PTR [rax],al
 100680a:	push   rbx
 100680b:	add    BYTE PTR [rcx+0x0],dl
 100680e:	rex.WR add BYTE PTR [rax],r12b
 1006811:	add    BYTE PTR [rbx+0x0],dl
 1006814:	add    BYTE PTR gs:[rdx+0x0],dh
 1006818:	jbe    0x100681a
 100681a:	add    BYTE PTR gs:[rdx+0x0],dh
 100681e:	pop    rsp
 100681f:	add    BYTE PTR [rcx],dh
 1006821:	add    BYTE PTR [rcx],dh
 1006823:	add    BYTE PTR [rax],dh
 1006825:	add    BYTE PTR [rax],al
 1006827:	add    BYTE PTR [rbx+0x0],dl
 100682a:	push   rcx
 100682b:	add    BYTE PTR [rax+rax*1+0x44],cl
 100682f:	add    BYTE PTR [rbp+0x0],dl
 1006832:	rex.WRB add BYTE PTR [r8+0x0],r10b
 1006836:	add    BYTE PTR [r10+0x0],r10b
 100683a:	add    BYTE PTR cs:[rbp+0x0],al
 100683e:	pop    rax
 100683f:	add    BYTE PTR [rbp+0x0],al
 1006842:	add    BYTE PTR [rax],al
 1006844:	add    BYTE PTR [rax],al
 1006846:	add    BYTE PTR [rax],al
 1006848:	ja     0x1006836
 100684a:	enter  0x7bf4,0x7d
 100684e:	mov    ecx,0x42cd8c4d
 1006853:	rex (bad) 
 1006855:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1006856:	pop    rdx
 1006857:	stc    
 1006858:	xor    al,0x11
 100685a:	sbb    ecx,esp
 100685c:	jmp    0x10067ed
 100685e:	pop    rdi
 100685f:	rex.WX cdqe 
 1006861:	xor    DWORD PTR [rax+0x60],esi
 1006864:	xchg   ecx,eax
 1006865:	rex.W jns 0x100686f
 1006868:	and    eax,0x73006c00
 100686d:	add    BYTE PTR [rax+rax*1+0x25],bl
 1006871:	add    BYTE PTR [rax+rax*1+0x73],ch
	...
 100687d:	add    BYTE PTR [rax],al
 100687f:	add    al,dh
 1006881:	sahf   
 1006882:	add    DWORD PTR [rcx],eax
 1006884:	add    BYTE PTR [rax],al
 1006886:	add    BYTE PTR [rax],al
 1006888:	nop
 1006889:	lahf   
 100688a:	add    DWORD PTR [rcx],eax
 100688c:	add    BYTE PTR [rax],al
 100688e:	add    BYTE PTR [rax],al
 1006890:	movabs al,ds:0xe00000000001019f
 1006899:	stos   BYTE PTR es:[rdi],al
 100689a:	add    DWORD PTR [rcx],eax
 100689c:	add    BYTE PTR [rax],al
 100689e:	add    BYTE PTR [rax],al
 10068a0:	nop
 10068a1:	sahf   
 10068a2:	add    DWORD PTR [rcx],eax
 10068a4:	add    BYTE PTR [rax],al
 10068a6:	add    BYTE PTR [rax],al
 10068a8:	shl    BYTE PTR [rsi+0x101],0x0
 10068af:	add    BYTE PTR [rax-0x53],dl
 10068b2:	add    DWORD PTR [rcx],eax
 10068b4:	add    BYTE PTR [rax],al
 10068b6:	add    BYTE PTR [rax],al
 10068b8:	rex movabs eax,ds:0x9fb0000000000101
 10068c2:	add    DWORD PTR [rcx],eax
 10068c4:	add    BYTE PTR [rax],al
 10068c6:	add    BYTE PTR [rax],al
 10068c8:	lock lahf 
 10068ca:	add    DWORD PTR [rcx],eax
 10068cc:	add    BYTE PTR [rax],al
 10068ce:	add    BYTE PTR [rax],al
 10068d0:	lock movs DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 10068d2:	add    DWORD PTR [rcx],eax
	...
 10068e0:	push   rbx
 10068e1:	add    BYTE PTR [rcx+0x0],dl
 10068e4:	rex.WR add BYTE PTR [rax+rax*1+0x55],r8b
 10068e9:	add    BYTE PTR [rbp+0x0],cl
 10068ec:	push   rax
 10068ed:	add    BYTE PTR [rbp+0x0],al
 10068f0:	push   rdx
 10068f1:	add    BYTE PTR [rsi],ch
 10068f3:	add    BYTE PTR [rbp+0x0],al
 10068f6:	pop    rax
 10068f7:	add    BYTE PTR [rbp+0x0],al
 10068fa:	add    BYTE PTR [rax],al
 10068fc:	add    BYTE PTR [rax],al
 10068fe:	add    BYTE PTR [rax],al
 1006900:	(bad)  
 1006901:	(bad)  
 1006902:	ret    
 1006903:	sbb    edx,DWORD PTR [rcx-0x61b65b7b]
 1006909:	movabs ds:0x1000e6b57640b44f,al
 1006912:	add    BYTE PTR [rax],ah
 1006914:	add    BYTE PTR [rax],al
 1006916:	add    BYTE PTR [rax],al
 1006918:	rex imul eax,DWORD PTR [rax],0x1
 100691c:	add    BYTE PTR [rax],al
 100691e:	add    BYTE PTR [rax],al
 1006920:	add    al,BYTE PTR [rax]
 1006922:	add    BYTE PTR [rax],ah
 1006924:	add    BYTE PTR [rax],al
 1006926:	add    BYTE PTR [rax],al
 1006928:	nop
 1006929:	imul   eax,DWORD PTR [rax],0x1
 100692c:	add    BYTE PTR [rax],al
 100692e:	add    BYTE PTR [rax],al
 1006930:	add    al,0x0
 1006932:	add    BYTE PTR [rax],ah
 1006934:	add    BYTE PTR [rax],al
 1006936:	add    BYTE PTR [rax],al
 1006938:	loopne 0x10069a5
 100693a:	add    BYTE PTR [rcx],al
 100693c:	add    BYTE PTR [rax],al
 100693e:	add    BYTE PTR [rax],al
 1006940:	or     BYTE PTR [rax],al
 1006942:	add    BYTE PTR [rax],ah
 1006944:	add    BYTE PTR [rax],al
 1006946:	add    BYTE PTR [rax],al
 1006948:	rex ins BYTE PTR es:[rdi],dx
 100694a:	add    BYTE PTR [rcx],al
 100694c:	add    BYTE PTR [rax],al
 100694e:	add    BYTE PTR [rax],al
 1006950:	adc    BYTE PTR [rax],al
 1006952:	add    BYTE PTR [rax],ah
 1006954:	add    BYTE PTR [rax],al
 1006956:	add    BYTE PTR [rax],al
 1006958:	nop
 1006959:	ins    BYTE PTR es:[rdi],dx
 100695a:	add    BYTE PTR [rcx],al
 100695c:	add    BYTE PTR [rax],al
 100695e:	add    BYTE PTR [rax],al
 1006960:	and    BYTE PTR [rax],al
 1006962:	add    BYTE PTR [rax],ah
 1006964:	add    BYTE PTR [rax],al
 1006966:	add    BYTE PTR [rax],al
 1006968:	lock ins BYTE PTR es:[rdi],dx
 100696a:	add    BYTE PTR [rcx],al
 100696c:	add    BYTE PTR [rax],al
 100696e:	add    BYTE PTR [rax],al
 1006970:	add    BYTE PTR [rax],al
 1006973:	and    BYTE PTR [rax],al
 1006975:	add    BYTE PTR [rax],al
 1006977:	add    BYTE PTR [rax+0x6d],al
 100697a:	add    BYTE PTR [rcx],al
 100697c:	add    BYTE PTR [rax],al
 100697e:	add    BYTE PTR [rax],al
 1006980:	add    BYTE PTR [rax],0x0
 1006983:	and    BYTE PTR [rax],al
 1006985:	add    BYTE PTR [rax],al
 1006987:	add    BYTE PTR [rax+0x1006d],ah
 100698d:	add    BYTE PTR [rax],al
 100698f:	add    BYTE PTR [rax],al
 1006991:	add    DWORD PTR [rax],eax
 1006993:	and    BYTE PTR [rax],al
 1006995:	add    BYTE PTR [rax],al
 1006997:	add    BYTE PTR [rax],al
 1006999:	outs   dx,BYTE PTR ds:[rsi]
 100699a:	add    BYTE PTR [rcx],al
 100699c:	add    BYTE PTR [rax],al
 100699e:	add    BYTE PTR [rax],al
 10069a0:	add    BYTE PTR [rdx],al
 10069a2:	add    BYTE PTR [rax],ah
 10069a4:	add    BYTE PTR [rax],al
 10069a6:	add    BYTE PTR [rax],al
 10069a8:	push   rax
 10069a9:	outs   dx,BYTE PTR ds:[rsi]
 10069aa:	add    BYTE PTR [rcx],al
 10069ac:	add    BYTE PTR [rax],al
 10069ae:	add    BYTE PTR [rax],al
 10069b0:	add    BYTE PTR [rax+rax*1],al
 10069b3:	and    BYTE PTR [rax],al
 10069b5:	add    BYTE PTR [rax],al
 10069b7:	add    BYTE PTR [rax+0x1006e],ah
 10069bd:	add    BYTE PTR [rax],al
 10069bf:	add    BYTE PTR [rax],al
 10069c1:	or     BYTE PTR [rax],al
 10069c3:	and    BYTE PTR [rax],al
 10069c5:	add    BYTE PTR [rax],al
 10069c7:	add    BYTE PTR [rax],al
 10069c9:	outs   dx,DWORD PTR ds:[rsi]
 10069ca:	add    BYTE PTR [rcx],al
 10069cc:	add    BYTE PTR [rax],al
 10069ce:	add    BYTE PTR [rax],al
 10069d0:	add    BYTE PTR [rax],ah
 10069d2:	add    BYTE PTR [rax],ah
 10069d4:	add    BYTE PTR [rax],al
 10069d6:	add    BYTE PTR [rax],al
 10069d8:	(bad)  
 10069d9:	outs   dx,DWORD PTR ds:[rsi]
 10069da:	add    BYTE PTR [rcx],al
 10069dc:	add    BYTE PTR [rax],al
 10069de:	add    BYTE PTR [rax],al
 10069e0:	add    BYTE PTR [rax+0x2000],al
 10069e6:	add    BYTE PTR [rax],al
 10069e8:	lock outs dx,DWORD PTR ds:[rsi]
 10069ea:	add    BYTE PTR [rcx],al
 10069ec:	add    BYTE PTR [rax],al
 10069ee:	add    BYTE PTR [rax],al
 10069f0:	add    BYTE PTR [r10+0x0],r14b
 10069f4:	jb     0x10069f6
 10069f6:	outs   dx,DWORD PTR ds:[rsi]
 10069f7:	add    BYTE PTR [rdx+0x0],dh
 10069fa:	and    BYTE PTR [rax],al
 10069fc:	sub    eax,0x44002000
 1006a01:	add    BYTE PTR [rbp+0x0],dh
 1006a04:	ins    DWORD PTR es:[rdi],dx
 1006a05:	add    BYTE PTR [rax+0x0],dh
 1006a08:	imul   eax,DWORD PTR [rax],0x67006e
 1006a0e:	and    BYTE PTR [rax],al
 1006a10:	jo     0x1006a12
 1006a12:	jb     0x1006a14
 1006a14:	outs   dx,DWORD PTR ds:[rsi]
 1006a15:	add    BYTE PTR [rbx+0x0],ah
 1006a18:	add    BYTE PTR gs:[rbx+0x0],dh
 1006a1c:	jae    0x1006a1e
 1006a1e:	and    BYTE PTR [rax],al
 1006a20:	ja     0x1006a22
 1006a22:	(bad)  
 1006a23:	add    BYTE PTR [rbx+0x0],dh
 1006a26:	and    BYTE PTR [rax],al
 1006a28:	outs   dx,BYTE PTR ds:[rsi]
 1006a29:	add    BYTE PTR [rdi+0x0],ch
 1006a2c:	je     0x1006a2e
 1006a2e:	and    BYTE PTR [rax],al
 1006a30:	jae    0x1006a32
 1006a32:	je     0x1006a34
 1006a34:	(bad)  
 1006a35:	add    BYTE PTR [rdx+0x0],dh
 1006a38:	je     0x1006a3a
 1006a3a:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1006a3f:	add    BYTE PTR [rdi+0x0],ch
 1006a42:	jb     0x1006a44
 1006a44:	and    BYTE PTR [rax],al
 1006a46:	je     0x1006a48
 1006a48:	add    BYTE PTR gs:[rdx+0x0],dh
 1006a4c:	ins    DWORD PTR es:[rdi],dx
 1006a4d:	add    BYTE PTR [rcx+0x0],ch
 1006a50:	outs   dx,BYTE PTR ds:[rsi]
 1006a51:	add    BYTE PTR [rcx+0x0],ah
 1006a54:	je     0x1006a56
 1006a56:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1006a5b:	add    BYTE PTR [rax+0x0],dh
 1006a5e:	jb     0x1006a60
 1006a60:	add    BYTE PTR gs:[rbp+0x0],ch
 1006a64:	(bad)  
 1006a65:	add    BYTE PTR [rax+rax*1+0x75],dh
 1006a69:	add    BYTE PTR [rdx+0x0],dh
 1006a6c:	add    BYTE PTR gs:[rax+rax*1+0x79],ch
 1006a71:	add    BYTE PTR [rsi],ch
 1006a73:	add    BYTE PTR [rip+0xa00],cl        # 0x1007479
 1006a79:	add    BYTE PTR [rax],al
 1006a7b:	add    BYTE PTR [rax],al
 1006a7d:	add    BYTE PTR [rax],al
 1006a7f:	add    BYTE PTR [rbp+0x0],al
 1006a82:	js     0x1006a84
 1006a84:	je     0x1006a86
 1006a86:	add    BYTE PTR gs:[rdx+0x0],dh
 1006a8a:	outs   dx,BYTE PTR ds:[rsi]
 1006a8b:	add    BYTE PTR [rcx+0x0],ah
 1006a8e:	ins    BYTE PTR es:[rdi],dx
 1006a8f:	add    BYTE PTR [rax],ah
 1006a91:	add    BYTE PTR [rax+rax*1+0x75],ah
 1006a95:	add    BYTE PTR [rbp+0x0],ch
 1006a98:	jo     0x1006a9a
 1006a9a:	and    BYTE PTR [rax],al
 1006a9c:	jo     0x1006a9e
 1006a9e:	jb     0x1006aa0
 1006aa0:	outs   dx,DWORD PTR ds:[rsi]
 1006aa1:	add    BYTE PTR [rbx+0x0],ah
 1006aa4:	add    BYTE PTR gs:[rbx+0x0],dh
 1006aa8:	jae    0x1006aaa
 1006aaa:	and    BYTE PTR [rax],al
 1006aac:	jb     0x1006aae
 1006aae:	add    BYTE PTR gs:[rax+rax*1+0x75],dh
 1006ab3:	add    BYTE PTR [rdx+0x0],dh
 1006ab6:	outs   dx,BYTE PTR ds:[rsi]
 1006ab7:	add    BYTE PTR [rbp+0x0],ah
 1006aba:	add    BYTE PTR fs:[rax],ah
 1006abd:	add    BYTE PTR [rsi+0x0],ch
 1006ac0:	outs   dx,DWORD PTR ds:[rsi]
 1006ac1:	add    BYTE PTR [rax],ah
 1006ac3:	add    BYTE PTR [rbp+0x0],ah
 1006ac6:	jb     0x1006ac8
 1006ac8:	jb     0x1006aca
 1006aca:	outs   dx,DWORD PTR ds:[rsi]
 1006acb:	add    BYTE PTR [rdx+0x0],dh
 1006ace:	jae    0x1006ad0
 1006ad0:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x10074d7
	...
 1006adf:	add    BYTE PTR [rbp+0x0],al
 1006ae2:	js     0x1006ae4
 1006ae4:	je     0x1006ae6
 1006ae6:	add    BYTE PTR gs:[rdx+0x0],dh
 1006aea:	outs   dx,BYTE PTR ds:[rsi]
 1006aeb:	add    BYTE PTR [rcx+0x0],ah
 1006aee:	ins    BYTE PTR es:[rdi],dx
 1006aef:	add    BYTE PTR [rax],ah
 1006af1:	add    BYTE PTR [rax+rax*1+0x75],ah
 1006af5:	add    BYTE PTR [rbp+0x0],ch
 1006af8:	jo     0x1006afa
 1006afa:	and    BYTE PTR [rax],al
 1006afc:	jo     0x1006afe
 1006afe:	jb     0x1006b00
 1006b00:	outs   dx,DWORD PTR ds:[rsi]
 1006b01:	add    BYTE PTR [rbx+0x0],ah
 1006b04:	add    BYTE PTR gs:[rbx+0x0],dh
 1006b08:	jae    0x1006b0a
 1006b0a:	and    BYTE PTR [rax],al
 1006b0c:	jb     0x1006b0e
 1006b0e:	add    BYTE PTR gs:[rax+rax*1+0x75],dh
 1006b13:	add    BYTE PTR [rdx+0x0],dh
 1006b16:	outs   dx,BYTE PTR ds:[rsi]
 1006b17:	add    BYTE PTR [rax],ah
 1006b19:	add    BYTE PTR [rbx+0x0],ah
 1006b1c:	outs   dx,DWORD PTR ds:[rsi]
 1006b1d:	add    BYTE PTR [rax+rax*1+0x65],ah
 1006b21:	add    BYTE PTR [rax],ah
 1006b23:	add    BYTE PTR [rax],dh
 1006b25:	add    BYTE PTR [rax+0x0],bh
 1006b28:	and    eax,0x2e007800
 1006b2d:	add    BYTE PTR [rip+0xa00],cl        # 0x1007533
	...
 1006b3f:	add    BYTE PTR [rbp+0x0],al
 1006b42:	jb     0x1006b44
 1006b44:	jb     0x1006b46
 1006b46:	outs   dx,DWORD PTR ds:[rsi]
 1006b47:	add    BYTE PTR [rdx+0x0],dh
 1006b4a:	and    BYTE PTR [rax],al
 1006b4c:	sub    eax,0x49002000
 1006b51:	add    BYTE PTR [rsi+0x0],ch
 1006b54:	jo     0x1006b56
 1006b56:	jne    0x1006b58
 1006b58:	je     0x1006b5a
 1006b5a:	and    BYTE PTR [rax],al
 1006b5c:	jo     0x1006b5e
 1006b5e:	(bad)  
 1006b5f:	add    BYTE PTR [rdx+0x0],dh
 1006b62:	(bad)  
 1006b63:	add    BYTE PTR [rbp+0x0],ch
 1006b66:	add    BYTE PTR gs:[rax+rax*1+0x65],dh
 1006b6b:	add    BYTE PTR [rdx+0x0],dh
 1006b6e:	jae    0x1006b70
 1006b70:	and    BYTE PTR [rax],al
 1006b72:	imul   eax,DWORD PTR [rax],0x76006e
 1006b78:	(bad)  
 1006b79:	add    BYTE PTR [rax+rax*1+0x69],ch
 1006b7d:	add    BYTE PTR [rax+rax*1+0x2e],ah
 1006b81:	add    BYTE PTR [rip+0xa00],cl        # 0x1007587
	...
 1006b8f:	add    BYTE PTR [rbp+0x0],al
 1006b92:	jb     0x1006b94
 1006b94:	jb     0x1006b96
 1006b96:	outs   dx,DWORD PTR ds:[rsi]
 1006b97:	add    BYTE PTR [rdx+0x0],dh
 1006b9a:	and    BYTE PTR [rax],al
 1006b9c:	sub    eax,0x46002000
 1006ba1:	add    BYTE PTR [rcx+0x0],ah
 1006ba4:	imul   eax,DWORD PTR [rax],0x65006c
 1006baa:	add    BYTE PTR fs:[rax],ah
 1006bad:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1006bb1:	add    BYTE PTR [rax],ah
 1006bb3:	add    BYTE PTR [rbx+0x0],ah
 1006bb6:	jb     0x1006bb8
 1006bb8:	add    BYTE PTR gs:[rcx+0x0],ah
 1006bbc:	je     0x1006bbe
 1006bbe:	add    BYTE PTR gs:[rax],ah
 1006bc1:	add    BYTE PTR [rax+rax*1+0x75],ah
 1006bc5:	add    BYTE PTR [rbp+0x0],ch
 1006bc8:	jo     0x1006bca
 1006bca:	and    BYTE PTR [rax],al
 1006bcc:	data16 add BYTE PTR [rcx+0x0],ch
 1006bd0:	ins    BYTE PTR es:[rdi],dx
 1006bd1:	add    BYTE PTR [rbp+0x0],ah
 1006bd4:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x10075db
 1006bdb:	add    BYTE PTR [rax],al
 1006bdd:	add    BYTE PTR [rax],al
 1006bdf:	add    BYTE PTR [rbp+0x0],al
 1006be2:	jb     0x1006be4
 1006be4:	jb     0x1006be6
 1006be6:	outs   dx,DWORD PTR ds:[rsi]
 1006be7:	add    BYTE PTR [rdx+0x0],dh
 1006bea:	and    BYTE PTR [rax],al
 1006bec:	sub    eax,0x46002000
 1006bf1:	add    BYTE PTR [rcx+0x0],ah
 1006bf4:	imul   eax,DWORD PTR [rax],0x65006c
 1006bfa:	add    BYTE PTR fs:[rax],ah
 1006bfd:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1006c01:	add    BYTE PTR [rax],ah
 1006c03:	add    BYTE PTR [rbx+0x0],ah
 1006c06:	jb     0x1006c08
 1006c08:	add    BYTE PTR gs:[rcx+0x0],ah
 1006c0c:	je     0x1006c0e
 1006c0e:	add    BYTE PTR gs:[rax],ah
 1006c11:	add    BYTE PTR [rbp+0x0],ch
 1006c14:	(bad)  
 1006c15:	add    BYTE PTR [rsi+0x0],ch
 1006c18:	imul   eax,DWORD PTR [rax],0x650066
 1006c1e:	jae    0x1006c20
 1006c20:	je     0x1006c22
 1006c22:	and    BYTE PTR [rax],al
 1006c24:	data16 add BYTE PTR [rcx+0x0],ch
 1006c28:	ins    BYTE PTR es:[rdi],dx
 1006c29:	add    BYTE PTR [rbp+0x0],ah
 1006c2c:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x1007633
	...
 1006c3f:	add    BYTE PTR [rbp+0x0],al
 1006c42:	jb     0x1006c44
 1006c44:	jb     0x1006c46
 1006c46:	outs   dx,DWORD PTR ds:[rsi]
 1006c47:	add    BYTE PTR [rdx+0x0],dh
 1006c4a:	and    BYTE PTR [rax],al
 1006c4c:	sub    eax,0x46002000
 1006c51:	add    BYTE PTR [rcx+0x0],ah
 1006c54:	imul   eax,DWORD PTR [rax],0x65006c
 1006c5a:	add    BYTE PTR fs:[rax],ah
 1006c5d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1006c61:	add    BYTE PTR [rax],ah
 1006c63:	add    BYTE PTR [rdi+0x0],ch
 1006c66:	jo     0x1006c68
 1006c68:	add    BYTE PTR gs:[rsi+0x0],ch
 1006c6c:	and    BYTE PTR [rax],al
 1006c6e:	add    BYTE PTR fs:[rbp+0x0],ah
 1006c72:	(bad)  
 1006c73:	add    BYTE PTR [rbp+0x0],dh
 1006c76:	add    BYTE PTR [eax],ah
 1006c79:	add    BYTE PTR [rax+0x0],dh
 1006c7c:	jb     0x1006c7e
 1006c7e:	outs   dx,DWORD PTR ds:[rsi]
 1006c7f:	add    BYTE PTR [rbx+0x0],ah
 1006c82:	add    BYTE PTR gs:[rbx+0x0],dh
 1006c86:	jae    0x1006c88
 1006c88:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x100768f
 1006c8f:	add    BYTE PTR [rbp+0x0],al
 1006c92:	jb     0x1006c94
 1006c94:	jb     0x1006c96
 1006c96:	outs   dx,DWORD PTR ds:[rsi]
 1006c97:	add    BYTE PTR [rdx+0x0],dh
 1006c9a:	and    BYTE PTR [rax],al
 1006c9c:	sub    eax,0x46002000
 1006ca1:	add    BYTE PTR [rcx+0x0],ah
 1006ca4:	imul   eax,DWORD PTR [rax],0x65006c
 1006caa:	add    BYTE PTR fs:[rax],ah
 1006cad:	add    BYTE PTR [rdi+0x0],dh
 1006cb0:	push   0x6c006900
 1006cb5:	add    BYTE PTR [rbp+0x0],ah
 1006cb8:	and    BYTE PTR [rax],al
 1006cba:	ja     0x1006cbc
 1006cbc:	jb     0x1006cbe
 1006cbe:	imul   eax,DWORD PTR [rax],0x690074
 1006cc4:	outs   dx,BYTE PTR ds:[rsi]
 1006cc5:	add    BYTE PTR [rdi+0x0],ah
 1006cc8:	and    BYTE PTR [rax],al
 1006cca:	ins    DWORD PTR es:[rdi],dx
 1006ccb:	add    BYTE PTR [rcx+0x0],ch
 1006cce:	outs   dx,BYTE PTR ds:[rsi]
 1006ccf:	add    BYTE PTR [rcx+0x0],ch
 1006cd2:	and    BYTE PTR [rax],al
 1006cd4:	add    BYTE PTR fs:[rbp+0x0],dh
 1006cd8:	ins    DWORD PTR es:[rdi],dx
 1006cd9:	add    BYTE PTR [rax+0x0],dh
 1006cdc:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x10076e3
	...
 1006cef:	add    BYTE PTR [rbp+0x0],al
 1006cf2:	jb     0x1006cf4
 1006cf4:	jb     0x1006cf6
 1006cf6:	outs   dx,DWORD PTR ds:[rsi]
 1006cf7:	add    BYTE PTR [rdx+0x0],dh
 1006cfa:	and    BYTE PTR [rax],al
 1006cfc:	sub    eax,0x46002000
 1006d01:	add    BYTE PTR [rcx+0x0],ah
 1006d04:	imul   eax,DWORD PTR [rax],0x65006c
 1006d0a:	add    BYTE PTR fs:[rax],ah
 1006d0d:	add    BYTE PTR [rdx+0x0],dh
 1006d10:	add    BYTE PTR gs:[rcx+0x0],ah
 1006d14:	add    BYTE PTR fs:[rcx+0x0],ch
 1006d18:	outs   dx,BYTE PTR ds:[rsi]
 1006d19:	add    BYTE PTR [rdi+0x0],ah
 1006d1c:	and    BYTE PTR [rax],al
 1006d1e:	jb     0x1006d20
 1006d20:	add    BYTE PTR gs:[rdi+0x0],ah
 1006d24:	imul   eax,DWORD PTR [rax],0x740073
 1006d2a:	jb     0x1006d2c
 1006d2c:	jns    0x1006d2e
 1006d2e:	and    BYTE PTR [rax],al
 1006d30:	imul   eax,DWORD PTR [rax],0x65
 1006d33:	add    BYTE PTR [rcx+0x0],bh
 1006d36:	jae    0x1006d38
 1006d38:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x100773f
 1006d3f:	add    BYTE PTR [rbp+0x0],al
 1006d42:	jb     0x1006d44
 1006d44:	jb     0x1006d46
 1006d46:	outs   dx,DWORD PTR ds:[rsi]
 1006d47:	add    BYTE PTR [rdx+0x0],dh
 1006d4a:	and    BYTE PTR [rax],al
 1006d4c:	sub    eax,0x46002000
 1006d51:	add    BYTE PTR [rcx+0x0],ah
 1006d54:	imul   eax,DWORD PTR [rax],0x65006c
 1006d5a:	add    BYTE PTR fs:[rax],ah
 1006d5d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1006d61:	add    BYTE PTR [rax],ah
 1006d63:	add    BYTE PTR [rbx+0x0],dh
 1006d66:	je     0x1006d68
 1006d68:	(bad)  
 1006d69:	add    BYTE PTR [rdx+0x0],dh
 1006d6c:	je     0x1006d6e
 1006d6e:	and    BYTE PTR [rax],al
 1006d70:	push   rdi
 1006d71:	add    BYTE PTR [rcx+0x0],ah
 1006d74:	je     0x1006d76
 1006d76:	jae    0x1006d78
 1006d78:	outs   dx,DWORD PTR ds:[rsi]
 1006d79:	add    BYTE PTR [rsi+0x0],ch
 1006d7c:	and    BYTE PTR [rax],al
 1006d7e:	jo     0x1006d80
 1006d80:	jb     0x1006d82
 1006d82:	outs   dx,DWORD PTR ds:[rsi]
 1006d83:	add    BYTE PTR [rbx+0x0],ah
 1006d86:	add    BYTE PTR gs:[rbx+0x0],dh
 1006d8a:	jae    0x1006d8c
 1006d8c:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x1007793
	...
 1006d9f:	add    BYTE PTR [rbp+0x0],al
 1006da2:	jb     0x1006da4
 1006da4:	jb     0x1006da6
 1006da6:	outs   dx,DWORD PTR ds:[rsi]
 1006da7:	add    BYTE PTR [rdx+0x0],dh
 1006daa:	and    BYTE PTR [rax],al
 1006dac:	sub    eax,0x46002000
 1006db1:	add    BYTE PTR [rcx+0x0],ah
 1006db4:	imul   eax,DWORD PTR [rax],0x65006c
 1006dba:	add    BYTE PTR fs:[rax],ah
 1006dbd:	add    BYTE PTR [rdi+0x0],dh
 1006dc0:	jb     0x1006dc2
 1006dc2:	imul   eax,DWORD PTR [rax],0x690074
 1006dc8:	outs   dx,BYTE PTR ds:[rsi]
 1006dc9:	add    BYTE PTR [rdi+0x0],ah
 1006dcc:	and    BYTE PTR [rax],al
 1006dce:	je     0x1006dd0
 1006dd0:	push   0x20006500
 1006dd5:	add    BYTE PTR [rdi+0x0],dl
 1006dd8:	(bad)  
 1006dd9:	add    BYTE PTR [rax+rax*1+0x73],dh
 1006ddd:	add    BYTE PTR [rdi+0x0],ch
 1006de0:	outs   dx,BYTE PTR ds:[rsi]
 1006de1:	add    BYTE PTR [rax],ah
 1006de3:	add    BYTE PTR [rbp+0x0],ch
 1006de6:	(bad)  
 1006de7:	add    BYTE PTR [rsi+0x0],ch
 1006dea:	imul   eax,DWORD PTR [rax],0x650066
 1006df0:	jae    0x1006df2
 1006df2:	je     0x1006df4
 1006df4:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x10077fb
 1006dfb:	add    BYTE PTR [rax],al
 1006dfd:	add    BYTE PTR [rax],al
 1006dff:	add    BYTE PTR [rbp+0x0],al
 1006e02:	jb     0x1006e04
 1006e04:	jb     0x1006e06
 1006e06:	outs   dx,DWORD PTR ds:[rsi]
 1006e07:	add    BYTE PTR [rdx+0x0],dh
 1006e0a:	and    BYTE PTR [rax],al
 1006e0c:	sub    eax,0x56002000
 1006e11:	add    BYTE PTR [rbp+0x0],ah
 1006e14:	jb     0x1006e16
 1006e16:	jae    0x1006e18
 1006e18:	imul   eax,DWORD PTR [rax],0x6e006f
 1006e1e:	and    BYTE PTR [rax],al
 1006e20:	ins    DWORD PTR es:[rdi],dx
 1006e21:	add    BYTE PTR [rcx+0x0],ch
 1006e24:	jae    0x1006e26
 1006e26:	ins    DWORD PTR es:[rdi],dx
 1006e27:	add    BYTE PTR [rcx+0x0],ah
 1006e2a:	je     0x1006e2c
 1006e2c:	movsxd eax,DWORD PTR [rax]
 1006e2e:	push   0x64002000
 1006e33:	add    BYTE PTR [rbp+0x0],ah
 1006e36:	je     0x1006e38
 1006e38:	add    BYTE PTR gs:[rbx+0x0],ah
 1006e3c:	je     0x1006e3e
 1006e3e:	add    BYTE PTR gs:[rax+rax*1+0x2e],ah
 1006e43:	add    BYTE PTR [rip+0xa00],cl        # 0x1007849
 1006e49:	add    BYTE PTR [rax],al
 1006e4b:	add    BYTE PTR [rax],al
 1006e4d:	add    BYTE PTR [rax],al
 1006e4f:	add    BYTE PTR [rbp+0x0],al
 1006e52:	jb     0x1006e54
 1006e54:	jb     0x1006e56
 1006e56:	outs   dx,DWORD PTR ds:[rsi]
 1006e57:	add    BYTE PTR [rdx+0x0],dh
 1006e5a:	and    BYTE PTR [rax],al
 1006e5c:	sub    eax,0x52002000
 1006e61:	add    BYTE PTR [rbp+0x0],ah
 1006e64:	ins    DWORD PTR es:[rdi],dx
 1006e65:	add    BYTE PTR [rdi+0x0],ch
 1006e68:	je     0x1006e6a
 1006e6a:	add    BYTE PTR gs:[rax],ah
 1006e6d:	add    BYTE PTR [rbp+0x0],ch
 1006e70:	add    BYTE PTR gs:[rbp+0x0],ch
 1006e74:	outs   dx,DWORD PTR ds:[rsi]
 1006e75:	add    BYTE PTR [rdx+0x0],dh
 1006e78:	jns    0x1006e7a
 1006e7a:	and    BYTE PTR [rax],al
 1006e7c:	jb     0x1006e7e
 1006e7e:	add    BYTE PTR gs:[rcx+0x0],ah
 1006e82:	add    BYTE PTR fs:[rax],ah
 1006e85:	add    BYTE PTR [rsi+0x0],ah
 1006e88:	(bad)  
 1006e89:	add    BYTE PTR [rcx+0x0],ch
 1006e8c:	ins    BYTE PTR es:[rdi],dx
 1006e8d:	add    BYTE PTR [rbp+0x0],ah
 1006e90:	add    BYTE PTR fs:[rsi],ch
 1006e93:	add    BYTE PTR [rip+0xa00],cl        # 0x1007899
 1006e99:	add    BYTE PTR [rax],al
 1006e9b:	add    BYTE PTR [rax],al
 1006e9d:	add    BYTE PTR [rax],al
 1006e9f:	add    BYTE PTR [rbp+0x0],al
 1006ea2:	jb     0x1006ea4
 1006ea4:	jb     0x1006ea6
 1006ea6:	outs   dx,DWORD PTR ds:[rsi]
 1006ea7:	add    BYTE PTR [rdx+0x0],dh
 1006eaa:	and    BYTE PTR [rax],al
 1006eac:	sub    eax,0x52002000
 1006eb1:	add    BYTE PTR [rbp+0x0],ah
 1006eb4:	ins    DWORD PTR es:[rdi],dx
 1006eb5:	add    BYTE PTR [rdi+0x0],ch
 1006eb8:	je     0x1006eba
 1006eba:	add    BYTE PTR gs:[rax],ah
 1006ebd:	add    BYTE PTR [rbp+0x0],ch
 1006ec0:	add    BYTE PTR gs:[rbp+0x0],ch
 1006ec4:	outs   dx,DWORD PTR ds:[rsi]
 1006ec5:	add    BYTE PTR [rdx+0x0],dh
 1006ec8:	jns    0x1006eca
 1006eca:	and    BYTE PTR [rax],al
 1006ecc:	data16 add BYTE PTR [rcx+0x0],ah
 1006ed0:	imul   eax,DWORD PTR [rax],0x65006c
 1006ed6:	add    BYTE PTR fs:[rax],ah
 1006ed9:	add    BYTE PTR [rbx+0x0],ah
 1006edc:	push   0x63006500
 1006ee1:	add    BYTE PTR [rbx+0x0],ch
 1006ee4:	jae    0x1006ee6
 1006ee6:	jne    0x1006ee8
 1006ee8:	ins    DWORD PTR es:[rdi],dx
 1006ee9:	add    BYTE PTR [rsi],ch
 1006eeb:	add    BYTE PTR [rip+0xa00],cl        # 0x10078f1
	...
 1006efd:	add    BYTE PTR [rax],al
 1006eff:	add    BYTE PTR [rbp+0x0],al
 1006f02:	jb     0x1006f04
 1006f04:	jb     0x1006f06
 1006f06:	outs   dx,DWORD PTR ds:[rsi]
 1006f07:	add    BYTE PTR [rdx+0x0],dh
 1006f0a:	and    BYTE PTR [rax],al
 1006f0c:	sub    eax,0x52002000
 1006f11:	add    BYTE PTR [rbp+0x0],ah
 1006f14:	ins    DWORD PTR es:[rdi],dx
 1006f15:	add    BYTE PTR [rdi+0x0],ch
 1006f18:	je     0x1006f1a
 1006f1a:	add    BYTE PTR gs:[rax],ah
 1006f1d:	add    BYTE PTR [rbp+0x0],ch
 1006f20:	add    BYTE PTR gs:[rbp+0x0],ch
 1006f24:	outs   dx,DWORD PTR ds:[rsi]
 1006f25:	add    BYTE PTR [rdx+0x0],dh
 1006f28:	jns    0x1006f2a
 1006f2a:	and    BYTE PTR [rax],al
 1006f2c:	data16 add BYTE PTR [rcx+0x0],ah
 1006f30:	imul   eax,DWORD PTR [rax],0x65006c
 1006f36:	add    BYTE PTR fs:[rax],ah
 1006f39:	add    BYTE PTR [rbx+0x0],dh
 1006f3c:	(bad)  
 1006f3d:	add    BYTE PTR [rsi+0x0],ch
 1006f40:	imul   eax,DWORD PTR [rax],0x790074
 1006f46:	and    BYTE PTR [rax],al
 1006f48:	movsxd eax,DWORD PTR [rax]
 1006f4a:	push   0x63006500
 1006f4f:	add    BYTE PTR [rbx+0x0],ch
 1006f52:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x1007959
 1006f59:	add    BYTE PTR [rax],al
 1006f5b:	add    BYTE PTR [rax],al
 1006f5d:	add    BYTE PTR [rax],al
 1006f5f:	add    BYTE PTR [rax+rax*1+0x68],dl
 1006f63:	add    BYTE PTR [rbp+0x0],ah
 1006f66:	and    BYTE PTR [rax],al
 1006f68:	add    BYTE PTR gs:[rdx+0x0],dh
 1006f6c:	jb     0x1006f6e
 1006f6e:	outs   dx,DWORD PTR ds:[rsi]
 1006f6f:	add    BYTE PTR [rdx+0x0],dh
 1006f72:	and    BYTE PTR [rax],al
 1006f74:	imul   eax,DWORD PTR [rax],0x66006e
 1006f7a:	outs   dx,DWORD PTR ds:[rsi]
 1006f7b:	add    BYTE PTR [rdx+0x0],dh
 1006f7e:	ins    DWORD PTR es:[rdi],dx
 1006f7f:	add    BYTE PTR [rcx+0x0],ah
 1006f82:	je     0x1006f84
 1006f84:	imul   eax,DWORD PTR [rax],0x6e006f
 1006f8a:	and    BYTE PTR [rax],al
 1006f8c:	push   0x73006100
 1006f91:	add    BYTE PTR [rax],ah
 1006f93:	add    BYTE PTR [rdx+0x0],ah
 1006f96:	add    BYTE PTR gs:[rbp+0x0],ah
 1006f9a:	outs   dx,BYTE PTR ds:[rsi]
 1006f9b:	add    BYTE PTR [rax],ah
 1006f9d:	add    BYTE PTR [rbx+0x0],dh
 1006fa0:	jne    0x1006fa2
 1006fa2:	(bad)  
 1006fa3:	add    BYTE PTR [rbp+0x0],ch
 1006fa6:	imul   eax,DWORD PTR [rax],0x740074
 1006fac:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1006fb1:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1006fb5:	add    BYTE PTR [rax],ah
 1006fb7:	add    BYTE PTR [rdi+0x0],dl
 1006fba:	(bad)  
 1006fbb:	add    BYTE PTR [rax+rax*1+0x73],dh
 1006fbf:	add    BYTE PTR [rdi+0x0],ch
 1006fc2:	outs   dx,BYTE PTR ds:[rsi]
 1006fc3:	add    BYTE PTR [rax],ah
 1006fc5:	add    BYTE PTR [rbp+0x0],ah
 1006fc8:	jb     0x1006fca
 1006fca:	jb     0x1006fcc
 1006fcc:	outs   dx,DWORD PTR ds:[rsi]
 1006fcd:	add    BYTE PTR [rdx+0x0],dh
 1006fd0:	and    BYTE PTR [rax],al
 1006fd2:	jb     0x1006fd4
 1006fd4:	add    BYTE PTR gs:[rax+0x0],dh
 1006fd8:	outs   dx,DWORD PTR ds:[rsi]
 1006fd9:	add    BYTE PTR [rdx+0x0],dh
 1006fdc:	je     0x1006fde
 1006fde:	imul   eax,DWORD PTR [rax],0x67006e
 1006fe4:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x10079eb
 1006feb:	add    BYTE PTR [rax],al
 1006fed:	add    BYTE PTR [rax],al
 1006fef:	add    BYTE PTR [rbp+0x0],al
 1006ff2:	jb     0x1006ff4
 1006ff4:	jb     0x1006ff6
 1006ff6:	outs   dx,DWORD PTR ds:[rsi]
 1006ff7:	add    BYTE PTR [rdx+0x0],dh
 1006ffa:	and    BYTE PTR [rax],al
 1006ffc:	sub    eax,0x73002000
 1007001:	add    BYTE PTR [rdi+0x0],ch
 1007004:	ins    DWORD PTR es:[rdi],dx
 1007005:	add    BYTE PTR [rbp+0x0],ah
 1007008:	and    BYTE PTR [rax],al
 100700a:	outs   dx,DWORD PTR ds:[rsi]
 100700b:	add    BYTE PTR [rsi+0x0],ah
 100700e:	and    BYTE PTR [rax],al
 1007010:	je     0x1007012
 1007012:	push   0x20006500
 1007017:	add    BYTE PTR [rax+rax*1+0x75],ah
 100701b:	add    BYTE PTR [rbp+0x0],ch
 100701e:	jo     0x1007020
 1007020:	and    BYTE PTR [rax],al
 1007022:	data16 add BYTE PTR [rcx+0x0],ch
 1007026:	ins    BYTE PTR es:[rdi],dx
 1007027:	add    BYTE PTR [rbp+0x0],ah
 100702a:	jae    0x100702c
 100702c:	and    BYTE PTR [rax],al
 100702e:	ja     0x1007030
 1007030:	add    BYTE PTR gs:[rdx+0x0],dh
 1007034:	add    BYTE PTR gs:[rax],ah
 1007037:	add    BYTE PTR [rsi+0x0],ch
 100703a:	outs   dx,DWORD PTR ds:[rsi]
 100703b:	add    BYTE PTR [rax+rax*1+0x20],dh
 100703f:	add    BYTE PTR [rdi+0x0],ah
 1007042:	add    BYTE PTR gs:[rsi+0x0],ch
 1007046:	add    BYTE PTR gs:[rdx+0x0],dh
 100704a:	(bad)  
 100704b:	add    BYTE PTR [rax+rax*1+0x65],dh
 100704f:	add    BYTE PTR [rax+rax*1+0x20],ah
 1007053:	add    BYTE PTR [rdi+0x0],ch
 1007056:	outs   dx,BYTE PTR ds:[rsi]
 1007057:	add    BYTE PTR [rax],ah
 1007059:	add    BYTE PTR [rdx+0x0],dh
 100705c:	add    BYTE PTR gs:[rbp+0x0],ch
 1007060:	outs   dx,DWORD PTR ds:[rsi]
 1007061:	add    BYTE PTR [rax+rax*1+0x65],dh
 1007065:	add    BYTE PTR [rax],ah
 1007067:	add    BYTE PTR [rsi+0x0],ch
 100706a:	outs   dx,DWORD PTR ds:[rsi]
 100706b:	add    BYTE PTR [rax+rax*1+0x65],ah
 100706f:	add    BYTE PTR [rbx+0x0],dh
 1007072:	add    BYTE PTR cs:[rip+0xa00],cl        # 0x1007a79
 1007079:	add    BYTE PTR [rax],al
 100707b:	add    BYTE PTR [rax],al
 100707d:	add    BYTE PTR [rax],al
 100707f:	add    al,al
 1007081:	mov    al,0x1
 1007083:	add    DWORD PTR [rax],eax
 1007085:	add    BYTE PTR [rax],al
 1007087:	add    BYTE PTR [rax-0x4f],ah
 100708a:	add    DWORD PTR [rcx],eax
 100708c:	add    BYTE PTR [rax],al
 100708e:	add    BYTE PTR [rax],al
 1007090:	xor    BYTE PTR [rcx+0x101],0x0
 1007097:	add    BYTE PTR [rax],al
 1007099:	(bad)
 100709d:	add    BYTE PTR [rax],al
 100709f:	add    BYTE PTR [rax-0x51],dl
 10070a2:	add    DWORD PTR [rcx],eax
 10070a4:	add    BYTE PTR [rax],al
 10070a6:	add    BYTE PTR [rax],al
 10070a8:	xor    BYTE PTR [rdi+0x101],ch
 10070ae:	add    BYTE PTR [rax],al
 10070b0:	jo     0x1007060
 10070b2:	add    DWORD PTR [rcx],eax
 10070b4:	add    BYTE PTR [rax],al
 10070b6:	add    BYTE PTR [rax],al
 10070b8:	movabs al,ds:0xc0000000000101b2
 10070c1:	scas   eax,DWORD PTR es:[rdi]
 10070c2:	add    DWORD PTR [rcx],eax
 10070c4:	add    BYTE PTR [rax],al
 10070c6:	add    BYTE PTR [rax],al
 10070c8:	push   rax
 10070c9:	scas   al,BYTE PTR es:[rdi]
 10070ca:	add    DWORD PTR [rcx],eax
 10070cc:	add    BYTE PTR [rax],al
 10070ce:	add    BYTE PTR [rax],al
 10070d0:	mov    al,0xba
 10070d2:	add    DWORD PTR [rcx],eax
 10070d4:	add    BYTE PTR [rax],al
 10070d6:	add    BYTE PTR [rax],al
 10070d8:	mov    al,0xbb
 10070da:	add    DWORD PTR [rcx],eax
 10070dc:	add    BYTE PTR [rax],al
 10070de:	add    BYTE PTR [rax],al
 10070e0:	sub    BYTE PTR [rsi+0x101],0x0
 10070e7:	add    BYTE PTR [rax],al
 10070e9:	scas   eax,DWORD PTR es:[rdi]
 10070ea:	add    DWORD PTR [rcx],eax
 10070ec:	add    BYTE PTR [rax],al
 10070ee:	add    BYTE PTR [rax],al
 10070f0:	mov    al,0xaf
 10070f2:	add    DWORD PTR [rcx],eax
 10070f4:	add    BYTE PTR [rax],al
 10070f6:	add    BYTE PTR [rax],al
 10070f8:	movabs al,ds:0x20000000000101af
 1007101:	mov    al,0x1
 1007103:	add    DWORD PTR [rax],eax
 1007105:	add    BYTE PTR [rax],al
 1007107:	add    BYTE PTR [rax],dh
 1007109:	mov    al,0x1
 100710b:	add    DWORD PTR [rax],eax
 100710d:	add    BYTE PTR [rax],al
 100710f:	add    BYTE PTR [rax],dl
 1007111:	mov    al,0x1
 1007113:	add    DWORD PTR [rax],eax
 1007115:	add    BYTE PTR [rax],al
 1007117:	add    al,ah
 1007119:	scas   eax,DWORD PTR es:[rdi]
 100711a:	add    DWORD PTR [rcx],eax
 100711c:	add    BYTE PTR [rax],al
 100711e:	add    BYTE PTR [rax],al
 1007120:	lock scas eax,DWORD PTR es:[rdi]
 1007122:	add    DWORD PTR [rcx],eax
 1007124:	add    BYTE PTR [rax],al
 1007126:	add    BYTE PTR [rax],al
 1007128:	add    BYTE PTR [rax+0x101],dh
 100712e:	add    BYTE PTR [rax],al
 1007130:	lock scas al,BYTE PTR es:[rdi]
 1007132:	add    DWORD PTR [rcx],eax
 1007134:	add    BYTE PTR [rax],al
 1007136:	add    BYTE PTR [rax],al
 1007138:	rol    cl,1
 100713a:	add    DWORD PTR [rcx],eax
 100713c:	add    BYTE PTR [rax],al
 100713e:	add    BYTE PTR [rax],al
 1007140:	xor    BYTE PTR [rax+0x101],0x0
 1007147:	add    BYTE PTR [rax-0x50],dh
 100714a:	add    DWORD PTR [rcx],eax
 100714c:	add    BYTE PTR [rax],al
 100714e:	add    BYTE PTR [rax],al
 1007150:	push   rax
 1007151:	mov    al,0x1
 1007153:	add    DWORD PTR [rax],eax
 1007155:	add    BYTE PTR [rax],al
 1007157:	add    BYTE PTR [rax-0x50],ah
 100715a:	add    DWORD PTR [rcx],eax
 100715c:	add    BYTE PTR [rax],al
 100715e:	add    BYTE PTR [rax],al
 1007160:	adc    BYTE PTR [rdi+0x101],ch
 1007166:	add    BYTE PTR [rax],al
 1007168:	xor    BYTE PTR [rbp+0x101],0x0
 100716f:	add    BYTE PTR [rax+0x101bc],dh
 1007175:	add    BYTE PTR [rax],al
 1007177:	add    BYTE PTR [rip+0x73006c00],ah        # 0x7400dd7d
 100717d:	add    BYTE PTR [rax],ah
 100717f:	add    BYTE PTR [rip+0x64006c00],ah        # 0x6500dd85
 1007185:	add    BYTE PTR [rax],ah
 1007187:	add    BYTE PTR [rax],dh
 1007189:	add    BYTE PTR [rax],ah
 100718b:	add    BYTE PTR [rax],dh
 100718d:	add    BYTE PTR [rdx],bh
 100718f:	add    BYTE PTR [rax],dh
 1007191:	add    BYTE PTR [rax],ah
 1007193:	add    BYTE PTR [rip+0x7000],ah        # 0x100e199
 1007199:	add    BYTE PTR [rax],al
 100719b:	add    BYTE PTR [rax],al
 100719d:	add    BYTE PTR [rax],al
 100719f:	add    BYTE PTR [rax+rax*1+0x69],dl
 10071a3:	add    BYTE PTR [rbp+0x0],ch
 10071a6:	add    BYTE PTR gs:[rdi+0x0],ch
 10071aa:	jne    0x10071ac
 10071ac:	je     0x10071ae
 10071ae:	and    BYTE PTR [rax],al
 10071b0:	ja     0x10071b2
 10071b2:	(bad)  
 10071b3:	add    BYTE PTR [rcx+0x0],ch
 10071b6:	je     0x10071b8
 10071b8:	imul   eax,DWORD PTR [rax],0x67006e
 10071be:	and    BYTE PTR [rax],al
 10071c0:	data16 add BYTE PTR [rdi+0x0],ch
 10071c4:	jb     0x10071c6
 10071c6:	and    BYTE PTR [rax],al
 10071c8:	add    BYTE PTR gs:[rax+0x0],bh
 10071cc:	je     0x10071ce
 10071ce:	add    BYTE PTR gs:[rdx+0x0],dh
 10071d2:	outs   dx,BYTE PTR ds:[rsi]
 10071d3:	add    BYTE PTR [rcx+0x0],ah
 10071d6:	ins    BYTE PTR es:[rdi],dx
 10071d7:	add    BYTE PTR [rax],ah
 10071d9:	add    BYTE PTR [rax+rax*1+0x75],ah
 10071dd:	add    BYTE PTR [rbp+0x0],ch
 10071e0:	jo     0x10071e2
 10071e2:	and    BYTE PTR [rax],al
 10071e4:	jo     0x10071e6
 10071e6:	jb     0x10071e8
 10071e8:	outs   dx,DWORD PTR ds:[rsi]
 10071e9:	add    BYTE PTR [rbx+0x0],ah
 10071ec:	add    BYTE PTR gs:[rbx+0x0],dh
 10071f0:	jae    0x10071f2
 10071f2:	and    BYTE PTR [rax],al
 10071f4:	and    eax,0x2e006400
 10071f9:	add    BYTE PTR [rip+0xa00],cl        # 0x1007bff
 10071ff:	add    BYTE PTR [rbp+0x0],al
 1007202:	js     0x1007204
 1007204:	je     0x1007206
 1007206:	add    BYTE PTR gs:[rdx+0x0],dh
 100720a:	outs   dx,BYTE PTR ds:[rsi]
 100720b:	add    BYTE PTR [rcx+0x0],ah
 100720e:	ins    BYTE PTR es:[rdi],dx
 100720f:	add    BYTE PTR [rax],ah
 1007211:	add    BYTE PTR [rax+rax*1+0x75],ah
 1007215:	add    BYTE PTR [rbp+0x0],ch
 1007218:	jo     0x100721a
 100721a:	and    BYTE PTR [rax],al
 100721c:	jo     0x100721e
 100721e:	jb     0x1007220
 1007220:	outs   dx,DWORD PTR ds:[rsi]
 1007221:	add    BYTE PTR [rbx+0x0],ah
 1007224:	add    BYTE PTR gs:[rbx+0x0],dh
 1007228:	jae    0x100722a
 100722a:	and    BYTE PTR [rax],al
 100722c:	outs   dx,BYTE PTR ds:[rsi]
 100722d:	add    BYTE PTR [rdi+0x0],ch
 1007230:	je     0x1007232
 1007232:	and    BYTE PTR [rax],al
 1007234:	add    BYTE PTR gs:[rax+0x0],bh
 1007238:	add    BYTE PTR gs:[rbx+0x0],ah
 100723c:	jne    0x100723e
 100723e:	je     0x1007240
 1007240:	add    BYTE PTR gs:[rax+rax*1+0x2e],ah
 1007245:	add    BYTE PTR [rip+0xa00],cl        # 0x1007c4b
 100724b:	add    BYTE PTR [rdx+0x53],dl
 100724e:	rex.R push rbx
 1007250:	mov    edi,0x8a6b366e
 1007255:	(bad)  
 1007256:	(bad)  
 1007257:	rex.XB cwde 
 1007259:	cmp    ecx,ebp
 100725b:	and    al,0x68
 100725d:	cmp    eax,0x1ca2b
 1007262:	add    BYTE PTR [rax],al
 1007264:	imul   esi,DWORD PTR fs:[rbx+0x74],0x2e626972
 100726c:	jo     0x10072d2
 100726e:	(bad)  
	...
 10072b7:	add    BYTE PTR [rcx],al
	...
 10072c1:	add    BYTE PTR [rax],al
 10072c3:	add    BYTE PTR [rax+0x52],ch
 10072c6:	add    al,BYTE PTR [rax]
 10072c8:	loopne 0x100733c
 10072ca:	add    BYTE PTR [rax],al
 10072cc:	mov    eax,0x72
	...
 10072e5:	add    BYTE PTR [rax],al
 10072e7:	add    BYTE PTR [rcx],al
 10072e9:	add    BYTE PTR [rax],al
 10072eb:	add    al,bh
 10072ed:	jb     0x10072ef
	...
 10072f7:	add    BYTE PTR [rax],cl
 10072f9:	jae    0x10072fb
	...
 1007307:	add    BYTE PTR [rax+0x52],ch
 100730a:	add    al,BYTE PTR [rax]
	...
 1007314:	(bad)  
 1007315:	(bad)  
 1007316:	(bad)  
 1007317:	inc    DWORD PTR [rax]
 1007319:	add    BYTE PTR [rax],al
 100731b:	add    BYTE PTR [rax+0x0],al
 100731e:	add    BYTE PTR [rax],al
 1007320:	loopne 0x1007394
	...
 100735e:	add    BYTE PTR [rax],al
 1007360:	ret    0x0
 1007363:	int3   
 1007364:	int3   
 1007365:	int3   
 1007366:	int3   
 1007367:	int3   
 1007368:	int3   
 1007369:	int3   
 100736a:	int3   
 100736b:	int3   
 100736c:	int3   
 100736d:	int3   
 100736e:	int3   
 100736f:	int3   
 1007370:	xor    eax,eax
 1007372:	ret    
 1007373:	int3   
 1007374:	int3   
 1007375:	int3   
 1007376:	int3   
 1007377:	int3   
 1007378:	int3   
 1007379:	int3   
 100737a:	int3   
 100737b:	int3   
 100737c:	int3   
 100737d:	int3   
 100737e:	int3   
 100737f:	int3   
 1007380:	xor    eax,eax
 1007382:	ret    
 1007383:	int3   
 1007384:	int3   
 1007385:	int3   
 1007386:	int3   
 1007387:	int3   
 1007388:	int3   
 1007389:	int3   
 100738a:	int3   
 100738b:	int3   
 100738c:	int3   
 100738d:	int3   
 100738e:	int3   
 100738f:	int3   
 1007390:	xor    r9d,r9d
 1007393:	mov    r8d,ecx
 1007396:	lea    rcx,[rip+0x1dfc3]        # 0x1025360
 100739d:	lea    edx,[r9+0x64]
 10073a1:	jmp    0x1007a80
 10073a6:	int3   
 10073a7:	int3   
 10073a8:	int3   
 10073a9:	int3   
 10073aa:	int3   
 10073ab:	int3   
 10073ac:	int3   
 10073ad:	int3   
 10073ae:	int3   
 10073af:	int3   
 10073b0:	mov    QWORD PTR [rsp+0x18],rbp
 10073b5:	mov    QWORD PTR [rsp+0x20],rdi
 10073ba:	push   r14
 10073bc:	sub    rsp,0x20
 10073c0:	mov    rdi,r8
 10073c3:	mov    rbp,rdx
 10073c6:	mov    r14,rcx
 10073c9:	test   r8,r8
 10073cc:	jne    0x10073e4
 10073ce:	mov    eax,0x80004003
 10073d3:	mov    rbp,QWORD PTR [rsp+0x40]
 10073d8:	mov    rdi,QWORD PTR [rsp+0x48]
 10073dd:	add    rsp,0x20
 10073e1:	pop    r14
 10073e3:	ret    
 10073e4:	mov    QWORD PTR [rsp+0x30],rbx
 10073e9:	mov    ecx,0x18
 10073ee:	mov    QWORD PTR [rsp+0x38],rsi
 10073f3:	mov    esi,0x8007000e
 10073f8:	mov    QWORD PTR [r8],0x0
 10073ff:	call   0x100bce4
 1007404:	mov    rbx,rax
 1007407:	test   rax,rax
 100740a:	je     0x1007441
 100740c:	mov    DWORD PTR [rax+0x8],0x0
 1007413:	lea    rax,[rip+0xffffffffffffa4e6]        # 0x1001900
 100741a:	mov    r8,rdi
 100741d:	mov    QWORD PTR [rbx],rax
 1007420:	mov    rdx,rbp
 1007423:	mov    rcx,rbx
 1007426:	mov    QWORD PTR [rbx+0x10],r14
 100742a:	call   QWORD PTR [rax]
 100742c:	mov    esi,eax
 100742e:	test   eax,eax
 1007430:	je     0x1007441
 1007432:	mov    r8,QWORD PTR [rbx]
 1007435:	mov    edx,0x1
 100743a:	mov    rcx,rbx
 100743d:	call   QWORD PTR [r8+0x28]
 1007441:	mov    rbx,QWORD PTR [rsp+0x30]
 1007446:	mov    rbp,QWORD PTR [rsp+0x40]
 100744b:	mov    rdi,QWORD PTR [rsp+0x48]
 1007450:	mov    eax,esi
 1007452:	mov    rsi,QWORD PTR [rsp+0x38]
 1007457:	add    rsp,0x20
 100745b:	pop    r14
 100745d:	ret    
 100745e:	int3   
 100745f:	int3   
 1007460:	int3   
 1007461:	int3   
 1007462:	int3   
 1007463:	int3   
 1007464:	int3   
 1007465:	int3   
 1007466:	int3   
 1007467:	int3   
 1007468:	int3   
 1007469:	int3   
 100746a:	int3   
 100746b:	int3   
 100746c:	int3   
 100746d:	int3   
 100746e:	int3   
 100746f:	int3   
 1007470:	test   rcx,rcx
 1007473:	jne    0x100747a
 1007475:	jmp    0x1009bf0
 100747a:	test   r8,r8
 100747d:	jne    0x1007485
 100747f:	mov    eax,0x80004003
 1007484:	ret    
 1007485:	mov    QWORD PTR [r8],0x0
 100748c:	mov    eax,0x80040110
 1007491:	ret    
 1007492:	int3   
 1007493:	int3   
 1007494:	int3   
 1007495:	int3   
 1007496:	int3   
 1007497:	int3   
 1007498:	int3   
 1007499:	int3   
 100749a:	int3   
 100749b:	int3   
 100749c:	int3   
 100749d:	int3   
 100749e:	int3   
 100749f:	int3   
 10074a0:	rex push rbp
 10074a2:	sub    rsp,0x30
 10074a6:	lea    rbp,[rsp+0x20]
 10074ab:	mov    QWORD PTR [rbp+0x20],rbx
 10074af:	mov    rax,QWORD PTR [rip+0x1d1aa]        # 0x1024660
 10074b6:	xor    rax,rbp
 10074b9:	mov    QWORD PTR [rbp+0x8],rax
 10074bd:	mov    bl,0x1
 10074bf:	or     rax,0xffffffffffffffff
 10074c3:	sub    rax,rcx
 10074c6:	cmp    rax,0x4000
 10074cc:	jb     0x10074f9
 10074ce:	lea    rax,[rcx+0x4000]
 10074d5:	lea    rcx,[rax+0xf]
 10074d9:	cmp    rcx,rax
 10074dc:	ja     0x10074e8
 10074de:	movabs rcx,0xffffffffffffff0
 10074e8:	and    rcx,0xfffffffffffffff0
 10074ec:	mov    rax,rcx
 10074ef:	call   0x100c070
 10074f4:	sub    rsp,rcx
 10074f7:	jmp    0x10074fe
 10074f9:	xor    bl,bl
 10074fb:	mov    BYTE PTR [rbp+0x0],bl
 10074fe:	jmp    0x100750c
 1007500:	xor    bl,bl
 1007502:	mov    BYTE PTR [rbp+0x0],bl
 1007505:	call   QWORD PTR [rip+0xffffffffffff9f3d]        # 0x1001448
 100750b:	nop
 100750c:	movzx  eax,bl
 100750f:	mov    rcx,QWORD PTR [rbp+0x8]
 1007513:	xor    rcx,rbp
 1007516:	call   0x100c0d0
 100751b:	mov    rbx,QWORD PTR [rbp+0x20]
 100751f:	lea    rsp,[rbp+0x10]
 1007523:	pop    rbp
 1007524:	ret    
 1007525:	int3   
 1007526:	int3   
 1007527:	int3   
 1007528:	int3   
 1007529:	int3   
 100752a:	int3   
 100752b:	int3   
 100752c:	int3   
 100752d:	int3   
 100752e:	int3   
 100752f:	int3   
 1007530:	sub    rsp,0x28
 1007534:	mov    edx,0xc000001d
 1007539:	cmp    ecx,0x8007000e
 100753f:	mov    eax,0xc0000017
 1007544:	cmovne eax,edx
 1007547:	xor    r9d,r9d
 100754a:	xor    r8d,r8d
 100754d:	lea    edx,[r9+0x1]
 1007551:	mov    ecx,eax
 1007553:	call   QWORD PTR [rip+0xffffffffffff9d27]        # 0x1001280
 1007559:	int3   
 100755a:	int3   
 100755b:	int3   
 100755c:	int3   
 100755d:	int3   
 100755e:	int3   
 100755f:	int3   
 1007560:	mov    QWORD PTR [rsp+0x18],rbp
 1007565:	mov    QWORD PTR [rsp+0x20],rsi
 100756a:	push   r14
 100756c:	sub    rsp,0x20
 1007570:	mov    rbp,r8
 1007573:	mov    r14d,edx
 1007576:	mov    rsi,rcx
 1007579:	test   rcx,rcx
 100757c:	jne    0x1007594
 100757e:	mov    eax,0x80070057
 1007583:	mov    rbp,QWORD PTR [rsp+0x40]
 1007588:	mov    rsi,QWORD PTR [rsp+0x48]
 100758d:	add    rsp,0x20
 1007591:	pop    r14
 1007593:	ret    
 1007594:	mov    QWORD PTR [rsp+0x30],rbx
 1007599:	mov    rbx,QWORD PTR [rcx+0x10]
 100759d:	xor    edx,edx
 100759f:	mov    QWORD PTR [rsp+0x38],rdi
 10075a4:	cmp    rbx,QWORD PTR [rcx+0x18]
 10075a8:	jae    0x1007617
 10075aa:	nop    WORD PTR [rax+rax*1+0x0]
 10075b0:	mov    rdi,QWORD PTR [rbx]
 10075b3:	test   rdi,rdi
 10075b6:	je     0x1007609
 10075b8:	test   rbp,rbp
 10075bb:	je     0x10075e0
 10075bd:	mov    rcx,QWORD PTR [rdi]
 10075c0:	mov    r8,QWORD PTR [rbp+0x0]
 10075c4:	cmp    r8,QWORD PTR [rcx]
 10075c7:	jne    0x10075d7
 10075c9:	mov    r8,QWORD PTR [rbp+0x8]
 10075cd:	cmp    r8,QWORD PTR [rcx+0x8]
 10075d1:	jne    0x10075d7
 10075d3:	xor    eax,eax
 10075d5:	jmp    0x10075dc
 10075d7:	sbb    eax,eax
 10075d9:	sbb    eax,0xffffffff
 10075dc:	test   eax,eax
 10075de:	jne    0x1007609
 10075e0:	mov    ecx,0x1
 10075e5:	call   QWORD PTR [rdi+0x8]
 10075e8:	mov    edx,eax
 10075ea:	test   eax,eax
 10075ec:	js     0x1007629
 10075ee:	call   QWORD PTR [rdi+0x38]
 10075f1:	mov    rcx,QWORD PTR [rdi]
 10075f4:	mov    r8d,0x1
 10075fa:	mov    rdx,rax
 10075fd:	call   QWORD PTR [rip+0xffffffffffff9a65]        # 0x1001068
 1007603:	mov    edx,eax
 1007605:	test   eax,eax
 1007607:	js     0x1007629
 1007609:	add    rbx,0x8
 100760d:	cmp    rbx,QWORD PTR [rsi+0x18]
 1007611:	jb     0x10075b0
 1007613:	test   edx,edx
 1007615:	js     0x1007629
 1007617:	test   r14d,r14d
 100761a:	je     0x1007629
 100761c:	mov    rcx,QWORD PTR [rsi+0x8]
 1007620:	xor    edx,edx
 1007622:	call   0x1007740
 1007627:	mov    edx,eax
 1007629:	mov    rdi,QWORD PTR [rsp+0x38]
 100762e:	mov    rbx,QWORD PTR [rsp+0x30]
 1007633:	mov    rbp,QWORD PTR [rsp+0x40]
 1007638:	mov    rsi,QWORD PTR [rsp+0x48]
 100763d:	mov    eax,edx
 100763f:	add    rsp,0x20
 1007643:	pop    r14
 1007645:	ret    
 1007646:	int3   
 1007647:	int3   
 1007648:	int3   
 1007649:	int3   
 100764a:	int3   
 100764b:	int3   
 100764c:	int3   
 100764d:	int3   
 100764e:	int3   
 100764f:	int3   
 1007650:	mov    QWORD PTR [rsp+0x18],rbp
 1007655:	mov    QWORD PTR [rsp+0x20],rsi
 100765a:	push   r14
 100765c:	sub    rsp,0x20
 1007660:	mov    rbp,r8
 1007663:	mov    r14d,edx
 1007666:	mov    rsi,rcx
 1007669:	test   rcx,rcx
 100766c:	jne    0x1007684
 100766e:	mov    eax,0x80070057
 1007673:	mov    rbp,QWORD PTR [rsp+0x40]
 1007678:	mov    rsi,QWORD PTR [rsp+0x48]
 100767d:	add    rsp,0x20
 1007681:	pop    r14
 1007683:	ret    
 1007684:	mov    QWORD PTR [rsp+0x30],rbx
 1007689:	mov    rbx,QWORD PTR [rcx+0x10]
 100768d:	xor    edx,edx
 100768f:	mov    QWORD PTR [rsp+0x38],rdi
 1007694:	cmp    rbx,QWORD PTR [rcx+0x18]
 1007698:	jae    0x1007701
 100769a:	nop    WORD PTR [rax+rax*1+0x0]
 10076a0:	mov    rdi,QWORD PTR [rbx]
 10076a3:	test   rdi,rdi
 10076a6:	je     0x10076f3
 10076a8:	test   rbp,rbp
 10076ab:	je     0x10076d0
 10076ad:	mov    rcx,QWORD PTR [rdi]
 10076b0:	mov    r8,QWORD PTR [rbp+0x0]
 10076b4:	cmp    r8,QWORD PTR [rcx]
 10076b7:	jne    0x10076c7
 10076b9:	mov    r8,QWORD PTR [rbp+0x8]
 10076bd:	cmp    r8,QWORD PTR [rcx+0x8]
 10076c1:	jne    0x10076c7
 10076c3:	xor    eax,eax
 10076c5:	jmp    0x10076cc
 10076c7:	sbb    eax,eax
 10076c9:	sbb    eax,0xffffffff
 10076cc:	test   eax,eax
 10076ce:	jne    0x10076f3
 10076d0:	call   QWORD PTR [rdi+0x38]
 10076d3:	mov    rcx,QWORD PTR [rdi]
 10076d6:	xor    r8d,r8d
 10076d9:	mov    rdx,rax
 10076dc:	call   QWORD PTR [rip+0xffffffffffff9986]        # 0x1001068
 10076e2:	mov    edx,eax
 10076e4:	test   eax,eax
 10076e6:	js     0x1007713
 10076e8:	xor    ecx,ecx
 10076ea:	call   QWORD PTR [rdi+0x8]
 10076ed:	mov    edx,eax
 10076ef:	test   eax,eax
 10076f1:	js     0x1007713
 10076f3:	add    rbx,0x8
 10076f7:	cmp    rbx,QWORD PTR [rsi+0x18]
 10076fb:	jb     0x10076a0
 10076fd:	test   edx,edx
 10076ff:	js     0x1007713
 1007701:	test   r14d,r14d
 1007704:	je     0x1007713
 1007706:	mov    rcx,QWORD PTR [rsi+0x8]
 100770a:	xor    edx,edx
 100770c:	call   0x1007960
 1007711:	mov    edx,eax
 1007713:	mov    rdi,QWORD PTR [rsp+0x38]
 1007718:	mov    rbx,QWORD PTR [rsp+0x30]
 100771d:	mov    rbp,QWORD PTR [rsp+0x40]
 1007722:	mov    rsi,QWORD PTR [rsp+0x48]
 1007727:	mov    eax,edx
 1007729:	add    rsp,0x20
 100772d:	pop    r14
 100772f:	ret    
 1007730:	int3   
 1007731:	int3   
 1007732:	int3   
 1007733:	int3   
 1007734:	int3   
 1007735:	int3   
 1007736:	int3   
 1007737:	int3   
 1007738:	int3   
 1007739:	int3   
 100773a:	int3   
 100773b:	int3   
 100773c:	int3   
 100773d:	int3   
 100773e:	int3   
 100773f:	int3   
 1007740:	rex push rbp
 1007742:	push   rbx
 1007743:	push   rsi
 1007744:	lea    rbp,[rsp-0x170]
 100774c:	sub    rsp,0x270
 1007753:	mov    rax,QWORD PTR [rip+0x1cf06]        # 0x1024660
 100775a:	xor    rax,rsp
 100775d:	mov    QWORD PTR [rbp+0x160],rax
 1007764:	xor    esi,esi
 1007766:	lea    r9,[rsp+0x38]
 100776b:	lea    r8,[rsp+0x48]
 1007770:	mov    QWORD PTR [rsp+0x48],rsi
 1007775:	mov    QWORD PTR [rsp+0x38],rsi
 100777a:	call   QWORD PTR [rip+0xffffffffffff98d0]        # 0x1001050
 1007780:	mov    ebx,eax
 1007782:	test   eax,eax
 1007784:	js     0x100791f
 100778a:	mov    rcx,QWORD PTR [rsp+0x38]
 100778f:	lea    rdx,[rsp+0x40]
 1007794:	mov    QWORD PTR [rsp+0x40],rsi
 1007799:	mov    rax,QWORD PTR [rcx]
 100779c:	mov    QWORD PTR [rsp+0x28],rdx
 10077a1:	xor    r9d,r9d
 10077a4:	xor    r8d,r8d
 10077a7:	or     edx,0xffffffff
 10077aa:	mov    QWORD PTR [rsp+0x20],rsi
 10077af:	call   QWORD PTR [rax+0x48]
 10077b2:	test   eax,eax
 10077b4:	js     0x1007893
 10077ba:	mov    rcx,QWORD PTR [rsp+0x40]
 10077bf:	test   rcx,rcx
 10077c2:	je     0x1007893
 10077c8:	call   QWORD PTR [rip+0xffffffffffff9d9a]        # 0x1001568
 10077ce:	mov    r8,QWORD PTR [rsp+0x40]
 10077d3:	lea    rcx,[rsp+0x50]
 10077d8:	mov    r9d,eax
 10077db:	mov    edx,0x104
 10077e0:	call   QWORD PTR [rip+0xffffffffffff9c42]        # 0x1001428
 10077e6:	test   eax,eax
 10077e8:	je     0x100781f
 10077ea:	cmp    eax,0xc
 10077ed:	je     0x1007814
 10077ef:	cmp    eax,0x16
 10077f2:	je     0x1007809
 10077f4:	cmp    eax,0x22
 10077f7:	je     0x1007809
 10077f9:	cmp    eax,0x50
 10077fc:	je     0x100781f
 10077fe:	mov    ecx,0x80004005
 1007803:	call   0x1007530
 1007808:	int3   
 1007809:	mov    ecx,0x80070057
 100780e:	call   0x1007530
 1007813:	int3   
 1007814:	mov    ecx,0x8007000e
 1007819:	call   0x1007530
 100781e:	int3   
 100781f:	mov    QWORD PTR [rsp+0x2a0],rdi
 1007827:	mov    WORD PTR [rbp+0x156],si
 100782e:	lea    rbx,[rsp+0x50]
 1007833:	lea    rdi,[rsp+0x50]
 1007838:	cmp    WORD PTR [rsp+0x50],si
 100783d:	je     0x1007869
 100783f:	nop
 1007840:	mov    rcx,rbx
 1007843:	call   QWORD PTR [rip+0xffffffffffff9d67]        # 0x10015b0
 1007849:	movzx  ecx,WORD PTR [rbx]
 100784c:	cmp    cx,0x5c
 1007850:	je     0x100785e
 1007852:	cmp    cx,0x2f
 1007856:	je     0x100785e
 1007858:	cmp    cx,0x3a
 100785c:	jne    0x1007861
 100785e:	mov    rdi,rax
 1007861:	mov    rbx,rax
 1007864:	cmp    WORD PTR [rax],si
 1007867:	jne    0x1007840
 1007869:	lea    rax,[rsp+0x50]
 100786e:	sub    rdi,rax
 1007871:	sar    rdi,1
 1007874:	mov    eax,edi
 1007876:	mov    rdi,QWORD PTR [rsp+0x2a0]
 100787e:	add    rax,rax
 1007881:	cmp    rax,0x208
 1007887:	jae    0x10078c6
 1007889:	mov    WORD PTR [rsp+rax*1+0x50],si
 100788e:	lea    rsi,[rsp+0x50]
 1007893:	lea    rcx,[rsp+0x30]
 1007898:	mov    BYTE PTR [rsp+0x30],0x0
 100789d:	call   QWORD PTR [rip+0xffffffffffff97b5]        # 0x1001058
 10078a3:	mov    ebx,eax
 10078a5:	test   eax,eax
 10078a7:	jns    0x10078ce
 10078a9:	mov    rcx,QWORD PTR [rsp+0x40]
 10078ae:	call   QWORD PTR [rip+0xffffffffffff9cbc]        # 0x1001570
 10078b4:	mov    rcx,QWORD PTR [rsp+0x38]
 10078b9:	test   rcx,rcx
 10078bc:	je     0x100792f
 10078be:	mov    rdx,QWORD PTR [rcx]
 10078c1:	call   QWORD PTR [rdx+0x10]
 10078c4:	jmp    0x100792f
 10078c6:	xor    ecx,ecx
 10078c8:	call   0x100bdc8
 10078cd:	int3   
 10078ce:	cmp    BYTE PTR [rsp+0x30],0x1
 10078d3:	jne    0x10078fc
 10078d5:	lea    rcx,[rip+0xffffffffffff9e04]        # 0x10016e0
 10078dc:	call   QWORD PTR [rip+0xffffffffffff988e]        # 0x1001170
 10078e2:	test   rax,rax
 10078e5:	je     0x10078fc
 10078e7:	lea    rdx,[rip+0xffffffffffff9e32]        # 0x1001720
 10078ee:	mov    rcx,rax
 10078f1:	call   QWORD PTR [rip+0xffffffffffff9999]        # 0x1001290
 10078f7:	test   rax,rax
 10078fa:	jne    0x1007903
 10078fc:	mov    rax,QWORD PTR [rip+0xffffffffffff9c4d]        # 0x1001550
 1007903:	mov    rdx,QWORD PTR [rsp+0x48]
 1007908:	mov    rcx,QWORD PTR [rsp+0x38]
 100790d:	mov    r8,rsi
 1007910:	call   rax
 1007912:	mov    rcx,QWORD PTR [rsp+0x40]
 1007917:	mov    ebx,eax
 1007919:	call   QWORD PTR [rip+0xffffffffffff9c51]        # 0x1001570
 100791f:	mov    rcx,QWORD PTR [rsp+0x38]
 1007924:	test   rcx,rcx
 1007927:	je     0x100792f
 1007929:	mov    rax,QWORD PTR [rcx]
 100792c:	call   QWORD PTR [rax+0x10]
 100792f:	mov    rcx,QWORD PTR [rsp+0x48]
 1007934:	call   QWORD PTR [rip+0xffffffffffff9c36]        # 0x1001570
 100793a:	mov    eax,ebx
 100793c:	mov    rcx,QWORD PTR [rbp+0x160]
 1007943:	xor    rcx,rsp
 1007946:	call   0x100c0d0
 100794b:	add    rsp,0x270
 1007952:	pop    rsi
 1007953:	pop    rbx
 1007954:	pop    rbp
 1007955:	ret    
 1007956:	int3   
 1007957:	int3   
 1007958:	int3   
 1007959:	int3   
 100795a:	int3   
 100795b:	int3   
 100795c:	int3   
 100795d:	int3   
 100795e:	int3   
 100795f:	int3   
 1007960:	rex push rbx
 1007962:	sub    rsp,0x40
 1007966:	xor    eax,eax
 1007968:	lea    r9,[rsp+0x68]
 100796d:	lea    r8,[rsp+0x30]
 1007972:	mov    QWORD PTR [rsp+0x30],rax
 1007977:	mov    QWORD PTR [rsp+0x68],rax
 100797c:	call   QWORD PTR [rip+0xffffffffffff96ce]        # 0x1001050
 1007982:	mov    ebx,eax
 1007984:	test   eax,eax
 1007986:	js     0x1007a49
 100798c:	mov    rcx,QWORD PTR [rsp+0x68]
 1007991:	lea    rdx,[rsp+0x38]
 1007996:	mov    rax,QWORD PTR [rcx]
 1007999:	call   QWORD PTR [rax+0x38]
 100799c:	mov    ebx,eax
 100799e:	test   eax,eax
 10079a0:	js     0x1007a49
 10079a6:	lea    rcx,[rsp+0x60]
 10079ab:	mov    BYTE PTR [rsp+0x60],0x0
 10079b0:	call   QWORD PTR [rip+0xffffffffffff96a2]        # 0x1001058
 10079b6:	mov    ebx,eax
 10079b8:	test   eax,eax
 10079ba:	jns    0x10079e3
 10079bc:	mov    rcx,QWORD PTR [rsp+0x68]
 10079c1:	test   rcx,rcx
 10079c4:	je     0x1007a59
 10079ca:	mov    rdx,QWORD PTR [rcx]
 10079cd:	call   QWORD PTR [rdx+0x10]
 10079d0:	mov    rcx,QWORD PTR [rsp+0x30]
 10079d5:	call   QWORD PTR [rip+0xffffffffffff9b95]        # 0x1001570
 10079db:	mov    eax,ebx
 10079dd:	add    rsp,0x40
 10079e1:	pop    rbx
 10079e2:	ret    
 10079e3:	cmp    BYTE PTR [rsp+0x60],0x1
 10079e8:	jne    0x1007a14
 10079ea:	lea    rcx,[rip+0xffffffffffff9cef]        # 0x10016e0
 10079f1:	call   QWORD PTR [rip+0xffffffffffff9779]        # 0x1001170
 10079f7:	test   rax,rax
 10079fa:	je     0x1007a14
 10079fc:	lea    rdx,[rip+0xffffffffffff9cfd]        # 0x1001700
 1007a03:	mov    rcx,rax
 1007a06:	call   QWORD PTR [rip+0xffffffffffff9884]        # 0x1001290
 1007a0c:	mov    r11,rax
 1007a0f:	test   rax,rax
 1007a12:	jne    0x1007a1b
 1007a14:	mov    r11,QWORD PTR [rip+0xffffffffffff9b2d]        # 0x1001548
 1007a1b:	mov    rcx,QWORD PTR [rsp+0x38]
 1007a20:	mov    eax,DWORD PTR [rcx+0x14]
 1007a23:	mov    r9d,DWORD PTR [rcx+0x10]
 1007a27:	movzx  r8d,WORD PTR [rcx+0x1a]
 1007a2c:	movzx  edx,WORD PTR [rcx+0x18]
 1007a30:	mov    DWORD PTR [rsp+0x20],eax
 1007a34:	call   r11
 1007a37:	mov    rcx,QWORD PTR [rsp+0x68]
 1007a3c:	mov    rdx,QWORD PTR [rsp+0x38]
 1007a41:	mov    ebx,eax
 1007a43:	mov    rax,QWORD PTR [rcx]
 1007a46:	call   QWORD PTR [rax+0x60]
 1007a49:	mov    rcx,QWORD PTR [rsp+0x68]
 1007a4e:	test   rcx,rcx
 1007a51:	je     0x1007a59
 1007a53:	mov    rax,QWORD PTR [rcx]
 1007a56:	call   QWORD PTR [rax+0x10]
 1007a59:	mov    rcx,QWORD PTR [rsp+0x30]
 1007a5e:	call   QWORD PTR [rip+0xffffffffffff9b0c]        # 0x1001570
 1007a64:	mov    eax,ebx
 1007a66:	add    rsp,0x40
 1007a6a:	pop    rbx
 1007a6b:	ret    
 1007a6c:	int3   
 1007a6d:	int3   
 1007a6e:	int3   
 1007a6f:	int3   
 1007a70:	int3   
 1007a71:	int3   
 1007a72:	int3   
 1007a73:	int3   
 1007a74:	int3   
 1007a75:	int3   
 1007a76:	int3   
 1007a77:	int3   
 1007a78:	int3   
 1007a79:	int3   
 1007a7a:	int3   
 1007a7b:	int3   
 1007a7c:	int3   
 1007a7d:	int3   
 1007a7e:	int3   
 1007a7f:	int3   
 1007a80:	mov    QWORD PTR [rsp+0x8],rbx
 1007a85:	mov    QWORD PTR [rsp+0x10],rbp
 1007a8a:	mov    QWORD PTR [rsp+0x18],rsi
 1007a8f:	mov    QWORD PTR [rsp+0x20],rdi
 1007a94:	push   r14
 1007a96:	sub    rsp,0x40
 1007a9a:	mov    rsi,rcx
 1007a9d:	lea    rcx,[rsp+0x30]
 1007aa2:	mov    rbx,r9
 1007aa5:	mov    ebp,r8d
 1007aa8:	mov    r14,rdx
 1007aab:	mov    QWORD PTR [rsp+0x30],0x0
 1007ab4:	call   QWORD PTR [rip+0xffffffffffff95de]        # 0x1001098
 1007aba:	mov    edi,eax
 1007abc:	test   eax,eax
 1007abe:	jns    0x1007ad4
 1007ac0:	mov    rcx,QWORD PTR [rsp+0x30]
 1007ac5:	test   rcx,rcx
 1007ac8:	je     0x1007ad0
 1007aca:	mov    rdx,QWORD PTR [rcx]
 1007acd:	call   QWORD PTR [rdx+0x10]
 1007ad0:	mov    eax,edi
 1007ad2:	jmp    0x1007b45
 1007ad4:	test   rbx,rbx
 1007ad7:	je     0x1007afd
 1007ad9:	mov    rdx,QWORD PTR [rbx]
 1007adc:	test   rdx,rdx
 1007adf:	je     0x1007afd
 1007ae1:	mov    rcx,QWORD PTR [rsp+0x30]
 1007ae6:	mov    r8,QWORD PTR [rbx+0x8]
 1007aea:	mov    rax,QWORD PTR [rcx]
 1007aed:	call   QWORD PTR [rax+0x18]
 1007af0:	mov    rdx,QWORD PTR [rbx+0x10]
 1007af4:	add    rbx,0x10
 1007af8:	test   rdx,rdx
 1007afb:	jne    0x1007ae1
 1007afd:	mov    rax,QWORD PTR [rsi]
 1007b00:	mov    rdx,QWORD PTR [rsp+0x30]
 1007b05:	mov    rcx,rsi
 1007b08:	call   QWORD PTR [rax+0x28]
 1007b0b:	mov    ebx,eax
 1007b0d:	test   eax,eax
 1007b0f:	js     0x1007b33
 1007b11:	mov    rax,QWORD PTR [rsp+0x30]
 1007b16:	mov    rcx,QWORD PTR [rip+0x1e0eb]        # 0x1025c08
 1007b1d:	xor    r9d,r9d
 1007b20:	mov    r8d,ebp
 1007b23:	mov    rdx,r14
 1007b26:	mov    QWORD PTR [rsp+0x20],rax
 1007b2b:	call   QWORD PTR [rip+0xffffffffffff952f]        # 0x1001060
 1007b31:	mov    ebx,eax
 1007b33:	mov    rcx,QWORD PTR [rsp+0x30]
 1007b38:	test   rcx,rcx
 1007b3b:	je     0x1007b43
 1007b3d:	mov    rdx,QWORD PTR [rcx]
 1007b40:	call   QWORD PTR [rdx+0x10]
 1007b43:	mov    eax,ebx
 1007b45:	mov    rbx,QWORD PTR [rsp+0x50]
 1007b4a:	mov    rbp,QWORD PTR [rsp+0x58]
 1007b4f:	mov    rsi,QWORD PTR [rsp+0x60]
 1007b54:	mov    rdi,QWORD PTR [rsp+0x68]
 1007b59:	add    rsp,0x40
 1007b5d:	pop    r14
 1007b5f:	ret    
 1007b60:	int3   
 1007b61:	int3   
 1007b62:	int3   
 1007b63:	int3   
 1007b64:	int3   
 1007b65:	int3   
 1007b66:	int3   
 1007b67:	int3   
 1007b68:	int3   
 1007b69:	int3   
 1007b6a:	int3   
 1007b6b:	int3   
 1007b6c:	int3   
 1007b6d:	int3   
 1007b6e:	int3   
 1007b6f:	int3   
 1007b70:	rex push rbx
 1007b72:	sub    rsp,0x20
 1007b76:	mov    rbx,rdx
 1007b79:	test   r9,r9
 1007b7c:	je     0x1007ba5
 1007b7e:	mov    eax,DWORD PTR [r9]
 1007b81:	mov    DWORD PTR [rip+0x1d719],eax        # 0x10252a0
 1007b87:	mov    eax,DWORD PTR [r9+0x4]
 1007b8b:	mov    DWORD PTR [rip+0x1d713],eax        # 0x10252a4
 1007b91:	mov    eax,DWORD PTR [r9+0x8]
 1007b95:	mov    DWORD PTR [rip+0x1d70d],eax        # 0x10252a8
 1007b9b:	mov    eax,DWORD PTR [r9+0xc]
 1007b9f:	mov    DWORD PTR [rip+0x1d707],eax        # 0x10252ac
 1007ba5:	cmp    rdx,0xffffffffffffffff
 1007ba9:	je     0x1007bcf
 1007bab:	mov    QWORD PTR [rcx+0x48],rdx
 1007baf:	test   rdx,rdx
 1007bb2:	je     0x1007bcf
 1007bb4:	cmp    QWORD PTR [rdx],0x0
 1007bb8:	je     0x1007bcf
 1007bba:	nop    WORD PTR [rax+rax*1+0x0]
 1007bc0:	mov    cl,0x1
 1007bc2:	call   QWORD PTR [rbx+0x40]
 1007bc5:	add    rbx,0x48
 1007bc9:	cmp    QWORD PTR [rbx],0x0
 1007bcd:	jne    0x1007bc0
 1007bcf:	mov    rbx,QWORD PTR [rip+0x1e09a]        # 0x1025c70
 1007bd6:	mov    rcx,QWORD PTR [rip+0x1e09b]        # 0x1025c78
 1007bdd:	cmp    rbx,rcx
 1007be0:	jae    0x1007bff
 1007be2:	mov    rax,QWORD PTR [rbx]
 1007be5:	test   rax,rax
 1007be8:	je     0x1007bf6
 1007bea:	mov    cl,0x1
 1007bec:	call   QWORD PTR [rax+0x40]
 1007bef:	mov    rcx,QWORD PTR [rip+0x1e082]        # 0x1025c78
 1007bf6:	add    rbx,0x8
 1007bfa:	cmp    rbx,rcx
 1007bfd:	jb     0x1007be2
 1007bff:	xor    eax,eax
 1007c01:	add    rsp,0x20
 1007c05:	pop    rbx
 1007c06:	ret    
 1007c07:	int3   
 1007c08:	int3   
 1007c09:	int3   
 1007c0a:	int3   
 1007c0b:	int3   
 1007c0c:	int3   
 1007c0d:	int3   
 1007c0e:	int3   
 1007c0f:	int3   
 1007c10:	mov    QWORD PTR [rsp+0x8],rbx
 1007c15:	mov    QWORD PTR [rsp+0x10],rsi
 1007c1a:	push   rdi
 1007c1b:	sub    rsp,0x20
 1007c1f:	mov    rbx,QWORD PTR [rcx+0x48]
 1007c23:	xor    esi,esi
 1007c25:	mov    rdi,rcx
 1007c28:	test   rbx,rbx
 1007c2b:	je     0x1007c53
 1007c2d:	cmp    QWORD PTR [rbx],rsi
 1007c30:	je     0x1007c53
 1007c32:	mov    rcx,QWORD PTR [rbx+0x20]
 1007c36:	test   rcx,rcx
 1007c39:	je     0x1007c41
 1007c3b:	mov    rax,QWORD PTR [rcx]
 1007c3e:	call   QWORD PTR [rax+0x10]
 1007c41:	xor    ecx,ecx
 1007c43:	mov    QWORD PTR [rbx+0x20],rsi
 1007c47:	call   QWORD PTR [rbx+0x40]
 1007c4a:	add    rbx,0x48
 1007c4e:	cmp    QWORD PTR [rbx],rsi
 1007c51:	jne    0x1007c32
 1007c53:	mov    rbx,QWORD PTR [rip+0x1e016]        # 0x1025c70
 1007c5a:	mov    rcx,QWORD PTR [rip+0x1e017]        # 0x1025c78
 1007c61:	cmp    rbx,rcx
 1007c64:	jae    0x1007c83
 1007c66:	mov    rax,QWORD PTR [rbx]
 1007c69:	test   rax,rax
 1007c6c:	je     0x1007c7a
 1007c6e:	xor    ecx,ecx
 1007c70:	call   QWORD PTR [rax+0x40]
 1007c73:	mov    rcx,QWORD PTR [rip+0x1dffe]        # 0x1025c78
 1007c7a:	add    rbx,0x8
 1007c7e:	cmp    rbx,rcx
 1007c81:	jb     0x1007c66
 1007c83:	cmp    DWORD PTR [rdi+0x8],esi
 1007c86:	je     0x1007cb8
 1007c88:	cmp    QWORD PTR [rdi+0x10],rsi
 1007c8c:	je     0x1007c9c
 1007c8e:	lea    rcx,[rdi+0x8]
 1007c92:	call   QWORD PTR [rip+0xffffffffffff93a8]        # 0x1001040
 1007c98:	mov    QWORD PTR [rdi+0x10],rsi
 1007c9c:	mov    rcx,QWORD PTR [rdi+0x40]
 1007ca0:	test   rcx,rcx
 1007ca3:	je     0x1007cab
 1007ca5:	mov    rax,QWORD PTR [rcx]
 1007ca8:	call   QWORD PTR [rax+0x10]
 1007cab:	lea    rcx,[rdi+0x18]
 1007caf:	call   QWORD PTR [rip+0xffffffffffff9593]        # 0x1001248
 1007cb5:	mov    DWORD PTR [rdi+0x8],esi
 1007cb8:	mov    rbx,QWORD PTR [rsp+0x30]
 1007cbd:	mov    rsi,QWORD PTR [rsp+0x38]
 1007cc2:	add    rsp,0x20
 1007cc6:	pop    rdi
 1007cc7:	ret    
 1007cc8:	int3   
 1007cc9:	int3   
 1007cca:	int3   
 1007ccb:	int3   
 1007ccc:	int3   
 1007ccd:	int3   
 1007cce:	int3   
 1007ccf:	int3   
 1007cd0:	mov    QWORD PTR [rsp+0x10],rbx
 1007cd5:	mov    QWORD PTR [rsp+0x18],rbp
 1007cda:	push   rsi
 1007cdb:	push   rdi
 1007cdc:	push   r14
 1007cde:	sub    rsp,0x30
 1007ce2:	mov    rbx,QWORD PTR [rcx+0x48]
 1007ce6:	xor    r14d,r14d
 1007ce9:	mov    esi,r8d
 1007cec:	mov    ebp,edx
 1007cee:	mov    edi,r14d
 1007cf1:	test   rbx,rbx
 1007cf4:	je     0x1007d6f
 1007cf6:	cmp    QWORD PTR [rbx],rdi
 1007cf9:	je     0x1007d6f
 1007cfb:	nop    DWORD PTR [rax+rax*1+0x0]
 1007d00:	test   edi,edi
 1007d02:	jne    0x1007d6b
 1007d04:	mov    rax,QWORD PTR [rbx+0x10]
 1007d08:	mov    QWORD PTR [rsp+0x50],r14
 1007d0d:	test   rax,rax
 1007d10:	jne    0x1007d17
 1007d12:	mov    edi,r14d
 1007d15:	jmp    0x1007d5e
 1007d17:	mov    rcx,QWORD PTR [rbx+0x18]
 1007d1b:	lea    r8,[rsp+0x50]
 1007d20:	lea    rdx,[rip+0xffffffffffff99a9]        # 0x10016d0
 1007d27:	call   rax
 1007d29:	mov    edi,eax
 1007d2b:	test   eax,eax
 1007d2d:	js     0x1007d4e
 1007d2f:	mov    rdx,QWORD PTR [rsp+0x50]
 1007d34:	mov    rcx,QWORD PTR [rbx]
 1007d37:	lea    rax,[rbx+0x28]
 1007d3b:	mov    r9d,esi
 1007d3e:	mov    r8d,ebp
 1007d41:	mov    QWORD PTR [rsp+0x20],rax
 1007d46:	call   QWORD PTR [rip+0xffffffffffff98ac]        # 0x10015f8
 1007d4c:	mov    edi,eax
 1007d4e:	mov    rcx,QWORD PTR [rsp+0x50]
 1007d53:	test   rcx,rcx
 1007d56:	je     0x1007d5e
 1007d58:	mov    rdx,QWORD PTR [rcx]
 1007d5b:	call   QWORD PTR [rdx+0x10]
 1007d5e:	add    rbx,0x48
 1007d62:	cmp    QWORD PTR [rbx],r14
 1007d65:	jne    0x1007d00
 1007d67:	test   edi,edi
 1007d69:	je     0x1007d6f
 1007d6b:	mov    eax,edi
 1007d6d:	jmp    0x1007d81
 1007d6f:	lea    rcx,[rip+0x1deea]        # 0x1025c60
 1007d76:	mov    r8d,esi
 1007d79:	mov    edx,ebp
 1007d7b:	call   QWORD PTR [rip+0xffffffffffff92f7]        # 0x1001078
 1007d81:	mov    rbx,QWORD PTR [rsp+0x58]
 1007d86:	mov    rbp,QWORD PTR [rsp+0x60]
 1007d8b:	add    rsp,0x30
 1007d8f:	pop    r14
 1007d91:	pop    rdi
 1007d92:	pop    rsi
 1007d93:	ret    
 1007d94:	int3   
 1007d95:	int3   
 1007d96:	int3   
 1007d97:	int3   
 1007d98:	int3   
 1007d99:	int3   
 1007d9a:	int3   
 1007d9b:	int3   
 1007d9c:	int3   
 1007d9d:	int3   
 1007d9e:	int3   
 1007d9f:	int3   
 1007da0:	mov    QWORD PTR [rsp+0x8],rbx
 1007da5:	mov    QWORD PTR [rsp+0x10],rsi
 1007daa:	push   rdi
 1007dab:	sub    rsp,0x20
 1007daf:	mov    rbx,QWORD PTR [rcx+0x48]
 1007db3:	xor    r9d,r9d
 1007db6:	mov    rdi,r8
 1007db9:	mov    esi,edx
 1007dbb:	test   rbx,rbx
 1007dbe:	je     0x1007e39
 1007dc0:	mov    rax,QWORD PTR [rbx]
 1007dc3:	test   rax,rax
 1007dc6:	je     0x1007e39
 1007dc8:	test   rdi,rdi
 1007dcb:	je     0x1007dec
 1007dcd:	mov    rdx,QWORD PTR [rdi]
 1007dd0:	cmp    rdx,QWORD PTR [rax]
 1007dd3:	jne    0x1007de3
 1007dd5:	mov    rdx,QWORD PTR [rdi+0x8]
 1007dd9:	cmp    rdx,QWORD PTR [rax+0x8]
 1007ddd:	jne    0x1007de3
 1007ddf:	xor    eax,eax
 1007de1:	jmp    0x1007de8
 1007de3:	sbb    eax,eax
 1007de5:	sbb    eax,0xffffffff
 1007de8:	test   eax,eax
 1007dea:	jne    0x1007e14
 1007dec:	mov    ecx,0x1
 1007df1:	call   QWORD PTR [rbx+0x8]
 1007df4:	test   eax,eax
 1007df6:	js     0x1007e63
 1007df8:	call   QWORD PTR [rbx+0x38]
 1007dfb:	mov    rcx,QWORD PTR [rbx]
 1007dfe:	mov    r8d,0x1
 1007e04:	mov    rdx,rax
 1007e07:	call   QWORD PTR [rip+0xffffffffffff925b]        # 0x1001068
 1007e0d:	mov    r9d,eax
 1007e10:	test   eax,eax
 1007e12:	js     0x1007e63
 1007e14:	mov    rax,QWORD PTR [rbx+0x48]
 1007e18:	add    rbx,0x48
 1007e1c:	test   rax,rax
 1007e1f:	jne    0x1007dc8
 1007e21:	test   r9d,r9d
 1007e24:	jns    0x1007e39
 1007e26:	mov    eax,r9d
 1007e29:	mov    rbx,QWORD PTR [rsp+0x30]
 1007e2e:	mov    rsi,QWORD PTR [rsp+0x38]
 1007e33:	add    rsp,0x20
 1007e37:	pop    rdi
 1007e38:	ret    
 1007e39:	lea    rcx,[rip+0x1de20]        # 0x1025c60
 1007e40:	mov    r8,rdi
 1007e43:	mov    edx,esi
 1007e45:	call   0x1007560
 1007e4a:	test   eax,eax
 1007e4c:	js     0x1007e63
 1007e4e:	mov    rdx,QWORD PTR [rip+0x1d45b]        # 0x10252b0
 1007e55:	test   rdx,rdx
 1007e58:	je     0x1007e63
 1007e5a:	mov    rcx,QWORD PTR [rip+0x1dda7]        # 0x1025c08
 1007e61:	call   rdx
 1007e63:	mov    rbx,QWORD PTR [rsp+0x30]
 1007e68:	mov    rsi,QWORD PTR [rsp+0x38]
 1007e6d:	add    rsp,0x20
 1007e71:	pop    rdi
 1007e72:	ret    
 1007e73:	int3   
 1007e74:	int3   
 1007e75:	int3   
 1007e76:	int3   
 1007e77:	int3   
 1007e78:	int3   
 1007e79:	int3   
 1007e7a:	int3   
 1007e7b:	int3   
 1007e7c:	int3   
 1007e7d:	int3   
 1007e7e:	int3   
 1007e7f:	int3   
 1007e80:	movzx  edx,dx
 1007e83:	jmp    0x1007a80
 1007e88:	int3   
 1007e89:	int3   
 1007e8a:	int3   
 1007e8b:	int3   
 1007e8c:	int3   
 1007e8d:	int3   
 1007e8e:	int3   
 1007e8f:	int3   
 1007e90:	mov    rax,r8
 1007e93:	mov    r10,rdx
 1007e96:	mov    r11,rcx
 1007e99:	test   r9,r9
 1007e9c:	je     0x1007ede
 1007e9e:	mov    QWORD PTR [r9],0x0
 1007ea5:	test   rdx,rdx
 1007ea8:	je     0x1007ed1
 1007eaa:	cmp    DWORD PTR [r8],0x0
 1007eae:	jne    0x1007ecb
 1007eb0:	cmp    DWORD PTR [r8+0x4],0x0
 1007eb5:	jne    0x1007ecb
 1007eb7:	cmp    DWORD PTR [r8+0x8],0xc0
 1007ebf:	jne    0x1007ecb
 1007ec1:	cmp    DWORD PTR [r8+0xc],0x46000000
 1007ec9:	je     0x1007ed1
 1007ecb:	mov    eax,0x80040110
 1007ed0:	ret    
 1007ed1:	mov    r8,r9
 1007ed4:	mov    rdx,rax
 1007ed7:	mov    rcx,r10
 1007eda:	rex.WB jmp QWORD PTR [r11+0x10]
 1007ede:	mov    eax,0x80004003
 1007ee3:	ret    
 1007ee4:	int3   
 1007ee5:	int3   
 1007ee6:	int3   
 1007ee7:	int3   
 1007ee8:	int3   
 1007ee9:	int3   
 1007eea:	int3   
 1007eeb:	int3   
 1007eec:	int3   
 1007eed:	int3   
 1007eee:	int3   
 1007eef:	int3   
 1007ef0:	sub    rsp,0x28
 1007ef4:	mov    rcx,QWORD PTR [rip+0x1d39d]        # 0x1025298
 1007efb:	mov    rax,QWORD PTR [rcx]
 1007efe:	test   edx,edx
 1007f00:	je     0x1007f0c
 1007f02:	call   QWORD PTR [rax+0x8]
 1007f05:	xor    eax,eax
 1007f07:	add    rsp,0x28
 1007f0b:	ret    
 1007f0c:	call   QWORD PTR [rax+0x10]
 1007f0f:	xor    eax,eax
 1007f11:	add    rsp,0x28
 1007f15:	ret    
 1007f16:	int3   
 1007f17:	int3   
 1007f18:	int3   
 1007f19:	int3   
 1007f1a:	int3   
 1007f1b:	int3   
 1007f1c:	int3   
 1007f1d:	int3   
 1007f1e:	int3   
 1007f1f:	int3   
 1007f20:	rex push rbx
 1007f22:	sub    rsp,0x20
 1007f26:	lea    rax,[rip+0xffffffffffff980b]        # 0x1001738
 1007f2d:	mov    rbx,rcx
 1007f30:	mov    QWORD PTR [rcx],rax
 1007f33:	test   dl,0x1
 1007f36:	je     0x1007f3d
 1007f38:	call   0x100bccc
 1007f3d:	mov    rax,rbx
 1007f40:	add    rsp,0x20
 1007f44:	pop    rbx
 1007f45:	ret    
 1007f46:	int3   
 1007f47:	int3   
 1007f48:	int3   
 1007f49:	int3   
 1007f4a:	int3   
 1007f4b:	int3   
 1007f4c:	int3   
 1007f4d:	int3   
 1007f4e:	int3   
 1007f4f:	int3   
 1007f50:	rex push rbp
 1007f52:	push   rbx
 1007f53:	push   r14
 1007f55:	lea    rbp,[rsp-0x190]
 1007f5d:	sub    rsp,0x290
 1007f64:	mov    rax,QWORD PTR [rip+0x1c6f5]        # 0x1024660
 1007f6b:	xor    rax,rsp
 1007f6e:	mov    QWORD PTR [rbp+0x170],rax
 1007f75:	cmp    QWORD PTR [rcx+0x18],0x0
 1007f7a:	mov    r14d,edx
 1007f7d:	mov    rbx,rcx
 1007f80:	je     0x1007f90
 1007f82:	cmp    QWORD PTR [rcx+0x28],0x0
 1007f87:	je     0x1007f90
 1007f89:	xor    eax,eax
 1007f8b:	jmp    0x1008216
 1007f90:	mov    QWORD PTR [rsp+0x2c0],rsi
 1007f98:	mov    QWORD PTR [rsp+0x288],rdi
 1007fa0:	mov    QWORD PTR [rsp+0x280],r15
 1007fa8:	mov    r15,QWORD PTR [rip+0x1d2e9]        # 0x1025298
 1007faf:	lea    rcx,[r15+0x18]
 1007fb3:	call   QWORD PTR [rip+0xffffffffffff92a7]        # 0x1001260
 1007fb9:	xor    edi,edi
 1007fbb:	mov    esi,0x80004005
 1007fc0:	cmp    QWORD PTR [rbx+0x18],rdi
 1007fc4:	jne    0x10081d6
 1007fca:	mov    rcx,QWORD PTR [rbx+0x8]
 1007fce:	mov    QWORD PTR [rsp+0x40],rdi
 1007fd3:	mov    eax,DWORD PTR [rcx]
 1007fd5:	cmp    DWORD PTR [rip+0x1d2c5],eax        # 0x10252a0
 1007fdb:	jne    0x100804c
 1007fdd:	mov    eax,DWORD PTR [rcx+0x4]
 1007fe0:	cmp    DWORD PTR [rip+0x1d2be],eax        # 0x10252a4
 1007fe6:	jne    0x100804c
 1007fe8:	mov    eax,DWORD PTR [rcx+0x8]
 1007feb:	cmp    DWORD PTR [rip+0x1d2b7],eax        # 0x10252a8
 1007ff1:	jne    0x100804c
 1007ff3:	mov    eax,DWORD PTR [rcx+0xc]
 1007ff6:	cmp    DWORD PTR [rip+0x1d2b0],eax        # 0x10252ac
 1007ffc:	jne    0x100804c
 1007ffe:	mov    eax,0xffff
 1008003:	cmp    WORD PTR [rbx+0x10],ax
 1008007:	jne    0x100804c
 1008009:	cmp    WORD PTR [rbx+0x12],ax
 100800d:	jne    0x100804c
 100800f:	mov    rcx,QWORD PTR [rip+0x1dbf2]        # 0x1025c08
 1008016:	lea    rdx,[rsp+0x60]
 100801b:	mov    r8d,0x104
 1008021:	call   QWORD PTR [rip+0xffffffffffff9159]        # 0x1001180
 1008027:	test   eax,eax
 1008029:	je     0x10081d8
 100802f:	cmp    eax,0x104
 1008034:	je     0x10081d8
 100803a:	lea    rdx,[rsp+0x40]
 100803f:	lea    rcx,[rsp+0x60]
 1008044:	call   QWORD PTR [rip+0xffffffffffff9516]        # 0x1001560
 100804a:	jmp    0x1008068
 100804c:	movzx  r8d,WORD PTR [rbx+0x12]
 1008051:	movzx  edx,WORD PTR [rbx+0x10]
 1008055:	lea    rax,[rsp+0x40]
 100805a:	mov    r9d,r14d
 100805d:	mov    QWORD PTR [rsp+0x20],rax
 1008062:	call   QWORD PTR [rip+0xffffffffffff94f0]        # 0x1001558
 1008068:	mov    esi,eax
 100806a:	test   eax,eax
 100806c:	js     0x10081d8
 1008072:	mov    rcx,QWORD PTR [rsp+0x40]
 1008077:	mov    rdx,QWORD PTR [rbx]
 100807a:	mov    QWORD PTR [rsp+0x38],rdi
 100807f:	mov    rax,QWORD PTR [rcx]
 1008082:	lea    r8,[rsp+0x38]
 1008087:	call   QWORD PTR [rax+0x30]
 100808a:	mov    esi,eax
 100808c:	test   eax,eax
 100808e:	js     0x10081b9
 1008094:	mov    rcx,QWORD PTR [rsp+0x38]
 1008099:	mov    QWORD PTR [rsp+0x30],rcx
 100809e:	test   rcx,rcx
 10080a1:	je     0x10080ae
 10080a3:	mov    rax,QWORD PTR [rcx]
 10080a6:	call   QWORD PTR [rax+0x8]
 10080a9:	mov    rcx,QWORD PTR [rsp+0x38]
 10080ae:	mov    QWORD PTR [rsp+0x48],rdi
 10080b3:	mov    rax,QWORD PTR [rcx]
 10080b6:	lea    r8,[rsp+0x48]
 10080bb:	lea    rdx,[rip+0xffffffffffff9976]        # 0x1001a38
 10080c2:	call   QWORD PTR [rax]
 10080c4:	test   eax,eax
 10080c6:	js     0x1008168
 10080cc:	mov    rcx,QWORD PTR [rsp+0x30]
 10080d1:	mov    r14,QWORD PTR [rsp+0x48]
 10080d6:	test   rcx,rcx
 10080d9:	jne    0x10080e5
 10080db:	test   r14,r14
 10080de:	jne    0x1008153
 10080e0:	jmp    0x100816d
 10080e5:	test   r14,r14
 10080e8:	je     0x1008153
 10080ea:	mov    QWORD PTR [rsp+0x50],rdi
 10080ef:	mov    QWORD PTR [rsp+0x58],rdi
 10080f4:	mov    rax,QWORD PTR [rcx]
 10080f7:	lea    r8,[rsp+0x50]
 10080fc:	lea    rdx,[rip+0xffffffffffff95cd]        # 0x10016d0
 1008103:	call   QWORD PTR [rax]
 1008105:	mov    r11,QWORD PTR [r14]
 1008108:	lea    r8,[rsp+0x58]
 100810d:	lea    rdx,[rip+0xffffffffffff95bc]        # 0x10016d0
 1008114:	mov    rcx,r14
 1008117:	call   QWORD PTR [r11]
 100811a:	mov    rax,QWORD PTR [rsp+0x58]
 100811f:	mov    rcx,QWORD PTR [rsp+0x50]
 1008124:	cmp    rcx,rax
 1008127:	sete   r14b
 100812b:	test   rax,rax
 100812e:	je     0x100813e
 1008130:	mov    rdx,QWORD PTR [rax]
 1008133:	mov    rcx,rax
 1008136:	call   QWORD PTR [rdx+0x10]
 1008139:	mov    rcx,QWORD PTR [rsp+0x50]
 100813e:	test   rcx,rcx
 1008141:	je     0x1008149
 1008143:	mov    rax,QWORD PTR [rcx]
 1008146:	call   QWORD PTR [rax+0x10]
 1008149:	test   r14b,r14b
 100814c:	jne    0x1008168
 100814e:	mov    r14,QWORD PTR [rsp+0x48]
 1008153:	lea    r8,[rip+0xffffffffffff98ee]        # 0x1001a48
 100815a:	lea    rcx,[rsp+0x30]
 100815f:	mov    rdx,r14
 1008162:	call   QWORD PTR [rip+0xffffffffffff8f20]        # 0x1001088
 1008168:	mov    rcx,QWORD PTR [rsp+0x30]
 100816d:	mov    QWORD PTR [rbx+0x18],rcx
 1008171:	mov    rax,QWORD PTR [rip+0x1d120]        # 0x1025298
 1008178:	mov    QWORD PTR [rsp+0x30],rdi
 100817d:	test   rax,rax
 1008180:	je     0x1008186
 1008182:	lea    rdi,[rax+0x8]
 1008186:	lea    rdx,[rip+0xb3]        # 0x1008240
 100818d:	mov    r8,rbx
 1008190:	mov    rcx,rdi
 1008193:	call   QWORD PTR [rip+0xffffffffffff8eaf]        # 0x1001048
 1008199:	mov    rcx,QWORD PTR [rsp+0x48]
 100819e:	test   rcx,rcx
 10081a1:	je     0x10081a9
 10081a3:	mov    rax,QWORD PTR [rcx]
 10081a6:	call   QWORD PTR [rax+0x10]
 10081a9:	mov    rcx,QWORD PTR [rsp+0x30]
 10081ae:	test   rcx,rcx
 10081b1:	je     0x10081b9
 10081b3:	mov    rax,QWORD PTR [rcx]
 10081b6:	call   QWORD PTR [rax+0x10]
 10081b9:	mov    rcx,QWORD PTR [rsp+0x40]
 10081be:	mov    rax,QWORD PTR [rcx]
 10081c1:	call   QWORD PTR [rax+0x10]
 10081c4:	mov    rcx,QWORD PTR [rsp+0x38]
 10081c9:	test   rcx,rcx
 10081cc:	je     0x10081d8
 10081ce:	mov    rax,QWORD PTR [rcx]
 10081d1:	call   QWORD PTR [rax+0x10]
 10081d4:	jmp    0x10081d8
 10081d6:	mov    esi,edi
 10081d8:	mov    rdx,QWORD PTR [rbx+0x18]
 10081dc:	mov    rdi,QWORD PTR [rsp+0x288]
 10081e4:	test   rdx,rdx
 10081e7:	je     0x10081fa
 10081e9:	cmp    QWORD PTR [rbx+0x28],0x0
 10081ee:	jne    0x10081fa
 10081f0:	mov    rcx,rbx
 10081f3:	call   0x10082e0
 10081f8:	mov    esi,eax
 10081fa:	lea    rcx,[r15+0x18]
 10081fe:	call   QWORD PTR [rip+0xffffffffffff9054]        # 0x1001258
 1008204:	mov    r15,QWORD PTR [rsp+0x280]
 100820c:	mov    eax,esi
 100820e:	mov    rsi,QWORD PTR [rsp+0x2c0]
 1008216:	mov    rcx,QWORD PTR [rbp+0x170]
 100821d:	xor    rcx,rsp
 1008220:	call   0x100c0d0
 1008225:	add    rsp,0x290
 100822c:	pop    r14
 100822e:	pop    rbx
 100822f:	pop    rbp
 1008230:	ret    
 1008231:	int3   
 1008232:	int3   
 1008233:	int3   
 1008234:	int3   
 1008235:	int3   
 1008236:	int3   
 1008237:	int3   
 1008238:	int3   
 1008239:	int3   
 100823a:	int3   
 100823b:	int3   
 100823c:	int3   
 100823d:	int3   
 100823e:	int3   
 100823f:	int3   
 1008240:	test   rcx,rcx
 1008243:	je     0x10082d6
 1008249:	push   rsi
 100824a:	sub    rsp,0x20
 100824e:	mov    rsi,rcx
 1008251:	mov    rcx,QWORD PTR [rcx+0x18]
 1008255:	test   rcx,rcx
 1008258:	je     0x1008260
 100825a:	mov    rax,QWORD PTR [rcx]
 100825d:	call   QWORD PTR [rax+0x10]
 1008260:	mov    rax,QWORD PTR [rsi+0x28]
 1008264:	mov    QWORD PTR [rsi+0x18],0x0
 100826c:	test   rax,rax
 100826f:	je     0x10082c9
 1008271:	mov    QWORD PTR [rsp+0x30],rbx
 1008276:	mov    QWORD PTR [rsp+0x38],rdi
 100827b:	movsxd rdi,DWORD PTR [rax-0x8]
 100827f:	mov    rbx,rdi
 1008282:	mov    QWORD PTR [rsp+0x40],r14
 1008287:	lea    r14,[rax-0x8]
 100828b:	shl    rbx,0x4
 100828f:	add    rbx,rax
 1008292:	dec    edi
 1008294:	js     0x10082b2
 1008296:	data16 nop WORD PTR [rax+rax*1+0x0]
 10082a0:	mov    rcx,QWORD PTR [rbx-0x10]
 10082a4:	sub    rbx,0x10
 10082a8:	call   QWORD PTR [rip+0xffffffffffff92c2]        # 0x1001570
 10082ae:	dec    edi
 10082b0:	jns    0x10082a0
 10082b2:	mov    rcx,r14
 10082b5:	call   0x100bf30
 10082ba:	mov    r14,QWORD PTR [rsp+0x40]
 10082bf:	mov    rdi,QWORD PTR [rsp+0x38]
 10082c4:	mov    rbx,QWORD PTR [rsp+0x30]
 10082c9:	mov    QWORD PTR [rsi+0x28],0x0
 10082d1:	add    rsp,0x20
 10082d5:	pop    rsi
 10082d6:	repz ret 
 10082d8:	int3   
 10082d9:	int3   
 10082da:	int3   
 10082db:	int3   
 10082dc:	int3   
 10082dd:	int3   
 10082de:	int3   
 10082df:	int3   
 10082e0:	rex push rbx
 10082e2:	push   rsi
 10082e3:	push   rdi
 10082e4:	push   r12
 10082e6:	push   r14
 10082e8:	push   r15
 10082ea:	sub    rsp,0x38
 10082ee:	mov    rax,QWORD PTR [rdx]
 10082f1:	mov    rdi,rdx
 10082f4:	mov    r14,rcx
 10082f7:	lea    rdx,[rsp+0x88]
 10082ff:	mov    rcx,rdi
 1008302:	call   QWORD PTR [rax+0x18]
 1008305:	test   eax,eax
 1008307:	js     0x100849c
 100830d:	mov    rax,QWORD PTR [rsp+0x88]
 1008315:	xor    r12d,r12d
 1008318:	movzx  ecx,WORD PTR [rax+0x30]
 100831c:	mov    r15d,r12d
 100831f:	mov    QWORD PTR [r14+0x28],r12
 1008323:	mov    DWORD PTR [r14+0x30],ecx
 1008327:	test   ecx,ecx
 1008329:	je     0x10083ae
 100832f:	mov    rsi,0xffffffffffffffff
 1008336:	mov    ebx,ecx
 1008338:	mov    eax,0x10
 100833d:	mul    rcx
 1008340:	cmovo  rax,rsi
 1008344:	add    rax,0x8
 1008348:	cmovb  rax,rsi
 100834c:	mov    rcx,rax
 100834f:	call   0x100bf24
 1008354:	test   rax,rax
 1008357:	je     0x1008387
 1008359:	lea    ecx,[rbx-0x1]
 100835c:	lea    r15,[rax+0x8]
 1008360:	mov    DWORD PTR [rax],ebx
 1008362:	mov    rax,r15
 1008365:	test   ecx,ecx
 1008367:	js     0x1008382
 1008369:	nop    DWORD PTR [rax+0x0]
 1008370:	mov    QWORD PTR [rax],r12
 1008373:	mov    DWORD PTR [rax+0x8],r12d
 1008377:	mov    DWORD PTR [rax+0xc],esi
 100837a:	add    rax,0x10
 100837e:	dec    ecx
 1008380:	jns    0x1008370
 1008382:	test   r15,r15
 1008385:	jne    0x10083ae
 1008387:	mov    rax,QWORD PTR [rdi]
 100838a:	mov    rdx,QWORD PTR [rsp+0x88]
 1008392:	mov    rcx,rdi
 1008395:	call   QWORD PTR [rax+0x98]
 100839b:	mov    eax,0x8007000e
 10083a0:	add    rsp,0x38
 10083a4:	pop    r15
 10083a6:	pop    r14
 10083a8:	pop    r12
 10083aa:	pop    rdi
 10083ab:	pop    rsi
 10083ac:	pop    rbx
 10083ad:	ret    
 10083ae:	mov    esi,r12d
 10083b1:	cmp    DWORD PTR [r14+0x30],r12d
 10083b5:	jle    0x1008484
 10083bb:	mov    rbx,r15
 10083be:	mov    QWORD PTR [rsp+0x30],rbp
 10083c3:	data16 data16 data16 data16 nop WORD PTR [rax+rax*1+0x0]
 10083d0:	mov    rax,QWORD PTR [rdi]
 10083d3:	lea    r8,[rsp+0x80]
 10083db:	mov    edx,esi
 10083dd:	mov    rcx,rdi
 10083e0:	call   QWORD PTR [rax+0x28]
 10083e3:	test   eax,eax
 10083e5:	js     0x100846f
 10083eb:	mov    rax,QWORD PTR [rsp+0x80]
 10083f3:	mov    r10,QWORD PTR [rdi]
 10083f6:	mov    QWORD PTR [rsp+0x78],r12
 10083fb:	mov    edx,DWORD PTR [rax]
 10083fd:	lea    r8,[rsp+0x78]
 1008402:	xor    r9d,r9d
 1008405:	mov    rcx,rdi
 1008408:	mov    QWORD PTR [rsp+0x28],r12
 100840d:	mov    QWORD PTR [rsp+0x20],r12
 1008412:	call   QWORD PTR [r10+0x60]
 1008416:	test   eax,eax
 1008418:	js     0x1008450
 100841a:	mov    rbp,QWORD PTR [rsp+0x78]
 100841f:	mov    rcx,QWORD PTR [rbx]
 1008422:	mov    QWORD PTR [rsp+0x78],r12
 1008427:	cmp    rcx,rbp
 100842a:	je     0x1008435
 100842c:	call   QWORD PTR [rip+0xffffffffffff913e]        # 0x1001570
 1008432:	mov    QWORD PTR [rbx],rbp
 1008435:	mov    rcx,QWORD PTR [rbx]
 1008438:	call   QWORD PTR [rip+0xffffffffffff912a]        # 0x1001568
 100843e:	mov    rdx,QWORD PTR [rsp+0x80]
 1008446:	mov    DWORD PTR [rbx+0x8],eax
 1008449:	mov    eax,DWORD PTR [rdx]
 100844b:	mov    DWORD PTR [rbx+0xc],eax
 100844e:	jmp    0x1008458
 1008450:	mov    rdx,QWORD PTR [rsp+0x80]
 1008458:	mov    rax,QWORD PTR [rdi]
 100845b:	mov    rcx,rdi
 100845e:	call   QWORD PTR [rax+0xa0]
 1008464:	mov    rcx,QWORD PTR [rsp+0x78]
 1008469:	call   QWORD PTR [rip+0xffffffffffff9101]        # 0x1001570
 100846f:	inc    esi
 1008471:	add    rbx,0x10
 1008475:	cmp    esi,DWORD PTR [r14+0x30]
 1008479:	jl     0x10083d0
 100847f:	mov    rbp,QWORD PTR [rsp+0x30]
 1008484:	mov    rdx,QWORD PTR [rsp+0x88]
 100848c:	mov    QWORD PTR [r14+0x28],r15
 1008490:	mov    rax,QWORD PTR [rdi]
 1008493:	mov    rcx,rdi
 1008496:	call   QWORD PTR [rax+0x98]
 100849c:	xor    eax,eax
 100849e:	add    rsp,0x38
 10084a2:	pop    r15
 10084a4:	pop    r14
 10084a6:	pop    r12
 10084a8:	pop    rdi
 10084a9:	pop    rsi
 10084aa:	pop    rbx
 10084ab:	ret    
 10084ac:	int3   
 10084ad:	int3   
 10084ae:	int3   
 10084af:	int3   
 10084b0:	int3   
 10084b1:	int3   
 10084b2:	int3   
 10084b3:	int3   
 10084b4:	int3   
 10084b5:	int3   
 10084b6:	int3   
 10084b7:	int3   
 10084b8:	int3   
 10084b9:	int3   
 10084ba:	int3   
 10084bb:	int3   
 10084bc:	int3   
 10084bd:	int3   
 10084be:	int3   
 10084bf:	int3   
 10084c0:	mov    QWORD PTR [rsp+0x8],rbx
 10084c5:	mov    QWORD PTR [rsp+0x10],rsi
 10084ca:	mov    QWORD PTR [rsp+0x18],rdi
 10084cf:	push   r14
 10084d1:	mov    eax,0x1670
 10084d6:	call   0x100c070
 10084db:	sub    rsp,rax
 10084de:	mov    rax,QWORD PTR [rip+0x1c17b]        # 0x1024660
 10084e5:	xor    rax,rsp
 10084e8:	mov    QWORD PTR [rsp+0x1660],rax
 10084f0:	xor    r14d,r14d
 10084f3:	mov    ebx,r14d
 10084f6:	lea    rcx,[rsp+0xd0]
 10084fe:	call   0x100d060
 1008503:	nop
 1008504:	lea    rcx,[rip+0x1ce2d]        # 0x1025338
 100850b:	call   QWORD PTR [rip+0xffffffffffff8d57]        # 0x1001268
 1008511:	xor    ecx,ecx
 1008513:	call   QWORD PTR [rip+0xffffffffffff8c5f]        # 0x1001178
 1008519:	mov    rsi,rax
 100851c:	call   QWORD PTR [rip+0xffffffffffff8c46]        # 0x1001168
 1008522:	mov    rdi,rax
 1008525:	mov    r8d,0x104
 100852b:	lea    rdx,[rsp+0x1550]
 1008533:	xor    ecx,ecx
 1008535:	call   QWORD PTR [rip+0xffffffffffff8c4d]        # 0x1001188
 100853b:	mov    BYTE PTR [rsp+0x1653],r14b
 1008543:	xor    edx,edx
 1008545:	xor    ecx,ecx
 1008547:	call   QWORD PTR [rip+0xffffffffffff90b3]        # 0x1001600
 100854d:	test   eax,eax
 100854f:	jns    0x100855a
 1008551:	lea    eax,[r14+0x1]
 1008555:	jmp    0x1008b95
 100855a:	mov    QWORD PTR [rsp+0x40],r14
 100855f:	mov    DWORD PTR [rsp+0x38],r14d
 1008564:	mov    QWORD PTR [rsp+0x30],r14
 1008569:	mov    DWORD PTR [rsp+0x28],0x2
 1008571:	mov    DWORD PTR [rsp+0x20],0x2
 1008579:	xor    r9d,r9d
 100857c:	xor    r8d,r8d
 100857f:	or     edx,0xffffffff
 1008582:	xor    ecx,ecx
 1008584:	call   QWORD PTR [rip+0xffffffffffff9056]        # 0x10015e0
 100858a:	test   eax,eax
 100858c:	js     0x1008b2b
 1008592:	xor    r9d,r9d
 1008595:	xor    r8d,r8d
 1008598:	lea    edx,[r9+0x1]
 100859c:	xor    ecx,ecx
 100859e:	call   QWORD PTR [rip+0xffffffffffff8bec]        # 0x1001190
 10085a4:	mov    QWORD PTR [rip+0x1cd7d],rax        # 0x1025328
 10085ab:	test   rax,rax
 10085ae:	jne    0x10085be
 10085b0:	mov    ebx,0x1
 10085b5:	mov    DWORD PTR [rsp+0x50],ebx
 10085b9:	jmp    0x1008b2b
 10085be:	xor    r9d,r9d
 10085c1:	mov    r8,rsi
 10085c4:	lea    rdx,[rip+0x1bb35]        # 0x1024100
 10085cb:	lea    rcx,[rip+0x1cd8e]        # 0x1025360
 10085d2:	call   0x1007b70
 10085d7:	call   QWORD PTR [rip+0xffffffffffff8c9b]        # 0x1001278
 10085dd:	mov    DWORD PTR [rip+0x1cdcd],eax        # 0x10253b0
 10085e3:	lea    rdx,[rip+0xffffffffffff924e]        # 0x1001838
 10085ea:	mov    rcx,rdi
 10085ed:	call   0x1009540
 10085f2:	test   eax,eax
 10085f4:	jne    0x1008a06
 10085fa:	lea    rdx,[rip+0xffffffffffff9247]        # 0x1001848
 1008601:	mov    rcx,rdi
 1008604:	call   0x1009540
 1008609:	test   eax,eax
 100860b:	jne    0x1008a06
 1008611:	lea    rdx,[rip+0xffffffffffff9240]        # 0x1001858
 1008618:	mov    rcx,rdi
 100861b:	call   0x1009540
 1008620:	test   eax,eax
 1008622:	jne    0x1008991
 1008628:	lea    rdx,[rip+0xffffffffffff9239]        # 0x1001868
 100862f:	mov    rcx,rdi
 1008632:	call   0x1009540
 1008637:	test   eax,eax
 1008639:	jne    0x1008991
 100863f:	lea    rdx,[rip+0xffffffffffff9232]        # 0x1001878
 1008646:	mov    rcx,rdi
 1008649:	call   0x1009540
 100864e:	test   eax,eax
 1008650:	jne    0x100885d
 1008656:	lea    rdx,[rip+0xffffffffffff922b]        # 0x1001888
 100865d:	mov    rcx,rdi
 1008660:	call   0x1009540
 1008665:	test   eax,eax
 1008667:	jne    0x100885d
 100866d:	mov    ecx,0xfffffff5
 1008672:	call   QWORD PTR [rip+0xffffffffffff8b90]        # 0x1001208
 1008678:	cmp    rax,0xffffffffffffffff
 100867c:	je     0x10086a8
 100867e:	test   rax,rax
 1008681:	je     0x10086a8
 1008683:	mov    QWORD PTR [rsp+0x20],r14
 1008688:	lea    r9,[rsp+0x5c]
 100868d:	xor    r8d,r8d
 1008690:	lea    rdx,[rip+0xffffffffffff91fd]        # 0x1001894
 1008697:	mov    rcx,rax
 100869a:	call   QWORD PTR [rip+0xffffffffffff8b00]        # 0x10011a0
 10086a0:	test   eax,eax
 10086a2:	jne    0x1008829
 10086a8:	call   QWORD PTR [rip+0xffffffffffff8a92]        # 0x1001140
 10086ae:	test   eax,eax
 10086b0:	je     0x1008829
 10086b6:	mov    edx,0x1
 10086bb:	lea    rcx,[rip+0xf2e]        # 0x10095f0
 10086c2:	call   QWORD PTR [rip+0xffffffffffff8a80]        # 0x1001148
 10086c8:	test   eax,eax
 10086ca:	jne    0x10086da
 10086cc:	mov    ebx,0x1
 10086d1:	mov    DWORD PTR [rsp+0x50],ebx
 10086d5:	jmp    0x1008b2b
 10086da:	mov    ecx,0xfffffff5
 10086df:	call   QWORD PTR [rip+0xffffffffffff8b23]        # 0x1001208
 10086e5:	mov    rbx,rax
 10086e8:	call   0x100dc00
 10086ed:	test   eax,eax
 10086ef:	je     0x100872a
 10086f1:	lea    rdx,[rsp+0xb0]
 10086f9:	mov    rcx,rbx
 10086fc:	call   QWORD PTR [rip+0xffffffffffff8a56]        # 0x1001158
 1008702:	cmp    WORD PTR [rsp+0xb2],0x3c
 100870b:	jge    0x100871a
 100870d:	mov    eax,0x3c
 1008712:	mov    WORD PTR [rsp+0xb2],ax
 100871a:	mov    edx,DWORD PTR [rsp+0xb0]
 1008721:	mov    rcx,rbx
 1008724:	call   QWORD PTR [rip+0xffffffffffff8a26]        # 0x1001150
 100872a:	call   QWORD PTR [rip+0xffffffffffff8d10]        # 0x1001440
 1008730:	mov    r8,rax
 1008733:	lea    rdx,[rip+0xffffffffffff915e]        # 0x1001898
 100873a:	lea    rcx,[rip+0xffffffffffff915b]        # 0x100189c
 1008741:	call   QWORD PTR [rip+0xffffffffffff8d89]        # 0x10014d0
 1008747:	test   rax,rax
 100874a:	je     0x10085b0
 1008750:	call   QWORD PTR [rip+0xffffffffffff8cea]        # 0x1001440
 1008756:	lea    r8,[rax+0x30]
 100875a:	lea    rdx,[rip+0xffffffffffff9143]        # 0x10018a4
 1008761:	lea    rcx,[rip+0xffffffffffff9140]        # 0x10018a8
 1008768:	call   QWORD PTR [rip+0xffffffffffff8d62]        # 0x10014d0
 100876e:	test   rax,rax
 1008771:	je     0x10085b0
 1008777:	call   0x100a910
 100877c:	mov    ebx,eax
 100877e:	mov    DWORD PTR [rsp+0x50],eax
 1008782:	mov    rcx,QWORD PTR [rip+0x1cb9f]        # 0x1025328
 1008789:	test   rcx,rcx
 100878c:	je     0x1008794
 100878e:	call   QWORD PTR [rip+0xffffffffffff8a8c]        # 0x1001220
 1008794:	lea    rcx,[rsp+0xb10]
 100879c:	call   0x100d060
 10087a1:	mov    edx,0x4e79
 10087a6:	lea    rcx,[rsp+0xb10]
 10087ae:	call   0x100d090
 10087b3:	mov    QWORD PTR [rsp+0x70],r14
 10087b8:	mov    DWORD PTR [rsp+0x78],0x1
 10087c0:	mov    edx,0x1
 10087c5:	lea    rcx,[rsp+0xb1c]
 10087cd:	call   0x1009470
 10087d2:	mov    rdi,rax
 10087d5:	mov    QWORD PTR [rsp+0x70],rax
 10087da:	mov    rcx,rax
 10087dd:	call   QWORD PTR [rip+0xffffffffffff8d3d]        # 0x1001520
 10087e3:	test   rdi,rdi
 10087e6:	je     0x10087f0
 10087e8:	mov    rcx,rdi
 10087eb:	call   0x100bf30
 10087f0:	mov    rcx,QWORD PTR [rip+0x1cb31]        # 0x1025328
 10087f7:	test   rcx,rcx
 10087fa:	je     0x1008805
 10087fc:	or     edx,0xffffffff
 10087ff:	call   QWORD PTR [rip+0xffffffffffff8a13]        # 0x1001218
 1008805:	call   QWORD PTR [rip+0xffffffffffff8c35]        # 0x1001440
 100880b:	mov    rcx,rax
 100880e:	call   QWORD PTR [rip+0xffffffffffff8cb4]        # 0x10014c8
 1008814:	call   QWORD PTR [rip+0xffffffffffff8c26]        # 0x1001440
 100881a:	lea    rcx,[rax+0x30]
 100881e:	call   QWORD PTR [rip+0xffffffffffff8ca4]        # 0x10014c8
 1008824:	jmp    0x1008b2b
 1008829:	mov    edx,0x1
 100882e:	lea    rcx,[rip+0xdbb]        # 0x10095f0
 1008835:	call   QWORD PTR [rip+0xffffffffffff890d]        # 0x1001148
 100883b:	test   eax,eax
 100883d:	jne    0x100884d
 100883f:	mov    ebx,0x1
 1008844:	mov    DWORD PTR [rsp+0x50],ebx
 1008848:	jmp    0x1008b2b
 100884d:	call   0x100a910
 1008852:	mov    ebx,eax
 1008854:	mov    DWORD PTR [rsp+0x50],eax
 1008858:	jmp    0x1008b2b
 100885d:	xor    r9d,r9d
 1008860:	xor    r8d,r8d
 1008863:	lea    edx,[r9+0x1]
 1008867:	xor    ecx,ecx
 1008869:	call   QWORD PTR [rip+0xffffffffffff8921]        # 0x1001190
 100886f:	mov    QWORD PTR [rip+0x1caa2],rax        # 0x1025318
 1008876:	test   rax,rax
 1008879:	jne    0x1008889
 100887b:	mov    ebx,0x1
 1008880:	mov    DWORD PTR [rsp+0x50],ebx
 1008884:	jmp    0x1008b2b
 1008889:	xor    r9d,r9d
 100888c:	xor    r8d,r8d
 100888f:	lea    edx,[r9+0x1]
 1008893:	xor    ecx,ecx
 1008895:	call   QWORD PTR [rip+0xffffffffffff88f5]        # 0x1001190
 100889b:	mov    QWORD PTR [rip+0x1ca7e],rax        # 0x1025320
 10088a2:	test   rax,rax
 10088a5:	jne    0x10088b5
 10088a7:	mov    ebx,0x1
 10088ac:	mov    DWORD PTR [rsp+0x50],ebx
 10088b0:	jmp    0x1008b2b
 10088b5:	xor    r8d,r8d
 10088b8:	lea    edx,[r8+0x4]
 10088bc:	lea    rcx,[rip+0x1ca9d]        # 0x1025360
 10088c3:	call   0x1007cd0
 10088c8:	mov    r11,QWORD PTR [rip+0x1ca51]        # 0x1025320
 10088cf:	mov    QWORD PTR [rsp+0x90],r11
 10088d7:	mov    rax,QWORD PTR [rip+0x1ca3a]        # 0x1025318
 10088de:	mov    QWORD PTR [rsp+0x98],rax
 10088e6:	mov    r9d,0x1d4c0
 10088ec:	xor    r8d,r8d
 10088ef:	lea    rdx,[rsp+0x90]
 10088f7:	lea    ecx,[r8+0x2]
 10088fb:	call   QWORD PTR [rip+0xffffffffffff890f]        # 0x1001210
 1008901:	cmp    eax,0x1
 1008904:	jne    0x100892c
 1008906:	call   0x100a910
 100890b:	mov    rcx,QWORD PTR [rip+0x1c9fe]        # 0x1025310
 1008912:	test   rcx,rcx
 1008915:	je     0x100891c
 1008917:	call   0x100a840
 100891c:	or     edx,0xffffffff
 100891f:	mov    rcx,QWORD PTR [rip+0x1c9fa]        # 0x1025320
 1008926:	call   QWORD PTR [rip+0xffffffffffff88ec]        # 0x1001218
 100892c:	mov    eax,r14d
 100892f:	mov    DWORD PTR [rsp+0x58],eax
 1008933:	mov    rdi,QWORD PTR [rip+0x1ca6e]        # 0x10253a8
 100893a:	test   rdi,rdi
 100893d:	je     0x1008973
 100893f:	mov    QWORD PTR [rsp+0x60],rdi
 1008944:	cmp    QWORD PTR [rdi],0x0
 1008948:	je     0x1008973
 100894a:	test   eax,eax
 100894c:	jne    0x1008b2b
 1008952:	mov    ecx,DWORD PTR [rdi+0x28]
 1008955:	test   ecx,ecx
 1008957:	jne    0x100895e
 1008959:	mov    eax,r14d
 100895c:	jmp    0x1008964
 100895e:	call   QWORD PTR [rip+0xffffffffffff8c8c]        # 0x10015f0
 1008964:	mov    DWORD PTR [rsp+0x58],eax
 1008968:	add    rdi,0x48
 100896c:	mov    QWORD PTR [rsp+0x60],rdi
 1008971:	jmp    0x1008944
 1008973:	test   eax,eax
 1008975:	jne    0x1008b2b
 100897b:	lea    rcx,[rip+0x1d2de]        # 0x1025c60
 1008982:	call   QWORD PTR [rip+0xffffffffffff86e8]        # 0x1001070
 1008988:	mov    DWORD PTR [rsp+0x58],eax
 100898c:	jmp    0x1008b2b
 1008991:	xor    r9d,r9d
 1008994:	lea    edx,[r9+0x64]
 1008998:	lea    r8d,[r9+0x1]
 100899c:	lea    rcx,[rip+0x1c9bd]        # 0x1025360
 10089a3:	call   0x1007a80
 10089a8:	xor    r8d,r8d
 10089ab:	lea    edx,[r8+0x1]
 10089af:	lea    rcx,[rip+0x1c9aa]        # 0x1025360
 10089b6:	call   0x1007da0
 10089bb:	mov    ebx,eax
 10089bd:	test   eax,eax
 10089bf:	jns    0x1008b2b
 10089c5:	mov    r8d,eax
 10089c8:	mov    edx,0x4e89
 10089cd:	lea    rcx,[rsp+0xd0]
 10089d5:	call   0x100d090
 10089da:	mov    QWORD PTR [rsp+0x80],r14
 10089e2:	mov    DWORD PTR [rsp+0x88],r14d
 10089ea:	xor    edx,edx
 10089ec:	lea    rcx,[rsp+0xdc]
 10089f4:	call   0x1009470
 10089f9:	mov    QWORD PTR [rsp+0x80],rax
 1008a01:	jmp    0x1008b02
 1008a06:	xor    r9d,r9d
 1008a09:	mov    r8,rsi
 1008a0c:	lea    rdx,[rip+0x1b7cd]        # 0x10241e0
 1008a13:	lea    rcx,[rip+0x1c946]        # 0x1025360
 1008a1a:	call   0x1007b70
 1008a1f:	xor    r9d,r9d
 1008a22:	xor    r8d,r8d
 1008a25:	lea    edx,[r9+0x64]
 1008a29:	lea    rcx,[rip+0x1c930]        # 0x1025360
 1008a30:	call   0x1007a80
 1008a35:	mov    ebx,r14d
 1008a38:	mov    DWORD PTR [rsp+0x54],ebx
 1008a3c:	mov    rdi,QWORD PTR [rip+0x1c965]        # 0x10253a8
 1008a43:	mov    QWORD PTR [rsp+0x68],rdi
 1008a48:	test   rdi,rdi
 1008a4b:	je     0x1008a8c
 1008a4d:	nop    DWORD PTR [rax]
 1008a50:	cmp    QWORD PTR [rdi],0x0
 1008a54:	je     0x1008a8c
 1008a56:	call   QWORD PTR [rdi+0x38]
 1008a59:	mov    rdx,rax
 1008a5c:	xor    r8d,r8d
 1008a5f:	mov    rcx,QWORD PTR [rdi]
 1008a62:	call   QWORD PTR [rip+0xffffffffffff8600]        # 0x1001068
 1008a68:	mov    ebx,eax
 1008a6a:	mov    DWORD PTR [rsp+0x54],eax
 1008a6e:	test   eax,eax
 1008a70:	js     0x1008a8c
 1008a72:	xor    ecx,ecx
 1008a74:	call   QWORD PTR [rdi+0x8]
 1008a77:	mov    ebx,eax
 1008a79:	mov    DWORD PTR [rsp+0x54],eax
 1008a7d:	test   eax,eax
 1008a7f:	js     0x1008a8c
 1008a81:	add    rdi,0x48
 1008a85:	mov    QWORD PTR [rsp+0x68],rdi
 1008a8a:	jmp    0x1008a50
 1008a8c:	test   ebx,ebx
 1008a8e:	js     0x1008abe
 1008a90:	mov    ebx,r14d
 1008a93:	mov    rax,QWORD PTR [rip+0x1c81e]        # 0x10252b8
 1008a9a:	test   rax,rax
 1008a9d:	je     0x1008aa3
 1008a9f:	call   rax
 1008aa1:	mov    ebx,eax
 1008aa3:	test   ebx,ebx
 1008aa5:	js     0x1008aba
 1008aa7:	xor    r8d,r8d
 1008aaa:	xor    edx,edx
 1008aac:	lea    rcx,[rip+0x1d1ad]        # 0x1025c60
 1008ab3:	call   0x1007650
 1008ab8:	mov    ebx,eax
 1008aba:	mov    DWORD PTR [rsp+0x54],ebx
 1008abe:	mov    DWORD PTR [rsp+0x50],ebx
 1008ac2:	test   ebx,ebx
 1008ac4:	jns    0x1008b2b
 1008ac6:	mov    r8d,ebx
 1008ac9:	mov    edx,0x4e88
 1008ace:	lea    rcx,[rsp+0xd0]
 1008ad6:	call   0x100d090
 1008adb:	mov    QWORD PTR [rsp+0xa0],r14
 1008ae3:	mov    DWORD PTR [rsp+0xa8],r14d
 1008aeb:	xor    edx,edx
 1008aed:	lea    rcx,[rsp+0xdc]
 1008af5:	call   0x1009470
 1008afa:	mov    QWORD PTR [rsp+0xa0],rax
 1008b02:	mov    rdi,rax
 1008b05:	mov    r9d,0x1030
 1008b0b:	lea    r8,[rsp+0x1550]
 1008b13:	mov    rdx,rax
 1008b16:	xor    ecx,ecx
 1008b18:	call   QWORD PTR [rip+0xffffffffffff8a8a]        # 0x10015a8
 1008b1e:	test   rdi,rdi
 1008b21:	je     0x1008b2b
 1008b23:	mov    rcx,rdi
 1008b26:	call   0x100bf30
 1008b2b:	call   QWORD PTR [rip+0xffffffffffff8ad7]        # 0x1001608
 1008b31:	mov    rcx,QWORD PTR [rip+0x1c7e0]        # 0x1025318
 1008b38:	test   rcx,rcx
 1008b3b:	je     0x1008b43
 1008b3d:	call   QWORD PTR [rip+0xffffffffffff8655]        # 0x1001198
 1008b43:	mov    rcx,QWORD PTR [rip+0x1c7de]        # 0x1025328
 1008b4a:	test   rcx,rcx
 1008b4d:	je     0x1008b55
 1008b4f:	call   QWORD PTR [rip+0xffffffffffff8643]        # 0x1001198
 1008b55:	mov    rcx,QWORD PTR [rip+0x1c7c4]        # 0x1025320
 1008b5c:	test   rcx,rcx
 1008b5f:	je     0x1008b67
 1008b61:	call   QWORD PTR [rip+0xffffffffffff8631]        # 0x1001198
 1008b67:	lea    rcx,[rip+0x1c7ca]        # 0x1025338
 1008b6e:	call   QWORD PTR [rip+0xffffffffffff86d4]        # 0x1001248
 1008b74:	lea    rcx,[rip+0x1c7e5]        # 0x1025360
 1008b7b:	call   0x1007c10
 1008b80:	jmp    0x1008b93
 1008b82:	mov    DWORD PTR [rsp+0x50],0x0
 1008b8a:	mov    ebx,0x2
 1008b8f:	mov    DWORD PTR [rsp+0x50],ebx
 1008b93:	mov    eax,ebx
 1008b95:	mov    rcx,QWORD PTR [rsp+0x1660]
 1008b9d:	xor    rcx,rsp
 1008ba0:	call   0x100c0d0
 1008ba5:	lea    r11,[rsp+0x1670]
 1008bad:	mov    rbx,QWORD PTR [r11+0x10]
 1008bb1:	mov    rsi,QWORD PTR [r11+0x18]
 1008bb5:	mov    rdi,QWORD PTR [r11+0x20]
 1008bb9:	mov    rsp,r11
 1008bbc:	pop    r14
 1008bbe:	ret    
 1008bbf:	int3   
 1008bc0:	int3   
 1008bc1:	int3   
 1008bc2:	int3   
 1008bc3:	int3   
 1008bc4:	int3   
 1008bc5:	int3   
 1008bc6:	int3   
 1008bc7:	int3   
 1008bc8:	int3   
 1008bc9:	int3   
 1008bca:	int3   
 1008bcb:	int3   
 1008bcc:	int3   
 1008bcd:	int3   
 1008bce:	int3   
 1008bcf:	int3   
 1008bd0:	rex push rbp
 1008bd2:	push   r12
 1008bd4:	push   r13
 1008bd6:	push   r14
 1008bd8:	push   r15
 1008bda:	sub    rsp,0x40
 1008bde:	lea    rbp,[rsp+0x30]
 1008be3:	mov    QWORD PTR [rbp+0x40],rbx
 1008be7:	mov    QWORD PTR [rbp+0x48],rsi
 1008beb:	mov    QWORD PTR [rbp+0x50],rdi
 1008bef:	mov    rax,QWORD PTR [rip+0x1ba6a]        # 0x1024660
 1008bf6:	xor    rax,rbp
 1008bf9:	mov    QWORD PTR [rbp+0x0],rax
 1008bfd:	mov    r13,rdx
 1008c00:	mov    r12,rcx
 1008c03:	test   rdx,rdx
 1008c06:	jne    0x1008c12
 1008c08:	mov    eax,0x80004003
 1008c0d:	jmp    0x1008cf8
 1008c12:	xor    ebx,ebx
 1008c14:	mov    QWORD PTR [rdx],rbx
 1008c17:	lea    ecx,[rbx+0x38]
 1008c1a:	call   0x100bce4
 1008c1f:	mov    rsi,rax
 1008c22:	test   rax,rax
 1008c25:	je     0x1008cf3
 1008c2b:	mov    QWORD PTR [rax+0x8],rbx
 1008c2f:	mov    QWORD PTR [rax+0x20],rbx
 1008c33:	mov    QWORD PTR [rax+0x18],rbx
 1008c37:	mov    QWORD PTR [rax+0x10],rbx
 1008c3b:	mov    DWORD PTR [rax+0x28],ebx
 1008c3e:	mov    DWORD PTR [rax+0x30],ebx
 1008c41:	lea    rax,[rip+0xffffffffffff8c68]        # 0x10018b0
 1008c48:	mov    QWORD PTR [rsi],rax
 1008c4b:	mov    rcx,QWORD PTR [rip+0x1c646]        # 0x1025298
 1008c52:	mov    rdx,QWORD PTR [rcx]
 1008c55:	call   QWORD PTR [rdx+0x8]
 1008c58:	mov    r11d,DWORD PTR [rip+0x1c679]        # 0x10252d8
 1008c5f:	test   r11b,0x1
 1008c63:	jne    0x1008c86
 1008c65:	or     r11d,0x1
 1008c69:	mov    QWORD PTR [rip+0x1c654],0x10        # 0x10252c8
 1008c74:	mov    QWORD PTR [rip+0x1c651],0xffffffffffffffff        # 0x10252d0
 1008c7f:	mov    DWORD PTR [rip+0x1c652],r11d        # 0x10252d8
 1008c86:	mov    ecx,0x8
 1008c8b:	lea    rdi,[rip+0x1c636]        # 0x10252c8
 1008c92:	call   0x10074a0
 1008c97:	test   al,al
 1008c99:	je     0x1008cac
 1008c9b:	mov    ecx,DWORD PTR [rsp]
 1008c9e:	sub    rsp,0x10
 1008ca2:	lea    r15,[rsp+0x30]
 1008ca7:	mov    eax,DWORD PTR [r15]
 1008caa:	jmp    0x1008ccb
 1008cac:	mov    ecx,0x18
 1008cb1:	call   QWORD PTR [rip+0xffffffffffff8781]        # 0x1001438
 1008cb7:	test   rax,rax
 1008cba:	jne    0x1008cc1
 1008cbc:	mov    r15,rbx
 1008cbf:	jmp    0x1008ccb
 1008cc1:	mov    QWORD PTR [rax],rbx
 1008cc4:	lea    r15,[rax+0x10]
 1008cc8:	mov    rbx,rax
 1008ccb:	test   r15,r15
 1008cce:	jne    0x1008d1e
 1008cd0:	mov    rax,QWORD PTR [rsi]
 1008cd3:	lea    edx,[r15+0x1]
 1008cd7:	mov    rcx,rsi
 1008cda:	call   QWORD PTR [rax+0x38]
 1008cdd:	test   rbx,rbx
 1008ce0:	je     0x1008cf3
 1008ce2:	mov    rcx,rbx
 1008ce5:	mov    rbx,QWORD PTR [rbx]
 1008ce8:	call   QWORD PTR [rip+0xffffffffffff8742]        # 0x1001430
 1008cee:	test   rbx,rbx
 1008cf1:	jne    0x1008ce2
 1008cf3:	mov    eax,0x8007000e
 1008cf8:	mov    rcx,QWORD PTR [rbp+0x0]
 1008cfc:	xor    rcx,rbp
 1008cff:	call   0x100c0d0
 1008d04:	mov    rbx,QWORD PTR [rbp+0x40]
 1008d08:	mov    rsi,QWORD PTR [rbp+0x48]
 1008d0c:	mov    rdi,QWORD PTR [rbp+0x50]
 1008d10:	lea    rsp,[rbp+0x10]
 1008d14:	pop    r15
 1008d16:	pop    r14
 1008d18:	pop    r13
 1008d1a:	pop    r12
 1008d1c:	pop    rbp
 1008d1d:	ret    
 1008d1e:	cmp    QWORD PTR [rip+0x1c5a2],0xffffffffffffffff        # 0x10252c8
 1008d26:	je     0x1008d5b
 1008d28:	mov    r14,r15
 1008d2b:	nop    DWORD PTR [rax+rax*1+0x0]
 1008d30:	mov    rax,QWORD PTR [rdi]
 1008d33:	cmp    rax,0xfffffffffffffffe
 1008d37:	jne    0x1008d46
 1008d39:	mov    rax,QWORD PTR [rdi+0x8]
 1008d3d:	xor    ecx,ecx
 1008d3f:	call   rax
 1008d41:	mov    rdi,rax
 1008d44:	jmp    0x1008d55
 1008d46:	add    rax,r12
 1008d49:	add    r14,0x8
 1008d4d:	add    rdi,0x8
 1008d51:	mov    QWORD PTR [r14-0x8],rax
 1008d55:	cmp    QWORD PTR [rdi],0xffffffffffffffff
 1008d59:	jne    0x1008d30
 1008d5b:	lea    r8,[r15+0x8]
 1008d5f:	mov    r9,r12
 1008d62:	mov    rdx,r15
 1008d65:	mov    rcx,rsi
 1008d68:	mov    DWORD PTR [rsp+0x20],0x3
 1008d70:	call   0x1009920
 1008d75:	mov    rcx,rsi
 1008d78:	mov    edi,eax
 1008d7a:	test   eax,eax
 1008d7c:	jns    0x1008da8
 1008d7e:	mov    r8,QWORD PTR [rsi]
 1008d81:	mov    edx,0x1
 1008d86:	call   QWORD PTR [r8+0x38]
 1008d8a:	test   rbx,rbx
 1008d8d:	je     0x1008da1
 1008d8f:	nop
 1008d90:	mov    rcx,rbx
 1008d93:	mov    rbx,QWORD PTR [rbx]
 1008d96:	call   QWORD PTR [rip+0xffffffffffff8694]        # 0x1001430
 1008d9c:	test   rbx,rbx
 1008d9f:	jne    0x1008d90
 1008da1:	mov    eax,edi
 1008da3:	jmp    0x1008cf8
 1008da8:	mov    rax,QWORD PTR [rsi]
 1008dab:	lea    rdx,[rip+0xffffffffffff8a06]        # 0x10017b8
 1008db2:	mov    r8,r13
 1008db5:	call   QWORD PTR [rax]
 1008db7:	mov    edi,eax
 1008db9:	test   eax,eax
 1008dbb:	jns    0x1008dcc
 1008dbd:	mov    r8,QWORD PTR [rsi]
 1008dc0:	mov    edx,0x1
 1008dc5:	mov    rcx,rsi
 1008dc8:	call   QWORD PTR [r8+0x38]
 1008dcc:	test   rbx,rbx
 1008dcf:	je     0x1008da1
 1008dd1:	mov    rcx,rbx
 1008dd4:	mov    rbx,QWORD PTR [rbx]
 1008dd7:	call   QWORD PTR [rip+0xffffffffffff8653]        # 0x1001430
 1008ddd:	test   rbx,rbx
 1008de0:	jne    0x1008dd1
 1008de2:	mov    eax,edi
 1008de4:	jmp    0x1008cf8
 1008de9:	int3   
 1008dea:	int3   
 1008deb:	int3   
 1008dec:	int3   
 1008ded:	int3   
 1008dee:	int3   
 1008def:	int3   
 1008df0:	rex push rdi
 1008df2:	push   r14
 1008df4:	push   r15
 1008df6:	sub    rsp,0x50
 1008dfa:	mov    rax,QWORD PTR [rip+0x1b85f]        # 0x1024660
 1008e01:	xor    rax,rsp
 1008e04:	mov    QWORD PTR [rsp+0x30],rax
 1008e09:	mov    r14,r8
 1008e0c:	mov    rdi,rdx
 1008e0f:	mov    r15,rcx
 1008e12:	test   r8,r8
 1008e15:	jne    0x1008e21
 1008e17:	mov    eax,0x80004003
 1008e1c:	jmp    0x1008efa
 1008e21:	mov    QWORD PTR [r8],0x0
 1008e28:	mov    eax,DWORD PTR [rip+0x1c4aa]        # 0x10252d8
 1008e2e:	mov    QWORD PTR [rsp+0x78],rbx
 1008e33:	mov    QWORD PTR [rsp+0x48],rbp
 1008e38:	mov    ebp,0x80040200
 1008e3d:	test   al,0x1
 1008e3f:	jne    0x1008e63
 1008e41:	or     eax,0x1
 1008e44:	mov    QWORD PTR [rip+0x1c481],0xffffffffffffffff        # 0x10252d0
 1008e4f:	mov    DWORD PTR [rip+0x1c483],eax        # 0x10252d8
 1008e55:	mov    eax,0x10
 1008e5a:	mov    QWORD PTR [rip+0x1c467],rax        # 0x10252c8
 1008e61:	jmp    0x1008e6a
 1008e63:	mov    rax,QWORD PTR [rip+0x1c45e]        # 0x10252c8
 1008e6a:	lea    rbx,[rip+0x1c457]        # 0x10252c8
 1008e71:	cmp    rax,0xffffffffffffffff
 1008e75:	je     0x1008eee
 1008e77:	mov    QWORD PTR [rsp+0x40],rsi
 1008e7c:	nop    DWORD PTR [rax+0x0]
 1008e80:	mov    rax,QWORD PTR [rbx]
 1008e83:	cmp    rax,0xfffffffffffffffe
 1008e87:	jne    0x1008e96
 1008e89:	mov    rax,QWORD PTR [rbx+0x8]
 1008e8d:	xor    ecx,ecx
 1008e8f:	call   rax
 1008e91:	mov    rbx,rax
 1008e94:	jmp    0x1008ed3
 1008e96:	lea    rsi,[rax+r15*1]
 1008e9a:	lea    rdx,[rsp+0x20]
 1008e9f:	mov    rax,QWORD PTR [rsi]
 1008ea2:	mov    rcx,rsi
 1008ea5:	call   QWORD PTR [rax+0x18]
 1008ea8:	test   eax,eax
 1008eaa:	js     0x1008ecf
 1008eac:	mov    eax,DWORD PTR [rsp+0x20]
 1008eb0:	cmp    DWORD PTR [rdi],eax
 1008eb2:	jne    0x1008ecf
 1008eb4:	mov    eax,DWORD PTR [rsp+0x24]
 1008eb8:	cmp    DWORD PTR [rdi+0x4],eax
 1008ebb:	jne    0x1008ecf
 1008ebd:	mov    eax,DWORD PTR [rsp+0x28]
 1008ec1:	cmp    DWORD PTR [rdi+0x8],eax
 1008ec4:	jne    0x1008ecf
 1008ec6:	mov    eax,DWORD PTR [rsp+0x2c]
 1008eca:	cmp    DWORD PTR [rdi+0xc],eax
 1008ecd:	je     0x1008edb
 1008ecf:	add    rbx,0x8
 1008ed3:	cmp    QWORD PTR [rbx],0xffffffffffffffff
 1008ed7:	jne    0x1008e80
 1008ed9:	jmp    0x1008ee9
 1008edb:	mov    QWORD PTR [r14],rsi
 1008ede:	mov    rax,QWORD PTR [rsi]
 1008ee1:	mov    rcx,rsi
 1008ee4:	call   QWORD PTR [rax+0x8]
 1008ee7:	xor    ebp,ebp
 1008ee9:	mov    rsi,QWORD PTR [rsp+0x40]
 1008eee:	mov    rbx,QWORD PTR [rsp+0x78]
 1008ef3:	mov    eax,ebp
 1008ef5:	mov    rbp,QWORD PTR [rsp+0x48]
 1008efa:	mov    rcx,QWORD PTR [rsp+0x30]
 1008eff:	xor    rcx,rsp
 1008f02:	call   0x100c0d0
 1008f07:	add    rsp,0x50
 1008f0b:	pop    r15
 1008f0d:	pop    r14
 1008f0f:	pop    rdi
 1008f10:	ret    
 1008f11:	int3   
 1008f12:	int3   
 1008f13:	int3   
 1008f14:	int3   
 1008f15:	int3   
 1008f16:	int3   
 1008f17:	int3   
 1008f18:	int3   
 1008f19:	int3   
 1008f1a:	int3   
 1008f1b:	int3   
 1008f1c:	int3   
 1008f1d:	int3   
 1008f1e:	int3   
 1008f1f:	int3   
 1008f20:	sub    rsp,0x28
 1008f24:	test   r8,r8
 1008f27:	jne    0x1008f33
 1008f29:	mov    eax,0x80004003
 1008f2e:	add    rsp,0x28
 1008f32:	ret    
 1008f33:	mov    QWORD PTR [r8],0x0
 1008f3a:	mov    r9d,DWORD PTR [rdx]
 1008f3d:	cmp    r9d,0xb196b286
 1008f44:	jne    0x1008f67
 1008f46:	mov    eax,DWORD PTR [rip+0xffffffffffff89a8]        # 0x10018f4
 1008f4c:	cmp    DWORD PTR [rdx+0x4],eax
 1008f4f:	jne    0x1008f67
 1008f51:	mov    eax,DWORD PTR [rip+0xffffffffffff89a1]        # 0x10018f8
 1008f57:	cmp    DWORD PTR [rdx+0x8],eax
 1008f5a:	jne    0x1008f67
 1008f5c:	mov    eax,DWORD PTR [rip+0xffffffffffff899a]        # 0x10018fc
 1008f62:	cmp    DWORD PTR [rdx+0xc],eax
 1008f65:	je     0x1008f84
 1008f67:	test   r9d,r9d
 1008f6a:	jne    0x1008f94
 1008f6c:	cmp    DWORD PTR [rdx+0x4],r9d
 1008f70:	jne    0x1008f94
 1008f72:	cmp    DWORD PTR [rdx+0x8],0xc0
 1008f79:	jne    0x1008f94
 1008f7b:	cmp    DWORD PTR [rdx+0xc],0x46000000
 1008f82:	jne    0x1008f94
 1008f84:	mov    QWORD PTR [r8],rcx
 1008f87:	mov    rax,QWORD PTR [rcx]
 1008f8a:	call   QWORD PTR [rax+0x8]
 1008f8d:	xor    eax,eax
 1008f8f:	add    rsp,0x28
 1008f93:	ret    
 1008f94:	mov    eax,0x80004002
 1008f99:	add    rsp,0x28
 1008f9d:	ret    
 1008f9e:	int3   
 1008f9f:	int3   
 1008fa0:	int3   
 1008fa1:	int3   
 1008fa2:	int3   
 1008fa3:	int3   
 1008fa4:	int3   
 1008fa5:	int3   
 1008fa6:	int3   
 1008fa7:	int3   
 1008fa8:	int3   
 1008fa9:	int3   
 1008faa:	int3   
 1008fab:	int3   
 1008fac:	int3   
 1008fad:	int3   
 1008fae:	int3   
 1008faf:	int3   
 1008fb0:	test   rdx,rdx
 1008fb3:	jne    0x1008fbb
 1008fb5:	mov    eax,0x80004003
 1008fba:	ret    
 1008fbb:	mov    eax,DWORD PTR [rip+0xffffffffffff8b1f]        # 0x1001ae0
 1008fc1:	mov    DWORD PTR [rdx],eax
 1008fc3:	mov    eax,DWORD PTR [rip+0xffffffffffff8b1b]        # 0x1001ae4
 1008fc9:	mov    DWORD PTR [rdx+0x4],eax
 1008fcc:	mov    eax,DWORD PTR [rip+0xffffffffffff8b16]        # 0x1001ae8
 1008fd2:	mov    DWORD PTR [rdx+0x8],eax
 1008fd5:	mov    eax,DWORD PTR [rip+0xffffffffffff8b11]        # 0x1001aec
 1008fdb:	mov    DWORD PTR [rdx+0xc],eax
 1008fde:	xor    eax,eax
 1008fe0:	ret    
 1008fe1:	int3   
 1008fe2:	int3   
 1008fe3:	int3   
 1008fe4:	int3   
 1008fe5:	int3   
 1008fe6:	int3   
 1008fe7:	int3   
 1008fe8:	int3   
 1008fe9:	int3   
 1008fea:	int3   
 1008feb:	int3   
 1008fec:	int3   
 1008fed:	int3   
 1008fee:	int3   
 1008fef:	int3   
 1008ff0:	test   rcx,rcx
 1008ff3:	je     0x100900a
 1008ff5:	mov    rax,QWORD PTR [rcx-0x10]
 1008ff9:	add    rcx,0xfffffffffffffff0
 1008ffd:	mov    r8,rdx
 1009000:	lea    rdx,[rip+0xffffffffffff8821]        # 0x1001828
 1009007:	rex.W jmp QWORD PTR [rax]
 100900a:	mov    rax,QWORD PTR [rcx]
 100900d:	mov    r8,rdx
 1009010:	lea    rdx,[rip+0xffffffffffff8811]        # 0x1001828
 1009017:	rex.W jmp QWORD PTR [rax]
 100901a:	int3   
 100901b:	int3   
 100901c:	int3   
 100901d:	int3   
 100901e:	int3   
 100901f:	int3   
 1009020:	rex push rbx
 1009022:	push   rbp
 1009023:	push   rsi
 1009024:	push   rdi
 1009025:	push   r14
 1009027:	sub    rsp,0x40
 100902b:	mov    rax,QWORD PTR [rip+0x1b62e]        # 0x1024660
 1009032:	xor    rax,rsp
 1009035:	mov    QWORD PTR [rsp+0x38],rax
 100903a:	xor    r14d,r14d
 100903d:	mov    rdi,r8
 1009040:	mov    rbx,rdx
 1009043:	mov    rsi,rcx
 1009046:	lea    rbp,[rcx-0x10]
 100904a:	test   rcx,rcx
 100904d:	jne    0x1009052
 100904f:	mov    ebp,r14d
 1009052:	test   r8,r8
 1009055:	je     0x100905a
 1009057:	mov    DWORD PTR [r8],r14d
 100905a:	test   rdx,rdx
 100905d:	je     0x10090f7
 1009063:	test   r8,r8
 1009066:	je     0x10090f7
 100906c:	mov    rax,QWORD PTR [rcx]
 100906f:	lea    rdx,[rsp+0x28]
 1009074:	call   QWORD PTR [rax+0x18]
 1009077:	mov    r11,QWORD PTR [rbx]
 100907a:	lea    r8,[rsp+0x20]
 100907f:	lea    rdx,[rsp+0x28]
 1009084:	mov    rcx,rbx
 1009087:	call   QWORD PTR [r11]
 100908a:	mov    ebx,eax
 100908c:	test   eax,eax
 100908e:	js     0x10090e4
 1009090:	lea    rcx,[rbp+0x30]
 1009094:	call   QWORD PTR [rip+0xffffffffffff81c6]        # 0x1001260
 100909a:	cmp    QWORD PTR [rsi+0x8],r14
 100909e:	je     0x10090a5
 10090a0:	mov    eax,r14d
 10090a3:	jmp    0x10090b3
 10090a5:	mov    rax,QWORD PTR [rsp+0x20]
 10090aa:	mov    QWORD PTR [rsi+0x8],rax
 10090ae:	mov    eax,0x1
 10090b3:	test   eax,eax
 10090b5:	lea    rcx,[rbp+0x30]
 10090b9:	mov    ebx,0x80040201
 10090be:	mov    DWORD PTR [rdi],eax
 10090c0:	cmovne ebx,r14d
 10090c4:	call   QWORD PTR [rip+0xffffffffffff818e]        # 0x1001258
 10090ca:	test   ebx,ebx
 10090cc:	je     0x10090db
 10090ce:	mov    rcx,QWORD PTR [rsp+0x20]
 10090d3:	mov    rax,QWORD PTR [rcx]
 10090d6:	call   QWORD PTR [rax+0x10]
 10090d9:	test   ebx,ebx
 10090db:	jns    0x10090e0
 10090dd:	mov    DWORD PTR [rdi],r14d
 10090e0:	mov    eax,ebx
 10090e2:	jmp    0x10090fc
 10090e4:	cmp    eax,0x80004002
 10090e9:	jne    0x10090d9
 10090eb:	mov    ebx,0x80040202
 10090f0:	mov    DWORD PTR [rdi],r14d
 10090f3:	mov    eax,ebx
 10090f5:	jmp    0x10090fc
 10090f7:	mov    eax,0x80004003
 10090fc:	mov    rcx,QWORD PTR [rsp+0x38]
 1009101:	xor    rcx,rsp
 1009104:	call   0x100c0d0
 1009109:	add    rsp,0x40
 100910d:	pop    r14
 100910f:	pop    rdi
 1009110:	pop    rsi
 1009111:	pop    rbp
 1009112:	pop    rbx
 1009113:	ret    
 1009114:	int3   
 1009115:	int3   
 1009116:	int3   
 1009117:	int3   
 1009118:	int3   
 1009119:	int3   
 100911a:	int3   
 100911b:	int3   
 100911c:	int3   
 100911d:	int3   
 100911e:	int3   
 100911f:	int3   
 1009120:	rex push rbx
 1009122:	sub    rsp,0x20
 1009126:	mov    QWORD PTR [rsp+0x30],rbp
 100912b:	mov    QWORD PTR [rsp+0x38],rsi
 1009130:	mov    QWORD PTR [rsp+0x48],r14
 1009135:	xor    r14d,r14d
 1009138:	mov    esi,edx
 100913a:	mov    rbx,rcx
 100913d:	lea    rax,[rcx-0x10]
 1009141:	test   rcx,rcx
 1009144:	jne    0x1009149
 1009146:	mov    eax,r14d
 1009149:	lea    rbp,[rax+0x30]
 100914d:	mov    QWORD PTR [rsp+0x40],rdi
 1009152:	mov    rcx,rbp
 1009155:	call   QWORD PTR [rip+0xffffffffffff8105]        # 0x1001260
 100915b:	cmp    esi,0x1
 100915e:	jne    0x1009166
 1009160:	mov    rdi,QWORD PTR [rbx+0x8]
 1009164:	jmp    0x1009169
 1009166:	mov    rdi,r14
 1009169:	cmp    esi,0x1
 100916c:	mov    rsi,QWORD PTR [rsp+0x38]
 1009171:	jne    0x1009184
 1009173:	cmp    QWORD PTR [rbx+0x8],r14
 1009177:	je     0x1009184
 1009179:	mov    QWORD PTR [rbx+0x8],r14
 100917d:	mov    eax,0x1
 1009182:	jmp    0x1009187
 1009184:	mov    eax,r14d
 1009187:	test   eax,eax
 1009189:	mov    ebx,0x80040200
 100918e:	mov    rcx,rbp
 1009191:	cmovne ebx,r14d
 1009195:	call   QWORD PTR [rip+0xffffffffffff80bd]        # 0x1001258
 100919b:	mov    r14,QWORD PTR [rsp+0x48]
 10091a0:	mov    rbp,QWORD PTR [rsp+0x30]
 10091a5:	test   ebx,ebx
 10091a7:	jne    0x10091b7
 10091a9:	test   rdi,rdi
 10091ac:	je     0x10091b7
 10091ae:	mov    rdx,QWORD PTR [rdi]
 10091b1:	mov    rcx,rdi
 10091b4:	call   QWORD PTR [rdx+0x10]
 10091b7:	mov    eax,ebx
 10091b9:	mov    rdi,QWORD PTR [rsp+0x40]
 10091be:	add    rsp,0x20
 10091c2:	pop    rbx
 10091c3:	ret    
 10091c4:	int3   
 10091c5:	int3   
 10091c6:	int3   
 10091c7:	int3   
 10091c8:	int3   
 10091c9:	int3   
 10091ca:	int3   
 10091cb:	int3   
 10091cc:	int3   
 10091cd:	int3   
 10091ce:	int3   
 10091cf:	int3   
 10091d0:	rex push rbp
 10091d2:	push   r14
 10091d4:	sub    rsp,0x38
 10091d8:	mov    r14,rdx
 10091db:	mov    rbp,rcx
 10091de:	test   rdx,rdx
 10091e1:	jne    0x10091f0
 10091e3:	mov    eax,0x80004003
 10091e8:	add    rsp,0x38
 10091ec:	pop    r14
 10091ee:	pop    rbp
 10091ef:	ret    
 10091f0:	mov    QWORD PTR [rsp+0x50],rbx
 10091f5:	xor    ebx,ebx
 10091f7:	mov    QWORD PTR [rsp+0x60],rdi
 10091fc:	lea    ecx,[rbx+0x38]
 10091ff:	mov    QWORD PTR [rdx],rbx
 1009202:	call   0x100bce4
 1009207:	mov    rdi,rax
 100920a:	test   rax,rax
 100920d:	je     0x1009376
 1009213:	mov    QWORD PTR [rax+0x8],rbx
 1009217:	mov    QWORD PTR [rax+0x20],rbx
 100921b:	mov    QWORD PTR [rax+0x18],rbx
 100921f:	mov    QWORD PTR [rax+0x10],rbx
 1009223:	mov    DWORD PTR [rax+0x28],ebx
 1009226:	mov    DWORD PTR [rax+0x30],ebx
 1009229:	lea    rax,[rip+0xffffffffffff8830]        # 0x1001a60
 1009230:	mov    QWORD PTR [rsp+0x30],r12
 1009235:	mov    QWORD PTR [rsp+0x28],r13
 100923a:	mov    QWORD PTR [rdi],rax
 100923d:	mov    rcx,QWORD PTR [rip+0x1c054]        # 0x1025298
 1009244:	mov    QWORD PTR [rsp+0x20],r15
 1009249:	mov    rax,QWORD PTR [rcx]
 100924c:	call   QWORD PTR [rax+0x8]
 100924f:	test   rbp,rbp
 1009252:	je     0x1009258
 1009254:	lea    rbx,[rbp-0x10]
 1009258:	lea    r13,[rbx+0x30]
 100925c:	mov    rcx,r13
 100925f:	call   QWORD PTR [rip+0xffffffffffff7ffb]        # 0x1001260
 1009265:	mov    rcx,0xffffffffffffffff
 100926c:	mov    ebx,0x1
 1009271:	mov    eax,0x10
 1009276:	mul    rbx
 1009279:	cmovo  rax,rcx
 100927d:	mov    rcx,rax
 1009280:	call   0x100bf24
 1009285:	mov    r12,rax
 1009288:	test   rax,rax
 100928b:	jne    0x10092c7
 100928d:	mov    rax,QWORD PTR [rdi]
 1009290:	mov    edx,ebx
 1009292:	mov    rcx,rdi
 1009295:	call   QWORD PTR [rax+0x38]
 1009298:	mov    rcx,r13
 100929b:	call   QWORD PTR [rip+0xffffffffffff7fb7]        # 0x1001258
 10092a1:	mov    eax,0x8007000e
 10092a6:	mov    r13,QWORD PTR [rsp+0x28]
 10092ab:	mov    r12,QWORD PTR [rsp+0x30]
 10092b0:	mov    r15,QWORD PTR [rsp+0x20]
 10092b5:	mov    rbx,QWORD PTR [rsp+0x50]
 10092ba:	mov    rdi,QWORD PTR [rsp+0x60]
 10092bf:	add    rsp,0x38
 10092c3:	pop    r14
 10092c5:	pop    rbp
 10092c6:	ret    
 10092c7:	lea    rbx,[rbp+0x8]
 10092cb:	add    rbp,0x10
 10092cf:	mov    QWORD PTR [rsp+0x58],rsi
 10092d4:	mov    rsi,rax
 10092d7:	cmp    rbx,rbp
 10092da:	jae    0x1009308
 10092dc:	nop    DWORD PTR [rax+0x0]
 10092e0:	mov    rcx,QWORD PTR [rbx]
 10092e3:	test   rcx,rcx
 10092e6:	je     0x10092ff
 10092e8:	mov    rax,QWORD PTR [rcx]
 10092eb:	call   QWORD PTR [rax+0x8]
 10092ee:	mov    r11,QWORD PTR [rbx]
 10092f1:	mov    DWORD PTR [rsi+0x8],0x1
 10092f8:	mov    QWORD PTR [rsi],r11
 10092fb:	add    rsi,0x10
 10092ff:	add    rbx,0x8
 1009303:	cmp    rbx,rbp
 1009306:	jb     0x10092e0
 1009308:	mov    QWORD PTR [rdi+0x18],rsi
 100930c:	mov    rsi,QWORD PTR [rsp+0x58]
 1009311:	mov    QWORD PTR [rdi+0x10],r12
 1009315:	cmp    QWORD PTR [rdi+0x8],0x0
 100931a:	je     0x1009328
 100931c:	lea    rcx,[rdi+0x8]
 1009320:	xor    edx,edx
 1009322:	call   QWORD PTR [rip+0xffffffffffff7d68]        # 0x1001090
 1009328:	mov    rax,QWORD PTR [rdi+0x10]
 100932c:	mov    rcx,r13
 100932f:	mov    DWORD PTR [rdi+0x28],0x2
 1009336:	mov    QWORD PTR [rdi+0x20],rax
 100933a:	call   QWORD PTR [rip+0xffffffffffff7f18]        # 0x1001258
 1009340:	lea    r8,[rip+0xffffffffffff8461]        # 0x10017a8
 1009347:	lea    rdx,[rip+0xffffffffffff8752]        # 0x1001aa0
 100934e:	mov    r9,r14
 1009351:	mov    rcx,rdi
 1009354:	call   QWORD PTR [rip+0xffffffffffff7d26]        # 0x1001080
 100935a:	mov    ebx,eax
 100935c:	test   eax,eax
 100935e:	jns    0x100936f
 1009360:	mov    r8,QWORD PTR [rdi]
 1009363:	mov    edx,0x1
 1009368:	mov    rcx,rdi
 100936b:	call   QWORD PTR [r8+0x38]
 100936f:	mov    eax,ebx
 1009371:	jmp    0x10092a6
 1009376:	mov    rbx,QWORD PTR [rsp+0x50]
 100937b:	mov    rdi,QWORD PTR [rsp+0x60]
 1009380:	mov    eax,0x8007000e
 1009385:	add    rsp,0x38
 1009389:	pop    r14
 100938b:	pop    rbp
 100938c:	ret    
 100938d:	int3   
 100938e:	int3   
 100938f:	int3   
 1009390:	int3   
 1009391:	int3   
 1009392:	int3   
 1009393:	int3   
 1009394:	int3   
 1009395:	int3   
 1009396:	int3   
 1009397:	int3   
 1009398:	int3   
 1009399:	int3   
 100939a:	int3   
 100939b:	int3   
 100939c:	int3   
 100939d:	int3   
 100939e:	int3   
 100939f:	int3   
 10093a0:	rex push rbx
 10093a2:	sub    rsp,0x20
 10093a6:	mov    rbx,rdx
 10093a9:	test   rdx,rdx
 10093ac:	jne    0x10093b9
 10093ae:	mov    eax,0x80004003
 10093b3:	add    rsp,0x20
 10093b7:	pop    rbx
 10093b8:	ret    
 10093b9:	mov    rcx,QWORD PTR [rip+0x1aec8]        # 0x1024288
 10093c0:	xor    eax,eax
 10093c2:	test   rcx,rcx
 10093c5:	jne    0x10093dc
 10093c7:	lea    rcx,[rip+0x1aea2]        # 0x1024270
 10093ce:	xor    edx,edx
 10093d0:	call   0x1007f50
 10093d5:	mov    rcx,QWORD PTR [rip+0x1aeac]        # 0x1024288
 10093dc:	mov    QWORD PTR [rbx],rcx
 10093df:	mov    rcx,QWORD PTR [rip+0x1aea2]        # 0x1024288
 10093e6:	test   rcx,rcx
 10093e9:	je     0x10093f3
 10093eb:	mov    rax,QWORD PTR [rcx]
 10093ee:	call   QWORD PTR [rax+0x8]
 10093f1:	xor    eax,eax
 10093f3:	add    rsp,0x20
 10093f7:	pop    rbx
 10093f8:	ret    
 10093f9:	int3   
 10093fa:	int3   
 10093fb:	int3   
 10093fc:	int3   
 10093fd:	int3   
 10093fe:	int3   
 10093ff:	int3   
 1009400:	test   r8,r8
 1009403:	jne    0x100940b
 1009405:	mov    eax,0x80004003
 100940a:	ret    
 100940b:	mov    eax,DWORD PTR [rip+0xffffffffffff8d9f]        # 0x10021b0
 1009411:	mov    DWORD PTR [r8],eax
 1009414:	mov    eax,DWORD PTR [rip+0xffffffffffff8d9a]        # 0x10021b4
 100941a:	mov    DWORD PTR [r8+0x4],eax
 100941e:	mov    eax,DWORD PTR [rip+0xffffffffffff8d94]        # 0x10021b8
 1009424:	mov    DWORD PTR [r8+0x8],eax
 1009428:	mov    eax,DWORD PTR [rip+0xffffffffffff8d8e]        # 0x10021bc
 100942e:	mov    DWORD PTR [r8+0xc],eax
 1009432:	cmp    edx,0x1
 1009435:	je     0x100943d
 1009437:	mov    eax,0x80070057
 100943c:	ret    
 100943d:	mov    eax,DWORD PTR [rip+0xffffffffffff869d]        # 0x1001ae0
 1009443:	mov    DWORD PTR [r8],eax
 1009446:	mov    eax,DWORD PTR [rip+0xffffffffffff8698]        # 0x1001ae4
 100944c:	mov    DWORD PTR [r8+0x4],eax
 1009450:	mov    eax,DWORD PTR [rip+0xffffffffffff8692]        # 0x1001ae8
 1009456:	mov    DWORD PTR [r8+0x8],eax
 100945a:	mov    eax,DWORD PTR [rip+0xffffffffffff868c]        # 0x1001aec
 1009460:	mov    DWORD PTR [r8+0xc],eax
 1009464:	xor    eax,eax
 1009466:	ret    
 1009467:	int3   
 1009468:	int3   
 1009469:	int3   
 100946a:	int3   
 100946b:	int3   
 100946c:	int3   
 100946d:	int3   
 100946e:	int3   
 100946f:	int3   
 1009470:	mov    QWORD PTR [rsp+0x18],rbp
 1009475:	push   rsi
 1009476:	sub    rsp,0x40
 100947a:	xor    ebp,ebp
 100947c:	mov    rsi,rcx
 100947f:	test   edx,edx
 1009481:	mov    ecx,ebp
 1009483:	mov    eax,0x1
 1009488:	cmovne ecx,eax
 100948b:	test   rsi,rsi
 100948e:	je     0x1009529
 1009494:	mov    QWORD PTR [rsp+0x38],rbp
 1009499:	mov    QWORD PTR [rsp+0x30],rbp
 100949e:	or     r9d,0xffffffff
 10094a2:	mov    r8,rsi
 10094a5:	xor    edx,edx
 10094a7:	mov    DWORD PTR [rsp+0x28],ebp
 10094ab:	mov    QWORD PTR [rsp+0x20],rbp
 10094b0:	call   QWORD PTR [rip+0xffffffffffff7caa]        # 0x1001160
 10094b6:	test   eax,eax
 10094b8:	je     0x1009529
 10094ba:	mov    QWORD PTR [rsp+0x58],rdi
 10094bf:	lea    edi,[rax+0x1]
 10094c2:	cmp    edi,eax
 10094c4:	jb     0x1009516
 10094c6:	mov    ecx,edi
 10094c8:	mov    QWORD PTR [rsp+0x50],rbx
 10094cd:	call   0x100bf24
 10094d2:	mov    rbx,rax
 10094d5:	test   rax,rax
 10094d8:	je     0x1009501
 10094da:	mov    QWORD PTR [rsp+0x38],rbp
 10094df:	mov    QWORD PTR [rsp+0x30],rbp
 10094e4:	or     r9d,0xffffffff
 10094e8:	mov    r8,rsi
 10094eb:	xor    edx,edx
 10094ed:	xor    ecx,ecx
 10094ef:	mov    DWORD PTR [rsp+0x28],edi
 10094f3:	mov    QWORD PTR [rsp+0x20],rax
 10094f8:	call   QWORD PTR [rip+0xffffffffffff7c62]        # 0x1001160
 10094fe:	mov    rax,rbx
 1009501:	mov    rbx,QWORD PTR [rsp+0x50]
 1009506:	mov    rdi,QWORD PTR [rsp+0x58]
 100950b:	mov    rbp,QWORD PTR [rsp+0x60]
 1009510:	add    rsp,0x40
 1009514:	pop    rsi
 1009515:	ret    
 1009516:	mov    rax,rbp
 1009519:	mov    rdi,QWORD PTR [rsp+0x58]
 100951e:	mov    rbp,QWORD PTR [rsp+0x60]
 1009523:	add    rsp,0x40
 1009527:	pop    rsi
 1009528:	ret    
 1009529:	mov    rax,rbp
 100952c:	mov    rbp,QWORD PTR [rsp+0x60]
 1009531:	add    rsp,0x40
 1009535:	pop    rsi
 1009536:	ret    
 1009537:	int3   
 1009538:	int3   
 1009539:	int3   
 100953a:	int3   
 100953b:	int3   
 100953c:	int3   
 100953d:	int3   
 100953e:	int3   
 100953f:	int3   
 1009540:	mov    QWORD PTR [rsp+0x18],rbx
 1009545:	mov    QWORD PTR [rsp+0x20],rbp
 100954a:	push   rsi
 100954b:	sub    rsp,0x20
 100954f:	or     rax,0xffffffffffffffff
 1009553:	mov    rbx,rcx
 1009556:	mov    rsi,rdx
 1009559:	mov    rcx,rax
 100955c:	nop    DWORD PTR [rax+0x0]
 1009560:	inc    rcx
 1009563:	cmp    BYTE PTR [rbx+rcx*1],0x0
 1009567:	jne    0x1009560
 1009569:	nop    DWORD PTR [rax+0x0]
 1009570:	inc    rax
 1009573:	cmp    BYTE PTR [rdx+rax*1],0x0
 1009577:	jne    0x1009570
 1009579:	sub    ecx,eax
 100957b:	mov    QWORD PTR [rsp+0x30],rdi
 1009580:	mov    QWORD PTR [rsp+0x38],r14
 1009585:	movsxd rbp,ecx
 1009588:	js     0x10095bf
 100958a:	mov    rdi,rbx
 100958d:	movsxd r14,eax
 1009590:	neg    rdi
 1009593:	data16 data16 data16 data16 nop WORD PTR [rax+rax*1+0x0]
 10095a0:	mov    r8,r14
 10095a3:	mov    rdx,rsi
 10095a6:	mov    rcx,rbx
 10095a9:	call   QWORD PTR [rip+0xffffffffffff7de1]        # 0x1001390
 10095af:	test   eax,eax
 10095b1:	je     0x10095db
 10095b3:	inc    rbx
 10095b6:	lea    rax,[rdi+rbx*1]
 10095ba:	cmp    rax,rbp
 10095bd:	jle    0x10095a0
 10095bf:	xor    eax,eax
 10095c1:	mov    r14,QWORD PTR [rsp+0x38]
 10095c6:	mov    rdi,QWORD PTR [rsp+0x30]
 10095cb:	mov    rbx,QWORD PTR [rsp+0x40]
 10095d0:	mov    rbp,QWORD PTR [rsp+0x48]
 10095d5:	add    rsp,0x20
 10095d9:	pop    rsi
 10095da:	ret    
 10095db:	mov    eax,0x1
 10095e0:	jmp    0x10095c1
 10095e2:	int3   
 10095e3:	int3   
 10095e4:	int3   
 10095e5:	int3   
 10095e6:	int3   
 10095e7:	int3   
 10095e8:	int3   
 10095e9:	int3   
 10095ea:	int3   
 10095eb:	int3   
 10095ec:	int3   
 10095ed:	int3   
 10095ee:	int3   
 10095ef:	int3   
 10095f0:	sub    rsp,0x28
 10095f4:	cmp    ecx,0x5
 10095f7:	je     0x1009606
 10095f9:	mov    rcx,QWORD PTR [rip+0x1bd28]        # 0x1025328
 1009600:	call   QWORD PTR [rip+0xffffffffffff7c22]        # 0x1001228
 1009606:	mov    eax,0x1
 100960b:	add    rsp,0x28
 100960f:	ret    
 1009610:	int3   
 1009611:	int3   
 1009612:	int3   
 1009613:	int3   
 1009614:	int3   
 1009615:	int3   
 1009616:	int3   
 1009617:	int3   
 1009618:	int3   
 1009619:	int3   
 100961a:	int3   
 100961b:	int3   
 100961c:	int3   
 100961d:	int3   
 100961e:	int3   
 100961f:	int3   
 1009620:	mov    QWORD PTR [rsp+0x10],rbp
 1009625:	mov    QWORD PTR [rsp+0x18],rsi
 100962a:	push   rdi
 100962b:	sub    rsp,0x20
 100962f:	xor    ebp,ebp
 1009631:	mov    rdi,r8
 1009634:	mov    rsi,rcx
 1009637:	test   r9,r9
 100963a:	je     0x100963f
 100963c:	mov    DWORD PTR [r9],ebp
 100963f:	test   r8,r8
 1009642:	je     0x10096f7
 1009648:	cmp    edx,0x1
 100964b:	jbe    0x1009656
 100964d:	test   r9,r9
 1009650:	je     0x10096f7
 1009656:	mov    QWORD PTR [rsp+0x30],rbx
 100965b:	cmp    QWORD PTR [rcx+0x10],rbp
 100965f:	je     0x10096f0
 1009665:	mov    rbx,QWORD PTR [rcx+0x18]
 1009669:	test   rbx,rbx
 100966c:	je     0x10096f0
 1009672:	mov    rax,QWORD PTR [rcx+0x20]
 1009676:	test   rax,rax
 1009679:	je     0x10096f0
 100967b:	sub    rbx,rax
 100967e:	mov    eax,0x1
 1009683:	sar    rbx,0x3
 1009687:	cmp    ebx,edx
 1009689:	cmovb  ebp,eax
 100968c:	cmp    edx,ebx
 100968e:	cmovb  ebx,edx
 1009691:	test   r9,r9
 1009694:	je     0x1009699
 1009696:	mov    DWORD PTR [r9],ebx
 1009699:	test   ebx,ebx
 100969b:	je     0x10096ce
 100969d:	nop    DWORD PTR [rax]
 10096a0:	mov    rcx,QWORD PTR [rsi+0x20]
 10096a4:	dec    ebx
 10096a6:	test   rdi,rdi
 10096a9:	je     0x10096e5
 10096ab:	test   rcx,rcx
 10096ae:	je     0x10096e5
 10096b0:	mov    rcx,QWORD PTR [rcx]
 10096b3:	mov    QWORD PTR [rdi],rcx
 10096b6:	test   rcx,rcx
 10096b9:	je     0x10096c1
 10096bb:	mov    rax,QWORD PTR [rcx]
 10096be:	call   QWORD PTR [rax+0x8]
 10096c1:	add    QWORD PTR [rsi+0x20],0x8
 10096c6:	add    rdi,0x8
 10096ca:	test   ebx,ebx
 10096cc:	jne    0x10096a0
 10096ce:	mov    eax,ebp
 10096d0:	mov    rbx,QWORD PTR [rsp+0x30]
 10096d5:	mov    rbp,QWORD PTR [rsp+0x38]
 10096da:	mov    rsi,QWORD PTR [rsp+0x40]
 10096df:	add    rsp,0x20
 10096e3:	pop    rdi
 10096e4:	ret    
 10096e5:	mov    ecx,0x80004005
 10096ea:	call   0x1007530
 10096ef:	int3   
 10096f0:	mov    eax,0x80004005
 10096f5:	jmp    0x10096d0
 10096f7:	mov    rbp,QWORD PTR [rsp+0x38]
 10096fc:	mov    rsi,QWORD PTR [rsp+0x40]
 1009701:	mov    eax,0x80004003
 1009706:	add    rsp,0x20
 100970a:	pop    rdi
 100970b:	ret    
 100970c:	int3   
 100970d:	int3   
 100970e:	int3   
 100970f:	int3   
 1009710:	int3   
 1009711:	int3   
 1009712:	int3   
 1009713:	int3   
 1009714:	int3   
 1009715:	int3   
 1009716:	int3   
 1009717:	int3   
 1009718:	int3   
 1009719:	int3   
 100971a:	int3   
 100971b:	int3   
 100971c:	int3   
 100971d:	int3   
 100971e:	int3   
 100971f:	int3   
 1009720:	mov    r9,QWORD PTR [rcx+0x20]
 1009724:	mov    rax,QWORD PTR [rcx+0x18]
 1009728:	mov    r8d,edx
 100972b:	sub    rax,r9
 100972e:	mov    r10,rcx
 1009731:	sar    rax,0x3
 1009735:	cmp    edx,eax
 1009737:	cmova  r8d,eax
 100973b:	xor    eax,eax
 100973d:	lea    rcx,[r9+r8*8]
 1009741:	cmp    edx,r8d
 1009744:	mov    QWORD PTR [r10+0x20],rcx
 1009748:	setne  al
 100974b:	ret    
 100974c:	int3   
 100974d:	int3   
 100974e:	int3   
 100974f:	int3   
 1009750:	int3   
 1009751:	int3   
 1009752:	int3   
 1009753:	int3   
 1009754:	int3   
 1009755:	int3   
 1009756:	int3   
 1009757:	int3   
 1009758:	int3   
 1009759:	int3   
 100975a:	int3   
 100975b:	int3   
 100975c:	int3   
 100975d:	int3   
 100975e:	int3   
 100975f:	int3   
 1009760:	mov    rax,QWORD PTR [rcx+0x10]
 1009764:	mov    QWORD PTR [rcx+0x20],rax
 1009768:	xor    eax,eax
 100976a:	ret    
 100976b:	int3   
 100976c:	int3   
 100976d:	int3   
 100976e:	int3   
 100976f:	int3   
 1009770:	int3   
 1009771:	int3   
 1009772:	int3   
 1009773:	int3   
 1009774:	int3   
 1009775:	int3   
 1009776:	int3   
 1009777:	int3   
 1009778:	int3   
 1009779:	int3   
 100977a:	int3   
 100977b:	int3   
 100977c:	int3   
 100977d:	int3   
 100977e:	int3   
 100977f:	int3   
 1009780:	push   r12
 1009782:	push   r14
 1009784:	push   r15
 1009786:	sub    rsp,0x30
 100978a:	xor    r12d,r12d
 100978d:	mov    r15,rdx
 1009790:	mov    r14,rcx
 1009793:	mov    DWORD PTR [rsp+0x58],r12d
 1009798:	test   rdx,rdx
 100979b:	je     0x1009908
 10097a1:	mov    QWORD PTR [rsp+0x50],rbx
 10097a6:	lea    ecx,[r12+0x38]
 10097ab:	mov    QWORD PTR [rdx],r12
 10097ae:	mov    QWORD PTR [rsp+0x28],rsi
 10097b3:	mov    ebx,0x8007000e
 10097b8:	call   0x100bce4
 10097bd:	mov    rsi,rax
 10097c0:	test   rax,rax
 10097c3:	je     0x10097f9
 10097c5:	mov    QWORD PTR [rax+0x8],r12
 10097c9:	mov    QWORD PTR [rax+0x20],r12
 10097cd:	mov    QWORD PTR [rax+0x18],r12
 10097d1:	mov    QWORD PTR [rax+0x10],r12
 10097d5:	mov    DWORD PTR [rax+0x28],r12d
 10097d9:	mov    DWORD PTR [rax+0x30],r12d
 10097dd:	lea    rax,[rip+0xffffffffffff80cc]        # 0x10018b0
 10097e4:	mov    QWORD PTR [rsi],rax
 10097e7:	mov    rcx,QWORD PTR [rip+0x1baaa]        # 0x1025298
 10097ee:	mov    rax,QWORD PTR [rcx]
 10097f1:	call   QWORD PTR [rax+0x8]
 10097f4:	mov    ebx,r12d
 10097f7:	jmp    0x10097fc
 10097f9:	mov    rsi,r12
 10097fc:	test   ebx,ebx
 10097fe:	js     0x10098f1
 1009804:	test   BYTE PTR [r14+0x28],0x2
 1009809:	mov    QWORD PTR [rsp+0x60],rbp
 100980e:	mov    QWORD PTR [rsp+0x20],rdi
 1009813:	je     0x1009832
 1009815:	mov    rax,QWORD PTR [r14]
 1009818:	mov    rcx,r14
 100981b:	mov    ebp,0x1
 1009820:	mov    rdi,r14
 1009823:	mov    QWORD PTR [rsp+0x58],r14
 1009828:	call   QWORD PTR [rax+0x8]
 100982b:	mov    rbx,QWORD PTR [rsp+0x58]
 1009830:	jmp    0x1009853
 1009832:	mov    rbx,QWORD PTR [r14+0x8]
 1009836:	mov    ebp,0x2
 100983b:	mov    QWORD PTR [rsp+0x58],rbx
 1009840:	test   rbx,rbx
 1009843:	je     0x100984e
 1009845:	mov    rax,QWORD PTR [rbx]
 1009848:	mov    rcx,rbx
 100984b:	call   QWORD PTR [rax+0x8]
 100984e:	mov    rdi,QWORD PTR [rsp+0x58]
 1009853:	mov    rcx,QWORD PTR [r14+0x18]
 1009857:	mov    rax,QWORD PTR [r14+0x10]
 100985b:	lea    r11,[rsp+0x58]
 1009860:	mov    rdx,QWORD PTR [r11]
 1009863:	mov    QWORD PTR [rsi+0x18],rcx
 1009867:	lea    rcx,[rsi+0x8]
 100986b:	mov    QWORD PTR [rsi+0x10],rax
 100986f:	cmp    QWORD PTR [rcx],rdx
 1009872:	je     0x100987a
 1009874:	call   QWORD PTR [rip+0xffffffffffff7816]        # 0x1001090
 100987a:	mov    rax,QWORD PTR [rsi+0x10]
 100987e:	mov    DWORD PTR [rsi+0x28],r12d
 1009882:	mov    QWORD PTR [rsi+0x20],rax
 1009886:	test   bpl,0x2
 100988a:	je     0x100989d
 100988c:	and    ebp,0xfffffffd
 100988f:	test   rbx,rbx
 1009892:	je     0x100989d
 1009894:	mov    rax,QWORD PTR [rbx]
 1009897:	mov    rcx,rbx
 100989a:	call   QWORD PTR [rax+0x10]
 100989d:	test   bpl,0x1
 10098a1:	mov    rbp,QWORD PTR [rsp+0x60]
 10098a6:	je     0x10098b6
 10098a8:	test   rdi,rdi
 10098ab:	je     0x10098b6
 10098ad:	mov    rax,QWORD PTR [rdi]
 10098b0:	mov    rcx,rdi
 10098b3:	call   QWORD PTR [rax+0x10]
 10098b6:	mov    rax,QWORD PTR [r14+0x20]
 10098ba:	lea    r8,[rip+0xffffffffffff7ef7]        # 0x10017b8
 10098c1:	lea    rdx,[rip+0xffffffffffff8140]        # 0x1001a08
 10098c8:	mov    r9,r15
 10098cb:	mov    rcx,rsi
 10098ce:	mov    QWORD PTR [rsi+0x20],rax
 10098d2:	call   QWORD PTR [rip+0xffffffffffff77a8]        # 0x1001080
 10098d8:	mov    rdi,QWORD PTR [rsp+0x20]
 10098dd:	mov    ebx,eax
 10098df:	test   eax,eax
 10098e1:	jns    0x10098f3
 10098e3:	mov    rax,QWORD PTR [rsi]
 10098e6:	mov    edx,0x1
 10098eb:	mov    rcx,rsi
 10098ee:	call   QWORD PTR [rax+0x38]
 10098f1:	mov    eax,ebx
 10098f3:	mov    rbx,QWORD PTR [rsp+0x50]
 10098f8:	mov    rsi,QWORD PTR [rsp+0x28]
 10098fd:	add    rsp,0x30
 1009901:	pop    r15
 1009903:	pop    r14
 1009905:	pop    r12
 1009907:	ret    
 1009908:	mov    eax,0x80004003
 100990d:	add    rsp,0x30
 1009911:	pop    r15
 1009913:	pop    r14
 1009915:	pop    r12
 1009917:	ret    
 1009918:	int3   
 1009919:	int3   
 100991a:	int3   
 100991b:	int3   
 100991c:	int3   
 100991d:	int3   
 100991e:	int3   
 100991f:	int3   
 1009920:	mov    QWORD PTR [rsp+0x8],rbx
 1009925:	mov    QWORD PTR [rsp+0x10],rbp
 100992a:	mov    QWORD PTR [rsp+0x18],rsi
 100992f:	push   rdi
 1009930:	push   r14
 1009932:	push   r15
 1009934:	sub    rsp,0x20
 1009938:	mov    r15d,DWORD PTR [rsp+0x60]
 100993d:	mov    rbp,r9
 1009940:	mov    rsi,r8
 1009943:	mov    rbx,rdx
 1009946:	mov    rdi,rcx
 1009949:	cmp    r15d,0x3
 100994d:	jne    0x10099d7
 1009953:	mov    r14,r8
 1009956:	mov    rcx,0xffffffffffffffff
 100995d:	mov    eax,0x8
 1009962:	sub    r14,rdx
 1009965:	sar    r14,0x3
 1009969:	mul    r14
 100996c:	cmovo  rax,rcx
 1009970:	mov    rcx,rax
 1009973:	call   0x100bf24
 1009978:	mov    QWORD PTR [rdi+0x10],rax
 100997c:	mov    QWORD PTR [rdi+0x20],rax
 1009980:	test   rax,rax
 1009983:	jne    0x100998c
 1009985:	mov    eax,0x8007000e
 100998a:	jmp    0x1009a00
 100998c:	cmp    rbx,rsi
 100998f:	je     0x10099be
 1009991:	mov    rax,QWORD PTR [rdi+0x20]
 1009995:	test   rax,rax
 1009998:	je     0x10099cc
 100999a:	test   rbx,rbx
 100999d:	je     0x10099cc
 100999f:	mov    rcx,QWORD PTR [rbx]
 10099a2:	mov    QWORD PTR [rax],rcx
 10099a5:	test   rcx,rcx
 10099a8:	je     0x10099b0
 10099aa:	mov    rax,QWORD PTR [rcx]
 10099ad:	call   QWORD PTR [rax+0x8]
 10099b0:	add    QWORD PTR [rdi+0x20],0x8
 10099b5:	add    rbx,0x8
 10099b9:	cmp    rbx,rsi
 10099bc:	jne    0x1009991
 10099be:	mov    rax,QWORD PTR [rdi+0x10]
 10099c2:	lea    rcx,[rax+r14*8]
 10099c6:	mov    QWORD PTR [rdi+0x18],rcx
 10099ca:	jmp    0x10099df
 10099cc:	mov    ecx,0x80004005
 10099d1:	call   0x1007530
 10099d6:	int3   
 10099d7:	mov    QWORD PTR [rcx+0x10],rdx
 10099db:	mov    QWORD PTR [rcx+0x18],r8
 10099df:	cmp    QWORD PTR [rdi+0x8],rbp
 10099e3:	lea    rcx,[rdi+0x8]
 10099e7:	je     0x10099f2
 10099e9:	mov    rdx,rbp
 10099ec:	call   QWORD PTR [rip+0xffffffffffff769e]        # 0x1001090
 10099f2:	mov    rax,QWORD PTR [rdi+0x10]
 10099f6:	mov    DWORD PTR [rdi+0x28],r15d
 10099fa:	mov    QWORD PTR [rdi+0x20],rax
 10099fe:	xor    eax,eax
 1009a00:	mov    rbx,QWORD PTR [rsp+0x40]
 1009a05:	mov    rbp,QWORD PTR [rsp+0x48]
 1009a0a:	mov    rsi,QWORD PTR [rsp+0x50]
 1009a0f:	add    rsp,0x20
 1009a13:	pop    r15
 1009a15:	pop    r14
 1009a17:	pop    rdi
 1009a18:	ret    
 1009a19:	int3   
 1009a1a:	int3   
 1009a1b:	int3   
 1009a1c:	int3   
 1009a1d:	int3   
 1009a1e:	int3   
 1009a1f:	int3   
 1009a20:	sub    rsp,0x28
 1009a24:	mov    DWORD PTR [rcx+0x30],0xc0000001
 1009a2b:	lea    rax,[rip+0xffffffffffff7e7e]        # 0x10018b0
 1009a32:	mov    QWORD PTR [rsp+0x20],rdi
 1009a37:	mov    QWORD PTR [rcx],rax
 1009a3a:	mov    rdi,rcx
 1009a3d:	mov    rcx,QWORD PTR [rip+0x1b854]        # 0x1025298
 1009a44:	mov    rax,QWORD PTR [rcx]
 1009a47:	call   QWORD PTR [rax+0x10]
 1009a4a:	test   BYTE PTR [rdi+0x28],0x2
 1009a4e:	je     0x1009a86
 1009a50:	mov    QWORD PTR [rsp+0x30],rbx
 1009a55:	mov    rbx,QWORD PTR [rdi+0x10]
 1009a59:	cmp    rbx,QWORD PTR [rdi+0x18]
 1009a5d:	je     0x1009a78
 1009a5f:	nop
 1009a60:	mov    rcx,QWORD PTR [rbx]
 1009a63:	test   rcx,rcx
 1009a66:	je     0x1009a6e
 1009a68:	mov    rax,QWORD PTR [rcx]
 1009a6b:	call   QWORD PTR [rax+0x10]
 1009a6e:	add    rbx,0x8
 1009a72:	cmp    rbx,QWORD PTR [rdi+0x18]
 1009a76:	jne    0x1009a60
 1009a78:	mov    rcx,QWORD PTR [rdi+0x10]
 1009a7c:	call   0x100bf30
 1009a81:	mov    rbx,QWORD PTR [rsp+0x30]
 1009a86:	mov    rcx,QWORD PTR [rdi+0x8]
 1009a8a:	mov    rdi,QWORD PTR [rsp+0x20]
 1009a8f:	test   rcx,rcx
 1009a92:	je     0x1009a9a
 1009a94:	mov    rax,QWORD PTR [rcx]
 1009a97:	call   QWORD PTR [rax+0x10]
 1009a9a:	add    rsp,0x28
 1009a9e:	ret    
 1009a9f:	int3   
 1009aa0:	int3   
 1009aa1:	int3   
 1009aa2:	int3   
 1009aa3:	int3   
 1009aa4:	int3   
 1009aa5:	int3   
 1009aa6:	int3   
 1009aa7:	int3   
 1009aa8:	int3   
 1009aa9:	int3   
 1009aaa:	int3   
 1009aab:	int3   
 1009aac:	int3   
 1009aad:	int3   
 1009aae:	int3   
 1009aaf:	int3   
 1009ab0:	inc    DWORD PTR [rcx+0x30]
 1009ab3:	mov    eax,DWORD PTR [rcx+0x30]
 1009ab6:	ret    
 1009ab7:	int3   
 1009ab8:	int3   
 1009ab9:	int3   
 1009aba:	int3   
 1009abb:	int3   
 1009abc:	int3   
 1009abd:	int3   
 1009abe:	int3   
 1009abf:	int3   
 1009ac0:	rex push rbx
 1009ac2:	sub    rsp,0x20
 1009ac6:	dec    DWORD PTR [rcx+0x30]
 1009ac9:	mov    ebx,DWORD PTR [rcx+0x30]
 1009acc:	jne    0x1009adf
 1009ace:	test   rcx,rcx
 1009ad1:	je     0x1009adf
 1009ad3:	mov    r8,QWORD PTR [rcx]
 1009ad6:	mov    edx,0x1
 1009adb:	call   QWORD PTR [r8+0x38]
 1009adf:	mov    eax,ebx
 1009ae1:	add    rsp,0x20
 1009ae5:	pop    rbx
 1009ae6:	ret    
 1009ae7:	int3   
 1009ae8:	int3   
 1009ae9:	int3   
 1009aea:	int3   
 1009aeb:	int3   
 1009aec:	int3   
 1009aed:	int3   
 1009aee:	int3   
 1009aef:	int3   
 1009af0:	mov    r9,r8
 1009af3:	mov    r8,rdx
 1009af6:	lea    rdx,[rip+0xffffffffffff7f0b]        # 0x1001a08
 1009afd:	rex.W jmp QWORD PTR [rip+0xffffffffffff757c]        # 0x1001080
 1009b04:	int3   
 1009b05:	int3   
 1009b06:	int3   
 1009b07:	int3   
 1009b08:	int3   
 1009b09:	int3   
 1009b0a:	int3   
 1009b0b:	int3   
 1009b0c:	int3   
 1009b0d:	int3   
 1009b0e:	int3   
 1009b0f:	int3   
 1009b10:	mov    QWORD PTR [rsp+0x8],rbx
 1009b15:	push   rdi
 1009b16:	sub    rsp,0x20
 1009b1a:	mov    ebx,edx
 1009b1c:	mov    rdi,rcx
 1009b1f:	call   0x1009a20
 1009b24:	test   bl,0x1
 1009b27:	je     0x1009b31
 1009b29:	mov    rcx,rdi
 1009b2c:	call   0x100bccc
 1009b31:	mov    rax,rdi
 1009b34:	mov    rbx,QWORD PTR [rsp+0x30]
 1009b39:	add    rsp,0x20
 1009b3d:	pop    rdi
 1009b3e:	ret    
 1009b3f:	int3   
 1009b40:	int3   
 1009b41:	int3   
 1009b42:	int3   
 1009b43:	int3   
 1009b44:	int3   
 1009b45:	int3   
 1009b46:	int3   
 1009b47:	int3   
 1009b48:	int3   
 1009b49:	int3   
 1009b4a:	int3   
 1009b4b:	int3   
 1009b4c:	int3   
 1009b4d:	int3   
 1009b4e:	int3   
 1009b4f:	int3   
 1009b50:	inc    DWORD PTR [rcx+0x8]
 1009b53:	mov    eax,DWORD PTR [rcx+0x8]
 1009b56:	ret    
 1009b57:	int3   
 1009b58:	int3   
 1009b59:	int3   
 1009b5a:	int3   
 1009b5b:	int3   
 1009b5c:	int3   
 1009b5d:	int3   
 1009b5e:	int3   
 1009b5f:	int3   
 1009b60:	rex push rbx
 1009b62:	sub    rsp,0x20
 1009b66:	dec    DWORD PTR [rcx+0x8]
 1009b69:	mov    ebx,DWORD PTR [rcx+0x8]
 1009b6c:	jne    0x1009b7f
 1009b6e:	test   rcx,rcx
 1009b71:	je     0x1009b7f
 1009b73:	mov    r8,QWORD PTR [rcx]
 1009b76:	mov    edx,0x1
 1009b7b:	call   QWORD PTR [r8+0x28]
 1009b7f:	mov    eax,ebx
 1009b81:	add    rsp,0x20
 1009b85:	pop    rbx
 1009b86:	ret    
 1009b87:	int3   
 1009b88:	int3   
 1009b89:	int3   
 1009b8a:	int3   
 1009b8b:	int3   
 1009b8c:	int3   
 1009b8d:	int3   
 1009b8e:	int3   
 1009b8f:	int3   
 1009b90:	mov    r9,r8
 1009b93:	mov    r8,rdx
 1009b96:	lea    rdx,[rip+0xffffffffffff7bcb]        # 0x1001768
 1009b9d:	rex.W jmp QWORD PTR [rip+0xffffffffffff74dc]        # 0x1001080
 1009ba4:	int3   
 1009ba5:	int3   
 1009ba6:	int3   
 1009ba7:	int3   
 1009ba8:	int3   
 1009ba9:	int3   
 1009baa:	int3   
 1009bab:	int3   
 1009bac:	int3   
 1009bad:	int3   
 1009bae:	int3   
 1009baf:	int3   
 1009bb0:	rex push rbx
 1009bb2:	sub    rsp,0x20
 1009bb6:	lea    rax,[rip+0xffffffffffff7b7b]        # 0x1001738
 1009bbd:	mov    rbx,rcx
 1009bc0:	mov    DWORD PTR [rcx+0x8],0xc0000001
 1009bc7:	mov    QWORD PTR [rcx],rax
 1009bca:	test   dl,0x1
 1009bcd:	je     0x1009bd4
 1009bcf:	call   0x100bccc
 1009bd4:	mov    rax,rbx
 1009bd7:	add    rsp,0x20
 1009bdb:	pop    rbx
 1009bdc:	ret    
 1009bdd:	int3   
 1009bde:	int3   
 1009bdf:	int3   
 1009be0:	int3   
 1009be1:	int3   
 1009be2:	int3   
 1009be3:	int3   
 1009be4:	int3   
 1009be5:	int3   
 1009be6:	int3   
 1009be7:	int3   
 1009be8:	int3   
 1009be9:	int3   
 1009bea:	int3   
 1009beb:	int3   
 1009bec:	int3   
 1009bed:	int3   
 1009bee:	int3   
 1009bef:	int3   
 1009bf0:	mov    QWORD PTR [rsp+0x20],rbp
 1009bf5:	push   rsi
 1009bf6:	sub    rsp,0x20
 1009bfa:	mov    rsi,r8
 1009bfd:	mov    rbp,rdx
 1009c00:	test   r8,r8
 1009c03:	jne    0x1009c15
 1009c05:	mov    eax,0x80004003
 1009c0a:	mov    rbp,QWORD PTR [rsp+0x48]
 1009c0f:	add    rsp,0x20
 1009c13:	pop    rsi
 1009c14:	ret    
 1009c15:	mov    QWORD PTR [rsp+0x30],rbx
 1009c1a:	mov    ecx,0xe28
 1009c1f:	mov    QWORD PTR [r8],0x0
 1009c26:	mov    QWORD PTR [rsp+0x38],rdi
 1009c2b:	mov    ebx,0x8007000e
 1009c30:	call   0x100bce4
 1009c35:	mov    rdi,rax
 1009c38:	test   rax,rax
 1009c3b:	je     0x1009ce1
 1009c41:	mov    rcx,rax
 1009c44:	mov    QWORD PTR [rsp+0x40],r14
 1009c49:	call   0x100a610
 1009c4e:	lea    rax,[rip+0xffffffffffff7d0b]        # 0x1001960
 1009c55:	lea    r11,[rip+0xffffffffffff7cd4]        # 0x1001930
 1009c5c:	mov    QWORD PTR [rdi+0x8],rax
 1009c60:	mov    QWORD PTR [rdi],r11
 1009c63:	lea    rax,[rip+0xffffffffffff7d36]        # 0x10019a0
 1009c6a:	mov    QWORD PTR [rdi+0x10],rax
 1009c6e:	lea    rax,[rip+0xffffffffffff7d6b]        # 0x10019e0
 1009c75:	mov    QWORD PTR [rdi+0x20],rax
 1009c79:	mov    rcx,QWORD PTR [rip+0x1b618]        # 0x1025298
 1009c80:	mov    rax,QWORD PTR [rcx]
 1009c83:	call   QWORD PTR [rax+0x8]
 1009c86:	lea    rcx,[rdi+0x30]
 1009c8a:	xor    edx,edx
 1009c8c:	xor    ebx,ebx
 1009c8e:	call   QWORD PTR [rip+0xffffffffffff75bc]        # 0x1001250
 1009c94:	test   eax,eax
 1009c96:	jne    0x1009cb1
 1009c98:	call   QWORD PTR [rip+0xffffffffffff75d2]        # 0x1001270
 1009c9e:	mov    ebx,eax
 1009ca0:	test   eax,eax
 1009ca2:	jle    0x1009cad
 1009ca4:	movzx  ebx,ax
 1009ca7:	or     ebx,0x80070000
 1009cad:	test   ebx,ebx
 1009caf:	js     0x1009cb5
 1009cb1:	mov    BYTE PTR [rdi+0x58],0x1
 1009cb5:	mov    r14,QWORD PTR [rsp+0x40]
 1009cba:	test   ebx,ebx
 1009cbc:	js     0x1009cd2
 1009cbe:	mov    rax,QWORD PTR [rdi]
 1009cc1:	mov    r8,rsi
 1009cc4:	mov    rdx,rbp
 1009cc7:	mov    rcx,rdi
 1009cca:	call   QWORD PTR [rax]
 1009ccc:	mov    ebx,eax
 1009cce:	test   eax,eax
 1009cd0:	je     0x1009ce1
 1009cd2:	mov    r8,QWORD PTR [rdi]
 1009cd5:	mov    edx,0x1
 1009cda:	mov    rcx,rdi
 1009cdd:	call   QWORD PTR [r8+0x28]
 1009ce1:	mov    rdi,QWORD PTR [rsp+0x38]
 1009ce6:	mov    rbp,QWORD PTR [rsp+0x48]
 1009ceb:	mov    eax,ebx
 1009ced:	mov    rbx,QWORD PTR [rsp+0x30]
 1009cf2:	add    rsp,0x20
 1009cf6:	pop    rsi
 1009cf7:	ret    
 1009cf8:	int3   
 1009cf9:	int3   
 1009cfa:	int3   
 1009cfb:	int3   
 1009cfc:	int3   
 1009cfd:	int3   
 1009cfe:	int3   
 1009cff:	int3   
 1009d00:	mov    eax,0x1
 1009d05:	lock xadd DWORD PTR [rcx+0x28],eax
 1009d0a:	inc    eax
 1009d0c:	ret    
 1009d0d:	int3   
 1009d0e:	int3   
 1009d0f:	int3   
 1009d10:	int3   
 1009d11:	int3   
 1009d12:	int3   
 1009d13:	int3   
 1009d14:	int3   
 1009d15:	int3   
 1009d16:	int3   
 1009d17:	int3   
 1009d18:	int3   
 1009d19:	int3   
 1009d1a:	int3   
 1009d1b:	int3   
 1009d1c:	int3   
 1009d1d:	int3   
 1009d1e:	int3   
 1009d1f:	int3   
 1009d20:	rex push rbx
 1009d22:	sub    rsp,0x20
 1009d26:	or     ebx,0xffffffff
 1009d29:	lock xadd DWORD PTR [rcx+0x28],ebx
 1009d2e:	dec    ebx
 1009d30:	jne    0x1009d41
 1009d32:	test   rcx,rcx
 1009d35:	je     0x1009d41
 1009d37:	mov    r8,QWORD PTR [rcx]
 1009d3a:	lea    edx,[rbx+0x1]
 1009d3d:	call   QWORD PTR [r8+0x28]
 1009d41:	mov    eax,ebx
 1009d43:	add    rsp,0x20
 1009d47:	pop    rbx
 1009d48:	ret    
 1009d49:	int3   
 1009d4a:	int3   
 1009d4b:	int3   
 1009d4c:	int3   
 1009d4d:	int3   
 1009d4e:	int3   
 1009d4f:	int3   
 1009d50:	mov    r9,r8
 1009d53:	mov    r8,rdx
 1009d56:	lea    rdx,[rip+0xffffffffffff7a73]        # 0x10017d0
 1009d5d:	rex.W jmp QWORD PTR [rip+0xffffffffffff731c]        # 0x1001080
 1009d64:	int3   
 1009d65:	int3   
 1009d66:	int3   
 1009d67:	int3   
 1009d68:	int3   
 1009d69:	int3   
 1009d6a:	int3   
 1009d6b:	int3   
 1009d6c:	int3   
 1009d6d:	int3   
 1009d6e:	int3   
 1009d6f:	int3   
 1009d70:	mov    QWORD PTR [rsp+0x8],rbx
 1009d75:	push   rdi
 1009d76:	sub    rsp,0x20
 1009d7a:	mov    DWORD PTR [rcx+0x28],0xc0000001
 1009d81:	lea    rax,[rip+0xffffffffffff7ba8]        # 0x1001930
 1009d88:	mov    rdi,rcx
 1009d8b:	mov    QWORD PTR [rcx],rax
 1009d8e:	lea    rax,[rip+0xffffffffffff7bcb]        # 0x1001960
 1009d95:	mov    ebx,edx
 1009d97:	mov    QWORD PTR [rcx+0x8],rax
 1009d9b:	lea    rax,[rip+0xffffffffffff7bfe]        # 0x10019a0
 1009da2:	mov    QWORD PTR [rcx+0x10],rax
 1009da6:	lea    rax,[rip+0xffffffffffff7c33]        # 0x10019e0
 1009dad:	mov    QWORD PTR [rcx+0x20],rax
 1009db1:	mov    rcx,QWORD PTR [rip+0x1b4e0]        # 0x1025298
 1009db8:	mov    rax,QWORD PTR [rcx]
 1009dbb:	call   QWORD PTR [rax+0x10]
 1009dbe:	mov    rcx,rdi
 1009dc1:	call   0x100a670
 1009dc6:	test   bl,0x1
 1009dc9:	je     0x1009dd3
 1009dcb:	mov    rcx,rdi
 1009dce:	call   0x100bccc
 1009dd3:	mov    rax,rdi
 1009dd6:	mov    rbx,QWORD PTR [rsp+0x30]
 1009ddb:	add    rsp,0x20
 1009ddf:	pop    rdi
 1009de0:	ret    
 1009de1:	int3   
 1009de2:	int3   
 1009de3:	int3   
 1009de4:	int3   
 1009de5:	int3   
 1009de6:	int3   
 1009de7:	int3   
 1009de8:	int3   
 1009de9:	int3   
 1009dea:	int3   
 1009deb:	int3   
 1009dec:	int3   
 1009ded:	int3   
 1009dee:	int3   
 1009def:	int3   
 1009df0:	mov    QWORD PTR [rsp+0x10],rbx
 1009df5:	mov    QWORD PTR [rsp+0x18],rbp
 1009dfa:	push   rsi
 1009dfb:	sub    rsp,0x20
 1009dff:	xor    ebp,ebp
 1009e01:	mov    rbx,r8
 1009e04:	mov    rsi,rcx
 1009e07:	test   r9,r9
 1009e0a:	je     0x1009e0f
 1009e0c:	mov    DWORD PTR [r9],ebp
 1009e0f:	test   rbx,rbx
 1009e12:	je     0x1009ed3
 1009e18:	cmp    edx,0x1
 1009e1b:	jbe    0x1009e26
 1009e1d:	test   r9,r9
 1009e20:	je     0x1009ed3
 1009e26:	mov    QWORD PTR [rsp+0x30],rdi
 1009e2b:	cmp    QWORD PTR [rcx+0x10],rbp
 1009e2f:	je     0x1009ecc
 1009e35:	mov    rdi,QWORD PTR [rcx+0x18]
 1009e39:	test   rdi,rdi
 1009e3c:	je     0x1009ecc
 1009e42:	mov    rax,QWORD PTR [rcx+0x20]
 1009e46:	test   rax,rax
 1009e49:	je     0x1009ecc
 1009e4f:	sub    rdi,rax
 1009e52:	mov    eax,0x1
 1009e57:	sar    rdi,0x4
 1009e5b:	cmp    edi,edx
 1009e5d:	cmovb  ebp,eax
 1009e60:	cmp    edx,edi
 1009e62:	cmovb  edi,edx
 1009e65:	test   r9,r9
 1009e68:	je     0x1009e6d
 1009e6a:	mov    DWORD PTR [r9],edi
 1009e6d:	test   edi,edi
 1009e6f:	je     0x1009eaa
 1009e71:	mov    rcx,QWORD PTR [rsi+0x20]
 1009e75:	dec    edi
 1009e77:	test   rbx,rbx
 1009e7a:	je     0x1009ec1
 1009e7c:	test   rcx,rcx
 1009e7f:	je     0x1009ec1
 1009e81:	mov    rax,QWORD PTR [rcx]
 1009e84:	mov    QWORD PTR [rbx],rax
 1009e87:	mov    rax,QWORD PTR [rcx+0x8]
 1009e8b:	mov    QWORD PTR [rbx+0x8],rax
 1009e8f:	mov    rcx,QWORD PTR [rbx]
 1009e92:	test   rcx,rcx
 1009e95:	je     0x1009e9d
 1009e97:	mov    rax,QWORD PTR [rcx]
 1009e9a:	call   QWORD PTR [rax+0x8]
 1009e9d:	add    QWORD PTR [rsi+0x20],0x10
 1009ea2:	add    rbx,0x10
 1009ea6:	test   edi,edi
 1009ea8:	jne    0x1009e71
 1009eaa:	mov    eax,ebp
 1009eac:	mov    rdi,QWORD PTR [rsp+0x30]
 1009eb1:	mov    rbx,QWORD PTR [rsp+0x38]
 1009eb6:	mov    rbp,QWORD PTR [rsp+0x40]
 1009ebb:	add    rsp,0x20
 1009ebf:	pop    rsi
 1009ec0:	ret    
 1009ec1:	mov    ecx,0x80004005
 1009ec6:	call   0x1007530
 1009ecb:	int3   
 1009ecc:	mov    eax,0x80004005
 1009ed1:	jmp    0x1009eac
 1009ed3:	mov    rbx,QWORD PTR [rsp+0x38]
 1009ed8:	mov    rbp,QWORD PTR [rsp+0x40]
 1009edd:	mov    eax,0x80004003
 1009ee2:	add    rsp,0x20
 1009ee6:	pop    rsi
 1009ee7:	ret    
 1009ee8:	int3   
 1009ee9:	int3   
 1009eea:	int3   
 1009eeb:	int3   
 1009eec:	int3   
 1009eed:	int3   
 1009eee:	int3   
 1009eef:	int3   
 1009ef0:	mov    r9,QWORD PTR [rcx+0x20]
 1009ef4:	mov    rax,QWORD PTR [rcx+0x18]
 1009ef8:	mov    r8d,edx
 1009efb:	sub    rax,r9
 1009efe:	sar    rax,0x4
 1009f02:	cmp    edx,eax
 1009f04:	cmova  r8d,eax
 1009f08:	mov    eax,r8d
 1009f0b:	shl    rax,0x4
 1009f0f:	add    rax,r9
 1009f12:	mov    QWORD PTR [rcx+0x20],rax
 1009f16:	xor    eax,eax
 1009f18:	cmp    edx,r8d
 1009f1b:	setne  al
 1009f1e:	ret    
 1009f1f:	int3   
 1009f20:	int3   
 1009f21:	int3   
 1009f22:	int3   
 1009f23:	int3   
 1009f24:	int3   
 1009f25:	int3   
 1009f26:	int3   
 1009f27:	int3   
 1009f28:	int3   
 1009f29:	int3   
 1009f2a:	int3   
 1009f2b:	int3   
 1009f2c:	int3   
 1009f2d:	int3   
 1009f2e:	int3   
 1009f2f:	int3   
 1009f30:	mov    rax,QWORD PTR [rcx+0x10]
 1009f34:	mov    QWORD PTR [rcx+0x20],rax
 1009f38:	xor    eax,eax
 1009f3a:	ret    
 1009f3b:	int3   
 1009f3c:	int3   
 1009f3d:	int3   
 1009f3e:	int3   
 1009f3f:	int3   
 1009f40:	int3   
 1009f41:	int3   
 1009f42:	int3   
 1009f43:	int3   
 1009f44:	int3   
 1009f45:	int3   
 1009f46:	int3   
 1009f47:	int3   
 1009f48:	int3   
 1009f49:	int3   
 1009f4a:	int3   
 1009f4b:	int3   
 1009f4c:	int3   
 1009f4d:	int3   
 1009f4e:	int3   
 1009f4f:	int3   
 1009f50:	push   r12
 1009f52:	push   r14
 1009f54:	push   r15
 1009f56:	sub    rsp,0x30
 1009f5a:	xor    r12d,r12d
 1009f5d:	mov    r15,rdx
 1009f60:	mov    r14,rcx
 1009f63:	mov    DWORD PTR [rsp+0x58],r12d
 1009f68:	test   rdx,rdx
 1009f6b:	je     0x100a0d8
 1009f71:	mov    QWORD PTR [rsp+0x50],rbx
 1009f76:	lea    ecx,[r12+0x38]
 1009f7b:	mov    QWORD PTR [rdx],r12
 1009f7e:	mov    QWORD PTR [rsp+0x28],rsi
 1009f83:	mov    ebx,0x8007000e
 1009f88:	call   0x100bce4
 1009f8d:	mov    rsi,rax
 1009f90:	test   rax,rax
 1009f93:	je     0x1009fc9
 1009f95:	mov    QWORD PTR [rax+0x8],r12
 1009f99:	mov    QWORD PTR [rax+0x20],r12
 1009f9d:	mov    QWORD PTR [rax+0x18],r12
 1009fa1:	mov    QWORD PTR [rax+0x10],r12
 1009fa5:	mov    DWORD PTR [rax+0x28],r12d
 1009fa9:	mov    DWORD PTR [rax+0x30],r12d
 1009fad:	lea    rax,[rip+0xffffffffffff7aac]        # 0x1001a60
 1009fb4:	mov    QWORD PTR [rsi],rax
 1009fb7:	mov    rcx,QWORD PTR [rip+0x1b2da]        # 0x1025298
 1009fbe:	mov    rax,QWORD PTR [rcx]
 1009fc1:	call   QWORD PTR [rax+0x8]
 1009fc4:	mov    ebx,r12d
 1009fc7:	jmp    0x1009fcc
 1009fc9:	mov    rsi,r12
 1009fcc:	test   ebx,ebx
 1009fce:	js     0x100a0c1
 1009fd4:	test   BYTE PTR [r14+0x28],0x2
 1009fd9:	mov    QWORD PTR [rsp+0x60],rbp
 1009fde:	mov    QWORD PTR [rsp+0x20],rdi
 1009fe3:	je     0x100a002
 1009fe5:	mov    rax,QWORD PTR [r14]
 1009fe8:	mov    rcx,r14
 1009feb:	mov    ebp,0x1
 1009ff0:	mov    rdi,r14
 1009ff3:	mov    QWORD PTR [rsp+0x58],r14
 1009ff8:	call   QWORD PTR [rax+0x8]
 1009ffb:	mov    rbx,QWORD PTR [rsp+0x58]
 100a000:	jmp    0x100a023
 100a002:	mov    rbx,QWORD PTR [r14+0x8]
 100a006:	mov    ebp,0x2
 100a00b:	mov    QWORD PTR [rsp+0x58],rbx
 100a010:	test   rbx,rbx
 100a013:	je     0x100a01e
 100a015:	mov    rax,QWORD PTR [rbx]
 100a018:	mov    rcx,rbx
 100a01b:	call   QWORD PTR [rax+0x8]
 100a01e:	mov    rdi,QWORD PTR [rsp+0x58]
 100a023:	mov    rcx,QWORD PTR [r14+0x18]
 100a027:	mov    rax,QWORD PTR [r14+0x10]
 100a02b:	lea    r11,[rsp+0x58]
 100a030:	mov    rdx,QWORD PTR [r11]
 100a033:	mov    QWORD PTR [rsi+0x18],rcx
 100a037:	lea    rcx,[rsi+0x8]
 100a03b:	mov    QWORD PTR [rsi+0x10],rax
 100a03f:	cmp    QWORD PTR [rcx],rdx
 100a042:	je     0x100a04a
 100a044:	call   QWORD PTR [rip+0xffffffffffff7046]        # 0x1001090
 100a04a:	mov    rax,QWORD PTR [rsi+0x10]
 100a04e:	mov    DWORD PTR [rsi+0x28],r12d
 100a052:	mov    QWORD PTR [rsi+0x20],rax
 100a056:	test   bpl,0x2
 100a05a:	je     0x100a06d
 100a05c:	and    ebp,0xfffffffd
 100a05f:	test   rbx,rbx
 100a062:	je     0x100a06d
 100a064:	mov    rax,QWORD PTR [rbx]
 100a067:	mov    rcx,rbx
 100a06a:	call   QWORD PTR [rax+0x10]
 100a06d:	test   bpl,0x1
 100a071:	mov    rbp,QWORD PTR [rsp+0x60]
 100a076:	je     0x100a086
 100a078:	test   rdi,rdi
 100a07b:	je     0x100a086
 100a07d:	mov    rax,QWORD PTR [rdi]
 100a080:	mov    rcx,rdi
 100a083:	call   QWORD PTR [rax+0x10]
 100a086:	mov    rax,QWORD PTR [r14+0x20]
 100a08a:	lea    r8,[rip+0xffffffffffff7717]        # 0x10017a8
 100a091:	lea    rdx,[rip+0xffffffffffff7a08]        # 0x1001aa0
 100a098:	mov    r9,r15
 100a09b:	mov    rcx,rsi
 100a09e:	mov    QWORD PTR [rsi+0x20],rax
 100a0a2:	call   QWORD PTR [rip+0xffffffffffff6fd8]        # 0x1001080
 100a0a8:	mov    rdi,QWORD PTR [rsp+0x20]
 100a0ad:	mov    ebx,eax
 100a0af:	test   eax,eax
 100a0b1:	jns    0x100a0c3
 100a0b3:	mov    rax,QWORD PTR [rsi]
 100a0b6:	mov    edx,0x1
 100a0bb:	mov    rcx,rsi
 100a0be:	call   QWORD PTR [rax+0x38]
 100a0c1:	mov    eax,ebx
 100a0c3:	mov    rbx,QWORD PTR [rsp+0x50]
 100a0c8:	mov    rsi,QWORD PTR [rsp+0x28]
 100a0cd:	add    rsp,0x30
 100a0d1:	pop    r15
 100a0d3:	pop    r14
 100a0d5:	pop    r12
 100a0d7:	ret    
 100a0d8:	mov    eax,0x80004003
 100a0dd:	add    rsp,0x30
 100a0e1:	pop    r15
 100a0e3:	pop    r14
 100a0e5:	pop    r12
 100a0e7:	ret    
 100a0e8:	int3   
 100a0e9:	int3   
 100a0ea:	int3   
 100a0eb:	int3   
 100a0ec:	int3   
 100a0ed:	int3   
 100a0ee:	int3   
 100a0ef:	int3   
 100a0f0:	sub    rsp,0x28
 100a0f4:	mov    DWORD PTR [rcx+0x30],0xc0000001
 100a0fb:	lea    rax,[rip+0xffffffffffff795e]        # 0x1001a60
 100a102:	mov    QWORD PTR [rsp+0x20],rdi
 100a107:	mov    QWORD PTR [rcx],rax
 100a10a:	mov    rdi,rcx
 100a10d:	mov    rcx,QWORD PTR [rip+0x1b184]        # 0x1025298
 100a114:	mov    rax,QWORD PTR [rcx]
 100a117:	call   QWORD PTR [rax+0x10]
 100a11a:	test   BYTE PTR [rdi+0x28],0x2
 100a11e:	je     0x100a156
 100a120:	mov    QWORD PTR [rsp+0x30],rbx
 100a125:	mov    rbx,QWORD PTR [rdi+0x10]
 100a129:	cmp    rbx,QWORD PTR [rdi+0x18]
 100a12d:	je     0x100a148
 100a12f:	nop
 100a130:	mov    rcx,QWORD PTR [rbx]
 100a133:	test   rcx,rcx
 100a136:	je     0x100a13e
 100a138:	mov    rax,QWORD PTR [rcx]
 100a13b:	call   QWORD PTR [rax+0x10]
 100a13e:	add    rbx,0x10
 100a142:	cmp    rbx,QWORD PTR [rdi+0x18]
 100a146:	jne    0x100a130
 100a148:	mov    rcx,QWORD PTR [rdi+0x10]
 100a14c:	call   0x100bf30
 100a151:	mov    rbx,QWORD PTR [rsp+0x30]
 100a156:	mov    rcx,QWORD PTR [rdi+0x8]
 100a15a:	mov    rdi,QWORD PTR [rsp+0x20]
 100a15f:	test   rcx,rcx
 100a162:	je     0x100a16a
 100a164:	mov    rax,QWORD PTR [rcx]
 100a167:	call   QWORD PTR [rax+0x10]
 100a16a:	add    rsp,0x28
 100a16e:	ret    
 100a16f:	int3   
 100a170:	int3   
 100a171:	int3   
 100a172:	int3   
 100a173:	int3   
 100a174:	int3   
 100a175:	int3   
 100a176:	int3   
 100a177:	int3   
 100a178:	int3   
 100a179:	int3   
 100a17a:	int3   
 100a17b:	int3   
 100a17c:	int3   
 100a17d:	int3   
 100a17e:	int3   
 100a17f:	int3   
 100a180:	inc    DWORD PTR [rcx+0x30]
 100a183:	mov    eax,DWORD PTR [rcx+0x30]
 100a186:	ret    
 100a187:	int3   
 100a188:	int3   
 100a189:	int3   
 100a18a:	int3   
 100a18b:	int3   
 100a18c:	int3   
 100a18d:	int3   
 100a18e:	int3   
 100a18f:	int3   
 100a190:	rex push rbx
 100a192:	sub    rsp,0x20
 100a196:	dec    DWORD PTR [rcx+0x30]
 100a199:	mov    ebx,DWORD PTR [rcx+0x30]
 100a19c:	jne    0x100a1af
 100a19e:	test   rcx,rcx
 100a1a1:	je     0x100a1af
 100a1a3:	mov    r8,QWORD PTR [rcx]
 100a1a6:	mov    edx,0x1
 100a1ab:	call   QWORD PTR [r8+0x38]
 100a1af:	mov    eax,ebx
 100a1b1:	add    rsp,0x20
 100a1b5:	pop    rbx
 100a1b6:	ret    
 100a1b7:	int3   
 100a1b8:	int3   
 100a1b9:	int3   
 100a1ba:	int3   
 100a1bb:	int3   
 100a1bc:	int3   
 100a1bd:	int3   
 100a1be:	int3   
 100a1bf:	int3   
 100a1c0:	mov    r9,r8
 100a1c3:	mov    r8,rdx
 100a1c6:	lea    rdx,[rip+0xffffffffffff78d3]        # 0x1001aa0
 100a1cd:	rex.W jmp QWORD PTR [rip+0xffffffffffff6eac]        # 0x1001080
 100a1d4:	int3   
 100a1d5:	int3   
 100a1d6:	int3   
 100a1d7:	int3   
 100a1d8:	int3   
 100a1d9:	int3   
 100a1da:	int3   
 100a1db:	int3   
 100a1dc:	int3   
 100a1dd:	int3   
 100a1de:	int3   
 100a1df:	int3   
 100a1e0:	mov    QWORD PTR [rsp+0x8],rbx
 100a1e5:	push   rdi
 100a1e6:	sub    rsp,0x20
 100a1ea:	mov    ebx,edx
 100a1ec:	mov    rdi,rcx
 100a1ef:	call   0x100a0f0
 100a1f4:	test   bl,0x1
 100a1f7:	je     0x100a201
 100a1f9:	mov    rcx,rdi
 100a1fc:	call   0x100bccc
 100a201:	mov    rax,rdi
 100a204:	mov    rbx,QWORD PTR [rsp+0x30]
 100a209:	add    rsp,0x20
 100a20d:	pop    rdi
 100a20e:	ret    
 100a20f:	int3   
 100a210:	int3   
 100a211:	int3   
 100a212:	int3   
 100a213:	int3   
 100a214:	int3   
 100a215:	int3   
 100a216:	int3   
 100a217:	int3   
 100a218:	int3   
 100a219:	int3   
 100a21a:	int3   
 100a21b:	int3   
 100a21c:	int3   
 100a21d:	int3   
 100a21e:	int3   
 100a21f:	int3   
 100a220:	sub    rcx,0x8
 100a224:	jmp    0x1009d50
 100a229:	int3   
 100a22a:	int3   
 100a22b:	int3   
 100a22c:	int3   
 100a22d:	int3   
 100a22e:	int3   
 100a22f:	int3   
 100a230:	sub    rcx,0x8
 100a234:	jmp    0x1009d00
 100a239:	int3   
 100a23a:	int3   
 100a23b:	int3   
 100a23c:	int3   
 100a23d:	int3   
 100a23e:	int3   
 100a23f:	int3   
 100a240:	sub    rcx,0x8
 100a244:	jmp    0x1009d20
 100a249:	int3   
 100a24a:	int3   
 100a24b:	int3   
 100a24c:	int3   
 100a24d:	int3   
 100a24e:	int3   
 100a24f:	int3   
 100a250:	sub    rcx,0x10
 100a254:	jmp    0x1009d00
 100a259:	int3   
 100a25a:	int3   
 100a25b:	int3   
 100a25c:	int3   
 100a25d:	int3   
 100a25e:	int3   
 100a25f:	int3   
 100a260:	sub    rcx,0x10
 100a264:	jmp    0x1009d20
 100a269:	int3   
 100a26a:	int3   
 100a26b:	int3   
 100a26c:	int3   
 100a26d:	int3   
 100a26e:	int3   
 100a26f:	int3   
 100a270:	sub    rcx,0x20
 100a274:	jmp    0x1009d50
 100a279:	int3   
 100a27a:	int3   
 100a27b:	int3   
 100a27c:	int3   
 100a27d:	int3   
 100a27e:	int3   
 100a27f:	int3   
 100a280:	sub    rcx,0x20
 100a284:	jmp    0x1009d00
 100a289:	int3   
 100a28a:	int3   
 100a28b:	int3   
 100a28c:	int3   
 100a28d:	int3   
 100a28e:	int3   
 100a28f:	int3   
 100a290:	sub    rcx,0x20
 100a294:	jmp    0x1009d20
 100a299:	int3   
 100a29a:	int3   
 100a29b:	int3   
 100a29c:	int3   
 100a29d:	int3   
 100a29e:	int3   
 100a29f:	int3   
 100a2a0:	inc    DWORD PTR [rcx+0xc]
 100a2a3:	mov    eax,DWORD PTR [rcx+0xc]
 100a2a6:	ret    
 100a2a7:	int3   
 100a2a8:	int3   
 100a2a9:	int3   
 100a2aa:	int3   
 100a2ab:	int3   
 100a2ac:	int3   
 100a2ad:	int3   
 100a2ae:	int3   
 100a2af:	int3   
 100a2b0:	dec    DWORD PTR [rcx+0xc]
 100a2b3:	mov    eax,DWORD PTR [rcx+0xc]
 100a2b6:	ret    
 100a2b7:	int3   
 100a2b8:	int3   
 100a2b9:	int3   
 100a2ba:	int3   
 100a2bb:	int3   
 100a2bc:	int3   
 100a2bd:	int3   
 100a2be:	int3   
 100a2bf:	int3   
 100a2c0:	mov    eax,DWORD PTR [rcx+0xc]
 100a2c3:	ret    
 100a2c4:	int3   
 100a2c5:	int3   
 100a2c6:	int3   
 100a2c7:	int3   
 100a2c8:	int3   
 100a2c9:	int3   
 100a2ca:	int3   
 100a2cb:	int3   
 100a2cc:	int3   
 100a2cd:	int3   
 100a2ce:	int3   
 100a2cf:	int3   
 100a2d0:	rex push rsi
 100a2d2:	sub    rsp,0x30
 100a2d6:	mov    rsi,rdx
 100a2d9:	test   rdx,rdx
 100a2dc:	jne    0x100a2e9
 100a2de:	mov    eax,0x80004003
 100a2e3:	add    rsp,0x30
 100a2e7:	pop    rsi
 100a2e8:	ret    
 100a2e9:	mov    QWORD PTR [rsp+0x40],rbx
 100a2ee:	lea    rbx,[rcx+0x40]
 100a2f2:	mov    QWORD PTR [rsp+0x48],rdi
 100a2f7:	xor    edi,edi
 100a2f9:	cmp    QWORD PTR [rbx],rdi
 100a2fc:	jne    0x100a323
 100a2fe:	lea    r9,[rip+0xffffffffffff787b]        # 0x1001b80
 100a305:	lea    r8d,[rdi+0x1]
 100a309:	lea    rcx,[rip+0xffffffffffff7eb0]        # 0x10021c0
 100a310:	xor    edx,edx
 100a312:	mov    QWORD PTR [rsp+0x20],rbx
 100a317:	call   QWORD PTR [rip+0xffffffffffff72cb]        # 0x10015e8
 100a31d:	mov    edi,eax
 100a31f:	test   eax,eax
 100a321:	js     0x100a332
 100a323:	mov    rcx,QWORD PTR [rbx]
 100a326:	mov    QWORD PTR [rsi],rcx
 100a329:	mov    rcx,QWORD PTR [rbx]
 100a32c:	mov    rdx,QWORD PTR [rcx]
 100a32f:	call   QWORD PTR [rdx+0x8]
 100a332:	mov    rbx,QWORD PTR [rsp+0x40]
 100a337:	mov    eax,edi
 100a339:	mov    rdi,QWORD PTR [rsp+0x48]
 100a33e:	add    rsp,0x30
 100a342:	pop    rsi
 100a343:	ret    
 100a344:	int3   
 100a345:	int3   
 100a346:	int3   
 100a347:	int3   
 100a348:	int3   
 100a349:	int3   
 100a34a:	int3   
 100a34b:	int3   
 100a34c:	int3   
 100a34d:	int3   
 100a34e:	int3   
 100a34f:	int3   
 100a350:	mov    rax,QWORD PTR [rdx]
 100a353:	mov    rcx,rdx
 100a356:	lea    r8,[rip+0xffffffffffff7883]        # 0x1001be0
 100a35d:	lea    rdx,[rip+0xffffffffffff793c]        # 0x1001ca0
 100a364:	rex.W jmp QWORD PTR [rax+0x18]
 100a368:	int3   
 100a369:	int3   
 100a36a:	int3   
 100a36b:	int3   
 100a36c:	int3   
 100a36d:	int3   
 100a36e:	int3   
 100a36f:	int3   
 100a370:	test   rdx,rdx
 100a373:	jne    0x100a37b
 100a375:	mov    eax,0x80070057
 100a37a:	ret    
 100a37b:	jmp    0x1007a80
 100a380:	int3   
 100a381:	int3   
 100a382:	int3   
 100a383:	int3   
 100a384:	int3   
 100a385:	int3   
 100a386:	int3   
 100a387:	int3   
 100a388:	int3   
 100a389:	int3   
 100a38a:	int3   
 100a38b:	int3   
 100a38c:	int3   
 100a38d:	int3   
 100a38e:	int3   
 100a38f:	int3   
 100a390:	mov    eax,0x80004005
 100a395:	ret    
 100a396:	int3   
 100a397:	int3   
 100a398:	int3   
 100a399:	int3   
 100a39a:	int3   
 100a39b:	int3   
 100a39c:	int3   
 100a39d:	int3   
 100a39e:	int3   
 100a39f:	int3   
 100a3a0:	mov    eax,0x80004005
 100a3a5:	ret    
 100a3a6:	int3   
 100a3a7:	int3   
 100a3a8:	int3   
 100a3a9:	int3   
 100a3aa:	int3   
 100a3ab:	int3   
 100a3ac:	int3   
 100a3ad:	int3   
 100a3ae:	int3   
 100a3af:	int3   
 100a3b0:	mov    QWORD PTR [rsp+0x8],rbx
 100a3b5:	mov    QWORD PTR [rsp+0x10],rsi
 100a3ba:	push   rdi
 100a3bb:	sub    rsp,0x20
 100a3bf:	cmp    DWORD PTR [rcx+0x8],0x0
 100a3c3:	lea    rax,[rip+0xffffffffffff77c6]        # 0x1001b90
 100a3ca:	mov    esi,edx
 100a3cc:	mov    QWORD PTR [rcx],rax
 100a3cf:	mov    rbx,rcx
 100a3d2:	je     0x100a40d
 100a3d4:	cmp    QWORD PTR [rcx+0x10],0x0
 100a3d9:	je     0x100a3ed
 100a3db:	add    rcx,0x8
 100a3df:	call   QWORD PTR [rip+0xffffffffffff6c5b]        # 0x1001040
 100a3e5:	mov    QWORD PTR [rbx+0x10],0x0
 100a3ed:	mov    rcx,QWORD PTR [rbx+0x40]
 100a3f1:	test   rcx,rcx
 100a3f4:	je     0x100a3fc
 100a3f6:	mov    rax,QWORD PTR [rcx]
 100a3f9:	call   QWORD PTR [rax+0x10]
 100a3fc:	lea    rcx,[rbx+0x18]
 100a400:	call   QWORD PTR [rip+0xffffffffffff6e42]        # 0x1001248
 100a406:	mov    DWORD PTR [rbx+0x8],0x0
 100a40d:	test   sil,0x1
 100a411:	je     0x100a41b
 100a413:	mov    rcx,rbx
 100a416:	call   0x100bccc
 100a41b:	mov    rsi,QWORD PTR [rsp+0x38]
 100a420:	mov    rax,rbx
 100a423:	mov    rbx,QWORD PTR [rsp+0x30]
 100a428:	add    rsp,0x20
 100a42c:	pop    rdi
 100a42d:	ret    
 100a42e:	int3   
 100a42f:	int3   
 100a430:	int3   
 100a431:	int3   
 100a432:	int3   
 100a433:	int3   
 100a434:	int3   
 100a435:	int3   
 100a436:	int3   
 100a437:	int3   
 100a438:	int3   
 100a439:	int3   
 100a43a:	int3   
 100a43b:	int3   
 100a43c:	int3   
 100a43d:	int3   
 100a43e:	int3   
 100a43f:	int3   
 100a440:	rex push rbx
 100a442:	sub    rsp,0x20
 100a446:	dec    DWORD PTR [rcx+0xc]
 100a449:	mov    ebx,DWORD PTR [rcx+0xc]
 100a44c:	jne    0x100a45b
 100a44e:	mov    rcx,QWORD PTR [rip+0x1aecb]        # 0x1025320
 100a455:	call   QWORD PTR [rip+0xffffffffffff6dcd]        # 0x1001228
 100a45b:	mov    eax,ebx
 100a45d:	add    rsp,0x20
 100a461:	pop    rbx
 100a462:	ret    
 100a463:	int3   
 100a464:	int3   
 100a465:	int3   
 100a466:	int3   
 100a467:	int3   
 100a468:	int3   
 100a469:	int3   
 100a46a:	int3   
 100a46b:	int3   
 100a46c:	int3   
 100a46d:	int3   
 100a46e:	int3   
 100a46f:	int3   
 100a470:	mov    QWORD PTR [rsp+0x8],rbx
 100a475:	mov    QWORD PTR [rsp+0x10],rsi
 100a47a:	push   rdi
 100a47b:	sub    rsp,0x20
 100a47f:	cmp    DWORD PTR [rcx+0x8],0x0
 100a483:	lea    rax,[rip+0xffffffffffff7706]        # 0x1001b90
 100a48a:	mov    esi,edx
 100a48c:	mov    QWORD PTR [rcx],rax
 100a48f:	mov    rbx,rcx
 100a492:	je     0x100a4cd
 100a494:	cmp    QWORD PTR [rcx+0x10],0x0
 100a499:	je     0x100a4ad
 100a49b:	add    rcx,0x8
 100a49f:	call   QWORD PTR [rip+0xffffffffffff6b9b]        # 0x1001040
 100a4a5:	mov    QWORD PTR [rbx+0x10],0x0
 100a4ad:	mov    rcx,QWORD PTR [rbx+0x40]
 100a4b1:	test   rcx,rcx
 100a4b4:	je     0x100a4bc
 100a4b6:	mov    rax,QWORD PTR [rcx]
 100a4b9:	call   QWORD PTR [rax+0x10]
 100a4bc:	lea    rcx,[rbx+0x18]
 100a4c0:	call   QWORD PTR [rip+0xffffffffffff6d82]        # 0x1001248
 100a4c6:	mov    DWORD PTR [rbx+0x8],0x0
 100a4cd:	test   sil,0x1
 100a4d1:	je     0x100a4db
 100a4d3:	mov    rcx,rbx
 100a4d6:	call   0x100bccc
 100a4db:	mov    rsi,QWORD PTR [rsp+0x38]
 100a4e0:	mov    rax,rbx
 100a4e3:	mov    rbx,QWORD PTR [rsp+0x30]
 100a4e8:	add    rsp,0x20
 100a4ec:	pop    rdi
 100a4ed:	ret    
 100a4ee:	int3   
 100a4ef:	int3   
 100a4f0:	int3   
 100a4f1:	int3   
 100a4f2:	int3   
 100a4f3:	int3   
 100a4f4:	int3   
 100a4f5:	int3   
 100a4f6:	int3   
 100a4f7:	int3   
 100a4f8:	int3   
 100a4f9:	int3   
 100a4fa:	int3   
 100a4fb:	int3   
 100a4fc:	int3   
 100a4fd:	int3   
 100a4fe:	int3   
 100a4ff:	int3   
 100a500:	sub    rsp,0x28
 100a504:	add    rcx,0x8
 100a508:	cmp    BYTE PTR [rcx+0x28],0x0
 100a50c:	je     0x100a518
 100a50e:	mov    BYTE PTR [rcx+0x28],0x0
 100a512:	call   QWORD PTR [rip+0xffffffffffff6d30]        # 0x1001248
 100a518:	add    rsp,0x28
 100a51c:	ret    
 100a51d:	int3   
 100a51e:	int3   
 100a51f:	int3   
 100a520:	int3   
 100a521:	int3   
 100a522:	int3   
 100a523:	int3   
 100a524:	int3   
 100a525:	int3   
 100a526:	int3   
 100a527:	int3   
 100a528:	int3   
 100a529:	int3   
 100a52a:	int3   
 100a52b:	int3   
 100a52c:	int3   
 100a52d:	int3   
 100a52e:	int3   
 100a52f:	int3   
 100a530:	mov    QWORD PTR [rsp+0x8],rbx
 100a535:	mov    QWORD PTR [rsp+0x10],rbp
 100a53a:	mov    QWORD PTR [rsp+0x18],rsi
 100a53f:	push   rdi
 100a540:	push   r14
 100a542:	push   r15
 100a544:	sub    rsp,0x20
 100a548:	xor    esi,esi
 100a54a:	mov    rbp,r8
 100a54d:	mov    r14d,edx
 100a550:	mov    rdi,rcx
 100a553:	lea    rax,[rcx-0x10]
 100a557:	test   rcx,rcx
 100a55a:	jne    0x100a55e
 100a55c:	mov    eax,esi
 100a55e:	lea    r15,[rax+0x30]
 100a562:	mov    rcx,r15
 100a565:	call   QWORD PTR [rip+0xffffffffffff6cf5]        # 0x1001260
 100a56b:	lea    rbx,[rdi+0x8]
 100a56f:	add    rdi,0x10
 100a573:	cmp    rbx,rdi
 100a576:	jae    0x100a597
 100a578:	mov    rcx,QWORD PTR [rbx]
 100a57b:	test   rcx,rcx
 100a57e:	je     0x100a58e
 100a580:	mov    rax,QWORD PTR [rcx]
 100a583:	mov    r8,rbp
 100a586:	mov    edx,r14d
 100a589:	call   QWORD PTR [rax+0x18]
 100a58c:	mov    esi,eax
 100a58e:	add    rbx,0x8
 100a592:	cmp    rbx,rdi
 100a595:	jb     0x100a578
 100a597:	mov    rcx,r15
 100a59a:	call   QWORD PTR [rip+0xffffffffffff6cb8]        # 0x1001258
 100a5a0:	mov    rbx,QWORD PTR [rsp+0x40]
 100a5a5:	mov    rbp,QWORD PTR [rsp+0x48]
 100a5aa:	mov    eax,esi
 100a5ac:	mov    rsi,QWORD PTR [rsp+0x50]
 100a5b1:	add    rsp,0x20
 100a5b5:	pop    r15
 100a5b7:	pop    r14
 100a5b9:	pop    rdi
 100a5ba:	ret    
 100a5bb:	int3   
 100a5bc:	int3   
 100a5bd:	int3   
 100a5be:	int3   
 100a5bf:	int3   
 100a5c0:	int3   
 100a5c1:	int3   
 100a5c2:	int3   
 100a5c3:	int3   
 100a5c4:	int3   
 100a5c5:	int3   
 100a5c6:	int3   
 100a5c7:	int3   
 100a5c8:	int3   
 100a5c9:	int3   
 100a5ca:	int3   
 100a5cb:	int3   
 100a5cc:	int3   
 100a5cd:	int3   
 100a5ce:	int3   
 100a5cf:	int3   
 100a5d0:	mov    QWORD PTR [rsp+0x8],rbx
 100a5d5:	push   rdi
 100a5d6:	sub    rsp,0x20
 100a5da:	lea    rbx,[rcx+0x8]
 100a5de:	lea    rdi,[rcx+0x10]
 100a5e2:	cmp    rbx,rdi
 100a5e5:	jae    0x100a5fe
 100a5e7:	mov    rcx,QWORD PTR [rbx]
 100a5ea:	test   rcx,rcx
 100a5ed:	je     0x100a5f5
 100a5ef:	mov    rax,QWORD PTR [rcx]
 100a5f2:	call   QWORD PTR [rax+0x10]
 100a5f5:	add    rbx,0x8
 100a5f9:	cmp    rbx,rdi
 100a5fc:	jb     0x100a5e7
 100a5fe:	mov    rbx,QWORD PTR [rsp+0x30]
 100a603:	add    rsp,0x20
 100a607:	pop    rdi
 100a608:	ret    
 100a609:	int3   
 100a60a:	int3   
 100a60b:	int3   
 100a60c:	int3   
 100a60d:	int3   
 100a60e:	int3   
 100a60f:	int3   
 100a610:	xor    eax,eax
 100a612:	xor    edx,edx
 100a614:	mov    DWORD PTR [rcx+0x28],edx
 100a617:	mov    QWORD PTR [rcx+0x30],rax
 100a61b:	mov    QWORD PTR [rcx+0x38],rax
 100a61f:	mov    QWORD PTR [rcx+0x40],rax
 100a623:	mov    QWORD PTR [rcx+0x48],rax
 100a627:	mov    QWORD PTR [rcx+0x50],rax
 100a62b:	mov    BYTE PTR [rcx+0x58],al
 100a62e:	mov    QWORD PTR [rcx+0x18],rdx
 100a632:	lea    rax,[rip+0xffffffffffff7607]        # 0x1001c40
 100a639:	mov    QWORD PTR [rcx+0x10],rax
 100a63d:	lea    rax,[rcx+0x64]
 100a641:	mov    DWORD PTR [rcx+0x60],edx
 100a644:	mov    WORD PTR [rax],dx
 100a647:	mov    QWORD PTR [rip+0x1ace2],rax        # 0x1025330
 100a64e:	mov    QWORD PTR [rip+0x1acbb],rcx        # 0x1025310
 100a655:	mov    DWORD PTR [rcx+0xc20],0x4
 100a65f:	mov    WORD PTR [rcx+0xc24],dx
 100a666:	mov    rax,rcx
 100a669:	ret    
 100a66a:	int3   
 100a66b:	int3   
 100a66c:	int3   
 100a66d:	int3   
 100a66e:	int3   
 100a66f:	int3   
 100a670:	mov    QWORD PTR [rsp+0x8],rbx
 100a675:	push   rdi
 100a676:	sub    rsp,0x20
 100a67a:	mov    rdi,rcx
 100a67d:	mov    rcx,QWORD PTR [rip+0x19c2c]        # 0x10242b0
 100a684:	test   rcx,rcx
 100a687:	je     0x100a68f
 100a689:	call   QWORD PTR [rip+0xffffffffffff6bd1]        # 0x1001260
 100a68f:	lea    rcx,[rdi+0x30]
 100a693:	call   QWORD PTR [rip+0xffffffffffff6bc7]        # 0x1001260
 100a699:	xor    r11d,r11d
 100a69c:	mov    QWORD PTR [rip+0x1ac8d],r11        # 0x1025330
 100a6a3:	mov    QWORD PTR [rip+0x1ac66],r11        # 0x1025310
 100a6aa:	lea    rcx,[rdi+0x8]
 100a6ae:	call   0x100a700
 100a6b3:	lea    rcx,[rdi+0x30]
 100a6b7:	call   QWORD PTR [rip+0xffffffffffff6b9b]        # 0x1001258
 100a6bd:	nop
 100a6be:	mov    rcx,QWORD PTR [rip+0x19beb]        # 0x10242b0
 100a6c5:	test   rcx,rcx
 100a6c8:	je     0x100a6d0
 100a6ca:	call   QWORD PTR [rip+0xffffffffffff6b88]        # 0x1001258
 100a6d0:	lea    rcx,[rdi+0x10]
 100a6d4:	call   0x100a5d0
 100a6d9:	lea    rcx,[rdi+0x28]
 100a6dd:	call   0x100a500
 100a6e2:	mov    rbx,QWORD PTR [rsp+0x30]
 100a6e7:	add    rsp,0x20
 100a6eb:	pop    rdi
 100a6ec:	ret    
 100a6ed:	int3   
 100a6ee:	int3   
 100a6ef:	int3   
 100a6f0:	int3   
 100a6f1:	int3   
 100a6f2:	int3   
 100a6f3:	int3   
 100a6f4:	int3   
 100a6f5:	int3   
 100a6f6:	int3   
 100a6f7:	int3   
 100a6f8:	int3   
 100a6f9:	int3   
 100a6fa:	int3   
 100a6fb:	int3   
 100a6fc:	int3   
 100a6fd:	int3   
 100a6fe:	int3   
 100a6ff:	int3   
 100a700:	sub    rsp,0x28
 100a704:	mov    rcx,QWORD PTR [rip+0x1ac1d]        # 0x1025328
 100a70b:	call   QWORD PTR [rip+0xffffffffffff6b17]        # 0x1001228
 100a711:	xor    eax,eax
 100a713:	add    rsp,0x28
 100a717:	ret    
 100a718:	int3   
 100a719:	int3   
 100a71a:	int3   
 100a71b:	int3   
 100a71c:	int3   
 100a71d:	int3   
 100a71e:	int3   
 100a71f:	int3   
 100a720:	rex push rbx
 100a722:	sub    rsp,0x20
 100a726:	cmp    DWORD PTR [rcx+0x58],0x0
 100a72a:	mov    rbx,rcx
 100a72d:	je     0x100a73a
 100a72f:	mov    eax,0x80004004
 100a734:	add    rsp,0x20
 100a738:	pop    rbx
 100a739:	ret    
 100a73a:	mov    rcx,QWORD PTR [rip+0x1abd7]        # 0x1025318
 100a741:	call   QWORD PTR [rip+0xffffffffffff6ae1]        # 0x1001228
 100a747:	mov    DWORD PTR [rbx+0x58],0x1
 100a74e:	xor    eax,eax
 100a750:	add    rsp,0x20
 100a754:	pop    rbx
 100a755:	ret    
 100a756:	int3   
 100a757:	int3   
 100a758:	int3   
 100a759:	int3   
 100a75a:	int3   
 100a75b:	int3   
 100a75c:	int3   
 100a75d:	int3   
 100a75e:	int3   
 100a75f:	int3   
 100a760:	sub    rsp,0x28
 100a764:	cmp    DWORD PTR [rcx+0x58],0x0
 100a768:	mov    r10,rdx
 100a76b:	je     0x100a777
 100a76d:	mov    eax,0x80004004
 100a772:	add    rsp,0x28
 100a776:	ret    
 100a777:	mov    QWORD PTR [rsp+0x30],rbx
 100a77c:	lea    rbx,[rcx+0x5c]
 100a780:	lea    r8,[rip+0xffffffffffff74f9]        # 0x1001c80
 100a787:	mov    QWORD PTR [rsp+0x20],rdi
 100a78c:	mov    edx,0x5dd
 100a791:	mov    rax,rbx
 100a794:	sub    r8,rbx
 100a797:	nop    WORD PTR [rax+rax*1+0x0]
 100a7a0:	lea    rcx,[rdx+0x7ffffa21]
 100a7a7:	test   rcx,rcx
 100a7aa:	je     0x100a7c4
 100a7ac:	movzx  ecx,WORD PTR [r8+rax*1]
 100a7b1:	test   cx,cx
 100a7b4:	je     0x100a7c4
 100a7b6:	mov    WORD PTR [rax],cx
 100a7b9:	add    rax,0x2
 100a7bd:	dec    rdx
 100a7c0:	jne    0x100a7a0
 100a7c2:	jmp    0x100a7c9
 100a7c4:	test   rdx,rdx
 100a7c7:	jne    0x100a7cd
 100a7c9:	sub    rax,0x2
 100a7cd:	xor    edi,edi
 100a7cf:	mov    WORD PTR [rax],di
 100a7d2:	mov    WORD PTR [rbx+0xbb8],di
 100a7d9:	or     rax,0xffffffffffffffff
 100a7dd:	nop    DWORD PTR [rax]
 100a7e0:	inc    rax
 100a7e3:	cmp    WORD PTR [rbx+rax*2],di
 100a7e7:	jne    0x100a7e0
 100a7e9:	mov    r9d,0x5dc
 100a7ef:	mov    r8,r10
 100a7f2:	mov    edx,0x5dd
 100a7f7:	sub    r9,rax
 100a7fa:	mov    rcx,rbx
 100a7fd:	call   QWORD PTR [rip+0xffffffffffff6d25]        # 0x1001528
 100a803:	mov    WORD PTR [rbx+0xbb8],di
 100a80a:	mov    rdi,QWORD PTR [rsp+0x20]
 100a80f:	mov    rbx,QWORD PTR [rsp+0x30]
 100a814:	xor    eax,eax
 100a816:	add    rsp,0x28
 100a81a:	ret    
 100a81b:	int3   
 100a81c:	int3   
 100a81d:	int3   
 100a81e:	int3   
 100a81f:	int3   
 100a820:	int3   
 100a821:	int3   
 100a822:	int3   
 100a823:	int3   
 100a824:	int3   
 100a825:	int3   
 100a826:	int3   
 100a827:	int3   
 100a828:	int3   
 100a829:	int3   
 100a82a:	int3   
 100a82b:	int3   
 100a82c:	int3   
 100a82d:	int3   
 100a82e:	int3   
 100a82f:	int3   
 100a830:	xor    eax,eax
 100a832:	ret    
 100a833:	int3   
 100a834:	int3   
 100a835:	int3   
 100a836:	int3   
 100a837:	int3   
 100a838:	int3   
 100a839:	int3   
 100a83a:	int3   
 100a83b:	int3   
 100a83c:	int3   
 100a83d:	int3   
 100a83e:	int3   
 100a83f:	int3   
 100a840:	rex push rbx
 100a842:	sub    rsp,0x20
 100a846:	mov    rbx,rcx
 100a849:	mov    rcx,QWORD PTR [rip+0x19a60]        # 0x10242b0
 100a850:	test   rcx,rcx
 100a853:	je     0x100a85b
 100a855:	call   QWORD PTR [rip+0xffffffffffff6a05]        # 0x1001260
 100a85b:	lea    r8,[rbx+0xc24]
 100a862:	lea    rcx,[rbx+0x10]
 100a866:	mov    edx,DWORD PTR [rbx+0xc20]
 100a86c:	call   0x100a530
 100a871:	nop
 100a872:	mov    rcx,QWORD PTR [rip+0x19a37]        # 0x10242b0
 100a879:	test   rcx,rcx
 100a87c:	je     0x100a884
 100a87e:	call   QWORD PTR [rip+0xffffffffffff69d4]        # 0x1001258
 100a884:	add    rsp,0x20
 100a888:	pop    rbx
 100a889:	ret    
 100a88a:	int3   
 100a88b:	int3   
 100a88c:	int3   
 100a88d:	int3   
 100a88e:	int3   
 100a88f:	int3   
 100a890:	xor    r11d,r11d
 100a893:	mov    eax,r11d
 100a896:	test   rdx,rdx
 100a899:	je     0x100a8a4
 100a89b:	cmp    rdx,0x7fffffff
 100a8a2:	jbe    0x100a8a9
 100a8a4:	mov    eax,0x80070057
 100a8a9:	test   eax,eax
 100a8ab:	js     0x100a908
 100a8ad:	mov    r10d,r11d
 100a8b0:	test   rdx,rdx
 100a8b3:	je     0x100a8f7
 100a8b5:	mov    r9d,0x7ffffffe
 100a8bb:	sub    r9,rdx
 100a8be:	sub    r8,rcx
 100a8c1:	lea    rax,[r9+rdx*1]
 100a8c5:	test   rax,rax
 100a8c8:	je     0x100a8f2
 100a8ca:	movzx  eax,WORD PTR [r8+rcx*1]
 100a8cf:	test   ax,ax
 100a8d2:	je     0x100a8f2
 100a8d4:	mov    WORD PTR [rcx],ax
 100a8d7:	add    rcx,0x2
 100a8db:	dec    rdx
 100a8de:	jne    0x100a8c1
 100a8e0:	sub    rcx,0x2
 100a8e4:	mov    r10d,0x8007007a
 100a8ea:	mov    WORD PTR [rcx],r11w
 100a8ee:	mov    eax,r10d
 100a8f1:	ret    
 100a8f2:	test   rdx,rdx
 100a8f5:	jne    0x100a901
 100a8f7:	sub    rcx,0x2
 100a8fb:	mov    r10d,0x8007007a
 100a901:	mov    WORD PTR [rcx],r11w
 100a905:	mov    eax,r10d
 100a908:	repz ret 
 100a90a:	int3   
 100a90b:	int3   
 100a90c:	int3   
 100a90d:	int3   
 100a90e:	int3   
 100a90f:	int3   
 100a910:	mov    QWORD PTR [rsp+0x8],rbx
 100a915:	mov    QWORD PTR [rsp+0x10],rsi
 100a91a:	mov    QWORD PTR [rsp+0x18],rdi
 100a91f:	push   r14
 100a921:	sub    rsp,0xaa0
 100a928:	mov    rax,QWORD PTR [rip+0x19d31]        # 0x1024660
 100a92f:	xor    rax,rsp
 100a932:	mov    QWORD PTR [rsp+0xa90],rax
 100a93a:	mov    QWORD PTR [rsp+0x30],0x0
 100a943:	xor    r14d,r14d
 100a946:	lea    rcx,[rsp+0x50]
 100a94b:	call   0x100d060
 100a950:	mov    edi,0x1
 100a955:	mov    ecx,edi
 100a957:	call   QWORD PTR [rip+0xffffffffffff67bb]        # 0x1001118
 100a95d:	nop
 100a95e:	call   0x100de10
 100a963:	test   eax,eax
 100a965:	js     0x100ac9a
 100a96b:	call   0x100df60
 100a970:	test   eax,eax
 100a972:	js     0x100ac9a
 100a978:	lea    rax,[rsp+0x30]
 100a97d:	mov    QWORD PTR [rsp+0x20],rax
 100a982:	lea    r9,[rip+0xffffffffffff7f6f]        # 0x10028f8
 100a989:	xor    edx,edx
 100a98b:	lea    r8d,[rdx+0x1]
 100a98f:	lea    rcx,[rip+0xffffffffffff7f52]        # 0x10028e8
 100a996:	call   QWORD PTR [rip+0xffffffffffff6c4c]        # 0x10015e8
 100a99c:	test   eax,eax
 100a99e:	js     0x100ac0a
 100a9a4:	mov    rcx,QWORD PTR [rsp+0x30]
 100a9a9:	test   rcx,rcx
 100a9ac:	je     0x100ac0a
 100a9b2:	mov    rax,QWORD PTR [rcx]
 100a9b5:	xor    edx,edx
 100a9b7:	call   QWORD PTR [rax+0x18]
 100a9ba:	mov    rcx,QWORD PTR [rsp+0x30]
 100a9bf:	mov    r10,QWORD PTR [rcx]
 100a9c2:	mov    rax,QWORD PTR [rip+0x198e7]        # 0x10242b0
 100a9c9:	mov    QWORD PTR [rsp+0x20],rax
 100a9ce:	mov    r9,QWORD PTR [rip+0x1a95b]        # 0x1025330
 100a9d5:	mov    r8,QWORD PTR [rip+0x1a94c]        # 0x1025328
 100a9dc:	mov    rdx,QWORD PTR [rip+0x198c5]        # 0x10242a8
 100a9e3:	call   QWORD PTR [r10+0x20]
 100a9e7:	mov    rcx,QWORD PTR [rsp+0x30]
 100a9ec:	mov    rax,QWORD PTR [rcx]
 100a9ef:	call   QWORD PTR [rax+0x30]
 100a9f2:	mov    rcx,QWORD PTR [rsp+0x30]
 100a9f7:	mov    rax,QWORD PTR [rcx]
 100a9fa:	call   QWORD PTR [rax+0x118]
 100aa00:	mov    r8,rax
 100aa03:	lea    r9,[rip+0xffffffffffff7396]        # 0x1001da0
 100aa0a:	xor    edx,edx
 100aa0c:	lea    rcx,[rip+0x1a9a5]        # 0x10253b8
 100aa13:	call   0x100e090
 100aa18:	test   eax,eax
 100aa1a:	js     0x100ac9a
 100aa20:	mov    rcx,QWORD PTR [rip+0x1a991]        # 0x10253b8
 100aa27:	call   0x100e180
 100aa2c:	mov    rcx,QWORD PTR [rsp+0x30]
 100aa31:	mov    rax,QWORD PTR [rcx]
 100aa34:	call   QWORD PTR [rax+0x88]
 100aa3a:	cmp    eax,0x1
 100aa3d:	je     0x100aa49
 100aa3f:	mov    rcx,QWORD PTR [rsp+0x30]
 100aa44:	jmp    0x100ac6a
 100aa49:	mov    rcx,QWORD PTR [rsp+0x30]
 100aa4e:	mov    rax,QWORD PTR [rcx]
 100aa51:	call   QWORD PTR [rax+0x60]
 100aa54:	mov    rcx,QWORD PTR [rsp+0x30]
 100aa59:	cmp    eax,0x1
 100aa5c:	mov    rax,QWORD PTR [rcx]
 100aa5f:	jne    0x100aa8d
 100aa61:	call   QWORD PTR [rax+0x58]
 100aa64:	mov    rcx,QWORD PTR [rsp+0x30]
 100aa69:	mov    rax,QWORD PTR [rcx]
 100aa6c:	call   QWORD PTR [rax+0x70]
 100aa6f:	mov    rcx,QWORD PTR [rsp+0x30]
 100aa74:	mov    rax,QWORD PTR [rcx]
 100aa77:	call   QWORD PTR [rax+0x10]
 100aa7a:	mov    QWORD PTR [rsp+0x30],0x0
 100aa83:	mov    eax,0x1
 100aa88:	jmp    0x100acea
 100aa8d:	call   QWORD PTR [rax+0x38]
 100aa90:	mov    rcx,QWORD PTR [rsp+0x30]
 100aa95:	mov    rax,QWORD PTR [rcx]
 100aa98:	call   QWORD PTR [rax+0x88]
 100aa9e:	cmp    eax,0x1
 100aaa1:	je     0x100aaad
 100aaa3:	mov    rcx,QWORD PTR [rsp+0x30]
 100aaa8:	jmp    0x100ac6a
 100aaad:	mov    rcx,QWORD PTR [rsp+0x30]
 100aab2:	mov    rax,QWORD PTR [rcx]
 100aab5:	call   QWORD PTR [rax+0x110]
 100aabb:	mov    esi,eax
 100aabd:	nop    DWORD PTR [rax]
 100aac0:	mov    rcx,QWORD PTR [rsp+0x30]
 100aac5:	mov    rax,QWORD PTR [rcx]
 100aac8:	call   QWORD PTR [rax+0x88]
 100aace:	cmp    eax,0x1
 100aad1:	jne    0x100ac03
 100aad7:	test   edi,edi
 100aad9:	jle    0x100ac03
 100aadf:	mov    rcx,QWORD PTR [rsp+0x30]
 100aae4:	mov    rax,QWORD PTR [rcx]
 100aae7:	call   QWORD PTR [rax+0x108]
 100aaed:	mov    edi,eax
 100aaef:	mov    DWORD PTR [rsp+0x40],eax
 100aaf3:	mov    ebx,0x1
 100aaf8:	mov    DWORD PTR [rsp+0x38],ebx
 100aafc:	mov    rcx,QWORD PTR [rsp+0x30]
 100ab01:	mov    rax,QWORD PTR [rcx]
 100ab04:	call   QWORD PTR [rax+0x40]
 100ab07:	mov    rcx,QWORD PTR [rsp+0x30]
 100ab0c:	mov    rax,QWORD PTR [rcx]
 100ab0f:	call   QWORD PTR [rax+0x100]
 100ab15:	test   eax,eax
 100ab17:	je     0x100ab3d
 100ab19:	mov    rcx,QWORD PTR [rsp+0x30]
 100ab1e:	mov    rax,QWORD PTR [rcx]
 100ab21:	mov    edx,ebx
 100ab23:	call   QWORD PTR [rax+0xa8]
 100ab29:	mov    rcx,QWORD PTR [rsp+0x30]
 100ab2e:	mov    rax,QWORD PTR [rcx]
 100ab31:	call   QWORD PTR [rax+0x100]
 100ab37:	test   eax,eax
 100ab39:	jne    0x100ab3d
 100ab3b:	jmp    0x100aac0
 100ab3d:	mov    rcx,QWORD PTR [rsp+0x30]
 100ab42:	mov    rax,QWORD PTR [rcx]
 100ab45:	call   QWORD PTR [rax+0xf0]
 100ab4b:	test   eax,eax
 100ab4d:	jne    0x100ab70
 100ab4f:	mov    rcx,QWORD PTR [rsp+0x30]
 100ab54:	mov    rax,QWORD PTR [rcx]
 100ab57:	call   QWORD PTR [rax+0xf8]
 100ab5d:	test   eax,eax
 100ab5f:	je     0x100ac03
 100ab65:	data16 data16 nop WORD PTR [rax+rax*1+0x0]
 100ab70:	mov    rcx,QWORD PTR [rsp+0x30]
 100ab75:	mov    rax,QWORD PTR [rcx]
 100ab78:	call   QWORD PTR [rax+0xf0]
 100ab7e:	test   eax,eax
 100ab80:	jne    0x100ab94
 100ab82:	mov    rcx,QWORD PTR [rsp+0x30]
 100ab87:	mov    rax,QWORD PTR [rcx]
 100ab8a:	call   QWORD PTR [rax+0xf8]
 100ab90:	test   eax,eax
 100ab92:	je     0x100abfe
 100ab94:	mov    rcx,QWORD PTR [rsp+0x30]
 100ab99:	mov    rax,QWORD PTR [rcx]
 100ab9c:	mov    edx,ebx
 100ab9e:	call   QWORD PTR [rax+0xa8]
 100aba4:	cmp    edi,0x1
 100aba7:	jl     0x100abfe
 100aba9:	mov    rcx,QWORD PTR [rsp+0x30]
 100abae:	mov    rax,QWORD PTR [rcx]
 100abb1:	call   QWORD PTR [rax+0xf0]
 100abb7:	test   eax,eax
 100abb9:	jne    0x100abcd
 100abbb:	mov    rcx,QWORD PTR [rsp+0x30]
 100abc0:	mov    rax,QWORD PTR [rcx]
 100abc3:	call   QWORD PTR [rax+0xf8]
 100abc9:	test   eax,eax
 100abcb:	je     0x100abfe
 100abcd:	dec    edi
 100abcf:	mov    DWORD PTR [rsp+0x40],edi
 100abd3:	test   esi,esi
 100abd5:	jne    0x100abf0
 100abd7:	add    ebx,0x1388
 100abdd:	mov    DWORD PTR [rsp+0x38],ebx
 100abe1:	cmp    ebx,0x927c0
 100abe7:	jl     0x100abf9
 100abe9:	mov    ebx,0x927c0
 100abee:	jmp    0x100abf5
 100abf0:	mov    ebx,0x3e8
 100abf5:	mov    DWORD PTR [rsp+0x38],ebx
 100abf9:	jmp    0x100ab70
 100abfe:	jmp    0x100aac0
 100ac03:	mov    rcx,QWORD PTR [rsp+0x30]
 100ac08:	jmp    0x100ac6a
 100ac0a:	lea    r8,[rip+0xffffffffffff7167]        # 0x1001d78
 100ac11:	mov    edx,0x697e
 100ac16:	lea    rcx,[rsp+0x50]
 100ac1b:	call   0x100d090
 100ac20:	lea    rcx,[rsp+0x5c]
 100ac25:	call   QWORD PTR [rip+0xffffffffffff68d5]        # 0x1001500
 100ac2b:	xor    r14d,r14d
 100ac2e:	mov    DWORD PTR [rsp+0x3c],r14d
 100ac33:	jmp    0x100ac9a
 100ac35:	mov    rcx,QWORD PTR [rsp+0x30]
 100ac3a:	test   rcx,rcx
 100ac3d:	je     0x100ac62
 100ac3f:	mov    rax,QWORD PTR [rcx]
 100ac42:	mov    edx,0x4e2a
 100ac47:	call   QWORD PTR [rax+0xc0]
 100ac4d:	mov    rcx,QWORD PTR [rsp+0x30]
 100ac52:	mov    rax,QWORD PTR [rcx]
 100ac55:	xor    edx,edx
 100ac57:	call   QWORD PTR [rax+0xb8]
 100ac5d:	mov    rcx,QWORD PTR [rsp+0x30]
 100ac62:	xor    r14d,r14d
 100ac65:	mov    DWORD PTR [rsp+0x3c],r14d
 100ac6a:	test   rcx,rcx
 100ac6d:	je     0x100ac9a
 100ac6f:	mov    rax,QWORD PTR [rcx]
 100ac72:	call   QWORD PTR [rax+0x70]
 100ac75:	mov    rcx,QWORD PTR [rsp+0x30]
 100ac7a:	mov    rax,QWORD PTR [rcx]
 100ac7d:	call   QWORD PTR [rax+0x88]
 100ac83:	mov    r14d,eax
 100ac86:	mov    rcx,QWORD PTR [rsp+0x30]
 100ac8b:	mov    rdx,QWORD PTR [rcx]
 100ac8e:	call   QWORD PTR [rdx+0x10]
 100ac91:	mov    QWORD PTR [rsp+0x30],0x0
 100ac9a:	mov    rbx,QWORD PTR [rip+0x1a717]        # 0x10253b8
 100aca1:	test   rbx,rbx
 100aca4:	je     0x100acc1
 100aca6:	mov    rcx,rbx
 100aca9:	call   0x1011ea0
 100acae:	mov    rcx,rbx
 100acb1:	call   0x100bccc
 100acb6:	mov    QWORD PTR [rip+0x1a6f7],0x0        # 0x10253b8
 100acc1:	call   0x100ddb0
 100acc6:	mov    eax,r14d
 100acc9:	test   r14d,r14d
 100accc:	je     0x100ace1
 100acce:	dec    eax
 100acd0:	je     0x100acdc
 100acd2:	dec    eax
 100acd4:	jne    0x100ace7
 100acd6:	lea    r14d,[rax+0x1]
 100acda:	jmp    0x100ace7
 100acdc:	xor    r14d,r14d
 100acdf:	jmp    0x100ace7
 100ace1:	mov    r14d,0x2
 100ace7:	mov    eax,r14d
 100acea:	mov    rcx,QWORD PTR [rsp+0xa90]
 100acf2:	xor    rcx,rsp
 100acf5:	call   0x100c0d0
 100acfa:	lea    r11,[rsp+0xaa0]
 100ad02:	mov    rbx,QWORD PTR [r11+0x10]
 100ad06:	mov    rsi,QWORD PTR [r11+0x18]
 100ad0a:	mov    rdi,QWORD PTR [r11+0x20]
 100ad0e:	mov    rsp,r11
 100ad11:	pop    r14
 100ad13:	ret    
 100ad14:	int3   
 100ad15:	int3   
 100ad16:	int3   
 100ad17:	int3   
 100ad18:	int3   
 100ad19:	int3   
 100ad1a:	int3   
 100ad1b:	int3   
 100ad1c:	int3   
 100ad1d:	int3   
 100ad1e:	int3   
 100ad1f:	int3   
 100ad20:	xor    eax,eax
 100ad22:	ret    
 100ad23:	int3   
 100ad24:	int3   
 100ad25:	int3   
 100ad26:	int3   
 100ad27:	int3   
 100ad28:	int3   
 100ad29:	int3   
 100ad2a:	int3   
 100ad2b:	int3   
 100ad2c:	int3   
 100ad2d:	int3   
 100ad2e:	int3   
 100ad2f:	int3   
 100ad30:	sub    rsp,0x28
 100ad34:	xor    r9d,r9d
 100ad37:	xor    r8d,r8d
 100ad3a:	xor    ecx,ecx
 100ad3c:	lea    edx,[r9+0x1]
 100ad40:	call   QWORD PTR [rip+0xffffffffffff63f2]        # 0x1001138
 100ad46:	lea    rcx,[rip+0x1af63]        # 0x1025cb0
 100ad4d:	call   0x100cad0
 100ad52:	lea    rcx,[rip+0x20a7]        # 0x100ce00
 100ad59:	call   QWORD PTR [rip+0xffffffffffff63d1]        # 0x1001130
 100ad5f:	lea    rcx,[rip+0xffffffffffff702a]        # 0x1001d90
 100ad66:	call   0x100d200
 100ad6b:	test   eax,eax
 100ad6d:	je     0x100ad8c
 100ad6f:	mov    QWORD PTR [rsp+0x20],rbx
 100ad74:	call   0x10084c0
 100ad79:	mov    ebx,eax
 100ad7b:	call   0x100d270
 100ad80:	mov    eax,ebx
 100ad82:	mov    rbx,QWORD PTR [rsp+0x20]
 100ad87:	add    rsp,0x28
 100ad8b:	ret    
 100ad8c:	mov    eax,0x1
 100ad91:	add    rsp,0x28
 100ad95:	ret    
 100ad96:	int3   
 100ad97:	int3   
 100ad98:	int3   
 100ad99:	int3   
 100ad9a:	int3   
 100ad9b:	int3   
 100ad9c:	int3   
 100ad9d:	int3   
 100ad9e:	int3   
 100ad9f:	int3   
 100ada0:	sub    rsp,0x28
 100ada4:	mov    eax,DWORD PTR [rip+0x1a86e]        # 0x1025618
 100adaa:	test   al,0x1
 100adac:	jne    0x100ae12
 100adae:	movups xmm0,XMMWORD PTR [rip+0xffffffffffff727b]        # 0x1002030
 100adb5:	or     eax,0x1
 100adb8:	lea    rcx,[rip+0x13221]        # 0x101dfe0
 100adbf:	mov    DWORD PTR [rip+0x1a853],eax        # 0x1025618
 100adc5:	lea    rax,[rip+0xffffffffffff7214]        # 0x1001fe0
 100adcc:	mov    QWORD PTR [rip+0x1a5fd],rax        # 0x10253d0
 100add3:	lea    rax,[rip+0x19506]        # 0x10242e0
 100adda:	movaps XMMWORD PTR [rip+0x1a80f],xmm0        # 0x10255f0
 100ade1:	mov    QWORD PTR [rip+0x1a5f0],rax        # 0x10253d8
 100ade8:	lea    rax,[rip+0x1a5d9]        # 0x10253c8
 100adef:	mov    QWORD PTR [rip+0x1a5ea],rax        # 0x10253e0
 100adf6:	xor    eax,eax
 100adf8:	mov    QWORD PTR [rip+0x1a801],rax        # 0x1025600
 100adff:	mov    QWORD PTR [rip+0x1a802],rax        # 0x1025608
 100ae06:	mov    QWORD PTR [rip+0x1a803],rax        # 0x1025610
 100ae0d:	call   0x100bda8
 100ae12:	lea    rax,[rip+0x1a5b7]        # 0x10253d0
 100ae19:	add    rsp,0x28
 100ae1d:	ret    
 100ae1e:	int3   
 100ae1f:	int3   
 100ae20:	int3   
 100ae21:	int3   
 100ae22:	int3   
 100ae23:	int3   
 100ae24:	int3   
 100ae25:	int3   
 100ae26:	int3   
 100ae27:	int3   
 100ae28:	int3   
 100ae29:	int3   
 100ae2a:	int3   
 100ae2b:	int3   
 100ae2c:	int3   
 100ae2d:	int3   
 100ae2e:	int3   
 100ae2f:	int3   
 100ae30:	mov    QWORD PTR [rsp+0x18],r8
 100ae35:	mov    QWORD PTR [rsp+0x20],r9
 100ae3a:	push   rbx
 100ae3b:	push   rsi
 100ae3c:	sub    rsp,0x28
 100ae40:	xor    ebx,ebx
 100ae42:	mov    rsi,rcx
 100ae45:	mov    eax,ebx
 100ae47:	test   rdx,rdx
 100ae4a:	je     0x100ae55
 100ae4c:	cmp    rdx,0x7fffffff
 100ae53:	jbe    0x100ae5a
 100ae55:	mov    eax,0x80070057
 100ae5a:	test   eax,eax
 100ae5c:	js     0x100aea4
 100ae5e:	mov    QWORD PTR [rsp+0x20],rdi
 100ae63:	lea    rdi,[rdx-0x1]
 100ae67:	lea    r9,[rsp+0x58]
 100ae6c:	mov    rdx,rdi
 100ae6f:	call   QWORD PTR [rip+0xffffffffffff6683]        # 0x10014f8
 100ae75:	test   eax,eax
 100ae77:	js     0x100ae94
 100ae79:	cdqe   
 100ae7b:	cmp    rax,rdi
 100ae7e:	ja     0x100ae94
 100ae80:	jne    0x100ae9d
 100ae82:	mov    WORD PTR [rsi+rdi*2],bx
 100ae86:	mov    rdi,QWORD PTR [rsp+0x20]
 100ae8b:	mov    eax,ebx
 100ae8d:	add    rsp,0x28
 100ae91:	pop    rsi
 100ae92:	pop    rbx
 100ae93:	ret    
 100ae94:	mov    WORD PTR [rsi+rdi*2],bx
 100ae98:	mov    ebx,0x8007007a
 100ae9d:	mov    rdi,QWORD PTR [rsp+0x20]
 100aea2:	mov    eax,ebx
 100aea4:	add    rsp,0x28
 100aea8:	pop    rsi
 100aea9:	pop    rbx
 100aeaa:	ret    
 100aeab:	int3   
 100aeac:	int3   
 100aead:	int3   
 100aeae:	int3   
 100aeaf:	int3   
 100aeb0:	int3   
 100aeb1:	int3   
 100aeb2:	int3   
 100aeb3:	int3   
 100aeb4:	int3   
 100aeb5:	int3   
 100aeb6:	int3   
 100aeb7:	int3   
 100aeb8:	int3   
 100aeb9:	int3   
 100aeba:	int3   
 100aebb:	int3   
 100aebc:	int3   
 100aebd:	int3   
 100aebe:	int3   
 100aebf:	int3   
 100aec0:	rex push rbx
 100aec2:	sub    rsp,0x20
 100aec6:	lea    rax,[rip+0xffffffffffff6fd3]        # 0x1001ea0
 100aecd:	mov    rbx,rcx
 100aed0:	mov    QWORD PTR [rcx],rax
 100aed3:	test   dl,0x1
 100aed6:	je     0x100aedd
 100aed8:	call   0x100bccc
 100aedd:	mov    rax,rbx
 100aee0:	add    rsp,0x20
 100aee4:	pop    rbx
 100aee5:	ret    
 100aee6:	int3   
 100aee7:	int3   
 100aee8:	int3   
 100aee9:	int3   
 100aeea:	int3   
 100aeeb:	int3   
 100aeec:	int3   
 100aeed:	int3   
 100aeee:	int3   
 100aeef:	int3   
 100aef0:	mov    QWORD PTR [rsp+0x20],rbx
 100aef5:	push   r14
 100aef7:	sub    rsp,0x20
 100aefb:	movzx  ebx,r8w
 100aeff:	mov    r14,rcx
 100af02:	call   0x100b7a0
 100af07:	test   eax,eax
 100af09:	je     0x100b1e3
 100af0f:	lea    rcx,[rip+0xffffffffffff712a]        # 0x1002040
 100af16:	xor    r8d,r8d
 100af19:	xor    edx,edx
 100af1b:	call   QWORD PTR [rip+0xffffffffffff62cf]        # 0x10011f0
 100af21:	mov    QWORD PTR [r14+0x240],rax
 100af28:	test   rax,rax
 100af2b:	je     0x100b1e3
 100af31:	lea    rdx,[rip+0xffffffffffff7120]        # 0x1002058
 100af38:	mov    rcx,rax
 100af3b:	call   QWORD PTR [rip+0xffffffffffff634f]        # 0x1001290
 100af41:	mov    QWORD PTR [r14+0x238],rax
 100af48:	test   rax,rax
 100af4b:	je     0x100b1e3
 100af51:	lea    rcx,[r14+0x230]
 100af58:	call   QWORD PTR [rip+0x216d2]        # 0x102c630
 100af5e:	test   eax,eax
 100af60:	je     0x100b1e3
 100af66:	mov    QWORD PTR [rsp+0x30],rbp
 100af6b:	mov    QWORD PTR [rsp+0x38],rsi
 100af70:	mov    QWORD PTR [rsp+0x40],rdi
 100af75:	call   0x100ad20
 100af7a:	lea    rdx,[rip+0xffffffffffff6f07]        # 0x1001e88
 100af81:	mov    r8,rax
 100af84:	mov    rax,QWORD PTR [r14+0x8]
 100af88:	mov    rcx,QWORD PTR [rax]
 100af8b:	mov    rcx,QWORD PTR [rcx+0x8]
 100af8f:	call   QWORD PTR [rip+0xffffffffffff655b]        # 0x10014f0
 100af95:	mov    r11,QWORD PTR [r14+0x8]
 100af99:	mov    rdx,QWORD PTR [r11]
 100af9c:	test   bx,bx
 100af9f:	je     0x100afc1
 100afa1:	mov    ecx,DWORD PTR [rdx+0x4]
 100afa4:	mov    eax,ecx
 100afa6:	and    eax,0x3ff
 100afab:	cmp    eax,0x3ff
 100afb0:	jne    0x100afc1
 100afb2:	movzx  eax,bx
 100afb5:	xor    eax,ecx
 100afb7:	and    eax,0x3ff
 100afbc:	xor    eax,ecx
 100afbe:	mov    DWORD PTR [rdx+0x4],eax
 100afc1:	xor    esi,esi
 100afc3:	xor    ebp,ebp
 100afc5:	data16 data16 nop WORD PTR [rax+rax*1+0x0]
 100afd0:	mov    rax,QWORD PTR [r14+0x8]
 100afd4:	xor    edi,edi
 100afd6:	mov    rax,QWORD PTR [rax+rbp*1+0x8]
 100afdb:	lea    r11,[rax+0x10]
 100afdf:	nop
 100afe0:	test   rax,rax
 100afe3:	je     0x100b1b4
 100afe9:	cmp    edi,DWORD PTR [rax+0x8]
 100afec:	jae    0x100b1b4
 100aff2:	mov    rdx,QWORD PTR [r11]
 100aff5:	test   bx,bx
 100aff8:	je     0x100b021
 100affa:	mov    r8d,DWORD PTR [rdx+0x4]
 100affe:	mov    ecx,r8d
 100b001:	and    ecx,0x3ff
 100b007:	cmp    ecx,0x3ff
 100b00d:	jne    0x100b021
 100b00f:	movzx  ecx,bx
 100b012:	xor    ecx,r8d
 100b015:	and    ecx,0x3ff
 100b01b:	xor    ecx,r8d
 100b01e:	mov    DWORD PTR [rdx+0x4],ecx
 100b021:	mov    ecx,esi
 100b023:	test   esi,esi
 100b025:	je     0x100b0d6
 100b02b:	dec    ecx
 100b02d:	je     0x100b040
 100b02f:	dec    ecx
 100b031:	je     0x100b080
 100b033:	sub    ecx,0x2
 100b036:	je     0x100b040
 100b038:	dec    ecx
 100b03a:	jne    0x100b1a9
 100b040:	mov    r8,QWORD PTR [r11]
 100b043:	test   bx,bx
 100b046:	je     0x100b1a9
 100b04c:	mov    edx,DWORD PTR [r8+0x20]
 100b050:	mov    ecx,edx
 100b052:	and    ecx,0x3ff
 100b058:	cmp    ecx,0x3ff
 100b05e:	jne    0x100b1a9
 100b064:	movzx  ecx,bx
 100b067:	inc    edi
 100b069:	xor    ecx,edx
 100b06b:	and    ecx,0x3ff
 100b071:	xor    ecx,edx
 100b073:	add    r11,0x8
 100b077:	mov    DWORD PTR [r8+0x20],ecx
 100b07b:	jmp    0x100afe0
 100b080:	mov    rcx,QWORD PTR [r11]
 100b083:	movzx  r8d,WORD PTR [rcx+0x20]
 100b088:	mov    rdx,QWORD PTR [rcx+0x28]
 100b08c:	test   r8d,r8d
 100b08f:	je     0x100b1a9
 100b095:	mov    r9d,r8d
 100b098:	test   bx,bx
 100b09b:	je     0x100b0c2
 100b09d:	mov    r8d,DWORD PTR [rdx]
 100b0a0:	mov    ecx,r8d
 100b0a3:	and    ecx,0x3ff
 100b0a9:	cmp    ecx,0x3ff
 100b0af:	jne    0x100b0c2
 100b0b1:	movzx  ecx,bx
 100b0b4:	xor    ecx,r8d
 100b0b7:	and    ecx,0x3ff
 100b0bd:	xor    ecx,r8d
 100b0c0:	mov    DWORD PTR [rdx],ecx
 100b0c2:	add    rdx,0x38
 100b0c6:	dec    r9
 100b0c9:	jne    0x100b098
 100b0cb:	inc    edi
 100b0cd:	add    r11,0x8
 100b0d1:	jmp    0x100afe0
 100b0d6:	mov    r10,QWORD PTR [r11]
 100b0d9:	movzx  ecx,WORD PTR [r10+0x22]
 100b0de:	mov    rdx,QWORD PTR [r10+0x38]
 100b0e2:	test   ecx,ecx
 100b0e4:	je     0x100b123
 100b0e6:	mov    r9d,ecx
 100b0e9:	nop    DWORD PTR [rax+0x0]
 100b0f0:	test   bx,bx
 100b0f3:	je     0x100b11a
 100b0f5:	mov    r8d,DWORD PTR [rdx]
 100b0f8:	mov    ecx,r8d
 100b0fb:	and    ecx,0x3ff
 100b101:	cmp    ecx,0x3ff
 100b107:	jne    0x100b11a
 100b109:	movzx  ecx,bx
 100b10c:	xor    ecx,r8d
 100b10f:	and    ecx,0x3ff
 100b115:	xor    ecx,r8d
 100b118:	mov    DWORD PTR [rdx],ecx
 100b11a:	add    rdx,0x38
 100b11e:	dec    r9
 100b121:	jne    0x100b0f0
 100b123:	movzx  ecx,WORD PTR [r10+0x20]
 100b128:	mov    rdx,QWORD PTR [r10+0x30]
 100b12c:	test   ecx,ecx
 100b12e:	je     0x100b166
 100b130:	mov    r9d,ecx
 100b133:	test   bx,bx
 100b136:	je     0x100b15d
 100b138:	mov    r8d,DWORD PTR [rdx]
 100b13b:	mov    ecx,r8d
 100b13e:	and    ecx,0x3ff
 100b144:	cmp    ecx,0x3ff
 100b14a:	jne    0x100b15d
 100b14c:	movzx  ecx,bx
 100b14f:	xor    ecx,r8d
 100b152:	and    ecx,0x3ff
 100b158:	xor    ecx,r8d
 100b15b:	mov    DWORD PTR [rdx],ecx
 100b15d:	add    rdx,0x28
 100b161:	dec    r9
 100b164:	jne    0x100b133
 100b166:	movzx  ecx,WORD PTR [r10+0x24]
 100b16b:	mov    rdx,QWORD PTR [r10+0x40]
 100b16f:	test   ecx,ecx
 100b171:	je     0x100b1a9
 100b173:	mov    r9d,ecx
 100b176:	test   bx,bx
 100b179:	je     0x100b1a0
 100b17b:	mov    r8d,DWORD PTR [rdx]
 100b17e:	mov    ecx,r8d
 100b181:	and    ecx,0x3ff
 100b187:	cmp    ecx,0x3ff
 100b18d:	jne    0x100b1a0
 100b18f:	movzx  ecx,bx
 100b192:	xor    ecx,r8d
 100b195:	and    ecx,0x3ff
 100b19b:	xor    ecx,r8d
 100b19e:	mov    DWORD PTR [rdx],ecx
 100b1a0:	add    rdx,0x28
 100b1a4:	dec    r9
 100b1a7:	jne    0x100b176
 100b1a9:	inc    edi
 100b1ab:	add    r11,0x8
 100b1af:	jmp    0x100afe0
 100b1b4:	inc    esi
 100b1b6:	add    rbp,0x8
 100b1ba:	cmp    esi,0x8
 100b1bd:	jb     0x100afd0
 100b1c3:	mov    rdi,QWORD PTR [rsp+0x40]
 100b1c8:	mov    rsi,QWORD PTR [rsp+0x38]
 100b1cd:	mov    rbp,QWORD PTR [rsp+0x30]
 100b1d2:	mov    eax,0x1
 100b1d7:	mov    rbx,QWORD PTR [rsp+0x48]
 100b1dc:	add    rsp,0x20
 100b1e0:	pop    r14
 100b1e2:	ret    
 100b1e3:	xor    eax,eax
 100b1e5:	mov    rbx,QWORD PTR [rsp+0x48]
 100b1ea:	add    rsp,0x20
 100b1ee:	pop    r14
 100b1f0:	ret    
 100b1f1:	int3   
 100b1f2:	int3   
 100b1f3:	int3   
 100b1f4:	int3   
 100b1f5:	int3   
 100b1f6:	int3   
 100b1f7:	int3   
 100b1f8:	int3   
 100b1f9:	int3   
 100b1fa:	int3   
 100b1fb:	int3   
 100b1fc:	int3   
 100b1fd:	int3   
 100b1fe:	int3   
 100b1ff:	int3   
 100b200:	mov    QWORD PTR [rsp+0x8],rbx
 100b205:	mov    QWORD PTR [rsp+0x10],rbp
 100b20a:	mov    QWORD PTR [rsp+0x18],rsi
 100b20f:	mov    QWORD PTR [rsp+0x20],rdi
 100b214:	push   r12
 100b216:	push   r14
 100b218:	push   r15
 100b21a:	sub    rsp,0x20
 100b21e:	mov    rax,QWORD PTR [rcx+0x8]
 100b222:	mov    r14,rcx
 100b225:	mov    r12d,0x3ff
 100b22b:	mov    rdx,QWORD PTR [rax]
 100b22e:	movzx  ebx,WORD PTR [rdx+0x4]
 100b232:	call   0x100ad20
 100b237:	lea    rdx,[rip+0xffffffffffff6c4a]        # 0x1001e88
 100b23e:	mov    r8,rax
 100b241:	mov    rax,QWORD PTR [r14+0x8]
 100b245:	mov    rcx,QWORD PTR [rax]
 100b248:	mov    rcx,QWORD PTR [rcx+0x8]
 100b24c:	call   QWORD PTR [rip+0xffffffffffff629e]        # 0x10014f0
 100b252:	mov    r11,QWORD PTR [r14+0x8]
 100b256:	mov    r8,QWORD PTR [r11]
 100b259:	and    bx,r12w
 100b25d:	je     0x100b274
 100b25f:	mov    edx,DWORD PTR [r8+0x4]
 100b263:	mov    ecx,edx
 100b265:	and    ecx,r12d
 100b268:	cmp    cx,bx
 100b26b:	jne    0x100b274
 100b26d:	or     edx,r12d
 100b270:	mov    DWORD PTR [r8+0x4],edx
 100b274:	xor    ebp,ebp
 100b276:	xor    r15d,r15d
 100b279:	nop    DWORD PTR [rax+0x0]
 100b280:	mov    rax,QWORD PTR [r14+0x8]
 100b284:	xor    esi,esi
 100b286:	mov    rax,QWORD PTR [r15+rax*1+0x8]
 100b28b:	lea    rdi,[rax+0x10]
 100b28f:	nop
 100b290:	test   rax,rax
 100b293:	je     0x100b3f4
 100b299:	cmp    esi,DWORD PTR [rax+0x8]
 100b29c:	jae    0x100b3f4
 100b2a2:	mov    r8,QWORD PTR [rdi]
 100b2a5:	test   bx,bx
 100b2a8:	je     0x100b2c0
 100b2aa:	mov    r9d,DWORD PTR [r8+0x4]
 100b2ae:	mov    edx,r9d
 100b2b1:	and    edx,r12d
 100b2b4:	cmp    dx,bx
 100b2b7:	jne    0x100b2c0
 100b2b9:	or     r9d,r12d
 100b2bc:	mov    DWORD PTR [r8+0x4],r9d
 100b2c0:	mov    ecx,ebp
 100b2c2:	test   ebp,ebp
 100b2c4:	je     0x100b350
 100b2ca:	dec    ecx
 100b2cc:	je     0x100b2df
 100b2ce:	dec    ecx
 100b2d0:	je     0x100b30d
 100b2d2:	sub    ecx,0x2
 100b2d5:	je     0x100b2df
 100b2d7:	dec    ecx
 100b2d9:	jne    0x100b3e9
 100b2df:	mov    r9,QWORD PTR [rdi]
 100b2e2:	test   bx,bx
 100b2e5:	je     0x100b3e9
 100b2eb:	mov    r8d,DWORD PTR [r9+0x20]
 100b2ef:	mov    edx,r8d
 100b2f2:	and    edx,r12d
 100b2f5:	cmp    dx,bx
 100b2f8:	jne    0x100b3e9
 100b2fe:	or     r8d,r12d
 100b301:	inc    esi
 100b303:	add    rdi,0x8
 100b307:	mov    DWORD PTR [r9+0x20],r8d
 100b30b:	jmp    0x100b290
 100b30d:	mov    rcx,QWORD PTR [rdi]
 100b310:	movzx  edx,WORD PTR [rcx+0x20]
 100b314:	mov    r9,QWORD PTR [rcx+0x28]
 100b318:	test   edx,edx
 100b31a:	je     0x100b3e9
 100b320:	mov    r10d,edx
 100b323:	test   bx,bx
 100b326:	je     0x100b33c
 100b328:	mov    r8d,DWORD PTR [r9]
 100b32b:	mov    edx,r8d
 100b32e:	and    edx,r12d
 100b331:	cmp    dx,bx
 100b334:	jne    0x100b33c
 100b336:	or     r8d,r12d
 100b339:	mov    DWORD PTR [r9],r8d
 100b33c:	add    r9,0x38
 100b340:	dec    r10
 100b343:	jne    0x100b323
 100b345:	inc    esi
 100b347:	add    rdi,0x8
 100b34b:	jmp    0x100b290
 100b350:	mov    r11,QWORD PTR [rdi]
 100b353:	movzx  ecx,WORD PTR [r11+0x22]
 100b358:	mov    r9,QWORD PTR [r11+0x38]
 100b35c:	test   ecx,ecx
 100b35e:	je     0x100b385
 100b360:	mov    r10d,ecx
 100b363:	test   bx,bx
 100b366:	je     0x100b37c
 100b368:	mov    r8d,DWORD PTR [r9]
 100b36b:	mov    edx,r8d
 100b36e:	and    edx,r12d
 100b371:	cmp    dx,bx
 100b374:	jne    0x100b37c
 100b376:	or     r8d,r12d
 100b379:	mov    DWORD PTR [r9],r8d
 100b37c:	add    r9,0x38
 100b380:	dec    r10
 100b383:	jne    0x100b363
 100b385:	movzx  ecx,WORD PTR [r11+0x20]
 100b38a:	mov    r9,QWORD PTR [r11+0x30]
 100b38e:	test   ecx,ecx
 100b390:	je     0x100b3b7
 100b392:	mov    r10d,ecx
 100b395:	test   bx,bx
 100b398:	je     0x100b3ae
 100b39a:	mov    r8d,DWORD PTR [r9]
 100b39d:	mov    edx,r8d
 100b3a0:	and    edx,r12d
 100b3a3:	cmp    dx,bx
 100b3a6:	jne    0x100b3ae
 100b3a8:	or     r8d,r12d
 100b3ab:	mov    DWORD PTR [r9],r8d
 100b3ae:	add    r9,0x28
 100b3b2:	dec    r10
 100b3b5:	jne    0x100b395
 100b3b7:	movzx  ecx,WORD PTR [r11+0x24]
 100b3bc:	mov    r9,QWORD PTR [r11+0x40]
 100b3c0:	test   ecx,ecx
 100b3c2:	je     0x100b3e9
 100b3c4:	mov    r10d,ecx
 100b3c7:	test   bx,bx
 100b3ca:	je     0x100b3e0
 100b3cc:	mov    r8d,DWORD PTR [r9]
 100b3cf:	mov    edx,r8d
 100b3d2:	and    edx,r12d
 100b3d5:	cmp    dx,bx
 100b3d8:	jne    0x100b3e0
 100b3da:	or     r8d,r12d
 100b3dd:	mov    DWORD PTR [r9],r8d
 100b3e0:	add    r9,0x28
 100b3e4:	dec    r10
 100b3e7:	jne    0x100b3c7
 100b3e9:	inc    esi
 100b3eb:	add    rdi,0x8
 100b3ef:	jmp    0x100b290
 100b3f4:	inc    ebp
 100b3f6:	add    r15,0x8
 100b3fa:	cmp    ebp,0x8
 100b3fd:	jb     0x100b280
 100b403:	mov    rcx,QWORD PTR [r14+0x230]
 100b40a:	test   rcx,rcx
 100b40d:	je     0x100b420
 100b40f:	call   QWORD PTR [rip+0x21223]        # 0x102c638
 100b415:	mov    QWORD PTR [r14+0x230],0x0
 100b420:	mov    rcx,QWORD PTR [r14+0x228]
 100b427:	test   rcx,rcx
 100b42a:	je     0x100b44e
 100b42c:	call   QWORD PTR [rip+0xffffffffffff5dce]        # 0x1001200
 100b432:	mov    rax,QWORD PTR [rip+0xffffffffffff6bf7]        # 0x1002030
 100b439:	mov    QWORD PTR [r14+0x220],rax
 100b440:	mov    rax,QWORD PTR [rip+0xffffffffffff6bf1]        # 0x1002038
 100b447:	mov    QWORD PTR [r14+0x228],rax
 100b44e:	mov    rcx,QWORD PTR [r14+0x240]
 100b455:	test   rcx,rcx
 100b458:	je     0x100b476
 100b45a:	call   QWORD PTR [rip+0xffffffffffff5da0]        # 0x1001200
 100b460:	mov    QWORD PTR [r14+0x240],0x0
 100b46b:	mov    QWORD PTR [r14+0x238],0x0
 100b476:	mov    rbx,QWORD PTR [rsp+0x40]
 100b47b:	mov    rbp,QWORD PTR [rsp+0x48]
 100b480:	mov    rsi,QWORD PTR [rsp+0x50]
 100b485:	mov    rdi,QWORD PTR [rsp+0x58]
 100b48a:	add    rsp,0x20
 100b48e:	pop    r15
 100b490:	pop    r14
 100b492:	pop    r12
 100b494:	ret    
 100b495:	int3   
 100b496:	int3   
 100b497:	int3   
 100b498:	int3   
 100b499:	int3   
 100b49a:	int3   
 100b49b:	int3   
 100b49c:	int3   
 100b49d:	int3   
 100b49e:	int3   
 100b49f:	int3   
 100b4a0:	mov    rax,QWORD PTR [rcx+0x8]
 100b4a4:	ret    
 100b4a5:	int3   
 100b4a6:	int3   
 100b4a7:	int3   
 100b4a8:	int3   
 100b4a9:	int3   
 100b4aa:	int3   
 100b4ab:	int3   
 100b4ac:	int3   
 100b4ad:	int3   
 100b4ae:	int3   
 100b4af:	int3   
 100b4b0:	mov    QWORD PTR [rsp+0x8],rbx
 100b4b5:	mov    QWORD PTR [rsp+0x10],rbp
 100b4ba:	mov    QWORD PTR [rsp+0x18],rsi
 100b4bf:	mov    QWORD PTR [rsp+0x20],rdi
 100b4c4:	push   r14
 100b4c6:	sub    rsp,0x20
 100b4ca:	mov    rax,QWORD PTR [rdx+0x30]
 100b4ce:	xor    ebp,ebp
 100b4d0:	mov    r14,rcx
 100b4d3:	mov    rdi,QWORD PTR [rax+0x28]
 100b4d7:	mov    rbx,rdx
 100b4da:	lea    esi,[rbp+0x1]
 100b4dd:	mov    rcx,QWORD PTR [rdi]
 100b4e0:	mov    rax,rcx
 100b4e3:	test   rcx,rcx
 100b4e6:	je     0x100b4fd
 100b4e8:	add    rdx,0x38
 100b4ec:	nop    DWORD PTR [rax+0x0]
 100b4f0:	cmp    rax,rdx
 100b4f3:	je     0x100b52e
 100b4f5:	mov    rax,QWORD PTR [rax]
 100b4f8:	test   rax,rax
 100b4fb:	jne    0x100b4f0
 100b4fd:	mov    rax,QWORD PTR [r14]
 100b500:	test   rcx,rcx
 100b503:	mov    r8d,ebp
 100b506:	mov    rdx,rbx
 100b509:	mov    rcx,r14
 100b50c:	sete   r8b
 100b510:	call   QWORD PTR [rax+0x40]
 100b513:	test   eax,eax
 100b515:	je     0x100b52e
 100b517:	mov    rcx,rbx
 100b51a:	call   0x100f320
 100b51f:	mov    rax,QWORD PTR [rdi]
 100b522:	lea    r11,[rbx+0x38]
 100b526:	mov    QWORD PTR [r11],rax
 100b529:	mov    ebp,esi
 100b52b:	mov    QWORD PTR [rdi],r11
 100b52e:	mov    rax,QWORD PTR [rbx+0x30]
 100b532:	mov    edx,DWORD PTR [rax+0x4]
 100b535:	shr    edx,0xa
 100b538:	and    edx,0x3ffff
 100b53e:	mov    ecx,edx
 100b540:	and    ecx,0x1f
 100b543:	shl    esi,cl
 100b545:	mov    rcx,QWORD PTR [r14+0x10]
 100b549:	shr    rdx,0x5
 100b54d:	lock or DWORD PTR [rcx+rdx*4],esi
 100b551:	mov    rbx,QWORD PTR [rsp+0x30]
 100b556:	mov    rsi,QWORD PTR [rsp+0x40]
 100b55b:	mov    rdi,QWORD PTR [rsp+0x48]
 100b560:	mov    eax,ebp
 100b562:	mov    rbp,QWORD PTR [rsp+0x38]
 100b567:	add    rsp,0x20
 100b56b:	pop    r14
 100b56d:	ret    
 100b56e:	int3   
 100b56f:	int3   
 100b570:	int3   
 100b571:	int3   
 100b572:	int3   
 100b573:	int3   
 100b574:	int3   
 100b575:	int3   
 100b576:	int3   
 100b577:	int3   
 100b578:	int3   
 100b579:	int3   
 100b57a:	int3   
 100b57b:	int3   
 100b57c:	int3   
 100b57d:	int3   
 100b57e:	int3   
 100b57f:	int3   
 100b580:	mov    r11,QWORD PTR [rdx+0x30]
 100b584:	mov    r9,rcx
 100b587:	mov    r10,rdx
 100b58a:	mov    ecx,DWORD PTR [r11+0x4]
 100b58e:	mov    edx,0x1
 100b593:	shr    ecx,0xa
 100b596:	and    ecx,0x3ffff
 100b59c:	mov    eax,ecx
 100b59e:	and    ecx,0x1f
 100b5a1:	shr    eax,0x5
 100b5a4:	shl    edx,cl
 100b5a6:	mov    ecx,eax
 100b5a8:	mov    rax,QWORD PTR [r9+0x10]
 100b5ac:	test   DWORD PTR [rax+rcx*4],edx
 100b5af:	je     0x100b5ce
 100b5b1:	mov    rax,QWORD PTR [r11+0x28]
 100b5b5:	mov    rax,QWORD PTR [rax]
 100b5b8:	test   rax,rax
 100b5bb:	je     0x100b5ce
 100b5bd:	lea    rcx,[r10+0x38]
 100b5c1:	cmp    rax,rcx
 100b5c4:	je     0x100b5d9
 100b5c6:	mov    rax,QWORD PTR [rax]
 100b5c9:	test   rax,rax
 100b5cc:	jne    0x100b5c1
 100b5ce:	xor    eax,eax
 100b5d0:	mov    DWORD PTR [r8],eax
 100b5d3:	mov    eax,0x1
 100b5d8:	ret    
 100b5d9:	mov    eax,0x1
 100b5de:	mov    DWORD PTR [r8],eax
 100b5e1:	ret    
 100b5e2:	int3   
 100b5e3:	int3   
 100b5e4:	int3   
 100b5e5:	int3   
 100b5e6:	int3   
 100b5e7:	int3   
 100b5e8:	int3   
 100b5e9:	int3   
 100b5ea:	int3   
 100b5eb:	int3   
 100b5ec:	int3   
 100b5ed:	int3   
 100b5ee:	int3   
 100b5ef:	int3   
 100b5f0:	mov    QWORD PTR [rsp+0x8],rbx
 100b5f5:	mov    QWORD PTR [rsp+0x10],rsi
 100b5fa:	mov    QWORD PTR [rsp+0x18],rdi
 100b5ff:	push   r14
 100b601:	sub    rsp,0x20
 100b605:	mov    rax,QWORD PTR [rdx+0x30]
 100b609:	xor    ebx,ebx
 100b60b:	mov    rdi,rdx
 100b60e:	mov    rsi,QWORD PTR [rax+0x28]
 100b612:	mov    r14,rcx
 100b615:	mov    r8,QWORD PTR [rsi]
 100b618:	mov    r9,r8
 100b61b:	test   r8,r8
 100b61e:	je     0x100b631
 100b620:	lea    r10,[rdx+0x38]
 100b624:	cmp    r9,r10
 100b627:	je     0x100b649
 100b629:	mov    r9,QWORD PTR [r9]
 100b62c:	test   r9,r9
 100b62f:	jne    0x100b624
 100b631:	mov    eax,ebx
 100b633:	mov    rbx,QWORD PTR [rsp+0x30]
 100b638:	mov    rsi,QWORD PTR [rsp+0x38]
 100b63d:	mov    rdi,QWORD PTR [rsp+0x40]
 100b642:	add    rsp,0x20
 100b646:	pop    r14
 100b648:	ret    
 100b649:	mov    rcx,rsi
 100b64c:	test   r8,r8
 100b64f:	je     0x100b669
 100b651:	cmp    r8,r10
 100b654:	je     0x100b663
 100b656:	mov    rcx,r8
 100b659:	mov    r8,QWORD PTR [r8]
 100b65c:	test   r8,r8
 100b65f:	jne    0x100b651
 100b661:	jmp    0x100b669
 100b663:	mov    rax,QWORD PTR [r8]
 100b666:	mov    QWORD PTR [rcx],rax
 100b669:	mov    rcx,rdx
 100b66c:	call   0x100f6f0
 100b671:	cmp    QWORD PTR [rsi],rbx
 100b674:	mov    r11,QWORD PTR [r14]
 100b677:	sete   bl
 100b67a:	mov    rdx,rdi
 100b67d:	mov    rcx,r14
 100b680:	mov    r8d,ebx
 100b683:	call   QWORD PTR [r11+0x48]
 100b687:	cmp    QWORD PTR [rsi],0x0
 100b68b:	jne    0x100b6c4
 100b68d:	mov    rcx,QWORD PTR [rdi+0x30]
 100b691:	call   0x100f390
 100b696:	mov    r11,QWORD PTR [rdi+0x30]
 100b69a:	mov    r8d,0x1
 100b6a0:	mov    ecx,DWORD PTR [r11+0x4]
 100b6a4:	shr    ecx,0xa
 100b6a7:	and    ecx,0x3ffff
 100b6ad:	mov    edx,ecx
 100b6af:	and    ecx,0x1f
 100b6b2:	shr    edx,0x5
 100b6b5:	shl    r8d,cl
 100b6b8:	mov    rcx,QWORD PTR [r14+0x10]
 100b6bc:	not    r8d
 100b6bf:	lock and DWORD PTR [rcx+rdx*4],r8d
 100b6c4:	mov    eax,0x1
 100b6c9:	jmp    0x100b633
 100b6ce:	int3   
 100b6cf:	int3   
 100b6d0:	int3   
 100b6d1:	int3   
 100b6d2:	int3   
 100b6d3:	int3   
 100b6d4:	int3   
 100b6d5:	int3   
 100b6d6:	int3   
 100b6d7:	int3   
 100b6d8:	int3   
 100b6d9:	int3   
 100b6da:	int3   
 100b6db:	int3   
 100b6dc:	int3   
 100b6dd:	int3   
 100b6de:	int3   
 100b6df:	int3   
 100b6e0:	mov    QWORD PTR [rsp+0x8],rbx
 100b6e5:	mov    QWORD PTR [rsp+0x10],rbp
 100b6ea:	mov    QWORD PTR [rsp+0x18],rsi
 100b6ef:	push   rdi
 100b6f0:	push   r14
 100b6f2:	push   r15
 100b6f4:	sub    rsp,0x30
 100b6f8:	mov    r15d,edx
 100b6fb:	mov    rdx,QWORD PTR [rcx+0x230]
 100b702:	mov    rsi,rcx
 100b705:	lea    rcx,[rsp+0x20]
 100b70a:	mov    rbp,r9
 100b70d:	mov    r14d,r8d
 100b710:	call   0x10168f0
 100b715:	lea    rcx,[rsp+0x20]
 100b71a:	xor    ebx,ebx
 100b71c:	or     edx,0xffffffff
 100b71f:	mov    edi,ebx
 100b721:	call   0x1016910
 100b726:	test   eax,eax
 100b728:	jne    0x100b74b
 100b72a:	mov    edx,r15d
 100b72d:	mov    rcx,rsi
 100b730:	call   0x100b880
 100b735:	mov    r9d,DWORD PTR [rsp+0x70]
 100b73a:	mov    r8,rbp
 100b73d:	mov    rcx,rax
 100b740:	mov    edx,r14d
 100b743:	call   QWORD PTR [rsi+0x238]
 100b749:	mov    edi,eax
 100b74b:	lea    rcx,[rsp+0x20]
 100b750:	call   0x1016940
 100b755:	mov    rbp,QWORD PTR [rsp+0x58]
 100b75a:	mov    rsi,QWORD PTR [rsp+0x60]
 100b75f:	test   edi,edi
 100b761:	setg   bl
 100b764:	mov    eax,ebx
 100b766:	mov    rbx,QWORD PTR [rsp+0x50]
 100b76b:	add    rsp,0x30
 100b76f:	pop    r15
 100b771:	pop    r14
 100b773:	pop    rdi
 100b774:	ret    
 100b775:	int3   
 100b776:	int3   
 100b777:	int3   
 100b778:	int3   
 100b779:	int3   
 100b77a:	int3   
 100b77b:	int3   
 100b77c:	int3   
 100b77d:	int3   
 100b77e:	int3   
 100b77f:	int3   
 100b780:	mov    eax,0x1
 100b785:	ret    
 100b786:	int3   
 100b787:	int3   
 100b788:	int3   
 100b789:	int3   
 100b78a:	int3   
 100b78b:	int3   
 100b78c:	int3   
 100b78d:	int3   
 100b78e:	int3   
 100b78f:	int3   
 100b790:	mov    eax,0x1
 100b795:	ret    
 100b796:	int3   
 100b797:	int3   
 100b798:	int3   
 100b799:	int3   
 100b79a:	int3   
 100b79b:	int3   
 100b79c:	int3   
 100b79d:	int3   
 100b79e:	int3   
 100b79f:	int3   
 100b7a0:	mov    QWORD PTR [rsp+0x18],rbx
 100b7a5:	mov    QWORD PTR [rsp+0x20],rbp
 100b7aa:	push   rdi
 100b7ab:	sub    rsp,0x20
 100b7af:	lea    rbp,[rcx+0x18]
 100b7b3:	mov    rbx,rcx
 100b7b6:	xor    edx,edx
 100b7b8:	mov    r8d,0x208
 100b7be:	mov    rcx,rbp
 100b7c1:	xor    edi,edi
 100b7c3:	call   0x100c10e
 100b7c8:	mov    r11,QWORD PTR [rbx+0x8]
 100b7cc:	mov    r8d,0x104
 100b7d2:	mov    rcx,QWORD PTR [r11]
 100b7d5:	mov    rdx,rbp
 100b7d8:	mov    rcx,QWORD PTR [rcx+0x48]
 100b7dc:	call   QWORD PTR [rip+0xffffffffffff599e]        # 0x1001180
 100b7e2:	lea    rcx,[rip+0xffffffffffff687f]        # 0x1002068
 100b7e9:	xor    r8d,r8d
 100b7ec:	xor    edx,edx
 100b7ee:	call   QWORD PTR [rip+0xffffffffffff59fc]        # 0x10011f0
 100b7f4:	mov    rbx,rax
 100b7f7:	test   rax,rax
 100b7fa:	je     0x100b863
 100b7fc:	lea    rdx,[rip+0xffffffffffff687d]        # 0x1002080
 100b803:	mov    rcx,rax
 100b806:	mov    QWORD PTR [rsp+0x30],rsi
 100b80b:	mov    QWORD PTR [rsp+0x38],r14
 100b810:	call   QWORD PTR [rip+0xffffffffffff5a7a]        # 0x1001290
 100b816:	lea    rdx,[rip+0xffffffffffff687b]        # 0x1002098
 100b81d:	mov    rcx,rbx
 100b820:	mov    r14,rax
 100b823:	call   QWORD PTR [rip+0xffffffffffff5a67]        # 0x1001290
 100b829:	mov    rsi,rax
 100b82c:	test   r14,r14
 100b82f:	je     0x100b850
 100b831:	test   rax,rax
 100b834:	je     0x100b850
 100b836:	mov    rcx,rbp
 100b839:	call   r14
 100b83c:	mov    edi,eax
 100b83e:	test   eax,eax
 100b840:	je     0x100b850
 100b842:	lea    rdx,[rip+0xffffffffffff685f]        # 0x10020a8
 100b849:	mov    rcx,rbp
 100b84c:	call   rsi
 100b84e:	mov    edi,eax
 100b850:	mov    rcx,rbx
 100b853:	call   QWORD PTR [rip+0xffffffffffff59a7]        # 0x1001200
 100b859:	mov    r14,QWORD PTR [rsp+0x38]
 100b85e:	mov    rsi,QWORD PTR [rsp+0x30]
 100b863:	mov    rbx,QWORD PTR [rsp+0x40]
 100b868:	mov    rbp,QWORD PTR [rsp+0x48]
 100b86d:	mov    eax,edi
 100b86f:	add    rsp,0x20
 100b873:	pop    rdi
 100b874:	ret    
 100b875:	int3   
 100b876:	int3   
 100b877:	int3   
 100b878:	int3   
 100b879:	int3   
 100b87a:	int3   
 100b87b:	int3   
 100b87c:	int3   
 100b87d:	int3   
 100b87e:	int3   
 100b87f:	int3   
 100b880:	rex push rbx
 100b882:	push   rsi
 100b883:	push   rdi
 100b884:	sub    rsp,0x250
 100b88b:	mov    rax,QWORD PTR [rip+0x18dce]        # 0x1024660
 100b892:	xor    rax,rsp
 100b895:	mov    QWORD PTR [rsp+0x240],rax
 100b89d:	xor    edi,edi
 100b89f:	mov    esi,edx
 100b8a1:	mov    rbx,rcx
 100b8a4:	cmp    DWORD PTR [rcx+0x220],edx
 100b8aa:	jne    0x100b8b8
 100b8ac:	mov    rax,QWORD PTR [rcx+0x228]
 100b8b3:	jmp    0x100b991
 100b8b8:	mov    rcx,QWORD PTR [rcx+0x228]
 100b8bf:	mov    QWORD PTR [rsp+0x280],rbp
 100b8c7:	test   rcx,rcx
 100b8ca:	je     0x100b8df
 100b8cc:	call   QWORD PTR [rip+0xffffffffffff592e]        # 0x1001200
 100b8d2:	mov    DWORD PTR [rbx+0x220],edi
 100b8d8:	mov    QWORD PTR [rbx+0x228],rdi
 100b8df:	mov    rax,QWORD PTR [rbx+0x8]
 100b8e3:	mov    WORD PTR [rsp+0x30],di
 100b8e8:	lea    r9,[rbx+0x18]
 100b8ec:	mov    rcx,QWORD PTR [rax]
 100b8ef:	lea    r8,[rip+0xffffffffffff67ca]        # 0x10020c0
 100b8f6:	mov    edx,0x104
 100b8fb:	mov    rax,QWORD PTR [rcx+0x30]
 100b8ff:	lea    rcx,[rsp+0x30]
 100b904:	mov    QWORD PTR [rsp+0x28],rax
 100b909:	mov    DWORD PTR [rsp+0x20],esi
 100b90d:	call   0x100ae30
 100b912:	test   eax,eax
 100b914:	js     0x100b92f
 100b916:	xor    edx,edx
 100b918:	lea    rcx,[rsp+0x30]
 100b91d:	lea    r8d,[rdx+0x22]
 100b921:	call   QWORD PTR [rip+0xffffffffffff58c9]        # 0x10011f0
 100b927:	mov    rdi,rax
 100b92a:	test   rax,rax
 100b92d:	jne    0x100b979
 100b92f:	mov    rax,QWORD PTR [rbx+0x8]
 100b933:	lea    r9,[rbx+0x18]
 100b937:	lea    r8,[rip+0xffffffffffff6782]        # 0x10020c0
 100b93e:	mov    rcx,QWORD PTR [rax]
 100b941:	mov    edx,0x104
 100b946:	mov    rax,QWORD PTR [rcx+0x30]
 100b94a:	lea    rcx,[rsp+0x30]
 100b94f:	mov    QWORD PTR [rsp+0x28],rax
 100b954:	mov    DWORD PTR [rsp+0x20],0x409
 100b95c:	call   0x100ae30
 100b961:	test   eax,eax
 100b963:	js     0x100b97f
 100b965:	xor    edx,edx
 100b967:	lea    rcx,[rsp+0x30]
 100b96c:	lea    r8d,[rdx+0x22]
 100b970:	call   QWORD PTR [rip+0xffffffffffff587a]        # 0x10011f0
 100b976:	mov    rdi,rax
 100b979:	mov    DWORD PTR [rbx+0x220],esi
 100b97f:	mov    rbp,QWORD PTR [rsp+0x280]
 100b987:	mov    QWORD PTR [rbx+0x228],rdi
 100b98e:	mov    rax,rdi
 100b991:	mov    rcx,QWORD PTR [rsp+0x240]
 100b999:	xor    rcx,rsp
 100b99c:	call   0x100c0d0
 100b9a1:	add    rsp,0x250
 100b9a8:	pop    rdi
 100b9a9:	pop    rsi
 100b9aa:	pop    rbx
 100b9ab:	ret    
 100b9ac:	int3   
 100b9ad:	int3   
 100b9ae:	int3   
 100b9af:	int3   
 100b9b0:	int3   
 100b9b1:	int3   
 100b9b2:	int3   
 100b9b3:	int3   
 100b9b4:	int3   
 100b9b5:	int3   
 100b9b6:	int3   
 100b9b7:	int3   
 100b9b8:	int3   
 100b9b9:	int3   
 100b9ba:	int3   
 100b9bb:	int3   
 100b9bc:	int3   
 100b9bd:	int3   
 100b9be:	int3   
 100b9bf:	int3   
 100b9c0:	rex push rbx
 100b9c2:	sub    rsp,0x20
 100b9c6:	lea    rax,[rip+0xffffffffffff64d3]        # 0x1001ea0
 100b9cd:	mov    rbx,rcx
 100b9d0:	mov    QWORD PTR [rcx],rax
 100b9d3:	test   dl,0x1
 100b9d6:	je     0x100b9dd
 100b9d8:	call   0x100bccc
 100b9dd:	mov    rax,rbx
 100b9e0:	add    rsp,0x20
 100b9e4:	pop    rbx
 100b9e5:	ret    
 100b9e6:	int3   
 100b9e7:	int3   
 100b9e8:	int3   
 100b9e9:	int3   
 100b9ea:	int3   
 100b9eb:	int3   
 100b9ec:	sub    rsp,0x38
 100b9f0:	lea    rcx,[rip+0x7d9]        # 0x100c1d0
 100b9f7:	call   0x100bda8
 100b9fc:	mov    r11d,DWORD PTR [rip+0x1a1f1]        # 0x1025bf4
 100ba03:	mov    r9d,DWORD PTR [rip+0x1a1e6]        # 0x1025bf0
 100ba0a:	lea    rax,[rip+0x19c5b]        # 0x102566c
 100ba11:	lea    r8,[rip+0x19c40]        # 0x1025658
 100ba18:	lea    rdx,[rip+0x19c41]        # 0x1025660
 100ba1f:	lea    rcx,[rip+0x19c2a]        # 0x1025650
 100ba26:	mov    DWORD PTR [rip+0x19c3f],r11d        # 0x102566c
 100ba2d:	mov    QWORD PTR [rsp+0x20],rax
 100ba32:	call   QWORD PTR [rip+0xffffffffffff5920]        # 0x1001358
 100ba38:	mov    DWORD PTR [rip+0x19c2a],eax        # 0x1025668
 100ba3e:	test   eax,eax
 100ba40:	jns    0x100ba4c
 100ba42:	mov    ecx,0x8
 100ba47:	call   0x100c182
 100ba4c:	add    rsp,0x38
 100ba50:	ret    
 100ba51:	int3   
 100ba52:	int3   
 100ba53:	int3   
 100ba54:	int3   
 100ba55:	int3   
 100ba56:	int3   
 100ba57:	int3   
 100ba58:	mov    QWORD PTR [rsp+0x8],rbx
 100ba5d:	push   rdi
 100ba5e:	sub    rsp,0x20
 100ba62:	mov    rax,QWORD PTR gs:0x30
 100ba6b:	mov    rbx,QWORD PTR [rax+0x8]
 100ba6f:	xor    edi,edi
 100ba71:	xor    eax,eax
 100ba73:	lock cmpxchg QWORD PTR [rip+0x22f14],rbx        # 0x102e990
 100ba7c:	je     0x100ba99
 100ba7e:	cmp    rax,rbx
 100ba81:	jne    0x100ba8c
 100ba83:	mov    ebx,0x1
 100ba88:	mov    edi,ebx
 100ba8a:	jmp    0x100ba9e
 100ba8c:	mov    ecx,0x3e8
 100ba91:	call   QWORD PTR [rip+0xffffffffffff5801]        # 0x1001298
 100ba97:	jmp    0x100ba71
 100ba99:	mov    ebx,0x1
 100ba9e:	mov    eax,DWORD PTR [rip+0x22ee8]        # 0x102e98c
 100baa4:	cmp    eax,ebx
 100baa6:	jne    0x100bab4
 100baa8:	mov    ecx,0x1f
 100baad:	call   0x100c182
 100bab2:	jmp    0x100baeb
 100bab4:	mov    eax,DWORD PTR [rip+0x22ed2]        # 0x102e98c
 100baba:	test   eax,eax
 100babc:	jne    0x100bae5
 100babe:	mov    DWORD PTR [rip+0x22ec8],ebx        # 0x102e98c
 100bac4:	lea    rdx,[rip+0xffffffffffff5bdd]        # 0x10016a8
 100bacb:	lea    rcx,[rip+0xffffffffffff5bbe]        # 0x1001690
 100bad2:	call   0x100c304
 100bad7:	test   eax,eax
 100bad9:	je     0x100baeb
 100badb:	mov    eax,0xff
 100bae0:	jmp    0x100bbcd
 100bae5:	mov    DWORD PTR [rip+0x19b89],ebx        # 0x1025674
 100baeb:	mov    eax,DWORD PTR [rip+0x22e9b]        # 0x102e98c
 100baf1:	cmp    eax,ebx
 100baf3:	jne    0x100bb12
 100baf5:	lea    rdx,[rip+0xffffffffffff5b8c]        # 0x1001688
 100bafc:	lea    rcx,[rip+0xffffffffffff5b15]        # 0x1001618
 100bb03:	call   0x100c2f8
 100bb08:	mov    DWORD PTR [rip+0x22e7a],0x2        # 0x102e98c
 100bb12:	test   edi,edi
 100bb14:	jne    0x100bb1f
 100bb16:	xor    eax,eax
 100bb18:	xchg   QWORD PTR [rip+0x22e71],rax        # 0x102e990
 100bb1f:	cmp    QWORD PTR [rip+0x22e81],0x0        # 0x102e9a8
 100bb27:	je     0x100bb48
 100bb29:	lea    rcx,[rip+0x22e78]        # 0x102e9a8
 100bb30:	call   0x100c2b0
 100bb35:	test   eax,eax
 100bb37:	je     0x100bb48
 100bb39:	xor    r8d,r8d
 100bb3c:	lea    edx,[r8+0x2]
 100bb40:	xor    ecx,ecx
 100bb42:	call   QWORD PTR [rip+0x22e60]        # 0x102e9a8
 100bb48:	mov    rcx,QWORD PTR [rip+0xffffffffffff5831]        # 0x1001380
 100bb4f:	mov    rax,QWORD PTR [rip+0x19b02]        # 0x1025658
 100bb56:	mov    QWORD PTR [rcx],rax
 100bb59:	mov    r8,QWORD PTR [rip+0x19af8]        # 0x1025658
 100bb60:	mov    rdx,QWORD PTR [rip+0x19af9]        # 0x1025660
 100bb67:	mov    ecx,DWORD PTR [rip+0x19ae3]        # 0x1025650
 100bb6d:	call   0x100ad30
 100bb72:	mov    DWORD PTR [rip+0x19af8],eax        # 0x1025670
 100bb78:	cmp    DWORD PTR [rip+0x19ad5],0x0        # 0x1025654
 100bb7f:	jne    0x100bb89
 100bb81:	mov    ecx,eax
 100bb83:	call   QWORD PTR [rip+0xffffffffffff57ef]        # 0x1001378
 100bb89:	cmp    DWORD PTR [rip+0x19ae4],0x0        # 0x1025674
 100bb90:	jne    0x100bb9e
 100bb92:	call   QWORD PTR [rip+0xffffffffffff57d8]        # 0x1001370
 100bb98:	mov    eax,DWORD PTR [rip+0x19ad2]        # 0x1025670
 100bb9e:	jmp    0x100bbcd
 100bba0:	mov    DWORD PTR [rip+0x19aca],eax        # 0x1025670
 100bba6:	cmp    DWORD PTR [rip+0x19aa7],0x0        # 0x1025654
 100bbad:	jne    0x100bbb8
 100bbaf:	mov    ecx,eax
 100bbb1:	call   QWORD PTR [rip+0xffffffffffff57b1]        # 0x1001368
 100bbb7:	int3   
 100bbb8:	cmp    DWORD PTR [rip+0x19ab5],0x0        # 0x1025674
 100bbbf:	jne    0x100bbcd
 100bbc1:	call   QWORD PTR [rip+0xffffffffffff57a9]        # 0x1001370
 100bbc7:	mov    eax,DWORD PTR [rip+0x19aa3]        # 0x1025670
 100bbcd:	mov    rbx,QWORD PTR [rsp+0x30]
 100bbd2:	add    rsp,0x20
 100bbd6:	pop    rdi
 100bbd7:	ret    
 100bbd8:	int3   
 100bbd9:	int3   
 100bbda:	int3   
 100bbdb:	int3   
 100bbdc:	int3   
 100bbdd:	int3   
 100bbde:	int3   
 100bbdf:	int3   
 100bbe0:	sub    rsp,0x28
 100bbe4:	mov    eax,0x5a4d
 100bbe9:	cmp    WORD PTR [rip+0xffffffffffff4410],ax        # 0x1000000
 100bbf0:	je     0x100bbf6
 100bbf2:	xor    ecx,ecx
 100bbf4:	jmp    0x100bc2e
 100bbf6:	movsxd rax,DWORD PTR [rip+0xffffffffffff443f]        # 0x100003c
 100bbfd:	lea    rcx,[rip+0xffffffffffff43fc]        # 0x1000000
 100bc04:	add    rax,rcx
 100bc07:	cmp    DWORD PTR [rax],0x4550
 100bc0d:	jne    0x100bbf2
 100bc0f:	mov    ecx,0x20b
 100bc14:	cmp    WORD PTR [rax+0x18],cx
 100bc18:	jne    0x100bbf2
 100bc1a:	xor    ecx,ecx
 100bc1c:	cmp    DWORD PTR [rax+0x84],0xe
 100bc23:	jbe    0x100bc2e
 100bc25:	cmp    DWORD PTR [rax+0xf8],ecx
 100bc2b:	setne  cl
 100bc2e:	mov    DWORD PTR [rip+0x19a20],ecx        # 0x1025654
 100bc34:	mov    ecx,0x1
 100bc39:	call   QWORD PTR [rip+0xffffffffffff5849]        # 0x1001488
 100bc3f:	or     rcx,0xffffffffffffffff
 100bc43:	call   QWORD PTR [rip+0xffffffffffff5657]        # 0x10012a0
 100bc49:	mov    rcx,QWORD PTR [rip+0xffffffffffff5830]        # 0x1001480
 100bc50:	mov    QWORD PTR [rip+0x22d41],rax        # 0x102e998
 100bc57:	mov    QWORD PTR [rip+0x22d42],rax        # 0x102e9a0
 100bc5e:	mov    eax,DWORD PTR [rip+0x19f98]        # 0x1025bfc
 100bc64:	mov    DWORD PTR [rcx],eax
 100bc66:	mov    rdx,QWORD PTR [rip+0xffffffffffff580b]        # 0x1001478
 100bc6d:	mov    eax,DWORD PTR [rip+0x19f85]        # 0x1025bf8
 100bc73:	mov    DWORD PTR [rdx],eax
 100bc75:	call   0x100c190
 100bc7a:	call   0x100c31c
 100bc7f:	cmp    DWORD PTR [rip+0x189f6],0x0        # 0x102467c
 100bc86:	jne    0x100bc95
 100bc88:	lea    rcx,[rip+0x681]        # 0x100c310
 100bc8f:	call   QWORD PTR [rip+0xffffffffffff57db]        # 0x1001470
 100bc95:	cmp    DWORD PTR [rip+0x189dc],0xffffffff        # 0x1024678
 100bc9c:	jne    0x100bca7
 100bc9e:	or     ecx,0xffffffff
 100bca1:	call   QWORD PTR [rip+0xffffffffffff57c1]        # 0x1001468
 100bca7:	xor    eax,eax
 100bca9:	add    rsp,0x28
 100bcad:	ret    
 100bcae:	int3   
 100bcaf:	int3   
 100bcb0:	int3   
 100bcb1:	int3   
 100bcb2:	int3   
 100bcb3:	int3   
 100bcb4:	sub    rsp,0x28
 100bcb8:	call   0x100c328
 100bcbd:	add    rsp,0x28
 100bcc1:	jmp    0x100ba58
 100bcc6:	int3   
 100bcc7:	int3   
 100bcc8:	int3   
 100bcc9:	int3   
 100bcca:	int3   
 100bccb:	int3   
 100bccc:	jmp    QWORD PTR [rip+0xffffffffffff5736]        # 0x1001408
 100bcd2:	int3   
 100bcd3:	int3   
 100bcd4:	int3   
 100bcd5:	int3   
 100bcd6:	int3   
 100bcd7:	int3   
 100bcd8:	jmp    QWORD PTR [rip+0xffffffffffff566a]        # 0x1001348
 100bcde:	int3   
 100bcdf:	int3   
 100bce0:	int3   
 100bce1:	int3   
 100bce2:	int3   
 100bce3:	int3   
 100bce4:	jmp    QWORD PTR [rip+0xffffffffffff569e]        # 0x1001388
 100bcea:	int3   
 100bceb:	int3   
 100bcec:	int3   
 100bced:	int3   
 100bcee:	int3   
 100bcef:	int3   
 100bcf0:	rex push rbx
 100bcf2:	sub    rsp,0x20
 100bcf6:	mov    rbx,rcx
 100bcf9:	mov    rcx,QWORD PTR [rip+0x22ca0]        # 0x102e9a0
 100bd00:	call   QWORD PTR [rip+0xffffffffffff55a2]        # 0x10012a8
 100bd06:	mov    QWORD PTR [rsp+0x38],rax
 100bd0b:	cmp    rax,0xffffffffffffffff
 100bd0f:	jne    0x100bd1c
 100bd11:	mov    rcx,rbx
 100bd14:	call   QWORD PTR [rip+0xffffffffffff578e]        # 0x10014a8
 100bd1a:	jmp    0x100bd9a
 100bd1c:	mov    ecx,0x8
 100bd21:	call   0x100c3fa
 100bd26:	nop
 100bd27:	mov    rcx,QWORD PTR [rip+0x22c72]        # 0x102e9a0
 100bd2e:	call   QWORD PTR [rip+0xffffffffffff5574]        # 0x10012a8
 100bd34:	mov    QWORD PTR [rsp+0x38],rax
 100bd39:	mov    rcx,QWORD PTR [rip+0x22c58]        # 0x102e998
 100bd40:	call   QWORD PTR [rip+0xffffffffffff5562]        # 0x10012a8
 100bd46:	mov    QWORD PTR [rsp+0x40],rax
 100bd4b:	mov    rcx,rbx
 100bd4e:	call   QWORD PTR [rip+0xffffffffffff554c]        # 0x10012a0
 100bd54:	mov    rcx,rax
 100bd57:	lea    r8,[rsp+0x40]
 100bd5c:	lea    rdx,[rsp+0x38]
 100bd61:	call   0x100c3ee
 100bd66:	mov    rbx,rax
 100bd69:	mov    rcx,QWORD PTR [rsp+0x38]
 100bd6e:	call   QWORD PTR [rip+0xffffffffffff552c]        # 0x10012a0
 100bd74:	mov    QWORD PTR [rip+0x22c25],rax        # 0x102e9a0
 100bd7b:	mov    rcx,QWORD PTR [rsp+0x40]
 100bd80:	call   QWORD PTR [rip+0xffffffffffff551a]        # 0x10012a0
 100bd86:	mov    QWORD PTR [rip+0x22c0b],rax        # 0x102e998
 100bd8d:	mov    ecx,0x8
 100bd92:	call   0x100c3e2
 100bd97:	mov    rax,rbx
 100bd9a:	add    rsp,0x20
 100bd9e:	pop    rbx
 100bd9f:	ret    
 100bda0:	int3   
 100bda1:	int3   
 100bda2:	int3   
 100bda3:	int3   
 100bda4:	int3   
 100bda5:	int3   
 100bda6:	int3   
 100bda7:	int3   
 100bda8:	sub    rsp,0x28
 100bdac:	call   0x100bcf0
 100bdb1:	neg    rax
 100bdb4:	sbb    eax,eax
 100bdb6:	neg    eax
 100bdb8:	dec    eax
 100bdba:	add    rsp,0x28
 100bdbe:	ret    
 100bdbf:	int3   
 100bdc0:	int3   
 100bdc1:	int3   
 100bdc2:	int3   
 100bdc3:	int3   
 100bdc4:	int3   
 100bdc5:	int3   
 100bdc6:	int3   
 100bdc7:	int3   
 100bdc8:	mov    QWORD PTR [rsp+0x8],rcx
 100bdcd:	sub    rsp,0x88
 100bdd4:	lea    rcx,[rip+0x19945]        # 0x1025720
 100bddb:	call   QWORD PTR [rip+0xffffffffffff54ef]        # 0x10012d0
 100bde1:	mov    rax,QWORD PTR [rip+0x19a30]        # 0x1025818
 100bde8:	mov    QWORD PTR [rsp+0x58],rax
 100bded:	xor    r8d,r8d
 100bdf0:	lea    rdx,[rsp+0x60]
 100bdf5:	mov    rcx,QWORD PTR [rsp+0x58]
 100bdfa:	call   0x10174ac
 100bdff:	mov    QWORD PTR [rsp+0x50],rax
 100be04:	cmp    QWORD PTR [rsp+0x50],0x0
 100be0a:	je     0x100be4d
 100be0c:	mov    QWORD PTR [rsp+0x38],0x0
 100be15:	lea    rax,[rsp+0x48]
 100be1a:	mov    QWORD PTR [rsp+0x30],rax
 100be1f:	lea    rax,[rsp+0x40]
 100be24:	mov    QWORD PTR [rsp+0x28],rax
 100be29:	lea    rax,[rip+0x198f0]        # 0x1025720
 100be30:	mov    QWORD PTR [rsp+0x20],rax
 100be35:	mov    r9,QWORD PTR [rsp+0x50]
 100be3a:	mov    r8,QWORD PTR [rsp+0x58]
 100be3f:	mov    rdx,QWORD PTR [rsp+0x60]
 100be44:	xor    ecx,ecx
 100be46:	call   0x10174a0
 100be4b:	jmp    0x100be6f
 100be4d:	mov    rax,QWORD PTR [rsp+0x88]
 100be55:	mov    QWORD PTR [rip+0x199bc],rax        # 0x1025818
 100be5c:	lea    rax,[rsp+0x88]
 100be64:	add    rax,0x8
 100be68:	mov    QWORD PTR [rip+0x19949],rax        # 0x10257b8
 100be6f:	mov    rax,QWORD PTR [rip+0x199a2]        # 0x1025818
 100be76:	mov    QWORD PTR [rip+0x19813],rax        # 0x1025690
 100be7d:	mov    rax,QWORD PTR [rsp+0x90]
 100be85:	mov    QWORD PTR [rip+0x19914],rax        # 0x10257a0
 100be8c:	mov    DWORD PTR [rip+0x197ea],0xc0000409        # 0x1025680
 100be96:	mov    DWORD PTR [rip+0x197e4],0x1        # 0x1025684
 100bea0:	mov    rax,QWORD PTR [rip+0x187b9]        # 0x1024660
 100bea7:	mov    QWORD PTR [rsp+0x68],rax
 100beac:	mov    rax,QWORD PTR [rip+0x187b5]        # 0x1024668
 100beb3:	mov    QWORD PTR [rsp+0x70],rax
 100beb8:	call   QWORD PTR [rip+0xffffffffffff53fa]        # 0x10012b8
 100bebe:	mov    DWORD PTR [rip+0x19854],eax        # 0x1025718
 100bec4:	mov    ecx,0x1
 100bec9:	call   0x100c406
 100bece:	xor    ecx,ecx
 100bed0:	call   QWORD PTR [rip+0xffffffffffff525a]        # 0x1001130
 100bed6:	lea    rcx,[rip+0xffffffffffff6293]        # 0x1002170
 100bedd:	call   QWORD PTR [rip+0xffffffffffff53cd]        # 0x10012b0
 100bee3:	cmp    DWORD PTR [rip+0x1982e],0x0        # 0x1025718
 100beea:	jne    0x100bef6
 100beec:	mov    ecx,0x1
 100bef1:	call   0x100c406
 100bef6:	call   QWORD PTR [rip+0xffffffffffff52ec]        # 0x10011e8
 100befc:	mov    edx,0xc0000409
 100bf01:	mov    rcx,rax
 100bf04:	call   QWORD PTR [rip+0xffffffffffff52d6]        # 0x10011e0
 100bf0a:	add    rsp,0x88
 100bf11:	ret    
 100bf12:	int3   
 100bf13:	int3   
 100bf14:	int3   
 100bf15:	int3   
 100bf16:	int3   
 100bf17:	int3   
 100bf18:	jmp    QWORD PTR [rip+0xffffffffffff5512]        # 0x1001430
 100bf1e:	int3   
 100bf1f:	int3   
 100bf20:	int3   
 100bf21:	int3   
 100bf22:	int3   
 100bf23:	int3   
 100bf24:	jmp    QWORD PTR [rip+0xffffffffffff5526]        # 0x1001450
 100bf2a:	int3   
 100bf2b:	int3   
 100bf2c:	int3   
 100bf2d:	int3   
 100bf2e:	int3   
 100bf2f:	int3   
 100bf30:	jmp    QWORD PTR [rip+0xffffffffffff558a]        # 0x10014c0
 100bf36:	int3   
 100bf37:	int3   
 100bf38:	int3   
 100bf39:	int3   
 100bf3a:	int3   
 100bf3b:	int3   
 100bf3c:	rex push rbx
 100bf3e:	sub    rsp,0x20
 100bf42:	mov    r11d,DWORD PTR [r8]
 100bf45:	mov    rbx,rdx
 100bf48:	mov    r9,rcx
 100bf4b:	and    r11d,0xfffffff8
 100bf4f:	test   BYTE PTR [r8],0x4
 100bf53:	mov    r10,rcx
 100bf56:	je     0x100bf6b
 100bf58:	mov    eax,DWORD PTR [r8+0x8]
 100bf5c:	movsxd r10,DWORD PTR [r8+0x4]
 100bf60:	neg    eax
 100bf62:	add    r10,rcx
 100bf65:	movsxd rcx,eax
 100bf68:	and    r10,rcx
 100bf6b:	movsxd rax,r11d
 100bf6e:	mov    rdx,QWORD PTR [rax+r10*1]
 100bf72:	mov    rax,QWORD PTR [rbx+0x10]
 100bf76:	mov    ecx,DWORD PTR [rax+0x8]
 100bf79:	add    rcx,QWORD PTR [rbx+0x8]
 100bf7d:	test   BYTE PTR [rcx+0x3],0xf
 100bf81:	je     0x100bf8f
 100bf83:	movzx  eax,BYTE PTR [rcx+0x3]
 100bf87:	and    eax,0xfffffff0
 100bf8a:	cdqe   
 100bf8c:	add    r9,rax
 100bf8f:	xor    r9,rdx
 100bf92:	mov    rcx,r9
 100bf95:	add    rsp,0x20
 100bf99:	pop    rbx
 100bf9a:	jmp    0x100c0d0
 100bf9f:	int3   
 100bfa0:	int3   
 100bfa1:	int3   
 100bfa2:	int3   
 100bfa3:	int3   
 100bfa4:	int3   
 100bfa5:	int3   
 100bfa6:	int3   
 100bfa7:	int3   
 100bfa8:	sub    rsp,0x28
 100bfac:	mov    r8,QWORD PTR [r9+0x38]
 100bfb0:	mov    rcx,rdx
 100bfb3:	mov    rdx,r9
 100bfb6:	call   0x100bf3c
 100bfbb:	mov    eax,0x1
 100bfc0:	add    rsp,0x28
 100bfc4:	ret    
 100bfc5:	int3   
 100bfc6:	int3   
 100bfc7:	int3   
 100bfc8:	int3   
 100bfc9:	int3   
 100bfca:	int3   
 100bfcb:	int3   
 100bfcc:	mov    rax,rsp
 100bfcf:	mov    QWORD PTR [rax+0x8],rbx
 100bfd3:	mov    QWORD PTR [rax+0x10],rbp
 100bfd7:	mov    QWORD PTR [rax+0x18],rsi
 100bfdb:	mov    QWORD PTR [rax+0x20],rdi
 100bfdf:	push   r12
 100bfe1:	sub    rsp,0x20
 100bfe5:	mov    r10,QWORD PTR [r9+0x38]
 100bfe9:	mov    rsi,rdx
 100bfec:	mov    r12,r8
 100bfef:	mov    eax,DWORD PTR [r10]
 100bff2:	mov    rbp,rcx
 100bff5:	mov    rdx,r9
 100bff8:	add    rax,rax
 100bffb:	mov    rcx,rsi
 100bffe:	mov    rdi,r9
 100c001:	lea    rbx,[r10+rax*8+0x4]
 100c006:	mov    r8,rbx
 100c009:	call   0x100bf3c
 100c00e:	mov    r11d,DWORD PTR [rbx]
 100c011:	mov    r10d,DWORD PTR [rbp+0x4]
 100c015:	mov    eax,r11d
 100c018:	and    r11d,0x2
 100c01c:	mov    edx,0x1
 100c021:	and    eax,edx
 100c023:	and    r10b,0x66
 100c027:	cmove  r11d,eax
 100c02b:	test   r11d,r11d
 100c02e:	je     0x100c043
 100c030:	mov    r9,rdi
 100c033:	mov    r8,r12
 100c036:	mov    rdx,rsi
 100c039:	mov    rcx,rbp
 100c03c:	call   0x100c0f6
 100c041:	mov    edx,eax
 100c043:	mov    rbx,QWORD PTR [rsp+0x30]
 100c048:	mov    rbp,QWORD PTR [rsp+0x38]
 100c04d:	mov    rsi,QWORD PTR [rsp+0x40]
 100c052:	mov    rdi,QWORD PTR [rsp+0x48]
 100c057:	mov    eax,edx
 100c059:	add    rsp,0x20
 100c05d:	pop    r12
 100c05f:	ret    
 100c060:	int3   
 100c061:	int3   
 100c062:	int3   
 100c063:	int3   
 100c064:	int3   
 100c065:	int3   
 100c066:	data16 nop WORD PTR [rax+rax*1+0x0]
 100c070:	sub    rsp,0x10
 100c074:	mov    QWORD PTR [rsp],r10
 100c078:	mov    QWORD PTR [rsp+0x8],r11
 100c07d:	xor    r11,r11
 100c080:	lea    r10,[rsp+0x18]
 100c085:	sub    r10,rax
 100c088:	cmovb  r10,r11
 100c08c:	mov    r11,QWORD PTR gs:0x10
 100c095:	cmp    r10,r11
 100c098:	jae    0x100c0b0
 100c09a:	and    r10w,0xf000
 100c0a0:	lea    r11,[r11-0x1000]
 100c0a7:	mov    BYTE PTR [r11],0x0
 100c0ab:	cmp    r10,r11
 100c0ae:	jne    0x100c0a0
 100c0b0:	mov    r10,QWORD PTR [rsp]
 100c0b4:	mov    r11,QWORD PTR [rsp+0x8]
 100c0b9:	add    rsp,0x10
 100c0bd:	ret    
 100c0be:	int3   
 100c0bf:	int3   
 100c0c0:	int3   
 100c0c1:	int3   
 100c0c2:	int3   
 100c0c3:	int3   
 100c0c4:	int3   
 100c0c5:	int3   
 100c0c6:	data16 nop WORD PTR [rax+rax*1+0x0]
 100c0d0:	cmp    rcx,QWORD PTR [rip+0x18589]        # 0x1024660
 100c0d7:	jne    0x100c0ea
 100c0d9:	rol    rcx,0x10
 100c0dd:	test   cx,0xffff
 100c0e2:	jne    0x100c0e6
 100c0e4:	repz ret 
 100c0e6:	ror    rcx,0x10
 100c0ea:	jmp    0x100bdc8
 100c0ef:	int3   
 100c0f0:	int3   
 100c0f1:	int3   
 100c0f2:	int3   
 100c0f3:	int3   
 100c0f4:	int3   
 100c0f5:	int3   
 100c0f6:	jmp    QWORD PTR [rip+0xffffffffffff5434]        # 0x1001530
 100c0fc:	int3   
 100c0fd:	int3   
 100c0fe:	int3   
 100c0ff:	int3   
 100c100:	int3   
 100c101:	int3   
 100c102:	jmp    QWORD PTR [rip+0xffffffffffff53e8]        # 0x10014f0
 100c108:	int3   
 100c109:	int3   
 100c10a:	int3   
 100c10b:	int3   
 100c10c:	int3   
 100c10d:	int3   
 100c10e:	jmp    QWORD PTR [rip+0xffffffffffff5424]        # 0x1001538
 100c114:	int3   
 100c115:	int3   
 100c116:	int3   
 100c117:	int3   
 100c118:	int3   
 100c119:	int3   
 100c11a:	int3   
 100c11b:	int3   
 100c11c:	sub    rsp,0x28
 100c120:	mov    rax,QWORD PTR [rcx]
 100c123:	cmp    DWORD PTR [rax],0xe06d7363
 100c129:	jne    0x100c156
 100c12b:	cmp    DWORD PTR [rax+0x18],0x4
 100c12f:	jne    0x100c156
 100c131:	mov    eax,DWORD PTR [rax+0x20]
 100c134:	cmp    eax,0x19930520
 100c139:	je     0x100c150
 100c13b:	cmp    eax,0x19930521
 100c140:	je     0x100c150
 100c142:	cmp    eax,0x19930522
 100c147:	je     0x100c150
 100c149:	cmp    eax,0x1994000
 100c14e:	jne    0x100c156
 100c150:	call   0x100c412
 100c155:	int3   
 100c156:	xor    eax,eax
 100c158:	add    rsp,0x28
 100c15c:	ret    
 100c15d:	int3   
 100c15e:	int3   
 100c15f:	int3   
 100c160:	int3   
 100c161:	int3   
 100c162:	int3   
 100c163:	int3   
 100c164:	sub    rsp,0x28
 100c168:	lea    rcx,[rip+0xffffffffffffffad]        # 0x100c11c
 100c16f:	call   QWORD PTR [rip+0xffffffffffff4fbb]        # 0x1001130
 100c175:	xor    eax,eax
 100c177:	add    rsp,0x28
 100c17b:	ret    
 100c17c:	int3   
 100c17d:	int3   
 100c17e:	int3   
 100c17f:	int3   
 100c180:	int3   
 100c181:	int3   
 100c182:	jmp    QWORD PTR [rip+0xffffffffffff51c8]        # 0x1001350
 100c188:	int3   
 100c189:	int3   
 100c18a:	int3   
 100c18b:	int3   
 100c18c:	int3   
 100c18d:	int3   
 100c18e:	int3   
 100c18f:	int3   
 100c190:	mov    QWORD PTR [rsp+0x8],rbx
 100c195:	push   rdi
 100c196:	sub    rsp,0x20
 100c19a:	lea    rbx,[rip+0xffffffffffffb197]        # 0x1007338
 100c1a1:	lea    rdi,[rip+0xffffffffffffb190]        # 0x1007338
 100c1a8:	jmp    0x100c1b8
 100c1aa:	mov    rax,QWORD PTR [rbx]
 100c1ad:	test   rax,rax
 100c1b0:	je     0x100c1b4
 100c1b2:	call   rax
 100c1b4:	add    rbx,0x8
 100c1b8:	cmp    rbx,rdi
 100c1bb:	jb     0x100c1aa
 100c1bd:	mov    rbx,QWORD PTR [rsp+0x30]
 100c1c2:	add    rsp,0x20
 100c1c6:	pop    rdi
 100c1c7:	ret    
 100c1c8:	int3   
 100c1c9:	int3   
 100c1ca:	int3   
 100c1cb:	int3   
 100c1cc:	int3   
 100c1cd:	int3   
 100c1ce:	int3   
 100c1cf:	int3   
 100c1d0:	mov    QWORD PTR [rsp+0x8],rbx
 100c1d5:	push   rdi
 100c1d6:	sub    rsp,0x20
 100c1da:	lea    rbx,[rip+0xffffffffffffb167]        # 0x1007348
 100c1e1:	lea    rdi,[rip+0xffffffffffffb160]        # 0x1007348
 100c1e8:	jmp    0x100c1f8
 100c1ea:	mov    rax,QWORD PTR [rbx]
 100c1ed:	test   rax,rax
 100c1f0:	je     0x100c1f4
 100c1f2:	call   rax
 100c1f4:	add    rbx,0x8
 100c1f8:	cmp    rbx,rdi
 100c1fb:	jb     0x100c1ea
 100c1fd:	mov    rbx,QWORD PTR [rsp+0x30]
 100c202:	add    rsp,0x20
 100c206:	pop    rdi
 100c207:	ret    
 100c208:	int3   
 100c209:	int3   
 100c20a:	int3   
 100c20b:	int3   
 100c20c:	int3   
 100c20d:	int3   
 100c20e:	jmp    QWORD PTR [rip+0xffffffffffff514c]        # 0x1001360
 100c214:	int3   
 100c215:	int3   
 100c216:	int3   
 100c217:	int3   
 100c218:	int3   
 100c219:	int3   
 100c21a:	int3   
 100c21b:	int3   
 100c21c:	int3   
 100c21d:	int3   
 100c21e:	int3   
 100c21f:	int3   
 100c220:	mov    rax,rcx
 100c223:	mov    ecx,0x5a4d
 100c228:	cmp    WORD PTR [rax],cx
 100c22b:	je     0x100c230
 100c22d:	xor    eax,eax
 100c22f:	ret    
 100c230:	movsxd rcx,DWORD PTR [rax+0x3c]
 100c234:	add    rcx,rax
 100c237:	xor    eax,eax
 100c239:	cmp    DWORD PTR [rcx],0x4550
 100c23f:	jne    0x100c24d
 100c241:	mov    edx,0x20b
 100c246:	cmp    WORD PTR [rcx+0x18],dx
 100c24a:	sete   al
 100c24d:	repz ret 
 100c24f:	int3   
 100c250:	int3   
 100c251:	int3   
 100c252:	int3   
 100c253:	int3   
 100c254:	int3   
 100c255:	int3   
 100c256:	int3   
 100c257:	int3   
 100c258:	int3   
 100c259:	int3   
 100c25a:	int3   
 100c25b:	int3   
 100c25c:	int3   
 100c25d:	int3   
 100c25e:	int3   
 100c25f:	int3   
 100c260:	movsxd r8,DWORD PTR [rcx+0x3c]
 100c264:	xor    r9d,r9d
 100c267:	mov    r10,rdx
 100c26a:	add    r8,rcx
 100c26d:	movzx  eax,WORD PTR [r8+0x14]
 100c272:	movzx  r11d,WORD PTR [r8+0x6]
 100c277:	lea    rcx,[rax+r8*1+0x18]
 100c27c:	test   r11d,r11d
 100c27f:	je     0x100c29f
 100c281:	mov    edx,DWORD PTR [rcx+0xc]
 100c284:	cmp    r10,rdx
 100c287:	jb     0x100c293
 100c289:	mov    eax,DWORD PTR [rcx+0x8]
 100c28c:	add    eax,edx
 100c28e:	cmp    r10,rax
 100c291:	jb     0x100c2a2
 100c293:	inc    r9d
 100c296:	add    rcx,0x28
 100c29a:	cmp    r9d,r11d
 100c29d:	jb     0x100c281
 100c29f:	xor    eax,eax
 100c2a1:	ret    
 100c2a2:	mov    rax,rcx
 100c2a5:	ret    
 100c2a6:	int3   
 100c2a7:	int3   
 100c2a8:	int3   
 100c2a9:	int3   
 100c2aa:	int3   
 100c2ab:	int3   
 100c2ac:	int3   
 100c2ad:	int3   
 100c2ae:	int3   
 100c2af:	int3   
 100c2b0:	sub    rsp,0x28
 100c2b4:	mov    r8,rcx
 100c2b7:	lea    r9,[rip+0xffffffffffff3d42]        # 0x1000000
 100c2be:	mov    rcx,r9
 100c2c1:	call   0x100c220
 100c2c6:	test   eax,eax
 100c2c8:	je     0x100c2ec
 100c2ca:	sub    r8,r9
 100c2cd:	mov    rdx,r8
 100c2d0:	mov    rcx,r9
 100c2d3:	call   0x100c260
 100c2d8:	test   rax,rax
 100c2db:	je     0x100c2ec
 100c2dd:	mov    eax,DWORD PTR [rax+0x24]
 100c2e0:	shr    eax,0x1f
 100c2e3:	not    eax
 100c2e5:	and    eax,0x1
 100c2e8:	jmp    0x100c2ec
 100c2ea:	xor    eax,eax
 100c2ec:	add    rsp,0x28
 100c2f0:	ret    
 100c2f1:	int3   
 100c2f2:	int3   
 100c2f3:	int3   
 100c2f4:	int3   
 100c2f5:	int3   
 100c2f6:	int3   
 100c2f7:	int3   
 100c2f8:	jmp    QWORD PTR [rip+0xffffffffffff515a]        # 0x1001458
 100c2fe:	int3   
 100c2ff:	int3   
 100c300:	int3   
 100c301:	int3   
 100c302:	int3   
 100c303:	int3   
 100c304:	jmp    QWORD PTR [rip+0xffffffffffff5156]        # 0x1001460
 100c30a:	int3   
 100c30b:	int3   
 100c30c:	int3   
 100c30d:	int3   
 100c30e:	int3   
 100c30f:	int3   
 100c310:	xor    eax,eax
 100c312:	ret    
 100c313:	int3   
 100c314:	int3   
 100c315:	int3   
 100c316:	int3   
 100c317:	int3   
 100c318:	int3   
 100c319:	int3   
 100c31a:	int3   
 100c31b:	int3   
 100c31c:	xor    eax,eax
 100c31e:	ret    
 100c31f:	int3   
 100c320:	int3   
 100c321:	int3   
 100c322:	int3   
 100c323:	int3   
 100c324:	int3   
 100c325:	int3   
 100c326:	int3   
 100c327:	int3   
 100c328:	mov    QWORD PTR [rsp+0x18],rbx
 100c32d:	push   rdi
 100c32e:	sub    rsp,0x20
 100c332:	mov    rax,QWORD PTR [rip+0x18327]        # 0x1024660
 100c339:	and    QWORD PTR [rsp+0x30],0x0
 100c33f:	movabs rdi,0x2b992ddfa232
 100c349:	cmp    rax,rdi
 100c34c:	je     0x100c35a
 100c34e:	not    rax
 100c351:	mov    QWORD PTR [rip+0x18310],rax        # 0x1024668
 100c358:	jmp    0x100c3d0
 100c35a:	lea    rcx,[rsp+0x30]
 100c35f:	call   QWORD PTR [rip+0xffffffffffff4f8b]        # 0x10012f0
 100c365:	mov    rbx,QWORD PTR [rsp+0x30]
 100c36a:	call   QWORD PTR [rip+0xffffffffffff4f78]        # 0x10012e8
 100c370:	mov    r11d,eax
 100c373:	xor    rbx,r11
 100c376:	call   QWORD PTR [rip+0xffffffffffff4efc]        # 0x1001278
 100c37c:	mov    r11d,eax
 100c37f:	xor    rbx,r11
 100c382:	call   QWORD PTR [rip+0xffffffffffff4f58]        # 0x10012e0
 100c388:	lea    rcx,[rsp+0x38]
 100c38d:	mov    r11d,eax
 100c390:	xor    rbx,r11
 100c393:	call   QWORD PTR [rip+0xffffffffffff4f3f]        # 0x10012d8
 100c399:	mov    r11,QWORD PTR [rsp+0x38]
 100c39e:	xor    r11,rbx
 100c3a1:	movabs rax,0xffffffffffff
 100c3ab:	and    r11,rax
 100c3ae:	movabs rax,0x2b992ddfa233
 100c3b8:	cmp    r11,rdi
 100c3bb:	cmove  r11,rax
 100c3bf:	mov    QWORD PTR [rip+0x1829a],r11        # 0x1024660
 100c3c6:	not    r11
 100c3c9:	mov    QWORD PTR [rip+0x18298],r11        # 0x1024668
 100c3d0:	mov    rbx,QWORD PTR [rsp+0x40]
 100c3d5:	add    rsp,0x20
 100c3d9:	pop    rdi
 100c3da:	ret    
 100c3db:	int3   
 100c3dc:	int3   
 100c3dd:	int3   
 100c3de:	int3   
 100c3df:	int3   
 100c3e0:	int3   
 100c3e1:	int3   
 100c3e2:	jmp    QWORD PTR [rip+0xffffffffffff50a8]        # 0x1001490
 100c3e8:	int3   
 100c3e9:	int3   
 100c3ea:	int3   
 100c3eb:	int3   
 100c3ec:	int3   
 100c3ed:	int3   
 100c3ee:	jmp    QWORD PTR [rip+0xffffffffffff50a4]        # 0x1001498
 100c3f4:	int3   
 100c3f5:	int3   
 100c3f6:	int3   
 100c3f7:	int3   
 100c3f8:	int3   
 100c3f9:	int3   
 100c3fa:	jmp    QWORD PTR [rip+0xffffffffffff50a0]        # 0x10014a0
 100c400:	int3   
 100c401:	int3   
 100c402:	int3   
 100c403:	int3   
 100c404:	int3   
 100c405:	int3   
 100c406:	jmp    QWORD PTR [rip+0xffffffffffff50a4]        # 0x10014b0
 100c40c:	int3   
 100c40d:	int3   
 100c40e:	int3   
 100c40f:	int3   
 100c410:	int3   
 100c411:	int3   
 100c412:	jmp    QWORD PTR [rip+0xffffffffffff50a0]        # 0x10014b8
 100c418:	int3   
 100c419:	int3   
 100c41a:	int3   
 100c41b:	int3   
 100c41c:	int3   
 100c41d:	int3   
 100c41e:	int3   
 100c41f:	int3   
 100c420:	mov    QWORD PTR [rsp+0x8],rbx
 100c425:	push   rbp
 100c426:	mov    rbp,rsp
 100c429:	sub    rsp,0x20
 100c42d:	mov    rbx,rcx
 100c430:	add    rcx,0x28
 100c434:	call   QWORD PTR [rip+0xffffffffffff4e0e]        # 0x1001248
 100c43a:	mov    rcx,QWORD PTR [rbx+0x50]
 100c43e:	test   rcx,rcx
 100c441:	je     0x100c44d
 100c443:	call   0x100bf18
 100c448:	and    QWORD PTR [rbx+0x50],0x0
 100c44d:	and    DWORD PTR [rbx+0x58],0x0
 100c451:	and    DWORD PTR [rbx+0x5c],0x0
 100c455:	mov    rbx,QWORD PTR [rsp+0x30]
 100c45a:	add    rsp,0x20
 100c45e:	pop    rbp
 100c45f:	ret    
 100c460:	int3   
 100c461:	int3   
 100c462:	int3   
 100c463:	int3   
 100c464:	int3   
 100c465:	int3   
 100c466:	int3   
 100c467:	int3   
 100c468:	mov    QWORD PTR [rsp+0x8],rbx
 100c46d:	mov    QWORD PTR [rsp+0x10],rdi
 100c472:	push   rbp
 100c473:	mov    rbp,rsp
 100c476:	sub    rsp,0x20
 100c47a:	xor    edx,edx
 100c47c:	mov    rdi,rcx
 100c47f:	lea    r8d,[rdx+0x28]
 100c483:	add    rcx,r8
 100c486:	call   0x100c10e
 100c48b:	and    QWORD PTR [rdi+0x50],0x0
 100c490:	and    DWORD PTR [rdi+0x58],0x0
 100c494:	and    DWORD PTR [rdi+0x5c],0x0
 100c498:	lea    rax,[rip+0xffffffffffff3b61]        # 0x1000000
 100c49f:	lea    rcx,[rdi+0x28]
 100c4a3:	mov    QWORD PTR [rdi+0x10],rax
 100c4a7:	mov    QWORD PTR [rdi+0x8],rax
 100c4ab:	lea    rax,[rip+0xffffffffffff5cee]        # 0x10021a0
 100c4b2:	xor    edx,edx
 100c4b4:	mov    DWORD PTR [rdi],0x60
 100c4ba:	mov    DWORD PTR [rdi+0x18],0xa00
 100c4c1:	mov    QWORD PTR [rdi+0x20],rax
 100c4c5:	call   QWORD PTR [rip+0xffffffffffff4d85]        # 0x1001250
 100c4cb:	test   eax,eax
 100c4cd:	jne    0x100c4fa
 100c4cf:	call   QWORD PTR [rip+0xffffffffffff4d9b]        # 0x1001270
 100c4d5:	mov    edx,0x1
 100c4da:	movzx  ecx,ax
 100c4dd:	or     ecx,0x80070000
 100c4e3:	test   eax,eax
 100c4e5:	cmovle ecx,eax
 100c4e8:	movzx  eax,BYTE PTR [rip+0x18da1]        # 0x1025290
 100c4ef:	test   ecx,ecx
 100c4f1:	cmovs  eax,edx
 100c4f4:	mov    BYTE PTR [rip+0x18d96],al        # 0x1025290
 100c4fa:	mov    rbx,QWORD PTR [rsp+0x30]
 100c4ff:	mov    rax,rdi
 100c502:	mov    rdi,QWORD PTR [rsp+0x38]
 100c507:	add    rsp,0x20
 100c50b:	pop    rbp
 100c50c:	ret    
 100c50d:	int3   
 100c50e:	int3   
 100c50f:	int3   
 100c510:	int3   
 100c511:	int3   
 100c512:	int3   
 100c513:	int3   
 100c514:	mov    QWORD PTR [rsp+0x8],rbx
 100c519:	mov    QWORD PTR [rsp+0x10],rsi
 100c51e:	mov    QWORD PTR [rsp+0x18],rdi
 100c523:	push   rbp
 100c524:	mov    rbp,rsp
 100c527:	sub    rsp,0x20
 100c52b:	cmp    DWORD PTR [rcx],0x0
 100c52e:	mov    rbx,rcx
 100c531:	je     0x100c570
 100c533:	mov    rdi,QWORD PTR [rcx+0x10]
 100c537:	cmp    rdi,QWORD PTR [rcx+0x18]
 100c53b:	jae    0x100c563
 100c53d:	mov    rsi,QWORD PTR [rdi]
 100c540:	test   rsi,rsi
 100c543:	je     0x100c559
 100c545:	mov    rcx,QWORD PTR [rsi+0x20]
 100c549:	test   rcx,rcx
 100c54c:	je     0x100c554
 100c54e:	mov    rax,QWORD PTR [rcx]
 100c551:	call   QWORD PTR [rax+0x10]
 100c554:	and    QWORD PTR [rsi+0x20],0x0
 100c559:	add    rdi,0x8
 100c55d:	cmp    rdi,QWORD PTR [rbx+0x18]
 100c561:	jb     0x100c53d
 100c563:	lea    rcx,[rbx+0x20]
 100c567:	call   QWORD PTR [rip+0xffffffffffff4cdb]        # 0x1001248
 100c56d:	and    DWORD PTR [rbx],0x0
 100c570:	mov    rbx,QWORD PTR [rsp+0x30]
 100c575:	mov    rsi,QWORD PTR [rsp+0x38]
 100c57a:	mov    rdi,QWORD PTR [rsp+0x40]
 100c57f:	add    rsp,0x20
 100c583:	pop    rbp
 100c584:	ret    
 100c585:	int3   
 100c586:	int3   
 100c587:	int3   
 100c588:	int3   
 100c589:	int3   
 100c58a:	int3   
 100c58b:	int3   
 100c58c:	mov    QWORD PTR [rsp+0x8],rbx
 100c591:	mov    QWORD PTR [rsp+0x10],rdi
 100c596:	push   rbp
 100c597:	mov    rbp,rsp
 100c59a:	sub    rsp,0x20
 100c59e:	xor    edx,edx
 100c5a0:	mov    rdi,rcx
 100c5a3:	add    rcx,0x20
 100c5a7:	lea    r8d,[rdx+0x28]
 100c5ab:	call   0x100c10e
 100c5b0:	and    DWORD PTR [rdi],0x0
 100c5b3:	lea    rax,[rip+0xffffffffffff3a46]        # 0x1000000
 100c5ba:	mov    QWORD PTR [rdi+0x8],rax
 100c5be:	lea    rax,[rip+0x15c93]        # 0x1022258
 100c5c5:	lea    rcx,[rdi+0x20]
 100c5c9:	mov    QWORD PTR [rdi+0x10],rax
 100c5cd:	lea    rax,[rip+0x15c84]        # 0x1022258
 100c5d4:	xor    edx,edx
 100c5d6:	mov    QWORD PTR [rdi+0x18],rax
 100c5da:	call   QWORD PTR [rip+0xffffffffffff4c70]        # 0x1001250
 100c5e0:	test   eax,eax
 100c5e2:	jne    0x100c605
 100c5e4:	call   QWORD PTR [rip+0xffffffffffff4c86]        # 0x1001270
 100c5ea:	movzx  ecx,ax
 100c5ed:	or     ecx,0x80070000
 100c5f3:	test   eax,eax
 100c5f5:	cmovle ecx,eax
 100c5f8:	test   ecx,ecx
 100c5fa:	jns    0x100c605
 100c5fc:	mov    BYTE PTR [rip+0x18c8d],0x1        # 0x1025290
 100c603:	jmp    0x100c60b
 100c605:	mov    DWORD PTR [rdi],0x48
 100c60b:	mov    rbx,QWORD PTR [rsp+0x30]
 100c610:	mov    rax,rdi
 100c613:	mov    rdi,QWORD PTR [rsp+0x38]
 100c618:	add    rsp,0x20
 100c61c:	pop    rbp
 100c61d:	ret    
 100c61e:	int3   
 100c61f:	int3   
 100c620:	int3   
 100c621:	int3   
 100c622:	int3   
 100c623:	int3   
 100c624:	int3   
 100c625:	int3   
 100c626:	int3   
 100c627:	int3   
 100c628:	int3   
 100c629:	int3   
 100c62a:	int3   
 100c62b:	int3   
 100c62c:	int3   
 100c62d:	int3   
 100c62e:	int3   
 100c62f:	int3   
 100c630:	rex push rbx
 100c632:	sub    rsp,0x20
 100c636:	mov    rbx,rcx
 100c639:	mov    QWORD PTR [rcx],0x0
 100c640:	xor    ecx,ecx
 100c642:	call   QWORD PTR [rip+0xffffffffffff4b28]        # 0x1001170
 100c648:	test   rax,rax
 100c64b:	je     0x100c66d
 100c64d:	lea    rdx,[rip+0xffffffffffff5e84]        # 0x10024d8
 100c654:	mov    rcx,rax
 100c657:	call   QWORD PTR [rip+0xffffffffffff4c33]        # 0x1001290
 100c65d:	test   rax,rax
 100c660:	je     0x100c66d
 100c662:	mov    rcx,rbx
 100c665:	add    rsp,0x20
 100c669:	pop    rbx
 100c66a:	rex.W jmp rax
 100c66d:	call   QWORD PTR [rip+0xffffffffffff4bfd]        # 0x1001270
 100c673:	test   eax,eax
 100c675:	jle    0x100c67f
 100c677:	movzx  eax,ax
 100c67a:	or     eax,0x80070000
 100c67f:	add    rsp,0x20
 100c683:	pop    rbx
 100c684:	ret    
 100c685:	int3   
 100c686:	int3   
 100c687:	int3   
 100c688:	int3   
 100c689:	int3   
 100c68a:	int3   
 100c68b:	int3   
 100c68c:	int3   
 100c68d:	int3   
 100c68e:	int3   
 100c68f:	int3   
 100c690:	mov    QWORD PTR [rsp+0x8],rcx
 100c695:	push   rbx
 100c696:	push   rsi
 100c697:	push   rdi
 100c698:	push   r14
 100c69a:	sub    rsp,0x38
 100c69e:	mov    rbx,rcx
 100c6a1:	xor    r14d,r14d
 100c6a4:	mov    QWORD PTR [rsp+0x78],r14
 100c6a9:	mov    DWORD PTR [rsp+0x68],r14d
 100c6ae:	mov    DWORD PTR [rsp+0x70],0x20a
 100c6b6:	call   QWORD PTR [rip+0xffffffffffff4bac]        # 0x1001268
 100c6bc:	lea    rsi,[rbx+0x28]
 100c6c0:	xor    edx,edx
 100c6c2:	mov    r8d,0x20a
 100c6c8:	mov    rcx,rsi
 100c6cb:	call   0x100c10e
 100c6d0:	lea    rcx,[rbx+0x232]
 100c6d7:	xor    edx,edx
 100c6d9:	mov    r8d,0x20a
 100c6df:	call   0x100c10e
 100c6e4:	mov    DWORD PTR [rbx+0x43c],0x1
 100c6ee:	mov    QWORD PTR [rbx+0x440],r14
 100c6f5:	mov    QWORD PTR [rsp+0x78],r14
 100c6fa:	mov    DWORD PTR [rsp+0x68],r14d
 100c6ff:	lea    rax,[rsp+0x78]
 100c704:	mov    QWORD PTR [rsp+0x20],rax
 100c709:	mov    r9d,0x20019
 100c70f:	xor    r8d,r8d
 100c712:	mov    rdx,QWORD PTR [rip+0x17f67]        # 0x1024680
 100c719:	mov    rcx,0xffffffff80000002
 100c720:	call   QWORD PTR [rip+0xffffffffffff48e2]        # 0x1001008
 100c726:	test   eax,eax
 100c728:	je     0x100c73a
 100c72a:	xor    r9d,r9d
 100c72d:	xor    r8d,r8d
 100c730:	xor    edx,edx
 100c732:	xor    ecx,ecx
 100c734:	call   QWORD PTR [rip+0xffffffffffff4b46]        # 0x1001280
 100c73a:	lea    rax,[rsp+0x70]
 100c73f:	mov    QWORD PTR [rsp+0x28],rax
 100c744:	mov    QWORD PTR [rsp+0x20],rsi
 100c749:	lea    r9,[rsp+0x68]
 100c74e:	xor    r8d,r8d
 100c751:	mov    rdx,QWORD PTR [rip+0x17f30]        # 0x1024688
 100c758:	mov    rcx,QWORD PTR [rsp+0x78]
 100c75d:	call   QWORD PTR [rip+0xffffffffffff489d]        # 0x1001000
 100c763:	test   eax,eax
 100c765:	je     0x100c777
 100c767:	xor    r9d,r9d
 100c76a:	xor    r8d,r8d
 100c76d:	xor    edx,edx
 100c76f:	xor    ecx,ecx
 100c771:	call   QWORD PTR [rip+0xffffffffffff4b09]        # 0x1001280
 100c777:	mov    rcx,QWORD PTR [rsp+0x78]
 100c77c:	call   QWORD PTR [rip+0xffffffffffff488e]        # 0x1001010
 100c782:	test   eax,eax
 100c784:	je     0x100c796
 100c786:	xor    r9d,r9d
 100c789:	xor    r8d,r8d
 100c78c:	xor    edx,edx
 100c78e:	xor    ecx,ecx
 100c790:	call   QWORD PTR [rip+0xffffffffffff4aea]        # 0x1001280
 100c796:	lea    rcx,[rbx+0x440]
 100c79d:	call   0x100c630
 100c7a2:	test   eax,eax
 100c7a4:	jns    0x100c7b6
 100c7a6:	xor    r9d,r9d
 100c7a9:	xor    r8d,r8d
 100c7ac:	xor    edx,edx
 100c7ae:	xor    ecx,ecx
 100c7b0:	call   QWORD PTR [rip+0xffffffffffff4aca]        # 0x1001280
 100c7b6:	jmp    0x100c7c8
 100c7b8:	mov    rbx,QWORD PTR [rsp+0x60]
 100c7bd:	mov    QWORD PTR [rbx+0x440],0x0
 100c7c8:	mov    rax,rbx
 100c7cb:	add    rsp,0x38
 100c7cf:	pop    r14
 100c7d1:	pop    rdi
 100c7d2:	pop    rsi
 100c7d3:	pop    rbx
 100c7d4:	ret    
 100c7d5:	int3   
 100c7d6:	int3   
 100c7d7:	int3   
 100c7d8:	int3   
 100c7d9:	int3   
 100c7da:	int3   
 100c7db:	int3   
 100c7dc:	int3   
 100c7dd:	int3   
 100c7de:	int3   
 100c7df:	int3   
 100c7e0:	mov    QWORD PTR [rsp+0x8],rcx
 100c7e5:	push   rbx
 100c7e6:	sub    rsp,0x20
 100c7ea:	mov    rbx,rcx
 100c7ed:	mov    rcx,QWORD PTR [rcx+0x440]
 100c7f4:	test   rcx,rcx
 100c7f7:	je     0x100c80a
 100c7f9:	mov    rax,QWORD PTR [rcx]
 100c7fc:	call   QWORD PTR [rax+0x10]
 100c7ff:	mov    QWORD PTR [rbx+0x440],0x0
 100c80a:	jmp    0x100c811
 100c80c:	mov    rbx,QWORD PTR [rsp+0x30]
 100c811:	mov    rcx,rbx
 100c814:	call   QWORD PTR [rip+0xffffffffffff4a2e]        # 0x1001248
 100c81a:	jmp    0x100c81c
 100c81c:	add    rsp,0x20
 100c820:	pop    rbx
 100c821:	ret    
 100c822:	int3   
 100c823:	int3   
 100c824:	int3   
 100c825:	int3   
 100c826:	int3   
 100c827:	int3   
 100c828:	int3   
 100c829:	int3   
 100c82a:	int3   
 100c82b:	int3   
 100c82c:	int3   
 100c82d:	int3   
 100c82e:	int3   
 100c82f:	int3   
 100c830:	mov    QWORD PTR [rsp+0x10],rbx
 100c835:	mov    QWORD PTR [rsp+0x20],rsi
 100c83a:	push   rdi
 100c83b:	push   r12
 100c83d:	push   r13
 100c83f:	push   r14
 100c841:	push   r15
 100c843:	sub    rsp,0x150
 100c84a:	mov    rax,QWORD PTR [rip+0x17e0f]        # 0x1024660
 100c851:	xor    rax,rsp
 100c854:	mov    QWORD PTR [rsp+0x140],rax
 100c85c:	mov    r12d,r9d
 100c85f:	mov    r14,r8
 100c862:	mov    r13d,edx
 100c865:	mov    rdi,rcx
 100c868:	mov    QWORD PTR [rsp+0x50],rcx
 100c86d:	mov    r15,QWORD PTR [rsp+0x1a0]
 100c875:	mov    QWORD PTR [rsp+0x40],0x0
 100c87e:	mov    ebx,0x60
 100c883:	xor    esi,esi
 100c885:	call   QWORD PTR [rip+0xffffffffffff49d5]        # 0x1001260
 100c88b:	nop
 100c88c:	cmp    DWORD PTR [rdi+0x43c],esi
 100c892:	jne    0x100c89d
 100c894:	cmp    QWORD PTR [rdi+0x440],rsi
 100c89b:	jne    0x100c8ad
 100c89d:	xor    r9d,r9d
 100c8a0:	xor    r8d,r8d
 100c8a3:	xor    edx,edx
 100c8a5:	xor    ecx,ecx
 100c8a7:	call   QWORD PTR [rip+0xffffffffffff49d3]        # 0x1001280
 100c8ad:	mov    rcx,QWORD PTR [rdi+0x440]
 100c8b4:	mov    rax,QWORD PTR [rcx]
 100c8b7:	lea    rdx,[rsp+0x40]
 100c8bc:	call   QWORD PTR [rax+0x28]
 100c8bf:	test   eax,eax
 100c8c1:	jns    0x100c8d3
 100c8c3:	xor    r9d,r9d
 100c8c6:	xor    r8d,r8d
 100c8c9:	xor    edx,edx
 100c8cb:	xor    ecx,ecx
 100c8cd:	call   QWORD PTR [rip+0xffffffffffff49ad]        # 0x1001280
 100c8d3:	mov    eax,0x460
 100c8d8:	test   r12d,r12d
 100c8db:	cmove  ebx,eax
 100c8de:	mov    DWORD PTR [rsp+0x48],ebx
 100c8e2:	test   r13d,r13d
 100c8e5:	je     0x100c8ef
 100c8e7:	bts    ebx,0xc
 100c8eb:	mov    DWORD PTR [rsp+0x48],ebx
 100c8ef:	mov    rcx,QWORD PTR [rsp+0x40]
 100c8f4:	mov    rax,QWORD PTR [rcx]
 100c8f7:	xor    r8d,r8d
 100c8fa:	mov    edx,ebx
 100c8fc:	call   QWORD PTR [rax+0x20]
 100c8ff:	mov    rcx,QWORD PTR [rsp+0x40]
 100c904:	mov    rax,QWORD PTR [rcx]
 100c907:	xor    r8d,r8d
 100c90a:	lea    edx,[r8+0x40]
 100c90e:	call   QWORD PTR [rax+0x28]
 100c911:	test   r14,r14
 100c914:	je     0x100c94a
 100c916:	mov    rcx,QWORD PTR [rsp+0x40]
 100c91b:	mov    rax,QWORD PTR [rcx]
 100c91e:	mov    rdx,QWORD PTR [rip+0x17d9b]        # 0x10246c0
 100c925:	call   QWORD PTR [rax+0xa0]
 100c92b:	mov    r11,QWORD PTR [rsp+0x40]
 100c930:	mov    rbx,QWORD PTR [r11]
 100c933:	call   QWORD PTR [rip+0xffffffffffff493f]        # 0x1001278
 100c939:	mov    edx,eax
 100c93b:	mov    r9,QWORD PTR [r14+0x8]
 100c93f:	mov    r8,QWORD PTR [r14]
 100c942:	mov    rcx,QWORD PTR [rsp+0x40]
 100c947:	call   QWORD PTR [rbx+0x40]
 100c94a:	lea    rcx,[rsp+0x60]
 100c94f:	call   QWORD PTR [rip+0xffffffffffff4a4b]        # 0x10013a0
 100c955:	lea    rcx,[rsp+0x60]
 100c95a:	call   QWORD PTR [rip+0xffffffffffff4a38]        # 0x1001398
 100c960:	mov    r9,rax
 100c963:	lea    r8,[rip+0xffffffffffff5b86]        # 0x10024f0
 100c96a:	mov    edx,0x64
 100c96f:	lea    rcx,[rsp+0x70]
 100c974:	call   QWORD PTR [rip+0xffffffffffff4a2e]        # 0x10013a8
 100c97a:	nop    WORD PTR [rax+rax*1+0x0]
 100c980:	xor    edx,edx
 100c982:	mov    r8d,0x20a
 100c988:	lea    rcx,[rdi+0x232]
 100c98f:	call   0x100c10e
 100c994:	lea    r9,[rdi+0x28]
 100c998:	mov    rax,QWORD PTR [rip+0x17d01]        # 0x10246a0
 100c99f:	mov    QWORD PTR [rsp+0x38],rax
 100c9a4:	mov    DWORD PTR [rsp+0x30],esi
 100c9a8:	lea    rax,[rsp+0x70]
 100c9ad:	mov    QWORD PTR [rsp+0x28],rax
 100c9b2:	mov    rax,QWORD PTR [rip+0x17cdf]        # 0x1024698
 100c9b9:	mov    QWORD PTR [rsp+0x20],rax
 100c9be:	lea    r8,[rip+0xffffffffffff5b4b]        # 0x1002510
 100c9c5:	mov    edx,0x20a
 100c9ca:	lea    rcx,[rdi+0x232]
 100c9d1:	call   0x100cfd0
 100c9d6:	inc    esi
 100c9d8:	mov    DWORD PTR [rsp+0x5c],esi
 100c9dc:	xor    edx,edx
 100c9de:	lea    rcx,[rdi+0x232]
 100c9e5:	call   QWORD PTR [rip+0xffffffffffff49c5]        # 0x10013b0
 100c9eb:	cmp    eax,0xffffffff
 100c9ee:	jne    0x100c980
 100c9f0:	mov    rcx,QWORD PTR [rsp+0x40]
 100c9f5:	mov    rax,QWORD PTR [rcx]
 100c9f8:	lea    rdx,[rdi+0x28]
 100c9fc:	call   QWORD PTR [rax+0x78]
 100c9ff:	mov    rcx,QWORD PTR [rsp+0x40]
 100ca04:	mov    rax,QWORD PTR [rcx]
 100ca07:	lea    rdx,[rdi+0x232]
 100ca0e:	call   QWORD PTR [rax+0x70]
 100ca11:	mov    rcx,QWORD PTR [rsp+0x40]
 100ca16:	mov    rax,QWORD PTR [rcx]
 100ca19:	mov    rdx,QWORD PTR [rip+0x17c90]        # 0x10246b0
 100ca20:	call   QWORD PTR [rax+0x90]
 100ca26:	mov    rcx,QWORD PTR [rsp+0x40]
 100ca2b:	mov    rax,QWORD PTR [rcx]
 100ca2e:	call   QWORD PTR [rax+0x18]
 100ca31:	movsxd r11,DWORD PTR [rsp+0x1a8]
 100ca39:	test   r11d,r11d
 100ca3c:	jle    0x100ca55
 100ca3e:	test   r15,r15
 100ca41:	je     0x100ca55
 100ca43:	mov    rdx,r11
 100ca46:	lea    r8,[rdi+0x232]
 100ca4d:	mov    rcx,r15
 100ca50:	call   0x100ce60
 100ca55:	mov    ebx,0x1
 100ca5a:	mov    DWORD PTR [rsp+0x58],ebx
 100ca5e:	jmp    0x100ca6b
 100ca60:	xor    ebx,ebx
 100ca62:	mov    DWORD PTR [rsp+0x58],ebx
 100ca66:	mov    rdi,QWORD PTR [rsp+0x50]
 100ca6b:	mov    rcx,QWORD PTR [rsp+0x40]
 100ca70:	test   rcx,rcx
 100ca73:	je     0x100ca84
 100ca75:	mov    rax,QWORD PTR [rcx]
 100ca78:	call   QWORD PTR [rax+0x10]
 100ca7b:	mov    QWORD PTR [rsp+0x40],0x0
 100ca84:	jmp    0x100ca8d
 100ca86:	xor    ebx,ebx
 100ca88:	mov    rdi,QWORD PTR [rsp+0x50]
 100ca8d:	mov    rcx,rdi
 100ca90:	call   QWORD PTR [rip+0xffffffffffff47c2]        # 0x1001258
 100ca96:	mov    eax,ebx
 100ca98:	mov    rcx,QWORD PTR [rsp+0x140]
 100caa0:	xor    rcx,rsp
 100caa3:	call   0x100c0d0
 100caa8:	lea    r11,[rsp+0x150]
 100cab0:	mov    rbx,QWORD PTR [r11+0x38]
 100cab4:	mov    rsi,QWORD PTR [r11+0x48]
 100cab8:	mov    rsp,r11
 100cabb:	pop    r15
 100cabd:	pop    r14
 100cabf:	pop    r13
 100cac1:	pop    r12
 100cac3:	pop    rdi
 100cac4:	ret    
 100cac5:	int3   
 100cac6:	int3   
 100cac7:	int3   
 100cac8:	int3   
 100cac9:	int3   
 100caca:	int3   
 100cacb:	int3   
 100cacc:	int3   
 100cacd:	int3   
 100cace:	int3   
 100cacf:	int3   
 100cad0:	mov    QWORD PTR [rsp+0x8],rcx
 100cad5:	push   rbx
 100cad6:	sub    rsp,0x30
 100cada:	mov    QWORD PTR [rsp+0x20],rsp
 100cadf:	mov    rbx,rcx
 100cae2:	call   QWORD PTR [rip+0xffffffffffff4778]        # 0x1001260
 100cae8:	mov    rcx,QWORD PTR [rbx+0x440]
 100caef:	test   rcx,rcx
 100caf2:	jne    0x100cb04
 100caf4:	lea    rdx,[rip+0x50]        # 0x100cb4b
 100cafb:	mov    rcx,rsp
 100cafe:	call   0x10174d0
 100cb03:	nop
 100cb04:	mov    rax,QWORD PTR [rcx]
 100cb07:	call   QWORD PTR [rax+0x20]
 100cb0a:	test   eax,eax
 100cb0c:	jns    0x100cb1e
 100cb0e:	xor    r9d,r9d
 100cb11:	xor    r8d,r8d
 100cb14:	xor    edx,edx
 100cb16:	xor    ecx,ecx
 100cb18:	call   QWORD PTR [rip+0xffffffffffff4762]        # 0x1001280
 100cb1e:	jmp    0x100cb42
 100cb20:	mov    rbx,QWORD PTR [rsp+0x40]
 100cb25:	mov    rcx,QWORD PTR [rbx+0x440]
 100cb2c:	test   rcx,rcx
 100cb2f:	je     0x100cb42
 100cb31:	mov    rax,QWORD PTR [rcx]
 100cb34:	call   QWORD PTR [rax+0x10]
 100cb37:	mov    QWORD PTR [rbx+0x440],0x0
 100cb42:	mov    rcx,rbx
 100cb45:	call   QWORD PTR [rip+0xffffffffffff470d]        # 0x1001258
 100cb4b:	add    rsp,0x30
 100cb4f:	pop    rbx
 100cb50:	ret    
 100cb51:	int3   
 100cb52:	int3   
 100cb53:	int3   
 100cb54:	int3   
 100cb55:	int3   
 100cb56:	int3   
 100cb57:	int3   
 100cb58:	int3   
 100cb59:	int3   
 100cb5a:	int3   
 100cb5b:	int3   
 100cb5c:	int3   
 100cb5d:	int3   
 100cb5e:	int3   
 100cb5f:	int3   
 100cb60:	mov    QWORD PTR [rsp+0x10],rbx
 100cb65:	mov    QWORD PTR [rsp+0x18],rsi
 100cb6a:	mov    QWORD PTR [rsp+0x20],rdi
 100cb6f:	push   r14
 100cb71:	sub    rsp,0xad0
 100cb78:	mov    rax,QWORD PTR [rip+0x17ae1]        # 0x1024660
 100cb7f:	xor    rax,rsp
 100cb82:	mov    QWORD PTR [rsp+0xac0],rax
 100cb8a:	mov    esi,edx
 100cb8c:	mov    rbx,rcx
 100cb8f:	mov    r14d,0x1
 100cb95:	mov    edi,r14d
 100cb98:	mov    DWORD PTR [rsp+0x50],r14d
 100cb9d:	test   r8d,r8d
 100cba0:	je     0x100cbc3
 100cba2:	test   rcx,rcx
 100cba5:	je     0x100cbc3
 100cba7:	mov    rax,QWORD PTR [rcx]
 100cbaa:	mov    ecx,DWORD PTR [rax]
 100cbac:	cmp    ecx,0xe0434f4d
 100cbb2:	je     0x100cbbc
 100cbb4:	cmp    ecx,0xe0524f54
 100cbba:	jne    0x100cbc3
 100cbbc:	xor    eax,eax
 100cbbe:	jmp    0x100cdc9
 100cbc3:	test   rbx,rbx
 100cbc6:	je     0x100cbf4
 100cbc8:	mov    rax,QWORD PTR [rbx]
 100cbcb:	mov    ecx,DWORD PTR [rax]
 100cbcd:	cmp    ecx,0x80000003
 100cbd3:	je     0x100cbdd
 100cbd5:	cmp    ecx,0x80000004
 100cbdb:	jne    0x100cbf4
 100cbdd:	or     edi,0xffffffff
 100cbe0:	mov    DWORD PTR [rsp+0x50],edi
 100cbe4:	xor    r9d,r9d
 100cbe7:	xor    r8d,r8d
 100cbea:	xor    edx,edx
 100cbec:	xor    ecx,ecx
 100cbee:	call   QWORD PTR [rip+0xffffffffffff468c]        # 0x1001280
 100cbf4:	xor    edx,edx
 100cbf6:	mov    r8d,0x80
 100cbfc:	lea    rcx,[rsp+0x60]
 100cc01:	call   0x100c10e
 100cc06:	xor    edx,edx
 100cc08:	mov    r8d,0x7d0
 100cc0e:	lea    rcx,[rsp+0xe0]
 100cc16:	call   0x100c10e
 100cc1b:	mov    r8,QWORD PTR [rip+0x17a9e]        # 0x10246c0
 100cc22:	mov    edx,0x7d0
 100cc27:	lea    rcx,[rsp+0xe0]
 100cc2f:	call   0x100ce60
 100cc34:	test   esi,esi
 100cc36:	je     0x100cc71
 100cc38:	lea    r8,[rip+0xffffffffffff505d]        # 0x1001c9c
 100cc3f:	mov    edx,0x7d0
 100cc44:	lea    rcx,[rsp+0xe0]
 100cc4c:	call   0x100cef0
 100cc51:	mov    r8,QWORD PTR [rip+0x17a60]        # 0x10246b8
 100cc58:	mov    edx,0x7d0
 100cc5d:	lea    rcx,[rsp+0xe0]
 100cc65:	call   0x100cef0
 100cc6a:	xor    esi,esi
 100cc6c:	jmp    0x100cd61
 100cc71:	xor    esi,esi
 100cc73:	mov    DWORD PTR [rip+0x19473],esi        # 0x10260ec
 100cc79:	mov    DWORD PTR [rsp+0x28],0x20a
 100cc81:	lea    rax,[rsp+0x8b0]
 100cc89:	mov    QWORD PTR [rsp+0x20],rax
 100cc8e:	xor    r9d,r9d
 100cc91:	mov    r8,rbx
 100cc94:	xor    edx,edx
 100cc96:	lea    rcx,[rip+0x19013]        # 0x1025cb0
 100cc9d:	call   0x100c830
 100cca2:	test   eax,eax
 100cca4:	je     0x100cd24
 100cca6:	lea    r8,[rip+0xffffffffffff4fef]        # 0x1001c9c
 100ccad:	mov    edx,0x7d0
 100ccb2:	lea    rcx,[rsp+0xe0]
 100ccba:	call   0x100cef0
 100ccbf:	mov    r8,QWORD PTR [rip+0x17a02]        # 0x10246c8
 100ccc6:	mov    edx,0x7d0
 100cccb:	lea    rcx,[rsp+0xe0]
 100ccd3:	call   0x100cef0
 100ccd8:	lea    r8,[rip+0xffffffffffff5849]        # 0x1002528
 100ccdf:	mov    edx,0x7d0
 100cce4:	lea    rcx,[rsp+0xe0]
 100ccec:	call   0x100cef0
 100ccf1:	lea    r8,[rsp+0x8b0]
 100ccf9:	mov    edx,0x7d0
 100ccfe:	lea    rcx,[rsp+0xe0]
 100cd06:	call   0x100cef0
 100cd0b:	lea    r8,[rip+0xffffffffffff581e]        # 0x1002530
 100cd12:	mov    edx,0x7d0
 100cd17:	lea    rcx,[rsp+0xe0]
 100cd1f:	call   0x100cef0
 100cd24:	mov    rdx,QWORD PTR [rip+0x1797d]        # 0x10246a8
 100cd2b:	lea    rcx,[rip+0xffffffffffff5806]        # 0x1002538
 100cd32:	call   QWORD PTR [rip+0xffffffffffff47c8]        # 0x1001500
 100cd38:	mov    rdx,QWORD PTR [rip+0x17971]        # 0x10246b0
 100cd3f:	lea    rcx,[rip+0xffffffffffff57fa]        # 0x1002540
 100cd46:	call   QWORD PTR [rip+0xffffffffffff47b4]        # 0x1001500
 100cd4c:	lea    rdx,[rsp+0xe0]
 100cd54:	lea    rcx,[rip+0xffffffffffff57dd]        # 0x1002538
 100cd5b:	call   QWORD PTR [rip+0xffffffffffff479f]        # 0x1001500
 100cd61:	lea    rdx,[rip+0xffffffffffff57e8]        # 0x1002550
 100cd68:	xor    ecx,ecx
 100cd6a:	call   QWORD PTR [rip+0xffffffffffff42b0]        # 0x1001020
 100cd70:	mov    rbx,rax
 100cd73:	test   rax,rax
 100cd76:	je     0x100cdc1
 100cd78:	lea    rax,[rsp+0xe0]
 100cd80:	mov    QWORD PTR [rsp+0x60],rax
 100cd85:	xor    r8d,r8d
 100cd88:	mov    edx,r14d
 100cd8b:	mov    QWORD PTR [rsp+0x40],rsi
 100cd90:	lea    rax,[rsp+0x60]
 100cd95:	mov    QWORD PTR [rsp+0x38],rax
 100cd9a:	mov    DWORD PTR [rsp+0x30],esi
 100cd9e:	mov    WORD PTR [rsp+0x28],r14w
 100cda4:	mov    QWORD PTR [rsp+0x20],rsi
 100cda9:	mov    r9d,0xc0000034
 100cdaf:	mov    rcx,rbx
 100cdb2:	call   QWORD PTR [rip+0xffffffffffff4260]        # 0x1001018
 100cdb8:	mov    rcx,rbx
 100cdbb:	call   QWORD PTR [rip+0xffffffffffff4267]        # 0x1001028
 100cdc1:	jmp    0x100cdc7
 100cdc3:	mov    edi,DWORD PTR [rsp+0x50]
 100cdc7:	mov    eax,edi
 100cdc9:	mov    rcx,QWORD PTR [rsp+0xac0]
 100cdd1:	xor    rcx,rsp
 100cdd4:	call   0x100c0d0
 100cdd9:	lea    r11,[rsp+0xad0]
 100cde1:	mov    rbx,QWORD PTR [r11+0x18]
 100cde5:	mov    rsi,QWORD PTR [r11+0x20]
 100cde9:	mov    rdi,QWORD PTR [r11+0x28]
 100cded:	mov    rsp,r11
 100cdf0:	pop    r14
 100cdf2:	ret    
 100cdf3:	int3   
 100cdf4:	int3   
 100cdf5:	int3   
 100cdf6:	int3   
 100cdf7:	int3   
 100cdf8:	int3   
 100cdf9:	int3   
 100cdfa:	int3   
 100cdfb:	int3   
 100cdfc:	int3   
 100cdfd:	int3   
 100cdfe:	int3   
 100cdff:	int3   
 100ce00:	sub    rsp,0x28
 100ce04:	xor    r8d,r8d
 100ce07:	xor    edx,edx
 100ce09:	call   0x100cb60
 100ce0e:	mov    ecx,0x4
 100ce13:	call   QWORD PTR [rip+0xffffffffffff44df]        # 0x10012f8
 100ce19:	int3   
 100ce1a:	int3   
 100ce1b:	int3   
 100ce1c:	int3   
 100ce1d:	int3   
 100ce1e:	int3   
 100ce1f:	int3   
 100ce20:	mov    QWORD PTR [rsp+0x8],rbx
 100ce25:	push   rdi
 100ce26:	sub    rsp,0x20
 100ce2a:	mov    edi,r8d
 100ce2d:	mov    ebx,edx
 100ce2f:	call   0x100cb60
 100ce34:	test   ebx,ebx
 100ce36:	jne    0x100ce46
 100ce38:	test   edi,edi
 100ce3a:	jne    0x100ce46
 100ce3c:	lea    ecx,[rbx+0x4]
 100ce3f:	call   QWORD PTR [rip+0xffffffffffff44b3]        # 0x10012f8
 100ce45:	int3   
 100ce46:	mov    rbx,QWORD PTR [rsp+0x30]
 100ce4b:	add    rsp,0x20
 100ce4f:	pop    rdi
 100ce50:	ret    
 100ce51:	int3   
 100ce52:	int3   
 100ce53:	int3   
 100ce54:	int3   
 100ce55:	int3   
 100ce56:	int3   
 100ce57:	int3   
 100ce58:	int3   
 100ce59:	int3   
 100ce5a:	int3   
 100ce5b:	int3   
 100ce5c:	int3   
 100ce5d:	int3   
 100ce5e:	int3   
 100ce5f:	int3   
 100ce60:	shr    rdx,1
 100ce63:	mov    r11d,0x0
 100ce69:	mov    r9,r8
 100ce6c:	mov    eax,r11d
 100ce6f:	je     0x100ce7a
 100ce71:	cmp    rdx,0x7fffffff
 100ce78:	jbe    0x100ce7f
 100ce7a:	mov    eax,0x80070057
 100ce7f:	test   eax,eax
 100ce81:	js     0x100cede
 100ce83:	mov    r10d,r11d
 100ce86:	test   rdx,rdx
 100ce89:	je     0x100cecd
 100ce8b:	mov    r8d,0x7ffffffe
 100ce91:	sub    r8,rdx
 100ce94:	sub    r9,rcx
 100ce97:	lea    rax,[r8+rdx*1]
 100ce9b:	test   rax,rax
 100ce9e:	je     0x100cec8
 100cea0:	movzx  eax,WORD PTR [r9+rcx*1]
 100cea5:	test   ax,ax
 100cea8:	je     0x100cec8
 100ceaa:	mov    WORD PTR [rcx],ax
 100cead:	add    rcx,0x2
 100ceb1:	dec    rdx
 100ceb4:	jne    0x100ce97
 100ceb6:	sub    rcx,0x2
 100ceba:	mov    r10d,0x8007007a
 100cec0:	mov    WORD PTR [rcx],r11w
 100cec4:	mov    eax,r10d
 100cec7:	ret    
 100cec8:	test   rdx,rdx
 100cecb:	jne    0x100ced7
 100cecd:	sub    rcx,0x2
 100ced1:	mov    r10d,0x8007007a
 100ced7:	mov    WORD PTR [rcx],r11w
 100cedb:	mov    eax,r10d
 100cede:	repz ret 
 100cee0:	int3   
 100cee1:	int3   
 100cee2:	int3   
 100cee3:	int3   
 100cee4:	int3   
 100cee5:	int3   
 100cee6:	int3   
 100cee7:	int3   
 100cee8:	int3   
 100cee9:	int3   
 100ceea:	int3   
 100ceeb:	int3   
 100ceec:	int3   
 100ceed:	int3   
 100ceee:	int3   
 100ceef:	int3   
 100cef0:	mov    QWORD PTR [rsp+0x8],rbx
 100cef5:	mov    QWORD PTR [rsp+0x10],rdi
 100cefa:	mov    r10,rdx
 100cefd:	mov    edi,0x0
 100cf02:	mov    r11,r8
 100cf05:	shr    r10,1
 100cf08:	mov    rbx,rcx
 100cf0b:	mov    r9d,edi
 100cf0e:	je     0x100cf19
 100cf10:	cmp    r10,0x7fffffff
 100cf17:	jbe    0x100cf1f
 100cf19:	mov    r9d,0x80070057
 100cf1f:	test   r9d,r9d
 100cf22:	js     0x100cf46
 100cf24:	mov    rcx,r10
 100cf27:	mov    rax,rbx
 100cf2a:	mov    r9d,edi
 100cf2d:	test   r10,r10
 100cf30:	je     0x100cf40
 100cf32:	cmp    WORD PTR [rax],di
 100cf35:	je     0x100cf90
 100cf37:	add    rax,0x2
 100cf3b:	dec    rcx
 100cf3e:	jne    0x100cf32
 100cf40:	mov    r9d,0x80070057
 100cf46:	mov    r8,rdi
 100cf49:	test   r9d,r9d
 100cf4c:	js     0x100cfaf
 100cf4e:	mov    rdx,r10
 100cf51:	lea    rcx,[rbx+r8*2]
 100cf55:	mov    r9d,edi
 100cf58:	sub    rdx,r8
 100cf5b:	je     0x100cfa2
 100cf5d:	add    r8,0x7fffffff
 100cf64:	mov    rax,rdx
 100cf67:	sub    rax,r10
 100cf6a:	add    r8,rax
 100cf6d:	sub    r11,rcx
 100cf70:	test   r8,r8
 100cf73:	je     0x100cf9d
 100cf75:	movzx  eax,WORD PTR [r11+rcx*1]
 100cf7a:	test   ax,ax
 100cf7d:	je     0x100cf9d
 100cf7f:	mov    WORD PTR [rcx],ax
 100cf82:	add    rcx,0x2
 100cf86:	dec    r8
 100cf89:	dec    rdx
 100cf8c:	jne    0x100cf70
 100cf8e:	jmp    0x100cfa2
 100cf90:	test   rcx,rcx
 100cf93:	je     0x100cf40
 100cf95:	mov    r8,r10
 100cf98:	sub    r8,rcx
 100cf9b:	jmp    0x100cf49
 100cf9d:	test   rdx,rdx
 100cfa0:	jne    0x100cfac
 100cfa2:	sub    rcx,0x2
 100cfa6:	mov    r9d,0x8007007a
 100cfac:	mov    WORD PTR [rcx],di
 100cfaf:	mov    rbx,QWORD PTR [rsp+0x8]
 100cfb4:	mov    rdi,QWORD PTR [rsp+0x10]
 100cfb9:	mov    eax,r9d
 100cfbc:	ret    
 100cfbd:	int3   
 100cfbe:	int3   
 100cfbf:	int3   
 100cfc0:	int3   
 100cfc1:	int3   
 100cfc2:	int3   
 100cfc3:	int3   
 100cfc4:	int3   
 100cfc5:	int3   
 100cfc6:	int3   
 100cfc7:	int3   
 100cfc8:	int3   
 100cfc9:	int3   
 100cfca:	int3   
 100cfcb:	int3   
 100cfcc:	int3   
 100cfcd:	int3   
 100cfce:	int3   
 100cfcf:	int3   
 100cfd0:	mov    QWORD PTR [rsp+0x18],r8
 100cfd5:	mov    QWORD PTR [rsp+0x20],r9
 100cfda:	push   rbx
 100cfdb:	push   rsi
 100cfdc:	sub    rsp,0x28
 100cfe0:	shr    rdx,1
 100cfe3:	mov    ebx,0x0
 100cfe8:	mov    rsi,rcx
 100cfeb:	mov    eax,ebx
 100cfed:	je     0x100cff8
 100cfef:	cmp    rdx,0x7fffffff
 100cff6:	jbe    0x100cffd
 100cff8:	mov    eax,0x80070057
 100cffd:	test   eax,eax
 100cfff:	js     0x100d047
 100d001:	mov    QWORD PTR [rsp+0x20],rdi
 100d006:	lea    rdi,[rdx-0x1]
 100d00a:	lea    r9,[rsp+0x58]
 100d00f:	mov    rdx,rdi
 100d012:	call   QWORD PTR [rip+0xffffffffffff44e0]        # 0x10014f8
 100d018:	test   eax,eax
 100d01a:	js     0x100d037
 100d01c:	cdqe   
 100d01e:	cmp    rax,rdi
 100d021:	ja     0x100d037
 100d023:	jne    0x100d040
 100d025:	mov    WORD PTR [rsi+rdi*2],bx
 100d029:	mov    rdi,QWORD PTR [rsp+0x20]
 100d02e:	mov    eax,ebx
 100d030:	add    rsp,0x28
 100d034:	pop    rsi
 100d035:	pop    rbx
 100d036:	ret    
 100d037:	mov    WORD PTR [rsi+rdi*2],bx
 100d03b:	mov    ebx,0x8007007a
 100d040:	mov    rdi,QWORD PTR [rsp+0x20]
 100d045:	mov    eax,ebx
 100d047:	add    rsp,0x28
 100d04b:	pop    rsi
 100d04c:	pop    rbx
 100d04d:	ret    
 100d04e:	int3   
 100d04f:	int3   
 100d050:	int3   
 100d051:	int3   
 100d052:	int3   
 100d053:	int3   
 100d054:	int3   
 100d055:	int3   
 100d056:	int3   
 100d057:	int3   
 100d058:	int3   
 100d059:	int3   
 100d05a:	int3   
 100d05b:	int3   
 100d05c:	int3   
 100d05d:	int3   
 100d05e:	int3   
 100d05f:	int3   
 100d060:	rex push rbx
 100d062:	sub    rsp,0x20
 100d066:	lea    rax,[rip+0xffffffffffff552b]        # 0x1002598
 100d06d:	mov    rbx,rcx
 100d070:	mov    QWORD PTR [rcx],rax
 100d073:	call   0x100d2a0
 100d078:	mov    rax,rbx
 100d07b:	add    rsp,0x20
 100d07f:	pop    rbx
 100d080:	ret    
 100d081:	int3   
 100d082:	int3   
 100d083:	int3   
 100d084:	int3   
 100d085:	int3   
 100d086:	int3   
 100d087:	int3   
 100d088:	int3   
 100d089:	int3   
 100d08a:	int3   
 100d08b:	int3   
 100d08c:	int3   
 100d08d:	int3   
 100d08e:	int3   
 100d08f:	int3   
 100d090:	mov    DWORD PTR [rsp+0x10],edx
 100d094:	mov    QWORD PTR [rsp+0x18],r8
 100d099:	mov    QWORD PTR [rsp+0x20],r9
 100d09e:	sub    rsp,0x28
 100d0a2:	lea    r8,[rsp+0x40]
 100d0a7:	call   0x100d0c0
 100d0ac:	add    rsp,0x28
 100d0b0:	ret    
 100d0b1:	int3   
 100d0b2:	int3   
 100d0b3:	int3   
 100d0b4:	int3   
 100d0b5:	int3   
 100d0b6:	int3   
 100d0b7:	int3   
 100d0b8:	int3   
 100d0b9:	int3   
 100d0ba:	int3   
 100d0bb:	int3   
 100d0bc:	int3   
 100d0bd:	int3   
 100d0be:	int3   
 100d0bf:	int3   
 100d0c0:	rex push rbx
 100d0c2:	push   rdi
 100d0c3:	sub    rsp,0x868
 100d0ca:	mov    rax,QWORD PTR [rip+0x1758f]        # 0x1024660
 100d0d1:	xor    rax,rsp
 100d0d4:	mov    QWORD PTR [rsp+0x850],rax
 100d0dc:	mov    rdi,QWORD PTR [rip+0x19015]        # 0x10260f8
 100d0e3:	mov    rbx,rcx
 100d0e6:	mov    QWORD PTR [rsp+0x40],r8
 100d0eb:	test   rdi,rdi
 100d0ee:	jne    0x100d120
 100d0f0:	cmp    DWORD PTR [rcx+0xa14],edi
 100d0f6:	mov    eax,0x201010
 100d0fb:	mov    r9d,0x1010
 100d101:	cmovne r9d,eax
 100d105:	lea    r8,[rip+0xffffffffffff54c4]        # 0x10025d0
 100d10c:	lea    rdx,[rip+0xffffffffffff54d5]        # 0x10025e8
 100d113:	xor    ecx,ecx
 100d115:	call   QWORD PTR [rip+0xffffffffffff448d]        # 0x10015a8
 100d11b:	jmp    0x100d1cd
 100d120:	mov    QWORD PTR [rsp+0x898],rbp
 100d128:	mov    DWORD PTR [rcx+0x8],edx
 100d12b:	xor    ebp,ebp
 100d12d:	mov    QWORD PTR [rsp+0x860],rsi
 100d135:	lea    rsi,[rcx+0xc]
 100d139:	lea    r8,[rsp+0x50]
 100d13e:	mov    r9d,0x400
 100d144:	mov    rcx,rdi
 100d147:	mov    WORD PTR [rsp+0x50],bp
 100d14c:	mov    WORD PTR [rsi],bp
 100d14f:	call   QWORD PTR [rip+0xffffffffffff4463]        # 0x10015b8
 100d155:	cmp    DWORD PTR [rbx+0xa14],ebp
 100d15b:	jne    0x100d16c
 100d15d:	lea    rcx,[rsp+0x50]
 100d162:	mov    edx,0x400
 100d167:	call   0x100d380
 100d16c:	lea    rax,[rsp+0x40]
 100d171:	lea    rdx,[rsp+0x50]
 100d176:	xor    r9d,r9d
 100d179:	mov    QWORD PTR [rsp+0x30],rax
 100d17e:	xor    r8d,r8d
 100d181:	mov    ecx,0x400
 100d186:	mov    DWORD PTR [rsp+0x28],0x3ff
 100d18e:	mov    QWORD PTR [rsp+0x20],rsi
 100d193:	call   QWORD PTR [rip+0xffffffffffff416f]        # 0x1001308
 100d199:	test   eax,eax
 100d19b:	je     0x100d1a6
 100d19d:	mov    eax,eax
 100d19f:	mov    WORD PTR [rbx+rax*2+0xc],bp
 100d1a4:	jmp    0x100d1bd
 100d1a6:	mov    r9d,0x400
 100d1ac:	mov    r8,rsi
 100d1af:	mov    edx,0x4e25
 100d1b4:	mov    rcx,rdi
 100d1b7:	call   QWORD PTR [rip+0xffffffffffff43fb]        # 0x10015b8
 100d1bd:	mov    rbp,QWORD PTR [rsp+0x898]
 100d1c5:	mov    rsi,QWORD PTR [rsp+0x860]
 100d1cd:	mov    rcx,QWORD PTR [rsp+0x850]
 100d1d5:	xor    rcx,rsp
 100d1d8:	call   0x100c0d0
 100d1dd:	add    rsp,0x868
 100d1e4:	pop    rdi
 100d1e5:	pop    rbx
 100d1e6:	ret    
 100d1e7:	int3   
 100d1e8:	int3   
 100d1e9:	int3   
 100d1ea:	int3   
 100d1eb:	int3   
 100d1ec:	int3   
 100d1ed:	int3   
 100d1ee:	int3   
 100d1ef:	int3   
 100d1f0:	ret    0x0
 100d1f3:	int3   
 100d1f4:	int3   
 100d1f5:	int3   
 100d1f6:	int3   
 100d1f7:	int3   
 100d1f8:	int3   
 100d1f9:	int3   
 100d1fa:	int3   
 100d1fb:	int3   
 100d1fc:	int3   
 100d1fd:	int3   
 100d1fe:	int3   
 100d1ff:	int3   
 100d200:	mov    QWORD PTR [rsp+0x8],rbx
 100d205:	push   rdi
 100d206:	sub    rsp,0x20
 100d20a:	inc    DWORD PTR [rip+0x18ef0]        # 0x1026100
 100d210:	mov    rdi,rcx
 100d213:	mov    ebx,0x1
 100d218:	call   0x1017890
 100d21d:	test   eax,eax
 100d21f:	jne    0x100d22c
 100d221:	mov    rbx,QWORD PTR [rsp+0x30]
 100d226:	add    rsp,0x20
 100d22a:	pop    rdi
 100d22b:	ret    
 100d22c:	cmp    QWORD PTR [rip+0x18ec4],0x0        # 0x10260f8
 100d234:	jne    0x100d254
 100d236:	lea    rdx,[rip+0xffffffffffff5333]        # 0x1002570
 100d23d:	mov    rcx,rdi
 100d240:	call   0x100d5a0
 100d245:	xor    ecx,ecx
 100d247:	test   rax,rax
 100d24a:	mov    QWORD PTR [rip+0x18ea7],rax        # 0x10260f8
 100d251:	cmove  ebx,ecx
 100d254:	mov    eax,ebx
 100d256:	mov    rbx,QWORD PTR [rsp+0x30]
 100d25b:	add    rsp,0x20
 100d25f:	pop    rdi
 100d260:	ret    
 100d261:	int3   
 100d262:	int3   
 100d263:	int3   
 100d264:	int3   
 100d265:	int3   
 100d266:	int3   
 100d267:	int3   
 100d268:	int3   
 100d269:	int3   
 100d26a:	int3   
 100d26b:	int3   
 100d26c:	int3   
 100d26d:	int3   
 100d26e:	int3   
 100d26f:	int3   
 100d270:	sub    rsp,0x28
 100d274:	dec    DWORD PTR [rip+0x18e86]        # 0x1026100
 100d27a:	jne    0x100d289
 100d27c:	mov    rcx,QWORD PTR [rip+0x18e75]        # 0x10260f8
 100d283:	call   QWORD PTR [rip+0xffffffffffff3f77]        # 0x1001200
 100d289:	add    rsp,0x28
 100d28d:	ret    
 100d28e:	int3   
 100d28f:	int3   
 100d290:	int3   
 100d291:	int3   
 100d292:	int3   
 100d293:	int3   
 100d294:	int3   
 100d295:	int3   
 100d296:	int3   
 100d297:	int3   
 100d298:	int3   
 100d299:	int3   
 100d29a:	int3   
 100d29b:	int3   
 100d29c:	int3   
 100d29d:	int3   
 100d29e:	int3   
 100d29f:	int3   
 100d2a0:	mov    QWORD PTR [rsp+0x10],rbx
 100d2a5:	push   rdi
 100d2a6:	sub    rsp,0x150
 100d2ad:	mov    rax,QWORD PTR [rip+0x173ac]        # 0x1024660
 100d2b4:	xor    rax,rsp
 100d2b7:	mov    QWORD PTR [rsp+0x140],rax
 100d2bf:	mov    rbx,rcx
 100d2c2:	lea    rcx,[rsp+0x20]
 100d2c7:	mov    DWORD PTR [rsp+0x20],0x114
 100d2cf:	call   QWORD PTR [rip+0xffffffffffff4043]        # 0x1001318
 100d2d5:	xor    edi,edi
 100d2d7:	test   eax,eax
 100d2d9:	je     0x100d2ee
 100d2db:	cmp    DWORD PTR [rsp+0x30],0x2
 100d2e0:	jne    0x100d2ee
 100d2e2:	mov    DWORD PTR [rbx+0xa14],0x1
 100d2ec:	jmp    0x100d2f4
 100d2ee:	mov    DWORD PTR [rbx+0xa14],edi
 100d2f4:	lea    rcx,[rbx+0xc]
 100d2f8:	xor    edx,edx
 100d2fa:	mov    r8d,0x800
 100d300:	mov    DWORD PTR [rbx+0x8],edi
 100d303:	call   0x100c10e
 100d308:	lea    rcx,[rbx+0x810]
 100d30f:	xor    edx,edx
 100d311:	mov    r8d,0x200
 100d317:	mov    DWORD PTR [rbx+0x80c],edi
 100d31d:	call   0x100c10e
 100d322:	mov    QWORD PTR [rbx+0xa18],rdi
 100d329:	mov    QWORD PTR [rbx+0xa20],rdi
 100d330:	mov    QWORD PTR [rbx+0xa28],rdi
 100d337:	mov    QWORD PTR [rbx+0xa30],rdi
 100d33e:	mov    QWORD PTR [rbx+0xa38],rdi
 100d345:	mov    DWORD PTR [rbx+0xa10],0x1
 100d34f:	mov    rcx,QWORD PTR [rsp+0x140]
 100d357:	xor    rcx,rsp
 100d35a:	call   0x100c0d0
 100d35f:	mov    rbx,QWORD PTR [rsp+0x168]
 100d367:	add    rsp,0x150
 100d36e:	pop    rdi
 100d36f:	ret    
 100d370:	int3   
 100d371:	int3   
 100d372:	int3   
 100d373:	int3   
 100d374:	int3   
 100d375:	int3   
 100d376:	int3   
 100d377:	int3   
 100d378:	int3   
 100d379:	int3   
 100d37a:	int3   
 100d37b:	int3   
 100d37c:	int3   
 100d37d:	int3   
 100d37e:	int3   
 100d37f:	int3   
 100d380:	test   rcx,rcx
 100d383:	je     0x100d598
 100d389:	push   r14
 100d38b:	push   r15
 100d38d:	sub    rsp,0x848
 100d394:	mov    rax,QWORD PTR [rip+0x172c5]        # 0x1024660
 100d39b:	xor    rax,rsp
 100d39e:	mov    QWORD PTR [rsp+0x820],rax
 100d3a6:	mov    r15,rdx
 100d3a9:	mov    edx,0x25
 100d3ae:	mov    r14,rcx
 100d3b1:	call   QWORD PTR [rip+0xffffffffffff4019]        # 0x10013d0
 100d3b7:	test   rax,rax
 100d3ba:	je     0x100d57d
 100d3c0:	xor    eax,eax
 100d3c2:	mov    QWORD PTR [rsp+0x870],rbx
 100d3ca:	mov    rcx,r14
 100d3cd:	lea    edx,[rax+0x25]
 100d3d0:	mov    QWORD PTR [rsp+0x840],rbp
 100d3d8:	mov    QWORD PTR [rsp+0x838],rsi
 100d3e0:	mov    WORD PTR [rsp+0x20],ax
 100d3e5:	mov    rsi,r14
 100d3e8:	lea    rbx,[rsp+0x20]
 100d3ed:	call   QWORD PTR [rip+0xffffffffffff3fdd]        # 0x10013d0
 100d3f3:	mov    ebp,0x400
 100d3f8:	test   rax,rax
 100d3fb:	je     0x100d534
 100d401:	mov    QWORD PTR [rsp+0x830],rdi
 100d409:	nop    DWORD PTR [rax+0x0]
 100d410:	sub    eax,esi
 100d412:	shr    eax,1
 100d414:	inc    eax
 100d416:	je     0x100d445
 100d418:	mov    edi,eax
 100d41a:	lea    rcx,[rsp+0x20]
 100d41f:	mov    rax,rbx
 100d422:	sub    rax,rcx
 100d425:	mov    rdx,rbp
 100d428:	mov    r8,rsi
 100d42b:	sar    rax,1
 100d42e:	mov    r9d,edi
 100d431:	mov    rcx,rbx
 100d434:	sub    rdx,rax
 100d437:	call   QWORD PTR [rip+0xffffffffffff3feb]        # 0x1001428
 100d43d:	lea    rbx,[rbx+rdi*2]
 100d441:	lea    rsi,[rsi+rdi*2]
 100d445:	movzx  edx,WORD PTR [rsi]
 100d448:	cmp    dx,0x30
 100d44c:	jbe    0x100d4ab
 100d44e:	lea    r8,[rsp+0x20]
 100d453:	neg    r8
 100d456:	cmp    dx,0x39
 100d45a:	jae    0x100d4ab
 100d45c:	lea    rcx,[r8+rbx*1]
 100d460:	mov    rax,rbp
 100d463:	sar    rcx,1
 100d466:	sub    rax,rcx
 100d469:	cmp    rax,0x2
 100d46d:	jb     0x100d487
 100d46f:	mov    WORD PTR [rbx],dx
 100d472:	add    rbx,0x2
 100d476:	add    rsi,0x2
 100d47a:	je     0x100d487
 100d47c:	movzx  edx,WORD PTR [rsi]
 100d47f:	cmp    dx,0x30
 100d483:	ja     0x100d456
 100d485:	jmp    0x100d4ab
 100d487:	lea    rcx,[rsp+0x20]
 100d48c:	mov    rax,rbx
 100d48f:	mov    rdx,rbp
 100d492:	sub    rax,rcx
 100d495:	lea    r8,[rip+0xffffffffffff51ec]        # 0x1002688
 100d49c:	mov    rcx,rbx
 100d49f:	sar    rax,1
 100d4a2:	sub    rdx,rax
 100d4a5:	call   QWORD PTR [rip+0xffffffffffff3f2d]        # 0x10013d8
 100d4ab:	cmp    WORD PTR [rsi],0x21
 100d4af:	jne    0x100d4ed
 100d4b1:	cmp    WORD PTR [rsi+0x2],0x73
 100d4b6:	jne    0x100d515
 100d4b8:	cmp    WORD PTR [rsi+0x4],0x21
 100d4bd:	jne    0x100d515
 100d4bf:	lea    rcx,[rsp+0x20]
 100d4c4:	mov    rax,rbx
 100d4c7:	mov    rdx,rbp
 100d4ca:	sub    rax,rcx
 100d4cd:	lea    r8,[rip+0xffffffffffff51b4]        # 0x1002688
 100d4d4:	mov    rcx,rbx
 100d4d7:	sar    rax,1
 100d4da:	sub    rdx,rax
 100d4dd:	call   QWORD PTR [rip+0xffffffffffff3ef5]        # 0x10013d8
 100d4e3:	add    rbx,0x6
 100d4e7:	add    rsi,0x6
 100d4eb:	jmp    0x100d515
 100d4ed:	lea    rcx,[rsp+0x20]
 100d4f2:	mov    rax,rbx
 100d4f5:	mov    rdx,rbp
 100d4f8:	sub    rax,rcx
 100d4fb:	lea    r8,[rip+0xffffffffffff5186]        # 0x1002688
 100d502:	mov    rcx,rbx
 100d505:	sar    rax,1
 100d508:	sub    rdx,rax
 100d50b:	call   QWORD PTR [rip+0xffffffffffff3ec7]        # 0x10013d8
 100d511:	add    rbx,0x6
 100d515:	mov    edx,0x25
 100d51a:	mov    rcx,rsi
 100d51d:	call   QWORD PTR [rip+0xffffffffffff3ead]        # 0x10013d0
 100d523:	test   rax,rax
 100d526:	jne    0x100d410
 100d52c:	mov    rdi,QWORD PTR [rsp+0x830]
 100d534:	lea    rcx,[rsp+0x20]
 100d539:	mov    rax,rbx
 100d53c:	mov    r8,rsi
 100d53f:	sub    rax,rcx
 100d542:	mov    rcx,rbx
 100d545:	sar    rax,1
 100d548:	sub    rbp,rax
 100d54b:	mov    rdx,rbp
 100d54e:	call   QWORD PTR [rip+0xffffffffffff3e84]        # 0x10013d8
 100d554:	lea    r8,[rsp+0x20]
 100d559:	mov    rdx,r15
 100d55c:	mov    rcx,r14
 100d55f:	call   QWORD PTR [rip+0xffffffffffff3e73]        # 0x10013d8
 100d565:	mov    rsi,QWORD PTR [rsp+0x838]
 100d56d:	mov    rbp,QWORD PTR [rsp+0x840]
 100d575:	mov    rbx,QWORD PTR [rsp+0x870]
 100d57d:	mov    rcx,QWORD PTR [rsp+0x820]
 100d585:	xor    rcx,rsp
 100d588:	call   0x100c0d0
 100d58d:	add    rsp,0x848
 100d594:	pop    r15
 100d596:	pop    r14
 100d598:	repz ret 
 100d59a:	int3   
 100d59b:	int3   
 100d59c:	int3   
 100d59d:	int3   
 100d59e:	int3   
 100d59f:	int3   
 100d5a0:	mov    QWORD PTR [rsp+0x20],rbx
 100d5a5:	push   rbp
 100d5a6:	sub    rsp,0x3f0
 100d5ad:	mov    rax,QWORD PTR [rip+0x170ac]        # 0x1024660
 100d5b4:	xor    rax,rsp
 100d5b7:	mov    QWORD PTR [rsp+0x3e0],rax
 100d5bf:	mov    rbx,rcx
 100d5c2:	call   0x100d930
 100d5c7:	mov    rcx,rbx
 100d5ca:	mov    edx,eax
 100d5cc:	call   0x100d740
 100d5d1:	mov    rbp,rax
 100d5d4:	test   rax,rax
 100d5d7:	jne    0x100d70b
 100d5dd:	lea    r8,[rip+0xffffffffffff504c]        # 0x1002630
 100d5e4:	lea    rcx,[rsp+0x160]
 100d5ec:	mov    r9,rbx
 100d5ef:	mov    edx,0x80
 100d5f4:	mov    QWORD PTR [rsp+0x408],rsi
 100d5fc:	mov    QWORD PTR [rsp+0x410],rdi
 100d604:	call   QWORD PTR [rip+0xffffffffffff3dd6]        # 0x10013e0
 100d60a:	lea    r8,[rip+0xffffffffffff5037]        # 0x1002648
 100d611:	lea    rcx,[rsp+0x1e0]
 100d619:	mov    edx,0x200
 100d61e:	call   QWORD PTR [rip+0xffffffffffff3d9c]        # 0x10013c0
 100d624:	lea    r8,[rip+0xffffffffffff4f45]        # 0x1002570
 100d62b:	lea    rcx,[rsp+0x1e0]
 100d633:	mov    edx,0x200
 100d638:	call   QWORD PTR [rip+0xffffffffffff3d8a]        # 0x10013c8
 100d63e:	lea    r8,[rip+0xffffffffffff501f]        # 0x1002664
 100d645:	lea    rcx,[rsp+0x1e0]
 100d64d:	mov    edx,0x200
 100d652:	call   QWORD PTR [rip+0xffffffffffff3d70]        # 0x10013c8
 100d658:	lea    r11,[rsp+0x1e0]
 100d660:	or     rax,0xffffffffffffffff
 100d664:	inc    rax
 100d667:	cmp    BYTE PTR [r11+rax*1],0x0
 100d66c:	jne    0x100d664
 100d66e:	lea    rdi,[rsp+0x1e0]
 100d676:	mov    esi,0x1ff
 100d67b:	add    rdi,rax
 100d67e:	sub    esi,eax
 100d680:	call   QWORD PTR [rip+0xffffffffffff3c9a]        # 0x1001320
 100d686:	movzx  ebx,ax
 100d689:	call   QWORD PTR [rip+0xffffffffffff3be1]        # 0x1001270
 100d68f:	mov    QWORD PTR [rsp+0x30],0x0
 100d698:	mov    r9d,ebx
 100d69b:	xor    edx,edx
 100d69d:	mov    ecx,0x1000
 100d6a2:	mov    r8d,eax
 100d6a5:	mov    DWORD PTR [rsp+0x28],esi
 100d6a9:	mov    QWORD PTR [rsp+0x20],rdi
 100d6ae:	call   QWORD PTR [rip+0xffffffffffff3c4c]        # 0x1001300
 100d6b4:	lea    rcx,[rsp+0x40]
 100d6b9:	mov    ebx,0x1010
 100d6be:	mov    DWORD PTR [rsp+0x40],0x114
 100d6c6:	call   QWORD PTR [rip+0xffffffffffff3c4c]        # 0x1001318
 100d6cc:	mov    rdi,QWORD PTR [rsp+0x410]
 100d6d4:	mov    rsi,QWORD PTR [rsp+0x408]
 100d6dc:	test   eax,eax
 100d6de:	je     0x100d6ed
 100d6e0:	cmp    DWORD PTR [rsp+0x50],0x2
 100d6e5:	mov    eax,0x201010
 100d6ea:	cmove  ebx,eax
 100d6ed:	lea    r8,[rsp+0x160]
 100d6f5:	lea    rdx,[rsp+0x1e0]
 100d6fd:	mov    r9d,ebx
 100d700:	xor    ecx,ecx
 100d702:	call   QWORD PTR [rip+0xffffffffffff3ea0]        # 0x10015a8
 100d708:	mov    rax,rbp
 100d70b:	mov    rcx,QWORD PTR [rsp+0x3e0]
 100d713:	xor    rcx,rsp
 100d716:	call   0x100c0d0
 100d71b:	mov    rbx,QWORD PTR [rsp+0x418]
 100d723:	add    rsp,0x3f0
 100d72a:	pop    rbp
 100d72b:	ret    
 100d72c:	int3   
 100d72d:	int3   
 100d72e:	int3   
 100d72f:	int3   
 100d730:	int3   
 100d731:	int3   
 100d732:	int3   
 100d733:	int3   
 100d734:	int3   
 100d735:	int3   
 100d736:	int3   
 100d737:	int3   
 100d738:	int3   
 100d739:	int3   
 100d73a:	int3   
 100d73b:	int3   
 100d73c:	int3   
 100d73d:	int3   
 100d73e:	int3   
 100d73f:	int3   
 100d740:	mov    QWORD PTR [rsp+0x18],rbx
 100d745:	mov    QWORD PTR [rsp+0x20],rsi
 100d74a:	push   rdi
 100d74b:	sub    rsp,0x460
 100d752:	mov    rax,QWORD PTR [rip+0x16f07]        # 0x1024660
 100d759:	xor    rax,rsp
 100d75c:	mov    QWORD PTR [rsp+0x450],rax
 100d764:	mov    edi,edx
 100d766:	mov    rbx,rcx
 100d769:	lea    rdx,[rsp+0x20]
 100d76e:	lea    rcx,[rsp+0x30]
 100d773:	xor    esi,esi
 100d775:	mov    DWORD PTR [rsp+0x20],0x104
 100d77d:	call   0x1017876
 100d782:	test   eax,eax
 100d784:	je     0x100d8f4
 100d78a:	lea    rcx,[rsp+0x30]
 100d78f:	or     rax,0xffffffffffffffff
 100d793:	inc    rax
 100d796:	cmp    WORD PTR [rcx+rax*2],si
 100d79a:	jne    0x100d793
 100d79c:	mov    r9d,0x104
 100d7a2:	lea    r8,[rip+0xffffffffffff4e7f]        # 0x1002628
 100d7a9:	lea    rcx,[rsp+0x30]
 100d7ae:	sub    r9,rax
 100d7b1:	mov    edx,0x105
 100d7b6:	call   QWORD PTR [rip+0xffffffffffff3d6c]        # 0x1001528
 100d7bc:	lea    r8,[rsp+0x30]
 100d7c1:	lea    rcx,[rsp+0x240]
 100d7c9:	mov    edx,0x105
 100d7ce:	call   QWORD PTR [rip+0xffffffffffff3c04]        # 0x10013d8
 100d7d4:	lea    rcx,[rsp+0x240]
 100d7dc:	mov    r8d,edi
 100d7df:	mov    edx,0x105
 100d7e4:	call   0x100da50
 100d7e9:	test   rax,rax
 100d7ec:	jne    0x100d8f7
 100d7f2:	lea    r8,[rsp+0x30]
 100d7f7:	lea    rcx,[rsp+0x240]
 100d7ff:	mov    edx,0x105
 100d804:	call   QWORD PTR [rip+0xffffffffffff3bce]        # 0x10013d8
 100d80a:	lea    rcx,[rsp+0x240]
 100d812:	mov    edx,0x105
 100d817:	mov    r8d,0x409
 100d81d:	call   0x100da50
 100d822:	test   rax,rax
 100d825:	jne    0x100d8f7
 100d82b:	mov    rcx,rbx
 100d82e:	call   QWORD PTR [rip+0xffffffffffff3944]        # 0x1001178
 100d834:	test   rax,rax
 100d837:	je     0x100d8e5
 100d83d:	lea    rdx,[rsp+0x30]
 100d842:	mov    r8d,0x104
 100d848:	mov    rcx,rax
 100d84b:	call   QWORD PTR [rip+0xffffffffffff392f]        # 0x1001180
 100d851:	test   eax,eax
 100d853:	je     0x100d8e5
 100d859:	lea    rdx,[rsp+0x30]
 100d85e:	movsxd rcx,eax
 100d861:	lea    rdx,[rdx+rcx*2]
 100d865:	cmp    WORD PTR [rdx],0x5c
 100d869:	je     0x100d873
 100d86b:	sub    rdx,0x2
 100d86f:	dec    eax
 100d871:	jne    0x100d865
 100d873:	inc    eax
 100d875:	lea    rbx,[rsp+0x30]
 100d87a:	lea    rcx,[rsp+0x30]
 100d87f:	lea    rbx,[rbx+rax*2]
 100d883:	mov    rax,QWORD PTR [rip+0xffffffffffff4cf6]        # 0x1002580
 100d88a:	mov    QWORD PTR [rbx],rax
 100d88d:	mov    rax,QWORD PTR [rip+0xffffffffffff4cf4]        # 0x1002588
 100d894:	mov    QWORD PTR [rbx+0x8],rax
 100d898:	mov    rax,QWORD PTR [rip+0xffffffffffff4cf1]        # 0x1002590
 100d89f:	mov    QWORD PTR [rbx+0x10],rax
 100d8a3:	call   QWORD PTR [rip+0xffffffffffff3a67]        # 0x1001310
 100d8a9:	test   rax,rax
 100d8ac:	jne    0x100d8f7
 100d8ae:	lea    rcx,[rsp+0x30]
 100d8b3:	mov    r8d,edi
 100d8b6:	mov    edx,0x105
 100d8bb:	mov    WORD PTR [rbx],si
 100d8be:	call   0x100da50
 100d8c3:	test   rax,rax
 100d8c6:	jne    0x100d8f7
 100d8c8:	lea    rcx,[rsp+0x30]
 100d8cd:	mov    edx,0x105
 100d8d2:	mov    r8d,0x409
 100d8d8:	mov    WORD PTR [rbx],si
 100d8db:	call   0x100da50
 100d8e0:	test   rax,rax
 100d8e3:	jne    0x100d8f7
 100d8e5:	lea    rcx,[rip+0xffffffffffff4c94]        # 0x1002580
 100d8ec:	call   QWORD PTR [rip+0xffffffffffff3a1e]        # 0x1001310
 100d8f2:	jmp    0x100d8f7
 100d8f4:	mov    rax,rsi
 100d8f7:	mov    rcx,QWORD PTR [rsp+0x450]
 100d8ff:	xor    rcx,rsp
 100d902:	call   0x100c0d0
 100d907:	lea    r11,[rsp+0x460]
 100d90f:	mov    rbx,QWORD PTR [r11+0x20]
 100d913:	mov    rsi,QWORD PTR [r11+0x28]
 100d917:	mov    rsp,r11
 100d91a:	pop    rdi
 100d91b:	ret    
 100d91c:	int3   
 100d91d:	int3   
 100d91e:	int3   
 100d91f:	int3   
 100d920:	int3   
 100d921:	int3   
 100d922:	int3   
 100d923:	int3   
 100d924:	int3   
 100d925:	int3   
 100d926:	int3   
 100d927:	int3   
 100d928:	int3   
 100d929:	int3   
 100d92a:	int3   
 100d92b:	int3   
 100d92c:	int3   
 100d92d:	int3   
 100d92e:	int3   
 100d92f:	int3   
 100d930:	sub    rsp,0x28
 100d934:	lea    rcx,[rip+0xffffffffffff4c65]        # 0x10025a0
 100d93b:	call   QWORD PTR [rip+0xffffffffffff3837]        # 0x1001178
 100d941:	lea    rdx,[rip+0xffffffffffff4c68]        # 0x10025b0
 100d948:	mov    rcx,rax
 100d94b:	call   QWORD PTR [rip+0xffffffffffff393f]        # 0x1001290
 100d951:	test   rax,rax
 100d954:	je     0x100d961
 100d956:	call   rax
 100d958:	movzx  r11d,ax
 100d95c:	test   r11d,r11d
 100d95f:	jne    0x100d96a
 100d961:	call   QWORD PTR [rip+0xffffffffffff39c1]        # 0x1001328
 100d967:	mov    r11d,eax
 100d96a:	movzx  eax,r11b
 100d96e:	add    eax,0xfffffffc
 100d971:	cmp    eax,0xe
 100d974:	ja     0x100da04
 100d97a:	lea    rdx,[rip+0xffffffffffff267f]        # 0x1000000
 100d981:	mov    ecx,DWORD PTR [rdx+rax*4+0xda0c]
 100d988:	add    rcx,rdx
 100d98b:	jmp    rcx
 100d98d:	mov    r11d,0xc0a
 100d993:	mov    eax,r11d
 100d996:	add    rsp,0x28
 100d99a:	ret    
 100d99b:	mov    r11d,0x40c
 100d9a1:	mov    eax,r11d
 100d9a4:	add    rsp,0x28
 100d9a8:	ret    
 100d9a9:	mov    r11d,0x407
 100d9af:	mov    eax,r11d
 100d9b2:	add    rsp,0x28
 100d9b6:	ret    
 100d9b7:	mov    r11d,0x411
 100d9bd:	mov    eax,r11d
 100d9c0:	add    rsp,0x28
 100d9c4:	ret    
 100d9c5:	movzx  eax,r11w
 100d9c9:	mov    ecx,0xfc00
 100d9ce:	mov    edx,0x804
 100d9d3:	and    ax,cx
 100d9d6:	mov    ecx,0x800
 100d9db:	mov    r11d,0x404
 100d9e1:	cmp    ax,cx
 100d9e4:	cmove  r11d,edx
 100d9e8:	mov    eax,r11d
 100d9eb:	add    rsp,0x28
 100d9ef:	ret    
 100d9f0:	mov    r11d,0x412
 100d9f6:	mov    eax,r11d
 100d9f9:	add    rsp,0x28
 100d9fd:	ret    
 100d9fe:	mov    r11d,0x410
 100da04:	mov    eax,r11d
 100da07:	add    rsp,0x28
 100da0b:	ret    
 100da0c:	(bad)
 100da0f:	add    BYTE PTR [rdx+rbx*8],al
 100da12:	add    BYTE PTR [rax],al
 100da14:	add    al,0xda
 100da16:	add    BYTE PTR [rax],al
 100da18:	test   eax,0x40000d9
 100da1d:	fiadd  DWORD PTR [rax]
 100da1f:	add    BYTE PTR [rdx+rbx*8],al
 100da22:	add    BYTE PTR [rax],al
 100da24:	(bad)  
 100da25:	fld    DWORD PTR [rax]
 100da27:	add    BYTE PTR [rdx+rbx*8],al
 100da2a:	add    BYTE PTR [rax],al
 100da2c:	fld    DWORD PTR [rax]
 100da2f:	add    BYTE PTR [rdx+rbx*8],al
 100da32:	add    BYTE PTR [rax],al
 100da34:	add    al,0xda
 100da36:	add    BYTE PTR [rax],al
 100da38:	add    al,0xda
 100da3a:	add    BYTE PTR [rax],al
 100da3c:	(bad)  
 100da3d:	fld    DWORD PTR [rax]
 100da3f:	add    BYTE PTR [rdi-0xfffff27],dh
 100da45:	fld    DWORD PTR [rax]
 100da47:	add    ah,cl
 100da49:	int3   
 100da4a:	int3   
 100da4b:	int3   
 100da4c:	int3   
 100da4d:	int3   
 100da4e:	int3   
 100da4f:	int3   
 100da50:	rex push rbx
 100da52:	push   rbp
 100da53:	push   rsi
 100da54:	push   rdi
 100da55:	push   r14
 100da57:	sub    rsp,0x50
 100da5b:	mov    rax,QWORD PTR [rip+0x16bfe]        # 0x1024660
 100da62:	xor    rax,rsp
 100da65:	mov    QWORD PTR [rsp+0x48],rax
 100da6a:	mov    ebp,r8d
 100da6d:	mov    r14,rdx
 100da70:	mov    rdi,rcx
 100da73:	mov    ebx,0x105
 100da78:	test   rcx,rcx
 100da7b:	je     0x100da95
 100da7d:	mov    ecx,ebx
 100da7f:	mov    rax,rdi
 100da82:	cmp    WORD PTR [rax],0x0
 100da86:	je     0x100dbaf
 100da8c:	add    rax,0x2
 100da90:	dec    rcx
 100da93:	jne    0x100da82
 100da95:	xor    eax,eax
 100da97:	mov    esi,0x104
 100da9c:	lea    r8,[rip+0xffffffffffff4bc5]        # 0x1002668
 100daa3:	mov    rcx,rdi
 100daa6:	mov    r9d,esi
 100daa9:	sub    r9,rax
 100daac:	call   QWORD PTR [rip+0xffffffffffff3a76]        # 0x1001528
 100dab2:	lea    r8,[rip+0xffffffffffff4bc7]        # 0x1002680
 100dab9:	lea    rcx,[rsp+0x20]
 100dabe:	mov    r9d,ebp
 100dac1:	mov    edx,0x14
 100dac6:	call   QWORD PTR [rip+0xffffffffffff391c]        # 0x10013e8
 100dacc:	test   rdi,rdi
 100dacf:	je     0x100daf3
 100dad1:	mov    rcx,rbx
 100dad4:	mov    rax,rdi
 100dad7:	nop    WORD PTR [rax+rax*1+0x0]
 100dae0:	cmp    WORD PTR [rax],0x0
 100dae4:	je     0x100dbc3
 100daea:	add    rax,0x2
 100daee:	dec    rcx
 100daf1:	jne    0x100dae0
 100daf3:	xor    eax,eax
 100daf5:	mov    r9,rsi
 100daf8:	lea    r8,[rsp+0x20]
 100dafd:	mov    rdx,r14
 100db00:	sub    r9,rax
 100db03:	mov    rcx,rdi
 100db06:	call   QWORD PTR [rip+0xffffffffffff3a1c]        # 0x1001528
 100db0c:	test   rdi,rdi
 100db0f:	je     0x100db33
 100db11:	mov    rcx,rbx
 100db14:	mov    rax,rdi
 100db17:	nop    WORD PTR [rax+rax*1+0x0]
 100db20:	cmp    WORD PTR [rax],0x0
 100db24:	je     0x100dbd7
 100db2a:	add    rax,0x2
 100db2e:	dec    rcx
 100db31:	jne    0x100db20
 100db33:	xor    eax,eax
 100db35:	mov    r9,rsi
 100db38:	lea    r8,[rip+0xffffffffffff4ae9]        # 0x1002628
 100db3f:	mov    rdx,r14
 100db42:	sub    r9,rax
 100db45:	mov    rcx,rdi
 100db48:	call   QWORD PTR [rip+0xffffffffffff39da]        # 0x1001528
 100db4e:	test   rdi,rdi
 100db51:	je     0x100db73
 100db53:	mov    rcx,rbx
 100db56:	mov    rax,rdi
 100db59:	nop    DWORD PTR [rax+0x0]
 100db60:	cmp    WORD PTR [rax],0x0
 100db64:	je     0x100dbeb
 100db6a:	add    rax,0x2
 100db6e:	dec    rcx
 100db71:	jne    0x100db60
 100db73:	xor    ebx,ebx
 100db75:	sub    rsi,rbx
 100db78:	lea    r8,[rip+0xffffffffffff4a01]        # 0x1002580
 100db7f:	mov    rdx,r14
 100db82:	mov    r9,rsi
 100db85:	mov    rcx,rdi
 100db88:	call   QWORD PTR [rip+0xffffffffffff399a]        # 0x1001528
 100db8e:	mov    rcx,rdi
 100db91:	call   QWORD PTR [rip+0xffffffffffff3779]        # 0x1001310
 100db97:	mov    rcx,QWORD PTR [rsp+0x48]
 100db9c:	xor    rcx,rsp
 100db9f:	call   0x100c0d0
 100dba4:	add    rsp,0x50
 100dba8:	pop    r14
 100dbaa:	pop    rdi
 100dbab:	pop    rsi
 100dbac:	pop    rbp
 100dbad:	pop    rbx
 100dbae:	ret    
 100dbaf:	test   rcx,rcx
 100dbb2:	je     0x100da95
 100dbb8:	mov    rax,rbx
 100dbbb:	sub    rax,rcx
 100dbbe:	jmp    0x100da97
 100dbc3:	test   rcx,rcx
 100dbc6:	je     0x100daf3
 100dbcc:	mov    rax,rbx
 100dbcf:	sub    rax,rcx
 100dbd2:	jmp    0x100daf5
 100dbd7:	test   rcx,rcx
 100dbda:	je     0x100db33
 100dbe0:	mov    rax,rbx
 100dbe3:	sub    rax,rcx
 100dbe6:	jmp    0x100db35
 100dbeb:	test   rcx,rcx
 100dbee:	je     0x100db73
 100dbf0:	sub    rbx,rcx
 100dbf3:	jmp    0x100db75
 100dbf5:	int3   
 100dbf6:	int3   
 100dbf7:	int3   
 100dbf8:	int3   
 100dbf9:	int3   
 100dbfa:	int3   
 100dbfb:	int3   
 100dbfc:	int3   
 100dbfd:	int3   
 100dbfe:	int3   
 100dbff:	int3   
 100dc00:	sub    rsp,0x158
 100dc07:	mov    rax,QWORD PTR [rip+0x16a52]        # 0x1024660
 100dc0e:	xor    rax,rsp
 100dc11:	mov    QWORD PTR [rsp+0x140],rax
 100dc19:	lea    rcx,[rsp+0x20]
 100dc1e:	xor    edx,edx
 100dc20:	mov    r8d,0x114
 100dc26:	call   0x100c10e
 100dc2b:	lea    rcx,[rsp+0x20]
 100dc30:	mov    DWORD PTR [rsp+0x20],0x114
 100dc38:	call   QWORD PTR [rip+0xffffffffffff36da]        # 0x1001318
 100dc3e:	test   eax,eax
 100dc40:	je     0x100dc66
 100dc42:	cmp    DWORD PTR [rsp+0x30],0x2
 100dc47:	jne    0x100dc66
 100dc49:	mov    eax,0x1
 100dc4e:	mov    rcx,QWORD PTR [rsp+0x140]
 100dc56:	xor    rcx,rsp
 100dc59:	call   0x100c0d0
 100dc5e:	add    rsp,0x158
 100dc65:	ret    
 100dc66:	xor    eax,eax
 100dc68:	mov    rcx,QWORD PTR [rsp+0x140]
 100dc70:	xor    rcx,rsp
 100dc73:	call   0x100c0d0
 100dc78:	add    rsp,0x158
 100dc7f:	ret    
 100dc80:	int3   
 100dc81:	int3   
 100dc82:	int3   
 100dc83:	int3   
 100dc84:	int3   
 100dc85:	int3   
 100dc86:	int3   
 100dc87:	int3   
 100dc88:	int3   
 100dc89:	int3   
 100dc8a:	int3   
 100dc8b:	int3   
 100dc8c:	int3   
 100dc8d:	int3   
 100dc8e:	int3   
 100dc8f:	int3   
 100dc90:	mov    QWORD PTR [rsp+0x8],rbx
 100dc95:	mov    QWORD PTR [rsp+0x10],rdi
 100dc9a:	xor    edi,edi
 100dc9c:	mov    r11,r8
 100dc9f:	mov    r10,rdx
 100dca2:	mov    rbx,rcx
 100dca5:	mov    r9d,edi
 100dca8:	test   rdx,rdx
 100dcab:	je     0x100dcb6
 100dcad:	cmp    rdx,0x7fffffff
 100dcb4:	jbe    0x100dcbc
 100dcb6:	mov    r9d,0x80070057
 100dcbc:	test   r9d,r9d
 100dcbf:	js     0x100dce4
 100dcc1:	mov    rcx,rdx
 100dcc4:	mov    rax,rbx
 100dcc7:	mov    r9d,edi
 100dcca:	test   rdx,rdx
 100dccd:	je     0x100dcde
 100dccf:	nop
 100dcd0:	cmp    WORD PTR [rax],di
 100dcd3:	je     0x100dd30
 100dcd5:	add    rax,0x2
 100dcd9:	dec    rcx
 100dcdc:	jne    0x100dcd0
 100dcde:	mov    r9d,0x80070057
 100dce4:	mov    r8,rdi
 100dce7:	test   r9d,r9d
 100dcea:	js     0x100dd4f
 100dcec:	lea    rcx,[rbx+r8*2]
 100dcf0:	mov    r9d,edi
 100dcf3:	sub    rdx,r8
 100dcf6:	je     0x100dd42
 100dcf8:	add    r8,0x7fffffff
 100dcff:	mov    rax,rdx
 100dd02:	sub    rax,r10
 100dd05:	add    r8,rax
 100dd08:	sub    r11,rcx
 100dd0b:	nop    DWORD PTR [rax+rax*1+0x0]
 100dd10:	test   r8,r8
 100dd13:	je     0x100dd3d
 100dd15:	movzx  eax,WORD PTR [r11+rcx*1]
 100dd1a:	test   ax,ax
 100dd1d:	je     0x100dd3d
 100dd1f:	mov    WORD PTR [rcx],ax
 100dd22:	add    rcx,0x2
 100dd26:	dec    r8
 100dd29:	dec    rdx
 100dd2c:	jne    0x100dd10
 100dd2e:	jmp    0x100dd42
 100dd30:	test   rcx,rcx
 100dd33:	je     0x100dcde
 100dd35:	mov    r8,rdx
 100dd38:	sub    r8,rcx
 100dd3b:	jmp    0x100dce7
 100dd3d:	test   rdx,rdx
 100dd40:	jne    0x100dd4c
 100dd42:	sub    rcx,0x2
 100dd46:	mov    r9d,0x8007007a
 100dd4c:	mov    WORD PTR [rcx],di
 100dd4f:	mov    rbx,QWORD PTR [rsp+0x8]
 100dd54:	mov    rdi,QWORD PTR [rsp+0x10]
 100dd59:	mov    eax,r9d
 100dd5c:	ret    
 100dd5d:	int3   
 100dd5e:	int3   
 100dd5f:	int3   
 100dd60:	int3   
 100dd61:	int3   
 100dd62:	int3   
 100dd63:	int3   
 100dd64:	int3   
 100dd65:	int3   
 100dd66:	int3   
 100dd67:	int3   
 100dd68:	int3   
 100dd69:	int3   
 100dd6a:	int3   
 100dd6b:	int3   
 100dd6c:	int3   
 100dd6d:	int3   
 100dd6e:	int3   
 100dd6f:	int3   
 100dd70:	rex push rbx
 100dd72:	sub    rsp,0x20
 100dd76:	mov    rbx,rcx
 100dd79:	mov    rcx,QWORD PTR [rcx]
 100dd7c:	test   rcx,rcx
 100dd7f:	je     0x100dd95
 100dd81:	cmp    DWORD PTR [rbx+0x8],0x1
 100dd85:	jne    0x100dd8d
 100dd87:	call   QWORD PTR [rip+0xffffffffffff37e3]        # 0x1001570
 100dd8d:	xor    eax,eax
 100dd8f:	mov    QWORD PTR [rbx],rax
 100dd92:	mov    DWORD PTR [rbx+0x8],eax
 100dd95:	add    rsp,0x20
 100dd99:	pop    rbx
 100dd9a:	ret    
 100dd9b:	int3   
 100dd9c:	int3   
 100dd9d:	int3   
 100dd9e:	int3   
 100dd9f:	int3   
 100dda0:	int3   
 100dda1:	int3   
 100dda2:	int3   
 100dda3:	int3   
 100dda4:	int3   
 100dda5:	int3   
 100dda6:	int3   
 100dda7:	int3   
 100dda8:	int3   
 100dda9:	int3   
 100ddaa:	int3   
 100ddab:	int3   
 100ddac:	int3   
 100ddad:	int3   
 100ddae:	int3   
 100ddaf:	int3   
 100ddb0:	sub    rsp,0x28
 100ddb4:	cmp    QWORD PTR [rip+0x1834c],0x0        # 0x1026108
 100ddbc:	je     0x100ddf9
 100ddbe:	call   0x100e010
 100ddc3:	call   0x10162e0
 100ddc8:	test   eax,eax
 100ddca:	je     0x100dde1
 100ddcc:	call   QWORD PTR [rip+0x1e646]        # 0x102c418
 100ddd2:	test   eax,eax
 100ddd4:	je     0x100dde1
 100ddd6:	call   QWORD PTR [rip+0x1e644]        # 0x102c420
 100dddc:	call   0x10164b0
 100dde1:	mov    rcx,QWORD PTR [rip+0x18320]        # 0x1026108
 100dde8:	call   QWORD PTR [rip+0xffffffffffff3412]        # 0x1001200
 100ddee:	mov    QWORD PTR [rip+0x1830f],0x0        # 0x1026108
 100ddf9:	add    rsp,0x28
 100ddfd:	ret    
 100ddfe:	int3   
 100ddff:	int3   
 100de00:	int3   
 100de01:	int3   
 100de02:	int3   
 100de03:	int3   
 100de04:	int3   
 100de05:	int3   
 100de06:	int3   
 100de07:	int3   
 100de08:	int3   
 100de09:	int3   
 100de0a:	int3   
 100de0b:	int3   
 100de0c:	int3   
 100de0d:	int3   
 100de0e:	int3   
 100de0f:	int3   
 100de10:	rex push rbx
 100de12:	sub    rsp,0x250
 100de19:	mov    rax,QWORD PTR [rip+0x16840]        # 0x1024660
 100de20:	xor    rax,rsp
 100de23:	mov    QWORD PTR [rsp+0x240],rax
 100de2b:	xor    ebx,ebx
 100de2d:	cmp    QWORD PTR [rip+0x182d4],rbx        # 0x1026108
 100de34:	jne    0x100df3a
 100de3a:	lea    r9,[rsp+0x20]
 100de3f:	lea    r8,[rsp+0x30]
 100de44:	lea    rdx,[rip+0xffffffffffff48f5]        # 0x1002740
 100de4b:	xor    ecx,ecx
 100de4d:	mov    DWORD PTR [rsp+0x20],0x105
 100de55:	call   0x1017882
 100de5a:	test   eax,eax
 100de5c:	jne    0x100de75
 100de5e:	lea    rcx,[rip+0xffffffffffff48f3]        # 0x1002758
 100de65:	call   QWORD PTR [rip+0xffffffffffff36b5]        # 0x1001520
 100de6b:	mov    eax,0x80004005
 100de70:	jmp    0x100df3c
 100de75:	mov    ecx,0x104
 100de7a:	lea    rax,[rsp+0x30]
 100de7f:	mov    edx,ecx
 100de81:	cmp    WORD PTR [rax],bx
 100de84:	je     0x100dea6
 100de86:	add    rax,0x2
 100de8a:	dec    rdx
 100de8d:	jne    0x100de81
 100de8f:	lea    rcx,[rip+0xffffffffffff4902]        # 0x1002798
 100de96:	call   QWORD PTR [rip+0xffffffffffff3684]        # 0x1001520
 100de9c:	mov    eax,0x80004005
 100dea1:	jmp    0x100df3c
 100dea6:	test   rdx,rdx
 100dea9:	je     0x100de8f
 100deab:	mov    r8,rcx
 100deae:	lea    rax,[rsp+0x30]
 100deb3:	mov    r10d,ebx
 100deb6:	sub    r8,rdx
 100deb9:	lea    rax,[rax+r8*2]
 100debd:	sub    rcx,r8
 100dec0:	je     0x100defd
 100dec2:	lea    rdx,[r8+0x7ffffefb]
 100dec9:	lea    r9,[rip+0xffffffffffff48b8]        # 0x1002788
 100ded0:	add    rdx,rcx
 100ded3:	sub    r9,rax
 100ded6:	test   rdx,rdx
 100ded9:	je     0x100def8
 100dedb:	movzx  r8d,WORD PTR [r9+rax*1]
 100dee0:	test   r8w,r8w
 100dee4:	je     0x100def8
 100dee6:	mov    WORD PTR [rax],r8w
 100deea:	add    rax,0x2
 100deee:	dec    rdx
 100def1:	dec    rcx
 100def4:	jne    0x100ded6
 100def6:	jmp    0x100defd
 100def8:	test   rcx,rcx
 100defb:	jne    0x100df07
 100defd:	sub    rax,0x2
 100df01:	mov    r10d,0x8007007a
 100df07:	mov    WORD PTR [rax],bx
 100df0a:	test   r10d,r10d
 100df0d:	js     0x100de8f
 100df0f:	lea    rcx,[rsp+0x30]
 100df14:	call   QWORD PTR [rip+0xffffffffffff33f6]        # 0x1001310
 100df1a:	mov    QWORD PTR [rip+0x181e7],rax        # 0x1026108
 100df21:	test   rax,rax
 100df24:	jne    0x100df3a
 100df26:	lea    rcx,[rip+0xffffffffffff489b]        # 0x10027c8
 100df2d:	call   QWORD PTR [rip+0xffffffffffff35ed]        # 0x1001520
 100df33:	mov    eax,0x80004005
 100df38:	jmp    0x100df3c
 100df3a:	mov    eax,ebx
 100df3c:	mov    rcx,QWORD PTR [rsp+0x240]
 100df44:	xor    rcx,rsp
 100df47:	call   0x100c0d0
 100df4c:	add    rsp,0x250
 100df53:	pop    rbx
 100df54:	ret    
 100df55:	int3   
 100df56:	int3   
 100df57:	int3   
 100df58:	int3   
 100df59:	int3   
 100df5a:	int3   
 100df5b:	int3   
 100df5c:	int3   
 100df5d:	int3   
 100df5e:	int3   
 100df5f:	int3   
 100df60:	sub    rsp,0x28
 100df64:	cmp    DWORD PTR [rip+0x181a5],0x0        # 0x1026110
 100df6b:	jne    0x100dffc
 100df71:	call   0x1016310
 100df76:	test   eax,eax
 100df78:	je     0x100dfe8
 100df7a:	call   QWORD PTR [rip+0x1e498]        # 0x102c418
 100df80:	test   eax,eax
 100df82:	jne    0x100dfd2
 100df84:	xor    ecx,ecx
 100df86:	call   QWORD PTR [rip+0x1e484]        # 0x102c410
 100df8c:	test   eax,eax
 100df8e:	jne    0x100dfa7
 100df90:	lea    rcx,[rip+0xffffffffffff4849]        # 0x10027e0
 100df97:	call   QWORD PTR [rip+0xffffffffffff3583]        # 0x1001520
 100df9d:	mov    eax,0x80004005
 100dfa2:	add    rsp,0x28
 100dfa6:	ret    
 100dfa7:	lea    rdx,[rsp+0x30]
 100dfac:	mov    ecx,0xe
 100dfb1:	call   QWORD PTR [rip+0x1e591]        # 0x102c548
 100dfb7:	test   eax,eax
 100dfb9:	jne    0x100dfd2
 100dfbb:	lea    rcx,[rip+0xffffffffffff484e]        # 0x1002810
 100dfc2:	call   QWORD PTR [rip+0xffffffffffff3558]        # 0x1001520
 100dfc8:	mov    eax,0x80004005
 100dfcd:	add    rsp,0x28
 100dfd1:	ret    
 100dfd2:	call   0x100f3d0
 100dfd7:	test   eax,eax
 100dfd9:	jne    0x100dff2
 100dfdb:	lea    rcx,[rip+0xffffffffffff4856]        # 0x1002838
 100dfe2:	call   QWORD PTR [rip+0xffffffffffff3538]        # 0x1001520
 100dfe8:	mov    eax,0x80004005
 100dfed:	add    rsp,0x28
 100dff1:	ret    
 100dff2:	mov    DWORD PTR [rip+0x18114],0x1        # 0x1026110
 100dffc:	xor    eax,eax
 100dffe:	add    rsp,0x28
 100e002:	ret    
 100e003:	int3   
 100e004:	int3   
 100e005:	int3   
 100e006:	int3   
 100e007:	int3   
 100e008:	int3   
 100e009:	int3   
 100e00a:	int3   
 100e00b:	int3   
 100e00c:	int3   
 100e00d:	int3   
 100e00e:	int3   
 100e00f:	int3   
 100e010:	sub    rsp,0x28
 100e014:	cmp    DWORD PTR [rip+0x180f5],0x0        # 0x1026110
 100e01b:	je     0x100e083
 100e01d:	lea    rdx,[rsp+0x30]
 100e022:	mov    ecx,0x1
 100e027:	call   QWORD PTR [rip+0x1e3fb]        # 0x102c428
 100e02d:	test   eax,eax
 100e02f:	je     0x100e074
 100e031:	mov    rcx,QWORD PTR [rsp+0x30]
 100e036:	lea    rdx,[rsp+0x38]
 100e03b:	call   QWORD PTR [rip+0x1e3f7]        # 0x102c438
 100e041:	test   eax,eax
 100e043:	je     0x100e069
 100e045:	mov    rcx,QWORD PTR [rsp+0x38]
 100e04a:	test   rcx,rcx
 100e04d:	je     0x100e069
 100e04f:	call   QWORD PTR [rip+0x1e4cb]        # 0x102c520
 100e055:	mov    rcx,QWORD PTR [rsp+0x30]
 100e05a:	lea    rdx,[rsp+0x38]
 100e05f:	call   QWORD PTR [rip+0x1e3d3]        # 0x102c438
 100e065:	test   eax,eax
 100e067:	jne    0x100e045
 100e069:	mov    rcx,QWORD PTR [rsp+0x30]
 100e06e:	call   QWORD PTR [rip+0x1e3cc]        # 0x102c440
 100e074:	call   0x100f5e0
 100e079:	mov    DWORD PTR [rip+0x1808d],0x0        # 0x1026110
 100e083:	add    rsp,0x28
 100e087:	ret    
 100e088:	int3   
 100e089:	int3   
 100e08a:	int3   
 100e08b:	int3   
 100e08c:	int3   
 100e08d:	int3   
 100e08e:	int3   
 100e08f:	int3   
 100e090:	push   r14
 100e092:	sub    rsp,0x40
 100e096:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100e09f:	mov    QWORD PTR [rsp+0x50],rbx
 100e0a4:	mov    QWORD PTR [rsp+0x58],rsi
 100e0a9:	mov    QWORD PTR [rsp+0x60],rdi
 100e0ae:	mov    rbx,r8
 100e0b1:	mov    esi,edx
 100e0b3:	mov    r14,rcx
 100e0b6:	xor    edi,edi
 100e0b8:	cmp    DWORD PTR [rip+0x18052],edi        # 0x1026110
 100e0be:	je     0x100e162
 100e0c4:	test   rbx,rbx
 100e0c7:	je     0x100e162
 100e0cd:	cmp    WORD PTR [r8],di
 100e0d1:	je     0x100e162
 100e0d7:	mov    ecx,0x230
 100e0dc:	call   0x100bce4
 100e0e1:	mov    QWORD PTR [rsp+0x28],rax
 100e0e6:	test   rax,rax
 100e0e9:	je     0x100e0f5
 100e0eb:	mov    rcx,rax
 100e0ee:	call   0x1011e30
 100e0f3:	jmp    0x100e0f8
 100e0f5:	mov    rax,rdi
 100e0f8:	mov    QWORD PTR [r14],rax
 100e0fb:	test   rax,rax
 100e0fe:	jne    0x100e114
 100e100:	lea    rcx,[rip+0xffffffffffff4761]        # 0x1002868
 100e107:	call   QWORD PTR [rip+0xffffffffffff3413]        # 0x1001520
 100e10d:	mov    edi,0x80004005
 100e112:	jmp    0x100e162
 100e114:	test   esi,esi
 100e116:	jne    0x100e127
 100e118:	mov    rdx,rbx
 100e11b:	mov    rcx,rax
 100e11e:	call   0x1011f50
 100e123:	mov    edi,eax
 100e125:	jmp    0x100e162
 100e127:	cmp    esi,0x1
 100e12a:	jne    0x100e162
 100e12c:	mov    rcx,rbx
 100e12f:	call   QWORD PTR [rip+0xffffffffffff3443]        # 0x1001578
 100e135:	mov    rbx,rax
 100e138:	mov    QWORD PTR [rsp+0x28],rax
 100e13d:	mov    DWORD PTR [rsp+0x30],esi
 100e141:	mov    rdx,rax
 100e144:	mov    rcx,QWORD PTR [r14]
 100e147:	call   0x1012080
 100e14c:	mov    edi,eax
 100e14e:	test   eax,eax
 100e150:	je     0x100e154
 100e152:	jmp    0x100e154
 100e154:	test   rbx,rbx
 100e157:	je     0x100e162
 100e159:	mov    rcx,rbx
 100e15c:	call   QWORD PTR [rip+0xffffffffffff340e]        # 0x1001570
 100e162:	mov    eax,edi
 100e164:	mov    rbx,QWORD PTR [rsp+0x50]
 100e169:	mov    rsi,QWORD PTR [rsp+0x58]
 100e16e:	mov    rdi,QWORD PTR [rsp+0x60]
 100e173:	add    rsp,0x40
 100e177:	pop    r14
 100e179:	ret    
 100e17a:	int3   
 100e17b:	int3   
 100e17c:	int3   
 100e17d:	int3   
 100e17e:	int3   
 100e17f:	int3   
 100e180:	sub    rsp,0x38
 100e184:	xor    r9d,r9d
 100e187:	xor    r8d,r8d
 100e18a:	mov    QWORD PTR [rsp+0x20],0x0
 100e193:	lea    edx,[r9+0x2]
 100e197:	call   0x100e1b0
 100e19c:	add    rsp,0x38
 100e1a0:	ret    
 100e1a1:	int3   
 100e1a2:	int3   
 100e1a3:	int3   
 100e1a4:	int3   
 100e1a5:	int3   
 100e1a6:	int3   
 100e1a7:	int3   
 100e1a8:	int3   
 100e1a9:	int3   
 100e1aa:	int3   
 100e1ab:	int3   
 100e1ac:	int3   
 100e1ad:	int3   
 100e1ae:	int3   
 100e1af:	int3   
 100e1b0:	rex push rbp
 100e1b2:	push   rsi
 100e1b3:	push   rdi
 100e1b4:	push   r12
 100e1b6:	push   r13
 100e1b8:	push   r14
 100e1ba:	push   r15
 100e1bc:	lea    rbp,[rsp-0x280]
 100e1c4:	sub    rsp,0x380
 100e1cb:	mov    QWORD PTR [rsp+0x60],0xfffffffffffffffe
 100e1d4:	mov    QWORD PTR [rsp+0x3d0],rbx
 100e1dc:	mov    rax,QWORD PTR [rip+0x1647d]        # 0x1024660
 100e1e3:	xor    rax,rsp
 100e1e6:	mov    QWORD PTR [rbp+0x270],rax
 100e1ed:	mov    rdi,r9
 100e1f0:	mov    QWORD PTR [rsp+0x58],r9
 100e1f5:	mov    r12d,r8d
 100e1f8:	mov    r13d,edx
 100e1fb:	mov    r15,QWORD PTR [rbp+0x2e0]
 100e202:	xor    ebx,ebx
 100e204:	mov    r14d,0x80004005
 100e20a:	test   r15,r15
 100e20d:	je     0x100e212
 100e20f:	mov    QWORD PTR [r15],rbx
 100e212:	test   rcx,rcx
 100e215:	je     0x100e680
 100e21b:	cmp    DWORD PTR [rip+0x17eef],ebx        # 0x1026110
 100e221:	je     0x100e680
 100e227:	mov    QWORD PTR [rsp+0x50],rbx
 100e22c:	mov    QWORD PTR [rsp+0x30],rbx
 100e231:	mov    rax,QWORD PTR [rcx]
 100e234:	lea    rdx,[rsp+0x50]
 100e239:	call   QWORD PTR [rax]
 100e23b:	or     esi,0xffffffff
 100e23e:	test   eax,eax
 100e240:	je     0x100e62b
 100e246:	mov    rax,QWORD PTR [rsp+0x50]
 100e24b:	test   rax,rax
 100e24e:	je     0x100e62b
 100e254:	mov    r8,QWORD PTR [rax]
 100e257:	lea    rdx,[rsp+0x30]
 100e25c:	mov    rcx,rax
 100e25f:	call   QWORD PTR [r8]
 100e262:	test   eax,eax
 100e264:	je     0x100e62b
 100e26a:	mov    rax,QWORD PTR [rsp+0x30]
 100e26f:	test   rax,rax
 100e272:	je     0x100e630
 100e278:	mov    r8,QWORD PTR [rax]
 100e27b:	mov    edx,r13d
 100e27e:	mov    rcx,rax
 100e281:	call   QWORD PTR [r8+0x8]
 100e285:	test   eax,eax
 100e287:	je     0x100e5c5
 100e28d:	test   r13b,0x1
 100e291:	je     0x100e46c
 100e297:	cmp    r12d,0x1
 100e29b:	je     0x100e2ad
 100e29d:	mov    rcx,rdi
 100e2a0:	call   0x100e6c0
 100e2a5:	test   eax,eax
 100e2a7:	jne    0x100e46c
 100e2ad:	mov    rcx,QWORD PTR [rsp+0x30]
 100e2b2:	mov    rax,QWORD PTR [rcx]
 100e2b5:	call   QWORD PTR [rax]
 100e2b7:	lea    rcx,[rsp+0x70]
 100e2bc:	mov    rdx,rax
 100e2bf:	mov    r8d,0x250
 100e2c5:	call   0x101750c
 100e2ca:	lea    rcx,[rbp-0x58]
 100e2ce:	call   0x1016990
 100e2d3:	mov    rdi,rax
 100e2d6:	test   rax,rax
 100e2d9:	je     0x100e4a2
 100e2df:	xor    edx,edx
 100e2e1:	lea    rcx,[rsp+0x48]
 100e2e6:	call   0x10166a0
 100e2eb:	nop
 100e2ec:	lea    rcx,[rsp+0x48]
 100e2f1:	call   0x10166e0
 100e2f6:	mov    rcx,rax
 100e2f9:	call   QWORD PTR [rip+0x1e191]        # 0x102c490
 100e2ff:	mov    QWORD PTR [rsp+0x40],rbx
 100e304:	lea    rcx,[rsp+0x48]
 100e309:	cmp    r12d,0x1
 100e30d:	jne    0x100e33f
 100e30f:	call   0x10166d0
 100e314:	mov    rcx,rax
 100e317:	lea    r9,[rsp+0x40]
 100e31c:	lea    r8d,[r12+0x1]
 100e321:	lea    rdx,[rip+0xffffffffffff4568]        # 0x1002890
 100e328:	call   QWORD PTR [rip+0x1e12a]        # 0x102c458
 100e32e:	cmp    QWORD PTR [rsp+0x40],0x0
 100e334:	jne    0x100e4bb
 100e33a:	jmp    0x100e42f
 100e33f:	mov    DWORD PTR [rbp+0x1c0],0x60003c00
 100e349:	mov    rax,QWORD PTR [rip+0xffffffffffff7590]        # 0x10058e0
 100e350:	mov    QWORD PTR [rbp+0x1c8],rax
 100e357:	mov    rax,QWORD PTR [rsp+0x58]
 100e35c:	mov    QWORD PTR [rbp+0x1d0],rax
 100e363:	xor    eax,eax
 100e365:	mov    QWORD PTR [rbp+0x1d8],rax
 100e36c:	mov    QWORD PTR [rbp+0x1e0],rax
 100e373:	mov    QWORD PTR [rbp+0x1e8],rax
 100e37a:	mov    QWORD PTR [rbp+0x1f0],rax
 100e381:	mov    DWORD PTR [rbp+0x1f8],0x60001c00
 100e38b:	mov    rax,QWORD PTR [rip+0xffffffffffff755e]        # 0x10058f0
 100e392:	mov    QWORD PTR [rbp+0x200],rax
 100e399:	mov    QWORD PTR [rbp+0x208],0x5
 100e3a4:	xor    eax,eax
 100e3a6:	mov    QWORD PTR [rbp+0x210],rax
 100e3ad:	mov    QWORD PTR [rbp+0x218],rax
 100e3b4:	mov    QWORD PTR [rbp+0x220],rax
 100e3bb:	mov    QWORD PTR [rbp+0x228],rax
 100e3c2:	mov    DWORD PTR [rbp+0x230],0x60002000
 100e3cc:	mov    rax,QWORD PTR [rip+0xffffffffffff7515]        # 0x10058e8
 100e3d3:	mov    QWORD PTR [rbp+0x238],rax
 100e3da:	mov    QWORD PTR [rbp+0x240],0x800
 100e3e5:	xor    eax,eax
 100e3e7:	mov    QWORD PTR [rbp+0x248],rax
 100e3ee:	mov    QWORD PTR [rbp+0x250],rax
 100e3f5:	mov    QWORD PTR [rbp+0x258],rax
 100e3fc:	mov    QWORD PTR [rbp+0x260],rax
 100e403:	call   0x10166d0
 100e408:	mov    rcx,rax
 100e40b:	lea    r9,[rsp+0x40]
 100e410:	mov    r8d,0x2
 100e416:	lea    rdx,[rip+0xffffffffffff44a3]        # 0x10028c0
 100e41d:	call   QWORD PTR [rip+0x1e035]        # 0x102c458
 100e423:	cmp    QWORD PTR [rsp+0x40],0x0
 100e429:	jne    0x100e53e
 100e42f:	mov    rax,QWORD PTR [rsp+0x30]
 100e434:	test   rax,rax
 100e437:	je     0x100e45b
 100e439:	lea    rcx,[rax+0x8]
 100e43d:	mov    eax,esi
 100e43f:	lock xadd DWORD PTR [rcx],eax
 100e443:	dec    eax
 100e445:	jne    0x100e45b
 100e447:	test   rcx,rcx
 100e44a:	je     0x100e452
 100e44c:	add    rcx,0xfffffffffffffff8
 100e450:	jmp    0x100e455
 100e452:	mov    rcx,rbx
 100e455:	mov    rax,QWORD PTR [rcx]
 100e458:	call   QWORD PTR [rax+0x30]
 100e45b:	mov    QWORD PTR [rsp+0x30],rbx
 100e460:	lea    rcx,[rsp+0x48]
 100e465:	call   0x10166b0
 100e46a:	jmp    0x100e4a2
 100e46c:	mov    rax,QWORD PTR [rsp+0x30]
 100e471:	test   rax,rax
 100e474:	je     0x100e498
 100e476:	lea    rcx,[rax+0x8]
 100e47a:	mov    eax,esi
 100e47c:	lock xadd DWORD PTR [rcx],eax
 100e480:	dec    eax
 100e482:	jne    0x100e498
 100e484:	test   rcx,rcx
 100e487:	je     0x100e48f
 100e489:	add    rcx,0xfffffffffffffff8
 100e48d:	jmp    0x100e492
 100e48f:	mov    rcx,rbx
 100e492:	mov    rax,QWORD PTR [rcx]
 100e495:	call   QWORD PTR [rax+0x30]
 100e498:	mov    QWORD PTR [rsp+0x30],rbx
 100e49d:	mov    r14d,ebx
 100e4a0:	jmp    0x100e4a7
 100e4a2:	mov    rdi,QWORD PTR [rsp+0x58]
 100e4a7:	mov    rcx,QWORD PTR [rsp+0x50]
 100e4ac:	mov    rax,QWORD PTR [rcx]
 100e4af:	lea    rdx,[rsp+0x30]
 100e4b4:	call   QWORD PTR [rax]
 100e4b6:	jmp    0x100e262
 100e4bb:	mov    rcx,rdi
 100e4be:	call   QWORD PTR [rip+0x1dff4]        # 0x102c4b8
 100e4c4:	test   eax,eax
 100e4c6:	je     0x100e500
 100e4c8:	xor    edx,edx
 100e4ca:	mov    QWORD PTR [rsp+0x20],rbx
 100e4cf:	mov    r9,QWORD PTR [rsp+0x40]
 100e4d4:	xor    r8d,r8d
 100e4d7:	mov    rcx,rdi
 100e4da:	call   QWORD PTR [rip+0x1dff0]        # 0x102c4d0
 100e4e0:	mov    rcx,rdi
 100e4e3:	test   eax,eax
 100e4e5:	je     0x100e4fa
 100e4e7:	call   QWORD PTR [rip+0x1dfd3]        # 0x102c4c0
 100e4ed:	test   r15,r15
 100e4f0:	je     0x100e4f5
 100e4f2:	mov    QWORD PTR [r15],rdi
 100e4f5:	mov    r14d,ebx
 100e4f8:	jmp    0x100e500
 100e4fa:	call   QWORD PTR [rip+0x1dfc8]        # 0x102c4c8
 100e500:	mov    rcx,rdi
 100e503:	call   QWORD PTR [rip+0x1e017]        # 0x102c520
 100e509:	mov    r11,QWORD PTR [rsp+0x30]
 100e50e:	test   r11,r11
 100e511:	je     0x100e534
 100e513:	add    r11,0x8
 100e517:	mov    eax,esi
 100e519:	lock xadd DWORD PTR [r11],eax
 100e51e:	dec    eax
 100e520:	jne    0x100e534
 100e522:	test   r11,r11
 100e525:	lea    rcx,[r11-0x8]
 100e529:	jne    0x100e52e
 100e52b:	mov    rcx,rbx
 100e52e:	mov    rax,QWORD PTR [rcx]
 100e531:	call   QWORD PTR [rax+0x30]
 100e534:	mov    QWORD PTR [rsp+0x30],rbx
 100e539:	jmp    0x100e621
 100e53e:	mov    rcx,rdi
 100e541:	call   QWORD PTR [rip+0x1df71]        # 0x102c4b8
 100e547:	test   eax,eax
 100e549:	je     0x100e58a
 100e54b:	mov    edx,0x3
 100e550:	mov    QWORD PTR [rsp+0x20],rbx
 100e555:	mov    r9,QWORD PTR [rsp+0x40]
 100e55a:	lea    r8,[rbp+0x1c0]
 100e561:	mov    rcx,rdi
 100e564:	call   QWORD PTR [rip+0x1df66]        # 0x102c4d0
 100e56a:	mov    rcx,rdi
 100e56d:	test   eax,eax
 100e56f:	je     0x100e584
 100e571:	call   QWORD PTR [rip+0x1df49]        # 0x102c4c0
 100e577:	test   r15,r15
 100e57a:	je     0x100e57f
 100e57c:	mov    QWORD PTR [r15],rdi
 100e57f:	mov    r14d,ebx
 100e582:	jmp    0x100e58a
 100e584:	call   QWORD PTR [rip+0x1df3e]        # 0x102c4c8
 100e58a:	mov    rcx,rdi
 100e58d:	call   QWORD PTR [rip+0x1df8d]        # 0x102c520
 100e593:	mov    r11,QWORD PTR [rsp+0x30]
 100e598:	test   r11,r11
 100e59b:	je     0x100e5be
 100e59d:	add    r11,0x8
 100e5a1:	mov    eax,esi
 100e5a3:	lock xadd DWORD PTR [r11],eax
 100e5a8:	dec    eax
 100e5aa:	jne    0x100e5be
 100e5ac:	test   r11,r11
 100e5af:	lea    rcx,[r11-0x8]
 100e5b3:	jne    0x100e5b8
 100e5b5:	mov    rcx,rbx
 100e5b8:	mov    rax,QWORD PTR [rcx]
 100e5bb:	call   QWORD PTR [rax+0x30]
 100e5be:	mov    QWORD PTR [rsp+0x30],rbx
 100e5c3:	jmp    0x100e621
 100e5c5:	mov    rax,QWORD PTR [rsp+0x30]
 100e5ca:	test   rax,rax
 100e5cd:	je     0x100e5f2
 100e5cf:	lea    rcx,[rax+0x8]
 100e5d3:	mov    eax,esi
 100e5d5:	lock xadd DWORD PTR [rcx],eax
 100e5d9:	dec    eax
 100e5db:	jne    0x100e5f2
 100e5dd:	test   rcx,rcx
 100e5e0:	je     0x100e5e8
 100e5e2:	add    rcx,0xfffffffffffffff8
 100e5e6:	jmp    0x100e5eb
 100e5e8:	mov    rcx,rbx
 100e5eb:	mov    rax,QWORD PTR [rcx]
 100e5ee:	call   QWORD PTR [rax+0x30]
 100e5f1:	nop
 100e5f2:	mov    rax,QWORD PTR [rsp+0x50]
 100e5f7:	test   rax,rax
 100e5fa:	je     0x100e61a
 100e5fc:	add    rax,0x8
 100e600:	lock xadd DWORD PTR [rax],esi
 100e604:	dec    esi
 100e606:	jne    0x100e61a
 100e608:	test   rax,rax
 100e60b:	je     0x100e611
 100e60d:	lea    rbx,[rax-0x8]
 100e611:	mov    rdx,QWORD PTR [rbx]
 100e614:	mov    rcx,rbx
 100e617:	call   QWORD PTR [rdx+0x8]
 100e61a:	mov    eax,0x80004005
 100e61f:	jmp    0x100e683
 100e621:	lea    rcx,[rsp+0x48]
 100e626:	call   0x10166b0
 100e62b:	mov    rax,QWORD PTR [rsp+0x30]
 100e630:	test   rax,rax
 100e633:	je     0x100e658
 100e635:	lea    rcx,[rax+0x8]
 100e639:	mov    eax,esi
 100e63b:	lock xadd DWORD PTR [rcx],eax
 100e63f:	dec    eax
 100e641:	jne    0x100e658
 100e643:	test   rcx,rcx
 100e646:	je     0x100e64e
 100e648:	add    rcx,0xfffffffffffffff8
 100e64c:	jmp    0x100e651
 100e64e:	mov    rcx,rbx
 100e651:	mov    rax,QWORD PTR [rcx]
 100e654:	call   QWORD PTR [rax+0x30]
 100e657:	nop
 100e658:	mov    rax,QWORD PTR [rsp+0x50]
 100e65d:	test   rax,rax
 100e660:	je     0x100e680
 100e662:	add    rax,0x8
 100e666:	lock xadd DWORD PTR [rax],esi
 100e66a:	dec    esi
 100e66c:	jne    0x100e680
 100e66e:	test   rax,rax
 100e671:	je     0x100e677
 100e673:	lea    rbx,[rax-0x8]
 100e677:	mov    rdx,QWORD PTR [rbx]
 100e67a:	mov    rcx,rbx
 100e67d:	call   QWORD PTR [rdx+0x8]
 100e680:	mov    eax,r14d
 100e683:	mov    rcx,QWORD PTR [rbp+0x270]
 100e68a:	xor    rcx,rsp
 100e68d:	call   0x100c0d0
 100e692:	mov    rbx,QWORD PTR [rsp+0x3d0]
 100e69a:	add    rsp,0x380
 100e6a1:	pop    r15
 100e6a3:	pop    r14
 100e6a5:	pop    r13
 100e6a7:	pop    r12
 100e6a9:	pop    rdi
 100e6aa:	pop    rsi
 100e6ab:	pop    rbp
 100e6ac:	ret    
 100e6ad:	int3   
 100e6ae:	int3   
 100e6af:	int3   
 100e6b0:	int3   
 100e6b1:	int3   
 100e6b2:	int3   
 100e6b3:	int3   
 100e6b4:	int3   
 100e6b5:	int3   
 100e6b6:	int3   
 100e6b7:	int3   
 100e6b8:	int3   
 100e6b9:	int3   
 100e6ba:	int3   
 100e6bb:	int3   
 100e6bc:	int3   
 100e6bd:	int3   
 100e6be:	int3   
 100e6bf:	int3   
 100e6c0:	test   rcx,rcx
 100e6c3:	je     0x100e6ce
 100e6c5:	cmp    WORD PTR [rcx],0x0
 100e6c9:	je     0x100e6ce
 100e6cb:	xor    eax,eax
 100e6cd:	ret    
 100e6ce:	mov    eax,0x1
 100e6d3:	ret    
 100e6d4:	int3   
 100e6d5:	int3   
 100e6d6:	int3   
 100e6d7:	int3   
 100e6d8:	int3   
 100e6d9:	int3   
 100e6da:	int3   
 100e6db:	int3   
 100e6dc:	int3   
 100e6dd:	int3   
 100e6de:	int3   
 100e6df:	int3   
 100e6e0:	sub    rsp,0x28
 100e6e4:	mov    rcx,QWORD PTR [rcx]
 100e6e7:	test   rcx,rcx
 100e6ea:	je     0x100e716
 100e6ec:	add    rcx,0x8
 100e6f0:	or     eax,0xffffffff
 100e6f3:	lock xadd DWORD PTR [rcx],eax
 100e6f7:	dec    eax
 100e6f9:	jne    0x100e716
 100e6fb:	test   rcx,rcx
 100e6fe:	je     0x100e710
 100e700:	mov    rax,QWORD PTR [rcx-0x8]
 100e704:	add    rcx,0xfffffffffffffff8
 100e708:	add    rsp,0x28
 100e70c:	rex.W jmp QWORD PTR [rax+0x8]
 100e710:	mov    rax,QWORD PTR [rcx]
 100e713:	call   QWORD PTR [rax+0x8]
 100e716:	add    rsp,0x28
 100e71a:	ret    
 100e71b:	int3   
 100e71c:	int3   
 100e71d:	int3   
 100e71e:	int3   
 100e71f:	int3   
 100e720:	int3   
 100e721:	int3   
 100e722:	int3   
 100e723:	int3   
 100e724:	int3   
 100e725:	int3   
 100e726:	int3   
 100e727:	int3   
 100e728:	int3   
 100e729:	int3   
 100e72a:	int3   
 100e72b:	int3   
 100e72c:	int3   
 100e72d:	int3   
 100e72e:	int3   
 100e72f:	int3   
 100e730:	sub    rsp,0x28
 100e734:	mov    rcx,QWORD PTR [rcx]
 100e737:	test   rcx,rcx
 100e73a:	je     0x100e766
 100e73c:	add    rcx,0x8
 100e740:	or     eax,0xffffffff
 100e743:	lock xadd DWORD PTR [rcx],eax
 100e747:	dec    eax
 100e749:	jne    0x100e766
 100e74b:	test   rcx,rcx
 100e74e:	je     0x100e760
 100e750:	mov    rax,QWORD PTR [rcx-0x8]
 100e754:	add    rcx,0xfffffffffffffff8
 100e758:	add    rsp,0x28
 100e75c:	rex.W jmp QWORD PTR [rax+0x30]
 100e760:	mov    rax,QWORD PTR [rcx]
 100e763:	call   QWORD PTR [rax+0x30]
 100e766:	add    rsp,0x28
 100e76a:	ret    
 100e76b:	int3   
 100e76c:	int3   
 100e76d:	int3   
 100e76e:	int3   
 100e76f:	int3   
 100e770:	int3   
 100e771:	int3   
 100e772:	int3   
 100e773:	int3   
 100e774:	int3   
 100e775:	int3   
 100e776:	int3   
 100e777:	int3   
 100e778:	int3   
 100e779:	int3   
 100e77a:	int3   
 100e77b:	int3   
 100e77c:	int3   
 100e77d:	int3   
 100e77e:	int3   
 100e77f:	int3   
 100e780:	sub    rsp,0x28
 100e784:	mov    eax,DWORD PTR [rip+0x17c1e]        # 0x10263a8
 100e78a:	test   al,0x1
 100e78c:	jne    0x100e7f2
 100e78e:	movups xmm0,XMMWORD PTR [rip+0xffffffffffff4c3b]        # 0x10033d0
 100e795:	or     eax,0x1
 100e798:	lea    rcx,[rip+0xf8c1]        # 0x101e060
 100e79f:	mov    DWORD PTR [rip+0x17c03],eax        # 0x10263a8
 100e7a5:	lea    rax,[rip+0xffffffffffff4bd4]        # 0x1003380
 100e7ac:	mov    QWORD PTR [rip+0x179ad],rax        # 0x1026160
 100e7b3:	lea    rax,[rip+0x16046]        # 0x1024800
 100e7ba:	movaps XMMWORD PTR [rip+0x17bbf],xmm0        # 0x1026380
 100e7c1:	mov    QWORD PTR [rip+0x179a0],rax        # 0x1026168
 100e7c8:	lea    rax,[rip+0x17989]        # 0x1026158
 100e7cf:	mov    QWORD PTR [rip+0x1799a],rax        # 0x1026170
 100e7d6:	xor    eax,eax
 100e7d8:	mov    QWORD PTR [rip+0x17bb1],rax        # 0x1026390
 100e7df:	mov    QWORD PTR [rip+0x17bb2],rax        # 0x1026398
 100e7e6:	mov    QWORD PTR [rip+0x17bb3],rax        # 0x10263a0
 100e7ed:	call   0x100bda8
 100e7f2:	lea    rax,[rip+0x17967]        # 0x1026160
 100e7f9:	add    rsp,0x28
 100e7fd:	ret    
 100e7fe:	int3   
 100e7ff:	int3   
 100e800:	int3   
 100e801:	int3   
 100e802:	int3   
 100e803:	int3   
 100e804:	int3   
 100e805:	int3   
 100e806:	int3   
 100e807:	int3   
 100e808:	int3   
 100e809:	int3   
 100e80a:	int3   
 100e80b:	int3   
 100e80c:	int3   
 100e80d:	int3   
 100e80e:	int3   
 100e80f:	int3   
 100e810:	mov    QWORD PTR [rsp+0x20],rbx
 100e815:	push   r14
 100e817:	sub    rsp,0x20
 100e81b:	movzx  ebx,r8w
 100e81f:	mov    r14,rcx
 100e822:	call   0x100f0d0
 100e827:	test   eax,eax
 100e829:	je     0x100eb03
 100e82f:	lea    rcx,[rip+0xffffffffffff380a]        # 0x1002040
 100e836:	xor    r8d,r8d
 100e839:	xor    edx,edx
 100e83b:	call   QWORD PTR [rip+0xffffffffffff29af]        # 0x10011f0
 100e841:	mov    QWORD PTR [r14+0x240],rax
 100e848:	test   rax,rax
 100e84b:	je     0x100eb03
 100e851:	lea    rdx,[rip+0xffffffffffff3800]        # 0x1002058
 100e858:	mov    rcx,rax
 100e85b:	call   QWORD PTR [rip+0xffffffffffff2a2f]        # 0x1001290
 100e861:	mov    QWORD PTR [r14+0x238],rax
 100e868:	test   rax,rax
 100e86b:	je     0x100eb03
 100e871:	lea    rcx,[r14+0x230]
 100e878:	call   QWORD PTR [rip+0x1ddb2]        # 0x102c630
 100e87e:	test   eax,eax
 100e880:	je     0x100eb03
 100e886:	mov    QWORD PTR [rsp+0x30],rbp
 100e88b:	mov    QWORD PTR [rsp+0x38],rsi
 100e890:	mov    QWORD PTR [rsp+0x40],rdi
 100e895:	call   0x100ad20
 100e89a:	lea    rdx,[rip+0xffffffffffff35e7]        # 0x1001e88
 100e8a1:	mov    r8,rax
 100e8a4:	mov    rax,QWORD PTR [r14+0x8]
 100e8a8:	mov    rcx,QWORD PTR [rax]
 100e8ab:	mov    rcx,QWORD PTR [rcx+0x8]
 100e8af:	call   QWORD PTR [rip+0xffffffffffff2c3b]        # 0x10014f0
 100e8b5:	mov    r11,QWORD PTR [r14+0x8]
 100e8b9:	mov    rdx,QWORD PTR [r11]
 100e8bc:	test   bx,bx
 100e8bf:	je     0x100e8e1
 100e8c1:	mov    ecx,DWORD PTR [rdx+0x4]
 100e8c4:	mov    eax,ecx
 100e8c6:	and    eax,0x3ff
 100e8cb:	cmp    eax,0x3ff
 100e8d0:	jne    0x100e8e1
 100e8d2:	movzx  eax,bx
 100e8d5:	xor    eax,ecx
 100e8d7:	and    eax,0x3ff
 100e8dc:	xor    eax,ecx
 100e8de:	mov    DWORD PTR [rdx+0x4],eax
 100e8e1:	xor    esi,esi
 100e8e3:	xor    ebp,ebp
 100e8e5:	data16 data16 nop WORD PTR [rax+rax*1+0x0]
 100e8f0:	mov    rax,QWORD PTR [r14+0x8]
 100e8f4:	xor    edi,edi
 100e8f6:	mov    rax,QWORD PTR [rax+rbp*1+0x8]
 100e8fb:	lea    r11,[rax+0x10]
 100e8ff:	nop
 100e900:	test   rax,rax
 100e903:	je     0x100ead4
 100e909:	cmp    edi,DWORD PTR [rax+0x8]
 100e90c:	jae    0x100ead4
 100e912:	mov    rdx,QWORD PTR [r11]
 100e915:	test   bx,bx
 100e918:	je     0x100e941
 100e91a:	mov    r8d,DWORD PTR [rdx+0x4]
 100e91e:	mov    ecx,r8d
 100e921:	and    ecx,0x3ff
 100e927:	cmp    ecx,0x3ff
 100e92d:	jne    0x100e941
 100e92f:	movzx  ecx,bx
 100e932:	xor    ecx,r8d
 100e935:	and    ecx,0x3ff
 100e93b:	xor    ecx,r8d
 100e93e:	mov    DWORD PTR [rdx+0x4],ecx
 100e941:	mov    ecx,esi
 100e943:	test   esi,esi
 100e945:	je     0x100e9f6
 100e94b:	dec    ecx
 100e94d:	je     0x100e960
 100e94f:	dec    ecx
 100e951:	je     0x100e9a0
 100e953:	sub    ecx,0x2
 100e956:	je     0x100e960
 100e958:	dec    ecx
 100e95a:	jne    0x100eac9
 100e960:	mov    r8,QWORD PTR [r11]
 100e963:	test   bx,bx
 100e966:	je     0x100eac9
 100e96c:	mov    edx,DWORD PTR [r8+0x20]
 100e970:	mov    ecx,edx
 100e972:	and    ecx,0x3ff
 100e978:	cmp    ecx,0x3ff
 100e97e:	jne    0x100eac9
 100e984:	movzx  ecx,bx
 100e987:	inc    edi
 100e989:	xor    ecx,edx
 100e98b:	and    ecx,0x3ff
 100e991:	xor    ecx,edx
 100e993:	add    r11,0x8
 100e997:	mov    DWORD PTR [r8+0x20],ecx
 100e99b:	jmp    0x100e900
 100e9a0:	mov    rcx,QWORD PTR [r11]
 100e9a3:	movzx  r8d,WORD PTR [rcx+0x20]
 100e9a8:	mov    rdx,QWORD PTR [rcx+0x28]
 100e9ac:	test   r8d,r8d
 100e9af:	je     0x100eac9
 100e9b5:	mov    r9d,r8d
 100e9b8:	test   bx,bx
 100e9bb:	je     0x100e9e2
 100e9bd:	mov    r8d,DWORD PTR [rdx]
 100e9c0:	mov    ecx,r8d
 100e9c3:	and    ecx,0x3ff
 100e9c9:	cmp    ecx,0x3ff
 100e9cf:	jne    0x100e9e2
 100e9d1:	movzx  ecx,bx
 100e9d4:	xor    ecx,r8d
 100e9d7:	and    ecx,0x3ff
 100e9dd:	xor    ecx,r8d
 100e9e0:	mov    DWORD PTR [rdx],ecx
 100e9e2:	add    rdx,0x38
 100e9e6:	dec    r9
 100e9e9:	jne    0x100e9b8
 100e9eb:	inc    edi
 100e9ed:	add    r11,0x8
 100e9f1:	jmp    0x100e900
 100e9f6:	mov    r10,QWORD PTR [r11]
 100e9f9:	movzx  ecx,WORD PTR [r10+0x22]
 100e9fe:	mov    rdx,QWORD PTR [r10+0x38]
 100ea02:	test   ecx,ecx
 100ea04:	je     0x100ea43
 100ea06:	mov    r9d,ecx
 100ea09:	nop    DWORD PTR [rax+0x0]
 100ea10:	test   bx,bx
 100ea13:	je     0x100ea3a
 100ea15:	mov    r8d,DWORD PTR [rdx]
 100ea18:	mov    ecx,r8d
 100ea1b:	and    ecx,0x3ff
 100ea21:	cmp    ecx,0x3ff
 100ea27:	jne    0x100ea3a
 100ea29:	movzx  ecx,bx
 100ea2c:	xor    ecx,r8d
 100ea2f:	and    ecx,0x3ff
 100ea35:	xor    ecx,r8d
 100ea38:	mov    DWORD PTR [rdx],ecx
 100ea3a:	add    rdx,0x38
 100ea3e:	dec    r9
 100ea41:	jne    0x100ea10
 100ea43:	movzx  ecx,WORD PTR [r10+0x20]
 100ea48:	mov    rdx,QWORD PTR [r10+0x30]
 100ea4c:	test   ecx,ecx
 100ea4e:	je     0x100ea86
 100ea50:	mov    r9d,ecx
 100ea53:	test   bx,bx
 100ea56:	je     0x100ea7d
 100ea58:	mov    r8d,DWORD PTR [rdx]
 100ea5b:	mov    ecx,r8d
 100ea5e:	and    ecx,0x3ff
 100ea64:	cmp    ecx,0x3ff
 100ea6a:	jne    0x100ea7d
 100ea6c:	movzx  ecx,bx
 100ea6f:	xor    ecx,r8d
 100ea72:	and    ecx,0x3ff
 100ea78:	xor    ecx,r8d
 100ea7b:	mov    DWORD PTR [rdx],ecx
 100ea7d:	add    rdx,0x28
 100ea81:	dec    r9
 100ea84:	jne    0x100ea53
 100ea86:	movzx  ecx,WORD PTR [r10+0x24]
 100ea8b:	mov    rdx,QWORD PTR [r10+0x40]
 100ea8f:	test   ecx,ecx
 100ea91:	je     0x100eac9
 100ea93:	mov    r9d,ecx
 100ea96:	test   bx,bx
 100ea99:	je     0x100eac0
 100ea9b:	mov    r8d,DWORD PTR [rdx]
 100ea9e:	mov    ecx,r8d
 100eaa1:	and    ecx,0x3ff
 100eaa7:	cmp    ecx,0x3ff
 100eaad:	jne    0x100eac0
 100eaaf:	movzx  ecx,bx
 100eab2:	xor    ecx,r8d
 100eab5:	and    ecx,0x3ff
 100eabb:	xor    ecx,r8d
 100eabe:	mov    DWORD PTR [rdx],ecx
 100eac0:	add    rdx,0x28
 100eac4:	dec    r9
 100eac7:	jne    0x100ea96
 100eac9:	inc    edi
 100eacb:	add    r11,0x8
 100eacf:	jmp    0x100e900
 100ead4:	inc    esi
 100ead6:	add    rbp,0x8
 100eada:	cmp    esi,0x8
 100eadd:	jb     0x100e8f0
 100eae3:	mov    rdi,QWORD PTR [rsp+0x40]
 100eae8:	mov    rsi,QWORD PTR [rsp+0x38]
 100eaed:	mov    rbp,QWORD PTR [rsp+0x30]
 100eaf2:	mov    eax,0x1
 100eaf7:	mov    rbx,QWORD PTR [rsp+0x48]
 100eafc:	add    rsp,0x20
 100eb00:	pop    r14
 100eb02:	ret    
 100eb03:	xor    eax,eax
 100eb05:	mov    rbx,QWORD PTR [rsp+0x48]
 100eb0a:	add    rsp,0x20
 100eb0e:	pop    r14
 100eb10:	ret    
 100eb11:	int3   
 100eb12:	int3   
 100eb13:	int3   
 100eb14:	int3   
 100eb15:	int3   
 100eb16:	int3   
 100eb17:	int3   
 100eb18:	int3   
 100eb19:	int3   
 100eb1a:	int3   
 100eb1b:	int3   
 100eb1c:	int3   
 100eb1d:	int3   
 100eb1e:	int3   
 100eb1f:	int3   
 100eb20:	mov    QWORD PTR [rsp+0x8],rbx
 100eb25:	mov    QWORD PTR [rsp+0x10],rbp
 100eb2a:	mov    QWORD PTR [rsp+0x18],rsi
 100eb2f:	mov    QWORD PTR [rsp+0x20],rdi
 100eb34:	push   r12
 100eb36:	push   r14
 100eb38:	push   r15
 100eb3a:	sub    rsp,0x20
 100eb3e:	mov    rax,QWORD PTR [rcx+0x8]
 100eb42:	mov    r14,rcx
 100eb45:	mov    r12d,0x3ff
 100eb4b:	mov    rdx,QWORD PTR [rax]
 100eb4e:	movzx  ebx,WORD PTR [rdx+0x4]
 100eb52:	call   0x100ad20
 100eb57:	lea    rdx,[rip+0xffffffffffff332a]        # 0x1001e88
 100eb5e:	mov    r8,rax
 100eb61:	mov    rax,QWORD PTR [r14+0x8]
 100eb65:	mov    rcx,QWORD PTR [rax]
 100eb68:	mov    rcx,QWORD PTR [rcx+0x8]
 100eb6c:	call   QWORD PTR [rip+0xffffffffffff297e]        # 0x10014f0
 100eb72:	mov    r11,QWORD PTR [r14+0x8]
 100eb76:	mov    r8,QWORD PTR [r11]
 100eb79:	and    bx,r12w
 100eb7d:	je     0x100eb94
 100eb7f:	mov    edx,DWORD PTR [r8+0x4]
 100eb83:	mov    ecx,edx
 100eb85:	and    ecx,r12d
 100eb88:	cmp    cx,bx
 100eb8b:	jne    0x100eb94
 100eb8d:	or     edx,r12d
 100eb90:	mov    DWORD PTR [r8+0x4],edx
 100eb94:	xor    ebp,ebp
 100eb96:	xor    r15d,r15d
 100eb99:	nop    DWORD PTR [rax+0x0]
 100eba0:	mov    rax,QWORD PTR [r14+0x8]
 100eba4:	xor    esi,esi
 100eba6:	mov    rax,QWORD PTR [r15+rax*1+0x8]
 100ebab:	lea    rdi,[rax+0x10]
 100ebaf:	nop
 100ebb0:	test   rax,rax
 100ebb3:	je     0x100ed14
 100ebb9:	cmp    esi,DWORD PTR [rax+0x8]
 100ebbc:	jae    0x100ed14
 100ebc2:	mov    r8,QWORD PTR [rdi]
 100ebc5:	test   bx,bx
 100ebc8:	je     0x100ebe0
 100ebca:	mov    r9d,DWORD PTR [r8+0x4]
 100ebce:	mov    edx,r9d
 100ebd1:	and    edx,r12d
 100ebd4:	cmp    dx,bx
 100ebd7:	jne    0x100ebe0
 100ebd9:	or     r9d,r12d
 100ebdc:	mov    DWORD PTR [r8+0x4],r9d
 100ebe0:	mov    ecx,ebp
 100ebe2:	test   ebp,ebp
 100ebe4:	je     0x100ec70
 100ebea:	dec    ecx
 100ebec:	je     0x100ebff
 100ebee:	dec    ecx
 100ebf0:	je     0x100ec2d
 100ebf2:	sub    ecx,0x2
 100ebf5:	je     0x100ebff
 100ebf7:	dec    ecx
 100ebf9:	jne    0x100ed09
 100ebff:	mov    r9,QWORD PTR [rdi]
 100ec02:	test   bx,bx
 100ec05:	je     0x100ed09
 100ec0b:	mov    r8d,DWORD PTR [r9+0x20]
 100ec0f:	mov    edx,r8d
 100ec12:	and    edx,r12d
 100ec15:	cmp    dx,bx
 100ec18:	jne    0x100ed09
 100ec1e:	or     r8d,r12d
 100ec21:	inc    esi
 100ec23:	add    rdi,0x8
 100ec27:	mov    DWORD PTR [r9+0x20],r8d
 100ec2b:	jmp    0x100ebb0
 100ec2d:	mov    rcx,QWORD PTR [rdi]
 100ec30:	movzx  edx,WORD PTR [rcx+0x20]
 100ec34:	mov    r9,QWORD PTR [rcx+0x28]
 100ec38:	test   edx,edx
 100ec3a:	je     0x100ed09
 100ec40:	mov    r10d,edx
 100ec43:	test   bx,bx
 100ec46:	je     0x100ec5c
 100ec48:	mov    r8d,DWORD PTR [r9]
 100ec4b:	mov    edx,r8d
 100ec4e:	and    edx,r12d
 100ec51:	cmp    dx,bx
 100ec54:	jne    0x100ec5c
 100ec56:	or     r8d,r12d
 100ec59:	mov    DWORD PTR [r9],r8d
 100ec5c:	add    r9,0x38
 100ec60:	dec    r10
 100ec63:	jne    0x100ec43
 100ec65:	inc    esi
 100ec67:	add    rdi,0x8
 100ec6b:	jmp    0x100ebb0
 100ec70:	mov    r11,QWORD PTR [rdi]
 100ec73:	movzx  ecx,WORD PTR [r11+0x22]
 100ec78:	mov    r9,QWORD PTR [r11+0x38]
 100ec7c:	test   ecx,ecx
 100ec7e:	je     0x100eca5
 100ec80:	mov    r10d,ecx
 100ec83:	test   bx,bx
 100ec86:	je     0x100ec9c
 100ec88:	mov    r8d,DWORD PTR [r9]
 100ec8b:	mov    edx,r8d
 100ec8e:	and    edx,r12d
 100ec91:	cmp    dx,bx
 100ec94:	jne    0x100ec9c
 100ec96:	or     r8d,r12d
 100ec99:	mov    DWORD PTR [r9],r8d
 100ec9c:	add    r9,0x38
 100eca0:	dec    r10
 100eca3:	jne    0x100ec83
 100eca5:	movzx  ecx,WORD PTR [r11+0x20]
 100ecaa:	mov    r9,QWORD PTR [r11+0x30]
 100ecae:	test   ecx,ecx
 100ecb0:	je     0x100ecd7
 100ecb2:	mov    r10d,ecx
 100ecb5:	test   bx,bx
 100ecb8:	je     0x100ecce
 100ecba:	mov    r8d,DWORD PTR [r9]
 100ecbd:	mov    edx,r8d
 100ecc0:	and    edx,r12d
 100ecc3:	cmp    dx,bx
 100ecc6:	jne    0x100ecce
 100ecc8:	or     r8d,r12d
 100eccb:	mov    DWORD PTR [r9],r8d
 100ecce:	add    r9,0x28
 100ecd2:	dec    r10
 100ecd5:	jne    0x100ecb5
 100ecd7:	movzx  ecx,WORD PTR [r11+0x24]
 100ecdc:	mov    r9,QWORD PTR [r11+0x40]
 100ece0:	test   ecx,ecx
 100ece2:	je     0x100ed09
 100ece4:	mov    r10d,ecx
 100ece7:	test   bx,bx
 100ecea:	je     0x100ed00
 100ecec:	mov    r8d,DWORD PTR [r9]
 100ecef:	mov    edx,r8d
 100ecf2:	and    edx,r12d
 100ecf5:	cmp    dx,bx
 100ecf8:	jne    0x100ed00
 100ecfa:	or     r8d,r12d
 100ecfd:	mov    DWORD PTR [r9],r8d
 100ed00:	add    r9,0x28
 100ed04:	dec    r10
 100ed07:	jne    0x100ece7
 100ed09:	inc    esi
 100ed0b:	add    rdi,0x8
 100ed0f:	jmp    0x100ebb0
 100ed14:	inc    ebp
 100ed16:	add    r15,0x8
 100ed1a:	cmp    ebp,0x8
 100ed1d:	jb     0x100eba0
 100ed23:	mov    rcx,QWORD PTR [r14+0x230]
 100ed2a:	test   rcx,rcx
 100ed2d:	je     0x100ed40
 100ed2f:	call   QWORD PTR [rip+0x1d903]        # 0x102c638
 100ed35:	mov    QWORD PTR [r14+0x230],0x0
 100ed40:	mov    rcx,QWORD PTR [r14+0x228]
 100ed47:	test   rcx,rcx
 100ed4a:	je     0x100ed6e
 100ed4c:	call   QWORD PTR [rip+0xffffffffffff24ae]        # 0x1001200
 100ed52:	mov    rax,QWORD PTR [rip+0xffffffffffff4677]        # 0x10033d0
 100ed59:	mov    QWORD PTR [r14+0x220],rax
 100ed60:	mov    rax,QWORD PTR [rip+0xffffffffffff4671]        # 0x10033d8
 100ed67:	mov    QWORD PTR [r14+0x228],rax
 100ed6e:	mov    rcx,QWORD PTR [r14+0x240]
 100ed75:	test   rcx,rcx
 100ed78:	je     0x100ed96
 100ed7a:	call   QWORD PTR [rip+0xffffffffffff2480]        # 0x1001200
 100ed80:	mov    QWORD PTR [r14+0x240],0x0
 100ed8b:	mov    QWORD PTR [r14+0x238],0x0
 100ed96:	mov    rbx,QWORD PTR [rsp+0x40]
 100ed9b:	mov    rbp,QWORD PTR [rsp+0x48]
 100eda0:	mov    rsi,QWORD PTR [rsp+0x50]
 100eda5:	mov    rdi,QWORD PTR [rsp+0x58]
 100edaa:	add    rsp,0x20
 100edae:	pop    r15
 100edb0:	pop    r14
 100edb2:	pop    r12
 100edb4:	ret    
 100edb5:	int3   
 100edb6:	int3   
 100edb7:	int3   
 100edb8:	int3   
 100edb9:	int3   
 100edba:	int3   
 100edbb:	int3   
 100edbc:	int3   
 100edbd:	int3   
 100edbe:	int3   
 100edbf:	int3   
 100edc0:	mov    rax,QWORD PTR [rcx+0x8]
 100edc4:	ret    
 100edc5:	int3   
 100edc6:	int3   
 100edc7:	int3   
 100edc8:	int3   
 100edc9:	int3   
 100edca:	int3   
 100edcb:	int3   
 100edcc:	int3   
 100edcd:	int3   
 100edce:	int3   
 100edcf:	int3   
 100edd0:	mov    QWORD PTR [rsp+0x8],rbx
 100edd5:	mov    QWORD PTR [rsp+0x10],rbp
 100edda:	mov    QWORD PTR [rsp+0x18],rsi
 100eddf:	mov    QWORD PTR [rsp+0x20],rdi
 100ede4:	push   r14
 100ede6:	sub    rsp,0x20
 100edea:	mov    rax,QWORD PTR [rdx+0x30]
 100edee:	xor    ebp,ebp
 100edf0:	mov    r14,rcx
 100edf3:	mov    rdi,QWORD PTR [rax+0x28]
 100edf7:	mov    rbx,rdx
 100edfa:	lea    esi,[rbp+0x1]
 100edfd:	mov    rcx,QWORD PTR [rdi]
 100ee00:	mov    rax,rcx
 100ee03:	test   rcx,rcx
 100ee06:	je     0x100ee1d
 100ee08:	add    rdx,0x38
 100ee0c:	nop    DWORD PTR [rax+0x0]
 100ee10:	cmp    rax,rdx
 100ee13:	je     0x100ee4e
 100ee15:	mov    rax,QWORD PTR [rax]
 100ee18:	test   rax,rax
 100ee1b:	jne    0x100ee10
 100ee1d:	mov    rax,QWORD PTR [r14]
 100ee20:	test   rcx,rcx
 100ee23:	mov    r8d,ebp
 100ee26:	mov    rdx,rbx
 100ee29:	mov    rcx,r14
 100ee2c:	sete   r8b
 100ee30:	call   QWORD PTR [rax+0x40]
 100ee33:	test   eax,eax
 100ee35:	je     0x100ee4e
 100ee37:	mov    rcx,rbx
 100ee3a:	call   0x100f320
 100ee3f:	mov    rax,QWORD PTR [rdi]
 100ee42:	lea    r11,[rbx+0x38]
 100ee46:	mov    QWORD PTR [r11],rax
 100ee49:	mov    ebp,esi
 100ee4b:	mov    QWORD PTR [rdi],r11
 100ee4e:	mov    rax,QWORD PTR [rbx+0x30]
 100ee52:	mov    edx,DWORD PTR [rax+0x4]
 100ee55:	shr    edx,0xa
 100ee58:	and    edx,0x3ffff
 100ee5e:	mov    ecx,edx
 100ee60:	and    ecx,0x1f
 100ee63:	shl    esi,cl
 100ee65:	mov    rcx,QWORD PTR [r14+0x10]
 100ee69:	shr    rdx,0x5
 100ee6d:	lock or DWORD PTR [rcx+rdx*4],esi
 100ee71:	mov    rbx,QWORD PTR [rsp+0x30]
 100ee76:	mov    rsi,QWORD PTR [rsp+0x40]
 100ee7b:	mov    rdi,QWORD PTR [rsp+0x48]
 100ee80:	mov    eax,ebp
 100ee82:	mov    rbp,QWORD PTR [rsp+0x38]
 100ee87:	add    rsp,0x20
 100ee8b:	pop    r14
 100ee8d:	ret    
 100ee8e:	int3   
 100ee8f:	int3   
 100ee90:	int3   
 100ee91:	int3   
 100ee92:	int3   
 100ee93:	int3   
 100ee94:	int3   
 100ee95:	int3   
 100ee96:	int3   
 100ee97:	int3   
 100ee98:	int3   
 100ee99:	int3   
 100ee9a:	int3   
 100ee9b:	int3   
 100ee9c:	int3   
 100ee9d:	int3   
 100ee9e:	int3   
 100ee9f:	int3   
 100eea0:	mov    r11,QWORD PTR [rdx+0x30]
 100eea4:	mov    r9,rcx
 100eea7:	mov    r10,rdx
 100eeaa:	mov    ecx,DWORD PTR [r11+0x4]
 100eeae:	mov    edx,0x1
 100eeb3:	shr    ecx,0xa
 100eeb6:	and    ecx,0x3ffff
 100eebc:	mov    eax,ecx
 100eebe:	and    ecx,0x1f
 100eec1:	shr    eax,0x5
 100eec4:	shl    edx,cl
 100eec6:	mov    ecx,eax
 100eec8:	mov    rax,QWORD PTR [r9+0x10]
 100eecc:	test   DWORD PTR [rax+rcx*4],edx
 100eecf:	je     0x100eeee
 100eed1:	mov    rax,QWORD PTR [r11+0x28]
 100eed5:	mov    rax,QWORD PTR [rax]
 100eed8:	test   rax,rax
 100eedb:	je     0x100eeee
 100eedd:	lea    rcx,[r10+0x38]
 100eee1:	cmp    rax,rcx
 100eee4:	je     0x100eef9
 100eee6:	mov    rax,QWORD PTR [rax]
 100eee9:	test   rax,rax
 100eeec:	jne    0x100eee1
 100eeee:	xor    eax,eax
 100eef0:	mov    DWORD PTR [r8],eax
 100eef3:	mov    eax,0x1
 100eef8:	ret    
 100eef9:	mov    eax,0x1
 100eefe:	mov    DWORD PTR [r8],eax
 100ef01:	ret    
 100ef02:	int3   
 100ef03:	int3   
 100ef04:	int3   
 100ef05:	int3   
 100ef06:	int3   
 100ef07:	int3   
 100ef08:	int3   
 100ef09:	int3   
 100ef0a:	int3   
 100ef0b:	int3   
 100ef0c:	int3   
 100ef0d:	int3   
 100ef0e:	int3   
 100ef0f:	int3   
 100ef10:	mov    QWORD PTR [rsp+0x8],rbx
 100ef15:	mov    QWORD PTR [rsp+0x10],rsi
 100ef1a:	mov    QWORD PTR [rsp+0x18],rdi
 100ef1f:	push   r14
 100ef21:	sub    rsp,0x20
 100ef25:	mov    rax,QWORD PTR [rdx+0x30]
 100ef29:	xor    ebx,ebx
 100ef2b:	mov    rdi,rdx
 100ef2e:	mov    rsi,QWORD PTR [rax+0x28]
 100ef32:	mov    r14,rcx
 100ef35:	mov    r8,QWORD PTR [rsi]
 100ef38:	mov    r9,r8
 100ef3b:	test   r8,r8
 100ef3e:	je     0x100ef51
 100ef40:	lea    r10,[rdx+0x38]
 100ef44:	cmp    r9,r10
 100ef47:	je     0x100ef69
 100ef49:	mov    r9,QWORD PTR [r9]
 100ef4c:	test   r9,r9
 100ef4f:	jne    0x100ef44
 100ef51:	mov    eax,ebx
 100ef53:	mov    rbx,QWORD PTR [rsp+0x30]
 100ef58:	mov    rsi,QWORD PTR [rsp+0x38]
 100ef5d:	mov    rdi,QWORD PTR [rsp+0x40]
 100ef62:	add    rsp,0x20
 100ef66:	pop    r14
 100ef68:	ret    
 100ef69:	mov    rcx,rsi
 100ef6c:	test   r8,r8
 100ef6f:	je     0x100ef89
 100ef71:	cmp    r8,r10
 100ef74:	je     0x100ef83
 100ef76:	mov    rcx,r8
 100ef79:	mov    r8,QWORD PTR [r8]
 100ef7c:	test   r8,r8
 100ef7f:	jne    0x100ef71
 100ef81:	jmp    0x100ef89
 100ef83:	mov    rax,QWORD PTR [r8]
 100ef86:	mov    QWORD PTR [rcx],rax
 100ef89:	mov    rcx,rdx
 100ef8c:	call   0x100f6f0
 100ef91:	cmp    QWORD PTR [rsi],rbx
 100ef94:	mov    r11,QWORD PTR [r14]
 100ef97:	sete   bl
 100ef9a:	mov    rdx,rdi
 100ef9d:	mov    rcx,r14
 100efa0:	mov    r8d,ebx
 100efa3:	call   QWORD PTR [r11+0x48]
 100efa7:	cmp    QWORD PTR [rsi],0x0
 100efab:	jne    0x100efe4
 100efad:	mov    rcx,QWORD PTR [rdi+0x30]
 100efb1:	call   0x100f390
 100efb6:	mov    r11,QWORD PTR [rdi+0x30]
 100efba:	mov    r8d,0x1
 100efc0:	mov    ecx,DWORD PTR [r11+0x4]
 100efc4:	shr    ecx,0xa
 100efc7:	and    ecx,0x3ffff
 100efcd:	mov    edx,ecx
 100efcf:	and    ecx,0x1f
 100efd2:	shr    edx,0x5
 100efd5:	shl    r8d,cl
 100efd8:	mov    rcx,QWORD PTR [r14+0x10]
 100efdc:	not    r8d
 100efdf:	lock and DWORD PTR [rcx+rdx*4],r8d
 100efe4:	mov    eax,0x1
 100efe9:	jmp    0x100ef53
 100efee:	int3   
 100efef:	int3   
 100eff0:	int3   
 100eff1:	int3   
 100eff2:	int3   
 100eff3:	int3   
 100eff4:	int3   
 100eff5:	int3   
 100eff6:	int3   
 100eff7:	int3   
 100eff8:	int3   
 100eff9:	int3   
 100effa:	int3   
 100effb:	int3   
 100effc:	int3   
 100effd:	int3   
 100effe:	int3   
 100efff:	int3   
 100f000:	rex push rdi
 100f002:	push   r14
 100f004:	push   r15
 100f006:	sub    rsp,0x40
 100f00a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100f013:	mov    QWORD PTR [rsp+0x60],rbx
 100f018:	mov    QWORD PTR [rsp+0x68],rbp
 100f01d:	mov    QWORD PTR [rsp+0x70],rsi
 100f022:	mov    rbp,r9
 100f025:	mov    r14d,r8d
 100f028:	mov    r15d,edx
 100f02b:	mov    rsi,rcx
 100f02e:	mov    rdx,QWORD PTR [rcx+0x230]
 100f035:	lea    rcx,[rsp+0x28]
 100f03a:	call   0x10168f0
 100f03f:	nop
 100f040:	xor    ebx,ebx
 100f042:	mov    edi,ebx
 100f044:	or     edx,0xffffffff
 100f047:	lea    rcx,[rsp+0x28]
 100f04c:	call   0x1016910
 100f051:	test   eax,eax
 100f053:	jne    0x100f079
 100f055:	mov    edx,r15d
 100f058:	mov    rcx,rsi
 100f05b:	call   0x100f1b0
 100f060:	mov    r9d,DWORD PTR [rsp+0x80]
 100f068:	mov    r8,rbp
 100f06b:	mov    edx,r14d
 100f06e:	mov    rcx,rax
 100f071:	call   QWORD PTR [rsi+0x238]
 100f077:	mov    edi,eax
 100f079:	test   edi,edi
 100f07b:	setg   bl
 100f07e:	lea    rcx,[rsp+0x28]
 100f083:	call   0x1016940
 100f088:	mov    eax,ebx
 100f08a:	mov    rbx,QWORD PTR [rsp+0x60]
 100f08f:	mov    rbp,QWORD PTR [rsp+0x68]
 100f094:	mov    rsi,QWORD PTR [rsp+0x70]
 100f099:	add    rsp,0x40
 100f09d:	pop    r15
 100f09f:	pop    r14
 100f0a1:	pop    rdi
 100f0a2:	ret    
 100f0a3:	int3   
 100f0a4:	int3   
 100f0a5:	int3   
 100f0a6:	int3   
 100f0a7:	int3   
 100f0a8:	int3   
 100f0a9:	int3   
 100f0aa:	int3   
 100f0ab:	int3   
 100f0ac:	int3   
 100f0ad:	int3   
 100f0ae:	int3   
 100f0af:	int3   
 100f0b0:	mov    eax,0x1
 100f0b5:	ret    
 100f0b6:	int3   
 100f0b7:	int3   
 100f0b8:	int3   
 100f0b9:	int3   
 100f0ba:	int3   
 100f0bb:	int3   
 100f0bc:	int3   
 100f0bd:	int3   
 100f0be:	int3   
 100f0bf:	int3   
 100f0c0:	mov    eax,0x1
 100f0c5:	ret    
 100f0c6:	int3   
 100f0c7:	int3   
 100f0c8:	int3   
 100f0c9:	int3   
 100f0ca:	int3   
 100f0cb:	int3   
 100f0cc:	int3   
 100f0cd:	int3   
 100f0ce:	int3   
 100f0cf:	int3   
 100f0d0:	mov    QWORD PTR [rsp+0x18],rbx
 100f0d5:	mov    QWORD PTR [rsp+0x20],rbp
 100f0da:	push   rdi
 100f0db:	sub    rsp,0x20
 100f0df:	lea    rbp,[rcx+0x18]
 100f0e3:	mov    rbx,rcx
 100f0e6:	xor    edx,edx
 100f0e8:	mov    r8d,0x208
 100f0ee:	mov    rcx,rbp
 100f0f1:	xor    edi,edi
 100f0f3:	call   0x100c10e
 100f0f8:	mov    r11,QWORD PTR [rbx+0x8]
 100f0fc:	mov    r8d,0x104
 100f102:	mov    rcx,QWORD PTR [r11]
 100f105:	mov    rdx,rbp
 100f108:	mov    rcx,QWORD PTR [rcx+0x48]
 100f10c:	call   QWORD PTR [rip+0xffffffffffff206e]        # 0x1001180
 100f112:	lea    rcx,[rip+0xffffffffffff2f4f]        # 0x1002068
 100f119:	xor    r8d,r8d
 100f11c:	xor    edx,edx
 100f11e:	call   QWORD PTR [rip+0xffffffffffff20cc]        # 0x10011f0
 100f124:	mov    rbx,rax
 100f127:	test   rax,rax
 100f12a:	je     0x100f193
 100f12c:	lea    rdx,[rip+0xffffffffffff2f4d]        # 0x1002080
 100f133:	mov    rcx,rax
 100f136:	mov    QWORD PTR [rsp+0x30],rsi
 100f13b:	mov    QWORD PTR [rsp+0x38],r14
 100f140:	call   QWORD PTR [rip+0xffffffffffff214a]        # 0x1001290
 100f146:	lea    rdx,[rip+0xffffffffffff2f4b]        # 0x1002098
 100f14d:	mov    rcx,rbx
 100f150:	mov    r14,rax
 100f153:	call   QWORD PTR [rip+0xffffffffffff2137]        # 0x1001290
 100f159:	mov    rsi,rax
 100f15c:	test   r14,r14
 100f15f:	je     0x100f180
 100f161:	test   rax,rax
 100f164:	je     0x100f180
 100f166:	mov    rcx,rbp
 100f169:	call   r14
 100f16c:	mov    edi,eax
 100f16e:	test   eax,eax
 100f170:	je     0x100f180
 100f172:	lea    rdx,[rip+0xffffffffffff2f2f]        # 0x10020a8
 100f179:	mov    rcx,rbp
 100f17c:	call   rsi
 100f17e:	mov    edi,eax
 100f180:	mov    rcx,rbx
 100f183:	call   QWORD PTR [rip+0xffffffffffff2077]        # 0x1001200
 100f189:	mov    r14,QWORD PTR [rsp+0x38]
 100f18e:	mov    rsi,QWORD PTR [rsp+0x30]
 100f193:	mov    rbx,QWORD PTR [rsp+0x40]
 100f198:	mov    rbp,QWORD PTR [rsp+0x48]
 100f19d:	mov    eax,edi
 100f19f:	add    rsp,0x20
 100f1a3:	pop    rdi
 100f1a4:	ret    
 100f1a5:	int3   
 100f1a6:	int3   
 100f1a7:	int3   
 100f1a8:	int3   
 100f1a9:	int3   
 100f1aa:	int3   
 100f1ab:	int3   
 100f1ac:	int3   
 100f1ad:	int3   
 100f1ae:	int3   
 100f1af:	int3   
 100f1b0:	rex push rbx
 100f1b2:	push   rsi
 100f1b3:	push   rdi
 100f1b4:	sub    rsp,0x250
 100f1bb:	mov    rax,QWORD PTR [rip+0x1549e]        # 0x1024660
 100f1c2:	xor    rax,rsp
 100f1c5:	mov    QWORD PTR [rsp+0x240],rax
 100f1cd:	xor    edi,edi
 100f1cf:	mov    esi,edx
 100f1d1:	mov    rbx,rcx
 100f1d4:	cmp    DWORD PTR [rcx+0x220],edx
 100f1da:	jne    0x100f1e8
 100f1dc:	mov    rax,QWORD PTR [rcx+0x228]
 100f1e3:	jmp    0x100f2c1
 100f1e8:	mov    rcx,QWORD PTR [rcx+0x228]
 100f1ef:	mov    QWORD PTR [rsp+0x280],rbp
 100f1f7:	test   rcx,rcx
 100f1fa:	je     0x100f20f
 100f1fc:	call   QWORD PTR [rip+0xffffffffffff1ffe]        # 0x1001200
 100f202:	mov    DWORD PTR [rbx+0x220],edi
 100f208:	mov    QWORD PTR [rbx+0x228],rdi
 100f20f:	mov    rax,QWORD PTR [rbx+0x8]
 100f213:	mov    WORD PTR [rsp+0x30],di
 100f218:	lea    r9,[rbx+0x18]
 100f21c:	mov    rcx,QWORD PTR [rax]
 100f21f:	lea    r8,[rip+0xffffffffffff2e9a]        # 0x10020c0
 100f226:	mov    edx,0x104
 100f22b:	mov    rax,QWORD PTR [rcx+0x30]
 100f22f:	lea    rcx,[rsp+0x30]
 100f234:	mov    QWORD PTR [rsp+0x28],rax
 100f239:	mov    DWORD PTR [rsp+0x20],esi
 100f23d:	call   0x100ae30
 100f242:	test   eax,eax
 100f244:	js     0x100f25f
 100f246:	xor    edx,edx
 100f248:	lea    rcx,[rsp+0x30]
 100f24d:	lea    r8d,[rdx+0x22]
 100f251:	call   QWORD PTR [rip+0xffffffffffff1f99]        # 0x10011f0
 100f257:	mov    rdi,rax
 100f25a:	test   rax,rax
 100f25d:	jne    0x100f2a9
 100f25f:	mov    rax,QWORD PTR [rbx+0x8]
 100f263:	lea    r9,[rbx+0x18]
 100f267:	lea    r8,[rip+0xffffffffffff2e52]        # 0x10020c0
 100f26e:	mov    rcx,QWORD PTR [rax]
 100f271:	mov    edx,0x104
 100f276:	mov    rax,QWORD PTR [rcx+0x30]
 100f27a:	lea    rcx,[rsp+0x30]
 100f27f:	mov    QWORD PTR [rsp+0x28],rax
 100f284:	mov    DWORD PTR [rsp+0x20],0x409
 100f28c:	call   0x100ae30
 100f291:	test   eax,eax
 100f293:	js     0x100f2af
 100f295:	xor    edx,edx
 100f297:	lea    rcx,[rsp+0x30]
 100f29c:	lea    r8d,[rdx+0x22]
 100f2a0:	call   QWORD PTR [rip+0xffffffffffff1f4a]        # 0x10011f0
 100f2a6:	mov    rdi,rax
 100f2a9:	mov    DWORD PTR [rbx+0x220],esi
 100f2af:	mov    rbp,QWORD PTR [rsp+0x280]
 100f2b7:	mov    QWORD PTR [rbx+0x228],rdi
 100f2be:	mov    rax,rdi
 100f2c1:	mov    rcx,QWORD PTR [rsp+0x240]
 100f2c9:	xor    rcx,rsp
 100f2cc:	call   0x100c0d0
 100f2d1:	add    rsp,0x250
 100f2d8:	pop    rdi
 100f2d9:	pop    rsi
 100f2da:	pop    rbx
 100f2db:	ret    
 100f2dc:	int3   
 100f2dd:	int3   
 100f2de:	int3   
 100f2df:	int3   
 100f2e0:	int3   
 100f2e1:	int3   
 100f2e2:	int3   
 100f2e3:	int3   
 100f2e4:	int3   
 100f2e5:	int3   
 100f2e6:	int3   
 100f2e7:	int3   
 100f2e8:	int3   
 100f2e9:	int3   
 100f2ea:	int3   
 100f2eb:	int3   
 100f2ec:	int3   
 100f2ed:	int3   
 100f2ee:	int3   
 100f2ef:	int3   
 100f2f0:	rex push rbx
 100f2f2:	sub    rsp,0x20
 100f2f6:	lea    rax,[rip+0xffffffffffff2ba3]        # 0x1001ea0
 100f2fd:	mov    rbx,rcx
 100f300:	mov    QWORD PTR [rcx],rax
 100f303:	test   dl,0x1
 100f306:	je     0x100f30d
 100f308:	call   0x100bccc
 100f30d:	mov    rax,rbx
 100f310:	add    rsp,0x20
 100f314:	pop    rbx
 100f315:	ret    
 100f316:	int3   
 100f317:	int3   
 100f318:	int3   
 100f319:	int3   
 100f31a:	int3   
 100f31b:	int3   
 100f31c:	int3   
 100f31d:	int3   
 100f31e:	int3   
 100f31f:	int3   
 100f320:	mov    r8,QWORD PTR [rcx+0x30]
 100f324:	xor    eax,eax
 100f326:	mov    r10,rcx
 100f329:	cmp    ax,WORD PTR [r8+0x22]
 100f32e:	jae    0x100f37c
 100f330:	mov    r8,QWORD PTR [r8+0x38]
 100f334:	mov    r9,QWORD PTR [r10+0x10]
 100f338:	movzx  edx,ax
 100f33b:	imul   rdx,rdx,0x38
 100f33f:	add    r8,rdx
 100f342:	add    r9,rdx
 100f345:	mov    edx,DWORD PTR [r8+0x20]
 100f349:	test   edx,edx
 100f34b:	je     0x100f35b
 100f34d:	dec    edx
 100f34f:	jne    0x100f36e
 100f351:	mov    rcx,QWORD PTR [r9+0x10]
 100f355:	or     QWORD PTR [r8+0x10],rcx
 100f359:	jmp    0x100f36e
 100f35b:	mov    rdx,QWORD PTR [r9+0x10]
 100f35f:	mov    rcx,QWORD PTR [r8+0x10]
 100f363:	cmp    rcx,rdx
 100f366:	cmova  rdx,rcx
 100f36a:	mov    QWORD PTR [r8+0x10],rdx
 100f36e:	mov    r8,QWORD PTR [r10+0x30]
 100f372:	inc    ax
 100f375:	cmp    ax,WORD PTR [r8+0x22]
 100f37a:	jb     0x100f330
 100f37c:	repz ret 
 100f37e:	int3   
 100f37f:	int3   
 100f380:	int3   
 100f381:	int3   
 100f382:	int3   
 100f383:	int3   
 100f384:	int3   
 100f385:	int3   
 100f386:	int3   
 100f387:	int3   
 100f388:	int3   
 100f389:	int3   
 100f38a:	int3   
 100f38b:	int3   
 100f38c:	int3   
 100f38d:	int3   
 100f38e:	int3   
 100f38f:	int3   
 100f390:	xor    r10d,r10d
 100f393:	movzx  edx,r10w
 100f397:	cmp    r10w,WORD PTR [rcx+0x22]
 100f39c:	jae    0x100f3c6
 100f39e:	xchg   ax,ax
 100f3a0:	movzx  eax,dx
 100f3a3:	imul   rax,rax,0x38
 100f3a7:	add    rax,QWORD PTR [rcx+0x38]
 100f3ab:	mov    r8d,DWORD PTR [rax+0x20]
 100f3af:	test   r8d,r8d
 100f3b2:	je     0x100f3b9
 100f3b4:	dec    r8d
 100f3b7:	jne    0x100f3bd
 100f3b9:	mov    QWORD PTR [rax+0x10],r10
 100f3bd:	inc    dx
 100f3c0:	cmp    dx,WORD PTR [rcx+0x22]
 100f3c4:	jb     0x100f3a0
 100f3c6:	repz ret 
 100f3c8:	int3   
 100f3c9:	int3   
 100f3ca:	int3   
 100f3cb:	int3   
 100f3cc:	int3   
 100f3cd:	int3   
 100f3ce:	int3   
 100f3cf:	int3   
 100f3d0:	rex push rbp
 100f3d2:	push   rsi
 100f3d3:	push   rdi
 100f3d4:	push   r14
 100f3d6:	push   r15
 100f3d8:	sub    rsp,0x30
 100f3dc:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100f3e5:	mov    QWORD PTR [rsp+0x78],rbx
 100f3ea:	xor    ebp,ebp
 100f3ec:	mov    esi,ebp
 100f3ee:	lea    rax,[rip+0xffffffffffff0c0b]        # 0x1000000
 100f3f5:	mov    QWORD PTR [rip+0x1cfbc],rax        # 0x102c3b8
 100f3fc:	call   0x10162e0
 100f401:	test   eax,eax
 100f403:	je     0x100f5bc
 100f409:	cmp    QWORD PTR [rip+0x1cfb0],rsi        # 0x102c3c0
 100f410:	jne    0x100f5bc
 100f416:	cmp    QWORD PTR [rip+0x1cfab],rsi        # 0x102c3c8
 100f41d:	jne    0x100f5bc
 100f423:	cmp    QWORD PTR [rip+0x1cfa6],rsi        # 0x102c3d0
 100f42a:	jne    0x100f5bc
 100f430:	mov    QWORD PTR [rsp+0x68],rbp
 100f435:	mov    QWORD PTR [rsp+0x70],rbp
 100f43a:	mov    QWORD PTR [rsp+0x60],rbp
 100f43f:	lea    rcx,[rsp+0x68]
 100f444:	call   QWORD PTR [rip+0x1d1e6]        # 0x102c630
 100f44a:	test   eax,eax
 100f44c:	je     0x100f568
 100f452:	mov    rax,QWORD PTR [rsp+0x68]
 100f457:	mov    QWORD PTR [rip+0x1cf62],rax        # 0x102c3c0
 100f45e:	lea    rcx,[rsp+0x70]
 100f463:	call   QWORD PTR [rip+0x1d1c7]        # 0x102c630
 100f469:	test   eax,eax
 100f46b:	je     0x100f568
 100f471:	lea    rcx,[rsp+0x60]
 100f476:	call   QWORD PTR [rip+0x1d1b4]        # 0x102c630
 100f47c:	test   eax,eax
 100f47e:	je     0x100f568
 100f484:	mov    rcx,QWORD PTR [rsp+0x60]
 100f489:	mov    QWORD PTR [rip+0x1cf40],rcx        # 0x102c3d0
 100f490:	lea    esi,[rbp+0x1]
 100f493:	mov    eax,DWORD PTR [rip+0x1513f]        # 0x10245d8
 100f499:	mov    DWORD PTR [rip+0x1cf11],eax        # 0x102c3b0
 100f49f:	mov    ebx,ebp
 100f4a1:	mov    r14d,ebp
 100f4a4:	test   eax,eax
 100f4a6:	je     0x100f538
 100f4ac:	mov    edi,ebp
 100f4ae:	lea    r15,[rip+0x16efb]        # 0x10263b0
 100f4b5:	data16 data16 nop WORD PTR [rax+rax*1+0x0]
 100f4c0:	mov    rdx,QWORD PTR [rip+0xffffffffffff2ca1]        # 0x1002168
 100f4c7:	mov    rax,QWORD PTR [rdx+rdi*1]
 100f4cb:	mov    QWORD PTR [rdi+r15*1],rax
 100f4cf:	mov    rax,QWORD PTR [rdx+rdi*1+0x8]
 100f4d4:	mov    QWORD PTR [rdi+r15*1+0x8],rax
 100f4d9:	mov    rax,QWORD PTR [rdx+rdi*1+0x10]
 100f4de:	mov    QWORD PTR [rdi+r15*1+0x10],rax
 100f4e3:	mov    rcx,QWORD PTR [rdi+r15*1]
 100f4e7:	call   0x100fc80
 100f4ec:	mov    esi,eax
 100f4ee:	test   eax,eax
 100f4f0:	je     0x100f50a
 100f4f2:	inc    ebx
 100f4f4:	inc    r14
 100f4f7:	add    rdi,0x18
 100f4fb:	cmp    ebx,DWORD PTR [rip+0x150d7]        # 0x10245d8
 100f501:	jb     0x100f4c0
 100f503:	mov    rcx,QWORD PTR [rsp+0x60]
 100f508:	jmp    0x100f538
 100f50a:	test   ebx,ebx
 100f50c:	je     0x100f568
 100f50e:	lea    rax,[r14+r14*2]
 100f512:	lea    rdi,[r15+rax*8]
 100f516:	mov    r14d,0x3ff
 100f51c:	nop    DWORD PTR [rax+0x0]
 100f520:	mov    rax,QWORD PTR [rdi]
 100f523:	movzx  ecx,WORD PTR [rax+0x4]
 100f527:	and    cx,r14w
 100f52b:	call   QWORD PTR [rip+0x1d237]        # 0x102c768
 100f531:	dec    rbx
 100f534:	jne    0x100f520
 100f536:	jmp    0x100f568
 100f538:	mov    rax,QWORD PTR [rsp+0x68]
 100f53d:	mov    QWORD PTR [rsp+0x68],rbp
 100f542:	mov    QWORD PTR [rip+0x1ce77],rax        # 0x102c3c0
 100f549:	mov    rax,QWORD PTR [rsp+0x70]
 100f54e:	mov    QWORD PTR [rsp+0x70],rbp
 100f553:	mov    QWORD PTR [rip+0x1ce6e],rax        # 0x102c3c8
 100f55a:	mov    QWORD PTR [rsp+0x60],rbp
 100f55f:	mov    QWORD PTR [rip+0x1ce6a],rcx        # 0x102c3d0
 100f566:	jmp    0x100f57d
 100f568:	mov    QWORD PTR [rip+0x1ce51],rbp        # 0x102c3c0
 100f56f:	mov    QWORD PTR [rip+0x1ce52],rbp        # 0x102c3c8
 100f576:	mov    QWORD PTR [rip+0x1ce53],rbp        # 0x102c3d0
 100f57d:	mov    rcx,QWORD PTR [rsp+0x60]
 100f582:	test   rcx,rcx
 100f585:	je     0x100f58d
 100f587:	call   QWORD PTR [rip+0x1d0ab]        # 0x102c638
 100f58d:	mov    QWORD PTR [rsp+0x60],rbp
 100f592:	mov    rcx,QWORD PTR [rsp+0x70]
 100f597:	test   rcx,rcx
 100f59a:	je     0x100f5a2
 100f59c:	call   QWORD PTR [rip+0x1d096]        # 0x102c638
 100f5a2:	mov    QWORD PTR [rsp+0x70],rbp
 100f5a7:	mov    rcx,QWORD PTR [rsp+0x68]
 100f5ac:	test   rcx,rcx
 100f5af:	je     0x100f5b7
 100f5b1:	call   QWORD PTR [rip+0x1d081]        # 0x102c638
 100f5b7:	mov    QWORD PTR [rsp+0x68],rbp
 100f5bc:	mov    eax,esi
 100f5be:	mov    rbx,QWORD PTR [rsp+0x78]
 100f5c3:	add    rsp,0x30
 100f5c7:	pop    r15
 100f5c9:	pop    r14
 100f5cb:	pop    rdi
 100f5cc:	pop    rsi
 100f5cd:	pop    rbp
 100f5ce:	ret    
 100f5cf:	int3   
 100f5d0:	int3   
 100f5d1:	int3   
 100f5d2:	int3   
 100f5d3:	int3   
 100f5d4:	int3   
 100f5d5:	int3   
 100f5d6:	int3   
 100f5d7:	int3   
 100f5d8:	int3   
 100f5d9:	int3   
 100f5da:	int3   
 100f5db:	int3   
 100f5dc:	int3   
 100f5dd:	int3   
 100f5de:	int3   
 100f5df:	int3   
 100f5e0:	rex push rbp
 100f5e2:	sub    rsp,0x20
 100f5e6:	xor    ebp,ebp
 100f5e8:	cmp    QWORD PTR [rip+0x1cdd1],rbp        # 0x102c3c0
 100f5ef:	je     0x100f6e2
 100f5f5:	cmp    QWORD PTR [rip+0x1cdcc],rbp        # 0x102c3c8
 100f5fc:	je     0x100f6e2
 100f602:	mov    QWORD PTR [rsp+0x30],rbx
 100f607:	mov    QWORD PTR [rsp+0x38],rsi
 100f60c:	mov    QWORD PTR [rsp+0x40],rdi
 100f611:	mov    QWORD PTR [rsp+0x48],r14
 100f616:	lea    edi,[rbp+0x1]
 100f619:	mov    esi,ebp
 100f61b:	mov    r14d,0x3ff
 100f621:	lea    rbx,[rip+0x16d98]        # 0x10263c0
 100f628:	cmp    esi,DWORD PTR [rip+0x1cd82]        # 0x102c3b0
 100f62e:	jae    0x100f674
 100f630:	cmp    DWORD PTR [rbx],ebp
 100f632:	je     0x100f64e
 100f634:	mov    rax,QWORD PTR [rbx-0x10]
 100f638:	movzx  ecx,WORD PTR [rax+0x4]
 100f63c:	and    cx,r14w
 100f640:	call   QWORD PTR [rip+0x1d122]        # 0x102c768
 100f646:	mov    edi,eax
 100f648:	test   eax,eax
 100f64a:	je     0x100f64e
 100f64c:	mov    DWORD PTR [rbx],ebp
 100f64e:	inc    esi
 100f650:	add    rbx,0x18
 100f654:	test   edi,edi
 100f656:	jne    0x100f628
 100f658:	mov    rsi,QWORD PTR [rsp+0x38]
 100f65d:	mov    rbx,QWORD PTR [rsp+0x30]
 100f662:	mov    r14,QWORD PTR [rsp+0x48]
 100f667:	mov    eax,edi
 100f669:	mov    rdi,QWORD PTR [rsp+0x40]
 100f66e:	add    rsp,0x20
 100f672:	pop    rbp
 100f673:	ret    
 100f674:	test   edi,edi
 100f676:	je     0x100f658
 100f678:	lea    rcx,[rip+0x16d31]        # 0x10263b0
 100f67f:	xor    edx,edx
 100f681:	mov    r8d,0x6000
 100f687:	call   0x100c10e
 100f68c:	mov    rcx,QWORD PTR [rip+0x1cd3d]        # 0x102c3d0
 100f693:	mov    DWORD PTR [rip+0x1cd17],ebp        # 0x102c3b0
 100f699:	test   rcx,rcx
 100f69c:	je     0x100f6ab
 100f69e:	call   QWORD PTR [rip+0x1cf94]        # 0x102c638
 100f6a4:	mov    QWORD PTR [rip+0x1cd25],rbp        # 0x102c3d0
 100f6ab:	mov    rcx,QWORD PTR [rip+0x1cd16]        # 0x102c3c8
 100f6b2:	test   rcx,rcx
 100f6b5:	je     0x100f6c4
 100f6b7:	call   QWORD PTR [rip+0x1cf7b]        # 0x102c638
 100f6bd:	mov    QWORD PTR [rip+0x1cd04],rbp        # 0x102c3c8
 100f6c4:	mov    rcx,QWORD PTR [rip+0x1ccf5]        # 0x102c3c0
 100f6cb:	test   rcx,rcx
 100f6ce:	je     0x100f658
 100f6d0:	call   QWORD PTR [rip+0x1cf62]        # 0x102c638
 100f6d6:	mov    QWORD PTR [rip+0x1cce3],rbp        # 0x102c3c0
 100f6dd:	jmp    0x100f658
 100f6e2:	mov    eax,ebp
 100f6e4:	add    rsp,0x20
 100f6e8:	pop    rbp
 100f6e9:	ret    
 100f6ea:	int3   
 100f6eb:	int3   
 100f6ec:	int3   
 100f6ed:	int3   
 100f6ee:	int3   
 100f6ef:	int3   
 100f6f0:	mov    QWORD PTR [rsp+0x10],rbx
 100f6f5:	mov    QWORD PTR [rsp+0x18],rbp
 100f6fa:	push   rsi
 100f6fb:	sub    rsp,0x20
 100f6ff:	mov    rsi,rcx
 100f702:	call   QWORD PTR [rip+0x1cfd8]        # 0x102c6e0
 100f708:	xor    ecx,ecx
 100f70a:	mov    rbp,rax
 100f70d:	call   QWORD PTR [rip+0x1cfd5]        # 0x102c6e8
 100f713:	mov    rbx,rax
 100f716:	test   rax,rax
 100f719:	je     0x100f778
 100f71b:	mov    QWORD PTR [rsp+0x30],rdi
 100f720:	cmp    rbx,rbp
 100f723:	je     0x100f762
 100f725:	mov    edi,0x64
 100f72a:	nop    WORD PTR [rax+rax*1+0x0]
 100f730:	mov    eax,DWORD PTR [rbx+0x10]
 100f733:	test   eax,eax
 100f735:	jne    0x100f748
 100f737:	mov    rax,QWORD PTR [rbx]
 100f73a:	cmp    rax,rsi
 100f73d:	je     0x100f748
 100f73f:	mov    rax,QWORD PTR [rbx+0x8]
 100f743:	cmp    rax,rsi
 100f746:	jne    0x100f762
 100f748:	mov    ecx,edi
 100f74a:	call   QWORD PTR [rip+0xffffffffffff1b48]        # 0x1001298
 100f750:	lea    r11d,[rdi+rdi*1]
 100f754:	mov    edi,0x3e8
 100f759:	cmp    r11d,edi
 100f75c:	cmovb  edi,r11d
 100f760:	jmp    0x100f730
 100f762:	mov    rcx,rbx
 100f765:	call   QWORD PTR [rip+0x1cf7d]        # 0x102c6e8
 100f76b:	mov    rbx,rax
 100f76e:	test   rax,rax
 100f771:	jne    0x100f720
 100f773:	mov    rdi,QWORD PTR [rsp+0x30]
 100f778:	mov    rbx,QWORD PTR [rsp+0x38]
 100f77d:	mov    rbp,QWORD PTR [rsp+0x40]
 100f782:	add    rsp,0x20
 100f786:	pop    rsi
 100f787:	ret    
 100f788:	int3   
 100f789:	int3   
 100f78a:	int3   
 100f78b:	int3   
 100f78c:	int3   
 100f78d:	int3   
 100f78e:	int3   
 100f78f:	int3   
 100f790:	rex push rdi
 100f792:	push   r14
 100f794:	push   r15
 100f796:	sub    rsp,0x40
 100f79a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100f7a3:	mov    QWORD PTR [rsp+0x60],rbx
 100f7a8:	mov    QWORD PTR [rsp+0x68],rbp
 100f7ad:	mov    QWORD PTR [rsp+0x70],rsi
 100f7b2:	mov    r14,r8
 100f7b5:	movzx  r15d,dx
 100f7b9:	mov    rsi,rcx
 100f7bc:	xor    ebp,ebp
 100f7be:	mov    rdx,QWORD PTR [rip+0x1cbfb]        # 0x102c3c0
 100f7c5:	lea    rcx,[rsp+0x28]
 100f7ca:	call   0x10168f0
 100f7cf:	nop
 100f7d0:	or     edx,0xffffffff
 100f7d3:	lea    rcx,[rsp+0x28]
 100f7d8:	call   0x1016910
 100f7dd:	mov    r11d,ebp
 100f7e0:	mov    eax,DWORD PTR [rip+0x1cbca]        # 0x102c3b0
 100f7e6:	test   eax,eax
 100f7e8:	je     0x100f83f
 100f7ea:	lea    rbx,[rip+0x16bbf]        # 0x10263b0
 100f7f1:	cmp    QWORD PTR [rbx],rsi
 100f7f4:	je     0x100f804
 100f7f6:	inc    r11d
 100f7f9:	add    rbx,0x18
 100f7fd:	cmp    r11d,eax
 100f800:	jb     0x100f7f1
 100f802:	jmp    0x100f83f
 100f804:	cmp    DWORD PTR [rbx+0x10],0x0
 100f808:	jne    0x100f83f
 100f80a:	call   QWORD PTR [rbx+0x8]
 100f80d:	mov    rdi,rax
 100f810:	test   rax,rax
 100f813:	je     0x100f83f
 100f815:	mov    rax,QWORD PTR [rax]
 100f818:	movzx  r8d,r15w
 100f81c:	mov    rdx,rsi
 100f81f:	mov    rcx,rdi
 100f822:	call   QWORD PTR [rax]
 100f824:	test   eax,eax
 100f826:	je     0x100f835
 100f828:	mov    QWORD PTR [r14],rdi
 100f82b:	mov    ebp,0x1
 100f830:	mov    DWORD PTR [rbx+0x10],ebp
 100f833:	jmp    0x100f83f
 100f835:	mov    rdx,QWORD PTR [rdi]
 100f838:	mov    rcx,rdi
 100f83b:	call   QWORD PTR [rdx+0x8]
 100f83e:	nop
 100f83f:	lea    rcx,[rsp+0x28]
 100f844:	call   0x1016940
 100f849:	mov    eax,ebp
 100f84b:	mov    rbx,QWORD PTR [rsp+0x60]
 100f850:	mov    rbp,QWORD PTR [rsp+0x68]
 100f855:	mov    rsi,QWORD PTR [rsp+0x70]
 100f85a:	add    rsp,0x40
 100f85e:	pop    r15
 100f860:	pop    r14
 100f862:	pop    rdi
 100f863:	ret    
 100f864:	int3   
 100f865:	int3   
 100f866:	int3   
 100f867:	int3   
 100f868:	int3   
 100f869:	int3   
 100f86a:	int3   
 100f86b:	int3   
 100f86c:	int3   
 100f86d:	int3   
 100f86e:	int3   
 100f86f:	int3   
 100f870:	rex push rdi
 100f872:	sub    rsp,0x40
 100f876:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100f87f:	mov    QWORD PTR [rsp+0x50],rbx
 100f884:	mov    QWORD PTR [rsp+0x58],rbp
 100f889:	mov    QWORD PTR [rsp+0x60],rsi
 100f88e:	mov    rsi,rcx
 100f891:	xor    ebp,ebp
 100f893:	mov    rdx,QWORD PTR [rip+0x1cb26]        # 0x102c3c0
 100f89a:	lea    rcx,[rsp+0x28]
 100f89f:	call   0x10168f0
 100f8a4:	nop
 100f8a5:	or     edx,0xffffffff
 100f8a8:	lea    rcx,[rsp+0x28]
 100f8ad:	call   0x1016910
 100f8b2:	mov    ebx,ebp
 100f8b4:	cmp    DWORD PTR [rip+0x1caf6],ebx        # 0x102c3b0
 100f8ba:	jbe    0x100f8f5
 100f8bc:	lea    rdi,[rip+0x16aed]        # 0x10263b0
 100f8c3:	mov    rax,QWORD PTR [rsi]
 100f8c6:	mov    rcx,rsi
 100f8c9:	call   QWORD PTR [rax+0x10]
 100f8cc:	mov    rcx,QWORD PTR [rax]
 100f8cf:	cmp    QWORD PTR [rdi],rcx
 100f8d2:	je     0x100f8e4
 100f8d4:	inc    ebx
 100f8d6:	add    rdi,0x18
 100f8da:	cmp    ebx,DWORD PTR [rip+0x1cad0]        # 0x102c3b0
 100f8e0:	jb     0x100f8c3
 100f8e2:	jmp    0x100f8f5
 100f8e4:	mov    DWORD PTR [rdi+0x10],ebp
 100f8e7:	mov    rax,QWORD PTR [rsi]
 100f8ea:	mov    rcx,rsi
 100f8ed:	call   QWORD PTR [rax+0x8]
 100f8f0:	mov    ebp,0x1
 100f8f5:	lea    rcx,[rsp+0x28]
 100f8fa:	call   0x1016940
 100f8ff:	mov    eax,ebp
 100f901:	mov    rbx,QWORD PTR [rsp+0x50]
 100f906:	mov    rbp,QWORD PTR [rsp+0x58]
 100f90b:	mov    rsi,QWORD PTR [rsp+0x60]
 100f910:	add    rsp,0x40
 100f914:	pop    rdi
 100f915:	ret    
 100f916:	int3   
 100f917:	int3   
 100f918:	int3   
 100f919:	int3   
 100f91a:	int3   
 100f91b:	int3   
 100f91c:	int3   
 100f91d:	int3   
 100f91e:	int3   
 100f91f:	int3   
 100f920:	rex push rbx
 100f922:	sub    rsp,0x20
 100f926:	mov    rax,QWORD PTR [rcx]
 100f929:	mov    rbx,rdx
 100f92c:	call   QWORD PTR [rax+0x10]
 100f92f:	xor    ecx,ecx
 100f931:	test   rax,rax
 100f934:	mov    QWORD PTR [rbx],rax
 100f937:	setne  cl
 100f93a:	mov    eax,ecx
 100f93c:	add    rsp,0x20
 100f940:	pop    rbx
 100f941:	ret    
 100f942:	int3   
 100f943:	int3   
 100f944:	int3   
 100f945:	int3   
 100f946:	int3   
 100f947:	int3   
 100f948:	int3   
 100f949:	int3   
 100f94a:	int3   
 100f94b:	int3   
 100f94c:	int3   
 100f94d:	int3   
 100f94e:	int3   
 100f94f:	int3   
 100f950:	rex push rdi
 100f952:	sub    rsp,0x40
 100f956:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100f95f:	mov    QWORD PTR [rsp+0x50],rbx
 100f964:	mov    rbx,rdx
 100f967:	mov    rdi,rcx
 100f96a:	mov    rdx,QWORD PTR [rip+0x1ca5f]        # 0x102c3d0
 100f971:	lea    rcx,[rsp+0x28]
 100f976:	call   0x10168f0
 100f97b:	nop
 100f97c:	or     edx,0xffffffff
 100f97f:	lea    rcx,[rsp+0x28]
 100f984:	call   0x1016910
 100f989:	mov    r11,QWORD PTR [rdi]
 100f98c:	mov    rdx,rbx
 100f98f:	mov    rcx,rdi
 100f992:	call   QWORD PTR [r11+0x18]
 100f996:	mov    ebx,eax
 100f998:	lea    rcx,[rsp+0x28]
 100f99d:	call   0x1016940
 100f9a2:	mov    eax,ebx
 100f9a4:	mov    rbx,QWORD PTR [rsp+0x50]
 100f9a9:	add    rsp,0x40
 100f9ad:	pop    rdi
 100f9ae:	ret    
 100f9af:	int3   
 100f9b0:	int3   
 100f9b1:	int3   
 100f9b2:	int3   
 100f9b3:	int3   
 100f9b4:	int3   
 100f9b5:	int3   
 100f9b6:	int3   
 100f9b7:	int3   
 100f9b8:	int3   
 100f9b9:	int3   
 100f9ba:	int3   
 100f9bb:	int3   
 100f9bc:	int3   
 100f9bd:	int3   
 100f9be:	int3   
 100f9bf:	int3   
 100f9c0:	rex push rdi
 100f9c2:	sub    rsp,0x40
 100f9c6:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100f9cf:	mov    QWORD PTR [rsp+0x50],rbx
 100f9d4:	mov    QWORD PTR [rsp+0x58],rsi
 100f9d9:	mov    rbx,r8
 100f9dc:	mov    rdi,rdx
 100f9df:	mov    rsi,rcx
 100f9e2:	mov    rdx,QWORD PTR [rip+0x1c9e7]        # 0x102c3d0
 100f9e9:	lea    rcx,[rsp+0x28]
 100f9ee:	call   0x10168f0
 100f9f3:	nop
 100f9f4:	or     edx,0xffffffff
 100f9f7:	lea    rcx,[rsp+0x28]
 100f9fc:	call   0x1016910
 100fa01:	mov    r11,QWORD PTR [rsi]
 100fa04:	mov    r8,rbx
 100fa07:	mov    rdx,rdi
 100fa0a:	mov    rcx,rsi
 100fa0d:	call   QWORD PTR [r11+0x20]
 100fa11:	mov    ebx,eax
 100fa13:	lea    rcx,[rsp+0x28]
 100fa18:	call   0x1016940
 100fa1d:	mov    eax,ebx
 100fa1f:	mov    rbx,QWORD PTR [rsp+0x50]
 100fa24:	mov    rsi,QWORD PTR [rsp+0x58]
 100fa29:	add    rsp,0x40
 100fa2d:	pop    rdi
 100fa2e:	ret    
 100fa2f:	int3   
 100fa30:	int3   
 100fa31:	int3   
 100fa32:	int3   
 100fa33:	int3   
 100fa34:	int3   
 100fa35:	int3   
 100fa36:	int3   
 100fa37:	int3   
 100fa38:	int3   
 100fa39:	int3   
 100fa3a:	int3   
 100fa3b:	int3   
 100fa3c:	int3   
 100fa3d:	int3   
 100fa3e:	int3   
 100fa3f:	int3   
 100fa40:	rex push rdi
 100fa42:	sub    rsp,0x40
 100fa46:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100fa4f:	mov    QWORD PTR [rsp+0x50],rbx
 100fa54:	mov    rbx,rdx
 100fa57:	mov    rdi,rcx
 100fa5a:	mov    rdx,QWORD PTR [rip+0x1c96f]        # 0x102c3d0
 100fa61:	lea    rcx,[rsp+0x28]
 100fa66:	call   0x10168f0
 100fa6b:	nop
 100fa6c:	or     edx,0xffffffff
 100fa6f:	lea    rcx,[rsp+0x28]
 100fa74:	call   0x1016910
 100fa79:	mov    r11,QWORD PTR [rdi]
 100fa7c:	mov    rdx,rbx
 100fa7f:	mov    rcx,rdi
 100fa82:	call   QWORD PTR [r11+0x28]
 100fa86:	mov    ebx,eax
 100fa88:	lea    rcx,[rsp+0x28]
 100fa8d:	call   0x1016940
 100fa92:	mov    eax,ebx
 100fa94:	mov    rbx,QWORD PTR [rsp+0x50]
 100fa99:	add    rsp,0x40
 100fa9d:	pop    rdi
 100fa9e:	ret    
 100fa9f:	int3   
 100faa0:	int3   
 100faa1:	int3   
 100faa2:	int3   
 100faa3:	int3   
 100faa4:	int3   
 100faa5:	int3   
 100faa6:	int3   
 100faa7:	int3   
 100faa8:	int3   
 100faa9:	int3   
 100faaa:	int3   
 100faab:	int3   
 100faac:	int3   
 100faad:	int3   
 100faae:	int3   
 100faaf:	int3   
 100fab0:	sub    rsp,0x38
 100fab4:	mov    eax,DWORD PTR [rsp+0x60]
 100fab8:	mov    r10,QWORD PTR [rcx]
 100fabb:	mov    DWORD PTR [rsp+0x20],eax
 100fabf:	call   QWORD PTR [r10+0x30]
 100fac3:	add    rsp,0x38
 100fac7:	ret    
 100fac8:	int3   
 100fac9:	int3   
 100faca:	int3   
 100facb:	int3   
 100facc:	int3   
 100facd:	int3   
 100face:	int3   
 100facf:	int3   
 100fad0:	push   r14
 100fad2:	sub    rsp,0x40
 100fad6:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100fadf:	mov    QWORD PTR [rsp+0x50],rbx
 100fae4:	mov    QWORD PTR [rsp+0x58],rbp
 100fae9:	mov    QWORD PTR [rsp+0x60],rsi
 100faee:	mov    QWORD PTR [rsp+0x68],rdi
 100faf3:	mov    rsi,r9
 100faf6:	movzx  ebp,r8w
 100fafa:	mov    r14,rdx
 100fafd:	mov    rbx,rcx
 100fb00:	xor    edi,edi
 100fb02:	mov    rdx,QWORD PTR [rip+0x1c8bf]        # 0x102c3c8
 100fb09:	lea    rcx,[rsp+0x28]
 100fb0e:	call   0x10168f0
 100fb13:	nop
 100fb14:	or     edx,0xffffffff
 100fb17:	lea    rcx,[rsp+0x28]
 100fb1c:	call   0x1016910
 100fb21:	mov    r11,QWORD PTR [rbx+0x30]
 100fb25:	test   r11,r11
 100fb28:	je     0x100fb50
 100fb2a:	mov    r9,QWORD PTR [rsp+0x78]
 100fb2f:	mov    r8,rsi
 100fb32:	movzx  edx,bp
 100fb35:	mov    rcx,r14
 100fb38:	call   r11
 100fb3b:	mov    r11,rax
 100fb3e:	test   rax,rax
 100fb41:	je     0x100fb50
 100fb43:	mov    rax,QWORD PTR [rsp+0x70]
 100fb48:	mov    QWORD PTR [rax],r11
 100fb4b:	mov    edi,0x1
 100fb50:	lea    rcx,[rsp+0x28]
 100fb55:	call   0x1016940
 100fb5a:	mov    eax,edi
 100fb5c:	mov    rbx,QWORD PTR [rsp+0x50]
 100fb61:	mov    rbp,QWORD PTR [rsp+0x58]
 100fb66:	mov    rsi,QWORD PTR [rsp+0x60]
 100fb6b:	mov    rdi,QWORD PTR [rsp+0x68]
 100fb70:	add    rsp,0x40
 100fb74:	pop    r14
 100fb76:	ret    
 100fb77:	int3   
 100fb78:	int3   
 100fb79:	int3   
 100fb7a:	int3   
 100fb7b:	int3   
 100fb7c:	int3   
 100fb7d:	int3   
 100fb7e:	int3   
 100fb7f:	int3   
 100fb80:	rex push rbx
 100fb82:	sub    rsp,0x40
 100fb86:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100fb8f:	mov    rbx,rcx
 100fb92:	mov    rdx,QWORD PTR [rip+0x1c82f]        # 0x102c3c8
 100fb99:	lea    rcx,[rsp+0x28]
 100fb9e:	call   0x10168f0
 100fba3:	nop
 100fba4:	or     edx,0xffffffff
 100fba7:	lea    rcx,[rsp+0x28]
 100fbac:	call   0x1016910
 100fbb1:	mov    r11,QWORD PTR [rbx]
 100fbb4:	mov    rcx,rbx
 100fbb7:	call   QWORD PTR [r11+0x28]
 100fbbb:	nop
 100fbbc:	lea    rcx,[rsp+0x28]
 100fbc1:	call   0x1016940
 100fbc6:	mov    eax,0x1
 100fbcb:	add    rsp,0x40
 100fbcf:	pop    rbx
 100fbd0:	ret    
 100fbd1:	int3   
 100fbd2:	int3   
 100fbd3:	int3   
 100fbd4:	int3   
 100fbd5:	int3   
 100fbd6:	int3   
 100fbd7:	int3   
 100fbd8:	int3   
 100fbd9:	int3   
 100fbda:	int3   
 100fbdb:	int3   
 100fbdc:	int3   
 100fbdd:	int3   
 100fbde:	int3   
 100fbdf:	int3   
 100fbe0:	mov    rax,QWORD PTR [rcx]
 100fbe3:	rex.W jmp QWORD PTR [rax]
 100fbe6:	int3   
 100fbe7:	int3   
 100fbe8:	int3   
 100fbe9:	int3   
 100fbea:	int3   
 100fbeb:	int3   
 100fbec:	int3   
 100fbed:	int3   
 100fbee:	int3   
 100fbef:	int3   
 100fbf0:	mov    rax,QWORD PTR [rcx]
 100fbf3:	rex.W jmp QWORD PTR [rax+0x8]
 100fbf7:	int3   
 100fbf8:	int3   
 100fbf9:	int3   
 100fbfa:	int3   
 100fbfb:	int3   
 100fbfc:	int3   
 100fbfd:	int3   
 100fbfe:	int3   
 100fbff:	int3   
 100fc00:	mov    rax,QWORD PTR [rcx]
 100fc03:	rex.W jmp QWORD PTR [rax+0x10]
 100fc07:	int3   
 100fc08:	int3   
 100fc09:	int3   
 100fc0a:	int3   
 100fc0b:	int3   
 100fc0c:	int3   
 100fc0d:	int3   
 100fc0e:	int3   
 100fc0f:	int3   
 100fc10:	sub    rsp,0x38
 100fc14:	mov    rax,QWORD PTR [rsp+0x60]
 100fc19:	mov    r10,QWORD PTR [rcx]
 100fc1c:	mov    QWORD PTR [rsp+0x20],rax
 100fc21:	call   QWORD PTR [r10+0x18]
 100fc25:	add    rsp,0x38
 100fc29:	ret    
 100fc2a:	int3   
 100fc2b:	int3   
 100fc2c:	int3   
 100fc2d:	int3   
 100fc2e:	int3   
 100fc2f:	int3   
 100fc30:	rex.W jmp QWORD PTR [rip+0x1caf9]        # 0x102c730
 100fc37:	int3   
 100fc38:	int3   
 100fc39:	int3   
 100fc3a:	int3   
 100fc3b:	int3   
 100fc3c:	int3   
 100fc3d:	int3   
 100fc3e:	int3   
 100fc3f:	int3   
 100fc40:	mov    rax,QWORD PTR [rcx]
 100fc43:	rex.W jmp QWORD PTR [rax]
 100fc46:	int3   
 100fc47:	int3   
 100fc48:	int3   
 100fc49:	int3   
 100fc4a:	int3   
 100fc4b:	int3   
 100fc4c:	int3   
 100fc4d:	int3   
 100fc4e:	int3   
 100fc4f:	int3   
 100fc50:	mov    rax,QWORD PTR [rcx]
 100fc53:	rex.W jmp QWORD PTR [rax+0x8]
 100fc57:	int3   
 100fc58:	int3   
 100fc59:	int3   
 100fc5a:	int3   
 100fc5b:	int3   
 100fc5c:	int3   
 100fc5d:	int3   
 100fc5e:	int3   
 100fc5f:	int3   
 100fc60:	mov    rax,QWORD PTR [rcx]
 100fc63:	rex.W jmp QWORD PTR [rax+0x10]
 100fc67:	int3   
 100fc68:	int3   
 100fc69:	int3   
 100fc6a:	int3   
 100fc6b:	int3   
 100fc6c:	int3   
 100fc6d:	int3   
 100fc6e:	int3   
 100fc6f:	int3   
 100fc70:	mov    rax,QWORD PTR [rcx]
 100fc73:	rex.W jmp QWORD PTR [rax+0x20]
 100fc77:	int3   
 100fc78:	int3   
 100fc79:	int3   
 100fc7a:	int3   
 100fc7b:	int3   
 100fc7c:	int3   
 100fc7d:	int3   
 100fc7e:	int3   
 100fc7f:	int3   
 100fc80:	mov    eax,DWORD PTR [rip+0x149ca]        # 0x1024650
 100fc86:	lea    r8,[rip+0x14953]        # 0x10245e0
 100fc8d:	lea    rdx,[rip+0x148dc]        # 0x1024570
 100fc94:	mov    DWORD PTR [rcx+0x38],eax
 100fc97:	mov    eax,DWORD PTR [rip+0x149b7]        # 0x1024654
 100fc9d:	mov    DWORD PTR [rcx+0x3c],eax
 100fca0:	mov    eax,DWORD PTR [rip+0x149b2]        # 0x1024658
 100fca6:	mov    DWORD PTR [rcx+0x40],eax
 100fca9:	mov    eax,DWORD PTR [rip+0x149ad]        # 0x102465c
 100fcaf:	mov    DWORD PTR [rcx+0x44],eax
 100fcb2:	mov    rax,QWORD PTR [rip+0x1c6ff]        # 0x102c3b8
 100fcb9:	mov    QWORD PTR [rcx+0x48],rax
 100fcbd:	rex.W jmp QWORD PTR [rip+0x1ca9c]        # 0x102c760
 100fcc4:	int3   
 100fcc5:	int3   
 100fcc6:	int3   
 100fcc7:	int3   
 100fcc8:	int3   
 100fcc9:	int3   
 100fcca:	int3   
 100fccb:	int3   
 100fccc:	int3   
 100fccd:	int3   
 100fcce:	int3   
 100fccf:	int3   
 100fcd0:	rex push rbx
 100fcd2:	sub    rsp,0x20
 100fcd6:	mov    rbx,rcx
 100fcd9:	mov    rcx,QWORD PTR [rcx]
 100fcdc:	test   rcx,rcx
 100fcdf:	je     0x100fce7
 100fce1:	call   QWORD PTR [rip+0x1c951]        # 0x102c638
 100fce7:	mov    QWORD PTR [rbx],0x0
 100fcee:	add    rsp,0x20
 100fcf2:	pop    rbx
 100fcf3:	ret    
 100fcf4:	int3   
 100fcf5:	int3   
 100fcf6:	int3   
 100fcf7:	int3   
 100fcf8:	int3   
 100fcf9:	int3   
 100fcfa:	int3   
 100fcfb:	int3   
 100fcfc:	int3   
 100fcfd:	int3   
 100fcfe:	int3   
 100fcff:	int3   
 100fd00:	xor    r10d,r10d
 100fd03:	mov    r9,r8
 100fd06:	mov    eax,r10d
 100fd09:	test   rdx,rdx
 100fd0c:	je     0x100fd17
 100fd0e:	cmp    rdx,0x7fffffff
 100fd15:	jbe    0x100fd1c
 100fd17:	mov    eax,0x80070057
 100fd1c:	test   eax,eax
 100fd1e:	js     0x100fd70
 100fd20:	test   rdx,rdx
 100fd23:	je     0x100fd61
 100fd25:	mov    r8d,0x7ffffffe
 100fd2b:	sub    r8,rdx
 100fd2e:	sub    r9,rcx
 100fd31:	lea    rax,[r8+rdx*1]
 100fd35:	test   rax,rax
 100fd38:	je     0x100fd5c
 100fd3a:	movzx  eax,BYTE PTR [r9+rcx*1]
 100fd3f:	test   al,al
 100fd41:	je     0x100fd5c
 100fd43:	mov    BYTE PTR [rcx],al
 100fd45:	inc    rcx
 100fd48:	dec    rdx
 100fd4b:	jne    0x100fd31
 100fd4d:	dec    rcx
 100fd50:	mov    r10d,0x8007007a
 100fd56:	mov    BYTE PTR [rcx],dl
 100fd58:	mov    eax,r10d
 100fd5b:	ret    
 100fd5c:	test   rdx,rdx
 100fd5f:	jne    0x100fd6a
 100fd61:	dec    rcx
 100fd64:	mov    r10d,0x8007007a
 100fd6a:	mov    BYTE PTR [rcx],0x0
 100fd6d:	mov    eax,r10d
 100fd70:	repz ret 
 100fd72:	int3   
 100fd73:	int3   
 100fd74:	int3   
 100fd75:	int3   
 100fd76:	int3   
 100fd77:	int3   
 100fd78:	int3   
 100fd79:	int3   
 100fd7a:	int3   
 100fd7b:	int3   
 100fd7c:	int3   
 100fd7d:	int3   
 100fd7e:	int3   
 100fd7f:	int3   
 100fd80:	sub    rsp,0x28
 100fd84:	mov    rcx,QWORD PTR [rcx]
 100fd87:	test   rcx,rcx
 100fd8a:	je     0x100fd92
 100fd8c:	call   QWORD PTR [rip+0xffffffffffff17de]        # 0x1001570
 100fd92:	add    rsp,0x28
 100fd96:	ret    
 100fd97:	int3   
 100fd98:	int3   
 100fd99:	int3   
 100fd9a:	int3   
 100fd9b:	int3   
 100fd9c:	int3   
 100fd9d:	int3   
 100fd9e:	int3   
 100fd9f:	int3   
 100fda0:	rex.W jmp QWORD PTR [rip+0xffffffffffff17e9]        # 0x1001590
 100fda7:	int3   
 100fda8:	int3   
 100fda9:	int3   
 100fdaa:	int3   
 100fdab:	int3   
 100fdac:	int3   
 100fdad:	int3   
 100fdae:	int3   
 100fdaf:	int3   
 100fdb0:	mov    rcx,QWORD PTR [rcx]
 100fdb3:	jmp    0x100bccc
 100fdb8:	int3   
 100fdb9:	int3   
 100fdba:	int3   
 100fdbb:	int3   
 100fdbc:	int3   
 100fdbd:	int3   
 100fdbe:	int3   
 100fdbf:	int3   
 100fdc0:	mov    QWORD PTR [rsp+0x8],rcx
 100fdc5:	push   rbx
 100fdc6:	sub    rsp,0x30
 100fdca:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100fdd3:	mov    rbx,rcx
 100fdd6:	mov    rcx,QWORD PTR [rcx]
 100fdd9:	test   rcx,rcx
 100fddc:	je     0x100fde4
 100fdde:	call   QWORD PTR [rip+0x1c81c]        # 0x102c600
 100fde4:	mov    QWORD PTR [rbx],0x0
 100fdeb:	mov    rcx,QWORD PTR [rbx]
 100fdee:	add    rsp,0x30
 100fdf2:	pop    rbx
 100fdf3:	jmp    0x100bccc
 100fdf8:	int3   
 100fdf9:	int3   
 100fdfa:	int3   
 100fdfb:	int3   
 100fdfc:	int3   
 100fdfd:	int3   
 100fdfe:	int3   
 100fdff:	int3   
 100fe00:	mov    DWORD PTR [rcx],0x8000dead
 100fe06:	ret    
 100fe07:	int3   
 100fe08:	int3   
 100fe09:	int3   
 100fe0a:	int3   
 100fe0b:	int3   
 100fe0c:	int3   
 100fe0d:	int3   
 100fe0e:	int3   
 100fe0f:	int3   
 100fe10:	sub    rsp,0x28
 100fe14:	mov    rcx,QWORD PTR [rcx]
 100fe17:	test   rcx,rcx
 100fe1a:	je     0x100fe47
 100fe1c:	mov    r8d,DWORD PTR [rcx-0x8]
 100fe20:	mov    QWORD PTR [rsp+0x20],rbx
 100fe25:	lea    rbx,[rcx-0x8]
 100fe29:	lea    r9,[rip+0x3a40]        # 0x1013870
 100fe30:	mov    edx,0x8
 100fe35:	call   0x101760c
 100fe3a:	mov    rcx,rbx
 100fe3d:	call   0x100bccc
 100fe42:	mov    rbx,QWORD PTR [rsp+0x20]
 100fe47:	add    rsp,0x28
 100fe4b:	ret    
 100fe4c:	int3   
 100fe4d:	int3   
 100fe4e:	int3   
 100fe4f:	int3   
 100fe50:	int3   
 100fe51:	int3   
 100fe52:	int3   
 100fe53:	int3   
 100fe54:	int3   
 100fe55:	int3   
 100fe56:	int3   
 100fe57:	int3   
 100fe58:	int3   
 100fe59:	int3   
 100fe5a:	int3   
 100fe5b:	int3   
 100fe5c:	int3   
 100fe5d:	int3   
 100fe5e:	int3   
 100fe5f:	int3   
 100fe60:	mov    QWORD PTR [rsp+0x8],rcx
 100fe65:	push   rbx
 100fe66:	sub    rsp,0x30
 100fe6a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100fe73:	mov    rbx,rcx
 100fe76:	mov    rcx,QWORD PTR [rcx]
 100fe79:	call   0x1015db0
 100fe7e:	mov    QWORD PTR [rbx],0x0
 100fe85:	mov    rcx,QWORD PTR [rbx]
 100fe88:	test   rcx,rcx
 100fe8b:	je     0x100fead
 100fe8d:	lea    rbx,[rcx-0x8]
 100fe91:	lea    r9,[rip+0x39d8]        # 0x1013870
 100fe98:	mov    r8d,DWORD PTR [rbx]
 100fe9b:	mov    edx,0x8
 100fea0:	call   0x101760c
 100fea5:	mov    rcx,rbx
 100fea8:	call   0x100bccc
 100fead:	add    rsp,0x30
 100feb1:	pop    rbx
 100feb2:	ret    
 100feb3:	int3   
 100feb4:	int3   
 100feb5:	int3   
 100feb6:	int3   
 100feb7:	int3   
 100feb8:	int3   
 100feb9:	int3   
 100feba:	int3   
 100febb:	int3   
 100febc:	int3   
 100febd:	int3   
 100febe:	int3   
 100febf:	int3   
 100fec0:	mov    QWORD PTR [rsp+0x8],rcx
 100fec5:	push   rdi
 100fec6:	sub    rsp,0x30
 100feca:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100fed3:	mov    QWORD PTR [rsp+0x50],rbx
 100fed8:	mov    rdi,rcx
 100fedb:	lea    rbx,[rcx+0x28]
 100fedf:	mov    QWORD PTR [rsp+0x48],rbx
 100fee4:	mov    rcx,QWORD PTR [rbx]
 100fee7:	call   0x1015db0
 100feec:	mov    QWORD PTR [rbx],0x0
 100fef3:	mov    rcx,QWORD PTR [rbx]
 100fef6:	test   rcx,rcx
 100fef9:	je     0x100ff1e
 100fefb:	lea    rbx,[rcx-0x8]
 100feff:	lea    r9,[rip+0x396a]        # 0x1013870
 100ff06:	mov    r8d,DWORD PTR [rbx]
 100ff09:	mov    edx,0x8
 100ff0e:	call   0x101760c
 100ff13:	mov    rcx,rbx
 100ff16:	call   0x100bccc
 100ff1b:	nop
 100ff1c:	jmp    0x100ff1e
 100ff1e:	mov    DWORD PTR [rdi+0x8],0x8000dead
 100ff25:	mov    rbx,QWORD PTR [rsp+0x50]
 100ff2a:	add    rsp,0x30
 100ff2e:	pop    rdi
 100ff2f:	ret    
 100ff30:	int3   
 100ff31:	int3   
 100ff32:	int3   
 100ff33:	int3   
 100ff34:	int3   
 100ff35:	int3   
 100ff36:	int3   
 100ff37:	int3   
 100ff38:	int3   
 100ff39:	int3   
 100ff3a:	int3   
 100ff3b:	int3   
 100ff3c:	int3   
 100ff3d:	int3   
 100ff3e:	int3   
 100ff3f:	int3   
 100ff40:	mov    DWORD PTR [rcx],0x8000dead
 100ff46:	ret    
 100ff47:	int3   
 100ff48:	int3   
 100ff49:	int3   
 100ff4a:	int3   
 100ff4b:	int3   
 100ff4c:	int3   
 100ff4d:	int3   
 100ff4e:	int3   
 100ff4f:	int3   
 100ff50:	mov    QWORD PTR [rsp+0x8],rcx
 100ff55:	sub    rsp,0x18
 100ff59:	mov    QWORD PTR [rsp],0xfffffffffffffffe
 100ff61:	mov    DWORD PTR [rcx+0x8],0x8000dead
 100ff68:	add    rsp,0x18
 100ff6c:	ret    
 100ff6d:	int3   
 100ff6e:	int3   
 100ff6f:	int3   
 100ff70:	int3   
 100ff71:	int3   
 100ff72:	int3   
 100ff73:	int3   
 100ff74:	int3   
 100ff75:	int3   
 100ff76:	int3   
 100ff77:	int3   
 100ff78:	int3   
 100ff79:	int3   
 100ff7a:	int3   
 100ff7b:	int3   
 100ff7c:	int3   
 100ff7d:	int3   
 100ff7e:	int3   
 100ff7f:	int3   
 100ff80:	rex.W jmp QWORD PTR [rip+0xffffffffffff1609]        # 0x1001590
 100ff87:	int3   
 100ff88:	int3   
 100ff89:	int3   
 100ff8a:	int3   
 100ff8b:	int3   
 100ff8c:	int3   
 100ff8d:	int3   
 100ff8e:	int3   
 100ff8f:	int3   
 100ff90:	mov    QWORD PTR [rsp+0x8],rcx
 100ff95:	push   rbx
 100ff96:	sub    rsp,0x30
 100ff9a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100ffa3:	mov    rbx,rcx
 100ffa6:	call   0x1016bc0
 100ffab:	nop
 100ffac:	lea    rax,[rip+0xffffffffffff5035]        # 0x1004fe8
 100ffb3:	mov    QWORD PTR [rbx],rax
 100ffb6:	xor    eax,eax
 100ffb8:	mov    QWORD PTR [rbx+0x288],rax
 100ffbf:	mov    QWORD PTR [rbx+0x290],rax
 100ffc6:	mov    QWORD PTR [rbx+0x298],rax
 100ffcd:	mov    rax,rbx
 100ffd0:	add    rsp,0x30
 100ffd4:	pop    rbx
 100ffd5:	ret    
 100ffd6:	int3   
 100ffd7:	int3   
 100ffd8:	int3   
 100ffd9:	int3   
 100ffda:	int3   
 100ffdb:	int3   
 100ffdc:	int3   
 100ffdd:	int3   
 100ffde:	int3   
 100ffdf:	int3   
 100ffe0:	mov    QWORD PTR [rsp+0x8],rcx
 100ffe5:	push   rdi
 100ffe6:	sub    rsp,0x30
 100ffea:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 100fff3:	mov    QWORD PTR [rsp+0x48],rbx
 100fff8:	mov    QWORD PTR [rsp+0x50],rsi
 100fffd:	mov    rbx,rcx
 1010000:	lea    rax,[rip+0xffffffffffff4fe1]        # 0x1004fe8
 1010007:	mov    QWORD PTR [rcx],rax
 101000a:	mov    rcx,QWORD PTR [rcx+0x298]
 1010011:	xor    esi,esi
 1010013:	test   rcx,rcx
 1010016:	je     0x1010025
 1010018:	call   QWORD PTR [rip+0x1c512]        # 0x102c530
 101001e:	mov    QWORD PTR [rbx+0x298],rsi
 1010025:	cmp    QWORD PTR [rbx+0x290],rsi
 101002c:	je     0x1010064
 101002e:	xchg   ax,ax
 1010030:	mov    rcx,QWORD PTR [rbx+0x290]
 1010037:	cmp    QWORD PTR [rcx],rsi
 101003a:	je     0x1010064
 101003c:	mov    rdi,QWORD PTR [rcx]
 101003f:	mov    rax,QWORD PTR [rdi]
 1010042:	mov    QWORD PTR [rcx],rax
 1010045:	mov    QWORD PTR [rdi],rsi
 1010048:	mov    rcx,QWORD PTR [rdi+0x8]
 101004c:	mov    rax,QWORD PTR [rcx]
 101004f:	call   QWORD PTR [rax+0x10]
 1010052:	mov    rcx,rdi
 1010055:	call   QWORD PTR [rip+0x1c5a5]        # 0x102c600
 101005b:	cmp    QWORD PTR [rbx+0x290],rsi
 1010062:	jne    0x1010030
 1010064:	mov    rcx,QWORD PTR [rbx+0x290]
 101006b:	test   rcx,rcx
 101006e:	je     0x1010076
 1010070:	call   QWORD PTR [rip+0x1c58a]        # 0x102c600
 1010076:	mov    QWORD PTR [rbx+0x290],rsi
 101007d:	mov    rcx,QWORD PTR [rbx+0x288]
 1010084:	test   rcx,rcx
 1010087:	je     0x1010090
 1010089:	mov    rax,QWORD PTR [rcx]
 101008c:	call   QWORD PTR [rax+0x10]
 101008f:	nop
 1010090:	mov    rcx,rbx
 1010093:	mov    rbx,QWORD PTR [rsp+0x48]
 1010098:	mov    rsi,QWORD PTR [rsp+0x50]
 101009d:	add    rsp,0x30
 10100a1:	pop    rdi
 10100a2:	jmp    0x100fec0
 10100a7:	int3   
 10100a8:	int3   
 10100a9:	int3   
 10100aa:	int3   
 10100ab:	int3   
 10100ac:	int3   
 10100ad:	int3   
 10100ae:	int3   
 10100af:	int3   
 10100b0:	lea    rax,[rcx+0x38]
 10100b4:	ret    
 10100b5:	int3   
 10100b6:	int3   
 10100b7:	int3   
 10100b8:	int3   
 10100b9:	int3   
 10100ba:	int3   
 10100bb:	int3   
 10100bc:	int3   
 10100bd:	int3   
 10100be:	int3   
 10100bf:	int3   
 10100c0:	mov    rax,QWORD PTR [rcx]
 10100c3:	xor    edx,edx
 10100c5:	rex.W jmp QWORD PTR [rax+0x8]
 10100c9:	int3   
 10100ca:	int3   
 10100cb:	int3   
 10100cc:	int3   
 10100cd:	int3   
 10100ce:	int3   
 10100cf:	int3   
 10100d0:	rex push rbp
 10100d2:	push   rsi
 10100d3:	push   rdi
 10100d4:	push   r14
 10100d6:	push   r15
 10100d8:	mov    rbp,rsp
 10100db:	sub    rsp,0x40
 10100df:	mov    QWORD PTR [rbp-0x10],0xfffffffffffffffe
 10100e7:	mov    QWORD PTR [rsp+0x78],rbx
 10100ec:	mov    r14d,edx
 10100ef:	mov    rdi,rcx
 10100f2:	xor    r15d,r15d
 10100f5:	mov    ebx,r15d
 10100f8:	xor    edx,edx
 10100fa:	lea    rcx,[rbp+0x30]
 10100fe:	call   0x10166a0
 1010103:	nop
 1010104:	mov    DWORD PTR [rdi+0x34],r14d
 1010108:	lea    rcx,[rbp+0x30]
 101010c:	call   0x10166e0
 1010111:	mov    rdx,rax
 1010114:	lea    rcx,[rdi+0x38]
 1010118:	call   QWORD PTR [rip+0x1c37a]        # 0x102c498
 101011e:	test   eax,eax
 1010120:	je     0x10102f6
 1010126:	lea    rcx,[rbp+0x30]
 101012a:	call   0x10166d0
 101012f:	mov    rcx,rax
 1010132:	call   QWORD PTR [rip+0x1c380]        # 0x102c4b8
 1010138:	test   eax,eax
 101013a:	je     0x10102f6
 1010140:	mov    QWORD PTR [rbp+0x40],r15
 1010144:	mov    QWORD PTR [rbp-0x18],r15
 1010148:	mov    rcx,QWORD PTR [rdi+0x288]
 101014f:	mov    rax,QWORD PTR [rcx]
 1010152:	lea    r8,[rbp+0x40]
 1010156:	lea    rdx,[rip+0xffffffffffff512b]        # 0x1005288
 101015d:	call   QWORD PTR [rax+0x120]
 1010163:	test   eax,eax
 1010165:	js     0x10102d6
 101016b:	lea    ebx,[r15+0x1]
 101016f:	mov    rcx,QWORD PTR [rbp+0x40]
 1010173:	test   rcx,rcx
 1010176:	je     0x101020a
 101017c:	mov    esi,r14d
 101017f:	and    esi,0x4
 1010182:	je     0x10101b0
 1010184:	lea    edx,[rbx+0x7]
 1010187:	xor    ecx,ecx
 1010189:	call   QWORD PTR [rip+0x1c469]        # 0x102c5f8
 101018f:	test   rax,rax
 1010192:	je     0x1010199
 1010194:	mov    QWORD PTR [rax],r15
 1010197:	jmp    0x101019c
 1010199:	mov    rax,r15
 101019c:	mov    QWORD PTR [rdi+0x290],rax
 10101a3:	mov    rcx,QWORD PTR [rbp+0x40]
 10101a7:	nop    WORD PTR [rax+rax*1+0x0]
 10101b0:	mov    rax,QWORD PTR [rcx]
 10101b3:	lea    rdx,[rbp-0x18]
 10101b7:	call   QWORD PTR [rax+0x48]
 10101ba:	test   eax,eax
 10101bc:	js     0x10101ed
 10101be:	cmp    QWORD PTR [rbp-0x18],0x0
 10101c3:	je     0x10101ed
 10101c5:	lea    rcx,[rbp+0x30]
 10101c9:	call   0x10166d0
 10101ce:	mov    rdx,rax
 10101d1:	mov    r8,QWORD PTR [rbp-0x18]
 10101d5:	mov    rcx,rdi
 10101d8:	call   0x10106a0
 10101dd:	test   eax,eax
 10101df:	je     0x10101e8
 10101e1:	mov    ebx,0x1
 10101e6:	jmp    0x10101a3
 10101e8:	mov    ebx,r15d
 10101eb:	jmp    0x101020a
 10101ed:	test   esi,esi
 10101ef:	je     0x101020a
 10101f1:	lea    r8,[rdi+0x298]
 10101f8:	mov    rdx,rdi
 10101fb:	lea    rcx,[rip+0x192e]        # 0x1011b30
 1010202:	call   QWORD PTR [rip+0x1c320]        # 0x102c528
 1010208:	mov    ebx,eax
 101020a:	test   r14b,0x1
 101020e:	jne    0x10102ae
 1010214:	mov    QWORD PTR [rbp-0x20],r15
 1010218:	mov    QWORD PTR [rbp+0x48],r15
 101021c:	test   ebx,ebx
 101021e:	je     0x101028c
 1010220:	mov    rcx,QWORD PTR [rdi+0x288]
 1010227:	mov    rax,QWORD PTR [rcx]
 101022a:	lea    r8,[rbp-0x20]
 101022e:	lea    rdx,[rip+0xffffffffffff5063]        # 0x1005298
 1010235:	call   QWORD PTR [rax+0x120]
 101023b:	test   eax,eax
 101023d:	js     0x101028c
 101023f:	mov    ebx,0x1
 1010244:	mov    rcx,QWORD PTR [rbp-0x20]
 1010248:	test   rcx,rcx
 101024b:	je     0x101028f
 101024d:	nop    DWORD PTR [rax]
 1010250:	mov    rax,QWORD PTR [rcx]
 1010253:	lea    rdx,[rbp+0x48]
 1010257:	call   QWORD PTR [rax+0x48]
 101025a:	test   eax,eax
 101025c:	js     0x101028f
 101025e:	cmp    QWORD PTR [rbp+0x48],0x0
 1010263:	je     0x101028f
 1010265:	lea    rcx,[rbp+0x30]
 1010269:	call   0x10166d0
 101026e:	mov    rdx,rax
 1010271:	mov    r8,QWORD PTR [rbp+0x48]
 1010275:	mov    rcx,rdi
 1010278:	call   0x10115d0
 101027d:	test   eax,eax
 101027f:	je     0x101028c
 1010281:	mov    ebx,0x1
 1010286:	mov    rcx,QWORD PTR [rbp-0x20]
 101028a:	jmp    0x1010250
 101028c:	mov    ebx,r15d
 101028f:	mov    rcx,QWORD PTR [rbp+0x48]
 1010293:	test   rcx,rcx
 1010296:	je     0x101029f
 1010298:	mov    rax,QWORD PTR [rcx]
 101029b:	call   QWORD PTR [rax+0x10]
 101029e:	nop
 101029f:	mov    rcx,QWORD PTR [rbp-0x20]
 10102a3:	test   rcx,rcx
 10102a6:	je     0x10102ae
 10102a8:	mov    rax,QWORD PTR [rcx]
 10102ab:	call   QWORD PTR [rax+0x10]
 10102ae:	test   ebx,ebx
 10102b0:	je     0x10102d6
 10102b2:	lea    rcx,[rbp+0x30]
 10102b6:	call   0x10166d0
 10102bb:	mov    rcx,rax
 10102be:	call   QWORD PTR [rip+0x1c1fc]        # 0x102c4c0
 10102c4:	test   eax,eax
 10102c6:	je     0x10102d6
 10102c8:	lea    rcx,[rbp+0x30]
 10102cc:	call   0x10166f0
 10102d1:	mov    ebx,0x1
 10102d6:	mov    rcx,QWORD PTR [rbp-0x18]
 10102da:	test   rcx,rcx
 10102dd:	je     0x10102e6
 10102df:	mov    rax,QWORD PTR [rcx]
 10102e2:	call   QWORD PTR [rax+0x10]
 10102e5:	nop
 10102e6:	mov    rcx,QWORD PTR [rbp+0x40]
 10102ea:	test   rcx,rcx
 10102ed:	je     0x10102f6
 10102ef:	mov    rax,QWORD PTR [rcx]
 10102f2:	call   QWORD PTR [rax+0x10]
 10102f5:	nop
 10102f6:	lea    rcx,[rbp+0x30]
 10102fa:	call   0x10166b0
 10102ff:	mov    eax,ebx
 1010301:	mov    rbx,QWORD PTR [rsp+0x78]
 1010306:	add    rsp,0x40
 101030a:	pop    r15
 101030c:	pop    r14
 101030e:	pop    rdi
 101030f:	pop    rsi
 1010310:	pop    rbp
 1010311:	ret    
 1010312:	int3   
 1010313:	int3   
 1010314:	int3   
 1010315:	int3   
 1010316:	int3   
 1010317:	int3   
 1010318:	int3   
 1010319:	int3   
 101031a:	int3   
 101031b:	int3   
 101031c:	int3   
 101031d:	int3   
 101031e:	int3   
 101031f:	int3   
 1010320:	rex push rbx
 1010322:	sub    rsp,0x20
 1010326:	lea    rdx,[rsp+0x30]
 101032b:	add    rcx,0x70
 101032f:	xor    r8d,r8d
 1010332:	xor    ebx,ebx
 1010334:	call   0x1016e10
 1010339:	test   eax,eax
 101033b:	je     0x1010345
 101033d:	cmp    DWORD PTR [rsp+0x30],0xffffffff
 1010342:	setne  bl
 1010345:	mov    eax,ebx
 1010347:	add    rsp,0x20
 101034b:	pop    rbx
 101034c:	ret    
 101034d:	int3   
 101034e:	int3   
 101034f:	int3   
 1010350:	int3   
 1010351:	int3   
 1010352:	int3   
 1010353:	int3   
 1010354:	int3   
 1010355:	int3   
 1010356:	int3   
 1010357:	int3   
 1010358:	int3   
 1010359:	int3   
 101035a:	int3   
 101035b:	int3   
 101035c:	int3   
 101035d:	int3   
 101035e:	int3   
 101035f:	int3   
 1010360:	rex push rbx
 1010362:	sub    rsp,0x20
 1010366:	mov    rax,QWORD PTR [rcx]
 1010369:	mov    rbx,rcx
 101036c:	call   QWORD PTR [rax+0x18]
 101036f:	mov    r11,QWORD PTR [rbx]
 1010372:	xor    edx,edx
 1010374:	mov    rcx,rbx
 1010377:	add    rsp,0x20
 101037b:	pop    rbx
 101037c:	rex.WB jmp QWORD PTR [r11+0x8]
 1010380:	int3   
 1010381:	int3   
 1010382:	int3   
 1010383:	int3   
 1010384:	int3   
 1010385:	int3   
 1010386:	int3   
 1010387:	int3   
 1010388:	int3   
 1010389:	int3   
 101038a:	int3   
 101038b:	int3   
 101038c:	int3   
 101038d:	int3   
 101038e:	int3   
 101038f:	int3   
 1010390:	mov    rax,rsp
 1010393:	push   rbp
 1010394:	push   rdi
 1010395:	push   r14
 1010397:	lea    rbp,[rax-0x1c8]
 101039e:	sub    rsp,0x2b0
 10103a5:	mov    QWORD PTR [rsp+0x40],0xfffffffffffffffe
 10103ae:	mov    QWORD PTR [rax+0x18],rbx
 10103b2:	mov    QWORD PTR [rax+0x20],rsi
 10103b6:	mov    rax,QWORD PTR [rip+0x142a3]        # 0x1024660
 10103bd:	xor    rax,rsp
 10103c0:	mov    QWORD PTR [rbp+0x1a0],rax
 10103c7:	mov    r9,rdx
 10103ca:	mov    rbx,rcx
 10103cd:	xor    r14d,r14d
 10103d0:	mov    edi,r14d
 10103d3:	mov    rax,QWORD PTR [rdx]
 10103d6:	or     edx,0xffffffff
 10103d9:	lea    r8,[rcx+0x288]
 10103e0:	mov    rcx,r9
 10103e3:	call   QWORD PTR [rax+0xc0]
 10103e9:	test   eax,eax
 10103eb:	js     0x101063b
 10103f1:	mov    QWORD PTR [rsp+0x20],r14
 10103f6:	mov    WORD PTR [rsp+0x50],r14w
 10103fc:	mov    QWORD PTR [rsp+0x54],0x1
 1010405:	mov    QWORD PTR [rsp+0x60],r14
 101040a:	mov    QWORD PTR [rsp+0x68],0x400000
 1010413:	mov    DWORD PTR [rsp+0x70],r14d
 1010418:	mov    QWORD PTR [rsp+0x78],r14
 101041d:	mov    DWORD PTR [rbp-0x80],r14d
 1010421:	mov    DWORD PTR [rbp-0x7c],0x7530
 1010428:	mov    WORD PTR [rbp-0x78],r14w
 101042d:	xor    edx,edx
 101042f:	mov    r8d,0x1fe
 1010435:	lea    rcx,[rbp-0x76]
 1010439:	call   0x100c10e
 101043e:	mov    QWORD PTR [rbp+0x188],r14
 1010445:	xor    eax,eax
 1010447:	mov    QWORD PTR [rbp+0x190],rax
 101044e:	mov    QWORD PTR [rbp+0x198],rax
 1010455:	lea    rcx,[rbx+0x38]
 1010459:	lea    rdx,[rsp+0x50]
 101045e:	mov    r8d,0x250
 1010464:	call   0x101750c
 1010469:	mov    rcx,QWORD PTR [rbx+0x288]
 1010470:	mov    rax,QWORD PTR [rcx]
 1010473:	lea    rdx,[rsp+0x20]
 1010478:	call   QWORD PTR [rax+0x88]
 101047e:	test   eax,eax
 1010480:	js     0x101062b
 1010486:	lea    rsi,[rbx+0x70]
 101048a:	mov    r9d,0x100
 1010490:	mov    r8,rsi
 1010493:	mov    rdx,QWORD PTR [rsp+0x20]
 1010498:	lea    rcx,[rip+0xffffffffffff3f89]        # 0x1004428
 101049f:	call   0x1013c80
 10104a4:	mov    edi,eax
 10104a6:	test   eax,eax
 10104a8:	je     0x101062b
 10104ae:	mov    QWORD PTR [rsp+0x30],r14
 10104b3:	mov    DWORD PTR [rsp+0x2c],r14d
 10104b8:	mov    DWORD PTR [rsp+0x28],r14d
 10104bd:	lea    edi,[r14+0x1]
 10104c1:	lea    r8,[rsp+0x30]
 10104c6:	mov    rdx,QWORD PTR [rsp+0x20]
 10104cb:	lea    rcx,[rip+0xffffffffffff4cee]        # 0x10051c0
 10104d2:	call   0x1014da0
 10104d7:	test   eax,eax
 10104d9:	je     0x10104e8
 10104db:	mov    rax,QWORD PTR [rsp+0x30]
 10104e0:	shl    rax,0x14
 10104e4:	mov    QWORD PTR [rbx+0x60],rax
 10104e8:	lea    r8,[rsp+0x30]
 10104ed:	mov    rdx,QWORD PTR [rsp+0x20]
 10104f2:	lea    rcx,[rip+0xffffffffffff4ce7]        # 0x10051e0
 10104f9:	call   0x1014da0
 10104fe:	test   eax,eax
 1010500:	je     0x101050f
 1010502:	mov    rax,QWORD PTR [rsp+0x30]
 1010507:	shl    rax,0x14
 101050b:	mov    QWORD PTR [rbx+0x50],rax
 101050f:	lea    r8,[rsp+0x2c]
 1010514:	mov    rdx,QWORD PTR [rsp+0x20]
 1010519:	lea    rcx,[rip+0xffffffffffff4cd8]        # 0x10051f8
 1010520:	call   0x1013b40
 1010525:	test   eax,eax
 1010527:	je     0x101053a
 1010529:	cmp    DWORD PTR [rsp+0x2c],0x0
 101052e:	je     0x1010536
 1010530:	or     DWORD PTR [rbx+0x3c],0x8
 1010534:	jmp    0x101053a
 1010536:	and    DWORD PTR [rbx+0x3c],0xfffffff7
 101053a:	lea    r8,[rsp+0x28]
 101053f:	mov    rdx,QWORD PTR [rsp+0x20]
 1010544:	lea    rcx,[rip+0xffffffffffff4ccd]        # 0x1005218
 101054b:	call   0x1014ed0
 1010550:	test   eax,eax
 1010552:	je     0x1010561
 1010554:	mov    eax,DWORD PTR [rsp+0x28]
 1010558:	imul   eax,eax,0x3e8
 101055e:	mov    DWORD PTR [rbx+0x6c],eax
 1010561:	mov    r9d,0xff
 1010567:	lea    r8,[rsp+0x50]
 101056c:	mov    rdx,QWORD PTR [rsp+0x20]
 1010571:	lea    rcx,[rip+0xffffffffffff4cc0]        # 0x1005238
 1010578:	call   0x1013c80
 101057d:	test   eax,eax
 101057f:	je     0x10105c6
 1010581:	lea    rdx,[rbx+0x40]
 1010585:	lea    rcx,[rsp+0x50]
 101058a:	call   0x1011a80
 101058f:	test   eax,eax
 1010591:	jne    0x10105c6
 1010593:	lea    edx,[rax+0x21]
 1010596:	lea    ecx,[rax+0x14]
 1010599:	xor    r8d,r8d
 101059c:	call   QWORD PTR [rip+0x1c03e]        # 0x102c5e0
 10105a2:	lea    r11,[rsp+0x50]
 10105a7:	mov    QWORD PTR [rsp+0x30],r11
 10105ac:	mov    QWORD PTR [rsp+0x38],rsi
 10105b1:	mov    edx,0x2
 10105b6:	lea    r8,[rsp+0x30]
 10105bb:	mov    rcx,rbx
 10105be:	call   0x1016c50
 10105c3:	mov    edi,r14d
 10105c6:	mov    r9d,0xff
 10105cc:	lea    r8,[rsp+0x50]
 10105d1:	mov    rdx,QWORD PTR [rsp+0x20]
 10105d6:	lea    rcx,[rip+0xffffffffffff4c83]        # 0x1005260
 10105dd:	call   0x1013c80
 10105e2:	test   eax,eax
 10105e4:	je     0x101062b
 10105e6:	lea    rdx,[rbx+0x4c]
 10105ea:	lea    rcx,[rsp+0x50]
 10105ef:	call   0x10119d0
 10105f4:	test   eax,eax
 10105f6:	jne    0x101062b
 10105f8:	lea    edx,[rax+0x21]
 10105fb:	lea    ecx,[rax+0x14]
 10105fe:	xor    r8d,r8d
 1010601:	call   QWORD PTR [rip+0x1bfd9]        # 0x102c5e0
 1010607:	lea    r11,[rsp+0x50]
 101060c:	mov    QWORD PTR [rsp+0x30],r11
 1010611:	mov    QWORD PTR [rsp+0x38],rsi
 1010616:	mov    edx,0x2
 101061b:	lea    r8,[rsp+0x30]
 1010620:	mov    rcx,rbx
 1010623:	call   0x1016c50
 1010628:	mov    edi,r14d
 101062b:	mov    rcx,QWORD PTR [rsp+0x20]
 1010630:	test   rcx,rcx
 1010633:	je     0x101063b
 1010635:	mov    rax,QWORD PTR [rcx]
 1010638:	call   QWORD PTR [rax+0x10]
 101063b:	mov    eax,edi
 101063d:	mov    rcx,QWORD PTR [rbp+0x1a0]
 1010644:	xor    rcx,rsp
 1010647:	call   0x100c0d0
 101064c:	lea    r11,[rsp+0x2b0]
 1010654:	mov    rbx,QWORD PTR [r11+0x30]
 1010658:	mov    rsi,QWORD PTR [r11+0x38]
 101065c:	mov    rsp,r11
 101065f:	pop    r14
 1010661:	pop    rdi
 1010662:	pop    rbp
 1010663:	ret    
 1010664:	int3   
 1010665:	int3   
 1010666:	int3   
 1010667:	int3   
 1010668:	int3   
 1010669:	int3   
 101066a:	int3   
 101066b:	int3   
 101066c:	int3   
 101066d:	int3   
 101066e:	int3   
 101066f:	int3   
 1010670:	test   rcx,rcx
 1010673:	je     0x1010690
 1010675:	push   rbx
 1010676:	sub    rsp,0x20
 101067a:	mov    rbx,rcx
 101067d:	call   0x100ffe0
 1010682:	mov    rcx,rbx
 1010685:	call   QWORD PTR [rip+0x1bf75]        # 0x102c600
 101068b:	add    rsp,0x20
 101068f:	pop    rbx
 1010690:	repz ret 
 1010692:	int3   
 1010693:	int3   
 1010694:	int3   
 1010695:	int3   
 1010696:	int3   
 1010697:	int3   
 1010698:	int3   
 1010699:	int3   
 101069a:	int3   
 101069b:	int3   
 101069c:	int3   
 101069d:	int3   
 101069e:	int3   
 101069f:	int3   
 10106a0:	rex push rbp
 10106a2:	push   rsi
 10106a3:	push   rdi
 10106a4:	sub    rsp,0x390
 10106ab:	mov    QWORD PTR [rsp+0x68],0xfffffffffffffffe
 10106b4:	mov    QWORD PTR [rsp+0x3c8],rbx
 10106bc:	mov    rax,QWORD PTR [rip+0x13f9d]        # 0x1024660
 10106c3:	xor    rax,rsp
 10106c6:	mov    QWORD PTR [rsp+0x380],rax
 10106ce:	mov    rsi,r8
 10106d1:	mov    rbp,rdx
 10106d4:	mov    rdi,rcx
 10106d7:	xor    ebx,ebx
 10106d9:	xor    edx,edx
 10106db:	lea    rcx,[rsp+0x30]
 10106e0:	call   0x10166a0
 10106e5:	nop
 10106e6:	lea    rcx,[rsp+0x30]
 10106eb:	call   0x10166e0
 10106f0:	mov    rcx,rax
 10106f3:	call   QWORD PTR [rip+0x1bd97]        # 0x102c490
 10106f9:	test   eax,eax
 10106fb:	je     0x10107f8
 1010701:	test   BYTE PTR [rdi+0x34],0x6
 1010705:	jne    0x10107ab
 101070b:	mov    QWORD PTR [rsp+0x48],rbx
 1010710:	mov    QWORD PTR [rsp+0x50],rbx
 1010715:	xor    edx,edx
 1010717:	lea    rcx,[rsp+0x58]
 101071c:	call   0x10166a0
 1010721:	nop
 1010722:	lea    rcx,[rsp+0x30]
 1010727:	call   0x10166d0
 101072c:	mov    r8,rax
 101072f:	mov    rdx,rsi
 1010732:	lea    rcx,[rsp+0x48]
 1010737:	call   0x1015330
 101073c:	test   eax,eax
 101073e:	jne    0x1010778
 1010740:	lea    rax,[rsp+0x70]
 1010745:	mov    QWORD PTR [rsp+0x38],rax
 101074a:	lea    r9,[rsp+0x40]
 101074f:	mov    r8d,0x186
 1010755:	lea    rdx,[rsp+0x70]
 101075a:	mov    rcx,rsi
 101075d:	call   0x10149c0
 1010762:	test   eax,eax
 1010764:	je     0x101079f
 1010766:	lea    edx,[rbx+0x1]
 1010769:	lea    r8,[rsp+0x38]
 101076e:	mov    rcx,rdi
 1010771:	call   0x1016c50
 1010776:	jmp    0x101079f
 1010778:	mov    rbx,QWORD PTR [rsp+0x50]
 101077d:	lea    rcx,[rsp+0x30]
 1010782:	call   0x10166d0
 1010787:	mov    r9,rax
 101078a:	mov    QWORD PTR [rsp+0x20],rsi
 101078f:	mov    r8,rbx
 1010792:	mov    rdx,rbp
 1010795:	mov    rcx,rdi
 1010798:	call   0x1010830
 101079d:	mov    ebx,eax
 101079f:	lea    rcx,[rsp+0x58]
 10107a4:	call   0x10166b0
 10107a9:	jmp    0x10107f8
 10107ab:	lea    rcx,[rsp+0x30]
 10107b0:	call   0x10166d0
 10107b5:	mov    r9,rax
 10107b8:	mov    r8,rsi
 10107bb:	mov    rdx,rbp
 10107be:	mov    rcx,rdi
 10107c1:	call   0x1010a50
 10107c6:	mov    ebx,eax
 10107c8:	test   eax,eax
 10107ca:	jne    0x10107e6
 10107cc:	call   QWORD PTR [rip+0x1bd9e]        # 0x102c570
 10107d2:	cmp    WORD PTR [rax+0x4],0x2f
 10107d7:	je     0x10107e6
 10107d9:	call   QWORD PTR [rip+0x1bd91]        # 0x102c570
 10107df:	cmp    WORD PTR [rax+0x4],0x30
 10107e4:	jne    0x10107f8
 10107e6:	test   BYTE PTR [rdi+0x34],0x4
 10107ea:	je     0x10107f8
 10107ec:	mov    rdx,rsi
 10107ef:	mov    rcx,rdi
 10107f2:	call   0x1010db0
 10107f7:	nop
 10107f8:	lea    rcx,[rsp+0x30]
 10107fd:	call   0x10166b0
 1010802:	mov    eax,ebx
 1010804:	mov    rcx,QWORD PTR [rsp+0x380]
 101080c:	xor    rcx,rsp
 101080f:	call   0x100c0d0
 1010814:	mov    rbx,QWORD PTR [rsp+0x3c8]
 101081c:	add    rsp,0x390
 1010823:	pop    rdi
 1010824:	pop    rsi
 1010825:	pop    rbp
 1010826:	ret    
 1010827:	int3   
 1010828:	int3   
 1010829:	int3   
 101082a:	int3   
 101082b:	int3   
 101082c:	int3   
 101082d:	int3   
 101082e:	int3   
 101082f:	int3   
 1010830:	mov    rax,rsp
 1010833:	push   rbp
 1010834:	push   r12
 1010836:	push   r13
 1010838:	push   r14
 101083a:	push   r15
 101083c:	mov    rbp,rsp
 101083f:	sub    rsp,0x80
 1010846:	mov    QWORD PTR [rbp-0x8],0xfffffffffffffffe
 101084e:	mov    QWORD PTR [rax+0x8],rbx
 1010852:	mov    QWORD PTR [rax+0x10],rsi
 1010856:	mov    QWORD PTR [rax+0x18],rdi
 101085a:	mov    rax,r9
 101085d:	mov    r15,r8
 1010860:	mov    r12,rdx
 1010863:	mov    r14,rcx
 1010866:	xor    r13d,r13d
 1010869:	mov    esi,r13d
 101086c:	mov    QWORD PTR [rbp-0x18],r13
 1010870:	lea    rcx,[rbp-0x3c]
 1010874:	mov    QWORD PTR [rsp+0x20],rcx
 1010879:	lea    r9,[rbp-0x18]
 101087d:	mov    r8,rax
 1010880:	mov    rbx,QWORD PTR [rbp+0x50]
 1010884:	mov    rdx,rbx
 1010887:	mov    rcx,r14
 101088a:	call   0x10117e0
 101088f:	mov    rdi,QWORD PTR [rbp-0x18]
 1010893:	test   eax,eax
 1010895:	je     0x1010a0c
 101089b:	mov    WORD PTR [rbp-0x40],r13w
 10108a0:	mov    QWORD PTR [rbp-0x28],r13
 10108a4:	lea    rax,[rbp-0x40]
 10108a8:	mov    QWORD PTR [rsp+0x20],rax
 10108ad:	lea    r9,[rbp-0x28]
 10108b1:	mov    r8,rbx
 10108b4:	mov    rdx,r15
 10108b7:	mov    rcx,r14
 10108ba:	call   0x1015550
 10108bf:	mov    QWORD PTR [rbp-0x38],r13
 10108c3:	test   eax,eax
 10108c5:	je     0x10108e6
 10108c7:	mov    rax,QWORD PTR [rbx]
 10108ca:	lea    r8,[rbp-0x38]
 10108ce:	lea    rdx,[rip+0xffffffffffff49fb]        # 0x10052d0
 10108d5:	mov    rcx,rbx
 10108d8:	call   QWORD PTR [rax+0x128]
 10108de:	test   eax,eax
 10108e0:	lea    esi,[r13+0x1]
 10108e4:	jns    0x10108e9
 10108e6:	mov    esi,r13d
 10108e9:	xor    edx,edx
 10108eb:	lea    rcx,[rbp-0x10]
 10108ef:	call   0x10166a0
 10108f4:	nop
 10108f5:	mov    rbx,QWORD PTR [rbp-0x28]
 10108f9:	test   esi,esi
 10108fb:	je     0x10109d8
 1010901:	cmp    QWORD PTR [rbp-0x38],0x0
 1010906:	je     0x1010992
 101090c:	mov    QWORD PTR [rbp-0x30],r13
 1010910:	mov    QWORD PTR [rbp-0x20],r13
 1010914:	mov    rcx,QWORD PTR [rbp-0x38]
 1010918:	mov    rax,QWORD PTR [rcx]
 101091b:	lea    rdx,[rbp-0x30]
 101091f:	call   QWORD PTR [rax+0x60]
 1010922:	test   eax,eax
 1010924:	js     0x1010970
 1010926:	mov    rcx,QWORD PTR [rbp-0x30]
 101092a:	test   rcx,rcx
 101092d:	je     0x1010970
 101092f:	mov    rax,QWORD PTR [rcx]
 1010932:	lea    r8,[rbp-0x20]
 1010936:	xor    edx,edx
 1010938:	call   QWORD PTR [rax+0x38]
 101093b:	test   eax,eax
 101093d:	js     0x1010970
 101093f:	mov    rsi,QWORD PTR [rbp-0x20]
 1010943:	test   rsi,rsi
 1010946:	je     0x1010970
 1010948:	lea    rcx,[rbp-0x10]
 101094c:	call   0x10166e0
 1010951:	mov    r9,rax
 1010954:	mov    DWORD PTR [rsp+0x20],r13d
 1010959:	mov    r8,rsi
 101095c:	mov    rdx,r15
 101095f:	mov    rcx,r14
 1010962:	call   0x1010e40
 1010967:	test   eax,eax
 1010969:	mov    esi,0x1
 101096e:	jne    0x1010973
 1010970:	mov    esi,r13d
 1010973:	mov    rcx,QWORD PTR [rbp-0x20]
 1010977:	test   rcx,rcx
 101097a:	je     0x1010983
 101097c:	mov    rax,QWORD PTR [rcx]
 101097f:	call   QWORD PTR [rax+0x10]
 1010982:	nop
 1010983:	mov    rcx,QWORD PTR [rbp-0x30]
 1010987:	test   rcx,rcx
 101098a:	je     0x1010992
 101098c:	mov    rax,QWORD PTR [rcx]
 101098f:	call   QWORD PTR [rax+0x10]
 1010992:	test   esi,esi
 1010994:	je     0x10109d8
 1010996:	test   rbx,rbx
 1010999:	je     0x10109d8
 101099b:	lea    rcx,[rbp-0x10]
 101099f:	call   0x10166d0
 10109a4:	mov    rsi,rax
 10109a7:	mov    rcx,rbx
 10109aa:	call   0x1016ae0
 10109af:	mov    r9,rax
 10109b2:	mov    QWORD PTR [rsp+0x30],rdi
 10109b7:	movzx  eax,WORD PTR [rbp-0x3c]
 10109bb:	mov    WORD PTR [rsp+0x28],ax
 10109c0:	mov    QWORD PTR [rsp+0x20],rsi
 10109c5:	movzx  r8d,WORD PTR [rbp-0x40]
 10109ca:	mov    rdx,r15
 10109cd:	mov    rcx,r12
 10109d0:	call   QWORD PTR [rip+0x1bb0a]        # 0x102c4e0
 10109d6:	mov    esi,eax
 10109d8:	lea    rcx,[rbp-0x10]
 10109dc:	call   0x10166b0
 10109e1:	nop
 10109e2:	mov    rcx,QWORD PTR [rbp-0x38]
 10109e6:	test   rcx,rcx
 10109e9:	je     0x10109f2
 10109eb:	mov    rdx,QWORD PTR [rcx]
 10109ee:	call   QWORD PTR [rdx+0x10]
 10109f1:	nop
 10109f2:	test   rbx,rbx
 10109f5:	je     0x1010a08
 10109f7:	mov    rcx,rbx
 10109fa:	call   0x1016a70
 10109ff:	mov    rcx,rbx
 1010a02:	call   QWORD PTR [rip+0x1bbf8]        # 0x102c600
 1010a08:	mov    QWORD PTR [rbp-0x28],r13
 1010a0c:	test   rdi,rdi
 1010a0f:	je     0x1010a1a
 1010a11:	mov    rcx,rdi
 1010a14:	call   QWORD PTR [rip+0x1bbe6]        # 0x102c600
 1010a1a:	mov    QWORD PTR [rbp-0x18],r13
 1010a1e:	xor    ecx,ecx
 1010a20:	call   0x100bccc
 1010a25:	mov    eax,esi
 1010a27:	lea    r11,[rsp+0x80]
 1010a2f:	mov    rbx,QWORD PTR [r11+0x30]
 1010a33:	mov    rsi,QWORD PTR [r11+0x38]
 1010a37:	mov    rdi,QWORD PTR [r11+0x40]
 1010a3b:	mov    rsp,r11
 1010a3e:	pop    r15
 1010a40:	pop    r14
 1010a42:	pop    r13
 1010a44:	pop    r12
 1010a46:	pop    rbp
 1010a47:	ret    
 1010a48:	int3   
 1010a49:	int3   
 1010a4a:	int3   
 1010a4b:	int3   
 1010a4c:	int3   
 1010a4d:	int3   
 1010a4e:	int3   
 1010a4f:	int3   
 1010a50:	rex push rbp
 1010a52:	push   rbx
 1010a53:	push   rsi
 1010a54:	push   rdi
 1010a55:	push   r12
 1010a57:	push   r13
 1010a59:	push   r14
 1010a5b:	push   r15
 1010a5d:	lea    rbp,[rsp-0x738]
 1010a65:	sub    rsp,0x838
 1010a6c:	mov    QWORD PTR [rbp-0x80],0xfffffffffffffffe
 1010a74:	mov    rax,QWORD PTR [rip+0x13be5]        # 0x1024660
 1010a7b:	xor    rax,rsp
 1010a7e:	mov    QWORD PTR [rbp+0x720],rax
 1010a85:	mov    rsi,r9
 1010a88:	mov    r15,r8
 1010a8b:	mov    r13,rdx
 1010a8e:	mov    r12,rcx
 1010a91:	xor    edi,edi
 1010a93:	lea    r9,[rsp+0x30]
 1010a98:	mov    r8d,0x186
 1010a9e:	lea    rdx,[rbp+0x100]
 1010aa5:	mov    rcx,r15
 1010aa8:	call   0x10149c0
 1010aad:	test   eax,eax
 1010aaf:	je     0x1010d78
 1010ab5:	mov    r14d,DWORD PTR [rsp+0x30]
 1010aba:	cmp    r14d,0x2
 1010abe:	jne    0x1010b54
 1010ac4:	mov    QWORD PTR [rsp+0x40],rdi
 1010ac9:	mov    QWORD PTR [rsp+0x48],rdi
 1010ace:	xor    edx,edx
 1010ad0:	lea    rcx,[rsp+0x50]
 1010ad5:	call   0x10166a0
 1010ada:	nop
 1010adb:	mov    r8,rsi
 1010ade:	mov    rdx,r15
 1010ae1:	lea    rcx,[rsp+0x40]
 1010ae6:	call   0x1015330
 1010aeb:	test   eax,eax
 1010aed:	jne    0x1010b2b
 1010aef:	lea    rax,[rbp+0x410]
 1010af6:	mov    QWORD PTR [rsp+0x38],rax
 1010afb:	lea    r9,[rsp+0x30]
 1010b00:	mov    r8d,0x186
 1010b06:	lea    rdx,[rbp+0x410]
 1010b0d:	mov    rcx,r15
 1010b10:	call   0x10149c0
 1010b15:	test   eax,eax
 1010b17:	je     0x1010b45
 1010b19:	lea    edx,[rdi+0x1]
 1010b1c:	lea    r8,[rsp+0x38]
 1010b21:	mov    rcx,r12
 1010b24:	call   0x1016c50
 1010b29:	jmp    0x1010b45
 1010b2b:	mov    QWORD PTR [rsp+0x20],r15
 1010b30:	mov    r9,rsi
 1010b33:	mov    r8,QWORD PTR [rsp+0x48]
 1010b38:	mov    rdx,r13
 1010b3b:	mov    rcx,r12
 1010b3e:	call   0x1010830
 1010b43:	mov    edi,eax
 1010b45:	lea    rcx,[rsp+0x50]
 1010b4a:	call   0x10166b0
 1010b4f:	jmp    0x1010d78
 1010b54:	mov    WORD PTR [rbp+0x0],di
 1010b58:	cmp    r14d,0x1
 1010b5c:	jne    0x1010bd1
 1010b5e:	lea    edx,[r14+0x2d]
 1010b62:	lea    rcx,[rbp+0x100]
 1010b69:	call   0x10174dc
 1010b6e:	lea    rcx,[rbp+0x100]
 1010b75:	sub    rax,rcx
 1010b78:	sar    rax,1
 1010b7b:	cmp    rax,0x7ffffffe
 1010b81:	jbe    0x1010b89
 1010b83:	mov    WORD PTR [rbp+0x0],di
 1010b87:	jmp    0x1010bd1
 1010b89:	mov    edx,0x80
 1010b8e:	lea    rcx,[rbp+0x0]
 1010b92:	lea    r9,[rax-0x80]
 1010b96:	lea    r8,[rbp+0x100]
 1010b9d:	lea    rax,[rbp+0x0]
 1010ba1:	sub    r8,rax
 1010ba4:	lea    rax,[r9+rdx*1]
 1010ba8:	test   rax,rax
 1010bab:	je     0x1010bc5
 1010bad:	movzx  eax,WORD PTR [r8+rcx*1]
 1010bb2:	test   ax,ax
 1010bb5:	je     0x1010bc5
 1010bb7:	mov    WORD PTR [rcx],ax
 1010bba:	add    rcx,0x2
 1010bbe:	dec    rdx
 1010bc1:	jne    0x1010ba4
 1010bc3:	jmp    0x1010bca
 1010bc5:	test   rdx,rdx
 1010bc8:	jne    0x1010bce
 1010bca:	sub    rcx,0x2
 1010bce:	mov    WORD PTR [rcx],di
 1010bd1:	lea    rcx,[rsp+0x60]
 1010bd6:	call   0x1016710
 1010bdb:	nop
 1010bdc:	mov    rdx,rsi
 1010bdf:	lea    rcx,[rsp+0x60]
 1010be4:	call   0x1016740
 1010be9:	mov    ebx,0x1
 1010bee:	xchg   ax,ax
 1010bf0:	lea    rdx,[rsp+0x30]
 1010bf5:	lea    rcx,[rsp+0x60]
 1010bfa:	call   0x1016850
 1010bff:	test   eax,eax
 1010c01:	je     0x1010d5f
 1010c07:	mov    rcx,QWORD PTR [rsp+0x30]
 1010c0c:	test   rcx,rcx
 1010c0f:	je     0x1010d5f
 1010c15:	mov    rcx,QWORD PTR [rcx]
 1010c18:	add    rcx,0x38
 1010c1c:	mov    r8d,0x32
 1010c22:	lea    rdx,[rbp-0x70]
 1010c26:	call   0x1017410
 1010c2b:	mov    rax,QWORD PTR [rsp+0x30]
 1010c30:	test   r14d,r14d
 1010c33:	jne    0x1010c6b
 1010c35:	mov    rax,QWORD PTR [rax]
 1010c38:	lea    rcx,[rbp+0x100]
 1010c3f:	mov    QWORD PTR [rsp+0x28],rcx
 1010c44:	mov    rax,QWORD PTR [rax+0x8]
 1010c48:	mov    QWORD PTR [rsp+0x20],rax
 1010c4d:	lea    r9,[rbp-0x70]
 1010c51:	lea    r8,[rip+0xffffffffffff4650]        # 0x10052a8
 1010c58:	mov    edx,0x186
 1010c5d:	lea    rcx,[rbp+0x410]
 1010c64:	call   0x100ae30
 1010c69:	jmp    0x1010cab
 1010c6b:	mov    rdx,QWORD PTR [rax]
 1010c6e:	mov    rdx,QWORD PTR [rdx+0x8]
 1010c72:	lea    rcx,[rbp+0x0]
 1010c76:	call   0x10174e8
 1010c7b:	test   eax,eax
 1010c7d:	jne    0x1010d57
 1010c83:	lea    rax,[rbp+0x100]
 1010c8a:	mov    QWORD PTR [rsp+0x20],rax
 1010c8f:	lea    r9,[rbp-0x70]
 1010c93:	lea    r8,[rip+0xffffffffffff4626]        # 0x10052c0
 1010c9a:	mov    edx,0x186
 1010c9f:	lea    rcx,[rbp+0x410]
 1010ca6:	call   0x100ae30
 1010cab:	mov    QWORD PTR [rsp+0x40],rdi
 1010cb0:	mov    QWORD PTR [rsp+0x48],rdi
 1010cb5:	xor    edx,edx
 1010cb7:	lea    rcx,[rsp+0x50]
 1010cbc:	call   0x10166a0
 1010cc1:	nop
 1010cc2:	mov    QWORD PTR [rsp+0x38],rdi
 1010cc7:	lea    r9,[rsp+0x38]
 1010ccc:	xor    r8d,r8d
 1010ccf:	lea    rdx,[rbp+0x410]
 1010cd6:	mov    rcx,rsi
 1010cd9:	call   QWORD PTR [rip+0x1b779]        # 0x102c458
 1010cdf:	test   eax,eax
 1010ce1:	je     0x1010d4d
 1010ce3:	lea    rcx,[rsp+0x50]
 1010ce8:	call   0x10166e0
 1010ced:	mov    rdx,rax
 1010cf0:	mov    rax,QWORD PTR [rsp+0x38]
 1010cf5:	mov    ecx,DWORD PTR [rax+0x4]
 1010cf8:	call   QWORD PTR [rip+0x1b772]        # 0x102c470
 1010cfe:	test   eax,eax
 1010d00:	je     0x1010d4d
 1010d02:	lea    rcx,[rsp+0x50]
 1010d07:	call   0x10166d0
 1010d0c:	mov    rdx,rax
 1010d0f:	lea    r8,[rsp+0x40]
 1010d14:	mov    rcx,rsi
 1010d17:	call   QWORD PTR [rip+0x1b733]        # 0x102c450
 1010d1d:	test   eax,eax
 1010d1f:	je     0x1010d4d
 1010d21:	mov    r8,QWORD PTR [rsp+0x38]
 1010d26:	mov    QWORD PTR [rsp+0x48],r8
 1010d2b:	test   ebx,ebx
 1010d2d:	je     0x1010d4b
 1010d2f:	mov    QWORD PTR [rsp+0x20],r15
 1010d34:	mov    r9,rsi
 1010d37:	mov    rdx,r13
 1010d3a:	mov    rcx,r12
 1010d3d:	call   0x1010830
 1010d42:	test   eax,eax
 1010d44:	mov    ebx,0x1
 1010d49:	jne    0x1010d4d
 1010d4b:	mov    ebx,edi
 1010d4d:	lea    rcx,[rsp+0x50]
 1010d52:	call   0x10166b0
 1010d57:	test   ebx,ebx
 1010d59:	jne    0x1010bf0
 1010d5f:	lea    rcx,[rsp+0x60]
 1010d64:	call   0x10167d0
 1010d69:	nop
 1010d6a:	lea    rcx,[rsp+0x60]
 1010d6f:	call   0x1016730
 1010d74:	mov    eax,ebx
 1010d76:	jmp    0x1010d7a
 1010d78:	mov    eax,edi
 1010d7a:	mov    rcx,QWORD PTR [rbp+0x720]
 1010d81:	xor    rcx,rsp
 1010d84:	call   0x100c0d0
 1010d89:	add    rsp,0x838
 1010d90:	pop    r15
 1010d92:	pop    r14
 1010d94:	pop    r13
 1010d96:	pop    r12
 1010d98:	pop    rdi
 1010d99:	pop    rsi
 1010d9a:	pop    rbx
 1010d9b:	pop    rbp
 1010d9c:	ret    
 1010d9d:	int3   
 1010d9e:	int3   
 1010d9f:	int3   
 1010da0:	int3   
 1010da1:	int3   
 1010da2:	int3   
 1010da3:	int3   
 1010da4:	int3   
 1010da5:	int3   
 1010da6:	int3   
 1010da7:	int3   
 1010da8:	int3   
 1010da9:	int3   
 1010daa:	int3   
 1010dab:	int3   
 1010dac:	int3   
 1010dad:	int3   
 1010dae:	int3   
 1010daf:	int3   
 1010db0:	mov    QWORD PTR [rsp+0x8],rbx
 1010db5:	mov    QWORD PTR [rsp+0x10],rbp
 1010dba:	push   rsi
 1010dbb:	sub    rsp,0x20
 1010dbf:	mov    rsi,rdx
 1010dc2:	mov    rbp,rcx
 1010dc5:	mov    edx,0x10
 1010dca:	xor    ecx,ecx
 1010dcc:	call   QWORD PTR [rip+0x1b826]        # 0x102c5f8
 1010dd2:	mov    rbx,rax
 1010dd5:	test   rax,rax
 1010dd8:	je     0x1010de3
 1010dda:	mov    QWORD PTR [rax],0x0
 1010de1:	jmp    0x1010de5
 1010de3:	xor    ebx,ebx
 1010de5:	mov    QWORD PTR [rbx+0x8],rsi
 1010de9:	mov    rax,QWORD PTR [rsi]
 1010dec:	mov    rcx,rsi
 1010def:	call   QWORD PTR [rax+0x8]
 1010df2:	mov    r11,QWORD PTR [rbp+0x290]
 1010df9:	mov    rax,QWORD PTR [r11]
 1010dfc:	test   rax,rax
 1010dff:	je     0x1010e11
 1010e01:	mov    rcx,rax
 1010e04:	mov    rax,QWORD PTR [rax]
 1010e07:	test   rax,rax
 1010e0a:	jne    0x1010e01
 1010e0c:	mov    QWORD PTR [rcx],rbx
 1010e0f:	jmp    0x1010e14
 1010e11:	mov    QWORD PTR [r11],rbx
 1010e14:	mov    rbp,QWORD PTR [rsp+0x38]
 1010e19:	mov    QWORD PTR [rbx],0x0
 1010e20:	mov    rbx,QWORD PTR [rsp+0x30]
 1010e25:	add    rsp,0x20
 1010e29:	pop    rsi
 1010e2a:	ret    
 1010e2b:	int3   
 1010e2c:	int3   
 1010e2d:	int3   
 1010e2e:	int3   
 1010e2f:	int3   
 1010e30:	int3   
 1010e31:	int3   
 1010e32:	int3   
 1010e33:	int3   
 1010e34:	int3   
 1010e35:	int3   
 1010e36:	int3   
 1010e37:	int3   
 1010e38:	int3   
 1010e39:	int3   
 1010e3a:	int3   
 1010e3b:	int3   
 1010e3c:	int3   
 1010e3d:	int3   
 1010e3e:	int3   
 1010e3f:	int3   
 1010e40:	mov    rax,rsp
 1010e43:	mov    QWORD PTR [rax+0x20],r9
 1010e47:	push   rbp
 1010e48:	mov    rbp,rsp
 1010e4b:	sub    rsp,0x70
 1010e4f:	mov    QWORD PTR [rbp-0x10],0xfffffffffffffffe
 1010e57:	mov    QWORD PTR [rax+0x8],rbx
 1010e5b:	mov    QWORD PTR [rax+0x10],rsi
 1010e5f:	mov    QWORD PTR [rax+0x18],rdi
 1010e63:	mov    rbx,r8
 1010e66:	mov    rdi,rdx
 1010e69:	mov    rsi,rcx
 1010e6c:	cmp    DWORD PTR [rbp+0x30],0x20
 1010e70:	ja     0x1011083
 1010e76:	test   rbx,rbx
 1010e79:	je     0x1011083
 1010e7f:	mov    QWORD PTR [rbp-0x40],0x0
 1010e87:	mov    rax,QWORD PTR [r8]
 1010e8a:	lea    rdx,[rbp-0x40]
 1010e8e:	mov    rcx,rbx
 1010e91:	call   QWORD PTR [rax+0x38]
 1010e94:	test   eax,eax
 1010e96:	jns    0x1010e9d
 1010e98:	jmp    0x1011074
 1010e9d:	mov    r8d,0x5
 1010ea3:	lea    rdx,[rip+0xffffffffffff443e]        # 0x10052e8
 1010eaa:	mov    rcx,QWORD PTR [rbp-0x40]
 1010eae:	call   0x1017670
 1010eb3:	test   eax,eax
 1010eb5:	jne    0x1010ee1
 1010eb7:	mov    r9,QWORD PTR [rbp+0x28]
 1010ebb:	mov    r8,rbx
 1010ebe:	mov    rdx,rdi
 1010ec1:	mov    rcx,rsi
 1010ec4:	call   0x10110b0
 1010ec9:	mov    ebx,eax
 1010ecb:	mov    rcx,QWORD PTR [rbp-0x40]
 1010ecf:	test   rcx,rcx
 1010ed2:	je     0x1010eda
 1010ed4:	call   QWORD PTR [rip+0xffffffffffff0696]        # 0x1001570
 1010eda:	mov    eax,ebx
 1010edc:	jmp    0x1011085
 1010ee1:	mov    QWORD PTR [rbp-0x38],0x0
 1010ee9:	mov    rax,QWORD PTR [rbx]
 1010eec:	lea    rdx,[rbp-0x38]
 1010ef0:	mov    rcx,rbx
 1010ef3:	call   QWORD PTR [rax+0x60]
 1010ef6:	xor    eax,eax
 1010ef8:	mov    QWORD PTR [rbp-0x28],rax
 1010efc:	mov    QWORD PTR [rbp-0x30],rax
 1010f00:	mov    rcx,QWORD PTR [rbp-0x38]
 1010f04:	mov    rax,QWORD PTR [rcx]
 1010f07:	lea    r8,[rbp-0x28]
 1010f0b:	xor    edx,edx
 1010f0d:	call   QWORD PTR [rax+0x38]
 1010f10:	mov    rcx,QWORD PTR [rbp-0x38]
 1010f14:	mov    rax,QWORD PTR [rcx]
 1010f17:	lea    r8,[rbp-0x30]
 1010f1b:	mov    ebx,0x1
 1010f20:	mov    edx,ebx
 1010f22:	call   QWORD PTR [rax+0x38]
 1010f25:	lea    r8d,[rbx+0x3]
 1010f29:	lea    rdx,[rip+0xffffffffffff43c8]        # 0x10052f8
 1010f30:	mov    rcx,QWORD PTR [rbp-0x40]
 1010f34:	call   0x1017670
 1010f39:	test   eax,eax
 1010f3b:	je     0x1010f7a
 1010f3d:	lea    r8d,[rbx+0x2]
 1010f41:	lea    rdx,[rip+0xffffffffffff43b8]        # 0x1005300
 1010f48:	mov    rcx,QWORD PTR [rbp-0x40]
 1010f4c:	call   0x1017670
 1010f51:	test   eax,eax
 1010f53:	jne    0x1010f59
 1010f55:	xor    ebx,ebx
 1010f57:	jmp    0x1010f7a
 1010f59:	mov    r8d,0x4
 1010f5f:	lea    rdx,[rip+0xffffffffffff43a2]        # 0x1005308
 1010f66:	mov    rcx,QWORD PTR [rbp-0x40]
 1010f6a:	call   0x1017670
 1010f6f:	test   eax,eax
 1010f71:	jne    0x1011044
 1010f77:	lea    ebx,[rax+0x2]
 1010f7a:	mov    QWORD PTR [rbp-0x20],0x0
 1010f82:	mov    eax,DWORD PTR [rbp+0x30]
 1010f85:	inc    eax
 1010f87:	mov    DWORD PTR [rsp+0x20],eax
 1010f8b:	lea    r9,[rbp-0x18]
 1010f8f:	mov    r8,QWORD PTR [rbp-0x28]
 1010f93:	mov    rdx,rdi
 1010f96:	mov    rcx,rsi
 1010f99:	call   0x1010e40
 1010f9e:	test   eax,eax
 1010fa0:	je     0x1011012
 1010fa2:	cmp    ebx,0x2
 1010fa5:	je     0x1010fc7
 1010fa7:	mov    eax,DWORD PTR [rbp+0x30]
 1010faa:	inc    eax
 1010fac:	mov    DWORD PTR [rsp+0x20],eax
 1010fb0:	lea    r9,[rbp-0x20]
 1010fb4:	mov    r8,QWORD PTR [rbp-0x30]
 1010fb8:	mov    rdx,rdi
 1010fbb:	mov    rcx,rsi
 1010fbe:	call   0x1010e40
 1010fc3:	test   eax,eax
 1010fc5:	je     0x1011012
 1010fc7:	mov    r9,QWORD PTR [rbp+0x28]
 1010fcb:	mov    r8,QWORD PTR [rbp-0x20]
 1010fcf:	mov    rdx,QWORD PTR [rbp-0x18]
 1010fd3:	mov    ecx,ebx
 1010fd5:	call   QWORD PTR [rip+0x1b525]        # 0x102c500
 1010fdb:	mov    ebx,eax
 1010fdd:	mov    rcx,QWORD PTR [rbp-0x30]
 1010fe1:	test   rcx,rcx
 1010fe4:	je     0x1010fed
 1010fe6:	mov    rdx,QWORD PTR [rcx]
 1010fe9:	call   QWORD PTR [rdx+0x10]
 1010fec:	nop
 1010fed:	mov    rcx,QWORD PTR [rbp-0x28]
 1010ff1:	test   rcx,rcx
 1010ff4:	je     0x1010ffd
 1010ff6:	mov    rax,QWORD PTR [rcx]
 1010ff9:	call   QWORD PTR [rax+0x10]
 1010ffc:	nop
 1010ffd:	mov    rcx,QWORD PTR [rbp-0x38]
 1011001:	test   rcx,rcx
 1011004:	je     0x101100d
 1011006:	mov    rax,QWORD PTR [rcx]
 1011009:	call   QWORD PTR [rax+0x10]
 101100c:	nop
 101100d:	jmp    0x1010ecb
 1011012:	mov    rcx,QWORD PTR [rbp-0x30]
 1011016:	test   rcx,rcx
 1011019:	je     0x1011022
 101101b:	mov    rax,QWORD PTR [rcx]
 101101e:	call   QWORD PTR [rax+0x10]
 1011021:	nop
 1011022:	mov    rcx,QWORD PTR [rbp-0x28]
 1011026:	test   rcx,rcx
 1011029:	je     0x1011032
 101102b:	mov    rax,QWORD PTR [rcx]
 101102e:	call   QWORD PTR [rax+0x10]
 1011031:	nop
 1011032:	mov    rcx,QWORD PTR [rbp-0x38]
 1011036:	test   rcx,rcx
 1011039:	je     0x1011042
 101103b:	mov    rax,QWORD PTR [rcx]
 101103e:	call   QWORD PTR [rax+0x10]
 1011041:	nop
 1011042:	jmp    0x1011074
 1011044:	mov    rcx,QWORD PTR [rbp-0x30]
 1011048:	test   rcx,rcx
 101104b:	je     0x1011054
 101104d:	mov    rax,QWORD PTR [rcx]
 1011050:	call   QWORD PTR [rax+0x10]
 1011053:	nop
 1011054:	mov    rcx,QWORD PTR [rbp-0x28]
 1011058:	test   rcx,rcx
 101105b:	je     0x1011064
 101105d:	mov    rax,QWORD PTR [rcx]
 1011060:	call   QWORD PTR [rax+0x10]
 1011063:	nop
 1011064:	mov    rcx,QWORD PTR [rbp-0x38]
 1011068:	test   rcx,rcx
 101106b:	je     0x1011074
 101106d:	mov    rax,QWORD PTR [rcx]
 1011070:	call   QWORD PTR [rax+0x10]
 1011073:	nop
 1011074:	mov    rcx,QWORD PTR [rbp-0x40]
 1011078:	test   rcx,rcx
 101107b:	je     0x1011083
 101107d:	call   QWORD PTR [rip+0xffffffffffff04ed]        # 0x1001570
 1011083:	xor    eax,eax
 1011085:	lea    r11,[rsp+0x70]
 101108a:	mov    rbx,QWORD PTR [r11+0x10]
 101108e:	mov    rsi,QWORD PTR [r11+0x18]
 1011092:	mov    rdi,QWORD PTR [r11+0x20]
 1011096:	mov    rsp,r11
 1011099:	pop    rbp
 101109a:	ret    
 101109b:	int3   
 101109c:	int3   
 101109d:	int3   
 101109e:	int3   
 101109f:	int3   
 10110a0:	int3   
 10110a1:	int3   
 10110a2:	int3   
 10110a3:	int3   
 10110a4:	int3   
 10110a5:	int3   
 10110a6:	int3   
 10110a7:	int3   
 10110a8:	int3   
 10110a9:	int3   
 10110aa:	int3   
 10110ab:	int3   
 10110ac:	int3   
 10110ad:	int3   
 10110ae:	int3   
 10110af:	int3   
 10110b0:	rex push rbp
 10110b2:	push   rbx
 10110b3:	push   rsi
 10110b4:	push   rdi
 10110b5:	push   r12
 10110b7:	push   r14
 10110b9:	push   r15
 10110bb:	lea    rbp,[rsp-0x400]
 10110c3:	sub    rsp,0x500
 10110ca:	mov    QWORD PTR [rbp-0x40],0xfffffffffffffffe
 10110d2:	mov    rax,QWORD PTR [rip+0x13587]        # 0x1024660
 10110d9:	xor    rax,rsp
 10110dc:	mov    QWORD PTR [rbp+0x3f0],rax
 10110e3:	mov    r15,r9
 10110e6:	mov    rsi,r8
 10110e9:	mov    r14,rdx
 10110ec:	mov    r12,rcx
 10110ef:	xor    edi,edi
 10110f1:	xor    edx,edx
 10110f3:	lea    rcx,[rsp+0x38]
 10110f8:	call   0x10166a0
 10110fd:	nop
 10110fe:	lea    rcx,[rsp+0x38]
 1011103:	call   0x10166e0
 1011108:	mov    rcx,rax
 101110b:	call   QWORD PTR [rip+0x1b37f]        # 0x102c490
 1011111:	test   eax,eax
 1011113:	je     0x101159a
 1011119:	mov    QWORD PTR [rsp+0x40],rdi
 101111e:	mov    QWORD PTR [rsp+0x30],rdi
 1011123:	mov    QWORD PTR [rsp+0x48],rdi
 1011128:	mov    rax,QWORD PTR [rsi]
 101112b:	lea    r8,[rsp+0x40]
 1011130:	lea    rdx,[rip+0xffffffffffff41d9]        # 0x1005310
 1011137:	mov    rcx,rsi
 101113a:	call   QWORD PTR [rax+0x128]
 1011140:	test   eax,eax
 1011142:	jns    0x1011188
 1011144:	mov    rcx,QWORD PTR [rsp+0x48]
 1011149:	test   rcx,rcx
 101114c:	je     0x1011155
 101114e:	mov    rax,QWORD PTR [rcx]
 1011151:	call   QWORD PTR [rax+0x10]
 1011154:	nop
 1011155:	mov    rcx,QWORD PTR [rsp+0x30]
 101115a:	test   rcx,rcx
 101115d:	je     0x1011166
 101115f:	mov    rax,QWORD PTR [rcx]
 1011162:	call   QWORD PTR [rax+0x10]
 1011165:	nop
 1011166:	mov    rcx,QWORD PTR [rsp+0x40]
 101116b:	test   rcx,rcx
 101116e:	je     0x1011177
 1011170:	mov    rax,QWORD PTR [rcx]
 1011173:	call   QWORD PTR [rax+0x10]
 1011176:	nop
 1011177:	lea    rcx,[rsp+0x38]
 101117c:	call   0x10166b0
 1011181:	xor    eax,eax
 1011183:	jmp    0x10115a6
 1011188:	mov    rax,QWORD PTR [rsi]
 101118b:	lea    r8,[rsp+0x48]
 1011190:	lea    rdx,[rip+0xffffffffffff4191]        # 0x1005328
 1011197:	mov    rcx,rsi
 101119a:	call   QWORD PTR [rax+0x128]
 10111a0:	test   eax,eax
 10111a2:	jns    0x10111e8
 10111a4:	mov    rcx,QWORD PTR [rsp+0x48]
 10111a9:	test   rcx,rcx
 10111ac:	je     0x10111b5
 10111ae:	mov    rax,QWORD PTR [rcx]
 10111b1:	call   QWORD PTR [rax+0x10]
 10111b4:	nop
 10111b5:	mov    rcx,QWORD PTR [rsp+0x30]
 10111ba:	test   rcx,rcx
 10111bd:	je     0x10111c6
 10111bf:	mov    rax,QWORD PTR [rcx]
 10111c2:	call   QWORD PTR [rax+0x10]
 10111c5:	nop
 10111c6:	mov    rcx,QWORD PTR [rsp+0x40]
 10111cb:	test   rcx,rcx
 10111ce:	je     0x10111d7
 10111d0:	mov    rax,QWORD PTR [rcx]
 10111d3:	call   QWORD PTR [rax+0x10]
 10111d6:	nop
 10111d7:	lea    rcx,[rsp+0x38]
 10111dc:	call   0x10166b0
 10111e1:	xor    eax,eax
 10111e3:	jmp    0x10115a6
 10111e8:	mov    rax,QWORD PTR [rsi]
 10111eb:	lea    r8,[rsp+0x30]
 10111f0:	lea    rdx,[rip+0xffffffffffff4151]        # 0x1005348
 10111f7:	mov    rcx,rsi
 10111fa:	call   QWORD PTR [rax+0x128]
 1011200:	test   eax,eax
 1011202:	jns    0x1011248
 1011204:	mov    rcx,QWORD PTR [rsp+0x48]
 1011209:	test   rcx,rcx
 101120c:	je     0x1011215
 101120e:	mov    rax,QWORD PTR [rcx]
 1011211:	call   QWORD PTR [rax+0x10]
 1011214:	nop
 1011215:	mov    rcx,QWORD PTR [rsp+0x30]
 101121a:	test   rcx,rcx
 101121d:	je     0x1011226
 101121f:	mov    rax,QWORD PTR [rcx]
 1011222:	call   QWORD PTR [rax+0x10]
 1011225:	nop
 1011226:	mov    rcx,QWORD PTR [rsp+0x40]
 101122b:	test   rcx,rcx
 101122e:	je     0x1011237
 1011230:	mov    rax,QWORD PTR [rcx]
 1011233:	call   QWORD PTR [rax+0x10]
 1011236:	nop
 1011237:	lea    rcx,[rsp+0x38]
 101123c:	call   0x10166b0
 1011241:	xor    eax,eax
 1011243:	jmp    0x10115a6
 1011248:	cmp    QWORD PTR [rsp+0x40],0x0
 101124e:	je     0x1011567
 1011254:	cmp    QWORD PTR [rsp+0x48],0x0
 101125a:	je     0x1011567
 1011260:	mov    QWORD PTR [rsp+0x60],rdi
 1011265:	mov    QWORD PTR [rsp+0x68],rdi
 101126a:	xor    edx,edx
 101126c:	lea    rcx,[rsp+0x70]
 1011271:	call   0x10166a0
 1011276:	nop
 1011277:	mov    rbx,QWORD PTR [rsp+0x40]
 101127c:	lea    rcx,[rsp+0x38]
 1011281:	call   0x10166d0
 1011286:	mov    r9,rax
 1011289:	mov    r8,rbx
 101128c:	lea    rdx,[rsp+0x60]
 1011291:	mov    rcx,r12
 1011294:	call   0x1015830
 1011299:	test   eax,eax
 101129b:	je     0x101155c
 10112a1:	lea    rcx,[rbp-0x58]
 10112a5:	call   QWORD PTR [rip+0xffffffffffff02ed]        # 0x1001598
 10112ab:	nop
 10112ac:	mov    rcx,QWORD PTR [rsp+0x48]
 10112b1:	mov    rax,QWORD PTR [rcx]
 10112b4:	lea    rdx,[rbp-0x58]
 10112b8:	call   QWORD PTR [rax+0x40]
 10112bb:	mov    ecx,edi
 10112bd:	test   eax,eax
 10112bf:	setns  cl
 10112c2:	test   ecx,ecx
 10112c4:	je     0x1011551
 10112ca:	lea    r8,[rbp-0x38]
 10112ce:	mov    rax,QWORD PTR [rsp+0x68]
 10112d3:	mov    edx,DWORD PTR [rax+0x20]
 10112d6:	lea    rcx,[rbp-0x58]
 10112da:	call   0x1013e70
 10112df:	test   eax,eax
 10112e1:	js     0x101153f
 10112e7:	cmp    QWORD PTR [rsp+0x30],0x0
 10112ed:	je     0x101134e
 10112ef:	mov    QWORD PTR [rbp-0x80],rdi
 10112f3:	mov    QWORD PTR [rbp-0x78],rdi
 10112f7:	xor    edx,edx
 10112f9:	lea    rcx,[rbp-0x70]
 10112fd:	call   0x10166a0
 1011302:	nop
 1011303:	mov    rbx,QWORD PTR [rsp+0x30]
 1011308:	lea    rcx,[rsp+0x38]
 101130d:	call   0x10166d0
 1011312:	mov    r9,rax
 1011315:	mov    r8,rbx
 1011318:	lea    rdx,[rbp-0x80]
 101131c:	mov    rcx,r12
 101131f:	call   0x1015a30
 1011324:	test   eax,eax
 1011326:	je     0x1011340
 1011328:	mov    r9,r15
 101132b:	lea    r8,[rbp-0x38]
 101132f:	mov    rdx,QWORD PTR [rsp+0x68]
 1011334:	mov    rcx,QWORD PTR [rbp-0x78]
 1011338:	call   QWORD PTR [rip+0x1b1ba]        # 0x102c4f8
 101133e:	mov    edi,eax
 1011340:	lea    rcx,[rbp-0x70]
 1011344:	call   0x10166b0
 1011349:	jmp    0x1011551
 101134e:	mov    rax,QWORD PTR [rsi]
 1011351:	lea    r8,[rsp+0x30]
 1011356:	lea    rdx,[rip+0xffffffffffff3c5b]        # 0x1004fb8
 101135d:	mov    rcx,rsi
 1011360:	call   QWORD PTR [rax+0x128]
 1011366:	test   eax,eax
 1011368:	jns    0x10113c4
 101136a:	lea    rcx,[rbp-0x58]
 101136e:	call   QWORD PTR [rip+0xffffffffffff021c]        # 0x1001590
 1011374:	nop
 1011375:	lea    rcx,[rsp+0x70]
 101137a:	call   0x10166b0
 101137f:	nop
 1011380:	mov    rcx,QWORD PTR [rsp+0x48]
 1011385:	test   rcx,rcx
 1011388:	je     0x1011391
 101138a:	mov    rax,QWORD PTR [rcx]
 101138d:	call   QWORD PTR [rax+0x10]
 1011390:	nop
 1011391:	mov    rcx,QWORD PTR [rsp+0x30]
 1011396:	test   rcx,rcx
 1011399:	je     0x10113a2
 101139b:	mov    rax,QWORD PTR [rcx]
 101139e:	call   QWORD PTR [rax+0x10]
 10113a1:	nop
 10113a2:	mov    rcx,QWORD PTR [rsp+0x40]
 10113a7:	test   rcx,rcx
 10113aa:	je     0x10113b3
 10113ac:	mov    rax,QWORD PTR [rcx]
 10113af:	call   QWORD PTR [rax+0x10]
 10113b2:	nop
 10113b3:	lea    rcx,[rsp+0x38]
 10113b8:	call   0x10166b0
 10113bd:	xor    eax,eax
 10113bf:	jmp    0x10115a6
 10113c4:	cmp    QWORD PTR [rsp+0x30],0x0
 10113ca:	je     0x1011551
 10113d0:	mov    QWORD PTR [rsp+0x50],rdi
 10113d5:	mov    rcx,QWORD PTR [rsp+0x30]
 10113da:	mov    rax,QWORD PTR [rcx]
 10113dd:	lea    rdx,[rsp+0x50]
 10113e2:	call   QWORD PTR [rax+0x88]
 10113e8:	test   eax,eax
 10113ea:	js     0x101152d
 10113f0:	mov    rbx,QWORD PTR [rsp+0x50]
 10113f5:	test   rbx,rbx
 10113f8:	je     0x101152d
 10113fe:	mov    WORD PTR [rbp-0x20],di
 1011402:	xor    edx,edx
 1011404:	mov    r8d,0xfe
 101140a:	lea    rcx,[rbp-0x1e]
 101140e:	call   0x100c10e
 1011413:	mov    r9d,0x80
 1011419:	lea    r8,[rbp-0x20]
 101141d:	mov    rdx,rbx
 1011420:	lea    rcx,[rip+0xffffffffffff3f31]        # 0x1005358
 1011427:	call   0x1013c80
 101142c:	test   eax,eax
 101142e:	je     0x101152d
 1011434:	mov    QWORD PTR [rsp+0x20],r15
 1011439:	lea    r9,[rbp-0x38]
 101143d:	mov    r8,QWORD PTR [rsp+0x68]
 1011442:	lea    rdx,[rbp-0x20]
 1011446:	mov    rcx,r14
 1011449:	call   QWORD PTR [rip+0x1b0a1]        # 0x102c4f0
 101144f:	mov    edi,eax
 1011451:	test   eax,eax
 1011453:	jne    0x101152d
 1011459:	xor    edx,edx
 101145b:	lea    rcx,[rsp+0x58]
 1011460:	call   0x10166a0
 1011465:	nop
 1011466:	lea    rcx,[rsp+0x58]
 101146b:	call   0x10166e0
 1011470:	mov    rdx,rax
 1011473:	movzx  ecx,WORD PTR [r14+0x4]
 1011478:	mov    eax,0x3ff
 101147d:	and    cx,ax
 1011480:	call   QWORD PTR [rip+0x1afc2]        # 0x102c448
 1011486:	test   eax,eax
 1011488:	je     0x10114e1
 101148a:	lea    rcx,[rsp+0x58]
 101148f:	call   0x10166d0
 1011494:	mov    rbx,rax
 1011497:	lea    rcx,[rsp+0x38]
 101149c:	call   0x10166d0
 10114a1:	mov    rcx,rax
 10114a4:	lea    r8,[rbp-0x60]
 10114a8:	mov    rdx,rbx
 10114ab:	call   QWORD PTR [rip+0x1af9f]        # 0x102c450
 10114b1:	test   eax,eax
 10114b3:	je     0x10114e1
 10114b5:	mov    rax,QWORD PTR [rbp-0x60]
 10114b9:	mov    r9,QWORD PTR [rax]
 10114bc:	mov    rax,QWORD PTR [r14+0x8]
 10114c0:	mov    QWORD PTR [rsp+0x20],rax
 10114c5:	mov    r9,QWORD PTR [r9+0x8]
 10114c9:	lea    r8,[rip+0xffffffffffff3df0]        # 0x10052c0
 10114d0:	mov    edx,0x186
 10114d5:	lea    rcx,[rbp+0xe0]
 10114dc:	call   0x100ae30
 10114e1:	mov    r9,QWORD PTR [r14+0x8]
 10114e5:	lea    r8,[rip+0xffffffffffff3e78]        # 0x1005364
 10114ec:	mov    edx,0x186
 10114f1:	lea    rcx,[rbp+0xe0]
 10114f8:	call   0x100ae30
 10114fd:	lea    r11,[rbp+0xe0]
 1011504:	mov    QWORD PTR [rbp-0x80],r11
 1011508:	lea    rax,[rbp-0x20]
 101150c:	mov    QWORD PTR [rbp-0x78],rax
 1011510:	mov    edx,0x2
 1011515:	lea    r8,[rbp-0x80]
 1011519:	mov    rcx,r12
 101151c:	call   0x1016c50
 1011521:	nop
 1011522:	lea    rcx,[rsp+0x58]
 1011527:	call   0x10166b0
 101152c:	nop
 101152d:	mov    rcx,QWORD PTR [rsp+0x50]
 1011532:	test   rcx,rcx
 1011535:	je     0x1011551
 1011537:	mov    rax,QWORD PTR [rcx]
 101153a:	call   QWORD PTR [rax+0x10]
 101153d:	jmp    0x1011551
 101153f:	mov    edx,0x1d
 1011544:	lea    ecx,[rdx+0x7]
 1011547:	xor    r8d,r8d
 101154a:	call   QWORD PTR [rip+0x1b090]        # 0x102c5e0
 1011550:	nop
 1011551:	lea    rcx,[rbp-0x58]
 1011555:	call   QWORD PTR [rip+0xffffffffffff0035]        # 0x1001590
 101155b:	nop
 101155c:	lea    rcx,[rsp+0x70]
 1011561:	call   0x10166b0
 1011566:	nop
 1011567:	mov    rcx,QWORD PTR [rsp+0x48]
 101156c:	test   rcx,rcx
 101156f:	je     0x1011578
 1011571:	mov    rax,QWORD PTR [rcx]
 1011574:	call   QWORD PTR [rax+0x10]
 1011577:	nop
 1011578:	mov    rcx,QWORD PTR [rsp+0x30]
 101157d:	test   rcx,rcx
 1011580:	je     0x1011589
 1011582:	mov    rax,QWORD PTR [rcx]
 1011585:	call   QWORD PTR [rax+0x10]
 1011588:	nop
 1011589:	mov    rcx,QWORD PTR [rsp+0x40]
 101158e:	test   rcx,rcx
 1011591:	je     0x101159a
 1011593:	mov    rax,QWORD PTR [rcx]
 1011596:	call   QWORD PTR [rax+0x10]
 1011599:	nop
 101159a:	lea    rcx,[rsp+0x38]
 101159f:	call   0x10166b0
 10115a4:	mov    eax,edi
 10115a6:	mov    rcx,QWORD PTR [rbp+0x3f0]
 10115ad:	xor    rcx,rsp
 10115b0:	call   0x100c0d0
 10115b5:	add    rsp,0x500
 10115bc:	pop    r15
 10115be:	pop    r14
 10115c0:	pop    r12
 10115c2:	pop    rdi
 10115c3:	pop    rsi
 10115c4:	pop    rbx
 10115c5:	pop    rbp
 10115c6:	ret    
 10115c7:	int3   
 10115c8:	int3   
 10115c9:	int3   
 10115ca:	int3   
 10115cb:	int3   
 10115cc:	int3   
 10115cd:	int3   
 10115ce:	int3   
 10115cf:	int3   
 10115d0:	rex push rbp
 10115d2:	push   rsi
 10115d3:	push   rdi
 10115d4:	push   r14
 10115d6:	push   r15
 10115d8:	lea    rbp,[rsp-0x2b0]
 10115e0:	sub    rsp,0x3b0
 10115e7:	mov    QWORD PTR [rsp+0x68],0xfffffffffffffffe
 10115f0:	mov    QWORD PTR [rsp+0x3f8],rbx
 10115f8:	mov    rax,QWORD PTR [rip+0x13061]        # 0x1024660
 10115ff:	xor    rax,rsp
 1011602:	mov    QWORD PTR [rbp+0x2a0],rax
 1011609:	mov    rbx,r8
 101160c:	mov    r14,rdx
 101160f:	mov    rsi,rcx
 1011612:	xor    r15d,r15d
 1011615:	mov    edi,r15d
 1011618:	xor    edx,edx
 101161a:	lea    rcx,[rsp+0x40]
 101161f:	call   0x10166a0
 1011624:	nop
 1011625:	lea    rcx,[rsp+0x40]
 101162a:	call   0x10166e0
 101162f:	mov    rcx,rax
 1011632:	call   QWORD PTR [rip+0x1ae58]        # 0x102c490
 1011638:	test   eax,eax
 101163a:	je     0x101179f
 1011640:	lea    rcx,[rsp+0x70]
 1011645:	call   0x10169b0
 101164a:	nop
 101164b:	mov    QWORD PTR [rsp+0x48],r15
 1011650:	mov    QWORD PTR [rsp+0x50],r15
 1011655:	xor    edx,edx
 1011657:	lea    rcx,[rsp+0x58]
 101165c:	call   0x10166a0
 1011661:	nop
 1011662:	lea    rcx,[rsp+0x40]
 1011667:	call   0x10166d0
 101166c:	mov    r8,rax
 101166f:	mov    rdx,rbx
 1011672:	lea    rcx,[rsp+0x48]
 1011677:	call   0x1015b00
 101167c:	test   eax,eax
 101167e:	jne    0x10116be
 1011680:	lea    rax,[rbp-0x70]
 1011684:	mov    QWORD PTR [rsp+0x30],rax
 1011689:	lea    r9,[rsp+0x38]
 101168e:	mov    r8d,0x186
 1011694:	lea    rdx,[rbp-0x70]
 1011698:	mov    rcx,rbx
 101169b:	call   0x10149c0
 10116a0:	test   eax,eax
 10116a2:	je     0x1011789
 10116a8:	lea    edx,[r15+0x1]
 10116ac:	lea    r8,[rsp+0x30]
 10116b1:	mov    rcx,rsi
 10116b4:	call   0x1016c50
 10116b9:	jmp    0x1011789
 10116be:	mov    WORD PTR [rsp+0x38],r15w
 10116c4:	mov    QWORD PTR [rsp+0x30],r15
 10116c9:	lea    rax,[rsp+0x38]
 10116ce:	mov    QWORD PTR [rsp+0x20],rax
 10116d3:	lea    r9,[rsp+0x30]
 10116d8:	mov    r8,rbx
 10116db:	mov    rdx,QWORD PTR [rsp+0x50]
 10116e0:	mov    rcx,rsi
 10116e3:	call   0x1015c30
 10116e8:	mov    edi,eax
 10116ea:	mov    rbx,QWORD PTR [rsp+0x30]
 10116ef:	test   eax,eax
 10116f1:	je     0x101176e
 10116f3:	test   rbx,rbx
 10116f6:	je     0x101176e
 10116f8:	mov    rcx,rbx
 10116fb:	call   0x1016ae0
 1011700:	mov    r8,rax
 1011703:	lea    rax,[rsp+0x70]
 1011708:	mov    QWORD PTR [rsp+0x20],rax
 101170d:	mov    r9,QWORD PTR [rsp+0x50]
 1011712:	movzx  edx,WORD PTR [rsp+0x38]
 1011717:	mov    rcx,r14
 101171a:	call   QWORD PTR [rip+0x1adb0]        # 0x102c4d0
 1011720:	mov    edi,eax
 1011722:	test   eax,eax
 1011724:	jne    0x101176e
 1011726:	call   QWORD PTR [rip+0x1ae44]        # 0x102c570
 101172c:	cmp    WORD PTR [rax+0x2],di
 1011730:	jne    0x101174d
 1011732:	cmp    WORD PTR [rax+0x4],di
 1011736:	jne    0x101174d
 1011738:	cmp    WORD PTR [rax+0x6],di
 101173c:	jne    0x101174d
 101173e:	lea    edx,[rdi+0x13]
 1011741:	lea    ecx,[rdi+0x2]
 1011744:	xor    r8d,r8d
 1011747:	call   QWORD PTR [rip+0x1ae93]        # 0x102c5e0
 101174d:	mov    rax,QWORD PTR [rbp-0x80]
 1011751:	test   rax,rax
 1011754:	je     0x101176e
 1011756:	mov    QWORD PTR [rsp+0x38],rax
 101175b:	mov    edx,0x1
 1011760:	lea    r8,[rsp+0x38]
 1011765:	mov    rcx,rsi
 1011768:	call   0x1016c50
 101176d:	nop
 101176e:	test   rbx,rbx
 1011771:	je     0x1011784
 1011773:	mov    rcx,rbx
 1011776:	call   0x1016a70
 101177b:	mov    rcx,rbx
 101177e:	call   QWORD PTR [rip+0x1ae7c]        # 0x102c600
 1011784:	mov    QWORD PTR [rsp+0x30],r15
 1011789:	lea    rcx,[rsp+0x58]
 101178e:	call   0x10166b0
 1011793:	nop
 1011794:	lea    rcx,[rsp+0x70]
 1011799:	call   0x10169d0
 101179e:	nop
 101179f:	lea    rcx,[rsp+0x40]
 10117a4:	call   0x10166b0
 10117a9:	mov    eax,edi
 10117ab:	mov    rcx,QWORD PTR [rbp+0x2a0]
 10117b2:	xor    rcx,rsp
 10117b5:	call   0x100c0d0
 10117ba:	mov    rbx,QWORD PTR [rsp+0x3f8]
 10117c2:	add    rsp,0x3b0
 10117c9:	pop    r15
 10117cb:	pop    r14
 10117cd:	pop    rdi
 10117ce:	pop    rsi
 10117cf:	pop    rbp
 10117d0:	ret    
 10117d1:	int3   
 10117d2:	int3   
 10117d3:	int3   
 10117d4:	int3   
 10117d5:	int3   
 10117d6:	int3   
 10117d7:	int3   
 10117d8:	int3   
 10117d9:	int3   
 10117da:	int3   
 10117db:	int3   
 10117dc:	int3   
 10117dd:	int3   
 10117de:	int3   
 10117df:	int3   
 10117e0:	mov    QWORD PTR [rsp+0x20],r9
 10117e5:	push   rbp
 10117e6:	push   rsi
 10117e7:	push   rdi
 10117e8:	push   r12
 10117ea:	push   r13
 10117ec:	push   r14
 10117ee:	push   r15
 10117f0:	mov    rbp,rsp
 10117f3:	sub    rsp,0x60
 10117f7:	mov    QWORD PTR [rbp-0x28],0xfffffffffffffffe
 10117ff:	mov    QWORD PTR [rsp+0xa0],rbx
 1011807:	mov    r12,r8
 101180a:	mov    r10,rdx
 101180d:	mov    r13,rcx
 1011810:	xor    edi,edi
 1011812:	mov    esi,edi
 1011814:	mov    QWORD PTR [rbp-0x40],rdi
 1011818:	mov    DWORD PTR [rbp+0x48],edi
 101181b:	mov    ebx,edi
 101181d:	mov    QWORD PTR [rbp-0x30],rbx
 1011821:	mov    rax,QWORD PTR [rdx]
 1011824:	lea    r8,[rbp-0x40]
 1011828:	lea    rdx,[rip+0xffffffffffff3799]        # 0x1004fc8
 101182f:	mov    rcx,r10
 1011832:	call   QWORD PTR [rax+0x120]
 1011838:	test   eax,eax
 101183a:	js     0x1011979
 1011840:	mov    rcx,QWORD PTR [rbp-0x40]
 1011844:	mov    rax,QWORD PTR [rcx]
 1011847:	lea    rdx,[rbp+0x48]
 101184b:	call   QWORD PTR [rax+0x40]
 101184e:	test   eax,eax
 1011850:	js     0x1011979
 1011856:	movsxd rcx,DWORD PTR [rbp+0x48]
 101185a:	mov    eax,0x48
 101185f:	mul    rcx
 1011862:	mov    rcx,0xffffffffffffffff
 1011869:	cmovo  rax,rcx
 101186d:	mov    edx,eax
 101186f:	xor    ecx,ecx
 1011871:	call   QWORD PTR [rip+0x1ad81]        # 0x102c5f8
 1011877:	mov    r15,rax
 101187a:	mov    rbx,rax
 101187d:	mov    QWORD PTR [rbp-0x30],rax
 1011881:	test   rax,rax
 1011884:	je     0x1011979
 101188a:	lea    esi,[rdi+0x1]
 101188d:	mov    r14d,edi
 1011890:	mov    rdi,rax
 1011893:	mov    ecx,DWORD PTR [rbp+0x48]
 1011896:	cmp    r14d,ecx
 1011899:	jge    0x101195b
 101189f:	xor    esi,esi
 10118a1:	mov    QWORD PTR [rbp-0x20],rsi
 10118a5:	mov    QWORD PTR [rbp-0x18],rsi
 10118a9:	xor    edx,edx
 10118ab:	lea    rcx,[rbp-0x10]
 10118af:	call   0x10166a0
 10118b4:	nop
 10118b5:	mov    QWORD PTR [rbp-0x38],rsi
 10118b9:	mov    rcx,QWORD PTR [rbp-0x40]
 10118bd:	mov    rax,QWORD PTR [rcx]
 10118c0:	lea    rdx,[rbp-0x38]
 10118c4:	call   QWORD PTR [rax+0x48]
 10118c7:	test   eax,eax
 10118c9:	js     0x1011931
 10118cb:	mov    r9,r12
 10118ce:	mov    r8,QWORD PTR [rbp-0x38]
 10118d2:	lea    rdx,[rbp-0x20]
 10118d6:	mov    rcx,r13
 10118d9:	call   0x10151b0
 10118de:	test   eax,eax
 10118e0:	je     0x1011931
 10118e2:	mov    esi,0x1
 10118e7:	mov    rcx,QWORD PTR [rbp-0x18]
 10118eb:	mov    rax,QWORD PTR [rcx]
 10118ee:	mov    QWORD PTR [rdi],rax
 10118f1:	mov    rax,QWORD PTR [rcx+0x8]
 10118f5:	mov    QWORD PTR [rdi+0x8],rax
 10118f9:	mov    rax,QWORD PTR [rcx+0x10]
 10118fd:	mov    QWORD PTR [rdi+0x10],rax
 1011901:	mov    rax,QWORD PTR [rcx+0x18]
 1011905:	mov    QWORD PTR [rdi+0x18],rax
 1011909:	mov    rax,QWORD PTR [rcx+0x20]
 101190d:	mov    QWORD PTR [rdi+0x20],rax
 1011911:	mov    rax,QWORD PTR [rcx+0x28]
 1011915:	mov    QWORD PTR [rdi+0x28],rax
 1011919:	mov    rax,QWORD PTR [rcx+0x30]
 101191d:	mov    QWORD PTR [rdi+0x30],rax
 1011921:	mov    rax,QWORD PTR [rcx+0x38]
 1011925:	mov    QWORD PTR [rdi+0x38],rax
 1011929:	mov    rax,QWORD PTR [rcx+0x40]
 101192d:	mov    QWORD PTR [rdi+0x40],rax
 1011931:	mov    rcx,QWORD PTR [rbp-0x38]
 1011935:	test   rcx,rcx
 1011938:	je     0x1011941
 101193a:	mov    rax,QWORD PTR [rcx]
 101193d:	call   QWORD PTR [rax+0x10]
 1011940:	nop
 1011941:	lea    rcx,[rbp-0x10]
 1011945:	call   0x10166b0
 101194a:	inc    r14d
 101194d:	add    rdi,0x48
 1011951:	test   esi,esi
 1011953:	jne    0x1011893
 1011959:	jmp    0x1011977
 101195b:	test   esi,esi
 101195d:	je     0x1011977
 101195f:	xor    edi,edi
 1011961:	mov    ebx,edi
 1011963:	mov    QWORD PTR [rbp-0x30],rbx
 1011967:	mov    rax,QWORD PTR [rbp+0x58]
 101196b:	mov    QWORD PTR [rax],r15
 101196e:	mov    rax,QWORD PTR [rbp+0x60]
 1011972:	mov    WORD PTR [rax],cx
 1011975:	jmp    0x1011987
 1011977:	xor    edi,edi
 1011979:	mov    rax,QWORD PTR [rbp+0x58]
 101197d:	mov    QWORD PTR [rax],rdi
 1011980:	mov    rax,QWORD PTR [rbp+0x60]
 1011984:	mov    WORD PTR [rax],di
 1011987:	test   rbx,rbx
 101198a:	je     0x1011995
 101198c:	mov    rcx,rbx
 101198f:	call   QWORD PTR [rip+0x1ac6b]        # 0x102c600
 1011995:	mov    QWORD PTR [rbp-0x30],rdi
 1011999:	xor    ecx,ecx
 101199b:	call   0x100bccc
 10119a0:	nop
 10119a1:	mov    rcx,QWORD PTR [rbp-0x40]
 10119a5:	test   rcx,rcx
 10119a8:	je     0x10119b0
 10119aa:	mov    rdx,QWORD PTR [rcx]
 10119ad:	call   QWORD PTR [rdx+0x10]
 10119b0:	mov    eax,esi
 10119b2:	mov    rbx,QWORD PTR [rsp+0xa0]
 10119ba:	add    rsp,0x60
 10119be:	pop    r15
 10119c0:	pop    r14
 10119c2:	pop    r13
 10119c4:	pop    r12
 10119c6:	pop    rdi
 10119c7:	pop    rsi
 10119c8:	pop    rbp
 10119c9:	ret    
 10119ca:	int3   
 10119cb:	int3   
 10119cc:	int3   
 10119cd:	int3   
 10119ce:	int3   
 10119cf:	int3   
 10119d0:	mov    QWORD PTR [rsp+0x10],rbx
 10119d5:	mov    QWORD PTR [rsp+0x18],rsi
 10119da:	push   rdi
 10119db:	sub    rsp,0x20
 10119df:	mov    rsi,rdx
 10119e2:	mov    rdi,rcx
 10119e5:	test   rcx,rcx
 10119e8:	je     0x1011a57
 10119ea:	cmp    WORD PTR [rcx],0x0
 10119ee:	je     0x1011a57
 10119f0:	mov    QWORD PTR [rsp+0x30],rbp
 10119f5:	xor    ebx,ebx
 10119f7:	lea    rbp,[rip+0xffffffffffff23b2]        # 0x1003db0
 10119fe:	xchg   ax,ax
 1011a00:	movsxd rdx,ebx
 1011a03:	mov    r8d,0xff
 1011a09:	mov    rcx,rdi
 1011a0c:	imul   rdx,rdx,0x204
 1011a13:	add    rdx,rbp
 1011a16:	call   0x10174f4
 1011a1b:	test   eax,eax
 1011a1d:	je     0x1011a3d
 1011a1f:	inc    ebx
 1011a21:	cmp    ebx,0x3
 1011a24:	jb     0x1011a00
 1011a26:	xor    eax,eax
 1011a28:	mov    rbp,QWORD PTR [rsp+0x30]
 1011a2d:	mov    rbx,QWORD PTR [rsp+0x38]
 1011a32:	mov    rsi,QWORD PTR [rsp+0x40]
 1011a37:	add    rsp,0x20
 1011a3b:	pop    rdi
 1011a3c:	ret    
 1011a3d:	movsxd rax,ebx
 1011a40:	imul   rax,rax,0x204
 1011a47:	mov    eax,DWORD PTR [rax+rbp*1+0x200]
 1011a4e:	mov    DWORD PTR [rsi],eax
 1011a50:	mov    eax,0x1
 1011a55:	jmp    0x1011a28
 1011a57:	mov    rsi,QWORD PTR [rsp+0x40]
 1011a5c:	xor    ebx,ebx
 1011a5e:	lea    eax,[rbx+0x1]
 1011a61:	mov    DWORD PTR [rdx],ebx
 1011a63:	mov    rbx,QWORD PTR [rsp+0x38]
 1011a68:	add    rsp,0x20
 1011a6c:	pop    rdi
 1011a6d:	ret    
 1011a6e:	int3   
 1011a6f:	int3   
 1011a70:	int3   
 1011a71:	int3   
 1011a72:	int3   
 1011a73:	int3   
 1011a74:	int3   
 1011a75:	int3   
 1011a76:	int3   
 1011a77:	int3   
 1011a78:	int3   
 1011a79:	int3   
 1011a7a:	int3   
 1011a7b:	int3   
 1011a7c:	int3   
 1011a7d:	int3   
 1011a7e:	int3   
 1011a7f:	int3   
 1011a80:	mov    QWORD PTR [rsp+0x10],rbx
 1011a85:	mov    QWORD PTR [rsp+0x18],rsi
 1011a8a:	push   rdi
 1011a8b:	sub    rsp,0x20
 1011a8f:	mov    rsi,rdx
 1011a92:	mov    rdi,rcx
 1011a95:	test   rcx,rcx
 1011a98:	je     0x1011b07
 1011a9a:	cmp    WORD PTR [rcx],0x0
 1011a9e:	je     0x1011b07
 1011aa0:	mov    QWORD PTR [rsp+0x30],rbp
 1011aa5:	xor    ebx,ebx
 1011aa7:	lea    rbp,[rip+0xffffffffffff1af2]        # 0x10035a0
 1011aae:	xchg   ax,ax
 1011ab0:	movsxd rdx,ebx
 1011ab3:	mov    r8d,0xff
 1011ab9:	mov    rcx,rdi
 1011abc:	imul   rdx,rdx,0x204
 1011ac3:	add    rdx,rbp
 1011ac6:	call   0x10174f4
 1011acb:	test   eax,eax
 1011acd:	je     0x1011aed
 1011acf:	inc    ebx
 1011ad1:	cmp    ebx,0x4
 1011ad4:	jb     0x1011ab0
 1011ad6:	xor    eax,eax
 1011ad8:	mov    rbp,QWORD PTR [rsp+0x30]
 1011add:	mov    rbx,QWORD PTR [rsp+0x38]
 1011ae2:	mov    rsi,QWORD PTR [rsp+0x40]
 1011ae7:	add    rsp,0x20
 1011aeb:	pop    rdi
 1011aec:	ret    
 1011aed:	movsxd rax,ebx
 1011af0:	imul   rax,rax,0x204
 1011af7:	mov    eax,DWORD PTR [rax+rbp*1+0x200]
 1011afe:	mov    DWORD PTR [rsi],eax
 1011b00:	mov    eax,0x1
 1011b05:	jmp    0x1011ad8
 1011b07:	mov    rsi,QWORD PTR [rsp+0x40]
 1011b0c:	xor    ebx,ebx
 1011b0e:	lea    eax,[rbx+0x1]
 1011b11:	mov    DWORD PTR [rdx],ebx
 1011b13:	mov    rbx,QWORD PTR [rsp+0x38]
 1011b18:	add    rsp,0x20
 1011b1c:	pop    rdi
 1011b1d:	ret    
 1011b1e:	int3   
 1011b1f:	int3   
 1011b20:	int3   
 1011b21:	int3   
 1011b22:	int3   
 1011b23:	int3   
 1011b24:	int3   
 1011b25:	int3   
 1011b26:	int3   
 1011b27:	int3   
 1011b28:	int3   
 1011b29:	int3   
 1011b2a:	int3   
 1011b2b:	int3   
 1011b2c:	int3   
 1011b2d:	int3   
 1011b2e:	int3   
 1011b2f:	int3   
 1011b30:	test   edx,edx
 1011b32:	jne    0x1011e01
 1011b38:	push   rbp
 1011b39:	push   rsi
 1011b3a:	push   rdi
 1011b3b:	push   r14
 1011b3d:	push   r15
 1011b3f:	lea    rbp,[rsp-0x620]
 1011b47:	sub    rsp,0x720
 1011b4e:	mov    QWORD PTR [rsp+0x70],0xfffffffffffffffe
 1011b57:	mov    QWORD PTR [rsp+0x758],rbx
 1011b5f:	mov    rax,QWORD PTR [rip+0x12afa]        # 0x1024660
 1011b66:	xor    rax,rsp
 1011b69:	mov    QWORD PTR [rbp+0x610],rax
 1011b70:	mov    rbx,r8
 1011b73:	mov    r14,rcx
 1011b76:	add    rcx,0x70
 1011b7a:	call   0x1016990
 1011b7f:	mov    rdx,rax
 1011b82:	lea    rcx,[rsp+0x30]
 1011b87:	call   0x10166a0
 1011b8c:	nop
 1011b8d:	lea    rcx,[rsp+0x30]
 1011b92:	call   0x10166d0
 1011b97:	test   rax,rax
 1011b9a:	je     0x1011dd2
 1011ba0:	xor    edx,edx
 1011ba2:	lea    rcx,[rsp+0x38]
 1011ba7:	call   0x10166a0
 1011bac:	nop
 1011bad:	lea    rcx,[rsp+0x38]
 1011bb2:	call   0x10166e0
 1011bb7:	mov    rcx,rax
 1011bba:	call   QWORD PTR [rip+0x1a8d0]        # 0x102c490
 1011bc0:	test   eax,eax
 1011bc2:	je     0x1011dc7
 1011bc8:	lea    rcx,[rsp+0x38]
 1011bcd:	call   0x10166d0
 1011bd2:	mov    rcx,rax
 1011bd5:	lea    r8,[rsp+0x48]
 1011bda:	mov    rdx,rbx
 1011bdd:	call   QWORD PTR [rip+0x1a86d]        # 0x102c450
 1011be3:	test   eax,eax
 1011be5:	je     0x1011dc7
 1011beb:	lea    rcx,[rsp+0x30]
 1011bf0:	call   0x10166d0
 1011bf5:	mov    rcx,rax
 1011bf8:	call   QWORD PTR [rip+0x1a8ba]        # 0x102c4b8
 1011bfe:	test   eax,eax
 1011c00:	je     0x1011dc7
 1011c06:	mov    rax,QWORD PTR [r14+0x290]
 1011c0d:	mov    rsi,QWORD PTR [rax]
 1011c10:	test   rsi,rsi
 1011c13:	je     0x1011db3
 1011c19:	xor    r15d,r15d
 1011c1c:	nop    DWORD PTR [rax+0x0]
 1011c20:	lea    rdi,[rbp+0x300]
 1011c27:	lea    r9,[rsp+0x40]
 1011c2c:	mov    r8d,0x186
 1011c32:	lea    rdx,[rbp-0x10]
 1011c36:	mov    rcx,QWORD PTR [rsi+0x8]
 1011c3a:	call   0x10149c0
 1011c3f:	test   eax,eax
 1011c41:	je     0x1011da7
 1011c47:	mov    rax,QWORD PTR [rsp+0x48]
 1011c4c:	mov    rcx,QWORD PTR [rax]
 1011c4f:	add    rcx,0x38
 1011c53:	mov    r8d,0x32
 1011c59:	lea    rdx,[rbp-0x80]
 1011c5d:	call   0x1017410
 1011c62:	mov    r11d,DWORD PTR [rsp+0x40]
 1011c67:	cmp    r11d,0x2
 1011c6b:	jne    0x1011c9d
 1011c6d:	lea    rcx,[rbp-0x80]
 1011c71:	or     rax,0xffffffffffffffff
 1011c75:	inc    rax
 1011c78:	cmp    WORD PTR [rcx+rax*2],0x0
 1011c7d:	jne    0x1011c75
 1011c7f:	mov    r8d,eax
 1011c82:	lea    rdx,[rbp-0x10]
 1011c86:	lea    rcx,[rbp-0x80]
 1011c8a:	call   0x10174f4
 1011c8f:	mov    ebx,r15d
 1011c92:	test   eax,eax
 1011c94:	sete   bl
 1011c97:	lea    rdi,[rbp-0x10]
 1011c9b:	jmp    0x1011cf6
 1011c9d:	mov    rax,QWORD PTR [rsp+0x48]
 1011ca2:	cmp    r11d,0x1
 1011ca6:	jne    0x1011d00
 1011ca8:	mov    rcx,QWORD PTR [rax]
 1011cab:	mov    rcx,QWORD PTR [rcx+0x8]
 1011caf:	or     rax,0xffffffffffffffff
 1011cb3:	inc    rax
 1011cb6:	cmp    WORD PTR [rcx+rax*2],0x0
 1011cbb:	jne    0x1011cb3
 1011cbd:	mov    r8d,eax
 1011cc0:	lea    rdx,[rbp-0x10]
 1011cc4:	call   0x10174f4
 1011cc9:	mov    ebx,r15d
 1011ccc:	test   eax,eax
 1011cce:	sete   bl
 1011cd1:	lea    rax,[rbp-0x10]
 1011cd5:	mov    QWORD PTR [rsp+0x20],rax
 1011cda:	lea    r9,[rbp-0x80]
 1011cde:	lea    r8,[rip+0xffffffffffff35db]        # 0x10052c0
 1011ce5:	mov    edx,0x186
 1011cea:	lea    rcx,[rbp+0x300]
 1011cf1:	call   0x100ae30
 1011cf6:	test   ebx,ebx
 1011cf8:	je     0x1011da7
 1011cfe:	jmp    0x1011d31
 1011d00:	mov    rax,QWORD PTR [rax]
 1011d03:	lea    rcx,[rbp-0x10]
 1011d07:	mov    QWORD PTR [rsp+0x28],rcx
 1011d0c:	mov    rax,QWORD PTR [rax+0x8]
 1011d10:	mov    QWORD PTR [rsp+0x20],rax
 1011d15:	lea    r9,[rbp-0x80]
 1011d19:	lea    r8,[rip+0xffffffffffff3588]        # 0x10052a8
 1011d20:	mov    edx,0x186
 1011d25:	lea    rcx,[rbp+0x300]
 1011d2c:	call   0x100ae30
 1011d31:	mov    QWORD PTR [rsp+0x50],r15
 1011d36:	mov    QWORD PTR [rsp+0x58],r15
 1011d3b:	xor    edx,edx
 1011d3d:	lea    rcx,[rsp+0x60]
 1011d42:	call   0x10166a0
 1011d47:	nop
 1011d48:	lea    rcx,[rsp+0x38]
 1011d4d:	call   0x10166d0
 1011d52:	mov    r8,rax
 1011d55:	mov    rdx,rdi
 1011d58:	lea    rcx,[rsp+0x50]
 1011d5d:	call   0x1015250
 1011d62:	test   eax,eax
 1011d64:	je     0x1011d9d
 1011d66:	mov    rdi,QWORD PTR [rsp+0x58]
 1011d6b:	lea    rcx,[rsp+0x38]
 1011d70:	call   0x10166d0
 1011d75:	mov    rbx,rax
 1011d78:	lea    rcx,[rsp+0x30]
 1011d7d:	call   0x10166d0
 1011d82:	mov    rdx,rax
 1011d85:	mov    rcx,QWORD PTR [rsi+0x8]
 1011d89:	mov    QWORD PTR [rsp+0x20],rcx
 1011d8e:	mov    r9,rbx
 1011d91:	mov    r8,rdi
 1011d94:	mov    rcx,r14
 1011d97:	call   0x1010830
 1011d9c:	nop
 1011d9d:	lea    rcx,[rsp+0x60]
 1011da2:	call   0x10166b0
 1011da7:	mov    rsi,QWORD PTR [rsi]
 1011daa:	test   rsi,rsi
 1011dad:	jne    0x1011c20
 1011db3:	lea    rcx,[rsp+0x30]
 1011db8:	call   0x10166d0
 1011dbd:	mov    rcx,rax
 1011dc0:	call   QWORD PTR [rip+0x1a6fa]        # 0x102c4c0
 1011dc6:	nop
 1011dc7:	lea    rcx,[rsp+0x38]
 1011dcc:	call   0x10166b0
 1011dd1:	nop
 1011dd2:	lea    rcx,[rsp+0x30]
 1011dd7:	call   0x10166b0
 1011ddc:	mov    rcx,QWORD PTR [rbp+0x610]
 1011de3:	xor    rcx,rsp
 1011de6:	call   0x100c0d0
 1011deb:	mov    rbx,QWORD PTR [rsp+0x758]
 1011df3:	add    rsp,0x720
 1011dfa:	pop    r15
 1011dfc:	pop    r14
 1011dfe:	pop    rdi
 1011dff:	pop    rsi
 1011e00:	pop    rbp
 1011e01:	repz ret 
 1011e03:	int3   
 1011e04:	int3   
 1011e05:	int3   
 1011e06:	int3   
 1011e07:	int3   
 1011e08:	int3   
 1011e09:	int3   
 1011e0a:	int3   
 1011e0b:	int3   
 1011e0c:	int3   
 1011e0d:	int3   
 1011e0e:	int3   
 1011e0f:	int3   
 1011e10:	sub    rsp,0x28
 1011e14:	mov    rcx,QWORD PTR [rcx]
 1011e17:	test   rcx,rcx
 1011e1a:	je     0x1011e22
 1011e1c:	mov    rax,QWORD PTR [rcx]
 1011e1f:	call   QWORD PTR [rax+0x10]
 1011e22:	add    rsp,0x28
 1011e26:	ret    
 1011e27:	int3   
 1011e28:	int3   
 1011e29:	int3   
 1011e2a:	int3   
 1011e2b:	int3   
 1011e2c:	int3   
 1011e2d:	int3   
 1011e2e:	int3   
 1011e2f:	int3   
 1011e30:	mov    QWORD PTR [rsp+0x8],rcx
 1011e35:	push   rdi
 1011e36:	sub    rsp,0x30
 1011e3a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1011e43:	mov    QWORD PTR [rsp+0x50],rbx
 1011e48:	mov    rbx,rcx
 1011e4b:	lea    rax,[rip+0xffffffffffff31ce]        # 0x1005020
 1011e52:	mov    QWORD PTR [rcx],rax
 1011e55:	lea    rax,[rcx+0x228]
 1011e5c:	mov    QWORD PTR [rsp+0x48],rax
 1011e61:	xor    edi,edi
 1011e63:	mov    QWORD PTR [rax],rdi
 1011e66:	lea    rcx,[rip+0xffffffffffff320b]        # 0x1005078
 1011e6d:	call   QWORD PTR [rip+0xfffffffffffef705]        # 0x1001578
 1011e73:	mov    QWORD PTR [rbx+0x218],rax
 1011e7a:	mov    WORD PTR [rbx+0x10],di
 1011e7e:	mov    QWORD PTR [rbx+0x8],rdi
 1011e82:	xor    eax,eax
 1011e84:	mov    DWORD PTR [rbx+0x220],eax
 1011e8a:	mov    rax,rbx
 1011e8d:	mov    rbx,QWORD PTR [rsp+0x50]
 1011e92:	add    rsp,0x30
 1011e96:	pop    rdi
 1011e97:	ret    
 1011e98:	int3   
 1011e99:	int3   
 1011e9a:	int3   
 1011e9b:	int3   
 1011e9c:	int3   
 1011e9d:	int3   
 1011e9e:	int3   
 1011e9f:	int3   
 1011ea0:	mov    QWORD PTR [rsp+0x8],rcx
 1011ea5:	push   rdi
 1011ea6:	sub    rsp,0x30
 1011eaa:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1011eb3:	mov    QWORD PTR [rsp+0x48],rbx
 1011eb8:	mov    QWORD PTR [rsp+0x50],rsi
 1011ebd:	mov    rdi,rcx
 1011ec0:	lea    rax,[rip+0xffffffffffff3159]        # 0x1005020
 1011ec7:	mov    QWORD PTR [rcx],rax
 1011eca:	mov    rbx,QWORD PTR [rcx+0x8]
 1011ece:	xor    esi,esi
 1011ed0:	test   rbx,rbx
 1011ed3:	je     0x1011eee
 1011ed5:	mov    rcx,QWORD PTR [rbx]
 1011ed8:	test   rcx,rcx
 1011edb:	je     0x1011eee
 1011edd:	mov    rax,QWORD PTR [rcx]
 1011ee0:	mov    QWORD PTR [rbx],rax
 1011ee3:	mov    QWORD PTR [rcx],rsi
 1011ee6:	call   QWORD PTR [rip+0x1a714]        # 0x102c600
 1011eec:	jmp    0x1011ed5
 1011eee:	mov    rcx,QWORD PTR [rdi+0x8]
 1011ef2:	test   rcx,rcx
 1011ef5:	je     0x1011efd
 1011ef7:	call   QWORD PTR [rip+0x1a703]        # 0x102c600
 1011efd:	mov    rcx,QWORD PTR [rdi+0x218]
 1011f04:	call   QWORD PTR [rip+0xfffffffffffef666]        # 0x1001570
 1011f0a:	nop
 1011f0b:	lea    rbx,[rdi+0x228]
 1011f12:	mov    QWORD PTR [rsp+0x40],rbx
 1011f17:	mov    rcx,QWORD PTR [rbx]
 1011f1a:	test   rcx,rcx
 1011f1d:	je     0x1011f25
 1011f1f:	call   QWORD PTR [rip+0x1a6db]        # 0x102c600
 1011f25:	mov    QWORD PTR [rbx],rsi
 1011f28:	mov    rcx,QWORD PTR [rbx]
 1011f2b:	mov    rbx,QWORD PTR [rsp+0x48]
 1011f30:	mov    rsi,QWORD PTR [rsp+0x50]
 1011f35:	add    rsp,0x30
 1011f39:	pop    rdi
 1011f3a:	jmp    0x100bccc
 1011f3f:	int3   
 1011f40:	int3   
 1011f41:	int3   
 1011f42:	int3   
 1011f43:	int3   
 1011f44:	int3   
 1011f45:	int3   
 1011f46:	int3   
 1011f47:	int3   
 1011f48:	int3   
 1011f49:	int3   
 1011f4a:	int3   
 1011f4b:	int3   
 1011f4c:	int3   
 1011f4d:	int3   
 1011f4e:	int3   
 1011f4f:	int3   
 1011f50:	rex push rdi
 1011f52:	sub    rsp,0x30
 1011f56:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1011f5f:	mov    QWORD PTR [rsp+0x48],rbx
 1011f64:	mov    r11,rdx
 1011f67:	mov    rdi,rcx
 1011f6a:	xor    ebx,ebx
 1011f6c:	mov    QWORD PTR [rsp+0x40],rbx
 1011f71:	lea    rdx,[rcx+0x10]
 1011f75:	mov    r8d,0x104
 1011f7b:	mov    r9d,r8d
 1011f7e:	mov    rax,rdx
 1011f81:	mov    r10d,ebx
 1011f84:	cmp    WORD PTR [rax],r10w
 1011f88:	je     0x1011f95
 1011f8a:	add    rax,0x2
 1011f8e:	dec    r9
 1011f91:	jne    0x1011f84
 1011f93:	jmp    0x1011f9a
 1011f95:	test   r9,r9
 1011f98:	jne    0x1011fa5
 1011f9a:	mov    r10d,0x80070057
 1011fa0:	mov    rcx,rbx
 1011fa3:	jmp    0x1011fab
 1011fa5:	mov    rcx,r8
 1011fa8:	sub    rcx,r9
 1011fab:	test   r10d,r10d
 1011fae:	js     0x1012069
 1011fb4:	sub    r8,rcx
 1011fb7:	lea    rax,[rdx+rcx*2]
 1011fbb:	mov    r10d,ebx
 1011fbe:	je     0x1011ff5
 1011fc0:	add    rcx,0x7ffffefb
 1011fc7:	add    rcx,r8
 1011fca:	sub    r11,rax
 1011fcd:	nop    DWORD PTR [rax]
 1011fd0:	test   rcx,rcx
 1011fd3:	je     0x1011ff0
 1011fd5:	movzx  edx,WORD PTR [r11+rax*1]
 1011fda:	test   dx,dx
 1011fdd:	je     0x1011ff0
 1011fdf:	mov    WORD PTR [rax],dx
 1011fe2:	add    rax,0x2
 1011fe6:	dec    rcx
 1011fe9:	dec    r8
 1011fec:	jne    0x1011fd0
 1011fee:	jmp    0x1011ff5
 1011ff0:	test   r8,r8
 1011ff3:	jne    0x1011fff
 1011ff5:	sub    rax,0x2
 1011ff9:	mov    r10d,0x8007007a
 1011fff:	mov    WORD PTR [rax],bx
 1012002:	test   r10d,r10d
 1012005:	js     0x1012069
 1012007:	lea    rdx,[rsp+0x40]
 101200c:	mov    rcx,rdi
 101200f:	call   0x1012b20
 1012014:	mov    ebx,eax
 1012016:	test   eax,eax
 1012018:	jns    0x101202e
 101201a:	mov    rcx,QWORD PTR [rsp+0x40]
 101201f:	test   rcx,rcx
 1012022:	je     0x101202a
 1012024:	mov    rax,QWORD PTR [rcx]
 1012027:	call   QWORD PTR [rax+0x10]
 101202a:	mov    eax,ebx
 101202c:	jmp    0x101206c
 101202e:	mov    rbx,QWORD PTR [rsp+0x40]
 1012033:	mov    rdx,rbx
 1012036:	mov    rcx,rdi
 1012039:	call   0x1013300
 101203e:	test   eax,eax
 1012040:	je     0x1012054
 1012042:	test   rbx,rbx
 1012045:	je     0x1012050
 1012047:	mov    rax,QWORD PTR [rbx]
 101204a:	mov    rcx,rbx
 101204d:	call   QWORD PTR [rax+0x10]
 1012050:	xor    eax,eax
 1012052:	jmp    0x101206c
 1012054:	test   rbx,rbx
 1012057:	je     0x1012062
 1012059:	mov    rax,QWORD PTR [rbx]
 101205c:	mov    rcx,rbx
 101205f:	call   QWORD PTR [rax+0x10]
 1012062:	mov    eax,0x80004005
 1012067:	jmp    0x101206c
 1012069:	mov    eax,r10d
 101206c:	mov    rbx,QWORD PTR [rsp+0x48]
 1012071:	add    rsp,0x30
 1012075:	pop    rdi
 1012076:	ret    
 1012077:	int3   
 1012078:	int3   
 1012079:	int3   
 101207a:	int3   
 101207b:	int3   
 101207c:	int3   
 101207d:	int3   
 101207e:	int3   
 101207f:	int3   
 1012080:	rex push rsi
 1012082:	push   rdi
 1012083:	push   r14
 1012085:	sub    rsp,0x30
 1012089:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1012092:	mov    QWORD PTR [rsp+0x50],rbx
 1012097:	mov    QWORD PTR [rsp+0x58],rbp
 101209c:	mov    rsi,rcx
 101209f:	mov    edi,0x80004005
 10120a4:	xor    r14d,r14d
 10120a7:	mov    ebx,r14d
 10120aa:	mov    QWORD PTR [rsp+0x60],rbx
 10120af:	mov    rcx,rdx
 10120b2:	call   QWORD PTR [rip+0xfffffffffffef4c0]        # 0x1001578
 10120b8:	mov    rbp,rax
 10120bb:	test   rax,rax
 10120be:	je     0x10120fd
 10120c0:	mov    rcx,QWORD PTR [rsi+0x218]
 10120c7:	call   QWORD PTR [rip+0xfffffffffffef4a3]        # 0x1001570
 10120cd:	mov    QWORD PTR [rsi+0x218],rbp
 10120d4:	lea    rdx,[rsp+0x60]
 10120d9:	mov    rcx,rsi
 10120dc:	call   0x1012b20
 10120e1:	mov    edi,eax
 10120e3:	mov    rbx,QWORD PTR [rsp+0x60]
 10120e8:	test   eax,eax
 10120ea:	js     0x10120fd
 10120ec:	mov    rdx,rbx
 10120ef:	mov    rcx,rsi
 10120f2:	call   0x1013300
 10120f7:	test   eax,eax
 10120f9:	cmovne edi,r14d
 10120fd:	test   rbx,rbx
 1012100:	je     0x101210b
 1012102:	mov    rax,QWORD PTR [rbx]
 1012105:	mov    rcx,rbx
 1012108:	call   QWORD PTR [rax+0x10]
 101210b:	mov    eax,edi
 101210d:	mov    rbx,QWORD PTR [rsp+0x50]
 1012112:	mov    rbp,QWORD PTR [rsp+0x58]
 1012117:	add    rsp,0x30
 101211b:	pop    r14
 101211d:	pop    rdi
 101211e:	pop    rsi
 101211f:	ret    
 1012120:	int3   
 1012121:	int3   
 1012122:	int3   
 1012123:	int3   
 1012124:	int3   
 1012125:	int3   
 1012126:	int3   
 1012127:	int3   
 1012128:	int3   
 1012129:	int3   
 101212a:	int3   
 101212b:	int3   
 101212c:	int3   
 101212d:	int3   
 101212e:	int3   
 101212f:	int3   
 1012130:	rex push rbp
 1012132:	push   rsi
 1012133:	push   rdi
 1012134:	push   r14
 1012136:	push   r15
 1012138:	sub    rsp,0x30
 101213c:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1012145:	mov    QWORD PTR [rsp+0x60],rbx
 101214a:	mov    r15,rdx
 101214d:	xor    r14d,r14d
 1012150:	mov    QWORD PTR [rdx],r14
 1012153:	mov    ebp,r14d
 1012156:	mov    QWORD PTR [rsp+0x70],r14
 101215b:	lea    rdx,[rsp+0x70]
 1012160:	call   0x1012b20
 1012165:	test   eax,eax
 1012167:	js     0x101221f
 101216d:	lea    edx,[r14+0x20]
 1012171:	xor    ecx,ecx
 1012173:	call   QWORD PTR [rip+0x1a47f]        # 0x102c5f8
 1012179:	mov    rsi,rax
 101217c:	mov    QWORD PTR [rsp+0x68],rax
 1012181:	test   rax,rax
 1012184:	je     0x10121ab
 1012186:	mov    DWORD PTR [rax+0x8],0x1
 101218d:	lea    rax,[rip+0xffffffffffff2e44]        # 0x1004fd8
 1012194:	mov    QWORD PTR [rsi],rax
 1012197:	lea    rax,[rip+0xffffffffffff2e9a]        # 0x1005038
 101219e:	mov    QWORD PTR [rsi],rax
 10121a1:	mov    QWORD PTR [rsi+0x10],r14
 10121a5:	mov    QWORD PTR [rsi+0x18],r14
 10121a9:	jmp    0x10121ae
 10121ab:	mov    rsi,r14
 10121ae:	mov    rdi,rsi
 10121b1:	mov    QWORD PTR [rsp+0x68],rsi
 10121b6:	mov    rbx,QWORD PTR [rsp+0x70]
 10121bb:	test   rsi,rsi
 10121be:	je     0x10121f9
 10121c0:	mov    rax,QWORD PTR [rbx]
 10121c3:	lea    r8,[rsp+0x78]
 10121c8:	lea    rdx,[rip+0xffffffffffff2eb1]        # 0x1005080
 10121cf:	mov    rcx,rbx
 10121d2:	call   QWORD PTR [rax+0x120]
 10121d8:	test   eax,eax
 10121da:	js     0x10121f9
 10121dc:	mov    rdx,QWORD PTR [rsp+0x78]
 10121e1:	mov    rcx,rsi
 10121e4:	call   0x10139a0
 10121e9:	mov    rdi,r14
 10121ec:	mov    QWORD PTR [rsp+0x68],r14
 10121f1:	mov    QWORD PTR [r15],rsi
 10121f4:	mov    ebp,0x1
 10121f9:	test   rdi,rdi
 10121fc:	je     0x1012224
 10121fe:	add    rdi,0x8
 1012202:	or     eax,0xffffffff
 1012205:	lock xadd DWORD PTR [rdi],eax
 1012209:	dec    eax
 101220b:	jne    0x101221f
 101220d:	test   rdi,rdi
 1012210:	je     0x1012216
 1012212:	lea    r14,[rdi-0x8]
 1012216:	mov    rax,QWORD PTR [r14]
 1012219:	mov    rcx,r14
 101221c:	call   QWORD PTR [rax+0x8]
 101221f:	mov    rbx,QWORD PTR [rsp+0x70]
 1012224:	test   rbx,rbx
 1012227:	je     0x1012232
 1012229:	mov    rdx,QWORD PTR [rbx]
 101222c:	mov    rcx,rbx
 101222f:	call   QWORD PTR [rdx+0x10]
 1012232:	mov    eax,ebp
 1012234:	mov    rbx,QWORD PTR [rsp+0x60]
 1012239:	add    rsp,0x30
 101223d:	pop    r15
 101223f:	pop    r14
 1012241:	pop    rdi
 1012242:	pop    rsi
 1012243:	pop    rbp
 1012244:	ret    
 1012245:	int3   
 1012246:	int3   
 1012247:	int3   
 1012248:	int3   
 1012249:	int3   
 101224a:	int3   
 101224b:	int3   
 101224c:	int3   
 101224d:	int3   
 101224e:	int3   
 101224f:	int3   
 1012250:	mov    QWORD PTR [rsp+0x20],r9
 1012255:	mov    QWORD PTR [rsp+0x18],r8
 101225a:	mov    QWORD PTR [rsp+0x10],rdx
 101225f:	mov    QWORD PTR [rsp+0x8],rcx
 1012264:	push   rbp
 1012265:	push   rbx
 1012266:	push   rsi
 1012267:	push   rdi
 1012268:	push   r12
 101226a:	push   r13
 101226c:	push   r14
 101226e:	push   r15
 1012270:	lea    rbp,[rsp-0x1f]
 1012275:	sub    rsp,0xf8
 101227c:	mov    QWORD PTR [rbp-0x19],0xfffffffffffffffe
 1012284:	mov    r14,rcx
 1012287:	xor    r12d,r12d
 101228a:	mov    r13d,r12d
 101228d:	mov    DWORD PTR [rsp+0x50],r12d
 1012292:	mov    esi,r12d
 1012295:	add    rcx,0x220
 101229c:	call   0x1016240
 10122a1:	test   eax,eax
 10122a3:	je     0x1012971
 10122a9:	cmp    WORD PTR [r14+0x10],si
 10122ae:	je     0x1012971
 10122b4:	mov    QWORD PTR [rsp+0x28],r12
 10122b9:	lea    rdx,[rsp+0x28]
 10122be:	mov    rcx,r14
 10122c1:	call   0x1012b20
 10122c6:	test   eax,eax
 10122c8:	js     0x101295e
 10122ce:	mov    r15d,0x8
 10122d4:	mov    edx,r15d
 10122d7:	xor    ecx,ecx
 10122d9:	call   QWORD PTR [rip+0x1a319]        # 0x102c5f8
 10122df:	mov    rbx,rax
 10122e2:	mov    QWORD PTR [rbp-0x49],rax
 10122e6:	test   rax,rax
 10122e9:	je     0x10122f0
 10122eb:	mov    QWORD PTR [rax],r12
 10122ee:	jmp    0x10122f7
 10122f0:	mov    rbx,r12
 10122f3:	mov    QWORD PTR [rbp-0x49],rbx
 10122f7:	mov    QWORD PTR [rbp-0x69],rbx
 10122fb:	mov    rdi,QWORD PTR [rsp+0x28]
 1012300:	test   rbx,rbx
 1012303:	je     0x1012942
 1012309:	mov    r8,rbx
 101230c:	mov    rdx,rdi
 101230f:	mov    rcx,r14
 1012312:	call   0x10134a0
 1012317:	test   eax,eax
 1012319:	je     0x1012942
 101231f:	mov    rbx,QWORD PTR [rbx]
 1012322:	mov    QWORD PTR [rsp+0x38],r12
 1012327:	mov    QWORD PTR [rsp+0x48],r12
 101232c:	mov    QWORD PTR [rsp+0x40],r12
 1012331:	mov    QWORD PTR [rsp+0x30],r12
 1012336:	mov    rax,QWORD PTR [rdi]
 1012339:	lea    rdx,[rsp+0x38]
 101233e:	mov    rcx,rdi
 1012341:	call   QWORD PTR [rax+0x180]
 1012347:	test   eax,eax
 1012349:	js     0x10128fe
 101234f:	mov    rax,QWORD PTR [rdi]
 1012352:	lea    rdx,[rsp+0x48]
 1012357:	mov    rcx,rdi
 101235a:	call   QWORD PTR [rax+0x180]
 1012360:	test   eax,eax
 1012362:	js     0x10128fe
 1012368:	mov    rax,QWORD PTR [rdi]
 101236b:	lea    rdx,[rsp+0x40]
 1012370:	mov    rcx,rdi
 1012373:	call   QWORD PTR [rax+0x180]
 1012379:	test   eax,eax
 101237b:	js     0x10128fe
 1012381:	mov    esi,0x1
 1012386:	mov    rax,QWORD PTR [r14+0x8]
 101238a:	mov    r12,QWORD PTR [rax]
 101238d:	nop    DWORD PTR [rax]
 1012390:	test   r12,r12
 1012393:	je     0x1012577
 1012399:	test   rbx,rbx
 101239c:	je     0x1012479
 10123a2:	data16 data16 data16 data16 data16 nop WORD PTR [rax+rax*1+0x0]
 10123b0:	mov    r8d,0x100
 10123b6:	lea    rdx,[r12+0x8]
 10123bb:	lea    rcx,[rbx+0x8]
 10123bf:	call   0x10174f4
 10123c4:	test   eax,eax
 10123c6:	jns    0x1012408
 10123c8:	test   esi,esi
 10123ca:	je     0x10123fc
 10123cc:	lea    r8,[rsp+0x30]
 10123d1:	lea    rdx,[rbx+0x8]
 10123d5:	mov    rcx,QWORD PTR [rbp+0x67]
 10123d9:	call   0x10133b0
 10123de:	test   eax,eax
 10123e0:	je     0x10123fc
 10123e2:	mov    rdx,QWORD PTR [rsp+0x38]
 10123e7:	mov    rcx,QWORD PTR [rsp+0x30]
 10123ec:	call   0x10136f0
 10123f1:	test   eax,eax
 10123f3:	je     0x10123fc
 10123f5:	mov    esi,0x1
 10123fa:	jmp    0x10123fe
 10123fc:	xor    esi,esi
 10123fe:	mov    rbx,QWORD PTR [rbx]
 1012401:	test   rbx,rbx
 1012404:	jne    0x10123b0
 1012406:	jmp    0x1012473
 1012408:	test   rbx,rbx
 101240b:	je     0x1012473
 101240d:	mov    r8d,0x100
 1012413:	lea    rdx,[r12+0x8]
 1012418:	lea    rcx,[rbx+0x8]
 101241c:	call   0x10174f4
 1012421:	test   eax,eax
 1012423:	jne    0x1012473
 1012425:	mov    eax,DWORD PTR [r12+0x208]
 101242d:	cmp    DWORD PTR [rbx+0x208],eax
 1012433:	je     0x101246b
 1012435:	test   esi,esi
 1012437:	je     0x1012469
 1012439:	lea    r8,[rsp+0x30]
 101243e:	lea    rdx,[rbx+0x8]
 1012442:	mov    rcx,QWORD PTR [rbp+0x67]
 1012446:	call   0x10133b0
 101244b:	test   eax,eax
 101244d:	je     0x1012469
 101244f:	mov    rdx,QWORD PTR [rsp+0x48]
 1012454:	mov    rcx,QWORD PTR [rsp+0x30]
 1012459:	call   0x10136f0
 101245e:	test   eax,eax
 1012460:	je     0x1012469
 1012462:	mov    esi,0x1
 1012467:	jmp    0x101246b
 1012469:	xor    esi,esi
 101246b:	mov    rbx,QWORD PTR [rbx]
 101246e:	jmp    0x1012559
 1012473:	mov    r15d,0x8
 1012479:	mov    QWORD PTR [rbp-0x79],0x0
 1012481:	test   esi,esi
 1012483:	je     0x10124a7
 1012485:	mov    rax,QWORD PTR [rdi]
 1012488:	lea    r8,[rbp-0x79]
 101248c:	lea    rdx,[rip+0xffffffffffff2cd5]        # 0x1005168
 1012493:	mov    rcx,rdi
 1012496:	call   QWORD PTR [rax+0x178]
 101249c:	test   eax,eax
 101249e:	js     0x10124a7
 10124a0:	mov    eax,0x1
 10124a5:	jmp    0x10124a9
 10124a7:	xor    eax,eax
 10124a9:	test   eax,eax
 10124ab:	je     0x1012510
 10124ad:	lea    rsi,[r12+0x8]
 10124b2:	mov    WORD PTR [rbp-0x31],r15w
 10124b7:	mov    rcx,rsi
 10124ba:	call   QWORD PTR [rip+0xfffffffffffef0b8]        # 0x1001578
 10124c0:	mov    QWORD PTR [rbp-0x29],rax
 10124c4:	test   rax,rax
 10124c7:	jne    0x10124d2
 10124c9:	test   rsi,rsi
 10124cc:	jne    0x101256c
 10124d2:	or     r13d,0x1
 10124d6:	mov    DWORD PTR [rsp+0x50],r13d
 10124db:	movups xmm0,XMMWORD PTR [rbp-0x31]
 10124df:	movaps XMMWORD PTR [rbp-0x9],xmm0
 10124e3:	movsd  xmm1,QWORD PTR [rbp-0x21]
 10124e8:	movsd  QWORD PTR [rbp+0x7],xmm1
 10124ed:	mov    rcx,QWORD PTR [rbp-0x79]
 10124f1:	mov    rax,QWORD PTR [rcx]
 10124f4:	lea    r8,[rbp-0x9]
 10124f8:	lea    rdx,[rip+0xffffffffffff1f29]        # 0x1004428
 10124ff:	call   QWORD PTR [rax+0x168]
 1012505:	test   eax,eax
 1012507:	js     0x1012510
 1012509:	mov    esi,0x1
 101250e:	jmp    0x1012512
 1012510:	xor    esi,esi
 1012512:	test   r13b,0x1
 1012516:	je     0x101252b
 1012518:	and    r13d,0xfffffffe
 101251c:	mov    DWORD PTR [rsp+0x50],r13d
 1012521:	lea    rcx,[rbp-0x31]
 1012525:	call   QWORD PTR [rip+0xfffffffffffef065]        # 0x1001590
 101252b:	test   esi,esi
 101252d:	je     0x1012548
 101252f:	mov    rdx,QWORD PTR [rsp+0x40]
 1012534:	mov    rcx,QWORD PTR [rbp-0x79]
 1012538:	call   0x10136f0
 101253d:	test   eax,eax
 101253f:	je     0x1012548
 1012541:	mov    esi,0x1
 1012546:	jmp    0x101254a
 1012548:	xor    esi,esi
 101254a:	mov    rcx,QWORD PTR [rbp-0x79]
 101254e:	test   rcx,rcx
 1012551:	je     0x1012559
 1012553:	mov    rax,QWORD PTR [rcx]
 1012556:	call   QWORD PTR [rax+0x10]
 1012559:	mov    r12,QWORD PTR [r12]
 101255d:	test   esi,esi
 101255f:	je     0x10125c1
 1012561:	mov    r15d,0x8
 1012567:	jmp    0x1012390
 101256c:	mov    ecx,0x8007000e
 1012571:	call   0x1017700
 1012576:	nop
 1012577:	test   esi,esi
 1012579:	je     0x10125c1
 101257b:	mov    r14,QWORD PTR [rbp+0x67]
 101257f:	nop
 1012580:	test   rbx,rbx
 1012583:	je     0x10125c1
 1012585:	test   esi,esi
 1012587:	je     0x10125b8
 1012589:	lea    rdx,[rbx+0x8]
 101258d:	lea    r8,[rsp+0x30]
 1012592:	mov    rcx,r14
 1012595:	call   0x10133b0
 101259a:	test   eax,eax
 101259c:	je     0x10125b8
 101259e:	mov    rdx,QWORD PTR [rsp+0x38]
 10125a3:	mov    rcx,QWORD PTR [rsp+0x30]
 10125a8:	call   0x10136f0
 10125ad:	test   eax,eax
 10125af:	je     0x10125b8
 10125b1:	mov    esi,0x1
 10125b6:	jmp    0x10125ba
 10125b8:	xor    esi,esi
 10125ba:	mov    rbx,QWORD PTR [rbx]
 10125bd:	test   esi,esi
 10125bf:	jne    0x1012580
 10125c1:	xor    r12d,r12d
 10125c4:	mov    WORD PTR [rsp+0x20],r12w
 10125ca:	or     r15d,0xffffffff
 10125ce:	lea    r13,[rip+0xffffffffffff2a03]        # 0x1004fd8
 10125d5:	lea    rbx,[rip+0xffffffffffff2a5c]        # 0x1005038
 10125dc:	test   esi,esi
 10125de:	je     0x10126cb
 10125e4:	mov    rcx,QWORD PTR [rsp+0x38]
 10125e9:	mov    rax,QWORD PTR [rcx]
 10125ec:	lea    rdx,[rsp+0x20]
 10125f1:	call   QWORD PTR [rax+0xb0]
 10125f7:	test   eax,eax
 10125f9:	js     0x10126cb
 10125ff:	cmp    WORD PTR [rsp+0x20],r12w
 1012605:	je     0x10126cb
 101260b:	lea    edx,[r12+0x20]
 1012610:	xor    ecx,ecx
 1012612:	call   QWORD PTR [rip+0x19fe0]        # 0x102c5f8
 1012618:	mov    r14,rax
 101261b:	mov    QWORD PTR [rbp-0x51],rax
 101261f:	test   rax,rax
 1012622:	je     0x101263b
 1012624:	mov    DWORD PTR [rax+0x8],0x1
 101262b:	mov    QWORD PTR [rax],r13
 101262e:	mov    QWORD PTR [rax],rbx
 1012631:	mov    QWORD PTR [rax+0x10],r12
 1012635:	mov    QWORD PTR [rax+0x18],r12
 1012639:	jmp    0x101263e
 101263b:	mov    r14,r12
 101263e:	mov    rbx,r14
 1012641:	mov    QWORD PTR [rbp-0x41],rbx
 1012645:	mov    QWORD PTR [rbp-0x71],r12
 1012649:	mov    rcx,QWORD PTR [rsp+0x38]
 101264e:	mov    rax,QWORD PTR [rcx]
 1012651:	lea    r8,[rbp-0x71]
 1012655:	lea    rdx,[rip+0xffffffffffff2a24]        # 0x1005080
 101265c:	call   QWORD PTR [rax+0x120]
 1012662:	mov    esi,r12d
 1012665:	test   eax,eax
 1012667:	setns  sil
 101266b:	test   esi,esi
 101266d:	je     0x101268e
 101266f:	mov    rdx,QWORD PTR [rbp-0x71]
 1012673:	test   rdx,rdx
 1012676:	je     0x101268e
 1012678:	mov    rcx,r14
 101267b:	call   0x10139a0
 1012680:	mov    rbx,r12
 1012683:	mov    QWORD PTR [rbp-0x41],rbx
 1012687:	mov    rax,QWORD PTR [rbp+0x6f]
 101268b:	mov    QWORD PTR [rax],r14
 101268e:	mov    rcx,QWORD PTR [rbp-0x71]
 1012692:	test   rcx,rcx
 1012695:	je     0x101269e
 1012697:	mov    rax,QWORD PTR [rcx]
 101269a:	call   QWORD PTR [rax+0x10]
 101269d:	nop
 101269e:	test   rbx,rbx
 10126a1:	je     0x10126d4
 10126a3:	add    rbx,0x8
 10126a7:	mov    eax,r15d
 10126aa:	lock xadd DWORD PTR [rbx],eax
 10126ae:	dec    eax
 10126b0:	jne    0x10126c4
 10126b2:	test   rbx,rbx
 10126b5:	lea    rcx,[rbx-0x8]
 10126b9:	jne    0x10126be
 10126bb:	mov    rcx,r12
 10126be:	mov    rax,QWORD PTR [rcx]
 10126c1:	call   QWORD PTR [rax+0x8]
 10126c4:	mov    rdi,QWORD PTR [rsp+0x28]
 10126c9:	jmp    0x10126d4
 10126cb:	mov    rax,QWORD PTR [rbp+0x6f]
 10126cf:	mov    QWORD PTR [rax],r12
 10126d2:	jmp    0x10126db
 10126d4:	lea    rbx,[rip+0xffffffffffff295d]        # 0x1005038
 10126db:	test   esi,esi
 10126dd:	je     0x10127cb
 10126e3:	mov    rcx,QWORD PTR [rsp+0x48]
 10126e8:	mov    rax,QWORD PTR [rcx]
 10126eb:	lea    rdx,[rsp+0x20]
 10126f0:	call   QWORD PTR [rax+0xb0]
 10126f6:	test   eax,eax
 10126f8:	js     0x10127cb
 10126fe:	cmp    WORD PTR [rsp+0x20],0x0
 1012704:	je     0x10127cb
 101270a:	mov    edx,0x20
 101270f:	xor    ecx,ecx
 1012711:	call   QWORD PTR [rip+0x19ee1]        # 0x102c5f8
 1012717:	mov    r14,rax
 101271a:	mov    QWORD PTR [rsp+0x58],rax
 101271f:	test   rax,rax
 1012722:	je     0x101273b
 1012724:	mov    DWORD PTR [rax+0x8],0x1
 101272b:	mov    QWORD PTR [rax],r13
 101272e:	mov    QWORD PTR [rax],rbx
 1012731:	mov    QWORD PTR [rax+0x10],r12
 1012735:	mov    QWORD PTR [rax+0x18],r12
 1012739:	jmp    0x101273e
 101273b:	mov    r14,r12
 101273e:	mov    rbx,r14
 1012741:	mov    QWORD PTR [rbp-0x39],rbx
 1012745:	mov    QWORD PTR [rbp-0x61],r12
 1012749:	mov    rcx,QWORD PTR [rsp+0x48]
 101274e:	mov    rax,QWORD PTR [rcx]
 1012751:	lea    r8,[rbp-0x61]
 1012755:	lea    rdx,[rip+0xffffffffffff2924]        # 0x1005080
 101275c:	call   QWORD PTR [rax+0x120]
 1012762:	mov    esi,r12d
 1012765:	test   eax,eax
 1012767:	setns  sil
 101276b:	test   esi,esi
 101276d:	je     0x101278e
 101276f:	mov    rdx,QWORD PTR [rbp-0x61]
 1012773:	test   rdx,rdx
 1012776:	je     0x101278e
 1012778:	mov    rcx,r14
 101277b:	call   0x10139a0
 1012780:	mov    rbx,r12
 1012783:	mov    QWORD PTR [rbp-0x39],rbx
 1012787:	mov    rax,QWORD PTR [rbp+0x77]
 101278b:	mov    QWORD PTR [rax],r14
 101278e:	mov    rcx,QWORD PTR [rbp-0x61]
 1012792:	test   rcx,rcx
 1012795:	je     0x101279e
 1012797:	mov    rax,QWORD PTR [rcx]
 101279a:	call   QWORD PTR [rax+0x10]
 101279d:	nop
 101279e:	test   rbx,rbx
 10127a1:	je     0x10127d2
 10127a3:	add    rbx,0x8
 10127a7:	mov    eax,r15d
 10127aa:	lock xadd DWORD PTR [rbx],eax
 10127ae:	dec    eax
 10127b0:	jne    0x10127c4
 10127b2:	test   rbx,rbx
 10127b5:	lea    rcx,[rbx-0x8]
 10127b9:	jne    0x10127be
 10127bb:	mov    rcx,r12
 10127be:	mov    rax,QWORD PTR [rcx]
 10127c1:	call   QWORD PTR [rax+0x8]
 10127c4:	mov    rdi,QWORD PTR [rsp+0x28]
 10127c9:	jmp    0x10127d2
 10127cb:	mov    rax,QWORD PTR [rbp+0x77]
 10127cf:	mov    QWORD PTR [rax],r12
 10127d2:	test   esi,esi
 10127d4:	je     0x10128c8
 10127da:	mov    rcx,QWORD PTR [rsp+0x40]
 10127df:	mov    rax,QWORD PTR [rcx]
 10127e2:	lea    rdx,[rsp+0x20]
 10127e7:	call   QWORD PTR [rax+0xb0]
 10127ed:	test   eax,eax
 10127ef:	js     0x10128c8
 10127f5:	cmp    WORD PTR [rsp+0x20],0x0
 10127fb:	je     0x10128c8
 1012801:	mov    edx,0x20
 1012806:	xor    ecx,ecx
 1012808:	call   QWORD PTR [rip+0x19dea]        # 0x102c5f8
 101280e:	mov    r14,rax
 1012811:	mov    QWORD PTR [rsp+0x58],rax
 1012816:	test   rax,rax
 1012819:	je     0x1012839
 101281b:	mov    DWORD PTR [rax+0x8],0x1
 1012822:	mov    QWORD PTR [rax],r13
 1012825:	lea    rax,[rip+0xffffffffffff280c]        # 0x1005038
 101282c:	mov    QWORD PTR [r14],rax
 101282f:	mov    QWORD PTR [r14+0x10],r12
 1012833:	mov    QWORD PTR [r14+0x18],r12
 1012837:	jmp    0x101283c
 1012839:	mov    r14,r12
 101283c:	mov    rbx,r14
 101283f:	mov    QWORD PTR [rbp-0x51],rbx
 1012843:	mov    QWORD PTR [rbp-0x59],r12
 1012847:	mov    rcx,QWORD PTR [rsp+0x40]
 101284c:	mov    rax,QWORD PTR [rcx]
 101284f:	lea    r8,[rbp-0x59]
 1012853:	lea    rdx,[rip+0xffffffffffff2826]        # 0x1005080
 101285a:	call   QWORD PTR [rax+0x120]
 1012860:	mov    esi,r12d
 1012863:	test   eax,eax
 1012865:	setns  sil
 1012869:	test   esi,esi
 101286b:	je     0x101288c
 101286d:	mov    rdx,QWORD PTR [rbp-0x59]
 1012871:	test   rdx,rdx
 1012874:	je     0x101288c
 1012876:	mov    rcx,r14
 1012879:	call   0x10139a0
 101287e:	mov    rbx,r12
 1012881:	mov    QWORD PTR [rbp-0x51],rbx
 1012885:	mov    rax,QWORD PTR [rbp+0x7f]
 1012889:	mov    QWORD PTR [rax],r14
 101288c:	mov    rcx,QWORD PTR [rbp-0x59]
 1012890:	test   rcx,rcx
 1012893:	je     0x101289c
 1012895:	mov    rax,QWORD PTR [rcx]
 1012898:	call   QWORD PTR [rax+0x10]
 101289b:	nop
 101289c:	test   rbx,rbx
 101289f:	je     0x10128cf
 10128a1:	add    rbx,0x8
 10128a5:	lock xadd DWORD PTR [rbx],r15d
 10128aa:	dec    r15d
 10128ad:	jne    0x10128c1
 10128af:	test   rbx,rbx
 10128b2:	lea    rcx,[rbx-0x8]
 10128b6:	jne    0x10128bb
 10128b8:	mov    rcx,r12
 10128bb:	mov    rax,QWORD PTR [rcx]
 10128be:	call   QWORD PTR [rax+0x8]
 10128c1:	mov    rdi,QWORD PTR [rsp+0x28]
 10128c6:	jmp    0x10128cf
 10128c8:	mov    rax,QWORD PTR [rbp+0x7f]
 10128cc:	mov    QWORD PTR [rax],r12
 10128cf:	test   esi,esi
 10128d1:	je     0x10128fe
 10128d3:	mov    rax,QWORD PTR [rbp+0x67]
 10128d7:	mov    rbx,QWORD PTR [rax+0x8]
 10128db:	mov    QWORD PTR [rbp-0x69],r12
 10128df:	mov    rcx,QWORD PTR [rbp-0x49]
 10128e3:	mov    QWORD PTR [rax+0x8],rcx
 10128e7:	mov    rcx,rbx
 10128ea:	call   0x1013770
 10128ef:	test   rbx,rbx
 10128f2:	je     0x10128fe
 10128f4:	mov    rcx,rbx
 10128f7:	call   QWORD PTR [rip+0x19d03]        # 0x102c600
 10128fd:	nop
 10128fe:	mov    rcx,QWORD PTR [rsp+0x30]
 1012903:	test   rcx,rcx
 1012906:	je     0x101290f
 1012908:	mov    rax,QWORD PTR [rcx]
 101290b:	call   QWORD PTR [rax+0x10]
 101290e:	nop
 101290f:	mov    rcx,QWORD PTR [rsp+0x40]
 1012914:	test   rcx,rcx
 1012917:	je     0x1012920
 1012919:	mov    rax,QWORD PTR [rcx]
 101291c:	call   QWORD PTR [rax+0x10]
 101291f:	nop
 1012920:	mov    rcx,QWORD PTR [rsp+0x48]
 1012925:	test   rcx,rcx
 1012928:	je     0x1012931
 101292a:	mov    rax,QWORD PTR [rcx]
 101292d:	call   QWORD PTR [rax+0x10]
 1012930:	nop
 1012931:	mov    rcx,QWORD PTR [rsp+0x38]
 1012936:	test   rcx,rcx
 1012939:	je     0x1012942
 101293b:	mov    rax,QWORD PTR [rcx]
 101293e:	call   QWORD PTR [rax+0x10]
 1012941:	nop
 1012942:	mov    rcx,QWORD PTR [rbp-0x69]
 1012946:	test   rcx,rcx
 1012949:	je     0x1012951
 101294b:	call   QWORD PTR [rip+0x19caf]        # 0x102c600
 1012951:	mov    QWORD PTR [rbp-0x69],r12
 1012955:	xor    ecx,ecx
 1012957:	call   0x100bccc
 101295c:	jmp    0x1012963
 101295e:	mov    rdi,QWORD PTR [rsp+0x28]
 1012963:	test   rdi,rdi
 1012966:	je     0x1012971
 1012968:	mov    rdx,QWORD PTR [rdi]
 101296b:	mov    rcx,rdi
 101296e:	call   QWORD PTR [rdx+0x10]
 1012971:	mov    eax,esi
 1012973:	add    rsp,0xf8
 101297a:	pop    r15
 101297c:	pop    r14
 101297e:	pop    r13
 1012980:	pop    r12
 1012982:	pop    rdi
 1012983:	pop    rsi
 1012984:	pop    rbx
 1012985:	pop    rbp
 1012986:	ret    
 1012987:	int3   
 1012988:	int3   
 1012989:	int3   
 101298a:	int3   
 101298b:	int3   
 101298c:	int3   
 101298d:	int3   
 101298e:	int3   
 101298f:	int3   
 1012990:	rex push rbx
 1012992:	push   rbp
 1012993:	push   rsi
 1012994:	push   rdi
 1012995:	push   r12
 1012997:	push   r14
 1012999:	push   r15
 101299b:	sub    rsp,0x2d0
 10129a2:	mov    QWORD PTR [rsp+0x40],0xfffffffffffffffe
 10129ab:	mov    rax,QWORD PTR [rip+0x11cae]        # 0x1024660
 10129b2:	xor    rax,rsp
 10129b5:	mov    QWORD PTR [rsp+0x2c0],rax
 10129bd:	mov    r15,r8
 10129c0:	mov    r12,rdx
 10129c3:	xor    esi,esi
 10129c5:	mov    r14d,esi
 10129c8:	mov    ebx,esi
 10129ca:	mov    QWORD PTR [rsp+0x28],rbx
 10129cf:	mov    QWORD PTR [rsp+0x30],rsi
 10129d4:	mov    ebp,esi
 10129d6:	lea    rdx,[rsp+0x30]
 10129db:	call   0x1012b20
 10129e0:	mov    rdi,QWORD PTR [rsp+0x30]
 10129e5:	test   eax,eax
 10129e7:	js     0x1012a47
 10129e9:	mov    QWORD PTR [rsp+0x20],rsi
 10129ee:	mov    r9,r12
 10129f1:	lea    r8,[rip+0xffffffffffff2790]        # 0x1005188
 10129f8:	mov    edx,0x138
 10129fd:	lea    rcx,[rsp+0x50]
 1012a02:	call   0x100ae30
 1012a07:	test   eax,eax
 1012a09:	js     0x1012a36
 1012a0b:	mov    rax,QWORD PTR [rdi]
 1012a0e:	lea    r8,[rsp+0x20]
 1012a13:	lea    rdx,[rsp+0x50]
 1012a18:	mov    rcx,rdi
 1012a1b:	call   QWORD PTR [rax+0x128]
 1012a21:	test   eax,eax
 1012a23:	setns  bpl
 1012a27:	mov    rbx,QWORD PTR [rsp+0x20]
 1012a2c:	mov    QWORD PTR [rsp+0x20],rsi
 1012a31:	mov    QWORD PTR [rsp+0x28],rbx
 1012a36:	mov    rcx,QWORD PTR [rsp+0x20]
 1012a3b:	test   rcx,rcx
 1012a3e:	je     0x1012a47
 1012a40:	mov    rax,QWORD PTR [rcx]
 1012a43:	call   QWORD PTR [rax+0x10]
 1012a46:	nop
 1012a47:	test   rdi,rdi
 1012a4a:	je     0x1012a55
 1012a4c:	mov    rax,QWORD PTR [rdi]
 1012a4f:	mov    rcx,rdi
 1012a52:	call   QWORD PTR [rax+0x10]
 1012a55:	test   ebp,ebp
 1012a57:	je     0x1012ae3
 1012a5d:	mov    r14d,0x1
 1012a63:	test   rbx,rbx
 1012a66:	je     0x1012ae6
 1012a68:	mov    edx,0x2a0
 1012a6d:	xor    ecx,ecx
 1012a6f:	call   QWORD PTR [rip+0x19b83]        # 0x102c5f8
 1012a75:	test   rax,rax
 1012a78:	je     0x1012a87
 1012a7a:	mov    rcx,rax
 1012a7d:	call   0x100ff90
 1012a82:	mov    rbp,rax
 1012a85:	jmp    0x1012a8a
 1012a87:	mov    rbp,rsi
 1012a8a:	mov    rdi,rbp
 1012a8d:	mov    QWORD PTR [rsp+0x38],rbp
 1012a92:	test   rbp,rbp
 1012a95:	je     0x1012ab3
 1012a97:	mov    rdx,rbx
 1012a9a:	mov    rcx,rbp
 1012a9d:	call   0x1010390
 1012aa2:	test   eax,eax
 1012aa4:	je     0x1012ab6
 1012aa6:	mov    rdi,rsi
 1012aa9:	mov    QWORD PTR [rsp+0x38],rsi
 1012aae:	mov    QWORD PTR [r15],rbp
 1012ab1:	jmp    0x1012ab6
 1012ab3:	mov    r14d,esi
 1012ab6:	test   rdi,rdi
 1012ab9:	je     0x1012ae6
 1012abb:	add    rdi,0x8
 1012abf:	or     eax,0xffffffff
 1012ac2:	lock xadd DWORD PTR [rdi],eax
 1012ac6:	dec    eax
 1012ac8:	jne    0x1012adc
 1012aca:	test   rdi,rdi
 1012acd:	je     0x1012ad3
 1012acf:	lea    rsi,[rdi-0x8]
 1012ad3:	mov    rax,QWORD PTR [rsi]
 1012ad6:	mov    rcx,rsi
 1012ad9:	call   QWORD PTR [rax+0x30]
 1012adc:	mov    rbx,QWORD PTR [rsp+0x28]
 1012ae1:	jmp    0x1012ae6
 1012ae3:	mov    QWORD PTR [r15],rsi
 1012ae6:	test   rbx,rbx
 1012ae9:	je     0x1012af4
 1012aeb:	mov    rdx,QWORD PTR [rbx]
 1012aee:	mov    rcx,rbx
 1012af1:	call   QWORD PTR [rdx+0x10]
 1012af4:	mov    eax,r14d
 1012af7:	mov    rcx,QWORD PTR [rsp+0x2c0]
 1012aff:	xor    rcx,rsp
 1012b02:	call   0x100c0d0
 1012b07:	add    rsp,0x2d0
 1012b0e:	pop    r15
 1012b10:	pop    r14
 1012b12:	pop    r12
 1012b14:	pop    rdi
 1012b15:	pop    rsi
 1012b16:	pop    rbp
 1012b17:	pop    rbx
 1012b18:	ret    
 1012b19:	int3   
 1012b1a:	int3   
 1012b1b:	int3   
 1012b1c:	int3   
 1012b1d:	int3   
 1012b1e:	int3   
 1012b1f:	int3   
 1012b20:	rex push rbp
 1012b22:	push   rsi
 1012b23:	push   rdi
 1012b24:	push   r12
 1012b26:	push   r13
 1012b28:	push   r14
 1012b2a:	push   r15
 1012b2c:	lea    rbp,[rsp-0x80]
 1012b31:	sub    rsp,0x180
 1012b38:	mov    QWORD PTR [rbp+0x20],0xfffffffffffffffe
 1012b40:	mov    QWORD PTR [rsp+0x1d0],rbx
 1012b48:	mov    rax,QWORD PTR [rip+0x11b11]        # 0x1024660
 1012b4f:	xor    rax,rsp
 1012b52:	mov    QWORD PTR [rbp+0x70],rax
 1012b56:	mov    rdi,rdx
 1012b59:	mov    r13,rcx
 1012b5c:	xor    eax,eax
 1012b5e:	mov    QWORD PTR [rsp+0x48],rax
 1012b63:	mov    QWORD PTR [rsp+0x40],rax
 1012b68:	lea    rax,[rsp+0x40]
 1012b6d:	mov    QWORD PTR [rsp+0x20],rax
 1012b72:	lea    r9,[rip+0xffffffffffff2527]        # 0x10050a0
 1012b79:	xor    edx,edx
 1012b7b:	lea    r8d,[rdx+0x1]
 1012b7f:	lea    rcx,[rip+0xffffffffffff349a]        # 0x1006020
 1012b86:	call   QWORD PTR [rip+0xfffffffffffeea5c]        # 0x10015e8
 1012b8c:	mov    ebx,eax
 1012b8e:	test   eax,eax
 1012b90:	jns    0x1012bba
 1012b92:	mov    rcx,QWORD PTR [rsp+0x40]
 1012b97:	test   rcx,rcx
 1012b9a:	je     0x1012ba3
 1012b9c:	mov    rdx,QWORD PTR [rcx]
 1012b9f:	call   QWORD PTR [rdx+0x10]
 1012ba2:	nop
 1012ba3:	mov    rcx,QWORD PTR [rsp+0x48]
 1012ba8:	test   rcx,rcx
 1012bab:	je     0x1012bb3
 1012bad:	mov    rax,QWORD PTR [rcx]
 1012bb0:	call   QWORD PTR [rax+0x10]
 1012bb3:	mov    eax,ebx
 1012bb5:	jmp    0x10132c7
 1012bba:	mov    rcx,QWORD PTR [rsp+0x40]
 1012bbf:	mov    rax,QWORD PTR [rcx]
 1012bc2:	xor    edx,edx
 1012bc4:	call   QWORD PTR [rax+0x1f8]
 1012bca:	mov    ebx,eax
 1012bcc:	test   eax,eax
 1012bce:	jns    0x1012be3
 1012bd0:	mov    rcx,QWORD PTR [rsp+0x40]
 1012bd5:	test   rcx,rcx
 1012bd8:	je     0x1012be1
 1012bda:	mov    rdx,QWORD PTR [rcx]
 1012bdd:	call   QWORD PTR [rdx+0x10]
 1012be0:	nop
 1012be1:	jmp    0x1012ba3
 1012be3:	lea    rcx,[rip+0xffffffffffff24c6]        # 0x10050b0
 1012bea:	call   QWORD PTR [rip+0xfffffffffffee988]        # 0x1001578
 1012bf0:	mov    rsi,rax
 1012bf3:	mov    QWORD PTR [rbp+0x8],rax
 1012bf7:	mov    ebx,0x16
 1012bfc:	mov    WORD PTR [rbp-0x10],bx
 1012c00:	mov    DWORD PTR [rbp-0x8],0x64
 1012c07:	movups xmm0,XMMWORD PTR [rbp-0x10]
 1012c0b:	movaps XMMWORD PTR [rbp-0x80],xmm0
 1012c0f:	movsd  xmm1,QWORD PTR [rbp+0x0]
 1012c14:	movsd  QWORD PTR [rbp-0x70],xmm1
 1012c19:	mov    rcx,QWORD PTR [rsp+0x40]
 1012c1e:	mov    rax,QWORD PTR [rcx]
 1012c21:	lea    r8,[rbp-0x80]
 1012c25:	mov    rdx,rsi
 1012c28:	call   QWORD PTR [rax+0x280]
 1012c2e:	nop
 1012c2f:	lea    rcx,[rbp-0x10]
 1012c33:	call   QWORD PTR [rip+0xfffffffffffee957]        # 0x1001590
 1012c39:	lea    rcx,[rip+0xffffffffffff2490]        # 0x10050d0
 1012c40:	call   QWORD PTR [rip+0xfffffffffffee932]        # 0x1001578
 1012c46:	mov    r14,rax
 1012c49:	mov    QWORD PTR [rbp+0x18],rax
 1012c4d:	mov    WORD PTR [rbp-0x40],bx
 1012c51:	mov    DWORD PTR [rbp-0x38],0x3fffff
 1012c58:	movups xmm0,XMMWORD PTR [rbp-0x40]
 1012c5c:	movaps XMMWORD PTR [rbp-0x80],xmm0
 1012c60:	movsd  xmm1,QWORD PTR [rbp-0x30]
 1012c65:	movsd  QWORD PTR [rbp-0x70],xmm1
 1012c6a:	mov    rcx,QWORD PTR [rsp+0x40]
 1012c6f:	mov    rax,QWORD PTR [rcx]
 1012c72:	lea    r8,[rbp-0x80]
 1012c76:	mov    rdx,r14
 1012c79:	call   QWORD PTR [rax+0x280]
 1012c7f:	nop
 1012c80:	lea    rcx,[rbp-0x40]
 1012c84:	call   QWORD PTR [rip+0xfffffffffffee906]        # 0x1001590
 1012c8a:	lea    rcx,[rip+0xffffffffffff2457]        # 0x10050e8
 1012c91:	call   QWORD PTR [rip+0xfffffffffffee8e1]        # 0x1001578
 1012c97:	mov    r15,rax
 1012c9a:	mov    QWORD PTR [rbp+0x28],rax
 1012c9e:	mov    ebx,0x2
 1012ca3:	mov    WORD PTR [rbp-0x28],bx
 1012ca7:	or     rax,0xffffffffffffffff
 1012cab:	mov    WORD PTR [rbp-0x20],ax
 1012caf:	movups xmm0,XMMWORD PTR [rbp-0x28]
 1012cb3:	movaps XMMWORD PTR [rbp-0x80],xmm0
 1012cb7:	movsd  xmm1,QWORD PTR [rbp-0x18]
 1012cbc:	movsd  QWORD PTR [rbp-0x70],xmm1
 1012cc1:	mov    rcx,QWORD PTR [rsp+0x40]
 1012cc6:	mov    rax,QWORD PTR [rcx]
 1012cc9:	lea    r8,[rbp-0x80]
 1012ccd:	mov    rdx,r15
 1012cd0:	call   QWORD PTR [rax+0x280]
 1012cd6:	nop
 1012cd7:	lea    rcx,[rbp-0x28]
 1012cdb:	call   QWORD PTR [rip+0xfffffffffffee8af]        # 0x1001590
 1012ce1:	lea    rcx,[rip+0xffffffffffff2418]        # 0x1005100
 1012ce8:	call   QWORD PTR [rip+0xfffffffffffee88a]        # 0x1001578
 1012cee:	mov    r12,rax
 1012cf1:	mov    QWORD PTR [rbp+0x10],rax
 1012cf5:	mov    WORD PTR [rbp-0x58],bx
 1012cf9:	xor    ebx,ebx
 1012cfb:	mov    WORD PTR [rbp-0x50],bx
 1012cff:	movups xmm0,XMMWORD PTR [rbp-0x58]
 1012d03:	movaps XMMWORD PTR [rbp-0x80],xmm0
 1012d07:	movsd  xmm1,QWORD PTR [rbp-0x48]
 1012d0c:	movsd  QWORD PTR [rbp-0x70],xmm1
 1012d11:	mov    rcx,QWORD PTR [rsp+0x40]
 1012d16:	mov    rax,QWORD PTR [rcx]
 1012d19:	lea    r8,[rbp-0x80]
 1012d1d:	mov    rdx,r12
 1012d20:	call   QWORD PTR [rax+0x280]
 1012d26:	nop
 1012d27:	lea    rcx,[rbp-0x58]
 1012d2b:	call   QWORD PTR [rip+0xfffffffffffee85f]        # 0x1001590
 1012d31:	mov    rcx,QWORD PTR [r13+0x218]
 1012d38:	call   QWORD PTR [rip+0xfffffffffffee82a]        # 0x1001568
 1012d3e:	test   eax,eax
 1012d40:	je     0x1012db8
 1012d42:	mov    rcx,QWORD PTR [rsp+0x40]
 1012d47:	mov    rax,QWORD PTR [rcx]
 1012d4a:	lea    r8,[rsp+0x50]
 1012d4f:	mov    rdx,QWORD PTR [r13+0x218]
 1012d56:	call   QWORD PTR [rax+0x208]
 1012d5c:	mov    ebx,eax
 1012d5e:	test   eax,eax
 1012d60:	jns    0x1012eb9
 1012d66:	test   r12,r12
 1012d69:	je     0x1012d75
 1012d6b:	mov    rcx,r12
 1012d6e:	call   QWORD PTR [rip+0xfffffffffffee7fc]        # 0x1001570
 1012d74:	nop
 1012d75:	test   r15,r15
 1012d78:	je     0x1012d84
 1012d7a:	mov    rcx,r15
 1012d7d:	call   QWORD PTR [rip+0xfffffffffffee7ed]        # 0x1001570
 1012d83:	nop
 1012d84:	test   r14,r14
 1012d87:	je     0x1012d93
 1012d89:	mov    rcx,r14
 1012d8c:	call   QWORD PTR [rip+0xfffffffffffee7de]        # 0x1001570
 1012d92:	nop
 1012d93:	test   rsi,rsi
 1012d96:	je     0x1012da2
 1012d98:	mov    rcx,rsi
 1012d9b:	call   QWORD PTR [rip+0xfffffffffffee7cf]        # 0x1001570
 1012da1:	nop
 1012da2:	mov    rcx,QWORD PTR [rsp+0x40]
 1012da7:	test   rcx,rcx
 1012daa:	je     0x1012db3
 1012dac:	mov    rax,QWORD PTR [rcx]
 1012daf:	call   QWORD PTR [rax+0x10]
 1012db2:	nop
 1012db3:	jmp    0x1012ba3
 1012db8:	lea    r8,[r13+0x10]
 1012dbc:	test   r8,r8
 1012dbf:	je     0x1013265
 1012dc5:	mov    edx,0x7fffffff
 1012dca:	mov    ecx,edx
 1012dcc:	mov    rax,r8
 1012dcf:	mov    r9d,ebx
 1012dd2:	cmp    WORD PTR [rax],r9w
 1012dd6:	je     0x1012de3
 1012dd8:	add    rax,0x2
 1012ddc:	dec    rcx
 1012ddf:	jne    0x1012dd2
 1012de1:	jmp    0x1012de8
 1012de3:	test   rcx,rcx
 1012de6:	jne    0x1012df3
 1012de8:	mov    r9d,0x80070057
 1012dee:	mov    rdx,rbx
 1012df1:	jmp    0x1012df6
 1012df3:	sub    rdx,rcx
 1012df6:	test   r9d,r9d
 1012df9:	js     0x1013265
 1012dff:	test   rdx,rdx
 1012e02:	je     0x1013265
 1012e08:	mov    eax,0x8
 1012e0d:	mov    WORD PTR [rbp-0x58],ax
 1012e11:	mov    rcx,r8
 1012e14:	call   QWORD PTR [rip+0xfffffffffffee75e]        # 0x1001578
 1012e1a:	mov    QWORD PTR [rbp-0x50],rax
 1012e1e:	test   rax,rax
 1012e21:	jne    0x1012e2e
 1012e23:	mov    ecx,0x8007000e
 1012e28:	call   0x1017700
 1012e2d:	nop
 1012e2e:	movups xmm0,XMMWORD PTR [rbp-0x58]
 1012e32:	movaps XMMWORD PTR [rbp-0x80],xmm0
 1012e36:	movsd  xmm1,QWORD PTR [rbp-0x48]
 1012e3b:	movsd  QWORD PTR [rbp-0x70],xmm1
 1012e40:	mov    rcx,QWORD PTR [rsp+0x40]
 1012e45:	mov    rax,QWORD PTR [rcx]
 1012e48:	lea    r8,[rsp+0x50]
 1012e4d:	lea    rdx,[rbp-0x80]
 1012e51:	call   QWORD PTR [rax+0x1d0]
 1012e57:	mov    ebx,eax
 1012e59:	lea    rcx,[rbp-0x58]
 1012e5d:	call   QWORD PTR [rip+0xfffffffffffee72d]        # 0x1001590
 1012e63:	test   ebx,ebx
 1012e65:	jns    0x1012eb9
 1012e67:	test   r12,r12
 1012e6a:	je     0x1012e76
 1012e6c:	mov    rcx,r12
 1012e6f:	call   QWORD PTR [rip+0xfffffffffffee6fb]        # 0x1001570
 1012e75:	nop
 1012e76:	test   r15,r15
 1012e79:	je     0x1012e85
 1012e7b:	mov    rcx,r15
 1012e7e:	call   QWORD PTR [rip+0xfffffffffffee6ec]        # 0x1001570
 1012e84:	nop
 1012e85:	test   r14,r14
 1012e88:	je     0x1012e94
 1012e8a:	mov    rcx,r14
 1012e8d:	call   QWORD PTR [rip+0xfffffffffffee6dd]        # 0x1001570
 1012e93:	nop
 1012e94:	test   rsi,rsi
 1012e97:	je     0x1012ea3
 1012e99:	mov    rcx,rsi
 1012e9c:	call   QWORD PTR [rip+0xfffffffffffee6ce]        # 0x1001570
 1012ea2:	nop
 1012ea3:	mov    rcx,QWORD PTR [rsp+0x40]
 1012ea8:	test   rcx,rcx
 1012eab:	je     0x1012eb4
 1012ead:	mov    rax,QWORD PTR [rcx]
 1012eb0:	call   QWORD PTR [rax+0x10]
 1012eb3:	nop
 1012eb4:	jmp    0x1012ba3
 1012eb9:	cmp    WORD PTR [rsp+0x50],0xffff
 1012ebf:	je     0x10131f3
 1012ec5:	mov    rcx,QWORD PTR [rsp+0x40]
 1012eca:	mov    rax,QWORD PTR [rcx]
 1012ecd:	lea    rdx,[rsp+0x48]
 1012ed2:	call   QWORD PTR [rax+0x1e0]
 1012ed8:	mov    ebx,eax
 1012eda:	test   eax,eax
 1012edc:	jns    0x1012f30
 1012ede:	test   r12,r12
 1012ee1:	je     0x1012eed
 1012ee3:	mov    rcx,r12
 1012ee6:	call   QWORD PTR [rip+0xfffffffffffee684]        # 0x1001570
 1012eec:	nop
 1012eed:	test   r15,r15
 1012ef0:	je     0x1012efc
 1012ef2:	mov    rcx,r15
 1012ef5:	call   QWORD PTR [rip+0xfffffffffffee675]        # 0x1001570
 1012efb:	nop
 1012efc:	test   r14,r14
 1012eff:	je     0x1012f0b
 1012f01:	mov    rcx,r14
 1012f04:	call   QWORD PTR [rip+0xfffffffffffee666]        # 0x1001570
 1012f0a:	nop
 1012f0b:	test   rsi,rsi
 1012f0e:	je     0x1012f1a
 1012f10:	mov    rcx,rsi
 1012f13:	call   QWORD PTR [rip+0xfffffffffffee657]        # 0x1001570
 1012f19:	nop
 1012f1a:	mov    rcx,QWORD PTR [rsp+0x40]
 1012f1f:	test   rcx,rcx
 1012f22:	je     0x1012f2b
 1012f24:	mov    rax,QWORD PTR [rcx]
 1012f27:	call   QWORD PTR [rax+0x10]
 1012f2a:	nop
 1012f2b:	jmp    0x1012ba3
 1012f30:	mov    rcx,QWORD PTR [rsp+0x48]
 1012f35:	mov    rax,QWORD PTR [rcx]
 1012f38:	lea    rdx,[rbp-0x60]
 1012f3c:	call   QWORD PTR [rax+0x38]
 1012f3f:	xor    edi,edi
 1012f41:	mov    QWORD PTR [rsp+0x58],rdi
 1012f46:	mov    rcx,QWORD PTR [rsp+0x48]
 1012f4b:	mov    rax,QWORD PTR [rcx]
 1012f4e:	lea    rdx,[rsp+0x58]
 1012f53:	call   QWORD PTR [rax+0x48]
 1012f56:	mov    ebx,eax
 1012f58:	test   eax,eax
 1012f5a:	jns    0x1012fbf
 1012f5c:	mov    rcx,QWORD PTR [rsp+0x58]
 1012f61:	test   rcx,rcx
 1012f64:	je     0x1012f6d
 1012f66:	call   QWORD PTR [rip+0xfffffffffffee604]        # 0x1001570
 1012f6c:	nop
 1012f6d:	test   r12,r12
 1012f70:	je     0x1012f7c
 1012f72:	mov    rcx,r12
 1012f75:	call   QWORD PTR [rip+0xfffffffffffee5f5]        # 0x1001570
 1012f7b:	nop
 1012f7c:	test   r15,r15
 1012f7f:	je     0x1012f8b
 1012f81:	mov    rcx,r15
 1012f84:	call   QWORD PTR [rip+0xfffffffffffee5e6]        # 0x1001570
 1012f8a:	nop
 1012f8b:	test   r14,r14
 1012f8e:	je     0x1012f9a
 1012f90:	mov    rcx,r14
 1012f93:	call   QWORD PTR [rip+0xfffffffffffee5d7]        # 0x1001570
 1012f99:	nop
 1012f9a:	test   rsi,rsi
 1012f9d:	je     0x1012fa9
 1012f9f:	mov    rcx,rsi
 1012fa2:	call   QWORD PTR [rip+0xfffffffffffee5c8]        # 0x1001570
 1012fa8:	nop
 1012fa9:	mov    rcx,QWORD PTR [rsp+0x40]
 1012fae:	test   rcx,rcx
 1012fb1:	je     0x1012fba
 1012fb3:	mov    rax,QWORD PTR [rcx]
 1012fb6:	call   QWORD PTR [rax+0x10]
 1012fb9:	nop
 1012fba:	jmp    0x1012ba3
 1012fbf:	mov    QWORD PTR [rsp+0x68],rdi
 1012fc4:	mov    rcx,QWORD PTR [rsp+0x48]
 1012fc9:	mov    rax,QWORD PTR [rcx]
 1012fcc:	lea    rdx,[rsp+0x68]
 1012fd1:	call   QWORD PTR [rax+0x50]
 1012fd4:	mov    ebx,eax
 1012fd6:	test   eax,eax
 1012fd8:	jns    0x101304e
 1012fda:	mov    rcx,QWORD PTR [rsp+0x68]
 1012fdf:	test   rcx,rcx
 1012fe2:	je     0x1012feb
 1012fe4:	call   QWORD PTR [rip+0xfffffffffffee586]        # 0x1001570
 1012fea:	nop
 1012feb:	mov    rcx,QWORD PTR [rsp+0x58]
 1012ff0:	test   rcx,rcx
 1012ff3:	je     0x1012ffc
 1012ff5:	call   QWORD PTR [rip+0xfffffffffffee575]        # 0x1001570
 1012ffb:	nop
 1012ffc:	test   r12,r12
 1012fff:	je     0x101300b
 1013001:	mov    rcx,r12
 1013004:	call   QWORD PTR [rip+0xfffffffffffee566]        # 0x1001570
 101300a:	nop
 101300b:	test   r15,r15
 101300e:	je     0x101301a
 1013010:	mov    rcx,r15
 1013013:	call   QWORD PTR [rip+0xfffffffffffee557]        # 0x1001570
 1013019:	nop
 101301a:	test   r14,r14
 101301d:	je     0x1013029
 101301f:	mov    rcx,r14
 1013022:	call   QWORD PTR [rip+0xfffffffffffee548]        # 0x1001570
 1013028:	nop
 1013029:	test   rsi,rsi
 101302c:	je     0x1013038
 101302e:	mov    rcx,rsi
 1013031:	call   QWORD PTR [rip+0xfffffffffffee539]        # 0x1001570
 1013037:	nop
 1013038:	mov    rcx,QWORD PTR [rsp+0x40]
 101303d:	test   rcx,rcx
 1013040:	je     0x1013049
 1013042:	mov    rax,QWORD PTR [rcx]
 1013045:	call   QWORD PTR [rax+0x10]
 1013048:	nop
 1013049:	jmp    0x1012ba3
 101304e:	mov    DWORD PTR [rsp+0x60],edi
 1013052:	mov    rcx,QWORD PTR [rsp+0x48]
 1013057:	mov    rax,QWORD PTR [rcx]
 101305a:	lea    rdx,[rsp+0x60]
 101305f:	call   QWORD PTR [rax+0x58]
 1013062:	mov    DWORD PTR [rsp+0x70],edi
 1013066:	mov    rcx,QWORD PTR [rsp+0x48]
 101306b:	mov    rax,QWORD PTR [rcx]
 101306e:	lea    rdx,[rsp+0x70]
 1013073:	call   QWORD PTR [rax+0x60]
 1013076:	mov    rax,QWORD PTR [rip+0xffffffffffff20ab]        # 0x1005128
 101307d:	mov    QWORD PTR [rbp+0x30],rax
 1013081:	mov    rax,QWORD PTR [rip+0xffffffffffff20a8]        # 0x1005130
 1013088:	mov    QWORD PTR [rbp+0x38],rax
 101308c:	mov    rax,QWORD PTR [rip+0xffffffffffff20a5]        # 0x1005138
 1013093:	mov    QWORD PTR [rbp+0x40],rax
 1013097:	mov    rax,QWORD PTR [rip+0xffffffffffff20a2]        # 0x1005140
 101309e:	mov    QWORD PTR [rbp+0x48],rax
 10130a2:	mov    rax,QWORD PTR [rip+0xffffffffffff209f]        # 0x1005148
 10130a9:	mov    QWORD PTR [rbp+0x50],rax
 10130ad:	mov    rcx,QWORD PTR [rip+0xffffffffffff209c]        # 0x1005150
 10130b4:	mov    QWORD PTR [rbp+0x58],rcx
 10130b8:	mov    rcx,QWORD PTR [rip+0xffffffffffff2099]        # 0x1005158
 10130bf:	mov    QWORD PTR [rbp+0x60],rcx
 10130c3:	movzx  ecx,WORD PTR [rip+0xffffffffffff2096]        # 0x1005160
 10130ca:	mov    WORD PTR [rbp+0x68],cx
 10130ce:	mov    rbx,QWORD PTR [rsp+0x58]
 10130d3:	mov    rcx,QWORD PTR [rsp+0x68]
 10130d8:	call   QWORD PTR [rip+0xfffffffffffee48a]        # 0x1001568
 10130de:	mov    edi,eax
 10130e0:	mov    rcx,rbx
 10130e3:	call   QWORD PTR [rip+0xfffffffffffee47f]        # 0x1001568
 10130e9:	mov    r11d,eax
 10130ec:	lea    rbx,[rdi+0x33]
 10130f0:	add    rbx,r11
 10130f3:	mov    eax,0x2
 10130f8:	mul    rbx
 10130fb:	mov    rcx,0xffffffffffffffff
 1013102:	cmovo  rax,rcx
 1013106:	mov    edx,eax
 1013108:	xor    ecx,ecx
 101310a:	call   QWORD PTR [rip+0x194e8]        # 0x102c5f8
 1013110:	mov    rdx,rax
 1013113:	lea    rcx,[r13+0x228]
 101311a:	call   0x1013820
 101311f:	mov    rcx,QWORD PTR [r13+0x228]
 1013126:	test   rcx,rcx
 1013129:	je     0x1013168
 101312b:	mov    rax,QWORD PTR [rsp+0x68]
 1013130:	mov    QWORD PTR [rsp+0x30],rax
 1013135:	mov    eax,DWORD PTR [rsp+0x70]
 1013139:	mov    DWORD PTR [rsp+0x28],eax
 101313d:	mov    eax,DWORD PTR [rsp+0x60]
 1013141:	mov    DWORD PTR [rsp+0x20],eax
 1013145:	mov    r9,QWORD PTR [rsp+0x58]
 101314a:	lea    r8,[rbp+0x30]
 101314e:	mov    rdx,rbx
 1013151:	call   0x100ae30
 1013156:	test   eax,eax
 1013158:	jns    0x1013168
 101315a:	xor    edx,edx
 101315c:	lea    rcx,[r13+0x228]
 1013163:	call   0x1013820
 1013168:	mov    ebx,DWORD PTR [rbp-0x60]
 101316b:	mov    rcx,QWORD PTR [rsp+0x68]
 1013170:	test   rcx,rcx
 1013173:	je     0x101317c
 1013175:	call   QWORD PTR [rip+0xfffffffffffee3f5]        # 0x1001570
 101317b:	nop
 101317c:	mov    rcx,QWORD PTR [rsp+0x58]
 1013181:	test   rcx,rcx
 1013184:	je     0x101318d
 1013186:	call   QWORD PTR [rip+0xfffffffffffee3e4]        # 0x1001570
 101318c:	nop
 101318d:	test   r12,r12
 1013190:	je     0x101319c
 1013192:	mov    rcx,r12
 1013195:	call   QWORD PTR [rip+0xfffffffffffee3d5]        # 0x1001570
 101319b:	nop
 101319c:	test   r15,r15
 101319f:	je     0x10131ab
 10131a1:	mov    rcx,r15
 10131a4:	call   QWORD PTR [rip+0xfffffffffffee3c6]        # 0x1001570
 10131aa:	nop
 10131ab:	test   r14,r14
 10131ae:	je     0x10131ba
 10131b0:	mov    rcx,r14
 10131b3:	call   QWORD PTR [rip+0xfffffffffffee3b7]        # 0x1001570
 10131b9:	nop
 10131ba:	test   rsi,rsi
 10131bd:	je     0x10131c9
 10131bf:	mov    rcx,rsi
 10131c2:	call   QWORD PTR [rip+0xfffffffffffee3a8]        # 0x1001570
 10131c8:	nop
 10131c9:	mov    rcx,QWORD PTR [rsp+0x40]
 10131ce:	test   rcx,rcx
 10131d1:	je     0x10131da
 10131d3:	mov    rdx,QWORD PTR [rcx]
 10131d6:	call   QWORD PTR [rdx+0x10]
 10131d9:	nop
 10131da:	mov    rcx,QWORD PTR [rsp+0x48]
 10131df:	test   rcx,rcx
 10131e2:	je     0x1012bb3
 10131e8:	mov    rdx,QWORD PTR [rcx]
 10131eb:	call   QWORD PTR [rdx+0x10]
 10131ee:	jmp    0x1012bb3
 10131f3:	mov    rax,QWORD PTR [rsp+0x40]
 10131f8:	mov    QWORD PTR [rsp+0x40],0x0
 1013201:	mov    QWORD PTR [rdi],rax
 1013204:	test   r12,r12
 1013207:	je     0x1013213
 1013209:	mov    rcx,r12
 101320c:	call   QWORD PTR [rip+0xfffffffffffee35e]        # 0x1001570
 1013212:	nop
 1013213:	test   r15,r15
 1013216:	je     0x1013222
 1013218:	mov    rcx,r15
 101321b:	call   QWORD PTR [rip+0xfffffffffffee34f]        # 0x1001570
 1013221:	nop
 1013222:	test   r14,r14
 1013225:	je     0x1013231
 1013227:	mov    rcx,r14
 101322a:	call   QWORD PTR [rip+0xfffffffffffee340]        # 0x1001570
 1013230:	nop
 1013231:	test   rsi,rsi
 1013234:	je     0x1013240
 1013236:	mov    rcx,rsi
 1013239:	call   QWORD PTR [rip+0xfffffffffffee331]        # 0x1001570
 101323f:	nop
 1013240:	mov    rcx,QWORD PTR [rsp+0x40]
 1013245:	test   rcx,rcx
 1013248:	je     0x1013251
 101324a:	mov    rax,QWORD PTR [rcx]
 101324d:	call   QWORD PTR [rax+0x10]
 1013250:	nop
 1013251:	mov    rcx,QWORD PTR [rsp+0x48]
 1013256:	test   rcx,rcx
 1013259:	je     0x1013261
 101325b:	mov    rax,QWORD PTR [rcx]
 101325e:	call   QWORD PTR [rax+0x10]
 1013261:	xor    eax,eax
 1013263:	jmp    0x10132c7
 1013265:	test   r12,r12
 1013268:	je     0x1013274
 101326a:	mov    rcx,r12
 101326d:	call   QWORD PTR [rip+0xfffffffffffee2fd]        # 0x1001570
 1013273:	nop
 1013274:	test   r15,r15
 1013277:	je     0x1013283
 1013279:	mov    rcx,r15
 101327c:	call   QWORD PTR [rip+0xfffffffffffee2ee]        # 0x1001570
 1013282:	nop
 1013283:	test   r14,r14
 1013286:	je     0x1013292
 1013288:	mov    rcx,r14
 101328b:	call   QWORD PTR [rip+0xfffffffffffee2df]        # 0x1001570
 1013291:	nop
 1013292:	test   rsi,rsi
 1013295:	je     0x10132a1
 1013297:	mov    rcx,rsi
 101329a:	call   QWORD PTR [rip+0xfffffffffffee2d0]        # 0x1001570
 10132a0:	nop
 10132a1:	mov    rcx,QWORD PTR [rsp+0x40]
 10132a6:	test   rcx,rcx
 10132a9:	je     0x10132b2
 10132ab:	mov    rax,QWORD PTR [rcx]
 10132ae:	call   QWORD PTR [rax+0x10]
 10132b1:	nop
 10132b2:	mov    rcx,QWORD PTR [rsp+0x48]
 10132b7:	test   rcx,rcx
 10132ba:	je     0x10132c2
 10132bc:	mov    rax,QWORD PTR [rcx]
 10132bf:	call   QWORD PTR [rax+0x10]
 10132c2:	mov    eax,0x80004005
 10132c7:	mov    rcx,QWORD PTR [rbp+0x70]
 10132cb:	xor    rcx,rsp
 10132ce:	call   0x100c0d0
 10132d3:	mov    rbx,QWORD PTR [rsp+0x1d0]
 10132db:	add    rsp,0x180
 10132e2:	pop    r15
 10132e4:	pop    r14
 10132e6:	pop    r13
 10132e8:	pop    r12
 10132ea:	pop    rdi
 10132eb:	pop    rsi
 10132ec:	pop    rbp
 10132ed:	ret    
 10132ee:	int3   
 10132ef:	int3   
 10132f0:	int3   
 10132f1:	int3   
 10132f2:	int3   
 10132f3:	int3   
 10132f4:	int3   
 10132f5:	int3   
 10132f6:	int3   
 10132f7:	int3   
 10132f8:	int3   
 10132f9:	int3   
 10132fa:	int3   
 10132fb:	int3   
 10132fc:	int3   
 10132fd:	int3   
 10132fe:	int3   
 10132ff:	int3   
 1013300:	mov    QWORD PTR [rsp+0x8],rbx
 1013305:	mov    QWORD PTR [rsp+0x10],rbp
 101330a:	mov    QWORD PTR [rsp+0x18],rsi
 101330f:	push   rdi
 1013310:	sub    rsp,0x20
 1013314:	mov    rsi,rcx
 1013317:	add    rcx,0x220
 101331e:	mov    rbp,rdx
 1013321:	xor    ebx,ebx
 1013323:	call   0x10161d0
 1013328:	test   eax,eax
 101332a:	je     0x101335f
 101332c:	lea    edx,[rbx+0x8]
 101332f:	xor    ecx,ecx
 1013331:	call   QWORD PTR [rip+0x192c1]        # 0x102c5f8
 1013337:	test   rax,rax
 101333a:	je     0x1013341
 101333c:	mov    QWORD PTR [rax],rbx
 101333f:	jmp    0x1013344
 1013341:	mov    rax,rbx
 1013344:	mov    QWORD PTR [rsi+0x8],rax
 1013348:	test   rax,rax
 101334b:	je     0x1013364
 101334d:	mov    r8,rax
 1013350:	mov    rdx,rbp
 1013353:	mov    rcx,rsi
 1013356:	call   0x10134a0
 101335b:	mov    ebx,eax
 101335d:	jmp    0x1013364
 101335f:	mov    ebx,0x1
 1013364:	lea    rcx,[rsi+0x220]
 101336b:	call   0x1016210
 1013370:	test   ebx,ebx
 1013372:	jne    0x101338c
 1013374:	lea    rcx,[rsi+0x220]
 101337b:	call   0x1016270
 1013380:	lea    rcx,[rsi+0x220]
 1013387:	call   0x10162b0
 101338c:	mov    rbp,QWORD PTR [rsp+0x38]
 1013391:	mov    rsi,QWORD PTR [rsp+0x40]
 1013396:	mov    eax,ebx
 1013398:	mov    rbx,QWORD PTR [rsp+0x30]
 101339d:	add    rsp,0x20
 10133a1:	pop    rdi
 10133a2:	ret    
 10133a3:	int3   
 10133a4:	int3   
 10133a5:	int3   
 10133a6:	int3   
 10133a7:	int3   
 10133a8:	int3   
 10133a9:	int3   
 10133aa:	int3   
 10133ab:	int3   
 10133ac:	int3   
 10133ad:	int3   
 10133ae:	int3   
 10133af:	int3   
 10133b0:	rex push rsi
 10133b2:	push   rdi
 10133b3:	push   r14
 10133b5:	sub    rsp,0x2c0
 10133bc:	mov    QWORD PTR [rsp+0x30],0xfffffffffffffffe
 10133c5:	mov    QWORD PTR [rsp+0x2f8],rbx
 10133cd:	mov    rax,QWORD PTR [rip+0x1128c]        # 0x1024660
 10133d4:	xor    rax,rsp
 10133d7:	mov    QWORD PTR [rsp+0x2b0],rax
 10133df:	mov    r14,r8
 10133e2:	mov    rsi,rdx
 10133e5:	mov    QWORD PTR [rsp+0x28],0x0
 10133ee:	xor    edi,edi
 10133f0:	lea    rdx,[rsp+0x28]
 10133f5:	call   0x1012b20
 10133fa:	mov    rbx,QWORD PTR [rsp+0x28]
 10133ff:	test   eax,eax
 1013401:	js     0x1013463
 1013403:	mov    QWORD PTR [rsp+0x20],rdi
 1013408:	mov    r9,rsi
 101340b:	lea    r8,[rip+0xffffffffffff1d76]        # 0x1005188
 1013412:	mov    edx,0x138
 1013417:	lea    rcx,[rsp+0x40]
 101341c:	call   0x100ae30
 1013421:	test   eax,eax
 1013423:	js     0x1013452
 1013425:	mov    rax,QWORD PTR [rbx]
 1013428:	lea    r8,[rsp+0x20]
 101342d:	lea    rdx,[rsp+0x40]
 1013432:	mov    rcx,rbx
 1013435:	call   QWORD PTR [rax+0x128]
 101343b:	test   eax,eax
 101343d:	setns  dil
 1013441:	mov    rax,QWORD PTR [rsp+0x20]
 1013446:	mov    QWORD PTR [rsp+0x20],0x0
 101344f:	mov    QWORD PTR [r14],rax
 1013452:	mov    rcx,QWORD PTR [rsp+0x20]
 1013457:	test   rcx,rcx
 101345a:	je     0x1013463
 101345c:	mov    rdx,QWORD PTR [rcx]
 101345f:	call   QWORD PTR [rdx+0x10]
 1013462:	nop
 1013463:	test   rbx,rbx
 1013466:	je     0x1013471
 1013468:	mov    rdx,QWORD PTR [rbx]
 101346b:	mov    rcx,rbx
 101346e:	call   QWORD PTR [rdx+0x10]
 1013471:	mov    eax,edi
 1013473:	mov    rcx,QWORD PTR [rsp+0x2b0]
 101347b:	xor    rcx,rsp
 101347e:	call   0x100c0d0
 1013483:	mov    rbx,QWORD PTR [rsp+0x2f8]
 101348b:	add    rsp,0x2c0
 1013492:	pop    r14
 1013494:	pop    rdi
 1013495:	pop    rsi
 1013496:	ret    
 1013497:	int3   
 1013498:	int3   
 1013499:	int3   
 101349a:	int3   
 101349b:	int3   
 101349c:	int3   
 101349d:	int3   
 101349e:	int3   
 101349f:	int3   
 10134a0:	mov    r11,rsp
 10134a3:	push   rsi
 10134a4:	push   rdi
 10134a5:	push   r12
 10134a7:	push   r14
 10134a9:	push   r15
 10134ab:	sub    rsp,0x40
 10134af:	mov    QWORD PTR [r11-0x38],0xfffffffffffffffe
 10134b7:	mov    QWORD PTR [r11+0x8],rbx
 10134bb:	mov    QWORD PTR [r11+0x18],rbp
 10134bf:	mov    r14,r8
 10134c2:	mov    rcx,rdx
 10134c5:	mov    ebp,0x1
 10134ca:	xor    r12d,r12d
 10134cd:	mov    QWORD PTR [r11-0x48],r12
 10134d1:	mov    QWORD PTR [r11+0x10],r12
 10134d5:	mov    QWORD PTR [r11-0x40],r12
 10134d9:	mov    rax,QWORD PTR [rdx]
 10134dc:	lea    r8,[r11-0x48]
 10134e0:	lea    rdx,[rip+0xffffffffffff1b99]        # 0x1005080
 10134e7:	call   QWORD PTR [rax+0x120]
 10134ed:	test   eax,eax
 10134ef:	js     0x1013699
 10134f5:	mov    rcx,QWORD PTR [rsp+0x20]
 10134fa:	test   rcx,rcx
 10134fd:	je     0x1013699
 1013503:	mov    rax,QWORD PTR [rcx]
 1013506:	lea    rdx,[rsp+0x78]
 101350b:	call   QWORD PTR [rax+0x48]
 101350e:	test   eax,eax
 1013510:	js     0x1013673
 1013516:	cmp    QWORD PTR [rsp+0x78],0x0
 101351c:	je     0x1013673
 1013522:	mov    edx,0x210
 1013527:	xor    ecx,ecx
 1013529:	call   QWORD PTR [rip+0x190c9]        # 0x102c5f8
 101352f:	mov    rdi,rax
 1013532:	test   rax,rax
 1013535:	je     0x101353c
 1013537:	mov    QWORD PTR [rax],r12
 101353a:	jmp    0x101353f
 101353c:	mov    rdi,r12
 101353f:	mov    rbx,rdi
 1013542:	mov    QWORD PTR [rsp+0x88],rbx
 101354a:	test   rdi,rdi
 101354d:	je     0x101365f
 1013553:	mov    rcx,QWORD PTR [rsp+0x78]
 1013558:	mov    rax,QWORD PTR [rcx]
 101355b:	lea    rdx,[rsp+0x28]
 1013560:	call   QWORD PTR [rax+0x88]
 1013566:	test   eax,eax
 1013568:	js     0x1013634
 101356e:	test   ebp,ebp
 1013570:	je     0x1013596
 1013572:	lea    r8,[rdi+0x8]
 1013576:	mov    r9d,0x100
 101357c:	mov    rdx,QWORD PTR [rsp+0x28]
 1013581:	lea    rcx,[rip+0xffffffffffff0ea0]        # 0x1004428
 1013588:	call   0x1013c80
 101358d:	test   eax,eax
 101358f:	mov    ebp,0x1
 1013594:	jne    0x1013599
 1013596:	mov    ebp,r12d
 1013599:	mov    rcx,QWORD PTR [rsp+0x78]
 101359e:	call   0x10137b0
 10135a3:	mov    DWORD PTR [rdi+0x208],eax
 10135a9:	mov    rsi,QWORD PTR [r14]
 10135ac:	test   rsi,rsi
 10135af:	je     0x1013620
 10135b1:	lea    rcx,[rsi+0x8]
 10135b5:	mov    r8d,0x100
 10135bb:	lea    rdx,[rdi+0x8]
 10135bf:	call   0x1017670
 10135c4:	test   eax,eax
 10135c6:	jg     0x1013620
 10135c8:	mov    rbx,rsi
 10135cb:	nop    DWORD PTR [rax+rax*1+0x0]
 10135d0:	lea    rcx,[rbx+0x8]
 10135d4:	mov    r8d,0x100
 10135da:	lea    rdx,[rdi+0x8]
 10135de:	call   0x1017670
 10135e3:	test   eax,eax
 10135e5:	jg     0x101360a
 10135e7:	je     0x10135f6
 10135e9:	mov    rsi,rbx
 10135ec:	mov    rbx,QWORD PTR [rbx]
 10135ef:	test   rbx,rbx
 10135f2:	jne    0x10135d0
 10135f4:	jmp    0x101360a
 10135f6:	mov    edx,0x20
 10135fb:	lea    ecx,[rdx-0x1]
 10135fe:	xor    r8d,r8d
 1013601:	call   QWORD PTR [rip+0x18fd9]        # 0x102c5e0
 1013607:	mov    ebp,r12d
 101360a:	mov    rbx,r12
 101360d:	mov    QWORD PTR [rsp+0x88],rbx
 1013615:	mov    rax,QWORD PTR [rsi]
 1013618:	mov    QWORD PTR [rdi],rax
 101361b:	mov    QWORD PTR [rsi],rdi
 101361e:	jmp    0x1013634
 1013620:	mov    rbx,r12
 1013623:	mov    QWORD PTR [rsp+0x88],rbx
 101362b:	mov    rax,QWORD PTR [r14]
 101362e:	mov    QWORD PTR [rdi],rax
 1013631:	mov    QWORD PTR [r14],rdi
 1013634:	test   rbx,rbx
 1013637:	je     0x1013642
 1013639:	mov    rcx,rbx
 101363c:	call   QWORD PTR [rip+0x18fbe]        # 0x102c600
 1013642:	mov    QWORD PTR [rsp+0x88],r12
 101364a:	xor    ecx,ecx
 101364c:	call   0x100bccc
 1013651:	test   ebp,ebp
 1013653:	je     0x1013677
 1013655:	mov    rcx,QWORD PTR [rsp+0x20]
 101365a:	jmp    0x1013503
 101365f:	mov    ebp,r12d
 1013662:	mov    QWORD PTR [rsp+0x88],r12
 101366a:	xor    ecx,ecx
 101366c:	call   0x100bccc
 1013671:	jmp    0x1013677
 1013673:	test   ebp,ebp
 1013675:	jne    0x1013699
 1013677:	test   r14,r14
 101367a:	je     0x1013699
 101367c:	nop    DWORD PTR [rax+0x0]
 1013680:	mov    rcx,QWORD PTR [r14]
 1013683:	test   rcx,rcx
 1013686:	je     0x1013699
 1013688:	mov    rax,QWORD PTR [rcx]
 101368b:	mov    QWORD PTR [r14],rax
 101368e:	mov    QWORD PTR [rcx],r12
 1013691:	call   QWORD PTR [rip+0x18f69]        # 0x102c600
 1013697:	jmp    0x1013680
 1013699:	mov    rcx,QWORD PTR [rsp+0x28]
 101369e:	test   rcx,rcx
 10136a1:	je     0x10136aa
 10136a3:	mov    rax,QWORD PTR [rcx]
 10136a6:	call   QWORD PTR [rax+0x10]
 10136a9:	nop
 10136aa:	mov    rcx,QWORD PTR [rsp+0x78]
 10136af:	test   rcx,rcx
 10136b2:	je     0x10136bb
 10136b4:	mov    rdx,QWORD PTR [rcx]
 10136b7:	call   QWORD PTR [rdx+0x10]
 10136ba:	nop
 10136bb:	mov    rcx,QWORD PTR [rsp+0x20]
 10136c0:	test   rcx,rcx
 10136c3:	je     0x10136cb
 10136c5:	mov    rdx,QWORD PTR [rcx]
 10136c8:	call   QWORD PTR [rdx+0x10]
 10136cb:	mov    eax,ebp
 10136cd:	mov    rbx,QWORD PTR [rsp+0x70]
 10136d2:	mov    rbp,QWORD PTR [rsp+0x80]
 10136da:	add    rsp,0x40
 10136de:	pop    r15
 10136e0:	pop    r14
 10136e2:	pop    r12
 10136e4:	pop    rdi
 10136e5:	pop    rsi
 10136e6:	ret    
 10136e7:	int3   
 10136e8:	int3   
 10136e9:	int3   
 10136ea:	int3   
 10136eb:	int3   
 10136ec:	int3   
 10136ed:	int3   
 10136ee:	int3   
 10136ef:	int3   
 10136f0:	rex push rdi
 10136f2:	sub    rsp,0x30
 10136f6:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 10136ff:	mov    QWORD PTR [rsp+0x48],rbx
 1013704:	mov    rdi,rdx
 1013707:	xor    ebx,ebx
 1013709:	mov    QWORD PTR [rsp+0x40],rbx
 101370e:	mov    rax,QWORD PTR [rcx]
 1013711:	or     edx,0xffffffff
 1013714:	lea    r8,[rsp+0x40]
 1013719:	call   QWORD PTR [rax+0xc0]
 101371f:	mov    ecx,ebx
 1013721:	test   eax,eax
 1013723:	setns  cl
 1013726:	test   ecx,ecx
 1013728:	je     0x1013747
 101372a:	mov    rax,QWORD PTR [rdi]
 101372d:	xor    r8d,r8d
 1013730:	mov    rdx,QWORD PTR [rsp+0x40]
 1013735:	mov    rcx,rdi
 1013738:	call   QWORD PTR [rax+0xa8]
 101373e:	test   eax,eax
 1013740:	js     0x1013747
 1013742:	mov    ebx,0x1
 1013747:	mov    rcx,QWORD PTR [rsp+0x40]
 101374c:	test   rcx,rcx
 101374f:	je     0x1013757
 1013751:	mov    rdx,QWORD PTR [rcx]
 1013754:	call   QWORD PTR [rdx+0x10]
 1013757:	mov    eax,ebx
 1013759:	mov    rbx,QWORD PTR [rsp+0x48]
 101375e:	add    rsp,0x30
 1013762:	pop    rdi
 1013763:	ret    
 1013764:	int3   
 1013765:	int3   
 1013766:	int3   
 1013767:	int3   
 1013768:	int3   
 1013769:	int3   
 101376a:	int3   
 101376b:	int3   
 101376c:	int3   
 101376d:	int3   
 101376e:	int3   
 101376f:	int3   
 1013770:	test   rcx,rcx
 1013773:	je     0x10137a7
 1013775:	push   rbx
 1013776:	sub    rsp,0x20
 101377a:	mov    QWORD PTR [rsp+0x30],rdi
 101377f:	mov    rbx,rcx
 1013782:	xor    edi,edi
 1013784:	mov    rcx,QWORD PTR [rbx]
 1013787:	test   rcx,rcx
 101378a:	je     0x101379d
 101378c:	mov    rax,QWORD PTR [rcx]
 101378f:	mov    QWORD PTR [rbx],rax
 1013792:	mov    QWORD PTR [rcx],rdi
 1013795:	call   QWORD PTR [rip+0x18e65]        # 0x102c600
 101379b:	jmp    0x1013784
 101379d:	mov    rdi,QWORD PTR [rsp+0x30]
 10137a2:	add    rsp,0x20
 10137a6:	pop    rbx
 10137a7:	repz ret 
 10137a9:	int3   
 10137aa:	int3   
 10137ab:	int3   
 10137ac:	int3   
 10137ad:	int3   
 10137ae:	int3   
 10137af:	int3   
 10137b0:	rex push rbx
 10137b2:	sub    rsp,0x30
 10137b6:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 10137bf:	mov    QWORD PTR [rsp+0x40],0x0
 10137c8:	mov    rax,QWORD PTR [rcx]
 10137cb:	lea    rdx,[rsp+0x40]
 10137d0:	call   QWORD PTR [rax+0x110]
 10137d6:	mov    rbx,QWORD PTR [rsp+0x40]
 10137db:	mov    rcx,rbx
 10137de:	call   QWORD PTR [rip+0xfffffffffffedd9c]        # 0x1001580
 10137e4:	mov    edx,eax
 10137e6:	mov    rcx,rbx
 10137e9:	call   0x1017450
 10137ee:	mov    ebx,eax
 10137f0:	mov    rcx,QWORD PTR [rsp+0x40]
 10137f5:	test   rcx,rcx
 10137f8:	je     0x1013802
 10137fa:	call   QWORD PTR [rip+0xfffffffffffedd70]        # 0x1001570
 1013800:	mov    eax,ebx
 1013802:	add    rsp,0x30
 1013806:	pop    rbx
 1013807:	ret    
 1013808:	int3   
 1013809:	int3   
 101380a:	int3   
 101380b:	int3   
 101380c:	int3   
 101380d:	int3   
 101380e:	int3   
 101380f:	int3   
 1013810:	mov    rcx,QWORD PTR [rcx]
 1013813:	jmp    0x100bccc
 1013818:	int3   
 1013819:	int3   
 101381a:	int3   
 101381b:	int3   
 101381c:	int3   
 101381d:	int3   
 101381e:	int3   
 101381f:	int3   
 1013820:	mov    QWORD PTR [rsp+0x8],rbx
 1013825:	push   rdi
 1013826:	sub    rsp,0x20
 101382a:	mov    rdi,rcx
 101382d:	mov    rcx,QWORD PTR [rcx]
 1013830:	mov    rbx,rdx
 1013833:	cmp    rcx,rdx
 1013836:	je     0x1013854
 1013838:	test   rcx,rcx
 101383b:	je     0x1013854
 101383d:	call   QWORD PTR [rip+0x18dbd]        # 0x102c600
 1013843:	mov    QWORD PTR [rdi],rbx
 1013846:	mov    rax,rbx
 1013849:	mov    rbx,QWORD PTR [rsp+0x30]
 101384e:	add    rsp,0x20
 1013852:	pop    rdi
 1013853:	ret    
 1013854:	mov    rax,rbx
 1013857:	mov    rbx,QWORD PTR [rsp+0x30]
 101385c:	mov    QWORD PTR [rdi],rdx
 101385f:	add    rsp,0x20
 1013863:	pop    rdi
 1013864:	ret    
 1013865:	int3   
 1013866:	int3   
 1013867:	int3   
 1013868:	int3   
 1013869:	int3   
 101386a:	int3   
 101386b:	int3   
 101386c:	int3   
 101386d:	int3   
 101386e:	int3   
 101386f:	int3   
 1013870:	mov    QWORD PTR [rsp+0x8],rcx
 1013875:	push   rbx
 1013876:	sub    rsp,0x30
 101387a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1013883:	mov    rbx,rcx
 1013886:	mov    rcx,QWORD PTR [rcx]
 1013889:	test   rcx,rcx
 101388c:	je     0x1013894
 101388e:	call   QWORD PTR [rip+0x18d6c]        # 0x102c600
 1013894:	mov    QWORD PTR [rbx],0x0
 101389b:	mov    rcx,QWORD PTR [rbx]
 101389e:	add    rsp,0x30
 10138a2:	pop    rbx
 10138a3:	jmp    0x100bccc
 10138a8:	int3   
 10138a9:	int3   
 10138aa:	int3   
 10138ab:	int3   
 10138ac:	int3   
 10138ad:	int3   
 10138ae:	int3   
 10138af:	int3   
 10138b0:	rex push rdi
 10138b2:	push   r14
 10138b4:	push   r15
 10138b6:	sub    rsp,0x30
 10138ba:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 10138c3:	mov    QWORD PTR [rsp+0x58],rbx
 10138c8:	mov    QWORD PTR [rsp+0x60],rbp
 10138cd:	mov    QWORD PTR [rsp+0x68],rsi
 10138d2:	mov    r14,rdx
 10138d5:	mov    r15,rcx
 10138d8:	xor    edi,edi
 10138da:	mov    esi,edi
 10138dc:	mov    rcx,QWORD PTR [rcx+0x10]
 10138e0:	mov    rax,QWORD PTR [rcx]
 10138e3:	lea    rdx,[r15+0x18]
 10138e7:	call   QWORD PTR [rax+0x48]
 10138ea:	test   eax,eax
 10138ec:	js     0x101397d
 10138f2:	cmp    QWORD PTR [r15+0x18],rsi
 10138f6:	je     0x1013973
 10138f8:	mov    QWORD PTR [rsp+0x50],rdi
 10138fd:	mov    edx,0x2a0
 1013902:	xor    ecx,ecx
 1013904:	call   QWORD PTR [rip+0x18cee]        # 0x102c5f8
 101390a:	test   rax,rax
 101390d:	je     0x101391c
 101390f:	mov    rcx,rax
 1013912:	call   0x100ff90
 1013917:	mov    rbp,rax
 101391a:	jmp    0x101391f
 101391c:	mov    rbp,rdi
 101391f:	mov    rbx,rbp
 1013922:	mov    QWORD PTR [rsp+0x50],rbx
 1013927:	test   rbp,rbp
 101392a:	je     0x1013949
 101392c:	mov    rdx,QWORD PTR [r15+0x18]
 1013930:	mov    rcx,rbp
 1013933:	call   0x1010390
 1013938:	mov    esi,eax
 101393a:	test   eax,eax
 101393c:	je     0x1013949
 101393e:	mov    rbx,rdi
 1013941:	mov    QWORD PTR [rsp+0x50],rbx
 1013946:	mov    QWORD PTR [r14],rbp
 1013949:	test   rbx,rbx
 101394c:	je     0x101396f
 101394e:	add    rbx,0x8
 1013952:	or     eax,0xffffffff
 1013955:	lock xadd DWORD PTR [rbx],eax
 1013959:	dec    eax
 101395b:	jne    0x101396f
 101395d:	test   rbx,rbx
 1013960:	je     0x1013966
 1013962:	lea    rdi,[rbx-0x8]
 1013966:	mov    rax,QWORD PTR [rdi]
 1013969:	mov    rcx,rdi
 101396c:	call   QWORD PTR [rax+0x30]
 101396f:	mov    eax,esi
 1013971:	jmp    0x101397f
 1013973:	mov    QWORD PTR [r14],rdi
 1013976:	mov    eax,0x1
 101397b:	jmp    0x101397f
 101397d:	mov    eax,edi
 101397f:	mov    rbx,QWORD PTR [rsp+0x58]
 1013984:	mov    rbp,QWORD PTR [rsp+0x60]
 1013989:	mov    rsi,QWORD PTR [rsp+0x68]
 101398e:	add    rsp,0x30
 1013992:	pop    r15
 1013994:	pop    r14
 1013996:	pop    rdi
 1013997:	ret    
 1013998:	int3   
 1013999:	int3   
 101399a:	int3   
 101399b:	int3   
 101399c:	int3   
 101399d:	int3   
 101399e:	int3   
 101399f:	int3   
 10139a0:	mov    QWORD PTR [rsp+0x8],rbx
 10139a5:	push   rdi
 10139a6:	sub    rsp,0x20
 10139aa:	mov    rbx,rcx
 10139ad:	mov    rcx,QWORD PTR [rcx+0x10]
 10139b1:	mov    rdi,rdx
 10139b4:	test   rcx,rcx
 10139b7:	je     0x10139bf
 10139b9:	mov    rax,QWORD PTR [rcx]
 10139bc:	call   QWORD PTR [rax+0x10]
 10139bf:	mov    QWORD PTR [rbx+0x10],rdi
 10139c3:	mov    rax,QWORD PTR [rdi]
 10139c6:	mov    rcx,rdi
 10139c9:	call   QWORD PTR [rax+0x8]
 10139cc:	mov    rcx,QWORD PTR [rbx+0x18]
 10139d0:	test   rcx,rcx
 10139d3:	je     0x10139db
 10139d5:	mov    rax,QWORD PTR [rcx]
 10139d8:	call   QWORD PTR [rax+0x10]
 10139db:	mov    QWORD PTR [rbx+0x18],0x0
 10139e3:	mov    rbx,QWORD PTR [rsp+0x30]
 10139e8:	add    rsp,0x20
 10139ec:	pop    rdi
 10139ed:	ret    
 10139ee:	int3   
 10139ef:	int3   
 10139f0:	int3   
 10139f1:	int3   
 10139f2:	int3   
 10139f3:	int3   
 10139f4:	int3   
 10139f5:	int3   
 10139f6:	int3   
 10139f7:	int3   
 10139f8:	int3   
 10139f9:	int3   
 10139fa:	int3   
 10139fb:	int3   
 10139fc:	int3   
 10139fd:	int3   
 10139fe:	int3   
 10139ff:	int3   
 1013a00:	test   rcx,rcx
 1013a03:	je     0x1013a50
 1013a05:	mov    QWORD PTR [rsp+0x8],rcx
 1013a0a:	push   rbx
 1013a0b:	sub    rsp,0x30
 1013a0f:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1013a18:	mov    rbx,rcx
 1013a1b:	mov    rcx,QWORD PTR [rcx+0x18]
 1013a1f:	test   rcx,rcx
 1013a22:	je     0x1013a2b
 1013a24:	mov    rax,QWORD PTR [rcx]
 1013a27:	call   QWORD PTR [rax+0x10]
 1013a2a:	nop
 1013a2b:	mov    rcx,QWORD PTR [rbx+0x10]
 1013a2f:	test   rcx,rcx
 1013a32:	je     0x1013a3b
 1013a34:	mov    rax,QWORD PTR [rcx]
 1013a37:	call   QWORD PTR [rax+0x10]
 1013a3a:	nop
 1013a3b:	mov    DWORD PTR [rbx+0x8],0x8000dead
 1013a42:	mov    rcx,rbx
 1013a45:	call   QWORD PTR [rip+0x18bb5]        # 0x102c600
 1013a4b:	add    rsp,0x30
 1013a4f:	pop    rbx
 1013a50:	repz ret 
 1013a52:	int3   
 1013a53:	int3   
 1013a54:	int3   
 1013a55:	int3   
 1013a56:	int3   
 1013a57:	int3   
 1013a58:	int3   
 1013a59:	int3   
 1013a5a:	int3   
 1013a5b:	int3   
 1013a5c:	int3   
 1013a5d:	int3   
 1013a5e:	int3   
 1013a5f:	int3   
 1013a60:	sub    rsp,0x28
 1013a64:	mov    rcx,QWORD PTR [rcx]
 1013a67:	test   rcx,rcx
 1013a6a:	je     0x1013a72
 1013a6c:	mov    rax,QWORD PTR [rcx]
 1013a6f:	call   QWORD PTR [rax+0x10]
 1013a72:	add    rsp,0x28
 1013a76:	ret    
 1013a77:	int3   
 1013a78:	int3   
 1013a79:	int3   
 1013a7a:	int3   
 1013a7b:	int3   
 1013a7c:	int3   
 1013a7d:	int3   
 1013a7e:	int3   
 1013a7f:	int3   
 1013a80:	rex push rbx
 1013a82:	sub    rsp,0x40
 1013a86:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1013a8f:	mov    rbx,rcx
 1013a92:	mov    QWORD PTR [rsp+0x50],0x0
 1013a9b:	cmp    WORD PTR [rcx],0x8
 1013a9f:	jne    0x1013ad9
 1013aa1:	mov    r8d,0x2
 1013aa7:	lea    rdx,[rip+0xfffffffffffeebe2]        # 0x1002690
 1013aae:	mov    rcx,QWORD PTR [rcx+0x8]
 1013ab2:	call   0x10174f4
 1013ab7:	test   eax,eax
 1013ab9:	jne    0x1013ad9
 1013abb:	lea    r8,[rsp+0x50]
 1013ac0:	lea    rdx,[rip+0xffffffffffff1581]        # 0x1005048
 1013ac7:	mov    rcx,QWORD PTR [rbx+0x8]
 1013acb:	call   0x1017500
 1013ad0:	cmp    eax,0x1
 1013ad3:	jne    0x1013b25
 1013ad5:	xor    eax,eax
 1013ad7:	jmp    0x1013b2a
 1013ad9:	cmp    WORD PTR [rbx],0x15
 1013add:	je     0x1013b25
 1013adf:	lea    rcx,[rsp+0x28]
 1013ae4:	call   QWORD PTR [rip+0xfffffffffffedaae]        # 0x1001598
 1013aea:	nop
 1013aeb:	mov    r9d,0x15
 1013af1:	xor    r8d,r8d
 1013af4:	mov    rdx,rbx
 1013af7:	lea    rcx,[rsp+0x28]
 1013afc:	call   QWORD PTR [rip+0xfffffffffffeda86]        # 0x1001588
 1013b02:	mov    ebx,eax
 1013b04:	mov    rcx,QWORD PTR [rsp+0x50]
 1013b09:	test   eax,eax
 1013b0b:	cmovns rcx,QWORD PTR [rsp+0x30]
 1013b11:	mov    QWORD PTR [rsp+0x50],rcx
 1013b16:	lea    rcx,[rsp+0x28]
 1013b1b:	call   QWORD PTR [rip+0xfffffffffffeda6f]        # 0x1001590
 1013b21:	mov    eax,ebx
 1013b23:	jmp    0x1013b2a
 1013b25:	mov    eax,0x80004005
 1013b2a:	add    rsp,0x40
 1013b2e:	pop    rbx
 1013b2f:	ret    
 1013b30:	int3   
 1013b31:	int3   
 1013b32:	int3   
 1013b33:	int3   
 1013b34:	int3   
 1013b35:	int3   
 1013b36:	int3   
 1013b37:	int3   
 1013b38:	int3   
 1013b39:	int3   
 1013b3a:	int3   
 1013b3b:	int3   
 1013b3c:	int3   
 1013b3d:	int3   
 1013b3e:	int3   
 1013b3f:	int3   
 1013b40:	mov    rax,rsp
 1013b43:	push   r14
 1013b45:	sub    rsp,0x60
 1013b49:	mov    QWORD PTR [rax-0x48],0xfffffffffffffffe
 1013b51:	mov    QWORD PTR [rax+0x8],rbx
 1013b55:	mov    QWORD PTR [rax+0x10],rsi
 1013b59:	mov    QWORD PTR [rax+0x18],rdi
 1013b5d:	mov    r14,r8
 1013b60:	mov    rsi,rdx
 1013b63:	xor    ebx,ebx
 1013b65:	call   QWORD PTR [rip+0xfffffffffffeda0d]        # 0x1001578
 1013b6b:	mov    rdi,rax
 1013b6e:	mov    QWORD PTR [rsp+0x28],rax
 1013b73:	test   rax,rax
 1013b76:	je     0x1013c4c
 1013b7c:	mov    QWORD PTR [rsp+0x88],rbx
 1013b84:	lea    rcx,[rsp+0x30]
 1013b89:	call   QWORD PTR [rip+0xfffffffffffeda09]        # 0x1001598
 1013b8f:	nop
 1013b90:	mov    rax,QWORD PTR [rsi]
 1013b93:	lea    r8,[rsp+0x88]
 1013b9b:	mov    rdx,rdi
 1013b9e:	mov    rcx,rsi
 1013ba1:	call   QWORD PTR [rax+0x38]
 1013ba4:	test   eax,eax
 1013ba6:	js     0x1013c2c
 1013bac:	mov    rcx,QWORD PTR [rsp+0x88]
 1013bb4:	test   rcx,rcx
 1013bb7:	je     0x1013c2c
 1013bb9:	mov    rax,QWORD PTR [rcx]
 1013bbc:	lea    rdx,[rsp+0x30]
 1013bc1:	call   QWORD PTR [rax+0x40]
 1013bc4:	test   eax,eax
 1013bc6:	js     0x1013c2c
 1013bc8:	mov    esi,ebx
 1013bca:	cmp    WORD PTR [rsp+0x30],0xb
 1013bd0:	jne    0x1013be2
 1013bd2:	mov    eax,ebx
 1013bd4:	cmp    WORD PTR [rsp+0x38],0xffff
 1013bda:	sete   al
 1013bdd:	mov    DWORD PTR [r14],eax
 1013be0:	jmp    0x1013c27
 1013be2:	lea    rcx,[rsp+0x48]
 1013be7:	call   QWORD PTR [rip+0xfffffffffffed9ab]        # 0x1001598
 1013bed:	nop
 1013bee:	mov    r9d,0xb
 1013bf4:	lea    r8d,[r9-0x9]
 1013bf8:	lea    rdx,[rsp+0x30]
 1013bfd:	lea    rcx,[rsp+0x48]
 1013c02:	call   QWORD PTR [rip+0xfffffffffffed980]        # 0x1001588
 1013c08:	mov    esi,eax
 1013c0a:	test   eax,eax
 1013c0c:	js     0x1013c1c
 1013c0e:	mov    eax,ebx
 1013c10:	cmp    WORD PTR [rsp+0x50],0xffff
 1013c16:	sete   al
 1013c19:	mov    DWORD PTR [r14],eax
 1013c1c:	lea    rcx,[rsp+0x48]
 1013c21:	call   QWORD PTR [rip+0xfffffffffffed969]        # 0x1001590
 1013c27:	test   esi,esi
 1013c29:	setns  bl
 1013c2c:	lea    rcx,[rsp+0x30]
 1013c31:	call   QWORD PTR [rip+0xfffffffffffed959]        # 0x1001590
 1013c37:	nop
 1013c38:	mov    rcx,QWORD PTR [rsp+0x88]
 1013c40:	test   rcx,rcx
 1013c43:	je     0x1013c4c
 1013c45:	mov    rdx,QWORD PTR [rcx]
 1013c48:	call   QWORD PTR [rdx+0x10]
 1013c4b:	nop
 1013c4c:	test   rdi,rdi
 1013c4f:	je     0x1013c5a
 1013c51:	mov    rcx,rdi
 1013c54:	call   QWORD PTR [rip+0xfffffffffffed916]        # 0x1001570
 1013c5a:	mov    eax,ebx
 1013c5c:	mov    rbx,QWORD PTR [rsp+0x70]
 1013c61:	mov    rsi,QWORD PTR [rsp+0x78]
 1013c66:	mov    rdi,QWORD PTR [rsp+0x80]
 1013c6e:	add    rsp,0x60
 1013c72:	pop    r14
 1013c74:	ret    
 1013c75:	int3   
 1013c76:	int3   
 1013c77:	int3   
 1013c78:	int3   
 1013c79:	int3   
 1013c7a:	int3   
 1013c7b:	int3   
 1013c7c:	int3   
 1013c7d:	int3   
 1013c7e:	int3   
 1013c7f:	int3   
 1013c80:	mov    rax,rsp
 1013c83:	push   r14
 1013c85:	sub    rsp,0x70
 1013c89:	mov    QWORD PTR [rax-0x50],0xfffffffffffffffe
 1013c91:	mov    QWORD PTR [rax+0x8],rbx
 1013c95:	mov    QWORD PTR [rax+0x10],rbp
 1013c99:	mov    QWORD PTR [rax+0x18],rsi
 1013c9d:	mov    QWORD PTR [rax+0x20],rdi
 1013ca1:	mov    ebp,r9d
 1013ca4:	mov    r14,r8
 1013ca7:	mov    rdi,rdx
 1013caa:	xor    ebx,ebx
 1013cac:	call   QWORD PTR [rip+0xfffffffffffed8c6]        # 0x1001578
 1013cb2:	mov    rsi,rax
 1013cb5:	mov    QWORD PTR [rsp+0x30],rax
 1013cba:	test   rax,rax
 1013cbd:	je     0x1013d8c
 1013cc3:	mov    QWORD PTR [rsp+0x20],rbx
 1013cc8:	lea    rcx,[rsp+0x38]
 1013ccd:	call   QWORD PTR [rip+0xfffffffffffed8c5]        # 0x1001598
 1013cd3:	nop
 1013cd4:	mov    rax,QWORD PTR [rdi]
 1013cd7:	lea    r8,[rsp+0x20]
 1013cdc:	mov    rdx,rsi
 1013cdf:	mov    rcx,rdi
 1013ce2:	call   QWORD PTR [rax+0x38]
 1013ce5:	test   eax,eax
 1013ce7:	js     0x1013d6f
 1013ced:	mov    rcx,QWORD PTR [rsp+0x20]
 1013cf2:	test   rcx,rcx
 1013cf5:	je     0x1013d6f
 1013cf7:	mov    rax,QWORD PTR [rcx]
 1013cfa:	lea    rdx,[rsp+0x38]
 1013cff:	call   QWORD PTR [rax+0x40]
 1013d02:	test   eax,eax
 1013d04:	js     0x1013d6f
 1013d06:	cmp    WORD PTR [rsp+0x38],0x8
 1013d0c:	jne    0x1013d21
 1013d0e:	mov    edx,ebp
 1013d10:	mov    r8,QWORD PTR [rsp+0x40]
 1013d15:	mov    rcx,r14
 1013d18:	call   0x100a890
 1013d1d:	mov    edi,eax
 1013d1f:	jmp    0x1013d6a
 1013d21:	lea    rcx,[rsp+0x50]
 1013d26:	call   QWORD PTR [rip+0xfffffffffffed86c]        # 0x1001598
 1013d2c:	nop
 1013d2d:	mov    r9d,0x8
 1013d33:	lea    r8d,[r9-0x6]
 1013d37:	lea    rdx,[rsp+0x38]
 1013d3c:	lea    rcx,[rsp+0x50]
 1013d41:	call   QWORD PTR [rip+0xfffffffffffed841]        # 0x1001588
 1013d47:	mov    edi,eax
 1013d49:	test   eax,eax
 1013d4b:	js     0x1013d5f
 1013d4d:	mov    rdx,rbp
 1013d50:	mov    r8,QWORD PTR [rsp+0x58]
 1013d55:	mov    rcx,r14
 1013d58:	call   0x100a890
 1013d5d:	mov    edi,eax
 1013d5f:	lea    rcx,[rsp+0x50]
 1013d64:	call   QWORD PTR [rip+0xfffffffffffed826]        # 0x1001590
 1013d6a:	test   edi,edi
 1013d6c:	setns  bl
 1013d6f:	lea    rcx,[rsp+0x38]
 1013d74:	call   QWORD PTR [rip+0xfffffffffffed816]        # 0x1001590
 1013d7a:	nop
 1013d7b:	mov    rcx,QWORD PTR [rsp+0x20]
 1013d80:	test   rcx,rcx
 1013d83:	je     0x1013d8c
 1013d85:	mov    rdx,QWORD PTR [rcx]
 1013d88:	call   QWORD PTR [rdx+0x10]
 1013d8b:	nop
 1013d8c:	test   rsi,rsi
 1013d8f:	je     0x1013d9a
 1013d91:	mov    rcx,rsi
 1013d94:	call   QWORD PTR [rip+0xfffffffffffed7d6]        # 0x1001570
 1013d9a:	mov    eax,ebx
 1013d9c:	lea    r11,[rsp+0x70]
 1013da1:	mov    rbx,QWORD PTR [r11+0x10]
 1013da5:	mov    rbp,QWORD PTR [r11+0x18]
 1013da9:	mov    rsi,QWORD PTR [r11+0x20]
 1013dad:	mov    rdi,QWORD PTR [r11+0x28]
 1013db1:	mov    rsp,r11
 1013db4:	pop    r14
 1013db6:	ret    
 1013db7:	int3   
 1013db8:	int3   
 1013db9:	int3   
 1013dba:	int3   
 1013dbb:	int3   
 1013dbc:	int3   
 1013dbd:	int3   
 1013dbe:	int3   
 1013dbf:	int3   
 1013dc0:	rex push rdi
 1013dc2:	sub    rsp,0x30
 1013dc6:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1013dcf:	mov    QWORD PTR [rsp+0x40],rbx
 1013dd4:	mov    QWORD PTR [rsp+0x48],rbp
 1013dd9:	mov    QWORD PTR [rsp+0x50],rsi
 1013dde:	mov    rbp,r8
 1013de1:	mov    rsi,rdx
 1013de4:	xor    ebx,ebx
 1013de6:	call   QWORD PTR [rip+0xfffffffffffed78c]        # 0x1001578
 1013dec:	mov    rdi,rax
 1013def:	mov    QWORD PTR [rsp+0x28],rax
 1013df4:	test   rax,rax
 1013df7:	je     0x1013e3c
 1013df9:	mov    QWORD PTR [rsp+0x58],rbx
 1013dfe:	mov    rax,QWORD PTR [rsi]
 1013e01:	lea    r8,[rsp+0x58]
 1013e06:	mov    rdx,rdi
 1013e09:	mov    rcx,rsi
 1013e0c:	call   QWORD PTR [rax+0x38]
 1013e0f:	test   eax,eax
 1013e11:	js     0x1013e2b
 1013e13:	mov    rcx,QWORD PTR [rsp+0x58]
 1013e18:	test   rcx,rcx
 1013e1b:	je     0x1013e2b
 1013e1d:	mov    rax,QWORD PTR [rcx]
 1013e20:	mov    rdx,rbp
 1013e23:	call   QWORD PTR [rax+0x40]
 1013e26:	test   eax,eax
 1013e28:	setns  bl
 1013e2b:	mov    rcx,QWORD PTR [rsp+0x58]
 1013e30:	test   rcx,rcx
 1013e33:	je     0x1013e3c
 1013e35:	mov    rdx,QWORD PTR [rcx]
 1013e38:	call   QWORD PTR [rdx+0x10]
 1013e3b:	nop
 1013e3c:	test   rdi,rdi
 1013e3f:	je     0x1013e4a
 1013e41:	mov    rcx,rdi
 1013e44:	call   QWORD PTR [rip+0xfffffffffffed726]        # 0x1001570
 1013e4a:	mov    eax,ebx
 1013e4c:	mov    rbx,QWORD PTR [rsp+0x40]
 1013e51:	mov    rbp,QWORD PTR [rsp+0x48]
 1013e56:	mov    rsi,QWORD PTR [rsp+0x50]
 1013e5b:	add    rsp,0x30
 1013e5f:	pop    rdi
 1013e60:	ret    
 1013e61:	int3   
 1013e62:	int3   
 1013e63:	int3   
 1013e64:	int3   
 1013e65:	int3   
 1013e66:	int3   
 1013e67:	int3   
 1013e68:	int3   
 1013e69:	int3   
 1013e6a:	int3   
 1013e6b:	int3   
 1013e6c:	int3   
 1013e6d:	int3   
 1013e6e:	int3   
 1013e6f:	int3   
 1013e70:	mov    DWORD PTR [rsp+0x10],edx
 1013e74:	push   rbp
 1013e75:	push   rsi
 1013e76:	push   rdi
 1013e77:	push   r12
 1013e79:	push   r13
 1013e7b:	push   r14
 1013e7d:	push   r15
 1013e7f:	mov    rbp,rsp
 1013e82:	sub    rsp,0x70
 1013e86:	mov    QWORD PTR [rbp-0x50],0xfffffffffffffffe
 1013e8e:	mov    QWORD PTR [rsp+0xb0],rbx
 1013e96:	movaps XMMWORD PTR [rsp+0x60],xmm6
 1013e9b:	mov    r15,r8
 1013e9e:	mov    rbx,rcx
 1013ea1:	mov    ecx,DWORD PTR [rip+0xffffffffffff0549]        # 0x10043f0
 1013ea7:	call   0x1016960
 1013eac:	test   eax,eax
 1013eae:	jne    0x101480b
 1013eb4:	mov    edx,DWORD PTR [rbp+0x48]
 1013eb7:	mov    ecx,DWORD PTR [rip+0xffffffffffff053f]        # 0x10043fc
 1013ebd:	call   0x1016960
 1013ec2:	test   eax,eax
 1013ec4:	jne    0x101480b
 1013eca:	mov    edx,DWORD PTR [rbp+0x48]
 1013ecd:	mov    ecx,DWORD PTR [rip+0xffffffffffff0521]        # 0x10043f4
 1013ed3:	call   0x1016960
 1013ed8:	test   eax,eax
 1013eda:	jne    0x1014709
 1013ee0:	mov    edx,DWORD PTR [rbp+0x48]
 1013ee3:	mov    ecx,DWORD PTR [rip+0xffffffffffff0517]        # 0x1004400
 1013ee9:	call   0x1016960
 1013eee:	test   eax,eax
 1013ef0:	jne    0x1014709
 1013ef6:	mov    edx,DWORD PTR [rbp+0x48]
 1013ef9:	mov    ecx,DWORD PTR [rip+0xffffffffffff0511]        # 0x1004410
 1013eff:	call   0x1016960
 1013f04:	test   eax,eax
 1013f06:	je     0x101404d
 1013f0c:	xor    r14b,r14b
 1013f0f:	movzx  eax,WORD PTR [rbx]
 1013f12:	cmp    ax,0xb
 1013f16:	jne    0x1013f4d
 1013f18:	lea    rcx,[rbp-0x48]
 1013f1c:	call   QWORD PTR [rip+0xfffffffffffed676]        # 0x1001598
 1013f22:	nop
 1013f23:	mov    r9d,0x11
 1013f29:	xor    r8d,r8d
 1013f2c:	mov    rdx,rbx
 1013f2f:	lea    rcx,[rbp-0x48]
 1013f33:	call   QWORD PTR [rip+0xfffffffffffed64f]        # 0x1001588
 1013f39:	mov    edi,eax
 1013f3b:	movzx  ebx,r14b
 1013f3f:	movzx  eax,BYTE PTR [rbp-0x40]
 1013f43:	test   edi,edi
 1013f45:	cmovns ebx,eax
 1013f48:	jmp    0x10140a2
 1013f4d:	cmp    ax,0x1f
 1013f51:	je     0x1013f5d
 1013f53:	cmp    ax,0x8
 1013f57:	jne    0x101400d
 1013f5d:	xor    esi,esi
 1013f5f:	mov    edi,esi
 1013f61:	cmp    ax,0x11
 1013f65:	jne    0x1013f6e
 1013f67:	movzx  r14d,BYTE PTR [rbx+0x8]
 1013f6c:	jmp    0x1013fa9
 1013f6e:	lea    rcx,[rbp-0x48]
 1013f72:	call   QWORD PTR [rip+0xfffffffffffed620]        # 0x1001598
 1013f78:	nop
 1013f79:	mov    r9d,0x11
 1013f7f:	xor    r8d,r8d
 1013f82:	mov    rdx,rbx
 1013f85:	lea    rcx,[rbp-0x48]
 1013f89:	call   QWORD PTR [rip+0xfffffffffffed5f9]        # 0x1001588
 1013f8f:	mov    edi,eax
 1013f91:	movzx  r14d,r14b
 1013f95:	movzx  eax,BYTE PTR [rbp-0x40]
 1013f99:	test   edi,edi
 1013f9b:	cmovns r14d,eax
 1013f9f:	lea    rcx,[rbp-0x48]
 1013fa3:	call   QWORD PTR [rip+0xfffffffffffed5e7]        # 0x1001590
 1013fa9:	test   edi,edi
 1013fab:	js     0x1013fbd
 1013fad:	movzx  eax,r14b
 1013fb1:	mov    DWORD PTR [rbp-0x40],0x1
 1013fb8:	jmp    0x1014480
 1013fbd:	mov    rdx,QWORD PTR [rbx+0x8]
 1013fc1:	lea    rcx,[rip+0xffffffffffff1090]        # 0x1005058
 1013fc8:	call   0x10174e8
 1013fcd:	test   eax,eax
 1013fcf:	je     0x1014030
 1013fd1:	mov    rdx,QWORD PTR [rbx+0x8]
 1013fd5:	lea    rcx,[rip+0xffffffffffff1088]        # 0x1005064
 1013fdc:	call   0x10174e8
 1013fe1:	test   eax,eax
 1013fe3:	je     0x1014030
 1013fe5:	mov    rdx,QWORD PTR [rbx+0x8]
 1013fe9:	lea    rcx,[rip+0xffffffffffff1078]        # 0x1005068
 1013ff0:	call   0x10174e8
 1013ff5:	test   eax,eax
 1013ff7:	je     0x1014017
 1013ff9:	mov    rdx,QWORD PTR [rbx+0x8]
 1013ffd:	lea    rcx,[rip+0xffffffffffff1070]        # 0x1005074
 1014004:	call   0x10174e8
 1014009:	test   eax,eax
 101400b:	je     0x1014017
 101400d:	mov    edi,0x80020005
 1014012:	jmp    0x10148ee
 1014017:	mov    DWORD PTR [rbp-0x40],0x4
 101401e:	mov    QWORD PTR [r15],rsi
 1014021:	mov    rax,QWORD PTR [rbp-0x40]
 1014025:	mov    QWORD PTR [r15+0x8],rax
 1014029:	mov    edi,esi
 101402b:	jmp    0x10148ee
 1014030:	mov    DWORD PTR [rbp-0x40],0x4
 1014037:	mov    QWORD PTR [r15],0x1
 101403e:	mov    rax,QWORD PTR [rbp-0x40]
 1014042:	mov    QWORD PTR [r15+0x8],rax
 1014046:	mov    edi,esi
 1014048:	jmp    0x10148ee
 101404d:	mov    edx,DWORD PTR [rbp+0x48]
 1014050:	mov    ecx,DWORD PTR [rip+0xffffffffffff037a]        # 0x10043d0
 1014056:	call   0x1016960
 101405b:	test   eax,eax
 101405d:	je     0x10140c3
 101405f:	xor    r14b,r14b
 1014062:	xor    esi,esi
 1014064:	mov    edi,esi
 1014066:	cmp    WORD PTR [rbx],0x11
 101406a:	jne    0x1014072
 101406c:	movzx  ebx,BYTE PTR [rbx+0x8]
 1014070:	jmp    0x10140ac
 1014072:	lea    rcx,[rbp-0x48]
 1014076:	call   QWORD PTR [rip+0xfffffffffffed51c]        # 0x1001598
 101407c:	nop
 101407d:	mov    r9d,0x11
 1014083:	xor    r8d,r8d
 1014086:	mov    rdx,rbx
 1014089:	lea    rcx,[rbp-0x48]
 101408d:	call   QWORD PTR [rip+0xfffffffffffed4f5]        # 0x1001588
 1014093:	mov    edi,eax
 1014095:	movzx  ebx,r14b
 1014099:	movzx  eax,BYTE PTR [rbp-0x40]
 101409d:	test   edi,edi
 101409f:	cmovns ebx,eax
 10140a2:	lea    rcx,[rbp-0x48]
 10140a6:	call   QWORD PTR [rip+0xfffffffffffed4e4]        # 0x1001590
 10140ac:	test   edi,edi
 10140ae:	js     0x10148ee
 10140b4:	movzx  eax,bl
 10140b7:	mov    DWORD PTR [rbp-0x40],0x1
 10140be:	jmp    0x1014480
 10140c3:	mov    edx,DWORD PTR [rbp+0x48]
 10140c6:	mov    ecx,DWORD PTR [rip+0xffffffffffff0308]        # 0x10043d4
 10140cc:	call   0x1016960
 10140d1:	test   eax,eax
 10140d3:	je     0x1014130
 10140d5:	xor    esi,esi
 10140d7:	mov    edi,esi
 10140d9:	cmp    WORD PTR [rbx],0x12
 10140dd:	jne    0x10140e5
 10140df:	movzx  esi,WORD PTR [rbx+0x8]
 10140e3:	jmp    0x1014119
 10140e5:	lea    rcx,[rbp-0x48]
 10140e9:	call   QWORD PTR [rip+0xfffffffffffed4a9]        # 0x1001598
 10140ef:	nop
 10140f0:	mov    r9d,0x12
 10140f6:	xor    r8d,r8d
 10140f9:	mov    rdx,rbx
 10140fc:	lea    rcx,[rbp-0x48]
 1014100:	call   QWORD PTR [rip+0xfffffffffffed482]        # 0x1001588
 1014106:	mov    edi,eax
 1014108:	test   eax,eax
 101410a:	cmovns si,WORD PTR [rbp-0x40]
 101410f:	lea    rcx,[rbp-0x48]
 1014113:	call   QWORD PTR [rip+0xfffffffffffed477]        # 0x1001590
 1014119:	test   edi,edi
 101411b:	js     0x10148ee
 1014121:	movzx  eax,si
 1014124:	mov    DWORD PTR [rbp-0x40],0x2
 101412b:	jmp    0x1014480
 1014130:	mov    edx,DWORD PTR [rbp+0x48]
 1014133:	mov    ecx,DWORD PTR [rip+0xffffffffffff029f]        # 0x10043d8
 1014139:	call   0x1016960
 101413e:	test   eax,eax
 1014140:	je     0x1014193
 1014142:	xor    esi,esi
 1014144:	mov    edi,esi
 1014146:	cmp    WORD PTR [rbx],0x13
 101414a:	jne    0x1014151
 101414c:	mov    esi,DWORD PTR [rbx+0x8]
 101414f:	jmp    0x1014184
 1014151:	lea    rcx,[rbp-0x48]
 1014155:	call   QWORD PTR [rip+0xfffffffffffed43d]        # 0x1001598
 101415b:	nop
 101415c:	mov    r9d,0x13
 1014162:	xor    r8d,r8d
 1014165:	mov    rdx,rbx
 1014168:	lea    rcx,[rbp-0x48]
 101416c:	call   QWORD PTR [rip+0xfffffffffffed416]        # 0x1001588
 1014172:	mov    edi,eax
 1014174:	test   eax,eax
 1014176:	cmovns esi,DWORD PTR [rbp-0x40]
 101417a:	lea    rcx,[rbp-0x48]
 101417e:	call   QWORD PTR [rip+0xfffffffffffed40c]        # 0x1001590
 1014184:	test   edi,edi
 1014186:	js     0x10148ee
 101418c:	mov    eax,esi
 101418e:	jmp    0x1014479
 1014193:	mov    edx,DWORD PTR [rbp+0x48]
 1014196:	mov    ecx,DWORD PTR [rip+0xffffffffffff0240]        # 0x10043dc
 101419c:	call   0x1016960
 10141a1:	test   eax,eax
 10141a3:	je     0x1014208
 10141a5:	xor    esi,esi
 10141a7:	mov    edi,esi
 10141a9:	cmp    WORD PTR [rbx],0x15
 10141ad:	jne    0x10141b5
 10141af:	mov    rsi,QWORD PTR [rbx+0x8]
 10141b3:	jmp    0x10141e9
 10141b5:	lea    rcx,[rbp-0x48]
 10141b9:	call   QWORD PTR [rip+0xfffffffffffed3d9]        # 0x1001598
 10141bf:	nop
 10141c0:	mov    r9d,0x15
 10141c6:	xor    r8d,r8d
 10141c9:	mov    rdx,rbx
 10141cc:	lea    rcx,[rbp-0x48]
 10141d0:	call   QWORD PTR [rip+0xfffffffffffed3b2]        # 0x1001588
 10141d6:	mov    edi,eax
 10141d8:	test   eax,eax
 10141da:	cmovns rsi,QWORD PTR [rbp-0x40]
 10141df:	lea    rcx,[rbp-0x48]
 10141e3:	call   QWORD PTR [rip+0xfffffffffffed3a7]        # 0x1001590
 10141e9:	test   edi,edi
 10141eb:	js     0x10148ee
 10141f1:	mov    DWORD PTR [rbp-0x40],0x8
 10141f8:	mov    QWORD PTR [r15],rsi
 10141fb:	mov    rax,QWORD PTR [rbp-0x40]
 10141ff:	mov    QWORD PTR [r15+0x8],rax
 1014203:	jmp    0x10148ee
 1014208:	mov    edx,DWORD PTR [rbp+0x48]
 101420b:	mov    ecx,DWORD PTR [rip+0xffffffffffff01cf]        # 0x10043e0
 1014211:	call   0x1016960
 1014216:	test   eax,eax
 1014218:	je     0x1014293
 101421a:	xor    esi,esi
 101421c:	mov    edi,esi
 101421e:	cmp    WORD PTR [rbx],0x4
 1014222:	jne    0x101422b
 1014224:	movss  xmm6,DWORD PTR [rbx+0x8]
 1014229:	jmp    0x1014268
 101422b:	lea    rcx,[rbp-0x48]
 101422f:	call   QWORD PTR [rip+0xfffffffffffed363]        # 0x1001598
 1014235:	nop
 1014236:	mov    r9d,0x4
 101423c:	xor    r8d,r8d
 101423f:	mov    rdx,rbx
 1014242:	lea    rcx,[rbp-0x48]
 1014246:	call   QWORD PTR [rip+0xfffffffffffed33c]        # 0x1001588
 101424c:	mov    edi,eax
 101424e:	test   eax,eax
 1014250:	js     0x1014259
 1014252:	movss  xmm6,DWORD PTR [rbp-0x40]
 1014257:	jmp    0x101425e
 1014259:	movss  xmm6,DWORD PTR [rbp+0x58]
 101425e:	lea    rcx,[rbp-0x48]
 1014262:	call   QWORD PTR [rip+0xfffffffffffed328]        # 0x1001590
 1014268:	test   edi,edi
 101426a:	js     0x10148ee
 1014270:	cvtps2pd xmm0,xmm6
 1014273:	movsd  QWORD PTR [rbp-0x48],xmm0
 1014278:	mov    DWORD PTR [rbp-0x40],0x4
 101427f:	mov    rax,QWORD PTR [rbp-0x48]
 1014283:	mov    QWORD PTR [r15],rax
 1014286:	mov    rax,QWORD PTR [rbp-0x40]
 101428a:	mov    QWORD PTR [r15+0x8],rax
 101428e:	jmp    0x10148ee
 1014293:	mov    edx,DWORD PTR [rbp+0x48]
 1014296:	mov    ecx,DWORD PTR [rip+0xffffffffffff0148]        # 0x10043e4
 101429c:	call   0x1016960
 10142a1:	test   eax,eax
 10142a3:	je     0x101431b
 10142a5:	xor    esi,esi
 10142a7:	mov    edi,esi
 10142a9:	cmp    WORD PTR [rbx],0x5
 10142ad:	jne    0x10142b6
 10142af:	movsd  xmm6,QWORD PTR [rbx+0x8]
 10142b4:	jmp    0x10142f3
 10142b6:	lea    rcx,[rbp-0x48]
 10142ba:	call   QWORD PTR [rip+0xfffffffffffed2d8]        # 0x1001598
 10142c0:	nop
 10142c1:	mov    r9d,0x5
 10142c7:	xor    r8d,r8d
 10142ca:	mov    rdx,rbx
 10142cd:	lea    rcx,[rbp-0x48]
 10142d1:	call   QWORD PTR [rip+0xfffffffffffed2b1]        # 0x1001588
 10142d7:	mov    edi,eax
 10142d9:	test   eax,eax
 10142db:	js     0x10142e4
 10142dd:	movsd  xmm6,QWORD PTR [rbp-0x40]
 10142e2:	jmp    0x10142e9
 10142e4:	movsd  xmm6,QWORD PTR [rbp+0x58]
 10142e9:	lea    rcx,[rbp-0x48]
 10142ed:	call   QWORD PTR [rip+0xfffffffffffed29d]        # 0x1001590
 10142f3:	test   edi,edi
 10142f5:	js     0x10148ee
 10142fb:	movsd  QWORD PTR [rbp-0x48],xmm6
 1014300:	mov    DWORD PTR [rbp-0x40],0x8
 1014307:	mov    rax,QWORD PTR [rbp-0x48]
 101430b:	mov    QWORD PTR [r15],rax
 101430e:	mov    rax,QWORD PTR [rbp-0x40]
 1014312:	mov    QWORD PTR [r15+0x8],rax
 1014316:	jmp    0x10148ee
 101431b:	mov    edx,DWORD PTR [rbp+0x48]
 101431e:	mov    ecx,DWORD PTR [rip+0xffffffffffff009c]        # 0x10043c0
 1014324:	call   0x1016960
 1014329:	test   eax,eax
 101432b:	je     0x101439a
 101432d:	xor    esi,esi
 101432f:	mov    edi,esi
 1014331:	cmp    WORD PTR [rbx],0x10
 1014335:	jne    0x101433d
 1014337:	movzx  ebx,BYTE PTR [rbx+0x8]
 101433b:	jmp    0x1014377
 101433d:	lea    rcx,[rbp-0x48]
 1014341:	call   QWORD PTR [rip+0xfffffffffffed251]        # 0x1001598
 1014347:	nop
 1014348:	mov    r9d,0x10
 101434e:	xor    r8d,r8d
 1014351:	mov    rdx,rbx
 1014354:	lea    rcx,[rbp-0x48]
 1014358:	call   QWORD PTR [rip+0xfffffffffffed22a]        # 0x1001588
 101435e:	mov    edi,eax
 1014360:	movzx  ebx,BYTE PTR [rbp+0x58]
 1014364:	movzx  eax,BYTE PTR [rbp-0x40]
 1014368:	test   edi,edi
 101436a:	cmovns ebx,eax
 101436d:	lea    rcx,[rbp-0x48]
 1014371:	call   QWORD PTR [rip+0xfffffffffffed219]        # 0x1001590
 1014377:	test   edi,edi
 1014379:	js     0x10148ee
 101437f:	movsx  rax,bl
 1014383:	mov    DWORD PTR [rbp-0x40],0x1
 101438a:	mov    QWORD PTR [r15],rax
 101438d:	mov    rax,QWORD PTR [rbp-0x40]
 1014391:	mov    QWORD PTR [r15+0x8],rax
 1014395:	jmp    0x10148ee
 101439a:	mov    edx,DWORD PTR [rbp+0x48]
 101439d:	mov    ecx,DWORD PTR [rip+0xffffffffffff0021]        # 0x10043c4
 10143a3:	call   0x1016960
 10143a8:	test   eax,eax
 10143aa:	je     0x1014417
 10143ac:	xor    esi,esi
 10143ae:	mov    edi,esi
 10143b0:	cmp    WORD PTR [rbx],0x2
 10143b4:	jne    0x10143bc
 10143b6:	movzx  ebx,WORD PTR [rbx+0x8]
 10143ba:	jmp    0x10143f4
 10143bc:	lea    rcx,[rbp-0x48]
 10143c0:	call   QWORD PTR [rip+0xfffffffffffed1d2]        # 0x1001598
 10143c6:	nop
 10143c7:	mov    r9d,0x2
 10143cd:	xor    r8d,r8d
 10143d0:	mov    rdx,rbx
 10143d3:	lea    rcx,[rbp-0x48]
 10143d7:	call   QWORD PTR [rip+0xfffffffffffed1ab]        # 0x1001588
 10143dd:	mov    edi,eax
 10143df:	movzx  ebx,WORD PTR [rbp+0x58]
 10143e3:	test   eax,eax
 10143e5:	cmovns bx,WORD PTR [rbp-0x40]
 10143ea:	lea    rcx,[rbp-0x48]
 10143ee:	call   QWORD PTR [rip+0xfffffffffffed19c]        # 0x1001590
 10143f4:	test   edi,edi
 10143f6:	js     0x10148ee
 10143fc:	movsx  rax,bx
 1014400:	mov    DWORD PTR [rbp-0x40],0x2
 1014407:	mov    QWORD PTR [r15],rax
 101440a:	mov    rax,QWORD PTR [rbp-0x40]
 101440e:	mov    QWORD PTR [r15+0x8],rax
 1014412:	jmp    0x10148ee
 1014417:	mov    edx,DWORD PTR [rbp+0x48]
 101441a:	mov    ecx,DWORD PTR [rip+0xfffffffffffeffa8]        # 0x10043c8
 1014420:	call   0x1016960
 1014425:	test   eax,eax
 1014427:	je     0x1014490
 1014429:	xor    esi,esi
 101442b:	mov    edi,esi
 101442d:	cmp    WORD PTR [rbx],0x3
 1014431:	jne    0x1014438
 1014433:	mov    ebx,DWORD PTR [rbx+0x8]
 1014436:	jmp    0x101446e
 1014438:	lea    rcx,[rbp-0x48]
 101443c:	call   QWORD PTR [rip+0xfffffffffffed156]        # 0x1001598
 1014442:	nop
 1014443:	mov    r9d,0x3
 1014449:	xor    r8d,r8d
 101444c:	mov    rdx,rbx
 101444f:	lea    rcx,[rbp-0x48]
 1014453:	call   QWORD PTR [rip+0xfffffffffffed12f]        # 0x1001588
 1014459:	mov    edi,eax
 101445b:	mov    ebx,DWORD PTR [rbp+0x58]
 101445e:	test   eax,eax
 1014460:	cmovns ebx,DWORD PTR [rbp-0x40]
 1014464:	lea    rcx,[rbp-0x48]
 1014468:	call   QWORD PTR [rip+0xfffffffffffed122]        # 0x1001590
 101446e:	test   edi,edi
 1014470:	js     0x10148ee
 1014476:	movsxd rax,ebx
 1014479:	mov    DWORD PTR [rbp-0x40],0x4
 1014480:	mov    QWORD PTR [r15],rax
 1014483:	mov    rax,QWORD PTR [rbp-0x40]
 1014487:	mov    QWORD PTR [r15+0x8],rax
 101448b:	jmp    0x10148ee
 1014490:	mov    edx,DWORD PTR [rbp+0x48]
 1014493:	mov    ecx,DWORD PTR [rip+0xfffffffffffeff33]        # 0x10043cc
 1014499:	call   0x1016960
 101449e:	test   eax,eax
 10144a0:	je     0x1014509
 10144a2:	xor    esi,esi
 10144a4:	mov    edi,esi
 10144a6:	cmp    WORD PTR [rbx],0x14
 10144aa:	jne    0x10144b2
 10144ac:	mov    rbx,QWORD PTR [rbx+0x8]
 10144b0:	jmp    0x10144ea
 10144b2:	lea    rcx,[rbp-0x48]
 10144b6:	call   QWORD PTR [rip+0xfffffffffffed0dc]        # 0x1001598
 10144bc:	nop
 10144bd:	mov    r9d,0x14
 10144c3:	xor    r8d,r8d
 10144c6:	mov    rdx,rbx
 10144c9:	lea    rcx,[rbp-0x48]
 10144cd:	call   QWORD PTR [rip+0xfffffffffffed0b5]        # 0x1001588
 10144d3:	mov    edi,eax
 10144d5:	mov    rbx,QWORD PTR [rbp+0x58]
 10144d9:	test   eax,eax
 10144db:	cmovns rbx,QWORD PTR [rbp-0x40]
 10144e0:	lea    rcx,[rbp-0x48]
 10144e4:	call   QWORD PTR [rip+0xfffffffffffed0a6]        # 0x1001590
 10144ea:	test   edi,edi
 10144ec:	js     0x10148ee
 10144f2:	mov    DWORD PTR [rbp-0x40],0x8
 10144f9:	mov    QWORD PTR [r15],rbx
 10144fc:	mov    rax,QWORD PTR [rbp-0x40]
 1014500:	mov    QWORD PTR [r15+0x8],rax
 1014504:	jmp    0x10148ee
 1014509:	mov    edx,DWORD PTR [rbp+0x48]
 101450c:	mov    ecx,DWORD PTR [rip+0xfffffffffffefeda]        # 0x10043ec
 1014512:	call   0x1016960
 1014517:	test   eax,eax
 1014519:	je     0x1014548
 101451b:	mov    rcx,rbx
 101451e:	call   0x1013a80
 1014523:	mov    edi,eax
 1014525:	test   eax,eax
 1014527:	js     0x10148ee
 101452d:	mov    rcx,QWORD PTR [rbp+0x58]
 1014531:	mov    DWORD PTR [rbp-0x40],0x8
 1014538:	mov    QWORD PTR [r15],rcx
 101453b:	mov    rcx,QWORD PTR [rbp-0x40]
 101453f:	mov    QWORD PTR [r15+0x8],rcx
 1014543:	jmp    0x10148ee
 1014548:	mov    edx,DWORD PTR [rbp+0x48]
 101454b:	mov    ecx,DWORD PTR [rip+0xfffffffffffefeb7]        # 0x1004408
 1014551:	call   0x1016960
 1014556:	test   eax,eax
 1014558:	je     0x10146ff
 101455e:	movzx  eax,WORD PTR [rbx]
 1014561:	cmp    ax,0x1f
 1014565:	je     0x1014594
 1014567:	cmp    ax,0x8
 101456b:	je     0x1014594
 101456d:	lea    r12,[rbp-0x48]
 1014571:	mov    r9d,0x1f
 1014577:	lea    r8d,[r9-0x1d]
 101457b:	mov    rdx,rbx
 101457e:	lea    rcx,[rbp-0x48]
 1014582:	call   QWORD PTR [rip+0xfffffffffffed000]        # 0x1001588
 1014588:	mov    edi,eax
 101458a:	test   eax,eax
 101458c:	js     0x10148ee
 1014592:	jmp    0x1014597
 1014594:	mov    r12,rbx
 1014597:	mov    r12,QWORD PTR [r12+0x8]
 101459c:	xor    esi,esi
 101459e:	test   r12,r12
 10145a1:	je     0x10145d9
 10145a3:	mov    r14d,0x7fffffff
 10145a9:	mov    ecx,r14d
 10145ac:	mov    rax,r12
 10145af:	mov    edi,esi
 10145b1:	cmp    WORD PTR [rax],si
 10145b4:	je     0x10145c1
 10145b6:	add    rax,0x2
 10145ba:	dec    rcx
 10145bd:	jne    0x10145b1
 10145bf:	jmp    0x10145c6
 10145c1:	test   rcx,rcx
 10145c4:	jne    0x10145d0
 10145c6:	mov    edi,0x80070057
 10145cb:	mov    r14,rsi
 10145ce:	jmp    0x10145d3
 10145d0:	sub    r14,rcx
 10145d3:	test   edi,edi
 10145d5:	jns    0x10145e9
 10145d7:	jmp    0x10145de
 10145d9:	mov    edi,0x80070057
 10145de:	mov    r14,rsi
 10145e1:	test   edi,edi
 10145e3:	js     0x10148ee
 10145e9:	mov    edi,0x80004005
 10145ee:	mov    r8d,0x2
 10145f4:	lea    rdx,[rip+0xfffffffffffee095]        # 0x1002690
 10145fb:	mov    rcx,QWORD PTR [rbx+0x8]
 10145ff:	call   0x10174f4
 1014604:	test   eax,eax
 1014606:	jne    0x1014610
 1014608:	sub    r14,0x2
 101460c:	add    r12,0x4
 1014610:	cmp    r14,0x2
 1014614:	jb     0x10148ee
 101461a:	test   r14b,0x1
 101461e:	jne    0x10148ee
 1014624:	mov    rbx,r14
 1014627:	shr    rbx,1
 101462a:	mov    edx,ebx
 101462c:	xor    ecx,ecx
 101462e:	call   QWORD PTR [rip+0x17fc4]        # 0x102c5f8
 1014634:	mov    r11,rax
 1014637:	mov    rcx,rax
 101463a:	mov    QWORD PTR [rbp+0x58],rax
 101463e:	test   rax,rax
 1014641:	je     0x10146eb
 1014647:	mov    r8,rsi
 101464a:	dec    r14
 101464d:	je     0x10146db
 1014653:	data16 data16 data16 data16 nop WORD PTR [rax+rax*1+0x0]
 1014660:	movzx  ecx,WORD PTR [r12+r8*2]
 1014665:	lea    eax,[rcx-0x30]
 1014668:	cmp    ax,0x9
 101466c:	ja     0x1014673
 101466e:	sub    cl,0x30
 1014671:	jmp    0x1014691
 1014673:	lea    eax,[rcx-0x61]
 1014676:	cmp    ax,0x5
 101467a:	ja     0x1014681
 101467c:	sub    cl,0x57
 101467f:	jmp    0x1014691
 1014681:	lea    eax,[rcx-0x41]
 1014684:	cmp    ax,0x5
 1014688:	ja     0x101468f
 101468a:	sub    cl,0x57
 101468d:	jmp    0x1014691
 101468f:	xor    cl,cl
 1014691:	shl    cl,0x4
 1014694:	movzx  edx,WORD PTR [r12+r8*2+0x2]
 101469a:	lea    eax,[rdx-0x30]
 101469d:	cmp    ax,0x9
 10146a1:	ja     0x10146a8
 10146a3:	sub    dl,0x30
 10146a6:	jmp    0x10146c6
 10146a8:	lea    eax,[rdx-0x61]
 10146ab:	cmp    ax,0x5
 10146af:	ja     0x10146b6
 10146b1:	sub    dl,0x57
 10146b4:	jmp    0x10146c6
 10146b6:	lea    eax,[rdx-0x41]
 10146b9:	cmp    ax,0x5
 10146bd:	ja     0x10146c4
 10146bf:	sub    dl,0x57
 10146c2:	jmp    0x10146c6
 10146c4:	xor    dl,dl
 10146c6:	or     cl,dl
 10146c8:	mov    rax,r8
 10146cb:	shr    rax,1
 10146ce:	mov    BYTE PTR [rax+r11*1],cl
 10146d2:	add    r8,0x2
 10146d6:	cmp    r8,r14
 10146d9:	jb     0x1014660
 10146db:	mov    rcx,rsi
 10146de:	mov    QWORD PTR [rbp+0x58],rcx
 10146e2:	mov    QWORD PTR [r15],r11
 10146e5:	mov    DWORD PTR [r15+0x8],ebx
 10146e9:	mov    edi,esi
 10146eb:	test   rcx,rcx
 10146ee:	je     0x10146f6
 10146f0:	call   QWORD PTR [rip+0x17f0a]        # 0x102c600
 10146f6:	mov    QWORD PTR [rbp+0x58],rsi
 10146fa:	jmp    0x10148e7
 10146ff:	mov    edi,0x80004005
 1014704:	jmp    0x10148ee
 1014709:	movzx  eax,WORD PTR [rbx]
 101470c:	cmp    ax,0x1f
 1014710:	je     0x101473f
 1014712:	cmp    ax,0x8
 1014716:	je     0x101473f
 1014718:	lea    r13,[rbp-0x30]
 101471c:	mov    r9d,0x1f
 1014722:	lea    r8d,[r9-0x1d]
 1014726:	mov    rdx,rbx
 1014729:	lea    rcx,[rbp-0x30]
 101472d:	call   QWORD PTR [rip+0xfffffffffffece55]        # 0x1001588
 1014733:	mov    edi,eax
 1014735:	test   eax,eax
 1014737:	js     0x10148ee
 101473d:	jmp    0x1014742
 101473f:	mov    r13,rbx
 1014742:	mov    rax,QWORD PTR [r13+0x8]
 1014746:	xor    esi,esi
 1014748:	test   rax,rax
 101474b:	je     0x1014780
 101474d:	mov    r14d,0x7fffffff
 1014753:	mov    ecx,r14d
 1014756:	mov    edi,esi
 1014758:	cmp    WORD PTR [rax],si
 101475b:	je     0x1014768
 101475d:	add    rax,0x2
 1014761:	dec    rcx
 1014764:	jne    0x1014758
 1014766:	jmp    0x101476d
 1014768:	test   rcx,rcx
 101476b:	jne    0x1014777
 101476d:	mov    edi,0x80070057
 1014772:	mov    r14,rsi
 1014775:	jmp    0x101477a
 1014777:	sub    r14,rcx
 101477a:	test   edi,edi
 101477c:	jns    0x1014790
 101477e:	jmp    0x1014785
 1014780:	mov    edi,0x80070057
 1014785:	mov    r14,rsi
 1014788:	test   edi,edi
 101478a:	js     0x10148ee
 1014790:	inc    r14
 1014793:	mov    eax,0x2
 1014798:	mul    r14
 101479b:	mov    rcx,0xffffffffffffffff
 10147a2:	cmovo  rax,rcx
 10147a6:	mov    edx,eax
 10147a8:	xor    ecx,ecx
 10147aa:	call   QWORD PTR [rip+0x17e48]        # 0x102c5f8
 10147b0:	mov    r12,rax
 10147b3:	mov    rbx,rax
 10147b6:	mov    QWORD PTR [rbp+0x58],rax
 10147ba:	test   rax,rax
 10147bd:	je     0x10147ef
 10147bf:	mov    r8,QWORD PTR [r13+0x8]
 10147c3:	mov    rdx,r14
 10147c6:	mov    rcx,rax
 10147c9:	call   0x100a890
 10147ce:	mov    edi,eax
 10147d0:	test   eax,eax
 10147d2:	js     0x10147f4
 10147d4:	mov    rbx,rsi
 10147d7:	mov    QWORD PTR [rbp+0x58],rbx
 10147db:	mov    DWORD PTR [rbp-0x40],0x8
 10147e2:	mov    QWORD PTR [r15],r12
 10147e5:	mov    rax,QWORD PTR [rbp-0x40]
 10147e9:	mov    QWORD PTR [r15+0x8],rax
 10147ed:	jmp    0x10147f4
 10147ef:	mov    edi,0x80004005
 10147f4:	test   rbx,rbx
 10147f7:	je     0x1014802
 10147f9:	mov    rcx,rbx
 10147fc:	call   QWORD PTR [rip+0x17dfe]        # 0x102c600
 1014802:	mov    QWORD PTR [rbp+0x58],rsi
 1014806:	jmp    0x10148e7
 101480b:	cmp    WORD PTR [rbx],0x1e
 101480f:	jne    0x1014816
 1014811:	mov    r13,rbx
 1014814:	jmp    0x101483b
 1014816:	lea    r13,[rbp-0x30]
 101481a:	mov    r9d,0x1e
 1014820:	lea    r8d,[r9-0x1c]
 1014824:	mov    rdx,rbx
 1014827:	lea    rcx,[rbp-0x30]
 101482b:	call   QWORD PTR [rip+0xfffffffffffecd57]        # 0x1001588
 1014831:	mov    edi,eax
 1014833:	test   eax,eax
 1014835:	js     0x10148ee
 101483b:	mov    rax,QWORD PTR [r13+0x8]
 101483f:	xor    esi,esi
 1014841:	test   rax,rax
 1014844:	je     0x1014878
 1014846:	mov    r14d,0x7fffffff
 101484c:	mov    ecx,r14d
 101484f:	mov    edi,esi
 1014851:	cmp    BYTE PTR [rax],sil
 1014854:	je     0x1014860
 1014856:	inc    rax
 1014859:	dec    rcx
 101485c:	jne    0x1014851
 101485e:	jmp    0x1014865
 1014860:	test   rcx,rcx
 1014863:	jne    0x101486f
 1014865:	mov    edi,0x80070057
 101486a:	mov    r14,rsi
 101486d:	jmp    0x1014872
 101486f:	sub    r14,rcx
 1014872:	test   edi,edi
 1014874:	jns    0x1014884
 1014876:	jmp    0x101487d
 1014878:	mov    edi,0x80070057
 101487d:	mov    r14,rsi
 1014880:	test   edi,edi
 1014882:	js     0x10148ee
 1014884:	lea    edx,[r14+0x1]
 1014888:	xor    ecx,ecx
 101488a:	call   QWORD PTR [rip+0x17d68]        # 0x102c5f8
 1014890:	mov    r12,rax
 1014893:	mov    rbx,rax
 1014896:	mov    QWORD PTR [rbp+0x58],rax
 101489a:	test   rax,rax
 101489d:	je     0x10148d0
 101489f:	mov    r8,QWORD PTR [r13+0x8]
 10148a3:	lea    rdx,[r14+0x1]
 10148a7:	mov    rcx,rax
 10148aa:	call   0x100fd00
 10148af:	mov    edi,eax
 10148b1:	test   eax,eax
 10148b3:	js     0x10148d5
 10148b5:	mov    rbx,rsi
 10148b8:	mov    QWORD PTR [rbp+0x58],rbx
 10148bc:	mov    DWORD PTR [rbp-0x40],0x8
 10148c3:	mov    QWORD PTR [r15],r12
 10148c6:	mov    rax,QWORD PTR [rbp-0x40]
 10148ca:	mov    QWORD PTR [r15+0x8],rax
 10148ce:	jmp    0x10148d5
 10148d0:	mov    edi,0x80004005
 10148d5:	test   rbx,rbx
 10148d8:	je     0x10148e3
 10148da:	mov    rcx,rbx
 10148dd:	call   QWORD PTR [rip+0x17d1d]        # 0x102c600
 10148e3:	mov    QWORD PTR [rbp+0x58],rsi
 10148e7:	xor    ecx,ecx
 10148e9:	call   0x100bccc
 10148ee:	mov    eax,edi
 10148f0:	mov    rbx,QWORD PTR [rsp+0xb0]
 10148f8:	movaps xmm6,XMMWORD PTR [rsp+0x60]
 10148fd:	add    rsp,0x70
 1014901:	pop    r15
 1014903:	pop    r14
 1014905:	pop    r13
 1014907:	pop    r12
 1014909:	pop    rdi
 101490a:	pop    rsi
 101490b:	pop    rbp
 101490c:	ret    
 101490d:	int3   
 101490e:	int3   
 101490f:	int3   
 1014910:	int3   
 1014911:	int3   
 1014912:	int3   
 1014913:	int3   
 1014914:	int3   
 1014915:	int3   
 1014916:	int3   
 1014917:	int3   
 1014918:	int3   
 1014919:	int3   
 101491a:	int3   
 101491b:	int3   
 101491c:	int3   
 101491d:	int3   
 101491e:	int3   
 101491f:	int3   
 1014920:	mov    rcx,QWORD PTR [rcx]
 1014923:	jmp    0x100bccc
 1014928:	int3   
 1014929:	int3   
 101492a:	int3   
 101492b:	int3   
 101492c:	int3   
 101492d:	int3   
 101492e:	int3   
 101492f:	int3   
 1014930:	mov    QWORD PTR [rsp+0x8],rcx
 1014935:	push   rbx
 1014936:	sub    rsp,0x30
 101493a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1014943:	mov    rbx,rcx
 1014946:	mov    rcx,QWORD PTR [rcx]
 1014949:	test   rcx,rcx
 101494c:	je     0x1014954
 101494e:	call   QWORD PTR [rip+0x17cac]        # 0x102c600
 1014954:	mov    QWORD PTR [rbx],0x0
 101495b:	mov    rcx,QWORD PTR [rbx]
 101495e:	add    rsp,0x30
 1014962:	pop    rbx
 1014963:	jmp    0x100bccc
 1014968:	int3   
 1014969:	int3   
 101496a:	int3   
 101496b:	int3   
 101496c:	int3   
 101496d:	int3   
 101496e:	int3   
 101496f:	int3   
 1014970:	mov    rcx,QWORD PTR [rcx]
 1014973:	jmp    0x100bccc
 1014978:	int3   
 1014979:	int3   
 101497a:	int3   
 101497b:	int3   
 101497c:	int3   
 101497d:	int3   
 101497e:	int3   
 101497f:	int3   
 1014980:	mov    QWORD PTR [rsp+0x8],rcx
 1014985:	push   rbx
 1014986:	sub    rsp,0x30
 101498a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1014993:	mov    rbx,rcx
 1014996:	mov    rcx,QWORD PTR [rcx]
 1014999:	test   rcx,rcx
 101499c:	je     0x10149a4
 101499e:	call   QWORD PTR [rip+0x17c5c]        # 0x102c600
 10149a4:	mov    QWORD PTR [rbx],0x0
 10149ab:	mov    rcx,QWORD PTR [rbx]
 10149ae:	add    rsp,0x30
 10149b2:	pop    rbx
 10149b3:	jmp    0x100bccc
 10149b8:	int3   
 10149b9:	int3   
 10149ba:	int3   
 10149bb:	int3   
 10149bc:	int3   
 10149bd:	int3   
 10149be:	int3   
 10149bf:	int3   
 10149c0:	rex push rbx
 10149c2:	push   rbp
 10149c3:	push   rsi
 10149c4:	push   rdi
 10149c5:	push   r12
 10149c7:	push   r13
 10149c9:	push   r14
 10149cb:	push   r15
 10149cd:	sub    rsp,0x148
 10149d4:	mov    QWORD PTR [rsp+0x28],0xfffffffffffffffe
 10149dd:	mov    rax,QWORD PTR [rip+0xfc7c]        # 0x1024660
 10149e4:	xor    rax,rsp
 10149e7:	mov    QWORD PTR [rsp+0x130],rax
 10149ef:	mov    r13,r9
 10149f2:	mov    r12d,r8d
 10149f5:	mov    r15,rdx
 10149f8:	xor    ebp,ebp
 10149fa:	mov    ebx,ebp
 10149fc:	or     esi,0xffffffff
 10149ff:	mov    QWORD PTR [rsp+0x20],rbp
 1014a04:	mov    rax,QWORD PTR [rcx]
 1014a07:	lea    rdx,[rsp+0x20]
 1014a0c:	call   QWORD PTR [rax+0x88]
 1014a12:	test   eax,eax
 1014a14:	js     0x1014b7a
 1014a1a:	cmp    QWORD PTR [rsp+0x20],rbp
 1014a1f:	je     0x1014b7a
 1014a25:	mov    WORD PTR [rsp+0x30],bp
 1014a2a:	xor    edx,edx
 1014a2c:	mov    r8d,0xfe
 1014a32:	lea    rcx,[rsp+0x32]
 1014a37:	call   0x100c10e
 1014a3c:	test   r12d,r12d
 1014a3f:	je     0x1014a45
 1014a41:	mov    WORD PTR [r15],bp
 1014a45:	mov    ebx,0x1
 1014a4a:	mov    edi,ebp
 1014a4c:	lea    r14,[rip+0xfffffffffffeeb2d]        # 0x1003580
 1014a53:	cmp    edi,0x2
 1014a56:	jge    0x1014aea
 1014a5c:	mov    r9d,0x80
 1014a62:	lea    r8,[rsp+0x30]
 1014a67:	mov    rdx,QWORD PTR [rsp+0x20]
 1014a6c:	mov    rcx,QWORD PTR [r14]
 1014a6f:	call   0x1013c80
 1014a74:	test   eax,eax
 1014a76:	je     0x1014adc
 1014a78:	mov    ecx,0x7fffffff
 1014a7d:	lea    rax,[rsp+0x30]
 1014a82:	cmp    WORD PTR [rax],0x0
 1014a86:	je     0x1014a93
 1014a88:	add    rax,0x2
 1014a8c:	dec    rcx
 1014a8f:	jne    0x1014a82
 1014a91:	jmp    0x1014ad7
 1014a93:	test   rcx,rcx
 1014a96:	je     0x1014ad7
 1014a98:	mov    eax,0x7fffffff
 1014a9d:	cmp    rax,rcx
 1014aa0:	je     0x1014ad7
 1014aa2:	test   ebx,ebx
 1014aa4:	je     0x1014ad5
 1014aa6:	lea    r8,[rsp+0x30]
 1014aab:	mov    rdx,r12
 1014aae:	mov    rcx,r15
 1014ab1:	call   0x100dc90
 1014ab6:	test   eax,eax
 1014ab8:	js     0x1014ad5
 1014aba:	lea    r8,[rip+0xfffffffffffeead7]        # 0x1003598
 1014ac1:	mov    rdx,r12
 1014ac4:	mov    rcx,r15
 1014ac7:	call   0x100dc90
 1014acc:	test   eax,eax
 1014ace:	mov    ebx,0x1
 1014ad3:	jns    0x1014ad7
 1014ad5:	mov    ebx,ebp
 1014ad7:	cmp    edi,esi
 1014ad9:	cmovg  esi,edi
 1014adc:	inc    edi
 1014ade:	add    r14,0x8
 1014ae2:	test   ebx,ebx
 1014ae4:	jne    0x1014a53
 1014aea:	mov    edi,ebp
 1014aec:	test   ebx,ebx
 1014aee:	je     0x1014b7a
 1014af4:	lea    r14,[rip+0xfffffffffffeea95]        # 0x1003590
 1014afb:	nop    DWORD PTR [rax+rax*1+0x0]
 1014b00:	cmp    edi,0x1
 1014b03:	jge    0x1014b72
 1014b05:	mov    r9d,0x80
 1014b0b:	lea    r8,[rsp+0x30]
 1014b10:	mov    rdx,QWORD PTR [rsp+0x20]
 1014b15:	mov    rcx,QWORD PTR [r14]
 1014b18:	call   0x1013c80
 1014b1d:	mov    ebx,eax
 1014b1f:	test   eax,eax
 1014b21:	je     0x1014b66
 1014b23:	lea    r8,[rsp+0x30]
 1014b28:	mov    rdx,r12
 1014b2b:	mov    rcx,r15
 1014b2e:	call   0x100dc90
 1014b33:	xor    ebx,ebx
 1014b35:	test   eax,eax
 1014b37:	setns  bl
 1014b3a:	test   edi,edi
 1014b3c:	jns    0x1014b61
 1014b3e:	test   ebx,ebx
 1014b40:	je     0x1014b5f
 1014b42:	lea    r8,[rip+0xfffffffffffeea4f]        # 0x1003598
 1014b49:	mov    rdx,r12
 1014b4c:	mov    rcx,r15
 1014b4f:	call   0x100dc90
 1014b54:	test   eax,eax
 1014b56:	js     0x1014b5f
 1014b58:	mov    ebx,0x1
 1014b5d:	jmp    0x1014b61
 1014b5f:	xor    ebx,ebx
 1014b61:	cmp    edi,esi
 1014b63:	cmovg  esi,edi
 1014b66:	inc    edi
 1014b68:	add    r14,0x8
 1014b6c:	test   ebx,ebx
 1014b6e:	jne    0x1014b00
 1014b70:	jmp    0x1014b7a
 1014b72:	test   ebx,ebx
 1014b74:	je     0x1014b7a
 1014b76:	mov    DWORD PTR [r13+0x0],esi
 1014b7a:	mov    rcx,QWORD PTR [rsp+0x20]
 1014b7f:	test   rcx,rcx
 1014b82:	je     0x1014b8a
 1014b84:	mov    rax,QWORD PTR [rcx]
 1014b87:	call   QWORD PTR [rax+0x10]
 1014b8a:	mov    eax,ebx
 1014b8c:	mov    rcx,QWORD PTR [rsp+0x130]
 1014b94:	xor    rcx,rsp
 1014b97:	call   0x100c0d0
 1014b9c:	add    rsp,0x148
 1014ba3:	pop    r15
 1014ba5:	pop    r14
 1014ba7:	pop    r13
 1014ba9:	pop    r12
 1014bab:	pop    rdi
 1014bac:	pop    rsi
 1014bad:	pop    rbp
 1014bae:	pop    rbx
 1014baf:	ret    
 1014bb0:	int3   
 1014bb1:	int3   
 1014bb2:	int3   
 1014bb3:	int3   
 1014bb4:	int3   
 1014bb5:	int3   
 1014bb6:	int3   
 1014bb7:	int3   
 1014bb8:	int3   
 1014bb9:	int3   
 1014bba:	int3   
 1014bbb:	int3   
 1014bbc:	int3   
 1014bbd:	int3   
 1014bbe:	int3   
 1014bbf:	int3   
 1014bc0:	sub    rsp,0x28
 1014bc4:	mov    rcx,QWORD PTR [rcx]
 1014bc7:	test   rcx,rcx
 1014bca:	je     0x1014bd2
 1014bcc:	mov    rax,QWORD PTR [rcx]
 1014bcf:	call   QWORD PTR [rax+0x10]
 1014bd2:	add    rsp,0x28
 1014bd6:	ret    
 1014bd7:	int3   
 1014bd8:	int3   
 1014bd9:	int3   
 1014bda:	int3   
 1014bdb:	int3   
 1014bdc:	int3   
 1014bdd:	int3   
 1014bde:	int3   
 1014bdf:	int3   
 1014be0:	sub    rsp,0x28
 1014be4:	mov    rcx,QWORD PTR [rcx]
 1014be7:	test   rcx,rcx
 1014bea:	je     0x1014bf2
 1014bec:	mov    rax,QWORD PTR [rcx]
 1014bef:	call   QWORD PTR [rax+0x10]
 1014bf2:	add    rsp,0x28
 1014bf6:	ret    
 1014bf7:	int3   
 1014bf8:	int3   
 1014bf9:	int3   
 1014bfa:	int3   
 1014bfb:	int3   
 1014bfc:	int3   
 1014bfd:	int3   
 1014bfe:	int3   
 1014bff:	int3   
 1014c00:	mov    rcx,QWORD PTR [rcx]
 1014c03:	jmp    0x100bccc
 1014c08:	int3   
 1014c09:	int3   
 1014c0a:	int3   
 1014c0b:	int3   
 1014c0c:	int3   
 1014c0d:	int3   
 1014c0e:	int3   
 1014c0f:	int3   
 1014c10:	mov    QWORD PTR [rsp+0x8],rcx
 1014c15:	push   rbx
 1014c16:	sub    rsp,0x30
 1014c1a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1014c23:	mov    rbx,rcx
 1014c26:	mov    rcx,QWORD PTR [rcx]
 1014c29:	test   rcx,rcx
 1014c2c:	je     0x1014c34
 1014c2e:	call   QWORD PTR [rip+0x179cc]        # 0x102c600
 1014c34:	mov    QWORD PTR [rbx],0x0
 1014c3b:	mov    rcx,QWORD PTR [rbx]
 1014c3e:	add    rsp,0x30
 1014c42:	pop    rbx
 1014c43:	jmp    0x100bccc
 1014c48:	int3   
 1014c49:	int3   
 1014c4a:	int3   
 1014c4b:	int3   
 1014c4c:	int3   
 1014c4d:	int3   
 1014c4e:	int3   
 1014c4f:	int3   
 1014c50:	sub    rsp,0x28
 1014c54:	mov    rcx,QWORD PTR [rcx]
 1014c57:	test   rcx,rcx
 1014c5a:	je     0x1014c62
 1014c5c:	mov    rax,QWORD PTR [rcx]
 1014c5f:	call   QWORD PTR [rax+0x10]
 1014c62:	add    rsp,0x28
 1014c66:	ret    
 1014c67:	int3   
 1014c68:	int3   
 1014c69:	int3   
 1014c6a:	int3   
 1014c6b:	int3   
 1014c6c:	int3   
 1014c6d:	int3   
 1014c6e:	int3   
 1014c6f:	int3   
 1014c70:	sub    rsp,0x28
 1014c74:	mov    rcx,QWORD PTR [rcx]
 1014c77:	test   rcx,rcx
 1014c7a:	je     0x1014ca6
 1014c7c:	add    rcx,0x8
 1014c80:	or     eax,0xffffffff
 1014c83:	lock xadd DWORD PTR [rcx],eax
 1014c87:	dec    eax
 1014c89:	jne    0x1014ca6
 1014c8b:	test   rcx,rcx
 1014c8e:	je     0x1014ca0
 1014c90:	mov    rax,QWORD PTR [rcx-0x8]
 1014c94:	add    rcx,0xfffffffffffffff8
 1014c98:	add    rsp,0x28
 1014c9c:	rex.W jmp QWORD PTR [rax+0x8]
 1014ca0:	mov    rax,QWORD PTR [rcx]
 1014ca3:	call   QWORD PTR [rax+0x8]
 1014ca6:	add    rsp,0x28
 1014caa:	ret    
 1014cab:	int3   
 1014cac:	int3   
 1014cad:	int3   
 1014cae:	int3   
 1014caf:	int3   
 1014cb0:	int3   
 1014cb1:	int3   
 1014cb2:	int3   
 1014cb3:	int3   
 1014cb4:	int3   
 1014cb5:	int3   
 1014cb6:	int3   
 1014cb7:	int3   
 1014cb8:	int3   
 1014cb9:	int3   
 1014cba:	int3   
 1014cbb:	int3   
 1014cbc:	int3   
 1014cbd:	int3   
 1014cbe:	int3   
 1014cbf:	int3   
 1014cc0:	mov    rcx,QWORD PTR [rcx]
 1014cc3:	jmp    0x100bccc
 1014cc8:	int3   
 1014cc9:	int3   
 1014cca:	int3   
 1014ccb:	int3   
 1014ccc:	int3   
 1014ccd:	int3   
 1014cce:	int3   
 1014ccf:	int3   
 1014cd0:	mov    QWORD PTR [rsp+0x8],rcx
 1014cd5:	push   rbx
 1014cd6:	sub    rsp,0x30
 1014cda:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1014ce3:	mov    rbx,rcx
 1014ce6:	mov    rcx,QWORD PTR [rcx]
 1014ce9:	test   rcx,rcx
 1014cec:	je     0x1014cf4
 1014cee:	call   QWORD PTR [rip+0x1790c]        # 0x102c600
 1014cf4:	mov    QWORD PTR [rbx],0x0
 1014cfb:	mov    rcx,QWORD PTR [rbx]
 1014cfe:	add    rsp,0x30
 1014d02:	pop    rbx
 1014d03:	jmp    0x100bccc
 1014d08:	int3   
 1014d09:	int3   
 1014d0a:	int3   
 1014d0b:	int3   
 1014d0c:	int3   
 1014d0d:	int3   
 1014d0e:	int3   
 1014d0f:	int3   
 1014d10:	sub    rsp,0x28
 1014d14:	mov    rcx,QWORD PTR [rcx]
 1014d17:	test   rcx,rcx
 1014d1a:	je     0x1014d22
 1014d1c:	mov    rax,QWORD PTR [rcx]
 1014d1f:	call   QWORD PTR [rax+0x10]
 1014d22:	add    rsp,0x28
 1014d26:	ret    
 1014d27:	int3   
 1014d28:	int3   
 1014d29:	int3   
 1014d2a:	int3   
 1014d2b:	int3   
 1014d2c:	int3   
 1014d2d:	int3   
 1014d2e:	int3   
 1014d2f:	int3   
 1014d30:	sub    rsp,0x28
 1014d34:	mov    rcx,QWORD PTR [rcx]
 1014d37:	test   rcx,rcx
 1014d3a:	je     0x1014d42
 1014d3c:	mov    rax,QWORD PTR [rcx]
 1014d3f:	call   QWORD PTR [rax+0x10]
 1014d42:	add    rsp,0x28
 1014d46:	ret    
 1014d47:	int3   
 1014d48:	int3   
 1014d49:	int3   
 1014d4a:	int3   
 1014d4b:	int3   
 1014d4c:	int3   
 1014d4d:	int3   
 1014d4e:	int3   
 1014d4f:	int3   
 1014d50:	sub    rsp,0x28
 1014d54:	mov    rcx,QWORD PTR [rcx]
 1014d57:	test   rcx,rcx
 1014d5a:	je     0x1014d86
 1014d5c:	add    rcx,0x8
 1014d60:	or     eax,0xffffffff
 1014d63:	lock xadd DWORD PTR [rcx],eax
 1014d67:	dec    eax
 1014d69:	jne    0x1014d86
 1014d6b:	test   rcx,rcx
 1014d6e:	je     0x1014d80
 1014d70:	mov    rax,QWORD PTR [rcx-0x8]
 1014d74:	add    rcx,0xfffffffffffffff8
 1014d78:	add    rsp,0x28
 1014d7c:	rex.W jmp QWORD PTR [rax+0x30]
 1014d80:	mov    rax,QWORD PTR [rcx]
 1014d83:	call   QWORD PTR [rax+0x30]
 1014d86:	add    rsp,0x28
 1014d8a:	ret    
 1014d8b:	int3   
 1014d8c:	int3   
 1014d8d:	int3   
 1014d8e:	int3   
 1014d8f:	int3   
 1014d90:	int3   
 1014d91:	int3   
 1014d92:	int3   
 1014d93:	int3   
 1014d94:	int3   
 1014d95:	int3   
 1014d96:	int3   
 1014d97:	int3   
 1014d98:	int3   
 1014d99:	int3   
 1014d9a:	int3   
 1014d9b:	int3   
 1014d9c:	int3   
 1014d9d:	int3   
 1014d9e:	int3   
 1014d9f:	int3   
 1014da0:	mov    rax,rsp
 1014da3:	push   r14
 1014da5:	sub    rsp,0x60
 1014da9:	mov    QWORD PTR [rax-0x48],0xfffffffffffffffe
 1014db1:	mov    QWORD PTR [rax+0x8],rbx
 1014db5:	mov    QWORD PTR [rax+0x10],rsi
 1014db9:	mov    QWORD PTR [rax+0x18],rdi
 1014dbd:	mov    r14,r8
 1014dc0:	mov    rsi,rdx
 1014dc3:	xor    ebx,ebx
 1014dc5:	call   QWORD PTR [rip+0xfffffffffffec7ad]        # 0x1001578
 1014dcb:	mov    rdi,rax
 1014dce:	mov    QWORD PTR [rsp+0x28],rax
 1014dd3:	test   rax,rax
 1014dd6:	je     0x1014e9b
 1014ddc:	mov    QWORD PTR [rsp+0x88],rbx
 1014de4:	lea    rcx,[rsp+0x30]
 1014de9:	call   QWORD PTR [rip+0xfffffffffffec7a9]        # 0x1001598
 1014def:	nop
 1014df0:	mov    rax,QWORD PTR [rsi]
 1014df3:	lea    r8,[rsp+0x88]
 1014dfb:	mov    rdx,rdi
 1014dfe:	mov    rcx,rsi
 1014e01:	call   QWORD PTR [rax+0x38]
 1014e04:	test   eax,eax
 1014e06:	js     0x1014e7b
 1014e08:	mov    rcx,QWORD PTR [rsp+0x88]
 1014e10:	test   rcx,rcx
 1014e13:	je     0x1014e7b
 1014e15:	mov    rax,QWORD PTR [rcx]
 1014e18:	lea    rdx,[rsp+0x30]
 1014e1d:	call   QWORD PTR [rax+0x40]
 1014e20:	test   eax,eax
 1014e22:	js     0x1014e7b
 1014e24:	mov    esi,ebx
 1014e26:	cmp    WORD PTR [rsp+0x30],0x15
 1014e2c:	jne    0x1014e38
 1014e2e:	mov    rax,QWORD PTR [rsp+0x38]
 1014e33:	mov    QWORD PTR [r14],rax
 1014e36:	jmp    0x1014e76
 1014e38:	lea    rcx,[rsp+0x48]
 1014e3d:	call   QWORD PTR [rip+0xfffffffffffec755]        # 0x1001598
 1014e43:	nop
 1014e44:	mov    r9d,0x15
 1014e4a:	xor    r8d,r8d
 1014e4d:	lea    rdx,[rsp+0x30]
 1014e52:	lea    rcx,[rsp+0x48]
 1014e57:	call   QWORD PTR [rip+0xfffffffffffec72b]        # 0x1001588
 1014e5d:	mov    esi,eax
 1014e5f:	test   eax,eax
 1014e61:	js     0x1014e6b
 1014e63:	mov    rax,QWORD PTR [rsp+0x50]
 1014e68:	mov    QWORD PTR [r14],rax
 1014e6b:	lea    rcx,[rsp+0x48]
 1014e70:	call   QWORD PTR [rip+0xfffffffffffec71a]        # 0x1001590
 1014e76:	test   esi,esi
 1014e78:	setns  bl
 1014e7b:	lea    rcx,[rsp+0x30]
 1014e80:	call   QWORD PTR [rip+0xfffffffffffec70a]        # 0x1001590
 1014e86:	nop
 1014e87:	mov    rcx,QWORD PTR [rsp+0x88]
 1014e8f:	test   rcx,rcx
 1014e92:	je     0x1014e9b
 1014e94:	mov    rdx,QWORD PTR [rcx]
 1014e97:	call   QWORD PTR [rdx+0x10]
 1014e9a:	nop
 1014e9b:	test   rdi,rdi
 1014e9e:	je     0x1014ea9
 1014ea0:	mov    rcx,rdi
 1014ea3:	call   QWORD PTR [rip+0xfffffffffffec6c7]        # 0x1001570
 1014ea9:	mov    eax,ebx
 1014eab:	mov    rbx,QWORD PTR [rsp+0x70]
 1014eb0:	mov    rsi,QWORD PTR [rsp+0x78]
 1014eb5:	mov    rdi,QWORD PTR [rsp+0x80]
 1014ebd:	add    rsp,0x60
 1014ec1:	pop    r14
 1014ec3:	ret    
 1014ec4:	int3   
 1014ec5:	int3   
 1014ec6:	int3   
 1014ec7:	int3   
 1014ec8:	int3   
 1014ec9:	int3   
 1014eca:	int3   
 1014ecb:	int3   
 1014ecc:	int3   
 1014ecd:	int3   
 1014ece:	int3   
 1014ecf:	int3   
 1014ed0:	mov    rax,rsp
 1014ed3:	push   r14
 1014ed5:	sub    rsp,0x60
 1014ed9:	mov    QWORD PTR [rax-0x48],0xfffffffffffffffe
 1014ee1:	mov    QWORD PTR [rax+0x8],rbx
 1014ee5:	mov    QWORD PTR [rax+0x10],rsi
 1014ee9:	mov    QWORD PTR [rax+0x18],rdi
 1014eed:	mov    r14,r8
 1014ef0:	mov    rsi,rdx
 1014ef3:	xor    ebx,ebx
 1014ef5:	call   QWORD PTR [rip+0xfffffffffffec67d]        # 0x1001578
 1014efb:	mov    rdi,rax
 1014efe:	mov    QWORD PTR [rsp+0x28],rax
 1014f03:	test   rax,rax
 1014f06:	je     0x1014fc9
 1014f0c:	mov    QWORD PTR [rsp+0x88],rbx
 1014f14:	lea    rcx,[rsp+0x30]
 1014f19:	call   QWORD PTR [rip+0xfffffffffffec679]        # 0x1001598
 1014f1f:	nop
 1014f20:	mov    rax,QWORD PTR [rsi]
 1014f23:	lea    r8,[rsp+0x88]
 1014f2b:	mov    rdx,rdi
 1014f2e:	mov    rcx,rsi
 1014f31:	call   QWORD PTR [rax+0x38]
 1014f34:	test   eax,eax
 1014f36:	js     0x1014fa9
 1014f38:	mov    rcx,QWORD PTR [rsp+0x88]
 1014f40:	test   rcx,rcx
 1014f43:	je     0x1014fa9
 1014f45:	mov    rax,QWORD PTR [rcx]
 1014f48:	lea    rdx,[rsp+0x30]
 1014f4d:	call   QWORD PTR [rax+0x40]
 1014f50:	test   eax,eax
 1014f52:	js     0x1014fa9
 1014f54:	mov    esi,ebx
 1014f56:	cmp    WORD PTR [rsp+0x30],0x13
 1014f5c:	jne    0x1014f67
 1014f5e:	mov    eax,DWORD PTR [rsp+0x38]
 1014f62:	mov    DWORD PTR [r14],eax
 1014f65:	jmp    0x1014fa4
 1014f67:	lea    rcx,[rsp+0x48]
 1014f6c:	call   QWORD PTR [rip+0xfffffffffffec626]        # 0x1001598
 1014f72:	nop
 1014f73:	mov    r9d,0x13
 1014f79:	xor    r8d,r8d
 1014f7c:	lea    rdx,[rsp+0x30]
 1014f81:	lea    rcx,[rsp+0x48]
 1014f86:	call   QWORD PTR [rip+0xfffffffffffec5fc]        # 0x1001588
 1014f8c:	mov    esi,eax
 1014f8e:	test   eax,eax
 1014f90:	js     0x1014f99
 1014f92:	mov    eax,DWORD PTR [rsp+0x50]
 1014f96:	mov    DWORD PTR [r14],eax
 1014f99:	lea    rcx,[rsp+0x48]
 1014f9e:	call   QWORD PTR [rip+0xfffffffffffec5ec]        # 0x1001590
 1014fa4:	test   esi,esi
 1014fa6:	setns  bl
 1014fa9:	lea    rcx,[rsp+0x30]
 1014fae:	call   QWORD PTR [rip+0xfffffffffffec5dc]        # 0x1001590
 1014fb4:	nop
 1014fb5:	mov    rcx,QWORD PTR [rsp+0x88]
 1014fbd:	test   rcx,rcx
 1014fc0:	je     0x1014fc9
 1014fc2:	mov    rdx,QWORD PTR [rcx]
 1014fc5:	call   QWORD PTR [rdx+0x10]
 1014fc8:	nop
 1014fc9:	test   rdi,rdi
 1014fcc:	je     0x1014fd7
 1014fce:	mov    rcx,rdi
 1014fd1:	call   QWORD PTR [rip+0xfffffffffffec599]        # 0x1001570
 1014fd7:	mov    eax,ebx
 1014fd9:	mov    rbx,QWORD PTR [rsp+0x70]
 1014fde:	mov    rsi,QWORD PTR [rsp+0x78]
 1014fe3:	mov    rdi,QWORD PTR [rsp+0x80]
 1014feb:	add    rsp,0x60
 1014fef:	pop    r14
 1014ff1:	ret    
 1014ff2:	int3   
 1014ff3:	int3   
 1014ff4:	int3   
 1014ff5:	int3   
 1014ff6:	int3   
 1014ff7:	int3   
 1014ff8:	int3   
 1014ff9:	int3   
 1014ffa:	int3   
 1014ffb:	int3   
 1014ffc:	int3   
 1014ffd:	int3   
 1014ffe:	int3   
 1014fff:	int3   
 1015000:	mov    rcx,QWORD PTR [rcx]
 1015003:	jmp    0x100bccc
 1015008:	int3   
 1015009:	int3   
 101500a:	int3   
 101500b:	int3   
 101500c:	int3   
 101500d:	int3   
 101500e:	int3   
 101500f:	int3   
 1015010:	mov    QWORD PTR [rsp+0x8],rcx
 1015015:	push   rbx
 1015016:	sub    rsp,0x30
 101501a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1015023:	mov    rbx,rcx
 1015026:	mov    rcx,QWORD PTR [rcx]
 1015029:	test   rcx,rcx
 101502c:	je     0x1015034
 101502e:	call   QWORD PTR [rip+0x175cc]        # 0x102c600
 1015034:	mov    QWORD PTR [rbx],0x0
 101503b:	mov    rcx,QWORD PTR [rbx]
 101503e:	add    rsp,0x30
 1015042:	pop    rbx
 1015043:	jmp    0x100bccc
 1015048:	int3   
 1015049:	int3   
 101504a:	int3   
 101504b:	int3   
 101504c:	int3   
 101504d:	int3   
 101504e:	int3   
 101504f:	int3   
 1015050:	mov    QWORD PTR [rsp+0x8],rcx
 1015055:	sub    rsp,0x38
 1015059:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1015062:	add    rcx,0x10
 1015066:	add    rsp,0x38
 101506a:	jmp    0x10166b0
 101506f:	int3   
 1015070:	int3   
 1015071:	int3   
 1015072:	int3   
 1015073:	int3   
 1015074:	int3   
 1015075:	int3   
 1015076:	int3   
 1015077:	int3   
 1015078:	int3   
 1015079:	int3   
 101507a:	int3   
 101507b:	int3   
 101507c:	int3   
 101507d:	int3   
 101507e:	int3   
 101507f:	int3   
 1015080:	rex push rbp
 1015082:	push   rdi
 1015083:	sub    rsp,0x358
 101508a:	mov    rax,QWORD PTR [rip+0xf5cf]        # 0x1024660
 1015091:	xor    rax,rsp
 1015094:	mov    QWORD PTR [rsp+0x340],rax
 101509c:	mov    rax,rdx
 101509f:	mov    rbp,r8
 10150a2:	mov    rdi,rcx
 10150a5:	lea    rdx,[rsp+0x30]
 10150aa:	lea    r9,[rsp+0x20]
 10150af:	mov    r8d,0x186
 10150b5:	mov    rcx,rax
 10150b8:	call   0x10149c0
 10150bd:	test   eax,eax
 10150bf:	je     0x101515b
 10150c5:	lea    r9,[rsp+0x20]
 10150ca:	lea    rdx,[rsp+0x30]
 10150cf:	mov    r8d,0x1
 10150d5:	mov    rcx,rbp
 10150d8:	mov    QWORD PTR [rsp+0x388],rbx
 10150e0:	mov    QWORD PTR [rsp+0x20],0x0
 10150e9:	call   QWORD PTR [rip+0x17369]        # 0x102c458
 10150ef:	mov    ebx,eax
 10150f1:	test   eax,eax
 10150f3:	je     0x101514f
 10150f5:	lea    rcx,[rdi+0x10]
 10150f9:	mov    QWORD PTR [rsp+0x350],rsi
 1015101:	xor    ebx,ebx
 1015103:	call   0x10166e0
 1015108:	mov    rdx,rax
 101510b:	mov    rax,QWORD PTR [rsp+0x20]
 1015110:	mov    ecx,DWORD PTR [rax+0x4]
 1015113:	call   QWORD PTR [rip+0x17357]        # 0x102c470
 1015119:	test   eax,eax
 101511b:	je     0x1015147
 101511d:	lea    rcx,[rdi+0x10]
 1015121:	call   0x10166d0
 1015126:	mov    r8,rdi
 1015129:	mov    rcx,rbp
 101512c:	mov    rdx,rax
 101512f:	call   QWORD PTR [rip+0x1731b]        # 0x102c450
 1015135:	test   eax,eax
 1015137:	je     0x1015147
 1015139:	mov    rax,QWORD PTR [rsp+0x20]
 101513e:	mov    ebx,0x1
 1015143:	mov    QWORD PTR [rdi+0x8],rax
 1015147:	mov    rsi,QWORD PTR [rsp+0x350]
 101514f:	mov    eax,ebx
 1015151:	mov    rbx,QWORD PTR [rsp+0x388]
 1015159:	jmp    0x101515d
 101515b:	xor    eax,eax
 101515d:	mov    rcx,QWORD PTR [rsp+0x340]
 1015165:	xor    rcx,rsp
 1015168:	call   0x100c0d0
 101516d:	add    rsp,0x358
 1015174:	pop    rdi
 1015175:	pop    rbp
 1015176:	ret    
 1015177:	int3   
 1015178:	int3   
 1015179:	int3   
 101517a:	int3   
 101517b:	int3   
 101517c:	int3   
 101517d:	int3   
 101517e:	int3   
 101517f:	int3   
 1015180:	mov    QWORD PTR [rsp+0x8],rcx
 1015185:	sub    rsp,0x38
 1015189:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1015192:	add    rcx,0x10
 1015196:	add    rsp,0x38
 101519a:	jmp    0x10166b0
 101519f:	int3   
 10151a0:	int3   
 10151a1:	int3   
 10151a2:	int3   
 10151a3:	int3   
 10151a4:	int3   
 10151a5:	int3   
 10151a6:	int3   
 10151a7:	int3   
 10151a8:	int3   
 10151a9:	int3   
 10151aa:	int3   
 10151ab:	int3   
 10151ac:	int3   
 10151ad:	int3   
 10151ae:	int3   
 10151af:	int3   
 10151b0:	rex push rbx
 10151b2:	push   rsi
 10151b3:	push   rdi
 10151b4:	sub    rsp,0x350
 10151bb:	mov    rax,QWORD PTR [rip+0xf49e]        # 0x1024660
 10151c2:	xor    rax,rsp
 10151c5:	mov    QWORD PTR [rsp+0x340],rax
 10151cd:	mov    rdi,r8
 10151d0:	mov    rax,rdx
 10151d3:	mov    rsi,rcx
 10151d6:	mov    rdx,rdi
 10151d9:	mov    rcx,rax
 10151dc:	mov    r8,r9
 10151df:	call   0x1015080
 10151e4:	mov    ebx,eax
 10151e6:	test   eax,eax
 10151e8:	jne    0x1015222
 10151ea:	lea    rax,[rsp+0x30]
 10151ef:	lea    r9,[rsp+0x28]
 10151f4:	lea    rdx,[rsp+0x30]
 10151f9:	mov    r8d,0x186
 10151ff:	mov    rcx,rdi
 1015202:	mov    QWORD PTR [rsp+0x20],rax
 1015207:	call   0x10149c0
 101520c:	test   eax,eax
 101520e:	je     0x1015220
 1015210:	lea    edx,[rbx+0x1]
 1015213:	lea    r8,[rsp+0x20]
 1015218:	mov    rcx,rsi
 101521b:	call   0x1016c50
 1015220:	mov    eax,ebx
 1015222:	mov    rcx,QWORD PTR [rsp+0x340]
 101522a:	xor    rcx,rsp
 101522d:	call   0x100c0d0
 1015232:	add    rsp,0x350
 1015239:	pop    rdi
 101523a:	pop    rsi
 101523b:	pop    rbx
 101523c:	ret    
 101523d:	int3   
 101523e:	int3   
 101523f:	int3   
 1015240:	int3   
 1015241:	int3   
 1015242:	int3   
 1015243:	int3   
 1015244:	int3   
 1015245:	int3   
 1015246:	int3   
 1015247:	int3   
 1015248:	int3   
 1015249:	int3   
 101524a:	int3   
 101524b:	int3   
 101524c:	int3   
 101524d:	int3   
 101524e:	int3   
 101524f:	int3   
 1015250:	mov    QWORD PTR [rsp+0x10],rbx
 1015255:	push   rsi
 1015256:	sub    rsp,0x20
 101525a:	mov    rsi,r8
 101525d:	mov    rbx,rcx
 1015260:	lea    r9,[rsp+0x48]
 1015265:	xor    r8d,r8d
 1015268:	mov    rcx,rsi
 101526b:	mov    QWORD PTR [rsp+0x48],0x0
 1015274:	call   QWORD PTR [rip+0x171de]        # 0x102c458
 101527a:	test   eax,eax
 101527c:	je     0x10152e2
 101527e:	lea    rcx,[rbx+0x10]
 1015282:	mov    QWORD PTR [rsp+0x30],rdi
 1015287:	call   0x10166e0
 101528c:	mov    rdx,rax
 101528f:	mov    rax,QWORD PTR [rsp+0x48]
 1015294:	mov    ecx,DWORD PTR [rax+0x4]
 1015297:	call   QWORD PTR [rip+0x171d3]        # 0x102c470
 101529d:	test   eax,eax
 101529f:	je     0x10152db
 10152a1:	lea    rcx,[rbx+0x10]
 10152a5:	call   0x10166d0
 10152aa:	mov    r8,rbx
 10152ad:	mov    rcx,rsi
 10152b0:	mov    rdx,rax
 10152b3:	call   QWORD PTR [rip+0x17197]        # 0x102c450
 10152b9:	test   eax,eax
 10152bb:	je     0x10152db
 10152bd:	mov    rax,QWORD PTR [rsp+0x48]
 10152c2:	mov    rdi,QWORD PTR [rsp+0x30]
 10152c7:	mov    QWORD PTR [rbx+0x8],rax
 10152cb:	mov    eax,0x1
 10152d0:	mov    rbx,QWORD PTR [rsp+0x38]
 10152d5:	add    rsp,0x20
 10152d9:	pop    rsi
 10152da:	ret    
 10152db:	mov    rdi,QWORD PTR [rsp+0x30]
 10152e0:	xor    eax,eax
 10152e2:	mov    rbx,QWORD PTR [rsp+0x38]
 10152e7:	add    rsp,0x20
 10152eb:	pop    rsi
 10152ec:	ret    
 10152ed:	int3   
 10152ee:	int3   
 10152ef:	int3   
 10152f0:	int3   
 10152f1:	int3   
 10152f2:	int3   
 10152f3:	int3   
 10152f4:	int3   
 10152f5:	int3   
 10152f6:	int3   
 10152f7:	int3   
 10152f8:	int3   
 10152f9:	int3   
 10152fa:	int3   
 10152fb:	int3   
 10152fc:	int3   
 10152fd:	int3   
 10152fe:	int3   
 10152ff:	int3   
 1015300:	mov    QWORD PTR [rsp+0x8],rcx
 1015305:	sub    rsp,0x38
 1015309:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1015312:	add    rcx,0x10
 1015316:	add    rsp,0x38
 101531a:	jmp    0x10166b0
 101531f:	int3   
 1015320:	int3   
 1015321:	int3   
 1015322:	int3   
 1015323:	int3   
 1015324:	int3   
 1015325:	int3   
 1015326:	int3   
 1015327:	int3   
 1015328:	int3   
 1015329:	int3   
 101532a:	int3   
 101532b:	int3   
 101532c:	int3   
 101532d:	int3   
 101532e:	int3   
 101532f:	int3   
 1015330:	rex push rbp
 1015332:	push   rdi
 1015333:	sub    rsp,0x358
 101533a:	mov    rax,QWORD PTR [rip+0xf31f]        # 0x1024660
 1015341:	xor    rax,rsp
 1015344:	mov    QWORD PTR [rsp+0x340],rax
 101534c:	mov    rax,rdx
 101534f:	mov    rbp,r8
 1015352:	mov    rdi,rcx
 1015355:	lea    rdx,[rsp+0x30]
 101535a:	lea    r9,[rsp+0x20]
 101535f:	mov    r8d,0x186
 1015365:	mov    rcx,rax
 1015368:	call   0x10149c0
 101536d:	test   eax,eax
 101536f:	je     0x1015408
 1015375:	lea    r9,[rsp+0x20]
 101537a:	lea    rdx,[rsp+0x30]
 101537f:	xor    r8d,r8d
 1015382:	mov    rcx,rbp
 1015385:	mov    QWORD PTR [rsp+0x388],rbx
 101538d:	mov    QWORD PTR [rsp+0x20],0x0
 1015396:	call   QWORD PTR [rip+0x170bc]        # 0x102c458
 101539c:	mov    ebx,eax
 101539e:	test   eax,eax
 10153a0:	je     0x10153fc
 10153a2:	lea    rcx,[rdi+0x10]
 10153a6:	mov    QWORD PTR [rsp+0x350],rsi
 10153ae:	xor    ebx,ebx
 10153b0:	call   0x10166e0
 10153b5:	mov    rdx,rax
 10153b8:	mov    rax,QWORD PTR [rsp+0x20]
 10153bd:	mov    ecx,DWORD PTR [rax+0x4]
 10153c0:	call   QWORD PTR [rip+0x170aa]        # 0x102c470
 10153c6:	test   eax,eax
 10153c8:	je     0x10153f4
 10153ca:	lea    rcx,[rdi+0x10]
 10153ce:	call   0x10166d0
 10153d3:	mov    r8,rdi
 10153d6:	mov    rcx,rbp
 10153d9:	mov    rdx,rax
 10153dc:	call   QWORD PTR [rip+0x1706e]        # 0x102c450
 10153e2:	test   eax,eax
 10153e4:	je     0x10153f4
 10153e6:	mov    rax,QWORD PTR [rsp+0x20]
 10153eb:	mov    ebx,0x1
 10153f0:	mov    QWORD PTR [rdi+0x8],rax
 10153f4:	mov    rsi,QWORD PTR [rsp+0x350]
 10153fc:	mov    eax,ebx
 10153fe:	mov    rbx,QWORD PTR [rsp+0x388]
 1015406:	jmp    0x101540a
 1015408:	xor    eax,eax
 101540a:	mov    rcx,QWORD PTR [rsp+0x340]
 1015412:	xor    rcx,rsp
 1015415:	call   0x100c0d0
 101541a:	add    rsp,0x358
 1015421:	pop    rdi
 1015422:	pop    rbp
 1015423:	ret    
 1015424:	int3   
 1015425:	int3   
 1015426:	int3   
 1015427:	int3   
 1015428:	int3   
 1015429:	int3   
 101542a:	int3   
 101542b:	int3   
 101542c:	int3   
 101542d:	int3   
 101542e:	int3   
 101542f:	int3   
 1015430:	mov    QWORD PTR [rsp+0x8],rcx
 1015435:	sub    rsp,0x38
 1015439:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1015442:	add    rcx,0x10
 1015446:	add    rsp,0x38
 101544a:	jmp    0x10166b0
 101544f:	int3   
 1015450:	int3   
 1015451:	int3   
 1015452:	int3   
 1015453:	int3   
 1015454:	int3   
 1015455:	int3   
 1015456:	int3   
 1015457:	int3   
 1015458:	int3   
 1015459:	int3   
 101545a:	int3   
 101545b:	int3   
 101545c:	int3   
 101545d:	int3   
 101545e:	int3   
 101545f:	int3   
 1015460:	mov    rcx,QWORD PTR [rcx]
 1015463:	jmp    0x100bccc
 1015468:	int3   
 1015469:	int3   
 101546a:	int3   
 101546b:	int3   
 101546c:	int3   
 101546d:	int3   
 101546e:	int3   
 101546f:	int3   
 1015470:	mov    QWORD PTR [rsp+0x8],rcx
 1015475:	push   rbx
 1015476:	sub    rsp,0x30
 101547a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1015483:	mov    rbx,rcx
 1015486:	mov    rcx,QWORD PTR [rcx]
 1015489:	test   rcx,rcx
 101548c:	je     0x1015494
 101548e:	call   QWORD PTR [rip+0x1716c]        # 0x102c600
 1015494:	mov    QWORD PTR [rbx],0x0
 101549b:	mov    rcx,QWORD PTR [rbx]
 101549e:	add    rsp,0x30
 10154a2:	pop    rbx
 10154a3:	jmp    0x100bccc
 10154a8:	int3   
 10154a9:	int3   
 10154aa:	int3   
 10154ab:	int3   
 10154ac:	int3   
 10154ad:	int3   
 10154ae:	int3   
 10154af:	int3   
 10154b0:	rex push rbx
 10154b2:	sub    rsp,0x20
 10154b6:	mov    rbx,QWORD PTR [rcx]
 10154b9:	test   rbx,rbx
 10154bc:	je     0x10154ce
 10154be:	mov    rcx,rbx
 10154c1:	call   0x1016a70
 10154c6:	mov    rcx,rbx
 10154c9:	call   0x100bccc
 10154ce:	add    rsp,0x20
 10154d2:	pop    rbx
 10154d3:	ret    
 10154d4:	int3   
 10154d5:	int3   
 10154d6:	int3   
 10154d7:	int3   
 10154d8:	int3   
 10154d9:	int3   
 10154da:	int3   
 10154db:	int3   
 10154dc:	int3   
 10154dd:	int3   
 10154de:	int3   
 10154df:	int3   
 10154e0:	mov    QWORD PTR [rsp+0x8],rcx
 10154e5:	push   rdi
 10154e6:	sub    rsp,0x30
 10154ea:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 10154f3:	mov    QWORD PTR [rsp+0x48],rbx
 10154f8:	mov    rbx,rcx
 10154fb:	mov    rdi,QWORD PTR [rcx]
 10154fe:	test   rdi,rdi
 1015501:	je     0x1015514
 1015503:	mov    rcx,rdi
 1015506:	call   0x1016a70
 101550b:	mov    rcx,rdi
 101550e:	call   QWORD PTR [rip+0x170ec]        # 0x102c600
 1015514:	mov    QWORD PTR [rbx],0x0
 101551b:	mov    rbx,QWORD PTR [rbx]
 101551e:	test   rbx,rbx
 1015521:	je     0x1015533
 1015523:	mov    rcx,rbx
 1015526:	call   0x1016a70
 101552b:	mov    rcx,rbx
 101552e:	call   0x100bccc
 1015533:	mov    rbx,QWORD PTR [rsp+0x48]
 1015538:	add    rsp,0x30
 101553c:	pop    rdi
 101553d:	ret    
 101553e:	int3   
 101553f:	int3   
 1015540:	int3   
 1015541:	int3   
 1015542:	int3   
 1015543:	int3   
 1015544:	int3   
 1015545:	int3   
 1015546:	int3   
 1015547:	int3   
 1015548:	int3   
 1015549:	int3   
 101554a:	int3   
 101554b:	int3   
 101554c:	int3   
 101554d:	int3   
 101554e:	int3   
 101554f:	int3   
 1015550:	rex push rsi
 1015552:	push   rdi
 1015553:	push   r12
 1015555:	push   r14
 1015557:	push   r15
 1015559:	sub    rsp,0x30
 101555d:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1015566:	mov    QWORD PTR [rsp+0x60],rbx
 101556b:	mov    QWORD PTR [rsp+0x68],rbp
 1015570:	mov    r14,r9
 1015573:	mov    r10,r8
 1015576:	mov    rbp,rdx
 1015579:	mov    r15,rcx
 101557c:	xor    r12d,r12d
 101557f:	mov    QWORD PTR [rsp+0x78],r12
 1015584:	mov    rax,QWORD PTR [r8]
 1015587:	lea    r8,[rsp+0x78]
 101558c:	lea    rdx,[rip+0xfffffffffffefddd]        # 0x1005370
 1015593:	mov    rcx,r10
 1015596:	call   QWORD PTR [rax+0x120]
 101559c:	mov    r8d,r12d
 101559f:	test   eax,eax
 10155a1:	setns  r8b
 10155a5:	mov    rsi,QWORD PTR [rsp+0x80]
 10155ad:	test   r8d,r8d
 10155b0:	je     0x10155e0
 10155b2:	mov    DWORD PTR [rsp+0x70],r12d
 10155b7:	mov    rcx,QWORD PTR [rsp+0x78]
 10155bc:	test   rcx,rcx
 10155bf:	je     0x10155e0
 10155c1:	mov    rax,QWORD PTR [rcx]
 10155c4:	lea    rdx,[rsp+0x70]
 10155c9:	call   QWORD PTR [rax+0x40]
 10155cc:	mov    ecx,r12d
 10155cf:	test   eax,eax
 10155d1:	setns  cl
 10155d4:	test   ecx,ecx
 10155d6:	je     0x10155e0
 10155d8:	movzx  eax,WORD PTR [rsp+0x70]
 10155dd:	mov    WORD PTR [rsi],ax
 10155e0:	mov    edx,0x10
 10155e5:	xor    ecx,ecx
 10155e7:	call   QWORD PTR [rip+0x1700b]        # 0x102c5f8
 10155ed:	mov    QWORD PTR [rsp+0x70],rax
 10155f2:	test   rax,rax
 10155f5:	je     0x1015605
 10155f7:	lea    rcx,[rax+0x8]
 10155fb:	mov    QWORD PTR [rsp+0x28],rcx
 1015600:	mov    QWORD PTR [rcx],r12
 1015603:	jmp    0x1015608
 1015605:	mov    rax,r12
 1015608:	mov    QWORD PTR [r14],rax
 101560b:	test   rax,rax
 101560e:	je     0x1015695
 1015614:	movzx  edx,WORD PTR [rsi]
 1015617:	mov    rcx,rax
 101561a:	call   0x1016a00
 101561f:	mov    ebx,eax
 1015621:	mov    QWORD PTR [rsp+0x70],r12
 1015626:	movzx  edi,r12w
 101562a:	test   eax,eax
 101562c:	je     0x1015698
 101562e:	xchg   ax,ax
 1015630:	cmp    di,WORD PTR [rsi]
 1015633:	jae    0x1015698
 1015635:	mov    rcx,QWORD PTR [rsp+0x78]
 101563a:	mov    rax,QWORD PTR [rcx]
 101563d:	lea    rdx,[rsp+0x70]
 1015642:	call   QWORD PTR [rax+0x48]
 1015645:	test   eax,eax
 1015647:	js     0x1015698
 1015649:	mov    rcx,QWORD PTR [rsp+0x70]
 101564e:	test   rcx,rcx
 1015651:	je     0x1015698
 1015653:	test   ebx,ebx
 1015655:	je     0x1015683
 1015657:	movzx  edx,di
 101565a:	mov    rcx,QWORD PTR [r14]
 101565d:	call   0x1016ac0
 1015662:	mov    r9,rax
 1015665:	mov    r8,QWORD PTR [rsp+0x70]
 101566a:	mov    rdx,rbp
 101566d:	mov    rcx,r15
 1015670:	call   0x1015e50
 1015675:	mov    rcx,QWORD PTR [rsp+0x70]
 101567a:	test   eax,eax
 101567c:	mov    ebx,0x1
 1015681:	jne    0x1015686
 1015683:	mov    ebx,r12d
 1015686:	mov    rax,QWORD PTR [rcx]
 1015689:	call   QWORD PTR [rax+0x10]
 101568c:	inc    di
 101568f:	test   ebx,ebx
 1015691:	jne    0x1015630
 1015693:	jmp    0x1015698
 1015695:	mov    ebx,r12d
 1015698:	mov    rcx,QWORD PTR [rsp+0x78]
 101569d:	test   rcx,rcx
 10156a0:	je     0x10156a8
 10156a2:	mov    rax,QWORD PTR [rcx]
 10156a5:	call   QWORD PTR [rax+0x10]
 10156a8:	mov    eax,ebx
 10156aa:	mov    rbx,QWORD PTR [rsp+0x60]
 10156af:	mov    rbp,QWORD PTR [rsp+0x68]
 10156b4:	add    rsp,0x30
 10156b8:	pop    r15
 10156ba:	pop    r14
 10156bc:	pop    r12
 10156be:	pop    rdi
 10156bf:	pop    rsi
 10156c0:	ret    
 10156c1:	int3   
 10156c2:	int3   
 10156c3:	int3   
 10156c4:	int3   
 10156c5:	int3   
 10156c6:	int3   
 10156c7:	int3   
 10156c8:	int3   
 10156c9:	int3   
 10156ca:	int3   
 10156cb:	int3   
 10156cc:	int3   
 10156cd:	int3   
 10156ce:	int3   
 10156cf:	int3   
 10156d0:	mov    QWORD PTR [rsp+0x8],rcx
 10156d5:	sub    rsp,0x38
 10156d9:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 10156e2:	add    rcx,0x10
 10156e6:	add    rsp,0x38
 10156ea:	jmp    0x10166b0
 10156ef:	int3   
 10156f0:	int3   
 10156f1:	int3   
 10156f2:	int3   
 10156f3:	int3   
 10156f4:	int3   
 10156f5:	int3   
 10156f6:	int3   
 10156f7:	int3   
 10156f8:	int3   
 10156f9:	int3   
 10156fa:	int3   
 10156fb:	int3   
 10156fc:	int3   
 10156fd:	int3   
 10156fe:	int3   
 10156ff:	int3   
 1015700:	rex push rbp
 1015702:	push   rdi
 1015703:	sub    rsp,0x358
 101570a:	mov    rax,QWORD PTR [rip+0xef4f]        # 0x1024660
 1015711:	xor    rax,rsp
 1015714:	mov    QWORD PTR [rsp+0x340],rax
 101571c:	mov    rax,rdx
 101571f:	mov    rbp,r8
 1015722:	mov    rdi,rcx
 1015725:	lea    rdx,[rsp+0x30]
 101572a:	lea    r9,[rsp+0x20]
 101572f:	mov    r8d,0x186
 1015735:	mov    rcx,rax
 1015738:	call   0x10149c0
 101573d:	test   eax,eax
 101573f:	je     0x10157db
 1015745:	lea    r9,[rsp+0x20]
 101574a:	lea    rdx,[rsp+0x30]
 101574f:	mov    r8d,0x5
 1015755:	mov    rcx,rbp
 1015758:	mov    QWORD PTR [rsp+0x388],rbx
 1015760:	mov    QWORD PTR [rsp+0x20],0x0
 1015769:	call   QWORD PTR [rip+0x16ce9]        # 0x102c458
 101576f:	mov    ebx,eax
 1015771:	test   eax,eax
 1015773:	je     0x10157cf
 1015775:	lea    rcx,[rdi+0x10]
 1015779:	mov    QWORD PTR [rsp+0x350],rsi
 1015781:	xor    ebx,ebx
 1015783:	call   0x10166e0
 1015788:	mov    rdx,rax
 101578b:	mov    rax,QWORD PTR [rsp+0x20]
 1015790:	mov    ecx,DWORD PTR [rax+0x4]
 1015793:	call   QWORD PTR [rip+0x16cd7]        # 0x102c470
 1015799:	test   eax,eax
 101579b:	je     0x10157c7
 101579d:	lea    rcx,[rdi+0x10]
 10157a1:	call   0x10166d0
 10157a6:	mov    r8,rdi
 10157a9:	mov    rcx,rbp
 10157ac:	mov    rdx,rax
 10157af:	call   QWORD PTR [rip+0x16c9b]        # 0x102c450
 10157b5:	test   eax,eax
 10157b7:	je     0x10157c7
 10157b9:	mov    rax,QWORD PTR [rsp+0x20]
 10157be:	mov    ebx,0x1
 10157c3:	mov    QWORD PTR [rdi+0x8],rax
 10157c7:	mov    rsi,QWORD PTR [rsp+0x350]
 10157cf:	mov    eax,ebx
 10157d1:	mov    rbx,QWORD PTR [rsp+0x388]
 10157d9:	jmp    0x10157dd
 10157db:	xor    eax,eax
 10157dd:	mov    rcx,QWORD PTR [rsp+0x340]
 10157e5:	xor    rcx,rsp
 10157e8:	call   0x100c0d0
 10157ed:	add    rsp,0x358
 10157f4:	pop    rdi
 10157f5:	pop    rbp
 10157f6:	ret    
 10157f7:	int3   
 10157f8:	int3   
 10157f9:	int3   
 10157fa:	int3   
 10157fb:	int3   
 10157fc:	int3   
 10157fd:	int3   
 10157fe:	int3   
 10157ff:	int3   
 1015800:	mov    QWORD PTR [rsp+0x8],rcx
 1015805:	sub    rsp,0x38
 1015809:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1015812:	add    rcx,0x10
 1015816:	add    rsp,0x38
 101581a:	jmp    0x10166b0
 101581f:	int3   
 1015820:	int3   
 1015821:	int3   
 1015822:	int3   
 1015823:	int3   
 1015824:	int3   
 1015825:	int3   
 1015826:	int3   
 1015827:	int3   
 1015828:	int3   
 1015829:	int3   
 101582a:	int3   
 101582b:	int3   
 101582c:	int3   
 101582d:	int3   
 101582e:	int3   
 101582f:	int3   
 1015830:	rex push rbx
 1015832:	push   rsi
 1015833:	push   rdi
 1015834:	sub    rsp,0x350
 101583b:	mov    rax,QWORD PTR [rip+0xee1e]        # 0x1024660
 1015842:	xor    rax,rsp
 1015845:	mov    QWORD PTR [rsp+0x340],rax
 101584d:	mov    rdi,r8
 1015850:	mov    rax,rdx
 1015853:	mov    rsi,rcx
 1015856:	mov    rdx,rdi
 1015859:	mov    rcx,rax
 101585c:	mov    r8,r9
 101585f:	call   0x1015700
 1015864:	mov    ebx,eax
 1015866:	test   eax,eax
 1015868:	jne    0x10158a2
 101586a:	lea    rax,[rsp+0x30]
 101586f:	lea    r9,[rsp+0x28]
 1015874:	lea    rdx,[rsp+0x30]
 1015879:	mov    r8d,0x186
 101587f:	mov    rcx,rdi
 1015882:	mov    QWORD PTR [rsp+0x20],rax
 1015887:	call   0x10149c0
 101588c:	test   eax,eax
 101588e:	je     0x10158a0
 1015890:	lea    edx,[rbx+0x1]
 1015893:	lea    r8,[rsp+0x20]
 1015898:	mov    rcx,rsi
 101589b:	call   0x1016c50
 10158a0:	mov    eax,ebx
 10158a2:	mov    rcx,QWORD PTR [rsp+0x340]
 10158aa:	xor    rcx,rsp
 10158ad:	call   0x100c0d0
 10158b2:	add    rsp,0x350
 10158b9:	pop    rdi
 10158ba:	pop    rsi
 10158bb:	pop    rbx
 10158bc:	ret    
 10158bd:	int3   
 10158be:	int3   
 10158bf:	int3   
 10158c0:	int3   
 10158c1:	int3   
 10158c2:	int3   
 10158c3:	int3   
 10158c4:	int3   
 10158c5:	int3   
 10158c6:	int3   
 10158c7:	int3   
 10158c8:	int3   
 10158c9:	int3   
 10158ca:	int3   
 10158cb:	int3   
 10158cc:	int3   
 10158cd:	int3   
 10158ce:	int3   
 10158cf:	int3   
 10158d0:	mov    QWORD PTR [rsp+0x8],rcx
 10158d5:	sub    rsp,0x38
 10158d9:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 10158e2:	add    rcx,0x10
 10158e6:	add    rsp,0x38
 10158ea:	jmp    0x10166b0
 10158ef:	int3   
 10158f0:	int3   
 10158f1:	int3   
 10158f2:	int3   
 10158f3:	int3   
 10158f4:	int3   
 10158f5:	int3   
 10158f6:	int3   
 10158f7:	int3   
 10158f8:	int3   
 10158f9:	int3   
 10158fa:	int3   
 10158fb:	int3   
 10158fc:	int3   
 10158fd:	int3   
 10158fe:	int3   
 10158ff:	int3   
 1015900:	rex push rbp
 1015902:	push   rdi
 1015903:	sub    rsp,0x358
 101590a:	mov    rax,QWORD PTR [rip+0xed4f]        # 0x1024660
 1015911:	xor    rax,rsp
 1015914:	mov    QWORD PTR [rsp+0x340],rax
 101591c:	mov    rax,rdx
 101591f:	mov    rbp,r8
 1015922:	mov    rdi,rcx
 1015925:	lea    rdx,[rsp+0x30]
 101592a:	lea    r9,[rsp+0x20]
 101592f:	mov    r8d,0x186
 1015935:	mov    rcx,rax
 1015938:	call   0x10149c0
 101593d:	test   eax,eax
 101593f:	je     0x10159db
 1015945:	lea    r9,[rsp+0x20]
 101594a:	lea    rdx,[rsp+0x30]
 101594f:	mov    r8d,0x4
 1015955:	mov    rcx,rbp
 1015958:	mov    QWORD PTR [rsp+0x388],rbx
 1015960:	mov    QWORD PTR [rsp+0x20],0x0
 1015969:	call   QWORD PTR [rip+0x16ae9]        # 0x102c458
 101596f:	mov    ebx,eax
 1015971:	test   eax,eax
 1015973:	je     0x10159cf
 1015975:	lea    rcx,[rdi+0x10]
 1015979:	mov    QWORD PTR [rsp+0x350],rsi
 1015981:	xor    ebx,ebx
 1015983:	call   0x10166e0
 1015988:	mov    rdx,rax
 101598b:	mov    rax,QWORD PTR [rsp+0x20]
 1015990:	mov    ecx,DWORD PTR [rax+0x4]
 1015993:	call   QWORD PTR [rip+0x16ad7]        # 0x102c470
 1015999:	test   eax,eax
 101599b:	je     0x10159c7
 101599d:	lea    rcx,[rdi+0x10]
 10159a1:	call   0x10166d0
 10159a6:	mov    r8,rdi
 10159a9:	mov    rcx,rbp
 10159ac:	mov    rdx,rax
 10159af:	call   QWORD PTR [rip+0x16a9b]        # 0x102c450
 10159b5:	test   eax,eax
 10159b7:	je     0x10159c7
 10159b9:	mov    rax,QWORD PTR [rsp+0x20]
 10159be:	mov    ebx,0x1
 10159c3:	mov    QWORD PTR [rdi+0x8],rax
 10159c7:	mov    rsi,QWORD PTR [rsp+0x350]
 10159cf:	mov    eax,ebx
 10159d1:	mov    rbx,QWORD PTR [rsp+0x388]
 10159d9:	jmp    0x10159dd
 10159db:	xor    eax,eax
 10159dd:	mov    rcx,QWORD PTR [rsp+0x340]
 10159e5:	xor    rcx,rsp
 10159e8:	call   0x100c0d0
 10159ed:	add    rsp,0x358
 10159f4:	pop    rdi
 10159f5:	pop    rbp
 10159f6:	ret    
 10159f7:	int3   
 10159f8:	int3   
 10159f9:	int3   
 10159fa:	int3   
 10159fb:	int3   
 10159fc:	int3   
 10159fd:	int3   
 10159fe:	int3   
 10159ff:	int3   
 1015a00:	mov    QWORD PTR [rsp+0x8],rcx
 1015a05:	sub    rsp,0x38
 1015a09:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1015a12:	add    rcx,0x10
 1015a16:	add    rsp,0x38
 1015a1a:	jmp    0x10166b0
 1015a1f:	int3   
 1015a20:	int3   
 1015a21:	int3   
 1015a22:	int3   
 1015a23:	int3   
 1015a24:	int3   
 1015a25:	int3   
 1015a26:	int3   
 1015a27:	int3   
 1015a28:	int3   
 1015a29:	int3   
 1015a2a:	int3   
 1015a2b:	int3   
 1015a2c:	int3   
 1015a2d:	int3   
 1015a2e:	int3   
 1015a2f:	int3   
 1015a30:	rex push rbx
 1015a32:	push   rsi
 1015a33:	push   rdi
 1015a34:	sub    rsp,0x350
 1015a3b:	mov    rax,QWORD PTR [rip+0xec1e]        # 0x1024660
 1015a42:	xor    rax,rsp
 1015a45:	mov    QWORD PTR [rsp+0x340],rax
 1015a4d:	mov    rdi,r8
 1015a50:	mov    rax,rdx
 1015a53:	mov    rsi,rcx
 1015a56:	mov    rdx,rdi
 1015a59:	mov    rcx,rax
 1015a5c:	mov    r8,r9
 1015a5f:	call   0x1015900
 1015a64:	mov    ebx,eax
 1015a66:	test   eax,eax
 1015a68:	jne    0x1015aa2
 1015a6a:	lea    rax,[rsp+0x30]
 1015a6f:	lea    r9,[rsp+0x28]
 1015a74:	lea    rdx,[rsp+0x30]
 1015a79:	mov    r8d,0x186
 1015a7f:	mov    rcx,rdi
 1015a82:	mov    QWORD PTR [rsp+0x20],rax
 1015a87:	call   0x10149c0
 1015a8c:	test   eax,eax
 1015a8e:	je     0x1015aa0
 1015a90:	lea    edx,[rbx+0x1]
 1015a93:	lea    r8,[rsp+0x20]
 1015a98:	mov    rcx,rsi
 1015a9b:	call   0x1016c50
 1015aa0:	mov    eax,ebx
 1015aa2:	mov    rcx,QWORD PTR [rsp+0x340]
 1015aaa:	xor    rcx,rsp
 1015aad:	call   0x100c0d0
 1015ab2:	add    rsp,0x350
 1015ab9:	pop    rdi
 1015aba:	pop    rsi
 1015abb:	pop    rbx
 1015abc:	ret    
 1015abd:	int3   
 1015abe:	int3   
 1015abf:	int3   
 1015ac0:	int3   
 1015ac1:	int3   
 1015ac2:	int3   
 1015ac3:	int3   
 1015ac4:	int3   
 1015ac5:	int3   
 1015ac6:	int3   
 1015ac7:	int3   
 1015ac8:	int3   
 1015ac9:	int3   
 1015aca:	int3   
 1015acb:	int3   
 1015acc:	int3   
 1015acd:	int3   
 1015ace:	int3   
 1015acf:	int3   
 1015ad0:	mov    QWORD PTR [rsp+0x8],rcx
 1015ad5:	sub    rsp,0x38
 1015ad9:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1015ae2:	add    rcx,0x10
 1015ae6:	add    rsp,0x38
 1015aea:	jmp    0x10166b0
 1015aef:	int3   
 1015af0:	int3   
 1015af1:	int3   
 1015af2:	int3   
 1015af3:	int3   
 1015af4:	int3   
 1015af5:	int3   
 1015af6:	int3   
 1015af7:	int3   
 1015af8:	int3   
 1015af9:	int3   
 1015afa:	int3   
 1015afb:	int3   
 1015afc:	int3   
 1015afd:	int3   
 1015afe:	int3   
 1015aff:	int3   
 1015b00:	rex push rbp
 1015b02:	push   rdi
 1015b03:	sub    rsp,0x358
 1015b0a:	mov    rax,QWORD PTR [rip+0xeb4f]        # 0x1024660
 1015b11:	xor    rax,rsp
 1015b14:	mov    QWORD PTR [rsp+0x340],rax
 1015b1c:	mov    rax,rdx
 1015b1f:	mov    rbp,r8
 1015b22:	mov    rdi,rcx
 1015b25:	lea    rdx,[rsp+0x30]
 1015b2a:	lea    r9,[rsp+0x20]
 1015b2f:	mov    r8d,0x186
 1015b35:	mov    rcx,rax
 1015b38:	call   0x10149c0
 1015b3d:	test   eax,eax
 1015b3f:	je     0x1015bdb
 1015b45:	lea    r9,[rsp+0x20]
 1015b4a:	lea    rdx,[rsp+0x30]
 1015b4f:	mov    r8d,0x2
 1015b55:	mov    rcx,rbp
 1015b58:	mov    QWORD PTR [rsp+0x388],rbx
 1015b60:	mov    QWORD PTR [rsp+0x20],0x0
 1015b69:	call   QWORD PTR [rip+0x168e9]        # 0x102c458
 1015b6f:	mov    ebx,eax
 1015b71:	test   eax,eax
 1015b73:	je     0x1015bcf
 1015b75:	lea    rcx,[rdi+0x10]
 1015b79:	mov    QWORD PTR [rsp+0x350],rsi
 1015b81:	xor    ebx,ebx
 1015b83:	call   0x10166e0
 1015b88:	mov    rdx,rax
 1015b8b:	mov    rax,QWORD PTR [rsp+0x20]
 1015b90:	mov    ecx,DWORD PTR [rax+0x4]
 1015b93:	call   QWORD PTR [rip+0x168d7]        # 0x102c470
 1015b99:	test   eax,eax
 1015b9b:	je     0x1015bc7
 1015b9d:	lea    rcx,[rdi+0x10]
 1015ba1:	call   0x10166d0
 1015ba6:	mov    r8,rdi
 1015ba9:	mov    rcx,rbp
 1015bac:	mov    rdx,rax
 1015baf:	call   QWORD PTR [rip+0x1689b]        # 0x102c450
 1015bb5:	test   eax,eax
 1015bb7:	je     0x1015bc7
 1015bb9:	mov    rax,QWORD PTR [rsp+0x20]
 1015bbe:	mov    ebx,0x1
 1015bc3:	mov    QWORD PTR [rdi+0x8],rax
 1015bc7:	mov    rsi,QWORD PTR [rsp+0x350]
 1015bcf:	mov    eax,ebx
 1015bd1:	mov    rbx,QWORD PTR [rsp+0x388]
 1015bd9:	jmp    0x1015bdd
 1015bdb:	xor    eax,eax
 1015bdd:	mov    rcx,QWORD PTR [rsp+0x340]
 1015be5:	xor    rcx,rsp
 1015be8:	call   0x100c0d0
 1015bed:	add    rsp,0x358
 1015bf4:	pop    rdi
 1015bf5:	pop    rbp
 1015bf6:	ret    
 1015bf7:	int3   
 1015bf8:	int3   
 1015bf9:	int3   
 1015bfa:	int3   
 1015bfb:	int3   
 1015bfc:	int3   
 1015bfd:	int3   
 1015bfe:	int3   
 1015bff:	int3   
 1015c00:	mov    QWORD PTR [rsp+0x8],rcx
 1015c05:	sub    rsp,0x38
 1015c09:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1015c12:	add    rcx,0x10
 1015c16:	add    rsp,0x38
 1015c1a:	jmp    0x10166b0
 1015c1f:	int3   
 1015c20:	int3   
 1015c21:	int3   
 1015c22:	int3   
 1015c23:	int3   
 1015c24:	int3   
 1015c25:	int3   
 1015c26:	int3   
 1015c27:	int3   
 1015c28:	int3   
 1015c29:	int3   
 1015c2a:	int3   
 1015c2b:	int3   
 1015c2c:	int3   
 1015c2d:	int3   
 1015c2e:	int3   
 1015c2f:	int3   
 1015c30:	rex push rsi
 1015c32:	push   rdi
 1015c33:	push   r12
 1015c35:	push   r14
 1015c37:	push   r15
 1015c39:	sub    rsp,0x30
 1015c3d:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1015c46:	mov    QWORD PTR [rsp+0x60],rbx
 1015c4b:	mov    QWORD PTR [rsp+0x68],rbp
 1015c50:	mov    r14,r9
 1015c53:	mov    r10,r8
 1015c56:	mov    rbp,rdx
 1015c59:	mov    r15,rcx
 1015c5c:	xor    r12d,r12d
 1015c5f:	mov    QWORD PTR [rsp+0x78],r12
 1015c64:	mov    rax,QWORD PTR [r8]
 1015c67:	lea    r8,[rsp+0x78]
 1015c6c:	lea    rdx,[rip+0xfffffffffffef6fd]        # 0x1005370
 1015c73:	mov    rcx,r10
 1015c76:	call   QWORD PTR [rax+0x120]
 1015c7c:	mov    r8d,r12d
 1015c7f:	test   eax,eax
 1015c81:	setns  r8b
 1015c85:	mov    rsi,QWORD PTR [rsp+0x80]
 1015c8d:	test   r8d,r8d
 1015c90:	je     0x1015cc0
 1015c92:	mov    DWORD PTR [rsp+0x70],r12d
 1015c97:	mov    rcx,QWORD PTR [rsp+0x78]
 1015c9c:	test   rcx,rcx
 1015c9f:	je     0x1015cc0
 1015ca1:	mov    rax,QWORD PTR [rcx]
 1015ca4:	lea    rdx,[rsp+0x70]
 1015ca9:	call   QWORD PTR [rax+0x40]
 1015cac:	mov    ecx,r12d
 1015caf:	test   eax,eax
 1015cb1:	setns  cl
 1015cb4:	test   ecx,ecx
 1015cb6:	je     0x1015cc0
 1015cb8:	movzx  eax,WORD PTR [rsp+0x70]
 1015cbd:	mov    WORD PTR [rsi],ax
 1015cc0:	mov    edx,0x10
 1015cc5:	xor    ecx,ecx
 1015cc7:	call   QWORD PTR [rip+0x1692b]        # 0x102c5f8
 1015ccd:	mov    QWORD PTR [rsp+0x70],rax
 1015cd2:	test   rax,rax
 1015cd5:	je     0x1015ce5
 1015cd7:	lea    rcx,[rax+0x8]
 1015cdb:	mov    QWORD PTR [rsp+0x28],rcx
 1015ce0:	mov    QWORD PTR [rcx],r12
 1015ce3:	jmp    0x1015ce8
 1015ce5:	mov    rax,r12
 1015ce8:	mov    QWORD PTR [r14],rax
 1015ceb:	test   rax,rax
 1015cee:	je     0x1015d75
 1015cf4:	movzx  edx,WORD PTR [rsi]
 1015cf7:	mov    rcx,rax
 1015cfa:	call   0x1016a00
 1015cff:	mov    ebx,eax
 1015d01:	mov    QWORD PTR [rsp+0x70],r12
 1015d06:	movzx  edi,r12w
 1015d0a:	test   eax,eax
 1015d0c:	je     0x1015d78
 1015d0e:	xchg   ax,ax
 1015d10:	cmp    di,WORD PTR [rsi]
 1015d13:	jae    0x1015d78
 1015d15:	mov    rcx,QWORD PTR [rsp+0x78]
 1015d1a:	mov    rax,QWORD PTR [rcx]
 1015d1d:	lea    rdx,[rsp+0x70]
 1015d22:	call   QWORD PTR [rax+0x48]
 1015d25:	test   eax,eax
 1015d27:	js     0x1015d78
 1015d29:	mov    rcx,QWORD PTR [rsp+0x70]
 1015d2e:	test   rcx,rcx
 1015d31:	je     0x1015d78
 1015d33:	test   ebx,ebx
 1015d35:	je     0x1015d63
 1015d37:	movzx  edx,di
 1015d3a:	mov    rcx,QWORD PTR [r14]
 1015d3d:	call   0x1016ac0
 1015d42:	mov    r9,rax
 1015d45:	mov    r8,QWORD PTR [rsp+0x70]
 1015d4a:	mov    rdx,rbp
 1015d4d:	mov    rcx,r15
 1015d50:	call   0x1016010
 1015d55:	mov    rcx,QWORD PTR [rsp+0x70]
 1015d5a:	test   eax,eax
 1015d5c:	mov    ebx,0x1
 1015d61:	jne    0x1015d66
 1015d63:	mov    ebx,r12d
 1015d66:	mov    rax,QWORD PTR [rcx]
 1015d69:	call   QWORD PTR [rax+0x10]
 1015d6c:	inc    di
 1015d6f:	test   ebx,ebx
 1015d71:	jne    0x1015d10
 1015d73:	jmp    0x1015d78
 1015d75:	mov    ebx,r12d
 1015d78:	mov    rcx,QWORD PTR [rsp+0x78]
 1015d7d:	test   rcx,rcx
 1015d80:	je     0x1015d88
 1015d82:	mov    rax,QWORD PTR [rcx]
 1015d85:	call   QWORD PTR [rax+0x10]
 1015d88:	mov    eax,ebx
 1015d8a:	mov    rbx,QWORD PTR [rsp+0x60]
 1015d8f:	mov    rbp,QWORD PTR [rsp+0x68]
 1015d94:	add    rsp,0x30
 1015d98:	pop    r15
 1015d9a:	pop    r14
 1015d9c:	pop    r12
 1015d9e:	pop    rdi
 1015d9f:	pop    rsi
 1015da0:	ret    
 1015da1:	int3   
 1015da2:	int3   
 1015da3:	int3   
 1015da4:	int3   
 1015da5:	int3   
 1015da6:	int3   
 1015da7:	int3   
 1015da8:	int3   
 1015da9:	int3   
 1015daa:	int3   
 1015dab:	int3   
 1015dac:	int3   
 1015dad:	int3   
 1015dae:	int3   
 1015daf:	int3   
 1015db0:	test   rcx,rcx
 1015db3:	je     0x1015e39
 1015db9:	push   rdi
 1015dba:	sub    rsp,0x30
 1015dbe:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1015dc7:	mov    QWORD PTR [rsp+0x48],rbx
 1015dcc:	mov    QWORD PTR [rsp+0x50],rbp
 1015dd1:	mov    QWORD PTR [rsp+0x58],rsi
 1015dd6:	mov    rbx,rcx
 1015dd9:	lea    rsi,[rcx-0x4]
 1015ddd:	and    rsi,0xfffffffffffffff8
 1015de1:	xor    ebp,ebp
 1015de3:	mov    edi,ebp
 1015de5:	cmp    DWORD PTR [rsi],edi
 1015de7:	jbe    0x1015e1c
 1015de9:	nop    DWORD PTR [rax+0x0]
 1015df0:	mov    QWORD PTR [rsp+0x40],rbx
 1015df5:	mov    rcx,QWORD PTR [rbx]
 1015df8:	test   rcx,rcx
 1015dfb:	je     0x1015e03
 1015dfd:	call   QWORD PTR [rip+0x167fd]        # 0x102c600
 1015e03:	mov    QWORD PTR [rbx],rbp
 1015e06:	mov    rcx,QWORD PTR [rbx]
 1015e09:	call   0x100bccc
 1015e0e:	inc    rdi
 1015e11:	add    rbx,0x8
 1015e15:	mov    eax,DWORD PTR [rsi]
 1015e17:	cmp    rdi,rax
 1015e1a:	jb     0x1015df0
 1015e1c:	mov    rcx,rsi
 1015e1f:	call   QWORD PTR [rip+0x167db]        # 0x102c600
 1015e25:	mov    rbx,QWORD PTR [rsp+0x48]
 1015e2a:	mov    rbp,QWORD PTR [rsp+0x50]
 1015e2f:	mov    rsi,QWORD PTR [rsp+0x58]
 1015e34:	add    rsp,0x30
 1015e38:	pop    rdi
 1015e39:	repz ret 
 1015e3b:	int3   
 1015e3c:	int3   
 1015e3d:	int3   
 1015e3e:	int3   
 1015e3f:	int3   
 1015e40:	int3   
 1015e41:	int3   
 1015e42:	int3   
 1015e43:	int3   
 1015e44:	int3   
 1015e45:	int3   
 1015e46:	int3   
 1015e47:	int3   
 1015e48:	int3   
 1015e49:	int3   
 1015e4a:	int3   
 1015e4b:	int3   
 1015e4c:	int3   
 1015e4d:	int3   
 1015e4e:	int3   
 1015e4f:	int3   
 1015e50:	rex push rbx
 1015e52:	push   rbp
 1015e53:	push   rsi
 1015e54:	push   rdi
 1015e55:	push   r12
 1015e57:	push   r13
 1015e59:	push   r14
 1015e5b:	push   r15
 1015e5d:	sub    rsp,0x178
 1015e64:	mov    QWORD PTR [rsp+0x50],0xfffffffffffffffe
 1015e6d:	mov    rax,QWORD PTR [rip+0xe7ec]        # 0x1024660
 1015e74:	xor    rax,rsp
 1015e77:	mov    QWORD PTR [rsp+0x160],rax
 1015e7f:	mov    r15,r9
 1015e82:	mov    rbx,rdx
 1015e85:	mov    r13,rcx
 1015e88:	xor    ebp,ebp
 1015e8a:	mov    QWORD PTR [rsp+0x20],rbp
 1015e8f:	mov    rax,QWORD PTR [r8]
 1015e92:	lea    rdx,[rsp+0x20]
 1015e97:	mov    rcx,r8
 1015e9a:	call   QWORD PTR [rax+0x88]
 1015ea0:	test   eax,eax
 1015ea2:	js     0x1015fb3
 1015ea8:	mov    rdx,QWORD PTR [rsp+0x20]
 1015ead:	test   rdx,rdx
 1015eb0:	je     0x1015fb3
 1015eb6:	mov    r9d,0x80
 1015ebc:	lea    r8,[rsp+0x60]
 1015ec1:	lea    rcx,[rip+0xfffffffffffee560]        # 0x1004428
 1015ec8:	call   0x1013c80
 1015ecd:	test   eax,eax
 1015ecf:	je     0x1015fb3
 1015ed5:	movzx  r14d,WORD PTR [rbx+0x22]
 1015eda:	mov    r12,QWORD PTR [rbx+0x38]
 1015ede:	mov    edi,ebp
 1015ee0:	movzx  esi,bp
 1015ee3:	movzx  eax,si
 1015ee6:	cmp    eax,r14d
 1015ee9:	jae    0x1015f1b
 1015eeb:	movzx  ebx,si
 1015eee:	imul   rbx,rbx,0x38
 1015ef2:	add    rbx,r12
 1015ef5:	call   0x100ad20
 1015efa:	mov    r8,rax
 1015efd:	lea    rdx,[rsp+0x60]
 1015f02:	mov    rcx,QWORD PTR [rbx+0x8]
 1015f06:	call   0x100c102
 1015f0b:	test   eax,eax
 1015f0d:	cmove  rdi,rbx
 1015f11:	inc    si
 1015f14:	test   rdi,rdi
 1015f17:	je     0x1015ee3
 1015f19:	jmp    0x1015f24
 1015f1b:	test   rdi,rdi
 1015f1e:	je     0x1015fb3
 1015f24:	mov    rax,QWORD PTR [rdi]
 1015f27:	mov    QWORD PTR [r15],rax
 1015f2a:	mov    rax,QWORD PTR [rdi+0x8]
 1015f2e:	mov    QWORD PTR [r15+0x8],rax
 1015f32:	mov    rax,QWORD PTR [rdi+0x10]
 1015f36:	mov    QWORD PTR [r15+0x10],rax
 1015f3a:	mov    rax,QWORD PTR [rdi+0x18]
 1015f3e:	mov    QWORD PTR [r15+0x18],rax
 1015f42:	mov    rax,QWORD PTR [rdi+0x20]
 1015f46:	mov    QWORD PTR [r15+0x20],rax
 1015f4a:	mov    rax,QWORD PTR [rdi+0x28]
 1015f4e:	mov    QWORD PTR [r15+0x28],rax
 1015f52:	mov    rax,QWORD PTR [rdi+0x30]
 1015f56:	mov    QWORD PTR [r15+0x30],rax
 1015f5a:	lea    rcx,[rsp+0x38]
 1015f5f:	call   QWORD PTR [rip+0xfffffffffffeb633]        # 0x1001598
 1015f65:	nop
 1015f66:	lea    r8,[rsp+0x38]
 1015f6b:	mov    rdx,QWORD PTR [rsp+0x20]
 1015f70:	lea    rcx,[rip+0xfffffffffffef411]        # 0x1005388
 1015f77:	call   0x1013dc0
 1015f7c:	test   eax,eax
 1015f7e:	je     0x1015fa4
 1015f80:	lea    r8,[rsp+0x28]
 1015f85:	mov    edx,DWORD PTR [r15]
 1015f88:	lea    rcx,[rsp+0x38]
 1015f8d:	call   0x1013e70
 1015f92:	test   eax,eax
 1015f94:	js     0x1015fa4
 1015f96:	mov    rax,QWORD PTR [rsp+0x28]
 1015f9b:	mov    QWORD PTR [r15+0x10],rax
 1015f9f:	mov    ebp,0x1
 1015fa4:	lea    rcx,[rsp+0x38]
 1015fa9:	call   QWORD PTR [rip+0xfffffffffffeb5e1]        # 0x1001590
 1015faf:	test   ebp,ebp
 1015fb1:	jne    0x1015fd0
 1015fb3:	lea    rax,[rsp+0x60]
 1015fb8:	mov    QWORD PTR [rsp+0x28],rax
 1015fbd:	mov    edx,0x1
 1015fc2:	lea    r8,[rsp+0x28]
 1015fc7:	mov    rcx,r13
 1015fca:	call   0x1016c50
 1015fcf:	nop
 1015fd0:	mov    rcx,QWORD PTR [rsp+0x20]
 1015fd5:	test   rcx,rcx
 1015fd8:	je     0x1015fe0
 1015fda:	mov    rdx,QWORD PTR [rcx]
 1015fdd:	call   QWORD PTR [rdx+0x10]
 1015fe0:	mov    eax,ebp
 1015fe2:	mov    rcx,QWORD PTR [rsp+0x160]
 1015fea:	xor    rcx,rsp
 1015fed:	call   0x100c0d0
 1015ff2:	add    rsp,0x178
 1015ff9:	pop    r15
 1015ffb:	pop    r14
 1015ffd:	pop    r13
 1015fff:	pop    r12
 1016001:	pop    rdi
 1016002:	pop    rsi
 1016003:	pop    rbp
 1016004:	pop    rbx
 1016005:	ret    
 1016006:	int3   
 1016007:	int3   
 1016008:	int3   
 1016009:	int3   
 101600a:	int3   
 101600b:	int3   
 101600c:	int3   
 101600d:	int3   
 101600e:	int3   
 101600f:	int3   
 1016010:	rex push rbx
 1016012:	push   rbp
 1016013:	push   rsi
 1016014:	push   rdi
 1016015:	push   r12
 1016017:	push   r13
 1016019:	push   r14
 101601b:	push   r15
 101601d:	sub    rsp,0x178
 1016024:	mov    QWORD PTR [rsp+0x50],0xfffffffffffffffe
 101602d:	mov    rax,QWORD PTR [rip+0xe62c]        # 0x1024660
 1016034:	xor    rax,rsp
 1016037:	mov    QWORD PTR [rsp+0x160],rax
 101603f:	mov    r15,r9
 1016042:	mov    rbx,rdx
 1016045:	mov    r13,rcx
 1016048:	xor    ebp,ebp
 101604a:	mov    QWORD PTR [rsp+0x20],rbp
 101604f:	mov    rax,QWORD PTR [r8]
 1016052:	lea    rdx,[rsp+0x20]
 1016057:	mov    rcx,r8
 101605a:	call   QWORD PTR [rax+0x88]
 1016060:	test   eax,eax
 1016062:	js     0x1016173
 1016068:	mov    rdx,QWORD PTR [rsp+0x20]
 101606d:	test   rdx,rdx
 1016070:	je     0x1016173
 1016076:	mov    r9d,0x80
 101607c:	lea    r8,[rsp+0x60]
 1016081:	lea    rcx,[rip+0xfffffffffffee3a0]        # 0x1004428
 1016088:	call   0x1013c80
 101608d:	test   eax,eax
 101608f:	je     0x1016173
 1016095:	movzx  r14d,WORD PTR [rbx+0x20]
 101609a:	mov    r12,QWORD PTR [rbx+0x28]
 101609e:	mov    edi,ebp
 10160a0:	movzx  esi,bp
 10160a3:	movzx  eax,si
 10160a6:	cmp    eax,r14d
 10160a9:	jae    0x10160db
 10160ab:	movzx  ebx,si
 10160ae:	imul   rbx,rbx,0x38
 10160b2:	add    rbx,r12
 10160b5:	call   0x100ad20
 10160ba:	mov    r8,rax
 10160bd:	lea    rdx,[rsp+0x60]
 10160c2:	mov    rcx,QWORD PTR [rbx+0x8]
 10160c6:	call   0x100c102
 10160cb:	test   eax,eax
 10160cd:	cmove  rdi,rbx
 10160d1:	inc    si
 10160d4:	test   rdi,rdi
 10160d7:	je     0x10160a3
 10160d9:	jmp    0x10160e4
 10160db:	test   rdi,rdi
 10160de:	je     0x1016173
 10160e4:	mov    rax,QWORD PTR [rdi]
 10160e7:	mov    QWORD PTR [r15],rax
 10160ea:	mov    rax,QWORD PTR [rdi+0x8]
 10160ee:	mov    QWORD PTR [r15+0x8],rax
 10160f2:	mov    rax,QWORD PTR [rdi+0x10]
 10160f6:	mov    QWORD PTR [r15+0x10],rax
 10160fa:	mov    rax,QWORD PTR [rdi+0x18]
 10160fe:	mov    QWORD PTR [r15+0x18],rax
 1016102:	mov    rax,QWORD PTR [rdi+0x20]
 1016106:	mov    QWORD PTR [r15+0x20],rax
 101610a:	mov    rax,QWORD PTR [rdi+0x28]
 101610e:	mov    QWORD PTR [r15+0x28],rax
 1016112:	mov    rax,QWORD PTR [rdi+0x30]
 1016116:	mov    QWORD PTR [r15+0x30],rax
 101611a:	lea    rcx,[rsp+0x38]
 101611f:	call   QWORD PTR [rip+0xfffffffffffeb473]        # 0x1001598
 1016125:	nop
 1016126:	lea    r8,[rsp+0x38]
 101612b:	mov    rdx,QWORD PTR [rsp+0x20]
 1016130:	lea    rcx,[rip+0xfffffffffffef251]        # 0x1005388
 1016137:	call   0x1013dc0
 101613c:	test   eax,eax
 101613e:	je     0x1016164
 1016140:	lea    r8,[rsp+0x28]
 1016145:	mov    edx,DWORD PTR [r15]
 1016148:	lea    rcx,[rsp+0x38]
 101614d:	call   0x1013e70
 1016152:	test   eax,eax
 1016154:	js     0x1016164
 1016156:	mov    rax,QWORD PTR [rsp+0x28]
 101615b:	mov    QWORD PTR [r15+0x10],rax
 101615f:	mov    ebp,0x1
 1016164:	lea    rcx,[rsp+0x38]
 1016169:	call   QWORD PTR [rip+0xfffffffffffeb421]        # 0x1001590
 101616f:	test   ebp,ebp
 1016171:	jne    0x1016190
 1016173:	lea    rax,[rsp+0x60]
 1016178:	mov    QWORD PTR [rsp+0x28],rax
 101617d:	mov    edx,0x1
 1016182:	lea    r8,[rsp+0x28]
 1016187:	mov    rcx,r13
 101618a:	call   0x1016c50
 101618f:	nop
 1016190:	mov    rcx,QWORD PTR [rsp+0x20]
 1016195:	test   rcx,rcx
 1016198:	je     0x10161a0
 101619a:	mov    rdx,QWORD PTR [rcx]
 101619d:	call   QWORD PTR [rdx+0x10]
 10161a0:	mov    eax,ebp
 10161a2:	mov    rcx,QWORD PTR [rsp+0x160]
 10161aa:	xor    rcx,rsp
 10161ad:	call   0x100c0d0
 10161b2:	add    rsp,0x178
 10161b9:	pop    r15
 10161bb:	pop    r14
 10161bd:	pop    r13
 10161bf:	pop    r12
 10161c1:	pop    rdi
 10161c2:	pop    rsi
 10161c3:	pop    rbp
 10161c4:	pop    rbx
 10161c5:	ret    
 10161c6:	int3   
 10161c7:	int3   
 10161c8:	int3   
 10161c9:	int3   
 10161ca:	int3   
 10161cb:	int3   
 10161cc:	int3   
 10161cd:	int3   
 10161ce:	int3   
 10161cf:	int3   
 10161d0:	xchg   ax,ax
 10161d2:	mov    edx,DWORD PTR [rcx]
 10161d4:	lea    r8d,[rdx+0x1]
 10161d8:	test   edx,edx
 10161da:	js     0x10161ed
 10161dc:	or     r8d,0x80000000
 10161e3:	mov    eax,edx
 10161e5:	lock cmpxchg DWORD PTR [rcx],r8d
 10161ea:	mov    r8d,eax
 10161ed:	pause  
 10161ef:	cmp    r8d,edx
 10161f2:	jne    0x10161d2
 10161f4:	xor    eax,eax
 10161f6:	test   r8d,r8d
 10161f9:	sete   al
 10161fc:	ret    
 10161fd:	int3   
 10161fe:	int3   
 10161ff:	int3   
 1016200:	int3   
 1016201:	int3   
 1016202:	int3   
 1016203:	int3   
 1016204:	int3   
 1016205:	int3   
 1016206:	int3   
 1016207:	int3   
 1016208:	int3   
 1016209:	int3   
 101620a:	int3   
 101620b:	int3   
 101620c:	int3   
 101620d:	int3   
 101620e:	int3   
 101620f:	int3   
 1016210:	prefetchw BYTE PTR [rcx]
 1016213:	data16 data16 data16 data16 nop WORD PTR [rax+rax*1+0x0]
 1016220:	mov    eax,DWORD PTR [rcx]
 1016222:	mov    edx,eax
 1016224:	btr    edx,0x1f
 1016228:	lock cmpxchg DWORD PTR [rcx],edx
 101622c:	pause  
 101622e:	jne    0x1016220
 1016230:	repz ret 
 1016232:	int3   
 1016233:	int3   
 1016234:	int3   
 1016235:	int3   
 1016236:	int3   
 1016237:	int3   
 1016238:	int3   
 1016239:	int3   
 101623a:	int3   
 101623b:	int3   
 101623c:	int3   
 101623d:	int3   
 101623e:	int3   
 101623f:	int3   
 1016240:	mov    edx,DWORD PTR [rcx]
 1016242:	mov    eax,edx
 1016244:	btr    eax,0x1f
 1016248:	cmp    eax,0x1
 101624b:	ja     0x1016255
 101624d:	cmp    edx,0x1
 1016250:	je     0x1016255
 1016252:	xor    eax,eax
 1016254:	ret    
 1016255:	mov    eax,0x1
 101625a:	ret    
 101625b:	int3   
 101625c:	int3   
 101625d:	int3   
 101625e:	int3   
 101625f:	int3   
 1016260:	int3   
 1016261:	int3   
 1016262:	int3   
 1016263:	int3   
 1016264:	int3   
 1016265:	int3   
 1016266:	int3   
 1016267:	int3   
 1016268:	int3   
 1016269:	int3   
 101626a:	int3   
 101626b:	int3   
 101626c:	int3   
 101626d:	int3   
 101626e:	int3   
 101626f:	int3   
 1016270:	xchg   ax,ax
 1016272:	mov    edx,DWORD PTR [rcx]
 1016274:	lea    r8d,[rdx-0x1]
 1016278:	test   edx,edx
 101627a:	js     0x101628d
 101627c:	or     r8d,0x80000000
 1016283:	mov    eax,edx
 1016285:	lock cmpxchg DWORD PTR [rcx],r8d
 101628a:	mov    r8d,eax
 101628d:	pause  
 101628f:	cmp    r8d,edx
 1016292:	jne    0x1016272
 1016294:	xor    eax,eax
 1016296:	cmp    r8d,0x1
 101629a:	sete   al
 101629d:	ret    
 101629e:	int3   
 101629f:	int3   
 10162a0:	int3   
 10162a1:	int3   
 10162a2:	int3   
 10162a3:	int3   
 10162a4:	int3   
 10162a5:	int3   
 10162a6:	int3   
 10162a7:	int3   
 10162a8:	int3   
 10162a9:	int3   
 10162aa:	int3   
 10162ab:	int3   
 10162ac:	int3   
 10162ad:	int3   
 10162ae:	int3   
 10162af:	int3   
 10162b0:	prefetchw BYTE PTR [rcx]
 10162b3:	data16 data16 data16 data16 nop WORD PTR [rax+rax*1+0x0]
 10162c0:	mov    eax,DWORD PTR [rcx]
 10162c2:	mov    edx,eax
 10162c4:	btr    edx,0x1f
 10162c8:	lock cmpxchg DWORD PTR [rcx],edx
 10162cc:	pause  
 10162ce:	jne    0x10162c0
 10162d0:	repz ret 
 10162d2:	int3   
 10162d3:	int3   
 10162d4:	int3   
 10162d5:	int3   
 10162d6:	int3   
 10162d7:	int3   
 10162d8:	int3   
 10162d9:	int3   
 10162da:	int3   
 10162db:	int3   
 10162dc:	int3   
 10162dd:	int3   
 10162de:	int3   
 10162df:	int3   
 10162e0:	cmp    QWORD PTR [rip+0x16110],0x0        # 0x102c3f8
 10162e8:	je     0x1016304
 10162ea:	cmp    QWORD PTR [rip+0x162c6],0x0        # 0x102c5b8
 10162f2:	je     0x1016304
 10162f4:	cmp    QWORD PTR [rip+0x1645c],0x0        # 0x102c758
 10162fc:	je     0x1016304
 10162fe:	mov    eax,0x1
 1016303:	ret    
 1016304:	xor    eax,eax
 1016306:	ret    
 1016307:	int3   
 1016308:	int3   
 1016309:	int3   
 101630a:	int3   
 101630b:	int3   
 101630c:	int3   
 101630d:	int3   
 101630e:	int3   
 101630f:	int3   
 1016310:	sub    rsp,0x68
 1016314:	data16 data16 data16 nop WORD PTR [rax+rax*1+0x0]
 1016320:	mov    edx,DWORD PTR [rip+0x160ba]        # 0x102c3e0
 1016326:	lea    ecx,[rdx+0x1]
 1016329:	test   edx,edx
 101632b:	js     0x101633f
 101632d:	or     ecx,0x80000000
 1016333:	mov    eax,edx
 1016335:	lock cmpxchg DWORD PTR [rip+0x160a3],ecx        # 0x102c3e0
 101633d:	mov    ecx,eax
 101633f:	pause  
 1016341:	cmp    ecx,edx
 1016343:	jne    0x1016320
 1016345:	test   ecx,ecx
 1016347:	jne    0x1016460
 101634d:	mov    ecx,0xa
 1016352:	lea    rax,[rsp+0x78]
 1016357:	mov    QWORD PTR [rsp+0x78],0x0
 1016360:	mov    QWORD PTR [rsp+0x30],rax
 1016365:	lea    rax,[rsp+0x80]
 101636d:	mov    QWORD PTR [rsp+0x80],0x0
 1016379:	mov    QWORD PTR [rsp+0x40],rax
 101637e:	lea    rax,[rsp+0x88]
 1016386:	mov    QWORD PTR [rsp+0x88],0x0
 1016392:	mov    DWORD PTR [rsp+0x20],0x38
 101639a:	mov    DWORD PTR [rsp+0x24],0xa000a
 10163a2:	mov    WORD PTR [rsp+0x28],cx
 10163a7:	mov    QWORD PTR [rsp+0x50],rax
 10163ac:	mov    WORD PTR [rsp+0x38],cx
 10163b1:	mov    WORD PTR [rsp+0x48],cx
 10163b6:	call   0x1016590
 10163bb:	lea    rdx,[rip+0xfffffffffffef0fe]        # 0x10054c0
 10163c2:	mov    rcx,rax
 10163c5:	call   QWORD PTR [rip+0xfffffffffffeaec5]        # 0x1001290
 10163cb:	test   rax,rax
 10163ce:	je     0x1016460
 10163d4:	lea    rcx,[rsp+0x20]
 10163d9:	xor    edx,edx
 10163db:	call   rax
 10163dd:	xor    ecx,ecx
 10163df:	test   eax,eax
 10163e1:	sete   cl
 10163e4:	test   ecx,ecx
 10163e6:	je     0x1016460
 10163e8:	mov    rdx,QWORD PTR [rsp+0x78]
 10163ed:	lea    rcx,[rip+0x15ffc]        # 0x102c3f0
 10163f4:	mov    r8d,0x1b8
 10163fa:	call   0x101750c
 10163ff:	mov    rdx,QWORD PTR [rsp+0x80]
 1016407:	lea    rcx,[rip+0x161a2]        # 0x102c5b0
 101640e:	mov    r8d,0x1a0
 1016414:	call   0x101750c
 1016419:	mov    r11,QWORD PTR [rsp+0x88]
 1016421:	mov    rax,QWORD PTR [r11]
 1016424:	mov    QWORD PTR [rip+0x16325],rax        # 0x102c750
 101642b:	mov    rax,QWORD PTR [r11+0x8]
 101642f:	mov    QWORD PTR [rip+0x16322],rax        # 0x102c758
 1016436:	mov    rax,QWORD PTR [r11+0x10]
 101643a:	mov    QWORD PTR [rip+0x1631f],rax        # 0x102c760
 1016441:	mov    rax,QWORD PTR [r11+0x18]
 1016445:	mov    QWORD PTR [rip+0x1631c],rax        # 0x102c768
 101644c:	mov    rax,QWORD PTR [r11+0x20]
 1016450:	mov    QWORD PTR [rip+0x16319],rax        # 0x102c770
 1016457:	nop    WORD PTR [rax+rax*1+0x0]
 1016460:	mov    eax,DWORD PTR [rip+0x15f7a]        # 0x102c3e0
 1016466:	mov    ecx,eax
 1016468:	btr    ecx,0x1f
 101646c:	lock cmpxchg DWORD PTR [rip+0x15f6c],ecx        # 0x102c3e0
 1016474:	pause  
 1016476:	jne    0x1016460
 1016478:	cmp    QWORD PTR [rip+0x15f78],0x0        # 0x102c3f8
 1016480:	je     0x10164a0
 1016482:	cmp    QWORD PTR [rip+0x1612e],0x0        # 0x102c5b8
 101648a:	je     0x10164a0
 101648c:	cmp    QWORD PTR [rip+0x162c4],0x0        # 0x102c758
 1016494:	je     0x10164a0
 1016496:	mov    eax,0x1
 101649b:	add    rsp,0x68
 101649f:	ret    
 10164a0:	xor    eax,eax
 10164a2:	add    rsp,0x68
 10164a6:	ret    
 10164a7:	int3   
 10164a8:	int3   
 10164a9:	int3   
 10164aa:	int3   
 10164ab:	int3   
 10164ac:	int3   
 10164ad:	int3   
 10164ae:	int3   
 10164af:	int3   
 10164b0:	sub    rsp,0x28
 10164b4:	data16 data16 data16 nop WORD PTR [rax+rax*1+0x0]
 10164c0:	mov    edx,DWORD PTR [rip+0x15f1a]        # 0x102c3e0
 10164c6:	lea    ecx,[rdx-0x1]
 10164c9:	test   edx,edx
 10164cb:	js     0x10164df
 10164cd:	or     ecx,0x80000000
 10164d3:	mov    eax,edx
 10164d5:	lock cmpxchg DWORD PTR [rip+0x15f03],ecx        # 0x102c3e0
 10164dd:	mov    ecx,eax
 10164df:	pause  
 10164e1:	cmp    ecx,edx
 10164e3:	jne    0x10164c0
 10164e5:	cmp    ecx,0x1
 10164e8:	jne    0x1016562
 10164ea:	lea    rcx,[rip+0x15eff]        # 0x102c3f0
 10164f1:	lea    rdx,[rip+0xfffffffffffeefd8]        # 0x10054d0
 10164f8:	mov    r8d,0x1b8
 10164fe:	call   0x101750c
 1016503:	lea    rcx,[rip+0x160a6]        # 0x102c5b0
 101650a:	lea    rdx,[rip+0xfffffffffffef17f]        # 0x1005690
 1016511:	mov    r8d,0x1a0
 1016517:	call   0x101750c
 101651c:	mov    rax,QWORD PTR [rip+0xfffffffffffef315]        # 0x1005838
 1016523:	mov    r11,QWORD PTR [rip+0xfffffffffffef306]        # 0x1005830
 101652a:	mov    QWORD PTR [rip+0x16227],rax        # 0x102c758
 1016531:	mov    rax,QWORD PTR [rip+0xfffffffffffef308]        # 0x1005840
 1016538:	mov    QWORD PTR [rip+0x16211],r11        # 0x102c750
 101653f:	mov    QWORD PTR [rip+0x1621a],rax        # 0x102c760
 1016546:	mov    rax,QWORD PTR [rip+0xfffffffffffef2fb]        # 0x1005848
 101654d:	mov    QWORD PTR [rip+0x16214],rax        # 0x102c768
 1016554:	mov    rax,QWORD PTR [rip+0xfffffffffffef2f5]        # 0x1005850
 101655b:	mov    QWORD PTR [rip+0x1620e],rax        # 0x102c770
 1016562:	mov    eax,DWORD PTR [rip+0x15e78]        # 0x102c3e0
 1016568:	mov    ecx,eax
 101656a:	btr    ecx,0x1f
 101656e:	lock cmpxchg DWORD PTR [rip+0x15e6a],ecx        # 0x102c3e0
 1016576:	pause  
 1016578:	jne    0x1016562
 101657a:	add    rsp,0x28
 101657e:	ret    
 101657f:	int3   
 1016580:	int3   
 1016581:	int3   
 1016582:	int3   
 1016583:	int3   
 1016584:	int3   
 1016585:	int3   
 1016586:	int3   
 1016587:	int3   
 1016588:	int3   
 1016589:	int3   
 101658a:	int3   
 101658b:	int3   
 101658c:	int3   
 101658d:	int3   
 101658e:	int3   
 101658f:	int3   
 1016590:	mov    QWORD PTR [rsp+0x8],rbx
 1016595:	mov    QWORD PTR [rsp+0x10],rbp
 101659a:	mov    QWORD PTR [rsp+0x18],rsi
 101659f:	push   rdi
 10165a0:	sub    rsp,0x480
 10165a7:	mov    rax,QWORD PTR [rip+0xe0b2]        # 0x1024660
 10165ae:	xor    rax,rsp
 10165b1:	mov    QWORD PTR [rsp+0x470],rax
 10165b9:	xor    ebp,ebp
 10165bb:	lea    rax,[rip+0xfffffffffffec1c6]        # 0x1002788
 10165c2:	lea    rdi,[rsp+0x20]
 10165c7:	mov    QWORD PTR [rsp+0x28],rax
 10165cc:	mov    QWORD PTR [rsp+0x20],rbp
 10165d1:	mov    ebx,ebp
 10165d3:	mov    rcx,QWORD PTR [rdi]
 10165d6:	call   QWORD PTR [rip+0xfffffffffffeab94]        # 0x1001170
 10165dc:	mov    rsi,rax
 10165df:	test   rax,rax
 10165e2:	je     0x10165f9
 10165e4:	lea    rdx,[rip+0xfffffffffffeeed5]        # 0x10054c0
 10165eb:	mov    rcx,rax
 10165ee:	call   QWORD PTR [rip+0xfffffffffffeac9c]        # 0x1001290
 10165f4:	test   rax,rax
 10165f7:	jne    0x101665a
 10165f9:	inc    ebx
 10165fb:	add    rdi,0x8
 10165ff:	cmp    ebx,0x2
 1016602:	jb     0x10165d3
 1016604:	xor    edx,edx
 1016606:	lea    ecx,[rdx+0x8]
 1016609:	call   0x10174b8
 101660e:	mov    rbx,rax
 1016611:	cmp    rax,0xffffffffffffffff
 1016615:	je     0x101666d
 1016617:	lea    rdx,[rsp+0x30]
 101661c:	mov    rcx,rax
 101661f:	mov    DWORD PTR [rsp+0x30],0x438
 1016627:	call   0x10174c4
 101662c:	test   eax,eax
 101662e:	je     0x1016664
 1016630:	mov    rcx,QWORD PTR [rsp+0x58]
 1016635:	lea    rdx,[rip+0xfffffffffffeee84]        # 0x10054c0
 101663c:	call   QWORD PTR [rip+0xfffffffffffeac4e]        # 0x1001290
 1016642:	test   rax,rax
 1016645:	jne    0x101665f
 1016647:	lea    rdx,[rsp+0x30]
 101664c:	mov    rcx,rbx
 101664f:	call   0x10174c4
 1016654:	test   eax,eax
 1016656:	jne    0x1016630
 1016658:	jmp    0x1016664
 101665a:	mov    rax,rsi
 101665d:	jmp    0x1016670
 101665f:	mov    rbp,QWORD PTR [rsp+0x58]
 1016664:	mov    rcx,rbx
 1016667:	call   QWORD PTR [rip+0xfffffffffffeab2b]        # 0x1001198
 101666d:	mov    rax,rbp
 1016670:	mov    rcx,QWORD PTR [rsp+0x470]
 1016678:	xor    rcx,rsp
 101667b:	call   0x100c0d0
 1016680:	lea    r11,[rsp+0x480]
 1016688:	mov    rbx,QWORD PTR [r11+0x10]
 101668c:	mov    rbp,QWORD PTR [r11+0x18]
 1016690:	mov    rsi,QWORD PTR [r11+0x20]
 1016694:	mov    rsp,r11
 1016697:	pop    rdi
 1016698:	ret    
 1016699:	int3   
 101669a:	int3   
 101669b:	int3   
 101669c:	int3   
 101669d:	int3   
 101669e:	int3   
 101669f:	int3   
 10166a0:	mov    QWORD PTR [rcx],rdx
 10166a3:	mov    rax,rcx
 10166a6:	ret    
 10166a7:	int3   
 10166a8:	int3   
 10166a9:	int3   
 10166aa:	int3   
 10166ab:	int3   
 10166ac:	int3   
 10166ad:	int3   
 10166ae:	int3   
 10166af:	int3   
 10166b0:	sub    rsp,0x28
 10166b4:	mov    rcx,QWORD PTR [rcx]
 10166b7:	test   rcx,rcx
 10166ba:	je     0x10166c2
 10166bc:	call   QWORD PTR [rip+0x15e5e]        # 0x102c520
 10166c2:	add    rsp,0x28
 10166c6:	ret    
 10166c7:	int3   
 10166c8:	int3   
 10166c9:	int3   
 10166ca:	int3   
 10166cb:	int3   
 10166cc:	int3   
 10166cd:	int3   
 10166ce:	int3   
 10166cf:	int3   
 10166d0:	mov    rax,QWORD PTR [rcx]
 10166d3:	ret    
 10166d4:	int3   
 10166d5:	int3   
 10166d6:	int3   
 10166d7:	int3   
 10166d8:	int3   
 10166d9:	int3   
 10166da:	int3   
 10166db:	int3   
 10166dc:	int3   
 10166dd:	int3   
 10166de:	int3   
 10166df:	int3   
 10166e0:	mov    rax,rcx
 10166e3:	ret    
 10166e4:	int3   
 10166e5:	int3   
 10166e6:	int3   
 10166e7:	int3   
 10166e8:	int3   
 10166e9:	int3   
 10166ea:	int3   
 10166eb:	int3   
 10166ec:	int3   
 10166ed:	int3   
 10166ee:	int3   
 10166ef:	int3   
 10166f0:	mov    rax,QWORD PTR [rcx]
 10166f3:	mov    QWORD PTR [rcx],0x0
 10166fa:	ret    
 10166fb:	int3   
 10166fc:	int3   
 10166fd:	int3   
 10166fe:	int3   
 10166ff:	int3   
 1016700:	int3   
 1016701:	int3   
 1016702:	int3   
 1016703:	int3   
 1016704:	int3   
 1016705:	int3   
 1016706:	int3   
 1016707:	int3   
 1016708:	int3   
 1016709:	int3   
 101670a:	int3   
 101670b:	int3   
 101670c:	int3   
 101670d:	int3   
 101670e:	int3   
 101670f:	int3   
 1016710:	xor    eax,eax
 1016712:	mov    QWORD PTR [rcx],rax
 1016715:	mov    QWORD PTR [rcx+0x8],rax
 1016719:	mov    QWORD PTR [rcx+0x10],rax
 101671d:	mov    QWORD PTR [rcx+0x18],rax
 1016721:	mov    rax,rcx
 1016724:	ret    
 1016725:	int3   
 1016726:	int3   
 1016727:	int3   
 1016728:	int3   
 1016729:	int3   
 101672a:	int3   
 101672b:	int3   
 101672c:	int3   
 101672d:	int3   
 101672e:	int3   
 101672f:	int3   
 1016730:	jmp    0x10167d0
 1016735:	int3   
 1016736:	int3   
 1016737:	int3   
 1016738:	int3   
 1016739:	int3   
 101673a:	int3   
 101673b:	int3   
 101673c:	int3   
 101673d:	int3   
 101673e:	int3   
 101673f:	int3   
 1016740:	mov    QWORD PTR [rsp+0x8],rbx
 1016745:	mov    QWORD PTR [rsp+0x10],rsi
 101674a:	push   rdi
 101674b:	sub    rsp,0x20
 101674f:	mov    rbx,rcx
 1016752:	mov    rcx,rdx
 1016755:	mov    rdi,rdx
 1016758:	xor    esi,esi
 101675a:	call   QWORD PTR [rip+0x15db8]        # 0x102c518
 1016760:	cmp    eax,0xffffffff
 1016763:	je     0x101678b
 1016765:	mov    rdx,rbx
 1016768:	xor    ecx,ecx
 101676a:	mov    QWORD PTR [rbx+0x8],rdi
 101676e:	call   QWORD PTR [rip+0x15cb4]        # 0x102c428
 1016774:	test   eax,eax
 1016776:	je     0x101678b
 1016778:	lea    eax,[rsi+0x1]
 101677b:	mov    rbx,QWORD PTR [rsp+0x30]
 1016780:	mov    rsi,QWORD PTR [rsp+0x38]
 1016785:	add    rsp,0x20
 1016789:	pop    rdi
 101678a:	ret    
 101678b:	mov    rcx,QWORD PTR [rbx]
 101678e:	test   rcx,rcx
 1016791:	je     0x1016799
 1016793:	call   QWORD PTR [rip+0x15ca7]        # 0x102c440
 1016799:	mov    rcx,QWORD PTR [rbx+0x8]
 101679d:	test   rcx,rcx
 10167a0:	je     0x10167a8
 10167a2:	call   QWORD PTR [rip+0x15d78]        # 0x102c520
 10167a8:	mov    QWORD PTR [rbx],rsi
 10167ab:	mov    QWORD PTR [rbx+0x8],rsi
 10167af:	mov    QWORD PTR [rbx+0x10],rsi
 10167b3:	mov    QWORD PTR [rbx+0x18],rsi
 10167b7:	mov    rbx,QWORD PTR [rsp+0x30]
 10167bc:	mov    eax,esi
 10167be:	mov    rsi,QWORD PTR [rsp+0x38]
 10167c3:	add    rsp,0x20
 10167c7:	pop    rdi
 10167c8:	ret    
 10167c9:	int3   
 10167ca:	int3   
 10167cb:	int3   
 10167cc:	int3   
 10167cd:	int3   
 10167ce:	int3   
 10167cf:	int3   
 10167d0:	mov    QWORD PTR [rsp+0x8],rbx
 10167d5:	mov    QWORD PTR [rsp+0x10],rbp
 10167da:	mov    QWORD PTR [rsp+0x18],rsi
 10167df:	push   rdi
 10167e0:	sub    rsp,0x20
 10167e4:	xor    ebp,ebp
 10167e6:	mov    rbx,rcx
 10167e9:	mov    rcx,QWORD PTR [rcx]
 10167ec:	mov    esi,0x1
 10167f1:	mov    edi,ebp
 10167f3:	test   rcx,rcx
 10167f6:	je     0x1016800
 10167f8:	call   QWORD PTR [rip+0x15c42]        # 0x102c440
 10167fe:	mov    esi,eax
 1016800:	mov    rcx,QWORD PTR [rbx+0x8]
 1016804:	test   rcx,rcx
 1016807:	je     0x1016811
 1016809:	call   QWORD PTR [rip+0x15d11]        # 0x102c520
 101680f:	mov    edi,eax
 1016811:	mov    QWORD PTR [rbx],rbp
 1016814:	mov    QWORD PTR [rbx+0x8],rbp
 1016818:	mov    QWORD PTR [rbx+0x10],rbp
 101681c:	mov    QWORD PTR [rbx+0x18],rbp
 1016820:	test   esi,esi
 1016822:	je     0x101682e
 1016824:	mov    eax,0x1
 1016829:	cmp    edi,0xffffffff
 101682c:	jne    0x1016830
 101682e:	mov    eax,ebp
 1016830:	mov    rbx,QWORD PTR [rsp+0x30]
 1016835:	mov    rbp,QWORD PTR [rsp+0x38]
 101683a:	mov    rsi,QWORD PTR [rsp+0x40]
 101683f:	add    rsp,0x20
 1016843:	pop    rdi
 1016844:	ret    
 1016845:	int3   
 1016846:	int3   
 1016847:	int3   
 1016848:	int3   
 1016849:	int3   
 101684a:	int3   
 101684b:	int3   
 101684c:	int3   
 101684d:	int3   
 101684e:	int3   
 101684f:	int3   
 1016850:	mov    QWORD PTR [rsp+0x8],rbx
 1016855:	mov    QWORD PTR [rsp+0x10],rsi
 101685a:	push   rdi
 101685b:	sub    rsp,0x20
 101685f:	mov    rbx,rdx
 1016862:	mov    rdi,rcx
 1016865:	lea    rdx,[rcx+0x10]
 1016869:	mov    rcx,QWORD PTR [rcx]
 101686c:	call   QWORD PTR [rip+0x15bc6]        # 0x102c438
 1016872:	test   eax,eax
 1016874:	je     0x10168c9
 1016876:	mov    rdx,QWORD PTR [rdi+0x10]
 101687a:	test   rdx,rdx
 101687d:	je     0x10168ad
 101687f:	mov    rcx,QWORD PTR [rdi+0x8]
 1016883:	lea    r8,[rdi+0x18]
 1016887:	call   QWORD PTR [rip+0x15bc3]        # 0x102c450
 101688d:	test   eax,eax
 101688f:	je     0x10168c9
 1016891:	mov    rax,QWORD PTR [rdi+0x18]
 1016895:	mov    QWORD PTR [rbx],rax
 1016898:	mov    eax,0x1
 101689d:	mov    rbx,QWORD PTR [rsp+0x30]
 10168a2:	mov    rsi,QWORD PTR [rsp+0x38]
 10168a7:	add    rsp,0x20
 10168ab:	pop    rdi
 10168ac:	ret    
 10168ad:	mov    QWORD PTR [rbx],0x0
 10168b4:	mov    eax,0x1
 10168b9:	mov    rbx,QWORD PTR [rsp+0x30]
 10168be:	mov    rsi,QWORD PTR [rsp+0x38]
 10168c3:	add    rsp,0x20
 10168c7:	pop    rdi
 10168c8:	ret    
 10168c9:	mov    rbx,QWORD PTR [rsp+0x30]
 10168ce:	mov    rsi,QWORD PTR [rsp+0x38]
 10168d3:	xor    eax,eax
 10168d5:	add    rsp,0x20
 10168d9:	pop    rdi
 10168da:	ret    
 10168db:	int3   
 10168dc:	int3   
 10168dd:	int3   
 10168de:	int3   
 10168df:	int3   
 10168e0:	int3   
 10168e1:	int3   
 10168e2:	int3   
 10168e3:	int3   
 10168e4:	int3   
 10168e5:	int3   
 10168e6:	int3   
 10168e7:	int3   
 10168e8:	int3   
 10168e9:	int3   
 10168ea:	int3   
 10168eb:	int3   
 10168ec:	int3   
 10168ed:	int3   
 10168ee:	int3   
 10168ef:	int3   
 10168f0:	mov    QWORD PTR [rcx],rdx
 10168f3:	mov    DWORD PTR [rcx+0x8],0x0
 10168fa:	mov    rax,rcx
 10168fd:	ret    
 10168fe:	int3   
 10168ff:	int3   
 1016900:	int3   
 1016901:	int3   
 1016902:	int3   
 1016903:	int3   
 1016904:	int3   
 1016905:	int3   
 1016906:	int3   
 1016907:	int3   
 1016908:	int3   
 1016909:	int3   
 101690a:	int3   
 101690b:	int3   
 101690c:	int3   
 101690d:	int3   
 101690e:	int3   
 101690f:	int3   
 1016910:	rex push rbx
 1016912:	sub    rsp,0x20
 1016916:	mov    rbx,rcx
 1016919:	mov    rcx,QWORD PTR [rcx]
 101691c:	call   QWORD PTR [rip+0x15d1e]        # 0x102c640
 1016922:	xor    edx,edx
 1016924:	test   eax,eax
 1016926:	sete   dl
 1016929:	mov    DWORD PTR [rbx+0x8],edx
 101692c:	add    rsp,0x20
 1016930:	pop    rbx
 1016931:	ret    
 1016932:	int3   
 1016933:	int3   
 1016934:	int3   
 1016935:	int3   
 1016936:	int3   
 1016937:	int3   
 1016938:	int3   
 1016939:	int3   
 101693a:	int3   
 101693b:	int3   
 101693c:	int3   
 101693d:	int3   
 101693e:	int3   
 101693f:	int3   
 1016940:	sub    rsp,0x28
 1016944:	cmp    DWORD PTR [rcx+0x8],0x0
 1016948:	je     0x1016953
 101694a:	mov    rcx,QWORD PTR [rcx]
 101694d:	call   QWORD PTR [rip+0x15cf5]        # 0x102c648
 1016953:	add    rsp,0x28
 1016957:	ret    
 1016958:	int3   
 1016959:	int3   
 101695a:	int3   
 101695b:	int3   
 101695c:	int3   
 101695d:	int3   
 101695e:	int3   
 101695f:	int3   
 1016960:	mov    eax,ecx
 1016962:	xor    eax,edx
 1016964:	test   eax,0xffffc00
 1016969:	jne    0x1016986
 101696b:	mov    eax,ecx
 101696d:	xor    eax,edx
 101696f:	test   eax,0x3ff
 1016974:	jne    0x1016986
 1016976:	xor    ecx,edx
 1016978:	test   ecx,0xf0000000
 101697e:	jne    0x1016986
 1016980:	mov    eax,0x1
 1016985:	ret    
 1016986:	xor    eax,eax
 1016988:	ret    
 1016989:	int3   
 101698a:	int3   
 101698b:	int3   
 101698c:	int3   
 101698d:	int3   
 101698e:	int3   
 101698f:	int3   
 1016990:	sub    rsp,0x28
 1016994:	mov    QWORD PTR [rsp+0x30],rcx
 1016999:	lea    rcx,[rsp+0x30]
 101699e:	call   0x1016ea0
 10169a3:	add    rsp,0x28
 10169a7:	ret    
 10169a8:	int3   
 10169a9:	int3   
 10169aa:	int3   
 10169ab:	int3   
 10169ac:	int3   
 10169ad:	int3   
 10169ae:	int3   
 10169af:	int3   
 10169b0:	xor    eax,eax
 10169b2:	mov    DWORD PTR [rcx+0x8],0xffff
 10169b9:	mov    DWORD PTR [rcx],eax
 10169bb:	mov    WORD PTR [rcx+0x4],ax
 10169bf:	mov    QWORD PTR [rcx+0x10],rax
 10169c3:	mov    DWORD PTR [rcx+0x18],eax
 10169c6:	mov    rax,rcx
 10169c9:	ret    
 10169ca:	int3   
 10169cb:	int3   
 10169cc:	int3   
 10169cd:	int3   
 10169ce:	int3   
 10169cf:	int3   
 10169d0:	rex push rbx
 10169d2:	sub    rsp,0x20
 10169d6:	mov    rbx,rcx
 10169d9:	mov    rcx,QWORD PTR [rcx+0x10]
 10169dd:	test   rcx,rcx
 10169e0:	je     0x10169e8
 10169e2:	call   QWORD PTR [rip+0x15c18]        # 0x102c600
 10169e8:	mov    DWORD PTR [rbx+0x18],0x0
 10169ef:	add    rsp,0x20
 10169f3:	pop    rbx
 10169f4:	ret    
 10169f5:	int3   
 10169f6:	int3   
 10169f7:	int3   
 10169f8:	int3   
 10169f9:	int3   
 10169fa:	int3   
 10169fb:	int3   
 10169fc:	int3   
 10169fd:	int3   
 10169fe:	int3   
 10169ff:	int3   
 1016a00:	mov    QWORD PTR [rsp+0x8],rbx
 1016a05:	push   rdi
 1016a06:	sub    rsp,0x20
 1016a0a:	mov    WORD PTR [rcx],dx
 1016a0d:	movzx  edx,dx
 1016a10:	mov    rdi,rcx
 1016a13:	mov    rcx,0xffffffffffffffff
 1016a1a:	mov    eax,0x38
 1016a1f:	mul    rdx
 1016a22:	cmovo  rax,rcx
 1016a26:	xor    ecx,ecx
 1016a28:	mov    edx,eax
 1016a2a:	call   QWORD PTR [rip+0x15bc8]        # 0x102c5f8
 1016a30:	mov    rcx,QWORD PTR [rdi+0x8]
 1016a34:	mov    rbx,rax
 1016a37:	cmp    rcx,rax
 1016a3a:	je     0x1016a47
 1016a3c:	test   rcx,rcx
 1016a3f:	je     0x1016a47
 1016a41:	call   QWORD PTR [rip+0x15bb9]        # 0x102c600
 1016a47:	xor    eax,eax
 1016a49:	test   rbx,rbx
 1016a4c:	mov    QWORD PTR [rdi+0x8],rbx
 1016a50:	mov    rbx,QWORD PTR [rsp+0x30]
 1016a55:	setne  al
 1016a58:	add    rsp,0x20
 1016a5c:	pop    rdi
 1016a5d:	ret    
 1016a5e:	int3   
 1016a5f:	int3   
 1016a60:	int3   
 1016a61:	int3   
 1016a62:	int3   
 1016a63:	int3   
 1016a64:	int3   
 1016a65:	int3   
 1016a66:	int3   
 1016a67:	int3   
 1016a68:	int3   
 1016a69:	int3   
 1016a6a:	int3   
 1016a6b:	int3   
 1016a6c:	int3   
 1016a6d:	int3   
 1016a6e:	int3   
 1016a6f:	int3   
 1016a70:	mov    QWORD PTR [rsp+0x8],rcx
 1016a75:	push   rbx
 1016a76:	sub    rsp,0x30
 1016a7a:	mov    QWORD PTR [rsp+0x20],0xfffffffffffffffe
 1016a83:	lea    rbx,[rcx+0x8]
 1016a87:	mov    rdx,QWORD PTR [rbx]
 1016a8a:	movzx  ecx,WORD PTR [rcx]
 1016a8d:	call   0x1016af0
 1016a92:	nop
 1016a93:	mov    QWORD PTR [rsp+0x40],rbx
 1016a98:	mov    rcx,QWORD PTR [rbx]
 1016a9b:	test   rcx,rcx
 1016a9e:	je     0x1016aa6
 1016aa0:	call   QWORD PTR [rip+0x15b5a]        # 0x102c600
 1016aa6:	mov    QWORD PTR [rbx],0x0
 1016aad:	mov    rcx,QWORD PTR [rbx]
 1016ab0:	add    rsp,0x30
 1016ab4:	pop    rbx
 1016ab5:	jmp    0x100bccc
 1016aba:	int3   
 1016abb:	int3   
 1016abc:	int3   
 1016abd:	int3   
 1016abe:	int3   
 1016abf:	int3   
 1016ac0:	movzx  eax,dx
 1016ac3:	imul   rax,rax,0x38
 1016ac7:	add    rax,QWORD PTR [rcx+0x8]
 1016acb:	ret    
 1016acc:	int3   
 1016acd:	int3   
 1016ace:	int3   
 1016acf:	int3   
 1016ad0:	int3   
 1016ad1:	int3   
 1016ad2:	int3   
 1016ad3:	int3   
 1016ad4:	int3   
 1016ad5:	int3   
 1016ad6:	int3   
 1016ad7:	int3   
 1016ad8:	int3   
 1016ad9:	int3   
 1016ada:	int3   
 1016adb:	int3   
 1016adc:	int3   
 1016add:	int3   
 1016ade:	int3   
 1016adf:	int3   
 1016ae0:	mov    rax,QWORD PTR [rcx+0x8]
 1016ae4:	ret    
 1016ae5:	int3   
 1016ae6:	int3   
 1016ae7:	int3   
 1016ae8:	int3   
 1016ae9:	int3   
 1016aea:	int3   
 1016aeb:	int3   
 1016aec:	int3   
 1016aed:	int3   
 1016aee:	int3   
 1016aef:	int3   
 1016af0:	rex push rsi
 1016af2:	sub    rsp,0x20
 1016af6:	xor    esi,esi
 1016af8:	cmp    si,cx
 1016afb:	jae    0x1016bae
 1016b01:	mov    QWORD PTR [rsp+0x30],rbx
 1016b06:	mov    QWORD PTR [rsp+0x38],rdi
 1016b0b:	movzx  edi,cx
 1016b0e:	lea    rbx,[rdx+0x10]
 1016b12:	mov    eax,DWORD PTR [rbx-0x10]
 1016b15:	mov    ecx,eax
 1016b17:	and    ecx,0xffffc00
 1016b1d:	cmp    ecx,0x3c00
 1016b23:	jne    0x1016b3c
 1016b25:	test   eax,0x3ff
 1016b2a:	jne    0x1016b3c
 1016b2c:	mov    ecx,eax
 1016b2e:	and    ecx,0xf0000000
 1016b34:	cmp    ecx,0x60000000
 1016b3a:	je     0x1016b86
 1016b3c:	mov    ecx,eax
 1016b3e:	and    ecx,0xffffc00
 1016b44:	cmp    ecx,0x3800
 1016b4a:	jne    0x1016b63
 1016b4c:	test   eax,0x3ff
 1016b51:	jne    0x1016b63
 1016b53:	mov    ecx,eax
 1016b55:	and    ecx,0xf0000000
 1016b5b:	cmp    ecx,0x60000000
 1016b61:	je     0x1016b86
 1016b63:	mov    ecx,eax
 1016b65:	and    ecx,0xffffc00
 1016b6b:	cmp    ecx,0x4000
 1016b71:	jne    0x1016b97
 1016b73:	test   eax,0x3ff
 1016b78:	jne    0x1016b97
 1016b7a:	and    eax,0xf0000000
 1016b7f:	cmp    eax,0x60000000
 1016b84:	jne    0x1016b97
 1016b86:	mov    rcx,QWORD PTR [rbx]
 1016b89:	test   rcx,rcx
 1016b8c:	je     0x1016b94
 1016b8e:	call   QWORD PTR [rip+0x15a6c]        # 0x102c600
 1016b94:	mov    QWORD PTR [rbx],rsi
 1016b97:	add    rbx,0x38
 1016b9b:	dec    rdi
 1016b9e:	jne    0x1016b12
 1016ba4:	mov    rdi,QWORD PTR [rsp+0x38]
 1016ba9:	mov    rbx,QWORD PTR [rsp+0x30]
 1016bae:	add    rsp,0x20
 1016bb2:	pop    rsi
 1016bb3:	ret    
 1016bb4:	int3   
 1016bb5:	int3   
 1016bb6:	int3   
 1016bb7:	int3   
 1016bb8:	int3   
 1016bb9:	int3   
 1016bba:	int3   
 1016bbb:	int3   
 1016bbc:	int3   
 1016bbd:	int3   
 1016bbe:	int3   
 1016bbf:	int3   
 1016bc0:	mov    QWORD PTR [rsp+0x8],rcx
 1016bc5:	sub    rsp,0x18
 1016bc9:	mov    QWORD PTR [rsp],0xfffffffffffffffe
 1016bd1:	mov    DWORD PTR [rcx+0x8],0x1
 1016bd8:	lea    rax,[rip+0xfffffffffffee8a9]        # 0x1005488
 1016bdf:	mov    QWORD PTR [rcx],rax
 1016be2:	lea    rax,[rcx+0x28]
 1016be6:	mov    QWORD PTR [rsp+0x28],rax
 1016beb:	xor    edx,edx
 1016bed:	mov    QWORD PTR [rax],rdx
 1016bf0:	mov    WORD PTR [rcx+0x30],dx
 1016bf4:	xor    eax,eax
 1016bf6:	mov    QWORD PTR [rcx+0x10],rax
 1016bfa:	mov    QWORD PTR [rcx+0x18],rax
 1016bfe:	mov    QWORD PTR [rcx+0x20],rax
 1016c02:	mov    rax,rcx
 1016c05:	add    rsp,0x18
 1016c09:	ret    
 1016c0a:	int3   
 1016c0b:	int3   
 1016c0c:	int3   
 1016c0d:	int3   
 1016c0e:	int3   
 1016c0f:	int3   
 1016c10:	cmp    WORD PTR [rcx+0x12],0x0
 1016c15:	jne    0x1016c34
 1016c17:	cmp    WORD PTR [rcx+0x14],0x0
 1016c1c:	jne    0x1016c34
 1016c1e:	cmp    WORD PTR [rcx+0x16],0x0
 1016c23:	jne    0x1016c34
 1016c25:	xor    eax,eax
 1016c27:	mov    WORD PTR [rdx],ax
 1016c2a:	mov    QWORD PTR [r8],rax
 1016c2d:	rex.W jmp QWORD PTR [rip+0x1593c]        # 0x102c570
 1016c34:	movzx  eax,WORD PTR [rcx+0x30]
 1016c38:	mov    WORD PTR [rdx],ax
 1016c3b:	mov    rax,QWORD PTR [rcx+0x28]
 1016c3f:	mov    QWORD PTR [r8],rax
 1016c42:	lea    rax,[rcx+0x10]
 1016c46:	ret    
 1016c47:	int3   
 1016c48:	int3   
 1016c49:	int3   
 1016c4a:	int3   
 1016c4b:	int3   
 1016c4c:	int3   
 1016c4d:	int3   
 1016c4e:	int3   
 1016c4f:	int3   
 1016c50:	mov    QWORD PTR [rsp+0x10],rbx
 1016c55:	mov    QWORD PTR [rsp+0x18],rbp
 1016c5a:	push   rsi
 1016c5b:	push   rdi
 1016c5c:	push   r12
 1016c5e:	push   r13
 1016c60:	push   r14
 1016c62:	sub    rsp,0x30
 1016c66:	mov    r12,r8
 1016c69:	movzx  esi,dx
 1016c6c:	mov    rbp,rcx
 1016c6f:	call   QWORD PTR [rip+0x158fb]        # 0x102c570
 1016c75:	mov    r14,0xffffffffffffffff
 1016c7c:	mov    edi,esi
 1016c7e:	mov    r9,QWORD PTR [rax]
 1016c81:	mov    QWORD PTR [rbp+0x10],r9
 1016c85:	mov    r9,QWORD PTR [rax+0x8]
 1016c89:	mov    QWORD PTR [rbp+0x18],r9
 1016c8d:	mov    rax,QWORD PTR [rax+0x10]
 1016c91:	mov    WORD PTR [rbp+0x30],si
 1016c95:	mov    QWORD PTR [rbp+0x20],rax
 1016c99:	mov    eax,0x8
 1016c9e:	mul    rsi
 1016ca1:	cmovo  rax,r14
 1016ca5:	add    rax,0x8
 1016ca9:	cmovb  rax,r14
 1016cad:	xor    ecx,ecx
 1016caf:	mov    edx,eax
 1016cb1:	call   QWORD PTR [rip+0x15941]        # 0x102c5f8
 1016cb7:	xor    r13d,r13d
 1016cba:	test   rax,rax
 1016cbd:	je     0x1016ce9
 1016cbf:	lea    rbx,[rax+0x8]
 1016cc3:	mov    DWORD PTR [rax],edi
 1016cc5:	lea    rax,[rip+0xffffffffffffcba4]        # 0x1013870
 1016ccc:	lea    r9,[rip+0x3ad]        # 0x1017080
 1016cd3:	lea    edx,[r14+0x9]
 1016cd7:	mov    r8d,edi
 1016cda:	mov    rcx,rbx
 1016cdd:	mov    QWORD PTR [rsp+0x20],rax
 1016ce2:	call   0x101767c
 1016ce7:	jmp    0x1016cec
 1016ce9:	mov    rbx,r13
 1016cec:	mov    rcx,QWORD PTR [rbp+0x28]
 1016cf0:	cmp    rcx,rbx
 1016cf3:	je     0x1016cfa
 1016cf5:	call   0x1015db0
 1016cfa:	mov    QWORD PTR [rbp+0x28],rbx
 1016cfe:	test   rbx,rbx
 1016d01:	je     0x1016dd9
 1016d07:	movzx  eax,si
 1016d0a:	test   eax,eax
 1016d0c:	jle    0x1016dd9
 1016d12:	mov    QWORD PTR [rsp+0x60],r15
 1016d17:	mov    rdi,r13
 1016d1a:	mov    r15d,eax
 1016d1d:	nop    DWORD PTR [rax]
 1016d20:	mov    rax,QWORD PTR [rdi+r12*1]
 1016d24:	test   rax,rax
 1016d27:	je     0x1016d66
 1016d29:	mov    ecx,0x400
 1016d2e:	mov    edx,r13d
 1016d31:	cmp    WORD PTR [rax],dx
 1016d34:	je     0x1016d49
 1016d36:	add    rax,0x2
 1016d3a:	dec    rcx
 1016d3d:	jne    0x1016d31
 1016d3f:	mov    edx,0x80070057
 1016d44:	mov    rbx,r13
 1016d47:	jmp    0x1016d60
 1016d49:	test   rcx,rcx
 1016d4c:	jne    0x1016d58
 1016d4e:	mov    edx,0x80070057
 1016d53:	mov    rbx,r13
 1016d56:	jmp    0x1016d60
 1016d58:	mov    ebx,0x400
 1016d5d:	sub    rbx,rcx
 1016d60:	test   edx,edx
 1016d62:	jns    0x1016d72
 1016d64:	jmp    0x1016d6b
 1016d66:	mov    edx,0x80070057
 1016d6b:	mov    rbx,r13
 1016d6e:	test   edx,edx
 1016d70:	js     0x1016df0
 1016d72:	inc    rbx
 1016d75:	mov    eax,0x2
 1016d7a:	mul    rbx
 1016d7d:	cmovo  rax,r14
 1016d81:	xor    ecx,ecx
 1016d83:	mov    edx,eax
 1016d85:	call   QWORD PTR [rip+0x1586d]        # 0x102c5f8
 1016d8b:	mov    r14,QWORD PTR [rbp+0x28]
 1016d8f:	mov    rcx,QWORD PTR [r14+rdi*1]
 1016d93:	mov    rsi,rax
 1016d96:	cmp    rcx,rax
 1016d99:	je     0x1016da6
 1016d9b:	test   rcx,rcx
 1016d9e:	je     0x1016da6
 1016da0:	call   QWORD PTR [rip+0x1585a]        # 0x102c600
 1016da6:	mov    QWORD PTR [r14+rdi*1],rsi
 1016daa:	mov    rax,QWORD PTR [rbp+0x28]
 1016dae:	mov    rcx,QWORD PTR [rdi+rax*1]
 1016db2:	test   rcx,rcx
 1016db5:	je     0x1016dc3
 1016db7:	mov    r8,QWORD PTR [rdi+r12*1]
 1016dbb:	mov    rdx,rbx
 1016dbe:	call   0x100a890
 1016dc3:	or     r14,0xffffffffffffffff
 1016dc7:	add    rdi,0x8
 1016dcb:	dec    r15
 1016dce:	jne    0x1016d20
 1016dd4:	mov    r15,QWORD PTR [rsp+0x60]
 1016dd9:	mov    rbx,QWORD PTR [rsp+0x68]
 1016dde:	mov    rbp,QWORD PTR [rsp+0x70]
 1016de3:	add    rsp,0x30
 1016de7:	pop    r14
 1016de9:	pop    r13
 1016deb:	pop    r12
 1016ded:	pop    rdi
 1016dee:	pop    rsi
 1016def:	ret    
 1016df0:	mov    rbx,QWORD PTR [rbp+0x28]
 1016df4:	mov    rcx,QWORD PTR [rbx+rdi*1]
 1016df8:	test   rcx,rcx
 1016dfb:	je     0x1016e03
 1016dfd:	call   QWORD PTR [rip+0x157fd]        # 0x102c600
 1016e03:	mov    QWORD PTR [rbx+rdi*1],r13
 1016e07:	jmp    0x1016dc7
 1016e09:	int3   
 1016e0a:	int3   
 1016e0b:	int3   
 1016e0c:	int3   
 1016e0d:	int3   
 1016e0e:	int3   
 1016e0f:	int3   
 1016e10:	mov    rax,rsp
 1016e13:	push   rdi
 1016e14:	sub    rsp,0x40
 1016e18:	mov    QWORD PTR [rax-0x28],0xfffffffffffffffe
 1016e20:	mov    QWORD PTR [rax+0x8],rbx
 1016e24:	mov    QWORD PTR [rax+0x10],rsi
 1016e28:	mov    rsi,rdx
 1016e2b:	xor    edi,edi
 1016e2d:	mov    QWORD PTR [rax+0x18],rdi
 1016e31:	test   r8,r8
 1016e34:	je     0x1016e49
 1016e36:	mov    QWORD PTR [rax-0x20],rcx
 1016e3a:	mov    QWORD PTR [rax-0x18],r8
 1016e3e:	lea    rcx,[rax-0x20]
 1016e42:	call   0x1016f80
 1016e47:	jmp    0x1016e58
 1016e49:	mov    QWORD PTR [rsp+0x68],rcx
 1016e4e:	lea    rcx,[rsp+0x68]
 1016e53:	call   0x1016ea0
 1016e58:	mov    QWORD PTR [rsp+0x60],rax
 1016e5d:	mov    rbx,rax
 1016e60:	test   rax,rax
 1016e63:	je     0x1016e73
 1016e65:	mov    rdx,rsi
 1016e68:	mov    rcx,rax
 1016e6b:	call   QWORD PTR [rip+0x1572f]        # 0x102c5a0
 1016e71:	mov    edi,eax
 1016e73:	test   rbx,rbx
 1016e76:	je     0x1016e81
 1016e78:	mov    rcx,rbx
 1016e7b:	call   QWORD PTR [rip+0x1569f]        # 0x102c520
 1016e81:	mov    eax,edi
 1016e83:	mov    rbx,QWORD PTR [rsp+0x50]
 1016e88:	mov    rsi,QWORD PTR [rsp+0x58]
 1016e8d:	add    rsp,0x40
 1016e91:	pop    rdi
 1016e92:	ret    
 1016e93:	int3   
 1016e94:	int3   
 1016e95:	int3   
 1016e96:	int3   
 1016e97:	int3   
 1016e98:	int3   
 1016e99:	int3   
 1016e9a:	int3   
 1016e9b:	int3   
 1016e9c:	int3   
 1016e9d:	int3   
 1016e9e:	int3   
 1016e9f:	int3   
 1016ea0:	mov    QWORD PTR [rsp+0x10],rbx
 1016ea5:	push   rdi
 1016ea6:	sub    rsp,0x290
 1016ead:	mov    rax,QWORD PTR [rip+0xd7ac]        # 0x1024660
 1016eb4:	xor    rax,rsp
 1016eb7:	mov    QWORD PTR [rsp+0x280],rax
 1016ebf:	xor    ebx,ebx
 1016ec1:	mov    rdi,rcx
 1016ec4:	lea    rdx,[rsp+0x28]
 1016ec9:	lea    ecx,[rbx+0x1]
 1016ecc:	mov    QWORD PTR [rsp+0x20],rbx
 1016ed1:	call   QWORD PTR [rip+0x15551]        # 0x102c428
 1016ed7:	test   eax,eax
 1016ed9:	je     0x1016f4a
 1016edb:	nop    DWORD PTR [rax+rax*1+0x0]
 1016ee0:	mov    rcx,QWORD PTR [rsp+0x28]
 1016ee5:	lea    rdx,[rsp+0x20]
 1016eea:	call   QWORD PTR [rip+0x15548]        # 0x102c438
 1016ef0:	test   eax,eax
 1016ef2:	je     0x1016f31
 1016ef4:	mov    rcx,QWORD PTR [rsp+0x20]
 1016ef9:	test   rcx,rcx
 1016efc:	je     0x1016f31
 1016efe:	lea    rdx,[rsp+0x30]
 1016f03:	call   QWORD PTR [rip+0x15597]        # 0x102c4a0
 1016f09:	test   eax,eax
 1016f0b:	je     0x1016f31
 1016f0d:	call   0x100ad20
 1016f12:	mov    rdx,QWORD PTR [rdi]
 1016f15:	lea    rcx,[rsp+0x68]
 1016f1a:	mov    r8,rax
 1016f1d:	call   0x100c102
 1016f22:	test   eax,eax
 1016f24:	cmove  rbx,QWORD PTR [rsp+0x20]
 1016f2a:	test   rbx,rbx
 1016f2d:	je     0x1016ee0
 1016f2f:	jmp    0x1016f36
 1016f31:	test   rbx,rbx
 1016f34:	je     0x1016f3f
 1016f36:	mov    rcx,rbx
 1016f39:	call   QWORD PTR [rip+0x155d9]        # 0x102c518
 1016f3f:	mov    rcx,QWORD PTR [rsp+0x28]
 1016f44:	call   QWORD PTR [rip+0x154f6]        # 0x102c440
 1016f4a:	mov    rax,rbx
 1016f4d:	mov    rcx,QWORD PTR [rsp+0x280]
 1016f55:	xor    rcx,rsp
 1016f58:	call   0x100c0d0
 1016f5d:	mov    rbx,QWORD PTR [rsp+0x2a8]
 1016f65:	add    rsp,0x290
 1016f6c:	pop    rdi
 1016f6d:	ret    
 1016f6e:	int3   
 1016f6f:	int3   
 1016f70:	int3   
 1016f71:	int3   
 1016f72:	int3   
 1016f73:	int3   
 1016f74:	int3   
 1016f75:	int3   
 1016f76:	int3   
 1016f77:	int3   
 1016f78:	int3   
 1016f79:	int3   
 1016f7a:	int3   
 1016f7b:	int3   
 1016f7c:	int3   
 1016f7d:	int3   
 1016f7e:	int3   
 1016f7f:	int3   
 1016f80:	mov    QWORD PTR [rsp+0x10],rbx
 1016f85:	push   rdi
 1016f86:	sub    rsp,0x290
 1016f8d:	mov    rax,QWORD PTR [rip+0xd6cc]        # 0x1024660
 1016f94:	xor    rax,rsp
 1016f97:	mov    QWORD PTR [rsp+0x280],rax
 1016f9f:	xor    ebx,ebx
 1016fa1:	mov    rdi,rcx
 1016fa4:	lea    rdx,[rsp+0x28]
 1016fa9:	lea    ecx,[rbx+0x1]
 1016fac:	mov    QWORD PTR [rsp+0x20],rbx
 1016fb1:	call   QWORD PTR [rip+0x15471]        # 0x102c428
 1016fb7:	test   eax,eax
 1016fb9:	je     0x1017055
 1016fbf:	nop
 1016fc0:	mov    rcx,QWORD PTR [rsp+0x28]
 1016fc5:	lea    rdx,[rsp+0x20]
 1016fca:	call   QWORD PTR [rip+0x15468]        # 0x102c438
 1016fd0:	test   eax,eax
 1016fd2:	je     0x101703c
 1016fd4:	mov    rcx,QWORD PTR [rsp+0x20]
 1016fd9:	test   rcx,rcx
 1016fdc:	je     0x101703c
 1016fde:	lea    rdx,[rsp+0x30]
 1016fe3:	call   QWORD PTR [rip+0x154b7]        # 0x102c4a0
 1016fe9:	test   eax,eax
 1016feb:	je     0x101703c
 1016fed:	call   0x100ad20
 1016ff2:	mov    rdx,QWORD PTR [rdi]
 1016ff5:	lea    rcx,[rsp+0x68]
 1016ffa:	mov    r8,rax
 1016ffd:	call   0x100c102
 1017002:	test   eax,eax
 1017004:	jne    0x1017035
 1017006:	mov    rcx,QWORD PTR [rdi+0x8]
 101700a:	lea    rax,[rsp+0x268]
 1017012:	mov    rdx,QWORD PTR [rax]
 1017015:	cmp    rdx,QWORD PTR [rcx]
 1017018:	jne    0x1017028
 101701a:	mov    rdx,QWORD PTR [rax+0x8]
 101701e:	cmp    rdx,QWORD PTR [rcx+0x8]
 1017022:	jne    0x1017028
 1017024:	xor    eax,eax
 1017026:	jmp    0x101702d
 1017028:	sbb    eax,eax
 101702a:	sbb    eax,0xffffffff
 101702d:	test   eax,eax
 101702f:	cmove  rbx,QWORD PTR [rsp+0x20]
 1017035:	test   rbx,rbx
 1017038:	je     0x1016fc0
 101703a:	jmp    0x1017041
 101703c:	test   rbx,rbx
 101703f:	je     0x101704a
 1017041:	mov    rcx,rbx
 1017044:	call   QWORD PTR [rip+0x154ce]        # 0x102c518
 101704a:	mov    rcx,QWORD PTR [rsp+0x28]
 101704f:	call   QWORD PTR [rip+0x153eb]        # 0x102c440
 1017055:	mov    rax,rbx
 1017058:	mov    rcx,QWORD PTR [rsp+0x280]
 1017060:	xor    rcx,rsp
 1017063:	call   0x100c0d0
 1017068:	mov    rbx,QWORD PTR [rsp+0x2a8]
 1017070:	add    rsp,0x290
 1017077:	pop    rdi
 1017078:	ret    
 1017079:	int3   
 101707a:	int3   
 101707b:	int3   
 101707c:	int3   
 101707d:	int3   
 101707e:	int3   
 101707f:	int3   
 1017080:	mov    QWORD PTR [rsp+0x8],rcx
 1017085:	sub    rsp,0x18
 1017089:	mov    QWORD PTR [rsp],0xfffffffffffffffe
 1017091:	mov    QWORD PTR [rcx],0x0
 1017098:	add    rsp,0x18
 101709c:	ret    
 101709d:	int3   
 101709e:	int3   
 101709f:	int3   
 10170a0:	int3   
 10170a1:	int3   
 10170a2:	int3   
 10170a3:	int3   
 10170a4:	int3   
 10170a5:	int3   
 10170a6:	int3   
 10170a7:	int3   
 10170a8:	int3   
 10170a9:	int3   
 10170aa:	int3   
 10170ab:	int3   
 10170ac:	int3   
 10170ad:	int3   
 10170ae:	int3   
 10170af:	int3   
 10170b0:	mov    QWORD PTR [rsp+0x20],r9
 10170b5:	mov    QWORD PTR [rsp+0x18],r8
 10170ba:	push   rbp
 10170bb:	push   rsi
 10170bc:	push   r13
 10170be:	push   r15
 10170c0:	sub    rsp,0x58
 10170c4:	mov    r13d,DWORD PTR [rsp+0xa0]
 10170cc:	mov    rsi,rcx
 10170cf:	mov    r15,rdx
 10170d2:	xor    edx,edx
 10170d4:	mov    ecx,r13d
 10170d7:	mov    rbp,r8
 10170da:	mov    eax,edx
 10170dc:	mov    r10d,0x80070057
 10170e2:	and    ecx,0x100
 10170e8:	je     0x10170f6
 10170ea:	test   rsi,rsi
 10170ed:	jne    0x10170fb
 10170ef:	test   r15,r15
 10170f2:	jne    0x1017104
 10170f4:	jmp    0x10170fb
 10170f6:	test   r15,r15
 10170f9:	je     0x1017104
 10170fb:	cmp    r15,0x7fffffff
 1017102:	jbe    0x1017107
 1017104:	mov    eax,r10d
 1017107:	test   eax,eax
 1017109:	js     0x10172b7
 101710f:	mov    QWORD PTR [rsp+0x48],rdi
 1017114:	mov    QWORD PTR [rsp+0x40],r12
 1017119:	mov    QWORD PTR [rsp+0x38],r14
 101711e:	mov    r14,r15
 1017121:	mov    r12,rsi
 1017124:	test   ecx,ecx
 1017126:	je     0x1017140
 1017128:	mov    rax,QWORD PTR [rsp+0xa8]
 1017130:	lea    r8,[rip+0xfffffffffffeaaa9]        # 0x1001be0
 1017137:	test   rax,rax
 101713a:	cmovne r8,rax
 101713e:	jmp    0x1017148
 1017140:	mov    r8,QWORD PTR [rsp+0xa8]
 1017148:	mov    QWORD PTR [rsp+0x50],rbx
 101714d:	mov    edi,edx
 101714f:	test   r13d,0xffffe000
 1017156:	je     0x10171ed
 101715c:	mov    edi,r10d
 101715f:	test   r15,r15
 1017162:	je     0x1017167
 1017164:	mov    WORD PTR [rsi],dx
 1017167:	test   r13d,0x1c00
 101716e:	je     0x10171d2
 1017170:	test   r15,r15
 1017173:	je     0x10171d2
 1017175:	lea    r8,[r15+r15*1]
 1017179:	mov    rbp,r8
 101717c:	shr    rbp,1
 101717f:	je     0x1017191
 1017181:	bt     r13d,0xc
 1017186:	jae    0x1017191
 1017188:	mov    r12,rsi
 101718b:	mov    r14,rbp
 101718e:	mov    WORD PTR [rsi],dx
 1017191:	bt     r13d,0xa
 1017196:	jae    0x10171b3
 1017198:	movzx  edx,r13b
 101719c:	mov    rcx,rsi
 101719f:	call   0x100c10e
 10171a4:	test   r13b,r13b
 10171a7:	jne    0x10172c2
 10171ad:	mov    r12,rsi
 10171b0:	mov    r14,rbp
 10171b3:	xor    eax,eax
 10171b5:	test   rbp,rbp
 10171b8:	je     0x10171ca
 10171ba:	bt     r13d,0xb
 10171bf:	jae    0x10171ca
 10171c1:	mov    r12,rsi
 10171c4:	mov    r14,rbp
 10171c7:	mov    WORD PTR [rsi],ax
 10171ca:	mov    rbp,QWORD PTR [rsp+0x90]
 10171d2:	test   edi,edi
 10171d4:	jns    0x1017288
 10171da:	cmp    edi,0x8007007a
 10171e0:	je     0x1017288
 10171e6:	mov    eax,edi
 10171e8:	jmp    0x10172a3
 10171ed:	test   r15,r15
 10171f0:	jne    0x101720d
 10171f2:	cmp    WORD PTR [r8],dx
 10171f6:	je     0x1017290
 10171fc:	mov    edi,0x8007007a
 1017201:	test   rsi,rsi
 1017204:	cmove  edi,r10d
 1017208:	jmp    0x1017167
 101720d:	mov    r9,QWORD PTR [rsp+0xb0]
 1017215:	lea    rax,[rsp+0xb8]
 101721d:	lea    rbx,[r15-0x1]
 1017221:	mov    rdx,rbx
 1017224:	mov    rcx,rsi
 1017227:	mov    QWORD PTR [rsp+0x20],rax
 101722c:	call   0x10176e6
 1017231:	test   eax,eax
 1017233:	js     0x1017245
 1017235:	cdqe   
 1017237:	cmp    rax,rbx
 101723a:	ja     0x1017245
 101723c:	je     0x101724a
 101723e:	mov    rbx,rax
 1017241:	xor    edx,edx
 1017243:	jmp    0x1017250
 1017245:	mov    edi,0x8007007a
 101724a:	xor    edx,edx
 101724c:	mov    WORD PTR [rsi+rbx*2],dx
 1017250:	sub    r14,rbx
 1017253:	lea    r12,[rsi+rbx*2]
 1017257:	test   edi,edi
 1017259:	js     0x1017167
 101725f:	bt     r13d,0x9
 1017264:	jae    0x1017288
 1017266:	cmp    r14,0x1
 101726a:	jbe    0x1017288
 101726c:	lea    r8,[r14+r14*1]
 1017270:	cmp    r8,0x2
 1017274:	jbe    0x1017288
 1017276:	lea    rcx,[r12+0x2]
 101727b:	add    r8,0xfffffffffffffffe
 101727f:	movzx  edx,r13b
 1017283:	call   0x100c10e
 1017288:	mov    r9,QWORD PTR [rsp+0x98]
 1017290:	test   rbp,rbp
 1017293:	je     0x1017299
 1017295:	mov    QWORD PTR [rbp+0x0],r12
 1017299:	mov    eax,edi
 101729b:	test   r9,r9
 101729e:	je     0x10172a3
 10172a0:	mov    QWORD PTR [r9],r14
 10172a3:	mov    rbx,QWORD PTR [rsp+0x50]
 10172a8:	mov    rdi,QWORD PTR [rsp+0x48]
 10172ad:	mov    r12,QWORD PTR [rsp+0x40]
 10172b2:	mov    r14,QWORD PTR [rsp+0x38]
 10172b7:	add    rsp,0x58
 10172bb:	pop    r15
 10172bd:	pop    r13
 10172bf:	pop    rsi
 10172c0:	pop    rbp
 10172c1:	ret    
 10172c2:	test   rbp,rbp
 10172c5:	je     0x10171ca
 10172cb:	xor    eax,eax
 10172cd:	lea    r12,[rsi-0x2]
 10172d1:	lea    r12,[r12+rbp*2]
 10172d5:	lea    r14d,[rax+0x1]
 10172d9:	mov    WORD PTR [r12],ax
 10172de:	jmp    0x10171b5
 10172e3:	int3   
 10172e4:	int3   
 10172e5:	int3   
 10172e6:	int3   
 10172e7:	int3   
 10172e8:	int3   
 10172e9:	int3   
 10172ea:	int3   
 10172eb:	int3   
 10172ec:	int3   
 10172ed:	int3   
 10172ee:	int3   
 10172ef:	int3   
 10172f0:	mov    QWORD PTR [rsp+0x10],rdx
 10172f5:	push   rbx
 10172f6:	push   rbp
 10172f7:	push   rsi
 10172f8:	push   rdi
 10172f9:	push   r12
 10172fb:	push   r13
 10172fd:	push   r14
 10172ff:	push   r15
 1017301:	sub    rsp,0xa8
 1017308:	movzx  ebx,BYTE PTR [rdx+0xf]
 101730c:	movzx  edi,BYTE PTR [rdx+0xe]
 1017310:	movzx  esi,BYTE PTR [rdx+0xd]
 1017314:	movzx  ebp,BYTE PTR [rdx+0xc]
 1017318:	movzx  r14d,BYTE PTR [rdx+0xb]
 101731d:	movzx  r15d,BYTE PTR [rdx+0xa]
 1017322:	movzx  r12d,BYTE PTR [rdx+0x9]
 1017327:	movzx  r13d,BYTE PTR [rdx+0x8]
 101732c:	lea    rax,[rcx+0x18]
 1017330:	mov    QWORD PTR [rsp+0x108],rax
 1017338:	lea    rax,[rcx+0x10]
 101733c:	mov    QWORD PTR [rsp+0x90],rax
 1017344:	movzx  eax,WORD PTR [rdx+0x6]
 1017348:	mov    DWORD PTR [rsp+0xf0],eax
 101734f:	movzx  eax,WORD PTR [rdx+0x4]
 1017353:	mov    DWORD PTR [rsp+0x100],eax
 101735a:	call   0x100ad20
 101735f:	mov    r8d,DWORD PTR [rsp+0xf0]
 1017367:	mov    rdx,QWORD PTR [rsp+0xf8]
 101736f:	mov    rcx,QWORD PTR [rsp+0x90]
 1017377:	mov    DWORD PTR [rsp+0x88],ebx
 101737e:	mov    DWORD PTR [rsp+0x80],edi
 1017385:	mov    DWORD PTR [rsp+0x78],esi
 1017389:	mov    DWORD PTR [rsp+0x70],ebp
 101738d:	mov    DWORD PTR [rsp+0x68],r14d
 1017392:	mov    DWORD PTR [rsp+0x60],r15d
 1017397:	mov    DWORD PTR [rsp+0x58],r12d
 101739c:	mov    DWORD PTR [rsp+0x50],r13d
 10173a1:	mov    DWORD PTR [rsp+0x48],r8d
 10173a6:	mov    r8d,DWORD PTR [rsp+0x100]
 10173ae:	mov    DWORD PTR [rsp+0x40],r8d
 10173b3:	mov    r8d,DWORD PTR [rdx]
 10173b6:	mov    DWORD PTR [rsp+0x38],r8d
 10173bb:	mov    QWORD PTR [rsp+0x30],rax
 10173c0:	lea    rax,[rip+0xfffffffffffee789]        # 0x1005b50
 10173c7:	mov    QWORD PTR [rsp+0x28],rax
 10173cc:	mov    rax,QWORD PTR [rsp+0x108]
 10173d4:	mov    r8,rcx
 10173d7:	mov    rcx,QWORD PTR [rcx]
 10173da:	mov    rdx,QWORD PTR [rax]
 10173dd:	mov    r9,rax
 10173e0:	mov    DWORD PTR [rsp+0x20],0x1000
 10173e8:	call   0x10170b0
 10173ed:	xor    ecx,ecx
 10173ef:	test   eax,eax
 10173f1:	setns  cl
 10173f4:	mov    eax,ecx
 10173f6:	add    rsp,0xa8
 10173fd:	pop    r15
 10173ff:	pop    r14
 1017401:	pop    r13
 1017403:	pop    r12
 1017405:	pop    rdi
 1017406:	pop    rsi
 1017407:	pop    rbp
 1017408:	pop    rbx
 1017409:	ret    
 101740a:	int3   
 101740b:	int3   
 101740c:	int3   
 101740d:	int3   
 101740e:	int3   
 101740f:	int3   
 1017410:	sub    rsp,0x48
 1017414:	mov    eax,r8d
 1017417:	mov    QWORD PTR [rsp+0x20],rdx
 101741c:	mov    DWORD PTR [rsp+0x28],r8d
 1017421:	mov    QWORD PTR [rsp+0x30],rdx
 1017426:	mov    QWORD PTR [rsp+0x38],rax
 101742b:	test   r8d,r8d
 101742e:	je     0x1017435
 1017430:	xor    eax,eax
 1017432:	mov    WORD PTR [rdx],ax
 1017435:	mov    rdx,rcx
 1017438:	lea    rcx,[rsp+0x20]
 101743d:	call   0x10172f0
 1017442:	add    rsp,0x48
 1017446:	ret    
 1017447:	int3   
 1017448:	int3   
 1017449:	int3   
 101744a:	int3   
 101744b:	int3   
 101744c:	int3   
 101744d:	int3   
 101744e:	int3   
 101744f:	int3   
 1017450:	sub    rsp,0x8
 1017454:	or     eax,0xffffffff
 1017457:	mov    r10,rdx
 101745a:	mov    r11,rcx
 101745d:	test   rdx,rdx
 1017460:	je     0x1017494
 1017462:	mov    QWORD PTR [rsp],rbx
 1017466:	lea    rbx,[rip+0xfffffffffffee7b3]        # 0x1005c20
 101746d:	nop    DWORD PTR [rax]
 1017470:	movzx  r9d,BYTE PTR [r11]
 1017474:	mov    r8d,eax
 1017477:	mov    ecx,eax
 1017479:	xor    r9,r8
 101747c:	shr    ecx,0x8
 101747f:	inc    r11
 1017482:	movzx  edx,r9b
 1017486:	mov    eax,DWORD PTR [rbx+rdx*4]
 1017489:	xor    eax,ecx
 101748b:	dec    r10
 101748e:	jne    0x1017470
 1017490:	mov    rbx,QWORD PTR [rsp]
 1017494:	add    rsp,0x8
 1017498:	ret    
 1017499:	int3   
 101749a:	int3   
 101749b:	int3   
 101749c:	int3   
 101749d:	int3   
 101749e:	int3   
 101749f:	int3   
 10174a0:	jmp    QWORD PTR [rip+0xfffffffffffe9e1a]        # 0x10012c0
 10174a6:	int3   
 10174a7:	int3   
 10174a8:	int3   
 10174a9:	int3   
 10174aa:	int3   
 10174ab:	int3   
 10174ac:	jmp    QWORD PTR [rip+0xfffffffffffe9e16]        # 0x10012c8
 10174b2:	int3   
 10174b3:	int3   
 10174b4:	int3   
 10174b5:	int3   
 10174b6:	int3   
 10174b7:	int3   
 10174b8:	jmp    QWORD PTR [rip+0xfffffffffffe9d82]        # 0x1001240
 10174be:	int3   
 10174bf:	int3   
 10174c0:	int3   
 10174c1:	int3   
 10174c2:	int3   
 10174c3:	int3   
 10174c4:	jmp    QWORD PTR [rip+0xfffffffffffe9d6e]        # 0x1001238
 10174ca:	int3   
 10174cb:	int3   
 10174cc:	int3   
 10174cd:	int3   
 10174ce:	int3   
 10174cf:	int3   
 10174d0:	jmp    QWORD PTR [rip+0xfffffffffffe9ee2]        # 0x10013b8
 10174d6:	int3   
 10174d7:	int3   
 10174d8:	int3   
 10174d9:	int3   
 10174da:	int3   
 10174db:	int3   
 10174dc:	jmp    QWORD PTR [rip+0xfffffffffffe9eee]        # 0x10013d0
 10174e2:	int3   
 10174e3:	int3   
 10174e4:	int3   
 10174e5:	int3   
 10174e6:	int3   
 10174e7:	int3   
 10174e8:	jmp    QWORD PTR [rip+0xfffffffffffe9f02]        # 0x10013f0
 10174ee:	int3   
 10174ef:	int3   
 10174f0:	int3   
 10174f1:	int3   
 10174f2:	int3   
 10174f3:	int3   
 10174f4:	jmp    QWORD PTR [rip+0xfffffffffffe9efe]        # 0x10013f8
 10174fa:	int3   
 10174fb:	int3   
 10174fc:	int3   
 10174fd:	int3   
 10174fe:	int3   
 10174ff:	int3   
 1017500:	jmp    QWORD PTR [rip+0xfffffffffffe9efa]        # 0x1001400
 1017506:	int3   
 1017507:	int3   
 1017508:	int3   
 1017509:	int3   
 101750a:	int3   
 101750b:	int3   
 101750c:	jmp    QWORD PTR [rip+0xfffffffffffe9fce]        # 0x10014e0
 1017512:	int3   
 1017513:	int3   
 1017514:	int3   
 1017515:	int3   
 1017516:	int3   
 1017517:	int3   
 1017518:	jmp    QWORD PTR [rip+0xfffffffffffe9ef2]        # 0x1001410
 101751e:	int3   
 101751f:	int3   
 1017520:	int3   
 1017521:	int3   
 1017522:	int3   
 1017523:	int3   
 1017524:	mov    rax,rsp
 1017527:	mov    QWORD PTR [rax+0x8],rbx
 101752b:	mov    QWORD PTR [rax+0x10],rbp
 101752f:	mov    QWORD PTR [rax+0x18],rsi
 1017533:	mov    QWORD PTR [rax+0x20],rdi
 1017537:	push   r12
 1017539:	sub    rsp,0x20
 101753d:	mov    rbx,QWORD PTR [r9+0x38]
 1017541:	mov    rsi,rdx
 1017544:	mov    r12,r8
 1017547:	mov    rbp,rcx
 101754a:	lea    r8,[rbx+0x4]
 101754e:	mov    rdx,r9
 1017551:	mov    rcx,rsi
 1017554:	mov    rdi,r9
 1017557:	call   0x100bf3c
 101755c:	mov    r11d,DWORD PTR [rbx+0x4]
 1017560:	mov    r10d,DWORD PTR [rbp+0x4]
 1017564:	mov    eax,r11d
 1017567:	and    r11d,0x2
 101756b:	mov    r8d,0x1
 1017571:	and    eax,r8d
 1017574:	and    r10b,0x66
 1017578:	cmove  r11d,eax
 101757c:	test   r11d,r11d
 101757f:	je     0x1017595
 1017581:	mov    r9,rdi
 1017584:	mov    r8,r12
 1017587:	mov    rdx,rsi
 101758a:	mov    rcx,rbp
 101758d:	call   0x1017518
 1017592:	mov    r8d,eax
 1017595:	mov    rbx,QWORD PTR [rsp+0x30]
 101759a:	mov    rbp,QWORD PTR [rsp+0x38]
 101759f:	mov    rsi,QWORD PTR [rsp+0x40]
 10175a4:	mov    rdi,QWORD PTR [rsp+0x48]
 10175a9:	mov    eax,r8d
 10175ac:	add    rsp,0x20
 10175b0:	pop    r12
 10175b2:	ret    
 10175b3:	int3   
 10175b4:	int3   
 10175b5:	int3   
 10175b6:	int3   
 10175b7:	int3   
 10175b8:	int3   
 10175b9:	int3   
 10175ba:	int3   
 10175bb:	int3   
 10175bc:	mov    QWORD PTR [rsp+0x10],rbx
 10175c1:	mov    DWORD PTR [rsp+0x18],r8d
 10175c6:	mov    QWORD PTR [rsp+0x8],rcx
 10175cb:	push   rsi
 10175cc:	push   rdi
 10175cd:	push   r12
 10175cf:	sub    rsp,0x40
 10175d3:	mov    rsi,r9
 10175d6:	mov    edi,r8d
 10175d9:	mov    r12,rdx
 10175dc:	mov    rbx,rcx
 10175df:	dec    edi
 10175e1:	mov    DWORD PTR [rsp+0x70],edi
 10175e5:	js     0x10175f6
 10175e7:	sub    rbx,r12
 10175ea:	mov    QWORD PTR [rsp+0x60],rbx
 10175ef:	mov    rcx,rbx
 10175f2:	call   rsi
 10175f4:	jmp    0x10175df
 10175f6:	jmp    0x10175f8
 10175f8:	mov    rbx,QWORD PTR [rsp+0x68]
 10175fd:	add    rsp,0x40
 1017601:	pop    r12
 1017603:	pop    rdi
 1017604:	pop    rsi
 1017605:	ret    
 1017606:	int3   
 1017607:	int3   
 1017608:	int3   
 1017609:	int3   
 101760a:	int3   
 101760b:	int3   
 101760c:	mov    rax,rsp
 101760f:	mov    QWORD PTR [rax+0x20],r9
 1017613:	mov    DWORD PTR [rax+0x18],r8d
 1017617:	mov    QWORD PTR [rax+0x10],rdx
 101761b:	push   rbx
 101761c:	push   rsi
 101761d:	push   rdi
 101761e:	push   r12
 1017620:	sub    rsp,0x38
 1017624:	mov    r12,r9
 1017627:	movsxd rdi,r8d
 101762a:	mov    rsi,rdx
 101762d:	and    DWORD PTR [rax-0x38],0x0
 1017631:	mov    rbx,rdi
 1017634:	imul   rbx,rdx
 1017638:	add    rbx,rcx
 101763b:	mov    QWORD PTR [rax+0x8],rbx
 101763f:	dec    edi
 1017641:	mov    DWORD PTR [rsp+0x70],edi
 1017645:	js     0x1017657
 1017647:	sub    rbx,rsi
 101764a:	mov    QWORD PTR [rsp+0x60],rbx
 101764f:	mov    rcx,rbx
 1017652:	call   r12
 1017655:	jmp    0x101763f
 1017657:	mov    DWORD PTR [rsp+0x20],0x1
 101765f:	add    rsp,0x38
 1017663:	pop    r12
 1017665:	pop    rdi
 1017666:	pop    rsi
 1017667:	pop    rbx
 1017668:	ret    
 1017669:	int3   
 101766a:	int3   
 101766b:	int3   
 101766c:	int3   
 101766d:	int3   
 101766e:	int3   
 101766f:	int3   
 1017670:	jmp    QWORD PTR [rip+0xfffffffffffe9da2]        # 0x1001418
 1017676:	int3   
 1017677:	int3   
 1017678:	int3   
 1017679:	int3   
 101767a:	int3   
 101767b:	int3   
 101767c:	mov    rax,rsp
 101767f:	mov    QWORD PTR [rax+0x18],rbx
 1017683:	mov    QWORD PTR [rax+0x20],rsi
 1017687:	mov    QWORD PTR [rax+0x10],rdx
 101768b:	mov    QWORD PTR [rax+0x8],rcx
 101768f:	push   rdi
 1017690:	push   r12
 1017692:	push   r13
 1017694:	sub    rsp,0x30
 1017698:	mov    r13,r9
 101769b:	mov    r12d,r8d
 101769e:	mov    rsi,rdx
 10176a1:	mov    rdi,rcx
 10176a4:	xor    ebx,ebx
 10176a6:	mov    DWORD PTR [rax-0x28],ebx
 10176a9:	mov    DWORD PTR [rsp+0x24],ebx
 10176ad:	cmp    ebx,r12d
 10176b0:	jge    0x10176c4
 10176b2:	mov    rcx,rdi
 10176b5:	call   r13
 10176b8:	add    rdi,rsi
 10176bb:	mov    QWORD PTR [rsp+0x50],rdi
 10176c0:	inc    ebx
 10176c2:	jmp    0x10176a9
 10176c4:	mov    DWORD PTR [rsp+0x20],0x1
 10176cc:	mov    rbx,QWORD PTR [rsp+0x60]
 10176d1:	mov    rsi,QWORD PTR [rsp+0x68]
 10176d6:	add    rsp,0x30
 10176da:	pop    r13
 10176dc:	pop    r12
 10176de:	pop    rdi
 10176df:	ret    
 10176e0:	int3   
 10176e1:	int3   
 10176e2:	int3   
 10176e3:	int3   
 10176e4:	int3   
 10176e5:	int3   
 10176e6:	jmp    QWORD PTR [rip+0xfffffffffffe9d34]        # 0x1001420
 10176ec:	int3   
 10176ed:	int3   
 10176ee:	int3   
 10176ef:	int3   
 10176f0:	int3   
 10176f1:	int3   
 10176f2:	int3   
 10176f3:	int3   
 10176f4:	int3   
 10176f5:	int3   
 10176f6:	int3   
 10176f7:	int3   
 10176f8:	int3   
 10176f9:	int3   
 10176fa:	int3   
 10176fb:	int3   
 10176fc:	int3   
 10176fd:	int3   
 10176fe:	int3   
 10176ff:	int3   
 1017700:	rex push rbp
 1017702:	mov    rbp,rsp
 1017705:	sub    rsp,0x20
 1017709:	xor    edx,edx
 101770b:	add    rsp,0x20
 101770f:	pop    rbp
 1017710:	rex.W jmp QWORD PTR [rip+0xdaf1]        # 0x1025208
 1017717:	int3   
 1017718:	int3   
 1017719:	int3   
 101771a:	int3   
 101771b:	int3   
 101771c:	int3   
 101771d:	int3   
 101771e:	int3   
 101771f:	int3   
 1017720:	mov    QWORD PTR [rsp+0x8],rbx
 1017725:	push   rbp
 1017726:	mov    rbp,rsp
 1017729:	sub    rsp,0x20
 101772d:	lea    rax,[rip+0xfffffffffffee8fc]        # 0x1006030
 1017734:	mov    rbx,rcx
 1017737:	mov    QWORD PTR [rcx],rax
 101773a:	mov    rcx,QWORD PTR [rcx+0x10]
 101773e:	test   rcx,rcx
 1017741:	je     0x1017749
 1017743:	mov    rax,QWORD PTR [rcx]
 1017746:	call   QWORD PTR [rax+0x10]
 1017749:	mov    rcx,QWORD PTR [rbx+0x18]
 101774d:	test   rcx,rcx
 1017750:	je     0x1017758
 1017752:	call   QWORD PTR [rip+0xfffffffffffe9be0]        # 0x1001338
 1017758:	mov    rbx,QWORD PTR [rsp+0x30]
 101775d:	add    rsp,0x20
 1017761:	pop    rbp
 1017762:	ret    
 1017763:	int3   
 1017764:	int3   
 1017765:	int3   
 1017766:	int3   
 1017767:	int3   
 1017768:	int3   
 1017769:	int3   
 101776a:	int3   
 101776b:	int3   
 101776c:	int3   
 101776d:	int3   
 101776e:	int3   
 101776f:	int3   
 1017770:	rex push rbp
 1017772:	mov    rbp,rsp
 1017775:	sub    rsp,0x40
 1017779:	lea    rax,[rip+0xfffffffffffee8b0]        # 0x1006030
 1017780:	mov    DWORD PTR [rsp+0x28],ecx
 1017784:	mov    QWORD PTR [rsp+0x30],rdx
 1017789:	lea    rdx,[rip+0xaa68]        # 0x10221f8
 1017790:	lea    rcx,[rsp+0x20]
 1017795:	mov    QWORD PTR [rsp+0x38],0x0
 101779e:	mov    QWORD PTR [rsp+0x20],rax
 10177a3:	call   0x10193e6
 10177a8:	int3   
 10177a9:	int3   
 10177aa:	int3   
 10177ab:	int3   
 10177ac:	int3   
 10177ad:	int3   
 10177ae:	int3   
 10177af:	int3   
 10177b0:	mov    QWORD PTR [rsp+0x8],rbx
 10177b5:	push   rbp
 10177b6:	mov    rbp,rsp
 10177b9:	sub    rsp,0x20
 10177bd:	lea    rax,[rip+0xfffffffffffee86c]        # 0x1006030
 10177c4:	mov    rbx,rcx
 10177c7:	mov    QWORD PTR [rcx],rax
 10177ca:	mov    eax,DWORD PTR [rdx+0x8]
 10177cd:	mov    DWORD PTR [rcx+0x8],eax
 10177d0:	mov    rax,QWORD PTR [rdx+0x10]
 10177d4:	mov    QWORD PTR [rcx+0x18],0x0
 10177dc:	mov    QWORD PTR [rcx+0x10],rax
 10177e0:	mov    rcx,rax
 10177e3:	test   rax,rax
 10177e6:	je     0x10177ee
 10177e8:	mov    rax,QWORD PTR [rax]
 10177eb:	call   QWORD PTR [rax+0x8]
 10177ee:	mov    rax,rbx
 10177f1:	mov    rbx,QWORD PTR [rsp+0x30]
 10177f6:	add    rsp,0x20
 10177fa:	pop    rbp
 10177fb:	ret    
 10177fc:	int3   
 10177fd:	int3   
 10177fe:	int3   
 10177ff:	int3   
 1017800:	int3   
 1017801:	int3   
 1017802:	int3   
 1017803:	int3   
 1017804:	int3   
 1017805:	int3   
 1017806:	int3   
 1017807:	int3   
 1017808:	int3   
 1017809:	int3   
 101780a:	int3   
 101780b:	int3   
 101780c:	int3   
 101780d:	int3   
 101780e:	int3   
 101780f:	int3   
 1017810:	mov    QWORD PTR [rsp+0x8],rbx
 1017815:	mov    QWORD PTR [rsp+0x10],rdi
 101781a:	push   rbp
 101781b:	mov    rbp,rsp
 101781e:	sub    rsp,0x20
 1017822:	lea    rax,[rip+0xfffffffffffee807]        # 0x1006030
 1017829:	mov    rbx,rcx
 101782c:	mov    edi,edx
 101782e:	mov    QWORD PTR [rcx],rax
 1017831:	mov    rcx,QWORD PTR [rcx+0x10]
 1017835:	test   rcx,rcx
 1017838:	je     0x1017840
 101783a:	mov    rax,QWORD PTR [rcx]
 101783d:	call   QWORD PTR [rax+0x10]
 1017840:	mov    rcx,QWORD PTR [rbx+0x18]
 1017844:	test   rcx,rcx
 1017847:	je     0x101784f
 1017849:	call   QWORD PTR [rip+0xfffffffffffe9ae9]        # 0x1001338
 101784f:	test   dil,0x1
 1017853:	je     0x101785d
 1017855:	mov    rcx,rbx
 1017858:	call   0x100bccc
 101785d:	mov    rdi,QWORD PTR [rsp+0x38]
 1017862:	mov    rax,rbx
 1017865:	mov    rbx,QWORD PTR [rsp+0x30]
 101786a:	add    rsp,0x20
 101786e:	pop    rbp
 101786f:	ret    
 1017870:	int3   
 1017871:	int3   
 1017872:	int3   
 1017873:	int3   
 1017874:	int3   
 1017875:	int3   
 1017876:	jmp    QWORD PTR [rip+0xfffffffffffe9d4c]        # 0x10015c8
 101787c:	int3   
 101787d:	int3   
 101787e:	int3   
 101787f:	int3   
 1017880:	int3   
 1017881:	int3   
 1017882:	jmp    QWORD PTR [rip+0xfffffffffffe9d48]        # 0x10015d0
 1017888:	int3   
 1017889:	int3   
 101788a:	int3   
 101788b:	int3   
 101788c:	int3   
 101788d:	int3   
 101788e:	int3   
 101788f:	int3   
 1017890:	sub    rsp,0x308
 1017897:	mov    rax,QWORD PTR [rip+0xcdc2]        # 0x1024660
 101789e:	xor    rax,rsp
 10178a1:	mov    QWORD PTR [rsp+0x2f8],rax
 10178a9:	mov    QWORD PTR [rsp+0x280],0x0
 10178b5:	mov    DWORD PTR [rsp+0x250],0x104
 10178c0:	mov    DWORD PTR [rsp+0x25c],0x0
 10178cb:	mov    QWORD PTR [rsp+0x278],0x0
 10178d7:	mov    QWORD PTR [rsp+0x260],0x0
 10178e3:	mov    QWORD PTR [rsp+0x268],0x0
 10178ef:	mov    QWORD PTR [rsp+0x288],0x0
 10178fb:	mov    DWORD PTR [rsp+0x258],0x0
 1017906:	mov    DWORD PTR [rsp+0x274],0x0
 1017911:	mov    DWORD PTR [rsp+0x254],0x409
 101791c:	lea    rax,[rsp+0x280]
 1017924:	mov    QWORD PTR [rsp+0x20],rax
 1017929:	mov    r9d,0x20019
 101792f:	xor    r8d,r8d
 1017932:	lea    rdx,[rip+0xfffffffffffee767]        # 0x10060a0
 1017939:	mov    rcx,0xffffffff80000002
 1017940:	call   0x1018510
 1017945:	mov    DWORD PTR [rsp+0x270],eax
 101794c:	cmp    DWORD PTR [rsp+0x270],0x0
 1017954:	je     0x101795b
 1017956:	jmp    0x101804c
 101795b:	lea    rax,[rsp+0x250]
 1017963:	mov    QWORD PTR [rsp+0x28],rax
 1017968:	lea    rax,[rsp+0x40]
 101796d:	mov    QWORD PTR [rsp+0x20],rax
 1017972:	xor    r9d,r9d
 1017975:	xor    r8d,r8d
 1017978:	lea    rdx,[rip+0xfffffffffffeadc1]        # 0x1002740
 101797f:	mov    rcx,QWORD PTR [rsp+0x280]
 1017987:	call   0x1018550
 101798c:	mov    DWORD PTR [rsp+0x270],eax
 1017993:	cmp    DWORD PTR [rsp+0x270],0x0
 101799b:	je     0x10179a2
 101799d:	jmp    0x101804c
 10179a2:	lea    rcx,[rip+0xfffffffffffee6d7]        # 0x1006080
 10179a9:	call   QWORD PTR [rip+0xfffffffffffe97c1]        # 0x1001170
 10179af:	lea    rdx,[rip+0xfffffffffffee6b2]        # 0x1006068
 10179b6:	mov    rcx,rax
 10179b9:	call   QWORD PTR [rip+0xfffffffffffe98d1]        # 0x1001290
 10179bf:	mov    QWORD PTR [rsp+0x268],rax
 10179c7:	lea    rcx,[rip+0xfffffffffffee6b2]        # 0x1006080
 10179ce:	call   QWORD PTR [rip+0xfffffffffffe979c]        # 0x1001170
 10179d4:	lea    rdx,[rip+0xfffffffffffee675]        # 0x1006050
 10179db:	mov    rcx,rax
 10179de:	call   QWORD PTR [rip+0xfffffffffffe98ac]        # 0x1001290
 10179e4:	mov    QWORD PTR [rsp+0x288],rax
 10179ec:	cmp    QWORD PTR [rsp+0x268],0x0
 10179f5:	je     0x1017a02
 10179f7:	cmp    QWORD PTR [rsp+0x288],0x0
 1017a00:	jne    0x1017a12
 1017a02:	mov    DWORD PTR [rsp+0x274],0x1
 1017a0d:	jmp    0x1017c27
 1017a12:	xor    edx,edx
 1017a14:	xor    ecx,ecx
 1017a16:	call   QWORD PTR [rsp+0x288]
 1017a1d:	mov    DWORD PTR [rsp+0x25c],eax
 1017a24:	mov    eax,DWORD PTR [rsp+0x25c]
 1017a2b:	mov    DWORD PTR [rsp+0x250],eax
 1017a32:	lea    rcx,[rsp+0x40]
 1017a37:	call   QWORD PTR [rip+0xfffffffffffe96eb]        # 0x1001128
 1017a3d:	mov    ecx,DWORD PTR [rsp+0x250]
 1017a44:	lea    eax,[rcx+rax*1+0x2]
 1017a48:	mov    DWORD PTR [rsp+0x250],eax
 1017a4f:	cmp    QWORD PTR [rsp+0x278],0x0
 1017a58:	je     0x1017aef
 1017a5e:	mov    QWORD PTR [rsp+0x290],0x0
 1017a6a:	mov    eax,DWORD PTR [rsp+0x250]
 1017a71:	shl    rax,1
 1017a74:	mov    QWORD PTR [rsp+0x2c8],rax
 1017a7c:	call   QWORD PTR [rip+0xfffffffffffe966e]        # 0x10010f0
 1017a82:	mov    rcx,QWORD PTR [rsp+0x2c8]
 1017a8a:	mov    r9,rcx
 1017a8d:	mov    r8,QWORD PTR [rsp+0x278]
 1017a95:	mov    edx,0x8
 1017a9a:	mov    rcx,rax
 1017a9d:	call   QWORD PTR [rip+0xfffffffffffe9655]        # 0x10010f8
 1017aa3:	mov    QWORD PTR [rsp+0x290],rax
 1017aab:	cmp    QWORD PTR [rsp+0x290],0x0
 1017ab4:	jne    0x1017add
 1017ab6:	call   QWORD PTR [rip+0xfffffffffffe9634]        # 0x10010f0
 1017abc:	mov    r8,QWORD PTR [rsp+0x278]
 1017ac4:	xor    edx,edx
 1017ac6:	mov    rcx,rax
 1017ac9:	call   QWORD PTR [rip+0xfffffffffffe9631]        # 0x1001100
 1017acf:	mov    QWORD PTR [rsp+0x278],0x0
 1017adb:	jmp    0x1017aed
 1017add:	mov    rax,QWORD PTR [rsp+0x290]
 1017ae5:	mov    QWORD PTR [rsp+0x278],rax
 1017aed:	jmp    0x1017b28
 1017aef:	mov    eax,DWORD PTR [rsp+0x250]
 1017af6:	shl    rax,1
 1017af9:	mov    QWORD PTR [rsp+0x2d0],rax
 1017b01:	call   QWORD PTR [rip+0xfffffffffffe95e9]        # 0x10010f0
 1017b07:	mov    rcx,QWORD PTR [rsp+0x2d0]
 1017b0f:	mov    r8,rcx
 1017b12:	mov    edx,0x8
 1017b17:	mov    rcx,rax
 1017b1a:	call   QWORD PTR [rip+0xfffffffffffe95e8]        # 0x1001108
 1017b20:	mov    QWORD PTR [rsp+0x278],rax
 1017b28:	cmp    QWORD PTR [rsp+0x278],0x0
 1017b31:	je     0x1017b50
 1017b33:	mov    rdx,QWORD PTR [rsp+0x278]
 1017b3b:	mov    ecx,DWORD PTR [rsp+0x250]
 1017b42:	call   QWORD PTR [rsp+0x288]
 1017b49:	mov    DWORD PTR [rsp+0x25c],eax
 1017b50:	cmp    QWORD PTR [rsp+0x278],0x0
 1017b59:	je     0x1017b6f
 1017b5b:	mov    eax,DWORD PTR [rsp+0x250]
 1017b62:	cmp    DWORD PTR [rsp+0x25c],eax
 1017b69:	jae    0x1017a12
 1017b6f:	cmp    QWORD PTR [rsp+0x278],0x0
 1017b78:	je     0x1017b89
 1017b7a:	mov    rax,QWORD PTR [rsp+0x278]
 1017b82:	movzx  eax,WORD PTR [rax]
 1017b85:	test   eax,eax
 1017b87:	jne    0x1017bb3
 1017b89:	lea    rcx,[rsp+0x40]
 1017b8e:	call   QWORD PTR [rsp+0x268]
 1017b95:	mov    DWORD PTR [rsp+0x258],eax
 1017b9c:	cmp    DWORD PTR [rsp+0x258],0x0
 1017ba4:	jne    0x1017bb1
 1017ba6:	mov    DWORD PTR [rsp+0x274],0x1
 1017bb1:	jmp    0x1017c27
 1017bb3:	mov    DWORD PTR [rsp+0x28],0xffffffff
 1017bbb:	lea    rax,[rsp+0x40]
 1017bc0:	mov    QWORD PTR [rsp+0x20],rax
 1017bc5:	mov    r9d,0xffffffff
 1017bcb:	mov    r8,QWORD PTR [rsp+0x278]
 1017bd3:	mov    edx,0x1
 1017bd8:	mov    ecx,DWORD PTR [rsp+0x254]
 1017bdf:	call   QWORD PTR [rip+0xfffffffffffe952b]        # 0x1001110
 1017be5:	cmp    eax,0x2
 1017be8:	je     0x1017c1c
 1017bea:	mov    DWORD PTR [rsp+0x274],0x1
 1017bf5:	call   QWORD PTR [rip+0xfffffffffffe94f5]        # 0x10010f0
 1017bfb:	mov    r8,QWORD PTR [rsp+0x278]
 1017c03:	xor    edx,edx
 1017c05:	mov    rcx,rax
 1017c08:	call   QWORD PTR [rip+0xfffffffffffe94f2]        # 0x1001100
 1017c0e:	mov    QWORD PTR [rsp+0x278],0x0
 1017c1a:	jmp    0x1017c27
 1017c1c:	mov    DWORD PTR [rsp+0x258],0x1
 1017c27:	cmp    DWORD PTR [rsp+0x274],0x0
 1017c2f:	je     0x101804c
 1017c35:	xor    r8d,r8d
 1017c38:	xor    edx,edx
 1017c3a:	lea    rcx,[rip+0xfffffffffffee3ff]        # 0x1006040
 1017c41:	call   QWORD PTR [rip+0xfffffffffffe9641]        # 0x1001288
 1017c47:	mov    DWORD PTR [rsp+0x25c],eax
 1017c4e:	mov    eax,DWORD PTR [rsp+0x25c]
 1017c55:	mov    DWORD PTR [rsp+0x250],eax
 1017c5c:	cmp    DWORD PTR [rsp+0x250],0x0
 1017c64:	jne    0x1017c84
 1017c66:	lea    rdx,[rsp+0x40]
 1017c6b:	lea    rcx,[rip+0xfffffffffffee3ce]        # 0x1006040
 1017c72:	call   QWORD PTR [rip+0xfffffffffffe9580]        # 0x10011f8
 1017c78:	mov    DWORD PTR [rsp+0x258],eax
 1017c7f:	jmp    0x101804c
 1017c84:	mov    DWORD PTR [rsp+0x2a8],0x0
 1017c8f:	mov    QWORD PTR [rsp+0x2a0],0x0
 1017c9b:	mov    DWORD PTR [rsp+0x298],0x0
 1017ca6:	lea    rcx,[rsp+0x40]
 1017cab:	call   QWORD PTR [rip+0xfffffffffffe9477]        # 0x1001128
 1017cb1:	add    eax,0x1
 1017cb4:	mov    DWORD PTR [rsp+0x29c],eax
 1017cbb:	mov    eax,DWORD PTR [rsp+0x25c]
 1017cc2:	mov    DWORD PTR [rsp+0x250],eax
 1017cc9:	lea    rcx,[rsp+0x40]
 1017cce:	call   QWORD PTR [rip+0xfffffffffffe9454]        # 0x1001128
 1017cd4:	mov    ecx,DWORD PTR [rsp+0x250]
 1017cdb:	lea    eax,[rcx+rax*1+0x2]
 1017cdf:	mov    DWORD PTR [rsp+0x250],eax
 1017ce6:	cmp    QWORD PTR [rsp+0x278],0x0
 1017cef:	je     0x1017d86
 1017cf5:	mov    QWORD PTR [rsp+0x2b0],0x0
 1017d01:	mov    eax,DWORD PTR [rsp+0x250]
 1017d08:	shl    rax,1
 1017d0b:	mov    QWORD PTR [rsp+0x2d8],rax
 1017d13:	call   QWORD PTR [rip+0xfffffffffffe93d7]        # 0x10010f0
 1017d19:	mov    rcx,QWORD PTR [rsp+0x2d8]
 1017d21:	mov    r9,rcx
 1017d24:	mov    r8,QWORD PTR [rsp+0x278]
 1017d2c:	mov    edx,0x8
 1017d31:	mov    rcx,rax
 1017d34:	call   QWORD PTR [rip+0xfffffffffffe93be]        # 0x10010f8
 1017d3a:	mov    QWORD PTR [rsp+0x2b0],rax
 1017d42:	cmp    QWORD PTR [rsp+0x2b0],0x0
 1017d4b:	jne    0x1017d74
 1017d4d:	call   QWORD PTR [rip+0xfffffffffffe939d]        # 0x10010f0
 1017d53:	mov    r8,QWORD PTR [rsp+0x278]
 1017d5b:	xor    edx,edx
 1017d5d:	mov    rcx,rax
 1017d60:	call   QWORD PTR [rip+0xfffffffffffe939a]        # 0x1001100
 1017d66:	mov    QWORD PTR [rsp+0x278],0x0
 1017d72:	jmp    0x1017d84
 1017d74:	mov    rax,QWORD PTR [rsp+0x2b0]
 1017d7c:	mov    QWORD PTR [rsp+0x278],rax
 1017d84:	jmp    0x1017dbf
 1017d86:	mov    eax,DWORD PTR [rsp+0x250]
 1017d8d:	shl    rax,1
 1017d90:	mov    QWORD PTR [rsp+0x2e0],rax
 1017d98:	call   QWORD PTR [rip+0xfffffffffffe9352]        # 0x10010f0
 1017d9e:	mov    rcx,QWORD PTR [rsp+0x2e0]
 1017da6:	mov    r8,rcx
 1017da9:	mov    edx,0x8
 1017dae:	mov    rcx,rax
 1017db1:	call   QWORD PTR [rip+0xfffffffffffe9351]        # 0x1001108
 1017db7:	mov    QWORD PTR [rsp+0x278],rax
 1017dbf:	cmp    QWORD PTR [rsp+0x278],0x0
 1017dc8:	je     0x1017dee
 1017dca:	mov    r8d,DWORD PTR [rsp+0x250]
 1017dd2:	mov    rdx,QWORD PTR [rsp+0x278]
 1017dda:	lea    rcx,[rip+0xfffffffffffee25f]        # 0x1006040
 1017de1:	call   QWORD PTR [rip+0xfffffffffffe94a1]        # 0x1001288
 1017de7:	mov    DWORD PTR [rsp+0x25c],eax
 1017dee:	cmp    QWORD PTR [rsp+0x278],0x0
 1017df7:	je     0x1017e0d
 1017df9:	mov    eax,DWORD PTR [rsp+0x250]
 1017e00:	cmp    DWORD PTR [rsp+0x25c],eax
 1017e07:	jae    0x1017cbb
 1017e0d:	mov    rax,QWORD PTR [rsp+0x278]
 1017e15:	mov    QWORD PTR [rsp+0x2a0],rax
 1017e1d:	mov    eax,DWORD PTR [rsp+0x25c]
 1017e24:	add    eax,0x1
 1017e27:	mov    DWORD PTR [rsp+0x298],eax
 1017e2e:	cmp    DWORD PTR [rsp+0x2a8],0x0
 1017e36:	jne    0x1017f6a
 1017e3c:	mov    eax,DWORD PTR [rsp+0x29c]
 1017e43:	cmp    DWORD PTR [rsp+0x298],eax
 1017e4a:	jb     0x1017f6a
 1017e50:	mov    DWORD PTR [rsp+0x2bc],0x0
 1017e5b:	mov    DWORD PTR [rsp+0x2b8],0x0
 1017e66:	mov    WORD PTR [rsp+0x2c0],0x0
 1017e70:	mov    eax,DWORD PTR [rsp+0x2bc]
 1017e77:	mov    rcx,QWORD PTR [rsp+0x2a0]
 1017e7f:	movzx  eax,WORD PTR [rcx+rax*2]
 1017e83:	mov    WORD PTR [rsp+0x2c0],ax
 1017e8b:	movzx  eax,WORD PTR [rsp+0x2c0]
 1017e93:	mov    ecx,DWORD PTR [rsp+0x2bc]
 1017e9a:	movzx  ecx,WORD PTR [rsp+rcx*2+0x40]
 1017e9f:	cmp    eax,ecx
 1017ea1:	jne    0x1017eb0
 1017ea3:	mov    DWORD PTR [rsp+0x2e8],0x1
 1017eae:	jmp    0x1017ebb
 1017eb0:	mov    DWORD PTR [rsp+0x2e8],0x0
 1017ebb:	mov    eax,DWORD PTR [rsp+0x2e8]
 1017ec2:	mov    DWORD PTR [rsp+0x2b8],eax
 1017ec9:	cmp    DWORD PTR [rsp+0x2b8],0x0
 1017ed1:	je     0x1017efe
 1017ed3:	mov    eax,DWORD PTR [rsp+0x29c]
 1017eda:	sub    eax,0x1
 1017edd:	cmp    DWORD PTR [rsp+0x2bc],eax
 1017ee4:	jne    0x1017ee8
 1017ee6:	jmp    0x1017efe
 1017ee8:	mov    eax,DWORD PTR [rsp+0x2bc]
 1017eef:	add    eax,0x1
 1017ef2:	mov    DWORD PTR [rsp+0x2bc],eax
 1017ef9:	jmp    0x1017e70
 1017efe:	cmp    DWORD PTR [rsp+0x2b8],0x0
 1017f06:	je     0x1017f15
 1017f08:	mov    DWORD PTR [rsp+0x2a8],0x1
 1017f13:	jmp    0x1017f40
 1017f15:	mov    eax,DWORD PTR [rsp+0x29c]
 1017f1c:	sub    eax,0x1
 1017f1f:	cmp    DWORD PTR [rsp+0x2bc],eax
 1017f26:	jne    0x1017f40
 1017f28:	movzx  eax,WORD PTR [rsp+0x2c0]
 1017f30:	cmp    eax,0x3b
 1017f33:	jne    0x1017f40
 1017f35:	mov    DWORD PTR [rsp+0x2a8],0x1
 1017f40:	mov    rax,QWORD PTR [rsp+0x2a0]
 1017f48:	add    rax,0x2
 1017f4c:	mov    QWORD PTR [rsp+0x2a0],rax
 1017f54:	mov    eax,DWORD PTR [rsp+0x298]
 1017f5b:	sub    eax,0x1
 1017f5e:	mov    DWORD PTR [rsp+0x298],eax
 1017f65:	jmp    0x1017e2e
 1017f6a:	cmp    DWORD PTR [rsp+0x2a8],0x0
 1017f72:	je     0x1017f84
 1017f74:	mov    DWORD PTR [rsp+0x258],0x1
 1017f7f:	jmp    0x101804c
 1017f84:	mov    eax,DWORD PTR [rsp+0x250]
 1017f8b:	shl    rax,1
 1017f8e:	mov    QWORD PTR [rsp+0x2f0],rax
 1017f96:	call   QWORD PTR [rip+0xfffffffffffe9154]        # 0x10010f0
 1017f9c:	mov    rcx,QWORD PTR [rsp+0x2f0]
 1017fa4:	mov    r8,rcx
 1017fa7:	mov    edx,0x8
 1017fac:	mov    rcx,rax
 1017faf:	call   QWORD PTR [rip+0xfffffffffffe9153]        # 0x1001108
 1017fb5:	mov    QWORD PTR [rsp+0x260],rax
 1017fbd:	cmp    QWORD PTR [rsp+0x278],0x0
 1017fc6:	je     0x101804c
 1017fcc:	cmp    QWORD PTR [rsp+0x260],0x0
 1017fd5:	je     0x101804c
 1017fd7:	mov    eax,DWORD PTR [rsp+0x250]
 1017fde:	lea    r8,[rsp+0x40]
 1017fe3:	mov    rdx,rax
 1017fe6:	mov    rcx,QWORD PTR [rsp+0x260]
 1017fee:	call   0x1018180
 1017ff3:	mov    eax,DWORD PTR [rsp+0x250]
 1017ffa:	lea    r8,[rip+0xfffffffffffee037]        # 0x1006038
 1018001:	mov    rdx,rax
 1018004:	mov    rcx,QWORD PTR [rsp+0x260]
 101800c:	call   0x10181f0
 1018011:	mov    eax,DWORD PTR [rsp+0x250]
 1018018:	mov    r8,QWORD PTR [rsp+0x278]
 1018020:	mov    rdx,rax
 1018023:	mov    rcx,QWORD PTR [rsp+0x260]
 101802b:	call   0x10181f0
 1018030:	mov    rdx,QWORD PTR [rsp+0x260]
 1018038:	lea    rcx,[rip+0xfffffffffffee001]        # 0x1006040
 101803f:	call   QWORD PTR [rip+0xfffffffffffe91b3]        # 0x10011f8
 1018045:	mov    DWORD PTR [rsp+0x258],eax
 101804c:	cmp    QWORD PTR [rsp+0x278],0x0
 1018055:	je     0x101807c
 1018057:	call   QWORD PTR [rip+0xfffffffffffe9093]        # 0x10010f0
 101805d:	mov    r8,QWORD PTR [rsp+0x278]
 1018065:	xor    edx,edx
 1018067:	mov    rcx,rax
 101806a:	call   QWORD PTR [rip+0xfffffffffffe9090]        # 0x1001100
 1018070:	mov    QWORD PTR [rsp+0x278],0x0
 101807c:	cmp    QWORD PTR [rsp+0x260],0x0
 1018085:	je     0x10180ac
 1018087:	call   QWORD PTR [rip+0xfffffffffffe9063]        # 0x10010f0
 101808d:	mov    r8,QWORD PTR [rsp+0x260]
 1018095:	xor    edx,edx
 1018097:	mov    rcx,rax
 101809a:	call   QWORD PTR [rip+0xfffffffffffe9060]        # 0x1001100
 10180a0:	mov    QWORD PTR [rsp+0x260],0x0
 10180ac:	cmp    QWORD PTR [rsp+0x280],0x0
 10180b5:	je     0x10180c4
 10180b7:	mov    rcx,QWORD PTR [rsp+0x280]
 10180bf:	call   0x1019120
 10180c4:	mov    eax,DWORD PTR [rsp+0x258]
 10180cb:	mov    rcx,QWORD PTR [rsp+0x2f8]
 10180d3:	xor    rcx,rsp
 10180d6:	call   0x100c0d0
 10180db:	add    rsp,0x308
 10180e2:	ret    
 10180e3:	int3   
 10180e4:	int3   
 10180e5:	int3   
 10180e6:	int3   
 10180e7:	int3   
 10180e8:	int3   
 10180e9:	int3   
 10180ea:	int3   
 10180eb:	int3   
 10180ec:	int3   
 10180ed:	int3   
 10180ee:	int3   
 10180ef:	int3   
 10180f0:	rex push rbp
 10180f2:	sub    rsp,0x30
 10180f6:	mov    rbp,rdx
 10180f9:	cmp    QWORD PTR [rbp+0x278],0x0
 1018101:	je     0x1018126
 1018103:	call   QWORD PTR [rip+0xfffffffffffe8fe7]        # 0x10010f0
 1018109:	mov    r8,QWORD PTR [rbp+0x278]
 1018110:	xor    edx,edx
 1018112:	mov    rcx,rax
 1018115:	call   QWORD PTR [rip+0xfffffffffffe8fe5]        # 0x1001100
 101811b:	mov    QWORD PTR [rbp+0x278],0x0
 1018126:	cmp    QWORD PTR [rbp+0x260],0x0
 101812e:	je     0x1018153
 1018130:	call   QWORD PTR [rip+0xfffffffffffe8fba]        # 0x10010f0
 1018136:	mov    r8,QWORD PTR [rbp+0x260]
 101813d:	xor    edx,edx
 101813f:	mov    rcx,rax
 1018142:	call   QWORD PTR [rip+0xfffffffffffe8fb8]        # 0x1001100
 1018148:	mov    QWORD PTR [rbp+0x260],0x0
 1018153:	cmp    QWORD PTR [rbp+0x280],0x0
 101815b:	je     0x1018169
 101815d:	mov    rcx,QWORD PTR [rbp+0x280]
 1018164:	call   0x1019120
 1018169:	add    rsp,0x30
 101816d:	pop    rbp
 101816e:	ret    
 101816f:	int3   
 1018170:	int3   
 1018171:	int3   
 1018172:	int3   
 1018173:	int3   
 1018174:	int3   
 1018175:	int3   
 1018176:	int3   
 1018177:	int3   
 1018178:	int3   
 1018179:	int3   
 101817a:	int3   
 101817b:	int3   
 101817c:	int3   
 101817d:	int3   
 101817e:	int3   
 101817f:	int3   
 1018180:	mov    QWORD PTR [rsp+0x18],r8
 1018185:	mov    QWORD PTR [rsp+0x10],rdx
 101818a:	mov    QWORD PTR [rsp+0x8],rcx
 101818f:	sub    rsp,0x48
 1018193:	mov    r8d,0x7fffffff
 1018199:	mov    rdx,QWORD PTR [rsp+0x58]
 101819e:	mov    rcx,QWORD PTR [rsp+0x50]
 10181a3:	call   0x1018280
 10181a8:	mov    DWORD PTR [rsp+0x30],eax
 10181ac:	cmp    DWORD PTR [rsp+0x30],0x0
 10181b1:	jl     0x10181d7
 10181b3:	mov    QWORD PTR [rsp+0x20],0x7ffffffe
 10181bc:	mov    r9,QWORD PTR [rsp+0x60]
 10181c1:	xor    r8d,r8d
 10181c4:	mov    rdx,QWORD PTR [rsp+0x58]
 10181c9:	mov    rcx,QWORD PTR [rsp+0x50]
 10181ce:	call   0x10183f0
 10181d3:	mov    DWORD PTR [rsp+0x30],eax
 10181d7:	mov    eax,DWORD PTR [rsp+0x30]
 10181db:	add    rsp,0x48
 10181df:	ret    
 10181e0:	int3   
 10181e1:	int3   
 10181e2:	int3   
 10181e3:	int3   
 10181e4:	int3   
 10181e5:	int3   
 10181e6:	int3   
 10181e7:	int3   
 10181e8:	int3   
 10181e9:	int3   
 10181ea:	int3   
 10181eb:	int3   
 10181ec:	int3   
 10181ed:	int3   
 10181ee:	int3   
 10181ef:	int3   
 10181f0:	mov    QWORD PTR [rsp+0x18],r8
 10181f5:	mov    QWORD PTR [rsp+0x10],rdx
 10181fa:	mov    QWORD PTR [rsp+0x8],rcx
 10181ff:	sub    rsp,0x48
 1018203:	mov    r9d,0x7fffffff
 1018209:	lea    r8,[rsp+0x38]
 101820e:	mov    rdx,QWORD PTR [rsp+0x58]
 1018213:	mov    rcx,QWORD PTR [rsp+0x50]
 1018218:	call   0x10182d0
 101821d:	mov    DWORD PTR [rsp+0x30],eax
 1018221:	cmp    DWORD PTR [rsp+0x30],0x0
 1018226:	jl     0x1018263
 1018228:	mov    rax,QWORD PTR [rsp+0x38]
 101822d:	mov    rcx,QWORD PTR [rsp+0x58]
 1018232:	sub    rcx,rax
 1018235:	mov    rax,rcx
 1018238:	mov    rcx,QWORD PTR [rsp+0x50]
 101823d:	mov    rdx,QWORD PTR [rsp+0x38]
 1018242:	lea    rcx,[rcx+rdx*2]
 1018246:	mov    QWORD PTR [rsp+0x20],0x7fffffff
 101824f:	mov    r9,QWORD PTR [rsp+0x60]
 1018254:	xor    r8d,r8d
 1018257:	mov    rdx,rax
 101825a:	call   0x10183f0
 101825f:	mov    DWORD PTR [rsp+0x30],eax
 1018263:	mov    eax,DWORD PTR [rsp+0x30]
 1018267:	add    rsp,0x48
 101826b:	ret    
 101826c:	int3   
 101826d:	int3   
 101826e:	int3   
 101826f:	int3   
 1018270:	int3   
 1018271:	int3   
 1018272:	int3   
 1018273:	int3   
 1018274:	int3   
 1018275:	int3   
 1018276:	int3   
 1018277:	int3   
 1018278:	int3   
 1018279:	int3   
 101827a:	int3   
 101827b:	int3   
 101827c:	int3   
 101827d:	int3   
 101827e:	int3   
 101827f:	int3   
 1018280:	mov    QWORD PTR [rsp+0x18],r8
 1018285:	mov    QWORD PTR [rsp+0x10],rdx
 101828a:	mov    QWORD PTR [rsp+0x8],rcx
 101828f:	sub    rsp,0x18
 1018293:	mov    DWORD PTR [rsp],0x0
 101829a:	cmp    QWORD PTR [rsp+0x28],0x0
 10182a0:	je     0x10182ae
 10182a2:	mov    rax,QWORD PTR [rsp+0x30]
 10182a7:	cmp    QWORD PTR [rsp+0x28],rax
 10182ac:	jbe    0x10182b5
 10182ae:	mov    DWORD PTR [rsp],0x80070057
 10182b5:	mov    eax,DWORD PTR [rsp]
 10182b8:	add    rsp,0x18
 10182bc:	ret    
 10182bd:	int3   
 10182be:	int3   
 10182bf:	int3   
 10182c0:	int3   
 10182c1:	int3   
 10182c2:	int3   
 10182c3:	int3   
 10182c4:	int3   
 10182c5:	int3   
 10182c6:	int3   
 10182c7:	int3   
 10182c8:	int3   
 10182c9:	int3   
 10182ca:	int3   
 10182cb:	int3   
 10182cc:	int3   
 10182cd:	int3   
 10182ce:	int3   
 10182cf:	int3   
 10182d0:	mov    QWORD PTR [rsp+0x20],r9
 10182d5:	mov    QWORD PTR [rsp+0x18],r8
 10182da:	mov    QWORD PTR [rsp+0x10],rdx
 10182df:	mov    QWORD PTR [rsp+0x8],rcx
 10182e4:	sub    rsp,0x38
 10182e8:	mov    r8,QWORD PTR [rsp+0x58]
 10182ed:	mov    rdx,QWORD PTR [rsp+0x48]
 10182f2:	mov    rcx,QWORD PTR [rsp+0x40]
 10182f7:	call   0x1018280
 10182fc:	mov    DWORD PTR [rsp+0x20],eax
 1018300:	cmp    DWORD PTR [rsp+0x20],0x0
 1018305:	jl     0x1018321
 1018307:	mov    r8,QWORD PTR [rsp+0x50]
 101830c:	mov    rdx,QWORD PTR [rsp+0x48]
 1018311:	mov    rcx,QWORD PTR [rsp+0x40]
 1018316:	call   0x1018340
 101831b:	mov    DWORD PTR [rsp+0x20],eax
 101831f:	jmp    0x101832d
 1018321:	mov    rax,QWORD PTR [rsp+0x50]
 1018326:	mov    QWORD PTR [rax],0x0
 101832d:	mov    eax,DWORD PTR [rsp+0x20]
 1018331:	add    rsp,0x38
 1018335:	ret    
 1018336:	int3   
 1018337:	int3   
 1018338:	int3   
 1018339:	int3   
 101833a:	int3   
 101833b:	int3   
 101833c:	int3   
 101833d:	int3   
 101833e:	int3   
 101833f:	int3   
 1018340:	mov    QWORD PTR [rsp+0x18],r8
 1018345:	mov    QWORD PTR [rsp+0x10],rdx
 101834a:	mov    QWORD PTR [rsp+0x8],rcx
 101834f:	sub    rsp,0x18
 1018353:	mov    DWORD PTR [rsp+0x8],0x0
 101835b:	mov    rax,QWORD PTR [rsp+0x28]
 1018360:	mov    QWORD PTR [rsp],rax
 1018364:	cmp    QWORD PTR [rsp+0x28],0x0
 101836a:	je     0x1018396
 101836c:	mov    rax,QWORD PTR [rsp+0x20]
 1018371:	movzx  eax,WORD PTR [rax]
 1018374:	test   eax,eax
 1018376:	je     0x1018396
 1018378:	mov    rax,QWORD PTR [rsp+0x20]
 101837d:	add    rax,0x2
 1018381:	mov    QWORD PTR [rsp+0x20],rax
 1018386:	mov    rax,QWORD PTR [rsp+0x28]
 101838b:	sub    rax,0x1
 101838f:	mov    QWORD PTR [rsp+0x28],rax
 1018394:	jmp    0x1018364
 1018396:	cmp    QWORD PTR [rsp+0x28],0x0
 101839c:	jne    0x10183a6
 101839e:	mov    DWORD PTR [rsp+0x8],0x80070057
 10183a6:	cmp    QWORD PTR [rsp+0x30],0x0
 10183ac:	je     0x10183da
 10183ae:	cmp    DWORD PTR [rsp+0x8],0x0
 10183b3:	jl     0x10183ce
 10183b5:	mov    rax,QWORD PTR [rsp+0x28]
 10183ba:	mov    rcx,QWORD PTR [rsp]
 10183be:	sub    rcx,rax
 10183c1:	mov    rax,rcx
 10183c4:	mov    rcx,QWORD PTR [rsp+0x30]
 10183c9:	mov    QWORD PTR [rcx],rax
 10183cc:	jmp    0x10183da
 10183ce:	mov    rax,QWORD PTR [rsp+0x30]
 10183d3:	mov    QWORD PTR [rax],0x0
 10183da:	mov    eax,DWORD PTR [rsp+0x8]
 10183de:	add    rsp,0x18
 10183e2:	ret    
 10183e3:	int3   
 10183e4:	int3   
 10183e5:	int3   
 10183e6:	int3   
 10183e7:	int3   
 10183e8:	int3   
 10183e9:	int3   
 10183ea:	int3   
 10183eb:	int3   
 10183ec:	int3   
 10183ed:	int3   
 10183ee:	int3   
 10183ef:	int3   
 10183f0:	mov    QWORD PTR [rsp+0x20],r9
 10183f5:	mov    QWORD PTR [rsp+0x18],r8
 10183fa:	mov    QWORD PTR [rsp+0x10],rdx
 10183ff:	mov    QWORD PTR [rsp+0x8],rcx
 1018404:	sub    rsp,0x18
 1018408:	mov    DWORD PTR [rsp+0x8],0x0
 1018410:	mov    QWORD PTR [rsp],0x0
 1018418:	cmp    QWORD PTR [rsp+0x28],0x0
 101841e:	je     0x101848a
 1018420:	cmp    QWORD PTR [rsp+0x40],0x0
 1018426:	je     0x101848a
 1018428:	mov    rax,QWORD PTR [rsp+0x38]
 101842d:	movzx  eax,WORD PTR [rax]
 1018430:	test   eax,eax
 1018432:	je     0x101848a
 1018434:	mov    rax,QWORD PTR [rsp+0x20]
 1018439:	mov    rcx,QWORD PTR [rsp+0x38]
 101843e:	movzx  ecx,WORD PTR [rcx]
 1018441:	mov    WORD PTR [rax],cx
 1018444:	mov    rax,QWORD PTR [rsp+0x20]
 1018449:	add    rax,0x2
 101844d:	mov    QWORD PTR [rsp+0x20],rax
 1018452:	mov    rax,QWORD PTR [rsp+0x38]
 1018457:	add    rax,0x2
 101845b:	mov    QWORD PTR [rsp+0x38],rax
 1018460:	mov    rax,QWORD PTR [rsp+0x28]
 1018465:	sub    rax,0x1
 1018469:	mov    QWORD PTR [rsp+0x28],rax
 101846e:	mov    rax,QWORD PTR [rsp+0x40]
 1018473:	sub    rax,0x1
 1018477:	mov    QWORD PTR [rsp+0x40],rax
 101847c:	mov    rax,QWORD PTR [rsp]
 1018480:	add    rax,0x1
 1018484:	mov    QWORD PTR [rsp],rax
 1018488:	jmp    0x1018418
 101848a:	cmp    QWORD PTR [rsp+0x28],0x0
 1018490:	jne    0x10184b4
 1018492:	mov    rax,QWORD PTR [rsp+0x20]
 1018497:	sub    rax,0x2
 101849b:	mov    QWORD PTR [rsp+0x20],rax
 10184a0:	mov    rax,QWORD PTR [rsp]
 10184a4:	sub    rax,0x1
 10184a8:	mov    QWORD PTR [rsp],rax
 10184ac:	mov    DWORD PTR [rsp+0x8],0x8007007a
 10184b4:	mov    rax,QWORD PTR [rsp+0x20]
 10184b9:	mov    WORD PTR [rax],0x0
 10184be:	cmp    QWORD PTR [rsp+0x30],0x0
 10184c4:	je     0x10184d2
 10184c6:	mov    rax,QWORD PTR [rsp+0x30]
 10184cb:	mov    rcx,QWORD PTR [rsp]
 10184cf:	mov    QWORD PTR [rax],rcx
 10184d2:	mov    eax,DWORD PTR [rsp+0x8]
 10184d6:	add    rsp,0x18
 10184da:	ret    
 10184db:	int3   
 10184dc:	int3   
 10184dd:	int3   
 10184de:	int3   
 10184df:	int3   
 10184e0:	int3   
 10184e1:	int3   
 10184e2:	int3   
 10184e3:	int3   
 10184e4:	int3   
 10184e5:	int3   
 10184e6:	int3   
 10184e7:	int3   
 10184e8:	int3   
 10184e9:	int3   
 10184ea:	int3   
 10184eb:	int3   
 10184ec:	int3   
 10184ed:	int3   
 10184ee:	int3   
 10184ef:	int3   
 10184f0:	mov    QWORD PTR [rsp+0x8],rcx
 10184f5:	mov    QWORD PTR [rsp+0x10],rdx
 10184fa:	mov    QWORD PTR [rsp+0x18],r8
 10184ff:	mov    QWORD PTR [rsp+0x20],r9
 1018504:	ret    
 1018505:	int3   
 1018506:	int3   
 1018507:	int3   
 1018508:	int3   
 1018509:	int3   
 101850a:	int3   
 101850b:	int3   
 101850c:	int3   
 101850d:	int3   
 101850e:	int3   
 101850f:	int3   
 1018510:	sub    rsp,0x38
 1018514:	cmp    DWORD PTR [rip+0x142a5],0x0        # 0x102c7c0
 101851b:	je     0x101852b
 101851d:	mov    r8,QWORD PTR [rsp+0x60]
 1018522:	add    rsp,0x38
 1018526:	jmp    0x10192c0
 101852b:	mov    rax,QWORD PTR [rsp+0x60]
 1018530:	mov    QWORD PTR [rsp+0x20],rax
 1018535:	call   QWORD PTR [rip+0xfffffffffffe8acd]        # 0x1001008
 101853b:	add    rsp,0x38
 101853f:	ret    
 1018540:	int3   
 1018541:	int3   
 1018542:	int3   
 1018543:	int3   
 1018544:	int3   
 1018545:	int3   
 1018546:	int3   
 1018547:	int3   
 1018548:	int3   
 1018549:	int3   
 101854a:	int3   
 101854b:	int3   
 101854c:	int3   
 101854d:	int3   
 101854e:	int3   
 101854f:	int3   
 1018550:	mov    QWORD PTR [rsp+0x20],r9
 1018555:	push   rbx
 1018556:	push   r14
 1018558:	sub    rsp,0x58
 101855c:	cmp    DWORD PTR [rip+0x1425d],0x0        # 0x102c7c0
 1018563:	mov    r14,r9
 1018566:	mov    rbx,rdx
 1018569:	je     0x101884b
 101856f:	mov    QWORD PTR [rsp+0x70],rbp
 1018574:	mov    QWORD PTR [rsp+0x78],rsi
 1018579:	call   0x1018b40
 101857e:	test   rbx,rbx
 1018581:	je     0x1018589
 1018583:	cmp    WORD PTR [rbx],0x0
 1018587:	jne    0x1018590
 1018589:	lea    rbx,[rip+0xfffffffffffedd94]        # 0x1006324
 1018590:	mov    rdx,rbx
 1018593:	mov    rcx,rax
 1018596:	call   0x1018f50
 101859b:	mov    rsi,rax
 101859e:	test   rax,rax
 10185a1:	je     0x101882a
 10185a7:	mov    eax,0xffff
 10185ac:	cmp    WORD PTR [rsi],ax
 10185af:	jne    0x10185c2
 10185b1:	cmp    WORD PTR [rsi+0x2],0x0
 10185b6:	jne    0x10185c2
 10185b8:	mov    ebp,0x2
 10185bd:	jmp    0x1018814
 10185c2:	mov    QWORD PTR [rsp+0x80],rdi
 10185ca:	mov    QWORD PTR [rsp+0x50],r12
 10185cf:	xor    ebp,ebp
 10185d1:	lea    r9,[rsp+0x30]
 10185d6:	lea    rdx,[rip+0xfffffffffffedd4b]        # 0x1006328
 10185dd:	xor    r8d,r8d
 10185e0:	mov    rcx,rsi
 10185e3:	mov    QWORD PTR [rsp+0x48],r13
 10185e8:	lea    r12d,[rbp+0x1]
 10185ec:	mov    QWORD PTR [rsp+0x40],r15
 10185f1:	mov    DWORD PTR [rsp+0x30],ebp
 10185f5:	call   0x1019464
 10185fa:	lea    edi,[rbp+0x4]
 10185fd:	cmp    eax,r12d
 1018600:	jne    0x101860f
 1018602:	mov    r12d,edi
 1018605:	lea    r13,[rsp+0x30]
 101860a:	jmp    0x10187c3
 101860f:	lea    rax,[rip+0xfffffffffffedd2a]        # 0x1006340
 1018616:	mov    r9d,edi
 1018619:	mov    r8,rsi
 101861c:	mov    edx,r12d
 101861f:	mov    ecx,0x400
 1018624:	mov    DWORD PTR [rsp+0x28],edi
 1018628:	mov    QWORD PTR [rsp+0x20],rax
 101862d:	call   QWORD PTR [rip+0xfffffffffffe8add]        # 0x1001110
 1018633:	cmp    eax,0x2
 1018636:	jne    0x101863e
 1018638:	lea    r12d,[rax+0x1]
 101863c:	jmp    0x10186b9
 101863e:	lea    rax,[rip+0xfffffffffffedd0b]        # 0x1006350
 1018645:	mov    r9d,edi
 1018648:	mov    r8,rsi
 101864b:	mov    edx,r12d
 101864e:	mov    ecx,0x400
 1018653:	mov    DWORD PTR [rsp+0x28],edi
 1018657:	mov    QWORD PTR [rsp+0x20],rax
 101865c:	call   QWORD PTR [rip+0xfffffffffffe8aae]        # 0x1001110
 1018662:	cmp    eax,0x2
 1018665:	jne    0x10187a5
 101866b:	lea    rbx,[rsi+0x8]
 101866f:	lea    r9,[rsp+0x34]
 1018674:	lea    rdx,[rip+0xfffffffffffedce5]        # 0x1006360
 101867b:	mov    rcx,rbx
 101867e:	xor    r8d,r8d
 1018681:	call   0x1019464
 1018686:	cmp    eax,r12d
 1018689:	jne    0x10187a5
 101868f:	cmp    WORD PTR [rbx],0x3a
 1018693:	je     0x10186ac
 1018695:	data16 data16 nop WORD PTR [rax+rax*1+0x0]
 10186a0:	add    rbx,0x2
 10186a4:	inc    edi
 10186a6:	cmp    WORD PTR [rbx],0x3a
 10186aa:	jne    0x10186a0
 10186ac:	mov    r12d,DWORD PTR [rsp+0x34]
 10186b1:	inc    edi
 10186b3:	je     0x10187a5
 10186b9:	movsxd r8,edi
 10186bc:	or     rcx,0xffffffffffffffff
 10186c0:	inc    rcx
 10186c3:	cmp    WORD PTR [rsi+rcx*2],bp
 10186c7:	jne    0x10186c0
 10186c9:	sub    rcx,r8
 10186cc:	lea    rbx,[rsi+r8*2]
 10186d0:	movabs rax,0xaaaaaaaaaaaaaaab
 10186da:	lea    r9,[rsp+0x30]
 10186df:	xor    r8d,r8d
 10186e2:	mov    r13,rsi
 10186e5:	mul    rcx
 10186e8:	mov    rdi,rdx
 10186eb:	lea    rdx,[rip+0xfffffffffffedc7e]        # 0x1006370
 10186f2:	mov    rcx,rbx
 10186f5:	shr    rdi,1
 10186f8:	mov    r15d,ebp
 10186fb:	inc    edi
 10186fd:	call   0x1019464
 1018702:	cmp    eax,0x1
 1018705:	jne    0x1018775
 1018707:	mov    r14,rsi
 101870a:	nop    WORD PTR [rax+rax*1+0x0]
 1018710:	movzx  eax,WORD PTR [rbx]
 1018713:	cmp    ax,0x2c
 1018717:	je     0x1018733
 1018719:	nop    DWORD PTR [rax+0x0]
 1018720:	test   ax,ax
 1018723:	je     0x1018733
 1018725:	movzx  eax,WORD PTR [rbx+0x2]
 1018729:	add    rbx,0x2
 101872d:	cmp    ax,0x2c
 1018731:	jne    0x1018720
 1018733:	movzx  eax,BYTE PTR [rsp+0x30]
 1018738:	inc    r14
 101873b:	inc    r15d
 101873e:	mov    BYTE PTR [r14-0x1],al
 1018742:	cmp    WORD PTR [rbx],0x2c
 1018746:	jne    0x101874c
 1018748:	add    rbx,0x2
 101874c:	cmp    WORD PTR [rbx],bp
 101874f:	je     0x101876d
 1018751:	lea    r9,[rsp+0x30]
 1018756:	lea    rdx,[rip+0xfffffffffffedc13]        # 0x1006370
 101875d:	xor    r8d,r8d
 1018760:	mov    rcx,rbx
 1018763:	call   0x1019464
 1018768:	cmp    eax,0x1
 101876b:	je     0x1018710
 101876d:	mov    r14,QWORD PTR [rsp+0x88]
 1018775:	cmp    edi,r15d
 1018778:	jne    0x101879e
 101877a:	cmp    r12d,0x1
 101877e:	je     0x101878c
 1018780:	cmp    r12d,0x7
 1018784:	je     0x101878c
 1018786:	cmp    r12d,0x2
 101878a:	jne    0x10187c3
 101878c:	test   dil,0x1
 1018790:	jne    0x101879e
 1018792:	movsxd rax,r15d
 1018795:	add    edi,0x2
 1018798:	mov    WORD PTR [rax+rsi*1],bp
 101879c:	jmp    0x10187c3
 101879e:	mov    ebp,0xd
 10187a3:	jmp    0x10187fd
 10187a5:	or     rcx,0xffffffffffffffff
 10187a9:	nop    DWORD PTR [rax+0x0]
 10187b0:	inc    rcx
 10187b3:	cmp    WORD PTR [rsi+rcx*2],bp
 10187b7:	jne    0x10187b0
 10187b9:	lea    edi,[rcx*2+0x2]
 10187c0:	mov    r13,rsi
 10187c3:	mov    rcx,QWORD PTR [rsp+0x90]
 10187cb:	mov    rbx,QWORD PTR [rsp+0x98]
 10187d3:	test   rcx,rcx
 10187d6:	je     0x10187ee
 10187d8:	cmp    DWORD PTR [rbx],edi
 10187da:	jb     0x10187e9
 10187dc:	mov    r8d,edi
 10187df:	mov    rdx,r13
 10187e2:	call   0x101750c
 10187e7:	jmp    0x10187ee
 10187e9:	mov    ebp,0xea
 10187ee:	test   r14,r14
 10187f1:	je     0x10187f6
 10187f3:	mov    DWORD PTR [r14],r12d
 10187f6:	test   rbx,rbx
 10187f9:	je     0x10187fd
 10187fb:	mov    DWORD PTR [rbx],edi
 10187fd:	mov    r13,QWORD PTR [rsp+0x48]
 1018802:	mov    r12,QWORD PTR [rsp+0x50]
 1018807:	mov    rdi,QWORD PTR [rsp+0x80]
 101880f:	mov    r15,QWORD PTR [rsp+0x40]
 1018814:	call   QWORD PTR [rip+0xfffffffffffe88d6]        # 0x10010f0
 101881a:	mov    r8,rsi
 101881d:	xor    edx,edx
 101881f:	mov    rcx,rax
 1018822:	call   QWORD PTR [rip+0xfffffffffffe88d8]        # 0x1001100
 1018828:	jmp    0x101882f
 101882a:	mov    ebp,0x8
 101882f:	mov    ecx,ebp
 1018831:	call   QWORD PTR [rip+0xfffffffffffe8af9]        # 0x1001330
 1018837:	mov    rsi,QWORD PTR [rsp+0x78]
 101883c:	mov    eax,ebp
 101883e:	mov    rbp,QWORD PTR [rsp+0x70]
 1018843:	add    rsp,0x58
 1018847:	pop    r14
 1018849:	pop    rbx
 101884a:	ret    
 101884b:	mov    rax,QWORD PTR [rsp+0x98]
 1018853:	mov    QWORD PTR [rsp+0x28],rax
 1018858:	mov    rax,QWORD PTR [rsp+0x90]
 1018860:	mov    QWORD PTR [rsp+0x20],rax
 1018865:	call   QWORD PTR [rip+0xfffffffffffe8795]        # 0x1001000
 101886b:	add    rsp,0x58
 101886f:	pop    r14
 1018871:	pop    rbx
 1018872:	ret    
 1018873:	int3   
 1018874:	int3   
 1018875:	int3   
 1018876:	int3   
 1018877:	int3   
 1018878:	int3   
 1018879:	int3   
 101887a:	int3   
 101887b:	int3   
 101887c:	int3   
 101887d:	int3   
 101887e:	int3   
 101887f:	int3   
 1018880:	rex push rbx
 1018882:	push   rsi
 1018883:	push   r15
 1018885:	sub    rsp,0x40
 1018889:	cmp    DWORD PTR [rip+0x13f30],0x0        # 0x102c7c0
 1018890:	mov    r15d,r8d
 1018893:	mov    rbx,rdx
 1018896:	je     0x10188a6
 1018898:	mov    eax,0x1
 101889d:	add    rsp,0x40
 10188a1:	pop    r15
 10188a3:	pop    rsi
 10188a4:	pop    rbx
 10188a5:	ret    
 10188a6:	mov    QWORD PTR [rsp+0x68],rdi
 10188ab:	mov    QWORD PTR [rsp+0x70],r12
 10188b0:	mov    QWORD PTR [rsp+0x30],r14
 10188b5:	call   0x10184f0
 10188ba:	or     rdi,0xffffffffffffffff
 10188be:	test   rdx,rdx
 10188c1:	je     0x10188d2
 10188c3:	mov    rax,rdi
 10188c6:	inc    rax
 10188c9:	cmp    WORD PTR [rdx+rax*2],0x0
 10188ce:	jne    0x10188c6
 10188d0:	jmp    0x10188d7
 10188d2:	mov    eax,0x3
 10188d7:	lea    r14d,[rax+0x1]
 10188db:	mov    r8d,0x104
 10188e1:	lea    r12,[rip+0x13ef8]        # 0x102c7e0
 10188e8:	sub    r8d,r14d
 10188eb:	mov    rdx,r12
 10188ee:	mov    QWORD PTR [rsp+0x60],rbp
 10188f3:	mov    QWORD PTR [rsp+0x38],r13
 10188f8:	call   QWORD PTR [rip+0xfffffffffffe8882]        # 0x1001180
 10188fe:	mov    r11d,eax
 1018901:	test   eax,eax
 1018903:	je     0x1018a8f
 1018909:	lea    rcx,[r12-0x2]
 101890e:	lea    rcx,[rcx+r11*2]
 1018912:	call   0x10184f0
 1018917:	xor    r13d,r13d
 101891a:	mov    edx,r13d
 101891d:	mov    r8d,r13d
 1018920:	cmp    rcx,r12
 1018923:	jbe    0x1018948
 1018925:	test   r8,r8
 1018928:	jne    0x1018935
 101892a:	cmp    WORD PTR [rcx],0x2e
 101892e:	jne    0x101893d
 1018930:	mov    r8,rcx
 1018933:	jmp    0x101893d
 1018935:	cmp    WORD PTR [rcx],0x5c
 1018939:	cmove  rdx,rcx
 101893d:	sub    rcx,0x2
 1018941:	test   rdx,rdx
 1018944:	je     0x1018920
 1018946:	jmp    0x1018951
 1018948:	test   rdx,rdx
 101894b:	je     0x1018a8f
 1018951:	lea    rcx,[rdx+0x2]
 1018955:	lea    rbp,[r8+0x2]
 1018959:	mov    esi,0x1
 101895e:	test   rbx,rbx
 1018961:	je     0x1018971
 1018963:	lea    r8d,[r14+r14*1]
 1018967:	mov    rdx,rbx
 101896a:	call   0x101750c
 101896f:	jmp    0x10189c6
 1018971:	mov    r9d,DWORD PTR [rip+0xc8c8]        # 0x1025240
 1018978:	mov    r8,QWORD PTR [rip+0xc8b9]        # 0x1025238
 101897f:	mov    rax,rcx
 1018982:	sub    rax,r12
 1018985:	mov    edx,esi
 1018987:	sar    rax,1
 101898a:	sub    r11d,eax
 101898d:	mov    DWORD PTR [rsp+0x28],r11d
 1018992:	mov    QWORD PTR [rsp+0x20],rcx
 1018997:	mov    ecx,0x400
 101899c:	call   QWORD PTR [rip+0xfffffffffffe876e]        # 0x1001110
 10189a2:	lea    r8d,[r14+r14*1]
 10189a6:	lea    rdx,[rip+0xfffffffffffed84b]        # 0x10061f8
 10189ad:	cmp    eax,0x2
 10189b0:	mov    ebx,r13d
 10189b3:	mov    rcx,rbp
 10189b6:	cmove  ebx,esi
 10189b9:	call   0x101750c
 10189be:	test   ebx,ebx
 10189c0:	jne    0x1018a8f
 10189c6:	mov    rcx,r12
 10189c9:	call   QWORD PTR [rip+0xfffffffffffe86f9]        # 0x10010c8
 10189cf:	cmp    eax,0xffffffff
 10189d2:	je     0x1018a8f
 10189d8:	lea    rbx,[rip+0x14221]        # 0x102cc00
 10189df:	mov    rdx,r12
 10189e2:	mov    r8d,0x208
 10189e8:	mov    rcx,rbx
 10189eb:	call   0x101750c
 10189f0:	mov    rax,rdi
 10189f3:	inc    rax
 10189f6:	cmp    WORD PTR [rbx+rax*2],r13w
 10189fb:	jne    0x10189f3
 10189fd:	dec    rax
 1018a00:	cmp    WORD PTR [rbx+rax*2],0x5c
 1018a05:	lea    rax,[rbx+rax*2]
 1018a09:	je     0x1018a1f
 1018a0b:	nop    DWORD PTR [rax+rax*1+0x0]
 1018a10:	cmp    rax,rbx
 1018a13:	jbe    0x1018a1f
 1018a15:	sub    rax,0x2
 1018a19:	cmp    WORD PTR [rax],0x5c
 1018a1d:	jne    0x1018a10
 1018a1f:	mov    WORD PTR [rax],r13w
 1018a23:	sub    rax,rbx
 1018a26:	mov    rcx,rbx
 1018a29:	sar    rax,1
 1018a2c:	inc    eax
 1018a2e:	mov    DWORD PTR [rip+0x13d90],eax        # 0x102c7c4
 1018a34:	call   0x10184f0
 1018a39:	lea    rbx,[rip+0x13fb0]        # 0x102c9f0
 1018a40:	mov    rcx,rbx
 1018a43:	mov    rdx,r12
 1018a46:	mov    r8d,0x208
 1018a4c:	call   0x101750c
 1018a51:	inc    rdi
 1018a54:	cmp    WORD PTR [rbx+rdi*2],r13w
 1018a59:	jne    0x1018a51
 1018a5b:	mov    eax,edi
 1018a5d:	mov    rcx,rbx
 1018a60:	lea    rdx,[rbx+rax*2]
 1018a64:	mov    rax,QWORD PTR [rip+0xfffffffffffed69d]        # 0x1006108
 1018a6b:	mov    QWORD PTR [rdx],rax
 1018a6e:	movzx  eax,WORD PTR [rip+0xfffffffffffed69b]        # 0x1006110
 1018a75:	mov    WORD PTR [rdx+0x8],ax
 1018a79:	call   0x10184f0
 1018a7e:	mov    DWORD PTR [rip+0x13d4b],r15d        # 0x102c7d0
 1018a85:	mov    DWORD PTR [rip+0x13d35],esi        # 0x102c7c0
 1018a8b:	mov    eax,esi
 1018a8d:	jmp    0x1018a91
 1018a8f:	xor    eax,eax
 1018a91:	mov    r13,QWORD PTR [rsp+0x38]
 1018a96:	mov    rbp,QWORD PTR [rsp+0x60]
 1018a9b:	mov    rdi,QWORD PTR [rsp+0x68]
 1018aa0:	mov    r12,QWORD PTR [rsp+0x70]
 1018aa5:	mov    r14,QWORD PTR [rsp+0x30]
 1018aaa:	add    rsp,0x40
 1018aae:	pop    r15
 1018ab0:	pop    rsi
 1018ab1:	pop    rbx
 1018ab2:	ret    
 1018ab3:	int3   
 1018ab4:	int3   
 1018ab5:	int3   
 1018ab6:	int3   
 1018ab7:	int3   
 1018ab8:	int3   
 1018ab9:	int3   
 1018aba:	int3   
 1018abb:	int3   
 1018abc:	int3   
 1018abd:	int3   
 1018abe:	int3   
 1018abf:	int3   
 1018ac0:	sub    rsp,0x58
 1018ac4:	lea    rdx,[rsp+0x20]
 1018ac9:	lea    rcx,[rip+0xfffffffffffffff0]        # 0x1018ac0
 1018ad0:	mov    r8d,0x30
 1018ad6:	call   QWORD PTR [rip+0xfffffffffffe860c]        # 0x10010e8
 1018adc:	test   rax,rax
 1018adf:	jne    0x1018ae6
 1018ae1:	add    rsp,0x58
 1018ae5:	ret    
 1018ae6:	mov    QWORD PTR [rsp+0x50],rbx
 1018aeb:	mov    rbx,QWORD PTR [rsp+0x28]
 1018af0:	xor    r8d,r8d
 1018af3:	mov    rcx,rbx
 1018af6:	xor    edx,edx
 1018af8:	call   0x1018880
 1018afd:	test   eax,eax
 1018aff:	jne    0x1018b22
 1018b01:	lea    r8d,[rax+0x1]
 1018b05:	lea    rdx,[rip+0xfffffffffffed6f4]        # 0x1006200
 1018b0c:	mov    rcx,rbx
 1018b0f:	call   0x1018880
 1018b14:	test   eax,eax
 1018b16:	jne    0x1018b22
 1018b18:	mov    rbx,QWORD PTR [rsp+0x50]
 1018b1d:	add    rsp,0x58
 1018b21:	ret    
 1018b22:	mov    eax,0x1
 1018b27:	mov    rbx,QWORD PTR [rsp+0x50]
 1018b2c:	add    rsp,0x58
 1018b30:	ret    
 1018b31:	int3   
 1018b32:	int3   
 1018b33:	int3   
 1018b34:	int3   
 1018b35:	int3   
 1018b36:	int3   
 1018b37:	int3   
 1018b38:	int3   
 1018b39:	int3   
 1018b3a:	int3   
 1018b3b:	int3   
 1018b3c:	int3   
 1018b3d:	int3   
 1018b3e:	int3   
 1018b3f:	int3   
 1018b40:	rex push rbx
 1018b42:	sub    rsp,0x20
 1018b46:	cmp    DWORD PTR [rip+0x13c73],0x0        # 0x102c7c0
 1018b4d:	mov    rbx,rcx
 1018b50:	jne    0x1018b58
 1018b52:	call   QWORD PTR [rip+0xfffffffffffe8588]        # 0x10010e0
 1018b58:	cmp    rbx,0xffffffff80000000
 1018b5f:	jne    0x1018b6e
 1018b61:	lea    rax,[rip+0xfffffffffffed6b8]        # 0x1006220
 1018b68:	add    rsp,0x20
 1018b6c:	pop    rbx
 1018b6d:	ret    
 1018b6e:	cmp    rbx,0xffffffff80000001
 1018b75:	jne    0x1018b84
 1018b77:	lea    rax,[rip+0xfffffffffffed6ca]        # 0x1006248
 1018b7e:	add    rsp,0x20
 1018b82:	pop    rbx
 1018b83:	ret    
 1018b84:	cmp    rbx,0xffffffff80000002
 1018b8b:	jne    0x1018b9a
 1018b8d:	lea    rax,[rip+0xfffffffffffed6dc]        # 0x1006270
 1018b94:	add    rsp,0x20
 1018b98:	pop    rbx
 1018b99:	ret    
 1018b9a:	cmp    rbx,0xffffffff80000003
 1018ba1:	jne    0x1018bb0
 1018ba3:	lea    rax,[rip+0xfffffffffffed6ee]        # 0x1006298
 1018baa:	add    rsp,0x20
 1018bae:	pop    rbx
 1018baf:	ret    
 1018bb0:	cmp    rbx,0xffffffff80000004
 1018bb7:	jne    0x1018bc6
 1018bb9:	lea    rax,[rip+0xfffffffffffed6f0]        # 0x10062b0
 1018bc0:	add    rsp,0x20
 1018bc4:	pop    rbx
 1018bc5:	ret    
 1018bc6:	cmp    rbx,0xffffffff80000005
 1018bcd:	jne    0x1018bdc
 1018bcf:	lea    rax,[rip+0xfffffffffffed70a]        # 0x10062e0
 1018bd6:	add    rsp,0x20
 1018bda:	pop    rbx
 1018bdb:	ret    
 1018bdc:	lea    rax,[rip+0xfffffffffffed725]        # 0x1006308
 1018be3:	cmp    rbx,0xffffffff80000006
 1018bea:	je     0x1018bef
 1018bec:	mov    rax,rbx
 1018bef:	add    rsp,0x20
 1018bf3:	pop    rbx
 1018bf4:	ret    
 1018bf5:	int3   
 1018bf6:	int3   
 1018bf7:	int3   
 1018bf8:	int3   
 1018bf9:	int3   
 1018bfa:	int3   
 1018bfb:	int3   
 1018bfc:	int3   
 1018bfd:	int3   
 1018bfe:	int3   
 1018bff:	int3   
 1018c00:	mov    QWORD PTR [rsp+0x8],rbx
 1018c05:	mov    QWORD PTR [rsp+0x10],rbp
 1018c0a:	mov    QWORD PTR [rsp+0x18],rsi
 1018c0f:	push   rdi
 1018c10:	push   r14
 1018c12:	push   r15
 1018c14:	sub    rsp,0x20
 1018c18:	mov    rbp,rdx
 1018c1b:	call   0x1018b40
 1018c20:	or     rbx,0xffffffffffffffff
 1018c24:	mov    r14,rax
 1018c27:	mov    rsi,rbx
 1018c2a:	nop    WORD PTR [rax+rax*1+0x0]
 1018c30:	inc    rsi
 1018c33:	cmp    WORD PTR [rax+rsi*2],0x0
 1018c38:	jne    0x1018c30
 1018c3a:	add    rsi,rsi
 1018c3d:	nop    DWORD PTR [rax]
 1018c40:	inc    rbx
 1018c43:	cmp    WORD PTR [rbp+rbx*2+0x0],0x0
 1018c49:	jne    0x1018c40
 1018c4b:	add    rbx,rbx
 1018c4e:	lea    rdi,[rsi+0x4]
 1018c52:	call   QWORD PTR [rip+0xfffffffffffe8498]        # 0x10010f0
 1018c58:	lea    r8,[rdi+rbx*1]
 1018c5c:	xor    edx,edx
 1018c5e:	mov    rcx,rax
 1018c61:	call   QWORD PTR [rip+0xfffffffffffe84a1]        # 0x1001108
 1018c67:	mov    r15,rax
 1018c6a:	test   rax,rax
 1018c6d:	je     0x1018ca8
 1018c6f:	mov    r8d,esi
 1018c72:	mov    rdx,r14
 1018c75:	mov    rcx,rax
 1018c78:	call   0x101750c
 1018c7d:	mov    eax,0x5c
 1018c82:	shr    rsi,1
 1018c85:	lea    rdi,[r15+rsi*2]
 1018c89:	mov    r8d,ebx
 1018c8c:	mov    rdx,rbp
 1018c8f:	lea    rcx,[rdi+0x2]
 1018c93:	mov    WORD PTR [rdi],ax
 1018c96:	call   0x101750c
 1018c9b:	shr    rbx,1
 1018c9e:	xor    eax,eax
 1018ca0:	mov    WORD PTR [rdi+rbx*2+0x2],ax
 1018ca5:	mov    rax,r15
 1018ca8:	mov    rbx,QWORD PTR [rsp+0x40]
 1018cad:	mov    rbp,QWORD PTR [rsp+0x48]
 1018cb2:	mov    rsi,QWORD PTR [rsp+0x50]
 1018cb7:	add    rsp,0x20
 1018cbb:	pop    r15
 1018cbd:	pop    r14
 1018cbf:	pop    rdi
 1018cc0:	ret    
 1018cc1:	int3   
 1018cc2:	int3   
 1018cc3:	int3   
 1018cc4:	int3   
 1018cc5:	int3   
 1018cc6:	int3   
 1018cc7:	int3   
 1018cc8:	int3   
 1018cc9:	int3   
 1018cca:	int3   
 1018ccb:	int3   
 1018ccc:	int3   
 1018ccd:	int3   
 1018cce:	int3   
 1018ccf:	int3   
 1018cd0:	mov    QWORD PTR [rsp+0x10],rbx
 1018cd5:	mov    QWORD PTR [rsp+0x18],rbp
 1018cda:	mov    QWORD PTR [rsp+0x20],rsi
 1018cdf:	push   rdi
 1018ce0:	push   r14
 1018ce2:	push   r15
 1018ce4:	sub    rsp,0x30
 1018ce8:	mov    r14,rcx
 1018ceb:	mov    r15d,0x80
 1018cf1:	or     rbx,0xffffffffffffffff
 1018cf5:	inc    rbx
 1018cf8:	cmp    WORD PTR [rcx+rbx*2],0x0
 1018cfd:	jne    0x1018cf5
 1018cff:	lea    esi,[rbx+0x80]
 1018d05:	mov    edi,esi
 1018d07:	add    rdi,rdi
 1018d0a:	call   QWORD PTR [rip+0xfffffffffffe83e0]        # 0x10010f0
 1018d10:	mov    r8,rdi
 1018d13:	mov    rcx,rax
 1018d16:	xor    edx,edx
 1018d18:	call   QWORD PTR [rip+0xfffffffffffe83ea]        # 0x1001108
 1018d1e:	mov    rbp,rax
 1018d21:	test   rax,rax
 1018d24:	je     0x1018de6
 1018d2a:	mov    QWORD PTR [rsp+0x50],r12
 1018d2f:	lea    r12,[rip+0xfffffffffffed3c2]        # 0x10060f8
 1018d36:	data16 nop WORD PTR [rax+rax*1+0x0]
 1018d40:	mov    r9d,ebx
 1018d43:	mov    r8,r14
 1018d46:	mov    edx,0x1
 1018d4b:	mov    ecx,0x400
 1018d50:	mov    DWORD PTR [rsp+0x28],0x5
 1018d58:	mov    QWORD PTR [rsp+0x20],r12
 1018d5d:	call   QWORD PTR [rip+0xfffffffffffe83ad]        # 0x1001110
 1018d63:	cmp    eax,0x2
 1018d66:	jne    0x1018d87
 1018d68:	mov    edi,DWORD PTR [rip+0x13a56]        # 0x102c7c4
 1018d6e:	cmp    edi,esi
 1018d70:	ja     0x1018d9a
 1018d72:	lea    r8d,[rdi+rdi*1]
 1018d76:	lea    rdx,[rip+0x13e83]        # 0x102cc00
 1018d7d:	mov    rcx,rbp
 1018d80:	call   0x101750c
 1018d85:	jmp    0x1018d98
 1018d87:	mov    r8d,esi
 1018d8a:	mov    rdx,rbp
 1018d8d:	mov    rcx,r14
 1018d90:	call   QWORD PTR [rip+0xfffffffffffe8342]        # 0x10010d8
 1018d96:	mov    edi,eax
 1018d98:	cmp    edi,esi
 1018d9a:	jle    0x1018dde
 1018d9c:	add    r15d,r15d
 1018d9f:	lea    esi,[rbx+r15*1]
 1018da3:	call   QWORD PTR [rip+0xfffffffffffe8347]        # 0x10010f0
 1018da9:	mov    r8,rbp
 1018dac:	mov    rcx,rax
 1018daf:	xor    edx,edx
 1018db1:	call   QWORD PTR [rip+0xfffffffffffe8349]        # 0x1001100
 1018db7:	mov    edi,esi
 1018db9:	add    rdi,rdi
 1018dbc:	call   QWORD PTR [rip+0xfffffffffffe832e]        # 0x10010f0
 1018dc2:	mov    r8,rdi
 1018dc5:	mov    rcx,rax
 1018dc8:	xor    edx,edx
 1018dca:	call   QWORD PTR [rip+0xfffffffffffe8338]        # 0x1001108
 1018dd0:	mov    rbp,rax
 1018dd3:	test   rax,rax
 1018dd6:	jne    0x1018d40
 1018ddc:	jmp    0x1018de1
 1018dde:	mov    rax,rbp
 1018de1:	mov    r12,QWORD PTR [rsp+0x50]
 1018de6:	mov    rbx,QWORD PTR [rsp+0x58]
 1018deb:	mov    rbp,QWORD PTR [rsp+0x60]
 1018df0:	mov    rsi,QWORD PTR [rsp+0x68]
 1018df5:	add    rsp,0x30
 1018df9:	pop    r15
 1018dfb:	pop    r14
 1018dfd:	pop    rdi
 1018dfe:	ret    
 1018dff:	int3   
 1018e00:	int3   
 1018e01:	int3   
 1018e02:	int3   
 1018e03:	int3   
 1018e04:	int3   
 1018e05:	int3   
 1018e06:	int3   
 1018e07:	int3   
 1018e08:	int3   
 1018e09:	int3   
 1018e0a:	int3   
 1018e0b:	int3   
 1018e0c:	int3   
 1018e0d:	int3   
 1018e0e:	int3   
 1018e0f:	int3   
 1018e10:	mov    QWORD PTR [rsp+0x20],rbx
 1018e15:	push   rbp
 1018e16:	push   rsi
 1018e17:	push   rdi
 1018e18:	sub    rsp,0x30
 1018e1c:	mov    rsi,rdx
 1018e1f:	mov    rbp,rcx
 1018e22:	mov    edi,0x80
 1018e27:	call   QWORD PTR [rip+0xfffffffffffe82c3]        # 0x10010f0
 1018e2d:	xor    edx,edx
 1018e2f:	mov    r8d,0x100
 1018e35:	mov    rcx,rax
 1018e38:	call   QWORD PTR [rip+0xfffffffffffe82ca]        # 0x1001108
 1018e3e:	mov    rbx,rax
 1018e41:	test   rax,rax
 1018e44:	je     0x1018f3b
 1018e4a:	mov    QWORD PTR [rsp+0x50],r12
 1018e4f:	mov    QWORD PTR [rsp+0x58],r14
 1018e54:	mov    QWORD PTR [rsp+0x60],r15
 1018e59:	lea    r15,[rip+0x13980]        # 0x102c7e0
 1018e60:	lea    r12,[rip+0x13b89]        # 0x102c9f0
 1018e67:	mov    r14d,0xffff
 1018e6d:	nop    DWORD PTR [rax]
 1018e70:	test   rbp,rbp
 1018e73:	je     0x1018eb5
 1018e75:	test   rsi,rsi
 1018e78:	je     0x1018eb5
 1018e7a:	lea    r8,[rip+0xfffffffffffed283]        # 0x1006104
 1018e81:	mov    r9,rbx
 1018e84:	mov    rdx,rsi
 1018e87:	mov    rcx,rbp
 1018e8a:	mov    QWORD PTR [rsp+0x28],r12
 1018e8f:	mov    DWORD PTR [rsp+0x20],edi
 1018e93:	call   QWORD PTR [rip+0xfffffffffffe8237]        # 0x10010d0
 1018e99:	lea    ecx,[rdi-0x1]
 1018e9c:	mov    r11d,eax
 1018e9f:	cmp    eax,ecx
 1018ea1:	je     0x1018eb0
 1018ea3:	cmp    WORD PTR [rbx],r14w
 1018ea7:	jne    0x1018eb0
 1018ea9:	cmp    WORD PTR [rbx+0x2],0x0
 1018eae:	je     0x1018eb5
 1018eb0:	cmp    eax,0xffffffff
 1018eb3:	jne    0x1018ed7
 1018eb5:	lea    r8,[rip+0xfffffffffffed248]        # 0x1006104
 1018ebc:	mov    r9,rbx
 1018ebf:	mov    rdx,rsi
 1018ec2:	mov    rcx,rbp
 1018ec5:	mov    QWORD PTR [rsp+0x28],r15
 1018eca:	mov    DWORD PTR [rsp+0x20],edi
 1018ece:	call   QWORD PTR [rip+0xfffffffffffe81fc]        # 0x10010d0
 1018ed4:	mov    r11d,eax
 1018ed7:	test   rbp,rbp
 1018eda:	je     0x1018ee4
 1018edc:	lea    eax,[rdi-0x1]
 1018edf:	test   rsi,rsi
 1018ee2:	jne    0x1018ee7
 1018ee4:	lea    eax,[rdi-0x2]
 1018ee7:	cmp    r11d,eax
 1018eea:	jne    0x1018f29
 1018eec:	add    edi,edi
 1018eee:	call   QWORD PTR [rip+0xfffffffffffe81fc]        # 0x10010f0
 1018ef4:	mov    r8,rbx
 1018ef7:	mov    rcx,rax
 1018efa:	xor    edx,edx
 1018efc:	call   QWORD PTR [rip+0xfffffffffffe81fe]        # 0x1001100
 1018f02:	mov    ebx,edi
 1018f04:	add    rbx,rbx
 1018f07:	call   QWORD PTR [rip+0xfffffffffffe81e3]        # 0x10010f0
 1018f0d:	mov    r8,rbx
 1018f10:	mov    rcx,rax
 1018f13:	xor    edx,edx
 1018f15:	call   QWORD PTR [rip+0xfffffffffffe81ed]        # 0x1001108
 1018f1b:	mov    rbx,rax
 1018f1e:	test   rax,rax
 1018f21:	jne    0x1018e70
 1018f27:	jmp    0x1018f2c
 1018f29:	mov    rax,rbx
 1018f2c:	mov    r14,QWORD PTR [rsp+0x58]
 1018f31:	mov    r12,QWORD PTR [rsp+0x50]
 1018f36:	mov    r15,QWORD PTR [rsp+0x60]
 1018f3b:	mov    rbx,QWORD PTR [rsp+0x68]
 1018f40:	add    rsp,0x30
 1018f44:	pop    rdi
 1018f45:	pop    rsi
 1018f46:	pop    rbp
 1018f47:	ret    
 1018f48:	int3   
 1018f49:	int3   
 1018f4a:	int3   
 1018f4b:	int3   
 1018f4c:	int3   
 1018f4d:	int3   
 1018f4e:	int3   
 1018f4f:	int3   
 1018f50:	rex push rdi
 1018f52:	push   r12
 1018f54:	push   r13
 1018f56:	sub    rsp,0x40
 1018f5a:	mov    r13,rdx
 1018f5d:	mov    r12,rcx
 1018f60:	call   0x1018e10
 1018f65:	mov    rdi,rax
 1018f68:	test   rax,rax
 1018f6b:	je     0x101907c
 1018f71:	test   r13,r13
 1018f74:	je     0x101907c
 1018f7a:	test   r12,r12
 1018f7d:	je     0x101907c
 1018f83:	mov    QWORD PTR [rsp+0x60],rbx
 1018f88:	mov    QWORD PTR [rsp+0x68],rbp
 1018f8d:	mov    QWORD PTR [rsp+0x70],rsi
 1018f92:	mov    eax,0xffff
 1018f97:	mov    QWORD PTR [rsp+0x38],r14
 1018f9c:	mov    QWORD PTR [rsp+0x30],r15
 1018fa1:	cmp    WORD PTR [rdi],ax
 1018fa4:	jne    0x101902d
 1018faa:	cmp    WORD PTR [rdi+0x2],0x0
 1018faf:	jne    0x101902d
 1018fb1:	cmp    DWORD PTR [rip+0x13818],0x0        # 0x102c7d0
 1018fb8:	je     0x101902d
 1018fba:	or     rbp,0xffffffffffffffff
 1018fbe:	mov    rbx,rbp
 1018fc1:	inc    rbx
 1018fc4:	cmp    WORD PTR [r12+rbx*2],0x0
 1018fca:	jne    0x1018fc1
 1018fcc:	mov    rsi,rbp
 1018fcf:	nop
 1018fd0:	inc    rsi
 1018fd3:	cmp    WORD PTR [r13+rsi*2+0x0],0x0
 1018fda:	jne    0x1018fd0
 1018fdc:	xor    r14d,r14d
 1018fdf:	lea    r15,[rip+0xc262]        # 0x1025248
 1018fe6:	data16 nop WORD PTR [rax+rax*1+0x0]
 1018ff0:	mov    rcx,QWORD PTR [r15]
 1018ff3:	mov    eax,DWORD PTR [r15+0x8]
 1018ff7:	mov    r9d,ebx
 1018ffa:	mov    DWORD PTR [rsp+0x28],eax
 1018ffe:	mov    QWORD PTR [rsp+0x20],rcx
 1019003:	mov    r8,r12
 1019006:	mov    ecx,0x400
 101900b:	mov    edx,0x1
 1019010:	call   QWORD PTR [rip+0xfffffffffffe80fa]        # 0x1001110
 1019016:	cmp    eax,0x2
 1019019:	je     0x1019086
 101901b:	inc    r14d
 101901e:	add    r15,0x20
 1019022:	cmp    r14d,0x1
 1019026:	jb     0x1018ff0
 1019028:	mov    eax,0xffff
 101902d:	test   rdi,rdi
 1019030:	je     0x1019060
 1019032:	cmp    WORD PTR [rdi],ax
 1019035:	jne    0x101903e
 1019037:	cmp    WORD PTR [rdi+0x2],0x0
 101903c:	je     0x1019060
 101903e:	mov    rcx,rdi
 1019041:	call   0x1018cd0
 1019046:	mov    rbx,rax
 1019049:	call   QWORD PTR [rip+0xfffffffffffe80a1]        # 0x10010f0
 101904f:	mov    r8,rdi
 1019052:	mov    rcx,rax
 1019055:	xor    edx,edx
 1019057:	call   QWORD PTR [rip+0xfffffffffffe80a3]        # 0x1001100
 101905d:	mov    rdi,rbx
 1019060:	mov    r15,QWORD PTR [rsp+0x30]
 1019065:	mov    r14,QWORD PTR [rsp+0x38]
 101906a:	mov    rsi,QWORD PTR [rsp+0x70]
 101906f:	mov    rbp,QWORD PTR [rsp+0x68]
 1019074:	mov    rbx,QWORD PTR [rsp+0x60]
 1019079:	mov    rax,rdi
 101907c:	add    rsp,0x40
 1019080:	pop    r13
 1019082:	pop    r12
 1019084:	pop    rdi
 1019085:	ret    
 1019086:	lea    rcx,[rip+0xc1bb]        # 0x1025248
 101908d:	movsxd rbx,r14d
 1019090:	shl    rbx,0x5
 1019094:	add    rbx,rcx
 1019097:	mov    rcx,QWORD PTR [rbx+0x10]
 101909b:	call   0x1018cd0
 10190a0:	test   rax,rax
 10190a3:	je     0x10190ff
 10190a5:	inc    rbp
 10190a8:	cmp    WORD PTR [rax+rbp*2],0x0
 10190ad:	jne    0x10190a5
 10190af:	mov    r9d,ebp
 10190b2:	mov    r8,rax
 10190b5:	mov    edx,0x1
 10190ba:	mov    ecx,0x400
 10190bf:	mov    DWORD PTR [rsp+0x28],esi
 10190c3:	mov    QWORD PTR [rsp+0x20],r13
 10190c8:	call   QWORD PTR [rip+0xfffffffffffe8042]        # 0x1001110
 10190ce:	cmp    eax,0x2
 10190d1:	jne    0x1019028
 10190d7:	call   QWORD PTR [rip+0xfffffffffffe8013]        # 0x10010f0
 10190dd:	mov    r8,rdi
 10190e0:	xor    edx,edx
 10190e2:	mov    rcx,rax
 10190e5:	call   QWORD PTR [rip+0xfffffffffffe8015]        # 0x1001100
 10190eb:	mov    rdx,QWORD PTR [rbx+0x10]
 10190ef:	mov    rcx,r12
 10190f2:	call   0x1018e10
 10190f7:	mov    rdi,rax
 10190fa:	jmp    0x1019028
 10190ff:	call   QWORD PTR [rip+0xfffffffffffe7feb]        # 0x10010f0
 1019105:	mov    r8,rdi
 1019108:	xor    edx,edx
 101910a:	mov    rcx,rax
 101910d:	call   QWORD PTR [rip+0xfffffffffffe7fed]        # 0x1001100
 1019113:	xor    edi,edi
 1019115:	jmp    0x1019060
 101911a:	int3   
 101911b:	int3   
 101911c:	int3   
 101911d:	int3   
 101911e:	int3   
 101911f:	int3   
 1019120:	rex push rbx
 1019122:	sub    rsp,0x20
 1019126:	cmp    DWORD PTR [rip+0x13693],0x0        # 0x102c7c0
 101912d:	mov    rbx,rcx
 1019130:	je     0x1019195
 1019132:	cmp    rcx,0xffffffff80000000
 1019139:	je     0x1019185
 101913b:	cmp    rcx,0xffffffff80000001
 1019142:	je     0x1019185
 1019144:	cmp    rcx,0xffffffff80000002
 101914b:	je     0x1019185
 101914d:	cmp    rcx,0xffffffff80000003
 1019154:	je     0x1019185
 1019156:	cmp    rcx,0xffffffff80000004
 101915d:	je     0x1019185
 101915f:	cmp    rcx,0xffffffff80000005
 1019166:	je     0x1019185
 1019168:	cmp    rcx,0xffffffff80000006
 101916f:	je     0x1019185
 1019171:	call   QWORD PTR [rip+0xfffffffffffe7f79]        # 0x10010f0
 1019177:	mov    r8,rbx
 101917a:	xor    edx,edx
 101917c:	mov    rcx,rax
 101917f:	call   QWORD PTR [rip+0xfffffffffffe7f7b]        # 0x1001100
 1019185:	xor    ecx,ecx
 1019187:	call   QWORD PTR [rip+0xfffffffffffe81a3]        # 0x1001330
 101918d:	xor    eax,eax
 101918f:	add    rsp,0x20
 1019193:	pop    rbx
 1019194:	ret    
 1019195:	add    rsp,0x20
 1019199:	pop    rbx
 101919a:	rex.W jmp QWORD PTR [rip+0xfffffffffffe7e6f]        # 0x1001010
 10191a1:	int3   
 10191a2:	int3   
 10191a3:	int3   
 10191a4:	int3   
 10191a5:	int3   
 10191a6:	int3   
 10191a7:	int3   
 10191a8:	int3   
 10191a9:	int3   
 10191aa:	int3   
 10191ab:	int3   
 10191ac:	int3   
 10191ad:	int3   
 10191ae:	int3   
 10191af:	int3   
 10191b0:	rex push rdi
 10191b2:	sub    rsp,0x20
 10191b6:	mov    rdi,rdx
 10191b9:	cmp    rcx,0xffffffff80000000
 10191c0:	je     0x101929c
 10191c6:	cmp    rcx,0xffffffff80000001
 10191cd:	je     0x101929c
 10191d3:	cmp    rcx,0xffffffff80000002
 10191da:	je     0x101929c
 10191e0:	cmp    rcx,0xffffffff80000003
 10191e7:	je     0x101929c
 10191ed:	cmp    rcx,0xffffffff80000004
 10191f4:	je     0x101929c
 10191fa:	cmp    rcx,0xffffffff80000005
 1019201:	je     0x101929c
 1019207:	cmp    rcx,0xffffffff80000006
 101920e:	je     0x101929c
 1019214:	mov    QWORD PTR [rsp+0x30],rbx
 1019219:	mov    QWORD PTR [rsp+0x38],rbp
 101921e:	mov    QWORD PTR [rsp+0x40],rsi
 1019223:	call   0x1018b40
 1019228:	or     rcx,0xffffffffffffffff
 101922c:	mov    rbx,rax
 101922f:	nop
 1019230:	inc    rcx
 1019233:	cmp    WORD PTR [rax+rcx*2],0x0
 1019238:	jne    0x1019230
 101923a:	lea    rbp,[rcx*2+0x2]
 1019242:	call   QWORD PTR [rip+0xfffffffffffe7ea8]        # 0x10010f0
 1019248:	mov    r8,rbp
 101924b:	mov    rcx,rax
 101924e:	xor    edx,edx
 1019250:	call   QWORD PTR [rip+0xfffffffffffe7eb2]        # 0x1001108
 1019256:	mov    rsi,rax
 1019259:	test   rax,rax
 101925c:	jne    0x101927f
 101925e:	lea    ecx,[rax+0x8]
 1019261:	call   QWORD PTR [rip+0xfffffffffffe80c9]        # 0x1001330
 1019267:	lea    eax,[rsi+0x8]
 101926a:	mov    rbp,QWORD PTR [rsp+0x38]
 101926f:	mov    rbx,QWORD PTR [rsp+0x30]
 1019274:	mov    rsi,QWORD PTR [rsp+0x40]
 1019279:	add    rsp,0x20
 101927d:	pop    rdi
 101927e:	ret    
 101927f:	mov    r8d,ebp
 1019282:	mov    rdx,rbx
 1019285:	mov    rcx,rax
 1019288:	call   0x101750c
 101928d:	xor    ecx,ecx
 101928f:	mov    QWORD PTR [rdi],rsi
 1019292:	call   QWORD PTR [rip+0xfffffffffffe8098]        # 0x1001330
 1019298:	xor    eax,eax
 101929a:	jmp    0x101926a
 101929c:	mov    QWORD PTR [rdx],rcx
 101929f:	xor    ecx,ecx
 10192a1:	call   QWORD PTR [rip+0xfffffffffffe8089]        # 0x1001330
 10192a7:	xor    eax,eax
 10192a9:	add    rsp,0x20
 10192ad:	pop    rdi
 10192ae:	ret    
 10192af:	int3   
 10192b0:	int3   
 10192b1:	int3   
 10192b2:	int3   
 10192b3:	int3   
 10192b4:	int3   
 10192b5:	int3   
 10192b6:	int3   
 10192b7:	int3   
 10192b8:	int3   
 10192b9:	int3   
 10192ba:	int3   
 10192bb:	int3   
 10192bc:	int3   
 10192bd:	int3   
 10192be:	int3   
 10192bf:	int3   
 10192c0:	push   r14
 10192c2:	sub    rsp,0x20
 10192c6:	cmp    DWORD PTR [rip+0x134f3],0x0        # 0x102c7c0
 10192cd:	mov    r14,r8
 10192d0:	je     0x10193d3
 10192d6:	test   rdx,rdx
 10192d9:	je     0x10193c5
 10192df:	cmp    WORD PTR [rdx],0x0
 10192e3:	je     0x10193c5
 10192e9:	mov    QWORD PTR [rsp+0x30],rbx
 10192ee:	mov    QWORD PTR [rsp+0x38],rsi
 10192f3:	call   0x1018c00
 10192f8:	mov    rsi,rax
 10192fb:	test   rax,rax
 10192fe:	jne    0x1019320
 1019300:	mov    ebx,0x8
 1019305:	mov    ecx,ebx
 1019307:	call   QWORD PTR [rip+0xfffffffffffe8023]        # 0x1001330
 101930d:	mov    rsi,QWORD PTR [rsp+0x38]
 1019312:	mov    eax,ebx
 1019314:	mov    rbx,QWORD PTR [rsp+0x30]
 1019319:	add    rsp,0x20
 101931d:	pop    r14
 101931f:	ret    
 1019320:	xor    edx,edx
 1019322:	mov    rcx,rax
 1019325:	mov    QWORD PTR [rsp+0x40],rdi
 101932a:	call   0x1018e10
 101932f:	mov    rdi,rax
 1019332:	test   rax,rax
 1019335:	je     0x101938c
 1019337:	mov    eax,0xffff
 101933c:	cmp    WORD PTR [rdi],ax
 101933f:	jne    0x101934f
 1019341:	cmp    WORD PTR [rdi+0x2],0x0
 1019346:	jne    0x101934f
 1019348:	mov    ebx,0x2
 101934d:	jmp    0x1019351
 101934f:	xor    ebx,ebx
 1019351:	call   QWORD PTR [rip+0xfffffffffffe7d99]        # 0x10010f0
 1019357:	mov    r8,rdi
 101935a:	xor    edx,edx
 101935c:	mov    rcx,rax
 101935f:	call   QWORD PTR [rip+0xfffffffffffe7d9b]        # 0x1001100
 1019365:	test   ebx,ebx
 1019367:	jne    0x1019391
 1019369:	mov    ecx,ebx
 101936b:	mov    QWORD PTR [r14],rsi
 101936e:	call   QWORD PTR [rip+0xfffffffffffe7fbc]        # 0x1001330
 1019374:	mov    rdi,QWORD PTR [rsp+0x40]
 1019379:	mov    rsi,QWORD PTR [rsp+0x38]
 101937e:	mov    eax,ebx
 1019380:	mov    rbx,QWORD PTR [rsp+0x30]
 1019385:	add    rsp,0x20
 1019389:	pop    r14
 101938b:	ret    
 101938c:	mov    ebx,0x8
 1019391:	call   QWORD PTR [rip+0xfffffffffffe7d59]        # 0x10010f0
 1019397:	mov    r8,rsi
 101939a:	xor    edx,edx
 101939c:	mov    rcx,rax
 101939f:	call   QWORD PTR [rip+0xfffffffffffe7d5b]        # 0x1001100
 10193a5:	mov    ecx,ebx
 10193a7:	call   QWORD PTR [rip+0xfffffffffffe7f83]        # 0x1001330
 10193ad:	mov    rdi,QWORD PTR [rsp+0x40]
 10193b2:	mov    rsi,QWORD PTR [rsp+0x38]
 10193b7:	mov    eax,ebx
 10193b9:	mov    rbx,QWORD PTR [rsp+0x30]
 10193be:	add    rsp,0x20
 10193c2:	pop    r14
 10193c4:	ret    
 10193c5:	mov    rdx,r8
 10193c8:	add    rsp,0x20
 10193cc:	pop    r14
 10193ce:	jmp    0x10191b0
 10193d3:	add    rsp,0x20
 10193d7:	pop    r14
 10193d9:	rex.W jmp QWORD PTR [rip+0xfffffffffffe7c50]        # 0x1001030
 10193e0:	int3   
 10193e1:	int3   
 10193e2:	int3   
 10193e3:	int3   
 10193e4:	int3   
 10193e5:	int3   
 10193e6:	jmp    QWORD PTR [rip+0xfffffffffffe812c]        # 0x1001518
 10193ec:	int3   
 10193ed:	int3   
 10193ee:	int3   
 10193ef:	int3   
 10193f0:	int3   
 10193f1:	int3   
 10193f2:	int3   
 10193f3:	int3   
 10193f4:	mov    QWORD PTR [rsp+0x8],rbx
 10193f9:	mov    QWORD PTR [rsp+0x10],rsi
 10193fe:	push   rdi
 10193ff:	sub    rsp,0x20
 1019403:	mov    esi,edx
 1019405:	mov    rbx,rcx
 1019408:	test   dl,0x2
 101940b:	je     0x1019437
 101940d:	mov    r8d,DWORD PTR [rcx-0x8]
 1019411:	lea    r9,[rip+0x58]        # 0x1019470
 1019418:	mov    edx,0x18
 101941d:	call   0x101760c
 1019422:	test   sil,0x1
 1019426:	je     0x1019431
 1019428:	lea    rcx,[rbx-0x8]
 101942c:	call   0x100bccc
 1019431:	lea    rax,[rbx-0x8]
 1019435:	jmp    0x101944d
 1019437:	call   0x1019470
 101943c:	test   sil,0x1
 1019440:	je     0x101944a
 1019442:	mov    rcx,rbx
 1019445:	call   0x100bccc
 101944a:	mov    rax,rbx
 101944d:	mov    rbx,QWORD PTR [rsp+0x30]
 1019452:	mov    rsi,QWORD PTR [rsp+0x38]
 1019457:	add    rsp,0x20
 101945b:	pop    rdi
 101945c:	ret    
 101945d:	int3   
 101945e:	int3   
 101945f:	int3   
 1019460:	int3   
 1019461:	int3   
 1019462:	int3   
 1019463:	int3   
 1019464:	jmp    QWORD PTR [rip+0xfffffffffffe80a6]        # 0x1001510
 101946a:	int3   
 101946b:	int3   
 101946c:	int3   
 101946d:	int3   
 101946e:	int3   
 101946f:	int3   
 1019470:	jmp    QWORD PTR [rip+0xfffffffffffe8092]        # 0x1001508
 1019476:	int3   
 1019477:	int3   
 1019478:	int3   
 1019479:	int3   
 101947a:	int3   
 101947b:	int3   
 101947c:	int3   
 101947d:	int3   
 101947e:	int3   
 101947f:	int3   
 1019480:	mov    QWORD PTR [rsp+0x8],rbx
 1019485:	push   rdi
 1019486:	sub    rsp,0x20
 101948a:	mov    rdi,rcx
 101948d:	lea    rcx,[rip+0x13974]        # 0x102ce08
 1019494:	call   0x10198a0
 1019499:	test   eax,eax
 101949b:	jne    0x10194e2
 101949d:	lea    rcx,[rip+0x13964]        # 0x102ce08
 10194a4:	call   0x1019b00
 10194a9:	test   eax,eax
 10194ab:	je     0x10194e2
 10194ad:	lea    rcx,[rip+0x13964]        # 0x102ce18
 10194b4:	xor    edx,edx
 10194b6:	mov    r8d,0x1b60
 10194bc:	call   0x100c10e
 10194c1:	lea    rcx,[rip+0x13950]        # 0x102ce18
 10194c8:	call   0x101a8b0
 10194cd:	lea    rcx,[rip+0x13934]        # 0x102ce08
 10194d4:	xor    edx,edx
 10194d6:	mov    QWORD PTR [rip+0x13933],rax        # 0x102ce10
 10194dd:	call   0x1019b60
 10194e2:	lea    rcx,[rip+0x1391f]        # 0x102ce08
 10194e9:	call   0x10198c0
 10194ee:	test   eax,eax
 10194f0:	mov    ebx,eax
 10194f2:	js     0x1019511
 10194f4:	mov    rcx,QWORD PTR [rip+0x13915]        # 0x102ce10
 10194fb:	mov    QWORD PTR [rdi],rcx
 10194fe:	mov    rdx,QWORD PTR [rcx]
 1019501:	call   QWORD PTR [rdx+0x8]
 1019504:	mov    eax,ebx
 1019506:	mov    rbx,QWORD PTR [rsp+0x30]
 101950b:	add    rsp,0x20
 101950f:	pop    rdi
 1019510:	ret    
 1019511:	mov    QWORD PTR [rdi],0x0
 1019518:	mov    rbx,QWORD PTR [rsp+0x30]
 101951d:	add    rsp,0x20
 1019521:	pop    rdi
 1019522:	ret    
 1019523:	int3   
 1019524:	int3   
 1019525:	int3   
 1019526:	int3   
 1019527:	int3   
 1019528:	int3   
 1019529:	int3   
 101952a:	int3   
 101952b:	int3   
 101952c:	int3   
 101952d:	int3   
 101952e:	int3   
 101952f:	int3   
 1019530:	mov    QWORD PTR [rsp+0x10],rsi
 1019535:	push   rdi
 1019536:	sub    rsp,0x20
 101953a:	mov    rsi,rcx
 101953d:	lea    rcx,[rip+0x138c4]        # 0x102ce08
 1019544:	call   0x10198a0
 1019549:	test   eax,eax
 101954b:	jne    0x1019592
 101954d:	lea    rcx,[rip+0x138b4]        # 0x102ce08
 1019554:	call   0x1019b00
 1019559:	test   eax,eax
 101955b:	je     0x1019592
 101955d:	lea    rcx,[rip+0x138b4]        # 0x102ce18
 1019564:	xor    edx,edx
 1019566:	mov    r8d,0x1b60
 101956c:	call   0x100c10e
 1019571:	lea    rcx,[rip+0x138a0]        # 0x102ce18
 1019578:	call   0x101a8b0
 101957d:	lea    rcx,[rip+0x13884]        # 0x102ce08
 1019584:	xor    edx,edx
 1019586:	mov    QWORD PTR [rip+0x13883],rax        # 0x102ce10
 101958d:	call   0x1019b60
 1019592:	lea    rcx,[rip+0x1386f]        # 0x102ce08
 1019599:	mov    QWORD PTR [rsp+0x30],rbx
 101959e:	call   0x10198c0
 10195a3:	test   eax,eax
 10195a5:	mov    edi,eax
 10195a7:	js     0x10195bb
 10195a9:	mov    rbx,QWORD PTR [rip+0x13860]        # 0x102ce10
 10195b0:	mov    rcx,rbx
 10195b3:	mov    rax,QWORD PTR [rbx]
 10195b6:	call   QWORD PTR [rax+0x8]
 10195b9:	jmp    0x10195bd
 10195bb:	xor    ebx,ebx
 10195bd:	test   edi,edi
 10195bf:	jne    0x10195d7
 10195c1:	mov    rdx,rsi
 10195c4:	mov    rcx,rbx
 10195c7:	call   0x101a000
 10195cc:	mov    rdx,QWORD PTR [rbx]
 10195cf:	mov    rcx,rbx
 10195d2:	mov    edi,eax
 10195d4:	call   QWORD PTR [rdx+0x10]
 10195d7:	xor    edx,edx
 10195d9:	mov    r8d,0x8000
 10195df:	mov    rcx,rsi
 10195e2:	call   QWORD PTR [rip+0xfffffffffffe7ad8]        # 0x10010c0
 10195e8:	mov    rbx,QWORD PTR [rsp+0x30]
 10195ed:	mov    rsi,QWORD PTR [rsp+0x38]
 10195f2:	mov    eax,edi
 10195f4:	add    rsp,0x20
 10195f8:	pop    rdi
 10195f9:	ret    
 10195fa:	int3   
 10195fb:	int3   
 10195fc:	int3   
 10195fd:	int3   
 10195fe:	int3   
 10195ff:	int3   
 1019600:	mov    QWORD PTR [rcx],0x0
 1019607:	mov    rax,rcx
 101960a:	ret    
 101960b:	int3   
 101960c:	int3   
 101960d:	int3   
 101960e:	int3   
 101960f:	int3   
 1019610:	int3   
 1019611:	int3   
 1019612:	int3   
 1019613:	int3   
 1019614:	int3   
 1019615:	int3   
 1019616:	int3   
 1019617:	int3   
 1019618:	int3   
 1019619:	int3   
 101961a:	int3   
 101961b:	int3   
 101961c:	int3   
 101961d:	int3   
 101961e:	int3   
 101961f:	int3   
 1019620:	mov    QWORD PTR [rsp+0x8],rbx
 1019625:	push   rdi
 1019626:	sub    rsp,0x30
 101962a:	xor    edi,edi
 101962c:	mov    QWORD PTR [rsp+0x20],rdi
 1019631:	mov    ebx,edi
 1019633:	mov    r8,rdx
 1019636:	xor    edx,edx
 1019638:	mov    rcx,QWORD PTR [rcx]
 101963b:	call   QWORD PTR [rip+0xfffffffffffe7ac7]        # 0x1001108
 1019641:	mov    QWORD PTR [rsp+0x20],rax
 1019646:	jmp    0x1019668
 1019648:	mov    ebx,eax
 101964a:	cmp    eax,0xc00000fd
 101964f:	jne    0x1019657
 1019651:	call   QWORD PTR [rip+0xfffffffffffe7df1]        # 0x1001448
 1019657:	mov    eax,0x80004005
 101965c:	test   ebx,ebx
 101965e:	cmovns ebx,eax
 1019661:	xor    edi,edi
 1019663:	mov    rax,QWORD PTR [rsp+0x20]
 1019668:	test   ebx,ebx
 101966a:	cmovs  rax,rdi
 101966e:	mov    rbx,QWORD PTR [rsp+0x40]
 1019673:	add    rsp,0x30
 1019677:	pop    rdi
 1019678:	ret    
 1019679:	int3   
 101967a:	int3   
 101967b:	int3   
 101967c:	int3   
 101967d:	int3   
 101967e:	int3   
 101967f:	int3   
 1019680:	sub    rsp,0x28
 1019684:	mov    r8,rdx
 1019687:	xor    edx,edx
 1019689:	mov    rcx,QWORD PTR [rcx]
 101968c:	call   QWORD PTR [rip+0xfffffffffffe7a6e]        # 0x1001100
 1019692:	jmp    0x10196a2
 1019694:	cmp    eax,0xc00000fd
 1019699:	jne    0x10196a2
 101969b:	call   QWORD PTR [rip+0xfffffffffffe7da7]        # 0x1001448
 10196a1:	nop
 10196a2:	add    rsp,0x28
 10196a6:	ret    
 10196a7:	int3   
 10196a8:	int3   
 10196a9:	int3   
 10196aa:	int3   
 10196ab:	int3   
 10196ac:	int3   
 10196ad:	int3   
 10196ae:	int3   
 10196af:	int3   
 10196b0:	mov    QWORD PTR [rcx],0x0
 10196b7:	mov    rax,rcx
 10196ba:	ret    
 10196bb:	int3   
 10196bc:	int3   
 10196bd:	int3   
 10196be:	int3   
 10196bf:	int3   
 10196c0:	int3   
 10196c1:	int3   
 10196c2:	int3   
 10196c3:	int3   
 10196c4:	int3   
 10196c5:	int3   
 10196c6:	int3   
 10196c7:	int3   
 10196c8:	int3   
 10196c9:	int3   
 10196ca:	int3   
 10196cb:	int3   
 10196cc:	int3   
 10196cd:	int3   
 10196ce:	int3   
 10196cf:	int3   
 10196d0:	mov    QWORD PTR [rsp+0x10],rbx
 10196d5:	mov    QWORD PTR [rsp+0x8],rcx
 10196da:	push   rdi
 10196db:	sub    rsp,0x20
 10196df:	mov    rdi,rcx
 10196e2:	xor    ebx,ebx
 10196e4:	mov    rcx,QWORD PTR [rcx]
 10196e7:	test   rcx,rcx
 10196ea:	je     0x10196f2
 10196ec:	mov    rax,QWORD PTR [rcx]
 10196ef:	call   QWORD PTR [rax+0x10]
 10196f2:	jmp    0x1019712
 10196f4:	mov    ebx,eax
 10196f6:	cmp    eax,0xc00000fd
 10196fb:	jne    0x1019703
 10196fd:	call   QWORD PTR [rip+0xfffffffffffe7d45]        # 0x1001448
 1019703:	mov    eax,0x80004005
 1019708:	test   ebx,ebx
 101970a:	cmovns ebx,eax
 101970d:	mov    rdi,QWORD PTR [rsp+0x30]
 1019712:	mov    QWORD PTR [rdi],0x0
 1019719:	mov    eax,ebx
 101971b:	mov    rbx,QWORD PTR [rsp+0x38]
 1019720:	add    rsp,0x20
 1019724:	pop    rdi
 1019725:	ret    
 1019726:	int3   
 1019727:	int3   
 1019728:	int3   
 1019729:	int3   
 101972a:	int3   
 101972b:	int3   
 101972c:	int3   
 101972d:	int3   
 101972e:	int3   
 101972f:	int3   
 1019730:	mov    QWORD PTR [rsp+0x8],rbx
 1019735:	mov    QWORD PTR [rsp+0x10],rsi
 101973a:	push   rdi
 101973b:	sub    rsp,0x20
 101973f:	mov    rdi,rdx
 1019742:	mov    rsi,rcx
 1019745:	call   0x10196d0
 101974a:	xor    ebx,ebx
 101974c:	test   rdi,rdi
 101974f:	je     0x101975a
 1019751:	mov    rax,QWORD PTR [rdi]
 1019754:	mov    rcx,rdi
 1019757:	call   QWORD PTR [rax+0x8]
 101975a:	mov    QWORD PTR [rsi],rdi
 101975d:	jmp    0x1019778
 101975f:	mov    ebx,eax
 1019761:	cmp    eax,0xc00000fd
 1019766:	jne    0x101976e
 1019768:	call   QWORD PTR [rip+0xfffffffffffe7cda]        # 0x1001448
 101976e:	mov    eax,0x80004005
 1019773:	test   ebx,ebx
 1019775:	cmovns ebx,eax
 1019778:	mov    eax,ebx
 101977a:	mov    rbx,QWORD PTR [rsp+0x30]
 101977f:	mov    rsi,QWORD PTR [rsp+0x38]
 1019784:	add    rsp,0x20
 1019788:	pop    rdi
 1019789:	ret    
 101978a:	int3   
 101978b:	int3   
 101978c:	int3   
 101978d:	int3   
 101978e:	int3   
 101978f:	int3   
 1019790:	mov    QWORD PTR [rcx],0x0
 1019797:	ret    
 1019798:	int3   
 1019799:	int3   
 101979a:	int3   
 101979b:	int3   
 101979c:	int3   
 101979d:	int3   
 101979e:	int3   
 101979f:	int3   
 10197a0:	mov    rax,QWORD PTR [rcx]
 10197a3:	ret    
 10197a4:	int3   
 10197a5:	int3   
 10197a6:	int3   
 10197a7:	int3   
 10197a8:	int3   
 10197a9:	int3   
 10197aa:	int3   
 10197ab:	int3   
 10197ac:	int3   
 10197ad:	int3   
 10197ae:	int3   
 10197af:	int3   
 10197b0:	or     r9d,0xffffffff
 10197b4:	test   rdx,rdx
 10197b7:	mov    r10,rcx
 10197ba:	je     0x10197f2
 10197bc:	lea    r11,[rip+0xfffffffffffecbcd]        # 0x1006390
 10197c3:	nop
 10197c4:	data16 data16 xchg ax,ax
 10197c8:	data16 data16 xchg ax,ax
 10197cc:	data16 data16 xchg ax,ax
 10197d0:	movzx  r8d,BYTE PTR [r10]
 10197d4:	mov    ecx,r9d
 10197d7:	add    r10,0x1
 10197db:	xor    r8b,r9b
 10197de:	shr    ecx,0x8
 10197e1:	movzx  eax,r8b
 10197e5:	mov    r9d,DWORD PTR [r11+rax*4]
 10197e9:	xor    r9d,ecx
 10197ec:	sub    rdx,0x1
 10197f0:	jne    0x10197d0
 10197f2:	mov    eax,r9d
 10197f5:	ret    
 10197f6:	int3   
 10197f7:	int3   
 10197f8:	int3   
 10197f9:	int3   
 10197fa:	int3   
 10197fb:	int3   
 10197fc:	int3   
 10197fd:	int3   
 10197fe:	int3   
 10197ff:	int3   
 1019800:	sub    rsp,0x8
 1019804:	test   rcx,rcx
 1019807:	mov    r8,rcx
 101980a:	je     0x101986a
 101980c:	mov    QWORD PTR [rsp],rdi
 1019810:	or     rcx,0xffffffffffffffff
 1019814:	xor    eax,eax
 1019816:	mov    rdi,r8
 1019819:	repnz scas ax,WORD PTR es:[rdi]
 101981c:	mov    edi,0xffffffff
 1019821:	not    rcx
 1019824:	lea    r9,[rcx-0x1]
 1019828:	add    r9,r9
 101982b:	je     0x101985f
 101982d:	lea    r10,[rip+0xfffffffffffecb5c]        # 0x1006390
 1019834:	data16 data16 xchg ax,ax
 1019838:	data16 data16 xchg ax,ax
 101983c:	data16 data16 xchg ax,ax
 1019840:	movzx  edx,BYTE PTR [r8]
 1019844:	mov    eax,edi
 1019846:	add    r8,0x1
 101984a:	xor    dl,dil
 101984d:	shr    eax,0x8
 1019850:	movzx  ecx,dl
 1019853:	mov    edi,DWORD PTR [r10+rcx*4]
 1019857:	xor    edi,eax
 1019859:	sub    r9,0x1
 101985d:	jne    0x1019840
 101985f:	mov    eax,edi
 1019861:	mov    rdi,QWORD PTR [rsp]
 1019865:	add    rsp,0x8
 1019869:	ret    
 101986a:	xor    eax,eax
 101986c:	add    rsp,0x8
 1019870:	ret    
 1019871:	int3   
 1019872:	int3   
 1019873:	int3   
 1019874:	int3   
 1019875:	int3   
 1019876:	int3   
 1019877:	int3   
 1019878:	int3   
 1019879:	int3   
 101987a:	int3   
 101987b:	int3   
 101987c:	int3   
 101987d:	int3   
 101987e:	int3   
 101987f:	int3   
 1019880:	xor    eax,eax
 1019882:	mov    DWORD PTR [rcx],eax
 1019884:	mov    DWORD PTR [rcx+0x4],eax
 1019887:	mov    rax,rcx
 101988a:	ret    
 101988b:	int3   
 101988c:	int3   
 101988d:	int3   
 101988e:	int3   
 101988f:	int3   
 1019890:	int3   
 1019891:	int3   
 1019892:	int3   
 1019893:	int3   
 1019894:	int3   
 1019895:	int3   
 1019896:	int3   
 1019897:	int3   
 1019898:	int3   
 1019899:	int3   
 101989a:	int3   
 101989b:	int3   
 101989c:	int3   
 101989d:	int3   
 101989e:	int3   
 101989f:	int3   
 10198a0:	mov    edx,DWORD PTR [rcx]
 10198a2:	xor    eax,eax
 10198a4:	cmp    edx,0x2
 10198a7:	sete   al
 10198aa:	ret    
 10198ab:	int3   
 10198ac:	int3   
 10198ad:	int3   
 10198ae:	int3   
 10198af:	int3   
 10198b0:	int3   
 10198b1:	int3   
 10198b2:	int3   
 10198b3:	int3   
 10198b4:	int3   
 10198b5:	int3   
 10198b6:	int3   
 10198b7:	int3   
 10198b8:	int3   
 10198b9:	int3   
 10198ba:	int3   
 10198bb:	int3   
 10198bc:	int3   
 10198bd:	int3   
 10198be:	int3   
 10198bf:	int3   
 10198c0:	mov    eax,DWORD PTR [rcx+0x4]
 10198c3:	ret    
 10198c4:	int3   
 10198c5:	int3   
 10198c6:	int3   
 10198c7:	int3   
 10198c8:	int3   
 10198c9:	int3   
 10198ca:	int3   
 10198cb:	int3   
 10198cc:	int3   
 10198cd:	int3   
 10198ce:	int3   
 10198cf:	int3   
 10198d0:	rex push rbx
 10198d2:	sub    rsp,0x50
 10198d6:	lea    rcx,[rip+0xfffffffffffececb]        # 0x10067a8
 10198dd:	call   QWORD PTR [rip+0xfffffffffffe7a2d]        # 0x1001310
 10198e3:	lea    rdx,[rip+0xfffffffffffecea6]        # 0x1006790
 10198ea:	mov    rcx,rax
 10198ed:	mov    rbx,rax
 10198f0:	call   QWORD PTR [rip+0xfffffffffffe799a]        # 0x1001290
 10198f6:	test   rax,rax
 10198f9:	mov    QWORD PTR [rip+0x15080],rax        # 0x102e980
 1019900:	jne    0x101990b
 1019902:	mov    rcx,rbx
 1019905:	call   QWORD PTR [rip+0xfffffffffffe78f5]        # 0x1001200
 101990b:	lea    rcx,[rsp+0x20]
 1019910:	call   QWORD PTR [rip+0xfffffffffffe791a]        # 0x1001230
 1019916:	mov    r11d,DWORD PTR [rsp+0x24]
 101991b:	mov    DWORD PTR [rip+0x15066],r11d        # 0x102e988
 1019922:	add    rsp,0x50
 1019926:	pop    rbx
 1019927:	ret    
 1019928:	int3   
 1019929:	int3   
 101992a:	int3   
 101992b:	int3   
 101992c:	int3   
 101992d:	int3   
 101992e:	int3   
 101992f:	int3   
 1019930:	mov    QWORD PTR [rsp+0x18],rsi
 1019935:	push   rdi
 1019936:	sub    rsp,0x60
 101993a:	test   rcx,rcx
 101993d:	mov    rsi,rdx
 1019940:	mov    rdi,rcx
 1019943:	jne    0x1019955
 1019945:	xor    eax,eax
 1019947:	mov    rsi,QWORD PTR [rsp+0x80]
 101994f:	add    rsp,0x60
 1019953:	pop    rdi
 1019954:	ret    
 1019955:	mov    QWORD PTR [rsp+0x70],rbx
 101995a:	mov    QWORD PTR [rsp+0x78],rbp
 101995f:	mov    eax,0xee
 1019964:	mov    ebp,0xcc
 1019969:	test   r8d,r8d
 101996c:	mov    rbx,rcx
 101996f:	cmovne ebp,eax
 1019972:	cmp    QWORD PTR [rip+0x15006],0x0        # 0x102e980
 101997a:	je     0x10199ea
 101997c:	mov    QWORD PTR [rsp+0x20],rbx
 1019981:	call   QWORD PTR [rip+0xfffffffffffe7861]        # 0x10011e8
 1019987:	lea    rdx,[rsp+0x20]
 101998c:	mov    rcx,rax
 101998f:	mov    r8d,0x10
 1019995:	call   QWORD PTR [rip+0x14fe5]        # 0x102e980
 101999b:	test   eax,eax
 101999d:	je     0x10199ea
 101999f:	mov    rax,QWORD PTR [rsp+0x28]
 10199a4:	test   al,0x1
 10199a6:	je     0x10199ea
 10199a8:	shr    rax,0x4
 10199ac:	and    eax,0x7ff
 10199b1:	test   ebp,eax
 10199b3:	je     0x1019a4f
 10199b9:	mov    edx,DWORD PTR [rip+0x14fc9]        # 0x102e988
 10199bf:	lea    ecx,[rdx-0x1]
 10199c2:	not    rcx
 10199c5:	and    rbx,rcx
 10199c8:	mov    rcx,rsi
 10199cb:	add    rbx,rdx
 10199ce:	mov    rax,rbx
 10199d1:	sub    rax,rdi
 10199d4:	cmp    rax,rsi
 10199d7:	cmovb  rcx,rax
 10199db:	add    rdi,rcx
 10199de:	sub    rsi,rcx
 10199e1:	jne    0x1019a46
 10199e3:	mov    eax,0x1
 10199e8:	jmp    0x1019a51
 10199ea:	lea    rdx,[rsp+0x30]
 10199ef:	mov    r8d,0x30
 10199f5:	mov    rcx,rbx
 10199f8:	call   QWORD PTR [rip+0xfffffffffffe76ea]        # 0x10010e8
 10199fe:	cmp    rax,0x30
 1019a02:	jne    0x1019a4f
 1019a04:	mov    rcx,QWORD PTR [rsp+0x30]
 1019a09:	mov    rbx,QWORD PTR [rsp+0x48]
 1019a0e:	add    rbx,rcx
 1019a11:	cmp    rdi,rbx
 1019a14:	jae    0x1019a46
 1019a16:	cmp    DWORD PTR [rsp+0x50],0x1000
 1019a1e:	jne    0x1019a4f
 1019a20:	mov    eax,DWORD PTR [rsp+0x54]
 1019a24:	test   ebp,eax
 1019a26:	je     0x1019a4f
 1019a28:	bt     eax,0x8
 1019a2c:	jb     0x1019a4f
 1019a2e:	mov    rcx,rsi
 1019a31:	mov    rax,rbx
 1019a34:	sub    rax,rdi
 1019a37:	cmp    rax,rsi
 1019a3a:	cmovb  rcx,rax
 1019a3e:	add    rdi,rcx
 1019a41:	sub    rsi,rcx
 1019a44:	je     0x10199e3
 1019a46:	cmp    rbx,rdi
 1019a49:	jbe    0x1019972
 1019a4f:	xor    eax,eax
 1019a51:	mov    rbx,QWORD PTR [rsp+0x70]
 1019a56:	mov    rbp,QWORD PTR [rsp+0x78]
 1019a5b:	mov    rsi,QWORD PTR [rsp+0x80]
 1019a63:	add    rsp,0x60
 1019a67:	pop    rdi
 1019a68:	ret    
 1019a69:	int3   
 1019a6a:	int3   
 1019a6b:	int3   
 1019a6c:	int3   
 1019a6d:	int3   
 1019a6e:	int3   
 1019a6f:	int3   
 1019a70:	mov    QWORD PTR [rsp+0x8],rbx
 1019a75:	mov    QWORD PTR [rsp+0x10],rsi
 1019a7a:	push   rdi
 1019a7b:	sub    rsp,0x30
 1019a7f:	mov    rsi,rcx
 1019a82:	xor    ebx,ebx
 1019a84:	mov    DWORD PTR [rsp+0x20],ebx
 1019a88:	mov    edi,ebx
 1019a8a:	cmp    QWORD PTR [rcx],rbx
 1019a8d:	jne    0x1019ac0
 1019a8f:	xor    r8d,r8d
 1019a92:	mov    edx,0x10000
 1019a97:	xor    ecx,ecx
 1019a99:	call   QWORD PTR [rip+0xfffffffffffe7619]        # 0x10010b8
 1019a9f:	mov    QWORD PTR [rsi],rax
 1019aa2:	test   rax,rax
 1019aa5:	jne    0x1019ac0
 1019aa7:	call   QWORD PTR [rip+0xfffffffffffe77c3]        # 0x1001270
 1019aad:	mov    ebx,eax
 1019aaf:	test   eax,eax
 1019ab1:	jle    0x1019abc
 1019ab3:	movzx  ebx,ax
 1019ab6:	or     ebx,0x80070000
 1019abc:	mov    DWORD PTR [rsp+0x20],ebx
 1019ac0:	jmp    0x1019adf
 1019ac2:	mov    edi,eax
 1019ac4:	cmp    eax,0xc00000fd
 1019ac9:	jne    0x1019ad1
 1019acb:	call   QWORD PTR [rip+0xfffffffffffe7977]        # 0x1001448
 1019ad1:	mov    eax,0x80004005
 1019ad6:	test   edi,edi
 1019ad8:	cmovns edi,eax
 1019adb:	mov    ebx,DWORD PTR [rsp+0x20]
 1019adf:	test   ebx,ebx
 1019ae1:	cmovns ebx,edi
 1019ae4:	mov    eax,ebx
 1019ae6:	mov    rbx,QWORD PTR [rsp+0x40]
 1019aeb:	mov    rsi,QWORD PTR [rsp+0x48]
 1019af0:	add    rsp,0x30
 1019af4:	pop    rdi
 1019af5:	ret    
 1019af6:	int3   
 1019af7:	int3   
 1019af8:	int3   
 1019af9:	int3   
 1019afa:	int3   
 1019afb:	int3   
 1019afc:	int3   
 1019afd:	int3   
 1019afe:	int3   
 1019aff:	int3   
 1019b00:	mov    QWORD PTR [rsp+0x8],rbx
 1019b05:	push   rdi
 1019b06:	sub    rsp,0x20
 1019b0a:	mov    rbx,rcx
 1019b0d:	mov    edi,0x1
 1019b12:	xor    eax,eax
 1019b14:	lock cmpxchg DWORD PTR [rcx],edi
 1019b18:	jne    0x1019b27
 1019b1a:	mov    eax,edi
 1019b1c:	mov    rbx,QWORD PTR [rsp+0x30]
 1019b21:	add    rsp,0x20
 1019b25:	pop    rdi
 1019b26:	ret    
 1019b27:	mov    eax,DWORD PTR [rcx]
 1019b29:	cmp    eax,0x2
 1019b2c:	je     0x1019b41
 1019b2e:	xchg   ax,ax
 1019b30:	mov    ecx,edi
 1019b32:	call   QWORD PTR [rip+0xfffffffffffe7760]        # 0x1001298
 1019b38:	mov    r11d,DWORD PTR [rbx]
 1019b3b:	cmp    r11d,0x2
 1019b3f:	jne    0x1019b30
 1019b41:	xor    eax,eax
 1019b43:	mov    rbx,QWORD PTR [rsp+0x30]
 1019b48:	add    rsp,0x20
 1019b4c:	pop    rdi
 1019b4d:	ret    
 1019b4e:	int3   
 1019b4f:	int3   
 1019b50:	int3   
 1019b51:	int3   
 1019b52:	int3   
 1019b53:	int3   
 1019b54:	int3   
 1019b55:	int3   
 1019b56:	int3   
 1019b57:	int3   
 1019b58:	int3   
 1019b59:	int3   
 1019b5a:	int3   
 1019b5b:	int3   
 1019b5c:	int3   
 1019b5d:	int3   
 1019b5e:	int3   
 1019b5f:	int3   
 1019b60:	mov    DWORD PTR [rcx+0x4],edx
 1019b63:	mov    eax,0x1
 1019b68:	mov    edx,0x2
 1019b6d:	lock cmpxchg DWORD PTR [rcx],edx
 1019b71:	ret    
 1019b72:	int3   
 1019b73:	int3   
 1019b74:	int3   
 1019b75:	int3   
 1019b76:	int3   
 1019b77:	int3   
 1019b78:	int3   
 1019b79:	int3   
 1019b7a:	int3   
 1019b7b:	int3   
 1019b7c:	int3   
 1019b7d:	int3   
 1019b7e:	int3   
 1019b7f:	int3   
 1019b80:	mov    QWORD PTR [rsp+0x8],rbx
 1019b85:	mov    QWORD PTR [rsp+0x18],rbp
 1019b8a:	mov    QWORD PTR [rsp+0x20],rsi
 1019b8f:	push   rdi
 1019b90:	sub    rsp,0x30
 1019b94:	xor    ebp,ebp
 1019b96:	test   rdx,rdx
 1019b99:	mov    rbx,r8
 1019b9c:	mov    rdi,rdx
 1019b9f:	mov    rsi,rcx
 1019ba2:	mov    QWORD PTR [rsp+0x48],rbp
 1019ba7:	je     0x1019c16
 1019ba9:	test   rcx,rcx
 1019bac:	je     0x1019c16
 1019bae:	test   rbx,rbx
 1019bb1:	je     0x1019c16
 1019bb3:	lea    r8d,[rbp+0x1]
 1019bb7:	mov    rdx,rbx
 1019bba:	mov    rcx,rdi
 1019bbd:	call   0x1019930
 1019bc2:	test   eax,eax
 1019bc4:	jne    0x1019bcd
 1019bc6:	mov    eax,0x800703e6
 1019bcb:	jmp    0x1019c1b
 1019bcd:	call   QWORD PTR [rip+0xfffffffffffe7615]        # 0x10011e8
 1019bd3:	mov    r9,rbx
 1019bd6:	mov    r8,rsi
 1019bd9:	mov    rcx,rax
 1019bdc:	lea    rax,[rsp+0x48]
 1019be1:	mov    rdx,rdi
 1019be4:	mov    QWORD PTR [rsp+0x20],rax
 1019be9:	call   QWORD PTR [rip+0xfffffffffffe74c1]        # 0x10010b0
 1019bef:	test   eax,eax
 1019bf1:	je     0x1019c02
 1019bf3:	cmp    QWORD PTR [rsp+0x48],rbx
 1019bf8:	mov    eax,0x8007012b
 1019bfd:	cmove  eax,ebp
 1019c00:	jmp    0x1019c1b
 1019c02:	call   QWORD PTR [rip+0xfffffffffffe7668]        # 0x1001270
 1019c08:	test   eax,eax
 1019c0a:	jle    0x1019c1b
 1019c0c:	movzx  eax,ax
 1019c0f:	or     eax,0x80070000
 1019c14:	jmp    0x1019c1b
 1019c16:	mov    eax,0x80070057
 1019c1b:	mov    rbx,QWORD PTR [rsp+0x40]
 1019c20:	mov    rbp,QWORD PTR [rsp+0x50]
 1019c25:	mov    rsi,QWORD PTR [rsp+0x58]
 1019c2a:	add    rsp,0x30
 1019c2e:	pop    rdi
 1019c2f:	ret    
 1019c30:	int3   
 1019c31:	int3   
 1019c32:	int3   
 1019c33:	int3   
 1019c34:	int3   
 1019c35:	int3   
 1019c36:	int3   
 1019c37:	int3   
 1019c38:	int3   
 1019c39:	int3   
 1019c3a:	int3   
 1019c3b:	int3   
 1019c3c:	int3   
 1019c3d:	int3   
 1019c3e:	int3   
 1019c3f:	int3   
 1019c40:	mov    QWORD PTR [rsp+0x18],r8
 1019c45:	mov    QWORD PTR [rsp+0x20],r9
 1019c4a:	push   rsi
 1019c4b:	push   rdi
 1019c4c:	sub    rsp,0x48
 1019c50:	cmp    rdx,0x7fffffff
 1019c57:	mov    rsi,rdx
 1019c5a:	mov    rdi,rcx
 1019c5d:	jbe    0x1019c6b
 1019c5f:	mov    eax,0x80070057
 1019c64:	add    rsp,0x48
 1019c68:	pop    rdi
 1019c69:	pop    rsi
 1019c6a:	ret    
 1019c6b:	test   rcx,rcx
 1019c6e:	mov    QWORD PTR [rsp+0x40],rbx
 1019c73:	je     0x1019cab
 1019c75:	mov    rcx,rdx
 1019c78:	xor    edx,edx
 1019c7a:	test   rsi,rsi
 1019c7d:	mov    rax,rdi
 1019c80:	je     0x1019c91
 1019c82:	cmp    WORD PTR [rax],dx
 1019c85:	je     0x1019c9e
 1019c87:	add    rax,0x2
 1019c8b:	sub    rcx,0x1
 1019c8f:	jne    0x1019c82
 1019c91:	mov    edx,0x80070057
 1019c96:	xor    ebx,ebx
 1019c98:	test   edx,edx
 1019c9a:	jns    0x1019cb2
 1019c9c:	jmp    0x1019cb0
 1019c9e:	test   rcx,rcx
 1019ca1:	je     0x1019c91
 1019ca3:	mov    rbx,rsi
 1019ca6:	sub    rbx,rcx
 1019ca9:	jmp    0x1019c98
 1019cab:	mov    edx,0x80070057
 1019cb0:	xor    ebx,ebx
 1019cb2:	test   edx,edx
 1019cb4:	js     0x1019d5c
 1019cba:	mov    QWORD PTR [rsp+0x38],rbp
 1019cbf:	mov    QWORD PTR [rsp+0x30],r12
 1019cc4:	lea    r12,[rsp+0x78]
 1019cc9:	call   0x100ad20
 1019cce:	sub    rsi,rbx
 1019cd1:	lea    rbp,[rdi+rbx*2]
 1019cd5:	mov    edi,0x0
 1019cda:	je     0x1019ce5
 1019cdc:	cmp    rsi,0x7fffffff
 1019ce3:	jbe    0x1019cea
 1019ce5:	mov    edi,0x80070057
 1019cea:	test   edi,edi
 1019cec:	js     0x1019d44
 1019cee:	mov    r8,QWORD PTR [rsp+0x70]
 1019cf3:	lea    rbx,[rsi-0x1]
 1019cf7:	mov    r9,rax
 1019cfa:	mov    rcx,rbp
 1019cfd:	mov    rdx,rbx
 1019d00:	xor    edi,edi
 1019d02:	mov    QWORD PTR [rsp+0x20],r12
 1019d07:	call   QWORD PTR [rip+0xfffffffffffe7713]        # 0x1001420
 1019d0d:	test   eax,eax
 1019d0f:	js     0x1019d3a
 1019d11:	cdqe   
 1019d13:	cmp    rax,rbx
 1019d16:	ja     0x1019d3a
 1019d18:	cmp    rax,rbx
 1019d1b:	jne    0x1019d44
 1019d1d:	mov    r12,QWORD PTR [rsp+0x30]
 1019d22:	mov    WORD PTR [rbp+rbx*2+0x0],di
 1019d27:	mov    rbp,QWORD PTR [rsp+0x38]
 1019d2c:	mov    rbx,QWORD PTR [rsp+0x40]
 1019d31:	mov    eax,edi
 1019d33:	add    rsp,0x48
 1019d37:	pop    rdi
 1019d38:	pop    rsi
 1019d39:	ret    
 1019d3a:	mov    WORD PTR [rbp+rbx*2+0x0],di
 1019d3f:	mov    edi,0x8007007a
 1019d44:	mov    r12,QWORD PTR [rsp+0x30]
 1019d49:	mov    rbp,QWORD PTR [rsp+0x38]
 1019d4e:	mov    rbx,QWORD PTR [rsp+0x40]
 1019d53:	mov    eax,edi
 1019d55:	add    rsp,0x48
 1019d59:	pop    rdi
 1019d5a:	pop    rsi
 1019d5b:	ret    
 1019d5c:	mov    eax,edx
 1019d5e:	mov    rbx,QWORD PTR [rsp+0x40]
 1019d63:	add    rsp,0x48
 1019d67:	pop    rdi
 1019d68:	pop    rsi
 1019d69:	ret    
 1019d6a:	int3   
 1019d6b:	int3   
 1019d6c:	int3   
 1019d6d:	int3   
 1019d6e:	int3   
 1019d6f:	int3   
 1019d70:	mov    QWORD PTR [rsp+0x8],rbx
 1019d75:	mov    QWORD PTR [rsp+0x10],rbp
 1019d7a:	mov    QWORD PTR [rsp+0x18],rsi
 1019d7f:	push   rdi
 1019d80:	sub    rsp,0x40
 1019d84:	xor    ebx,ebx
 1019d86:	test   r9,r9
 1019d89:	lea    r10d,[r9+r9*1]
 1019d8d:	mov    rdi,r9
 1019d90:	mov    rsi,r8
 1019d93:	mov    r11,rdx
 1019d96:	mov    DWORD PTR [rsp+0x30],r10d
 1019d9b:	mov    rbp,rcx
 1019d9e:	mov    DWORD PTR [rsp+0x68],ebx
 1019da2:	je     0x1019df3
 1019da4:	cmp    r9,0x7fffffff
 1019dab:	ja     0x1019df3
 1019dad:	mov    r8,r9
 1019db0:	mov    ecx,0x7ffffffe
 1019db5:	mov    rdx,rsi
 1019db8:	sub    rcx,r9
 1019dbb:	lea    r9,[rip+0xfffffffffffe7e1e]        # 0x1001be0
 1019dc2:	sub    r9,rsi
 1019dc5:	lea    rax,[rcx+r8*1]
 1019dc9:	test   rax,rax
 1019dcc:	je     0x1019de7
 1019dce:	movzx  eax,WORD PTR [r9+rdx*1]
 1019dd3:	test   ax,ax
 1019dd6:	je     0x1019de7
 1019dd8:	mov    WORD PTR [rdx],ax
 1019ddb:	add    rdx,0x2
 1019ddf:	sub    r8,0x1
 1019de3:	jne    0x1019dc5
 1019de5:	jmp    0x1019dec
 1019de7:	test   r8,r8
 1019dea:	jne    0x1019df0
 1019dec:	sub    rdx,0x2
 1019df0:	mov    WORD PTR [rdx],bx
 1019df3:	mov    eax,r10d
 1019df6:	cmp    rax,rdi
 1019df9:	jae    0x1019e02
 1019dfb:	mov    eax,0x80070057
 1019e00:	jmp    0x1019e71
 1019e02:	lea    rax,[rsp+0x30]
 1019e07:	lea    r9,[rsp+0x68]
 1019e0c:	xor    r8d,r8d
 1019e0f:	mov    QWORD PTR [rsp+0x28],rax
 1019e14:	mov    rdx,r11
 1019e17:	mov    rcx,rbp
 1019e1a:	mov    QWORD PTR [rsp+0x20],rsi
 1019e1f:	call   QWORD PTR [rip+0xfffffffffffe71db]        # 0x1001000
 1019e25:	test   eax,eax
 1019e27:	jne    0x1019e60
 1019e29:	cmp    DWORD PTR [rsp+0x68],0x1
 1019e2e:	jne    0x1019e59
 1019e30:	mov    eax,DWORD PTR [rsp+0x30]
 1019e34:	test   al,0x1
 1019e36:	jne    0x1019e59
 1019e38:	cmp    eax,0x2
 1019e3b:	jb     0x1019e59
 1019e3d:	shr    rax,1
 1019e40:	cmp    WORD PTR [rsi+rax*2-0x2],bx
 1019e45:	je     0x1019e6f
 1019e47:	cmp    rax,rdi
 1019e4a:	jae    0x1019e52
 1019e4c:	mov    WORD PTR [rsi+rax*2],bx
 1019e50:	jmp    0x1019e6f
 1019e52:	mov    ebx,0x8007007a
 1019e57:	jmp    0x1019e6f
 1019e59:	mov    ebx,0x8007000b
 1019e5e:	jmp    0x1019e6f
 1019e60:	jg     0x1019e66
 1019e62:	mov    ebx,eax
 1019e64:	jmp    0x1019e6f
 1019e66:	movzx  ebx,ax
 1019e69:	or     ebx,0x80070000
 1019e6f:	mov    eax,ebx
 1019e71:	mov    rbx,QWORD PTR [rsp+0x50]
 1019e76:	mov    rbp,QWORD PTR [rsp+0x58]
 1019e7b:	mov    rsi,QWORD PTR [rsp+0x60]
 1019e80:	add    rsp,0x40
 1019e84:	pop    rdi
 1019e85:	ret    
 1019e86:	int3   
 1019e87:	int3   
 1019e88:	int3   
 1019e89:	int3   
 1019e8a:	int3   
 1019e8b:	int3   
 1019e8c:	int3   
 1019e8d:	int3   
 1019e8e:	int3   
 1019e8f:	int3   
 1019e90:	mov    rax,QWORD PTR [rcx]
 1019e93:	xor    edx,edx
 1019e95:	rex.W jmp QWORD PTR [rax+0x18]
 1019e99:	int3   
 1019e9a:	int3   
 1019e9b:	int3   
 1019e9c:	int3   
 1019e9d:	int3   
 1019e9e:	int3   
 1019e9f:	int3   
 1019ea0:	lea    rax,[rcx+0x10]
 1019ea4:	ret    
 1019ea5:	int3   
 1019ea6:	int3   
 1019ea7:	int3   
 1019ea8:	int3   
 1019ea9:	int3   
 1019eaa:	int3   
 1019eab:	int3   
 1019eac:	int3   
 1019ead:	int3   
 1019eae:	int3   
 1019eaf:	int3   
 1019eb0:	rex push rbx
 1019eb2:	sub    rsp,0x20
 1019eb6:	mov    rax,rdx
 1019eb9:	xor    ebx,ebx
 1019ebb:	xor    edx,edx
 1019ebd:	mov    rcx,rax
 1019ec0:	call   0x1019730
 1019ec5:	jmp    0x1019ee0
 1019ec7:	mov    ebx,eax
 1019ec9:	cmp    eax,0xc00000fd
 1019ece:	jne    0x1019ed6
 1019ed0:	call   QWORD PTR [rip+0xfffffffffffe7572]        # 0x1001448
 1019ed6:	mov    eax,0x80004005
 1019edb:	test   ebx,ebx
 1019edd:	cmovns ebx,eax
 1019ee0:	mov    eax,ebx
 1019ee2:	add    rsp,0x20
 1019ee6:	pop    rbx
 1019ee7:	ret    
 1019ee8:	int3   
 1019ee9:	int3   
 1019eea:	int3   
 1019eeb:	int3   
 1019eec:	int3   
 1019eed:	int3   
 1019eee:	int3   
 1019eef:	int3   
 1019ef0:	rex push rbx
 1019ef2:	sub    rsp,0x20
 1019ef6:	xor    r9d,r9d
 1019ef9:	lea    rbx,[rip+0xfffffffffffe6100]        # 0x1000000
 1019f00:	mov    r10,r8
 1019f03:	mov    QWORD PTR [r8],r9
 1019f06:	mov    r11,QWORD PTR [rbx+0x16d0]
 1019f0d:	cmp    r11,QWORD PTR [rdx]
 1019f10:	jne    0x1019f24
 1019f12:	mov    r11,QWORD PTR [rbx+0x16d8]
 1019f19:	cmp    r11,QWORD PTR [rdx+0x8]
 1019f1d:	jne    0x1019f24
 1019f1f:	mov    eax,r9d
 1019f22:	jmp    0x1019f29
 1019f24:	sbb    eax,eax
 1019f26:	sbb    eax,0xffffffff
 1019f29:	test   eax,eax
 1019f2b:	jne    0x1019f3e
 1019f2d:	mov    QWORD PTR [r8],rcx
 1019f30:	mov    rax,QWORD PTR [rcx]
 1019f33:	call   QWORD PTR [rax+0x8]
 1019f36:	xor    eax,eax
 1019f38:	add    rsp,0x20
 1019f3c:	pop    rbx
 1019f3d:	ret    
 1019f3e:	mov    r8,QWORD PTR [rbx+0x6848]
 1019f45:	cmp    r8,QWORD PTR [rdx]
 1019f48:	jne    0x1019f57
 1019f4a:	mov    r8,QWORD PTR [rbx+0x6850]
 1019f51:	cmp    r8,QWORD PTR [rdx+0x8]
 1019f55:	je     0x1019f5f
 1019f57:	sbb    eax,eax
 1019f59:	sbb    eax,0xffffffff
 1019f5c:	mov    r9d,eax
 1019f5f:	test   r9d,r9d
 1019f62:	jne    0x1019f75
 1019f64:	mov    QWORD PTR [r10],rcx
 1019f67:	mov    rax,QWORD PTR [rcx]
 1019f6a:	call   QWORD PTR [rax+0x8]
 1019f6d:	xor    eax,eax
 1019f6f:	add    rsp,0x20
 1019f73:	pop    rbx
 1019f74:	ret    
 1019f75:	mov    eax,0x80004002
 1019f7a:	add    rsp,0x20
 1019f7e:	pop    rbx
 1019f7f:	ret    
 1019f80:	int3   
 1019f81:	int3   
 1019f82:	int3   
 1019f83:	int3   
 1019f84:	int3   
 1019f85:	int3   
 1019f86:	int3   
 1019f87:	int3   
 1019f88:	int3   
 1019f89:	int3   
 1019f8a:	int3   
 1019f8b:	int3   
 1019f8c:	int3   
 1019f8d:	int3   
 1019f8e:	int3   
 1019f8f:	int3   
 1019f90:	mov    eax,0x1
 1019f95:	ret    
 1019f96:	int3   
 1019f97:	int3   
 1019f98:	int3   
 1019f99:	int3   
 1019f9a:	int3   
 1019f9b:	int3   
 1019f9c:	int3   
 1019f9d:	int3   
 1019f9e:	int3   
 1019f9f:	int3   
 1019fa0:	mov    eax,0x1
 1019fa5:	ret    
 1019fa6:	int3   
 1019fa7:	int3   
 1019fa8:	int3   
 1019fa9:	int3   
 1019faa:	int3   
 1019fab:	int3   
 1019fac:	int3   
 1019fad:	int3   
 1019fae:	int3   
 1019faf:	int3   
 1019fb0:	rex push rbx
 1019fb2:	sub    rsp,0x20
 1019fb6:	add    rcx,0x8
 1019fba:	mov    rbx,rdx
 1019fbd:	call   0x10198a0
 1019fc2:	mov    DWORD PTR [rbx],eax
 1019fc4:	xor    eax,eax
 1019fc6:	add    rsp,0x20
 1019fca:	pop    rbx
 1019fcb:	ret    
 1019fcc:	int3   
 1019fcd:	int3   
 1019fce:	int3   
 1019fcf:	int3   
 1019fd0:	int3   
 1019fd1:	int3   
 1019fd2:	int3   
 1019fd3:	int3   
 1019fd4:	int3   
 1019fd5:	int3   
 1019fd6:	int3   
 1019fd7:	int3   
 1019fd8:	int3   
 1019fd9:	int3   
 1019fda:	int3   
 1019fdb:	int3   
 1019fdc:	int3   
 1019fdd:	int3   
 1019fde:	int3   
 1019fdf:	int3   
 1019fe0:	mov    eax,DWORD PTR [rcx+0x1b50]
 1019fe6:	ret    
 1019fe7:	int3   
 1019fe8:	int3   
 1019fe9:	int3   
 1019fea:	int3   
 1019feb:	int3   
 1019fec:	int3   
 1019fed:	int3   
 1019fee:	int3   
 1019fef:	int3   
 1019ff0:	mov    QWORD PTR [rcx+0x1b58],rdx
 1019ff7:	xor    eax,eax
 1019ff9:	ret    
 1019ffa:	int3   
 1019ffb:	int3   
 1019ffc:	int3   
 1019ffd:	int3   
 1019ffe:	int3   
 1019fff:	int3   
 101a000:	mov    rax,QWORD PTR [rcx+0x1b58]
 101a007:	test   rax,rax
 101a00a:	je     0x101a012
 101a00c:	mov    rcx,rdx
 101a00f:	rex.W jmp rax
 101a012:	mov    eax,0x80004001
 101a017:	ret    
 101a018:	int3   
 101a019:	int3   
 101a01a:	int3   
 101a01b:	int3   
 101a01c:	int3   
 101a01d:	int3   
 101a01e:	int3   
 101a01f:	int3   
 101a020:	lea    rax,[rcx+0x1740]
 101a027:	ret    
 101a028:	int3   
 101a029:	int3   
 101a02a:	int3   
 101a02b:	int3   
 101a02c:	int3   
 101a02d:	int3   
 101a02e:	int3   
 101a02f:	int3   
 101a030:	mov    QWORD PTR [rsp+0x8],rbx
 101a035:	mov    QWORD PTR [rsp+0x10],rsi
 101a03a:	push   rdi
 101a03b:	push   r12
 101a03d:	push   r13
 101a03f:	sub    rsp,0x30
 101a043:	mov    r12,r8
 101a046:	mov    r13,rdx
 101a049:	mov    rdi,rcx
 101a04c:	xor    esi,esi
 101a04e:	mov    ebx,esi
 101a050:	mov    DWORD PTR [rsp+0x20],ebx
 101a054:	mov    DWORD PTR [rsp+0x68],esi
 101a058:	call   0x10197a0
 101a05d:	test   rax,rax
 101a060:	je     0x101a0fa
 101a066:	mov    QWORD PTR [rsp+0x28],rsi
 101a06b:	mov    rcx,rdi
 101a06e:	call   0x10197a0
 101a073:	mov    r9,QWORD PTR [rax]
 101a076:	lea    r8,[rsp+0x28]
 101a07b:	lea    rdx,[rip+0xfffffffffffec7d6]        # 0x1006858
 101a082:	mov    rcx,rax
 101a085:	call   QWORD PTR [r9]
 101a088:	mov    ebx,eax
 101a08a:	mov    DWORD PTR [rsp+0x20],eax
 101a08e:	test   eax,eax
 101a090:	js     0x101a0fa
 101a092:	mov    rcx,QWORD PTR [rsp+0x28]
 101a097:	test   rcx,rcx
 101a09a:	je     0x101a0f1
 101a09c:	mov    edi,esi
 101a09e:	mov    DWORD PTR [rsp+0x24],esi
 101a0a2:	mov    rax,QWORD PTR [rcx]
 101a0a5:	mov    r8,r12
 101a0a8:	mov    rdx,r13
 101a0ab:	call   QWORD PTR [rax+0x18]
 101a0ae:	mov    ebx,eax
 101a0b0:	mov    DWORD PTR [rsp+0x20],eax
 101a0b4:	jmp    0x101a0db
 101a0b6:	mov    edi,eax
 101a0b8:	cmp    eax,0xc00000fd
 101a0bd:	jne    0x101a0c5
 101a0bf:	call   QWORD PTR [rip+0xfffffffffffe7383]        # 0x1001448
 101a0c5:	mov    eax,0x80004005
 101a0ca:	test   edi,edi
 101a0cc:	cmovns edi,eax
 101a0cf:	mov    DWORD PTR [rsp+0x24],edi
 101a0d3:	mov    ebx,DWORD PTR [rsp+0x20]
 101a0d7:	mov    esi,DWORD PTR [rsp+0x68]
 101a0db:	test   ebx,ebx
 101a0dd:	cmovns ebx,edi
 101a0e0:	mov    DWORD PTR [rsp+0x20],ebx
 101a0e4:	mov    rcx,QWORD PTR [rsp+0x28]
 101a0e9:	mov    rax,QWORD PTR [rcx]
 101a0ec:	call   QWORD PTR [rax+0x10]
 101a0ef:	jmp    0x101a0fa
 101a0f1:	mov    ebx,0x80070057
 101a0f6:	mov    DWORD PTR [rsp+0x20],ebx
 101a0fa:	jmp    0x101a11b
 101a0fc:	mov    ebx,eax
 101a0fe:	cmp    eax,0xc00000fd
 101a103:	jne    0x101a10b
 101a105:	call   QWORD PTR [rip+0xfffffffffffe733d]        # 0x1001448
 101a10b:	mov    eax,0x80004005
 101a110:	test   ebx,ebx
 101a112:	cmovns ebx,eax
 101a115:	mov    esi,ebx
 101a117:	mov    ebx,DWORD PTR [rsp+0x20]
 101a11b:	test   ebx,ebx
 101a11d:	cmovns ebx,esi
 101a120:	mov    eax,ebx
 101a122:	mov    rbx,QWORD PTR [rsp+0x50]
 101a127:	mov    rsi,QWORD PTR [rsp+0x58]
 101a12c:	add    rsp,0x30
 101a130:	pop    r13
 101a132:	pop    r12
 101a134:	pop    rdi
 101a135:	ret    
 101a136:	int3   
 101a137:	int3   
 101a138:	int3   
 101a139:	int3   
 101a13a:	int3   
 101a13b:	int3   
 101a13c:	int3   
 101a13d:	int3   
 101a13e:	int3   
 101a13f:	int3   
 101a140:	mov    QWORD PTR [rsp+0x10],rbx
 101a145:	mov    QWORD PTR [rsp+0x18],rsi
 101a14a:	mov    QWORD PTR [rsp+0x20],rdi
 101a14f:	mov    QWORD PTR [rsp+0x8],rcx
 101a154:	push   r12
 101a156:	sub    rsp,0x30
 101a15a:	mov    r12,rdx
 101a15d:	mov    rsi,rcx
 101a160:	xor    edi,edi
 101a162:	mov    DWORD PTR [rsp+0x20],edi
 101a166:	add    rcx,0x8
 101a16a:	call   0x10198a0
 101a16f:	test   eax,eax
 101a171:	je     0x101a1f2
 101a173:	mov    edx,0x4e20
 101a178:	mov    rcx,QWORD PTR [rsi+0x18]
 101a17c:	call   QWORD PTR [rip+0xfffffffffffe7096]        # 0x1001218
 101a182:	test   eax,eax
 101a184:	je     0x101a1ac
 101a186:	cmp    eax,0x80
 101a18b:	je     0x101a1ac
 101a18d:	call   QWORD PTR [rip+0xfffffffffffe70dd]        # 0x1001270
 101a193:	mov    ebx,eax
 101a195:	test   eax,eax
 101a197:	jle    0x101a1a2
 101a199:	movzx  ebx,ax
 101a19c:	or     ebx,0x80070000
 101a1a2:	mov    rcx,r12
 101a1a5:	call   0x1019790
 101a1aa:	jmp    0x101a1ff
 101a1ac:	mov    rdx,r12
 101a1af:	mov    rcx,rsi
 101a1b2:	call   0x1019eb0
 101a1b7:	mov    ebx,eax
 101a1b9:	mov    DWORD PTR [rsp+0x20],eax
 101a1bd:	jmp    0x101a1e1
 101a1bf:	mov    edi,eax
 101a1c1:	cmp    eax,0xc00000fd
 101a1c6:	jne    0x101a1ce
 101a1c8:	call   QWORD PTR [rip+0xfffffffffffe727a]        # 0x1001448
 101a1ce:	mov    eax,0x80004005
 101a1d3:	test   edi,edi
 101a1d5:	cmovns edi,eax
 101a1d8:	mov    rsi,QWORD PTR [rsp+0x40]
 101a1dd:	mov    ebx,DWORD PTR [rsp+0x20]
 101a1e1:	test   ebx,ebx
 101a1e3:	cmovns ebx,edi
 101a1e6:	mov    rcx,QWORD PTR [rsi+0x18]
 101a1ea:	call   QWORD PTR [rip+0xfffffffffffe6eb8]        # 0x10010a8
 101a1f0:	jmp    0x101a1ff
 101a1f2:	mov    rdx,r12
 101a1f5:	mov    rcx,rsi
 101a1f8:	call   0x1019eb0
 101a1fd:	mov    ebx,eax
 101a1ff:	mov    eax,ebx
 101a201:	mov    rbx,QWORD PTR [rsp+0x48]
 101a206:	mov    rsi,QWORD PTR [rsp+0x50]
 101a20b:	mov    rdi,QWORD PTR [rsp+0x58]
 101a210:	add    rsp,0x30
 101a214:	pop    r12
 101a216:	ret    
 101a217:	int3   
 101a218:	int3   
 101a219:	int3   
 101a21a:	int3   
 101a21b:	int3   
 101a21c:	int3   
 101a21d:	int3   
 101a21e:	int3   
 101a21f:	int3   
 101a220:	mov    QWORD PTR [rsp+0x10],rbx
 101a225:	mov    QWORD PTR [rsp+0x18],rsi
 101a22a:	mov    QWORD PTR [rsp+0x8],rcx
 101a22f:	push   rdi
 101a230:	sub    rsp,0x30
 101a234:	mov    rsi,rcx
 101a237:	xor    ebx,ebx
 101a239:	mov    DWORD PTR [rsp+0x20],ebx
 101a23d:	lea    rax,[rcx+0xe8]
 101a244:	cmp    rdx,rax
 101a247:	jne    0x101a28e
 101a249:	mov    edi,ebx
 101a24b:	mov    rcx,rdx
 101a24e:	call   0x101b3a0
 101a253:	mov    ebx,eax
 101a255:	mov    DWORD PTR [rsp+0x20],eax
 101a259:	jmp    0x101a27d
 101a25b:	mov    edi,eax
 101a25d:	cmp    eax,0xc00000fd
 101a262:	jne    0x101a26a
 101a264:	call   QWORD PTR [rip+0xfffffffffffe71de]        # 0x1001448
 101a26a:	mov    eax,0x80004005
 101a26f:	test   edi,edi
 101a271:	cmovns edi,eax
 101a274:	mov    rsi,QWORD PTR [rsp+0x40]
 101a279:	mov    ebx,DWORD PTR [rsp+0x20]
 101a27d:	test   ebx,ebx
 101a27f:	cmovns ebx,edi
 101a282:	mov    rcx,QWORD PTR [rsi+0x20]
 101a286:	call   QWORD PTR [rip+0xfffffffffffe6e1c]        # 0x10010a8
 101a28c:	jmp    0x101a29c
 101a28e:	test   rdx,rdx
 101a291:	je     0x101a29c
 101a293:	add    rcx,0x10
 101a297:	call   0x1019680
 101a29c:	mov    eax,ebx
 101a29e:	mov    rbx,QWORD PTR [rsp+0x48]
 101a2a3:	mov    rsi,QWORD PTR [rsp+0x50]
 101a2a8:	add    rsp,0x30
 101a2ac:	pop    rdi
 101a2ad:	ret    
 101a2ae:	int3   
 101a2af:	int3   
 101a2b0:	int3   
 101a2b1:	int3   
 101a2b2:	int3   
 101a2b3:	int3   
 101a2b4:	int3   
 101a2b5:	int3   
 101a2b6:	int3   
 101a2b7:	int3   
 101a2b8:	int3   
 101a2b9:	int3   
 101a2ba:	int3   
 101a2bb:	int3   
 101a2bc:	int3   
 101a2bd:	int3   
 101a2be:	int3   
 101a2bf:	int3   
 101a2c0:	mov    rdx,QWORD PTR [rcx]
 101a2c3:	test   rdx,rdx
 101a2c6:	je     0x101a301
 101a2c8:	mov    eax,DWORD PTR [rdx+0xc]
 101a2cb:	cmp    QWORD PTR [rcx+0x8],rax
 101a2cf:	jb     0x101a2df
 101a2d1:	mov    rax,QWORD PTR [rdx]
 101a2d4:	mov    QWORD PTR [rcx+0x8],0x0
 101a2dc:	mov    QWORD PTR [rcx],rax
 101a2df:	mov    rdx,QWORD PTR [rcx]
 101a2e2:	test   rdx,rdx
 101a2e5:	je     0x101a301
 101a2e7:	mov    r8,QWORD PTR [rcx+0x8]
 101a2eb:	mov    eax,DWORD PTR [rdx+0xc]
 101a2ee:	cmp    r8,rax
 101a2f1:	jae    0x101a301
 101a2f3:	lea    rax,[r8+0x1]
 101a2f7:	mov    QWORD PTR [rcx+0x8],rax
 101a2fb:	lea    rax,[rdx+r8*8+0x18]
 101a300:	ret    
 101a301:	xor    eax,eax
 101a303:	ret    
 101a304:	int3   
 101a305:	int3   
 101a306:	int3   
 101a307:	int3   
 101a308:	int3   
 101a309:	int3   
 101a30a:	int3   
 101a30b:	int3   
 101a30c:	int3   
 101a30d:	int3   
 101a30e:	int3   
 101a30f:	int3   
 101a310:	mov    QWORD PTR [rsp+0x20],r9
 101a315:	push   rsi
 101a316:	push   rdi
 101a317:	sub    rsp,0x38
 101a31b:	xor    edi,edi
 101a31d:	test   rdx,rdx
 101a320:	mov    rsi,rcx
 101a323:	mov    eax,edi
 101a325:	je     0x101a330
 101a327:	cmp    rdx,0x7fffffff
 101a32e:	jbe    0x101a335
 101a330:	mov    eax,0x80070057
 101a335:	test   eax,eax
 101a337:	js     0x101a387
 101a339:	lea    rax,[rsp+0x70]
 101a33e:	mov    QWORD PTR [rsp+0x30],rbx
 101a343:	lea    rbx,[rdx-0x1]
 101a347:	mov    rdx,rbx
 101a34a:	mov    QWORD PTR [rsp+0x20],rax
 101a34f:	call   QWORD PTR [rip+0xfffffffffffe70cb]        # 0x1001420
 101a355:	test   eax,eax
 101a357:	js     0x101a377
 101a359:	cdqe   
 101a35b:	cmp    rax,rbx
 101a35e:	ja     0x101a377
 101a360:	cmp    rax,rbx
 101a363:	jne    0x101a380
 101a365:	mov    WORD PTR [rsi+rbx*2],di
 101a369:	mov    rbx,QWORD PTR [rsp+0x30]
 101a36e:	mov    eax,edi
 101a370:	add    rsp,0x38
 101a374:	pop    rdi
 101a375:	pop    rsi
 101a376:	ret    
 101a377:	mov    WORD PTR [rsi+rbx*2],di
 101a37b:	mov    edi,0x8007007a
 101a380:	mov    rbx,QWORD PTR [rsp+0x30]
 101a385:	mov    eax,edi
 101a387:	add    rsp,0x38
 101a38b:	pop    rdi
 101a38c:	pop    rsi
 101a38d:	ret    
 101a38e:	int3   
 101a38f:	int3   
 101a390:	int3   
 101a391:	int3   
 101a392:	int3   
 101a393:	int3   
 101a394:	int3   
 101a395:	int3   
 101a396:	int3   
 101a397:	int3   
 101a398:	int3   
 101a399:	int3   
 101a39a:	int3   
 101a39b:	int3   
 101a39c:	int3   
 101a39d:	int3   
 101a39e:	int3   
 101a39f:	int3   
 101a3a0:	rex push rdi
 101a3a2:	sub    rsp,0xab0
 101a3a9:	mov    rax,QWORD PTR [rip+0xa2b0]        # 0x1024660
 101a3b0:	xor    rax,rsp
 101a3b3:	mov    QWORD PTR [rsp+0xaa0],rax
 101a3bb:	mov    rdi,rcx
 101a3be:	xor    ecx,ecx
 101a3c0:	call   QWORD PTR [rip+0xfffffffffffe6daa]        # 0x1001170
 101a3c6:	lea    rdx,[rsp+0x260]
 101a3ce:	mov    r8d,0x104
 101a3d4:	mov    rcx,rax
 101a3d7:	call   QWORD PTR [rip+0xfffffffffffe6da3]        # 0x1001180
 101a3dd:	test   eax,eax
 101a3df:	je     0x101a4db
 101a3e5:	mov    QWORD PTR [rsp+0x40],0x105
 101a3ee:	lea    rax,[rsp+0x680]
 101a3f6:	lea    r9,[rsp+0x470]
 101a3fe:	mov    QWORD PTR [rsp+0x38],rax
 101a403:	lea    rax,[rsp+0x890]
 101a40b:	mov    QWORD PTR [rsp+0x30],0x105
 101a414:	mov    QWORD PTR [rsp+0x28],rax
 101a419:	lea    rdx,[rsp+0x50]
 101a41e:	lea    rcx,[rsp+0x260]
 101a426:	mov    r8d,0x105
 101a42c:	mov    QWORD PTR [rsp+0x20],0x105
 101a435:	mov    QWORD PTR [rsp+0xac8],rbx
 101a43d:	mov    WORD PTR [rsp+0x468],0x0
 101a447:	call   QWORD PTR [rip+0xfffffffffffe709b]        # 0x10014e8
 101a44d:	lea    rbx,[rdi+0x1948]
 101a454:	lea    r9,[rsp+0x470]
 101a45c:	lea    r8,[rsp+0x50]
 101a461:	mov    rcx,rbx
 101a464:	mov    edx,0x104
 101a469:	mov    QWORD PTR [rsp+0x28],0x0
 101a472:	mov    WORD PTR [rsp+0x56],0x0
 101a479:	mov    WORD PTR [rsp+0x670],0x0
 101a483:	mov    WORD PTR [rbx],0x0
 101a488:	mov    QWORD PTR [rsp+0x20],0x0
 101a491:	call   QWORD PTR [rip+0xfffffffffffe7041]        # 0x10014d8
 101a497:	mov    WORD PTR [rdi+0x1b4e],0x0
 101a4a0:	call   0x100ad20
 101a4a5:	mov    r9,rax
 101a4a8:	lea    rax,[rip+0xfffffffffffec379]        # 0x1006828
 101a4af:	lea    rcx,[rdi+0x1740]
 101a4b6:	mov    QWORD PTR [rsp+0x28],rax
 101a4bb:	lea    r8,[rip+0xfffffffffffec3a6]        # 0x1006868
 101a4c2:	mov    edx,0x104
 101a4c7:	mov    QWORD PTR [rsp+0x20],rbx
 101a4cc:	call   0x101a310
 101a4d1:	mov    rbx,QWORD PTR [rsp+0xac8]
 101a4d9:	jmp    0x101a4dd
 101a4db:	xor    eax,eax
 101a4dd:	mov    rcx,QWORD PTR [rsp+0xaa0]
 101a4e5:	xor    rcx,rsp
 101a4e8:	call   0x100c0d0
 101a4ed:	add    rsp,0xab0
 101a4f4:	pop    rdi
 101a4f5:	ret    
 101a4f6:	int3   
 101a4f7:	int3   
 101a4f8:	int3   
 101a4f9:	int3   
 101a4fa:	int3   
 101a4fb:	int3   
 101a4fc:	int3   
 101a4fd:	int3   
 101a4fe:	int3   
 101a4ff:	int3   
 101a500:	mov    QWORD PTR [rsp+0x10],rbx
 101a505:	mov    QWORD PTR [rsp+0x18],rsi
 101a50a:	mov    QWORD PTR [rsp+0x20],rdi
 101a50f:	mov    QWORD PTR [rsp+0x8],rcx
 101a514:	push   r12
 101a516:	sub    rsp,0x40
 101a51a:	mov    r12,rdx
 101a51d:	mov    rsi,rcx
 101a520:	xor    ebx,ebx
 101a522:	mov    DWORD PTR [rsp+0x20],ebx
 101a526:	mov    edx,0x4e20
 101a52b:	mov    rcx,QWORD PTR [rcx+0x18]
 101a52f:	call   QWORD PTR [rip+0xfffffffffffe6ce3]        # 0x1001218
 101a535:	test   eax,eax
 101a537:	je     0x101a557
 101a539:	cmp    eax,0x80
 101a53e:	je     0x101a557
 101a540:	call   QWORD PTR [rip+0xfffffffffffe6d2a]        # 0x1001270
 101a546:	mov    ebx,eax
 101a548:	test   eax,eax
 101a54a:	jle    0x101a5cb
 101a54c:	movzx  ebx,ax
 101a54f:	or     ebx,0x80070000
 101a555:	jmp    0x101a5cb
 101a557:	mov    edi,ebx
 101a559:	lea    rax,[rsi+0x28]
 101a55d:	mov    QWORD PTR [rsp+0x28],rax
 101a562:	mov    QWORD PTR [rsp+0x30],rbx
 101a567:	data16 xchg ax,ax
 101a56a:	data16 xchg ax,ax
 101a56d:	data16 xchg ax,ax
 101a570:	lea    rcx,[rsp+0x28]
 101a575:	call   0x101a2c0
 101a57a:	test   rax,rax
 101a57d:	je     0x101a598
 101a57f:	mov    r8,r12
 101a582:	mov    rdx,rsi
 101a585:	mov    rcx,rax
 101a588:	call   0x101a030
 101a58d:	test   ebx,ebx
 101a58f:	cmovns ebx,eax
 101a592:	mov    DWORD PTR [rsp+0x20],ebx
 101a596:	jmp    0x101a570
 101a598:	jmp    0x101a5bc
 101a59a:	mov    edi,eax
 101a59c:	cmp    eax,0xc00000fd
 101a5a1:	jne    0x101a5a9
 101a5a3:	call   QWORD PTR [rip+0xfffffffffffe6e9f]        # 0x1001448
 101a5a9:	mov    eax,0x80004005
 101a5ae:	test   edi,edi
 101a5b0:	cmovns edi,eax
 101a5b3:	mov    rsi,QWORD PTR [rsp+0x50]
 101a5b8:	mov    ebx,DWORD PTR [rsp+0x20]
 101a5bc:	mov    rcx,QWORD PTR [rsi+0x18]
 101a5c0:	call   QWORD PTR [rip+0xfffffffffffe6ae2]        # 0x10010a8
 101a5c6:	test   ebx,ebx
 101a5c8:	cmovns ebx,edi
 101a5cb:	mov    eax,ebx
 101a5cd:	mov    rbx,QWORD PTR [rsp+0x58]
 101a5d2:	mov    rsi,QWORD PTR [rsp+0x60]
 101a5d7:	mov    rdi,QWORD PTR [rsp+0x68]
 101a5dc:	add    rsp,0x40
 101a5e0:	pop    r12
 101a5e2:	ret    
 101a5e3:	int3   
 101a5e4:	int3   
 101a5e5:	int3   
 101a5e6:	int3   
 101a5e7:	int3   
 101a5e8:	int3   
 101a5e9:	int3   
 101a5ea:	int3   
 101a5eb:	int3   
 101a5ec:	int3   
 101a5ed:	int3   
 101a5ee:	int3   
 101a5ef:	int3   
 101a5f0:	rex push rbx
 101a5f2:	sub    rsp,0x30
 101a5f6:	test   rdx,rdx
 101a5f9:	mov    rbx,rcx
 101a5fc:	je     0x101a6aa
 101a602:	mov    QWORD PTR [rsp+0x40],rdi
 101a607:	lea    rdi,[rcx+0x1948]
 101a60e:	xor    r10d,r10d
 101a611:	mov    r8,rdi
 101a614:	sub    rdx,rdi
 101a617:	mov    r9d,0x104
 101a61d:	data16 xchg ax,ax
 101a620:	lea    rax,[r9+0x7ffffefa]
 101a627:	test   rax,rax
 101a62a:	je     0x101a646
 101a62c:	movzx  eax,WORD PTR [rdx+r8*1]
 101a631:	test   ax,ax
 101a634:	je     0x101a646
 101a636:	mov    WORD PTR [r8],ax
 101a63a:	add    r8,0x2
 101a63e:	sub    r9,0x1
 101a642:	jne    0x101a620
 101a644:	jmp    0x101a64b
 101a646:	test   r9,r9
 101a649:	jne    0x101a655
 101a64b:	sub    r8,0x2
 101a64f:	mov    r10d,0x8007007a
 101a655:	test   r10d,r10d
 101a658:	mov    WORD PTR [r8],0x0
 101a65e:	js     0x101a69c
 101a660:	call   0x100ad20
 101a665:	lea    rcx,[rbx+0x1740]
 101a66c:	lea    r8,[rip+0xfffffffffffec1f5]        # 0x1006868
 101a673:	mov    r9,rax
 101a676:	lea    rax,[rip+0xfffffffffffec1ab]        # 0x1006828
 101a67d:	mov    edx,0x104
 101a682:	mov    QWORD PTR [rsp+0x28],rax
 101a687:	mov    QWORD PTR [rsp+0x20],rdi
 101a68c:	call   0x101a310
 101a691:	mov    rdi,QWORD PTR [rsp+0x40]
 101a696:	add    rsp,0x30
 101a69a:	pop    rbx
 101a69b:	ret    
 101a69c:	mov    eax,r10d
 101a69f:	mov    rdi,QWORD PTR [rsp+0x40]
 101a6a4:	add    rsp,0x30
 101a6a8:	pop    rbx
 101a6a9:	ret    
 101a6aa:	mov    eax,0x80070057
 101a6af:	add    rsp,0x30
 101a6b3:	pop    rbx
 101a6b4:	ret    
 101a6b5:	int3   
 101a6b6:	int3   
 101a6b7:	int3   
 101a6b8:	int3   
 101a6b9:	int3   
 101a6ba:	int3   
 101a6bb:	int3   
 101a6bc:	int3   
 101a6bd:	int3   
 101a6be:	int3   
 101a6bf:	int3   
 101a6c0:	mov    QWORD PTR [rsp+0x20],rbx
 101a6c5:	mov    QWORD PTR [rsp+0x10],rdx
 101a6ca:	mov    QWORD PTR [rsp+0x8],rcx
 101a6cf:	push   rsi
 101a6d0:	push   rdi
 101a6d1:	push   r12
 101a6d3:	push   r13
 101a6d5:	push   r14
 101a6d7:	sub    rsp,0x20
 101a6db:	mov    r14,rdx
 101a6de:	mov    r13,rcx
 101a6e1:	xor    esi,esi
 101a6e3:	mov    r12,rsi
 101a6e6:	mov    QWORD PTR [rsp+0x60],rsi
 101a6eb:	mov    QWORD PTR [rdx],rsi
 101a6ee:	add    rcx,0x8
 101a6f2:	call   0x10198a0
 101a6f7:	test   eax,eax
 101a6f9:	je     0x101a7ff
 101a6ff:	lea    rcx,[r13+0x8]
 101a703:	call   0x10198c0
 101a708:	test   eax,eax
 101a70a:	js     0x101a7ff
 101a710:	call   QWORD PTR [rip+0xfffffffffffe6d32]        # 0x1001448
 101a716:	mov    edx,0x7530
 101a71b:	mov    rcx,QWORD PTR [r13+0x20]
 101a71f:	call   QWORD PTR [rip+0xfffffffffffe6af3]        # 0x1001218
 101a725:	mov    edi,eax
 101a727:	test   eax,eax
 101a729:	je     0x101a75e
 101a72b:	cmp    eax,0x80
 101a730:	je     0x101a75e
 101a732:	call   QWORD PTR [rip+0xfffffffffffe6b38]        # 0x1001270
 101a738:	mov    ebx,eax
 101a73a:	test   eax,eax
 101a73c:	jle    0x101a747
 101a73e:	movzx  ebx,ax
 101a741:	or     ebx,0x80070000
 101a747:	test   ebx,ebx
 101a749:	js     0x101a7b8
 101a74b:	test   edi,edi
 101a74d:	jg     0x101a753
 101a74f:	mov    ebx,edi
 101a751:	jmp    0x101a7b8
 101a753:	movzx  ebx,di
 101a756:	or     ebx,0x80070000
 101a75c:	jmp    0x101a7b8
 101a75e:	mov    ebx,esi
 101a760:	lea    rcx,[r13+0xe8]
 101a767:	mov    r8d,0x4e20
 101a76d:	mov    rdx,r13
 101a770:	call   0x101c2c0
 101a775:	jmp    0x101a7a1
 101a777:	mov    ebx,eax
 101a779:	cmp    eax,0xc00000fd
 101a77e:	jne    0x101a786
 101a780:	call   QWORD PTR [rip+0xfffffffffffe6cc2]        # 0x1001448
 101a786:	mov    eax,0x80004005
 101a78b:	test   ebx,ebx
 101a78d:	cmovns ebx,eax
 101a790:	xor    esi,esi
 101a792:	mov    r13,QWORD PTR [rsp+0x50]
 101a797:	mov    r14,QWORD PTR [rsp+0x58]
 101a79c:	mov    r12,QWORD PTR [rsp+0x60]
 101a7a1:	test   ebx,ebx
 101a7a3:	js     0x101a7ae
 101a7a5:	lea    r12,[r13+0xe8]
 101a7ac:	jmp    0x101a7b8
 101a7ae:	mov    rcx,QWORD PTR [r13+0x20]
 101a7b2:	call   QWORD PTR [rip+0xfffffffffffe68f0]        # 0x10010a8
 101a7b8:	test   r12,r12
 101a7bb:	jne    0x101a7f8
 101a7bd:	lea    rcx,[r13+0x10]
 101a7c1:	mov    edx,0x1658
 101a7c6:	call   0x1019620
 101a7cb:	test   rax,rax
 101a7ce:	je     0x101a7eb
 101a7d0:	mov    r8d,0x4e20
 101a7d6:	mov    rdx,r13
 101a7d9:	mov    rcx,rax
 101a7dc:	call   0x101b940
 101a7e1:	mov    r12,rax
 101a7e4:	test   rax,rax
 101a7e7:	jne    0x101a7f3
 101a7e9:	jmp    0x101a7ee
 101a7eb:	mov    r12,rsi
 101a7ee:	mov    esi,0x8007000e
 101a7f3:	test   esi,esi
 101a7f5:	cmovns ebx,esi
 101a7f8:	mov    QWORD PTR [r14],r12
 101a7fb:	mov    eax,ebx
 101a7fd:	jmp    0x101a804
 101a7ff:	mov    eax,0x80004005
 101a804:	mov    rbx,QWORD PTR [rsp+0x68]
 101a809:	add    rsp,0x20
 101a80d:	pop    r14
 101a80f:	pop    r13
 101a811:	pop    r12
 101a813:	pop    rdi
 101a814:	pop    rsi
 101a815:	ret    
 101a816:	int3   
 101a817:	int3   
 101a818:	int3   
 101a819:	int3   
 101a81a:	int3   
 101a81b:	int3   
 101a81c:	int3   
 101a81d:	int3   
 101a81e:	int3   
 101a81f:	int3   
 101a820:	mov    QWORD PTR [rsp+0x8],rbx
 101a825:	push   rdi
 101a826:	sub    rsp,0x20
 101a82a:	mov    rdx,QWORD PTR [rcx+0x20]
 101a82e:	mov    rbx,rcx
 101a831:	mov    eax,DWORD PTR [rdx+0x10]
 101a834:	cmp    DWORD PTR [rdx+0xc],eax
 101a837:	jb     0x101a870
 101a839:	mov    rcx,QWORD PTR [rcx+0x10]
 101a83d:	test   rcx,rcx
 101a840:	je     0x101a896
 101a842:	mov    rdi,QWORD PTR [rbx]
 101a845:	lea    rdx,[rdi*8+0x18]
 101a84d:	call   0x1019620
 101a852:	test   rax,rax
 101a855:	je     0x101a896
 101a857:	xor    ecx,ecx
 101a859:	mov    DWORD PTR [rax+0x10],edi
 101a85c:	mov    QWORD PTR [rax],rcx
 101a85f:	mov    DWORD PTR [rax+0x8],ecx
 101a862:	mov    DWORD PTR [rax+0xc],ecx
 101a865:	mov    rcx,QWORD PTR [rbx+0x20]
 101a869:	mov    QWORD PTR [rcx],rax
 101a86c:	mov    QWORD PTR [rbx+0x20],rax
 101a870:	mov    rcx,QWORD PTR [rbx+0x20]
 101a874:	mov    edx,DWORD PTR [rcx+0xc]
 101a877:	lea    eax,[rdx+0x1]
 101a87a:	mov    DWORD PTR [rcx+0xc],eax
 101a87d:	mov    rax,QWORD PTR [rbx+0x20]
 101a881:	add    QWORD PTR [rbx+0x8],0x1
 101a886:	lea    rax,[rax+rdx*8+0x18]
 101a88b:	mov    rbx,QWORD PTR [rsp+0x30]
 101a890:	add    rsp,0x20
 101a894:	pop    rdi
 101a895:	ret    
 101a896:	xor    eax,eax
 101a898:	mov    rbx,QWORD PTR [rsp+0x30]
 101a89d:	add    rsp,0x20
 101a8a1:	pop    rdi
 101a8a2:	ret    
 101a8a3:	int3   
 101a8a4:	int3   
 101a8a5:	int3   
 101a8a6:	int3   
 101a8a7:	int3   
 101a8a8:	int3   
 101a8a9:	int3   
 101a8aa:	int3   
 101a8ab:	int3   
 101a8ac:	int3   
 101a8ad:	int3   
 101a8ae:	int3   
 101a8af:	int3   
 101a8b0:	mov    QWORD PTR [rsp+0x8],rbx
 101a8b5:	mov    QWORD PTR [rsp+0x10],rsi
 101a8ba:	push   rdi
 101a8bb:	sub    rsp,0x20
 101a8bf:	lea    rax,[rip+0xfffffffffffebfba]        # 0x1006880
 101a8c6:	mov    rdi,rcx
 101a8c9:	add    rcx,0x8
 101a8cd:	mov    QWORD PTR [rcx-0x8],rax
 101a8d1:	call   0x1019880
 101a8d6:	lea    rcx,[rdi+0x10]
 101a8da:	call   0x1019600
 101a8df:	lea    rbx,[rdi+0x28]
 101a8e3:	xor    esi,esi
 101a8e5:	mov    QWORD PTR [rdi+0x18],rsi
 101a8e9:	mov    QWORD PTR [rdi+0x20],rsi
 101a8ed:	lea    rcx,[rbx+0x18]
 101a8f1:	xor    edx,edx
 101a8f3:	mov    r8d,0x80
 101a8f9:	mov    QWORD PTR [rbx],rsi
 101a8fc:	mov    DWORD PTR [rbx+0x8],esi
 101a8ff:	mov    DWORD PTR [rbx+0xc],esi
 101a902:	mov    DWORD PTR [rbx+0x10],0x10
 101a909:	mov    DWORD PTR [rbx+0x14],esi
 101a90c:	call   0x100c10e
 101a911:	lea    rcx,[rdi+0xe8]
 101a918:	xor    edx,edx
 101a91a:	mov    r8d,0x4e20
 101a920:	mov    QWORD PTR [rdi+0xc0],0x10
 101a92b:	mov    QWORD PTR [rdi+0xc8],rsi
 101a932:	mov    QWORD PTR [rdi+0xd0],rsi
 101a939:	mov    QWORD PTR [rdi+0xd8],rbx
 101a940:	mov    QWORD PTR [rdi+0xe0],rbx
 101a947:	call   0x101b940
 101a94c:	lea    rcx,[rdi+0x1740]
 101a953:	xor    edx,edx
 101a955:	mov    r8d,0x208
 101a95b:	mov    DWORD PTR [rdi+0x1b50],esi
 101a961:	mov    QWORD PTR [rdi+0x1b58],rsi
 101a968:	call   0x100c10e
 101a96d:	lea    rcx,[rdi+0x1948]
 101a974:	xor    edx,edx
 101a976:	mov    r8d,0x208
 101a97c:	call   0x100c10e
 101a981:	lea    rcx,[rdi+0xe8]
 101a988:	mov    rdx,rdi
 101a98b:	call   0x101b230
 101a990:	mov    rbx,QWORD PTR [rsp+0x30]
 101a995:	mov    rsi,QWORD PTR [rsp+0x38]
 101a99a:	mov    rax,rdi
 101a99d:	add    rsp,0x20
 101a9a1:	pop    rdi
 101a9a2:	ret    
 101a9a3:	int3   
 101a9a4:	int3   
 101a9a5:	int3   
 101a9a6:	int3   
 101a9a7:	int3   
 101a9a8:	int3   
 101a9a9:	int3   
 101a9aa:	int3   
 101a9ab:	int3   
 101a9ac:	int3   
 101a9ad:	int3   
 101a9ae:	int3   
 101a9af:	int3   
 101a9b0:	mov    QWORD PTR [rsp+0x18],rbx
 101a9b5:	push   rdi
 101a9b6:	sub    rsp,0x30
 101a9ba:	test   rdx,rdx
 101a9bd:	mov    rdi,rcx
 101a9c0:	mov    QWORD PTR [rsp+0x48],0x0
 101a9c9:	je     0x101aa97
 101a9cf:	lea    rax,[rsp+0x48]
 101a9d4:	mov    r9d,0x1
 101a9da:	xor    r8d,r8d
 101a9dd:	mov    rcx,0xffffffff80000002
 101a9e4:	mov    QWORD PTR [rsp+0x20],rax
 101a9e9:	call   QWORD PTR [rip+0xfffffffffffe6619]        # 0x1001008
 101a9ef:	test   eax,eax
 101a9f1:	jne    0x101aa8b
 101a9f7:	mov    rcx,QWORD PTR [rsp+0x48]
 101a9fc:	mov    QWORD PTR [rsp+0x40],rsi
 101aa01:	lea    rsi,[rdi+0x1948]
 101aa08:	lea    rdx,[rip+0xfffffffffffe7d31]        # 0x1002740
 101aa0f:	mov    r8,rsi
 101aa12:	mov    r9d,0x104
 101aa18:	call   0x1019d70
 101aa1d:	test   eax,eax
 101aa1f:	mov    ebx,eax
 101aa21:	js     0x101aa68
 101aa23:	call   0x100ad20
 101aa28:	lea    rcx,[rdi+0x1740]
 101aa2f:	lea    r8,[rip+0xfffffffffffebe32]        # 0x1006868
 101aa36:	mov    r9,rax
 101aa39:	lea    rax,[rip+0xfffffffffffebde8]        # 0x1006828
 101aa40:	mov    edx,0x104
 101aa45:	mov    QWORD PTR [rsp+0x28],rax
 101aa4a:	mov    QWORD PTR [rsp+0x20],rsi
 101aa4f:	call   0x101a310
 101aa54:	mov    rcx,QWORD PTR [rsp+0x48]
 101aa59:	mov    ebx,eax
 101aa5b:	call   QWORD PTR [rip+0xfffffffffffe65af]        # 0x1001010
 101aa61:	mov    rsi,QWORD PTR [rsp+0x40]
 101aa66:	jmp    0x101aa9e
 101aa68:	cmp    eax,0x80070002
 101aa6d:	jne    0x101aa79
 101aa6f:	mov    rcx,rdi
 101aa72:	call   0x101a3a0
 101aa77:	mov    ebx,eax
 101aa79:	mov    rcx,QWORD PTR [rsp+0x48]
 101aa7e:	call   QWORD PTR [rip+0xfffffffffffe658c]        # 0x1001010
 101aa84:	mov    rsi,QWORD PTR [rsp+0x40]
 101aa89:	jmp    0x101aa9e
 101aa8b:	mov    rcx,rdi
 101aa8e:	call   0x101a3a0
 101aa93:	mov    ebx,eax
 101aa95:	jmp    0x101aa9e
 101aa97:	call   0x101a3a0
 101aa9c:	mov    ebx,eax
 101aa9e:	test   ebx,ebx
 101aaa0:	jns    0x101aaca
 101aaa2:	lea    rcx,[rdi+0x1948]
 101aaa9:	xor    edx,edx
 101aaab:	mov    r8d,0x208
 101aab1:	call   0x100c10e
 101aab6:	lea    rcx,[rdi+0x1740]
 101aabd:	xor    edx,edx
 101aabf:	mov    r8d,0x208
 101aac5:	call   0x100c10e
 101aaca:	mov    eax,ebx
 101aacc:	mov    rbx,QWORD PTR [rsp+0x50]
 101aad1:	add    rsp,0x30
 101aad5:	pop    rdi
 101aad6:	ret    
 101aad7:	int3   
 101aad8:	int3   
 101aad9:	int3   
 101aada:	int3   
 101aadb:	int3   
 101aadc:	int3   
 101aadd:	int3   
 101aade:	int3   
 101aadf:	int3   
 101aae0:	mov    QWORD PTR [rsp+0x18],rbp
 101aae5:	push   rdi
 101aae6:	sub    rsp,0x20
 101aaea:	test   edx,edx
 101aaec:	mov    rdi,rcx
 101aaef:	je     0x101aafb
 101aaf1:	mov    DWORD PTR [rcx+0x1b50],0x1
 101aafb:	add    rcx,0x8
 101aaff:	call   0x1019b00
 101ab04:	test   eax,eax
 101ab06:	je     0x101ac26
 101ab0c:	mov    QWORD PTR [rsp+0x30],rbx
 101ab11:	mov    QWORD PTR [rsp+0x38],rsi
 101ab16:	lea    rsi,[rdi+0x10]
 101ab1a:	mov    rcx,rsi
 101ab1d:	call   0x1019a70
 101ab22:	test   eax,eax
 101ab24:	mov    ebx,eax
 101ab26:	js     0x101ac11
 101ab2c:	xor    r8d,r8d
 101ab2f:	xor    edx,edx
 101ab31:	xor    ecx,ecx
 101ab33:	mov    QWORD PTR [rdi+0xd0],rsi
 101ab3a:	call   QWORD PTR [rip+0xfffffffffffe6668]        # 0x10011a8
 101ab40:	test   rax,rax
 101ab43:	mov    QWORD PTR [rdi+0x18],rax
 101ab47:	jne    0x101ab5e
 101ab49:	call   QWORD PTR [rip+0xfffffffffffe6721]        # 0x1001270
 101ab4f:	test   eax,eax
 101ab51:	mov    ebx,eax
 101ab53:	jle    0x101ab5e
 101ab55:	movzx  ebx,ax
 101ab58:	or     ebx,0x80070000
 101ab5e:	test   ebx,ebx
 101ab60:	js     0x101ac11
 101ab66:	mov    rcx,QWORD PTR [rdi+0x18]
 101ab6a:	mov    edx,0x2
 101ab6f:	mov    r8d,edx
 101ab72:	call   QWORD PTR [rip+0xfffffffffffe65a8]        # 0x1001120
 101ab78:	test   eax,eax
 101ab7a:	jne    0x101ab91
 101ab7c:	call   QWORD PTR [rip+0xfffffffffffe66ee]        # 0x1001270
 101ab82:	test   eax,eax
 101ab84:	mov    ebx,eax
 101ab86:	jle    0x101ab91
 101ab88:	movzx  ebx,ax
 101ab8b:	or     ebx,0x80070000
 101ab91:	test   ebx,ebx
 101ab93:	js     0x101ac11
 101ab95:	xor    r8d,r8d
 101ab98:	xor    edx,edx
 101ab9a:	xor    ecx,ecx
 101ab9c:	call   QWORD PTR [rip+0xfffffffffffe6606]        # 0x10011a8
 101aba2:	test   rax,rax
 101aba5:	mov    QWORD PTR [rdi+0x20],rax
 101aba9:	jne    0x101abc0
 101abab:	call   QWORD PTR [rip+0xfffffffffffe66bf]        # 0x1001270
 101abb1:	test   eax,eax
 101abb3:	mov    ebx,eax
 101abb5:	jle    0x101abc0
 101abb7:	movzx  ebx,ax
 101abba:	or     ebx,0x80070000
 101abc0:	test   ebx,ebx
 101abc2:	js     0x101ac11
 101abc4:	mov    rcx,QWORD PTR [rdi+0x20]
 101abc8:	mov    edx,0x2
 101abcd:	mov    r8d,edx
 101abd0:	call   QWORD PTR [rip+0xfffffffffffe654a]        # 0x1001120
 101abd6:	test   eax,eax
 101abd8:	jne    0x101abef
 101abda:	call   QWORD PTR [rip+0xfffffffffffe6690]        # 0x1001270
 101abe0:	test   eax,eax
 101abe2:	mov    ebx,eax
 101abe4:	jle    0x101abef
 101abe6:	movzx  ebx,ax
 101abe9:	or     ebx,0x80070000
 101abef:	test   ebx,ebx
 101abf1:	js     0x101ac11
 101abf3:	cmp    DWORD PTR [rdi+0x1b50],0x0
 101abfa:	je     0x101ac00
 101abfc:	xor    edx,edx
 101abfe:	jmp    0x101ac07
 101ac00:	lea    rdx,[rip+0xfffffffffffebbc9]        # 0x10067d0
 101ac07:	mov    rcx,rdi
 101ac0a:	call   0x101a9b0
 101ac0f:	mov    ebx,eax
 101ac11:	lea    rcx,[rdi+0x8]
 101ac15:	mov    edx,ebx
 101ac17:	call   0x1019b60
 101ac1c:	mov    rsi,QWORD PTR [rsp+0x38]
 101ac21:	mov    rbx,QWORD PTR [rsp+0x30]
 101ac26:	call   0x10198d0
 101ac2b:	lea    rcx,[rdi+0x8]
 101ac2f:	mov    rbp,QWORD PTR [rsp+0x40]
 101ac34:	add    rsp,0x20
 101ac38:	pop    rdi
 101ac39:	jmp    0x10198c0
 101ac3e:	int3   
 101ac3f:	int3   
 101ac40:	int3   
 101ac41:	int3   
 101ac42:	int3   
 101ac43:	int3   
 101ac44:	int3   
 101ac45:	int3   
 101ac46:	int3   
 101ac47:	int3   
 101ac48:	int3   
 101ac49:	int3   
 101ac4a:	int3   
 101ac4b:	int3   
 101ac4c:	int3   
 101ac4d:	int3   
 101ac4e:	int3   
 101ac4f:	int3   
 101ac50:	mov    r11,rsp
 101ac53:	mov    QWORD PTR [r11+0x8],rbx
 101ac57:	mov    QWORD PTR [r11+0x10],rsi
 101ac5b:	mov    QWORD PTR [r11+0x20],rdi
 101ac5f:	mov    QWORD PTR [r11+0x18],r8
 101ac63:	push   r12
 101ac65:	push   r13
 101ac67:	push   r14
 101ac69:	sub    rsp,0x40
 101ac6d:	mov    r13,r8
 101ac70:	mov    r14,rdx
 101ac73:	mov    r12,rcx
 101ac76:	xor    esi,esi
 101ac78:	mov    DWORD PTR [rsp+0x20],esi
 101ac7c:	mov    QWORD PTR [r11-0x30],rsi
 101ac80:	mov    edi,esi
 101ac82:	lea    rax,[rcx+0x28]
 101ac86:	mov    QWORD PTR [r11-0x28],rax
 101ac8a:	mov    QWORD PTR [r11-0x20],rsi
 101ac8e:	xchg   ax,ax
 101ac90:	lea    rcx,[rsp+0x30]
 101ac95:	call   0x101a2c0
 101ac9a:	mov    rbx,rax
 101ac9d:	test   rax,rax
 101aca0:	je     0x101acb1
 101aca2:	mov    rcx,rax
 101aca5:	call   0x10197a0
 101acaa:	test   rax,rax
 101acad:	je     0x101acb1
 101acaf:	jmp    0x101ac90
 101acb1:	test   rbx,rbx
 101acb4:	jne    0x101acc6
 101acb6:	lea    rcx,[r12+0xc0]
 101acbe:	call   0x101a820
 101acc3:	mov    rbx,rax
 101acc6:	test   rbx,rbx
 101acc9:	je     0x101acf1
 101accb:	xor    eax,eax
 101accd:	mov    QWORD PTR [rbx],rax
 101acd0:	mov    rcx,rbx
 101acd3:	call   0x10196b0
 101acd8:	mov    rdx,r14
 101acdb:	mov    rcx,rbx
 101acde:	call   0x1019730
 101ace3:	mov    DWORD PTR [rsp+0x20],eax
 101ace7:	mov    rsi,rbx
 101acea:	mov    QWORD PTR [rsp+0x28],rbx
 101acef:	jmp    0x101acfa
 101acf1:	mov    eax,0x8007000e
 101acf6:	mov    DWORD PTR [rsp+0x20],eax
 101acfa:	jmp    0x101ad23
 101acfc:	mov    edi,eax
 101acfe:	cmp    eax,0xc00000fd
 101ad03:	jne    0x101ad0b
 101ad05:	call   QWORD PTR [rip+0xfffffffffffe673d]        # 0x1001448
 101ad0b:	mov    eax,0x80004005
 101ad10:	test   edi,edi
 101ad12:	cmovns edi,eax
 101ad15:	mov    r13,QWORD PTR [rsp+0x70]
 101ad1a:	mov    eax,DWORD PTR [rsp+0x20]
 101ad1e:	mov    rsi,QWORD PTR [rsp+0x28]
 101ad23:	mov    QWORD PTR [r13+0x0],rsi
 101ad27:	test   eax,eax
 101ad29:	cmovns eax,edi
 101ad2c:	mov    rbx,QWORD PTR [rsp+0x60]
 101ad31:	mov    rsi,QWORD PTR [rsp+0x68]
 101ad36:	mov    rdi,QWORD PTR [rsp+0x78]
 101ad3b:	add    rsp,0x40
 101ad3f:	pop    r14
 101ad41:	pop    r13
 101ad43:	pop    r12
 101ad45:	ret    
 101ad46:	int3   
 101ad47:	int3   
 101ad48:	int3   
 101ad49:	int3   
 101ad4a:	int3   
 101ad4b:	int3   
 101ad4c:	int3   
 101ad4d:	int3   
 101ad4e:	int3   
 101ad4f:	int3   
 101ad50:	mov    QWORD PTR [rsp+0x10],rbx
 101ad55:	mov    QWORD PTR [rsp+0x18],r8
 101ad5a:	mov    QWORD PTR [rsp+0x8],rcx
 101ad5f:	push   rsi
 101ad60:	push   rdi
 101ad61:	push   r12
 101ad63:	sub    rsp,0x30
 101ad67:	mov    rsi,r8
 101ad6a:	mov    rbx,rdx
 101ad6d:	mov    rdi,rcx
 101ad70:	xor    r12d,r12d
 101ad73:	mov    DWORD PTR [rsp+0x20],r12d
 101ad78:	mov    QWORD PTR [rsp+0x68],r12
 101ad7d:	add    rcx,0x8
 101ad81:	call   0x10198a0
 101ad86:	test   eax,eax
 101ad88:	je     0x101ae11
 101ad8e:	or     edx,0xffffffff
 101ad91:	mov    rcx,QWORD PTR [rdi+0x18]
 101ad95:	call   QWORD PTR [rip+0xfffffffffffe647d]        # 0x1001218
 101ad9b:	test   eax,eax
 101ad9d:	je     0x101adbd
 101ad9f:	cmp    eax,0x80
 101ada4:	je     0x101adbd
 101ada6:	call   QWORD PTR [rip+0xfffffffffffe64c4]        # 0x1001270
 101adac:	mov    ebx,eax
 101adae:	test   eax,eax
 101adb0:	jle    0x101ae23
 101adb2:	movzx  ebx,ax
 101adb5:	or     ebx,0x80070000
 101adbb:	jmp    0x101ae23
 101adbd:	lea    r8,[rsp+0x68]
 101adc2:	mov    rdx,rbx
 101adc5:	mov    rcx,rdi
 101adc8:	call   0x101ac50
 101adcd:	mov    ebx,eax
 101adcf:	mov    DWORD PTR [rsp+0x20],eax
 101add3:	jmp    0x101adff
 101add5:	mov    ebx,eax
 101add7:	cmp    eax,0xc00000fd
 101addc:	jne    0x101ade4
 101adde:	call   QWORD PTR [rip+0xfffffffffffe6664]        # 0x1001448
 101ade4:	mov    eax,0x80004005
 101ade9:	test   ebx,ebx
 101adeb:	cmovns ebx,eax
 101adee:	mov    r12d,ebx
 101adf1:	mov    rdi,QWORD PTR [rsp+0x50]
 101adf6:	mov    rsi,QWORD PTR [rsp+0x60]
 101adfb:	mov    ebx,DWORD PTR [rsp+0x20]
 101adff:	test   ebx,ebx
 101ae01:	cmovns ebx,r12d
 101ae05:	mov    rcx,QWORD PTR [rdi+0x18]
 101ae09:	call   QWORD PTR [rip+0xfffffffffffe6299]        # 0x10010a8
 101ae0f:	jmp    0x101ae23
 101ae11:	lea    r8,[rsp+0x68]
 101ae16:	mov    rdx,rbx
 101ae19:	mov    rcx,rdi
 101ae1c:	call   0x101ac50
 101ae21:	mov    ebx,eax
 101ae23:	mov    rcx,QWORD PTR [rsp+0x68]
 101ae28:	mov    QWORD PTR [rsi],rcx
 101ae2b:	mov    eax,ebx
 101ae2d:	mov    rbx,QWORD PTR [rsp+0x58]
 101ae32:	add    rsp,0x30
 101ae36:	pop    r12
 101ae38:	pop    rdi
 101ae39:	pop    rsi
 101ae3a:	ret    
 101ae3b:	int3   
 101ae3c:	int3   
 101ae3d:	int3   
 101ae3e:	int3   
 101ae3f:	int3   
 101ae40:	int3   
 101ae41:	int3   
 101ae42:	int3   
 101ae43:	int3   
 101ae44:	int3   
 101ae45:	int3   
 101ae46:	int3   
 101ae47:	int3   
 101ae48:	int3   
 101ae49:	int3   
 101ae4a:	int3   
 101ae4b:	int3   
 101ae4c:	int3   
 101ae4d:	int3   
 101ae4e:	int3   
 101ae4f:	int3   
 101ae50:	mov    rax,r8
 101ae53:	mov    rcx,rdx
 101ae56:	mov    r8,r9
 101ae59:	mov    rdx,rax
 101ae5c:	jmp    0x1019b80
 101ae61:	int3   
 101ae62:	int3   
 101ae63:	int3   
 101ae64:	int3   
 101ae65:	int3   
 101ae66:	int3   
 101ae67:	int3   
 101ae68:	int3   
 101ae69:	int3   
 101ae6a:	int3   
 101ae6b:	int3   
 101ae6c:	int3   
 101ae6d:	int3   
 101ae6e:	int3   
 101ae6f:	int3   
 101ae70:	mov    DWORD PTR [rcx+0x74],edx
 101ae73:	xor    eax,eax
 101ae75:	ret    
 101ae76:	int3   
 101ae77:	int3   
 101ae78:	int3   
 101ae79:	int3   
 101ae7a:	int3   
 101ae7b:	int3   
 101ae7c:	int3   
 101ae7d:	int3   
 101ae7e:	int3   
 101ae7f:	int3   
 101ae80:	mov    QWORD PTR [rsp+0x8],rbx
 101ae85:	push   rdi
 101ae86:	sub    rsp,0x20
 101ae8a:	cmp    DWORD PTR [rcx+0x74],0x0
 101ae8e:	mov    rdi,rdx
 101ae91:	mov    rbx,rcx
 101ae94:	je     0x101aed4
 101ae96:	mov    eax,DWORD PTR [rcx+0xac]
 101ae9c:	not    eax
 101ae9e:	and    eax,DWORD PTR [rcx+0xa8]
 101aea4:	test   al,0x20
 101aea6:	jne    0x101aed4
 101aea8:	call   QWORD PTR [rip+0xfffffffffffe63ca]        # 0x1001278
 101aeae:	cmp    eax,DWORD PTR [rbx+0x74]
 101aeb1:	je     0x101aed4
 101aeb3:	call   QWORD PTR [rip+0xfffffffffffe63bf]        # 0x1001278
 101aeb9:	cmp    eax,DWORD PTR [rbx+0xa4]
 101aebf:	je     0x101aed4
 101aec1:	mov    DWORD PTR [rdi],0x0
 101aec7:	xor    eax,eax
 101aec9:	mov    rbx,QWORD PTR [rsp+0x30]
 101aece:	add    rsp,0x20
 101aed2:	pop    rdi
 101aed3:	ret    
 101aed4:	mov    rbx,QWORD PTR [rsp+0x30]
 101aed9:	mov    DWORD PTR [rdi],0x1
 101aedf:	xor    eax,eax
 101aee1:	add    rsp,0x20
 101aee5:	pop    rdi
 101aee6:	ret    
 101aee7:	int3   
 101aee8:	int3   
 101aee9:	int3   
 101aeea:	int3   
 101aeeb:	int3   
 101aeec:	int3   
 101aeed:	int3   
 101aeee:	int3   
 101aeef:	int3   
 101aef0:	mov    DWORD PTR [rcx+0x13b0],edx
 101aef6:	xor    eax,eax
 101aef8:	ret    
 101aef9:	int3   
 101aefa:	int3   
 101aefb:	int3   
 101aefc:	int3   
 101aefd:	int3   
 101aefe:	int3   
 101aeff:	int3   
 101af00:	mov    QWORD PTR [rcx+0x90],rdx
 101af07:	xor    eax,eax
 101af09:	ret    
 101af0a:	int3   
 101af0b:	int3   
 101af0c:	int3   
 101af0d:	int3   
 101af0e:	int3   
 101af0f:	int3   
 101af10:	mov    QWORD PTR [rcx+0x98],rdx
 101af17:	mov    DWORD PTR [rcx+0xa0],r8d
 101af1e:	xor    eax,eax
 101af20:	ret    
 101af21:	int3   
 101af22:	int3   
 101af23:	int3   
 101af24:	int3   
 101af25:	int3   
 101af26:	int3   
 101af27:	int3   
 101af28:	int3   
 101af29:	int3   
 101af2a:	int3   
 101af2b:	int3   
 101af2c:	int3   
 101af2d:	int3   
 101af2e:	int3   
 101af2f:	int3   
 101af30:	mov    DWORD PTR [rcx+0xb0],edx
 101af36:	mov    DWORD PTR [rcx+0xb4],r8d
 101af3d:	xor    eax,eax
 101af3f:	ret    
 101af40:	int3   
 101af41:	int3   
 101af42:	int3   
 101af43:	int3   
 101af44:	int3   
 101af45:	int3   
 101af46:	int3   
 101af47:	int3   
 101af48:	int3   
 101af49:	int3   
 101af4a:	int3   
 101af4b:	int3   
 101af4c:	int3   
 101af4d:	int3   
 101af4e:	int3   
 101af4f:	int3   
 101af50:	rex push rbx
 101af52:	sub    rsp,0x20
 101af56:	mov    rbx,rcx
 101af59:	mov    DWORD PTR [rcx+0xa8],edx
 101af5f:	mov    DWORD PTR [rcx+0xac],r8d
 101af66:	mov    rcx,QWORD PTR [rcx+0x10]
 101af6a:	test   rcx,rcx
 101af6d:	je     0x101af8c
 101af6f:	call   0x1019fe0
 101af74:	test   eax,eax
 101af76:	je     0x101af8c
 101af78:	bt     DWORD PTR [rbx+0xac],0x11
 101af80:	jb     0x101af8c
 101af82:	or     DWORD PTR [rbx+0xa8],0x20000
 101af8c:	xor    eax,eax
 101af8e:	add    rsp,0x20
 101af92:	pop    rbx
 101af93:	ret    
 101af94:	int3   
 101af95:	int3   
 101af96:	int3   
 101af97:	int3   
 101af98:	int3   
 101af99:	int3   
 101af9a:	int3   
 101af9b:	int3   
 101af9c:	int3   
 101af9d:	int3   
 101af9e:	int3   
 101af9f:	int3   
 101afa0:	mov    QWORD PTR [rcx+0x40],rdx
 101afa4:	xor    eax,eax
 101afa6:	ret    
 101afa7:	int3   
 101afa8:	int3   
 101afa9:	int3   
 101afaa:	int3   
 101afab:	int3   
 101afac:	int3   
 101afad:	int3   
 101afae:	int3   
 101afaf:	int3   
 101afb0:	mov    QWORD PTR [rcx+0x38],rdx
 101afb4:	xor    eax,eax
 101afb6:	ret    
 101afb7:	int3   
 101afb8:	int3   
 101afb9:	int3   
 101afba:	int3   
 101afbb:	int3   
 101afbc:	int3   
 101afbd:	int3   
 101afbe:	int3   
 101afbf:	int3   
 101afc0:	mov    DWORD PTR [rcx+0xa4],edx
 101afc6:	mov    QWORD PTR [rcx+0x30],r8
 101afca:	mov    QWORD PTR [rcx+0x28],r9
 101afce:	xor    eax,eax
 101afd0:	ret    
 101afd1:	int3   
 101afd2:	int3   
 101afd3:	int3   
 101afd4:	int3   
 101afd5:	int3   
 101afd6:	int3   
 101afd7:	int3   
 101afd8:	int3   
 101afd9:	int3   
 101afda:	int3   
 101afdb:	int3   
 101afdc:	int3   
 101afdd:	int3   
 101afde:	int3   
 101afdf:	int3   
 101afe0:	mov    QWORD PTR [rcx+0x80],rdx
 101afe7:	xor    eax,eax
 101afe9:	ret    
 101afea:	int3   
 101afeb:	int3   
 101afec:	int3   
 101afed:	int3   
 101afee:	int3   
 101afef:	int3   
 101aff0:	mov    QWORD PTR [rcx+0x50],rdx
 101aff4:	xor    eax,eax
 101aff6:	ret    
 101aff7:	int3   
 101aff8:	int3   
 101aff9:	int3   
 101affa:	int3   
 101affb:	int3   
 101affc:	int3   
 101affd:	int3   
 101affe:	int3   
 101afff:	int3   
 101b000:	mov    QWORD PTR [rcx+0x48],rdx
 101b004:	xor    eax,eax
 101b006:	ret    
 101b007:	int3   
 101b008:	int3   
 101b009:	int3   
 101b00a:	int3   
 101b00b:	int3   
 101b00c:	int3   
 101b00d:	int3   
 101b00e:	int3   
 101b00f:	int3   
 101b010:	mov    QWORD PTR [rcx+0x20],rdx
 101b014:	xor    eax,eax
 101b016:	ret    
 101b017:	int3   
 101b018:	int3   
 101b019:	int3   
 101b01a:	int3   
 101b01b:	int3   
 101b01c:	int3   
 101b01d:	int3   
 101b01e:	int3   
 101b01f:	int3   
 101b020:	mov    QWORD PTR [rcx+0x58],rdx
 101b024:	xor    eax,eax
 101b026:	ret    
 101b027:	int3   
 101b028:	int3   
 101b029:	int3   
 101b02a:	int3   
 101b02b:	int3   
 101b02c:	int3   
 101b02d:	int3   
 101b02e:	int3   
 101b02f:	int3   
 101b030:	mov    DWORD PTR [rcx+0x88],edx
 101b036:	mov    DWORD PTR [rcx+0x8c],r8d
 101b03d:	xor    eax,eax
 101b03f:	ret    
 101b040:	int3   
 101b041:	int3   
 101b042:	int3   
 101b043:	int3   
 101b044:	int3   
 101b045:	int3   
 101b046:	int3   
 101b047:	int3   
 101b048:	int3   
 101b049:	int3   
 101b04a:	int3   
 101b04b:	int3   
 101b04c:	int3   
 101b04d:	int3   
 101b04e:	int3   
 101b04f:	int3   
 101b050:	mov    QWORD PTR [rcx+0x60],rdx
 101b054:	xor    eax,eax
 101b056:	ret    
 101b057:	int3   
 101b058:	int3   
 101b059:	int3   
 101b05a:	int3   
 101b05b:	int3   
 101b05c:	int3   
 101b05d:	int3   
 101b05e:	int3   
 101b05f:	int3   
 101b060:	mov    QWORD PTR [rcx+0x68],rdx
 101b064:	xor    eax,eax
 101b066:	ret    
 101b067:	int3   
 101b068:	int3   
 101b069:	int3   
 101b06a:	int3   
 101b06b:	int3   
 101b06c:	int3   
 101b06d:	int3   
 101b06e:	int3   
 101b06f:	int3   
 101b070:	mov    QWORD PTR [rcx+0x13c8],rdx
 101b077:	xor    eax,eax
 101b079:	ret    
 101b07a:	int3   
 101b07b:	int3   
 101b07c:	int3   
 101b07d:	int3   
 101b07e:	int3   
 101b07f:	int3   
 101b080:	cmp    DWORD PTR [rcx+0x13c0],0x0
 101b087:	je     0x101b0a6
 101b089:	cmp    DWORD PTR [rcx+0x13bc],0x0
 101b090:	jne    0x101b0a6
 101b092:	cmp    DWORD PTR [rcx+0x13b8],0x0
 101b099:	je     0x101b0a6
 101b09b:	mov    eax,DWORD PTR [rcx+0x13b4]
 101b0a1:	mov    DWORD PTR [rdx],eax
 101b0a3:	xor    eax,eax
 101b0a5:	ret    
 101b0a6:	mov    eax,0x80004005
 101b0ab:	ret    
 101b0ac:	int3   
 101b0ad:	int3   
 101b0ae:	int3   
 101b0af:	int3   
 101b0b0:	int3   
 101b0b1:	int3   
 101b0b2:	int3   
 101b0b3:	int3   
 101b0b4:	int3   
 101b0b5:	int3   
 101b0b6:	int3   
 101b0b7:	int3   
 101b0b8:	int3   
 101b0b9:	int3   
 101b0ba:	int3   
 101b0bb:	int3   
 101b0bc:	int3   
 101b0bd:	int3   
 101b0be:	int3   
 101b0bf:	int3   
 101b0c0:	rex push rbx
 101b0c2:	sub    rsp,0x20
 101b0c6:	xor    r9d,r9d
 101b0c9:	lea    rbx,[rip+0xfffffffffffe4f30]        # 0x1000000
 101b0d0:	mov    r10,r8
 101b0d3:	mov    QWORD PTR [r8],r9
 101b0d6:	mov    r11,QWORD PTR [rbx+0x16d0]
 101b0dd:	cmp    r11,QWORD PTR [rdx]
 101b0e0:	jne    0x101b0f4
 101b0e2:	mov    r11,QWORD PTR [rbx+0x16d8]
 101b0e9:	cmp    r11,QWORD PTR [rdx+0x8]
 101b0ed:	jne    0x101b0f4
 101b0ef:	mov    eax,r9d
 101b0f2:	jmp    0x101b0f9
 101b0f4:	sbb    eax,eax
 101b0f6:	sbb    eax,0xffffffff
 101b0f9:	test   eax,eax
 101b0fb:	jne    0x101b10e
 101b0fd:	mov    QWORD PTR [r8],rcx
 101b100:	mov    rax,QWORD PTR [rcx]
 101b103:	call   QWORD PTR [rax+0x8]
 101b106:	xor    eax,eax
 101b108:	add    rsp,0x20
 101b10c:	pop    rbx
 101b10d:	ret    
 101b10e:	mov    r8,QWORD PTR [rbx+0x6900]
 101b115:	cmp    r8,QWORD PTR [rdx]
 101b118:	jne    0x101b127
 101b11a:	mov    r8,QWORD PTR [rbx+0x6908]
 101b121:	cmp    r8,QWORD PTR [rdx+0x8]
 101b125:	je     0x101b12f
 101b127:	sbb    eax,eax
 101b129:	sbb    eax,0xffffffff
 101b12c:	mov    r9d,eax
 101b12f:	test   r9d,r9d
 101b132:	jne    0x101b145
 101b134:	mov    QWORD PTR [r10],rcx
 101b137:	mov    rax,QWORD PTR [rcx]
 101b13a:	call   QWORD PTR [rax+0x8]
 101b13d:	xor    eax,eax
 101b13f:	add    rsp,0x20
 101b143:	pop    rbx
 101b144:	ret    
 101b145:	mov    eax,0x80004002
 101b14a:	add    rsp,0x20
 101b14e:	pop    rbx
 101b14f:	ret    
 101b150:	int3   
 101b151:	int3   
 101b152:	int3   
 101b153:	int3   
 101b154:	int3   
 101b155:	int3   
 101b156:	int3   
 101b157:	int3   
 101b158:	int3   
 101b159:	int3   
 101b15a:	int3   
 101b15b:	int3   
 101b15c:	int3   
 101b15d:	int3   
 101b15e:	int3   
 101b15f:	int3   
 101b160:	mov    eax,0x1
 101b165:	lock xadd DWORD PTR [rcx+0x8],eax
 101b16a:	add    eax,0x1
 101b16d:	ret    
 101b16e:	int3   
 101b16f:	int3   
 101b170:	int3   
 101b171:	int3   
 101b172:	int3   
 101b173:	int3   
 101b174:	int3   
 101b175:	int3   
 101b176:	int3   
 101b177:	int3   
 101b178:	int3   
 101b179:	int3   
 101b17a:	int3   
 101b17b:	int3   
 101b17c:	int3   
 101b17d:	int3   
 101b17e:	int3   
 101b17f:	int3   
 101b180:	rex push rbx
 101b182:	sub    rsp,0x20
 101b186:	or     ebx,0xffffffff
 101b189:	lock xadd DWORD PTR [rcx+0x8],ebx
 101b18e:	add    ebx,0xffffffff
 101b191:	jne    0x101b19f
 101b193:	mov    rdx,rcx
 101b196:	mov    rcx,QWORD PTR [rcx+0x10]
 101b19a:	call   0x101a220
 101b19f:	mov    eax,ebx
 101b1a1:	add    rsp,0x20
 101b1a5:	pop    rbx
 101b1a6:	ret    
 101b1a7:	int3   
 101b1a8:	int3   
 101b1a9:	int3   
 101b1aa:	int3   
 101b1ab:	int3   
 101b1ac:	int3   
 101b1ad:	int3   
 101b1ae:	int3   
 101b1af:	int3   
 101b1b0:	mov    QWORD PTR [rsp+0x8],rbx
 101b1b5:	mov    QWORD PTR [rsp+0x10],rbp
 101b1ba:	mov    QWORD PTR [rsp+0x18],rsi
 101b1bf:	push   rdi
 101b1c0:	sub    rsp,0x20
 101b1c4:	mov    ebx,DWORD PTR [rcx+0x228]
 101b1ca:	mov    edx,0x220
 101b1cf:	mov    rbp,rcx
 101b1d2:	call   0x10197b0
 101b1d7:	xor    esi,esi
 101b1d9:	test   ebx,ebx
 101b1db:	lea    edi,[rbx+rax*1]
 101b1de:	je     0x101b207
 101b1e0:	mov    ecx,esi
 101b1e2:	mov    edx,0xb3c
 101b1e7:	imul   rcx,rcx,0xb3c
 101b1ee:	add    rcx,QWORD PTR [rbp+0x220]
 101b1f5:	call   0x10197b0
 101b1fa:	add    esi,0x1
 101b1fd:	add    edi,eax
 101b1ff:	cmp    esi,DWORD PTR [rbp+0x228]
 101b205:	jb     0x101b1e0
 101b207:	mov    rbx,QWORD PTR [rsp+0x30]
 101b20c:	mov    rbp,QWORD PTR [rsp+0x38]
 101b211:	mov    rsi,QWORD PTR [rsp+0x40]
 101b216:	mov    eax,edi
 101b218:	add    rsp,0x20
 101b21c:	pop    rdi
 101b21d:	ret    
 101b21e:	int3   
 101b21f:	int3   
 101b220:	int3   
 101b221:	int3   
 101b222:	int3   
 101b223:	int3   
 101b224:	int3   
 101b225:	int3   
 101b226:	int3   
 101b227:	int3   
 101b228:	int3   
 101b229:	int3   
 101b22a:	int3   
 101b22b:	int3   
 101b22c:	int3   
 101b22d:	int3   
 101b22e:	int3   
 101b22f:	int3   
 101b230:	mov    QWORD PTR [rsp+0x8],rbx
 101b235:	push   rdi
 101b236:	sub    rsp,0x20
 101b23a:	mov    rbx,rcx
 101b23d:	mov    rcx,QWORD PTR [rcx+0x10]
 101b241:	mov    rdi,rdx
 101b244:	test   rcx,rcx
 101b247:	je     0x101b257
 101b249:	mov    rax,QWORD PTR [rcx]
 101b24c:	call   QWORD PTR [rax+0x10]
 101b24f:	mov    QWORD PTR [rbx+0x10],0x0
 101b257:	mov    QWORD PTR [rbx+0x10],rdi
 101b25b:	mov    rax,QWORD PTR [rdi]
 101b25e:	mov    rcx,rdi
 101b261:	call   QWORD PTR [rax+0x8]
 101b264:	mov    rcx,QWORD PTR [rbx+0x10]
 101b268:	call   0x1019ea0
 101b26d:	mov    rcx,QWORD PTR [rbx+0x10]
 101b271:	mov    QWORD PTR [rbx+0x1370],rax
 101b278:	call   0x1019ea0
 101b27d:	mov    QWORD PTR [rbx+0x1398],rax
 101b284:	mov    rbx,QWORD PTR [rsp+0x30]
 101b289:	add    rsp,0x20
 101b28d:	pop    rdi
 101b28e:	ret    
 101b28f:	int3   
 101b290:	int3   
 101b291:	int3   
 101b292:	int3   
 101b293:	int3   
 101b294:	int3   
 101b295:	int3   
 101b296:	int3   
 101b297:	int3   
 101b298:	int3   
 101b299:	int3   
 101b29a:	int3   
 101b29b:	int3   
 101b29c:	int3   
 101b29d:	int3   
 101b29e:	int3   
 101b29f:	int3   
 101b2a0:	test   rdx,rdx
 101b2a3:	jne    0x101b2ab
 101b2a5:	mov    eax,0x80070057
 101b2aa:	ret    
 101b2ab:	mov    eax,DWORD PTR [rcx+0xa4]
 101b2b1:	test   eax,eax
 101b2b3:	je     0x101b2bf
 101b2b5:	bt     DWORD PTR [rcx+0xa8],0x15
 101b2bd:	jae    0x101b2c2
 101b2bf:	mov    eax,DWORD PTR [rcx+0x74]
 101b2c2:	mov    DWORD PTR [rdx],eax
 101b2c4:	xor    eax,eax
 101b2c6:	ret    
 101b2c7:	int3   
 101b2c8:	int3   
 101b2c9:	int3   
 101b2ca:	int3   
 101b2cb:	int3   
 101b2cc:	int3   
 101b2cd:	int3   
 101b2ce:	int3   
 101b2cf:	int3   
 101b2d0:	mov    QWORD PTR [rsp+0x18],rbx
 101b2d5:	mov    QWORD PTR [rsp+0x20],rsi
 101b2da:	mov    QWORD PTR [rsp+0x8],rcx
 101b2df:	push   rdi
 101b2e0:	push   r12
 101b2e2:	push   r13
 101b2e4:	sub    rsp,0x20
 101b2e8:	mov    rsi,rcx
 101b2eb:	xor    r12d,r12d
 101b2ee:	mov    ebx,r12d
 101b2f1:	mov    r13d,r12d
 101b2f4:	mov    rax,QWORD PTR [rcx+0x18]
 101b2f8:	mov    rdx,QWORD PTR [rax]
 101b2fb:	xchg   ax,ax
 101b2fd:	data16 xchg ax,ax
 101b300:	test   rdx,rdx
 101b303:	je     0x101b316
 101b305:	mov    rdi,QWORD PTR [rdx]
 101b308:	mov    rcx,QWORD PTR [rsi+0x10]
 101b30c:	call   0x1019680
 101b311:	mov    rdx,rdi
 101b314:	jmp    0x101b300
 101b316:	jmp    0x101b33f
 101b318:	mov    r13d,eax
 101b31b:	cmp    eax,0xc00000fd
 101b320:	jne    0x101b328
 101b322:	call   QWORD PTR [rip+0xfffffffffffe6120]        # 0x1001448
 101b328:	mov    ecx,0x80004005
 101b32d:	test   r13d,r13d
 101b330:	cmovns r13d,ecx
 101b334:	xor    r12d,r12d
 101b337:	mov    rsi,QWORD PTR [rsp+0x40]
 101b33c:	mov    ebx,r12d
 101b33f:	test   ebx,ebx
 101b341:	cmovns ebx,r13d
 101b345:	mov    DWORD PTR [rsp+0x48],ebx
 101b349:	mov    rax,QWORD PTR [rsi+0x18]
 101b34d:	mov    QWORD PTR [rax],r12
 101b350:	mov    rax,QWORD PTR [rsi+0x18]
 101b354:	mov    QWORD PTR [rsi+0x20],rax
 101b358:	jmp    0x101b37a
 101b35a:	mov    ebx,eax
 101b35c:	cmp    eax,0xc00000fd
 101b361:	jne    0x101b369
 101b363:	call   QWORD PTR [rip+0xfffffffffffe60df]        # 0x1001448
 101b369:	mov    ecx,0x80004005
 101b36e:	test   ebx,ebx
 101b370:	cmovns ebx,ecx
 101b373:	mov    r12d,ebx
 101b376:	mov    ebx,DWORD PTR [rsp+0x48]
 101b37a:	test   ebx,ebx
 101b37c:	cmovns ebx,r12d
 101b380:	mov    eax,ebx
 101b382:	mov    rbx,QWORD PTR [rsp+0x50]
 101b387:	mov    rsi,QWORD PTR [rsp+0x58]
 101b38c:	add    rsp,0x20
 101b390:	pop    r13
 101b392:	pop    r12
 101b394:	pop    rdi
 101b395:	ret    
 101b396:	int3   
 101b397:	int3   
 101b398:	int3   
 101b399:	int3   
 101b39a:	int3   
 101b39b:	int3   
 101b39c:	int3   
 101b39d:	int3   
 101b39e:	int3   
 101b39f:	int3   
 101b3a0:	rex push rbx
 101b3a2:	sub    rsp,0x20
 101b3a6:	mov    rbx,rcx
 101b3a9:	add    rcx,0x1360
 101b3b0:	call   0x101b2d0
 101b3b5:	test   eax,eax
 101b3b7:	jne    0x101b3c5
 101b3b9:	lea    rcx,[rbx+0x1388]
 101b3c0:	call   0x101b2d0
 101b3c5:	add    rsp,0x20
 101b3c9:	pop    rbx
 101b3ca:	ret    
 101b3cb:	int3   
 101b3cc:	int3   
 101b3cd:	int3   
 101b3ce:	int3   
 101b3cf:	int3   
 101b3d0:	int3   
 101b3d1:	int3   
 101b3d2:	int3   
 101b3d3:	int3   
 101b3d4:	int3   
 101b3d5:	int3   
 101b3d6:	int3   
 101b3d7:	int3   
 101b3d8:	int3   
 101b3d9:	int3   
 101b3da:	int3   
 101b3db:	int3   
 101b3dc:	int3   
 101b3dd:	int3   
 101b3de:	int3   
 101b3df:	int3   
 101b3e0:	mov    QWORD PTR [rsp+0x8],rbx
 101b3e5:	mov    DWORD PTR [rcx+0x22c],edx
 101b3eb:	lea    rdx,[rcx+0x14]
 101b3ef:	mov    rbx,r9
 101b3f2:	xor    r11d,r11d
 101b3f5:	mov    r9,rcx
 101b3f8:	mov    r10d,0x105
 101b3fe:	sub    r8,rdx
 101b401:	lea    rax,[r10+0x7ffffef9]
 101b408:	test   rax,rax
 101b40b:	je     0x101b426
 101b40d:	movzx  eax,WORD PTR [r8+rdx*1]
 101b412:	test   ax,ax
 101b415:	je     0x101b426
 101b417:	mov    WORD PTR [rdx],ax
 101b41a:	add    rdx,0x2
 101b41e:	sub    r10,0x1
 101b422:	jne    0x101b401
 101b424:	jmp    0x101b42b
 101b426:	test   r10,r10
 101b429:	jne    0x101b435
 101b42b:	sub    rdx,0x2
 101b42f:	mov    r11d,0x8007007a
 101b435:	test   r11d,r11d
 101b438:	mov    WORD PTR [rdx],0x0
 101b43d:	mov    eax,r11d
 101b440:	jne    0x101b468
 101b442:	mov    ecx,DWORD PTR [rbx]
 101b444:	mov    DWORD PTR [r9],ecx
 101b447:	mov    ecx,DWORD PTR [rbx+0x4]
 101b44a:	mov    DWORD PTR [r9+0x4],ecx
 101b44e:	mov    ecx,DWORD PTR [rbx+0x8]
 101b451:	mov    DWORD PTR [r9+0x8],ecx
 101b455:	mov    ecx,DWORD PTR [rbx+0xc]
 101b458:	mov    DWORD PTR [r9+0xc],ecx
 101b45c:	mov    rcx,QWORD PTR [rsp+0x28]
 101b461:	mov    QWORD PTR [r9+0x220],rcx
 101b468:	mov    rbx,QWORD PTR [rsp+0x8]
 101b46d:	ret    
 101b46e:	int3   
 101b46f:	int3   
 101b470:	int3   
 101b471:	int3   
 101b472:	int3   
 101b473:	int3   
 101b474:	int3   
 101b475:	int3   
 101b476:	int3   
 101b477:	int3   
 101b478:	int3   
 101b479:	int3   
 101b47a:	int3   
 101b47b:	int3   
 101b47c:	int3   
 101b47d:	int3   
 101b47e:	int3   
 101b47f:	int3   
 101b480:	rex push rsi
 101b482:	mov    eax,DWORD PTR [rcx+0x228]
 101b488:	movzx  esi,r9w
 101b48c:	mov    r11,r8
 101b48f:	cmp    eax,DWORD PTR [rcx+0x22c]
 101b495:	mov    r10,rdx
 101b498:	jne    0x101b4a1
 101b49a:	mov    eax,0x80004005
 101b49f:	pop    rsi
 101b4a0:	ret    
 101b4a1:	mov    QWORD PTR [rsp+0x10],rbx
 101b4a6:	mov    QWORD PTR [rsp+0x18],rdi
 101b4ab:	mov    rdi,rax
 101b4ae:	add    eax,0x1
 101b4b1:	xor    ebx,ebx
 101b4b3:	mov    edx,0x105
 101b4b8:	imul   rdi,rdi,0xb3c
 101b4bf:	add    rdi,QWORD PTR [rcx+0x220]
 101b4c6:	mov    DWORD PTR [rcx+0x228],eax
 101b4cc:	mov    r8,rdx
 101b4cf:	lea    rcx,[rdi+0x6]
 101b4d3:	mov    r9d,ebx
 101b4d6:	sub    r10,rcx
 101b4d9:	data16 xchg ax,ax
 101b4dc:	data16 data16 xchg ax,ax
 101b4e0:	lea    rax,[r8+0x7ffffef9]
 101b4e7:	test   rax,rax
 101b4ea:	je     0x101b505
 101b4ec:	movzx  eax,WORD PTR [r10+rcx*1]
 101b4f1:	test   ax,ax
 101b4f4:	je     0x101b505
 101b4f6:	mov    WORD PTR [rcx],ax
 101b4f9:	add    rcx,0x2
 101b4fd:	sub    r8,0x1
 101b501:	jne    0x101b4e0
 101b503:	jmp    0x101b50a
 101b505:	test   r8,r8
 101b508:	jne    0x101b514
 101b50a:	sub    rcx,0x2
 101b50e:	mov    r9d,0x8007007a
 101b514:	mov    WORD PTR [rcx],bx
 101b517:	lea    rcx,[rdi+0x316]
 101b51e:	sub    r11,rcx
 101b521:	lea    rax,[rdx+0x7ffffef9]
 101b528:	test   rax,rax
 101b52b:	je     0x101b546
 101b52d:	movzx  eax,WORD PTR [r11+rcx*1]
 101b532:	test   ax,ax
 101b535:	je     0x101b546
 101b537:	mov    WORD PTR [rcx],ax
 101b53a:	add    rcx,0x2
 101b53e:	sub    rdx,0x1
 101b542:	jne    0x101b521
 101b544:	jmp    0x101b54b
 101b546:	test   rdx,rdx
 101b549:	jne    0x101b554
 101b54b:	sub    rcx,0x2
 101b54f:	mov    ebx,0x8007007a
 101b554:	test   r9d,r9d
 101b557:	mov    WORD PTR [rcx],0x0
 101b55c:	mov    WORD PTR [rdi+0x4],si
 101b560:	mov    rdi,QWORD PTR [rsp+0x18]
 101b565:	cmovns r9d,ebx
 101b569:	mov    rbx,QWORD PTR [rsp+0x10]
 101b56e:	mov    eax,r9d
 101b571:	pop    rsi
 101b572:	ret    
 101b573:	int3   
 101b574:	int3   
 101b575:	int3   
 101b576:	int3   
 101b577:	int3   
 101b578:	int3   
 101b579:	int3   
 101b57a:	int3   
 101b57b:	int3   
 101b57c:	int3   
 101b57d:	int3   
 101b57e:	int3   
 101b57f:	int3   
 101b580:	mov    QWORD PTR [rsp+0x8],rbx
 101b585:	mov    QWORD PTR [rsp+0x10],rsi
 101b58a:	mov    QWORD PTR [rsp+0x18],rdi
 101b58f:	mov    QWORD PTR [rsp+0x20],r12
 101b594:	push   r13
 101b596:	sub    rsp,0x40
 101b59a:	mov    r12,r9
 101b59d:	mov    r13,r8
 101b5a0:	mov    edi,edx
 101b5a2:	mov    rsi,rcx
 101b5a5:	xor    ebx,ebx
 101b5a7:	mov    DWORD PTR [rsp+0x30],ebx
 101b5ab:	mov    rcx,QWORD PTR [rcx+0x10]
 101b5af:	call   0x1019ea0
 101b5b4:	mov    rcx,rax
 101b5b7:	mov    eax,0xb3c
 101b5bc:	mul    rdi
 101b5bf:	mov    rdx,0xffffffffffffffff
 101b5c6:	cmovo  rax,rdx
 101b5ca:	mov    rdx,rax
 101b5cd:	call   0x1019620
 101b5d2:	test   rax,rax
 101b5d5:	jne    0x101b5e2
 101b5d7:	mov    eax,0x8007000e
 101b5dc:	mov    DWORD PTR [rsp+0x30],eax
 101b5e0:	jmp    0x101b5ff
 101b5e2:	lea    rcx,[rsi+0x1120]
 101b5e9:	mov    QWORD PTR [rsp+0x20],rax
 101b5ee:	mov    r9,r12
 101b5f1:	mov    r8,r13
 101b5f4:	mov    edx,edi
 101b5f6:	call   0x101b3e0
 101b5fb:	mov    DWORD PTR [rsp+0x30],eax
 101b5ff:	jmp    0x101b61e
 101b601:	mov    ebx,eax
 101b603:	cmp    eax,0xc00000fd
 101b608:	jne    0x101b610
 101b60a:	call   QWORD PTR [rip+0xfffffffffffe5e38]        # 0x1001448
 101b610:	mov    eax,0x80004005
 101b615:	test   ebx,ebx
 101b617:	cmovns ebx,eax
 101b61a:	mov    eax,DWORD PTR [rsp+0x30]
 101b61e:	test   eax,eax
 101b620:	cmovns eax,ebx
 101b623:	mov    rbx,QWORD PTR [rsp+0x50]
 101b628:	mov    rsi,QWORD PTR [rsp+0x58]
 101b62d:	mov    rdi,QWORD PTR [rsp+0x60]
 101b632:	mov    r12,QWORD PTR [rsp+0x68]
 101b637:	add    rsp,0x40
 101b63b:	pop    r13
 101b63d:	ret    
 101b63e:	int3   
 101b63f:	int3   
 101b640:	int3   
 101b641:	int3   
 101b642:	int3   
 101b643:	int3   
 101b644:	int3   
 101b645:	int3   
 101b646:	int3   
 101b647:	int3   
 101b648:	int3   
 101b649:	int3   
 101b64a:	int3   
 101b64b:	int3   
 101b64c:	int3   
 101b64d:	int3   
 101b64e:	int3   
 101b64f:	int3   
 101b650:	mov    QWORD PTR [rsp+0x18],rbp
 101b655:	mov    QWORD PTR [rsp+0x20],rsi
 101b65a:	push   rdi
 101b65b:	sub    rsp,0x20
 101b65f:	cmp    DWORD PTR [rcx+0x13b8],0x0
 101b666:	mov    rsi,r8
 101b669:	mov    rbp,rdx
 101b66c:	mov    rdi,rcx
 101b66f:	jne    0x101b683
 101b671:	xor    eax,eax
 101b673:	mov    rbp,QWORD PTR [rsp+0x40]
 101b678:	mov    rsi,QWORD PTR [rsp+0x48]
 101b67d:	add    rsp,0x20
 101b681:	pop    rdi
 101b682:	ret    
 101b683:	mov    r9d,DWORD PTR [rcx+0x13b4]
 101b68a:	lea    r8,[rip+0xfffffffffffeb44f]        # 0x1006ae0
 101b691:	mov    rdx,rsi
 101b694:	mov    rcx,rbp
 101b697:	call   0x1019c40
 101b69c:	test   eax,eax
 101b69e:	mov    r11d,eax
 101b6a1:	js     0x101b751
 101b6a7:	mov    eax,DWORD PTR [rdi+0x13b4]
 101b6ad:	cmp    eax,0x20000001
 101b6b2:	jne    0x101b6d5
 101b6b4:	lea    r8,[rip+0xfffffffffffeb3c5]        # 0x1006a80
 101b6bb:	mov    rdx,rsi
 101b6be:	mov    rcx,rbp
 101b6c1:	mov    rbp,QWORD PTR [rsp+0x40]
 101b6c6:	mov    rsi,QWORD PTR [rsp+0x48]
 101b6cb:	add    rsp,0x20
 101b6cf:	pop    rdi
 101b6d0:	jmp    0x100dc90
 101b6d5:	test   eax,eax
 101b6d7:	jne    0x101b6fa
 101b6d9:	lea    r8,[rip+0xfffffffffffeb310]        # 0x10069f0
 101b6e0:	mov    rdx,rsi
 101b6e3:	mov    rcx,rbp
 101b6e6:	mov    rbp,QWORD PTR [rsp+0x40]
 101b6eb:	mov    rsi,QWORD PTR [rsp+0x48]
 101b6f0:	add    rsp,0x20
 101b6f4:	pop    rdi
 101b6f5:	jmp    0x100dc90
 101b6fa:	mov    QWORD PTR [rsp+0x30],rbx
 101b6ff:	mov    QWORD PTR [rsp+0x38],r12
 101b704:	lea    r12,[rip+0xfffffffffffeb205]        # 0x1006910
 101b70b:	xor    ebx,ebx
 101b70d:	data16 xchg ax,ax
 101b710:	mov    ecx,DWORD PTR [rbx+r12*1]
 101b714:	mov    eax,ecx
 101b716:	and    eax,DWORD PTR [rdi+0x13b4]
 101b71c:	cmp    ecx,eax
 101b71e:	jne    0x101b737
 101b720:	mov    r8,QWORD PTR [rbx+r12*1+0x8]
 101b725:	mov    rdx,rsi
 101b728:	mov    rcx,rbp
 101b72b:	call   0x100dc90
 101b730:	test   eax,eax
 101b732:	mov    r11d,eax
 101b735:	js     0x101b747
 101b737:	add    rbx,0x10
 101b73b:	cmp    rbx,0xe0
 101b742:	jb     0x101b710
 101b744:	mov    eax,r11d
 101b747:	mov    rbx,QWORD PTR [rsp+0x30]
 101b74c:	mov    r12,QWORD PTR [rsp+0x38]
 101b751:	mov    rbp,QWORD PTR [rsp+0x40]
 101b756:	mov    rsi,QWORD PTR [rsp+0x48]
 101b75b:	add    rsp,0x20
 101b75f:	pop    rdi
 101b760:	ret    
 101b761:	int3   
 101b762:	int3   
 101b763:	int3   
 101b764:	int3   
 101b765:	int3   
 101b766:	int3   
 101b767:	int3   
 101b768:	int3   
 101b769:	int3   
 101b76a:	int3   
 101b76b:	int3   
 101b76c:	int3   
 101b76d:	int3   
 101b76e:	int3   
 101b76f:	int3   
 101b770:	mov    QWORD PTR [rsp+0x8],rbx
 101b775:	push   rdi
 101b776:	sub    rsp,0x30
 101b77a:	xor    edi,edi
 101b77c:	mov    rbx,QWORD PTR [rcx+0x18]
 101b780:	mov    QWORD PTR [rsp+0x20],rbx
 101b785:	test   rbx,rbx
 101b788:	je     0x101b7aa
 101b78a:	lea    rcx,[rbx+0xc]
 101b78e:	mov    edx,DWORD PTR [rcx]
 101b790:	shl    rdx,0x4
 101b794:	add    rdx,0xc
 101b798:	call   0x10197b0
 101b79d:	mov    DWORD PTR [rbx+0x8],eax
 101b7a0:	mov    rbx,QWORD PTR [rbx]
 101b7a3:	mov    QWORD PTR [rsp+0x20],rbx
 101b7a8:	jmp    0x101b785
 101b7aa:	jmp    0x101b7c5
 101b7ac:	mov    edi,eax
 101b7ae:	cmp    eax,0xc00000fd
 101b7b3:	jne    0x101b7bb
 101b7b5:	call   QWORD PTR [rip+0xfffffffffffe5c8d]        # 0x1001448
 101b7bb:	mov    eax,0x80004005
 101b7c0:	test   edi,edi
 101b7c2:	cmovns edi,eax
 101b7c5:	mov    eax,edi
 101b7c7:	mov    rbx,QWORD PTR [rsp+0x40]
 101b7cc:	add    rsp,0x30
 101b7d0:	pop    rdi
 101b7d1:	ret    
 101b7d2:	int3   
 101b7d3:	int3   
 101b7d4:	int3   
 101b7d5:	int3   
 101b7d6:	int3   
 101b7d7:	int3   
 101b7d8:	int3   
 101b7d9:	int3   
 101b7da:	int3   
 101b7db:	int3   
 101b7dc:	int3   
 101b7dd:	int3   
 101b7de:	int3   
 101b7df:	int3   
 101b7e0:	mov    QWORD PTR [rsp+0x8],rbx
 101b7e5:	push   rdi
 101b7e6:	sub    rsp,0x20
 101b7ea:	xor    edi,edi
 101b7ec:	mov    DWORD PTR [rcx],0x2
 101b7f2:	mov    rbx,rcx
 101b7f5:	mov    DWORD PTR [rcx+0x4],edi
 101b7f8:	mov    QWORD PTR [rcx+0x8],rdi
 101b7fc:	mov    QWORD PTR [rcx+0x10],rdi
 101b800:	mov    QWORD PTR [rcx+0x18],rdi
 101b804:	mov    QWORD PTR [rcx+0x20],rdi
 101b808:	mov    QWORD PTR [rcx+0x28],rdi
 101b80c:	mov    QWORD PTR [rcx+0x30],rdi
 101b810:	mov    QWORD PTR [rcx+0x38],rdi
 101b814:	mov    QWORD PTR [rcx+0x40],rdi
 101b818:	mov    QWORD PTR [rcx+0x48],rdi
 101b81c:	mov    QWORD PTR [rcx+0x50],rdi
 101b820:	mov    DWORD PTR [rcx+0x58],edi
 101b823:	mov    DWORD PTR [rcx+0x5c],edi
 101b826:	mov    DWORD PTR [rcx+0x60],edi
 101b829:	mov    DWORD PTR [rcx+0x64],edi
 101b82c:	mov    QWORD PTR [rcx+0x68],rdi
 101b830:	mov    QWORD PTR [rcx+0x78],rdi
 101b834:	mov    QWORD PTR [rcx+0x80],rdi
 101b83b:	mov    DWORD PTR [rcx+0x88],edi
 101b841:	mov    DWORD PTR [rcx+0x8c],edi
 101b847:	mov    DWORD PTR [rcx+0x90],edi
 101b84d:	mov    DWORD PTR [rcx+0x94],edi
 101b853:	mov    DWORD PTR [rcx+0x98],edi
 101b859:	mov    DWORD PTR [rcx+0x9c],edi
 101b85f:	mov    DWORD PTR [rcx+0xa0],edi
 101b865:	mov    DWORD PTR [rcx+0xa4],edi
 101b86b:	mov    DWORD PTR [rcx+0xa8],edi
 101b871:	mov    DWORD PTR [rcx+0xac],edi
 101b877:	mov    DWORD PTR [rcx+0xb0],edi
 101b87d:	mov    DWORD PTR [rcx+0xb4],edi
 101b883:	mov    DWORD PTR [rcx+0xb8],edi
 101b889:	mov    DWORD PTR [rcx+0xbc],edi
 101b88f:	mov    DWORD PTR [rcx+0xc4],edi
 101b895:	mov    DWORD PTR [rcx+0xc8],edi
 101b89b:	mov    DWORD PTR [rcx+0xcc],edi
 101b8a1:	mov    QWORD PTR [rcx+0xd0],rdi
 101b8a8:	mov    DWORD PTR [rcx+0xd8],edi
 101b8ae:	mov    DWORD PTR [rcx+0xdc],edi
 101b8b4:	mov    DWORD PTR [rcx+0xe0],0x80
 101b8be:	mov    DWORD PTR [rcx+0xe4],edi
 101b8c4:	add    rcx,0xe8
 101b8cb:	xor    edx,edx
 101b8cd:	mov    r8d,0x800
 101b8d3:	call   0x100c10e
 101b8d8:	lea    rcx,[rbx+0x900]
 101b8df:	xor    edx,edx
 101b8e1:	mov    r8d,0x800
 101b8e7:	mov    QWORD PTR [rbx+0x8e8],rdi
 101b8ee:	mov    DWORD PTR [rbx+0x8f0],edi
 101b8f4:	mov    DWORD PTR [rbx+0x8f4],edi
 101b8fa:	mov    DWORD PTR [rbx+0x8f8],0x80
 101b904:	mov    DWORD PTR [rbx+0x8fc],edi
 101b90a:	call   0x100c10e
 101b90f:	lea    rcx,[rbx+0x1108]
 101b916:	xor    edx,edx
 101b918:	mov    r8d,0x230
 101b91e:	call   0x100c10e
 101b923:	mov    DWORD PTR [rbx+0x70],edi
 101b926:	mov    DWORD PTR [rbx+0x74],edi
 101b929:	mov    rax,rbx
 101b92c:	mov    rbx,QWORD PTR [rsp+0x30]
 101b931:	add    rsp,0x20
 101b935:	pop    rdi
 101b936:	ret    
 101b937:	int3   
 101b938:	int3   
 101b939:	int3   
 101b93a:	int3   
 101b93b:	int3   
 101b93c:	int3   
 101b93d:	int3   
 101b93e:	int3   
 101b93f:	int3   
 101b940:	mov    QWORD PTR [rsp+0x8],rbx
 101b945:	mov    QWORD PTR [rsp+0x10],rbp
 101b94a:	mov    QWORD PTR [rsp+0x18],rsi
 101b94f:	push   rdi
 101b950:	sub    rsp,0x20
 101b954:	lea    rax,[rip+0xfffffffffffeb725]        # 0x1007080
 101b95b:	mov    rdi,rcx
 101b95e:	mov    DWORD PTR [rcx+0x8],0x1
 101b965:	mov    QWORD PTR [rcx],rax
 101b968:	xor    ebp,ebp
 101b96a:	add    rcx,0x18
 101b96e:	mov    QWORD PTR [rcx-0x8],rbp
 101b972:	mov    ebx,r8d
 101b975:	mov    rsi,rdx
 101b978:	call   0x101b7e0
 101b97d:	test   rsi,rsi
 101b980:	mov    QWORD PTR [rdi+0x1360],0x200
 101b98b:	mov    QWORD PTR [rdi+0x1368],rbp
 101b992:	mov    QWORD PTR [rdi+0x1370],rbp
 101b999:	lea    r11,[rdi+0xe8]
 101b9a0:	mov    QWORD PTR [rdi+0x1378],r11
 101b9a7:	mov    QWORD PTR [rdi+0x1380],r11
 101b9ae:	mov    QWORD PTR [rdi+0x1388],0x200
 101b9b9:	mov    QWORD PTR [rdi+0x1390],rbp
 101b9c0:	mov    QWORD PTR [rdi+0x1398],rbp
 101b9c7:	lea    rax,[rdi+0x900]
 101b9ce:	mov    QWORD PTR [rdi+0x13a0],rax
 101b9d5:	mov    QWORD PTR [rdi+0x13a8],rax
 101b9dc:	mov    DWORD PTR [rdi+0x13b0],ebx
 101b9e2:	mov    DWORD PTR [rdi+0x13b4],ebp
 101b9e8:	mov    DWORD PTR [rdi+0x13b8],ebp
 101b9ee:	mov    DWORD PTR [rdi+0x13bc],ebp
 101b9f4:	mov    DWORD PTR [rdi+0x13c0],ebp
 101b9fa:	mov    QWORD PTR [rdi+0x13c8],rbp
 101ba01:	je     0x101ba43
 101ba03:	mov    rcx,QWORD PTR [rdi+0x10]
 101ba07:	test   rcx,rcx
 101ba0a:	je     0x101ba16
 101ba0c:	mov    rax,QWORD PTR [rcx]
 101ba0f:	call   QWORD PTR [rax+0x10]
 101ba12:	mov    QWORD PTR [rdi+0x10],rbp
 101ba16:	mov    QWORD PTR [rdi+0x10],rsi
 101ba1a:	mov    rax,QWORD PTR [rsi]
 101ba1d:	mov    rcx,rsi
 101ba20:	call   QWORD PTR [rax+0x8]
 101ba23:	mov    rcx,QWORD PTR [rdi+0x10]
 101ba27:	call   0x1019ea0
 101ba2c:	mov    rcx,QWORD PTR [rdi+0x10]
 101ba30:	mov    QWORD PTR [rdi+0x1370],rax
 101ba37:	call   0x1019ea0
 101ba3c:	mov    QWORD PTR [rdi+0x1398],rax
 101ba43:	call   QWORD PTR [rip+0xfffffffffffe582f]        # 0x1001278
 101ba49:	lea    rcx,[rdi+0x13d0]
 101ba50:	xor    edx,edx
 101ba52:	mov    r8d,0x208
 101ba58:	mov    DWORD PTR [rdi+0x74],eax
 101ba5b:	call   0x100c10e
 101ba60:	xor    edx,edx
 101ba62:	lea    rcx,[rdi+0x15d8]
 101ba69:	lea    r8d,[rdx+0x68]
 101ba6d:	call   0x100c10e
 101ba72:	mov    rbx,QWORD PTR [rsp+0x30]
 101ba77:	mov    rbp,QWORD PTR [rsp+0x38]
 101ba7c:	mov    rsi,QWORD PTR [rsp+0x40]
 101ba81:	xor    eax,eax
 101ba83:	mov    QWORD PTR [rdi+0x1640],rax
 101ba8a:	mov    QWORD PTR [rdi+0x1648],rax
 101ba91:	mov    QWORD PTR [rdi+0x1650],rax
 101ba98:	mov    rax,rdi
 101ba9b:	add    rsp,0x20
 101ba9f:	pop    rdi
 101baa0:	ret    
 101baa1:	int3   
 101baa2:	int3   
 101baa3:	int3   
 101baa4:	int3   
 101baa5:	int3   
 101baa6:	int3   
 101baa7:	int3   
 101baa8:	int3   
 101baa9:	int3   
 101baaa:	int3   
 101baab:	int3   
 101baac:	int3   
 101baad:	int3   
 101baae:	int3   
 101baaf:	int3   
 101bab0:	mov    QWORD PTR [rsp+0x10],rbx
 101bab5:	mov    QWORD PTR [rsp+0x18],rbp
 101baba:	mov    QWORD PTR [rsp+0x20],rsi
 101babf:	push   rdi
 101bac0:	sub    rsp,0x20
 101bac4:	xor    ebx,ebx
 101bac6:	test   rdx,rdx
 101bac9:	mov    rsi,r8
 101bacc:	mov    rbp,rdx
 101bacf:	mov    rdi,rcx
 101bad2:	je     0x101bb8a
 101bad8:	test   r8,r8
 101badb:	je     0x101bb8a
 101bae1:	mov    r9,QWORD PTR [rcx+0x1380]
 101bae8:	mov    QWORD PTR [rsp+0x30],r12
 101baed:	mov    eax,DWORD PTR [r9+0x10]
 101baf1:	cmp    DWORD PTR [r9+0xc],eax
 101baf5:	jb     0x101bb40
 101baf7:	mov    rcx,QWORD PTR [rcx+0x1370]
 101bafe:	test   rcx,rcx
 101bb01:	je     0x101bb7c
 101bb03:	mov    r12,QWORD PTR [rdi+0x1360]
 101bb0a:	mov    rdx,r12
 101bb0d:	shl    rdx,0x4
 101bb11:	add    rdx,0x18
 101bb15:	call   0x1019620
 101bb1a:	test   rax,rax
 101bb1d:	mov    r11,rax
 101bb20:	je     0x101bb7c
 101bb22:	mov    QWORD PTR [rax],rbx
 101bb25:	mov    DWORD PTR [rax+0x8],ebx
 101bb28:	mov    DWORD PTR [rax+0xc],ebx
 101bb2b:	mov    DWORD PTR [rax+0x10],r12d
 101bb2f:	mov    rax,QWORD PTR [rdi+0x1380]
 101bb36:	mov    QWORD PTR [rax],r11
 101bb39:	mov    QWORD PTR [rdi+0x1380],r11
 101bb40:	mov    rcx,QWORD PTR [rdi+0x1380]
 101bb47:	mov    edx,DWORD PTR [rcx+0xc]
 101bb4a:	lea    eax,[rdx+0x1]
 101bb4d:	add    rdx,rdx
 101bb50:	mov    DWORD PTR [rcx+0xc],eax
 101bb53:	mov    rax,QWORD PTR [rdi+0x1380]
 101bb5a:	add    QWORD PTR [rdi+0x1368],0x1
 101bb62:	lea    rcx,[rax+rdx*8+0x18]
 101bb67:	test   rcx,rcx
 101bb6a:	je     0x101bb7c
 101bb6c:	mov    r12,QWORD PTR [rsp+0x30]
 101bb71:	mov    QWORD PTR [rcx],rbp
 101bb74:	mov    QWORD PTR [rcx+0x8],rsi
 101bb78:	mov    eax,ebx
 101bb7a:	jmp    0x101bb8c
 101bb7c:	mov    r12,QWORD PTR [rsp+0x30]
 101bb81:	mov    ebx,0x8007000e
 101bb86:	mov    eax,ebx
 101bb88:	jmp    0x101bb8c
 101bb8a:	xor    eax,eax
 101bb8c:	mov    rbx,QWORD PTR [rsp+0x38]
 101bb91:	mov    rbp,QWORD PTR [rsp+0x40]
 101bb96:	mov    rsi,QWORD PTR [rsp+0x48]
 101bb9b:	add    rsp,0x20
 101bb9f:	pop    rdi
 101bba0:	ret    
 101bba1:	int3   
 101bba2:	int3   
 101bba3:	int3   
 101bba4:	int3   
 101bba5:	int3   
 101bba6:	int3   
 101bba7:	int3   
 101bba8:	int3   
 101bba9:	int3   
 101bbaa:	int3   
 101bbab:	int3   
 101bbac:	int3   
 101bbad:	int3   
 101bbae:	int3   
 101bbaf:	int3   
 101bbb0:	mov    QWORD PTR [rsp+0x10],rbx
 101bbb5:	mov    QWORD PTR [rsp+0x18],rbp
 101bbba:	mov    QWORD PTR [rsp+0x20],rsi
 101bbbf:	push   rdi
 101bbc0:	sub    rsp,0x20
 101bbc4:	xor    ebx,ebx
 101bbc6:	test   rdx,rdx
 101bbc9:	mov    rsi,r8
 101bbcc:	mov    rbp,rdx
 101bbcf:	mov    rdi,rcx
 101bbd2:	je     0x101bc8a
 101bbd8:	test   r8,r8
 101bbdb:	je     0x101bc8a
 101bbe1:	mov    r9,QWORD PTR [rcx+0x13a8]
 101bbe8:	mov    QWORD PTR [rsp+0x30],r12
 101bbed:	mov    eax,DWORD PTR [r9+0x10]
 101bbf1:	cmp    DWORD PTR [r9+0xc],eax
 101bbf5:	jb     0x101bc40
 101bbf7:	mov    rcx,QWORD PTR [rcx+0x1398]
 101bbfe:	test   rcx,rcx
 101bc01:	je     0x101bc7c
 101bc03:	mov    r12,QWORD PTR [rdi+0x1388]
 101bc0a:	mov    rdx,r12
 101bc0d:	shl    rdx,0x4
 101bc11:	add    rdx,0x18
 101bc15:	call   0x1019620
 101bc1a:	test   rax,rax
 101bc1d:	mov    r11,rax
 101bc20:	je     0x101bc7c
 101bc22:	mov    QWORD PTR [rax],rbx
 101bc25:	mov    DWORD PTR [rax+0x8],ebx
 101bc28:	mov    DWORD PTR [rax+0xc],ebx
 101bc2b:	mov    DWORD PTR [rax+0x10],r12d
 101bc2f:	mov    rax,QWORD PTR [rdi+0x13a8]
 101bc36:	mov    QWORD PTR [rax],r11
 101bc39:	mov    QWORD PTR [rdi+0x13a8],r11
 101bc40:	mov    rcx,QWORD PTR [rdi+0x13a8]
 101bc47:	mov    edx,DWORD PTR [rcx+0xc]
 101bc4a:	lea    eax,[rdx+0x1]
 101bc4d:	add    rdx,rdx
 101bc50:	mov    DWORD PTR [rcx+0xc],eax
 101bc53:	mov    rax,QWORD PTR [rdi+0x13a8]
 101bc5a:	add    QWORD PTR [rdi+0x1390],0x1
 101bc62:	lea    rcx,[rax+rdx*8+0x18]
 101bc67:	test   rcx,rcx
 101bc6a:	je     0x101bc7c
 101bc6c:	mov    r12,QWORD PTR [rsp+0x30]
 101bc71:	mov    QWORD PTR [rcx],rbp
 101bc74:	mov    QWORD PTR [rcx+0x8],rsi
 101bc78:	mov    eax,ebx
 101bc7a:	jmp    0x101bc8c
 101bc7c:	mov    r12,QWORD PTR [rsp+0x30]
 101bc81:	mov    ebx,0x8007000e
 101bc86:	mov    eax,ebx
 101bc88:	jmp    0x101bc8c
 101bc8a:	xor    eax,eax
 101bc8c:	mov    rbx,QWORD PTR [rsp+0x38]
 101bc91:	mov    rbp,QWORD PTR [rsp+0x40]
 101bc96:	mov    rsi,QWORD PTR [rsp+0x48]
 101bc9b:	add    rsp,0x20
 101bc9f:	pop    rdi
 101bca0:	ret    
 101bca1:	int3   
 101bca2:	int3   
 101bca3:	int3   
 101bca4:	int3   
 101bca5:	int3   
 101bca6:	int3   
 101bca7:	int3   
 101bca8:	int3   
 101bca9:	int3   
 101bcaa:	int3   
 101bcab:	int3   
 101bcac:	int3   
 101bcad:	int3   
 101bcae:	int3   
 101bcaf:	int3   
 101bcb0:	rex push rbx
 101bcb2:	sub    rsp,0x30
 101bcb6:	xor    ebx,ebx
 101bcb8:	mov    DWORD PTR [rsp+0x20],ebx
 101bcbc:	add    rcx,0x1120
 101bcc3:	call   0x101b480
 101bcc8:	mov    DWORD PTR [rsp+0x20],eax
 101bccc:	jmp    0x101bceb
 101bcce:	mov    ebx,eax
 101bcd0:	cmp    eax,0xc00000fd
 101bcd5:	jne    0x101bcdd
 101bcd7:	call   QWORD PTR [rip+0xfffffffffffe576b]        # 0x1001448
 101bcdd:	mov    eax,0x80004005
 101bce2:	test   ebx,ebx
 101bce4:	cmovns ebx,eax
 101bce7:	mov    eax,DWORD PTR [rsp+0x20]
 101bceb:	test   eax,eax
 101bced:	cmovns eax,ebx
 101bcf0:	add    rsp,0x30
 101bcf4:	pop    rbx
 101bcf5:	ret    
 101bcf6:	int3   
 101bcf7:	int3   
 101bcf8:	int3   
 101bcf9:	int3   
 101bcfa:	int3   
 101bcfb:	int3   
 101bcfc:	int3   
 101bcfd:	int3   
 101bcfe:	int3   
 101bcff:	int3   
 101bd00:	mov    QWORD PTR [rsp+0x8],rbx
 101bd05:	mov    QWORD PTR [rsp+0x10],rsi
 101bd0a:	push   rdi
 101bd0b:	sub    rsp,0x30
 101bd0f:	mov    rsi,rcx
 101bd12:	xor    edi,edi
 101bd14:	mov    DWORD PTR [rsp+0x20],edi
 101bd18:	add    rcx,0x18
 101bd1c:	mov    edx,0xa0
 101bd21:	call   0x10197b0
 101bd26:	mov    DWORD PTR [rsi+0xb8],eax
 101bd2c:	mov    rcx,QWORD PTR [rsi+0x38]
 101bd30:	call   0x1019800
 101bd35:	mov    DWORD PTR [rsi+0xc0],eax
 101bd3b:	mov    rcx,QWORD PTR [rsi+0x40]
 101bd3f:	call   0x1019800
 101bd44:	mov    DWORD PTR [rsi+0xc4],eax
 101bd4a:	lea    rcx,[rsi+0x1360]
 101bd51:	call   0x101b770
 101bd56:	mov    ebx,eax
 101bd58:	mov    DWORD PTR [rsp+0x20],eax
 101bd5c:	test   eax,eax
 101bd5e:	jne    0x101bd72
 101bd60:	lea    rcx,[rsi+0x1388]
 101bd67:	call   0x101b770
 101bd6c:	mov    ebx,eax
 101bd6e:	mov    DWORD PTR [rsp+0x20],eax
 101bd72:	mov    rcx,QWORD PTR [rsi+0x90]
 101bd79:	call   0x1019800
 101bd7e:	mov    DWORD PTR [rsi+0xd4],eax
 101bd84:	mov    rcx,QWORD PTR [rsi+0x98]
 101bd8b:	call   0x1019800
 101bd90:	mov    DWORD PTR [rsi+0xd8],eax
 101bd96:	mov    rcx,QWORD PTR [rsi+0x58]
 101bd9a:	call   0x1019800
 101bd9f:	mov    DWORD PTR [rsi+0xd0],eax
 101bda5:	mov    rcx,QWORD PTR [rsi+0x20]
 101bda9:	call   0x1019800
 101bdae:	mov    DWORD PTR [rsi+0xbc],eax
 101bdb4:	mov    rcx,QWORD PTR [rsi+0x48]
 101bdb8:	call   0x1019800
 101bdbd:	mov    DWORD PTR [rsi+0xc8],eax
 101bdc3:	mov    rcx,QWORD PTR [rsi+0x50]
 101bdc7:	call   0x1019800
 101bdcc:	mov    DWORD PTR [rsi+0xcc],eax
 101bdd2:	mov    rcx,QWORD PTR [rsi+0x60]
 101bdd6:	call   0x1019800
 101bddb:	mov    DWORD PTR [rsi+0xdc],eax
 101bde1:	mov    rcx,QWORD PTR [rsi+0x68]
 101bde5:	call   0x1019800
 101bdea:	mov    DWORD PTR [rsi+0xe0],eax
 101bdf0:	lea    rcx,[rsi+0x1120]
 101bdf7:	call   0x101b1b0
 101bdfc:	mov    DWORD PTR [rsi+0x1350],eax
 101be02:	jmp    0x101be21
 101be04:	mov    edi,eax
 101be06:	cmp    eax,0xc00000fd
 101be0b:	jne    0x101be13
 101be0d:	call   QWORD PTR [rip+0xfffffffffffe5635]        # 0x1001448
 101be13:	mov    eax,0x80004005
 101be18:	test   edi,edi
 101be1a:	cmovns edi,eax
 101be1d:	mov    ebx,DWORD PTR [rsp+0x20]
 101be21:	test   ebx,ebx
 101be23:	cmovns ebx,edi
 101be26:	mov    eax,ebx
 101be28:	mov    rbx,QWORD PTR [rsp+0x40]
 101be2d:	mov    rsi,QWORD PTR [rsp+0x48]
 101be32:	add    rsp,0x30
 101be36:	pop    rdi
 101be37:	ret    
 101be38:	int3   
 101be39:	int3   
 101be3a:	int3   
 101be3b:	int3   
 101be3c:	int3   
 101be3d:	int3   
 101be3e:	int3   
 101be3f:	int3   
 101be40:	mov    QWORD PTR [rsp+0x8],rcx
 101be45:	push   rbx
 101be46:	push   rsi
 101be47:	push   rdi
 101be48:	push   r12
 101be4a:	push   r13
 101be4c:	push   r14
 101be4e:	push   r15
 101be50:	sub    rsp,0x60
 101be54:	mov    rsi,rcx
 101be57:	xor    r12d,r12d
 101be5a:	mov    ebx,r12d
 101be5d:	mov    DWORD PTR [rsp+0x50],ebx
 101be61:	call   QWORD PTR [rip+0xfffffffffffe5371]        # 0x10011d8
 101be67:	mov    rcx,rax
 101be6a:	call   QWORD PTR [rip+0xfffffffffffe5360]        # 0x10011d0
 101be70:	mov    r15d,eax
 101be73:	mov    DWORD PTR [rsp+0xa8],eax
 101be7a:	cmp    eax,0x7fffffff
 101be7f:	je     0x101be95
 101be81:	call   QWORD PTR [rip+0xfffffffffffe5351]        # 0x10011d8
 101be87:	mov    rcx,rax
 101be8a:	lea    edx,[r12+0x1]
 101be8f:	call   QWORD PTR [rip+0xfffffffffffe5333]        # 0x10011c8
 101be95:	mov    r13d,r12d
 101be98:	mov    edi,DWORD PTR [rsi+0xa4]
 101be9e:	call   QWORD PTR [rip+0xfffffffffffe53d4]        # 0x1001278
 101bea4:	cmp    edi,eax
 101bea6:	jne    0x101beb4
 101bea8:	mov    rax,QWORD PTR [rsi+0x30]
 101beac:	cmp    DWORD PTR [rax],0xc00000fd
 101beb2:	je     0x101bed8
 101beb4:	mov    eax,DWORD PTR [rsi+0xa8]
 101beba:	bt     eax,0xc
 101bebe:	jb     0x101bed8
 101bec0:	bt     eax,0xf
 101bec4:	jb     0x101bed8
 101bec6:	mov    rdx,rsi
 101bec9:	mov    rcx,QWORD PTR [rsi+0x10]
 101becd:	call   0x101a500
 101bed2:	mov    ebx,eax
 101bed4:	mov    DWORD PTR [rsp+0x50],eax
 101bed8:	mov    rax,QWORD PTR [rsi]
 101bedb:	mov    r8d,0x1658
 101bee1:	mov    rdx,rsi
 101bee4:	mov    rcx,rsi
 101bee7:	call   QWORD PTR [rax+0x50]
 101beea:	test   ebx,ebx
 101beec:	cmovns ebx,eax
 101beef:	mov    DWORD PTR [rsp+0x50],ebx
 101bef3:	mov    rdx,QWORD PTR [rsi+0x50]
 101bef7:	test   rdx,rdx
 101befa:	je     0x101bf23
 101befc:	mov    r9,QWORD PTR [rsi]
 101beff:	xor    eax,eax
 101bf01:	or     rcx,0xffffffffffffffff
 101bf05:	mov    rdi,rdx
 101bf08:	repnz scas ax,WORD PTR es:[rdi]
 101bf0b:	not    rcx
 101bf0e:	lea    r8,[rcx+rcx*1-0x2]
 101bf13:	mov    rcx,rsi
 101bf16:	call   QWORD PTR [r9+0x50]
 101bf1a:	test   ebx,ebx
 101bf1c:	cmovns ebx,eax
 101bf1f:	mov    DWORD PTR [rsp+0x50],ebx
 101bf23:	mov    rdx,QWORD PTR [rsi+0x48]
 101bf27:	test   rdx,rdx
 101bf2a:	je     0x101bf53
 101bf2c:	mov    r9,QWORD PTR [rsi]
 101bf2f:	xor    eax,eax
 101bf31:	or     rcx,0xffffffffffffffff
 101bf35:	mov    rdi,rdx
 101bf38:	repnz scas ax,WORD PTR es:[rdi]
 101bf3b:	not    rcx
 101bf3e:	lea    r8,[rcx+rcx*1-0x2]
 101bf43:	mov    rcx,rsi
 101bf46:	call   QWORD PTR [r9+0x50]
 101bf4a:	test   ebx,ebx
 101bf4c:	cmovns ebx,eax
 101bf4f:	mov    DWORD PTR [rsp+0x50],ebx
 101bf53:	call   QWORD PTR [rip+0xfffffffffffe538f]        # 0x10012e8
 101bf59:	mov    DWORD PTR [rsi+0x78],eax
 101bf5c:	mov    rcx,rsi
 101bf5f:	call   0x101bd00
 101bf64:	test   ebx,ebx
 101bf66:	cmovns ebx,eax
 101bf69:	mov    DWORD PTR [rsp+0x50],ebx
 101bf6d:	lea    rdi,[rsi+0x18]
 101bf71:	call   0x100ad20
 101bf76:	mov    r9,rax
 101bf79:	mov    QWORD PTR [rsp+0x30],rdi
 101bf7e:	mov    eax,DWORD PTR [rsi+0x78]
 101bf81:	mov    DWORD PTR [rsp+0x28],eax
 101bf85:	lea    rax,[rip+0xfffffffffffea954]        # 0x10068e0
 101bf8c:	mov    QWORD PTR [rsp+0x20],rax
 101bf91:	lea    r8,[rip+0xfffffffffffeb1e0]        # 0x1007178
 101bf98:	mov    edx,0x104
 101bf9d:	lea    rcx,[rsi+0x13d0]
 101bfa4:	call   0x101a310
 101bfa9:	test   eax,eax
 101bfab:	js     0x101c15a
 101bfb1:	lea    rdi,[rsi+0x15d8]
 101bfb8:	mov    rcx,rdi
 101bfbb:	call   QWORD PTR [rip+0xfffffffffffe51ff]        # 0x10011c0
 101bfc1:	mov    QWORD PTR [rsi+0x15e0],r12
 101bfc8:	mov    QWORD PTR [rsi+0x15f0],r12
 101bfcf:	lea    r14,[rsi+0x1640]
 101bfd6:	mov    rcx,QWORD PTR [rsi+0x10]
 101bfda:	call   0x101a020
 101bfdf:	mov    rcx,rax
 101bfe2:	mov    QWORD PTR [rsp+0x48],r14
 101bfe7:	mov    QWORD PTR [rsp+0x40],rdi
 101bfec:	mov    QWORD PTR [rsp+0x38],r12
 101bff1:	mov    QWORD PTR [rsp+0x30],r12
 101bff6:	mov    DWORD PTR [rsp+0x28],0xc008010
 101bffe:	mov    DWORD PTR [rsp+0x20],r12d
 101c003:	xor    r9d,r9d
 101c006:	xor    r8d,r8d
 101c009:	lea    rdx,[rsi+0x13d0]
 101c010:	call   QWORD PTR [rip+0xfffffffffffe51a2]        # 0x10011b8
 101c016:	test   eax,eax
 101c018:	je     0x101c13d
 101c01e:	mov    edi,r12d
 101c021:	mov    DWORD PTR [rsp+0x54],r12d
 101c026:	call   QWORD PTR [rip+0xfffffffffffe52b4]        # 0x10012e0
 101c02c:	mov    DWORD PTR [rsp+0xb0],eax
 101c033:	nop
 101c034:	data16 data16 xchg ax,ax
 101c038:	data16 data16 xchg ax,ax
 101c03c:	data16 data16 xchg ax,ax
 101c040:	mov    edx,0x64
 101c045:	mov    rcx,QWORD PTR [r14]
 101c048:	call   QWORD PTR [rip+0xfffffffffffe51ca]        # 0x1001218
 101c04e:	mov    r14d,eax
 101c051:	cmp    eax,0x102
 101c056:	jne    0x101c07f
 101c058:	cmp    DWORD PTR [rsi+0x13b0],0xffffffff
 101c05f:	je     0x101c076
 101c061:	call   QWORD PTR [rip+0xfffffffffffe5279]        # 0x10012e0
 101c067:	sub    eax,DWORD PTR [rsp+0xb0]
 101c06e:	cmp    eax,DWORD PTR [rsi+0x13b0]
 101c074:	jae    0x101c07f
 101c076:	lea    r14,[rsi+0x1640]
 101c07d:	jmp    0x101c040
 101c07f:	mov    eax,r12d
 101c082:	cmp    r14d,0x102
 101c089:	sete   al
 101c08c:	mov    DWORD PTR [rsi+0x13bc],eax
 101c092:	mov    DWORD PTR [rsi+0x13c0],0x1
 101c09c:	lea    rdx,[rsi+0x13b4]
 101c0a3:	mov    rcx,QWORD PTR [rsi+0x1640]
 101c0aa:	call   QWORD PTR [rip+0xfffffffffffe5100]        # 0x10011b0
 101c0b0:	test   eax,eax
 101c0b2:	je     0x101c0d1
 101c0b4:	cmp    DWORD PTR [rsi+0x13b4],0x103
 101c0be:	je     0x101c0d1
 101c0c0:	mov    DWORD PTR [rsi+0x13b8],0x1
 101c0ca:	mov    DWORD PTR [rsi+0x13bc],r12d
 101c0d1:	jmp    0x101c10a
 101c0d3:	mov    edi,eax
 101c0d5:	cmp    eax,0xc00000fd
 101c0da:	jne    0x101c0e2
 101c0dc:	call   QWORD PTR [rip+0xfffffffffffe5366]        # 0x1001448
 101c0e2:	mov    eax,0x80004005
 101c0e7:	test   edi,edi
 101c0e9:	cmovns edi,eax
 101c0ec:	mov    DWORD PTR [rsp+0x54],edi
 101c0f0:	xor    r12d,r12d
 101c0f3:	mov    rsi,QWORD PTR [rsp+0xa0]
 101c0fb:	mov    ebx,DWORD PTR [rsp+0x50]
 101c0ff:	mov    r15d,DWORD PTR [rsp+0xa8]
 101c107:	mov    r13d,r12d
 101c10a:	test   ebx,ebx
 101c10c:	cmovns ebx,edi
 101c10f:	mov    DWORD PTR [rsp+0x50],ebx
 101c113:	mov    rcx,QWORD PTR [rsi+0x1648]
 101c11a:	call   QWORD PTR [rip+0xfffffffffffe5078]        # 0x1001198
 101c120:	mov    QWORD PTR [rsi+0x1648],r12
 101c127:	mov    rcx,QWORD PTR [rsi+0x1640]
 101c12e:	call   QWORD PTR [rip+0xfffffffffffe5064]        # 0x1001198
 101c134:	mov    QWORD PTR [rsi+0x1640],r12
 101c13b:	jmp    0x101c163
 101c13d:	call   QWORD PTR [rip+0xfffffffffffe512d]        # 0x1001270
 101c143:	test   eax,eax
 101c145:	jle    0x101c14f
 101c147:	movzx  eax,ax
 101c14a:	or     eax,0x80070000
 101c14f:	test   ebx,ebx
 101c151:	cmovns ebx,eax
 101c154:	mov    DWORD PTR [rsp+0x50],ebx
 101c158:	jmp    0x101c163
 101c15a:	test   ebx,ebx
 101c15c:	cmovns ebx,eax
 101c15f:	mov    DWORD PTR [rsp+0x50],ebx
 101c163:	jmp    0x101c18d
 101c165:	mov    r13d,eax
 101c168:	cmp    eax,0xc00000fd
 101c16d:	jne    0x101c175
 101c16f:	call   QWORD PTR [rip+0xfffffffffffe52d3]        # 0x1001448
 101c175:	mov    eax,0x80004005
 101c17a:	test   r13d,r13d
 101c17d:	cmovns r13d,eax
 101c181:	mov    ebx,DWORD PTR [rsp+0x50]
 101c185:	mov    r15d,DWORD PTR [rsp+0xa8]
 101c18d:	cmp    r15d,0x7fffffff
 101c194:	je     0x101c1a8
 101c196:	call   QWORD PTR [rip+0xfffffffffffe503c]        # 0x10011d8
 101c19c:	mov    rcx,rax
 101c19f:	mov    edx,r15d
 101c1a2:	call   QWORD PTR [rip+0xfffffffffffe5020]        # 0x10011c8
 101c1a8:	test   ebx,ebx
 101c1aa:	cmovns ebx,r13d
 101c1ae:	mov    eax,ebx
 101c1b0:	add    rsp,0x60
 101c1b4:	pop    r15
 101c1b6:	pop    r14
 101c1b8:	pop    r13
 101c1ba:	pop    r12
 101c1bc:	pop    rdi
 101c1bd:	pop    rsi
 101c1be:	pop    rbx
 101c1bf:	ret    
 101c1c0:	int3   
 101c1c1:	int3   
 101c1c2:	int3   
 101c1c3:	int3   
 101c1c4:	int3   
 101c1c5:	int3   
 101c1c6:	int3   
 101c1c7:	int3   
 101c1c8:	int3   
 101c1c9:	int3   
 101c1ca:	int3   
 101c1cb:	int3   
 101c1cc:	int3   
 101c1cd:	int3   
 101c1ce:	int3   
 101c1cf:	int3   
 101c1d0:	mov    QWORD PTR [rsp+0x8],rbx
 101c1d5:	mov    QWORD PTR [rsp+0x10],rsi
 101c1da:	mov    QWORD PTR [rsp+0x18],rdi
 101c1df:	push   r12
 101c1e1:	sub    rsp,0x30
 101c1e5:	mov    rsi,r8
 101c1e8:	mov    r12,rdx
 101c1eb:	mov    rdi,rcx
 101c1ee:	xor    ebx,ebx
 101c1f0:	mov    DWORD PTR [rsp+0x20],ebx
 101c1f4:	lea    r8,[rip+0xfffffffffffe59e5]        # 0x1001be0
 101c1fb:	mov    rdx,rsi
 101c1fe:	mov    rcx,r12
 101c201:	call   0x100a890
 101c206:	mov    DWORD PTR [rsp+0x20],eax
 101c20a:	test   eax,eax
 101c20c:	js     0x101c2a4
 101c212:	cmp    DWORD PTR [rdi+0x1650],0x0
 101c219:	jne    0x101c235
 101c21b:	lea    r8,[rip+0xfffffffffffeafde]        # 0x1007200
 101c222:	mov    rdx,rsi
 101c225:	mov    rcx,r12
 101c228:	call   0x100dc90
 101c22d:	mov    DWORD PTR [rsp+0x20],eax
 101c231:	test   eax,eax
 101c233:	js     0x101c2a4
 101c235:	cmp    DWORD PTR [rdi+0x13c0],0x0
 101c23c:	je     0x101c280
 101c23e:	cmp    DWORD PTR [rdi+0x13bc],0x0
 101c245:	je     0x101c26a
 101c247:	mov    r9d,DWORD PTR [rdi+0x1650]
 101c24e:	lea    r8,[rip+0xfffffffffffeaf4b]        # 0x10071a0
 101c255:	mov    rdx,rsi
 101c258:	mov    rcx,r12
 101c25b:	call   0x1019c40
 101c260:	mov    DWORD PTR [rsp+0x20],eax
 101c264:	test   eax,eax
 101c266:	jns    0x101c280
 101c268:	jmp    0x101c2a4
 101c26a:	mov    r8,rsi
 101c26d:	mov    rdx,r12
 101c270:	mov    rcx,rdi
 101c273:	call   0x101b650
 101c278:	mov    DWORD PTR [rsp+0x20],eax
 101c27c:	test   eax,eax
 101c27e:	js     0x101c2a4
 101c280:	jmp    0x101c29f
 101c282:	mov    ebx,eax
 101c284:	cmp    eax,0xc00000fd
 101c289:	jne    0x101c291
 101c28b:	call   QWORD PTR [rip+0xfffffffffffe51b7]        # 0x1001448
 101c291:	mov    eax,0x80004005
 101c296:	test   ebx,ebx
 101c298:	cmovns ebx,eax
 101c29b:	mov    eax,DWORD PTR [rsp+0x20]
 101c29f:	test   eax,eax
 101c2a1:	cmovns eax,ebx
 101c2a4:	mov    rbx,QWORD PTR [rsp+0x40]
 101c2a9:	mov    rsi,QWORD PTR [rsp+0x48]
 101c2ae:	mov    rdi,QWORD PTR [rsp+0x50]
 101c2b3:	add    rsp,0x30
 101c2b7:	pop    r12
 101c2b9:	ret    
 101c2ba:	int3   
 101c2bb:	int3   
 101c2bc:	int3   
 101c2bd:	int3   
 101c2be:	int3   
 101c2bf:	int3   
 101c2c0:	mov    QWORD PTR [rsp+0x8],rbx
 101c2c5:	mov    QWORD PTR [rsp+0x10],rsi
 101c2ca:	push   rdi
 101c2cb:	sub    rsp,0x20
 101c2cf:	cmp    QWORD PTR [rcx+0x1340],0x0
 101c2d7:	lea    rax,[rip+0xfffffffffffeada2]        # 0x1007080
 101c2de:	mov    edi,r8d
 101c2e1:	mov    rsi,rdx
 101c2e4:	mov    rbx,rcx
 101c2e7:	mov    QWORD PTR [rcx],rax
 101c2ea:	je     0x101c309
 101c2ec:	mov    rcx,QWORD PTR [rcx+0x10]
 101c2f0:	call   0x1019ea0
 101c2f5:	mov    rdx,QWORD PTR [rbx+0x1340]
 101c2fc:	test   rdx,rdx
 101c2ff:	je     0x101c309
 101c301:	mov    rcx,rax
 101c304:	call   0x1019680
 101c309:	mov    rcx,QWORD PTR [rbx+0x10]
 101c30d:	test   rcx,rcx
 101c310:	je     0x101c320
 101c312:	mov    rax,QWORD PTR [rcx]
 101c315:	call   QWORD PTR [rax+0x10]
 101c318:	mov    QWORD PTR [rbx+0x10],0x0
 101c320:	lea    rcx,[rbx+0x1388]
 101c327:	call   0x101b2d0
 101c32c:	lea    rcx,[rbx+0x1360]
 101c333:	call   0x101b2d0
 101c338:	xor    edx,edx
 101c33a:	mov    r8d,0x1658
 101c340:	mov    rcx,rbx
 101c343:	call   0x100c10e
 101c348:	mov    r8d,edi
 101c34b:	mov    rdx,rsi
 101c34e:	mov    rcx,rbx
 101c351:	mov    rbx,QWORD PTR [rsp+0x30]
 101c356:	mov    rsi,QWORD PTR [rsp+0x38]
 101c35b:	add    rsp,0x20
 101c35f:	pop    rdi
 101c360:	jmp    0x101b940
 101c365:	int3   
 101c366:	int3   
 101c367:	int3   
 101c368:	int3   
 101c369:	int3   
 101c36a:	int3   
 101c36b:	int3   
 101c36c:	int3   
 101c36d:	int3   
 101c36e:	int3   
 101c36f:	int3   
 101c370:	mov    QWORD PTR [rsp+0x8],rbx
 101c375:	mov    QWORD PTR [rsp+0x10],rbp
 101c37a:	mov    QWORD PTR [rsp+0x18],rsi
 101c37f:	push   rdi
 101c380:	sub    rsp,0xc0
 101c387:	mov    rdi,rdx
 101c38a:	mov    rdx,QWORD PTR [rdx]
 101c38d:	mov    rsi,rcx
 101c390:	mov    rbp,r8
 101c393:	lea    rcx,[rsp+0x20]
 101c398:	mov    r8d,0x98
 101c39e:	call   0x101750c
 101c3a3:	mov    r11,QWORD PTR [rsi+0x13c8]
 101c3aa:	mov    rbx,QWORD PTR [rsi]
 101c3ad:	mov    QWORD PTR [rsp+0x30],r11
 101c3b2:	call   QWORD PTR [rip+0xfffffffffffe4ec0]        # 0x1001278
 101c3b8:	mov    r9,QWORD PTR [rdi+0x8]
 101c3bc:	lea    r8,[rsp+0x20]
 101c3c1:	mov    edx,eax
 101c3c3:	mov    rcx,rsi
 101c3c6:	call   QWORD PTR [rbx+0x40]
 101c3c9:	mov    rcx,rsi
 101c3cc:	mov    DWORD PTR [rbp+0x0],eax
 101c3cf:	call   0x101be40
 101c3d4:	lea    r11,[rsp+0xc0]
 101c3dc:	mov    rbx,QWORD PTR [r11+0x10]
 101c3e0:	mov    rsi,QWORD PTR [r11+0x20]
 101c3e4:	mov    DWORD PTR [rbp+0x0],eax
 101c3e7:	mov    rbp,QWORD PTR [r11+0x18]
 101c3eb:	mov    eax,0x1
 101c3f0:	mov    rsp,r11
 101c3f3:	pop    rdi
 101c3f4:	ret    
 101c3f5:	int3   
 101c3f6:	int3   
 101c3f7:	int3   
 101c3f8:	int3   
 101c3f9:	int3   
 101c3fa:	int3   
 101c3fb:	int3   
 101c3fc:	int3   
 101c3fd:	int3   
 101c3fe:	int3   
 101c3ff:	int3   
 101c400:	mov    QWORD PTR [rsp+0x8],rcx
 101c405:	push   rbx
 101c406:	sub    rsp,0x30
 101c40a:	mov    ebx,0x80004005
 101c40f:	mov    DWORD PTR [rsp+0x20],ebx
 101c413:	mov    rax,QWORD PTR [rsp+0x38]
 101c418:	cmp    QWORD PTR [rcx+0x30],0x0
 101c41d:	je     0x101c428
 101c41f:	call   0x101be40
 101c424:	mov    ebx,eax
 101c426:	jmp    0x101c452
 101c428:	cmp    QWORD PTR [rcx+0x13c8],0x0
 101c430:	jne    0x101c439
 101c432:	mov    QWORD PTR [rcx+0x13c8],rax
 101c439:	xor    r9d,r9d
 101c43c:	xor    r8d,r8d
 101c43f:	xor    edx,edx
 101c441:	mov    ecx,0x42ac
 101c446:	call   QWORD PTR [rip+0xfffffffffffe4e34]        # 0x1001280
 101c44c:	jmp    0x101c452
 101c44e:	mov    ebx,DWORD PTR [rsp+0x20]
 101c452:	mov    eax,ebx
 101c454:	add    rsp,0x30
 101c458:	pop    rbx
 101c459:	ret    
 101c45a:	int3   
 101c45b:	int3   
 101c45c:	int3   
 101c45d:	int3   
 101c45e:	int3   
 101c45f:	int3   
 101c460:	rex push rbp
 101c462:	sub    rsp,0x20
 101c466:	mov    rbp,rdx
 101c469:	mov    rdx,rcx
 101c46c:	lea    r8,[rbp+0x20]
 101c470:	mov    rcx,QWORD PTR [rbp+0x40]
 101c474:	call   0x101c370
 101c479:	add    rsp,0x20
 101c47d:	pop    rbp
 101c47e:	ret    
 101c47f:	int3   
 101c480:	int3   
 101c481:	int3   
 101c482:	int3   
 101c483:	int3   
 101c484:	int3   
 101c485:	int3   
 101c486:	int3   
 101c487:	int3   
 101c488:	int3   
 101c489:	int3   
 101c48a:	int3   
 101c48b:	int3   
 101c48c:	int3   
 101c48d:	int3   
 101c48e:	int3   
 101c48f:	int3   
 101c490:	rex push rbp
 101c492:	sub    rsp,0x50
 101c496:	mov    rbp,rdx
 101c499:	xor    r8d,r8d
 101c49c:	xor    edx,edx
 101c49e:	call   0x100ce20
 101c4a3:	nop
 101c4a4:	add    rsp,0x50
 101c4a8:	pop    rbp
 101c4a9:	ret    
 101c4aa:	int3   
 101c4ab:	int3   
 101c4ac:	int3   
 101c4ad:	int3   
 101c4ae:	int3   
 101c4af:	int3   
 101c4b0:	int3   
 101c4b1:	int3   
 101c4b2:	int3   
 101c4b3:	int3   
 101c4b4:	int3   
 101c4b5:	int3   
 101c4b6:	int3   
 101c4b7:	int3   
 101c4b8:	int3   
 101c4b9:	int3   
 101c4ba:	int3   
 101c4bb:	int3   
 101c4bc:	int3   
 101c4bd:	int3   
 101c4be:	int3   
 101c4bf:	int3   
 101c4c0:	rex push rbp
 101c4c2:	sub    rsp,0x20
 101c4c6:	lea    rbp,[rdx+0x20]
 101c4ca:	mov    rax,QWORD PTR [rcx]
 101c4cd:	xor    ecx,ecx
 101c4cf:	cmp    DWORD PTR [rax],0xc00000fd
 101c4d5:	sete   cl
 101c4d8:	mov    eax,ecx
 101c4da:	mov    eax,ecx
 101c4dc:	add    rsp,0x20
 101c4e0:	pop    rbp
 101c4e1:	ret    
 101c4e2:	int3   
 101c4e3:	int3   
 101c4e4:	int3   
 101c4e5:	int3   
 101c4e6:	int3   
 101c4e7:	int3   
 101c4e8:	int3   
 101c4e9:	int3   
 101c4ea:	int3   
 101c4eb:	int3   
 101c4ec:	int3   
 101c4ed:	int3   
 101c4ee:	int3   
 101c4ef:	int3   
 101c4f0:	rex push rbp
 101c4f2:	sub    rsp,0x20
 101c4f6:	mov    rbp,rdx
 101c4f9:	mov    rcx,QWORD PTR [rip+0x7db0]        # 0x10242b0
 101c500:	test   rcx,rcx
 101c503:	je     0x101c50c
 101c505:	call   QWORD PTR [rip+0xfffffffffffe4d4d]        # 0x1001258
 101c50b:	nop
 101c50c:	add    rsp,0x20
 101c510:	pop    rbp
 101c511:	ret    
 101c512:	int3   
 101c513:	int3   
 101c514:	int3   
 101c515:	int3   
 101c516:	int3   
 101c517:	int3   
 101c518:	int3   
 101c519:	int3   
 101c51a:	int3   
 101c51b:	int3   
 101c51c:	int3   
 101c51d:	int3   
 101c51e:	int3   
 101c51f:	int3   
 101c520:	rex push rbp
 101c522:	sub    rsp,0x20
 101c526:	mov    rbp,rdx
 101c529:	mov    rcx,QWORD PTR [rip+0x7d80]        # 0x10242b0
 101c530:	test   rcx,rcx
 101c533:	je     0x101c53c
 101c535:	call   QWORD PTR [rip+0xfffffffffffe4d1d]        # 0x1001258
 101c53b:	nop
 101c53c:	add    rsp,0x20
 101c540:	pop    rbp
 101c541:	ret    
 101c542:	int3   
 101c543:	int3   
 101c544:	int3   
 101c545:	int3   
 101c546:	int3   
 101c547:	int3   
 101c548:	int3   
 101c549:	int3   
 101c54a:	int3   
 101c54b:	int3   
 101c54c:	int3   
 101c54d:	int3   
 101c54e:	int3   
 101c54f:	int3   
 101c550:	rex push rbp
 101c552:	sub    rsp,0x30
 101c556:	mov    rbp,rdx
 101c559:	xor    r8d,r8d
 101c55c:	xor    edx,edx
 101c55e:	call   0x100ce20
 101c563:	nop
 101c564:	add    rsp,0x30
 101c568:	pop    rbp
 101c569:	ret    
 101c56a:	int3   
 101c56b:	int3   
 101c56c:	int3   
 101c56d:	int3   
 101c56e:	int3   
 101c56f:	int3   
 101c570:	int3   
 101c571:	rex push rbp
 101c573:	sub    rsp,0x20
 101c577:	mov    rbp,rdx
 101c57a:	mov    rax,QWORD PTR [rcx]
 101c57d:	mov    rdx,rcx
 101c580:	mov    ecx,DWORD PTR [rax]
 101c582:	call   0x100c20e
 101c587:	nop
 101c588:	add    rsp,0x20
 101c58c:	pop    rbp
 101c58d:	ret    
 101c58e:	int3   
 101c58f:	int3   
 101c590:	int3   
 101c591:	int3   
 101c592:	int3   
 101c593:	int3   
 101c594:	int3   
 101c595:	rex push rbp
 101c597:	sub    rsp,0x20
 101c59b:	mov    rbp,rdx
 101c59e:	mov    ecx,0x8
 101c5a3:	call   0x100c3e2
 101c5a8:	nop
 101c5a9:	add    rsp,0x20
 101c5ad:	pop    rbp
 101c5ae:	ret    
 101c5af:	int3   
 101c5b0:	int3   
 101c5b1:	int3   
 101c5b2:	int3   
 101c5b3:	int3   
 101c5b4:	int3   
 101c5b5:	int3   
 101c5b6:	int3   
 101c5b7:	int3   
 101c5b8:	int3   
 101c5b9:	int3   
 101c5ba:	int3   
 101c5bb:	int3   
 101c5bc:	int3   
 101c5bd:	int3   
 101c5be:	int3   
 101c5bf:	int3   
 101c5c0:	rex push rbp
 101c5c2:	sub    rsp,0x20
 101c5c6:	mov    rbp,rdx
 101c5c9:	mov    rax,QWORD PTR [rcx]
 101c5cc:	xor    ecx,ecx
 101c5ce:	cmp    DWORD PTR [rax],0xc0000005
 101c5d4:	sete   cl
 101c5d7:	mov    eax,ecx
 101c5d9:	mov    eax,ecx
 101c5db:	add    rsp,0x20
 101c5df:	pop    rbp
 101c5e0:	ret    
 101c5e1:	int3   
 101c5e2:	int3   
 101c5e3:	int3   
 101c5e4:	int3   
 101c5e5:	int3   
 101c5e6:	int3   
 101c5e7:	int3   
 101c5e8:	int3   
 101c5e9:	int3   
 101c5ea:	int3   
 101c5eb:	int3   
 101c5ec:	int3   
 101c5ed:	int3   
 101c5ee:	int3   
 101c5ef:	int3   
 101c5f0:	rex push rbp
 101c5f2:	sub    rsp,0x40
 101c5f6:	mov    rbp,rdx
 101c5f9:	mov    rcx,QWORD PTR [rbp+0x50]
 101c5fd:	call   QWORD PTR [rip+0xfffffffffffe4c55]        # 0x1001258
 101c603:	nop
 101c604:	add    rsp,0x40
 101c608:	pop    rbp
 101c609:	ret    
 101c60a:	int3   
 101c60b:	int3   
 101c60c:	int3   
 101c60d:	int3   
 101c60e:	int3   
 101c60f:	int3   
 101c610:	int3   
 101c611:	int3   
 101c612:	int3   
 101c613:	int3   
 101c614:	int3   
 101c615:	int3   
 101c616:	int3   
 101c617:	int3   
 101c618:	int3   
 101c619:	int3   
 101c61a:	int3   
 101c61b:	int3   
 101c61c:	int3   
 101c61d:	int3   
 101c61e:	int3   
 101c61f:	int3   
 101c620:	rex push rbp
 101c622:	sub    rsp,0x20
 101c626:	mov    rbp,rdx
 101c629:	mov    rcx,QWORD PTR [rbp+0x40]
 101c62d:	call   QWORD PTR [rip+0xfffffffffffe4c25]        # 0x1001258
 101c633:	nop
 101c634:	add    rsp,0x20
 101c638:	pop    rbp
 101c639:	ret    
 101c63a:	int3   
 101c63b:	int3   
 101c63c:	int3   
 101c63d:	int3   
 101c63e:	int3   
 101c63f:	int3   
 101c640:	int3   
 101c641:	int3   
 101c642:	int3   
 101c643:	int3   
 101c644:	int3   
 101c645:	int3   
 101c646:	int3   
 101c647:	int3   
 101c648:	int3   
 101c649:	int3   
 101c64a:	int3   
 101c64b:	int3   
 101c64c:	int3   
 101c64d:	int3   
 101c64e:	int3   
 101c64f:	int3   
 101c650:	lea    rcx,[rdx+0x50]
 101c657:	jmp    0x100e6e0
 101c65c:	int3   
 101c65d:	int3   
 101c65e:	int3   
 101c65f:	int3   
 101c660:	lea    rcx,[rdx+0x30]
 101c667:	jmp    0x100e730
 101c66c:	int3   
 101c66d:	int3   
 101c66e:	int3   
 101c66f:	int3   
 101c670:	lea    rcx,[rdx+0x48]
 101c677:	jmp    0x10166b0
 101c67c:	int3   
 101c67d:	int3   
 101c67e:	int3   
 101c67f:	int3   
 101c680:	int3   
 101c681:	int3   
 101c682:	int3   
 101c683:	int3   
 101c684:	int3   
 101c685:	int3   
 101c686:	int3   
 101c687:	int3   
 101c688:	int3   
 101c689:	int3   
 101c68a:	int3   
 101c68b:	int3   
 101c68c:	int3   
 101c68d:	int3   
 101c68e:	int3   
 101c68f:	int3   
 101c690:	mov    rcx,QWORD PTR [rdx+0x28]
 101c697:	jmp    0x100bccc
 101c69c:	int3   
 101c69d:	int3   
 101c69e:	int3   
 101c69f:	int3   
 101c6a0:	lea    rcx,[rdx+0x28]
 101c6a7:	jmp    0x100dd70
 101c6ac:	int3   
 101c6ad:	int3   
 101c6ae:	int3   
 101c6af:	int3   
 101c6b0:	int3   
 101c6b1:	int3   
 101c6b2:	int3   
 101c6b3:	int3   
 101c6b4:	int3   
 101c6b5:	int3   
 101c6b6:	int3   
 101c6b7:	int3   
 101c6b8:	int3   
 101c6b9:	int3   
 101c6ba:	int3   
 101c6bb:	int3   
 101c6bc:	int3   
 101c6bd:	int3   
 101c6be:	int3   
 101c6bf:	int3   
 101c6c0:	lea    rcx,[rdx+0x28]
 101c6c7:	jmp    0x1016940
 101c6cc:	int3   
 101c6cd:	int3   
 101c6ce:	int3   
 101c6cf:	int3   
 101c6d0:	int3   
 101c6d1:	int3   
 101c6d2:	int3   
 101c6d3:	int3   
 101c6d4:	int3   
 101c6d5:	int3   
 101c6d6:	int3   
 101c6d7:	int3   
 101c6d8:	int3   
 101c6d9:	int3   
 101c6da:	int3   
 101c6db:	int3   
 101c6dc:	int3   
 101c6dd:	int3   
 101c6de:	int3   
 101c6df:	int3   
 101c6e0:	lea    rcx,[rdx+0x28]
 101c6e7:	jmp    0x1016940
 101c6ec:	int3   
 101c6ed:	int3   
 101c6ee:	int3   
 101c6ef:	int3   
 101c6f0:	int3   
 101c6f1:	int3   
 101c6f2:	int3   
 101c6f3:	int3   
 101c6f4:	int3   
 101c6f5:	int3   
 101c6f6:	int3   
 101c6f7:	int3   
 101c6f8:	int3   
 101c6f9:	int3   
 101c6fa:	int3   
 101c6fb:	int3   
 101c6fc:	int3   
 101c6fd:	int3   
 101c6fe:	int3   
 101c6ff:	int3   
 101c700:	lea    rcx,[rdx+0x28]
 101c707:	jmp    0x1016940
 101c70c:	int3   
 101c70d:	int3   
 101c70e:	int3   
 101c70f:	int3   
 101c710:	int3   
 101c711:	int3   
 101c712:	int3   
 101c713:	int3   
 101c714:	int3   
 101c715:	int3   
 101c716:	int3   
 101c717:	int3   
 101c718:	int3   
 101c719:	int3   
 101c71a:	int3   
 101c71b:	int3   
 101c71c:	int3   
 101c71d:	int3   
 101c71e:	int3   
 101c71f:	int3   
 101c720:	lea    rcx,[rdx+0x28]
 101c727:	jmp    0x1016940
 101c72c:	int3   
 101c72d:	int3   
 101c72e:	int3   
 101c72f:	int3   
 101c730:	int3   
 101c731:	int3   
 101c732:	int3   
 101c733:	int3   
 101c734:	int3   
 101c735:	int3   
 101c736:	int3   
 101c737:	int3   
 101c738:	int3   
 101c739:	int3   
 101c73a:	int3   
 101c73b:	int3   
 101c73c:	int3   
 101c73d:	int3   
 101c73e:	int3   
 101c73f:	int3   
 101c740:	lea    rcx,[rdx+0x28]
 101c747:	jmp    0x1016940
 101c74c:	int3   
 101c74d:	int3   
 101c74e:	int3   
 101c74f:	int3   
 101c750:	int3   
 101c751:	int3   
 101c752:	int3   
 101c753:	int3   
 101c754:	int3   
 101c755:	int3   
 101c756:	int3   
 101c757:	int3   
 101c758:	int3   
 101c759:	int3   
 101c75a:	int3   
 101c75b:	int3   
 101c75c:	int3   
 101c75d:	int3   
 101c75e:	int3   
 101c75f:	int3   
 101c760:	lea    rcx,[rdx+0x28]
 101c767:	jmp    0x1016940
 101c76c:	int3   
 101c76d:	int3   
 101c76e:	int3   
 101c76f:	int3   
 101c770:	int3   
 101c771:	int3   
 101c772:	int3   
 101c773:	int3   
 101c774:	int3   
 101c775:	int3   
 101c776:	int3   
 101c777:	int3   
 101c778:	int3   
 101c779:	int3   
 101c77a:	int3   
 101c77b:	int3   
 101c77c:	int3   
 101c77d:	int3   
 101c77e:	int3   
 101c77f:	int3   
 101c780:	lea    rcx,[rdx+0x28]
 101c787:	jmp    0x1016940
 101c78c:	int3   
 101c78d:	int3   
 101c78e:	int3   
 101c78f:	int3   
 101c790:	int3   
 101c791:	int3   
 101c792:	int3   
 101c793:	int3   
 101c794:	int3   
 101c795:	int3   
 101c796:	int3   
 101c797:	int3   
 101c798:	int3   
 101c799:	int3   
 101c79a:	int3   
 101c79b:	int3   
 101c79c:	int3   
 101c79d:	int3   
 101c79e:	int3   
 101c79f:	int3   
 101c7a0:	lea    rcx,[rdx+0x28]
 101c7a7:	jmp    0x1016940
 101c7ac:	int3   
 101c7ad:	int3   
 101c7ae:	int3   
 101c7af:	int3   
 101c7b0:	int3   
 101c7b1:	int3   
 101c7b2:	int3   
 101c7b3:	int3   
 101c7b4:	int3   
 101c7b5:	int3   
 101c7b6:	int3   
 101c7b7:	int3   
 101c7b8:	int3   
 101c7b9:	int3   
 101c7ba:	int3   
 101c7bb:	int3   
 101c7bc:	int3   
 101c7bd:	int3   
 101c7be:	int3   
 101c7bf:	int3   
 101c7c0:	lea    rcx,[rdx+0x68]
 101c7c7:	jmp    0x100fcd0
 101c7cc:	int3   
 101c7cd:	int3   
 101c7ce:	int3   
 101c7cf:	int3   
 101c7d0:	lea    rcx,[rdx+0x70]
 101c7d7:	jmp    0x100fcd0
 101c7dc:	int3   
 101c7dd:	int3   
 101c7de:	int3   
 101c7df:	int3   
 101c7e0:	lea    rcx,[rdx+0x60]
 101c7e7:	jmp    0x100fcd0
 101c7ec:	int3   
 101c7ed:	int3   
 101c7ee:	int3   
 101c7ef:	int3   
 101c7f0:	int3   
 101c7f1:	int3   
 101c7f2:	int3   
 101c7f3:	int3   
 101c7f4:	int3   
 101c7f5:	int3   
 101c7f6:	int3   
 101c7f7:	int3   
 101c7f8:	int3   
 101c7f9:	int3   
 101c7fa:	int3   
 101c7fb:	int3   
 101c7fc:	int3   
 101c7fd:	int3   
 101c7fe:	int3   
 101c7ff:	int3   
 101c800:	lea    rcx,[rdx+0x30]
 101c807:	jmp    0x100fd80
 101c80c:	int3   
 101c80d:	int3   
 101c80e:	int3   
 101c80f:	int3   
 101c810:	lea    rcx,[rdx+0x20]
 101c817:	jmp    0x1011e10
 101c81c:	int3   
 101c81d:	int3   
 101c81e:	int3   
 101c81f:	int3   
 101c820:	lea    rcx,[rdx+0x38]
 101c827:	jmp    0x100fda0
 101c82c:	int3   
 101c82d:	int3   
 101c82e:	int3   
 101c82f:	int3   
 101c830:	lea    rcx,[rdx+0x50]
 101c837:	jmp    0x100fda0
 101c83c:	int3   
 101c83d:	int3   
 101c83e:	int3   
 101c83f:	int3   
 101c840:	int3   
 101c841:	int3   
 101c842:	int3   
 101c843:	int3   
 101c844:	int3   
 101c845:	int3   
 101c846:	int3   
 101c847:	int3   
 101c848:	int3   
 101c849:	int3   
 101c84a:	int3   
 101c84b:	int3   
 101c84c:	int3   
 101c84d:	int3   
 101c84e:	int3   
 101c84f:	int3   
 101c850:	lea    rcx,[rdx+0x28]
 101c857:	jmp    0x100fd80
 101c85c:	int3   
 101c85d:	int3   
 101c85e:	int3   
 101c85f:	int3   
 101c860:	lea    rcx,[rdx+0x88]
 101c867:	jmp    0x1011e10
 101c86c:	int3   
 101c86d:	int3   
 101c86e:	int3   
 101c86f:	int3   
 101c870:	lea    rcx,[rdx+0x30]
 101c877:	jmp    0x100fda0
 101c87c:	int3   
 101c87d:	int3   
 101c87e:	int3   
 101c87f:	int3   
 101c880:	lea    rcx,[rdx+0x48]
 101c887:	jmp    0x100fda0
 101c88c:	int3   
 101c88d:	int3   
 101c88e:	int3   
 101c88f:	int3   
 101c890:	int3   
 101c891:	int3   
 101c892:	int3   
 101c893:	int3   
 101c894:	int3   
 101c895:	int3   
 101c896:	int3   
 101c897:	int3   
 101c898:	int3   
 101c899:	int3   
 101c89a:	int3   
 101c89b:	int3   
 101c89c:	int3   
 101c89d:	int3   
 101c89e:	int3   
 101c89f:	int3   
 101c8a0:	lea    rcx,[rdx+0x28]
 101c8a7:	jmp    0x100fd80
 101c8ac:	int3   
 101c8ad:	int3   
 101c8ae:	int3   
 101c8af:	int3   
 101c8b0:	lea    rcx,[rdx+0x58]
 101c8b7:	jmp    0x1011e10
 101c8bc:	int3   
 101c8bd:	int3   
 101c8be:	int3   
 101c8bf:	int3   
 101c8c0:	int3   
 101c8c1:	int3   
 101c8c2:	int3   
 101c8c3:	int3   
 101c8c4:	int3   
 101c8c5:	int3   
 101c8c6:	int3   
 101c8c7:	int3   
 101c8c8:	int3   
 101c8c9:	int3   
 101c8ca:	int3   
 101c8cb:	int3   
 101c8cc:	int3   
 101c8cd:	int3   
 101c8ce:	int3   
 101c8cf:	int3   
 101c8d0:	lea    rcx,[rdx+0x28]
 101c8d7:	jmp    0x100fd80
 101c8dc:	int3   
 101c8dd:	int3   
 101c8de:	int3   
 101c8df:	int3   
 101c8e0:	lea    rcx,[rdx+0x88]
 101c8e7:	jmp    0x1011e10
 101c8ec:	int3   
 101c8ed:	int3   
 101c8ee:	int3   
 101c8ef:	int3   
 101c8f0:	lea    rcx,[rdx+0x30]
 101c8f7:	jmp    0x100fda0
 101c8fc:	int3   
 101c8fd:	int3   
 101c8fe:	int3   
 101c8ff:	int3   
 101c900:	lea    rcx,[rdx+0x48]
 101c907:	jmp    0x100fda0
 101c90c:	int3   
 101c90d:	int3   
 101c90e:	int3   
 101c90f:	int3   
 101c910:	int3   
 101c911:	int3   
 101c912:	int3   
 101c913:	int3   
 101c914:	int3   
 101c915:	int3   
 101c916:	int3   
 101c917:	int3   
 101c918:	int3   
 101c919:	int3   
 101c91a:	int3   
 101c91b:	int3   
 101c91c:	int3   
 101c91d:	int3   
 101c91e:	int3   
 101c91f:	int3   
 101c920:	lea    rcx,[rdx+0x20]
 101c927:	jmp    0x1014bc0
 101c92c:	int3   
 101c92d:	int3   
 101c92e:	int3   
 101c92f:	int3   
 101c930:	lea    rcx,[rdx+0x38]
 101c937:	jmp    0x100fda0
 101c93c:	int3   
 101c93d:	int3   
 101c93e:	int3   
 101c93f:	int3   
 101c940:	int3   
 101c941:	int3   
 101c942:	int3   
 101c943:	int3   
 101c944:	int3   
 101c945:	int3   
 101c946:	int3   
 101c947:	int3   
 101c948:	int3   
 101c949:	int3   
 101c94a:	int3   
 101c94b:	int3   
 101c94c:	int3   
 101c94d:	int3   
 101c94e:	int3   
 101c94f:	int3   
 101c950:	lea    rcx,[rdx+0x20]
 101c957:	jmp    0x1014bc0
 101c95c:	int3   
 101c95d:	int3   
 101c95e:	int3   
 101c95f:	int3   
 101c960:	lea    rcx,[rdx+0x38]
 101c967:	jmp    0x100fda0
 101c96c:	int3   
 101c96d:	int3   
 101c96e:	int3   
 101c96f:	int3   
 101c970:	int3   
 101c971:	int3   
 101c972:	int3   
 101c973:	int3   
 101c974:	int3   
 101c975:	int3   
 101c976:	int3   
 101c977:	int3   
 101c978:	int3   
 101c979:	int3   
 101c97a:	int3   
 101c97b:	int3   
 101c97c:	int3   
 101c97d:	int3   
 101c97e:	int3   
 101c97f:	int3   
 101c980:	lea    rcx,[rdx+0x78]
 101c987:	jmp    0x1013a60
 101c98c:	int3   
 101c98d:	int3   
 101c98e:	int3   
 101c98f:	int3   
 101c990:	mov    rcx,QWORD PTR [rdx+0x28]
 101c997:	jmp    0x100fdb0
 101c99c:	int3   
 101c99d:	int3   
 101c99e:	int3   
 101c99f:	int3   
 101c9a0:	mov    rcx,QWORD PTR [rdx+0x70]
 101c9a7:	add    rcx,0x8
 101c9ab:	jmp    0x100fdc0
 101c9b0:	int3   
 101c9b1:	int3   
 101c9b2:	int3   
 101c9b3:	int3   
 101c9b4:	int3   
 101c9b5:	int3   
 101c9b6:	int3   
 101c9b7:	int3   
 101c9b8:	int3   
 101c9b9:	int3   
 101c9ba:	int3   
 101c9bb:	int3   
 101c9bc:	int3   
 101c9bd:	int3   
 101c9be:	int3   
 101c9bf:	int3   
 101c9c0:	lea    rcx,[rdx+0x78]
 101c9c7:	jmp    0x1013a60
 101c9cc:	int3   
 101c9cd:	int3   
 101c9ce:	int3   
 101c9cf:	int3   
 101c9d0:	mov    rcx,QWORD PTR [rdx+0x28]
 101c9d7:	jmp    0x100fdb0
 101c9dc:	int3   
 101c9dd:	int3   
 101c9de:	int3   
 101c9df:	int3   
 101c9e0:	mov    rcx,QWORD PTR [rdx+0x70]
 101c9e7:	add    rcx,0x8
 101c9eb:	jmp    0x100fdc0
 101c9f0:	int3   
 101c9f1:	int3   
 101c9f2:	int3   
 101c9f3:	int3   
 101c9f4:	int3   
 101c9f5:	int3   
 101c9f6:	int3   
 101c9f7:	int3   
 101c9f8:	int3   
 101c9f9:	int3   
 101c9fa:	int3   
 101c9fb:	int3   
 101c9fc:	int3   
 101c9fd:	int3   
 101c9fe:	int3   
 101c9ff:	int3   
 101ca00:	mov    rcx,QWORD PTR [rdx+0x40]
 101ca07:	jmp    0x1013810
 101ca0c:	int3   
 101ca0d:	int3   
 101ca0e:	int3   
 101ca0f:	int3   
 101ca10:	int3   
 101ca11:	int3   
 101ca12:	int3   
 101ca13:	int3   
 101ca14:	int3   
 101ca15:	int3   
 101ca16:	int3   
 101ca17:	int3   
 101ca18:	int3   
 101ca19:	int3   
 101ca1a:	int3   
 101ca1b:	int3   
 101ca1c:	int3   
 101ca1d:	int3   
 101ca1e:	int3   
 101ca1f:	int3   
 101ca20:	mov    rcx,QWORD PTR [rdx+0x48]
 101ca27:	jmp    0x1013810
 101ca2c:	int3   
 101ca2d:	int3   
 101ca2e:	int3   
 101ca2f:	int3   
 101ca30:	mov    rcx,QWORD PTR [rdx+0x40]
 101ca37:	add    rcx,0x228
 101ca3e:	jmp    0x1013870
 101ca43:	int3   
 101ca44:	int3   
 101ca45:	int3   
 101ca46:	int3   
 101ca47:	int3   
 101ca48:	int3   
 101ca49:	int3   
 101ca4a:	int3   
 101ca4b:	int3   
 101ca4c:	int3   
 101ca4d:	int3   
 101ca4e:	int3   
 101ca4f:	int3   
 101ca50:	mov    rcx,QWORD PTR [rdx+0x40]
 101ca57:	jmp    0x100fec0
 101ca5c:	int3   
 101ca5d:	int3   
 101ca5e:	int3   
 101ca5f:	int3   
 101ca60:	mov    rcx,QWORD PTR [rdx+0x40]
 101ca67:	add    rcx,0x288
 101ca6e:	jmp    0x1011e10
 101ca73:	int3   
 101ca74:	int3   
 101ca75:	int3   
 101ca76:	int3   
 101ca77:	int3   
 101ca78:	int3   
 101ca79:	int3   
 101ca7a:	int3   
 101ca7b:	int3   
 101ca7c:	int3   
 101ca7d:	int3   
 101ca7e:	int3   
 101ca7f:	int3   
 101ca80:	mov    rcx,QWORD PTR [rdx+0x40]
 101ca87:	jmp    0x1015000
 101ca8c:	int3   
 101ca8d:	int3   
 101ca8e:	int3   
 101ca8f:	int3   
 101ca90:	int3   
 101ca91:	int3   
 101ca92:	int3   
 101ca93:	int3   
 101ca94:	int3   
 101ca95:	int3   
 101ca96:	int3   
 101ca97:	int3   
 101ca98:	int3   
 101ca99:	int3   
 101ca9a:	int3   
 101ca9b:	int3   
 101ca9c:	int3   
 101ca9d:	int3   
 101ca9e:	int3   
 101ca9f:	int3   
 101caa0:	mov    rcx,QWORD PTR [rdx+0x40]
 101caa7:	jmp    0x1014c00
 101caac:	int3   
 101caad:	int3   
 101caae:	int3   
 101caaf:	int3   
 101cab0:	int3   
 101cab1:	int3   
 101cab2:	int3   
 101cab3:	int3   
 101cab4:	int3   
 101cab5:	int3   
 101cab6:	int3   
 101cab7:	int3   
 101cab8:	int3   
 101cab9:	int3   
 101caba:	int3   
 101cabb:	int3   
 101cabc:	int3   
 101cabd:	int3   
 101cabe:	int3   
 101cabf:	int3   
 101cac0:	mov    rcx,QWORD PTR [rdx+0x40]
 101cac7:	jmp    0x1014cc0
 101cacc:	int3   
 101cacd:	int3   
 101cace:	int3   
 101cacf:	int3   
 101cad0:	int3   
 101cad1:	int3   
 101cad2:	int3   
 101cad3:	int3   
 101cad4:	int3   
 101cad5:	int3   
 101cad6:	int3   
 101cad7:	int3   
 101cad8:	int3   
 101cad9:	int3   
 101cada:	int3   
 101cadb:	int3   
 101cadc:	int3   
 101cadd:	int3   
 101cade:	int3   
 101cadf:	int3   
 101cae0:	mov    rcx,QWORD PTR [rdx+0x40]
 101cae7:	jmp    0x10154b0
 101caec:	int3   
 101caed:	int3   
 101caee:	int3   
 101caef:	int3   
 101caf0:	int3   
 101caf1:	int3   
 101caf2:	int3   
 101caf3:	int3   
 101caf4:	int3   
 101caf5:	int3   
 101caf6:	int3   
 101caf7:	int3   
 101caf8:	int3   
 101caf9:	int3   
 101cafa:	int3   
 101cafb:	int3   
 101cafc:	int3   
 101cafd:	int3   
 101cafe:	int3   
 101caff:	int3   
 101cb00:	mov    rcx,QWORD PTR [rdx+0x40]
 101cb07:	jmp    0x1014920
 101cb0c:	int3   
 101cb0d:	int3   
 101cb0e:	int3   
 101cb0f:	int3   
 101cb10:	int3   
 101cb11:	int3   
 101cb12:	int3   
 101cb13:	int3   
 101cb14:	int3   
 101cb15:	int3   
 101cb16:	int3   
 101cb17:	int3   
 101cb18:	int3   
 101cb19:	int3   
 101cb1a:	int3   
 101cb1b:	int3   
 101cb1c:	int3   
 101cb1d:	int3   
 101cb1e:	int3   
 101cb1f:	int3   
 101cb20:	mov    rcx,QWORD PTR [rdx+0x40]
 101cb27:	jmp    0x1014970
 101cb2c:	int3   
 101cb2d:	int3   
 101cb2e:	int3   
 101cb2f:	int3   
 101cb30:	int3   
 101cb31:	int3   
 101cb32:	int3   
 101cb33:	int3   
 101cb34:	int3   
 101cb35:	int3   
 101cb36:	int3   
 101cb37:	int3   
 101cb38:	int3   
 101cb39:	int3   
 101cb3a:	int3   
 101cb3b:	int3   
 101cb3c:	int3   
 101cb3d:	int3   
 101cb3e:	int3   
 101cb3f:	int3   
 101cb40:	mov    rcx,QWORD PTR [rdx+0x40]
 101cb47:	jmp    0x1013810
 101cb4c:	int3   
 101cb4d:	int3   
 101cb4e:	int3   
 101cb4f:	int3   
 101cb50:	int3   
 101cb51:	int3   
 101cb52:	int3   
 101cb53:	int3   
 101cb54:	int3   
 101cb55:	int3   
 101cb56:	int3   
 101cb57:	int3   
 101cb58:	int3   
 101cb59:	int3   
 101cb5a:	int3   
 101cb5b:	int3   
 101cb5c:	int3   
 101cb5d:	int3   
 101cb5e:	int3   
 101cb5f:	int3   
 101cb60:	mov    rcx,QWORD PTR [rdx+0x40]
 101cb67:	jmp    0x1015460
 101cb6c:	int3   
 101cb6d:	int3   
 101cb6e:	int3   
 101cb6f:	int3   
 101cb70:	int3   
 101cb71:	int3   
 101cb72:	int3   
 101cb73:	int3   
 101cb74:	int3   
 101cb75:	int3   
 101cb76:	int3   
 101cb77:	int3   
 101cb78:	int3   
 101cb79:	int3   
 101cb7a:	int3   
 101cb7b:	int3   
 101cb7c:	int3   
 101cb7d:	int3   
 101cb7e:	int3   
 101cb7f:	int3   
 101cb80:	mov    rcx,QWORD PTR [rdx+0x40]
 101cb87:	jmp    0x100fdb0
 101cb8c:	int3   
 101cb8d:	int3   
 101cb8e:	int3   
 101cb8f:	int3   
 101cb90:	int3   
 101cb91:	int3   
 101cb92:	int3   
 101cb93:	int3   
 101cb94:	int3   
 101cb95:	int3   
 101cb96:	int3   
 101cb97:	int3   
 101cb98:	int3   
 101cb99:	int3   
 101cb9a:	int3   
 101cb9b:	int3   
 101cb9c:	int3   
 101cb9d:	int3   
 101cb9e:	int3   
 101cb9f:	int3   
 101cba0:	mov    rcx,QWORD PTR [rdx+0x40]
 101cba7:	jmp    0x100fe10
 101cbac:	int3   
 101cbad:	int3   
 101cbae:	int3   
 101cbaf:	int3   
 101cbb0:	int3   
 101cbb1:	int3   
 101cbb2:	int3   
 101cbb3:	int3   
 101cbb4:	int3   
 101cbb5:	int3   
 101cbb6:	int3   
 101cbb7:	int3   
 101cbb8:	int3   
 101cbb9:	int3   
 101cbba:	int3   
 101cbbb:	int3   
 101cbbc:	int3   
 101cbbd:	int3   
 101cbbe:	int3   
 101cbbf:	int3   
 101cbc0:	mov    rcx,QWORD PTR [rdx+0x40]
 101cbc7:	add    rcx,0x10
 101cbcb:	jmp    0x10166b0
 101cbd0:	int3   
 101cbd1:	int3   
 101cbd2:	int3   
 101cbd3:	int3   
 101cbd4:	int3   
 101cbd5:	int3   
 101cbd6:	int3   
 101cbd7:	int3   
 101cbd8:	int3   
 101cbd9:	int3   
 101cbda:	int3   
 101cbdb:	int3   
 101cbdc:	int3   
 101cbdd:	int3   
 101cbde:	int3   
 101cbdf:	int3   
 101cbe0:	mov    rcx,QWORD PTR [rdx+0x40]
 101cbe7:	add    rcx,0x10
 101cbeb:	jmp    0x10166b0
 101cbf0:	int3   
 101cbf1:	int3   
 101cbf2:	int3   
 101cbf3:	int3   
 101cbf4:	int3   
 101cbf5:	int3   
 101cbf6:	int3   
 101cbf7:	int3   
 101cbf8:	int3   
 101cbf9:	int3   
 101cbfa:	int3   
 101cbfb:	int3   
 101cbfc:	int3   
 101cbfd:	int3   
 101cbfe:	int3   
 101cbff:	int3   
 101cc00:	mov    rcx,QWORD PTR [rdx+0x40]
 101cc07:	add    rcx,0x10
 101cc0b:	jmp    0x10166b0
 101cc10:	int3   
 101cc11:	int3   
 101cc12:	int3   
 101cc13:	int3   
 101cc14:	int3   
 101cc15:	int3   
 101cc16:	int3   
 101cc17:	int3   
 101cc18:	int3   
 101cc19:	int3   
 101cc1a:	int3   
 101cc1b:	int3   
 101cc1c:	int3   
 101cc1d:	int3   
 101cc1e:	int3   
 101cc1f:	int3   
 101cc20:	mov    rcx,QWORD PTR [rdx+0x40]
 101cc27:	add    rcx,0x10
 101cc2b:	jmp    0x10166b0
 101cc30:	int3   
 101cc31:	int3   
 101cc32:	int3   
 101cc33:	int3   
 101cc34:	int3   
 101cc35:	int3   
 101cc36:	int3   
 101cc37:	int3   
 101cc38:	int3   
 101cc39:	int3   
 101cc3a:	int3   
 101cc3b:	int3   
 101cc3c:	int3   
 101cc3d:	int3   
 101cc3e:	int3   
 101cc3f:	int3   
 101cc40:	mov    rcx,QWORD PTR [rdx+0x40]
 101cc47:	add    rcx,0x10
 101cc4b:	jmp    0x10166b0
 101cc50:	int3   
 101cc51:	int3   
 101cc52:	int3   
 101cc53:	int3   
 101cc54:	int3   
 101cc55:	int3   
 101cc56:	int3   
 101cc57:	int3   
 101cc58:	int3   
 101cc59:	int3   
 101cc5a:	int3   
 101cc5b:	int3   
 101cc5c:	int3   
 101cc5d:	int3   
 101cc5e:	int3   
 101cc5f:	int3   
 101cc60:	mov    rcx,QWORD PTR [rdx+0x40]
 101cc67:	jmp    0x1015050
 101cc6c:	int3   
 101cc6d:	int3   
 101cc6e:	int3   
 101cc6f:	int3   
 101cc70:	mov    rcx,QWORD PTR [rdx+0x40]
 101cc77:	add    rcx,0x10
 101cc7b:	jmp    0x10166b0
 101cc80:	int3   
 101cc81:	int3   
 101cc82:	int3   
 101cc83:	int3   
 101cc84:	int3   
 101cc85:	int3   
 101cc86:	int3   
 101cc87:	int3   
 101cc88:	int3   
 101cc89:	int3   
 101cc8a:	int3   
 101cc8b:	int3   
 101cc8c:	int3   
 101cc8d:	int3   
 101cc8e:	int3   
 101cc8f:	int3   
 101cc90:	mov    rcx,QWORD PTR [rdx+0x40]
 101cc97:	jmp    0x1015300
 101cc9c:	int3   
 101cc9d:	int3   
 101cc9e:	int3   
 101cc9f:	int3   
 101cca0:	mov    rcx,QWORD PTR [rdx+0x40]
 101cca7:	add    rcx,0x10
 101ccab:	jmp    0x10166b0
 101ccb0:	int3   
 101ccb1:	int3   
 101ccb2:	int3   
 101ccb3:	int3   
 101ccb4:	int3   
 101ccb5:	int3   
 101ccb6:	int3   
 101ccb7:	int3   
 101ccb8:	int3   
 101ccb9:	int3   
 101ccba:	int3   
 101ccbb:	int3   
 101ccbc:	int3   
 101ccbd:	int3   
 101ccbe:	int3   
 101ccbf:	int3   
 101ccc0:	mov    rcx,QWORD PTR [rdx+0x40]
 101ccc7:	jmp    0x10156d0
 101cccc:	int3   
 101cccd:	int3   
 101ccce:	int3   
 101cccf:	int3   
 101ccd0:	mov    rcx,QWORD PTR [rdx+0x40]
 101ccd7:	add    rcx,0x10
 101ccdb:	jmp    0x10166b0
 101cce0:	int3   
 101cce1:	int3   
 101cce2:	int3   
 101cce3:	int3   
 101cce4:	int3   
 101cce5:	int3   
 101cce6:	int3   
 101cce7:	int3   
 101cce8:	int3   
 101cce9:	int3   
 101ccea:	int3   
 101cceb:	int3   
 101ccec:	int3   
 101cced:	int3   
 101ccee:	int3   
 101ccef:	int3   
 101ccf0:	mov    rcx,QWORD PTR [rdx+0x40]
 101ccf7:	jmp    0x10158d0
 101ccfc:	int3   
 101ccfd:	int3   
 101ccfe:	int3   
 101ccff:	int3   
 101cd00:	mov    rcx,QWORD PTR [rdx+0x40]
 101cd07:	add    rcx,0x10
 101cd0b:	jmp    0x10166b0
 101cd10:	int3   
 101cd11:	int3   
 101cd12:	int3   
 101cd13:	int3   
 101cd14:	int3   
 101cd15:	int3   
 101cd16:	int3   
 101cd17:	int3   
 101cd18:	int3   
 101cd19:	int3   
 101cd1a:	int3   
 101cd1b:	int3   
 101cd1c:	int3   
 101cd1d:	int3   
 101cd1e:	int3   
 101cd1f:	int3   
 101cd20:	mov    rcx,QWORD PTR [rdx+0x40]
 101cd27:	jmp    0x1015ad0
 101cd2c:	int3   
 101cd2d:	int3   
 101cd2e:	int3   
 101cd2f:	int3   
 101cd30:	mov    rcx,QWORD PTR [rdx+0x40]
 101cd37:	add    rcx,0x10
 101cd3b:	jmp    0x10166b0
 101cd40:	int3   
 101cd41:	int3   
 101cd42:	int3   
 101cd43:	int3   
 101cd44:	int3   
 101cd45:	int3   
 101cd46:	int3   
 101cd47:	int3   
 101cd48:	int3   
 101cd49:	int3   
 101cd4a:	int3   
 101cd4b:	int3   
 101cd4c:	int3   
 101cd4d:	int3   
 101cd4e:	int3   
 101cd4f:	int3   
 101cd50:	mov    rcx,QWORD PTR [rdx+0x40]
 101cd57:	add    rcx,0x8
 101cd5b:	jmp    0x100fe00
 101cd60:	mov    rcx,QWORD PTR [rdx+0x40]
 101cd67:	add    rcx,0x28
 101cd6b:	jmp    0x100fe60
 101cd70:	mov    rcx,QWORD PTR [rdx+0x48]
 101cd77:	jmp    0x100fe10
 101cd7c:	int3   
 101cd7d:	int3   
 101cd7e:	int3   
 101cd7f:	int3   
 101cd80:	int3   
 101cd81:	int3   
 101cd82:	int3   
 101cd83:	int3   
 101cd84:	int3   
 101cd85:	int3   
 101cd86:	int3   
 101cd87:	int3   
 101cd88:	int3   
 101cd89:	int3   
 101cd8a:	int3   
 101cd8b:	int3   
 101cd8c:	int3   
 101cd8d:	int3   
 101cd8e:	int3   
 101cd8f:	int3   
 101cd90:	mov    rcx,QWORD PTR [rdx+0x20]
 101cd97:	add    rcx,0x8
 101cd9b:	jmp    0x100ff40
 101cda0:	int3   
 101cda1:	int3   
 101cda2:	int3   
 101cda3:	int3   
 101cda4:	int3   
 101cda5:	int3   
 101cda6:	int3   
 101cda7:	int3   
 101cda8:	int3   
 101cda9:	int3   
 101cdaa:	int3   
 101cdab:	int3   
 101cdac:	int3   
 101cdad:	int3   
 101cdae:	int3   
 101cdaf:	int3   
 101cdb0:	mov    rcx,QWORD PTR [rdx+0x40]
 101cdb7:	add    rcx,0x228
 101cdbe:	jmp    0x1013870
 101cdc3:	int3   
 101cdc4:	int3   
 101cdc5:	int3   
 101cdc6:	int3   
 101cdc7:	int3   
 101cdc8:	int3   
 101cdc9:	int3   
 101cdca:	int3   
 101cdcb:	int3   
 101cdcc:	int3   
 101cdcd:	int3   
 101cdce:	int3   
 101cdcf:	int3   
 101cdd0:	mov    rcx,QWORD PTR [rdx+0x40]
 101cdd7:	jmp    0x1013810
 101cddc:	int3   
 101cddd:	int3   
 101cdde:	int3   
 101cddf:	int3   
 101cde0:	int3   
 101cde1:	int3   
 101cde2:	int3   
 101cde3:	int3   
 101cde4:	int3   
 101cde5:	int3   
 101cde6:	int3   
 101cde7:	int3   
 101cde8:	int3   
 101cde9:	int3   
 101cdea:	int3   
 101cdeb:	int3   
 101cdec:	int3   
 101cded:	int3   
 101cdee:	int3   
 101cdef:	int3   
 101cdf0:	mov    rcx,QWORD PTR [rdx+0x40]
 101cdf7:	jmp    0x100fec0
 101cdfc:	int3   
 101cdfd:	int3   
 101cdfe:	int3   
 101cdff:	int3   
 101ce00:	mov    rcx,QWORD PTR [rdx+0x40]
 101ce07:	add    rcx,0x288
 101ce0e:	jmp    0x1011e10
 101ce13:	int3   
 101ce14:	int3   
 101ce15:	int3   
 101ce16:	int3   
 101ce17:	int3   
 101ce18:	int3   
 101ce19:	int3   
 101ce1a:	int3   
 101ce1b:	int3   
 101ce1c:	int3   
 101ce1d:	int3   
 101ce1e:	int3   
 101ce1f:	int3   
 101ce20:	lea    rcx,[rdx+0x40]
 101ce27:	jmp    0x10166b0
 101ce2c:	int3   
 101ce2d:	int3   
 101ce2e:	int3   
 101ce2f:	int3   
 101ce30:	lea    rcx,[rdx+0x70]
 101ce37:	jmp    0x10169d0
 101ce3c:	int3   
 101ce3d:	int3   
 101ce3e:	int3   
 101ce3f:	int3   
 101ce40:	lea    rcx,[rdx+0x48]
 101ce47:	add    rcx,0x10
 101ce4b:	jmp    0x10166b0
 101ce50:	lea    rcx,[rdx+0x48]
 101ce57:	jmp    0x1015ad0
 101ce5c:	int3   
 101ce5d:	int3   
 101ce5e:	int3   
 101ce5f:	int3   
 101ce60:	lea    rcx,[rdx+0x48]
 101ce67:	jmp    0x1015c00
 101ce6c:	int3   
 101ce6d:	int3   
 101ce6e:	int3   
 101ce6f:	int3   
 101ce70:	lea    rcx,[rdx+0x30]
 101ce77:	jmp    0x10154b0
 101ce7c:	int3   
 101ce7d:	int3   
 101ce7e:	int3   
 101ce7f:	int3   
 101ce80:	lea    rcx,[rdx+0x30]
 101ce87:	jmp    0x10154e0
 101ce8c:	int3   
 101ce8d:	int3   
 101ce8e:	int3   
 101ce8f:	int3   
 101ce90:	lea    rcx,[rdx+0x30]
 101ce97:	jmp    0x10154b0
 101ce9c:	int3   
 101ce9d:	int3   
 101ce9e:	int3   
 101ce9f:	int3   
 101cea0:	lea    rcx,[rdx+0x48]
 101cea7:	jmp    0x1015ad0
 101ceac:	int3   
 101cead:	int3   
 101ceae:	int3   
 101ceaf:	int3   
 101ceb0:	lea    rcx,[rdx+0x48]
 101ceb7:	add    rcx,0x10
 101cebb:	jmp    0x10166b0
 101cec0:	int3   
 101cec1:	int3   
 101cec2:	int3   
 101cec3:	int3   
 101cec4:	int3   
 101cec5:	int3   
 101cec6:	int3   
 101cec7:	int3   
 101cec8:	int3   
 101cec9:	int3   
 101ceca:	int3   
 101cecb:	int3   
 101cecc:	int3   
 101cecd:	int3   
 101cece:	int3   
 101cecf:	int3   
 101ced0:	lea    rcx,[rdx+0x30]
 101ced7:	jmp    0x100fd80
 101cedc:	int3   
 101cedd:	int3   
 101cede:	int3   
 101cedf:	int3   
 101cee0:	lea    rcx,[rdx+0x38]
 101cee7:	jmp    0x1013a60
 101ceec:	int3   
 101ceed:	int3   
 101ceee:	int3   
 101ceef:	int3   
 101cef0:	lea    rcx,[rdx+0x48]
 101cef7:	jmp    0x1011e10
 101cefc:	int3   
 101cefd:	int3   
 101cefe:	int3   
 101ceff:	int3   
 101cf00:	lea    rcx,[rdx+0x40]
 101cf07:	jmp    0x1011e10
 101cf0c:	int3   
 101cf0d:	int3   
 101cf0e:	int3   
 101cf0f:	int3   
 101cf10:	int3   
 101cf11:	int3   
 101cf12:	int3   
 101cf13:	int3   
 101cf14:	int3   
 101cf15:	int3   
 101cf16:	int3   
 101cf17:	int3   
 101cf18:	int3   
 101cf19:	int3   
 101cf1a:	int3   
 101cf1b:	int3   
 101cf1c:	int3   
 101cf1d:	int3   
 101cf1e:	int3   
 101cf1f:	int3   
 101cf20:	lea    rcx,[rdx+0x40]
 101cf27:	jmp    0x1011e10
 101cf2c:	int3   
 101cf2d:	int3   
 101cf2e:	int3   
 101cf2f:	int3   
 101cf30:	int3   
 101cf31:	int3   
 101cf32:	int3   
 101cf33:	int3   
 101cf34:	int3   
 101cf35:	int3   
 101cf36:	int3   
 101cf37:	int3   
 101cf38:	int3   
 101cf39:	int3   
 101cf3a:	int3   
 101cf3b:	int3   
 101cf3c:	int3   
 101cf3d:	int3   
 101cf3e:	int3   
 101cf3f:	int3   
 101cf40:	lea    rcx,[rdx+0xc8]
 101cf47:	jmp    0x1014920
 101cf4c:	int3   
 101cf4d:	int3   
 101cf4e:	int3   
 101cf4f:	int3   
 101cf50:	lea    rcx,[rdx+0xc8]
 101cf57:	jmp    0x1014930
 101cf5c:	int3   
 101cf5d:	int3   
 101cf5e:	int3   
 101cf5f:	int3   
 101cf60:	lea    rcx,[rdx+0xc8]
 101cf67:	jmp    0x1014920
 101cf6c:	int3   
 101cf6d:	int3   
 101cf6e:	int3   
 101cf6f:	int3   
 101cf70:	lea    rcx,[rdx+0xc8]
 101cf77:	jmp    0x1013810
 101cf7c:	int3   
 101cf7d:	int3   
 101cf7e:	int3   
 101cf7f:	int3   
 101cf80:	lea    rcx,[rdx+0xc8]
 101cf87:	jmp    0x1013870
 101cf8c:	int3   
 101cf8d:	int3   
 101cf8e:	int3   
 101cf8f:	int3   
 101cf90:	lea    rcx,[rdx+0xc8]
 101cf97:	jmp    0x1013810
 101cf9c:	int3   
 101cf9d:	int3   
 101cf9e:	int3   
 101cf9f:	int3   
 101cfa0:	lea    rcx,[rdx+0x28]
 101cfa7:	jmp    0x100fda0
 101cfac:	int3   
 101cfad:	int3   
 101cfae:	int3   
 101cfaf:	int3   
 101cfb0:	lea    rcx,[rdx+0x28]
 101cfb7:	jmp    0x100fda0
 101cfbc:	int3   
 101cfbd:	int3   
 101cfbe:	int3   
 101cfbf:	int3   
 101cfc0:	lea    rcx,[rdx+0x28]
 101cfc7:	jmp    0x100fda0
 101cfcc:	int3   
 101cfcd:	int3   
 101cfce:	int3   
 101cfcf:	int3   
 101cfd0:	lea    rcx,[rdx+0x28]
 101cfd7:	jmp    0x100fda0
 101cfdc:	int3   
 101cfdd:	int3   
 101cfde:	int3   
 101cfdf:	int3   
 101cfe0:	lea    rcx,[rdx+0x28]
 101cfe7:	jmp    0x100fda0
 101cfec:	int3   
 101cfed:	int3   
 101cfee:	int3   
 101cfef:	int3   
 101cff0:	lea    rcx,[rdx+0x28]
 101cff7:	jmp    0x100fda0
 101cffc:	int3   
 101cffd:	int3   
 101cffe:	int3   
 101cfff:	int3   
 101d000:	lea    rcx,[rdx+0x28]
 101d007:	jmp    0x100fda0
 101d00c:	int3   
 101d00d:	int3   
 101d00e:	int3   
 101d00f:	int3   
 101d010:	lea    rcx,[rdx+0x28]
 101d017:	jmp    0x100fda0
 101d01c:	int3   
 101d01d:	int3   
 101d01e:	int3   
 101d01f:	int3   
 101d020:	lea    rcx,[rdx+0x28]
 101d027:	jmp    0x100fda0
 101d02c:	int3   
 101d02d:	int3   
 101d02e:	int3   
 101d02f:	int3   
 101d030:	lea    rcx,[rdx+0x28]
 101d037:	jmp    0x100fda0
 101d03c:	int3   
 101d03d:	int3   
 101d03e:	int3   
 101d03f:	int3   
 101d040:	lea    rcx,[rdx+0x28]
 101d047:	jmp    0x100fda0
 101d04c:	int3   
 101d04d:	int3   
 101d04e:	int3   
 101d04f:	int3   
 101d050:	lea    rcx,[rdx+0x28]
 101d057:	jmp    0x100fda0
 101d05c:	int3   
 101d05d:	int3   
 101d05e:	int3   
 101d05f:	int3   
 101d060:	lea    rcx,[rdx+0xc8]
 101d067:	jmp    0x1014970
 101d06c:	int3   
 101d06d:	int3   
 101d06e:	int3   
 101d06f:	int3   
 101d070:	lea    rcx,[rdx+0xc8]
 101d077:	jmp    0x1014980
 101d07c:	int3   
 101d07d:	int3   
 101d07e:	int3   
 101d07f:	int3   
 101d080:	lea    rcx,[rdx+0xc8]
 101d087:	jmp    0x1014970
 101d08c:	int3   
 101d08d:	int3   
 101d08e:	int3   
 101d08f:	int3   
 101d090:	int3   
 101d091:	int3   
 101d092:	int3   
 101d093:	int3   
 101d094:	int3   
 101d095:	int3   
 101d096:	int3   
 101d097:	int3   
 101d098:	int3   
 101d099:	int3   
 101d09a:	int3   
 101d09b:	int3   
 101d09c:	int3   
 101d09d:	int3   
 101d09e:	int3   
 101d09f:	int3   
 101d0a0:	lea    rcx,[rdx+0x20]
 101d0a7:	jmp    0x1013a60
 101d0ac:	int3   
 101d0ad:	int3   
 101d0ae:	int3   
 101d0af:	int3   
 101d0b0:	lea    rcx,[rdx+0x78]
 101d0b7:	jmp    0x1011e10
 101d0bc:	int3   
 101d0bd:	int3   
 101d0be:	int3   
 101d0bf:	int3   
 101d0c0:	lea    rcx,[rdx+0x28]
 101d0c7:	jmp    0x1014bc0
 101d0cc:	int3   
 101d0cd:	int3   
 101d0ce:	int3   
 101d0cf:	int3   
 101d0d0:	lea    rcx,[rdx+0x88]
 101d0d7:	jmp    0x1014c00
 101d0dc:	int3   
 101d0dd:	int3   
 101d0de:	int3   
 101d0df:	int3   
 101d0e0:	lea    rcx,[rdx+0x88]
 101d0e7:	jmp    0x1014c10
 101d0ec:	int3   
 101d0ed:	int3   
 101d0ee:	int3   
 101d0ef:	int3   
 101d0f0:	lea    rcx,[rdx+0x88]
 101d0f7:	jmp    0x1014c00
 101d0fc:	int3   
 101d0fd:	int3   
 101d0fe:	int3   
 101d0ff:	int3   
 101d100:	lea    rcx,[rdx+0x88]
 101d107:	jmp    0x1014c00
 101d10c:	int3   
 101d10d:	int3   
 101d10e:	int3   
 101d10f:	int3   
 101d110:	int3   
 101d111:	int3   
 101d112:	int3   
 101d113:	int3   
 101d114:	int3   
 101d115:	int3   
 101d116:	int3   
 101d117:	int3   
 101d118:	int3   
 101d119:	int3   
 101d11a:	int3   
 101d11b:	int3   
 101d11c:	int3   
 101d11d:	int3   
 101d11e:	int3   
 101d11f:	int3   
 101d120:	lea    rcx,[rdx+0x48]
 101d127:	jmp    0x1014c50
 101d12c:	int3   
 101d12d:	int3   
 101d12e:	int3   
 101d12f:	int3   
 101d130:	lea    rcx,[rdx+0x40]
 101d137:	jmp    0x1014be0
 101d13c:	int3   
 101d13d:	int3   
 101d13e:	int3   
 101d13f:	int3   
 101d140:	lea    rcx,[rdx+0x108]
 101d147:	jmp    0x100fd80
 101d14c:	int3   
 101d14d:	int3   
 101d14e:	int3   
 101d14f:	int3   
 101d150:	lea    rcx,[rdx+0xf0]
 101d157:	jmp    0x100ff80
 101d15c:	int3   
 101d15d:	int3   
 101d15e:	int3   
 101d15f:	int3   
 101d160:	lea    rcx,[rdx+0x118]
 101d167:	jmp    0x100fd80
 101d16c:	int3   
 101d16d:	int3   
 101d16e:	int3   
 101d16f:	int3   
 101d170:	lea    rcx,[rdx+0xc0]
 101d177:	jmp    0x100ff80
 101d17c:	int3   
 101d17d:	int3   
 101d17e:	int3   
 101d17f:	int3   
 101d180:	lea    rcx,[rdx+0x128]
 101d187:	jmp    0x100fd80
 101d18c:	int3   
 101d18d:	int3   
 101d18e:	int3   
 101d18f:	int3   
 101d190:	lea    rcx,[rdx+0xd8]
 101d197:	jmp    0x100ff80
 101d19c:	int3   
 101d19d:	int3   
 101d19e:	int3   
 101d19f:	int3   
 101d1a0:	lea    rcx,[rdx+0x110]
 101d1a7:	jmp    0x100fd80
 101d1ac:	int3   
 101d1ad:	int3   
 101d1ae:	int3   
 101d1af:	int3   
 101d1b0:	lea    rcx,[rdx+0xa8]
 101d1b7:	jmp    0x100ff80
 101d1bc:	int3   
 101d1bd:	int3   
 101d1be:	int3   
 101d1bf:	int3   
 101d1c0:	lea    rcx,[rdx+0xa8]
 101d1c7:	jmp    0x100ff80
 101d1cc:	int3   
 101d1cd:	int3   
 101d1ce:	int3   
 101d1cf:	int3   
 101d1d0:	lea    rcx,[rdx+0x58]
 101d1d7:	jmp    0x100fd80
 101d1dc:	int3   
 101d1dd:	int3   
 101d1de:	int3   
 101d1df:	int3   
 101d1e0:	lea    rcx,[rdx+0x68]
 101d1e7:	jmp    0x100fd80
 101d1ec:	int3   
 101d1ed:	int3   
 101d1ee:	int3   
 101d1ef:	int3   
 101d1f0:	int3   
 101d1f1:	int3   
 101d1f2:	int3   
 101d1f3:	int3   
 101d1f4:	int3   
 101d1f5:	int3   
 101d1f6:	int3   
 101d1f7:	int3   
 101d1f8:	int3   
 101d1f9:	int3   
 101d1fa:	int3   
 101d1fb:	int3   
 101d1fc:	int3   
 101d1fd:	int3   
 101d1fe:	int3   
 101d1ff:	int3   
 101d200:	lea    rcx,[rdx+0x70]
 101d207:	jmp    0x10166b0
 101d20c:	int3   
 101d20d:	int3   
 101d20e:	int3   
 101d20f:	int3   
 101d210:	lea    rcx,[rdx+0x80]
 101d217:	jmp    0x1013a60
 101d21c:	int3   
 101d21d:	int3   
 101d21e:	int3   
 101d21f:	int3   
 101d220:	lea    rcx,[rdx+0x28]
 101d227:	jmp    0x1011e10
 101d22c:	int3   
 101d22d:	int3   
 101d22e:	int3   
 101d22f:	int3   
 101d230:	lea    rcx,[rdx+0x20]
 101d237:	jmp    0x1013a60
 101d23c:	int3   
 101d23d:	int3   
 101d23e:	int3   
 101d23f:	int3   
 101d240:	lea    rcx,[rdx+0x88]
 101d247:	jmp    0x1011e10
 101d24c:	int3   
 101d24d:	int3   
 101d24e:	int3   
 101d24f:	int3   
 101d250:	int3   
 101d251:	int3   
 101d252:	int3   
 101d253:	int3   
 101d254:	int3   
 101d255:	int3   
 101d256:	int3   
 101d257:	int3   
 101d258:	int3   
 101d259:	int3   
 101d25a:	int3   
 101d25b:	int3   
 101d25c:	int3   
 101d25d:	int3   
 101d25e:	int3   
 101d25f:	int3   
 101d260:	lea    rcx,[rdx+0x38]
 101d267:	jmp    0x10166b0
 101d26c:	int3   
 101d26d:	int3   
 101d26e:	int3   
 101d26f:	int3   
 101d270:	lea    rcx,[rdx+0x40]
 101d277:	jmp    0x1011e10
 101d27c:	int3   
 101d27d:	int3   
 101d27e:	int3   
 101d27f:	int3   
 101d280:	lea    rcx,[rdx+0x30]
 101d287:	jmp    0x1011e10
 101d28c:	int3   
 101d28d:	int3   
 101d28e:	int3   
 101d28f:	int3   
 101d290:	lea    rcx,[rdx+0x48]
 101d297:	jmp    0x1011e10
 101d29c:	int3   
 101d29d:	int3   
 101d29e:	int3   
 101d29f:	int3   
 101d2a0:	lea    rcx,[rdx+0x60]
 101d2a7:	add    rcx,0x10
 101d2ab:	jmp    0x10166b0
 101d2b0:	lea    rcx,[rdx+0x60]
 101d2b7:	jmp    0x10156d0
 101d2bc:	int3   
 101d2bd:	int3   
 101d2be:	int3   
 101d2bf:	int3   
 101d2c0:	lea    rcx,[rdx+0x60]
 101d2c7:	jmp    0x1015800
 101d2cc:	int3   
 101d2cd:	int3   
 101d2ce:	int3   
 101d2cf:	int3   
 101d2d0:	lea    rcx,[rdx+0xa8]
 101d2d7:	jmp    0x100fda0
 101d2dc:	int3   
 101d2dd:	int3   
 101d2de:	int3   
 101d2df:	int3   
 101d2e0:	lea    rcx,[rdx+0x80]
 101d2e7:	add    rcx,0x10
 101d2eb:	jmp    0x10166b0
 101d2f0:	lea    rcx,[rdx+0x80]
 101d2f7:	jmp    0x10158d0
 101d2fc:	int3   
 101d2fd:	int3   
 101d2fe:	int3   
 101d2ff:	int3   
 101d300:	lea    rcx,[rdx+0x80]
 101d307:	jmp    0x1015a00
 101d30c:	int3   
 101d30d:	int3   
 101d30e:	int3   
 101d30f:	int3   
 101d310:	lea    rcx,[rdx+0x80]
 101d317:	jmp    0x10158d0
 101d31c:	int3   
 101d31d:	int3   
 101d31e:	int3   
 101d31f:	int3   
 101d320:	lea    rcx,[rdx+0x80]
 101d327:	add    rcx,0x10
 101d32b:	jmp    0x10166b0
 101d330:	lea    rcx,[rdx+0x60]
 101d337:	jmp    0x10156d0
 101d33c:	int3   
 101d33d:	int3   
 101d33e:	int3   
 101d33f:	int3   
 101d340:	lea    rcx,[rdx+0x60]
 101d347:	add    rcx,0x10
 101d34b:	jmp    0x10166b0
 101d350:	lea    rcx,[rdx+0x50]
 101d357:	jmp    0x1014bc0
 101d35c:	int3   
 101d35d:	int3   
 101d35e:	int3   
 101d35f:	int3   
 101d360:	lea    rcx,[rdx+0x58]
 101d367:	jmp    0x10166b0
 101d36c:	int3   
 101d36d:	int3   
 101d36e:	int3   
 101d36f:	int3   
 101d370:	lea    rcx,[rdx+0x60]
 101d377:	jmp    0x10156d0
 101d37c:	int3   
 101d37d:	int3   
 101d37e:	int3   
 101d37f:	int3   
 101d380:	lea    rcx,[rdx+0x60]
 101d387:	add    rcx,0x10
 101d38b:	jmp    0x10166b0
 101d390:	int3   
 101d391:	int3   
 101d392:	int3   
 101d393:	int3   
 101d394:	int3   
 101d395:	int3   
 101d396:	int3   
 101d397:	int3   
 101d398:	int3   
 101d399:	int3   
 101d39a:	int3   
 101d39b:	int3   
 101d39c:	int3   
 101d39d:	int3   
 101d39e:	int3   
 101d39f:	int3   
 101d3a0:	mov    rcx,QWORD PTR [rdx+0x40]
 101d3a7:	jmp    0x100ff50
 101d3ac:	int3   
 101d3ad:	int3   
 101d3ae:	int3   
 101d3af:	int3   
 101d3b0:	mov    rcx,QWORD PTR [rdx+0x40]
 101d3b7:	add    rcx,0x10
 101d3bb:	jmp    0x1013a60
 101d3c0:	mov    rcx,QWORD PTR [rdx+0x40]
 101d3c7:	add    rcx,0x18
 101d3cb:	jmp    0x1011e10
 101d3d0:	mov    rcx,QWORD PTR [rdx+0x40]
 101d3d7:	add    rcx,0x8
 101d3db:	jmp    0x100ff40
 101d3e0:	int3   
 101d3e1:	int3   
 101d3e2:	int3   
 101d3e3:	int3   
 101d3e4:	int3   
 101d3e5:	int3   
 101d3e6:	int3   
 101d3e7:	int3   
 101d3e8:	int3   
 101d3e9:	int3   
 101d3ea:	int3   
 101d3eb:	int3   
 101d3ec:	int3   
 101d3ed:	int3   
 101d3ee:	int3   
 101d3ef:	int3   
 101d3f0:	lea    rcx,[rdx+0x30]
 101d3f7:	jmp    0x10166b0
 101d3fc:	int3   
 101d3fd:	int3   
 101d3fe:	int3   
 101d3ff:	int3   
 101d400:	lea    rcx,[rdx+0x48]
 101d407:	add    rcx,0x10
 101d40b:	jmp    0x10166b0
 101d410:	lea    rcx,[rdx+0x48]
 101d417:	jmp    0x1015300
 101d41c:	int3   
 101d41d:	int3   
 101d41e:	int3   
 101d41f:	int3   
 101d420:	lea    rcx,[rdx+0x48]
 101d427:	jmp    0x1015430
 101d42c:	int3   
 101d42d:	int3   
 101d42e:	int3   
 101d42f:	int3   
 101d430:	lea    rcx,[rdx+0x48]
 101d437:	jmp    0x1015300
 101d43c:	int3   
 101d43d:	int3   
 101d43e:	int3   
 101d43f:	int3   
 101d440:	lea    rcx,[rdx+0x48]
 101d447:	add    rcx,0x10
 101d44b:	jmp    0x10166b0
 101d450:	int3   
 101d451:	int3   
 101d452:	int3   
 101d453:	int3   
 101d454:	int3   
 101d455:	int3   
 101d456:	int3   
 101d457:	int3   
 101d458:	int3   
 101d459:	int3   
 101d45a:	int3   
 101d45b:	int3   
 101d45c:	int3   
 101d45d:	int3   
 101d45e:	int3   
 101d45f:	int3   
 101d460:	lea    rcx,[rdx+0x28]
 101d467:	jmp    0x1011e10
 101d46c:	int3   
 101d46d:	int3   
 101d46e:	int3   
 101d46f:	int3   
 101d470:	lea    rcx,[rdx+0x30]
 101d477:	jmp    0x1014be0
 101d47c:	int3   
 101d47d:	int3   
 101d47e:	int3   
 101d47f:	int3   
 101d480:	lea    rcx,[rdx+0x20]
 101d487:	jmp    0x1011e10
 101d48c:	int3   
 101d48d:	int3   
 101d48e:	int3   
 101d48f:	int3   
 101d490:	lea    rcx,[rdx+0x38]
 101d497:	jmp    0x1014d50
 101d49c:	int3   
 101d49d:	int3   
 101d49e:	int3   
 101d49f:	int3   
 101d4a0:	int3   
 101d4a1:	int3   
 101d4a2:	int3   
 101d4a3:	int3   
 101d4a4:	int3   
 101d4a5:	int3   
 101d4a6:	int3   
 101d4a7:	int3   
 101d4a8:	int3   
 101d4a9:	int3   
 101d4aa:	int3   
 101d4ab:	int3   
 101d4ac:	int3   
 101d4ad:	int3   
 101d4ae:	int3   
 101d4af:	int3   
 101d4b0:	lea    rcx,[rdx+0x28]
 101d4b7:	jmp    0x1014be0
 101d4bc:	int3   
 101d4bd:	int3   
 101d4be:	int3   
 101d4bf:	int3   
 101d4c0:	lea    rcx,[rdx+0x20]
 101d4c7:	jmp    0x1011e10
 101d4cc:	int3   
 101d4cd:	int3   
 101d4ce:	int3   
 101d4cf:	int3   
 101d4d0:	int3   
 101d4d1:	int3   
 101d4d2:	int3   
 101d4d3:	int3   
 101d4d4:	int3   
 101d4d5:	int3   
 101d4d6:	int3   
 101d4d7:	int3   
 101d4d8:	int3   
 101d4d9:	int3   
 101d4da:	int3   
 101d4db:	int3   
 101d4dc:	int3   
 101d4dd:	int3   
 101d4de:	int3   
 101d4df:	int3   
 101d4e0:	lea    rcx,[rdx+0x20]
 101d4e7:	jmp    0x1013a60
 101d4ec:	int3   
 101d4ed:	int3   
 101d4ee:	int3   
 101d4ef:	int3   
 101d4f0:	lea    rcx,[rdx+0x30]
 101d4f7:	jmp    0x1015000
 101d4fc:	int3   
 101d4fd:	int3   
 101d4fe:	int3   
 101d4ff:	int3   
 101d500:	lea    rcx,[rdx+0x30]
 101d507:	jmp    0x1015010
 101d50c:	int3   
 101d50d:	int3   
 101d50e:	int3   
 101d50f:	int3   
 101d510:	lea    rcx,[rdx+0x40]
 101d517:	add    rcx,0x10
 101d51b:	jmp    0x10166b0
 101d520:	lea    rcx,[rdx+0x40]
 101d527:	jmp    0x1015050
 101d52c:	int3   
 101d52d:	int3   
 101d52e:	int3   
 101d52f:	int3   
 101d530:	lea    rcx,[rdx+0x40]
 101d537:	jmp    0x1015180
 101d53c:	int3   
 101d53d:	int3   
 101d53e:	int3   
 101d53f:	int3   
 101d540:	lea    rcx,[rdx+0x28]
 101d547:	jmp    0x1011e10
 101d54c:	int3   
 101d54d:	int3   
 101d54e:	int3   
 101d54f:	int3   
 101d550:	lea    rcx,[rdx+0x40]
 101d557:	jmp    0x1015050
 101d55c:	int3   
 101d55d:	int3   
 101d55e:	int3   
 101d55f:	int3   
 101d560:	lea    rcx,[rdx+0x40]
 101d567:	add    rcx,0x10
 101d56b:	jmp    0x10166b0
 101d570:	lea    rcx,[rdx+0x30]
 101d577:	jmp    0x1015000
 101d57c:	int3   
 101d57d:	int3   
 101d57e:	int3   
 101d57f:	int3   
 101d580:	int3   
 101d581:	int3   
 101d582:	int3   
 101d583:	int3   
 101d584:	int3   
 101d585:	int3   
 101d586:	int3   
 101d587:	int3   
 101d588:	int3   
 101d589:	int3   
 101d58a:	int3   
 101d58b:	int3   
 101d58c:	int3   
 101d58d:	int3   
 101d58e:	int3   
 101d58f:	int3   
 101d590:	lea    rcx,[rdx+0x28]
 101d597:	jmp    0x1014be0
 101d59c:	int3   
 101d59d:	int3   
 101d59e:	int3   
 101d59f:	int3   
 101d5a0:	lea    rcx,[rdx+0x70]
 101d5a7:	jmp    0x1014cc0
 101d5ac:	int3   
 101d5ad:	int3   
 101d5ae:	int3   
 101d5af:	int3   
 101d5b0:	lea    rcx,[rdx+0x70]
 101d5b7:	jmp    0x1014cd0
 101d5bc:	int3   
 101d5bd:	int3   
 101d5be:	int3   
 101d5bf:	int3   
 101d5c0:	lea    rcx,[rdx+0x38]
 101d5c7:	jmp    0x1014d10
 101d5cc:	int3   
 101d5cd:	int3   
 101d5ce:	int3   
 101d5cf:	int3   
 101d5d0:	lea    rcx,[rdx+0x48]
 101d5d7:	jmp    0x1014d10
 101d5dc:	int3   
 101d5dd:	int3   
 101d5de:	int3   
 101d5df:	int3   
 101d5e0:	lea    rcx,[rdx+0x40]
 101d5e7:	jmp    0x1014d10
 101d5ec:	int3   
 101d5ed:	int3   
 101d5ee:	int3   
 101d5ef:	int3   
 101d5f0:	lea    rcx,[rdx+0x30]
 101d5f7:	jmp    0x1011e10
 101d5fc:	int3   
 101d5fd:	int3   
 101d5fe:	int3   
 101d5ff:	int3   
 101d600:	lea    rcx,[rdx+0x60]
 101d607:	jmp    0x1014d30
 101d60c:	int3   
 101d60d:	int3   
 101d60e:	int3   
 101d60f:	int3   
 101d610:	rex push rbp
 101d612:	sub    rsp,0x20
 101d616:	mov    rbp,rdx
 101d619:	mov    eax,DWORD PTR [rbp+0x50]
 101d61c:	and    eax,0x1
 101d61f:	test   eax,eax
 101d621:	je     0x101d633
 101d623:	and    DWORD PTR [rbp+0x50],0xfffffffe
 101d627:	lea    rcx,[rbp+0xa8]
 101d62e:	call   0x100ff80
 101d633:	add    rsp,0x20
 101d637:	pop    rbp
 101d638:	ret    
 101d639:	int3   
 101d63a:	int3   
 101d63b:	int3   
 101d63c:	int3   
 101d63d:	int3   
 101d63e:	int3   
 101d63f:	int3   
 101d640:	mov    rcx,QWORD PTR [rdx+0x88]
 101d647:	add    rcx,0x8
 101d64b:	jmp    0x100ff40
 101d650:	mov    rcx,QWORD PTR [rdx+0x88]
 101d657:	jmp    0x100ff50
 101d65c:	int3   
 101d65d:	int3   
 101d65e:	int3   
 101d65f:	int3   
 101d660:	mov    rcx,QWORD PTR [rdx+0x88]
 101d667:	add    rcx,0x10
 101d66b:	jmp    0x1013a60
 101d670:	mov    rcx,QWORD PTR [rdx+0x88]
 101d677:	add    rcx,0x18
 101d67b:	jmp    0x1011e10
 101d680:	lea    rcx,[rdx+0x98]
 101d687:	jmp    0x1014c70
 101d68c:	int3   
 101d68d:	int3   
 101d68e:	int3   
 101d68f:	int3   
 101d690:	lea    rcx,[rdx+0x68]
 101d697:	jmp    0x1013a60
 101d69c:	int3   
 101d69d:	int3   
 101d69e:	int3   
 101d69f:	int3   
 101d6a0:	mov    rcx,QWORD PTR [rdx+0x58]
 101d6a7:	add    rcx,0x8
 101d6ab:	jmp    0x100ff40
 101d6b0:	mov    rcx,QWORD PTR [rdx+0x58]
 101d6b7:	jmp    0x100ff50
 101d6bc:	int3   
 101d6bd:	int3   
 101d6be:	int3   
 101d6bf:	int3   
 101d6c0:	mov    rcx,QWORD PTR [rdx+0x58]
 101d6c7:	add    rcx,0x10
 101d6cb:	jmp    0x1013a60
 101d6d0:	mov    rcx,QWORD PTR [rdx+0x58]
 101d6d7:	add    rcx,0x18
 101d6db:	jmp    0x1011e10
 101d6e0:	lea    rcx,[rdx+0xa0]
 101d6e7:	jmp    0x1014c70
 101d6ec:	int3   
 101d6ed:	int3   
 101d6ee:	int3   
 101d6ef:	int3   
 101d6f0:	lea    rcx,[rdx+0x78]
 101d6f7:	jmp    0x1013a60
 101d6fc:	int3   
 101d6fd:	int3   
 101d6fe:	int3   
 101d6ff:	int3   
 101d700:	mov    rcx,QWORD PTR [rdx+0x58]
 101d707:	add    rcx,0x8
 101d70b:	jmp    0x100ff40
 101d710:	mov    rcx,QWORD PTR [rdx+0x58]
 101d717:	jmp    0x100ff50
 101d71c:	int3   
 101d71d:	int3   
 101d71e:	int3   
 101d71f:	int3   
 101d720:	mov    rcx,QWORD PTR [rdx+0x58]
 101d727:	add    rcx,0x10
 101d72b:	jmp    0x1013a60
 101d730:	mov    rcx,QWORD PTR [rdx+0x58]
 101d737:	add    rcx,0x18
 101d73b:	jmp    0x1011e10
 101d740:	lea    rcx,[rdx+0x88]
 101d747:	jmp    0x1014c70
 101d74c:	int3   
 101d74d:	int3   
 101d74e:	int3   
 101d74f:	int3   
 101d750:	lea    rcx,[rdx+0x80]
 101d757:	jmp    0x1013a60
 101d75c:	int3   
 101d75d:	int3   
 101d75e:	int3   
 101d75f:	int3   
 101d760:	lea    rcx,[rdx+0x70]
 101d767:	jmp    0x1014cc0
 101d76c:	int3   
 101d76d:	int3   
 101d76e:	int3   
 101d76f:	int3   
 101d770:	int3   
 101d771:	int3   
 101d772:	int3   
 101d773:	int3   
 101d774:	int3   
 101d775:	int3   
 101d776:	int3   
 101d777:	int3   
 101d778:	int3   
 101d779:	int3   
 101d77a:	int3   
 101d77b:	int3   
 101d77c:	int3   
 101d77d:	int3   
 101d77e:	int3   
 101d77f:	int3   
 101d780:	lea    rcx,[rdx+0x70]
 101d787:	jmp    0x1014be0
 101d78c:	int3   
 101d78d:	int3   
 101d78e:	int3   
 101d78f:	int3   
 101d790:	mov    rcx,QWORD PTR [rdx+0x68]
 101d797:	add    rcx,0x8
 101d79b:	jmp    0x100ff40
 101d7a0:	mov    rcx,QWORD PTR [rdx+0x68]
 101d7a7:	jmp    0x100ff50
 101d7ac:	int3   
 101d7ad:	int3   
 101d7ae:	int3   
 101d7af:	int3   
 101d7b0:	mov    rcx,QWORD PTR [rdx+0x68]
 101d7b7:	add    rcx,0x10
 101d7bb:	jmp    0x1013a60
 101d7c0:	mov    rcx,QWORD PTR [rdx+0x68]
 101d7c7:	add    rcx,0x18
 101d7cb:	jmp    0x1011e10
 101d7d0:	lea    rcx,[rdx+0x68]
 101d7d7:	jmp    0x1014c70
 101d7dc:	int3   
 101d7dd:	int3   
 101d7de:	int3   
 101d7df:	int3   
 101d7e0:	int3   
 101d7e1:	int3   
 101d7e2:	int3   
 101d7e3:	int3   
 101d7e4:	int3   
 101d7e5:	int3   
 101d7e6:	int3   
 101d7e7:	int3   
 101d7e8:	int3   
 101d7e9:	int3   
 101d7ea:	int3   
 101d7eb:	int3   
 101d7ec:	int3   
 101d7ed:	int3   
 101d7ee:	int3   
 101d7ef:	int3   
 101d7f0:	lea    rcx,[rdx+0x28]
 101d7f7:	jmp    0x100fd80
 101d7fc:	int3   
 101d7fd:	int3   
 101d7fe:	int3   
 101d7ff:	int3   
 101d800:	lea    rcx,[rdx+0x88]
 101d807:	jmp    0x1011e10
 101d80c:	int3   
 101d80d:	int3   
 101d80e:	int3   
 101d80f:	int3   
 101d810:	lea    rcx,[rdx+0x30]
 101d817:	jmp    0x100fda0
 101d81c:	int3   
 101d81d:	int3   
 101d81e:	int3   
 101d81f:	int3   
 101d820:	lea    rcx,[rdx+0x48]
 101d827:	jmp    0x100fda0
 101d82c:	int3   
 101d82d:	int3   
 101d82e:	int3   
 101d82f:	int3   
 101d830:	int3   
 101d831:	int3   
 101d832:	int3   
 101d833:	int3   
 101d834:	int3   
 101d835:	int3   
 101d836:	int3   
 101d837:	int3   
 101d838:	int3   
 101d839:	int3   
 101d83a:	int3   
 101d83b:	int3   
 101d83c:	int3   
 101d83d:	int3   
 101d83e:	int3   
 101d83f:	int3   
 101d840:	lea    rcx,[rdx+0x50]
 101d847:	jmp    0x1014d50
 101d84c:	int3   
 101d84d:	int3   
 101d84e:	int3   
 101d84f:	int3   
 101d850:	int3   
 101d851:	int3   
 101d852:	int3   
 101d853:	int3   
 101d854:	int3   
 101d855:	int3   
 101d856:	int3   
 101d857:	int3   
 101d858:	int3   
 101d859:	int3   
 101d85a:	int3   
 101d85b:	int3   
 101d85c:	int3   
 101d85d:	int3   
 101d85e:	int3   
 101d85f:	int3   
 101d860:	lea    rcx,[rdx+0x20]
 101d867:	jmp    0x1014bc0
 101d86c:	int3   
 101d86d:	int3   
 101d86e:	int3   
 101d86f:	int3   
 101d870:	int3   
 101d871:	int3   
 101d872:	int3   
 101d873:	int3   
 101d874:	int3   
 101d875:	int3   
 101d876:	int3   
 101d877:	int3   
 101d878:	int3   
 101d879:	int3   
 101d87a:	int3   
 101d87b:	int3   
 101d87c:	int3   
 101d87d:	int3   
 101d87e:	int3   
 101d87f:	int3   
 101d880:	lea    rcx,[rdx+0x40]
 101d887:	jmp    0x100fd80
 101d88c:	int3   
 101d88d:	int3   
 101d88e:	int3   
 101d88f:	int3   
 101d890:	int3   
 101d891:	int3   
 101d892:	int3   
 101d893:	int3   
 101d894:	int3   
 101d895:	int3   
 101d896:	int3   
 101d897:	int3   
 101d898:	int3   
 101d899:	int3   
 101d89a:	int3   
 101d89b:	int3   
 101d89c:	int3   
 101d89d:	int3   
 101d89e:	int3   
 101d89f:	int3   
 101d8a0:	lea    rcx,[rdx+0x20]
 101d8a7:	jmp    0x1014bc0
 101d8ac:	int3   
 101d8ad:	int3   
 101d8ae:	int3   
 101d8af:	int3   
 101d8b0:	int3   
 101d8b1:	int3   
 101d8b2:	int3   
 101d8b3:	int3   
 101d8b4:	int3   
 101d8b5:	int3   
 101d8b6:	int3   
 101d8b7:	int3   
 101d8b8:	int3   
 101d8b9:	int3   
 101d8ba:	int3   
 101d8bb:	int3   
 101d8bc:	int3   
 101d8bd:	int3   
 101d8be:	int3   
 101d8bf:	int3   
 101d8c0:	lea    rcx,[rdx+0x40]
 101d8c7:	jmp    0x1014be0
 101d8cc:	int3   
 101d8cd:	int3   
 101d8ce:	int3   
 101d8cf:	int3   
 101d8d0:	int3   
 101d8d1:	int3   
 101d8d2:	int3   
 101d8d3:	int3   
 101d8d4:	int3   
 101d8d5:	int3   
 101d8d6:	int3   
 101d8d7:	int3   
 101d8d8:	int3   
 101d8d9:	int3   
 101d8da:	int3   
 101d8db:	int3   
 101d8dc:	int3   
 101d8dd:	int3   
 101d8de:	int3   
 101d8df:	int3   
 101d8e0:	lea    rcx,[rdx+0x60]
 101d8e7:	jmp    0x1014be0
 101d8ec:	int3   
 101d8ed:	int3   
 101d8ee:	int3   
 101d8ef:	int3   
 101d8f0:	int3   
 101d8f1:	int3   
 101d8f2:	int3   
 101d8f3:	int3   
 101d8f4:	int3   
 101d8f5:	int3   
 101d8f6:	int3   
 101d8f7:	int3   
 101d8f8:	int3   
 101d8f9:	int3   
 101d8fa:	int3   
 101d8fb:	int3   
 101d8fc:	int3   
 101d8fd:	int3   
 101d8fe:	int3   
 101d8ff:	int3   
 101d900:	lea    rcx,[rdx+0x68]
 101d907:	jmp    0x1015460
 101d90c:	int3   
 101d90d:	int3   
 101d90e:	int3   
 101d90f:	int3   
 101d910:	lea    rcx,[rdx+0x68]
 101d917:	jmp    0x1015470
 101d91c:	int3   
 101d91d:	int3   
 101d91e:	int3   
 101d91f:	int3   
 101d920:	lea    rcx,[rdx+0x58]
 101d927:	jmp    0x10154b0
 101d92c:	int3   
 101d92d:	int3   
 101d92e:	int3   
 101d92f:	int3   
 101d930:	lea    rcx,[rdx+0x58]
 101d937:	jmp    0x10154e0
 101d93c:	int3   
 101d93d:	int3   
 101d93e:	int3   
 101d93f:	int3   
 101d940:	lea    rcx,[rdx+0x48]
 101d947:	jmp    0x1011e10
 101d94c:	int3   
 101d94d:	int3   
 101d94e:	int3   
 101d94f:	int3   
 101d950:	lea    rcx,[rdx+0x70]
 101d957:	jmp    0x10166b0
 101d95c:	int3   
 101d95d:	int3   
 101d95e:	int3   
 101d95f:	int3   
 101d960:	lea    rcx,[rdx+0x50]
 101d967:	jmp    0x1013a60
 101d96c:	int3   
 101d96d:	int3   
 101d96e:	int3   
 101d96f:	int3   
 101d970:	lea    rcx,[rdx+0x60]
 101d977:	jmp    0x1011e10
 101d97c:	int3   
 101d97d:	int3   
 101d97e:	int3   
 101d97f:	int3   
 101d980:	lea    rcx,[rdx+0x58]
 101d987:	jmp    0x10154b0
 101d98c:	int3   
 101d98d:	int3   
 101d98e:	int3   
 101d98f:	int3   
 101d990:	lea    rcx,[rdx+0x68]
 101d997:	jmp    0x1015460
 101d99c:	int3   
 101d99d:	int3   
 101d99e:	int3   
 101d99f:	int3   
 101d9a0:	int3   
 101d9a1:	int3   
 101d9a2:	int3   
 101d9a3:	int3   
 101d9a4:	int3   
 101d9a5:	int3   
 101d9a6:	int3   
 101d9a7:	int3   
 101d9a8:	int3   
 101d9a9:	int3   
 101d9aa:	int3   
 101d9ab:	int3   
 101d9ac:	int3   
 101d9ad:	int3   
 101d9ae:	int3   
 101d9af:	int3   
 101d9b0:	lea    rcx,[rdx+0x30]
 101d9b7:	jmp    0x10166b0
 101d9bc:	int3   
 101d9bd:	int3   
 101d9be:	int3   
 101d9bf:	int3   
 101d9c0:	lea    rcx,[rdx+0x38]
 101d9c7:	jmp    0x10166b0
 101d9cc:	int3   
 101d9cd:	int3   
 101d9ce:	int3   
 101d9cf:	int3   
 101d9d0:	lea    rcx,[rdx+0x50]
 101d9d7:	add    rcx,0x10
 101d9db:	jmp    0x10166b0
 101d9e0:	lea    rcx,[rdx+0x50]
 101d9e7:	jmp    0x1015300
 101d9ec:	int3   
 101d9ed:	int3   
 101d9ee:	int3   
 101d9ef:	int3   
 101d9f0:	lea    rcx,[rdx+0x50]
 101d9f7:	add    rcx,0x10
 101d9fb:	jmp    0x10166b0
 101da00:	int3   
 101da01:	int3   
 101da02:	int3   
 101da03:	int3   
 101da04:	int3   
 101da05:	int3   
 101da06:	int3   
 101da07:	int3   
 101da08:	int3   
 101da09:	int3   
 101da0a:	int3   
 101da0b:	int3   
 101da0c:	int3   
 101da0d:	int3   
 101da0e:	int3   
 101da0f:	int3   
 101da10:	lea    rcx,[rdx+0x40]
 101da17:	add    rcx,0x10
 101da1b:	jmp    0x10166b0
 101da20:	lea    rcx,[rdx+0x40]
 101da27:	jmp    0x1015300
 101da2c:	int3   
 101da2d:	int3   
 101da2e:	int3   
 101da2f:	int3   
 101da30:	lea    rcx,[rdx+0x40]
 101da37:	jmp    0x1015430
 101da3c:	int3   
 101da3d:	int3   
 101da3e:	int3   
 101da3f:	int3   
 101da40:	lea    rcx,[rdx+0x40]
 101da47:	jmp    0x1015300
 101da4c:	int3   
 101da4d:	int3   
 101da4e:	int3   
 101da4f:	int3   
 101da50:	lea    rcx,[rdx+0x40]
 101da57:	add    rcx,0x10
 101da5b:	jmp    0x10166b0
 101da60:	lea    rcx,[rdx+0x60]
 101da67:	jmp    0x1016730
 101da6c:	int3   
 101da6d:	int3   
 101da6e:	int3   
 101da6f:	int3   
 101da70:	lea    rcx,[rdx+0x40]
 101da77:	add    rcx,0x10
 101da7b:	jmp    0x10166b0
 101da80:	lea    rcx,[rdx+0x40]
 101da87:	jmp    0x1015300
 101da8c:	int3   
 101da8d:	int3   
 101da8e:	int3   
 101da8f:	int3   
 101da90:	lea    rcx,[rdx+0x40]
 101da97:	add    rcx,0x10
 101da9b:	jmp    0x10166b0
 101daa0:	int3   
 101daa1:	int3   
 101daa2:	int3   
 101daa3:	int3   
 101daa4:	int3   
 101daa5:	int3   
 101daa6:	int3   
 101daa7:	int3   
 101daa8:	int3   
 101daa9:	int3   
 101daaa:	int3   
 101daab:	int3   
 101daac:	int3   
 101daad:	int3   
 101daae:	int3   
 101daaf:	int3   
 101dab0:	lea    rcx,[rdx+0x28]
 101dab7:	jmp    0x100fda0
 101dabc:	int3   
 101dabd:	int3   
 101dabe:	int3   
 101dabf:	int3   
 101dac0:	int3   
 101dac1:	int3   
 101dac2:	int3   
 101dac3:	int3   
 101dac4:	int3   
 101dac5:	int3   
 101dac6:	int3   
 101dac7:	int3   
 101dac8:	int3   
 101dac9:	int3   
 101daca:	int3   
 101dacb:	int3   
 101dacc:	int3   
 101dacd:	int3   
 101dace:	int3   
 101dacf:	int3   
 101dad0:	mov    rcx,QWORD PTR [rdx+0x20]
 101dad7:	add    rcx,0x8
 101dadb:	jmp    0x100fe00
 101dae0:	mov    rcx,QWORD PTR [rdx+0x28]
 101dae7:	jmp    0x100fe10
 101daec:	int3   
 101daed:	int3   
 101daee:	int3   
 101daef:	int3   
 101daf0:	mov    rcx,QWORD PTR [rdx+0x20]
 101daf7:	add    rcx,0x28
 101dafb:	jmp    0x100fe60
 101db00:	int3   
 101db01:	int3   
 101db02:	int3   
 101db03:	int3   
 101db04:	int3   
 101db05:	int3   
 101db06:	int3   
 101db07:	int3   
 101db08:	int3   
 101db09:	int3   
 101db0a:	int3   
 101db0b:	int3   
 101db0c:	int3   
 101db0d:	int3   
 101db0e:	int3   
 101db0f:	int3   
 101db10:	mov    rcx,QWORD PTR [rdx+0x40]
 101db17:	add    rcx,0x8
 101db1b:	jmp    0x100fdc0
 101db20:	mov    rcx,QWORD PTR [rdx+0x40]
 101db27:	jmp    0x100fdb0
 101db2c:	int3   
 101db2d:	int3   
 101db2e:	int3   
 101db2f:	int3   
 101db30:	int3   
 101db31:	int3   
 101db32:	int3   
 101db33:	int3   
 101db34:	int3   
 101db35:	int3   
 101db36:	int3   
 101db37:	int3   
 101db38:	int3   
 101db39:	int3   
 101db3a:	int3   
 101db3b:	int3   
 101db3c:	int3   
 101db3d:	int3   
 101db3e:	int3   
 101db3f:	int3   
 101db40:	mov    rcx,QWORD PTR [rdx+0x20]
 101db47:	jmp    0x1013810
 101db4c:	int3   
 101db4d:	int3   
 101db4e:	int3   
 101db4f:	int3   
 101db50:	int3   
 101db51:	int3   
 101db52:	int3   
 101db53:	int3   
 101db54:	int3   
 101db55:	int3   
 101db56:	int3   
 101db57:	int3   
 101db58:	int3   
 101db59:	int3   
 101db5a:	int3   
 101db5b:	int3   
 101db5c:	int3   
 101db5d:	int3   
 101db5e:	int3   
 101db5f:	int3   
 101db60:	lea    rcx,[rdx+0x60]
 101db67:	jmp    0x10166b0
 101db6c:	int3   
 101db6d:	int3   
 101db6e:	int3   
 101db6f:	int3   
 101db70:	int3   
 101db71:	int3   
 101db72:	rex push rbp
 101db74:	sub    rsp,0x20
 101db78:	mov    rbp,rdx
 101db7b:	mov    QWORD PTR [rbp+0x38],rcx
 101db7f:	mov    QWORD PTR [rbp+0x28],rcx
 101db83:	mov    rax,QWORD PTR [rbp+0x28]
 101db87:	mov    rcx,QWORD PTR [rax]
 101db8a:	mov    QWORD PTR [rbp+0x30],rcx
 101db8e:	mov    rax,QWORD PTR [rbp+0x30]
 101db92:	cmp    DWORD PTR [rax],0xe06d7363
 101db98:	je     0x101dba6
 101db9a:	mov    DWORD PTR [rbp+0x20],0x0
 101dba1:	mov    eax,DWORD PTR [rbp+0x20]
 101dba4:	jmp    0x101dbac
 101dba6:	call   0x100c412
 101dbab:	nop
 101dbac:	add    rsp,0x20
 101dbb0:	pop    rbp
 101dbb1:	ret    
 101dbb2:	int3   
 101dbb3:	int3   
 101dbb4:	int3   
 101dbb5:	int3   
 101dbb6:	int3   
 101dbb7:	int3   
 101dbb8:	int3   
 101dbb9:	rex push rbp
 101dbbb:	sub    rsp,0x20
 101dbbf:	mov    rbp,rdx
 101dbc2:	cmp    DWORD PTR [rbp+0x20],0x0
 101dbc6:	jne    0x101dbde
 101dbc8:	mov    r9,QWORD PTR [rbp+0x78]
 101dbcc:	mov    r8d,DWORD PTR [rbp+0x70]
 101dbd0:	mov    rdx,QWORD PTR [rbp+0x68]
 101dbd4:	mov    rcx,QWORD PTR [rbp+0x60]
 101dbd8:	call   0x10175bc
 101dbdd:	nop
 101dbde:	add    rsp,0x20
 101dbe2:	pop    rbp
 101dbe3:	ret    
 101dbe4:	int3   
 101dbe5:	int3   
 101dbe6:	int3   
 101dbe7:	int3   
 101dbe8:	int3   
 101dbe9:	int3   
 101dbea:	int3   
 101dbeb:	rex push rbp
 101dbed:	sub    rsp,0x20
 101dbf1:	mov    rbp,rdx
 101dbf4:	cmp    DWORD PTR [rbp+0x20],0x0
 101dbf8:	jne    0x101dc10
 101dbfa:	mov    r9,QWORD PTR [rbp+0x70]
 101dbfe:	mov    r8d,DWORD PTR [rbp+0x24]
 101dc02:	mov    rdx,QWORD PTR [rbp+0x58]
 101dc06:	mov    rcx,QWORD PTR [rbp+0x50]
 101dc0a:	call   0x10175bc
 101dc0f:	nop
 101dc10:	add    rsp,0x20
 101dc14:	pop    rbp
 101dc15:	ret    
 101dc16:	int3   
 101dc17:	int3   
 101dc18:	int3   
 101dc19:	int3   
 101dc1a:	int3   
 101dc1b:	int3   
 101dc1c:	int3   
 101dc1d:	int3   
 101dc1e:	int3   
 101dc1f:	int3   
 101dc20:	int3   
 101dc21:	int3   
 101dc22:	int3   
 101dc23:	int3   
 101dc24:	int3   
 101dc25:	int3   
 101dc26:	int3   
 101dc27:	int3   
 101dc28:	int3   
 101dc29:	int3   
 101dc2a:	int3   
 101dc2b:	int3   
 101dc2c:	int3   
 101dc2d:	int3   
 101dc2e:	int3   
 101dc2f:	int3   
 101dc30:	lea    rcx,[rip+0x2d9]        # 0x101df10
 101dc37:	jmp    0x100bda8
 101dc3c:	int3   
 101dc3d:	int3   
 101dc3e:	int3   
 101dc3f:	int3   
 101dc40:	int3   
 101dc41:	int3   
 101dc42:	int3   
 101dc43:	int3   
 101dc44:	int3   
 101dc45:	int3   
 101dc46:	int3   
 101dc47:	int3   
 101dc48:	int3   
 101dc49:	int3   
 101dc4a:	int3   
 101dc4b:	int3   
 101dc4c:	int3   
 101dc4d:	int3   
 101dc4e:	int3   
 101dc4f:	int3   
 101dc50:	rex push rbx
 101dc52:	sub    rsp,0x20
 101dc56:	xor    eax,eax
 101dc58:	lea    rbx,[rip+0x7701]        # 0x1025360
 101dc5f:	lea    rcx,[rip+0x7712]        # 0x1025378
 101dc66:	xor    edx,edx
 101dc68:	mov    QWORD PTR [rip+0x7629],rbx        # 0x1025298
 101dc6f:	mov    QWORD PTR [rip+0x7702],rax        # 0x1025378
 101dc76:	mov    QWORD PTR [rip+0x7703],rax        # 0x1025380
 101dc7d:	mov    QWORD PTR [rip+0x7704],rax        # 0x1025388
 101dc84:	mov    QWORD PTR [rip+0x7705],rax        # 0x1025390
 101dc8b:	mov    QWORD PTR [rip+0x7706],rax        # 0x1025398
 101dc92:	mov    QWORD PTR [rip+0x76cf],rax        # 0x1025368
 101dc99:	mov    QWORD PTR [rip+0x76d0],rax        # 0x1025370
 101dca0:	mov    QWORD PTR [rip+0x76f9],rax        # 0x10253a0
 101dca7:	call   QWORD PTR [rip+0xfffffffffffe35a3]        # 0x1001250
 101dcad:	test   eax,eax
 101dcaf:	jne    0x101dcd0
 101dcb1:	call   QWORD PTR [rip+0xfffffffffffe35b9]        # 0x1001270
 101dcb7:	test   eax,eax
 101dcb9:	jle    0x101dcc5
 101dcbb:	movzx  eax,ax
 101dcbe:	or     eax,0x80070000
 101dcc3:	test   eax,eax
 101dcc5:	jns    0x101dcd0
 101dcc7:	mov    BYTE PTR [rip+0x75c2],0x1        # 0x1025290
 101dcce:	jmp    0x101dcda
 101dcd0:	mov    DWORD PTR [rip+0x768e],0x38        # 0x1025368
 101dcda:	lea    rax,[rip+0xfffffffffffe3f0f]        # 0x1001bf0
 101dce1:	lea    rcx,[rip+0x278]        # 0x101df60
 101dce8:	mov    QWORD PTR [rip+0x75d1],rbx        # 0x10252c0
 101dcef:	mov    QWORD PTR [rip+0x766a],rax        # 0x1025360
 101dcf6:	add    rsp,0x20
 101dcfa:	pop    rbx
 101dcfb:	jmp    0x100bda8
 101dd00:	int3   
 101dd01:	int3   
 101dd02:	int3   
 101dd03:	int3   
 101dd04:	int3   
 101dd05:	int3   
 101dd06:	int3   
 101dd07:	int3   
 101dd08:	int3   
 101dd09:	int3   
 101dd0a:	int3   
 101dd0b:	int3   
 101dd0c:	int3   
 101dd0d:	int3   
 101dd0e:	int3   
 101dd0f:	int3   
 101dd10:	xor    eax,eax
 101dd12:	mov    QWORD PTR [rip+0x680f],rax        # 0x1024528
 101dd19:	mov    QWORD PTR [rip+0x6810],rax        # 0x1024530
 101dd20:	mov    QWORD PTR [rip+0x6811],rax        # 0x1024538
 101dd27:	mov    QWORD PTR [rip+0x6812],rax        # 0x1024540
 101dd2e:	ret    
 101dd2f:	int3   
 101dd30:	int3   
 101dd31:	int3   
 101dd32:	int3   
 101dd33:	int3   
 101dd34:	int3   
 101dd35:	int3   
 101dd36:	int3   
 101dd37:	int3   
 101dd38:	int3   
 101dd39:	int3   
 101dd3a:	int3   
 101dd3b:	int3   
 101dd3c:	int3   
 101dd3d:	int3   
 101dd3e:	int3   
 101dd3f:	int3   
 101dd40:	mov    rax,QWORD PTR [rip+0x6641]        # 0x1024388
 101dd47:	mov    QWORD PTR [rip+0x78d2],rax        # 0x1025620
 101dd4e:	mov    rax,QWORD PTR [rip+0x663b]        # 0x1024390
 101dd55:	mov    QWORD PTR [rip+0x78cc],rax        # 0x1025628
 101dd5c:	mov    rax,QWORD PTR [rip+0x6635]        # 0x1024398
 101dd63:	mov    QWORD PTR [rip+0x78c6],rax        # 0x1025630
 101dd6a:	mov    rax,QWORD PTR [rip+0x6a17]        # 0x1024788
 101dd71:	mov    QWORD PTR [rip+0x78c0],rax        # 0x1025638
 101dd78:	mov    rax,QWORD PTR [rip+0x6a11]        # 0x1024790
 101dd7f:	mov    QWORD PTR [rip+0x78ba],rax        # 0x1025640
 101dd86:	mov    rax,QWORD PTR [rip+0x6a0b]        # 0x1024798
 101dd8d:	mov    QWORD PTR [rip+0x78b4],rax        # 0x1025648
 101dd94:	ret    
 101dd95:	int3   
 101dd96:	int3   
 101dd97:	int3   
 101dd98:	int3   
 101dd99:	int3   
 101dd9a:	int3   
 101dd9b:	int3   
 101dd9c:	rex push rbp
 101dd9e:	mov    rbp,rsp
 101dda1:	sub    rsp,0x20
 101dda5:	lea    rcx,[rip+0x7e54]        # 0x1025c00
 101ddac:	call   0x100c468
 101ddb1:	lea    rcx,[rip+0x240]        # 0x101dff8
 101ddb8:	add    rsp,0x20
 101ddbc:	pop    rbp
 101ddbd:	jmp    0x100bda8
 101ddc2:	int3   
 101ddc3:	int3   
 101ddc4:	int3   
 101ddc5:	int3   
 101ddc6:	int3   
 101ddc7:	int3   
 101ddc8:	rex push rbp
 101ddca:	mov    rbp,rsp
 101ddcd:	sub    rsp,0x20
 101ddd1:	lea    rcx,[rip+0x7e88]        # 0x1025c60
 101ddd8:	call   0x100c58c
 101dddd:	lea    rcx,[rip+0x234]        # 0x101e018
 101dde4:	add    rsp,0x20
 101dde8:	pop    rbp
 101dde9:	jmp    0x100bda8
 101ddee:	int3   
 101ddef:	int3   
 101ddf0:	int3   
 101ddf1:	int3   
 101ddf2:	int3   
 101ddf3:	int3   
 101ddf4:	int3   
 101ddf5:	int3   
 101ddf6:	int3   
 101ddf7:	int3   
 101ddf8:	int3   
 101ddf9:	int3   
 101ddfa:	int3   
 101ddfb:	int3   
 101ddfc:	int3   
 101ddfd:	int3   
 101ddfe:	int3   
 101ddff:	int3   
 101de00:	sub    rsp,0x28
 101de04:	lea    rcx,[rip+0x7ea5]        # 0x1025cb0
 101de0b:	call   0x100c690
 101de10:	lea    rcx,[rip+0x229]        # 0x101e040
 101de17:	add    rsp,0x28
 101de1b:	jmp    0x100bda8
 101de20:	int3   
 101de21:	int3   
 101de22:	int3   
 101de23:	int3   
 101de24:	int3   
 101de25:	int3   
 101de26:	int3   
 101de27:	int3   
 101de28:	int3   
 101de29:	int3   
 101de2a:	int3   
 101de2b:	int3   
 101de2c:	int3   
 101de2d:	int3   
 101de2e:	int3   
 101de2f:	int3   
 101de30:	xor    eax,eax
 101de32:	mov    QWORD PTR [rip+0x732f],rax        # 0x1025168
 101de39:	mov    QWORD PTR [rip+0x7330],rax        # 0x1025170
 101de40:	mov    QWORD PTR [rip+0x7331],rax        # 0x1025178
 101de47:	mov    QWORD PTR [rip+0x7332],rax        # 0x1025180
 101de4e:	ret    
 101de4f:	int3   
 101de50:	int3   
 101de51:	int3   
 101de52:	int3   
 101de53:	int3   
 101de54:	int3   
 101de55:	int3   
 101de56:	int3   
 101de57:	int3   
 101de58:	int3   
 101de59:	int3   
 101de5a:	int3   
 101de5b:	int3   
 101de5c:	int3   
 101de5d:	int3   
 101de5e:	int3   
 101de5f:	int3   
 101de60:	mov    eax,DWORD PTR [rip+0x7352]        # 0x10251b8
 101de66:	mov    DWORD PTR [rip+0xe90c],eax        # 0x102c778
 101de6c:	movzx  eax,WORD PTR [rip+0x7349]        # 0x10251bc
 101de73:	mov    WORD PTR [rip+0xe902],ax        # 0x102c77c
 101de7a:	ret    
 101de7b:	int3   
 101de7c:	int3   
 101de7d:	int3   
 101de7e:	int3   
 101de7f:	int3   
 101de80:	int3   
 101de81:	int3   
 101de82:	int3   
 101de83:	int3   
 101de84:	int3   
 101de85:	int3   
 101de86:	int3   
 101de87:	int3   
 101de88:	int3   
 101de89:	int3   
 101de8a:	int3   
 101de8b:	int3   
 101de8c:	int3   
 101de8d:	int3   
 101de8e:	int3   
 101de8f:	int3   
 101de90:	mov    rax,QWORD PTR [rip+0x7319]        # 0x10251b0
 101de97:	mov    QWORD PTR [rip+0xe8e2],rax        # 0x102c780
 101de9e:	ret    
 101de9f:	int3   
 101dea0:	int3   
 101dea1:	int3   
 101dea2:	int3   
 101dea3:	int3   
 101dea4:	int3   
 101dea5:	int3   
 101dea6:	int3   
 101dea7:	int3   
 101dea8:	int3   
 101dea9:	int3   
 101deaa:	int3   
 101deab:	int3   
 101deac:	int3   
 101dead:	int3   
 101deae:	int3   
 101deaf:	int3   
 101deb0:	and    DWORD PTR [rip+0xe8de],0x80000000        # 0x102c798
 101deba:	xor    eax,eax
 101debc:	mov    QWORD PTR [rip+0xe8c5],rax        # 0x102c788
 101dec3:	movabs rax,0x8000000000000000
 101decd:	and    QWORD PTR [rip+0xe8bc],rax        # 0x102c790
 101ded4:	ret    
 101ded5:	int3   
 101ded6:	int3   
 101ded7:	int3   
 101ded8:	int3   
 101ded9:	int3   
 101deda:	int3   
 101dedb:	int3   
 101dedc:	int3   
 101dedd:	int3   
 101dede:	int3   
 101dedf:	int3   
 101dee0:	sub    rsp,0x28
 101dee4:	call   0x1018ac0
 101dee9:	mov    DWORD PTR [rip+0xe8e5],eax        # 0x102c7d4
 101deef:	add    rsp,0x28
 101def3:	ret    
 101def4:	int3   
 101def5:	int3   
 101def6:	int3   
 101def7:	int3   
 101def8:	int3   
 101def9:	int3   
 101defa:	int3   
 101defb:	int3   
 101defc:	int3   
 101defd:	int3   
 101defe:	int3   
 101deff:	int3   
 101df00:	int3   
 101df01:	int3   
 101df02:	int3   
 101df03:	int3   
 101df04:	int3   
 101df05:	int3   
 101df06:	int3   
 101df07:	int3   
 101df08:	int3   
 101df09:	int3   
 101df0a:	int3   
 101df0b:	int3   
 101df0c:	int3   
 101df0d:	int3   
 101df0e:	int3   
 101df0f:	int3   
 101df10:	sub    rsp,0x28
 101df14:	mov    rcx,QWORD PTR [rip+0x73c5]        # 0x10252e0
 101df1b:	call   0x100bccc
 101df20:	mov    rcx,QWORD PTR [rip+0x73c1]        # 0x10252e8
 101df27:	call   QWORD PTR [rip+0xfffffffffffe3503]        # 0x1001430
 101df2d:	mov    rcx,QWORD PTR [rip+0x73bc]        # 0x10252f0
 101df34:	call   QWORD PTR [rip+0xfffffffffffe34f6]        # 0x1001430
 101df3a:	mov    rcx,QWORD PTR [rip+0x73b7]        # 0x10252f8
 101df41:	call   QWORD PTR [rip+0xfffffffffffe34e9]        # 0x1001430
 101df47:	mov    rcx,QWORD PTR [rip+0x73b2]        # 0x1025300
 101df4e:	add    rsp,0x28
 101df52:	rex.W jmp QWORD PTR [rip+0xfffffffffffe34d7]        # 0x1001430
 101df59:	int3   
 101df5a:	int3   
 101df5b:	int3   
 101df5c:	int3   
 101df5d:	int3   
 101df5e:	int3   
 101df5f:	int3   
 101df60:	sub    rsp,0x28
 101df64:	cmp    DWORD PTR [rip+0x73fd],0x0        # 0x1025368
 101df6b:	lea    rax,[rip+0xfffffffffffe3c1e]        # 0x1001b90
 101df72:	mov    QWORD PTR [rip+0x73e7],rax        # 0x1025360
 101df79:	je     0x101dfc6
 101df7b:	cmp    QWORD PTR [rip+0x73ed],0x0        # 0x1025370
 101df83:	je     0x101df9d
 101df85:	lea    rcx,[rip+0x73dc]        # 0x1025368
 101df8c:	call   QWORD PTR [rip+0xfffffffffffe30ae]        # 0x1001040
 101df92:	mov    QWORD PTR [rip+0x73d3],0x0        # 0x1025370
 101df9d:	mov    rcx,QWORD PTR [rip+0x73fc]        # 0x10253a0
 101dfa4:	test   rcx,rcx
 101dfa7:	je     0x101dfaf
 101dfa9:	mov    rax,QWORD PTR [rcx]
 101dfac:	call   QWORD PTR [rax+0x10]
 101dfaf:	lea    rcx,[rip+0x73c2]        # 0x1025378
 101dfb6:	call   QWORD PTR [rip+0xfffffffffffe328c]        # 0x1001248
 101dfbc:	mov    DWORD PTR [rip+0x73a2],0x0        # 0x1025368
 101dfc6:	add    rsp,0x28
 101dfca:	ret    
 101dfcb:	int3   
 101dfcc:	int3   
 101dfcd:	int3   
 101dfce:	int3   
 101dfcf:	int3   
 101dfd0:	int3   
 101dfd1:	int3   
 101dfd2:	int3   
 101dfd3:	int3   
 101dfd4:	int3   
 101dfd5:	int3   
 101dfd6:	int3   
 101dfd7:	int3   
 101dfd8:	int3   
 101dfd9:	int3   
 101dfda:	int3   
 101dfdb:	int3   
 101dfdc:	int3   
 101dfdd:	int3   
 101dfde:	int3   
 101dfdf:	int3   
 101dfe0:	lea    rax,[rip+0xfffffffffffe3eb9]        # 0x1001ea0
 101dfe7:	mov    QWORD PTR [rip+0x73e2],rax        # 0x10253d0
 101dfee:	ret    
 101dfef:	int3   
 101dff0:	int3   
 101dff1:	int3   
 101dff2:	int3   
 101dff3:	int3   
 101dff4:	int3   
 101dff5:	int3   
 101dff6:	int3   
 101dff7:	int3   
 101dff8:	rex push rbp
 101dffa:	mov    rbp,rsp
 101dffd:	sub    rsp,0x20
 101e001:	lea    rcx,[rip+0x7bf8]        # 0x1025c00
 101e008:	add    rsp,0x20
 101e00c:	pop    rbp
 101e00d:	jmp    0x100c420
 101e012:	int3   
 101e013:	int3   
 101e014:	int3   
 101e015:	int3   
 101e016:	int3   
 101e017:	int3   
 101e018:	rex push rbp
 101e01a:	mov    rbp,rsp
 101e01d:	sub    rsp,0x20
 101e021:	lea    rcx,[rip+0x7c38]        # 0x1025c60
 101e028:	add    rsp,0x20
 101e02c:	pop    rbp
 101e02d:	jmp    0x100c514
 101e032:	int3   
 101e033:	int3   
 101e034:	int3   
 101e035:	int3   
 101e036:	int3   
 101e037:	int3   
 101e038:	int3   
 101e039:	int3   
 101e03a:	int3   
 101e03b:	int3   
 101e03c:	int3   
 101e03d:	int3   
 101e03e:	int3   
 101e03f:	int3   
 101e040:	lea    rcx,[rip+0x7c69]        # 0x1025cb0
 101e047:	jmp    0x100c7e0
 101e04c:	int3   
 101e04d:	int3   
 101e04e:	int3   
 101e04f:	int3   
 101e050:	int3   
 101e051:	int3   
 101e052:	int3   
 101e053:	int3   
 101e054:	int3   
 101e055:	int3   
 101e056:	int3   
 101e057:	int3   
 101e058:	int3   
 101e059:	int3   
 101e05a:	int3   
 101e05b:	int3   
 101e05c:	int3   
 101e05d:	int3   
 101e05e:	int3   
 101e05f:	int3   
 101e060:	lea    rax,[rip+0xfffffffffffe3e39]        # 0x1001ea0
 101e067:	mov    QWORD PTR [rip+0x80f2],rax        # 0x1026160
 101e06e:	ret    
 101e06f:	int3   
 101e070:	sbb    DWORD PTR [rip+0x340f2505],ebx        # 0x3511057b
 101e076:	or     BYTE PTR [rax],al
 101e078:	or     esp,DWORD PTR [rbx]
 101e07a:	(bad)  
 101e07b:	push   rdx
 101e07c:	add    dl,BYTE PTR [rax+0x0]
 101e07f:	add    ah,cl
 101e081:	mov    edi,0x10000
 101e086:	add    BYTE PTR [rax],al
 101e088:	mov    edi,0x74
 101e08d:	jne    0x101e08f
 101e08f:	add    al,al
 101e091:	(bad)
 101e095:	jne    0x101e097
 101e097:	add    BYTE PTR [rcx],ch
 101e099:	add    BYTE PTR [rax],al
 101e09b:	add    BYTE PTR [rcx],al
 101e09d:	(bad)  
 101e09e:	add    al,BYTE PTR [rax]
 101e0a0:	(bad)  
 101e0a1:	xor    al,BYTE PTR [rdx]
 101e0a3:	push   rax
 101e0a4:	add    DWORD PTR [rcx+rax*1],eax
 101e0a7:	add    BYTE PTR [rdx+rax*2],al
 101e0aa:	add    BYTE PTR [rax],al
 101e0ac:	add    DWORD PTR [rdx+rcx*1+0x0],eax
 101e0b0:	rex.R je 0x101e0ba
 101e0b3:	add    BYTE PTR [rcx],bh
 101e0b5:	xor    al,0x6
 101e0b7:	add    BYTE PTR [rax],dl
 101e0b9:	or     DWORD PTR fs:[rax],eax
 101e0bc:	adc    BYTE PTR [rax+rcx*1+0x0],dl
 101e0c0:	adc    BYTE PTR [rdx],dh
 101e0c2:	or     al,0xe0
 101e0c4:	add    DWORD PTR [rdx+rcx*1+0x0],eax
 101e0c8:	rex.R je 0x101e0d2
 101e0cb:	add    BYTE PTR [rcx],bh
 101e0cd:	xor    al,0x6
 101e0cf:	add    BYTE PTR [rax],dl
 101e0d1:	or     DWORD PTR fs:[rax],eax
 101e0d4:	adc    BYTE PTR [rax+rcx*1+0x0],dl
 101e0d8:	adc    BYTE PTR [rdx],dh
 101e0da:	or     al,0xe0
 101e0dc:	sbb    DWORD PTR [rax*1+0x4e011300],esp
 101e0e3:	add    BYTE PTR [rax+riz*2],al
 101e0e6:	add    esi,DWORD PTR [rax]
 101e0e8:	add    dl,BYTE PTR [rax+0x0]
 101e0eb:	add    BYTE PTR [rax+0x600000bf],ch
 101e0f1:	add    al,BYTE PTR [rax]
 101e0f3:	add    BYTE PTR [rcx],ah
 101e0f5:	or     BYTE PTR [rdx],al
 101e0f7:	add    BYTE PTR [rax],cl
 101e0f9:	je     0x101e14f
 101e0fb:	add    BYTE PTR [rax+0x77],al
 101e0fe:	add    BYTE PTR [rax],al
 101e100:	(bad)  
 101e101:	js     0x101e103
 101e103:	add    ah,bl
 101e105:	loopne 0x101e108
 101e107:	add    BYTE PTR [rcx],ah
 101e109:	add    BYTE PTR [rax],al
 101e10b:	add    BYTE PTR [rax+0x77],al
 101e10e:	add    BYTE PTR [rax],al
 101e110:	(bad)  
 101e111:	js     0x101e113
 101e113:	add    ah,bl
 101e115:	loopne 0x101e118
 101e117:	add    BYTE PTR [rcx],al
 101e119:	(bad)  
 101e11a:	add    al,BYTE PTR [rax]
 101e11c:	(bad)  
 101e11d:	jb     0x101e121
 101e11f:	xor    BYTE PTR [rcx],al
 101e121:	sbb    cl,BYTE PTR [rdx]
 101e123:	add    BYTE PTR [rdx],bl
 101e125:	je     0x101e134
 101e127:	add    BYTE PTR [rdx],bl
 101e129:	fs or  al,0x0
 101e12c:	sbb    dl,BYTE PTR [rbx+rcx*1+0x0]
 101e130:	sbb    dh,BYTE PTR [rdx+rcx*1]
 101e133:	add    BYTE PTR [rdx],bl
 101e135:	jb     0x101e14d
 101e137:	loopne 0x101e13a
 101e139:	(bad)  
 101e13a:	add    al,BYTE PTR [rax]
 101e13c:	(bad)  
 101e13d:	xor    al,BYTE PTR [rdx]
 101e13f:	xor    BYTE PTR [rcx],al
 101e141:	clts   
 101e143:	add    BYTE PTR [rdi],cl
 101e145:	fs (bad) 
 101e147:	add    BYTE PTR [rdi],cl
 101e149:	xor    al,0x6
 101e14b:	add    BYTE PTR [rdi],cl
 101e14d:	xor    cl,BYTE PTR [rbx]
 101e14f:	jo     0x101e152
 101e151:	adc    cl,BYTE PTR [rax]
 101e153:	add    BYTE PTR [rdx],dl
 101e155:	push   rsp
 101e156:	or     al,0x0
 101e158:	adc    dh,BYTE PTR [rbx+rcx*1]
 101e15b:	add    BYTE PTR [rdx],dl
 101e15d:	push   rdx
 101e15e:	(bad)  
 101e15f:	loopne 0x101e16d
 101e161:	jo     0x101e16e
 101e163:	(bad)  
 101e164:	add    DWORD PTR [rdi],ecx
 101e166:	(bad)  
 101e167:	add    BYTE PTR [rdi],cl
 101e169:	fs (bad) 
 101e16b:	add    BYTE PTR [rdi],cl
 101e16d:	xor    al,0x6
 101e16f:	add    BYTE PTR [rdi],cl
 101e171:	xor    cl,BYTE PTR [rbx]
 101e173:	jo     0x101e176
 101e175:	add    al,0x1
 101e177:	add    BYTE PTR [rdx+rax*2],al
 101e17a:	add    BYTE PTR [rax],al
 101e17c:	add    DWORD PTR [rsi],eax
 101e17e:	add    al,BYTE PTR [rax]
 101e180:	(bad)  
 101e181:	xor    al,BYTE PTR [rdx]
 101e183:	xor    BYTE PTR [rcx],bl
 101e185:	and    eax,0x1140005
 101e18a:	push   rdx
 101e18b:	add    BYTE PTR [rip+0x23003e0],al        # 0x331e571
 101e191:	push   rax
 101e192:	add    BYTE PTR [rax],al
 101e194:	test   al,0xbf
 101e196:	add    BYTE PTR [rax],al
 101e198:	jo     0x101e19c
 101e19a:	add    BYTE PTR [rax],al
 101e19c:	and    DWORD PTR [rax],ecx
 101e19e:	add    al,BYTE PTR [rax]
 101e1a0:	or     BYTE PTR [rax+rbx*2+0x0],ah
 101e1a4:	push   rax
 101e1a5:	jg     0x101e1a7
 101e1a7:	add    BYTE PTR [rax-0x7bffff81],dl
 101e1ad:	loope  0x101e1b0
 101e1af:	add    BYTE PTR [rcx],ah
 101e1b1:	adc    BYTE PTR [rax+rax*1],al
 101e1b4:	adc    ah,dh
 101e1b6:	push   rax
 101e1b7:	add    BYTE PTR [rax],cl
 101e1b9:	je     0x101e20c
 101e1bb:	add    BYTE PTR [rax-0x67ffff81],dl
 101e1c1:	jg     0x101e1c3
 101e1c3:	add    BYTE PTR [rcx+riz*8+0x210001],bl
 101e1ca:	add    al,BYTE PTR [rax]
 101e1cc:	add    ah,dh
 101e1ce:	push   rax
 101e1cf:	add    BYTE PTR [rax-0x67ffff81],dl
 101e1d5:	jg     0x101e1d7
 101e1d7:	add    BYTE PTR [rcx+riz*8+0x210001],bl
 101e1de:	add    BYTE PTR [rax],al
 101e1e0:	push   rax
 101e1e1:	jg     0x101e1e3
 101e1e3:	add    BYTE PTR [rax-0x7bffff81],dl
 101e1e9:	loope  0x101e1ec
 101e1eb:	add    BYTE PTR [rcx],al
 101e1ed:	(bad)  
 101e1ee:	add    al,BYTE PTR [rax]
 101e1f0:	(bad)  
 101e1f1:	xor    cl,BYTE PTR [rdx]
 101e1f3:	(bad)  
 101e1f4:	and    DWORD PTR [rsi],edx
 101e1f6:	(bad)  
 101e1f7:	add    BYTE PTR [rsi],dl
 101e1f9:	in     al,0x8
 101e1fb:	add    BYTE PTR [rdx],cl
 101e1fd:	je     0x101e206
 101e1ff:	add    BYTE PTR [rip+0x40000634],al        # 0x4101e839
 101e205:	(bad)  
 101e206:	add    BYTE PTR [rax],al
 101e208:	jno    0x101e18c
 101e20a:	add    BYTE PTR [rax],al
 101e20c:	in     al,dx
 101e20d:	loope  0x101e210
 101e20f:	add    BYTE PTR [rcx],ah
 101e211:	add    BYTE PTR [rax],al
 101e213:	add    BYTE PTR [rax-0x7e],al
 101e216:	add    BYTE PTR [rax],al
 101e218:	jno    0x101e19c
 101e21a:	add    BYTE PTR [rax],al
 101e21c:	in     al,dx
 101e21d:	loope  0x101e220
 101e21f:	add    BYTE PTR [rcx],al
 101e221:	(bad)  
 101e222:	(bad)  
 101e223:	add    BYTE PTR [rsi],cl
 101e225:	(bad)  
 101e226:	or     dh,al
 101e228:	or     al,ah
 101e22a:	(bad)  
 101e22b:	rol    BYTE PTR [rax+rsi*2],0x3
 101e22f:	(bad)  
 101e230:	add    dh,BYTE PTR [rax]
 101e232:	add    BYTE PTR [rax],al
 101e234:	and    DWORD PTR [rip+0x54050002],eax        # 0x5506e23c
 101e23a:	(bad)  
 101e23b:	add    al,ah
 101e23d:	(bad)  
 101e23e:	add    BYTE PTR [rax],al
 101e240:	mov    esi,0x20000083
 101e245:	loop   0x101e248
 101e247:	add    BYTE PTR [rcx],ah
 101e249:	add    BYTE PTR [rax],al
 101e24b:	add    al,ah
 101e24d:	(bad)  
 101e24e:	add    BYTE PTR [rax],al
 101e250:	mov    esi,0x20000083
 101e255:	loop   0x101e258
 101e257:	add    BYTE PTR [rcx],bl
 101e259:	xor    BYTE PTR [rcx],cl
 101e25b:	add    BYTE PTR [rsi],bl
 101e25d:	je     0x101e231
 101e25f:	add    bl,BYTE PTR [rsi]
 101e261:	rol    DWORD PTR fs:[rdx],1
 101e264:	(bad)  
 101e265:	xor    al,0xd0
 101e267:	add    bl,BYTE PTR [rsi]
 101e269:	add    esi,ecx
 101e26b:	add    dl,BYTE PTR [rcx]
 101e26d:	loopne 0x101e26f
 101e26f:	add    ah,cl
 101e271:	mov    edi,0x10000
 101e276:	add    BYTE PTR [rax],al
 101e278:	add    al,0x85
 101e27a:	add    BYTE PTR [rax],al
 101e27c:	(bad)  
 101e27d:	mov    eax,DWORD PTR [rax]
 101e27f:	add    BYTE PTR [rax-0x7dfffe3c],dl
 101e285:	mov    eax,DWORD PTR [rax]
 101e287:	add    BYTE PTR [rcx+0x16],ah
 101e28a:	add    BYTE PTR [rax],al
 101e28c:	add    DWORD PTR [rsi],eax
 101e28e:	add    al,BYTE PTR [rax]
 101e290:	(bad)  
 101e291:	xchg   edx,eax
 101e292:	add    dl,BYTE PTR [rax+0x19]
 101e295:	sub    eax,0x741f350d
 101e29a:	adc    BYTE PTR [rax],al
 101e29c:	sbb    esp,DWORD PTR [rdi+rcx*1+0x0]
 101e2a0:	(bad)  
 101e2a1:	xor    al,0xe
 101e2a3:	add    BYTE PTR [rbx],dl
 101e2a5:	xor    ecx,DWORD PTR [rsi]
 101e2a7:	jb     0x101e2b3
 101e2a9:	lock or al,ah
 101e2ac:	(bad)  
 101e2ad:	rol    BYTE PTR [rax+rax*8],1
 101e2b0:	add    dl,BYTE PTR [rax+0x0]
 101e2b3:	add    BYTE PTR [rax+0x300000bf],ch
 101e2b9:	add    BYTE PTR [rax],al
 101e2bb:	add    BYTE PTR [rcx],bl
 101e2bd:	sbb    DWORD PTR [rax+rax*1],eax
 101e2c0:	or     dl,BYTE PTR [rdx-0x1ffb0ffa]
 101e2c6:	add    dh,BYTE PTR [rax-0x58]
 101e2c9:	mov    edi,0x300000
 101e2ce:	add    BYTE PTR [rax],al
 101e2d0:	and    DWORD PTR [rdx],ecx
 101e2d2:	add    al,0x0
 101e2d4:	or     dl,BYTE PTR [rcx+rcx*1+0x0]
 101e2d8:	add    eax,0xf0000f34
 101e2dd:	lea    eax,[rax]
 101e2df:	add    BYTE PTR [rsi],ch
 101e2e1:	mov    es,WORD PTR [rax]
 101e2e3:	add    BYTE PTR [rdx+riz*8+0x5210001],bh
 101e2ea:	add    al,BYTE PTR [rax]
 101e2ec:	add    eax,0x2e000864
 101e2f1:	mov    es,WORD PTR [rax]
 101e2f3:	add    BYTE PTR [rdi-0x72],dh
 101e2f6:	add    BYTE PTR [rax],al
 101e2f8:	shl    dl,1
 101e2fa:	add    DWORD PTR [rax],eax
 101e2fc:	and    DWORD PTR [rax],eax
 101e2fe:	add    BYTE PTR [rax],al
 101e300:	mov    es,WORD PTR cs:[rax]
 101e303:	add    BYTE PTR [rdi-0x72],dh
 101e306:	add    BYTE PTR [rax],al
 101e308:	shl    dl,1
 101e30a:	add    DWORD PTR [rax],eax
 101e30c:	and    DWORD PTR [rax],eax
 101e30e:	add    BYTE PTR [rax],al
 101e310:	lock lea eax,[rax]
 101e313:	add    BYTE PTR [rsi],ch
 101e315:	mov    es,WORD PTR [rax]
 101e317:	add    BYTE PTR [rdx+riz*8+0x4010001],bh
 101e31e:	add    DWORD PTR [rax],eax
 101e320:	add    al,0x42
 101e322:	add    BYTE PTR [rax],al
 101e324:	sbb    DWORD PTR [rdx],ebx
 101e326:	(bad)  
 101e327:	add    BYTE PTR [rbx],cl
 101e329:	jb     0x101e332
 101e32b:	loopne 0x101e332
 101e32d:	jo     0x101e333
 101e32f:	(bad)  
 101e330:	add    edx,DWORD PTR [rax+0x2]
 101e333:	xor    BYTE PTR [rax+0x380000bf],ch
 101e339:	add    BYTE PTR [rax],al
 101e33b:	add    BYTE PTR [rcx],al
 101e33d:	(bad)  
 101e33e:	add    al,BYTE PTR [rax]
 101e340:	(bad)  
 101e341:	xor    al,BYTE PTR [rdx]
 101e343:	xor    BYTE PTR [rcx],ah
 101e345:	add    eax,0x54050002
 101e34a:	(bad)  
 101e34b:	add    BYTE PTR [rax],ah
 101e34d:	xchg   ecx,eax
 101e34e:	add    BYTE PTR [rax],al
 101e350:	es xchg ecx,eax
 101e352:	add    BYTE PTR [rax],al
 101e354:	cmp    al,0xe3
 101e356:	add    DWORD PTR [rax],eax
 101e358:	and    DWORD PTR [rdi],esp
 101e35a:	(bad)  
 101e35b:	add    BYTE PTR [rdi],ah
 101e35d:	je     0x101e367
 101e35f:	add    BYTE PTR [rdx],cl
 101e361:	in     al,0x9
 101e363:	add    BYTE PTR [rip+0x26000764],al        # 0x2701eacd
 101e369:	xchg   ecx,eax
 101e36a:	add    BYTE PTR [rax],al
 101e36c:	sub    edx,DWORD PTR [rcx-0x1cbc0000]
 101e372:	add    DWORD PTR [rax],eax
 101e374:	and    DWORD PTR [rax],eax
 101e376:	add    al,0x0
 101e378:	add    ah,ah
 101e37a:	or     DWORD PTR [rax],eax
 101e37c:	add    BYTE PTR [rax+rcx*1+0x0],dh
 101e380:	es xchg ecx,eax
 101e382:	add    BYTE PTR [rax],al
 101e384:	sub    edx,DWORD PTR [rcx-0x1cbc0000]
 101e38a:	add    DWORD PTR [rax],eax
 101e38c:	and    DWORD PTR [rax],eax
 101e38e:	add    al,BYTE PTR [rax]
 101e390:	add    BYTE PTR [rax+rcx*1+0x0],dh
 101e394:	and    BYTE PTR [rcx-0x6eda0000],dl
 101e39a:	add    BYTE PTR [rax],al
 101e39c:	cmp    al,0xe3
 101e39e:	add    DWORD PTR [rax],eax
 101e3a0:	add    DWORD PTR [rax],ecx
 101e3a2:	add    eax,DWORD PTR [rax]
 101e3a4:	or     BYTE PTR [rdx+0x4],ah
 101e3a7:	loopne 0x101e3ab
 101e3a9:	push   rax
 101e3aa:	add    BYTE PTR [rax],al
 101e3ac:	and    DWORD PTR [rcx+0xa],ebx
 101e3af:	add    BYTE PTR [rcx-0xc],bl
 101e3b2:	add    al,0x0
 101e3b4:	rex.WX (bad) 
 101e3b6:	add    eax,0x6c44500
 101e3bb:	add    BYTE PTR [rsp+rsi*2],cl
 101e3be:	or     al,0x0
 101e3c0:	add    eax,0xd0000a34
 101e3c5:	xchg   ecx,eax
 101e3c6:	add    BYTE PTR [rax],al
 101e3c8:	lock xchg ecx,eax
 101e3ca:	add    BYTE PTR [rax],al
 101e3cc:	movabs al,ds:0xa00210001e3
 101e3d5:	hlt    
 101e3d6:	add    al,0x0
 101e3d8:	add    ah,dl
 101e3da:	add    eax,0x6c40000
 101e3df:	add    BYTE PTR [rax],al
 101e3e1:	je     0x101e3ef
 101e3e3:	add    BYTE PTR [rax],al
 101e3e5:	xor    al,0xa
 101e3e7:	add    al,dl
 101e3e9:	xchg   ecx,eax
 101e3ea:	add    BYTE PTR [rax],al
 101e3ec:	lock xchg ecx,eax
 101e3ee:	add    BYTE PTR [rax],al
 101e3f0:	movabs al,ds:0x5000205210001e3
 101e3f9:	or     eax,DWORD PTR fs:[rax]
 101e3fc:	(bad)  
 101e3fd:	xchg   edx,eax
 101e3fe:	add    BYTE PTR [rax],al
 101e400:	iret   
 101e401:	xchg   edx,eax
 101e402:	add    BYTE PTR [rax],al
 101e404:	shl    bl,1
 101e406:	add    DWORD PTR [rax],eax
 101e408:	and    DWORD PTR [rax],eax
 101e40a:	add    BYTE PTR [rax],al
 101e40c:	(bad)  
 101e40d:	xchg   edx,eax
 101e40e:	add    BYTE PTR [rax],al
 101e410:	iret   
 101e411:	xchg   edx,eax
 101e412:	add    BYTE PTR [rax],al
 101e414:	shl    bl,1
 101e416:	add    DWORD PTR [rax],eax
 101e418:	and    DWORD PTR [rax],eax
 101e41a:	add    al,0x0
 101e41c:	add    BYTE PTR [rsp+rcx*1+0x0],dh
 101e420:	add    BYTE PTR [rdx+rcx*1],dh
 101e423:	add    al,dl
 101e425:	xchg   ecx,eax
 101e426:	add    BYTE PTR [rax],al
 101e428:	lock xchg ecx,eax
 101e42a:	add    BYTE PTR [rax],al
 101e42c:	movabs al,ds:0x6000206010001e3
 101e435:	xor    al,BYTE PTR [rdx]
 101e437:	xor    BYTE PTR [rcx],al
 101e439:	or     al,BYTE PTR [rax+rax*1]
 101e43c:	or     dl,BYTE PTR [rsp+rcx*1+0x0]
 101e440:	or     dh,BYTE PTR [rdx+0x6]
 101e443:	(bad)  
 101e444:	and    DWORD PTR [rbx],edx
 101e446:	add    al,0x0
 101e448:	adc    esi,DWORD PTR [rdx+rcx*1]
 101e44b:	add    BYTE PTR [rip+0x70000b74],al        # 0x7101efc5
 101e451:	xchg   esp,eax
 101e452:	add    BYTE PTR [rax],al
 101e454:	mov    edx,0x38000094
 101e459:	in     al,0x1
 101e45b:	add    BYTE PTR [rcx],ah
 101e45d:	add    BYTE PTR [rdx],al
 101e45f:	add    BYTE PTR [rax],al
 101e461:	je     0x101e46e
 101e463:	add    BYTE PTR [rax-0x6c],dh
 101e466:	add    BYTE PTR [rax],al
 101e468:	mov    edx,0x38000094
 101e46d:	in     al,0x1
 101e46f:	add    BYTE PTR [rcx],ah
 101e471:	add    BYTE PTR [rax],al
 101e473:	add    BYTE PTR [rax-0x6c],dh
 101e476:	add    BYTE PTR [rax],al
 101e478:	mov    edx,0x38000094
 101e47d:	in     al,0x1
 101e47f:	add    BYTE PTR [rcx],al
 101e481:	rex.XB or al,BYTE PTR [r8]
 101e484:	rex.XB
 101e485:	fs (bad) 
 101e487:	add    BYTE PTR [rcx],bh
 101e489:	xor    al,0x6
 101e48b:	add    BYTE PTR [rax],dl
 101e48d:	je     0x101e498
 101e48f:	add    BYTE PTR [rax],dl
 101e491:	push   rsp
 101e492:	or     BYTE PTR [rax],al
 101e494:	adc    BYTE PTR [rdx],dh
 101e496:	or     al,0xe0
 101e498:	add    DWORD PTR [rbp+0xa],eax
 101e49b:	add    BYTE PTR [rbp-0x1c],al
 101e49e:	(bad)  
 101e49f:	add    BYTE PTR [rax+0x74],al
 101e4a2:	(bad)  
 101e4a3:	add    BYTE PTR [rdi],cl
 101e4a5:	push   rsp
 101e4a6:	or     DWORD PTR [rax],eax
 101e4a8:	sysenter 
 101e4aa:	or     BYTE PTR [rax],al
 101e4ac:	rdmsr  
 101e4ae:	or     esp,DWORD PTR [rax+0x1]
 101e4b1:	add    al,0x1
 101e4b3:	add    BYTE PTR [rdx+rax*2],al
 101e4b6:	add    BYTE PTR [rax],al
 101e4b8:	add    DWORD PTR [rcx+rax*1],eax
 101e4bb:	add    BYTE PTR [rdx+rax*2],al
 101e4be:	add    BYTE PTR [rax],al
 101e4c0:	add    DWORD PTR [rdi],ecx
 101e4c2:	(bad)  
 101e4c3:	add    BYTE PTR [rdi],cl
 101e4c5:	or     BYTE PTR fs:[rax],al
 101e4c8:	andps  xmm0,XMMWORD PTR [rdi]
 101e4cb:	add    BYTE PTR [rdi],cl
 101e4cd:	xor    cl,BYTE PTR [rbx]
 101e4cf:	jo     0x101e4f2
 101e4d1:	add    eax,0x34050002
 101e4d6:	(bad)  
 101e4d7:	add    BYTE PTR [rax],ah
 101e4d9:	xchg   esi,eax
 101e4da:	add    BYTE PTR [rax],al
 101e4dc:	push   rsi
 101e4dd:	xchg   esi,eax
 101e4de:	add    BYTE PTR [rax],al
 101e4e0:	shl    ah,0x1
 101e4e3:	add    BYTE PTR [rcx],ah
 101e4e5:	add    BYTE PTR [rdx],al
 101e4e7:	add    BYTE PTR [rax],al
 101e4e9:	xor    al,0x6
 101e4eb:	add    BYTE PTR [rax],ah
 101e4ed:	xchg   esi,eax
 101e4ee:	add    BYTE PTR [rax],al
 101e4f0:	push   rsi
 101e4f1:	xchg   esi,eax
 101e4f2:	add    BYTE PTR [rax],al
 101e4f4:	shl    ah,0x1
 101e4f7:	add    BYTE PTR [rcx],ah
 101e4f9:	add    BYTE PTR [rax],al
 101e4fb:	add    BYTE PTR [rax],ah
 101e4fd:	xchg   esi,eax
 101e4fe:	add    BYTE PTR [rax],al
 101e500:	push   rsi
 101e501:	xchg   esi,eax
 101e502:	add    BYTE PTR [rax],al
 101e504:	shl    ah,0x1
 101e507:	add    BYTE PTR [rcx],al
 101e509:	or     al,BYTE PTR [rax+rax*1]
 101e50c:	or     dl,BYTE PTR [rdx+0x6]
 101e50f:	lock add al,0xe0
 101e512:	add    al,al
 101e514:	and    DWORD PTR [rdx],edx
 101e516:	add    al,0x0
 101e518:	adc    ah,BYTE PTR [rbp+rax*1+0x0]
 101e51c:	add    eax,0x80000a34
 101e521:	xchg   edi,eax
 101e522:	add    BYTE PTR [rax],al
 101e524:	movabs eax,ds:0x210001e508000097
 101e52d:	or     al,BYTE PTR [rax+rax*1]
 101e530:	or     dh,BYTE PTR [rsp+rax*1+0x0]
 101e534:	add    eax,0xa1000c54
 101e539:	xchg   edi,eax
 101e53a:	add    BYTE PTR [rax],al
 101e53c:	or     DWORD PTR [rax-0x1aec0000],ebx
 101e542:	add    DWORD PTR [rax],eax
 101e544:	and    DWORD PTR [rax],eax
 101e546:	add    al,BYTE PTR [rax]
 101e548:	add    BYTE PTR [rsp+rax*1+0x0],dh
 101e54c:	movabs eax,ds:0x1400009809000097
 101e555:	in     eax,0x1
 101e557:	add    BYTE PTR [rcx],ah
 101e559:	add    BYTE PTR [rax],al
 101e55b:	add    BYTE PTR [rcx+0x9000097],ah
 101e561:	cwde   
 101e562:	add    BYTE PTR [rax],al
 101e564:	adc    al,0xe5
 101e566:	add    DWORD PTR [rax],eax
 101e568:	and    DWORD PTR [rax],eax
 101e56a:	add    BYTE PTR [rax],al
 101e56c:	adc    BYTE PTR [rdi-0x685f0000],0x0
 101e573:	add    BYTE PTR [rax],cl
 101e575:	in     eax,0x1
 101e577:	add    BYTE PTR [rcx],al
 101e579:	sbb    BYTE PTR [rdx],cl
 101e57b:	add    BYTE PTR [rax],bl
 101e57d:	or     al,BYTE PTR fs:[rax]
 101e580:	sbb    BYTE PTR [rcx+rcx*1+0x0],dl
 101e584:	sbb    BYTE PTR [rax+rcx*1],dh
 101e587:	add    BYTE PTR [rax],bl
 101e589:	xor    dl,BYTE PTR [rax+rsi*8]
 101e58c:	adc    ah,al
 101e58e:	adc    BYTE PTR [rax+0x1],dh
 101e591:	add    al,0x1
 101e593:	add    BYTE PTR [rdx+rax*2],al
 101e596:	add    BYTE PTR [rax],al
 101e598:	and    DWORD PTR [rip+0x74050002],eax        # 0x7506e5a0
 101e59e:	add    al,0x0
 101e5a0:	and    BYTE PTR [rdx-0x65ce0000],bl
 101e5a6:	add    BYTE PTR [rax],al
 101e5a8:	nop
 101e5a9:	in     eax,0x1
 101e5ab:	add    BYTE PTR [rcx],ah
 101e5ad:	add    eax,0x34050002
 101e5b2:	(bad)  
 101e5b3:	add    BYTE PTR [rdx],dh
 101e5b5:	(bad)  
 101e5b6:	add    BYTE PTR [rax],al
 101e5b8:	push   rax
 101e5b9:	(bad)  
 101e5ba:	add    BYTE PTR [rax],al
 101e5bc:	cwde   
 101e5bd:	in     eax,0x1
 101e5bf:	add    BYTE PTR [rcx],ah
 101e5c1:	add    BYTE PTR [rax],al
 101e5c3:	add    BYTE PTR [rdx],dh
 101e5c5:	(bad)  
 101e5c6:	add    BYTE PTR [rax],al
 101e5c8:	push   rax
 101e5c9:	(bad)  
 101e5ca:	add    BYTE PTR [rax],al
 101e5cc:	cwde   
 101e5cd:	in     eax,0x1
 101e5cf:	add    BYTE PTR [rcx],ah
 101e5d1:	add    BYTE PTR [rax],al
 101e5d3:	add    BYTE PTR [rax],ah
 101e5d5:	(bad)  
 101e5d6:	add    BYTE PTR [rax],al
 101e5d8:	xor    bl,BYTE PTR [rdx-0x1a700000]
 101e5de:	add    DWORD PTR [rax],eax
 101e5e0:	add    DWORD PTR [rsi],eax
 101e5e2:	add    al,BYTE PTR [rax]
 101e5e4:	(bad)  
 101e5e5:	xor    al,BYTE PTR [rdx]
 101e5e7:	xor    BYTE PTR [rcx],al
 101e5e9:	or     al,BYTE PTR [rax+rax*1]
 101e5ec:	or     dh,BYTE PTR [rsi+rax*1]
 101e5ef:	add    BYTE PTR [rdx],cl
 101e5f1:	xor    al,BYTE PTR [rsi]
 101e5f3:	jo     0x101e5f6
 101e5f5:	(bad)  
 101e5f6:	add    al,BYTE PTR [rax]
 101e5f8:	(bad)  
 101e5f9:	xor    al,BYTE PTR [rdx]
 101e5fb:	xor    BYTE PTR [rcx],al
 101e5fd:	(bad)  
 101e5fe:	add    al,BYTE PTR [rax]
 101e600:	(bad)  
 101e601:	xor    al,BYTE PTR [rdx]
 101e603:	xor    BYTE PTR [rcx],al
 101e605:	cmp    ecx,DWORD PTR [rax]
 101e607:	add    BYTE PTR [rbx],bh
 101e609:	je     0x101e612
 101e60b:	add    BYTE PTR [rdx],ch
 101e60d:	xor    al,0x6
 101e60f:	add    BYTE PTR [rdx],cl
 101e611:	push   rsp
 101e612:	or     DWORD PTR [rax],eax
 101e614:	or     dh,BYTE PTR [rdx]
 101e616:	(bad)  
 101e617:	(bad)  
 101e618:	and    DWORD PTR [rip+0xffffffffe4050002],eax        # 0xffffffffe506e620
 101e61e:	or     BYTE PTR [rax],al
 101e620:	lock fwait
 101e622:	add    BYTE PTR [rax],al
 101e624:	rex.R pushf 
 101e626:	add    BYTE PTR [rax],al
 101e628:	add    al,0xe6
 101e62a:	add    DWORD PTR [rax],eax
 101e62c:	and    DWORD PTR [rax],eax
 101e62e:	add    BYTE PTR [rax],al
 101e630:	lock fwait
 101e632:	add    BYTE PTR [rax],al
 101e634:	rex.R pushf 
 101e636:	add    BYTE PTR [rax],al
 101e638:	add    al,0xe6
 101e63a:	add    DWORD PTR [rax],eax
 101e63c:	add    DWORD PTR [rsi],eax
 101e63e:	add    al,BYTE PTR [rax]
 101e640:	(bad)  
 101e641:	xor    al,BYTE PTR [rdx]
 101e643:	xor    BYTE PTR [rcx],al
 101e645:	or     al,BYTE PTR [rax+rax*1]
 101e648:	or     dh,BYTE PTR [rsi+rax*1]
 101e64b:	add    BYTE PTR [rdx],cl
 101e64d:	xor    al,BYTE PTR [rsi]
 101e64f:	jo     0x101e652
 101e651:	clts   
 101e653:	add    BYTE PTR [rdi],cl
 101e655:	push   rsp
 101e656:	or     BYTE PTR [rax],al
 101e658:	sysenter 
 101e65a:	(bad)  
 101e65b:	add    BYTE PTR [rdi],cl
 101e65d:	xor    cl,BYTE PTR [rbx]
 101e65f:	(bad)  
 101e660:	and    DWORD PTR [rip+0x74050002],eax        # 0x7506e668
 101e666:	(bad)  
 101e667:	add    al,dh
 101e669:	popf   
 101e66a:	add    BYTE PTR [rax],al
 101e66c:	es sahf 
 101e66e:	add    BYTE PTR [rax],al
 101e670:	push   rax
 101e671:	out    0x1,al
 101e673:	add    BYTE PTR [rcx],ah
 101e675:	add    BYTE PTR [rdx],al
 101e677:	add    BYTE PTR [rax],al
 101e679:	je     0x101e681
 101e67b:	add    al,dh
 101e67d:	popf   
 101e67e:	add    BYTE PTR [rax],al
 101e680:	es sahf 
 101e682:	add    BYTE PTR [rax],al
 101e684:	push   rax
 101e685:	out    0x1,al
 101e687:	add    BYTE PTR [rcx],ah
 101e689:	add    BYTE PTR [rax],al
 101e68b:	add    al,dh
 101e68d:	popf   
 101e68e:	add    BYTE PTR [rax],al
 101e690:	es sahf 
 101e692:	add    BYTE PTR [rax],al
 101e694:	push   rax
 101e695:	out    0x1,al
 101e697:	add    BYTE PTR [rcx],al
 101e699:	or     al,BYTE PTR [rax+rax*1]
 101e69c:	or     dl,BYTE PTR [rdx+0x6]
 101e69f:	lock add al,0xe0
 101e6a2:	add    al,al
 101e6a4:	and    DWORD PTR [rdx],edx
 101e6a6:	add    al,0x0
 101e6a8:	adc    ah,BYTE PTR [rbp+rax*1+0x0]
 101e6ac:	add    eax,0x50000a34
 101e6b1:	lahf   
 101e6b2:	add    BYTE PTR [rax],al
 101e6b4:	jno    0x101e655
 101e6b6:	add    BYTE PTR [rax],al
 101e6b8:	cwde   
 101e6b9:	out    0x1,al
 101e6bb:	add    BYTE PTR [rcx],ah
 101e6bd:	or     al,BYTE PTR [rax+rax*1]
 101e6c0:	or     dh,BYTE PTR [rsp+rax*1+0x0]
 101e6c4:	add    eax,0x71000c54
 101e6c9:	lahf   
 101e6ca:	add    BYTE PTR [rax],al
 101e6cc:	fstp   DWORD PTR [rdi-0x195c0000]
 101e6d2:	add    DWORD PTR [rax],eax
 101e6d4:	and    DWORD PTR [rax],eax
 101e6d6:	add    al,BYTE PTR [rax]
 101e6d8:	add    BYTE PTR [rsp+rax*1+0x0],dh
 101e6dc:	jno    0x101e67d
 101e6de:	add    BYTE PTR [rax],al
 101e6e0:	fstp   DWORD PTR [rdi-0x195c0000]
 101e6e6:	add    DWORD PTR [rax],eax
 101e6e8:	and    DWORD PTR [rax],eax
 101e6ea:	add    BYTE PTR [rax],al
 101e6ec:	jno    0x101e68d
 101e6ee:	add    BYTE PTR [rax],al
 101e6f0:	fstp   DWORD PTR [rdi-0x195c0000]
 101e6f6:	add    DWORD PTR [rax],eax
 101e6f8:	and    DWORD PTR [rax],eax
 101e6fa:	add    BYTE PTR [rax],al
 101e6fc:	push   rax
 101e6fd:	lahf   
 101e6fe:	add    BYTE PTR [rax],al
 101e700:	jno    0x101e6a1
 101e702:	add    BYTE PTR [rax],al
 101e704:	cwde   
 101e705:	out    0x1,al
 101e707:	add    BYTE PTR [rcx],al
 101e709:	add    al,0x1
 101e70b:	add    BYTE PTR [rdx+rax*2],al
 101e70e:	add    BYTE PTR [rax],al
 101e710:	and    DWORD PTR [rip+0x74050002],eax        # 0x7506e718
 101e716:	add    al,0x0
 101e718:	lock movabs al,ds:0xe7080000a1020000
 101e722:	add    DWORD PTR [rax],eax
 101e724:	and    DWORD PTR [rip+0x34050002],eax        # 0x3506e72c
 101e72a:	(bad)  
 101e72b:	add    BYTE PTR [rdx],al
 101e72d:	movabs eax,ds:0xe7100000a1200000
 101e736:	add    DWORD PTR [rax],eax
 101e738:	and    DWORD PTR [rax],eax
 101e73a:	add    BYTE PTR [rax],al
 101e73c:	add    ah,BYTE PTR [rcx-0x5ee00000]
 101e742:	add    BYTE PTR [rax],al
 101e744:	adc    bh,ah
 101e746:	add    DWORD PTR [rax],eax
 101e748:	and    DWORD PTR [rax],eax
 101e74a:	add    BYTE PTR [rax],al
 101e74c:	lock movabs al,ds:0xe7080000a1020000
 101e756:	add    DWORD PTR [rax],eax
 101e758:	add    DWORD PTR [rsi],eax
 101e75a:	add    al,BYTE PTR [rax]
 101e75c:	(bad)  
 101e75d:	xor    al,BYTE PTR [rdx]
 101e75f:	xor    BYTE PTR [rcx],al
 101e761:	or     al,BYTE PTR [rax+rax*1]
 101e764:	or     dh,BYTE PTR [rsi+rax*1]
 101e767:	add    BYTE PTR [rdx],cl
 101e769:	xor    al,BYTE PTR [rsi]
 101e76b:	jo     0x101e76e
 101e76d:	(bad)  
 101e76e:	(bad)  
 101e76f:	add    BYTE PTR [rdi],ah
 101e771:	je     0x101e77c
 101e773:	add    BYTE PTR [rsi],bl
 101e775:	xor    al,0x8
 101e777:	add    BYTE PTR [rsi],al
 101e779:	push   rdx
 101e77a:	add    ah,BYTE PTR [rax+0x1]
 101e77d:	clts   
 101e77f:	add    BYTE PTR [rdi],cl
 101e781:	fs (bad) 
 101e783:	add    BYTE PTR [rdi],cl
 101e785:	xor    al,0x6
 101e787:	add    BYTE PTR [rdi],cl
 101e789:	xor    cl,BYTE PTR [rbx]
 101e78b:	jo     0x101e78e
 101e78d:	(bad)  
 101e78e:	add    al,BYTE PTR [rax]
 101e790:	(bad)  
 101e791:	xor    al,BYTE PTR [rdx]
 101e793:	xor    BYTE PTR [rcx],al
 101e795:	clts   
 101e797:	add    BYTE PTR [rdi],cl
 101e799:	fs (bad) 
 101e79b:	add    BYTE PTR [rdi],cl
 101e79d:	xor    al,0x6
 101e79f:	add    BYTE PTR [rdi],cl
 101e7a1:	xor    cl,BYTE PTR [rbx]
 101e7a3:	jo     0x101e7a6
 101e7a5:	add    al,0x1
 101e7a7:	add    BYTE PTR [rdx+rax*2],al
 101e7aa:	add    BYTE PTR [rax],al
 101e7ac:	add    DWORD PTR [rax],ebx
 101e7ae:	or     al,BYTE PTR [rax]
 101e7b0:	sbb    BYTE PTR [rdx+rcx*1+0x0],ah
 101e7b4:	sbb    BYTE PTR [rcx+rcx*1+0x0],dl
 101e7b8:	sbb    BYTE PTR [rax+rcx*1],dh
 101e7bb:	add    BYTE PTR [rax],bl
 101e7bd:	xor    dl,BYTE PTR [rax+rsi*8]
 101e7c0:	adc    ah,al
 101e7c2:	adc    BYTE PTR [rax+0x1],dh
 101e7c5:	or     al,BYTE PTR [rax+rax*1]
 101e7c8:	or     dh,BYTE PTR [rsi+rax*1]
 101e7cb:	add    BYTE PTR [rdx],cl
 101e7cd:	xor    al,BYTE PTR [rsi]
 101e7cf:	jo     0x101e7e2
 101e7d1:	or     al,BYTE PTR [rax+rax*1]
 101e7d4:	or     dh,BYTE PTR [rsi+rax*1]
 101e7d7:	add    BYTE PTR [rdx],cl
 101e7d9:	xor    al,BYTE PTR [rsi]
 101e7db:	jo     0x101e7d3
 101e7dd:	rol    BYTE PTR [rax],0x0
 101e7e0:	add    DWORD PTR [rax],eax
 101e7e2:	add    BYTE PTR [rax],al
 101e7e4:	jge    0x101e78c
 101e7e6:	add    BYTE PTR [rax],al
 101e7e8:	mov    esi,0xf00000a6
 101e7ed:	(bad)
 101e7f1:	add    BYTE PTR [rax],al
 101e7f3:	add    BYTE PTR [rcx],al
 101e7f5:	(bad)  
 101e7f6:	add    al,BYTE PTR [rax]
 101e7f8:	(bad)  
 101e7f9:	xor    al,BYTE PTR [rdx]
 101e7fb:	push   rax
 101e7fc:	add    DWORD PTR [rcx+rax*1],eax
 101e7ff:	add    BYTE PTR [rdx+rax*2],al
 101e802:	add    BYTE PTR [rax],al
 101e804:	add    DWORD PTR [rsi],eax
 101e806:	add    al,BYTE PTR [rax]
 101e808:	(bad)  
 101e809:	xor    al,BYTE PTR [rdx]
 101e80b:	xor    BYTE PTR [rcx],al
 101e80d:	sub    al,0x5
 101e80f:	add    BYTE PTR [rsp+rsi*2],ch
 101e812:	add    al,0x0
 101e814:	sbb    al,0x34
 101e816:	(bad)  
 101e817:	add    BYTE PTR [rdx+rax*2],al
 101e81a:	add    BYTE PTR [rax],al
 101e81c:	adc    DWORD PTR [rsi],eax
 101e81e:	add    al,BYTE PTR [rax]
 101e820:	(bad)  
 101e821:	xor    al,BYTE PTR [rdx]
 101e823:	xor    dh,dh
 101e825:	rol    BYTE PTR [rax],0x0
 101e828:	add    DWORD PTR [rax],eax
 101e82a:	add    BYTE PTR [rax],al
 101e82c:	rex.WB test al,0x0
 101e82f:	add    BYTE PTR [rdx-0x58],dh
 101e832:	add    BYTE PTR [rax],al
 101e834:	and    ch,al
 101e836:	add    DWORD PTR [rax],eax
 101e838:	add    BYTE PTR [rax],al
 101e83a:	add    BYTE PTR [rax],al
 101e83c:	add    DWORD PTR [rsi],eax
 101e83e:	add    al,BYTE PTR [rax]
 101e840:	(bad)  
 101e841:	xor    al,BYTE PTR [rdx]
 101e843:	push   rax
 101e844:	add    DWORD PTR [rsi],eax
 101e846:	add    al,BYTE PTR [rax]
 101e848:	(bad)  
 101e849:	xor    al,BYTE PTR [rdx]
 101e84b:	xor    BYTE PTR [rcx],al
 101e84d:	add    al,0x1
 101e84f:	add    BYTE PTR [rdx+rax*2],al
 101e852:	add    BYTE PTR [rax],al
 101e854:	sbb    DWORD PTR [rdx],ebp
 101e856:	or     DWORD PTR [rax],eax
 101e858:	sbb    BYTE PTR [rax+rbx*2+0x1],dh
 101e85c:	sbb    BYTE PTR [rdi+rdx*2+0x1],ah
 101e860:	sbb    BYTE PTR [rsi+rdx*2],dh
 101e863:	add    DWORD PTR [rax],ebx
 101e865:	add    DWORD PTR [rcx+rax*1+0x11],edx
 101e869:	loopne 0x101e86b
 101e86b:	add    ah,cl
 101e86d:	mov    edi,0x10000
 101e872:	add    BYTE PTR [rax],al
 101e874:	pop    rsi
 101e875:	test   eax,0xac350000
 101e87a:	add    BYTE PTR [rax],al
 101e87c:	push   rax
 101e87d:	(bad)
 101e880:	xor    eax,0x910000ac
 101e885:	or     al,BYTE PTR [rax]
 101e887:	add    BYTE PTR [rcx],al
 101e889:	(bad)  
 101e88a:	add    al,BYTE PTR [rax]
 101e88c:	(bad)  
 101e88d:	push   rdx
 101e88e:	add    dl,BYTE PTR [rax+0x1]
 101e891:	add    al,0x1
 101e893:	add    BYTE PTR [rdx+rax*2],al
 101e896:	add    BYTE PTR [rax],al
 101e898:	and    DWORD PTR [rip+0x34050002],eax        # 0x3506e8a0
 101e89e:	add    al,0x0
 101e8a0:	xor    BYTE PTR [rbp-0x52910000],ch
 101e8a6:	add    BYTE PTR [rax],al
 101e8a8:	nop
 101e8a9:	call   0x122e8af
 101e8ae:	add    BYTE PTR [rax],al
 101e8b0:	xor    BYTE PTR [rbp-0x52910000],ch
 101e8b6:	add    BYTE PTR [rax],al
 101e8b8:	nop
 101e8b9:	call   0x1102e8bf
 101e8be:	add    eax,DWORD PTR [rax]
 101e8c0:	adc    BYTE PTR [rdx+0xc],al
 101e8c3:	(bad)  
 101e8c4:	or     esi,DWORD PTR [rax]
 101e8c6:	add    BYTE PTR [rax],al
 101e8c8:	and    DWORD PTR [rip+0x74050002],eax        # 0x7506e8d0
 101e8ce:	add    al,0x0
 101e8d0:	xor    BYTE PTR [rsi-0x51a20000],ch
 101e8d6:	add    BYTE PTR [rax],al
 101e8d8:	mov    esp,0x210001e8
 101e8dd:	add    BYTE PTR [rdx],al
 101e8df:	add    BYTE PTR [rax],al
 101e8e1:	je     0x101e8e7
 101e8e3:	add    BYTE PTR [rax],dh
 101e8e5:	scas   al,BYTE PTR es:[rdi]
 101e8e6:	add    BYTE PTR [rax],al
 101e8e8:	pop    rsi
 101e8e9:	scas   al,BYTE PTR es:[rdi]
 101e8ea:	add    BYTE PTR [rax],al
 101e8ec:	mov    esp,0x210001e8
 101e8f1:	add    BYTE PTR [rax],al
 101e8f3:	add    BYTE PTR [rax],dh
 101e8f5:	scas   al,BYTE PTR es:[rdi]
 101e8f6:	add    BYTE PTR [rax],al
 101e8f8:	pop    rsi
 101e8f9:	scas   al,BYTE PTR es:[rdi]
 101e8fa:	add    BYTE PTR [rax],al
 101e8fc:	mov    esp,0x10001e8
 101e901:	(bad)  
 101e902:	add    al,BYTE PTR [rax]
 101e904:	(bad)  
 101e905:	xor    al,BYTE PTR [rdx]
 101e907:	xor    BYTE PTR [rcx],al
 101e909:	add    al,0x1
 101e90b:	add    BYTE PTR [rdx+rax*2],al
 101e90e:	add    BYTE PTR [rax],al
 101e910:	add    DWORD PTR [rbx],ecx
 101e912:	add    al,0x0
 101e914:	or     esi,DWORD PTR [rcx+rcx*1]
 101e917:	add    BYTE PTR [rbx],cl
 101e919:	xor    al,BYTE PTR [rdi]
 101e91b:	loopne 0x101e93e
 101e91d:	clts   
 101e91f:	add    BYTE PTR [rdi],cl
 101e921:	je     0x101e92b
 101e923:	add    BYTE PTR [rdx],cl
 101e925:	fs (bad) 
 101e927:	add    BYTE PTR [rip+0xfffffffff0000654],al        # 0xfffffffff101ef81
 101e92d:	scas   al,BYTE PTR es:[rdi]
 101e92e:	add    BYTE PTR [rax],al
 101e930:	scas   ax,WORD PTR es:[rdi]
 101e932:	add    BYTE PTR [rax],al
 101e934:	adc    cl,ch
 101e936:	add    DWORD PTR [rax],eax
 101e938:	and    DWORD PTR [rax],eax
 101e93a:	add    BYTE PTR [rax],al
 101e93c:	lock scas al,BYTE PTR es:[rdi]
 101e93e:	add    BYTE PTR [rax],al
 101e940:	scas   ax,WORD PTR es:[rdi]
 101e942:	add    BYTE PTR [rax],al
 101e944:	adc    cl,ch
 101e946:	add    DWORD PTR [rax],eax
 101e948:	add    DWORD PTR [rsi],ebx
 101e94a:	or     al,0x0
 101e94c:	(bad)  
 101e94d:	je     0x101e95a
 101e94f:	add    BYTE PTR [rsi],bl
 101e951:	or     al,BYTE PTR fs:[rax]
 101e954:	(bad)  
 101e955:	push   rsp
 101e956:	or     DWORD PTR [rax],eax
 101e958:	(bad)  
 101e959:	xor    al,0x8
 101e95b:	add    BYTE PTR [rsi],bl
 101e95d:	xor    bl,BYTE PTR [rdx]
 101e95f:	lock sbb al,ah
 101e962:	(bad)  
 101e963:	rol    BYTE PTR [rcx],0x1a
 101e966:	or     al,BYTE PTR [rax]
 101e968:	sbb    dh,BYTE PTR [rcx+rcx*1+0x0]
 101e96c:	sbb    ah,BYTE PTR [rax+rcx*1+0x0]
 101e970:	sbb    dl,BYTE PTR [rdi+rax*1+0x0]
 101e974:	sbb    dh,BYTE PTR [rsi+rax*1]
 101e977:	add    BYTE PTR [rdx],bl
 101e979:	xor    dl,BYTE PTR [rsi]
 101e97b:	loopne 0x101e97e
 101e97d:	adc    eax,0x74150008
 101e982:	or     BYTE PTR [rax],al
 101e984:	adc    eax,0x15000764
 101e989:	xor    al,0x6
 101e98b:	add    BYTE PTR [rip+0x1e01132],dl        # 0x2e1fac3
 101e991:	sbb    BYTE PTR [rdx],cl
 101e993:	add    BYTE PTR [rax],bl
 101e995:	fs or  al,0x0
 101e998:	sbb    BYTE PTR [rbx+rcx*1+0x0],dl
 101e99c:	sbb    BYTE PTR [rdx+rcx*1],dh
 101e99f:	add    BYTE PTR [rax],bl
 101e9a1:	push   rdx
 101e9a2:	adc    al,0xf0
 101e9a4:	adc    ah,al
 101e9a6:	adc    BYTE PTR [rax+0x1],dh
 101e9a9:	clts   
 101e9ab:	add    BYTE PTR [rdi],cl
 101e9ad:	push   rsp
 101e9ae:	or     DWORD PTR [rax],eax
 101e9b0:	sysenter 
 101e9b2:	or     BYTE PTR [rax],al
 101e9b4:	rdmsr  
 101e9b6:	or     esi,DWORD PTR [rax+0x21]
 101e9b9:	or     al,BYTE PTR [rax+rax*1]
 101e9bc:	or     ah,ah
 101e9be:	(bad)  
 101e9bf:	add    BYTE PTR [rip+0xffffffffa0000664],al        # 0xffffffffa101f029
 101e9c5:	mov    bh,0x0
 101e9c7:	add    BYTE PTR [rsi],al
 101e9c9:	mov    eax,0xe9a80000
 101e9ce:	add    DWORD PTR [rax],eax
 101e9d0:	and    DWORD PTR [rax],eax
 101e9d2:	add    BYTE PTR [rax],al
 101e9d4:	movabs al,ds:0xa80000b8060000b7
 101e9dd:	jmp    0x1e1ae9e3
 101e9e2:	add    eax,0x4a010b00
 101e9e7:	add    BYTE PTR [rax+rsi*2],al
 101e9ea:	add    esp,DWORD PTR [rax+0x2]
 101e9ed:	xor    BYTE PTR [rax],al
 101e9ef:	add    BYTE PTR [rax+0x400000bf],ch
 101e9f5:	add    al,BYTE PTR [rax]
 101e9f7:	add    BYTE PTR [rcx],ah
 101e9f9:	or     BYTE PTR [rdx],al
 101e9fb:	add    BYTE PTR [rax],cl
 101e9fd:	push   rsp
 101e9fe:	push   rax
 101e9ff:	add    BYTE PTR [rax-0x40ffff48],al
 101ea05:	mov    eax,0xe9e00000
 101ea0a:	add    DWORD PTR [rax],eax
 101ea0c:	and    DWORD PTR [rax],eax
 101ea0e:	add    BYTE PTR [rax],al
 101ea10:	cmp    BYTE PTR [rax-0x47410000],0x0
 101ea17:	add    al,ah
 101ea19:	jmp    0x702ea1f
 101ea1e:	add    al,BYTE PTR [rax]
 101ea20:	(bad)  
 101ea21:	xor    al,BYTE PTR [rdx]
 101ea23:	xor    BYTE PTR [rcx],al
 101ea25:	add    al,0x1
 101ea27:	add    BYTE PTR [rdx+riz*2],al
 101ea2a:	add    BYTE PTR [rax],al
 101ea2c:	add    DWORD PTR [rsi],eax
 101ea2e:	add    al,BYTE PTR [rax]
 101ea30:	(bad)  
 101ea31:	xor    al,BYTE PTR [rdx]
 101ea33:	push   rax
 101ea34:	or     DWORD PTR [rdx],ecx
 101ea36:	add    al,0x0
 101ea38:	or     dh,BYTE PTR [rsi+rax*1]
 101ea3b:	add    BYTE PTR [rdx],cl
 101ea3d:	xor    al,BYTE PTR [rsi]
 101ea3f:	jo     0x101ea37
 101ea41:	rol    BYTE PTR [rax],0x0
 101ea44:	add    DWORD PTR [rax],eax
 101ea46:	add    BYTE PTR [rax],al
 101ea48:	(bad)  
 101ea49:	mov    edx,0xbba00000
 101ea4e:	add    BYTE PTR [rax],al
 101ea50:	jno    0x101ea17
 101ea52:	add    DWORD PTR [rax],eax
 101ea54:	movabs al,ds:0x4000104010000bb
 101ea5d:	rex.X add BYTE PTR [rax],al
 101ea60:	add    DWORD PTR [rcx+rax*1],eax
 101ea63:	add    BYTE PTR [rdx+rax*2],al
 101ea66:	add    BYTE PTR [rax],al
 101ea68:	add    DWORD PTR [rsi],eax
 101ea6a:	add    al,BYTE PTR [rax]
 101ea6c:	(bad)  
 101ea6d:	xor    al,BYTE PTR [rdx]
 101ea6f:	push   rax
 101ea70:	adc    DWORD PTR [rsi],eax
 101ea72:	add    al,BYTE PTR [rax]
 101ea74:	(bad)  
 101ea75:	xor    al,BYTE PTR [rdx]
 101ea77:	xor    dh,dh
 101ea79:	rol    BYTE PTR [rax],0x0
 101ea7c:	add    DWORD PTR [rax],eax
 101ea7e:	add    BYTE PTR [rax],al
 101ea80:	(bad)  
 101ea81:	mov    ebp,0xbd8d0000
 101ea86:	add    BYTE PTR [rax],al
 101ea88:	xchg   ebp,eax
 101ea89:	(bad)
 101ea8c:	add    BYTE PTR [rax],al
 101ea8e:	add    BYTE PTR [rax],al
 101ea90:	add    DWORD PTR [rcx+rax*1],eax
 101ea93:	add    BYTE PTR [rdx+rax*2],al
 101ea96:	add    BYTE PTR [rax],al
 101ea98:	add    DWORD PTR [rdx+rax*1],ecx
 101ea9b:	add    BYTE PTR [rcx+rax*1],cl
 101ea9e:	adc    DWORD PTR [rax],eax
 101eaa0:	add    DWORD PTR [rsi],eax
 101eaa2:	add    al,BYTE PTR [rax]
 101eaa4:	(bad)  
 101eaa5:	xor    al,BYTE PTR [rdx]
 101eaa7:	xor    BYTE PTR [rcx],al
 101eaa9:	add    al,0x1
 101eaab:	add    BYTE PTR [rdx+rax*2],al
 101eaae:	add    BYTE PTR [rax],al
 101eab0:	add    DWORD PTR [rcx],ebx
 101eab2:	or     al,BYTE PTR [rax]
 101eab4:	sbb    DWORD PTR [rcx+rcx*1+0x0],esi
 101eab8:	sbb    DWORD PTR [rax+rcx*1+0x0],esp
 101eabc:	sbb    DWORD PTR [rdi+rax*1+0x0],edx
 101eac0:	sbb    DWORD PTR [rsi+rax*1],esi
 101eac3:	add    BYTE PTR [rcx],bl
 101eac5:	xor    dl,BYTE PTR [rip+0x10401c0]        # 0x205ec8b
 101eacb:	add    BYTE PTR [rdx+rdx*1],al
 101eace:	add    BYTE PTR [rax],al
 101ead0:	add    DWORD PTR [rax],eax
 101ead2:	add    BYTE PTR [rax],al
 101ead4:	add    DWORD PTR [rcx+rax*1],eax
 101ead7:	add    BYTE PTR [rdx+rax*2],al
 101eada:	add    BYTE PTR [rax],al
 101eadc:	add    DWORD PTR [rcx+rax*1],eax
 101eadf:	add    BYTE PTR [rdx+rax*2],al
 101eae2:	add    BYTE PTR [rax],al
 101eae4:	add    DWORD PTR [rdx],ecx
 101eae6:	add    al,0x0
 101eae8:	or     dh,BYTE PTR [rsi+rax*1]
 101eaeb:	add    BYTE PTR [rdx],cl
 101eaed:	xor    al,BYTE PTR [rsi]
 101eaef:	jo     0x101eaf2
 101eaf1:	or     al,BYTE PTR [rax+rax*1]
 101eaf4:	or     dh,BYTE PTR [rsi+rax*1]
 101eaf7:	add    BYTE PTR [rdx],cl
 101eaf9:	xor    al,BYTE PTR [rsi]
 101eafb:	jo     0x101eafe
 101eafd:	(bad)  
 101eafe:	add    al,BYTE PTR [rax]
 101eb00:	(bad)  
 101eb01:	xor    al,BYTE PTR [rdx]
 101eb03:	push   rax
 101eb04:	or     DWORD PTR [rcx+rax*1],eax
 101eb07:	add    BYTE PTR [rdx+rax*2],al
 101eb0a:	add    BYTE PTR [rax],al
 101eb0c:	test   al,0x0
 101eb0f:	add    BYTE PTR [rcx],al
 101eb11:	add    BYTE PTR [rax],al
 101eb13:	add    BYTE PTR [rdi-0x15ffff3e],dh
 101eb19:	ret    0x0
 101eb1c:	rol    ch,0x1
 101eb1f:	add    dl,ch
 101eb21:	ret    0x0
 101eb24:	add    DWORD PTR [rdx],ecx
 101eb26:	add    al,0x0
 101eb28:	or     dh,BYTE PTR [rax+rcx*1]
 101eb2b:	add    BYTE PTR [rdx],cl
 101eb2d:	xor    al,BYTE PTR [rsi]
 101eb2f:	jo     0x101eb32
 101eb31:	or     eax,0x340d0004
 101eb36:	(bad)  
 101eb37:	add    BYTE PTR [rip+0x1500632],cl        # 0x251f16f
 101eb3d:	adc    al,BYTE PTR [rsi]
 101eb3f:	add    BYTE PTR [rdx],dl
 101eb41:	je     0x101eb4a
 101eb43:	add    BYTE PTR [rdx],dl
 101eb45:	xor    al,0x6
 101eb47:	add    BYTE PTR [rdx],dl
 101eb49:	xor    cl,BYTE PTR [rbx]
 101eb4b:	push   rax
 101eb4c:	add    DWORD PTR [rcx],ecx
 101eb4e:	add    al,BYTE PTR [rax]
 101eb50:	or     DWORD PTR [rdx],esi
 101eb52:	add    dl,BYTE PTR [rax+0x1]
 101eb55:	or     DWORD PTR [rdx],eax
 101eb57:	add    BYTE PTR [rcx],cl
 101eb59:	xor    al,BYTE PTR [rdx]
 101eb5b:	push   rax
 101eb5c:	add    DWORD PTR [rdi],edx
 101eb5e:	or     BYTE PTR [rax],al
 101eb60:	(bad)  
 101eb61:	je     0x101eb6b
 101eb63:	add    BYTE PTR [rdi],dl
 101eb65:	fs (bad) 
 101eb67:	add    BYTE PTR [rdi],dl
 101eb69:	xor    al,0x6
 101eb6b:	add    BYTE PTR [rdi],dl
 101eb6d:	xor    dl,BYTE PTR [rax]
 101eb6f:	push   rax
 101eb70:	add    DWORD PTR [rdx],edx
 101eb72:	(bad)  
 101eb73:	add    BYTE PTR [rdx],dl
 101eb75:	je     0x101eb7e
 101eb77:	add    BYTE PTR [rdx],dl
 101eb79:	xor    al,0x6
 101eb7b:	add    BYTE PTR [rdx],dl
 101eb7d:	xor    cl,BYTE PTR [rbx]
 101eb7f:	push   rax
 101eb80:	add    DWORD PTR [rcx],ecx
 101eb82:	add    al,BYTE PTR [rax]
 101eb84:	or     DWORD PTR [rdx],esi
 101eb86:	add    dl,BYTE PTR [rax+0x1]
 101eb89:	or     DWORD PTR [rdx],eax
 101eb8b:	add    BYTE PTR [rcx],cl
 101eb8d:	xor    al,BYTE PTR [rdx]
 101eb8f:	push   rax
 101eb90:	add    DWORD PTR [rsi],eax
 101eb92:	add    al,BYTE PTR [rax]
 101eb94:	(bad)  
 101eb95:	xor    al,BYTE PTR [rdx]
 101eb97:	xor    BYTE PTR [rcx],cl
 101eb99:	(bad)  
 101eb9a:	add    eax,0xa620e00
 101eb9f:	loopne 0x101eba9
 101eba1:	jo     0x101ebaa
 101eba3:	(bad)  
 101eba4:	(bad)  
 101eba5:	xor    BYTE PTR [rax],al
 101eba7:	add    dh,dh
 101eba9:	rol    BYTE PTR [rax],0x0
 101ebac:	add    DWORD PTR [rax],eax
 101ebae:	add    BYTE PTR [rax],al
 101ebb0:	mov    dh,0xc6
 101ebb2:	add    BYTE PTR [rax],al
 101ebb4:	mov    eax,0x10000c7
 101ebb9:	add    BYTE PTR [rax],al
 101ebbb:	add    BYTE PTR [rax+0x90000c7],bh
 101ebc1:	or     al,BYTE PTR [rdx]
 101ebc3:	add    BYTE PTR [rdx],cl
 101ebc5:	xor    al,BYTE PTR [rsi]
 101ebc7:	xor    dh,dh
 101ebc9:	rol    BYTE PTR [rax],0x0
 101ebcc:	add    al,BYTE PTR [rax]
 101ebce:	add    BYTE PTR [rax],al
 101ebd0:	in     eax,dx
 101ebd1:	mov    DWORD PTR [rax],0xc80c00
 101ebd7:	add    BYTE PTR [rcx],al
 101ebd9:	add    BYTE PTR [rax],al
 101ebdb:	add    BYTE PTR [rax+rcx*8],cl
 101ebde:	add    BYTE PTR [rax],al
 101ebe0:	adc    eax,ecx
 101ebe2:	add    BYTE PTR [rax],al
 101ebe4:	sbb    al,0xc8
 101ebe6:	add    BYTE PTR [rax],al
 101ebe8:	add    DWORD PTR [rax],eax
 101ebea:	add    BYTE PTR [rax],al
 101ebec:	sbb    al,0xc8
 101ebee:	add    BYTE PTR [rax],al
 101ebf0:	sbb    DWORD PTR [rbx+rcx*1],ebp
 101ebf3:	add    BYTE PTR [rdx],bl
 101ebf5:	xor    eax,DWORD PTR fs:[rax]
 101ebf8:	sbb    dh,BYTE PTR [rcx+rsi*1]
 101ebfb:	add    BYTE PTR [rdx],bl
 101ebfd:	add    DWORD PTR [rdx],ebp
 101ebff:	add    BYTE PTR [rbx],dl
 101ec01:	lock adc eax,esp
 101ec04:	(bad)  
 101ec06:	or     eax,0x700bc0
 101ec0b:	add    ah,cl
 101ec0d:	mov    edi,0x30000
 101ec12:	add    BYTE PTR [rax],al
 101ec14:	mov    eax,cs
 101ec16:	add    BYTE PTR [rax],al
 101ec18:	(bad)  
 101ec19:	retf   0x0
 101ec1c:	add    DWORD PTR [rax],eax
 101ec1e:	add    BYTE PTR [rax],al
 101ec20:	(bad)  
 101ec21:	retf   0x0
 101ec24:	imul   ecx,edx,0x0
 101ec27:	add    BYTE PTR [rsi+0x10000ca],al
 101ec2d:	add    BYTE PTR [rax],al
 101ec2f:	add    BYTE PTR [rsi-0x7affff36],al
 101ec35:	enter  0x0,0x8d
 101ec39:	retf   0x0
 101ec3c:	(bad)
 101ec40:	add    BYTE PTR [rax],al
 101ec42:	add    BYTE PTR [rax],al
 101ec44:	rex.XB add DWORD PTR [r8],eax
 101ec47:	add    BYTE PTR [rcx],al
 101ec49:	(bad)  
 101ec4a:	add    al,BYTE PTR [rax]
 101ec4c:	(bad)  
 101ec4d:	jb     0x101ec51
 101ec4f:	push   rax
 101ec50:	sbb    DWORD PTR [rdx],ecx
 101ec52:	add    al,BYTE PTR [rax]
 101ec54:	or     dl,BYTE PTR [rdx+0x6]
 101ec57:	xor    dh,dh
 101ec59:	rol    BYTE PTR [rax],0x0
 101ec5c:	add    al,BYTE PTR [rax]
 101ec5e:	add    BYTE PTR [rax],al
 101ec60:	add    al,0xcb
 101ec62:	add    BYTE PTR [rax],al
 101ec64:	and    bl,cl
 101ec66:	add    BYTE PTR [rax],al
 101ec68:	add    DWORD PTR [rax],eax
 101ec6a:	add    BYTE PTR [rax],al
 101ec6c:	and    bl,cl
 101ec6e:	add    BYTE PTR [rax],al
 101ec70:	loop   0x101ec3c
 101ec72:	add    BYTE PTR [rax],al
 101ec74:	rex.X retf 
 101ec76:	add    BYTE PTR [rax],al
 101ec78:	and    dh,al
 101ec7a:	add    DWORD PTR [rax],eax
 101ec7c:	add    BYTE PTR [rax],al
 101ec7e:	add    BYTE PTR [rax],al
 101ec80:	add    DWORD PTR [rsi],eax
 101ec82:	add    al,BYTE PTR [rax]
 101ec84:	(bad)  
 101ec85:	xor    al,BYTE PTR [rdx]
 101ec87:	push   rax
 101ec88:	sbb    DWORD PTR [rdx],ebp
 101ec8a:	or     DWORD PTR [rax],eax
 101ec8c:	sbb    BYTE PTR [rdi+rbx*2+0x1],dh
 101ec90:	sbb    BYTE PTR [rsi+rbx*2+0x1],ah
 101ec94:	sbb    BYTE PTR [rbx*2+0x5a011801],dh
 101ec9b:	add    DWORD PTR [rcx],edx
 101ec9d:	loopne 0x101ec9f
 101ec9f:	add    ah,cl
 101eca1:	mov    edi,0x10000
 101eca6:	add    BYTE PTR [rax],al
 101eca8:	popf   
 101eca9:	retf   
 101ecaa:	add    BYTE PTR [rax],al
 101ecac:	ret    
 101ecad:	int    0x0
 101ecaf:	add    BYTE PTR [rcx],al
 101ecb1:	add    BYTE PTR [rax],al
 101ecb3:	add    bl,al
 101ecb5:	int    0x0
 101ecb7:	add    cl,al
 101ecb9:	or     al,BYTE PTR [rax]
 101ecbb:	add    BYTE PTR [rcx],al
 101ecbd:	add    al,0x1
 101ecbf:	add    BYTE PTR [rdx+rax*2],al
 101ecc2:	add    BYTE PTR [rax],al
 101ecc4:	add    DWORD PTR [rdx],ecx
 101ecc6:	add    al,0x0
 101ecc8:	or     dh,BYTE PTR [rsi+rax*1]
 101eccb:	add    BYTE PTR [rdx],cl
 101eccd:	xor    al,BYTE PTR [rsi]
 101eccf:	jo     0x101ecd2
 101ecd1:	or     al,BYTE PTR [rax+rax*1]
 101ecd4:	or     dh,BYTE PTR [rdx+rax*1+0x0]
 101ecd8:	add    eax,0x1000134
 101ecdd:	adc    BYTE PTR [rbx],al
 101ecdf:	add    BYTE PTR [rax],dl
 101ece1:	rex.X or al,0x60
 101ece4:	or     esi,DWORD PTR [rax]
 101ece6:	add    BYTE PTR [rax],al
 101ece8:	and    DWORD PTR [rip+0x74050002],eax        # 0x7506ecf0
 101ecee:	add    al,0x0
 101ecf0:	ror    bh,1
 101ecf2:	add    BYTE PTR [rax],al
 101ecf4:	add    eax,edx
 101ecf6:	add    BYTE PTR [rax],al
 101ecf8:	fsub   st(4),st
 101ecfa:	add    DWORD PTR [rax],eax
 101ecfc:	and    DWORD PTR [rax],eax
 101ecfe:	add    al,BYTE PTR [rax]
 101ed00:	add    BYTE PTR [rsp+rax*1+0x0],dh
 101ed04:	ror    bh,1
 101ed06:	add    BYTE PTR [rax],al
 101ed08:	add    eax,edx
 101ed0a:	add    BYTE PTR [rax],al
 101ed0c:	fsub   st(4),st
 101ed0e:	add    DWORD PTR [rax],eax
 101ed10:	and    DWORD PTR [rax],eax
 101ed12:	add    BYTE PTR [rax],al
 101ed14:	ror    bh,1
 101ed16:	add    BYTE PTR [rax],al
 101ed18:	add    eax,edx
 101ed1a:	add    BYTE PTR [rax],al
 101ed1c:	fsub   st(4),st
 101ed1e:	add    DWORD PTR [rax],eax
 101ed20:	add    DWORD PTR [rcx+rax*1],eax
 101ed23:	add    BYTE PTR [rdx+rax*2],al
 101ed26:	add    BYTE PTR [rax],al
 101ed28:	add    DWORD PTR [rsi],eax
 101ed2a:	add    al,BYTE PTR [rax]
 101ed2c:	(bad)  
 101ed2d:	xor    al,BYTE PTR [rdx]
 101ed2f:	xor    BYTE PTR [rcx],al
 101ed31:	adc    al,BYTE PTR [rcx]
 101ed33:	add    BYTE PTR [rdx],dl
 101ed35:	rex.X add BYTE PTR [rax],al
 101ed38:	sbb    DWORD PTR [rsp+rax*1],ebx
 101ed3b:	add    BYTE PTR [rdx],cl
 101ed3d:	add    DWORD PTR [rip+0x2700301],ecx        # 0x371f044
 101ed43:	xor    BYTE PTR [rax+0x500000bf],ch
 101ed49:	or     BYTE PTR [rax],al
 101ed4b:	add    BYTE PTR [rcx],ah
 101ed4d:	adc    eax,0x64150004
 101ed52:	or     al,0x1
 101ed54:	or     BYTE PTR [rbx+rdx*1+0x1],dl
 101ed58:	rcl    al,0x0
 101ed5b:	add    BYTE PTR [rax],ah
 101ed5d:	rol    DWORD PTR [rax],1
 101ed5f:	add    BYTE PTR [rax],bh
 101ed61:	in     eax,dx
 101ed62:	add    DWORD PTR [rax],eax
 101ed64:	and    DWORD PTR [rax],eax
 101ed66:	add    BYTE PTR [rax],al
 101ed68:	rcl    al,0x0
 101ed6b:	add    BYTE PTR [rax],ah
 101ed6d:	rol    DWORD PTR [rax],1
 101ed6f:	add    BYTE PTR [rax],bh
 101ed71:	in     eax,dx
 101ed72:	add    DWORD PTR [rax],eax
 101ed74:	add    DWORD PTR [rdx],ecx
 101ed76:	add    al,0x0
 101ed78:	or     dh,BYTE PTR [rsi+rax*1]
 101ed7b:	add    BYTE PTR [rdx],cl
 101ed7d:	xor    al,BYTE PTR [rsi]
 101ed7f:	jo     0x101ed82
 101ed81:	add    al,0x1
 101ed83:	add    BYTE PTR [rdx+rax*2],al
 101ed86:	add    BYTE PTR [rax],al
 101ed88:	sbb    DWORD PTR [rdi],ebx
 101ed8a:	add    eax,0x2d340d00
 101ed8f:	add    BYTE PTR [rip+0x6002a01],cl        # 0x7021796
 101ed95:	jo     0x101ed97
 101ed97:	add    BYTE PTR [rax+0x400000bf],ch
 101ed9d:	add    DWORD PTR [rax],eax
 101ed9f:	add    BYTE PTR [rcx],bl
 101eda1:	es add al,0x0
 101eda4:	adc    al,0x1
 101eda6:	or     DWORD PTR [rcx],eax
 101eda8:	or     eax,0xa8e00bf0
 101edad:	mov    edi,0x8200000
 101edb2:	add    BYTE PTR [rax],al
 101edb4:	and    DWORD PTR [rsi],ebx
 101edb6:	(bad)  
 101edb7:	add    BYTE PTR [rsi],bl
 101edb9:	fs (bad) 
 101edbb:	add    DWORD PTR [rsi],edx
 101edbd:	push   rsp
 101edbe:	or     BYTE PTR [rcx],al
 101edc0:	or     BYTE PTR [rsi+rcx*1],dh
 101edc3:	add    DWORD PTR [rax-0x3dffff2d],eax
 101edc9:	rol    DWORD PTR [rax],cl
 101edcb:	add    BYTE PTR [rax+0x210001ed],ah
 101edd1:	or     BYTE PTR [rdx],al
 101edd3:	add    BYTE PTR [rax],cl
 101edd5:	je     0x101eddd
 101edd7:	add    edx,eax
 101edd9:	rol    DWORD PTR [rax],cl
 101eddb:	add    BYTE PTR [rcx],al
 101eddd:	(bad)  
 101edde:	add    BYTE PTR [rax],al
 101ede0:	mov    ah,0xed
 101ede2:	add    DWORD PTR [rax],eax
 101ede4:	and    DWORD PTR [rax],eax
 101ede6:	add    BYTE PTR [rax],al
 101ede8:	ret    0xd3
 101edeb:	add    BYTE PTR [rcx],al
 101eded:	(bad)  
 101edee:	add    BYTE PTR [rax],al
 101edf0:	mov    ah,0xed
 101edf2:	add    DWORD PTR [rax],eax
 101edf4:	and    DWORD PTR [rax],eax
 101edf6:	add    BYTE PTR [rax],al
 101edf8:	adc    bl,0x0
 101edfb:	add    dl,al
 101edfd:	rol    DWORD PTR [rax],cl
 101edff:	add    BYTE PTR [rax+0x190001ed],ah
 101ee05:	(bad)  
 101ee06:	add    eax,0x83340d00
 101ee0b:	add    BYTE PTR [rip+0x6007e01],cl        # 0x7026c12
 101ee11:	push   rax
 101ee12:	add    BYTE PTR [rax],al
 101ee14:	test   al,0xbf
 101ee16:	add    BYTE PTR [rax],al
 101ee18:	loopne 0x101ee1d
 101ee1a:	add    BYTE PTR [rax],al
 101ee1c:	and    DWORD PTR [rax],edx
 101ee1e:	add    al,0x0
 101ee20:	adc    BYTE PTR [rdx+rax*4+0x0],dh
 101ee24:	or     BYTE PTR [rcx+rax*4+0x0],ah
 101ee28:	movabs al,ds:0x40000d5f40000d5
 101ee31:	out    dx,al
 101ee32:	add    DWORD PTR [rax],eax
 101ee34:	and    DWORD PTR [rax],eax
 101ee36:	add    BYTE PTR [rax],al
 101ee38:	movabs al,ds:0x40000d5f40000d5
 101ee41:	out    dx,al
 101ee42:	add    DWORD PTR [rax],eax
 101ee44:	sbb    DWORD PTR [rdi+rax*1],esp
 101ee47:	add    BYTE PTR [rdx],dl
 101ee49:	fs xchg ecx,eax
 101ee4b:	add    BYTE PTR [rdx],dl
 101ee4d:	xor    al,0x90
 101ee4f:	add    BYTE PTR [rdx],dl
 101ee51:	add    DWORD PTR [rax+rax*1+0x700b],ecx
 101ee58:	test   al,0xbf
 101ee5a:	add    BYTE PTR [rax],al
 101ee5c:	push   rax
 101ee5d:	add    al,0x0
 101ee5f:	add    BYTE PTR [rcx],al
 101ee61:	add    al,0x1
 101ee63:	add    BYTE PTR [rdx+rax*2],al
 101ee66:	add    BYTE PTR [rax],al
 101ee68:	sbb    DWORD PTR [rdx],ebx
 101ee6a:	(bad)  
 101ee6b:	add    BYTE PTR [rbx],cl
 101ee6d:	xchg   edx,eax
 101ee6e:	(bad)  
 101ee6f:	loopne 0x101ee76
 101ee71:	jo     0x101ee77
 101ee73:	(bad)  
 101ee74:	add    edx,DWORD PTR [rax+0x2]
 101ee77:	xor    BYTE PTR [rax+0x480000bf],ch
 101ee7d:	add    BYTE PTR [rax],al
 101ee7f:	add    BYTE PTR [rcx],bl
 101ee81:	sbb    DWORD PTR [rdx],eax
 101ee83:	add    BYTE PTR [rdi],al
 101ee85:	add    DWORD PTR [rbx],ebp
 101ee87:	add    BYTE PTR [rax+0x400000bf],ch
 101ee8d:	add    DWORD PTR [rax],eax
 101ee8f:	add    BYTE PTR [rcx],al
 101ee91:	or     al,BYTE PTR [rax+rax*1]
 101ee94:	or     dh,BYTE PTR [rdx+rax*1+0x0]
 101ee98:	add    eax,0x1000134
 101ee9d:	(bad)  
 101ee9e:	add    al,BYTE PTR [rax]
 101eea0:	(bad)  
 101eea1:	xor    al,BYTE PTR [rdx]
 101eea3:	xor    BYTE PTR [rcx],al
 101eea5:	add    al,0x1
 101eea7:	add    BYTE PTR [rdx+rax*2],al
 101eeaa:	add    BYTE PTR [rax],al
 101eeac:	sbb    DWORD PTR [rbx],ebx
 101eeae:	add    eax,DWORD PTR [rax]
 101eeb0:	or     DWORD PTR [rcx],eax
 101eeb2:	rex.WX add BYTE PTR [rdx],al
 101eeb5:	xor    BYTE PTR [rax],al
 101eeb7:	add    BYTE PTR [rax+0x400000bf],ch
 101eebd:	add    al,BYTE PTR [rax]
 101eebf:	add    BYTE PTR [rcx],al
 101eec1:	add    al,0x1
 101eec3:	add    BYTE PTR [rdx+rax*2],al
 101eec6:	add    BYTE PTR [rax],al
 101eec8:	add    DWORD PTR [rcx+rax*1],eax
 101eecb:	add    BYTE PTR [rdx+rax*2],al
 101eece:	add    BYTE PTR [rax],al
 101eed0:	adc    DWORD PTR [rsi],ebx
 101eed2:	or     BYTE PTR [rax],al
 101eed4:	(bad)  
 101eed5:	je     0x101eee3
 101eed7:	add    BYTE PTR [rcx],bl
 101eed9:	or     eax,DWORD PTR fs:[rax]
 101eedc:	adc    al,0x34
 101eede:	or     al,BYTE PTR [rax]
 101eee0:	(bad)  
 101eee1:	jb     0x101eee5
 101eee3:	loopne 0x101eefd
 101eee5:	jne    0x101eee8
 101eee7:	add    al,dh
 101eee9:	add    BYTE PTR es:[rax],al
 101eeec:	(bad)  
 101eeed:	(bad)  
 101eeee:	(bad)  
 101eeef:	call   QWORD PTR [rax-0xfffe3a]
 101eef5:	(bad)  
 101eef6:	(bad)  
 101eef7:	jmp    QWORD PTR [rax-0x6ffffe3a]
 101eefd:	loopne 0x101eeff
 101eeff:	add    bh,bh
 101ef01:	(bad)  
 101ef02:	(bad)  
 101ef03:	jmp    rsi
 101ef05:	loopne 0x101ef07
 101ef07:	add    BYTE PTR [rax],al
 101ef09:	add    BYTE PTR [rax],al
 101ef0b:	add    al,bh
 101ef0d:	loopne 0x101ef0f
 101ef0f:	add    bh,bh
 101ef11:	(bad)  
 101ef12:	(bad)  
 101ef13:	inc    DWORD PTR [rcx-0x1f]
 101ef16:	add    BYTE PTR [rax],al
 101ef18:	add    DWORD PTR [rax],eax
 101ef1a:	add    BYTE PTR [rax],al
 101ef1c:	push   rdx
 101ef1d:	loope  0x101ef1f
 101ef1f:	add    bh,bh
 101ef21:	(bad)  
 101ef22:	(bad)  
 101ef23:	inc    DWORD PTR [rcx]
 101ef25:	add    al,0x1
 101ef27:	add    BYTE PTR [rdx+riz*2],al
 101ef2a:	add    BYTE PTR [rax],al
 101ef2c:	sbb    DWORD PTR [rip+0x342c000b],edi        # 0x352def3d
 101ef32:	jp     0x101ef34
 101ef34:	sbb    eax,DWORD PTR [rcx]
 101ef36:	jo     0x101ef38
 101ef38:	or     al,0xf0
 101ef3a:	or     ah,al
 101ef3c:	or     al,dl
 101ef3e:	(bad)  
 101ef3f:	rol    BYTE PTR [rax+rsi*2],0x3
 101ef43:	(bad)  
 101ef44:	add    dl,BYTE PTR [rax+0x0]
 101ef47:	add    BYTE PTR [rsi*2+0x27180001],ah
 101ef4e:	add    BYTE PTR [rax],al
 101ef50:	jb     0x101ef55
 101ef52:	add    BYTE PTR [rax],al
 101ef54:	(bad)  
 101ef55:	(bad)  
 101ef56:	(bad)  
 101ef57:	call   QWORD PTR [rax-0x3a]
 101ef5a:	add    DWORD PTR [rax],eax
 101ef5c:	add    BYTE PTR [rax],al
 101ef5e:	add    BYTE PTR [rax],al
 101ef60:	(bad)  
 101ef61:	mov    BYTE PTR [rcx],0x0
 101ef64:	add    DWORD PTR [rax],eax
 101ef66:	add    BYTE PTR [rax],al
 101ef68:	jo     0x101ef30
 101ef6a:	add    DWORD PTR [rax],eax
 101ef6c:	mov    al,0xe1
 101ef6e:	add    BYTE PTR [rax],al
 101ef70:	(bad)  
 101ef71:	(bad)  
 101ef72:	(bad)  
 101ef73:	jmp    FWORD PTR [rdx+riz*8]
 101ef76:	add    BYTE PTR [rax],al
 101ef78:	add    BYTE PTR [rax],al
 101ef7a:	add    BYTE PTR [rax],al
 101ef7c:	xor    edx,esp
 101ef7e:	add    BYTE PTR [rax],al
 101ef80:	add    DWORD PTR [rax],eax
 101ef82:	add    BYTE PTR [rax],al
 101ef84:	in     al,dx
 101ef85:	loop   0x101ef87
 101ef87:	add    BYTE PTR [rdx],al
 101ef89:	add    BYTE PTR [rax],al
 101ef8b:	add    BYTE PTR [rax-0x1c],ah
 101ef8e:	add    BYTE PTR [rax],al
 101ef90:	add    DWORD PTR [rax],eax
 101ef92:	add    BYTE PTR [rax],al
 101ef94:	mov    ebx,0x20000e4
 101ef99:	add    BYTE PTR [rax],al
 101ef9b:	add    BYTE PTR [rcx],bh
 101ef9d:	in     eax,0x0
 101ef9f:	add    BYTE PTR [rcx],al
 101efa1:	add    BYTE PTR [rax],al
 101efa3:	add    BYTE PTR [rsi],bh
 101efa5:	in     eax,0x0
 101efa7:	add    BYTE PTR [rdx],al
 101efa9:	add    BYTE PTR [rax],al
 101efab:	add    bl,al
 101efad:	in     eax,0x0
 101efaf:	add    BYTE PTR [rcx],al
 101efb1:	add    BYTE PTR [rax],al
 101efb3:	add    ch,al
 101efb5:	in     eax,0x0
 101efb7:	add    BYTE PTR [rax],al
 101efb9:	add    BYTE PTR [rax],al
 101efbb:	add    dl,dh
 101efbd:	in     eax,0x0
 101efbf:	add    bh,bh
 101efc1:	(bad)  
 101efc2:	(bad)  
 101efc3:	jmp    QWORD PTR [rcx]
 101efc5:	out    0x0,al
 101efc7:	add    BYTE PTR [rcx],al
 101efc9:	add    BYTE PTR [rax],al
 101efcb:	add    BYTE PTR [rax],dh
 101efcd:	out    0x0,al
 101efcf:	add    BYTE PTR [rax],al
 101efd1:	add    BYTE PTR [rax],al
 101efd3:	add    BYTE PTR [rax-0x1a],bl
 101efd6:	add    BYTE PTR [rax],al
 101efd8:	(bad)  
 101efd9:	(bad)  
 101efda:	(bad)  
 101efdb:	inc    DWORD PTR [rcx]
 101efdd:	add    al,0x1
 101efdf:	add    BYTE PTR [rdx+rax*2],al
 101efe2:	add    BYTE PTR [rax],al
 101efe4:	add    DWORD PTR [rcx+rax*1],eax
 101efe7:	add    BYTE PTR [rdx+rax*2],al
 101efea:	add    BYTE PTR [rax],al
 101efec:	add    DWORD PTR [rcx+rax*1],eax
 101efef:	add    BYTE PTR [rdx+rax*2],al
 101eff2:	add    BYTE PTR [rax],al
 101eff4:	add    DWORD PTR [rbx],ecx
 101eff6:	add    al,0x0
 101eff8:	or     esi,DWORD PTR [rcx+rcx*1]
 101effb:	add    BYTE PTR [rbx],cl
 101effd:	xor    al,BYTE PTR [rdi]
 101efff:	loopne 0x101f022
 101f001:	clts   
 101f003:	add    BYTE PTR [rdi],cl
 101f005:	je     0x101f00f
 101f007:	add    BYTE PTR [rdx],cl
 101f009:	fs (bad) 
 101f00b:	add    BYTE PTR [rip+0x10000654],al        # 0x1101f665
 101f011:	call   0xffffffffe987f016
 101f016:	add    BYTE PTR [rax],al
 101f018:	hlt    
 101f019:	out    dx,eax
 101f01a:	add    DWORD PTR [rax],eax
 101f01c:	and    DWORD PTR [rax],eax
 101f01e:	add    BYTE PTR [rax],al
 101f020:	adc    al,ch
 101f022:	add    BYTE PTR [rax],al
 101f024:	xchg   al,ch
 101f026:	add    BYTE PTR [rax],al
 101f028:	hlt    
 101f029:	out    dx,eax
 101f02a:	add    DWORD PTR [rax],eax
 101f02c:	add    DWORD PTR [rsi],ebx
 101f02e:	or     al,0x0
 101f030:	(bad)  
 101f031:	je     0x101f03e
 101f033:	add    BYTE PTR [rsi],bl
 101f035:	or     al,BYTE PTR fs:[rax]
 101f038:	(bad)  
 101f039:	push   rsp
 101f03a:	or     DWORD PTR [rax],eax
 101f03c:	(bad)  
 101f03d:	xor    al,0x8
 101f03f:	add    BYTE PTR [rsi],bl
 101f041:	xor    bl,BYTE PTR [rdx]
 101f043:	lock sbb al,ah
 101f046:	(bad)  
 101f047:	rol    BYTE PTR [rcx],0x1a
 101f04a:	or     al,BYTE PTR [rax]
 101f04c:	sbb    dh,BYTE PTR [rcx+rcx*1+0x0]
 101f050:	sbb    ah,BYTE PTR [rax+rcx*1+0x0]
 101f054:	sbb    dl,BYTE PTR [rdi+rax*1+0x0]
 101f058:	sbb    dh,BYTE PTR [rsi+rax*1]
 101f05b:	add    BYTE PTR [rdx],bl
 101f05d:	xor    dl,BYTE PTR [rsi]
 101f05f:	loopne 0x101f062
 101f061:	adc    eax,0x74150008
 101f066:	or     BYTE PTR [rax],al
 101f068:	adc    eax,0x15000764
 101f06d:	xor    al,0x6
 101f06f:	add    BYTE PTR [rip+0x11e01132],dl        # 0x12e201a7
 101f075:	and    cl,BYTE PTR [rdx]
 101f077:	add    BYTE PTR [rdx],ah
 101f079:	fs (bad) 
 101f07b:	add    BYTE PTR [rip+0x18000d54],bl        # 0x1901fdd5
 101f081:	xor    al,0xc
 101f083:	add    BYTE PTR [rdx],cl
 101f085:	jb     0x101f08d
 101f087:	lock add al,0xe0
 101f08a:	add    dh,BYTE PTR [rax+0x18]
 101f08d:	jne    0x101f090
 101f08f:	add    BYTE PTR [rax+0x2a],bl
 101f092:	add    BYTE PTR [rax],al
 101f094:	(bad)  
 101f095:	(bad)  
 101f096:	(bad)  
 101f097:	inc    eax
 101f099:	mov    BYTE PTR [rcx],0x0
 101f09c:	add    al,dh
 101f09e:	add    BYTE PTR [rax],al
 101f0a0:	(bad)  
 101f0a1:	(bad)  
 101f0a2:	(bad)  
 101f0a3:	inc    DWORD PTR [rax-0x10]
 101f0a6:	add    BYTE PTR [rax],al
 101f0a8:	add    BYTE PTR [rax],al
 101f0aa:	add    BYTE PTR [rax],al
 101f0ac:	jle    0x101f09e
 101f0ae:	add    BYTE PTR [rax],al
 101f0b0:	(bad)  
 101f0b1:	(bad)  
 101f0b2:	(bad)  
 101f0b3:	inc    DWORD PTR [rcx]
 101f0b5:	clts   
 101f0b7:	add    BYTE PTR [rdi],cl
 101f0b9:	push   rsp
 101f0ba:	or     DWORD PTR [rax],eax
 101f0bc:	sysenter 
 101f0be:	or     BYTE PTR [rax],al
 101f0c0:	rdmsr  
 101f0c2:	or     esi,DWORD PTR [rax+0x21]
 101f0c5:	or     al,BYTE PTR [rax+rax*1]
 101f0c8:	or     ah,ah
 101f0ca:	(bad)  
 101f0cb:	add    BYTE PTR [rip+0xffffffffd0000664],al        # 0xffffffffd101f735
 101f0d1:	lock add BYTE PTR [rax],al
 101f0d4:	ss icebp 
 101f0d6:	add    BYTE PTR [rax],al
 101f0d8:	mov    ah,0xf0
 101f0da:	add    DWORD PTR [rax],eax
 101f0dc:	and    DWORD PTR [rax],eax
 101f0de:	add    BYTE PTR [rax],al
 101f0e0:	shl    al,1
 101f0e2:	add    BYTE PTR [rax],al
 101f0e4:	ss icebp 
 101f0e6:	add    BYTE PTR [rax],al
 101f0e8:	mov    ah,0xf0
 101f0ea:	add    DWORD PTR [rax],eax
 101f0ec:	sbb    DWORD PTR [rip+0x10b0005],ebx        # 0x20cf0f7
 101f0f2:	rex.WX add BYTE PTR [rax+r14*2],al
 101f0f6:	add    esp,DWORD PTR [rax+0x2]
 101f0f9:	xor    BYTE PTR [rax],al
 101f0fb:	add    BYTE PTR [rax+0x400000bf],ch
 101f101:	add    al,BYTE PTR [rax]
 101f103:	add    BYTE PTR [rcx],ah
 101f105:	or     BYTE PTR [rdx],al
 101f107:	add    BYTE PTR [rax],cl
 101f109:	push   rsp
 101f10a:	push   rax
 101f10b:	add    BYTE PTR [rax-0x10ffff0f],dh
 101f111:	icebp  
 101f112:	add    BYTE PTR [rax],al
 101f114:	in     al,dx
 101f115:	lock add DWORD PTR [rax],eax
 101f118:	and    DWORD PTR [rax],eax
 101f11a:	add    BYTE PTR [rax],al
 101f11c:	mov    al,0xf1
 101f11e:	add    BYTE PTR [rax],al
 101f120:	out    dx,eax
 101f121:	icebp  
 101f122:	add    BYTE PTR [rax],al
 101f124:	in     al,dx
 101f125:	lock add DWORD PTR [rax],eax
 101f128:	add    DWORD PTR [rsi],eax
 101f12a:	add    al,BYTE PTR [rax]
 101f12c:	(bad)  
 101f12d:	xor    al,BYTE PTR [rdx]
 101f12f:	xor    BYTE PTR [rcx],dl
 101f131:	sbb    cl,BYTE PTR [rax]
 101f133:	add    BYTE PTR [rdx],bl
 101f135:	xor    al,0xf
 101f137:	add    BYTE PTR [rdx+rdx*2],cl
 101f13a:	or     al,dh
 101f13c:	(bad)  
 101f13d:	loopne 0x101f143
 101f13f:	jo     0x101f144
 101f141:	(bad)  
 101f142:	add    dl,BYTE PTR [rax+0x18]
 101f145:	jne    0x101f148
 101f147:	add    al,ah
 101f149:	xor    eax,DWORD PTR [rax]
 101f14b:	add    bh,bh
 101f14d:	(bad)  
 101f14e:	(bad)  
 101f14f:	inc    eax
 101f151:	mov    DWORD PTR [rcx],0x0
 101f157:	add    al,dl
 101f159:	mov    DWORD PTR [rcx],0x100
 101f15f:	add    al,ah
 101f161:	mov    DWORD PTR [rcx],0xf3d000
 101f167:	add    bh,bh
 101f169:	(bad)  
 101f16a:	(bad)  
 101f16b:	push   QWORD PTR [rip+0xf4]        # 0x101f265
 101f171:	add    BYTE PTR [rax],al
 101f173:	add    BYTE PTR [rdx],bh
 101f175:	hlt    
 101f176:	add    BYTE PTR [rax],al
 101f178:	add    DWORD PTR [rax],eax
 101f17a:	add    BYTE PTR [rax],al
 101f17c:	(bad)  
 101f17d:	hlt    
 101f17e:	add    BYTE PTR [rax],al
 101f180:	add    al,BYTE PTR [rax]
 101f182:	add    BYTE PTR [rax],al
 101f184:	jge    0x101f17b
 101f186:	add    BYTE PTR [rax],al
 101f188:	add    DWORD PTR [rax],eax
 101f18a:	add    BYTE PTR [rax],al
 101f18c:	xchg   edx,eax
 101f18d:	cmc    
 101f18e:	add    BYTE PTR [rax],al
 101f190:	add    BYTE PTR [rax],al
 101f192:	add    BYTE PTR [rax],al
 101f194:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 101f195:	cmc    
 101f196:	add    BYTE PTR [rax],al
 101f198:	(bad)  
 101f199:	(bad)  
 101f19a:	(bad)  
 101f19b:	inc    DWORD PTR [rcx]
 101f19d:	(bad)  
 101f19e:	add    al,BYTE PTR [rax]
 101f1a0:	(bad)  
 101f1a1:	xor    al,BYTE PTR [rdx]
 101f1a3:	push   rax
 101f1a4:	and    DWORD PTR [rax+rcx*1],edx
 101f1a7:	add    BYTE PTR [rsp+riz*8],dl
 101f1aa:	or     DWORD PTR [rax],eax
 101f1ac:	pcmpeqb mm1,QWORD PTR [rax]
 101f1af:	add    BYTE PTR [rdx],cl
 101f1b1:	fs (bad) 
 101f1b3:	add    BYTE PTR [rip+0xffffffffe0000634],al        # 0xffffffffe101f7ed
 101f1b9:	cmc    
 101f1ba:	add    BYTE PTR [rax],al
 101f1bc:	add    dh,dh
 101f1be:	add    BYTE PTR [rax],al
 101f1c0:	pushf  
 101f1c1:	icebp  
 101f1c2:	add    DWORD PTR [rax],eax
 101f1c4:	and    DWORD PTR [rax],eax
 101f1c6:	or     BYTE PTR [rax],al
 101f1c8:	add    ah,ah
 101f1ca:	or     DWORD PTR [rax],eax
 101f1cc:	add    BYTE PTR [rax+rcx*1+0x0],dh
 101f1d0:	add    BYTE PTR [rdi+rax*1+0x0],ah
 101f1d4:	add    BYTE PTR [rsi+rax*1],dh
 101f1d7:	add    al,ah
 101f1d9:	cmc    
 101f1da:	add    BYTE PTR [rax],al
 101f1dc:	add    dh,dh
 101f1de:	add    BYTE PTR [rax],al
 101f1e0:	pushf  
 101f1e1:	icebp  
 101f1e2:	add    DWORD PTR [rax],eax
 101f1e4:	and    DWORD PTR [rax],eax
 101f1e6:	add    BYTE PTR [rax],al
 101f1e8:	loopne 0x101f1df
 101f1ea:	add    BYTE PTR [rax],al
 101f1ec:	add    dh,dh
 101f1ee:	add    BYTE PTR [rax],al
 101f1f0:	pushf  
 101f1f1:	icebp  
 101f1f2:	add    DWORD PTR [rax],eax
 101f1f4:	add    DWORD PTR [rdi],ecx
 101f1f6:	(bad)  
 101f1f7:	add    BYTE PTR [rdi],cl
 101f1f9:	push   rsp
 101f1fa:	or     BYTE PTR [rax],al
 101f1fc:	sysenter 
 101f1fe:	(bad)  
 101f1ff:	add    BYTE PTR [rdi],cl
 101f201:	xor    cl,BYTE PTR [rbx]
 101f203:	(bad)  
 101f204:	and    DWORD PTR [rip+0x74050002],eax        # 0x7506f20c
 101f20a:	(bad)  
 101f20b:	add    al,dh
 101f20d:	test   BYTE PTR [rax],0x0
 101f210:	sbb    esi,edi
 101f212:	add    BYTE PTR [rax],al
 101f214:	hlt    
 101f215:	icebp  
 101f216:	add    DWORD PTR [rax],eax
 101f218:	and    DWORD PTR [rax],eax
 101f21a:	add    BYTE PTR [rax],al
 101f21c:	lock test BYTE PTR [rax],0x0
 101f220:	sbb    esi,edi
 101f222:	add    BYTE PTR [rax],al
 101f224:	hlt    
 101f225:	icebp  
 101f226:	add    DWORD PTR [rax],eax
 101f228:	adc    DWORD PTR [rdx],esp
 101f22a:	or     al,BYTE PTR [rax]
 101f22c:	and    ah,BYTE PTR [rsi+rcx*1+0x0]
 101f230:	sbb    eax,0x18000d54
 101f235:	xor    al,0xc
 101f237:	add    BYTE PTR [rdx],cl
 101f239:	jb     0x101f241
 101f23b:	lock add al,0xe0
 101f23e:	add    dh,BYTE PTR [rax+0x18]
 101f241:	jne    0x101f244
 101f243:	add    BYTE PTR [rax],cl
 101f245:	xor    al,0x0
 101f247:	add    bh,bh
 101f249:	(bad)  
 101f24a:	(bad)  
 101f24b:	jmp    QWORD PTR [rax-0x39]
 101f24e:	add    DWORD PTR [rax],eax
 101f250:	nop
 101f251:	test   DWORD PTR [rax],0xffffff00
 101f257:	call   rax
 101f259:	test   DWORD PTR [rax],0x0
 101f25f:	add    BYTE PTR [rdi],bh
 101f261:	clc    
 101f262:	add    BYTE PTR [rax],al
 101f264:	(bad)  
 101f265:	(bad)  
 101f266:	(bad)  
 101f267:	call   QWORD PTR [rcx]
 101f269:	(bad)  
 101f26a:	or     BYTE PTR [rax],al
 101f26c:	(bad)  
 101f26d:	fs or  al,0x0
 101f270:	sbb    DWORD PTR [rbx+rcx*1+0x0],edx
 101f274:	adc    al,0x34
 101f276:	or     al,BYTE PTR [rax]
 101f278:	(bad)  
 101f279:	jb     0x101f27d
 101f27b:	jo     0x101f295
 101f27d:	jne    0x101f280
 101f27f:	add    BYTE PTR [rax],dh
 101f281:	xor    al,0x0
 101f283:	add    bh,bh
 101f285:	(bad)  
 101f286:	(bad)  
 101f287:	jmp    QWORD PTR [rax]
 101f289:	mov    DWORD PTR [rcx],0xf87000
 101f28f:	add    bh,bh
 101f291:	(bad)  
 101f292:	(bad)  
 101f293:	jmp    QWORD PTR [rbp+0xf8]
 101f299:	add    BYTE PTR [rax],al
 101f29b:	add    ch,dh
 101f29d:	clc    
 101f29e:	add    BYTE PTR [rax],al
 101f2a0:	(bad)  
 101f2a1:	(bad)  
 101f2a2:	(bad)  
 101f2a3:	inc    DWORD PTR [rcx]
 101f2a5:	(bad)  
 101f2a6:	add    al,BYTE PTR [rax]
 101f2a8:	(bad)  
 101f2a9:	xor    al,BYTE PTR [rdx]
 101f2ab:	xor    BYTE PTR [rcx],dl
 101f2ad:	adc    al,0x4
 101f2af:	add    BYTE PTR [rsp+rsi*1],dl
 101f2b2:	or     al,BYTE PTR [rax]
 101f2b4:	(bad)  
 101f2b5:	jb     0x101f2b9
 101f2b7:	jo     0x101f2d1
 101f2b9:	jne    0x101f2bc
 101f2bb:	add    BYTE PTR [rax+0x34],bl
 101f2be:	add    BYTE PTR [rax],al
 101f2c0:	(bad)  
 101f2c1:	(bad)  
 101f2c2:	(bad)  
 101f2c3:	inc    DWORD PTR [rax]
 101f2c5:	mov    DWORD PTR [rcx],0xf95000
 101f2cb:	add    bh,bh
 101f2cd:	(bad)  
 101f2ce:	(bad)  
 101f2cf:	(bad)  
 101f2d0:	jl     0x101f2cb
 101f2d2:	add    BYTE PTR [rax],al
 101f2d4:	add    BYTE PTR [rax],al
 101f2d6:	add    BYTE PTR [rax],al
 101f2d8:	cwde   
 101f2d9:	stc    
 101f2da:	add    BYTE PTR [rax],al
 101f2dc:	(bad)  
 101f2dd:	(bad)  
 101f2de:	(bad)  
 101f2df:	call   QWORD PTR [rcx]
 101f2e1:	sbb    DWORD PTR [rsi],eax
 101f2e3:	add    BYTE PTR [rcx],bl
 101f2e5:	or     eax,DWORD PTR fs:[rax]
 101f2e8:	adc    al,0x34
 101f2ea:	or     al,BYTE PTR [rax]
 101f2ec:	(bad)  
 101f2ed:	jb     0x101f2f1
 101f2ef:	jo     0x101f309
 101f2f1:	jne    0x101f2f4
 101f2f3:	add    BYTE PTR [rax-0xffffcc],al
 101f2f9:	(bad)  
 101f2fa:	(bad)  
 101f2fb:	jmp    QWORD PTR [rax-0x3ffffe39]
 101f301:	stc    
 101f302:	add    BYTE PTR [rax],al
 101f304:	(bad)  
 101f305:	(bad)  
 101f306:	(bad)  
 101f307:	push   rsp
 101f309:	stc    
 101f30a:	add    BYTE PTR [rax],al
 101f30c:	add    BYTE PTR [rax],al
 101f30e:	add    BYTE PTR [rax],al
 101f310:	adc    edi,edx
 101f312:	add    BYTE PTR [rax],al
 101f314:	(bad)  
 101f315:	(bad)  
 101f316:	(bad)  
 101f317:	call   QWORD PTR [rcx]
 101f319:	adc    al,0x4
 101f31b:	add    BYTE PTR [rsp+rsi*1],dl
 101f31e:	or     al,BYTE PTR [rax]
 101f320:	(bad)  
 101f321:	jb     0x101f325
 101f323:	jo     0x101f33d
 101f325:	jne    0x101f328
 101f327:	add    BYTE PTR [rax-0xffffcc],ch
 101f32d:	(bad)  
 101f32e:	(bad)  
 101f32f:	jmp    rax
 101f331:	mov    BYTE PTR [rcx],0x0
 101f334:	rex cli 
 101f336:	add    BYTE PTR [rax],al
 101f338:	(bad)  
 101f339:	(bad)  
 101f33a:	(bad)  
 101f33b:	jmp    FWORD PTR [rdx+rdi*8+0x0]
 101f33f:	add    BYTE PTR [rax],al
 101f341:	add    BYTE PTR [rax],al
 101f343:	add    BYTE PTR [rax-0xffff06],cl
 101f349:	(bad)  
 101f34a:	(bad)  
 101f34b:	inc    DWORD PTR [rcx]
 101f34d:	add    al,0x1
 101f34f:	add    BYTE PTR [rdx+riz*2],al
 101f352:	add    BYTE PTR [rax],al
 101f354:	adc    DWORD PTR [rbx],esp
 101f356:	or     al,BYTE PTR [rax]
 101f358:	and    esi,DWORD PTR [rbp+rcx*1+0x0]
 101f35c:	(bad)  
 101f35d:	fs or  al,0x0
 101f360:	sbb    DWORD PTR [rbx+rcx*1+0x0],edx
 101f364:	adc    al,0x34
 101f366:	or     al,BYTE PTR [rax]
 101f368:	(bad)  
 101f369:	jb     0x101f36d
 101f36b:	loopne 0x101f385
 101f36d:	jne    0x101f370
 101f36f:	add    al,dl
 101f371:	xor    al,0x0
 101f373:	add    bh,bh
 101f375:	(bad)  
 101f376:	(bad)  
 101f377:	inc    DWORD PTR [rax-0x2ffffe39]
 101f37d:	cli    
 101f37e:	add    BYTE PTR [rax],al
 101f380:	(bad)  
 101f381:	(bad)  
 101f382:	(bad)  
 101f383:	call   QWORD PTR [rbx+rdi*8]
 101f386:	add    BYTE PTR [rax],al
 101f388:	add    BYTE PTR [rax],al
 101f38a:	add    BYTE PTR [rax],al
 101f38c:	push   rax
 101f38d:	sti    
 101f38e:	add    BYTE PTR [rax],al
 101f390:	(bad)  
 101f391:	(bad)  
 101f392:	(bad)  
 101f393:	call   QWORD PTR [rcx]
 101f395:	lar    eax,WORD PTR [rax]
 101f398:	(bad)  
 101f399:	jb     0x101f39d
 101f39b:	xor    BYTE PTR [rax],bl
 101f39d:	jne    0x101f3a0
 101f39f:	add    al,bh
 101f3a1:	xor    al,0x0
 101f3a3:	add    bh,bh
 101f3a5:	(bad)  
 101f3a6:	(bad)  
 101f3a7:	inc    DWORD PTR [rax-0x39]
 101f3aa:	add    DWORD PTR [rax],eax
 101f3ac:	cmp    bl,0x0
 101f3af:	add    bh,bh
 101f3b1:	(bad)  
 101f3b2:	(bad)  
 101f3b3:	jmp    QWORD PTR [rbx+rdi*8+0x0]
 101f3ba:	add    BYTE PTR [rax],al
 101f3bc:	mov    esp,0xff0000fb
 101f3c1:	(bad)  
 101f3c2:	(bad)  
 101f3c3:	inc    DWORD PTR [rcx]
 101f3c5:	add    al,0x1
 101f3c7:	add    BYTE PTR [rdx+riz*2],al
 101f3ca:	add    BYTE PTR [rax],al
 101f3cc:	add    DWORD PTR [rsi],eax
 101f3ce:	add    al,BYTE PTR [rax]
 101f3d0:	(bad)  
 101f3d1:	xor    al,BYTE PTR [rdx]
 101f3d3:	xor    BYTE PTR [rcx],al
 101f3d5:	add    al,0x1
 101f3d7:	add    BYTE PTR [rdx+rax*2],al
 101f3da:	add    BYTE PTR [rax],al
 101f3dc:	adc    DWORD PTR [rbx],edx
 101f3de:	add    al,BYTE PTR [rax]
 101f3e0:	or     dl,BYTE PTR [rdx+0x6]
 101f3e3:	xor    BYTE PTR [rax],bl
 101f3e5:	jne    0x101f3e8
 101f3e7:	add    BYTE PTR [rax+0x44],dl
 101f3ea:	add    BYTE PTR [rax],al
 101f3ec:	(bad)  
 101f3ed:	(bad)  
 101f3ee:	(bad)  
 101f3ef:	inc    DWORD PTR [rax-0x3ffffe35]
 101f3f5:	std    
 101f3f6:	add    BYTE PTR [rax],al
 101f3f8:	(bad)  
 101f3f9:	(bad)  
 101f3fa:	(bad)  
 101f3fb:	call   rsi
 101f3fd:	std    
 101f3fe:	add    BYTE PTR [rax],al
 101f400:	add    BYTE PTR [rax],al
 101f402:	add    BYTE PTR [rax],al
 101f404:	jmp    0x101f403
 101f406:	add    BYTE PTR [rax],al
 101f408:	(bad)  
 101f409:	(bad)  
 101f40a:	(bad)  
 101f40b:	inc    DWORD PTR [rcx]
 101f40d:	add    al,0x1
 101f40f:	add    BYTE PTR [rdx+rax*2],al
 101f412:	add    BYTE PTR [rax],al
 101f414:	and    DWORD PTR [rip+0x34050002],eax        # 0x3506f41c
 101f41a:	add    al,0x0
 101f41c:	adc    dh,bh
 101f41e:	add    BYTE PTR [rax],al
 101f420:	and    dh,bh
 101f422:	add    BYTE PTR [rax],al
 101f424:	or     al,0xf4
 101f426:	add    DWORD PTR [rax],eax
 101f428:	and    DWORD PTR [rax],eax
 101f42a:	add    BYTE PTR [rax],al
 101f42c:	adc    dh,bh
 101f42e:	add    BYTE PTR [rax],al
 101f430:	and    dh,bh
 101f432:	add    BYTE PTR [rax],al
 101f434:	or     al,0xf4
 101f436:	add    DWORD PTR [rax],eax
 101f438:	adc    DWORD PTR [rbx],edx
 101f43a:	add    al,BYTE PTR [rax]
 101f43c:	or     dl,BYTE PTR [rdx+0x6]
 101f43f:	xor    BYTE PTR [rax],bl
 101f441:	jne    0x101f444
 101f443:	add    BYTE PTR [rax-0xffffbc],al
 101f449:	(bad)  
 101f44a:	(bad)  
 101f44b:	jmp    QWORD PTR [rax-0xfffe35]
 101f451:	(bad)  
 101f452:	(bad)  
 101f453:	inc    DWORD PTR [rax]
 101f455:	add    BYTE PTR [rax],al
 101f457:	add    BYTE PTR [rax-0x2],ah
 101f45a:	add    BYTE PTR [rax],al
 101f45c:	(bad)  
 101f45d:	(bad)  
 101f45e:	(bad)  
 101f45f:	push   QWORD PTR [rsi-0x2]
 101f462:	add    BYTE PTR [rax],al
 101f464:	add    BYTE PTR [rax],al
 101f466:	add    BYTE PTR [rax],al
 101f468:	test   esi,edi
 101f46a:	add    BYTE PTR [rax],al
 101f46c:	(bad)  
 101f46d:	(bad)  
 101f46e:	(bad)  
 101f46f:	call   QWORD PTR [rcx]
 101f471:	sbb    BYTE PTR [rax+rax*1],al
 101f474:	sbb    BYTE PTR [rdx+rcx*1],dh
 101f477:	add    BYTE PTR [rdx],cl
 101f479:	push   rdx
 101f47a:	(bad)  
 101f47b:	jo     0x101f495
 101f47d:	jne    0x101f480
 101f47f:	add    BYTE PTR [rax-0xffffbc],dh
 101f485:	(bad)  
 101f486:	(bad)  
 101f487:	call   QWORD PTR [rax-0x33]
 101f48a:	add    DWORD PTR [rax],eax
 101f48c:	add    BYTE PTR [rax],al
 101f48e:	add    BYTE PTR [rax],al
 101f490:	(bad)  
 101f491:	int    0x1
 101f493:	add    BYTE PTR [rax],al
 101f495:	add    BYTE PTR [rax],al
 101f497:	add    BYTE PTR [rax-0x33],dh
 101f49a:	add    DWORD PTR [rax],eax
	...
 101f4a4:	sar    dh,0x0
 101f4a7:	add    bh,bh
 101f4a9:	(bad)  
 101f4aa:	(bad)  
 101f4ab:	(bad)  
 101f4ac:	(bad)  
 101f4ae:	add    BYTE PTR [rax],al
 101f4b0:	add    BYTE PTR [rax],al
 101f4b2:	add    BYTE PTR [rax],al
 101f4b4:	in     al,0xfe
 101f4b6:	add    BYTE PTR [rax],al
 101f4b8:	add    al,BYTE PTR [rax]
 101f4ba:	add    BYTE PTR [rax],al
 101f4bc:	repz inc BYTE PTR [rax]
 101f4bf:	add    BYTE PTR [rax],al
 101f4c1:	add    BYTE PTR [rax],al
 101f4c3:	add    BYTE PTR [rdi+rdi*8],bl
 101f4c6:	add    BYTE PTR [rax],al
 101f4c8:	(bad)  
 101f4c9:	(bad)  
 101f4ca:	(bad)  
 101f4cb:	call   QWORD PTR [rcx]
 101f4cd:	adc    DWORD PTR [rcx],eax
 101f4cf:	add    BYTE PTR [rcx],cl
 101f4d1:	and    al,BYTE PTR [rax]
 101f4d3:	add    BYTE PTR [rax],bl
 101f4d5:	jne    0x101f4d8
 101f4d7:	add    al,ah
 101f4d9:	add    BYTE PTR [rax],r8b
 101f4dc:	(bad)  
 101f4dd:	(bad)  
 101f4de:	(bad)  
 101f4df:	call   QWORD PTR [rax+0x500001cd]
 101f4e5:	inc    DWORD PTR [rax]
 101f4e7:	add    bh,bh
 101f4e9:	(bad)  
 101f4ea:	(bad)  
 101f4eb:	call   QWORD PTR [rcx]
 101f4ed:	adc    eax,DWORD PTR [rdx]
 101f4ef:	add    BYTE PTR [rdx],cl
 101f4f1:	push   rdx
 101f4f2:	(bad)  
 101f4f3:	xor    BYTE PTR [rax],bl
 101f4f5:	jne    0x101f4f8
 101f4f7:	add    BYTE PTR [rax],dl
 101f4f9:	add    BYTE PTR [r8],r8b
 101f4fc:	(bad)  
 101f4fd:	(bad)  
 101f4fe:	(bad)  
 101f4ff:	call   QWORD PTR [rax-0x36]
 101f502:	add    DWORD PTR [rax],eax
 101f504:	add    BYTE PTR [rax],al
 101f506:	add    BYTE PTR [rax],al
 101f508:	(bad)  
 101f509:	retf   0x1
 101f50c:	nop
 101f50d:	inc    DWORD PTR [rax]
 101f50f:	add    bh,bh
 101f511:	(bad)  
 101f512:	(bad)  
 101f513:	jmp    FWORD PTR [rdi+rdi*8+0x0]
 101f51a:	add    BYTE PTR [rax],al
 101f51c:	mov    edi,0x10000ff
 101f521:	add    BYTE PTR [rax],al
 101f523:	add    ch,cl
 101f525:	inc    DWORD PTR [rax]
 101f527:	add    bh,bh
 101f529:	(bad)  
 101f52a:	(bad)  
 101f52b:	call   QWORD PTR [rcx]
 101f52d:	sbb    eax,0x641d0006
 101f532:	or     al,BYTE PTR [rax]
 101f534:	sbb    BYTE PTR [rcx+rcx*1],dh
 101f537:	add    BYTE PTR [rdx],cl
 101f539:	push   rdx
 101f53a:	(bad)  
 101f53b:	jo     0x101f555
 101f53d:	jne    0x101f540
 101f53f:	add    BYTE PTR [rax+0x45],al
 101f542:	add    BYTE PTR [rax],al
 101f544:	(bad)  
 101f545:	(bad)  
 101f546:	(bad)  
 101f547:	push   rax
 101f549:	int    0x1
 101f54b:	add    BYTE PTR [rax],al
 101f54d:	add    BYTE PTR [rax],al
 101f54f:	add    BYTE PTR [rax],al
 101f551:	(bad)  
 101f552:	add    DWORD PTR [rax],eax
 101f554:	loopne 0x101f555
 101f556:	add    BYTE PTR [rax],al
 101f558:	(bad)  
 101f559:	(bad)  
 101f55a:	(bad)  
 101f55b:	dec    DWORD PTR [rdx]
 101f55d:	add    BYTE PTR [rcx],al
 101f55f:	add    BYTE PTR [rcx],al
 101f561:	add    BYTE PTR [rax],al
 101f563:	add    BYTE PTR [rbp+0x0],bh
 101f566:	add    DWORD PTR [rax],eax
 101f568:	add    BYTE PTR [rax],al
 101f56a:	add    BYTE PTR [rax],al
 101f56c:	nop
 101f56d:	add    BYTE PTR [rcx],al
 101f56f:	add    bh,bh
 101f571:	(bad)  
 101f572:	(bad)  
 101f573:	call   QWORD PTR [rcx]
 101f575:	sbb    al,0x8
 101f577:	add    BYTE PTR [rsp+rsi*1],bl
 101f57a:	str    WORD PTR [rdi]
 101f57d:	jb     0x101f587
 101f57f:	lock (bad) 
 101f581:	loopne 0x101f587
 101f583:	jo     0x101f588
 101f585:	(bad)  
 101f586:	add    dl,BYTE PTR [rax+0x18]
 101f589:	jne    0x101f58c
 101f58b:	add    BYTE PTR [rax+0x45],dh
 101f58e:	add    BYTE PTR [rax],al
 101f590:	(bad)  
 101f591:	(bad)  
 101f592:	(bad)  
 101f593:	inc    DWORD PTR [rax]
 101f595:	rol    BYTE PTR [rcx],cl
 101f597:	add    BYTE PTR [rax],al
 101f599:	add    BYTE PTR [rax],al
 101f59b:	add    BYTE PTR [rax],dl
 101f59d:	rol    BYTE PTR [rcx],cl
 101f59f:	add    BYTE PTR [rcx],al
 101f5a1:	add    BYTE PTR [rax],al
 101f5a3:	add    BYTE PTR [rax],ah
 101f5a5:	rol    BYTE PTR [rcx],cl
 101f5a7:	add    BYTE PTR [rdx],al
 101f5a9:	add    BYTE PTR [rax],al
 101f5ab:	add    BYTE PTR [rax],dh
 101f5ad:	rol    BYTE PTR [rcx],cl
 101f5af:	add    BYTE PTR [rbx],al
 101f5b1:	add    BYTE PTR [rax],al
 101f5b3:	add    BYTE PTR [rax-0x2e],al
 101f5b6:	add    DWORD PTR [rax],eax
 101f5b8:	rol    BYTE PTR [rax],1
 101f5ba:	add    DWORD PTR [rax],eax
 101f5bc:	(bad)  
 101f5bd:	(bad)  
 101f5be:	(bad)  
 101f5bf:	inc    DWORD PTR [rcx+rax*1]
 101f5c2:	add    DWORD PTR [rax],eax
 101f5c4:	add    BYTE PTR [rax],al
 101f5c6:	add    BYTE PTR [rax],al
 101f5c8:	add    DWORD PTR [rcx],r8d
 101f5cb:	add    BYTE PTR [rcx],al
 101f5cd:	add    BYTE PTR [rax],al
 101f5cf:	add    BYTE PTR [rax+0x1],cl
 101f5d2:	add    DWORD PTR [rax],eax
 101f5d4:	add    al,BYTE PTR [rax]
 101f5d6:	add    BYTE PTR [rax],al
 101f5d8:	sbb    BYTE PTR [rdx],al
 101f5da:	add    DWORD PTR [rax],eax
 101f5dc:	add    eax,DWORD PTR [rax]
 101f5de:	add    BYTE PTR [rax],al
 101f5e0:	sbb    al,0x2
 101f5e2:	add    DWORD PTR [rax],eax
 101f5e4:	add    al,0x0
 101f5e6:	add    BYTE PTR [rax],al
 101f5e8:	pop    QWORD PTR [rdx]
 101f5ea:	add    DWORD PTR [rax],eax
 101f5ec:	add    eax,DWORD PTR [rax]
 101f5ee:	add    BYTE PTR [rax],al
 101f5f0:	lahf   
 101f5f1:	add    al,BYTE PTR [rcx]
 101f5f3:	add    BYTE PTR [rdx],al
 101f5f5:	add    BYTE PTR [rax],al
 101f5f7:	add    dh,dl
 101f5f9:	add    al,BYTE PTR [rcx]
 101f5fb:	add    BYTE PTR [rcx],al
 101f5fd:	add    BYTE PTR [rax],al
 101f5ff:	add    dh,ah
 101f601:	add    al,BYTE PTR [rcx]
 101f603:	add    BYTE PTR [rax],al
 101f605:	add    BYTE PTR [rax],al
 101f607:	add    dh,dh
 101f609:	add    al,BYTE PTR [rcx]
 101f60b:	add    bh,bh
 101f60d:	(bad)  
 101f60e:	(bad)  
 101f60f:	inc    DWORD PTR [rcx]
 101f611:	(bad)  
 101f612:	add    al,BYTE PTR [rax]
 101f614:	(bad)  
 101f615:	xor    al,BYTE PTR [rdx]
 101f617:	xor    BYTE PTR [rcx],al
 101f619:	(bad)  
 101f61a:	add    al,BYTE PTR [rax]
 101f61c:	(bad)  
 101f61d:	xor    al,BYTE PTR [rdx]
 101f61f:	xor    BYTE PTR [rcx],bl
 101f621:	(bad)  
 101f622:	or     DWORD PTR [rax],eax
 101f624:	es fs pop rbp
 101f627:	add    BYTE PTR [rdx],ah
 101f629:	xor    al,0x5c
 101f62b:	add    BYTE PTR [rip+0x7005601],dl        # 0x8024c32
 101f631:	loopne 0x101f638
 101f633:	jo     0x101f639
 101f635:	push   rax
 101f636:	add    BYTE PTR [rax],al
 101f638:	and    al,0x75
 101f63a:	add    DWORD PTR [rax],eax
 101f63c:	movabs al,ds:0xff000002a2000045
 101f645:	(bad)  
 101f646:	(bad)  
 101f647:	jmp    QWORD PTR [rax-0x6ffffe28]
 101f64d:	add    eax,DWORD PTR [rcx]
 101f64f:	add    bh,bh
 101f651:	(bad)  
 101f652:	(bad)  
 101f653:	push   rsi
 101f655:	add    eax,DWORD PTR [rcx]
 101f657:	add    BYTE PTR [rax],al
 101f659:	add    BYTE PTR [rax],al
 101f65b:	add    BYTE PTR [rbx],ch
 101f65d:	(bad)  
 101f65e:	add    DWORD PTR [rax],eax
 101f660:	(bad)  
 101f661:	(bad)  
 101f662:	(bad)  
 101f663:	inc    DWORD PTR [rcx]
 101f665:	or     al,BYTE PTR [rdx]
 101f667:	add    BYTE PTR [rdx],cl
 101f669:	xor    al,BYTE PTR [rsi]
 101f66b:	xor    BYTE PTR [rcx],bl
 101f66d:	cs (bad) 
 101f66f:	add    BYTE PTR [rsp+rsi*1],bl
 101f672:	jns    0x101f674
 101f674:	or     eax,DWORD PTR [rcx]
 101f676:	jb     0x101f678
 101f678:	add    al,0x70
 101f67a:	add    esp,DWORD PTR [rax+0x2]
 101f67d:	push   rax
 101f67e:	add    BYTE PTR [rax],al
 101f680:	and    al,0x75
 101f682:	add    DWORD PTR [rax],eax
 101f684:	rol    BYTE PTR [rbp+0x0],1
 101f687:	add    BYTE PTR [rdx-0xfffffd],al
 101f68d:	(bad)  
 101f68e:	(bad)  
 101f68f:	push   rax
 101f691:	rol    DWORD PTR [rcx],cl
 101f693:	add    BYTE PTR [rax],al
 101f695:	add    BYTE PTR [rax],al
 101f697:	add    BYTE PTR [rax],al
 101f699:	(bad)  
 101f69a:	add    DWORD PTR [rax],eax
 101f69c:	add    BYTE PTR [rax],al
 101f69e:	add    BYTE PTR [rax],al
 101f6a0:	adc    ah,dl
 101f6a2:	add    DWORD PTR [rax],eax
 101f6a4:	add    BYTE PTR [rax],al
 101f6a6:	add    BYTE PTR [rax],al
 101f6a8:	and    ah,dl
 101f6aa:	add    DWORD PTR [rax],eax
 101f6ac:	add    BYTE PTR [rax],al
 101f6ae:	add    BYTE PTR [rax],al
 101f6b0:	xor    ah,dl
 101f6b2:	add    DWORD PTR [rax],eax
 101f6b4:	add    BYTE PTR [rax],al
 101f6b6:	add    BYTE PTR [rax],al
 101f6b8:	rex (bad) 
 101f6ba:	add    DWORD PTR [rax],eax
 101f6bc:	movabs al,ds:0xe6ffffffff000106
 101f6c5:	(bad)  
 101f6c6:	add    DWORD PTR [rax],eax
 101f6c8:	add    BYTE PTR [rax],al
 101f6ca:	add    BYTE PTR [rax],al
 101f6cc:	and    al,BYTE PTR [rdi]
 101f6ce:	add    DWORD PTR [rax],eax
 101f6d0:	add    eax,DWORD PTR [rax]
 101f6d2:	add    BYTE PTR [rax],al
 101f6d4:	lahf   
 101f6d5:	(bad)  
 101f6d6:	add    DWORD PTR [rax],eax
 101f6d8:	add    BYTE PTR [rax],al
 101f6da:	add    BYTE PTR [rax],al
 101f6dc:	clc    
 101f6dd:	(bad)  
 101f6de:	add    DWORD PTR [rax],eax
 101f6e0:	(bad)  
 101f6e1:	(bad)  
 101f6e2:	(bad)  
 101f6e3:	call   QWORD PTR [rcx]
 101f6e5:	sub    cl,BYTE PTR [rax+rax*1]
 101f6e8:	sub    dh,BYTE PTR [rax+rbx*1+0x0]
 101f6ec:	es fs (bad) 
 101f6ef:	add    BYTE PTR [rdx],ah
 101f6f1:	xor    al,0x16
 101f6f3:	add    BYTE PTR [rsi],dl
 101f6f5:	repnz or al,0xf0
 101f6f8:	or     ah,al
 101f6fa:	or     al,dl
 101f6fc:	(bad)  
 101f6fd:	rol    BYTE PTR [rax+rdx*2],0x18
 101f701:	jne    0x101f704
 101f703:	add    BYTE PTR [rax],al
 101f705:	rex.RX add BYTE PTR [rax],r8b
 101f708:	(bad)  
 101f709:	(bad)  
 101f70a:	(bad)  
 101f70b:	inc    DWORD PTR [rax]
 101f70d:	fld    DWORD PTR [rcx]
 101f70f:	add    bh,bh
 101f711:	(bad)  
 101f712:	(bad)  
 101f713:	call   QWORD PTR [rax]
 101f715:	fld    DWORD PTR [rcx]
 101f717:	add    BYTE PTR [rcx],al
 101f719:	add    BYTE PTR [rax],al
 101f71b:	add    BYTE PTR [rax],ah
 101f71d:	fld    DWORD PTR [rcx]
 101f71f:	add    BYTE PTR [rcx],al
 101f721:	add    BYTE PTR [rax],al
 101f723:	add    BYTE PTR [rax],dh
 101f725:	fld    DWORD PTR [rcx]
 101f727:	add    BYTE PTR [rbx],al
 101f729:	add    BYTE PTR [rax],al
 101f72b:	add    BYTE PTR [rax-0x27],al
 101f72e:	add    DWORD PTR [rax],eax
 101f730:	add    al,0x0
 101f732:	add    BYTE PTR [rax],al
 101f734:	push   rax
 101f735:	fld    DWORD PTR [rcx]
 101f737:	add    BYTE PTR [rip+0x60000000],al        # 0x6101f73d
 101f73d:	fld    DWORD PTR [rcx]
 101f73f:	add    BYTE PTR [rsi],al
 101f741:	add    BYTE PTR [rax],al
 101f743:	add    BYTE PTR [rax-0x27],dh
 101f746:	add    DWORD PTR [rax],eax
 101f748:	add    DWORD PTR [rax],eax
 101f74a:	add    BYTE PTR [rax],al
 101f74c:	sbb    cl,0x1
 101f74f:	add    bh,bh
 101f751:	(bad)  
 101f752:	(bad)  
 101f753:	call   QWORD PTR [rax+0x300001d9]
 101f759:	or     BYTE PTR [rcx],al
 101f75b:	add    bh,bh
 101f75d:	(bad)  
 101f75e:	(bad)  
 101f75f:	push   QWORD PTR [rax+0x8]
 101f762:	add    DWORD PTR [rax],eax
 101f764:	add    DWORD PTR [rax],eax
 101f766:	add    BYTE PTR [rax],al
 101f768:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 101f769:	or     BYTE PTR [rcx],al
 101f76b:	add    BYTE PTR [rbx],al
 101f76d:	add    BYTE PTR [rax],al
 101f76f:	add    bl,al
 101f771:	or     BYTE PTR [rcx],al
 101f773:	add    BYTE PTR [rax+rax*1],al
 101f776:	add    BYTE PTR [rax],al
 101f778:	cmc    
 101f779:	or     BYTE PTR [rcx],al
 101f77b:	add    BYTE PTR [rip+0x10000000],al        # 0x1101f781
 101f781:	or     DWORD PTR [rcx],eax
 101f783:	add    BYTE PTR [rsi],al
 101f785:	add    BYTE PTR [rax],al
 101f787:	add    BYTE PTR [rcx+rcx*1],dl
 101f78a:	add    DWORD PTR [rax],eax
 101f78c:	(bad)  
 101f78d:	add    BYTE PTR [rax],al
 101f78f:	add    BYTE PTR [rbx+0x9],dh
 101f792:	add    DWORD PTR [rax],eax
 101f794:	(bad)  
 101f795:	add    BYTE PTR [rax],al
 101f797:	add    BYTE PTR [rbx+0x5000109],al
 101f79d:	add    BYTE PTR [rax],al
 101f79f:	add    al,bl
 101f7a1:	or     DWORD PTR [rcx],eax
 101f7a3:	add    BYTE PTR [rax+rax*1],al
 101f7a6:	add    BYTE PTR [rax],al
 101f7a8:	loop   0x101f7b3
 101f7aa:	add    DWORD PTR [rax],eax
 101f7ac:	add    eax,DWORD PTR [rax]
 101f7ae:	add    BYTE PTR [rax],al
 101f7b0:	repnz or DWORD PTR [rcx],eax
 101f7b3:	add    BYTE PTR [rax],cl
 101f7b5:	add    BYTE PTR [rax],al
 101f7b7:	add    BYTE PTR [rdx+rcx*1],cl
 101f7ba:	add    DWORD PTR [rax],eax
 101f7bc:	or     DWORD PTR [rax],eax
 101f7be:	add    BYTE PTR [rax],al
 101f7c0:	(bad)  
 101f7c1:	or     al,BYTE PTR [rcx]
 101f7c3:	add    bh,bh
 101f7c5:	(bad)  
 101f7c6:	(bad)  
 101f7c7:	call   FWORD PTR [rcx]
 101f7c9:	xor    eax,0x11c000a
 101f7ce:	(bad)  
 101f7cf:	add    DWORD PTR [rip+0x9e00bf0],ecx        # 0xae203c5
 101f7d5:	rol    BYTE PTR [rdi],1
 101f7d7:	rol    BYTE PTR [rip+0x3600470],0x30        # 0x461fc4e
 101f7de:	add    dl,BYTE PTR [rax+0x24]
 101f7e1:	jne    0x101f7e4
 101f7e3:	add    BYTE PTR [rax],dh
 101f7e5:	rex.RX add BYTE PTR [rax],r8b
 101f7e8:	and    cl,BYTE PTR [rax]
 101f7ea:	add    BYTE PTR [rax],al
 101f7ec:	(bad)  
 101f7ed:	(bad)  
 101f7ee:	(bad)  
 101f7ef:	call   QWORD PTR [rax]
 101f7f1:	fiadd  DWORD PTR [rcx]
 101f7f3:	add    bh,bh
 101f7f5:	(bad)  
 101f7f6:	(bad)  
 101f7f7:	jmp    QWORD PTR [rax]
 101f7f9:	fiadd  DWORD PTR [rcx]
 101f7fb:	add    bh,bh
 101f7fd:	(bad)  
 101f7fe:	(bad)  
 101f7ff:	push   QWORD PTR [rax]
 101f801:	fiadd  DWORD PTR [rcx]
 101f803:	add    bh,bh
 101f805:	(bad)  
 101f806:	(bad)  
 101f807:	inc    DWORD PTR [rax-0x26]
 101f80a:	add    DWORD PTR [rax],eax
 101f80c:	(bad)  
 101f80d:	(bad)  
 101f80e:	(bad)  
 101f80f:	call   QWORD PTR [rax-0x26]
 101f812:	add    DWORD PTR [rax],eax
 101f814:	(bad)  
 101f815:	(bad)  
 101f816:	(bad)  
 101f817:	jmp    QWORD PTR [rax-0x26]
 101f81a:	add    DWORD PTR [rax],eax
 101f81c:	add    eax,0x70000000
 101f821:	fiadd  DWORD PTR [rcx]
 101f823:	add    BYTE PTR [rip+0xffffffff80000000],al        # 0xffffffff8101f829
 101f829:	fiadd  DWORD PTR [rcx]
 101f82b:	add    BYTE PTR [rip+0xffffffff90000000],al        # 0xffffffff9101f831
 101f831:	fiadd  DWORD PTR [rcx]
 101f833:	add    BYTE PTR [rax+0xa],dl
 101f836:	add    DWORD PTR [rax],eax
 101f838:	(bad)  
 101f839:	(bad)  
 101f83a:	(bad)  
 101f83b:	(bad)  
 101f83c:	fisttp DWORD PTR [rdx]
 101f83e:	add    DWORD PTR [rax],eax
 101f840:	add    al,BYTE PTR [rax]
 101f842:	add    BYTE PTR [rax],al
 101f844:	or     r8d,DWORD PTR [r9]
 101f847:	add    bh,bh
 101f849:	(bad)  
 101f84a:	(bad)  
 101f84b:	(bad)  
 101f84c:	fmul   QWORD PTR [rbx]
 101f84e:	add    DWORD PTR [rax],eax
 101f850:	add    eax,0xc2000000
 101f855:	or     al,0x1
 101f857:	add    BYTE PTR [rdi],al
 101f859:	add    BYTE PTR [rax],al
 101f85b:	add    BYTE PTR [rbp+0xd],cl
 101f85e:	add    DWORD PTR [rax],eax
 101f860:	add    eax,0x6a000000
 101f865:	or     eax,0xffff0001
 101f86a:	(bad)  
 101f86b:	inc    DWORD PTR [rcx]
 101f86d:	clts   
 101f86f:	add    BYTE PTR [rdi],cl
 101f871:	push   rsp
 101f872:	(bad)  
 101f873:	add    BYTE PTR [rdi],cl
 101f875:	xor    al,0x6
 101f877:	add    BYTE PTR [rdi],cl
 101f879:	xor    cl,BYTE PTR [rbx]
 101f87b:	(bad)  
 101f87c:	adc    DWORD PTR [rbx],esp
 101f87e:	or     BYTE PTR [rax],al
 101f880:	and    esi,DWORD PTR [rdx+rdx*1+0x0]
 101f884:	(bad)  
 101f885:	adc    DWORD PTR fs:[rax],eax
 101f888:	sbb    esi,DWORD PTR [rax+rdx*1]
 101f88b:	add    BYTE PTR [rdi],cl
 101f88d:	ror    BYTE PTR [rax],cl
 101f88f:	push   rax
 101f890:	sbb    BYTE PTR [rbp+0x1],dh
 101f893:	add    BYTE PTR [rax+0x46],ah
 101f896:	add    BYTE PTR [rax],al
 101f898:	(bad)  
 101f899:	(bad)  
 101f89a:	(bad)  
 101f89b:	call   rax
 101f89d:	(bad)  
 101f89e:	add    DWORD PTR [rax],eax
 101f8a0:	add    BYTE PTR [rax],al
 101f8a2:	add    BYTE PTR [rax],al
 101f8a4:	loopne 0x101f874
 101f8a6:	add    DWORD PTR [rax],eax
 101f8a8:	add    DWORD PTR [rax],eax
 101f8aa:	add    BYTE PTR [rax],al
 101f8ac:	lock (bad) 
 101f8ae:	add    DWORD PTR [rax],eax
 101f8b0:	add    al,BYTE PTR [rax]
 101f8b2:	add    BYTE PTR [rax],al
 101f8b4:	add    bh,cl
 101f8b6:	add    DWORD PTR [rax],eax
 101f8b8:	rex (bad) 
 101f8ba:	add    DWORD PTR [rax],eax
 101f8bc:	(bad)  
 101f8bd:	(bad)  
 101f8be:	(bad)  
 101f8bf:	inc    DWORD PTR [rdi+0x10e]
 101f8c5:	add    BYTE PTR [rax],al
 101f8c7:	add    BYTE PTR [rax-0xfffef2],bl
 101f8cd:	(bad)  
 101f8ce:	(bad)  
 101f8cf:	call   FWORD PTR [rbp+0x10e]
 101f8d5:	add    BYTE PTR [rax],al
 101f8d7:	add    bl,cl
 101f8d9:	(bad)  
 101f8da:	add    DWORD PTR [rax],eax
 101f8dc:	(bad)  
 101f8dd:	(bad)  
 101f8de:	(bad)  
 101f8df:	jmp    rcx
 101f8e1:	(bad)  
 101f8e2:	add    DWORD PTR [rax],eax
 101f8e4:	add    BYTE PTR [rax],al
 101f8e6:	add    BYTE PTR [rax],al
 101f8e8:	jmp    0x201f9fb
 101f8ed:	add    BYTE PTR [rax],al
 101f8ef:	add    ah,bh
 101f8f1:	(bad)  
 101f8f2:	add    DWORD PTR [rax],eax
 101f8f4:	add    al,BYTE PTR [rax]
 101f8f6:	add    BYTE PTR [rax],al
 101f8f8:	add    BYTE PTR [rdi],cl
 101f8fa:	add    DWORD PTR [rax],eax
 101f8fc:	add    eax,DWORD PTR [rax]
 101f8fe:	add    BYTE PTR [rax],al
 101f900:	fisttp QWORD PTR [rdi]
 101f902:	add    DWORD PTR [rax],eax
 101f904:	add    al,BYTE PTR [rax]
 101f906:	add    BYTE PTR [rax],al
 101f908:	in     eax,dx
 101f909:	sgdt   [rax]
 101f90c:	add    DWORD PTR [rax],eax
 101f90e:	add    BYTE PTR [rax],al
 101f910:	std    
 101f911:	sgdt   [rax]
 101f914:	add    BYTE PTR [rax],al
 101f916:	add    BYTE PTR [rax],al
 101f918:	or     eax,0xff000110
 101f91d:	(bad)  
 101f91e:	(bad)  
 101f91f:	call   QWORD PTR [rdx]
 101f921:	adc    BYTE PTR [rcx],al
 101f923:	add    BYTE PTR [rdx],al
 101f925:	add    BYTE PTR [rax],al
 101f927:	add    BYTE PTR [rdx],ah
 101f929:	adc    BYTE PTR [rcx],al
 101f92b:	add    BYTE PTR [rcx],al
 101f92d:	add    BYTE PTR [rax],al
 101f92f:	add    BYTE PTR [rdx],dh
 101f931:	adc    BYTE PTR [rcx],al
 101f933:	add    BYTE PTR [rax],al
 101f935:	add    BYTE PTR [rax],al
 101f937:	add    BYTE PTR [rdx+0x10],al
 101f93a:	add    DWORD PTR [rax],eax
 101f93c:	(bad)  
 101f93d:	(bad)  
 101f93e:	(bad)  
 101f93f:	inc    DWORD PTR [rax+rdx*1+0x1]
 101f943:	add    BYTE PTR [rdx],al
 101f945:	add    BYTE PTR [rax],al
 101f947:	add    BYTE PTR [rax+rdx*1+0x1],dl
 101f94b:	add    BYTE PTR [rcx],al
 101f94d:	add    BYTE PTR [rax],al
 101f94f:	add    BYTE PTR [rax+rdx*1+0x1],ah
 101f953:	add    BYTE PTR [rax],al
 101f955:	add    BYTE PTR [rax],al
 101f957:	add    BYTE PTR [rax+rdx*1+0x1],dh
 101f95b:	add    bh,bh
 101f95d:	(bad)  
 101f95e:	(bad)  
 101f95f:	call   FWORD PTR [rcx]
 101f961:	xor    ecx,DWORD PTR [rcx]
 101f963:	add    BYTE PTR [rdx],bl
 101f965:	add    DWORD PTR [rax+0x9f00b00],esp
 101f96b:	loopne 0x101f974
 101f96d:	rol    BYTE PTR [rip+0x3600470],0x30        # 0x461fde4
 101f974:	add    dl,BYTE PTR [rax+0x0]
 101f977:	add    BYTE PTR [rsi*2+0x46900001],ah
 101f97e:	add    BYTE PTR [rax],al
 101f980:	repnz add al,0x0
 101f983:	add    bh,bh
 101f985:	(bad)  
 101f986:	(bad)  
 101f987:	jmp    QWORD PTR [rax-0x2e]
 101f98a:	add    DWORD PTR [rax],eax
 101f98c:	add    BYTE PTR [rax],al
 101f98e:	add    BYTE PTR [rax],al
 101f990:	jo     0x101f964
 101f992:	add    DWORD PTR [rax],eax
 101f994:	add    DWORD PTR [rax],eax
 101f996:	add    BYTE PTR [rax],al
 101f998:	adc    dl,0x1
 101f99b:	add    BYTE PTR [rdx],al
 101f99d:	add    BYTE PTR [rax],al
 101f99f:	add    BYTE PTR [rax+0x30001d2],dl
 101f9a5:	add    BYTE PTR [rax],al
 101f9a7:	add    BYTE PTR [rax+0x30001d2],ah
 101f9ad:	add    BYTE PTR [rax],al
 101f9af:	add    BYTE PTR [rax+0x30001d2],dh
 101f9b5:	add    BYTE PTR [rax],al
 101f9b7:	add    al,al
 101f9b9:	rol    BYTE PTR [rcx],cl
 101f9bb:	add    BYTE PTR [rsi],al
 101f9bd:	add    BYTE PTR [rax],al
 101f9bf:	add    al,dl
 101f9c1:	rol    BYTE PTR [rcx],cl
 101f9c3:	add    BYTE PTR [rdi],al
 101f9c5:	add    BYTE PTR [rax],al
 101f9c7:	add    al,ah
 101f9c9:	rol    BYTE PTR [rcx],cl
 101f9cb:	add    BYTE PTR [rdi],al
 101f9cd:	add    BYTE PTR [rax],al
 101f9cf:	add    al,dh
 101f9d1:	rol    BYTE PTR [rcx],cl
 101f9d3:	add    BYTE PTR [rdi],al
 101f9d5:	add    BYTE PTR [rax],al
 101f9d7:	add    BYTE PTR [rax],al
 101f9d9:	rol    DWORD PTR [rcx],cl
 101f9db:	add    BYTE PTR [rdi],al
 101f9dd:	add    BYTE PTR [rax],al
 101f9df:	add    BYTE PTR [rax],dl
 101f9e1:	rol    DWORD PTR [rcx],cl
 101f9e3:	add    BYTE PTR [rdi],al
 101f9e5:	add    BYTE PTR [rax],al
 101f9e7:	add    BYTE PTR [rax],ah
 101f9e9:	rol    DWORD PTR [rcx],cl
 101f9eb:	add    BYTE PTR [rbx],al
 101f9ed:	add    BYTE PTR [rax],al
 101f9ef:	add    BYTE PTR [rax],dh
 101f9f1:	rol    DWORD PTR [rcx],cl
 101f9f3:	add    BYTE PTR [rbx],al
 101f9f5:	add    BYTE PTR [rax],al
 101f9f7:	add    BYTE PTR [rax-0x2d],al
 101f9fa:	add    DWORD PTR [rax],eax
 101f9fc:	(bad)  
 101f9fd:	add    BYTE PTR [rax],al
 101f9ff:	add    BYTE PTR [rax-0x2d],dl
 101fa02:	add    DWORD PTR [rax],eax
 101fa04:	sldt   WORD PTR [rax]
 101fa07:	add    BYTE PTR [rax-0x2d],ah
 101fa0a:	add    DWORD PTR [rax],eax
 101fa0c:	add    eax,DWORD PTR [rax]
 101fa0e:	add    BYTE PTR [rax],al
 101fa10:	jo     0x101f9e5
 101fa12:	add    DWORD PTR [rax],eax
 101fa14:	add    eax,DWORD PTR [rax]
 101fa16:	add    BYTE PTR [rax],al
 101fa18:	adc    bl,0x1
 101fa1b:	add    BYTE PTR [rax-0xfffef0],dh
 101fa21:	(bad)  
 101fa22:	(bad)  
 101fa23:	(bad)  
 101fa24:	(bad)  
 101fa25:	adc    BYTE PTR [rcx],al
 101fa27:	add    BYTE PTR [rax],al
 101fa29:	add    BYTE PTR [rax],al
 101fa2b:	add    BYTE PTR [rsi],bl
 101fa2d:	adc    DWORD PTR [rcx],eax
 101fa2f:	add    BYTE PTR [rcx],al
 101fa31:	add    BYTE PTR [rax],al
 101fa33:	add    BYTE PTR [rbx],ah
 101fa35:	adc    DWORD PTR [rcx],eax
 101fa37:	add    BYTE PTR [rdx],al
 101fa39:	add    BYTE PTR [rax],al
 101fa3b:	add    BYTE PTR [rax],ch
 101fa3d:	adc    DWORD PTR [rcx],eax
 101fa3f:	add    BYTE PTR [rbx],al
 101fa41:	add    BYTE PTR [rax],al
 101fa43:	add    BYTE PTR [rcx+rdx*1+0x1],al
 101fa47:	add    BYTE PTR [rdx],al
 101fa49:	add    BYTE PTR [rax],al
 101fa4b:	add    BYTE PTR [rbp+0x11],dl
 101fa4e:	add    DWORD PTR [rax],eax
 101fa50:	add    DWORD PTR [rax],eax
 101fa52:	add    BYTE PTR [rax],al
 101fa54:	adc    WORD PTR [rcx],ax
 101fa57:	add    BYTE PTR [rax],al
 101fa59:	add    BYTE PTR [rax],al
 101fa5b:	add    BYTE PTR [rdi+0x11],dh
 101fa5e:	add    DWORD PTR [rax],eax
 101fa60:	(bad)  
 101fa61:	(bad)  
 101fa62:	(bad)  
 101fa63:	dec    DWORD PTR [rax+0x3000111]
 101fa69:	add    BYTE PTR [rax],al
 101fa6b:	add    BYTE PTR [rcx+rdx*1+0x20001],ah
 101fa72:	add    BYTE PTR [rax],al
 101fa74:	mov    ch,0x11
 101fa76:	add    DWORD PTR [rax],eax
 101fa78:	add    DWORD PTR [rax],eax
 101fa7a:	add    BYTE PTR [rax],al
 101fa7c:	(bad)  
 101fa7d:	adc    DWORD PTR [rcx],eax
 101fa7f:	add    BYTE PTR [rax],al
 101fa81:	add    BYTE PTR [rax],al
 101fa83:	add    bh,dl
 101fa85:	adc    DWORD PTR [rcx],eax
 101fa87:	add    bh,bh
 101fa89:	(bad)  
 101fa8a:	(bad)  
 101fa8b:	(bad)  
 101fa8c:	call   0x401fba2
 101fa91:	add    BYTE PTR [rax],al
 101fa93:	add    BYTE PTR [rdx+rdx*1],al
 101fa96:	add    DWORD PTR [rax],eax
 101fa98:	add    al,BYTE PTR [rax]
 101fa9a:	add    BYTE PTR [rax],al
 101fa9c:	adc    eax,0x1000112
 101faa1:	add    BYTE PTR [rax],al
 101faa3:	add    BYTE PTR [rsi],ah
 101faa5:	adc    al,BYTE PTR [rcx]
 101faa7:	add    BYTE PTR [rax],al
 101faa9:	add    BYTE PTR [rax],al
 101faab:	add    BYTE PTR [rdi],dh
 101faad:	adc    al,BYTE PTR [rcx]
 101faaf:	add    bh,bh
 101fab1:	(bad)  
 101fab2:	(bad)  
 101fab3:	dec    DWORD PTR [rax+0x12]
 101fab6:	add    DWORD PTR [rax],eax
 101fab8:	add    eax,DWORD PTR [rax]
 101faba:	add    BYTE PTR [rax],al
 101fabc:	ja     0x101fad0
 101fabe:	add    DWORD PTR [rax],eax
 101fac0:	(bad)  
 101fac1:	add    BYTE PTR [rax],al
 101fac3:	add    BYTE PTR [rdx+rdx*1+0x70001],ch
 101faca:	add    BYTE PTR [rax],al
 101facc:	add    edx,DWORD PTR [rbx]
 101face:	add    DWORD PTR [rax],eax
 101fad0:	or     al,BYTE PTR [rax]
 101fad2:	add    BYTE PTR [rax],al
 101fad4:	rex adc eax,DWORD PTR [rcx]
 101fad7:	add    BYTE PTR [rdi],al
 101fad9:	add    BYTE PTR [rax],al
 101fadb:	add    BYTE PTR [rdx+0x13],ch
 101fade:	add    DWORD PTR [rax],eax
 101fae0:	(bad)  
 101fae1:	add    BYTE PTR [rax],al
 101fae3:	add    BYTE PTR [rbp+0x13],dh
 101fae6:	add    DWORD PTR [rax],eax
 101fae8:	add    eax,DWORD PTR [rax]
 101faea:	add    BYTE PTR [rax],al
 101faec:	adc    BYTE PTR [rbx],0x1
 101faef:	add    BYTE PTR [rdx],al
 101faf1:	add    BYTE PTR [rax],al
 101faf3:	add    BYTE PTR [rcx+0x1000113],dl
 101faf9:	add    BYTE PTR [rax],al
 101fafb:	add    BYTE PTR [rdx+0x113],ah
 101fb01:	add    BYTE PTR [rax],al
 101fb03:	add    BYTE PTR [rbx-0xfffeed],dh
 101fb09:	(bad)  
 101fb0a:	(bad)  
 101fb0b:	inc    esp
 101fb0d:	adc    eax,DWORD PTR [rcx]
 101fb0f:	add    BYTE PTR [rdi],al
 101fb11:	add    BYTE PTR [rax],al
 101fb13:	add    ch,dl
 101fb15:	adc    eax,DWORD PTR [rcx]
 101fb17:	add    BYTE PTR [rdi],cl
 101fb19:	add    BYTE PTR [rax],al
 101fb1b:	add    BYTE PTR [rsi+0x14],ah
 101fb1e:	add    DWORD PTR [rax],eax
 101fb20:	adc    BYTE PTR [rax],al
 101fb22:	add    BYTE PTR [rax],al
 101fb24:	and    dl,BYTE PTR [rip+0xf0001]        # 0x110fb2b
 101fb2a:	add    BYTE PTR [rax],al
 101fb2c:	sub    eax,0x7000115
 101fb31:	add    BYTE PTR [rax],al
 101fb33:	add    BYTE PTR [rcx+0x15],dl
 101fb36:	add    DWORD PTR [rax],eax
 101fb38:	(bad)  
 101fb39:	add    BYTE PTR [rax],al
 101fb3b:	add    BYTE PTR [rbp+rdx*1+0x1],bl
 101fb3f:	add    BYTE PTR [rbx],al
 101fb41:	add    BYTE PTR [rax],al
 101fb43:	add    BYTE PTR [rdi+0x15],ah
 101fb46:	add    DWORD PTR [rax],eax
 101fb48:	add    al,BYTE PTR [rax]
 101fb4a:	add    BYTE PTR [rax],al
 101fb4c:	js     0x101fb63
 101fb4e:	add    DWORD PTR [rax],eax
 101fb50:	add    DWORD PTR [rax],eax
 101fb52:	add    BYTE PTR [rax],al
 101fb54:	mov    DWORD PTR [rip+0x1],edx        # 0x101fb5b
 101fb5a:	add    BYTE PTR [rax],al
 101fb5c:	(bad)  
 101fb5d:	adc    eax,0xffff0001
 101fb62:	(bad)  
 101fb63:	call   FWORD PTR [rcx]
 101fb65:	cmp    DWORD PTR [rcx],ecx
 101fb67:	add    BYTE PTR [rax],ch
 101fb69:	xor    al,0x7f
 101fb6b:	add    BYTE PTR [rdi],dl
 101fb6d:	add    DWORD PTR [rsi+0x0],esi
 101fb70:	or     al,dh
 101fb72:	(bad)  
 101fb73:	loopne 0x101fb79
 101fb75:	jo     0x101fb7a
 101fb77:	(bad)  
 101fb78:	add    dl,BYTE PTR [rax+0x0]
 101fb7b:	add    BYTE PTR [rsi*2+0x46c00001],ah
 101fb82:	add    BYTE PTR [rax],al
 101fb84:	movabs ds:0x20ffffffff000003,al
 101fb8d:	(bad)  
 101fb8e:	add    DWORD PTR [rax],eax
 101fb90:	add    BYTE PTR [rax],al
 101fb92:	add    BYTE PTR [rax],al
 101fb94:	xor    dh,cl
 101fb96:	add    DWORD PTR [rax],eax
 101fb98:	add    DWORD PTR [rax],eax
 101fb9a:	add    BYTE PTR [rax],al
 101fb9c:	rex (bad) 
 101fb9e:	add    DWORD PTR [rax],eax
 101fba0:	add    DWORD PTR [rax],eax
 101fba2:	add    BYTE PTR [rax],al
 101fba4:	push   rax
 101fba5:	(bad)  
 101fba6:	add    DWORD PTR [rax],eax
 101fba8:	add    DWORD PTR [rax],eax
 101fbaa:	add    BYTE PTR [rax],al
 101fbac:	(bad)  
 101fbad:	(bad)  
 101fbae:	add    DWORD PTR [rax],eax
 101fbb0:	add    al,0x0
 101fbb2:	add    BYTE PTR [rax],al
 101fbb4:	jo     0x101fb84
 101fbb6:	add    DWORD PTR [rax],eax
 101fbb8:	add    al,0x0
 101fbba:	add    BYTE PTR [rax],al
 101fbbc:	or     dh,0x1
 101fbbf:	add    BYTE PTR [rax+rax*1],al
 101fbc2:	add    BYTE PTR [rax],al
 101fbc4:	nop
 101fbc5:	(bad)  
 101fbc6:	add    DWORD PTR [rax],eax
 101fbc8:	add    DWORD PTR [rax],eax
 101fbca:	add    BYTE PTR [rax],al
 101fbcc:	movabs al,ds:0xb0000000010001ce
 101fbd5:	(bad)  
 101fbd6:	add    DWORD PTR [rax],eax
 101fbd8:	rcl    BYTE PTR [rip+0xffffffffffff0001],1        # 0x100fbdf
 101fbde:	(bad)  
 101fbdf:	jmp    QWORD PTR [rip+0x116]        # 0x101fcfb
 101fbe5:	add    BYTE PTR [rax],al
 101fbe7:	add    BYTE PTR [rbx+0x16],cl
 101fbea:	add    DWORD PTR [rax],eax
 101fbec:	add    DWORD PTR [rax],eax
 101fbee:	add    BYTE PTR [rax],al
 101fbf0:	(bad)  
 101fbf1:	(bad)  
 101fbf2:	add    DWORD PTR [rax],eax
 101fbf4:	add    al,0x0
 101fbf6:	add    BYTE PTR [rax],al
 101fbf8:	leave  
 101fbf9:	(bad)  
 101fbfa:	add    DWORD PTR [rax],eax
 101fbfc:	(bad)  
 101fbfd:	add    BYTE PTR [rax],al
 101fbff:	add    BYTE PTR [rsi+0x17],ch
 101fc02:	add    DWORD PTR [rax],eax
 101fc04:	(bad)  
 101fc05:	add    BYTE PTR [rax],al
 101fc07:	add    BYTE PTR [rcx+0x1000117],cl
 101fc0d:	add    BYTE PTR [rax],al
 101fc0f:	add    BYTE PTR [rdi+rdx*1+0x1],dl
 101fc16:	add    BYTE PTR [rax],al
 101fc18:	lahf   
 101fc19:	(bad)  
 101fc1a:	add    DWORD PTR [rax],eax
 101fc1c:	(bad)  
 101fc1d:	(bad)  
 101fc1e:	(bad)  
 101fc1f:	call   QWORD PTR [rcx]
 101fc21:	(bad)  
 101fc22:	or     al,BYTE PTR [rax]
 101fc24:	(bad)  
 101fc25:	xor    al,0x14
 101fc27:	add    BYTE PTR [rdi],dl
 101fc29:	mov    dl,0x10
 101fc2b:	lock (bad) 
 101fc2d:	loopne 0x101fc3b
 101fc2f:	ror    BYTE PTR [rdx],1
 101fc31:	ror    BYTE PTR [rax],0x70
 101fc34:	(bad)  
 101fc35:	(bad)  
 101fc36:	(bad)  
 101fc37:	push   rax
 101fc38:	sbb    BYTE PTR [rbp+0x1],dh
 101fc3b:	add    al,dh
 101fc3d:	rex.RX add BYTE PTR [rax],r8b
 101fc40:	(bad)  
 101fc41:	(bad)  
 101fc42:	(bad)  
 101fc43:	jmp    rax
 101fc45:	(bad)  
 101fc46:	add    DWORD PTR [rax],eax
 101fc48:	add    BYTE PTR [rax],al
 101fc4a:	add    BYTE PTR [rax],al
 101fc4c:	lock (bad) 
 101fc4e:	add    DWORD PTR [rax],eax
 101fc50:	add    BYTE PTR [rax],al
 101fc52:	add    BYTE PTR [rax],al
 101fc54:	add    ch,dl
 101fc56:	add    DWORD PTR [rax],eax
 101fc58:	add    al,BYTE PTR [rax]
 101fc5a:	add    BYTE PTR [rax],al
 101fc5c:	adc    ch,dl
 101fc5e:	add    DWORD PTR [rax],eax
 101fc60:	add    al,BYTE PTR [rax]
 101fc62:	add    BYTE PTR [rax],al
 101fc64:	and    ch,dl
 101fc66:	add    DWORD PTR [rax],eax
 101fc68:	add    al,BYTE PTR [rax]
 101fc6a:	add    BYTE PTR [rax],al
 101fc6c:	xor    ch,dl
 101fc6e:	add    DWORD PTR [rax],eax
 101fc70:	add    eax,0x40000000
 101fc75:	(bad)  
 101fc76:	add    DWORD PTR [rax],eax
 101fc78:	add    al,BYTE PTR [rax]
 101fc7a:	add    BYTE PTR [rax],al
 101fc7c:	push   rax
 101fc7d:	(bad)  
 101fc7e:	add    DWORD PTR [rax],eax
 101fc80:	add    al,BYTE PTR [rax]
 101fc82:	add    BYTE PTR [rax],al
 101fc84:	(bad)  
 101fc85:	(bad)  
 101fc86:	add    DWORD PTR [rax],eax
 101fc88:	add    BYTE PTR [rax],al
 101fc8a:	add    BYTE PTR [rax],al
 101fc8c:	jo     0x101fc63
 101fc8e:	add    DWORD PTR [rax],eax
 101fc90:	loopne 0x101fca9
 101fc92:	add    DWORD PTR [rax],eax
 101fc94:	(bad)  
 101fc95:	(bad)  
 101fc96:	(bad)  
 101fc97:	call   FWORD PTR [rax]
 101fc99:	sbb    BYTE PTR [rcx],al
 101fc9b:	add    BYTE PTR [rax],al
 101fc9d:	add    BYTE PTR [rax],al
 101fc9f:	add    BYTE PTR [rcx],ah
 101fca1:	sbb    BYTE PTR [rcx],al
 101fca3:	add    BYTE PTR [rdx],al
 101fca5:	add    BYTE PTR [rax],al
 101fca7:	add    BYTE PTR [rbp+0x5000118],dh
 101fcad:	add    BYTE PTR [rax],al
 101fcaf:	add    BYTE PTR [rcx+0x6000118],bh
 101fcb5:	add    BYTE PTR [rax],al
 101fcb7:	add    BYTE PTR [rcx],dh
 101fcb9:	sbb    DWORD PTR [rcx],eax
 101fcbb:	add    BYTE PTR [rip+0x41000000],al        # 0x4201fcc1
 101fcc1:	sbb    DWORD PTR [rcx],eax
 101fcc3:	add    BYTE PTR [rdx],al
 101fcc5:	add    BYTE PTR [rax],al
 101fcc7:	add    BYTE PTR [rdi+0x9000119],al
 101fccd:	add    BYTE PTR [rax],al
 101fccf:	add    BYTE PTR [rcx+0x119],bl
 101fcd5:	add    BYTE PTR [rax],al
 101fcd7:	add    BYTE PTR [rcx-0xfffee7],ah
 101fcdd:	(bad)  
 101fcde:	(bad)  
 101fcdf:	inc    DWORD PTR [rcx]
 101fce1:	clts   
 101fce3:	add    BYTE PTR [rdi],cl
 101fce5:	or     BYTE PTR fs:[rax],al
 101fce8:	sysenter 
 101fcea:	(bad)  
 101fceb:	add    BYTE PTR [rdi],cl
 101fced:	xor    cl,BYTE PTR [rbx]
 101fcef:	jo     0x101fd12
 101fcf1:	add    eax,0x54050002
 101fcf6:	(bad)  
 101fcf7:	add    al,dl
 101fcf9:	sbb    DWORD PTR [rcx],eax
 101fcfb:	add    al,dh
 101fcfd:	sbb    DWORD PTR [rcx],eax
 101fcff:	add    al,ah
 101fd01:	cld    
 101fd02:	add    DWORD PTR [rax],eax
 101fd04:	and    DWORD PTR [rax],eax
 101fd06:	add    al,BYTE PTR [rax]
 101fd08:	add    BYTE PTR [rsi+rax*1+0x0],dl
 101fd0c:	rcr    BYTE PTR [rcx],1
 101fd0e:	add    DWORD PTR [rax],eax
 101fd10:	lock sbb DWORD PTR [rcx],eax
 101fd13:	add    al,ah
 101fd15:	cld    
 101fd16:	add    DWORD PTR [rax],eax
 101fd18:	and    DWORD PTR [rax],eax
 101fd1a:	add    BYTE PTR [rax],al
 101fd1c:	rcr    BYTE PTR [rcx],1
 101fd1e:	add    DWORD PTR [rax],eax
 101fd20:	lock sbb DWORD PTR [rcx],eax
 101fd23:	add    al,ah
 101fd25:	cld    
 101fd26:	add    DWORD PTR [rax],eax
 101fd28:	add    DWORD PTR [rdi],ecx
 101fd2a:	(bad)  
 101fd2b:	add    BYTE PTR [rdi],cl
 101fd2d:	or     BYTE PTR fs:[rax],al
 101fd30:	sysenter 
 101fd32:	(bad)  
 101fd33:	add    BYTE PTR [rdi],cl
 101fd35:	xor    cl,BYTE PTR [rbx]
 101fd37:	jo     0x101fd5a
 101fd39:	add    eax,0x54050002
 101fd3e:	(bad)  
 101fd3f:	add    BYTE PTR [rax-0x5ffffee6],al
 101fd45:	sbb    al,BYTE PTR [rcx]
 101fd47:	add    BYTE PTR [rax],ch
 101fd49:	std    
 101fd4a:	add    DWORD PTR [rax],eax
 101fd4c:	and    DWORD PTR [rax],eax
 101fd4e:	add    al,BYTE PTR [rax]
 101fd50:	add    BYTE PTR [rsi+rax*1+0x0],dl
 101fd54:	sbb    BYTE PTR [rdx],0x1
 101fd57:	add    BYTE PTR [rax+0x2800011a],ah
 101fd5d:	std    
 101fd5e:	add    DWORD PTR [rax],eax
 101fd60:	and    DWORD PTR [rax],eax
 101fd62:	add    BYTE PTR [rax],al
 101fd64:	sbb    BYTE PTR [rdx],0x1
 101fd67:	add    BYTE PTR [rax+0x2800011a],ah
 101fd6d:	std    
 101fd6e:	add    DWORD PTR [rax],eax
 101fd70:	sbb    DWORD PTR [rax+0x9],eax
 101fd73:	add    BYTE PTR [rdi],ch
 101fd75:	xor    al,0xeb
 101fd77:	add    BYTE PTR [rsi],bl
 101fd79:	add    esp,esp
 101fd7b:	add    BYTE PTR [rdi],cl
 101fd7d:	lock or eax,0xa700be0
 101fd83:	(bad)  
 101fd84:	or     DWORD PTR [rax+0x0],edx
 101fd87:	add    BYTE PTR [rsi*2+0x47200001],ah
 101fd8e:	add    BYTE PTR [rax],al
 101fd90:	adc    al,BYTE PTR [rdi]
 101fd92:	add    BYTE PTR [rax],al
 101fd94:	(bad)  
 101fd95:	(bad)  
 101fd96:	(bad)  
 101fd97:	push   QWORD PTR [rax+0x1d9]
 101fd9d:	add    BYTE PTR [rax],al
 101fd9f:	add    al,al
 101fda1:	fld    DWORD PTR [rcx]
 101fda3:	add    BYTE PTR [rcx],al
 101fda5:	add    BYTE PTR [rax],al
 101fda7:	add    al,dl
 101fda9:	fld    DWORD PTR [rcx]
 101fdab:	add    BYTE PTR [rcx],al
 101fdad:	add    BYTE PTR [rax],al
 101fdaf:	add    al,ah
 101fdb1:	fld    DWORD PTR [rcx]
 101fdb3:	add    BYTE PTR [rcx],al
 101fdb5:	add    BYTE PTR [rax],al
 101fdb7:	add    al,dh
 101fdb9:	fld    DWORD PTR [rcx]
 101fdbb:	add    BYTE PTR [rax],dh
 101fdbd:	sbb    eax,DWORD PTR [rcx]
 101fdbf:	add    bh,bh
 101fdc1:	(bad)  
 101fdc2:	(bad)  
 101fdc3:	dec    DWORD PTR [rbp+0x11b]
 101fdc9:	add    BYTE PTR [rax],al
 101fdcb:	add    BYTE PTR [rbp+0x100011b],ch
 101fdd1:	add    BYTE PTR [rax],al
 101fdd3:	add    BYTE PTR [rax+0x1d],cl
 101fdd6:	add    DWORD PTR [rax],eax
 101fdd8:	add    eax,DWORD PTR [rax]
 101fdda:	add    BYTE PTR [rax],al
 101fddc:	popf   
 101fddd:	sbb    eax,0x10001
 101fde2:	add    BYTE PTR [rax],al
 101fde4:	(bad)  
 101fde5:	sbb    eax,0x1
 101fdea:	add    BYTE PTR [rax],al
 101fdec:	rcr    BYTE PTR [rip+0xffffffffffff0001],cl        # 0x100fdf3
 101fdf2:	(bad)  
 101fdf3:	inc    DWORD PTR [rcx]
 101fdf5:	add    al,0x1
 101fdf7:	add    BYTE PTR [rdx+rax*2],al
 101fdfa:	add    BYTE PTR [rax],al
 101fdfc:	adc    DWORD PTR [rax],ebx
 101fdfe:	add    al,0x0
 101fe00:	sbb    BYTE PTR [rdx+rcx*1],dh
 101fe03:	add    BYTE PTR [rdx],cl
 101fe05:	push   rdx
 101fe06:	(bad)  
 101fe07:	jo     0x101fe21
 101fe09:	jne    0x101fe0c
 101fe0b:	add    BYTE PTR [rax+0x47],dl
 101fe0e:	add    BYTE PTR [rax],al
 101fe10:	(bad)  
 101fe11:	(bad)  
 101fe12:	(bad)  
 101fe13:	jmp    QWORD PTR [rax]
 101fe15:	retf   0x1
 101fe18:	(bad)  
 101fe19:	(bad)  
 101fe1a:	(bad)  
 101fe1b:	push   QWORD PTR [rax]
 101fe1d:	retf   0x1
 101fe20:	xor    BYTE PTR [rsi],bl
 101fe22:	add    DWORD PTR [rax],eax
 101fe24:	(bad)  
 101fe25:	(bad)  
 101fe26:	(bad)  
 101fe27:	jmp    QWORD PTR [rsi+0x1e]
 101fe2a:	add    DWORD PTR [rax],eax
 101fe2c:	add    DWORD PTR [rax],eax
 101fe2e:	add    BYTE PTR [rax],al
 101fe30:	mov    bl,BYTE PTR [rsi]
 101fe32:	add    DWORD PTR [rax],eax
 101fe34:	(bad)  
 101fe35:	(bad)  
 101fe36:	(bad)  
 101fe37:	call   QWORD PTR [rcx]
 101fe39:	sbb    eax,0x641d0006
 101fe3e:	or     al,BYTE PTR [rax]
 101fe40:	sbb    BYTE PTR [rcx+rcx*1],dh
 101fe43:	add    BYTE PTR [rdx],cl
 101fe45:	push   rdx
 101fe46:	(bad)  
 101fe47:	jo     0x101fe61
 101fe49:	jne    0x101fe4c
 101fe4b:	add    BYTE PTR [rax-0xffffb9],al
 101fe51:	(bad)  
 101fe52:	(bad)  
 101fe53:	push   QWORD PTR [rax-0xfffe33]
 101fe59:	(bad)  
 101fe5a:	(bad)  
 101fe5b:	call   rax
 101fe5d:	int    0x1
 101fe5f:	add    BYTE PTR [rax-0xfffee2],ah
 101fe65:	(bad)  
 101fe66:	(bad)  
 101fe67:	dec    edx
 101fe69:	(bad)  
 101fe6a:	add    DWORD PTR [rax],eax
 101fe6c:	add    BYTE PTR [rax],al
 101fe6e:	add    BYTE PTR [rax],al
 101fe70:	or     ebx,DWORD PTR [rdi]
 101fe72:	add    DWORD PTR [rax],eax
 101fe74:	(bad)  
 101fe75:	(bad)  
 101fe76:	(bad)  
 101fe77:	call   QWORD PTR [rdi]
 101fe79:	(bad)  
 101fe7a:	add    DWORD PTR [rax],eax
 101fe7c:	add    DWORD PTR [rax],eax
 101fe7e:	add    BYTE PTR [rax],al
 101fe80:	sub    BYTE PTR [rdi],bl
 101fe82:	add    DWORD PTR [rax],eax
 101fe84:	(bad)  
 101fe85:	(bad)  
 101fe86:	(bad)  
 101fe87:	call   QWORD PTR [rcx]
 101fe89:	adc    al,0x4
 101fe8b:	add    BYTE PTR [rsp+rsi*1],dl
 101fe8e:	or     DWORD PTR [rax],eax
 101fe90:	(bad)  
 101fe91:	push   rdx
 101fe92:	add    dh,BYTE PTR [rax+0x18]
 101fe95:	jne    0x101fe98
 101fe97:	add    BYTE PTR [rax-0xffffb9],dh
 101fe9d:	(bad)  
 101fe9e:	(bad)  
 101fe9f:	inc    eax
 101fea1:	fadd   DWORD PTR [rcx]
 101fea3:	add    BYTE PTR [rax+0x1f],dl
 101fea6:	add    DWORD PTR [rax],eax
 101fea8:	(bad)  
 101fea9:	(bad)  
 101feaa:	(bad)  
 101feab:	push   QWORD PTR [rcx+0x1f]
 101feae:	add    DWORD PTR [rax],eax
 101feb0:	add    BYTE PTR [rax],al
 101feb2:	add    BYTE PTR [rax],al
 101feb4:	sbb    ah,BYTE PTR [rax]
 101feb6:	add    DWORD PTR [rax],eax
 101feb8:	(bad)  
 101feb9:	(bad)  
 101feba:	(bad)  
 101febb:	jmp    FWORD PTR [rsi]
 101febd:	and    BYTE PTR [rcx],al
 101febf:	add    BYTE PTR [rax],al
 101fec1:	add    BYTE PTR [rax],al
 101fec3:	add    BYTE PTR [rdx+0x20],al
 101fec6:	add    DWORD PTR [rax],eax
 101fec8:	(bad)  
 101fec9:	(bad)  
 101feca:	(bad)  
 101fecb:	call   QWORD PTR [rcx]
 101fecd:	sbb    al,0x8
 101fecf:	add    BYTE PTR [rsp+rdx*2],bl
 101fed2:	or     eax,DWORD PTR [rax]
 101fed4:	(bad)  
 101fed5:	xor    al,0xa
 101fed7:	add    BYTE PTR [rcx],cl
 101fed9:	push   rdx
 101feda:	add    eax,0x27003e0
 101fedf:	(bad)  
 101fee0:	sbb    BYTE PTR [rbp+0x1],dh
 101fee3:	add    al,ah
 101fee5:	rex.RXB add BYTE PTR [r8],r8b
 101fee8:	(bad)  
 101fee9:	(bad)  
 101feea:	(bad)  
 101feeb:	jmp    rax
 101feed:	fadd   DWORD PTR [rcx]
 101feef:	add    BYTE PTR [rax-0xfffee0],al
 101fef5:	(bad)  
 101fef6:	(bad)  
 101fef7:	jmp    FWORD PTR [rdi+0x120]
 101fefd:	add    BYTE PTR [rax],al
 101feff:	add    ch,bh
 101ff01:	and    BYTE PTR [rcx],al
 101ff03:	add    bh,bh
 101ff05:	(bad)  
 101ff06:	(bad)  
 101ff07:	call   QWORD PTR [rcx]
 101ff09:	sbb    cl,BYTE PTR [rax]
 101ff0b:	add    BYTE PTR [rdx],bl
 101ff0d:	xor    al,0xc
 101ff0f:	add    BYTE PTR [rdx+rdx*2],cl
 101ff12:	or     al,dh
 101ff14:	(bad)  
 101ff15:	loopne 0x101ff1b
 101ff17:	jo     0x101ff1c
 101ff19:	(bad)  
 101ff1a:	add    dl,BYTE PTR [rax+0x18]
 101ff1d:	jne    0x101ff20
 101ff1f:	add    BYTE PTR [rax],dl
 101ff21:	rex.W add BYTE PTR [rax],al
 101ff24:	(bad)  
 101ff25:	(bad)  
 101ff26:	(bad)  
 101ff27:	inc    DWORD PTR [rax+0x1d7]
 101ff2d:	add    BYTE PTR [rax],al
 101ff2f:	add    BYTE PTR [rax+0x1d7],dl
 101ff35:	add    BYTE PTR [rax],al
 101ff37:	add    BYTE PTR [rax+0x20001d7],ah
 101ff3d:	add    BYTE PTR [rax],al
 101ff3f:	add    BYTE PTR [rax+0x30001d7],dh
 101ff45:	add    BYTE PTR [rax],al
 101ff47:	add    al,al
 101ff49:	xlat   BYTE PTR ds:[rbx]
 101ff4a:	add    DWORD PTR [rax],eax
 101ff4c:	add    BYTE PTR [rax],al
 101ff4e:	add    BYTE PTR [rax],al
 101ff50:	rcl    bh,1
 101ff52:	add    DWORD PTR [rax],eax
 101ff54:	xor    BYTE PTR [rcx],ah
 101ff56:	add    DWORD PTR [rax],eax
 101ff58:	(bad)  
 101ff59:	(bad)  
 101ff5a:	(bad)  
 101ff5b:	call   FWORD PTR [rbx+0x21]
 101ff5e:	add    DWORD PTR [rax],eax
 101ff60:	add    BYTE PTR [rax],al
 101ff62:	add    BYTE PTR [rax],al
 101ff64:	lea    esp,[rcx]
 101ff66:	add    DWORD PTR [rax],eax
 101ff68:	add    DWORD PTR [rax],eax
 101ff6a:	add    BYTE PTR [rax],al
 101ff6c:	xchg   edi,eax
 101ff6d:	and    DWORD PTR [rcx],eax
 101ff6f:	add    BYTE PTR [rdx],al
 101ff71:	add    BYTE PTR [rax],al
 101ff73:	add    BYTE PTR [rbp+0x3000121],ah
 101ff79:	add    BYTE PTR [rax],al
 101ff7b:	add    BYTE PTR [rcx+0x121],ch
 101ff81:	add    BYTE PTR [rax],al
 101ff83:	add    BYTE PTR [rsi+0x5000121],dh
 101ff89:	add    BYTE PTR [rax],al
 101ff8b:	add    cl,bh
 101ff8d:	and    DWORD PTR [rcx],eax
 101ff8f:	add    BYTE PTR [rax],al
 101ff91:	add    BYTE PTR [rax],al
 101ff93:	add    BYTE PTR [rdx+riz*1],ah
 101ff96:	add    DWORD PTR [rax],eax
 101ff98:	(bad)  
 101ff99:	(bad)  
 101ff9a:	(bad)  
 101ff9b:	call   QWORD PTR [rcx]
 101ff9d:	xor    al,0xa
 101ff9f:	add    BYTE PTR [rcx+rax*1],ch
 101ffa2:	(bad)  
 101ffa3:	add    BYTE PTR [rax],ah
 101ffa5:	lock (bad) 
 101ffa7:	loopne 0x101ffc5
 101ffa9:	rcr    BYTE PTR [rdx],1
 101ffab:	rcr    BYTE PTR [rax],0x70
 101ffae:	(bad)  
 101ffaf:	(bad)  
 101ffb0:	(bad)  
 101ffb1:	xor    BYTE PTR [rip+0x1751850],dl        # 0x2771807
 101ffb7:	add    BYTE PTR [rax+0x48],al
 101ffba:	add    BYTE PTR [rax],al
 101ffbc:	(bad)  
 101ffbd:	(bad)  
 101ffbe:	(bad)  
 101ffbf:	call   QWORD PTR [rax+0x1d5]
 101ffc5:	add    BYTE PTR [rax],al
 101ffc7:	add    BYTE PTR [rax+0x1d5],ah
 101ffcd:	add    BYTE PTR [rax],al
 101ffcf:	add    BYTE PTR [rax+0x20001d5],dh
 101ffd5:	add    BYTE PTR [rax],al
 101ffd7:	add    al,al
 101ffd9:	(bad)  
 101ffda:	add    DWORD PTR [rax],eax
 101ffdc:	add    eax,DWORD PTR [rax]
 101ffde:	add    BYTE PTR [rax],al
 101ffe0:	rcl    ch,1
 101ffe2:	add    DWORD PTR [rax],eax
 101ffe4:	add    al,0x0
 101ffe6:	add    BYTE PTR [rax],al
 101ffe8:	loopne 0x101ffbf
 101ffea:	add    DWORD PTR [rax],eax
 101ffec:	add    eax,0xf0000000
 101fff1:	(bad)  
 101fff2:	add    DWORD PTR [rax],eax
 101fff4:	(bad)  
 101fff5:	add    BYTE PTR [rax],al
 101fff7:	add    BYTE PTR [rax],al
 101fff9:	(bad)  
 101fffa:	add    DWORD PTR [rax],eax
 101fffc:	(bad)  
 101fffd:	add    BYTE PTR [rax],al
 101ffff:	add    BYTE PTR [rax],dl
 1020001:	(bad)  
 1020002:	add    DWORD PTR [rax],eax
 1020004:	(bad)  
 1020005:	add    BYTE PTR [rax],al
 1020007:	add    BYTE PTR [rax-0x2a],al
 102000a:	add    DWORD PTR [rax],eax
 102000c:	(bad)  
 102000d:	add    BYTE PTR [rax],al
 102000f:	add    BYTE PTR [rax-0x2a],dl
 1020012:	add    DWORD PTR [rax],eax
 1020014:	or     al,BYTE PTR [rax]
 1020016:	add    BYTE PTR [rax],al
 1020018:	(bad)  
 1020019:	(bad)  
 102001a:	add    DWORD PTR [rax],eax
 102001c:	or     eax,DWORD PTR [rax]
 102001e:	add    BYTE PTR [rax],al
 1020020:	jo     0x101fff8
 1020022:	add    DWORD PTR [rax],eax
 1020024:	(bad)  
 1020025:	add    BYTE PTR [rax],al
 1020027:	add    BYTE PTR [rax+0xd0001d6],al
 102002d:	add    BYTE PTR [rax],al
 102002f:	add    BYTE PTR [rax+0x60001d6],dl
 1020035:	add    BYTE PTR [rax],al
 1020037:	add    BYTE PTR [rax+0x60001d6],ah
 102003d:	add    BYTE PTR [rax],al
 102003f:	add    BYTE PTR [rax+0x100001d6],dh
 1020045:	add    BYTE PTR [rax],al
 1020047:	add    al,al
 1020049:	(bad)  
 102004a:	add    DWORD PTR [rax],eax
 102004c:	adc    DWORD PTR [rax],eax
 102004e:	add    BYTE PTR [rax],al
 1020050:	rcl    dh,1
 1020052:	add    DWORD PTR [rax],eax
 1020054:	(bad)  
 1020055:	add    BYTE PTR [rax],al
 1020057:	add    al,ah
 1020059:	(bad)  
 102005a:	add    DWORD PTR [rax],eax
 102005c:	adc    eax,DWORD PTR [rax]
 102005e:	add    BYTE PTR [rax],al
 1020060:	lock (bad) 
 1020062:	add    DWORD PTR [rax],eax
 1020064:	(bad)  
 1020065:	add    BYTE PTR [rax],al
 1020067:	add    BYTE PTR [rax],al
 1020069:	xlat   BYTE PTR ds:[rbx]
 102006a:	add    DWORD PTR [rax],eax
 102006c:	(bad)  
 102006d:	add    BYTE PTR [rax],al
 102006f:	add    BYTE PTR [rax],dl
 1020071:	xlat   BYTE PTR ds:[rbx]
 1020072:	add    DWORD PTR [rax],eax
 1020074:	(bad)  
 1020075:	add    BYTE PTR [rax],al
 1020077:	add    BYTE PTR [rax],ah
 1020079:	xlat   BYTE PTR ds:[rbx]
 102007a:	add    DWORD PTR [rax],eax
 102007c:	(bad)  
 102007d:	add    BYTE PTR [rax],al
 102007f:	add    BYTE PTR [rax],dh
 1020081:	xlat   BYTE PTR ds:[rbx]
 1020082:	add    DWORD PTR [rax],eax
 1020084:	(bad)  
 1020085:	add    BYTE PTR [rax],al
 1020087:	add    BYTE PTR [rax-0x29],al
 102008a:	add    DWORD PTR [rax],eax
 102008c:	sbb    DWORD PTR [rax],eax
 102008e:	add    BYTE PTR [rax],al
 1020090:	push   rax
 1020091:	xlat   BYTE PTR ds:[rbx]
 1020092:	add    DWORD PTR [rax],eax
 1020094:	add    BYTE PTR [rax],al
 1020096:	add    BYTE PTR [rax],al
 1020098:	(bad)  
 1020099:	xlat   BYTE PTR ds:[rbx]
 102009a:	add    DWORD PTR [rax],eax
 102009c:	push   rax
 102009d:	and    al,BYTE PTR [rcx]
 102009f:	add    bh,bh
 10200a1:	(bad)  
 10200a2:	(bad)  
 10200a3:	(bad)  
 10200a4:	mov    ecx,0x122
 10200a9:	add    BYTE PTR [rax],al
 10200ab:	add    bl,bh
 10200ad:	and    al,BYTE PTR [rcx]
 10200af:	add    BYTE PTR [rdx],al
 10200b1:	add    BYTE PTR [rax],al
 10200b3:	add    BYTE PTR [rdi],ah
 10200b5:	and    eax,DWORD PTR [rcx]
 10200b7:	add    BYTE PTR [rbx],al
 10200b9:	add    BYTE PTR [rax],al
 10200bb:	add    BYTE PTR [rbx+riz*1],ch
 10200be:	add    DWORD PTR [rax],eax
 10200c0:	add    al,0x0
 10200c2:	add    BYTE PTR [rax],al
 10200c4:	xor    DWORD PTR [rbx],esp
 10200c6:	add    DWORD PTR [rax],eax
 10200c8:	add    eax,0x36000000
 10200cd:	and    eax,DWORD PTR [rcx]
 10200cf:	add    BYTE PTR [rsi],al
 10200d1:	add    BYTE PTR [rax],al
 10200d3:	add    BYTE PTR [rcx+0x7000124],al
 10200d9:	add    BYTE PTR [rax],al
 10200db:	add    dl,dl
 10200dd:	and    al,0x1
 10200df:	add    BYTE PTR [rax],cl
 10200e1:	add    BYTE PTR [rax],al
 10200e3:	add    BYTE PTR [rdx],dl
 10200e5:	and    eax,0x70001
 10200ea:	add    BYTE PTR [rax],al
 10200ec:	rex.WX and rax,0x60001
 10200f2:	add    BYTE PTR [rax],al
 10200f4:	ins    BYTE PTR es:[rdi],dx
 10200f5:	and    eax,0x70001
 10200fa:	add    BYTE PTR [rax],al
 10200fc:	ja     0x1020123
 10200fe:	add    DWORD PTR [rax],eax
 1020100:	(bad)  
 1020101:	add    BYTE PTR [rax],al
 1020103:	add    BYTE PTR [rbx],ch
 1020105:	add    DWORD PTR es:[rax],eax
 1020108:	or     DWORD PTR [rax],eax
 102010a:	add    BYTE PTR [rax],al
 102010c:	cs add DWORD PTR es:[rax],eax
 1020110:	or     al,BYTE PTR [rax]
 1020112:	add    BYTE PTR [rax],al
 1020114:	xor    eax,0xb000126
 1020119:	add    BYTE PTR [rax],al
 102011b:	add    BYTE PTR [rcx],bh
 102011d:	add    DWORD PTR es:[rax],eax
 1020120:	(bad)  
 1020121:	add    BYTE PTR [rax],al
 1020123:	add    BYTE PTR [rbp+0x26],al
 1020126:	add    DWORD PTR [rax],eax
 1020128:	or     eax,0x49000000
 102012d:	add    DWORD PTR es:[rax],eax
 1020130:	(bad)  
 1020131:	add    BYTE PTR [rax],al
 1020133:	add    BYTE PTR [rsi+0xd000126],cl
 1020139:	add    BYTE PTR [rax],al
 102013b:	add    BYTE PTR [rsi+0x6000126],bl
 1020141:	add    BYTE PTR [rax],al
 1020143:	add    BYTE PTR [rbx],ch
 1020145:	(bad)  
 1020146:	add    DWORD PTR [rax],eax
 1020148:	sldt   WORD PTR [rax]
 102014b:	add    BYTE PTR [rsi],ch
 102014d:	(bad)  
 102014e:	add    DWORD PTR [rax],eax
 1020150:	adc    BYTE PTR [rax],al
 1020152:	add    BYTE PTR [rax],al
 1020154:	xor    eax,0x11000127
 1020159:	add    BYTE PTR [rax],al
 102015b:	add    BYTE PTR [rcx],bh
 102015d:	(bad)  
 102015e:	add    DWORD PTR [rax],eax
 1020160:	(bad)  
 1020161:	add    BYTE PTR [rax],al
 1020163:	add    BYTE PTR [rbp+0x27],al
 1020166:	add    DWORD PTR [rax],eax
 1020168:	adc    eax,DWORD PTR [rax]
 102016a:	add    BYTE PTR [rax],al
 102016c:	rex.WB (bad) 
 102016e:	add    DWORD PTR [rax],eax
 1020170:	adc    al,0x0
 1020172:	add    BYTE PTR [rax],al
 1020174:	mov    fs,WORD PTR [rdi]
 1020176:	add    DWORD PTR [rax],eax
 1020178:	adc    eax,DWORD PTR [rax]
 102017a:	add    BYTE PTR [rax],al
 102017c:	sahf   
 102017d:	(bad)  
 102017e:	add    DWORD PTR [rax],eax
 1020180:	(bad)  
 1020181:	add    BYTE PTR [rax],al
 1020183:	add    BYTE PTR [rdx],ah
 1020185:	sub    BYTE PTR [rcx],al
 1020187:	add    BYTE PTR [rip+0x25000000],dl        # 0x2602018d
 102018d:	sub    BYTE PTR [rcx],al
 102018f:	add    BYTE PTR [rsi],dl
 1020191:	add    BYTE PTR [rax],al
 1020193:	add    BYTE PTR [rbx],dh
 1020195:	sub    BYTE PTR [rcx],al
 1020197:	add    BYTE PTR [rdi],dl
 1020199:	add    BYTE PTR [rax],al
 102019b:	add    BYTE PTR [rdi],dh
 102019d:	sub    BYTE PTR [rcx],al
 102019f:	add    BYTE PTR [rsi],al
 10201a1:	add    BYTE PTR [rax],al
 10201a3:	add    BYTE PTR [rbx+0x28],al
 10201a6:	add    DWORD PTR [rax],eax
 10201a8:	sbb    DWORD PTR [rax],eax
 10201aa:	add    BYTE PTR [rax],al
 10201ac:	rex.RXB sub BYTE PTR [r9],r8b
 10201af:	add    BYTE PTR [rdx],bl
 10201b1:	add    BYTE PTR [rax],al
 10201b3:	add    BYTE PTR [rax+rbp*1+0x190001],cl
 10201ba:	add    BYTE PTR [rax],al
 10201bc:	pushf  
 10201bd:	sub    BYTE PTR [rcx],al
 10201bf:	add    BYTE PTR [rsi],al
 10201c1:	add    BYTE PTR [rax],al
 10201c3:	add    dh,bh
 10201c5:	sub    BYTE PTR [rcx],al
 10201c7:	add    BYTE PTR [rip+0xf000000],al        # 0x100201cd
 10201cd:	sub    DWORD PTR [rcx],eax
 10201cf:	add    BYTE PTR [rax+rax*1],al
 10201d2:	add    BYTE PTR [rax],al
 10201d4:	and    BYTE PTR [rcx],ch
 10201d6:	add    DWORD PTR [rax],eax
 10201d8:	add    eax,DWORD PTR [rax]
 10201da:	add    BYTE PTR [rax],al
 10201dc:	xor    DWORD PTR [rcx],ebp
 10201de:	add    DWORD PTR [rax],eax
 10201e0:	add    al,BYTE PTR [rax]
 10201e2:	add    BYTE PTR [rax],al
 10201e4:	rex.X sub DWORD PTR [rcx],eax
 10201e7:	add    BYTE PTR [rbx],bl
 10201e9:	add    BYTE PTR [rax],al
 10201eb:	add    BYTE PTR [rbp+0x29],dl
 10201ee:	add    DWORD PTR [rax],eax
 10201f0:	add    BYTE PTR [rax],al
 10201f2:	add    BYTE PTR [rax],al
 10201f4:	movsxd ebp,DWORD PTR [rcx]
 10201f6:	add    DWORD PTR [rax],eax
 10201f8:	(bad)  
 10201f9:	(bad)  
 10201fa:	(bad)  
 10201fb:	inc    DWORD PTR [rcx]
 10201fd:	(bad)  
 10201fe:	add    al,BYTE PTR [rax]
 1020200:	(bad)  
 1020201:	xor    al,BYTE PTR [rdx]
 1020203:	push   rax
 1020204:	sbb    DWORD PTR [rip+0x1120009],ebp        # 0x2140213
 102020a:	pop    rdx
 102020b:	add    BYTE PTR [rbx],cl
 102020d:	lock or eax,esp
 1020210:	(bad)  
 1020211:	rol    BYTE PTR [rip+0x3600470],0x50        # 0x4620688
 1020218:	add    dh,BYTE PTR [rax]
 102021a:	add    BYTE PTR [rax],al
 102021c:	and    al,0x75
 102021e:	add    DWORD PTR [rax],eax
 1020220:	jo     0x102026a
 1020222:	add    BYTE PTR [rax],al
 1020224:	ret    0x2
 1020227:	add    bh,bh
 1020229:	(bad)  
 102022a:	(bad)  
 102022b:	jmp    QWORD PTR [rax-0x2c]
 102022e:	add    DWORD PTR [rax],eax
 1020230:	add    BYTE PTR [rax],al
 1020232:	add    BYTE PTR [rax],al
 1020234:	jo     0x102020a
 1020236:	add    DWORD PTR [rax],eax
 1020238:	add    DWORD PTR [rax],eax
 102023a:	add    BYTE PTR [rax],al
 102023c:	adc    ah,0x1
 102023f:	add    BYTE PTR [rax],al
 1020241:	add    BYTE PTR [rax],al
 1020243:	add    BYTE PTR [rax-0x6ffffe2c],dl
 1020249:	sub    DWORD PTR [rcx],eax
 102024b:	add    bh,bh
 102024d:	(bad)  
 102024e:	(bad)  
 102024f:	dec    edi
 1020251:	sub    DWORD PTR [rcx],eax
 1020253:	add    BYTE PTR [rax],al
 1020255:	add    BYTE PTR [rax],al
 1020257:	add    ah,dl
 1020259:	sub    DWORD PTR [rcx],eax
 102025b:	add    BYTE PTR [rcx],al
 102025d:	add    BYTE PTR [rax],al
 102025f:	add    dh,ch
 1020261:	sub    DWORD PTR [rcx],eax
 1020263:	add    BYTE PTR [rdx],al
 1020265:	add    BYTE PTR [rax],al
 1020267:	add    BYTE PTR [rsi],dh
 1020269:	sub    al,BYTE PTR [rcx]
 102026b:	add    BYTE PTR [rcx],al
 102026d:	add    BYTE PTR [rax],al
 102026f:	add    BYTE PTR [rdi+0x2a],al
 1020272:	add    DWORD PTR [rax],eax
 1020274:	add    BYTE PTR [rax],al
 1020276:	add    BYTE PTR [rax],al
 1020278:	xchg   edx,eax
 1020279:	sub    al,BYTE PTR [rcx]
 102027b:	add    BYTE PTR [rbx],al
 102027d:	add    BYTE PTR [rax],al
 102027f:	add    BYTE PTR [rsi+0x12a],dh
 1020285:	add    BYTE PTR [rax],al
 1020287:	add    dh,ah
 1020289:	sub    al,BYTE PTR [rcx]
 102028b:	add    bh,bh
 102028d:	(bad)  
 102028e:	(bad)  
 102028f:	call   FWORD PTR [rcx]
 1020291:	or     eax,DWORD PTR ss:[rax]
 1020294:	sub    BYTE PTR [rdx+rdi*1],dh
 1020297:	add    BYTE PTR [rax],bl
 1020299:	add    DWORD PTR [rax],esi
 102029b:	add    BYTE PTR [rax+rsi*8],cl
 102029e:	or     ah,al
 10202a0:	or     al,dl
 10202a2:	(bad)  
 10202a3:	rol    BYTE PTR [rax+rsi*2],0x3
 10202a7:	(bad)  
 10202a8:	add    dl,BYTE PTR [rax+0x0]
 10202ab:	add    BYTE PTR [rsi*2+0x48a00001],ah
 10202b2:	add    BYTE PTR [rax],al
 10202b4:	jb     0x10202b7
 10202b6:	add    BYTE PTR [rax],al
 10202b8:	(bad)  
 10202b9:	(bad)  
 10202ba:	(bad)  
 10202bb:	jmp    QWORD PTR [rax]
 10202bd:	rol    DWORD PTR [rcx],1
 10202bf:	add    BYTE PTR [rax],al
 10202c1:	add    BYTE PTR [rax],al
 10202c3:	add    BYTE PTR [rax],dh
 10202c5:	rol    DWORD PTR [rcx],1
 10202c7:	add    BYTE PTR [rcx],al
 10202c9:	add    BYTE PTR [rax],al
 10202cb:	add    BYTE PTR [rax-0x2f],al
 10202ce:	add    DWORD PTR [rax],eax
 10202d0:	add    al,BYTE PTR [rax]
 10202d2:	add    BYTE PTR [rax],al
 10202d4:	push   rax
 10202d5:	rol    DWORD PTR [rcx],1
 10202d7:	add    BYTE PTR [rdx],al
 10202d9:	add    BYTE PTR [rax],al
 10202db:	add    BYTE PTR [rax-0x2f],ah
 10202de:	add    DWORD PTR [rax],eax
 10202e0:	add    al,0x0
 10202e2:	add    BYTE PTR [rax],al
 10202e4:	jo     0x10202b7
 10202e6:	add    DWORD PTR [rax],eax
 10202e8:	add    al,0x0
 10202ea:	add    BYTE PTR [rax],al
 10202ec:	adc    cl,0x1
 10202ef:	add    BYTE PTR [rsi],al
 10202f1:	add    BYTE PTR [rax],al
 10202f3:	add    BYTE PTR [rax+0x60001d1],dl
 10202f9:	add    BYTE PTR [rax],al
 10202fb:	add    BYTE PTR [rax+0x80001d1],ah
 1020301:	add    BYTE PTR [rax],al
 1020303:	add    BYTE PTR [rax+0x80001d1],dh
 1020309:	add    BYTE PTR [rax],al
 102030b:	add    al,al
 102030d:	rol    DWORD PTR [rcx],1
 102030f:	add    BYTE PTR [rax],cl
 1020311:	add    BYTE PTR [rax],al
 1020313:	add    al,dl
 1020315:	rol    DWORD PTR [rcx],1
 1020317:	add    BYTE PTR [rbx],cl
 1020319:	add    BYTE PTR [rax],al
 102031b:	add    al,ah
 102031d:	rol    DWORD PTR [rcx],1
 102031f:	add    BYTE PTR [rax],ah
 1020321:	sub    eax,DWORD PTR [rcx]
 1020323:	add    bh,bh
 1020325:	(bad)  
 1020326:	(bad)  
 1020327:	jmp    QWORD PTR [rbx+0x2b]
 102032a:	add    DWORD PTR [rax],eax
 102032c:	add    BYTE PTR [rax],al
 102032e:	add    BYTE PTR [rax],al
 1020330:	push   0x100012b
 1020335:	add    BYTE PTR [rax],al
 1020337:	add    BYTE PTR [rdx+0x12b],dl
 102033d:	add    BYTE PTR [rax],al
 102033f:	add    BYTE PTR [rbx-0xfffed5],ah
 1020345:	(bad)  
 1020346:	(bad)  
 1020347:	(bad)  
 1020348:	mov    edx,0x100012b
 102034d:	add    BYTE PTR [rax],al
 102034f:	add    al,dl
 1020351:	sub    eax,DWORD PTR [rcx]
 1020353:	add    BYTE PTR [rax],al
 1020355:	add    BYTE PTR [rax],al
 1020357:	add    cl,ah
 1020359:	sub    eax,DWORD PTR [rcx]
 102035b:	add    bh,bh
 102035d:	(bad)  
 102035e:	(bad)  
 102035f:	jmp    rbx
 1020361:	sub    eax,DWORD PTR [rcx]
 1020363:	add    BYTE PTR [rcx],al
 1020365:	add    BYTE PTR [rax],al
 1020367:	add    bh,dh
 1020369:	sub    eax,DWORD PTR [rcx]
 102036b:	add    BYTE PTR [rdx],al
 102036d:	add    BYTE PTR [rax],al
 102036f:	add    BYTE PTR [rdi],al
 1020371:	sub    al,0x1
 1020373:	add    BYTE PTR [rbx],al
 1020375:	add    BYTE PTR [rax],al
 1020377:	add    BYTE PTR [rdi],ch
 1020379:	sub    al,0x1
 102037b:	add    BYTE PTR [rdx],al
 102037d:	add    BYTE PTR [rax],al
 102037f:	add    BYTE PTR [rbp+0x2c],cl
 1020382:	add    DWORD PTR [rax],eax
 1020384:	add    al,0x0
 1020386:	add    BYTE PTR [rax],al
 1020388:	pop    rax
 1020389:	sub    al,0x1
 102038b:	add    BYTE PTR [rip+0xffffffff80000000],al        # 0xffffffff81020391
 1020391:	sub    al,0x1
 1020393:	add    BYTE PTR [rax+rax*1],al
 1020396:	add    BYTE PTR [rax],al
 1020398:	sahf   
 1020399:	sub    al,0x1
 102039b:	add    BYTE PTR [rsi],al
 102039d:	add    BYTE PTR [rax],al
 102039f:	add    BYTE PTR [rdi+0x700012c],ch
 10203a5:	add    BYTE PTR [rax],al
 10203a7:	add    bh,dl
 10203a9:	sub    al,0x1
 10203ab:	add    BYTE PTR [rsi],al
 10203ad:	add    BYTE PTR [rax],al
 10203af:	add    ch,dh
 10203b1:	sub    al,0x1
 10203b3:	add    BYTE PTR [rax],cl
 10203b5:	add    BYTE PTR [rax],al
 10203b7:	add    bh,bh
 10203b9:	sub    al,0x1
 10203bb:	add    BYTE PTR [rcx],cl
 10203bd:	add    BYTE PTR [rax],al
 10203bf:	add    BYTE PTR [rdi],ah
 10203c1:	sub    eax,0x80001
 10203c6:	add    BYTE PTR [rax],al
 10203c8:	sub    ax,0x1
 10203cc:	(bad)  
 10203cd:	add    BYTE PTR [rax],al
 10203cf:	add    BYTE PTR [rbp+0x2d],dh
 10203d2:	add    DWORD PTR [rax],eax
 10203d4:	add    al,0x0
 10203d6:	add    BYTE PTR [rax],al
 10203d8:	test   BYTE PTR [rip+0x20001],ch        # 0x10403df
 10203de:	add    BYTE PTR [rax],al
 10203e0:	xchg   ebx,eax
 10203e1:	sub    eax,0x10001
 10203e6:	add    BYTE PTR [rax],al
 10203e8:	movabs ds:0xb30000000000012d,al
 10203f1:	sub    eax,0xffff0001
 10203f6:	(bad)  
 10203f7:	(bad)  
 10203f8:	mov    eax,0x800012d
 10203fd:	add    BYTE PTR [rax],al
 10203ff:	add    BYTE PTR [rsi],ch
 1020401:	add    DWORD PTR cs:[rax],eax
 1020404:	or     al,BYTE PTR [rax]
 1020406:	add    BYTE PTR [rax],al
 1020408:	pop    rcx
 1020409:	add    DWORD PTR cs:[rax],eax
 102040c:	or     BYTE PTR [rax],al
 102040e:	add    BYTE PTR [rax],al
 1020410:	add    DWORD PTR cs:[eax],eax
 1020414:	(bad)  
 1020415:	add    BYTE PTR [rax],al
 1020417:	add    BYTE PTR [rsi+0x2e],dh
 102041a:	add    DWORD PTR [rax],eax
 102041c:	add    al,0x0
 102041e:	add    BYTE PTR [rax],al
 1020420:	test   DWORD PTR [rsi],ebp
 1020422:	add    DWORD PTR [rax],eax
 1020424:	add    al,BYTE PTR [rax]
 1020426:	add    BYTE PTR [rax],al
 1020428:	xchg   esp,eax
 1020429:	add    DWORD PTR cs:[rax],eax
 102042c:	add    DWORD PTR [rax],eax
 102042e:	add    BYTE PTR [rax],al
 1020430:	movabs ds:0xb40000000000012e,eax
 1020439:	add    DWORD PTR cs:[rax],eax
 102043c:	(bad)  
 102043d:	(bad)  
 102043e:	(bad)  
 102043f:	(bad)  
 1020440:	mov    ecx,0x800012e
 1020445:	add    BYTE PTR [rax],al
 1020447:	add    dh,bl
 1020449:	add    DWORD PTR cs:[rax],eax
 102044c:	(bad)  
 102044d:	add    BYTE PTR [rax],al
 102044f:	add    ch,ch
 1020451:	add    DWORD PTR cs:[rax],eax
 1020454:	add    al,0x0
 1020456:	add    BYTE PTR [rax],al
 1020458:	cld    
 1020459:	add    DWORD PTR cs:[rax],eax
 102045c:	add    al,BYTE PTR [rax]
 102045e:	add    BYTE PTR [rax],al
 1020460:	or     ebp,DWORD PTR [rdi]
 1020462:	add    DWORD PTR [rax],eax
 1020464:	add    DWORD PTR [rax],eax
 1020466:	add    BYTE PTR [rax],al
 1020468:	sbb    ch,BYTE PTR [rdi]
 102046a:	add    DWORD PTR [rax],eax
 102046c:	add    BYTE PTR [rax],al
 102046e:	add    BYTE PTR [rax],al
 1020470:	sub    ebp,DWORD PTR [rdi]
 1020472:	add    DWORD PTR [rax],eax
 1020474:	(bad)  
 1020475:	(bad)  
 1020476:	(bad)  
 1020477:	push   QWORD PTR [rax]
 1020479:	(bad)  
 102047a:	add    DWORD PTR [rax],eax
 102047c:	or     BYTE PTR [rax],al
 102047e:	add    BYTE PTR [rax],al
 1020480:	rex.RX (bad) 
 1020482:	add    DWORD PTR [rax],eax
 1020484:	or     eax,DWORD PTR [rax]
 1020486:	add    BYTE PTR [rax],al
 1020488:	pop    rsp
 1020489:	(bad)  
 102048a:	add    DWORD PTR [rax],eax
 102048c:	or     BYTE PTR [rax],al
 102048e:	add    BYTE PTR [rax],al
 1020490:	ins    DWORD PTR es:[rdi],dx
 1020491:	(bad)  
 1020492:	add    DWORD PTR [rax],eax
 1020494:	(bad)  
 1020495:	add    BYTE PTR [rax],al
 1020497:	add    BYTE PTR [rdi+rbp*1+0x1],bh
 102049b:	add    BYTE PTR [rax+rax*1],al
 102049e:	add    BYTE PTR [rax],al
 10204a0:	mov    ebp,DWORD PTR [rdi]
 10204a2:	add    DWORD PTR [rax],eax
 10204a4:	add    al,BYTE PTR [rax]
 10204a6:	add    BYTE PTR [rax],al
 10204a8:	(bad)  
 10204a9:	(bad)  
 10204aa:	add    DWORD PTR [rax],eax
 10204ac:	add    DWORD PTR [rax],eax
 10204ae:	add    BYTE PTR [rax],al
 10204b0:	test   eax,0x12f
 10204b5:	add    BYTE PTR [rax],al
 10204b7:	add    BYTE PTR [rdx-0xfffed1],bh
 10204bd:	(bad)  
 10204be:	(bad)  
 10204bf:	(bad)  
 10204c0:	mov    edi,0xb00012f
 10204c5:	add    BYTE PTR [rax],al
 10204c7:	add    ah,al
 10204c9:	(bad)  
 10204ca:	add    DWORD PTR [rax],eax
 10204cc:	or     al,0x0
 10204ce:	add    BYTE PTR [rax],al
 10204d0:	fisubr DWORD PTR [rdi]
 10204d2:	add    DWORD PTR [rax],eax
 10204d4:	or     eax,DWORD PTR [rax]
 10204d6:	add    BYTE PTR [rax],al
 10204d8:	jmp    0x1020509
 10204da:	add    DWORD PTR [rax],eax
 10204dc:	or     BYTE PTR [rax],al
 10204de:	add    BYTE PTR [rax],al
 10204e0:	cld    
 10204e1:	(bad)  
 10204e2:	add    DWORD PTR [rax],eax
 10204e4:	(bad)  
 10204e5:	add    BYTE PTR [rax],al
 10204e7:	add    BYTE PTR [rbx],cl
 10204e9:	xor    BYTE PTR [rcx],al
 10204eb:	add    BYTE PTR [rax+rax*1],al
 10204ee:	add    BYTE PTR [rax],al
 10204f0:	sbb    dh,BYTE PTR [rax]
 10204f2:	add    DWORD PTR [rax],eax
 10204f4:	add    al,BYTE PTR [rax]
 10204f6:	add    BYTE PTR [rax],al
 10204f8:	sub    DWORD PTR [rax],esi
 10204fa:	add    DWORD PTR [rax],eax
 10204fc:	add    DWORD PTR [rax],eax
 10204fe:	add    BYTE PTR [rax],al
 1020500:	cmp    BYTE PTR [rax],dh
 1020502:	add    DWORD PTR [rax],eax
 1020504:	add    BYTE PTR [rax],al
 1020506:	add    BYTE PTR [rax],al
 1020508:	rex.WB xor BYTE PTR [r9],al
 102050b:	add    bh,bh
 102050d:	(bad)  
 102050e:	(bad)  
 102050f:	dec    DWORD PTR [rsi+0x30]
 1020512:	add    DWORD PTR [rax],eax
 1020514:	or     al,0x0
 1020516:	add    BYTE PTR [rax],al
 1020518:	imul   esi,DWORD PTR [rcx],0x1
 102051b:	add    BYTE PTR [rbx],cl
 102051d:	add    BYTE PTR [rax],al
 102051f:	add    BYTE PTR [rcx+rsi*1+0x1],bh
 1020523:	add    BYTE PTR [rax],cl
 1020525:	add    BYTE PTR [rax],al
 1020527:	add    BYTE PTR [rbp+0x6000131],cl
 102052d:	add    BYTE PTR [rax],al
 102052f:	add    BYTE PTR [rcx+rsi*1+0x40001],bl
 1020536:	add    BYTE PTR [rax],al
 1020538:	stos   DWORD PTR es:[rdi],eax
 1020539:	xor    DWORD PTR [rcx],eax
 102053b:	add    BYTE PTR [rdx],al
 102053d:	add    BYTE PTR [rax],al
 102053f:	add    BYTE PTR [rdx+0x1000131],bh
 1020545:	add    BYTE PTR [rax],al
 1020547:	add    cl,cl
 1020549:	xor    DWORD PTR [rcx],eax
 102054b:	add    BYTE PTR [rax],al
 102054d:	add    BYTE PTR [rax],al
 102054f:	add    dl,bl
 1020551:	xor    DWORD PTR [rcx],eax
 1020553:	add    bh,bh
 1020555:	(bad)  
 1020556:	(bad)  
 1020557:	push   rbx
 1020559:	xor    DWORD PTR [rcx],eax
 102055b:	add    BYTE PTR [rax],cl
 102055d:	add    BYTE PTR [rax],al
 102055f:	add    BYTE PTR [rdx+rsi*1],al
 1020562:	add    DWORD PTR [rax],eax
 1020564:	(bad)  
 1020565:	add    BYTE PTR [rax],al
 1020567:	add    BYTE PTR [rbx],dl
 1020569:	xor    al,BYTE PTR [rcx]
 102056b:	add    BYTE PTR [rax+rax*1],al
 102056e:	add    BYTE PTR [rax],al
 1020570:	and    dh,BYTE PTR [rdx]
 1020572:	add    DWORD PTR [rax],eax
 1020574:	add    al,BYTE PTR [rax]
 1020576:	add    BYTE PTR [rax],al
 1020578:	xor    DWORD PTR [rdx],esi
 102057a:	add    DWORD PTR [rax],eax
 102057c:	add    DWORD PTR [rax],eax
 102057e:	add    BYTE PTR [rax],al
 1020580:	xor    al,BYTE PTR [rcx]
 1020583:	add    BYTE PTR [rax],al
 1020585:	add    BYTE PTR [rax],al
 1020587:	add    BYTE PTR [rcx+0x32],dl
 102058a:	add    DWORD PTR [rax],eax
 102058c:	(bad)  
 102058d:	(bad)  
 102058e:	(bad)  
 102058f:	jmp    QWORD PTR [rbp+0x32]
 1020592:	add    DWORD PTR [rax],eax
 1020594:	(bad)  
 1020595:	add    BYTE PTR [rax],al
 1020597:	add    BYTE PTR [rdx+rsi*1+0x1],dh
 102059b:	add    BYTE PTR [rax+rax*1],al
 102059e:	add    BYTE PTR [rax],al
 10205a0:	xor    DWORD PTR [rdx],0x1
 10205a3:	add    BYTE PTR [rdx],al
 10205a5:	add    BYTE PTR [rax],al
 10205a7:	add    BYTE PTR [rdx+0x1000132],dl
 10205ad:	add    BYTE PTR [rax],al
 10205af:	add    BYTE PTR [rcx+0x132],ah
 10205b5:	add    BYTE PTR [rax],al
 10205b7:	add    BYTE PTR [rdx-0xfffece],dh
 10205bd:	(bad)  
 10205be:	(bad)  
 10205bf:	inc    DWORD PTR [rcx]
 10205c1:	adc    al,0x8
 10205c3:	add    BYTE PTR [rsp+riz*2],dl
 10205c6:	or     BYTE PTR [rax],al
 10205c8:	adc    al,0x54
 10205ca:	(bad)  
 10205cb:	add    BYTE PTR [rsp+rsi*1],dl
 10205ce:	(bad)  
 10205cf:	add    BYTE PTR [rdx+rsi*1],dl
 10205d2:	adc    BYTE PTR [rax+0x19],dh
 10205d5:	(bad)  
 10205d6:	(bad)  
 10205d7:	add    BYTE PTR [rip+0xc005f34],bl        # 0xd026511
 10205dd:	add    DWORD PTR [rax+0x0],ebx
 10205e0:	add    eax,0x27003e0
 10205e5:	(bad)  
 10205e6:	add    BYTE PTR [rax],al
 10205e8:	and    al,0x75
 10205ea:	add    DWORD PTR [rax],eax
 10205ec:	ror    BYTE PTR [rax+0x0],1
 10205ef:	add    BYTE PTR [rdx-0xfffffe],dh
 10205f5:	(bad)  
 10205f6:	(bad)  
 10205f7:	push   QWORD PTR [rax+0x1d4]
 10205fd:	add    BYTE PTR [rax],al
 10205ff:	add    al,al
 1020601:	(bad)  
 1020602:	add    DWORD PTR [rax],eax
 1020604:	mov    al,0x33
 1020606:	add    DWORD PTR [rax],eax
 1020608:	(bad)  
 1020609:	(bad)  
 102060a:	(bad)  
 102060b:	(bad)  
 102060c:	out    dx,al
 102060d:	xor    eax,DWORD PTR [rcx]
 102060f:	add    BYTE PTR [rax],al
 1020611:	add    BYTE PTR [rax],al
 1020613:	add    BYTE PTR [rax],cl
 1020615:	xor    al,0x1
 1020617:	add    BYTE PTR [rcx],al
 1020619:	add    BYTE PTR [rax],al
 102061b:	add    BYTE PTR [rdx+0x34],dl
 102061e:	add    DWORD PTR [rax],eax
 1020620:	add    BYTE PTR [rax],al
 1020622:	add    BYTE PTR [rax],al
 1020624:	movsxd esi,DWORD PTR [rcx+rax*1]
 1020627:	add    bh,bh
 1020629:	(bad)  
 102062a:	(bad)  
 102062b:	call   QWORD PTR [rcx]
 102062d:	(bad)  
 102062e:	or     al,BYTE PTR [rax]
 1020630:	(bad)  
 1020631:	push   rsp
 1020632:	adc    BYTE PTR [rax],al
 1020634:	sbb    esi,DWORD PTR [rsi+rcx*1]
 1020637:	add    BYTE PTR [rdi],cl
 1020639:	jb     0x1020646
 102063b:	lock or eax,esp
 102063e:	(bad)  
 102063f:	rol    BYTE PTR [rip+0x18600470],0x75        # 0x19620ab6
 1020646:	add    DWORD PTR [rax],eax
 1020648:	add    BYTE PTR [rcx+0x0],cl
 102064b:	add    bh,bh
 102064d:	(bad)  
 102064e:	(bad)  
 102064f:	jmp    QWORD PTR [rax+0x1d0]
 1020655:	add    BYTE PTR [rax],al
 1020657:	add    BYTE PTR [rax+0x10001d0],dh
 102065d:	add    BYTE PTR [rax],al
 102065f:	add    al,al
 1020661:	rol    BYTE PTR [rcx],1
 1020663:	add    BYTE PTR [rdx],al
 1020665:	add    BYTE PTR [rax],al
 1020667:	add    al,dl
 1020669:	rol    BYTE PTR [rcx],1
 102066b:	add    BYTE PTR [rdx],al
 102066d:	add    BYTE PTR [rax],al
 102066f:	add    al,ah
 1020671:	rol    BYTE PTR [rcx],1
 1020673:	add    BYTE PTR [rdx],al
 1020675:	add    BYTE PTR [rax],al
 1020677:	add    al,dh
 1020679:	rol    BYTE PTR [rcx],1
 102067b:	add    BYTE PTR [rdx],al
 102067d:	add    BYTE PTR [rax],al
 102067f:	add    BYTE PTR [rax],al
 1020681:	rol    DWORD PTR [rcx],1
 1020683:	add    BYTE PTR [rax-0xfffecc],ah
 1020689:	(bad)  
 102068a:	(bad)  
 102068b:	call   rcx
 102068d:	xor    al,0x1
 102068f:	add    BYTE PTR [rax],al
 1020691:	add    BYTE PTR [rax],al
 1020693:	add    ch,dl
 1020695:	xor    al,0x1
 1020697:	add    BYTE PTR [rcx],al
 1020699:	add    BYTE PTR [rax],al
 102069b:	add    cl,bl
 102069d:	xor    al,0x1
 102069f:	add    BYTE PTR [rdx],al
 10206a1:	add    BYTE PTR [rax],al
 10206a3:	add    BYTE PTR [rdx+0x35],cl
 10206a6:	add    DWORD PTR [rax],eax
 10206a8:	add    al,0x0
 10206aa:	add    BYTE PTR [rax],al
 10206ac:	xor    al,0x36
 10206ae:	add    DWORD PTR [rax],eax
 10206b0:	(bad)  
 10206b1:	add    BYTE PTR [rax],al
 10206b3:	add    BYTE PTR [rdx+0x36],cl
 10206b6:	add    DWORD PTR [rax],eax
 10206b8:	add    al,BYTE PTR [rax]
 10206ba:	add    BYTE PTR [rax],al
 10206bc:	pop    rdi
 10206bd:	add    DWORD PTR ss:[rax],eax
 10206c0:	add    al,0x0
 10206c2:	add    BYTE PTR [rax],al
 10206c4:	(bad)  
 10206c5:	add    DWORD PTR ss:[rax],eax
 10206c8:	add    eax,0x6a000000
 10206cd:	add    DWORD PTR ss:[rax],eax
 10206d0:	add    al,BYTE PTR [rax]
 10206d2:	add    BYTE PTR [rax],al
 10206d4:	cdq    
 10206d5:	add    DWORD PTR ss:[rax],eax
 10206d8:	add    DWORD PTR [rax],eax
 10206da:	add    BYTE PTR [rax],al
 10206dc:	stos   BYTE PTR es:[rdi],al
 10206dd:	add    DWORD PTR ss:[rax],eax
 10206e0:	add    BYTE PTR [rax],al
 10206e2:	add    BYTE PTR [rax],al
 10206e4:	mov    ebx,0xff000136
 10206e9:	(bad)  
 10206ea:	(bad)  
 10206eb:	call   QWORD PTR [rcx]
 10206ed:	adc    al,0x4
 10206ef:	add    BYTE PTR [rsp+rsi*1],dl
 10206f2:	or     DWORD PTR [rax],eax
 10206f4:	(bad)  
 10206f5:	push   rdx
 10206f6:	add    dh,BYTE PTR [rax+0x18]
 10206f9:	jne    0x10206fc
 10206fb:	add    BYTE PTR [rax],dh
 10206fd:	rex.WB add BYTE PTR [r8],al
 1020700:	(bad)  
 1020701:	(bad)  
 1020702:	(bad)  
 1020703:	jmp    QWORD PTR [rax]
 1020705:	iret   
 1020706:	add    DWORD PTR [rax],eax
 1020708:	lock add DWORD PTR ss:[rax],eax
 102070c:	(bad)  
 102070d:	(bad)  
 102070e:	(bad)  
 102070f:	dec    DWORD PTR [rsi]
 1020711:	(bad)  
 1020712:	add    DWORD PTR [rax],eax
 1020714:	add    BYTE PTR [rax],al
 1020716:	add    BYTE PTR [rax],al
 1020718:	rex.RXB (bad) 
 102071a:	add    DWORD PTR [rax],eax
 102071c:	(bad)  
 102071d:	(bad)  
 102071e:	(bad)  
 102071f:	inc    DWORD PTR [rcx]
 1020721:	or     al,BYTE PTR [rdx]
 1020723:	add    BYTE PTR [rdx],cl
 1020725:	xor    al,BYTE PTR [rsi]
 1020727:	xor    BYTE PTR [rcx],ah
 1020729:	add    eax,0x74050002
 102072e:	(bad)  
 102072f:	add    BYTE PTR [rax+0x37],dh
 1020732:	add    DWORD PTR [rax],eax
 1020734:	jp     0x102076d
 1020736:	add    DWORD PTR [rax],eax
 1020738:	and    BYTE PTR [rdi],al
 102073a:	add    al,BYTE PTR [rax]
 102073c:	and    DWORD PTR [rax],eax
 102073e:	add    BYTE PTR [rax],al
 1020740:	jo     0x1020779
 1020742:	add    DWORD PTR [rax],eax
 1020744:	jp     0x102077d
 1020746:	add    DWORD PTR [rax],eax
 1020748:	and    BYTE PTR [rdi],al
 102074a:	add    al,BYTE PTR [rax]
 102074c:	adc    DWORD PTR [rdi],ecx
 102074e:	add    al,BYTE PTR [rax]
 1020750:	(bad)  
 1020751:	push   rdx
 1020752:	add    dh,BYTE PTR [rax]
 1020754:	sbb    BYTE PTR [rbp+0x1],dh
 1020757:	add    BYTE PTR [rax+0x49],ah
 102075a:	add    BYTE PTR [rax],al
 102075c:	(bad)  
 102075d:	(bad)  
 102075e:	(bad)  
 102075f:	inc    DWORD PTR [rax-0x4ffffe28]
 1020765:	(bad)  
 1020766:	add    DWORD PTR [rax],eax
 1020768:	(bad)  
 1020769:	(bad)  
 102076a:	(bad)  
 102076b:	dec    eax
 102076d:	(bad)  
 102076e:	add    DWORD PTR [rax],eax
 1020770:	add    BYTE PTR [rax],al
 1020772:	add    BYTE PTR [rax],al
 1020774:	lock (bad) 
 1020776:	add    DWORD PTR [rax],eax
 1020778:	(bad)  
 1020779:	(bad)  
 102077a:	(bad)  
 102077b:	inc    DWORD PTR [rcx]
 102077d:	or     al,BYTE PTR [rax+rax*1]
 1020780:	or     dh,BYTE PTR [rsi+rax*1]
 1020783:	add    BYTE PTR [rdx],cl
 1020785:	xor    al,BYTE PTR [rsi]
 1020787:	jo     0x102079a
 1020789:	adc    eax,DWORD PTR [rdx]
 102078b:	add    BYTE PTR [rdx],cl
 102078d:	push   rdx
 102078e:	(bad)  
 102078f:	xor    BYTE PTR [rax],bl
 1020791:	jne    0x1020794
 1020793:	add    BYTE PTR [rax-0xffffb7],dl
 1020799:	(bad)  
 102079a:	(bad)  
 102079b:	inc    DWORD PTR [rax-0x35]
 102079e:	add    DWORD PTR [rax],eax
 10207a0:	jo     0x10207da
 10207a2:	add    DWORD PTR [rax],eax
 10207a4:	(bad)  
 10207a5:	(bad)  
 10207a6:	(bad)  
 10207a7:	inc    DWORD PTR [rsi+0x138]
 10207ad:	add    BYTE PTR [rax],al
 10207af:	add    BYTE PTR [rbx-0xfffec8],bl
 10207b5:	(bad)  
 10207b6:	(bad)  
 10207b7:	call   QWORD PTR [rcx]
 10207b9:	and    cl,BYTE PTR [rdx]
 10207bb:	add    BYTE PTR [rdx],ah
 10207bd:	fs or  eax,0xc541d00
 10207c3:	add    BYTE PTR [rax],bl
 10207c5:	xor    al,0xb
 10207c7:	add    BYTE PTR [rdx],cl
 10207c9:	push   rdx
 10207ca:	(bad)  
 10207cb:	lock add al,0xe0
 10207ce:	add    dh,BYTE PTR [rax+0x18]
 10207d1:	jne    0x10207d4
 10207d3:	add    al,al
 10207d5:	rex.WB add BYTE PTR [r8],al
 10207d8:	(bad)  
 10207d9:	(bad)  
 10207da:	(bad)  
 10207db:	inc    DWORD PTR [rax-0x28]
 10207de:	add    DWORD PTR [rax],eax
 10207e0:	mov    al,0x38
 10207e2:	add    DWORD PTR [rax],eax
 10207e4:	(bad)  
 10207e5:	(bad)  
 10207e6:	(bad)  
 10207e7:	(bad)  
 10207e8:	std    
 10207e9:	cmp    BYTE PTR [rcx],al
 10207eb:	add    BYTE PTR [rax],al
 10207ed:	add    BYTE PTR [rax],al
 10207ef:	add    BYTE PTR [rcx+0x39],cl
 10207f2:	add    DWORD PTR [rax],eax
 10207f4:	(bad)  
 10207f5:	(bad)  
 10207f6:	(bad)  
 10207f7:	inc    DWORD PTR [rcx]
 10207f9:	or     al,BYTE PTR [rax+rax*1]
 10207fc:	or     dh,BYTE PTR [rsi+rax*1]
 10207ff:	add    BYTE PTR [rdx],cl
 1020801:	xor    al,BYTE PTR [rsi]
 1020803:	jo     0x1020816
 1020805:	sbb    BYTE PTR [rdx],al
 1020807:	add    BYTE PTR [rdi],cl
 1020809:	push   rdx
 102080a:	or     esi,DWORD PTR [rax]
 102080c:	sbb    BYTE PTR [rbp+0x1],dh
 102080f:	add    al,dh
 1020811:	rex.WB add BYTE PTR [r8],al
 1020814:	(bad)  
 1020815:	(bad)  
 1020816:	(bad)  
 1020817:	jmp    QWORD PTR [rax+0x1d3]
 102081d:	add    BYTE PTR [rax],al
 102081f:	add    BYTE PTR [rax+0x10001d3],dh
 1020825:	add    BYTE PTR [rax],al
 1020827:	add    al,al
 1020829:	rol    DWORD PTR [rcx],cl
 102082b:	add    bh,bh
 102082d:	(bad)  
 102082e:	(bad)  
 102082f:	call   rax
 1020831:	rol    DWORD PTR [rcx],cl
 1020833:	add    BYTE PTR [rax],al
 1020835:	cmp    al,BYTE PTR [rcx]
 1020837:	add    bh,bh
 1020839:	(bad)  
 102083a:	(bad)  
 102083b:	call   FWORD PTR [rbx]
 102083d:	cmp    al,BYTE PTR [rcx]
 102083f:	add    BYTE PTR [rcx],al
 1020841:	add    BYTE PTR [rax],al
 1020843:	add    BYTE PTR [rbx],ch
 1020845:	cmp    al,BYTE PTR [rcx]
 1020847:	add    BYTE PTR [rax],al
 1020849:	add    BYTE PTR [rax],al
 102084b:	add    BYTE PTR [rbx],bh
 102084d:	cmp    al,BYTE PTR [rcx]
 102084f:	add    bh,bh
 1020851:	(bad)  
 1020852:	(bad)  
 1020853:	inc    DWORD PTR [rcx]
 1020855:	add    al,0x1
 1020857:	add    BYTE PTR [rdx+rax*2],al
 102085a:	add    BYTE PTR [rax],al
 102085c:	adc    DWORD PTR [rdi],ecx
 102085e:	add    al,BYTE PTR [rax]
 1020860:	(bad)  
 1020861:	jb     0x1020865
 1020863:	xor    BYTE PTR [rax],bl
 1020865:	jne    0x1020868
 1020867:	add    BYTE PTR [rax],ah
 1020869:	rex.WX add BYTE PTR [rax],al
 102086c:	(bad)  
 102086d:	(bad)  
 102086e:	(bad)  
 102086f:	push   QWORD PTR [rax-0x7ffffe26]
 1020875:	cmp    al,BYTE PTR [rcx]
 1020877:	add    bh,bh
 1020879:	(bad)  
 102087a:	(bad)  
 102087b:	(bad)  
 102087c:	jmp    0x10208b8
 102087e:	add    DWORD PTR [rax],eax
 1020880:	add    BYTE PTR [rax],al
 1020882:	add    BYTE PTR [rax],al
 1020884:	(bad)  
 1020885:	cmp    eax,DWORD PTR [rcx]
 1020887:	add    bh,bh
 1020889:	(bad)  
 102088a:	(bad)  
 102088b:	call   QWORD PTR [rcx]
 102088d:	sbb    eax,0x741d0008
 1020892:	adc    BYTE PTR [rax],al
 1020894:	sbb    DWORD PTR [rdi+rcx*1+0x0],esp
 1020898:	adc    eax,0x9000e34
 102089d:	mov    dl,0x5
 102089f:	loopne 0x10208b9
 10208a1:	jne    0x10208a4
 10208a3:	add    BYTE PTR [rax+0x4a],dl
 10208a6:	add    BYTE PTR [rax],al
 10208a8:	(bad)  
 10208a9:	(bad)  
 10208aa:	(bad)  
 10208ab:	push   rax
 10208ad:	xlat   BYTE PTR ds:[rbx]
 10208ae:	add    DWORD PTR [rax],eax
 10208b0:	add    BYTE PTR [rax],al
 10208b2:	add    BYTE PTR [rax],al
 10208b4:	add    al,bl
 10208b6:	add    DWORD PTR [rax],eax
 10208b8:	add    DWORD PTR [rax],eax
 10208ba:	add    BYTE PTR [rax],al
 10208bc:	adc    al,bl
 10208be:	add    DWORD PTR [rax],eax
 10208c0:	add    al,BYTE PTR [rax]
 10208c2:	add    BYTE PTR [rax],al
 10208c4:	and    al,bl
 10208c6:	add    DWORD PTR [rax],eax
 10208c8:	rex cmp eax,DWORD PTR [rcx]
 10208cb:	add    bh,bh
 10208cd:	(bad)  
 10208ce:	(bad)  
 10208cf:	push   QWORD PTR [rbx+0x3b]
 10208d2:	add    DWORD PTR [rax],eax
 10208d4:	add    BYTE PTR [rax],al
 10208d6:	add    BYTE PTR [rax],al
 10208d8:	test   BYTE PTR [rbx],bh
 10208da:	add    DWORD PTR [rax],eax
 10208dc:	add    DWORD PTR [rax],eax
 10208de:	add    BYTE PTR [rax],al
 10208e0:	nop
 10208e1:	cmp    eax,DWORD PTR [rcx]
 10208e3:	add    BYTE PTR [rdx],al
 10208e5:	add    BYTE PTR [rax],al
 10208e7:	add    dh,ch
 10208e9:	cmp    eax,DWORD PTR [rcx]
 10208eb:	add    BYTE PTR [rbx],al
 10208ed:	add    BYTE PTR [rax],al
 10208ef:	add    BYTE PTR [rsp+rdi*1],bl
 10208f2:	add    DWORD PTR [rax],eax
 10208f4:	add    al,BYTE PTR [rax]
 10208f6:	add    BYTE PTR [rax],al
 10208f8:	sub    al,0x3c
 10208fa:	add    DWORD PTR [rax],eax
 10208fc:	add    DWORD PTR [rax],eax
 10208fe:	add    BYTE PTR [rax],al
 1020900:	cmp    BYTE PTR [rcx+rax*1],bh
 1020903:	add    BYTE PTR [rax],al
 1020905:	add    BYTE PTR [rax],al
 1020907:	add    BYTE PTR [rsp+rdi*1+0x1],cl
 102090b:	add    bh,bh
 102090d:	(bad)  
 102090e:	(bad)  
 102090f:	call   QWORD PTR [rcx]
 1020911:	and    DWORD PTR [rdx],ecx
 1020913:	add    BYTE PTR [rcx],ah
 1020915:	je     0x102092a
 1020917:	add    BYTE PTR [rip+0x19001264],bl        # 0x1a021b81
 102091d:	push   rsp
 102091e:	adc    DWORD PTR [rax],eax
 1020920:	adc    eax,0x9001034
 1020925:	rol    BYTE PTR [rip+0x17518e0],cl        # 0x277220b
 102092b:	add    BYTE PTR [rax-0xffffb6],al
 1020931:	(bad)  
 1020932:	(bad)  
 1020933:	inc    DWORD PTR [rax]
 1020935:	enter  0x1,0x0
 1020939:	add    BYTE PTR [rax],al
 102093b:	add    BYTE PTR [rax],dl
 102093d:	enter  0x1,0x1
 1020941:	add    BYTE PTR [rax],al
 1020943:	add    BYTE PTR [rax],ah
 1020945:	enter  0x1,0x2
 1020949:	add    BYTE PTR [rax],al
 102094b:	add    BYTE PTR [rax],dh
 102094d:	enter  0x1,0x80
 1020951:	cmp    al,0x1
 1020953:	add    bh,bh
 1020955:	(bad)  
 1020956:	(bad)  
 1020957:	(bad)  
 1020958:	mov    edx,0x13c
 102095d:	add    BYTE PTR [rax],al
 102095f:	add    al,cl
 1020961:	cmp    al,0x1
 1020963:	add    BYTE PTR [rcx],al
 1020965:	add    BYTE PTR [rax],al
 1020967:	add    ah,dl
 1020969:	cmp    al,0x1
 102096b:	add    BYTE PTR [rdx],al
 102096d:	add    BYTE PTR [rax],al
 102096f:	add    BYTE PTR [rip+0x300013d],ch        # 0x4020ab2
 1020975:	add    BYTE PTR [rax],al
 1020977:	add    BYTE PTR [rdi+0x3d],bl
 102097a:	add    DWORD PTR [rax],eax
 102097c:	add    al,BYTE PTR [rax]
 102097e:	add    BYTE PTR [rax],al
 1020980:	outs   dx,DWORD PTR ds:[rsi]
 1020981:	cmp    eax,0x10001
 1020986:	add    BYTE PTR [rax],al
 1020988:	jnp    0x10209c7
 102098a:	add    DWORD PTR [rax],eax
 102098c:	add    BYTE PTR [rax],al
 102098e:	add    BYTE PTR [rax],al
 1020990:	mov    WORD PTR [rip+0xffffffffffff0001],?        # 0x1010997
 1020996:	(bad)  
 1020997:	call   QWORD PTR [rcx]
 1020999:	(bad)  
 102099a:	or     BYTE PTR [rax],al
 102099c:	(bad)  
 102099d:	or     al,BYTE PTR fs:[rax]
 10209a0:	sbb    DWORD PTR [rcx+rcx*1+0x0],edx
 10209a4:	adc    al,0x34
 10209a6:	or     BYTE PTR [rax],al
 10209a8:	(bad)  
 10209a9:	push   rdx
 10209aa:	add    dh,BYTE PTR [rax+0x18]
 10209ad:	jne    0x10209b0
 10209af:	add    BYTE PTR [rax-0xffffb6],dh
 10209b5:	(bad)  
 10209b6:	(bad)  
 10209b7:	jmp    QWORD PTR [rax+0x1c8]
 10209bd:	add    BYTE PTR [rax],al
 10209bf:	add    BYTE PTR [rax-0x3ffffe38],dh
 10209c5:	cmp    eax,0xffff0001
 10209ca:	(bad)  
 10209cb:	push   rsp
 10209cd:	cmp    eax,0x1
 10209d2:	add    BYTE PTR [rax],al
 10209d4:	(bad)  
 10209d5:	cmp    eax,0x10001
 10209da:	add    BYTE PTR [rax],al
 10209dc:	sub    edi,DWORD PTR [rsi]
 10209de:	add    DWORD PTR [rax],eax
 10209e0:	add    BYTE PTR [rax],al
 10209e2:	add    BYTE PTR [rax],al
 10209e4:	cmp    al,0x3e
 10209e6:	add    DWORD PTR [rax],eax
 10209e8:	(bad)  
 10209e9:	(bad)  
 10209ea:	(bad)  
 10209eb:	call   QWORD PTR [rcx]
 10209ed:	sub    ecx,DWORD PTR [rax+rax*1]
 10209f0:	sub    ebp,DWORD PTR [rax+0x6]
 10209f3:	add    BYTE PTR [rsi],ah
 10209f5:	xor    al,0x16
 10209f7:	add    BYTE PTR [rsi],dl
 10209f9:	ror    BYTE PTR [rdi],cl
 10209fb:	lock or eax,0x9d00be0
 1020a01:	rol    BYTE PTR [rdi],0x70
 1020a04:	(bad)  
 1020a05:	(bad)  
 1020a06:	add    eax,0x1751850
 1020a0b:	add    al,ah
 1020a0d:	rex.WX add BYTE PTR [rax],al
 1020a10:	(bad)  
 1020a11:	(bad)  
 1020a12:	(bad)  
 1020a13:	inc    DWORD PTR [rax-0x31]
 1020a16:	add    DWORD PTR [rax],eax
 1020a18:	(bad)  
 1020a19:	(bad)  
 1020a1a:	(bad)  
 1020a1b:	call   QWORD PTR [rax-0x31]
 1020a1e:	add    DWORD PTR [rax],eax
 1020a20:	(bad)  
 1020a21:	(bad)  
 1020a22:	(bad)  
 1020a23:	jmp    QWORD PTR [rax-0x31]
 1020a26:	add    DWORD PTR [rax],eax
 1020a28:	(bad)  
 1020a29:	(bad)  
 1020a2a:	(bad)  
 1020a2b:	push   QWORD PTR [rax-0x31]
 1020a2e:	add    DWORD PTR [rax],eax
 1020a30:	(bad)  
 1020a31:	(bad)  
 1020a32:	(bad)  
 1020a33:	inc    DWORD PTR [rax-0xfffe31]
 1020a39:	(bad)  
 1020a3a:	(bad)  
 1020a3b:	call   QWORD PTR [rax-0xfffe31]
 1020a41:	(bad)  
 1020a42:	(bad)  
 1020a43:	jmp    QWORD PTR [rax-0xfffe31]
 1020a49:	(bad)  
 1020a4a:	(bad)  
 1020a4b:	push   QWORD PTR [rax-0xfffe31]
 1020a51:	(bad)  
 1020a52:	(bad)  
 1020a53:	inc    eax
 1020a55:	iret   
 1020a56:	add    DWORD PTR [rax],eax
 1020a58:	(bad)  
 1020a59:	(bad)  
 1020a5a:	(bad)  
 1020a5b:	call   rax
 1020a5d:	iret   
 1020a5e:	add    DWORD PTR [rax],eax
 1020a60:	(bad)  
 1020a61:	(bad)  
 1020a62:	(bad)  
 1020a63:	jmp    rax
 1020a65:	iret   
 1020a66:	add    DWORD PTR [rax],eax
 1020a68:	(bad)  
 1020a69:	(bad)  
 1020a6a:	(bad)  
 1020a6b:	push   rax
 1020a6d:	iret   
 1020a6e:	add    DWORD PTR [rax],eax
 1020a70:	(bad)  
 1020a71:	(bad)  
 1020a72:	(bad)  
 1020a73:	inc    DWORD PTR [rax]
 1020a75:	rol    BYTE PTR [rcx],1
 1020a77:	add    bh,bh
 1020a79:	(bad)  
 1020a7a:	(bad)  
 1020a7b:	call   QWORD PTR [rax]
 1020a7d:	rol    BYTE PTR [rcx],1
 1020a7f:	add    bh,bh
 1020a81:	(bad)  
 1020a82:	(bad)  
 1020a83:	jmp    QWORD PTR [rax]
 1020a85:	rol    BYTE PTR [rcx],1
 1020a87:	add    bh,bh
 1020a89:	(bad)  
 1020a8a:	(bad)  
 1020a8b:	push   QWORD PTR [rax]
 1020a8d:	rol    BYTE PTR [rcx],1
 1020a8f:	add    bh,bh
 1020a91:	(bad)  
 1020a92:	(bad)  
 1020a93:	inc    DWORD PTR [rax-0x30]
 1020a96:	add    DWORD PTR [rax],eax
 1020a98:	(bad)  
 1020a99:	(bad)  
 1020a9a:	(bad)  
 1020a9b:	call   QWORD PTR [rax-0x30]
 1020a9e:	add    DWORD PTR [rax],eax
 1020aa0:	(bad)  
 1020aa1:	(bad)  
 1020aa2:	(bad)  
 1020aa3:	jmp    QWORD PTR [rax-0x30]
 1020aa6:	add    DWORD PTR [rax],eax
 1020aa8:	(bad)  
 1020aa9:	(bad)  
 1020aaa:	(bad)  
 1020aab:	push   QWORD PTR [rax-0x30]
 1020aae:	add    DWORD PTR [rax],eax
 1020ab0:	(bad)  
 1020ab1:	(bad)  
 1020ab2:	(bad)  
 1020ab3:	inc    DWORD PTR [rax+0x700001d0]
 1020ab9:	add    DWORD PTR ds:[rax],eax
 1020abc:	(bad)  
 1020abd:	(bad)  
 1020abe:	(bad)  
 1020abf:	jmp    QWORD PTR [rbx]
 1020ac1:	(bad)  
 1020ac2:	add    DWORD PTR [rax],eax
 1020ac4:	(bad)  
 1020ac5:	add    BYTE PTR [rax],al
 1020ac7:	add    BYTE PTR [rax+0x3f],cl
 1020aca:	add    DWORD PTR [rax],eax
 1020acc:	(bad)  
 1020acd:	(bad)  
 1020ace:	(bad)  
 1020acf:	(bad)  
 1020ad0:	jns    0x1020b11
 1020ad2:	add    DWORD PTR [rax],eax
 1020ad4:	(bad)  
 1020ad5:	add    BYTE PTR [rax],al
 1020ad7:	add    BYTE PTR [rdi-0xfffec1],bl
 1020add:	(bad)  
 1020ade:	(bad)  
 1020adf:	(bad)  
 1020ae0:	jge    0x1020b22
 1020ae2:	add    DWORD PTR [rax],eax
 1020ae4:	or     BYTE PTR [rax],al
 1020ae6:	add    BYTE PTR [rax],al
 1020ae8:	movabs ds:0xf0ffffffff000140,al
 1020af1:	rex add DWORD PTR [rax],eax
 1020af4:	or     DWORD PTR [rax],eax
 1020af6:	add    BYTE PTR [rax],al
 1020af8:	cmovno eax,DWORD PTR [rcx]
 1020afb:	add    bh,bh
 1020afd:	(bad)  
 1020afe:	(bad)  
 1020aff:	call   FWORD PTR [rcx+rax*2+0x1]
 1020b03:	add    BYTE PTR [rdx],cl
 1020b05:	add    BYTE PTR [rax],al
 1020b07:	add    BYTE PTR [rdx+0x41],bh
 1020b0a:	add    DWORD PTR [rax],eax
 1020b0c:	(bad)  
 1020b0d:	(bad)  
 1020b0e:	(bad)  
 1020b0f:	inc    eax
 1020b11:	add    DWORD PTR [r8],eax
 1020b14:	or     eax,DWORD PTR [rax]
 1020b16:	add    BYTE PTR [rax],al
 1020b18:	fild   WORD PTR [rcx+0x1]
 1020b1b:	add    bh,bh
 1020b1d:	(bad)  
 1020b1e:	(bad)  
 1020b1f:	push   QWORD PTR [rsi]
 1020b21:	rex.X add DWORD PTR [rax],eax
 1020b24:	or     al,0x0
 1020b26:	add    BYTE PTR [rax],al
 1020b28:	pop    rsi
 1020b29:	rex.X add DWORD PTR [rax],eax
 1020b2c:	(bad)  
 1020b2d:	(bad)  
 1020b2e:	(bad)  
 1020b2f:	inc    ecx
 1020b31:	rex.X add DWORD PTR [rax],eax
 1020b34:	or     eax,0xe9000000
 1020b39:	rex.X add DWORD PTR [rax],eax
 1020b3c:	(bad)  
 1020b3d:	(bad)  
 1020b3e:	(bad)  
 1020b3f:	dec    DWORD PTR [rax+0x43]
 1020b42:	add    DWORD PTR [rax],eax
 1020b44:	(bad)  
 1020b45:	add    BYTE PTR [rax],al
 1020b47:	add    BYTE PTR [rbp+0x43],ch
 1020b4a:	add    DWORD PTR [rax],eax
 1020b4c:	(bad)  
 1020b4d:	(bad)  
 1020b4e:	(bad)  
 1020b4f:	inc    edi
 1020b51:	rex.XB add DWORD PTR [r8],eax
 1020b54:	sldt   WORD PTR [rax]
 1020b57:	add    dl,ch
 1020b59:	rex.XB add DWORD PTR [r8],eax
 1020b5c:	(bad)  
 1020b5d:	(bad)  
 1020b5e:	(bad)  
 1020b5f:	inc    DWORD PTR [rbx+0x44]
 1020b62:	add    DWORD PTR [rax],eax
 1020b64:	adc    BYTE PTR [rax],al
 1020b66:	add    BYTE PTR [rax],al
 1020b68:	add    DWORD PTR fs:[rax],r8d
 1020b6c:	(bad)  
 1020b6d:	(bad)  
 1020b6e:	(bad)  
 1020b6f:	(bad)  
 1020b70:	mov    ebp,0x11000144
 1020b75:	add    BYTE PTR [rax],al
 1020b77:	add    al,ah
 1020b79:	add    DWORD PTR [rax],r8d
 1020b7c:	(bad)  
 1020b7d:	(bad)  
 1020b7e:	(bad)  
 1020b7f:	(bad)  
 1020b80:	rex.RX add DWORD PTR ds:[rax],r8d
 1020b84:	adc    eax,DWORD PTR [rax]
 1020b86:	add    BYTE PTR [rax],al
 1020b88:	jmp    0x1020bd0
 1020b8a:	add    DWORD PTR [rax],eax
 1020b8c:	adc    al,0x0
 1020b8e:	add    BYTE PTR [rax],al
 1020b90:	cli    
 1020b91:	rex.RX add DWORD PTR [rax],r8d
 1020b94:	(bad)  
 1020b95:	(bad)  
 1020b96:	(bad)  
 1020b97:	(bad)  
 1020b98:	mov    edx,0x4000147
 1020b9d:	add    BYTE PTR [rax],al
 1020b9f:	add    ah,dh
 1020ba1:	rex.RXB add DWORD PTR [r8],r8d
 1020ba4:	add    eax,0x6000000
 1020ba9:	add    QWORD PTR [rax],rax
 1020bac:	(bad)  
 1020bad:	(bad)  
 1020bae:	(bad)  
 1020baf:	call   FWORD PTR [rdx+0x1000148]
 1020bb5:	add    BYTE PTR [rax],al
 1020bb7:	add    ch,dl
 1020bb9:	add    QWORD PTR [rax],rax
 1020bbc:	add    al,BYTE PTR [rax]
 1020bbe:	add    BYTE PTR [rax],al
 1020bc0:	out    0x48,eax
 1020bc2:	add    DWORD PTR [rax],eax
 1020bc4:	(bad)  
 1020bc5:	(bad)  
 1020bc6:	(bad)  
 1020bc7:	call   QWORD PTR [rcx]
 1020bc9:	adc    eax,DWORD PTR [rdx]
 1020bcb:	add    BYTE PTR [rdx],cl
 1020bcd:	push   rdx
 1020bce:	(bad)  
 1020bcf:	xor    BYTE PTR [rax],bl
 1020bd1:	jne    0x1020bd4
 1020bd3:	add    BYTE PTR [rax],dl
 1020bd5:	rex.WXB add BYTE PTR [r8],al
 1020bd8:	(bad)  
 1020bd9:	(bad)  
 1020bda:	(bad)  
 1020bdb:	inc    DWORD PTR [rax]
 1020bdd:	retf   
 1020bde:	add    DWORD PTR [rax],eax
 1020be0:	xor    BYTE PTR [rcx+0x1],cl
 1020be3:	add    bh,bh
 1020be5:	(bad)  
 1020be6:	(bad)  
 1020be7:	inc    DWORD PTR [rsi+0x49]
 1020bea:	add    DWORD PTR [rax],eax
 1020bec:	add    BYTE PTR [rax],al
 1020bee:	add    BYTE PTR [rax],al
 1020bf0:	pop    rbx
 1020bf1:	add    QWORD PTR [r8],rax
 1020bf4:	(bad)  
 1020bf5:	(bad)  
 1020bf6:	(bad)  
 1020bf7:	call   QWORD PTR [rcx]
 1020bf9:	adc    eax,DWORD PTR [rdx]
 1020bfb:	add    BYTE PTR [rdx],cl
 1020bfd:	push   rdx
 1020bfe:	(bad)  
 1020bff:	xor    BYTE PTR [rax],bl
 1020c01:	jne    0x1020c04
 1020c03:	add    BYTE PTR [rax+0x4b],al
 1020c06:	add    BYTE PTR [rax],al
 1020c08:	(bad)  
 1020c09:	(bad)  
 1020c0a:	(bad)  
 1020c0b:	jmp    QWORD PTR [rax]
 1020c0d:	retf   
 1020c0e:	add    DWORD PTR [rax],eax
 1020c10:	or     BYTE PTR [rcx+0x1],0x0
 1020c14:	(bad)  
 1020c15:	(bad)  
 1020c16:	(bad)  
 1020c17:	call   QWORD PTR [rsi+0x149]
 1020c1d:	add    BYTE PTR [rax],al
 1020c1f:	add    BYTE PTR [rbx-0xfffeb7],ch
 1020c25:	(bad)  
 1020c26:	(bad)  
 1020c27:	call   FWORD PTR [rcx]
 1020c29:	(bad)  
 1020c2a:	or     al,BYTE PTR [rax]
 1020c2c:	adc    al,0x1
 1020c2e:	sub    DWORD PTR [rax],eax
 1020c30:	or     eax,0x9e00bf0
 1020c35:	rol    BYTE PTR [rdi],1
 1020c37:	rol    BYTE PTR [rip+0x3600470],0x50        # 0x46210ae
 1020c3e:	add    dh,BYTE PTR [rax]
 1020c40:	and    al,0x75
 1020c42:	add    DWORD PTR [rax],eax
 1020c44:	jo     0x1020c91
 1020c46:	add    BYTE PTR [rax],al
 1020c48:	xor    al,BYTE PTR [rcx]
 1020c4a:	add    BYTE PTR [rax],al
 1020c4c:	(bad)  
 1020c4d:	(bad)  
 1020c4e:	(bad)  
 1020c4f:	jmp    QWORD PTR [rax-0x28]
 1020c52:	add    DWORD PTR [rax],eax
 1020c54:	ror    BYTE PTR [rcx+0x1],0x0
 1020c58:	(bad)  
 1020c59:	(bad)  
 1020c5a:	(bad)  
 1020c5b:	inc    DWORD PTR [rdx+rcx*2]
 1020c5e:	add    DWORD PTR [rax],eax
 1020c60:	add    BYTE PTR [rax],al
 1020c62:	add    BYTE PTR [rax],al
 1020c64:	jp     0x1020cb1
 1020c66:	add    DWORD PTR [rax],eax
 1020c68:	(bad)  
 1020c69:	(bad)  
 1020c6a:	(bad)  
 1020c6b:	inc    DWORD PTR [rcx]
 1020c6d:	add    al,0x1
 1020c6f:	add    BYTE PTR [rdx+rax*2],al
 1020c72:	add    BYTE PTR [rax],al
 1020c74:	add    DWORD PTR [rcx+rax*1],eax
 1020c77:	add    BYTE PTR [rdx+rax*2],al
 1020c7a:	add    BYTE PTR [rax],al
 1020c7c:	adc    DWORD PTR [rbx],edx
 1020c7e:	add    al,BYTE PTR [rax]
 1020c80:	or     dl,BYTE PTR [rdx+0x6]
 1020c83:	xor    BYTE PTR [rax],bl
 1020c85:	jne    0x1020c88
 1020c87:	add    BYTE PTR [rax-0xffffb5],ah
 1020c8d:	(bad)  
 1020c8e:	(bad)  
 1020c8f:	jmp    QWORD PTR [rax+0x100001ca]
 1020c95:	add    QWORD PTR [rax],r8
 1020c98:	(bad)  
 1020c99:	(bad)  
 1020c9a:	(bad)  
 1020c9b:	jmp    QWORD PTR [rsi]
 1020c9d:	add    QWORD PTR [rax],r8
 1020ca0:	add    BYTE PTR [rax],al
 1020ca2:	add    BYTE PTR [rax],al
 1020ca4:	cmp    ecx,DWORD PTR [rcx+rax*1+0x0]
 1020ca8:	(bad)  
 1020ca9:	(bad)  
 1020caa:	(bad)  
 1020cab:	inc    DWORD PTR [rcx]
 1020cad:	add    al,0x1
 1020caf:	add    BYTE PTR [rdx+rax*2],al
 1020cb2:	add    BYTE PTR [rax],al
 1020cb4:	add    DWORD PTR [rcx+rax*1],eax
 1020cb7:	add    BYTE PTR [rdx+rax*2],al
 1020cba:	add    BYTE PTR [rax],al
 1020cbc:	adc    DWORD PTR [rbx],edx
 1020cbe:	add    al,BYTE PTR [rax]
 1020cc0:	or     dl,BYTE PTR [rdx+0x6]
 1020cc3:	xor    BYTE PTR [rax],bl
 1020cc5:	jne    0x1020cc8
 1020cc7:	add    al,dl
 1020cc9:	rex.WXB add BYTE PTR [r8],al
 1020ccc:	(bad)  
 1020ccd:	(bad)  
 1020cce:	(bad)  
 1020ccf:	inc    eax
 1020cd1:	retf   0x1
 1020cd4:	ror    BYTE PTR [rcx+rax*1+0x0],1
 1020cd8:	(bad)  
 1020cd9:	(bad)  
 1020cda:	(bad)  
 1020cdb:	jmp    rsi
 1020cdd:	add    QWORD PTR [rax],r8
 1020ce0:	add    BYTE PTR [rax],al
 1020ce2:	add    BYTE PTR [rax],al
 1020ce4:	sti    
 1020ce5:	add    QWORD PTR [rax],r8
 1020ce8:	(bad)  
 1020ce9:	(bad)  
 1020cea:	(bad)  
 1020ceb:	inc    DWORD PTR [rcx]
 1020ced:	add    al,0x1
 1020cef:	add    BYTE PTR [rdx+rax*2],al
 1020cf2:	add    BYTE PTR [rax],al
 1020cf4:	add    DWORD PTR [rcx+rax*1],eax
 1020cf7:	add    BYTE PTR [rdx+rax*2],al
 1020cfa:	add    BYTE PTR [rax],al
 1020cfc:	add    DWORD PTR [rcx+rax*1],eax
 1020cff:	add    BYTE PTR [rdx+rax*2],al
 1020d02:	add    BYTE PTR [rax],al
 1020d04:	adc    DWORD PTR [rip+0x741d0008],ebx        # 0x751f0d12
 1020d0a:	adc    BYTE PTR [rax],al
 1020d0c:	sbb    DWORD PTR [rdi+rcx*1+0x0],esp
 1020d10:	adc    eax,0x9000e34
 1020d15:	mov    dl,0x5
 1020d17:	loopne 0x1020d31
 1020d19:	jne    0x1020d1c
 1020d1b:	add    BYTE PTR [rax],al
 1020d1d:	rex.WR add BYTE PTR [rax],r8b
 1020d20:	(bad)  
 1020d21:	(bad)  
 1020d22:	(bad)  
 1020d23:	call   rax
 1020d25:	enter  0x1,0x0
 1020d29:	add    BYTE PTR [rax],al
 1020d2b:	add    al,ah
 1020d2d:	enter  0x1,0x1
 1020d31:	add    BYTE PTR [rax],al
 1020d33:	add    al,dh
 1020d35:	enter  0x1,0x2
 1020d39:	add    BYTE PTR [rax],al
 1020d3b:	add    BYTE PTR [rax],al
 1020d3d:	leave  
 1020d3e:	add    DWORD PTR [rax],eax
 1020d40:	movabs al,ds:0xd3ffffffff00014d
 1020d49:	add    QWORD PTR [r8],r8
 1020d4c:	add    BYTE PTR [rax],al
 1020d4e:	add    BYTE PTR [rax],al
 1020d50:	in     al,0x4d
 1020d52:	add    DWORD PTR [rax],eax
 1020d54:	add    DWORD PTR [rax],eax
 1020d56:	add    BYTE PTR [rax],al
 1020d58:	lock add QWORD PTR [r8],r8
 1020d5c:	add    al,BYTE PTR [rax]
 1020d5e:	add    BYTE PTR [rax],al
 1020d60:	rex.R
 1020d61:	rex.WRX add QWORD PTR [rax],r8
 1020d64:	add    eax,DWORD PTR [rax]
 1020d66:	add    BYTE PTR [rax],al
 1020d68:	imul   ecx,DWORD PTR [rsi+0x1],0x0
 1020d6c:	add    al,BYTE PTR [rax]
 1020d6e:	add    BYTE PTR [rax],al
 1020d70:	jnp    0x1020dc0
 1020d72:	add    DWORD PTR [rax],eax
 1020d74:	add    DWORD PTR [rax],eax
 1020d76:	add    BYTE PTR [rax],al
 1020d78:	xchg   DWORD PTR [rsi+0x1],ecx
 1020d7b:	add    BYTE PTR [rax],al
 1020d7d:	add    BYTE PTR [rax],al
 1020d7f:	add    BYTE PTR [rbx-0xfffeb2],bl
 1020d85:	(bad)  
 1020d86:	(bad)  
 1020d87:	call   QWORD PTR [rcx]
 1020d89:	sbb    eax,0x741d0008
 1020d8e:	adc    BYTE PTR [rax],al
 1020d90:	sbb    DWORD PTR [rdi+rcx*1+0x0],esp
 1020d94:	adc    eax,0x9000e34
 1020d99:	mov    dl,0x5
 1020d9b:	loopne 0x1020db5
 1020d9d:	jne    0x1020da0
 1020d9f:	add    BYTE PTR [rax],dh
 1020da1:	rex.WR add BYTE PTR [rax],r8b
 1020da4:	(bad)  
 1020da5:	(bad)  
 1020da6:	(bad)  
 1020da7:	call   QWORD PTR [rax-0x38]
 1020daa:	add    DWORD PTR [rax],eax
 1020dac:	add    BYTE PTR [rax],al
 1020dae:	add    BYTE PTR [rax],al
 1020db0:	(bad)  
 1020db1:	enter  0x1,0x1
 1020db5:	add    BYTE PTR [rax],al
 1020db7:	add    BYTE PTR [rax-0x38],dh
 1020dba:	add    DWORD PTR [rax],eax
 1020dbc:	add    al,BYTE PTR [rax]
 1020dbe:	add    BYTE PTR [rax],al
 1020dc0:	or     al,0x1
 1020dc3:	add    al,dl
 1020dc5:	rex.WRX add QWORD PTR [rax],r8
 1020dc8:	(bad)  
 1020dc9:	(bad)  
 1020dca:	(bad)  
 1020dcb:	inc    DWORD PTR [rbx]
 1020dcd:	rex.WRXB add QWORD PTR [r8],r8
 1020dd0:	add    BYTE PTR [rax],al
 1020dd2:	add    BYTE PTR [rax],al
 1020dd4:	adc    al,0x4f
 1020dd6:	add    DWORD PTR [rax],eax
 1020dd8:	add    DWORD PTR [rax],eax
 1020dda:	add    BYTE PTR [rax],al
 1020ddc:	and    BYTE PTR [rdi+0x1],cl
 1020ddf:	add    BYTE PTR [rdx],al
 1020de1:	add    BYTE PTR [rax],al
 1020de3:	add    BYTE PTR [rbx+0x4f],dh
 1020de6:	add    DWORD PTR [rax],eax
 1020de8:	add    eax,DWORD PTR [rax]
 1020dea:	add    BYTE PTR [rax],al
 1020dec:	cdq    
 1020ded:	rex.WRXB add QWORD PTR [r8],r8
 1020df0:	add    al,BYTE PTR [rax]
 1020df2:	add    BYTE PTR [rax],al
 1020df4:	test   eax,0x100014f
 1020df9:	add    BYTE PTR [rax],al
 1020dfb:	add    BYTE PTR [rbp+0x14f],dh
 1020e01:	add    BYTE PTR [rax],al
 1020e03:	add    cl,cl
 1020e05:	rex.WRXB add QWORD PTR [r8],r8
 1020e08:	(bad)  
 1020e09:	(bad)  
 1020e0a:	(bad)  
 1020e0b:	call   QWORD PTR [rcx]
 1020e0d:	adc    eax,DWORD PTR [rdx]
 1020e0f:	add    BYTE PTR [rdx],cl
 1020e11:	push   rdx
 1020e12:	(bad)  
 1020e13:	xor    BYTE PTR [rax],bl
 1020e15:	jne    0x1020e18
 1020e17:	add    BYTE PTR [rax+0x4c],ah
 1020e1a:	add    BYTE PTR [rax],al
 1020e1c:	(bad)  
 1020e1d:	(bad)  
 1020e1e:	(bad)  
 1020e1f:	inc    DWORD PTR [rax+0x100001ca]
 1020e25:	push   rax
 1020e26:	add    DWORD PTR [rax],eax
 1020e28:	(bad)  
 1020e29:	(bad)  
 1020e2a:	(bad)  
 1020e2b:	jmp    QWORD PTR [rsi]
 1020e2d:	push   rax
 1020e2e:	add    DWORD PTR [rax],eax
 1020e30:	add    BYTE PTR [rax],al
 1020e32:	add    BYTE PTR [rax],al
 1020e34:	cmp    edx,DWORD PTR [rax+0x1]
 1020e37:	add    bh,bh
 1020e39:	(bad)  
 1020e3a:	(bad)  
 1020e3b:	call   QWORD PTR [rcx]
 1020e3d:	adc    al,BYTE PTR [rcx]
 1020e3f:	add    BYTE PTR [rcx],cl
 1020e41:	(bad)  
 1020e42:	add    BYTE PTR [rax],al
 1020e44:	sbb    BYTE PTR [rbp+0x1],dh
 1020e47:	add    BYTE PTR [rax-0xffffb4],dl
 1020e4d:	(bad)  
 1020e4e:	(bad)  
 1020e4f:	inc    eax
 1020e51:	retf   
 1020e52:	add    DWORD PTR [rax],eax
 1020e54:	push   rax
 1020e55:	push   rax
 1020e56:	add    DWORD PTR [rax],eax
 1020e58:	(bad)  
 1020e59:	(bad)  
 1020e5a:	(bad)  
 1020e5b:	call   FWORD PTR [rcx]
 1020e5d:	sbb    al,0x4
 1020e5f:	add    BYTE PTR [rdx],cl
 1020e61:	add    DWORD PTR [rbx+0x0],ebp
 1020e64:	add    esi,DWORD PTR [rax+0x2]
 1020e67:	push   rax
 1020e68:	test   al,0xbf
 1020e6a:	add    BYTE PTR [rax],al
 1020e6c:	rex add eax,DWORD PTR [rax]
 1020e6f:	add    BYTE PTR [rcx],ah
 1020e71:	or     BYTE PTR [rdx],al
 1020e73:	add    BYTE PTR [rax],cl
 1020e75:	xor    al,0x71
 1020e77:	add    BYTE PTR [rax-0x27fffeb0],al
 1020e7d:	push   rax
 1020e7e:	add    DWORD PTR [rax],eax
 1020e80:	pop    rsp
 1020e81:	(bad)  
 1020e82:	add    al,BYTE PTR [rax]
 1020e84:	and    DWORD PTR [rax],ecx
 1020e86:	add    al,BYTE PTR [rax]
 1020e88:	or     BYTE PTR [rdx+rbp*2+0x0],ah
 1020e8c:	fcom   DWORD PTR [rax+0x1]
 1020e8f:	add    cl,bh
 1020e91:	push   rax
 1020e92:	add    DWORD PTR [rax],eax
 1020e94:	jo     0x1020ea4
 1020e96:	add    al,BYTE PTR [rax]
 1020e98:	and    DWORD PTR [rax],eax
 1020e9a:	add    BYTE PTR [rax],al
 1020e9c:	fcom   DWORD PTR [rax+0x1]
 1020e9f:	add    cl,bh
 1020ea1:	push   rax
 1020ea2:	add    DWORD PTR [rax],eax
 1020ea4:	jo     0x1020eb4
 1020ea6:	add    al,BYTE PTR [rax]
 1020ea8:	and    DWORD PTR [rax],eax
 1020eaa:	add    BYTE PTR [rax],al
 1020eac:	adc    BYTE PTR [rax+0x1],0x0
 1020eb0:	fcom   DWORD PTR [rax+0x1]
 1020eb3:	add    BYTE PTR [rsi+rcx*1+0x2],bl
 1020eb7:	add    BYTE PTR [rcx],dl
 1020eb9:	adc    al,BYTE PTR [rcx]
 1020ebb:	add    BYTE PTR [rcx],cl
 1020ebd:	(bad)  
 1020ebe:	add    BYTE PTR [rax],al
 1020ec0:	sbb    BYTE PTR [rbp+0x1],dh
 1020ec3:	add    al,al
 1020ec5:	rex.WR add BYTE PTR [rax],r8b
 1020ec8:	(bad)  
 1020ec9:	(bad)  
 1020eca:	(bad)  
 1020ecb:	jmp    QWORD PTR [rax-0x34]
 1020ece:	add    DWORD PTR [rax],eax
 1020ed0:	(bad)  
 1020ed1:	(bad)  
 1020ed2:	(bad)  
 1020ed3:	push   QWORD PTR [rax-0x34]
 1020ed6:	add    DWORD PTR [rax],eax
 1020ed8:	adc    BYTE PTR [rcx+0x1],0x0
 1020edc:	(bad)  
 1020edd:	(bad)  
 1020ede:	(bad)  
 1020edf:	call   FWORD PTR [rcx]
 1020ee1:	sbb    eax,0x10b0005
 1020ee6:	push   0x0
 1020ee8:	add    al,0x70
 1020eea:	add    esp,DWORD PTR [rax+0x2]
 1020eed:	xor    BYTE PTR [rax],al
 1020eef:	add    BYTE PTR [rax+0x400000bf],ch
 1020ef5:	add    eax,DWORD PTR [rax]
 1020ef7:	add    BYTE PTR [rcx],al
 1020ef9:	or     al,BYTE PTR [rax+rax*1]
 1020efc:	or     dh,BYTE PTR [rdi+rax*1]
 1020eff:	add    BYTE PTR [rdx],cl
 1020f01:	xor    al,BYTE PTR [rsi]
 1020f03:	(bad)  
 1020f04:	and    DWORD PTR [rip+0x74050002],eax        # 0x75070f0c
 1020f0a:	(bad)  
 1020f0b:	add    BYTE PTR [rax+0x52],dl
 1020f0e:	add    DWORD PTR [rax],eax
 1020f10:	(bad)  
 1020f11:	push   rdx
 1020f12:	add    DWORD PTR [rax],eax
 1020f14:	clc    
 1020f15:	(bad)  
 1020f16:	add    al,BYTE PTR [rax]
 1020f18:	and    DWORD PTR [rax],eax
 1020f1a:	add    al,BYTE PTR [rax]
 1020f1c:	add    BYTE PTR [rsi+rax*1+0x0],dh
 1020f20:	push   rax
 1020f21:	push   rdx
 1020f22:	add    DWORD PTR [rax],eax
 1020f24:	(bad)  
 1020f25:	push   rdx
 1020f26:	add    DWORD PTR [rax],eax
 1020f28:	clc    
 1020f29:	(bad)  
 1020f2a:	add    al,BYTE PTR [rax]
 1020f2c:	and    DWORD PTR [rax],eax
 1020f2e:	add    BYTE PTR [rax],al
 1020f30:	push   rax
 1020f31:	push   rdx
 1020f32:	add    DWORD PTR [rax],eax
 1020f34:	(bad)  
 1020f35:	push   rdx
 1020f36:	add    DWORD PTR [rax],eax
 1020f38:	clc    
 1020f39:	(bad)  
 1020f3a:	add    al,BYTE PTR [rax]
 1020f3c:	adc    DWORD PTR [rdx],edx
 1020f3e:	add    DWORD PTR [rax],eax
 1020f40:	or     DWORD PTR [rdx+0x0],esp
 1020f43:	add    BYTE PTR [rax],bl
 1020f45:	jne    0x1020f48
 1020f47:	add    al,dh
 1020f49:	rex.WR add BYTE PTR [rax],r8b
 1020f4c:	(bad)  
 1020f4d:	(bad)  
 1020f4e:	(bad)  
 1020f4f:	jmp    rax
 1020f51:	retf   
 1020f52:	add    DWORD PTR [rax],eax
 1020f54:	add    BYTE PTR [rbx+0x1],dl
 1020f57:	add    bh,bh
 1020f59:	(bad)  
 1020f5a:	(bad)  
 1020f5b:	call   FWORD PTR [rcx]
 1020f5d:	sbb    al,0x4
 1020f5f:	add    BYTE PTR [rdx],cl
 1020f61:	add    DWORD PTR [rbx+0x0],ebp
 1020f64:	add    esi,DWORD PTR [rax+0x2]
 1020f67:	push   rax
 1020f68:	test   al,0xbf
 1020f6a:	add    BYTE PTR [rax],al
 1020f6c:	rex add eax,DWORD PTR [rax]
 1020f6f:	add    BYTE PTR [rcx],ah
 1020f71:	or     BYTE PTR [rdx],al
 1020f73:	add    BYTE PTR [rax],cl
 1020f75:	xor    al,0x71
 1020f77:	add    BYTE PTR [rax],dh
 1020f79:	push   rbx
 1020f7a:	add    DWORD PTR [rax],eax
 1020f7c:	test   DWORD PTR [rbx+0x1],edx
 1020f7f:	add    BYTE PTR [rdi+rcx*1+0x2],bl
 1020f83:	add    BYTE PTR [rcx],ah
 1020f85:	or     BYTE PTR [rdx],al
 1020f87:	add    BYTE PTR [rax],cl
 1020f89:	fs push 0x0
 1020f8c:	test   DWORD PTR [rbx+0x1],edx
 1020f8f:	add    BYTE PTR [rsi+0x70000153],ah
 1020f95:	lar    eax,WORD PTR [rax]
 1020f98:	and    DWORD PTR [rax],eax
 1020f9a:	add    BYTE PTR [rax],al
 1020f9c:	test   DWORD PTR [rbx+0x1],edx
 1020f9f:	add    BYTE PTR [rsi+0x70000153],ah
 1020fa5:	lar    eax,WORD PTR [rax]
 1020fa8:	and    DWORD PTR [rax],eax
 1020faa:	add    BYTE PTR [rax],al
 1020fac:	xor    BYTE PTR [rbx+0x1],dl
 1020faf:	add    BYTE PTR [rbp+0x5c000153],al
 1020fb5:	lar    eax,WORD PTR [rax]
 1020fb8:	adc    DWORD PTR [rdx],edx
 1020fba:	add    DWORD PTR [rax],eax
 1020fbc:	or     DWORD PTR [rdx+0x0],esp
 1020fbf:	add    BYTE PTR [rax],bl
 1020fc1:	jne    0x1020fc4
 1020fc3:	add    BYTE PTR [rax],ah
 1020fc5:	rex.WRB add BYTE PTR [r8],r8b
 1020fc8:	(bad)  
 1020fc9:	(bad)  
 1020fca:	(bad)  
 1020fcb:	call   QWORD PTR [rax-0xfffe34]
 1020fd1:	(bad)  
 1020fd2:	(bad)  
 1020fd3:	jmp    QWORD PTR [rax+0x300001cc]
 1020fd9:	push   rsp
 1020fda:	add    DWORD PTR [rax],eax
 1020fdc:	(bad)  
 1020fdd:	(bad)  
 1020fde:	(bad)  
 1020fdf:	call   QWORD PTR [rcx]
 1020fe1:	adc    eax,DWORD PTR [rdx]
 1020fe3:	add    BYTE PTR [rdx],cl
 1020fe5:	push   rdx
 1020fe6:	(bad)  
 1020fe7:	xor    BYTE PTR [rax],bl
 1020fe9:	jne    0x1020fec
 1020feb:	add    BYTE PTR [rax+0x4d],dl
 1020fee:	add    BYTE PTR [rax],al
 1020ff0:	(bad)  
 1020ff1:	(bad)  
 1020ff2:	(bad)  
 1020ff3:	jmp    QWORD PTR [rax-0x35]
 1020ff6:	add    DWORD PTR [rax],eax
 1020ff8:	jo     0x102104e
 1020ffa:	add    DWORD PTR [rax],eax
 1020ffc:	(bad)  
 1020ffd:	(bad)  
 1020ffe:	(bad)  
 1020fff:	inc    DWORD PTR [rsi+0x154]
 1021005:	add    BYTE PTR [rax],al
 1021007:	add    BYTE PTR [rbx-0xfffeac],bl
 102100d:	(bad)  
 102100e:	(bad)  
 102100f:	inc    DWORD PTR [rcx]
 1021011:	(bad)  
 1021012:	add    al,BYTE PTR [rax]
 1021014:	(bad)  
 1021015:	xor    al,BYTE PTR [rdx]
 1021017:	xor    BYTE PTR [rcx],dl
 1021019:	sbb    BYTE PTR [rax+rax*1],al
 102101c:	sbb    BYTE PTR [rcx+rcx*1],dh
 102101f:	add    BYTE PTR [rdx],cl
 1021021:	push   rdx
 1021022:	(bad)  
 1021023:	jo     0x102103d
 1021025:	jne    0x1021028
 1021027:	add    BYTE PTR [rax-0xffffb3],al
 102102d:	(bad)  
 102102e:	(bad)  
 102102f:	jmp    rax
 1021031:	retf   0x1
 1021034:	loopne 0x102108a
 1021036:	add    DWORD PTR [rax],eax
 1021038:	(bad)  
 1021039:	(bad)  
 102103a:	(bad)  
 102103b:	(bad)  
 102103c:	sti    
 102103d:	push   rsp
 102103e:	add    DWORD PTR [rax],eax
 1021040:	add    BYTE PTR [rax],al
 1021042:	add    BYTE PTR [rax],al
 1021044:	sbb    edx,DWORD PTR [rbp+0x1]
 1021047:	add    bh,bh
 1021049:	(bad)  
 102104a:	(bad)  
 102104b:	call   QWORD PTR [rcx]
 102104d:	and    BYTE PTR [rdx],cl
 102104f:	add    BYTE PTR [rax],ah
 1021051:	push   rsp
 1021052:	or     eax,0xc341b00
 1021057:	add    BYTE PTR [rip+0x7f00952],cl        # 0x8f219af
 102105d:	loopne 0x1021064
 102105f:	rol    BYTE PTR [rbx],0x70
 1021062:	add    ah,BYTE PTR [rax+0x18]
 1021065:	jne    0x1021068
 1021067:	add    BYTE PTR [rax-0xffffb3],dh
 102106d:	(bad)  
 102106e:	(bad)  
 102106f:	inc    DWORD PTR [rax+0x1c9]
 1021075:	add    BYTE PTR [rax],al
 1021077:	add    BYTE PTR [rax+0x1c9],dl
 102107d:	add    BYTE PTR [rax],al
 102107f:	add    BYTE PTR [rax+0x500001c9],ah
 1021085:	push   rbp
 1021086:	add    DWORD PTR [rax],eax
 1021088:	(bad)  
 1021089:	(bad)  
 102108a:	(bad)  
 102108b:	inc    DWORD PTR [rbp+rdx*2+0x1]
 1021092:	add    BYTE PTR [rax],al
 1021094:	cwde   
 1021095:	push   rsi
 1021096:	add    DWORD PTR [rax],eax
 1021098:	(bad)  
 1021099:	(bad)  
 102109a:	(bad)  
 102109b:	call   QWORD PTR [rcx]
 102109d:	adc    al,BYTE PTR [rcx]
 102109f:	add    BYTE PTR [rcx],cl
 10210a1:	(bad)  
 10210a2:	add    BYTE PTR [rax],al
 10210a4:	sbb    BYTE PTR [rbp+0x1],dh
 10210a7:	add    al,ah
 10210a9:	rex.WRB add BYTE PTR [r8],r8b
 10210ac:	(bad)  
 10210ad:	(bad)  
 10210ae:	(bad)  
 10210af:	inc    DWORD PTR [rax]
 10210b1:	int3   
 10210b2:	add    DWORD PTR [rax],eax
 10210b4:	rcl    BYTE PTR [rsi+0x1],1
 10210b7:	add    bh,bh
 10210b9:	(bad)  
 10210ba:	(bad)  
 10210bb:	call   FWORD PTR [rcx]
 10210bd:	sbb    al,0x4
 10210bf:	add    BYTE PTR [rdx],cl
 10210c1:	add    DWORD PTR [rbx+0x0],ebp
 10210c4:	add    esi,DWORD PTR [rax+0x2]
 10210c7:	push   rax
 10210c8:	test   al,0xbf
 10210ca:	add    BYTE PTR [rax],al
 10210cc:	rex add eax,DWORD PTR [rax]
 10210cf:	add    BYTE PTR [rcx],ah
 10210d1:	or     BYTE PTR [rdx],al
 10210d3:	add    BYTE PTR [rax],cl
 10210d5:	xor    al,0x71
 10210d7:	add    BYTE PTR [rax],al
 10210d9:	push   rdi
 10210da:	add    DWORD PTR [rax],eax
 10210dc:	pop    rax
 10210dd:	push   rdi
 10210de:	add    DWORD PTR [rax],eax
 10210e0:	mov    esp,0x21000210
 10210e5:	or     BYTE PTR [rdx],al
 10210e7:	add    BYTE PTR [rax],cl
 10210e9:	fs push 0x0
 10210ec:	pop    rax
 10210ed:	push   rdi
 10210ee:	add    DWORD PTR [rax],eax
 10210f0:	jns    0x1021149
 10210f2:	add    DWORD PTR [rax],eax
 10210f4:	rcl    BYTE PTR [rax],1
 10210f6:	add    al,BYTE PTR [rax]
 10210f8:	and    DWORD PTR [rax],eax
 10210fa:	add    BYTE PTR [rax],al
 10210fc:	pop    rax
 10210fd:	push   rdi
 10210fe:	add    DWORD PTR [rax],eax
 1021100:	jns    0x1021159
 1021102:	add    DWORD PTR [rax],eax
 1021104:	rcl    BYTE PTR [rax],1
 1021106:	add    al,BYTE PTR [rax]
 1021108:	and    DWORD PTR [rax],eax
 102110a:	add    BYTE PTR [rax],al
 102110c:	add    BYTE PTR [rdi+0x1],dl
 102110f:	add    BYTE PTR [rax+0x57],bl
 1021112:	add    DWORD PTR [rax],eax
 1021114:	mov    esp,0x11000210
 1021119:	adc    al,BYTE PTR [rcx]
 102111b:	add    BYTE PTR [rcx],cl
 102111d:	(bad)  
 102111e:	add    BYTE PTR [rax],al
 1021120:	sbb    BYTE PTR [rbp+0x1],dh
 1021123:	add    BYTE PTR [rax],dl
 1021125:	rex.WRX add BYTE PTR [rax],r8b
 1021128:	(bad)  
 1021129:	(bad)  
 102112a:	(bad)  
 102112b:	inc    eax
 102112d:	int3   
 102112e:	add    DWORD PTR [rax],eax
 1021130:	(bad)  
 1021131:	(bad)  
 1021132:	(bad)  
 1021133:	call   rax
 1021135:	int3   
 1021136:	add    DWORD PTR [rax],eax
 1021138:	add    BYTE PTR [rax+0x1],bl
 102113b:	add    bh,bh
 102113d:	(bad)  
 102113e:	(bad)  
 102113f:	call   FWORD PTR [rcx]
 1021141:	sbb    eax,0x10b0005
 1021146:	push   0x0
 1021148:	add    al,0x70
 102114a:	add    esp,DWORD PTR [rax+0x2]
 102114d:	xor    BYTE PTR [rax],al
 102114f:	add    BYTE PTR [rax+0x400000bf],ch
 1021155:	add    eax,DWORD PTR [rax]
 1021157:	add    BYTE PTR [rcx],dl
 1021159:	adc    al,BYTE PTR [rcx]
 102115b:	add    BYTE PTR [rcx],cl
 102115d:	(bad)  
 102115e:	add    BYTE PTR [rax],al
 1021160:	sbb    BYTE PTR [rbp+0x1],dh
 1021163:	add    BYTE PTR [rax+0x4e],al
 1021166:	add    BYTE PTR [rax],al
 1021168:	(bad)  
 1021169:	(bad)  
 102116a:	(bad)  
 102116b:	jmp    QWORD PTR [rax]
 102116d:	int3   
 102116e:	add    DWORD PTR [rax],eax
 1021170:	rcr    BYTE PTR [rax+0x1],1
 1021173:	add    bh,bh
 1021175:	(bad)  
 1021176:	(bad)  
 1021177:	call   FWORD PTR [rcx]
 1021179:	sbb    al,0x4
 102117b:	add    BYTE PTR [rdx],cl
 102117d:	add    DWORD PTR [rbx+0x0],ebp
 1021180:	add    esi,DWORD PTR [rax+0x2]
 1021183:	push   rax
 1021184:	test   al,0xbf
 1021186:	add    BYTE PTR [rax],al
 1021188:	rex add eax,DWORD PTR [rax]
 102118b:	add    BYTE PTR [rcx],ah
 102118d:	or     BYTE PTR [rdx],al
 102118f:	add    BYTE PTR [rax],cl
 1021191:	xor    al,0x71
 1021193:	add    BYTE PTR [rax],al
 1021195:	pop    rcx
 1021196:	add    DWORD PTR [rax],eax
 1021198:	pop    rax
 1021199:	pop    rcx
 102119a:	add    DWORD PTR [rax],eax
 102119c:	js     0x10211af
 102119e:	add    al,BYTE PTR [rax]
 10211a0:	and    DWORD PTR [rax],ecx
 10211a2:	add    al,BYTE PTR [rax]
 10211a4:	or     BYTE PTR [rdx+rbp*2+0x0],ah
 10211a8:	pop    rax
 10211a9:	pop    rcx
 10211aa:	add    DWORD PTR [rax],eax
 10211ac:	jns    0x1021207
 10211ae:	add    DWORD PTR [rax],eax
 10211b0:	mov    WORD PTR [rcx],ss
 10211b2:	add    al,BYTE PTR [rax]
 10211b4:	and    DWORD PTR [rax],eax
 10211b6:	add    BYTE PTR [rax],al
 10211b8:	pop    rax
 10211b9:	pop    rcx
 10211ba:	add    DWORD PTR [rax],eax
 10211bc:	jns    0x1021217
 10211be:	add    DWORD PTR [rax],eax
 10211c0:	mov    WORD PTR [rcx],ss
 10211c2:	add    al,BYTE PTR [rax]
 10211c4:	and    DWORD PTR [rax],eax
 10211c6:	add    BYTE PTR [rax],al
 10211c8:	add    BYTE PTR [rcx+0x1],bl
 10211cb:	add    BYTE PTR [rax+0x59],bl
 10211ce:	add    DWORD PTR [rax],eax
 10211d0:	js     0x10211e3
 10211d2:	add    al,BYTE PTR [rax]
 10211d4:	adc    DWORD PTR [rdx],edx
 10211d6:	add    DWORD PTR [rax],eax
 10211d8:	or     DWORD PTR [rdx+0x0],esp
 10211db:	add    BYTE PTR [rax],bl
 10211dd:	jne    0x10211e0
 10211df:	add    BYTE PTR [rax+0x4e],dh
 10211e2:	add    BYTE PTR [rax],al
 10211e4:	(bad)  
 10211e5:	(bad)  
 10211e6:	(bad)  
 10211e7:	push   rax
 10211e9:	int3   
 10211ea:	add    DWORD PTR [rax],eax
 10211ec:	(bad)  
 10211ed:	(bad)  
 10211ee:	(bad)  
 10211ef:	inc    DWORD PTR [rax]
 10211f1:	int    0x1
 10211f3:	add    BYTE PTR [rax],al
 10211f5:	pop    rdx
 10211f6:	add    DWORD PTR [rax],eax
 10211f8:	(bad)  
 10211f9:	(bad)  
 10211fa:	(bad)  
 10211fb:	call   FWORD PTR [rcx]
 10211fd:	sbb    eax,0x10b0005
 1021202:	push   0x0
 1021204:	add    al,0x70
 1021206:	add    esp,DWORD PTR [rax+0x2]
 1021209:	xor    BYTE PTR [rax],al
 102120b:	add    BYTE PTR [rax+0x400000bf],ch
 1021211:	add    eax,DWORD PTR [rax]
 1021213:	add    BYTE PTR [rcx],dl
 1021215:	adc    al,BYTE PTR [rcx]
 1021217:	add    BYTE PTR [rcx],cl
 1021219:	(bad)  
 102121a:	add    BYTE PTR [rax],al
 102121c:	sbb    BYTE PTR [rbp+0x1],dh
 102121f:	add    BYTE PTR [rax-0xffffb2],ah
 1021225:	(bad)  
 1021226:	(bad)  
 1021227:	inc    DWORD PTR [rax-0x34]
 102122a:	add    DWORD PTR [rax],eax
 102122c:	rcr    BYTE PTR [rdx+0x1],1
 102122f:	add    bh,bh
 1021231:	(bad)  
 1021232:	(bad)  
 1021233:	call   FWORD PTR [rcx]
 1021235:	sbb    al,0x4
 1021237:	add    BYTE PTR [rdx],cl
 1021239:	add    DWORD PTR [rbx+0x0],ebp
 102123c:	add    esi,DWORD PTR [rax+0x2]
 102123f:	push   rax
 1021240:	test   al,0xbf
 1021242:	add    BYTE PTR [rax],al
 1021244:	rex add eax,DWORD PTR [rax]
 1021247:	add    BYTE PTR [rcx],ah
 1021249:	or     BYTE PTR [rdx],al
 102124b:	add    BYTE PTR [rax],cl
 102124d:	xor    al,0x71
 102124f:	add    BYTE PTR [rax],al
 1021251:	pop    rbx
 1021252:	add    DWORD PTR [rax],eax
 1021254:	pop    rax
 1021255:	pop    rbx
 1021256:	add    DWORD PTR [rax],eax
 1021258:	xor    al,0x12
 102125a:	add    al,BYTE PTR [rax]
 102125c:	and    DWORD PTR [rax],ecx
 102125e:	add    al,BYTE PTR [rax]
 1021260:	or     BYTE PTR [rdx+rbp*2+0x0],ah
 1021264:	pop    rax
 1021265:	pop    rbx
 1021266:	add    DWORD PTR [rax],eax
 1021268:	jns    0x10212c5
 102126a:	add    DWORD PTR [rax],eax
 102126c:	rex.W adc al,BYTE PTR [rdx]
 102126f:	add    BYTE PTR [rcx],ah
 1021271:	add    BYTE PTR [rax],al
 1021273:	add    BYTE PTR [rax+0x5b],bl
 1021276:	add    DWORD PTR [rax],eax
 1021278:	jns    0x10212d5
 102127a:	add    DWORD PTR [rax],eax
 102127c:	rex.W adc al,BYTE PTR [rdx]
 102127f:	add    BYTE PTR [rcx],ah
 1021281:	add    BYTE PTR [rax],al
 1021283:	add    BYTE PTR [rax],al
 1021285:	pop    rbx
 1021286:	add    DWORD PTR [rax],eax
 1021288:	pop    rax
 1021289:	pop    rbx
 102128a:	add    DWORD PTR [rax],eax
 102128c:	xor    al,0x12
 102128e:	add    al,BYTE PTR [rax]
 1021290:	adc    DWORD PTR [rdx],edx
 1021292:	add    DWORD PTR [rax],eax
 1021294:	or     DWORD PTR [rdx+0x0],esp
 1021297:	add    BYTE PTR [rax],bl
 1021299:	jne    0x102129c
 102129b:	add    al,dl
 102129d:	rex.WRX add BYTE PTR [rax],r8b
 10212a0:	(bad)  
 10212a1:	(bad)  
 10212a2:	(bad)  
 10212a3:	jmp    QWORD PTR [rax]
 10212a5:	int    0x1
 10212a7:	add    bh,bh
 10212a9:	(bad)  
 10212aa:	(bad)  
 10212ab:	push   QWORD PTR [rax]
 10212ad:	int    0x1
 10212af:	add    BYTE PTR [rax],al
 10212b1:	pop    rsp
 10212b2:	add    DWORD PTR [rax],eax
 10212b4:	(bad)  
 10212b5:	(bad)  
 10212b6:	(bad)  
 10212b7:	call   QWORD PTR [rcx]
 10212b9:	and    BYTE PTR [rdx],cl
 10212bb:	add    BYTE PTR [rax],ah
 10212bd:	push   rsp
 10212be:	or     eax,0xc341b00
 10212c3:	add    BYTE PTR [rip+0x7f00952],cl        # 0x8f21c1b
 10212c9:	loopne 0x10212d0
 10212cb:	rol    BYTE PTR [rbx],0x70
 10212ce:	add    ah,BYTE PTR [rax+0x18]
 10212d1:	jne    0x10212d4
 10212d3:	add    BYTE PTR [rax],al
 10212d5:	rex.WRXB add BYTE PTR [r8],r8b
 10212d8:	(bad)  
 10212d9:	(bad)  
 10212da:	(bad)  
 10212db:	inc    eax
 10212dd:	leave  
 10212de:	add    DWORD PTR [rax],eax
 10212e0:	add    BYTE PTR [rax],al
 10212e2:	add    BYTE PTR [rax],al
 10212e4:	ror    cl,1
 10212e6:	add    DWORD PTR [rax],eax
 10212e8:	add    BYTE PTR [rax],al
 10212ea:	add    BYTE PTR [rax],al
 10212ec:	loopne 0x10212b7
 10212ee:	add    DWORD PTR [rax],eax
 10212f0:	xor    BYTE PTR [rcx+rax*1+0x0],bl
 10212f4:	(bad)  
 10212f5:	(bad)  
 10212f6:	(bad)  
 10212f7:	jmp    QWORD PTR [rsp+rbx*2+0x1]
 10212fb:	add    BYTE PTR [rax],al
 10212fd:	add    BYTE PTR [rax],al
 10212ff:	add    BYTE PTR [rax+0x5d],bh
 1021302:	add    DWORD PTR [rax],eax
 1021304:	(bad)  
 1021305:	(bad)  
 1021306:	(bad)  
 1021307:	call   QWORD PTR [rcx]
 1021309:	or     BYTE PTR es:[rax],al
 102130c:	es or  eax,DWORD PTR fs:[rax]
 1021310:	and    DWORD PTR [rdx+rcx*1+0x0],edx
 1021314:	sbb    al,0x34
 1021316:	or     DWORD PTR [rax],eax
 1021318:	(bad)  
 1021319:	push   rdx
 102131a:	or     dh,BYTE PTR [rax+0x18]
 102131d:	jne    0x1021320
 102131f:	add    BYTE PTR [rax],dh
 1021321:	rex.WRXB add BYTE PTR [r8],r8b
 1021324:	(bad)  
 1021325:	(bad)  
 1021326:	(bad)  
 1021327:	inc    DWORD PTR [rax]
 1021329:	retf   0x1
 102132c:	mov    al,0x5d
 102132e:	add    DWORD PTR [rax],eax
 1021330:	(bad)  
 1021331:	(bad)  
 1021332:	(bad)  
 1021333:	push   rbp
 1021335:	pop    rbp
 1021336:	add    DWORD PTR [rax],eax
 1021338:	add    BYTE PTR [rax],al
 102133a:	add    BYTE PTR [rax],al
 102133c:	(bad)  
 102133d:	pop    rsi
 102133e:	add    DWORD PTR [rax],eax
 1021340:	(bad)  
 1021341:	(bad)  
 1021342:	(bad)  
 1021343:	call   FWORD PTR [rcx]
 1021345:	(bad)  
 1021346:	or     al,BYTE PTR [rax]
 1021348:	adc    al,0x1
 102134a:	(bad)  
 102134b:	add    BYTE PTR [rip+0x9e00bf0],cl        # 0xae21f41
 1021351:	rol    BYTE PTR [rdi],1
 1021353:	rol    BYTE PTR [rip+0x3600470],0x50        # 0x46217ca
 102135a:	add    dh,BYTE PTR [rax]
 102135c:	and    al,0x75
 102135e:	add    DWORD PTR [rax],eax
 1021360:	(bad)  
 1021361:	rex.WRXB add BYTE PTR [r8],r8b
 1021364:	(bad)  
 1021366:	add    BYTE PTR [rax],al
 1021368:	(bad)  
 1021369:	(bad)  
 102136a:	(bad)  
 102136b:	jmp    QWORD PTR [rax]
 102136d:	leave  
 102136e:	add    DWORD PTR [rax],eax
 1021370:	add    BYTE PTR [rax],al
 1021372:	add    BYTE PTR [rax],al
 1021374:	xor    cl,cl
 1021376:	add    DWORD PTR [rax],eax
 1021378:	push   rax
 1021379:	pop    rsi
 102137a:	add    DWORD PTR [rax],eax
 102137c:	(bad)  
 102137d:	(bad)  
 102137e:	(bad)  
 102137f:	dec    DWORD PTR [rdi+0x15e]
 1021385:	add    BYTE PTR [rax],al
 1021387:	add    BYTE PTR [rsi+0x5f],ah
 102138a:	add    DWORD PTR [rax],eax
 102138c:	add    DWORD PTR [rax],eax
 102138e:	add    BYTE PTR [rax],al
 1021390:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1021391:	pop    rdi
 1021392:	add    DWORD PTR [rax],eax
 1021394:	add    BYTE PTR [rax],al
 1021396:	add    BYTE PTR [rax],al
 1021398:	rcr    BYTE PTR [rdi+0x1],1
 102139b:	add    bh,bh
 102139d:	(bad)  
 102139e:	(bad)  
 102139f:	call   FWORD PTR [rcx]
 10213a1:	(bad)  
 10213a2:	or     al,BYTE PTR [rax]
 10213a4:	adc    al,0x1
 10213a6:	(bad)  
 10213a7:	add    BYTE PTR [rip+0x9e00bf0],cl        # 0xae21f9d
 10213ad:	rol    BYTE PTR [rdi],1
 10213af:	rol    BYTE PTR [rip+0x3600470],0x50        # 0x4621826
 10213b6:	add    dh,BYTE PTR [rax]
 10213b8:	and    al,0x75
 10213ba:	add    DWORD PTR [rax],eax
 10213bc:	nop
 10213bd:	rex.WRXB add BYTE PTR [r8],r8b
 10213c0:	(bad)  
 10213c2:	add    BYTE PTR [rax],al
 10213c4:	(bad)  
 10213c5:	(bad)  
 10213c6:	(bad)  
 10213c7:	call   QWORD PTR [rax-0x37]
 10213ca:	add    DWORD PTR [rax],eax
 10213cc:	add    BYTE PTR [rax],al
 10213ce:	add    BYTE PTR [rax],al
 10213d0:	(bad)  
 10213d1:	leave  
 10213d2:	add    DWORD PTR [rax],eax
 10213d4:	adc    BYTE PTR [rax+0x1],ah
 10213d7:	add    bh,bh
 10213d9:	(bad)  
 10213da:	(bad)  
 10213db:	dec    DWORD PTR [rdi+0x60]
 10213de:	add    DWORD PTR [rax],eax
 10213e0:	add    BYTE PTR [rax],al
 10213e2:	add    BYTE PTR [rax],al
 10213e4:	es (bad) 
 10213e6:	add    DWORD PTR [rax],eax
 10213e8:	add    DWORD PTR [rax],eax
 10213ea:	add    BYTE PTR [rax],al
 10213ec:	fs (bad) 
 10213ee:	add    DWORD PTR [rax],eax
 10213f0:	add    BYTE PTR [rax],al
 10213f2:	add    BYTE PTR [rax],al
 10213f4:	nop
 10213f5:	(bad)  
 10213f6:	add    DWORD PTR [rax],eax
 10213f8:	(bad)  
 10213f9:	(bad)  
 10213fa:	(bad)  
 10213fb:	inc    DWORD PTR [rcx]
 10213fd:	add    al,0x1
 10213ff:	add    BYTE PTR [rdx+rax*8],al
 1021402:	add    BYTE PTR [rax],al
 1021404:	add    DWORD PTR [rcx+rax*1],eax
 1021407:	add    BYTE PTR [rdx+rax*2],al
 102140a:	add    BYTE PTR [rax],al
 102140c:	sbb    DWORD PTR [rcx],ebp
 102140e:	or     DWORD PTR [rax],eax
 1021410:	(bad)  
 1021411:	fs xchg esp,eax
 1021413:	add    BYTE PTR [rdi],dl
 1021415:	push   rsp
 1021416:	xchg   ebx,eax
 1021417:	add    BYTE PTR [rdi],dl
 1021419:	xor    al,0x92
 102141b:	add    BYTE PTR [rdi],dl
 102141d:	add    DWORD PTR [rax+0x701000],edx
 1021423:	add    BYTE PTR [rax+0x700000bf],ch
 1021429:	add    al,0x0
 102142b:	add    BYTE PTR [rcx],al
 102142d:	add    al,0x1
 102142f:	add    BYTE PTR [rdx+rax*2],al
 1021432:	add    BYTE PTR [rax],al
 1021434:	add    DWORD PTR [rdi],ecx
 1021436:	(bad)  
 1021437:	add    BYTE PTR [rdi],cl
 1021439:	fs (bad) 
 102143b:	add    BYTE PTR [rdi],cl
 102143d:	xor    al,0x6
 102143f:	add    BYTE PTR [rdi],cl
 1021441:	xor    cl,BYTE PTR [rbx]
 1021443:	jo     0x1021446
 1021445:	adc    al,0x8
 1021447:	add    BYTE PTR [rsp+riz*2],dl
 102144a:	or     BYTE PTR [rax],al
 102144c:	adc    al,0x54
 102144e:	(bad)  
 102144f:	add    BYTE PTR [rsp+rsi*1],dl
 1021452:	(bad)  
 1021453:	add    BYTE PTR [rdx+rsi*1],dl
 1021456:	adc    BYTE PTR [rax+0x1],dh
 1021459:	clts   
 102145b:	add    BYTE PTR [rdi],cl
 102145d:	fs (bad) 
 102145f:	add    BYTE PTR [rdi],cl
 1021461:	xor    al,0x6
 1021463:	add    BYTE PTR [rdi],cl
 1021465:	xor    cl,BYTE PTR [rbx]
 1021467:	jo     0x102146a
 1021469:	(bad)  
 102146a:	add    al,BYTE PTR [rax]
 102146c:	(bad)  
 102146d:	xor    al,BYTE PTR [rdx]
 102146f:	xor    BYTE PTR [rcx],al
 1021471:	add    al,0x1
 1021473:	add    BYTE PTR [rdx+rax*2],al
 1021476:	add    BYTE PTR [rax],al
 1021478:	add    DWORD PTR [rcx+rax*1],eax
 102147b:	add    BYTE PTR [rdx+rax*2],al
 102147e:	add    BYTE PTR [rax],al
 1021480:	add    DWORD PTR [rsi],eax
 1021482:	add    al,BYTE PTR [rax]
 1021484:	(bad)  
 1021485:	xor    al,BYTE PTR [rdx]
 1021487:	xor    BYTE PTR [rcx],al
 1021489:	or     al,BYTE PTR [rax+rax*1]
 102148c:	or     dh,BYTE PTR [rsi+rax*1]
 102148f:	add    BYTE PTR [rdx],cl
 1021491:	xor    al,BYTE PTR [rsi]
 1021493:	jo     0x10214a6
 1021495:	adc    eax,DWORD PTR [rdx]
 1021497:	add    BYTE PTR [rdx],cl
 1021499:	push   rdx
 102149a:	(bad)  
 102149b:	xor    BYTE PTR [rax],bl
 102149d:	jne    0x10214a0
 102149f:	add    al,ch
 10214a1:	push   rbx
 10214a2:	add    BYTE PTR [rax],al
 10214a4:	(bad)  
 10214a5:	(bad)  
 10214a6:	(bad)  
 10214a7:	call   QWORD PTR [rax]
 10214a9:	fild   DWORD PTR [rcx]
 10214ab:	add    bh,bh
 10214ad:	(bad)  
 10214ae:	(bad)  
 10214af:	jmp    QWORD PTR [rax]
 10214b1:	fild   DWORD PTR [rcx]
 10214b3:	add    BYTE PTR [rax+0x6a],dh
 10214b6:	add    DWORD PTR [rax],eax
 10214b8:	(bad)  
 10214b9:	(bad)  
 10214ba:	(bad)  
 10214bb:	inc    DWORD PTR [rbx+0x16a]
 10214c1:	add    BYTE PTR [rax],al
 10214c3:	add    BYTE PTR [rbx-0xfffe96],dl
 10214c9:	(bad)  
 10214ca:	(bad)  
 10214cb:	call   FWORD PTR [rax+0x100016a]
 10214d1:	add    BYTE PTR [rax],al
 10214d3:	add    BYTE PTR [rbp-0xfffe96],ch
 10214d9:	(bad)  
 10214da:	(bad)  
 10214db:	inc    DWORD PTR [rcx]
 10214dd:	(bad)  
 10214de:	add    al,BYTE PTR [rax]
 10214e0:	(bad)  
 10214e1:	xor    al,BYTE PTR [rdx]
 10214e3:	(bad)  
 10214e4:	and    DWORD PTR [rdx],ecx
 10214e6:	add    al,0x0
 10214e8:	or     dh,BYTE PTR [rdi+rax*1+0x0]
 10214ec:	add    eax,0xf0000634
 10214f1:	push   0x1
 10214f3:	add    BYTE PTR [rcx],al
 10214f5:	imul   eax,DWORD PTR [rcx],0x0
 10214f8:	fcom   QWORD PTR [rdx+rax*1]
 10214fb:	add    BYTE PTR [rcx],ah
 10214fd:	add    BYTE PTR [rax],al
 10214ff:	add    al,dh
 1021501:	push   0x1
 1021503:	add    BYTE PTR [rcx],al
 1021505:	imul   eax,DWORD PTR [rcx],0x0
 1021508:	fcom   QWORD PTR [rdx+rax*1]
 102150b:	add    BYTE PTR [rcx],dl
 102150d:	adc    DWORD PTR [rcx],eax
 102150f:	add    BYTE PTR [rcx],cl
 1021511:	and    al,BYTE PTR [rax]
 1021513:	add    BYTE PTR [rax],bl
 1021515:	jne    0x1021518
 1021517:	add    BYTE PTR [rax],dl
 1021519:	push   rsp
 102151a:	add    BYTE PTR [rax],al
 102151c:	(bad)  
 102151d:	(bad)  
 102151e:	(bad)  
 102151f:	call   rax
 1021521:	fiadd  DWORD PTR [rcx]
 1021523:	add    BYTE PTR [rax],al
 1021525:	add    BYTE PTR [rax],al
 1021527:	add    al,ah
 1021529:	fiadd  DWORD PTR [rcx]
 102152b:	add    BYTE PTR [rax],al
 102152d:	add    BYTE PTR [rax],al
 102152f:	add    al,dh
 1021531:	fiadd  DWORD PTR [rcx]
 1021533:	add    al,al
 1021535:	imul   eax,DWORD PTR [rcx],0x0
 1021538:	(bad)  
 1021539:	(bad)  
 102153a:	(bad)  
 102153b:	(bad)  
 102153c:	fsubr  DWORD PTR [rbx+0x1]
 102153f:	add    BYTE PTR [rax],al
 1021541:	add    BYTE PTR [rax],al
 1021543:	add    al,dh
 1021545:	imul   eax,DWORD PTR [rcx],0x0
 1021548:	add    al,BYTE PTR [rax]
 102154a:	add    BYTE PTR [rax],al
 102154c:	add    ch,BYTE PTR [rcx+rax*1+0x0]
 1021550:	(bad)  
 1021551:	(bad)  
 1021552:	(bad)  
 1021553:	inc    DWORD PTR [rcx]
 1021555:	(bad)  
 1021556:	or     al,BYTE PTR [rax]
 1021558:	(bad)  
 1021559:	push   rsp
 102155a:	(bad)  
 102155b:	add    BYTE PTR [rsi],dl
 102155d:	xor    al,0xd
 102155f:	add    BYTE PTR [rsi],dl
 1021561:	push   rdx
 1021562:	adc    ah,al
 1021564:	adc    al,dl
 1021566:	(bad)  
 1021567:	ror    BYTE PTR [rax+rsi*2],0xb
 102156b:	(bad)  
 102156c:	and    DWORD PTR [rip+0xfffffffff4050002],eax        # 0xfffffffff5071574
 1021572:	or     al,0x0
 1021574:	push   rax
 1021575:	ins    BYTE PTR es:[rdi],dx
 1021576:	add    DWORD PTR [rax],eax
 1021578:	adc    ch,BYTE PTR [rbp+0x1]
 102157b:	add    BYTE PTR [rbp+rdx*1+0x2],dl
 102157f:	add    BYTE PTR [rcx],ah
 1021581:	add    BYTE PTR [rax],al
 1021583:	add    BYTE PTR [rax+0x6c],dl
 1021586:	add    DWORD PTR [rax],eax
 1021588:	adc    ch,BYTE PTR [rbp+0x1]
 102158b:	add    BYTE PTR [rbp+rdx*1+0x2],dl
 102158f:	add    BYTE PTR [rcx],ah
 1021591:	add    BYTE PTR [rdx],al
 1021593:	add    BYTE PTR [rax],al
 1021595:	hlt    
 1021596:	or     al,0x0
 1021598:	push   rax
 1021599:	ins    BYTE PTR es:[rdi],dx
 102159a:	add    DWORD PTR [rax],eax
 102159c:	adc    ch,BYTE PTR [rbp+0x1]
 102159f:	add    BYTE PTR [rbp+rdx*1+0x2],dl
 10215a3:	add    BYTE PTR [rcx],dl
 10215a5:	sbb    BYTE PTR [rsi],al
 10215a7:	add    BYTE PTR [rax],bl
 10215a9:	or     eax,DWORD PTR fs:[rax]
 10215ac:	adc    al,0x34
 10215ae:	or     al,BYTE PTR [rax]
 10215b0:	or     BYTE PTR [rdx+0x4],dh
 10215b3:	jo     0x10215cd
 10215b5:	jne    0x10215b8
 10215b7:	add    BYTE PTR [rax],bh
 10215b9:	push   rsp
 10215ba:	add    BYTE PTR [rax],al
 10215bc:	(bad)  
 10215bd:	(bad)  
 10215be:	(bad)  
 10215bf:	jmp    QWORD PTR [rax-0x25]
 10215c2:	add    DWORD PTR [rax],eax
 10215c4:	adc    BYTE PTR [rsi+0x1],ch
 10215c7:	add    bh,bh
 10215c9:	(bad)  
 10215ca:	(bad)  
 10215cb:	push   QWORD PTR [rcx]
 10215cd:	outs   dx,BYTE PTR ds:[rsi]
 10215ce:	add    DWORD PTR [rax],eax
 10215d0:	add    BYTE PTR [rax],al
 10215d2:	add    BYTE PTR [rax],al
 10215d4:	jae    0x1021644
 10215d6:	add    DWORD PTR [rax],eax
 10215d8:	(bad)  
 10215d9:	(bad)  
 10215da:	(bad)  
 10215db:	call   FWORD PTR [rcx]
 10215dd:	(bad)  
 10215de:	add    eax,0x55340d00
 10215e3:	add    BYTE PTR [rip+0x6005201],cl        # 0x70267ea
 10215e9:	jo     0x10215eb
 10215eb:	add    BYTE PTR [rax-0x7fffff41],ch
 10215f1:	add    al,BYTE PTR [rax]
 10215f3:	add    BYTE PTR [rcx],bl
 10215f5:	(bad)  
 10215f6:	add    eax,0x55340d00
 10215fb:	add    BYTE PTR [rip+0x6005201],cl        # 0x7026802
 1021601:	jo     0x1021603
 1021603:	add    BYTE PTR [rax-0x7fffff41],ch
 1021609:	add    al,BYTE PTR [rax]
 102160b:	add    BYTE PTR [rcx],dl
 102160d:	adc    DWORD PTR [rcx],eax
 102160f:	add    BYTE PTR [rcx],cl
 1021611:	and    al,BYTE PTR [rax]
 1021613:	add    BYTE PTR [rax],bl
 1021615:	jne    0x1021618
 1021617:	add    BYTE PTR [rax+0x54],ah
 102161a:	add    BYTE PTR [rax],al
 102161c:	(bad)  
 102161d:	(bad)  
 102161e:	(bad)  
 102161f:	inc    DWORD PTR [rax-0x25]
 1021622:	add    DWORD PTR [rax],eax
 1021624:	xor    BYTE PTR [rax+0x1],0x0
 1021628:	(bad)  
 1021629:	(bad)  
 102162a:	(bad)  
 102162b:	inc    DWORD PTR [rcx]
 102162d:	adc    al,0x5
 102162f:	add    BYTE PTR [rdx+riz*4],dl
 1021632:	adc    al,dh
 1021634:	(bad)  
 1021635:	ror    BYTE PTR [rax+riz*2],1
 1021638:	or     edx,DWORD PTR [rax+0x0]
 102163b:	add    BYTE PTR [rcx],ah
 102163d:	or     BYTE PTR ds:[rax],al
 1021640:	ds xor al,0xa
 1021643:	add    BYTE PTR [rdi],cl
 1021645:	in     al,0x7
 1021647:	add    BYTE PTR [rdx],cl
 1021649:	(bad)  
 102164a:	or     BYTE PTR [rax],al
 102164c:	add    eax,0xb0000974
 1021651:	jo     0x1021654
 1021653:	add    BYTE PTR [rdi],cl
 1021655:	jno    0x1021658
 1021657:	add    BYTE PTR [rsi+rdx*1],ch
 102165a:	add    al,BYTE PTR [rax]
 102165c:	and    DWORD PTR [rax],eax
 102165e:	add    BYTE PTR [rax],al
 1021660:	mov    al,0x70
 1021662:	add    DWORD PTR [rax],eax
 1021664:	(bad)  
 1021666:	add    DWORD PTR [rax],eax
 1021668:	sub    al,0x16
 102166a:	add    al,BYTE PTR [rax]
 102166c:	and    DWORD PTR [rax],eax
 102166e:	or     BYTE PTR [rax],al
 1021670:	add    ah,ah
 1021672:	(bad)  
 1021673:	add    BYTE PTR [rax],al
 1021675:	(bad)  
 1021676:	or     BYTE PTR [rax],al
 1021678:	add    BYTE PTR [rcx+rcx*1+0x0],dh
 102167c:	add    BYTE PTR [rdx+rcx*1],dh
 102167f:	add    BYTE PTR [rax+0xf000170],dh
 1021685:	jno    0x1021688
 1021687:	add    BYTE PTR [rsi+rdx*1],ch
 102168a:	add    al,BYTE PTR [rax]
 102168c:	add    DWORD PTR [rax],ebx
 102168e:	or     al,BYTE PTR [rax]
 1021690:	sbb    BYTE PTR [rcx],al
 1021692:	adc    eax,0xff01100
 1021697:	loopne 0x10216a6
 1021699:	ror    BYTE PTR [rbx],1
 102169b:	ror    BYTE PTR [rcx],0x70
 102169e:	or     BYTE PTR [rax+0x7],ah
 10216a1:	push   rax
 10216a2:	(bad)  
 10216a3:	xor    BYTE PTR [rcx],al
 10216a5:	add    al,0x1
 10216a7:	add    BYTE PTR [rdx+rax*4],al
 10216aa:	add    BYTE PTR [rax],al
 10216ac:	add    DWORD PTR [rcx+rax*1],eax
 10216af:	add    BYTE PTR [rdx+rax*1],al
 10216b2:	add    BYTE PTR [rax],al
 10216b4:	and    DWORD PTR [rdx+rax*1],eax
 10216b7:	add    BYTE PTR [rsp+rsi*1],al
 10216ba:	add    BYTE PTR [rax],al
 10216bc:	push   rax
 10216bd:	je     0x10216c0
 10216bf:	add    BYTE PTR [rdx+0x74],ah
 10216c2:	add    DWORD PTR [rax],eax
 10216c4:	lods   al,BYTE PTR ds:[rsi]
 10216c5:	(bad)  
 10216c6:	add    al,BYTE PTR [rax]
 10216c8:	and    DWORD PTR [rax],eax
 10216ca:	add    BYTE PTR [rax],al
 10216cc:	push   rax
 10216cd:	je     0x10216d0
 10216cf:	add    BYTE PTR [rdx+0x74],ah
 10216d2:	add    DWORD PTR [rax],eax
 10216d4:	lods   al,BYTE PTR ds:[rsi]
 10216d5:	(bad)  
 10216d6:	add    al,BYTE PTR [rax]
 10216d8:	add    DWORD PTR [rcx],ebx
 10216da:	or     al,BYTE PTR [rax]
 10216dc:	sbb    DWORD PTR [rcx+rcx*1+0x0],esi
 10216e0:	sbb    DWORD PTR [rax+rcx*1+0x0],esp
 10216e4:	sbb    DWORD PTR [rdi+rax*1+0x0],edx
 10216e8:	sbb    DWORD PTR [rsi+rax*1],esi
 10216eb:	add    BYTE PTR [rcx],bl
 10216ed:	xor    dl,BYTE PTR [rip+0x20601c0]        # 0x30818b3
 10216f3:	add    BYTE PTR [rsi],al
 10216f5:	xor    al,BYTE PTR [rdx]
 10216f7:	push   rax
 10216f8:	or     DWORD PTR [rdi],edx
 10216fa:	(bad)  
 10216fb:	add    BYTE PTR [rdi],dl
 10216fd:	xor    al,0xd
 10216ff:	add    BYTE PTR [rdi],dl
 1021701:	jb     0x1021716
 1021703:	rcl    BYTE PTR [rcx],0x70
 1021706:	adc    BYTE PTR [rax-0xa],ah
 1021709:	rol    BYTE PTR [rax],0x0
 102170c:	add    DWORD PTR [rax],eax
 102170e:	add    BYTE PTR [rax],al
 1021710:	fbstp  TBYTE PTR [rbp+0x1]
 1021713:	add    al,bh
 1021715:	jne    0x1021718
 1021717:	add    BYTE PTR [rdx-0x25],dh
 102171a:	add    DWORD PTR [rax],eax
 102171c:	clc    
 102171d:	jne    0x1021720
 102171f:	add    BYTE PTR [rcx],al
 1021721:	(bad)  
 1021722:	add    al,BYTE PTR [rax]
 1021724:	(bad)  
 1021725:	xor    al,BYTE PTR [rdx]
 1021727:	push   rax
 1021728:	adc    DWORD PTR [rax],ebx
 102172a:	add    eax,0x14621800
 102172f:	rcl    BYTE PTR [rdx],0x70
 1021732:	adc    DWORD PTR [rax+0x10],esp
 1021735:	xor    BYTE PTR [rax],al
 1021737:	add    dh,dh
 1021739:	rol    BYTE PTR [rax],0x0
 102173c:	add    DWORD PTR [rax],eax
 102173e:	add    BYTE PTR [rax],al
 1021740:	(bad)  
 1021741:	jbe    0x1021744
 1021743:	add    BYTE PTR [rdi+0x76],bl
 1021746:	add    DWORD PTR [rax],eax
 1021748:	mov    ecx,0x1db
 102174d:	add    BYTE PTR [rax],al
 102174f:	add    BYTE PTR [rcx],al
 1021751:	(bad)  
 1021752:	add    al,BYTE PTR [rax]
 1021754:	(bad)  
 1021755:	xor    al,BYTE PTR [rdx]
 1021757:	push   rax
 1021758:	adc    DWORD PTR [rax+rcx*1],ebx
 102175b:	add    BYTE PTR [rsp+riz*2],bl
 102175e:	or     eax,0xc341c00
 1021763:	add    BYTE PTR [rdx+rdx*2],bl
 1021766:	sbb    al,dl
 1021768:	(bad)  
 1021769:	rcl    BYTE PTR [rax+rsi*2],0xf6
 102176d:	rol    BYTE PTR [rax],0x0
 1021770:	add    DWORD PTR [rax],eax
 1021772:	add    BYTE PTR [rax],al
 1021774:	test   eax,0xcc000176
 1021779:	jbe    0x102177c
 102177b:	add    bl,ch
 102177d:	fild   DWORD PTR [rcx]
 102177f:	add    BYTE PTR [rax],al
 1021781:	add    BYTE PTR [rax],al
 1021783:	add    BYTE PTR [rcx],al
 1021785:	or     DWORD PTR [rdx],eax
 1021787:	add    BYTE PTR [rcx],cl
 1021789:	xor    al,BYTE PTR [rdx]
 102178b:	push   rax
 102178c:	add    DWORD PTR [rip+0x340d0004],ecx        # 0x350f1796
 1021792:	(bad)  
 1021793:	add    BYTE PTR [rip+0x1500632],cl        # 0x2521dcb
 1021799:	or     DWORD PTR [rdx],eax
 102179b:	add    BYTE PTR [rcx],cl
 102179d:	jb     0x10217a1
 102179f:	push   rax
 10217a0:	add    DWORD PTR [rip+0x340d0004],ecx        # 0x350f17aa
 10217a6:	(bad)  
 10217a7:	add    BYTE PTR [rip+0x1500632],cl        # 0x2521ddf
 10217ad:	adc    al,BYTE PTR [rsi]
 10217af:	add    BYTE PTR [rdx],dl
 10217b1:	je     0x10217ba
 10217b3:	add    BYTE PTR [rdx],dl
 10217b5:	xor    al,0x6
 10217b7:	add    BYTE PTR [rdx],dl
 10217b9:	xor    cl,BYTE PTR [rbx]
 10217bb:	push   rax
 10217bc:	add    DWORD PTR [rsi],eax
 10217be:	add    al,BYTE PTR [rax]
 10217c0:	(bad)  
 10217c1:	push   rdx
 10217c2:	add    dl,BYTE PTR [rax+0x19]
 10217c5:	sbb    DWORD PTR [rdx],eax
 10217c7:	add    BYTE PTR [rdi],al
 10217c9:	add    DWORD PTR [rcx+0x0],esp
 10217cc:	int3   
 10217cd:	mov    edi,0x10000
 10217d2:	add    BYTE PTR [rax],al
 10217d4:	sbb    al,0x79
 10217d6:	add    DWORD PTR [rax],eax
 10217d8:	rex.WR add BYTE PTR [rcx],0x0
 10217dc:	lock add BYTE PTR [rcx],0x0
 10217e0:	add    BYTE PTR [rax],al
 10217e2:	add    BYTE PTR [rax],al
 10217e4:	cli    
 10217e5:	add    al,BYTE PTR [rax]
 10217e7:	add    BYTE PTR [rcx],al
 10217e9:	adc    eax,DWORD PTR [rcx]
 10217eb:	add    BYTE PTR [rbx],dl
 10217ed:	(bad)  
 10217ee:	add    BYTE PTR [rax],al
 10217f0:	add    DWORD PTR [rbx],edx
 10217f2:	add    DWORD PTR [rax],eax
 10217f4:	adc    eax,DWORD PTR [rdx+0x13010000]
 10217fa:	add    DWORD PTR [rax],eax
 10217fc:	adc    esp,DWORD PTR [rdx]
 10217fe:	add    BYTE PTR [rax],al
 1021800:	add    DWORD PTR [rax],ebx
 1021802:	add    DWORD PTR [rax],eax
 1021804:	sbb    BYTE PTR [rdx+0x0],ah
 1021807:	add    BYTE PTR [rcx],al
 1021809:	adc    eax,DWORD PTR [rcx]
 102180b:	add    BYTE PTR [rbx],dl
 102180d:	and    al,BYTE PTR [rax]
 102180f:	add    BYTE PTR [rcx],al
 1021811:	sbb    BYTE PTR [rcx],al
 1021813:	add    BYTE PTR [rax],bl
 1021815:	and    al,BYTE PTR [rax]
 1021817:	add    BYTE PTR [rcx],al
 1021819:	add    al,0x1
 102181b:	add    BYTE PTR [rdx+riz*2],al
 102181e:	add    BYTE PTR [rax],al
 1021820:	add    DWORD PTR [rbx+rax*1],ecx
 1021823:	add    BYTE PTR [rdx+riz*4],cl
 1021826:	or     al,ah
 1021828:	(bad)  
 1021829:	xor    BYTE PTR [rax],al
 102182b:	add    BYTE PTR [rcx],ah
 102182d:	or     al,BYTE PTR [rax+rax*1]
 1021830:	or     ah,BYTE PTR [rdi+rcx*1+0x0]
 1021834:	add    eax,0x50000e54
 1021839:	test   DWORD PTR [rcx],eax
 102183b:	add    BYTE PTR [rdi-0x7b],ch
 102183e:	add    DWORD PTR [rax],eax
 1021840:	and    BYTE PTR [rax],bl
 1021842:	add    al,BYTE PTR [rax]
 1021844:	and    DWORD PTR [rdi],ebp
 1021846:	or     BYTE PTR [rax],al
 1021848:	(bad)  
 1021849:	hlt    
 102184a:	or     BYTE PTR [rax],al
 102184c:	es (bad) 
 102184e:	or     DWORD PTR [rax],eax
 1021850:	or     eax,0x8000ac4
 1021855:	je     0x1021867
 1021857:	add    BYTE PTR [rdi-0x7b],ch
 102185a:	add    DWORD PTR [rax],eax
 102185c:	ret    0x185
 102185f:	add    BYTE PTR [rax+rbx*1],ch
 1021862:	add    al,BYTE PTR [rax]
 1021864:	and    DWORD PTR [rax],eax
 1021866:	add    BYTE PTR [rax],al
 1021868:	outs   dx,DWORD PTR ds:[rsi]
 1021869:	test   DWORD PTR [rcx],eax
 102186b:	add    dl,al
 102186d:	test   DWORD PTR [rcx],eax
 102186f:	add    BYTE PTR [rax+rbx*1],ch
 1021872:	add    al,BYTE PTR [rax]
 1021874:	and    DWORD PTR [rax],eax
 1021876:	add    BYTE PTR [rax],al
 1021878:	push   rax
 1021879:	test   DWORD PTR [rcx],eax
 102187b:	add    BYTE PTR [rdi-0x7b],ch
 102187e:	add    DWORD PTR [rax],eax
 1021880:	and    BYTE PTR [rax],bl
 1021882:	add    al,BYTE PTR [rax]
 1021884:	add    DWORD PTR [rax+0xe],edi
 1021887:	add    BYTE PTR [rax-0x2c],bh
 102188a:	(bad)  
 102188b:	add    BYTE PTR [rbx+0x54],dh
 102188e:	or     al,0x0
 1021890:	xor    eax,0x300006e4
 1021895:	(bad)  
 1021896:	(bad)  
 1021897:	add    BYTE PTR [rbx],ch
 1021899:	je     0x10218a8
 102189b:	add    BYTE PTR [rcx],cl
 102189d:	jb     0x10218a4
 102189f:	lock add esp,DWORD PTR [rax+0x2]
 10218a3:	xor    BYTE PTR [rcx],al
 10218a5:	add    al,0x1
 10218a7:	add    BYTE PTR [rdx+riz*4],al
 10218aa:	add    BYTE PTR [rax],al
 10218ac:	and    DWORD PTR [rip+0x34050002],eax        # 0x350718b4
 10218b2:	or     al,BYTE PTR [rax]
 10218b4:	ror    BYTE PTR [rdx-0x7519ffff],0x1
 10218bb:	add    BYTE PTR [rax+rbx*1+0x210002],ah
 10218c2:	add    al,BYTE PTR [rax]
 10218c4:	add    BYTE PTR [rdx+rcx*1],dh
 10218c7:	add    al,al
 10218c9:	mov    al,BYTE PTR [rcx]
 10218cb:	add    dh,ah
 10218cd:	mov    al,BYTE PTR [rcx]
 10218cf:	add    BYTE PTR [rax+rbx*1+0x4010002],ah
 10218d6:	add    DWORD PTR [rax],eax
 10218d8:	add    al,0x42
 10218da:	add    BYTE PTR [rax],al
 10218dc:	add    DWORD PTR [rsi],eax
 10218de:	add    al,BYTE PTR [rax]
 10218e0:	(bad)  
 10218e1:	xor    al,BYTE PTR [rdx]
 10218e3:	xor    BYTE PTR [rcx],al
 10218e5:	sbb    BYTE PTR [rdx],cl
 10218e7:	add    BYTE PTR [rax],bl
 10218e9:	or     al,BYTE PTR fs:[rax]
 10218ec:	sbb    BYTE PTR [rcx+rcx*1+0x0],dl
 10218f0:	sbb    BYTE PTR [rax+rcx*1],dh
 10218f3:	add    BYTE PTR [rax],bl
 10218f5:	xor    dl,BYTE PTR [rax+rsi*8]
 10218f8:	adc    ah,al
 10218fa:	adc    BYTE PTR [rax+0x1],dh
 10218fd:	sbb    BYTE PTR [rdx],cl
 10218ff:	add    BYTE PTR [rax],bl
 1021901:	fs or  eax,0xc541800
 1021907:	add    BYTE PTR [rax],bl
 1021909:	xor    al,0xb
 102190b:	add    BYTE PTR [rax],bl
 102190d:	push   rdx
 102190e:	adc    al,0xf0
 1021910:	adc    ah,al
 1021912:	adc    BYTE PTR [rax+0x21],dh
 1021915:	add    eax,0xc4050002
 102191a:	or     al,BYTE PTR [rax]
 102191c:	ror    BYTE PTR [rcx+rax*1+0x18d2a00],1
 1021923:	add    ah,bh
 1021925:	sbb    BYTE PTR [rdx],al
 1021927:	add    BYTE PTR [rcx],ah
 1021929:	add    BYTE PTR [rax],al
 102192b:	add    al,dl
 102192d:	mov    WORD PTR [rcx],es
 102192f:	add    BYTE PTR [rdx],ch
 1021931:	lea    eax,[rcx]
 1021933:	add    ah,bh
 1021935:	sbb    BYTE PTR [rdx],al
 1021937:	add    BYTE PTR [rcx],al
 1021939:	or     al,0x6
 102193b:	add    BYTE PTR [rsp+rsi*1],cl
 102193e:	or     eax,0x8520c00
 1021943:	jo     0x102194c
 1021945:	(bad)  
 1021946:	(bad)  
 1021947:	push   rax
 1021948:	and    DWORD PTR [rdi],ecx
 102194a:	(bad)  
 102194b:	add    BYTE PTR [rdi],cl
 102194d:	hlt    
 102194e:	or     al,0x0
 1021950:	or     ah,ah
 1021952:	or     eax,DWORD PTR [rax]
 1021954:	add    eax,0x10000ac4
 1021959:	mov    es,WORD PTR [rcx]
 102195b:	add    BYTE PTR [rdx-0x72],cl
 102195e:	add    DWORD PTR [rax],eax
 1021960:	cmp    BYTE PTR [rcx],bl
 1021962:	add    al,BYTE PTR [rax]
 1021964:	and    DWORD PTR [rax],eax
 1021966:	add    BYTE PTR [rax],al
 1021968:	adc    BYTE PTR [rsi-0x71b5ffff],cl
 102196e:	add    DWORD PTR [rax],eax
 1021970:	cmp    BYTE PTR [rcx],bl
 1021972:	add    al,BYTE PTR [rax]
 1021974:	add    DWORD PTR [rdx],ecx
 1021976:	add    al,0x0
 1021978:	or     dh,BYTE PTR [rdx+0x6]
 102197b:	rol    BYTE PTR [rax+rax*8],1
 102197e:	add    dh,BYTE PTR [rax+0x21]
 1021981:	(bad)  
 1021982:	or     al,BYTE PTR [rax]
 1021984:	(bad)  
 1021985:	hlt    
 1021986:	(bad)  
 1021987:	add    BYTE PTR [rcx],bl
 1021989:	in     al,0x7
 102198b:	add    BYTE PTR [rdi],cl
 102198d:	fs (bad) 
 102198f:	add    BYTE PTR [rdx],cl
 1021991:	push   rsp
 1021992:	or     eax,0xc340500
 1021997:	add    BYTE PTR [rax-0x71],dl
 102199a:	add    DWORD PTR [rax],eax
 102199c:	or     DWORD PTR [rdi+0x19740001],0x2
 10219a3:	add    BYTE PTR [rcx],ah
 10219a5:	add    BYTE PTR [rax],al
 10219a7:	add    BYTE PTR [rax-0x71],dl
 10219aa:	add    DWORD PTR [rax],eax
 10219ac:	or     DWORD PTR [rdi+0x19740001],0x2
 10219b3:	add    BYTE PTR [rcx],ah
 10219b5:	add    BYTE PTR [rdx],cl
 10219b7:	add    BYTE PTR [rax],al
 10219b9:	hlt    
 10219ba:	(bad)  
 10219bb:	add    BYTE PTR [rax],al
 10219bd:	in     al,0x7
 10219bf:	add    BYTE PTR [rax],al
 10219c1:	fs (bad) 
 10219c3:	add    BYTE PTR [rax],al
 10219c5:	push   rsp
 10219c6:	or     eax,0xc340000
 10219cb:	add    BYTE PTR [rax-0x71],dl
 10219ce:	add    DWORD PTR [rax],eax
 10219d0:	or     DWORD PTR [rdi+0x19740001],0x2
 10219d7:	add    BYTE PTR [rcx],al
 10219d9:	(bad)  
 10219da:	add    al,BYTE PTR [rax]
 10219dc:	(bad)  
 10219dd:	xor    al,BYTE PTR [rdx]
 10219df:	xor    BYTE PTR [rcx],al
 10219e1:	(bad)  
 10219e2:	add    al,BYTE PTR [rax]
 10219e4:	(bad)  
 10219e5:	xor    al,BYTE PTR [rdx]
 10219e7:	jo     0x1021a0a
 10219e9:	clts   
 10219eb:	add    BYTE PTR [rdi],cl
 10219ed:	or     BYTE PTR fs:[rax],al
 10219f0:	or     dl,BYTE PTR [rdi+rax*1+0x0]
 10219f4:	add    eax,0xb0000634
 10219f9:	xchg   ecx,eax
 10219fa:	add    DWORD PTR [rax],eax
 10219fc:	adc    al,0x92
 10219fe:	add    DWORD PTR [rax],eax
 1021a00:	loopne 0x1021a1b
 1021a02:	add    al,BYTE PTR [rax]
 1021a04:	and    DWORD PTR [rax],eax
 1021a06:	(bad)  
 1021a07:	add    BYTE PTR [rax],al
 1021a09:	or     BYTE PTR fs:[rax],al
 1021a0c:	add    BYTE PTR [rdi+rax*1+0x0],dl
 1021a10:	add    BYTE PTR [rsi+rax*1],dh
 1021a13:	add    BYTE PTR [rax+0x14000191],dh
 1021a19:	xchg   edx,eax
 1021a1a:	add    DWORD PTR [rax],eax
 1021a1c:	loopne 0x1021a37
 1021a1e:	add    al,BYTE PTR [rax]
 1021a20:	and    DWORD PTR [rax],eax
 1021a22:	add    BYTE PTR [rax],al
 1021a24:	mov    al,0x91
 1021a26:	add    DWORD PTR [rax],eax
 1021a28:	adc    al,0x92
 1021a2a:	add    DWORD PTR [rax],eax
 1021a2c:	loopne 0x1021a47
 1021a2e:	add    al,BYTE PTR [rax]
 1021a30:	add    DWORD PTR [rsi],eax
 1021a32:	add    al,BYTE PTR [rax]
 1021a34:	(bad)  
 1021a35:	xor    al,BYTE PTR [rdx]
 1021a37:	loopne 0x1021a5a
 1021a39:	or     al,BYTE PTR [rax+rax*1]
 1021a3c:	or     ah,BYTE PTR [rdi+rax*1+0x0]
 1021a40:	add    eax,0xc0000634
 1021a45:	xchg   edx,eax
 1021a46:	add    DWORD PTR [rax],eax
 1021a48:	jmp    0x31021bdf
 1021a4d:	sbb    al,BYTE PTR [rdx]
 1021a4f:	add    BYTE PTR [rcx],ah
 1021a51:	or     al,BYTE PTR [rsi]
 1021a53:	add    BYTE PTR [rdx],cl
 1021a55:	je     0x1021a5f
 1021a57:	add    BYTE PTR [rax],al
 1021a59:	fs (bad) 
 1021a5b:	add    BYTE PTR [rax],al
 1021a5d:	xor    al,0x6
 1021a5f:	add    al,al
 1021a61:	xchg   edx,eax
 1021a62:	add    DWORD PTR [rax],eax
 1021a64:	jmp    0x31021bfb
 1021a69:	sbb    al,BYTE PTR [rdx]
 1021a6b:	add    BYTE PTR [rcx],ah
 1021a6d:	add    BYTE PTR [rsi],al
 1021a6f:	add    BYTE PTR [rax],al
 1021a71:	je     0x1021a7b
 1021a73:	add    BYTE PTR [rax],al
 1021a75:	fs (bad) 
 1021a77:	add    BYTE PTR [rax],al
 1021a79:	xor    al,0x6
 1021a7b:	add    al,al
 1021a7d:	xchg   edx,eax
 1021a7e:	add    DWORD PTR [rax],eax
 1021a80:	jmp    0x31021c17
 1021a85:	sbb    al,BYTE PTR [rdx]
 1021a87:	add    BYTE PTR [rcx],ah
 1021a89:	add    BYTE PTR [rax],al
 1021a8b:	add    al,al
 1021a8d:	xchg   edx,eax
 1021a8e:	add    DWORD PTR [rax],eax
 1021a90:	jmp    0x31021c27
 1021a95:	sbb    al,BYTE PTR [rdx]
 1021a97:	add    BYTE PTR [rcx],al
 1021a99:	clts   
 1021a9b:	add    BYTE PTR [rdi],cl
 1021a9d:	fs (bad) 
 1021a9f:	add    BYTE PTR [rdi],cl
 1021aa1:	xor    al,0x6
 1021aa3:	add    BYTE PTR [rdi],cl
 1021aa5:	xor    cl,BYTE PTR [rbx]
 1021aa7:	jo     0x1021aaa
 1021aa9:	or     al,BYTE PTR [rax+rax*1]
 1021aac:	or     dh,BYTE PTR [rsi+rax*1]
 1021aaf:	add    BYTE PTR [rdx],cl
 1021ab1:	xor    al,BYTE PTR [rsi]
 1021ab3:	jo     0x1021ab6
 1021ab5:	outs   dx,BYTE PTR ds:[rsi]
 1021ab6:	(bad)  
 1021ab7:	add    BYTE PTR [rsi+0x34],ch
 1021aba:	(bad)  
 1021abb:	add    BYTE PTR [rdx],cl
 1021abd:	fs (bad) 
 1021abf:	add    BYTE PTR [rdx],cl
 1021ac1:	xor    al,BYTE PTR [rsi]
 1021ac3:	jo     0x1021ace
 1021ac5:	or     al,BYTE PTR [rax+rax*1]
 1021ac8:	or     dh,BYTE PTR [rax+rcx*1]
 1021acb:	add    BYTE PTR [rdx],cl
 1021acd:	push   rdx
 1021ace:	(bad)  
 1021acf:	jo     0x1021ac7
 1021ad1:	rol    BYTE PTR [rax],0x0
 1021ad4:	add    DWORD PTR [rax],eax
 1021ad6:	add    BYTE PTR [rax],al
 1021ad8:	xor    edx,DWORD PTR [rsi-0x69b7ffff]
 1021ade:	add    DWORD PTR [rax],eax
 1021ae0:	add    DWORD PTR [rax],eax
 1021ae2:	add    BYTE PTR [rax],al
 1021ae4:	xchg   rsi,rax
 1021ae6:	add    DWORD PTR [rax],eax
 1021ae8:	or     DWORD PTR [rcx+rax*1],eax
 1021aeb:	add    BYTE PTR [rdx+rax*2],al
 1021aee:	add    BYTE PTR [rax],al
 1021af0:	test   al,0x0
 1021af3:	add    BYTE PTR [rcx],al
 1021af5:	add    BYTE PTR [rax],al
 1021af7:	add    BYTE PTR [rsi+rdx*4-0x696bffff],al
 1021afe:	add    DWORD PTR [rax],eax
 1021b00:	add    DWORD PTR [rax],eax
 1021b02:	add    BYTE PTR [rax],al
 1021b04:	xchg   esp,eax
 1021b05:	xchg   esi,eax
 1021b06:	add    DWORD PTR [rax],eax
 1021b08:	or     DWORD PTR [rdi],ecx
 1021b0a:	add    al,0x0
 1021b0c:	sysenter 
 1021b0e:	(bad)  
 1021b0f:	add    BYTE PTR [rdi],cl
 1021b11:	xor    cl,BYTE PTR [rbx]
 1021b13:	jo     0x1021b0b
 1021b15:	rol    BYTE PTR [rax],0x0
 1021b18:	add    DWORD PTR [rax],eax
 1021b1a:	add    BYTE PTR [rax],al
 1021b1c:	in     al,0x96
 1021b1e:	add    DWORD PTR [rax],eax
 1021b20:	hlt    
 1021b21:	xchg   esi,eax
 1021b22:	add    DWORD PTR [rax],eax
 1021b24:	add    DWORD PTR [rax],eax
 1021b26:	add    BYTE PTR [rax],al
 1021b28:	hlt    
 1021b29:	xchg   esi,eax
 1021b2a:	add    DWORD PTR [rax],eax
 1021b2c:	or     DWORD PTR [rdi],ecx
 1021b2e:	(bad)  
 1021b2f:	add    BYTE PTR [rdi],cl
 1021b31:	fs (bad) 
 1021b33:	add    BYTE PTR [rdi],cl
 1021b35:	xor    al,0x6
 1021b37:	add    BYTE PTR [rdi],cl
 1021b39:	xor    cl,BYTE PTR [rbx]
 1021b3b:	jo     0x1021b33
 1021b3d:	rol    BYTE PTR [rax],0x0
 1021b40:	add    DWORD PTR [rax],eax
 1021b42:	add    BYTE PTR [rax],al
 1021b44:	rex.WR xchg rdi,rax
 1021b46:	add    DWORD PTR [rax],eax
 1021b48:	pop    rdi
 1021b49:	xchg   edi,eax
 1021b4a:	add    DWORD PTR [rax],eax
 1021b4c:	add    DWORD PTR [rax],eax
 1021b4e:	add    BYTE PTR [rax],al
 1021b50:	pop    rdi
 1021b51:	xchg   edi,eax
 1021b52:	add    DWORD PTR [rax],eax
 1021b54:	and    DWORD PTR [rax],eax
 1021b56:	add    BYTE PTR [rax],al
 1021b58:	add    BYTE PTR [rax-0x67f3ffff],bl
 1021b5e:	add    DWORD PTR [rax],eax
 1021b60:	js     0x1021b7d
 1021b62:	add    al,BYTE PTR [rax]
 1021b64:	and    DWORD PTR [rdx+rax*1],eax
 1021b67:	add    BYTE PTR [rsp+rsi*2],al
 1021b6a:	add    BYTE PTR [rax],al
 1021b6c:	add    BYTE PTR [rax-0x67f3ffff],bl
 1021b72:	add    DWORD PTR [rax],eax
 1021b74:	js     0x1021b91
 1021b76:	add    al,BYTE PTR [rax]
 1021b78:	add    DWORD PTR [rcx+rax*1],eax
 1021b7b:	add    BYTE PTR [rdx+rax*1],al
 1021b7e:	add    BYTE PTR [rax],al
 1021b80:	add    DWORD PTR [rsi],eax
 1021b82:	add    al,BYTE PTR [rax]
 1021b84:	(bad)  
 1021b85:	xchg   edx,eax
 1021b86:	add    dh,BYTE PTR [rax]
 1021b88:	add    DWORD PTR [rdi],ebp
 1021b8a:	or     BYTE PTR [rax],al
 1021b8c:	(bad)  
 1021b8d:	push   rsp
 1021b8e:	verw   WORD PTR [rdx]
 1021b91:	xor    al,0xe
 1021b93:	add    BYTE PTR [rdx],cl
 1021b95:	adc    BYTE PTR fs:[rax],al
 1021b98:	or     dh,BYTE PTR [rdx+0xf097006]
 1021b9e:	(bad)  
 1021b9f:	add    BYTE PTR [rdi],cl
 1021ba1:	or     DWORD PTR fs:[rax],eax
 1021ba4:	sysenter 
 1021ba6:	or     BYTE PTR [rax],al
 1021ba8:	rsqrtps xmm1,XMMWORD PTR [rbx]
 1021bab:	jo     0x1021ba3
 1021bad:	rol    BYTE PTR [rax],0x0
 1021bb0:	add    DWORD PTR [rax],eax
 1021bb2:	add    BYTE PTR [rax],al
 1021bb4:	mov    bl,BYTE PTR [rdx-0x653dffff]
 1021bba:	add    DWORD PTR [rax],eax
 1021bbc:	add    DWORD PTR [rax],eax
 1021bbe:	add    BYTE PTR [rax],al
 1021bc0:	ret    0x19a
 1021bc3:	add    BYTE PTR [rcx],al
 1021bc5:	or     al,BYTE PTR [rax+rax*1]
 1021bc8:	or     dh,BYTE PTR [rsi+rax*1]
 1021bcb:	add    BYTE PTR [rdx],cl
 1021bcd:	xor    al,BYTE PTR [rsi]
 1021bcf:	jo     0x1021bd2
 1021bd1:	adc    al,0x8
 1021bd3:	add    BYTE PTR [rsp+riz*2],dl
 1021bd6:	or     eax,DWORD PTR [rax]
 1021bd8:	adc    al,0x54
 1021bda:	or     al,BYTE PTR [rax]
 1021bdc:	adc    al,0x34
 1021bde:	or     BYTE PTR [rax],al
 1021be0:	adc    al,0x52
 1021be2:	adc    BYTE PTR [rax+0x21],dh
 1021be5:	add    BYTE PTR [rdx],al
 1021be7:	add    BYTE PTR [rax],al
 1021be9:	xor    al,0x8
 1021beb:	add    BYTE PTR [rax-0x64],al
 1021bee:	add    DWORD PTR [rax],eax
 1021bf0:	outs   dx,BYTE PTR ds:[rsi]
 1021bf1:	pushf  
 1021bf2:	add    DWORD PTR [rax],eax
 1021bf4:	xor    BYTE PTR [rdx+rax*1],bl
 1021bf7:	add    BYTE PTR [rcx],ah
 1021bf9:	add    BYTE PTR [rsi],al
 1021bfb:	add    BYTE PTR [rax],al
 1021bfd:	(bad)  
 1021bfe:	(bad)  
 1021bff:	add    BYTE PTR [rax],al
 1021c01:	push   rsp
 1021c02:	(bad)  
 1021c03:	add    BYTE PTR [rax],al
 1021c05:	xor    al,0x8
 1021c07:	add    BYTE PTR [rax-0x64],al
 1021c0a:	add    DWORD PTR [rax],eax
 1021c0c:	outs   dx,BYTE PTR ds:[rsi]
 1021c0d:	pushf  
 1021c0e:	add    DWORD PTR [rax],eax
 1021c10:	xor    BYTE PTR [rdx+rax*1],bl
 1021c13:	add    BYTE PTR [rcx],ah
 1021c15:	push   rsi
 1021c16:	(bad)  
 1021c17:	add    BYTE PTR [rsi-0x3c],dl
 1021c1a:	(bad)  
 1021c1b:	add    BYTE PTR [rcx+0x54],dl
 1021c1e:	(bad)  
 1021c1f:	add    BYTE PTR [rip+0x40000834],al        # 0x41022459
 1021c25:	pushf  
 1021c26:	add    DWORD PTR [rax],eax
 1021c28:	outs   dx,BYTE PTR ds:[rsi]
 1021c29:	pushf  
 1021c2a:	add    DWORD PTR [rax],eax
 1021c2c:	xor    BYTE PTR [rdx+rax*1],bl
 1021c2f:	add    BYTE PTR [rcx],al
 1021c31:	adc    BYTE PTR [rbx],al
 1021c33:	add    BYTE PTR [rax],dl
 1021c35:	(bad)  
 1021c36:	or     al,0x70
 1021c38:	or     esp,DWORD PTR [rax+0x0]
 1021c3b:	add    BYTE PTR [rcx],al
 1021c3d:	adc    al,0x8
 1021c3f:	add    BYTE PTR [rsp+riz*2],dl
 1021c42:	or     al,0x0
 1021c44:	adc    al,0x54
 1021c46:	or     eax,DWORD PTR [rax]
 1021c48:	adc    al,0x34
 1021c4a:	or     al,BYTE PTR [rax]
 1021c4c:	adc    al,0x72
 1021c4e:	adc    BYTE PTR [rax+0x9],dh
 1021c51:	(bad)  
 1021c52:	add    al,BYTE PTR [rax]
 1021c54:	(bad)  
 1021c55:	xor    al,BYTE PTR [rdx]
 1021c57:	xor    dh,dh
 1021c59:	rol    BYTE PTR [rax],0x0
 1021c5c:	add    DWORD PTR [rax],eax
 1021c5e:	add    BYTE PTR [rax],al
 1021c60:	mov    ebx,0xc700019e
 1021c65:	sahf   
 1021c66:	add    DWORD PTR [rax],eax
 1021c68:	add    DWORD PTR [rax],eax
 1021c6a:	add    BYTE PTR [rax],al
 1021c6c:	(bad)  
 1021c6d:	sahf   
 1021c6e:	add    DWORD PTR [rax],eax
 1021c70:	add    DWORD PTR [rsi],eax
 1021c72:	add    al,BYTE PTR [rax]
 1021c74:	(bad)  
 1021c75:	xor    al,BYTE PTR [rdx]
 1021c77:	xor    BYTE PTR [rcx],al
 1021c79:	(bad)  
 1021c7a:	add    al,BYTE PTR [rax]
 1021c7c:	(bad)  
 1021c7d:	xor    al,BYTE PTR [rdx]
 1021c7f:	xor    BYTE PTR [rcx],cl
 1021c81:	adc    ecx,DWORD PTR [rax]
 1021c83:	add    BYTE PTR [rbx],dl
 1021c85:	or     eax,DWORD PTR fs:[rax]
 1021c88:	adc    esi,DWORD PTR [rdx+rcx*1]
 1021c8b:	add    BYTE PTR [rbx],dl
 1021c8d:	push   rdx
 1021c8e:	(bad)  
 1021c90:	or     eax,0xf6700bc0
 1021c95:	rol    BYTE PTR [rax],0x0
 1021c98:	add    al,BYTE PTR [rax]
 1021c9a:	add    BYTE PTR [rax],al
 1021c9c:	movabs ds:0x10001a0b60001a0,al
 1021ca5:	add    BYTE PTR [rax],al
 1021ca7:	add    BYTE PTR [rsi+0x580001a0],dh
 1021cad:	movabs al,ds:0x10001a0fc0001
 1021cb6:	add    BYTE PTR [rax],al
 1021cb8:	cld    
 1021cb9:	movabs al,ds:0x741a00081a090001
 1021cc2:	or     eax,DWORD PTR [rax]
 1021cc4:	sbb    ah,BYTE PTR [rdx+rcx*1+0x0]
 1021cc8:	sbb    dh,BYTE PTR [rcx+rcx*1]
 1021ccb:	add    BYTE PTR [rdx],bl
 1021ccd:	push   rdx
 1021cce:	(bad)  
 1021ccf:	shl    dh,0xc0
 1021cd2:	add    BYTE PTR [rax],al
 1021cd4:	add    DWORD PTR [rax],eax
 1021cd6:	add    BYTE PTR [rax],al
 1021cd8:	lods   al,BYTE PTR ds:[rsi]
 1021cd9:	movabs eax,ds:0x10001a1bf0001
 1021ce2:	add    BYTE PTR [rax],al
 1021ce4:	mov    edi,0x90001a1
 1021ce9:	adc    al,0x6
 1021ceb:	add    BYTE PTR [rsp+riz*2],dl
 1021cee:	or     al,BYTE PTR [rax]
 1021cf0:	adc    al,0x34
 1021cf2:	or     DWORD PTR [rax],eax
 1021cf4:	adc    al,0x52
 1021cf6:	adc    BYTE PTR [rax-0xa],dh
 1021cf9:	rol    BYTE PTR [rax],0x0
 1021cfc:	add    DWORD PTR [rax],eax
 1021cfe:	add    BYTE PTR [rax],al
 1021d00:	rex.WXB movabs ds:0x10001a25b0001,al
 1021d0a:	add    BYTE PTR [rax],al
 1021d0c:	pop    rbx
 1021d0d:	movabs ds:0xa310000000210001,al
 1021d16:	add    DWORD PTR [rax],eax
 1021d18:	movabs ds:0x2100021d480001,eax
 1021d22:	add    al,BYTE PTR [rax]
 1021d24:	add    BYTE PTR [rsi+rax*1],dh
 1021d27:	add    BYTE PTR [rax],dl
 1021d29:	movabs ds:0x1d480001a33e0001,eax
 1021d32:	add    al,BYTE PTR [rax]
 1021d34:	and    DWORD PTR [rip+0x34050002],eax        # 0x35071d3c
 1021d3a:	(bad)  
 1021d3b:	add    BYTE PTR [rax],dl
 1021d3d:	movabs ds:0x1d480001a33e0001,eax
 1021d46:	add    al,BYTE PTR [rax]
 1021d48:	add    DWORD PTR [rbx],ecx
 1021d4a:	add    eax,DWORD PTR [rax]
 1021d4c:	or     esp,DWORD PTR [rdx+0x7]
 1021d4f:	jo     0x1021d57
 1021d51:	(bad)  
 1021d52:	add    BYTE PTR [rax],al
 1021d54:	and    DWORD PTR [rax],eax
 1021d56:	add    BYTE PTR [rax],al
 1021d58:	movabs al,ds:0x780001a4350001a3
 1021d61:	sbb    eax,0x8210002
 1021d66:	add    al,BYTE PTR [rax]
 1021d68:	or     BYTE PTR [rcx+rbx*2],dh
 1021d6b:	add    DWORD PTR [rax+0x350001a3],esp
 1021d71:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1021d72:	add    DWORD PTR [rax],eax
 1021d74:	js     0x1021d93
 1021d76:	add    al,BYTE PTR [rax]
 1021d78:	sbb    DWORD PTR [rbx],ebx
 1021d7a:	add    eax,DWORD PTR [rax]
 1021d7c:	or     DWORD PTR [rcx],eax
 1021d7e:	push   rsi
 1021d7f:	add    DWORD PTR [rdx],eax
 1021d81:	jo     0x1021d83
 1021d83:	add    BYTE PTR [rax-0x5fffff41],ch
 1021d89:	or     al,BYTE PTR [rax]
 1021d8b:	add    BYTE PTR [rcx],cl
 1021d8d:	sbb    cl,BYTE PTR [rax]
 1021d8f:	add    BYTE PTR [rdx],bl
 1021d91:	je     0x1021da0
 1021d93:	add    BYTE PTR [rdx],bl
 1021d95:	fs or  al,0x0
 1021d98:	sbb    dh,BYTE PTR [rbx+rcx*1]
 1021d9b:	add    BYTE PTR [rdx],bl
 1021d9d:	jb     0x1021db5
 1021d9f:	shl    dh,0xc0
 1021da2:	add    BYTE PTR [rax],al
 1021da4:	add    DWORD PTR [rax],eax
 1021da6:	add    BYTE PTR [rax],al
 1021da8:	pop    rcx
 1021da9:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1021daa:	add    DWORD PTR [rax],eax
 1021dac:	(bad)  
 1021dad:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1021dae:	add    DWORD PTR [rax],eax
 1021db0:	add    DWORD PTR [rax],eax
 1021db2:	add    BYTE PTR [rax],al
 1021db4:	(bad)  
 1021db5:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1021db6:	add    DWORD PTR [rax],eax
 1021db8:	and    DWORD PTR [rax],eax
 1021dba:	add    BYTE PTR [rax],al
 1021dbc:	lock movs DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1021dbe:	add    DWORD PTR [rax],eax
 1021dc0:	add    ah,BYTE PTR [rsi+0x1df00001]
 1021dc6:	add    al,BYTE PTR [rax]
 1021dc8:	and    DWORD PTR [rax],eax
 1021dca:	add    al,BYTE PTR [rax]
 1021dcc:	add    BYTE PTR [rax+rcx*1+0x0],dh
 1021dd0:	lock movs DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1021dd2:	add    DWORD PTR [rax],eax
 1021dd4:	add    ah,BYTE PTR [rsi+0x1df00001]
 1021dda:	add    al,BYTE PTR [rax]
 1021ddc:	and    DWORD PTR [rip+0x74050002],eax        # 0x75071de4
 1021de2:	or     BYTE PTR [rax],al
 1021de4:	lock movs DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1021de6:	add    DWORD PTR [rax],eax
 1021de8:	add    ah,BYTE PTR [rsi+0x1df00001]
 1021dee:	add    al,BYTE PTR [rax]
 1021df0:	add    DWORD PTR [rsi],eax
 1021df2:	add    al,BYTE PTR [rax]
 1021df4:	(bad)  
 1021df5:	push   rdx
 1021df6:	add    dh,BYTE PTR [rax]
 1021df8:	or     DWORD PTR [rbx],ebx
 1021dfa:	or     BYTE PTR [rax],al
 1021dfc:	sbb    esi,DWORD PTR [rcx*1+0x17321b00]
 1021e03:	loopne 0x1021e1a
 1021e05:	rcl    BYTE PTR [rbx],1
 1021e07:	rcl    BYTE PTR [rcx],0x70
 1021e0a:	adc    BYTE PTR [rax-0xa],ah
 1021e0d:	rol    BYTE PTR [rax],0x0
 1021e10:	add    DWORD PTR [rax],eax
 1021e12:	add    BYTE PTR [rax],al
 1021e14:	(bad)  
 1021e15:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1021e16:	add    DWORD PTR [rax],eax
 1021e18:	ja     0x1021dc1
 1021e1a:	add    DWORD PTR [rax],eax
 1021e1c:	add    DWORD PTR [rax],eax
 1021e1e:	add    BYTE PTR [rax],al
 1021e20:	ja     0x1021dc9
 1021e22:	add    DWORD PTR [rax],eax
 1021e24:	add    DWORD PTR [rdx],ecx
 1021e26:	add    al,0x0
 1021e28:	or     dh,BYTE PTR [rsi+rax*1]
 1021e2b:	add    BYTE PTR [rdx],cl
 1021e2d:	xor    al,BYTE PTR [rsi]
 1021e2f:	jo     0x1021e32
 1021e31:	clts   
 1021e33:	add    BYTE PTR [rdi],cl
 1021e35:	fs (bad) 
 1021e37:	add    BYTE PTR [rdi],cl
 1021e39:	xor    al,0x6
 1021e3b:	add    BYTE PTR [rdi],cl
 1021e3d:	xor    cl,BYTE PTR [rbx]
 1021e3f:	jo     0x1021e62
 1021e41:	add    BYTE PTR [rax],al
 1021e43:	add    BYTE PTR [rax-0x3fffe57],dh
 1021e49:	test   eax,0x1e780001
 1021e4e:	add    al,BYTE PTR [rax]
 1021e50:	and    DWORD PTR [rax],eax
 1021e52:	add    al,BYTE PTR [rax]
 1021e54:	add    BYTE PTR [rax+rcx*1+0x0],ah
 1021e58:	mov    al,0xa9
 1021e5a:	add    DWORD PTR [rax],eax
 1021e5c:	cld    
 1021e5d:	test   eax,0x1e780001
 1021e62:	add    al,BYTE PTR [rax]
 1021e64:	and    DWORD PTR [rip+0x64050002],eax        # 0x65071e6c
 1021e6a:	or     BYTE PTR [rax],al
 1021e6c:	mov    al,0xa9
 1021e6e:	add    DWORD PTR [rax],eax
 1021e70:	cld    
 1021e71:	test   eax,0x1e780001
 1021e76:	add    al,BYTE PTR [rax]
 1021e78:	add    DWORD PTR [rdx],ecx
 1021e7a:	add    al,0x0
 1021e7c:	or     dh,BYTE PTR [rdx+rcx*1]
 1021e7f:	add    BYTE PTR [rdx],cl
 1021e81:	push   rdx
 1021e82:	(bad)  
 1021e83:	jo     0x1021ea6
 1021e85:	add    BYTE PTR [rax],al
 1021e87:	add    al,ah
 1021e89:	stos   BYTE PTR es:[rdi],al
 1021e8a:	add    DWORD PTR [rax],eax
 1021e8c:	or     al,0xab
 1021e8e:	add    DWORD PTR [rax],eax
 1021e90:	lods   al,BYTE PTR ds:[rsi]
 1021e91:	(bad)  
 1021e92:	add    al,BYTE PTR [rax]
 1021e94:	and    DWORD PTR [rdx],ecx
 1021e96:	add    al,0x0
 1021e98:	or     ah,BYTE PTR [rdi+rax*1+0x0]
 1021e9c:	add    eax,0xe0000634
 1021ea1:	stos   BYTE PTR es:[rdi],al
 1021ea2:	add    DWORD PTR [rax],eax
 1021ea4:	or     al,0xab
 1021ea6:	add    DWORD PTR [rax],eax
 1021ea8:	lods   al,BYTE PTR ds:[rsi]
 1021ea9:	(bad)  
 1021eaa:	add    al,BYTE PTR [rax]
 1021eac:	add    DWORD PTR [rdx],ecx
 1021eae:	add    al,0x0
 1021eb0:	or     dl,BYTE PTR [rax+rcx*1+0x0]
 1021eb4:	or     dh,BYTE PTR [rdx]
 1021eb6:	(bad)  
 1021eb7:	jo     0x1021ec2
 1021eb9:	sbb    eax,0x741d000a
 1021ebe:	ltr    WORD PTR [rip+0x1d000d64]        # 0x1e022c29
 1021ec5:	xor    al,0xc
 1021ec7:	add    BYTE PTR [rip+0x17e01972],bl        # 0x18e2383f
 1021ecd:	rcl    BYTE PTR [rip+0xc0f6c0],1        # 0x1c31593
 1021ed3:	add    BYTE PTR [rcx],al
 1021ed5:	add    BYTE PTR [rax],al
 1021ed7:	add    BYTE PTR [rdx-0x3fffe54],al
 1021edd:	lods   al,BYTE PTR ds:[rsi]
 1021ede:	add    DWORD PTR [rax],eax
 1021ee0:	add    DWORD PTR [rax],eax
 1021ee2:	add    BYTE PTR [rax],al
 1021ee4:	cld    
 1021ee5:	lods   al,BYTE PTR ds:[rsi]
 1021ee6:	add    DWORD PTR [rax],eax
 1021ee8:	or     DWORD PTR [rdi],edx
 1021eea:	(bad)  
 1021eeb:	add    BYTE PTR [rdi],dl
 1021eed:	xor    al,0xb
 1021eef:	add    BYTE PTR [rdi],dl
 1021ef1:	push   rdx
 1021ef2:	adc    eax,eax
 1021ef4:	adc    DWORD PTR [rax+0x10],esi
 1021ef7:	(bad)  
 1021ef8:	test   al,0x0
 1021efb:	add    BYTE PTR [rcx],al
 1021efd:	add    BYTE PTR [rax],al
 1021eff:	add    BYTE PTR [rbp-0x2afffe53],bh
 1021f05:	lods   eax,DWORD PTR ds:[rsi]
 1021f06:	add    DWORD PTR [rax],eax
 1021f08:	add    DWORD PTR [rax],eax
 1021f0a:	add    BYTE PTR [rax],al
 1021f0c:	(bad)  
 1021f0d:	lods   eax,DWORD PTR ds:[rsi]
 1021f0e:	add    DWORD PTR [rax],eax
 1021f10:	add    DWORD PTR [rdx],ecx
 1021f12:	add    al,0x0
 1021f14:	or     dh,BYTE PTR [rsi+rax*1]
 1021f17:	add    BYTE PTR [rdx],cl
 1021f19:	xor    al,BYTE PTR [rsi]
 1021f1b:	jo     0x1021f1e
 1021f1d:	(bad)  
 1021f1e:	add    al,BYTE PTR [rax]
 1021f20:	(bad)  
 1021f21:	xor    al,BYTE PTR [rdx]
 1021f23:	xor    BYTE PTR [rcx],al
 1021f25:	(bad)  
 1021f26:	add    al,BYTE PTR [rax]
 1021f28:	(bad)  
 1021f29:	xor    al,BYTE PTR [rdx]
 1021f2b:	xor    BYTE PTR [rcx],al
 1021f2d:	(bad)  
 1021f2e:	add    al,BYTE PTR [rax]
 1021f30:	(bad)  
 1021f31:	xor    al,BYTE PTR [rdx]
 1021f33:	xor    BYTE PTR [rcx],al
 1021f35:	adc    al,0x8
 1021f37:	add    BYTE PTR [rsp+riz*2],dl
 1021f3a:	or     BYTE PTR [rax],al
 1021f3c:	adc    al,0x54
 1021f3e:	(bad)  
 1021f3f:	add    BYTE PTR [rsp+rsi*1],dl
 1021f42:	(bad)  
 1021f43:	add    BYTE PTR [rdx+rsi*1],dl
 1021f46:	adc    BYTE PTR [rax+0x1],dh
 1021f49:	or     al,BYTE PTR [rax+rax*1]
 1021f4c:	or     dh,BYTE PTR [rsi+rax*1]
 1021f4f:	add    BYTE PTR [rdx],cl
 1021f51:	xor    al,BYTE PTR [rsi]
 1021f53:	jo     0x1021f5e
 1021f55:	sbb    BYTE PTR [rax],cl
 1021f57:	add    BYTE PTR [rax],bl
 1021f59:	or     eax,DWORD PTR fs:[rax]
 1021f5c:	sbb    BYTE PTR [rdx+rcx*1],dh
 1021f5f:	add    BYTE PTR [rax],bl
 1021f61:	xor    dl,BYTE PTR [rax+rdx*8]
 1021f64:	adc    al,al
 1021f66:	adc    BYTE PTR [rax-0xa],dh
 1021f69:	rol    BYTE PTR [rax],0x0
 1021f6c:	add    al,BYTE PTR [rax]
 1021f6e:	add    BYTE PTR [rax],al
 1021f70:	hlt    
 1021f71:	mov    dl,0x1
 1021f73:	add    BYTE PTR [rax],bl
 1021f75:	mov    bl,0x1
 1021f77:	add    BYTE PTR [rcx],al
 1021f79:	add    BYTE PTR [rax],al
 1021f7b:	add    BYTE PTR [rax],bl
 1021f7d:	mov    bl,0x1
 1021f7f:	add    BYTE PTR [rcx-0x4d],cl
 1021f82:	add    DWORD PTR [rax],eax
 1021f84:	pop    rdx
 1021f85:	mov    bl,0x1
 1021f87:	add    BYTE PTR [rcx],al
 1021f89:	add    BYTE PTR [rax],al
 1021f8b:	add    BYTE PTR [rdx-0x4d],bl
 1021f8e:	add    DWORD PTR [rax],eax
 1021f90:	add    DWORD PTR [rsi],eax
 1021f92:	add    al,BYTE PTR [rax]
 1021f94:	(bad)  
 1021f95:	xor    al,BYTE PTR [rdx]
 1021f97:	xor    BYTE PTR [rcx],al
 1021f99:	add    eax,0x34050002
 1021f9e:	add    DWORD PTR [rax],eax
 1021fa0:	add    DWORD PTR [rbx],ebp
 1021fa2:	add    eax,0x3742b00
 1021fa7:	add    BYTE PTR [rsi],ah
 1021fa9:	xor    al,0x2
 1021fab:	add    BYTE PTR [rdx],al
 1021fad:	(bad)  
 1021fae:	add    BYTE PTR [rax],al
 1021fb0:	or     DWORD PTR [rdx],ebx
 1021fb2:	or     al,BYTE PTR [rax]
 1021fb4:	sbb    al,ah
 1021fb6:	or     eax,0xc741a00
 1021fbb:	add    BYTE PTR [rdx],bl
 1021fbd:	or     eax,DWORD PTR fs:[rax]
 1021fc0:	sbb    dh,BYTE PTR [rdx+rcx*1]
 1021fc3:	add    BYTE PTR [rdx],bl
 1021fc5:	jb     0x1021fdd
 1021fc7:	shl    dh,1
 1021fc9:	rol    BYTE PTR [rax],0x0
 1021fcc:	add    DWORD PTR [rax],eax
 1021fce:	add    BYTE PTR [rax],al
 1021fd0:	stos   DWORD PTR es:[rdi],eax
 1021fd1:	mov    ch,0x1
 1021fd3:	add    BYTE PTR [rcx],al
 1021fd5:	mov    dh,0x1
 1021fd7:	add    BYTE PTR [rcx],al
 1021fd9:	add    BYTE PTR [rax],al
 1021fdb:	add    BYTE PTR [rcx],al
 1021fdd:	mov    dh,0x1
 1021fdf:	add    BYTE PTR [rcx],ah
 1021fe1:	add    BYTE PTR [rax],al
 1021fe3:	add    BYTE PTR [rax-0x4a],dl
 1021fe6:	add    DWORD PTR [rax],eax
 1021fe8:	cli    
 1021fe9:	mov    dh,0x1
 1021feb:	add    BYTE PTR [rax],cl
 1021fed:	and    BYTE PTR [rdx],al
 1021fef:	add    BYTE PTR [rcx],ah
 1021ff1:	or     al,BYTE PTR [rax+rax*1]
 1021ff4:	or     al,ah
 1021ff6:	(bad)  
 1021ff7:	add    BYTE PTR [rip+0x50000634],al        # 0x51022631
 1021ffd:	mov    dh,0x1
 1021fff:	add    dl,bh
 1022001:	mov    dh,0x1
 1022003:	add    BYTE PTR [rax],cl
 1022005:	and    BYTE PTR [rdx],al
 1022007:	add    BYTE PTR [rcx],al
 1022009:	clts   
 102200b:	add    BYTE PTR [rdi],cl
 102200d:	or     DWORD PTR fs:[rax],eax
 1022010:	andps  xmm1,XMMWORD PTR [rax]
 1022013:	add    BYTE PTR [rdi],cl
 1022015:	xor    cl,BYTE PTR [rbx]
 1022017:	jo     0x1022022
 1022019:	or     al,BYTE PTR [rax+rax*1]
 102201c:	or     dh,BYTE PTR [rax+rcx*1]
 102201f:	add    BYTE PTR [rdx],cl
 1022021:	push   rdx
 1022022:	(bad)  
 1022023:	jo     0x102201b
 1022025:	rol    BYTE PTR [rax],0x0
 1022028:	add    DWORD PTR [rax],eax
 102202a:	add    BYTE PTR [rax],al
 102202c:	jl     0x1021fe5
 102202e:	add    DWORD PTR [rax],eax
 1022030:	lods   al,BYTE PTR ds:[rsi]
 1022031:	mov    bh,0x1
 1022033:	add    BYTE PTR [rcx],al
 1022035:	add    BYTE PTR [rax],al
 1022037:	add    BYTE PTR [rdi+rsi*4+0xa010001],ch
 102203e:	add    al,0x0
 1022040:	or     dh,BYTE PTR [rsi+rax*1]
 1022043:	add    BYTE PTR [rdx],cl
 1022045:	xor    al,BYTE PTR [rsi]
 1022047:	jo     0x102204a
 1022049:	adc    al,0x8
 102204b:	add    BYTE PTR [rsp+riz*2],dl
 102204e:	or     BYTE PTR [rax],al
 1022050:	adc    al,0x54
 1022052:	(bad)  
 1022053:	add    BYTE PTR [rsp+rsi*1],dl
 1022056:	(bad)  
 1022057:	add    BYTE PTR [rdx+rsi*1],dl
 102205a:	adc    BYTE PTR [rax+0x21],dh
 102205d:	add    BYTE PTR [rax],al
 102205f:	add    BYTE PTR [rax-0x17fffe46],dh
 1022065:	mov    edx,0x20940001
 102206a:	add    al,BYTE PTR [rax]
 102206c:	and    DWORD PTR [rax],eax
 102206e:	add    al,BYTE PTR [rax]
 1022070:	add    ah,al
 1022072:	(bad)  
 1022073:	add    BYTE PTR [rax-0x17fffe46],dh
 1022079:	mov    edx,0x20940001
 102207e:	add    al,BYTE PTR [rax]
 1022080:	and    DWORD PTR [rip+0xffffffffc4050002],eax        # 0xffffffffc5072088
 1022086:	(bad)  
 1022087:	add    BYTE PTR [rax-0x17fffe46],dh
 102208d:	mov    edx,0x20940001
 1022092:	add    al,BYTE PTR [rax]
 1022094:	add    DWORD PTR [rax+rcx*1],edx
 1022097:	add    BYTE PTR [rsp+riz*2],dl
 102209a:	or     DWORD PTR [rax],eax
 102209c:	adc    al,0x54
 102209e:	or     BYTE PTR [rax],al
 10220a0:	adc    al,0x34
 10220a2:	(bad)  
 10220a3:	add    BYTE PTR [rdx+rsi*1],dl
 10220a6:	adc    BYTE PTR [rax+0x21],dh
 10220a9:	add    BYTE PTR [rax],al
 10220ab:	add    BYTE PTR [rax-0x17fffe45],dh
 10220b1:	mov    ebx,0x20e00001
 10220b6:	add    al,BYTE PTR [rax]
 10220b8:	and    DWORD PTR [rax],eax
 10220ba:	add    al,BYTE PTR [rax]
 10220bc:	add    ah,al
 10220be:	(bad)  
 10220bf:	add    BYTE PTR [rax-0x17fffe45],dh
 10220c5:	mov    ebx,0x20e00001
 10220ca:	add    al,BYTE PTR [rax]
 10220cc:	and    DWORD PTR [rip+0xffffffffc4050002],eax        # 0xffffffffc50720d4
 10220d2:	(bad)  
 10220d3:	add    BYTE PTR [rax-0x17fffe45],dh
 10220d9:	mov    ebx,0x20e00001
 10220de:	add    al,BYTE PTR [rax]
 10220e0:	add    DWORD PTR [rax+rcx*1],edx
 10220e3:	add    BYTE PTR [rsp+riz*2],dl
 10220e6:	or     DWORD PTR [rax],eax
 10220e8:	adc    al,0x54
 10220ea:	or     BYTE PTR [rax],al
 10220ec:	adc    al,0x34
 10220ee:	(bad)  
 10220ef:	add    BYTE PTR [rdx+rsi*1],dl
 10220f2:	adc    BYTE PTR [rax+0x9],dh
 10220f5:	(bad)  
 10220f6:	add    al,BYTE PTR [rax]
 10220f8:	(bad)  
 10220f9:	push   rdx
 10220fa:	add    dh,BYTE PTR [rax]
 10220fc:	test   al,0x0
 10220ff:	add    BYTE PTR [rcx],al
 1022101:	add    BYTE PTR [rax],al
 1022103:	add    BYTE PTR [rsp+rdi*4-0x4331ffff],bh
 102210a:	add    DWORD PTR [rax],eax
 102210c:	add    DWORD PTR [rax],eax
 102210e:	add    BYTE PTR [rax],al
 1022110:	(bad)  
 1022111:	mov    esp,0xf090001
 1022116:	(bad)  
 1022117:	add    BYTE PTR [rdi],cl
 1022119:	or     DWORD PTR fs:[rax],eax
 102211c:	sysenter 
 102211e:	or     BYTE PTR [rax],al
 1022120:	rsqrtps xmm1,XMMWORD PTR [rbx]
 1022123:	jo     0x102211b
 1022125:	rol    BYTE PTR [rax],0x0
 1022128:	add    DWORD PTR [rax],eax
 102212a:	add    BYTE PTR [rax],al
 102212c:	sbb    BYTE PTR [rbp-0x41fbffff],bh
 1022132:	add    DWORD PTR [rax],eax
 1022134:	add    DWORD PTR [rax],eax
 1022136:	add    BYTE PTR [rax],al
 1022138:	add    al,0xbe
 102213a:	add    DWORD PTR [rax],eax
 102213c:	or     DWORD PTR [rax+rcx*1],edx
 102213f:	add    BYTE PTR [rdx+rsi*4],dl
 1022142:	adc    al,dh
 1022144:	(bad)  
 1022145:	loopne 0x1022153
 1022147:	ror    BYTE PTR [rdx],1
 1022149:	ror    BYTE PTR [rax],0x70
 102214c:	(bad)  
 102214d:	(bad)  
 102214e:	(bad)  
 102214f:	xor    dh,dh
 1022151:	rol    BYTE PTR [rax],0x0
 1022154:	add    al,BYTE PTR [rax]
 1022156:	add    BYTE PTR [rax],al
 1022158:	rol    BYTE PTR es:[rcx],0x0
 102215c:	rol    eax,cl
 102215e:	add    DWORD PTR [rax],eax
 1022160:	add    DWORD PTR [rax],eax
 1022162:	add    BYTE PTR [rax],al
 1022164:	rol    eax,cl
 1022166:	add    DWORD PTR [rax],eax
 1022168:	cwde   
 1022169:	mov    esi,0xc1650001
 102216e:	add    DWORD PTR [rax],eax
 1022170:	add    DWORD PTR [rax],eax
 1022172:	add    BYTE PTR [rax],al
 1022174:	rol    DWORD PTR gs:[rcx],0x0
 1022178:	or     DWORD PTR [rip+0x74150008],edx        # 0x75172186
 102217e:	or     al,BYTE PTR [rax]
 1022180:	adc    eax,0x15000964
 1022185:	xor    al,0x8
 1022187:	add    BYTE PTR [rip+0xfffffffff6c01152],dl        # 0xfffffffff7c232df
 102218d:	rol    BYTE PTR [rax],0x0
 1022190:	add    DWORD PTR [rax],eax
 1022192:	add    BYTE PTR [rax],al
 1022194:	hlt    
 1022195:	rol    DWORD PTR [rcx],0x0
 1022198:	(bad)  
 1022199:	ret    0x1
 102219c:	add    DWORD PTR [rax],eax
 102219e:	add    BYTE PTR [rax],al
 10221a0:	(bad)  
 10221a1:	ret    0x1
 10221a4:	add    DWORD PTR [rdi],ecx
 10221a6:	(bad)  
 10221a7:	add    BYTE PTR [rdi],cl
 10221a9:	fs (bad) 
 10221ab:	add    BYTE PTR [rdi],cl
 10221ad:	xor    al,0x6
 10221af:	add    BYTE PTR [rdi],cl
 10221b1:	xor    cl,BYTE PTR [rbx]
 10221b3:	jo     0x10221b6
 10221b5:	(bad)  
 10221b6:	or     DWORD PTR [rax],eax
 10221b8:	(bad)  
 10221b9:	fs sbb al,0x0
 10221bc:	(bad)  
 10221bd:	push   rsp
 10221be:	sbb    eax,DWORD PTR [rax]
 10221c0:	(bad)  
 10221c1:	xor    al,0x1a
 10221c3:	add    BYTE PTR [rdi],dl
 10221c5:	add    DWORD PTR [rax],ebx
 10221c7:	add    BYTE PTR [rax],dl
 10221c9:	jo     0x10221cb
 10221cb:	add    BYTE PTR [rcx],al
 10221cd:	(bad)  
 10221ce:	add    al,BYTE PTR [rax]
 10221d0:	(bad)  
 10221d1:	xor    al,BYTE PTR [rdx]
 10221d3:	push   rax
 10221d4:	or     DWORD PTR [rdx],ecx
 10221d6:	add    al,BYTE PTR [rax]
 10221d8:	or     dl,BYTE PTR [rdx+0x6]
 10221db:	xor    dh,dh
 10221dd:	rol    BYTE PTR [rax],0x0
 10221e0:	add    DWORD PTR [rax],eax
 10221e2:	add    BYTE PTR [rax],al
 10221e4:	sub    ah,al
 10221e6:	add    DWORD PTR [rax],eax
 10221e8:	(bad)
 10221ed:	(bad)
 10221f1:	(bad)
 10221f5:	add    BYTE PTR [rax],al
 10221f7:	add    BYTE PTR [rax],al
 10221f9:	add    BYTE PTR [rax],al
 10221fb:	add    BYTE PTR [rax],ah
 10221fd:	ja     0x1022200
 10221ff:	add    BYTE PTR [rax],al
 1022201:	add    BYTE PTR [rax],al
 1022203:	add    BYTE PTR [rax],bl
 1022205:	and    al,BYTE PTR [rdx]
	...
 1022217:	add    BYTE PTR [rcx],al
 1022219:	add    BYTE PTR [rax],al
 102221b:	add    BYTE PTR [rax],ch
 102221d:	and    al,BYTE PTR [rdx]
	...
 102222b:	add    BYTE PTR [rax],dl
 102222d:	push   rdx
 102222e:	add    al,BYTE PTR [rax]
 1022230:	add    BYTE PTR [rax],al
 1022232:	add    BYTE PTR [rax],al
 1022234:	(bad)  
 1022235:	(bad)  
 1022236:	(bad)  
 1022237:	inc    DWORD PTR [rax]
 1022239:	add    BYTE PTR [rax],al
 102223b:	add    BYTE PTR [rax],ah
 102223d:	add    BYTE PTR [rax],al
 102223f:	add    BYTE PTR [rax+0x177],dh
	...
 102225d:	add    BYTE PTR [rax],al
 102225f:	add    al,al
 1022261:	and    eax,DWORD PTR [rdx]
	...
 102226b:	add    dh,dh
 102226d:	sub    eax,DWORD PTR [rdx]
 102226f:	add    BYTE PTR [rax+0x60000010],ch
 1022275:	add    al,BYTE PTR es:[rax]
	...
 1022280:	(bad)  
 1022281:	sub    eax,0x13480002
 1022286:	add    BYTE PTR [rax],al
 1022288:	pop    rax
 1022289:	and    eax,DWORD PTR [rdx]
	...
 1022293:	add    BYTE PTR [rax],dh
 1022295:	add    al,BYTE PTR cs:[rax]
 1022298:	adc    BYTE PTR [rax],al
 102229b:	add    al,bh
 102229d:	sub    BYTE PTR [rdx],al
	...
 10222a7:	add    BYTE PTR [rdx-0x1ffffdd2],bh
 10222ad:	adc    eax,0x28600000
 10222b2:	add    al,BYTE PTR [rax]
	...
 10222bc:	(bad)  
 10222bd:	add    al,BYTE PTR cs:[rax]
 10222c0:	adc    rax,0x28c00000
 10222c6:	add    al,BYTE PTR [rax]
	...
 10222d0:	in     al,dx
 10222d1:	add    al,BYTE PTR cs:[rax]
 10222d4:	test   al,0x15
 10222d6:	add    BYTE PTR [rax],al
 10222d8:	sbb    BYTE PTR [rbx],ah
 10222da:	add    al,BYTE PTR [rax]
	...
 10222e4:	push   0x2f
 10222e6:	add    al,BYTE PTR [rax]
 10222e8:	add    BYTE PTR [rax],dl
 10222ea:	add    BYTE PTR [rax],al
 10222ec:	loopne 0x1022316
 10222ee:	add    al,BYTE PTR [rax]
	...
 10222f8:	pop    rsp
 10222f9:	xor    al,BYTE PTR [rdx]
 10222fb:	add    al,cl
 10222fd:	adc    eax,0x0
	...
 1022316:	add    BYTE PTR [rax],al
 1022318:	push   rsi
 1022319:	(bad)  
 102231a:	add    al,BYTE PTR [rax]
 102231c:	add    BYTE PTR [rax],al
 102231e:	add    BYTE PTR [rax],al
 1022320:	rex.RX (bad) 
 1022322:	add    al,BYTE PTR [rax]
 1022324:	add    BYTE PTR [rax],al
 1022326:	add    BYTE PTR [rax],al
 1022328:	cmp    BYTE PTR [rdi],ch
 102232a:	add    al,BYTE PTR [rax]
 102232c:	add    BYTE PTR [rax],al
 102232e:	add    BYTE PTR [rax],al
 1022330:	sub    BYTE PTR [rdi],ch
 1022332:	add    al,BYTE PTR [rax]
 1022334:	add    BYTE PTR [rax],al
 1022336:	add    BYTE PTR [rax],al
 1022338:	adc    BYTE PTR [rdi],ch
 102233a:	add    al,BYTE PTR [rax]
 102233c:	add    BYTE PTR [rax],al
 102233e:	add    BYTE PTR [rax],al
 1022340:	clc    
 1022341:	add    al,BYTE PTR cs:[rax]
 1022344:	add    BYTE PTR [rax],al
 1022346:	add    BYTE PTR [rax],al
 1022348:	jp     0x102237c
 102234a:	add    al,BYTE PTR [rax]
	...
 1022358:	add    BYTE PTR [rax],al
 102235b:	add    BYTE PTR [rax],al
 102235d:	add    BYTE PTR [rax],al
 102235f:	cmp    BYTE PTR [rdx],0x0
 1022362:	add    BYTE PTR [rax],al
 1022364:	add    BYTE PTR [rax],al
 1022366:	add    BYTE PTR [rax+0x38],al
 102236c:	add    BYTE PTR [rax],al
 102236e:	add    BYTE PTR [rax+0x44],al
 1022374:	add    BYTE PTR [rax],al
 1022376:	add    BYTE PTR [rax+0x17],al
 102237c:	add    BYTE PTR [rax],al
 102237e:	add    BYTE PTR [rax+0x31],al
 1022384:	add    BYTE PTR [rax],al
 1022386:	add    BYTE PTR [rax+0x14],al
 102238c:	add    BYTE PTR [rax],al
 102238e:	add    BYTE PTR [rax+0x11],al
 1022394:	add    BYTE PTR [rax],al
 1022396:	add    BYTE PTR [rax+0x20],al
 102239c:	add    BYTE PTR [rax],al
 102239e:	add    BYTE PTR [rax+0x1f],al
 10223a4:	add    BYTE PTR [rax],al
 10223a6:	add    BYTE PTR [rax+0x1e],al
 10223ac:	add    BYTE PTR [rax],al
 10223ae:	add    BYTE PTR [rax+0x3d],al
 10223b4:	add    BYTE PTR [rax],al
 10223b6:	add    BYTE PTR [rax+0x0],al
 10223bc:	add    BYTE PTR [rax],al
 10223be:	add    BYTE PTR [rax],al
 10223c0:	or     dh,BYTE PTR [rdx+rax*1]
 10223c3:	add    BYTE PTR [rax],al
 10223c5:	add    BYTE PTR [rax],al
 10223c7:	add    dh,dh
 10223c9:	xor    eax,DWORD PTR [rdx]
 10223cb:	add    BYTE PTR [rax],al
 10223cd:	add    BYTE PTR [rax],al
 10223cf:	add    al,ch
 10223d1:	xor    eax,DWORD PTR [rdx]
 10223d3:	add    BYTE PTR [rax],al
 10223d5:	add    BYTE PTR [rax],al
 10223d7:	add    dl,bl
 10223d9:	xor    eax,DWORD PTR [rdx]
 10223db:	add    BYTE PTR [rax],al
 10223dd:	add    BYTE PTR [rax],al
 10223df:	add    BYTE PTR [rax+0x33],ch
 10223e2:	add    al,BYTE PTR [rax]
 10223e4:	add    BYTE PTR [rax],al
 10223e6:	add    BYTE PTR [rax],al
 10223e8:	xor    r8,QWORD PTR [rdx]
 10223eb:	add    BYTE PTR [rax],al
 10223ed:	add    BYTE PTR [rax],al
 10223ef:	add    BYTE PTR [rax],dh
 10223f1:	xor    eax,DWORD PTR [rdx]
 10223f3:	add    BYTE PTR [rax],al
 10223f5:	add    BYTE PTR [rax],al
 10223f7:	add    BYTE PTR [rdx],ah
 10223f9:	xor    eax,DWORD PTR [rdx]
 10223fb:	add    BYTE PTR [rax],al
 10223fd:	add    BYTE PTR [rax],al
 10223ff:	add    BYTE PTR [rdx],dl
 1022401:	xor    eax,DWORD PTR [rdx]
 1022403:	add    BYTE PTR [rax],al
 1022405:	add    BYTE PTR [rax],al
 1022407:	add    BYTE PTR [rax],al
 1022409:	xor    eax,DWORD PTR [rdx]
 102240b:	add    BYTE PTR [rax],al
 102240d:	add    BYTE PTR [rax],al
 102240f:	add    dl,dh
 1022411:	xor    al,BYTE PTR [rdx]
 1022413:	add    BYTE PTR [rax],al
 1022415:	add    BYTE PTR [rax],al
 1022417:	add    dh,ah
 1022419:	xor    al,BYTE PTR [rdx]
 102241b:	add    BYTE PTR [rax],al
 102241d:	add    BYTE PTR [rax],al
 102241f:	add    dl,bl
 1022421:	xor    al,BYTE PTR [rdx]
 1022423:	add    BYTE PTR [rax],al
 1022425:	add    BYTE PTR [rax],al
 1022427:	add    al,cl
 1022429:	xor    al,BYTE PTR [rdx]
 102242b:	add    BYTE PTR [rax],al
 102242d:	add    BYTE PTR [rax],al
 102242f:	add    BYTE PTR [rsi+0x22b],bl
 1022435:	add    BYTE PTR [rax],al
 1022437:	add    BYTE PTR [rdx],bl
 1022439:	xor    al,0x2
 102243b:	add    BYTE PTR [rax],al
 102243d:	add    BYTE PTR [rax],al
 102243f:	add    BYTE PTR [rax+0x232],cl
 1022445:	add    BYTE PTR [rax],al
 1022447:	add    BYTE PTR [rax+0x22b],al
 102244d:	add    BYTE PTR [rax],al
 102244f:	add    BYTE PTR [rdx+0x2b],ch
 1022452:	add    al,BYTE PTR [rax]
 1022454:	add    BYTE PTR [rax],al
 1022456:	add    BYTE PTR [rax],al
 1022458:	pop    rdx
 1022459:	sub    eax,DWORD PTR [rdx]
 102245b:	add    BYTE PTR [rax],al
 102245d:	add    BYTE PTR [rax],al
 102245f:	add    BYTE PTR [rdx+0x2b],al
 1022462:	add    al,BYTE PTR [rax]
 1022464:	add    BYTE PTR [rax],al
 1022466:	add    BYTE PTR [rax],al
 1022468:	and    al,0x2b
 102246a:	add    al,BYTE PTR [rax]
 102246c:	add    BYTE PTR [rax],al
 102246e:	add    BYTE PTR [rax],al
 1022470:	(bad)  
 1022471:	sub    eax,DWORD PTR [rdx]
 1022473:	add    BYTE PTR [rax],al
 1022475:	add    BYTE PTR [rax],al
 1022477:	add    al,dh
 1022479:	sub    al,BYTE PTR [rdx]
 102247b:	add    BYTE PTR [rax],al
 102247d:	add    BYTE PTR [rax],al
 102247f:	add    dh,bl
 1022481:	sub    al,BYTE PTR [rdx]
 1022483:	add    BYTE PTR [rax],al
 1022485:	add    BYTE PTR [rax],al
 1022487:	add    dl,cl
 1022489:	sub    al,BYTE PTR [rdx]
 102248b:	add    BYTE PTR [rax],al
 102248d:	add    BYTE PTR [rax],al
 102248f:	add    BYTE PTR [rsi+0x22a],dh
 1022495:	add    BYTE PTR [rax],al
 1022497:	add    BYTE PTR [rax+0x22a],ah
 102249d:	add    BYTE PTR [rax],al
 102249f:	add    BYTE PTR [rdx+0x22a],cl
 10224a5:	add    BYTE PTR [rax],al
 10224a7:	add    BYTE PTR [rdx+0x2a],bh
 10224aa:	add    al,BYTE PTR [rax]
 10224ac:	add    BYTE PTR [rax],al
 10224ae:	add    BYTE PTR [rax],al
 10224b0:	ins    BYTE PTR es:[rdi],dx
 10224b1:	sub    al,BYTE PTR [rdx]
 10224b3:	add    BYTE PTR [rax],al
 10224b5:	add    BYTE PTR [rax],al
 10224b7:	add    BYTE PTR [rax+0x2a],ah
 10224ba:	add    al,BYTE PTR [rax]
 10224bc:	add    BYTE PTR [rax],al
 10224be:	add    BYTE PTR [rax],al
 10224c0:	xor    dh,BYTE PTR [rdx+rax*1]
 10224c3:	add    BYTE PTR [rax],al
 10224c5:	add    BYTE PTR [rax],al
 10224c7:	add    BYTE PTR [rdx+0x34],al
 10224ca:	add    al,BYTE PTR [rax]
 10224cc:	add    BYTE PTR [rax],al
 10224ce:	add    BYTE PTR [rax],al
 10224d0:	pop    rax
 10224d1:	xor    al,0x2
 10224d3:	add    BYTE PTR [rax],al
 10224d5:	add    BYTE PTR [rax],al
 10224d7:	add    BYTE PTR [rdx+0x34],ch
 10224da:	add    al,BYTE PTR [rax]
 10224dc:	add    BYTE PTR [rax],al
 10224de:	add    BYTE PTR [rax],al
 10224e0:	jl     0x1022516
 10224e2:	add    al,BYTE PTR [rax]
 10224e4:	add    BYTE PTR [rax],al
 10224e6:	add    BYTE PTR [rax],al
 10224e8:	nop
 10224e9:	xor    al,0x2
 10224eb:	add    BYTE PTR [rax],al
 10224ed:	add    BYTE PTR [rax],al
 10224ef:	add    BYTE PTR [rsp+rsi*1+0x2],ah
 10224f6:	add    BYTE PTR [rax],al
 10224f8:	loop   0x1022525
 10224fa:	add    al,BYTE PTR [rax]
 10224fc:	add    BYTE PTR [rax],al
 10224fe:	add    BYTE PTR [rax],al
 1022500:	(bad)  
 1022501:	sub    eax,DWORD PTR [rdx]
 1022503:	add    BYTE PTR [rax],al
 1022505:	add    BYTE PTR [rax],al
 1022507:	add    BYTE PTR [rbx+rbp*1+0x2],bh
 102250e:	add    BYTE PTR [rax],al
 1022510:	xchg   esp,eax
 1022511:	xor    al,BYTE PTR [rdx]
 1022513:	add    BYTE PTR [rax],al
 1022515:	add    BYTE PTR [rax],al
 1022517:	add    BYTE PTR [rsi+0x22b],ch
 102251d:	add    BYTE PTR [rax],al
 102251f:	add    BYTE PTR [rax+0x2a],dl
 1022522:	add    al,BYTE PTR [rax]
 1022524:	add    BYTE PTR [rax],al
 1022526:	add    BYTE PTR [rax],al
 1022528:	sub    al,BYTE PTR ss:[rdx]
 102252b:	add    BYTE PTR [rax],al
 102252d:	add    BYTE PTR [rax],al
 102252f:	add    BYTE PTR [rax],ah
 1022531:	sub    al,BYTE PTR [rdx]
 1022533:	add    BYTE PTR [rax],al
 1022535:	add    BYTE PTR [rax],al
 1022537:	add    BYTE PTR [rdx],dl
 1022539:	sub    al,BYTE PTR [rdx]
 102253b:	add    BYTE PTR [rax],al
 102253d:	add    BYTE PTR [rax],al
 102253f:	add    BYTE PTR [rsi],al
 1022541:	sub    al,BYTE PTR [rdx]
 1022543:	add    BYTE PTR [rax],al
 1022545:	add    BYTE PTR [rax],al
 1022547:	add    BYTE PTR [rax],bh
 1022549:	xor    DWORD PTR [rdx],eax
 102254b:	add    BYTE PTR [rax],al
 102254d:	add    BYTE PTR [rax],al
 102254f:	add    BYTE PTR [rax],ch
 1022551:	xor    DWORD PTR [rdx],eax
 1022553:	add    BYTE PTR [rax],al
 1022555:	add    BYTE PTR [rax],al
 1022557:	add    BYTE PTR [rcx+rsi*1],cl
 102255a:	add    al,BYTE PTR [rax]
 102255c:	add    BYTE PTR [rax],al
 102255e:	add    BYTE PTR [rax],al
 1022560:	out    dx,al
 1022561:	sub    DWORD PTR [rdx],eax
 1022563:	add    BYTE PTR [rax],al
 1022565:	add    BYTE PTR [rax],al
 1022567:	add    dh,al
 1022569:	sub    DWORD PTR [rdx],eax
 102256b:	add    BYTE PTR [rax],al
 102256d:	add    BYTE PTR [rax],al
 102256f:	add    BYTE PTR [rsi+0x229],ch
 1022575:	add    BYTE PTR [rax],al
 1022577:	add    BYTE PTR [rsi+0x229],dl
 102257d:	add    BYTE PTR [rax],al
 102257f:	add    BYTE PTR [rdx+0x29],bh
 1022582:	add    al,BYTE PTR [rax]
 1022584:	add    BYTE PTR [rax],al
 1022586:	add    BYTE PTR [rax],al
 1022588:	push   0x29
 102258a:	add    al,BYTE PTR [rax]
 102258c:	add    BYTE PTR [rax],al
 102258e:	add    BYTE PTR [rax],al
 1022590:	push   rsp
 1022591:	sub    DWORD PTR [rdx],eax
 1022593:	add    BYTE PTR [rax],al
 1022595:	add    BYTE PTR [rax],al
 1022597:	add    BYTE PTR [rdx+0x29],al
 102259a:	add    al,BYTE PTR [rax]
 102259c:	add    BYTE PTR [rax],al
 102259e:	add    BYTE PTR [rax],al
 10225a0:	scas   al,BYTE PTR es:[rdi]
 10225a1:	xor    al,BYTE PTR [rdx]
 10225a3:	add    BYTE PTR [rax],al
 10225a5:	add    BYTE PTR [rax],al
 10225a7:	add    BYTE PTR [rax],dh
 10225a9:	sub    DWORD PTR [rdx],eax
 10225ab:	add    BYTE PTR [rax],al
 10225ad:	add    BYTE PTR [rax],al
 10225af:	add    BYTE PTR [rax+0x2f],bh
 10225b2:	add    al,BYTE PTR [rax]
 10225b4:	add    BYTE PTR [rax],al
 10225b6:	add    BYTE PTR [rax],al
 10225b8:	sub    BYTE PTR [rdi],0x2
 10225bb:	add    BYTE PTR [rax],al
 10225bd:	add    BYTE PTR [rax],al
 10225bf:	add    BYTE PTR [rax+0x22f],dl
 10225c5:	add    BYTE PTR [rax],al
 10225c7:	add    BYTE PTR [rax+0x22f],ah
 10225cd:	add    BYTE PTR [rax],al
 10225cf:	add    BYTE PTR [rdi+rbp*1+0x2],bh
 10225d6:	add    BYTE PTR [rax],al
 10225d8:	shr    BYTE PTR [rdi],1
 10225da:	add    al,BYTE PTR [rax]
 10225dc:	add    BYTE PTR [rax],al
 10225de:	add    BYTE PTR [rax],al
 10225e0:	in     al,0x2f
 10225e2:	add    al,BYTE PTR [rax]
 10225e4:	add    BYTE PTR [rax],al
 10225e6:	add    BYTE PTR [rax],al
 10225e8:	(bad)  
 10225e9:	(bad)  
 10225ea:	add    al,BYTE PTR [rax]
 10225ec:	add    BYTE PTR [rax],al
 10225ee:	add    BYTE PTR [rax],al
 10225f0:	adc    dh,BYTE PTR [rax]
 10225f2:	add    al,BYTE PTR [rax]
 10225f4:	add    BYTE PTR [rax],al
 10225f6:	add    BYTE PTR [rax],al
 10225f8:	sub    al,0x30
 10225fa:	add    al,BYTE PTR [rax]
 10225fc:	add    BYTE PTR [rax],al
 10225fe:	add    BYTE PTR [rax],al
 1022600:	cmp    al,0x30
 1022602:	add    al,BYTE PTR [rax]
 1022604:	add    BYTE PTR [rax],al
 1022606:	add    BYTE PTR [rax],al
 1022608:	push   rdx
 1022609:	xor    BYTE PTR [rdx],al
 102260b:	add    BYTE PTR [rax],al
 102260d:	add    BYTE PTR [rax],al
 102260f:	add    BYTE PTR [rax+rsi*1+0x2],ch
 1022613:	add    BYTE PTR [rax],al
 1022615:	add    BYTE PTR [rax],al
 1022617:	add    BYTE PTR [rdx+0x30],bh
 102261a:	add    al,BYTE PTR [rax]
 102261c:	add    BYTE PTR [rax],al
 102261e:	add    BYTE PTR [rax],al
 1022620:	mov    WORD PTR [rax],?
 1022622:	add    al,BYTE PTR [rax]
 1022624:	add    BYTE PTR [rax],al
 1022626:	add    BYTE PTR [rax],al
 1022628:	sahf   
 1022629:	xor    BYTE PTR [rdx],al
 102262b:	add    BYTE PTR [rax],al
 102262d:	add    BYTE PTR [rax],al
 102262f:	add    BYTE PTR [rsi+0x230],ch
 1022635:	add    BYTE PTR [rax],al
 1022637:	add    BYTE PTR [rsi+0x230],bh
 102263d:	add    BYTE PTR [rax],al
 102263f:	add    al,bl
 1022641:	xor    BYTE PTR [rdx],al
 1022643:	add    BYTE PTR [rax],al
 1022645:	add    BYTE PTR [rax],al
 1022647:	add    al,dh
 1022649:	xor    BYTE PTR [rdx],al
 102264b:	add    BYTE PTR [rax],al
 102264d:	add    BYTE PTR [rax],al
 102264f:	add    BYTE PTR [rax],al
 1022651:	xor    DWORD PTR [rdx],eax
	...
 102265f:	add    BYTE PTR [rsp+rbp*1],dl
 1022662:	add    al,BYTE PTR [rax]
 1022664:	add    BYTE PTR [rax],al
 1022666:	add    BYTE PTR [rax],al
 1022668:	adc    BYTE PTR [rip+0x2],ch        # 0x1022670
 102266e:	add    BYTE PTR [rax],al
 1022670:	(bad)  
 1022671:	sub    eax,0x2
 1022676:	add    BYTE PTR [rax],al
 1022678:	cs sub eax,0x2
 102267e:	add    BYTE PTR [rax],al
 1022680:	cmp    al,0x2d
 1022682:	add    al,BYTE PTR [rax]
 1022684:	add    BYTE PTR [rax],al
 1022686:	add    BYTE PTR [rax],al
 1022688:	rex.R sub eax,0x2
 102268e:	add    BYTE PTR [rax],al
 1022690:	rex.WRX sub rax,0x2
 1022696:	add    BYTE PTR [rax],al
 1022698:	push   rsi
 1022699:	sub    eax,0x2
 102269e:	add    BYTE PTR [rax],al
 10226a0:	and    BYTE PTR [rdx+rax*1],ch
 10226a3:	add    BYTE PTR [rax],al
 10226a5:	add    BYTE PTR [rax],al
 10226a7:	add    BYTE PTR [rdx],dh
 10226a9:	sub    al,0x2
 10226ab:	add    BYTE PTR [rax],al
 10226ad:	add    BYTE PTR [rax],al
 10226af:	add    BYTE PTR [rax+0x31],cl
 10226b2:	add    al,BYTE PTR [rax]
 10226b4:	add    BYTE PTR [rax],al
 10226b6:	add    BYTE PTR [rax],al
 10226b8:	pop    rax
 10226b9:	xor    DWORD PTR [rdx],eax
 10226bb:	add    BYTE PTR [rax],al
 10226bd:	add    BYTE PTR [rax],al
 10226bf:	add    BYTE PTR [rdx+0x31],ah
 10226c2:	add    al,BYTE PTR [rax]
 10226c4:	add    BYTE PTR [rax],al
 10226c6:	add    BYTE PTR [rax],al
 10226c8:	outs   dx,BYTE PTR ds:[rsi]
 10226c9:	xor    DWORD PTR [rdx],eax
 10226cb:	add    BYTE PTR [rax],al
 10226cd:	add    BYTE PTR [rax],al
 10226cf:	add    BYTE PTR [rdx+0x31],bh
 10226d2:	add    al,BYTE PTR [rax]
 10226d4:	add    BYTE PTR [rax],al
 10226d6:	add    BYTE PTR [rax],al
 10226d8:	mov    dh,BYTE PTR [rcx]
 10226da:	add    al,BYTE PTR [rax]
 10226dc:	add    BYTE PTR [rax],al
 10226de:	add    BYTE PTR [rax],al
 10226e0:	xchg   esi,eax
 10226e1:	xor    DWORD PTR [rdx],eax
 10226e3:	add    BYTE PTR [rax],al
 10226e5:	add    BYTE PTR [rax],al
 10226e7:	add    BYTE PTR [rdx+0x231],ah
 10226ed:	add    BYTE PTR [rax],al
 10226ef:	add    BYTE PTR [rcx+rsi*1+0x2],ch
 10226f6:	add    BYTE PTR [rax],al
 10226f8:	mov    eax,0x231
 10226fd:	add    BYTE PTR [rax],al
 10226ff:	add    ah,al
 1022701:	xor    DWORD PTR [rdx],eax
 1022703:	add    BYTE PTR [rax],al
 1022705:	add    BYTE PTR [rax],al
 1022707:	add    dl,dl
 1022709:	xor    DWORD PTR [rdx],eax
 102270b:	add    BYTE PTR [rax],al
 102270d:	add    BYTE PTR [rax],al
 102270f:	add    dh,bl
 1022711:	xor    DWORD PTR [rdx],eax
 1022713:	add    BYTE PTR [rax],al
 1022715:	add    BYTE PTR [rax],al
 1022717:	add    dl,ch
 1022719:	xor    DWORD PTR [rdx],eax
 102271b:	add    BYTE PTR [rax],al
 102271d:	add    BYTE PTR [rax],al
 102271f:	add    BYTE PTR [rsp+rbp*1],al
 1022722:	add    al,BYTE PTR [rax]
 1022724:	add    BYTE PTR [rax],al
 1022726:	add    BYTE PTR [rax],al
 1022728:	add    BYTE PTR [rdx],dh
 102272a:	add    al,BYTE PTR [rax]
 102272c:	add    BYTE PTR [rax],al
 102272e:	add    BYTE PTR [rax],al
 1022730:	(bad)  
 1022731:	xor    al,BYTE PTR [rdx]
 1022733:	add    BYTE PTR [rax],al
 1022735:	add    BYTE PTR [rax],al
 1022737:	add    BYTE PTR [rax],ah
 1022739:	xor    al,BYTE PTR [rdx]
 102273b:	add    BYTE PTR [rax],al
 102273d:	add    BYTE PTR [rax],al
 102273f:	add    BYTE PTR [rsi],bh
 1022741:	sub    al,0x2
 1022743:	add    BYTE PTR [rax],al
 1022745:	add    BYTE PTR [rax],al
 1022747:	add    BYTE PTR [rdx+0x2c],cl
 102274a:	add    al,BYTE PTR [rax]
 102274c:	add    BYTE PTR [rax],al
 102274e:	add    BYTE PTR [rax],al
 1022750:	push   rdx
 1022751:	sub    al,0x2
 1022753:	add    BYTE PTR [rax],al
 1022755:	add    BYTE PTR [rax],al
 1022757:	add    BYTE PTR [rsp+rbp*1+0x2],bl
 102275b:	add    BYTE PTR [rax],al
 102275d:	add    BYTE PTR [rax],al
 102275f:	add    BYTE PTR [rdx+0x2c],ch
 1022762:	add    al,BYTE PTR [rax]
 1022764:	add    BYTE PTR [rax],al
 1022766:	add    BYTE PTR [rax],al
 1022768:	jp     0x1022796
 102276a:	add    al,BYTE PTR [rax]
 102276c:	add    BYTE PTR [rax],al
 102276e:	add    BYTE PTR [rax],al
 1022770:	(bad)  
 1022771:	sub    eax,0x2
 1022776:	add    BYTE PTR [rax],al
 1022778:	outs   dx,BYTE PTR ds:[rsi]
 1022779:	sub    eax,0x2
 102277e:	add    BYTE PTR [rax],al
 1022780:	jl     0x10227af
 1022782:	add    al,BYTE PTR [rax]
 1022784:	add    BYTE PTR [rax],al
 1022786:	add    BYTE PTR [rax],al
 1022788:	xchg   edx,eax
 1022789:	sub    eax,0x2
 102278e:	add    BYTE PTR [rax],al
 1022790:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1022791:	sub    eax,0x2
 1022796:	add    BYTE PTR [rax],al
 1022798:	mov    dl,0x2d
 102279a:	add    al,BYTE PTR [rax]
 102279c:	add    BYTE PTR [rax],al
 102279e:	add    BYTE PTR [rax],al
 10227a0:	mov    esp,0x22d
 10227a5:	add    BYTE PTR [rax],al
 10227a7:	add    ah,bl
 10227a9:	sub    eax,0x2
 10227ae:	add    BYTE PTR [rax],al
 10227b0:	out    0x2d,al
 10227b2:	add    al,BYTE PTR [rax]
 10227b4:	add    BYTE PTR [rax],al
 10227b6:	add    BYTE PTR [rax],al
 10227b8:	hlt    
 10227b9:	sub    eax,0x2
 10227be:	add    BYTE PTR [rax],al
 10227c0:	cld    
 10227c1:	sub    eax,0x2
 10227c6:	add    BYTE PTR [rax],al
 10227c8:	(bad)  
 10227c9:	add    al,BYTE PTR cs:[rax]
 10227cc:	add    BYTE PTR [rax],al
 10227ce:	add    BYTE PTR [rax],al
 10227d0:	sbb    al,0x2e
 10227d2:	add    al,BYTE PTR [rax]
 10227d4:	add    BYTE PTR [rax],al
 10227d6:	add    BYTE PTR [rax],al
 10227d8:	mov    WORD PTR [rdx+rax*1],gs
 10227db:	add    BYTE PTR [rax],al
 10227dd:	add    BYTE PTR [rax],al
 10227df:	add    BYTE PTR [rsi+0x22c],bl
 10227e5:	add    BYTE PTR [rax],al
 10227e7:	add    BYTE PTR [rax+0x22c],ch
 10227ed:	add    BYTE PTR [rax],al
 10227ef:	add    BYTE PTR [rax+0x234],bh
 10227f5:	add    BYTE PTR [rax],al
 10227f7:	add    dh,dh
 10227f9:	xor    DWORD PTR [rdx],eax
 10227fb:	add    BYTE PTR [rax],al
 10227fd:	add    BYTE PTR [rax],al
 10227ff:	add    al,cl
 1022801:	xor    al,0x2
 1022803:	add    BYTE PTR [rax],al
 1022805:	add    BYTE PTR [rax],al
 1022807:	add    al,bh
 1022809:	sub    al,0x2
 102280b:	add    BYTE PTR [rax],al
 102280d:	add    BYTE PTR [rax],al
 102280f:	add    dl,ch
 1022811:	sub    al,0x2
 1022813:	add    BYTE PTR [rax],al
 1022815:	add    BYTE PTR [rax],al
 1022817:	add    al,ah
 1022819:	sub    al,0x2
 102281b:	add    BYTE PTR [rax],al
 102281d:	add    BYTE PTR [rax],al
 102281f:	add    BYTE PTR [rbx+rsi*1+0x2],ah
 1022826:	add    BYTE PTR [rax],al
 1022828:	xchg   esp,eax
 1022829:	xor    eax,DWORD PTR [rdx]
 102282b:	add    BYTE PTR [rax],al
 102282d:	add    BYTE PTR [rax],al
 102282f:	add    BYTE PTR [rsi+0x33],bh
 1022832:	add    al,BYTE PTR [rax]
 1022834:	add    BYTE PTR [rax],al
 1022836:	add    BYTE PTR [rax],al
 1022838:	mov    dl,0x2c
 102283a:	add    al,BYTE PTR [rax]
 102283c:	add    BYTE PTR [rax],al
 102283e:	add    BYTE PTR [rax],al
 1022840:	mov    esp,0x22c
 1022845:	add    BYTE PTR [rax],al
 1022847:	add    al,cl
 1022849:	sub    al,0x2
 102284b:	add    BYTE PTR [rax],al
 102284d:	add    BYTE PTR [rax],al
 102284f:	add    BYTE PTR [rsi],al
 1022851:	sub    eax,0x2
	...
 102285e:	add    BYTE PTR [rax],al
 1022860:	mov    edx,0x0
 1022865:	add    BYTE PTR [rax],al
 1022867:	and    BYTE PTR [rbx+0x0],0x0
 102286e:	add    BYTE PTR [rax+0xa2],al
 1022874:	add    BYTE PTR [rax],al
 1022876:	add    BYTE PTR [rax+0xa1],al
 102287c:	add    BYTE PTR [rax],al
 102287e:	add    BYTE PTR [rax+0x7],al
 1022884:	add    BYTE PTR [rax],al
 1022886:	add    BYTE PTR [rax+0x6],al
 102288c:	add    BYTE PTR [rax],al
 102288e:	add    BYTE PTR [rax+0x2],al
 1022894:	add    BYTE PTR [rax],al
 1022896:	add    BYTE PTR [rax+0x95],al
 102289c:	add    BYTE PTR [rax],al
 102289e:	add    BYTE PTR [rax+0xc],al
 10228a4:	add    BYTE PTR [rax],al
 10228a6:	add    BYTE PTR [rax+0x9],al
 10228ac:	add    BYTE PTR [rax],al
 10228ae:	add    BYTE PTR [rax+0x8],al
 10228b4:	add    BYTE PTR [rax],al
 10228b6:	add    BYTE PTR [rax+0x0],al
 10228bc:	add    BYTE PTR [rax],al
 10228be:	add    BYTE PTR [rax],al
 10228c0:	fisubr WORD PTR [rsi]
 10228c2:	add    al,BYTE PTR [rax]
 10228c4:	add    BYTE PTR [rax],al
 10228c6:	add    BYTE PTR [rax],al
 10228c8:	shr    BYTE PTR [rsi],cl
 10228ca:	add    al,BYTE PTR [rax]
 10228cc:	add    BYTE PTR [rax],al
 10228ce:	add    BYTE PTR [rax],al
 10228d0:	ins    BYTE PTR es:[rdi],dx
 10228d1:	xor    al,BYTE PTR [rdx]
	...
 10228df:	add    BYTE PTR [rax],dh
 10228e1:	xor    al,BYTE PTR [rdx]
 10228e3:	add    BYTE PTR [rax],al
 10228e5:	add    BYTE PTR [rax],al
 10228e7:	add    BYTE PTR [rsi],bh
 10228e9:	xor    al,BYTE PTR [rdx]
	...
 10228f7:	add    BYTE PTR [rsi+0x22e],cl
 10228fd:	add    BYTE PTR [rax],al
 10228ff:	add    BYTE PTR [rsi+0x22e],ah
 1022905:	add    BYTE PTR [rax],al
 1022907:	add    BYTE PTR [rax+0x2e],bh
 102290a:	add    al,BYTE PTR [rax]
 102290c:	add    BYTE PTR [rax],al
 102290e:	add    BYTE PTR [rax],al
 1022910:	(bad)  
 1022911:	add    al,BYTE PTR cs:[rax]
 1022914:	add    BYTE PTR [rax],al
 1022916:	add    BYTE PTR [rax],al
 1022918:	rex.WRX
 1022919:	add    al,BYTE PTR cs:[rax]
 102291c:	add    BYTE PTR [rax],al
 102291e:	add    BYTE PTR [rax],al
 1022920:	cmp    al,0x2e
 1022922:	add    al,BYTE PTR [rax]
	...
 1022930:	rex.WR add r8b,BYTE PTR [rdi+0x65]
 1022934:	je     0x1022986
 1022936:	jb     0x10229a7
 1022938:	movsxd eax,DWORD PTR [rcx+0x64]
 102293b:	fs jb  0x10229a3
 102293e:	jae    0x10229b3
 1022940:	add    BYTE PTR [rax],al
 1022942:	mov    ah,0x3
 1022944:	push   rdx
 1022945:	(bad)  
 1022946:	imul   esi,DWORD PTR [rbx+0x65],0x65637845
 102294d:	jo     0x10229c3
 102294f:	imul   ebp,DWORD PTR [rdi+0x6e],0x1cb0000
 1022956:	rex.RXB
 1022957:	gs je  0x102299d
 102295a:	jne    0x10229ce
 102295c:	jb     0x10229c3
 102295e:	outs   dx,BYTE PTR ds:[rsi]
 102295f:	je     0x10229b5
 1022961:	push   0x64616572
 1022966:	rex.WB
 1022967:	add    BYTE PTR fs:[rax],al
 102296a:	or     BYTE PTR [rdx],al
 102296c:	rex.RXB
 102296d:	gs je  0x10229bc
 1022970:	(bad)  
 1022971:	jae    0x10229e7
 1022973:	rex.RB jb 0x10229e8
 1022976:	outs   dx,DWORD PTR ds:[rsi]
 1022977:	jb     0x1022979
 1022979:	add    dl,ch
 102297b:	add    cl,BYTE PTR [rcx+0x6e]
 102297e:	imul   esi,DWORD PTR [rcx+rbp*2+0x61],0x657a696c
 1022986:	rex.XB jb 0x10229f2
 1022989:	je     0x10229f4
 102298b:	movsxd esp,DWORD PTR [rcx+0x6c]
 102298e:	push   rbx
 102298f:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 1022994:	outs   dx,BYTE PTR ds:[rsi]
 1022995:	add    dl,dh
 1022997:	add    BYTE PTR [rbp+0x6e],al
 102299a:	je     0x1022a01
 102299c:	jb     0x10229e1
 102299e:	jb     0x1022a09
 10229a0:	je     0x1022a0b
 10229a2:	movsxd esp,DWORD PTR [rcx+0x6c]
 10229a5:	push   rbx
 10229a6:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 10229ab:	outs   dx,BYTE PTR ds:[rsi]
 10229ac:	add    BYTE PTR [rax],al
 10229ae:	cmp    eax,DWORD PTR [rbx]
 10229b0:	rex.WR
 10229b1:	gs (bad) 
 10229b3:	jbe    0x1022a1a
 10229b5:	rex.XB jb 0x1022a21
 10229b8:	je     0x1022a23
 10229ba:	movsxd esp,DWORD PTR [rcx+0x6c]
 10229bd:	push   rbx
 10229be:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 10229c3:	outs   dx,BYTE PTR ds:[rsi]
 10229c4:	add    BYTE PTR [rax],al
 10229c6:	jmp    0x10229ca
 10229c8:	rex.WB outs dx,BYTE PTR ds:[rsi]
 10229ca:	imul   esi,DWORD PTR [rcx+rbp*2+0x61],0x657a696c
 10229d2:	rex.XB jb 0x1022a3e
 10229d5:	je     0x1022a40
 10229d7:	movsxd esp,DWORD PTR [rcx+0x6c]
 10229da:	push   rbx
 10229db:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 10229e0:	outs   dx,BYTE PTR ds:[rsi]
 10229e1:	rex.B outs dx,BYTE PTR ds:[rsi]
 10229e3:	fs push rbx
 10229e5:	jo     0x1022a50
 10229e7:	outs   dx,BYTE PTR ds:[rsi]
 10229e8:	rex.XB outs dx,DWORD PTR ds:[rsi]
 10229ea:	jne    0x1022a5a
 10229ec:	je     0x10229ee
 10229ee:	rol    BYTE PTR [rax],cl
 10229f0:	rex.R
 10229f1:	gs ins BYTE PTR es:[rdi],dx
 10229f3:	gs je  0x1022a5b
 10229f6:	rex.XB jb 0x1022a62
 10229f9:	je     0x1022a64
 10229fb:	movsxd esp,DWORD PTR [rcx+0x6c]
 10229fe:	push   rbx
 10229ff:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 1022a04:	outs   dx,BYTE PTR ds:[rsi]
 1022a05:	add    BYTE PTR [rdi+0x4],ah
 1022a08:	push   rbx
 1022a09:	gs je  0x1022a51
 1022a0c:	jbe    0x1022a73
 1022a0e:	outs   dx,BYTE PTR ds:[rsi]
 1022a0f:	je     0x1022a11
 1022a11:	add    BYTE PTR [rdx],dl
 1022a13:	add    al,0x52
 1022a15:	gs jae 0x1022a7d
 1022a18:	je     0x1022a5f
 1022a1a:	jbe    0x1022a81
 1022a1c:	outs   dx,BYTE PTR ds:[rsi]
 1022a1d:	je     0x1022a1f
 1022a1f:	add    BYTE PTR [rax],cl
 1022a21:	add    eax,0x74696157
 1022a26:	rex.RX outs dx,DWORD PTR ds:[rsi]
 1022a28:	jb     0x1022a7d
 1022a2a:	imul   ebp,DWORD PTR [rsi+0x67],0x624f656c
 1022a31:	push   0x65
 1022a33:	movsxd esi,DWORD PTR [rax+rax*1+0x6]
 1022a37:	add    eax,0x74696157
 1022a3c:	rex.RX outs dx,DWORD PTR ds:[rsi]
 1022a3e:	jb     0x1022a8d
 1022a40:	jne    0x1022aae
 1022a42:	je     0x1022aad
 1022a44:	jo     0x1022ab2
 1022a46:	gs rex.WRXB (bad) 
 1022a49:	push   0x65
 1022a4b:	movsxd esi,DWORD PTR [rbx+rsi*2+0x0]
 1022a4f:	add    BYTE PTR [rbx+0x2],ch
 1022a52:	rex.RXB
 1022a53:	gs je  0x1022aa9
 1022a56:	je     0x1022abc
 1022a58:	rex.W (bad) 
 1022a5a:	outs   dx,BYTE PTR ds:[rsi]
 1022a5b:	fs ins BYTE PTR es:[rdi],dx
 1022a5d:	add    BYTE PTR gs:[rax],al
 1022a60:	xor    al,0x5
 1022a62:	push   rdi
 1022a63:	jb     0x1022ace
 1022a65:	je     0x1022acc
 1022a67:	imul   r13d,DWORD PTR [rbp+r12*2+0x0],0x6c430052
 1022a70:	outs   dx,DWORD PTR ds:[rsi]
 1022a71:	jae    0x1022ad8
 1022a73:	rex.W (bad) 
 1022a75:	outs   dx,BYTE PTR ds:[rsi]
 1022a76:	fs ins BYTE PTR es:[rdi],dx
 1022a78:	add    BYTE PTR gs:[rdx+0x65724300],al
 1022a7f:	(bad)  
 1022a80:	je     0x1022ae7
 1022a82:	rex.RB jbe 0x1022aea
 1022a85:	outs   dx,BYTE PTR ds:[rsi]
 1022a86:	je     0x1022ac9
 1022a88:	add    BYTE PTR [rax],al
 1022a8a:	sbb    DWORD PTR [rdx],eax
 1022a8c:	rex.RXB
 1022a8d:	gs je  0x1022add
 1022a90:	outs   dx,DWORD PTR ds:[rsi]
 1022a91:	fs jne 0x1022b00
 1022a94:	imul   r13d,DWORD PTR gs:[rbp+r12*2+0x4e],0x41656d61
 1022a9e:	add    BYTE PTR [rax],al
 1022aa0:	sbb    al,BYTE PTR [rdx]
 1022aa2:	rex.RXB
 1022aa3:	gs je  0x1022af3
 1022aa6:	outs   dx,DWORD PTR ds:[rsi]
 1022aa7:	fs jne 0x1022b16
 1022aaa:	imul   r13d,DWORD PTR gs:[rbp+r12*2+0x4e],0x57656d61
 1022ab4:	add    BYTE PTR [rax],al
 1022ab6:	sbb    eax,DWORD PTR [rdx]
 1022ab8:	rex.RXB
 1022ab9:	gs je  0x1022b09
 1022abc:	outs   dx,DWORD PTR ds:[rsi]
 1022abd:	fs jne 0x1022b2c
 1022ac0:	gs rex.W (bad) 
 1022ac3:	outs   dx,BYTE PTR ds:[rsi]
 1022ac4:	fs ins BYTE PTR es:[rdi],dx
 1022ac6:	add    BYTE PTR gs:[r8],al
 1022aca:	(bad)  
 1022acb:	add    al,BYTE PTR [rdi+0x65]
 1022ace:	je     0x1022b1d
 1022ad0:	outs   dx,DWORD PTR ds:[rsi]
 1022ad1:	fs jne 0x1022b40
 1022ad4:	gs rex.W (bad) 
 1022ad7:	outs   dx,BYTE PTR ds:[rsi]
 1022ad8:	fs ins BYTE PTR es:[rdi],dx
 1022ada:	gs push rdi
 1022adc:	add    BYTE PTR [rax],al
 1022ade:	mov    WORD PTR [rcx],es
 1022ae0:	rex.RXB
 1022ae1:	gs je  0x1022b27
 1022ae4:	outs   dx,DWORD PTR ds:[rsi]
 1022ae5:	ins    DWORD PTR es:[rdi],dx
 1022ae6:	ins    DWORD PTR es:[rdi],dx
 1022ae7:	(bad)  
 1022ae8:	outs   dx,BYTE PTR ds:[rsi]
 1022ae9:	imul   r13,QWORD PTR fs:[rsi+0x65],0x5200041
 1022af2:	push   rdi
 1022af3:	imul   esp,DWORD PTR [rbp+riz*2+0x43],0x54726168
 1022afb:	outs   dx,DWORD PTR ds:[rsi]
 1022afc:	rex.WRB jne 0x1022b6b
 1022aff:	je     0x1022b6a
 1022b01:	rex.X jns 0x1022b78
 1022b04:	add    BYTE PTR gs:[rax+0x74654701],bh
 1022b0b:	rex.XB outs dx,DWORD PTR ds:[rsi]
 1022b0d:	outs   dx,BYTE PTR ds:[rsi]
 1022b0e:	jae    0x1022b7f
 1022b10:	ins    BYTE PTR es:[rdi],dx
 1022b11:	gs push rbx
 1022b13:	movsxd esi,DWORD PTR [rdx+0x65]
 1022b16:	outs   dx,BYTE PTR gs:[rsi]
 1022b18:	rex.X jne 0x1022b81
 1022b1b:	data16 gs jb 0x1022b68
 1022b1f:	outs   dx,BYTE PTR ds:[rsi]
 1022b20:	outs   dx,WORD PTR ds:[rsi]
 1022b22:	add    BYTE PTR [rax],al
 1022b24:	push   rbx
 1022b25:	add    al,0x53
 1022b27:	gs je  0x1022b6d
 1022b2a:	outs   dx,DWORD PTR ds:[rsi]
 1022b2b:	outs   dx,BYTE PTR ds:[rsi]
 1022b2c:	jae    0x1022b9d
 1022b2e:	ins    BYTE PTR es:[rdi],dx
 1022b2f:	gs push rbx
 1022b31:	movsxd esi,DWORD PTR [rdx+0x65]
 1022b34:	outs   dx,BYTE PTR gs:[rsi]
 1022b36:	rex.X jne 0x1022b9f
 1022b39:	data16 gs jb 0x1022b90
 1022b3d:	imul   edi,DWORD PTR [rdx+0x65],0x43b0000
 1022b44:	push   rbx
 1022b45:	gs je  0x1022b8b
 1022b48:	outs   dx,DWORD PTR ds:[rsi]
 1022b49:	outs   dx,BYTE PTR ds:[rsi]
 1022b4a:	jae    0x1022bbb
 1022b4c:	ins    BYTE PTR es:[rdi],dx
 1022b4d:	gs rex.XB je 0x1022bc3
 1022b51:	ins    BYTE PTR es:[rdi],dx
 1022b52:	rex.W (bad) 
 1022b54:	outs   dx,BYTE PTR ds:[rsi]
 1022b55:	fs ins BYTE PTR es:[rdi],dx
 1022b57:	gs jb  0x1022b5a
 1022b5a:	adc    BYTE PTR [rax],al
 1022b5c:	rex.B ins BYTE PTR es:[rdi],dx
 1022b5e:	ins    BYTE PTR es:[rdi],dx
 1022b5f:	outs   dx,DWORD PTR ds:[rsi]
 1022b60:	movsxd eax,DWORD PTR [rbx+0x6f]
 1022b63:	outs   dx,BYTE PTR ds:[rsi]
 1022b64:	jae    0x1022bd5
 1022b66:	ins    BYTE PTR es:[rdi],dx
 1022b67:	add    BYTE PTR gs:[rax],al
 1022b6a:	fild   DWORD PTR [rdx]
 1022b6c:	rex.W
 1022b6d:	gs (bad) 
 1022b6f:	jo     0x1022bc4
 1022b71:	gs je  0x1022bbd
 1022b74:	outs   dx,BYTE PTR ds:[rsi]
 1022b75:	outs   dx,WORD PTR ds:[rsi]
 1022b77:	jb     0x1022be6
 1022b79:	(bad)  
 1022b7a:	je     0x1022be5
 1022b7c:	outs   dx,DWORD PTR ds:[rsi]
 1022b7d:	outs   dx,BYTE PTR ds:[rsi]
 1022b7e:	add    BYTE PTR [rax],al
 1022b80:	mov    bl,0x4
 1022b82:	push   rbx
 1022b83:	gs je  0x1022bdb
 1022b86:	outs   dx,BYTE PTR ds:[rsi]
 1022b87:	push   0x6c646e61
 1022b8c:	gs fs rex.RB js 0x1022bf4
 1022b91:	gs jo  0x1022c08
 1022b94:	imul   ebp,DWORD PTR [rdi+0x6e],0x746c6946
 1022b9b:	gs jb  0x1022b9e
 1022b9e:	data16 add al,0x53
 1022ba1:	gs je  0x1022be9
 1022ba4:	jb     0x1022c18
 1022ba6:	outs   dx,DWORD PTR ds:[rsi]
 1022ba7:	jb     0x1022bf6
 1022ba9:	outs   dx,DWORD PTR ds:[rsi]
 1022baa:	fs add BYTE PTR gs:[rax],al
 1022bae:	push   0x65724601
 1022bb3:	imul   r12,QWORD PTR gs:[rdx+0x72],0x797261
 1022bbc:	rex add ecx,DWORD PTR [rdi+rbp*2+0x61]
 1022bc1:	imul   r12,QWORD PTR fs:[rdx+0x72],0x45797261
 1022bca:	js     0x1022c23
 1022bcc:	add    BYTE PTR [rax],al
 1022bce:	mov    BYTE PTR [rcx],0x47
 1022bd1:	gs je  0x1022c17
 1022bd4:	jne    0x1022c48
 1022bd6:	jb     0x1022c3d
 1022bd8:	outs   dx,BYTE PTR ds:[rsi]
 1022bd9:	je     0x1022c2b
 1022bdb:	jb     0x1022c4c
 1022bdd:	movsxd esp,DWORD PTR [rbp+0x73]
 1022be0:	jae    0x1022be2
 1022be2:	(bad)  
 1022be3:	add    al,0x54
 1022be5:	gs jb  0x1022c55
 1022be8:	imul   ebp,DWORD PTR [rsi+0x61],0x72506574
 1022bef:	outs   dx,DWORD PTR ds:[rsi]
 1022bf0:	movsxd esp,DWORD PTR [rbp+0x73]
 1022bf3:	jae    0x1022bf5
 1022bf5:	add    BYTE PTR [rbx+0x45],cl
 1022bf8:	push   rdx
 1022bf9:	rex.WRX
 1022bfa:	rex.RB
 1022bfb:	xor    r14,QWORD PTR [rdx]
 1022bfe:	cs fs ins BYTE PTR es:[rdi],dx
 1022c01:	ins    BYTE PTR es:[rdi],dx
 1022c02:	add    BYTE PTR [rax],al
 1022c04:	add    BYTE PTR gs:[rdi],bh
 1022c07:	(bad)  
 1022c08:	xor    eax,DWORD PTR [rax+0x59]
 1022c0b:	pop    r8
 1022c0d:	push   rax
 1022c0e:	rex.RB
 1022c0f:	pop    r8
 1022c11:	rex pop rdx
 1022c13:	add    BYTE PTR [rcx+0x75705f03],ch
 1022c19:	jb     0x1022c80
 1022c1b:	movsxd esp,DWORD PTR [rcx+0x6c]
 1022c1e:	ins    BYTE PTR es:[rdi],dx
 1022c1f:	add    BYTE PTR [rbx+0x0],ah
 1022c22:	(bad)  
 1022c23:	(bad)  
 1022c24:	xor    al,BYTE PTR [rax+0x59]
 1022c27:	push   r8
 1022c29:	rex.RB
 1022c2a:	pop    r8
 1022c2c:	pop    rdi
 1022c2d:	rex.WXB
 1022c2e:	rex pop rdx
 1022c30:	add    BYTE PTR [rax],al
 1022c32:	sbb    DWORD PTR [rdi+rbx*2],eax
 1022c35:	jae    0x1022cab
 1022c37:	jb     0x1022ca7
 1022c39:	imul   esp,DWORD PTR [rbx+0x6d],0x61e0070
 1022c40:	ja     0x1022ca5
 1022c42:	jae    0x1022cb2
 1022c44:	movsxd esi,DWORD PTR [rax+0x79]
 1022c47:	pop    rdi
 1022c48:	jae    0x1022c4a
 1022c4a:	movsxd eax,DWORD PTR [rip+0x65657266]        # 0x66679eb6
 1022c50:	add    BYTE PTR [rax],al
 1022c52:	sahf   
 1022c53:	add    eax,0x6c6c616d
 1022c58:	outs   dx,DWORD PTR ds:[rsi]
 1022c59:	movsxd eax,DWORD PTR [rax]
 1022c5b:	add    BYTE PTR [rcx+rax*1+0x5f],dl
 1022c5f:	pop    rdi
 1022c60:	imul   ebp,DWORD PTR [rdi+0x62],0x6e75665f
 1022c67:	movsxd eax,DWORD PTR [rax]
 1022c69:	add    BYTE PTR [rdi+0x65725f03],dh
 1022c6f:	jae    0x1022cd6
 1022c71:	je     0x1022ce6
 1022c73:	je     0x1022ce0
 1022c75:	outs   dx,DWORD PTR ds:[rsi]
 1022c76:	data16 ins BYTE PTR es:[rdi],dx
 1022c78:	ja     0x1022c7a
 1022c7a:	js     0x1022c7c
 1022c7c:	(bad)  
 1022c7d:	(bad)  
 1022c7e:	pop    rdi
 1022c7f:	push   rbp
 1022c80:	rex pop rcx
 1022c82:	push   r8
 1022c84:	rex.RB
 1022c85:	pop    r8
 1022c87:	pop    rdi
 1022c88:	rex.WXB
 1022c89:	rex pop rdx
 1022c8b:	add    BYTE PTR [rdx+0x0],bh
 1022c8e:	(bad)  
 1022c8f:	(bad)  
 1022c90:	pop    rdi
 1022c91:	push   rsi
 1022c92:	rex pop rcx
 1022c94:	pop    r8
 1022c96:	push   rax
 1022c97:	rex.RB
 1022c98:	pop    r8
 1022c9a:	rex pop rdx
 1022c9c:	add    BYTE PTR [rax],al
 1022c9e:	rex.WR add rax,0x6f6c6366
 1022ca4:	jae    0x1022d0b
 1022ca6:	add    BYTE PTR [rax],al
 1022ca8:	fs add eax,0x6f657266
 1022cae:	jo     0x1022d15
 1022cb0:	outs   dx,BYTE PTR ds:[rsi]
 1022cb1:	add    BYTE PTR [rbx+0x69727005],dh
 1022cb7:	outs   dx,BYTE PTR ds:[rsi]
 1022cb8:	je     0x1022d20
 1022cba:	add    BYTE PTR [rax],al
 1022cbc:	sbb    eax,DWORD PTR [rsi]
 1022cbe:	ja     0x1022d23
 1022cc0:	jae    0x1022d30
 1022cc2:	movsxd esp,DWORD PTR [rcx+0x74]
 1022cc5:	pop    rdi
 1022cc6:	jae    0x1022cc8
 1022cc8:	(bad)  
 1022cc9:	add    DWORD PTR [rdi+0x5f],ebx
 1022ccc:	rex.XB pop r15
 1022cce:	jae    0x1022d40
 1022cd0:	movsxd ebp,DWORD PTR gs:[rcx+0x66]
 1022cd4:	imul   esp,DWORD PTR [rbx+0x5f],0x646e6168
 1022cdb:	ins    BYTE PTR es:[rdi],dx
 1022cdc:	gs jb  0x1022cdf
 1022cdf:	add    BYTE PTR [rbx],dh
 1022ce1:	(bad)  
 1022ce2:	ja     0x1022d54
 1022ce4:	jb     0x1022d4f
 1022ce6:	outs   dx,BYTE PTR ds:[rsi]
 1022ce7:	je     0x1022d4f
 1022ce9:	add    BYTE PTR [rbp+0x73765f04],al
 1022cef:	outs   dx,BYTE PTR ds:[rsi]
 1022cf0:	ja     0x1022d62
 1022cf2:	jb     0x1022d5d
 1022cf4:	outs   dx,BYTE PTR ds:[rsi]
 1022cf5:	je     0x1022d5d
 1022cf7:	add    BYTE PTR [rdi+0x63775f04],ah
 1022cfd:	jae    0x1022d68
 1022cff:	movsxd ebp,DWORD PTR [rbp+0x70]
 1022d02:	pop    rdi
 1022d03:	ins    BYTE PTR es:[rdi],dx
 1022d04:	add    BYTE PTR [rax],al
 1022d06:	lods   eax,DWORD PTR ds:[rsi]
 1022d07:	add    eax,0x736d656d
 1022d0c:	gs je  0x1022d0f
 1022d0f:	add    BYTE PTR [rsi+0x6d615f01],bl
 1022d15:	jae    0x1022d7e
 1022d17:	pop    rdi
 1022d18:	gs js  0x1022d84
 1022d1b:	je     0x1022d1d
 1022d1d:	add    BYTE PTR [rdx+0x1],dl
 1022d20:	pop    rdi
 1022d21:	pop    rdi
 1022d22:	addr32 gs je 0x1022d93
 1022d26:	(bad)  
 1022d27:	imul   ebp,DWORD PTR [rsi+0x61],0x736772
 1022d2e:	sbb    al,BYTE PTR [rcx]
 1022d30:	pop    rdi
 1022d31:	pop    rax
 1022d32:	movsxd esi,DWORD PTR [rax+0x74]
 1022d35:	imul   r13d,DWORD PTR [rsp+r14*2+0x65],0x2000072
 1022d3e:	pop    rdi
 1022d3f:	gs js  0x1022dab
 1022d42:	je     0x1022d44
 1022d44:	mov    ch,0x1
 1022d46:	pop    rdi
 1022d47:	movsxd esp,DWORD PTR [rbp+0x78]
 1022d4a:	imul   esi,DWORD PTR [rax+rax*1+0x0],0x78650548
 1022d52:	imul   esi,DWORD PTR [rax+rax*1+0x0],0x5f5f0153
 1022d5a:	imul   ebp,DWORD PTR [rsi+0x69],0x766e6574
 1022d61:	add    BYTE PTR [rsi+0x6e695f02],al
 1022d67:	imul   esi,DWORD PTR [rsp+rsi*2+0x65],0x87006d72
 1022d6f:	add    bl,BYTE PTR [rdi+0x69]
 1022d72:	outs   dx,BYTE PTR ds:[rsi]
 1022d73:	imul   esi,DWORD PTR [rsp+rsi*2+0x65],0x655f6d72
 1022d7b:	add    ch,al
 1022d7d:	add    DWORD PTR [rdi+0x63],ebx
 1022d80:	outs   dx,DWORD PTR ds:[rsi]
 1022d81:	outs   dx,BYTE PTR ds:[rsi]
 1022d82:	imul   sp,WORD PTR [rdi+0x74],0x7268
 1022d88:	gs (bad) 
 1022d8a:	fs ins BYTE PTR es:[rdi],dx
 1022d8c:	outs   dx,DWORD PTR ds:[rsi]
 1022d8d:	movsxd esp,DWORD PTR [rcx+0x6c]
 1022d90:	add    BYTE PTR gs:[rcx+rax*1+0x5f],bh
 1022d95:	pop    rdi
 1022d96:	jae    0x1022dfd
 1022d98:	je     0x1022e0f
 1022d9a:	jae    0x1022e01
 1022d9c:	jb     0x1022e0b
 1022d9e:	(bad)  
 1022d9f:	je     0x1022e09
 1022da1:	gs jb  0x1022e16
 1022da4:	add    BYTE PTR [rax],al
 1022da6:	(bad)
 1022daa:	outs   dx,DWORD PTR ds:[rsi]
 1022dab:	ins    DWORD PTR es:[rdi],dx
 1022dac:	ins    DWORD PTR es:[rdi],dx
 1022dad:	outs   dx,DWORD PTR ds:[rsi]
 1022dae:	fs add BYTE PTR gs:[rax],al
 1022db2:	sbb    al,0x2
 1022db4:	pop    rdi
 1022db5:	ins    WORD PTR es:[rdi],dx
 1022db7:	outs   dx,DWORD PTR ds:[rsi]
 1022db8:	fs add BYTE PTR gs:[rax],al
 1022dbc:	jns    0x1022dbf
 1022dbe:	pop    rdi
 1022dbf:	pop    rdi
 1022dc0:	jae    0x1022e27
 1022dc2:	je     0x1022e23
 1022dc4:	(bad)  
 1022dc5:	jo     0x1022e37
 1022dc7:	pop    rdi
 1022dc8:	je     0x1022e43
 1022dca:	jo     0x1022e31
 1022dcc:	add    BYTE PTR [rax],al
 1022dce:	rex.WRB push r11
 1022dd0:	push   rsi
 1022dd1:	rex.XB push r10
 1022dd3:	xor    DWORD PTR [rax],esi
 1022dd5:	xor    BYTE PTR [rsi],ch
 1022dd7:	fs ins BYTE PTR es:[rdi],dx
 1022dd9:	ins    BYTE PTR es:[rdi],dx
 1022dda:	add    BYTE PTR [rax],al
 1022ddc:	pop    rbx
 1022ddd:	add    al,0x5f
 1022ddf:	jne    0x1022e4f
 1022de1:	ins    BYTE PTR es:[rdi],dx
 1022de2:	outs   dx,DWORD PTR ds:[rsi]
 1022de3:	movsxd ebp,DWORD PTR [rbx+0x0]
 1022de6:	add    QWORD PTR [rdi+0x5f],rbx
 1022dea:	fs ins BYTE PTR es:[rdi],dx
 1022dec:	ins    BYTE PTR es:[rdi],dx
 1022ded:	outs   dx,DWORD PTR ds:[rsi]
 1022dee:	outs   dx,BYTE PTR ds:[rsi]
 1022def:	gs js  0x1022e5b
 1022df2:	je     0x1022df4
 1022df4:	test   BYTE PTR [rdx],0x5f
 1022df7:	ins    BYTE PTR es:[rdi],dx
 1022df8:	outs   dx,DWORD PTR ds:[rsi]
 1022df9:	movsxd ebp,DWORD PTR [rbx+0x0]
 1022dfc:	popf   
 1022dfd:	add    ebx,DWORD PTR [rdi+0x6f]
 1022e00:	outs   dx,BYTE PTR ds:[rsi]
 1022e01:	gs js  0x1022e6d
 1022e04:	je     0x1022e06
 1022e06:	rex.RX add DWORD PTR [rdi+0x5f],r11d
 1022e0a:	movsxd esi,DWORD PTR [rdx+0x74]
 1022e0d:	pop    rdi
 1022e0e:	fs gs (bad) 
 1022e11:	jne    0x1022e7a
 1022e13:	addr32 gs jb 0x1022e76
 1022e17:	push   0x6b6f6f
 1022e1c:	add    BYTE PTR [rcx],al
 1022e1e:	(bad)  
 1022e1f:	je     0x1022e86
 1022e21:	jb     0x1022e90
 1022e23:	imul   ebp,DWORD PTR [rsi+0x61],0x40406574
 1022e2a:	pop    rcx
 1022e2b:	pop    r8
 1022e2d:	pop    rax
 1022e2e:	pop    rdx
 1022e2f:	add    BYTE PTR [rcx+0x54],al
 1022e32:	xor    QWORD PTR [rax],r14
 1022e35:	xor    BYTE PTR [rsi],ch
 1022e37:	rex.R
 1022e38:	rex.WR
 1022e39:	rex.WR add BYTE PTR [rax],r8b
 1022e3c:	jo     0x1022e3e
 1022e3e:	rex.XB outs dx,DWORD PTR ds:[rsi]
 1022e40:	push   rbp
 1022e41:	outs   dx,BYTE PTR ds:[rsi]
 1022e42:	imul   ebp,DWORD PTR [rsi+0x69],0x6c616974
 1022e49:	imul   edi,DWORD PTR [rdx+0x65],0x430000
 1022e50:	rex.XB outs dx,DWORD PTR ds:[rsi]
 1022e52:	rex.WB outs dx,BYTE PTR ds:[rsi]
 1022e54:	imul   esi,DWORD PTR [rcx+rbp*2+0x61],0x657a696c
 1022e5c:	rex.RB js 0x1022e5f
 1022e5f:	add    BYTE PTR [rdi+0x0],dl
 1022e62:	rex.XB outs dx,DWORD PTR ds:[rsi]
 1022e64:	push   rdx
 1022e65:	imul   esi,DWORD PTR gs:[ebx+0x74],0x6c437265
 1022e6e:	(bad)  
 1022e6f:	jae    0x1022ee4
 1022e71:	rex.WRXB (bad) 
 1022e73:	push   0x65
 1022e75:	movsxd esi,DWORD PTR [rax+rax*1+0x63]
 1022e79:	add    BYTE PTR [rbx+0x6f],al
 1022e7c:	push   rdx
 1022e7d:	gs jbe 0x1022eef
 1022e80:	imul   esp,DWORD PTR [rbp+0x43],0x6c
 1022e84:	(bad)  
 1022e85:	jae    0x1022efa
 1022e87:	rex.WRXB (bad) 
 1022e89:	push   0x65
 1022e8b:	movsxd esi,DWORD PTR [rax+rax*1+0x44]
 1022e8f:	add    BYTE PTR [rbx+0x6f],al
 1022e92:	rex.WB outs dx,BYTE PTR ds:[rsi]
 1022e94:	imul   esi,DWORD PTR [rcx+rbp*2+0x61],0x657a696c
 1022e9c:	push   rbx
 1022e9d:	movsxd esi,DWORD PTR gs:[rbp+0x72]
 1022ea1:	imul   esi,DWORD PTR [rcx+rdi*2+0x0],0x43001400
 1022ea9:	outs   dx,DWORD PTR ds:[rsi]
 1022eaa:	rex.XB jb 0x1022f12
 1022ead:	(bad)  
 1022eae:	je     0x1022f15
 1022eb0:	rex.WB outs dx,BYTE PTR ds:[rsi]
 1022eb2:	jae    0x1022f28
 1022eb4:	(bad)  
 1022eb5:	outs   dx,BYTE PTR ds:[rsi]
 1022eb6:	movsxd esp,DWORD PTR [rbp+0x0]
 1022eb9:	add    BYTE PTR [rdi+0x6c],ch
 1022ebc:	xor    esi,DWORD PTR gs:[rdx]
 1022ebf:	cs fs ins BYTE PTR es:[rdi],dx
 1022ec2:	ins    BYTE PTR es:[rdi],dx
 1022ec3:	add    BYTE PTR [rdi+0x4c],cl
 1022ec6:	rex.RB
 1022ec7:	push   r13
 1022ec9:	push   rsp
 1022eca:	xor    esi,DWORD PTR [rdx]
 1022ecc:	cs fs ins BYTE PTR es:[rdi],dx
 1022ecf:	ins    BYTE PTR es:[rdi],dx
 1022ed0:	add    BYTE PTR [rax],al
 1022ed2:	xor    DWORD PTR [rax],eax
 1022ed4:	rex.XB push 0x654e7261
 1022eda:	js     0x1022f50
 1022edc:	push   rdi
 1022edd:	add    BYTE PTR [rdx+rax*1],dl
 1022ee0:	rex.WRB
 1022ee1:	gs jae 0x1022f57
 1022ee4:	(bad)  
 1022ee5:	rex.X outs dx,DWORD PTR gs:[esi]
 1022ee9:	js     0x1022f2c
 1022eeb:	add    BYTE PTR [rbp+0x53],dl
 1022eee:	rex.RB push r10
 1022ef0:	xor    esi,DWORD PTR [rdx]
 1022ef2:	cs fs ins BYTE PTR es:[rdi],dx
 1022ef5:	ins    BYTE PTR es:[rdi],dx
 1022ef6:	add    BYTE PTR [rax],al
 1022ef8:	fild   DWORD PTR [rax]
 1022efa:	rex.R
 1022efb:	gs jb  0x1022f63
 1022efe:	imul   esi,DWORD PTR [ebx+0x74],0x76457265
 1022f06:	outs   dx,BYTE PTR gs:[rsi]
 1022f08:	je     0x1022f5d
 1022f0a:	outs   dx,DWORD PTR ds:[rsi]
 1022f0b:	jne    0x1022f7f
 1022f0d:	movsxd esp,DWORD PTR [rbp+0x0]
 1022f10:	add    DWORD PTR [rdx],0x52
 1022f13:	imul   esi,DWORD PTR gs:[ebx+0x74],0x76457265
 1022f1c:	outs   dx,BYTE PTR gs:[rsi]
 1022f1e:	je     0x1022f73
 1022f20:	outs   dx,DWORD PTR ds:[rsi]
 1022f21:	jne    0x1022f95
 1022f23:	movsxd esp,DWORD PTR [rbp+0x57]
 1022f26:	add    BYTE PTR [rax],al
 1022f28:	pop    QWORD PTR [rdx]
 1022f2a:	push   rdx
 1022f2b:	gs jo  0x1022f9d
 1022f2e:	jb     0x1022fa4
 1022f30:	rex.RB jbe 0x1022f98
 1022f33:	outs   dx,BYTE PTR ds:[rsi]
 1022f34:	je     0x1022f8d
 1022f36:	add    BYTE PTR [rax],al
 1022f38:	xor    BYTE PTR [rdx],al
 1022f3a:	push   rdx
 1022f3b:	gs rex.XB ins BYTE PTR es:[edi],dx
 1022f3f:	outs   dx,DWORD PTR ds:[rsi]
 1022f40:	jae    0x1022fa7
 1022f42:	rex.WXB
 1022f43:	gs jns 0x1022f46
 1022f46:	(bad)  
 1022f47:	add    dl,BYTE PTR [rdx+0x65]
 1022f4a:	addr32 rex.WRXB jo 0x1022fb3
 1022f4e:	outs   dx,BYTE PTR ds:[rsi]
 1022f4f:	rex.WXB
 1022f50:	gs jns 0x1022f98
 1022f53:	js     0x1022fac
 1022f55:	add    BYTE PTR [rsi+0x2],ch
 1022f58:	push   rdx
 1022f59:	gs addr32 push rcx
 1022f5c:	jne    0x1022fc3
 1022f5e:	jb     0x1022fd9
 1022f60:	push   rsi
 1022f61:	(bad)  
 1022f62:	ins    BYTE PTR es:[rdi],dx
 1022f63:	jne    0x1022fca
 1022f65:	rex.RB js 0x1022fbf
 1022f68:	add    BYTE PTR [rax],al
 1022f6a:	rex.B
 1022f6b:	rex.R push rsi
 1022f6d:	push   r8
 1022f6f:	xor    rsi,QWORD PTR [r10]
 1022f72:	cs fs ins BYTE PTR es:[rdi],dx
 1022f75:	ins    BYTE PTR es:[rdi],dx
 1022f76:	add    BYTE PTR [rax],al
 1022f78:	rol    BYTE PTR [rbx+rdx*2],0x6c
 1022f7c:	gs gs jo 0x1022f80
 1022f80:	out    dx,al
 1022f81:	add    BYTE PTR [rbp+0x6e],al
 1022f84:	movsxd ebp,DWORD PTR [rdi+0x64]
 1022f87:	gs push rax
 1022f89:	outs   dx,DWORD PTR ds:[rsi]
 1022f8a:	imul   ebp,DWORD PTR [rsi+0x74],0xcb007265
 1022f91:	add    BYTE PTR [rbp+riz*2+0x63],al
 1022f95:	outs   dx,DWORD PTR ds:[rsi]
 1022f96:	fs gs push rax
 1022f99:	outs   dx,DWORD PTR ds:[rsi]
 1022f9a:	imul   ebp,DWORD PTR [rsi+0x74],0xe2007265
 1022fa1:	add    al,0x55
 1022fa3:	outs   dx,BYTE PTR ds:[rsi]
 1022fa4:	push   0x6c646e61
 1022fa9:	gs fs rex.RB js 0x1023011
 1022fae:	gs jo  0x1023025
 1022fb1:	imul   ebp,DWORD PTR [rdi+0x6e],0x746c6946
 1022fb8:	gs jb  0x1022fbb
 1022fbb:	add    BYTE PTR [rdx],al
 1022fbd:	add    ecx,DWORD PTR [rcx+0x73]
 1022fc0:	rex.R
 1022fc1:	gs (bad) 
 1022fc3:	jne    0x102302c
 1022fc5:	addr32 gs jb 0x1023019
 1022fc9:	jb     0x1023030
 1022fcb:	jae    0x1023032
 1022fcd:	outs   dx,BYTE PTR ds:[rsi]
 1022fce:	je     0x1022fd0
 1022fd0:	es add al,0x52
 1022fd3:	je     0x1023041
 1022fd5:	push   rsi
 1022fd6:	imul   esi,DWORD PTR [rdx+0x74],0x556c6175
 1022fdd:	outs   dx,BYTE PTR ds:[rsi]
 1022fde:	ja     0x1023049
 1022fe0:	outs   dx,BYTE PTR ds:[rsi]
 1022fe1:	add    BYTE PTR fs:[rax],al
 1022fe4:	(bad)  
 1022fe5:	add    al,0x52
 1022fe7:	je     0x1023055
 1022fe9:	rex.WR outs dx,DWORD PTR ds:[rsi]
 1022feb:	outs   dx,DWORD PTR ds:[rsi]
 1022fec:	imul   esi,DWORD PTR [rbp+0x70],0x46
 1022ff0:	jne    0x1023060
 1022ff2:	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
 1022ff6:	outs   dx,BYTE PTR ds:[rsi]
 1022ff7:	rex.RB outs dx,BYTE PTR ds:[rsi]
 1022ff9:	je     0x102306d
 1022ffb:	jns    0x1022ffd
 1022ffd:	add    BYTE PTR [rax],bl
 1022fff:	add    al,0x52
 1023001:	je     0x102306f
 1023003:	rex.XB (bad) 
 1023005:	jo     0x102307b
 1023007:	jne    0x102307b
 1023009:	rex.XB outs dx,DWORD PTR gs:[rsi]
 102300c:	outs   dx,BYTE PTR ds:[rsi]
 102300d:	je     0x1023074
 102300f:	js     0x1023085
 1023011:	add    BYTE PTR [rcx+0x65755103],ch
 1023017:	jb     0x1023092
 1023019:	push   rax
 102301a:	gs jb  0x1023083
 102301d:	outs   dx,DWORD PTR ds:[rsi]
 102301e:	jb     0x102308d
 1023020:	(bad)  
 1023021:	outs   dx,BYTE PTR ds:[rsi]
 1023022:	movsxd esp,DWORD PTR [rbp+0x43]
 1023025:	outs   dx,DWORD PTR ds:[rsi]
 1023026:	jne    0x1023096
 1023028:	je     0x102308f
 102302a:	jb     0x102302c
 102302c:	(bad)  
 102302d:	add    al,BYTE PTR [rdi+0x65]
 1023030:	je     0x1023086
 1023032:	imul   esp,DWORD PTR [rbx+0x6b],0x6e756f43
 1023039:	je     0x102303b
 102303b:	add    bh,al
 102303d:	add    DWORD PTR [rdi+0x65],eax
 1023040:	je     0x1023085
 1023042:	jne    0x10230b6
 1023044:	jb     0x10230ab
 1023046:	outs   dx,BYTE PTR ds:[rsi]
 1023047:	je     0x1023099
 1023049:	jb     0x10230ba
 102304b:	movsxd esp,DWORD PTR [rbp+0x73]
 102304e:	jae    0x1023099
 1023050:	add    BYTE PTR fs:[rax+0x74654702],al
 1023057:	push   rbx
 1023058:	jns    0x10230cd
 102305a:	je     0x10230c1
 102305c:	ins    DWORD PTR es:[rdi],dx
 102305d:	push   rsp
 102305e:	imul   ebp,DWORD PTR [rbp+0x65],0x69467341
 1023065:	ins    BYTE PTR es:[rdi],dx
 1023066:	gs push rsp
 1023068:	imul   ebp,DWORD PTR [rbp+0x65],0x45011f00
 102306f:	js     0x10230da
 1023071:	je     0x10230c3
 1023073:	jb     0x10230e4
 1023075:	movsxd esp,DWORD PTR [rbp+0x73]
 1023078:	jae    0x102307a
 102307a:	movsxd eax,DWORD PTR [rcx]
 102307c:	rex.RX outs dx,DWORD PTR ds:[rsi]
 102307e:	jb     0x10230ed
 1023080:	(bad)  
 1023081:	je     0x10230d0
 1023083:	gs jae 0x10230f9
 1023086:	(bad)  
 1023087:	add    BYTE PTR gs:[r8d],al
 102308c:	add    DWORD PTR fs:[rsi+0x6f],eax
 1023090:	jb     0x10230ff
 1023092:	(bad)  
 1023093:	je     0x10230e2
 1023095:	gs jae 0x102310b
 1023098:	(bad)  
 1023099:	addr32 gs push rdi
 102309c:	add    BYTE PTR [rax],al
 102309e:	add    ecx,DWORD PTR [r15+rbp*2+0x61]
 10230a3:	imul   r12,QWORD PTR fs:[rdx+0x72],0x57797261
 10230ac:	add    BYTE PTR [rax],al
 10230ae:	lods   al,BYTE PTR ds:[rsi]
 10230af:	add    al,BYTE PTR [rdi+0x65]
 10230b2:	je     0x102310a
 10230b4:	gs jb  0x102312a
 10230b7:	imul   ebp,DWORD PTR [rdi+0x6e],0x577845
 10230be:	jae    0x10230c2
 10230c0:	rex.RXB
 10230c1:	gs je  0x1023117
 10230c4:	jns    0x1023139
 10230c6:	je     0x102312d
 10230c8:	ins    DWORD PTR es:[rdi],dx
 10230c9:	rex.R
 10230ca:	gs data16 (bad) 
 10230cd:	jne    0x102313b
 10230cf:	je     0x102311d
 10230d1:	(bad)  
 10230d2:	outs   dx,BYTE PTR ds:[rsi]
 10230d3:	addr32 rex.WB
 10230d5:	add    BYTE PTR [rax],r8b
 10230d8:	jb     0x10230dc
 10230da:	rex.RXB
 10230db:	gs je  0x1023131
 10230de:	jns    0x1023153
 10230e0:	je     0x1023147
 10230e2:	ins    DWORD PTR es:[rdi],dx
 10230e3:	rex.R
 10230e4:	gs data16 (bad) 
 10230e7:	jne    0x1023155
 10230e9:	je     0x1023137
 10230eb:	rex.XB
 10230ec:	rex.WB
 10230ed:	add    BYTE PTR [rax],r8b
 10230f0:	add    BYTE PTR [rbx+rdx*2],0x65
 10230f4:	je     0x1023142
 10230f6:	(bad)  
 10230f7:	jae    0x102316d
 10230f9:	rex.RB jb 0x102316e
 10230fc:	outs   dx,DWORD PTR ds:[rsi]
 10230fd:	jb     0x10230ff
 10230ff:	add    BYTE PTR [rdx+0x3],cl
 1023102:	rex.WR outs dx,DWORD PTR ds:[rsi]
 1023104:	movsxd esp,DWORD PTR [rcx+0x6c]
 1023107:	rex.RX jb 0x102316f
 102310a:	add    BYTE PTR gs:[rbp+0x65724300],bh
 1023111:	(bad)  
 1023112:	je     0x1023179
 1023114:	push   rsp
 1023115:	outs   dx,DWORD PTR ds:[rsi]
 1023116:	outs   dx,DWORD PTR ds:[rsi]
 1023117:	ins    BYTE PTR es:[rdi],dx
 1023118:	push   0x33706c65
 102311d:	xor    dl,BYTE PTR [rbx+0x6e]
 1023120:	(bad)  
 1023121:	jo     0x1023196
 1023123:	push   0x746f
 1023128:	pop    rdi
 1023129:	add    ecx,DWORD PTR [rbp+0x6f]
 102312c:	fs jne 0x102319b
 102312f:	xor    esi,DWORD PTR gs:[rdx]
 1023132:	rex.WRX
 1023133:	gs js  0x10231aa
 1023136:	push   rdi
 1023137:	add    BYTE PTR [rdx+0x2],bh
 102313a:	rex.RXB
 102313b:	gs je  0x1023191
 102313e:	jns    0x10231b3
 1023140:	je     0x10231a7
 1023142:	ins    DWORD PTR es:[rdi],dx
 1023143:	rex.WB outs dx,BYTE PTR ds:[rsi]
 1023145:	outs   dx,WORD PTR ds:[rsi]
 1023147:	add    ah,dh
 1023149:	add    bl,BYTE PTR [rdi+0x6c]
 102314c:	outs   dx,DWORD PTR ds:[rsi]
 102314d:	movsxd esp,DWORD PTR [rcx+0x6c]
 1023150:	je     0x10231bb
 1023152:	ins    DWORD PTR es:[rdi],dx
 1023153:	gs ss xor al,0x0
 1023157:	add    BYTE PTR [rdi],bh
 1023159:	add    al,0x5f
 102315b:	je     0x10231c6
 102315d:	ins    DWORD PTR es:[rdi],dx
 102315e:	gs ss xor al,0x0
 1023162:	sbb    BYTE PTR [rsi],al
 1023164:	ja     0x10231c9
 1023166:	jae    0x10231ce
 1023168:	je     0x10231d3
 102316a:	ins    DWORD PTR es:[rdi],dx
 102316b:	add    BYTE PTR gs:[rax],al
 102316e:	cwde   
 102316f:	add    al,0x5f
 1023171:	ja     0x10231d4
 1023173:	movsxd esp,DWORD PTR [rbx+0x65]
 1023176:	jae    0x10231eb
 1023178:	add    BYTE PTR [rax],al
 102317a:	icebp  
 102317b:	add    bl,BYTE PTR [rdi+0x6c]
 102317e:	outs   dx,DWORD PTR ds:[rsi]
 102317f:	movsxd esp,DWORD PTR [rcx+0x6c]
 1023182:	pop    rdi
 1023183:	jne    0x10231f3
 1023185:	ja     0x10231f0
 1023187:	outs   dx,BYTE PTR ds:[rsi]
 1023188:	fs add bl,bl
 102318b:	add    eax,0x63727473
 1023190:	jo     0x102320b
 1023192:	pop    rdi
 1023193:	jae    0x1023195
 1023195:	add    dh,dl
 1023197:	add    eax,0x63727473
 102319c:	(bad)  
 102319d:	je     0x10231fe
 102319f:	jae    0x10231a1
 10231a1:	add    BYTE PTR [rdx],dl
 10231a3:	(bad)  
 10231a4:	ja     0x1023209
 10231a6:	jae    0x102320b
 10231a8:	push   0x16000072
 10231ad:	(bad)  
 10231ae:	ja     0x1023213
 10231b0:	jae    0x1023215
 10231b2:	jo     0x102322d
 10231b4:	pop    rdi
 10231b5:	jae    0x10231b7
 10231b7:	add    bh,cl
 10231b9:	add    eax,0x69727073
 10231be:	outs   dx,BYTE PTR ds:[rsi]
 10231bf:	je     0x1023227
 10231c1:	pop    rdi
 10231c2:	jae    0x10231c4
 10231c4:	xor    al,BYTE PTR [rdi+rbx*2]
 10231c7:	jae    0x1023240
 10231c9:	jo     0x102323d
 10231cb:	imul   ebp,DWORD PTR [rsi+0x74],0x635f66
 10231d2:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 10231d3:	add    al,0x5f
 10231d5:	ja     0x102323a
 10231d7:	jae    0x1023242
 10231d9:	movsxd ebp,DWORD PTR [rbp+0x70]
 10231dc:	add    BYTE PTR [rax],al
 10231de:	mov    al,0x4
 10231e0:	pop    rdi
 10231e1:	ja     0x1023246
 10231e3:	jae    0x1023253
 10231e5:	imul   esp,DWORD PTR [rbx+0x6d],0x5f30070
 10231ec:	jae    0x1023265
 10231ee:	jae    0x1023253
 10231f0:	(bad)  
 10231f1:	outs   dx,BYTE PTR ds:[rsi]
 10231f2:	pop    di
 10231f4:	jae    0x10231f6
 10231f6:	test   eax,0x6d656d05
 10231fb:	movsxd esi,DWORD PTR [rax+0x79]
 10231fe:	add    BYTE PTR [rax],al
 1023200:	sub    BYTE PTR [rcx],al
 1023202:	pop    rdi
 1023203:	pop    rdi
 1023204:	rex.XB js 0x102327f
 1023207:	rex.RX jb 0x102326b
 102320a:	ins    DWORD PTR es:[rdi],dx
 102320b:	gs rex.W (bad) 
 102320e:	outs   dx,BYTE PTR ds:[rsi]
 102320f:	fs ins BYTE PTR es:[rdi],dx
 1023211:	gs jb  0x1023247
 1023214:	add    BYTE PTR [rax],al
 1023216:	sbb    al,0x6
 1023218:	ja     0x102327d
 102321a:	jae    0x102328a
 102321c:	movsxd ebp,DWORD PTR [rbp+0x70]
 102321f:	add    BYTE PTR [rsi+0x73765f04],al
 1023225:	outs   dx,BYTE PTR ds:[rsi]
 1023226:	ja     0x1023298
 1023228:	jb     0x1023293
 102322a:	outs   dx,BYTE PTR ds:[rsi]
 102322b:	je     0x1023293
 102322d:	pop    rdi
 102322e:	ins    BYTE PTR es:[rdi],dx
 102322f:	add    BYTE PTR [rax],al
 1023231:	add    BYTE PTR [rdi+0x65],al
 1023234:	je     0x1023279
 1023236:	rex.WRXB
 1023237:	rex.WRB push r8
 1023239:	(bad)  
 102323a:	je     0x10232a4
 102323c:	add    BYTE PTR [rax],al
 102323e:	sbb    eax,DWORD PTR [rax]
 1023240:	rex.RXB
 1023241:	gs je  0x1023297
 1023244:	push   rcx
 1023245:	rex.WR push rsi
 1023247:	gs jb  0x102329d
 102324a:	jo     0x10232b1
 102324c:	movsxd ebp,DWORD PTR [rcx+0x66]
 102324f:	imul   esp,DWORD PTR [rbx+0x52],0x74536765
 1023256:	jb     0x10232c1
 1023258:	outs   dx,BYTE PTR ds:[rsi]
 1023259:	add    BYTE PTR [eax],al
 102325c:	imul   ebp,DWORD PTR [rsi+0x73],0x69706174
 1023263:	xor    DWORD PTR [rcx],esi
 1023265:	xor    BYTE PTR [rsi],ch
 1023267:	fs ins BYTE PTR es:[rdi],dx
 1023269:	ins    BYTE PTR es:[rdi],dx
 102326a:	add    BYTE PTR [rax],al
 102326c:	add    BYTE PTR [rdx],al
 102326e:	rex.WR outs dx,DWORD PTR ds:[rsi]
 1023270:	(bad)  
 1023271:	fs push rbx
 1023273:	je     0x10232e7
 1023275:	imul   ebp,DWORD PTR [rsi+0x67],0x2640057
 102327c:	push   rdx
 102327d:	gs addr32 rex.WRXB jo 0x10232e7
 1023282:	outs   dx,BYTE PTR ds:[rsi]
 1023283:	rex.WXB
 1023284:	gs jns 0x10232de
 1023287:	add    BYTE PTR [rcx+0x5],ah
 102328a:	ins    BYTE PTR es:[rdi],dx
 102328b:	jae    0x1023301
 102328d:	jb     0x10232fb
 102328f:	outs   dx,BYTE PTR gs:[rsi]
 1023291:	push   rdi
 1023292:	add    BYTE PTR [rax],al
 1023294:	gs add al,0x53
 1023297:	gs je  0x10232df
 102329a:	outs   dx,BYTE PTR ds:[rsi]
 102329b:	jbe    0x1023306
 102329d:	jb     0x102330e
 102329f:	outs   dx,BYTE PTR ds:[rsi]
 10232a0:	ins    DWORD PTR es:[rdi],dx
 10232a1:	outs   dx,BYTE PTR gs:[rsi]
 10232a3:	je     0x10232fb
 10232a5:	(bad)  
 10232a6:	jb     0x1023311
 10232a8:	(bad)  
 10232a9:	(bad)  
 10232aa:	ins    BYTE PTR es:[rdi],dx
 10232ab:	gs push rdi
 10232ad:	add    bl,ah
 10232af:	add    DWORD PTR [rdi+0x65],eax
 10232b2:	je     0x10232f9
 10232b4:	outs   dx,BYTE PTR ds:[rsi]
 10232b5:	jbe    0x1023320
 10232b7:	jb     0x1023328
 10232b9:	outs   dx,BYTE PTR ds:[rsi]
 10232ba:	ins    DWORD PTR es:[rdi],dx
 10232bb:	outs   dx,BYTE PTR gs:[rsi]
 10232bd:	je     0x1023315
 10232bf:	(bad)  
 10232c0:	jb     0x102332b
 10232c2:	(bad)  
 10232c3:	(bad)  
 10232c4:	ins    BYTE PTR es:[rdi],dx
 10232c5:	gs push rdi
 10232c7:	add    BYTE PTR [rax+rax*1+0x43],ah
 10232cb:	outs   dx,DWORD PTR ds:[rsi]
 10232cc:	ins    DWORD PTR es:[rdi],dx
 10232cd:	jo     0x1023330
 10232cf:	jb     0x1023336
 10232d1:	push   rbx
 10232d2:	je     0x1023346
 10232d4:	imul   ebp,DWORD PTR [rsi+0x67],0xd3000057
 10232db:	add    cl,BYTE PTR [rax+0x65]
 10232de:	(bad)  
 10232df:	jo     0x1023322
 10232e1:	ins    BYTE PTR es:[rdi],dx
 10232e2:	ins    BYTE PTR es:[rdi],dx
 10232e3:	outs   dx,DWORD PTR ds:[rsi]
 10232e4:	movsxd eax,DWORD PTR [rax]
 10232e6:	xlat   BYTE PTR ds:[rbx]
 10232e7:	add    cl,BYTE PTR [rax+0x65]
 10232ea:	(bad)  
 10232eb:	jo     0x1023333
 10232ed:	jb     0x1023354
 10232ef:	add    BYTE PTR gs:[rax],al
 10232f2:	fiadd  DWORD PTR [rdx]
 10232f4:	rex.W
 10232f5:	gs (bad) 
 10232f7:	jo     0x102334b
 10232f9:	gs rex.B ins BYTE PTR es:[rdi],dx
 10232fc:	ins    BYTE PTR es:[rdi],dx
 10232fd:	outs   dx,DWORD PTR ds:[rsi]
 10232fe:	movsxd eax,DWORD PTR [rax]
 1023300:	push   rcx
 1023301:	add    al,BYTE PTR [rdi+0x65]
 1023304:	je     0x1023356
 1023306:	jb     0x1023377
 1023308:	movsxd esp,DWORD PTR [rbp+0x73]
 102330b:	jae    0x1023355
 102330d:	gs (bad) 
 102330f:	jo     0x1023311
 1023311:	add    BYTE PTR [rax],al
 1023313:	add    eax,0x74726956
 1023318:	jne    0x102337b
 102331a:	ins    BYTE PTR es:[rdi],dx
 102331b:	push   rcx
 102331c:	jne    0x1023383
 102331e:	jb     0x1023399
 1023320:	add    BYTE PTR [rax],al
 1023322:	enter  0x4400,0x65
 1023326:	(bad)  
 1023327:	jne    0x1023390
 1023329:	rex.X jb 0x1023391
 102332c:	(bad)  
 102332d:	imul   eax,DWORD PTR [rax],0x0
 1023330:	and    eax,DWORD PTR [rcx]
 1023332:	rex.RB js 0x10233a5
 1023335:	(bad)  
 1023336:	outs   dx,BYTE PTR ds:[rsi]
 1023337:	rex.RB outs dx,BYTE PTR fs:[rsi]
 102333a:	jbe    0x10233a5
 102333c:	jb     0x10233ad
 102333e:	outs   dx,BYTE PTR ds:[rsi]
 102333f:	ins    DWORD PTR es:[rdi],dx
 1023340:	outs   dx,BYTE PTR gs:[rsi]
 1023342:	je     0x1023397
 1023344:	je     0x10233b8
 1023346:	imul   ebp,DWORD PTR [rsi+0x67],0x49005773
 102334d:	add    al,BYTE PTR [rdi+0x65]
 1023350:	je     0x10233a2
 1023352:	jb     0x10233bd
 1023354:	jbe    0x10233b7
 1023356:	je     0x10233bd
 1023358:	push   rax
 1023359:	jb     0x10233ca
 102335b:	imul   bp,WORD PTR [rbp+riz*2+0x53],0x7274
 1023362:	imul   ebp,DWORD PTR [rsi+0x67],0xf1000057
 1023369:	add    DWORD PTR [rdi+0x65],eax
 102336c:	je     0x10233b4
 102336e:	imul   ebp,DWORD PTR [rbp+riz*2+0x41],0x69727474
 1023376:	(bad)  
 1023377:	jne    0x10233ed
 1023379:	gs jae 0x10233d3
 102337c:	add    BYTE PTR [rax],al
 102337e:	(bad)  
 102337f:	add    DWORD PTR [rdi+0x43],ebx
 1023382:	js     0x10233fc
 1023384:	push   rsp
 1023385:	push   0x45776f72
 102338a:	js     0x10233ef
 102338c:	gs jo  0x1023403
 102338f:	imul   ebp,DWORD PTR [rdi+0x6e],0x4380000
 1023396:	pop    rdi
 1023397:	jae    0x1023410
 1023399:	jae    0x10233fe
 102339b:	(bad)  
 102339c:	outs   dx,BYTE PTR ds:[rsi]
 102339d:	pop    di
 102339f:	jae    0x1023400
 10233a1:	ins    BYTE PTR es:[rdi],dx
 10233a2:	add    BYTE PTR [rax],al
 10233a4:	out    dx,al
 10233a5:	add    BYTE PTR [rdi],bh
 10233a7:	pop    rdi
 10233a8:	je     0x1023423
 10233aa:	jo     0x1023411
 10233ac:	pop    rdi
 10233ad:	imul   ebp,DWORD PTR [rsi+0x66],0x74645f6f
 10233b4:	outs   dx,DWORD PTR ds:[rsi]
 10233b5:	jb     0x1023416
 10233b7:	imul   ebp,DWORD PTR [rsi+0x74],0x616e7265
 10233be:	ins    BYTE PTR es:[rdi],dx
 10233bf:	pop    rdi
 10233c0:	ins    DWORD PTR es:[rdi],dx
 10233c1:	gs je  0x102342c
 10233c4:	outs   dx,DWORD PTR ds:[rsi]
 10233c5:	fs rex je 0x1023442
 10233c9:	jo     0x1023430
 10233cb:	pop    rdi
 10233cc:	imul   ebp,DWORD PTR [rsi+0x66],0x5140406f
 10233d3:	rex.RB
 10233d4:	rex.B
 10233d5:	pop    r8
 10233d7:	pop    rax
 10233d8:	pop    rdx
 10233d9:	add    bl,bh
 10233db:	add    al,0x56
 10233dd:	imul   esi,DWORD PTR [rdx+0x74],0x466c6175
 10233e4:	jb     0x102344b
 10233e6:	gs add ch,dl
 10233e9:	add    cl,BYTE PTR [rax+0x65]
 10233ec:	(bad)  
 10233ed:	jo     0x1023432
 10233ef:	jb     0x1023456
 10233f1:	(bad)  
 10233f2:	je     0x1023459
 10233f4:	add    BYTE PTR [rax],al
 10233f6:	mov    BYTE PTR [rbx],0x52
 10233f9:	gs (bad) 
 10233fb:	fs push rax
 10233fd:	jb     0x102346e
 10233ff:	movsxd esp,DWORD PTR [rbp+0x73]
 1023402:	jae    0x1023451
 1023404:	gs ins DWORD PTR es:[rdi],dx
 1023406:	outs   dx,DWORD PTR ds:[rsi]
 1023407:	jb     0x1023482
 1023409:	add    ch,bh
 102340b:	add    edx,DWORD PTR [rdx+0x65]
 102340e:	ins    BYTE PTR es:[rdi],dx
 102340f:	gs (bad) 
 1023411:	jae    0x1023478
 1023413:	rex.WRB jne 0x102348a
 1023416:	gs js  0x1023419
 1023419:	add    BYTE PTR [rbp+0x4],bh
 102341c:	push   rbx
 102341d:	gs je  0x1023468
 1023420:	(bad)  
 1023421:	outs   dx,BYTE PTR ds:[rsi]
 1023422:	fs ins BYTE PTR es:[rdi],dx
 1023424:	rex.WB outs dx,BYTE PTR gs:[rsi]
 1023427:	outs   dx,WORD PTR ds:[rsi]
 1023429:	jb     0x1023498
 102342b:	(bad)  
 102342c:	je     0x1023497
 102342e:	outs   dx,DWORD PTR ds:[rsi]
 102342f:	outs   dx,BYTE PTR ds:[rsi]
 1023430:	add    BYTE PTR [rax],al
 1023432:	sahf   
 1023433:	add    BYTE PTR [rbx+0x72],al
 1023436:	gs (bad) 
 1023438:	je     0x102349f
 102343a:	rex.WRB jne 0x10234b1
 102343d:	gs js  0x1023497
 1023440:	add    BYTE PTR [rax],al
 1023442:	out    0x1,al
 1023444:	rex.RXB
 1023445:	gs je  0x102348d
 1023448:	js     0x10234b3
 102344a:	je     0x102348f
 102344c:	outs   dx,DWORD PTR ds:[rsi]
 102344d:	fs gs push rax
 1023450:	jb     0x10234c1
 1023452:	movsxd esp,DWORD PTR [rbp+0x73]
 1023455:	jae    0x1023457
 1023457:	add    BYTE PTR [rax+0x65724300],ch
 102345d:	(bad)  
 102345e:	je     0x10234c5
 1023460:	push   rax
 1023461:	jb     0x10234d2
 1023463:	movsxd esp,DWORD PTR [rbp+0x73]
 1023466:	jae    0x10234bf
 1023468:	add    BYTE PTR [rax],al
 102346a:	push   0x2
 102346c:	rex.RXB
 102346d:	gs je  0x10234c3
 1023470:	je     0x10234d3
 1023472:	jb     0x10234e8
 1023474:	jne    0x10234e6
 1023476:	rex.WB outs dx,BYTE PTR ds:[rsi]
 1023478:	outs   dx,WORD PTR ds:[rsi]
 102347a:	push   rdi
 102347b:	add    BYTE PTR [rsi+0x74655304],ah
 1023481:	push   rsp
 1023482:	push   0x64616572
 1023487:	push   rax
 1023488:	jb     0x10234f3
 102348a:	outs   dx,DWORD PTR ds:[rsi]
 102348b:	jb     0x10234f6
 102348d:	je     0x1023508
 102348f:	add    BYTE PTR [rbp+0x74654702],dl
 1023495:	push   rsp
 1023496:	push   0x64616572
 102349b:	push   rax
 102349c:	jb     0x1023507
 102349e:	outs   dx,DWORD PTR ds:[rsi]
 102349f:	jb     0x102350a
 10234a1:	je     0x102351c
 10234a3:	add    dl,cl
 10234a5:	add    DWORD PTR [rdi+0x65],eax
 10234a8:	je     0x10234ed
 10234aa:	jne    0x102351e
 10234ac:	jb     0x1023513
 10234ae:	outs   dx,BYTE PTR ds:[rsi]
 10234af:	je     0x1023505
 10234b1:	push   0x64616572
 10234b6:	add    BYTE PTR [rax],al
 10234b8:	in     eax,dx
 10234b9:	add    al,0x5f
 10234bb:	ja     0x102352a
 10234bd:	(bad)  
 10234be:	imul   esp,DWORD PTR [rbp+0x70],0x61
 10234c2:	je     0x102352c
 10234c4:	pop    rdi
 10234c5:	jae    0x10234c7
 10234c7:	add    BYTE PTR [rdi],cl
 10234c9:	add    eax,0x7073775f
 10234ce:	ins    BYTE PTR es:[rdi],dx
 10234cf:	imul   esi,DWORD PTR [rax+rsi*2+0x61],0x735f6874
	...
 10234e3:	add    dl,ch
 10234e5:	repnz xor eax,0x4f
 10234eb:	add    BYTE PTR [rsi*1+0x10002],bl
 10234f2:	add    BYTE PTR [rax],al
 10234f4:	add    al,BYTE PTR [rax]
 10234f6:	add    BYTE PTR [rax],al
 10234f8:	add    al,BYTE PTR [rax]
 10234fa:	add    BYTE PTR [rax],al
 10234fc:	or     BYTE PTR [rip+0x35100002],dh        # 0x36123504
 1023502:	add    al,BYTE PTR [rax]
 1023504:	sbb    BYTE PTR [rip+0xffffffff94800002],dh        # 0xffffffff9582350c
 102350a:	add    DWORD PTR [rax],eax
 102350c:	xor    BYTE PTR [rbp+0x35280001],dl
 1023512:	add    al,BYTE PTR [rax]
 1023514:	cmp    esi,DWORD PTR [rip+0x2]        # 0x102351c
 102351a:	add    DWORD PTR [rax],eax
 102351c:	imul   esi,DWORD PTR fs:[rbx+0x74],0x2e626972
 1023524:	gs js  0x102358c
 1023527:	add    BYTE PTR [rbp+rbp*2+0x70],al
 102352b:	rex.RXB
 102352c:	gs je  0x1023572
 102352f:	ins    BYTE PTR es:[rdi],dx
 1023530:	imul   esp,DWORD PTR [rbp+0x6e],0x70784574
 1023537:	outs   dx,DWORD PTR ds:[rsi]
 1023538:	jb     0x10235ae
 102353a:	add    BYTE PTR [rbp+rbp*2+0x70],al
 102353e:	push   rdx
 102353f:	gs ins DWORD PTR es:[rdi],dx
 1023541:	outs   dx,DWORD PTR ds:[rsi]
 1023542:	je     0x10235a9
 1023544:	rex.R jne 0x10235b4
 1023547:	jo     0x102359b
 1023549:	gs jno 0x10235c1
 102354c:	gs jae 0x10235c3
	...

Disassembly of section .data:

0000000001024000 <.data>:
 1024000:	add    BYTE PTR [rax],al
 1024002:	add    BYTE PTR [rax],al
 1024004:	add    BYTE PTR [rcx],al
	...
 10240fe:	add    BYTE PTR [rax],al
 1024100:	and    BYTE PTR [rbx],bl
 1024102:	add    BYTE PTR [rcx],al
 1024104:	add    BYTE PTR [rax],al
 1024106:	add    BYTE PTR [rax],al
 1024108:	nop
 1024109:	jae    0x102410b
 102410b:	add    DWORD PTR [rax],eax
 102410d:	add    BYTE PTR [rax],al
 102410f:	add    BYTE PTR [rax+0x10073],dh
 1024115:	add    BYTE PTR [rax],al
 1024117:	add    BYTE PTR [rax+0x74],dh
 102411a:	add    BYTE PTR [rcx],al
	...
 1024130:	xor    BYTE PTR [rbx+0x0],0x1
 1024134:	add    BYTE PTR [rax],al
 1024136:	add    BYTE PTR [rax],al
 1024138:	jo     0x10241ad
 102413a:	add    BYTE PTR [rcx],al
 102413c:	add    BYTE PTR [rax],al
 102413e:	add    BYTE PTR [rax],al
 1024140:	(bad)  
 1024141:	jae    0x1024143
 1024143:	add    DWORD PTR [rax],eax
 1024145:	add    BYTE PTR [rax],al
 1024147:	add    BYTE PTR [rax],dh
 1024149:	sbb    eax,DWORD PTR [rax]
 102414b:	add    DWORD PTR [rax],eax
 102414d:	add    BYTE PTR [rax],al
 102414f:	add    BYTE PTR [rax+0x10073],dl
 1024155:	add    BYTE PTR [rax],al
 1024157:	add    BYTE PTR [rax+0x10073],dh
 102415d:	add    BYTE PTR [rax],al
 102415f:	add    BYTE PTR [rax+0x74],dh
 1024162:	add    BYTE PTR [rcx],al
	...
 1024178:	xor    BYTE PTR [rbx+0x0],0x1
 102417c:	add    BYTE PTR [rax],al
 102417e:	add    BYTE PTR [rax],al
 1024180:	jo     0x10241f5
 1024182:	add    BYTE PTR [rcx],al
 1024184:	add    BYTE PTR [rax],al
 1024186:	add    BYTE PTR [rax],al
 1024188:	(bad)  
 1024189:	jae    0x102418b
 102418b:	add    DWORD PTR [rax],eax
	...
 10241dd:	add    BYTE PTR [rax],al
 10241df:	add    BYTE PTR [rax],ah
 10241e1:	sbb    eax,DWORD PTR [rax]
 10241e3:	add    DWORD PTR [rax],eax
 10241e5:	add    BYTE PTR [rax],al
 10241e7:	add    BYTE PTR [rax+0x10073],dl
 10241ed:	add    BYTE PTR [rax],al
 10241ef:	add    BYTE PTR [rax+0x10073],dh
 10241f5:	add    BYTE PTR [rax],al
 10241f7:	add    BYTE PTR [rax+0x74],dh
 10241fa:	add    BYTE PTR [rcx],al
	...
 1024210:	xor    BYTE PTR [rbx+0x0],0x1
 1024214:	add    BYTE PTR [rax],al
 1024216:	add    BYTE PTR [rax],al
 1024218:	jo     0x102428d
 102421a:	add    BYTE PTR [rcx],al
 102421c:	add    BYTE PTR [rax],al
 102421e:	add    BYTE PTR [rax],al
 1024220:	(bad)  
 1024221:	jae    0x1024223
 1024223:	add    DWORD PTR [rax],eax
	...
 102426d:	add    BYTE PTR [rax],al
 102426f:	add    BYTE PTR [rax],ah
 1024271:	sbb    eax,DWORD PTR [rax]
 1024273:	add    DWORD PTR [rax],eax
 1024275:	add    BYTE PTR [rax],al
 1024277:	add    BYTE PTR [rax],al
 1024279:	sbb    eax,DWORD PTR [rax]
 102427b:	add    DWORD PTR [rax],eax
 102427d:	add    BYTE PTR [rax],al
 102427f:	add    BYTE PTR [rcx],al
	...
 10242a5:	add    BYTE PTR [rax],al
 10242a7:	add    BYTE PTR [rax],dl
 10242a9:	push   rbx
 10242aa:	add    al,BYTE PTR [rcx]
 10242ac:	add    BYTE PTR [rax],al
 10242ae:	add    BYTE PTR [rax],al
 10242b0:	cmp    BYTE PTR [rbx+0x2],dl
 10242b3:	add    DWORD PTR [rax],eax
 10242b5:	add    BYTE PTR [rax],al
 10242b7:	add    BYTE PTR [rax+0x1001c],dh
 10242bd:	add    BYTE PTR [rax],al
 10242bf:	add    BYTE PTR [rax],al
 10242c1:	add    BYTE PTR [rax],al
 10242c3:	(bad)  
 10242c4:	add    BYTE PTR [rax],al
 10242c6:	add    BYTE PTR [rax],al
 10242c8:	add    BYTE PTR [rax],al
 10242ca:	add    BYTE PTR [rax+0x0],ah
	...
 10242d9:	add    BYTE PTR [rax],al
 10242db:	(bad)  
 10242dc:	add    BYTE PTR [rax],al
 10242de:	add    BYTE PTR [rax],al
 10242e0:	lock add r8b,BYTE PTR [rcx]
 10242e4:	add    BYTE PTR [rax],al
 10242e6:	add    BYTE PTR [rax],al
 10242e8:	sub    BYTE PTR [rbx+0x2],al
 10242eb:	add    DWORD PTR [rax],eax
 10242ed:	add    BYTE PTR [rax],al
 10242ef:	add    BYTE PTR [rax+0x10243],ah
 10242f5:	add    BYTE PTR [rax],al
 10242f7:	add    BYTE PTR [rax+0x43],dh
 10242fa:	add    al,BYTE PTR [rcx]
 10242fc:	add    BYTE PTR [rax],al
 10242fe:	add    BYTE PTR [rax],al
 1024300:	rex
 1024301:	rex.XB add al,BYTE PTR [r9]
 1024304:	add    BYTE PTR [rax],al
 1024306:	add    BYTE PTR [rax],al
 1024308:	mov    eax,0x10243
 102430d:	add    BYTE PTR [rax],al
 102430f:	add    al,dl
 1024311:	rex.XB add al,BYTE PTR [r9]
 1024314:	add    BYTE PTR [rax],al
 1024316:	add    BYTE PTR [rax],al
 1024318:	call   0x1034560
 102431d:	add    BYTE PTR [rax],al
 102431f:	add    BYTE PTR [rax+0x43],bl
 1024322:	add    al,BYTE PTR [rcx]
	...
 102432c:	add    BYTE PTR [rax],al
 102432e:	rex.W add BYTE PTR [rcx],al
 1024331:	add    BYTE PTR [rax],al
 1024333:	add    BYTE PTR [rax],al
 1024335:	add    BYTE PTR [rax],al
 1024337:	add    BYTE PTR [rax+0x10244],ch
 102433d:	add    BYTE PTR [rax],al
 102433f:	add    BYTE PTR [rbx],al
 1024341:	add    BYTE PTR [rax],al
 1024343:	add    BYTE PTR [rax],al
 1024345:	add    BYTE PTR [rax],dh
	...
 1024357:	add    BYTE PTR [rdi],al
 1024359:	add    BYTE PTR [rax],al
 102435b:	add    BYTE PTR [rax],al
 102435d:	add    BYTE PTR [rax],ah
	...
 102436f:	add    BYTE PTR [rdx],al
 1024371:	add    BYTE PTR [rax],al
 1024373:	add    BYTE PTR [rax],al
 1024375:	add    BYTE PTR [rax],bh
	...
 1024387:	add    al,dh
 1024389:	add    r8b,BYTE PTR [rcx]
 102438c:	add    BYTE PTR [rax],al
 102438e:	add    BYTE PTR [rax],al
 1024390:	movabs al,ds:0x100ad
 1024399:	add    BYTE PTR [rax],al
 102439b:	add    BYTE PTR [rax],al
 102439d:	add    BYTE PTR [rax],al
 102439f:	add    BYTE PTR [rcx],al
 10243a1:	add    BYTE PTR [rax],al
 10243a3:	add    BYTE PTR [rax],al
 10243a5:	add    BYTE PTR [rax+0x0],cl
	...
 10243b8:	add    al,0x0
 10243ba:	add    BYTE PTR [rax],al
 10243bc:	add    BYTE PTR [rax],al
 10243be:	push   rax
	...
 10243cf:	add    BYTE PTR [rip+0x0],al        # 0x10243d5
 10243d5:	add    BYTE PTR [rax+0x0],ah
	...
 10243e8:	(bad)  
 10243e9:	add    BYTE PTR [rax],al
 10243eb:	add    BYTE PTR [rax],al
 10243ed:	add    BYTE PTR [rax],ch
	...
 1024403:	(bad)  
 1024404:	add    BYTE PTR [rax],al
 1024406:	add    BYTE PTR [rax],al
 1024408:	add    BYTE PTR [rax],al
 102440a:	add    BYTE PTR [rax+0x0],ah
	...
 1024419:	add    BYTE PTR [rax],al
 102441b:	(bad)  
 102441c:	add    BYTE PTR [rax],al
 102441e:	add    BYTE PTR [rax],al
 1024420:	add    BYTE PTR [rax+0x0],al
 1024423:	(bad)  
 1024424:	add    BYTE PTR [rax],al
 1024426:	add    BYTE PTR [rax],al
 1024428:	or     BYTE PTR [rdi],bl
 102442a:	add    BYTE PTR [rcx],al
 102442c:	add    BYTE PTR [rax],al
 102442e:	add    BYTE PTR [rax],al
 1024430:	rcr    BYTE PTR [rip+0x100],1        # 0x1024536
 1024436:	add    BYTE PTR [rax],al
 1024438:	sbb    BYTE PTR [rdi],bl
 102443a:	add    BYTE PTR [rcx],al
 102443c:	add    BYTE PTR [rax],al
 102443e:	add    BYTE PTR [rax],al
 1024440:	add    DWORD PTR [rax],eax
 1024442:	add    BYTE PTR [rax],al
 1024444:	add    BYTE PTR [rax],al
 1024446:	add    BYTE PTR [rax],al
 1024448:	add    BYTE PTR [rax+rax*1],dl
 102444b:	(bad)  
 102444c:	add    BYTE PTR [rax],al
 102444e:	add    BYTE PTR [rax],al
 1024450:	rex (bad) 
 1024452:	add    BYTE PTR [rcx],al
 1024454:	add    BYTE PTR [rax],al
 1024456:	add    BYTE PTR [rax],al
 1024458:	add    DWORD PTR [rax],eax
 102445a:	add    BYTE PTR [rax],al
 102445c:	add    BYTE PTR [rax],al
 102445e:	add    BYTE PTR [rax],al
 1024460:	push   rax
 1024461:	(bad)  
 1024462:	add    BYTE PTR [rcx],al
 1024464:	add    BYTE PTR [rax],al
 1024466:	add    BYTE PTR [rax],al
 1024468:	add    al,BYTE PTR [rax]
 102446a:	add    BYTE PTR [rax],al
 102446c:	add    BYTE PTR [rax],al
 102446e:	add    BYTE PTR [rax],al
 1024470:	add    BYTE PTR [rax+rax*1],al
 1024473:	xor    BYTE PTR [rax],al
 1024475:	add    BYTE PTR [rax],al
 1024477:	add    BYTE PTR [rax+0x1001f],al
 102447d:	add    BYTE PTR [rax],al
 102447f:	add    BYTE PTR [rbx],al
 1024481:	add    BYTE PTR [rax],al
 1024483:	add    BYTE PTR [rax],al
 1024485:	add    BYTE PTR [rax],al
 1024487:	add    BYTE PTR [rax+0x1001f],dl
 102448d:	add    BYTE PTR [rax],al
 102448f:	add    BYTE PTR [rbx],al
	...
 10244a5:	add    BYTE PTR [rax],al
 10244a7:	add    BYTE PTR [rdx],cl
 10244a9:	add    BYTE PTR [rax],al
 10244ab:	add    bh,bh
 10244ad:	add    eax,DWORD PTR [rax]
 10244af:	add    BYTE PTR [rax+0x1001f],ch
 10244b5:	add    BYTE PTR [rax],al
 10244b7:	add    al,ah
 10244b9:	sbb    eax,DWORD PTR [rax]
 10244bb:	add    DWORD PTR [rax],eax
	...
 10244c5:	add    BYTE PTR [rax],al
 10244c7:	add    BYTE PTR [rbx],al
 10244c9:	add    BYTE PTR [rax],al
 10244cb:	add    BYTE PTR [rax],al
 10244cd:	add    BYTE PTR [rax],al
 10244cf:	add    al,al
 10244d1:	push   rbx
 10244d2:	add    al,BYTE PTR [rcx]
 10244d4:	add    BYTE PTR [rax],al
 10244d6:	add    BYTE PTR [rax],al
 10244d8:	and    BYTE PTR [rdx+rax*1+0x1],al
	...
 10244f0:	or     al,BYTE PTR [rax]
 10244f2:	add    BYTE PTR [rax],al
 10244f4:	inc    DWORD PTR [rbx]
 10244f6:	add    BYTE PTR [rax+0x1001e40],al
 10244fc:	add    BYTE PTR [rax],al
 10244fe:	add    BYTE PTR [rax],al
 1024500:	push   rax
 1024501:	(bad)  
 1024502:	add    BYTE PTR [rcx],al
 1024504:	add    BYTE PTR [rax],al
 1024506:	add    BYTE PTR [rax],al
 1024508:	add    eax,0x0
 102450d:	add    BYTE PTR [rax],al
 102450f:	add    ah,dh
 1024511:	fcmovb st,st(6)
 1024513:	mov    edx,0x480ef8c5
 1024518:	lods   eax,DWORD PTR ds:[rsi]
 1024519:	adc    ch,BYTE PTR [rdi+0x5f]
 102451c:	movabs al,ds:0x1001ee0cdc0cb
	...
 102454d:	add    BYTE PTR [rax],al
 102454f:	add    BYTE PTR [rax],cl
 1024551:	add    BYTE PTR [rax],al
 1024553:	add    BYTE PTR [rax],al
 1024555:	add    BYTE PTR [rax+0x0],bl
 1024558:	add    al,BYTE PTR [rax]
 102455a:	add    BYTE PTR [rax],al
 102455c:	add    BYTE PTR [rax],al
 102455e:	add    BYTE PTR [rax],al
 1024560:	lock add r8b,BYTE PTR [rcx]
 1024564:	add    BYTE PTR [rax],al
 1024566:	add    BYTE PTR [rax],al
 1024568:	xor    BYTE PTR [rcx+0x2],dl
 102456b:	add    DWORD PTR [rax],eax
 102456d:	add    BYTE PTR [rax],al
 102456f:	add    BYTE PTR [rdx],cl
 1024571:	add    BYTE PTR [rax],al
 1024573:	add    BYTE PTR [rax],al
 1024575:	add    BYTE PTR [rax],al
 1024577:	add    al,bl
 1024579:	and    BYTE PTR [rax],al
 102457b:	add    DWORD PTR [rax],eax
 102457d:	add    BYTE PTR [rax],al
 102457f:	add    BYTE PTR [rax+0x100f7],dl
 1024585:	add    BYTE PTR [rax],al
 1024587:	add    BYTE PTR [rax-0x8],dh
 102458a:	add    BYTE PTR [rcx],al
 102458c:	add    BYTE PTR [rax],al
 102458e:	add    BYTE PTR [rax],al
 1024590:	and    cl,bh
 1024592:	add    BYTE PTR [rcx],al
 1024594:	add    BYTE PTR [rax],al
 1024596:	add    BYTE PTR [rax],al
 1024598:	push   rax
 1024599:	stc    
 102459a:	add    BYTE PTR [rcx],al
 102459c:	add    BYTE PTR [rax],al
 102459e:	add    BYTE PTR [rax],al
 10245a0:	sar    cl,0x0
 10245a3:	add    DWORD PTR [rax],eax
 10245a5:	add    BYTE PTR [rax],al
 10245a7:	add    BYTE PTR [rax-0x6],al
 10245aa:	add    BYTE PTR [rcx],al
 10245ac:	add    BYTE PTR [rax],al
 10245ae:	add    BYTE PTR [rax],al
 10245b0:	xor    ah,bh
 10245b2:	add    BYTE PTR [rcx],al
 10245b4:	add    BYTE PTR [rax],al
 10245b6:	add    BYTE PTR [rax],al
 10245b8:	mov    al,0xfa
 10245ba:	add    BYTE PTR [rcx],al
 10245bc:	add    BYTE PTR [rax],al
 10245be:	add    BYTE PTR [rax],al
 10245c0:	rex cld 
 10245c2:	add    BYTE PTR [rcx],al
 10245c4:	add    BYTE PTR [rax],al
 10245c6:	add    BYTE PTR [rax],al
 10245c8:	push   rax
 10245c9:	cld    
 10245ca:	add    BYTE PTR [rcx],al
 10245cc:	add    BYTE PTR [rax],al
 10245ce:	add    BYTE PTR [rax],al
 10245d0:	(bad)  
 10245d1:	cld    
 10245d2:	add    BYTE PTR [rcx],al
 10245d4:	add    BYTE PTR [rax],al
 10245d6:	add    BYTE PTR [rax],al
 10245d8:	add    al,BYTE PTR [rax]
 10245da:	add    BYTE PTR [rax],al
 10245dc:	add    BYTE PTR [rax],al
 10245de:	add    BYTE PTR [rax],al
 10245e0:	or     al,BYTE PTR [rax]
 10245e2:	add    BYTE PTR [rax],al
 10245e4:	add    BYTE PTR [rax],al
 10245e6:	add    BYTE PTR [rax],al
 10245e8:	clc    
 10245e9:	and    BYTE PTR [rax],al
 10245eb:	add    DWORD PTR [rax],eax
 10245ed:	add    BYTE PTR [rax],al
 10245ef:	add    al,dl
 10245f1:	cli    
 10245f2:	add    BYTE PTR [rcx],al
 10245f4:	add    BYTE PTR [rax],al
 10245f6:	add    BYTE PTR [rax],al
 10245f8:	cmp    bl,0x0
 10245fb:	add    DWORD PTR [rax],eax
 10245fd:	add    BYTE PTR [rax],al
 10245ff:	add    al,ah
 1024601:	sti    
 1024602:	add    BYTE PTR [rcx],al
 1024604:	add    BYTE PTR [rax],al
 1024606:	add    BYTE PTR [rax],al
 1024608:	lock sti 
 102460a:	add    BYTE PTR [rcx],al
 102460c:	add    BYTE PTR [rax],al
 102460e:	add    BYTE PTR [rax],al
 1024610:	add    ah,bh
 1024612:	add    BYTE PTR [rcx],al
 1024614:	add    BYTE PTR [rax],al
 1024616:	add    BYTE PTR [rax],al
 1024618:	adc    ah,bh
 102461a:	add    BYTE PTR [rcx],al
 102461c:	add    BYTE PTR [rax],al
 102461e:	add    BYTE PTR [rax],al
 1024620:	xor    ah,bh
 1024622:	add    BYTE PTR [rcx],al
 1024624:	add    BYTE PTR [rax],al
 1024626:	add    BYTE PTR [rax],al
 1024628:	jo     0x1024626
 102462a:	add    BYTE PTR [rcx],al
 102462c:	add    BYTE PTR [rax],al
 102462e:	add    BYTE PTR [rax],al
 1024630:	add    BYTE PTR [rax],al
 1024632:	add    BYTE PTR [rax+0x0],ah
 1024635:	add    BYTE PTR [rax],al
 1024637:	add    BYTE PTR [rax],al
 1024639:	add    BYTE PTR [rax],al
 102463b:	(bad)  
	...
 1024648:	add    BYTE PTR [rax],al
 102464a:	add    BYTE PTR [rax+0x0],ah
 102464d:	add    BYTE PTR [rax],al
 102464f:	add    BYTE PTR [rdi+0x39],cl
 1024652:	(bad)  
 1024653:	xor    eax,0x4de70a1b
 1024658:	nop
 1024659:	push   rsi
 102465a:	in     eax,dx
 102465b:	sbb    eax,0x79d51995
 1024660:	xor    ah,BYTE PTR [rdx+0x2b992ddf]
 1024666:	add    BYTE PTR [rax],al
 1024668:	int    0x5d
 102466a:	and    dl,dl
 102466c:	data16 (bad) 
 102466e:	(bad)  
 102466f:	(bad)  
 1024670:	(bad)  
 1024671:	(bad)  
 1024672:	(bad)  
 1024673:	(bad)  
 1024674:	(bad)  
 1024675:	(bad)  
 1024676:	(bad)  
 1024677:	(bad)  
 1024678:	(bad)  
 1024679:	(bad)  
 102467a:	(bad)  
 102467b:	inc    DWORD PTR [rcx]
 102467d:	add    BYTE PTR [rax],al
 102467f:	add    al,dl
 1024681:	and    DWORD PTR [rax],eax
 1024683:	add    DWORD PTR [rax],eax
 1024685:	add    BYTE PTR [rax],al
 1024687:	add    BYTE PTR [rax],ch
 1024689:	and    al,BYTE PTR [rax]
 102468b:	add    DWORD PTR [rax],eax
 102468d:	add    BYTE PTR [rax],al
 102468f:	add    BYTE PTR [rax+0x22],dl
 1024692:	add    BYTE PTR [rcx],al
 1024694:	add    BYTE PTR [rax],al
 1024696:	add    BYTE PTR [rax],al
 1024698:	and    BYTE PTR [rdx],0x0
 102469b:	add    DWORD PTR [rax],eax
 102469d:	add    BYTE PTR [rax],al
 102469f:	add    BYTE PTR [rax+0x10022],bl
 10246a5:	add    BYTE PTR [rax],al
 10246a7:	add    BYTE PTR [rax+0x10022],dh
 10246ad:	add    BYTE PTR [rax],al
 10246af:	add    BYTE PTR [rax+0x23],ah
 10246b2:	add    BYTE PTR [rcx],al
 10246b4:	add    BYTE PTR [rax],al
 10246b6:	add    BYTE PTR [rax],al
 10246b8:	mov    eax,0x10023
 10246bd:	add    BYTE PTR [rax],al
 10246bf:	add    al,dl
 10246c1:	and    eax,DWORD PTR [rax]
 10246c3:	add    DWORD PTR [rax],eax
 10246c5:	add    BYTE PTR [rax],al
 10246c7:	add    BYTE PTR [rax+0x24],ah
 10246ca:	add    BYTE PTR [rcx],al
 10246cc:	add    BYTE PTR [rax],al
 10246ce:	add    BYTE PTR [rax],al
 10246d0:	add    BYTE PTR [rax],al
 10246d2:	add    BYTE PTR [rax+0x0],ah
 10246d5:	add    BYTE PTR [rax],al
 10246d7:	add    BYTE PTR [rax],al
 10246d9:	add    BYTE PTR [rax],al
 10246db:	(bad)  
	...
 10246e8:	add    BYTE PTR [rax],al
 10246ea:	add    BYTE PTR [rax+0x0],ah
	...
 10246f5:	add    BYTE PTR [rax+0x0],cl
 10246f8:	or     BYTE PTR [rax],al
 10246fa:	add    BYTE PTR [rax],al
 10246fc:	add    BYTE PTR [rax],al
 10246fe:	add    BYTE PTR [rax],al
 1024700:	sbb    BYTE PTR [rcx+0x2],cl
 1024703:	add    DWORD PTR [rax],eax
 1024705:	add    BYTE PTR [rax],al
 1024707:	add    BYTE PTR [rax],cl
 1024709:	rex.WX add al,BYTE PTR [rcx]
 102470c:	add    BYTE PTR [rax],al
 102470e:	add    BYTE PTR [rax],al
 1024710:	fmul   DWORD PTR [rdx+0x2]
 1024713:	add    DWORD PTR [rax],eax
 1024715:	add    BYTE PTR [rax],al
 1024717:	add    al,dh
 1024719:	rex.WXB add al,BYTE PTR [r9]
 102471c:	add    BYTE PTR [rax],al
 102471e:	add    BYTE PTR [rax],al
 1024720:	adc    BYTE PTR [rbp+0x2],cl
 1024723:	add    DWORD PTR [rax],eax
 1024725:	add    BYTE PTR [rax],al
 1024727:	add    BYTE PTR [rax],dh
 1024729:	rex.WRX add r8b,BYTE PTR [rcx]
 102472c:	add    BYTE PTR [rax],al
 102472e:	add    BYTE PTR [rax],al
 1024730:	js     0x1024781
 1024732:	add    al,BYTE PTR [rcx]
 1024734:	add    BYTE PTR [rax],al
 1024736:	add    BYTE PTR [rax],al
 1024738:	loopne 0x102478a
 102473a:	add    al,BYTE PTR [rcx]
 102473c:	add    BYTE PTR [rax],al
 102473e:	add    BYTE PTR [rax],al
 1024740:	add    eax,DWORD PTR [rax]
 1024742:	add    BYTE PTR [rax],al
 1024744:	add    BYTE PTR [rax],al
 1024746:	xor    BYTE PTR [rax],al
	...
 1024758:	(bad)  
 1024759:	add    BYTE PTR [rax],al
 102475b:	add    BYTE PTR [rax],al
 102475d:	add    BYTE PTR [rax],ah
	...
 102476f:	add    BYTE PTR [rdx],al
 1024771:	add    BYTE PTR [rax],al
 1024773:	add    BYTE PTR [rax],al
 1024775:	add    BYTE PTR [rax],bh
	...
 1024787:	add    BYTE PTR [rax],dh
 1024789:	push   rcx
 102478a:	add    al,BYTE PTR [rcx]
 102478c:	add    BYTE PTR [rax],al
 102478e:	add    BYTE PTR [rax],al
 1024790:	and    bh,0x0
 1024793:	add    DWORD PTR [rax],eax
	...
 102479d:	add    BYTE PTR [rax],al
 102479f:	add    BYTE PTR [rcx],al
 10247a1:	add    BYTE PTR [rax],al
 10247a3:	add    BYTE PTR [rax],al
 10247a5:	add    BYTE PTR [rax+0x0],cl
	...
 10247b8:	add    al,0x0
 10247ba:	add    BYTE PTR [rax],al
 10247bc:	add    BYTE PTR [rax],al
 10247be:	push   rax
	...
 10247cf:	add    BYTE PTR [rip+0x0],al        # 0x10247d5
 10247d5:	add    BYTE PTR [rax+0x0],ah
	...
 10247e8:	(bad)  
 10247e9:	add    BYTE PTR [rax],al
 10247eb:	add    BYTE PTR [rax],al
 10247ed:	add    BYTE PTR [rax],ch
	...
 10247ff:	add    BYTE PTR [rax],dh
 1024801:	push   rcx
 1024802:	add    al,BYTE PTR [rcx]
 1024804:	add    BYTE PTR [rax],al
 1024806:	add    BYTE PTR [rax],al
 1024808:	lock rex.RX add r8b,BYTE PTR [rcx]
 102480c:	add    BYTE PTR [rax],al
 102480e:	add    BYTE PTR [rax],al
 1024810:	movabs al,ds:0x7000000000010247
 1024819:	rex.RXB add r8b,BYTE PTR [r9]
 102481c:	add    BYTE PTR [rax],al
 102481e:	add    BYTE PTR [rax],al
 1024820:	rex
 1024821:	rex.RXB add r8b,BYTE PTR [r9]
 1024824:	add    BYTE PTR [rax],al
 1024826:	add    BYTE PTR [rax],al
 1024828:	mov    eax,0x10247
 102482d:	add    BYTE PTR [rax],al
 102482f:	add    al,dl
 1024831:	rex.RXB add r8b,BYTE PTR [r9]
 1024834:	add    BYTE PTR [rax],al
 1024836:	add    BYTE PTR [rax],al
 1024838:	call   0x1034a84
 102483d:	add    BYTE PTR [rax],al
 102483f:	add    BYTE PTR [rax+0x47],bl
 1024842:	add    al,BYTE PTR [rcx]
 1024844:	add    BYTE PTR [rax],al
 1024846:	add    BYTE PTR [rax],al
 1024848:	add    BYTE PTR [rax],al
 102484a:	add    BYTE PTR [rax+0x0],ah
 102484d:	add    BYTE PTR [rax],al
 102484f:	add    BYTE PTR [rax],al
 1024851:	add    BYTE PTR [rax],al
 1024853:	(bad)  
	...
 1024860:	add    BYTE PTR [rax],al
 1024862:	add    BYTE PTR [rax+0x0],ah
	...
 1024871:	add    BYTE PTR [rax+0x0],spl
 1024875:	add    BYTE PTR [rax],al
 1024877:	add    BYTE PTR [rax],cl
 1024879:	(bad)  
 102487a:	add    BYTE PTR [rcx],al
 102487c:	add    BYTE PTR [rax],al
 102487e:	add    BYTE PTR [rax],al
 1024880:	js     0x10248ab
 1024882:	add    BYTE PTR [rcx],al
 1024884:	add    BYTE PTR [rax],al
 1024886:	add    BYTE PTR [rax],al
 1024888:	sbb    BYTE PTR [rdi],bl
 102488a:	add    BYTE PTR [rcx],al
 102488c:	add    BYTE PTR [rax],al
 102488e:	add    BYTE PTR [rax],al
 1024890:	add    DWORD PTR [rax],eax
 1024892:	add    BYTE PTR [rax],al
 1024894:	add    BYTE PTR [rax],al
 1024896:	add    BYTE PTR [rax],al
 1024898:	add    BYTE PTR [rax+rax*1],dl
 102489b:	(bad)  
 102489c:	add    BYTE PTR [rax],al
 102489e:	add    BYTE PTR [rax],al
 10248a0:	rex (bad) 
 10248a2:	add    BYTE PTR [rcx],al
 10248a4:	add    BYTE PTR [rax],al
 10248a6:	add    BYTE PTR [rax],al
 10248a8:	add    DWORD PTR [rax],eax
 10248aa:	add    BYTE PTR [rax],al
 10248ac:	add    BYTE PTR [rax],al
 10248ae:	add    BYTE PTR [rax],al
 10248b0:	push   rax
 10248b1:	(bad)  
 10248b2:	add    BYTE PTR [rcx],al
 10248b4:	add    BYTE PTR [rax],al
 10248b6:	add    BYTE PTR [rax],al
 10248b8:	add    al,BYTE PTR [rax]
 10248ba:	add    BYTE PTR [rax],al
 10248bc:	add    BYTE PTR [rax],al
 10248be:	add    BYTE PTR [rax],al
 10248c0:	add    BYTE PTR [rax+rax*1],al
 10248c3:	xor    BYTE PTR [rax],al
 10248c5:	add    BYTE PTR [rax],al
 10248c7:	add    BYTE PTR [rax+0x1001f],al
 10248cd:	add    BYTE PTR [rax],al
 10248cf:	add    BYTE PTR [rbx],al
 10248d1:	add    BYTE PTR [rax],al
 10248d3:	add    BYTE PTR [rax],al
 10248d5:	add    BYTE PTR [rax],al
 10248d7:	add    BYTE PTR [rax+0x1001f],dl
 10248dd:	add    BYTE PTR [rax],al
 10248df:	add    BYTE PTR [rbx],al
	...
 10248f1:	and    BYTE PTR [rax],al
 10248f3:	(bad)  
 10248f4:	add    BYTE PTR [rax],al
 10248f6:	add    BYTE PTR [rax],al
 10248f8:	test   al,0x2a
 10248fa:	add    BYTE PTR [rcx],al
	...
 1024908:	loopne 0x1024925
 102490a:	add    BYTE PTR [rcx],al
	...
 1024918:	or     al,BYTE PTR [rax]
 102491a:	add    BYTE PTR [rax],al
 102491c:	inc    DWORD PTR [rbx]
 102491e:	add    BYTE PTR [rax],al
 1024920:	shr    BYTE PTR [rdx],0x0
 1024923:	add    DWORD PTR [rax],eax
 1024925:	add    BYTE PTR [rax],al
 1024927:	add    BYTE PTR [rax],dl
 1024929:	sub    eax,DWORD PTR [rax]
 102492b:	add    DWORD PTR [rax],eax
 102492d:	add    BYTE PTR [rax],al
 102492f:	add    BYTE PTR [rsi],al
 1024931:	add    BYTE PTR [rax],al
 1024933:	add    BYTE PTR [rax],al
 1024935:	add    BYTE PTR [rax],al
 1024937:	add    BYTE PTR [rbx],al
 1024939:	add    BYTE PTR [rax],al
 102493b:	add    BYTE PTR [rcx],al
 102493d:	add    BYTE PTR [rcx],al
 102493f:	add    BYTE PTR [rax],bl
 1024941:	(bad)  
 1024942:	add    al,BYTE PTR [rcx]
 1024944:	add    BYTE PTR [rax],al
 1024946:	add    BYTE PTR [rax],al
 1024948:	jo     0x1024992
 102494a:	add    al,BYTE PTR [rcx]
	...
 1024958:	lock rex.W add al,BYTE PTR [rcx]
 102495c:	add    BYTE PTR [rax],al
 102495e:	add    BYTE PTR [rax],al
 1024960:	add    BYTE PTR [rax+0x0],al
 1024963:	(bad)  
 1024964:	add    BYTE PTR [rax],al
 1024966:	add    BYTE PTR [rax],al
 1024968:	or     BYTE PTR [rdi],bl
 102496a:	add    BYTE PTR [rcx],al
 102496c:	add    BYTE PTR [rax],al
 102496e:	add    BYTE PTR [rax],al
 1024970:	mov    BYTE PTR [rcx],ch
 1024972:	add    BYTE PTR [rcx],al
 1024974:	add    BYTE PTR [rax],al
 1024976:	add    BYTE PTR [rax],al
 1024978:	sbb    BYTE PTR [rdi],bl
 102497a:	add    BYTE PTR [rcx],al
 102497c:	add    BYTE PTR [rax],al
 102497e:	add    BYTE PTR [rax],al
 1024980:	add    DWORD PTR [rax],eax
 1024982:	add    BYTE PTR [rax],al
 1024984:	add    BYTE PTR [rax],al
 1024986:	add    BYTE PTR [rax],al
 1024988:	add    BYTE PTR [rax+rax*1],dl
 102498b:	(bad)  
 102498c:	add    BYTE PTR [rax],al
 102498e:	add    BYTE PTR [rax],al
 1024990:	rex (bad) 
 1024992:	add    BYTE PTR [rcx],al
 1024994:	add    BYTE PTR [rax],al
 1024996:	add    BYTE PTR [rax],al
 1024998:	add    DWORD PTR [rax],eax
 102499a:	add    BYTE PTR [rax],al
 102499c:	add    BYTE PTR [rax],al
 102499e:	add    BYTE PTR [rax],al
 10249a0:	push   rax
 10249a1:	(bad)  
 10249a2:	add    BYTE PTR [rcx],al
 10249a4:	add    BYTE PTR [rax],al
 10249a6:	add    BYTE PTR [rax],al
 10249a8:	add    al,BYTE PTR [rax]
 10249aa:	add    BYTE PTR [rax],al
 10249ac:	add    BYTE PTR [rax],al
 10249ae:	add    BYTE PTR [rax],al
 10249b0:	add    BYTE PTR [rax+rax*1],al
 10249b3:	xor    BYTE PTR [rax],al
 10249b5:	add    BYTE PTR [rax],al
 10249b7:	add    BYTE PTR [rax+0x1001f],al
 10249bd:	add    BYTE PTR [rax],al
 10249bf:	add    BYTE PTR [rbx],al
 10249c1:	add    BYTE PTR [rax],al
 10249c3:	add    BYTE PTR [rax],al
 10249c5:	add    BYTE PTR [rax],al
 10249c7:	add    BYTE PTR [rax+0x1001f],dl
 10249cd:	add    BYTE PTR [rax],al
 10249cf:	add    BYTE PTR [rbx],al
	...
 10249e1:	and    BYTE PTR [rax],al
 10249e3:	(bad)  
 10249e4:	add    BYTE PTR [rax],al
 10249e6:	add    BYTE PTR [rax],al
 10249e8:	test   al,0x2a
 10249ea:	add    BYTE PTR [rcx],al
	...
 10249f8:	loopne 0x1024a15
 10249fa:	add    BYTE PTR [rcx],al
	...
 1024a08:	or     al,BYTE PTR [rax]
 1024a0a:	add    BYTE PTR [rax],al
 1024a0c:	inc    DWORD PTR [rdi]
 1024a0e:	add    BYTE PTR [rax],al
 1024a10:	sub    BYTE PTR [rbx],0x0
 1024a13:	add    DWORD PTR [rax],eax
 1024a15:	add    BYTE PTR [rax],al
 1024a17:	add    al,dl
 1024a19:	sub    eax,DWORD PTR [rax]
 1024a1b:	add    DWORD PTR [rax],eax
 1024a1d:	add    BYTE PTR [rax],al
 1024a1f:	add    BYTE PTR [rdi],al
 1024a21:	add    BYTE PTR [rax],al
 1024a23:	add    BYTE PTR [rax],al
 1024a25:	add    BYTE PTR [rax],al
 1024a27:	add    BYTE PTR [rbx],al
 1024a29:	add    BYTE PTR [rax],al
 1024a2b:	add    BYTE PTR [rcx],al
 1024a2d:	add    BYTE PTR [rcx],al
 1024a2f:	add    BYTE PTR [rax],ah
 1024a31:	(bad)  
 1024a32:	add    al,BYTE PTR [rcx]
 1024a34:	add    BYTE PTR [rax],al
 1024a36:	add    BYTE PTR [rax],al
 1024a38:	(bad)  
 1024a39:	rex.WB add al,BYTE PTR [r9]
	...
 1024a48:	loopne 0x1024a93
 1024a4a:	add    al,BYTE PTR [rcx]
 1024a4c:	add    BYTE PTR [rax],al
 1024a4e:	add    BYTE PTR [rax],al
 1024a50:	add    BYTE PTR [rax+0x0],al
 1024a53:	(bad)  
 1024a54:	add    BYTE PTR [rax],al
 1024a56:	add    BYTE PTR [rax],al
 1024a58:	or     BYTE PTR [rdi],bl
 1024a5a:	add    BYTE PTR [rcx],al
 1024a5c:	add    BYTE PTR [rax],al
 1024a5e:	add    BYTE PTR [rax],al
 1024a60:	cwde   
 1024a61:	sub    DWORD PTR [rax],eax
 1024a63:	add    DWORD PTR [rax],eax
 1024a65:	add    BYTE PTR [rax],al
 1024a67:	add    BYTE PTR [rax],bl
 1024a69:	(bad)  
 1024a6a:	add    BYTE PTR [rcx],al
 1024a6c:	add    BYTE PTR [rax],al
 1024a6e:	add    BYTE PTR [rax],al
 1024a70:	add    DWORD PTR [rax],eax
 1024a72:	add    BYTE PTR [rax],al
 1024a74:	add    BYTE PTR [rax],al
 1024a76:	add    BYTE PTR [rax],al
 1024a78:	add    BYTE PTR [rax+rax*1],dl
 1024a7b:	(bad)  
 1024a7c:	add    BYTE PTR [rax],al
 1024a7e:	add    BYTE PTR [rax],al
 1024a80:	rex (bad) 
 1024a82:	add    BYTE PTR [rcx],al
 1024a84:	add    BYTE PTR [rax],al
 1024a86:	add    BYTE PTR [rax],al
 1024a88:	add    DWORD PTR [rax],eax
 1024a8a:	add    BYTE PTR [rax],al
 1024a8c:	add    BYTE PTR [rax],al
 1024a8e:	add    BYTE PTR [rax],al
 1024a90:	push   rax
 1024a91:	(bad)  
 1024a92:	add    BYTE PTR [rcx],al
 1024a94:	add    BYTE PTR [rax],al
 1024a96:	add    BYTE PTR [rax],al
 1024a98:	add    al,BYTE PTR [rax]
 1024a9a:	add    BYTE PTR [rax],al
 1024a9c:	add    BYTE PTR [rax],al
 1024a9e:	add    BYTE PTR [rax],al
 1024aa0:	add    BYTE PTR [rax+rax*1],al
 1024aa3:	xor    BYTE PTR [rax],al
 1024aa5:	add    BYTE PTR [rax],al
 1024aa7:	add    BYTE PTR [rax+0x1001f],al
 1024aad:	add    BYTE PTR [rax],al
 1024aaf:	add    BYTE PTR [rbx],al
 1024ab1:	add    BYTE PTR [rax],al
 1024ab3:	add    BYTE PTR [rax],al
 1024ab5:	add    BYTE PTR [rax],al
 1024ab7:	add    BYTE PTR [rax+0x1001f],dl
 1024abd:	add    BYTE PTR [rax],al
 1024abf:	add    BYTE PTR [rbx],al
	...
 1024ad5:	add    BYTE PTR [rax],al
 1024ad7:	add    BYTE PTR [rdx],cl
 1024ad9:	add    BYTE PTR [rax],al
 1024adb:	add    bh,bh
 1024add:	or     eax,DWORD PTR [rax]
 1024adf:	add    BYTE PTR [rax+0x2c],al
 1024ae2:	add    BYTE PTR [rcx],al
 1024ae4:	add    BYTE PTR [rax],al
 1024ae6:	add    BYTE PTR [rax],al
 1024ae8:	movabs al,ds:0x80000000001002c
 1024af1:	add    BYTE PTR [rax],al
 1024af3:	add    BYTE PTR [rax],al
 1024af5:	add    BYTE PTR [rax],al
 1024af7:	add    BYTE PTR [rbx],al
 1024af9:	add    BYTE PTR [rax],al
 1024afb:	add    BYTE PTR [rax],al
 1024afd:	add    BYTE PTR [rax],al
 1024aff:	add    BYTE PTR [rax],ch
 1024b01:	(bad)  
 1024b02:	add    al,BYTE PTR [rcx]
 1024b04:	add    BYTE PTR [rax],al
 1024b06:	add    BYTE PTR [rax],al
 1024b08:	push   rax
 1024b09:	rex.WX add al,BYTE PTR [rcx]
	...
 1024b20:	add    BYTE PTR [rax+0x0],al
 1024b23:	(bad)  
 1024b24:	add    BYTE PTR [rax],al
 1024b26:	add    BYTE PTR [rax],al
 1024b28:	or     BYTE PTR [rdi],bl
 1024b2a:	add    BYTE PTR [rcx],al
 1024b2c:	add    BYTE PTR [rax],al
 1024b2e:	add    BYTE PTR [rax],al
 1024b30:	test   al,0x29
 1024b32:	add    BYTE PTR [rcx],al
 1024b34:	add    BYTE PTR [rax],al
 1024b36:	add    BYTE PTR [rax],al
 1024b38:	sbb    BYTE PTR [rdi],bl
 1024b3a:	add    BYTE PTR [rcx],al
 1024b3c:	add    BYTE PTR [rax],al
 1024b3e:	add    BYTE PTR [rax],al
 1024b40:	add    DWORD PTR [rax],eax
 1024b42:	add    BYTE PTR [rax],al
 1024b44:	add    BYTE PTR [rax],al
 1024b46:	add    BYTE PTR [rax],al
 1024b48:	add    BYTE PTR [rax+rax*1],dl
 1024b4b:	(bad)  
 1024b4c:	add    BYTE PTR [rax],al
 1024b4e:	add    BYTE PTR [rax],al
 1024b50:	rex (bad) 
 1024b52:	add    BYTE PTR [rcx],al
 1024b54:	add    BYTE PTR [rax],al
 1024b56:	add    BYTE PTR [rax],al
 1024b58:	add    DWORD PTR [rax],eax
 1024b5a:	add    BYTE PTR [rax],al
 1024b5c:	add    BYTE PTR [rax],al
 1024b5e:	add    BYTE PTR [rax],al
 1024b60:	push   rax
 1024b61:	(bad)  
 1024b62:	add    BYTE PTR [rcx],al
 1024b64:	add    BYTE PTR [rax],al
 1024b66:	add    BYTE PTR [rax],al
 1024b68:	add    al,BYTE PTR [rax]
 1024b6a:	add    BYTE PTR [rax],al
 1024b6c:	add    BYTE PTR [rax],al
 1024b6e:	add    BYTE PTR [rax],al
 1024b70:	add    BYTE PTR [rax+rax*1],al
 1024b73:	xor    BYTE PTR [rax],al
 1024b75:	add    BYTE PTR [rax],al
 1024b77:	add    BYTE PTR [rax+0x1001f],al
 1024b7d:	add    BYTE PTR [rax],al
 1024b7f:	add    BYTE PTR [rbx],al
 1024b81:	add    BYTE PTR [rax],al
 1024b83:	add    BYTE PTR [rax],al
 1024b85:	add    BYTE PTR [rax],al
 1024b87:	add    BYTE PTR [rax+0x1001f],dl
 1024b8d:	add    BYTE PTR [rax],al
 1024b8f:	add    BYTE PTR [rbx],al
	...
 1024ba1:	and    BYTE PTR [rax],al
 1024ba3:	(bad)  
 1024ba4:	add    BYTE PTR [rax],al
 1024ba6:	add    BYTE PTR [rax],al
 1024ba8:	test   al,0x2a
 1024baa:	add    BYTE PTR [rcx],al
	...
 1024bb8:	loopne 0x1024bd5
 1024bba:	add    BYTE PTR [rcx],al
	...
 1024bc8:	add    BYTE PTR [rax+rax*1],bl
 1024bcb:	(bad)  
 1024bcc:	add    BYTE PTR [rax],al
 1024bce:	add    BYTE PTR [rax],al
 1024bd0:	shr    BYTE PTR [rip+0x100],1        # 0x1024cd6
 1024bd6:	add    BYTE PTR [rax],al
 1024bd8:	or     BYTE PTR [rax],al
 1024bda:	add    BYTE PTR [rax],al
 1024bdc:	add    BYTE PTR [rax],al
 1024bde:	add    BYTE PTR [rax],al
 1024be0:	loopne 0x1024bfd
 1024be2:	add    BYTE PTR [rcx],al
	...
 1024bf0:	or     al,BYTE PTR [rax]
 1024bf2:	add    BYTE PTR [rax],al
 1024bf4:	dec    DWORD PTR [rdi]
 1024bf6:	add    BYTE PTR [rax],al
 1024bf8:	add    BYTE PTR [rsi],ch
 1024bfa:	add    BYTE PTR [rcx],al
 1024bfc:	add    BYTE PTR [rax],al
 1024bfe:	add    BYTE PTR [rax],al
 1024c00:	push   rax
 1024c01:	add    BYTE PTR cs:[rcx],al
 1024c04:	add    BYTE PTR [rax],al
 1024c06:	add    BYTE PTR [rax],al
 1024c08:	or     DWORD PTR [rax],eax
 1024c0a:	add    BYTE PTR [rax],al
 1024c0c:	add    BYTE PTR [rax],al
 1024c0e:	add    BYTE PTR [rax],al
 1024c10:	add    eax,DWORD PTR [rax]
 1024c12:	add    BYTE PTR [rax],al
 1024c14:	add    al,BYTE PTR [rax]
 1024c16:	add    al,BYTE PTR [rax]
 1024c18:	xor    BYTE PTR [rcx+0x2],ah
 1024c1b:	add    DWORD PTR [rax],eax
 1024c1d:	add    BYTE PTR [rax],al
 1024c1f:	add    BYTE PTR [rax],ah
 1024c21:	rex.WXB add al,BYTE PTR [r9]
	...
 1024c30:	movabs al,ds:0x1024b
	...
 1024c41:	add    BYTE PTR [rax+0x0],spl
 1024c45:	add    BYTE PTR [rax],al
 1024c47:	add    BYTE PTR [rax],cl
 1024c49:	(bad)  
 1024c4a:	add    BYTE PTR [rcx],al
 1024c4c:	add    BYTE PTR [rax],al
 1024c4e:	add    BYTE PTR [rax],al
 1024c50:	mov    eax,0x10029
 1024c55:	add    BYTE PTR [rax],al
 1024c57:	add    BYTE PTR [rax],bl
 1024c59:	(bad)  
 1024c5a:	add    BYTE PTR [rcx],al
 1024c5c:	add    BYTE PTR [rax],al
 1024c5e:	add    BYTE PTR [rax],al
 1024c60:	add    DWORD PTR [rax],eax
 1024c62:	add    BYTE PTR [rax],al
 1024c64:	add    BYTE PTR [rax],al
 1024c66:	add    BYTE PTR [rax],al
 1024c68:	add    BYTE PTR [rax+rax*1],dl
 1024c6b:	(bad)  
 1024c6c:	add    BYTE PTR [rax],al
 1024c6e:	add    BYTE PTR [rax],al
 1024c70:	rex (bad) 
 1024c72:	add    BYTE PTR [rcx],al
 1024c74:	add    BYTE PTR [rax],al
 1024c76:	add    BYTE PTR [rax],al
 1024c78:	add    DWORD PTR [rax],eax
 1024c7a:	add    BYTE PTR [rax],al
 1024c7c:	add    BYTE PTR [rax],al
 1024c7e:	add    BYTE PTR [rax],al
 1024c80:	push   rax
 1024c81:	(bad)  
 1024c82:	add    BYTE PTR [rcx],al
 1024c84:	add    BYTE PTR [rax],al
 1024c86:	add    BYTE PTR [rax],al
 1024c88:	add    al,BYTE PTR [rax]
 1024c8a:	add    BYTE PTR [rax],al
 1024c8c:	add    BYTE PTR [rax],al
 1024c8e:	add    BYTE PTR [rax],al
 1024c90:	add    BYTE PTR [rax+rax*1],al
 1024c93:	xor    BYTE PTR [rax],al
 1024c95:	add    BYTE PTR [rax],al
 1024c97:	add    BYTE PTR [rax+0x1001f],al
 1024c9d:	add    BYTE PTR [rax],al
 1024c9f:	add    BYTE PTR [rbx],al
 1024ca1:	add    BYTE PTR [rax],al
 1024ca3:	add    BYTE PTR [rax],al
 1024ca5:	add    BYTE PTR [rax],al
 1024ca7:	add    BYTE PTR [rax+0x1001f],dl
 1024cad:	add    BYTE PTR [rax],al
 1024caf:	add    BYTE PTR [rbx],al
	...
 1024cc1:	and    BYTE PTR [rax],al
 1024cc3:	(bad)  
 1024cc4:	add    BYTE PTR [rax],al
 1024cc6:	add    BYTE PTR [rax],al
 1024cc8:	test   al,0x2a
 1024cca:	add    BYTE PTR [rcx],al
	...
 1024cd8:	loopne 0x1024cf5
 1024cda:	add    BYTE PTR [rcx],al
	...
 1024ce8:	add    BYTE PTR [rax+rax*1],bl
 1024ceb:	(bad)  
 1024cec:	add    BYTE PTR [rax],al
 1024cee:	add    BYTE PTR [rax],al
 1024cf0:	shr    BYTE PTR [rsi],0x0
 1024cf3:	add    DWORD PTR [rax],eax
 1024cf5:	add    BYTE PTR [rax],al
 1024cf7:	add    BYTE PTR [rax],cl
 1024cf9:	add    BYTE PTR [rax],al
 1024cfb:	add    BYTE PTR [rax],al
 1024cfd:	add    BYTE PTR [rax],al
 1024cff:	add    al,ah
 1024d01:	sbb    eax,DWORD PTR [rax]
 1024d03:	add    DWORD PTR [rax],eax
	...
 1024d0d:	add    BYTE PTR [rax],al
 1024d0f:	add    BYTE PTR [rdx],cl
 1024d11:	add    BYTE PTR [rax],al
 1024d13:	add    bh,bh
 1024d15:	adc    eax,DWORD PTR [rax]
 1024d17:	add    al,ah
 1024d19:	add    BYTE PTR cs:[rcx],al
 1024d1c:	add    BYTE PTR [rax],al
 1024d1e:	add    BYTE PTR [rax],al
 1024d20:	xor    BYTE PTR [rdi],ch
 1024d22:	add    BYTE PTR [rcx],al
 1024d24:	add    BYTE PTR [rax],al
 1024d26:	add    BYTE PTR [rax],al
 1024d28:	or     al,BYTE PTR [rax]
 1024d2a:	add    BYTE PTR [rax],al
 1024d2c:	add    BYTE PTR [rax],al
 1024d2e:	add    BYTE PTR [rax],al
 1024d30:	add    eax,DWORD PTR [rax]
 1024d32:	add    BYTE PTR [rax],al
 1024d34:	add    al,BYTE PTR [rax]
 1024d36:	add    al,BYTE PTR [rax]
 1024d38:	cmp    BYTE PTR [rcx+0x2],ah
 1024d3b:	add    DWORD PTR [rax],eax
 1024d3d:	add    BYTE PTR [rax],al
 1024d3f:	add    BYTE PTR [rax+0x4c],al
 1024d42:	add    al,BYTE PTR [rcx]
	...
 1024d50:	ror    BYTE PTR [rdx+rax*1+0x1],0x0
	...
 1024d61:	add    BYTE PTR [rax+0x0],spl
 1024d65:	add    BYTE PTR [rax],al
 1024d67:	add    BYTE PTR [rax],cl
 1024d69:	(bad)  
 1024d6a:	add    BYTE PTR [rcx],al
 1024d6c:	add    BYTE PTR [rax],al
 1024d6e:	add    BYTE PTR [rax],al
 1024d70:	sub    BYTE PTR [rdx],ch
 1024d72:	add    BYTE PTR [rcx],al
 1024d74:	add    BYTE PTR [rax],al
 1024d76:	add    BYTE PTR [rax],al
 1024d78:	sbb    BYTE PTR [rdi],bl
 1024d7a:	add    BYTE PTR [rcx],al
 1024d7c:	add    BYTE PTR [rax],al
 1024d7e:	add    BYTE PTR [rax],al
 1024d80:	add    DWORD PTR [rax],eax
 1024d82:	add    BYTE PTR [rax],al
 1024d84:	add    BYTE PTR [rax],al
 1024d86:	add    BYTE PTR [rax],al
 1024d88:	add    BYTE PTR [rax+rax*1],dl
 1024d8b:	(bad)  
 1024d8c:	add    BYTE PTR [rax],al
 1024d8e:	add    BYTE PTR [rax],al
 1024d90:	rex (bad) 
 1024d92:	add    BYTE PTR [rcx],al
 1024d94:	add    BYTE PTR [rax],al
 1024d96:	add    BYTE PTR [rax],al
 1024d98:	add    DWORD PTR [rax],eax
 1024d9a:	add    BYTE PTR [rax],al
 1024d9c:	add    BYTE PTR [rax],al
 1024d9e:	add    BYTE PTR [rax],al
 1024da0:	push   rax
 1024da1:	(bad)  
 1024da2:	add    BYTE PTR [rcx],al
 1024da4:	add    BYTE PTR [rax],al
 1024da6:	add    BYTE PTR [rax],al
 1024da8:	add    al,BYTE PTR [rax]
 1024daa:	add    BYTE PTR [rax],al
 1024dac:	add    BYTE PTR [rax],al
 1024dae:	add    BYTE PTR [rax],al
 1024db0:	add    BYTE PTR [rax+rax*1],al
 1024db3:	xor    BYTE PTR [rax],al
 1024db5:	add    BYTE PTR [rax],al
 1024db7:	add    BYTE PTR [rax+0x1001f],al
 1024dbd:	add    BYTE PTR [rax],al
 1024dbf:	add    BYTE PTR [rbx],al
 1024dc1:	add    BYTE PTR [rax],al
 1024dc3:	add    BYTE PTR [rax],al
 1024dc5:	add    BYTE PTR [rax],al
 1024dc7:	add    BYTE PTR [rax+0x1001f],dl
 1024dcd:	add    BYTE PTR [rax],al
 1024dcf:	add    BYTE PTR [rbx],al
	...
 1024de1:	sbb    al,0x0
 1024de3:	(bad)  
 1024de4:	add    BYTE PTR [rax],al
 1024de6:	add    BYTE PTR [rax],al
 1024de8:	movabs al,ds:0x1002f
 1024df1:	add    BYTE PTR [rax],al
 1024df3:	add    BYTE PTR [rax],al
 1024df5:	add    BYTE PTR [rax],al
 1024df7:	add    al,ah
 1024df9:	sbb    eax,DWORD PTR [rax]
 1024dfb:	add    DWORD PTR [rax],eax
	...
 1024e09:	pop    rax
 1024e0a:	add    BYTE PTR [rax+0x0],ah
 1024e0d:	add    BYTE PTR [rax],al
 1024e0f:	add    BYTE PTR [rax+0x1002f],bh
 1024e15:	add    BYTE PTR [rax],al
 1024e17:	add    BYTE PTR [rax+rax*1],al
 1024e1a:	add    BYTE PTR [rax],al
 1024e1c:	add    BYTE PTR [rax],al
 1024e1e:	add    BYTE PTR [rax],al
 1024e20:	loopne 0x1024e3d
 1024e22:	add    BYTE PTR [rcx],al
	...
 1024e30:	or     al,BYTE PTR [rax]
 1024e32:	add    BYTE PTR [rax],al
 1024e34:	call   QWORD PTR [rdi]
 1024e36:	add    BYTE PTR [rax],al
 1024e38:	shr    BYTE PTR [rdi],1
 1024e3a:	add    BYTE PTR [rcx],al
 1024e3c:	add    BYTE PTR [rax],al
 1024e3e:	add    BYTE PTR [rax],al
 1024e40:	and    BYTE PTR [rax],dh
 1024e42:	add    BYTE PTR [rcx],al
 1024e44:	add    BYTE PTR [rax],al
 1024e46:	add    BYTE PTR [rax],al
 1024e48:	or     eax,DWORD PTR [rax]
 1024e4a:	add    BYTE PTR [rax],al
 1024e4c:	add    BYTE PTR [rax],al
 1024e4e:	add    BYTE PTR [rax],al
 1024e50:	add    eax,DWORD PTR [rax]
 1024e52:	add    BYTE PTR [rax],al
 1024e54:	add    al,BYTE PTR [rax]
 1024e56:	add    DWORD PTR [rax],eax
 1024e58:	rex (bad) 
 1024e5a:	add    al,BYTE PTR [rcx]
 1024e5c:	add    BYTE PTR [rax],al
 1024e5e:	add    BYTE PTR [rax],al
 1024e60:	(bad)  
 1024e61:	rex.WRB add r8b,BYTE PTR [r9]
	...
 1024e70:	loopne 0x1024ebf
 1024e72:	add    al,BYTE PTR [rcx]
	...
 1024e80:	add    BYTE PTR [rax+0x0],al
 1024e83:	(bad)  
 1024e84:	add    BYTE PTR [rax],al
 1024e86:	add    BYTE PTR [rax],al
 1024e88:	or     BYTE PTR [rdi],bl
 1024e8a:	add    BYTE PTR [rcx],al
 1024e8c:	add    BYTE PTR [rax],al
 1024e8e:	add    BYTE PTR [rax],al
 1024e90:	cmp    BYTE PTR [rdx],ch
 1024e92:	add    BYTE PTR [rcx],al
 1024e94:	add    BYTE PTR [rax],al
 1024e96:	add    BYTE PTR [rax],al
 1024e98:	sbb    BYTE PTR [rdi],bl
 1024e9a:	add    BYTE PTR [rcx],al
 1024e9c:	add    BYTE PTR [rax],al
 1024e9e:	add    BYTE PTR [rax],al
 1024ea0:	add    DWORD PTR [rax],eax
 1024ea2:	add    BYTE PTR [rax],al
 1024ea4:	add    BYTE PTR [rax],al
 1024ea6:	add    BYTE PTR [rax],al
 1024ea8:	add    BYTE PTR [rax+rax*1],dl
 1024eab:	(bad)  
 1024eac:	add    BYTE PTR [rax],al
 1024eae:	add    BYTE PTR [rax],al
 1024eb0:	rex (bad) 
 1024eb2:	add    BYTE PTR [rcx],al
 1024eb4:	add    BYTE PTR [rax],al
 1024eb6:	add    BYTE PTR [rax],al
 1024eb8:	add    DWORD PTR [rax],eax
 1024eba:	add    BYTE PTR [rax],al
 1024ebc:	add    BYTE PTR [rax],al
 1024ebe:	add    BYTE PTR [rax],al
 1024ec0:	push   rax
 1024ec1:	(bad)  
 1024ec2:	add    BYTE PTR [rcx],al
 1024ec4:	add    BYTE PTR [rax],al
 1024ec6:	add    BYTE PTR [rax],al
 1024ec8:	add    al,BYTE PTR [rax]
 1024eca:	add    BYTE PTR [rax],al
 1024ecc:	add    BYTE PTR [rax],al
 1024ece:	add    BYTE PTR [rax],al
 1024ed0:	add    BYTE PTR [rax+rax*1],al
 1024ed3:	xor    BYTE PTR [rax],al
 1024ed5:	add    BYTE PTR [rax],al
 1024ed7:	add    BYTE PTR [rax+0x1001f],al
 1024edd:	add    BYTE PTR [rax],al
 1024edf:	add    BYTE PTR [rbx],al
 1024ee1:	add    BYTE PTR [rax],al
 1024ee3:	add    BYTE PTR [rax],al
 1024ee5:	add    BYTE PTR [rax],al
 1024ee7:	add    BYTE PTR [rax+0x1001f],dl
 1024eed:	add    BYTE PTR [rax],al
 1024eef:	add    BYTE PTR [rbx],al
	...
 1024f01:	sbb    al,0x0
 1024f03:	(bad)  
 1024f04:	add    BYTE PTR [rax],al
 1024f06:	add    BYTE PTR [rax],al
 1024f08:	movabs al,ds:0x1002f
 1024f11:	add    BYTE PTR [rax],al
 1024f13:	add    BYTE PTR [rax],al
 1024f15:	add    BYTE PTR [rax],al
 1024f17:	add    al,ah
 1024f19:	sbb    eax,DWORD PTR [rax]
 1024f1b:	add    DWORD PTR [rax],eax
	...
 1024f29:	pop    rax
 1024f2a:	add    BYTE PTR [rax+0x0],ah
 1024f2d:	add    BYTE PTR [rax],al
 1024f2f:	add    BYTE PTR [rax+0x1002f],bh
 1024f35:	add    BYTE PTR [rax],al
 1024f37:	add    BYTE PTR [rax+rax*1],al
 1024f3a:	add    BYTE PTR [rax],al
 1024f3c:	add    BYTE PTR [rax],al
 1024f3e:	add    BYTE PTR [rax],al
 1024f40:	loopne 0x1024f5d
 1024f42:	add    BYTE PTR [rcx],al
	...
 1024f50:	add    BYTE PTR [rax+0x0],bl
 1024f53:	(bad)  
 1024f54:	add    BYTE PTR [rax],al
 1024f56:	add    BYTE PTR [rax],al
 1024f58:	and    BYTE PTR [rcx],dh
 1024f5a:	add    BYTE PTR [rcx],al
 1024f5c:	add    BYTE PTR [rax],al
 1024f5e:	add    BYTE PTR [rax],al
 1024f60:	or     al,0x0
 1024f62:	add    BYTE PTR [rax],al
 1024f64:	add    BYTE PTR [rax],al
 1024f66:	add    BYTE PTR [rax],al
 1024f68:	loopne 0x1024f85
 1024f6a:	add    BYTE PTR [rcx],al
	...
 1024f78:	or     al,BYTE PTR [rax]
 1024f7a:	add    BYTE PTR [rax],al
 1024f7c:	call   FWORD PTR [rbx]
 1024f7e:	add    BYTE PTR [rax],al
 1024f80:	xor    BYTE PTR [rcx],dh
 1024f82:	add    BYTE PTR [rcx],al
 1024f84:	add    BYTE PTR [rax],al
 1024f86:	add    BYTE PTR [rax],al
 1024f88:	xor    BYTE PTR [rcx],0x0
 1024f8b:	add    DWORD PTR [rax],eax
 1024f8d:	add    BYTE PTR [rax],al
 1024f8f:	add    BYTE PTR [rax+rax*1],cl
 1024f92:	add    BYTE PTR [rax],al
 1024f94:	add    BYTE PTR [rax],al
 1024f96:	add    BYTE PTR [rax],al
 1024f98:	add    eax,DWORD PTR [rax]
 1024f9a:	add    BYTE PTR [rax],al
 1024f9c:	add    eax,DWORD PTR [rax]
 1024f9e:	add    DWORD PTR [rax],eax
 1024fa0:	rex.W (bad) 
 1024fa2:	add    al,BYTE PTR [rcx]
 1024fa4:	add    BYTE PTR [rax],al
 1024fa6:	add    BYTE PTR [rax],al
 1024fa8:	or     BYTE PTR [rsi+0x2],0x1
	...
 1024fb8:	add    BYTE PTR [rdi+0x2],cl
 1024fbb:	add    DWORD PTR [rax],eax
 1024fbd:	add    BYTE PTR [rax],al
 1024fbf:	add    BYTE PTR [rax],al
 1024fc1:	add    BYTE PTR [rax+0x0],spl
 1024fc5:	add    BYTE PTR [rax],al
 1024fc7:	add    BYTE PTR [rax],cl
 1024fc9:	(bad)  
 1024fca:	add    BYTE PTR [rcx],al
 1024fcc:	add    BYTE PTR [rax],al
 1024fce:	add    BYTE PTR [rax],al
 1024fd0:	rex.W sub al,BYTE PTR [rax]
 1024fd3:	add    DWORD PTR [rax],eax
 1024fd5:	add    BYTE PTR [rax],al
 1024fd7:	add    BYTE PTR [rax],bl
 1024fd9:	(bad)  
 1024fda:	add    BYTE PTR [rcx],al
 1024fdc:	add    BYTE PTR [rax],al
 1024fde:	add    BYTE PTR [rax],al
 1024fe0:	add    DWORD PTR [rax],eax
 1024fe2:	add    BYTE PTR [rax],al
 1024fe4:	add    BYTE PTR [rax],al
 1024fe6:	add    BYTE PTR [rax],al
 1024fe8:	add    BYTE PTR [rax+rax*1],dl
 1024feb:	(bad)  
 1024fec:	add    BYTE PTR [rax],al
 1024fee:	add    BYTE PTR [rax],al
 1024ff0:	rex (bad) 
 1024ff2:	add    BYTE PTR [rcx],al
 1024ff4:	add    BYTE PTR [rax],al
 1024ff6:	add    BYTE PTR [rax],al
 1024ff8:	add    DWORD PTR [rax],eax
 1024ffa:	add    BYTE PTR [rax],al
 1024ffc:	add    BYTE PTR [rax],al
 1024ffe:	add    BYTE PTR [rax],al
 1025000:	push   rax
 1025001:	(bad)  
 1025002:	add    BYTE PTR [rcx],al
 1025004:	add    BYTE PTR [rax],al
 1025006:	add    BYTE PTR [rax],al
 1025008:	add    al,BYTE PTR [rax]
 102500a:	add    BYTE PTR [rax],al
 102500c:	add    BYTE PTR [rax],al
 102500e:	add    BYTE PTR [rax],al
 1025010:	add    BYTE PTR [rax+rax*1],al
 1025013:	xor    BYTE PTR [rax],al
 1025015:	add    BYTE PTR [rax],al
 1025017:	add    BYTE PTR [rax+0x1001f],al
 102501d:	add    BYTE PTR [rax],al
 102501f:	add    BYTE PTR [rbx],al
 1025021:	add    BYTE PTR [rax],al
 1025023:	add    BYTE PTR [rax],al
 1025025:	add    BYTE PTR [rax],al
 1025027:	add    BYTE PTR [rax+0x1001f],dl
 102502d:	add    BYTE PTR [rax],al
 102502f:	add    BYTE PTR [rbx],al
	...
 1025041:	sbb    al,0x0
 1025043:	(bad)  
 1025044:	add    BYTE PTR [rax],al
 1025046:	add    BYTE PTR [rax],al
 1025048:	movabs al,ds:0x1002f
 1025051:	add    BYTE PTR [rax],al
 1025053:	add    BYTE PTR [rax],al
 1025055:	add    BYTE PTR [rax],al
 1025057:	add    al,ah
 1025059:	sbb    eax,DWORD PTR [rax]
 102505b:	add    DWORD PTR [rax],eax
	...
 1025069:	or     al,0x0
 102506b:	(bad)  
 102506c:	add    BYTE PTR [rax],al
 102506e:	add    BYTE PTR [rax],al
 1025070:	and    BYTE PTR [rdx],dh
 1025072:	add    BYTE PTR [rcx],al
 1025074:	add    BYTE PTR [rax],al
 1025076:	add    BYTE PTR [rax],al
 1025078:	add    al,0x0
 102507a:	add    BYTE PTR [rax],al
 102507c:	add    BYTE PTR [rax],al
 102507e:	add    BYTE PTR [rax],al
 1025080:	loopne 0x102509d
 1025082:	add    BYTE PTR [rcx],al
	...
 1025090:	add    BYTE PTR [rax+0x0],bl
 1025093:	(bad)  
 1025094:	add    BYTE PTR [rax],al
 1025096:	add    BYTE PTR [rax],al
 1025098:	mov    eax,0x1002f
 102509d:	add    BYTE PTR [rax],al
 102509f:	add    BYTE PTR [rax],cl
 10250a1:	add    BYTE PTR [rax],al
 10250a3:	add    BYTE PTR [rax],al
 10250a5:	add    BYTE PTR [rax],al
 10250a7:	add    al,ah
 10250a9:	sbb    eax,DWORD PTR [rax]
 10250ab:	add    DWORD PTR [rax],eax
	...
 10250b9:	pop    rax
 10250ba:	add    BYTE PTR [rax+0x0],ah
 10250bd:	add    BYTE PTR [rax],al
 10250bf:	add    BYTE PTR [rax],ah
 10250c1:	xor    DWORD PTR [rax],eax
 10250c3:	add    DWORD PTR [rax],eax
 10250c5:	add    BYTE PTR [rax],al
 10250c7:	add    BYTE PTR [rax],dl
 10250c9:	add    BYTE PTR [rax],al
 10250cb:	add    BYTE PTR [rax],al
 10250cd:	add    BYTE PTR [rax],al
 10250cf:	add    al,ah
 10250d1:	sbb    eax,DWORD PTR [rax]
 10250d3:	add    DWORD PTR [rax],eax
	...
 10250dd:	add    BYTE PTR [rax],al
 10250df:	add    BYTE PTR [rdx],cl
 10250e1:	add    BYTE PTR [rax],al
 10250e3:	add    bh,bh
 10250e5:	(bad)  
 10250e6:	add    BYTE PTR [rax],al
 10250e8:	cmp    BYTE PTR [rdx],dh
 10250ea:	add    BYTE PTR [rcx],al
 10250ec:	add    BYTE PTR [rax],al
 10250ee:	add    BYTE PTR [rax],al
 10250f0:	xor    BYTE PTR [rdx],0x0
 10250f3:	add    DWORD PTR [rax],eax
 10250f5:	add    BYTE PTR [rax],al
 10250f7:	add    BYTE PTR [rip+0x0],cl        # 0x10250fd
 10250fd:	add    BYTE PTR [rax],al
 10250ff:	add    BYTE PTR [rbx],al
 1025101:	add    BYTE PTR [rax],al
 1025103:	add    BYTE PTR [rax+rax*1],al
 1025106:	add    al,BYTE PTR [rax]
 1025108:	push   rax
 1025109:	(bad)  
 102510a:	add    al,BYTE PTR [rcx]
 102510c:	add    BYTE PTR [rax],al
 102510e:	add    BYTE PTR [rax],al
 1025110:	ror    BYTE PTR [rdi+0x2],0x1
	...
 1025120:	rex push rax
 1025122:	add    al,BYTE PTR [rcx]
	...
 1025130:	or     al,BYTE PTR [rax]
 1025132:	add    BYTE PTR [rax],al
 1025134:	inc    DWORD PTR [rbx]
 1025136:	add    BYTE PTR [rax+0x1002908],al
 102513c:	add    BYTE PTR [rax],al
 102513e:	add    BYTE PTR [rax],al
 1025140:	and    BYTE PTR [rcx],ch
 1025142:	add    BYTE PTR [rcx],al
 1025144:	add    BYTE PTR [rax],al
 1025146:	add    BYTE PTR [rax],al
 1025148:	add    eax,0x0
 102514d:	add    BYTE PTR [rax],al
 102514f:	add    dl,dl
 1025151:	(bad)  
 1025152:	(bad)  
 1025153:	rex.WRX mov r13,QWORD PTR [rsi]
 1025156:	in     eax,0x4f
 1025158:	mov    esi,0xde0421c3
 102515d:	adc    cl,BYTE PTR [rbp+0x2a800f]
 1025163:	add    DWORD PTR [rax],eax
	...
 1025189:	add    BYTE PTR [rax],al
 102518b:	(bad)  
 102518c:	add    BYTE PTR [rax],al
 102518e:	add    BYTE PTR [rax],al
 1025190:	add    BYTE PTR [rax],al
 1025192:	add    BYTE PTR [rax+0x0],ah
	...
 10251a1:	add    BYTE PTR [rax],al
 10251a3:	(bad)  
 10251a4:	add    BYTE PTR [rax],al
 10251a6:	add    BYTE PTR [rax],al
 10251a8:	add    BYTE PTR [rax],al
 10251aa:	add    BYTE PTR [rax+0x0],ah
 10251ad:	add    BYTE PTR [rax],al
 10251af:	add    BYTE PTR [rax],al
 10251b1:	add    BYTE PTR [rax],al
 10251b3:	(bad)  
 10251b4:	add    BYTE PTR [rax],al
 10251b6:	add    BYTE PTR [rax],al
 10251b8:	add    BYTE PTR [rax],al
 10251ba:	add    BYTE PTR [rax+0x0],ah
 10251bd:	add    BYTE PTR [rax],al
 10251bf:	add    bh,ah
 10251c1:	(bad)  
 10251c2:	(bad)  
 10251c3:	inc    DWORD PTR [rax]
 10251c5:	add    BYTE PTR [rax],al
 10251c7:	add    BYTE PTR [rax],bh
 10251c9:	pop    rcx
 10251ca:	add    BYTE PTR [rcx],al
 10251cc:	add    BYTE PTR [rax],al
 10251ce:	add    BYTE PTR [rax],al
 10251d0:	push   0x10059
 10251d5:	add    BYTE PTR [rax],al
 10251d7:	add    BYTE PTR [rax],al
 10251d9:	add    BYTE PTR [rax],al
 10251db:	(bad)  
 10251dc:	add    BYTE PTR [rax],al
 10251de:	add    BYTE PTR [rax],al
 10251e0:	add    BYTE PTR [rax],al
 10251e2:	add    BYTE PTR [rax+0x0],ah
 10251e5:	add    BYTE PTR [rax],al
 10251e7:	add    BYTE PTR [rax],al
 10251e9:	add    BYTE PTR [rax],al
 10251eb:	(bad)  
	...
 10251f8:	add    BYTE PTR [rax],al
 10251fa:	add    BYTE PTR [rax+0x0],ah
 10251fd:	add    BYTE PTR [rax],al
 10251ff:	add    BYTE PTR [rbp-0x68],dh
 1025202:	add    BYTE PTR [rax],al
 1025204:	add    BYTE PTR [rax],al
 1025206:	add    BYTE PTR [rax],al
 1025208:	jo     0x1025281
 102520a:	add    DWORD PTR [rcx],eax
 102520c:	add    BYTE PTR [rax],al
 102520e:	add    BYTE PTR [rax],al
 1025210:	mov    BYTE PTR [rbx+0x0],ah
 1025213:	add    DWORD PTR [rax],eax
	...
 102521d:	add    BYTE PTR [rax],al
 102521f:	add    BYTE PTR [rsi],ch
 1025221:	(bad)  
 1025222:	push   r14
 1025224:	pop    rdi
 1025225:	movsxd ebp,DWORD PTR [rdi+0x6d]
 1025228:	pop    rdi
 1025229:	gs jb  0x102529e
 102522c:	outs   dx,DWORD PTR ds:[rsi]
 102522d:	jb     0x102526f
 102522f:	add    BYTE PTR [rax],al
 1025232:	add    BYTE PTR [rax],al
 1025234:	add    BYTE PTR [rax],al
 1025236:	add    BYTE PTR [rax],al
 1025238:	sbb    BYTE PTR [rcx+0x0],ah
 102523b:	add    DWORD PTR [rax],eax
 102523d:	add    BYTE PTR [rax],al
 102523f:	add    BYTE PTR [rbx],cl
 1025241:	add    BYTE PTR [rax],al
 1025243:	add    BYTE PTR [rax],al
 1025245:	add    BYTE PTR [rax],al
 1025247:	add    BYTE PTR [rax],dh
 1025249:	(bad)  
 102524a:	add    BYTE PTR [rcx],al
 102524c:	add    BYTE PTR [rax],al
 102524e:	add    BYTE PTR [rax],al
 1025250:	rex.WRB add BYTE PTR [r8],r8b
 1025253:	add    BYTE PTR [rax],al
 1025255:	add    BYTE PTR [rax],al
 1025257:	add    al,dl
 1025259:	(bad)  
 102525a:	add    BYTE PTR [rcx],al
 102525c:	add    BYTE PTR [rax],al
 102525e:	add    BYTE PTR [rax],al
 1025260:	adc    eax,DWORD PTR [rax]
 1025262:	add    BYTE PTR [rax],al
 1025264:	add    BYTE PTR [rax],al
 1025266:	add    BYTE PTR [rax],al
 1025268:	mov    BYTE PTR [rbx+0x0],ah
 102526b:	add    DWORD PTR [rax],eax
	...
 1025275:	add    BYTE PTR [rax],al
 1025277:	add    BYTE PTR [rsi],ch
 1025279:	(bad)  
 102527a:	push   r14
 102527c:	je     0x10252f7
 102527e:	jo     0x10252e5
 1025280:	pop    rdi
 1025281:	imul   ebp,DWORD PTR [rsi+0x66],0x40406f
	...

Disassembly of section .pdata:

000000000102f000 <.pdata>:
 102f000:	mov    al,0x73
 102f002:	add    BYTE PTR [rax],al
 102f004:	pop    rsi
 102f005:	je     0x102f007
 102f007:	add    BYTE PTR [rax-0x5ffffe1c],al
 102f00d:	je     0x102f00f
 102f00f:	add    BYTE PTR [rip+0x70000075],ah        # 0x7102f08a
 102f015:	loopne 0x102f018
 102f017:	add    BYTE PTR [rax],dh
 102f019:	jne    0x102f01b
 102f01b:	add    BYTE PTR [rdx+0x75],bl
 102f01e:	add    BYTE PTR [rax],al
 102f020:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 102f021:	loopne 0x102f024
 102f023:	add    BYTE PTR [rax+0x75],ah
 102f026:	add    BYTE PTR [rax],al
 102f028:	rex.RX jbe 0x102f02b
 102f02b:	add    BYTE PTR [rax+riz*8+0x76500001],ch
 102f032:	add    BYTE PTR [rax],al
 102f034:	xor    BYTE PTR [rdi+0x0],dh
 102f037:	add    ah,al
 102f039:	loopne 0x102f03c
 102f03b:	add    BYTE PTR [rax+0x77],al
 102f03e:	add    BYTE PTR [rax],al
 102f040:	(bad)  
 102f041:	js     0x102f043
 102f043:	add    ah,bl
 102f045:	loopne 0x102f048
 102f047:	add    BYTE PTR [rdi],bl
 102f049:	js     0x102f04b
 102f04b:	add    BYTE PTR [rcx-0xbffff88],cl
 102f051:	loopne 0x102f054
 102f053:	add    BYTE PTR [rcx+0x56000078],cl
 102f059:	jns    0x102f05b
 102f05b:	add    BYTE PTR [rax],cl
 102f05d:	loope  0x102f060
 102f05f:	add    BYTE PTR [rax+0x79],ah
 102f062:	add    BYTE PTR [rax],al
 102f064:	ins    BYTE PTR es:[rdi],dx
 102f065:	jp     0x102f067
 102f067:	add    BYTE PTR [rax],bl
 102f069:	loope  0x102f06c
 102f06b:	add    BYTE PTR [rax+0x6000007a],al
 102f071:	jnp    0x102f073
 102f073:	add    BYTE PTR [rax],ah
 102f075:	loope  0x102f078
 102f077:	add    BYTE PTR [rax+0x7b],dh
 102f07a:	add    BYTE PTR [rax],al
 102f07c:	(bad)  
 102f07d:	jl     0x102f07f
 102f07f:	add    BYTE PTR [rax],bh
 102f081:	loope  0x102f084
 102f083:	add    BYTE PTR [rax],dl
 102f085:	jl     0x102f087
 102f087:	add    al,cl
 102f089:	jl     0x102f08b
 102f08b:	add    BYTE PTR [rax-0x1f],al
 102f08e:	add    DWORD PTR [rax],eax
 102f090:	sar    BYTE PTR [rax+rax*1+0x0],1
 102f094:	xchg   esp,eax
 102f095:	jge    0x102f097
 102f097:	add    BYTE PTR [rax-0x1f],dl
 102f09a:	add    DWORD PTR [rax],eax
 102f09c:	movabs al,ds:0x6400007e7300007d
 102f0a5:	loope  0x102f0a8
 102f0a7:	add    al,dh
 102f0a9:	jle    0x102f0ab
 102f0ab:	add    BYTE PTR [rsi],dl
 102f0ad:	jg     0x102f0af
 102f0af:	add    BYTE PTR [rcx+riz*8+0x1],dh
 102f0b3:	add    BYTE PTR [rax],ah
 102f0b5:	jg     0x102f0b7
 102f0b7:	add    BYTE PTR [rsi+0x7f],al
 102f0ba:	add    BYTE PTR [rax],al
 102f0bc:	jl     0x102f09f
 102f0be:	add    DWORD PTR [rax],eax
 102f0c0:	push   rax
 102f0c1:	jg     0x102f0c3
 102f0c3:	add    BYTE PTR [rax-0x7bffff81],dl
 102f0c9:	loope  0x102f0cc
 102f0cb:	add    BYTE PTR [rax-0x67ffff81],dl
 102f0d1:	jg     0x102f0d3
 102f0d3:	add    BYTE PTR [rcx+riz*8+0x7f980001],bl
 102f0da:	add    BYTE PTR [rax],al
 102f0dc:	jmp    0xffffffffb102f162
 102f0e1:	loope  0x102f0e4
 102f0e3:	add    cl,ch
 102f0e5:	add    DWORD PTR [rax],0x821600
 102f0eb:	add    al,cl
 102f0ed:	loope  0x102f0f0
 102f0ef:	add    BYTE PTR [rsi],dl
 102f0f1:	(bad)  
 102f0f2:	add    BYTE PTR [rax],al
 102f0f4:	xor    DWORD PTR [rdx-0x1e240000],eax
 102f0fa:	add    DWORD PTR [rax],eax
 102f0fc:	rex (bad) 
 102f0fe:	add    BYTE PTR [rax],al
 102f100:	jno    0x102f084
 102f102:	add    BYTE PTR [rax],al
 102f104:	in     al,dx
 102f105:	loope  0x102f108
 102f107:	add    BYTE PTR [rcx-0x7e],dh
 102f10a:	add    BYTE PTR [rax],al
 102f10c:	leave  
 102f10d:	(bad)  
 102f10e:	add    BYTE PTR [rax],al
 102f110:	hlt    
 102f111:	loope  0x102f114
 102f113:	add    cl,cl
 102f115:	(bad)  
 102f116:	add    BYTE PTR [rax],al
 102f118:	fadd   DWORD PTR [rdx-0x1df00000]
 102f11e:	add    DWORD PTR [rax],eax
 102f120:	loopne 0x102f0a4
 102f122:	add    BYTE PTR [rax],al
 102f124:	mov    esi,0x20000083
 102f129:	loop   0x102f12c
 102f12b:	add    BYTE PTR [rsi-0x7bffff7d],bh
 102f131:	test   BYTE PTR [rax],al
 102f133:	add    BYTE PTR [rdx+riz*8],dh
 102f136:	add    DWORD PTR [rax],eax
 102f138:	test   BYTE PTR [rax+rax*1+0x84ac00],al
 102f13f:	add    BYTE PTR [rax-0x1e],cl
 102f142:	add    DWORD PTR [rax],eax
 102f144:	rol    BYTE PTR [rax+rax*1+0x8bbf00],0x0
 102f14c:	pop    rax
 102f14d:	loop   0x102f150
 102f14f:	add    al,dl
 102f151:	mov    eax,DWORD PTR [rax]
 102f153:	add    cl,ch
 102f155:	lea    eax,[rax]
 102f157:	add    BYTE PTR [rdx+riz*8-0x720fffff],dl
 102f15e:	add    BYTE PTR [rax],al
 102f160:	mov    es,WORD PTR cs:[rax]
 102f163:	add    BYTE PTR [rdx+riz*8-0x71d1ffff],bh
 102f16a:	add    BYTE PTR [rax],al
 102f16c:	ja     0x102f0fc
 102f16e:	add    BYTE PTR [rax],al
 102f170:	shl    dl,1
 102f172:	add    DWORD PTR [rax],eax
 102f174:	ja     0x102f104
 102f176:	add    BYTE PTR [rax],al
 102f178:	out    dx,al
 102f179:	mov    es,WORD PTR [rax]
 102f17b:	add    al,ch
 102f17d:	loop   0x102f180
 102f17f:	add    dh,ch
 102f181:	mov    es,WORD PTR [rax]
 102f183:	add    dl,bh
 102f185:	mov    es,WORD PTR [rax]
 102f187:	add    ah,bh
 102f189:	loop   0x102f18c
 102f18b:	add    dl,bh
 102f18d:	mov    es,WORD PTR [rax]
 102f18f:	add    BYTE PTR [rcx],dl
 102f191:	pop    QWORD PTR [rax]
 102f193:	add    BYTE PTR [rbx+riz*8],cl
 102f196:	add    DWORD PTR [rax],eax
 102f198:	and    BYTE PTR [rdi-0x70620000],cl
 102f19e:	add    BYTE PTR [rax],al
 102f1a0:	sbb    al,0xe3
 102f1a2:	add    DWORD PTR [rax],eax
 102f1a4:	and    BYTE PTR [rax-0x6eec0000],dl
 102f1aa:	add    BYTE PTR [rax],al
 102f1ac:	and    al,0xe3
 102f1ae:	add    DWORD PTR [rax],eax
 102f1b0:	and    BYTE PTR [rcx-0x6eda0000],dl
 102f1b6:	add    BYTE PTR [rax],al
 102f1b8:	cmp    al,0xe3
 102f1ba:	add    DWORD PTR [rax],eax
 102f1bc:	es xchg ecx,eax
 102f1be:	add    BYTE PTR [rax],al
 102f1c0:	sub    edx,DWORD PTR [rcx-0x1cbc0000]
 102f1c6:	add    DWORD PTR [rax],eax
 102f1c8:	sub    edx,DWORD PTR [rcx-0x6e8d0000]
 102f1ce:	add    BYTE PTR [rax],al
 102f1d0:	pop    rax
 102f1d1:	jrcxz  0x102f1d4
 102f1d3:	add    BYTE PTR [rbx-0x6f],dh
 102f1d6:	add    BYTE PTR [rax],al
 102f1d8:	test   eax,0x74000091
 102f1dd:	jrcxz  0x102f1e0
 102f1df:	add    BYTE PTR [rcx-0x3bffff6f],ch
 102f1e5:	xchg   ecx,eax
 102f1e6:	add    BYTE PTR [rax],al
 102f1e8:	mov    ebx,fs
 102f1ea:	add    DWORD PTR [rax],eax
 102f1ec:	rcl    BYTE PTR [rcx-0x6e100000],1
 102f1f2:	add    BYTE PTR [rax],al
 102f1f4:	movabs al,ds:0xc7000091f00001e3
 102f1fd:	xchg   edx,eax
 102f1fe:	add    BYTE PTR [rax],al
 102f200:	lods   al,BYTE PTR ds:[rsi]
 102f201:	jrcxz  0x102f204
 102f203:	add    bh,al
 102f205:	xchg   edx,eax
 102f206:	add    BYTE PTR [rax],al
 102f208:	iret   
 102f209:	xchg   edx,eax
 102f20a:	add    BYTE PTR [rax],al
 102f20c:	shl    bl,1
 102f20e:	add    DWORD PTR [rax],eax
 102f210:	iret   
 102f211:	xchg   edx,eax
 102f212:	add    BYTE PTR [rax],al
 102f214:	sbb    al,0x93
 102f216:	add    BYTE PTR [rax],al
 102f218:	hlt    
 102f219:	jrcxz  0x102f21c
 102f21b:	add    BYTE PTR [rbx+rdx*4],bl
 102f21e:	add    BYTE PTR [rax],al
 102f220:	jbe    0x102f1b5
 102f222:	add    BYTE PTR [rax],al
 102f224:	or     ah,ah
 102f226:	add    DWORD PTR [rax],eax
 102f228:	jbe    0x102f1bd
 102f22a:	add    BYTE PTR [rax],al
 102f22c:	lea    edx,[rbx-0x1be80000]
 102f232:	add    DWORD PTR [rax],eax
 102f234:	movabs al,ds:0x30000093f9000093
 102f23d:	in     al,0x1
 102f23f:	add    BYTE PTR [rax-0x6c],dh
 102f242:	add    BYTE PTR [rax],al
 102f244:	mov    edx,0x38000094
 102f249:	in     al,0x1
 102f24b:	add    BYTE PTR [rdx+0x16000094],bh
 102f251:	xchg   ebp,eax
 102f252:	add    BYTE PTR [rax],al
 102f254:	rex.R in al,0x1
 102f257:	add    BYTE PTR [rsi],dl
 102f259:	xchg   ebp,eax
 102f25a:	add    BYTE PTR [rax],al
 102f25c:	sub    DWORD PTR [rbp-0x1ba40000],edx
 102f262:	add    DWORD PTR [rax],eax
 102f264:	sub    DWORD PTR [rbp-0x6ac90000],edx
 102f26a:	add    BYTE PTR [rax],al
 102f26c:	jo     0x102f252
 102f26e:	add    DWORD PTR [rax],eax
 102f270:	rex xchg ebp,eax
 102f272:	add    BYTE PTR [rax],al
 102f274:	loop   0x102f20b
 102f276:	add    BYTE PTR [rax],al
 102f278:	cwde   
 102f279:	in     al,0x1
 102f27b:	add    al,dh
 102f27d:	xchg   ebp,eax
 102f27e:	add    BYTE PTR [rax],al
 102f280:	adc    BYTE PTR [rsi-0x1b500000],dl
 102f286:	add    DWORD PTR [rax],eax
 102f288:	and    BYTE PTR [rsi-0x69aa0000],dl
 102f28e:	add    BYTE PTR [rax],al
 102f290:	shl    ah,0x1
 102f293:	add    BYTE PTR [rsi-0x6a],dl
 102f296:	add    BYTE PTR [rax],al
 102f298:	in     eax,0x96
 102f29a:	add    BYTE PTR [rax],al
 102f29c:	shl    ah,1
 102f29e:	add    DWORD PTR [rax],eax
 102f2a0:	in     eax,0x96
 102f2a2:	add    BYTE PTR [rax],al
 102f2a4:	not    DWORD PTR [rsi-0x1b1c0000]
 102f2aa:	add    DWORD PTR [rax],eax
 102f2ac:	not    DWORD PTR [rsi-0x68f40000]
 102f2b2:	add    BYTE PTR [rax],al
 102f2b4:	clc    
 102f2b5:	in     al,0x1
 102f2b7:	add    BYTE PTR [rax-0x5effff69],al
 102f2bd:	xchg   edi,eax
 102f2be:	add    BYTE PTR [rax],al
 102f2c0:	or     ch,ah
 102f2c2:	add    DWORD PTR [rax],eax
 102f2c4:	movabs eax,ds:0x1400009809000097
 102f2cd:	in     eax,0x1
 102f2cf:	add    BYTE PTR [rcx],cl
 102f2d1:	cwde   
 102f2d2:	add    BYTE PTR [rax],al
 102f2d4:	test   al,0x98
 102f2d6:	add    BYTE PTR [rax],al
 102f2d8:	sub    al,0xe5
 102f2da:	add    DWORD PTR [rax],eax
 102f2dc:	test   al,0x98
 102f2de:	add    BYTE PTR [rax],al
 102f2e0:	jrcxz  0x102f27a
 102f2e2:	add    BYTE PTR [rax],al
 102f2e4:	rex.R in eax,0x1
 102f2e7:	add    bl,ah
 102f2e9:	cwde   
 102f2ea:	add    BYTE PTR [rax],al
 102f2ec:	or     BYTE PTR [rcx-0x1aa80000],bl
 102f2f2:	add    DWORD PTR [rax],eax
 102f2f4:	or     BYTE PTR [rcx-0x66e80000],bl
 102f2fa:	add    BYTE PTR [rax],al
 102f2fc:	push   0x200001e5
 102f301:	cdq    
 102f302:	add    BYTE PTR [rax],al
 102f304:	sbb    DWORD PTR [rdx-0x1a880000],ebx
 102f30a:	add    DWORD PTR [rax],eax
 102f30c:	and    BYTE PTR [rdx-0x65ce0000],bl
 102f312:	add    BYTE PTR [rax],al
 102f314:	nop
 102f315:	in     eax,0x1
 102f317:	add    BYTE PTR [rdx],dh
 102f319:	(bad)  
 102f31a:	add    BYTE PTR [rax],al
 102f31c:	push   rax
 102f31d:	(bad)  
 102f31e:	add    BYTE PTR [rax],al
 102f320:	cwde   
 102f321:	in     eax,0x1
 102f323:	add    BYTE PTR [rax-0x66],dl
 102f326:	add    BYTE PTR [rax],al
 102f328:	xchg   BYTE PTR [rdx-0x1a540000],bl
 102f32e:	add    DWORD PTR [rax],eax
 102f330:	xchg   BYTE PTR [rdx-0x656c0000],bl
 102f336:	add    BYTE PTR [rax],al
 102f338:	shl    ch,0x1
 102f33b:	add    BYTE PTR [rdx+rbx*4-0x65610000],dl
 102f342:	add    BYTE PTR [rax],al
 102f344:	shl    ch,1
 102f346:	add    DWORD PTR [rax],eax
 102f348:	rcr    BYTE PTR [rdx-0x65190000],0x0
 102f34f:	add    al,ah
 102f351:	in     eax,0x1
 102f353:	add    BYTE PTR [rax],dl
 102f355:	fwait
 102f356:	add    BYTE PTR [rax],al
 102f358:	(bad)  
 102f359:	fwait
 102f35a:	add    BYTE PTR [rax],al
 102f35c:	call   0x6102f546
 102f361:	fwait
 102f362:	add    BYTE PTR [rax],al
 102f364:	xchg   DWORD PTR [rbx-0x1a0c0000],ebx
 102f36a:	add    DWORD PTR [rax],eax
 102f36c:	mov    al,0x9b
 102f36e:	add    BYTE PTR [rax],al
 102f370:	fstp   QWORD PTR [rbx-0x1a040000]
 102f376:	add    DWORD PTR [rax],eax
 102f378:	lock fwait
 102f37a:	add    BYTE PTR [rax],al
 102f37c:	rex.R pushf 
 102f37e:	add    BYTE PTR [rax],al
 102f380:	add    al,0xe6
 102f382:	add    DWORD PTR [rax],eax
 102f384:	rex.R pushf 
 102f386:	add    BYTE PTR [rax],al
 102f388:	mov    esi,0x1800009c
 102f38d:	out    0x1,al
 102f38f:	add    BYTE PTR [rsi-0x7ffff64],bh
 102f395:	pushf  
 102f396:	add    BYTE PTR [rax],al
 102f398:	sub    al,0xe6
 102f39a:	add    DWORD PTR [rax],eax
 102f39c:	and    BYTE PTR [rbp-0x62b70000],bl
 102f3a2:	add    BYTE PTR [rax],al
 102f3a4:	cmp    al,0xe6
 102f3a6:	add    DWORD PTR [rax],eax
 102f3a8:	jo     0x102f347
 102f3aa:	add    BYTE PTR [rax],al
 102f3ac:	loope  0x102f34b
 102f3ae:	add    BYTE PTR [rax],al
 102f3b0:	rex.R out 0x1,al
 102f3b3:	add    al,dh
 102f3b5:	popf   
 102f3b6:	add    BYTE PTR [rax],al
 102f3b8:	es sahf 
 102f3ba:	add    BYTE PTR [rax],al
 102f3bc:	push   rax
 102f3bd:	out    0x1,al
 102f3bf:	add    BYTE PTR [rsi],ah
 102f3c1:	sahf   
 102f3c2:	add    BYTE PTR [rax],al
 102f3c4:	rcr    DWORD PTR [rsi-0x19a00000],0x1
 102f3cb:	add    cl,al
 102f3cd:	sahf   
 102f3ce:	add    BYTE PTR [rax],al
 102f3d0:	rcr    DWORD PTR [rsi-0x198c0000],cl
 102f3d6:	add    DWORD PTR [rax],eax
 102f3d8:	rcr    DWORD PTR [rsi-0x61180000],cl
 102f3de:	add    BYTE PTR [rax],al
 102f3e0:	mov    dh,ah
 102f3e2:	add    DWORD PTR [rax],eax
 102f3e4:	push   rax
 102f3e5:	lahf   
 102f3e6:	add    BYTE PTR [rax],al
 102f3e8:	jno    0x102f389
 102f3ea:	add    BYTE PTR [rax],al
 102f3ec:	cwde   
 102f3ed:	out    0x1,al
 102f3ef:	add    BYTE PTR [rcx-0x61],dh
 102f3f2:	add    BYTE PTR [rax],al
 102f3f4:	fstp   DWORD PTR [rdi-0x195c0000]
 102f3fa:	add    DWORD PTR [rax],eax
 102f3fc:	fstp   DWORD PTR [rdi-0x5f880000]
 102f402:	add    BYTE PTR [rax],al
 102f404:	mov    esp,0x780001e6
 102f409:	movabs al,ds:0xe6d40000a0b30000
 102f412:	add    DWORD PTR [rax],eax
 102f414:	mov    bl,0xa0
 102f416:	add    BYTE PTR [rax],al
 102f418:	fsub   DWORD PTR [rax-0x19180000]
 102f41e:	add    DWORD PTR [rax],eax
 102f420:	fsub   DWORD PTR [rax-0x5f180000]
 102f426:	add    BYTE PTR [rax],al
 102f428:	clc    
 102f429:	out    0x1,al
 102f42b:	add    al,dh
 102f42d:	movabs al,ds:0xe7080000a1020000
 102f436:	add    DWORD PTR [rax],eax
 102f438:	add    ah,BYTE PTR [rcx-0x5ee00000]
 102f43e:	add    BYTE PTR [rax],al
 102f440:	adc    bh,ah
 102f442:	add    DWORD PTR [rax],eax
 102f444:	and    BYTE PTR [rcx-0x5eaa0000],ah
 102f44a:	add    BYTE PTR [rax],al
 102f44c:	and    al,0xe7
 102f44e:	add    DWORD PTR [rax],eax
 102f450:	push   rsi
 102f451:	movabs eax,ds:0xe7380000a1640000
 102f45a:	add    DWORD PTR [rax],eax
 102f45c:	movabs eax,fs:0xe7480000a16f0000
 102f466:	add    DWORD PTR [rax],eax
 102f468:	nop
 102f469:	movabs eax,ds:0xe7580000a1b70000
 102f472:	add    DWORD PTR [rax],eax
 102f474:	loopne 0x102f417
 102f476:	add    BYTE PTR [rax],al
 102f478:	cpuid  
 102f47a:	add    BYTE PTR [rax],al
 102f47c:	(bad)  
 102f47d:	out    0x1,eax
 102f47f:	add    al,dl
 102f481:	movabs ds:0xe76c0000a3440000,al
 102f48a:	add    DWORD PTR [rax],eax
 102f48c:	mov    al,0xa3
 102f48e:	add    BYTE PTR [rax],al
 102f490:	movs   BYTE PTR es:[rdi],BYTE PTR cs:[rsi]
 102f492:	add    BYTE PTR [rax],al
 102f494:	jl     0x102f47d
 102f496:	add    DWORD PTR [rax],eax
 102f498:	rex movs BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 102f49a:	add    BYTE PTR [rax],al
 102f49c:	movsxd esp,DWORD PTR [rax+rax*1+0x1e78c00]
 102f4a3:	add    BYTE PTR [rax-0x5c],dh
 102f4a6:	add    BYTE PTR [rax],al
 102f4a8:	out    dx,al
 102f4a9:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 102f4aa:	add    BYTE PTR [rax],al
 102f4ac:	xchg   esp,eax
 102f4ad:	out    0x1,eax
 102f4af:	add    BYTE PTR [rax],al
 102f4b1:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 102f4b2:	add    BYTE PTR [rax],al
 102f4b4:	sbb    eax,0xa40000a5
 102f4b9:	out    0x1,eax
 102f4bb:	add    BYTE PTR [rax],dh
 102f4bd:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 102f4be:	add    BYTE PTR [rax],al
 102f4c0:	mov    ebx,0xac0000a5
 102f4c5:	out    0x1,eax
 102f4c7:	add    al,dl
 102f4c9:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 102f4ca:	add    BYTE PTR [rax],al
 102f4cc:	or     DWORD PTR [rsi-0x183c0000],esp
 102f4d2:	add    DWORD PTR [rax],eax
 102f4d4:	jo     0x102f47c
 102f4d6:	add    BYTE PTR [rax],al
 102f4d8:	in     eax,dx
 102f4d9:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 102f4da:	add    BYTE PTR [rax],al
 102f4dc:	shl    bh,1
 102f4de:	add    DWORD PTR [rax],eax
 102f4e0:	add    BYTE PTR [rdi-0x58e80000],ah
 102f4e6:	add    BYTE PTR [rax],al
 102f4e8:	cld    
 102f4e9:	out    0x1,eax
 102f4eb:	add    BYTE PTR [rax],ah
 102f4ed:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 102f4ee:	add    BYTE PTR [rax],al
 102f4f0:	push   rsi
 102f4f1:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 102f4f2:	add    BYTE PTR [rax],al
 102f4f4:	add    al,0xe8
 102f4f6:	add    DWORD PTR [rax],eax
 102f4f8:	(bad)  
 102f4f9:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 102f4fa:	add    BYTE PTR [rax],al
 102f4fc:	sbb    ebp,DWORD PTR [rax-0x17f40000]
 102f502:	add    DWORD PTR [rax],eax
 102f504:	test   al,0x0
 102f507:	add    BYTE PTR [rdx+0x1c0000a8],cl
 102f50d:	call   0xffffffffaa12f513
 102f512:	add    BYTE PTR [rax],al
 102f514:	adc    al,0xad
 102f516:	add    BYTE PTR [rax],al
 102f518:	push   rsp
 102f519:	call   0xffffffffae32f51f
 102f51e:	add    BYTE PTR [rax],al
 102f520:	outs   dx,DWORD PTR ds:[rsi]
 102f521:	lods   eax,DWORD PTR ds:[rsi]
 102f522:	add    BYTE PTR [rax],al
 102f524:	nop
 102f525:	call   0xffffffffae71f52b
 102f52a:	add    BYTE PTR [rax],al
 102f52c:	mov    WORD PTR [rbp-0x17680000],gs
 102f532:	add    DWORD PTR [rax],eax
 102f534:	mov    WORD PTR [rbp-0x526a0000],gs
 102f53a:	add    BYTE PTR [rax],al
 102f53c:	lods   al,BYTE PTR ds:[rsi]
 102f53d:	call   0xffffffffaea2f543
 102f542:	add    BYTE PTR [rax],al
 102f544:	(bad)  
 102f545:	scas   al,BYTE PTR es:[rdi]
 102f546:	add    BYTE PTR [rax],al
 102f548:	or     cl,ch
 102f54a:	add    DWORD PTR [rax],eax
 102f54c:	xor    BYTE PTR [rsi-0x51a20000],ch
 102f552:	add    BYTE PTR [rax],al
 102f554:	mov    esp,0x5e0001e8
 102f559:	scas   al,BYTE PTR es:[rdi]
 102f55a:	add    BYTE PTR [rax],al
 102f55c:	xchg   esp,eax
 102f55d:	scas   al,BYTE PTR es:[rdi]
 102f55e:	add    BYTE PTR [rax],al
 102f560:	enter  0x1e8,0x0
 102f564:	xchg   esp,eax
 102f565:	scas   al,BYTE PTR es:[rdi]
 102f566:	add    BYTE PTR [rax],al
 102f568:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 102f569:	scas   al,BYTE PTR es:[rdi]
 102f56a:	add    BYTE PTR [rax],al
 102f56c:	fsub   st(0),st
 102f56e:	add    DWORD PTR [rax],eax
 102f570:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 102f571:	scas   al,BYTE PTR es:[rdi]
 102f572:	add    BYTE PTR [rax],al
 102f574:	stos   DWORD PTR es:[rdi],eax
 102f575:	scas   al,BYTE PTR es:[rdi]
 102f576:	add    BYTE PTR [rax],al
 102f578:	lock call 0xffffffffafc2f57f
 102f57e:	add    BYTE PTR [rax],al
 102f580:	out    0xae,al
 102f582:	add    BYTE PTR [rax],al
 102f584:	add    cl,ch
 102f586:	add    DWORD PTR [rax],eax
 102f588:	lock scas al,BYTE PTR es:[rdi]
 102f58a:	add    BYTE PTR [rax],al
 102f58c:	scas   ax,WORD PTR es:[rdi]
 102f58e:	add    BYTE PTR [rax],al
 102f590:	adc    cl,ch
 102f592:	add    DWORD PTR [rax],eax
 102f594:	scas   ax,WORD PTR es:[rdi]
 102f596:	add    BYTE PTR [rax],al
 102f598:	jrcxz  0x102f54b
 102f59a:	add    BYTE PTR [rax],al
 102f59c:	sbb    al,0xe9
 102f59e:	add    DWORD PTR [rax],eax
 102f5a0:	jrcxz  0x102f553
 102f5a2:	add    BYTE PTR [rax],al
 102f5a4:	icebp  
 102f5a5:	mov    cl,0x0
 102f5a7:	add    BYTE PTR [rax],bh
 102f5a9:	jmp    0xffffffffb302f5af
 102f5ae:	add    BYTE PTR [rax],al
 102f5b0:	xchg   ebp,eax
 102f5b1:	mov    ah,0x0
 102f5b3:	add    BYTE PTR [rax-0x17],cl
 102f5b6:	add    DWORD PTR [rax],eax
 102f5b8:	mov    al,0xb4
 102f5ba:	add    BYTE PTR [rax],al
 102f5bc:	outs   dx,BYTE PTR ds:[rsi]
 102f5bd:	mov    ch,0x0
 102f5bf:	add    BYTE PTR [rcx+rbp*8+0x1],ah
 102f5c3:	add    al,dh
 102f5c5:	mov    ch,0x0
 102f5c7:	add    dh,cl
 102f5c9:	mov    dh,0x0
 102f5cb:	add    BYTE PTR [rcx+rbp*8+0x1],bh
 102f5cf:	add    al,ah
 102f5d1:	mov    dh,0x0
 102f5d3:	add    BYTE PTR [rbp-0x49],dh
 102f5d6:	add    BYTE PTR [rax],al
 102f5d8:	nop
 102f5d9:	jmp    0xffffffffb8a2f5df
 102f5de:	add    BYTE PTR [rax],al
 102f5e0:	(bad)  
 102f5e1:	mov    eax,0xe9a80000
 102f5e6:	add    DWORD PTR [rax],eax
 102f5e8:	(bad)  
 102f5e9:	mov    eax,0xb8630000
 102f5ee:	add    BYTE PTR [rax],al
 102f5f0:	mov    eax,0x630001e9
 102f5f5:	mov    eax,0xb8750000
 102f5fa:	add    BYTE PTR [rax],al
 102f5fc:	shr    cl,1
 102f5fe:	add    DWORD PTR [rax],eax
 102f600:	cmp    BYTE PTR [rax-0x47410000],0x0
 102f607:	add    al,ah
 102f609:	jmp    0xffffffffb9c1f60f
 102f60e:	add    BYTE PTR [rax],al
 102f610:	xchg   ecx,eax
 102f611:	mov    ecx,0xe9f80000
 102f616:	add    DWORD PTR [rax],eax
 102f618:	xchg   ecx,eax
 102f619:	mov    ecx,0xb9ac0000
 102f61e:	add    BYTE PTR [rax],al
 102f620:	or     al,0xea
 102f622:	add    DWORD PTR [rax],eax
 102f624:	sar    BYTE PTR [rcx-0x461a0000],0x0
 102f62b:	add    BYTE PTR [rdx+rbp*8],bl
 102f62e:	add    DWORD PTR [rax],eax
 102f630:	in     al,dx
 102f631:	mov    ecx,0xba510000
 102f636:	add    BYTE PTR [rax],al
 102f638:	and    al,0xea
 102f63a:	add    DWORD PTR [rax],eax
 102f63c:	pop    rax
 102f63d:	mov    edx,0xbbd80000
 102f642:	add    BYTE PTR [rax],al
 102f644:	xor    al,0xea
 102f646:	add    DWORD PTR [rax],eax
 102f648:	loopne 0x102f605
 102f64a:	add    BYTE PTR [rax],al
 102f64c:	scas   al,BYTE PTR es:[rdi]
 102f64d:	mov    esp,0xea580000
 102f652:	add    DWORD PTR [rax],eax
 102f654:	mov    ah,0xbc
 102f656:	add    BYTE PTR [rax],al
 102f658:	(bad)  
 102f659:	mov    esp,0xea600000
 102f65e:	add    DWORD PTR [rax],eax
 102f660:	lock mov esp,0xbda00000
 102f666:	add    BYTE PTR [rax],al
 102f668:	jo     0x102f654
 102f66a:	add    DWORD PTR [rax],eax
 102f66c:	test   al,0xbd
 102f66e:	add    BYTE PTR [rax],al
 102f670:	mov    edi,0x900000bd
 102f675:	(bad)  
 102f676:	add    DWORD PTR [rax],eax
 102f678:	enter  0xbd,0x0
 102f67c:	adc    bh,BYTE PTR [rdi-0x15680000]
 102f682:	add    DWORD PTR [rax],eax
 102f684:	cmp    al,0xbf
 102f686:	add    BYTE PTR [rax],al
 102f688:	lahf   
 102f689:	mov    edi,0xeaa00000
 102f68e:	add    DWORD PTR [rax],eax
 102f690:	test   al,0xbf
 102f692:	add    BYTE PTR [rax],al
 102f694:	(bad)
 102f697:	add    BYTE PTR [rax-0x33fffe16],ch
 102f69d:	mov    edi,0xc0600000
 102f6a2:	add    BYTE PTR [rax],al
 102f6a4:	mov    al,0xea
 102f6a6:	add    DWORD PTR [rax],eax
 102f6a8:	jo     0x102f66a
 102f6aa:	add    BYTE PTR [rax],al
 102f6ac:	mov    esi,0xc80000c0
 102f6b1:	(bad)  
 102f6b2:	add    DWORD PTR [rax],eax
 102f6b4:	rol    al,1
 102f6b6:	add    BYTE PTR [rax],al
 102f6b8:	out    dx,eax
 102f6b9:	rol    BYTE PTR [rax],0x0
 102f6bc:	shr    dl,1
 102f6be:	add    DWORD PTR [rax],eax
 102f6c0:	sbb    al,0xc1
 102f6c2:	add    BYTE PTR [rax],al
 102f6c4:	pop    rbp
 102f6c5:	rol    DWORD PTR [rax],0x0
 102f6c8:	(bad)  
 102f6c9:	(bad)  
 102f6ca:	add    DWORD PTR [rax],eax
 102f6cc:	rol    DWORD PTR fs:[rax],0x0
 102f6d0:	jl     0x102f693
 102f6d2:	add    BYTE PTR [rax],al
 102f6d4:	fsub   st(2),st
 102f6d6:	add    DWORD PTR [rax],eax
 102f6d8:	nop
 102f6d9:	rol    DWORD PTR [rax],0x0
 102f6dc:	enter  0xc1,0x0
 102f6e0:	in     al,0xea
 102f6e2:	add    DWORD PTR [rax],eax
 102f6e4:	rol    cl,1
 102f6e6:	add    BYTE PTR [rax],al
 102f6e8:	or     dl,al
 102f6ea:	add    BYTE PTR [rax],al
 102f6ec:	lock (bad) 
 102f6ee:	add    DWORD PTR [rax],eax
 102f6f0:	mov    al,0xc2
 102f6f2:	add    BYTE PTR [rax],al
 102f6f4:	icebp  
 102f6f5:	ret    0x0
 102f6f8:	add    al,0xeb
 102f6fa:	add    DWORD PTR [rax],eax
 102f6fc:	sub    bl,al
 102f6fe:	add    BYTE PTR [rax],al
 102f700:	fcmovnb st,st(3)
 102f702:	add    BYTE PTR [rax],al
 102f704:	and    al,0xeb
 102f706:	add    DWORD PTR [rax],eax
 102f708:	and    ah,al
 102f70a:	add    BYTE PTR [rax],al
 102f70c:	(bad)  
 102f70d:	(bad)  
 102f70e:	add    BYTE PTR [rax],al
 102f710:	xor    bl,ch
 102f712:	add    DWORD PTR [rax],eax
 102f714:	push   0xd0000c4
 102f719:	(bad)
 102f71c:	cmp    al,0xeb
 102f71e:	add    DWORD PTR [rax],eax
 102f720:	adc    al,0xc5
 102f722:	add    BYTE PTR [rax],al
 102f724:	test   ebp,eax
 102f726:	add    BYTE PTR [rax],al
 102f728:	pop    rsp
 102f729:	jmp    0x102f72c
 102f72b:	add    BYTE PTR [rbp+rax*8-0x39e20000],cl
 102f732:	add    BYTE PTR [rax],al
 102f734:	jo     0x102f721
 102f736:	add    DWORD PTR [rax],eax
 102f738:	xor    dh,al
 102f73a:	add    BYTE PTR [rax],al
 102f73c:	test   esi,eax
 102f73e:	add    BYTE PTR [rax],al
 102f740:	nop
 102f741:	jmp    0x102f744
 102f743:	add    BYTE PTR [rax-0x2affff3a],dl
 102f749:	mov    DWORD PTR [rax],0x1eb9800
 102f74f:	add    al,ah
 102f751:	mov    DWORD PTR [rax],0xc82200
 102f757:	add    al,al
 102f759:	jmp    0x102f75c
 102f75b:	add    BYTE PTR [rax],dh
 102f75d:	enter  0x0,0xc5
 102f761:	retf   0x0
 102f764:	lock jmp 0x102f768
 102f767:	add    al,dl
 102f769:	retf   0x0
 102f76c:	push   rcx
 102f76d:	retf   
 102f76e:	add    BYTE PTR [rax],al
 102f770:	push   rax
 102f771:	in     al,dx
 102f772:	add    DWORD PTR [rax],eax
 102f774:	(bad)  
 102f775:	retf   
 102f776:	add    BYTE PTR [rax],al
 102f778:	repz int 0x0
 102f77b:	add    BYTE PTR [rax+0x1ec],cl
 102f781:	(bad)  
 102f782:	add    BYTE PTR [rax],al
 102f784:	sbb    cl,dh
 102f786:	add    BYTE PTR [rax],al
 102f788:	mov    esp,0x200001ec
 102f78d:	(bad)  
 102f78e:	add    BYTE PTR [rax],al
 102f790:	push   rcx
 102f791:	(bad)  
 102f792:	add    BYTE PTR [rax],al
 102f794:	(bad)  
 102f795:	in     al,dx
 102f796:	add    DWORD PTR [rax],eax
 102f798:	lock (bad) 
 102f79a:	add    BYTE PTR [rax],al
 102f79c:	mov    ebp,0xd00000cf
 102f7a1:	in     al,dx
 102f7a2:	add    DWORD PTR [rax],eax
 102f7a4:	ror    bh,1
 102f7a6:	add    BYTE PTR [rax],al
 102f7a8:	add    eax,edx
 102f7aa:	add    BYTE PTR [rax],al
 102f7ac:	fsub   st(4),st
 102f7ae:	add    DWORD PTR [rax],eax
 102f7b0:	add    eax,edx
 102f7b2:	add    BYTE PTR [rax],al
 102f7b4:	(bad)  
 102f7b5:	rol    BYTE PTR [rax],1
 102f7b7:	add    al,ch
 102f7b9:	in     al,dx
 102f7ba:	add    DWORD PTR [rax],eax
 102f7bc:	(bad)  
 102f7bd:	rol    BYTE PTR [rax],1
 102f7bf:	add    BYTE PTR [rdi-0x30],al
 102f7c2:	add    BYTE PTR [rax],al
 102f7c4:	cld    
 102f7c5:	in     al,dx
 102f7c6:	add    DWORD PTR [rax],eax
 102f7c8:	rex.RXB rol BYTE PTR [r8],1
 102f7cb:	add    BYTE PTR [rsi-0x30],cl
 102f7ce:	add    BYTE PTR [rax],al
 102f7d0:	adc    ch,ch
 102f7d2:	add    DWORD PTR [rax],eax
 102f7d4:	(bad)  
 102f7d5:	rol    BYTE PTR [rax],1
 102f7d7:	add    BYTE PTR [rcx+0x280000d0],al
 102f7dd:	in     eax,dx
 102f7de:	add    DWORD PTR [rax],eax
 102f7e0:	nop
 102f7e1:	rol    BYTE PTR [rax],1
 102f7e3:	add    BYTE PTR [rcx+0x300000d0],dh
 102f7e9:	in     eax,dx
 102f7ea:	add    DWORD PTR [rax],eax
 102f7ec:	rcl    al,0x0
 102f7ef:	add    BYTE PTR [rax],ah
 102f7f1:	rol    DWORD PTR [rax],1
 102f7f3:	add    BYTE PTR [rax],bh
 102f7f5:	in     eax,dx
 102f7f6:	add    DWORD PTR [rax],eax
 102f7f8:	and    cl,dl
 102f7fa:	add    BYTE PTR [rax],al
 102f7fc:	int    0xd1
 102f7fe:	add    BYTE PTR [rax],al
 102f800:	rex.WR in eax,dx
 102f802:	add    DWORD PTR [rax],eax
 102f804:	int    0xd1
 102f806:	add    BYTE PTR [rax],al
 102f808:	out    0xd1,eax
 102f80a:	add    BYTE PTR [rax],al
 102f80c:	fs in  eax,dx
 102f80e:	add    DWORD PTR [rax],eax
 102f810:	add    dl,dl
 102f812:	add    BYTE PTR [rax],al
 102f814:	(bad)  
 102f815:	rol    BYTE PTR [rax],cl
 102f817:	add    BYTE PTR [rbp+rbp*8+0x1],dh
 102f81b:	add    BYTE PTR [rax-0x2e],dh
 102f81e:	add    BYTE PTR [rax],al
 102f820:	mov    ss,edx
 102f822:	add    BYTE PTR [rax],al
 102f824:	sub    ch,0x1
 102f827:	add    BYTE PTR [rax+0x700000d2],ah
 102f82d:	rol    DWORD PTR [rax],cl
 102f82f:	add    BYTE PTR [rax-0x7ffffe13],cl
 102f835:	rol    DWORD PTR [rax],cl
 102f837:	add    dl,al
 102f839:	rol    DWORD PTR [rax],cl
 102f83b:	add    BYTE PTR [rax-0x3dfffe13],ah
 102f841:	rol    DWORD PTR [rax],cl
 102f843:	add    BYTE PTR [rcx],al
 102f845:	(bad)  
 102f846:	add    BYTE PTR [rax],al
 102f848:	mov    ah,0xed
 102f84a:	add    DWORD PTR [rax],eax
 102f84c:	add    esp,edx
 102f84e:	add    BYTE PTR [rax],al
 102f850:	xor    al,0xd5
 102f852:	add    BYTE PTR [rax],al
 102f854:	shr    ch,1
 102f856:	add    DWORD PTR [rax],eax
 102f858:	xor    al,0xd5
 102f85a:	add    BYTE PTR [rax],al
 102f85c:	jge    0x102f833
 102f85e:	add    BYTE PTR [rax],al
 102f860:	in     al,0xed
 102f862:	add    DWORD PTR [rax],eax
 102f864:	jge    0x102f83b
 102f866:	add    BYTE PTR [rax],al
 102f868:	(bad)  
 102f869:	(bad)  
 102f86a:	add    BYTE PTR [rax],al
 102f86c:	hlt    
 102f86d:	in     eax,dx
 102f86e:	add    DWORD PTR [rax],eax
 102f870:	movabs al,ds:0x40000d5f40000d5
 102f879:	out    dx,al
 102f87a:	add    DWORD PTR [rax],eax
 102f87c:	hlt    
 102f87d:	(bad)  
 102f87e:	add    BYTE PTR [rax],al
 102f880:	loopne 0x102f858
 102f882:	add    BYTE PTR [rax],al
 102f884:	sbb    al,0xee
 102f886:	add    DWORD PTR [rax],eax
 102f888:	loopne 0x102f860
 102f88a:	add    BYTE PTR [rax],al
 102f88c:	sub    al,0xd7
 102f88e:	add    BYTE PTR [rax],al
 102f890:	xor    al,0xee
 102f892:	add    DWORD PTR [rax],eax
 102f894:	rex xlat BYTE PTR ds:[rbx]
 102f896:	add    BYTE PTR [rax],al
 102f898:	sbb    al,0xd9
 102f89a:	add    BYTE PTR [rax],al
 102f89c:	rex.R out dx,al
 102f89e:	add    DWORD PTR [rax],eax
 102f8a0:	xor    cl,bl
 102f8a2:	add    BYTE PTR [rax],al
 102f8a4:	rex.W fiadd DWORD PTR [rax]
 102f8a7:	add    BYTE PTR [rax-0x12],ah
 102f8aa:	add    DWORD PTR [rax],eax
 102f8ac:	push   rax
 102f8ad:	fiadd  DWORD PTR [rax]
 102f8af:	add    ch,dh
 102f8b1:	fild   DWORD PTR [rax]
 102f8b3:	add    BYTE PTR [rax-0x12],ch
 102f8b6:	add    DWORD PTR [rax],eax
 102f8b8:	add    ah,bl
 102f8ba:	add    BYTE PTR [rax],al
 102f8bc:	sbb    ah,0x0
 102f8bf:	add    BYTE PTR [rax-0x6ffffe12],al
 102f8c5:	fadd   QWORD PTR [rax]
 102f8c7:	add    BYTE PTR [rbp-0x23],bl
 102f8ca:	add    BYTE PTR [rax],al
 102f8cc:	nop
 102f8cd:	out    dx,al
 102f8ce:	add    DWORD PTR [rax],eax
 102f8d0:	jo     0x102f8af
 102f8d2:	add    BYTE PTR [rax],al
 102f8d4:	fld    QWORD PTR [rax]
 102f8d7:	add    BYTE PTR [rsi+rbp*8-0x224fffff],bl
 102f8de:	add    BYTE PTR [rax],al
 102f8e0:	(bad)  
 102f8e1:	fld    QWORD PTR [rax]
 102f8e3:	add    BYTE PTR [rsi+rbp*8-0x21efffff],ah
 102f8ea:	add    BYTE PTR [rax],al
 102f8ec:	push   rbp
 102f8ed:	fild   WORD PTR [rax]
 102f8ef:	add    BYTE PTR [rsi+rbp*8-0x209fffff],ch
 102f8f6:	add    BYTE PTR [rax],al
 102f8f8:	add    esp,eax
 102f8fa:	add    BYTE PTR [rax],al
 102f8fc:	shr    dh,0x1
 102f8ff:	add    BYTE PTR [rax],dl
 102f901:	loopne 0x102f903
 102f903:	add    BYTE PTR [rax-0x37ffff20],cl
 102f909:	out    dx,al
 102f90a:	add    DWORD PTR [rax],eax
 102f90c:	nop
 102f90d:	loopne 0x102f90f
 102f90f:	add    BYTE PTR [rdx-0x1f],bh
 102f912:	add    BYTE PTR [rax],al
 102f914:	shr    dh,1
 102f916:	add    DWORD PTR [rax],eax
 102f918:	and    cl,0x0
 102f91b:	add    BYTE PTR [rcx+0x240000e1],ah
 102f921:	out    dx,eax
 102f922:	add    DWORD PTR [rax],eax
 102f924:	mov    al,0xe1
 102f926:	add    BYTE PTR [rax],al
 102f928:	lods   eax,DWORD PTR ds:[rsi]
 102f929:	out    0x0,al
 102f92b:	add    BYTE PTR [rdi+rbp*8],ch
 102f92e:	add    DWORD PTR [rax],eax
 102f930:	loopne 0x102f918
 102f932:	add    BYTE PTR [rax],al
 102f934:	sbb    esp,edi
 102f936:	add    BYTE PTR [rax],al
 102f938:	fsub   st(7),st
 102f93a:	add    DWORD PTR [rax],eax
 102f93c:	xor    bh,ah
 102f93e:	add    BYTE PTR [rax],al
 102f940:	imul   esp,edi,0x0
 102f943:	add    ah,ah
 102f945:	out    dx,eax
 102f946:	add    DWORD PTR [rax],eax
 102f948:	and    bh,0x0
 102f94b:	add    dh,bh
 102f94d:	out    0x0,eax
 102f94f:	add    ah,ch
 102f951:	out    dx,eax
 102f952:	add    DWORD PTR [rax],eax
 102f954:	adc    al,ch
 102f956:	add    BYTE PTR [rax],al
 102f958:	xchg   al,ch
 102f95a:	add    BYTE PTR [rax],al
 102f95c:	hlt    
 102f95d:	out    dx,eax
 102f95e:	add    DWORD PTR [rax],eax
 102f960:	xchg   al,ch
 102f962:	add    BYTE PTR [rax],al
 102f964:	add    ebp,ebx
 102f966:	add    BYTE PTR [rax],al
 102f968:	add    al,dh
 102f96a:	add    DWORD PTR [rax],eax
 102f96c:	add    ebp,ebx
 102f96e:	add    BYTE PTR [rax],al
 102f970:	adc    ebx,ebp
 102f972:	add    BYTE PTR [rax],al
 102f974:	sbb    al,0xf0
 102f976:	add    DWORD PTR [rax],eax
 102f978:	and    bl,ch
 102f97a:	add    BYTE PTR [rax],al
 102f97c:	mov    ch,0xed
 102f97e:	add    BYTE PTR [rax],al
 102f980:	sub    al,0xf0
 102f982:	add    DWORD PTR [rax],eax
 102f984:	shr    ch,1
 102f986:	add    BYTE PTR [rax],al
 102f988:	mov    gs,esi
 102f98a:	add    BYTE PTR [rax],al
 102f98c:	rex.W
 102f98d:	lock add DWORD PTR [rax],eax
 102f990:	adc    bh,ch
 102f992:	add    BYTE PTR [rax],al
 102f994:	out    dx,al
 102f995:	out    dx,eax
 102f996:	add    BYTE PTR [rax],al
 102f998:	(bad)  
 102f999:	lock add DWORD PTR [rax],eax
 102f99c:	add    al,dh
 102f99e:	add    BYTE PTR [rax],al
 102f9a0:	movabs ds:0xd00001f0740000f0,eax
 102f9a9:	lock add BYTE PTR [rax],al
 102f9ac:	ss icebp 
 102f9ae:	add    BYTE PTR [rax],al
 102f9b0:	mov    ah,0xf0
 102f9b2:	add    DWORD PTR [rax],eax
 102f9b4:	ss icebp 
 102f9b6:	add    BYTE PTR [rax],al
 102f9b8:	xchg   ebx,eax
 102f9b9:	icebp  
 102f9ba:	add    BYTE PTR [rax],al
 102f9bc:	(bad)  
 102f9bd:	lock add DWORD PTR [rax],eax
 102f9c0:	xchg   ebx,eax
 102f9c1:	icebp  
 102f9c2:	add    BYTE PTR [rax],al
 102f9c4:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 102f9c5:	icebp  
 102f9c6:	add    BYTE PTR [rax],al
 102f9c8:	fdivr  st(0),st
 102f9ca:	add    DWORD PTR [rax],eax
 102f9cc:	mov    al,0xf1
 102f9ce:	add    BYTE PTR [rax],al
 102f9d0:	out    dx,eax
 102f9d1:	icebp  
 102f9d2:	add    BYTE PTR [rax],al
 102f9d4:	in     al,dx
 102f9d5:	lock add DWORD PTR [rax],eax
 102f9d8:	out    dx,eax
 102f9d9:	icebp  
 102f9da:	add    BYTE PTR [rax],al
 102f9dc:	shl    edx,0x0
 102f9df:	add    BYTE PTR [rcx+rsi*8],al
 102f9e2:	add    DWORD PTR [rax],eax
 102f9e4:	shl    edx,0x0
 102f9e7:	add    ah,bl
 102f9e9:	repnz add BYTE PTR [rax],al
 102f9ec:	sbb    cl,dh
 102f9ee:	add    DWORD PTR [rax],eax
 102f9f0:	lock xacquire add BYTE PTR [rax],al
 102f9f4:	(bad)  
 102f9f5:	repz add BYTE PTR [rax],al
 102f9f8:	sub    cl,dh
 102f9fa:	add    DWORD PTR [rax],eax
 102f9fc:	shl    bl,1
 102f9fe:	add    BYTE PTR [rax],al
 102fa00:	iret   
 102fa01:	cmc    
 102fa02:	add    BYTE PTR [rax],al
 102fa04:	xor    cl,dh
 102fa06:	add    DWORD PTR [rax],eax
 102fa08:	loopne 0x102f9ff
 102fa0a:	add    BYTE PTR [rax],al
 102fa0c:	add    dh,dh
 102fa0e:	add    BYTE PTR [rax],al
 102fa10:	pushf  
 102fa11:	icebp  
 102fa12:	add    DWORD PTR [rax],eax
 102fa14:	add    dh,dh
 102fa16:	add    BYTE PTR [rax],al
 102fa18:	je     0x102fa10
 102fa1a:	add    BYTE PTR [rax],al
 102fa1c:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 102fa1d:	icebp  
 102fa1e:	add    DWORD PTR [rax],eax
 102fa20:	je     0x102fa18
 102fa22:	add    BYTE PTR [rax],al
 102fa24:	loop   0x102fa1c
 102fa26:	add    BYTE PTR [rax],al
 102fa28:	(bad)  
 102fa29:	icebp  
 102fa2a:	add    DWORD PTR [rax],eax
 102fa2c:	loop   0x102fa24
 102fa2e:	add    BYTE PTR [rax],al
 102fa30:	(bad)  
 102fa31:	test   BYTE PTR [rax],0x0
 102fa34:	in     al,0xf1
 102fa36:	add    DWORD PTR [rax],eax
 102fa38:	lock test BYTE PTR [rax],0x0
 102fa3c:	sbb    esi,edi
 102fa3e:	add    BYTE PTR [rax],al
 102fa40:	hlt    
 102fa41:	icebp  
 102fa42:	add    DWORD PTR [rax],eax
 102fa44:	sbb    esi,edi
 102fa46:	add    BYTE PTR [rax],al
 102fa48:	js     0x102fa41
 102fa4a:	add    BYTE PTR [rax],al
 102fa4c:	add    al,0xf2
 102fa4e:	add    DWORD PTR [rax],eax
 102fa50:	js     0x102fa49
 102fa52:	add    BYTE PTR [rax],al
 102fa54:	mov    bh,dh
 102fa56:	add    BYTE PTR [rax],al
 102fa58:	sbb    dl,dh
 102fa5a:	add    DWORD PTR [rax],eax
 102fa5c:	nop
 102fa5d:	test   DWORD PTR [rax],0xf86400
 102fa63:	add    BYTE PTR [rax],ch
 102fa65:	repnz add DWORD PTR [rax],eax
 102fa68:	jo     0x102fa62
 102fa6a:	add    BYTE PTR [rax],al
 102fa6c:	(bad)  
 102fa6d:	stc    
 102fa6e:	add    BYTE PTR [rax],al
 102fa70:	push   0x200001f2
 102fa75:	stc    
 102fa76:	add    BYTE PTR [rax],al
 102fa78:	rex.X stc 
 102fa7a:	add    BYTE PTR [rax],al
 102fa7c:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 102fa7d:	repnz add DWORD PTR [rax],eax
 102fa80:	push   rax
 102fa81:	stc    
 102fa82:	add    BYTE PTR [rax],al
 102fa84:	scas   eax,DWORD PTR es:[rdi]
 102fa85:	stc    
 102fa86:	add    BYTE PTR [rax],al
 102fa88:	lods   al,BYTE PTR ds:[rsi]
 102fa89:	repnz add DWORD PTR [rax],eax
 102fa8c:	sar    cl,0x0
 102fa8f:	add    BYTE PTR [rdi],ch
 102fa91:	cli    
 102fa92:	add    BYTE PTR [rax],al
 102fa94:	loopne 0x102fa88
 102fa96:	add    DWORD PTR [rax],eax
 102fa98:	rex cli 
 102fa9a:	add    BYTE PTR [rax],al
 102fa9c:	lahf   
 102fa9d:	cli    
 102fa9e:	add    BYTE PTR [rax],al
 102faa0:	sbb    bl,dh
 102faa2:	add    DWORD PTR [rax],eax
 102faa4:	mov    al,0xfa
 102faa6:	add    BYTE PTR [rax],al
 102faa8:	enter  0xfa,0x0
 102faac:	rex.WR
 102faad:	repz add DWORD PTR [rax],eax
 102fab0:	sar    dl,1
 102fab2:	add    BYTE PTR [rax],al
 102fab4:	ja     0x102fab1
 102fab6:	add    BYTE PTR [rax],al
 102fab8:	push   rsp
 102fab9:	repz add DWORD PTR [rax],eax
 102fabc:	cmp    bl,0x0
 102fabf:	add    cl,dl
 102fac1:	sti    
 102fac2:	add    BYTE PTR [rax],al
 102fac4:	xchg   esp,eax
 102fac5:	repz add DWORD PTR [rax],eax
 102fac8:	adc    ah,bh
 102faca:	add    BYTE PTR [rax],al
 102facc:	sub    bh,ah
 102face:	add    BYTE PTR [rax],al
 102fad0:	(bad)  
 102fad1:	repz add DWORD PTR [rax],eax
 102fad4:	sar    ah,1
 102fad6:	add    BYTE PTR [rax],al
 102fad8:	hlt    
 102fad9:	cld    
 102fada:	add    BYTE PTR [rax],al
 102fadc:	int3   
 102fadd:	repz add DWORD PTR [rax],eax
 102fae0:	cmp    ch,0x0
 102fae3:	add    BYTE PTR [rdi-0x2bffff03],dl
 102fae9:	repz add DWORD PTR [rax],eax
 102faec:	sar    ch,0x0
 102faef:	add    al,bh
 102faf1:	std    
 102faf2:	add    BYTE PTR [rax],al
 102faf4:	fdivr  st(3),st
 102faf6:	add    DWORD PTR [rax],eax
 102faf8:	adc    dh,bh
 102fafa:	add    BYTE PTR [rax],al
 102fafc:	and    dh,bh
 102fafe:	add    BYTE PTR [rax],al
 102fb00:	or     al,0xf4
 102fb02:	add    DWORD PTR [rax],eax
 102fb04:	and    dh,bh
 102fb06:	add    BYTE PTR [rax],al
 102fb08:	rex.RXB inc BYTE PTR [r8]
 102fb0b:	add    BYTE PTR [rsp+rsi*8],dl
 102fb0e:	add    DWORD PTR [rax],eax
 102fb10:	rex.RXB inc BYTE PTR [r8]
 102fb13:	add    BYTE PTR [rsi+rdi*8+0x0],cl
 102fb17:	add    BYTE PTR [rax],ch
 102fb19:	hlt    
 102fb1a:	add    DWORD PTR [rax],eax
 102fb1c:	(bad)  
 102fb1d:	inc    BYTE PTR [rax]
 102fb1f:	add    BYTE PTR [rbx+0x380000fe],dh
 102fb25:	hlt    
 102fb26:	add    DWORD PTR [rax],eax
 102fb28:	sar    dh,0x0
 102fb2b:	add    BYTE PTR [rax],dh
 102fb2d:	inc    DWORD PTR [rax]
 102fb2f:	add    BYTE PTR [rax-0xc],dh
 102fb32:	add    DWORD PTR [rax],eax
 102fb34:	push   rax
 102fb35:	inc    DWORD PTR [rax]
 102fb37:	add    BYTE PTR [rbp-0x1],ch
 102fb3a:	add    BYTE PTR [rax],al
 102fb3c:	int3   
 102fb3d:	hlt    
 102fb3e:	add    DWORD PTR [rax],eax
 102fb40:	nop
 102fb41:	inc    DWORD PTR [rax]
 102fb43:	add    dh,dl
 102fb45:	inc    DWORD PTR [rax]
 102fb47:	add    ah,ch
 102fb49:	hlt    
 102fb4a:	add    DWORD PTR [rax],eax
 102fb4c:	loopne 0x102fb4d
 102fb4e:	add    BYTE PTR [rax],al
 102fb50:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 102fb51:	add    BYTE PTR [rcx],al
 102fb53:	add    BYTE PTR [rsi*8+0xd00001],ch
 102fb5a:	add    DWORD PTR [rax],eax
 102fb5c:	adc    al,BYTE PTR [rbx]
 102fb5e:	add    DWORD PTR [rax],eax
 102fb60:	je     0x102fb57
 102fb62:	add    DWORD PTR [rax],eax
 102fb64:	and    BYTE PTR [rbx],al
 102fb66:	add    DWORD PTR [rax],eax
 102fb68:	add    r8,QWORD PTR [r9]
 102fb6b:	add    BYTE PTR [rax],dl
 102fb6d:	test   BYTE PTR [rcx],0x0
 102fb70:	(bad)  
 102fb71:	add    eax,DWORD PTR [rcx]
 102fb73:	add    BYTE PTR [rax+0x18000103],al
 102fb79:	test   BYTE PTR [rcx],0x0
 102fb7c:	nop
 102fb7d:	add    eax,DWORD PTR [rcx]
 102fb7f:	add    BYTE PTR [rsi+rax*1+0x1],ah
 102fb83:	add    BYTE PTR [rax],ah
 102fb85:	test   BYTE PTR [rcx],0x0
 102fb88:	jo     0x102fb90
 102fb8a:	add    DWORD PTR [rax],eax
 102fb8c:	xchg   edx,eax
 102fb8d:	(bad)  
 102fb8e:	add    DWORD PTR [rax],eax
 102fb90:	test   BYTE PTR fs:[rcx],0x0
 102fb94:	movabs al,ds:0x6c00010827000106
 102fb9d:	test   BYTE PTR [rcx],0x0
 102fba0:	xor    BYTE PTR [rax],cl
 102fba2:	add    DWORD PTR [rax],eax
 102fba4:	rex.W or al,BYTE PTR [rcx]
 102fba7:	add    ah,ah
 102fba9:	test   BYTE PTR [rcx],0x0
 102fbac:	push   rax
 102fbad:	or     al,BYTE PTR [rcx]
 102fbaf:	add    BYTE PTR [rbp-0x37fffef3],bl
 102fbb5:	test   DWORD PTR [rcx],0x10db000
 102fbbb:	add    BYTE PTR [rbx],ch
 102fbbd:	(bad)  
 102fbbe:	add    DWORD PTR [rax],eax
 102fbc0:	ins    BYTE PTR es:[rdi],dx
 102fbc1:	clc    
 102fbc2:	add    DWORD PTR [rax],eax
 102fbc4:	rex (bad) 
 102fbc6:	add    DWORD PTR [rax],eax
 102fbc8:	fwait
 102fbc9:	adc    BYTE PTR [rcx],al
 102fbcb:	add    BYTE PTR [rax+rdi*8+0x1],bh
 102fbcf:	add    BYTE PTR [rax-0x38fffef0],dh
 102fbd5:	adc    eax,0xf9600001
 102fbda:	add    DWORD PTR [rax],eax
 102fbdc:	rcl    BYTE PTR [rip+0x17d10001],1        # 0x18d3fbe3
 102fbe2:	add    DWORD PTR [rax],eax
 102fbe4:	fs sti 
 102fbe6:	add    DWORD PTR [rax],eax
 102fbe8:	loopne 0x102fc01
 102fbea:	add    DWORD PTR [rax],eax
 102fbec:	retf   0x119
 102fbef:	add    BYTE PTR [rax],ah
 102fbf1:	cld    
 102fbf2:	add    DWORD PTR [rax],eax
 102fbf4:	rcr    BYTE PTR [rcx],1
 102fbf6:	add    DWORD PTR [rax],eax
 102fbf8:	lock sbb DWORD PTR [rcx],eax
 102fbfb:	add    al,ah
 102fbfd:	cld    
 102fbfe:	add    DWORD PTR [rax],eax
 102fc00:	lock sbb DWORD PTR [rcx],eax
 102fc03:	add    BYTE PTR [rip+0xfffffffff000011a],bh        # 0xfffffffff102fd23
 102fc09:	cld    
 102fc0a:	add    DWORD PTR [rax],eax
 102fc0c:	cmp    eax,0x5700011a
 102fc11:	sbb    al,BYTE PTR [rcx]
 102fc13:	add    BYTE PTR [rdi*8+0x1a570001],al
 102fc1a:	add    DWORD PTR [rax],eax
 102fc1c:	outs   dx,BYTE PTR ds:[rsi]
 102fc1d:	sbb    al,BYTE PTR [rcx]
 102fc1f:	add    BYTE PTR [rax],bl
 102fc21:	std    
 102fc22:	add    DWORD PTR [rax],eax
 102fc24:	sbb    BYTE PTR [rdx],0x1
 102fc27:	add    BYTE PTR [rax+0x2800011a],ah
 102fc2d:	std    
 102fc2e:	add    DWORD PTR [rax],eax
 102fc30:	movabs al,ds:0x3800011aed00011a
 102fc39:	std    
 102fc3a:	add    DWORD PTR [rax],eax
 102fc3c:	in     eax,dx
 102fc3d:	sbb    al,BYTE PTR [rcx]
 102fc3f:	add    BYTE PTR [rdi],al
 102fc41:	sbb    eax,DWORD PTR [rcx]
 102fc43:	add    BYTE PTR [rbp+rdi*8+0x1],cl
 102fc47:	add    BYTE PTR [rdi],al
 102fc49:	sbb    eax,DWORD PTR [rcx]
 102fc4b:	add    BYTE PTR [rsi],bl
 102fc4d:	sbb    eax,DWORD PTR [rcx]
 102fc4f:	add    BYTE PTR [rax-0x3],ah
 102fc52:	add    DWORD PTR [rax],eax
 102fc54:	xor    BYTE PTR [rbx],bl
 102fc56:	add    DWORD PTR [rax],eax
 102fc58:	add    ebx,DWORD PTR [rsi]
 102fc5a:	add    DWORD PTR [rax],eax
 102fc5c:	jo     0x102fc5b
 102fc5e:	add    DWORD PTR [rax],eax
 102fc60:	adc    BYTE PTR [rsi],bl
 102fc62:	add    DWORD PTR [rax],eax
 102fc64:	(bad)  
 102fc65:	(bad)  
 102fc66:	add    DWORD PTR [rax],eax
 102fc68:	hlt    
 102fc69:	std    
 102fc6a:	add    DWORD PTR [rax],eax
 102fc6c:	xor    BYTE PTR [rsi],bl
 102fc6e:	add    DWORD PTR [rax],eax
 102fc70:	cwde   
 102fc71:	(bad)  
 102fc72:	add    DWORD PTR [rax],eax
 102fc74:	cld    
 102fc75:	std    
 102fc76:	add    DWORD PTR [rax],eax
 102fc78:	movabs al,ds:0x3800011f3f00011e
 102fc81:	inc    BYTE PTR [rcx]
 102fc83:	add    BYTE PTR [rax+0x1f],dl
 102fc86:	add    DWORD PTR [rax],eax
 102fc88:	ja     0x102fcaa
 102fc8a:	add    DWORD PTR [rax],eax
 102fc8c:	mov    dh,bh
 102fc8e:	add    DWORD PTR [rax],eax
 102fc90:	and    BYTE PTR [rax],0x1
 102fc93:	add    BYTE PTR [rax],ah
 102fc95:	and    DWORD PTR [rcx],eax
 102fc97:	add    ah,cl
 102fc99:	inc    BYTE PTR [rcx]
 102fc9b:	add    BYTE PTR [rax],dh
 102fc9d:	and    DWORD PTR [rcx],eax
 102fc9f:	add    BYTE PTR [rbp+0x22],al
 102fca2:	add    DWORD PTR [rax],eax
 102fca4:	or     bh,bh
 102fca6:	add    DWORD PTR [rax],eax
 102fca8:	push   rax
 102fca9:	and    al,BYTE PTR [rcx]
 102fcab:	add    BYTE PTR [rdi-0x63fffed7],al
 102fcb1:	inc    DWORD PTR [rcx]
 102fcb3:	add    BYTE PTR [rax+0x19000129],dl
 102fcb9:	sub    eax,DWORD PTR [rcx]
 102fcbb:	add    BYTE PTR [rdx+rax*1],al
 102fcbe:	add    al,BYTE PTR [rax]
 102fcc0:	and    BYTE PTR [rbx],ch
 102fcc2:	add    DWORD PTR [rax],eax
 102fcc4:	out    dx,al
 102fcc5:	xor    al,BYTE PTR [rcx]
 102fcc7:	add    BYTE PTR [rax+0x202],dl
 102fccd:	xor    eax,DWORD PTR [rcx]
 102fccf:	add    BYTE PTR [rbx-0x3ffffecd],ah
 102fcd5:	add    eax,0x33b00002
 102fcda:	add    DWORD PTR [rax],eax
 102fcdc:	xchg   edi,eax
 102fcdd:	xor    al,0x1
 102fcdf:	add    ah,dl
 102fce1:	add    eax,0x34a00002
 102fce6:	add    DWORD PTR [rax],eax
 102fce8:	out    0x36,eax
 102fcea:	add    DWORD PTR [rax],eax
 102fcec:	sub    al,0x6
 102fcee:	add    al,BYTE PTR [rax]
 102fcf0:	lock add DWORD PTR ss:[rax],eax
 102fcf4:	fs (bad) 
 102fcf6:	add    DWORD PTR [rax],eax
 102fcf8:	in     al,dx
 102fcf9:	(bad)  
 102fcfa:	add    al,BYTE PTR [rax]
 102fcfc:	jo     0x102fd35
 102fcfe:	add    DWORD PTR [rax],eax
 102fd00:	jp     0x102fd39
 102fd02:	add    DWORD PTR [rax],eax
 102fd04:	and    BYTE PTR [rdi],al
 102fd06:	add    al,BYTE PTR [rax]
 102fd08:	jp     0x102fd41
 102fd0a:	add    DWORD PTR [rax],eax
 102fd0c:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 102fd0d:	(bad)  
 102fd0e:	add    DWORD PTR [rax],eax
 102fd10:	sub    BYTE PTR [rdi],al
 102fd12:	add    al,BYTE PTR [rax]
 102fd14:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 102fd15:	(bad)  
 102fd16:	add    DWORD PTR [rax],eax
 102fd18:	test   eax,0x3c000137
 102fd1d:	(bad)  
 102fd1e:	add    al,BYTE PTR [rax]
 102fd20:	mov    al,0x37
 102fd22:	add    DWORD PTR [rax],eax
 102fd24:	or     BYTE PTR [rax],bh
 102fd26:	add    DWORD PTR [rax],eax
 102fd28:	rex.WR (bad) 
 102fd2a:	add    al,BYTE PTR [rax]
 102fd2c:	and    BYTE PTR [rax],bh
 102fd2e:	add    DWORD PTR [rax],eax
 102fd30:	cmp    BYTE PTR gs:[rcx],al
 102fd33:	add    BYTE PTR [rdi+rax*1+0x2],bh
 102fd37:	add    BYTE PTR [rax+0x38],dh
 102fd3a:	add    DWORD PTR [rax],eax
 102fd3c:	test   al,0x38
 102fd3e:	add    DWORD PTR [rax],eax
 102fd40:	mov    BYTE PTR [rdi],al
 102fd42:	add    al,BYTE PTR [rax]
 102fd44:	mov    al,0x38
 102fd46:	add    DWORD PTR [rax],eax
 102fd48:	cwde   
 102fd49:	cmp    DWORD PTR [rcx],eax
 102fd4b:	add    BYTE PTR [rax-0x5ffffdf9],bh
 102fd51:	cmp    DWORD PTR [rcx],eax
 102fd53:	add    dh,ch
 102fd55:	cmp    DWORD PTR [rcx],eax
 102fd57:	add    al,bh
 102fd59:	(bad)  
 102fd5a:	add    al,BYTE PTR [rax]
 102fd5c:	add    BYTE PTR [rdx],bh
 102fd5e:	add    DWORD PTR [rax],eax
 102fd60:	push   rdx
 102fd61:	cmp    al,BYTE PTR [rcx]
 102fd63:	add    BYTE PTR [rax+rcx*1],al
 102fd66:	add    al,BYTE PTR [rax]
 102fd68:	(bad)  
 102fd69:	cmp    al,BYTE PTR [rcx]
 102fd6b:	add    BYTE PTR [rdi+0x3a],dh
 102fd6e:	add    DWORD PTR [rax],eax
 102fd70:	push   rsp
 102fd71:	or     BYTE PTR [rdx],al
 102fd73:	add    BYTE PTR [rax+0x3000013a],al
 102fd79:	cmp    eax,DWORD PTR [rcx]
 102fd7b:	add    BYTE PTR [rax+rcx*1+0x2],bl
 102fd7f:	add    BYTE PTR [rax+0x3b],al
 102fd82:	add    DWORD PTR [rax],eax
 102fd84:	jne    0x102fdc2
 102fd86:	add    DWORD PTR [rax],eax
 102fd88:	mov    WORD PTR [rax],cs
 102fd8a:	add    al,BYTE PTR [rax]
 102fd8c:	cmp    BYTE PTR [rcx+rax*1],0x0
 102fd90:	mov    bh,0x3d
 102fd92:	add    DWORD PTR [rax],eax
 102fd94:	adc    BYTE PTR [rcx],cl
 102fd96:	add    al,BYTE PTR [rax]
 102fd98:	sar    BYTE PTR [rip+0x3e610001],0x1        # 0x3f63fda0
 102fd9f:	add    BYTE PTR [rax+0x70000209],bl
 102fda5:	add    DWORD PTR ds:[rax],eax
 102fda8:	or     eax,0xec000149
 102fdad:	or     DWORD PTR [rdx],eax
 102fdaf:	add    BYTE PTR [rax],dh
 102fdb1:	add    QWORD PTR [r8],rax
 102fdb4:	push   0xffffffffc8000149
 102fdb9:	or     eax,DWORD PTR [rdx]
 102fdbb:	add    BYTE PTR [rax-0x47fffeb7],al
 102fdc1:	add    QWORD PTR [r8],rax
 102fdc4:	clc    
 102fdc5:	or     eax,DWORD PTR [rdx]
 102fdc7:	add    al,al
 102fdc9:	add    QWORD PTR [r8],rax
 102fdcc:	mov    al,0x4b
 102fdce:	add    DWORD PTR [rax],eax
 102fdd0:	sub    BYTE PTR [rdx+rax*1],cl
 102fdd3:	add    al,al
 102fdd5:	rex.WXB add QWORD PTR [r8],rax
 102fdd8:	xlat   BYTE PTR ds:[rbx]
 102fdd9:	rex.WXB add QWORD PTR [r8],rax
 102fddc:	ins    BYTE PTR es:[rdi],dx
 102fddd:	or     al,0x2
 102fddf:	add    al,ah
 102fde1:	rex.WXB add QWORD PTR [r8],rax
 102fde4:	test   DWORD PTR [rbx+0x1],0x20c7400
 102fdeb:	add    BYTE PTR [rax],dl
 102fded:	add    QWORD PTR [rax],r8
 102fdf0:	rex.W
 102fdf1:	add    QWORD PTR [rax],r8
 102fdf4:	jl     0x102fe02
 102fdf6:	add    al,BYTE PTR [rax]
 102fdf8:	push   rax
 102fdf9:	add    QWORD PTR [rax],r8
 102fdfc:	add    QWORD PTR [eax],r8
 102fe00:	lods   al,BYTE PTR ds:[rsi]
 102fe01:	or     al,0x2
 102fe03:	add    BYTE PTR [rax+0x4c],dh
 102fe06:	add    DWORD PTR [rax],eax
 102fe08:	stos   DWORD PTR es:[rdi],eax
 102fe09:	add    QWORD PTR [rax],r8
 102fe0c:	mov    ah,0xc
 102fe0e:	add    al,BYTE PTR [rax]
 102fe10:	ror    BYTE PTR [rcx+rax*1+0x0],1
 102fe14:	or     BYTE PTR [rbp+0x1],cl
 102fe17:	add    BYTE PTR [rsp+rcx*1+0x4d100002],bh
 102fe1e:	add    DWORD PTR [rax],eax
 102fe20:	(bad)  
 102fe21:	add    QWORD PTR [r8],r8
 102fe24:	in     al,dx
 102fe25:	or     al,0x2
 102fe27:	add    BYTE PTR [rax],dh
 102fe29:	add    QWORD PTR [r8],r8
 102fe2c:	rex.RXB
 102fe2d:	add    QWORD PTR [r8],r8
 102fe30:	hlt    
 102fe31:	or     al,0x2
 102fe33:	add    BYTE PTR [rax+0x4d],dl
 102fe36:	add    DWORD PTR [rax],eax
 102fe38:	mov    ecx,DWORD PTR [rbp+0x1]
 102fe3b:	add    ah,bh
 102fe3d:	or     al,0x2
 102fe3f:	add    BYTE PTR [rax-0x3bfffeb3],ah
 102fe45:	rex.WRX add QWORD PTR [rax],r8
 102fe48:	add    al,0xd
 102fe4a:	add    al,BYTE PTR [rax]
 102fe4c:	ror    BYTE PTR [rsi+0x1],1
 102fe4f:	add    dl,dh
 102fe51:	rex.WRXB add QWORD PTR [r8],r8
 102fe54:	mov    BYTE PTR [rip+0x50100002],cl        # 0x5112fe5c
 102fe5a:	add    DWORD PTR [rax],eax
 102fe5c:	rex.W push rax
 102fe5e:	add    DWORD PTR [rax],eax
 102fe60:	or     al,0xe
 102fe62:	add    al,BYTE PTR [rax]
 102fe64:	push   rax
 102fe65:	push   rax
 102fe66:	add    DWORD PTR [rax],eax
 102fe68:	outs   dx,DWORD PTR ds:[rsi]
 102fe69:	push   rax
 102fe6a:	add    DWORD PTR [rax],eax
 102fe6c:	cmp    al,0xe
 102fe6e:	add    al,BYTE PTR [rax]
 102fe70:	adc    BYTE PTR [rax+0x1],0x0
 102fe74:	fcom   DWORD PTR [rax+0x1]
 102fe77:	add    BYTE PTR [rsi+rcx*1+0x2],bl
 102fe7b:	add    al,bl
 102fe7d:	push   rax
 102fe7e:	add    DWORD PTR [rax],eax
 102fe80:	stc    
 102fe81:	push   rax
 102fe82:	add    DWORD PTR [rax],eax
 102fe84:	jo     0x102fe94
 102fe86:	add    al,BYTE PTR [rax]
 102fe88:	stc    
 102fe89:	push   rax
 102fe8a:	add    DWORD PTR [rax],eax
 102fe8c:	rex.WRXB push r9
 102fe8e:	add    DWORD PTR [rax],eax
 102fe90:	test   BYTE PTR [rsi],cl
 102fe92:	add    al,BYTE PTR [rax]
 102fe94:	rex.WRXB push r9
 102fe96:	add    DWORD PTR [rax],eax
 102fe98:	pop    rbx
 102fe99:	push   rcx
 102fe9a:	add    DWORD PTR [rax],eax
 102fe9c:	cwde   
 102fe9d:	(bad)  
 102fe9e:	add    al,BYTE PTR [rax]
 102fea0:	pop    rbx
 102fea1:	push   rcx
 102fea2:	add    DWORD PTR [rax],eax
 102fea4:	ja     0x102fef7
 102fea6:	add    DWORD PTR [rax],eax
 102fea8:	test   al,0xe
 102feaa:	add    al,BYTE PTR [rax]
 102feac:	adc    BYTE PTR [rcx+0x1],0x0
 102feb0:	lahf   
 102feb1:	push   rcx
 102feb2:	add    DWORD PTR [rax],eax
 102feb4:	mov    eax,0xb000020e
 102feb9:	push   rcx
 102feba:	add    DWORD PTR [rax],eax
 102febc:	cmp    eax,0xe0000152
 102fec1:	(bad)  
 102fec2:	add    al,BYTE PTR [rax]
 102fec4:	push   rax
 102fec5:	push   rdx
 102fec6:	add    DWORD PTR [rax],eax
 102fec8:	(bad)  
 102fec9:	push   rdx
 102feca:	add    DWORD PTR [rax],eax
 102fecc:	clc    
 102fecd:	(bad)  
 102fece:	add    al,BYTE PTR [rax]
 102fed0:	(bad)  
 102fed1:	push   rdx
 102fed2:	add    DWORD PTR [rax],eax
 102fed4:	fist   DWORD PTR [rdx+0x1]
 102fed7:	add    BYTE PTR [rdi+rcx*1],al
 102feda:	add    al,BYTE PTR [rax]
 102fedc:	fist   DWORD PTR [rdx+0x1]
 102fedf:	add    dl,ah
 102fee1:	push   rdx
 102fee2:	add    DWORD PTR [rax],eax
 102fee4:	sbb    BYTE PTR [rdi],cl
 102fee6:	add    al,BYTE PTR [rax]
 102fee8:	loop   0x102ff3c
 102feea:	add    DWORD PTR [rax],eax
 102feec:	in     eax,dx
 102feed:	push   rdx
 102feee:	add    DWORD PTR [rax],eax
 102fef0:	sub    al,0xf
 102fef2:	add    al,BYTE PTR [rax]
 102fef4:	add    BYTE PTR [rbx+0x1],dl
 102fef7:	add    BYTE PTR [rdi],bl
 102fef9:	push   rbx
 102fefa:	add    DWORD PTR [rax],eax
 102fefc:	cmp    al,0xf
 102fefe:	add    al,BYTE PTR [rax]
 102ff00:	xor    BYTE PTR [rbx+0x1],dl
 102ff03:	add    BYTE PTR [rbp+0x5c000153],al
 102ff09:	lar    eax,WORD PTR [rax]
 102ff0c:	test   DWORD PTR [rbx+0x1],edx
 102ff0f:	add    BYTE PTR [rsi+0x70000153],ah
 102ff15:	lar    eax,WORD PTR [rax]
 102ff18:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 102ff19:	push   rbx
 102ff1a:	add    DWORD PTR [rax],eax
 102ff1c:	cld    
 102ff1d:	push   rbx
 102ff1e:	add    DWORD PTR [rax],eax
 102ff20:	test   BYTE PTR [rdi],cl
 102ff22:	add    al,BYTE PTR [rax]
 102ff24:	cld    
 102ff25:	push   rbx
 102ff26:	add    DWORD PTR [rax],eax
 102ff28:	or     BYTE PTR [rcx+rax*1+0x0],dl
 102ff2c:	cwde   
 102ff2d:	lar    eax,WORD PTR [rax]
 102ff30:	or     BYTE PTR [rcx+rax*1+0x0],dl
 102ff34:	and    al,0x54
 102ff36:	add    DWORD PTR [rax],eax
 102ff38:	test   al,0xf
 102ff3a:	add    al,BYTE PTR [rax]
 102ff3c:	xor    BYTE PTR [rcx+rax*1+0x0],dl
 102ff40:	rex.WRXB push r12
 102ff42:	add    DWORD PTR [rax],eax
 102ff44:	mov    eax,0x7000020f
 102ff49:	push   rsp
 102ff4a:	add    DWORD PTR [rax],eax
 102ff4c:	test   al,0x54
 102ff4e:	add    DWORD PTR [rax],eax
 102ff50:	loopne 0x102ff61
 102ff52:	add    al,BYTE PTR [rax]
 102ff54:	mov    al,0x54
 102ff56:	add    DWORD PTR [rax],eax
 102ff58:	(bad)  
 102ff59:	push   rsp
 102ff5a:	add    DWORD PTR [rax],eax
 102ff5c:	adc    BYTE PTR [rax],dl
 102ff5e:	add    al,BYTE PTR [rax]
 102ff60:	loopne 0x102ffb6
 102ff62:	add    DWORD PTR [rax],eax
 102ff64:	ds push rbp
 102ff66:	add    DWORD PTR [rax],eax
 102ff68:	sbb    BYTE PTR [rax],dl
 102ff6a:	add    al,BYTE PTR [rax]
 102ff6c:	push   rax
 102ff6d:	push   rbp
 102ff6e:	add    DWORD PTR [rax],eax
 102ff70:	rcl    DWORD PTR [rsi+0x1],0x0
 102ff74:	rex.WR adc BYTE PTR [rdx],r8b
 102ff77:	add    al,dl
 102ff79:	push   rsi
 102ff7a:	add    DWORD PTR [rax],eax
 102ff7c:	out    dx,eax
 102ff7d:	push   rsi
 102ff7e:	add    DWORD PTR [rax],eax
 102ff80:	pushf  
 102ff81:	adc    BYTE PTR [rdx],al
 102ff83:	add    BYTE PTR [rax],al
 102ff85:	push   rdi
 102ff86:	add    DWORD PTR [rax],eax
 102ff88:	pop    rax
 102ff89:	push   rdi
 102ff8a:	add    DWORD PTR [rax],eax
 102ff8c:	mov    esp,0x58000210
 102ff91:	push   rdi
 102ff92:	add    DWORD PTR [rax],eax
 102ff94:	jns    0x102ffed
 102ff96:	add    DWORD PTR [rax],eax
 102ff98:	rcl    BYTE PTR [rax],1
 102ff9a:	add    al,BYTE PTR [rax]
 102ff9c:	jns    0x102fff5
 102ff9e:	add    DWORD PTR [rax],eax
 102ffa0:	iret   
 102ffa1:	push   rdi
 102ffa2:	add    DWORD PTR [rax],eax
 102ffa4:	in     al,0x10
 102ffa6:	add    al,BYTE PTR [rax]
 102ffa8:	iret   
 102ffa9:	push   rdi
 102ffaa:	add    DWORD PTR [rax],eax
 102ffac:	fist   DWORD PTR [rdi+0x1]
 102ffaf:	add    al,bh
 102ffb1:	adc    BYTE PTR [rdx],al
 102ffb3:	add    bl,bl
 102ffb5:	push   rdi
 102ffb6:	add    DWORD PTR [rax],eax
 102ffb8:	not    DWORD PTR [rdi+0x1]
 102ffbb:	add    BYTE PTR [rax],cl
 102ffbd:	adc    DWORD PTR [rdx],eax
 102ffbf:	add    BYTE PTR [rax],al
 102ffc1:	pop    rax
 102ffc2:	add    DWORD PTR [rax],eax
 102ffc4:	(bad)  
 102ffc5:	pop    rax
 102ffc6:	add    DWORD PTR [rax],eax
 102ffc8:	sbb    BYTE PTR [rcx],dl
 102ffca:	add    al,BYTE PTR [rax]
 102ffcc:	xor    BYTE PTR [rax+0x1],bl
 102ffcf:	add    BYTE PTR [rbp+0x40000158],bh
 102ffd5:	adc    DWORD PTR [rdx],eax
 102ffd7:	add    al,dl
 102ffd9:	pop    rax
 102ffda:	add    DWORD PTR [rax],eax
 102ffdc:	out    dx,eax
 102ffdd:	pop    rax
 102ffde:	add    DWORD PTR [rax],eax
 102ffe0:	pop    rax
 102ffe1:	adc    DWORD PTR [rdx],eax
 102ffe3:	add    BYTE PTR [rax],al
 102ffe5:	pop    rcx
 102ffe6:	add    DWORD PTR [rax],eax
 102ffe8:	pop    rax
 102ffe9:	pop    rcx
 102ffea:	add    DWORD PTR [rax],eax
 102ffec:	js     0x102ffff
 102ffee:	add    al,BYTE PTR [rax]
 102fff0:	pop    rax
 102fff1:	pop    rcx
 102fff2:	add    DWORD PTR [rax],eax
 102fff4:	jns    0x103004f
 102fff6:	add    DWORD PTR [rax],eax
 102fff8:	mov    WORD PTR [rcx],ss
 102fffa:	add    al,BYTE PTR [rax]
 102fffc:	jns    0x1030057
 102fffe:	add    DWORD PTR [rax],eax
 1030000:	iret   
 1030001:	pop    rcx
 1030002:	add    DWORD PTR [rax],eax
 1030004:	movabs al,ds:0xdb000159cf000211
 103000d:	pop    rcx
 103000e:	add    DWORD PTR [rax],eax
 1030010:	mov    ah,0x11
 1030012:	add    al,BYTE PTR [rax]
 1030014:	fistp  DWORD PTR [rcx+0x1]
 1030017:	add    bh,dh
 1030019:	pop    rcx
 103001a:	add    DWORD PTR [rax],eax
 103001c:	(bad)  
 103001d:	adc    DWORD PTR [rdx],eax
 103001f:	add    BYTE PTR [rax],al
 1030021:	pop    rdx
 1030022:	add    DWORD PTR [rax],eax
 1030024:	(bad)  
 1030025:	pop    rdx
 1030026:	add    DWORD PTR [rax],eax
 1030028:	(bad)  
 1030029:	adc    DWORD PTR [rdx],eax
 103002b:	add    BYTE PTR [rax],dh
 103002d:	pop    rdx
 103002e:	add    DWORD PTR [rax],eax
 1030030:	mov    ebp,0xfc00015a
 1030035:	adc    DWORD PTR [rdx],eax
 1030037:	add    al,dl
 1030039:	pop    rdx
 103003a:	add    DWORD PTR [rax],eax
 103003c:	out    dx,eax
 103003d:	pop    rdx
 103003e:	add    DWORD PTR [rax],eax
 1030040:	adc    al,0x12
 1030042:	add    al,BYTE PTR [rax]
 1030044:	add    BYTE PTR [rbx+0x1],bl
 1030047:	add    BYTE PTR [rax+0x5b],bl
 103004a:	add    DWORD PTR [rax],eax
 103004c:	xor    al,0x12
 103004e:	add    al,BYTE PTR [rax]
 1030050:	pop    rax
 1030051:	pop    rbx
 1030052:	add    DWORD PTR [rax],eax
 1030054:	jns    0x10300b1
 1030056:	add    DWORD PTR [rax],eax
 1030058:	rex.W adc al,BYTE PTR [rdx]
 103005b:	add    BYTE PTR [rcx+0x5b],bh
 103005e:	add    DWORD PTR [rax],eax
 1030060:	iret   
 1030061:	pop    rbx
 1030062:	add    DWORD PTR [rax],eax
 1030064:	pop    rsp
 1030065:	adc    al,BYTE PTR [rdx]
 1030067:	add    bh,cl
 1030069:	pop    rbx
 103006a:	add    DWORD PTR [rax],eax
 103006c:	fistp  DWORD PTR [rbx+0x1]
 103006f:	add    BYTE PTR [rax+0x12],dh
 1030072:	add    al,BYTE PTR [rax]
 1030074:	fistp  DWORD PTR [rbx+0x1]
 1030077:	add    bh,dh
 1030079:	pop    rbx
 103007a:	add    DWORD PTR [rax],eax
 103007c:	adc    BYTE PTR [rdx],0x2
 103007f:	add    BYTE PTR [rax],al
 1030081:	pop    rsp
 1030082:	add    DWORD PTR [rax],eax
 1030084:	(bad)  
 1030085:	pop    rsp
 1030086:	add    DWORD PTR [rax],eax
 1030088:	nop
 1030089:	adc    al,BYTE PTR [rdx]
 103008b:	add    BYTE PTR [rax],dh
 103008d:	pop    rsp
 103008e:	add    DWORD PTR [rax],eax
 1030090:	movabs eax,ds:0xb0000212b800015d
 1030099:	pop    rbp
 103009a:	add    DWORD PTR [rax],eax
 103009c:	cmp    ebx,DWORD PTR [rsi+0x1]
 103009f:	add    BYTE PTR [rax],cl
 10300a1:	adc    eax,DWORD PTR [rdx]
 10300a3:	add    BYTE PTR [rax+0x5e],dl
 10300a6:	add    DWORD PTR [rax],eax
 10300a8:	(bad)  
 10300a9:	(bad)  
 10300aa:	add    DWORD PTR [rax],eax
 10300ac:	adc    r8d,DWORD PTR [rdx]
 10300af:	add    BYTE PTR [rax],dl
 10300b1:	(bad)  
 10300b2:	add    DWORD PTR [rax],eax
 10300b4:	(bad)  
 10300b5:	(bad)  
 10300b6:	add    DWORD PTR [rax],eax
 10300b8:	movabs al,ds:0xa700016310000213
 10300c1:	add    DWORD PTR fs:[rax],eax
 10300c4:	cld    
 10300c5:	adc    eax,DWORD PTR [rdx]
 10300c7:	add    BYTE PTR [rax+0x7f000164],dh
 10300cd:	add    DWORD PTR gs:[rax],eax
 10300d0:	add    al,0x14
 10300d2:	add    al,BYTE PTR [rax]
 10300d4:	nop
 10300d5:	add    DWORD PTR gs:[rax],eax
 10300d8:	cdq    
 10300d9:	add    WORD PTR [rax],ax
 10300dc:	or     al,0x14
 10300de:	add    al,BYTE PTR [rax]
 10300e0:	mov    al,0x66
 10300e2:	add    DWORD PTR [rax],eax
 10300e4:	(bad)  
 10300e5:	add    WORD PTR [rax],ax
 10300e8:	sub    al,0x14
 10300ea:	add    al,BYTE PTR [rax]
 10300ec:	rex
 10300ed:	add    DWORD PTR [eax],eax
 10300f0:	leave  
 10300f1:	add    DWORD PTR [eax],eax
 10300f4:	xor    al,0x14
 10300f6:	add    al,BYTE PTR [rax]
 10300f8:	shl    BYTE PTR [rdi+0x1],1
 10300fb:	add    BYTE PTR [rbp+0x68],al
 10300fe:	add    DWORD PTR [rax],eax
 1030100:	rex.R adc al,0x2
 1030103:	add    BYTE PTR [rax+0x68],dl
 1030106:	add    DWORD PTR [rax],eax
 1030108:	fld    TBYTE PTR [rax+0x1]
 103010b:	add    BYTE PTR [rax+0x14],bl
 103010e:	add    al,BYTE PTR [rax]
 1030110:	adc    BYTE PTR [rcx+0x1],ch
 1030113:	add    BYTE PTR [rdx],dh
 1030115:	imul   eax,DWORD PTR [rcx],0x2146800
 103011b:	add    BYTE PTR [rax+0x69],al
 103011e:	add    DWORD PTR [rax],eax
 1030120:	pop    rax
 1030121:	imul   eax,DWORD PTR [rcx],0x2147000
 1030127:	add    BYTE PTR [rax-0x57fffe97],dl
 103012d:	imul   eax,DWORD PTR [rcx],0x2147800
 1030133:	add    al,dl
 1030135:	imul   eax,DWORD PTR [rcx],0x169f500
 103013b:	add    BYTE PTR [rax+0x214],al
 1030141:	push   0x1
 1030143:	add    BYTE PTR [rsi+0x6a],bl
 1030146:	add    DWORD PTR [rax],eax
 1030148:	mov    BYTE PTR [rdx+rax*1],dl
 103014b:	add    BYTE PTR [rax+0x6a],dh
 103014e:	add    DWORD PTR [rax],eax
 1030150:	mov    edx,0x9400016a
 1030155:	adc    al,0x2
 1030157:	add    al,dh
 1030159:	push   0x1
 103015b:	add    BYTE PTR [rcx],al
 103015d:	imul   eax,DWORD PTR [rcx],0x0
 1030160:	fcom   QWORD PTR [rdx+rax*1]
 1030163:	add    BYTE PTR [rcx],al
 1030165:	imul   eax,DWORD PTR [rcx],0x0
 1030168:	scas   al,BYTE PTR es:[rdi]
 1030169:	imul   eax,DWORD PTR [rcx],0x0
 103016c:	in     al,0x14
 103016e:	add    al,BYTE PTR [rax]
 1030170:	scas   al,BYTE PTR es:[rdi]
 1030171:	imul   eax,DWORD PTR [rcx],0x0
 1030174:	mov    ah,0x6b
 1030176:	add    DWORD PTR [rax],eax
 1030178:	cld    
 1030179:	adc    al,0x2
 103017b:	add    al,al
 103017d:	imul   eax,DWORD PTR [rcx],0x0
 1030180:	or     ch,BYTE PTR [rcx+rax*1+0x0]
 1030184:	or     al,0x15
 1030186:	add    al,BYTE PTR [rax]
 1030188:	push   rax
 1030189:	ins    BYTE PTR es:[rdi],dx
 103018a:	add    DWORD PTR [rax],eax
 103018c:	adc    ch,BYTE PTR [rbp+0x1]
 103018f:	add    BYTE PTR [rbp+rdx*1+0x2],dl
 1030193:	add    BYTE PTR [rdx],dl
 1030195:	ins    DWORD PTR es:[rdi],dx
 1030196:	add    DWORD PTR [rax],eax
 1030198:	fldcw  WORD PTR [rbp+0x1]
 103019b:	add    BYTE PTR [rbp+rdx*1+0x2],ch
 103019f:	add    cl,bl
 10301a1:	ins    DWORD PTR es:[rdi],dx
 10301a2:	add    DWORD PTR [rax],eax
 10301a4:	lock ins DWORD PTR es:[rdi],dx
 10301a6:	add    DWORD PTR [rax],eax
 10301a8:	adc    BYTE PTR [rip+0x6df00002],0x1        # 0x6ef301b1
 10301af:	add    BYTE PTR [rcx],cl
 10301b1:	outs   dx,BYTE PTR ds:[rsi]
 10301b2:	add    DWORD PTR [rax],eax
 10301b4:	nop
 10301b5:	adc    eax,0x6e100002
 10301ba:	add    DWORD PTR [rax],eax
 10301bc:	xchg   ebx,eax
 10301bd:	outs   dx,BYTE PTR ds:[rsi]
 10301be:	add    DWORD PTR [rax],eax
 10301c0:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 10301c1:	adc    eax,0x6ea00002
 10301c6:	add    DWORD PTR [rax],eax
 10301c8:	outs   dx,BYTE PTR ds:[rsi]
 10301c9:	outs   dx,DWORD PTR ds:[rsi]
 10301ca:	add    DWORD PTR [rax],eax
 10301cc:	fcom   QWORD PTR [rip+0x6f800002]        # 0x708301d4
 10301d2:	add    DWORD PTR [rax],eax
 10301d4:	jns    0x1030246
 10301d6:	add    DWORD PTR [rax],eax
 10301d8:	hlt    
 10301d9:	adc    eax,0x70800002
 10301de:	add    DWORD PTR [rax],eax
 10301e0:	popf   
 10301e1:	jo     0x10301e4
 10301e3:	add    BYTE PTR [rsi+rdx*1],cl
 10301e6:	add    al,BYTE PTR [rax]
 10301e8:	mov    al,0x70
 10301ea:	add    DWORD PTR [rax],eax
 10301ec:	(bad)  
 10301ee:	add    DWORD PTR [rax],eax
 10301f0:	sub    al,0x16
 10301f2:	add    al,BYTE PTR [rax]
 10301f4:	(bad)  
 10301f6:	add    DWORD PTR [rax],eax
 10301f8:	mov    bh,0x72
 10301fa:	add    DWORD PTR [rax],eax
 10301fc:	cmp    al,0x16
 10301fe:	add    al,BYTE PTR [rax]
 1030200:	mov    bh,0x72
 1030202:	add    DWORD PTR [rax],eax
 1030204:	ret    0x172
 1030207:	add    BYTE PTR [rsi+rdx*1+0x2],bl
 103020b:	add    dl,al
 103020d:	jb     0x1030210
 103020f:	add    bl,ah
 1030211:	jb     0x1030214
 1030213:	add    BYTE PTR [rsi+rdx*1+0x2],ch
 1030217:	add    al,dh
 1030219:	jb     0x103021c
 103021b:	add    BYTE PTR [rdx],cl
 103021d:	je     0x1030220
 103021f:	add    BYTE PTR [rsi+rdx*1+0x74100002],cl
 1030226:	add    DWORD PTR [rax],eax
 1030228:	rex.RXB je 0x103022c
 103022b:	add    BYTE PTR [rsi+rdx*1+0x74500002],ah
 1030232:	add    DWORD PTR [rax],eax
 1030234:	(bad)  
 1030235:	je     0x1030238
 1030237:	add    BYTE PTR [rsi+rdx*1+0x74620002],ch
 103023e:	add    DWORD PTR [rax],eax
 1030240:	xchg   esp,eax
 1030241:	je     0x1030244
 1030243:	add    BYTE PTR [rsi+rdx*1+0x74940002],dh
 103024a:	add    DWORD PTR [rax],eax
 103024c:	cdq    
 103024d:	je     0x1030250
 103024f:	add    al,cl
 1030251:	(bad)  
 1030252:	add    al,BYTE PTR [rax]
 1030254:	and    al,0x75
 1030256:	add    DWORD PTR [rax],eax
 1030258:	mov    bl,0x75
 103025a:	add    DWORD PTR [rax],eax
 103025c:	fcom   DWORD PTR [rsi]
 103025e:	add    al,BYTE PTR [rax]
 1030260:	mov    esp,0x6000175
 1030265:	jbe    0x1030268
 1030267:	add    al,bh
 1030269:	(bad)  
 103026a:	add    al,BYTE PTR [rax]
 103026c:	or     al,0x76
 103026e:	add    DWORD PTR [rax],eax
 1030270:	imul   esi,DWORD PTR [rsi+0x1],0x2172800
 1030277:	add    BYTE PTR [rsi+rsi*2+0x1],bh
 103027b:	add    al,ah
 103027d:	jbe    0x1030280
 103027f:	add    BYTE PTR [rax+0x17],bl
 1030282:	add    al,BYTE PTR [rax]
 1030284:	add    BYTE PTR [rdi+0x1],dh
 1030287:	add    BYTE PTR [rdi],dl
 1030289:	ja     0x103028c
 103028b:	add    BYTE PTR [rdi+rdx*1+0x77200002],al
 1030292:	add    DWORD PTR [rax],eax
 1030294:	movsxd esi,DWORD PTR [rdi+0x1]
 1030297:	add    BYTE PTR [rdi+rdx*1+0x77700002],cl
 103029e:	add    DWORD PTR [rax],eax
 10302a0:	test   eax,0x98000177
 10302a5:	(bad)  
 10302a6:	add    al,BYTE PTR [rax]
 10302a8:	mov    al,0x77
 10302aa:	add    DWORD PTR [rax],eax
 10302ac:	cld    
 10302ad:	ja     0x10302b0
 10302af:	add    BYTE PTR [rax+0x10000217],ah
 10302b5:	js     0x10302b8
 10302b7:	add    BYTE PTR [rax+0x78],dh
 10302ba:	add    DWORD PTR [rax],eax
 10302bc:	lods   al,BYTE PTR ds:[rsi]
 10302bd:	(bad)  
 10302be:	add    al,BYTE PTR [rax]
 10302c0:	nop
 10302c1:	js     0x10302c4
 10302c3:	add    bl,ah
 10302c5:	add    BYTE PTR [rcx],0x0
 10302c8:	(bad)  
 10302c9:	(bad)  
 10302ca:	add    al,BYTE PTR [rax]
 10302cc:	lock add BYTE PTR [rcx],0x0
 10302d0:	outs   dx,DWORD PTR ds:[rsi]
 10302d1:	add    DWORD PTR [rcx],0x217bc00
 10302d7:	add    BYTE PTR [rax-0x1ffffe7f],al
 10302dd:	add    DWORD PTR [rcx],0x217e800
 10302e3:	add    al,dh
 10302e5:	add    DWORD PTR [rcx],0x1826c00
 10302eb:	add    al,dh
 10302ed:	(bad)  
 10302ee:	add    al,BYTE PTR [rax]
 10302f0:	add    BYTE PTR [rdx-0x7d42ffff],0x1
 10302f7:	add    al,bh
 10302f9:	(bad)  
 10302fa:	add    al,BYTE PTR [rax]
 10302fc:	rol    BYTE PTR [rdx-0x7cc9ffff],1
 1030302:	add    DWORD PTR [rax],eax
 1030304:	add    BYTE PTR [rax],bl
 1030306:	add    al,BYTE PTR [rax]
 1030308:	rex add DWORD PTR [rcx],0x0
 103030c:	jrcxz  0x1030291
 103030e:	add    DWORD PTR [rax],eax
 1030310:	or     BYTE PTR [rax],bl
 1030312:	add    al,BYTE PTR [rax]
 1030314:	lock add DWORD PTR [rcx],0x0
 1030318:	fild   DWORD PTR [rcx+rax*1+0x2181000]
 103031f:	add    BYTE PTR [rax],dl
 1030321:	test   DWORD PTR [rcx],eax
 1030323:	add    BYTE PTR [rax-0x7b],al
 1030326:	add    DWORD PTR [rax],eax
 1030328:	sbb    BYTE PTR [rax],bl
 103032a:	add    al,BYTE PTR [rax]
 103032c:	push   rax
 103032d:	test   DWORD PTR [rcx],eax
 103032f:	add    BYTE PTR [rdi-0x7b],ch
 1030332:	add    DWORD PTR [rax],eax
 1030334:	and    BYTE PTR [rax],bl
 1030336:	add    al,BYTE PTR [rax]
 1030338:	outs   dx,DWORD PTR ds:[rsi]
 1030339:	test   DWORD PTR [rcx],eax
 103033b:	add    dl,al
 103033d:	test   DWORD PTR [rcx],eax
 103033f:	add    BYTE PTR [rax+rbx*1],ch
 1030342:	add    al,BYTE PTR [rax]
 1030344:	ret    0x185
 1030347:	add    BYTE PTR [rax+rcx*4],dl
 103034a:	add    DWORD PTR [rax],eax
 103034c:	sbb    BYTE PTR [rdx],r8b
 103034f:	add    BYTE PTR [rax+rcx*4],dl
 1030352:	add    DWORD PTR [rax],eax
 1030354:	rex.WXB mov BYTE PTR [r9],al
 1030357:	add    BYTE PTR [rax+rbx*1+0x2],ah
 103035b:	add    BYTE PTR [rbx-0x78],cl
 103035e:	add    DWORD PTR [rax],eax
 1030360:	jae    0x10302ea
 1030362:	add    DWORD PTR [rax],eax
 1030364:	je     0x103037e
 1030366:	add    al,BYTE PTR [rax]
 1030368:	or     BYTE PTR [rax-0x754cffff],0x1
 103036f:	add    BYTE PTR [rax+rbx*1-0x753ffffe],al
 1030376:	add    DWORD PTR [rax],eax
 1030378:	out    0x8a,al
 103037a:	add    DWORD PTR [rax],eax
 103037c:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 103037d:	sbb    BYTE PTR [rdx],al
 103037f:	add    dh,ah
 1030381:	mov    al,BYTE PTR [rcx]
 1030383:	add    BYTE PTR [rdx],ah
 1030385:	mov    eax,DWORD PTR [rcx]
 1030387:	add    BYTE PTR [rax+rbx*1-0x74ddfffe],ch
 103038e:	add    DWORD PTR [rax],eax
 1030390:	xor    DWORD PTR [rbx+0x18c00001],ecx
 1030396:	add    al,BYTE PTR [rax]
 1030398:	rex mov eax,DWORD PTR [rcx]
 103039b:	add    ch,dh
 103039d:	mov    eax,DWORD PTR [rcx]
 103039f:	add    ah,bl
 10303a1:	sbb    BYTE PTR [rdx],al
 10303a3:	add    BYTE PTR [rax],al
 10303a5:	mov    WORD PTR [rcx],es
 10303a7:	add    cl,al
 10303a9:	mov    WORD PTR [rcx],es
 10303ab:	add    ah,ah
 10303ad:	sbb    BYTE PTR [rdx],al
 10303af:	add    al,dl
 10303b1:	mov    WORD PTR [rcx],es
 10303b3:	add    BYTE PTR [rdx],ch
 10303b5:	lea    eax,[rcx]
 10303b7:	add    ah,bh
 10303b9:	sbb    BYTE PTR [rdx],al
 10303bb:	add    BYTE PTR [rdx],ch
 10303bd:	lea    eax,[rcx]
 10303bf:	add    dh,ah
 10303c1:	lea    eax,[rcx]
 10303c3:	add    BYTE PTR [rcx+rbx*1],dl
 10303c6:	add    al,BYTE PTR [rax]
 10303c8:	out    0x8d,al
 10303ca:	add    DWORD PTR [rax],eax
 10303cc:	dec    DWORD PTR [rbp+0x19280001]
 10303d2:	add    al,BYTE PTR [rax]
 10303d4:	adc    BYTE PTR [rsi-0x71b5ffff],cl
 10303da:	add    DWORD PTR [rax],eax
 10303dc:	cmp    BYTE PTR [rcx],bl
 10303de:	add    al,BYTE PTR [rax]
 10303e0:	rex.WX mov es,WORD PTR [rcx]
 10303e3:	add    BYTE PTR [rbx],bh
 10303e5:	pop    QWORD PTR [rcx]
 10303e7:	add    BYTE PTR [rax+0x19],cl
 10303ea:	add    al,BYTE PTR [rax]
 10303ec:	cmp    ecx,DWORD PTR [rdi-0x70b7ffff]
 10303f2:	add    DWORD PTR [rax],eax
 10303f4:	sbb    DWORD PTR fs:[rdx],eax
 10303f7:	add    BYTE PTR [rax-0x71],dl
 10303fa:	add    DWORD PTR [rax],eax
 10303fc:	or     DWORD PTR [rdi+0x19740001],0x2
 1030403:	add    BYTE PTR [rbx+0x7c00018f],al
 1030409:	nop
 103040a:	add    DWORD PTR [rax],eax
 103040c:	sbb    BYTE PTR [rcx],0x2
 103040f:	add    BYTE PTR [rax+rdx*4+0x1],bh
 1030413:	add    BYTE PTR [rsi-0x5bfffe70],al
 1030419:	sbb    DWORD PTR [rdx],eax
 103041b:	add    BYTE PTR [rsi+0x1a000190],al
 1030421:	xchg   ecx,eax
 1030422:	add    DWORD PTR [rax],eax
 1030424:	mov    ah,0x19
 1030426:	add    al,BYTE PTR [rax]
 1030428:	and    BYTE PTR [rcx-0x6e5effff],dl
 103042e:	add    DWORD PTR [rax],eax
 1030430:	fcomp  DWORD PTR [rcx]
 1030432:	add    al,BYTE PTR [rax]
 1030434:	mov    al,0x91
 1030436:	add    DWORD PTR [rax],eax
 1030438:	adc    al,0x92
 103043a:	add    DWORD PTR [rax],eax
 103043c:	loopne 0x1030457
 103043e:	add    al,BYTE PTR [rax]
 1030440:	adc    al,0x92
 1030442:	add    DWORD PTR [rax],eax
 1030444:	jg     0x10303d8
 1030446:	add    DWORD PTR [rax],eax
 1030448:	call   0x80030666
 103044d:	xchg   edx,eax
 103044e:	add    DWORD PTR [rax],eax
 1030450:	pushf  
 1030451:	xchg   edx,eax
 1030452:	add    DWORD PTR [rax],eax
 1030454:	add    al,0x1a
 1030456:	add    al,BYTE PTR [rax]
 1030458:	pushf  
 1030459:	xchg   edx,eax
 103045a:	add    DWORD PTR [rax],eax
 103045c:	scas   eax,DWORD PTR es:[rdi]
 103045d:	xchg   edx,eax
 103045e:	add    DWORD PTR [rax],eax
 1030460:	and    BYTE PTR [rdx],bl
 1030462:	add    al,BYTE PTR [rax]
 1030464:	rcl    BYTE PTR [rdx-0x6d16ffff],0x1
 103046b:	add    BYTE PTR [rax],dh
 103046d:	sbb    al,BYTE PTR [rdx]
 103046f:	add    cl,ch
 1030471:	xchg   edx,eax
 1030472:	add    DWORD PTR [rax],eax
 1030474:	and    BYTE PTR [rbx+0x1a380001],dl
 103047a:	add    al,BYTE PTR [rax]
 103047c:	and    BYTE PTR [rbx-0x6c73ffff],dl
 1030482:	add    DWORD PTR [rax],eax
 1030484:	push   rax
 1030485:	sbb    al,BYTE PTR [rdx]
 1030487:	add    BYTE PTR [rbx+rdx*4-0x6c3affff],cl
 103048e:	add    DWORD PTR [rax],eax
 1030490:	ins    BYTE PTR es:[rdi],dx
 1030491:	sbb    al,BYTE PTR [rdx]
 1030493:	add    ch,al
 1030495:	xchg   ebx,eax
 1030496:	add    DWORD PTR [rax],eax
 1030498:	loopne 0x103042d
 103049a:	add    DWORD PTR [rax],eax
 103049c:	mov    BYTE PTR [rdx],bl
 103049e:	add    al,BYTE PTR [rax]
 10304a0:	hlt    
 10304a1:	xchg   ebx,eax
 10304a2:	add    DWORD PTR [rax],eax
 10304a4:	pop    rbp
 10304a5:	xchg   esp,eax
 10304a6:	add    DWORD PTR [rax],eax
 10304a8:	cwde   
 10304a9:	sbb    al,BYTE PTR [rdx]
 10304ab:	add    BYTE PTR [rax+0x23000194],al
 10304b1:	xchg   ebp,eax
 10304b2:	add    DWORD PTR [rax],eax
 10304b4:	test   al,0x1a
 10304b6:	add    al,BYTE PTR [rax]
 10304b8:	xor    BYTE PTR [rbp-0x6a05ffff],dl
 10304be:	add    DWORD PTR [rax],eax
 10304c0:	mov    ah,0x1a
 10304c2:	add    al,BYTE PTR [rax]
 10304c4:	and    BYTE PTR [rsi-0x6986ffff],dl
 10304ca:	add    DWORD PTR [rax],eax
 10304cc:	(bad)  
 10304cd:	sbb    al,BYTE PTR [rdx]
 10304cf:	add    BYTE PTR [rax-0x58fffe6a],al
 10304d5:	xchg   esi,eax
 10304d6:	add    DWORD PTR [rax],eax
 10304d8:	call   0xffffffffd10306f7
 10304dd:	xchg   esi,eax
 10304de:	add    DWORD PTR [rax],eax
 10304e0:	es xchg edi,eax
 10304e2:	add    DWORD PTR [rax],eax
 10304e4:	or     BYTE PTR [rbx],bl
 10304e6:	add    al,BYTE PTR [rax]
 10304e8:	xor    BYTE PTR [rdi-0x6875ffff],dl
 10304ee:	add    DWORD PTR [rax],eax
 10304f0:	sub    al,0x1b
 10304f2:	add    al,BYTE PTR [rax]
 10304f4:	add    BYTE PTR [rax-0x67f3ffff],bl
 10304fa:	add    DWORD PTR [rax],eax
 10304fc:	js     0x1030519
 10304fe:	add    al,BYTE PTR [rax]
 1030500:	or     al,0x98
 1030502:	add    DWORD PTR [rax],eax
 1030504:	push   0xffffffffffffff98
 1030506:	add    DWORD PTR [rax],eax
 1030508:	sbb    eax,DWORD PTR fs:[rdx]
 103050b:	add    BYTE PTR [rdx-0x68],ch
 103050e:	add    DWORD PTR [rax],eax
 1030510:	jno    0x10304aa
 1030512:	add    DWORD PTR [rax],eax
 1030514:	push   rsp
 1030515:	sbb    eax,DWORD PTR [rdx]
 1030517:	add    al,dl
 1030519:	cwde   
 103051a:	add    DWORD PTR [rax],eax
 103051c:	sub    BYTE PTR [rcx+0x1b800001],bl
 1030522:	add    al,BYTE PTR [rax]
 1030524:	xor    BYTE PTR [rcx-0x6596ffff],bl
 103052a:	add    DWORD PTR [rax],eax
 103052c:	mov    BYTE PTR [rbx],bl
 103052e:	add    al,BYTE PTR [rax]
 1030530:	jo     0x10304cc
 1030532:	add    DWORD PTR [rax],eax
 1030534:	neg    BYTE PTR [rdx+0x1b9c0001]
 103053a:	add    al,BYTE PTR [rax]
 103053c:	add    BYTE PTR [rbx-0x64b1ffff],bl
 1030542:	add    DWORD PTR [rax],eax
 1030544:	(bad)  
 1030545:	sbb    eax,DWORD PTR [rdx]
 1030547:	add    BYTE PTR [rax+0x3000019b],al
 103054d:	pushf  
 103054e:	add    DWORD PTR [rax],eax
 1030550:	rcr    BYTE PTR [rbx],1
 1030552:	add    al,BYTE PTR [rax]
 1030554:	rex pushf 
 1030556:	add    DWORD PTR [rax],eax
 1030558:	outs   dx,BYTE PTR ds:[rsi]
 1030559:	pushf  
 103055a:	add    DWORD PTR [rax],eax
 103055c:	xor    BYTE PTR [rdx+rax*1],bl
 103055f:	add    BYTE PTR [rsi-0x64],ch
 1030562:	add    DWORD PTR [rax],eax
 1030564:	cmp    bl,BYTE PTR [rbp+0x1c140001]
 103056a:	add    al,BYTE PTR [rax]
 103056c:	cmp    bl,BYTE PTR [rbp-0x62a3ffff]
 1030572:	add    DWORD PTR [rax],eax
 1030574:	clc    
 1030575:	sbb    eax,DWORD PTR [rdx]
 1030577:	add    BYTE PTR [rbp+rbx*4+0x1],bl
 103057b:	add    BYTE PTR [rdx-0x63],ch
 103057e:	add    DWORD PTR [rax],eax
 1030580:	in     al,0x1b
 1030582:	add    al,BYTE PTR [rax]
 1030584:	jo     0x1030523
 1030586:	add    DWORD PTR [rax],eax
 1030588:	xchg   BYTE PTR [rsi+0x1c3c0001],bl
 103058e:	add    al,BYTE PTR [rax]
 1030590:	mov    al,0x9e
 1030592:	add    DWORD PTR [rax],eax
 1030594:	call   0x51030737
 1030599:	sbb    al,0x2
 103059b:	add    al,dh
 103059d:	sahf   
 103059e:	add    DWORD PTR [rax],eax
 10305a0:	sbb    BYTE PTR [rdi+0x1c700001],0x2
 10305a7:	add    BYTE PTR [rax-0x33fffe61],dh
 10305ad:	lahf   
 10305ae:	add    DWORD PTR [rax],eax
 10305b0:	js     0x10305ce
 10305b2:	add    al,BYTE PTR [rax]
 10305b4:	xor    BYTE PTR [rax-0x5ec9ffff],ah
 10305ba:	add    DWORD PTR [rax],eax
 10305bc:	sbb    BYTE PTR [rdx+rax*1],0x0
 10305c0:	rex movabs eax,ds:0x1cbc0001a2170001
 10305ca:	add    al,BYTE PTR [rax]
 10305cc:	and    BYTE PTR [rdx-0x5d51ffff],ah
 10305d2:	add    DWORD PTR [rax],eax
 10305d4:	call   0x110307f5
 10305d9:	movabs ds:0x1d480001a33e0001,eax
 10305e2:	add    al,BYTE PTR [rax]
 10305e4:	movabs ds:0x1d340001a3770001,eax
 10305ee:	add    al,BYTE PTR [rax]
 10305f0:	ja     0x1030595
 10305f2:	add    DWORD PTR [rax],eax
 10305f4:	xchg   DWORD PTR [rbx+0x1d200001],esp
 10305fa:	add    al,BYTE PTR [rax]
 10305fc:	xchg   DWORD PTR [rbx-0x5c71ffff],esp
 1030602:	add    DWORD PTR [rax],eax
 1030604:	adc    BYTE PTR [rip+0xffffffffa3a00002],bl        # 0xffffffffa4a3060c
 103060a:	add    DWORD PTR [rax],eax
 103060c:	xor    eax,0x780001a4
 1030611:	sbb    eax,0xa4350002
 1030616:	add    DWORD PTR [rax],eax
 1030618:	(bad)  [rcx+rax*1+0x21d6400]
 103061f:	add    bl,bl
 1030621:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1030622:	add    DWORD PTR [rax],eax
 1030624:	mul    BYTE PTR [rcx+rax*1+0x21d5400]
 103062b:	add    BYTE PTR [rax],al
 103062d:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 103062e:	add    DWORD PTR [rax],eax
 1030630:	jrcxz  0x10305d7
 1030632:	add    DWORD PTR [rax],eax
 1030634:	mov    WORD PTR [rip+0xffffffffa5f00002],ds        # 0xffffffffa6f3063c
 103063a:	add    DWORD PTR [rax],eax
 103063c:	add    ah,BYTE PTR [rsi+0x1df00001]
 1030642:	add    al,BYTE PTR [rax]
 1030644:	add    ah,BYTE PTR [rsi-0x5963ffff]
 103064a:	add    DWORD PTR [rax],eax
 103064c:	fcomp  QWORD PTR [rip+0xffffffffa69c0002]        # 0xffffffffa79f0654
 1030652:	add    DWORD PTR [rax],eax
 1030654:	stos   BYTE PTR es:[rdi],al
 1030655:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1030656:	add    DWORD PTR [rax],eax
 1030658:	enter  0x21d,0x0
 103065c:	stos   BYTE PTR es:[rdi],al
 103065d:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 103065e:	add    DWORD PTR [rax],eax
 1030660:	mov    ch,0xa6
 1030662:	add    DWORD PTR [rax],eax
 1030664:	mov    eax,0xc000021d
 1030669:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 103066a:	add    DWORD PTR [rax],eax
 103066c:	(bad)  
 103066d:	test   al,0x1
 103066f:	add    al,bh
 1030671:	sbb    eax,0xa8200002
 1030676:	add    DWORD PTR [rax],eax
 1030678:	movabs ds:0xb000021e240001a8,eax
 1030681:	test   al,0x1
 1030683:	add    BYTE PTR [rbx+0x300001a9],ah
 1030689:	(bad)  
 103068a:	add    al,BYTE PTR [rax]
 103068c:	mov    al,0xa9
 103068e:	add    DWORD PTR [rax],eax
 1030690:	cld    
 1030691:	test   eax,0x1e780001
 1030696:	add    al,BYTE PTR [rax]
 1030698:	cld    
 1030699:	test   eax,0xaa680001
 103069e:	add    DWORD PTR [rax],eax
 10306a0:	fs (bad) 
 10306a2:	add    al,BYTE PTR [rax]
 10306a4:	push   0xffffffff8b0001aa
 10306a9:	stos   BYTE PTR es:[rdi],al
 10306aa:	add    DWORD PTR [rax],eax
 10306ac:	push   rax
 10306ad:	(bad)  
 10306ae:	add    al,BYTE PTR [rax]
 10306b0:	mov    ebp,DWORD PTR [rdx-0x5528ffff]
 10306b6:	add    DWORD PTR [rax],eax
 10306b8:	rex (bad) 
 10306ba:	add    al,BYTE PTR [rax]
 10306bc:	loopne 0x1030668
 10306be:	add    DWORD PTR [rax],eax
 10306c0:	or     al,0xab
 10306c2:	add    DWORD PTR [rax],eax
 10306c4:	lods   al,BYTE PTR ds:[rsi]
 10306c5:	(bad)  
 10306c6:	add    al,BYTE PTR [rax]
 10306c8:	or     al,0xab
 10306ca:	add    DWORD PTR [rax],eax
 10306cc:	lods   al,BYTE PTR es:[rsi]
 10306ce:	add    DWORD PTR [rax],eax
 10306d0:	xchg   esp,eax
 10306d1:	(bad)  
 10306d2:	add    al,BYTE PTR [rax]
 10306d4:	lods   al,BYTE PTR es:[rsi]
 10306d6:	add    DWORD PTR [rax],eax
 10306d8:	lods   al,BYTE PTR ds:[rsi]
 10306da:	add    DWORD PTR [rax],eax
 10306dc:	test   BYTE PTR [rsi],bl
 10306de:	add    al,BYTE PTR [rax]
 10306e0:	push   rax
 10306e1:	lods   al,BYTE PTR ds:[rsi]
 10306e2:	add    DWORD PTR [rax],eax
 10306e4:	rex.RX lods eax,DWORD PTR ds:[rsi]
 10306e6:	add    DWORD PTR [rax],eax
 10306e8:	mov    eax,0x5000021e
 10306ed:	lods   eax,DWORD PTR ds:[rsi]
 10306ee:	add    DWORD PTR [rax],eax
 10306f0:	cmp    ebp,DWORD PTR [rsi+0x1ee80001]
 10306f6:	add    al,BYTE PTR [rax]
 10306f8:	sub    BYTE PTR [rsi-0x5118ffff],0x1
 10306ff:	add    BYTE PTR [rax],dl
 1030701:	(bad)  
 1030702:	add    al,BYTE PTR [rax]
 1030704:	push   rax
 1030705:	scas   eax,DWORD PTR es:[rdi]
 1030706:	add    DWORD PTR [rax],eax
 1030708:	xchg   esp,eax
 1030709:	scas   eax,DWORD PTR es:[rdi]
 103070a:	add    DWORD PTR [rax],eax
 103070c:	sbb    al,0x1f
 103070e:	add    al,BYTE PTR [rax]
 1030710:	shl    BYTE PTR [rax-0x4eafffff],0x1
 1030717:	add    BYTE PTR [rdi+rbx*1],ah
 103071a:	add    al,BYTE PTR [rax]
 103071c:	xor    BYTE PTR [rcx-0x4e58ffff],0x1
 1030723:	add    BYTE PTR [rdi+rbx*1],ch
 1030726:	add    al,BYTE PTR [rax]
 1030728:	mov    al,0xb1
 103072a:	add    DWORD PTR [rax],eax
 103072c:	(bad)  
 103072d:	mov    dl,0x1
 103072f:	add    BYTE PTR [rdi+rbx*1],dh
 1030732:	add    al,BYTE PTR [rax]
 1030734:	xor    BYTE PTR [rdx-0x4d70ffff],dh
 103073a:	add    DWORD PTR [rax],eax
 103073c:	rex.W (bad) 
 103073e:	add    al,BYTE PTR [rax]
 1030740:	shl    BYTE PTR [rdx-0x4c69ffff],1
 1030746:	add    DWORD PTR [rax],eax
 1030748:	push   rsp
 1030749:	(bad)  
 103074a:	add    al,BYTE PTR [rax]
 103074c:	movabs al,ds:0x900001b3cb0001b3
 1030755:	(bad)  
 1030756:	add    al,BYTE PTR [rax]
 1030758:	loopne 0x103070d
 103075a:	add    DWORD PTR [rax],eax
 103075c:	outs   dx,BYTE PTR ds:[rsi]
 103075d:	mov    ah,0x1
 103075f:	add    BYTE PTR [rax-0x7ffffde1],bl
 1030765:	mov    ah,0x1
 1030767:	add    BYTE PTR [rbx-0x4b],dh
 103076a:	add    DWORD PTR [rax],eax
 103076c:	movabs al,ds:0x3e0001b58000021f
 1030775:	mov    dh,0x1
 1030777:	add    BYTE PTR [rax+0x5000021f],dh
 103077d:	mov    dh,0x1
 103077f:	add    dl,bh
 1030781:	mov    dh,0x1
 1030783:	add    BYTE PTR [rax],cl
 1030785:	and    BYTE PTR [rdx],al
 1030787:	add    dl,bh
 1030789:	mov    dh,0x1
 103078b:	add    BYTE PTR [rcx-0x49],dl
 103078e:	add    DWORD PTR [rax],eax
 1030790:	lock (bad) 
 1030792:	add    al,BYTE PTR [rax]
 1030794:	push   rcx
 1030795:	mov    bh,0x1
 1030797:	add    BYTE PTR [rcx-0x49],ah
 103079a:	add    DWORD PTR [rax],eax
 103079c:	loopne 0x10307bd
 103079e:	add    al,BYTE PTR [rax]
 10307a0:	jo     0x1030759
 10307a2:	add    DWORD PTR [rax],eax
 10307a4:	shl    BYTE PTR [rdi+0x20180001],cl
 10307aa:	add    al,BYTE PTR [rax]
 10307ac:	loopne 0x1030765
 10307ae:	add    DWORD PTR [rax],eax
 10307b0:	(bad)  
 10307b1:	mov    ecx,0x203c0001
 10307b6:	add    al,BYTE PTR [rax]
 10307b8:	rex mov ecx,0xbaa10001
 10307be:	add    DWORD PTR [rax],eax
 10307c0:	rex.W and BYTE PTR [rdx],al
 10307c3:	add    BYTE PTR [rax-0x17fffe46],dh
 10307c9:	mov    edx,0x20940001
 10307ce:	add    al,BYTE PTR [rax]
 10307d0:	call   0x7d03098f
 10307d5:	mov    ebx,0x20800001
 10307da:	add    al,BYTE PTR [rax]
 10307dc:	jl     0x1030799
 10307de:	add    DWORD PTR [rax],eax
 10307e0:	mov    bh,BYTE PTR [rbx+0x206c0001]
 10307e6:	add    al,BYTE PTR [rax]
 10307e8:	mov    bh,BYTE PTR [rbx-0x445effff]
 10307ee:	add    DWORD PTR [rax],eax
 10307f0:	pop    rsp
 10307f1:	and    BYTE PTR [rdx],al
 10307f3:	add    BYTE PTR [rax-0x17fffe45],dh
 10307f9:	mov    ebx,0x20e00001
 10307fe:	add    al,BYTE PTR [rax]
 1030800:	call   0x7d0309c0
 1030805:	mov    esp,0x20cc0001
 103080a:	add    al,BYTE PTR [rax]
 103080c:	jl     0x10307ca
 103080e:	add    DWORD PTR [rax],eax
 1030810:	mov    bh,BYTE PTR [rcx+rax*1+0x220b800]
 1030817:	add    BYTE PTR [rdx-0x5efffe44],cl
 103081d:	mov    esp,0x20a80001
 1030822:	add    al,BYTE PTR [rax]
 1030824:	mov    al,0xbc
 1030826:	add    DWORD PTR [rax],eax
 1030828:	idiv   BYTE PTR [rcx+rax*1+0x220f400]
 103082f:	add    BYTE PTR [rax],al
 1030831:	mov    ebp,0xbe380001
 1030836:	add    DWORD PTR [rax],eax
 1030838:	adc    al,0x21
 103083a:	add    al,BYTE PTR [rax]
 103083c:	rex mov esi,0xc1c00001
 1030842:	add    DWORD PTR [rax],eax
 1030844:	cmp    al,0x21
 1030846:	add    al,BYTE PTR [rax]
 1030848:	rol    cl,1
 103084a:	add    DWORD PTR [rax],eax
 103084c:	mov    edx,0x780001c2
 1030851:	and    DWORD PTR [rdx],eax
 1030853:	add    al,al
 1030855:	ret    0x1
 1030858:	gs ret 
 103085a:	add    DWORD PTR [rax],eax
 103085c:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 103085d:	and    DWORD PTR [rdx],eax
 103085f:	add    BYTE PTR [rax-0x3d],dh
 1030862:	add    DWORD PTR [rax],eax
 1030864:	cmc    
 1030865:	ret    
 1030866:	add    DWORD PTR [rax],eax
 1030868:	mov    ah,0x21
 103086a:	add    al,BYTE PTR [rax]
 103086c:	add    ah,al
 103086e:	add    DWORD PTR [rax],eax
 1030870:	pop    rdx
 1030871:	(bad)
 1030875:	and    DWORD PTR [rdx],eax
 1030877:	add    BYTE PTR [rax-0x3c],ah
 103087a:	add    DWORD PTR [rax],eax
 103087c:	jg     0x1030842
 103087e:	add    DWORD PTR [rax],eax
 1030880:	int3   
 1030881:	and    DWORD PTR [rdx],eax
 1030883:	add    BYTE PTR [rax-0x54fffe3c],dl
 1030889:	(bad)
 103088d:	loop   0x1030890
 103088f:	add    al,al
 1030891:	(bad)
 1030895:	(bad)
 1030899:	loopne 0x103089c
 103089b:	add    al,dh
 103089d:	(bad)
 10308a1:	(bad)
 10308a4:	hlt    
 10308a5:	out    0x1,eax
 10308a7:	add    BYTE PTR [rax],ah
 10308a9:	(bad)
 10308ac:	(bad)
 10308b0:	cmp    al,0xe8
 10308b2:	add    DWORD PTR [rax],eax
 10308b4:	push   rax
 10308b5:	(bad)
 10308b8:	imul   eax,ebp,0x1
 10308bb:	add    BYTE PTR [rax+0x710001e8],cl
 10308c1:	(bad)
 10308c4:	pop    rbp
 10308c6:	add    DWORD PTR [rax],eax
 10308c8:	sub    al,0xea
 10308ca:	add    DWORD PTR [rax],eax
 10308cc:	xchg   ebp,eax
 10308cd:	(bad)
 10308d0:	mov    al,0xc5
 10308d2:	add    DWORD PTR [rax],eax
 10308d4:	push   0xffffffffc00001ea
 10308d9:	(bad)
 10308dc:	loop   0x10308a3
 10308de:	add    DWORD PTR [rax],eax
 10308e0:	cld    
 10308e1:	(bad)  
 10308e2:	add    DWORD PTR [rax],eax
 10308e4:	(bad)
 10308e8:	or     eax,esi
 10308ea:	add    DWORD PTR [rax],eax
 10308ec:	rex.W in al,dx
 10308ee:	add    DWORD PTR [rax],eax
 10308f0:	and    dh,al
 10308f2:	add    DWORD PTR [rax],eax
 10308f4:	cmp    eax,esi
 10308f6:	add    DWORD PTR [rax],eax
 10308f8:	sub    ah,0x1
 10308fb:	add    BYTE PTR [rax],dl
 10308fd:	(bad)  
 10308fe:	add    DWORD PTR [rax],eax
 1030900:	cmp    esi,edx
 1030902:	add    DWORD PTR [rax],eax
 1030904:	cld    
 1030905:	add    DWORD PTR [rdx],eax
 1030907:	add    BYTE PTR [rdx-0x25],dh
 103090a:	add    DWORD PTR [rax],eax
 103090c:	mov    bl,0xdb
 103090e:	add    DWORD PTR [rax],eax
 1030910:	lock (bad) 
 1030912:	add    al,BYTE PTR [rax]
 1030914:	mov    ecx,0xe50001db
 1030919:	fild   DWORD PTR [rcx]
 103091b:	add    BYTE PTR [rax],ah
 103091d:	(bad)  
 103091e:	add    al,BYTE PTR [rax]
 1030920:	jmp    0x10308fd
 1030922:	add    DWORD PTR [rax],eax
 1030924:	(bad)  
 1030925:	fadd   QWORD PTR [rcx]
 1030927:	add    BYTE PTR [rax+0x17],dl
 103092a:	add    al,BYTE PTR [rax]
 103092c:	push   rax
 103092d:	fadd   QWORD PTR [rcx]
 103092f:	add    BYTE PTR [rax],al
 1030931:	fld    QWORD PTR [rcx]
 1030933:	add    BYTE PTR [rax+rbp*8+0x1],al
 1030937:	add    BYTE PTR [rbp+rbx*8-0x223dffff],bl
 103093e:	add    DWORD PTR [rax],eax
 1030940:	rex.WR jmp 0x1030944
 1030943:	add    al,cl
 1030945:	fld    QWORD PTR [rcx]
 1030947:	add    dh,ch
 1030949:	fld    QWORD PTR [rcx]
 103094b:	add    BYTE PTR [rax+0x1eb],al
 1030951:	fiadd  WORD PTR [rcx]
 1030953:	add    BYTE PTR [rax],ah
 1030955:	fiadd  WORD PTR [rcx]
 1030957:	add    BYTE PTR [rax],ah
 1030959:	in     eax,dx
 103095a:	add    DWORD PTR [rax],eax
 103095c:	loopne 0x103093c
 103095e:	add    DWORD PTR [rax],eax
 1030960:	hlt    
 1030961:	fiadd  WORD PTR [rcx]
 1030963:	add    ah,dl
 1030965:	sbb    BYTE PTR [rdx],al
 1030967:	add    BYTE PTR [rax],dl
 1030969:	fild   WORD PTR [rcx]
 103096b:	add    BYTE PTR [rcx-0x21],bl
 103096e:	add    DWORD PTR [rax],eax
 1030970:	mov    eax,0x600001e4
 1030975:	fild   WORD PTR [rcx]
 1030977:	add    bl,cl
 1030979:	fild   WORD PTR [rcx]
 103097b:	add    BYTE PTR [rax+rbp*8+0x1],cl
 103097f:	add    al,bh
 1030981:	fild   WORD PTR [rcx]
 1030983:	add    BYTE PTR [rdx],dl
 1030985:	loopne 0x1030988
 1030987:	add    BYTE PTR [rbx+rbp*8+0x1],dl
 103098b:	add    BYTE PTR [rax],bl
 103098d:	loopne 0x1030990
 103098f:	add    BYTE PTR [rdx],dh
 1030991:	loopne 0x1030994
 1030993:	.byte 0x0
 1030994:	mov    bl,ch
 1030996:	add    DWORD PTR [rax],eax

Disassembly of section .rsrc:

0000000001031000 <.rsrc>:
	...
 1031008:	add    al,0x0
 103100a:	add    BYTE PTR [rax],al
 103100c:	add    al,BYTE PTR [rax]
 103100e:	add    eax,DWORD PTR [rax]
 1031010:	js     0x1031013
 1031012:	add    BYTE PTR [rax-0x7fffffc8],al
 1031018:	mov    al,BYTE PTR [rcx]
 103101a:	add    BYTE PTR [rax-0x7fffffb0],al
 1031020:	(bad)  
 1031021:	add    BYTE PTR [rax],al
 1031023:	add    BYTE PTR [rax+0x0],ch
 1031026:	add    BYTE PTR [rax+0x10],al
 103102c:	add    BYTE PTR [rax],0x0
 103102f:	sbb    BYTE PTR [rax],0x0
 1031032:	add    BYTE PTR [rax],al
 1031034:	cwde   
 1031035:	add    BYTE PTR [rax],al
 1031037:	add    BYTE PTR [rax],0x0
 103103a:	add    BYTE PTR [rax],al
 103103c:	add    BYTE PTR [rax],al
 103103e:	add    BYTE PTR [rax],al
 1031040:	add    al,0x0
 1031042:	add    BYTE PTR [rax],al
 1031044:	add    BYTE PTR [rax],al
 1031046:	add    DWORD PTR [rax],eax
 1031048:	add    BYTE PTR fs:[rax],al
 103104b:	add    BYTE PTR [rax+0x800000],dh
 1031051:	add    BYTE PTR [rax],al
 1031053:	add    BYTE PTR [rax],al
 1031055:	add    BYTE PTR [rax],al
 1031057:	add    BYTE PTR [rax+rax*1],al
 103105a:	add    BYTE PTR [rax],al
 103105c:	add    BYTE PTR [rax],al
 103105e:	add    DWORD PTR [rax],eax
 1031060:	add    DWORD PTR [rax],eax
 1031062:	add    BYTE PTR [rax],al
 1031064:	enter  0x0,0x80
	...
 1031070:	add    al,0x0
 1031072:	add    BYTE PTR [rax],al
 1031074:	add    BYTE PTR [rax],al
 1031076:	add    DWORD PTR [rax],eax
 1031078:	(bad)  
 1031079:	add    BYTE PTR [rax],al
 103107b:	add    al,ah
 103107d:	add    BYTE PTR [rax],al
 103107f:	add    BYTE PTR [rax],0x0
 1031082:	add    BYTE PTR [rax],al
 1031084:	add    BYTE PTR [rax],al
 1031086:	add    BYTE PTR [rax],al
 1031088:	add    al,0x0
 103108a:	add    BYTE PTR [rax],al
 103108c:	add    BYTE PTR [rax],al
 103108e:	add    DWORD PTR [rax],eax
 1031090:	add    DWORD PTR [rax],eax
 1031092:	add    BYTE PTR [rax],al
 1031094:	clc    
 1031095:	add    BYTE PTR [rax],al
 1031097:	add    BYTE PTR [rax],0x0
 103109a:	add    BYTE PTR [rax],al
 103109c:	add    BYTE PTR [rax],al
 103109e:	add    BYTE PTR [rax],al
 10310a0:	add    al,0x0
 10310a2:	add    BYTE PTR [rax],al
 10310a4:	add    BYTE PTR [rax],al
 10310a6:	add    DWORD PTR [rax],eax
 10310a8:	add    DWORD PTR [rax],eax
 10310aa:	add    BYTE PTR [rax],al
 10310ac:	adc    BYTE PTR [rcx],al
 10310ae:	add    BYTE PTR [rax+0x0],al
 10310b4:	add    BYTE PTR [rax],al
 10310b6:	add    BYTE PTR [rax],al
 10310b8:	add    al,0x0
 10310ba:	add    BYTE PTR [rax],al
 10310bc:	add    BYTE PTR [rax],al
 10310be:	add    DWORD PTR [rax],eax
 10310c0:	or     DWORD PTR [rax+rax*1],eax
 10310c3:	add    BYTE PTR [rax],ch
 10310c5:	add    DWORD PTR [rax],eax
	...
 10310cf:	add    BYTE PTR [rax+rax*1],al
 10310d2:	add    BYTE PTR [rax],al
 10310d4:	add    BYTE PTR [rax],al
 10310d6:	add    DWORD PTR [rax],eax
 10310d8:	or     DWORD PTR [rax+rax*1],eax
 10310db:	add    BYTE PTR [rax],bh
 10310dd:	add    DWORD PTR [rax],eax
	...
 10310e7:	add    BYTE PTR [rax+rax*1],al
 10310ea:	add    BYTE PTR [rax],al
 10310ec:	add    BYTE PTR [rax],al
 10310ee:	add    DWORD PTR [rax],eax
 10310f0:	or     DWORD PTR [rax+rax*1],eax
 10310f3:	add    BYTE PTR [rax+0x1],cl
	...
 10310fe:	add    BYTE PTR [rax],al
 1031100:	add    al,0x0
 1031102:	add    BYTE PTR [rax],al
 1031104:	add    BYTE PTR [rax],al
 1031106:	add    DWORD PTR [rax],eax
 1031108:	or     DWORD PTR [rax+rax*1],eax
 103110b:	add    BYTE PTR [rax+0x1],bl
	...
 1031116:	add    BYTE PTR [rax],al
 1031118:	add    al,0x0
 103111a:	add    BYTE PTR [rax],al
 103111c:	add    BYTE PTR [rax],al
 103111e:	add    DWORD PTR [rax],eax
 1031120:	or     DWORD PTR [rax+rax*1],eax
 1031123:	add    BYTE PTR [rax+0x1],ch
 1031126:	add    BYTE PTR [rax],al
 1031128:	pushf  
 1031129:	adc    DWORD PTR [rbx],eax
 103112b:	add    BYTE PTR [rbp-0x1bfffffa],dl
 1031131:	add    al,0x0
 1031133:	add    BYTE PTR [rax],al
 1031135:	add    BYTE PTR [rax],al
 1031137:	add    BYTE PTR [rax+rbx*1],dh
 103113a:	add    eax,DWORD PTR [rax]
 103113c:	push   rax
 103113d:	adc    DWORD PTR [rax],eax
 103113f:	add    ah,ah
 1031141:	add    al,0x0
 1031143:	add    BYTE PTR [rax],al
 1031145:	add    BYTE PTR [rax],al
 1031147:	add    BYTE PTR [rcx+rbp*1+0x280003],al
 103114e:	add    BYTE PTR [rax],al
 1031150:	in     al,0x4
 1031152:	add    BYTE PTR [rax],al
 1031154:	add    BYTE PTR [rax],al
 1031156:	add    BYTE PTR [rax],al
 1031158:	lods   al,BYTE PTR ds:[rsi]
 1031159:	sub    DWORD PTR [rbx],eax
 103115b:	add    BYTE PTR [rax-0x1bfffffc],bh
 1031161:	add    al,0x0
 1031163:	add    BYTE PTR [rax],al
 1031165:	add    BYTE PTR [rax],al
 1031167:	add    BYTE PTR [rsi+rbp*1+0x3],ah
 103116b:	add    BYTE PTR [rdx+0x1],bl
 103116e:	add    BYTE PTR [rax],al
 1031170:	in     al,0x4
 1031172:	add    BYTE PTR [rax],al
 1031174:	add    BYTE PTR [rax],al
 1031176:	add    BYTE PTR [rax],al
 1031178:	or     BYTE PTR [rax],al
 103117a:	push   rdx
 103117b:	add    BYTE PTR [rbp+0x0],al
 103117e:	rex.RXB add BYTE PTR [r9+0x0],r9b
 1031182:	push   rbx
 1031183:	add    BYTE PTR [rax+rax*1+0x52],dl
 1031187:	add    BYTE PTR [rcx+0x0],bl
 103118a:	(bad)  
 103118b:	add    BYTE PTR [rax+rax*1+0x59],dl
 103118f:	add    BYTE PTR [rax+0x0],dl
 1031192:	add    BYTE PTR [r8+rax*1+0x49],r9b
 1031197:	add    BYTE PTR [rdx+0x0],al
 103119a:	add    BYTE PTR [rax],al
 103119c:	rex.W
 103119d:	rex.WXB
 103119e:	rex.XB push r10
 10311a0:	or     eax,0xa0d7b0a
 10311a5:	or     DWORD PTR [rdx+0x65],edx
 10311a8:	jo     0x1031216
 10311aa:	rex.B
 10311ab:	outs   dx,BYTE PTR gs:[esi]
 10311ae:	je     0x10311de
 10311b0:	imul   r14d,DWORD PTR [rbx+0x74],0x75626972
 10311b8:	je     0x1031223
 10311ba:	outs   dx,DWORD PTR ds:[rsi]
 10311bb:	outs   dx,BYTE PTR ds:[rsi]
 10311bc:	xor    DWORD PTR cs:[rcx],esi
 10311bf:	and    BYTE PTR [rip+0x27207320],bh        # 0x282384e5
 10311c5:	imul   r12,QWORD PTR [r11+0x72],0x666f736f
 10311cd:	je     0x10311ef
 10311cf:	push   rbx
 10311d0:	push   rcx
 10311d1:	rex.WR and BYTE PTR [rbx+0x65],r10b
 10311d5:	jb     0x103124d
 10311d7:	gs jb  0x10311fa
 10311da:	push   rdx
 10311db:	gs jo  0x103124a
 10311de:	imul   esp,DWORD PTR [rbx+0x61],0x6e6f6974
 10311e5:	and    BYTE PTR [rcx+rbp*2+0x73],al
 10311e9:	je     0x103125d
 10311eb:	imul   esp,DWORD PTR [rdx+0x75],0x6e6f6974
 10311f2:	and    BYTE PTR [rcx+0x67],al
 10311f5:	outs   dx,BYTE PTR gs:[rsi]
 10311f7:	je     0x1031219
 10311f9:	xor    DWORD PTR [rcx],esi
 10311fb:	xor    BYTE PTR cs:[rdi],ah
 10311fe:	or     eax,0xd7b090a
 1031203:	or     cl,BYTE PTR [rcx]
 1031205:	or     DWORD PTR [rbx+0x4c],eax
 1031208:	push   rbx
 1031209:	rex.WB
 103120a:	and    BYTE PTR [rip+0x27207320],r15b        # 0x28238531
 1031211:	jnp    0x1031257
 1031213:	xor    al,0x31
 1031215:	xor    DWORD PTR [rcx],edi
 1031217:	xor    al,BYTE PTR [rbp+0x39]
 103121a:	sub    eax,0x33314241
 103121f:	sub    eax,0x33324134
 1031224:	sub    eax,0x42334241
 1031229:	sub    eax,0x45463541
 103122e:	cmp    DWORD PTR [rax],r15d
 1031231:	xor    esi,DWORD PTR [rax]
 1031233:	ss rex.R
 1031235:	rex.X jge 0x103125f
 1031238:	or     eax,0xd7d090a
 103123d:	or     cl,BYTE PTR [rcx]
 103123f:	push   rdx
 1031240:	gs jo  0x10312af
 1031243:	rex.B
 1031244:	outs   dx,BYTE PTR gs:[esi]
 1031247:	je     0x1031277
 1031249:	xor    DWORD PTR [rcx],esi
 103124b:	xor    BYTE PTR [rsi],ch
 103124d:	imul   r14d,DWORD PTR [rbx+0x74],0x75626972
 1031255:	je     0x10312c0
 1031257:	outs   dx,DWORD PTR ds:[rsi]
 1031258:	outs   dx,BYTE PTR ds:[rsi]
 1031259:	and    BYTE PTR [rip+0x27207320],bh        # 0x2823857f
 103125f:	imul   r12,QWORD PTR [r11+0x72],0x666f736f
 1031267:	je     0x1031289
 1031269:	push   rbx
 103126a:	push   rcx
 103126b:	rex.WR and BYTE PTR [rbx+0x65],r10b
 103126f:	jb     0x10312e7
 1031271:	gs jb  0x1031294
 1031274:	push   rdx
 1031275:	gs jo  0x10312e4
 1031278:	imul   esp,DWORD PTR [rbx+0x61],0x6e6f6974
 103127f:	and    BYTE PTR [rcx+rbp*2+0x73],al
 1031283:	je     0x10312f7
 1031285:	imul   esp,DWORD PTR [rdx+0x75],0x6e6f6974
 103128c:	and    BYTE PTR [rcx+0x67],al
 103128f:	outs   dx,BYTE PTR gs:[rsi]
 1031291:	je     0x10312b3
 1031293:	xor    DWORD PTR [rcx],esi
 1031295:	xor    BYTE PTR cs:[rdi],ah
 1031298:	or     eax,0xd7b090a
 103129d:	or     cl,BYTE PTR [rcx]
 103129f:	or     DWORD PTR [rbx+0x75],eax
 10312a2:	jb     0x10312fa
 10312a4:	gs jb  0x10312c7
 10312a7:	cmp    eax,0x27207320
 10312ac:	push   rdx
 10312ad:	gs jo  0x103131c
 10312b0:	rex.B
 10312b1:	outs   dx,BYTE PTR gs:[esi]
 10312b4:	je     0x10312e4
 10312b6:	imul   r14d,DWORD PTR [rbx+0x74],0x75626972
 10312be:	je     0x1031329
 10312c0:	outs   dx,DWORD PTR ds:[rsi]
 10312c1:	outs   dx,BYTE PTR ds:[rsi]
 10312c2:	xor    DWORD PTR cs:[rcx],esi
 10312c5:	(bad)  
 10312c6:	or     eax,0xd7d090a
 10312cb:	or     cl,BYTE PTR [rcx]
 10312cd:	rex.WRX outs dx,DWORD PTR ds:[rsi]
 10312cf:	push   rdx
 10312d0:	gs ins DWORD PTR es:[rdi],dx
 10312d2:	outs   dx,DWORD PTR ds:[rsi]
 10312d3:	jbe    0x103133a
 10312d5:	and    BYTE PTR [rbx+0x4c],al
 10312d8:	push   rbx
 10312d9:	rex.WB
 10312da:	rex.R or eax,0xd7b090a
 10312e0:	or     cl,BYTE PTR [rcx]
 10312e2:	or     DWORD PTR [rsi+0x6f],eax
 10312e5:	jb     0x103134a
 10312e7:	gs push rdx
 10312e9:	gs ins DWORD PTR es:[rdi],dx
 10312eb:	outs   dx,DWORD PTR ds:[rsi]
 10312ec:	jbe    0x1031353
 10312ee:	and    BYTE PTR [rbx+0x44],bh
 10312f1:	xor    al,0x31
 10312f3:	xor    DWORD PTR [rcx],edi
 10312f5:	xor    al,BYTE PTR [rbp+0x39]
 10312f8:	sub    eax,0x33314241
 10312fd:	sub    eax,0x33324134
 1031302:	sub    eax,0x42334241
 1031307:	sub    eax,0x45463541
 103130c:	cmp    DWORD PTR [rax],r15d
 103130f:	xor    esi,DWORD PTR [rax]
 1031311:	ss rex.R
 1031313:	rex.X jge 0x1031336
 1031316:	cmp    eax,0x27207320
 103131b:	imul   r12,QWORD PTR [r11+0x72],0x666f736f
 1031323:	je     0x1031345
 1031325:	push   rbx
 1031326:	push   rcx
 1031327:	rex.WR and BYTE PTR [rbx+0x65],r10b
 103132b:	jb     0x10313a3
 103132d:	gs jb  0x1031350
 1031330:	push   rdx
 1031331:	gs jo  0x10313a0
 1031334:	imul   esp,DWORD PTR [rbx+0x61],0x6e6f6974
 103133b:	and    BYTE PTR [rcx+rbp*2+0x73],al
 103133f:	je     0x10313b3
 1031341:	imul   esp,DWORD PTR [rdx+0x75],0x6e6f6974
 1031348:	and    BYTE PTR [rcx+0x67],al
 103134b:	outs   dx,BYTE PTR gs:[rsi]
 103134d:	je     0x103136f
 103134f:	xor    DWORD PTR [rcx],esi
 1031351:	xor    BYTE PTR cs:[rdi],ah
 1031354:	or     eax,0x7b09090a
 1031359:	or     eax,0x909090a
 103135e:	push   rax
 103135f:	jb     0x10313d0
 1031361:	addr32 rex.WB
 1031363:	and    BYTE PTR [rip+0x27207320],r15b        # 0x2823868a
 103136a:	push   rdx
 103136b:	gs jo  0x10313da
 103136e:	rex.B
 103136f:	outs   dx,BYTE PTR gs:[esi]
 1031372:	je     0x10313a2
 1031374:	imul   r14d,DWORD PTR [rbx+0x74],0x75626972
 103137c:	je     0x10313e7
 103137e:	outs   dx,DWORD PTR ds:[rsi]
 103137f:	outs   dx,BYTE PTR ds:[rsi]
 1031380:	xor    DWORD PTR cs:[rcx],esi
 1031383:	(bad)  
 1031384:	or     eax,0x909090a
 1031389:	push   rsi
 103138a:	gs jb  0x1031400
 103138d:	imul   ebp,DWORD PTR [rdi+0x6e],0x65646e49
 1031394:	jo     0x10313fb
 1031396:	outs   dx,BYTE PTR ds:[rsi]
 1031397:	fs outs dx,BYTE PTR gs:[rsi]
 103139a:	je     0x10313ec
 103139c:	jb     0x103140d
 103139e:	addr32 rex.WB
 10313a0:	and    BYTE PTR [rip+0x27207320],r15b        # 0x282386c7
 10313a7:	push   rdx
 10313a8:	gs jo  0x1031417
 10313ab:	rex.B
 10313ac:	outs   dx,BYTE PTR gs:[esi]
 10313af:	je     0x10313df
 10313b1:	xor    DWORD PTR [rcx],esi
 10313b3:	xor    BYTE PTR [rsi],ch
 10313b5:	imul   r14d,DWORD PTR [rbx+0x74],0x75626972
 10313bd:	je     0x1031428
 10313bf:	outs   dx,DWORD PTR ds:[rsi]
 10313c0:	outs   dx,BYTE PTR ds:[rsi]
 10313c1:	(bad)  
 10313c2:	or     eax,0x909090a
 10313c7:	rex.WR outs dx,DWORD PTR ds:[rsi]
 10313c9:	movsxd esp,DWORD PTR [rcx+0x6c]
 10313cc:	push   rbx
 10313cd:	gs jb  0x1031446
 10313d0:	gs jb  0x1031406
 10313d3:	xor    ah,BYTE PTR [rax]
 10313d5:	cmp    eax,0x27207320
 10313da:	and    eax,0x55444f4d
 10313df:	rex.WR
 10313e0:	rex.RB and eax,0x90a0d27
 10313e6:	or     DWORD PTR [rcx],ecx
 10313e8:	jbe    0x103144b
 10313ea:	ins    BYTE PTR es:[rdi],dx
 10313eb:	and    BYTE PTR [rcx+0x70],al
 10313ee:	jo     0x1031439
 10313f0:	and    BYTE PTR [rip+0x27207320],r15b        # 0x28238717
 10313f7:	jnp    0x103143d
 10313f9:	xor    al,0x31
 10313fb:	xor    DWORD PTR [rcx],edi
 10313fd:	xor    al,BYTE PTR [rbp+0x39]
 1031400:	sub    eax,0x33314241
 1031405:	sub    eax,0x33324134
 103140a:	sub    eax,0x42334241
 103140f:	sub    eax,0x45463541
 1031414:	cmp    DWORD PTR [rax],r15d
 1031417:	xor    esi,DWORD PTR [rax]
 1031419:	ss rex.R
 103141b:	rex.X jge 0x1031445
 103141e:	or     eax,0x7d09090a
 1031423:	or     eax,0xd7d090a
 1031428:	or     cl,BYTE PTR [rcx]
 103142a:	rex.WRX outs dx,DWORD PTR ds:[rsi]
 103142c:	push   rdx
 103142d:	gs ins DWORD PTR es:[rdi],dx
 103142f:	outs   dx,DWORD PTR ds:[rsi]
 1031430:	jbe    0x1031497
 1031432:	and    BYTE PTR [rcx+0x70],al
 1031435:	jo     0x1031480
 1031437:	rex.R or eax,0xd7b090a
 103143d:	or     cl,BYTE PTR [rcx]
 103143f:	or     DWORD PTR [rbx+0x44],edi
 1031442:	xor    al,0x31
 1031444:	xor    DWORD PTR [rcx],edi
 1031446:	xor    al,BYTE PTR [rbp+0x39]
 1031449:	sub    eax,0x33314241
 103144e:	sub    eax,0x33324134
 1031453:	sub    eax,0x42334241
 1031458:	sub    eax,0x45463541
 103145d:	cmp    DWORD PTR [rax],r15d
 1031460:	xor    esi,DWORD PTR [rax]
 1031462:	ss rex.R
 1031464:	rex.X jge 0x1031487
 1031467:	cmp    eax,0x27207320
 103146c:	imul   r12,QWORD PTR [r11+0x72],0x666f736f
 1031474:	je     0x1031496
 1031476:	push   rbx
 1031477:	push   rcx
 1031478:	rex.WR and BYTE PTR [rbx+0x65],r10b
 103147c:	jb     0x10314f4
 103147e:	gs jb  0x10314a1
 1031481:	push   rdx
 1031482:	gs jo  0x10314f1
 1031485:	imul   esp,DWORD PTR [rbx+0x61],0x6e6f6974
 103148c:	and    BYTE PTR [rcx+rbp*2+0x73],al
 1031490:	je     0x1031504
 1031492:	imul   esp,DWORD PTR [rdx+0x75],0x6e6f6974
 1031499:	and    BYTE PTR [rcx+0x67],al
 103149c:	outs   dx,BYTE PTR gs:[rsi]
 103149e:	je     0x10314c0
 10314a0:	xor    DWORD PTR [rcx],esi
 10314a2:	xor    BYTE PTR cs:[rdi],ah
 10314a5:	or     eax,0xd7d090a
 10314aa:	or     cl,BYTE PTR [rip+0xa0d7d0a]        # 0xb1091ba
 10314b0:	or     eax,0x434b480a
 10314b5:	push   rdx
 10314b6:	or     eax,0xa0d7b0a
 10314bb:	and    BYTE PTR [rax],ah
 10314bd:	and    BYTE PTR [rax],ah
 10314bf:	push   rdx
 10314c0:	gs jo  0x103152f
 10314c3:	rex.B
 10314c4:	outs   dx,BYTE PTR gs:[esi]
 10314c7:	je     0x10314f7
 10314c9:	push   rdx
 10314ca:	gs ins DWORD PTR es:[rdi],dx
 10314cc:	outs   dx,DWORD PTR ds:[rsi]
 10314cd:	je     0x1031534
 10314cf:	imul   r14d,DWORD PTR [rbx+0x74],0x75626972
 10314d7:	je     0x1031542
 10314d9:	outs   dx,DWORD PTR ds:[rsi]
 10314da:	outs   dx,BYTE PTR ds:[rsi]
 10314db:	xor    DWORD PTR cs:[rcx],esi
 10314de:	and    BYTE PTR [rip+0x27207320],bh        # 0x28238804
 10314e4:	imul   r12,QWORD PTR [r11+0x72],0x666f736f
 10314ec:	je     0x103150e
 10314ee:	push   rbx
 10314ef:	push   rcx
 10314f0:	rex.WR and BYTE PTR [rbx+0x65],r10b
 10314f4:	jb     0x103156c
 10314f6:	gs jb  0x1031519
 10314f9:	push   rdx
 10314fa:	gs jo  0x1031569
 10314fd:	imul   esp,DWORD PTR [rbx+0x61],0x6e6f6974
 1031504:	and    BYTE PTR [rdx+0x65],dl
 1031507:	ins    DWORD PTR es:[rdi],dx
 1031508:	outs   dx,DWORD PTR ds:[rsi]
 1031509:	je     0x1031570
 103150b:	and    BYTE PTR [rcx+rbp*2+0x73],al
 103150f:	je     0x1031531
 1031511:	rex.B
 1031512:	outs   dx,BYTE PTR gs:[esi]
 1031515:	je     0x1031537
 1031517:	xor    DWORD PTR [rcx],esi
 1031519:	xor    BYTE PTR cs:[rdi],ah
 103151c:	or     eax,0x2020200a
 1031521:	and    BYTE PTR [rbx+0xd],bh
 1031524:	or     ah,BYTE PTR [rax]
 1031526:	and    BYTE PTR [rax],ah
 1031528:	and    BYTE PTR [rax],ah
 103152a:	and    BYTE PTR [rax],ah
 103152c:	and    BYTE PTR [rbx+0x4c],al
 103152f:	push   rbx
 1031530:	rex.WB
 1031531:	and    BYTE PTR [rip+0x27207320],r15b        # 0x28238858
 1031538:	jnp    0x1031573
 103153a:	cmp    DWORD PTR [rbx+rsi*1],esi
 103153d:	xor    al,0x44
 103153f:	rex.B
 1031540:	rex.X sub eax,0x38304630
 1031546:	sub    eax,0x30334634
 103154b:	sub    eax,0x46434338
 1031550:	sub    eax,0x38453342
 1031555:	xor    BYTE PTR [rdx],dh
 1031557:	cmp    DWORD PTR [rsi],esi
 1031559:	rex.XB cmp DWORD PTR [r8],esi
 103155c:	(bad)  
 103155d:	jge    0x1031586
 103155f:	or     eax,0x2020200a
 1031564:	and    BYTE PTR [rbp+0xd],bh
 1031567:	or     ah,BYTE PTR [rax]
 1031569:	and    BYTE PTR [rax],ah
 103156b:	and    BYTE PTR [rdx+0x65],dl
 103156e:	jo     0x10315dc
 1031570:	rex.B
 1031571:	outs   dx,BYTE PTR gs:[esi]
 1031574:	je     0x10315a4
 1031576:	xor    DWORD PTR [rcx],esi
 1031578:	xor    BYTE PTR [rsi],ch
 103157a:	push   rdx
 103157b:	gs ins DWORD PTR es:[rdi],dx
 103157d:	outs   dx,DWORD PTR ds:[rsi]
 103157e:	je     0x10315e5
 1031580:	imul   r14d,DWORD PTR [rbx+0x74],0x75626972
 1031588:	je     0x10315f3
 103158a:	outs   dx,DWORD PTR ds:[rsi]
 103158b:	outs   dx,BYTE PTR ds:[rsi]
 103158c:	and    BYTE PTR [rip+0x27207320],bh        # 0x282388b2
 1031592:	imul   r12,QWORD PTR [r11+0x72],0x666f736f
 103159a:	je     0x10315bc
 103159c:	push   rbx
 103159d:	push   rcx
 103159e:	rex.WR and BYTE PTR [rbx+0x65],r10b
 10315a2:	jb     0x103161a
 10315a4:	gs jb  0x10315c7
 10315a7:	push   rdx
 10315a8:	gs jo  0x1031617
 10315ab:	imul   esp,DWORD PTR [rbx+0x61],0x6e6f6974
 10315b2:	and    BYTE PTR [rdx+0x65],dl
 10315b5:	ins    DWORD PTR es:[rdi],dx
 10315b6:	outs   dx,DWORD PTR ds:[rsi]
 10315b7:	je     0x103161e
 10315b9:	and    BYTE PTR [rcx+rbp*2+0x73],al
 10315bd:	je     0x10315df
 10315bf:	rex.B
 10315c0:	outs   dx,BYTE PTR gs:[esi]
 10315c3:	je     0x10315e5
 10315c5:	xor    DWORD PTR [rcx],esi
 10315c7:	xor    BYTE PTR cs:[rdi],ah
 10315ca:	or     eax,0x2020200a
 10315cf:	and    BYTE PTR [rbx+0x20],bh
 10315d2:	and    BYTE PTR [rax],ah
 10315d4:	or     eax,0x2020200a
 10315d9:	and    BYTE PTR [rax],ah
 10315db:	and    BYTE PTR [rax],ah
 10315dd:	and    BYTE PTR [rbx+0x75],al
 10315e0:	jb     0x1031638
 10315e2:	gs jb  0x1031605
 10315e5:	cmp    eax,0x27207320
 10315ea:	push   rdx
 10315eb:	gs jo  0x103165a
 10315ee:	rex.B
 10315ef:	outs   dx,BYTE PTR gs:[esi]
 10315f2:	je     0x1031622
 10315f4:	push   rdx
 10315f5:	gs ins DWORD PTR es:[rdi],dx
 10315f7:	outs   dx,DWORD PTR ds:[rsi]
 10315f8:	je     0x103165f
 10315fa:	imul   r14d,DWORD PTR [rbx+0x74],0x75626972
 1031602:	je     0x103166d
 1031604:	outs   dx,DWORD PTR ds:[rsi]
 1031605:	outs   dx,BYTE PTR ds:[rsi]
 1031606:	xor    DWORD PTR cs:[rcx],esi
 1031609:	(bad)  
 103160a:	or     eax,0x2020200a
 103160f:	and    BYTE PTR [rbp+0xd],bh
 1031612:	or     ah,BYTE PTR [rax]
 1031614:	and    BYTE PTR [rax],ah
 1031616:	and    BYTE PTR [rsi+0x6f],cl
 1031619:	push   rdx
 103161a:	gs ins DWORD PTR es:[rdi],dx
 103161c:	outs   dx,DWORD PTR ds:[rsi]
 103161d:	jbe    0x1031684
 103161f:	and    BYTE PTR [rbx+0x4c],al
 1031622:	push   rbx
 1031623:	rex.WB
 1031624:	rex.R or eax,0x2020200a
 103162a:	and    BYTE PTR [rbx+0xd],bh
 103162d:	or     ah,BYTE PTR [rax]
 103162f:	and    BYTE PTR [rax],ah
 1031631:	and    BYTE PTR [rax],ah
 1031633:	and    BYTE PTR [rax],ah
 1031635:	and    BYTE PTR [rsi+0x6f],al
 1031638:	jb     0x103169d
 103163a:	gs push rdx
 103163c:	gs ins DWORD PTR es:[rdi],dx
 103163e:	outs   dx,DWORD PTR ds:[rsi]
 103163f:	jbe    0x10316a6
 1031641:	and    BYTE PTR [rbx+0x39],bh
 1031644:	cmp    DWORD PTR [rbx+rsi*1],esi
 1031647:	xor    al,0x44
 1031649:	rex.B
 103164a:	rex.X sub eax,0x38304630
 1031650:	sub    eax,0x30334634
 1031655:	sub    eax,0x46434338
 103165a:	sub    eax,0x38453342
 103165f:	xor    BYTE PTR [rdx],dh
 1031661:	cmp    DWORD PTR [rsi],esi
 1031663:	rex.XB cmp DWORD PTR [r8],esi
 1031666:	(bad)  
 1031667:	jge    0x1031689
 1031669:	cmp    eax,0x27207320
 103166e:	imul   r12,QWORD PTR [r11+0x72],0x666f736f
 1031676:	je     0x1031698
 1031678:	push   rbx
 1031679:	push   rcx
 103167a:	rex.WR and BYTE PTR [rbx+0x65],r10b
 103167e:	jb     0x10316f6
 1031680:	gs jb  0x10316a3
 1031683:	push   rdx
 1031684:	gs jo  0x10316f3
 1031687:	imul   esp,DWORD PTR [rbx+0x61],0x6e6f6974
 103168e:	and    BYTE PTR [rdx+0x65],dl
 1031691:	ins    DWORD PTR es:[rdi],dx
 1031692:	outs   dx,DWORD PTR ds:[rsi]
 1031693:	je     0x10316fa
 1031695:	and    BYTE PTR [rcx+rbp*2+0x73],al
 1031699:	je     0x103170d
 103169b:	imul   esp,DWORD PTR [rdx+0x75],0x6e6f6974
 10316a2:	and    BYTE PTR [rcx+0x67],al
 10316a5:	outs   dx,BYTE PTR gs:[rsi]
 10316a7:	je     0x10316c9
 10316a9:	xor    DWORD PTR [rcx],esi
 10316ab:	xor    BYTE PTR cs:[rdi],ah
 10316ae:	or     eax,0x2020200a
 10316b3:	and    BYTE PTR [rax],ah
 10316b5:	and    BYTE PTR [rax],ah
 10316b7:	and    BYTE PTR [rbx+0xd],bh
 10316ba:	or     cl,BYTE PTR [rcx]
 10316bc:	or     DWORD PTR [rcx],ecx
 10316be:	push   rax
 10316bf:	jb     0x1031730
 10316c1:	addr32 rex.WB
 10316c3:	and    BYTE PTR [rip+0x27207320],r15b        # 0x282389ea
 10316ca:	push   rdx
 10316cb:	gs jo  0x103173a
 10316ce:	rex.B
 10316cf:	outs   dx,BYTE PTR gs:[esi]
 10316d2:	je     0x1031702
 10316d4:	push   rdx
 10316d5:	gs ins DWORD PTR es:[rdi],dx
 10316d7:	outs   dx,DWORD PTR ds:[rsi]
 10316d8:	je     0x103173f
 10316da:	imul   r14d,DWORD PTR [rbx+0x74],0x75626972
 10316e2:	je     0x103174d
 10316e4:	outs   dx,DWORD PTR ds:[rsi]
 10316e5:	outs   dx,BYTE PTR ds:[rsi]
 10316e6:	xor    DWORD PTR cs:[rcx],esi
 10316e9:	(bad)  
 10316ea:	or     eax,0x909090a
 10316ef:	push   rsi
 10316f0:	gs jb  0x1031766
 10316f3:	imul   ebp,DWORD PTR [rdi+0x6e],0x65646e49
 10316fa:	jo     0x1031761
 10316fc:	outs   dx,BYTE PTR ds:[rsi]
 10316fd:	fs outs dx,BYTE PTR gs:[rsi]
 1031700:	je     0x1031752
 1031702:	jb     0x1031773
 1031704:	addr32 rex.WB
 1031706:	and    BYTE PTR [rip+0x27207320],r15b        # 0x28238a2d
 103170d:	push   rdx
 103170e:	gs jo  0x103177d
 1031711:	rex.B
 1031712:	outs   dx,BYTE PTR gs:[esi]
 1031715:	je     0x1031745
 1031717:	xor    DWORD PTR [rcx],esi
 1031719:	xor    BYTE PTR [rsi],ch
 103171b:	push   rdx
 103171c:	gs ins DWORD PTR es:[rdi],dx
 103171e:	outs   dx,DWORD PTR ds:[rsi]
 103171f:	je     0x1031786
 1031721:	imul   r14d,DWORD PTR [rbx+0x74],0x75626972
 1031729:	je     0x1031794
 103172b:	outs   dx,DWORD PTR ds:[rsi]
 103172c:	outs   dx,BYTE PTR ds:[rsi]
 103172d:	(bad)  
 103172e:	or     eax,0x909090a
 1031733:	rex.WR outs dx,DWORD PTR ds:[rsi]
 1031735:	movsxd esp,DWORD PTR [rcx+0x6c]
 1031738:	push   rbx
 1031739:	gs jb  0x10317b2
 103173c:	gs jb  0x1031772
 103173f:	xor    ah,BYTE PTR [rax]
 1031741:	cmp    eax,0x27207320
 1031746:	and    eax,0x55444f4d
 103174b:	rex.WR
 103174c:	rex.RB and eax,0x90a0d27
 1031752:	or     DWORD PTR [rcx],ecx
 1031754:	jbe    0x10317b7
 1031756:	ins    BYTE PTR es:[rdi],dx
 1031757:	and    BYTE PTR [rcx+0x70],al
 103175a:	jo     0x10317a5
 103175c:	and    BYTE PTR [rip+0x27207320],r15b        # 0x28238a83
 1031763:	jnp    0x103179e
 1031765:	cmp    DWORD PTR [rbx+rsi*1],esi
 1031768:	xor    al,0x44
 103176a:	rex.B
 103176b:	rex.X sub eax,0x38304630
 1031771:	sub    eax,0x30334634
 1031776:	sub    eax,0x46434338
 103177b:	sub    eax,0x38453342
 1031780:	xor    BYTE PTR [rdx],dh
 1031782:	cmp    DWORD PTR [rsi],esi
 1031784:	rex.XB cmp DWORD PTR [r8],esi
 1031787:	(bad)  
 1031788:	jge    0x10317b1
 103178a:	or     eax,0x2020200a
 103178f:	and    BYTE PTR [rax],ah
 1031791:	and    BYTE PTR [rax],ah
 1031793:	and    BYTE PTR [rbp+0xd],bh
 1031796:	or     ah,BYTE PTR [rax]
 1031798:	and    BYTE PTR [rax],ah
 103179a:	and    BYTE PTR [rbp+0xd],bh
 103179d:	or     ah,BYTE PTR [rax]
 103179f:	and    BYTE PTR [rax],ah
 10317a1:	and    BYTE PTR [rsi+0x6f],cl
 10317a4:	push   rdx
 10317a5:	gs ins DWORD PTR es:[rdi],dx
 10317a7:	outs   dx,DWORD PTR ds:[rsi]
 10317a8:	jbe    0x103180f
 10317aa:	and    BYTE PTR [rcx+0x70],al
 10317ad:	jo     0x10317f8
 10317af:	rex.R or eax,0x2020200a
 10317b5:	and    BYTE PTR [rbx+0xd],bh
 10317b8:	or     ah,BYTE PTR [rax]
 10317ba:	and    BYTE PTR [rax],ah
 10317bc:	and    BYTE PTR [rax],ah
 10317be:	and    BYTE PTR [rax],ah
 10317c0:	and    BYTE PTR [rbx+0x39],bh
 10317c3:	cmp    DWORD PTR [rbx+rsi*1],esi
 10317c6:	xor    al,0x44
 10317c8:	rex.B
 10317c9:	rex.X sub eax,0x38304630
 10317cf:	sub    eax,0x30334634
 10317d4:	sub    eax,0x46434338
 10317d9:	sub    eax,0x38453342
 10317de:	xor    BYTE PTR [rdx],dh
 10317e0:	cmp    DWORD PTR [rsi],esi
 10317e2:	rex.XB cmp DWORD PTR [r8],esi
 10317e5:	(bad)  
 10317e6:	jge    0x1031808
 10317e8:	cmp    eax,0x27207320
 10317ed:	imul   r12,QWORD PTR [r11+0x72],0x666f736f
 10317f5:	je     0x1031817
 10317f7:	push   rbx
 10317f8:	push   rcx
 10317f9:	rex.WR and BYTE PTR [rbx+0x65],r10b
 10317fd:	jb     0x1031875
 10317ff:	gs jb  0x1031822
 1031802:	push   rdx
 1031803:	gs jo  0x1031872
 1031806:	imul   esp,DWORD PTR [rbx+0x61],0x6e6f6974
 103180d:	and    BYTE PTR [rdx+0x65],dl
 1031810:	ins    DWORD PTR es:[rdi],dx
 1031811:	outs   dx,DWORD PTR ds:[rsi]
 1031812:	je     0x1031879
 1031814:	and    BYTE PTR [rcx+rbp*2+0x73],al
 1031818:	je     0x103183a
 103181a:	rex.B
 103181b:	outs   dx,BYTE PTR gs:[esi]
 103181e:	je     0x1031840
 1031820:	xor    DWORD PTR [rcx],esi
 1031822:	xor    BYTE PTR cs:[rdi],ah
 1031825:	or     eax,0x2020200a
 103182a:	and    BYTE PTR [rbp+0xd],bh
 103182d:	or     bh,BYTE PTR [rbp+0xd]
 1031830:	or     dl,BYTE PTR [rax+0x41]
 1031833:	rex.R
 1031834:	rex.WRB push r11
 1031836:	rex.RX push rsp
 1031838:	add    al,BYTE PTR [rax]
 103183a:	add    DWORD PTR [rax],eax
 103183c:	add    BYTE PTR [rax],al
 103183e:	add    BYTE PTR [rax],al
 1031840:	or     DWORD PTR [rax+rax*1],eax
 1031843:	add    BYTE PTR [rax],al
 1031845:	add    BYTE PTR [rax],al
 1031847:	add    BYTE PTR [rbx+0x0],al
 103184a:	add    BYTE PTR [rax],al
 103184c:	add    DWORD PTR [rax],eax
 103184e:	add    BYTE PTR [rax],al
 1031850:	add    BYTE PTR [rax],al
 1031852:	add    BYTE PTR [rax],al
 1031854:	or     eax,DWORD PTR [rax]
	...
 1031862:	add    BYTE PTR [rax],al
 1031864:	sbb    al,0x0
 1031866:	add    BYTE PTR [rax],al
 1031868:	imul   eax,DWORD PTR [rcx],0x0
 103186e:	add    BYTE PTR [rax],al
 1031870:	(bad)  
 1031871:	(bad)  
 1031872:	(bad)  
 1031873:	(bad)  
 1031874:	(bad)  
 1031875:	(bad)  
 1031876:	(bad)  
 1031877:	jmp    QWORD PTR [rax]
 1031879:	add    BYTE PTR [rax],al
 103187b:	add    BYTE PTR [rax-0x1000000],al
 1031881:	(bad)  
 1031882:	(bad)  
 1031883:	inc    DWORD PTR [rcx]
 1031885:	add    BYTE PTR [rax],al
 1031887:	add    BYTE PTR [rax],al
 1031889:	add    BYTE PTR [rax],al
 103188b:	add    BYTE PTR [rax+rax*1+0x0],ah
 103188f:	add    al,cl
 1031891:	add    BYTE PTR [rax],al
 1031893:	add    BYTE PTR [rcx+rax*1],ch
 1031896:	add    BYTE PTR [rax],al
 1031898:	nop
 1031899:	add    DWORD PTR [rax],eax
 103189b:	add    ah,dh
 103189d:	add    DWORD PTR [rax],eax
 103189f:	add    BYTE PTR [rax+0x2],bl
 10318a2:	add    BYTE PTR [rax],al
 10318a4:	mov    esp,0x20000002
 10318a9:	add    eax,DWORD PTR [rax]
 10318ab:	add    BYTE PTR [rbx+rax*1+0x3e80000],al
 10318b2:	add    BYTE PTR [rax],al
 10318b4:	jo     0x10318b7
 10318b6:	add    BYTE PTR [rax],al
 10318b8:	rex.WR add al,0x0
 10318bb:	add    bh,bh
 10318bd:	(bad)  
 10318be:	(bad)  
 10318bf:	dec    DWORD PTR [rdi]
 10318c1:	add    BYTE PTR [rax],al
 10318c3:	add    BYTE PTR [rax+rcx*1+0x0],dh
 10318c7:	add    BYTE PTR [rax+rax*1],cl
 10318ca:	add    BYTE PTR [rax],al
 10318cc:	(bad)  
 10318cd:	(bad)  
 10318ce:	(bad)  
 10318cf:	dec    DWORD PTR [rdi]
 10318d1:	add    BYTE PTR [rax],al
 10318d3:	add    BYTE PTR [rax+0x1c000008],al
 10318d9:	add    BYTE PTR [rax],al
 10318db:	add    bh,bh
 10318dd:	(bad)  
 10318de:	(bad)  
 10318df:	dec    DWORD PTR [rdi]
 10318e1:	add    BYTE PTR [rax],al
 10318e3:	add    BYTE PTR [rdi+rax*1+0x0],dh
 10318e7:	add    BYTE PTR [rax],al
 10318e9:	add    DWORD PTR [rax],eax
 10318eb:	add    bh,bh
 10318ed:	(bad)  
 10318ee:	(bad)  
 10318ef:	dec    DWORD PTR [rdi]
 10318f1:	add    BYTE PTR [rax],al
 10318f3:	add    BYTE PTR [rbp+rax*1+0x800000],bh
 10318fa:	add    BYTE PTR [rax],al
 10318fc:	(bad)  
 10318fd:	(bad)  
 10318fe:	(bad)  
 10318ff:	dec    DWORD PTR [rdi]
 1031901:	add    BYTE PTR [rax],al
 1031903:	add    BYTE PTR [rsi+rax*1],bh
 1031906:	add    BYTE PTR [rax],al
 1031908:	cmp    BYTE PTR [rcx],al
 103190a:	add    BYTE PTR [rax],al
 103190c:	(bad)  
 103190d:	(bad)  
 103190e:	(bad)  
 103190f:	dec    DWORD PTR [rdi]
 1031911:	add    BYTE PTR [rax],al
 1031913:	add    BYTE PTR [rax+rcx*1+0x2000000],bl
 103191a:	add    BYTE PTR [rax],al
 103191c:	(bad)  
 103191d:	(bad)  
 103191e:	(bad)  
 103191f:	dec    DWORD PTR [rdi]
 1031921:	add    BYTE PTR [rax],al
 1031923:	add    BYTE PTR [rdx+rcx*1+0x2f00000],bl
 103192a:	add    BYTE PTR [rax],al
 103192c:	(bad)  
 103192d:	(bad)  
 103192e:	(bad)  
 103192f:	dec    DWORD PTR [rdi]
 1031931:	add    BYTE PTR [rax],al
 1031933:	add    BYTE PTR [rbp+rcx*1+0x1cc0000],cl
 103193a:	add    BYTE PTR [rax],al
 103193c:	(bad)  
 103193d:	(bad)  
 103193e:	(bad)  
 103193f:	dec    DWORD PTR [rdi]
 1031941:	add    BYTE PTR [rax],al
 1031943:	add    BYTE PTR [rax+0xf],bl
 1031946:	add    BYTE PTR [rax],al
 1031948:	sbb    BYTE PTR [rax],al
 103194a:	add    BYTE PTR [rax],al
 103194c:	(bad)  
 103194d:	(bad)  
 103194e:	(bad)  
 103194f:	dec    DWORD PTR [rdi]
 1031951:	add    BYTE PTR [rax],al
 1031953:	add    bh,bh
 1031955:	(bad)  
 1031956:	(bad)  
 1031957:	inc    DWORD PTR [rax]
 1031959:	add    BYTE PTR [rax],al
 103195b:	add    bh,bh
 103195d:	(bad)  
 103195e:	(bad)  
 103195f:	dec    DWORD PTR [rdi]
 1031961:	add    BYTE PTR [rax],al
 1031963:	add    bh,bh
 1031965:	(bad)  
 1031966:	(bad)  
 1031967:	inc    DWORD PTR [rax]
 1031969:	add    BYTE PTR [rax],al
 103196b:	add    bh,bh
 103196d:	(bad)  
 103196e:	(bad)  
 103196f:	dec    DWORD PTR [rdi]
 1031971:	add    BYTE PTR [rax],al
 1031973:	add    bh,bh
 1031975:	(bad)  
 1031976:	(bad)  
 1031977:	inc    DWORD PTR [rax]
 1031979:	add    BYTE PTR [rax],al
 103197b:	add    bh,bh
 103197d:	(bad)  
 103197e:	(bad)  
 103197f:	dec    DWORD PTR [rdi]
 1031981:	add    BYTE PTR [rax],al
 1031983:	add    bh,bh
 1031985:	(bad)  
 1031986:	(bad)  
 1031987:	inc    DWORD PTR [rax]
 1031989:	add    BYTE PTR [rax],al
 103198b:	add    bh,bh
 103198d:	(bad)  
 103198e:	(bad)  
 103198f:	dec    DWORD PTR [rdi]
 1031991:	add    BYTE PTR [rax],al
 1031993:	add    bh,bh
 1031995:	(bad)  
 1031996:	(bad)  
 1031997:	inc    DWORD PTR [rax]
 1031999:	add    BYTE PTR [rax],al
 103199b:	add    bh,bh
 103199d:	(bad)  
 103199e:	(bad)  
 103199f:	dec    DWORD PTR [rdi]
 10319a1:	add    BYTE PTR [rax],al
 10319a3:	add    BYTE PTR [rip+0x70000042],ah        # 0x710319eb
 10319a9:	sldt   WORD PTR [rax]
	...
 10319b4:	add    eax,DWORD PTR [rax]
	...
 10319ce:	add    BYTE PTR [rax],al
 10319d0:	sbb    BYTE PTR [rax],al
 10319d2:	add    BYTE PTR [rax],al
 10319d4:	add    al,BYTE PTR [rax]
 10319d6:	add    BYTE PTR [rax],al
 10319d8:	adc    al,0x0
 10319da:	add    BYTE PTR [rax],al
 10319dc:	add    BYTE PTR [rax],al
 10319de:	add    BYTE PTR [rax],al
 10319e0:	sbb    al,0x0
	...
 10319ea:	add    BYTE PTR [rax],al
 10319ec:	(bad)  
 10319ed:	(bad)  
 10319ee:	(bad)  
 10319ef:	inc    DWORD PTR [rdx]
 10319f1:	add    BYTE PTR [rax],al
 10319f3:	add    BYTE PTR [rax],cl
	...
 1031a01:	add    BYTE PTR [rax],al
 1031a03:	add    bh,bh
 1031a05:	(bad)  
 1031a06:	(bad)  
 1031a07:	jmp    QWORD PTR [rbx]
 1031a09:	rex.X add DWORD PTR [rax],eax
 1031a0c:	jo     0x1031a1d
	...
 1031a16:	add    BYTE PTR [rax],al
 1031a18:	add    eax,DWORD PTR [rax]
 1031a1a:	add    BYTE PTR [rax],al
 1031a1c:	add    BYTE PTR [rax],al
 1031a1e:	add    BYTE PTR [rax],al
 1031a20:	add    al,0x0
	...
 1031a32:	add    BYTE PTR [rax],al
 1031a34:	xor    BYTE PTR [rax],al
 1031a36:	add    BYTE PTR [rax],al
 1031a38:	add    BYTE PTR [rax],al
 1031a3a:	add    BYTE PTR [rax],al
 1031a3c:	xor    BYTE PTR [rax],al
 1031a3e:	add    BYTE PTR [rax],al
 1031a40:	add    BYTE PTR [rax],al
 1031a42:	add    BYTE PTR [rax],al
 1031a44:	cmp    BYTE PTR [rax],al
	...
 1031a4e:	add    BYTE PTR [rax],al
 1031a50:	(bad)  
 1031a51:	(bad)  
 1031a52:	(bad)  
 1031a53:	inc    DWORD PTR [rcx]
 1031a55:	add    BYTE PTR [rax],bh
 1031a57:	add    BYTE PTR [rax],cl
 1031a59:	add    BYTE PTR [rax],al
 1031a5b:	add    BYTE PTR [rcx],al
 1031a5d:	add    BYTE PTR [rax],al
 1031a5f:	add    BYTE PTR [rcx],al
 1031a61:	add    BYTE PTR [rbx],al
 1031a63:	add    BYTE PTR [rax],al
 1031a65:	add    BYTE PTR [rax],al
 1031a67:	add    bh,bh
 1031a69:	(bad)  
 1031a6a:	(bad)  
 1031a6b:	jmp    QWORD PTR [rbx]
 1031a6d:	rex.X add al,BYTE PTR [rax]
 1031a70:	xor    BYTE PTR [rax],dl
	...
 1031a7a:	add    BYTE PTR [rax],al
 1031a7c:	add    eax,DWORD PTR [rax]
 1031a7e:	add    BYTE PTR [rax],al
 1031a80:	add    BYTE PTR [rax],al
 1031a82:	add    BYTE PTR [rax],al
 1031a84:	add    DWORD PTR [rax],eax
	...
 1031a96:	add    BYTE PTR [rax],al
 1031a98:	js     0x1031a9a
 1031a9a:	add    BYTE PTR [rax],al
 1031a9c:	add    BYTE PTR [rax],al
 1031a9e:	add    BYTE PTR [rax],al
 1031aa0:	mov    eax,0x0
 1031aa5:	add    BYTE PTR [rax],al
 1031aa7:	add    BYTE PTR [rax+0x0],bl
 1031aad:	add    BYTE PTR [rax],al
 1031aaf:	add    BYTE PTR [rax],al
 1031ab1:	add    BYTE PTR [rax],al
 1031ab3:	add    bh,bh
 1031ab5:	(bad)  
 1031ab6:	(bad)  
 1031ab7:	inc    DWORD PTR [rcx]
 1031ab9:	add    BYTE PTR [rax],ah
 1031abb:	add    BYTE PTR [rax],cl
 1031abd:	add    BYTE PTR [rax],al
 1031abf:	add    BYTE PTR [rcx],al
 1031ac1:	add    BYTE PTR [rax],al
 1031ac3:	add    BYTE PTR [rcx],al
 1031ac5:	add    BYTE PTR [rbx],al
 1031ac7:	add    BYTE PTR [rax],al
 1031ac9:	add    BYTE PTR [rax],al
 1031acb:	add    bh,bh
 1031acd:	(bad)  
 1031ace:	(bad)  
 1031acf:	jmp    QWORD PTR [rax]
 1031ad1:	and    DWORD PTR [rbx],eax
 1031ad3:	add    BYTE PTR [rax+0x10],bh
	...
 1031ade:	add    BYTE PTR [rax],al
 1031ae0:	add    eax,DWORD PTR [rax]
	...
 1031aea:	add    al,0x0
	...
 1031afc:	(bad)  
 1031afd:	(bad)  
 1031afe:	(bad)  
 1031aff:	inc    DWORD PTR [rax]
 1031b01:	add    BYTE PTR [rax],al
 1031b03:	add    ah,dl
 1031b05:	add    BYTE PTR [rax],al
 1031b07:	add    BYTE PTR [rax],al
 1031b09:	add    BYTE PTR [rax],al
 1031b0b:	add    bh,bh
 1031b0d:	(bad)  
 1031b0e:	(bad)  
 1031b0f:	inc    DWORD PTR [rax]
 1031b11:	add    BYTE PTR [rax],al
 1031b13:	add    BYTE PTR [rax],al
 1031b15:	add    BYTE PTR [rax],al
 1031b17:	add    bh,bh
 1031b19:	(bad)  
 1031b1a:	(bad)  
 1031b1b:	inc    DWORD PTR [rax]
 1031b1d:	add    BYTE PTR [rax],al
 1031b1f:	add    BYTE PTR [rax+rax*1],al
 1031b22:	add    BYTE PTR [rax],al
 1031b24:	(bad)  
 1031b25:	(bad)  
 1031b26:	(bad)  
 1031b27:	inc    DWORD PTR [rax]
 1031b29:	add    BYTE PTR [rax],al
 1031b2b:	add    BYTE PTR [rax],al
 1031b2d:	add    BYTE PTR [rax],al
 1031b2f:	add    bh,bh
 1031b31:	(bad)  
 1031b32:	(bad)  
 1031b33:	jmp    QWORD PTR [rip+0xfffffffffc000442]        # 0xfffffffffd031f7b
 1031b39:	adc    BYTE PTR [rax],al
	...
 1031b43:	add    BYTE PTR [rbx],al
	...
 1031b5d:	add    BYTE PTR [rax],al
 1031b5f:	add    BYTE PTR [rax+0x2000000],dl
 1031b65:	add    BYTE PTR [rax],al
 1031b67:	add    BYTE PTR [rax+0x1],ch
 1031b6d:	add    BYTE PTR [rax],al
 1031b6f:	add    ah,al
	...
 1031b79:	add    BYTE PTR [rax],al
 1031b7b:	add    bh,bh
 1031b7d:	(bad)  
 1031b7e:	(bad)  
 1031b7f:	inc    DWORD PTR [rdx]
 1031b81:	add    BYTE PTR [rax],al
 1031b83:	add    BYTE PTR [rax],cl
 1031b85:	add    BYTE PTR [rax],al
 1031b87:	add    BYTE PTR [rax],ah
	...
 1031b91:	add    BYTE PTR [rax],al
 1031b93:	add    bh,bh
 1031b95:	(bad)  
 1031b96:	(bad)  
 1031b97:	jmp    QWORD PTR [rip+0xfffffffffc000542]        # 0xfffffffffd0320df
 1031b9d:	adc    BYTE PTR [rax],al
	...
 1031ba7:	add    BYTE PTR [rbx],al
	...
 1031bc1:	add    BYTE PTR [rax],al
 1031bc3:	add    BYTE PTR [rax+0x2000000],ch
 1031bc9:	add    BYTE PTR [rax],al
 1031bcb:	add    al,al
 1031bcd:	add    DWORD PTR [rax],eax
 1031bcf:	add    BYTE PTR [rax],al
 1031bd1:	add    BYTE PTR [rax],al
 1031bd3:	add    ah,ah
	...
 1031bdd:	add    BYTE PTR [rax],al
 1031bdf:	add    bh,bh
 1031be1:	(bad)  
 1031be2:	(bad)  
 1031be3:	inc    DWORD PTR [rbx]
 1031be5:	add    BYTE PTR [rax],al
 1031be7:	add    BYTE PTR [rax],cl
 1031be9:	add    BYTE PTR [rax],al
 1031beb:	add    BYTE PTR [rax+0x0],al
	...
 1031bf6:	add    BYTE PTR [rax],al
 1031bf8:	(bad)  
 1031bf9:	(bad)  
 1031bfa:	(bad)  
 1031bfb:	jmp    QWORD PTR [rbx]
 1031bfd:	rex.X (bad) 
 1031bff:	add    ah,bh
 1031c01:	adc    BYTE PTR [rax],al
	...
 1031c0b:	add    BYTE PTR [rbx],al
 1031c0d:	add    BYTE PTR [rax],al
 1031c0f:	add    BYTE PTR [rax],al
 1031c11:	add    BYTE PTR [rax],al
 1031c13:	add    BYTE PTR [rcx],al
	...
 1031c25:	add    BYTE PTR [rax],al
 1031c27:	add    al,al
 1031c29:	add    BYTE PTR [rax],al
 1031c2b:	add    BYTE PTR [rax],al
 1031c2d:	add    BYTE PTR [rax],al
 1031c2f:	add    ah,bl
 1031c31:	add    DWORD PTR [rax],eax
 1031c33:	add    BYTE PTR [rax],al
 1031c35:	add    BYTE PTR [rax],al
 1031c37:	add    BYTE PTR [rcx+rax*1],cl
	...
 1031c42:	add    BYTE PTR [rax],al
 1031c44:	(bad)  
 1031c45:	(bad)  
 1031c46:	(bad)  
 1031c47:	inc    DWORD PTR [rcx]
 1031c49:	add    BYTE PTR [rax],ah
 1031c4b:	add    BYTE PTR [rax],cl
 1031c4d:	add    BYTE PTR [rax],al
 1031c4f:	add    BYTE PTR [rcx],al
 1031c51:	add    BYTE PTR [rax],al
 1031c53:	add    BYTE PTR [rcx],al
 1031c55:	add    BYTE PTR [rbx],al
 1031c57:	add    BYTE PTR [rax],al
 1031c59:	add    BYTE PTR [rax],al
 1031c5b:	add    bh,bh
 1031c5d:	(bad)  
 1031c5e:	(bad)  
 1031c5f:	jmp    QWORD PTR [rip+0x50000742]        # 0x510323a7
 1031c65:	adc    DWORD PTR [rax],eax
	...
 1031c6f:	add    BYTE PTR [rbx],al
	...
 1031c89:	add    BYTE PTR [rax],al
 1031c8b:	add    al,bl
 1031c8d:	add    BYTE PTR [rax],al
 1031c8f:	add    BYTE PTR [rdx],al
 1031c91:	add    BYTE PTR [rax],al
 1031c93:	add    BYTE PTR [rdx+rax*1+0x0],cl
 1031c9a:	add    BYTE PTR [rax],al
 1031c9c:	pop    rax
 1031c9d:	add    DWORD PTR [rax],eax
	...
 1031ca7:	add    bh,bh
 1031ca9:	(bad)  
 1031caa:	(bad)  
 1031cab:	inc    DWORD PTR [rdx]
 1031cad:	add    BYTE PTR [rax],al
 1031caf:	add    BYTE PTR [rax],cl
 1031cb1:	add    BYTE PTR [rax],al
 1031cb3:	add    BYTE PTR [rax+0x0],dh
	...
 1031cbe:	add    BYTE PTR [rax],al
 1031cc0:	(bad)  
 1031cc1:	(bad)  
 1031cc2:	(bad)  
 1031cc3:	jmp    QWORD PTR [rip+0x50000842]        # 0x5103250b
 1031cc9:	adc    DWORD PTR [rax],eax
	...
 1031cd3:	add    BYTE PTR [rbx],al
	...
 1031ced:	add    BYTE PTR [rax],al
 1031cef:	add    al,dh
 1031cf1:	add    BYTE PTR [rax],al
 1031cf3:	add    BYTE PTR [rdx],al
 1031cf5:	add    BYTE PTR [rax],al
 1031cf7:	add    BYTE PTR [rdx+rax*1+0x0],ah
 1031cfe:	add    BYTE PTR [rax],al
 1031d00:	je     0x1031d03
	...
 1031d0a:	add    BYTE PTR [rax],al
 1031d0c:	(bad)  
 1031d0d:	(bad)  
 1031d0e:	(bad)  
 1031d0f:	inc    DWORD PTR [rdx]
 1031d11:	add    BYTE PTR [rax],al
 1031d13:	add    BYTE PTR [rax],cl
 1031d15:	add    BYTE PTR [rax],al
 1031d17:	add    BYTE PTR [rax+0x0],dl
 1031d1d:	add    BYTE PTR [rax],al
 1031d1f:	add    BYTE PTR [rax],al
 1031d21:	add    BYTE PTR [rax],al
 1031d23:	add    bh,bh
 1031d25:	(bad)  
 1031d26:	(bad)  
 1031d27:	jmp    QWORD PTR [rip+0x50000942]        # 0x5103266f
 1031d2d:	adc    DWORD PTR [rax],eax
	...
 1031d37:	add    BYTE PTR [rbx],al
	...
 1031d51:	add    BYTE PTR [rax],al
 1031d53:	add    BYTE PTR [rax],cl
 1031d55:	add    DWORD PTR [rax],eax
 1031d57:	add    BYTE PTR [rdx],al
 1031d59:	add    BYTE PTR [rax],al
 1031d5b:	add    BYTE PTR [rdx+rax*1+0x0],bh
 1031d62:	add    BYTE PTR [rax],al
 1031d64:	mov    WORD PTR [rcx],es
	...
 1031d6e:	add    BYTE PTR [rax],al
 1031d70:	(bad)  
 1031d71:	(bad)  
 1031d72:	(bad)  
 1031d73:	inc    DWORD PTR [rbx]
 1031d75:	add    BYTE PTR [rax],al
 1031d77:	add    BYTE PTR [rax],cl
 1031d79:	add    BYTE PTR [rax],al
 1031d7b:	add    BYTE PTR [rax+0x0],dh
 1031d81:	add    BYTE PTR [rax],al
 1031d83:	add    BYTE PTR [rax],al
 1031d85:	add    BYTE PTR [rax],al
 1031d87:	add    bh,bh
 1031d89:	(bad)  
 1031d8a:	(bad)  
 1031d8b:	jmp    QWORD PTR [rip+0x50000a42]        # 0x510327d3
 1031d91:	adc    DWORD PTR [rax],eax
	...
 1031d9b:	add    BYTE PTR [rbx],al
	...
 1031db5:	add    BYTE PTR [rax],al
 1031db7:	add    BYTE PTR [rax],ah
 1031db9:	add    DWORD PTR [rax],eax
 1031dbb:	add    BYTE PTR [rdx],al
 1031dbd:	add    BYTE PTR [rax],al
 1031dbf:	add    al,bl
 1031dc1:	add    al,BYTE PTR [rax]
 1031dc3:	add    BYTE PTR [rax],al
 1031dc5:	add    BYTE PTR [rax],al
 1031dc7:	add    BYTE PTR [rcx+rax*1+0x0],ch
 1031dce:	add    BYTE PTR [rax],al
 1031dd0:	add    BYTE PTR [rax],al
 1031dd2:	add    BYTE PTR [rax],al
 1031dd4:	(bad)  
 1031dd5:	(bad)  
 1031dd6:	(bad)  
 1031dd7:	inc    DWORD PTR [rdx]
 1031dd9:	add    BYTE PTR [rax],al
 1031ddb:	add    BYTE PTR [rax],cl
 1031ddd:	add    BYTE PTR [rax],al
 1031ddf:	add    al,ah
	...
 1031de9:	add    BYTE PTR [rax],al
 1031deb:	add    bh,bh
 1031ded:	(bad)  
 1031dee:	(bad)  
 1031def:	jmp    QWORD PTR [rax+0x0]
 1031df2:	add    BYTE PTR [rax],al
 1031df4:	(bad)  
 1031df5:	(bad)  
 1031df6:	(bad)  
 1031df7:	(bad)  
 1031df8:	(bad)  
 1031df9:	(bad)  
 1031dfa:	(bad)  
 1031dfb:	(bad)  
 1031dfc:	(bad)  
 1031dfd:	(bad)  
 1031dfe:	(bad)  
 1031dff:	jmp    FWORD PTR [rax-0x1000000]
 1031e05:	(bad)  
 1031e06:	(bad)  
 1031e07:	(bad)  
 1031e08:	(bad)  
 1031e09:	(bad)  
 1031e0a:	(bad)  
 1031e0b:	(bad)  
 1031e0c:	(bad)  
 1031e0d:	(bad)  
 1031e0e:	(bad)  
 1031e0f:	jmp    QWORD PTR [rax]
 1031e11:	add    DWORD PTR [rax],eax
 1031e13:	add    al,al
 1031e15:	add    BYTE PTR [rax],al
 1031e17:	add    bh,bh
 1031e19:	(bad)  
 1031e1a:	(bad)  
 1031e1b:	(bad)  
 1031e1c:	(bad)  
 1031e1d:	(bad)  
 1031e1e:	(bad)  
 1031e1f:	(bad)  
 1031e20:	(bad)  
 1031e21:	(bad)  
 1031e22:	(bad)  
 1031e23:	(bad)  
 1031e24:	(bad)  
 1031e25:	(bad)  
 1031e26:	(bad)  
 1031e27:	(bad)  
 1031e28:	fadd   DWORD PTR [rax]
 1031e2a:	add    BYTE PTR [rax],al
 1031e2c:	(bad)  
 1031e2d:	(bad)  
 1031e2e:	(bad)  
 1031e2f:	(bad)  
 1031e30:	(bad)  
 1031e31:	(bad)  
 1031e32:	(bad)  
 1031e33:	(bad)  
 1031e34:	(bad)  
 1031e35:	(bad)  
 1031e36:	(bad)  
 1031e37:	dec    DWORD PTR [rax+0x0]
 1031e3a:	add    BYTE PTR [rax],al
 1031e3c:	(bad)  
 1031e3d:	(bad)  
 1031e3e:	(bad)  
 1031e3f:	call   FWORD PTR [rax]
 1031e41:	add    BYTE PTR [rax],al
 1031e43:	add    bh,bh
 1031e45:	(bad)  
 1031e46:	(bad)  
 1031e47:	(bad)  
 1031e48:	js     0x1031e4a
 1031e4a:	add    BYTE PTR [rax],al
 1031e4c:	(bad)  
 1031e4d:	(bad)  
 1031e4e:	(bad)  
 1031e4f:	(bad)  
 1031e50:	(bad)  
 1031e51:	(bad)  
 1031e52:	(bad)  
 1031e53:	push   rax
 1031e55:	add    BYTE PTR [rax],al
 1031e57:	add    BYTE PTR [rax],cl
 1031e59:	add    DWORD PTR [rax],eax
 1031e5b:	add    bh,bh
 1031e5d:	(bad)  
 1031e5e:	(bad)  
 1031e5f:	inc    DWORD PTR [rax]
 1031e61:	add    BYTE PTR [rax],al
 1031e63:	add    BYTE PTR [rax],dh
 1031e65:	add    BYTE PTR [rax],al
 1031e67:	add    bh,bh
 1031e69:	(bad)  
 1031e6a:	(bad)  
 1031e6b:	(bad)  
 1031e6c:	(bad)  
 1031e6d:	(bad)  
 1031e6e:	(bad)  
 1031e6f:	call   QWORD PTR [rdx-0x3bc86042]
 1031e75:	cmp    al,0xd
 1031e77:	rex.WRXB lods rax,QWORD PTR ds:[rsi]
 1031e79:	rcr    cl,1
 1031e7b:	not    DWORD PTR [rbx+riz*8-0x12b88]
 1031e82:	(bad)  
 1031e83:	(bad)  
 1031e84:	(bad)  
 1031e85:	(bad)  
 1031e86:	(bad)  
 1031e87:	call   QWORD PTR [rsi+0x53b56960]
 1031e8d:	fmul   st,st(2)
 1031e8f:	rex.RB cmps DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1031e91:	cmp    DWORD PTR [rcx+0x5fdd7386],ebx
 1031e97:	leave  
 1031e98:	add    BYTE PTR [rax],al
 1031e9a:	add    BYTE PTR [rax],al
 1031e9c:	(bad)  
 1031e9d:	(bad)  
 1031e9e:	(bad)  
 1031e9f:	jmp    FWORD PTR [rsi-0x459a4a54]
 1031ea5:	cld    
 1031ea6:	(bad)  
 1031ea7:	xchg   r13,rax
 1031ea9:	sbb    ebx,DWORD PTR [rax+0x62637774]
 1031eaf:	xor    DWORD PTR [rax+rax*1+0x0],esp
 1031eb3:	add    bh,bh
 1031eb5:	(bad)  
 1031eb6:	(bad)  
 1031eb7:	push   QWORD PTR [rax]
 1031eb9:	add    al,0x2
 1031ebb:	add    BYTE PTR [rax],al
 1031ebd:	add    BYTE PTR [rax],al
 1031ebf:	add    al,al
 1031ec1:	add    BYTE PTR [rax],al
 1031ec3:	add    BYTE PTR [rax],al
 1031ec5:	add    BYTE PTR [rax],al
 1031ec7:	rex.RX add r8b,BYTE PTR [rax]
 1031eca:	add    BYTE PTR [rax],al
 1031ecc:	(bad)  
 1031ecd:	(bad)  
 1031ece:	(bad)  
 1031ecf:	inc    DWORD PTR [rax]
 1031ed1:	add    BYTE PTR [rax],al
 1031ed3:	add    BYTE PTR [rax],al
 1031ed5:	add    BYTE PTR [rax],al
 1031ed7:	add    al,al
 1031ed9:	add    BYTE PTR [rax],al
 1031edb:	add    BYTE PTR [rax],al
 1031edd:	add    BYTE PTR [rax],al
 1031edf:	rex.RX add DWORD PTR [rax],r8d
 1031ee2:	add    BYTE PTR [rax],al
 1031ee4:	(bad)  
 1031ee5:	(bad)  
 1031ee6:	(bad)  
 1031ee7:	jmp    QWORD PTR [rax]
 1031ee9:	push   rdi
 1031eea:	(bad)  
 1031eeb:	movabs eax,ds:0x6e6e2a8b4973be85
 1031ef4:	ds xchg edi,eax
 1031ef6:	int    0xa4
 1031ef8:	enter  0x0,0x0
 1031efc:	(bad)  
 1031efd:	(bad)  
 1031efe:	(bad)  
 1031eff:	(bad)  
 1031f00:	jmp    0x14d73097
 1031f05:	stos   DWORD PTR es:[rdi],eax
 1031f06:	and    ecx,DWORD PTR [rdx-0x55]
 1031f09:	cmp    esp,DWORD PTR [rbp+0x683d9fe]
 1031f0f:	fist   DWORD PTR [rax-0xffffff]
 1031f15:	(bad)  
 1031f16:	(bad)  
 1031f17:	jmp    FWORD PTR [rbx+0x899434d]
 1031f1d:	wrmsr  
 1031f1f:	rex.WRXB mov r15,cs
 1031f22:	mov    bl,0xe8
 1031f24:	add    dl,BYTE PTR [rsi+0x1f407c9]
 1031f2a:	add    BYTE PTR [rax],al
 1031f2c:	(bad)  
 1031f2d:	(bad)  
 1031f2e:	(bad)  
 1031f2f:	jmp    QWORD PTR [rsi]
 1031f31:	pop    rsi
 1031f32:	sbb    eax,0x80b406ed
 1031f37:	rex.WX xor QWORD PTR [rbx],0x76
 1031f3b:	rex.RB stos BYTE PTR es:[rdi],al
 1031f3d:	(bad)  
 1031f3e:	or     edx,DWORD PTR [rdi+0x58]
 1031f41:	add    al,BYTE PTR [rax]
 1031f43:	add    bh,bh
 1031f45:	(bad)  
 1031f46:	(bad)  
 1031f47:	dec    DWORD PTR [rax+0x2e]
 1031f4a:	mov    WORD PTR [rsi],?
 1031f4c:	mov    DWORD PTR [rsi+0x70],edi
 1031f4f:	xchg   r12,rax
 1031f51:	leave  
 1031f52:	addr32 push rdi
 1031f54:	jmp    0xffffffffbdb268c5
 1031f59:	add    al,BYTE PTR [rax]
 1031f5b:	add    bh,bh
 1031f5d:	(bad)  
 1031f5e:	(bad)  
 1031f5f:	inc    DWORD PTR [rax+riz*8-0x9]
 1031f63:	std    
 1031f64:	outs   dx,BYTE PTR ds:[rsi]
 1031f65:	(bad)
 1031f69:	xchg   esi,eax
 1031f6a:	xor    BYTE PTR [rcx+rdi*2-0x56],0xfb
 1031f6f:	rex.WRB and BYTE PTR [r11],r8b
 1031f72:	add    BYTE PTR [rax],al
 1031f74:	nop
 1031f75:	add    BYTE PTR [rax],al
 1031f77:	add    BYTE PTR [rax+0x43],al
 1031f7a:	sub    al,BYTE PTR [rdi+rdx*8]
 1031f7d:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1031f7e:	fld    QWORD PTR [rdx+riz*4+0x2e]
 1031f82:	xchg   ebx,eax
 1031f83:	(bad)  
 1031f84:	(bad)  
 1031f85:	mov    ch,0x24
 1031f87:	jne    0x1031f0d
 1031f89:	add    eax,DWORD PTR [rax]
 1031f8b:	add    bh,bh
 1031f8d:	(bad)  
 1031f8e:	(bad)  
 1031f8f:	inc    DWORD PTR [rdi+rsi*2]
 1031f92:	jae    0x1031f91
 1031f94:	retf   
 1031f95:	rex.XB xchg r9d,eax
 1031f97:	rex.RXB mov r12b,0xdb
 1031f9a:	out    dx,al
 1031f9b:	mov    ebx,ds
 1031f9d:	mov    BYTE PTR [rax+rdx*2-0x18],0x3
 1031fa2:	add    BYTE PTR [rax],al
 1031fa4:	(bad)  
 1031fa5:	(bad)  
 1031fa6:	(bad)  
 1031fa7:	jmp    QWORD PTR [rax+rax*1+0x0]
 1031fab:	add    BYTE PTR [rcx],al
 1031fad:	add    BYTE PTR [rax],al
 1031faf:	add    bh,bh
 1031fb1:	(bad)  
 1031fb2:	(bad)  
 1031fb3:	call   QWORD PTR [rax]
 1031fb5:	add    BYTE PTR [rax],al
 1031fb7:	add    al,cl
 1031fb9:	add    BYTE PTR [rax],al
 1031fbb:	add    BYTE PTR [rbx],al
 1031fbd:	add    BYTE PTR [rax],al
 1031fbf:	add    bh,bh
 1031fc1:	(bad)  
 1031fc2:	(bad)  
 1031fc3:	(bad)  
 1031fc4:	(bad)  
 1031fc5:	(bad)  
 1031fc6:	(bad)  
 1031fc7:	jmp    QWORD PTR [rax+rax*1+0x0]
 1031fcb:	add    BYTE PTR [rcx],al
 1031fcd:	add    BYTE PTR [rax],al
 1031fcf:	add    bh,bh
 1031fd1:	(bad)  
 1031fd2:	(bad)  
 1031fd3:	push   QWORD PTR [rax]
 1031fd5:	add    BYTE PTR [rax],al
 1031fd7:	add    al,cl
 1031fd9:	add    BYTE PTR [rax],al
 1031fdb:	add    BYTE PTR [rbx],al
 1031fdd:	add    BYTE PTR [rax],al
 1031fdf:	add    bh,bh
 1031fe1:	(bad)  
 1031fe2:	(bad)  
 1031fe3:	(bad)  
 1031fe4:	(bad)  
 1031fe5:	(bad)  
 1031fe6:	(bad)  
 1031fe7:	jmp    QWORD PTR [rax+rax*1+0x0]
 1031feb:	add    BYTE PTR [rcx],al
 1031fed:	add    BYTE PTR [rax],al
 1031fef:	add    bh,bh
 1031ff1:	(bad)  
 1031ff2:	(bad)  
 1031ff3:	call   QWORD PTR [rax+0x0]
 1031ff6:	add    BYTE PTR [rax],al
 1031ff8:	pop    rax
 1031ff9:	add    al,BYTE PTR [rax]
 1031ffb:	add    BYTE PTR [rax],al
 1031ffd:	add    BYTE PTR [rax],al
 1031fff:	add    bh,bh
 1032001:	(bad)  
 1032002:	(bad)  
 1032003:	jmp    QWORD PTR [rax+0x0]
 1032006:	add    BYTE PTR [rax],al
 1032008:	enter  0x0,0x0
 103200c:	add    eax,DWORD PTR [rax]
 103200e:	add    BYTE PTR [rax],al
 1032010:	(bad)  
 1032011:	(bad)  
 1032012:	(bad)  
 1032013:	(bad)  
 1032014:	(bad)  
 1032015:	(bad)  
 1032016:	(bad)  
 1032017:	jmp    QWORD PTR [rax+rax*1+0x0]
 103201b:	add    BYTE PTR [rcx],al
 103201d:	add    BYTE PTR [rax],al
 103201f:	add    bh,bh
 1032021:	(bad)  
 1032022:	(bad)  
 1032023:	inc    DWORD PTR [rax-0x38000000]
 1032029:	add    BYTE PTR [rax],al
 103202b:	add    BYTE PTR [rbx],al
 103202d:	add    BYTE PTR [rax],al
 103202f:	add    bh,bh
 1032031:	(bad)  
 1032032:	(bad)  
 1032033:	(bad)  
 1032034:	(bad)  
 1032035:	(bad)  
 1032036:	(bad)  
 1032037:	jmp    QWORD PTR [rax+rax*1+0x0]
 103203b:	add    BYTE PTR [rcx],al
 103203d:	add    BYTE PTR [rax],al
 103203f:	add    bh,bh
 1032041:	(bad)  
 1032042:	(bad)  
 1032043:	jmp    QWORD PTR [rax-0x38000000]
 1032049:	add    BYTE PTR [rax],al
 103204b:	add    BYTE PTR [rbx],al
 103204d:	add    BYTE PTR [rax],al
 103204f:	add    bh,bh
 1032051:	(bad)  
 1032052:	(bad)  
 1032053:	(bad)  
 1032054:	(bad)  
 1032055:	(bad)  
 1032056:	(bad)  
 1032057:	jmp    QWORD PTR [rax+rax*1+0x0]
 103205b:	add    BYTE PTR [rcx],al
 103205d:	add    BYTE PTR [rax],al
 103205f:	add    bh,bh
 1032061:	(bad)  
 1032062:	(bad)  
 1032063:	inc    eax
 1032065:	add    BYTE PTR [rax],al
 1032067:	add    BYTE PTR [rax+0x2],bl
 103206a:	add    BYTE PTR [rax],al
 103206c:	add    BYTE PTR [rax],al
 103206e:	add    BYTE PTR [rax],al
 1032070:	(bad)  
 1032071:	(bad)  
 1032072:	(bad)  
 1032073:	call   rax
 1032075:	add    BYTE PTR [rax],al
 1032077:	add    al,cl
 1032079:	add    BYTE PTR [rax],al
 103207b:	add    BYTE PTR [rbx],al
 103207d:	add    BYTE PTR [rax],al
 103207f:	add    bh,bh
 1032081:	(bad)  
 1032082:	(bad)  
 1032083:	(bad)  
 1032084:	(bad)  
 1032085:	(bad)  
 1032086:	(bad)  
 1032087:	jmp    QWORD PTR [rax+rax*1+0x0]
 103208b:	add    BYTE PTR [rcx],al
 103208d:	add    BYTE PTR [rax],al
 103208f:	add    bh,bh
 1032091:	(bad)  
 1032092:	(bad)  
 1032093:	push   rax
 1032095:	add    BYTE PTR [rax],al
 1032097:	add    al,cl
 1032099:	add    BYTE PTR [rax],al
 103209b:	add    BYTE PTR [rbx],al
 103209d:	add    BYTE PTR [rax],al
 103209f:	add    bh,bh
 10320a1:	(bad)  
 10320a2:	(bad)  
 10320a3:	(bad)  
 10320a4:	(bad)  
 10320a5:	(bad)  
 10320a6:	(bad)  
 10320a7:	inc    DWORD PTR [rax]
 10320a9:	add    BYTE PTR [rcx],al
 10320ab:	add    eax,DWORD PTR [rax]
 10320ad:	add    BYTE PTR [rax],al
 10320af:	add    BYTE PTR [rax+0x0],ah
 10320b2:	add    BYTE PTR [rax],al
 10320b4:	rex.W add BYTE PTR [rax],al
 10320b7:	add    BYTE PTR [rax],al
 10320b9:	add    BYTE PTR [rax],al
 10320bb:	add    BYTE PTR [rdx],al
 10320bd:	add    BYTE PTR [rax],al
 10320bf:	add    BYTE PTR [rdi],ch
 10320c1:	add    BYTE PTR [rbx+0x74],dh
 10320c4:	outs   dx,DWORD PTR fs:[rsi]
 10320c6:	ins    BYTE PTR es:[rdi],dx
 10320c7:	xor    ch,BYTE PTR gs:[rsi]
 10320ca:	je     0x1032138
 10320cc:	(bad)  
 10320cd:	push   rdi
 10320ce:	push   rdi
 10320cf:	push   rdi
 10320d0:	(bad)  
 10320d1:	(bad)  
 10320d2:	(bad)  
 10320d3:	jmp    QWORD PTR [rax+rax*1-0x10000]
 10320da:	(bad)  
 10320db:	(bad)  
 10320dc:	(bad)  
 10320dd:	(bad)  
 10320de:	(bad)  
 10320df:	(bad)  
 10320e0:	(bad)  
 10320e1:	(bad)  
 10320e2:	(bad)  
 10320e3:	(bad)  
 10320e4:	mov    eax,0xff000000
 10320e9:	(bad)  
 10320ea:	(bad)  
 10320eb:	(bad)  
 10320ec:	(bad)  
 10320ed:	(bad)  
 10320ee:	(bad)  
 10320ef:	(bad)  
 10320f0:	(bad)  
 10320f1:	(bad)  
 10320f2:	(bad)  
 10320f3:	(bad)  
 10320f4:	(bad)  
 10320f5:	(bad)  
 10320f6:	(bad)  
 10320f7:	dec    DWORD PTR [rax+0x2]
 10320fa:	add    BYTE PTR [rax],al
 10320fc:	(bad)  
 10320fd:	(bad)  
 10320fe:	(bad)  
 10320ff:	(bad)  
 1032100:	(bad)  
 1032101:	(bad)  
 1032102:	(bad)  
 1032103:	(bad)  
 1032104:	(bad)  
 1032105:	(bad)  
 1032106:	(bad)  
 1032107:	(bad)  
 1032108:	(bad)  
 1032109:	(bad)  
 103210a:	(bad)  
 103210b:	(bad)  
 103210c:	(bad)  
 103210d:	(bad)  
 103210e:	(bad)  
 103210f:	(bad)  
 1032110:	(bad)  
 1032111:	(bad)  
 1032112:	(bad)  
 1032113:	(bad)  
 1032114:	(bad)  
 1032115:	(bad)  
 1032116:	(bad)  
 1032117:	(bad)  
 1032118:	jl     0x103211b
 103211a:	add    BYTE PTR [rax],al
 103211c:	(bad)  
 103211d:	(bad)  
 103211e:	(bad)  
 103211f:	(bad)  
 1032120:	(bad)  
 1032121:	(bad)  
 1032122:	(bad)  
 1032123:	(bad)  
 1032124:	(bad)  
 1032125:	(bad)  
 1032126:	(bad)  
 1032127:	(bad)  
 1032128:	(bad)  
 1032129:	(bad)  
 103212a:	(bad)  
 103212b:	(bad)  
 103212c:	(bad)  
 103212d:	(bad)  
 103212e:	(bad)  
 103212f:	(bad)  
 1032130:	(bad)  
 1032131:	(bad)  
 1032132:	(bad)  
 1032133:	(bad)  
 1032134:	(bad)  
 1032135:	(bad)  
 1032136:	(bad)  
 1032137:	(bad)  
 1032138:	(bad)  
 1032139:	(bad)  
 103213a:	(bad)  
 103213b:	(bad)  
 103213c:	(bad)  
 103213d:	(bad)  
 103213e:	(bad)  
 103213f:	(bad)  
 1032140:	(bad)  
 1032141:	(bad)  
 1032142:	(bad)  
 1032143:	(bad)  
 1032144:	(bad)  
 1032145:	(bad)  
 1032146:	(bad)  
 1032147:	(bad)  
 1032148:	(bad)  
 1032149:	(bad)  
 103214a:	(bad)  
 103214b:	(bad)  
 103214c:	(bad)  
 103214d:	(bad)  
 103214e:	(bad)  
 103214f:	(bad)  
 1032150:	(bad)  
 1032151:	(bad)  
 1032152:	(bad)  
 1032153:	(bad)  
 1032154:	(bad)  
 1032155:	(bad)  
 1032156:	(bad)  
 1032157:	(bad)  
 1032158:	(bad)  
 1032159:	(bad)  
 103215a:	(bad)  
 103215b:	(bad)  
 103215c:	(bad)  
 103215d:	(bad)  
 103215e:	(bad)  
 103215f:	(bad)  
 1032160:	(bad)  
 1032161:	(bad)  
 1032162:	(bad)  
 1032163:	(bad)  
 1032164:	(bad)  
 1032165:	(bad)  
 1032166:	(bad)  
 1032167:	(bad)  
 1032168:	(bad)  
 1032169:	(bad)  
 103216a:	(bad)  
 103216b:	(bad)  
 103216c:	(bad)  
 103216d:	(bad)  
 103216e:	(bad)  
 103216f:	(bad)  
 1032170:	(bad)  
 1032171:	(bad)  
 1032172:	(bad)  
 1032173:	(bad)  
 1032174:	(bad)  
 1032175:	(bad)  
 1032176:	(bad)  
 1032177:	(bad)  
 1032178:	(bad)  
 1032179:	(bad)  
 103217a:	(bad)  
 103217b:	(bad)  
 103217c:	(bad)  
 103217d:	(bad)  
 103217e:	(bad)  
 103217f:	(bad)  
 1032180:	(bad)  
 1032181:	(bad)  
 1032182:	(bad)  
 1032183:	(bad)  
 1032184:	(bad)  
 1032185:	(bad)  
 1032186:	(bad)  
 1032187:	(bad)  
 1032188:	(bad)  
 1032189:	(bad)  
 103218a:	(bad)  
 103218b:	(bad)  
 103218c:	(bad)  
 103218d:	(bad)  
 103218e:	(bad)  
 103218f:	(bad)  
 1032190:	(bad)  
 1032191:	(bad)  
 1032192:	(bad)  
 1032193:	(bad)  
 1032194:	fadd   DWORD PTR [rdx]
 1032196:	add    BYTE PTR [rax],al
 1032198:	test   al,0x1
 103219a:	add    BYTE PTR [rax],al
 103219c:	xor    BYTE PTR [rcx],al
 103219e:	add    BYTE PTR [rax],al
 10321a0:	(bad)  
 10321a1:	(bad)  
 10321a2:	(bad)  
 10321a3:	dec    DWORD PTR [rdx+rax*1-0x10000]
 10321aa:	(bad)  
 10321ab:	(bad)  
 10321ac:	(bad)  
 10321ad:	(bad)  
 10321ae:	(bad)  
 10321af:	(bad)  
 10321b0:	(bad)  
 10321b1:	(bad)  
 10321b2:	(bad)  
 10321b3:	jmp    FWORD PTR [rdx+rax*1+0x0]
 10321b7:	add    bh,bh
 10321b9:	(bad)  
 10321ba:	(bad)  
 10321bb:	(bad)  
 10321bc:	(bad)  
 10321bd:	(bad)  
 10321be:	(bad)  
 10321bf:	(bad)  
 10321c0:	(bad)  
 10321c1:	(bad)  
 10321c2:	(bad)  
 10321c3:	(bad)  
 10321c4:	(bad)  
 10321c5:	(bad)  
 10321c6:	(bad)  
 10321c7:	(bad)  
 10321c8:	js     0x10321ca
 10321ca:	add    BYTE PTR [rax],al
 10321cc:	sub    al,0x2
 10321ce:	add    BYTE PTR [rax],al
 10321d0:	(bad)  
 10321d1:	(bad)  
 10321d2:	(bad)  
 10321d3:	(bad)  
 10321d4:	(bad)  
 10321d5:	(bad)  
 10321d6:	(bad)  
 10321d7:	(bad)  
 10321d8:	(bad)  
 10321d9:	(bad)  
 10321da:	(bad)  
 10321db:	(bad)  
 10321dc:	(bad)  
 10321dd:	(bad)  
 10321de:	(bad)  
 10321df:	(bad)  
 10321e0:	(bad)  
 10321e1:	(bad)  
 10321e2:	(bad)  
 10321e3:	(bad)  
 10321e4:	(bad)  
 10321e5:	(bad)  
 10321e6:	(bad)  
 10321e7:	(bad)  
 10321e8:	(bad)  
 10321e9:	(bad)  
 10321ea:	(bad)  
 10321eb:	(bad)  
 10321ec:	(bad)  
 10321ed:	(bad)  
 10321ee:	(bad)  
 10321ef:	(bad)  
 10321f0:	(bad)  
 10321f1:	(bad)  
 10321f2:	(bad)  
 10321f3:	(bad)  
 10321f4:	(bad)  
 10321f5:	(bad)  
 10321f6:	(bad)  
 10321f7:	(bad)  
 10321f8:	mov    esp,0xff000002
 10321fd:	(bad)  
 10321fe:	(bad)  
 10321ff:	inc    DWORD PTR [rax]
 1032201:	add    BYTE PTR [rax],al
 1032203:	add    bh,bh
 1032205:	(bad)  
 1032206:	(bad)  
 1032207:	(bad)  
 1032208:	(bad)  
 1032209:	(bad)  
 103220a:	(bad)  
 103220b:	(bad)  
 103220c:	(bad)  
 103220d:	(bad)  
 103220e:	(bad)  
 103220f:	(bad)  
 1032210:	(bad)  
 1032211:	(bad)  
 1032212:	(bad)  
 1032213:	(bad)  
 1032214:	(bad)  
 1032215:	(bad)  
 1032216:	(bad)  
 1032217:	(bad)  
 1032218:	(bad)  
 1032219:	(bad)  
 103221a:	(bad)  
 103221b:	dec    DWORD PTR [rax+0x0]
 103221e:	add    BYTE PTR [rax],al
 1032220:	(bad)  
 1032221:	(bad)  
 1032222:	(bad)  
 1032223:	(bad)  
 1032224:	(bad)  
 1032225:	(bad)  
 1032226:	(bad)  
 1032227:	jmp    QWORD PTR [rdx+rax*1-0x10000]
 103222e:	(bad)  
 103222f:	(bad)  
 1032230:	(bad)  
 1032231:	(bad)  
 1032232:	(bad)  
 1032233:	(bad)  
 1032234:	(bad)  
 1032235:	(bad)  
 1032236:	(bad)  
 1032237:	(bad)  
 1032238:	(bad)  
 1032239:	(bad)  
 103223a:	(bad)  
 103223b:	call   QWORD PTR [rax-0xffffff]
 1032241:	(bad)  
 1032242:	(bad)  
 1032243:	(bad)  
 1032244:	(bad)  
 1032245:	(bad)  
 1032246:	(bad)  
 1032247:	(bad)  
 1032248:	(bad)  
 1032249:	(bad)  
 103224a:	(bad)  
 103224b:	(bad)  
 103224c:	(bad)  
 103224d:	(bad)  
 103224e:	(bad)  
 103224f:	(bad)  
 1032250:	(bad)  
 1032251:	(bad)  
 1032252:	(bad)  
 1032253:	(bad)  
 1032254:	fadd   QWORD PTR [rcx]
 1032256:	add    BYTE PTR [rax],al
 1032258:	adc    al,0x0
 103225a:	add    BYTE PTR [rax],al
 103225c:	(bad)  
 103225d:	(bad)  
 103225e:	(bad)  
 103225f:	(bad)  
 1032260:	(bad)  
 1032261:	(bad)  
 1032262:	(bad)  
 1032263:	(bad)  
 1032264:	(bad)  
 1032265:	(bad)  
 1032266:	(bad)  
 1032267:	(bad)  
 1032268:	(bad)  
 1032269:	(bad)  
 103226a:	(bad)  
 103226b:	jmp    QWORD PTR [rax+0x0]
 103226e:	add    BYTE PTR [rax],al
 1032270:	adc    BYTE PTR [rcx],al
 1032272:	add    BYTE PTR [rax],al
 1032274:	(bad)  
 1032275:	(bad)  
 1032276:	(bad)  
 1032277:	(bad)  
 1032278:	(bad)  
 1032279:	(bad)  
 103227a:	(bad)  
 103227b:	(bad)  
 103227c:	(bad)  
 103227d:	(bad)  
 103227e:	(bad)  
 103227f:	(bad)  
 1032280:	(bad)  
 1032281:	(bad)  
 1032282:	(bad)  
 1032283:	(bad)  
 1032284:	(bad)  
 1032285:	(bad)  
 1032286:	(bad)  
 1032287:	(bad)  
 1032288:	(bad)  
 1032289:	(bad)  
 103228a:	(bad)  
 103228b:	(bad)  
 103228c:	(bad)  
 103228d:	(bad)  
 103228e:	(bad)  
 103228f:	inc    eax
 1032291:	add    DWORD PTR [rax],eax
 1032293:	add    bh,bh
 1032295:	(bad)  
 1032296:	(bad)  
 1032297:	(bad)  
 1032298:	(bad)  
 1032299:	(bad)  
 103229a:	(bad)  
 103229b:	(bad)  
 103229c:	(bad)  
 103229d:	(bad)  
 103229e:	(bad)  
 103229f:	call   rsp
 10322a1:	add    BYTE PTR [rax],al
 10322a3:	add    bh,bh
 10322a5:	(bad)  
 10322a6:	(bad)  
 10322a7:	(bad)  
 10322a8:	(bad)  
 10322a9:	(bad)  
 10322aa:	(bad)  
 10322ab:	(bad)  
 10322ac:	(bad)  
 10322ad:	(bad)  
 10322ae:	(bad)  
 10322af:	dec    DWORD PTR [rdx+rax*1]
 10322b2:	add    BYTE PTR [rax],al
 10322b4:	push   0xffffffffff000001
 10322b9:	(bad)  
 10322ba:	(bad)  
 10322bb:	(bad)  
 10322bc:	(bad)  
 10322bd:	(bad)  
 10322be:	(bad)  
 10322bf:	(bad)  
 10322c0:	(bad)  
 10322c1:	(bad)  
 10322c2:	(bad)  
 10322c3:	(bad)  
 10322c4:	(bad)  
 10322c5:	(bad)  
 10322c6:	(bad)  
 10322c7:	push   QWORD PTR [rax]
 10322c9:	add    BYTE PTR [rax],al
 10322cb:	add    bh,bh
 10322cd:	(bad)  
 10322ce:	(bad)  
 10322cf:	(bad)  
 10322d0:	(bad)  
 10322d1:	(bad)  
 10322d2:	(bad)  
 10322d3:	(bad)  
 10322d4:	(bad)  
 10322d5:	(bad)  
 10322d6:	(bad)  
 10322d7:	inc    DWORD PTR [rdi]
 10322d9:	add    ah,cl
 10322db:	retf   
 10322dc:	push   rdx
 10322dd:	rex.RB push r8
 10322df:	rex.B
 10322e0:	imul   r12,QWORD PTR [rdx+0x57],0x0
 10322e8:	(bad)  
 10322e9:	(bad)  
 10322ea:	(bad)  
 10322eb:	dec    DWORD PTR [rip+0x53ee6238]        # 0x54f18529
 10322f1:	outs   dx,BYTE PTR ds:[rsi]
 10322f2:	(bad)  
 10322f3:	jo     0x1032368
 10322f5:	push   0x6741746f
 10322fa:	outs   dx,BYTE PTR gs:[rsi]
 10322fc:	je     0x1032355
 10322fe:	push   rdi
 10322ff:	push   rdi
 1032300:	add    BYTE PTR fs:[rax],al
 1032303:	add    bh,bh
 1032305:	(bad)  
 1032306:	(bad)  
 1032307:	dec    DWORD PTR [rdx]
 1032309:	cmp    dh,bh
 103230b:	and    eax,0x70655249
 1032310:	ins    BYTE PTR es:[rdi],dx
 1032311:	rex.B
 1032312:	outs   dx,BYTE PTR gs:[esi]
 1032315:	je     0x103236e
 1032317:	push   rdi
 1032318:	add    BYTE PTR fs:[rax],al
 103231b:	add    bh,bh
 103231d:	(bad)  
 103231e:	(bad)  
 103231f:	dec    DWORD PTR [rdx]
 1032321:	add    bl,dl
 1032323:	rex.WRX
 1032324:	rex.WB outs dx,BYTE PTR ds:[rsi]
 1032326:	imul   esi,DWORD PTR [rcx+rbp*2+0x61],0x657a696c
 103232e:	push   rdi
 103232f:	push   rdi
 1032330:	(bad)  
 1032331:	(bad)  
 1032332:	(bad)  
 1032333:	(bad)  
 1032334:	(bad)  
 1032335:	(bad)  
 1032336:	(bad)  
 1032337:	dec    DWORD PTR [rcx]
 1032339:	add    BYTE PTR [rdi+0x6a],ah
 103233c:	jae    0x10323b8
 103233e:	rex.XB outs dx,DWORD PTR ds:[rsi]
 1032340:	ins    DWORD PTR es:[rdi],dx
 1032341:	ins    DWORD PTR es:[rdi],dx
 1032342:	(bad)  
 1032343:	outs   dx,BYTE PTR ds:[rsi]
 1032344:	fs push rdi
 1032346:	push   rdi
 1032347:	push   rdi
 1032348:	add    BYTE PTR fs:[rax],al
 103234b:	add    bh,bh
 103234d:	(bad)  
 103234e:	(bad)  
 103234f:	inc    DWORD PTR [rip+0x5306be00]        # 0x5409e155
 1032355:	je     0x10323b8
 1032357:	jb     0x10323cd
 1032359:	push   rdi
 103235a:	push   rdi
 103235b:	push   rdi
 103235c:	add    BYTE PTR fs:[rax],al
 103235f:	add    bh,bh
 1032361:	(bad)  
 1032362:	(bad)  
 1032363:	dec    DWORD PTR [rcx]
 1032365:	add    BYTE PTR [rcx+0x4c],bh
 1032368:	push   rsp
 1032369:	gs jb  0x10323d9
 103236c:	imul   ebp,DWORD PTR [rsi+0x61],0x57576574
 1032373:	push   rdi
 1032374:	add    BYTE PTR fs:[rax],al
 1032377:	add    bh,bh
 1032379:	(bad)  
 103237a:	(bad)  
 103237b:	inc    DWORD PTR [rdi]
 103237d:	add    BYTE PTR [rcx+0x417349c6],al
 1032383:	ins    BYTE PTR es:[rdi],dx
 1032384:	imul   esi,DWORD PTR [rsi+0x65],0xc857
 103238b:	add    bh,bh
 103238d:	(bad)  
 103238e:	(bad)  
 103238f:	call   QWORD PTR [rax]
 1032391:	cmp    BYTE PTR [rip+0x65524969],al        # 0x66556d00
 1032397:	jo     0x1032405
 1032399:	rex.B
 103239a:	outs   dx,BYTE PTR gs:[esi]
 103239d:	je     0x10323ed
 103239f:	outs   dx,DWORD PTR ds:[rsi]
 10323a0:	je     0x103240b
 10323a2:	data16 jns 0x10323d1
 10323a5:	add    DWORD PTR [rax],eax
 10323a7:	add    bh,bh
 10323a9:	(bad)  
 10323aa:	(bad)  
 10323ab:	dec    DWORD PTR [rax+rdi*1]
 10323ae:	je     0x10323e6
 10323b0:	rex.B
 10323b1:	rex.RXB
 10323b2:	rex.RB
 10323b3:	rex.WRX push rsp
 10323b5:	pop    rdi
 10323b6:	push   rbx
 10323b7:	push   rsp
 10323b8:	push   r12
 10323ba:	push   rbp
 10323bb:	push   rbx
 10323bc:	sub    al,0x1
 10323be:	add    BYTE PTR [rax],al
 10323c0:	(bad)  
 10323c1:	(bad)  
 10323c2:	(bad)  
 10323c3:	call   QWORD PTR [rip+0x5291e830]        # 0x53950bf9
 10323c9:	rex.RB push r8
 10323cb:	rex.WR
 10323cc:	rex.B
 10323cd:	rex.RXB
 10323ce:	rex.RB
 10323cf:	rex.WRX push rsp
 10323d1:	pop    rdi
 10323d2:	rex.WB
 10323d3:	rex.WRX pop rdi
 10323d5:	push   rax
 10323d6:	push   rdx
 10323d7:	rex.WRXB
 10323d8:	rex.RXB push r10
 10323da:	rex.RB push r11
 10323dc:	push   rbx
 10323dd:	push   rdi
 10323de:	push   rdi
 10323df:	push   rdi
 10323e0:	sub    al,0x1
 10323e2:	add    BYTE PTR [rax],al
 10323e4:	in     al,dx
 10323e5:	add    BYTE PTR [rax],al
 10323e7:	add    BYTE PTR [rcx],dl
 10323e9:	xor    al,ch
 10323eb:	rex.WR push rdx
 10323ed:	rex.RB push r8
 10323ef:	rex.WR
 10323f0:	rex.B
 10323f1:	rex.RXB
 10323f2:	rex.RB
 10323f3:	rex.WRX push rsp
 10323f5:	pop    rdi
 10323f6:	push   rbx
 10323f7:	push   rbp
 10323f8:	rex.XB
 10323f9:	rex.XB
 10323fa:	rex.RB
 10323fb:	rex.RB
 10323fc:	rex.R push rdi
 10323fe:	push   rdi
 10323ff:	push   rdi
 1032400:	sub    al,0x1
 1032402:	add    BYTE PTR [rax],al
 1032404:	(bad)  
 1032405:	(bad)  
 1032406:	(bad)  
 1032407:	dec    DWORD PTR [rdi]
 1032409:	xor    BYTE PTR [rbx+0x5045522f],dh
 103240f:	rex.WR
 1032410:	rex.B
 1032411:	rex.RXB
 1032412:	rex.RB
 1032413:	rex.WRX push rsp
 1032415:	pop    rdi
 1032416:	push   rdx
 1032417:	rex.RB push r12
 1032419:	push   rdx
 103241a:	pop    rcx
 103241b:	push   rdi
 103241c:	sub    al,0x1
 103241e:	add    BYTE PTR [rax],al
 1032420:	(bad)  
 1032421:	(bad)  
 1032422:	(bad)  
 1032423:	dec    DWORD PTR [rsi]
 1032425:	xor    BYTE PTR [rcx+0x5045520f],dh
 103242b:	rex.WR
 103242c:	rex.B
 103242d:	rex.RXB
 103242e:	rex.RB
 103242f:	rex.WRX push rsp
 1032431:	pop    rdi
 1032432:	rex.RX
 1032433:	rex.B
 1032434:	rex.WB
 1032435:	rex.WR push rdi
 1032437:	push   rdi
 1032438:	enter  0x0,0x0
 103243c:	mov    WORD PTR [rax],es
 103243e:	add    BYTE PTR [rax],al
 1032440:	(bad)  
 1032441:	add    BYTE PTR [rcx+0x4f],bh
 1032444:	rex.WRX outs dx,DWORD PTR ds:[rsi]
 1032446:	je     0x10324b1
 1032448:	data16 jns 0x10324a2
 103244b:	push   rdi
 103244c:	(bad)  
 103244d:	(bad)  
 103244e:	(bad)  
 103244f:	(bad)  
 1032450:	(bad)  
 1032451:	(bad)  
 1032452:	(bad)  
 1032453:	inc    DWORD PTR [rsi]
 1032455:	add    BYTE PTR [rdx+0x6174732b],dl
 103245b:	je     0x10324d2
 103245d:	jae    0x10324b6
 103245f:	push   rdi
 1032460:	(bad)  
 1032461:	(bad)  
 1032462:	(bad)  
 1032463:	(bad)  
 1032464:	(bad)  
 1032465:	(bad)  
 1032466:	(bad)  
 1032467:	dec    DWORD PTR [rcx]
 1032469:	add    bl,bl
 103246b:	jg     0x10324e0
 103246d:	jp     0x10324b2
 103246f:	outs   dx,DWORD PTR ds:[rsi]
 1032470:	ins    DWORD PTR es:[rdi],dx
 1032471:	ins    DWORD PTR es:[rdi],dx
 1032472:	outs   dx,BYTE PTR gs:[rsi]
 1032474:	je     0x10324cd
 1032476:	push   rdi
 1032477:	push   rdi
 1032478:	nop
 1032479:	add    DWORD PTR [rax],eax
 103247b:	add    bh,bh
 103247d:	(bad)  
 103247e:	(bad)  
 103247f:	dec    DWORD PTR [rcx]
 1032481:	cmp    BYTE PTR [rdx],dh
 1032483:	(bad)  
 1032484:	push   rdx
 1032485:	gs jo  0x10324f4
 1032488:	rex.B
 1032489:	outs   dx,BYTE PTR gs:[esi]
 103248c:	je     0x10324e5
 103248e:	push   rdi
 103248f:	push   rdi
 1032490:	hlt    
 1032491:	add    DWORD PTR [rax],eax
 1032493:	add    bh,bh
 1032495:	(bad)  
 1032496:	(bad)  
 1032497:	dec    DWORD PTR [rdi]
 1032499:	cmp    al,dh
 103249b:	ins    BYTE PTR es:[rdi],dx
 103249c:	push   rdx
 103249d:	gs ins DWORD PTR es:[rdi],dx
 103249f:	outs   dx,DWORD PTR ds:[rsi]
 10324a0:	je     0x1032507
 10324a2:	imul   r14d,DWORD PTR [rbx+0x74],0x6e656741
 10324aa:	je     0x1032503
 10324ac:	pop    rax
 10324ad:	add    al,BYTE PTR [rax]
 10324af:	add    bh,bh
 10324b1:	(bad)  
 10324b2:	(bad)  
 10324b3:	jmp    QWORD PTR [rcx]
 10324b5:	cmp    cl,ah
 10324b7:	jmp    0x1032502
 10324b9:	push   rdx
 10324ba:	gs jo  0x1032529
 10324bd:	push   rsi
 10324be:	gs jb  0x103252a
 10324c1:	data16 jns 0x1032516
 10324c4:	gs ins DWORD PTR es:[rdi],dx
 10324c6:	outs   dx,DWORD PTR ds:[rsi]
 10324c7:	je     0x103252e
 10324c9:	rex.B
 10324ca:	outs   dx,BYTE PTR gs:[esi]
 10324cd:	je     0x1032512
 10324cf:	outs   dx,DWORD PTR ds:[rsi]
 10324d0:	outs   dx,BYTE PTR ds:[rsi]
 10324d1:	outs   dx,BYTE PTR ds:[rsi]
 10324d2:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 10324d7:	outs   dx,BYTE PTR ds:[rsi]
 10324d8:	jae    0x1032531
 10324da:	push   rdi
 10324db:	push   rdi
 10324dc:	pop    rax
 10324dd:	add    al,BYTE PTR [rax]
 10324df:	add    bh,bh
 10324e1:	(bad)  
 10324e2:	(bad)  
 10324e3:	call   QWORD PTR [rcx]
 10324e5:	add    al,bh
 10324e7:	jp     0x103253f
 10324e9:	gs jb  0x1032555
 10324ec:	data16 jns 0x1032532
 10324ef:	outs   dx,DWORD PTR ds:[rsi]
 10324f0:	outs   dx,BYTE PTR ds:[rsi]
 10324f1:	outs   dx,BYTE PTR ds:[rsi]
 10324f2:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 10324f7:	outs   dx,BYTE PTR ds:[rsi]
 10324f8:	jae    0x1032551
 10324fa:	push   rdi
 10324fb:	push   rdi
 10324fc:	(bad)  
 10324fd:	(bad)  
 10324fe:	(bad)  
 10324ff:	(bad)  
 1032500:	(bad)  
 1032501:	(bad)  
 1032502:	(bad)  
 1032503:	dec    DWORD PTR [rip+0x730a3f00]        # 0x740d6409
 1032509:	jp     0x103254e
 103250b:	outs   dx,DWORD PTR ds:[rsi]
 103250c:	ins    DWORD PTR es:[rdi],dx
 103250d:	ins    DWORD PTR es:[rdi],dx
 103250e:	(bad)  
 103250f:	outs   dx,BYTE PTR ds:[rsi]
 1032510:	imul   r13,QWORD PTR fs:[rsi+0x65],0xffffffffff575757
 1032519:	(bad)  
 103251a:	(bad)  
 103251b:	(bad)  
 103251c:	(bad)  
 103251d:	(bad)  
 103251e:	(bad)  
 103251f:	call   FWORD PTR [rax]
 1032521:	add    BYTE PTR [rdx+0x456c702a],cl
 1032527:	jb     0x103259b
 1032529:	outs   dx,DWORD PTR ds:[rsi]
 103252a:	jb     0x1032579
 103252c:	gs jae 0x10325a2
 103252f:	(bad)  
 1032530:	addr32 gs rex.X jne 0x103259b
 1032535:	data16 gs jb 0x103258c
 1032539:	imul   edi,DWORD PTR [rdx+0x65],0xffffffff
 1032540:	(bad)  
 1032541:	(bad)  
 1032542:	(bad)  
 1032543:	call   QWORD PTR [rcx]
 1032545:	add    BYTE PTR [rcx+0x777070c2],bh
 103254b:	jae    0x10325c7
 103254d:	rex.RB jb 0x10325c2
 1032550:	outs   dx,DWORD PTR ds:[rsi]
 1032551:	jb     0x10325a0
 1032553:	gs jae 0x10325c9
 1032556:	(bad)  
 1032557:	addr32 gs push rdi
 103255a:	push   rdi
 103255b:	push   rdi
 103255c:	mov    esp,0xff000002
 1032561:	(bad)  
 1032562:	(bad)  
 1032563:	dec    DWORD PTR [rax+rdi*1]
 1032566:	mov    ch,0xfd
 1032568:	rex.WR outs dx,DWORD PTR ds:[rsi]
 103256a:	addr32 jb 0x10325d2
 103256d:	(bad)  
 103256e:	fs rex.B
 1032570:	outs   dx,BYTE PTR gs:[esi]
 1032573:	je     0x1032595
 1032575:	add    eax,DWORD PTR [rax]
 1032577:	add    bh,bh
 1032579:	(bad)  
 103257a:	(bad)  
 103257b:	dec    DWORD PTR [rdx]
 103257d:	cmp    BYTE PTR [rsi-0x14],dl
 1032580:	rex.WRB
 1032581:	gs jb  0x10325eb
 1032584:	gs rex.B
 1032586:	outs   dx,BYTE PTR gs:[esi]
 1032589:	je     0x10325e2
 103258b:	push   rdi
 103258c:	test   BYTE PTR [rbx],al
 103258e:	add    BYTE PTR [rax],al
 1032590:	(bad)  
 1032591:	(bad)  
 1032592:	(bad)  
 1032593:	call   QWORD PTR [rax]
 1032595:	cmp    BYTE PTR [rdx+0xd],cl
 1032598:	push   rdx
 1032599:	gs ins DWORD PTR es:[rdi],dx
 103259b:	outs   dx,DWORD PTR ds:[rsi]
 103259c:	je     0x1032603
 103259e:	rex.WRB
 103259f:	gs jb  0x1032609
 10325a2:	gs rex.B
 10325a4:	outs   dx,BYTE PTR gs:[esi]
 10325a7:	je     0x1032591
 10325a9:	add    eax,DWORD PTR [rax]
 10325ab:	add    BYTE PTR [rcx+rax*1+0x0],cl
 10325af:	add    BYTE PTR [rcx],cl
 10325b1:	cmp    BYTE PTR [rcx+0x647251d8],dh
 10325b7:	jb     0x10325fa
 10325b9:	outs   dx,BYTE PTR gs:[esi]
 10325bc:	je     0x1032615
 10325be:	push   rdi
 10325bf:	push   rdi
 10325c0:	sbb    al,BYTE PTR [rax]
 10325c2:	push   rdx
 10325c3:	gs jo  0x1032632
 10325c6:	rex.B
 10325c7:	outs   dx,BYTE PTR gs:[esi]
 10325ca:	je     0x10325ec
 10325cc:	xor    DWORD PTR [rsi],ebp
 10325ce:	xor    BYTE PTR [rax],ah
 10325d0:	push   rsp
 10325d1:	jns    0x1032643
 10325d3:	and    BYTE PTR gs:[rcx+rbp*2+0x62],cl
 10325d8:	jb     0x103263b
 10325da:	jb     0x1032655
 10325dc:	sbb    BYTE PTR [rax],al
 10325de:	push   rdx
 10325df:	gs jo  0x103264e
 10325e2:	rex.B
 10325e3:	outs   dx,BYTE PTR gs:[esi]
 10325e6:	je     0x1032608
 10325e8:	push   rbx
 10325e9:	outs   dx,BYTE PTR ds:[rsi]
 10325ea:	(bad)  
 10325eb:	jo     0x1032660
 10325ed:	push   0x4320746f
 10325f2:	ins    BYTE PTR es:[rdi],dx
 10325f3:	(bad)  
 10325f4:	jae    0x1032669
 10325f6:	push   rdi
 10325f7:	push   rdi
 10325f8:	adc    al,0x0
 10325fa:	rex.WB push r10
 10325fc:	gs jo  0x103266b
 10325ff:	rex.B
 1032600:	outs   dx,BYTE PTR gs:[esi]
 1032603:	je     0x1032625
 1032605:	rex.WB outs dx,BYTE PTR ds:[rsi]
 1032607:	je     0x103266e
 1032609:	jb     0x1032671
 103260b:	(bad)  
 103260c:	movsxd esp,DWORD PTR [rbp+0x57]
 103260f:	push   rdi
 1032610:	adc    DWORD PTR [rax],eax
 1032612:	ins    DWORD PTR es:[rdi],dx
 1032613:	gs je  0x103267e
 1032616:	outs   dx,DWORD PTR ds:[rsi]
 1032617:	and    BYTE PTR fs:[rcx+0x6e],cl
 103261b:	imul   esi,DWORD PTR [rcx+rbp*2+0x61],0x657a696c
 1032623:	push   rdi
 1032624:	or     al,0x0
 1032626:	ins    DWORD PTR es:[rdi],dx
 1032627:	gs je  0x1032692
 103262a:	outs   dx,DWORD PTR ds:[rsi]
 103262b:	and    BYTE PTR fs:[rbx+0x74],dl
 103262f:	(bad)  
 1032630:	jb     0x10326a6
 1032632:	push   rdi
 1032633:	push   rdi
 1032634:	adc    BYTE PTR [rax],al
 1032636:	ins    DWORD PTR es:[rdi],dx
 1032637:	gs je  0x10326a2
 103263a:	outs   dx,DWORD PTR ds:[rsi]
 103263b:	and    BYTE PTR fs:[rbp+riz*2+0x72],dl
 1032640:	ins    DWORD PTR es:[rdi],dx
 1032641:	imul   ebp,DWORD PTR [rsi+0x61],0x57576574
 1032648:	(bad)  
 1032649:	add    BYTE PTR [rbp+0x65],ch
 103264c:	je     0x10326b6
 103264e:	outs   dx,DWORD PTR ds:[rsi]
 103264f:	and    BYTE PTR fs:[rcx+0x73],cl
 1032653:	rex.B ins BYTE PTR es:[rdi],dx
 1032655:	imul   esi,DWORD PTR [rsi+0x65],0x5249001a
 103265c:	gs jo  0x10326cb
 103265f:	rex.B
 1032660:	outs   dx,BYTE PTR gs:[esi]
 1032663:	je     0x10326b3
 1032665:	outs   dx,DWORD PTR ds:[rsi]
 1032666:	je     0x10326d1
 1032668:	data16 jns 0x103268b
 103266b:	rex.WB outs dx,BYTE PTR ds:[rsi]
 103266d:	je     0x10326d4
 103266f:	jb     0x10326d7
 1032671:	(bad)  
 1032672:	movsxd esp,DWORD PTR [rbp+0xd]
 1032675:	add    BYTE PTR [rbp+0x65],ch
 1032678:	je     0x10326e2
 103267a:	outs   dx,DWORD PTR ds:[rsi]
 103267b:	and    BYTE PTR fs:[rsi+0x6f],cl
 103267f:	je     0x10326ea
 1032681:	data16 jns 0x10326db
 1032684:	sbb    al,0x0
 1032686:	push   rdx
 1032687:	gs jo  0x10326f6
 103268a:	rex.B
 103268b:	outs   dx,BYTE PTR gs:[esi]
 103268e:	je     0x10326b0
 1032690:	imul   r14d,DWORD PTR [rbx+0x74],0x75626972
 1032698:	je     0x1032703
 103269a:	outs   dx,DWORD PTR ds:[rsi]
 103269b:	outs   dx,BYTE PTR ds:[rsi]
 103269c:	and    BYTE PTR [rbx+0x6c],al
 103269f:	(bad)  
 10326a0:	jae    0x1032715
 10326a2:	push   rdi
 10326a3:	push   rdi
 10326a4:	and    eax,DWORD PTR [rax]
 10326a6:	push   rdx
 10326a7:	gs jo  0x1032716
 10326aa:	rex.B
 10326ab:	outs   dx,BYTE PTR gs:[esi]
 10326ae:	je     0x10326d0
 10326b0:	push   rdx
 10326b1:	gs ins DWORD PTR es:[rdi],dx
 10326b3:	outs   dx,DWORD PTR ds:[rsi]
 10326b4:	je     0x103271b
 10326b6:	and    BYTE PTR [rcx+rbp*2+0x73],al
 10326ba:	je     0x103272e
 10326bc:	imul   esp,DWORD PTR [rdx+0x75],0x6e6f6974
 10326c3:	and    BYTE PTR [rbx+0x6c],al
 10326c6:	(bad)  
 10326c7:	jae    0x103273c
 10326c9:	push   rdi
 10326ca:	push   rdi
 10326cb:	push   rdi
 10326cc:	sub    eax,DWORD PTR [rax]
 10326ce:	rex.WB push r10
 10326d0:	gs jo  0x103273f
 10326d3:	push   rsi
 10326d4:	gs jb  0x1032740
 10326d7:	data16 jns 0x103272c
 10326da:	gs ins DWORD PTR es:[rdi],dx
 10326dc:	outs   dx,DWORD PTR ds:[rsi]
 10326dd:	je     0x1032744
 10326df:	rex.B
 10326e0:	outs   dx,BYTE PTR gs:[esi]
 10326e3:	je     0x1032728
 10326e5:	outs   dx,DWORD PTR ds:[rsi]
 10326e6:	outs   dx,BYTE PTR ds:[rsi]
 10326e7:	outs   dx,BYTE PTR ds:[rsi]
 10326e8:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 10326ed:	outs   dx,BYTE PTR ds:[rsi]
 10326ee:	jae    0x1032710
 10326f0:	rex.WB outs dx,BYTE PTR ds:[rsi]
 10326f2:	je     0x1032759
 10326f4:	jb     0x103275c
 10326f6:	(bad)  
 10326f7:	movsxd esp,DWORD PTR [rbp+0x57]
 10326fa:	push   rdi
 10326fb:	push   rdi
 10326fc:	sbb    BYTE PTR [rax],al
 10326fe:	ins    DWORD PTR es:[rdi],dx
 10326ff:	gs je  0x103276a
 1032702:	outs   dx,DWORD PTR ds:[rsi]
 1032703:	and    BYTE PTR fs:[rsi+0x65],dl
 1032707:	jb     0x1032772
 1032709:	data16 jns 0x103274f
 103270c:	outs   dx,DWORD PTR ds:[rsi]
 103270d:	outs   dx,BYTE PTR ds:[rsi]
 103270e:	outs   dx,BYTE PTR ds:[rsi]
 103270f:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 1032714:	outs   dx,BYTE PTR ds:[rsi]
 1032715:	jae    0x103276e
 1032717:	push   rdi
 1032718:	sbb    DWORD PTR [rax],eax
 103271a:	push   rdx
 103271b:	gs jo  0x103278a
 103271e:	rex.B
 103271f:	outs   dx,BYTE PTR gs:[esi]
 1032722:	je     0x1032744
 1032724:	rex.WR outs dx,DWORD PTR ds:[rsi]
 1032726:	addr32 jb 0x103278e
 1032729:	(bad)  
 103272a:	fs gs jb 0x103274e
 103272e:	rex.XB ins BYTE PTR es:[rdi],dx
 1032730:	(bad)  
 1032731:	jae    0x10327a6
 1032733:	push   rdi
 1032734:	adc    eax,0x70655200
 1032739:	ins    BYTE PTR es:[rdi],dx
 103273a:	rex.B
 103273b:	outs   dx,BYTE PTR gs:[esi]
 103273e:	je     0x1032760
 1032740:	rex.WRB
 1032741:	gs jb  0x10327ab
 1032744:	and    BYTE PTR gs:[rbx+0x6c],al
 1032748:	(bad)  
 1032749:	jae    0x10327be
 103274b:	push   rdi
 103274c:	sbb    al,0x0
 103274e:	push   rdx
 103274f:	gs jo  0x10327be
 1032752:	rex.B
 1032753:	outs   dx,BYTE PTR gs:[esi]
 1032756:	je     0x1032778
 1032758:	push   rdx
 1032759:	gs ins DWORD PTR es:[rdi],dx
 103275b:	outs   dx,DWORD PTR ds:[rsi]
 103275c:	je     0x10327c3
 103275e:	and    BYTE PTR [rbp+0x65],cl
 1032761:	jb     0x10327ca
 1032763:	and    BYTE PTR gs:[rbx+0x6c],al
 1032767:	(bad)  
 1032768:	jae    0x10327dd
 103276a:	push   rdi
 103276b:	push   rdi
 103276c:	sbb    al,0x0
 103276e:	push   rdx
 103276f:	gs jo  0x10327de
 1032772:	rex.B
 1032773:	outs   dx,BYTE PTR gs:[esi]
 1032776:	je     0x1032798
 1032778:	push   rcx
 1032779:	jne    0x10327e0
 103277b:	jne    0x10327e2
 103277d:	and    BYTE PTR [rdx+0x65],dl
 1032780:	(bad)  
 1032781:	fs gs jb 0x10327a5
 1032785:	rex.XB ins BYTE PTR es:[rdi],dx
 1032787:	(bad)  
 1032788:	jae    0x10327fd
 103278a:	push   rdi
 103278b:	push   rdi
 103278c:	sbb    eax,0x2c000300
 1032791:	add    DWORD PTR [rax],eax
 1032793:	add    BYTE PTR [rdx],bl
 1032795:	add    BYTE PTR [rbx],al
 1032797:	rex add eax,DWORD PTR [rax]
 103279a:	add    eax,DWORD PTR [rax+0x7ffe001a]
 10327a0:	(bad)  
 10327a1:	add    dh,bh
 10327a3:	dec    DWORD PTR [rax+rax*1+0x2c0000]
 10327aa:	add    BYTE PTR [rax],al
 10327ac:	sbb    DWORD PTR [rax],eax
 10327ae:	sbb    DWORD PTR [rax+0x0],eax
 10327b4:	sbb    BYTE PTR [rax],al
 10327b6:	add    BYTE PTR [rcx],r9b
 10327b9:	add    al,0x0
 10327bb:	add    BYTE PTR [rcx],al
 10327bd:	add    BYTE PTR [rax],al
 10327bf:	add    BYTE PTR [rax],al
 10327c1:	add    BYTE PTR [rax],al
 10327c3:	add    BYTE PTR [rax+0x0],dl
 10327c6:	add    BYTE PTR [rax],al
 10327c8:	(bad)  
 10327c9:	add    dh,bh
 10327cb:	jmp    QWORD PTR [rax+0x0]
 10327ce:	add    BYTE PTR [rax],al
 10327d0:	add    DWORD PTR [rax],eax
 10327d2:	add    BYTE PTR [rax],al
 10327d4:	and    BYTE PTR [rax],al
 10327d6:	add    DWORD PTR [rax],eax
 10327d8:	sbb    DWORD PTR [rax],eax
 10327da:	sbb    DWORD PTR [rax+0x0],eax
 10327e0:	and    BYTE PTR [rax],al
 10327e2:	xor    al,0x0
 10327e4:	or     DWORD PTR [rcx+rax*1],eax
	...
 10327ef:	add    BYTE PTR [rax+rax*1+0x0],ah
 10327f3:	add    BYTE PTR [rax],ah
 10327f5:	add    BYTE PTR [rdx],al
 10327f7:	add    BYTE PTR [rcx],bl
 10327f9:	add    BYTE PTR [rcx],bl
 10327fb:	add    BYTE PTR [rax],0x0
 10327fe:	add    BYTE PTR [rax],al
 1032800:	sub    BYTE PTR [rax],al
 1032802:	xor    al,0x0
 1032804:	or     DWORD PTR [rdx+rax*1],eax
	...
 103280f:	add    BYTE PTR [rax+rax*1+0x0],dh
 1032813:	add    BYTE PTR [rax],ah
 1032815:	add    BYTE PTR [rbx],al
 1032817:	add    BYTE PTR [rcx],bl
 1032819:	add    BYTE PTR [rcx],bl
 103281b:	add    BYTE PTR [rax],0x0
 103281e:	add    BYTE PTR [rax],al
 1032820:	xor    BYTE PTR [rax],al
 1032822:	xor    al,0x0
 1032824:	or     DWORD PTR [rbx+rax*1],eax
	...
 103282f:	add    BYTE PTR [rax+0x0],cl
 1032835:	add    BYTE PTR [rcx],al
 1032837:	(bad)  
 1032838:	add    DWORD PTR [rax],eax
 103283a:	add    DWORD PTR [rax+0x2],esp
 103283d:	add    BYTE PTR [rcx],al
 103283f:	(bad)  
 1032840:	add    eax,DWORD PTR [rax]
 1032842:	add    DWORD PTR [rax+0x48],esp
 1032845:	add    BYTE PTR [rax],al
 1032847:	add    BYTE PTR [rax+0x0],bh
 103284a:	add    BYTE PTR [rax],al
 103284c:	mov    WORD PTR [rax],es
 103284e:	add    BYTE PTR [rax],al
 1032850:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1032851:	add    BYTE PTR [rax],al
 1032853:	add    BYTE PTR [rax],al
 1032855:	add    BYTE PTR [rax],al
 1032857:	add    BYTE PTR [rax+rax*1],ch
 103285a:	add    BYTE PTR [rax],al
 103285c:	rex.WR add BYTE PTR [rax],r8b
 103285f:	add    BYTE PTR [rax+rax*1+0x0],ch
 1032863:	add    BYTE PTR [rax],bh
 1032865:	add    BYTE PTR [rax],al
 1032867:	add    BYTE PTR [rax],bh
 1032869:	add    BYTE PTR [rax],al
 103286b:	add    BYTE PTR [rcx],bl
 103286d:	add    BYTE PTR [rcx],bl
 103286f:	add    BYTE PTR [rax],0x0
 1032872:	add    BYTE PTR [rax],al
 1032874:	sbb    BYTE PTR [rax],al
 1032876:	push   rsp
 1032877:	add    BYTE PTR [rcx],cl
 1032879:	add    al,0x0
 103287b:	add    BYTE PTR [rdx],al
 103287d:	add    BYTE PTR [rax],al
 103287f:	add    BYTE PTR [rax],al
 1032881:	add    BYTE PTR [rax],al
 1032883:	add    BYTE PTR [rax+rax*1+0x0],dh
 103288a:	add    BYTE PTR [rax],al
 103288c:	jl     0x103288f
 103288e:	add    BYTE PTR [rax],al
 1032890:	add    DWORD PTR [rax],eax
 1032892:	add    BYTE PTR [rax],al
 1032894:	(bad)  
 1032895:	add    dh,bh
 1032897:	call   QWORD PTR [rax+0x1000001]
 103289d:	add    BYTE PTR [rax],al
 103289f:	add    BYTE PTR [rax],al
 10328a1:	add    BYTE PTR [rcx],al
 10328a3:	(bad)  
 10328a4:	push   0x1
 10328a9:	add    BYTE PTR [rax],al
 10328ab:	add    BYTE PTR [rax+0x0],dl
 10328ae:	add    BYTE PTR [rax],al
 10328b0:	adc    al,0x0
 10328b2:	add    BYTE PTR [rax],al
 10328b4:	(bad)  
 10328b5:	add    BYTE PTR [rbx],al
 10328b7:	add    BYTE PTR [rax],0x0
 10328ba:	add    BYTE PTR [rax],al
 10328bc:	add    al,BYTE PTR [rax]
 10328be:	xor    al,0x0
 10328c0:	add    DWORD PTR [rax],eax
 10328c2:	add    BYTE PTR [rsp+rdx*1+0x16000100],cl
 10328c9:	add    BYTE PTR [rbx],al
 10328cb:	add    BYTE PTR [rax],0x0
 10328ce:	add    BYTE PTR [rax],al
 10328d0:	add    al,BYTE PTR [rax]
 10328d2:	xor    al,0x0
 10328d4:	add    al,BYTE PTR [rax]
 10328d6:	add    BYTE PTR [rsp+rdx*1+0x16000200],cl
 10328dd:	add    BYTE PTR [rbx],al
 10328df:	add    BYTE PTR [rax],0x0
 10328e2:	add    BYTE PTR [rax],al
 10328e4:	add    al,BYTE PTR [rax]
 10328e6:	xor    al,0x0
 10328e8:	add    eax,DWORD PTR [rax]
 10328ea:	add    BYTE PTR [rsp+rdx*1+0x16000300],cl
 10328f1:	add    BYTE PTR [rbx],al
 10328f3:	add    BYTE PTR [rax],0x0
 10328f6:	add    BYTE PTR [rax],al
 10328f8:	add    al,BYTE PTR [rax]
 10328fa:	xor    al,0x0
 10328fc:	add    al,0x0
 10328fe:	add    BYTE PTR [rax+rax*1+0x1400000],cl
 1032905:	add    BYTE PTR [rax],al
 1032907:	add    al,BYTE PTR [rax]
 103290a:	add    BYTE PTR [rax+0x3],al
 103290d:	add    BYTE PTR [rax],al
 103290f:	in     al,dx
 1032911:	add    BYTE PTR [rax],al
 1032913:	add    BYTE PTR [rax],dl
 1032915:	add    DWORD PTR [rax],eax
 1032917:	add    BYTE PTR [rax],dh
 1032919:	add    DWORD PTR [rax],eax
 103291b:	add    BYTE PTR [rcx+rax*1+0x0],cl
 103291f:	add    BYTE PTR [rax],al
 1032921:	add    BYTE PTR [rax],al
 1032923:	add    BYTE PTR [rax+rax*1],dl
 1032926:	add    BYTE PTR [rax],al
 1032928:	sub    BYTE PTR [rax],al
 103292a:	add    BYTE PTR [rax],al
 103292c:	cmp    al,0x0
 103292e:	add    BYTE PTR [rax],al
 1032930:	add    BYTE PTR [rax],r8b
 1032933:	add    BYTE PTR [rax+rax*1+0x0],al
 1032937:	add    BYTE PTR [rcx],bl
 1032939:	add    BYTE PTR [rcx],bl
 103293b:	add    BYTE PTR [rax],0x0
 103293e:	add    BYTE PTR [rax],al
 1032940:	sbb    BYTE PTR [rax],al
 1032942:	je     0x1032944
 1032944:	or     DWORD PTR [rax+rax*1],eax
 1032947:	add    BYTE PTR [rbx],al
 1032949:	add    BYTE PTR [rax],al
 103294b:	add    BYTE PTR [rax],al
 103294d:	add    BYTE PTR [rax],al
 103294f:	add    BYTE PTR [rcx+rax*1],bh
 1032952:	add    BYTE PTR [rax],al
 1032954:	(bad)  
 1032955:	add    dh,bh
 1032957:	jmp    FWORD PTR [rdx+rax*1]
 103295a:	add    BYTE PTR [rax],al
 103295c:	add    DWORD PTR [rax],eax
 103295e:	add    BYTE PTR [rax],al
 1032960:	or     BYTE PTR [rax],al
 1032962:	add    BYTE PTR [rax],al
 1032964:	rex.W add al,BYTE PTR [rax]
 1032967:	add    BYTE PTR [rdx],al
 1032969:	add    BYTE PTR [rax],al
 103296b:	add    BYTE PTR [rax],dl
 103296d:	add    BYTE PTR [rax],al
 103296f:	add    BYTE PTR [rdx+rax*1+0x0],ch
 1032973:	add    BYTE PTR [rdx],al
 1032975:	add    BYTE PTR [rax],al
 1032977:	add    BYTE PTR [rax],al
 1032979:	add    BYTE PTR [rcx],al
 103297b:	(bad)  
 103297c:	or     al,0x2
	...
 103298a:	add    BYTE PTR [rax],al
 103298c:	add    al,0x0
 103298e:	push   rdx
 103298f:	add    BYTE PTR [rbp+0x0],ah
 1032992:	jo     0x1032994
 1032994:	(bad)  
	...
 10329a9:	add    BYTE PTR [rax],al
 10329ab:	add    BYTE PTR [rax+0x3404],bh
 10329b1:	add    BYTE PTR [rsi+0x0],dl
 10329b4:	push   rbx
 10329b5:	add    BYTE PTR [rdi+0x0],bl
 10329b8:	push   rsi
 10329b9:	add    BYTE PTR [rbp+0x0],al
 10329bc:	push   rdx
 10329bd:	add    BYTE PTR [rbx+0x0],dl
 10329c0:	rex.WB add BYTE PTR [r15+0x0],cl
 10329c4:	rex.WRX add BYTE PTR [rdi+0x0],r11b
 10329c8:	rex.WB add BYTE PTR [r14+0x0],cl
 10329cc:	rex.RX add BYTE PTR [rdi+0x0],r9b
 10329d0:	add    BYTE PTR [rax],al
 10329d2:	add    BYTE PTR [rax],al
 10329d4:	mov    ebp,0xfeef04
 10329d9:	add    BYTE PTR [rcx],al
 10329db:	add    BYTE PTR [rsi+0x0],ch
 10329de:	fild   DWORD PTR [rdi]
 10329e0:	cmp    al,0x0
 10329e2:	xor    al,0x8
 10329e4:	add    BYTE PTR [rax],al
 10329e6:	or     eax,DWORD PTR [rax]
 10329e8:	cmp    al,0x0
 10329ea:	xor    al,0x8
 10329ec:	(bad)  
 10329ed:	add    BYTE PTR [rax],al
 10329ef:	add    BYTE PTR [rax],cl
 10329f1:	add    BYTE PTR [rax],al
 10329f3:	add    BYTE PTR [rax],al
 10329f5:	add    BYTE PTR [rax+rax*1],al
 10329f8:	add    DWORD PTR [rax],eax
	...
 1032a06:	add    BYTE PTR [rax],al
 1032a08:	(bad)  
 1032a09:	add    al,0x0
 1032a0b:	add    BYTE PTR [rcx],al
 1032a0d:	add    BYTE PTR [rbx+0x0],dl
 1032a10:	je     0x1032a12
 1032a12:	jb     0x1032a14
 1032a14:	imul   eax,DWORD PTR [rax],0x67006e
 1032a1a:	rex.RX add BYTE PTR [rcx+0x0],r13b
 1032a1e:	ins    BYTE PTR es:[rdi],dx
 1032a1f:	add    BYTE PTR [rbp+0x0],ah
 1032a22:	rex.WB add BYTE PTR [r14+0x0],bpl
 1032a26:	data16 add BYTE PTR [rdi+0x0],ch
 1032a2a:	add    BYTE PTR [rax],al
 1032a2c:	repnz add eax,DWORD PTR [rax]
 1032a2f:	add    BYTE PTR [rcx],al
 1032a31:	add    BYTE PTR [rax],dh
 1032a33:	add    BYTE PTR [rax+rax*1],dh
 1032a36:	xor    BYTE PTR [rax],al
 1032a38:	cmp    DWORD PTR [rax],eax
 1032a3a:	xor    BYTE PTR [rax],al
 1032a3c:	xor    al,0x0
 1032a3e:	rex.X add BYTE PTR [rax],sil
 1032a41:	add    BYTE PTR [rax],al
 1032a43:	add    BYTE PTR [rsi],ah
 1032a45:	add    BYTE PTR [rdi],al
 1032a47:	add    BYTE PTR [rcx],al
 1032a49:	add    BYTE PTR [rax+0x0],dl
 1032a4c:	ins    BYTE PTR es:[rdi],dx
 1032a4d:	add    BYTE PTR [rcx+0x0],ah
 1032a50:	je     0x1032a52
 1032a52:	data16 add BYTE PTR [rdi+0x0],ch
 1032a56:	jb     0x1032a58
 1032a58:	ins    DWORD PTR es:[rdi],dx
 1032a59:	add    BYTE PTR [rax],al
 1032a5b:	add    BYTE PTR [rsi+0x0],cl
 1032a5e:	push   rsp
 1032a5f:	add    BYTE PTR [rax],ah
 1032a61:	add    BYTE PTR [rax+0x0],bh
 1032a64:	add    BYTE PTR ss:[rax+rax*1],dh
 1032a68:	add    BYTE PTR [rax],al
 1032a6a:	add    BYTE PTR [rax],al
 1032a6c:	mov    edx,0x1004900
 1032a71:	add    BYTE PTR [rax+rax*1+0x65],cl
 1032a75:	add    BYTE PTR [rdi+0x0],ah
 1032a78:	(bad)  
 1032a79:	add    BYTE PTR [rax+rax*1+0x54],ch
 1032a7d:	add    BYTE PTR [rdx+0x0],dh
 1032a80:	(bad)  
 1032a81:	add    BYTE PTR [rax+rax*1+0x65],ah
 1032a85:	add    BYTE PTR [rbp+0x0],ch
 1032a88:	(bad)  
 1032a89:	add    BYTE PTR [rdx+0x0],dh
 1032a8c:	imul   eax,DWORD PTR [rax],0x73
 1032a8f:	add    BYTE PTR [rax],al
 1032a91:	add    BYTE PTR [rax],al
 1032a93:	add    BYTE PTR [rbp+0x0],cl
 1032a96:	imul   eax,DWORD PTR [rax],0x720063
 1032a9c:	outs   dx,DWORD PTR ds:[rsi]
 1032a9d:	add    BYTE PTR [rbx+0x0],dh
 1032aa0:	outs   dx,DWORD PTR ds:[rsi]
 1032aa1:	add    BYTE PTR [rsi+0x0],ah
 1032aa4:	je     0x1032aa6
 1032aa6:	and    BYTE PTR [rax],al
 1032aa8:	push   rbx
 1032aa9:	add    BYTE PTR [rcx+0x0],dl
 1032aac:	rex.WR add BYTE PTR [rax],r12b
 1032aaf:	add    BYTE PTR [rbx+0x0],dl
 1032ab2:	add    BYTE PTR gs:[rdx+0x0],dh
 1032ab6:	jbe    0x1032ab8
 1032ab8:	add    BYTE PTR gs:[rdx+0x0],dh
 1032abc:	and    BYTE PTR [rax],al
 1032abe:	imul   eax,DWORD PTR [rax],0x200073
 1032ac4:	(bad)  
 1032ac5:	add    BYTE PTR [rax],ah
 1032ac7:	add    BYTE PTR [rdx+0x0],dh
 1032aca:	add    BYTE PTR gs:[rdi+0x0],ah
 1032ace:	imul   eax,DWORD PTR [rax],0x740073
 1032ad4:	add    BYTE PTR gs:[rdx+0x0],dh
 1032ad8:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1032add:	add    BYTE PTR [rax+rax*1+0x72],dh
 1032ae1:	add    BYTE PTR [rcx+0x0],ah
 1032ae4:	add    BYTE PTR fs:[rbp+0x0],ah
 1032ae8:	ins    DWORD PTR es:[rdi],dx
 1032ae9:	add    BYTE PTR [rcx+0x0],ah
 1032aec:	jb     0x1032aee
 1032aee:	imul   eax,DWORD PTR [rax],0x20
 1032af1:	add    BYTE PTR [rdi+0x0],ch
 1032af4:	data16 add BYTE PTR [rax],ah
 1032af7:	add    BYTE PTR [rbp+0x0],cl
 1032afa:	imul   eax,DWORD PTR [rax],0x720063
 1032b00:	outs   dx,DWORD PTR ds:[rsi]
 1032b01:	add    BYTE PTR [rbx+0x0],dh
 1032b04:	outs   dx,DWORD PTR ds:[rsi]
 1032b05:	add    BYTE PTR [rsi+0x0],ah
 1032b08:	je     0x1032b0a
 1032b0a:	and    BYTE PTR [rax],al
 1032b0c:	rex.XB add BYTE PTR [r15+0x0],bpl
 1032b10:	jb     0x1032b12
 1032b12:	jo     0x1032b14
 1032b14:	outs   dx,DWORD PTR ds:[rsi]
 1032b15:	add    BYTE PTR [rdx+0x0],dh
 1032b18:	(bad)  
 1032b19:	add    BYTE PTR [rax+rax*1+0x69],dh
 1032b1d:	add    BYTE PTR [rdi+0x0],ch
 1032b20:	outs   dx,BYTE PTR ds:[rsi]
 1032b21:	add    BYTE PTR [rsi],ch
 1032b23:	add    BYTE PTR [rax],al
 1032b25:	add    BYTE PTR [rax],al
 1032b27:	add    BYTE PTR [rax],ah
 1032b29:	add    BYTE PTR [rax+rax*1],al
 1032b2c:	add    DWORD PTR [rax],eax
 1032b2e:	rex.XB add BYTE PTR [r15+0x0],bpl
 1032b32:	ins    DWORD PTR es:[rdi],dx
 1032b33:	add    BYTE PTR [rbp+0x0],ch
 1032b36:	add    BYTE PTR gs:[rsi+0x0],ch
 1032b3a:	je     0x1032b3c
 1032b3c:	jae    0x1032b3e
 1032b3e:	add    BYTE PTR [rax],al
 1032b40:	push   rbx
 1032b41:	add    BYTE PTR [rcx+0x0],dl
 1032b44:	rex.WR add BYTE PTR [rax],r8b
 1032b47:	add    BYTE PTR [rsi],ah
 1032b49:	add    BYTE PTR [rip+0x47000100],al        # 0x48032c4f
 1032b4f:	add    BYTE PTR [rdi+0x0],ch
 1032b52:	ins    BYTE PTR es:[rdi],dx
 1032b53:	add    BYTE PTR [rax+rax*1+0x65],ah
 1032b57:	add    BYTE PTR [rsi+0x0],ch
 1032b5a:	rex.X add BYTE PTR [rcx+0x0],bpl
 1032b5e:	je     0x1032b60
 1032b60:	jae    0x1032b62
 1032b62:	add    BYTE PTR [rax],al
 1032b64:	push   rsp
 1032b65:	add    BYTE PTR [rdx+0x0],dh
 1032b68:	jne    0x1032b6a
 1032b6a:	add    BYTE PTR gs:[rax],al
 1032b6d:	add    BYTE PTR [rax],al
 1032b6f:	add    BYTE PTR [rax+rax*1+0x16],cl
 1032b73:	add    BYTE PTR [rcx],al
 1032b75:	add    BYTE PTR [rbx+0x0],al
 1032b78:	outs   dx,DWORD PTR ds:[rsi]
 1032b79:	add    BYTE PTR [rbp+0x0],ch
 1032b7c:	jo     0x1032b7e
 1032b7e:	(bad)  
 1032b7f:	add    BYTE PTR [rsi+0x0],ch
 1032b82:	jns    0x1032b84
 1032b84:	rex.WRX add BYTE PTR [rcx+0x0],r12b
 1032b88:	ins    DWORD PTR es:[rdi],dx
 1032b89:	add    BYTE PTR [rbp+0x0],ah
 1032b8c:	add    BYTE PTR [rax],al
 1032b8e:	add    BYTE PTR [rax],al
 1032b90:	rex.WRB add BYTE PTR [r9+0x0],r13b
 1032b94:	movsxd eax,DWORD PTR [rax]
 1032b96:	jb     0x1032b98
 1032b98:	outs   dx,DWORD PTR ds:[rsi]
 1032b99:	add    BYTE PTR [rbx+0x0],dh
 1032b9c:	outs   dx,DWORD PTR ds:[rsi]
 1032b9d:	add    BYTE PTR [rsi+0x0],ah
 1032ba0:	je     0x1032ba2
 1032ba2:	and    BYTE PTR [rax],al
 1032ba4:	rex.XB add BYTE PTR [r15+0x0],bpl
 1032ba8:	jb     0x1032baa
 1032baa:	jo     0x1032bac
 1032bac:	outs   dx,DWORD PTR ds:[rsi]
 1032bad:	add    BYTE PTR [rdx+0x0],dh
 1032bb0:	(bad)  
 1032bb1:	add    BYTE PTR [rax+rax*1+0x69],dh
 1032bb5:	add    BYTE PTR [rdi+0x0],ch
 1032bb8:	outs   dx,BYTE PTR ds:[rsi]
 1032bb9:	add    BYTE PTR [rax],al
 1032bbb:	add    BYTE PTR [rax+rax*1+0x2a],bh
 1032bbf:	add    BYTE PTR [rcx],al
 1032bc1:	add    BYTE PTR [rsi+0x0],al
 1032bc4:	imul   eax,DWORD PTR [rax],0x65006c
 1032bca:	add    BYTE PTR [rbp+0x0],r12b
 1032bce:	jae    0x1032bd0
 1032bd0:	movsxd eax,DWORD PTR [rax]
 1032bd2:	jb     0x1032bd4
 1032bd4:	imul   eax,DWORD PTR [rax],0x740070
 1032bda:	imul   eax,DWORD PTR [rax],0x6e006f
 1032be0:	add    BYTE PTR [rax],al
 1032be2:	add    BYTE PTR [rax],al
 1032be4:	push   rbx
 1032be5:	add    BYTE PTR [rcx+0x0],dl
 1032be8:	rex.WR add BYTE PTR [rax],r12b
 1032beb:	add    BYTE PTR [rbx+0x0],dl
 1032bee:	add    BYTE PTR gs:[rdx+0x0],dh
 1032bf2:	jbe    0x1032bf4
 1032bf4:	add    BYTE PTR gs:[rdx+0x0],dh
 1032bf8:	and    BYTE PTR [rax],al
 1032bfa:	push   rdx
 1032bfb:	add    BYTE PTR [rbp+0x0],ah
 1032bfe:	jo     0x1032c00
 1032c00:	ins    BYTE PTR es:[rdi],dx
 1032c01:	add    BYTE PTR [rcx+0x0],ch
 1032c04:	movsxd eax,DWORD PTR [rax]
 1032c06:	(bad)  
 1032c07:	add    BYTE PTR [rax+rax*1+0x69],dh
 1032c0b:	add    BYTE PTR [rdi+0x0],ch
 1032c0e:	outs   dx,BYTE PTR ds:[rsi]
 1032c0f:	add    BYTE PTR [rax],ah
 1032c11:	add    BYTE PTR [rax+rax*1+0x69],al
 1032c15:	add    BYTE PTR [rbx+0x0],dh
 1032c18:	je     0x1032c1a
 1032c1a:	jb     0x1032c1c
 1032c1c:	imul   eax,DWORD PTR [rax],0x750062
 1032c22:	je     0x1032c24
 1032c24:	imul   eax,DWORD PTR [rax],0x6e006f
 1032c2a:	and    BYTE PTR [rax],al
 1032c2c:	add    BYTE PTR [r15+0x0],spl
 1032c30:	add    BYTE PTR gs:[rsi+0x0],ch
 1032c34:	je     0x1032c36
 1032c36:	add    BYTE PTR [rax],al
 1032c38:	jl     0x1032c3a
 1032c3a:	add    BYTE PTR cs:[rcx],al
 1032c3d:	add    BYTE PTR [rsi+0x0],al
 1032c40:	imul   eax,DWORD PTR [rax],0x65006c
 1032c46:	push   rsi
 1032c47:	add    BYTE PTR [rbp+0x0],ah
 1032c4a:	jb     0x1032c4c
 1032c4c:	jae    0x1032c4e
 1032c4e:	imul   eax,DWORD PTR [rax],0x6e006f
 1032c54:	add    BYTE PTR [rax],al
 1032c56:	add    BYTE PTR [rax],al
 1032c58:	xor    al,BYTE PTR [rax]
 1032c5a:	xor    BYTE PTR [rax],al
 1032c5c:	xor    DWORD PTR [rax],eax
 1032c5e:	xor    DWORD PTR [rax],eax
 1032c60:	add    BYTE PTR cs:[rax],dh
 1032c63:	add    BYTE PTR [rcx],dh
 1032c65:	add    BYTE PTR [rcx],dh
 1032c67:	add    BYTE PTR [rax],dh
 1032c69:	add    BYTE PTR [rsi],ch
 1032c6b:	add    BYTE PTR [rdx],dh
 1032c6d:	add    BYTE PTR [rcx],dh
 1032c6f:	add    BYTE PTR [rax],dh
 1032c71:	add    BYTE PTR [rax],dh
 1032c73:	add    BYTE PTR [rsi],ch
 1032c75:	add    BYTE PTR [rax],dh
 1032c77:	add    BYTE PTR [rsi],dh
 1032c79:	add    BYTE PTR [rax],dh
 1032c7b:	add    BYTE PTR [rax],ah
 1032c7d:	add    BYTE PTR [rax],ch
 1032c7f:	add    BYTE PTR [rax],ch
 1032c81:	add    BYTE PTR [rbx+0x0],dl
 1032c84:	push   rcx
 1032c85:	add    BYTE PTR [rax+rax*1+0x31],cl
 1032c89:	add    BYTE PTR [rcx],dh
 1032c8b:	add    BYTE PTR [rdi+0x0],bl
 1032c8e:	push   rdx
 1032c8f:	add    BYTE PTR [rax+rax*1+0x4d],dl
 1032c93:	add    BYTE PTR [rcx],ch
 1032c95:	add    BYTE PTR [rsi],ch
 1032c97:	add    BYTE PTR [rcx],dh
 1032c99:	add    BYTE PTR [rdx],dh
 1032c9b:	add    BYTE PTR [rax],dh
 1032c9d:	add    BYTE PTR [rdx],dh
 1032c9f:	add    BYTE PTR [rcx],dh
 1032ca1:	add    BYTE PTR [rax],dh
 1032ca3:	add    BYTE PTR [rip+0x39003100],ch        # 0x3a035da9
 1032ca9:	add    BYTE PTR [rcx],dh
 1032cab:	add    BYTE PTR [rdi],dh
 1032cad:	add    BYTE PTR [rax],ah
 1032caf:	add    BYTE PTR [rcx],ch
 1032cb1:	add    BYTE PTR [rax],al
 1032cb3:	add    BYTE PTR [rax],dh
 1032cb5:	add    BYTE PTR [rax],cl
 1032cb7:	add    BYTE PTR [rcx],al
 1032cb9:	add    BYTE PTR [rcx+0x0],cl
 1032cbc:	outs   dx,BYTE PTR ds:[rsi]
 1032cbd:	add    BYTE PTR [rax+rax*1+0x65],dh
 1032cc1:	add    BYTE PTR [rdx+0x0],dh
 1032cc4:	outs   dx,BYTE PTR ds:[rsi]
 1032cc5:	add    BYTE PTR [rcx+0x0],ah
 1032cc8:	ins    BYTE PTR es:[rdi],dx
 1032cc9:	add    BYTE PTR [rsi+0x0],cl
 1032ccc:	(bad)  
 1032ccd:	add    BYTE PTR [rbp+0x0],ch
 1032cd0:	add    BYTE PTR gs:[rax],al
 1032cd3:	add    BYTE PTR [rax+rax*1+0x49],al
 1032cd7:	add    BYTE PTR [rbx+0x0],dl
 1032cda:	push   rsp
 1032cdb:	add    BYTE PTR [rdx+0x0],dl
 1032cde:	rex.WB add BYTE PTR [r10+0x0],al
 1032ce2:	add    BYTE PTR [rax],al
 1032ce4:	outs   dx,BYTE PTR ds:[rsi]
 1032ce5:	add    BYTE PTR [rip+0x4c000100],ah        # 0x4d032deb
 1032ceb:	add    BYTE PTR [rbp+0x0],ah
 1032cee:	add    BYTE PTR [ecx+0x0],ah
 1032cf2:	ins    BYTE PTR es:[rdi],dx
 1032cf3:	add    BYTE PTR [rbx+0x0],al
 1032cf6:	outs   dx,DWORD PTR ds:[rsi]
 1032cf7:	add    BYTE PTR [rax+0x0],dh
 1032cfa:	jns    0x1032cfc
 1032cfc:	jb     0x1032cfe
 1032cfe:	imul   eax,DWORD PTR [rax],0x680067
 1032d04:	je     0x1032d06
 1032d06:	add    BYTE PTR [rax],al
 1032d08:	rex.WRB add BYTE PTR [r9+0x0],r13b
 1032d0c:	movsxd eax,DWORD PTR [rax]
 1032d0e:	jb     0x1032d10
 1032d10:	outs   dx,DWORD PTR ds:[rsi]
 1032d11:	add    BYTE PTR [rbx+0x0],dh
 1032d14:	outs   dx,DWORD PTR ds:[rsi]
 1032d15:	add    BYTE PTR [rsi+0x0],ah
 1032d18:	je     0x1032d1a
 1032d1a:	and    BYTE PTR [rax],al
 1032d1c:	rex.XB add BYTE PTR [r15+0x0],bpl
 1032d20:	jb     0x1032d22
 1032d22:	jo     0x1032d24
 1032d24:	add    BYTE PTR cs:[rax],ah
 1032d27:	add    BYTE PTR [rcx+0x0],al
 1032d2a:	ins    BYTE PTR es:[rdi],dx
 1032d2b:	add    BYTE PTR [rax+rax*1+0x20],ch
 1032d2f:	add    BYTE PTR [rdx+0x0],dh
 1032d32:	imul   eax,DWORD PTR [rax],0x680067
 1032d38:	je     0x1032d3a
 1032d3a:	jae    0x1032d3c
 1032d3c:	and    BYTE PTR [rax],al
 1032d3e:	jb     0x1032d40
 1032d40:	add    BYTE PTR gs:[rbx+0x0],dh
 1032d44:	add    BYTE PTR gs:[rdx+0x0],dh
 1032d48:	jbe    0x1032d4a
 1032d4a:	add    BYTE PTR gs:[rax+rax*1+0x2e],ah
 1032d4f:	add    BYTE PTR [rax],al
 1032d51:	add    BYTE PTR [rax],al
 1032d53:	add    BYTE PTR [rax+0x0],al
 1032d56:	or     al,0x0
 1032d58:	add    DWORD PTR [rax],eax
 1032d5a:	rex.WRXB add BYTE PTR [r10+0x0],r14b
 1032d5e:	imul   eax,DWORD PTR [rax],0x690067
 1032d64:	outs   dx,BYTE PTR ds:[rsi]
 1032d65:	add    BYTE PTR [rcx+0x0],ah
 1032d68:	ins    BYTE PTR es:[rdi],dx
 1032d69:	add    BYTE PTR [rsi+0x0],al
 1032d6c:	imul   eax,DWORD PTR [rax],0x65006c
 1032d72:	outs   dx,BYTE PTR ds:[rsi]
 1032d73:	add    BYTE PTR [rcx+0x0],ah
 1032d76:	ins    DWORD PTR es:[rdi],dx
 1032d77:	add    BYTE PTR [rbp+0x0],ah
 1032d7a:	add    BYTE PTR [rax],al
 1032d7c:	add    BYTE PTR [rcx+0x0],r9b
 1032d80:	push   rbx
 1032d81:	add    BYTE PTR [rax+rax*1+0x52],dl
 1032d85:	add    BYTE PTR [rcx+0x0],cl
 1032d88:	rex.X add BYTE PTR [rsi],bpl
 1032d8b:	add    BYTE PTR [rbp+0x0],al
 1032d8e:	pop    rax
 1032d8f:	add    BYTE PTR [rbp+0x0],al
 1032d92:	add    BYTE PTR [rax],al
 1032d94:	rex.WX add BYTE PTR [rip+0x50000100],dl        # 0x51032e9b
 1032d9b:	add    BYTE PTR [rdx+0x0],dh
 1032d9e:	outs   dx,DWORD PTR ds:[rsi]
 1032d9f:	add    BYTE PTR [rax+rax*1+0x75],ah
 1032da3:	add    BYTE PTR [rbx+0x0],ah
 1032da6:	je     0x1032da8
 1032da8:	rex.WRX add BYTE PTR [rcx+0x0],r12b
 1032dac:	ins    DWORD PTR es:[rdi],dx
 1032dad:	add    BYTE PTR [rbp+0x0],ah
 1032db0:	add    BYTE PTR [rax],al
 1032db2:	add    BYTE PTR [rax],al
 1032db4:	rex.WRB add BYTE PTR [r9+0x0],r13b
 1032db8:	movsxd eax,DWORD PTR [rax]
 1032dba:	jb     0x1032dbc
 1032dbc:	outs   dx,DWORD PTR ds:[rsi]
 1032dbd:	add    BYTE PTR [rbx+0x0],dh
 1032dc0:	outs   dx,DWORD PTR ds:[rsi]
 1032dc1:	add    BYTE PTR [rsi+0x0],ah
 1032dc4:	je     0x1032dc6
 1032dc6:	and    BYTE PTR [rax],al
 1032dc8:	push   rbx
 1032dc9:	add    BYTE PTR [rcx+0x0],dl
 1032dcc:	rex.WR add BYTE PTR [rax],r12b
 1032dcf:	add    BYTE PTR [rbx+0x0],dl
 1032dd2:	add    BYTE PTR gs:[rdx+0x0],dh
 1032dd6:	jbe    0x1032dd8
 1032dd8:	add    BYTE PTR gs:[rdx+0x0],dh
 1032ddc:	add    BYTE PTR [rax],al
 1032dde:	add    BYTE PTR [rax],al
 1032de0:	add    BYTE PTR ds:[rip+0x50000100],cl        # 0x51032ee7
 1032de7:	add    BYTE PTR [rdx+0x0],dh
 1032dea:	outs   dx,DWORD PTR ds:[rsi]
 1032deb:	add    BYTE PTR [rax+rax*1+0x75],ah
 1032def:	add    BYTE PTR [rbx+0x0],ah
 1032df2:	je     0x1032df4
 1032df4:	push   rsi
 1032df5:	add    BYTE PTR [rbp+0x0],ah
 1032df8:	jb     0x1032dfa
 1032dfa:	jae    0x1032dfc
 1032dfc:	imul   eax,DWORD PTR [rax],0x6e006f
 1032e02:	add    BYTE PTR [rax],al
 1032e04:	xor    DWORD PTR [rax],eax
 1032e06:	xor    DWORD PTR [rax],eax
 1032e08:	add    BYTE PTR cs:[rax],dh
 1032e0b:	add    BYTE PTR [rsi],ch
 1032e0d:	add    BYTE PTR [rdx],dh
 1032e0f:	add    BYTE PTR [rcx],dh
 1032e11:	add    BYTE PTR [rax],dh
 1032e13:	add    BYTE PTR [rax],dh
 1032e15:	add    BYTE PTR [rsi],ch
 1032e17:	add    BYTE PTR [rsi],dh
 1032e19:	add    BYTE PTR [rax],dh
 1032e1b:	add    BYTE PTR [rax],al
 1032e1d:	add    BYTE PTR [rax],al
 1032e1f:	add    BYTE PTR [rax+rax*1+0x0],al
 1032e23:	add    BYTE PTR [rcx],al
 1032e25:	add    BYTE PTR [rsi+0x0],dl
 1032e28:	(bad)  
 1032e29:	add    BYTE PTR [rdx+0x0],dh
 1032e2c:	rex.RX add BYTE PTR [rcx+0x0],r13b
 1032e30:	ins    BYTE PTR es:[rdi],dx
 1032e31:	add    BYTE PTR [rbp+0x0],ah
 1032e34:	rex.WB add BYTE PTR [r14+0x0],bpl
 1032e38:	data16 add BYTE PTR [rdi+0x0],ch
 1032e3c:	add    BYTE PTR [rax],al
 1032e3e:	add    BYTE PTR [rax],al
 1032e40:	and    al,0x0
 1032e42:	add    al,0x0
 1032e44:	add    BYTE PTR [rax],al
 1032e46:	push   rsp
 1032e47:	add    BYTE PTR [rdx+0x0],dh
 1032e4a:	(bad)  
 1032e4b:	add    BYTE PTR [rsi+0x0],ch
 1032e4e:	jae    0x1032e50
 1032e50:	ins    BYTE PTR es:[rdi],dx
 1032e51:	add    BYTE PTR [rcx+0x0],ah
 1032e54:	je     0x1032e56
 1032e56:	imul   eax,DWORD PTR [rax],0x6e006f
 1032e5c:	add    BYTE PTR [rax],al
 1032e5e:	add    BYTE PTR [rax],al
 1032e60:	or     DWORD PTR [rax+rsi*4],eax
 1032e63:	add    al,0x3c
 1032e65:	(bad)  
 1032e66:	jae    0x1032edb
 1032e68:	gs ins DWORD PTR es:[rdi],dx
 1032e6a:	(bad)  
 1032e6b:	ins    BYTE PTR es:[rdi],dx
 1032e6c:	jns    0x1032e8e
 1032e6e:	js     0x1032edd
 1032e70:	ins    BYTE PTR es:[rdi],dx
 1032e71:	outs   dx,BYTE PTR ds:[rsi]
 1032e72:	jae    0x1032eb1
 1032e74:	and    dh,BYTE PTR [rbp+0x72]
 1032e77:	outs   dx,BYTE PTR ds:[rsi]
 1032e78:	cmp    dh,BYTE PTR [rbx+0x63]
 1032e7b:	push   0x73616d65
 1032e80:	sub    eax,0x7263696d
 1032e85:	outs   dx,DWORD PTR ds:[rsi]
 1032e86:	jae    0x1032ef7
 1032e88:	data16 je 0x1032eb8
 1032e8b:	movsxd ebp,DWORD PTR [rdi+0x6d]
 1032e8e:	cmp    ah,BYTE PTR [rcx+0x73]
 1032e91:	ins    DWORD PTR es:[rdi],dx
 1032e92:	cs jbe 0x1032ec6
 1032e95:	and    ah,BYTE PTR [rax]
 1032e97:	ins    DWORD PTR es:[rdi],dx
 1032e98:	(bad)  
 1032e99:	outs   dx,BYTE PTR ds:[rsi]
 1032e9a:	imul   esp,DWORD PTR [rsi+0x65],0x65567473
 1032ea1:	jb     0x1032f16
 1032ea3:	imul   ebp,DWORD PTR [rdi+0x6e],0x2e31223d
 1032eaa:	xor    BYTE PTR [rdx],ah
 1032eac:	ds or  eax,0x3c20200a
 1032eb2:	je     0x1032f26
 1032eb4:	jne    0x1032f29
 1032eb6:	je     0x1032f01
 1032eb8:	outs   dx,BYTE PTR ds:[rsi]
 1032eb9:	outs   dx,WORD PTR ds:[rsi]
 1032ebb:	and    BYTE PTR [rax+0x6d],bh
 1032ebe:	ins    BYTE PTR es:[rdi],dx
 1032ebf:	outs   dx,BYTE PTR ds:[rsi]
 1032ec0:	jae    0x1032eff
 1032ec2:	and    dh,BYTE PTR [rbp+0x72]
 1032ec5:	outs   dx,BYTE PTR ds:[rsi]
 1032ec6:	cmp    dh,BYTE PTR [rbx+0x63]
 1032ec9:	push   0x73616d65
 1032ece:	sub    eax,0x7263696d
 1032ed3:	outs   dx,DWORD PTR ds:[rsi]
 1032ed4:	jae    0x1032f45
 1032ed6:	data16 je 0x1032f06
 1032ed9:	movsxd ebp,DWORD PTR [rdi+0x6d]
 1032edc:	cmp    ah,BYTE PTR [rcx+0x73]
 1032edf:	ins    DWORD PTR es:[rdi],dx
 1032ee0:	cs jbe 0x1032f16
 1032ee3:	and    bh,BYTE PTR [rsi]
 1032ee5:	or     eax,0x2020200a
 1032eea:	and    BYTE PTR [rbx+rsi*2],bh
 1032eed:	movsxd esi,DWORD PTR gs:[rbp+0x72]
 1032ef1:	imul   esi,DWORD PTR [rcx+rdi*2+0x3e],0x20200a0d
 1032ef9:	and    BYTE PTR [rax],ah
 1032efb:	and    BYTE PTR [rax],ah
 1032efd:	cmp    al,0x72
 1032eff:	gs jno 0x1032f77
 1032f02:	gs jae 0x1032f79
 1032f05:	gs fs push rax
 1032f08:	jb     0x1032f73
 1032f0a:	jbe    0x1032f75
 1032f0c:	ins    BYTE PTR es:[rdi],dx
 1032f0d:	gs addr32 gs jae 0x1032f50
 1032f12:	or     eax,0x2020200a
 1032f17:	and    BYTE PTR [rax],ah
 1032f19:	and    BYTE PTR [rax],ah
 1032f1b:	and    BYTE PTR [rdx+rsi*2],bh
 1032f1e:	gs jno 0x1032f96
 1032f21:	gs jae 0x1032f98
 1032f24:	gs fs rex.RB js 0x1032f8e
 1032f29:	movsxd esi,DWORD PTR [rbp+0x74]
 1032f2c:	imul   ebp,DWORD PTR [rdi+0x6e],0x6576654c
 1032f33:	ins    BYTE PTR es:[rdi],dx
 1032f34:	and    BYTE PTR [rbp+riz*2+0x76],ch
 1032f38:	gs ins BYTE PTR es:[rdi],dx
 1032f3a:	cmp    eax,0x49736122
 1032f3f:	outs   dx,BYTE PTR ds:[rsi]
 1032f40:	jbe    0x1032fb1
 1032f42:	imul   esp,DWORD PTR [rbp+0x72],0x22
 1032f46:	and    BYTE PTR [rbp+0x69],dh
 1032f49:	movsxd esp,DWORD PTR [r11+0x65]
 1032f4d:	jae    0x1032fc2
 1032f4f:	cmp    eax,0x6c616622
 1032f54:	jae    0x1032fbb
 1032f56:	and    bh,BYTE PTR [rsi]
 1032f58:	cmp    al,0x2f
 1032f5a:	jb     0x1032fc1
 1032f5c:	jno    0x1032fd3
 1032f5e:	gs jae 0x1032fd5
 1032f61:	gs fs rex.RB js 0x1032fcb
 1032f66:	movsxd esi,DWORD PTR [rbp+0x74]
 1032f69:	imul   ebp,DWORD PTR [rdi+0x6e],0x6576654c
 1032f70:	ins    BYTE PTR es:[rdi],dx
 1032f71:	ds or  eax,0x2020200a
 1032f77:	and    BYTE PTR [rax],ah
 1032f79:	and    BYTE PTR [rdi+rbp*1],bh
 1032f7c:	jb     0x1032fe3
 1032f7e:	jno    0x1032ff5
 1032f80:	gs jae 0x1032ff7
 1032f83:	gs fs push rax
 1032f86:	jb     0x1032ff1
 1032f88:	jbe    0x1032ff3
 1032f8a:	ins    BYTE PTR es:[rdi],dx
 1032f8b:	gs addr32 gs jae 0x1032fce
 1032f90:	or     eax,0x2020200a
 1032f95:	and    BYTE PTR [rdi+rbp*1],bh
 1032f98:	jae    0x1032fff
 1032f9a:	movsxd esi,DWORD PTR [rbp+0x72]
 1032f9d:	imul   esi,DWORD PTR [rcx+rdi*2+0x3e],0x20200a0d
 1032fa5:	cmp    al,0x2f
 1032fa7:	je     0x103301b
 1032fa9:	jne    0x103301e
 1032fab:	je     0x1032ff6
 1032fad:	outs   dx,BYTE PTR ds:[rsi]
 1032fae:	outs   dx,WORD PTR ds:[rsi]
 1032fb0:	ds or  eax,0x612f3c0a
 1032fb6:	jae    0x103302b
 1032fb8:	gs ins DWORD PTR es:[rdi],dx
 1032fba:	(bad)  
 1032fbb:	ins    BYTE PTR es:[rdi],dx
 1032fbc:	jns    0x1032ffc
 1032fbe:	push   rax
 1032fbf:	rex.B

Disassembly of section .reloc:

0000000001033000 <.reloc>:
 1033000:	add    BYTE PTR [rax],dl
 1033002:	add    BYTE PTR [rax],al
 1033004:	lock add BYTE PTR [rax],al
 1033007:	add    BYTE PTR [rax],ah
 1033009:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 103300a:	sub    BYTE PTR [rsi-0x59c759d0],ah
 1033010:	rex cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1033012:	rex.W cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1033014:	push   rax
 1033015:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1033016:	pop    rax
 1033017:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1033018:	(bad)  
 1033019:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 103301a:	push   0x78a670a6
 103301f:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1033020:	and    BYTE PTR [rsi-0x595f5968],0x38
 1033027:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1033028:	rex cmps DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 103302a:	cmps   QWORD PTR ds:[rsi],QWORD PTR es:[rdi]
 103302c:	push   rax
 103302d:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 103302e:	pop    rax
 103302f:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1033030:	(bad)  
 1033031:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1033032:	push   0xffffffffe8a7d0a7
 1033037:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1033038:	mov    al,0xa8
 103303a:	mov    eax,0xc8a8c0a8
 103303f:	test   al,0xd0
 1033041:	test   al,0xd8
 1033043:	test   al,0xe0
 1033045:	test   al,0xe8
 1033047:	test   al,0x0
 1033049:	test   eax,0xa910a908
 103304e:	sbb    BYTE PTR [rcx-0x56d756e0],ch
 1033054:	xor    BYTE PTR [rcx-0x56bf56c8],ch
 103305a:	test   rax,0xffffffffa958a950
 1033060:	(bad)  
 1033061:	test   eax,0xa970a968
 1033066:	js     0x1033011
 1033068:	sub    BYTE PTR [rcx-0x566f5678],0xa0
 103306f:	test   eax,0xa9b0a9a8
 1033074:	mov    eax,0xc8a9c0a9
 1033079:	test   eax,0xa9d8a9d0
 103307e:	loopne 0x1033029
 1033080:	call   0xfffffffff9ad212e
 1033085:	test   eax,0xaa08aa00
 103308a:	(bad)  
 103308b:	stos   BYTE PTR es:[rdi],al
 103308c:	push   0x78aa70aa
 1033091:	stos   BYTE PTR es:[rdi],al
 1033092:	sub    BYTE PTR [rdx-0x556f5578],0x98
 1033099:	stos   BYTE PTR es:[rdi],al
 103309a:	movabs al,ds:0xa8aba0ab98ab90aa
 10330a3:	stos   DWORD PTR es:[rdi],eax
 10330a4:	mov    al,0xab
 10330a6:	mov    eax,0xc8abc0ab
 10330ab:	stos   DWORD PTR es:[rdi],eax
 10330ac:	shr    BYTE PTR [rbx-0x540f5428],1
 10330b2:	clc    
 10330b3:	stos   DWORD PTR es:[rdi],eax
 10330b4:	add    BYTE PTR [rax+rcx*1+0x18ac10ac],ch
 10330bb:	lods   al,BYTE PTR ds:[rsi]
 10330bc:	and    BYTE PTR [rax+rbp*1+0x38ac30ac],ch
 10330c3:	lods   al,BYTE PTR ds:[rsi]
 10330c4:	lods   al,BYTE PTR ds:[rsi]
 10330c6:	rex.W lods al,BYTE PTR ds:[rsi]
 10330c8:	push   rax
 10330c9:	lods   al,BYTE PTR ds:[rsi]
 10330ca:	pop    rax
 10330cb:	lods   al,BYTE PTR ds:[rsi]
 10330cc:	(bad)  
 10330cd:	lods   al,BYTE PTR ds:[rsi]
 10330ce:	push   0x78ac70ac
 10330d3:	lods   al,BYTE PTR ds:[rsi]
 10330d4:	cmp    BYTE PTR [rsi-0x51575160],ch
 10330da:	mov    al,0xae
 10330dc:	mov    eax,0xc8aec0ae
 10330e1:	scas   al,BYTE PTR es:[rdi]
 10330e2:	shr    BYTE PTR [rsi-0x501f5128],1
 10330e8:	call   0xfffffffff9b3219c
 10330ed:	scas   eax,DWORD PTR es:[rdi]
 10330ee:	add    BYTE PTR [rax],al
 10330f0:	add    BYTE PTR [rax],ah
 10330f2:	add    BYTE PTR [rax],al
 10330f4:	and    BYTE PTR [rax],al
 10330f6:	add    BYTE PTR [rax],al
 10330f8:	add    BYTE PTR [rax-0x5fef5ff8],ah
 10330fe:	sbb    BYTE PTR [rax-0x5fd75fe0],ah
 1033104:	push   0x78a170a1
 1033109:	movabs eax,ds:0x30000000aa20a598
 1033112:	add    BYTE PTR [rax],al
 1033114:	and    al,0x0
 1033116:	add    BYTE PTR [rax],al
 1033118:	and    BYTE PTR [rbx-0x5c6f5c78],0x98
 103311f:	movabs ds:0xa3b8a3b0a3a8a3a0,eax
 1033128:	shl    BYTE PTR [rbx-0x5a7f5c38],0x88
 103312f:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1033130:	nop
 1033131:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1033132:	add    BYTE PTR [rax],al
 1033134:	add    BYTE PTR [rax+0x0],al
 1033137:	add    BYTE PTR [rax+rax*1],dl
 103313a:	add    BYTE PTR [rax],al
 103313c:	fsubr  DWORD PTR [rdi-0x50175020]
 1033142:	lock scas eax,DWORD PTR es:[rdi]
 1033144:	clc    
 1033145:	scas   eax,DWORD PTR es:[rdi]
 1033146:	add    BYTE PTR [rax],al
 1033148:	add    BYTE PTR [rax+0x0],dl
 103314b:	add    BYTE PTR [rax+rax*1+0x0],al
 103314f:	add    BYTE PTR [rax],al
 1033151:	movabs al,ds:0xa020a018a010a008
 103315a:	sub    BYTE PTR [rax-0x5fc75fd0],ah
 1033160:	movabs al,ds:0xa4a0a498a490a488
 103316a:	test   al,0xa4
 103316c:	mov    al,0xa4
 103316e:	mov    eax,0xe0a8d0a4
 1033173:	test   al,0xe8
 1033175:	test   al,0xf0
 1033177:	test   al,0xf8
 1033179:	test   al,0x0
 103317b:	test   eax,0xa910a908
 1033180:	sbb    BYTE PTR [rcx-0x56d756e0],ch
 1033186:	mov    al,0xaa
 1033188:	mov    eax,0xaa
 103318d:	(bad)  
 103318e:	add    BYTE PTR [rax],al
 1033190:	add    BYTE PTR [rax],al
 1033193:	add    BYTE PTR [rax],dh
 1033195:	movabs al,ds:0xa888a880a388a380
 103319e:	nop
 103319f:	test   al,0x98
 10331a1:	test   al,0xa0
 10331a3:	test   al,0xa8
 10331a5:	test   al,0xb0
 10331a7:	test   al,0xb8
 10331a9:	test   al,0xc0
 10331ab:	test   al,0xc8
 10331ad:	test   al,0xd0
 10331af:	test   al,0x18
 10331b1:	test   eax,0xa938a928
 10331b6:	test   rax,0xffffffffa968a958
 10331bc:	js     0x1033167
 10331be:	mov    BYTE PTR [rcx-0x56575668],ch
 10331c4:	mov    eax,0xd8a9c8a9
 10331c9:	test   eax,0x7000a9e8
 10331ce:	add    BYTE PTR [rax],al
 10331d0:	rex.W add BYTE PTR [rax],al
 10331d3:	add    BYTE PTR [rax-0x6f5f7760],al
 10331d9:	movabs al,ds:0xa0b0a0a8a0a0a098
 10331e2:	mov    eax,0xc8a0c0a0
 10331e7:	movabs al,ds:0xa0e8a0e0a0d8a0d0
 10331f0:	lock movabs al,ds:0xa110a108a100a0f8
 10331fa:	sbb    BYTE PTR [rcx-0x5ed75ee0],ah
 1033200:	xor    BYTE PTR [rcx-0x5ebf5ec8],ah
 1033206:	movabs rax,ds:0xa168a160a158a150
 1033210:	jo     0x10331b3
 1033212:	add    BYTE PTR [rax],al
 1033214:	add    BYTE PTR [rax+0x2],al
 1033217:	add    BYTE PTR [rcx+rax*1-0x5f000000],dh
 103321e:	or     BYTE PTR [rcx-0x5ee75ef0],ah
 1033224:	xor    BYTE PTR [rcx-0x5ebf5ec8],ah
 103322a:	movabs rax,ds:0xa178a160a158a150
 1033234:	and    BYTE PTR [rcx-0x5e1f5e78],0xe8
 103323b:	movabs eax,ds:0xa218a210a1f8a1f0
 1033244:	and    BYTE PTR [rdx-0x5d875d90],ah
 103324a:	test   al,0xa2
 103324c:	mov    al,0xa2
 103324e:	mov    eax,0xe8a2e0a2
 1033253:	movabs ds:0xa308a300a2f8a2f0,al
 103325c:	adc    BYTE PTR [rbx-0x5cdf5ce8],ah
 1033262:	cmp    BYTE PTR [rbx-0x5c6f5c78],ah
 1033268:	sub    BYTE PTR [rax+rsi*1+0x50a438a4],ah
 103326f:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1033270:	(bad)  
 1033271:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1033272:	js     0x1033218
 1033274:	mov    BYTE PTR [rax+rsi*4-0x2f5b475c],ah
 103327b:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 103327c:	fsub   DWORD PTR [rax+rdi*8+0x20a500a4]
 1033283:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1033284:	(bad)  
 1033285:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1033286:	push   0xffffffff80a578a5
 103328b:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 103328c:	mov    BYTE PTR [rbp-0x5a675a70],ah
 1033292:	movabs al,ds:0xc0a5b8a5b0a5a8a5
 103329b:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 103329c:	enter  0xd0a5,0xa5
 10332a0:	call   0xfffffffff9a9234a
 10332a5:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 10332a6:	add    BYTE PTR [rsi-0x59ef59f8],ah
 10332ac:	sbb    BYTE PTR [rsi-0x59d759e0],ah
 10332b2:	and    BYTE PTR [rsi-0x596f5978],0x98
 10332b9:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 10332ba:	movabs al,ds:0xc0a6b8a6b0a6a8a6
 10332c3:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 10332c4:	enter  0xa6,0xa7
 10332c8:	or     BYTE PTR [rdi-0x58e758f0],ah
 10332ce:	and    BYTE PTR [rdi-0x58cf58d8],ah
 10332d4:	cmp    BYTE PTR [rdi-0x586f5878],ah
 10332da:	add    BYTE PTR [rax-0x57ef57f8],ch
 10332e0:	sbb    BYTE PTR [rax-0x57d757e0],ch
 10332e6:	xor    BYTE PTR [rax-0x57bf57c8],ch
 10332ec:	js     0x1033296
 10332ee:	sub    BYTE PTR [rax-0x575f5778],0xb0
 10332f5:	test   al,0xc8
 10332f7:	test   al,0xd8
 10332f9:	test   al,0xf8
 10332fb:	test   al,0x8
 10332fd:	test   eax,0xa928a920
 1033302:	rex test eax,0xa958a948
 1033308:	push   0x78a970a9
 103330d:	test   eax,0xa9a0a990
 1033312:	mov    eax,0xe8a9c8a9
 1033317:	test   eax,0xaa10a9f8
 103331c:	sbb    BYTE PTR [rdx-0x55c755d0],ch
 1033322:	rex.W stos BYTE PTR es:[rdi],al
 1033324:	pop    rax
 1033325:	stos   BYTE PTR es:[rdi],al
 1033326:	(bad)  
 1033327:	stos   BYTE PTR es:[rdi],al
 1033328:	push   0xffffffff90aa80aa
 103332d:	stos   BYTE PTR es:[rdi],al
 103332e:	test   al,0xaa
 1033330:	mov    eax,0xe8aae0aa
 1033335:	stos   BYTE PTR es:[rdi],al
 1033336:	add    BYTE PTR [rbx-0x54d754f8],ch
 103333c:	xor    BYTE PTR [rbx-0x54af54c8],ch
 1033342:	(bad)  
 1033343:	stos   DWORD PTR es:[rdi],eax
 1033344:	js     0x10332f1
 1033346:	mov    BYTE PTR [rbx-0x54475458],ch
 103334c:	shr    BYTE PTR [rbx-0x54075420],1
 1033352:	add    BYTE PTR [rax+rbx*1+0x30ac20ac],ch
 1033359:	lods   al,BYTE PTR ds:[rsi]
 103335a:	rex.W lods al,BYTE PTR ds:[rsi]
 103335c:	push   rax
 103335d:	lods   al,BYTE PTR ds:[rsi]
 103335e:	pop    rax
 103335f:	lods   al,BYTE PTR ds:[rsi]
 1033360:	jo     0x103330e
 1033362:	sub    BYTE PTR [rax+rbx*4-0x37535754],0xac
 103336a:	fsubr  DWORD PTR [rax+rsi*8+0x18ad00ac]
 1033371:	lods   eax,DWORD PTR ds:[rsi]
 1033372:	and    BYTE PTR [rbp-0x52bf52c8],ch
 1033378:	push   rax
 1033379:	lods   eax,DWORD PTR ds:[rsi]
 103337a:	push   0x78ad70ad
 103337f:	lods   eax,DWORD PTR ds:[rsi]
 1033380:	nop
 1033381:	lods   eax,DWORD PTR ds:[rsi]
 1033382:	movabs al,ds:0xf8ade8adc8adb8ad
 103338b:	lods   eax,DWORD PTR ds:[rsi]
 103338c:	adc    BYTE PTR [rsi-0x51c751e0],ch
 1033392:	scas   al,BYTE PTR es:[rdi]
 1033394:	pop    rax
 1033395:	scas   al,BYTE PTR es:[rdi]
 1033396:	(bad)  
 1033397:	scas   al,BYTE PTR es:[rdi]
 1033398:	jo     0x1033348
 103339a:	mov    BYTE PTR [rsi-0x51675170],ch
 10333a0:	mov    al,0xae
 10333a2:	shr    BYTE PTR [rsi-0x51175128],0x8
 10333a9:	scas   eax,DWORD PTR es:[rdi]
 10333aa:	sbb    BYTE PTR [rdi-0x50bf50d0],ch
 10333b0:	pop    rax
 10333b1:	scas   eax,DWORD PTR es:[rdi]
 10333b2:	push   0xffffffff88af80af
 10333b7:	scas   eax,DWORD PTR es:[rdi]
 10333b8:	movabs al,ds:0xd0afc8afb8afa8af
 10333c1:	scas   eax,DWORD PTR es:[rdi]
 10333c2:	fsubr  DWORD PTR [rdi+0xaff0]
 10333c8:	add    BYTE PTR [rax+0x2],dl
 10333cb:	add    BYTE PTR [rax+0x0],al
 10333ce:	add    BYTE PTR [rax],al
 10333d0:	add    BYTE PTR [rax-0x5fd75fe8],ah
 10333d6:	rex.W movabs al,ds:0xa098a080a070a058
 10333e0:	test   al,0xa0
 10333e2:	shl    BYTE PTR [rax-0x5f175f30],0xf0
 10333e9:	movabs al,ds:0xa138a120a110a108
 10333f2:	rex movabs eax,ds:0xa208a1d0a1c8a160
 10333fc:	adc    BYTE PTR [rdx-0x5db75dc8],ah
 1033402:	pop    rax
 1033403:	movabs ds:0xa268,al
	...
