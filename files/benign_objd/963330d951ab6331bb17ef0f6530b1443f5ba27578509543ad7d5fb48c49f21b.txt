
963330d951ab6331bb17ef0f6530b1443f5ba27578509543ad7d5fb48c49f21b.exe:     file format pei-x86-64


Disassembly of section .text:

0000000001001000 <.text>:
 1001000:	sub    BYTE PTR [rsi+0x1],dl
 1001003:	add    BYTE PTR [rax],al
 1001005:	add    BYTE PTR [rax],al
 1001007:	add    BYTE PTR [rsi+rdx*2],bh
 100100a:	add    DWORD PTR [rax],eax
 100100c:	add    BYTE PTR [rax],al
 100100e:	add    BYTE PTR [rax],al
 1001010:	push   rsp
 1001011:	push   rsi
 1001012:	add    DWORD PTR [rax],eax
 1001014:	add    BYTE PTR [rax],al
 1001016:	add    BYTE PTR [rax],al
 1001018:	ins    BYTE PTR es:[rdi],dx
 1001019:	push   rsi
 100101a:	add    DWORD PTR [rax],eax
 100101c:	add    BYTE PTR [rax],al
 100101e:	add    BYTE PTR [rax],al
 1001020:	jp     0x1001078
 1001022:	add    DWORD PTR [rax],eax
 1001024:	add    BYTE PTR [rax],al
 1001026:	add    BYTE PTR [rax],al
 1001028:	mov    dl,BYTE PTR [rsi+0x1]
 100102b:	add    BYTE PTR [rax],al
 100102d:	add    BYTE PTR [rax],al
 100102f:	add    BYTE PTR [rsi+0x156],bl
 1001035:	add    BYTE PTR [rax],al
 1001037:	add    BYTE PTR [rsi+rdx*2+0x1],dh
 100103e:	add    BYTE PTR [rax],al
 1001040:	(bad)  
 1001041:	push   rsi
 1001042:	add    DWORD PTR [rax],eax
 1001044:	add    BYTE PTR [rax],al
 1001046:	add    BYTE PTR [rax],al
 1001048:	(bad)  
 1001049:	push   rsi
 100104a:	add    DWORD PTR [rax],eax
 100104c:	add    BYTE PTR [rax],al
 100104e:	add    BYTE PTR [rax],al
 1001050:	out    dx,al
 1001051:	push   rsi
 1001052:	add    DWORD PTR [rax],eax
 1001054:	add    BYTE PTR [rax],al
 1001056:	add    BYTE PTR [rax],al
 1001058:	(bad)  
 1001059:	push   rdi
 100105a:	add    DWORD PTR [rax],eax
 100105c:	add    BYTE PTR [rax],al
 100105e:	add    BYTE PTR [rax],al
 1001060:	and    dl,BYTE PTR [rdi+0x1]
 1001063:	add    BYTE PTR [rax],al
 1001065:	add    BYTE PTR [rax],al
 1001067:	add    BYTE PTR [rax+0x57],al
 100106a:	add    DWORD PTR [rax],eax
 100106c:	add    BYTE PTR [rax],al
 100106e:	add    BYTE PTR [rax],al
 1001070:	lock pop rsi
 1001072:	add    DWORD PTR [rax],eax
	...
 1001080:	jb     0x10010e0
 1001082:	add    DWORD PTR [rax],eax
	...
 1001090:	xor    bl,BYTE PTR [rcx+0x1]
 1001093:	add    BYTE PTR [rax],al
 1001095:	add    BYTE PTR [rax],al
 1001097:	add    BYTE PTR [rsi],bh
 1001099:	pop    rcx
 100109a:	add    DWORD PTR [rax],eax
 100109c:	add    BYTE PTR [rax],al
 100109e:	add    BYTE PTR [rax],al
 10010a0:	push   rsp
 10010a1:	pop    rcx
 10010a2:	add    DWORD PTR [rax],eax
 10010a4:	add    BYTE PTR [rax],al
 10010a6:	add    BYTE PTR [rax],al
 10010a8:	pop    rsp
 10010a9:	pop    rcx
 10010aa:	add    DWORD PTR [rax],eax
 10010ac:	add    BYTE PTR [rax],al
 10010ae:	add    BYTE PTR [rax],al
 10010b0:	push   0x59
 10010b2:	add    DWORD PTR [rax],eax
 10010b4:	add    BYTE PTR [rax],al
 10010b6:	add    BYTE PTR [rax],al
 10010b8:	jbe    0x1001113
 10010ba:	add    DWORD PTR [rax],eax
 10010bc:	add    BYTE PTR [rax],al
 10010be:	add    BYTE PTR [rax],al
 10010c0:	(bad)  
 10010c1:	pop    rcx
 10010c2:	add    DWORD PTR [rax],eax
 10010c4:	add    BYTE PTR [rax],al
 10010c6:	add    BYTE PTR [rax],al
 10010c8:	xchg   esi,eax
 10010c9:	pop    rcx
 10010ca:	add    DWORD PTR [rax],eax
 10010cc:	add    BYTE PTR [rax],al
 10010ce:	add    BYTE PTR [rax],al
 10010d0:	test   al,0x59
 10010d2:	add    DWORD PTR [rax],eax
 10010d4:	add    BYTE PTR [rax],al
 10010d6:	add    BYTE PTR [rax],al
 10010d8:	mov    ah,0x59
 10010da:	add    DWORD PTR [rax],eax
 10010dc:	add    BYTE PTR [rax],al
 10010de:	add    BYTE PTR [rax],al
 10010e0:	ret    0x159
 10010e3:	add    BYTE PTR [rax],al
 10010e5:	add    BYTE PTR [rax],al
 10010e7:	add    dl,dl
 10010e9:	pop    rcx
 10010ea:	add    DWORD PTR [rax],eax
 10010ec:	add    BYTE PTR [rax],al
 10010ee:	add    BYTE PTR [rax],al
 10010f0:	in     al,0x59
 10010f2:	add    DWORD PTR [rax],eax
 10010f4:	add    BYTE PTR [rax],al
 10010f6:	add    BYTE PTR [rax],al
 10010f8:	out    dx,al
 10010f9:	pop    rcx
 10010fa:	add    DWORD PTR [rax],eax
 10010fc:	add    BYTE PTR [rax],al
 10010fe:	add    BYTE PTR [rax],al
 1001100:	(bad)  
 1001101:	pop    rcx
 1001102:	add    DWORD PTR [rax],eax
 1001104:	add    BYTE PTR [rax],al
 1001106:	add    BYTE PTR [rax],al
 1001108:	adc    BYTE PTR [rdx+0x1],bl
 100110b:	add    BYTE PTR [rax],al
 100110d:	add    BYTE PTR [rax],al
 100110f:	add    BYTE PTR [rsi],ah
 1001111:	pop    rdx
 1001112:	add    DWORD PTR [rax],eax
 1001114:	add    BYTE PTR [rax],al
 1001116:	add    BYTE PTR [rax],al
 1001118:	cmp    bl,BYTE PTR [rdx+0x1]
 100111b:	add    BYTE PTR [rax],al
 100111d:	add    BYTE PTR [rax],al
 100111f:	add    BYTE PTR [rdx],cl
 1001121:	pop    rcx
 1001122:	add    DWORD PTR [rax],eax
 1001124:	add    BYTE PTR [rax],al
 1001126:	add    BYTE PTR [rax],al
 1001128:	pop    rsp
 1001129:	pop    rdx
 100112a:	add    DWORD PTR [rax],eax
 100112c:	add    BYTE PTR [rax],al
 100112e:	add    BYTE PTR [rax],al
 1001130:	jb     0x100118c
 1001132:	add    DWORD PTR [rax],eax
 1001134:	add    BYTE PTR [rax],al
 1001136:	add    BYTE PTR [rax],al
 1001138:	sbb    BYTE PTR [rdx+0x1],0x0
 100113c:	add    BYTE PTR [rax],al
 100113e:	add    BYTE PTR [rax],al
 1001140:	xchg   edx,eax
 1001141:	pop    rdx
 1001142:	add    DWORD PTR [rax],eax
 1001144:	add    BYTE PTR [rax],al
 1001146:	add    BYTE PTR [rax],al
 1001148:	movabs ds:0xb60000000000015a,al
 1001151:	pop    rdx
 1001152:	add    DWORD PTR [rax],eax
 1001154:	add    BYTE PTR [rax],al
 1001156:	add    BYTE PTR [rax],al
 1001158:	(bad)  
 1001159:	pop    rdx
 100115a:	add    DWORD PTR [rax],eax
 100115c:	add    BYTE PTR [rax],al
 100115e:	add    BYTE PTR [rax],al
 1001160:	ficomp WORD PTR [rdx+0x1]
 1001163:	add    BYTE PTR [rax],al
 1001165:	add    BYTE PTR [rax],al
 1001167:	add    dl,bh
 1001169:	pop    rdx
 100116a:	add    DWORD PTR [rax],eax
 100116c:	add    BYTE PTR [rax],al
 100116e:	add    BYTE PTR [rax],al
 1001170:	or     bl,BYTE PTR [rbx+0x1]
 1001173:	add    BYTE PTR [rax],al
 1001175:	add    BYTE PTR [rax],al
 1001177:	add    BYTE PTR [rsi],al
 1001179:	(bad)  
 100117a:	add    DWORD PTR [rax],eax
 100117c:	add    BYTE PTR [rax],al
 100117e:	add    BYTE PTR [rax],al
 1001180:	repnz pop rdi
 1001182:	add    DWORD PTR [rax],eax
 1001184:	add    BYTE PTR [rax],al
 1001186:	add    BYTE PTR [rax],al
 1001188:	fcomp  DWORD PTR [rdi+0x1]
 100118b:	add    BYTE PTR [rax],al
 100118d:	add    BYTE PTR [rax],al
 100118f:	add    ah,al
 1001191:	pop    rdi
 1001192:	add    DWORD PTR [rax],eax
 1001194:	add    BYTE PTR [rax],al
 1001196:	add    BYTE PTR [rax],al
 1001198:	mov    al,0x5f
 100119a:	add    DWORD PTR [rax],eax
 100119c:	add    BYTE PTR [rax],al
 100119e:	add    BYTE PTR [rax],al
 10011a0:	xchg   esp,eax
 10011a1:	pop    rdi
 10011a2:	add    DWORD PTR [rax],eax
 10011a4:	add    BYTE PTR [rax],al
 10011a6:	add    BYTE PTR [rax],al
 10011a8:	sbb    BYTE PTR [rdi+0x1],0x0
 10011ac:	add    BYTE PTR [rax],al
 10011ae:	add    BYTE PTR [rax],al
 10011b0:	pop    di
 10011b2:	add    DWORD PTR [rax],eax
 10011b4:	add    BYTE PTR [rax],al
 10011b6:	add    BYTE PTR [rax],al
 10011b8:	push   rsi
 10011b9:	pop    rdi
 10011ba:	add    DWORD PTR [rax],eax
 10011bc:	add    BYTE PTR [rax],al
 10011be:	add    BYTE PTR [rax],al
 10011c0:	cmp    al,0x5f
 10011c2:	add    DWORD PTR [rax],eax
 10011c4:	add    BYTE PTR [rax],al
 10011c6:	add    BYTE PTR [rax],al
 10011c8:	(bad)  
 10011c9:	pop    rdi
 10011ca:	add    DWORD PTR [rax],eax
 10011cc:	add    BYTE PTR [rax],al
 10011ce:	add    BYTE PTR [rax],al
 10011d0:	(bad)  
 10011d1:	pop    rdi
 10011d2:	add    DWORD PTR [rax],eax
 10011d4:	add    BYTE PTR [rax],al
 10011d6:	add    BYTE PTR [rax],al
 10011d8:	(bad)  
 10011d9:	pop    rsi
 10011da:	add    DWORD PTR [rax],eax
 10011dc:	add    BYTE PTR [rax],al
 10011de:	add    BYTE PTR [rax],al
 10011e0:	repnz pop rax
 10011e2:	add    DWORD PTR [rax],eax
 10011e4:	add    BYTE PTR [rax],al
 10011e6:	add    BYTE PTR [rax],al
 10011e8:	ficomp DWORD PTR [rax+0x1]
 10011eb:	add    BYTE PTR [rax],al
 10011ed:	add    BYTE PTR [rax],al
 10011ef:	add    ah,cl
 10011f1:	pop    rax
 10011f2:	add    DWORD PTR [rax],eax
 10011f4:	add    BYTE PTR [rax],al
 10011f6:	add    BYTE PTR [rax],al
 10011f8:	mov    esp,0x158
 10011fd:	add    BYTE PTR [rax],al
 10011ff:	add    BYTE PTR [rdx],dl
 1001201:	(bad)  
 1001202:	add    DWORD PTR [rax],eax
 1001204:	add    BYTE PTR [rax],al
 1001206:	add    BYTE PTR [rax],al
 1001208:	lods   al,BYTE PTR ds:[rsi]
 1001209:	pop    rax
 100120a:	add    DWORD PTR [rax],eax
 100120c:	add    BYTE PTR [rax],al
 100120e:	add    BYTE PTR [rax],al
 1001210:	xchg   esi,eax
 1001211:	pop    rax
 1001212:	add    DWORD PTR [rax],eax
 1001214:	add    BYTE PTR [rax],al
 1001216:	add    BYTE PTR [rax],al
 1001218:	(bad)  
 1001219:	pop    rax
 100121a:	add    DWORD PTR [rax],eax
 100121c:	add    BYTE PTR [rax],al
 100121e:	add    BYTE PTR [rax],al
 1001220:	jb     0x100127a
 1001222:	add    DWORD PTR [rax],eax
 1001224:	add    BYTE PTR [rax],al
 1001226:	add    BYTE PTR [rax],al
 1001228:	pop    rsi
 1001229:	pop    rax
 100122a:	add    DWORD PTR [rax],eax
 100122c:	add    BYTE PTR [rax],al
 100122e:	add    BYTE PTR [rax],al
 1001230:	push   rax
 1001231:	pop    rax
 1001232:	add    DWORD PTR [rax],eax
 1001234:	add    BYTE PTR [rax],al
 1001236:	add    BYTE PTR [rax],al
 1001238:	cmp    bl,BYTE PTR [rax+0x1]
 100123b:	add    BYTE PTR [rax],al
 100123d:	add    BYTE PTR [rax],al
 100123f:	add    BYTE PTR [rax+rbx*2],ah
 1001242:	add    DWORD PTR [rax],eax
 1001244:	add    BYTE PTR [rax],al
 1001246:	add    BYTE PTR [rax],al
 1001248:	adc    al,0x58
 100124a:	add    DWORD PTR [rax],eax
 100124c:	add    BYTE PTR [rax],al
 100124e:	add    BYTE PTR [rax],al
 1001250:	(bad)  
 1001251:	pop    rax
 1001252:	add    DWORD PTR [rax],eax
 1001254:	add    BYTE PTR [rax],al
 1001256:	add    BYTE PTR [rax],al
 1001258:	lock push rdi
 100125a:	add    DWORD PTR [rax],eax
 100125c:	add    BYTE PTR [rax],al
 100125e:	add    BYTE PTR [rax],al
 1001260:	fcom   QWORD PTR [rdi+0x1]
 1001263:	add    BYTE PTR [rax],al
 1001265:	add    BYTE PTR [rax],al
 1001267:	add    dh,cl
 1001269:	push   rdi
 100126a:	add    DWORD PTR [rax],eax
 100126c:	add    BYTE PTR [rax],al
 100126e:	add    BYTE PTR [rax],al
 1001270:	mov    esi,0x157
 1001275:	add    BYTE PTR [rax],al
 1001277:	add    BYTE PTR [rdi+rdx*2+0x1],ch
 100127e:	add    BYTE PTR [rax],al
 1001280:	pushf  
 1001281:	push   rdi
 1001282:	add    DWORD PTR [rax],eax
 1001284:	add    BYTE PTR [rax],al
 1001286:	add    BYTE PTR [rax],al
 1001288:	mov    ss,WORD PTR [rdi+0x1]
 100128b:	add    BYTE PTR [rax],al
 100128d:	add    BYTE PTR [rax],al
 100128f:	add    BYTE PTR [rsi+0x57],bh
 1001292:	add    DWORD PTR [rax],eax
 1001294:	add    BYTE PTR [rax],al
 1001296:	add    BYTE PTR [rax],al
 1001298:	ins    BYTE PTR es:[rdi],dx
 1001299:	push   rdi
 100129a:	add    DWORD PTR [rax],eax
 100129c:	add    BYTE PTR [rax],al
 100129e:	add    BYTE PTR [rax],al
 10012a0:	(bad)  
 10012a1:	(bad)  
 10012a2:	add    DWORD PTR [rax],eax
 10012a4:	add    BYTE PTR [rax],al
 10012a6:	add    BYTE PTR [rax],al
 10012a8:	cmp    BYTE PTR [rax+0x1],ah
 10012ab:	add    BYTE PTR [rax],al
 10012ad:	add    BYTE PTR [rax],al
 10012af:	add    BYTE PTR [rdx+0x60],dl
 10012b2:	add    DWORD PTR [rax],eax
 10012b4:	add    BYTE PTR [rax],al
 10012b6:	add    BYTE PTR [rax],al
 10012b8:	fs (bad) 
 10012ba:	add    DWORD PTR [rax],eax
 10012bc:	add    BYTE PTR [rax],al
 10012be:	add    BYTE PTR [rax],al
 10012c0:	pop    rsi
 10012c1:	push   rdi
 10012c2:	add    DWORD PTR [rax],eax
 10012c4:	add    BYTE PTR [rax],al
 10012c6:	add    BYTE PTR [rax],al
 10012c8:	rex.WRX pop rdx
 10012ca:	add    DWORD PTR [rax],eax
 10012cc:	add    BYTE PTR [rax],al
 10012ce:	add    BYTE PTR [rax],al
 10012d0:	jb     0x1001332
 10012d2:	add    DWORD PTR [rax],eax
 10012d4:	add    BYTE PTR [rax],al
 10012d6:	add    BYTE PTR [rax],al
 10012d8:	test   BYTE PTR [rax+0x1],ah
 10012db:	add    BYTE PTR [rax],al
 10012dd:	add    BYTE PTR [rax],al
 10012df:	add    BYTE PTR [rax+0x160],dl
 10012e5:	add    BYTE PTR [rax],al
 10012e7:	add    dh,dh
 10012e9:	(bad)  
 10012ea:	add    DWORD PTR [rax],eax
 10012ec:	add    BYTE PTR [rax],al
 10012ee:	add    BYTE PTR [rax],al
 10012f0:	out    0x60,al
 10012f2:	add    DWORD PTR [rax],eax
 10012f4:	add    BYTE PTR [rax],al
 10012f6:	add    BYTE PTR [rax],al
 10012f8:	fsub   DWORD PTR [rax+0x1]
 10012fb:	add    BYTE PTR [rax],al
 10012fd:	add    BYTE PTR [rax],al
 10012ff:	add    BYTE PTR [rax+riz*2+0x1],bh
 1001306:	add    BYTE PTR [rax],al
 1001308:	movabs al,ds:0x160
 1001311:	add    BYTE PTR [rax],al
 1001313:	add    BYTE PTR [rax],al
 1001315:	add    BYTE PTR [rax],al
 1001317:	add    BYTE PTR [rax+0x5d],bh
 100131a:	add    DWORD PTR [rax],eax
 100131c:	add    BYTE PTR [rax],al
 100131e:	add    BYTE PTR [rax],al
 1001320:	fs pop rbp
 1001322:	add    DWORD PTR [rax],eax
 1001324:	add    BYTE PTR [rax],al
 1001326:	add    BYTE PTR [rax],al
 1001328:	pop    rdx
 1001329:	pop    rbp
 100132a:	add    DWORD PTR [rax],eax
 100132c:	add    BYTE PTR [rax],al
 100132e:	add    BYTE PTR [rax],al
 1001330:	push   rdx
 1001331:	pop    rbp
 1001332:	add    DWORD PTR [rax],eax
 1001334:	add    BYTE PTR [rax],al
 1001336:	add    BYTE PTR [rax],al
 1001338:	rex.R pop rbp
 100133a:	add    DWORD PTR [rax],eax
 100133c:	add    BYTE PTR [rax],al
 100133e:	add    BYTE PTR [rax],al
 1001340:	cmp    bl,BYTE PTR [rbp+0x1]
 1001343:	add    BYTE PTR [rax],al
 1001345:	add    BYTE PTR [rax],al
 1001347:	add    BYTE PTR [rdx],bl
 1001349:	pop    rbp
 100134a:	add    DWORD PTR [rax],eax
 100134c:	add    BYTE PTR [rax],al
 100134e:	add    BYTE PTR [rax],al
 1001350:	adc    BYTE PTR [rbp+0x1],bl
 1001353:	add    BYTE PTR [rax],al
 1001355:	add    BYTE PTR [rax],al
 1001357:	add    BYTE PTR [rbx*2+0x1],al
 100135e:	add    BYTE PTR [rax],al
 1001360:	lock pop rsp
 1001362:	add    DWORD PTR [rax],eax
 1001364:	add    BYTE PTR [rax],al
 1001366:	add    BYTE PTR [rax],al
 1001368:	ficomp DWORD PTR [rcx+rax*1+0x0]
 100136c:	add    BYTE PTR [rax],al
 100136e:	add    BYTE PTR [rax],al
 1001370:	int3   
 1001371:	pop    rsp
 1001372:	add    DWORD PTR [rax],eax
 1001374:	add    BYTE PTR [rax],al
 1001376:	add    BYTE PTR [rax],al
 1001378:	rcr    BYTE PTR [rcx+rax*1+0x0],0x0
 100137d:	add    BYTE PTR [rax],al
 100137f:	add    BYTE PTR [rdx+0x15c],dh
 1001385:	add    BYTE PTR [rax],al
 1001387:	add    BYTE PTR [rax+0x15c],ch
 100138d:	add    BYTE PTR [rax],al
 100138f:	add    BYTE PTR [rax+0x15c],ah
 1001395:	add    BYTE PTR [rax],al
 1001397:	add    BYTE PTR [rdx+0x15c],dl
 100139d:	add    BYTE PTR [rax],al
 100139f:	add    BYTE PTR [rax+0x15c],al
 10013a5:	add    BYTE PTR [rax],al
 10013a7:	add    BYTE PTR [rdx+0x5c],dh
 10013aa:	add    DWORD PTR [rax],eax
 10013ac:	add    BYTE PTR [rax],al
 10013ae:	add    BYTE PTR [rax],al
 10013b0:	push   0x15c
 10013b5:	add    BYTE PTR [rax],al
 10013b7:	add    BYTE PTR [rsi+0x5c],bl
 10013ba:	add    DWORD PTR [rax],eax
 10013bc:	add    BYTE PTR [rax],al
 10013be:	add    BYTE PTR [rax],al
 10013c0:	rex.RX pop rsp
 10013c2:	add    DWORD PTR [rax],eax
 10013c4:	add    BYTE PTR [rax],al
 10013c6:	add    BYTE PTR [rax],al
 10013c8:	ss pop rsp
 10013ca:	add    DWORD PTR [rax],eax
 10013cc:	add    BYTE PTR [rax],al
 10013ce:	add    BYTE PTR [rax],al
 10013d0:	es pop rsp
 10013d2:	add    DWORD PTR [rax],eax
 10013d4:	add    BYTE PTR [rax],al
 10013d6:	add    BYTE PTR [rax],al
 10013d8:	(bad)  
 10013d9:	pop    rsp
 10013da:	add    DWORD PTR [rax],eax
 10013dc:	add    BYTE PTR [rax],al
 10013de:	add    BYTE PTR [rax],al
 10013e0:	adc    bl,BYTE PTR [rcx+rax*1+0x0]
 10013e4:	add    BYTE PTR [rax],al
 10013e6:	add    BYTE PTR [rax],al
 10013e8:	or     BYTE PTR [rcx+rax*1+0x0],bl
 10013ec:	add    BYTE PTR [rax],al
 10013ee:	add    BYTE PTR [rax],al
 10013f0:	clc    
 10013f1:	pop    rbx
 10013f2:	add    DWORD PTR [rax],eax
 10013f4:	add    BYTE PTR [rax],al
 10013f6:	add    BYTE PTR [rax],al
 10013f8:	out    dx,al
 10013f9:	pop    rbx
 10013fa:	add    DWORD PTR [rax],eax
 10013fc:	add    BYTE PTR [rax],al
 10013fe:	add    BYTE PTR [rax],al
 1001400:	loop   0x100145d
 1001402:	add    DWORD PTR [rax],eax
 1001404:	add    BYTE PTR [rax],al
 1001406:	add    BYTE PTR [rax],al
 1001408:	(bad)  
 1001409:	pop    rbx
 100140a:	add    DWORD PTR [rax],eax
 100140c:	add    BYTE PTR [rax],al
 100140e:	add    BYTE PTR [rax],al
 1001410:	enter  0x15b,0x0
 1001414:	add    BYTE PTR [rax],al
 1001416:	add    BYTE PTR [rax],al
 1001418:	mov    esi,0x15b
 100141d:	add    BYTE PTR [rax],al
 100141f:	add    BYTE PTR [rax+0x15b],dh
 1001425:	add    BYTE PTR [rax],al
 1001427:	add    BYTE PTR [rdx+0x15b],ah
 100142d:	add    BYTE PTR [rax],al
 100142f:	add    BYTE PTR [rax+0x15b],bl
 1001435:	add    BYTE PTR [rax],al
 1001437:	add    BYTE PTR [rdx+0x15b],cl
 100143d:	add    BYTE PTR [rax],al
 100143f:	add    BYTE PTR [rsi+0x5b],bh
 1001442:	add    DWORD PTR [rax],eax
 1001444:	add    BYTE PTR [rax],al
 1001446:	add    BYTE PTR [rax],al
 1001448:	je     0x10014a5
 100144a:	add    DWORD PTR [rax],eax
 100144c:	add    BYTE PTR [rax],al
 100144e:	add    BYTE PTR [rax],al
 1001450:	push   0x5b
 1001452:	add    DWORD PTR [rax],eax
 1001454:	add    BYTE PTR [rax],al
 1001456:	add    BYTE PTR [rax],al
 1001458:	(bad)  
 1001459:	pop    rbx
 100145a:	add    DWORD PTR [rax],eax
 100145c:	add    BYTE PTR [rax],al
 100145e:	add    BYTE PTR [rax],al
 1001460:	push   rsi
 1001461:	pop    rbx
 1001462:	add    DWORD PTR [rax],eax
 1001464:	add    BYTE PTR [rax],al
 1001466:	add    BYTE PTR [rax],al
 1001468:	rex.WX pop rbx
 100146a:	add    DWORD PTR [rax],eax
 100146c:	add    BYTE PTR [rax],al
 100146e:	add    BYTE PTR [rax],al
 1001470:	cmp    bl,BYTE PTR [rbx+0x1]
 1001473:	add    BYTE PTR [rax],al
 1001475:	add    BYTE PTR [rax],al
 1001477:	add    BYTE PTR [rax],ch
 1001479:	pop    rbx
 100147a:	add    DWORD PTR [rax],eax
 100147c:	add    BYTE PTR [rax],al
 100147e:	add    BYTE PTR [rax],al
 1001480:	add    BYTE PTR [rcx+rax*1+0x0],bl
 1001484:	add    BYTE PTR [rax],al
 1001486:	add    BYTE PTR [rax],al
 1001488:	or     BYTE PTR [rcx+0x1],ah
	...
 1001497:	add    ah,dl
 1001499:	pop    rbp
 100149a:	add    DWORD PTR [rax],eax
 100149c:	add    BYTE PTR [rax],al
 100149e:	add    BYTE PTR [rax],al
 10014a0:	(bad)  
 10014a1:	pop    rbp
 10014a2:	add    DWORD PTR [rax],eax
 10014a4:	add    BYTE PTR [rax],al
 10014a6:	add    BYTE PTR [rax],al
 10014a8:	add    bl,BYTE PTR [rsi+0x1]
 10014ab:	add    BYTE PTR [rax],al
 10014ad:	add    BYTE PTR [rax],al
 10014af:	add    BYTE PTR [rsi+0x15d],bh
	...
 10014bd:	add    BYTE PTR [rax],al
 10014bf:	add    BYTE PTR [rsi+rbx*2+0x1],dl
 10014c3:	add    BYTE PTR [rax],al
 10014c5:	add    BYTE PTR [rax],al
 10014c7:	add    BYTE PTR [rsi+rbx*2+0x1],al
 10014cb:	add    BYTE PTR [rax],al
 10014cd:	add    BYTE PTR [rax],al
 10014cf:	add    BYTE PTR [rsi],dh
 10014d1:	pop    rsi
 10014d2:	add    DWORD PTR [rax],eax
 10014d4:	add    BYTE PTR [rax],al
 10014d6:	add    BYTE PTR [rax],al
 10014d8:	and    al,0x5e
 10014da:	add    DWORD PTR [rax],eax
	...
 10014e8:	rcr    BYTE PTR [rsi+0x1],cl
 10014eb:	add    BYTE PTR [rax],al
 10014ed:	add    BYTE PTR [rax],al
 10014ef:	add    BYTE PTR [rdx+0x15e],ah
 10014f5:	add    BYTE PTR [rax],al
 10014f7:	add    BYTE PTR [rsi+rbx*2+0x1],bh
	...
 1001506:	add    BYTE PTR [rax],al
 1001508:	sldt   WORD PTR [rax]
 100150b:	add    BYTE PTR [rax],al
 100150d:	add    BYTE PTR [rax],al
 100150f:	add    BYTE PTR [rax],0x0
 1001512:	add    BYTE PTR [rax],al
 1001514:	add    BYTE PTR [rax],al
 1001516:	add    BYTE PTR [rax],al
 1001518:	mov    ds,WORD PTR [rbp+0x1]
 100151b:	add    BYTE PTR [rax],al
 100151d:	add    BYTE PTR [rax],al
 100151f:	add    BYTE PTR [rsi+0x15d],bl
	...
 1001535:	add    BYTE PTR [rax],al
 1001537:	add    BYTE PTR [rsi+rcx*1+0x101],ah
 100153e:	add    BYTE PTR [rax],al
 1001540:	and    BYTE PTR [rbx],bh
 1001542:	add    DWORD PTR [rcx],eax
 1001544:	add    BYTE PTR [rax],al
 1001546:	add    BYTE PTR [rax],al
 1001548:	push   rax
 1001549:	cmp    eax,DWORD PTR [rcx]
 100154b:	add    DWORD PTR [rax],eax
 100154d:	add    BYTE PTR [rax],al
 100154f:	add    BYTE PTR [rax+0x1013b],al
	...
 1001565:	add    BYTE PTR [rax],al
 1001567:	add    BYTE PTR [rax+0x10110],bl
 100156d:	add    BYTE PTR [rax],al
 100156f:	add    BYTE PTR [rax+0x10114],ch
	...
 1001581:	add    BYTE PTR [rax],al
 1001583:	add    BYTE PTR [rcx],bl
 1001585:	jmp    0x10015bc
 1001587:	rex.WRXB add BYTE PTR [r8],r8b
 100158a:	add    BYTE PTR [rax],al
 100158c:	add    al,BYTE PTR [rax]
 100158e:	add    BYTE PTR [rax],al
 1001590:	add    BYTE PTR es:[rax],al
 1001593:	add    ah,ch
 1001595:	jae    0x1001597
 1001597:	add    ah,ch
 1001599:	add    BYTE PTR [eax],al
 100159c:	or     eax,0xa00
 10015a1:	add    BYTE PTR [rax],al
 10015a3:	add    BYTE PTR [rdx],ch
 10015a5:	add    BYTE PTR [rax],al
 10015a7:	add    BYTE PTR [rax],dh
 10015a9:	add    BYTE PTR [rax],al
 10015ab:	add    BYTE PTR [rax],al
 10015ad:	add    BYTE PTR [rax],al
 10015af:	add    BYTE PTR [rip+0x73006c00],ah        # 0x740081b5
 10015b5:	add    BYTE PTR [rip+0x34003000],ah        # 0x350045bb
 10015bb:	add    BYTE PTR [rax+rax*1+0x0],ah
 10015bf:	add    BYTE PTR [rbp+0x0],al
 10015c2:	push   rdx
 10015c3:	add    BYTE PTR [rdx+0x0],dl
 10015c6:	rex.WRXB add BYTE PTR [r10+0x0],r10b
 10015ca:	and    BYTE PTR [rax],al
 10015cc:	add    BYTE PTR [rax],al
 10015ce:	add    BYTE PTR [rax],al
 10015d0:	add    BYTE PTR [r11+0x0],al
 10015d4:	push   rsp
 10015d5:	add    BYTE PTR [rcx+0x0],cl
 10015d8:	rex.WRXB add BYTE PTR [r14+0x0],r9b
 10015dc:	add    BYTE PTR [rax],al
 10015de:	add    BYTE PTR [rax],al
 10015e0:	add    BYTE PTR cs:[rax+rax*1+0x6d],ah
 10015e5:	add    BYTE PTR [rax+0x0],dh
	...
 10015f0:	add    BYTE PTR cs:[rbp+0x0],ch
 10015f4:	add    BYTE PTR fs:[rbp+0x0],ch
 10015f8:	jo     0x10015fa
 10015fa:	add    BYTE PTR [rax],al
 10015fc:	add    BYTE PTR [rax],al
 10015fe:	add    BYTE PTR [rax],al
 1001600:	add    BYTE PTR cs:[rbp+0x0],ch
 1001604:	data16 add BYTE PTR [rax+rax*1+0x0],dh
 1001609:	add    BYTE PTR [rax],al
 100160b:	add    BYTE PTR [rax],al
 100160d:	add    BYTE PTR [rax],al
 100160f:	add    BYTE PTR [rsi],ch
 1001611:	add    BYTE PTR [rax+rax*1+0x6f],ch
 1001615:	add    BYTE PTR [rdi+0x0],ah
	...
 1001620:	add    BYTE PTR fs:[rdx],bh
 1001623:	add    BYTE PTR [rax+rax*1+0x64],bl
 1001627:	add    BYTE PTR [rcx+0x0],ah
 100162a:	je     0x100162c
 100162c:	(bad)  
 100162d:	add    BYTE PTR [rax+rax*1+0x6d],bl
 1001631:	add    BYTE PTR [rcx+0x0],ch
 1001634:	outs   dx,BYTE PTR ds:[rsi]
 1001635:	add    BYTE PTR [rcx+0x0],ch
 1001638:	add    BYTE PTR fs:[rbp+0x0],dh
 100163c:	ins    DWORD PTR es:[rdi],dx
 100163d:	add    BYTE PTR [rax+0x0],dh
 1001640:	jae    0x1001642
 1001642:	add    BYTE PTR [rax],al
 1001644:	add    BYTE PTR [rax],al
 1001646:	add    BYTE PTR [rax],al
 1001648:	push   rbx
 1001649:	add    BYTE PTR [rcx+0x0],dl
 100164c:	rex.WR add BYTE PTR [rax+rax*1+0x6d],r8b
 1001651:	add    BYTE PTR [rax+0x0],dh
 1001654:	jb     0x1001656
 1001656:	add    BYTE PTR [rax],al
 1001658:	push   rbx
 1001659:	add    BYTE PTR [rcx+0x0],dl
 100165c:	rex.WR add BYTE PTR [rax+rax*1+0x55],r8b
 1001661:	add    BYTE PTR [rbp+0x0],cl
 1001664:	push   rax
 1001665:	add    BYTE PTR [rbp+0x0],al
 1001668:	push   rdx
 1001669:	add    BYTE PTR [rdi+0x0],bl
 100166c:	add    BYTE PTR [r10+0x0],r10b
 1001670:	push   rdx
 1001671:	add    BYTE PTR [rdi+0x0],cl
 1001674:	push   rdx
 1001675:	add    BYTE PTR [rax+rax*1+0x4f],cl
 1001679:	add    BYTE PTR [rdi+0x0],al
 100167c:	add    BYTE PTR cs:[rax+rax*1+0x6f],ch
 1001681:	add    BYTE PTR [rdi+0x0],ah
 1001684:	add    BYTE PTR [rax],al
 1001686:	add    BYTE PTR [rax],al
 1001688:	push   rbx
 1001689:	add    BYTE PTR [rcx+0x0],dl
 100168c:	rex.WR add BYTE PTR [rax+rax*1+0x55],r8b
 1001691:	add    BYTE PTR [rbp+0x0],cl
 1001694:	push   rax
 1001695:	add    BYTE PTR [rbp+0x0],al
 1001698:	push   rdx
 1001699:	add    BYTE PTR [rdi+0x0],bl
 100169c:	push   rbp
 100169d:	add    BYTE PTR [rsi+0x0],cl
 10016a0:	rex.WXB add BYTE PTR [r14+0x0],cl
 10016a4:	rex.WRXB add BYTE PTR [r15+0x0],r10b
 10016a8:	rex.WRX add BYTE PTR [rdi+0x0],r11b
 10016ac:	add    BYTE PTR [r8+0x0],dl
 10016b0:	push   rax
 10016b1:	add    BYTE PTR [rsi],ch
 10016b3:	add    BYTE PTR [rbp+0x0],al
 10016b6:	pop    rax
 10016b7:	add    BYTE PTR [rbp+0x0],al
 10016ba:	add    BYTE PTR [rax],al
 10016bc:	add    BYTE PTR [rax],al
 10016be:	add    BYTE PTR [rax],al
 10016c0:	push   rbx
 10016c1:	add    BYTE PTR [rcx+0x0],dl
 10016c4:	rex.WR add BYTE PTR [rax+rax*1+0x55],r8b
 10016c9:	add    BYTE PTR [rbp+0x0],cl
 10016cc:	push   rax
 10016cd:	add    BYTE PTR [rbp+0x0],al
 10016d0:	push   rdx
 10016d1:	add    BYTE PTR [rdi+0x0],bl
 10016d4:	push   rbp
 10016d5:	add    BYTE PTR [rsi+0x0],cl
 10016d8:	rex.WXB add BYTE PTR [r14+0x0],cl
 10016dc:	rex.WRXB add BYTE PTR [r15+0x0],r10b
 10016e0:	rex.WRX add BYTE PTR [rdi+0x0],r11b
 10016e4:	rex.WRB add BYTE PTR [r15+0x0],r9b
 10016e8:	add    BYTE PTR [rbp+0x0],r10b
 10016ec:	rex.WR add BYTE PTR [rbp+0x0],r8b
 10016f0:	add    BYTE PTR cs:[rax+rax*1+0x4c],al
 10016f5:	add    BYTE PTR [rax+rax*1+0x0],cl
 10016f9:	add    BYTE PTR [rax],al
 10016fb:	add    BYTE PTR [rax],al
 10016fd:	add    BYTE PTR [rax],al
 10016ff:	add    BYTE PTR [rbx+0x0],dl
 1001702:	push   rcx
 1001703:	add    BYTE PTR [rax+rax*1+0x44],cl
 1001707:	add    BYTE PTR [rbp+0x0],dl
 100170a:	rex.WRB add BYTE PTR [r8+0x0],r10b
 100170e:	add    BYTE PTR [r10+0x0],r10b
	...
 100171e:	add    BYTE PTR [rax],al
 1001720:	push   rbx
 1001721:	add    BYTE PTR [rdi+0x0],cl
 1001724:	add    BYTE PTR [rax+r8*1+0x57],r10b
 1001729:	add    BYTE PTR [rcx+0x0],al
 100172c:	push   rdx
 100172d:	add    BYTE PTR [rbp+0x0],al
 1001730:	pop    rsp
 1001731:	add    BYTE PTR [rbp+0x0],cl
 1001734:	imul   eax,DWORD PTR [rax],0x720063
 100173a:	outs   dx,DWORD PTR ds:[rsi]
 100173b:	add    BYTE PTR [rbx+0x0],dh
 100173e:	outs   dx,DWORD PTR ds:[rsi]
 100173f:	add    BYTE PTR [rsi+0x0],ah
 1001742:	je     0x1001744
 1001744:	pop    rsp
 1001745:	add    BYTE PTR [rbp+0x0],cl
 1001748:	imul   eax,DWORD PTR [rax],0x720063
 100174e:	outs   dx,DWORD PTR ds:[rsi]
 100174f:	add    BYTE PTR [rbx+0x0],dh
 1001752:	outs   dx,DWORD PTR ds:[rsi]
 1001753:	add    BYTE PTR [rsi+0x0],ah
 1001756:	je     0x1001758
 1001758:	and    BYTE PTR [rax],al
 100175a:	push   rbx
 100175b:	add    BYTE PTR [rcx+0x0],dl
 100175e:	rex.WR add BYTE PTR [rax],r12b
 1001761:	add    BYTE PTR [rbx+0x0],dl
 1001764:	add    BYTE PTR gs:[rdx+0x0],dh
 1001768:	jbe    0x100176a
 100176a:	add    BYTE PTR gs:[rdx+0x0],dh
 100176e:	pop    rsp
 100176f:	add    BYTE PTR [rcx],dh
 1001771:	add    BYTE PTR [rcx],dh
 1001773:	add    BYTE PTR [rax],dh
 1001775:	add    BYTE PTR [rax],al
 1001777:	add    BYTE PTR [rbx+0x0],dl
 100177a:	push   rcx
 100177b:	add    BYTE PTR [rax+rax*1+0x45],cl
 100177f:	add    BYTE PTR [rax+0x0],bh
 1001782:	movsxd eax,DWORD PTR [rax]
 1001784:	add    BYTE PTR gs:[rax+0x0],dh
 1001788:	je     0x100178a
 100178a:	imul   eax,DWORD PTR [rax],0x6e006f
 1001790:	add    BYTE PTR ss:[rax+rax*1],dh
 1001794:	add    BYTE PTR [rax],al
 1001796:	add    BYTE PTR [rax],al
 1001798:	(bad)  
 1001799:	inc    BYTE PTR [rax]
 100179b:	add    BYTE PTR [rax],al
 100179d:	add    BYTE PTR [rax],al
 100179f:	add    BYTE PTR [rbp+0x0],cl
 10017a2:	rex.WB add BYTE PTR [r11+0x0],al
 10017a6:	push   rdx
 10017a7:	add    BYTE PTR [rdi+0x0],cl
 10017aa:	push   rbx
 10017ab:	add    BYTE PTR [rdi+0x0],cl
 10017ae:	add    BYTE PTR [rax+r8*1+0x23],r10b
 10017b3:	add    BYTE PTR [rbx],ah
 10017b5:	add    BYTE PTR [rdi+0x0],dl
 10017b8:	rex.WB add BYTE PTR [r8+rax*1+0x0],al
 10017bd:	add    BYTE PTR [rax],al
 10017bf:	add    BYTE PTR [rax],al
 10017c1:	or     BYTE PTR [rax],al
 10017c3:	add    BYTE PTR [rax],al
 10017c5:	add    BYTE PTR [rax],al
 10017c7:	add    BYTE PTR [rax+0x11],ah
 10017ca:	add    BYTE PTR [rax],al
 10017cc:	adc    BYTE PTR [rax],al
 10017ce:	add    BYTE PTR [rax],al
 10017d0:	add    BYTE PTR [rax],al
 10017d2:	add    BYTE PTR [rax],al
 10017d4:	add    al,BYTE PTR [rax]
 10017d6:	add    BYTE PTR [rax],al
 10017d8:	or     BYTE PTR [rax],al
 10017da:	add    BYTE PTR [rax],al
 10017dc:	add    BYTE PTR [rax],al
 10017de:	add    BYTE PTR [rax],al
 10017e0:	add    BYTE PTR [rax],al
 10017e3:	add    BYTE PTR [rax],al
 10017e5:	adc    BYTE PTR [rax],al
 10017e7:	add    BYTE PTR [rax],ah
 10017e9:	add    BYTE PTR [rax],al
 10017eb:	add    BYTE PTR [rsi],ah
 10017ed:	sbb    BYTE PTR [rax],al
 10017ef:	add    BYTE PTR [rax],al
 10017f1:	add    BYTE PTR [rax],0x0
 10017f4:	and    BYTE PTR [rax+0x18260000],al
 10017fa:	add    BYTE PTR [rax],al
 10017fc:	add    BYTE PTR [rax],al
 10017fe:	add    BYTE PTR [rax],al
 1001800:	add    BYTE PTR [rbp+0x0],r14b
 1001804:	ins    DWORD PTR es:[rdi],dx
 1001805:	add    BYTE PTR [rax+0x0],dh
 1001808:	imul   eax,DWORD PTR [rax],0x67006e
 100180e:	and    BYTE PTR [rax],al
 1001810:	jo     0x1001812
 1001812:	jb     0x1001814
 1001814:	outs   dx,DWORD PTR ds:[rsi]
 1001815:	add    BYTE PTR [rbx+0x0],ah
 1001818:	add    BYTE PTR gs:[rbx+0x0],dh
 100181c:	jae    0x100181e
 100181e:	and    BYTE PTR [rax],al
 1001820:	imul   eax,DWORD PTR [rax],0x200073
 1001826:	(bad)  
 1001827:	add    BYTE PTR [rbx+0x0],ah
 100182a:	je     0x100182c
 100182c:	imul   eax,DWORD PTR [rax],0x650076
 1001832:	and    BYTE PTR [rax],al
 1001834:	sub    eax,0x69002000
 1001839:	add    BYTE PTR [rdi+0x0],ah
 100183c:	outs   dx,BYTE PTR ds:[rsi]
 100183d:	add    BYTE PTR [rdi+0x0],ch
 1001840:	jb     0x1001842
 1001842:	imul   eax,DWORD PTR [rax],0x67006e
 1001848:	and    BYTE PTR [rax],al
 100184a:	movsxd eax,DWORD PTR [rax]
 100184c:	outs   dx,DWORD PTR ds:[rsi]
 100184d:	add    BYTE PTR [rsi+0x0],ch
 1001850:	jae    0x1001852
 1001852:	outs   dx,DWORD PTR ds:[rsi]
 1001853:	add    BYTE PTR [rax+rax*1+0x65],ch
 1001857:	add    BYTE PTR [rax],ah
 1001859:	add    BYTE PTR [rbp+0x0],ah
 100185c:	jbe    0x100185e
 100185e:	add    BYTE PTR gs:[rsi+0x0],ch
 1001862:	je     0x1001864
 1001864:	and    BYTE PTR [rax],al
 1001866:	and    eax,0x2e006400
 100186b:	add    BYTE PTR [rdx],cl
 100186d:	add    BYTE PTR [rax],al
 100186f:	add    BYTE PTR [rip+0x73006c00],ah        # 0x74008475
 1001875:	add    BYTE PTR [rdx],cl
	...
 100187f:	add    BYTE PTR [rax],ch
 1001881:	add    BYTE PTR [rip+0x3a005800],ah        # 0x3b007087
 1001887:	add    BYTE PTR [rip+0x29005800],ah        # 0x2a00708d
 100188d:	add    BYTE PTR [rax],ah
 100188f:	add    BYTE PTR [rip+0x73006c00],ah        # 0x74008495
 1001895:	add    BYTE PTR [rax],ah
 1001897:	add    BYTE PTR [rip+0x73006c00],ah        # 0x7400849d
 100189d:	add    BYTE PTR [rax+rax*1],ch
 10018a0:	and    BYTE PTR [rax],al
 10018a2:	and    eax,0x73006c00
 10018a7:	add    BYTE PTR [rax+rax*1],ch
 10018aa:	and    BYTE PTR [rax],al
 10018ac:	and    eax,0x35003200
 10018b1:	add    BYTE PTR [rax+rax*1+0x73],ch
 10018b5:	add    BYTE PTR [rax+rax*1],ch
 10018b8:	and    BYTE PTR [rax],al
 10018ba:	add    BYTE PTR [rax],al
 10018bc:	add    BYTE PTR [rax],al
 10018be:	add    BYTE PTR [rax],al
 10018c0:	and    eax,0x73006c00
 10018c5:	add    BYTE PTR [rax+rax*1+0x25],bl
 10018c9:	add    BYTE PTR [rax+rax*1+0x73],ch
 10018cd:	add    BYTE PTR [rax],al
 10018cf:	add    BYTE PTR [rbp+0x0],dl
 10018d2:	outs   dx,BYTE PTR ds:[rsi]
 10018d3:	add    BYTE PTR [rcx+0x0],ah
 10018d6:	(bad)  
 10018d7:	add    BYTE PTR [rax+rax*1+0x65],ch
 10018db:	add    BYTE PTR [rax],ah
 10018dd:	add    BYTE PTR [rax+rax*1+0x6f],dh
 10018e1:	add    BYTE PTR [rax],ah
 10018e3:	add    BYTE PTR [rsi+0x0],ah
 10018e6:	jb     0x10018e8
 10018e8:	add    BYTE PTR gs:[rbp+0x0],ah
 10018ec:	and    BYTE PTR [rax],al
 10018ee:	jo     0x10018f0
 10018f0:	(bad)  
 10018f1:	add    BYTE PTR [rdx+0x0],dh
 10018f4:	(bad)  
 10018f5:	add    BYTE PTR [rbp+0x0],ch
 10018f8:	add    BYTE PTR gs:[rax+rax*1+0x65],dh
 10018fd:	add    BYTE PTR [rdx+0x0],dh
 1001900:	and    BYTE PTR [rax],al
 1001902:	(bad)  
 1001903:	add    BYTE PTR [rax+rax*1+0x6f],ch
 1001907:	add    BYTE PTR [rbx+0x0],ah
 100190a:	imul   eax,DWORD PTR [rax],0x20
 100190d:	add    BYTE PTR [rip+0x7800],ah        # 0x1009113
 1001913:	add    BYTE PTR [rax],al
 1001915:	add    BYTE PTR [rax],al
 1001917:	add    BYTE PTR [rbx+0x0],dl
 100191a:	add    BYTE PTR gs:[rax+rax*1+0x65],al
 100191f:	add    BYTE PTR [rdx+0x0],ah
 1001922:	jne    0x1001924
 1001924:	add    BYTE PTR [eax+0x0],dl
 1001928:	jb     0x100192a
 100192a:	imul   eax,DWORD PTR [rax],0x690076
 1001930:	ins    BYTE PTR es:[rdi],dx
 1001931:	add    BYTE PTR [rbp+0x0],ah
 1001934:	add    BYTE PTR [ebp+0x0],ah
	...
 1001940:	add    BYTE PTR [r8+rax*1+0x6a],spl
 1001945:	add    BYTE PTR [rbp+0x0],dh
 1001948:	jae    0x100194a
 100194a:	je     0x100194c
 100194c:	push   rsp
 100194d:	add    BYTE PTR [rdi+0x0],ch
 1001950:	imul   eax,DWORD PTR [rax],0x65
 1001953:	add    BYTE PTR [rsi+0x0],ch
 1001956:	push   rax
 1001957:	add    BYTE PTR [rdx+0x0],dh
 100195a:	imul   eax,DWORD PTR [rax],0x690076
 1001960:	ins    BYTE PTR es:[rdi],dx
 1001961:	add    BYTE PTR [rbp+0x0],ah
 1001964:	add    BYTE PTR [ebp+0x0],ah
 1001968:	jae    0x100196a
 100196a:	and    BYTE PTR [rax],al
 100196c:	sub    BYTE PTR [rax],al
 100196e:	sub    DWORD PTR [rax],eax
 1001970:	and    BYTE PTR [rax],al
 1001972:	movsxd eax,DWORD PTR [rax]
 1001974:	outs   dx,DWORD PTR ds:[rsi]
 1001975:	add    BYTE PTR [rbp+0x0],ch
 1001978:	jo     0x100197a
 100197a:	ins    BYTE PTR es:[rdi],dx
 100197b:	add    BYTE PTR [rbp+0x0],ah
 100197e:	je     0x1001980
 1001980:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1001985:	add    BYTE PTR [rdi+0x0],dh
 1001988:	imul   eax,DWORD PTR [rax],0x680074
 100198e:	and    BYTE PTR [rax],al
 1001990:	jae    0x1001992
 1001992:	je     0x1001994
 1001994:	(bad)  
 1001995:	add    BYTE PTR [rax+rax*1+0x75],dh
 1001999:	add    BYTE PTR [rbx+0x0],dh
 100199c:	and    BYTE PTR [rax],al
 100199e:	sub    BYTE PTR [rax],al
 10019a0:	and    eax,0x38003000
 10019a5:	add    BYTE PTR [rax+0x0],bh
 10019a8:	sub    DWORD PTR [rax],eax
 10019aa:	add    BYTE PTR [rax],al
 10019ac:	add    BYTE PTR [rax],al
 10019ae:	add    BYTE PTR [rax],al
 10019b0:	rex.WRXB add BYTE PTR [r8+0x0],r14b
 10019b4:	add    BYTE PTR gs:[rsi+0x0],ch
 10019b8:	push   rax
 10019b9:	add    BYTE PTR [rdx+0x0],dh
 10019bc:	outs   dx,DWORD PTR ds:[rsi]
 10019bd:	add    BYTE PTR [rbx+0x0],ah
 10019c0:	add    BYTE PTR gs:[rbx+0x0],dh
 10019c4:	jae    0x10019c6
 10019c6:	push   rsp
 10019c7:	add    BYTE PTR [rdi+0x0],ch
 10019ca:	imul   eax,DWORD PTR [rax],0x65
 10019cd:	add    BYTE PTR [rsi+0x0],ch
 10019d0:	and    BYTE PTR [rax],al
 10019d2:	sub    BYTE PTR [rax],al
 10019d4:	sub    DWORD PTR [rax],eax
 10019d6:	and    BYTE PTR [rax],al
 10019d8:	data16 add BYTE PTR [rcx+0x0],ah
 10019dc:	imul   eax,DWORD PTR [rax],0x65006c
 10019e2:	add    BYTE PTR fs:[rax],ah
 10019e5:	add    BYTE PTR [rax],ch
 10019e7:	add    BYTE PTR [rip+0x38003000],ah        # 0x390049ed
 10019ed:	add    BYTE PTR [rax+0x0],bh
 10019f0:	sub    DWORD PTR [rax],eax
 10019f2:	add    BYTE PTR [rax],al
 10019f4:	add    BYTE PTR [rax],al
 10019f6:	add    BYTE PTR [rax],al
 10019f8:	push   rdx
 10019f9:	add    BYTE PTR [rbp+0x0],ah
 10019fc:	jo     0x10019fe
 10019fe:	outs   dx,DWORD PTR ds:[rsi]
 10019ff:	add    BYTE PTR [rdx+0x0],dh
 1001a02:	je     0x1001a04
 1001a04:	imul   eax,DWORD PTR [rax],0x67006e
 1001a0a:	and    BYTE PTR [rax],al
 1001a0c:	push   rbx
 1001a0d:	add    BYTE PTR [rbp+0x0],ah
 1001a10:	jb     0x1001a12
 1001a12:	jbe    0x1001a14
 1001a14:	imul   eax,DWORD PTR [rax],0x650063
 1001a1a:	jae    0x1001a1c
 1001a1c:	add    BYTE PTR [rax],al
 1001a1e:	add    BYTE PTR [rax],al
 1001a20:	push   rdx
 1001a21:	add    BYTE PTR [rbp+0x0],ah
 1001a24:	jo     0x1001a26
 1001a26:	outs   dx,DWORD PTR ds:[rsi]
 1001a27:	add    BYTE PTR [rdx+0x0],dh
 1001a2a:	je     0x1001a2c
 1001a2c:	push   rbx
 1001a2d:	add    BYTE PTR [rbp+0x0],ah
 1001a30:	jb     0x1001a32
 1001a32:	jbe    0x1001a34
 1001a34:	add    BYTE PTR gs:[rdx+0x0],dh
	...
 1001a40:	pop    rsp
 1001a41:	add    BYTE PTR [rbx+0x0],al
 1001a44:	push   rax
 1001a45:	add    BYTE PTR [rbp+0x0],al
	...
 1001a50:	rex.XB add BYTE PTR [r15+0x0],bpl
 1001a54:	jne    0x1001a56
 1001a56:	ins    BYTE PTR es:[rdi],dx
 1001a57:	add    BYTE PTR [rax+rax*1+0x20],ah
 1001a5b:	add    BYTE PTR [rsi+0x0],ch
 1001a5e:	outs   dx,DWORD PTR ds:[rsi]
 1001a5f:	add    BYTE PTR [rax+rax*1+0x20],dh
 1001a63:	add    BYTE PTR [rdi+0x0],ch
 1001a66:	jo     0x1001a68
 1001a68:	add    BYTE PTR gs:[rsi+0x0],ch
 1001a6c:	and    BYTE PTR [rax],al
 1001a6e:	jb     0x1001a70
 1001a70:	add    BYTE PTR gs:[rdi+0x0],ah
 1001a74:	imul   eax,DWORD PTR [rax],0x740073
 1001a7a:	jb     0x1001a7c
 1001a7c:	jns    0x1001a7e
 1001a7e:	and    BYTE PTR [rax],al
 1001a80:	imul   eax,DWORD PTR [rax],0x65
 1001a83:	add    BYTE PTR [rcx+0x0],bh
 1001a86:	and    BYTE PTR [rax],al
 1001a88:	and    al,BYTE PTR [rax]
 1001a8a:	and    eax,0x73006c00
 1001a8f:	add    BYTE PTR [rdx],ah
 1001a91:	add    BYTE PTR [rsi],ch
 1001a93:	add    BYTE PTR [rax],ah
 1001a95:	add    BYTE PTR [rbp+0x0],al
 1001a98:	jb     0x1001a9a
 1001a9a:	jb     0x1001a9c
 1001a9c:	outs   dx,DWORD PTR ds:[rsi]
 1001a9d:	add    BYTE PTR [rdx+0x0],dh
 1001aa0:	and    BYTE PTR [rax],al
 1001aa2:	rex.XB add BYTE PTR [r15+0x0],bpl
 1001aa6:	add    BYTE PTR fs:[rbp+0x0],ah
 1001aaa:	and    BYTE PTR [rax],al
 1001aac:	xor    BYTE PTR [rax],al
 1001aae:	js     0x1001ab0
 1001ab0:	and    eax,0x20007800
 1001ab5:	add    BYTE PTR [rip+0x25002000],ch        # 0x26003abb
 1001abb:	add    BYTE PTR [rax+rax*1+0x73],ch
	...
 1001acf:	add    BYTE PTR [rbx+0x0],al
 1001ad2:	outs   dx,DWORD PTR ds:[rsi]
 1001ad3:	add    BYTE PTR [rbp+0x0],dh
 1001ad6:	ins    BYTE PTR es:[rdi],dx
 1001ad7:	add    BYTE PTR [rax+rax*1+0x20],ah
 1001adb:	add    BYTE PTR [rsi+0x0],ch
 1001ade:	outs   dx,DWORD PTR ds:[rsi]
 1001adf:	add    BYTE PTR [rax+rax*1+0x20],dh
 1001ae3:	add    BYTE PTR [rdi+0x0],ch
 1001ae6:	jo     0x1001ae8
 1001ae8:	add    BYTE PTR gs:[rsi+0x0],ch
 1001aec:	and    BYTE PTR [rax],al
 1001aee:	jb     0x1001af0
 1001af0:	add    BYTE PTR gs:[rdi+0x0],ah
 1001af4:	imul   eax,DWORD PTR [rax],0x740073
 1001afa:	jb     0x1001afc
 1001afc:	jns    0x1001afe
 1001afe:	and    BYTE PTR [rax],al
 1001b00:	imul   eax,DWORD PTR [rax],0x65
 1001b03:	add    BYTE PTR [rcx+0x0],bh
 1001b06:	and    BYTE PTR [rax],al
 1001b08:	and    al,BYTE PTR [rax]
 1001b0a:	and    eax,0x73006c00
 1001b0f:	add    BYTE PTR [rdx],ah
 1001b11:	add    BYTE PTR [rsi],ch
 1001b13:	add    BYTE PTR [rax],ah
 1001b15:	add    BYTE PTR [rbp+0x0],al
 1001b18:	jb     0x1001b1a
 1001b1a:	jb     0x1001b1c
 1001b1c:	outs   dx,DWORD PTR ds:[rsi]
 1001b1d:	add    BYTE PTR [rdx+0x0],dh
 1001b20:	and    BYTE PTR [rax],al
 1001b22:	rex.XB add BYTE PTR [r15+0x0],bpl
 1001b26:	add    BYTE PTR fs:[rbp+0x0],ah
 1001b2a:	and    BYTE PTR [rax],al
 1001b2c:	xor    BYTE PTR [rax],al
 1001b2e:	js     0x1001b30
 1001b30:	and    eax,0x7800
	...
 1001b3d:	add    BYTE PTR [rax],al
 1001b3f:	add    BYTE PTR [rdx+0x0],dl
 1001b42:	imul   eax,DWORD PTR [rax],0x680067
 1001b48:	je     0x1001b4a
 1001b4a:	and    BYTE PTR [rax],al
 1001b4c:	imul   eax,DWORD PTR [rax],0x73006e
 1001b52:	je     0x1001b54
 1001b54:	(bad)  
 1001b55:	add    BYTE PTR [rsi+0x0],ch
 1001b58:	movsxd eax,DWORD PTR [rax]
 1001b5a:	add    BYTE PTR gs:[rip+0x70007300],ch        # 0x71008e61
 1001b61:	add    BYTE PTR [rbp+0x0],ah
 1001b64:	movsxd eax,DWORD PTR [rax]
 1001b66:	imul   eax,DWORD PTR [rax],0x690066
 1001b6c:	movsxd eax,DWORD PTR [rax]
 1001b6e:	and    BYTE PTR [rax],al
 1001b70:	imul   eax,DWORD PTR [rax],0x65
 1001b73:	add    BYTE PTR [rcx+0x0],bh
 1001b76:	and    BYTE PTR [rax],al
 1001b78:	movsxd eax,DWORD PTR [rax]
 1001b7a:	(bad)  
 1001b7b:	add    BYTE PTR [rsi+0x0],ch
 1001b7e:	and    BYTE PTR [rax],al
 1001b80:	outs   dx,BYTE PTR ds:[rsi]
 1001b81:	add    BYTE PTR [rdi+0x0],ch
 1001b84:	je     0x1001b86
 1001b86:	and    BYTE PTR [rax],al
 1001b88:	(bad)  
 1001b89:	add    BYTE PTR [rbp+0x0],ah
 1001b8c:	and    BYTE PTR [rax],al
 1001b8e:	add    BYTE PTR fs:[rbp+0x0],ah
 1001b92:	je     0x1001b94
 1001b94:	add    BYTE PTR gs:[rdx+0x0],dh
 1001b98:	ins    DWORD PTR es:[rdi],dx
 1001b99:	add    BYTE PTR [rcx+0x0],ch
 1001b9c:	outs   dx,BYTE PTR ds:[rsi]
 1001b9d:	add    BYTE PTR [rbp+0x0],ah
 1001ba0:	add    BYTE PTR fs:[rax],al
 1001ba3:	add    BYTE PTR [rax],al
 1001ba5:	add    BYTE PTR [rax],al
 1001ba7:	add    BYTE PTR [rdi+0x0],dl
 1001baa:	(bad)  
 1001bab:	add    BYTE PTR [rax+rax*1+0x73],dh
 1001baf:	add    BYTE PTR [rdi+0x0],ch
 1001bb2:	outs   dx,BYTE PTR ds:[rsi]
 1001bb3:	add    BYTE PTR [rax],ah
 1001bb5:	add    BYTE PTR [rcx+0x0],cl
 1001bb8:	outs   dx,BYTE PTR ds:[rsi]
 1001bb9:	add    BYTE PTR [rsi+0x0],dh
 1001bbc:	outs   dx,DWORD PTR ds:[rsi]
 1001bbd:	add    BYTE PTR [rbx+0x0],ch
 1001bc0:	add    BYTE PTR gs:[rdx],bh
 1001bc3:	add    BYTE PTR [rax],ah
 1001bc5:	add    BYTE PTR [rcx+0x0],bl
 1001bc8:	add    BYTE PTR gs:[rbx+0x0],dh
 1001bcc:	add    BYTE PTR [rax],al
 1001bce:	add    BYTE PTR [rax],al
 1001bd0:	push   rdi
 1001bd1:	add    BYTE PTR [rcx+0x0],ah
 1001bd4:	je     0x1001bd6
 1001bd6:	jae    0x1001bd8
 1001bd8:	outs   dx,DWORD PTR ds:[rsi]
 1001bd9:	add    BYTE PTR [rsi+0x0],ch
 1001bdc:	and    BYTE PTR [rax],al
 1001bde:	rex.WB add BYTE PTR [r14+0x0],bpl
 1001be2:	jbe    0x1001be4
 1001be4:	outs   dx,DWORD PTR ds:[rsi]
 1001be5:	add    BYTE PTR [rbx+0x0],ch
 1001be8:	add    BYTE PTR gs:[rdx],bh
 1001beb:	add    BYTE PTR [rax],ah
 1001bed:	add    BYTE PTR [rsi+0x0],cl
 1001bf0:	outs   dx,DWORD PTR ds:[rsi]
 1001bf1:	add    BYTE PTR [rax],al
 1001bf3:	add    BYTE PTR [rax],al
 1001bf5:	add    BYTE PTR [rax],al
 1001bf7:	add    BYTE PTR [rbp+0x0],al
 1001bfa:	js     0x1001bfc
 1001bfc:	movsxd eax,DWORD PTR [rax]
 1001bfe:	add    BYTE PTR gs:[rax+0x0],dh
 1001c02:	je     0x1001c04
 1001c04:	imul   eax,DWORD PTR [rax],0x6e006f
 1001c0a:	and    BYTE PTR [rax],al
 1001c0c:	and    eax,0x20007800
 1001c11:	add    BYTE PTR [rip+0x7000],ah        # 0x1008c17
 1001c17:	add    BYTE PTR [rax+0x65],cl
 1001c1a:	(bad)  
 1001c1b:	jo     0x1001c70
 1001c1d:	gs je  0x1001c69
 1001c20:	outs   dx,BYTE PTR ds:[rsi]
 1001c21:	outs   dx,WORD PTR ds:[rsi]
 1001c23:	jb     0x1001c92
 1001c25:	(bad)  
 1001c26:	je     0x1001c91
 1001c28:	outs   dx,DWORD PTR ds:[rsi]
 1001c29:	outs   dx,BYTE PTR ds:[rsi]
 1001c2a:	add    BYTE PTR [rax],al
 1001c2c:	add    BYTE PTR [rax],al
 1001c2e:	add    BYTE PTR [rax],al
 1001c30:	imul   eax,DWORD PTR [rax],0x65
 1001c33:	add    BYTE PTR [rdx+0x0],dh
 1001c36:	outs   dx,BYTE PTR ds:[rsi]
 1001c37:	add    BYTE PTR [rbp+0x0],ah
 1001c3a:	ins    BYTE PTR es:[rdi],dx
 1001c3b:	add    BYTE PTR [rbx],dh
 1001c3d:	add    BYTE PTR [rdx],dh
 1001c3f:	add    BYTE PTR [rsi],ch
 1001c41:	add    BYTE PTR [rax+rax*1+0x6c],ah
 1001c45:	add    BYTE PTR [rax+rax*1+0x0],ch
 1001c49:	add    BYTE PTR [rax],al
 1001c4b:	add    BYTE PTR [rax],al
 1001c4d:	add    BYTE PTR [rax],al
 1001c4f:	add    BYTE PTR [rdx+0x0],dl
 1001c52:	add    BYTE PTR gs:[rcx+0x0],ah
 1001c56:	add    BYTE PTR fs:[rsi+0x0],al
 1001c5a:	jne    0x1001c5c
 1001c5c:	ins    BYTE PTR es:[rdi],dx
 1001c5d:	add    BYTE PTR [rax+rax*1+0x4d],ch
 1001c61:	add    BYTE PTR [rbp+0x0],ah
 1001c64:	ins    DWORD PTR es:[rdi],dx
 1001c65:	add    BYTE PTR [rdi+0x0],ch
 1001c68:	jb     0x1001c6a
 1001c6a:	jns    0x1001c6c
 1001c6c:	and    BYTE PTR [rax],al
 1001c6e:	sub    BYTE PTR [rax],al
 1001c70:	and    eax,0x20007000
 1001c75:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1001c79:	add    BYTE PTR [rax],ah
 1001c7b:	add    BYTE PTR [rip+0x29007000],ah        # 0x2a008c81
 1001c81:	add    BYTE PTR [rax],ah
 1001c83:	add    BYTE PTR [rdi+0x0],ch
 1001c86:	outs   dx,BYTE PTR ds:[rsi]
 1001c87:	add    BYTE PTR [rax+rax*1+0x79],ch
 1001c8b:	add    BYTE PTR [rax],ah
 1001c8d:	add    BYTE PTR [rdx+0x0],dh
 1001c90:	add    BYTE PTR gs:[rcx+0x0],ah
 1001c94:	add    BYTE PTR fs:[rax],ah
 1001c97:	add    BYTE PTR [rip+0x20006400],ah        # 0x2100809d
 1001c9d:	add    BYTE PTR [rdx+0x0],ah
 1001ca0:	jns    0x1001ca2
 1001ca2:	je     0x1001ca4
 1001ca4:	add    BYTE PTR gs:[rbx+0x0],dh
	...
 1001cb0:	push   rdx
 1001cb1:	add    BYTE PTR [rbp+0x0],ah
 1001cb4:	(bad)  
 1001cb5:	add    BYTE PTR [rax+rax*1+0x46],ah
 1001cb9:	add    BYTE PTR [rbp+0x0],dh
 1001cbc:	ins    BYTE PTR es:[rdi],dx
 1001cbd:	add    BYTE PTR [rax+rax*1+0x4d],ch
 1001cc1:	add    BYTE PTR [rbp+0x0],ah
 1001cc4:	ins    DWORD PTR es:[rdi],dx
 1001cc5:	add    BYTE PTR [rdi+0x0],ch
 1001cc8:	jb     0x1001cca
 1001cca:	jns    0x1001ccc
 1001ccc:	and    BYTE PTR [rax],al
 1001cce:	sub    BYTE PTR [rax],al
 1001cd0:	and    eax,0x20007000
 1001cd5:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1001cd9:	add    BYTE PTR [rax],ah
 1001cdb:	add    BYTE PTR [rip+0x29007000],ah        # 0x2a008ce1
 1001ce1:	add    BYTE PTR [rax],ah
 1001ce3:	add    BYTE PTR [rsi+0x0],al
 1001ce6:	(bad)  
 1001ce7:	add    BYTE PTR [rcx+0x0],ch
 1001cea:	ins    BYTE PTR es:[rdi],dx
 1001ceb:	add    BYTE PTR [rbp+0x0],ah
 1001cee:	add    BYTE PTR fs:[rax],ah
 1001cf1:	add    BYTE PTR [rcx+0x0],ah
 1001cf4:	data16 add BYTE PTR [rax+rax*1+0x65],dh
 1001cf9:	add    BYTE PTR [rdx+0x0],dh
 1001cfc:	and    BYTE PTR [rax],al
 1001cfe:	and    eax,0x20006400
 1001d03:	add    BYTE PTR [rdx+0x0],ah
 1001d06:	jns    0x1001d08
 1001d08:	je     0x1001d0a
 1001d0a:	add    BYTE PTR gs:[rbx+0x0],dh
 1001d0e:	and    BYTE PTR [rax],al
 1001d10:	xor    BYTE PTR [rax],al
 1001d12:	js     0x1001d14
 1001d14:	and    eax,0x20007800
 1001d19:	add    BYTE PTR [rip+0x25002000],ch        # 0x26003d1f
 1001d1f:	add    BYTE PTR [rax+rax*1+0x73],ch
	...
 1001d2f:	add    BYTE PTR [rdx+0x0],dl
 1001d32:	add    BYTE PTR gs:[rcx+0x0],ah
 1001d36:	add    BYTE PTR fs:[rsi+0x0],al
 1001d3a:	jne    0x1001d3c
 1001d3c:	ins    BYTE PTR es:[rdi],dx
 1001d3d:	add    BYTE PTR [rax+rax*1+0x4d],ch
 1001d41:	add    BYTE PTR [rbp+0x0],ah
 1001d44:	ins    DWORD PTR es:[rdi],dx
 1001d45:	add    BYTE PTR [rdi+0x0],ch
 1001d48:	jb     0x1001d4a
 1001d4a:	jns    0x1001d4c
 1001d4c:	and    BYTE PTR [rax],al
 1001d4e:	sub    BYTE PTR [rax],al
 1001d50:	and    eax,0x20007000
 1001d55:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1001d59:	add    BYTE PTR [rax],ah
 1001d5b:	add    BYTE PTR [rip+0x29007000],ah        # 0x2a008d61
 1001d61:	add    BYTE PTR [rax],ah
 1001d63:	add    BYTE PTR [rsi+0x0],al
 1001d66:	(bad)  
 1001d67:	add    BYTE PTR [rcx+0x0],ch
 1001d6a:	ins    BYTE PTR es:[rdi],dx
 1001d6b:	add    BYTE PTR [rbp+0x0],ah
 1001d6e:	add    BYTE PTR fs:[rax],ah
 1001d71:	add    BYTE PTR [rcx+0x0],ah
 1001d74:	data16 add BYTE PTR [rax+rax*1+0x65],dh
 1001d79:	add    BYTE PTR [rdx+0x0],dh
 1001d7c:	and    BYTE PTR [rax],al
 1001d7e:	and    eax,0x20006400
 1001d83:	add    BYTE PTR [rdx+0x0],ah
 1001d86:	jns    0x1001d88
 1001d88:	je     0x1001d8a
 1001d8a:	add    BYTE PTR gs:[rbx+0x0],dh
 1001d8e:	and    BYTE PTR [rax],al
 1001d90:	sub    eax,0x45002000
 1001d95:	add    BYTE PTR [rdx+0x0],dh
 1001d98:	jb     0x1001d9a
 1001d9a:	outs   dx,DWORD PTR ds:[rsi]
 1001d9b:	add    BYTE PTR [rdx+0x0],dh
 1001d9e:	and    BYTE PTR [rax],al
 1001da0:	rex.XB add BYTE PTR [r15+0x0],bpl
 1001da4:	add    BYTE PTR fs:[rbp+0x0],ah
 1001da8:	and    BYTE PTR [rax],al
 1001daa:	xor    BYTE PTR [rax],al
 1001dac:	js     0x1001dae
 1001dae:	and    eax,0x7800
	...
 1001dbf:	add    BYTE PTR [rbx+0x0],dl
 1001dc2:	je     0x1001dc4
 1001dc4:	jb     0x1001dc6
 1001dc6:	imul   eax,DWORD PTR [rax],0x67006e
 1001dcc:	and    BYTE PTR [rax],al
 1001dce:	(bad)  
 1001dcf:	add    BYTE PTR [rax+rax*1+0x20],dh
 1001dd3:	add    BYTE PTR [rip+0x20007000],ah        # 0x21008dd9
 1001dd9:	add    BYTE PTR [rax+0x0],ch
 1001ddc:	(bad)  
 1001ddd:	add    BYTE PTR [rax+rax*1+0x20],ah
 1001de1:	add    BYTE PTR [rbx+0x0],ah
 1001de4:	push   0x63006500
 1001de9:	add    BYTE PTR [rbx+0x0],ch
 1001dec:	jae    0x1001dee
 1001dee:	jne    0x1001df0
 1001df0:	ins    DWORD PTR es:[rdi],dx
 1001df1:	add    BYTE PTR [rax],ah
 1001df3:	add    BYTE PTR [rbp+0x0],ch
 1001df6:	imul   eax,DWORD PTR [rax],0x6d0073
 1001dfc:	(bad)  
 1001dfd:	add    BYTE PTR [rax+rax*1+0x63],dh
 1001e01:	add    BYTE PTR [rax+0x0],ch
 1001e04:	and    BYTE PTR [rax],al
 1001e06:	sub    eax,0x63002000
 1001e0b:	add    BYTE PTR [rdi+0x0],ch
 1001e0e:	ins    DWORD PTR es:[rdi],dx
 1001e0f:	add    BYTE PTR [rax+0x0],dh
 1001e12:	jne    0x1001e14
 1001e14:	je     0x1001e16
 1001e16:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1001e1b:	add    BYTE PTR [rip+0x20005800],ah        # 0x21007621
 1001e21:	add    BYTE PTR [rip+0x65002000],ch        # 0x66003e27
 1001e27:	add    BYTE PTR [rax+0x0],bh
 1001e2a:	jo     0x1001e2c
 1001e2c:	add    BYTE PTR gs:[rbx+0x0],ah
 1001e30:	je     0x1001e32
 1001e32:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1001e37:	add    BYTE PTR [rip+0x5800],ah        # 0x100763d
 1001e3d:	add    BYTE PTR [rax],al
 1001e3f:	add    BYTE PTR [rbx+0x0],dl
 1001e42:	je     0x1001e44
 1001e44:	jb     0x1001e46
 1001e46:	imul   eax,DWORD PTR [rax],0x67006e
 1001e4c:	and    BYTE PTR [rax],al
 1001e4e:	(bad)  
 1001e4f:	add    BYTE PTR [rax+rax*1+0x20],dh
 1001e53:	add    BYTE PTR [rip+0x20007000],ah        # 0x21008e59
 1001e59:	add    BYTE PTR [rdi+0x0],dh
 1001e5c:	(bad)  
 1001e5d:	add    BYTE PTR [rbx+0x0],dh
 1001e60:	and    BYTE PTR [rax],al
 1001e62:	outs   dx,BYTE PTR ds:[rsi]
 1001e63:	add    BYTE PTR [rdi+0x0],ch
 1001e66:	je     0x1001e68
 1001e68:	and    BYTE PTR [rax],al
 1001e6a:	rex.WRX add BYTE PTR [rbp+0x0],r10b
 1001e6e:	rex.WR add BYTE PTR [rax+rax*1+0x20],r9b
 1001e73:	add    BYTE PTR [rax+rax*1+0x65],dh
 1001e77:	add    BYTE PTR [rdx+0x0],dh
 1001e7a:	ins    DWORD PTR es:[rdi],dx
 1001e7b:	add    BYTE PTR [rcx+0x0],ch
 1001e7e:	outs   dx,BYTE PTR ds:[rsi]
 1001e7f:	add    BYTE PTR [rcx+0x0],ah
 1001e82:	je     0x1001e84
 1001e84:	add    BYTE PTR gs:[rax+rax*1+0x0],ah
 1001e89:	add    BYTE PTR [rax],al
 1001e8b:	add    BYTE PTR [rax],al
 1001e8d:	add    BYTE PTR [rax],al
 1001e8f:	add    BYTE PTR [rbx+0x0],al
 1001e92:	outs   dx,DWORD PTR ds:[rsi]
 1001e93:	add    BYTE PTR [rbp+0x0],dh
 1001e96:	ins    BYTE PTR es:[rdi],dx
 1001e97:	add    BYTE PTR [rax+rax*1+0x20],ah
 1001e9b:	add    BYTE PTR [rsi+0x0],ch
 1001e9e:	outs   dx,DWORD PTR ds:[rsi]
 1001e9f:	add    BYTE PTR [rax+rax*1+0x20],dh
 1001ea3:	add    BYTE PTR [rbp+0x0],ch
 1001ea6:	(bad)  
 1001ea7:	add    BYTE PTR [rdx+0x0],dh
 1001eaa:	jae    0x1001eac
 1001eac:	push   0x6c006100
 1001eb1:	add    BYTE PTR [rax],ah
 1001eb3:	add    BYTE PTR [rbx+0x0],dh
 1001eb6:	je     0x1001eb8
 1001eb8:	jb     0x1001eba
 1001eba:	imul   eax,DWORD PTR [rax],0x67006e
 1001ec0:	and    BYTE PTR [rax],al
 1001ec2:	(bad)  
 1001ec3:	add    BYTE PTR [rax+rax*1+0x20],dh
 1001ec7:	add    BYTE PTR [rip+0x20007000],ah        # 0x21008ecd
 1001ecd:	add    BYTE PTR [rip+0x30002000],ch        # 0x31003ed3
 1001ed3:	add    BYTE PTR [rax+0x0],bh
 1001ed6:	and    eax,0x20007800
 1001edb:	add    BYTE PTR [rip+0x25002000],ch        # 0x26003ee1
 1001ee1:	add    BYTE PTR [rax+rax*1+0x73],ch
	...
 1001eed:	add    BYTE PTR [rax],al
 1001eef:	add    BYTE PTR [rbx+0x0],al
 1001ef2:	outs   dx,DWORD PTR ds:[rsi]
 1001ef3:	add    BYTE PTR [rbp+0x0],dh
 1001ef6:	ins    BYTE PTR es:[rdi],dx
 1001ef7:	add    BYTE PTR [rax+rax*1+0x20],ah
 1001efb:	add    BYTE PTR [rsi+0x0],ch
 1001efe:	outs   dx,DWORD PTR ds:[rsi]
 1001eff:	add    BYTE PTR [rax+rax*1+0x20],dh
 1001f03:	add    BYTE PTR [rbp+0x0],ch
 1001f06:	(bad)  
 1001f07:	add    BYTE PTR [rdx+0x0],dh
 1001f0a:	jae    0x1001f0c
 1001f0c:	push   0x6c006100
 1001f11:	add    BYTE PTR [rax],ah
 1001f13:	add    BYTE PTR [rbx+0x0],dh
 1001f16:	je     0x1001f18
 1001f18:	jb     0x1001f1a
 1001f1a:	imul   eax,DWORD PTR [rax],0x67006e
 1001f20:	and    BYTE PTR [rax],al
 1001f22:	(bad)  
 1001f23:	add    BYTE PTR [rax+rax*1+0x20],dh
 1001f27:	add    BYTE PTR [rip+0x20007000],ah        # 0x21008f2d
 1001f2d:	add    BYTE PTR [rip+0x45002000],ch        # 0x46003f33
 1001f33:	add    BYTE PTR [rdx+0x0],dh
 1001f36:	jb     0x1001f38
 1001f38:	outs   dx,DWORD PTR ds:[rsi]
 1001f39:	add    BYTE PTR [rdx+0x0],dh
 1001f3c:	and    BYTE PTR [rax],al
 1001f3e:	rex.XB add BYTE PTR [r15+0x0],bpl
 1001f42:	add    BYTE PTR fs:[rbp+0x0],ah
 1001f46:	and    BYTE PTR [rax],al
 1001f48:	xor    BYTE PTR [rax],al
 1001f4a:	js     0x1001f4c
 1001f4c:	and    eax,0x7800
	...
 1001f5d:	add    BYTE PTR [rax],al
 1001f5f:	add    BYTE PTR [rbp+0x0],dl
 1001f62:	outs   dx,BYTE PTR ds:[rsi]
 1001f63:	add    BYTE PTR [rcx+0x0],ah
 1001f66:	(bad)  
 1001f67:	add    BYTE PTR [rax+rax*1+0x65],ch
 1001f6b:	add    BYTE PTR [rax],ah
 1001f6d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1001f71:	add    BYTE PTR [rax],ah
 1001f73:	add    BYTE PTR [rdx+0x0],dh
 1001f76:	add    BYTE PTR gs:[rcx+0x0],ah
 1001f7a:	add    BYTE PTR fs:[rax],ah
 1001f7d:	add    BYTE PTR [rbx+0x0],ah
 1001f80:	outs   dx,DWORD PTR ds:[rsi]
 1001f81:	add    BYTE PTR [rsi+0x0],ch
 1001f84:	je     0x1001f86
 1001f86:	add    BYTE PTR gs:[rax+0x0],bh
 1001f8a:	je     0x1001f8c
 1001f8c:	and    BYTE PTR [rax],al
 1001f8e:	jbe    0x1001f90
 1001f90:	add    BYTE PTR gs:[rdx+0x0],dh
 1001f94:	jae    0x1001f96
 1001f96:	imul   eax,DWORD PTR [rax],0x6e006f
 1001f9c:	and    BYTE PTR [rax],al
 1001f9e:	data16 add BYTE PTR [rdx+0x0],dh
 1001fa2:	outs   dx,DWORD PTR ds:[rsi]
 1001fa3:	add    BYTE PTR [rbp+0x0],ch
 1001fa6:	and    BYTE PTR [rax],al
 1001fa8:	je     0x1001faa
 1001faa:	(bad)  
 1001fab:	add    BYTE PTR [rdx+0x0],dh
 1001fae:	add    BYTE PTR [ebp+0x0],ah
 1001fb2:	je     0x1001fb4
 1001fb4:	and    BYTE PTR [rax],al
 1001fb6:	jo     0x1001fb8
 1001fb8:	jb     0x1001fba
 1001fba:	outs   dx,DWORD PTR ds:[rsi]
 1001fbb:	add    BYTE PTR [rbx+0x0],ah
 1001fbe:	add    BYTE PTR gs:[rbx+0x0],dh
 1001fc2:	jae    0x1001fc4
 1001fc4:	and    BYTE PTR [rax],al
 1001fc6:	(bad)  
 1001fc7:	add    BYTE PTR [rax+rax*1+0x20],dh
 1001fcb:	add    BYTE PTR [rip+0x7000],ah        # 0x1008fd1
	...
 1001fdd:	add    BYTE PTR [rax],al
 1001fdf:	add    BYTE PTR [rbp+0x0],cl
 1001fe2:	imul   eax,DWORD PTR [rax],0x6d0073
 1001fe8:	(bad)  
 1001fe9:	add    BYTE PTR [rax+rax*1+0x63],dh
 1001fed:	add    BYTE PTR [rax+0x0],ch
 1001ff0:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1001ff5:	add    BYTE PTR [rax+rax*1+0x75],ah
 1001ff9:	add    BYTE PTR [rbp+0x0],ch
 1001ffc:	jo     0x1001ffe
 1001ffe:	and    BYTE PTR [rax],al
 1002000:	jbe    0x1002002
 1002002:	add    BYTE PTR gs:[rdx+0x0],dh
 1002006:	jae    0x1002008
 1002008:	imul   eax,DWORD PTR [rax],0x6e006f
 100200e:	jae    0x1002010
 1002010:	and    BYTE PTR [rax],al
 1002012:	sub    eax,0x25002000
 1002017:	add    BYTE PTR [rax+rax*1+0x20],ah
 100201b:	add    BYTE PTR [rsi+0x0],ah
 100201e:	jb     0x1002020
 1002020:	outs   dx,DWORD PTR ds:[rsi]
 1002021:	add    BYTE PTR [rbp+0x0],ch
 1002024:	and    BYTE PTR [rax],al
 1002026:	movsxd eax,DWORD PTR [rax]
 1002028:	(bad)  
 1002029:	add    BYTE PTR [rax+rax*1+0x6c],ch
 100202d:	add    BYTE PTR [rbp+0x0],ah
 1002030:	jb     0x1002032
 1002032:	and    BYTE PTR [rax],al
 1002034:	sub    eax,0x65002000
 1002039:	add    BYTE PTR [rax+0x0],bh
 100203c:	jo     0x100203e
 100203e:	add    BYTE PTR gs:[rbx+0x0],ah
 1002042:	je     0x1002044
 1002044:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1002049:	add    BYTE PTR [rip+0x6400],ah        # 0x100844f
 100204f:	add    BYTE PTR [rbp+0x0],dl
 1002052:	outs   dx,BYTE PTR ds:[rsi]
 1002053:	add    BYTE PTR [rcx+0x0],ah
 1002056:	(bad)  
 1002057:	add    BYTE PTR [rax+rax*1+0x65],ch
 100205b:	add    BYTE PTR [rax],ah
 100205d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1002061:	add    BYTE PTR [rax],ah
 1002063:	add    BYTE PTR [rdx+0x0],dh
 1002066:	add    BYTE PTR gs:[rcx+0x0],ah
 100206a:	add    BYTE PTR fs:[rax],ah
 100206d:	add    BYTE PTR [rbx+0x0],ah
 1002070:	outs   dx,DWORD PTR ds:[rsi]
 1002071:	add    BYTE PTR [rsi+0x0],ch
 1002074:	je     0x1002076
 1002076:	add    BYTE PTR gs:[rax+0x0],bh
 100207a:	je     0x100207c
 100207c:	and    BYTE PTR [rax],al
 100207e:	data16 add BYTE PTR [rdx+0x0],dh
 1002082:	outs   dx,DWORD PTR ds:[rsi]
 1002083:	add    BYTE PTR [rbp+0x0],ch
 1002086:	and    BYTE PTR [rax],al
 1002088:	je     0x100208a
 100208a:	(bad)  
 100208b:	add    BYTE PTR [rdx+0x0],dh
 100208e:	add    BYTE PTR [ebp+0x0],ah
 1002092:	je     0x1002094
 1002094:	and    BYTE PTR [rax],al
 1002096:	jo     0x1002098
 1002098:	jb     0x100209a
 100209a:	outs   dx,DWORD PTR ds:[rsi]
 100209b:	add    BYTE PTR [rbx+0x0],ah
 100209e:	add    BYTE PTR gs:[rbx+0x0],dh
 10020a2:	jae    0x10020a4
 10020a4:	and    BYTE PTR [rax],al
 10020a6:	(bad)  
 10020a7:	add    BYTE PTR [rax+rax*1+0x20],dh
 10020ab:	add    BYTE PTR [rip+0x7000],ah        # 0x10090b1
	...
 10020bd:	add    BYTE PTR [rax],al
 10020bf:	add    BYTE PTR [rbp+0x0],cl
 10020c2:	imul   eax,DWORD PTR [rax],0x6d0073
 10020c8:	(bad)  
 10020c9:	add    BYTE PTR [rax+rax*1+0x63],dh
 10020cd:	add    BYTE PTR [rax+0x0],ch
 10020d0:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 10020d5:	add    BYTE PTR [rax+rax*1+0x75],ah
 10020d9:	add    BYTE PTR [rbp+0x0],ch
 10020dc:	jo     0x10020de
 10020de:	imul   eax,DWORD PTR [rax],0x66006e
 10020e4:	outs   dx,DWORD PTR ds:[rsi]
 10020e5:	add    BYTE PTR [rax],ah
 10020e7:	add    BYTE PTR [rbx+0x0],ah
 10020ea:	push   0x63006500
 10020ef:	add    BYTE PTR [rbx+0x0],ch
 10020f2:	jae    0x10020f4
 10020f4:	jne    0x10020f6
 10020f6:	ins    DWORD PTR es:[rdi],dx
 10020f7:	add    BYTE PTR [rax],ah
 10020f9:	add    BYTE PTR [rip+0x63002000],ch        # 0x640040ff
 10020ff:	add    BYTE PTR [rdi+0x0],ch
 1002102:	ins    DWORD PTR es:[rdi],dx
 1002103:	add    BYTE PTR [rax+0x0],dh
 1002106:	jne    0x1002108
 1002108:	je     0x100210a
 100210a:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 100210f:	add    BYTE PTR [rip+0x20005800],ah        # 0x21007915
 1002115:	add    BYTE PTR [rip+0x65002000],ch        # 0x6600411b
 100211b:	add    BYTE PTR [rax+0x0],bh
 100211e:	jo     0x1002120
 1002120:	add    BYTE PTR gs:[rbx+0x0],ah
 1002124:	je     0x1002126
 1002126:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 100212b:	add    BYTE PTR [rip+0x5800],ah        # 0x1007931
	...
 100213d:	add    BYTE PTR [rax],al
 100213f:	add    BYTE PTR [rbp+0x0],dl
 1002142:	outs   dx,BYTE PTR ds:[rsi]
 1002143:	add    BYTE PTR [rcx+0x0],ah
 1002146:	(bad)  
 1002147:	add    BYTE PTR [rax+rax*1+0x65],ch
 100214b:	add    BYTE PTR [rax],ah
 100214d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1002151:	add    BYTE PTR [rax],ah
 1002153:	add    BYTE PTR [rdx+0x0],dh
 1002156:	add    BYTE PTR gs:[rcx+0x0],ah
 100215a:	add    BYTE PTR fs:[rax],ah
 100215d:	add    BYTE PTR [rdx+0x0],dh
 1002160:	add    BYTE PTR gs:[rbp+0x0],ch
 1002164:	outs   dx,DWORD PTR ds:[rsi]
 1002165:	add    BYTE PTR [rax+rax*1+0x65],dh
 1002169:	add    BYTE PTR [rax],ah
 100216b:	add    BYTE PTR [rax+rax*1+0x75],ah
 100216f:	add    BYTE PTR [rbp+0x0],ch
 1002172:	jo     0x1002174
 1002174:	and    BYTE PTR [rax],al
 1002176:	data16 add BYTE PTR [rdx+0x0],dh
 100217a:	outs   dx,DWORD PTR ds:[rsi]
 100217b:	add    BYTE PTR [rbp+0x0],ch
 100217e:	and    BYTE PTR [rax],al
 1002180:	je     0x1002182
 1002182:	(bad)  
 1002183:	add    BYTE PTR [rdx+0x0],dh
 1002186:	add    BYTE PTR [ebp+0x0],ah
 100218a:	je     0x100218c
 100218c:	and    BYTE PTR [rax],al
 100218e:	jo     0x1002190
 1002190:	jb     0x1002192
 1002192:	outs   dx,DWORD PTR ds:[rsi]
 1002193:	add    BYTE PTR [rbx+0x0],ah
 1002196:	add    BYTE PTR gs:[rbx+0x0],dh
 100219a:	jae    0x100219c
 100219c:	add    BYTE PTR [rax],al
 100219e:	add    BYTE PTR [rax],al
 10021a0:	push   rbp
 10021a1:	add    BYTE PTR [rsi+0x0],ch
 10021a4:	(bad)  
 10021a5:	add    BYTE PTR [rdx+0x0],ah
 10021a8:	ins    BYTE PTR es:[rdi],dx
 10021a9:	add    BYTE PTR [rbp+0x0],ah
 10021ac:	and    BYTE PTR [rax],al
 10021ae:	je     0x10021b0
 10021b0:	outs   dx,DWORD PTR ds:[rsi]
 10021b1:	add    BYTE PTR [rax],ah
 10021b3:	add    BYTE PTR [rcx+0x0],ah
 10021b6:	ins    BYTE PTR es:[rdi],dx
 10021b7:	add    BYTE PTR [rax+rax*1+0x6f],ch
 10021bb:	add    BYTE PTR [rbx+0x0],ah
 10021be:	(bad)  
 10021bf:	add    BYTE PTR [rax+rax*1+0x65],dh
 10021c3:	add    BYTE PTR [rax],ah
 10021c5:	add    BYTE PTR [rsi+0x0],ch
 10021c8:	jne    0x10021ca
 10021ca:	ins    DWORD PTR es:[rdi],dx
 10021cb:	add    BYTE PTR [rdx+0x0],ah
 10021ce:	add    BYTE PTR gs:[rdx+0x0],dh
 10021d2:	and    BYTE PTR [rax],al
 10021d4:	outs   dx,DWORD PTR ds:[rsi]
 10021d5:	add    BYTE PTR [rsi+0x0],ah
 10021d8:	and    BYTE PTR [rax],al
 10021da:	jb     0x10021dc
 10021dc:	add    BYTE PTR gs:[rbp+0x0],ch
 10021e0:	outs   dx,DWORD PTR ds:[rsi]
 10021e1:	add    BYTE PTR [rax+rax*1+0x65],dh
 10021e5:	add    BYTE PTR [rax],ah
 10021e7:	add    BYTE PTR [rsi+0x0],ch
 10021ea:	outs   dx,DWORD PTR ds:[rsi]
 10021eb:	add    BYTE PTR [rax+rax*1+0x65],ah
 10021ef:	add    BYTE PTR [rbx+0x0],dh
	...
 10021fe:	add    BYTE PTR [rax],al
 1002200:	rex.WRB add BYTE PTR [r9+0x0],r13b
 1002204:	jae    0x1002206
 1002206:	ins    DWORD PTR es:[rdi],dx
 1002207:	add    BYTE PTR [rcx+0x0],ah
 100220a:	je     0x100220c
 100220c:	movsxd eax,DWORD PTR [rax]
 100220e:	push   0x64006500
 1002213:	add    BYTE PTR [rax],ah
 1002215:	add    BYTE PTR [rdx+0x0],dh
 1002218:	add    BYTE PTR gs:[rbp+0x0],ch
 100221c:	outs   dx,DWORD PTR ds:[rsi]
 100221d:	add    BYTE PTR [rax+rax*1+0x65],dh
 1002221:	add    BYTE PTR [rax],ah
 1002223:	add    BYTE PTR [rax+rax*1+0x75],ah
 1002227:	add    BYTE PTR [rbp+0x0],ch
 100222a:	jo     0x100222c
 100222c:	and    BYTE PTR [rax],al
 100222e:	movsxd eax,DWORD PTR [rax]
 1002230:	push   0x63006500
 1002235:	add    BYTE PTR [rbx+0x0],ch
 1002238:	jae    0x100223a
 100223a:	jne    0x100223c
 100223c:	ins    DWORD PTR es:[rdi],dx
 100223d:	add    BYTE PTR [rax],ah
 100223f:	add    BYTE PTR [rip+0x63002000],ch        # 0x64004245
 1002245:	add    BYTE PTR [rdi+0x0],ch
 1002248:	ins    DWORD PTR es:[rdi],dx
 1002249:	add    BYTE PTR [rax+0x0],dh
 100224c:	jne    0x100224e
 100224e:	je     0x1002250
 1002250:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1002255:	add    BYTE PTR [rip+0x20005800],ah        # 0x21007a5b
 100225b:	add    BYTE PTR [rip+0x65002000],ch        # 0x66004261
 1002261:	add    BYTE PTR [rax+0x0],bh
 1002264:	jo     0x1002266
 1002266:	add    BYTE PTR gs:[rbx+0x0],ah
 100226a:	je     0x100226c
 100226c:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1002271:	add    BYTE PTR [rip+0x5800],ah        # 0x1007a77
	...
 100227f:	add    BYTE PTR [rbx+0x0],al
 1002282:	(bad)  
 1002283:	add    BYTE PTR [rsi+0x0],ch
 1002286:	outs   dx,BYTE PTR ds:[rsi]
 1002287:	add    BYTE PTR [rdi+0x0],ch
 100228a:	je     0x100228c
 100228c:	and    BYTE PTR [rax],al
 100228e:	imul   eax,DWORD PTR [rax],0x650064
 1002294:	outs   dx,BYTE PTR ds:[rsi]
 1002295:	add    BYTE PTR [rax+rax*1+0x69],dh
 1002299:	add    BYTE PTR [rsi+0x0],ah
 100229c:	jns    0x100229e
 100229e:	and    BYTE PTR [rax],al
 10022a0:	je     0x10022a2
 10022a2:	push   0x20006500
 10022a7:	add    BYTE PTR [rax+rax*1+0x78],dh
 10022ab:	add    BYTE PTR [rax+rax*1+0x20],dh
 10022af:	add    BYTE PTR [rsi+0x0],ah
 10022b2:	imul   eax,DWORD PTR [rax],0x65006c
 10022b8:	and    BYTE PTR [rax],al
 10022ba:	outs   dx,BYTE PTR ds:[rsi]
 10022bb:	add    BYTE PTR [rcx+0x0],ah
 10022be:	ins    DWORD PTR es:[rdi],dx
 10022bf:	add    BYTE PTR [rbp+0x0],ah
	...
 10022ce:	add    BYTE PTR [rax],al
 10022d0:	rex.XB add BYTE PTR [r9+0x0],spl
 10022d4:	outs   dx,BYTE PTR ds:[rsi]
 10022d5:	add    BYTE PTR [rsi+0x0],ch
 10022d8:	outs   dx,DWORD PTR ds:[rsi]
 10022d9:	add    BYTE PTR [rax+rax*1+0x20],dh
 10022dd:	add    BYTE PTR [rcx+0x0],ch
 10022e0:	add    BYTE PTR fs:[rbp+0x0],ah
 10022e4:	outs   dx,BYTE PTR ds:[rsi]
 10022e5:	add    BYTE PTR [rax+rax*1+0x69],dh
 10022e9:	add    BYTE PTR [rsi+0x0],ah
 10022ec:	jns    0x10022ee
 10022ee:	and    BYTE PTR [rax],al
 10022f0:	je     0x10022f2
 10022f2:	push   0x20006500
 10022f7:	add    BYTE PTR [rax+rax*1+0x75],ah
 10022fb:	add    BYTE PTR [rbp+0x0],ch
 10022fe:	jo     0x1002300
 1002300:	and    BYTE PTR [rax],al
 1002302:	add    BYTE PTR fs:[rcx+0x0],ch
 1002306:	jb     0x1002308
 1002308:	add    BYTE PTR gs:[rbx+0x0],ah
 100230c:	je     0x100230e
 100230e:	outs   dx,DWORD PTR ds:[rsi]
 100230f:	add    BYTE PTR [rdx+0x0],dh
 1002312:	jns    0x1002314
 1002314:	and    BYTE PTR [rax],al
 1002316:	outs   dx,BYTE PTR ds:[rsi]
 1002317:	add    BYTE PTR [rcx+0x0],ah
 100231a:	ins    DWORD PTR es:[rdi],dx
 100231b:	add    BYTE PTR [rbp+0x0],ah
 100231e:	add    BYTE PTR [rax],al
 1002320:	add    BYTE PTR [rbp+0x0],r14b
 1002324:	ins    DWORD PTR es:[rdi],dx
 1002325:	add    BYTE PTR [rax+0x0],dh
 1002328:	and    BYTE PTR [rax],al
 100232a:	outs   dx,DWORD PTR ds:[rsi]
 100232b:	add    BYTE PTR [rax+0x0],dh
 100232e:	add    BYTE PTR gs:[rdx+0x0],dh
 1002332:	(bad)  
 1002333:	add    BYTE PTR [rax+rax*1+0x69],dh
 1002337:	add    BYTE PTR [rdi+0x0],ch
 100233a:	outs   dx,BYTE PTR ds:[rsi]
 100233b:	add    BYTE PTR [rax],ah
 100233d:	add    BYTE PTR [rcx+0x0],ch
 1002340:	jae    0x1002342
 1002342:	and    BYTE PTR [rax],al
 1002344:	outs   dx,BYTE PTR ds:[rsi]
 1002345:	add    BYTE PTR [rdi+0x0],ch
 1002348:	je     0x100234a
 100234a:	and    BYTE PTR [rax],al
 100234c:	jb     0x100234e
 100234e:	add    BYTE PTR gs:[rcx+0x0],dh
 1002352:	jne    0x1002354
 1002354:	add    BYTE PTR gs:[rbx+0x0],dh
 1002358:	je     0x100235a
 100235a:	add    BYTE PTR gs:[rax+rax*1+0x0],ah
 100235f:	add    BYTE PTR [rax+rax*1+0x75],al
 1002363:	add    BYTE PTR [rbp+0x0],ch
 1002366:	jo     0x1002368
 1002368:	and    BYTE PTR [rax],al
 100236a:	ja     0x100236c
 100236c:	(bad)  
 100236d:	add    BYTE PTR [rbx+0x0],dh
 1002370:	and    BYTE PTR [rax],al
 1002372:	movsxd eax,DWORD PTR [rax]
 1002374:	outs   dx,DWORD PTR ds:[rsi]
 1002375:	add    BYTE PTR [rbp+0x0],ch
 1002378:	jo     0x100237a
 100237a:	ins    BYTE PTR es:[rdi],dx
 100237b:	add    BYTE PTR [rbp+0x0],ah
 100237e:	je     0x1002380
 1002380:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1002385:	add    BYTE PTR [rbp+0x0],dh
 1002388:	jae    0x100238a
 100238a:	imul   eax,DWORD PTR [rax],0x67006e
 1002390:	and    BYTE PTR [rax],al
 1002392:	imul   eax,DWORD PTR [rax],0x2d006e
 1002398:	jo     0x100239a
 100239a:	jb     0x100239c
 100239c:	outs   dx,DWORD PTR ds:[rsi]
 100239d:	add    BYTE PTR [rbx+0x0],ah
 10023a0:	and    BYTE PTR [rax],al
 10023a2:	(bad)  
 10023a3:	add    BYTE PTR [rbx+0x0],ah
 10023a6:	je     0x10023a8
 10023a8:	imul   eax,DWORD PTR [rax],0x610076
 10023ae:	je     0x10023b0
 10023b0:	imul   eax,DWORD PTR [rax],0x6e006f
	...
 10023be:	add    BYTE PTR [rax],al
 10023c0:	push   rbp
 10023c1:	add    BYTE PTR [rbx+0x0],dh
 10023c4:	(bad)  
 10023c5:	add    BYTE PTR [rdi+0x0],ah
 10023c8:	add    BYTE PTR gs:[rdx],bh
 10023cb:	add    BYTE PTR [rax],ah
 10023cd:	add    BYTE PTR [rip+0x73006c00],ah        # 0x74008fd3
 10023d3:	add    BYTE PTR [rax],ah
 10023d5:	add    BYTE PTR [rbx+0x0],bl
 10023d8:	push   rax
 10023d9:	add    BYTE PTR [rdx+0x0],dh
 10023dc:	outs   dx,DWORD PTR ds:[rsi]
 10023dd:	add    BYTE PTR [rbx+0x0],ah
 10023e0:	add    BYTE PTR gs:[rbx+0x0],dh
 10023e4:	jae    0x10023e6
 10023e6:	rex.WB add BYTE PTR [r8+rax*1+0x20],al
 10023eb:	add    BYTE PTR [rbx+0x0],bl
 10023ee:	push   rsp
 10023ef:	add    BYTE PTR [rax+0x0],ch
 10023f2:	jb     0x10023f4
 10023f4:	add    BYTE PTR gs:[rcx+0x0],ah
 10023f8:	add    BYTE PTR fs:[rcx+0x0],cl
 10023fc:	add    BYTE PTR fs:[rax],ah
 10023ff:	add    BYTE PTR [rbx+0x0],bl
 1002402:	add    BYTE PTR [rax+r8*1+0x61],r13b
 1002407:	add    BYTE PTR [rdi+0x0],ah
 100240a:	jae    0x100240c
 100240c:	pop    rbx
 100240d:	add    BYTE PTR [rdx],bh
 100240f:	add    BYTE PTR [rbp+0x0],cl
 1002412:	imul   eax,DWORD PTR [rax],0x69006e
 1002418:	add    BYTE PTR [rbp+0x0],r14b
 100241c:	ins    DWORD PTR es:[rdi],dx
 100241d:	add    BYTE PTR [rax+0x0],dh
 1002420:	add    BYTE PTR [rax+r8*1+0x61],r13b
 1002425:	add    BYTE PTR [rdi+0x0],ah
 1002428:	jae    0x100242a
 100242a:	pop    rbp
 100242b:	add    BYTE PTR [rax],ah
 100242d:	add    BYTE PTR [rbx+0x0],bl
 1002430:	push   rbx
 1002431:	add    BYTE PTR [rcx+0x0],dh
 1002434:	ins    BYTE PTR es:[rdi],dx
 1002435:	add    BYTE PTR [rcx+0x0],cl
 1002438:	outs   dx,BYTE PTR ds:[rsi]
 1002439:	add    BYTE PTR [rsi+0x0],ah
 100243c:	outs   dx,DWORD PTR ds:[rsi]
 100243d:	add    BYTE PTR [rax+0x0],dl
 1002440:	je     0x1002442
 1002442:	jb     0x1002444
 1002444:	and    BYTE PTR [rax],al
 1002446:	pop    rbx
 1002447:	add    BYTE PTR [rax+rax*1+0x75],al
 100244b:	add    BYTE PTR [rbp+0x0],ch
 100244e:	jo     0x1002450
 1002450:	add    BYTE PTR [rcx+0x0],r13b
 1002454:	jb     0x1002456
 1002456:	and    BYTE PTR [rax],al
 1002458:	pop    rbx
 1002459:	add    BYTE PTR [rbp+0x0],al
 100245c:	js     0x100245e
 100245e:	movsxd eax,DWORD PTR [rax]
 1002460:	add    BYTE PTR gs:[rax+0x0],dh
 1002464:	je     0x1002466
 1002466:	imul   eax,DWORD PTR [rax],0x6e006f
 100246c:	push   rdx
 100246d:	add    BYTE PTR [rbp+0x0],ah
 1002470:	movsxd eax,DWORD PTR [rax]
 1002472:	outs   dx,DWORD PTR ds:[rsi]
 1002473:	add    BYTE PTR [rdx+0x0],dh
 1002476:	add    BYTE PTR fs:[rax+0x0],dl
 100247a:	je     0x100247c
 100247c:	jb     0x100247e
 100247e:	and    BYTE PTR [rax],al
 1002480:	pop    rbx
 1002481:	add    BYTE PTR [rbx+0x0],al
 1002484:	outs   dx,DWORD PTR ds:[rsi]
 1002485:	add    BYTE PTR [rsi+0x0],ch
 1002488:	je     0x100248a
 100248a:	add    BYTE PTR gs:[rax+0x0],bh
 100248e:	je     0x1002490
 1002490:	push   rax
 1002491:	add    BYTE PTR [rax+rax*1+0x72],dh
 1002495:	add    BYTE PTR [rax],ah
 1002497:	add    BYTE PTR [rbx+0x0],bl
 100249a:	add    BYTE PTR [r8+0x0],r15b
 100249e:	je     0x10024a0
 10024a0:	jb     0x10024a2
 10024a2:	(bad)  
 10024a3:	add    BYTE PTR [rsi+0x0],al
 10024a6:	imul   eax,DWORD PTR [rax],0x65006c
 10024ac:	pop    rbp
 10024ad:	add    BYTE PTR [rbp+0x0],bl
 10024b0:	pop    rbp
 10024b1:	add    BYTE PTR [rbp+0x0],bl
 10024b4:	pop    rbp
 10024b5:	add    BYTE PTR [rbp+0x0],bl
 10024b8:	pop    rbp
 10024b9:	add    BYTE PTR [rbp+0x0],bl
 10024bc:	and    BYTE PTR [rax],al
 10024be:	pop    rbx
 10024bf:	add    BYTE PTR [rip+0x3c004900],ch        # 0x3d006dc5
 10024c5:	add    BYTE PTR [rcx+0x0],cl
 10024c8:	outs   dx,BYTE PTR ds:[rsi]
 10024c9:	add    BYTE PTR [rbx+0x0],dh
 10024cc:	je     0x10024ce
 10024ce:	(bad)  
 10024cf:	add    BYTE PTR [rsi+0x0],ch
 10024d2:	movsxd eax,DWORD PTR [rax]
 10024d4:	add    BYTE PTR gs:[rsi+0x0],cl
 10024d8:	(bad)  
 10024d9:	add    BYTE PTR [rbp+0x0],ch
 10024dc:	add    BYTE PTR gs:[rsi],bh
 10024df:	add    BYTE PTR [rbp+0x0],bl
 10024e2:	and    BYTE PTR [rax],al
 10024e4:	pop    rbx
 10024e5:	add    BYTE PTR [rip+0x3c005300],ch        # 0x3d0077eb
 10024eb:	add    BYTE PTR [rbx+0x0],dl
 10024ee:	add    BYTE PTR gs:[rdx+0x0],dh
 10024f2:	jbe    0x10024f4
 10024f4:	imul   eax,DWORD PTR [rax],0x650063
 10024fa:	rex.WRX add BYTE PTR [rcx+0x0],r12b
 10024fe:	ins    DWORD PTR es:[rdi],dx
 10024ff:	add    BYTE PTR [rbp+0x0],ah
 1002502:	add    BYTE PTR ds:[rbp+0x0],bl
 1002506:	pop    rbx
 1002507:	add    BYTE PTR [rip+0x65007200],ch        # 0x6600970d
 100250d:	add    BYTE PTR [rbp+0x0],ch
 1002510:	outs   dx,DWORD PTR ds:[rsi]
 1002511:	add    BYTE PTR [rax+rax*1+0x65],dh
 1002515:	add    BYTE PTR [rbx+0x0],dh
 1002518:	add    BYTE PTR gs:[rdx+0x0],dh
 100251c:	jbe    0x100251e
 100251e:	add    BYTE PTR gs:[rdx+0x0],dh
 1002522:	jae    0x1002524
 1002524:	cmp    al,BYTE PTR [rax]
 1002526:	pop    rbx
 1002527:	add    BYTE PTR [rax+0x0],dh
 100252a:	jb     0x100252c
 100252c:	imul   eax,DWORD PTR [rax],0x74006e
 1002532:	jl     0x1002534
 1002534:	add    BYTE PTR fs:[rbp+0x0],dh
 1002538:	ins    DWORD PTR es:[rdi],dx
 1002539:	add    BYTE PTR [rax+0x0],dh
 100253c:	jl     0x100253e
 100253e:	data16 add BYTE PTR [rdx+0x0],dh
 1002542:	add    BYTE PTR gs:[rbp+0x0],ah
 1002546:	jp     0x1002548
 1002548:	add    BYTE PTR gs:[rax+rax*1+0x72],bh
 100254d:	add    BYTE PTR [rbp+0x0],ah
 1002550:	jae    0x1002552
 1002552:	jne    0x1002554
 1002554:	ins    DWORD PTR es:[rdi],dx
 1002555:	add    BYTE PTR [rbp+0x0],ah
 1002558:	jl     0x100255a
 100255a:	jb     0x100255c
 100255c:	add    BYTE PTR gs:[rbp+0x0],ch
 1002560:	outs   dx,DWORD PTR ds:[rsi]
 1002561:	add    BYTE PTR [rax+rax*1+0x65],dh
 1002565:	add    BYTE PTR [rdx],bh
 1002567:	add    BYTE PTR [rdi+0x0],ah
 100256a:	jne    0x100256c
 100256c:	imul   eax,DWORD PTR [rax],0x5c0064
 1002572:	add    BYTE PTR fs:[rbp+0x0],dh
 1002576:	ins    DWORD PTR es:[rdi],dx
 1002577:	add    BYTE PTR [rax+0x0],dh
 100257a:	outs   dx,DWORD PTR ds:[rsi]
 100257b:	add    BYTE PTR [rdx+0x0],dh
 100257e:	imul   eax,DWORD PTR [rax],0x690067
 1002584:	outs   dx,BYTE PTR ds:[rsi]
 1002585:	add    BYTE PTR [rax+rax*1+0x73],bl
 1002589:	add    BYTE PTR [rcx+0x0],ch
 100258c:	add    BYTE PTR [esi+0x0],ch
 1002590:	(bad)  
 1002591:	add    BYTE PTR [rax+rax*1+0x75],dh
 1002595:	add    BYTE PTR [rdx+0x0],dh
 1002598:	add    BYTE PTR gs:[rax+rax*1+0x6c],bl
 100259d:	add    BYTE PTR [rdi+0x0],ch
 10025a0:	movsxd eax,DWORD PTR [rax]
 10025a2:	(bad)  
 10025a3:	add    BYTE PTR [rax+rax*1+0x49],ch
 10025a7:	add    BYTE PTR [rax+rax*1+0x5c],ah
 10025ab:	add    BYTE PTR [rax+0x0],dh
 10025ae:	outs   dx,DWORD PTR ds:[rsi]
 10025af:	add    BYTE PTR [rdx+0x0],dh
 10025b2:	je     0x10025b4
 10025b4:	pop    rsp
 10025b5:	add    BYTE PTR [rdi+0x0],ch
 10025b8:	jo     0x10025ba
 10025ba:	add    BYTE PTR gs:[rdx+0x0],dh
 10025be:	(bad)  
 10025bf:	add    BYTE PTR [rax+rax*1+0x69],dh
 10025c3:	add    BYTE PTR [rdi+0x0],ch
 10025c6:	outs   dx,BYTE PTR ds:[rsi]
 10025c7:	add    BYTE PTR [rax+rax*1+0x79],dl
 10025cb:	add    BYTE PTR [rax+0x0],dh
 10025ce:	add    BYTE PTR gs:[rbp+0x0],bl
 10025d2:	pop    rbp
 10025d3:	add    BYTE PTR [rdx],cl
 10025d5:	add    BYTE PTR [rax],al
 10025d7:	add    BYTE PTR [rax],ah
 10025d9:	add    BYTE PTR [rax],ah
 10025db:	add    BYTE PTR [rsi+0x0],al
 10025de:	ins    BYTE PTR es:[rdi],dx
 10025df:	add    BYTE PTR [rcx+0x0],ah
 10025e2:	add    BYTE PTR [ebx+0x0],dh
 10025e6:	cmp    al,BYTE PTR [rax]
 10025e8:	or     al,BYTE PTR [rax]
 10025ea:	add    BYTE PTR [rax],al
 10025ec:	add    BYTE PTR [rax],al
 10025ee:	add    BYTE PTR [rax],al
 10025f0:	and    BYTE PTR [rax],al
 10025f2:	and    BYTE PTR [rax],al
 10025f4:	and    BYTE PTR [rax],al
 10025f6:	and    BYTE PTR [rax],al
 10025f8:	add    BYTE PTR fs:[rdx+0x0],ah
 10025fc:	add    BYTE PTR [edx+0x0],ah
 1002600:	jb     0x1002602
 1002602:	add    BYTE PTR gs:[rcx+0x0],ah
 1002606:	imul   eax,DWORD PTR [rax],0x20
 1002609:	add    BYTE PTR [rax],ah
 100260b:	add    BYTE PTR [rax],ah
 100260d:	add    BYTE PTR [rax],ah
 100260f:	add    BYTE PTR [rax],ah
 1002611:	add    BYTE PTR [rax],ah
 1002613:	add    BYTE PTR [rax],ah
 1002615:	add    BYTE PTR [rax],ah
 1002617:	add    BYTE PTR [rax],ah
 1002619:	add    BYTE PTR [rax],ah
 100261b:	add    BYTE PTR [rax],ah
 100261d:	add    BYTE PTR [rax],ah
 100261f:	add    BYTE PTR [rax],ah
 1002621:	add    BYTE PTR [rax],ah
 1002623:	add    BYTE PTR [rax],ah
 1002625:	add    BYTE PTR [rax],ah
 1002627:	add    BYTE PTR [rax],ah
 1002629:	add    BYTE PTR [rax],ah
 100262b:	add    BYTE PTR [rax],ah
 100262d:	add    BYTE PTR [rax],ah
 100262f:	add    BYTE PTR [rax],ah
 1002631:	add    BYTE PTR [rax],ah
 1002633:	add    BYTE PTR [rax],ah
 1002635:	add    BYTE PTR [rax],ah
 1002637:	add    BYTE PTR [rax],ah
 1002639:	add    BYTE PTR [rip+0x30002000],bh        # 0x3100463f
 100263f:	add    BYTE PTR [rax+0x0],bh
 1002642:	xor    BYTE PTR [rax],al
 1002644:	xor    BYTE PTR [rax],al
 1002646:	xor    BYTE PTR [rax],al
 1002648:	xor    DWORD PTR [rax],eax
 100264a:	or     al,BYTE PTR [rax]
 100264c:	add    BYTE PTR [rax],al
 100264e:	add    BYTE PTR [rax],al
 1002650:	and    BYTE PTR [rax],al
 1002652:	and    BYTE PTR [rax],al
 1002654:	and    BYTE PTR [rax],al
 1002656:	and    BYTE PTR [rax],al
 1002658:	outs   dx,BYTE PTR ds:[rsi]
 1002659:	add    BYTE PTR [rdi+0x0],ch
 100265c:	ins    DWORD PTR es:[rdi],dx
 100265d:	add    BYTE PTR [rcx+0x0],ch
 1002660:	outs   dx,BYTE PTR ds:[rsi]
 1002661:	add    BYTE PTR [rcx+0x0],ch
 1002664:	add    BYTE PTR fs:[rbp+0x0],dh
 1002668:	ins    DWORD PTR es:[rdi],dx
 1002669:	add    BYTE PTR [rax+0x0],dh
 100266c:	and    BYTE PTR [rax],al
 100266e:	and    BYTE PTR [rax],al
 1002670:	and    BYTE PTR [rax],al
 1002672:	and    BYTE PTR [rax],al
 1002674:	and    BYTE PTR [rax],al
 1002676:	and    BYTE PTR [rax],al
 1002678:	and    BYTE PTR [rax],al
 100267a:	and    BYTE PTR [rax],al
 100267c:	and    BYTE PTR [rax],al
 100267e:	and    BYTE PTR [rax],al
 1002680:	and    BYTE PTR [rax],al
 1002682:	and    BYTE PTR [rax],al
 1002684:	and    BYTE PTR [rax],al
 1002686:	and    BYTE PTR [rax],al
 1002688:	and    BYTE PTR [rax],al
 100268a:	and    BYTE PTR [rax],al
 100268c:	and    BYTE PTR [rax],al
 100268e:	and    BYTE PTR [rax],al
 1002690:	and    BYTE PTR [rax],al
 1002692:	and    BYTE PTR [rax],al
 1002694:	and    BYTE PTR [rax],al
 1002696:	and    BYTE PTR [rax],al
 1002698:	and    BYTE PTR [rax],al
 100269a:	cmp    eax,0x30002000
 100269f:	add    BYTE PTR [rax+0x0],bh
 10026a2:	xor    BYTE PTR [rax],al
 10026a4:	xor    BYTE PTR [rax],al
 10026a6:	xor    BYTE PTR [rax],al
 10026a8:	xor    al,BYTE PTR [rax]
 10026aa:	or     al,BYTE PTR [rax]
 10026ac:	add    BYTE PTR [rax],al
 10026ae:	add    BYTE PTR [rax],al
 10026b0:	and    BYTE PTR [rax],al
 10026b2:	and    BYTE PTR [rax],al
 10026b4:	and    BYTE PTR [rax],al
 10026b6:	and    BYTE PTR [rax],al
 10026b8:	jbe    0x10026ba
 10026ba:	(bad)  
 10026bb:	add    BYTE PTR [rax+rax*1+0x69],ch
 10026bf:	add    BYTE PTR [rax+rax*1+0x61],ah
 10026c3:	add    BYTE PTR [rax+rax*1+0x65],dh
 10026c7:	add    BYTE PTR [rdi+0x0],bl
 10026ca:	imul   eax,DWORD PTR [rax],0x61006d
 10026d0:	add    BYTE PTR [ebp+0x0],ah
 10026d4:	and    BYTE PTR [rax],al
 10026d6:	and    BYTE PTR [rax],al
 10026d8:	and    BYTE PTR [rax],al
 10026da:	and    BYTE PTR [rax],al
 10026dc:	and    BYTE PTR [rax],al
 10026de:	and    BYTE PTR [rax],al
 10026e0:	and    BYTE PTR [rax],al
 10026e2:	and    BYTE PTR [rax],al
 10026e4:	and    BYTE PTR [rax],al
 10026e6:	and    BYTE PTR [rax],al
 10026e8:	and    BYTE PTR [rax],al
 10026ea:	and    BYTE PTR [rax],al
 10026ec:	and    BYTE PTR [rax],al
 10026ee:	and    BYTE PTR [rax],al
 10026f0:	and    BYTE PTR [rax],al
 10026f2:	and    BYTE PTR [rax],al
 10026f4:	and    BYTE PTR [rax],al
 10026f6:	and    BYTE PTR [rax],al
 10026f8:	and    BYTE PTR [rax],al
 10026fa:	cmp    eax,0x30002000
 10026ff:	add    BYTE PTR [rax+0x0],bh
 1002702:	xor    BYTE PTR [rax],al
 1002704:	xor    BYTE PTR [rax],al
 1002706:	xor    BYTE PTR [rax],al
 1002708:	xor    al,0x0
 100270a:	or     al,BYTE PTR [rax]
 100270c:	add    BYTE PTR [rax],al
 100270e:	add    BYTE PTR [rax],al
 1002710:	and    BYTE PTR [rax],al
 1002712:	and    BYTE PTR [rax],al
 1002714:	and    BYTE PTR [rax],al
 1002716:	and    BYTE PTR [rax],al
 1002718:	jb     0x100271a
 100271a:	add    BYTE PTR gs:[rsi+0x0],ah
 100271e:	add    BYTE PTR gs:[rdx+0x0],dh
 1002722:	add    BYTE PTR gs:[rsi+0x0],ch
 1002726:	movsxd eax,DWORD PTR [rax]
 1002728:	add    BYTE PTR gs:[rax+rax*1+0x5f],ah
 100272d:	add    BYTE PTR [rbp+0x0],ch
 1002730:	add    BYTE PTR gs:[rbp+0x0],ch
 1002734:	outs   dx,DWORD PTR ds:[rsi]
 1002735:	add    BYTE PTR [rdx+0x0],dh
 1002738:	jns    0x100273a
 100273a:	and    BYTE PTR [rax],al
 100273c:	and    BYTE PTR [rax],al
 100273e:	and    BYTE PTR [rax],al
 1002740:	and    BYTE PTR [rax],al
 1002742:	and    BYTE PTR [rax],al
 1002744:	and    BYTE PTR [rax],al
 1002746:	and    BYTE PTR [rax],al
 1002748:	and    BYTE PTR [rax],al
 100274a:	and    BYTE PTR [rax],al
 100274c:	and    BYTE PTR [rax],al
 100274e:	and    BYTE PTR [rax],al
 1002750:	and    BYTE PTR [rax],al
 1002752:	and    BYTE PTR [rax],al
 1002754:	and    BYTE PTR [rax],al
 1002756:	and    BYTE PTR [rax],al
 1002758:	and    BYTE PTR [rax],al
 100275a:	cmp    eax,0x30002000
 100275f:	add    BYTE PTR [rax+0x0],bh
 1002762:	xor    BYTE PTR [rax],al
 1002764:	xor    BYTE PTR [rax],al
 1002766:	xor    BYTE PTR [rax],al
 1002768:	cmp    BYTE PTR [rax],al
 100276a:	or     al,BYTE PTR [rax]
 100276c:	add    BYTE PTR [rax],al
 100276e:	add    BYTE PTR [rax],al
 1002770:	and    BYTE PTR [rax],al
 1002772:	and    BYTE PTR [rax],al
 1002774:	and    BYTE PTR [rax],al
 1002776:	and    BYTE PTR [rax],al
 1002778:	(bad)  
 1002779:	add    BYTE PTR [rax+rax*1+0x6c],ch
 100277d:	add    BYTE PTR [rdi+0x0],bl
 1002780:	ins    DWORD PTR es:[rdi],dx
 1002781:	add    BYTE PTR [rbp+0x0],ah
 1002784:	ins    DWORD PTR es:[rdi],dx
 1002785:	add    BYTE PTR [rdi+0x0],ch
 1002788:	jb     0x100278a
 100278a:	jns    0x100278c
 100278c:	and    BYTE PTR [rax],al
 100278e:	and    BYTE PTR [rax],al
 1002790:	and    BYTE PTR [rax],al
 1002792:	and    BYTE PTR [rax],al
 1002794:	and    BYTE PTR [rax],al
 1002796:	and    BYTE PTR [rax],al
 1002798:	and    BYTE PTR [rax],al
 100279a:	and    BYTE PTR [rax],al
 100279c:	and    BYTE PTR [rax],al
 100279e:	and    BYTE PTR [rax],al
 10027a0:	and    BYTE PTR [rax],al
 10027a2:	and    BYTE PTR [rax],al
 10027a4:	and    BYTE PTR [rax],al
 10027a6:	and    BYTE PTR [rax],al
 10027a8:	and    BYTE PTR [rax],al
 10027aa:	and    BYTE PTR [rax],al
 10027ac:	and    BYTE PTR [rax],al
 10027ae:	and    BYTE PTR [rax],al
 10027b0:	and    BYTE PTR [rax],al
 10027b2:	and    BYTE PTR [rax],al
 10027b4:	and    BYTE PTR [rax],al
 10027b6:	and    BYTE PTR [rax],al
 10027b8:	and    BYTE PTR [rax],al
 10027ba:	cmp    eax,0x30002000
 10027bf:	add    BYTE PTR [rax+0x0],bh
 10027c2:	xor    BYTE PTR [rax],al
 10027c4:	xor    BYTE PTR [rax],al
 10027c6:	xor    DWORD PTR [rax],eax
 10027c8:	xor    BYTE PTR [rax],al
 10027ca:	or     al,BYTE PTR [rax]
 10027cc:	add    BYTE PTR [rax],al
 10027ce:	add    BYTE PTR [rax],al
 10027d0:	and    BYTE PTR [rax],al
 10027d2:	and    BYTE PTR [rax],al
 10027d4:	and    BYTE PTR [rax],al
 10027d6:	and    BYTE PTR [rax],al
 10027d8:	add    BYTE PTR fs:[rbp+0x0],dh
 10027dc:	ins    DWORD PTR es:[rdi],dx
 10027dd:	add    BYTE PTR [rax+0x0],dh
 10027e0:	pop    rdi
 10027e1:	add    BYTE PTR [rcx+0x0],ah
 10027e4:	ins    BYTE PTR es:[rdi],dx
 10027e5:	add    BYTE PTR [rax+rax*1+0x5f],ch
 10027e9:	add    BYTE PTR [rax+rax*1+0x68],dh
 10027ed:	add    BYTE PTR [rdx+0x0],dh
 10027f0:	add    BYTE PTR gs:[rcx+0x0],ah
 10027f4:	add    BYTE PTR fs:[rbx+0x0],dh
 10027f8:	and    BYTE PTR [rax],al
 10027fa:	and    BYTE PTR [rax],al
 10027fc:	and    BYTE PTR [rax],al
 10027fe:	and    BYTE PTR [rax],al
 1002800:	and    BYTE PTR [rax],al
 1002802:	and    BYTE PTR [rax],al
 1002804:	and    BYTE PTR [rax],al
 1002806:	and    BYTE PTR [rax],al
 1002808:	and    BYTE PTR [rax],al
 100280a:	and    BYTE PTR [rax],al
 100280c:	and    BYTE PTR [rax],al
 100280e:	and    BYTE PTR [rax],al
 1002810:	and    BYTE PTR [rax],al
 1002812:	and    BYTE PTR [rax],al
 1002814:	and    BYTE PTR [rax],al
 1002816:	and    BYTE PTR [rax],al
 1002818:	and    BYTE PTR [rax],al
 100281a:	cmp    eax,0x30002000
 100281f:	add    BYTE PTR [rax+0x0],bh
 1002822:	xor    BYTE PTR [rax],al
 1002824:	xor    BYTE PTR [rax],al
 1002826:	xor    al,BYTE PTR [rax]
 1002828:	xor    BYTE PTR [rax],al
 100282a:	or     al,BYTE PTR [rax]
 100282c:	add    BYTE PTR [rax],al
 100282e:	add    BYTE PTR [rax],al
 1002830:	and    BYTE PTR [rax],al
 1002832:	and    BYTE PTR [rax],al
 1002834:	and    BYTE PTR [rax],al
 1002836:	and    BYTE PTR [rax],al
 1002838:	ins    DWORD PTR es:[rdi],dx
 1002839:	add    BYTE PTR [rcx+0x0],ah
 100283c:	je     0x100283e
 100283e:	movsxd eax,DWORD PTR [rax]
 1002840:	push   0x66005f00
 1002845:	add    BYTE PTR [rcx+0x0],ch
 1002848:	ins    BYTE PTR es:[rdi],dx
 1002849:	add    BYTE PTR [rbp+0x0],ah
 100284c:	pop    rdi
 100284d:	add    BYTE PTR [rsi+0x0],ch
 1002850:	(bad)  
 1002851:	add    BYTE PTR [rbp+0x0],ch
 1002854:	add    BYTE PTR gs:[rax],ah
 1002857:	add    BYTE PTR [rax],ah
 1002859:	add    BYTE PTR [rax],ah
 100285b:	add    BYTE PTR [rax],ah
 100285d:	add    BYTE PTR [rax],ah
 100285f:	add    BYTE PTR [rax],ah
 1002861:	add    BYTE PTR [rax],ah
 1002863:	add    BYTE PTR [rax],ah
 1002865:	add    BYTE PTR [rax],ah
 1002867:	add    BYTE PTR [rax],ah
 1002869:	add    BYTE PTR [rax],ah
 100286b:	add    BYTE PTR [rax],ah
 100286d:	add    BYTE PTR [rax],ah
 100286f:	add    BYTE PTR [rax],ah
 1002871:	add    BYTE PTR [rax],ah
 1002873:	add    BYTE PTR [rax],ah
 1002875:	add    BYTE PTR [rax],ah
 1002877:	add    BYTE PTR [rax],ah
 1002879:	add    BYTE PTR [rip+0x30002000],bh        # 0x3100487f
 100287f:	add    BYTE PTR [rax+0x0],bh
 1002882:	xor    BYTE PTR [rax],al
 1002884:	xor    BYTE PTR [rax],al
 1002886:	xor    al,0x0
 1002888:	xor    BYTE PTR [rax],al
 100288a:	or     al,BYTE PTR [rax]
 100288c:	add    BYTE PTR [rax],al
 100288e:	add    BYTE PTR [rax],al
 1002890:	and    BYTE PTR [rax],al
 1002892:	and    BYTE PTR [rax],al
 1002894:	and    BYTE PTR [rax],al
 1002896:	and    BYTE PTR [rax],al
 1002898:	outs   dx,BYTE PTR ds:[rsi]
 1002899:	add    BYTE PTR [rdi+0x0],ch
 100289c:	pop    rdi
 100289d:	add    BYTE PTR [rax+rax*1+0x6f],ch
 10028a1:	add    BYTE PTR [rsi+0x0],ch
 10028a4:	add    BYTE PTR [ebp+0x0],ah
 10028a8:	jb     0x10028aa
 10028aa:	pop    rdi
 10028ab:	add    BYTE PTR [rbp+0x0],dh
 10028ae:	jae    0x10028b0
 10028b0:	add    BYTE PTR gs:[rax+rax*1+0x5f],ah
 10028b5:	add    BYTE PTR [rsi+0x0],ah
 10028b8:	ins    BYTE PTR es:[rdi],dx
 10028b9:	add    BYTE PTR [rcx+0x0],ah
 10028bc:	add    BYTE PTR [eax],ah
 10028bf:	add    BYTE PTR [rax],ah
 10028c1:	add    BYTE PTR [rax],ah
 10028c3:	add    BYTE PTR [rax],ah
 10028c5:	add    BYTE PTR [rax],ah
 10028c7:	add    BYTE PTR [rax],ah
 10028c9:	add    BYTE PTR [rax],ah
 10028cb:	add    BYTE PTR [rax],ah
 10028cd:	add    BYTE PTR [rax],ah
 10028cf:	add    BYTE PTR [rax],ah
 10028d1:	add    BYTE PTR [rax],ah
 10028d3:	add    BYTE PTR [rax],ah
 10028d5:	add    BYTE PTR [rax],ah
 10028d7:	add    BYTE PTR [rax],ah
 10028d9:	add    BYTE PTR [rip+0x30002000],bh        # 0x310048df
 10028df:	add    BYTE PTR [rax+0x0],bh
 10028e2:	xor    BYTE PTR [rax],al
 10028e4:	xor    BYTE PTR [rax],al
 10028e6:	cmp    BYTE PTR [rax],al
 10028e8:	xor    BYTE PTR [rax],al
 10028ea:	or     al,BYTE PTR [rax]
 10028ec:	add    BYTE PTR [rax],al
 10028ee:	add    BYTE PTR [rax],al
 10028f0:	and    BYTE PTR [rax],al
 10028f2:	and    BYTE PTR [rax],al
 10028f4:	and    BYTE PTR [rax],al
 10028f6:	and    BYTE PTR [rax],al
 10028f8:	jbe    0x10028fa
 10028fa:	add    BYTE PTR gs:[rdx+0x0],dh
 10028fe:	(bad)  
 10028ff:	add    BYTE PTR [rdi+0x0],ch
 1002902:	jae    0x1002904
 1002904:	add    BYTE PTR gs:[rax],ah
 1002907:	add    BYTE PTR [rax],ah
 1002909:	add    BYTE PTR [rax],ah
 100290b:	add    BYTE PTR [rax],ah
 100290d:	add    BYTE PTR [rax],ah
 100290f:	add    BYTE PTR [rax],ah
 1002911:	add    BYTE PTR [rax],ah
 1002913:	add    BYTE PTR [rax],ah
 1002915:	add    BYTE PTR [rax],ah
 1002917:	add    BYTE PTR [rax],ah
 1002919:	add    BYTE PTR [rax],ah
 100291b:	add    BYTE PTR [rax],ah
 100291d:	add    BYTE PTR [rax],ah
 100291f:	add    BYTE PTR [rax],ah
 1002921:	add    BYTE PTR [rax],ah
 1002923:	add    BYTE PTR [rax],ah
 1002925:	add    BYTE PTR [rax],ah
 1002927:	add    BYTE PTR [rax],ah
 1002929:	add    BYTE PTR [rax],ah
 100292b:	add    BYTE PTR [rax],ah
 100292d:	add    BYTE PTR [rax],ah
 100292f:	add    BYTE PTR [rax],ah
 1002931:	add    BYTE PTR [rax],ah
 1002933:	add    BYTE PTR [rax],ah
 1002935:	add    BYTE PTR [rax],ah
 1002937:	add    BYTE PTR [rax],ah
 1002939:	add    BYTE PTR [rip+0x30002000],bh        # 0x3100493f
 100293f:	add    BYTE PTR [rax+0x0],bh
 1002942:	xor    BYTE PTR [rax],al
 1002944:	xor    DWORD PTR [rax],eax
 1002946:	xor    BYTE PTR [rax],al
 1002948:	xor    BYTE PTR [rax],al
 100294a:	or     al,BYTE PTR [rax]
 100294c:	add    BYTE PTR [rax],al
 100294e:	add    BYTE PTR [rax],al
 1002950:	and    BYTE PTR [rax],al
 1002952:	and    BYTE PTR [rax],al
 1002954:	and    BYTE PTR [rax],al
 1002956:	and    BYTE PTR [rax],al
 1002958:	ja     0x100295a
 100295a:	(bad)  
 100295b:	add    BYTE PTR [rcx+0x0],ch
 100295e:	je     0x1002960
 1002960:	pop    rdi
 1002961:	add    BYTE PTR [rcx+0x0],ah
 1002964:	je     0x1002966
 1002966:	pop    rdi
 1002967:	add    BYTE PTR [rbp+0x0],ah
 100296a:	js     0x100296c
 100296c:	imul   eax,DWORD PTR [rax],0x200074
 1002972:	and    BYTE PTR [rax],al
 1002974:	and    BYTE PTR [rax],al
 1002976:	and    BYTE PTR [rax],al
 1002978:	and    BYTE PTR [rax],al
 100297a:	and    BYTE PTR [rax],al
 100297c:	and    BYTE PTR [rax],al
 100297e:	and    BYTE PTR [rax],al
 1002980:	and    BYTE PTR [rax],al
 1002982:	and    BYTE PTR [rax],al
 1002984:	and    BYTE PTR [rax],al
 1002986:	and    BYTE PTR [rax],al
 1002988:	and    BYTE PTR [rax],al
 100298a:	and    BYTE PTR [rax],al
 100298c:	and    BYTE PTR [rax],al
 100298e:	and    BYTE PTR [rax],al
 1002990:	and    BYTE PTR [rax],al
 1002992:	and    BYTE PTR [rax],al
 1002994:	and    BYTE PTR [rax],al
 1002996:	and    BYTE PTR [rax],al
 1002998:	and    BYTE PTR [rax],al
 100299a:	cmp    eax,0x30002000
 100299f:	add    BYTE PTR [rax+0x0],bh
 10029a2:	xor    BYTE PTR [rax],al
 10029a4:	xor    al,BYTE PTR [rax]
 10029a6:	xor    BYTE PTR [rax],al
 10029a8:	xor    BYTE PTR [rax],al
 10029aa:	or     al,BYTE PTR [rax]
 10029ac:	add    BYTE PTR [rax],al
 10029ae:	add    BYTE PTR [rax],al
 10029b0:	and    BYTE PTR [rax],al
 10029b2:	and    BYTE PTR [rax],al
 10029b4:	and    BYTE PTR [rax],al
 10029b6:	and    BYTE PTR [rax],al
 10029b8:	jae    0x10029ba
 10029ba:	add    BYTE PTR gs:[rsi+0x0],ch
 10029be:	add    BYTE PTR fs:[rdi+0x0],bl
 10029c2:	je     0x10029c4
 10029c4:	outs   dx,DWORD PTR ds:[rsi]
 10029c5:	add    BYTE PTR [rdi+0x0],bl
 10029c8:	ja     0x10029ca
 10029ca:	(bad)  
 10029cb:	add    BYTE PTR [rax+rax*1+0x73],dh
 10029cf:	add    BYTE PTR [rdi+0x0],ch
 10029d2:	outs   dx,BYTE PTR ds:[rsi]
 10029d3:	add    BYTE PTR [rax],ah
 10029d5:	add    BYTE PTR [rax],ah
 10029d7:	add    BYTE PTR [rax],ah
 10029d9:	add    BYTE PTR [rax],ah
 10029db:	add    BYTE PTR [rax],ah
 10029dd:	add    BYTE PTR [rax],ah
 10029df:	add    BYTE PTR [rax],ah
 10029e1:	add    BYTE PTR [rax],ah
 10029e3:	add    BYTE PTR [rax],ah
 10029e5:	add    BYTE PTR [rax],ah
 10029e7:	add    BYTE PTR [rax],ah
 10029e9:	add    BYTE PTR [rax],ah
 10029eb:	add    BYTE PTR [rax],ah
 10029ed:	add    BYTE PTR [rax],ah
 10029ef:	add    BYTE PTR [rax],ah
 10029f1:	add    BYTE PTR [rax],ah
 10029f3:	add    BYTE PTR [rax],ah
 10029f5:	add    BYTE PTR [rax],ah
 10029f7:	add    BYTE PTR [rax],ah
 10029f9:	add    BYTE PTR [rip+0x30002000],bh        # 0x310049ff
 10029ff:	add    BYTE PTR [rax+0x0],bh
 1002a02:	xor    BYTE PTR [rax],al
 1002a04:	xor    al,0x0
 1002a06:	xor    BYTE PTR [rax],al
 1002a08:	xor    BYTE PTR [rax],al
 1002a0a:	or     al,BYTE PTR [rax]
 1002a0c:	add    BYTE PTR [rax],al
 1002a0e:	add    BYTE PTR [rax],al
 1002a10:	and    BYTE PTR [rax],al
 1002a12:	and    BYTE PTR [rax],al
 1002a14:	and    BYTE PTR [rax],al
 1002a16:	and    BYTE PTR [rax],al
 1002a18:	add    BYTE PTR fs:[rbp+0x0],ah
 1002a1c:	data16 add BYTE PTR [rcx+0x0],ah
 1002a20:	jne    0x1002a22
 1002a22:	ins    BYTE PTR es:[rdi],dx
 1002a23:	add    BYTE PTR [rax+rax*1+0x66],dh
 1002a27:	add    BYTE PTR [rax+rax*1+0x61],ch
 1002a2b:	add    BYTE PTR [rdi+0x0],ah
 1002a2e:	jae    0x1002a30
 1002a30:	and    BYTE PTR [rax],al
 1002a32:	and    BYTE PTR [rax],al
 1002a34:	and    BYTE PTR [rax],al
 1002a36:	and    BYTE PTR [rax],al
 1002a38:	and    BYTE PTR [rax],al
 1002a3a:	and    BYTE PTR [rax],al
 1002a3c:	and    BYTE PTR [rax],al
 1002a3e:	and    BYTE PTR [rax],al
 1002a40:	and    BYTE PTR [rax],al
 1002a42:	and    BYTE PTR [rax],al
 1002a44:	and    BYTE PTR [rax],al
 1002a46:	and    BYTE PTR [rax],al
 1002a48:	and    BYTE PTR [rax],al
 1002a4a:	and    BYTE PTR [rax],al
 1002a4c:	and    BYTE PTR [rax],al
 1002a4e:	and    BYTE PTR [rax],al
 1002a50:	and    BYTE PTR [rax],al
 1002a52:	and    BYTE PTR [rax],al
 1002a54:	and    BYTE PTR [rax],al
 1002a56:	and    BYTE PTR [rax],al
 1002a58:	and    BYTE PTR [rax],al
 1002a5a:	cmp    eax,0x30002000
 1002a5f:	add    BYTE PTR [rax+0x0],bh
 1002a62:	xor    BYTE PTR [rax],al
 1002a64:	cmp    BYTE PTR [rax],al
 1002a66:	xor    BYTE PTR [rax],al
 1002a68:	xor    BYTE PTR [rax],al
 1002a6a:	or     al,BYTE PTR [rax]
 1002a6c:	add    BYTE PTR [rax],al
 1002a6e:	add    BYTE PTR [rax],al
 1002a70:	and    BYTE PTR [rax],al
 1002a72:	and    BYTE PTR [rax],al
 1002a74:	and    BYTE PTR [rax],al
 1002a76:	and    BYTE PTR [rax],al
 1002a78:	ins    DWORD PTR es:[rdi],dx
 1002a79:	add    BYTE PTR [rcx+0x0],ah
 1002a7c:	js     0x1002a7e
 1002a7e:	imul   eax,DWORD PTR [rax],0x75006d
 1002a84:	ins    DWORD PTR es:[rdi],dx
 1002a85:	add    BYTE PTR [rax+rax*1+0x75],ah
 1002a89:	add    BYTE PTR [rbp+0x0],ch
 1002a8c:	jo     0x1002a8e
 1002a8e:	and    BYTE PTR [rax],al
 1002a90:	and    BYTE PTR [rax],al
 1002a92:	and    BYTE PTR [rax],al
 1002a94:	and    BYTE PTR [rax],al
 1002a96:	and    BYTE PTR [rax],al
 1002a98:	and    BYTE PTR [rax],al
 1002a9a:	and    BYTE PTR [rax],al
 1002a9c:	and    BYTE PTR [rax],al
 1002a9e:	and    BYTE PTR [rax],al
 1002aa0:	and    BYTE PTR [rax],al
 1002aa2:	and    BYTE PTR [rax],al
 1002aa4:	and    BYTE PTR [rax],al
 1002aa6:	and    BYTE PTR [rax],al
 1002aa8:	and    BYTE PTR [rax],al
 1002aaa:	and    BYTE PTR [rax],al
 1002aac:	and    BYTE PTR [rax],al
 1002aae:	and    BYTE PTR [rax],al
 1002ab0:	and    BYTE PTR [rax],al
 1002ab2:	and    BYTE PTR [rax],al
 1002ab4:	and    BYTE PTR [rax],al
 1002ab6:	and    BYTE PTR [rax],al
 1002ab8:	and    BYTE PTR [rax],al
 1002aba:	cmp    eax,0x30002000
 1002abf:	add    BYTE PTR [rax+0x0],bh
 1002ac2:	xor    DWORD PTR [rax],eax
 1002ac4:	xor    BYTE PTR [rax],al
 1002ac6:	xor    BYTE PTR [rax],al
 1002ac8:	xor    BYTE PTR [rax],al
 1002aca:	or     al,BYTE PTR [rax]
 1002acc:	add    BYTE PTR [rax],al
 1002ace:	add    BYTE PTR [rax],al
 1002ad0:	and    BYTE PTR [rax],al
 1002ad2:	and    BYTE PTR [rax],al
 1002ad4:	and    BYTE PTR [rax],al
 1002ad6:	and    BYTE PTR [rax],al
 1002ad8:	ins    DWORD PTR es:[rdi],dx
 1002ad9:	add    BYTE PTR [rcx+0x0],ch
 1002adc:	outs   dx,BYTE PTR ds:[rsi]
 1002add:	add    BYTE PTR [rcx+0x0],ch
 1002ae0:	pop    rdi
 1002ae1:	add    BYTE PTR [rcx+0x0],ah
 1002ae4:	outs   dx,BYTE PTR ds:[rsi]
 1002ae5:	add    BYTE PTR [rax+rax*1+0x5f],ah
 1002ae9:	add    BYTE PTR [rbp+0x0],ch
 1002aec:	(bad)  
 1002aed:	add    BYTE PTR [rax+0x0],bh
 1002af0:	add    BYTE PTR fs:[rbp+0x0],dh
 1002af4:	ins    DWORD PTR es:[rdi],dx
 1002af5:	add    BYTE PTR [rax+0x0],dh
 1002af8:	and    BYTE PTR [rax],al
 1002afa:	and    BYTE PTR [rax],al
 1002afc:	and    BYTE PTR [rax],al
 1002afe:	and    BYTE PTR [rax],al
 1002b00:	and    BYTE PTR [rax],al
 1002b02:	and    BYTE PTR [rax],al
 1002b04:	and    BYTE PTR [rax],al
 1002b06:	and    BYTE PTR [rax],al
 1002b08:	and    BYTE PTR [rax],al
 1002b0a:	and    BYTE PTR [rax],al
 1002b0c:	and    BYTE PTR [rax],al
 1002b0e:	and    BYTE PTR [rax],al
 1002b10:	and    BYTE PTR [rax],al
 1002b12:	and    BYTE PTR [rax],al
 1002b14:	and    BYTE PTR [rax],al
 1002b16:	and    BYTE PTR [rax],al
 1002b18:	and    BYTE PTR [rax],al
 1002b1a:	cmp    eax,0x30002000
 1002b1f:	add    BYTE PTR [rax+0x0],bh
 1002b22:	xor    al,BYTE PTR [rax]
 1002b24:	xor    BYTE PTR [rax],al
 1002b26:	xor    BYTE PTR [rax],al
 1002b28:	xor    BYTE PTR [rax],al
 1002b2a:	or     al,BYTE PTR [rax]
 1002b2c:	add    BYTE PTR [rax],al
 1002b2e:	add    BYTE PTR [rax],al
 1002b30:	and    BYTE PTR [rax],al
 1002b32:	and    BYTE PTR [rax],al
 1002b34:	and    BYTE PTR [rax],al
 1002b36:	and    BYTE PTR [rax],al
 1002b38:	data16 add BYTE PTR [rdi+0x0],ch
 1002b3c:	jb     0x1002b3e
 1002b3e:	movsxd eax,DWORD PTR [rax]
 1002b40:	add    BYTE PTR gs:[rdi+0x0],bl
 1002b44:	jae    0x1002b46
 1002b46:	add    BYTE PTR gs:[rsi+0x0],ch
 1002b4a:	add    BYTE PTR fs:[rdi+0x0],bl
 1002b4e:	je     0x1002b50
 1002b50:	outs   dx,DWORD PTR ds:[rsi]
 1002b51:	add    BYTE PTR [rdi+0x0],bl
 1002b54:	ja     0x1002b56
 1002b56:	(bad)  
 1002b57:	add    BYTE PTR [rax+rax*1+0x73],dh
 1002b5b:	add    BYTE PTR [rdi+0x0],ch
 1002b5e:	outs   dx,BYTE PTR ds:[rsi]
 1002b5f:	add    BYTE PTR [rax],ah
 1002b61:	add    BYTE PTR [rax],ah
 1002b63:	add    BYTE PTR [rax],ah
 1002b65:	add    BYTE PTR [rax],ah
 1002b67:	add    BYTE PTR [rax],ah
 1002b69:	add    BYTE PTR [rax],ah
 1002b6b:	add    BYTE PTR [rax],ah
 1002b6d:	add    BYTE PTR [rax],ah
 1002b6f:	add    BYTE PTR [rax],ah
 1002b71:	add    BYTE PTR [rax],ah
 1002b73:	add    BYTE PTR [rax],ah
 1002b75:	add    BYTE PTR [rax],ah
 1002b77:	add    BYTE PTR [rax],ah
 1002b79:	add    BYTE PTR [rip+0x30002000],bh        # 0x31004b7f
 1002b7f:	add    BYTE PTR [rax+0x0],bh
 1002b82:	xor    al,0x0
 1002b84:	xor    BYTE PTR [rax],al
 1002b86:	xor    BYTE PTR [rax],al
 1002b88:	xor    BYTE PTR [rax],al
 1002b8a:	or     al,BYTE PTR [rax]
 1002b8c:	add    BYTE PTR [rax],al
 1002b8e:	add    BYTE PTR [rax],al
 1002b90:	and    BYTE PTR [rax],al
 1002b92:	and    BYTE PTR [rax],al
 1002b94:	and    BYTE PTR [rax],al
 1002b96:	and    BYTE PTR [rax],al
 1002b98:	data16 add BYTE PTR [rbp+0x0],dh
 1002b9c:	ins    BYTE PTR es:[rdi],dx
 1002b9d:	add    BYTE PTR [rax+rax*1+0x5f],ch
 1002ba1:	add    BYTE PTR [rsi+0x0],ah
 1002ba4:	imul   eax,DWORD PTR [rax],0x74006c
 1002baa:	add    BYTE PTR gs:[rdx+0x0],dh
 1002bae:	add    BYTE PTR gs:[rax+rax*1+0x5f],ah
 1002bb3:	add    BYTE PTR [rax+rax*1+0x75],ah
 1002bb7:	add    BYTE PTR [rbp+0x0],ch
 1002bba:	jo     0x1002bbc
 1002bbc:	and    BYTE PTR [rax],al
 1002bbe:	and    BYTE PTR [rax],al
 1002bc0:	and    BYTE PTR [rax],al
 1002bc2:	and    BYTE PTR [rax],al
 1002bc4:	and    BYTE PTR [rax],al
 1002bc6:	and    BYTE PTR [rax],al
 1002bc8:	and    BYTE PTR [rax],al
 1002bca:	and    BYTE PTR [rax],al
 1002bcc:	and    BYTE PTR [rax],al
 1002bce:	and    BYTE PTR [rax],al
 1002bd0:	and    BYTE PTR [rax],al
 1002bd2:	and    BYTE PTR [rax],al
 1002bd4:	and    BYTE PTR [rax],al
 1002bd6:	and    BYTE PTR [rax],al
 1002bd8:	and    BYTE PTR [rax],al
 1002bda:	cmp    eax,0x30002000
 1002bdf:	add    BYTE PTR [rax+0x0],bh
 1002be2:	cmp    BYTE PTR [rax],al
 1002be4:	xor    BYTE PTR [rax],al
 1002be6:	xor    BYTE PTR [rax],al
 1002be8:	xor    BYTE PTR [rax],al
 1002bea:	or     al,BYTE PTR [rax]
 1002bec:	add    BYTE PTR [rax],al
 1002bee:	add    BYTE PTR [rax],al
 1002bf0:	and    BYTE PTR [rax],al
 1002bf2:	and    BYTE PTR [rax],al
 1002bf4:	and    BYTE PTR [rax],al
 1002bf6:	and    BYTE PTR [rax],al
 1002bf8:	outs   dx,BYTE PTR ds:[rsi]
 1002bf9:	add    BYTE PTR [rdi+0x0],ch
 1002bfc:	pop    rdi
 1002bfd:	add    BYTE PTR [rcx+0x0],ah
 1002c00:	jne    0x1002c02
 1002c02:	je     0x1002c04
 1002c04:	outs   dx,DWORD PTR ds:[rsi]
 1002c05:	add    BYTE PTR [rdi+0x0],bl
 1002c08:	jb     0x1002c0a
 1002c0a:	add    BYTE PTR gs:[rbp+0x0],ch
 1002c0e:	outs   dx,DWORD PTR ds:[rsi]
 1002c0f:	add    BYTE PTR [rax+rax*1+0x65],dh
 1002c13:	add    BYTE PTR [rdi+0x0],bl
 1002c16:	add    BYTE PTR fs:[rbp+0x0],dh
 1002c1a:	ins    DWORD PTR es:[rdi],dx
 1002c1b:	add    BYTE PTR [rax+0x0],dh
 1002c1e:	pop    rdi
 1002c1f:	add    BYTE PTR [rcx+0x0],ch
 1002c22:	outs   dx,BYTE PTR ds:[rsi]
 1002c23:	add    BYTE PTR [rsi+0x0],dh
 1002c26:	outs   dx,DWORD PTR ds:[rsi]
 1002c27:	add    BYTE PTR [rbx+0x0],ah
 1002c2a:	(bad)  
 1002c2b:	add    BYTE PTR [rax+rax*1+0x69],dh
 1002c2f:	add    BYTE PTR [rdi+0x0],ch
 1002c32:	outs   dx,BYTE PTR ds:[rsi]
 1002c33:	add    BYTE PTR [rax],ah
 1002c35:	add    BYTE PTR [rax],ah
 1002c37:	add    BYTE PTR [rax],ah
 1002c39:	add    BYTE PTR [rip+0x30002000],bh        # 0x31004c3f
 1002c3f:	add    BYTE PTR [rax+0x0],bh
 1002c42:	xor    al,0x0
 1002c44:	xor    BYTE PTR [rax],al
 1002c46:	xor    BYTE PTR [rax],al
 1002c48:	xor    BYTE PTR [rax],al
 1002c4a:	xor    BYTE PTR [rax],al
 1002c4c:	or     al,BYTE PTR [rax]
 1002c4e:	add    BYTE PTR [rax],al
 1002c50:	or     al,BYTE PTR [rax]
 1002c52:	add    BYTE PTR [rax],al
 1002c54:	add    BYTE PTR [rax],al
 1002c56:	add    BYTE PTR [rax],al
 1002c58:	and    BYTE PTR [rax],al
 1002c5a:	and    BYTE PTR [rax],al
 1002c5c:	rex.WRB add BYTE PTR [r9+0x0],r13b
 1002c60:	outs   dx,BYTE PTR ds:[rsi]
 1002c61:	add    BYTE PTR [rcx+0x0],ch
 1002c64:	add    BYTE PTR [rbp+0x0],r14b
 1002c68:	ins    DWORD PTR es:[rdi],dx
 1002c69:	add    BYTE PTR [rax+0x0],dh
 1002c6c:	add    BYTE PTR [rax+r8*1+0x61],r13b
 1002c71:	add    BYTE PTR [rdi+0x0],ah
 1002c74:	jae    0x1002c76
 1002c76:	cmp    al,BYTE PTR [rax]
 1002c78:	or     al,BYTE PTR [rax]
 1002c7a:	add    BYTE PTR [rax],al
 1002c7c:	add    BYTE PTR [rax],al
 1002c7e:	add    BYTE PTR [rax],al
 1002c80:	and    BYTE PTR [rax],al
 1002c82:	and    BYTE PTR [rax],al
 1002c84:	and    BYTE PTR [rax],al
 1002c86:	and    BYTE PTR [rax],al
 1002c88:	rex.WRX add BYTE PTR [rdi+0x0],r13b
 1002c8c:	jb     0x1002c8e
 1002c8e:	ins    DWORD PTR es:[rdi],dx
 1002c8f:	add    BYTE PTR [rcx+0x0],ah
 1002c92:	ins    BYTE PTR es:[rdi],dx
 1002c93:	add    BYTE PTR [rax],ah
 1002c95:	add    BYTE PTR [rax],ah
 1002c97:	add    BYTE PTR [rax],ah
 1002c99:	add    BYTE PTR [rax],ah
 1002c9b:	add    BYTE PTR [rax],ah
 1002c9d:	add    BYTE PTR [rax],ah
 1002c9f:	add    BYTE PTR [rax],ah
 1002ca1:	add    BYTE PTR [rax],ah
 1002ca3:	add    BYTE PTR [rax],ah
 1002ca5:	add    BYTE PTR [rax],ah
 1002ca7:	add    BYTE PTR [rax],ah
 1002ca9:	add    BYTE PTR [rax],ah
 1002cab:	add    BYTE PTR [rax],ah
 1002cad:	add    BYTE PTR [rax],ah
 1002caf:	add    BYTE PTR [rax],ah
 1002cb1:	add    BYTE PTR [rax],ah
 1002cb3:	add    BYTE PTR [rax],ah
 1002cb5:	add    BYTE PTR [rax],ah
 1002cb7:	add    BYTE PTR [rax],ah
 1002cb9:	add    BYTE PTR [rax],ah
 1002cbb:	add    BYTE PTR [rax],ah
 1002cbd:	add    BYTE PTR [rax],ah
 1002cbf:	add    BYTE PTR [rax],ah
 1002cc1:	add    BYTE PTR [rax],ah
 1002cc3:	add    BYTE PTR [rax],ah
 1002cc5:	add    BYTE PTR [rax],ah
 1002cc7:	add    BYTE PTR [rax],ah
 1002cc9:	add    BYTE PTR [rip+0x30002000],bh        # 0x31004ccf
 1002ccf:	add    BYTE PTR [rax+0x0],bh
 1002cd2:	xor    BYTE PTR [rax],al
 1002cd4:	xor    BYTE PTR [rax],al
 1002cd6:	xor    BYTE PTR [rax],al
 1002cd8:	xor    BYTE PTR [rax],al
 1002cda:	or     al,BYTE PTR [rax]
 1002cdc:	add    BYTE PTR [rax],al
 1002cde:	add    BYTE PTR [rax],al
 1002ce0:	and    BYTE PTR [rax],al
 1002ce2:	and    BYTE PTR [rax],al
 1002ce4:	and    BYTE PTR [rax],al
 1002ce6:	and    BYTE PTR [rax],al
 1002ce8:	push   rdi
 1002ce9:	add    BYTE PTR [rcx+0x0],ch
 1002cec:	je     0x1002cee
 1002cee:	push   0x61004400
 1002cf3:	add    BYTE PTR [rax+rax*1+0x61],dh
 1002cf7:	add    BYTE PTR [rbx+0x0],dl
 1002cfa:	add    BYTE PTR gs:[rdi+0x0],ah
 1002cfe:	jae    0x1002d00
 1002d00:	and    BYTE PTR [rax],al
 1002d02:	and    BYTE PTR [rax],al
 1002d04:	and    BYTE PTR [rax],al
 1002d06:	and    BYTE PTR [rax],al
 1002d08:	and    BYTE PTR [rax],al
 1002d0a:	and    BYTE PTR [rax],al
 1002d0c:	and    BYTE PTR [rax],al
 1002d0e:	and    BYTE PTR [rax],al
 1002d10:	and    BYTE PTR [rax],al
 1002d12:	and    BYTE PTR [rax],al
 1002d14:	and    BYTE PTR [rax],al
 1002d16:	and    BYTE PTR [rax],al
 1002d18:	and    BYTE PTR [rax],al
 1002d1a:	and    BYTE PTR [rax],al
 1002d1c:	and    BYTE PTR [rax],al
 1002d1e:	and    BYTE PTR [rax],al
 1002d20:	and    BYTE PTR [rax],al
 1002d22:	and    BYTE PTR [rax],al
 1002d24:	and    BYTE PTR [rax],al
 1002d26:	and    BYTE PTR [rax],al
 1002d28:	and    BYTE PTR [rax],al
 1002d2a:	cmp    eax,0x30002000
 1002d2f:	add    BYTE PTR [rax+0x0],bh
 1002d32:	xor    BYTE PTR [rax],al
 1002d34:	xor    BYTE PTR [rax],al
 1002d36:	xor    BYTE PTR [rax],al
 1002d38:	xor    DWORD PTR [rax],eax
 1002d3a:	or     al,BYTE PTR [rax]
 1002d3c:	add    BYTE PTR [rax],al
 1002d3e:	add    BYTE PTR [rax],al
 1002d40:	and    BYTE PTR [rax],al
 1002d42:	and    BYTE PTR [rax],al
 1002d44:	and    BYTE PTR [rax],al
 1002d46:	and    BYTE PTR [rax],al
 1002d48:	push   rdi
 1002d49:	add    BYTE PTR [rcx+0x0],ch
 1002d4c:	je     0x1002d4e
 1002d4e:	push   0x75004600
 1002d53:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1002d57:	add    BYTE PTR [rbp+0x0],cl
 1002d5a:	add    BYTE PTR gs:[rbp+0x0],ch
 1002d5e:	outs   dx,DWORD PTR ds:[rsi]
 1002d5f:	add    BYTE PTR [rdx+0x0],dh
 1002d62:	jns    0x1002d64
 1002d64:	and    BYTE PTR [rax],al
 1002d66:	and    BYTE PTR [rax],al
 1002d68:	and    BYTE PTR [rax],al
 1002d6a:	and    BYTE PTR [rax],al
 1002d6c:	and    BYTE PTR [rax],al
 1002d6e:	and    BYTE PTR [rax],al
 1002d70:	and    BYTE PTR [rax],al
 1002d72:	and    BYTE PTR [rax],al
 1002d74:	and    BYTE PTR [rax],al
 1002d76:	and    BYTE PTR [rax],al
 1002d78:	and    BYTE PTR [rax],al
 1002d7a:	and    BYTE PTR [rax],al
 1002d7c:	and    BYTE PTR [rax],al
 1002d7e:	and    BYTE PTR [rax],al
 1002d80:	and    BYTE PTR [rax],al
 1002d82:	and    BYTE PTR [rax],al
 1002d84:	and    BYTE PTR [rax],al
 1002d86:	and    BYTE PTR [rax],al
 1002d88:	and    BYTE PTR [rax],al
 1002d8a:	cmp    eax,0x30002000
 1002d8f:	add    BYTE PTR [rax+0x0],bh
 1002d92:	xor    BYTE PTR [rax],al
 1002d94:	xor    BYTE PTR [rax],al
 1002d96:	xor    BYTE PTR [rax],al
 1002d98:	xor    al,BYTE PTR [rax]
 1002d9a:	or     al,BYTE PTR [rax]
 1002d9c:	add    BYTE PTR [rax],al
 1002d9e:	add    BYTE PTR [rax],al
 1002da0:	and    BYTE PTR [rax],al
 1002da2:	and    BYTE PTR [rax],al
 1002da4:	and    BYTE PTR [rax],al
 1002da6:	and    BYTE PTR [rax],al
 1002da8:	push   rdi
 1002da9:	add    BYTE PTR [rcx+0x0],ch
 1002dac:	je     0x1002dae
 1002dae:	push   0x61004800
 1002db3:	add    BYTE PTR [rsi+0x0],ch
 1002db6:	add    BYTE PTR fs:[rax+rax*1+0x65],ch
 1002dbb:	add    BYTE PTR [rax+rax*1+0x61],al
 1002dbf:	add    BYTE PTR [rax+rax*1+0x61],dh
 1002dc3:	add    BYTE PTR [rax],ah
 1002dc5:	add    BYTE PTR [rax],ah
 1002dc7:	add    BYTE PTR [rax],ah
 1002dc9:	add    BYTE PTR [rax],ah
 1002dcb:	add    BYTE PTR [rax],ah
 1002dcd:	add    BYTE PTR [rax],ah
 1002dcf:	add    BYTE PTR [rax],ah
 1002dd1:	add    BYTE PTR [rax],ah
 1002dd3:	add    BYTE PTR [rax],ah
 1002dd5:	add    BYTE PTR [rax],ah
 1002dd7:	add    BYTE PTR [rax],ah
 1002dd9:	add    BYTE PTR [rax],ah
 1002ddb:	add    BYTE PTR [rax],ah
 1002ddd:	add    BYTE PTR [rax],ah
 1002ddf:	add    BYTE PTR [rax],ah
 1002de1:	add    BYTE PTR [rax],ah
 1002de3:	add    BYTE PTR [rax],ah
 1002de5:	add    BYTE PTR [rax],ah
 1002de7:	add    BYTE PTR [rax],ah
 1002de9:	add    BYTE PTR [rip+0x30002000],bh        # 0x31004def
 1002def:	add    BYTE PTR [rax+0x0],bh
 1002df2:	xor    BYTE PTR [rax],al
 1002df4:	xor    BYTE PTR [rax],al
 1002df6:	xor    BYTE PTR [rax],al
 1002df8:	xor    al,0x0
 1002dfa:	or     al,BYTE PTR [rax]
 1002dfc:	add    BYTE PTR [rax],al
 1002dfe:	add    BYTE PTR [rax],al
 1002e00:	and    BYTE PTR [rax],al
 1002e02:	and    BYTE PTR [rax],al
 1002e04:	and    BYTE PTR [rax],al
 1002e06:	and    BYTE PTR [rax],al
 1002e08:	rex.RX add BYTE PTR [rcx+0x0],r13b
 1002e0c:	ins    BYTE PTR es:[rdi],dx
 1002e0d:	add    BYTE PTR [rax+rax*1+0x65],dh
 1002e11:	add    BYTE PTR [rdx+0x0],dh
 1002e14:	rex.WRB add BYTE PTR [r13+0x0],r12b
 1002e18:	ins    DWORD PTR es:[rdi],dx
 1002e19:	add    BYTE PTR [rdi+0x0],ch
 1002e1c:	jb     0x1002e1e
 1002e1e:	jns    0x1002e20
 1002e20:	and    BYTE PTR [rax],al
 1002e22:	and    BYTE PTR [rax],al
 1002e24:	and    BYTE PTR [rax],al
 1002e26:	and    BYTE PTR [rax],al
 1002e28:	and    BYTE PTR [rax],al
 1002e2a:	and    BYTE PTR [rax],al
 1002e2c:	and    BYTE PTR [rax],al
 1002e2e:	and    BYTE PTR [rax],al
 1002e30:	and    BYTE PTR [rax],al
 1002e32:	and    BYTE PTR [rax],al
 1002e34:	and    BYTE PTR [rax],al
 1002e36:	and    BYTE PTR [rax],al
 1002e38:	and    BYTE PTR [rax],al
 1002e3a:	and    BYTE PTR [rax],al
 1002e3c:	and    BYTE PTR [rax],al
 1002e3e:	and    BYTE PTR [rax],al
 1002e40:	and    BYTE PTR [rax],al
 1002e42:	and    BYTE PTR [rax],al
 1002e44:	and    BYTE PTR [rax],al
 1002e46:	and    BYTE PTR [rax],al
 1002e48:	and    BYTE PTR [rax],al
 1002e4a:	cmp    eax,0x30002000
 1002e4f:	add    BYTE PTR [rax+0x0],bh
 1002e52:	xor    BYTE PTR [rax],al
 1002e54:	xor    BYTE PTR [rax],al
 1002e56:	xor    BYTE PTR [rax],al
 1002e58:	cmp    BYTE PTR [rax],al
 1002e5a:	or     al,BYTE PTR [rax]
 1002e5c:	add    BYTE PTR [rax],al
 1002e5e:	add    BYTE PTR [rax],al
 1002e60:	and    BYTE PTR [rax],al
 1002e62:	and    BYTE PTR [rax],al
 1002e64:	and    BYTE PTR [rax],al
 1002e66:	and    BYTE PTR [rax],al
 1002e68:	push   rbx
 1002e69:	add    BYTE PTR [rbx+0x0],ah
 1002e6c:	(bad)  
 1002e6d:	add    BYTE PTR [rsi+0x0],ch
 1002e70:	rex.WRB add BYTE PTR [r13+0x0],r12b
 1002e74:	ins    DWORD PTR es:[rdi],dx
 1002e75:	add    BYTE PTR [rdi+0x0],ch
 1002e78:	jb     0x1002e7a
 1002e7a:	jns    0x1002e7c
 1002e7c:	and    BYTE PTR [rax],al
 1002e7e:	and    BYTE PTR [rax],al
 1002e80:	and    BYTE PTR [rax],al
 1002e82:	and    BYTE PTR [rax],al
 1002e84:	and    BYTE PTR [rax],al
 1002e86:	and    BYTE PTR [rax],al
 1002e88:	and    BYTE PTR [rax],al
 1002e8a:	and    BYTE PTR [rax],al
 1002e8c:	and    BYTE PTR [rax],al
 1002e8e:	and    BYTE PTR [rax],al
 1002e90:	and    BYTE PTR [rax],al
 1002e92:	and    BYTE PTR [rax],al
 1002e94:	and    BYTE PTR [rax],al
 1002e96:	and    BYTE PTR [rax],al
 1002e98:	and    BYTE PTR [rax],al
 1002e9a:	and    BYTE PTR [rax],al
 1002e9c:	and    BYTE PTR [rax],al
 1002e9e:	and    BYTE PTR [rax],al
 1002ea0:	and    BYTE PTR [rax],al
 1002ea2:	and    BYTE PTR [rax],al
 1002ea4:	and    BYTE PTR [rax],al
 1002ea6:	and    BYTE PTR [rax],al
 1002ea8:	and    BYTE PTR [rax],al
 1002eaa:	cmp    eax,0x30002000
 1002eaf:	add    BYTE PTR [rax+0x0],bh
 1002eb2:	xor    BYTE PTR [rax],al
 1002eb4:	xor    BYTE PTR [rax],al
 1002eb6:	xor    DWORD PTR [rax],eax
 1002eb8:	xor    BYTE PTR [rax],al
 1002eba:	or     al,BYTE PTR [rax]
 1002ebc:	add    BYTE PTR [rax],al
 1002ebe:	add    BYTE PTR [rax],al
 1002ec0:	and    BYTE PTR [rax],al
 1002ec2:	and    BYTE PTR [rax],al
 1002ec4:	and    BYTE PTR [rax],al
 1002ec6:	and    BYTE PTR [rax],al
 1002ec8:	push   rdi
 1002ec9:	add    BYTE PTR [rcx+0x0],ch
 1002ecc:	je     0x1002ece
 1002ece:	push   0x6e005500
 1002ed3:	add    BYTE PTR [rax+rax*1+0x6f],ch
 1002ed7:	add    BYTE PTR [rcx+0x0],ah
 1002eda:	add    BYTE PTR fs:[rbp+0x0],ah
 1002ede:	add    BYTE PTR fs:[rbp+0x0],cl
 1002ee2:	outs   dx,DWORD PTR ds:[rsi]
 1002ee3:	add    BYTE PTR [rax+rax*1+0x75],ah
 1002ee7:	add    BYTE PTR [rax+rax*1+0x65],ch
 1002eeb:	add    BYTE PTR [rbx+0x0],dh
 1002eee:	and    BYTE PTR [rax],al
 1002ef0:	and    BYTE PTR [rax],al
 1002ef2:	and    BYTE PTR [rax],al
 1002ef4:	and    BYTE PTR [rax],al
 1002ef6:	and    BYTE PTR [rax],al
 1002ef8:	and    BYTE PTR [rax],al
 1002efa:	and    BYTE PTR [rax],al
 1002efc:	and    BYTE PTR [rax],al
 1002efe:	and    BYTE PTR [rax],al
 1002f00:	and    BYTE PTR [rax],al
 1002f02:	and    BYTE PTR [rax],al
 1002f04:	and    BYTE PTR [rax],al
 1002f06:	and    BYTE PTR [rax],al
 1002f08:	and    BYTE PTR [rax],al
 1002f0a:	cmp    eax,0x30002000
 1002f0f:	add    BYTE PTR [rax+0x0],bh
 1002f12:	xor    BYTE PTR [rax],al
 1002f14:	xor    BYTE PTR [rax],al
 1002f16:	xor    al,BYTE PTR [rax]
 1002f18:	xor    BYTE PTR [rax],al
 1002f1a:	or     al,BYTE PTR [rax]
 1002f1c:	add    BYTE PTR [rax],al
 1002f1e:	add    BYTE PTR [rax],al
 1002f20:	and    BYTE PTR [rax],al
 1002f22:	and    BYTE PTR [rax],al
 1002f24:	and    BYTE PTR [rax],al
 1002f26:	and    BYTE PTR [rax],al
 1002f28:	push   rdi
 1002f29:	add    BYTE PTR [rcx+0x0],ch
 1002f2c:	je     0x1002f2e
 1002f2e:	push   0x6e004900
 1002f33:	add    BYTE PTR [rax+rax*1+0x69],ah
 1002f37:	add    BYTE PTR [rdx+0x0],dh
 1002f3a:	add    BYTE PTR gs:[rbx+0x0],ah
 1002f3e:	je     0x1002f40
 1002f40:	ins    BYTE PTR es:[rdi],dx
 1002f41:	add    BYTE PTR [rcx+0x0],bh
 1002f44:	push   rdx
 1002f45:	add    BYTE PTR [rbp+0x0],ah
 1002f48:	data16 add BYTE PTR [rbp+0x0],ah
 1002f4c:	jb     0x1002f4e
 1002f4e:	add    BYTE PTR gs:[rsi+0x0],ch
 1002f52:	movsxd eax,DWORD PTR [rax]
 1002f54:	add    BYTE PTR gs:[rax+rax*1+0x4d],ah
 1002f59:	add    BYTE PTR [rbp+0x0],ah
 1002f5c:	ins    DWORD PTR es:[rdi],dx
 1002f5d:	add    BYTE PTR [rdi+0x0],ch
 1002f60:	jb     0x1002f62
 1002f62:	jns    0x1002f64
 1002f64:	and    BYTE PTR [rax],al
 1002f66:	and    BYTE PTR [rax],al
 1002f68:	and    BYTE PTR [rax],al
 1002f6a:	cmp    eax,0x30002000
 1002f6f:	add    BYTE PTR [rax+0x0],bh
 1002f72:	xor    BYTE PTR [rax],al
 1002f74:	xor    BYTE PTR [rax],al
 1002f76:	xor    al,0x0
 1002f78:	xor    BYTE PTR [rax],al
 1002f7a:	or     al,BYTE PTR [rax]
 1002f7c:	add    BYTE PTR [rax],al
 1002f7e:	add    BYTE PTR [rax],al
 1002f80:	and    BYTE PTR [rax],al
 1002f82:	and    BYTE PTR [rax],al
 1002f84:	and    BYTE PTR [rax],al
 1002f86:	and    BYTE PTR [rax],al
 1002f88:	rex.RX add BYTE PTR [rcx+0x0],r13b
 1002f8c:	ins    BYTE PTR es:[rdi],dx
 1002f8d:	add    BYTE PTR [rax+rax*1+0x65],dh
 1002f91:	add    BYTE PTR [rdx+0x0],dh
 1002f94:	rex.WRB add BYTE PTR [r15+0x0],r13b
 1002f98:	add    BYTE PTR fs:[rbp+0x0],dh
 1002f9c:	ins    BYTE PTR es:[rdi],dx
 1002f9d:	add    BYTE PTR [rbp+0x0],ah
 1002fa0:	push   rax
 1002fa1:	add    BYTE PTR [rcx+0x0],ah
 1002fa4:	je     0x1002fa6
 1002fa6:	push   0x20007300
 1002fab:	add    BYTE PTR [rax],ah
 1002fad:	add    BYTE PTR [rax],ah
 1002faf:	add    BYTE PTR [rax],ah
 1002fb1:	add    BYTE PTR [rax],ah
 1002fb3:	add    BYTE PTR [rax],ah
 1002fb5:	add    BYTE PTR [rax],ah
 1002fb7:	add    BYTE PTR [rax],ah
 1002fb9:	add    BYTE PTR [rax],ah
 1002fbb:	add    BYTE PTR [rax],ah
 1002fbd:	add    BYTE PTR [rax],ah
 1002fbf:	add    BYTE PTR [rax],ah
 1002fc1:	add    BYTE PTR [rax],ah
 1002fc3:	add    BYTE PTR [rax],ah
 1002fc5:	add    BYTE PTR [rax],ah
 1002fc7:	add    BYTE PTR [rax],ah
 1002fc9:	add    BYTE PTR [rip+0x30002000],bh        # 0x31004fcf
 1002fcf:	add    BYTE PTR [rax+0x0],bh
 1002fd2:	xor    BYTE PTR [rax],al
 1002fd4:	xor    BYTE PTR [rax],al
 1002fd6:	cmp    BYTE PTR [rax],al
 1002fd8:	xor    BYTE PTR [rax],al
 1002fda:	or     al,BYTE PTR [rax]
 1002fdc:	add    BYTE PTR [rax],al
 1002fde:	add    BYTE PTR [rax],al
 1002fe0:	and    BYTE PTR [rax],al
 1002fe2:	and    BYTE PTR [rax],al
 1002fe4:	and    BYTE PTR [rax],al
 1002fe6:	and    BYTE PTR [rax],al
 1002fe8:	push   rdi
 1002fe9:	add    BYTE PTR [rcx+0x0],ch
 1002fec:	je     0x1002fee
 1002fee:	push   0x72005000
 1002ff3:	add    BYTE PTR [rdi+0x0],ch
 1002ff6:	movsxd eax,DWORD PTR [rax]
 1002ff8:	add    BYTE PTR gs:[rbx+0x0],dh
 1002ffc:	jae    0x1002ffe
 1002ffe:	push   rsp
 1002fff:	add    BYTE PTR [rax+0x0],ch
 1003002:	jb     0x1003004
 1003004:	add    BYTE PTR gs:[rcx+0x0],ah
 1003008:	add    BYTE PTR fs:[rax+rax*1+0x61],al
 100300d:	add    BYTE PTR [rax+rax*1+0x61],dh
 1003011:	add    BYTE PTR [rax],ah
 1003013:	add    BYTE PTR [rax],ah
 1003015:	add    BYTE PTR [rax],ah
 1003017:	add    BYTE PTR [rax],ah
 1003019:	add    BYTE PTR [rax],ah
 100301b:	add    BYTE PTR [rax],ah
 100301d:	add    BYTE PTR [rax],ah
 100301f:	add    BYTE PTR [rax],ah
 1003021:	add    BYTE PTR [rax],ah
 1003023:	add    BYTE PTR [rax],ah
 1003025:	add    BYTE PTR [rax],ah
 1003027:	add    BYTE PTR [rax],ah
 1003029:	add    BYTE PTR [rip+0x30002000],bh        # 0x3100502f
 100302f:	add    BYTE PTR [rax+0x0],bh
 1003032:	xor    BYTE PTR [rax],al
 1003034:	xor    DWORD PTR [rax],eax
 1003036:	xor    BYTE PTR [rax],al
 1003038:	xor    BYTE PTR [rax],al
 100303a:	or     al,BYTE PTR [rax]
 100303c:	add    BYTE PTR [rax],al
 100303e:	add    BYTE PTR [rax],al
 1003040:	and    BYTE PTR [rax],al
 1003042:	and    BYTE PTR [rax],al
 1003044:	and    BYTE PTR [rax],al
 1003046:	and    BYTE PTR [rax],al
 1003048:	push   rdi
 1003049:	add    BYTE PTR [rcx+0x0],ch
 100304c:	je     0x100304e
 100304e:	push   0x72005000
 1003053:	add    BYTE PTR [rcx+0x0],ch
 1003056:	jbe    0x1003058
 1003058:	(bad)  
 1003059:	add    BYTE PTR [rax+rax*1+0x65],dh
 100305d:	add    BYTE PTR [rdx+0x0],dl
 1003060:	add    BYTE PTR gs:[rcx+0x0],ah
 1003064:	add    BYTE PTR fs:[rdi+0x0],dl
 1003068:	jb     0x100306a
 100306a:	imul   eax,DWORD PTR [rax],0x650074
 1003070:	rex.WRB add BYTE PTR [r13+0x0],r12b
 1003074:	ins    DWORD PTR es:[rdi],dx
 1003075:	add    BYTE PTR [rdi+0x0],ch
 1003078:	jb     0x100307a
 100307a:	jns    0x100307c
 100307c:	and    BYTE PTR [rax],al
 100307e:	and    BYTE PTR [rax],al
 1003080:	and    BYTE PTR [rax],al
 1003082:	and    BYTE PTR [rax],al
 1003084:	and    BYTE PTR [rax],al
 1003086:	and    BYTE PTR [rax],al
 1003088:	and    BYTE PTR [rax],al
 100308a:	cmp    eax,0x30002000
 100308f:	add    BYTE PTR [rax+0x0],bh
 1003092:	xor    BYTE PTR [rax],al
 1003094:	xor    al,BYTE PTR [rax]
 1003096:	xor    BYTE PTR [rax],al
 1003098:	xor    BYTE PTR [rax],al
 100309a:	or     al,BYTE PTR [rax]
 100309c:	add    BYTE PTR [rax],al
 100309e:	add    BYTE PTR [rax],al
 10030a0:	and    BYTE PTR [rax],al
 10030a2:	and    BYTE PTR [rax],al
 10030a4:	and    BYTE PTR [rax],al
 10030a6:	and    BYTE PTR [rax],al
 10030a8:	push   rdi
 10030a9:	add    BYTE PTR [rcx+0x0],ch
 10030ac:	je     0x10030ae
 10030ae:	push   0x75006f00
 10030b3:	add    BYTE PTR [rax+rax*1+0x4f],dh
 10030b7:	add    BYTE PTR [rax+0x0],dh
 10030ba:	je     0x10030bc
 10030bc:	imul   eax,DWORD PTR [rax],0x6e006f
 10030c2:	(bad)  
 10030c3:	add    BYTE PTR [rax+rax*1+0x44],ch
 10030c7:	add    BYTE PTR [rcx+0x0],ah
 10030ca:	je     0x10030cc
 10030cc:	(bad)  
 10030cd:	add    BYTE PTR [rax],ah
 10030cf:	add    BYTE PTR [rax],ah
 10030d1:	add    BYTE PTR [rax],ah
 10030d3:	add    BYTE PTR [rax],ah
 10030d5:	add    BYTE PTR [rax],ah
 10030d7:	add    BYTE PTR [rax],ah
 10030d9:	add    BYTE PTR [rax],ah
 10030db:	add    BYTE PTR [rax],ah
 10030dd:	add    BYTE PTR [rax],ah
 10030df:	add    BYTE PTR [rax],ah
 10030e1:	add    BYTE PTR [rax],ah
 10030e3:	add    BYTE PTR [rax],ah
 10030e5:	add    BYTE PTR [rax],ah
 10030e7:	add    BYTE PTR [rax],ah
 10030e9:	add    BYTE PTR [rip+0x30002000],bh        # 0x310050ef
 10030ef:	add    BYTE PTR [rax+0x0],bh
 10030f2:	xor    BYTE PTR [rax],al
 10030f4:	xor    al,0x0
 10030f6:	xor    BYTE PTR [rax],al
 10030f8:	xor    BYTE PTR [rax],al
 10030fa:	or     al,BYTE PTR [rax]
 10030fc:	add    BYTE PTR [rax],al
 10030fe:	add    BYTE PTR [rax],al
 1003100:	and    BYTE PTR [rax],al
 1003102:	and    BYTE PTR [rax],al
 1003104:	and    BYTE PTR [rax],al
 1003106:	and    BYTE PTR [rax],al
 1003108:	push   rdi
 1003109:	add    BYTE PTR [rcx+0x0],ch
 100310c:	je     0x100310e
 100310e:	push   0x75004600
 1003113:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1003117:	add    BYTE PTR [rbp+0x0],cl
 100311a:	add    BYTE PTR gs:[rbp+0x0],ch
 100311e:	outs   dx,DWORD PTR ds:[rsi]
 100311f:	add    BYTE PTR [rdx+0x0],dh
 1003122:	jns    0x1003124
 1003124:	rex.WB add BYTE PTR [r14+0x0],bpl
 1003128:	data16 add BYTE PTR [rdi+0x0],ch
 100312c:	and    BYTE PTR [rax],al
 100312e:	and    BYTE PTR [rax],al
 1003130:	and    BYTE PTR [rax],al
 1003132:	and    BYTE PTR [rax],al
 1003134:	and    BYTE PTR [rax],al
 1003136:	and    BYTE PTR [rax],al
 1003138:	and    BYTE PTR [rax],al
 100313a:	and    BYTE PTR [rax],al
 100313c:	and    BYTE PTR [rax],al
 100313e:	and    BYTE PTR [rax],al
 1003140:	and    BYTE PTR [rax],al
 1003142:	and    BYTE PTR [rax],al
 1003144:	and    BYTE PTR [rax],al
 1003146:	and    BYTE PTR [rax],al
 1003148:	and    BYTE PTR [rax],al
 100314a:	cmp    eax,0x30002000
 100314f:	add    BYTE PTR [rax+0x0],bh
 1003152:	xor    BYTE PTR [rax],al
 1003154:	cmp    BYTE PTR [rax],al
 1003156:	xor    BYTE PTR [rax],al
 1003158:	xor    BYTE PTR [rax],al
 100315a:	or     al,BYTE PTR [rax]
 100315c:	add    BYTE PTR [rax],al
 100315e:	add    BYTE PTR [rax],al
 1003160:	and    BYTE PTR [rax],al
 1003162:	and    BYTE PTR [rax],al
 1003164:	and    BYTE PTR [rax],al
 1003166:	and    BYTE PTR [rax],al
 1003168:	push   rdi
 1003169:	add    BYTE PTR [rcx+0x0],ch
 100316c:	je     0x100316e
 100316e:	push   0x68005400
 1003173:	add    BYTE PTR [rdx+0x0],dh
 1003176:	add    BYTE PTR gs:[rcx+0x0],ah
 100317a:	add    BYTE PTR fs:[rcx+0x0],cl
 100317e:	outs   dx,BYTE PTR ds:[rsi]
 100317f:	add    BYTE PTR [rsi+0x0],ah
 1003182:	outs   dx,DWORD PTR ds:[rsi]
 1003183:	add    BYTE PTR [rax],ah
 1003185:	add    BYTE PTR [rax],ah
 1003187:	add    BYTE PTR [rax],ah
 1003189:	add    BYTE PTR [rax],ah
 100318b:	add    BYTE PTR [rax],ah
 100318d:	add    BYTE PTR [rax],ah
 100318f:	add    BYTE PTR [rax],ah
 1003191:	add    BYTE PTR [rax],ah
 1003193:	add    BYTE PTR [rax],ah
 1003195:	add    BYTE PTR [rax],ah
 1003197:	add    BYTE PTR [rax],ah
 1003199:	add    BYTE PTR [rax],ah
 100319b:	add    BYTE PTR [rax],ah
 100319d:	add    BYTE PTR [rax],ah
 100319f:	add    BYTE PTR [rax],ah
 10031a1:	add    BYTE PTR [rax],ah
 10031a3:	add    BYTE PTR [rax],ah
 10031a5:	add    BYTE PTR [rax],ah
 10031a7:	add    BYTE PTR [rax],ah
 10031a9:	add    BYTE PTR [rip+0x30002000],bh        # 0x310051af
 10031af:	add    BYTE PTR [rax+0x0],bh
 10031b2:	xor    DWORD PTR [rax],eax
 10031b4:	xor    BYTE PTR [rax],al
 10031b6:	xor    BYTE PTR [rax],al
 10031b8:	xor    BYTE PTR [rax],al
 10031ba:	or     al,BYTE PTR [rax]
 10031bc:	add    BYTE PTR [rax],al
 10031be:	add    BYTE PTR [rax],al
 10031c0:	rex.WB add BYTE PTR [r14+0x0],bpl
 10031c4:	jo     0x10031c6
 10031c6:	jne    0x10031c8
 10031c8:	je     0x10031ca
 10031ca:	and    BYTE PTR [rax],al
 10031cc:	jo     0x10031ce
 10031ce:	(bad)  
 10031cf:	add    BYTE PTR [rdx+0x0],dh
 10031d2:	(bad)  
 10031d3:	add    BYTE PTR [rbp+0x0],ch
 10031d6:	add    BYTE PTR gs:[rax+rax*1+0x65],dh
 10031db:	add    BYTE PTR [rdx+0x0],dh
 10031de:	jae    0x10031e0
 10031e0:	cmp    al,BYTE PTR [rax]
 10031e2:	and    BYTE PTR [rax],al
 10031e4:	and    eax,0x20006400
 10031e9:	add    BYTE PTR [rbx+0x0],dh
 10031ec:	jne    0x10031ee
 10031ee:	jo     0x10031f0
 10031f0:	jo     0x10031f2
 10031f2:	ins    BYTE PTR es:[rdi],dx
 10031f3:	add    BYTE PTR [rcx+0x0],ch
 10031f6:	add    BYTE PTR gs:[rax+rax*1+0x0],ah
 10031fb:	add    BYTE PTR [rax],al
 10031fd:	add    BYTE PTR [rax],al
 10031ff:	add    BYTE PTR [rcx],cl
 1003201:	add    BYTE PTR [rax+0x0],dl
 1003204:	(bad)  
 1003205:	add    BYTE PTR [rdx+0x0],dh
 1003208:	(bad)  
 1003209:	add    BYTE PTR [rbp+0x0],ch
 100320c:	add    BYTE PTR gs:[rax+rax*1+0x65],dh
 1003211:	add    BYTE PTR [rdx+0x0],dh
 1003214:	and    BYTE PTR [rax],al
 1003216:	and    eax,0x3a006400
 100321b:	add    BYTE PTR [rax],ah
 100321d:	add    BYTE PTR [rip+0x7300],ah        # 0x100a523
 1003223:	add    BYTE PTR [rax],al
 1003225:	add    BYTE PTR [rax],al
 1003227:	add    BYTE PTR [rdx+0x0],dh
 100322a:	add    BYTE PTR gs:[rbp+0x0],ch
 100322e:	outs   dx,DWORD PTR ds:[rsi]
 100322f:	add    BYTE PTR [rax+rax*1+0x65],dh
 1003233:	add    BYTE PTR [rbx+0x0],dh
 1003236:	add    BYTE PTR gs:[rdx+0x0],dh
 100323a:	jbe    0x100323c
 100323c:	add    BYTE PTR gs:[rdx+0x0],dh
 1003240:	jae    0x1003242
 1003242:	cmp    al,BYTE PTR [rax]
 1003244:	jo     0x1003246
 1003246:	jb     0x1003248
 1003248:	imul   eax,DWORD PTR [rax],0x74006e
 100324e:	add    BYTE PTR [rax],al
 1003250:	jb     0x1003252
 1003252:	add    BYTE PTR gs:[rbp+0x0],ch
 1003256:	outs   dx,DWORD PTR ds:[rsi]
 1003257:	add    BYTE PTR [rax+rax*1+0x65],dh
 100325b:	add    BYTE PTR [rbx+0x0],dh
 100325e:	add    BYTE PTR gs:[rdx+0x0],dh
 1003262:	jbe    0x1003264
 1003264:	add    BYTE PTR gs:[rdx+0x0],dh
 1003268:	jae    0x100326a
 100326a:	cmp    al,BYTE PTR [rax]
 100326c:	add    BYTE PTR fs:[rbp+0x0],dh
 1003270:	ins    DWORD PTR es:[rdi],dx
 1003271:	add    BYTE PTR [rax+0x0],dh
 1003274:	add    BYTE PTR [rax],al
 1003276:	add    BYTE PTR [rax],al
 1003278:	jb     0x100327a
 100327a:	add    BYTE PTR gs:[rbp+0x0],ch
 100327e:	outs   dx,DWORD PTR ds:[rsi]
 100327f:	add    BYTE PTR [rax+rax*1+0x65],dh
 1003283:	add    BYTE PTR [rbx+0x0],dh
 1003286:	add    BYTE PTR gs:[rdx+0x0],dh
 100328a:	jbe    0x100328c
 100328c:	add    BYTE PTR gs:[rdx+0x0],dh
 1003290:	jae    0x1003292
 1003292:	cmp    al,BYTE PTR [rax]
 1003294:	data16 add BYTE PTR [rdx+0x0],dh
 1003298:	add    BYTE PTR gs:[rbp+0x0],ah
 100329c:	jp     0x100329e
 100329e:	add    BYTE PTR gs:[rax],al
 10032a1:	add    BYTE PTR [rax],al
 10032a3:	add    BYTE PTR [rax],al
 10032a5:	add    BYTE PTR [rax],al
 10032a7:	add    BYTE PTR [rdx+0x0],dh
 10032aa:	add    BYTE PTR gs:[rbp+0x0],ch
 10032ae:	outs   dx,DWORD PTR ds:[rsi]
 10032af:	add    BYTE PTR [rax+rax*1+0x65],dh
 10032b3:	add    BYTE PTR [rbx+0x0],dh
 10032b6:	add    BYTE PTR gs:[rdx+0x0],dh
 10032ba:	jbe    0x10032bc
 10032bc:	add    BYTE PTR gs:[rdx+0x0],dh
 10032c0:	jae    0x10032c2
 10032c2:	cmp    al,BYTE PTR [rax]
 10032c4:	jb     0x10032c6
 10032c6:	add    BYTE PTR gs:[rbx+0x0],dh
 10032ca:	jne    0x10032cc
 10032cc:	ins    DWORD PTR es:[rdi],dx
 10032cd:	add    BYTE PTR [rbp+0x0],ah
	...
 10032d8:	jb     0x10032da
 10032da:	add    BYTE PTR gs:[rbp+0x0],ch
 10032de:	outs   dx,DWORD PTR ds:[rsi]
 10032df:	add    BYTE PTR [rax+rax*1+0x65],dh
 10032e3:	add    BYTE PTR [rbx+0x0],dh
 10032e6:	add    BYTE PTR gs:[rdx+0x0],dh
 10032ea:	jbe    0x10032ec
 10032ec:	add    BYTE PTR gs:[rdx+0x0],dh
 10032f0:	jae    0x10032f2
 10032f2:	cmp    al,BYTE PTR [rax]
 10032f4:	jb     0x10032f6
 10032f6:	add    BYTE PTR gs:[rbp+0x0],ch
 10032fa:	outs   dx,DWORD PTR ds:[rsi]
 10032fb:	add    BYTE PTR [rax+rax*1+0x65],dh
 10032ff:	add    BYTE PTR [rcx+0x0],ch
 1003302:	outs   dx,BYTE PTR ds:[rsi]
 1003303:	add    BYTE PTR [rsi+0x0],dh
 1003306:	outs   dx,DWORD PTR ds:[rsi]
 1003307:	add    BYTE PTR [rbx+0x0],ch
 100330a:	add    BYTE PTR gs:[rax],al
 100330d:	add    BYTE PTR [rax],al
 100330f:	add    BYTE PTR [rcx+0x0],cl
 1003312:	outs   dx,BYTE PTR ds:[rsi]
 1003313:	add    BYTE PTR [rsi+0x0],dh
 1003316:	(bad)  
 1003317:	add    BYTE PTR [rax+rax*1+0x69],ch
 100331b:	add    BYTE PTR [rax+rax*1+0x20],ah
 100331f:	add    BYTE PTR [rsi+0x0],dh
 1003322:	(bad)  
 1003323:	add    BYTE PTR [rax+rax*1+0x75],ch
 1003327:	add    BYTE PTR [rbp+0x0],ah
 100332a:	and    BYTE PTR [rax],al
 100332c:	data16 add BYTE PTR [rdi+0x0],ch
 1003330:	jb     0x1003332
 1003332:	and    BYTE PTR [rax],al
 1003334:	jo     0x1003336
 1003336:	jb     0x1003338
 1003338:	outs   dx,DWORD PTR ds:[rsi]
 1003339:	add    BYTE PTR [rbx+0x0],ah
 100333c:	add    BYTE PTR gs:[rbx+0x0],dh
 1003340:	jae    0x1003342
 1003342:	and    BYTE PTR [rax],al
 1003344:	imul   eax,DWORD PTR [rax],0x200064
 100334a:	sub    eax,0x25002000
 100334f:	add    BYTE PTR [rax+rax*1+0x73],ch
	...
 100335f:	add    BYTE PTR [rcx+0x0],cl
 1003362:	outs   dx,BYTE PTR ds:[rsi]
 1003363:	add    BYTE PTR [rsi+0x0],dh
 1003366:	(bad)  
 1003367:	add    BYTE PTR [rax+rax*1+0x69],ch
 100336b:	add    BYTE PTR [rax+rax*1+0x20],ah
 100336f:	add    BYTE PTR [rsi+0x0],dh
 1003372:	(bad)  
 1003373:	add    BYTE PTR [rax+rax*1+0x75],ch
 1003377:	add    BYTE PTR [rbp+0x0],ah
 100337a:	and    BYTE PTR [rax],al
 100337c:	data16 add BYTE PTR [rdi+0x0],ch
 1003380:	jb     0x1003382
 1003382:	and    BYTE PTR [rax],al
 1003384:	je     0x1003386
 1003386:	push   0x65007200
 100338b:	add    BYTE PTR [rcx+0x0],ah
 100338e:	add    BYTE PTR fs:[rax],ah
 1003391:	add    BYTE PTR [rcx+0x0],ch
 1003394:	add    BYTE PTR fs:[rax],ah
 1003397:	add    BYTE PTR [rip+0x25002000],ch        # 0x2600539d
 100339d:	add    BYTE PTR [rax+rax*1+0x73],ch
 10033a1:	add    BYTE PTR [rax],al
 10033a3:	add    BYTE PTR [rax],al
 10033a5:	add    BYTE PTR [rax],al
 10033a7:	add    BYTE PTR [rip+0x3a005800],ah        # 0x3b008bad
 10033ad:	add    BYTE PTR [rip+0x5800],ah        # 0x1008bb3
	...
 10033bf:	add    BYTE PTR [rcx+0x0],cl
 10033c2:	outs   dx,BYTE PTR ds:[rsi]
 10033c3:	add    BYTE PTR [rsi+0x0],dh
 10033c6:	(bad)  
 10033c7:	add    BYTE PTR [rax+rax*1+0x69],ch
 10033cb:	add    BYTE PTR [rax+rax*1+0x20],ah
 10033cf:	add    BYTE PTR [rsi+0x0],dh
 10033d2:	(bad)  
 10033d3:	add    BYTE PTR [rax+rax*1+0x75],ch
 10033d7:	add    BYTE PTR [rbp+0x0],ah
 10033da:	and    BYTE PTR [rax],al
 10033dc:	data16 add BYTE PTR [rdi+0x0],ch
 10033e0:	jb     0x10033e2
 10033e2:	and    BYTE PTR [rax],al
 10033e4:	add    BYTE PTR fs:[rbp+0x0],dh
 10033e8:	ins    DWORD PTR es:[rdi],dx
 10033e9:	add    BYTE PTR [rax+0x0],dh
 10033ec:	and    BYTE PTR [rax],al
 10033ee:	data16 add BYTE PTR [rax+rax*1+0x61],ch
 10033f3:	add    BYTE PTR [rdi+0x0],ah
 10033f6:	jae    0x10033f8
 10033f8:	and    BYTE PTR [rax],al
 10033fa:	sub    eax,0x25002000
 10033ff:	add    BYTE PTR [rax+rax*1+0x73],ch
 1003403:	add    BYTE PTR [rax],al
 1003405:	add    BYTE PTR [rax],al
 1003407:	add    BYTE PTR [rip+0x7000],ah        # 0x100a40d
 100340d:	add    BYTE PTR [rax],al
 100340f:	add    BYTE PTR [rcx+0x0],cl
 1003412:	outs   dx,BYTE PTR ds:[rsi]
 1003413:	add    BYTE PTR [rsi+0x0],dh
 1003416:	(bad)  
 1003417:	add    BYTE PTR [rax+rax*1+0x69],ch
 100341b:	add    BYTE PTR [rax+rax*1+0x20],ah
 100341f:	add    BYTE PTR [rsi+0x0],dh
 1003422:	(bad)  
 1003423:	add    BYTE PTR [rax+rax*1+0x75],ch
 1003427:	add    BYTE PTR [rbp+0x0],ah
 100342a:	and    BYTE PTR [rax],al
 100342c:	data16 add BYTE PTR [rdi+0x0],ch
 1003430:	jb     0x1003432
 1003432:	and    BYTE PTR [rax],al
 1003434:	add    BYTE PTR [rbp+0x0],r14b
 1003438:	ins    DWORD PTR es:[rdi],dx
 1003439:	add    BYTE PTR [rax+0x0],dh
 100343c:	rex.WB add BYTE PTR [r14+0x0],bpl
 1003440:	data16 add BYTE PTR [rdi+0x0],ch
 1003444:	and    BYTE PTR [rax],al
 1003446:	sub    eax,0x25002000
 100344b:	add    BYTE PTR [rax+rax*1+0x73],ch
	...
 100345f:	add    BYTE PTR [rcx+0x0],cl
 1003462:	outs   dx,BYTE PTR ds:[rsi]
 1003463:	add    BYTE PTR [rsi+0x0],dh
 1003466:	(bad)  
 1003467:	add    BYTE PTR [rax+rax*1+0x69],ch
 100346b:	add    BYTE PTR [rax+rax*1+0x20],ah
 100346f:	add    BYTE PTR [rsi+0x0],dh
 1003472:	(bad)  
 1003473:	add    BYTE PTR [rax+rax*1+0x75],ch
 1003477:	add    BYTE PTR [rbp+0x0],ah
 100347a:	and    BYTE PTR [rax],al
 100347c:	data16 add BYTE PTR [rdi+0x0],ch
 1003480:	jb     0x1003482
 1003482:	and    BYTE PTR [rax],al
 1003484:	add    BYTE PTR gs:[rax+0x0],bh
 1003488:	movsxd eax,DWORD PTR [rax]
 100348a:	add    BYTE PTR gs:[rax+0x0],dh
 100348e:	je     0x1003490
 1003490:	imul   eax,DWORD PTR [rax],0x6e006f
 1003496:	and    BYTE PTR [rax],al
 1003498:	jb     0x100349a
 100349a:	add    BYTE PTR gs:[rbx+0x0],ah
 100349e:	outs   dx,DWORD PTR ds:[rsi]
 100349f:	add    BYTE PTR [rdx+0x0],dh
 10034a2:	add    BYTE PTR fs:[rax],ah
 10034a5:	add    BYTE PTR [rip+0x25002000],ch        # 0x260054ab
 10034ab:	add    BYTE PTR [rax+rax*1+0x73],ch
	...
 10034bf:	add    BYTE PTR [rcx+0x0],cl
 10034c2:	outs   dx,BYTE PTR ds:[rsi]
 10034c3:	add    BYTE PTR [rsi+0x0],dh
 10034c6:	(bad)  
 10034c7:	add    BYTE PTR [rax+rax*1+0x69],ch
 10034cb:	add    BYTE PTR [rax+rax*1+0x20],ah
 10034cf:	add    BYTE PTR [rsi+0x0],dh
 10034d2:	(bad)  
 10034d3:	add    BYTE PTR [rax+rax*1+0x75],ch
 10034d7:	add    BYTE PTR [rbp+0x0],ah
 10034da:	and    BYTE PTR [rax],al
 10034dc:	data16 add BYTE PTR [rdi+0x0],ch
 10034e0:	jb     0x10034e2
 10034e2:	and    BYTE PTR [rax],al
 10034e4:	add    BYTE PTR gs:[rax+0x0],bh
 10034e8:	movsxd eax,DWORD PTR [rax]
 10034ea:	add    BYTE PTR gs:[rax+0x0],dh
 10034ee:	je     0x10034f0
 10034f0:	imul   eax,DWORD PTR [rax],0x6e006f
 10034f6:	and    BYTE PTR [rax],al
 10034f8:	movsxd eax,DWORD PTR [rax]
 10034fa:	outs   dx,DWORD PTR ds:[rsi]
 10034fb:	add    BYTE PTR [rsi+0x0],ch
 10034fe:	je     0x1003500
 1003500:	add    BYTE PTR gs:[rax+0x0],bh
 1003504:	je     0x1003506
 1003506:	and    BYTE PTR [rax],al
 1003508:	sub    eax,0x25002000
 100350d:	add    BYTE PTR [rax+rax*1+0x73],ch
 1003511:	add    BYTE PTR [rax],al
 1003513:	add    BYTE PTR [rax],al
 1003515:	add    BYTE PTR [rax],al
 1003517:	add    BYTE PTR [rbp+0x0],dl
 100351a:	outs   dx,BYTE PTR ds:[rsi]
 100351b:	add    BYTE PTR [rbx+0x0],ch
 100351e:	outs   dx,BYTE PTR ds:[rsi]
 100351f:	add    BYTE PTR [rdi+0x0],ch
 1003522:	ja     0x1003524
 1003524:	outs   dx,BYTE PTR ds:[rsi]
 1003525:	add    BYTE PTR [rax],ah
 1003527:	add    BYTE PTR [rax+0x0],dh
 100352a:	(bad)  
 100352b:	add    BYTE PTR [rdx+0x0],dh
 100352e:	(bad)  
 100352f:	add    BYTE PTR [rbp+0x0],ch
 1003532:	add    BYTE PTR gs:[rax+rax*1+0x65],dh
 1003537:	add    BYTE PTR [rdx+0x0],dh
 100353a:	and    BYTE PTR [rax],al
 100353c:	sub    eax,0x25002000
 1003541:	add    BYTE PTR [rax+rax*1+0x73],ch
	...
 100354d:	add    BYTE PTR [rax],al
 100354f:	add    BYTE PTR [rdi+0x0],cl
 1003552:	outs   dx,BYTE PTR ds:[rsi]
 1003553:	add    BYTE PTR [rax+rax*1+0x79],ch
 1003557:	add    BYTE PTR [rax],ah
 1003559:	add    BYTE PTR [rdi+0x0],ch
 100355c:	outs   dx,BYTE PTR ds:[rsi]
 100355d:	add    BYTE PTR [rbp+0x0],ah
 1003560:	and    BYTE PTR [rax],al
 1003562:	add    BYTE PTR fs:[rcx+0x0],ch
 1003566:	jae    0x1003568
 1003568:	je     0x100356a
 100356a:	jb     0x100356c
 100356c:	imul   eax,DWORD PTR [rax],0x750062
 1003572:	je     0x1003574
 1003574:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1003579:	add    BYTE PTR [rax+rax*1+0x75],ah
 100357d:	add    BYTE PTR [rbp+0x0],ch
 1003580:	jo     0x1003582
 1003582:	imul   eax,DWORD PTR [rax],0x67006e
 1003588:	and    BYTE PTR [rax],al
 100358a:	outs   dx,DWORD PTR ds:[rsi]
 100358b:	add    BYTE PTR [rax+0x0],dh
 100358e:	je     0x1003590
 1003590:	imul   eax,DWORD PTR [rax],0x6e006f
 1003596:	and    BYTE PTR [rax],al
 1003598:	jae    0x100359a
 100359a:	push   0x75006f00
 100359f:	add    BYTE PTR [rax+rax*1+0x64],ch
 10035a3:	add    BYTE PTR [rax],ah
 10035a5:	add    BYTE PTR [rdx+0x0],ah
 10035a8:	add    BYTE PTR gs:[rax],ah
 10035ab:	add    BYTE PTR [rax+0x0],dh
 10035ae:	jb     0x10035b0
 10035b0:	add    BYTE PTR gs:[rbx+0x0],dh
 10035b4:	add    BYTE PTR gs:[rsi+0x0],ch
 10035b8:	je     0x10035ba
 10035ba:	add    BYTE PTR [rax],al
 10035bc:	add    BYTE PTR [rax],al
 10035be:	add    BYTE PTR [rax],al
 10035c0:	rex.XB add BYTE PTR [r9+0x0],spl
 10035c4:	outs   dx,BYTE PTR ds:[rsi]
 10035c5:	add    BYTE PTR [rsi+0x0],ch
 10035c8:	outs   dx,DWORD PTR ds:[rsi]
 10035c9:	add    BYTE PTR [rax+rax*1+0x20],dh
 10035cd:	add    BYTE PTR [rbx+0x0],dh
 10035d0:	jo     0x10035d2
 10035d2:	add    BYTE PTR gs:[rbx+0x0],ah
 10035d6:	imul   eax,DWORD PTR [rax],0x790066
 10035dc:	and    BYTE PTR [rax],al
 10035de:	jb     0x10035e0
 10035e0:	add    BYTE PTR gs:[rbp+0x0],ch
 10035e4:	outs   dx,DWORD PTR ds:[rsi]
 10035e5:	add    BYTE PTR [rax+rax*1+0x65],dh
 10035e9:	add    BYTE PTR [rax],ah
 10035eb:	add    BYTE PTR [rdi+0x0],ch
 10035ee:	jo     0x10035f0
 10035f0:	je     0x10035f2
 10035f2:	imul   eax,DWORD PTR [rax],0x6e006f
 10035f8:	jae    0x10035fa
 10035fa:	and    BYTE PTR [rax],al
 10035fc:	ja     0x10035fe
 10035fe:	imul   eax,DWORD PTR [rax],0x680074
 1003604:	and    BYTE PTR [rax],al
 1003606:	outs   dx,BYTE PTR ds:[rsi]
 1003607:	add    BYTE PTR [rdi+0x0],ch
 100360a:	sub    eax,0x65007200
 100360f:	add    BYTE PTR [rbp+0x0],ch
 1003612:	outs   dx,DWORD PTR ds:[rsi]
 1003613:	add    BYTE PTR [rax+rax*1+0x65],dh
 1003617:	add    BYTE PTR [rip+0x63006100],ch        # 0x6400971d
 100361d:	add    BYTE PTR [rax+rax*1+0x69],dh
 1003621:	add    BYTE PTR [rsi+0x0],dh
 1003624:	(bad)  
 1003625:	add    BYTE PTR [rax+rax*1+0x69],dh
 1003629:	add    BYTE PTR [rdi+0x0],ch
 100362c:	outs   dx,BYTE PTR ds:[rsi]
 100362d:	add    BYTE PTR [rax],ah
 100362f:	add    BYTE PTR [rsi+0x0],ah
 1003632:	ins    BYTE PTR es:[rdi],dx
 1003633:	add    BYTE PTR [rcx+0x0],ah
 1003636:	add    BYTE PTR [eax],al
 1003639:	add    BYTE PTR [rax],al
 100363b:	add    BYTE PTR [rax],al
 100363d:	add    BYTE PTR [rax],al
 100363f:	add    BYTE PTR [rax+0x0],dl
 1003642:	(bad)  
 1003643:	add    BYTE PTR [rdx+0x0],dh
 1003646:	(bad)  
 1003647:	add    BYTE PTR [rbp+0x0],ch
 100364a:	add    BYTE PTR gs:[rax+rax*1+0x65],dh
 100364f:	add    BYTE PTR [rdx+0x0],dh
 1003652:	and    BYTE PTR [rax],al
 1003654:	add    BYTE PTR gs:[rdx+0x0],dh
 1003658:	jb     0x100365a
 100365a:	outs   dx,DWORD PTR ds:[rsi]
 100365b:	add    BYTE PTR [rdx+0x0],dh
 100365e:	add    BYTE PTR [rax],al
 1003660:	push   rax
 1003661:	add    BYTE PTR [rcx+0x0],ah
 1003664:	jb     0x1003666
 1003666:	jae    0x1003668
 1003668:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 100366d:	add    BYTE PTR [rax+0x0],dh
 1003670:	(bad)  
 1003671:	add    BYTE PTR [rdx+0x0],dh
 1003674:	(bad)  
 1003675:	add    BYTE PTR [rbp+0x0],ch
 1003678:	add    BYTE PTR gs:[rax+rax*1+0x65],dh
 100367d:	add    BYTE PTR [rdx+0x0],dh
 1003680:	jae    0x1003682
 1003682:	cmp    al,BYTE PTR [rax]
 1003684:	add    BYTE PTR [rax],al
 1003686:	add    BYTE PTR [rax],al
 1003688:	and    BYTE PTR [rax],al
 100368a:	and    BYTE PTR [rax],al
 100368c:	and    BYTE PTR [rax],al
 100368e:	and    BYTE PTR [rax],al
 1003690:	push   rax
 1003691:	add    BYTE PTR [rdx+0x0],dh
 1003694:	outs   dx,DWORD PTR ds:[rsi]
 1003695:	add    BYTE PTR [rbx+0x0],ah
 1003698:	add    BYTE PTR gs:[rbx+0x0],dh
 100369c:	jae    0x100369e
 100369e:	rex.WB add BYTE PTR [r8+rax*1+0x20],al
 10036a3:	add    BYTE PTR [rip+0x25002000],bh        # 0x260056a9
 10036a9:	add    BYTE PTR [rax+rax*1+0x0],ah
 10036ad:	add    BYTE PTR [rax],al
 10036af:	add    BYTE PTR [rax],ah
 10036b1:	add    BYTE PTR [rax],ah
 10036b3:	add    BYTE PTR [rax],ah
 10036b5:	add    BYTE PTR [rax],ah
 10036b7:	add    BYTE PTR [rax+rax*1+0x68],dl
 10036bb:	add    BYTE PTR [rdx+0x0],dh
 10036be:	add    BYTE PTR gs:[rcx+0x0],ah
 10036c2:	add    BYTE PTR fs:[rcx+0x0],cl
 10036c6:	add    BYTE PTR fs:[rax],ah
 10036c9:	add    BYTE PTR [rip+0x25002000],bh        # 0x260056cf
 10036cf:	add    BYTE PTR [rax+rax*1+0x0],ah
 10036d3:	add    BYTE PTR [rax],al
 10036d5:	add    BYTE PTR [rax],al
 10036d7:	add    BYTE PTR [rax],ah
 10036d9:	add    BYTE PTR [rax],ah
 10036db:	add    BYTE PTR [rax],ah
 10036dd:	add    BYTE PTR [rax],ah
 10036df:	add    BYTE PTR [rsi+0x0],al
 10036e2:	ins    BYTE PTR es:[rdi],dx
 10036e3:	add    BYTE PTR [rcx+0x0],ah
 10036e6:	add    BYTE PTR [ebx+0x0],dh
 10036ea:	and    BYTE PTR [rax],al
 10036ec:	cmp    eax,0x30002000
 10036f1:	add    BYTE PTR [rax+0x0],bh
 10036f4:	and    eax,0x5800
 10036f9:	add    BYTE PTR [rax],al
 10036fb:	add    BYTE PTR [rax],al
 10036fd:	add    BYTE PTR [rax],al
 10036ff:	add    BYTE PTR [rax],ah
 1003701:	add    BYTE PTR [rax],ah
 1003703:	add    BYTE PTR [rax],ah
 1003705:	add    BYTE PTR [rax],ah
 1003707:	add    BYTE PTR [rbp+0x0],cl
 100370a:	imul   eax,DWORD PTR [rax],0x69006e
 1003710:	add    BYTE PTR [rbp+0x0],r14b
 1003714:	ins    DWORD PTR es:[rdi],dx
 1003715:	add    BYTE PTR [rax+0x0],dh
 1003718:	add    BYTE PTR [rax+r8*1+0x61],r13b
 100371d:	add    BYTE PTR [rdi+0x0],ah
 1003720:	jae    0x1003722
 1003722:	and    BYTE PTR [rax],al
 1003724:	cmp    eax,0x30002000
 1003729:	add    BYTE PTR [rax+0x0],bh
 100372c:	and    eax,0x5800
 1003731:	add    BYTE PTR [rax],al
 1003733:	add    BYTE PTR [rax],al
 1003735:	add    BYTE PTR [rax],al
 1003737:	add    BYTE PTR [rax],ah
 1003739:	add    BYTE PTR [rax],ah
 100373b:	add    BYTE PTR [rax],ah
 100373d:	add    BYTE PTR [rax],ah
 100373f:	add    BYTE PTR [rbx+0x0],dl
 1003742:	jno    0x1003744
 1003744:	ins    BYTE PTR es:[rdi],dx
 1003745:	add    BYTE PTR [rcx+0x0],cl
 1003748:	outs   dx,BYTE PTR ds:[rsi]
 1003749:	add    BYTE PTR [rsi+0x0],ah
 100374c:	outs   dx,DWORD PTR ds:[rsi]
 100374d:	add    BYTE PTR [rax+0x0],dl
 1003750:	je     0x1003752
 1003752:	jb     0x1003754
 1003754:	and    BYTE PTR [rax],al
 1003756:	cmp    eax,0x30002000
 100375b:	add    BYTE PTR [rax+0x0],bh
 100375e:	and    eax,0x7000
 1003763:	add    BYTE PTR [rax],al
 1003765:	add    BYTE PTR [rax],al
 1003767:	add    BYTE PTR [rax+rax*1],bh
 100376a:	rex.WRX add BYTE PTR [rbp+0x0],r10b
 100376e:	rex.WR add BYTE PTR [rax+rax*1+0x3e],r9b
 1003773:	add    BYTE PTR [rax],al
 1003775:	add    BYTE PTR [rax],al
 1003777:	add    BYTE PTR [rax],ah
 1003779:	add    BYTE PTR [rax],ah
 100377b:	add    BYTE PTR [rax],ah
 100377d:	add    BYTE PTR [rax],ah
 100377f:	add    BYTE PTR [rax+rax*1+0x75],al
 1003783:	add    BYTE PTR [rbp+0x0],ch
 1003786:	jo     0x1003788
 1003788:	add    BYTE PTR [rcx+0x0],r13b
 100378c:	jb     0x100378e
 100378e:	and    BYTE PTR [rax],al
 1003790:	cmp    eax,0x25002000
 1003795:	add    BYTE PTR [rax+rax*1+0x73],ch
 1003799:	add    BYTE PTR [rax],al
 100379b:	add    BYTE PTR [rax],al
 100379d:	add    BYTE PTR [rax],al
 100379f:	add    BYTE PTR [rax],ah
 10037a1:	add    BYTE PTR [rax],ah
 10037a3:	add    BYTE PTR [rax],ah
 10037a5:	add    BYTE PTR [rax],ah
 10037a7:	add    BYTE PTR [rbp+0x0],al
 10037aa:	js     0x10037ac
 10037ac:	movsxd eax,DWORD PTR [rax]
 10037ae:	add    BYTE PTR gs:[rax+0x0],dh
 10037b2:	je     0x10037b4
 10037b4:	imul   eax,DWORD PTR [rax],0x6e006f
 10037ba:	push   rdx
 10037bb:	add    BYTE PTR [rbp+0x0],ah
 10037be:	movsxd eax,DWORD PTR [rax]
 10037c0:	outs   dx,DWORD PTR ds:[rsi]
 10037c1:	add    BYTE PTR [rdx+0x0],dh
 10037c4:	add    BYTE PTR fs:[rax+0x0],dl
 10037c8:	je     0x10037ca
 10037ca:	jb     0x10037cc
 10037cc:	and    BYTE PTR [rax],al
 10037ce:	cmp    eax,0x30002000
 10037d3:	add    BYTE PTR [rax+0x0],bh
 10037d6:	and    eax,0x7000
 10037db:	add    BYTE PTR [rax],al
 10037dd:	add    BYTE PTR [rax],al
 10037df:	add    BYTE PTR [rax],ah
 10037e1:	add    BYTE PTR [rax],ah
 10037e3:	add    BYTE PTR [rax],ah
 10037e5:	add    BYTE PTR [rax],ah
 10037e7:	add    BYTE PTR [rbx+0x0],al
 10037ea:	outs   dx,DWORD PTR ds:[rsi]
 10037eb:	add    BYTE PTR [rsi+0x0],ch
 10037ee:	je     0x10037f0
 10037f0:	add    BYTE PTR gs:[rax+0x0],bh
 10037f4:	je     0x10037f6
 10037f6:	push   rax
 10037f7:	add    BYTE PTR [rax+rax*1+0x72],dh
 10037fb:	add    BYTE PTR [rax],ah
 10037fd:	add    BYTE PTR [rip+0x30002000],bh        # 0x31005803
 1003803:	add    BYTE PTR [rax+0x0],bh
 1003806:	and    eax,0x7000
 100380b:	add    BYTE PTR [rax],al
 100380d:	add    BYTE PTR [rax],al
 100380f:	add    BYTE PTR [rax],ah
 1003811:	add    BYTE PTR [rax],ah
 1003813:	add    BYTE PTR [rax],ah
 1003815:	add    BYTE PTR [rax],ah
 1003817:	add    BYTE PTR [rbp+0x0],al
 100381a:	js     0x100381c
 100381c:	je     0x100381e
 100381e:	jb     0x1003820
 1003820:	(bad)  
 1003821:	add    BYTE PTR [rsi+0x0],al
 1003824:	imul   eax,DWORD PTR [rax],0x65006c
 100382a:	and    BYTE PTR [rax],al
 100382c:	cmp    eax,0x25002000
 1003831:	add    BYTE PTR [rax+rax*1+0x73],ch
 1003835:	add    BYTE PTR [rax],al
 1003837:	add    BYTE PTR [rax],ah
 1003839:	add    BYTE PTR [rax],ah
 100383b:	add    BYTE PTR [rax],ah
 100383d:	add    BYTE PTR [rax],ah
 100383f:	add    BYTE PTR [rcx+0x0],cl
 1003842:	outs   dx,BYTE PTR ds:[rsi]
 1003843:	add    BYTE PTR [rbx+0x0],dh
 1003846:	je     0x1003848
 1003848:	(bad)  
 1003849:	add    BYTE PTR [rsi+0x0],ch
 100384c:	movsxd eax,DWORD PTR [rax]
 100384e:	add    BYTE PTR gs:[rsi+0x0],cl
 1003852:	(bad)  
 1003853:	add    BYTE PTR [rbp+0x0],ch
 1003856:	add    BYTE PTR gs:[rax],ah
 1003859:	add    BYTE PTR [rip+0x25002000],bh        # 0x2600585f
 100385f:	add    BYTE PTR [rax+rax*1+0x73],ch
 1003863:	add    BYTE PTR [rax],al
 1003865:	add    BYTE PTR [rax],al
 1003867:	add    BYTE PTR [rax],ah
 1003869:	add    BYTE PTR [rax],ah
 100386b:	add    BYTE PTR [rax],ah
 100386d:	add    BYTE PTR [rax],ah
 100386f:	add    BYTE PTR [rbx+0x0],dl
 1003872:	add    BYTE PTR gs:[rdx+0x0],dh
 1003876:	jbe    0x1003878
 1003878:	imul   eax,DWORD PTR [rax],0x650063
 100387e:	rex.WRX add BYTE PTR [rcx+0x0],r12b
 1003882:	ins    DWORD PTR es:[rdi],dx
 1003883:	add    BYTE PTR [rbp+0x0],ah
 1003886:	and    BYTE PTR [rax],al
 1003888:	cmp    eax,0x25002000
 100388d:	add    BYTE PTR [rax+rax*1+0x73],ch
	...
 100389d:	add    BYTE PTR [rax],al
 100389f:	add    BYTE PTR [rax+rax*1+0x75],al
 10038a3:	add    BYTE PTR [rbp+0x0],ch
 10038a6:	jo     0x10038a8
 10038a8:	and    BYTE PTR [rax],al
 10038aa:	imul   eax,DWORD PTR [rax],0x200073
 10038b0:	(bad)  
 10038b1:	add    BYTE PTR [rbx+0x0],dh
 10038b4:	jae    0x10038b6
 10038b6:	outs   dx,DWORD PTR ds:[rsi]
 10038b7:	add    BYTE PTR [rbx+0x0],ah
 10038ba:	imul   eax,DWORD PTR [rax],0x740061
 10038c0:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 10038c5:	add    BYTE PTR [rdi+0x0],dh
 10038c8:	imul   eax,DWORD PTR [rax],0x680074
 10038ce:	and    BYTE PTR [rax],al
 10038d0:	data16 add BYTE PTR [rcx+0x0],ch
 10038d4:	ins    BYTE PTR es:[rdi],dx
 10038d5:	add    BYTE PTR [rbp+0x0],ah
 10038d8:	and    BYTE PTR [rax],al
 10038da:	and    eax,0x73006c00
	...
 10038ef:	add    BYTE PTR [rsi+0x0],cl
 10038f2:	outs   dx,DWORD PTR ds:[rsi]
 10038f3:	add    BYTE PTR [rax+rax*1+0x20],dh
 10038f7:	add    BYTE PTR [rbx+0x0],ah
 10038fa:	jb     0x10038fc
 10038fc:	add    BYTE PTR gs:[rcx+0x0],ah
 1003900:	je     0x1003902
 1003902:	imul   eax,DWORD PTR [rax],0x67006e
 1003908:	and    BYTE PTR [rax],al
 100390a:	(bad)  
 100390b:	add    BYTE PTR [rsi+0x0],ch
 100390e:	and    BYTE PTR [rax],al
 1003910:	(bad)  
 1003911:	add    BYTE PTR [rax+rax*1+0x64],ah
 1003915:	add    BYTE PTR [rcx+0x0],ch
 1003918:	je     0x100391a
 100391a:	imul   eax,DWORD PTR [rax],0x6e006f
 1003920:	(bad)  
 1003921:	add    BYTE PTR [rax+rax*1+0x20],ch
 1003925:	add    BYTE PTR [rax+rax*1+0x75],ah
 1003929:	add    BYTE PTR [rbp+0x0],ch
 100392c:	jo     0x100392e
 100392e:	sub    al,0x0
 1003930:	and    BYTE PTR [rax],al
 1003932:	(bad)  
 1003933:	add    BYTE PTR [rbp+0x0],ah
 1003936:	movsxd eax,DWORD PTR [rax]
 1003938:	(bad)  
 1003939:	add    BYTE PTR [rbp+0x0],dh
 100393c:	jae    0x100393e
 100393e:	add    BYTE PTR gs:[rax],ah
 1003941:	add    BYTE PTR [rax+rax*1+0x75],ah
 1003945:	add    BYTE PTR [rbp+0x0],ch
 1003948:	jo     0x100394a
 100394a:	and    BYTE PTR [rax],al
 100394c:	data16 add BYTE PTR [rdi+0x0],ch
 1003950:	jb     0x1003952
 1003952:	and    BYTE PTR [rax],al
 1003954:	jae    0x1003956
 1003956:	je     0x1003958
 1003958:	(bad)  
 1003959:	add    BYTE PTR [rbx+0x0],ah
 100395c:	imul   eax,DWORD PTR [rax],0x20
 100395f:	add    BYTE PTR [rbx+0x0],dh
 1003962:	imul   eax,DWORD PTR [rax],0x6e0067
 1003968:	(bad)  
 1003969:	add    BYTE PTR [rax+rax*1+0x75],dh
 100396d:	add    BYTE PTR [rdx+0x0],dh
 1003970:	add    BYTE PTR gs:[rax],ah
 1003973:	add    BYTE PTR [rip+0x20007000],ah        # 0x2100a979
 1003979:	add    BYTE PTR [rcx+0x0],ah
 100397c:	ins    BYTE PTR es:[rdi],dx
 100397d:	add    BYTE PTR [rdx+0x0],dh
 1003980:	add    BYTE PTR gs:[rcx+0x0],ah
 1003984:	add    BYTE PTR fs:[rcx+0x0],bh
 1003988:	and    BYTE PTR [rax],al
 100398a:	add    BYTE PTR gs:[rax+0x0],bh
 100398e:	imul   eax,DWORD PTR [rax],0x740073
 1003994:	jae    0x1003996
 1003996:	add    BYTE PTR cs:[rax],al
 1003999:	add    BYTE PTR [rax],al
 100399b:	add    BYTE PTR [rax],al
 100399d:	add    BYTE PTR [rax],al
 100399f:	add    BYTE PTR [rbp+0x0],dl
 10039a2:	outs   dx,BYTE PTR ds:[rsi]
 10039a3:	add    BYTE PTR [rcx+0x0],ah
 10039a6:	(bad)  
 10039a7:	add    BYTE PTR [rax+rax*1+0x65],ch
 10039ab:	add    BYTE PTR [rax],ah
 10039ad:	add    BYTE PTR [rax+rax*1+0x6f],dh
 10039b1:	add    BYTE PTR [rax],ah
 10039b3:	add    BYTE PTR [rax+rax*1+0x65],ah
 10039b7:	add    BYTE PTR [rax+rax*1+0x65],ch
 10039bb:	add    BYTE PTR [rax+rax*1+0x65],dh
 10039bf:	add    BYTE PTR [rax],ah
 10039c1:	add    BYTE PTR [rcx+0x0],ah
 10039c4:	add    BYTE PTR fs:[rax+rax*1+0x69],ah
 10039c9:	add    BYTE PTR [rax+rax*1+0x69],dh
 10039cd:	add    BYTE PTR [rdi+0x0],ch
 10039d0:	outs   dx,BYTE PTR ds:[rsi]
 10039d1:	add    BYTE PTR [rcx+0x0],ah
 10039d4:	ins    BYTE PTR es:[rdi],dx
 10039d5:	add    BYTE PTR [rax],ah
 10039d7:	add    BYTE PTR [rax+rax*1+0x75],ah
 10039db:	add    BYTE PTR [rbp+0x0],ch
 10039de:	jo     0x10039e0
 10039e0:	and    BYTE PTR [rax],al
 10039e2:	data16 add BYTE PTR [rcx+0x0],ch
 10039e6:	ins    BYTE PTR es:[rdi],dx
 10039e7:	add    BYTE PTR [rbp+0x0],ah
 10039ea:	and    BYTE PTR [rax],al
 10039ec:	and    eax,0x20007300
 10039f1:	add    BYTE PTR [rax],ch
 10039f3:	add    BYTE PTR [rbp+0x0],ah
 10039f6:	jb     0x10039f8
 10039f8:	jb     0x10039fa
 10039fa:	outs   dx,BYTE PTR ds:[rsi]
 10039fb:	add    BYTE PTR [rdi+0x0],ch
 10039fe:	and    BYTE PTR [rax],al
 1003a00:	and    eax,0x29006400
 1003a05:	add    BYTE PTR [rax],al
 1003a07:	add    BYTE PTR [rbp+0x0],al
 1003a0a:	jb     0x1003a0c
 1003a0c:	jb     0x1003a0e
 1003a0e:	outs   dx,DWORD PTR ds:[rsi]
 1003a0f:	add    BYTE PTR [rdx+0x0],dh
 1003a12:	add    BYTE PTR [rbp+0x0],r14b
 1003a16:	ins    DWORD PTR es:[rdi],dx
 1003a17:	add    BYTE PTR [rax+0x0],dh
 1003a1a:	add    BYTE PTR [rcx+0x0],r13b
 1003a1e:	jb     0x1003a20
	...
 1003a28:	add    BYTE PTR [r10+0x0],r14b
 1003a2c:	jb     0x1003a2e
 1003a2e:	outs   dx,DWORD PTR ds:[rsi]
 1003a2f:	add    BYTE PTR [rdx+0x0],dh
 1003a32:	push   rdx
 1003a33:	add    BYTE PTR [rbp+0x0],ah
 1003a36:	jo     0x1003a38
 1003a38:	outs   dx,DWORD PTR ds:[rsi]
 1003a39:	add    BYTE PTR [rdx+0x0],dh
 1003a3c:	je     0x1003a3e
 1003a3e:	imul   eax,DWORD PTR [rax],0x67006e
 1003a44:	add    BYTE PTR [rcx+0x0],r13b
 1003a48:	jb     0x1003a4a
 1003a4a:	add    BYTE PTR [rax],al
 1003a4c:	add    BYTE PTR [rax],al
 1003a4e:	add    BYTE PTR [rax],al
 1003a50:	rex.XB add BYTE PTR [r10+0x0],sil
 1003a54:	add    BYTE PTR gs:[rcx+0x0],ah
 1003a58:	je     0x1003a5a
 1003a5a:	add    BYTE PTR gs:[rax],ah
 1003a5d:	add    BYTE PTR [rax+rax*1+0x75],ah
 1003a61:	add    BYTE PTR [rbp+0x0],ch
 1003a64:	jo     0x1003a66
 1003a66:	and    BYTE PTR [rax],al
 1003a68:	data16 add BYTE PTR [rcx+0x0],ch
 1003a6c:	ins    BYTE PTR es:[rdi],dx
 1003a6d:	add    BYTE PTR [rbp+0x0],ah
 1003a70:	and    BYTE PTR [rax],al
 1003a72:	and    eax,0x73006c00
 1003a77:	add    BYTE PTR [rax],ah
 1003a79:	add    BYTE PTR [rsi+0x0],ah
 1003a7c:	(bad)  
 1003a7d:	add    BYTE PTR [rcx+0x0],ch
 1003a80:	ins    BYTE PTR es:[rdi],dx
 1003a81:	add    BYTE PTR [rbp+0x0],ah
 1003a84:	add    BYTE PTR fs:[rax],ah
 1003a87:	add    BYTE PTR [rax],ah
 1003a89:	add    BYTE PTR [rax],dh
 1003a8b:	add    BYTE PTR [rax+0x0],bh
 1003a8e:	and    eax,0x20007800
 1003a93:	add    BYTE PTR [rip+0x25002000],ch        # 0x26005a99
 1003a99:	add    BYTE PTR [rax+rax*1+0x73],ch
 1003a9d:	add    BYTE PTR [rax],al
 1003a9f:	add    BYTE PTR [rbx+0x0],al
 1003aa2:	jb     0x1003aa4
 1003aa4:	add    BYTE PTR gs:[rcx+0x0],ah
 1003aa8:	je     0x1003aaa
 1003aaa:	add    BYTE PTR gs:[rax],ah
 1003aad:	add    BYTE PTR [rax+rax*1+0x75],ah
 1003ab1:	add    BYTE PTR [rbp+0x0],ch
 1003ab4:	jo     0x1003ab6
 1003ab6:	and    BYTE PTR [rax],al
 1003ab8:	data16 add BYTE PTR [rcx+0x0],ch
 1003abc:	ins    BYTE PTR es:[rdi],dx
 1003abd:	add    BYTE PTR [rbp+0x0],ah
 1003ac0:	and    BYTE PTR [rax],al
 1003ac2:	and    eax,0x73006c00
 1003ac7:	add    BYTE PTR [rax],ah
 1003ac9:	add    BYTE PTR [rsi+0x0],ah
 1003acc:	(bad)  
 1003acd:	add    BYTE PTR [rcx+0x0],ch
 1003ad0:	ins    BYTE PTR es:[rdi],dx
 1003ad1:	add    BYTE PTR [rbp+0x0],ah
 1003ad4:	add    BYTE PTR fs:[rax],ah
 1003ad7:	add    BYTE PTR [rbp+0x0],al
 1003ada:	jb     0x1003adc
 1003adc:	jb     0x1003ade
 1003ade:	outs   dx,DWORD PTR ds:[rsi]
 1003adf:	add    BYTE PTR [rdx+0x0],dh
 1003ae2:	and    BYTE PTR [rax],al
 1003ae4:	rex.XB add BYTE PTR [r15+0x0],bpl
 1003ae8:	add    BYTE PTR fs:[rbp+0x0],ah
 1003aec:	and    BYTE PTR [rax],al
 1003aee:	xor    BYTE PTR [rax],al
 1003af0:	js     0x1003af2
 1003af2:	and    eax,0x7800
	...
 1003aff:	add    BYTE PTR [rbx+0x0],al
 1003b02:	jb     0x1003b04
 1003b04:	add    BYTE PTR gs:[rcx+0x0],ah
 1003b08:	je     0x1003b0a
 1003b0a:	add    BYTE PTR gs:[rax],ah
 1003b0d:	add    BYTE PTR [rax+rax*1+0x75],ah
 1003b11:	add    BYTE PTR [rbp+0x0],ch
 1003b14:	jo     0x1003b16
 1003b16:	and    BYTE PTR [rax],al
 1003b18:	data16 add BYTE PTR [rcx+0x0],ch
 1003b1c:	ins    BYTE PTR es:[rdi],dx
 1003b1d:	add    BYTE PTR [rbp+0x0],ah
 1003b20:	and    BYTE PTR [rax],al
 1003b22:	data16 add BYTE PTR [rcx+0x0],ah
 1003b26:	imul   eax,DWORD PTR [rax],0x65006c
 1003b2c:	add    BYTE PTR fs:[rax],ah
 1003b2f:	add    BYTE PTR [rcx+0x0],ah
 1003b32:	data16 add BYTE PTR [rax+rax*1+0x65],dh
 1003b37:	add    BYTE PTR [rdx+0x0],dh
 1003b3a:	and    BYTE PTR [rax],al
 1003b3c:	and    eax,0x20006400
 1003b41:	add    BYTE PTR [rdx+0x0],dh
 1003b44:	add    BYTE PTR gs:[rax+rax*1+0x72],dh
 1003b49:	add    BYTE PTR [rcx+0x0],ch
 1003b4c:	add    BYTE PTR gs:[rbx+0x0],dh
	...
 1003b58:	and    eax,0x73006c00
 1003b5d:	add    BYTE PTR [rsi],ch
 1003b5f:	add    BYTE PTR [rip+0x6400],ah        # 0x1009f65
 1003b65:	add    BYTE PTR [rax],al
 1003b67:	add    BYTE PTR [rbx+0x0],al
 1003b6a:	jb     0x1003b6c
 1003b6c:	add    BYTE PTR gs:[rcx+0x0],ah
 1003b70:	je     0x1003b72
 1003b72:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1003b77:	add    BYTE PTR [rsi+0x0],ch
 1003b7a:	add    BYTE PTR gs:[rdi+0x0],dh
 1003b7e:	and    BYTE PTR [rax],al
 1003b80:	add    BYTE PTR fs:[rbp+0x0],dh
 1003b84:	ins    DWORD PTR es:[rdi],dx
 1003b85:	add    BYTE PTR [rax+0x0],dh
 1003b88:	and    BYTE PTR [rax],al
 1003b8a:	data16 add BYTE PTR [rcx+0x0],ch
 1003b8e:	ins    BYTE PTR es:[rdi],dx
 1003b8f:	add    BYTE PTR [rbp+0x0],ah
 1003b92:	and    BYTE PTR [rax],al
 1003b94:	and    eax,0x73006c00
 1003b99:	add    BYTE PTR [rax],al
 1003b9b:	add    BYTE PTR [rax],al
 1003b9d:	add    BYTE PTR [rax],al
 1003b9f:	add    BYTE PTR [rbx+0x0],al
 1003ba2:	jb     0x1003ba4
 1003ba4:	add    BYTE PTR gs:[rcx+0x0],ah
 1003ba8:	je     0x1003baa
 1003baa:	add    BYTE PTR gs:[rax],ah
 1003bad:	add    BYTE PTR [rax+rax*1+0x75],ah
 1003bb1:	add    BYTE PTR [rbp+0x0],ch
 1003bb4:	jo     0x1003bb6
 1003bb6:	and    BYTE PTR [rax],al
 1003bb8:	data16 add BYTE PTR [rcx+0x0],ch
 1003bbc:	ins    BYTE PTR es:[rdi],dx
 1003bbd:	add    BYTE PTR [rbp+0x0],ah
 1003bc0:	and    BYTE PTR [rax],al
 1003bc2:	data16 add BYTE PTR [rcx+0x0],ah
 1003bc6:	imul   eax,DWORD PTR [rax],0x65006c
 1003bcc:	add    BYTE PTR fs:[rax],ah
 1003bcf:	add    BYTE PTR [rax],dh
 1003bd1:	add    BYTE PTR [rax+0x0],bh
 1003bd4:	and    eax,0x20007800
 1003bd9:	add    BYTE PTR [rip+0x25002000],ch        # 0x26005bdf
 1003bdf:	add    BYTE PTR [rax+rax*1+0x73],ch
	...
 1003bef:	add    BYTE PTR [rbx+0x0],al
 1003bf2:	jb     0x1003bf4
 1003bf4:	add    BYTE PTR gs:[rcx+0x0],ah
 1003bf8:	je     0x1003bfa
 1003bfa:	add    BYTE PTR gs:[rax],ah
 1003bfd:	add    BYTE PTR [rax+rax*1+0x75],ah
 1003c01:	add    BYTE PTR [rbp+0x0],ch
 1003c04:	jo     0x1003c06
 1003c06:	and    BYTE PTR [rax],al
 1003c08:	data16 add BYTE PTR [rcx+0x0],ch
 1003c0c:	ins    BYTE PTR es:[rdi],dx
 1003c0d:	add    BYTE PTR [rbp+0x0],ah
 1003c10:	and    BYTE PTR [rax],al
 1003c12:	data16 add BYTE PTR [rcx+0x0],ah
 1003c16:	imul   eax,DWORD PTR [rax],0x65006c
 1003c1c:	add    BYTE PTR fs:[rax],ah
 1003c1f:	add    BYTE PTR [rbp+0x0],al
 1003c22:	jb     0x1003c24
 1003c24:	jb     0x1003c26
 1003c26:	outs   dx,DWORD PTR ds:[rsi]
 1003c27:	add    BYTE PTR [rdx+0x0],dh
 1003c2a:	and    BYTE PTR [rax],al
 1003c2c:	rex.XB add BYTE PTR [r15+0x0],bpl
 1003c30:	add    BYTE PTR fs:[rbp+0x0],ah
 1003c34:	and    BYTE PTR [rax],al
 1003c36:	xor    BYTE PTR [rax],al
 1003c38:	js     0x1003c3a
 1003c3a:	and    eax,0x7800
 1003c3f:	add    BYTE PTR [rbx+0x0],al
 1003c42:	outs   dx,DWORD PTR ds:[rsi]
 1003c43:	add    BYTE PTR [rbp+0x0],dh
 1003c46:	ins    BYTE PTR es:[rdi],dx
 1003c47:	add    BYTE PTR [rax+rax*1+0x20],ah
 1003c4b:	add    BYTE PTR [rsi+0x0],ch
 1003c4e:	outs   dx,DWORD PTR ds:[rsi]
 1003c4f:	add    BYTE PTR [rax+rax*1+0x20],dh
 1003c53:	add    BYTE PTR [rbx+0x0],ah
 1003c56:	outs   dx,DWORD PTR ds:[rsi]
 1003c57:	add    BYTE PTR [rsi+0x0],ch
 1003c5a:	jae    0x1003c5c
 1003c5c:	je     0x1003c5e
 1003c5e:	jb     0x1003c60
 1003c60:	jne    0x1003c62
 1003c62:	movsxd eax,DWORD PTR [rax]
 1003c64:	je     0x1003c66
 1003c66:	and    BYTE PTR [rax],al
 1003c68:	data16 add BYTE PTR [rcx+0x0],ch
 1003c6c:	ins    BYTE PTR es:[rdi],dx
 1003c6d:	add    BYTE PTR [rbp+0x0],ah
 1003c70:	and    BYTE PTR [rax],al
 1003c72:	outs   dx,BYTE PTR ds:[rsi]
 1003c73:	add    BYTE PTR [rcx+0x0],ah
 1003c76:	ins    DWORD PTR es:[rdi],dx
 1003c77:	add    BYTE PTR [rbp+0x0],ah
 1003c7a:	cmp    al,BYTE PTR [rax]
 1003c7c:	and    BYTE PTR [rax],al
 1003c7e:	and    eax,0x6400
 1003c83:	add    BYTE PTR [rax],al
 1003c85:	add    BYTE PTR [rax],al
 1003c87:	add    BYTE PTR [rax+rax*1+0x75],al
 1003c8b:	add    BYTE PTR [rbp+0x0],ch
 1003c8e:	jo     0x1003c90
 1003c90:	and    BYTE PTR [rax],al
 1003c92:	data16 add BYTE PTR [rcx+0x0],ch
 1003c96:	ins    BYTE PTR es:[rdi],dx
 1003c97:	add    BYTE PTR [rbp+0x0],ah
 1003c9a:	and    BYTE PTR [rax],al
 1003c9c:	outs   dx,BYTE PTR ds:[rsi]
 1003c9d:	add    BYTE PTR [rcx+0x0],ah
 1003ca0:	ins    DWORD PTR es:[rdi],dx
 1003ca1:	add    BYTE PTR [rbp+0x0],ah
 1003ca4:	and    BYTE PTR [rax],al
 1003ca6:	je     0x1003ca8
 1003ca8:	outs   dx,DWORD PTR ds:[rsi]
 1003ca9:	add    BYTE PTR [rdi+0x0],ch
 1003cac:	and    BYTE PTR [rax],al
 1003cae:	ins    BYTE PTR es:[rdi],dx
 1003caf:	add    BYTE PTR [rdi+0x0],ch
 1003cb2:	outs   dx,BYTE PTR ds:[rsi]
 1003cb3:	add    BYTE PTR [rdi+0x0],ah
 1003cb6:	add    BYTE PTR [rax],al
 1003cb8:	push   rsp
 1003cb9:	add    BYTE PTR [rax+0x0],ch
 1003cbc:	jb     0x1003cbe
 1003cbe:	add    BYTE PTR gs:[rcx+0x0],ah
 1003cc2:	add    BYTE PTR fs:[rax],ah
 1003cc5:	add    BYTE PTR [rbx+0x0],ah
 1003cc8:	jb     0x1003cca
 1003cca:	add    BYTE PTR gs:[rcx+0x0],ah
 1003cce:	je     0x1003cd0
 1003cd0:	imul   eax,DWORD PTR [rax],0x6e006f
 1003cd6:	and    BYTE PTR [rax],al
 1003cd8:	imul   eax,DWORD PTR [rax],0x200073
 1003cde:	outs   dx,BYTE PTR ds:[rsi]
 1003cdf:	add    BYTE PTR [rdi+0x0],ch
 1003ce2:	je     0x1003ce4
 1003ce4:	and    BYTE PTR [rax],al
 1003ce6:	(bad)  
 1003ce7:	add    BYTE PTR [rax+rax*1+0x6c],ch
 1003ceb:	add    BYTE PTR [rdi+0x0],ch
 1003cee:	ja     0x1003cf0
 1003cf0:	add    BYTE PTR gs:[rax+rax*1+0x0],ah
 1003cf5:	add    BYTE PTR [rax],al
 1003cf7:	add    BYTE PTR [rdi+0x0],cl
 1003cfa:	jo     0x1003cfc
 1003cfc:	add    BYTE PTR gs:[rsi+0x0],ch
 1003d00:	push   rax
 1003d01:	add    BYTE PTR [rdx+0x0],dh
 1003d04:	outs   dx,DWORD PTR ds:[rsi]
 1003d05:	add    BYTE PTR [rbx+0x0],ah
 1003d08:	add    BYTE PTR gs:[rbx+0x0],dh
 1003d0c:	jae    0x1003d0e
 1003d0e:	and    BYTE PTR [rax],al
 1003d10:	data16 add BYTE PTR [rcx+0x0],ah
 1003d14:	imul   eax,DWORD PTR [rax],0x65006c
 1003d1a:	add    BYTE PTR fs:[rax],ah
 1003d1d:	add    BYTE PTR [rax],dh
 1003d1f:	add    BYTE PTR [rax+0x0],bh
 1003d22:	and    eax,0x20007800
 1003d27:	add    BYTE PTR [rip+0x25002000],ch        # 0x26005d2d
 1003d2d:	add    BYTE PTR [rax+rax*1+0x73],ch
	...
 1003d3d:	add    BYTE PTR [rax],al
 1003d3f:	add    BYTE PTR [rdi+0x0],cl
 1003d42:	jo     0x1003d44
 1003d44:	add    BYTE PTR gs:[rsi+0x0],ch
 1003d48:	push   rax
 1003d49:	add    BYTE PTR [rdx+0x0],dh
 1003d4c:	outs   dx,DWORD PTR ds:[rsi]
 1003d4d:	add    BYTE PTR [rbx+0x0],ah
 1003d50:	add    BYTE PTR gs:[rbx+0x0],dh
 1003d54:	jae    0x1003d56
 1003d56:	and    BYTE PTR [rax],al
 1003d58:	data16 add BYTE PTR [rcx+0x0],ah
 1003d5c:	imul   eax,DWORD PTR [rax],0x65006c
 1003d62:	add    BYTE PTR fs:[rax],ah
 1003d65:	add    BYTE PTR [rbp+0x0],al
 1003d68:	jb     0x1003d6a
 1003d6a:	jb     0x1003d6c
 1003d6c:	outs   dx,DWORD PTR ds:[rsi]
 1003d6d:	add    BYTE PTR [rdx+0x0],dh
 1003d70:	and    BYTE PTR [rax],al
 1003d72:	rex.XB add BYTE PTR [r15+0x0],bpl
 1003d76:	add    BYTE PTR fs:[rbp+0x0],ah
 1003d7a:	and    BYTE PTR [rax],al
 1003d7c:	xor    BYTE PTR [rax],al
 1003d7e:	js     0x1003d80
 1003d80:	and    eax,0x7800
	...
 1003d8d:	add    BYTE PTR [rax],al
 1003d8f:	add    BYTE PTR [rcx+0x0],cl
 1003d92:	ins    DWORD PTR es:[rdi],dx
 1003d93:	add    BYTE PTR [rcx+0x0],ah
 1003d96:	add    BYTE PTR [ebp+0x0],ah
 1003d9a:	and    BYTE PTR [rax],al
 1003d9c:	jbe    0x1003d9e
 1003d9e:	(bad)  
 1003d9f:	add    BYTE PTR [rax+rax*1+0x69],ch
 1003da3:	add    BYTE PTR [rax+rax*1+0x61],ah
 1003da7:	add    BYTE PTR [rax+rax*1+0x69],dh
 1003dab:	add    BYTE PTR [rdi+0x0],ch
 1003dae:	outs   dx,BYTE PTR ds:[rsi]
 1003daf:	add    BYTE PTR [rax],ah
 1003db1:	add    BYTE PTR [rbx+0x0],ah
 1003db4:	(bad)  
 1003db5:	add    BYTE PTR [rsi+0x0],ch
 1003db8:	and    BYTE PTR [rax],al
 1003dba:	outs   dx,BYTE PTR ds:[rsi]
 1003dbb:	add    BYTE PTR [rdi+0x0],ch
 1003dbe:	je     0x1003dc0
 1003dc0:	and    BYTE PTR [rax],al
 1003dc2:	outs   dx,DWORD PTR ds:[rsi]
 1003dc3:	add    BYTE PTR [rax+0x0],dh
 1003dc6:	add    BYTE PTR gs:[rdx+0x0],dh
 1003dca:	(bad)  
 1003dcb:	add    BYTE PTR [rax+rax*1+0x65],dh
 1003dcf:	add    BYTE PTR [rax],ah
 1003dd1:	add    BYTE PTR [rip+0x75002000],ch        # 0x76005dd7
 1003dd7:	add    BYTE PTR [rsi+0x0],ch
 1003dda:	(bad)  
 1003ddb:	add    BYTE PTR [rdx+0x0],ah
 1003dde:	ins    BYTE PTR es:[rdi],dx
 1003ddf:	add    BYTE PTR [rbp+0x0],ah
 1003de2:	and    BYTE PTR [rax],al
 1003de4:	je     0x1003de6
 1003de6:	outs   dx,DWORD PTR ds:[rsi]
 1003de7:	add    BYTE PTR [rax],ah
 1003de9:	add    BYTE PTR [rbx+0x0],ah
 1003dec:	outs   dx,DWORD PTR ds:[rsi]
 1003ded:	add    BYTE PTR [rax+0x0],dh
 1003df0:	jns    0x1003df2
 1003df2:	and    BYTE PTR [rax],al
 1003df4:	je     0x1003df6
 1003df6:	(bad)  
 1003df7:	add    BYTE PTR [rdx+0x0],dh
 1003dfa:	add    BYTE PTR [ebp+0x0],ah
 1003dfe:	je     0x1003e00
 1003e00:	and    BYTE PTR [rax],al
 1003e02:	je     0x1003e04
 1003e04:	push   0x65007200
 1003e09:	add    BYTE PTR [rcx+0x0],ah
 1003e0c:	add    BYTE PTR fs:[rax],ah
 1003e0f:	add    BYTE PTR [rbx+0x0],dh
 1003e12:	je     0x1003e14
 1003e14:	(bad)  
 1003e15:	add    BYTE PTR [rbx+0x0],ah
 1003e18:	imul   eax,DWORD PTR [rax],0x0
 1003e1b:	add    BYTE PTR [rax],al
 1003e1d:	add    BYTE PTR [rax],al
 1003e1f:	add    BYTE PTR [rcx+0x0],cl
 1003e22:	ins    DWORD PTR es:[rdi],dx
 1003e23:	add    BYTE PTR [rcx+0x0],ah
 1003e26:	add    BYTE PTR [ebp+0x0],ah
 1003e2a:	and    BYTE PTR [rax],al
 1003e2c:	jbe    0x1003e2e
 1003e2e:	(bad)  
 1003e2f:	add    BYTE PTR [rax+rax*1+0x69],ch
 1003e33:	add    BYTE PTR [rax+rax*1+0x61],ah
 1003e37:	add    BYTE PTR [rax+rax*1+0x69],dh
 1003e3b:	add    BYTE PTR [rdi+0x0],ch
 1003e3e:	outs   dx,BYTE PTR ds:[rsi]
 1003e3f:	add    BYTE PTR [rax],ah
 1003e41:	add    BYTE PTR [rbx+0x0],ah
 1003e44:	(bad)  
 1003e45:	add    BYTE PTR [rsi+0x0],ch
 1003e48:	and    BYTE PTR [rax],al
 1003e4a:	outs   dx,BYTE PTR ds:[rsi]
 1003e4b:	add    BYTE PTR [rdi+0x0],ch
 1003e4e:	je     0x1003e50
 1003e50:	and    BYTE PTR [rax],al
 1003e52:	outs   dx,DWORD PTR ds:[rsi]
 1003e53:	add    BYTE PTR [rax+0x0],dh
 1003e56:	add    BYTE PTR gs:[rdx+0x0],dh
 1003e5a:	(bad)  
 1003e5b:	add    BYTE PTR [rax+rax*1+0x65],dh
 1003e5f:	add    BYTE PTR [rax],ah
 1003e61:	add    BYTE PTR [rdi+0x0],dh
 1003e64:	imul   eax,DWORD PTR [rax],0x680074
 1003e6a:	outs   dx,DWORD PTR ds:[rsi]
 1003e6b:	add    BYTE PTR [rbp+0x0],dh
 1003e6e:	je     0x1003e70
 1003e70:	and    BYTE PTR [rax],al
 1003e72:	add    BYTE PTR gs:[rax+0x0],bh
 1003e76:	movsxd eax,DWORD PTR [rax]
 1003e78:	add    BYTE PTR gs:[rax+0x0],dh
 1003e7c:	je     0x1003e7e
 1003e7e:	imul   eax,DWORD PTR [rax],0x6e006f
 1003e84:	and    BYTE PTR [rax],al
 1003e86:	add    BYTE PTR fs:[rcx+0x0],ah
 1003e8a:	je     0x1003e8c
 1003e8c:	(bad)  
 1003e8d:	add    BYTE PTR [rax],al
 1003e8f:	add    BYTE PTR [rax+rax*1+0x75],al
 1003e93:	add    BYTE PTR [rbp+0x0],ch
 1003e96:	jo     0x1003e98
 1003e98:	and    BYTE PTR [rax],al
 1003e9a:	data16 add BYTE PTR [rcx+0x0],ch
 1003e9e:	ins    BYTE PTR es:[rdi],dx
 1003e9f:	add    BYTE PTR [rbp+0x0],ah
 1003ea2:	and    BYTE PTR [rax],al
 1003ea4:	and    eax,0x73006c00
 1003ea9:	add    BYTE PTR [rdx],bh
 1003eab:	add    BYTE PTR [rip+0x20006400],ah        # 0x2100a2b1
 1003eb1:	add    BYTE PTR [rbx+0x0],ah
 1003eb4:	jb     0x1003eb6
 1003eb6:	add    BYTE PTR gs:[rcx+0x0],ah
 1003eba:	je     0x1003ebc
 1003ebc:	imul   eax,DWORD PTR [rax],0x6e006f
 1003ec2:	and    BYTE PTR [rax],al
 1003ec4:	data16 add BYTE PTR [rcx+0x0],ah
 1003ec8:	imul   eax,DWORD PTR [rax],0x65006c
 1003ece:	add    BYTE PTR fs:[rbx],bh
 1003ed1:	add    BYTE PTR [rax],ah
 1003ed3:	add    BYTE PTR [rcx+0x0],al
 1003ed6:	(bad)  
 1003ed7:	add    BYTE PTR [rdi+0x0],ch
 1003eda:	jb     0x1003edc
 1003edc:	je     0x1003ede
 1003ede:	imul   eax,DWORD PTR [rax],0x67006e
 1003ee4:	and    BYTE PTR [rax],al
 1003ee6:	ins    DWORD PTR es:[rdi],dx
 1003ee7:	add    BYTE PTR [rbp+0x0],dh
 1003eea:	ins    BYTE PTR es:[rdi],dx
 1003eeb:	add    BYTE PTR [rax+rax*1+0x69],dh
 1003eef:	add    BYTE PTR [rax+0x0],dh
 1003ef2:	ins    BYTE PTR es:[rdi],dx
 1003ef3:	add    BYTE PTR [rbp+0x0],ah
 1003ef6:	and    BYTE PTR [rax],al
 1003ef8:	add    BYTE PTR fs:[rbp+0x0],dh
 1003efc:	ins    DWORD PTR es:[rdi],dx
 1003efd:	add    BYTE PTR [rax+0x0],dh
 1003f00:	and    BYTE PTR [rax],al
 1003f02:	movsxd eax,DWORD PTR [rax]
 1003f04:	jb     0x1003f06
 1003f06:	add    BYTE PTR gs:[rcx+0x0],ah
 1003f0a:	je     0x1003f0c
 1003f0c:	imul   eax,DWORD PTR [rax],0x6e006f
 1003f12:	add    BYTE PTR [rax],al
 1003f14:	add    BYTE PTR [rax],al
 1003f16:	add    BYTE PTR [rax],al
 1003f18:	rex.WRB add BYTE PTR [r9+0x0],r13b
 1003f1c:	outs   dx,BYTE PTR ds:[rsi]
 1003f1d:	add    BYTE PTR [rcx+0x0],ch
 1003f20:	add    BYTE PTR [rbp+0x0],r14b
 1003f24:	ins    DWORD PTR es:[rdi],dx
 1003f25:	add    BYTE PTR [rax+0x0],dh
 1003f28:	and    BYTE PTR [rax],al
 1003f2a:	movsxd eax,DWORD PTR [rax]
 1003f2c:	outs   dx,DWORD PTR ds:[rsi]
 1003f2d:	add    BYTE PTR [rbp+0x0],ch
 1003f30:	jo     0x1003f32
 1003f32:	ins    BYTE PTR es:[rdi],dx
 1003f33:	add    BYTE PTR [rbp+0x0],ah
 1003f36:	je     0x1003f38
 1003f38:	add    BYTE PTR gs:[rax+rax*1+0x3a],ah
 1003f3d:	add    BYTE PTR [rax],ah
 1003f3f:	add    BYTE PTR [rip+0x73006c00],ah        # 0x7400ab45
	...
 1003f4d:	add    BYTE PTR [rax],al
 1003f4f:	add    BYTE PTR [rsi+0x0],cl
 1003f52:	jne    0x1003f54
 1003f54:	ins    DWORD PTR es:[rdi],dx
 1003f55:	add    BYTE PTR [rdx+0x0],ah
 1003f58:	add    BYTE PTR gs:[rdx+0x0],dh
 1003f5c:	and    BYTE PTR [rax],al
 1003f5e:	outs   dx,DWORD PTR ds:[rsi]
 1003f5f:	add    BYTE PTR [rsi+0x0],ah
 1003f62:	and    BYTE PTR [rax],al
 1003f64:	jo     0x1003f66
 1003f66:	(bad)  
 1003f67:	add    BYTE PTR [rdi+0x0],ah
 1003f6a:	add    BYTE PTR gs:[rbx+0x0],dh
 1003f6e:	and    BYTE PTR [rax],al
 1003f70:	data16 add BYTE PTR [rcx+0x0],ch
 1003f74:	ins    BYTE PTR es:[rdi],dx
 1003f75:	add    BYTE PTR [rax+rax*1+0x65],dh
 1003f79:	add    BYTE PTR [rdx+0x0],dh
 1003f7c:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1003f81:	add    BYTE PTR [rdi+0x0],ch
 1003f84:	jne    0x1003f86
 1003f86:	je     0x1003f88
 1003f88:	cmp    al,BYTE PTR [rax]
 1003f8a:	and    BYTE PTR [rax],al
 1003f8c:	and    eax,0x6400
 1003f91:	add    BYTE PTR [rax],al
 1003f93:	add    BYTE PTR [rax],al
 1003f95:	add    BYTE PTR [rax],al
 1003f97:	add    BYTE PTR [rax+rax*1+0x62],ah
 1003f9b:	add    BYTE PTR [rdi+0x0],ah
 1003f9e:	push   0x6c006500
 1003fa3:	add    BYTE PTR [rax+0x0],dh
 1003fa6:	add    BYTE PTR cs:[rax+rax*1+0x6c],ah
 1003fab:	add    BYTE PTR [rax+rax*1+0x0],ch
 1003faf:	add    BYTE PTR [rbx+0x0],dh
 1003fb2:	jno    0x1003fb4
 1003fb4:	ins    BYTE PTR es:[rdi],dx
 1003fb5:	add    BYTE PTR [rax+rax*1+0x75],ah
 1003fb9:	add    BYTE PTR [rbp+0x0],ch
 1003fbc:	jo     0x1003fbe
 1003fbe:	add    BYTE PTR gs:[rdx+0x0],dh
 1003fc2:	add    BYTE PTR cs:[rbp+0x0],ah
 1003fc6:	js     0x1003fc8
 1003fc8:	add    BYTE PTR gs:[rax],al
 1003fcb:	add    BYTE PTR [rax],al
 1003fcd:	add    BYTE PTR [rax],al
 1003fcf:	add    BYTE PTR [rbp+0x0],cl
 1003fd2:	imul   eax,DWORD PTR [rax],0x69006e
 1003fd8:	add    BYTE PTR [rbp+0x0],r14b
 1003fdc:	ins    DWORD PTR es:[rdi],dx
 1003fdd:	add    BYTE PTR [rax+0x0],dh
 1003fe0:	push   rdi
 1003fe1:	add    BYTE PTR [rdx+0x0],dh
 1003fe4:	imul   eax,DWORD PTR [rax],0x650074
 1003fea:	add    BYTE PTR [rbp+0x0],r14b
 1003fee:	ins    DWORD PTR es:[rdi],dx
 1003fef:	add    BYTE PTR [rax+0x0],dh
 1003ff2:	and    BYTE PTR [rax],al
 1003ff4:	sub    BYTE PTR [rax],al
 1003ff6:	sub    DWORD PTR [rax],eax
 1003ff8:	and    BYTE PTR [rax],al
 1003ffa:	rex.RX add BYTE PTR [rcx+0x0],r12b
 1003ffe:	imul   eax,DWORD PTR [rax],0x65006c
 1004004:	add    BYTE PTR fs:[rax],ah
 1004007:	add    BYTE PTR [rax],dh
 1004009:	add    BYTE PTR [rax+0x0],bh
 100400c:	and    eax,0x20007800
 1004011:	add    BYTE PTR [rip+0x25002000],ch        # 0x26006017
 1004017:	add    BYTE PTR [rax+rax*1+0x73],ch
 100401b:	add    BYTE PTR [rax],al
 100401d:	add    BYTE PTR [rax],al
 100401f:	add    BYTE PTR [rbp+0x0],cl
 1004022:	imul   eax,DWORD PTR [rax],0x69006e
 1004028:	add    BYTE PTR [rbp+0x0],r14b
 100402c:	ins    DWORD PTR es:[rdi],dx
 100402d:	add    BYTE PTR [rax+0x0],dh
 1004030:	push   rdi
 1004031:	add    BYTE PTR [rdx+0x0],dh
 1004034:	imul   eax,DWORD PTR [rax],0x650074
 100403a:	add    BYTE PTR [rbp+0x0],r14b
 100403e:	ins    DWORD PTR es:[rdi],dx
 100403f:	add    BYTE PTR [rax+0x0],dh
 1004042:	and    BYTE PTR [rax],al
 1004044:	sub    BYTE PTR [rax],al
 1004046:	sub    DWORD PTR [rax],eax
 1004048:	and    BYTE PTR [rax],al
 100404a:	rex.RX add BYTE PTR [rcx+0x0],r12b
 100404e:	imul   eax,DWORD PTR [rax],0x65006c
 1004054:	add    BYTE PTR fs:[rax],ah
 1004057:	add    BYTE PTR [rbp+0x0],al
 100405a:	jb     0x100405c
 100405c:	jb     0x100405e
 100405e:	outs   dx,DWORD PTR ds:[rsi]
 100405f:	add    BYTE PTR [rdx+0x0],dh
 1004062:	and    BYTE PTR [rax],al
 1004064:	rex.XB add BYTE PTR [r15+0x0],bpl
 1004068:	add    BYTE PTR fs:[rbp+0x0],ah
 100406c:	and    BYTE PTR [rax],al
 100406e:	xor    BYTE PTR [rax],al
 1004070:	js     0x1004072
 1004072:	and    eax,0x7800
 1004077:	add    BYTE PTR [rip+0x73006c00],ah        # 0x7400ac7d
 100407d:	add    BYTE PTR [rip+0x73006c00],ah        # 0x7400ac83
 1004083:	add    BYTE PTR [rax],al
 1004085:	add    BYTE PTR [rax],al
 1004087:	add    BYTE PTR [rbp+0x0],al
 100408a:	outs   dx,BYTE PTR ds:[rsi]
 100408b:	add    BYTE PTR [rcx+0x0],ah
 100408e:	(bad)  
 100408f:	add    BYTE PTR [rax+rax*1+0x65],ch
 1004093:	add    BYTE PTR [rbp+0x0],al
 1004096:	jb     0x1004098
 1004098:	jb     0x100409a
 100409a:	outs   dx,DWORD PTR ds:[rsi]
 100409b:	add    BYTE PTR [rdx+0x0],dh
 100409e:	push   rdx
 100409f:	add    BYTE PTR [rbp+0x0],ah
 10040a2:	jo     0x10040a4
 10040a4:	outs   dx,DWORD PTR ds:[rsi]
 10040a5:	add    BYTE PTR [rdx+0x0],dh
 10040a8:	je     0x10040aa
 10040aa:	imul   eax,DWORD PTR [rax],0x67006e
	...
 10040c0:	rex.XB add BYTE PTR [r15+0x0],bpl
 10040c4:	outs   dx,BYTE PTR ds:[rsi]
 10040c5:	add    BYTE PTR [rax+rax*1+0x69],dh
 10040c9:	add    BYTE PTR [rsi+0x0],ch
 10040cc:	jne    0x10040ce
 10040ce:	imul   eax,DWORD PTR [rax],0x67006e
 10040d4:	and    BYTE PTR [rax],al
 10040d6:	outs   dx,DWORD PTR ds:[rsi]
 10040d7:	add    BYTE PTR [rsi+0x0],ch
 10040da:	and    BYTE PTR [rax],al
 10040dc:	ins    DWORD PTR es:[rdi],dx
 10040dd:	add    BYTE PTR [rbp+0x0],ah
 10040e0:	ins    DWORD PTR es:[rdi],dx
 10040e1:	add    BYTE PTR [rdi+0x0],ch
 10040e4:	jb     0x10040e6
 10040e6:	jns    0x10040e8
 10040e8:	and    BYTE PTR [rax],al
 10040ea:	jb     0x10040ec
 10040ec:	add    BYTE PTR gs:[rcx+0x0],ah
 10040f0:	add    BYTE PTR fs:[rax],ah
 10040f3:	add    BYTE PTR [rsi+0x0],ah
 10040f6:	(bad)  
 10040f7:	add    BYTE PTR [rcx+0x0],ch
 10040fa:	ins    BYTE PTR es:[rdi],dx
 10040fb:	add    BYTE PTR [rbp+0x0],dh
 10040fe:	jb     0x1004100
 1004100:	add    BYTE PTR gs:[rax],ah
 1004103:	add    BYTE PTR [rcx+0x0],ah
 1004106:	je     0x1004108
 1004108:	and    BYTE PTR [rax],al
 100410a:	xor    BYTE PTR [rax],al
 100410c:	js     0x100410e
 100410e:	and    eax,0x31003000
 1004113:	add    BYTE PTR [rsi],dh
 1004115:	add    BYTE PTR [rcx+0x0],cl
 1004118:	add    BYTE PTR ss:[rax+rax*1],dh
 100411c:	js     0x100411e
 100411e:	sub    al,0x0
 1004120:	and    BYTE PTR [rax],al
 1004122:	jae    0x1004124
 1004124:	imul   eax,DWORD PTR [rax],0x65007a
 100412a:	and    BYTE PTR [rax],al
 100412c:	and    eax,0x64006c00
 1004131:	add    BYTE PTR [rax+rax*1],ch
 1004134:	and    BYTE PTR [rax],al
 1004136:	rex.W add BYTE PTR [rdx+0x0],dl
 100413a:	add    BYTE PTR [r11+0x0],r10b
 100413e:	push   rbp
 100413f:	add    BYTE PTR [rax+rax*1+0x54],cl
 1004143:	add    BYTE PTR [rax],ah
 1004145:	add    BYTE PTR [rax],dh
 1004147:	add    BYTE PTR [rax+0x0],bh
 100414a:	and    eax,0x38003000
 100414f:	add    BYTE PTR [rax+0x0],bh
 1004152:	add    BYTE PTR [rax],al
 1004154:	add    BYTE PTR [rax],al
 1004156:	add    BYTE PTR [rax],al
 1004158:	rex.XB add BYTE PTR [r9+0x0],spl
 100415c:	ins    BYTE PTR es:[rdi],dx
 100415d:	add    BYTE PTR [rax+rax*1+0x62],ch
 1004161:	add    BYTE PTR [rcx+0x0],ah
 1004164:	movsxd eax,DWORD PTR [rax]
 1004166:	imul   eax,DWORD PTR [rax],0x20
 1004169:	add    BYTE PTR [rax+rax*1+0x79],dh
 100416d:	add    BYTE PTR [rax+0x0],dh
 1004170:	add    BYTE PTR gs:[rax],ah
 1004173:	add    BYTE PTR [rip+0x20006400],ah        # 0x2100a579
 1004179:	add    BYTE PTR [rsi+0x0],ch
 100417c:	outs   dx,DWORD PTR ds:[rsi]
 100417d:	add    BYTE PTR [rax+rax*1+0x20],dh
 1004181:	add    BYTE PTR [rbp+0x0],dh
 1004184:	jae    0x1004186
 1004186:	add    BYTE PTR gs:[rax+rax*1+0x0],ah
 100418b:	add    BYTE PTR [rax],al
 100418d:	add    BYTE PTR [rax],al
 100418f:	add    BYTE PTR [rsi+0x0],al
 1004192:	jne    0x1004194
 1004194:	ins    BYTE PTR es:[rdi],dx
 1004195:	add    BYTE PTR [rax+rax*1+0x2e],ch
 1004199:	add    BYTE PTR [rbp+0x0],ch
 100419c:	add    BYTE PTR fs:[rbp+0x0],ch
 10041a0:	jo     0x10041a2
	...
 10041ae:	add    BYTE PTR [rax],al
 10041b0:	rex.WRB add BYTE PTR [r13+0x0],r12b
 10041b4:	ins    DWORD PTR es:[rdi],dx
 10041b5:	add    BYTE PTR [rdi+0x0],ch
 10041b8:	jb     0x10041ba
 10041ba:	jns    0x10041bc
 10041bc:	and    BYTE PTR [rax],al
 10041be:	add    BYTE PTR fs:[rbp+0x0],dh
 10041c2:	ins    DWORD PTR es:[rdi],dx
 10041c3:	add    BYTE PTR [rax+0x0],dh
 10041c6:	and    BYTE PTR [rax],al
 10041c8:	jae    0x10041ca
 10041ca:	imul   eax,DWORD PTR [rax],0x65007a
 10041d0:	and    BYTE PTR [rax],al
 10041d2:	imul   eax,DWORD PTR [rax],0x200073
 10041d8:	add    BYTE PTR [edx+0x0],dh
 10041dc:	add    BYTE PTR gs:[rcx+0x0],ah
 10041e0:	je     0x10041e2
 10041e2:	add    BYTE PTR gs:[rdx+0x0],dh
 10041e6:	and    BYTE PTR [rax],al
 10041e8:	je     0x10041ea
 10041ea:	push   0x6e006100
 10041ef:	add    BYTE PTR [rax],ah
 10041f1:	add    BYTE PTR [rdx],dh
 10041f3:	add    BYTE PTR [rdi+0x0],al
 10041f6:	rex.X add BYTE PTR [rsi],bpl
 10041f9:	add    BYTE PTR [rax],ah
 10041fb:	add    BYTE PTR [rbx+0x0],al
 10041fe:	jb     0x1004200
 1004200:	add    BYTE PTR gs:[rcx+0x0],ah
 1004204:	je     0x1004206
 1004206:	imul   eax,DWORD PTR [rax],0x67006e
 100420c:	and    BYTE PTR [rax],al
 100420e:	(bad)  
 100420f:	add    BYTE PTR [rax],ah
 1004211:	add    BYTE PTR [rsi+0x0],ch
 1004214:	add    BYTE PTR gs:[rdi+0x0],dh
 1004218:	and    BYTE PTR [rax],al
 100421a:	add    BYTE PTR fs:[rbp+0x0],dh
 100421e:	ins    DWORD PTR es:[rdi],dx
 100421f:	add    BYTE PTR [rax+0x0],dh
 1004222:	and    BYTE PTR [rax],al
 1004224:	data16 add BYTE PTR [rcx+0x0],ch
 1004228:	ins    BYTE PTR es:[rdi],dx
 1004229:	add    BYTE PTR [rbp+0x0],ah
 100422c:	add    BYTE PTR [rax],al
 100422e:	add    BYTE PTR [rax],al
 1004230:	rex.XB add BYTE PTR [r9+0x0],spl
 1004234:	outs   dx,BYTE PTR ds:[rsi]
 1004235:	add    BYTE PTR [rax],ah
 1004237:	add    BYTE PTR [rsi+0x0],ch
 100423a:	outs   dx,DWORD PTR ds:[rsi]
 100423b:	add    BYTE PTR [rax+rax*1+0x20],dh
 100423f:	add    BYTE PTR [rdx+0x0],dh
 1004242:	add    BYTE PTR gs:[rcx+0x0],ah
 1004246:	add    BYTE PTR fs:[rax],ah
 1004249:	add    BYTE PTR [rbp+0x0],ch
 100424c:	pop    rdi
 100424d:	add    BYTE PTR [rax+0x0],dh
 1004250:	rex.X add BYTE PTR [rbp+0x0],sil
 1004254:	data16 add BYTE PTR [rax],ah
 1004257:	add    BYTE PTR [rbx+0x0],ah
 100425a:	outs   dx,DWORD PTR ds:[rsi]
 100425b:	add    BYTE PTR [rsi+0x0],ch
 100425e:	je     0x1004260
 1004260:	add    BYTE PTR gs:[rsi+0x0],ch
 1004264:	je     0x1004266
 1004266:	cmp    al,BYTE PTR [rax]
 1004268:	and    BYTE PTR [rax],al
 100426a:	and    eax,0x7800
 100426f:	add    BYTE PTR [rbx+0x0],al
 1004272:	(bad)  
 1004273:	add    BYTE PTR [rsi+0x0],ch
 1004276:	and    BYTE PTR [rax],al
 1004278:	outs   dx,BYTE PTR ds:[rsi]
 1004279:	add    BYTE PTR [rdi+0x0],ch
 100427c:	je     0x100427e
 100427e:	and    BYTE PTR [rax],al
 1004280:	jb     0x1004282
 1004282:	add    BYTE PTR gs:[rcx+0x0],ah
 1004286:	add    BYTE PTR fs:[rax],ah
 1004289:	add    BYTE PTR [rbp+0x0],ch
 100428c:	pop    rdi
 100428d:	add    BYTE PTR [rdx+0x0],al
 1004290:	jne    0x1004292
 1004292:	movsxd eax,DWORD PTR [rax]
 1004294:	imul   eax,DWORD PTR [rax],0x65
 1004297:	add    BYTE PTR [rax+rax*1+0x73],dh
 100429b:	add    BYTE PTR [rax+0x0],dl
 100429e:	je     0x10042a0
 10042a0:	jb     0x10042a2
 10042a2:	and    BYTE PTR [rax],al
 10042a4:	movsxd eax,DWORD PTR [rax]
 10042a6:	outs   dx,DWORD PTR ds:[rsi]
 10042a7:	add    BYTE PTR [rsi+0x0],ch
 10042aa:	je     0x10042ac
 10042ac:	add    BYTE PTR gs:[rsi+0x0],ch
 10042b0:	je     0x10042b2
 10042b2:	cmp    al,BYTE PTR [rax]
 10042b4:	and    BYTE PTR [rax],al
 10042b6:	and    eax,0x7800
 10042bb:	add    BYTE PTR [rax],al
 10042bd:	add    BYTE PTR [rax],al
 10042bf:	add    BYTE PTR [rbx+0x0],al
 10042c2:	(bad)  
 10042c3:	add    BYTE PTR [rsi+0x0],ch
 10042c6:	and    BYTE PTR [rax],al
 10042c8:	outs   dx,BYTE PTR ds:[rsi]
 10042c9:	add    BYTE PTR [rdi+0x0],ch
 10042cc:	je     0x10042ce
 10042ce:	and    BYTE PTR [rax],al
 10042d0:	jb     0x10042d2
 10042d2:	add    BYTE PTR gs:[rcx+0x0],ah
 10042d6:	add    BYTE PTR fs:[rax],ah
 10042d9:	add    BYTE PTR [rbp+0x0],ch
 10042dc:	pop    rdi
 10042dd:	add    BYTE PTR [rax+rax*1+0x6f],cl
 10042e1:	add    BYTE PTR [rdi+0x0],ch
 10042e4:	imul   eax,DWORD PTR [rax],0x75
 10042e7:	add    BYTE PTR [rax+0x0],dh
 10042ea:	push   rsp
 10042eb:	add    BYTE PTR [rcx+0x0],ah
 10042ee:	(bad)  
 10042ef:	add    BYTE PTR [rax+rax*1+0x65],ch
 10042f3:	add    BYTE PTR [rax+0x0],dl
 10042f6:	je     0x10042f8
 10042f8:	jb     0x10042fa
 10042fa:	and    BYTE PTR [rax],al
 10042fc:	movsxd eax,DWORD PTR [rax]
 10042fe:	outs   dx,DWORD PTR ds:[rsi]
 10042ff:	add    BYTE PTR [rsi+0x0],ch
 1004302:	je     0x1004304
 1004304:	add    BYTE PTR gs:[rsi+0x0],ch
 1004308:	je     0x100430a
 100430a:	cmp    al,BYTE PTR [rax]
 100430c:	and    BYTE PTR [rax],al
 100430e:	and    eax,0x7800
	...
 100431f:	add    BYTE PTR [rbx+0x0],al
 1004322:	(bad)  
 1004323:	add    BYTE PTR [rsi+0x0],ch
 1004326:	and    BYTE PTR [rax],al
 1004328:	outs   dx,BYTE PTR ds:[rsi]
 1004329:	add    BYTE PTR [rdi+0x0],ch
 100432c:	je     0x100432e
 100432e:	and    BYTE PTR [rax],al
 1004330:	jb     0x1004332
 1004332:	add    BYTE PTR gs:[rcx+0x0],ah
 1004336:	add    BYTE PTR fs:[rax],ah
 1004339:	add    BYTE PTR [rbp+0x0],ch
 100433c:	pop    rdi
 100433d:	add    BYTE PTR [rsi],dh
 100433f:	add    BYTE PTR [rax+rax*1],dh
 1004342:	rex.WXB add BYTE PTR [r10+0x0],al
 1004346:	ins    BYTE PTR es:[rdi],dx
 1004347:	add    BYTE PTR [rdi+0x0],ch
 100434a:	movsxd eax,DWORD PTR [rax]
 100434c:	imul   eax,DWORD PTR [rax],0x41
 100434f:	add    BYTE PTR [rdx+0x0],dh
 1004352:	jb     0x1004354
 1004354:	(bad)  
 1004355:	add    BYTE PTR [rcx+0x0],bh
 1004358:	push   rax
 1004359:	add    BYTE PTR [rax+rax*1+0x72],dh
 100435d:	add    BYTE PTR [rax],ah
 100435f:	add    BYTE PTR [rbx+0x0],ah
 1004362:	outs   dx,DWORD PTR ds:[rsi]
 1004363:	add    BYTE PTR [rsi+0x0],ch
 1004366:	je     0x1004368
 1004368:	add    BYTE PTR gs:[rsi+0x0],ch
 100436c:	je     0x100436e
 100436e:	cmp    al,BYTE PTR [rax]
 1004370:	and    BYTE PTR [rax],al
 1004372:	and    eax,0x7800
	...
 100437f:	add    BYTE PTR [rbp+0x0],dl
 1004382:	outs   dx,BYTE PTR ds:[rsi]
 1004383:	add    BYTE PTR [rcx+0x0],ah
 1004386:	(bad)  
 1004387:	add    BYTE PTR [rax+rax*1+0x65],ch
 100438b:	add    BYTE PTR [rax],ah
 100438d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1004391:	add    BYTE PTR [rax],ah
 1004393:	add    BYTE PTR [rdx+0x0],dh
 1004396:	add    BYTE PTR gs:[rcx+0x0],ah
 100439a:	add    BYTE PTR fs:[rax],ah
 100439d:	add    BYTE PTR [rdx+0x0],dh
 10043a0:	add    BYTE PTR gs:[rbp+0x0],ch
 10043a4:	outs   dx,DWORD PTR ds:[rsi]
 10043a5:	add    BYTE PTR [rax+rax*1+0x65],dh
 10043a9:	add    BYTE PTR [rax],ah
 10043ab:	add    BYTE PTR [rdx+0x0],ah
 10043ae:	jne    0x10043b0
 10043b0:	data16 add BYTE PTR [rsi+0x0],ah
 10043b4:	add    BYTE PTR gs:[rdx+0x0],dh
 10043b8:	and    BYTE PTR [rax],al
 10043ba:	jo     0x10043bc
 10043bc:	outs   dx,DWORD PTR ds:[rsi]
 10043bd:	add    BYTE PTR [rdi+0x0],ch
 10043c0:	ins    BYTE PTR es:[rdi],dx
 10043c1:	add    BYTE PTR [rax],ah
 10043c3:	add    BYTE PTR [rdi+0x0],ch
 10043c6:	jb     0x10043c8
 10043c8:	and    BYTE PTR [rax],al
 10043ca:	ins    DWORD PTR es:[rdi],dx
 10043cb:	add    BYTE PTR [rbp+0x0],ah
 10043ce:	ins    DWORD PTR es:[rdi],dx
 10043cf:	add    BYTE PTR [rdi+0x0],ch
 10043d2:	jb     0x10043d4
 10043d4:	jns    0x10043d6
 10043d6:	and    BYTE PTR [rax],al
 10043d8:	ins    DWORD PTR es:[rdi],dx
 10043d9:	add    BYTE PTR [rcx+0x0],ah
 10043dc:	outs   dx,BYTE PTR ds:[rsi]
 10043dd:	add    BYTE PTR [rcx+0x0],ah
 10043e0:	add    BYTE PTR [ebp+0x0],ah
 10043e4:	jb     0x10043e6
 10043e6:	and    BYTE PTR [rax],al
 10043e8:	imul   eax,DWORD PTR [rax],0x66006e
 10043ee:	outs   dx,DWORD PTR ds:[rsi]
 10043ef:	add    BYTE PTR [rdx+0x0],dh
 10043f2:	ins    DWORD PTR es:[rdi],dx
 10043f3:	add    BYTE PTR [rcx+0x0],ah
 10043f6:	je     0x10043f8
 10043f8:	imul   eax,DWORD PTR [rax],0x6e006f
 10043fe:	and    BYTE PTR [rax],al
 1004400:	jae    0x1004402
 1004402:	je     0x1004404
 1004404:	jb     0x1004406
 1004406:	jne    0x1004408
 1004408:	movsxd eax,DWORD PTR [rax]
 100440a:	je     0x100440c
 100440c:	and    BYTE PTR [rax],al
 100440e:	outs   dx,DWORD PTR ds:[rsi]
 100440f:	add    BYTE PTR [rdx+0x0],dh
 1004412:	and    BYTE PTR [rax],al
 1004414:	ins    BYTE PTR es:[rdi],dx
 1004415:	add    BYTE PTR [rcx+0x0],ch
 1004418:	jae    0x100441a
 100441a:	je     0x100441c
 100441c:	and    BYTE PTR [rax],al
 100441e:	outs   dx,DWORD PTR ds:[rsi]
 100441f:	add    BYTE PTR [rsi+0x0],ah
 1004422:	and    BYTE PTR [rax],al
 1004424:	jb     0x1004426
 1004426:	(bad)  
 1004427:	add    BYTE PTR [rsi+0x0],ch
 100442a:	add    BYTE PTR [ebp+0x0],ah
 100442e:	jae    0x1004430
 1004430:	and    BYTE PTR [rax],al
 1004432:	je     0x1004434
 1004434:	outs   dx,DWORD PTR ds:[rsi]
 1004435:	add    BYTE PTR [rax],ah
 1004437:	add    BYTE PTR [rbp+0x0],ah
 100443a:	js     0x100443c
 100443c:	movsxd eax,DWORD PTR [rax]
 100443e:	ins    BYTE PTR es:[rdi],dx
 100443f:	add    BYTE PTR [rbp+0x0],dh
 1004442:	add    BYTE PTR fs:[rbp+0x0],ah
	...
 100444e:	add    BYTE PTR [rax],al
 1004450:	rex.X add BYTE PTR [rdx+0x0],sil
 1004454:	imul   eax,DWORD PTR [rax],0x6b0063
 100445a:	and    BYTE PTR [rax],al
 100445c:	pop    rbx
 100445d:	add    BYTE PTR [rip+0x5d006400],ah        # 0x5e00a863
 1004463:	add    BYTE PTR [rax],ah
 1004465:	add    BYTE PTR [rbx+0x0],dl
 1004468:	add    BYTE PTR gs:[rdx+0x0],dh
 100446c:	jbe    0x100446e
 100446e:	add    BYTE PTR gs:[rdx+0x0],dh
 1004472:	rex.WRX add BYTE PTR [rcx+0x0],r12b
 1004476:	ins    DWORD PTR es:[rdi],dx
 1004477:	add    BYTE PTR [rbp+0x0],ah
 100447a:	and    BYTE PTR [rax],al
 100447c:	pop    rbx
 100447d:	add    BYTE PTR [rip+0x25007300],ah        # 0x2600b783
 1004483:	add    BYTE PTR [rbx+0x0],dh
 1004486:	pop    rbp
 1004487:	add    BYTE PTR [rax],ah
 1004489:	add    BYTE PTR [rcx+0x0],cl
 100448c:	outs   dx,BYTE PTR ds:[rsi]
 100448d:	add    BYTE PTR [rbx+0x0],dh
 1004490:	je     0x1004492
 1004492:	(bad)  
 1004493:	add    BYTE PTR [rsi+0x0],ch
 1004496:	movsxd eax,DWORD PTR [rax]
 1004498:	add    BYTE PTR gs:[rsi+0x0],cl
 100449c:	(bad)  
 100449d:	add    BYTE PTR [rbp+0x0],ch
 10044a0:	add    BYTE PTR gs:[rax],ah
 10044a3:	add    BYTE PTR [rbx+0x0],bl
 10044a6:	and    eax,0x5d007300
 10044ab:	add    BYTE PTR [rax],ah
 10044ad:	add    BYTE PTR [rax+0x0],dl
 10044b0:	outs   dx,DWORD PTR ds:[rsi]
 10044b1:	add    BYTE PTR [rdx+0x0],dh
 10044b4:	je     0x10044b6
 10044b6:	and    BYTE PTR [rax],al
 10044b8:	pop    rbx
 10044b9:	add    BYTE PTR [rip+0x5d006400],ah        # 0x5e00a8bf
 10044bf:	add    BYTE PTR [rdx],cl
	...
 10044cd:	add    BYTE PTR [rax],al
 10044cf:	add    BYTE PTR [rbx+0x0],al
 10044d2:	outs   dx,DWORD PTR ds:[rsi]
 10044d3:	add    BYTE PTR [rbp+0x0],dh
 10044d6:	ins    BYTE PTR es:[rdi],dx
 10044d7:	add    BYTE PTR [rax+rax*1+0x20],ah
 10044db:	add    BYTE PTR [rsi+0x0],ch
 10044de:	outs   dx,DWORD PTR ds:[rsi]
 10044df:	add    BYTE PTR [rax+rax*1+0x20],dh
 10044e3:	add    BYTE PTR [rdi+0x0],ch
 10044e6:	jo     0x10044e8
 10044e8:	add    BYTE PTR gs:[rsi+0x0],ch
 10044ec:	and    BYTE PTR [rax],al
 10044ee:	ins    DWORD PTR es:[rdi],dx
 10044ef:	add    BYTE PTR [rdi+0x0],ch
 10044f2:	add    BYTE PTR fs:[rbp+0x0],dh
 10044f6:	ins    BYTE PTR es:[rdi],dx
 10044f7:	add    BYTE PTR [rbp+0x0],ah
 10044fa:	and    BYTE PTR [rax],al
 10044fc:	imul   eax,DWORD PTR [rax],0x66006e
 1004502:	outs   dx,DWORD PTR ds:[rsi]
 1004503:	add    BYTE PTR [rdx+0x0],dh
 1004506:	ins    DWORD PTR es:[rdi],dx
 1004507:	add    BYTE PTR [rcx+0x0],ah
 100450a:	je     0x100450c
 100450c:	imul   eax,DWORD PTR [rax],0x6e006f
 1004512:	and    BYTE PTR [rax],al
 1004514:	data16 add BYTE PTR [rdi+0x0],ch
 1004518:	jb     0x100451a
 100451a:	and    BYTE PTR [rax],al
 100451c:	jb     0x100451e
 100451e:	add    BYTE PTR gs:[rbp+0x0],ch
 1004522:	outs   dx,DWORD PTR ds:[rsi]
 1004523:	add    BYTE PTR [rax+rax*1+0x65],dh
 1004527:	add    BYTE PTR [rax],ah
 1004529:	add    BYTE PTR [rax+0x0],dh
 100452c:	jb     0x100452e
 100452e:	outs   dx,DWORD PTR ds:[rsi]
 100452f:	add    BYTE PTR [rbx+0x0],ah
 1004532:	add    BYTE PTR gs:[rbx+0x0],dh
 1004536:	jae    0x1004538
 1004538:	and    BYTE PTR [rax],al
 100453a:	sub    BYTE PTR [rax],al
 100453c:	and    eax,0x29006400
 1004541:	add    BYTE PTR [rsi],ch
 1004543:	add    BYTE PTR [rax],al
 1004545:	add    BYTE PTR [rax],al
 1004547:	add    BYTE PTR [rbx+0x0],al
 100454a:	outs   dx,DWORD PTR ds:[rsi]
 100454b:	add    BYTE PTR [rbp+0x0],dh
 100454e:	ins    BYTE PTR es:[rdi],dx
 100454f:	add    BYTE PTR [rax+rax*1+0x20],ah
 1004553:	add    BYTE PTR [rsi+0x0],ch
 1004556:	outs   dx,DWORD PTR ds:[rsi]
 1004557:	add    BYTE PTR [rax+rax*1+0x20],dh
 100455b:	add    BYTE PTR [rax+rax*1+0x6f],ch
 100455f:	add    BYTE PTR [rcx+0x0],ah
 1004562:	add    BYTE PTR fs:[rax],ah
 1004565:	add    BYTE PTR [rbp+0x0],ch
 1004568:	outs   dx,DWORD PTR ds:[rsi]
 1004569:	add    BYTE PTR [rax+rax*1+0x75],ah
 100456d:	add    BYTE PTR [rax+rax*1+0x65],ch
 1004571:	add    BYTE PTR [rax],ah
 1004573:	add    BYTE PTR [rip+0x20007300],ah        # 0x2100b879
 1004579:	add    BYTE PTR [rax],ch
 100457b:	add    BYTE PTR [rip+0x29006400],ah        # 0x2a00a981
 1004581:	add    BYTE PTR [rsi],ch
	...
 100458f:	add    BYTE PTR [rbx+0x0],al
 1004592:	outs   dx,DWORD PTR ds:[rsi]
 1004593:	add    BYTE PTR [rbp+0x0],dh
 1004596:	ins    BYTE PTR es:[rdi],dx
 1004597:	add    BYTE PTR [rax+rax*1+0x20],ah
 100459b:	add    BYTE PTR [rsi+0x0],ch
 100459e:	outs   dx,DWORD PTR ds:[rsi]
 100459f:	add    BYTE PTR [rax+rax*1+0x20],dh
 10045a3:	add    BYTE PTR [rdi+0x0],ch
 10045a6:	jo     0x10045a8
 10045a8:	add    BYTE PTR gs:[rsi+0x0],ch
 10045ac:	and    BYTE PTR [rax],al
 10045ae:	ins    DWORD PTR es:[rdi],dx
 10045af:	add    BYTE PTR [rdi+0x0],ch
 10045b2:	add    BYTE PTR fs:[rbp+0x0],dh
 10045b6:	ins    BYTE PTR es:[rdi],dx
 10045b7:	add    BYTE PTR [rbp+0x0],ah
 10045ba:	and    BYTE PTR [rax],al
 10045bc:	imul   eax,DWORD PTR [rax],0x66006e
 10045c2:	outs   dx,DWORD PTR ds:[rsi]
 10045c3:	add    BYTE PTR [rdx+0x0],dh
 10045c6:	ins    DWORD PTR es:[rdi],dx
 10045c7:	add    BYTE PTR [rcx+0x0],ah
 10045ca:	je     0x10045cc
 10045cc:	imul   eax,DWORD PTR [rax],0x6e006f
 10045d2:	and    BYTE PTR [rax],al
 10045d4:	data16 add BYTE PTR [rdi+0x0],ch
 10045d8:	jb     0x10045da
 10045da:	and    BYTE PTR [rax],al
 10045dc:	ins    BYTE PTR es:[rdi],dx
 10045dd:	add    BYTE PTR [rdi+0x0],ch
 10045e0:	movsxd eax,DWORD PTR [rax]
 10045e2:	(bad)  
 10045e3:	add    BYTE PTR [rax+rax*1+0x20],ch
 10045e7:	add    BYTE PTR [rcx+0x0],ch
 10045ea:	ins    DWORD PTR es:[rdi],dx
 10045eb:	add    BYTE PTR [rcx+0x0],ah
 10045ee:	add    BYTE PTR [ebp+0x0],ah
 10045f2:	and    BYTE PTR [rax],al
 10045f4:	sub    BYTE PTR [rax],al
 10045f6:	and    eax,0x29006400
 10045fb:	add    BYTE PTR [rsi],ch
 10045fd:	add    BYTE PTR [rax],al
 10045ff:	add    BYTE PTR [rbx+0x0],al
 1004602:	outs   dx,DWORD PTR ds:[rsi]
 1004603:	add    BYTE PTR [rbp+0x0],dh
 1004606:	ins    BYTE PTR es:[rdi],dx
 1004607:	add    BYTE PTR [rax+rax*1+0x20],ah
 100460b:	add    BYTE PTR [rsi+0x0],ch
 100460e:	outs   dx,DWORD PTR ds:[rsi]
 100460f:	add    BYTE PTR [rax+rax*1+0x20],dh
 1004613:	add    BYTE PTR [rbp+0x0],ah
 1004616:	outs   dx,BYTE PTR ds:[rsi]
 1004617:	add    BYTE PTR [rbp+0x0],dh
 100461a:	ins    DWORD PTR es:[rdi],dx
 100461b:	add    BYTE PTR [rbp+0x0],ah
 100461e:	jb     0x1004620
 1004620:	(bad)  
 1004621:	add    BYTE PTR [rax+rax*1+0x65],dh
 1004625:	add    BYTE PTR [rax],ah
 1004627:	add    BYTE PTR [rax+0x0],dh
 100462a:	jb     0x100462c
 100462c:	outs   dx,DWORD PTR ds:[rsi]
 100462d:	add    BYTE PTR [rbx+0x0],ah
 1004630:	add    BYTE PTR gs:[rbx+0x0],dh
 1004634:	jae    0x1004636
 1004636:	and    BYTE PTR [rax],al
 1004638:	ins    DWORD PTR es:[rdi],dx
 1004639:	add    BYTE PTR [rdi+0x0],ch
 100463c:	add    BYTE PTR fs:[rbp+0x0],dh
 1004640:	ins    BYTE PTR es:[rdi],dx
 1004641:	add    BYTE PTR [rbp+0x0],ah
 1004644:	jae    0x1004646
 1004646:	and    BYTE PTR [rax],al
 1004648:	sub    BYTE PTR [rax],al
 100464a:	and    eax,0x29006400
 100464f:	add    BYTE PTR [rsi],ch
 1004651:	add    BYTE PTR [rax],al
 1004653:	add    BYTE PTR [rax],al
 1004655:	add    BYTE PTR [rax],al
 1004657:	add    BYTE PTR [rbx+0x71],dh
 100465a:	ins    BYTE PTR es:[rdi],dx
 100465b:	ins    DWORD PTR es:[rdi],dx
 100465c:	imul   ebp,DWORD PTR [rsi+0x2e],0x6c6c64
 1004663:	add    BYTE PTR [rax],al
 1004665:	add    BYTE PTR [rax],al
 1004667:	add    BYTE PTR [rdx+0x75],ah
 100466a:	data16 data16 gs jb 0x10046bf
 100466f:	outs   dx,DWORD PTR ds:[rsi]
 1004670:	outs   dx,DWORD PTR ds:[rsi]
 1004671:	ins    BYTE PTR es:[rdi],dx
 1004672:	rex.WB outs dx,BYTE PTR ds:[rsi]
 1004674:	outs   dx,WORD PTR ds:[rsi]
 1004676:	add    BYTE PTR [rax],al
 1004678:	jae    0x10046eb
 100467a:	ins    BYTE PTR es:[rdi],dx
 100467b:	imul   ebp,DWORD PTR fs:[rsi],0x64
 100467f:	ins    BYTE PTR es:[rdi],dx
 1004680:	ins    BYTE PTR es:[rdi],dx
 1004681:	add    BYTE PTR [rax],al
 1004683:	add    BYTE PTR [rax],al
 1004685:	add    BYTE PTR [rax],al
 1004687:	add    BYTE PTR [rbp+0x65],ch
 100468a:	ins    DWORD PTR es:[rdi],dx
 100468b:	rex.WRB
 100468c:	addr32 jb 0x10046d8
 100468f:	outs   dx,BYTE PTR ds:[rsi]
 1004690:	outs   dx,WORD PTR ds:[rsi]
 1004692:	add    BYTE PTR [rax],al
 1004694:	add    BYTE PTR [rax],al
 1004696:	add    BYTE PTR [rax],al
 1004698:	outs   dx,BYTE PTR ds:[rsi]
 1004699:	jne    0x1004708
 100469b:	(bad)  
 100469c:	gs jb  0x10046ee
 100469f:	data16 rex.X jb 0x100470c
 10046a3:	movsxd ebp,DWORD PTR [rbx+0x73]
 10046a6:	push   rax
 10046a7:	je     0x100471b
 10046a9:	add    BYTE PTR [rax],al
 10046ab:	add    BYTE PTR [rax],al
 10046ad:	add    BYTE PTR [rax],al
 10046af:	add    BYTE PTR [rdi+rbp*2+0x63],ch
 10046b3:	(bad)  
 10046b4:	ins    BYTE PTR es:[rdi],dx
 10046b5:	rex.X jb 0x1004721
 10046b8:	movsxd ebp,DWORD PTR [rbx+0x49]
 10046bb:	fs push rax
 10046bd:	je     0x1004731
 10046bf:	add    BYTE PTR [rbx+0x6f],ah
 10046c2:	outs   dx,BYTE PTR ds:[rsi]
 10046c3:	imul   sp,WORD PTR [rdi+0x50],0x7274
 10046c9:	add    BYTE PTR [rax],al
 10046cb:	add    BYTE PTR [rax],al
 10046cd:	add    BYTE PTR [rax],al
 10046cf:	add    BYTE PTR [rbp+0x0],dl
 10046d2:	outs   dx,BYTE PTR ds:[rsi]
 10046d3:	add    BYTE PTR [rcx+0x0],ah
 10046d6:	(bad)  
 10046d7:	add    BYTE PTR [rax+rax*1+0x65],ch
 10046db:	add    BYTE PTR [rax],ah
 10046dd:	add    BYTE PTR [rax+rax*1+0x6f],dh
 10046e1:	add    BYTE PTR [rax],ah
 10046e3:	add    BYTE PTR [rdx+0x0],dh
 10046e6:	add    BYTE PTR gs:[rcx+0x0],ah
 10046ea:	add    BYTE PTR fs:[rax],ah
 10046ed:	add    BYTE PTR [rdx+0x0],ah
 10046f0:	jb     0x10046f2
 10046f2:	imul   eax,DWORD PTR [rax],0x6b0063
 10046f8:	and    BYTE PTR [rax],al
 10046fa:	imul   eax,DWORD PTR [rax],0x66006e
 1004700:	outs   dx,DWORD PTR ds:[rsi]
 1004701:	add    BYTE PTR [rdx+0x0],dh
 1004704:	ins    DWORD PTR es:[rdi],dx
 1004705:	add    BYTE PTR [rcx+0x0],ah
 1004708:	je     0x100470a
 100470a:	imul   eax,DWORD PTR [rax],0x6e006f
 1004710:	and    BYTE PTR [rax],al
 1004712:	sub    BYTE PTR [rax],al
 1004714:	and    eax,0x29006400
 1004719:	add    BYTE PTR [rsi],ch
 100471b:	add    BYTE PTR [rax],al
 100471d:	add    BYTE PTR [rax],al
 100471f:	add    BYTE PTR [rbp+0x0],dl
 1004722:	outs   dx,BYTE PTR ds:[rsi]
 1004723:	add    BYTE PTR [rcx+0x0],ah
 1004726:	(bad)  
 1004727:	add    BYTE PTR [rax+rax*1+0x65],ch
 100472b:	add    BYTE PTR [rax],ah
 100472d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1004731:	add    BYTE PTR [rax],ah
 1004733:	add    BYTE PTR [rdx+0x0],dh
 1004736:	add    BYTE PTR gs:[rcx+0x0],ah
 100473a:	add    BYTE PTR fs:[rax],ah
 100473d:	add    BYTE PTR [rdx+0x0],ah
 1004740:	jb     0x1004742
 1004742:	imul   eax,DWORD PTR [rax],0x6b0063
 1004748:	jae    0x100474a
 100474a:	and    BYTE PTR [rax],al
 100474c:	imul   eax,DWORD PTR [rax],0x66006e
 1004752:	outs   dx,DWORD PTR ds:[rsi]
 1004753:	add    BYTE PTR [rdx+0x0],dh
 1004756:	ins    DWORD PTR es:[rdi],dx
 1004757:	add    BYTE PTR [rcx+0x0],ah
 100475a:	je     0x100475c
 100475c:	imul   eax,DWORD PTR [rax],0x6e006f
 1004762:	and    BYTE PTR [rax],al
 1004764:	sub    BYTE PTR [rax],al
 1004766:	and    eax,0x29006400
 100476b:	add    BYTE PTR [rsi],ch
 100476d:	add    BYTE PTR [rax],al
 100476f:	add    BYTE PTR [rbp+0x0],dl
 1004772:	outs   dx,BYTE PTR ds:[rsi]
 1004773:	add    BYTE PTR [rcx+0x0],ah
 1004776:	(bad)  
 1004777:	add    BYTE PTR [rax+rax*1+0x65],ch
 100477b:	add    BYTE PTR [rax],ah
 100477d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1004781:	add    BYTE PTR [rax],ah
 1004783:	add    BYTE PTR [rsi+0x0],ah
 1004786:	imul   eax,DWORD PTR [rax],0x64006e
 100478c:	and    BYTE PTR [rax],al
 100478e:	movsxd eax,DWORD PTR [rax]
 1004790:	outs   dx,DWORD PTR ds:[rsi]
 1004791:	add    BYTE PTR [rdx+0x0],dh
 1004794:	jb     0x1004796
 1004796:	add    BYTE PTR gs:[rbx+0x0],ah
 100479a:	je     0x100479c
 100479c:	and    BYTE PTR [rax],al
 100479e:	movsxd eax,DWORD PTR [rax]
 10047a0:	outs   dx,DWORD PTR ds:[rsi]
 10047a1:	add    BYTE PTR [rbp+0x0],dh
 10047a4:	outs   dx,BYTE PTR ds:[rsi]
 10047a5:	add    BYTE PTR [rax+rax*1+0x20],dh
 10047a9:	add    BYTE PTR [rdi+0x0],ch
 10047ac:	data16 add BYTE PTR [rax],ah
 10047af:	add    BYTE PTR [rdx+0x0],ah
 10047b2:	jb     0x10047b4
 10047b4:	imul   eax,DWORD PTR [rax],0x6b0063
 10047ba:	jae    0x10047bc
 10047bc:	add    BYTE PTR cs:[rax],al
 10047bf:	add    BYTE PTR [rip+0x20007300],ah        # 0x2100bac5
 10047c5:	add    BYTE PTR [rax],dh
 10047c7:	add    BYTE PTR [rax+0x0],bh
 10047ca:	and    eax,0x20007800
 10047cf:	add    BYTE PTR [rip+0x25002000],ch        # 0x260067d5
 10047d5:	add    BYTE PTR [rax+rax*1+0x73],ch
 10047d9:	add    BYTE PTR [rax],al
 10047db:	add    BYTE PTR [rax],al
 10047dd:	add    BYTE PTR [rax],al
 10047df:	add    BYTE PTR [rip+0x20007300],ah        # 0x2100bae5
 10047e5:	add    BYTE PTR [rax],dh
 10047e7:	add    BYTE PTR [rax+0x0],bh
 10047ea:	and    eax,0x7800
 10047ef:	add    BYTE PTR [rbp+0x0],dl
 10047f2:	outs   dx,BYTE PTR ds:[rsi]
 10047f3:	add    BYTE PTR [rcx+0x0],ah
 10047f6:	(bad)  
 10047f7:	add    BYTE PTR [rax+rax*1+0x65],ch
 10047fb:	add    BYTE PTR [rax],ah
 10047fd:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1004801:	add    BYTE PTR [rax],ah
 1004803:	add    BYTE PTR [rcx+0x0],ah
 1004806:	ins    BYTE PTR es:[rdi],dx
 1004807:	add    BYTE PTR [rax+rax*1+0x6f],ch
 100480b:	add    BYTE PTR [rbx+0x0],ah
 100480e:	(bad)  
 100480f:	add    BYTE PTR [rax+rax*1+0x65],dh
 1004813:	add    BYTE PTR [rax],ah
 1004815:	add    BYTE PTR [rdx+0x0],ah
 1004818:	jb     0x100481a
 100481a:	imul   eax,DWORD PTR [rax],0x6b0063
 1004820:	and    BYTE PTR [rax],al
 1004822:	imul   eax,DWORD PTR [rax],0x66006e
 1004828:	outs   dx,DWORD PTR ds:[rsi]
 1004829:	add    BYTE PTR [rax],al
 100482b:	add    BYTE PTR [rax],al
 100482d:	add    BYTE PTR [rax],al
 100482f:	add    BYTE PTR [rcx+0x0],al
 1004832:	jb     0x1004834
 1004834:	add    BYTE PTR [ebp+0x0],dh
 1004838:	ins    DWORD PTR es:[rdi],dx
 1004839:	add    BYTE PTR [rbp+0x0],ah
 100483c:	outs   dx,BYTE PTR ds:[rsi]
 100483d:	add    BYTE PTR [rax+rax*1+0x20],dh
 1004841:	add    BYTE PTR [rsi+0x0],ah
 1004844:	outs   dx,DWORD PTR ds:[rsi]
 1004845:	add    BYTE PTR [rdx+0x0],dh
 1004848:	and    BYTE PTR [rax],al
 100484a:	jb     0x100484c
 100484c:	add    BYTE PTR gs:[rbp+0x0],ch
 1004850:	outs   dx,DWORD PTR ds:[rsi]
 1004851:	add    BYTE PTR [rax+rax*1+0x65],dh
 1004855:	add    BYTE PTR [rax],ah
 1004857:	add    BYTE PTR [rax+rax*1+0x75],ah
 100485b:	add    BYTE PTR [rbp+0x0],ch
 100485e:	jo     0x1004860
 1004860:	and    BYTE PTR [rax],al
 1004862:	imul   eax,DWORD PTR [rax],0x76006e
 1004868:	outs   dx,DWORD PTR ds:[rsi]
 1004869:	add    BYTE PTR [rbx+0x0],ch
 100486c:	add    BYTE PTR gs:[rax],ah
 100486f:	add    BYTE PTR [rcx+0x0],ch
 1004872:	jae    0x1004874
 1004874:	and    BYTE PTR [rax],al
 1004876:	imul   eax,DWORD PTR [rax],0x63006e
 100487c:	outs   dx,DWORD PTR ds:[rsi]
 100487d:	add    BYTE PTR [rdx+0x0],dh
 1004880:	jb     0x1004882
 1004882:	add    BYTE PTR gs:[rbx+0x0],ah
 1004886:	je     0x1004888
	...
 1004890:	push   rsp
 1004891:	add    BYTE PTR [rdx+0x0],dh
 1004894:	(bad)  
 1004895:	add    BYTE PTR [rsi+0x0],ch
 1004898:	jae    0x100489a
 100489a:	(bad)  
 100489b:	add    BYTE PTR [rbx+0x0],ah
 100489e:	je     0x10048a0
 10048a0:	imul   eax,DWORD PTR [rax],0x6e006f
 10048a6:	and    BYTE PTR [rax],al
 10048a8:	add    BYTE PTR [ebp+0x0],dh
 10048ac:	imul   eax,DWORD PTR [rax],0x200064
 10048b2:	data16 add BYTE PTR [rdi+0x0],ch
 10048b6:	jb     0x10048b8
 10048b8:	ins    DWORD PTR es:[rdi],dx
 10048b9:	add    BYTE PTR [rcx+0x0],ah
 10048bc:	je     0x10048be
 10048be:	and    BYTE PTR [rax],al
 10048c0:	imul   eax,DWORD PTR [rax],0x200073
 10048c6:	imul   eax,DWORD PTR [rax],0x63006e
 10048cc:	outs   dx,DWORD PTR ds:[rsi]
 10048cd:	add    BYTE PTR [rdx+0x0],dh
 10048d0:	jb     0x10048d2
 10048d2:	add    BYTE PTR gs:[rbx+0x0],ah
 10048d6:	je     0x10048d8
	...
 10048e0:	rex.WRXB add BYTE PTR [r10+0x0],r14b
 10048e4:	imul   eax,DWORD PTR [rax],0x690067
 10048ea:	outs   dx,BYTE PTR ds:[rsi]
 10048eb:	add    BYTE PTR [rcx+0x0],ah
 10048ee:	je     0x10048f0
 10048f0:	outs   dx,DWORD PTR ds:[rsi]
 10048f1:	add    BYTE PTR [rdx+0x0],dh
 10048f4:	and    BYTE PTR [rax],al
 10048f6:	data16 add BYTE PTR [rdi+0x0],ch
 10048fa:	jb     0x10048fc
 10048fc:	ins    DWORD PTR es:[rdi],dx
 10048fd:	add    BYTE PTR [rcx+0x0],ah
 1004900:	je     0x1004902
 1004902:	and    BYTE PTR [rax],al
 1004904:	imul   eax,DWORD PTR [rax],0x200073
 100490a:	imul   eax,DWORD PTR [rax],0x63006e
 1004910:	outs   dx,DWORD PTR ds:[rsi]
 1004911:	add    BYTE PTR [rdx+0x0],dh
 1004914:	jb     0x1004916
 1004916:	add    BYTE PTR gs:[rbx+0x0],ah
 100491a:	je     0x100491c
 100491c:	add    BYTE PTR [rax],al
 100491e:	add    BYTE PTR [rax],al
 1004920:	and    eax,0x5800
 1004925:	add    BYTE PTR [rax],al
 1004927:	add    BYTE PTR [rip+0x6400],ah        # 0x100ad2d
 100492d:	add    BYTE PTR [rax],al
 100492f:	add    BYTE PTR [rdi+0x0],dl
 1004932:	jb     0x1004934
 1004934:	outs   dx,DWORD PTR ds:[rsi]
 1004935:	add    BYTE PTR [rsi+0x0],ch
 1004938:	add    BYTE PTR [eax],ah
 100493b:	add    BYTE PTR [rsi+0x0],ch
 100493e:	jne    0x1004940
 1004940:	ins    DWORD PTR es:[rdi],dx
 1004941:	add    BYTE PTR [rdx+0x0],ah
 1004944:	add    BYTE PTR gs:[rdx+0x0],dh
 1004948:	and    BYTE PTR [rax],al
 100494a:	outs   dx,DWORD PTR ds:[rsi]
 100494b:	add    BYTE PTR [rsi+0x0],ah
 100494e:	and    BYTE PTR [rax],al
 1004950:	jo     0x1004952
 1004952:	(bad)  
 1004953:	add    BYTE PTR [rdx+0x0],dh
 1004956:	(bad)  
 1004957:	add    BYTE PTR [rbp+0x0],ch
 100495a:	add    BYTE PTR gs:[rax+rax*1+0x65],dh
 100495f:	add    BYTE PTR [rdx+0x0],dh
 1004962:	jae    0x1004964
 1004964:	and    BYTE PTR [rax],al
 1004966:	imul   eax,DWORD PTR [rax],0x20006e
 100496c:	jb     0x100496e
 100496e:	add    BYTE PTR gs:[rbp+0x0],ch
 1004972:	outs   dx,DWORD PTR ds:[rsi]
 1004973:	add    BYTE PTR [rax+rax*1+0x65],dh
 1004977:	add    BYTE PTR [rax],ah
 1004979:	add    BYTE PTR [rax+rax*1+0x75],ah
 100497d:	add    BYTE PTR [rbp+0x0],ch
 1004980:	jo     0x1004982
 1004982:	and    BYTE PTR [rax],al
 1004984:	imul   eax,DWORD PTR [rax],0x76006e
 100498a:	outs   dx,DWORD PTR ds:[rsi]
 100498b:	add    BYTE PTR [rbx+0x0],ch
 100498e:	(bad)  
 100498f:	add    BYTE PTR [rax+rax*1+0x69],dh
 1004993:	add    BYTE PTR [rdi+0x0],ch
 1004996:	outs   dx,BYTE PTR ds:[rsi]
	...
 100499f:	add    BYTE PTR [rip+0x5f007300],ah        # 0x6000bca5
 10049a5:	add    BYTE PTR [rip+0x5f007300],ah        # 0x6000bcab
 10049ab:	add    BYTE PTR [rax],al
 10049ad:	add    BYTE PTR [rax],al
 10049af:	add    BYTE PTR [rbx+0x0],al
 10049b2:	(bad)  
 10049b3:	add    BYTE PTR [rsi+0x0],ch
 10049b6:	je     0x10049b8
 10049b8:	and    BYTE PTR [rax],al
 10049ba:	add    BYTE PTR [ebp+0x0],ah
 10049be:	je     0x10049c0
 10049c0:	and    BYTE PTR [rax],al
 10049c2:	rex.XB add BYTE PTR [r15+0x0],bpl
 10049c6:	ins    DWORD PTR es:[rdi],dx
 10049c7:	add    BYTE PTR [rax+0x0],dh
 10049ca:	jne    0x10049cc
 10049cc:	je     0x10049ce
 10049ce:	add    BYTE PTR gs:[rdx+0x0],dh
 10049d2:	rex.WRX add BYTE PTR [rcx+0x0],r12b
 10049d6:	ins    DWORD PTR es:[rdi],dx
 10049d7:	add    BYTE PTR [rbp+0x0],ah
 10049da:	add    BYTE PTR [rax],al
 10049dc:	add    BYTE PTR [rax],al
 10049de:	add    BYTE PTR [rax],al
 10049e0:	push   rbp
 10049e1:	add    BYTE PTR [rsi+0x0],ch
 10049e4:	(bad)  
 10049e5:	add    BYTE PTR [rdx+0x0],ah
 10049e8:	ins    BYTE PTR es:[rdi],dx
 10049e9:	add    BYTE PTR [rbp+0x0],ah
 10049ec:	and    BYTE PTR [rax],al
 10049ee:	je     0x10049f0
 10049f0:	outs   dx,DWORD PTR ds:[rsi]
 10049f1:	add    BYTE PTR [rax],ah
 10049f3:	add    BYTE PTR [rdi+0x0],ch
 10049f6:	jo     0x10049f8
 10049f8:	add    BYTE PTR gs:[rsi+0x0],ch
 10049fc:	and    BYTE PTR [rax],al
 10049fe:	push   rbx
 10049ff:	add    BYTE PTR [rbx+0x0],al
 1004a02:	rex.WRB add BYTE PTR [r8],r12b
 1004a05:	add    BYTE PTR [rdi+0x0],ch
 1004a08:	outs   dx,BYTE PTR ds:[rsi]
 1004a09:	add    BYTE PTR [rax],ah
 1004a0b:	add    BYTE PTR [rdx+0x0],dh
 1004a0e:	add    BYTE PTR gs:[rbp+0x0],ch
 1004a12:	outs   dx,DWORD PTR ds:[rsi]
 1004a13:	add    BYTE PTR [rax+rax*1+0x65],dh
 1004a17:	add    BYTE PTR [rax],ah
 1004a19:	add    BYTE PTR [rdx+0x0],ah
 1004a1c:	outs   dx,DWORD PTR ds:[rsi]
 1004a1d:	add    BYTE PTR [rax+0x0],bh
	...
 1004a28:	push   rbx
 1004a29:	add    BYTE PTR [rcx+0x0],dl
 1004a2c:	rex.WR add BYTE PTR [rax+rax*1+0x55],r8b
 1004a31:	add    BYTE PTR [rbp+0x0],cl
 1004a34:	push   rax
 1004a35:	add    BYTE PTR [rbp+0x0],al
 1004a38:	push   rdx
 1004a39:	add    BYTE PTR [rax+rax*1],ah
 1004a3c:	add    BYTE PTR [rax],al
 1004a3e:	add    BYTE PTR [rax],al
 1004a40:	sub    eax,0x4d005300
 1004a45:	add    BYTE PTR [rbx+0x0],dl
 1004a48:	push   rbx
 1004a49:	add    BYTE PTR [rcx+0x0],dl
 1004a4c:	rex.WR add BYTE PTR [rbx+0x0],r10b
 1004a50:	add    BYTE PTR [r10+0x0],r10b
 1004a54:	push   rsi
 1004a55:	add    BYTE PTR [rbp+0x0],al
 1004a58:	push   rdx
 1004a59:	add    BYTE PTR [rax],al
 1004a5b:	add    BYTE PTR [rax],al
 1004a5d:	add    BYTE PTR [rax],al
 1004a5f:	add    BYTE PTR [rbx+0x0],dl
 1004a62:	add    BYTE PTR gs:[rdx+0x0],dh
 1004a66:	jbe    0x1004a68
 1004a68:	imul   eax,DWORD PTR [rax],0x650063
 1004a6e:	and    BYTE PTR [rax],al
 1004a70:	outs   dx,BYTE PTR ds:[rsi]
 1004a71:	add    BYTE PTR [rcx+0x0],ah
 1004a74:	ins    DWORD PTR es:[rdi],dx
 1004a75:	add    BYTE PTR [rbp+0x0],ah
 1004a78:	and    BYTE PTR [rax],al
 1004a7a:	je     0x1004a7c
 1004a7c:	outs   dx,DWORD PTR ds:[rsi]
 1004a7d:	add    BYTE PTR [rdi+0x0],ch
 1004a80:	and    BYTE PTR [rax],al
 1004a82:	ins    BYTE PTR es:[rdi],dx
 1004a83:	add    BYTE PTR [rdi+0x0],ch
 1004a86:	outs   dx,BYTE PTR ds:[rsi]
 1004a87:	add    BYTE PTR [rdi+0x0],ah
 1004a8a:	add    BYTE PTR [rax],al
 1004a8c:	add    BYTE PTR [rax],al
 1004a8e:	add    BYTE PTR [rax],al
 1004a90:	push   rbp
 1004a91:	add    BYTE PTR [rsi+0x0],ch
 1004a94:	(bad)  
 1004a95:	add    BYTE PTR [rdx+0x0],ah
 1004a98:	ins    BYTE PTR es:[rdi],dx
 1004a99:	add    BYTE PTR [rbp+0x0],ah
 1004a9c:	and    BYTE PTR [rax],al
 1004a9e:	je     0x1004aa0
 1004aa0:	outs   dx,DWORD PTR ds:[rsi]
 1004aa1:	add    BYTE PTR [rax],ah
 1004aa3:	add    BYTE PTR [rax+rax*1+0x6f],ch
 1004aa7:	add    BYTE PTR [rbx+0x0],ah
 1004aaa:	(bad)  
 1004aab:	add    BYTE PTR [rax+rax*1+0x65],dh
 1004aaf:	add    BYTE PTR [rax],ah
 1004ab1:	add    BYTE PTR [rbx+0x0],dh
 1004ab4:	jo     0x1004ab6
 1004ab6:	add    BYTE PTR gs:[rbx+0x0],ah
 1004aba:	imul   eax,DWORD PTR [rax],0x690066
 1004ac0:	movsxd eax,DWORD PTR [rax]
 1004ac2:	and    BYTE PTR [rax],al
 1004ac4:	push   rbx
 1004ac5:	add    BYTE PTR [rcx+0x0],dl
 1004ac8:	rex.WR add BYTE PTR [rax+rax*1+0x55],r8b
 1004acd:	add    BYTE PTR [rbp+0x0],cl
 1004ad0:	push   rax
 1004ad1:	add    BYTE PTR [rbp+0x0],al
 1004ad4:	push   rdx
 1004ad5:	add    BYTE PTR [rax],ah
 1004ad7:	add    BYTE PTR [rbx+0x0],dh
 1004ada:	add    BYTE PTR gs:[rdx+0x0],dh
 1004ade:	jbe    0x1004ae0
 1004ae0:	imul   eax,DWORD PTR [rax],0x650063
 1004ae6:	add    BYTE PTR [rax],al
 1004ae8:	sub    eax,0x4900
 1004aed:	add    BYTE PTR [rax],al
 1004aef:	add    BYTE PTR [rcx+0x0],cl
 1004af2:	outs   dx,BYTE PTR ds:[rsi]
 1004af3:	add    BYTE PTR [rbx+0x0],dh
 1004af6:	je     0x1004af8
 1004af8:	(bad)  
 1004af9:	add    BYTE PTR [rsi+0x0],ch
 1004afc:	movsxd eax,DWORD PTR [rax]
 1004afe:	add    BYTE PTR gs:[rax],ah
 1004b01:	add    BYTE PTR [rsi+0x0],ch
 1004b04:	(bad)  
 1004b05:	add    BYTE PTR [rbp+0x0],ch
 1004b08:	add    BYTE PTR gs:[rax],ah
 1004b0b:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1004b0f:	add    BYTE PTR [rdi+0x0],ch
 1004b12:	and    BYTE PTR [rax],al
 1004b14:	ins    BYTE PTR es:[rdi],dx
 1004b15:	add    BYTE PTR [rdi+0x0],ch
 1004b18:	outs   dx,BYTE PTR ds:[rsi]
 1004b19:	add    BYTE PTR [rdi+0x0],ah
 1004b1c:	add    BYTE PTR [rax],al
 1004b1e:	add    BYTE PTR [rax],al
 1004b20:	push   rbp
 1004b21:	add    BYTE PTR [rsi+0x0],ch
 1004b24:	(bad)  
 1004b25:	add    BYTE PTR [rdx+0x0],ah
 1004b28:	ins    BYTE PTR es:[rdi],dx
 1004b29:	add    BYTE PTR [rbp+0x0],ah
 1004b2c:	and    BYTE PTR [rax],al
 1004b2e:	je     0x1004b30
 1004b30:	outs   dx,DWORD PTR ds:[rsi]
 1004b31:	add    BYTE PTR [rax],ah
 1004b33:	add    BYTE PTR [rax+0x0],dh
 1004b36:	jb     0x1004b38
 1004b38:	add    BYTE PTR gs:[rax+0x0],dh
 1004b3c:	(bad)  
 1004b3d:	add    BYTE PTR [rdx+0x0],dh
 1004b40:	add    BYTE PTR gs:[rax],ah
 1004b43:	add    BYTE PTR [rax+rax*1+0x75],ah
 1004b47:	add    BYTE PTR [rbp+0x0],ch
 1004b4a:	jo     0x1004b4c
 1004b4c:	add    BYTE PTR gs:[rdx+0x0],dh
 1004b50:	and    BYTE PTR [rax],al
 1004b52:	data16 add BYTE PTR [rax+rax*1+0x61],ch
 1004b57:	add    BYTE PTR [rdi+0x0],ah
 1004b5a:	jae    0x1004b5c
 1004b5c:	add    BYTE PTR [rax],al
 1004b5e:	add    BYTE PTR [rax],al
 1004b60:	sub    eax,0x65007200
 1004b65:	add    BYTE PTR [rbp+0x0],ch
 1004b68:	outs   dx,DWORD PTR ds:[rsi]
 1004b69:	add    BYTE PTR [rax+rax*1+0x65],dh
 1004b6d:	add    BYTE PTR [rbx+0x0],dh
 1004b70:	add    BYTE PTR gs:[rdx+0x0],dh
 1004b74:	jbe    0x1004b76
 1004b76:	add    BYTE PTR gs:[rdx+0x0],dh
 1004b7a:	jae    0x1004b7c
 1004b7c:	cmp    al,BYTE PTR [rax]
 1004b7e:	jb     0x1004b80
 1004b80:	add    BYTE PTR gs:[rbp+0x0],ch
 1004b84:	outs   dx,DWORD PTR ds:[rsi]
 1004b85:	add    BYTE PTR [rax+rax*1+0x65],dh
 1004b89:	add    BYTE PTR [rcx+0x0],ch
 1004b8c:	outs   dx,BYTE PTR ds:[rsi]
 1004b8d:	add    BYTE PTR [rsi+0x0],dh
 1004b90:	outs   dx,DWORD PTR ds:[rsi]
 1004b91:	add    BYTE PTR [rbx+0x0],ch
 1004b94:	add    BYTE PTR gs:[rdx],bh
	...
 1004b9f:	add    BYTE PTR [rbp+0x0],dl
 1004ba2:	outs   dx,BYTE PTR ds:[rsi]
 1004ba3:	add    BYTE PTR [rcx+0x0],ah
 1004ba6:	(bad)  
 1004ba7:	add    BYTE PTR [rax+rax*1+0x65],ch
 1004bab:	add    BYTE PTR [rax],ah
 1004bad:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1004bb1:	add    BYTE PTR [rax],ah
 1004bb3:	add    BYTE PTR [rbx+0x0],dh
 1004bb6:	add    BYTE PTR gs:[rdx+0x0],dh
 1004bba:	imul   eax,DWORD PTR [rax],0x6c0061
 1004bc0:	imul   eax,DWORD PTR [rax],0x65007a
 1004bc6:	and    BYTE PTR [rax],al
 1004bc8:	add    BYTE PTR [ebp+0x0],dh
 1004bcc:	imul   eax,DWORD PTR [rax],0x64
	...
 1004bde:	add    BYTE PTR [rax],al
 1004be0:	push   rbp
 1004be1:	add    BYTE PTR [rsi+0x0],ch
 1004be4:	(bad)  
 1004be5:	add    BYTE PTR [rdx+0x0],ah
 1004be8:	ins    BYTE PTR es:[rdi],dx
 1004be9:	add    BYTE PTR [rbp+0x0],ah
 1004bec:	and    BYTE PTR [rax],al
 1004bee:	je     0x1004bf0
 1004bf0:	outs   dx,DWORD PTR ds:[rsi]
 1004bf1:	add    BYTE PTR [rax],ah
 1004bf3:	add    BYTE PTR [rbx+0x0],ah
 1004bf6:	outs   dx,DWORD PTR ds:[rsi]
 1004bf7:	add    BYTE PTR [rsi+0x0],ch
 1004bfa:	jae    0x1004bfc
 1004bfc:	je     0x1004bfe
 1004bfe:	jb     0x1004c00
 1004c00:	jne    0x1004c02
 1004c02:	movsxd eax,DWORD PTR [rax]
 1004c04:	je     0x1004c06
 1004c06:	and    BYTE PTR [rax],al
 1004c08:	ins    BYTE PTR es:[rdi],dx
 1004c09:	add    BYTE PTR [rcx+0x0],ah
 1004c0c:	jne    0x1004c0e
 1004c0e:	outs   dx,BYTE PTR ds:[rsi]
 1004c0f:	add    BYTE PTR [rbx+0x0],ah
 1004c12:	push   0x70002000
 1004c17:	add    BYTE PTR [rcx+0x0],ah
 1004c1a:	jb     0x1004c1c
 1004c1c:	(bad)  
 1004c1d:	add    BYTE PTR [rbp+0x0],ch
 1004c20:	add    BYTE PTR gs:[rax+rax*1+0x65],dh
 1004c25:	add    BYTE PTR [rdx+0x0],dh
	...
 1004c30:	pop    rsp
 1004c31:	add    BYTE PTR [rip+0x5c007300],ah        # 0x5d00bf37
 1004c37:	add    BYTE PTR [rip+0x5c005800],ah        # 0x5d00a43d
 1004c3d:	add    BYTE PTR [rip+0x5c006400],ah        # 0x5d00b043
 1004c43:	add    BYTE PTR [rip+0x5c006400],ah        # 0x5d00b049
 1004c49:	add    BYTE PTR [rip+0x6400],ah        # 0x100b04f
 1004c4f:	add    BYTE PTR [rdx+0x0],dl
 1004c52:	add    BYTE PTR gs:[rbp+0x0],ch
 1004c56:	outs   dx,DWORD PTR ds:[rsi]
 1004c57:	add    BYTE PTR [rax+rax*1+0x65],dh
 1004c5b:	add    BYTE PTR [rax],ah
 1004c5d:	add    BYTE PTR [rax+rax*1+0x75],ah
 1004c61:	add    BYTE PTR [rbp+0x0],ch
 1004c64:	jo     0x1004c66
 1004c66:	and    BYTE PTR [rax],al
 1004c68:	outs   dx,DWORD PTR ds:[rsi]
 1004c69:	add    BYTE PTR [rsi+0x0],ch
 1004c6c:	and    BYTE PTR [rax],al
 1004c6e:	and    eax,0x20007300
 1004c73:	add    BYTE PTR [rcx+0x0],ch
 1004c76:	outs   dx,BYTE PTR ds:[rsi]
 1004c77:	add    BYTE PTR [rsi+0x0],dh
 1004c7a:	outs   dx,DWORD PTR ds:[rsi]
 1004c7b:	add    BYTE PTR [rbx+0x0],ch
 1004c7e:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1004c83:	add    BYTE PTR [rdi+0x0],dh
 1004c86:	imul   eax,DWORD PTR [rax],0x680074
 1004c8c:	and    BYTE PTR [rax],al
 1004c8e:	jo     0x1004c90
 1004c90:	(bad)  
 1004c91:	add    BYTE PTR [rdx+0x0],dh
 1004c94:	(bad)  
 1004c95:	add    BYTE PTR [rbp+0x0],ch
 1004c98:	add    BYTE PTR gs:[rax+rax*1+0x65],dh
 1004c9d:	add    BYTE PTR [rdx+0x0],dh
 1004ca0:	jae    0x1004ca2
 1004ca2:	and    BYTE PTR [rax],al
 1004ca4:	and    eax,0x20007300
 1004ca9:	add    BYTE PTR [rip+0x20007300],ah        # 0x2100bfaf
 1004caf:	add    BYTE PTR [rip+0x20007300],ah        # 0x2100bfb5
 1004cb5:	add    BYTE PTR [rip+0x20007300],ah        # 0x2100bfbb
 1004cbb:	add    BYTE PTR [rip+0x20007300],ah        # 0x2100bfc1
 1004cc1:	add    BYTE PTR [rip+0x7300],ah        # 0x100bfc7
 1004cc7:	add    BYTE PTR [rbp+0x0],dl
 1004cca:	outs   dx,BYTE PTR ds:[rsi]
 1004ccb:	add    BYTE PTR [rcx+0x0],ah
 1004cce:	(bad)  
 1004ccf:	add    BYTE PTR [rax+rax*1+0x65],ch
 1004cd3:	add    BYTE PTR [rax],ah
 1004cd5:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1004cd9:	add    BYTE PTR [rax],ah
 1004cdb:	add    BYTE PTR [rbx+0x0],dh
 1004cde:	je     0x1004ce0
 1004ce0:	(bad)  
 1004ce1:	add    BYTE PTR [rdx+0x0],dh
 1004ce4:	je     0x1004ce6
 1004ce6:	and    BYTE PTR [rax],al
 1004ce8:	jae    0x1004cea
 1004cea:	add    BYTE PTR gs:[rdx+0x0],dh
 1004cee:	jbe    0x1004cf0
 1004cf0:	imul   eax,DWORD PTR [rax],0x650063
 1004cf6:	add    BYTE PTR [rax],al
 1004cf8:	push   rbp
 1004cf9:	add    BYTE PTR [rsi+0x0],ch
 1004cfc:	(bad)  
 1004cfd:	add    BYTE PTR [rdx+0x0],ah
 1004d00:	ins    BYTE PTR es:[rdi],dx
 1004d01:	add    BYTE PTR [rbp+0x0],ah
 1004d04:	and    BYTE PTR [rax],al
 1004d06:	je     0x1004d08
 1004d08:	outs   dx,DWORD PTR ds:[rsi]
 1004d09:	add    BYTE PTR [rax],ah
 1004d0b:	add    BYTE PTR [rcx+0x0],dh
 1004d0e:	jne    0x1004d10
 1004d10:	add    BYTE PTR gs:[rdx+0x0],dh
 1004d14:	jns    0x1004d16
 1004d16:	and    BYTE PTR [rax],al
 1004d18:	jae    0x1004d1a
 1004d1a:	add    BYTE PTR gs:[rdx+0x0],dh
 1004d1e:	jbe    0x1004d20
 1004d20:	imul   eax,DWORD PTR [rax],0x650063
 1004d26:	and    BYTE PTR [rax],al
 1004d28:	jae    0x1004d2a
 1004d2a:	je     0x1004d2c
 1004d2c:	(bad)  
 1004d2d:	add    BYTE PTR [rax+rax*1+0x65],dh
	...
 1004d3d:	add    BYTE PTR [rax],al
 1004d3f:	add    BYTE PTR [rdx+0x0],dl
 1004d42:	add    BYTE PTR gs:[rbp+0x0],ch
 1004d46:	outs   dx,DWORD PTR ds:[rsi]
 1004d47:	add    BYTE PTR [rax+rax*1+0x65],dh
 1004d4b:	add    BYTE PTR [rax],ah
 1004d4d:	add    BYTE PTR [rax+rax*1+0x75],ah
 1004d51:	add    BYTE PTR [rbp+0x0],ch
 1004d54:	jo     0x1004d56
 1004d56:	and    BYTE PTR [rax],al
 1004d58:	outs   dx,DWORD PTR ds:[rsi]
 1004d59:	add    BYTE PTR [rsi+0x0],ch
 1004d5c:	and    BYTE PTR [rax],al
 1004d5e:	and    eax,0x20007300
 1004d63:	add    BYTE PTR [rbx+0x0],ah
 1004d66:	outs   dx,DWORD PTR ds:[rsi]
 1004d67:	add    BYTE PTR [rbp+0x0],ch
 1004d6a:	jo     0x1004d6c
 1004d6c:	ins    BYTE PTR es:[rdi],dx
 1004d6d:	add    BYTE PTR [rbp+0x0],ah
 1004d70:	je     0x1004d72
 1004d72:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1004d77:	add    BYTE PTR [rdi+0x0],dh
 1004d7a:	imul   eax,DWORD PTR [rax],0x680074
 1004d80:	and    BYTE PTR [rax],al
 1004d82:	jae    0x1004d84
 1004d84:	je     0x1004d86
 1004d86:	(bad)  
 1004d87:	add    BYTE PTR [rax+rax*1+0x75],dh
 1004d8b:	add    BYTE PTR [rbx+0x0],dh
 1004d8e:	and    BYTE PTR [rax],al
 1004d90:	and    eax,0x20005800
 1004d95:	add    BYTE PTR [rax],ch
 1004d97:	add    BYTE PTR [rbx+0x0],dh
 1004d9a:	je     0x1004d9c
 1004d9c:	(bad)  
 1004d9d:	add    BYTE PTR [rax+rax*1+0x65],dh
 1004da1:	add    BYTE PTR [rax],ah
 1004da3:	add    BYTE PTR [rip+0x2c005800],ah        # 0x2d00a5a9
 1004da9:	add    BYTE PTR [rax],ah
 1004dab:	add    BYTE PTR [rbp+0x0],ah
 1004dae:	js     0x1004db0
 1004db0:	imul   eax,DWORD PTR [rax],0x430074
 1004db6:	outs   dx,DWORD PTR ds:[rsi]
 1004db7:	add    BYTE PTR [rax+rax*1+0x65],ah
 1004dbb:	add    BYTE PTR [rax],ah
 1004dbd:	add    BYTE PTR [rip+0x2c005800],ah        # 0x2d00a5c3
 1004dc3:	add    BYTE PTR [rax],ah
 1004dc5:	add    BYTE PTR [rax+0x0],dh
 1004dc8:	jb     0x1004dca
 1004dca:	outs   dx,DWORD PTR ds:[rsi]
 1004dcb:	add    BYTE PTR [rbx+0x0],ah
 1004dce:	add    BYTE PTR gs:[rbx+0x0],dh
 1004dd2:	jae    0x1004dd4
 1004dd4:	and    BYTE PTR [rax],al
 1004dd6:	and    eax,0x2c006400
 1004ddb:	add    BYTE PTR [rax],ah
 1004ddd:	add    BYTE PTR [rbx+0x0],dh
 1004de0:	je     0x1004de2
 1004de2:	add    BYTE PTR gs:[rax+0x0],dh
 1004de6:	and    BYTE PTR [rax],al
 1004de8:	and    eax,0x29006400
 1004ded:	add    BYTE PTR [rax],al
 1004def:	add    BYTE PTR [rip+0x20006400],ah        # 0x2100b1f5
 1004df5:	add    BYTE PTR [rcx+0x0],ch
 1004df8:	outs   dx,BYTE PTR ds:[rsi]
 1004df9:	add    BYTE PTR [rbx+0x0],dh
 1004dfc:	je     0x1004dfe
 1004dfe:	(bad)  
 1004dff:	add    BYTE PTR [rsi+0x0],ch
 1004e02:	movsxd eax,DWORD PTR [rax]
 1004e04:	add    BYTE PTR gs:[rbx+0x0],dh
 1004e08:	and    BYTE PTR [rax],al
 1004e0a:	outs   dx,DWORD PTR ds:[rsi]
 1004e0b:	add    BYTE PTR [rsi+0x0],ah
 1004e0e:	and    BYTE PTR [rax],al
 1004e10:	jb     0x1004e12
 1004e12:	add    BYTE PTR gs:[rbp+0x0],ch
 1004e16:	outs   dx,DWORD PTR ds:[rsi]
 1004e17:	add    BYTE PTR [rax+rax*1+0x65],dh
 1004e1b:	add    BYTE PTR [rax],ah
 1004e1d:	add    BYTE PTR [rax+rax*1+0x75],ah
 1004e21:	add    BYTE PTR [rbp+0x0],ch
 1004e24:	jo     0x1004e26
 1004e26:	and    BYTE PTR [rax],al
 1004e28:	(bad)  
 1004e29:	add    BYTE PTR [rdx+0x0],dh
 1004e2c:	add    BYTE PTR gs:[rax],ah
 1004e2f:	add    BYTE PTR [rbx+0x0],dh
 1004e32:	imul   eax,DWORD PTR [rax],0x6c006c
 1004e38:	and    BYTE PTR [rax],al
 1004e3a:	imul   eax,DWORD PTR [rax],0x20006e
 1004e40:	jo     0x1004e42
 1004e42:	jb     0x1004e44
 1004e44:	outs   dx,DWORD PTR ds:[rsi]
 1004e45:	add    BYTE PTR [rdi+0x0],ah
 1004e48:	jb     0x1004e4a
 1004e4a:	add    BYTE PTR gs:[rbx+0x0],dh
 1004e4e:	jae    0x1004e50
 1004e50:	add    BYTE PTR cs:[rax],al
 1004e53:	add    BYTE PTR [rax],al
 1004e55:	add    BYTE PTR [rax],al
 1004e57:	add    BYTE PTR [rbx+0x0],dl
 1004e5a:	push   rcx
 1004e5b:	add    BYTE PTR [rax+rax*1+0x44],cl
 1004e5f:	add    BYTE PTR [rbp+0x0],dh
 1004e62:	ins    DWORD PTR es:[rdi],dx
 1004e63:	add    BYTE PTR [rax+0x0],dh
 1004e66:	pop    rdi
 1004e67:	add    BYTE PTR [rbp+0x0],ch
 1004e6a:	(bad)  
 1004e6b:	add    BYTE PTR [rsi+0x0],ch
 1004e6e:	jne    0x1004e70
 1004e70:	(bad)  
 1004e71:	add    BYTE PTR [rax+rax*1+0x5f],ch
	...
 1004e7d:	add    BYTE PTR [rax],al
 1004e7f:	add    BYTE PTR [rbp+0x0],dl
 1004e82:	outs   dx,BYTE PTR ds:[rsi]
 1004e83:	add    BYTE PTR [rcx+0x0],ah
 1004e86:	(bad)  
 1004e87:	add    BYTE PTR [rax+rax*1+0x65],ch
 1004e8b:	add    BYTE PTR [rax],ah
 1004e8d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1004e91:	add    BYTE PTR [rax],ah
 1004e93:	add    BYTE PTR [rbx+0x0],ah
 1004e96:	jb     0x1004e98
 1004e98:	add    BYTE PTR gs:[rcx+0x0],ah
 1004e9c:	je     0x1004e9e
 1004e9e:	add    BYTE PTR gs:[rax],ah
 1004ea1:	add    BYTE PTR [rax+rax*1+0x68],dh
 1004ea5:	add    BYTE PTR [rdx+0x0],dh
 1004ea8:	add    BYTE PTR gs:[rcx+0x0],ah
 1004eac:	add    BYTE PTR fs:[rax],ah
 1004eaf:	add    BYTE PTR [rsi+0x0],ah
 1004eb2:	outs   dx,DWORD PTR ds:[rsi]
 1004eb3:	add    BYTE PTR [rdx+0x0],dh
 1004eb6:	and    BYTE PTR [rax],al
 1004eb8:	jb     0x1004eba
 1004eba:	add    BYTE PTR gs:[rbp+0x0],ch
 1004ebe:	outs   dx,DWORD PTR ds:[rsi]
 1004ebf:	add    BYTE PTR [rax+rax*1+0x65],dh
 1004ec3:	add    BYTE PTR [rax],ah
 1004ec5:	add    BYTE PTR [rax+rax*1+0x75],ah
 1004ec9:	add    BYTE PTR [rbp+0x0],ch
 1004ecc:	jo     0x1004ece
 1004ece:	and    BYTE PTR [rax],al
 1004ed0:	ins    BYTE PTR es:[rdi],dx
 1004ed1:	add    BYTE PTR [rcx+0x0],ah
 1004ed4:	jne    0x1004ed6
 1004ed6:	outs   dx,BYTE PTR ds:[rsi]
 1004ed7:	add    BYTE PTR [rbx+0x0],ah
 1004eda:	push   0x28002000
 1004edf:	add    BYTE PTR [rip+0x29006400],ah        # 0x2a00b2e5
 1004ee5:	add    BYTE PTR [rsi],ch
	...
 1004eef:	add    BYTE PTR [rbp+0x0],dl
 1004ef2:	outs   dx,BYTE PTR ds:[rsi]
 1004ef3:	add    BYTE PTR [rcx+0x0],ah
 1004ef6:	(bad)  
 1004ef7:	add    BYTE PTR [rax+rax*1+0x65],ch
 1004efb:	add    BYTE PTR [rax],ah
 1004efd:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1004f01:	add    BYTE PTR [rax],ah
 1004f03:	add    BYTE PTR [rbx+0x0],ah
 1004f06:	jb     0x1004f08
 1004f08:	add    BYTE PTR gs:[rcx+0x0],ah
 1004f0c:	je     0x1004f0e
 1004f0e:	add    BYTE PTR gs:[rax],ah
 1004f11:	add    BYTE PTR [rbp+0x0],ah
 1004f14:	jbe    0x1004f16
 1004f16:	add    BYTE PTR gs:[rsi+0x0],ch
 1004f1a:	je     0x1004f1c
 1004f1c:	and    BYTE PTR [rax],al
 1004f1e:	data16 add BYTE PTR [rdi+0x0],ch
 1004f22:	jb     0x1004f24
 1004f24:	and    BYTE PTR [rax],al
 1004f26:	jb     0x1004f28
 1004f28:	add    BYTE PTR gs:[rbp+0x0],ch
 1004f2c:	outs   dx,DWORD PTR ds:[rsi]
 1004f2d:	add    BYTE PTR [rax+rax*1+0x65],dh
 1004f31:	add    BYTE PTR [rax],ah
 1004f33:	add    BYTE PTR [rax+rax*1+0x75],ah
 1004f37:	add    BYTE PTR [rbp+0x0],ch
 1004f3a:	jo     0x1004f3c
 1004f3c:	and    BYTE PTR [rax],al
 1004f3e:	ins    BYTE PTR es:[rdi],dx
 1004f3f:	add    BYTE PTR [rcx+0x0],ah
 1004f42:	jne    0x1004f44
 1004f44:	outs   dx,BYTE PTR ds:[rsi]
 1004f45:	add    BYTE PTR [rbx+0x0],ah
 1004f48:	push   0x28002000
 1004f4d:	add    BYTE PTR [rip+0x29006400],ah        # 0x2a00b353
 1004f53:	add    BYTE PTR [rsi],ch
	...
 1004f5d:	add    BYTE PTR [rax],al
 1004f5f:	add    BYTE PTR [rbp+0x0],dl
 1004f62:	outs   dx,BYTE PTR ds:[rsi]
 1004f63:	add    BYTE PTR [rcx+0x0],ah
 1004f66:	(bad)  
 1004f67:	add    BYTE PTR [rax+rax*1+0x65],ch
 1004f6b:	add    BYTE PTR [rax],ah
 1004f6d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1004f71:	add    BYTE PTR [rax],ah
 1004f73:	add    BYTE PTR [rcx+0x0],ah
 1004f76:	ins    BYTE PTR es:[rdi],dx
 1004f77:	add    BYTE PTR [rax+rax*1+0x6f],ch
 1004f7b:	add    BYTE PTR [rbx+0x0],ah
 1004f7e:	(bad)  
 1004f7f:	add    BYTE PTR [rax+rax*1+0x65],dh
 1004f83:	add    BYTE PTR [rax],ah
 1004f85:	add    BYTE PTR [rax+rax*1+0x63],dh
 1004f89:	add    BYTE PTR [rax+0x0],dh
 1004f8c:	and    BYTE PTR [rax],al
 1004f8e:	je     0x1004f90
 1004f90:	(bad)  
 1004f91:	add    BYTE PTR [rdx+0x0],ah
 1004f94:	ins    BYTE PTR es:[rdi],dx
 1004f95:	add    BYTE PTR [rbp+0x0],ah
 1004f98:	and    BYTE PTR [rax],al
 1004f9a:	sub    BYTE PTR [rax],al
 1004f9c:	and    eax,0x29006400
 1004fa1:	add    BYTE PTR [rsi],ch
 1004fa3:	add    BYTE PTR [rax],al
 1004fa5:	add    BYTE PTR [rax],al
 1004fa7:	add    BYTE PTR [rbp+0x0],dl
 1004faa:	outs   dx,BYTE PTR ds:[rsi]
 1004fab:	add    BYTE PTR [rcx+0x0],ah
 1004fae:	(bad)  
 1004faf:	add    BYTE PTR [rax+rax*1+0x65],ch
 1004fb3:	add    BYTE PTR [rax],ah
 1004fb5:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1004fb9:	add    BYTE PTR [rax],ah
 1004fbb:	add    BYTE PTR [rdi+0x0],ah
 1004fbe:	add    BYTE PTR gs:[rax+rax*1+0x20],dh
 1004fc3:	add    BYTE PTR [rax+rax*1+0x63],dh
 1004fc7:	add    BYTE PTR [rax+0x0],dh
 1004fca:	and    BYTE PTR [rax],al
 1004fcc:	je     0x1004fce
 1004fce:	(bad)  
 1004fcf:	add    BYTE PTR [rdx+0x0],ah
 1004fd2:	ins    BYTE PTR es:[rdi],dx
 1004fd3:	add    BYTE PTR [rbp+0x0],ah
 1004fd6:	and    BYTE PTR [rax],al
 1004fd8:	sub    BYTE PTR [rax],al
 1004fda:	and    eax,0x29006400
 1004fdf:	add    BYTE PTR [rsi],ch
 1004fe1:	add    BYTE PTR [rax],al
 1004fe3:	add    BYTE PTR [rax],al
 1004fe5:	add    BYTE PTR [rax],al
 1004fe7:	add    BYTE PTR [rax+rax*1+0x6f],cl
 1004feb:	add    BYTE PTR [rdi+0x0],ch
 1004fee:	imul   eax,DWORD PTR [rax],0x75
 1004ff1:	add    BYTE PTR [rax+0x0],dh
 1004ff4:	and    BYTE PTR [rax],al
 1004ff6:	jo     0x1004ff8
 1004ff8:	jb     0x1004ffa
 1004ffa:	outs   dx,DWORD PTR ds:[rsi]
 1004ffb:	add    BYTE PTR [rbx+0x0],ah
 1004ffe:	add    BYTE PTR gs:[rbx+0x0],dh
 1005002:	jae    0x1005004
 1005004:	and    BYTE PTR [rax],al
 1005006:	(bad)  
 1005007:	add    BYTE PTR [rcx+0x0],bh
 100500a:	and    BYTE PTR [rax],al
 100500c:	jo     0x100500e
 100500e:	outs   dx,DWORD PTR ds:[rsi]
 100500f:	add    BYTE PTR [rdx+0x0],dh
 1005012:	je     0x1005014
 1005014:	and    BYTE PTR [rax],al
 1005016:	and    eax,0x6400
 100501b:	add    BYTE PTR [rax],al
 100501d:	add    BYTE PTR [rax],al
 100501f:	add    BYTE PTR [rax+rax*1+0x6f],cl
 1005023:	add    BYTE PTR [rdi+0x0],ch
 1005026:	imul   eax,DWORD PTR [rax],0x75
 1005029:	add    BYTE PTR [rax+0x0],dh
 100502c:	and    BYTE PTR [rax],al
 100502e:	jo     0x1005030
 1005030:	jb     0x1005032
 1005032:	outs   dx,DWORD PTR ds:[rsi]
 1005033:	add    BYTE PTR [rbx+0x0],ah
 1005036:	add    BYTE PTR gs:[rbx+0x0],dh
 100503a:	jae    0x100503c
 100503c:	and    BYTE PTR [rax],al
 100503e:	(bad)  
 100503f:	add    BYTE PTR [rcx+0x0],bh
 1005042:	and    BYTE PTR [rax],al
 1005044:	jne    0x1005046
 1005046:	jo     0x1005048
 1005048:	je     0x100504a
 100504a:	imul   eax,DWORD PTR [rax],0x65006d
 1005050:	pop    rdi
 1005051:	add    BYTE PTR [rax+0x0],dh
 1005054:	imul   eax,DWORD PTR [rax],0x64
 100505a:	add    BYTE PTR [rax],al
 100505c:	add    BYTE PTR [rax],al
 100505e:	add    BYTE PTR [rax],al
 1005060:	jne    0x1005062
 1005062:	jo     0x1005064
 1005064:	je     0x1005066
 1005066:	imul   eax,DWORD PTR [rax],0x65006d
 100506c:	pop    rdi
 100506d:	add    BYTE PTR [rax+0x0],dh
 1005070:	imul   eax,DWORD PTR [rax],0x64
	...
 100507e:	add    BYTE PTR [rax],al
 1005080:	rex.WR add BYTE PTR [rdi+0x0],r13b
 1005084:	outs   dx,DWORD PTR ds:[rsi]
 1005085:	add    BYTE PTR [rbx+0x0],ch
 1005088:	jne    0x100508a
 100508a:	jo     0x100508c
 100508c:	and    BYTE PTR [rax],al
 100508e:	jo     0x1005090
 1005090:	jb     0x1005092
 1005092:	outs   dx,DWORD PTR ds:[rsi]
 1005093:	add    BYTE PTR [rbx+0x0],ah
 1005096:	add    BYTE PTR gs:[rbx+0x0],dh
 100509a:	jae    0x100509c
 100509c:	and    BYTE PTR [rax],al
 100509e:	data16 add BYTE PTR [rcx+0x0],ch
 10050a2:	outs   dx,BYTE PTR ds:[rsi]
 10050a3:	add    BYTE PTR [rcx+0x0],ch
 10050a6:	jae    0x10050a8
 10050a8:	push   0x64006500
 10050ad:	add    BYTE PTR [rax],ah
 10050af:	add    BYTE PTR [rdi+0x0],dh
 10050b2:	imul   eax,DWORD PTR [rax],0x680074
 10050b8:	and    BYTE PTR [rax],al
 10050ba:	push   rax
 10050bb:	add    BYTE PTR [rcx+0x0],cl
 10050be:	add    BYTE PTR [rip+0x64002500],r15b        # 0x650075c5
	...
 10050cd:	add    BYTE PTR [rax],al
 10050cf:	add    BYTE PTR [rbp+0x0],dl
 10050d2:	outs   dx,BYTE PTR ds:[rsi]
 10050d3:	add    BYTE PTR [rcx+0x0],ah
 10050d6:	(bad)  
 10050d7:	add    BYTE PTR [rax+rax*1+0x65],ch
 10050db:	add    BYTE PTR [rax],ah
 10050dd:	add    BYTE PTR [rax+rax*1+0x6f],dh
 10050e1:	add    BYTE PTR [rax],ah
 10050e3:	add    BYTE PTR [rdx+0x0],dh
 10050e6:	add    BYTE PTR gs:[rbx+0x0],dh
 10050ea:	jne    0x10050ec
 10050ec:	ins    DWORD PTR es:[rdi],dx
 10050ed:	add    BYTE PTR [rbp+0x0],ah
 10050f0:	and    BYTE PTR [rax],al
 10050f2:	imul   eax,DWORD PTR [rax],0x6a006e
 10050f8:	add    BYTE PTR gs:[rbx+0x0],ah
 10050fc:	je     0x10050fe
 10050fe:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1005103:	add    BYTE PTR [rax+rax*1+0x68],dh
 1005107:	add    BYTE PTR [rdx+0x0],dh
 100510a:	add    BYTE PTR gs:[rcx+0x0],ah
 100510e:	add    BYTE PTR fs:[rax],ah
 1005111:	add    BYTE PTR [rax],ch
 1005113:	add    BYTE PTR [rip+0x29006400],ah        # 0x2a00b519
 1005119:	add    BYTE PTR [rax],al
 100511b:	add    BYTE PTR [rax],al
 100511d:	add    BYTE PTR [rax],al
 100511f:	add    BYTE PTR [rcx+0x0],cl
 1005122:	outs   dx,BYTE PTR ds:[rsi]
 1005123:	add    BYTE PTR [rdx+0x0],ch
 1005126:	add    BYTE PTR gs:[rbx+0x0],ah
 100512a:	je     0x100512c
 100512c:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1005131:	add    BYTE PTR [rax+rax*1+0x68],dh
 1005135:	add    BYTE PTR [rdx+0x0],dh
 1005138:	add    BYTE PTR gs:[rcx+0x0],ah
 100513c:	add    BYTE PTR fs:[rax],ah
 100513f:	add    BYTE PTR [rbx+0x0],ah
 1005142:	outs   dx,DWORD PTR ds:[rsi]
 1005143:	add    BYTE PTR [rbp+0x0],ch
 1005146:	jo     0x1005148
 1005148:	ins    BYTE PTR es:[rdi],dx
 1005149:	add    BYTE PTR [rbp+0x0],ah
 100514c:	je     0x100514e
 100514e:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1005153:	add    BYTE PTR [rcx+0x0],ah
 1005156:	data16 add BYTE PTR [rax+rax*1+0x65],dh
 100515b:	add    BYTE PTR [rdx+0x0],dh
 100515e:	and    BYTE PTR [rax],al
 1005160:	ja     0x1005162
 1005162:	(bad)  
 1005163:	add    BYTE PTR [rcx+0x0],ch
 1005166:	je     0x1005168
 1005168:	imul   eax,DWORD PTR [rax],0x67006e
 100516e:	and    BYTE PTR [rax],al
 1005170:	data16 add BYTE PTR [rdi+0x0],ch
 1005174:	jb     0x1005176
 1005176:	and    BYTE PTR [rax],al
 1005178:	and    eax,0x20006400
 100517d:	add    BYTE PTR [rbp+0x0],ch
 1005180:	jae    0x1005182
 1005182:	add    BYTE PTR gs:[rbx+0x0],ah
 1005186:	and    BYTE PTR [rax],al
 1005188:	sub    BYTE PTR [rax],al
 100518a:	and    eax,0x20006400
 100518f:	add    BYTE PTR [rbx+0x0],dh
 1005192:	jne    0x1005194
 1005194:	jae    0x1005196
 1005196:	jo     0x1005198
 1005198:	add    BYTE PTR gs:[rsi+0x0],ch
 100519c:	add    BYTE PTR fs:[rbp+0x0],ah
 10051a0:	add    BYTE PTR fs:[rcx],ch
 10051a3:	add    BYTE PTR [rax+rax*1],ch
 10051a6:	and    BYTE PTR [rax],al
 10051a8:	jb     0x10051aa
 10051aa:	add    BYTE PTR gs:[rax+rax*1+0x20],dh
 10051af:	add    BYTE PTR [rbx+0x0],ah
 10051b2:	outs   dx,DWORD PTR ds:[rsi]
 10051b3:	add    BYTE PTR [rax+rax*1+0x65],ah
 10051b7:	add    BYTE PTR [rax],ah
 10051b9:	add    BYTE PTR [rip+0x25002000],bh        # 0x260071bf
 10051bf:	add    BYTE PTR [rax+0x0],bl
	...
 10051ce:	add    BYTE PTR [rax],al
 10051d0:	push   rdi
 10051d1:	add    BYTE PTR [rcx+0x0],ah
 10051d4:	imul   eax,DWORD PTR [rax],0x200074
 10051da:	data16 add BYTE PTR [rdi+0x0],ch
 10051de:	jb     0x10051e0
 10051e0:	and    BYTE PTR [rax],al
 10051e2:	imul   eax,DWORD PTR [rax],0x6a006e
 10051e8:	add    BYTE PTR gs:[rbx+0x0],ah
 10051ec:	je     0x10051ee
 10051ee:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 10051f3:	add    BYTE PTR [rax+rax*1+0x68],dh
 10051f7:	add    BYTE PTR [rdx+0x0],dh
 10051fa:	add    BYTE PTR gs:[rcx+0x0],ah
 10051fe:	add    BYTE PTR fs:[rax],ah
 1005201:	add    BYTE PTR [rbp+0x0],ah
 1005204:	js     0x1005206
 1005206:	imul   eax,DWORD PTR [rax],0x650074
 100520c:	add    BYTE PTR fs:[rax],ah
 100520f:	add    BYTE PTR [rcx+0x0],ah
 1005212:	data16 add BYTE PTR [rax+rax*1+0x65],dh
 1005217:	add    BYTE PTR [rdx+0x0],dh
 100521a:	and    BYTE PTR [rax],al
 100521c:	ja     0x100521e
 100521e:	(bad)  
 100521f:	add    BYTE PTR [rcx+0x0],ch
 1005222:	je     0x1005224
 1005224:	imul   eax,DWORD PTR [rax],0x67006e
 100522a:	and    BYTE PTR [rax],al
 100522c:	data16 add BYTE PTR [rdi+0x0],ch
 1005230:	jb     0x1005232
 1005232:	and    BYTE PTR [rax],al
 1005234:	and    eax,0x20006400
 1005239:	add    BYTE PTR [rbp+0x0],ch
 100523c:	jae    0x100523e
 100523e:	add    BYTE PTR gs:[rbx+0x0],ah
 1005242:	and    BYTE PTR [rax],al
 1005244:	sub    BYTE PTR [rax],al
 1005246:	and    eax,0x20006400
 100524b:	add    BYTE PTR [rbx+0x0],dh
 100524e:	jne    0x1005250
 1005250:	jae    0x1005252
 1005252:	jo     0x1005254
 1005254:	add    BYTE PTR gs:[rsi+0x0],ch
 1005258:	add    BYTE PTR fs:[rbp+0x0],ah
 100525c:	add    BYTE PTR fs:[rcx],ch
	...
 100526f:	add    BYTE PTR [rbp+0x0],dl
 1005272:	outs   dx,BYTE PTR ds:[rsi]
 1005273:	add    BYTE PTR [rcx+0x0],ah
 1005276:	(bad)  
 1005277:	add    BYTE PTR [rax+rax*1+0x65],ch
 100527b:	add    BYTE PTR [rax],ah
 100527d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1005281:	add    BYTE PTR [rax],ah
 1005283:	add    BYTE PTR [rax+rax*1+0x6f],ch
 1005287:	add    BYTE PTR [rbx+0x0],ah
 100528a:	(bad)  
 100528b:	add    BYTE PTR [rax+rax*1+0x65],dh
 100528f:	add    BYTE PTR [rax],ah
 1005291:	add    BYTE PTR [rcx+0x0],ch
 1005294:	outs   dx,BYTE PTR ds:[rsi]
 1005295:	add    BYTE PTR [rdx+0x0],ch
 1005298:	add    BYTE PTR gs:[rbx+0x0],ah
 100529c:	je     0x100529e
 100529e:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 10052a3:	add    BYTE PTR [rax+rax*1+0x68],dh
 10052a7:	add    BYTE PTR [rdx+0x0],dh
 10052aa:	add    BYTE PTR gs:[rcx+0x0],ah
 10052ae:	add    BYTE PTR fs:[rax],ah
 10052b1:	add    BYTE PTR [rbx+0x0],dh
 10052b4:	je     0x10052b6
 10052b6:	(bad)  
 10052b7:	add    BYTE PTR [rdx+0x0],dh
 10052ba:	je     0x10052bc
 10052bc:	and    BYTE PTR [rax],al
 10052be:	jo     0x10052c0
 10052c0:	outs   dx,DWORD PTR ds:[rsi]
 10052c1:	add    BYTE PTR [rcx+0x0],ch
 10052c4:	outs   dx,BYTE PTR ds:[rsi]
 10052c5:	add    BYTE PTR [rax+rax*1+0x20],dh
 10052c9:	add    BYTE PTR [rax],ch
 10052cb:	add    BYTE PTR [rip+0x29006400],ah        # 0x2a00b6d1
	...
 10052dd:	add    BYTE PTR [rax],al
 10052df:	add    BYTE PTR [rbp+0x0],dl
 10052e2:	outs   dx,BYTE PTR ds:[rsi]
 10052e3:	add    BYTE PTR [rcx+0x0],ah
 10052e6:	(bad)  
 10052e7:	add    BYTE PTR [rax+rax*1+0x65],ch
 10052eb:	add    BYTE PTR [rax],ah
 10052ed:	add    BYTE PTR [rax+rax*1+0x6f],dh
 10052f1:	add    BYTE PTR [rax],ah
 10052f3:	add    BYTE PTR [rcx+0x0],ah
 10052f6:	ins    BYTE PTR es:[rdi],dx
 10052f7:	add    BYTE PTR [rax+rax*1+0x6f],ch
 10052fb:	add    BYTE PTR [rbx+0x0],ah
 10052fe:	(bad)  
 10052ff:	add    BYTE PTR [rax+rax*1+0x65],dh
 1005303:	add    BYTE PTR [rax],ah
 1005305:	add    BYTE PTR [rax+0x0],dh
 1005308:	(bad)  
 1005309:	add    BYTE PTR [rdx+0x0],dh
 100530c:	(bad)  
 100530d:	add    BYTE PTR [rbp+0x0],ch
 1005310:	add    BYTE PTR gs:[rax+rax*1+0x65],dh
 1005315:	add    BYTE PTR [rdx+0x0],dh
 1005318:	and    BYTE PTR [rax],al
 100531a:	(bad)  
 100531b:	add    BYTE PTR [rax+rax*1+0x6f],ch
 100531f:	add    BYTE PTR [rbx+0x0],ah
 1005322:	imul   eax,DWORD PTR [rax],0x20
 1005325:	add    BYTE PTR [rax],ch
 1005327:	add    BYTE PTR [rip+0x29006400],ah        # 0x2a00b72d
 100532d:	add    BYTE PTR [rax],al
 100532f:	add    BYTE PTR [rbp+0x0],dl
 1005332:	outs   dx,BYTE PTR ds:[rsi]
 1005333:	add    BYTE PTR [rcx+0x0],ah
 1005336:	(bad)  
 1005337:	add    BYTE PTR [rax+rax*1+0x65],ch
 100533b:	add    BYTE PTR [rax],ah
 100533d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1005341:	add    BYTE PTR [rax],ah
 1005343:	add    BYTE PTR [rbx+0x0],ah
 1005346:	outs   dx,DWORD PTR ds:[rsi]
 1005347:	add    BYTE PTR [rax+0x0],dh
 100534a:	jns    0x100534c
 100534c:	and    BYTE PTR [rax],al
 100534e:	jo     0x1005350
 1005350:	(bad)  
 1005351:	add    BYTE PTR [rdx+0x0],dh
 1005354:	(bad)  
 1005355:	add    BYTE PTR [rbp+0x0],ch
 1005358:	add    BYTE PTR gs:[rax+rax*1+0x65],dh
 100535d:	add    BYTE PTR [rdx+0x0],dh
 1005360:	and    BYTE PTR [rax],al
 1005362:	(bad)  
 1005363:	add    BYTE PTR [rax+rax*1+0x6f],ch
 1005367:	add    BYTE PTR [rbx+0x0],ah
 100536a:	imul   eax,DWORD PTR [rax],0x20
 100536d:	add    BYTE PTR [rax],ch
 100536f:	add    BYTE PTR [rip+0x29006400],ah        # 0x2a00b775
	...
 100537d:	add    BYTE PTR [rax],al
 100537f:	add    BYTE PTR [rbp+0x0],dl
 1005382:	outs   dx,BYTE PTR ds:[rsi]
 1005383:	add    BYTE PTR [rcx+0x0],ah
 1005386:	(bad)  
 1005387:	add    BYTE PTR [rax+rax*1+0x65],ch
 100538b:	add    BYTE PTR [rax],ah
 100538d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1005391:	add    BYTE PTR [rax],ah
 1005393:	add    BYTE PTR [rbx+0x0],ah
 1005396:	jb     0x1005398
 1005398:	add    BYTE PTR gs:[rcx+0x0],ah
 100539c:	je     0x100539e
 100539e:	add    BYTE PTR gs:[rax],ah
 10053a1:	add    BYTE PTR [rcx+0x0],ch
 10053a4:	outs   dx,BYTE PTR ds:[rsi]
 10053a5:	add    BYTE PTR [rdx+0x0],ch
 10053a8:	add    BYTE PTR gs:[rbx+0x0],ah
 10053ac:	je     0x10053ae
 10053ae:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 10053b3:	add    BYTE PTR [rax+rax*1+0x68],dh
 10053b7:	add    BYTE PTR [rdx+0x0],dh
 10053ba:	add    BYTE PTR gs:[rcx+0x0],ah
 10053be:	add    BYTE PTR fs:[rax],ah
 10053c1:	add    BYTE PTR [rax],ch
 10053c3:	add    BYTE PTR [rip+0x29006400],ah        # 0x2a00b7c9
 10053c9:	add    BYTE PTR [rax],al
 10053cb:	add    BYTE PTR [rax],al
 10053cd:	add    BYTE PTR [rax],al
 10053cf:	add    BYTE PTR [rbp+rbp*2+0x70],al
 10053d3:	push   rdx
 10053d4:	gs ins DWORD PTR es:[rdi],dx
 10053d6:	outs   dx,DWORD PTR ds:[rsi]
 10053d7:	je     0x100543e
 10053d9:	rex.R jne 0x1005449
 10053dc:	jo     0x1005430
 10053de:	gs jno 0x1005456
 10053e1:	gs jae 0x1005458
 10053e4:	add    BYTE PTR [rax],al
 10053e6:	add    BYTE PTR [rax],al
 10053e8:	jae    0x100545b
 10053ea:	ins    BYTE PTR es:[rdi],dx
 10053eb:	jae    0x1005452
 10053ed:	jb     0x1005465
 10053ef:	jb     0x100541f
 10053f1:	gs js  0x1005459
 10053f4:	add    BYTE PTR [rax],al
 10053f6:	add    BYTE PTR [rax],al
 10053f8:	push   rbp
 10053f9:	add    BYTE PTR [rsi+0x0],ch
 10053fc:	(bad)  
 10053fd:	add    BYTE PTR [rdx+0x0],ah
 1005400:	ins    BYTE PTR es:[rdi],dx
 1005401:	add    BYTE PTR [rbp+0x0],ah
 1005404:	and    BYTE PTR [rax],al
 1005406:	je     0x1005408
 1005408:	outs   dx,DWORD PTR ds:[rsi]
 1005409:	add    BYTE PTR [rax],ah
 100540b:	add    BYTE PTR [rbx+0x0],dh
 100540e:	add    BYTE PTR gs:[rax+rax*1+0x20],dh
 1005413:	add    BYTE PTR [rbx+0x0],dh
 1005416:	add    BYTE PTR gs:[rdx+0x0],dh
 100541a:	jbe    0x100541c
 100541c:	imul   eax,DWORD PTR [rax],0x650063
 1005422:	and    BYTE PTR [rax],al
 1005424:	jae    0x1005426
 1005426:	je     0x1005428
 1005428:	(bad)  
 1005429:	add    BYTE PTR [rax+rax*1+0x75],dh
 100542d:	add    BYTE PTR [rbx+0x0],dh
	...
 1005438:	push   rbp
 1005439:	add    BYTE PTR [rsi+0x0],ch
 100543c:	(bad)  
 100543d:	add    BYTE PTR [rdx+0x0],ah
 1005440:	ins    BYTE PTR es:[rdi],dx
 1005441:	add    BYTE PTR [rbp+0x0],ah
 1005444:	and    BYTE PTR [rax],al
 1005446:	je     0x1005448
 1005448:	outs   dx,DWORD PTR ds:[rsi]
 1005449:	add    BYTE PTR [rax],ah
 100544b:	add    BYTE PTR [rdi+0x0],ah
 100544e:	add    BYTE PTR gs:[rax+rax*1+0x20],dh
 1005453:	add    BYTE PTR [rbx+0x0],dh
 1005456:	add    BYTE PTR gs:[rdx+0x0],dh
 100545a:	jbe    0x100545c
 100545c:	imul   eax,DWORD PTR [rax],0x650063
 1005462:	and    BYTE PTR [rax],al
 1005464:	push   0x6e006100
 1005469:	add    BYTE PTR [rax+rax*1+0x6c],ah
 100546d:	add    BYTE PTR [rbp+0x0],ah
	...
 1005478:	push   rbp
 1005479:	add    BYTE PTR [rsi+0x0],ch
 100547c:	(bad)  
 100547d:	add    BYTE PTR [rdx+0x0],ah
 1005480:	ins    BYTE PTR es:[rdi],dx
 1005481:	add    BYTE PTR [rbp+0x0],ah
 1005484:	and    BYTE PTR [rax],al
 1005486:	je     0x1005488
 1005488:	outs   dx,DWORD PTR ds:[rsi]
 1005489:	add    BYTE PTR [rax],ah
 100548b:	add    BYTE PTR [rbx+0x0],ah
 100548e:	jb     0x1005490
 1005490:	add    BYTE PTR gs:[rcx+0x0],ah
 1005494:	je     0x1005496
 1005496:	add    BYTE PTR gs:[rax],ah
 1005499:	add    BYTE PTR [rbx+0x0],dh
 100549c:	add    BYTE PTR gs:[rdx+0x0],dh
 10054a0:	jbe    0x10054a2
 10054a2:	imul   eax,DWORD PTR [rax],0x650063
 10054a8:	and    BYTE PTR [rax],al
 10054aa:	add    BYTE PTR gs:[rsi+0x0],dh
 10054ae:	add    BYTE PTR gs:[rsi+0x0],ch
 10054b2:	je     0x10054b4
	...
 10054c0:	push   rbp
 10054c1:	add    BYTE PTR [rsi+0x0],ch
 10054c4:	(bad)  
 10054c5:	add    BYTE PTR [rdx+0x0],ah
 10054c8:	ins    BYTE PTR es:[rdi],dx
 10054c9:	add    BYTE PTR [rbp+0x0],ah
 10054cc:	and    BYTE PTR [rax],al
 10054ce:	je     0x10054d0
 10054d0:	outs   dx,DWORD PTR ds:[rsi]
 10054d1:	add    BYTE PTR [rax],ah
 10054d3:	add    BYTE PTR [rbx+0x0],ah
 10054d6:	jb     0x10054d8
 10054d8:	add    BYTE PTR gs:[rcx+0x0],ah
 10054dc:	je     0x10054de
 10054de:	add    BYTE PTR gs:[rax],ah
 10054e1:	add    BYTE PTR [rax+rax*1+0x68],dh
 10054e5:	add    BYTE PTR [rdx+0x0],dh
 10054e8:	add    BYTE PTR gs:[rcx+0x0],ah
 10054ec:	add    BYTE PTR fs:[rax],ah
 10054ef:	add    BYTE PTR [rsi+0x0],ah
 10054f2:	outs   dx,DWORD PTR ds:[rsi]
 10054f3:	add    BYTE PTR [rdx+0x0],dh
 10054f6:	and    BYTE PTR [rax],al
 10054f8:	jae    0x10054fa
 10054fa:	add    BYTE PTR gs:[rdx+0x0],dh
 10054fe:	jbe    0x1005500
 1005500:	imul   eax,DWORD PTR [rax],0x650063
 1005506:	and    BYTE PTR [rax],al
 1005508:	push   0x6e006100
 100550d:	add    BYTE PTR [rax+rax*1+0x6c],ah
 1005511:	add    BYTE PTR [rbp+0x0],ah
 1005514:	jb     0x1005516
 1005516:	and    BYTE PTR [rax],al
 1005518:	sub    BYTE PTR [rax],al
 100551a:	and    eax,0x29006400
 100551f:	add    BYTE PTR [rsi],ch
	...
 100552d:	add    BYTE PTR [rax],al
 100552f:	add    BYTE PTR [rbp+0x0],dl
 1005532:	outs   dx,BYTE PTR ds:[rsi]
 1005533:	add    BYTE PTR [rcx+0x0],ah
 1005536:	(bad)  
 1005537:	add    BYTE PTR [rax+rax*1+0x65],ch
 100553b:	add    BYTE PTR [rax],ah
 100553d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1005541:	add    BYTE PTR [rax],ah
 1005543:	add    BYTE PTR [rbx+0x0],dh
 1005546:	add    BYTE PTR gs:[rax+rax*1+0x20],dh
 100554b:	add    BYTE PTR [rbx+0x0],dh
 100554e:	add    BYTE PTR gs:[rdx+0x0],dh
 1005552:	jbe    0x1005554
 1005554:	imul   eax,DWORD PTR [rax],0x650063
 100555a:	and    BYTE PTR [rax],al
 100555c:	je     0x100555e
 100555e:	push   0x65007200
 1005563:	add    BYTE PTR [rcx+0x0],ah
 1005566:	add    BYTE PTR fs:[rax],ah
 1005569:	add    BYTE PTR [rbp+0x0],ah
 100556c:	jbe    0x100556e
 100556e:	add    BYTE PTR gs:[rsi+0x0],ch
 1005572:	je     0x1005574
	...
 1005580:	push   rbp
 1005581:	add    BYTE PTR [rsi+0x0],ch
 1005584:	(bad)  
 1005585:	add    BYTE PTR [rdx+0x0],ah
 1005588:	ins    BYTE PTR es:[rdi],dx
 1005589:	add    BYTE PTR [rbp+0x0],ah
 100558c:	and    BYTE PTR [rax],al
 100558e:	je     0x1005590
 1005590:	outs   dx,DWORD PTR ds:[rsi]
 1005591:	add    BYTE PTR [rax],ah
 1005593:	add    BYTE PTR [rbx+0x0],ah
 1005596:	outs   dx,DWORD PTR ds:[rsi]
 1005597:	add    BYTE PTR [rbp+0x0],ch
 100559a:	jo     0x100559c
 100559c:	ins    BYTE PTR es:[rdi],dx
 100559d:	add    BYTE PTR [rbp+0x0],ah
 10055a0:	je     0x10055a2
 10055a2:	add    BYTE PTR gs:[rax],ah
 10055a5:	add    BYTE PTR [rdi+0x0],dh
 10055a8:	(bad)  
 10055a9:	add    BYTE PTR [rcx+0x0],ch
 10055ac:	je     0x10055ae
 10055ae:	and    BYTE PTR [rax],al
 10055b0:	data16 add BYTE PTR [rdi+0x0],ch
 10055b4:	jb     0x10055b6
 10055b6:	and    BYTE PTR [rax],al
 10055b8:	jae    0x10055ba
 10055ba:	add    BYTE PTR gs:[rdx+0x0],dh
 10055be:	jbe    0x10055c0
 10055c0:	imul   eax,DWORD PTR [rax],0x650063
 10055c6:	and    BYTE PTR [rax],al
 10055c8:	je     0x10055ca
 10055ca:	push   0x65007200
 10055cf:	add    BYTE PTR [rcx+0x0],ah
 10055d2:	add    BYTE PTR fs:[rax],al
 10055d5:	add    BYTE PTR [rax],al
 10055d7:	add    BYTE PTR [rax+rax*1+0x75],al
 10055db:	add    BYTE PTR [rbp+0x0],ch
 10055de:	jo     0x10055e0
 10055e0:	rex.WRXB add BYTE PTR [r14+0x0],r14b
 10055e4:	add    BYTE PTR gs:[rdx+0x0],dh
 10055e8:	jb     0x10055ea
 10055ea:	imul   eax,DWORD PTR [rax],0x650064
 10055f0:	add    BYTE PTR [rax+r8*1+0x61],r13b
 10055f5:	add    BYTE PTR [rdi+0x0],ah
 10055f8:	jae    0x10055fa
 10055fa:	add    BYTE PTR [rax],al
 10055fc:	add    BYTE PTR [rax],al
 10055fe:	add    BYTE PTR [rax],al
 1005600:	push   rbp
 1005601:	add    BYTE PTR [rsi+0x0],ch
 1005604:	(bad)  
 1005605:	add    BYTE PTR [rdx+0x0],ah
 1005608:	ins    BYTE PTR es:[rdi],dx
 1005609:	add    BYTE PTR [rbp+0x0],ah
 100560c:	and    BYTE PTR [rax],al
 100560e:	je     0x1005610
 1005610:	outs   dx,DWORD PTR ds:[rsi]
 1005611:	add    BYTE PTR [rax],ah
 1005613:	add    BYTE PTR [rdx+0x0],dh
 1005616:	add    BYTE PTR gs:[rbx+0x0],dh
 100561a:	jne    0x100561c
 100561c:	ins    DWORD PTR es:[rdi],dx
 100561d:	add    BYTE PTR [rbp+0x0],ah
 1005620:	and    BYTE PTR [rax],al
 1005622:	jae    0x1005624
 1005624:	jne    0x1005626
 1005626:	jae    0x1005628
 1005628:	jo     0x100562a
 100562a:	add    BYTE PTR gs:[rsi+0x0],ch
 100562e:	add    BYTE PTR fs:[rbp+0x0],ah
 1005632:	add    BYTE PTR fs:[rax],ah
 1005635:	add    BYTE PTR [rax+rax*1+0x68],dh
 1005639:	add    BYTE PTR [rdx+0x0],dh
 100563c:	add    BYTE PTR gs:[rcx+0x0],ah
 1005640:	add    BYTE PTR fs:[rax],ah
 1005643:	add    BYTE PTR [rip+0x25002000],ch        # 0x26007649
 1005649:	add    BYTE PTR [rax+rax*1+0x0],ah
 100564d:	add    BYTE PTR [rax],al
 100564f:	add    BYTE PTR [rdi+0x65],al
 1005652:	je     0x10056a4
 1005654:	jb     0x10056c5
 1005656:	movsxd esp,DWORD PTR [rbp+0x73]
 1005659:	jae    0x10056a4
 100565b:	fs rex.WRXB
 100565d:	push   sp
 100565f:	push   0x64616572
	...
 1005670:	push   rbp
 1005671:	add    BYTE PTR [rsi+0x0],ch
 1005674:	(bad)  
 1005675:	add    BYTE PTR [rdx+0x0],ah
 1005678:	ins    BYTE PTR es:[rdi],dx
 1005679:	add    BYTE PTR [rbp+0x0],ah
 100567c:	and    BYTE PTR [rax],al
 100567e:	je     0x1005680
 1005680:	outs   dx,DWORD PTR ds:[rsi]
 1005681:	add    BYTE PTR [rax],ah
 1005683:	add    BYTE PTR [rdi+0x0],ah
 1005686:	add    BYTE PTR gs:[rsi+0x0],ch
 100568a:	add    BYTE PTR gs:[rdx+0x0],dh
 100568e:	(bad)  
 100568f:	add    BYTE PTR [rax+rax*1+0x65],dh
 1005693:	add    BYTE PTR [rax],ah
 1005695:	add    BYTE PTR [rax+rax*1+0x68],dh
 1005699:	add    BYTE PTR [rdx+0x0],dh
 100569c:	add    BYTE PTR gs:[rcx+0x0],ah
 10056a0:	add    BYTE PTR fs:[rax],ah
 10056a3:	add    BYTE PTR [rbx+0x0],dh
 10056a6:	outs   dx,BYTE PTR ds:[rsi]
 10056a7:	add    BYTE PTR [rcx+0x0],ah
 10056aa:	jo     0x10056ac
 10056ac:	jae    0x10056ae
 10056ae:	push   0x74006f00
 10056b3:	add    BYTE PTR [rax],ah
 10056b5:	add    BYTE PTR [rip+0x25002000],ch        # 0x260076bb
 10056bb:	add    BYTE PTR [rax+rax*1+0x0],ah
 10056bf:	add    BYTE PTR [rbp+0x0],dl
 10056c2:	outs   dx,BYTE PTR ds:[rsi]
 10056c3:	add    BYTE PTR [rcx+0x0],ah
 10056c6:	(bad)  
 10056c7:	add    BYTE PTR [rax+rax*1+0x65],ch
 10056cb:	add    BYTE PTR [rax],ah
 10056cd:	add    BYTE PTR [rax+rax*1+0x6f],dh
 10056d1:	add    BYTE PTR [rax],ah
 10056d3:	add    BYTE PTR [rdi+0x0],ah
 10056d6:	add    BYTE PTR gs:[rax+rax*1+0x20],dh
 10056db:	add    BYTE PTR [rsi+0x0],ah
 10056de:	imul   eax,DWORD PTR [rax],0x730072
 10056e4:	je     0x10056e6
 10056e6:	and    BYTE PTR [rax],al
 10056e8:	je     0x10056ea
 10056ea:	push   0x65007200
 10056ef:	add    BYTE PTR [rcx+0x0],ah
 10056f2:	add    BYTE PTR fs:[rax],ah
 10056f5:	add    BYTE PTR [rip+0x25002000],ch        # 0x260076fb
 10056fb:	add    BYTE PTR [rax+rax*1+0x0],ah
 10056ff:	add    BYTE PTR [rbp+0x0],dl
 1005702:	outs   dx,BYTE PTR ds:[rsi]
 1005703:	add    BYTE PTR [rcx+0x0],ah
 1005706:	(bad)  
 1005707:	add    BYTE PTR [rax+rax*1+0x65],ch
 100570b:	add    BYTE PTR [rax],ah
 100570d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1005711:	add    BYTE PTR [rax],ah
 1005713:	add    BYTE PTR [rdi+0x0],ah
 1005716:	add    BYTE PTR gs:[rax+rax*1+0x20],dh
 100571b:	add    BYTE PTR [rsi+0x0],ch
 100571e:	add    BYTE PTR gs:[rax+0x0],bh
 1005722:	je     0x1005724
 1005724:	and    BYTE PTR [rax],al
 1005726:	je     0x1005728
 1005728:	push   0x65007200
 100572d:	add    BYTE PTR [rcx+0x0],ah
 1005730:	add    BYTE PTR fs:[rax],ah
 1005733:	add    BYTE PTR [rip+0x25002000],ch        # 0x26007739
 1005739:	add    BYTE PTR [rax+rax*1+0x0],ah
 100573d:	add    BYTE PTR [rax],al
 100573f:	add    BYTE PTR [rax+rax*1+0x68],dl
 1005743:	add    BYTE PTR [rdx+0x0],dh
 1005746:	add    BYTE PTR gs:[rcx+0x0],ah
 100574a:	add    BYTE PTR fs:[rbx+0x0],dh
 100574e:	and    BYTE PTR [rax],al
 1005750:	jo     0x1005752
 1005752:	jb     0x1005754
 1005754:	outs   dx,DWORD PTR ds:[rsi]
 1005755:	add    BYTE PTR [rbx+0x0],ah
 1005758:	add    BYTE PTR gs:[rbx+0x0],dh
 100575c:	jae    0x100575e
 100575e:	add    BYTE PTR gs:[rax+rax*1+0x3a],ah
 1005763:	add    BYTE PTR [rax],ah
 1005765:	add    BYTE PTR [rip+0x6400],ah        # 0x100bb6b
 100576b:	add    BYTE PTR [rax],al
 100576d:	add    BYTE PTR [rax],al
 100576f:	add    BYTE PTR [rcx+0x0],cl
 1005772:	outs   dx,BYTE PTR ds:[rsi]
 1005773:	add    BYTE PTR [rax+rax*1+0x20],dh
 1005777:	add    BYTE PTR [rax+0x0],dh
 100577a:	(bad)  
 100577b:	add    BYTE PTR [rdx+0x0],dh
 100577e:	(bad)  
 100577f:	add    BYTE PTR [rbp+0x0],ch
 1005782:	add    BYTE PTR gs:[rax+rax*1+0x65],dh
 1005787:	add    BYTE PTR [rdx+0x0],dh
 100578a:	and    BYTE PTR [rax],al
 100578c:	and    eax,0x20006400
 1005791:	add    BYTE PTR [rbx+0x0],dh
 1005794:	je     0x1005796
 1005796:	jb     0x1005798
 1005798:	imul   eax,DWORD PTR [rax],0x67006e
 100579e:	and    BYTE PTR [rax],al
 10057a0:	jo     0x10057a2
 10057a2:	jb     0x10057a4
 10057a4:	imul   eax,DWORD PTR [rax],0x74006e
 10057aa:	and    BYTE PTR [rax],al
 10057ac:	data16 add BYTE PTR [rcx+0x0],ah
 10057b0:	imul   eax,DWORD PTR [rax],0x65006c
 10057b6:	add    BYTE PTR fs:[rax],ah
 10057b9:	add    BYTE PTR [rax+0x0],cl
 10057bc:	push   rdx
 10057bd:	add    BYTE PTR [rbp+0x0],al
 10057c0:	push   rbx
 10057c1:	add    BYTE PTR [rbp+0x0],dl
 10057c4:	rex.WR add BYTE PTR [rax+rax*1+0x20],r10b
 10057c9:	add    BYTE PTR [rbx+0x0],ah
 10057cc:	outs   dx,DWORD PTR ds:[rsi]
 10057cd:	add    BYTE PTR [rax+rax*1+0x65],ah
 10057d1:	add    BYTE PTR [rax],ah
 10057d3:	add    BYTE PTR [rax],dh
 10057d5:	add    BYTE PTR [rax+0x0],bh
 10057d8:	and    eax,0x7800
 10057dd:	add    BYTE PTR [rax],al
 10057df:	add    BYTE PTR [rbx+0x0],dl
 10057e2:	add    BYTE PTR gs:[rax+rax*1+0x20],dh
 10057e7:	add    BYTE PTR [rcx+0x0],ch
 10057ea:	outs   dx,BYTE PTR ds:[rsi]
 10057eb:	add    BYTE PTR [rax+rax*1+0x20],dh
 10057ef:	add    BYTE PTR [rax+0x0],dh
 10057f2:	(bad)  
 10057f3:	add    BYTE PTR [rdx+0x0],dh
 10057f6:	(bad)  
 10057f7:	add    BYTE PTR [rbp+0x0],ch
 10057fa:	add    BYTE PTR gs:[rax+rax*1+0x65],dh
 10057ff:	add    BYTE PTR [rdx+0x0],dh
 1005802:	and    BYTE PTR [rax],al
 1005804:	data16 add BYTE PTR [rcx+0x0],ah
 1005808:	imul   eax,DWORD PTR [rax],0x65006c
 100580e:	add    BYTE PTR fs:[rax],ah
 1005811:	add    BYTE PTR [rsi+0x0],ah
 1005814:	outs   dx,DWORD PTR ds:[rsi]
 1005815:	add    BYTE PTR [rdx+0x0],dh
 1005818:	and    BYTE PTR [rax],al
 100581a:	jo     0x100581c
 100581c:	(bad)  
 100581d:	add    BYTE PTR [rdx+0x0],dh
 1005820:	(bad)  
 1005821:	add    BYTE PTR [rbp+0x0],ch
 1005824:	add    BYTE PTR gs:[rax+rax*1+0x65],dh
 1005829:	add    BYTE PTR [rdx+0x0],dh
 100582c:	and    BYTE PTR [rax],al
 100582e:	and    eax,0x2c006400
 1005833:	add    BYTE PTR [rax],ah
 1005835:	add    BYTE PTR [rbp+0x0],ah
 1005838:	jb     0x100583a
 100583a:	jb     0x100583c
 100583c:	outs   dx,DWORD PTR ds:[rsi]
 100583d:	add    BYTE PTR [rdx+0x0],dh
 1005840:	cmp    al,BYTE PTR [rax]
 1005842:	and    BYTE PTR [rax],al
 1005844:	xor    BYTE PTR [rax],al
 1005846:	js     0x1005848
 1005848:	and    eax,0x38003000
 100584d:	add    BYTE PTR [rax+0x0],bl
 1005850:	or     al,BYTE PTR [rax]
 1005852:	add    BYTE PTR [rax],al
 1005854:	add    BYTE PTR [rax],al
 1005856:	add    BYTE PTR [rax],al
 1005858:	and    eax,0x2e006400
 100585d:	add    BYTE PTR [rip+0x2e006400],ah        # 0x2f00bc63
 1005863:	add    BYTE PTR [rip+0x2e006400],ah        # 0x2f00bc69
 1005869:	add    BYTE PTR [rip+0x6400],ah        # 0x100bc6f
 100586f:	add    BYTE PTR [rsi+0x0],dl
 1005872:	add    BYTE PTR gs:[rdx+0x0],dh
 1005876:	jae    0x1005878
 1005878:	imul   eax,DWORD PTR [rax],0x6e006f
 100587e:	and    BYTE PTR [rax],al
 1005880:	jo     0x1005882
 1005882:	(bad)  
 1005883:	add    BYTE PTR [rdx+0x0],dh
 1005886:	(bad)  
 1005887:	add    BYTE PTR [rbp+0x0],ch
 100588a:	add    BYTE PTR gs:[rax+rax*1+0x65],dh
 100588f:	add    BYTE PTR [rdx+0x0],dh
 1005892:	and    BYTE PTR [rax],al
 1005894:	and    eax,0x20006400
 1005899:	add    BYTE PTR [rbx+0x0],dh
 100589c:	je     0x100589e
 100589e:	jb     0x10058a0
 10058a0:	imul   eax,DWORD PTR [rax],0x67006e
 10058a6:	and    BYTE PTR [rax],al
 10058a8:	jo     0x10058aa
 10058aa:	jb     0x10058ac
 10058ac:	imul   eax,DWORD PTR [rax],0x74006e
 10058b2:	and    BYTE PTR [rax],al
 10058b4:	data16 add BYTE PTR [rcx+0x0],ah
 10058b8:	imul   eax,DWORD PTR [rax],0x65006c
 10058be:	add    BYTE PTR fs:[rax],ah
 10058c1:	add    BYTE PTR [rax+0x0],cl
 10058c4:	push   rdx
 10058c5:	add    BYTE PTR [rbp+0x0],al
 10058c8:	push   rbx
 10058c9:	add    BYTE PTR [rbp+0x0],dl
 10058cc:	rex.WR add BYTE PTR [rax+rax*1+0x20],r10b
 10058d1:	add    BYTE PTR [rbx+0x0],ah
 10058d4:	outs   dx,DWORD PTR ds:[rsi]
 10058d5:	add    BYTE PTR [rax+rax*1+0x65],ah
 10058d9:	add    BYTE PTR [rax],ah
 10058db:	add    BYTE PTR [rax],dh
 10058dd:	add    BYTE PTR [rax+0x0],bh
 10058e0:	and    eax,0x7800
	...
 10058ed:	add    BYTE PTR [rax],al
 10058ef:	add    BYTE PTR [rbx+0x0],dl
 10058f2:	add    BYTE PTR gs:[rax+rax*1+0x20],dh
 10058f7:	add    BYTE PTR [rsi+0x0],dh
 10058fa:	add    BYTE PTR gs:[rdx+0x0],dh
 10058fe:	jae    0x1005900
 1005900:	imul   eax,DWORD PTR [rax],0x6e006f
 1005906:	and    BYTE PTR [rax],al
 1005908:	jo     0x100590a
 100590a:	(bad)  
 100590b:	add    BYTE PTR [rdx+0x0],dh
 100590e:	(bad)  
 100590f:	add    BYTE PTR [rbp+0x0],ch
 1005912:	add    BYTE PTR gs:[rax+rax*1+0x65],dh
 1005917:	add    BYTE PTR [rdx+0x0],dh
 100591a:	and    BYTE PTR [rax],al
 100591c:	data16 add BYTE PTR [rcx+0x0],ah
 1005920:	imul   eax,DWORD PTR [rax],0x65006c
 1005926:	add    BYTE PTR fs:[rax],ah
 1005929:	add    BYTE PTR [rsi+0x0],ah
 100592c:	outs   dx,DWORD PTR ds:[rsi]
 100592d:	add    BYTE PTR [rdx+0x0],dh
 1005930:	and    BYTE PTR [rax],al
 1005932:	jo     0x1005934
 1005934:	(bad)  
 1005935:	add    BYTE PTR [rdx+0x0],dh
 1005938:	(bad)  
 1005939:	add    BYTE PTR [rbp+0x0],ch
 100593c:	add    BYTE PTR gs:[rax+rax*1+0x65],dh
 1005941:	add    BYTE PTR [rdx+0x0],dh
 1005944:	and    BYTE PTR [rax],al
 1005946:	and    eax,0x2c006400
 100594b:	add    BYTE PTR [rax],ah
 100594d:	add    BYTE PTR [rbp+0x0],ah
 1005950:	jb     0x1005952
 1005952:	jb     0x1005954
 1005954:	outs   dx,DWORD PTR ds:[rsi]
 1005955:	add    BYTE PTR [rdx+0x0],dh
 1005958:	cmp    al,BYTE PTR [rax]
 100595a:	and    BYTE PTR [rax],al
 100595c:	xor    BYTE PTR [rax],al
 100595e:	js     0x1005960
 1005960:	and    eax,0x38003000
 1005965:	add    BYTE PTR [rax+0x0],bl
 1005968:	or     al,BYTE PTR [rax]
 100596a:	add    BYTE PTR [rax],al
 100596c:	add    BYTE PTR [rax],al
 100596e:	add    BYTE PTR [rax],al
 1005970:	push   rax
 1005971:	add    BYTE PTR [rdi+0x0],ch
 1005974:	imul   eax,DWORD PTR [rax],0x74006e
 100597a:	add    BYTE PTR gs:[rdx+0x0],dh
 100597e:	and    BYTE PTR [rax],al
 1005980:	jo     0x1005982
 1005982:	(bad)  
 1005983:	add    BYTE PTR [rdx+0x0],dh
 1005986:	(bad)  
 1005987:	add    BYTE PTR [rbp+0x0],ch
 100598a:	add    BYTE PTR gs:[rax+rax*1+0x65],dh
 100598f:	add    BYTE PTR [rdx+0x0],dh
 1005992:	and    BYTE PTR [rax],al
 1005994:	and    eax,0x20006400
 1005999:	add    BYTE PTR [rbx+0x0],dh
 100599c:	je     0x100599e
 100599e:	jb     0x10059a0
 10059a0:	imul   eax,DWORD PTR [rax],0x67006e
 10059a6:	and    BYTE PTR [rax],al
 10059a8:	jo     0x10059aa
 10059aa:	jb     0x10059ac
 10059ac:	imul   eax,DWORD PTR [rax],0x74006e
 10059b2:	and    BYTE PTR [rax],al
 10059b4:	data16 add BYTE PTR [rcx+0x0],ah
 10059b8:	imul   eax,DWORD PTR [rax],0x65006c
 10059be:	add    BYTE PTR fs:[rax],ah
 10059c1:	add    BYTE PTR [rax+0x0],cl
 10059c4:	push   rdx
 10059c5:	add    BYTE PTR [rbp+0x0],al
 10059c8:	push   rbx
 10059c9:	add    BYTE PTR [rbp+0x0],dl
 10059cc:	rex.WR add BYTE PTR [rax+rax*1+0x20],r10b
 10059d1:	add    BYTE PTR [rbx+0x0],ah
 10059d4:	outs   dx,DWORD PTR ds:[rsi]
 10059d5:	add    BYTE PTR [rax+rax*1+0x65],ah
 10059d9:	add    BYTE PTR [rax],ah
 10059db:	add    BYTE PTR [rax],dh
 10059dd:	add    BYTE PTR [rax+0x0],bh
 10059e0:	and    eax,0x7800
	...
 10059ed:	add    BYTE PTR [rax],al
 10059ef:	add    BYTE PTR [rbx+0x0],dl
 10059f2:	add    BYTE PTR gs:[rax+rax*1+0x20],dh
 10059f7:	add    BYTE PTR [rax+0x0],dh
 10059fa:	outs   dx,DWORD PTR ds:[rsi]
 10059fb:	add    BYTE PTR [rcx+0x0],ch
 10059fe:	outs   dx,BYTE PTR ds:[rsi]
 10059ff:	add    BYTE PTR [rax+rax*1+0x65],dh
 1005a03:	add    BYTE PTR [rdx+0x0],dh
 1005a06:	and    BYTE PTR [rax],al
 1005a08:	jo     0x1005a0a
 1005a0a:	(bad)  
 1005a0b:	add    BYTE PTR [rdx+0x0],dh
 1005a0e:	(bad)  
 1005a0f:	add    BYTE PTR [rbp+0x0],ch
 1005a12:	add    BYTE PTR gs:[rax+rax*1+0x65],dh
 1005a17:	add    BYTE PTR [rdx+0x0],dh
 1005a1a:	and    BYTE PTR [rax],al
 1005a1c:	data16 add BYTE PTR [rcx+0x0],ah
 1005a20:	imul   eax,DWORD PTR [rax],0x65006c
 1005a26:	add    BYTE PTR fs:[rax],ah
 1005a29:	add    BYTE PTR [rsi+0x0],ah
 1005a2c:	outs   dx,DWORD PTR ds:[rsi]
 1005a2d:	add    BYTE PTR [rdx+0x0],dh
 1005a30:	and    BYTE PTR [rax],al
 1005a32:	jo     0x1005a34
 1005a34:	(bad)  
 1005a35:	add    BYTE PTR [rdx+0x0],dh
 1005a38:	(bad)  
 1005a39:	add    BYTE PTR [rbp+0x0],ch
 1005a3c:	add    BYTE PTR gs:[rax+rax*1+0x65],dh
 1005a41:	add    BYTE PTR [rdx+0x0],dh
 1005a44:	and    BYTE PTR [rax],al
 1005a46:	and    eax,0x2c006400
 1005a4b:	add    BYTE PTR [rax],ah
 1005a4d:	add    BYTE PTR [rbp+0x0],ah
 1005a50:	jb     0x1005a52
 1005a52:	jb     0x1005a54
 1005a54:	outs   dx,DWORD PTR ds:[rsi]
 1005a55:	add    BYTE PTR [rdx+0x0],dh
 1005a58:	cmp    al,BYTE PTR [rax]
 1005a5a:	and    BYTE PTR [rax],al
 1005a5c:	xor    BYTE PTR [rax],al
 1005a5e:	js     0x1005a60
 1005a60:	and    eax,0x38003000
 1005a65:	add    BYTE PTR [rax+0x0],bl
 1005a68:	or     al,BYTE PTR [rax]
 1005a6a:	add    BYTE PTR [rax],al
 1005a6c:	add    BYTE PTR [rax],al
 1005a6e:	add    BYTE PTR [rax],al
 1005a70:	rex.RX add BYTE PTR [rcx+0x0],r12b
 1005a74:	imul   eax,DWORD PTR [rax],0x65006c
 1005a7a:	add    BYTE PTR fs:[rax],ah
 1005a7d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1005a81:	add    BYTE PTR [rax],ah
 1005a83:	add    BYTE PTR [rbx+0x0],dh
 1005a86:	add    BYTE PTR gs:[rax+rax*1+0x20],dh
 1005a8b:	add    BYTE PTR [rax+rax*1+0x68],dh
 1005a8f:	add    BYTE PTR [rbp+0x0],ah
 1005a92:	and    BYTE PTR [rax],al
 1005a94:	(bad)  
 1005a95:	add    BYTE PTR [rax+0x0],dh
 1005a98:	jo     0x1005a9a
 1005a9a:	ins    BYTE PTR es:[rdi],dx
 1005a9b:	add    BYTE PTR [rcx+0x0],ch
 1005a9e:	movsxd eax,DWORD PTR [rax]
 1005aa0:	(bad)  
 1005aa1:	add    BYTE PTR [rax+rax*1+0x69],dh
 1005aa5:	add    BYTE PTR [rdi+0x0],ch
 1005aa8:	outs   dx,BYTE PTR ds:[rsi]
 1005aa9:	add    BYTE PTR [rax],ah
 1005aab:	add    BYTE PTR [rax+0x0],dh
 1005aae:	(bad)  
 1005aaf:	add    BYTE PTR [rax+rax*1+0x68],dh
 1005ab3:	add    BYTE PTR [rax+rax*1],ch
 1005ab6:	and    BYTE PTR [rax],al
 1005ab8:	add    BYTE PTR gs:[rdx+0x0],dh
 1005abc:	jb     0x1005abe
 1005abe:	outs   dx,DWORD PTR ds:[rsi]
 1005abf:	add    BYTE PTR [rdx+0x0],dh
 1005ac2:	cmp    al,BYTE PTR [rax]
 1005ac4:	and    BYTE PTR [rax],al
 1005ac6:	xor    BYTE PTR [rax],al
 1005ac8:	js     0x1005aca
 1005aca:	and    eax,0x38003000
 1005acf:	add    BYTE PTR [rax+0x0],bl
 1005ad2:	or     al,BYTE PTR [rax]
	...
 1005ae0:	rex.RX add BYTE PTR [rcx+0x0],r12b
 1005ae4:	imul   eax,DWORD PTR [rax],0x65006c
 1005aea:	add    BYTE PTR fs:[rax],ah
 1005aed:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1005af1:	add    BYTE PTR [rax],ah
 1005af3:	add    BYTE PTR [rbx+0x0],dh
 1005af6:	add    BYTE PTR gs:[rax+rax*1+0x20],dh
 1005afb:	add    BYTE PTR [rax+rax*1+0x68],dh
 1005aff:	add    BYTE PTR [rbp+0x0],ah
 1005b02:	and    BYTE PTR [rax],al
 1005b04:	add    BYTE PTR fs:[rbp+0x0],ah
 1005b08:	jae    0x1005b0a
 1005b0a:	movsxd eax,DWORD PTR [rax]
 1005b0c:	jb     0x1005b0e
 1005b0e:	imul   eax,DWORD PTR [rax],0x740070
 1005b14:	imul   eax,DWORD PTR [rax],0x6e006f
 1005b1a:	sub    al,0x0
 1005b1c:	and    BYTE PTR [rax],al
 1005b1e:	add    BYTE PTR gs:[rdx+0x0],dh
 1005b22:	jb     0x1005b24
 1005b24:	outs   dx,DWORD PTR ds:[rsi]
 1005b25:	add    BYTE PTR [rdx+0x0],dh
 1005b28:	cmp    al,BYTE PTR [rax]
 1005b2a:	and    BYTE PTR [rax],al
 1005b2c:	xor    BYTE PTR [rax],al
 1005b2e:	js     0x1005b30
 1005b30:	and    eax,0x38003000
 1005b35:	add    BYTE PTR [rax+0x0],bl
 1005b38:	or     al,BYTE PTR [rax]
 1005b3a:	add    BYTE PTR [rax],al
 1005b3c:	add    BYTE PTR [rax],al
 1005b3e:	add    BYTE PTR [rax],al
 1005b40:	push   rdi
 1005b41:	add    BYTE PTR [rbp+0x0],ah
 1005b44:	jb     0x1005b46
 1005b46:	push   rdx
 1005b47:	add    BYTE PTR [rbp+0x0],ah
 1005b4a:	jo     0x1005b4c
 1005b4c:	outs   dx,DWORD PTR ds:[rsi]
 1005b4d:	add    BYTE PTR [rdx+0x0],dh
 1005b50:	je     0x1005b52
 1005b52:	rex.XB add BYTE PTR [r10+0x0],sil
 1005b56:	add    BYTE PTR gs:[rcx+0x0],ah
 1005b5a:	je     0x1005b5c
 1005b5c:	add    BYTE PTR gs:[rax],ah
 1005b5f:	add    BYTE PTR [rsi+0x0],ah
 1005b62:	(bad)  
 1005b63:	add    BYTE PTR [rcx+0x0],ch
 1005b66:	ins    BYTE PTR es:[rdi],dx
 1005b67:	add    BYTE PTR [rbp+0x0],ah
 1005b6a:	add    BYTE PTR fs:[rax+rax*1],ch
 1005b6e:	and    BYTE PTR [rax],al
 1005b70:	add    BYTE PTR gs:[rdx+0x0],dh
 1005b74:	jb     0x1005b76
 1005b76:	outs   dx,DWORD PTR ds:[rsi]
 1005b77:	add    BYTE PTR [rdx+0x0],dh
 1005b7a:	cmp    al,BYTE PTR [rax]
 1005b7c:	and    BYTE PTR [rax],al
 1005b7e:	xor    BYTE PTR [rax],al
 1005b80:	js     0x1005b82
 1005b82:	and    eax,0x38003000
 1005b87:	add    BYTE PTR [rax+0x0],bl
 1005b8a:	or     al,BYTE PTR [rax]
 1005b8c:	add    BYTE PTR [rax],al
 1005b8e:	add    BYTE PTR [rax],al
 1005b90:	rex.XB add BYTE PTR [r10+0x0],sil
 1005b94:	add    BYTE PTR gs:[rcx+0x0],ah
 1005b98:	je     0x1005b9a
 1005b9a:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1005b9f:	add    BYTE PTR [rax+rax*1+0x68],dh
 1005ba3:	add    BYTE PTR [rbp+0x0],ah
 1005ba6:	and    BYTE PTR [rax],al
 1005ba8:	jb     0x1005baa
 1005baa:	add    BYTE PTR gs:[rax+0x0],dh
 1005bae:	outs   dx,DWORD PTR ds:[rsi]
 1005baf:	add    BYTE PTR [rdx+0x0],dh
 1005bb2:	je     0x1005bb4
 1005bb4:	add    BYTE PTR cs:[rdx],cl
	...
 1005bbf:	add    BYTE PTR [rbx+0x0],dl
 1005bc2:	add    BYTE PTR gs:[rax+rax*1+0x20],dh
 1005bc7:	add    BYTE PTR [rbx+0x0],dh
 1005bca:	je     0x1005bcc
 1005bcc:	jb     0x1005bce
 1005bce:	imul   eax,DWORD PTR [rax],0x67006e
 1005bd4:	and    BYTE PTR [rax],al
 1005bd6:	jo     0x1005bd8
 1005bd8:	(bad)  
 1005bd9:	add    BYTE PTR [rdx+0x0],dh
 1005bdc:	(bad)  
 1005bdd:	add    BYTE PTR [rbp+0x0],ch
 1005be0:	add    BYTE PTR gs:[rax+rax*1+0x65],dh
 1005be5:	add    BYTE PTR [rdx+0x0],dh
 1005be8:	and    BYTE PTR [rax],al
 1005bea:	data16 add BYTE PTR [rcx+0x0],ah
 1005bee:	imul   eax,DWORD PTR [rax],0x65006c
 1005bf4:	add    BYTE PTR fs:[rax],ah
 1005bf7:	add    BYTE PTR [rsi+0x0],ah
 1005bfa:	outs   dx,DWORD PTR ds:[rsi]
 1005bfb:	add    BYTE PTR [rdx+0x0],dh
 1005bfe:	and    BYTE PTR [rax],al
 1005c00:	jo     0x1005c02
 1005c02:	(bad)  
 1005c03:	add    BYTE PTR [rdx+0x0],dh
 1005c06:	(bad)  
 1005c07:	add    BYTE PTR [rbp+0x0],ch
 1005c0a:	add    BYTE PTR gs:[rax+rax*1+0x65],dh
 1005c0f:	add    BYTE PTR [rdx+0x0],dh
 1005c12:	and    BYTE PTR [rax],al
 1005c14:	xor    BYTE PTR [rax],al
 1005c16:	sub    al,0x0
 1005c18:	and    BYTE PTR [rax],al
 1005c1a:	add    BYTE PTR gs:[rdx+0x0],dh
 1005c1e:	jb     0x1005c20
 1005c20:	outs   dx,DWORD PTR ds:[rsi]
 1005c21:	add    BYTE PTR [rdx+0x0],dh
 1005c24:	cmp    al,BYTE PTR [rax]
 1005c26:	and    BYTE PTR [rax],al
 1005c28:	xor    BYTE PTR [rax],al
 1005c2a:	js     0x1005c2c
 1005c2c:	and    eax,0x38003000
 1005c31:	add    BYTE PTR [rax+0x0],bl
 1005c34:	or     al,BYTE PTR [rax]
	...
 1005c3e:	add    BYTE PTR [rax],al
 1005c40:	push   rbx
 1005c41:	add    BYTE PTR [rbp+0x0],ah
 1005c44:	je     0x1005c46
 1005c46:	and    BYTE PTR [rax],al
 1005c48:	jae    0x1005c4a
 1005c4a:	je     0x1005c4c
 1005c4c:	jb     0x1005c4e
 1005c4e:	imul   eax,DWORD PTR [rax],0x67006e
 1005c54:	and    BYTE PTR [rax],al
 1005c56:	jo     0x1005c58
 1005c58:	(bad)  
 1005c59:	add    BYTE PTR [rdx+0x0],dh
 1005c5c:	(bad)  
 1005c5d:	add    BYTE PTR [rbp+0x0],ch
 1005c60:	add    BYTE PTR gs:[rax+rax*1+0x65],dh
 1005c65:	add    BYTE PTR [rdx+0x0],dh
 1005c68:	and    BYTE PTR [rax],al
 1005c6a:	data16 add BYTE PTR [rcx+0x0],ah
 1005c6e:	imul   eax,DWORD PTR [rax],0x65006c
 1005c74:	add    BYTE PTR fs:[rax],ah
 1005c77:	add    BYTE PTR [rsi+0x0],ah
 1005c7a:	outs   dx,DWORD PTR ds:[rsi]
 1005c7b:	add    BYTE PTR [rdx+0x0],dh
 1005c7e:	and    BYTE PTR [rax],al
 1005c80:	jo     0x1005c82
 1005c82:	(bad)  
 1005c83:	add    BYTE PTR [rdx+0x0],dh
 1005c86:	(bad)  
 1005c87:	add    BYTE PTR [rbp+0x0],ch
 1005c8a:	add    BYTE PTR gs:[rax+rax*1+0x65],dh
 1005c8f:	add    BYTE PTR [rdx+0x0],dh
 1005c92:	and    BYTE PTR [rax],al
 1005c94:	xor    eax,DWORD PTR [rax]
 1005c96:	sub    al,0x0
 1005c98:	and    BYTE PTR [rax],al
 1005c9a:	add    BYTE PTR gs:[rdx+0x0],dh
 1005c9e:	jb     0x1005ca0
 1005ca0:	outs   dx,DWORD PTR ds:[rsi]
 1005ca1:	add    BYTE PTR [rdx+0x0],dh
 1005ca4:	cmp    al,BYTE PTR [rax]
 1005ca6:	and    BYTE PTR [rax],al
 1005ca8:	xor    BYTE PTR [rax],al
 1005caa:	js     0x1005cac
 1005cac:	and    eax,0x38003000
 1005cb1:	add    BYTE PTR [rax+0x0],bl
 1005cb4:	or     al,BYTE PTR [rax]
	...
 1005cbe:	add    BYTE PTR [rax],al
 1005cc0:	push   rdi
 1005cc1:	add    BYTE PTR [rbp+0x0],ah
 1005cc4:	jb     0x1005cc6
 1005cc6:	push   rdx
 1005cc7:	add    BYTE PTR [rbp+0x0],ah
 1005cca:	jo     0x1005ccc
 1005ccc:	outs   dx,DWORD PTR ds:[rsi]
 1005ccd:	add    BYTE PTR [rdx+0x0],dh
 1005cd0:	je     0x1005cd2
 1005cd2:	add    BYTE PTR [r8+rax*1+0x64],spl
 1005cd7:	add    BYTE PTR [rsi+0x0],ah
 1005cda:	imul   eax,DWORD PTR [rax],0x65006c
 1005ce0:	and    BYTE PTR [rax],al
 1005ce2:	rex.WRB add BYTE PTR [r9+0x0],r13b
 1005ce6:	outs   dx,BYTE PTR ds:[rsi]
 1005ce7:	add    BYTE PTR [rcx+0x0],ch
 1005cea:	and    BYTE PTR [rax],al
 1005cec:	add    BYTE PTR [rbp+0x0],r14b
 1005cf0:	ins    DWORD PTR es:[rdi],dx
 1005cf1:	add    BYTE PTR [rax+0x0],dh
 1005cf4:	and    BYTE PTR [rax],al
 1005cf6:	rex.RX add BYTE PTR [rcx+0x0],r13b
 1005cfa:	ins    BYTE PTR es:[rdi],dx
 1005cfb:	add    BYTE PTR [rbp+0x0],ah
 1005cfe:	and    BYTE PTR [rax],al
 1005d00:	data16 add BYTE PTR [rcx+0x0],ah
 1005d04:	imul   eax,DWORD PTR [rax],0x65006c
 1005d0a:	add    BYTE PTR fs:[rax+rax*1],ch
 1005d0e:	and    BYTE PTR [rax],al
 1005d10:	add    BYTE PTR gs:[rdx+0x0],dh
 1005d14:	jb     0x1005d16
 1005d16:	outs   dx,DWORD PTR ds:[rsi]
 1005d17:	add    BYTE PTR [rdx+0x0],dh
 1005d1a:	cmp    al,BYTE PTR [rax]
 1005d1c:	and    BYTE PTR [rax],al
 1005d1e:	xor    BYTE PTR [rax],al
 1005d20:	js     0x1005d22
 1005d22:	and    eax,0x38003000
 1005d27:	add    BYTE PTR [rax+0x0],bl
 1005d2a:	or     al,BYTE PTR [rax]
 1005d2c:	add    BYTE PTR [rax],al
 1005d2e:	add    BYTE PTR [rax],al
 1005d30:	push   rdi
 1005d31:	add    BYTE PTR [rbp+0x0],ah
 1005d34:	jb     0x1005d36
 1005d36:	push   rdx
 1005d37:	add    BYTE PTR [rbp+0x0],ah
 1005d3a:	jo     0x1005d3c
 1005d3c:	outs   dx,DWORD PTR ds:[rsi]
 1005d3d:	add    BYTE PTR [rdx+0x0],dh
 1005d40:	je     0x1005d42
 1005d42:	add    BYTE PTR [r8+rax*1+0x64],spl
 1005d47:	add    BYTE PTR [rsi+0x0],al
 1005d4a:	imul   eax,DWORD PTR [rax],0x65006c
 1005d50:	and    BYTE PTR [rax],al
 1005d52:	rex.WRB add BYTE PTR [r9+0x0],r13b
 1005d56:	outs   dx,BYTE PTR ds:[rsi]
 1005d57:	add    BYTE PTR [rcx+0x0],ch
 1005d5a:	and    BYTE PTR [rax],al
 1005d5c:	add    BYTE PTR [rbp+0x0],r14b
 1005d60:	ins    DWORD PTR es:[rdi],dx
 1005d61:	add    BYTE PTR [rax+0x0],dh
 1005d64:	and    BYTE PTR [rax],al
 1005d66:	jae    0x1005d68
 1005d68:	jne    0x1005d6a
 1005d6a:	movsxd eax,DWORD PTR [rax]
 1005d6c:	movsxd eax,DWORD PTR [rax]
 1005d6e:	add    BYTE PTR gs:[rbp+0x0],ah
 1005d72:	add    BYTE PTR fs:[rbp+0x0],ah
 1005d76:	add    BYTE PTR fs:[rsi],ch
 1005d79:	add    BYTE PTR [rax],al
 1005d7b:	add    BYTE PTR [rax],al
 1005d7d:	add    BYTE PTR [rax],al
 1005d7f:	add    BYTE PTR [rdi+0x0],dl
 1005d82:	add    BYTE PTR gs:[rdx+0x0],dh
 1005d86:	push   rdx
 1005d87:	add    BYTE PTR [rbp+0x0],ah
 1005d8a:	jo     0x1005d8c
 1005d8c:	outs   dx,DWORD PTR ds:[rsi]
 1005d8d:	add    BYTE PTR [rdx+0x0],dh
 1005d90:	je     0x1005d92
 1005d92:	add    BYTE PTR [r8+rax*1+0x64],spl
 1005d97:	add    BYTE PTR [rsi+0x0],ah
 1005d9a:	imul   eax,DWORD PTR [rax],0x65006c
 1005da0:	and    BYTE PTR [rax],al
 1005da2:	push   rbx
 1005da3:	add    BYTE PTR [rcx+0x0],dl
 1005da6:	rex.WR add BYTE PTR [rax+rax*1+0x75],r8b
 1005dab:	add    BYTE PTR [rbp+0x0],ch
 1005dae:	jo     0x1005db0
 1005db0:	rex.RX add BYTE PTR [rcx+0x0],r13b
 1005db4:	ins    BYTE PTR es:[rdi],dx
 1005db5:	add    BYTE PTR [rbp+0x0],ah
 1005db8:	and    BYTE PTR [rax],al
 1005dba:	data16 add BYTE PTR [rcx+0x0],ah
 1005dbe:	imul   eax,DWORD PTR [rax],0x65006c
 1005dc4:	add    BYTE PTR fs:[rax+rax*1],ch
 1005dc8:	and    BYTE PTR [rax],al
 1005dca:	add    BYTE PTR gs:[rdx+0x0],dh
 1005dce:	jb     0x1005dd0
 1005dd0:	outs   dx,DWORD PTR ds:[rsi]
 1005dd1:	add    BYTE PTR [rdx+0x0],dh
 1005dd4:	cmp    al,BYTE PTR [rax]
 1005dd6:	and    BYTE PTR [rax],al
 1005dd8:	xor    BYTE PTR [rax],al
 1005dda:	js     0x1005ddc
 1005ddc:	and    eax,0x38003000
 1005de1:	add    BYTE PTR [rax+0x0],bl
 1005de4:	or     al,BYTE PTR [rax]
	...
 1005dee:	add    BYTE PTR [rax],al
 1005df0:	push   rdi
 1005df1:	add    BYTE PTR [rbp+0x0],ah
 1005df4:	jb     0x1005df6
 1005df6:	push   rdx
 1005df7:	add    BYTE PTR [rbp+0x0],ah
 1005dfa:	jo     0x1005dfc
 1005dfc:	outs   dx,DWORD PTR ds:[rsi]
 1005dfd:	add    BYTE PTR [rdx+0x0],dh
 1005e00:	je     0x1005e02
 1005e02:	add    BYTE PTR [r8+rax*1+0x64],spl
 1005e07:	add    BYTE PTR [rsi+0x0],al
 1005e0a:	imul   eax,DWORD PTR [rax],0x65006c
 1005e10:	and    BYTE PTR [rax],al
 1005e12:	push   rbx
 1005e13:	add    BYTE PTR [rcx+0x0],dl
 1005e16:	rex.WR add BYTE PTR [rax+rax*1+0x75],r8b
 1005e1b:	add    BYTE PTR [rbp+0x0],ch
 1005e1e:	jo     0x1005e20
 1005e20:	rex.RX add BYTE PTR [rcx+0x0],r13b
 1005e24:	ins    BYTE PTR es:[rdi],dx
 1005e25:	add    BYTE PTR [rbp+0x0],ah
 1005e28:	and    BYTE PTR [rax],al
 1005e2a:	jae    0x1005e2c
 1005e2c:	jne    0x1005e2e
 1005e2e:	movsxd eax,DWORD PTR [rax]
 1005e30:	movsxd eax,DWORD PTR [rax]
 1005e32:	add    BYTE PTR gs:[rbp+0x0],ah
 1005e36:	add    BYTE PTR fs:[rbp+0x0],ah
 1005e3a:	add    BYTE PTR fs:[rsi],ch
 1005e3d:	add    BYTE PTR [rax],al
 1005e3f:	add    BYTE PTR [rdi+0x0],dl
 1005e42:	add    BYTE PTR gs:[rdx+0x0],dh
 1005e46:	push   rdx
 1005e47:	add    BYTE PTR [rbp+0x0],ah
 1005e4a:	jo     0x1005e4c
 1005e4c:	outs   dx,DWORD PTR ds:[rsi]
 1005e4d:	add    BYTE PTR [rdx+0x0],dh
 1005e50:	je     0x1005e52
 1005e52:	add    BYTE PTR [r8+rax*1+0x64],spl
 1005e57:	add    BYTE PTR [rsi+0x0],ah
 1005e5a:	imul   eax,DWORD PTR [rax],0x65006c
 1005e60:	and    BYTE PTR [rax],al
 1005e62:	add    BYTE PTR [r8+0x0],r15b
 1005e66:	je     0x1005e68
 1005e68:	jb     0x1005e6a
 1005e6a:	(bad)  
 1005e6b:	add    BYTE PTR [rax],ah
 1005e6d:	add    BYTE PTR [rsi+0x0],al
 1005e70:	imul   eax,DWORD PTR [rax],0x65006c
 1005e76:	and    BYTE PTR [rax],al
 1005e78:	data16 add BYTE PTR [rcx+0x0],ah
 1005e7c:	imul   eax,DWORD PTR [rax],0x65006c
 1005e82:	add    BYTE PTR fs:[rax+rax*1],ch
 1005e86:	and    BYTE PTR [rax],al
 1005e88:	add    BYTE PTR gs:[rdx+0x0],dh
 1005e8c:	jb     0x1005e8e
 1005e8e:	outs   dx,DWORD PTR ds:[rsi]
 1005e8f:	add    BYTE PTR [rdx+0x0],dh
 1005e92:	cmp    al,BYTE PTR [rax]
 1005e94:	and    BYTE PTR [rax],al
 1005e96:	xor    BYTE PTR [rax],al
 1005e98:	js     0x1005e9a
 1005e9a:	and    eax,0x38003000
 1005e9f:	add    BYTE PTR [rax+0x0],bl
 1005ea2:	or     al,BYTE PTR [rax]
	...
 1005eb0:	push   rdi
 1005eb1:	add    BYTE PTR [rbp+0x0],ah
 1005eb4:	jb     0x1005eb6
 1005eb6:	push   rdx
 1005eb7:	add    BYTE PTR [rbp+0x0],ah
 1005eba:	jo     0x1005ebc
 1005ebc:	outs   dx,DWORD PTR ds:[rsi]
 1005ebd:	add    BYTE PTR [rdx+0x0],dh
 1005ec0:	je     0x1005ec2
 1005ec2:	add    BYTE PTR [r8+rax*1+0x64],spl
 1005ec7:	add    BYTE PTR [rsi+0x0],al
 1005eca:	imul   eax,DWORD PTR [rax],0x65006c
 1005ed0:	and    BYTE PTR [rax],al
 1005ed2:	add    BYTE PTR [r8+0x0],r15b
 1005ed6:	je     0x1005ed8
 1005ed8:	jb     0x1005eda
 1005eda:	(bad)  
 1005edb:	add    BYTE PTR [rax],ah
 1005edd:	add    BYTE PTR [rsi+0x0],al
 1005ee0:	imul   eax,DWORD PTR [rax],0x65006c
 1005ee6:	and    BYTE PTR [rax],al
 1005ee8:	jae    0x1005eea
 1005eea:	jne    0x1005eec
 1005eec:	movsxd eax,DWORD PTR [rax]
 1005eee:	movsxd eax,DWORD PTR [rax]
 1005ef0:	add    BYTE PTR gs:[rbp+0x0],ah
 1005ef4:	add    BYTE PTR fs:[rbp+0x0],ah
 1005ef8:	add    BYTE PTR fs:[rsi],ch
 1005efb:	add    BYTE PTR [rax],al
 1005efd:	add    BYTE PTR [rax],al
 1005eff:	add    BYTE PTR [rdi+0x0],dl
 1005f02:	add    BYTE PTR gs:[rdx+0x0],dh
 1005f06:	push   rdx
 1005f07:	add    BYTE PTR [rbp+0x0],ah
 1005f0a:	jo     0x1005f0c
 1005f0c:	outs   dx,DWORD PTR ds:[rsi]
 1005f0d:	add    BYTE PTR [rdx+0x0],dh
 1005f10:	je     0x1005f12
 1005f12:	add    BYTE PTR [r8+rax*1+0x64],spl
 1005f17:	add    BYTE PTR [rsi+0x0],ah
 1005f1a:	imul   eax,DWORD PTR [rax],0x65006c
 1005f20:	and    BYTE PTR [rax],al
 1005f22:	rex.WR add BYTE PTR [rdi+0x0],r13b
 1005f26:	add    BYTE PTR [eax],ah
 1005f29:	add    BYTE PTR [rax+rax*1+0x61],dl
 1005f2d:	add    BYTE PTR [rcx+0x0],ch
 1005f30:	ins    BYTE PTR es:[rdi],dx
 1005f31:	add    BYTE PTR [rax],ah
 1005f33:	add    BYTE PTR [rsi+0x0],al
 1005f36:	imul   eax,DWORD PTR [rax],0x65006c
 1005f3c:	and    BYTE PTR [rax],al
 1005f3e:	data16 add BYTE PTR [rcx+0x0],ah
 1005f42:	imul   eax,DWORD PTR [rax],0x65006c
 1005f48:	add    BYTE PTR fs:[rax+rax*1],ch
 1005f4c:	and    BYTE PTR [rax],al
 1005f4e:	add    BYTE PTR gs:[rdx+0x0],dh
 1005f52:	jb     0x1005f54
 1005f54:	outs   dx,DWORD PTR ds:[rsi]
 1005f55:	add    BYTE PTR [rdx+0x0],dh
 1005f58:	cmp    al,BYTE PTR [rax]
 1005f5a:	and    BYTE PTR [rax],al
 1005f5c:	xor    BYTE PTR [rax],al
 1005f5e:	js     0x1005f60
 1005f60:	and    eax,0x38003000
 1005f65:	add    BYTE PTR [rax+0x0],bl
 1005f68:	or     al,BYTE PTR [rax]
 1005f6a:	add    BYTE PTR [rax],al
 1005f6c:	add    BYTE PTR [rax],al
 1005f6e:	add    BYTE PTR [rax],al
 1005f70:	push   rdi
 1005f71:	add    BYTE PTR [rbp+0x0],ah
 1005f74:	jb     0x1005f76
 1005f76:	push   rdx
 1005f77:	add    BYTE PTR [rbp+0x0],ah
 1005f7a:	jo     0x1005f7c
 1005f7c:	outs   dx,DWORD PTR ds:[rsi]
 1005f7d:	add    BYTE PTR [rdx+0x0],dh
 1005f80:	je     0x1005f82
 1005f82:	add    BYTE PTR [r8+rax*1+0x64],spl
 1005f87:	add    BYTE PTR [rsi+0x0],al
 1005f8a:	imul   eax,DWORD PTR [rax],0x65006c
 1005f90:	and    BYTE PTR [rax],al
 1005f92:	rex.WR add BYTE PTR [rdi+0x0],r13b
 1005f96:	add    BYTE PTR [eax],ah
 1005f99:	add    BYTE PTR [rax+rax*1+0x61],dl
 1005f9d:	add    BYTE PTR [rcx+0x0],ch
 1005fa0:	ins    BYTE PTR es:[rdi],dx
 1005fa1:	add    BYTE PTR [rax],ah
 1005fa3:	add    BYTE PTR [rsi+0x0],al
 1005fa6:	imul   eax,DWORD PTR [rax],0x65006c
 1005fac:	and    BYTE PTR [rax],al
 1005fae:	jae    0x1005fb0
 1005fb0:	jne    0x1005fb2
 1005fb2:	movsxd eax,DWORD PTR [rax]
 1005fb4:	movsxd eax,DWORD PTR [rax]
 1005fb6:	add    BYTE PTR gs:[rbp+0x0],ah
 1005fba:	add    BYTE PTR fs:[rbp+0x0],ah
 1005fbe:	add    BYTE PTR fs:[rsi],ch
	...
 1005fcd:	add    BYTE PTR [rax],al
 1005fcf:	add    BYTE PTR [rdi+0x0],dl
 1005fd2:	add    BYTE PTR gs:[rdx+0x0],dh
 1005fd6:	push   rdx
 1005fd7:	add    BYTE PTR [rbp+0x0],ah
 1005fda:	jo     0x1005fdc
 1005fdc:	outs   dx,DWORD PTR ds:[rsi]
 1005fdd:	add    BYTE PTR [rdx+0x0],dh
 1005fe0:	je     0x1005fe2
 1005fe2:	push   rbx
 1005fe3:	add    BYTE PTR [rbp+0x0],dh
 1005fe6:	(bad)  
 1005fe7:	add    BYTE PTR [rbp+0x0],ch
 1005fea:	imul   eax,DWORD PTR [rax],0x200074
 1005ff0:	data16 add BYTE PTR [rcx+0x0],ah
 1005ff4:	imul   eax,DWORD PTR [rax],0x65006c
 1005ffa:	add    BYTE PTR fs:[rax+rax*1],ch
 1005ffe:	and    BYTE PTR [rax],al
 1006000:	add    BYTE PTR gs:[rdx+0x0],dh
 1006004:	jb     0x1006006
 1006006:	outs   dx,DWORD PTR ds:[rsi]
 1006007:	add    BYTE PTR [rdx+0x0],dh
 100600a:	cmp    al,BYTE PTR [rax]
 100600c:	and    BYTE PTR [rax],al
 100600e:	xor    BYTE PTR [rax],al
 1006010:	js     0x1006012
 1006012:	and    eax,0x38003000
 1006017:	add    BYTE PTR [rax+0x0],bl
 100601a:	or     al,BYTE PTR [rax]
 100601c:	add    BYTE PTR [rax],al
 100601e:	add    BYTE PTR [rax],al
 1006020:	push   rbx
 1006021:	add    BYTE PTR [rbp+0x0],dh
 1006024:	(bad)  
 1006025:	add    BYTE PTR [rbp+0x0],ch
 1006028:	imul   eax,DWORD PTR [rax],0x740074
 100602e:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1006033:	add    BYTE PTR [rdx+0x0],dh
 1006036:	add    BYTE PTR gs:[rax+0x0],dh
 100603a:	outs   dx,DWORD PTR ds:[rsi]
 100603b:	add    BYTE PTR [rdx+0x0],dh
 100603e:	je     0x1006040
 1006040:	and    BYTE PTR [rax],al
 1006042:	(bad)  
 1006043:	add    BYTE PTR [rbx+0x0],dh
 1006046:	jns    0x1006048
 1006048:	outs   dx,BYTE PTR ds:[rsi]
 1006049:	add    BYTE PTR [rbx+0x0],ah
 100604c:	push   0x6f007200
 1006051:	add    BYTE PTR [rsi+0x0],ch
 1006054:	outs   dx,DWORD PTR ds:[rsi]
 1006055:	add    BYTE PTR [rbp+0x0],dh
 1006058:	jae    0x100605a
 100605a:	ins    BYTE PTR es:[rdi],dx
 100605b:	add    BYTE PTR [rcx+0x0],bh
 100605e:	add    BYTE PTR cs:[rdx],cl
	...
 100606d:	add    BYTE PTR [rax],al
 100606f:	add    BYTE PTR [rdi+0x0],dl
 1006072:	add    BYTE PTR gs:[rdx+0x0],dh
 1006076:	push   rdx
 1006077:	add    BYTE PTR [rbp+0x0],ah
 100607a:	jo     0x100607c
 100607c:	outs   dx,DWORD PTR ds:[rsi]
 100607d:	add    BYTE PTR [rdx+0x0],dh
 1006080:	je     0x1006082
 1006082:	add    BYTE PTR [r8+r8*1+0x6f],bpl
 1006087:	add    BYTE PTR [rbx+0x0],dh
 100608a:	add    BYTE PTR gs:[rax+0x0],cl
 100608e:	(bad)  
 100608f:	add    BYTE PTR [rsi+0x0],ch
 1006092:	add    BYTE PTR fs:[rax+rax*1+0x65],ch
 1006097:	add    BYTE PTR [rax],ah
 1006099:	add    BYTE PTR [rsi+0x0],ah
 100609c:	(bad)  
 100609d:	add    BYTE PTR [rcx+0x0],ch
 10060a0:	ins    BYTE PTR es:[rdi],dx
 10060a1:	add    BYTE PTR [rbp+0x0],ah
 10060a4:	add    BYTE PTR fs:[rax+rax*1],ch
 10060a8:	and    BYTE PTR [rax],al
 10060aa:	add    BYTE PTR gs:[rdx+0x0],dh
 10060ae:	jb     0x10060b0
 10060b0:	outs   dx,DWORD PTR ds:[rsi]
 10060b1:	add    BYTE PTR [rdx+0x0],dh
 10060b4:	cmp    al,BYTE PTR [rax]
 10060b6:	and    BYTE PTR [rax],al
 10060b8:	xor    BYTE PTR [rax],al
 10060ba:	js     0x10060bc
 10060bc:	and    eax,0x38003000
 10060c1:	add    BYTE PTR [rax+0x0],bl
 10060c4:	or     al,BYTE PTR [rax]
 10060c6:	add    BYTE PTR [rax],al
 10060c8:	push   rbx
 10060c9:	add    BYTE PTR [rcx+0x0],dl
 10060cc:	rex.WR add BYTE PTR [rbx+0x0],r10b
 10060d0:	add    BYTE PTR [r10+0x0],r10b
 10060d4:	push   rsi
 10060d5:	add    BYTE PTR [rdx+0x0],dl
 10060d8:	pop    rdi
 10060d9:	add    BYTE PTR [rcx+0x0],al
 10060dc:	push   rax
 10060dd:	add    BYTE PTR [rax+rax*1+0x55],al
 10060e1:	add    BYTE PTR [rbp+0x0],cl
 10060e4:	push   rax
 10060e5:	add    BYTE PTR [rax+rax*1+0x49],al
 10060e9:	add    BYTE PTR [rdx+0x0],dl
 10060ec:	add    BYTE PTR [rax],al
 10060ee:	add    BYTE PTR [rax],al
 10060f0:	add    BYTE PTR [r8+0x0],dl
 10060f4:	push   rax
 10060f5:	add    BYTE PTR [rbp+0x0],al
 10060f8:	rex.WRX add BYTE PTR [rsi+0x0],r10b
 10060fc:	add    BYTE PTR [rax],al
 10060fe:	add    BYTE PTR [rax],al
 1006100:	and    eax,0x73006c00
 1006105:	add    BYTE PTR [rsi],ch
 1006107:	add    BYTE PTR [rip+0x2e007000],ah        # 0x2f00d10d
 100610d:	add    BYTE PTR [rax],dh
	...
 100611f:	add    BYTE PTR [rip+0x73006c00],ah        # 0x7400cd25
 1006125:	add    BYTE PTR [rsi],ch
 1006127:	add    BYTE PTR [rip+0x2e007000],ah        # 0x2f00d12d
 100612d:	add    BYTE PTR [rdi+0x0],al
 1006130:	rex.WRB add BYTE PTR [r8+rax*1+0x2d],r10b
 1006135:	add    BYTE PTR [rip+0x64003400],ah        # 0x6500953b
 100613b:	add    BYTE PTR [rip+0x30002500],ch        # 0x31008641
 1006141:	add    BYTE PTR [rdx],dh
 1006143:	add    BYTE PTR [rax+rax*1+0x2d],ah
 1006147:	add    BYTE PTR [rip+0x32003000],ah        # 0x3300914d
 100614d:	add    BYTE PTR [rax+rax*1+0x2d],ah
 1006151:	add    BYTE PTR [rip+0x32003000],ah        # 0x33009157
 1006157:	add    BYTE PTR [rax+rax*1+0x2d],ah
 100615b:	add    BYTE PTR [rax],dh
 100615d:	add    BYTE PTR [rax],dh
 100615f:	add    BYTE PTR [rip+0x30003000],ch        # 0x31009165
	...
 100616d:	add    BYTE PTR [rax],al
 100616f:	add    BYTE PTR [rsi+0x0],al
 1006172:	(bad)  
 1006173:	add    BYTE PTR [rcx+0x0],ch
 1006176:	ins    BYTE PTR es:[rdi],dx
 1006177:	add    BYTE PTR [rbp+0x0],ah
 100617a:	add    BYTE PTR fs:[rax],ah
 100617d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1006181:	add    BYTE PTR [rax],ah
 1006183:	add    BYTE PTR [rdi+0x0],ah
 1006186:	add    BYTE PTR gs:[rsi+0x0],ch
 100618a:	add    BYTE PTR gs:[rdx+0x0],dh
 100618e:	(bad)  
 100618f:	add    BYTE PTR [rax+rax*1+0x65],dh
 1006193:	add    BYTE PTR [rax],ah
 1006195:	add    BYTE PTR [rax+rax*1+0x75],ah
 1006199:	add    BYTE PTR [rbp+0x0],ch
 100619c:	jo     0x100619e
 100619e:	and    BYTE PTR [rax],al
 10061a0:	data16 add BYTE PTR [rcx+0x0],ch
 10061a4:	ins    BYTE PTR es:[rdi],dx
 10061a5:	add    BYTE PTR [rbp+0x0],ah
 10061a8:	outs   dx,BYTE PTR ds:[rsi]
 10061a9:	add    BYTE PTR [rcx+0x0],ah
 10061ac:	ins    DWORD PTR es:[rdi],dx
 10061ad:	add    BYTE PTR [rbp+0x0],ah
	...
 10061c0:	rex.RX add BYTE PTR [rcx+0x0],r12b
 10061c4:	imul   eax,DWORD PTR [rax],0x65006c
 10061ca:	add    BYTE PTR fs:[rax],ah
 10061cd:	add    BYTE PTR [rax+rax*1+0x6f],dh
 10061d1:	add    BYTE PTR [rax],ah
 10061d3:	add    BYTE PTR [rbx+0x0],ah
 10061d6:	jb     0x10061d8
 10061d8:	add    BYTE PTR gs:[rcx+0x0],ah
 10061dc:	je     0x10061de
 10061de:	add    BYTE PTR gs:[rax],ah
 10061e1:	add    BYTE PTR [rax+rax*1+0x75],ah
 10061e5:	add    BYTE PTR [rbp+0x0],ch
 10061e8:	jo     0x10061ea
 10061ea:	and    BYTE PTR [rax],al
 10061ec:	add    BYTE PTR fs:[rcx+0x0],ch
 10061f0:	jb     0x10061f2
 10061f2:	add    BYTE PTR gs:[rbx+0x0],ah
 10061f6:	je     0x10061f8
 10061f8:	outs   dx,DWORD PTR ds:[rsi]
 10061f9:	add    BYTE PTR [rdx+0x0],dh
 10061fc:	jns    0x10061fe
 10061fe:	and    BYTE PTR [rax],al
 1006200:	and    eax,0x73006c00
 1006205:	add    BYTE PTR [rax],ah
 1006207:	add    BYTE PTR [rip+0x45002000],ch        # 0x4600820d
 100620d:	add    BYTE PTR [rdx+0x0],dh
 1006210:	jb     0x1006212
 1006212:	outs   dx,DWORD PTR ds:[rsi]
 1006213:	add    BYTE PTR [rdx+0x0],dh
 1006216:	and    BYTE PTR [rax],al
 1006218:	rex.XB add BYTE PTR [r15+0x0],bpl
 100621c:	add    BYTE PTR fs:[rbp+0x0],ah
 1006220:	and    BYTE PTR [rax],al
 1006222:	cmp    eax,0x30002000
 1006227:	add    BYTE PTR [rax+0x0],bh
 100622a:	and    eax,0x7800
 100622f:	add    BYTE PTR [rsi+0x0],al
 1006232:	imul   eax,DWORD PTR [rax],0x65006c
 1006238:	rex.XB add BYTE PTR [r15+0x0],bpl
 100623c:	jo     0x100623e
 100623e:	jns    0x1006240
 1006240:	cmp    al,BYTE PTR [rax]
 1006242:	and    BYTE PTR [rax],al
 1006244:	push   rbp
 1006245:	add    BYTE PTR [rsi+0x0],ch
 1006248:	(bad)  
 1006249:	add    BYTE PTR [rdx+0x0],ah
 100624c:	ins    BYTE PTR es:[rdi],dx
 100624d:	add    BYTE PTR [rbp+0x0],ah
 1006250:	and    BYTE PTR [rax],al
 1006252:	je     0x1006254
 1006254:	outs   dx,DWORD PTR ds:[rsi]
 1006255:	add    BYTE PTR [rax],ah
 1006257:	add    BYTE PTR [rdx+0x0],dh
 100625a:	add    BYTE PTR gs:[rcx+0x0],ah
 100625e:	add    BYTE PTR fs:[rdi],ch
 1006261:	add    BYTE PTR [rdi+0x0],dh
 1006264:	jb     0x1006266
 1006266:	imul   eax,DWORD PTR [rax],0x650074
 100626c:	and    BYTE PTR [rax],al
 100626e:	data16 add BYTE PTR [rcx+0x0],ch
 1006272:	ins    BYTE PTR es:[rdi],dx
 1006273:	add    BYTE PTR [rbp+0x0],ah
 1006276:	sub    al,0x0
 1006278:	and    BYTE PTR [rax],al
 100627a:	add    BYTE PTR gs:[rdx+0x0],dh
 100627e:	jb     0x1006280
 1006280:	outs   dx,DWORD PTR ds:[rsi]
 1006281:	add    BYTE PTR [rdx+0x0],dh
 1006284:	and    BYTE PTR [rax],al
 1006286:	and    eax,0x6400
 100628b:	add    BYTE PTR [rax],al
 100628d:	add    BYTE PTR [rax],al
 100628f:	add    BYTE PTR [rbp+0x0],dl
 1006292:	outs   dx,BYTE PTR ds:[rsi]
 1006293:	add    BYTE PTR [rcx+0x0],ah
 1006296:	(bad)  
 1006297:	add    BYTE PTR [rax+rax*1+0x65],ch
 100629b:	add    BYTE PTR [rax],ah
 100629d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 10062a1:	add    BYTE PTR [rax],ah
 10062a3:	add    BYTE PTR [rdi+0x0],ch
 10062a6:	jo     0x10062a8
 10062a8:	add    BYTE PTR gs:[rsi+0x0],ch
 10062ac:	and    BYTE PTR [rax],al
 10062ae:	data16 add BYTE PTR [rcx+0x0],ch
 10062b2:	ins    BYTE PTR es:[rdi],dx
 10062b3:	add    BYTE PTR [rbp+0x0],ah
 10062b6:	and    BYTE PTR [rax],al
 10062b8:	and    eax,0x20007300
 10062bd:	add    BYTE PTR [rsi+0x0],ah
 10062c0:	outs   dx,DWORD PTR ds:[rsi]
 10062c1:	add    BYTE PTR [rdx+0x0],dh
 10062c4:	and    BYTE PTR [rax],al
 10062c6:	ja     0x10062c8
 10062c8:	jb     0x10062ca
 10062ca:	imul   eax,DWORD PTR [rax],0x650074
 10062d0:	sub    al,0x0
 10062d2:	and    BYTE PTR [rax],al
 10062d4:	add    BYTE PTR gs:[rdx+0x0],dh
 10062d8:	jb     0x10062da
 10062da:	outs   dx,DWORD PTR ds:[rsi]
 10062db:	add    BYTE PTR [rdx+0x0],dh
 10062de:	and    BYTE PTR [rax],al
 10062e0:	and    eax,0x6400
	...
 10062ed:	add    BYTE PTR [rax],al
 10062ef:	add    BYTE PTR [rbp+0x0],dl
 10062f2:	outs   dx,BYTE PTR ds:[rsi]
 10062f3:	add    BYTE PTR [rcx+0x0],ah
 10062f6:	(bad)  
 10062f7:	add    BYTE PTR [rax+rax*1+0x65],ch
 10062fb:	add    BYTE PTR [rax],ah
 10062fd:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1006301:	add    BYTE PTR [rax],ah
 1006303:	add    BYTE PTR [rbx+0x0],dh
 1006306:	add    BYTE PTR gs:[rax+rax*1+0x20],dh
 100630b:	add    BYTE PTR [rax+0x0],dh
 100630e:	outs   dx,DWORD PTR ds:[rsi]
 100630f:	add    BYTE PTR [rbx+0x0],dh
 1006312:	imul   eax,DWORD PTR [rax],0x690074
 1006318:	outs   dx,DWORD PTR ds:[rsi]
 1006319:	add    BYTE PTR [rsi+0x0],ch
 100631c:	and    BYTE PTR [rax],al
 100631e:	imul   eax,DWORD PTR [rax],0x20006e
 1006324:	data16 add BYTE PTR [rcx+0x0],ch
 1006328:	ins    BYTE PTR es:[rdi],dx
 1006329:	add    BYTE PTR [rbp+0x0],ah
 100632c:	and    BYTE PTR [rax],al
 100632e:	and    eax,0x2c007300
 1006333:	add    BYTE PTR [rax],ah
 1006335:	add    BYTE PTR [rbp+0x0],ah
 1006338:	jb     0x100633a
 100633a:	jb     0x100633c
 100633c:	outs   dx,DWORD PTR ds:[rsi]
 100633d:	add    BYTE PTR [rdx+0x0],dh
 1006340:	and    BYTE PTR [rax],al
 1006342:	and    eax,0x6400
	...
 100634f:	add    BYTE PTR [rbp+0x0],dl
 1006352:	outs   dx,BYTE PTR ds:[rsi]
 1006353:	add    BYTE PTR [rcx+0x0],ah
 1006356:	(bad)  
 1006357:	add    BYTE PTR [rax+rax*1+0x65],ch
 100635b:	add    BYTE PTR [rax],ah
 100635d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1006361:	add    BYTE PTR [rax],ah
 1006363:	add    BYTE PTR [rdi+0x0],ch
 1006366:	jo     0x1006368
 1006368:	add    BYTE PTR gs:[rsi+0x0],ch
 100636c:	and    BYTE PTR [rax],al
 100636e:	data16 add BYTE PTR [rcx+0x0],ch
 1006372:	ins    BYTE PTR es:[rdi],dx
 1006373:	add    BYTE PTR [rbp+0x0],ah
 1006376:	and    BYTE PTR [rax],al
 1006378:	and    eax,0x2c007300
 100637d:	add    BYTE PTR [rax],ah
 100637f:	add    BYTE PTR [rbp+0x0],ah
 1006382:	jb     0x1006384
 1006384:	jb     0x1006386
 1006386:	outs   dx,DWORD PTR ds:[rsi]
 1006387:	add    BYTE PTR [rdx+0x0],dh
 100638a:	and    BYTE PTR [rax],al
 100638c:	and    eax,0x6400
	...
 100639d:	add    BYTE PTR [rax],al
 100639f:	add    BYTE PTR [rbp+0x0],dl
 10063a2:	outs   dx,BYTE PTR ds:[rsi]
 10063a3:	add    BYTE PTR [rcx+0x0],ah
 10063a6:	(bad)  
 10063a7:	add    BYTE PTR [rax+rax*1+0x65],ch
 10063ab:	add    BYTE PTR [rax],ah
 10063ad:	add    BYTE PTR [rax+rax*1+0x6f],dh
 10063b1:	add    BYTE PTR [rax],ah
 10063b3:	add    BYTE PTR [rbx+0x0],ah
 10063b6:	outs   dx,DWORD PTR ds:[rsi]
 10063b7:	add    BYTE PTR [rsi+0x0],ch
 10063ba:	jae    0x10063bc
 10063bc:	je     0x10063be
 10063be:	jb     0x10063c0
 10063c0:	jne    0x10063c2
 10063c2:	movsxd eax,DWORD PTR [rax]
 10063c4:	je     0x10063c6
 10063c6:	and    BYTE PTR [rax],al
 10063c8:	outs   dx,BYTE PTR ds:[rsi]
 10063c9:	add    BYTE PTR [rcx+0x0],ah
 10063cc:	ins    DWORD PTR es:[rdi],dx
 10063cd:	add    BYTE PTR [rbp+0x0],ah
 10063d0:	and    BYTE PTR [rax],al
 10063d2:	data16 add BYTE PTR [rdi+0x0],ch
 10063d6:	jb     0x10063d8
 10063d8:	and    BYTE PTR [rax],al
 10063da:	je     0x10063dc
 10063dc:	add    BYTE PTR gs:[rbp+0x0],ch
 10063e0:	jo     0x10063e2
 10063e2:	outs   dx,DWORD PTR ds:[rsi]
 10063e3:	add    BYTE PTR [rdx+0x0],dh
 10063e6:	(bad)  
 10063e7:	add    BYTE PTR [rdx+0x0],dh
 10063ea:	jns    0x10063ec
 10063ec:	and    BYTE PTR [rax],al
 10063ee:	ins    BYTE PTR es:[rdi],dx
 10063ef:	add    BYTE PTR [rdi+0x0],ch
 10063f2:	add    BYTE PTR [eax],ah
 10063f5:	add    BYTE PTR [rsi+0x0],ah
 10063f8:	imul   eax,DWORD PTR [rax],0x65006c
 10063fe:	add    BYTE PTR [rax],al
 1006400:	push   rsi
 1006401:	add    BYTE PTR [rcx+0x0],ah
 1006404:	ins    BYTE PTR es:[rdi],dx
 1006405:	add    BYTE PTR [rcx+0x0],ch
 1006408:	add    BYTE PTR fs:[rcx+0x0],ah
 100640c:	je     0x100640e
 100640e:	add    BYTE PTR gs:[rbp+0x0],cl
 1006412:	outs   dx,DWORD PTR ds:[rsi]
 1006413:	add    BYTE PTR [rax+rax*1+0x75],ah
 1006417:	add    BYTE PTR [rax+rax*1+0x65],ch
 100641b:	add    BYTE PTR [rdx],bh
 100641d:	add    BYTE PTR [rax],ah
 100641f:	add    BYTE PTR [rax+0x0],dl
 1006422:	outs   dx,DWORD PTR ds:[rsi]
 1006423:	add    BYTE PTR [rax+rax*1+0x65],dh
 1006427:	add    BYTE PTR [rsi+0x0],ch
 100642a:	je     0x100642c
 100642c:	imul   eax,DWORD PTR [rax],0x6c0061
 1006432:	and    BYTE PTR [rax],al
 1006434:	imul   eax,DWORD PTR [rax],0x61006d
 100643a:	add    BYTE PTR [ebp+0x0],ah
 100643e:	and    BYTE PTR [rax],al
 1006440:	jo     0x1006442
 1006442:	jb     0x1006444
 1006444:	outs   dx,DWORD PTR ds:[rsi]
 1006445:	add    BYTE PTR [rdx+0x0],ah
 1006448:	ins    BYTE PTR es:[rdi],dx
 1006449:	add    BYTE PTR [rbp+0x0],ah
 100644c:	ins    DWORD PTR es:[rdi],dx
 100644d:	add    BYTE PTR [rax],ah
 100644f:	add    BYTE PTR [rcx+0x0],ah
 1006452:	je     0x1006454
 1006454:	and    BYTE PTR [rax],al
 1006456:	xor    BYTE PTR [rax],al
 1006458:	js     0x100645a
 100645a:	and    eax,0x3a007000
 100645f:	add    BYTE PTR [rax],ah
 1006461:	add    BYTE PTR [rdx+0x0],dh
 1006464:	add    BYTE PTR gs:[rcx+0x0],ah
 1006468:	add    BYTE PTR fs:[rax],ah
 100646b:	add    BYTE PTR [rax],dh
 100646d:	add    BYTE PTR [rax+0x0],bh
 1006470:	and    eax,0x20005800
 1006475:	add    BYTE PTR [rcx+0x0],ch
 1006478:	outs   dx,BYTE PTR ds:[rsi]
 1006479:	add    BYTE PTR [rbx+0x0],dh
 100647c:	je     0x100647e
 100647e:	add    BYTE PTR gs:[rcx+0x0],ah
 1006482:	add    BYTE PTR fs:[rax],ah
 1006485:	add    BYTE PTR [rdi+0x0],ch
 1006488:	data16 add BYTE PTR [rax],ah
 100648b:	add    BYTE PTR [rax],dh
 100648d:	add    BYTE PTR [rax+0x0],bh
 1006490:	and    eax,0x20005800
 1006495:	add    BYTE PTR [rax],ch
 1006497:	add    BYTE PTR [rbp+0x0],ch
 100649a:	outs   dx,DWORD PTR ds:[rsi]
 100649b:	add    BYTE PTR [rax+rax*1+0x75],ah
 100649f:	add    BYTE PTR [rax+rax*1+0x65],ch
 10064a3:	add    BYTE PTR [rax],ah
 10064a5:	add    BYTE PTR [rip+0x73006c00],ah        # 0x7400d0ab
 10064ab:	add    BYTE PTR [rcx],ch
 10064ad:	add    BYTE PTR [rax],al
 10064af:	add    BYTE PTR [rsi+0x0],dl
 10064b2:	(bad)  
 10064b3:	add    BYTE PTR [rax+rax*1+0x69],ch
 10064b7:	add    BYTE PTR [rax+rax*1+0x61],ah
 10064bb:	add    BYTE PTR [rax+rax*1+0x65],dh
 10064bf:	add    BYTE PTR [rbp+0x0],cl
 10064c2:	outs   dx,DWORD PTR ds:[rsi]
 10064c3:	add    BYTE PTR [rax+rax*1+0x75],ah
 10064c7:	add    BYTE PTR [rax+rax*1+0x65],ch
 10064cb:	add    BYTE PTR [rdx],bh
 10064cd:	add    BYTE PTR [rax],ah
 10064cf:	add    BYTE PTR [rbp+0x0],dl
 10064d2:	outs   dx,BYTE PTR ds:[rsi]
 10064d3:	add    BYTE PTR [rcx+0x0],ah
 10064d6:	(bad)  
 10064d7:	add    BYTE PTR [rax+rax*1+0x65],ch
 10064db:	add    BYTE PTR [rax],ah
 10064dd:	add    BYTE PTR [rax+rax*1+0x6f],dh
 10064e1:	add    BYTE PTR [rax],ah
 10064e3:	add    BYTE PTR [rdi+0x0],ch
 10064e6:	(bad)  
 10064e7:	add    BYTE PTR [rax+rax*1+0x61],dh
 10064eb:	add    BYTE PTR [rcx+0x0],ch
 10064ee:	outs   dx,BYTE PTR ds:[rsi]
 10064ef:	add    BYTE PTR [rax],ah
 10064f1:	add    BYTE PTR [rbx+0x0],dh
 10064f4:	add    BYTE PTR gs:[rbx+0x0],ah
 10064f8:	je     0x10064fa
 10064fa:	imul   eax,DWORD PTR [rax],0x6e006f
 1006500:	jae    0x1006502
 1006502:	and    BYTE PTR [rax],al
 1006504:	je     0x1006506
 1006506:	(bad)  
 1006507:	add    BYTE PTR [rdx+0x0],ah
 100650a:	ins    BYTE PTR es:[rdi],dx
 100650b:	add    BYTE PTR [rbp+0x0],ah
 100650e:	and    BYTE PTR [rax],al
 1006510:	data16 add BYTE PTR [rdi+0x0],ch
 1006514:	jb     0x1006516
 1006516:	and    BYTE PTR [rax],al
 1006518:	data16 add BYTE PTR [rcx+0x0],ch
 100651c:	ins    BYTE PTR es:[rdi],dx
 100651d:	add    BYTE PTR [rbp+0x0],ah
 1006520:	and    BYTE PTR [rax],al
 1006522:	and    eax,0x73006c00
	...
 100652f:	add    BYTE PTR [rsi+0x0],dl
 1006532:	(bad)  
 1006533:	add    BYTE PTR [rax+rax*1+0x69],ch
 1006537:	add    BYTE PTR [rax+rax*1+0x61],ah
 100653b:	add    BYTE PTR [rax+rax*1+0x65],dh
 100653f:	add    BYTE PTR [rbp+0x0],cl
 1006542:	outs   dx,DWORD PTR ds:[rsi]
 1006543:	add    BYTE PTR [rax+rax*1+0x75],ah
 1006547:	add    BYTE PTR [rax+rax*1+0x65],ch
 100654b:	add    BYTE PTR [rdx],bh
 100654d:	add    BYTE PTR [rax],ah
 100654f:	add    BYTE PTR [rbp+0x0],dl
 1006552:	outs   dx,BYTE PTR ds:[rsi]
 1006553:	add    BYTE PTR [rcx+0x0],ah
 1006556:	(bad)  
 1006557:	add    BYTE PTR [rax+rax*1+0x65],ch
 100655b:	add    BYTE PTR [rax],ah
 100655d:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1006561:	add    BYTE PTR [rax],ah
 1006563:	add    BYTE PTR [rbp+0x0],ch
 1006566:	(bad)  
 1006567:	add    BYTE PTR [rax+0x0],dh
 100656a:	and    BYTE PTR [rax],al
 100656c:	data16 add BYTE PTR [rcx+0x0],ch
 1006570:	ins    BYTE PTR es:[rdi],dx
 1006571:	add    BYTE PTR [rbp+0x0],ah
 1006574:	and    BYTE PTR [rax],al
 1006576:	and    eax,0x73006c00
 100657b:	add    BYTE PTR [rax+rax*1],ch
 100657e:	and    BYTE PTR [rax],al
 1006580:	add    BYTE PTR gs:[rdx+0x0],dh
 1006584:	jb     0x1006586
 1006586:	outs   dx,DWORD PTR ds:[rsi]
 1006587:	add    BYTE PTR [rdx+0x0],dh
 100658a:	and    BYTE PTR [rax],al
 100658c:	and    eax,0x6400
 1006591:	add    BYTE PTR [rax],al
 1006593:	add    BYTE PTR [rax],al
 1006595:	add    BYTE PTR [rax],al
 1006597:	add    BYTE PTR [rdi+0x0],al
 100659a:	add    BYTE PTR gs:[rax+rax*1+0x4d],dh
 100659f:	add    BYTE PTR [rdi+0x0],ch
 10065a2:	add    BYTE PTR fs:[rbp+0x0],dh
 10065a6:	ins    BYTE PTR es:[rdi],dx
 10065a7:	add    BYTE PTR [rbp+0x0],ah
 10065aa:	rex.W add BYTE PTR [rcx+0x0],spl
 10065ae:	outs   dx,BYTE PTR ds:[rsi]
 10065af:	add    BYTE PTR [rax+rax*1+0x6c],ah
 10065b3:	add    BYTE PTR [rbp+0x0],ah
 10065b6:	add    BYTE PTR [rax],al
 10065b8:	rex.RXB add BYTE PTR [r13+0x0],r12b
 10065bc:	je     0x10065be
 10065be:	rex.WRB add BYTE PTR [r15+0x0],r13b
 10065c2:	add    BYTE PTR fs:[rbp+0x0],dh
 10065c6:	ins    BYTE PTR es:[rdi],dx
 10065c7:	add    BYTE PTR [rbp+0x0],ah
 10065ca:	rex.RX add BYTE PTR [rcx+0x0],r13b
 10065ce:	ins    BYTE PTR es:[rdi],dx
 10065cf:	add    BYTE PTR [rbp+0x0],ah
 10065d2:	rex.WRX add BYTE PTR [rcx+0x0],r12b
 10065d6:	ins    DWORD PTR es:[rdi],dx
 10065d7:	add    BYTE PTR [rbp+0x0],ah
 10065da:	add    BYTE PTR [rax],al
 10065dc:	add    BYTE PTR [rax],al
 10065de:	add    BYTE PTR [rax],al
 10065e0:	rex.WR add BYTE PTR [rdi+0x0],r13b
 10065e4:	movsxd eax,DWORD PTR [rax]
 10065e6:	(bad)  
 10065e7:	add    BYTE PTR [rax+rax*1+0x69],dh
 10065eb:	add    BYTE PTR [rdi+0x0],ch
 10065ee:	outs   dx,BYTE PTR ds:[rsi]
 10065ef:	add    BYTE PTR [rax],ah
 10065f1:	add    BYTE PTR [rdi+0x0],ch
 10065f4:	data16 add BYTE PTR [rax],ah
 10065f7:	add    BYTE PTR [rbp+0x0],ch
 10065fa:	outs   dx,DWORD PTR ds:[rsi]
 10065fb:	add    BYTE PTR [rax+rax*1+0x75],ah
 10065ff:	add    BYTE PTR [rax+rax*1+0x65],ch
 1006603:	add    BYTE PTR [rax],ah
 1006605:	add    BYTE PTR [rdi],ah
 1006607:	add    BYTE PTR [rip+0x73006c00],ah        # 0x7400d20d
 100660d:	add    BYTE PTR [rdi],ah
 100660f:	add    BYTE PTR [rax],ah
 1006611:	add    BYTE PTR [rdx],bh
 1006613:	add    BYTE PTR [rax],ah
 1006615:	add    BYTE PTR [rdi],ah
 1006617:	add    BYTE PTR [rip+0x73006c00],ah        # 0x7400d21d
 100661d:	add    BYTE PTR [rdi],ah
	...
 1006627:	add    BYTE PTR [rdi+0x0],al
 100662a:	add    BYTE PTR gs:[rax+rax*1+0x46],dh
 100662f:	add    BYTE PTR [rcx+0x0],ch
 1006632:	ins    BYTE PTR es:[rdi],dx
 1006633:	add    BYTE PTR [rbp+0x0],ah
 1006636:	push   rsi
 1006637:	add    BYTE PTR [rbp+0x0],ah
 100663a:	jb     0x100663c
 100663c:	jae    0x100663e
 100663e:	imul   eax,DWORD PTR [rax],0x6e006f
 1006644:	rex.WB add BYTE PTR [r14+0x0],bpl
 1006648:	data16 add BYTE PTR [rdi+0x0],ch
 100664c:	push   rbx
 100664d:	add    BYTE PTR [rcx+0x0],ch
 1006650:	jp     0x1006652
 1006652:	add    BYTE PTR gs:[rax],al
	...
 100665d:	add    BYTE PTR [rax],al
 100665f:	add    BYTE PTR [rbx+0x0],al
 1006662:	outs   dx,DWORD PTR ds:[rsi]
 1006663:	add    BYTE PTR [rbp+0x0],dh
 1006666:	ins    BYTE PTR es:[rdi],dx
 1006667:	add    BYTE PTR [rax+rax*1+0x20],ah
 100666b:	add    BYTE PTR [rsi+0x0],ch
 100666e:	outs   dx,DWORD PTR ds:[rsi]
 100666f:	add    BYTE PTR [rax+rax*1+0x20],dh
 1006673:	add    BYTE PTR [rcx+0x0],ah
 1006676:	ins    BYTE PTR es:[rdi],dx
 1006677:	add    BYTE PTR [rax+rax*1+0x6f],ch
 100667b:	add    BYTE PTR [rbx+0x0],ah
 100667e:	(bad)  
 100667f:	add    BYTE PTR [rax+rax*1+0x65],dh
 1006683:	add    BYTE PTR [rax],ah
 1006685:	add    BYTE PTR [rip+0x20006400],ah        # 0x2100ca8b
 100668b:	add    BYTE PTR [rdx+0x0],ah
 100668e:	jns    0x1006690
 1006690:	je     0x1006692
 1006692:	add    BYTE PTR gs:[rbx+0x0],dh
 1006696:	and    BYTE PTR [rax],al
 1006698:	outs   dx,DWORD PTR ds:[rsi]
 1006699:	add    BYTE PTR [rsi+0x0],ah
 100669c:	and    BYTE PTR [rax],al
 100669e:	ins    DWORD PTR es:[rdi],dx
 100669f:	add    BYTE PTR [rbp+0x0],ah
 10066a2:	ins    DWORD PTR es:[rdi],dx
 10066a3:	add    BYTE PTR [rdi+0x0],ch
 10066a6:	jb     0x10066a8
 10066a8:	jns    0x10066aa
 10066aa:	and    BYTE PTR [rax],al
 10066ac:	data16 add BYTE PTR [rdi+0x0],ch
 10066b0:	jb     0x10066b2
 10066b2:	and    BYTE PTR [rax],al
 10066b4:	ins    DWORD PTR es:[rdi],dx
 10066b5:	add    BYTE PTR [rcx+0x0],ah
 10066b8:	jb     0x10066ba
 10066ba:	jae    0x10066bc
 10066bc:	push   0x6c006100
 10066c1:	add    BYTE PTR [rbp+0x0],ah
 10066c4:	add    BYTE PTR fs:[rax],ah
 10066c7:	add    BYTE PTR [rbx+0x0],dh
 10066ca:	ins    BYTE PTR es:[rdi],dx
 10066cb:	add    BYTE PTR [rcx+0x0],ah
 10066ce:	(bad)  
	...
 10066d7:	add    BYTE PTR [rdi+0x0],al
 10066da:	add    BYTE PTR gs:[rax+rax*1+0x46],dh
 10066df:	add    BYTE PTR [rcx+0x0],ch
 10066e2:	ins    BYTE PTR es:[rdi],dx
 10066e3:	add    BYTE PTR [rbp+0x0],ah
 10066e6:	push   rsi
 10066e7:	add    BYTE PTR [rbp+0x0],ah
 10066ea:	jb     0x10066ec
 10066ec:	jae    0x10066ee
 10066ee:	imul   eax,DWORD PTR [rax],0x6e006f
 10066f4:	rex.WB add BYTE PTR [r14+0x0],bpl
 10066f8:	data16 add BYTE PTR [rdi+0x0],ch
 10066fc:	add    BYTE PTR [rax],al
 10066fe:	add    BYTE PTR [rax],al
 1006700:	pop    rsp
	...
 100670d:	add    BYTE PTR [rax],al
 100670f:	add    BYTE PTR [rsi+0x0],al
 1006712:	imul   eax,DWORD PTR [rax],0x650078
 1006718:	add    BYTE PTR fs:[rax],ah
 100671b:	add    BYTE PTR [rsi+0x0],dh
 100671e:	add    BYTE PTR gs:[rdx+0x0],dh
 1006722:	jae    0x1006724
 1006724:	imul   eax,DWORD PTR [rax],0x6e006f
 100672a:	and    BYTE PTR [rax],al
 100672c:	jb     0x100672e
 100672e:	add    BYTE PTR gs:[rbx+0x0],dh
 1006732:	outs   dx,DWORD PTR ds:[rsi]
 1006733:	add    BYTE PTR [rbp+0x0],dh
 1006736:	jb     0x1006738
 1006738:	movsxd eax,DWORD PTR [rax]
 100673a:	add    BYTE PTR gs:[rax],ah
 100673d:	add    BYTE PTR [rsi+0x0],ah
 1006740:	outs   dx,DWORD PTR ds:[rsi]
 1006741:	add    BYTE PTR [rdx+0x0],dh
 1006744:	and    BYTE PTR [rax],al
 1006746:	(bad)  
 1006747:	add    BYTE PTR [rip+0x73006c00],ah        # 0x7400d34d
 100674d:	add    BYTE PTR [rdi],ah
 100674f:	add    BYTE PTR [rax],ah
 1006751:	add    BYTE PTR [rcx+0x0],ch
 1006754:	jae    0x1006756
 1006756:	and    BYTE PTR [rax],al
 1006758:	add    BYTE PTR gs:[rcx+0x0],ch
 100675c:	je     0x100675e
 100675e:	push   0x72006500
 1006763:	add    BYTE PTR [rax],ah
 1006765:	add    BYTE PTR [rcx+0x0],ch
 1006768:	outs   dx,BYTE PTR ds:[rsi]
 1006769:	add    BYTE PTR [rsi+0x0],dh
 100676c:	(bad)  
 100676d:	add    BYTE PTR [rax+rax*1+0x69],ch
 1006771:	add    BYTE PTR [rax+rax*1+0x20],ah
 1006775:	add    BYTE PTR [rdi+0x0],ch
 1006778:	jb     0x100677a
 100677a:	and    BYTE PTR [rax],al
 100677c:	add    BYTE PTR fs:[rdi+0x0],ch
 1006780:	add    BYTE PTR gs:[rbx+0x0],dh
 1006784:	and    BYTE PTR [rax],al
 1006786:	outs   dx,BYTE PTR ds:[rsi]
 1006787:	add    BYTE PTR [rdi+0x0],ch
 100678a:	je     0x100678c
 100678c:	and    BYTE PTR [rax],al
 100678e:	add    BYTE PTR gs:[rax+0x0],bh
 1006792:	imul   eax,DWORD PTR [rax],0x740073
	...
 10067a0:	rex.RX add BYTE PTR [rcx+0x0],r13b
 10067a4:	js     0x10067a6
 10067a6:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 10067ab:	add    BYTE PTR [rsi+0x0],dh
 10067ae:	add    BYTE PTR gs:[rdx+0x0],dh
 10067b2:	jae    0x10067b4
 10067b4:	imul   eax,DWORD PTR [rax],0x6e006f
 10067ba:	and    BYTE PTR [rax],al
 10067bc:	jb     0x10067be
 10067be:	add    BYTE PTR gs:[rbx+0x0],dh
 10067c2:	outs   dx,DWORD PTR ds:[rsi]
 10067c3:	add    BYTE PTR [rbp+0x0],dh
 10067c6:	jb     0x10067c8
 10067c8:	movsxd eax,DWORD PTR [rax]
 10067ca:	add    BYTE PTR gs:[rax],ah
 10067cd:	add    BYTE PTR [rsi+0x0],ah
 10067d0:	outs   dx,DWORD PTR ds:[rsi]
 10067d1:	add    BYTE PTR [rdx+0x0],dh
 10067d4:	and    BYTE PTR [rax],al
 10067d6:	(bad)  
 10067d7:	add    BYTE PTR [rip+0x73006c00],ah        # 0x7400d3dd
 10067dd:	add    BYTE PTR [rdi],ah
 10067df:	add    BYTE PTR [rax],ah
 10067e1:	add    BYTE PTR [rcx+0x0],ch
 10067e4:	jae    0x10067e6
 10067e6:	and    BYTE PTR [rax],al
 10067e8:	jne    0x10067ea
 10067ea:	outs   dx,BYTE PTR ds:[rsi]
 10067eb:	add    BYTE PTR [rcx+0x0],ah
 10067ee:	jbe    0x10067f0
 10067f0:	(bad)  
 10067f1:	add    BYTE PTR [rcx+0x0],ch
 10067f4:	ins    BYTE PTR es:[rdi],dx
 10067f5:	add    BYTE PTR [rcx+0x0],ah
 10067f8:	(bad)  
 10067f9:	add    BYTE PTR [rax+rax*1+0x65],ch
 10067fd:	add    BYTE PTR [rax],al
 10067ff:	add    BYTE PTR [rip+0x2e007500],ah        # 0x2f00dd05
 1006805:	add    BYTE PTR [rip+0x3a007500],ah        # 0x3b00dd0b
 100680b:	add    BYTE PTR [rip+0x2e007500],ah        # 0x2f00dd11
 1006811:	add    BYTE PTR [rip+0x7500],ah        # 0x100dd17
	...
 100681f:	add    BYTE PTR [rsi+0x0],al
 1006822:	imul   eax,DWORD PTR [rax],0x65006c
 1006828:	and    BYTE PTR [rax],al
 100682a:	jbe    0x100682c
 100682c:	add    BYTE PTR gs:[rdx+0x0],dh
 1006830:	jae    0x1006832
 1006832:	imul   eax,DWORD PTR [rax],0x6e006f
 1006838:	and    BYTE PTR [rax],al
 100683a:	outs   dx,DWORD PTR ds:[rsi]
 100683b:	add    BYTE PTR [rsi+0x0],ah
 100683e:	and    BYTE PTR [rax],al
 1006840:	ins    DWORD PTR es:[rdi],dx
 1006841:	add    BYTE PTR [rdi+0x0],ch
 1006844:	add    BYTE PTR fs:[rbp+0x0],dh
 1006848:	ins    BYTE PTR es:[rdi],dx
 1006849:	add    BYTE PTR [rbp+0x0],ah
 100684c:	and    BYTE PTR [rax],al
 100684e:	(bad)  
 100684f:	add    BYTE PTR [rip+0x73006c00],ah        # 0x7400d455
 1006855:	add    BYTE PTR [rdi],ah
 1006857:	add    BYTE PTR [rax],ah
 1006859:	add    BYTE PTR [rdx],bh
 100685b:	add    BYTE PTR [rax],ah
 100685d:	add    BYTE PTR [rdi],ah
 100685f:	add    BYTE PTR [rip+0x73006c00],ah        # 0x7400d465
 1006865:	add    BYTE PTR [rdi],ah
	...
 100686f:	add    BYTE PTR [rsi+0x0],al
 1006872:	imul   eax,DWORD PTR [rax],0x65006c
 1006878:	and    BYTE PTR [rax],al
 100687a:	jbe    0x100687c
 100687c:	add    BYTE PTR gs:[rdx+0x0],dh
 1006880:	jae    0x1006882
 1006882:	imul   eax,DWORD PTR [rax],0x6e006f
 1006888:	and    BYTE PTR [rax],al
 100688a:	add    BYTE PTR fs:[rbp+0x0],dh
 100688e:	ins    DWORD PTR es:[rdi],dx
 100688f:	add    BYTE PTR [rax+0x0],dh
 1006892:	and    BYTE PTR [rax],al
 1006894:	data16 add BYTE PTR [rcx+0x0],ah
 1006898:	imul   eax,DWORD PTR [rax],0x65006c
 100689e:	add    BYTE PTR fs:[rax],ah
 10068a1:	add    BYTE PTR [rax+0x0],cl
 10068a4:	push   rdx
 10068a5:	add    BYTE PTR [rbp+0x0],al
 10068a8:	push   rbx
 10068a9:	add    BYTE PTR [rbp+0x0],dl
 10068ac:	rex.WR add BYTE PTR [rax+rax*1+0x20],r10b
 10068b1:	add    BYTE PTR [rbx+0x0],ah
 10068b4:	outs   dx,DWORD PTR ds:[rsi]
 10068b5:	add    BYTE PTR [rax+rax*1+0x65],ah
 10068b9:	add    BYTE PTR [rax],ah
 10068bb:	add    BYTE PTR [rax],dh
 10068bd:	add    BYTE PTR [rax+0x0],bh
 10068c0:	and    eax,0x7800
	...
 10068cd:	add    BYTE PTR [rax],al
 10068cf:	add    BYTE PTR [rax+0x0],dl
 10068d2:	jb     0x10068d4
 10068d4:	outs   dx,DWORD PTR ds:[rsi]
 10068d5:	add    BYTE PTR [rax+rax*1+0x75],ah
 10068d9:	add    BYTE PTR [rbx+0x0],ah
 10068dc:	je     0x10068de
 10068de:	and    BYTE PTR [rax],al
 10068e0:	jbe    0x10068e2
 10068e2:	add    BYTE PTR gs:[rdx+0x0],dh
 10068e6:	jae    0x10068e8
 10068e8:	imul   eax,DWORD PTR [rax],0x6e006f
 10068ee:	and    BYTE PTR [rax],al
 10068f0:	outs   dx,DWORD PTR ds:[rsi]
 10068f1:	add    BYTE PTR [rsi+0x0],ah
 10068f4:	and    BYTE PTR [rax],al
 10068f6:	ins    DWORD PTR es:[rdi],dx
 10068f7:	add    BYTE PTR [rdi+0x0],ch
 10068fa:	add    BYTE PTR fs:[rbp+0x0],dh
 10068fe:	ins    BYTE PTR es:[rdi],dx
 10068ff:	add    BYTE PTR [rbp+0x0],ah
 1006902:	and    BYTE PTR [rax],al
 1006904:	(bad)  
 1006905:	add    BYTE PTR [rip+0x73006c00],ah        # 0x7400d50b
 100690b:	add    BYTE PTR [rdi],ah
 100690d:	add    BYTE PTR [rax],ah
 100690f:	add    BYTE PTR [rdx],bh
 1006911:	add    BYTE PTR [rax],ah
 1006913:	add    BYTE PTR [rdi],ah
 1006915:	add    BYTE PTR [rip+0x73006c00],ah        # 0x7400d51b
 100691b:	add    BYTE PTR [rdi],ah
 100691d:	add    BYTE PTR [rax],al
 100691f:	add    BYTE PTR [rax+0x0],dl
 1006922:	jb     0x1006924
 1006924:	outs   dx,DWORD PTR ds:[rsi]
 1006925:	add    BYTE PTR [rax+rax*1+0x75],ah
 1006929:	add    BYTE PTR [rbx+0x0],ah
 100692c:	je     0x100692e
 100692e:	and    BYTE PTR [rax],al
 1006930:	jbe    0x1006932
 1006932:	add    BYTE PTR gs:[rdx+0x0],dh
 1006936:	jae    0x1006938
 1006938:	imul   eax,DWORD PTR [rax],0x6e006f
 100693e:	and    BYTE PTR [rax],al
 1006940:	add    BYTE PTR fs:[rbp+0x0],dh
 1006944:	ins    DWORD PTR es:[rdi],dx
 1006945:	add    BYTE PTR [rax+0x0],dh
 1006948:	and    BYTE PTR [rax],al
 100694a:	data16 add BYTE PTR [rcx+0x0],ah
 100694e:	imul   eax,DWORD PTR [rax],0x65006c
 1006954:	add    BYTE PTR fs:[rax],ah
 1006957:	add    BYTE PTR [rax+0x0],cl
 100695a:	push   rdx
 100695b:	add    BYTE PTR [rbp+0x0],al
 100695e:	push   rbx
 100695f:	add    BYTE PTR [rbp+0x0],dl
 1006962:	rex.WR add BYTE PTR [rax+rax*1+0x20],r10b
 1006967:	add    BYTE PTR [rbx+0x0],ah
 100696a:	outs   dx,DWORD PTR ds:[rsi]
 100696b:	add    BYTE PTR [rax+rax*1+0x65],ah
 100696f:	add    BYTE PTR [rax],ah
 1006971:	add    BYTE PTR [rax],dh
 1006973:	add    BYTE PTR [rax+0x0],bh
 1006976:	and    eax,0x7800
 100697b:	add    BYTE PTR [rax],al
 100697d:	add    BYTE PTR [rax],al
 100697f:	add    BYTE PTR [rip+0x73006c00],ah        # 0x7400d585
 1006985:	add    BYTE PTR [rax],ah
 1006987:	add    BYTE PTR [rax],ch
 1006989:	add    BYTE PTR [rcx],ch
 100698b:	add    BYTE PTR [rax],ah
 100698d:	add    BYTE PTR [rsi+0x0],al
 1006990:	(bad)  
 1006991:	add    BYTE PTR [rcx+0x0],ch
 1006994:	ins    BYTE PTR es:[rdi],dx
 1006995:	add    BYTE PTR [rbp+0x0],ah
 1006998:	add    BYTE PTR fs:[rax],ah
 100699b:	add    BYTE PTR [rax],dh
 100699d:	add    BYTE PTR [rax+0x0],bh
 10069a0:	and    eax,0x20007800
 10069a5:	add    BYTE PTR [rip+0x25002000],ch        # 0x260089ab
 10069ab:	add    BYTE PTR [rax+rax*1+0x73],ch
	...
 10069b7:	add    BYTE PTR [rip+0x73006c00],ah        # 0x7400d5bd
 10069bd:	add    BYTE PTR [rax],ah
 10069bf:	add    BYTE PTR [rax],ch
 10069c1:	add    BYTE PTR [rcx],ch
 10069c3:	add    BYTE PTR [rax],ah
 10069c5:	add    BYTE PTR [rsi+0x0],al
 10069c8:	(bad)  
 10069c9:	add    BYTE PTR [rcx+0x0],ch
 10069cc:	ins    BYTE PTR es:[rdi],dx
 10069cd:	add    BYTE PTR [rbp+0x0],ah
 10069d0:	add    BYTE PTR fs:[rax],ah
 10069d3:	add    BYTE PTR [rbp+0x0],al
 10069d6:	jb     0x10069d8
 10069d8:	jb     0x10069da
 10069da:	outs   dx,DWORD PTR ds:[rsi]
 10069db:	add    BYTE PTR [rdx+0x0],dh
 10069de:	and    BYTE PTR [rax],al
 10069e0:	rex.XB add BYTE PTR [r15+0x0],bpl
 10069e4:	add    BYTE PTR fs:[rbp+0x0],ah
 10069e8:	and    BYTE PTR [rax],al
 10069ea:	xor    BYTE PTR [rax],al
 10069ec:	js     0x10069ee
 10069ee:	and    eax,0x7800
	...
 10069ff:	add    BYTE PTR [rbp+0x0],cl
 1006a02:	imul   eax,DWORD PTR [rax],0x6d0073
 1006a08:	(bad)  
 1006a09:	add    BYTE PTR [rax+rax*1+0x63],dh
 1006a0d:	add    BYTE PTR [rax+0x0],ch
 1006a10:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1006a15:	add    BYTE PTR [rbx+0x0],dh
 1006a18:	je     0x1006a1a
 1006a1a:	jb     0x1006a1c
 1006a1c:	jne    0x1006a1e
 1006a1e:	movsxd eax,DWORD PTR [rax]
 1006a20:	je     0x1006a22
 1006a22:	and    BYTE PTR [rax],al
 1006a24:	movsxd eax,DWORD PTR [rax]
 1006a26:	push   0x63006500
 1006a2b:	add    BYTE PTR [rbx+0x0],ch
 1006a2e:	jae    0x1006a30
 1006a30:	jne    0x1006a32
 1006a32:	ins    DWORD PTR es:[rdi],dx
 1006a33:	add    BYTE PTR [rax],ah
 1006a35:	add    BYTE PTR [rsi+0x0],ah
 1006a38:	outs   dx,DWORD PTR ds:[rsi]
 1006a39:	add    BYTE PTR [rdx+0x0],dh
 1006a3c:	and    BYTE PTR [rax],al
 1006a3e:	push   0x61006500
 1006a43:	add    BYTE PTR [rax+rax*1+0x20],ah
 1006a47:	add    BYTE PTR [rbx+0x0],dh
 1006a4a:	ins    BYTE PTR es:[rdi],dx
 1006a4b:	add    BYTE PTR [rcx+0x0],ah
 1006a4e:	(bad)  
 1006a4f:	add    BYTE PTR [rax],ah
 1006a51:	add    BYTE PTR [rip+0x63002000],ch        # 0x64008a57
 1006a57:	add    BYTE PTR [rdi+0x0],ch
 1006a5a:	ins    DWORD PTR es:[rdi],dx
 1006a5b:	add    BYTE PTR [rax+0x0],dh
 1006a5e:	jne    0x1006a60
 1006a60:	je     0x1006a62
 1006a62:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1006a67:	add    BYTE PTR [rip+0x20005800],ah        # 0x2100c26d
 1006a6d:	add    BYTE PTR [rip+0x72002000],ch        # 0x73008a73
 1006a73:	add    BYTE PTR [rbp+0x0],ah
 1006a76:	(bad)  
 1006a77:	add    BYTE PTR [rax+rax*1+0x20],ah
 1006a7b:	add    BYTE PTR [rip+0x5800],ah        # 0x100c281
	...
 1006a8d:	add    BYTE PTR [rax],al
 1006a8f:	add    BYTE PTR [rbx+0x0],dl
 1006a92:	ins    BYTE PTR es:[rdi],dx
 1006a93:	add    BYTE PTR [rcx+0x0],ah
 1006a96:	(bad)  
 1006a97:	add    BYTE PTR [rax],ah
 1006a99:	add    BYTE PTR [rax+rax*1+0x69],ch
 1006a9d:	add    BYTE PTR [rbx+0x0],dh
 1006aa0:	je     0x1006aa2
 1006aa2:	and    BYTE PTR [rax],al
 1006aa4:	add    BYTE PTR fs:[rcx+0x0],ch
 1006aa8:	add    BYTE PTR fs:[rax],ah
 1006aab:	add    BYTE PTR [rsi+0x0],ch
 1006aae:	outs   dx,DWORD PTR ds:[rsi]
 1006aaf:	add    BYTE PTR [rax+rax*1+0x20],dh
 1006ab3:	add    BYTE PTR [rax+0x0],dh
 1006ab6:	(bad)  
 1006ab7:	add    BYTE PTR [rbx+0x0],dh
 1006aba:	jae    0x1006abc
 1006abc:	and    BYTE PTR [rax],al
 1006abe:	jae    0x1006ac0
 1006ac0:	(bad)  
 1006ac1:	add    BYTE PTR [rsi+0x0],ch
 1006ac4:	imul   eax,DWORD PTR [rax],0x790074
 1006aca:	and    BYTE PTR [rax],al
 1006acc:	movsxd eax,DWORD PTR [rax]
 1006ace:	push   0x63006500
 1006ad3:	add    BYTE PTR [rbx+0x0],ch
 1006ad6:	and    BYTE PTR [rax],al
 1006ad8:	sub    eax,0x6c002000
 1006add:	add    BYTE PTR [rcx+0x0],ch
 1006ae0:	jae    0x1006ae2
 1006ae2:	je     0x1006ae4
 1006ae4:	and    BYTE PTR [rax],al
 1006ae6:	je     0x1006ae8
 1006ae8:	outs   dx,DWORD PTR ds:[rsi]
 1006ae9:	add    BYTE PTR [rdi+0x0],ch
 1006aec:	and    BYTE PTR [rax],al
 1006aee:	ins    BYTE PTR es:[rdi],dx
 1006aef:	add    BYTE PTR [rdi+0x0],ch
 1006af2:	outs   dx,BYTE PTR ds:[rsi]
 1006af3:	add    BYTE PTR [rdi+0x0],ah
 1006af6:	and    BYTE PTR [rax],al
 1006af8:	sub    eax,0x73002000
 1006afd:	add    BYTE PTR [rax+rax*1+0x6f],dh
 1006b01:	add    BYTE PTR [rax+0x0],dh
 1006b04:	jo     0x1006b06
 1006b06:	imul   eax,DWORD PTR [rax],0x67006e
 1006b0c:	and    BYTE PTR [rax],al
 1006b0e:	(bad)  
 1006b0f:	add    BYTE PTR [rsi+0x0],ah
 1006b12:	je     0x1006b14
 1006b14:	add    BYTE PTR gs:[rdx+0x0],dh
 1006b18:	and    BYTE PTR [rax],al
 1006b1a:	and    eax,0x20006400
 1006b1f:	add    BYTE PTR [rbp+0x0],ah
 1006b22:	ins    BYTE PTR es:[rdi],dx
 1006b23:	add    BYTE PTR [rbp+0x0],ah
 1006b26:	ins    DWORD PTR es:[rdi],dx
 1006b27:	add    BYTE PTR [rbp+0x0],ah
 1006b2a:	outs   dx,BYTE PTR ds:[rsi]
 1006b2b:	add    BYTE PTR [rax+rax*1+0x73],dh
	...
 1006b3f:	add    BYTE PTR [rbp+0x0],cl
 1006b42:	imul   eax,DWORD PTR [rax],0x6d0073
 1006b48:	(bad)  
 1006b49:	add    BYTE PTR [rax+rax*1+0x63],dh
 1006b4d:	add    BYTE PTR [rax+0x0],ch
 1006b50:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1006b55:	add    BYTE PTR [rbx+0x0],dh
 1006b58:	je     0x1006b5a
 1006b5a:	jb     0x1006b5c
 1006b5c:	jne    0x1006b5e
 1006b5e:	movsxd eax,DWORD PTR [rax]
 1006b60:	je     0x1006b62
 1006b62:	and    BYTE PTR [rax],al
 1006b64:	movsxd eax,DWORD PTR [rax]
 1006b66:	push   0x63006500
 1006b6b:	add    BYTE PTR [rbx+0x0],ch
 1006b6e:	jae    0x1006b70
 1006b70:	jne    0x1006b72
 1006b72:	ins    DWORD PTR es:[rdi],dx
 1006b73:	add    BYTE PTR [rax],ah
 1006b75:	add    BYTE PTR [rsi+0x0],ah
 1006b78:	outs   dx,DWORD PTR ds:[rsi]
 1006b79:	add    BYTE PTR [rdx+0x0],dh
 1006b7c:	and    BYTE PTR [rax],al
 1006b7e:	imul   eax,DWORD PTR [rax],0x74006e
 1006b84:	add    BYTE PTR gs:[rdx+0x0],dh
 1006b88:	ins    DWORD PTR es:[rdi],dx
 1006b89:	add    BYTE PTR [rbp+0x0],ah
 1006b8c:	add    BYTE PTR fs:[rcx+0x0],ch
 1006b90:	(bad)  
 1006b91:	add    BYTE PTR [rax+rax*1+0x65],dh
 1006b95:	add    BYTE PTR [rax],ah
 1006b97:	add    BYTE PTR [rbx+0x0],dh
 1006b9a:	ins    BYTE PTR es:[rdi],dx
 1006b9b:	add    BYTE PTR [rcx+0x0],ah
 1006b9e:	(bad)  
 1006b9f:	add    BYTE PTR [rax],ah
 1006ba1:	add    BYTE PTR [rip+0x63002000],ch        # 0x64008ba7
 1006ba7:	add    BYTE PTR [rdi+0x0],ch
 1006baa:	ins    DWORD PTR es:[rdi],dx
 1006bab:	add    BYTE PTR [rax+0x0],dh
 1006bae:	jne    0x1006bb0
 1006bb0:	je     0x1006bb2
 1006bb2:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1006bb7:	add    BYTE PTR [rip+0x20005800],ah        # 0x2100c3bd
 1006bbd:	add    BYTE PTR [rip+0x72002000],ch        # 0x73008bc3
 1006bc3:	add    BYTE PTR [rbp+0x0],ah
 1006bc6:	(bad)  
 1006bc7:	add    BYTE PTR [rax+rax*1+0x20],ah
 1006bcb:	add    BYTE PTR [rip+0x5800],ah        # 0x100c3d1
	...
 1006bdd:	add    BYTE PTR [rax],al
 1006bdf:	add    BYTE PTR [rbx+0x0],dl
 1006be2:	ins    BYTE PTR es:[rdi],dx
 1006be3:	add    BYTE PTR [rcx+0x0],ah
 1006be6:	(bad)  
 1006be7:	add    BYTE PTR [rax],ah
 1006be9:	add    BYTE PTR [rcx+0x0],ah
 1006bec:	je     0x1006bee
 1006bee:	and    BYTE PTR [rax],al
 1006bf0:	and    eax,0x20007000
 1006bf5:	add    BYTE PTR [rax+rax*1+0x69],ah
 1006bf9:	add    BYTE PTR [rax+rax*1+0x20],ah
 1006bfd:	add    BYTE PTR [rsi+0x0],ch
 1006c00:	outs   dx,DWORD PTR ds:[rsi]
 1006c01:	add    BYTE PTR [rax+rax*1+0x20],dh
 1006c05:	add    BYTE PTR [rax+0x0],dh
 1006c08:	(bad)  
 1006c09:	add    BYTE PTR [rbx+0x0],dh
 1006c0c:	jae    0x1006c0e
 1006c0e:	and    BYTE PTR [rax],al
 1006c10:	jae    0x1006c12
 1006c12:	(bad)  
 1006c13:	add    BYTE PTR [rsi+0x0],ch
 1006c16:	imul   eax,DWORD PTR [rax],0x790074
 1006c1c:	and    BYTE PTR [rax],al
 1006c1e:	movsxd eax,DWORD PTR [rax]
 1006c20:	push   0x63006500
 1006c25:	add    BYTE PTR [rbx+0x0],ch
 1006c28:	and    BYTE PTR [rax],al
 1006c2a:	sub    eax,0x72002000
 1006c2f:	add    BYTE PTR [rbp+0x0],ah
 1006c32:	(bad)  
 1006c33:	add    BYTE PTR [rax+rax*1+0x20],ah
 1006c37:	add    BYTE PTR [rip+0x20006400],ah        # 0x2100d03d
 1006c3d:	add    BYTE PTR [rip+0x6d002000],ch        # 0x6e008c43
 1006c43:	add    BYTE PTR [rcx+0x0],ah
 1006c46:	js     0x1006c48
 1006c48:	and    BYTE PTR [rax],al
 1006c4a:	add    BYTE PTR gs:[rax+0x0],bh
 1006c4e:	jo     0x1006c50
 1006c50:	add    BYTE PTR gs:[rbx+0x0],ah
 1006c54:	je     0x1006c56
 1006c56:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 1006c5b:	add    BYTE PTR [rip+0x6400],ah        # 0x100d061
	...
 1006c75:	add    BYTE PTR [rax],al
 1006c77:	add    BYTE PTR [rax+0x103dc],ah
 1006c7d:	add    BYTE PTR [rax],al
 1006c7f:	add    BYTE PTR [rax-0x23],al
 1006c82:	add    eax,DWORD PTR [rcx]
	...
 1006c94:	xchg   esi,eax
 1006c95:	xor    BYTE PTR [rdi],al
 1006c97:	ja     0x1006cc5
 1006c99:	(bad)  
 1006c9a:	(bad)  
 1006c9b:	out    dx,al
 1006c9c:	mov    edx,0x19990951
 1006ca1:	(bad)  
 1006ca2:	ins    DWORD PTR es:[rdi],dx
 1006ca3:	(bad)  
 1006ca4:	(bad)  
 1006ca5:	hlt    
 1006ca6:	push   0x70
 1006ca8:	xor    eax,0xa3e963a5
 1006cad:	xchg   ebp,eax
 1006cae:	fs sahf 
 1006cb0:	xor    cl,BYTE PTR [rax-0x475bf125]
 1006cb6:	fdivr  QWORD PTR [rcx+0x1e]
 1006cb9:	jmp    0xffffffffda894d93
 1006cbe:	rcl    BYTE PTR [rdi+0x9b64c2b],cl
 1006cc4:	mov    ebp,0x77eb17c
 1006cc9:	sub    eax,0x1d91e7b8
 1006cce:	mov    edi,0xb7106490
 1006cd3:	sbb    eax,0x6ab020f2
 1006cd8:	rex.W jno 0x1006c94
 1006cdb:	repz fiadd WORD PTR [rcx-0x42]
 1006cdf:	test   BYTE PTR [rbp-0x2c],bh
 1006ce2:	ficomp DWORD PTR [rdx]
 1006ce4:	jmp    0x1006cca
 1006ce6:	(bad)  [rbp+0x51]
 1006ce9:	mov    ch,0xd4
 1006ceb:	hlt    
 1006cec:	mov    DWORD PTR [rbp-0x67a97c2d],0xa8c0136c
 1006cf6:	imul   esp,DWORD PTR [rdx+rdi*2-0x7],0x62
 1006cfb:	std    
 1006cfc:	in     al,dx
 1006cfd:	leave  
 1006cfe:	mov    cl,BYTE PTR gs:[rdi+0x5c]
 1006d02:	add    DWORD PTR [rcx+rbx*8],edx
 1006d05:	ins    BYTE PTR es:[rdi],dx
 1006d06:	(bad)  
 1006d07:	movsxd esp,DWORD PTR [rbx+0x3d]
 1006d0a:	psubd  mm6,mm5
 1006d0d:	or     eax,0x20c88d08
 1006d12:	outs   dx,BYTE PTR ds:[rsi]
 1006d13:	cmp    ebx,DWORD PTR [rsi+0x10]
 1006d16:	imul   ecx,DWORD PTR [rsp+riz*8+0x41],0x7172d560
 1006d1e:	addr32 mov ds:0x3c03e4d1,al
 1006d24:	rex.RXB (bad) 
 1006d26:	add    al,0x4b
 1006d28:	std    
 1006d29:	test   DWORD PTR [rip+0xab56bd2],ecx        # 0xbb5d901
 1006d2f:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1006d30:	cli    
 1006d31:	test   al,0xb5
 1006d33:	xor    eax,0x42b2986c
 1006d38:	(bad)  
 1006d39:	leave  
 1006d3a:	mov    ebx,0xbcf940db
 1006d3f:	lods   al,BYTE PTR ds:[rsi]
 1006d40:	jrcxz  0x1006dae
 1006d42:	fdiv   DWORD PTR [rdx]
 1006d44:	jne    0x1006da2
 1006d46:	fild   WORD PTR [rbp-0x31]
 1006d49:	or     eax,0x3d59dcd6
 1006d4e:	shr    DWORD PTR [rbx+0x26d930ac],1
 1006d54:	cmp    al,BYTE PTR [rax]
 1006d56:	ficom  WORD PTR [rcx-0x80]
 1006d59:	push   rcx
 1006d5a:	xlat   BYTE PTR ds:[rbx]
 1006d5b:	enter  0x6116,0xd0
 1006d5f:	mov    edi,0x21b4f4b5
 1006d64:	and    eax,esp
 1006d66:	mov    bl,0x56
 1006d68:	cdq    
 1006d69:	xchg   ebp,eax
 1006d6a:	mov    edx,0xbda50fcf
 1006d6f:	mov    eax,0x2802b89e
 1006d74:	or     BYTE PTR [rax-0x264da0fb],cl
 1006d7a:	or     al,0xc6
 1006d7c:	and    al,0xe9
 1006d7e:	or     esi,DWORD PTR [rcx+0x2f6f7c87]
 1006d84:	adc    DWORD PTR [rax+rbp*2+0x58],ecx
 1006d88:	stos   DWORD PTR es:[rdi],eax
 1006d89:	sbb    eax,0x2d3dc161
 1006d8e:	data16 mov dh,0x90
 1006d91:	fdiv   QWORD PTR [r14+0x6]
 1006d95:	jno    0x1006d72
 1006d97:	add    DWORD PTR [rax+riz*1+0x102a98d2],edi
 1006d9e:	(bad)  
 1006d9f:	out    dx,eax
 1006da0:	mov    DWORD PTR [rbp-0x4ae08e4f],eax
 1006da6:	mov    dh,0x6
 1006da8:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1006da9:	in     al,0xbf
 1006dab:	lahf   
 1006dac:	xor    edx,esp
 1006dae:	mov    eax,0x7c9a2e8
 1006db3:	js     0x1006de9
 1006db5:	stc    
 1006db6:	add    BYTE PTR [rdi],cl
 1006db8:	mov    gs,WORD PTR [rax-0x67e769f7]
 1006dbe:	(bad)  
 1006dbf:	loope  0x1006d7c
 1006dc1:	or     eax,0x3d2d7f6a
 1006dc6:	ins    DWORD PTR es:[rdi],dx
 1006dc7:	or     BYTE PTR [rdi+0x191646c],dl
 1006dcd:	pop    rsp
 1006dce:	movsxd esp,esi
 1006dd0:	hlt    
 1006dd1:	push   rcx
 1006dd2:	imul   ebp,DWORD PTR [rbx+0x62],0x61
 1006dd6:	ins    BYTE PTR es:[rdi],dx
 1006dd7:	sbb    al,0xd8
 1006dd9:	xor    BYTE PTR [rbp-0x7b],ah
 1006ddc:	rex.WRX add BYTE PTR [rdx-0xe],r12b
 1006de0:	in     eax,dx
 1006de1:	xchg   ebp,eax
 1006de2:	(bad)  
 1006de3:	ins    BYTE PTR es:[rdi],dx
 1006de4:	jnp    0x1006d8b
 1006de6:	add    DWORD PTR [rbx],ebx
 1006de8:	shl    esp,0x8
 1006deb:	(bad)  
 1006dec:	push   rdi
 1006ded:	(bad)  
 1006dee:	pmaddwd mm0,mm6
 1006df1:	fnstenv [rax-0x4816af9b]
 1006df7:	adc    ch,dl
 1006df9:	mov    eax,0x887c8bbe
 1006dfe:	mov    ecx,0xdd1ddffc
 1006e03:	(bad)  
 1006e04:	rex.WB sub rax,0x7cf315da
 1006e0a:	ror    DWORD PTR [rbp+riz*2+0x58fbd44c],cl
 1006e11:	(bad)  
 1006e12:	mov    dl,0x4d
 1006e14:	(bad)  
 1006e15:	push   rcx
 1006e16:	mov    ch,0x3a
 1006e18:	je     0x1006e1a
 1006e1a:	mov    esp,0xbb30e2a3
 1006e1f:	(bad)  
 1006e20:	rex.B movs DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1006e22:	fisttp WORD PTR [rdx-0x29]
 1006e25:	xchg   ebp,eax
 1006e26:	fdivr  DWORD PTR [rip+0xffffffffa4d1c46d]        # 0xffffffffa5d23299
 1006e2c:	sti    
 1006e2d:	hlt    
 1006e2e:	(bad)  
 1006e2f:	shr    DWORD PTR [rdx-0x17],cl
 1006e32:	imul   eax,DWORD PTR [rbx-0x4],0x46346ed9
 1006e39:	mov    BYTE PTR [rdi-0x53],ah
 1006e3c:	sar    BYTE PTR [rax+0x2d73da60],1
 1006e42:	add    al,0x44
 1006e44:	in     eax,0x1d
 1006e46:	add    esi,DWORD PTR [rbx]
 1006e48:	pop    rdi
 1006e49:	rex.WR or r13b,BYTE PTR [rdx-0x22f28337]
 1006e50:	cmp    al,0x71
 1006e52:	add    eax,0x241aa50
 1006e57:	(bad)  
 1006e58:	adc    BYTE PTR [rax],dl
 1006e5a:	or     edi,DWORD PTR [rsi-0x36f3df7a]
 1006e60:	and    eax,0xb35768b5
 1006e65:	test   DWORD PTR [rdi+0x20],ebp
 1006e68:	or     esp,edx
 1006e6a:	mov    cx,0xe49f
 1006e6e:	(bad)  
 1006e6f:	(bad)  
 1006e70:	(bad)  
 1006e71:	stc    
 1006e72:	ficomp WORD PTR [rsi-0x68]
 1006e75:	leave  
 1006e76:	fldcw  WORD PTR [rcx]
 1006e78:	and    bl,BYTE PTR [rax-0x574b4f30]
 1006e7e:	xlat   BYTE PTR ds:[rbx]
 1006e7f:	(bad)  
 1006e80:	(bad)  
 1006e81:	cmp    eax,0xd8159b3
 1006e86:	mov    ah,0x2e
 1006e88:	cmp    ebx,DWORD PTR [rbp+rdi*4-0x49]
 1006e8c:	lods   eax,DWORD PTR ds:[rsi]
 1006e8d:	ins    BYTE PTR es:[rdi],dx
 1006e8e:	mov    edx,0xb88320c0
 1006e93:	in     eax,dx
 1006e94:	mov    dh,0xb3
 1006e96:	mov    edi,0xb6e20c9a
 1006e9b:	add    ebx,DWORD PTR [rdx+0x3974b1d2]
 1006ea1:	rex.RXB (bad) 
 1006ea3:	(bad)  
 1006ea4:	scas   eax,DWORD PTR es:[rdi]
 1006ea5:	ja     0x1006e79
 1006ea7:	popf   
 1006ea8:	adc    eax,0x8304db26
 1006ead:	(bad)  
 1006eae:	fdiv   QWORD PTR [rbx+0x12]
 1006eb1:	or     esp,DWORD PTR [rbx-0x1d]
 1006eb4:	test   BYTE PTR [rbx],bh
 1006eb6:	fs xchg esp,eax
 1006eb8:	ds push 0x6d
 1006ebb:	or     eax,0x7a6a5aa8
 1006ec0:	or     ecx,edi
 1006ec2:	(bad)  
 1006ec3:	in     al,0x9d
 1006ec5:	dec    DWORD PTR [rcx]
 1006ec7:	xchg   ebx,eax
 1006ec8:	(bad)  
 1006ec9:	scas   al,BYTE PTR es:[rdi]
 1006eca:	add    BYTE PTR [rdx],cl
 1006ecc:	mov    cl,0x9e
 1006ece:	(bad)  
 1006ecf:	jge    0x1006f15
 1006ed1:	xchg   ebx,eax
 1006ed2:	(bad)  
 1006ed4:	shl    BYTE PTR [rbx-0xd9778f8],cl
 1006eda:	add    DWORD PTR [rsi],ebx
 1006edc:	inc    dl
 1006ede:	(bad)  
 1006edf:	imul   ebx,DWORD PTR [rbp+0x57],0x67cbf762
 1006ee6:	xor    BYTE PTR gs:[rcx+0x36],0x6c
 1006eeb:	sbb    edi,esp
 1006eed:	(bad)  
 1006eee:	imul   ebp,DWORD PTR [rsi+0x76],0x1b
 1006ef2:	(bad)  
 1006ef3:	(bad)  
 1006ef4:	loopne 0x1006f21
 1006ef6:	ror    DWORD PTR [rcx+0x10da7a5a],cl
 1006efc:	int3   
 1006efd:	rex.WX frstor [rdi+0x6f]
 1006f01:	fistp  QWORD PTR [rcx-0x41100607]
 1006f07:	mov    es,WORD PTR [rbx-0x42]
 1006f0a:	mov    bh,0x17
 1006f0c:	(bad)  
 1006f0d:	mov    ?,WORD PTR [rax-0x295c17a0]
 1006f13:	(bad)  
 1006f14:	jle    0x1006ea9
 1006f16:	shl    DWORD PTR [rcx+0x38d8c2c4],1
 1006f1c:	push   rdx
 1006f1d:	repnz fisttp WORD PTR [rdi-0xf]
 1006f21:	addr32 mov ebx,0xbc5767d1
 1006f27:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 1006f28:	fld    QWORD PTR [rsi]
 1006f2a:	mov    ch,0x3f
 1006f2c:	rex.WXB
 1006f2d:	ss mov dl,0x48
 1006f30:	fisubr DWORD PTR [rbx]
 1006f32:	or     eax,0xa1b4cd8
 1006f37:	scas   eax,DWORD PTR es:[rdi]
 1006f38:	test   BYTE PTR [rdx+0x3],0x36
 1006f3c:	(bad)  
 1006f3d:	jp     0x1006f43
 1006f3f:	rex.B ret 
 1006f41:	out    dx,eax
 1006f42:	(bad)  
 1006f43:	fist   WORD PTR [rbp-0x21]
 1006f46:	addr32 test al,0xef
 1006f49:	mov    gs,WORD PTR [rsi+0x31]
 1006f4c:	jns    0x1006f0c
 1006f4e:	imul   eax,DWORD PTR [rsi-0x74],0x1acb61b3
 1006f55:	and    DWORD PTR [rsi-0x44],0xffffffa0
 1006f59:	shr    BYTE PTR [rdi+0x25],cl
 1006f5c:	ss loop 0x1006fc7
 1006f5f:	push   rdx
 1006f60:	xchg   ebp,eax
 1006f61:	ja     0x1006f6f
 1006f63:	int3   
 1006f64:	add    eax,DWORD PTR [rdi+0xb]
 1006f67:	mov    ebx,0x220216b9
 1006f6c:	(bad)  
 1006f6d:	es add eax,0xba3bbe55
 1006f73:	(bad)
 1006f76:	mov    ebp,0xb45a92b2
 1006f7b:	sub    eax,DWORD PTR [rdx+rbp*2]
 1006f7e:	mov    bl,0x5c
 1006f80:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
 1006f81:	call   rdi
 1006f83:	ret    0xcf31
 1006f86:	shl    BYTE PTR [rbp+0x2cd99e8b],1
 1006f8c:	sbb    eax,0xb05bdeae
 1006f91:	ret    0x9b64
 1006f94:	es repnz movsxd ebp,esp
 1006f98:	pushf  
 1006f99:	movabs ds:0x6a9026d930a756a,eax
 1006fa2:	or     DWORD PTR [rdi+rdi*1-0x7a14f1ca],ebx
 1006fa9:	addr32 (bad) 
 1006fab:	jb     0x1006fc0
 1006fad:	push   rdi
 1006fae:	add    BYTE PTR [rip+0xffffffff95bf4a82],al        # 0xffffffff96bfba36
 1006fb4:	adc    al,0x7a
 1006fb6:	mov    eax,0xb12baee2
 1006fbb:	jnp    0x1006ff5
 1006fbd:	sbb    esi,DWORD PTR [rsi-0x2d7164f4]
 1006fc3:	xchg   edx,eax
 1006fc4:	or     eax,0xb7e5d5be
 1006fc9:	out    dx,eax
 1006fca:	fdivr  QWORD PTR [rcx+riz*1-0x21]
 1006fce:	fisttp DWORD PTR [rbx]
 1006fd0:	(bad)  
 1006fd1:	rcl    bl,cl
 1006fd3:	xchg   BYTE PTR [rdx-0x1e],al
 1006fd6:	(bad)  
 1006fd7:	icebp  
 1006fd8:	clc    
 1006fd9:	mov    bl,0xdd
 1006fdb:	push   0x1fda836e
 1006fe0:	int    0x16
 1006fe2:	mov    esi,0xb9265b81
 1006fe7:	mul    cl
 1006fe9:	ja     0x1006f9b
 1006feb:	outs   dx,DWORD PTR ds:[rsi]
 1006fec:	ja     0x1007035
 1006fee:	mov    bh,0x18
 1006ff0:	out    0x5a,al
 1006ff2:	or     BYTE PTR [rax-0xf09590],cl
 1006ff8:	retf   0x63b
 1006ffb:	pop    sp
 1006ffd:	or     eax,DWORD PTR [rcx]
 1006fff:	adc    edi,edi
 1007001:	sahf   
 1007002:	(bad)
 1007007:	clc    
 1007008:	sar    edi,cl
 100700a:	imul   esp,DWORD PTR [rcx+0x45],0xffffffcf
 100700e:	ins    BYTE PTR es:[rdi],dx
 100700f:	(bad)  
 1007010:	js     0x1006ff4
 1007012:	or     ah,BYTE PTR [rax-0x28f22d12]
 1007018:	push   rsp
 1007019:	add    DWORD PTR [rsi+rcx*2],0xffffffc2
 100701d:	mov    bl,0x3
 100701f:	cmp    DWORD PTR [rcx+0x26],esp
 1007022:	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
 1007024:	not    DWORD PTR [rsi]
 1007026:	(bad)  
 1007027:	ror    BYTE PTR [rbp+0x47],1
 100702a:	imul   ecx,DWORD PTR [rcx-0x25],0x4a3e6e77
 1007031:	push   0xffffffffffffffd1
 1007033:	scas   al,BYTE PTR es:[rdi]
 1007034:	fcomp  QWORD PTR [rdx-0x2a]
 1007037:	fldenv [rsi+0xb]
 100703a:	fild   WORD PTR [rax-0x10]
 100703d:	cmp    ebx,eax
 100703f:	(bad)  
 1007040:	push   rbx
 1007041:	scas   al,BYTE PTR es:[rdi]
 1007042:	mov    esp,0xbb9ec5a9
 1007047:	fidivr WORD PTR [rdi-0x31]
 100704a:	mov    dl,0x47
 100704c:	jmp    0x1d312650
 1007051:	repnz mov ebp,0xbac28abd
 1007057:	retf   0x9330
 100705a:	mov    bl,0x53
 100705c:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 100705d:	movabs ds:0x693bad0360524b4,eax
 1007066:	xlat   BYTE PTR ds:[rbx]
 1007067:	int    0x29
 1007069:	push   rdi
 100706a:	ficom  WORD PTR [rdi+rdi*4+0x67]
 100706e:	fldenv [rbx]
 1007070:	cs jp  0x10070d9
 1007073:	mov    bl,0xb8
 1007075:	rex.WX (bad) 
 1007077:	(bad)
 100707b:	pop    rbp
 100707c:	xchg   esp,eax
 100707d:	sub    ebp,DWORD PTR [rdi+0x2a]
 1007080:	(bad)  
 1007081:	mov    esi,0x8ea1b40b
 1007086:	or     al,0xc3
 1007088:	sbb    ebx,edi
 100708a:	add    eax,0x2ef8d5a
 100708f:	sub    eax,0x74736e69
 1007094:	(bad)  
 1007095:	jo     0x1007100
 1007097:	xor    DWORD PTR [rcx],esi
 1007099:	xor    BYTE PTR [rsi],ch
 100709b:	fs ins BYTE PTR es:[rdi],dx
 100709d:	ins    BYTE PTR es:[rdi],dx
 100709e:	add    BYTE PTR [rax],al
 10070a0:	ja     0x1007107
 10070a2:	jb     0x10070d2
 10070a4:	fs ins BYTE PTR es:[rdi],dx
 10070a6:	ins    BYTE PTR es:[rdi],dx
 10070a7:	add    BYTE PTR [rbx],bh
 10070a9:	add    BYTE PTR [rax],al
 10070ab:	add    BYTE PTR [rax],al
 10070ad:	add    BYTE PTR [rax],al
 10070af:	add    BYTE PTR [rax+0x0],dl
 10070b2:	(bad)  
 10070b3:	add    BYTE PTR [rax+rax*1+0x68],dh
	...
 10070bf:	add    BYTE PTR [rdi+0x65],al
 10070c2:	je     0x1007108
 10070c4:	ins    BYTE PTR es:[rdi],dx
 10070c5:	ins    BYTE PTR es:[rdi],dx
 10070c6:	imul   r14d,DWORD PTR [rdx+0x65],0x726f7463
 10070ce:	jns    0x1007127
	...
 10070d8:	push   rbx
 10070d9:	gs je  0x1007120
 10070dc:	ins    BYTE PTR es:[rdi],dx
 10070dd:	ins    BYTE PTR es:[rdi],dx
 10070de:	imul   r14d,DWORD PTR [rdx+0x65],0x726f7463
 10070e6:	jns    0x100713f
	...
 10070f0:	push   rbx
 10070f1:	add    BYTE PTR [rax+0x0],ch
 10070f4:	(bad)  
 10070f5:	add    BYTE PTR [rdx+0x0],dh
 10070f8:	add    BYTE PTR gs:[rax+rax*1+0x43],ah
 10070fd:	add    BYTE PTR [rdi+0x0],ch
 1007100:	add    BYTE PTR fs:[rbp+0x0],ah
	...
 1007110:	push   rbx
 1007111:	add    BYTE PTR [rdi+0x0],ch
 1007114:	data16 add BYTE PTR [rax+rax*1+0x77],dh
 1007119:	add    BYTE PTR [rcx+0x0],ah
 100711c:	jb     0x100711e
 100711e:	add    BYTE PTR gs:[rax+rax*1+0x4d],bl
 1007123:	add    BYTE PTR [rcx+0x0],ch
 1007126:	movsxd eax,DWORD PTR [rax]
 1007128:	jb     0x100712a
 100712a:	outs   dx,DWORD PTR ds:[rsi]
 100712b:	add    BYTE PTR [rbx+0x0],dh
 100712e:	outs   dx,DWORD PTR ds:[rsi]
 100712f:	add    BYTE PTR [rsi+0x0],ah
 1007132:	je     0x1007134
 1007134:	pop    rsp
 1007135:	add    BYTE PTR [rbp+0x0],cl
 1007138:	imul   eax,DWORD PTR [rax],0x720063
 100713e:	outs   dx,DWORD PTR ds:[rsi]
 100713f:	add    BYTE PTR [rbx+0x0],dh
 1007142:	outs   dx,DWORD PTR ds:[rsi]
 1007143:	add    BYTE PTR [rsi+0x0],ah
 1007146:	je     0x1007148
 1007148:	and    BYTE PTR [rax],al
 100714a:	push   rbx
 100714b:	add    BYTE PTR [rcx+0x0],dl
 100714e:	rex.WR add BYTE PTR [rax],r12b
 1007151:	add    BYTE PTR [rbx+0x0],dl
 1007154:	add    BYTE PTR gs:[rdx+0x0],dh
 1007158:	jbe    0x100715a
 100715a:	add    BYTE PTR gs:[rdx+0x0],dh
 100715e:	pop    rsp
 100715f:	add    BYTE PTR [rcx],dh
 1007161:	add    BYTE PTR [rcx],dh
 1007163:	add    BYTE PTR [rax],dh
 1007165:	add    BYTE PTR [rax],al
 1007167:	add    BYTE PTR [rip+0x64007e00],ah        # 0x6500ef6d
 100716d:	add    BYTE PTR [rax+0x0],dh
 1007170:	and    eax,0xff000000
 1007175:	inc    DWORD PTR [rax]
 1007177:	add    BYTE PTR [rsi],ch
 1007179:	add    BYTE PTR [rbp+0x0],ah
 100717c:	js     0x100717e
 100717e:	je     0x1007180
	...
 1007188:	ins    DWORD PTR es:[rdi],dx
 1007189:	add    BYTE PTR [rbx+0x0],dh
 100718c:	ins    DWORD PTR es:[rdi],dx
 100718d:	add    BYTE PTR [rax+rax*1+0x73],ah
 1007191:	add    BYTE PTR [rdx+0x0],dh
 1007194:	jbe    0x1007196
 1007196:	add    BYTE PTR cs:[rbp+0x0],ah
 100719a:	js     0x100719c
 100719c:	add    BYTE PTR gs:[rax],al
 100719f:	add    BYTE PTR [rax+0x0],cl
 10071a2:	rex.WXB add BYTE PTR [r13+0x0],al
 10071a6:	pop    rcx
 10071a7:	add    BYTE PTR [rdi+0x0],bl
 10071aa:	rex.WR add BYTE PTR [rdi+0x0],r9b
 10071ae:	rex.XB add BYTE PTR [r9+0x0],al
 10071b2:	rex.WR add BYTE PTR [rdi+0x0],r11b
 10071b6:	rex.WRB add BYTE PTR [r9+0x0],r8b
 10071ba:	rex.XB add BYTE PTR [r8+0x0],cl
 10071be:	rex.WB add BYTE PTR [r14+0x0],cl
 10071c2:	add    BYTE PTR [r8+rax*1+0x53],r11b
 10071c7:	add    BYTE PTR [rdi+0x0],cl
 10071ca:	add    BYTE PTR [rax+r8*1+0x57],r10b
 10071cf:	add    BYTE PTR [rcx+0x0],al
 10071d2:	push   rdx
 10071d3:	add    BYTE PTR [rbp+0x0],al
 10071d6:	pop    rsp
 10071d7:	add    BYTE PTR [rbp+0x0],cl
 10071da:	imul   eax,DWORD PTR [rax],0x720063
 10071e0:	outs   dx,DWORD PTR ds:[rsi]
 10071e1:	add    BYTE PTR [rbx+0x0],dh
 10071e4:	outs   dx,DWORD PTR ds:[rsi]
 10071e5:	add    BYTE PTR [rsi+0x0],ah
 10071e8:	je     0x10071ea
 10071ea:	pop    rsp
 10071eb:	add    BYTE PTR [rbp+0x0],cl
 10071ee:	imul   eax,DWORD PTR [rax],0x720063
 10071f4:	outs   dx,DWORD PTR ds:[rsi]
 10071f5:	add    BYTE PTR [rbx+0x0],dh
 10071f8:	outs   dx,DWORD PTR ds:[rsi]
 10071f9:	add    BYTE PTR [rsi+0x0],ah
 10071fc:	je     0x10071fe
 10071fe:	and    BYTE PTR [rax],al
 1007200:	push   rbx
 1007201:	add    BYTE PTR [rcx+0x0],dl
 1007204:	rex.WR add BYTE PTR [rax],r12b
 1007207:	add    BYTE PTR [rbx+0x0],dl
 100720a:	add    BYTE PTR gs:[rdx+0x0],dh
 100720e:	jbe    0x1007210
 1007210:	add    BYTE PTR gs:[rdx+0x0],dh
 1007214:	pop    rsp
 1007215:	add    BYTE PTR [rcx+0x0],cl
 1007218:	outs   dx,BYTE PTR ds:[rsi]
 1007219:	add    BYTE PTR [rbx+0x0],dh
 100721c:	je     0x100721e
 100721e:	(bad)  
 100721f:	add    BYTE PTR [rsi+0x0],ch
 1007222:	movsxd eax,DWORD PTR [rax]
 1007224:	add    BYTE PTR gs:[rax],ah
 1007227:	add    BYTE PTR [rsi+0x0],cl
 100722a:	(bad)  
 100722b:	add    BYTE PTR [rbp+0x0],ch
 100722e:	add    BYTE PTR gs:[rbx+0x0],dh
 1007232:	pop    rsp
 1007233:	add    BYTE PTR [rbx+0x0],dl
 1007236:	push   rcx
 1007237:	add    BYTE PTR [rax+rax*1+0x0],cl
 100723b:	add    BYTE PTR [rax],al
 100723d:	add    BYTE PTR [rax],al
 100723f:	add    BYTE PTR [rip+0x51005300],ah        # 0x5200c545
 1007245:	add    BYTE PTR [rax+rax*1+0x53],cl
 1007249:	add    BYTE PTR [rbp+0x0],al
 100724c:	push   rdx
 100724d:	add    BYTE PTR [rsi+0x0],dl
 1007250:	push   rdx
 1007251:	add    BYTE PTR [rdi+0x0],bl
 1007254:	rex.WB add BYTE PTR [r14+0x0],cl
 1007258:	push   rbx
 1007259:	add    BYTE PTR [rax+rax*1+0x4e],dl
 100725d:	add    BYTE PTR [rcx+0x0],al
 1007260:	rex.WRB add BYTE PTR [r13+0x0],r8b
 1007264:	and    eax,0x69000000
 1007269:	add    BYTE PTR [rsi+0x0],ch
 100726c:	imul   eax,DWORD PTR [rax],0x730000
 1007272:	jno    0x1007274
 1007274:	ins    BYTE PTR es:[rdi],dx
 1007275:	add    BYTE PTR [rbx+0x0],dh
 1007278:	add    BYTE PTR gs:[rdx+0x0],dh
 100727c:	jbe    0x100727e
 100727e:	jb     0x1007280
 1007280:	add    BYTE PTR cs:[rcx+0x0],ch
 1007284:	outs   dx,BYTE PTR ds:[rsi]
 1007285:	add    BYTE PTR [rcx+0x0],ch
	...
 1007290:	rex.W add BYTE PTR [rbx+0x0],cl
 1007294:	add    BYTE PTR [r9+0x0],r11b
 1007298:	pop    rdi
 1007299:	add    BYTE PTR [rbx+0x0],al
 100729c:	rex.WR add BYTE PTR [rcx+0x0],r8b
 10072a0:	push   rbx
 10072a1:	add    BYTE PTR [rbx+0x0],dl
 10072a4:	add    BYTE PTR [r11+0x0],r10b
 10072a8:	pop    rdi
 10072a9:	add    BYTE PTR [rdx+0x0],dl
 10072ac:	rex.WRXB add BYTE PTR [r15+0x0],r9b
 10072b0:	push   rsp
 10072b1:	add    BYTE PTR [rax],al
 10072b3:	add    BYTE PTR [rax],al
 10072b5:	add    BYTE PTR [rax],al
 10072b7:	add    BYTE PTR [rax+0x0],cl
 10072ba:	rex.WXB add BYTE PTR [r13+0x0],al
 10072be:	pop    rcx
 10072bf:	add    BYTE PTR [rdi+0x0],bl
 10072c2:	rex.XB add BYTE PTR [r13+0x0],dl
 10072c6:	push   rdx
 10072c7:	add    BYTE PTR [rdx+0x0],dl
 10072ca:	add    BYTE PTR [r14+0x0],r9b
 10072ce:	push   rsp
 10072cf:	add    BYTE PTR [rdi+0x0],bl
 10072d2:	push   rbp
 10072d3:	add    BYTE PTR [rbx+0x0],dl
 10072d6:	add    BYTE PTR [r10+0x0],r10b
 10072da:	add    BYTE PTR [rax],al
 10072dc:	add    BYTE PTR [rax],al
 10072de:	add    BYTE PTR [rax],al
 10072e0:	rex.W add BYTE PTR [rbx+0x0],cl
 10072e4:	add    BYTE PTR [r9+0x0],r11b
 10072e8:	pop    rdi
 10072e9:	add    BYTE PTR [rax+rax*1+0x4f],cl
 10072ed:	add    BYTE PTR [rbx+0x0],al
 10072f0:	add    BYTE PTR [r8+rax*1+0x5f],cl
 10072f5:	add    BYTE PTR [rbp+0x0],cl
 10072f8:	add    BYTE PTR [r11+0x0],al
 10072fc:	rex.W add BYTE PTR [rcx+0x0],cl
 1007300:	rex.WRX add BYTE PTR [rbp+0x0],r8b
 1007304:	add    BYTE PTR [rax],al
 1007306:	add    BYTE PTR [rax],al
 1007308:	rex.W add BYTE PTR [rbx+0x0],cl
 100730c:	add    BYTE PTR [r9+0x0],r11b
 1007310:	pop    rdi
 1007311:	add    BYTE PTR [rbp+0x0],dl
 1007314:	push   rbx
 1007315:	add    BYTE PTR [rbp+0x0],al
 1007318:	push   rdx
 1007319:	add    BYTE PTR [rbx+0x0],dl
 100731c:	add    BYTE PTR [rax],al
 100731e:	add    BYTE PTR [rax],al
 1007320:	rex.W add BYTE PTR [rbx+0x0],cl
 1007324:	add    BYTE PTR [r9+0x0],r11b
 1007328:	pop    rdi
 1007329:	add    BYTE PTR [rax+0x0],dl
 100732c:	add    BYTE PTR [r10+0x0],r10b
 1007330:	rex.RX add BYTE PTR [rdi+0x0],r9b
 1007334:	push   rdx
 1007335:	add    BYTE PTR [rbp+0x0],cl
 1007338:	add    BYTE PTR [r14+0x0],cl
 100733c:	rex.XB add BYTE PTR [r13+0x0],al
 1007340:	pop    rdi
 1007341:	add    BYTE PTR [rax+rax*1+0x41],al
 1007345:	add    BYTE PTR [rax+rax*1+0x41],dl
 1007349:	add    BYTE PTR [rax],al
 100734b:	add    BYTE PTR [rax],al
 100734d:	add    BYTE PTR [rax],al
 100734f:	add    BYTE PTR [rax+0x0],cl
 1007352:	rex.WXB add BYTE PTR [r13+0x0],al
 1007356:	pop    rcx
 1007357:	add    BYTE PTR [rdi+0x0],bl
 100735a:	rex.XB add BYTE PTR [r13+0x0],dl
 100735e:	push   rdx
 100735f:	add    BYTE PTR [rdx+0x0],dl
 1007362:	add    BYTE PTR [r14+0x0],r9b
 1007366:	push   rsp
 1007367:	add    BYTE PTR [rdi+0x0],bl
 100736a:	rex.XB add BYTE PTR [r15+0x0],cl
 100736e:	rex.WRX add BYTE PTR [rsi+0x0],r8b
 1007372:	rex.WB add BYTE PTR [r15+0x0],al
 1007376:	add    BYTE PTR [rax],al
 1007378:	rex.W add BYTE PTR [rbx+0x0],cl
 100737c:	add    BYTE PTR [r9+0x0],r11b
 1007380:	pop    rdi
 1007381:	add    BYTE PTR [rax+rax*1+0x59],al
 1007385:	add    BYTE PTR [rsi+0x0],cl
 1007388:	pop    rdi
 1007389:	add    BYTE PTR [rax+rax*1+0x41],al
 100738d:	add    BYTE PTR [rax+rax*1+0x41],dl
 1007391:	add    BYTE PTR [rax],al
 1007393:	add    BYTE PTR [rax+0x0],al
 1007396:	add    BYTE PTR [rax],al
 1007398:	add    BYTE PTR fs:[rdi+0x0],dh
 100739c:	outs   dx,DWORD PTR ds:[rsi]
 100739d:	add    BYTE PTR [rdx+0x0],dh
 10073a0:	add    BYTE PTR fs:[rdx],bh
 10073a3:	add    BYTE PTR [rip+0x38003000],ah        # 0x3900a3a9
 10073a9:	add    BYTE PTR [rax+0x0],bh
 10073ac:	add    BYTE PTR [rax],al
 10073ae:	add    BYTE PTR [rax],al
 10073b0:	push   0x78006500
 10073b5:	add    BYTE PTR [rdx],bh
	...
 10073bf:	add    BYTE PTR [rax+0x0],ch
 10073c2:	add    BYTE PTR gs:[rax+0x0],bh
 10073c6:	sub    BYTE PTR [rax],al
	...
 10073d0:	and    eax,0x29006400
 10073d5:	add    BYTE PTR [rdx],bh
	...
 10073df:	add    BYTE PTR [rip+0x38003000],ah        # 0x3900a3e5
 10073e5:	add    BYTE PTR [rax+0x0],bh
 10073e8:	add    BYTE PTR [rax],al
 10073ea:	add    BYTE PTR [rax],al
 10073ec:	push   rdx
 10073ed:	push   rbx
 10073ee:	rex.R push rbx
 10073f0:	add    DWORD PTR [rbp-0x41],ecx
 10073f3:	mov    bl,0x3
 10073f5:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
 10073f6:	add    eax,0xcd069c4c
 10073fb:	loope  0x10073f4
 10073fd:	sbb    al,0x2f
 10073ff:	add    QWORD PTR [r8],rax
 1007402:	add    BYTE PTR [rax],al
 1007404:	push   rbx
 1007405:	jno    0x1007473
 1007407:	rex.R jne 0x1007477
 100740a:	jo     0x1007471
 100740c:	jb     0x100743c
 100740e:	jo     0x1007474
 1007410:	(bad)  
	...
 100749d:	add    BYTE PTR [rax],al
 100749f:	add    BYTE PTR [rax-0x77],cl
 10074a2:	pop    rsp
 10074a3:	and    al,0x8
 10074a5:	mov    QWORD PTR [rsp+0x10],rdi
 10074aa:	xor    edi,edi
 10074ac:	mov    r11,r8
 10074af:	mov    r10,rdx
 10074b2:	mov    rbx,rcx
 10074b5:	mov    r9d,edi
 10074b8:	test   rdx,rdx
 10074bb:	je     0x10074c6
 10074bd:	cmp    rdx,0x7fffffff
 10074c4:	jbe    0x10074cc
 10074c6:	mov    r9d,0x80070057
 10074cc:	test   r9d,r9d
 10074cf:	js     0x10074f4
 10074d1:	mov    rcx,rdx
 10074d4:	mov    rax,rbx
 10074d7:	mov    r9d,edi
 10074da:	test   rdx,rdx
 10074dd:	je     0x10074ee
 10074df:	nop
 10074e0:	cmp    WORD PTR [rax],di
 10074e3:	je     0x1007540
 10074e5:	add    rax,0x2
 10074e9:	dec    rcx
 10074ec:	jne    0x10074e0
 10074ee:	mov    r9d,0x80070057
 10074f4:	mov    r8,rdi
 10074f7:	test   r9d,r9d
 10074fa:	js     0x100755f
 10074fc:	lea    rcx,[rbx+r8*2]
 1007500:	mov    r9d,edi
 1007503:	sub    rdx,r8
 1007506:	je     0x1007552
 1007508:	add    r8,0x7fffffff
 100750f:	mov    rax,rdx
 1007512:	sub    rax,r10
 1007515:	add    r8,rax
 1007518:	sub    r11,rcx
 100751b:	nop    DWORD PTR [rax+rax*1+0x0]
 1007520:	test   r8,r8
 1007523:	je     0x100754d
 1007525:	movzx  eax,WORD PTR [r11+rcx*1]
 100752a:	test   ax,ax
 100752d:	je     0x100754d
 100752f:	mov    WORD PTR [rcx],ax
 1007532:	add    rcx,0x2
 1007536:	dec    r8
 1007539:	dec    rdx
 100753c:	jne    0x1007520
 100753e:	jmp    0x1007552
 1007540:	test   rcx,rcx
 1007543:	je     0x10074ee
 1007545:	mov    r8,rdx
 1007548:	sub    r8,rcx
 100754b:	jmp    0x10074f7
 100754d:	test   rdx,rdx
 1007550:	jne    0x100755c
 1007552:	sub    rcx,0x2
 1007556:	mov    r9d,0x8007007a
 100755c:	mov    WORD PTR [rcx],di
 100755f:	mov    rbx,QWORD PTR [rsp+0x8]
 1007564:	mov    rdi,QWORD PTR [rsp+0x10]
 1007569:	mov    eax,r9d
 100756c:	ret    
 100756d:	int3   
 100756e:	int3   
 100756f:	int3   
 1007570:	int3   
 1007571:	int3   
 1007572:	int3   
 1007573:	int3   
 1007574:	int3   
 1007575:	int3   
 1007576:	int3   
 1007577:	int3   
 1007578:	int3   
 1007579:	int3   
 100757a:	int3   
 100757b:	int3   
 100757c:	int3   
 100757d:	int3   
 100757e:	int3   
 100757f:	int3   
 1007580:	mov    QWORD PTR [rsp+0x10],rbx
 1007585:	push   rsi
 1007586:	sub    rsp,0x20
 100758a:	xor    ebx,ebx
 100758c:	mov    rsi,rcx
 100758f:	mov    eax,ebx
 1007591:	test   rdx,rdx
 1007594:	je     0x100759f
 1007596:	cmp    rdx,0x7fffffff
 100759d:	jbe    0x10075a4
 100759f:	mov    eax,0x80070057
 10075a4:	test   eax,eax
 10075a6:	js     0x10075ed
 10075a8:	mov    QWORD PTR [rsp+0x30],rdi
 10075ad:	lea    rdi,[rdx-0x1]
 10075b1:	mov    rdx,rdi
 10075b4:	call   QWORD PTR [rip+0xffffffffffff9e56]        # 0x1001410
 10075ba:	test   eax,eax
 10075bc:	js     0x10075dd
 10075be:	cdqe   
 10075c0:	cmp    rax,rdi
 10075c3:	ja     0x10075dd
 10075c5:	jne    0x10075e6
 10075c7:	mov    WORD PTR [rsi+rdi*2],bx
 10075cb:	mov    rdi,QWORD PTR [rsp+0x30]
 10075d0:	mov    eax,ebx
 10075d2:	mov    rbx,QWORD PTR [rsp+0x38]
 10075d7:	add    rsp,0x20
 10075db:	pop    rsi
 10075dc:	ret    
 10075dd:	mov    WORD PTR [rsi+rdi*2],bx
 10075e1:	mov    ebx,0x8007007a
 10075e6:	mov    rdi,QWORD PTR [rsp+0x30]
 10075eb:	mov    eax,ebx
 10075ed:	mov    rbx,QWORD PTR [rsp+0x38]
 10075f2:	add    rsp,0x20
 10075f6:	pop    rsi
 10075f7:	ret    
 10075f8:	int3   
 10075f9:	int3   
 10075fa:	int3   
 10075fb:	int3   
 10075fc:	int3   
 10075fd:	int3   
 10075fe:	int3   
 10075ff:	int3   
 1007600:	mov    QWORD PTR [rsp+0x18],r8
 1007605:	mov    QWORD PTR [rsp+0x20],r9
 100760a:	push   rbx
 100760b:	push   rsi
 100760c:	sub    rsp,0x28
 1007610:	xor    ebx,ebx
 1007612:	mov    rsi,rcx
 1007615:	mov    eax,ebx
 1007617:	test   rdx,rdx
 100761a:	je     0x1007625
 100761c:	cmp    rdx,0x7fffffff
 1007623:	jbe    0x100762a
 1007625:	mov    eax,0x80070057
 100762a:	test   eax,eax
 100762c:	js     0x1007674
 100762e:	mov    QWORD PTR [rsp+0x20],rdi
 1007633:	lea    rdi,[rdx-0x1]
 1007637:	lea    r9,[rsp+0x58]
 100763c:	mov    rdx,rdi
 100763f:	call   QWORD PTR [rip+0xffffffffffff9dcb]        # 0x1001410
 1007645:	test   eax,eax
 1007647:	js     0x1007664
 1007649:	cdqe   
 100764b:	cmp    rax,rdi
 100764e:	ja     0x1007664
 1007650:	jne    0x100766d
 1007652:	mov    WORD PTR [rsi+rdi*2],bx
 1007656:	mov    rdi,QWORD PTR [rsp+0x20]
 100765b:	mov    eax,ebx
 100765d:	add    rsp,0x28
 1007661:	pop    rsi
 1007662:	pop    rbx
 1007663:	ret    
 1007664:	mov    WORD PTR [rsi+rdi*2],bx
 1007668:	mov    ebx,0x8007007a
 100766d:	mov    rdi,QWORD PTR [rsp+0x20]
 1007672:	mov    eax,ebx
 1007674:	add    rsp,0x28
 1007678:	pop    rsi
 1007679:	pop    rbx
 100767a:	ret    
 100767b:	int3   
 100767c:	int3   
 100767d:	int3   
 100767e:	int3   
 100767f:	int3   
 1007680:	int3   
 1007681:	int3   
 1007682:	int3   
 1007683:	int3   
 1007684:	int3   
 1007685:	int3   
 1007686:	int3   
 1007687:	int3   
 1007688:	int3   
 1007689:	int3   
 100768a:	int3   
 100768b:	int3   
 100768c:	int3   
 100768d:	int3   
 100768e:	int3   
 100768f:	int3   
 1007690:	mov    QWORD PTR [rsp+0x8],rbx
 1007695:	mov    QWORD PTR [rsp+0x10],rbp
 100769a:	mov    QWORD PTR [rsp+0x18],rsi
 100769f:	push   rdi
 10076a0:	sub    rsp,0x20
 10076a4:	mov    ebx,DWORD PTR [rcx+0x228]
 10076aa:	mov    edx,0x220
 10076af:	mov    rbp,rcx
 10076b2:	call   0x10118c0
 10076b7:	xor    esi,esi
 10076b9:	lea    edi,[rbx+rax*1]
 10076bc:	test   ebx,ebx
 10076be:	je     0x10076e6
 10076c0:	mov    ecx,esi
 10076c2:	mov    edx,0xb3c
 10076c7:	imul   rcx,rcx,0xb3c
 10076ce:	add    rcx,QWORD PTR [rbp+0x220]
 10076d5:	call   0x10118c0
 10076da:	inc    esi
 10076dc:	add    edi,eax
 10076de:	cmp    esi,DWORD PTR [rbp+0x228]
 10076e4:	jb     0x10076c0
 10076e6:	mov    rbx,QWORD PTR [rsp+0x30]
 10076eb:	mov    rbp,QWORD PTR [rsp+0x38]
 10076f0:	mov    rsi,QWORD PTR [rsp+0x40]
 10076f5:	mov    eax,edi
 10076f7:	add    rsp,0x20
 10076fb:	pop    rdi
 10076fc:	ret    
 10076fd:	int3   
 10076fe:	int3   
 10076ff:	int3   
 1007700:	int3   
 1007701:	int3   
 1007702:	int3   
 1007703:	int3   
 1007704:	int3   
 1007705:	int3   
 1007706:	int3   
 1007707:	int3   
 1007708:	int3   
 1007709:	int3   
 100770a:	int3   
 100770b:	int3   
 100770c:	int3   
 100770d:	int3   
 100770e:	int3   
 100770f:	int3   
 1007710:	mov    QWORD PTR [rsp+0x8],rbx
 1007715:	push   rdi
 1007716:	sub    rsp,0x20
 100771a:	xor    edi,edi
 100771c:	mov    QWORD PTR [rcx],0x2
 1007723:	mov    rbx,rcx
 1007726:	mov    QWORD PTR [rcx+0x8],rdi
 100772a:	mov    QWORD PTR [rcx+0x10],rdi
 100772e:	mov    QWORD PTR [rcx+0x18],rdi
 1007732:	mov    QWORD PTR [rcx+0x20],rdi
 1007736:	mov    QWORD PTR [rcx+0x28],rdi
 100773a:	mov    QWORD PTR [rcx+0x30],rdi
 100773e:	mov    QWORD PTR [rcx+0x38],rdi
 1007742:	mov    QWORD PTR [rcx+0x40],rdi
 1007746:	mov    QWORD PTR [rcx+0x48],rdi
 100774a:	mov    QWORD PTR [rcx+0x50],rdi
 100774e:	mov    QWORD PTR [rcx+0x58],rdi
 1007752:	mov    QWORD PTR [rcx+0x60],rdi
 1007756:	mov    QWORD PTR [rcx+0x68],rdi
 100775a:	mov    QWORD PTR [rcx+0x78],rdi
 100775e:	mov    QWORD PTR [rcx+0x80],rdi
 1007765:	mov    QWORD PTR [rcx+0x88],rdi
 100776c:	mov    QWORD PTR [rcx+0x90],rdi
 1007773:	mov    QWORD PTR [rcx+0x98],rdi
 100777a:	mov    QWORD PTR [rcx+0xa0],rdi
 1007781:	mov    QWORD PTR [rcx+0xa8],rdi
 1007788:	mov    QWORD PTR [rcx+0xb0],rdi
 100778f:	mov    QWORD PTR [rcx+0xb8],rdi
 1007796:	mov    QWORD PTR [rcx+0xc4],rdi
 100779d:	mov    DWORD PTR [rcx+0xcc],edi
 10077a3:	mov    QWORD PTR [rcx+0xd0],rdi
 10077aa:	mov    QWORD PTR [rcx+0xd8],rdi
 10077b1:	mov    QWORD PTR [rcx+0xe0],0x80
 10077bc:	add    rcx,0xe8
 10077c3:	xor    edx,edx
 10077c5:	mov    r8d,0x800
 10077cb:	call   0x1011452
 10077d0:	lea    rcx,[rbx+0x900]
 10077d7:	xor    edx,edx
 10077d9:	mov    r8d,0x800
 10077df:	mov    QWORD PTR [rbx+0x8e8],rdi
 10077e6:	mov    QWORD PTR [rbx+0x8f0],rdi
 10077ed:	mov    QWORD PTR [rbx+0x8f8],0x80
 10077f8:	call   0x1011452
 10077fd:	lea    rcx,[rbx+0x1108]
 1007804:	xor    edx,edx
 1007806:	mov    r8d,0x230
 100780c:	call   0x1011452
 1007811:	mov    QWORD PTR [rbx+0x70],rdi
 1007815:	mov    rax,rbx
 1007818:	mov    rbx,QWORD PTR [rsp+0x30]
 100781d:	add    rsp,0x20
 1007821:	pop    rdi
 1007822:	ret    
 1007823:	int3   
 1007824:	int3   
 1007825:	int3   
 1007826:	int3   
 1007827:	int3   
 1007828:	int3   
 1007829:	int3   
 100782a:	int3   
 100782b:	int3   
 100782c:	int3   
 100782d:	int3   
 100782e:	int3   
 100782f:	int3   
 1007830:	mov    QWORD PTR [rsp+0x20],rbx
 1007835:	push   rbp
 1007836:	push   rsi
 1007837:	push   rdi
 1007838:	sub    rsp,0x4a0
 100783f:	mov    rax,QWORD PTR [rip+0xf95a]        # 0x10171a0
 1007846:	xor    rax,rsp
 1007849:	mov    QWORD PTR [rsp+0x490],rax
 1007851:	mov    rdi,rdx
 1007854:	mov    rdx,QWORD PTR [rip+0xf8e5]        # 0x1017140
 100785b:	mov    rsi,rcx
 100785e:	mov    rcx,rdi
 1007861:	mov    rbp,r8
 1007864:	call   QWORD PTR [rip+0xffffffffffff9bd6]        # 0x1001440
 100786a:	test   eax,eax
 100786c:	jne    0x1007a43
 1007872:	lea    rcx,[rip+0xffffffffffffe84f]        # 0x10060c8
 1007879:	call   QWORD PTR [rip+0xffffffffffff9b61]        # 0x10013e0
 100787f:	lea    rcx,[rip+0xffffffffffffe86a]        # 0x10060f0
 1007886:	mov    rbx,rax
 1007889:	call   QWORD PTR [rip+0xffffffffffff9b51]        # 0x10013e0
 100788f:	test   rbx,rbx
 1007892:	jne    0x10078ad
 1007894:	test   rax,rax
 1007897:	je     0x1007a43
 100789d:	mov    rbx,QWORD PTR [rip+0xf8b4]        # 0x1017158
 10078a4:	test   rbx,rbx
 10078a7:	je     0x1007a43
 10078ad:	mov    rcx,QWORD PTR [rsi+0x40]
 10078b1:	xor    edi,edi
 10078b3:	mov    WORD PTR [rsp+0x80],di
 10078bb:	test   rcx,rcx
 10078be:	je     0x10078fd
 10078c0:	cmp    WORD PTR [rcx],di
 10078c3:	je     0x10078fd
 10078c5:	mov    QWORD PTR [rsp+0x40],rdi
 10078ca:	mov    QWORD PTR [rsp+0x38],rdi
 10078cf:	lea    rax,[rsp+0x80]
 10078d7:	mov    QWORD PTR [rsp+0x30],0xff
 10078e0:	mov    QWORD PTR [rsp+0x28],rax
 10078e5:	xor    r9d,r9d
 10078e8:	xor    r8d,r8d
 10078eb:	xor    edx,edx
 10078ed:	mov    QWORD PTR [rsp+0x20],rdi
 10078f2:	call   QWORD PTR [rip+0xffffffffffff9ad0]        # 0x10013c8
 10078f8:	mov    edi,0x1
 10078fd:	mov    rsi,QWORD PTR [rsi+0x68]
 1007901:	lea    rcx,[rsp+0x50]
 1007906:	call   QWORD PTR [rip+0xffffffffffff9b24]        # 0x1001430
 100790c:	lea    rdx,[rsp+0x50]
 1007911:	lea    rcx,[rsp+0x58]
 1007916:	call   QWORD PTR [rip+0xffffffffffff9b1c]        # 0x1001438
 100791c:	lea    r9,[rsp+0x80]
 1007924:	test   eax,eax
 1007926:	je     0x1007952
 1007928:	test   edi,edi
 100792a:	lea    r8,[rip+0xffffffffffffe7cf]        # 0x1006100
 1007931:	lea    rcx,[rsp+0x280]
 1007939:	cmove  r9,QWORD PTR [rip+0xf81f]        # 0x1017160
 1007941:	mov    edx,0x104
 1007946:	mov    QWORD PTR [rsp+0x20],rsi
 100794b:	call   0x1007600
 1007950:	jmp    0x10079a2
 1007952:	mov    eax,DWORD PTR [rsp+0x60]
 1007956:	mov    edx,DWORD PTR [rsp+0x68]
 100795a:	mov    ecx,DWORD PTR [rsp+0x6c]
 100795e:	mov    DWORD PTR [rsp+0x40],eax
 1007962:	mov    eax,DWORD PTR [rsp+0x64]
 1007966:	inc    edx
 1007968:	add    ecx,0x76c
 100796e:	mov    DWORD PTR [rsp+0x38],eax
 1007972:	mov    DWORD PTR [rsp+0x30],edx
 1007976:	mov    DWORD PTR [rsp+0x28],ecx
 100797a:	test   edi,edi
 100797c:	lea    r8,[rip+0xffffffffffffe79d]        # 0x1006120
 1007983:	cmove  r9,QWORD PTR [rip+0xf7d5]        # 0x1017160
 100798b:	lea    rcx,[rsp+0x280]
 1007993:	mov    edx,0x104
 1007998:	mov    QWORD PTR [rsp+0x20],rsi
 100799d:	call   0x1007600
 10079a2:	test   eax,eax
 10079a4:	jns    0x10079c5
 10079a6:	lea    r8,[rip+0xffffffffffffe7c3]        # 0x1006170
 10079ad:	lea    rcx,[rip+0xf89c]        # 0x1017250
 10079b4:	mov    edx,0x1
 10079b9:	call   0x1007f00
 10079be:	xor    eax,eax
 10079c0:	jmp    0x1007a52
 10079c5:	mov    rcx,rbx
 10079c8:	call   QWORD PTR [rip+0xffffffffffff975a]        # 0x1001128
 10079ce:	cmp    eax,0xffffffff
 10079d1:	je     0x10079d7
 10079d3:	test   al,0x10
 10079d5:	jne    0x1007a0f
 10079d7:	xor    edx,edx
 10079d9:	mov    rcx,rbx
 10079dc:	call   QWORD PTR [rip+0xffffffffffff9736]        # 0x1001118
 10079e2:	test   eax,eax
 10079e4:	jne    0x1007a0f
 10079e6:	call   QWORD PTR [rip+0xffffffffffff9834]        # 0x1001220
 10079ec:	lea    r8,[rip+0xffffffffffffe7cd]        # 0x10061c0
 10079f3:	lea    rcx,[rip+0xf856]        # 0x1017250
 10079fa:	mov    r9,rbx
 10079fd:	mov    edx,0x1
 1007a02:	mov    DWORD PTR [rsp+0x20],eax
 1007a06:	call   0x1007f00
 1007a0b:	xor    eax,eax
 1007a0d:	jmp    0x1007a52
 1007a0f:	mov    rax,QWORD PTR [rip+0xf722]        # 0x1017138
 1007a16:	mov    r9,rbx
 1007a19:	xor    r8d,r8d
 1007a1c:	mov    QWORD PTR [rsp+0x28],rax
 1007a21:	lea    rax,[rsp+0x280]
 1007a29:	mov    edx,0x104
 1007a2e:	mov    rcx,rbp
 1007a31:	mov    QWORD PTR [rsp+0x20],rax
 1007a36:	call   QWORD PTR [rip+0xffffffffffff9994]        # 0x10013d0
 1007a3c:	mov    eax,0x1
 1007a41:	jmp    0x1007a52
 1007a43:	mov    rcx,QWORD PTR [rsi+0x20]
 1007a47:	mov    r8,rbp
 1007a4a:	mov    rdx,rdi
 1007a4d:	call   0x1007a80
 1007a52:	mov    rcx,QWORD PTR [rsp+0x490]
 1007a5a:	xor    rcx,rsp
 1007a5d:	call   0x1011420
 1007a62:	mov    rbx,QWORD PTR [rsp+0x4d8]
 1007a6a:	add    rsp,0x4a0
 1007a71:	pop    rdi
 1007a72:	pop    rsi
 1007a73:	pop    rbp
 1007a74:	ret    
 1007a75:	int3   
 1007a76:	int3   
 1007a77:	int3   
 1007a78:	int3   
 1007a79:	int3   
 1007a7a:	int3   
 1007a7b:	int3   
 1007a7c:	int3   
 1007a7d:	int3   
 1007a7e:	int3   
 1007a7f:	int3   
 1007a80:	rex push rbx
 1007a82:	push   rdi
 1007a83:	sub    rsp,0x498
 1007a8a:	mov    rax,QWORD PTR [rip+0xf70f]        # 0x10171a0
 1007a91:	xor    rax,rsp
 1007a94:	mov    QWORD PTR [rsp+0x480],rax
 1007a9c:	mov    rdi,r8
 1007a9f:	mov    rbx,rdx
 1007aa2:	test   rcx,rcx
 1007aa5:	jne    0x1007aae
 1007aa7:	xor    eax,eax
 1007aa9:	jmp    0x1007b3f
 1007aae:	lea    rax,[rsp+0x60]
 1007ab3:	mov    QWORD PTR [rsp+0x490],rsi
 1007abb:	xor    esi,esi
 1007abd:	mov    QWORD PTR [rsp+0x40],rsi
 1007ac2:	mov    QWORD PTR [rsp+0x38],rsi
 1007ac7:	mov    QWORD PTR [rsp+0x30],0x101
 1007ad0:	mov    QWORD PTR [rsp+0x28],rax
 1007ad5:	lea    r8d,[rsi+0x4]
 1007ad9:	lea    r9,[rsp+0x270]
 1007ae1:	lea    rdx,[rsp+0x50]
 1007ae6:	mov    QWORD PTR [rsp+0x20],0x101
 1007aef:	call   QWORD PTR [rip+0xffffffffffff98d3]        # 0x10013c8
 1007af5:	lea    rax,[rsp+0x60]
 1007afa:	lea    r9,[rsp+0x270]
 1007b02:	lea    r8,[rsp+0x50]
 1007b07:	mov    edx,0x104
 1007b0c:	mov    rcx,rdi
 1007b0f:	mov    QWORD PTR [rsp+0x28],rbx
 1007b14:	mov    WORD PTR [rsp+0x56],si
 1007b19:	mov    WORD PTR [rsp+0x470],si
 1007b21:	mov    QWORD PTR [rsp+0x20],rax
 1007b26:	mov    WORD PTR [rsp+0x260],si
 1007b2e:	call   QWORD PTR [rip+0xffffffffffff989c]        # 0x10013d0
 1007b34:	lea    eax,[rsi+0x1]
 1007b37:	mov    rsi,QWORD PTR [rsp+0x490]
 1007b3f:	mov    rcx,QWORD PTR [rsp+0x480]
 1007b47:	xor    rcx,rsp
 1007b4a:	call   0x1011420
 1007b4f:	add    rsp,0x498
 1007b56:	pop    rdi
 1007b57:	pop    rbx
 1007b58:	ret    
 1007b59:	int3   
 1007b5a:	int3   
 1007b5b:	int3   
 1007b5c:	int3   
 1007b5d:	int3   
 1007b5e:	int3   
 1007b5f:	int3   
 1007b60:	rex push rbx
 1007b62:	push   rbp
 1007b63:	push   rsi
 1007b64:	push   rdi
 1007b65:	sub    rsp,0x8c8
 1007b6c:	mov    rax,QWORD PTR [rip+0xf62d]        # 0x10171a0
 1007b73:	xor    rax,rsp
 1007b76:	mov    QWORD PTR [rsp+0x8b0],rax
 1007b7e:	mov    rax,QWORD PTR [rip+0xf58b]        # 0x1017110
 1007b85:	mov    rbp,r9
 1007b88:	mov    rsi,r8
 1007b8b:	mov    r9,rcx
 1007b8e:	mov    rbx,rcx
 1007b91:	mov    rdi,rdx
 1007b94:	lea    r8,[rip+0xffffffffffffc4dd]        # 0x1004078
 1007b9b:	lea    rcx,[rsp+0x490]
 1007ba3:	mov    edx,0x104
 1007ba8:	mov    QWORD PTR [rsp+0x20],rax
 1007bad:	call   0x1007600
 1007bb2:	test   eax,eax
 1007bb4:	js     0x1007c6d
 1007bba:	lea    rax,[rsp+0x490]
 1007bc2:	lea    rcx,[rsp+0x6a0]
 1007bca:	mov    r9,rdi
 1007bcd:	xor    r8d,r8d
 1007bd0:	mov    edx,0x104
 1007bd5:	mov    QWORD PTR [rsp+0x28],rsi
 1007bda:	mov    QWORD PTR [rsp+0x20],rax
 1007bdf:	call   QWORD PTR [rip+0xffffffffffff97eb]        # 0x10013d0
 1007be5:	lea    rdx,[rsp+0x6a0]
 1007bed:	lea    rcx,[rsp+0x30]
 1007bf2:	call   0x1007d50
 1007bf7:	cmp    eax,0x1
 1007bfa:	jne    0x1007c74
 1007bfc:	or     rax,0xffffffffffffffff
 1007c00:	inc    rax
 1007c03:	cmp    WORD PTR [rbx+rax*2],0x0
 1007c08:	jne    0x1007c00
 1007c0a:	xor    r10d,r10d
 1007c0d:	lea    r8,[rsp+0x5c]
 1007c12:	mov    edx,0x104
 1007c17:	lea    r8,[r8+rax*2]
 1007c1b:	lea    rax,[rsp+0x280]
 1007c23:	lea    rcx,[rsp+0x280]
 1007c2b:	sub    r8,rax
 1007c2e:	mov    r9d,r10d
 1007c31:	lea    rax,[rdx+0x7ffffefa]
 1007c38:	test   rax,rax
 1007c3b:	je     0x1007c55
 1007c3d:	movzx  eax,WORD PTR [r8+rcx*1]
 1007c42:	test   ax,ax
 1007c45:	je     0x1007c55
 1007c47:	mov    WORD PTR [rcx],ax
 1007c4a:	add    rcx,0x2
 1007c4e:	dec    rdx
 1007c51:	jne    0x1007c31
 1007c53:	jmp    0x1007c5a
 1007c55:	test   rdx,rdx
 1007c58:	jne    0x1007c64
 1007c5a:	sub    rcx,0x2
 1007c5e:	mov    r9d,0x8007007a
 1007c64:	mov    WORD PTR [rcx],r10w
 1007c68:	test   r9d,r9d
 1007c6b:	jns    0x1007cc4
 1007c6d:	xor    eax,eax
 1007c6f:	jmp    0x1007d27
 1007c74:	mov    r8,QWORD PTR [rip+0xf49d]        # 0x1017118
 1007c7b:	xor    r10d,r10d
 1007c7e:	lea    rax,[rsp+0x280]
 1007c86:	mov    edx,0x104
 1007c8b:	lea    rcx,[rsp+0x280]
 1007c93:	mov    r9d,r10d
 1007c96:	sub    r8,rax
 1007c99:	nop    DWORD PTR [rax+0x0]
 1007ca0:	lea    rax,[rdx+0x7ffffefa]
 1007ca7:	test   rax,rax
 1007caa:	je     0x1007c55
 1007cac:	movzx  eax,WORD PTR [r8+rcx*1]
 1007cb1:	test   ax,ax
 1007cb4:	je     0x1007c55
 1007cb6:	mov    WORD PTR [rcx],ax
 1007cb9:	add    rcx,0x2
 1007cbd:	dec    rdx
 1007cc0:	jne    0x1007ca0
 1007cc2:	jmp    0x1007c5a
 1007cc4:	lea    rcx,[rsp+0x280]
 1007ccc:	call   QWORD PTR [rip+0xffffffffffff9706]        # 0x10013d8
 1007cd2:	mov    r8,QWORD PTR [rip+0xf447]        # 0x1017120
 1007cd9:	lea    rcx,[rsp+0x490]
 1007ce1:	inc    eax
 1007ce3:	mov    r9,rbx
 1007ce6:	mov    edx,0x104
 1007ceb:	mov    DWORD PTR [rsp+0x20],eax
 1007cef:	call   0x1007600
 1007cf4:	test   eax,eax
 1007cf6:	js     0x1007c6d
 1007cfc:	lea    rax,[rsp+0x490]
 1007d04:	mov    r9,rdi
 1007d07:	xor    r8d,r8d
 1007d0a:	mov    edx,0x104
 1007d0f:	mov    rcx,rbp
 1007d12:	mov    QWORD PTR [rsp+0x28],rsi
 1007d17:	mov    QWORD PTR [rsp+0x20],rax
 1007d1c:	call   QWORD PTR [rip+0xffffffffffff96ae]        # 0x10013d0
 1007d22:	mov    eax,0x1
 1007d27:	mov    rcx,QWORD PTR [rsp+0x8b0]
 1007d2f:	xor    rcx,rsp
 1007d32:	call   0x1011420
 1007d37:	add    rsp,0x8c8
 1007d3e:	pop    rdi
 1007d3f:	pop    rsi
 1007d40:	pop    rbp
 1007d41:	pop    rbx
 1007d42:	ret    
 1007d43:	int3   
 1007d44:	int3   
 1007d45:	int3   
 1007d46:	int3   
 1007d47:	int3   
 1007d48:	int3   
 1007d49:	int3   
 1007d4a:	int3   
 1007d4b:	int3   
 1007d4c:	int3   
 1007d4d:	int3   
 1007d4e:	int3   
 1007d4f:	int3   
 1007d50:	mov    QWORD PTR [rsp+0x18],rbx
 1007d55:	mov    QWORD PTR [rsp+0x20],rsi
 1007d5a:	push   rdi
 1007d5b:	sub    rsp,0x290
 1007d62:	mov    rax,QWORD PTR [rip+0xf437]        # 0x10171a0
 1007d69:	xor    rax,rsp
 1007d6c:	mov    QWORD PTR [rsp+0x280],rax
 1007d74:	mov    rax,rdx
 1007d77:	mov    rbx,rcx
 1007d7a:	xor    esi,esi
 1007d7c:	mov    QWORD PTR [rsp+0x20],0xffffffffffffffff
 1007d85:	lea    rdx,[rsp+0x30]
 1007d8a:	mov    rcx,rax
 1007d8d:	call   QWORD PTR [rip+0xffffffffffff93a5]        # 0x1001138
 1007d93:	mov    rdi,rax
 1007d96:	mov    QWORD PTR [rsp+0x20],rax
 1007d9b:	cmp    rax,0xffffffffffffffff
 1007d9f:	je     0x1007e1e
 1007da1:	mov    rcx,rbx
 1007da4:	lea    rdx,[rsp+0x30]
 1007da9:	mov    r8d,0x250
 1007daf:	call   0x1011446
 1007db4:	data16 data16 data16 nop WORD PTR [rax+rax*1+0x0]
 1007dc0:	lea    rdx,[rsp+0x30]
 1007dc5:	mov    rcx,rdi
 1007dc8:	call   QWORD PTR [rip+0xffffffffffff9372]        # 0x1001140
 1007dce:	test   eax,eax
 1007dd0:	je     0x1007e0d
 1007dd2:	lea    r8,[rbx+0x2c]
 1007dd6:	lea    rax,[rsp+0x5c]
 1007ddb:	sub    r8,rax
 1007dde:	xchg   ax,ax
 1007de0:	movzx  edx,WORD PTR [rax]
 1007de3:	movzx  ecx,WORD PTR [rax+r8*1]
 1007de8:	sub    edx,ecx
 1007dea:	jne    0x1007df4
 1007dec:	add    rax,0x2
 1007df0:	test   ecx,ecx
 1007df2:	jne    0x1007de0
 1007df4:	test   edx,edx
 1007df6:	jle    0x1007e0b
 1007df8:	mov    rcx,rbx
 1007dfb:	lea    rdx,[rsp+0x30]
 1007e00:	mov    r8d,0x250
 1007e06:	call   0x1011446
 1007e0b:	jmp    0x1007dc0
 1007e0d:	call   QWORD PTR [rip+0xffffffffffff940d]        # 0x1001220
 1007e13:	mov    ecx,0x1
 1007e18:	cmp    eax,0x12
 1007e1b:	cmove  esi,ecx
 1007e1e:	cmp    rdi,0xffffffffffffffff
 1007e22:	je     0x1007e2d
 1007e24:	mov    rcx,rdi
 1007e27:	call   QWORD PTR [rip+0xffffffffffff92a3]        # 0x10010d0
 1007e2d:	mov    eax,esi
 1007e2f:	mov    rcx,QWORD PTR [rsp+0x280]
 1007e37:	xor    rcx,rsp
 1007e3a:	call   0x1011420
 1007e3f:	lea    r11,[rsp+0x290]
 1007e47:	mov    rbx,QWORD PTR [r11+0x20]
 1007e4b:	mov    rsi,QWORD PTR [r11+0x28]
 1007e4f:	mov    rsp,r11
 1007e52:	pop    rdi
 1007e53:	ret    
 1007e54:	int3   
 1007e55:	int3   
 1007e56:	int3   
 1007e57:	int3   
 1007e58:	int3   
 1007e59:	int3   
 1007e5a:	int3   
 1007e5b:	int3   
 1007e5c:	int3   
 1007e5d:	int3   
 1007e5e:	int3   
 1007e5f:	int3   
 1007e60:	sub    rsp,0x28
 1007e64:	mov    edx,ecx
 1007e66:	lea    rcx,[rip+0xffffffffffff9993]        # 0x1001800
 1007e6d:	call   QWORD PTR [rip+0xffffffffffff95a5]        # 0x1001418
 1007e73:	mov    eax,0x1
 1007e78:	add    rsp,0x28
 1007e7c:	ret    
 1007e7d:	int3   
 1007e7e:	int3   
 1007e7f:	int3   
 1007e80:	int3   
 1007e81:	int3   
 1007e82:	int3   
 1007e83:	int3   
 1007e84:	int3   
 1007e85:	int3   
 1007e86:	int3   
 1007e87:	int3   
 1007e88:	int3   
 1007e89:	int3   
 1007e8a:	int3   
 1007e8b:	int3   
 1007e8c:	int3   
 1007e8d:	int3   
 1007e8e:	int3   
 1007e8f:	int3   
 1007e90:	test   rdx,rdx
 1007e93:	je     0x1007ee9
 1007e95:	lea    rax,[rcx+0x208]
 1007e9c:	mov    r8d,0x104
 1007ea2:	sub    rdx,rax
 1007ea5:	data16 data16 nop WORD PTR [rax+rax*1+0x0]
 1007eb0:	lea    rcx,[r8+0x7ffffefa]
 1007eb7:	test   rcx,rcx
 1007eba:	je     0x1007edb
 1007ebc:	movzx  ecx,WORD PTR [rdx+rax*1]
 1007ec0:	test   cx,cx
 1007ec3:	je     0x1007edb
 1007ec5:	mov    WORD PTR [rax],cx
 1007ec8:	add    rax,0x2
 1007ecc:	dec    r8
 1007ecf:	jne    0x1007eb0
 1007ed1:	sub    rax,0x2
 1007ed5:	xor    ecx,ecx
 1007ed7:	mov    WORD PTR [rax],cx
 1007eda:	ret    
 1007edb:	test   r8,r8
 1007ede:	jne    0x1007ee4
 1007ee0:	sub    rax,0x2
 1007ee4:	xor    ecx,ecx
 1007ee6:	mov    WORD PTR [rax],cx
 1007ee9:	repz ret 
 1007eeb:	int3   
 1007eec:	int3   
 1007eed:	int3   
 1007eee:	int3   
 1007eef:	int3   
 1007ef0:	int3   
 1007ef1:	int3   
 1007ef2:	int3   
 1007ef3:	int3   
 1007ef4:	int3   
 1007ef5:	int3   
 1007ef6:	int3   
 1007ef7:	int3   
 1007ef8:	int3   
 1007ef9:	int3   
 1007efa:	int3   
 1007efb:	int3   
 1007efc:	int3   
 1007efd:	int3   
 1007efe:	int3   
 1007eff:	int3   
 1007f00:	mov    QWORD PTR [rsp+0x18],r8
 1007f05:	mov    QWORD PTR [rsp+0x20],r9
 1007f0a:	push   rbx
 1007f0b:	push   rbp
 1007f0c:	push   rsi
 1007f0d:	push   rdi
 1007f0e:	push   r12
 1007f10:	push   r13
 1007f12:	push   r14
 1007f14:	push   r15
 1007f16:	sub    rsp,0x28
 1007f1a:	cmp    DWORD PTR [rcx+0x4424],0x0
 1007f21:	mov    r15d,edx
 1007f24:	mov    rsi,rcx
 1007f27:	je     0x1007f36
 1007f29:	add    rcx,0x4428
 1007f30:	call   QWORD PTR [rip+0xffffffffffff92b2]        # 0x10011e8
 1007f36:	mov    edx,r15d
 1007f39:	mov    rcx,rsi
 1007f3c:	lea    rbx,[rsp+0x88]
 1007f44:	call   0x1008380
 1007f49:	lea    rdi,[rsi+0x4418]
 1007f50:	xor    r13d,r13d
 1007f53:	mov    r12,QWORD PTR [rdi]
 1007f56:	lea    rcx,[rsi+0x418]
 1007f5d:	mov    r14d,0x1fff
 1007f63:	add    r12,0x20c
 1007f6a:	mov    edx,r14d
 1007f6d:	mov    r9,rbx
 1007f70:	mov    WORD PTR [rsi+r12*2],r13w
 1007f75:	mov    rax,QWORD PTR [rdi]
 1007f78:	mov    r8,QWORD PTR [rsp+0x80]
 1007f80:	lea    rcx,[rcx+rax*2]
 1007f84:	sub    rdx,rax
 1007f87:	call   0x1007580
 1007f8c:	lea    rbx,[rsi+0x418]
 1007f93:	lea    ebp,[r14+0x1]
 1007f97:	test   rbx,rbx
 1007f9a:	je     0x1007fd9
 1007f9c:	mov    ecx,ebp
 1007f9e:	mov    rax,rbx
 1007fa1:	mov    edx,r13d
 1007fa4:	cmp    WORD PTR [rax],dx
 1007fa7:	je     0x1007fb4
 1007fa9:	add    rax,0x2
 1007fad:	dec    rcx
 1007fb0:	jne    0x1007fa4
 1007fb2:	jmp    0x1007fb9
 1007fb4:	test   rcx,rcx
 1007fb7:	jne    0x1007fbe
 1007fb9:	mov    edx,0x80070057
 1007fbe:	test   rdi,rdi
 1007fc1:	je     0x1007fd5
 1007fc3:	test   edx,edx
 1007fc5:	js     0x1007fd2
 1007fc7:	mov    rax,rbp
 1007fca:	sub    rax,rcx
 1007fcd:	mov    QWORD PTR [rdi],rax
 1007fd0:	jmp    0x1007fd5
 1007fd2:	mov    QWORD PTR [rdi],r13
 1007fd5:	test   edx,edx
 1007fd7:	jns    0x1007fe1
 1007fd9:	test   rdi,rdi
 1007fdc:	je     0x1007fe1
 1007fde:	mov    QWORD PTR [rdi],r13
 1007fe1:	cmp    r15d,0x1
 1007fe5:	je     0x1007ff0
 1007fe7:	cmp    DWORD PTR [rsi+0x4420],r13d
 1007fee:	je     0x1008001
 1007ff0:	lea    rdx,[rsi+r12*2]
 1007ff4:	lea    rcx,[rip+0xffffffffffff9875]        # 0x1001870
 1007ffb:	call   QWORD PTR [rip+0xffffffffffff9417]        # 0x1001418
 1008001:	mov    rax,QWORD PTR [rdi]
 1008004:	mov    r8,QWORD PTR [rip+0xf0fd]        # 0x1017108
 100800b:	lea    rcx,[rsi+0x418]
 1008012:	sub    r14,rax
 1008015:	lea    rcx,[rcx+rax*2]
 1008019:	mov    rdx,r14
 100801c:	call   0x10074a0
 1008021:	test   rbx,rbx
 1008024:	je     0x1008062
 1008026:	mov    rax,rbp
 1008029:	mov    ecx,r13d
 100802c:	nop    DWORD PTR [rax+0x0]
 1008030:	cmp    WORD PTR [rbx],cx
 1008033:	je     0x1008040
 1008035:	add    rbx,0x2
 1008039:	dec    rax
 100803c:	jne    0x1008030
 100803e:	jmp    0x1008045
 1008040:	test   rax,rax
 1008043:	jne    0x100804a
 1008045:	mov    ecx,0x80070057
 100804a:	test   rdi,rdi
 100804d:	je     0x100805e
 100804f:	test   ecx,ecx
 1008051:	js     0x100805b
 1008053:	sub    rbp,rax
 1008056:	mov    QWORD PTR [rdi],rbp
 1008059:	jmp    0x100805e
 100805b:	mov    QWORD PTR [rdi],r13
 100805e:	test   ecx,ecx
 1008060:	jns    0x100806a
 1008062:	test   rdi,rdi
 1008065:	je     0x100806a
 1008067:	mov    QWORD PTR [rdi],r13
 100806a:	cmp    r15d,0x1
 100806e:	je     0x1008079
 1008070:	cmp    QWORD PTR [rdi],0x1000
 1008077:	jbe    0x1008081
 1008079:	mov    rcx,rsi
 100807c:	call   0x10080b0
 1008081:	cmp    DWORD PTR [rsi+0x4424],r13d
 1008088:	je     0x1008097
 100808a:	lea    rcx,[rsi+0x4428]
 1008091:	call   QWORD PTR [rip+0xffffffffffff9149]        # 0x10011e0
 1008097:	add    rsp,0x28
 100809b:	pop    r15
 100809d:	pop    r14
 100809f:	pop    r13
 10080a1:	pop    r12
 10080a3:	pop    rdi
 10080a4:	pop    rsi
 10080a5:	pop    rbp
 10080a6:	pop    rbx
 10080a7:	ret    
 10080a8:	int3   
 10080a9:	int3   
 10080aa:	int3   
 10080ab:	int3   
 10080ac:	int3   
 10080ad:	int3   
 10080ae:	int3   
 10080af:	int3   
 10080b0:	rex push rdi
 10080b2:	sub    rsp,0x30
 10080b6:	cmp    QWORD PTR [rcx+0x4418],0x0
 10080be:	mov    rdi,rcx
 10080c1:	je     0x1008160
 10080c7:	cmp    QWORD PTR [rcx+0x410],0x0
 10080cf:	jne    0x10080de
 10080d1:	call   0x1008170
 10080d6:	test   eax,eax
 10080d8:	je     0x1008160
 10080de:	mov    rcx,QWORD PTR [rdi+0x410]
 10080e5:	mov    r9d,0x2
 10080eb:	xor    r8d,r8d
 10080ee:	xor    edx,edx
 10080f0:	mov    QWORD PTR [rsp+0x48],rbx
 10080f5:	call   QWORD PTR [rip+0xffffffffffff8fcd]        # 0x10010c8
 10080fb:	mov    r8d,DWORD PTR [rdi+0x4418]
 1008102:	mov    rcx,QWORD PTR [rdi+0x410]
 1008109:	lea    r9,[rsp+0x40]
 100810e:	lea    rdx,[rdi+0x418]
 1008115:	add    r8d,r8d
 1008118:	mov    DWORD PTR [rsp+0x40],0x0
 1008120:	mov    QWORD PTR [rsp+0x20],0x0
 1008129:	call   QWORD PTR [rip+0xffffffffffff8f81]        # 0x10010b0
 100812f:	mov    rcx,QWORD PTR [rdi+0x410]
 1008136:	call   QWORD PTR [rip+0xffffffffffff8f84]        # 0x10010c0
 100813c:	lea    rcx,[rdi+0x418]
 1008143:	xor    edx,edx
 1008145:	mov    r8d,0x4000
 100814b:	mov    QWORD PTR [rdi+0x4418],0x0
 1008156:	call   0x1011452
 100815b:	mov    rbx,QWORD PTR [rsp+0x48]
 1008160:	add    rsp,0x30
 1008164:	pop    rdi
 1008165:	ret    
 1008166:	int3   
 1008167:	int3   
 1008168:	int3   
 1008169:	int3   
 100816a:	int3   
 100816b:	int3   
 100816c:	int3   
 100816d:	int3   
 100816e:	int3   
 100816f:	int3   
 1008170:	mov    QWORD PTR [rsp+0x10],rbx
 1008175:	mov    QWORD PTR [rsp+0x18],rbp
 100817a:	mov    QWORD PTR [rsp+0x20],rsi
 100817f:	push   rdi
 1008180:	sub    rsp,0x270
 1008187:	mov    rax,QWORD PTR [rip+0xf012]        # 0x10171a0
 100818e:	xor    rax,rsp
 1008191:	mov    QWORD PTR [rsp+0x260],rax
 1008199:	xor    edi,edi
 100819b:	mov    ebx,0x104
 10081a0:	mov    rsi,rcx
 10081a3:	mov    edx,ebx
 10081a5:	cmp    WORD PTR [rcx],di
 10081a8:	je     0x10081ce
 10081aa:	mov    rax,QWORD PTR [rip+0xefb7]        # 0x1017168
 10081b1:	mov    r9,rcx
 10081b4:	lea    r8,[rip+0xffffffffffff9705]        # 0x10018c0
 10081bb:	lea    rcx,[rsp+0x50]
 10081c0:	mov    QWORD PTR [rsp+0x20],rax
 10081c5:	call   0x1007600
 10081ca:	mov    ebp,eax
 10081cc:	jmp    0x1008219
 10081ce:	mov    r8,QWORD PTR [rip+0xef93]        # 0x1017168
 10081d5:	lea    rax,[rsp+0x50]
 10081da:	lea    rcx,[rsp+0x50]
 10081df:	sub    r8,rax
 10081e2:	mov    ebp,edi
 10081e4:	lea    rax,[rdx+0x7ffffefa]
 10081eb:	test   rax,rax
 10081ee:	je     0x1008208
 10081f0:	movzx  eax,WORD PTR [r8+rcx*1]
 10081f5:	test   ax,ax
 10081f8:	je     0x1008208
 10081fa:	mov    WORD PTR [rcx],ax
 10081fd:	add    rcx,0x2
 1008201:	dec    rdx
 1008204:	jne    0x10081e4
 1008206:	jmp    0x100820d
 1008208:	test   rdx,rdx
 100820b:	jne    0x1008216
 100820d:	sub    rcx,0x2
 1008211:	mov    ebp,0x8007007a
 1008216:	mov    WORD PTR [rcx],di
 1008219:	test   ebp,ebp
 100821b:	jns    0x1008224
 100821d:	xor    eax,eax
 100821f:	jmp    0x100834f
 1008224:	xor    r9d,r9d
 1008227:	mov    QWORD PTR [rsp+0x30],rdi
 100822c:	lea    rcx,[rsp+0x50]
 1008231:	lea    r8d,[r9+0x3]
 1008235:	mov    edx,0x40000000
 100823a:	mov    DWORD PTR [rsp+0x28],0x80
 1008242:	mov    DWORD PTR [rsp+0x20],0x4
 100824a:	call   QWORD PTR [rip+0xffffffffffff9078]        # 0x10012c8
 1008250:	mov    QWORD PTR [rsi+0x410],rax
 1008257:	cmp    rax,0xffffffffffffffff
 100825b:	jne    0x10082f2
 1008261:	mov    QWORD PTR [rsi+0x410],rdi
 1008268:	cmp    WORD PTR [rsi],di
 100826b:	je     0x10082b7
 100826d:	mov    rdx,QWORD PTR [rip+0xeef4]        # 0x1017168
 1008274:	lea    rax,[rsp+0x50]
 1008279:	lea    rcx,[rsp+0x50]
 100827e:	sub    rdx,rax
 1008281:	mov    ebp,edi
 1008283:	lea    rax,[rbx+0x7ffffefa]
 100828a:	test   rax,rax
 100828d:	je     0x10082a6
 100828f:	movzx  eax,WORD PTR [rdx+rcx*1]
 1008293:	test   ax,ax
 1008296:	je     0x10082a6
 1008298:	mov    WORD PTR [rcx],ax
 100829b:	add    rcx,0x2
 100829f:	dec    rbx
 10082a2:	jne    0x1008283
 10082a4:	jmp    0x10082ab
 10082a6:	test   rbx,rbx
 10082a9:	jne    0x10082b4
 10082ab:	sub    rcx,0x2
 10082af:	mov    ebp,0x8007007a
 10082b4:	mov    WORD PTR [rcx],di
 10082b7:	test   ebp,ebp
 10082b9:	js     0x100821d
 10082bf:	xor    r9d,r9d
 10082c2:	mov    QWORD PTR [rsp+0x30],rdi
 10082c7:	lea    rcx,[rsp+0x50]
 10082cc:	lea    r8d,[r9+0x3]
 10082d0:	mov    edx,0x40000000
 10082d5:	mov    DWORD PTR [rsp+0x28],0x80
 10082dd:	mov    DWORD PTR [rsp+0x20],0x4
 10082e5:	call   QWORD PTR [rip+0xffffffffffff8fdd]        # 0x10012c8
 10082eb:	mov    QWORD PTR [rsi+0x410],rax
 10082f2:	mov    rcx,QWORD PTR [rsi+0x410]
 10082f9:	cmp    rcx,0xffffffffffffffff
 10082fd:	jne    0x1008308
 10082ff:	mov    QWORD PTR [rsi+0x410],rdi
 1008306:	jmp    0x1008342
 1008308:	xor    edx,edx
 100830a:	call   QWORD PTR [rip+0xffffffffffff8d98]        # 0x10010a8
 1008310:	test   eax,eax
 1008312:	jne    0x1008342
 1008314:	mov    rcx,QWORD PTR [rsi+0x410]
 100831b:	lea    r9,[rsp+0x40]
 1008320:	lea    r8d,[rax+0x2]
 1008324:	lea    rdx,[rip+0xffffffffffff946d]        # 0x1001798
 100832b:	mov    DWORD PTR [rsp+0x40],edi
 100832f:	mov    QWORD PTR [rsp+0x20],rdi
 1008334:	call   QWORD PTR [rip+0xffffffffffff8d76]        # 0x10010b0
 100833a:	test   eax,eax
 100833c:	je     0x100821d
 1008342:	cmp    QWORD PTR [rsi+0x410],rdi
 1008349:	setne  dil
 100834d:	mov    eax,edi
 100834f:	mov    rcx,QWORD PTR [rsp+0x260]
 1008357:	xor    rcx,rsp
 100835a:	call   0x1011420
 100835f:	lea    r11,[rsp+0x270]
 1008367:	mov    rbx,QWORD PTR [r11+0x18]
 100836b:	mov    rbp,QWORD PTR [r11+0x20]
 100836f:	mov    rsi,QWORD PTR [r11+0x28]
 1008373:	mov    rsp,r11
 1008376:	pop    rdi
 1008377:	ret    
 1008378:	int3   
 1008379:	int3   
 100837a:	int3   
 100837b:	int3   
 100837c:	int3   
 100837d:	int3   
 100837e:	int3   
 100837f:	int3   
 1008380:	mov    QWORD PTR [rsp+0x18],rbx
 1008385:	push   rbp
 1008386:	push   rsi
 1008387:	push   rdi
 1008388:	push   r12
 100838a:	push   r13
 100838c:	push   r14
 100838e:	push   r15
 1008390:	lea    rbp,[rsp-0x27]
 1008395:	sub    rsp,0xe0
 100839c:	mov    rax,QWORD PTR [rip+0xedfd]        # 0x10171a0
 10083a3:	xor    rax,rsp
 10083a6:	mov    QWORD PTR [rbp+0x17],rax
 10083aa:	xor    eax,eax
 10083ac:	mov    esi,edx
 10083ae:	mov    r15,rcx
 10083b1:	xor    r13d,r13d
 10083b4:	lea    rcx,[rbp-0x29]
 10083b8:	lea    edx,[rax+0x20]
 10083bb:	mov    QWORD PTR [rbp-0x27],rax
 10083bf:	mov    QWORD PTR [rbp-0x1f],rax
 10083c3:	mov    QWORD PTR [rbp-0x17],rax
 10083c7:	mov    WORD PTR [rbp-0x29],r13w
 10083cc:	mov    QWORD PTR [rbp-0xf],rax
 10083d0:	mov    QWORD PTR [rbp-0x7],rax
 10083d4:	mov    QWORD PTR [rbp+0x1],rax
 10083d8:	mov    QWORD PTR [rbp+0x9],rax
 10083dc:	mov    DWORD PTR [rbp+0x11],eax
 10083df:	mov    WORD PTR [rbp+0x15],ax
 10083e3:	mov    WORD PTR [rbp-0x69],r13w
 10083e8:	mov    QWORD PTR [rbp-0x67],rax
 10083ec:	mov    QWORD PTR [rbp-0x5f],rax
 10083f0:	mov    QWORD PTR [rbp-0x57],rax
 10083f4:	mov    QWORD PTR [rbp-0x4f],rax
 10083f8:	mov    QWORD PTR [rbp-0x47],rax
 10083fc:	mov    QWORD PTR [rbp-0x3f],rax
 1008400:	mov    QWORD PTR [rbp-0x37],rax
 1008404:	mov    DWORD PTR [rbp-0x2f],eax
 1008407:	mov    WORD PTR [rbp-0x2b],ax
 100840b:	call   QWORD PTR [rip+0xffffffffffff9017]        # 0x1001428
 1008411:	lea    edx,[r13+0x20]
 1008415:	lea    rcx,[rbp-0x69]
 1008419:	call   QWORD PTR [rip+0xffffffffffff9001]        # 0x1001420
 100841f:	mov    r14,QWORD PTR [rip+0xed4a]        # 0x1017170
 1008426:	mov    rdi,QWORD PTR [rip+0xed03]        # 0x1017130
 100842d:	lea    r11,[r15+0x208]
 1008434:	lea    r12,[r15+0x4418]
 100843b:	cmp    WORD PTR [r11],r13w
 100843f:	mov    rbx,QWORD PTR [r12]
 1008443:	cmovne r14,r11
 1008447:	cmp    esi,0x1
 100844a:	cmove  rdi,QWORD PTR [rip+0xecd6]        # 0x1017128
 1008452:	call   QWORD PTR [rip+0xffffffffffff8de0]        # 0x1001238
 1008458:	mov    esi,eax
 100845a:	call   QWORD PTR [rip+0xffffffffffff8df8]        # 0x1001258
 1008460:	mov    QWORD PTR [rsp+0x40],r14
 1008465:	mov    r9d,eax
 1008468:	mov    QWORD PTR [rsp+0x38],rdi
 100846d:	lea    rax,[rbp-0x69]
 1008471:	mov    QWORD PTR [rsp+0x30],rax
 1008476:	lea    rax,[rbp-0x29]
 100847a:	lea    rcx,[r15+0x418]
 1008481:	mov    QWORD PTR [rsp+0x28],rax
 1008486:	mov    edx,0x1fff
 100848b:	lea    r8,[rip+0xffffffffffff93ee]        # 0x1001880
 1008492:	lea    rcx,[rcx+rbx*2]
 1008496:	sub    rdx,rbx
 1008499:	mov    DWORD PTR [rsp+0x20],esi
 100849d:	call   0x1007600
 10084a2:	lea    r11,[r15+0x418]
 10084a9:	test   r11,r11
 10084ac:	je     0x10084ed
 10084ae:	mov    ecx,0x2000
 10084b3:	mov    edx,r13d
 10084b6:	mov    eax,ecx
 10084b8:	cmp    WORD PTR [r11],dx
 10084bc:	je     0x10084c9
 10084be:	add    r11,0x2
 10084c2:	dec    rax
 10084c5:	jne    0x10084b8
 10084c7:	jmp    0x10084ce
 10084c9:	test   rax,rax
 10084cc:	jne    0x10084d3
 10084ce:	mov    edx,0x80070057
 10084d3:	test   r12,r12
 10084d6:	je     0x10084e9
 10084d8:	test   edx,edx
 10084da:	js     0x10084e5
 10084dc:	sub    rcx,rax
 10084df:	mov    QWORD PTR [r12],rcx
 10084e3:	jmp    0x10084e9
 10084e5:	mov    QWORD PTR [r12],r13
 10084e9:	test   edx,edx
 10084eb:	jns    0x10084f6
 10084ed:	test   r12,r12
 10084f0:	je     0x10084f6
 10084f2:	mov    QWORD PTR [r12],r13
 10084f6:	mov    rcx,QWORD PTR [rbp+0x17]
 10084fa:	xor    rcx,rsp
 10084fd:	call   0x1011420
 1008502:	mov    rbx,QWORD PTR [rsp+0x130]
 100850a:	add    rsp,0xe0
 1008511:	pop    r15
 1008513:	pop    r14
 1008515:	pop    r13
 1008517:	pop    r12
 1008519:	pop    rdi
 100851a:	pop    rsi
 100851b:	pop    rbp
 100851c:	ret    
 100851d:	int3   
 100851e:	int3   
 100851f:	int3   
 1008520:	int3   
 1008521:	int3   
 1008522:	int3   
 1008523:	int3   
 1008524:	int3   
 1008525:	int3   
 1008526:	int3   
 1008527:	int3   
 1008528:	int3   
 1008529:	int3   
 100852a:	int3   
 100852b:	int3   
 100852c:	int3   
 100852d:	int3   
 100852e:	int3   
 100852f:	int3   
 1008530:	mov    QWORD PTR [rsp+0x18],rbx
 1008535:	mov    QWORD PTR [rsp+0x20],rdi
 100853a:	push   r14
 100853c:	sub    rsp,0x20
 1008540:	xor    r14d,r14d
 1008543:	mov    rbx,rdx
 1008546:	mov    rdi,rcx
 1008549:	mov    rax,rdx
 100854c:	mov    QWORD PTR [rcx+0x8],r14
 1008550:	mov    DWORD PTR [rcx+0x10],r14d
 1008554:	test   rdx,rdx
 1008557:	je     0x100856e
 1008559:	mov    ecx,r14d
 100855c:	nop    DWORD PTR [rax+0x0]
 1008560:	add    ecx,DWORD PTR [rax+0xc]
 1008563:	mov    DWORD PTR [rdi+0xc],ecx
 1008566:	mov    rax,QWORD PTR [rax]
 1008569:	test   rax,rax
 100856c:	jne    0x1008560
 100856e:	mov    eax,DWORD PTR [rdi+0xc]
 1008571:	test   eax,eax
 1008573:	jne    0x1008586
 1008575:	mov    rbx,QWORD PTR [rsp+0x40]
 100857a:	mov    rdi,QWORD PTR [rsp+0x48]
 100857f:	add    rsp,0x20
 1008583:	pop    r14
 1008585:	ret    
 1008586:	mov    rcx,0xffffffffffffffff
 100858d:	mov    QWORD PTR [rsp+0x38],rsi
 1008592:	mov    rsi,rax
 1008595:	mov    eax,0x10
 100859a:	mul    rsi
 100859d:	cmovo  rax,rcx
 10085a1:	mov    rcx,rax
 10085a4:	call   0x1011184
 10085a9:	test   rax,rax
 10085ac:	je     0x10085d1
 10085ae:	lea    edx,[rsi-0x1]
 10085b1:	mov    rcx,rax
 10085b4:	test   edx,edx
 10085b6:	js     0x10085d4
 10085b8:	nop    DWORD PTR [rax+rax*1+0x0]
 10085c0:	mov    QWORD PTR [rcx],r14
 10085c3:	mov    QWORD PTR [rcx+0x8],r14
 10085c7:	add    rcx,0x10
 10085cb:	dec    edx
 10085cd:	jns    0x10085c0
 10085cf:	jmp    0x10085d4
 10085d1:	mov    rax,r14
 10085d4:	mov    QWORD PTR [rdi],rax
 10085d7:	test   rax,rax
 10085da:	jne    0x10085e5
 10085dc:	mov    DWORD PTR [rdi+0xc],r14d
 10085e0:	jmp    0x10086be
 10085e5:	mov    QWORD PTR [rsp+0x30],rbp
 10085ea:	mov    bpl,0x1
 10085ed:	test   rbx,rbx
 10085f0:	je     0x10086b7
 10085f6:	cmp    DWORD PTR [rbx+0xc],r14d
 10085fa:	ja     0x10085ff
 10085fc:	mov    rbx,QWORD PTR [rbx]
 10085ff:	test   rbx,rbx
 1008602:	je     0x10086b7
 1008608:	cmp    DWORD PTR [rbx+0xc],r14d
 100860c:	jbe    0x10086b7
 1008612:	lea    r9,[rbx+0x18]
 1008616:	mov    r8d,0x1
 100861c:	test   r9,r9
 100861f:	je     0x10086b7
 1008625:	mov    edx,DWORD PTR [rdi+0x8]
 1008628:	test   edx,edx
 100862a:	je     0x1008649
 100862c:	mov    rsi,QWORD PTR [r9]
 100862f:	lea    r10d,[rdx-0x1]
 1008633:	shl    r10,0x4
 1008637:	add    r10,QWORD PTR [rdi]
 100863a:	mov    r11,QWORD PTR [r10]
 100863d:	cmp    r11,rsi
 1008640:	jb     0x10086d4
 1008646:	xor    bpl,bpl
 1008649:	mov    rax,QWORD PTR [r9]
 100864c:	mov    rcx,QWORD PTR [rdi]
 100864f:	add    rdx,rdx
 1008652:	mov    QWORD PTR [rcx+rdx*8],rax
 1008656:	mov    edx,DWORD PTR [rdi+0x8]
 1008659:	mov    rax,QWORD PTR [r9+0x8]
 100865d:	mov    rcx,QWORD PTR [rdi]
 1008660:	add    rdx,rdx
 1008663:	mov    QWORD PTR [rcx+rdx*8+0x8],rax
 1008668:	inc    DWORD PTR [rdi+0x8]
 100866b:	mov    eax,DWORD PTR [rbx+0xc]
 100866e:	cmp    r8,rax
 1008671:	jb     0x1008679
 1008673:	mov    rbx,QWORD PTR [rbx]
 1008676:	mov    r8,r14
 1008679:	test   rbx,rbx
 100867c:	je     0x1008699
 100867e:	mov    eax,DWORD PTR [rbx+0xc]
 1008681:	cmp    r8,rax
 1008684:	jae    0x1008699
 1008686:	mov    rax,r8
 1008689:	lea    r9,[rbx+0x18]
 100868d:	inc    r8
 1008690:	shl    rax,0x4
 1008694:	add    r9,rax
 1008697:	jne    0x1008625
 1008699:	test   bpl,bpl
 100869c:	jne    0x10086b7
 100869e:	mov    edx,DWORD PTR [rdi+0x8]
 10086a1:	mov    rcx,QWORD PTR [rdi]
 10086a4:	lea    r9,[rip+0x125]        # 0x10087d0
 10086ab:	mov    r8d,0x10
 10086b1:	call   QWORD PTR [rip+0xffffffffffff8dc9]        # 0x1001480
 10086b7:	mov    rbp,QWORD PTR [rsp+0x30]
 10086bc:	mov    al,0x1
 10086be:	mov    rsi,QWORD PTR [rsp+0x38]
 10086c3:	mov    rbx,QWORD PTR [rsp+0x40]
 10086c8:	mov    rdi,QWORD PTR [rsp+0x48]
 10086cd:	add    rsp,0x20
 10086d1:	pop    r14
 10086d3:	ret    
 10086d4:	mov    rcx,QWORD PTR [r10+0x8]
 10086d8:	add    rcx,r11
 10086db:	cmp    rcx,rsi
 10086de:	jb     0x1008649
 10086e4:	mov    rax,QWORD PTR [r9+0x8]
 10086e8:	sub    rax,r11
 10086eb:	add    rax,rsi
 10086ee:	mov    QWORD PTR [r10+0x8],rax
 10086f2:	jmp    0x100866b
 10086f7:	int3   
 10086f8:	int3   
 10086f9:	int3   
 10086fa:	int3   
 10086fb:	int3   
 10086fc:	int3   
 10086fd:	int3   
 10086fe:	int3   
 10086ff:	int3   
 1008700:	mov    QWORD PTR [rsp+0x8],rbx
 1008705:	mov    QWORD PTR [rsp+0x10],rdi
 100870a:	mov    eax,DWORD PTR [rcx+0x10]
 100870d:	xor    ebx,ebx
 100870f:	mov    rdi,r8
 1008712:	mov    r11,rdx
 1008715:	mov    r10,rcx
 1008718:	test   eax,eax
 100871a:	je     0x100873b
 100871c:	lea    r9d,[rax-0x1]
 1008720:	mov    rax,QWORD PTR [rcx]
 1008723:	add    r9,r9
 1008726:	mov    r8,QWORD PTR [rax+r9*8+0x8]
 100872b:	add    r8,QWORD PTR [rax+r9*8]
 100872f:	mov    eax,DWORD PTR [rcx+0x10]
 1008732:	cmp    r8,rdx
 1008735:	cmova  eax,ebx
 1008738:	mov    DWORD PTR [rcx+0x10],eax
 100873b:	mov    r9d,DWORD PTR [rcx+0x8]
 100873f:	cmp    DWORD PTR [rcx+0x10],r9d
 1008743:	jae    0x1008773
 1008745:	mov    r8,QWORD PTR [rcx]
 1008748:	nop    DWORD PTR [rax+rax*1+0x0]
 1008750:	mov    edx,DWORD PTR [r10+0x10]
 1008754:	mov    eax,edx
 1008756:	add    rax,rax
 1008759:	mov    rcx,QWORD PTR [r8+rax*8+0x8]
 100875e:	add    rcx,QWORD PTR [r8+rax*8]
 1008762:	cmp    rcx,r11
 1008765:	ja     0x1008773
 1008767:	lea    eax,[rdx+0x1]
 100876a:	mov    DWORD PTR [r10+0x10],eax
 100876e:	cmp    eax,r9d
 1008771:	jb     0x1008750
 1008773:	mov    eax,DWORD PTR [r10+0x10]
 1008777:	cmp    eax,r9d
 100877a:	jb     0x1008789
 100877c:	xor    al,al
 100877e:	mov    rbx,QWORD PTR [rsp+0x8]
 1008783:	mov    rdi,QWORD PTR [rsp+0x10]
 1008788:	ret    
 1008789:	mov    r8,QWORD PTR [r10]
 100878c:	shl    rax,0x4
 1008790:	cmp    QWORD PTR [rax+r8*1],r11
 1008794:	ja     0x10087b4
 1008796:	lea    ecx,[r9-0x1]
 100879a:	lea    rax,[r11+rdi*1]
 100879e:	add    rcx,rcx
 10087a1:	mov    rdx,QWORD PTR [r8+rcx*8+0x8]
 10087a6:	add    rdx,QWORD PTR [r8+rcx*8]
 10087aa:	cmp    rdx,rax
 10087ad:	jb     0x10087b4
 10087af:	mov    ebx,0x1
 10087b4:	mov    rdi,QWORD PTR [rsp+0x10]
 10087b9:	movzx  eax,bl
 10087bc:	mov    rbx,QWORD PTR [rsp+0x8]
 10087c1:	ret    
 10087c2:	int3   
 10087c3:	int3   
 10087c4:	int3   
 10087c5:	int3   
 10087c6:	int3   
 10087c7:	int3   
 10087c8:	int3   
 10087c9:	int3   
 10087ca:	int3   
 10087cb:	int3   
 10087cc:	int3   
 10087cd:	int3   
 10087ce:	int3   
 10087cf:	int3   
 10087d0:	mov    eax,DWORD PTR [rcx]
 10087d2:	sub    eax,DWORD PTR [rdx]
 10087d4:	ret    
 10087d5:	int3   
 10087d6:	int3   
 10087d7:	int3   
 10087d8:	int3   
 10087d9:	int3   
 10087da:	int3   
 10087db:	int3   
 10087dc:	int3   
 10087dd:	int3   
 10087de:	int3   
 10087df:	int3   
 10087e0:	rex push rbx
 10087e2:	sub    rsp,0x20
 10087e6:	mov    rbx,rcx
 10087e9:	mov    rcx,QWORD PTR [rcx+0x8]
 10087ed:	test   rcx,rcx
 10087f0:	je     0x10087f8
 10087f2:	call   QWORD PTR [rip+0xffffffffffff88e0]        # 0x10010d8
 10087f8:	mov    rdx,QWORD PTR [rbx+0x10]
 10087fc:	test   rdx,rdx
 10087ff:	je     0x1008838
 1008801:	mov    rcx,QWORD PTR [rbx]
 1008804:	mov    r9d,0x8000
 100880a:	xor    r8d,r8d
 100880d:	call   QWORD PTR [rip+0xffffffffffff8a5d]        # 0x1001270
 1008813:	test   eax,eax
 1008815:	jne    0x1008838
 1008817:	call   QWORD PTR [rip+0xffffffffffff8a03]        # 0x1001220
 100881d:	lea    r8,[rip+0xffffffffffff90ac]        # 0x10018d0
 1008824:	lea    rcx,[rip+0xea25]        # 0x1017250
 100882b:	mov    r9d,eax
 100882e:	mov    edx,0x1
 1008833:	call   0x1007f00
 1008838:	add    rsp,0x20
 100883c:	pop    rbx
 100883d:	ret    
 100883e:	int3   
 100883f:	int3   
 1008840:	int3   
 1008841:	int3   
 1008842:	int3   
 1008843:	int3   
 1008844:	int3   
 1008845:	int3   
 1008846:	int3   
 1008847:	int3   
 1008848:	int3   
 1008849:	int3   
 100884a:	int3   
 100884b:	int3   
 100884c:	int3   
 100884d:	int3   
 100884e:	int3   
 100884f:	int3   
 1008850:	mov    QWORD PTR [rsp+0x18],rbx
 1008855:	mov    QWORD PTR [rsp+0x20],rbp
 100885a:	push   rsi
 100885b:	push   rdi
 100885c:	push   r14
 100885e:	sub    rsp,0x50
 1008862:	mov    rax,r8
 1008865:	mov    rbp,rdx
 1008868:	mov    QWORD PTR [rcx],rdx
 100886b:	mov    rbx,rcx
 100886e:	lea    r8,[rsp+0x40]
 1008873:	mov    rdx,rax
 1008876:	mov    rcx,rbp
 1008879:	mov    rdi,r9
 100887c:	call   0x1010990
 1008881:	mov    r14,rax
 1008884:	test   rax,rax
 1008887:	je     0x10089b0
 100888d:	mov    rdx,rdi
 1008890:	mov    rcx,rax
 1008893:	call   QWORD PTR [rip+0xffffffffffff89ff]        # 0x1001298
 1008899:	mov    rdi,rax
 100889c:	test   rax,rax
 100889f:	je     0x100898f
 10088a5:	sub    rdi,QWORD PTR [rsp+0x40]
 10088aa:	je     0x100898f
 10088b0:	mov    rsi,QWORD PTR [rsp+0x98]
 10088b8:	mov    r9d,0x3000
 10088be:	xor    edx,edx
 10088c0:	mov    rcx,rbp
 10088c3:	mov    r8,rsi
 10088c6:	mov    DWORD PTR [rsp+0x20],0x4
 10088ce:	call   QWORD PTR [rip+0xffffffffffff89a4]        # 0x1001278
 10088d4:	mov    QWORD PTR [rbx+0x10],rax
 10088d8:	test   rax,rax
 10088db:	jne    0x10088ef
 10088dd:	call   QWORD PTR [rip+0xffffffffffff893d]        # 0x1001220
 10088e3:	lea    r8,[rip+0xffffffffffffc9f6]        # 0x10052e0
 10088ea:	jmp    0x100899c
 10088ef:	mov    r8,QWORD PTR [rsp+0x90]
 10088f7:	lea    rcx,[rsp+0x78]
 10088fc:	mov    r9,rsi
 10088ff:	mov    QWORD PTR [rsp+0x20],rcx
 1008904:	mov    rdx,rax
 1008907:	mov    rcx,rbp
 100890a:	mov    QWORD PTR [rsp+0x78],0x0
 1008913:	call   QWORD PTR [rip+0xffffffffffff88f7]        # 0x1001210
 1008919:	test   eax,eax
 100891b:	je     0x1008980
 100891d:	cmp    QWORD PTR [rsp+0x78],rsi
 1008922:	jne    0x1008980
 1008924:	lea    rax,[rsp+0x70]
 1008929:	mov    r9,rdi
 100892c:	xor    r8d,r8d
 100892f:	mov    QWORD PTR [rsp+0x30],rax
 1008934:	mov    rax,QWORD PTR [rbx+0x10]
 1008938:	xor    edx,edx
 100893a:	mov    rcx,rbp
 100893d:	mov    DWORD PTR [rsp+0x28],0x0
 1008945:	mov    QWORD PTR [rsp+0x20],rax
 100894a:	call   QWORD PTR [rip+0xffffffffffff88f0]        # 0x1001240
 1008950:	mov    QWORD PTR [rbx+0x8],rax
 1008954:	test   rax,rax
 1008957:	jne    0x1008968
 1008959:	call   QWORD PTR [rip+0xffffffffffff88c1]        # 0x1001220
 100895f:	lea    r8,[rip+0xffffffffffffca1a]        # 0x1005380
 1008966:	jmp    0x100899c
 1008968:	mov    rcx,r14
 100896b:	mov    QWORD PTR [rbx+0x10],0x0
 1008973:	call   QWORD PTR [rip+0xffffffffffff8947]        # 0x10012c0
 1008979:	mov    eax,0x1
 100897e:	jmp    0x10089ba
 1008980:	call   QWORD PTR [rip+0xffffffffffff889a]        # 0x1001220
 1008986:	lea    r8,[rip+0xffffffffffffc9a3]        # 0x1005330
 100898d:	jmp    0x100899c
 100898f:	call   QWORD PTR [rip+0xffffffffffff888b]        # 0x1001220
 1008995:	lea    r8,[rip+0xffffffffffffc8d4]        # 0x1005270
 100899c:	lea    rcx,[rip+0xe8ad]        # 0x1017250
 10089a3:	mov    r9d,eax
 10089a6:	mov    edx,0x1
 10089ab:	call   0x1007f00
 10089b0:	mov    rcx,rbx
 10089b3:	call   0x10087e0
 10089b8:	xor    eax,eax
 10089ba:	lea    r11,[rsp+0x50]
 10089bf:	mov    rbx,QWORD PTR [r11+0x30]
 10089c3:	mov    rbp,QWORD PTR [r11+0x38]
 10089c7:	mov    rsp,r11
 10089ca:	pop    r14
 10089cc:	pop    rdi
 10089cd:	pop    rsi
 10089ce:	ret    
 10089cf:	int3   
 10089d0:	int3   
 10089d1:	int3   
 10089d2:	int3   
 10089d3:	int3   
 10089d4:	int3   
 10089d5:	int3   
 10089d6:	int3   
 10089d7:	int3   
 10089d8:	int3   
 10089d9:	int3   
 10089da:	int3   
 10089db:	int3   
 10089dc:	int3   
 10089dd:	int3   
 10089de:	int3   
 10089df:	int3   
 10089e0:	rex push rsi
 10089e2:	push   r14
 10089e4:	sub    rsp,0x48
 10089e8:	mov    QWORD PTR [rsp+0x60],rbx
 10089ed:	mov    QWORD PTR [rsp+0x40],rdi
 10089f2:	mov    QWORD PTR [rsp+0x38],r12
 10089f7:	mov    QWORD PTR [rsp+0x30],r15
 10089fc:	xor    r15d,r15d
 10089ff:	xor    edi,edi
 1008a01:	xor    ebx,ebx
 1008a03:	mov    r12d,edx
 1008a06:	mov    rsi,rcx
 1008a09:	lea    r14d,[r15+0x1]
 1008a0d:	test   edx,edx
 1008a0f:	je     0x1008a49
 1008a11:	mov    QWORD PTR [rsp+0x70],rbp
 1008a16:	test   ebx,ebx
 1008a18:	jne    0x1008a44
 1008a1a:	mov    rcx,QWORD PTR [rsi+0x8]
 1008a1e:	lea    edx,[rbx+0x64]
 1008a21:	call   QWORD PTR [rip+0xffffffffffff8671]        # 0x1001098
 1008a27:	test   eax,eax
 1008a29:	je     0x1008a35
 1008a2b:	cmp    eax,0x102
 1008a30:	je     0x1008aa4
 1008a32:	xor    r14d,r14d
 1008a35:	mov    ebx,0x1
 1008a3a:	mov    eax,r15d
 1008a3d:	sub    eax,edi
 1008a3f:	cmp    eax,r12d
 1008a42:	jb     0x1008a16
 1008a44:	mov    rbp,QWORD PTR [rsp+0x70]
 1008a49:	mov    rcx,QWORD PTR [rsi+0x8]
 1008a4d:	lea    rdx,[rsp+0x68]
 1008a52:	mov    DWORD PTR [rsp+0x68],0x0
 1008a5a:	call   QWORD PTR [rip+0xffffffffffff87c8]        # 0x1001228
 1008a60:	mov    r12,QWORD PTR [rsp+0x38]
 1008a65:	mov    rbx,QWORD PTR [rsp+0x60]
 1008a6a:	test   r14d,r14d
 1008a6d:	je     0x1008aff
 1008a73:	test   eax,eax
 1008a75:	je     0x1008aff
 1008a7b:	mov    eax,DWORD PTR [rsp+0x68]
 1008a7f:	lea    r8,[rip+0xffffffffffffc69a]        # 0x1005120
 1008a86:	lea    rcx,[rip+0xe7c3]        # 0x1017250
 1008a8d:	mov    DWORD PTR [rsp+0x28],eax
 1008a91:	mov    r9d,r15d
 1008a94:	mov    edx,0x2
 1008a99:	mov    DWORD PTR [rsp+0x20],edi
 1008a9d:	call   0x1007f00
 1008aa2:	jmp    0x1008b1e
 1008aa4:	mov    rcx,QWORD PTR [rsi+0x8]
 1008aa8:	add    r15d,0x64
 1008aac:	call   QWORD PTR [rip+0xffffffffffff8756]        # 0x1001208
 1008ab2:	mov    ebp,eax
 1008ab4:	cmp    eax,0xffffffff
 1008ab7:	je     0x1008a3a
 1008ab9:	mov    rcx,QWORD PTR [rsi+0x8]
 1008abd:	call   QWORD PTR [rip+0xffffffffffff8735]        # 0x10011f8
 1008ac3:	cmp    eax,0xffffffff
 1008ac6:	jne    0x1008aee
 1008ac8:	mov    ebx,0x1
 1008acd:	xor    r14d,r14d
 1008ad0:	call   QWORD PTR [rip+0xffffffffffff874a]        # 0x1001220
 1008ad6:	lea    r8,[rip+0xffffffffffffc5f3]        # 0x10050d0
 1008add:	lea    rcx,[rip+0xe76c]        # 0x1017250
 1008ae4:	mov    edx,ebx
 1008ae6:	mov    r9d,eax
 1008ae9:	call   0x1007f00
 1008aee:	cmp    ebp,0x2
 1008af1:	jbe    0x1008a3a
 1008af7:	add    edi,0x64
 1008afa:	jmp    0x1008a3a
 1008aff:	lea    r8,[rip+0xffffffffffffc6ca]        # 0x10051d0
 1008b06:	lea    rcx,[rip+0xe743]        # 0x1017250
 1008b0d:	mov    r9d,r15d
 1008b10:	mov    edx,0x1
 1008b15:	mov    DWORD PTR [rsp+0x20],edi
 1008b19:	call   0x1007f00
 1008b1e:	mov    rcx,QWORD PTR [rsi+0x8]
 1008b22:	mov    r15,QWORD PTR [rsp+0x30]
 1008b27:	mov    rdi,QWORD PTR [rsp+0x40]
 1008b2c:	test   rcx,rcx
 1008b2f:	je     0x1008b37
 1008b31:	call   QWORD PTR [rip+0xffffffffffff85a1]        # 0x10010d8
 1008b37:	mov    rdx,QWORD PTR [rsi+0x10]
 1008b3b:	test   rdx,rdx
 1008b3e:	je     0x1008b77
 1008b40:	mov    rcx,QWORD PTR [rsi]
 1008b43:	mov    r9d,0x8000
 1008b49:	xor    r8d,r8d
 1008b4c:	call   QWORD PTR [rip+0xffffffffffff871e]        # 0x1001270
 1008b52:	test   eax,eax
 1008b54:	jne    0x1008b77
 1008b56:	call   QWORD PTR [rip+0xffffffffffff86c4]        # 0x1001220
 1008b5c:	lea    r8,[rip+0xffffffffffff8d6d]        # 0x10018d0
 1008b63:	lea    rcx,[rip+0xe6e6]        # 0x1017250
 1008b6a:	mov    r9d,eax
 1008b6d:	mov    edx,0x1
 1008b72:	call   0x1007f00
 1008b77:	mov    eax,r14d
 1008b7a:	add    rsp,0x48
 1008b7e:	pop    r14
 1008b80:	pop    rsi
 1008b81:	ret    
 1008b82:	int3   
 1008b83:	int3   
 1008b84:	int3   
 1008b85:	int3   
 1008b86:	int3   
 1008b87:	int3   
 1008b88:	int3   
 1008b89:	int3   
 1008b8a:	int3   
 1008b8b:	int3   
 1008b8c:	int3   
 1008b8d:	int3   
 1008b8e:	int3   
 1008b8f:	int3   
 1008b90:	mov    QWORD PTR [rsp+0x8],rbx
 1008b95:	push   rdi
 1008b96:	sub    rsp,0x20
 1008b9a:	mov    QWORD PTR [rcx+0x8],0xffffffffffffffff
 1008ba2:	xor    eax,eax
 1008ba4:	xor    ebx,ebx
 1008ba6:	mov    DWORD PTR [rcx],ebx
 1008ba8:	mov    QWORD PTR [rcx+0x10],rax
 1008bac:	mov    QWORD PTR [rcx+0x18],rax
 1008bb0:	mov    QWORD PTR [rcx+0x20],rax
 1008bb4:	mov    QWORD PTR [rcx+0x28],rax
 1008bb8:	mov    QWORD PTR [rcx+0x30],rax
 1008bbc:	mov    QWORD PTR [rcx+0x38],rax
 1008bc0:	mov    rdi,rcx
 1008bc3:	mov    QWORD PTR [rcx+0x660],0xffffffffffffffff
 1008bce:	mov    QWORD PTR [rcx+0x668],rbx
 1008bd5:	mov    DWORD PTR [rcx+0x670],ebx
 1008bdb:	add    rcx,0x678
 1008be2:	call   0x1007710
 1008be7:	mov    QWORD PTR [rdi+0x19c0],rbx
 1008bee:	mov    QWORD PTR [rdi+0x19c8],rbx
 1008bf5:	mov    DWORD PTR [rdi+0x19d0],ebx
 1008bfb:	mov    QWORD PTR [rdi+0x19d8],rbx
 1008c02:	mov    QWORD PTR [rdi+0x19e0],rbx
 1008c09:	mov    QWORD PTR [rdi+0x19e8],rbx
 1008c10:	mov    QWORD PTR [rdi+0x19f0],rbx
 1008c17:	mov    QWORD PTR [rdi+0x19f8],rbx
 1008c1e:	mov    QWORD PTR [rdi+0x1a00],rbx
 1008c25:	mov    QWORD PTR [rdi+0x71c0],rbx
 1008c2c:	mov    QWORD PTR [rdi+0x71c8],rbx
 1008c33:	mov    QWORD PTR [rdi+0x73d8],rbx
 1008c3a:	mov    DWORD PTR [rdi+0x73e0],ebx
 1008c40:	mov    QWORD PTR [rdi+0x73e8],rbx
 1008c47:	mov    QWORD PTR [rdi+0x75f8],rbx
 1008c4e:	mov    QWORD PTR [rdi+0x7808],rbx
 1008c55:	mov    QWORD PTR [rdi+0x7810],rbx
 1008c5c:	mov    QWORD PTR [rdi+0x7818],rbx
 1008c63:	mov    QWORD PTR [rdi+0x7820],rbx
 1008c6a:	mov    QWORD PTR [rdi+0x7828],rbx
 1008c71:	mov    QWORD PTR [rdi+0x7830],rbx
 1008c78:	mov    QWORD PTR [rdi+0x7838],rbx
 1008c7f:	mov    QWORD PTR [rdi+0x7840],rbx
 1008c86:	mov    QWORD PTR [rdi+0x7848],rbx
 1008c8d:	mov    QWORD PTR [rdi+0x7850],rbx
 1008c94:	mov    QWORD PTR [rdi+0x7858],rbx
 1008c9b:	mov    QWORD PTR [rdi+0x78f0],rbx
 1008ca2:	mov    DWORD PTR [rdi+0x78f8],0x2000
 1008cac:	mov    QWORD PTR [rdi+0x7900],rbx
 1008cb3:	mov    QWORD PTR [rdi+0x7908],rbx
 1008cba:	mov    DWORD PTR [rdi+0x7910],ebx
 1008cc0:	lea    rcx,[rdi+0x22350]
 1008cc7:	xor    edx,edx
 1008cc9:	mov    r8d,0x230
 1008ccf:	mov    QWORD PTR [rdi+0x19918],rbx
 1008cd6:	mov    DWORD PTR [rdi+0x19920],ebx
 1008cdc:	mov    DWORD PTR [rdi+0x1a330],ebx
 1008ce2:	mov    QWORD PTR [rdi+0x22338],rbx
 1008ce9:	mov    QWORD PTR [rdi+0x22340],rbx
 1008cf0:	mov    DWORD PTR [rdi+0x22348],ebx
 1008cf6:	call   0x1011452
 1008cfb:	mov    DWORD PTR [rdi+0x22580],0xffffffff
 1008d05:	mov    DWORD PTR [rdi+0x22584],ebx
 1008d0b:	mov    QWORD PTR [rdi+0x22588],rbx
 1008d12:	mov    DWORD PTR [rdi+0x22590],ebx
 1008d18:	mov    QWORD PTR [rdi+0x22598],rbx
 1008d1f:	mov    QWORD PTR [rdi+0x225a0],rbx
 1008d26:	mov    QWORD PTR [rdi+0x225a8],rbx
 1008d2d:	xor    eax,eax
 1008d2f:	mov    QWORD PTR [rdi+0x225b0],rbx
 1008d36:	mov    QWORD PTR [rdi+0x225b8],rbx
 1008d3d:	mov    QWORD PTR [rdi+0x10],rax
 1008d41:	mov    QWORD PTR [rdi+0x18],rax
 1008d45:	mov    QWORD PTR [rdi+0x20],rax
 1008d49:	mov    QWORD PTR [rdi+0x28],rax
 1008d4d:	mov    QWORD PTR [rdi+0x30],rax
 1008d51:	lea    rcx,[rdi+0x24a]
 1008d58:	xor    edx,edx
 1008d5a:	mov    r8d,0x20a
 1008d60:	mov    QWORD PTR [rdi+0x38],rax
 1008d64:	call   0x1011452
 1008d69:	lea    rcx,[rdi+0x454]
 1008d70:	xor    edx,edx
 1008d72:	mov    r8d,0x20a
 1008d78:	call   0x1011452
 1008d7d:	lea    rcx,[rdi+0x2230]
 1008d84:	xor    edx,edx
 1008d86:	mov    r8d,0x4d0
 1008d8c:	call   0x1011452
 1008d91:	lea    rcx,[rdi+0x2700]
 1008d98:	xor    edx,edx
 1008d9a:	mov    r8d,0x98
 1008da0:	call   0x1011452
 1008da5:	lea    rcx,[rdi+0x2798]
 1008dac:	xor    edx,edx
 1008dae:	mov    r8d,0x208
 1008db4:	call   0x1011452
 1008db9:	lea    rcx,[rdi+0x29a0]
 1008dc0:	xor    edx,edx
 1008dc2:	mov    r8d,0x2000
 1008dc8:	call   0x1011452
 1008dcd:	lea    rcx,[rdi+0x49a0]
 1008dd4:	xor    edx,edx
 1008dd6:	mov    r8d,0x2000
 1008ddc:	call   0x1011452
 1008de1:	lea    rcx,[rdi+0x69a0]
 1008de8:	xor    edx,edx
 1008dea:	mov    r8d,0x208
 1008df0:	call   0x1011452
 1008df5:	lea    rcx,[rdi+0x6fb8]
 1008dfc:	xor    edx,edx
 1008dfe:	mov    r8d,0x208
 1008e04:	call   0x1011452
 1008e09:	lea    rcx,[rdi+0x71d0]
 1008e10:	xor    edx,edx
 1008e12:	mov    r8d,0x208
 1008e18:	call   0x1011452
 1008e1d:	lea    rcx,[rdi+0x73f0]
 1008e24:	xor    edx,edx
 1008e26:	mov    r8d,0x208
 1008e2c:	call   0x1011452
 1008e31:	lea    rcx,[rdi+0x7600]
 1008e38:	xor    edx,edx
 1008e3a:	mov    r8d,0x208
 1008e40:	call   0x1011452
 1008e45:	lea    rcx,[rdi+0x19924]
 1008e4c:	xor    edx,edx
 1008e4e:	mov    r8d,0x800
 1008e54:	call   0x1011452
 1008e59:	mov    WORD PTR [rdi+0x1a124],bx
 1008e60:	mov    WORD PTR [rdi+0x1a32c],bx
 1008e67:	mov    r8,QWORD PTR [rip+0xe2f2]        # 0x1017160
 1008e6e:	mov    edx,0x105
 1008e73:	lea    rcx,[rdi+0x40]
 1008e77:	nop    WORD PTR [rax+rax*1+0x0]
 1008e80:	lea    rax,[rdx+0x7ffffef9]
 1008e87:	test   rax,rax
 1008e8a:	je     0x1008ea7
 1008e8c:	movzx  eax,WORD PTR [r8]
 1008e90:	test   ax,ax
 1008e93:	je     0x1008ea7
 1008e95:	mov    WORD PTR [rcx],ax
 1008e98:	add    rcx,0x2
 1008e9c:	add    r8,0x2
 1008ea0:	dec    rdx
 1008ea3:	jne    0x1008e80
 1008ea5:	jmp    0x1008eac
 1008ea7:	test   rdx,rdx
 1008eaa:	jne    0x1008eb0
 1008eac:	sub    rcx,0x2
 1008eb0:	mov    WORD PTR [rcx],bx
 1008eb3:	or     DWORD PTR [rdi+0x668],0x800
 1008ebd:	mov    eax,DWORD PTR [rdi+0x668]
 1008ec3:	lea    rdx,[rip+0xffffffffffff88f6]        # 0x10017c0
 1008eca:	nop    WORD PTR [rax+rax*1+0x0]
 1008ed0:	mov    ecx,DWORD PTR [rbx+rdx*1]
 1008ed3:	test   eax,ecx
 1008ed5:	je     0x1008ef5
 1008ed7:	not    ecx
 1008ed9:	and    eax,ecx
 1008edb:	mov    DWORD PTR [rdi+0x668],eax
 1008ee1:	or     eax,DWORD PTR [rbx+rdx*1+0x4]
 1008ee5:	mov    DWORD PTR [rdi+0x668],eax
 1008eeb:	mov    ecx,DWORD PTR [rbx+rdx*1+0x8]
 1008eef:	or     DWORD PTR [rdi+0x66c],ecx
 1008ef5:	add    rbx,0xc
 1008ef9:	cmp    rbx,0x3c
 1008efd:	jb     0x1008ed0
 1008eff:	mov    rax,rdi
 1008f02:	mov    rbx,QWORD PTR [rsp+0x30]
 1008f07:	add    rsp,0x20
 1008f0b:	pop    rdi
 1008f0c:	ret    
 1008f0d:	int3   
 1008f0e:	int3   
 1008f0f:	int3   
 1008f10:	int3   
 1008f11:	int3   
 1008f12:	int3   
 1008f13:	int3   
 1008f14:	int3   
 1008f15:	int3   
 1008f16:	int3   
 1008f17:	int3   
 1008f18:	int3   
 1008f19:	int3   
 1008f1a:	int3   
 1008f1b:	int3   
 1008f1c:	int3   
 1008f1d:	int3   
 1008f1e:	int3   
 1008f1f:	int3   
 1008f20:	mov    QWORD PTR [rsp+0x8],rbx
 1008f25:	mov    QWORD PTR [rsp+0x10],rsi
 1008f2a:	push   rdi
 1008f2b:	sub    rsp,0x30
 1008f2f:	xor    esi,esi
 1008f31:	cmp    DWORD PTR [rcx],0x3
 1008f34:	mov    rbx,rcx
 1008f37:	mov    edi,esi
 1008f39:	jne    0x1008ff7
 1008f3f:	test   BYTE PTR [rcx+0x668],0x2
 1008f46:	jne    0x1008ff7
 1008f4c:	nop    DWORD PTR [rax+0x0]
 1008f50:	mov    rcx,rbx
 1008f53:	mov    DWORD PTR [rbx+0x22340],esi
 1008f59:	mov    QWORD PTR [rbx+0x22338],rsi
 1008f60:	call   0x100bd30
 1008f65:	cmp    DWORD PTR [rbx+0x22340],esi
 1008f6b:	je     0x1008ff7
 1008f71:	cmp    DWORD PTR [rbx],0x5
 1008f74:	jne    0x1008fb6
 1008f76:	mov    rcx,QWORD PTR [rbx+0x660]
 1008f7d:	cmp    rcx,0xffffffffffffffff
 1008f81:	je     0x1008fa6
 1008f83:	call   QWORD PTR [rip+0xffffffffffff814f]        # 0x10010d8
 1008f89:	cmp    DWORD PTR [rbx],0x5
 1008f8c:	mov    QWORD PTR [rbx+0x660],0xffffffffffffffff
 1008f97:	jae    0x1008fa6
 1008f99:	lea    rcx,[rbx+0x24a]
 1008fa0:	call   QWORD PTR [rip+0xffffffffffff818a]        # 0x1001130
 1008fa6:	inc    edi
 1008fa8:	mov    rcx,rbx
 1008fab:	mov    edx,edi
 1008fad:	call   0x1009360
 1008fb2:	test   eax,eax
 1008fb4:	je     0x1008fce
 1008fb6:	cmp    DWORD PTR [rbx+0x22340],esi
 1008fbc:	jne    0x1008f50
 1008fbe:	mov    rbx,QWORD PTR [rsp+0x40]
 1008fc3:	mov    rsi,QWORD PTR [rsp+0x48]
 1008fc8:	add    rsp,0x30
 1008fcc:	pop    rdi
 1008fcd:	ret    
 1008fce:	lea    r9,[rbx+0x454]
 1008fd5:	lea    r8,[rip+0xffffffffffffaeb4]        # 0x1003e90
 1008fdc:	lea    rcx,[rip+0xe26d]        # 0x1017250
 1008fe3:	mov    edx,0x1
 1008fe8:	mov    DWORD PTR [rsp+0x20],edi
 1008fec:	call   0x1007f00
 1008ff1:	mov    DWORD PTR [rbx+0x22340],esi
 1008ff7:	mov    rbx,QWORD PTR [rsp+0x40]
 1008ffc:	mov    rsi,QWORD PTR [rsp+0x48]
 1009001:	add    rsp,0x30
 1009005:	pop    rdi
 1009006:	ret    
 1009007:	int3   
 1009008:	int3   
 1009009:	int3   
 100900a:	int3   
 100900b:	int3   
 100900c:	int3   
 100900d:	int3   
 100900e:	int3   
 100900f:	int3   
 1009010:	rex push rbx
 1009012:	sub    rsp,0x20
 1009016:	cmp    DWORD PTR [rcx],0x3
 1009019:	mov    rbx,rcx
 100901c:	jb     0x10091e8
 1009022:	mov    QWORD PTR [rsp+0x30],rsi
 1009027:	mov    QWORD PTR [rsp+0x38],rdi
 100902c:	lea    rdi,[rcx+0x73f0]
 1009033:	cmp    WORD PTR [rdi],0x0
 1009037:	jne    0x100906f
 1009039:	mov    rdx,QWORD PTR [rcx+0x6b8]
 1009040:	call   0x1009530
 1009045:	cmp    WORD PTR [rdi],0x0
 1009049:	jne    0x100906f
 100904b:	lea    rdx,[rbx+0x6fb8]
 1009052:	mov    rcx,rbx
 1009055:	call   0x1009530
 100905a:	cmp    WORD PTR [rdi],0x0
 100905e:	jne    0x100906f
 1009060:	mov    rdx,QWORD PTR [rip+0xe109]        # 0x1017170
 1009067:	mov    rcx,rbx
 100906a:	call   0x1009530
 100906f:	xor    esi,esi
 1009071:	test   rdi,rdi
 1009074:	je     0x10090bf
 1009076:	lea    rcx,[rip+0xe3db]        # 0x1017458
 100907d:	mov    edx,0x104
 1009082:	sub    rdi,rcx
 1009085:	data16 data16 nop WORD PTR [rax+rax*1+0x0]
 1009090:	lea    rax,[rdx+0x7ffffefa]
 1009097:	test   rax,rax
 100909a:	je     0x10090b3
 100909c:	movzx  eax,WORD PTR [rdi+rcx*1]
 10090a0:	test   ax,ax
 10090a3:	je     0x10090b3
 10090a5:	mov    WORD PTR [rcx],ax
 10090a8:	add    rcx,0x2
 10090ac:	dec    rdx
 10090af:	jne    0x1009090
 10090b1:	jmp    0x10090b8
 10090b3:	test   rdx,rdx
 10090b6:	jne    0x10090bc
 10090b8:	sub    rcx,0x2
 10090bc:	mov    WORD PTR [rcx],si
 10090bf:	mov    rdi,QWORD PTR [rsp+0x38]
 10090c4:	cmp    DWORD PTR [rbx+0x75f8],esi
 10090ca:	jne    0x100915e
 10090d0:	cmp    DWORD PTR [rbx+0x75fc],esi
 10090d6:	jne    0x100911f
 10090d8:	mov    eax,DWORD PTR [rbx+0x678]
 10090de:	test   eax,eax
 10090e0:	jne    0x10090ee
 10090e2:	movzx  edx,WORD PTR [rbx+0x67c]
 10090e9:	shl    edx,0x10
 10090ec:	jmp    0x10090f4
 10090ee:	mov    edx,DWORD PTR [rbx+0x6ec]
 10090f4:	test   eax,eax
 10090f6:	jne    0x100910d
 10090f8:	movzx  ecx,BYTE PTR [rbx+0x67f]
 10090ff:	movzx  eax,BYTE PTR [rbx+0x67e]
 1009106:	shl    ecx,0x10
 1009109:	or     ecx,eax
 100910b:	jmp    0x1009113
 100910d:	mov    ecx,DWORD PTR [rbx+0x6e8]
 1009113:	mov    DWORD PTR [rbx+0x75f8],ecx
 1009119:	mov    DWORD PTR [rbx+0x75fc],edx
 100911f:	cmp    DWORD PTR [rbx+0x75f8],esi
 1009125:	jne    0x100915e
 1009127:	cmp    DWORD PTR [rbx+0x75fc],esi
 100912d:	jne    0x1009147
 100912f:	mov    eax,DWORD PTR [rbx+0x71c0]
 1009135:	mov    DWORD PTR [rbx+0x75f8],eax
 100913b:	mov    eax,DWORD PTR [rbx+0x71c4]
 1009141:	mov    DWORD PTR [rbx+0x75fc],eax
 1009147:	cmp    DWORD PTR [rbx+0x75f8],esi
 100914d:	jne    0x100915e
 100914f:	cmp    DWORD PTR [rbx+0x75fc],esi
 1009155:	jne    0x100915e
 1009157:	mov    QWORD PTR [rbx+0x75f8],rsi
 100915e:	cmp    WORD PTR [rbx+0x7600],si
 1009165:	jne    0x100918e
 1009167:	lea    rdx,[rbx+0x71d0]
 100916e:	mov    rcx,rbx
 1009171:	call   0x1009610
 1009176:	cmp    WORD PTR [rbx+0x7600],si
 100917d:	jne    0x100918e
 100917f:	mov    rdx,QWORD PTR [rip+0xdff2]        # 0x1017178
 1009186:	mov    rcx,rbx
 1009189:	call   0x1009610
 100918e:	cmp    DWORD PTR [rbx+0x7808],esi
 1009194:	jne    0x10091cd
 1009196:	cmp    DWORD PTR [rbx+0x780c],esi
 100919c:	jne    0x10091b6
 100919e:	mov    eax,DWORD PTR [rbx+0x73d8]
 10091a4:	mov    DWORD PTR [rbx+0x7808],eax
 10091aa:	mov    eax,DWORD PTR [rbx+0x73dc]
 10091b0:	mov    DWORD PTR [rbx+0x780c],eax
 10091b6:	cmp    DWORD PTR [rbx+0x7808],esi
 10091bc:	jne    0x10091cd
 10091be:	cmp    DWORD PTR [rbx+0x780c],esi
 10091c4:	jne    0x10091cd
 10091c6:	mov    QWORD PTR [rbx+0x7808],rsi
 10091cd:	mov    r8d,DWORD PTR [rbx+0x700]
 10091d4:	mov    rdx,QWORD PTR [rbx+0x6f8]
 10091db:	mov    rcx,rbx
 10091de:	call   0x10098a0
 10091e3:	mov    rsi,QWORD PTR [rsp+0x30]
 10091e8:	add    rsp,0x20
 10091ec:	pop    rbx
 10091ed:	ret    
 10091ee:	int3   
 10091ef:	int3   
 10091f0:	int3   
 10091f1:	int3   
 10091f2:	int3   
 10091f3:	int3   
 10091f4:	int3   
 10091f5:	int3   
 10091f6:	int3   
 10091f7:	int3   
 10091f8:	int3   
 10091f9:	int3   
 10091fa:	int3   
 10091fb:	int3   
 10091fc:	int3   
 10091fd:	int3   
 10091fe:	int3   
 10091ff:	int3   
 1009200:	mov    QWORD PTR [rsp+0x10],rbx
 1009205:	push   rdi
 1009206:	sub    rsp,0x170
 100920d:	mov    rax,QWORD PTR [rip+0xdf8c]        # 0x10171a0
 1009214:	xor    rax,rsp
 1009217:	mov    QWORD PTR [rsp+0x160],rax
 100921f:	mov    eax,DWORD PTR [rcx+0x668]
 1009225:	mov    rbx,rcx
 1009228:	bt     eax,0xa
 100922c:	jae    0x1009332
 1009232:	bt     eax,0xe
 1009236:	jb     0x1009298
 1009238:	mov    rcx,QWORD PTR [rcx+0x6c0]
 100923f:	test   rcx,rcx
 1009242:	je     0x10092a2
 1009244:	lea    rdx,[rip+0xffffffffffff8555]        # 0x10017a0
 100924b:	call   QWORD PTR [rip+0xffffffffffff81ef]        # 0x1001440
 1009251:	test   eax,eax
 1009253:	jne    0x10092a2
 1009255:	lea    rcx,[rsp+0x44]
 100925a:	xor    edx,edx
 100925c:	mov    r8d,0x118
 1009262:	mov    DWORD PTR [rsp+0x40],0x11c
 100926a:	call   0x1011452
 100926f:	lea    rcx,[rsp+0x40]
 1009274:	call   QWORD PTR [rip+0xffffffffffff7ed6]        # 0x1001150
 100927a:	test   eax,eax
 100927c:	je     0x1009332
 1009282:	cmp    DWORD PTR [rsp+0x50],0x2
 1009287:	jne    0x1009332
 100928d:	cmp    DWORD PTR [rsp+0x44],0x6
 1009292:	jb     0x1009332
 1009298:	mov    eax,0x1
 100929d:	jmp    0x1009334
 10092a2:	mov    r8d,DWORD PTR [rbx+0x668]
 10092a9:	mov    rdx,QWORD PTR [rbx+0x6c8]
 10092b0:	mov    rcx,QWORD PTR [rbx+0x6c0]
 10092b7:	call   0x1010020
 10092bc:	mov    rdi,rax
 10092bf:	test   rax,rax
 10092c2:	je     0x1009332
 10092c4:	lea    rax,[rsp+0x30]
 10092c9:	xor    ebx,ebx
 10092cb:	lea    r9,[rsp+0x38]
 10092d0:	mov    QWORD PTR [rsp+0x28],rax
 10092d5:	lea    rax,[rsp+0x34]
 10092da:	lea    rdx,[rip+0xffffffffffffada7]        # 0x1004088
 10092e1:	xor    r8d,r8d
 10092e4:	mov    rcx,rdi
 10092e7:	mov    DWORD PTR [rsp+0x34],ebx
 10092eb:	mov    QWORD PTR [rsp+0x20],rax
 10092f0:	mov    DWORD PTR [rsp+0x30],0x4
 10092f8:	mov    DWORD PTR [rsp+0x38],ebx
 10092fc:	call   QWORD PTR [rip+0xffffffffffff7d26]        # 0x1001028
 1009302:	test   eax,eax
 1009304:	setne  bl
 1009307:	test   eax,eax
 1009309:	jne    0x1009325
 100930b:	cmp    DWORD PTR [rsp+0x38],0x4
 1009310:	jne    0x1009325
 1009312:	cmp    DWORD PTR [rsp+0x30],0x4
 1009317:	jne    0x1009325
 1009319:	mov    eax,0x1
 100931e:	cmp    DWORD PTR [rsp+0x34],eax
 1009322:	cmove  ebx,eax
 1009325:	mov    rcx,rdi
 1009328:	call   QWORD PTR [rip+0xffffffffffff7cea]        # 0x1001018
 100932e:	mov    eax,ebx
 1009330:	jmp    0x1009334
 1009332:	xor    eax,eax
 1009334:	mov    rcx,QWORD PTR [rsp+0x160]
 100933c:	xor    rcx,rsp
 100933f:	call   0x1011420
 1009344:	mov    rbx,QWORD PTR [rsp+0x188]
 100934c:	add    rsp,0x170
 1009353:	pop    rdi
 1009354:	ret    
 1009355:	int3   
 1009356:	int3   
 1009357:	int3   
 1009358:	int3   
 1009359:	int3   
 100935a:	int3   
 100935b:	int3   
 100935c:	int3   
 100935d:	int3   
 100935e:	int3   
 100935f:	int3   
 1009360:	mov    QWORD PTR [rsp+0x18],rbx
 1009365:	mov    QWORD PTR [rsp+0x20],rsi
 100936a:	push   rdi
 100936b:	sub    rsp,0x850
 1009372:	mov    rax,QWORD PTR [rip+0xde27]        # 0x10171a0
 1009379:	xor    rax,rsp
 100937c:	mov    QWORD PTR [rsp+0x840],rax
 1009384:	cmp    DWORD PTR [rcx],0x2
 1009387:	mov    esi,edx
 1009389:	mov    rbx,rcx
 100938c:	jb     0x10094d8
 1009392:	mov    edx,0x104
 1009397:	add    rcx,0x24a
 100939e:	call   QWORD PTR [rip+0xffffffffffff80b4]        # 0x1001458
 10093a4:	cmp    rax,0x102
 10093aa:	jae    0x10094d8
 10093b0:	lea    r9,[rbx+0x454]
 10093b7:	lea    r8,[rip+0xffffffffffffa79a]        # 0x1003b58
 10093be:	lea    rcx,[rbx+0x24a]
 10093c5:	mov    edx,0x104
 10093ca:	mov    DWORD PTR [rsp+0x20],esi
 10093ce:	call   0x1007600
 10093d3:	test   eax,eax
 10093d5:	js     0x10094b5
 10093db:	xor    r9d,r9d
 10093de:	mov    QWORD PTR [rsp+0x30],0x0
 10093e7:	lea    rcx,[rbx+0x24a]
 10093ee:	lea    r8d,[r9+0x3]
 10093f2:	mov    edx,0xc0000000
 10093f7:	mov    DWORD PTR [rsp+0x28],0x80
 10093ff:	mov    DWORD PTR [rsp+0x20],0x1
 1009407:	call   QWORD PTR [rip+0xffffffffffff7ebb]        # 0x10012c8
 100940d:	mov    QWORD PTR [rbx+0x660],rax
 1009414:	cmp    rax,0xffffffffffffffff
 1009418:	je     0x1009443
 100941a:	lea    r9,[rbx+0x24a]
 1009421:	lea    r8,[rip+0xffffffffffffa740]        # 0x1003b68
 1009428:	lea    rcx,[rip+0xde21]        # 0x1017250
 100942f:	mov    edx,0x2
 1009434:	call   0x1007f00
 1009439:	mov    eax,0x1
 100943e:	jmp    0x10094fc
 1009443:	call   QWORD PTR [rip+0xffffffffffff7dd7]        # 0x1001220
 1009449:	mov    QWORD PTR [rsp+0x30],0x0
 1009452:	mov    r9d,0x400
 1009458:	mov    ebx,eax
 100945a:	lea    rax,[rsp+0x40]
 100945f:	xor    edx,edx
 1009461:	mov    ecx,0x1000
 1009466:	mov    r8d,ebx
 1009469:	mov    DWORD PTR [rsp+0x28],0x400
 1009471:	mov    QWORD PTR [rsp+0x20],rax
 1009476:	call   QWORD PTR [rip+0xffffffffffff7c6c]        # 0x10010e8
 100947c:	mov    r9d,ebx
 100947f:	mov    edx,0x1
 1009484:	lea    rcx,[rip+0xddc5]        # 0x1017250
 100948b:	test   eax,eax
 100948d:	je     0x10094a7
 100948f:	lea    rax,[rsp+0x40]
 1009494:	lea    r8,[rip+0xffffffffffffa705]        # 0x1003ba0
 100949b:	mov    QWORD PTR [rsp+0x20],rax
 10094a0:	call   0x1007f00
 10094a5:	jmp    0x10094f0
 10094a7:	lea    r8,[rip+0xffffffffffffa742]        # 0x1003bf0
 10094ae:	call   0x1007f00
 10094b3:	jmp    0x10094f0
 10094b5:	call   QWORD PTR [rip+0xffffffffffff7d65]        # 0x1001220
 10094bb:	lea    r8,[rip+0xffffffffffffa77e]        # 0x1003c40
 10094c2:	lea    rcx,[rip+0xdd87]        # 0x1017250
 10094c9:	mov    r9d,eax
 10094cc:	mov    edx,0x1
 10094d1:	call   0x1007f00
 10094d6:	jmp    0x10094f0
 10094d8:	lea    r8,[rip+0xffffffffffffa7a9]        # 0x1003c88
 10094df:	lea    rcx,[rip+0xdd6a]        # 0x1017250
 10094e6:	mov    edx,0x1
 10094eb:	call   0x1007f00
 10094f0:	or     DWORD PTR [rip+0xdc06],0x20000002        # 0x1017100
 10094fa:	xor    eax,eax
 10094fc:	mov    rcx,QWORD PTR [rsp+0x840]
 1009504:	xor    rcx,rsp
 1009507:	call   0x1011420
 100950c:	lea    r11,[rsp+0x850]
 1009514:	mov    rbx,QWORD PTR [r11+0x20]
 1009518:	mov    rsi,QWORD PTR [r11+0x28]
 100951c:	mov    rsp,r11
 100951f:	pop    rdi
 1009520:	ret    
 1009521:	int3   
 1009522:	int3   
 1009523:	int3   
 1009524:	int3   
 1009525:	int3   
 1009526:	int3   
 1009527:	int3   
 1009528:	int3   
 1009529:	int3   
 100952a:	int3   
 100952b:	int3   
 100952c:	int3   
 100952d:	int3   
 100952e:	int3   
 100952f:	int3   
 1009530:	test   rdx,rdx
 1009533:	je     0x1009603
 1009539:	push   rbx
 100953a:	sub    rsp,0x8a0
 1009541:	mov    rax,QWORD PTR [rip+0xdc58]        # 0x10171a0
 1009548:	xor    rax,rsp
 100954b:	mov    QWORD PTR [rsp+0x890],rax
 1009553:	cmp    WORD PTR [rdx],0x0
 1009557:	mov    rax,rdx
 100955a:	mov    rbx,rcx
 100955d:	je     0x10095eb
 1009563:	mov    QWORD PTR [rsp+0x40],0x105
 100956c:	lea    rcx,[rsp+0x260]
 1009574:	lea    r9,[rsp+0x470]
 100957c:	mov    QWORD PTR [rsp+0x38],rcx
 1009581:	lea    rcx,[rsp+0x50]
 1009586:	mov    QWORD PTR [rsp+0x30],0x105
 100958f:	mov    QWORD PTR [rsp+0x28],rcx
 1009594:	lea    rdx,[rsp+0x680]
 100959c:	mov    r8d,0x105
 10095a2:	mov    rcx,rax
 10095a5:	mov    QWORD PTR [rsp+0x20],0x105
 10095ae:	call   QWORD PTR [rip+0xffffffffffff7e14]        # 0x10013c8
 10095b4:	lea    rax,[rsp+0x260]
 10095bc:	lea    r9,[rsp+0x50]
 10095c1:	lea    r8,[rip+0xffffffffffffaab0]        # 0x1004078
 10095c8:	lea    rcx,[rbx+0x73f0]
 10095cf:	mov    edx,0x104
 10095d4:	mov    QWORD PTR [rsp+0x20],rax
 10095d9:	call   0x1007600
 10095de:	test   eax,eax
 10095e0:	jns    0x10095eb
 10095e2:	xor    eax,eax
 10095e4:	mov    WORD PTR [rbx+0x73f0],ax
 10095eb:	mov    rcx,QWORD PTR [rsp+0x890]
 10095f3:	xor    rcx,rsp
 10095f6:	call   0x1011420
 10095fb:	add    rsp,0x8a0
 1009602:	pop    rbx
 1009603:	repz ret 
 1009605:	int3   
 1009606:	int3   
 1009607:	int3   
 1009608:	int3   
 1009609:	int3   
 100960a:	int3   
 100960b:	int3   
 100960c:	int3   
 100960d:	int3   
 100960e:	int3   
 100960f:	int3   
 1009610:	test   rdx,rdx
 1009613:	je     0x10096e3
 1009619:	push   rbx
 100961a:	sub    rsp,0x8a0
 1009621:	mov    rax,QWORD PTR [rip+0xdb78]        # 0x10171a0
 1009628:	xor    rax,rsp
 100962b:	mov    QWORD PTR [rsp+0x890],rax
 1009633:	cmp    WORD PTR [rdx],0x0
 1009637:	mov    rax,rdx
 100963a:	mov    rbx,rcx
 100963d:	je     0x10096cb
 1009643:	mov    QWORD PTR [rsp+0x40],0x105
 100964c:	lea    rcx,[rsp+0x260]
 1009654:	lea    r9,[rsp+0x470]
 100965c:	mov    QWORD PTR [rsp+0x38],rcx
 1009661:	lea    rcx,[rsp+0x50]
 1009666:	mov    QWORD PTR [rsp+0x30],0x105
 100966f:	mov    QWORD PTR [rsp+0x28],rcx
 1009674:	lea    rdx,[rsp+0x680]
 100967c:	mov    r8d,0x105
 1009682:	mov    rcx,rax
 1009685:	mov    QWORD PTR [rsp+0x20],0x105
 100968e:	call   QWORD PTR [rip+0xffffffffffff7d34]        # 0x10013c8
 1009694:	lea    rax,[rsp+0x260]
 100969c:	lea    r9,[rsp+0x50]
 10096a1:	lea    r8,[rip+0xffffffffffffa9d0]        # 0x1004078
 10096a8:	lea    rcx,[rbx+0x7600]
 10096af:	mov    edx,0x104
 10096b4:	mov    QWORD PTR [rsp+0x20],rax
 10096b9:	call   0x1007600
 10096be:	test   eax,eax
 10096c0:	jns    0x10096cb
 10096c2:	xor    eax,eax
 10096c4:	mov    WORD PTR [rbx+0x7600],ax
 10096cb:	mov    rcx,QWORD PTR [rsp+0x890]
 10096d3:	xor    rcx,rsp
 10096d6:	call   0x1011420
 10096db:	add    rsp,0x8a0
 10096e2:	pop    rbx
 10096e3:	repz ret 
 10096e5:	int3   
 10096e6:	int3   
 10096e7:	int3   
 10096e8:	int3   
 10096e9:	int3   
 10096ea:	int3   
 10096eb:	int3   
 10096ec:	int3   
 10096ed:	int3   
 10096ee:	int3   
 10096ef:	int3   
 10096f0:	rex push rdi
 10096f2:	sub    rsp,0x60
 10096f6:	mov    rax,QWORD PTR [rip+0xdaa3]        # 0x10171a0
 10096fd:	xor    rax,rsp
 1009700:	mov    QWORD PTR [rsp+0x58],rax
 1009705:	cmp    DWORD PTR [rcx],0x6
 1009708:	mov    rdi,rcx
 100970b:	jb     0x100987f
 1009711:	mov    DWORD PTR [rcx],0x2
 1009717:	mov    rax,QWORD PTR [rip+0xffffffffffffaa72]        # 0x1004190
 100971e:	lea    r11,[rcx+0x24a]
 1009725:	mov    QWORD PTR [rsp+0x40],rax
 100972a:	mov    rax,QWORD PTR [rip+0xffffffffffffaa67]        # 0x1004198
 1009731:	mov    QWORD PTR [rsp+0x78],rbx
 1009736:	mov    QWORD PTR [rsp+0x48],rax
 100973b:	mov    eax,DWORD PTR [rip+0xffffffffffffaa5f]        # 0x10041a0
 1009741:	mov    ecx,0x105
 1009746:	xor    ebx,ebx
 1009748:	mov    DWORD PTR [rsp+0x50],eax
 100974c:	mov    edx,ecx
 100974e:	mov    rax,r11
 1009751:	mov    r10d,ebx
 1009754:	cmp    WORD PTR [rax],bx
 1009757:	je     0x100976d
 1009759:	add    rax,0x2
 100975d:	dec    rdx
 1009760:	jne    0x1009754
 1009762:	mov    r10d,0x80070057
 1009768:	mov    r8,rbx
 100976b:	jmp    0x1009783
 100976d:	test   rdx,rdx
 1009770:	jne    0x100977d
 1009772:	mov    r10d,0x80070057
 1009778:	mov    r8,rbx
 100977b:	jmp    0x1009783
 100977d:	mov    r8,rcx
 1009780:	sub    r8,rdx
 1009783:	test   r10d,r10d
 1009786:	js     0x10097dd
 1009788:	lea    rax,[r11+r8*2]
 100978c:	mov    r10d,ebx
 100978f:	sub    rcx,r8
 1009792:	je     0x10097cd
 1009794:	lea    rdx,[r8+0x7ffffefa]
 100979b:	lea    r9,[rsp+0x40]
 10097a0:	add    rdx,rcx
 10097a3:	sub    r9,rax
 10097a6:	test   rdx,rdx
 10097a9:	je     0x10097c8
 10097ab:	movzx  r8d,WORD PTR [r9+rax*1]
 10097b0:	test   r8w,r8w
 10097b4:	je     0x10097c8
 10097b6:	mov    WORD PTR [rax],r8w
 10097ba:	add    rax,0x2
 10097be:	dec    rdx
 10097c1:	dec    rcx
 10097c4:	jne    0x10097a6
 10097c6:	jmp    0x10097cd
 10097c8:	test   rcx,rcx
 10097cb:	jne    0x10097d7
 10097cd:	sub    rax,0x2
 10097d1:	mov    r10d,0x8007007a
 10097d7:	mov    WORD PTR [rax],bx
 10097da:	test   r10d,r10d
 10097dd:	jne    0x100987a
 10097e3:	xor    r9d,r9d
 10097e6:	mov    QWORD PTR [rsp+0x30],rbx
 10097eb:	mov    edx,0xc0000000
 10097f0:	lea    r8d,[r9+0x3]
 10097f4:	mov    rcx,r11
 10097f7:	mov    DWORD PTR [rsp+0x28],0x80
 10097ff:	mov    DWORD PTR [rsp+0x20],0x2
 1009807:	call   QWORD PTR [rip+0xffffffffffff7abb]        # 0x10012c8
 100980d:	mov    QWORD PTR [rdi+0x660],rax
 1009814:	cmp    rax,0xffffffffffffffff
 1009818:	je     0x100987a
 100981a:	mov    rcx,rdi
 100981d:	call   0x100ae30
 1009822:	test   eax,eax
 1009824:	je     0x100987a
 1009826:	or     DWORD PTR [rdi+0x668],0x1000
 1009830:	mov    edx,DWORD PTR [rdi+0x668]
 1009836:	mov    DWORD PTR [rdi],0x3
 100983c:	lea    rcx,[rip+0xffffffffffff7f7d]        # 0x10017c0
 1009843:	mov    eax,DWORD PTR [rbx+rcx*1]
 1009846:	test   edx,eax
 1009848:	je     0x1009868
 100984a:	not    eax
 100984c:	and    edx,eax
 100984e:	mov    DWORD PTR [rdi+0x668],edx
 1009854:	or     edx,DWORD PTR [rbx+rcx*1+0x4]
 1009858:	mov    DWORD PTR [rdi+0x668],edx
 100985e:	mov    eax,DWORD PTR [rbx+rcx*1+0x8]
 1009862:	or     DWORD PTR [rdi+0x66c],eax
 1009868:	add    rbx,0xc
 100986c:	cmp    rbx,0x3c
 1009870:	jb     0x1009843
 1009872:	mov    rcx,rdi
 1009875:	call   0x1008f20
 100987a:	mov    rbx,QWORD PTR [rsp+0x78]
 100987f:	mov    rcx,QWORD PTR [rsp+0x58]
 1009884:	xor    rcx,rsp
 1009887:	call   0x1011420
 100988c:	add    rsp,0x60
 1009890:	pop    rdi
 1009891:	ret    
 1009892:	int3   
 1009893:	int3   
 1009894:	int3   
 1009895:	int3   
 1009896:	int3   
 1009897:	int3   
 1009898:	int3   
 1009899:	int3   
 100989a:	int3   
 100989b:	int3   
 100989c:	int3   
 100989d:	int3   
 100989e:	int3   
 100989f:	int3   
 10098a0:	rex push rbx
 10098a2:	push   rsi
 10098a3:	sub    rsp,0x48
 10098a7:	mov    ebx,r8d
 10098aa:	mov    rsi,rdx
 10098ad:	test   rdx,rdx
 10098b0:	jne    0x10098bc
 10098b2:	lea    eax,[rdx+0x1]
 10098b5:	add    rsp,0x48
 10098b9:	pop    rsi
 10098ba:	pop    rbx
 10098bb:	ret    
 10098bc:	mov    rdx,QWORD PTR [rip+0xd88d]        # 0x1017150
 10098c3:	mov    QWORD PTR [rsp+0x60],rbp
 10098c8:	mov    eax,0x100000
 10098cd:	mov    QWORD PTR [rsp+0x68],rdi
 10098d2:	mov    QWORD PTR [rsp+0x70],r14
 10098d7:	lea    r14,[rcx+0x1a124]
 10098de:	mov    QWORD PTR [rsp+0x40],r15
 10098e3:	xor    r15d,r15d
 10098e6:	cmp    ebx,eax
 10098e8:	cmova  ebx,eax
 10098eb:	add    rcx,0x24a
 10098f2:	mov    r8,r14
 10098f5:	mov    ebp,r15d
 10098f8:	call   0x1007a80
 10098fd:	test   eax,eax
 10098ff:	je     0x1009a23
 1009905:	mov    QWORD PTR [rsp+0x30],r15
 100990a:	lea    r8d,[r15+0x3]
 100990e:	xor    r9d,r9d
 1009911:	mov    edx,0x80000000
 1009916:	mov    rcx,rsi
 1009919:	mov    DWORD PTR [rsp+0x28],0x80
 1009921:	mov    DWORD PTR [rsp+0x20],0x3
 1009929:	call   QWORD PTR [rip+0xffffffffffff7999]        # 0x10012c8
 100992f:	mov    rdi,rax
 1009932:	cmp    rax,0xffffffffffffffff
 1009936:	je     0x10099fc
 100993c:	xor    edx,edx
 100993e:	mov    rcx,rax
 1009941:	call   QWORD PTR [rip+0xffffffffffff7761]        # 0x10010a8
 1009947:	cmp    eax,0xffffffff
 100994a:	je     0x10099c8
 100994c:	cmp    eax,ebx
 100994e:	jbe    0x1009969
 1009950:	mov    edx,ebx
 1009952:	lea    r9d,[r15+0x2]
 1009956:	xor    r8d,r8d
 1009959:	neg    edx
 100995b:	mov    rcx,rdi
 100995e:	call   QWORD PTR [rip+0xffffffffffff7764]        # 0x10010c8
 1009964:	cmp    eax,0xffffffff
 1009967:	je     0x10099c8
 1009969:	mov    QWORD PTR [rsp+0x30],r15
 100996e:	xor    r9d,r9d
 1009971:	xor    r8d,r8d
 1009974:	mov    edx,0x40000000
 1009979:	mov    rcx,r14
 100997c:	mov    DWORD PTR [rsp+0x28],0x80
 1009984:	mov    DWORD PTR [rsp+0x20],0x2
 100998c:	call   QWORD PTR [rip+0xffffffffffff7936]        # 0x10012c8
 1009992:	mov    rsi,rax
 1009995:	cmp    rax,0xffffffffffffffff
 1009999:	je     0x10099b6
 100999b:	mov    r8d,ebx
 100999e:	mov    rdx,rdi
 10099a1:	mov    rcx,rax
 10099a4:	call   0x1010d60
 10099a9:	mov    rcx,rsi
 10099ac:	mov    ebp,eax
 10099ae:	call   QWORD PTR [rip+0xffffffffffff7724]        # 0x10010d8
 10099b4:	jmp    0x10099ed
 10099b6:	call   QWORD PTR [rip+0xffffffffffff7864]        # 0x1001220
 10099bc:	mov    r9,r14
 10099bf:	lea    r8,[rip+0xffffffffffffc8ca]        # 0x1006290
 10099c6:	jmp    0x10099d8
 10099c8:	call   QWORD PTR [rip+0xffffffffffff7852]        # 0x1001220
 10099ce:	mov    r9,rsi
 10099d1:	lea    r8,[rip+0xffffffffffffc918]        # 0x10062f0
 10099d8:	lea    rcx,[rip+0xd871]        # 0x1017250
 10099df:	mov    edx,0x1
 10099e4:	mov    DWORD PTR [rsp+0x20],eax
 10099e8:	call   0x1007f00
 10099ed:	mov    rcx,rdi
 10099f0:	call   QWORD PTR [rip+0xffffffffffff76e2]        # 0x10010d8
 10099f6:	test   ebp,ebp
 10099f8:	jne    0x1009a3f
 10099fa:	jmp    0x1009a3b
 10099fc:	call   QWORD PTR [rip+0xffffffffffff781e]        # 0x1001220
 1009a02:	lea    r8,[rip+0xffffffffffffc947]        # 0x1006350
 1009a09:	lea    rcx,[rip+0xd840]        # 0x1017250
 1009a10:	mov    r9,rsi
 1009a13:	mov    edx,0x1
 1009a18:	mov    DWORD PTR [rsp+0x20],eax
 1009a1c:	call   0x1007f00
 1009a21:	jmp    0x1009a3b
 1009a23:	lea    r8,[rip+0xffffffffffffc976]        # 0x10063a0
 1009a2a:	lea    rcx,[rip+0xd81f]        # 0x1017250
 1009a31:	mov    edx,0x1
 1009a36:	call   0x1007f00
 1009a3b:	mov    WORD PTR [r14],r15w
 1009a3f:	mov    r15,QWORD PTR [rsp+0x40]
 1009a44:	mov    r14,QWORD PTR [rsp+0x70]
 1009a49:	mov    rdi,QWORD PTR [rsp+0x68]
 1009a4e:	mov    eax,ebp
 1009a50:	mov    rbp,QWORD PTR [rsp+0x60]
 1009a55:	add    rsp,0x48
 1009a59:	pop    rsi
 1009a5a:	pop    rbx
 1009a5b:	ret    
 1009a5c:	int3   
 1009a5d:	int3   
 1009a5e:	int3   
 1009a5f:	int3   
 1009a60:	int3   
 1009a61:	int3   
 1009a62:	int3   
 1009a63:	int3   
 1009a64:	int3   
 1009a65:	int3   
 1009a66:	int3   
 1009a67:	int3   
 1009a68:	int3   
 1009a69:	int3   
 1009a6a:	int3   
 1009a6b:	int3   
 1009a6c:	int3   
 1009a6d:	int3   
 1009a6e:	int3   
 1009a6f:	int3   
 1009a70:	sub    rsp,0x28
 1009a74:	mov    rcx,QWORD PTR [rcx+0x6c0]
 1009a7b:	test   rcx,rcx
 1009a7e:	je     0x1009a9b
 1009a80:	lea    rdx,[rip+0xffffffffffff7d19]        # 0x10017a0
 1009a87:	call   QWORD PTR [rip+0xffffffffffff79b3]        # 0x1001440
 1009a8d:	test   eax,eax
 1009a8f:	jne    0x1009a9b
 1009a91:	mov    eax,0x1
 1009a96:	add    rsp,0x28
 1009a9a:	ret    
 1009a9b:	xor    eax,eax
 1009a9d:	add    rsp,0x28
 1009aa1:	ret    
 1009aa2:	int3   
 1009aa3:	int3   
 1009aa4:	int3   
 1009aa5:	int3   
 1009aa6:	int3   
 1009aa7:	int3   
 1009aa8:	int3   
 1009aa9:	int3   
 1009aaa:	int3   
 1009aab:	int3   
 1009aac:	int3   
 1009aad:	int3   
 1009aae:	int3   
 1009aaf:	int3   
 1009ab0:	mov    QWORD PTR [rsp+0x18],rbp
 1009ab5:	mov    QWORD PTR [rsp+0x20],rsi
 1009aba:	push   rdi
 1009abb:	push   r14
 1009abd:	push   r15
 1009abf:	sub    rsp,0x50
 1009ac3:	mov    rax,QWORD PTR [rip+0xd6d6]        # 0x10171a0
 1009aca:	xor    rax,rsp
 1009acd:	mov    QWORD PTR [rsp+0x40],rax
 1009ad2:	mov    rdi,rcx
 1009ad5:	lea    rcx,[rip+0xffffffffffff8154]        # 0x1001c30
 1009adc:	mov    esi,edx
 1009ade:	call   QWORD PTR [rip+0xffffffffffff762c]        # 0x1001110
 1009ae4:	lea    rdx,[rip+0xffffffffffffbb65]        # 0x1005650
 1009aeb:	mov    rcx,rax
 1009aee:	call   QWORD PTR [rip+0xffffffffffff77a4]        # 0x1001298
 1009af4:	mov    edx,DWORD PTR [rdi+0x19cc]
 1009afa:	mov    ecx,0x4
 1009aff:	mov    r14,rax
 1009b02:	call   0x1010e80
 1009b07:	xor    ebp,ebp
 1009b09:	mov    r15,rax
 1009b0c:	mov    DWORD PTR [rdi+0x1a330],ebp
 1009b12:	cmp    rax,0xffffffffffffffff
 1009b16:	jne    0x1009b3c
 1009b18:	call   QWORD PTR [rip+0xffffffffffff7702]        # 0x1001220
 1009b1e:	lea    r8,[rip+0xffffffffffffbb4b]        # 0x1005670
 1009b25:	lea    edx,[rbp+0x1]
 1009b28:	lea    rcx,[rip+0xd721]        # 0x1017250
 1009b2f:	mov    r9d,eax
 1009b32:	call   0x1007f00
 1009b37:	jmp    0x1009c6d
 1009b3c:	lea    rdx,[rsp+0x20]
 1009b41:	mov    rcx,rax
 1009b44:	mov    DWORD PTR [rsp+0x20],0x1c
 1009b4c:	call   0x1010e8c
 1009b51:	test   eax,eax
 1009b53:	jne    0x1009b6f
 1009b55:	call   QWORD PTR [rip+0xffffffffffff76c5]        # 0x1001220
 1009b5b:	lea    r8,[rip+0xffffffffffffbb5e]        # 0x10056c0
 1009b62:	mov    edx,0x1
 1009b67:	mov    r9d,eax
 1009b6a:	jmp    0x1009c58
 1009b6f:	mov    QWORD PTR [rsp+0x78],rbx
 1009b74:	mov    eax,DWORD PTR [rdi+0x19cc]
 1009b7a:	cmp    DWORD PTR [rsp+0x2c],eax
 1009b7e:	jne    0x1009beb
 1009b80:	mov    r8d,DWORD PTR [rsp+0x28]
 1009b85:	xor    edx,edx
 1009b87:	lea    ecx,[rdx+0x42]
 1009b8a:	call   QWORD PTR [rip+0xffffffffffff76a0]        # 0x1001230
 1009b90:	mov    rbx,rax
 1009b93:	test   r14,r14
 1009b96:	je     0x1009ba6
 1009b98:	mov    rcx,rax
 1009b9b:	call   r14
 1009b9e:	cmp    eax,DWORD PTR [rdi+0x19cc]
 1009ba4:	jne    0x1009be2
 1009ba6:	test   rbx,rbx
 1009ba9:	je     0x1009beb
 1009bab:	test   esi,esi
 1009bad:	je     0x1009c90
 1009bb3:	cmp    esi,0x8
 1009bb6:	je     0x1009bc8
 1009bb8:	cmp    esi,0x10
 1009bbb:	jne    0x1009be2
 1009bbd:	mov    rcx,rbx
 1009bc0:	call   QWORD PTR [rip+0xffffffffffff7632]        # 0x10011f8
 1009bc6:	jmp    0x1009bd1
 1009bc8:	mov    rcx,rbx
 1009bcb:	call   QWORD PTR [rip+0xffffffffffff7637]        # 0x1001208
 1009bd1:	xor    ecx,ecx
 1009bd3:	cmp    eax,0xffffffff
 1009bd6:	setne  cl
 1009bd9:	cmp    ecx,0x1
 1009bdc:	je     0x1009cbe
 1009be2:	mov    rcx,rbx
 1009be5:	call   QWORD PTR [rip+0xffffffffffff74ed]        # 0x10010d8
 1009beb:	lea    rdx,[rsp+0x20]
 1009bf0:	mov    rcx,r15
 1009bf3:	call   0x1010e98
 1009bf8:	test   eax,eax
 1009bfa:	je     0x1009c0c
 1009bfc:	cmp    DWORD PTR [rdi+0x1a330],0x1000
 1009c06:	jb     0x1009b74
 1009c0c:	call   QWORD PTR [rip+0xffffffffffff760e]        # 0x1001220
 1009c12:	mov    rbx,QWORD PTR [rsp+0x78]
 1009c17:	cmp    eax,0x12
 1009c1a:	je     0x1009c49
 1009c1c:	cmp    DWORD PTR [rdi+0x1a330],0x1000
 1009c26:	jae    0x1009c49
 1009c28:	call   QWORD PTR [rip+0xffffffffffff75f2]        # 0x1001220
 1009c2e:	lea    r8,[rip+0xffffffffffffbacb]        # 0x1005700
 1009c35:	lea    rcx,[rip+0xd614]        # 0x1017250
 1009c3c:	mov    r9d,eax
 1009c3f:	mov    edx,0x1
 1009c44:	call   0x1007f00
 1009c49:	mov    r9d,ebp
 1009c4c:	lea    r8,[rip+0xffffffffffffbaed]        # 0x1005740
 1009c53:	mov    edx,0x2
 1009c58:	lea    rcx,[rip+0xd5f1]        # 0x1017250
 1009c5f:	call   0x1007f00
 1009c64:	mov    rcx,r15
 1009c67:	call   QWORD PTR [rip+0xffffffffffff746b]        # 0x10010d8
 1009c6d:	mov    rcx,QWORD PTR [rsp+0x40]
 1009c72:	xor    rcx,rsp
 1009c75:	call   0x1011420
 1009c7a:	lea    r11,[rsp+0x50]
 1009c7f:	mov    rbp,QWORD PTR [r11+0x30]
 1009c83:	mov    rsi,QWORD PTR [r11+0x38]
 1009c87:	mov    rsp,r11
 1009c8a:	pop    r15
 1009c8c:	pop    r14
 1009c8e:	pop    rdi
 1009c8f:	ret    
 1009c90:	mov    rcx,rbx
 1009c93:	call   QWORD PTR [rip+0xffffffffffff756f]        # 0x1001208
 1009c99:	xor    ecx,ecx
 1009c9b:	cmp    eax,0xffffffff
 1009c9e:	setne  cl
 1009ca1:	cmp    ecx,0x1
 1009ca4:	jne    0x1009be2
 1009caa:	mov    eax,DWORD PTR [rdi+0x1a330]
 1009cb0:	mov    QWORD PTR [rdi+rax*8+0x1a338],rbx
 1009cb8:	inc    DWORD PTR [rdi+0x1a330]
 1009cbe:	inc    ebp
 1009cc0:	jmp    0x1009beb
 1009cc5:	int3   
 1009cc6:	int3   
 1009cc7:	int3   
 1009cc8:	int3   
 1009cc9:	int3   
 1009cca:	int3   
 1009ccb:	int3   
 1009ccc:	int3   
 1009ccd:	int3   
 1009cce:	int3   
 1009ccf:	int3   
 1009cd0:	rex push rbx
 1009cd2:	sub    rsp,0x20
 1009cd6:	cmp    DWORD PTR [rcx+0x1a330],0x0
 1009cdd:	mov    rbx,rcx
 1009ce0:	jbe    0x1009d4a
 1009ce2:	mov    QWORD PTR [rsp+0x30],rdi
 1009ce7:	nop    WORD PTR [rax+rax*1+0x0]
 1009cf0:	dec    DWORD PTR [rbx+0x1a330]
 1009cf6:	mov    eax,DWORD PTR [rbx+0x1a330]
 1009cfc:	mov    rdi,QWORD PTR [rbx+rax*8+0x1a338]
 1009d04:	mov    rcx,rdi
 1009d07:	call   QWORD PTR [rip+0xffffffffffff74eb]        # 0x10011f8
 1009d0d:	cmp    eax,0xffffffff
 1009d10:	jne    0x1009d33
 1009d12:	call   QWORD PTR [rip+0xffffffffffff7508]        # 0x1001220
 1009d18:	lea    r8,[rip+0xffffffffffffb8e1]        # 0x1005600
 1009d1f:	lea    rcx,[rip+0xd52a]        # 0x1017250
 1009d26:	mov    r9d,eax
 1009d29:	mov    edx,0x1
 1009d2e:	call   0x1007f00
 1009d33:	mov    rcx,rdi
 1009d36:	call   QWORD PTR [rip+0xffffffffffff739c]        # 0x10010d8
 1009d3c:	cmp    DWORD PTR [rbx+0x1a330],0x0
 1009d43:	ja     0x1009cf0
 1009d45:	mov    rdi,QWORD PTR [rsp+0x30]
 1009d4a:	add    rsp,0x20
 1009d4e:	pop    rbx
 1009d4f:	ret    
 1009d50:	int3   
 1009d51:	int3   
 1009d52:	int3   
 1009d53:	int3   
 1009d54:	int3   
 1009d55:	int3   
 1009d56:	int3   
 1009d57:	int3   
 1009d58:	int3   
 1009d59:	int3   
 1009d5a:	int3   
 1009d5b:	int3   
 1009d5c:	int3   
 1009d5d:	int3   
 1009d5e:	int3   
 1009d5f:	int3   
 1009d60:	rex push rbx
 1009d62:	sub    rsp,0x60
 1009d66:	mov    rax,QWORD PTR [rip+0xd433]        # 0x10171a0
 1009d6d:	xor    rax,rsp
 1009d70:	mov    QWORD PTR [rsp+0x50],rax
 1009d75:	cmp    DWORD PTR [rcx+0x22578],0x0
 1009d7c:	mov    rbx,rcx
 1009d7f:	je     0x1009f32
 1009d85:	test   BYTE PTR [rcx+0x22344],0x20
 1009d8c:	je     0x1009f32
 1009d92:	test   DWORD PTR [rcx+0x668],0x40000
 1009d9c:	jne    0x1009f32
 1009da2:	mov    QWORD PTR [rsp+0x78],rsi
 1009da7:	mov    QWORD PTR [rsp+0x80],rdi
 1009daf:	lea    rdi,[rcx+0x22364]
 1009db6:	xor    esi,esi
 1009db8:	cmp    WORD PTR [rdi],si
 1009dbb:	jne    0x1009e48
 1009dc1:	lea    r8,[rip+0xffffffffffffb090]        # 0x1004e58
 1009dc8:	mov    edx,0x105
 1009dcd:	mov    rcx,rdi
 1009dd0:	sub    r8,rdi
 1009dd3:	lea    rax,[rdx+0x7ffffef9]
 1009dda:	test   rax,rax
 1009ddd:	je     0x1009df7
 1009ddf:	movzx  eax,WORD PTR [r8+rcx*1]
 1009de4:	test   ax,ax
 1009de7:	je     0x1009df7
 1009de9:	mov    WORD PTR [rcx],ax
 1009dec:	add    rcx,0x2
 1009df0:	dec    rdx
 1009df3:	jne    0x1009dd3
 1009df5:	jmp    0x1009dfc
 1009df7:	test   rdx,rdx
 1009dfa:	jne    0x1009e00
 1009dfc:	sub    rcx,0x2
 1009e00:	mov    WORD PTR [rcx],si
 1009e03:	lea    rcx,[rsp+0x40]
 1009e08:	call   QWORD PTR [rip+0xffffffffffff76c2]        # 0x10014d0
 1009e0e:	test   eax,eax
 1009e10:	jne    0x1009e48
 1009e12:	lea    rdx,[rsp+0x30]
 1009e17:	lea    rcx,[rsp+0x40]
 1009e1c:	mov    QWORD PTR [rsp+0x30],rsi
 1009e21:	call   QWORD PTR [rip+0xffffffffffff76a1]        # 0x10014c8
 1009e27:	test   eax,eax
 1009e29:	jne    0x1009e48
 1009e2b:	mov    r8,QWORD PTR [rsp+0x30]
 1009e30:	mov    edx,0x105
 1009e35:	mov    rcx,rdi
 1009e38:	call   0x10074a0
 1009e3d:	lea    rcx,[rsp+0x30]
 1009e42:	call   QWORD PTR [rip+0xffffffffffff7690]        # 0x10014d8
 1009e48:	xor    r9d,r9d
 1009e4b:	xor    r8d,r8d
 1009e4e:	xor    ecx,ecx
 1009e50:	lea    edx,[r9+0x1]
 1009e54:	call   QWORD PTR [rip+0xffffffffffff729e]        # 0x10010f8
 1009e5a:	mov    QWORD PTR [rbx+0x22588],rax
 1009e61:	test   rax,rax
 1009e64:	je     0x1009efa
 1009e6a:	mov    eax,DWORD PTR [rbx+0x22578]
 1009e70:	mov    edi,esi
 1009e72:	mov    DWORD PTR [rbx+0x22584],eax
 1009e78:	test   eax,eax
 1009e7a:	je     0x1009f25
 1009e80:	lea    rax,[rsp+0x3c]
 1009e85:	lea    r8,[rip+0x6d54]        # 0x1010be0
 1009e8c:	mov    r9,rbx
 1009e8f:	mov    QWORD PTR [rsp+0x28],rax
 1009e94:	xor    edx,edx
 1009e96:	xor    ecx,ecx
 1009e98:	mov    DWORD PTR [rsp+0x20],esi
 1009e9c:	call   QWORD PTR [rip+0xffffffffffff73a6]        # 0x1001248
 1009ea2:	test   rax,rax
 1009ea5:	jne    0x1009eee
 1009ea7:	or     eax,0xffffffff
 1009eaa:	lock xadd DWORD PTR [rbx+0x22584],eax
 1009eb2:	dec    eax
 1009eb4:	jne    0x1009ec3
 1009eb6:	mov    rcx,QWORD PTR [rbx+0x22588]
 1009ebd:	call   QWORD PTR [rip+0xffffffffffff71cd]        # 0x1001090
 1009ec3:	or     DWORD PTR [rip+0xd233],0x20008000        # 0x1017100
 1009ecd:	call   QWORD PTR [rip+0xffffffffffff734d]        # 0x1001220
 1009ed3:	lea    r8,[rip+0xffffffffffffafa6]        # 0x1004e80
 1009eda:	lea    rcx,[rip+0xd36f]        # 0x1017250
 1009ee1:	mov    r9d,eax
 1009ee4:	mov    edx,0x1
 1009ee9:	call   0x1007f00
 1009eee:	inc    edi
 1009ef0:	cmp    edi,DWORD PTR [rbx+0x22578]
 1009ef6:	jb     0x1009e80
 1009ef8:	jmp    0x1009f25
 1009efa:	or     DWORD PTR [rip+0xd1fc],0x20008000        # 0x1017100
 1009f04:	call   QWORD PTR [rip+0xffffffffffff7316]        # 0x1001220
 1009f0a:	lea    r8,[rip+0xffffffffffffafdf]        # 0x1004ef0
 1009f11:	lea    rcx,[rip+0xd338]        # 0x1017250
 1009f18:	mov    r9d,eax
 1009f1b:	mov    edx,0x1
 1009f20:	call   0x1007f00
 1009f25:	mov    rsi,QWORD PTR [rsp+0x78]
 1009f2a:	mov    rdi,QWORD PTR [rsp+0x80]
 1009f32:	mov    rcx,QWORD PTR [rsp+0x50]
 1009f37:	xor    rcx,rsp
 1009f3a:	call   0x1011420
 1009f3f:	add    rsp,0x60
 1009f43:	pop    rbx
 1009f44:	ret    
 1009f45:	int3   
 1009f46:	int3   
 1009f47:	int3   
 1009f48:	int3   
 1009f49:	int3   
 1009f4a:	int3   
 1009f4b:	int3   
 1009f4c:	int3   
 1009f4d:	int3   
 1009f4e:	int3   
 1009f4f:	int3   
 1009f50:	mov    QWORD PTR [rsp+0x10],rbx
 1009f55:	push   rdi
 1009f56:	sub    rsp,0x50
 1009f5a:	mov    rax,QWORD PTR [rip+0xd23f]        # 0x10171a0
 1009f61:	xor    rax,rsp
 1009f64:	mov    QWORD PTR [rsp+0x40],rax
 1009f69:	mov    rbx,rcx
 1009f6c:	lea    rdx,[rip+0x6ddd]        # 0x1010d50
 1009f73:	lea    rcx,[rip+0xffffffffffff7786]        # 0x1001700
 1009f7a:	xor    r8d,r8d
 1009f7d:	call   QWORD PTR [rip+0xffffffffffff70cd]        # 0x1001050
 1009f83:	mov    rdi,rax
 1009f86:	test   rax,rax
 1009f89:	je     0x100a028
 1009f8f:	xor    eax,eax
 1009f91:	mov    DWORD PTR [rsp+0x20],0x10
 1009f99:	mov    DWORD PTR [rsp+0x24],0x2
 1009fa1:	mov    QWORD PTR [rsp+0x28],rax
 1009fa6:	mov    DWORD PTR [rsp+0x30],eax
 1009faa:	mov    QWORD PTR [rsp+0x34],0x12
 1009fb3:	mov    rcx,QWORD PTR [rbx+0x225b0]
 1009fba:	mov    edx,0x3e8
 1009fbf:	call   QWORD PTR [rip+0xffffffffffff70d3]        # 0x1001098
 1009fc5:	cmp    eax,0x102
 1009fca:	jne    0x1009ffb
 1009fcc:	mov    eax,DWORD PTR [rip+0xd12e]        # 0x1017100
 1009fd2:	inc    DWORD PTR [rsp+0x34]
 1009fd6:	lea    rdx,[rsp+0x20]
 1009fdb:	mov    rcx,rdi
 1009fde:	mov    DWORD PTR [rsp+0x30],eax
 1009fe2:	call   QWORD PTR [rip+0xffffffffffff7070]        # 0x1001058
 1009fe8:	test   eax,eax
 1009fea:	jne    0x1009fb3
 1009fec:	lea    rdx,[rip+0xffffffffffffb405]        # 0x10053f8
 1009ff3:	mov    rcx,rbx
 1009ff6:	call   0x100ef00
 1009ffb:	mov    eax,DWORD PTR [rip+0xd0ff]        # 0x1017100
 100a001:	lea    rdx,[rsp+0x20]
 100a006:	mov    rcx,rdi
 100a009:	mov    DWORD PTR [rsp+0x30],eax
 100a00d:	mov    DWORD PTR [rsp+0x24],0x1
 100a015:	call   QWORD PTR [rip+0xffffffffffff703d]        # 0x1001058
 100a01b:	test   eax,eax
 100a01d:	jne    0x100a037
 100a01f:	lea    rdx,[rip+0xffffffffffffb3d2]        # 0x10053f8
 100a026:	jmp    0x100a02f
 100a028:	lea    rdx,[rip+0xffffffffffffb409]        # 0x1005438
 100a02f:	mov    rcx,rbx
 100a032:	call   0x100ef00
 100a037:	mov    rcx,QWORD PTR [rsp+0x40]
 100a03c:	xor    rcx,rsp
 100a03f:	call   0x1011420
 100a044:	mov    rbx,QWORD PTR [rsp+0x68]
 100a049:	add    rsp,0x50
 100a04d:	pop    rdi
 100a04e:	ret    
 100a04f:	int3   
 100a050:	int3   
 100a051:	int3   
 100a052:	int3   
 100a053:	int3   
 100a054:	int3   
 100a055:	int3   
 100a056:	int3   
 100a057:	int3   
 100a058:	int3   
 100a059:	int3   
 100a05a:	int3   
 100a05b:	int3   
 100a05c:	int3   
 100a05d:	int3   
 100a05e:	int3   
 100a05f:	int3   
 100a060:	rex push rbx
 100a062:	sub    rsp,0x30
 100a066:	cmp    DWORD PTR [rcx+0x22348],0x0
 100a06d:	mov    rbx,rcx
 100a070:	je     0x100a0ab
 100a072:	test   BYTE PTR [rcx+0x22344],0x4
 100a079:	jne    0x100a09e
 100a07b:	lea    r8,[rip+0xffffffffffff829e]        # 0x1002320
 100a082:	lea    rcx,[rip+0xd1c7]        # 0x1017250
 100a089:	mov    edx,0x2
 100a08e:	call   0x1007f00
 100a093:	mov    eax,0x1
 100a098:	add    rsp,0x30
 100a09c:	pop    rbx
 100a09d:	ret    
 100a09e:	test   edx,edx
 100a0a0:	je     0x100a0b3
 100a0a2:	call   0x100f5d0
 100a0a7:	test   eax,eax
 100a0a9:	jne    0x100a0b3
 100a0ab:	xor    eax,eax
 100a0ad:	add    rsp,0x30
 100a0b1:	pop    rbx
 100a0b2:	ret    
 100a0b3:	mov    rdx,QWORD PTR [rbx+0x8]
 100a0b7:	lea    rax,[rbx+0x22350]
 100a0be:	lea    r9,[rip+0xffffffffffffb30b]        # 0x10053d0
 100a0c5:	lea    r8,[rip+0xffffffffffffb31c]        # 0x10053e8
 100a0cc:	lea    rcx,[rbx+0x22598]
 100a0d3:	mov    QWORD PTR [rsp+0x28],0x230
 100a0dc:	mov    QWORD PTR [rsp+0x20],rax
 100a0e1:	mov    QWORD PTR [rsp+0x40],rdi
 100a0e6:	call   0x1008850
 100a0eb:	test   eax,eax
 100a0ed:	je     0x100a12c
 100a0ef:	lea    rcx,[rbx+0x22598]
 100a0f6:	mov    edx,0x7530
 100a0fb:	call   0x10089e0
 100a100:	test   eax,eax
 100a102:	je     0x100a12c
 100a104:	lea    r8,[rip+0xffffffffffff8255]        # 0x1002360
 100a10b:	lea    rcx,[rip+0xd13e]        # 0x1017250
 100a112:	mov    edx,0x2
 100a117:	call   0x1007f00
 100a11c:	mov    rdi,QWORD PTR [rsp+0x40]
 100a121:	mov    eax,0x1
 100a126:	add    rsp,0x30
 100a12a:	pop    rbx
 100a12b:	ret    
 100a12c:	or     DWORD PTR [rbx+0x668],0x20
 100a133:	mov    edx,DWORD PTR [rbx+0x668]
 100a139:	lea    r8,[rip+0xffffffffffff7680]        # 0x10017c0
 100a140:	xor    ecx,ecx
 100a142:	mov    eax,DWORD PTR [rcx+r8*1]
 100a146:	test   edx,eax
 100a148:	je     0x100a16a
 100a14a:	not    eax
 100a14c:	and    edx,eax
 100a14e:	mov    DWORD PTR [rbx+0x668],edx
 100a154:	or     edx,DWORD PTR [rcx+r8*1+0x4]
 100a159:	mov    DWORD PTR [rbx+0x668],edx
 100a15f:	mov    eax,DWORD PTR [rcx+r8*1+0x8]
 100a164:	or     DWORD PTR [rbx+0x66c],eax
 100a16a:	add    rcx,0xc
 100a16e:	cmp    rcx,0x3c
 100a172:	jb     0x100a142
 100a174:	xor    eax,eax
 100a176:	mov    rdi,QWORD PTR [rsp+0x40]
 100a17b:	add    rsp,0x30
 100a17f:	pop    rbx
 100a180:	ret    
 100a181:	int3   
 100a182:	int3   
 100a183:	int3   
 100a184:	int3   
 100a185:	int3   
 100a186:	int3   
 100a187:	int3   
 100a188:	int3   
 100a189:	int3   
 100a18a:	int3   
 100a18b:	int3   
 100a18c:	int3   
 100a18d:	int3   
 100a18e:	int3   
 100a18f:	int3   
 100a190:	rex push rbx
 100a192:	push   rbp
 100a193:	push   rdi
 100a194:	push   r13
 100a196:	push   r14
 100a198:	sub    rsp,0x40
 100a19c:	mov    edi,0x1
 100a1a1:	movsxd rbp,edx
 100a1a4:	mov    r13,r8
 100a1a7:	lea    eax,[rbp-0x2]
 100a1aa:	mov    rbx,rcx
 100a1ad:	mov    r14d,edi
 100a1b0:	mov    DWORD PTR [rcx],edi
 100a1b2:	cmp    eax,0x9
 100a1b5:	ja     0x100a7ca
 100a1bb:	cmp    ebp,0x2
 100a1be:	jne    0x100a1eb
 100a1c0:	mov    rcx,QWORD PTR [r8+0x8]
 100a1c4:	movzx  eax,WORD PTR [rcx]
 100a1c7:	cmp    ax,0x2d
 100a1cb:	je     0x100a1d3
 100a1cd:	cmp    ax,0x2f
 100a1d1:	jne    0x100a1eb
 100a1d3:	movzx  eax,WORD PTR [rcx+0x2]
 100a1d7:	cmp    ax,0x3f
 100a1db:	je     0x100a7ca
 100a1e1:	cmp    ax,0x68
 100a1e5:	je     0x100a7ca
 100a1eb:	mov    QWORD PTR [rsp+0x78],rsi
 100a1f0:	mov    QWORD PTR [rsp+0x38],r12
 100a1f5:	xor    r12d,r12d
 100a1f8:	lea    r9d,[rbp-0x1]
 100a1fc:	lea    r8,[rip+0xffffffffffff8fbd]        # 0x10031c0
 100a203:	lea    rcx,[rip+0xd046]        # 0x1017250
 100a20a:	lea    edx,[r12+0x2]
 100a20f:	mov    QWORD PTR [rsp+0x30],r15
 100a214:	call   0x1007f00
 100a219:	cmp    ebp,edi
 100a21b:	jle    0x100a24e
 100a21d:	lea    rsi,[r13+0x8]
 100a221:	mov    rax,QWORD PTR [rsi]
 100a224:	lea    r8,[rip+0xffffffffffff8fd5]        # 0x1003200
 100a22b:	lea    rcx,[rip+0xd01e]        # 0x1017250
 100a232:	mov    r9d,edi
 100a235:	mov    edx,0x2
 100a23a:	mov    QWORD PTR [rsp+0x20],rax
 100a23f:	call   0x1007f00
 100a244:	inc    edi
 100a246:	add    rsi,0x8
 100a24a:	cmp    edi,ebp
 100a24c:	jl     0x100a221
 100a24e:	xor    r15d,r15d
 100a251:	mov    QWORD PTR [rsp+0x88],rbp
 100a259:	test   ebp,ebp
 100a25b:	jle    0x100a562
 100a261:	lea    r8,[rip+0xffffffffffff5d98]        # 0x1000000
 100a268:	nop    DWORD PTR [rax+rax*1+0x0]
 100a270:	mov    rbp,QWORD PTR [r13+r15*8+0x0]
 100a275:	cmp    WORD PTR [rbp+0x0],0x2d
 100a27a:	jne    0x100a36f
 100a280:	movzx  ecx,WORD PTR [rbp+0x2]
 100a284:	cmp    cx,0x49
 100a288:	jne    0x100a29a
 100a28a:	lea    rax,[rbp+0x4]
 100a28e:	mov    QWORD PTR [rbx+0x19f8],rax
 100a295:	jmp    0x100a54a
 100a29a:	cmp    cx,0x53
 100a29e:	jne    0x100a2b0
 100a2a0:	lea    rax,[rbp+0x4]
 100a2a4:	mov    QWORD PTR [rbx+0x1a00],rax
 100a2ab:	jmp    0x100a54a
 100a2b0:	lea    rdi,[rip+0xffffffffffff8f71]        # 0x1003228
 100a2b7:	lea    rsi,[rbp+0x2]
 100a2bb:	mov    ecx,0x14
 100a2c0:	repz cmps WORD PTR ds:[rsi],WORD PTR es:[rdi]
 100a2c3:	jne    0x100a2d1
 100a2c5:	or     DWORD PTR [rbx+0x22344],0x3
 100a2cc:	jmp    0x100a54a
 100a2d1:	lea    rdi,[rip+0xffffffffffff8f78]        # 0x1003250
 100a2d8:	lea    rsi,[rbp+0x2]
 100a2dc:	mov    ecx,0x13
 100a2e1:	repz cmps WORD PTR ds:[rsi],WORD PTR es:[rdi]
 100a2e4:	jne    0x100a2f2
 100a2e6:	or     DWORD PTR [rbx+0x22344],0x25
 100a2ed:	jmp    0x100a54a
 100a2f2:	lea    rdi,[rip+0xffffffffffff8f7f]        # 0x1003278
 100a2f9:	lea    rsi,[rbp+0x2]
 100a2fd:	mov    ecx,0x15
 100a302:	repz cmps WORD PTR ds:[rsi],WORD PTR es:[rdi]
 100a305:	jne    0x100a313
 100a307:	or     DWORD PTR [rbx+0x22344],0x29
 100a30e:	jmp    0x100a54a
 100a313:	lea    rdi,[rip+0xffffffffffff8f8e]        # 0x10032a8
 100a31a:	lea    rsi,[rbp+0x2]
 100a31e:	mov    ecx,0x15
 100a323:	repz cmps WORD PTR ds:[rsi],WORD PTR es:[rdi]
 100a326:	jne    0x100a334
 100a328:	or     DWORD PTR [rbx+0x22344],0x31
 100a32f:	jmp    0x100a54a
 100a334:	lea    rdx,[rip+0xffffffffffff8f9d]        # 0x10032d8
 100a33b:	lea    rcx,[rbp+0x2]
 100a33f:	mov    r8d,0x1a
 100a345:	call   QWORD PTR [rip+0xffffffffffff7105]        # 0x1001450
 100a34b:	test   eax,eax
 100a34d:	jne    0x100a368
 100a34f:	mov    rdx,rbp
 100a352:	mov    rcx,rbx
 100a355:	call   0x100efd0
 100a35a:	mov    r14d,eax
 100a35d:	mov    DWORD PTR [rbx+0x22348],eax
 100a363:	jmp    0x100a54a
 100a368:	lea    r8,[rip+0xffffffffffff5c91]        # 0x1000000
 100a36f:	cmp    r12d,0x8
 100a373:	ja     0x100a52a
 100a379:	movsxd rax,r12d
 100a37c:	mov    ecx,DWORD PTR [r8+rax*4+0xa9d4]
 100a384:	add    rcx,r8
 100a387:	jmp    rcx
 100a389:	lea    rdx,[rsp+0x70]
 100a38e:	mov    r8d,0xa
 100a394:	mov    rcx,rbp
 100a397:	call   QWORD PTR [rip+0xffffffffffff704b]        # 0x10013e8
 100a39d:	mov    DWORD PTR [rbx+0x19cc],eax
 100a3a3:	cmp    rbp,QWORD PTR [rsp+0x70]
 100a3a8:	jne    0x100a547
 100a3ae:	lea    r8,[rip+0xffffffffffff8f5b]        # 0x1003310
 100a3b5:	jmp    0x100a531
 100a3ba:	lea    rdx,[rsp+0x70]
 100a3bf:	mov    r8d,0xa
 100a3c5:	mov    rcx,rbp
 100a3c8:	call   QWORD PTR [rip+0xffffffffffff701a]        # 0x10013e8
 100a3ce:	mov    DWORD PTR [rbx+0x19d0],eax
 100a3d4:	cmp    rbp,QWORD PTR [rsp+0x70]
 100a3d9:	jne    0x100a547
 100a3df:	lea    r8,[rip+0xffffffffffff8f7a]        # 0x1003360
 100a3e6:	jmp    0x100a531
 100a3eb:	lea    r9,[rbx+0x66c]
 100a3f2:	lea    r8,[rbx+0x668]
 100a3f9:	lea    rdx,[rip+0xffffffffffff8fa8]        # 0x10033a8
 100a400:	mov    rcx,rbp
 100a403:	call   QWORD PTR [rip+0xffffffffffff6fff]        # 0x1001408
 100a409:	test   eax,eax
 100a40b:	jne    0x100a419
 100a40d:	lea    r8,[rip+0xffffffffffff8fac]        # 0x10033c0
 100a414:	jmp    0x100a531
 100a419:	mov    eax,DWORD PTR [rbx+0x668]
 100a41f:	xor    edx,edx
 100a421:	lea    r8,[rip+0xffffffffffff5bd8]        # 0x1000000
 100a428:	mov    DWORD PTR [rbx+0x19c8],eax
 100a42e:	xchg   ax,ax
 100a430:	mov    ecx,DWORD PTR [rdx+r8*1+0x17c0]
 100a438:	test   eax,ecx
 100a43a:	je     0x100a462
 100a43c:	not    ecx
 100a43e:	and    eax,ecx
 100a440:	mov    DWORD PTR [rbx+0x668],eax
 100a446:	or     eax,DWORD PTR [rdx+r8*1+0x17c4]
 100a44e:	mov    DWORD PTR [rbx+0x668],eax
 100a454:	mov    ecx,DWORD PTR [rdx+r8*1+0x17c8]
 100a45c:	or     DWORD PTR [rbx+0x66c],ecx
 100a462:	add    rdx,0xc
 100a466:	cmp    rdx,0x3c
 100a46a:	jb     0x100a430
 100a46c:	test   BYTE PTR [rbx+0x668],0x1
 100a473:	je     0x100a547
 100a479:	call   QWORD PTR [rip+0xffffffffffff6d71]        # 0x10011f0
 100a47f:	jmp    0x100a547
 100a484:	lea    r8,[rbx+0x19c0]
 100a48b:	lea    rdx,[rip+0xffffffffffff8f76]        # 0x1003408
 100a492:	mov    rcx,rbp
 100a495:	call   QWORD PTR [rip+0xffffffffffff6f6d]        # 0x1001408
 100a49b:	test   eax,eax
 100a49d:	jne    0x100a547
 100a4a3:	mov    QWORD PTR [rbx+0x19c0],0x0
 100a4ae:	lea    r8,[rip+0xffffffffffff8f5b]        # 0x1003410
 100a4b5:	jmp    0x100a531
 100a4b7:	mov    QWORD PTR [rbx+0x19d8],rbp
 100a4be:	jmp    0x100a547
 100a4c3:	lea    r8,[rbx+0x19e0]
 100a4ca:	lea    rdx,[rip+0xffffffffffff8f37]        # 0x1003408
 100a4d1:	mov    rcx,rbp
 100a4d4:	call   QWORD PTR [rip+0xffffffffffff6f2e]        # 0x1001408
 100a4da:	test   eax,eax
 100a4dc:	jne    0x100a547
 100a4de:	mov    QWORD PTR [rbx+0x19e0],0x0
 100a4e9:	lea    r8,[rip+0xffffffffffff8f70]        # 0x1003460
 100a4f0:	jmp    0x100a531
 100a4f2:	lea    r8,[rbx+0x19e8]
 100a4f9:	lea    rdx,[rip+0xffffffffffff8f08]        # 0x1003408
 100a500:	mov    rcx,rbp
 100a503:	call   QWORD PTR [rip+0xffffffffffff6eff]        # 0x1001408
 100a509:	test   eax,eax
 100a50b:	jne    0x100a547
 100a50d:	mov    QWORD PTR [rbx+0x19e8],0x0
 100a518:	lea    r8,[rip+0xffffffffffff8fa1]        # 0x10034c0
 100a51f:	jmp    0x100a531
 100a521:	mov    QWORD PTR [rbx+0x19f0],rbp
 100a528:	jmp    0x100a547
 100a52a:	lea    r8,[rip+0xffffffffffff8fe7]        # 0x1003518
 100a531:	xor    r14d,r14d
 100a534:	lea    rcx,[rip+0xcd15]        # 0x1017250
 100a53b:	mov    r9,rbp
 100a53e:	lea    edx,[r14+0x1]
 100a542:	call   0x1007f00
 100a547:	inc    r12d
 100a54a:	inc    r15
 100a54d:	lea    r8,[rip+0xffffffffffff5aac]        # 0x1000000
 100a554:	cmp    r15,QWORD PTR [rsp+0x88]
 100a55c:	jl     0x100a270
 100a562:	mov    ecx,DWORD PTR [rbx+0x22344]
 100a568:	mov    r15,QWORD PTR [rsp+0x30]
 100a56d:	mov    r12,QWORD PTR [rsp+0x38]
 100a572:	mov    rsi,QWORD PTR [rsp+0x78]
 100a577:	and    ecx,0xffffffde
 100a57a:	mov    edi,0x1
 100a57f:	lea    eax,[rcx-0x1]
 100a582:	test   ecx,eax
 100a584:	je     0x100a59e
 100a586:	lea    r8,[rip+0xffffffffffff8fc3]        # 0x1003550
 100a58d:	lea    rcx,[rip+0xccbc]        # 0x1017250
 100a594:	mov    edx,edi
 100a596:	call   0x1007f00
 100a59b:	xor    r14d,r14d
 100a59e:	cmp    DWORD PTR [rbx+0x22344],0x0
 100a5a5:	je     0x100a7b6
 100a5ab:	test   DWORD PTR [rbx+0x668],0x40000
 100a5b5:	je     0x100a7b6
 100a5bb:	lea    r8,[rip+0xffffffffffff8ffe]        # 0x10035c0
 100a5c2:	lea    rcx,[rip+0xcc87]        # 0x1017250
 100a5c9:	mov    edx,edi
 100a5cb:	call   0x1007f00
 100a5d0:	xor    r14d,r14d
 100a5d3:	or     DWORD PTR [rip+0xcb23],0x20001000        # 0x1017100
 100a5dd:	lea    r8,[rip+0xffffffffffff905c]        # 0x1003640
 100a5e4:	lea    rcx,[rip+0xcc65]        # 0x1017250
 100a5eb:	mov    edx,edi
 100a5ed:	call   0x1007f00
 100a5f2:	test   DWORD PTR [rbx+0x668],0x100
 100a5fc:	mov    eax,DWORD PTR [rip+0x1106e]        # 0x101b670
 100a602:	lea    r8,[rip+0xffffffffffff9057]        # 0x1003660
 100a609:	cmovne eax,edi
 100a60c:	lea    rcx,[rip+0xcc3d]        # 0x1017250
 100a613:	mov    edx,0x2
 100a618:	mov    DWORD PTR [rip+0x11052],eax        # 0x101b670
 100a61e:	call   0x1007f00
 100a623:	mov    r9d,DWORD PTR [rbx+0x19cc]
 100a62a:	lea    r8,[rip+0xffffffffffff9057]        # 0x1003688
 100a631:	lea    rcx,[rip+0xcc18]        # 0x1017250
 100a638:	mov    edx,0x2
 100a63d:	call   0x1007f00
 100a642:	mov    r9d,DWORD PTR [rbx+0x19d0]
 100a649:	lea    r8,[rip+0xffffffffffff9060]        # 0x10036b0
 100a650:	lea    rcx,[rip+0xcbf9]        # 0x1017250
 100a657:	mov    edx,0x2
 100a65c:	call   0x1007f00
 100a661:	mov    r9d,DWORD PTR [rbx+0x668]
 100a668:	lea    r8,[rip+0xffffffffffff9069]        # 0x10036d8
 100a66f:	lea    rcx,[rip+0xcbda]        # 0x1017250
 100a676:	mov    edx,0x2
 100a67b:	call   0x1007f00
 100a680:	mov    r9d,DWORD PTR [rbx+0x66c]
 100a687:	lea    r8,[rip+0xffffffffffff9072]        # 0x1003700
 100a68e:	lea    rcx,[rip+0xcbbb]        # 0x1017250
 100a695:	mov    edx,0x2
 100a69a:	call   0x1007f00
 100a69f:	mov    r9,QWORD PTR [rbx+0x19c0]
 100a6a6:	lea    r8,[rip+0xffffffffffff908b]        # 0x1003738
 100a6ad:	lea    rcx,[rip+0xcb9c]        # 0x1017250
 100a6b4:	mov    edx,0x2
 100a6b9:	call   0x1007f00
 100a6be:	mov    rdx,QWORD PTR [rbx+0x19d8]
 100a6c5:	lea    rdi,[rip+0xffffffffffff909c]        # 0x1003768
 100a6cc:	test   rdx,rdx
 100a6cf:	mov    r9,rdi
 100a6d2:	lea    r8,[rip+0xffffffffffff909f]        # 0x1003778
 100a6d9:	cmovne r9,rdx
 100a6dd:	lea    rcx,[rip+0xcb6c]        # 0x1017250
 100a6e4:	mov    edx,0x2
 100a6e9:	call   0x1007f00
 100a6ee:	mov    r9,QWORD PTR [rbx+0x19e0]
 100a6f5:	lea    r8,[rip+0xffffffffffff90a4]        # 0x10037a0
 100a6fc:	lea    rcx,[rip+0xcb4d]        # 0x1017250
 100a703:	mov    edx,0x2
 100a708:	call   0x1007f00
 100a70d:	mov    r9,QWORD PTR [rbx+0x19e8]
 100a714:	lea    r8,[rip+0xffffffffffff90c5]        # 0x10037e0
 100a71b:	lea    rcx,[rip+0xcb2e]        # 0x1017250
 100a722:	mov    edx,0x2
 100a727:	call   0x1007f00
 100a72c:	mov    rdx,QWORD PTR [rbx+0x19f0]
 100a733:	mov    r9,rdi
 100a736:	test   rdx,rdx
 100a739:	lea    r8,[rip+0xffffffffffff90d0]        # 0x1003810
 100a740:	lea    rcx,[rip+0xcb09]        # 0x1017250
 100a747:	cmovne r9,rdx
 100a74b:	mov    edx,0x2
 100a750:	call   0x1007f00
 100a755:	mov    rdx,QWORD PTR [rbx+0x19f8]
 100a75c:	mov    r9,rdi
 100a75f:	test   rdx,rdx
 100a762:	lea    r8,[rip+0xffffffffffff90cf]        # 0x1003838
 100a769:	lea    rcx,[rip+0xcae0]        # 0x1017250
 100a770:	cmovne r9,rdx
 100a774:	mov    edx,0x2
 100a779:	call   0x1007f00
 100a77e:	mov    rax,QWORD PTR [rbx+0x1a00]
 100a785:	lea    r8,[rip+0xffffffffffff90dc]        # 0x1003868
 100a78c:	test   rax,rax
 100a78f:	lea    rcx,[rip+0xcaba]        # 0x1017250
 100a796:	mov    edx,0x2
 100a79b:	cmovne rdi,rax
 100a79f:	mov    r9,rdi
 100a7a2:	call   0x1007f00
 100a7a7:	mov    eax,r14d
 100a7aa:	add    rsp,0x40
 100a7ae:	pop    r14
 100a7b0:	pop    r13
 100a7b2:	pop    rdi
 100a7b3:	pop    rbp
 100a7b4:	pop    rbx
 100a7b5:	ret    
 100a7b6:	test   r14d,r14d
 100a7b9:	je     0x100a5d3
 100a7bf:	mov    DWORD PTR [rbx],0x2
 100a7c5:	jmp    0x100a5f2
 100a7ca:	mov    rdx,QWORD PTR [r8]
 100a7cd:	lea    rcx,[rip+0xffffffffffff7bec]        # 0x10023c0
 100a7d4:	call   QWORD PTR [rip+0xffffffffffff6c3e]        # 0x1001418
 100a7da:	cmp    ebp,0x2
 100a7dd:	jne    0x100a9c8
 100a7e3:	mov    rcx,QWORD PTR [r13+0x8]
 100a7e7:	movzx  eax,WORD PTR [rcx]
 100a7ea:	cmp    ax,0x2d
 100a7ee:	je     0x100a7fa
 100a7f0:	cmp    ax,0x2f
 100a7f4:	jne    0x100a9c8
 100a7fa:	movzx  eax,WORD PTR [rcx+0x2]
 100a7fe:	cmp    ax,0x3f
 100a802:	je     0x100a80e
 100a804:	cmp    ax,0x68
 100a808:	jne    0x100a9c8
 100a80e:	lea    rcx,[rip+0xffffffffffff7dc3]        # 0x10025d8
 100a815:	call   QWORD PTR [rip+0xffffffffffff6bfd]        # 0x1001418
 100a81b:	lea    rcx,[rip+0xffffffffffff7dce]        # 0x10025f0
 100a822:	call   QWORD PTR [rip+0xffffffffffff6bf0]        # 0x1001418
 100a828:	lea    rcx,[rip+0xffffffffffff7e21]        # 0x1002650
 100a82f:	call   QWORD PTR [rip+0xffffffffffff6be3]        # 0x1001418
 100a835:	lea    rcx,[rip+0xffffffffffff7e74]        # 0x10026b0
 100a83c:	call   QWORD PTR [rip+0xffffffffffff6bd6]        # 0x1001418
 100a842:	lea    rcx,[rip+0xffffffffffff7ec7]        # 0x1002710
 100a849:	call   QWORD PTR [rip+0xffffffffffff6bc9]        # 0x1001418
 100a84f:	lea    rcx,[rip+0xffffffffffff7f1a]        # 0x1002770
 100a856:	call   QWORD PTR [rip+0xffffffffffff6bbc]        # 0x1001418
 100a85c:	lea    rcx,[rip+0xffffffffffff7f6d]        # 0x10027d0
 100a863:	call   QWORD PTR [rip+0xffffffffffff6baf]        # 0x1001418
 100a869:	lea    rcx,[rip+0xffffffffffff7fc0]        # 0x1002830
 100a870:	call   QWORD PTR [rip+0xffffffffffff6ba2]        # 0x1001418
 100a876:	lea    rcx,[rip+0xffffffffffff8013]        # 0x1002890
 100a87d:	call   QWORD PTR [rip+0xffffffffffff6b95]        # 0x1001418
 100a883:	lea    rcx,[rip+0xffffffffffff8066]        # 0x10028f0
 100a88a:	call   QWORD PTR [rip+0xffffffffffff6b88]        # 0x1001418
 100a890:	lea    rcx,[rip+0xffffffffffff80b9]        # 0x1002950
 100a897:	call   QWORD PTR [rip+0xffffffffffff6b7b]        # 0x1001418
 100a89d:	lea    rcx,[rip+0xffffffffffff810c]        # 0x10029b0
 100a8a4:	call   QWORD PTR [rip+0xffffffffffff6b6e]        # 0x1001418
 100a8aa:	lea    rcx,[rip+0xffffffffffff815f]        # 0x1002a10
 100a8b1:	call   QWORD PTR [rip+0xffffffffffff6b61]        # 0x1001418
 100a8b7:	lea    rcx,[rip+0xffffffffffff81b2]        # 0x1002a70
 100a8be:	call   QWORD PTR [rip+0xffffffffffff6b54]        # 0x1001418
 100a8c4:	lea    rcx,[rip+0xffffffffffff8205]        # 0x1002ad0
 100a8cb:	call   QWORD PTR [rip+0xffffffffffff6b47]        # 0x1001418
 100a8d1:	lea    rcx,[rip+0xffffffffffff8258]        # 0x1002b30
 100a8d8:	call   QWORD PTR [rip+0xffffffffffff6b3a]        # 0x1001418
 100a8de:	lea    rcx,[rip+0xffffffffffff82ab]        # 0x1002b90
 100a8e5:	call   QWORD PTR [rip+0xffffffffffff6b2d]        # 0x1001418
 100a8eb:	lea    rcx,[rip+0xffffffffffff82fe]        # 0x1002bf0
 100a8f2:	call   QWORD PTR [rip+0xffffffffffff6b20]        # 0x1001418
 100a8f8:	lea    rcx,[rip+0xffffffffffff8351]        # 0x1002c50
 100a8ff:	call   QWORD PTR [rip+0xffffffffffff6b13]        # 0x1001418
 100a905:	lea    rcx,[rip+0xffffffffffff834c]        # 0x1002c58
 100a90c:	call   QWORD PTR [rip+0xffffffffffff6b06]        # 0x1001418
 100a912:	lea    rcx,[rip+0xffffffffffff8367]        # 0x1002c80
 100a919:	call   QWORD PTR [rip+0xffffffffffff6af9]        # 0x1001418
 100a91f:	lea    rcx,[rip+0xffffffffffff83ba]        # 0x1002ce0
 100a926:	call   QWORD PTR [rip+0xffffffffffff6aec]        # 0x1001418
 100a92c:	lea    rcx,[rip+0xffffffffffff840d]        # 0x1002d40
 100a933:	call   QWORD PTR [rip+0xffffffffffff6adf]        # 0x1001418
 100a939:	lea    rcx,[rip+0xffffffffffff8460]        # 0x1002da0
 100a940:	call   QWORD PTR [rip+0xffffffffffff6ad2]        # 0x1001418
 100a946:	lea    rcx,[rip+0xffffffffffff84b3]        # 0x1002e00
 100a94d:	call   QWORD PTR [rip+0xffffffffffff6ac5]        # 0x1001418
 100a953:	lea    rcx,[rip+0xffffffffffff8506]        # 0x1002e60
 100a95a:	call   QWORD PTR [rip+0xffffffffffff6ab8]        # 0x1001418
 100a960:	lea    rcx,[rip+0xffffffffffff8559]        # 0x1002ec0
 100a967:	call   QWORD PTR [rip+0xffffffffffff6aab]        # 0x1001418
 100a96d:	lea    rcx,[rip+0xffffffffffff85ac]        # 0x1002f20
 100a974:	call   QWORD PTR [rip+0xffffffffffff6a9e]        # 0x1001418
 100a97a:	lea    rcx,[rip+0xffffffffffff85ff]        # 0x1002f80
 100a981:	call   QWORD PTR [rip+0xffffffffffff6a91]        # 0x1001418
 100a987:	lea    rcx,[rip+0xffffffffffff8652]        # 0x1002fe0
 100a98e:	call   QWORD PTR [rip+0xffffffffffff6a84]        # 0x1001418
 100a994:	lea    rcx,[rip+0xffffffffffff86a5]        # 0x1003040
 100a99b:	call   QWORD PTR [rip+0xffffffffffff6a77]        # 0x1001418
 100a9a1:	lea    rcx,[rip+0xffffffffffff86f8]        # 0x10030a0
 100a9a8:	call   QWORD PTR [rip+0xffffffffffff6a6a]        # 0x1001418
 100a9ae:	lea    rcx,[rip+0xffffffffffff874b]        # 0x1003100
 100a9b5:	call   QWORD PTR [rip+0xffffffffffff6a5d]        # 0x1001418
 100a9bb:	lea    rcx,[rip+0xffffffffffff879e]        # 0x1003160
 100a9c2:	call   QWORD PTR [rip+0xffffffffffff6a50]        # 0x1001418
 100a9c8:	mov    ecx,0x20001000
 100a9cd:	call   QWORD PTR [rip+0xffffffffffff6a1d]        # 0x10013f0
 100a9d3:	int3   
 100a9d4:	rex.RXB movs DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 100a9d6:	add    BYTE PTR [rax],al
 100a9d8:	mov    DWORD PTR [rbx-0x5c460000],esp
 100a9de:	add    BYTE PTR [rax],al
 100a9e0:	jmp    0x100a985
 100a9e2:	add    BYTE PTR [rax],al
 100a9e4:	test   BYTE PTR [rax+rax*1+0xa4b700],ah
 100a9eb:	add    bl,al
 100a9ed:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 100a9ee:	add    BYTE PTR [rax],al
 100a9f0:	repnz movs BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 100a9f2:	add    BYTE PTR [rax],al
 100a9f4:	and    DWORD PTR [rbp-0x33340000],esp
 100a9fa:	int3   
 100a9fb:	int3   
 100a9fc:	int3   
 100a9fd:	int3   
 100a9fe:	int3   
 100a9ff:	int3   
 100aa00:	mov    QWORD PTR [rsp+0x10],rbx
 100aa05:	mov    QWORD PTR [rsp+0x18],rbp
 100aa0a:	push   rsi
 100aa0b:	push   rdi
 100aa0c:	push   r12
 100aa0e:	push   r14
 100aa10:	push   r15
 100aa12:	sub    rsp,0xa70
 100aa19:	mov    rax,QWORD PTR [rip+0xc780]        # 0x10171a0
 100aa20:	xor    rax,rsp
 100aa23:	mov    QWORD PTR [rsp+0xa60],rax
 100aa2b:	xor    r12d,r12d
 100aa2e:	cmp    DWORD PTR [rcx],0x2
 100aa31:	mov    rbx,rcx
 100aa34:	mov    r15d,r12d
 100aa37:	jb     0x100ade4
 100aa3d:	mov    r9,QWORD PTR [rcx+0x698]
 100aa44:	test   r9,r9
 100aa47:	je     0x100aa61
 100aa49:	lea    r8,[rip+0xffffffffffff8e50]        # 0x10038a0
 100aa50:	lea    edx,[r12+0x2]
 100aa55:	lea    rcx,[rip+0xc7f4]        # 0x1017250
 100aa5c:	call   0x1007f00
 100aa61:	test   BYTE PTR [rbx+0x668],0x40
 100aa68:	je     0x100ab48
 100aa6e:	mov    rdx,QWORD PTR [rip+0xc6cb]        # 0x1017140
 100aa75:	lea    rdi,[rbx+0x24a]
 100aa7c:	lea    rcx,[rbx+0x678]
 100aa83:	mov    r8,rdi
 100aa86:	call   0x1007830
 100aa8b:	test   eax,eax
 100aa8d:	je     0x100ab48
 100aa93:	xor    r9d,r9d
 100aa96:	mov    QWORD PTR [rsp+0x30],r12
 100aa9b:	mov    edx,0xc0000000
 100aaa0:	lea    r8d,[r9+0x3]
 100aaa4:	mov    rcx,rdi
 100aaa7:	mov    DWORD PTR [rsp+0x28],0x80
 100aaaf:	mov    DWORD PTR [rsp+0x20],0x1
 100aab7:	call   QWORD PTR [rip+0xffffffffffff680b]        # 0x10012c8
 100aabd:	mov    rsi,QWORD PTR [rbx+0x6e0]
 100aac4:	mov    QWORD PTR [rbx+0x660],rax
 100aacb:	cmp    rax,0xffffffffffffffff
 100aacf:	jne    0x100acff
 100aad5:	test   rsi,rsi
 100aad8:	je     0x100ab48
 100aada:	call   QWORD PTR [rip+0xffffffffffff6740]        # 0x1001220
 100aae0:	cmp    eax,0x50
 100aae3:	jne    0x100ab48
 100aae5:	lea    r8,[rip+0xffffffffffff8e04]        # 0x10038f0
 100aaec:	lea    edx,[rax-0x4e]
 100aaef:	lea    rcx,[rip+0xc75a]        # 0x1017250
 100aaf6:	mov    r9,rsi
 100aaf9:	call   0x1007f00
 100aafe:	mov    rbx,QWORD PTR [rbx+0x698]
 100ab05:	test   rbx,rbx
 100ab08:	je     0x100ab41
 100ab0a:	mov    rcx,rbx
 100ab0d:	call   QWORD PTR [rip+0xffffffffffff68ed]        # 0x1001400
 100ab13:	cmp    eax,0xffffffff
 100ab16:	jne    0x100ab41
 100ab18:	call   QWORD PTR [rip+0xffffffffffff68da]        # 0x10013f8
 100ab1e:	lea    rcx,[rip+0xc72b]        # 0x1017250
 100ab25:	mov    r9,rbx
 100ab28:	mov    r8d,DWORD PTR [rax]
 100ab2b:	mov    edx,0x2
 100ab30:	mov    DWORD PTR [rsp+0x20],r8d
 100ab35:	lea    r8,[rip+0xffffffffffff8e64]        # 0x10039a0
 100ab3c:	call   0x1007f00
 100ab41:	xor    eax,eax
 100ab43:	jmp    0x100adf1
 100ab48:	cmp    QWORD PTR [rbx+0x6a0],r12
 100ab4f:	jne    0x100ac6c
 100ab55:	mov    rcx,QWORD PTR [rbx+0x6c0]
 100ab5c:	test   rcx,rcx
 100ab5f:	jne    0x100ab6e
 100ab61:	cmp    QWORD PTR [rbx+0x19c0],r12
 100ab68:	je     0x100ac6c
 100ab6e:	mov    r8d,DWORD PTR [rbx+0x668]
 100ab75:	mov    rdx,QWORD PTR [rbx+0x6c8]
 100ab7c:	call   0x1010020
 100ab81:	mov    rdi,rax
 100ab84:	test   rax,rax
 100ab87:	je     0x100acee
 100ab8d:	lea    rcx,[rsp+0x52]
 100ab92:	xor    edx,edx
 100ab94:	mov    r8d,0x208
 100ab9a:	mov    WORD PTR [rsp+0x50],r12w
 100aba0:	call   0x1011452
 100aba5:	cmp    QWORD PTR [rbx+0x6c0],r12
 100abac:	lea    rax,[rip+0xffffffffffff8e55]        # 0x1003a08
 100abb3:	lea    rdx,[rip+0xffffffffffff8e6e]        # 0x1003a28
 100abba:	lea    r9,[rsp+0x40]
 100abbf:	cmovne rdx,rax
 100abc3:	lea    rax,[rsp+0x44]
 100abc8:	mov    rcx,rdi
 100abcb:	mov    QWORD PTR [rsp+0x28],rax
 100abd0:	lea    rax,[rsp+0x50]
 100abd5:	xor    r8d,r8d
 100abd8:	mov    DWORD PTR [rsp+0x44],0x20a
 100abe0:	mov    DWORD PTR [rsp+0x40],r12d
 100abe5:	mov    QWORD PTR [rsp+0x20],rax
 100abea:	call   QWORD PTR [rip+0xffffffffffff6438]        # 0x1001028
 100abf0:	test   eax,eax
 100abf2:	jne    0x100ac63
 100abf4:	cmp    DWORD PTR [rsp+0x40],0x1
 100abf9:	jne    0x100ac63
 100abfb:	lea    r9,[rbx+0x1c10]
 100ac02:	lea    r8,[rsp+0x50]
 100ac07:	mov    edx,0x103
 100ac0c:	mov    rcx,r9
 100ac0f:	sub    r8,r9
 100ac12:	mov    r10d,r12d
 100ac15:	data16 data16 nop WORD PTR [rax+rax*1+0x0]
 100ac20:	lea    rax,[rdx+0x7ffffefb]
 100ac27:	test   rax,rax
 100ac2a:	je     0x100ac44
 100ac2c:	movzx  eax,WORD PTR [r8+rcx*1]
 100ac31:	test   ax,ax
 100ac34:	je     0x100ac44
 100ac36:	mov    WORD PTR [rcx],ax
 100ac39:	add    rcx,0x2
 100ac3d:	dec    rdx
 100ac40:	jne    0x100ac20
 100ac42:	jmp    0x100ac49
 100ac44:	test   rdx,rdx
 100ac47:	jne    0x100ac53
 100ac49:	sub    rcx,0x2
 100ac4d:	mov    r10d,0x8007007a
 100ac53:	mov    WORD PTR [rcx],r12w
 100ac57:	test   r10d,r10d
 100ac5a:	jne    0x100ac63
 100ac5c:	mov    QWORD PTR [rbx+0x6a0],r9
 100ac63:	mov    rcx,rdi
 100ac66:	call   QWORD PTR [rip+0xffffffffffff63ac]        # 0x1001018
 100ac6c:	mov    esi,r12d
 100ac6f:	lea    rdi,[rbx+0x24a]
 100ac76:	data16 nop WORD PTR [rax+rax*1+0x0]
 100ac80:	mov    r8,QWORD PTR [rip+0xc4b9]        # 0x1017140
 100ac87:	mov    rdx,QWORD PTR [rbx+0x6a0]
 100ac8e:	lea    rcx,[rbx+0x40]
 100ac92:	mov    r9,rdi
 100ac95:	call   0x1007b60
 100ac9a:	test   eax,eax
 100ac9c:	je     0x100acd5
 100ac9e:	xor    r9d,r9d
 100aca1:	mov    QWORD PTR [rsp+0x30],r12
 100aca6:	mov    edx,0xc0000000
 100acab:	lea    r8d,[r9+0x3]
 100acaf:	mov    rcx,rdi
 100acb2:	mov    DWORD PTR [rsp+0x28],0x80
 100acba:	mov    DWORD PTR [rsp+0x20],0x1
 100acc2:	call   QWORD PTR [rip+0xffffffffffff6600]        # 0x10012c8
 100acc8:	mov    QWORD PTR [rbx+0x660],rax
 100accf:	cmp    rax,0xffffffffffffffff
 100acd3:	jne    0x100acff
 100acd5:	call   QWORD PTR [rip+0xffffffffffff6545]        # 0x1001220
 100acdb:	mov    ebp,eax
 100acdd:	cmp    eax,0x50
 100ace0:	jne    0x100ad54
 100ace2:	inc    esi
 100ace4:	cmp    esi,0x5
 100ace7:	jl     0x100ac80
 100ace9:	jmp    0x100adc6
 100acee:	or     DWORD PTR [rip+0xc408],0x20000002        # 0x1017100
 100acf8:	xor    eax,eax
 100acfa:	jmp    0x100adf1
 100acff:	lea    rcx,[rbx+0x454]
 100ad06:	mov    r15d,0x1
 100ad0c:	mov    edx,0x104
 100ad11:	sub    rdi,rcx
 100ad14:	lea    rax,[rdx+0x7ffffefa]
 100ad1b:	test   rax,rax
 100ad1e:	je     0x100ad42
 100ad20:	movzx  eax,WORD PTR [rdi+rcx*1]
 100ad24:	test   ax,ax
 100ad27:	je     0x100ad42
 100ad29:	mov    WORD PTR [rcx],ax
 100ad2c:	add    rcx,0x2
 100ad30:	dec    rdx
 100ad33:	jne    0x100ad14
 100ad35:	sub    rcx,0x2
 100ad39:	mov    WORD PTR [rcx],r12w
 100ad3d:	jmp    0x100adee
 100ad42:	test   rdx,rdx
 100ad45:	jne    0x100ad4b
 100ad47:	sub    rcx,0x2
 100ad4b:	mov    WORD PTR [rcx],r12w
 100ad4f:	jmp    0x100adee
 100ad54:	lea    rax,[rsp+0x260]
 100ad5c:	mov    QWORD PTR [rsp+0x30],r12
 100ad61:	mov    r9d,0x400
 100ad67:	mov    r8d,ebp
 100ad6a:	xor    edx,edx
 100ad6c:	mov    ecx,0x1000
 100ad71:	mov    DWORD PTR [rsp+0x28],0x400
 100ad79:	mov    QWORD PTR [rsp+0x20],rax
 100ad7e:	call   QWORD PTR [rip+0xffffffffffff6364]        # 0x10010e8
 100ad84:	mov    r9,rdi
 100ad87:	mov    edx,0x1
 100ad8c:	lea    rcx,[rip+0xc4bd]        # 0x1017250
 100ad93:	test   eax,eax
 100ad95:	je     0x100adb6
 100ad97:	lea    rax,[rsp+0x260]
 100ad9f:	lea    r8,[rip+0xffffffffffff8caa]        # 0x1003a50
 100ada6:	mov    QWORD PTR [rsp+0x28],rax
 100adab:	mov    DWORD PTR [rsp+0x20],ebp
 100adaf:	call   0x1007f00
 100adb4:	jmp    0x100adc6
 100adb6:	lea    r8,[rip+0xffffffffffff8ce3]        # 0x1003aa0
 100adbd:	mov    DWORD PTR [rsp+0x20],ebp
 100adc1:	call   0x1007f00
 100adc6:	cmp    esi,0x5
 100adc9:	jne    0x100ade4
 100adcb:	lea    r8,[rip+0xffffffffffff8d2e]        # 0x1003b00
 100add2:	lea    edx,[rsi-0x4]
 100add5:	lea    rcx,[rip+0xc474]        # 0x1017250
 100addc:	mov    r9d,esi
 100addf:	call   0x1007f00
 100ade4:	or     DWORD PTR [rip+0xc312],0x20000002        # 0x1017100
 100adee:	mov    eax,r15d
 100adf1:	mov    rcx,QWORD PTR [rsp+0xa60]
 100adf9:	xor    rcx,rsp
 100adfc:	call   0x1011420
 100ae01:	lea    r11,[rsp+0xa70]
 100ae09:	mov    rbx,QWORD PTR [r11+0x38]
 100ae0d:	mov    rbp,QWORD PTR [r11+0x40]
 100ae11:	mov    rsp,r11
 100ae14:	pop    r15
 100ae16:	pop    r14
 100ae18:	pop    r12
 100ae1a:	pop    rdi
 100ae1b:	pop    rsi
 100ae1c:	ret    
 100ae1d:	int3   
 100ae1e:	int3   
 100ae1f:	int3   
 100ae20:	int3   
 100ae21:	int3   
 100ae22:	int3   
 100ae23:	int3   
 100ae24:	int3   
 100ae25:	int3   
 100ae26:	int3   
 100ae27:	int3   
 100ae28:	int3   
 100ae29:	int3   
 100ae2a:	int3   
 100ae2b:	int3   
 100ae2c:	int3   
 100ae2d:	int3   
 100ae2e:	int3   
 100ae2f:	int3   
 100ae30:	rex push rbx
 100ae32:	sub    rsp,0x850
 100ae39:	mov    rax,QWORD PTR [rip+0xc360]        # 0x10171a0
 100ae40:	xor    rax,rsp
 100ae43:	mov    QWORD PTR [rsp+0x840],rax
 100ae4b:	cmp    DWORD PTR [rcx],0x2
 100ae4e:	mov    rbx,rcx
 100ae51:	jb     0x100b0cc
 100ae57:	cmp    DWORD PTR [rcx+0x19cc],0x0
 100ae5e:	mov    QWORD PTR [rsp+0x868],rbp
 100ae66:	jne    0x100ae7c
 100ae68:	cmp    DWORD PTR [rcx+0x22348],0x0
 100ae6f:	je     0x100ae7c
 100ae71:	call   0x100f370
 100ae76:	mov    DWORD PTR [rbx+0x19cc],eax
 100ae7c:	cmp    DWORD PTR [rbx+0x22348],0x0
 100ae83:	mov    r8d,DWORD PTR [rbx+0x19cc]
 100ae8a:	mov    ecx,0x450
 100ae8f:	mov    eax,0x47a
 100ae94:	cmovne ecx,eax
 100ae97:	xor    edx,edx
 100ae99:	call   QWORD PTR [rip+0xffffffffffff63c9]        # 0x1001268
 100ae9f:	lea    rbp,[rip+0xc3aa]        # 0x1017250
 100aea6:	mov    QWORD PTR [rbx+0x8],rax
 100aeaa:	test   rax,rax
 100aead:	je     0x100aeb5
 100aeaf:	cmp    rax,0xffffffffffffffff
 100aeb3:	jne    0x100aeea
 100aeb5:	cmp    DWORD PTR [rbx+0x22348],0x0
 100aebc:	je     0x100aeea
 100aebe:	mov    r8d,DWORD PTR [rbx+0x19cc]
 100aec5:	xor    edx,edx
 100aec7:	mov    ecx,0x450
 100aecc:	call   QWORD PTR [rip+0xffffffffffff6396]        # 0x1001268
 100aed2:	lea    r8,[rip+0xffffffffffff8ddf]        # 0x1003cb8
 100aed9:	mov    edx,0x2
 100aede:	mov    rcx,rbp
 100aee1:	mov    QWORD PTR [rbx+0x8],rax
 100aee5:	call   0x1007f00
 100aeea:	mov    rax,QWORD PTR [rbx+0x8]
 100aeee:	mov    QWORD PTR [rsp+0x870],rsi
 100aef6:	test   rax,rax
 100aef9:	je     0x100aff6
 100aeff:	cmp    rax,0xffffffffffffffff
 100af03:	je     0x100aff6
 100af09:	mov    rcx,rbx
 100af0c:	mov    QWORD PTR [rsp+0x878],rdi
 100af14:	call   0x100b0e0
 100af19:	mov    edi,eax
 100af1b:	test   eax,eax
 100af1d:	je     0x100afc5
 100af23:	mov    r8,QWORD PTR [rbx+0x6a0]
 100af2a:	xor    esi,esi
 100af2c:	test   r8,r8
 100af2f:	je     0x100af70
 100af31:	mov    ecx,0x104
 100af36:	mov    rdx,rbp
 100af39:	sub    r8,rbp
 100af3c:	nop    DWORD PTR [rax+0x0]
 100af40:	lea    rax,[rcx+0x7ffffefa]
 100af47:	test   rax,rax
 100af4a:	je     0x100af64
 100af4c:	movzx  eax,WORD PTR [r8+rdx*1]
 100af51:	test   ax,ax
 100af54:	je     0x100af64
 100af56:	mov    WORD PTR [rdx],ax
 100af59:	add    rdx,0x2
 100af5d:	dec    rcx
 100af60:	jne    0x100af40
 100af62:	jmp    0x100af69
 100af64:	test   rcx,rcx
 100af67:	jne    0x100af6d
 100af69:	sub    rdx,0x2
 100af6d:	mov    WORD PTR [rdx],si
 100af70:	mov    rdx,QWORD PTR [rbx+0x6b8]
 100af77:	mov    rcx,rbp
 100af7a:	call   0x1007e90
 100af7f:	test   BYTE PTR [rbx+0x22344],0x1
 100af86:	je     0x100af92
 100af88:	mov    rcx,rbx
 100af8b:	call   0x100e360
 100af90:	mov    edi,esi
 100af92:	mov    eax,DWORD PTR [rbx+0x22344]
 100af98:	test   al,0x20
 100af9a:	jne    0x100afc3
 100af9c:	test   al,0x8
 100af9e:	je     0x100afad
 100afa0:	mov    edx,0x8
 100afa5:	mov    rcx,rbx
 100afa8:	call   0x1009ab0
 100afad:	test   BYTE PTR [rbx+0x22344],0x10
 100afb4:	je     0x100afc3
 100afb6:	mov    edx,0x10
 100afbb:	mov    rcx,rbx
 100afbe:	call   0x1009ab0
 100afc3:	mov    eax,edi
 100afc5:	mov    rdi,QWORD PTR [rsp+0x878]
 100afcd:	mov    rsi,QWORD PTR [rsp+0x870]
 100afd5:	mov    rbp,QWORD PTR [rsp+0x868]
 100afdd:	mov    rcx,QWORD PTR [rsp+0x840]
 100afe5:	xor    rcx,rsp
 100afe8:	call   0x1011420
 100afed:	add    rsp,0x850
 100aff4:	pop    rbx
 100aff5:	ret    
 100aff6:	mov    r8,QWORD PTR [rbx+0x19d8]
 100affd:	xor    esi,esi
 100afff:	test   r8,r8
 100b002:	je     0x100b040
 100b004:	mov    ecx,0x104
 100b009:	mov    rdx,rbp
 100b00c:	sub    r8,rbp
 100b00f:	nop
 100b010:	lea    rax,[rcx+0x7ffffefa]
 100b017:	test   rax,rax
 100b01a:	je     0x100b034
 100b01c:	movzx  eax,WORD PTR [r8+rdx*1]
 100b021:	test   ax,ax
 100b024:	je     0x100b034
 100b026:	mov    WORD PTR [rdx],ax
 100b029:	add    rdx,0x2
 100b02d:	dec    rcx
 100b030:	jne    0x100b010
 100b032:	jmp    0x100b039
 100b034:	test   rcx,rcx
 100b037:	jne    0x100b03d
 100b039:	sub    rdx,0x2
 100b03d:	mov    WORD PTR [rdx],si
 100b040:	call   QWORD PTR [rip+0xffffffffffff61da]        # 0x1001220
 100b046:	or     DWORD PTR [rip+0xc0b0],0x20000008        # 0x1017100
 100b050:	mov    QWORD PTR [rbx+0x8],0xffffffffffffffff
 100b058:	call   QWORD PTR [rip+0xffffffffffff61c2]        # 0x1001220
 100b05e:	mov    QWORD PTR [rsp+0x30],rsi
 100b063:	mov    r9d,0x400
 100b069:	mov    ebx,eax
 100b06b:	lea    rax,[rsp+0x40]
 100b070:	xor    edx,edx
 100b072:	mov    ecx,0x1000
 100b077:	mov    r8d,ebx
 100b07a:	mov    DWORD PTR [rsp+0x28],0x400
 100b082:	mov    QWORD PTR [rsp+0x20],rax
 100b087:	call   QWORD PTR [rip+0xffffffffffff605b]        # 0x10010e8
 100b08d:	mov    r9d,ebx
 100b090:	mov    edx,0x1
 100b095:	mov    rcx,rbp
 100b098:	test   eax,eax
 100b09a:	je     0x100b0b9
 100b09c:	lea    rax,[rsp+0x40]
 100b0a1:	lea    r8,[rip+0xffffffffffff8c50]        # 0x1003cf8
 100b0a8:	mov    QWORD PTR [rsp+0x20],rax
 100b0ad:	call   0x1007f00
 100b0b2:	mov    eax,esi
 100b0b4:	jmp    0x100afcd
 100b0b9:	lea    r8,[rip+0xffffffffffff8c80]        # 0x1003d40
 100b0c0:	call   0x1007f00
 100b0c5:	mov    eax,esi
 100b0c7:	jmp    0x100afcd
 100b0cc:	mov    eax,0x1
 100b0d1:	jmp    0x100afdd
 100b0d6:	int3   
 100b0d7:	int3   
 100b0d8:	int3   
 100b0d9:	int3   
 100b0da:	int3   
 100b0db:	int3   
 100b0dc:	int3   
 100b0dd:	int3   
 100b0de:	int3   
 100b0df:	int3   
 100b0e0:	mov    QWORD PTR [rsp+0x20],rbx
 100b0e5:	push   rbp
 100b0e6:	sub    rsp,0x20
 100b0ea:	cmp    DWORD PTR [rcx],0x2
 100b0ed:	mov    rbx,rcx
 100b0f0:	mov    ebp,0x1
 100b0f5:	jb     0x100b434
 100b0fb:	mov    rdx,QWORD PTR [rcx+0x19c0]
 100b102:	mov    QWORD PTR [rsp+0x30],rsi
 100b107:	mov    QWORD PTR [rsp+0x38],rdi
 100b10c:	mov    QWORD PTR [rsp+0x40],r14
 100b111:	test   rdx,rdx
 100b114:	je     0x100b2b1
 100b11a:	lea    r8,[rcx+0x678]
 100b121:	call   0x100b450
 100b126:	xor    edi,edi
 100b128:	test   eax,eax
 100b12a:	je     0x100b2aa
 100b130:	mov    QWORD PTR [rbx+0x668],0x800
 100b13b:	mov    edx,0x800
 100b140:	mov    ecx,edi
 100b142:	lea    rsi,[rip+0xffffffffffff6677]        # 0x10017c0
 100b149:	nop    DWORD PTR [rax+0x0]
 100b150:	mov    eax,DWORD PTR [rcx+rsi*1]
 100b153:	test   edx,eax
 100b155:	je     0x100b175
 100b157:	not    eax
 100b159:	and    edx,eax
 100b15b:	mov    DWORD PTR [rbx+0x668],edx
 100b161:	or     edx,DWORD PTR [rcx+rsi*1+0x4]
 100b165:	mov    DWORD PTR [rbx+0x668],edx
 100b16b:	mov    eax,DWORD PTR [rcx+rsi*1+0x8]
 100b16f:	or     DWORD PTR [rbx+0x66c],eax
 100b175:	add    rcx,0xc
 100b179:	cmp    rcx,0x3c
 100b17d:	jb     0x100b150
 100b17f:	test   DWORD PTR [rbx+0x708],0x8000
 100b189:	je     0x100b1ab
 100b18b:	mov    rcx,rbx
 100b18e:	call   0x100c9a0
 100b193:	test   eax,eax
 100b195:	jne    0x100b1ab
 100b197:	and    DWORD PTR [rbx+0x708],0xffff7fff
 100b1a1:	or     DWORD PTR [rbx+0x708],0x1000
 100b1ab:	mov    eax,DWORD PTR [rbx+0x708]
 100b1b1:	mov    rcx,rdi
 100b1b4:	or     DWORD PTR [rbx+0x668],eax
 100b1ba:	mov    edx,DWORD PTR [rbx+0x668]
 100b1c0:	mov    eax,DWORD PTR [rcx+rsi*1]
 100b1c3:	test   edx,eax
 100b1c5:	je     0x100b1e5
 100b1c7:	not    eax
 100b1c9:	and    edx,eax
 100b1cb:	mov    DWORD PTR [rbx+0x668],edx
 100b1d1:	or     edx,DWORD PTR [rcx+rsi*1+0x4]
 100b1d5:	mov    DWORD PTR [rbx+0x668],edx
 100b1db:	mov    eax,DWORD PTR [rcx+rsi*1+0x8]
 100b1df:	or     DWORD PTR [rbx+0x66c],eax
 100b1e5:	add    rcx,0xc
 100b1e9:	cmp    rcx,0x3c
 100b1ed:	jb     0x100b1c0
 100b1ef:	mov    ecx,DWORD PTR [rbx+0x710]
 100b1f5:	mov    eax,DWORD PTR [rbx+0x714]
 100b1fb:	mov    r8d,DWORD PTR [rbx+0x70c]
 100b202:	or     ecx,DWORD PTR [rbx+0x66c]
 100b208:	not    eax
 100b20a:	mov    edx,0x5
 100b20f:	and    ecx,eax
 100b211:	mov    eax,r8d
 100b214:	not    eax
 100b216:	mov    DWORD PTR [rbx+0x66c],ecx
 100b21c:	lea    rcx,[rip+0xffffffffffff65a5]        # 0x10017c8
 100b223:	and    DWORD PTR [rbx+0x668],eax
 100b229:	nop    DWORD PTR [rax+0x0]
 100b230:	test   DWORD PTR [rcx-0x8],r8d
 100b234:	je     0x100b24b
 100b236:	mov    eax,DWORD PTR [rcx-0x4]
 100b239:	not    eax
 100b23b:	and    DWORD PTR [rbx+0x668],eax
 100b241:	mov    eax,DWORD PTR [rcx]
 100b243:	not    eax
 100b245:	and    DWORD PTR [rbx+0x66c],eax
 100b24b:	add    rcx,0xc
 100b24f:	dec    rdx
 100b252:	jne    0x100b230
 100b254:	test   BYTE PTR [rbx+0x668],bpl
 100b25b:	je     0x100b263
 100b25d:	call   QWORD PTR [rip+0xffffffffffff5f8d]        # 0x10011f0
 100b263:	mov    QWORD PTR [rbx+0x7818],rdi
 100b26a:	lea    rax,[rbx+0x748]
 100b271:	mov    QWORD PTR [rbx+0x7810],rax
 100b278:	lea    rax,[rbx+0xf60]
 100b27f:	mov    QWORD PTR [rbx+0x7828],rdi
 100b286:	mov    QWORD PTR [rbx+0x7820],rax
 100b28d:	cmp    DWORD PTR [rbx+0x678],edi
 100b293:	jne    0x100b3d2
 100b299:	mov    eax,DWORD PTR [rbx+0x19d0]
 100b29f:	mov    DWORD PTR [rbx+0x704],eax
 100b2a5:	jmp    0x100b3d2
 100b2aa:	mov    ebp,edi
 100b2ac:	jmp    0x100b3d2
 100b2b1:	mov    eax,DWORD PTR [rcx+0x19cc]
 100b2b7:	mov    rdx,QWORD PTR [rcx+0x19e0]
 100b2be:	xor    edi,edi
 100b2c0:	mov    DWORD PTR [rcx+0x6d8],eax
 100b2c6:	mov    eax,DWORD PTR [rcx+0x19d0]
 100b2cc:	lea    rsi,[rcx+0x2700]
 100b2d3:	mov    DWORD PTR [rcx+0x6d4],eax
 100b2d9:	mov    DWORD PTR [rcx+0x704],eax
 100b2df:	mov    rax,QWORD PTR [rcx+0x19d8]
 100b2e6:	mov    QWORD PTR [rcx+0x6a0],rax
 100b2ed:	test   rdx,rdx
 100b2f0:	je     0x100b304
 100b2f2:	mov    r9d,0x98
 100b2f8:	mov    r8,rsi
 100b2fb:	call   0x100bbd0
 100b300:	test   eax,eax
 100b302:	jne    0x100b307
 100b304:	mov    rsi,rdi
 100b307:	mov    rdx,QWORD PTR [rbx+0x19e8]
 100b30e:	mov    QWORD PTR [rbx+0x690],rsi
 100b315:	lea    rsi,[rbx+0x2230]
 100b31c:	test   rdx,rdx
 100b31f:	je     0x100b336
 100b321:	mov    r9d,0x4d0
 100b327:	mov    r8,rsi
 100b32a:	mov    rcx,rbx
 100b32d:	call   0x100bbd0
 100b332:	test   eax,eax
 100b334:	jne    0x100b339
 100b336:	mov    rsi,rdi
 100b339:	test   DWORD PTR [rbx+0x668],0x8000
 100b343:	mov    rax,QWORD PTR [rbx+0x19f0]
 100b34a:	mov    QWORD PTR [rbx+0x688],rsi
 100b351:	mov    QWORD PTR [rbx+0x6f0],rax
 100b358:	mov    rax,QWORD PTR [rbx+0x19f8]
 100b35f:	mov    QWORD PTR [rbx+0x6c0],rax
 100b366:	mov    rax,QWORD PTR [rbx+0x1a00]
 100b36d:	mov    QWORD PTR [rbx+0x6c8],rax
 100b374:	je     0x100b3d2
 100b376:	mov    rcx,rbx
 100b379:	call   0x100c9a0
 100b37e:	test   eax,eax
 100b380:	jne    0x100b3d2
 100b382:	and    DWORD PTR [rbx+0x668],0xffff7fff
 100b38c:	or     DWORD PTR [rbx+0x668],0x1000
 100b396:	mov    ecx,DWORD PTR [rbx+0x668]
 100b39c:	lea    rsi,[rip+0xffffffffffff641d]        # 0x10017c0
 100b3a3:	mov    eax,DWORD PTR [rdi+rsi*1]
 100b3a6:	test   eax,ecx
 100b3a8:	je     0x100b3c8
 100b3aa:	not    eax
 100b3ac:	and    ecx,eax
 100b3ae:	mov    DWORD PTR [rbx+0x668],ecx
 100b3b4:	or     ecx,DWORD PTR [rdi+rsi*1+0x4]
 100b3b8:	mov    DWORD PTR [rbx+0x668],ecx
 100b3be:	mov    eax,DWORD PTR [rdi+rsi*1+0x8]
 100b3c2:	or     DWORD PTR [rbx+0x66c],eax
 100b3c8:	add    rdi,0xc
 100b3cc:	cmp    rdi,0x3c
 100b3d0:	jb     0x100b3a3
 100b3d2:	test   BYTE PTR [rbx+0x668],0x4
 100b3d9:	mov    r14,QWORD PTR [rsp+0x40]
 100b3de:	mov    rdi,QWORD PTR [rsp+0x38]
 100b3e3:	mov    rsi,QWORD PTR [rsp+0x30]
 100b3e8:	je     0x100b434
 100b3ea:	mov    rdx,QWORD PTR [rbx+0x688]
 100b3f1:	test   rdx,rdx
 100b3f4:	je     0x100b41c
 100b3f6:	cmp    QWORD PTR [rbx+0x690],0x0
 100b3fe:	je     0x100b41c
 100b400:	mov    rdx,QWORD PTR [rdx+0x98]
 100b407:	mov    rcx,rbx
 100b40a:	call   0x100da60
 100b40f:	test   eax,eax
 100b411:	je     0x100b434
 100b413:	lea    r8,[rip+0xffffffffffff8976]        # 0x1003d90
 100b41a:	jmp    0x100b423
 100b41c:	lea    r8,[rip+0xffffffffffff89fd]        # 0x1003e20
 100b423:	lea    rcx,[rip+0xbe26]        # 0x1017250
 100b42a:	mov    edx,0x1
 100b42f:	call   0x1007f00
 100b434:	mov    eax,ebp
 100b436:	mov    rbx,QWORD PTR [rsp+0x48]
 100b43b:	add    rsp,0x20
 100b43f:	pop    rbp
 100b440:	ret    
 100b441:	int3   
 100b442:	int3   
 100b443:	int3   
 100b444:	int3   
 100b445:	int3   
 100b446:	int3   
 100b447:	int3   
 100b448:	int3   
 100b449:	int3   
 100b44a:	int3   
 100b44b:	int3   
 100b44c:	int3   
 100b44d:	int3   
 100b44e:	int3   
 100b44f:	int3   
 100b450:	mov    QWORD PTR [rsp+0x10],rbx
 100b455:	mov    QWORD PTR [rsp+0x18],rsi
 100b45a:	push   rdi
 100b45b:	sub    rsp,0x30
 100b45f:	mov    r9d,0x4
 100b465:	mov    rbx,r8
 100b468:	mov    rsi,rdx
 100b46b:	mov    rdi,rcx
 100b46e:	call   0x100bbd0
 100b473:	test   eax,eax
 100b475:	jne    0x100b4a4
 100b477:	lea    r8,[rip+0xffffffffffff6ae2]        # 0x1001f60
 100b47e:	lea    rcx,[rip+0xbdcb]        # 0x1017250
 100b485:	mov    r9,rsi
 100b488:	mov    edx,0x1
 100b48d:	call   0x1007f00
 100b492:	xor    eax,eax
 100b494:	mov    rbx,QWORD PTR [rsp+0x48]
 100b499:	mov    rsi,QWORD PTR [rsp+0x50]
 100b49e:	add    rsp,0x30
 100b4a2:	pop    rdi
 100b4a3:	ret    
 100b4a4:	mov    eax,DWORD PTR [rbx]
 100b4a6:	cmp    eax,0x2
 100b4a9:	jbe    0x100b4ea
 100b4ab:	lea    r8,[rip+0xffffffffffff6b2e]        # 0x1001fe0
 100b4b2:	lea    rcx,[rip+0xbd97]        # 0x1017250
 100b4b9:	mov    r9d,eax
 100b4bc:	mov    edx,0x1
 100b4c1:	mov    DWORD PTR [rsp+0x20],0x2
 100b4c9:	call   0x1007f00
 100b4ce:	or     DWORD PTR [rip+0xbc28],0x20000100        # 0x1017100
 100b4d8:	xor    eax,eax
 100b4da:	mov    rbx,QWORD PTR [rsp+0x48]
 100b4df:	mov    rsi,QWORD PTR [rsp+0x50]
 100b4e4:	add    rsp,0x30
 100b4e8:	pop    rdi
 100b4e9:	ret    
 100b4ea:	test   eax,eax
 100b4ec:	je     0x100b506
 100b4ee:	dec    eax
 100b4f0:	je     0x100b4fe
 100b4f2:	dec    eax
 100b4f4:	jne    0x100b492
 100b4f6:	mov    r9d,0x1340
 100b4fc:	jmp    0x100b50c
 100b4fe:	mov    r9d,0x1100
 100b504:	jmp    0x100b50c
 100b506:	mov    r9d,0x70
 100b50c:	mov    r8,rbx
 100b50f:	mov    rdx,rsi
 100b512:	mov    rcx,rdi
 100b515:	call   0x100bbd0
 100b51a:	test   eax,eax
 100b51c:	jne    0x100b52a
 100b51e:	lea    r8,[rip+0xffffffffffff6b2b]        # 0x1002050
 100b525:	jmp    0x100b47e
 100b52a:	cmp    DWORD PTR [rbx],0x1
 100b52d:	jb     0x100b581
 100b52f:	mov    edx,0xa0
 100b534:	mov    rcx,rbx
 100b537:	call   0x10118c0
 100b53c:	mov    ecx,DWORD PTR [rbx+0xa0]
 100b542:	cmp    ecx,eax
 100b544:	je     0x100b581
 100b546:	or     DWORD PTR [rip+0xbbb0],0x20000400        # 0x1017100
 100b550:	mov    DWORD PTR [rsp+0x20],ecx
 100b554:	lea    r8,[rip+0xffffffffffff6b65]        # 0x10020c0
 100b55b:	lea    rcx,[rip+0xbcee]        # 0x1017250
 100b562:	mov    r9d,eax
 100b565:	mov    edx,0x1
 100b56a:	call   0x1007f00
 100b56f:	xor    eax,eax
 100b571:	mov    rbx,QWORD PTR [rsp+0x48]
 100b576:	mov    rsi,QWORD PTR [rsp+0x50]
 100b57b:	add    rsp,0x30
 100b57f:	pop    rdi
 100b580:	ret    
 100b581:	xor    esi,esi
 100b583:	cmp    DWORD PTR [rbx],0x2
 100b586:	mov    QWORD PTR [rsp+0x40],rbp
 100b58b:	jb     0x100b696
 100b591:	lea    rcx,[rdi+0x22350]
 100b598:	lea    rdx,[rbx+0x1108]
 100b59f:	mov    r8d,0x230
 100b5a5:	call   0x1011446
 100b5aa:	mov    eax,DWORD PTR [rdi+0x22578]
 100b5b0:	mov    QWORD PTR [rdi+0x22570],rsi
 100b5b7:	test   eax,eax
 100b5b9:	je     0x100b690
 100b5bf:	cmp    eax,0x400
 100b5c4:	jae    0x100b690
 100b5ca:	mov    ecx,eax
 100b5cc:	mov    eax,0xb3c
 100b5d1:	mul    rcx
 100b5d4:	mov    rcx,0xffffffffffffffff
 100b5db:	cmovo  rax,rcx
 100b5df:	mov    rcx,rax
 100b5e2:	call   0x1011184
 100b5e7:	mov    QWORD PTR [rdi+0x22570],rax
 100b5ee:	test   rax,rax
 100b5f1:	je     0x100b62c
 100b5f3:	mov    r9d,DWORD PTR [rdi+0x22578]
 100b5fa:	mov    rdx,QWORD PTR [rbx+0x1328]
 100b601:	mov    r8,rax
 100b604:	mov    rcx,rdi
 100b607:	imul   r9,r9,0xb3c
 100b60e:	call   0x100bbd0
 100b613:	test   eax,eax
 100b615:	jne    0x100b620
 100b617:	lea    r8,[rip+0xffffffffffff6b22]        # 0x1002140
 100b61e:	jmp    0x100b633
 100b620:	mov    DWORD PTR [rdi+0x22344],0x24
 100b62a:	jmp    0x100b64a
 100b62c:	lea    r8,[rip+0xffffffffffff6b6d]        # 0x10021a0
 100b633:	lea    rcx,[rip+0xbc16]        # 0x1017250
 100b63a:	mov    edx,0x1
 100b63f:	call   0x1007f00
 100b644:	mov    DWORD PTR [rdi+0x22578],esi
 100b64a:	lea    rcx,[rdi+0x22350]
 100b651:	call   0x1007690
 100b656:	mov    ecx,DWORD PTR [rbx+0x1338]
 100b65c:	cmp    ecx,eax
 100b65e:	je     0x100b696
 100b660:	or     DWORD PTR [rip+0xba96],0x20000400        # 0x1017100
 100b66a:	mov    DWORD PTR [rsp+0x20],ecx
 100b66e:	lea    r8,[rip+0xffffffffffff6b8b]        # 0x1002200
 100b675:	lea    rcx,[rip+0xbbd4]        # 0x1017250
 100b67c:	mov    r9d,eax
 100b67f:	mov    edx,0x1
 100b684:	call   0x1007f00
 100b689:	xor    eax,eax
 100b68b:	jmp    0x100b93b
 100b690:	mov    DWORD PTR [rdi+0x22578],esi
 100b696:	mov    rdx,QWORD PTR [rdi+0x690]
 100b69d:	lea    rbp,[rdi+0x2700]
 100b6a4:	test   rdx,rdx
 100b6a7:	je     0x100b6be
 100b6a9:	mov    r9d,0x98
 100b6af:	mov    r8,rbp
 100b6b2:	mov    rcx,rdi
 100b6b5:	call   0x100bbd0
 100b6ba:	test   eax,eax
 100b6bc:	jne    0x100b6c1
 100b6be:	mov    rbp,rsi
 100b6c1:	mov    rdx,QWORD PTR [rdi+0x688]
 100b6c8:	mov    QWORD PTR [rdi+0x690],rbp
 100b6cf:	lea    rbp,[rdi+0x2230]
 100b6d6:	test   rdx,rdx
 100b6d9:	je     0x100b6f0
 100b6db:	mov    r9d,0x4d0
 100b6e1:	mov    r8,rbp
 100b6e4:	mov    rcx,rdi
 100b6e7:	call   0x100bbd0
 100b6ec:	test   eax,eax
 100b6ee:	jne    0x100b6f3
 100b6f0:	mov    rbp,rsi
 100b6f3:	mov    QWORD PTR [rdi+0x688],rbp
 100b6fa:	cmp    DWORD PTR [rbx],0x1
 100b6fd:	lea    rax,[rbx+0xa4]
 100b704:	jae    0x100b709
 100b706:	mov    rax,rsi
 100b709:	mov    rdx,QWORD PTR [rbx+0x8]
 100b70d:	lea    r8,[rdi+0x2798]
 100b714:	mov    r9d,0x104
 100b71a:	mov    rcx,rdi
 100b71d:	mov    QWORD PTR [rsp+0x20],rax
 100b722:	call   0x100b960
 100b727:	mov    rdx,QWORD PTR [rbx+0x20]
 100b72b:	mov    QWORD PTR [rbx+0x8],rax
 100b72f:	test   rdx,rdx
 100b732:	je     0x100b76f
 100b734:	cmp    DWORD PTR [rbx],0x1
 100b737:	lea    rax,[rbx+0xa8]
 100b73e:	jae    0x100b743
 100b740:	mov    rax,rsi
 100b743:	lea    r8,[rdi+0x1a08]
 100b74a:	mov    r9d,0x104
 100b750:	mov    rcx,rdi
 100b753:	mov    QWORD PTR [rsp+0x20],rax
 100b758:	call   0x100b960
 100b75d:	mov    QWORD PTR [rbx+0x20],rax
 100b761:	test   rax,rax
 100b764:	jne    0x100b76f
 100b766:	lea    r8,[rip+0xffffffffffff6b13]        # 0x1002280
 100b76d:	jmp    0x100b7b1
 100b76f:	mov    rdx,QWORD PTR [rbx+0x28]
 100b773:	test   rdx,rdx
 100b776:	je     0x100b7c9
 100b778:	cmp    DWORD PTR [rbx],0x1
 100b77b:	lea    rax,[rbx+0xac]
 100b782:	jae    0x100b787
 100b784:	mov    rax,rsi
 100b787:	lea    r8,[rdi+0x1c10]
 100b78e:	mov    r9d,0x104
 100b794:	mov    rcx,rdi
 100b797:	mov    QWORD PTR [rsp+0x20],rax
 100b79c:	call   0x100b960
 100b7a1:	mov    QWORD PTR [rbx+0x28],rax
 100b7a5:	test   rax,rax
 100b7a8:	jne    0x100b7c9
 100b7aa:	lea    r8,[rip+0xffffffffffff6b1f]        # 0x10022d0
 100b7b1:	lea    rcx,[rip+0xba98]        # 0x1017250
 100b7b8:	mov    edx,0x1
 100b7bd:	call   0x1007f00
 100b7c2:	xor    eax,eax
 100b7c4:	jmp    0x100b93b
 100b7c9:	cmp    DWORD PTR [rbx],0x1
 100b7cc:	lea    rax,[rbx+0xb0]
 100b7d3:	jae    0x100b7d8
 100b7d5:	mov    rax,rsi
 100b7d8:	mov    rdx,QWORD PTR [rbx+0x30]
 100b7dc:	lea    r8,[rdi+0x29a0]
 100b7e3:	mov    r9d,0x1000
 100b7e9:	mov    rcx,rdi
 100b7ec:	mov    QWORD PTR [rsp+0x20],rax
 100b7f1:	call   0x100b960
 100b7f6:	cmp    DWORD PTR [rbx],0x1
 100b7f9:	mov    QWORD PTR [rbx+0x30],rax
 100b7fd:	lea    rax,[rbx+0xb4]
 100b804:	jae    0x100b809
 100b806:	mov    rax,rsi
 100b809:	mov    rdx,QWORD PTR [rbx+0x38]
 100b80d:	lea    r8,[rdi+0x49a0]
 100b814:	mov    r9d,0x1000
 100b81a:	mov    rcx,rdi
 100b81d:	mov    QWORD PTR [rsp+0x20],rax
 100b822:	call   0x100b960
 100b827:	cmp    DWORD PTR [rbx],0x1
 100b82a:	mov    QWORD PTR [rbx+0x38],rax
 100b82e:	jb     0x100b837
 100b830:	lea    rsi,[rbx+0xb8]
 100b837:	mov    rdx,QWORD PTR [rbx+0x40]
 100b83b:	lea    r8,[rdi+0x69a0]
 100b842:	mov    r9d,0x104
 100b848:	mov    rcx,rdi
 100b84b:	mov    QWORD PTR [rsp+0x20],rsi
 100b850:	call   0x100b960
 100b855:	cmp    DWORD PTR [rbx],0x1
 100b858:	mov    QWORD PTR [rbx+0x40],rax
 100b85c:	jb     0x100b936
 100b862:	mov    rdx,QWORD PTR [rbx+0x78]
 100b866:	lea    rax,[rbx+0xbc]
 100b86d:	lea    r8,[rdi+0x1e18]
 100b874:	mov    r9d,0x104
 100b87a:	mov    rcx,rdi
 100b87d:	mov    QWORD PTR [rsp+0x20],rax
 100b882:	call   0x100b960
 100b887:	mov    rdx,QWORD PTR [rbx+0x48]
 100b88b:	lea    r8,[rdi+0x6ba8]
 100b892:	mov    QWORD PTR [rbx+0x78],rax
 100b896:	lea    rax,[rbx+0xc4]
 100b89d:	mov    r9d,0x104
 100b8a3:	mov    rcx,rdi
 100b8a6:	mov    QWORD PTR [rsp+0x20],rax
 100b8ab:	call   0x100b960
 100b8b0:	mov    rdx,QWORD PTR [rbx+0x50]
 100b8b4:	lea    r8,[rdi+0x6db0]
 100b8bb:	mov    QWORD PTR [rbx+0x48],rax
 100b8bf:	lea    rax,[rbx+0xc8]
 100b8c6:	mov    r9d,0x104
 100b8cc:	mov    rcx,rdi
 100b8cf:	mov    QWORD PTR [rsp+0x20],rax
 100b8d4:	call   0x100b960
 100b8d9:	mov    rdx,QWORD PTR [rbx+0x80]
 100b8e0:	lea    r8,[rdi+0x2020]
 100b8e7:	mov    QWORD PTR [rbx+0x50],rax
 100b8eb:	lea    rax,[rbx+0xc0]
 100b8f2:	mov    r9d,0x104
 100b8f8:	mov    rcx,rdi
 100b8fb:	mov    QWORD PTR [rsp+0x20],rax
 100b900:	call   0x100b960
 100b905:	lea    rdx,[rbx+0xd0]
 100b90c:	mov    r8d,0x1000
 100b912:	mov    rcx,rdi
 100b915:	mov    QWORD PTR [rbx+0x80],rax
 100b91c:	call   0x1010770
 100b921:	lea    rdx,[rbx+0x8e8]
 100b928:	mov    r8d,0x1000
 100b92e:	mov    rcx,rdi
 100b931:	call   0x1010770
 100b936:	mov    eax,0x1
 100b93b:	mov    rbp,QWORD PTR [rsp+0x40]
 100b940:	mov    rbx,QWORD PTR [rsp+0x48]
 100b945:	mov    rsi,QWORD PTR [rsp+0x50]
 100b94a:	add    rsp,0x30
 100b94e:	pop    rdi
 100b94f:	ret    
 100b950:	int3   
 100b951:	int3   
 100b952:	int3   
 100b953:	int3   
 100b954:	int3   
 100b955:	int3   
 100b956:	int3   
 100b957:	int3   
 100b958:	int3   
 100b959:	int3   
 100b95a:	int3   
 100b95b:	int3   
 100b95c:	int3   
 100b95d:	int3   
 100b95e:	int3   
 100b95f:	int3   
 100b960:	rex push rbx
 100b962:	push   rsi
 100b963:	push   rdi
 100b964:	push   r14
 100b966:	sub    rsp,0x868
 100b96d:	mov    rax,QWORD PTR [rip+0xb82c]        # 0x10171a0
 100b974:	xor    rax,rsp
 100b977:	mov    QWORD PTR [rsp+0x850],rax
 100b97f:	mov    r14,QWORD PTR [rsp+0x8b0]
 100b987:	mov    rbx,r8
 100b98a:	mov    rdi,rdx
 100b98d:	mov    QWORD PTR [rsp+0x40],0x0
 100b996:	test   rdx,rdx
 100b999:	je     0x100badb
 100b99f:	lea    rax,[rsp+0x40]
 100b9a4:	add    r9,r9
 100b9a7:	mov    QWORD PTR [rsp+0x20],rax
 100b9ac:	call   0x100bb00
 100b9b1:	mov    esi,eax
 100b9b3:	test   eax,eax
 100b9b5:	js     0x100ba61
 100b9bb:	mov    rax,QWORD PTR [rsp+0x40]
 100b9c0:	shr    rax,1
 100b9c3:	test   rbx,rbx
 100b9c6:	je     0x100b9e7
 100b9c8:	cmp    rax,0x7fffffff
 100b9ce:	ja     0x100b9e7
 100b9d0:	mov    rcx,rbx
 100b9d3:	test   rax,rax
 100b9d6:	je     0x100b9e7
 100b9d8:	cmp    WORD PTR [rcx],0x0
 100b9dc:	je     0x100ba11
 100b9de:	add    rcx,0x2
 100b9e2:	dec    rax
 100b9e5:	jne    0x100b9d8
 100b9e7:	or     DWORD PTR [rip+0xb70f],0x20000800        # 0x1017100
 100b9f1:	lea    r8,[rip+0xffffffffffff6448]        # 0x1001e40
 100b9f8:	lea    rcx,[rip+0xb851]        # 0x1017250
 100b9ff:	mov    r9,rdi
 100ba02:	mov    edx,0x1
 100ba07:	call   0x1007f00
 100ba0c:	jmp    0x100badb
 100ba11:	test   rax,rax
 100ba14:	je     0x100b9e7
 100ba16:	test   r14,r14
 100ba19:	je     0x100ba2a
 100ba1b:	mov    rcx,rbx
 100ba1e:	call   0x1011910
 100ba23:	mov    ecx,DWORD PTR [r14]
 100ba26:	cmp    eax,ecx
 100ba28:	jne    0x100ba32
 100ba2a:	mov    rax,rbx
 100ba2d:	jmp    0x100badd
 100ba32:	or     DWORD PTR [rip+0xb6c4],0x20000400        # 0x1017100
 100ba3c:	mov    DWORD PTR [rsp+0x28],ecx
 100ba40:	lea    r8,[rip+0xffffffffffff6379]        # 0x1001dc0
 100ba47:	lea    rcx,[rip+0xb802]        # 0x1017250
 100ba4e:	mov    r9,rdi
 100ba51:	mov    edx,0x1
 100ba56:	mov    DWORD PTR [rsp+0x20],eax
 100ba5a:	call   0x1007f00
 100ba5f:	jmp    0x100badb
 100ba61:	or     DWORD PTR [rip+0xb695],0x20000200        # 0x1017100
 100ba6b:	lea    rax,[rsp+0x50]
 100ba70:	mov    QWORD PTR [rsp+0x30],0x0
 100ba79:	mov    r9d,0x400
 100ba7f:	mov    r8d,esi
 100ba82:	xor    edx,edx
 100ba84:	mov    ecx,0x1000
 100ba89:	mov    DWORD PTR [rsp+0x28],0x400
 100ba91:	mov    QWORD PTR [rsp+0x20],rax
 100ba96:	call   QWORD PTR [rip+0xffffffffffff564c]        # 0x10010e8
 100ba9c:	mov    r9,rdi
 100ba9f:	mov    edx,0x1
 100baa4:	lea    rcx,[rip+0xb7a5]        # 0x1017250
 100baab:	test   eax,eax
 100baad:	je     0x100bacb
 100baaf:	lea    rax,[rsp+0x50]
 100bab4:	lea    r8,[rip+0xffffffffffff63d5]        # 0x1001e90
 100babb:	mov    QWORD PTR [rsp+0x28],rax
 100bac0:	mov    DWORD PTR [rsp+0x20],esi
 100bac4:	call   0x1007f00
 100bac9:	jmp    0x100badb
 100bacb:	lea    r8,[rip+0xffffffffffff641e]        # 0x1001ef0
 100bad2:	mov    DWORD PTR [rsp+0x20],esi
 100bad6:	call   0x1007f00
 100badb:	xor    eax,eax
 100badd:	mov    rcx,QWORD PTR [rsp+0x850]
 100bae5:	xor    rcx,rsp
 100bae8:	call   0x1011420
 100baed:	add    rsp,0x868
 100baf4:	pop    r14
 100baf6:	pop    rdi
 100baf7:	pop    rsi
 100baf8:	pop    rbx
 100baf9:	ret    
 100bafa:	int3   
 100bafb:	int3   
 100bafc:	int3   
 100bafd:	int3   
 100bafe:	int3   
 100baff:	int3   
 100bb00:	mov    QWORD PTR [rsp+0x8],rbx
 100bb05:	mov    QWORD PTR [rsp+0x10],rbp
 100bb0a:	mov    QWORD PTR [rsp+0x18],rsi
 100bb0f:	push   rdi
 100bb10:	push   r14
 100bb12:	push   r15
 100bb14:	sub    rsp,0x30
 100bb18:	mov    rsi,QWORD PTR [rsp+0x70]
 100bb1d:	xor    r15d,r15d
 100bb20:	mov    rbx,r9
 100bb23:	mov    rbp,r8
 100bb26:	mov    rdi,rdx
 100bb29:	mov    r14,rcx
 100bb2c:	mov    QWORD PTR [rsi],r15
 100bb2f:	test   r9,r9
 100bb32:	je     0x100bb8b
 100bb34:	data16 data16 data16 nop WORD PTR [rax+rax*1+0x0]
 100bb40:	mov    r9d,DWORD PTR [r14+0x14]
 100bb44:	lea    rax,[rsp+0x70]
 100bb49:	mov    r8,rbp
 100bb4c:	lea    ecx,[r9-0x1]
 100bb50:	mov    rdx,rdi
 100bb53:	mov    QWORD PTR [rsp+0x70],r15
 100bb58:	and    rcx,rdi
 100bb5b:	mov    QWORD PTR [rsp+0x20],rax
 100bb60:	sub    r9,rcx
 100bb63:	mov    rcx,QWORD PTR [r14+0x8]
 100bb67:	cmp    rbx,r9
 100bb6a:	cmovb  r9,rbx
 100bb6e:	call   QWORD PTR [rip+0xffffffffffff56a4]        # 0x1001218
 100bb74:	test   eax,eax
 100bb76:	je     0x100bba7
 100bb78:	mov    rcx,QWORD PTR [rsp+0x70]
 100bb7d:	add    QWORD PTR [rsi],rcx
 100bb80:	add    rdi,rcx
 100bb83:	add    rbp,rcx
 100bb86:	sub    rbx,rcx
 100bb89:	jne    0x100bb40
 100bb8b:	mov    eax,r15d
 100bb8e:	mov    rbx,QWORD PTR [rsp+0x50]
 100bb93:	mov    rbp,QWORD PTR [rsp+0x58]
 100bb98:	mov    rsi,QWORD PTR [rsp+0x60]
 100bb9d:	add    rsp,0x30
 100bba1:	pop    r15
 100bba3:	pop    r14
 100bba5:	pop    rdi
 100bba6:	ret    
 100bba7:	cmp    QWORD PTR [rsi],r15
 100bbaa:	jne    0x100bb8b
 100bbac:	call   QWORD PTR [rip+0xffffffffffff566e]        # 0x1001220
 100bbb2:	test   eax,eax
 100bbb4:	jle    0x100bb8e
 100bbb6:	movzx  eax,ax
 100bbb9:	or     eax,0x80070000
 100bbbe:	jmp    0x100bb8e
 100bbc0:	int3   
 100bbc1:	int3   
 100bbc2:	int3   
 100bbc3:	int3   
 100bbc4:	int3   
 100bbc5:	int3   
 100bbc6:	int3   
 100bbc7:	int3   
 100bbc8:	int3   
 100bbc9:	int3   
 100bbca:	int3   
 100bbcb:	int3   
 100bbcc:	int3   
 100bbcd:	int3   
 100bbce:	int3   
 100bbcf:	int3   
 100bbd0:	rex push rbx
 100bbd2:	push   rsi
 100bbd3:	push   rdi
 100bbd4:	sub    rsp,0x860
 100bbdb:	mov    rax,QWORD PTR [rip+0xb5be]        # 0x10171a0
 100bbe2:	xor    rax,rsp
 100bbe5:	mov    QWORD PTR [rsp+0x850],rax
 100bbed:	lea    rax,[rsp+0x40]
 100bbf2:	mov    rdi,r9
 100bbf5:	mov    rbx,rdx
 100bbf8:	mov    QWORD PTR [rsp+0x20],rax
 100bbfd:	mov    QWORD PTR [rsp+0x40],0x0
 100bc06:	call   0x100bb00
 100bc0b:	mov    esi,eax
 100bc0d:	test   eax,eax
 100bc0f:	js     0x100bc5d
 100bc11:	mov    rax,QWORD PTR [rsp+0x40]
 100bc16:	cmp    rax,rdi
 100bc19:	jne    0x100bc25
 100bc1b:	mov    eax,0x1
 100bc20:	jmp    0x100bd02
 100bc25:	or     DWORD PTR [rip+0xb4d1],0x20000200        # 0x1017100
 100bc2f:	lea    rcx,[rdi+rbx*1]
 100bc33:	mov    QWORD PTR [rsp+0x28],rax
 100bc38:	mov    QWORD PTR [rsp+0x20],rcx
 100bc3d:	lea    r8,[rip+0xffffffffffff600c]        # 0x1001c50
 100bc44:	lea    rcx,[rip+0xb605]        # 0x1017250
 100bc4b:	mov    r9,rbx
 100bc4e:	mov    edx,0x1
 100bc53:	call   0x1007f00
 100bc58:	jmp    0x100bd00
 100bc5d:	or     DWORD PTR [rip+0xb499],0x20000200        # 0x1017100
 100bc67:	lea    rax,[rsp+0x50]
 100bc6c:	mov    QWORD PTR [rsp+0x30],0x0
 100bc75:	mov    r9d,0x400
 100bc7b:	mov    r8d,esi
 100bc7e:	xor    edx,edx
 100bc80:	mov    ecx,0x1000
 100bc85:	mov    DWORD PTR [rsp+0x28],0x400
 100bc8d:	mov    QWORD PTR [rsp+0x20],rax
 100bc92:	call   QWORD PTR [rip+0xffffffffffff5450]        # 0x10010e8
 100bc98:	lea    rcx,[rdi+rbx*1]
 100bc9c:	mov    r9,rbx
 100bc9f:	mov    edx,0x1
 100bca4:	test   eax,eax
 100bca6:	je     0x100bcda
 100bca8:	lea    rax,[rsp+0x50]
 100bcad:	lea    r8,[rip+0xffffffffffff5ffc]        # 0x1001cb0
 100bcb4:	mov    QWORD PTR [rsp+0x38],rax
 100bcb9:	mov    rax,QWORD PTR [rsp+0x40]
 100bcbe:	mov    DWORD PTR [rsp+0x30],esi
 100bcc2:	mov    QWORD PTR [rsp+0x28],rax
 100bcc7:	mov    QWORD PTR [rsp+0x20],rcx
 100bccc:	lea    rcx,[rip+0xb57d]        # 0x1017250
 100bcd3:	call   0x1007f00
 100bcd8:	jmp    0x100bd00
 100bcda:	mov    rax,QWORD PTR [rsp+0x40]
 100bcdf:	mov    DWORD PTR [rsp+0x30],esi
 100bce3:	lea    r8,[rip+0xffffffffffff6046]        # 0x1001d30
 100bcea:	mov    QWORD PTR [rsp+0x28],rax
 100bcef:	mov    QWORD PTR [rsp+0x20],rcx
 100bcf4:	lea    rcx,[rip+0xb555]        # 0x1017250
 100bcfb:	call   0x1007f00
 100bd00:	xor    eax,eax
 100bd02:	mov    rcx,QWORD PTR [rsp+0x850]
 100bd0a:	xor    rcx,rsp
 100bd0d:	call   0x1011420
 100bd12:	add    rsp,0x860
 100bd19:	pop    rdi
 100bd1a:	pop    rsi
 100bd1b:	pop    rbx
 100bd1c:	ret    
 100bd1d:	int3   
 100bd1e:	int3   
 100bd1f:	int3   
 100bd20:	int3   
 100bd21:	int3   
 100bd22:	int3   
 100bd23:	int3   
 100bd24:	int3   
 100bd25:	int3   
 100bd26:	int3   
 100bd27:	int3   
 100bd28:	int3   
 100bd29:	int3   
 100bd2a:	int3   
 100bd2b:	int3   
 100bd2c:	int3   
 100bd2d:	int3   
 100bd2e:	int3   
 100bd2f:	int3   
 100bd30:	mov    QWORD PTR [rsp+0x10],rbx
 100bd35:	mov    QWORD PTR [rsp+0x18],rsi
 100bd3a:	push   rbp
 100bd3b:	push   rdi
 100bd3c:	push   r14
 100bd3e:	lea    rbp,[rsp-0x7b0]
 100bd46:	sub    rsp,0x8b0
 100bd4d:	mov    rax,QWORD PTR [rip+0xb44c]        # 0x10171a0
 100bd54:	xor    rax,rsp
 100bd57:	mov    QWORD PTR [rbp+0x7a0],rax
 100bd5e:	xor    eax,eax
 100bd60:	mov    rbx,rcx
 100bd63:	mov    DWORD PTR [rcx],0x4
 100bd69:	lea    rcx,[rip+0xffffffffffffc0f0]        # 0x1007e60
 100bd70:	lea    edx,[rax+0x1]
 100bd73:	xor    r14d,r14d
 100bd76:	mov    QWORD PTR [rsp+0x40],r14
 100bd7b:	mov    DWORD PTR [rsp+0x48],eax
 100bd7f:	call   QWORD PTR [rip+0xffffffffffff53d3]        # 0x1001158
 100bd85:	mov    rcx,QWORD PTR [rbx+0x688]
 100bd8c:	lea    r11,[rip+0x30d]        # 0x100c0a0
 100bd93:	mov    QWORD PTR [rbp-0x68],rbx
 100bd97:	mov    QWORD PTR [rbp-0x70],r11
 100bd9b:	test   rcx,rcx
 100bd9e:	je     0x100bdd3
 100bda0:	mov    rax,QWORD PTR [rbx+0x690]
 100bda7:	test   rax,rax
 100bdaa:	je     0x100bdd3
 100bdac:	mov    QWORD PTR [rbp-0x80],rax
 100bdb0:	mov    eax,DWORD PTR [rbx+0x704]
 100bdb6:	mov    QWORD PTR [rbp-0x78],rcx
 100bdba:	mov    DWORD PTR [rsp+0x70],eax
 100bdbe:	lea    rax,[rbp-0x80]
 100bdc2:	lea    rsi,[rsp+0x70]
 100bdc7:	mov    QWORD PTR [rsp+0x74],rax
 100bdcc:	mov    DWORD PTR [rsp+0x7c],r14d
 100bdd1:	jmp    0x100bdd6
 100bdd3:	mov    rsi,r14
 100bdd6:	mov    rax,QWORD PTR [rbx+0x6b0]
 100bddd:	mov    r9d,0x2
 100bde3:	mov    DWORD PTR [rsp+0x50],0xb
 100bdeb:	mov    QWORD PTR [rsp+0x58],rax
 100bdf0:	mov    rax,QWORD PTR [rbx+0x6a8]
 100bdf7:	mov    DWORD PTR [rsp+0x60],0xb
 100bdff:	lea    r8,[rsp+0x54]
 100be04:	mov    r10d,r9d
 100be07:	mov    QWORD PTR [rsp+0x68],rax
 100be0c:	nop    DWORD PTR [rax+0x0]
 100be10:	mov    rax,QWORD PTR [r8+0x4]
 100be14:	test   rax,rax
 100be17:	je     0x100be59
 100be19:	mov    ecx,0x1000
 100be1e:	mov    edx,r14d
 100be21:	cmp    WORD PTR [rax],dx
 100be24:	je     0x100be39
 100be26:	add    rax,0x2
 100be2a:	dec    rcx
 100be2d:	jne    0x100be21
 100be2f:	mov    edx,0x80070057
 100be34:	mov    rax,r14
 100be37:	jmp    0x100be50
 100be39:	test   rcx,rcx
 100be3c:	jne    0x100be48
 100be3e:	mov    edx,0x80070057
 100be43:	mov    rax,r14
 100be46:	jmp    0x100be50
 100be48:	mov    eax,0x1000
 100be4d:	sub    rax,rcx
 100be50:	test   edx,edx
 100be52:	js     0x100be5e
 100be54:	add    rax,rax
 100be57:	jmp    0x100be61
 100be59:	mov    edx,0x80070057
 100be5e:	mov    rax,r14
 100be61:	test   edx,edx
 100be63:	js     0x100be72
 100be65:	test   rax,rax
 100be68:	je     0x100be72
 100be6a:	add    eax,0x2
 100be6d:	mov    DWORD PTR [r8],eax
 100be70:	jmp    0x100be78
 100be72:	dec    r9d
 100be75:	mov    DWORD PTR [r8],r14d
 100be78:	add    r8,0x10
 100be7c:	dec    r10
 100be7f:	jne    0x100be10
 100be81:	mov    DWORD PTR [rsp+0x40],r9d
 100be86:	dec    r9d
 100be89:	je     0x100be97
 100be8b:	dec    r9d
 100be8e:	jne    0x100beaf
 100be90:	lea    rax,[rsp+0x50]
 100be95:	jmp    0x100beaa
 100be97:	cmp    DWORD PTR [rsp+0x54],r14d
 100be9c:	lea    rax,[rsp+0x60]
 100bea1:	lea    rcx,[rsp+0x50]
 100bea6:	cmovne rax,rcx
 100beaa:	mov    QWORD PTR [rsp+0x44],rax
 100beaf:	mov    edi,DWORD PTR [rbx+0x66c]
 100beb5:	mov    rcx,rbx
 100beb8:	call   0x100e2a0
 100bebd:	mov    r11d,DWORD PTR [rbx+0x670]
 100bec4:	mov    eax,DWORD PTR [rbx+0x19c8]
 100beca:	test   r11d,r11d
 100becd:	cmovne edi,r11d
 100bed1:	test   eax,0x9000
 100bed6:	jne    0x100beef
 100bed8:	cmp    DWORD PTR [rbx+0x6d4],r14d
 100bedf:	je     0x100bee5
 100bee1:	test   al,0x20
 100bee3:	je     0x100beef
 100bee5:	xor    edx,edx
 100bee7:	mov    rcx,rbx
 100beea:	call   0x1009ab0
 100beef:	mov    r8,QWORD PTR [rbx+0x660]
 100bef6:	mov    edx,DWORD PTR [rbx+0x6d8]
 100befc:	mov    rcx,QWORD PTR [rbx+0x8]
 100bf00:	lea    rax,[rbp-0x70]
 100bf04:	mov    r9d,edi
 100bf07:	mov    QWORD PTR [rsp+0x30],rax
 100bf0c:	lea    rax,[rsp+0x40]
 100bf11:	mov    QWORD PTR [rsp+0x28],rax
 100bf16:	mov    QWORD PTR [rsp+0x20],rsi
 100bf1b:	call   0x10118b0
 100bf20:	test   eax,eax
 100bf22:	je     0x100bf90
 100bf24:	lea    r9,[rbx+0x24a]
 100bf2b:	lea    r8,[rip+0xffffffffffff7fe6]        # 0x1003f18
 100bf32:	lea    rcx,[rip+0xb317]        # 0x1017250
 100bf39:	mov    edx,0x2
 100bf3e:	mov    DWORD PTR [rbx],0x5
 100bf44:	call   0x1007f00
 100bf49:	mov    r9,QWORD PTR [rbx+0x78f0]
 100bf50:	test   r9,r9
 100bf53:	je     0x100bf70
 100bf55:	lea    r8,[rip+0xffffffffffff7ff4]        # 0x1003f50
 100bf5c:	lea    rcx,[rip+0xb2ed]        # 0x1017250
 100bf63:	shr    r9,1
 100bf66:	mov    edx,0x2
 100bf6b:	call   0x1007f00
 100bf70:	lea    rdx,[rip+0xffffffffffff8021]        # 0x1003f98
 100bf77:	mov    rcx,rbx
 100bf7a:	call   0x100c5c0
 100bf7f:	lea    rdx,[rip+0xffffffffffff802a]        # 0x1003fb0
 100bf86:	mov    rcx,rbx
 100bf89:	call   0x100c5c0
 100bf8e:	jmp    0x100c004
 100bf90:	call   QWORD PTR [rip+0xffffffffffff528a]        # 0x1001220
 100bf96:	mov    QWORD PTR [rsp+0x30],r14
 100bf9b:	mov    r9d,0x400
 100bfa1:	mov    edi,eax
 100bfa3:	lea    rax,[rbp-0x60]
 100bfa7:	xor    edx,edx
 100bfa9:	mov    ecx,0x1000
 100bfae:	mov    r8d,edi
 100bfb1:	mov    DWORD PTR [rsp+0x28],0x400
 100bfb9:	mov    QWORD PTR [rsp+0x20],rax
 100bfbe:	call   QWORD PTR [rip+0xffffffffffff5124]        # 0x10010e8
 100bfc4:	mov    r9d,edi
 100bfc7:	mov    edx,0x1
 100bfcc:	lea    rcx,[rip+0xb27d]        # 0x1017250
 100bfd3:	test   eax,eax
 100bfd5:	je     0x100bfee
 100bfd7:	lea    rax,[rbp-0x60]
 100bfdb:	lea    r8,[rip+0xffffffffffff7fee]        # 0x1003fd0
 100bfe2:	mov    QWORD PTR [rsp+0x20],rax
 100bfe7:	call   0x1007f00
 100bfec:	jmp    0x100bffa
 100bfee:	lea    r8,[rip+0xffffffffffff802b]        # 0x1004020
 100bff5:	call   0x1007f00
 100bffa:	or     DWORD PTR [rip+0xb0fc],0x20000010        # 0x1017100
 100c004:	cmp    DWORD PTR [rbx+0x1a330],r14d
 100c00b:	jbe    0x100c065
 100c00d:	nop    DWORD PTR [rax]
 100c010:	dec    DWORD PTR [rbx+0x1a330]
 100c016:	mov    eax,DWORD PTR [rbx+0x1a330]
 100c01c:	mov    rdi,QWORD PTR [rbx+rax*8+0x1a338]
 100c024:	mov    rcx,rdi
 100c027:	call   QWORD PTR [rip+0xffffffffffff51cb]        # 0x10011f8
 100c02d:	cmp    eax,0xffffffff
 100c030:	jne    0x100c053
 100c032:	call   QWORD PTR [rip+0xffffffffffff51e8]        # 0x1001220
 100c038:	lea    r8,[rip+0xffffffffffff95c1]        # 0x1005600
 100c03f:	lea    rcx,[rip+0xb20a]        # 0x1017250
 100c046:	mov    r9d,eax
 100c049:	mov    edx,0x1
 100c04e:	call   0x1007f00
 100c053:	mov    rcx,rdi
 100c056:	call   QWORD PTR [rip+0xffffffffffff507c]        # 0x10010d8
 100c05c:	cmp    DWORD PTR [rbx+0x1a330],r14d
 100c063:	ja     0x100c010
 100c065:	xor    edx,edx
 100c067:	xor    ecx,ecx
 100c069:	call   QWORD PTR [rip+0xffffffffffff50e9]        # 0x1001158
 100c06f:	mov    rcx,QWORD PTR [rbp+0x7a0]
 100c076:	xor    rcx,rsp
 100c079:	call   0x1011420
 100c07e:	lea    r11,[rsp+0x8b0]
 100c086:	mov    rbx,QWORD PTR [r11+0x28]
 100c08a:	mov    rsi,QWORD PTR [r11+0x30]
 100c08e:	mov    rsp,r11
 100c091:	pop    r14
 100c093:	pop    rdi
 100c094:	pop    rbp
 100c095:	ret    
 100c096:	int3   
 100c097:	int3   
 100c098:	int3   
 100c099:	int3   
 100c09a:	int3   
 100c09b:	int3   
 100c09c:	int3   
 100c09d:	int3   
 100c09e:	int3   
 100c09f:	int3   
 100c0a0:	jmp    0x100c0b0
 100c0a5:	int3   
 100c0a6:	int3   
 100c0a7:	int3   
 100c0a8:	int3   
 100c0a9:	int3   
 100c0aa:	int3   
 100c0ab:	int3   
 100c0ac:	int3   
 100c0ad:	int3   
 100c0ae:	int3   
 100c0af:	int3   
 100c0b0:	mov    QWORD PTR [rsp+0x8],rbx
 100c0b5:	mov    QWORD PTR [rsp+0x18],rsi
 100c0ba:	push   rdi
 100c0bb:	sub    rsp,0x30
 100c0bf:	mov    rbx,rcx
 100c0c2:	mov    ecx,DWORD PTR [rdx+0xc]
 100c0c5:	mov    rsi,r8
 100c0c8:	cmp    ecx,0xe
 100c0cb:	ja     0x100c547
 100c0d1:	lea    r8,[rip+0xffffffffffff3f28]        # 0x1000000
 100c0d8:	mov    r9d,DWORD PTR [r8+rcx*4+0xc57c]
 100c0e0:	add    r9,r8
 100c0e3:	jmp    r9
 100c0e6:	mov    DWORD PTR [rsi],0x2f
 100c0ec:	mov    rcx,QWORD PTR [rbx+0x690]
 100c0f3:	xor    edi,edi
 100c0f5:	mov    r9d,0x104
 100c0fb:	test   rcx,rcx
 100c0fe:	je     0x100c1b5
 100c104:	mov    rax,QWORD PTR [rbx+0x73e8]
 100c10b:	mov    rcx,QWORD PTR [rcx+0x10]
 100c10f:	cmp    rax,rdi
 100c112:	cmove  rax,rcx
 100c116:	mov    QWORD PTR [rbx+0x73e8],rax
 100c11d:	mov    r8,QWORD PTR [rdx+0x18]
 100c121:	cmp    rcx,r8
 100c124:	jb     0x100c1b5
 100c12a:	mov    eax,DWORD PTR [rdx+0x20]
 100c12d:	add    rax,r8
 100c130:	cmp    rcx,rax
 100c133:	jae    0x100c1b5
 100c139:	sub    rcx,r8
 100c13c:	mov    r11d,edi
 100c13f:	mov    r8d,r9d
 100c142:	mov    QWORD PTR [rbx+0x73e8],rcx
 100c149:	mov    eax,DWORD PTR [rdx+0x34]
 100c14c:	lea    rcx,[rbx+0x71d0]
 100c153:	mov    DWORD PTR [rbx+0x73d8],eax
 100c159:	mov    eax,DWORD PTR [rdx+0x38]
 100c15c:	mov    DWORD PTR [rbx+0x73dc],eax
 100c162:	mov    eax,DWORD PTR [rdx+0x28]
 100c165:	mov    DWORD PTR [rbx+0x73e0],eax
 100c16b:	mov    r10,QWORD PTR [rdx+0x10]
 100c16f:	nop
 100c170:	lea    rax,[r8+0x7ffffefa]
 100c177:	test   rax,rax
 100c17a:	je     0x100c197
 100c17c:	movzx  eax,WORD PTR [r10]
 100c180:	test   ax,ax
 100c183:	je     0x100c197
 100c185:	mov    WORD PTR [rcx],ax
 100c188:	add    rcx,0x2
 100c18c:	add    r10,0x2
 100c190:	dec    r8
 100c193:	jne    0x100c170
 100c195:	jmp    0x100c19c
 100c197:	test   r8,r8
 100c19a:	jne    0x100c1a6
 100c19c:	sub    rcx,0x2
 100c1a0:	mov    r11d,0x8007007a
 100c1a6:	mov    WORD PTR [rcx],di
 100c1a9:	test   r11d,r11d
 100c1ac:	jns    0x100c1b5
 100c1ae:	mov    WORD PTR [rbx+0x71d0],di
 100c1b5:	cmp    WORD PTR [rbx+0x6fb8],di
 100c1bc:	jne    0x100c245
 100c1c2:	cmp    DWORD PTR [rdx+0x50],0x1
 100c1c6:	jne    0x100c245
 100c1c8:	mov    eax,DWORD PTR [rdx+0x34]
 100c1cb:	lea    rcx,[rbx+0x6fb8]
 100c1d2:	mov    r11d,edi
 100c1d5:	mov    DWORD PTR [rbx+0x71c0],eax
 100c1db:	mov    eax,DWORD PTR [rdx+0x38]
 100c1de:	mov    DWORD PTR [rbx+0x71c4],eax
 100c1e4:	mov    eax,DWORD PTR [rdx+0x48]
 100c1e7:	and    eax,0x1
 100c1ea:	mov    DWORD PTR [rbx+0x71cc],eax
 100c1f0:	mov    eax,DWORD PTR [rdx+0x28]
 100c1f3:	mov    DWORD PTR [rbx+0x71c8],eax
 100c1f9:	mov    r8,QWORD PTR [rdx+0x10]
 100c1fd:	nop    DWORD PTR [rax]
 100c200:	lea    rax,[r9+0x7ffffefa]
 100c207:	test   rax,rax
 100c20a:	je     0x100c227
 100c20c:	movzx  eax,WORD PTR [r8]
 100c210:	test   ax,ax
 100c213:	je     0x100c227
 100c215:	mov    WORD PTR [rcx],ax
 100c218:	add    rcx,0x2
 100c21c:	add    r8,0x2
 100c220:	dec    r9
 100c223:	jne    0x100c200
 100c225:	jmp    0x100c22c
 100c227:	test   r9,r9
 100c22a:	jne    0x100c236
 100c22c:	sub    rcx,0x2
 100c230:	mov    r11d,0x8007007a
 100c236:	mov    WORD PTR [rcx],di
 100c239:	test   r11d,r11d
 100c23c:	jns    0x100c245
 100c23e:	mov    WORD PTR [rbx+0x6fb8],di
 100c245:	test   BYTE PTR [rbx+0x668],0x4
 100c24c:	je     0x100c562
 100c252:	cmp    DWORD PTR [rbx+0x19920],edi
 100c258:	jne    0x100c562
 100c25e:	add    rdx,0x10
 100c262:	mov    rcx,rbx
 100c265:	call   0x100dc20
 100c26a:	jmp    0x100c562
 100c26f:	mov    ecx,DWORD PTR [rbx+0x6d4]
 100c275:	mov    eax,DWORD PTR [rdx+0x10]
 100c278:	test   ecx,ecx
 100c27a:	je     0x100c29a
 100c27c:	test   BYTE PTR [rbx+0x668],0x20
 100c283:	jne    0x100c29a
 100c285:	cmp    ecx,eax
 100c287:	je     0x100c29a
 100c289:	cmp    DWORD PTR [rbx+0x704],eax
 100c28f:	je     0x100c29a
 100c291:	xor    edi,edi
 100c293:	mov    DWORD PTR [rsi],edi
 100c295:	jmp    0x100c562
 100c29a:	or     DWORD PTR [rsi],0x7f
 100c29d:	jmp    0x100c562
 100c2a2:	mov    ecx,DWORD PTR [rbx+0x6d4]
 100c2a8:	mov    eax,DWORD PTR [rdx+0x10]
 100c2ab:	test   ecx,ecx
 100c2ad:	je     0x100c562
 100c2b3:	test   BYTE PTR [rbx+0x668],0x20
 100c2ba:	jne    0x100c562
 100c2c0:	cmp    ecx,eax
 100c2c2:	je     0x100c562
 100c2c8:	cmp    DWORD PTR [rbx+0x704],eax
 100c2ce:	je     0x100c562
 100c2d4:	xor    edi,edi
 100c2d6:	mov    eax,edi
 100c2d8:	mov    rbx,QWORD PTR [rsp+0x40]
 100c2dd:	mov    rsi,QWORD PTR [rsp+0x50]
 100c2e2:	add    rsp,0x30
 100c2e6:	pop    rdi
 100c2e7:	ret    
 100c2e8:	mov    r8d,0x80000000
 100c2ee:	cmp    QWORD PTR [rbx+0x22338],r8
 100c2f5:	jb     0x100c32c
 100c2f7:	mov    ecx,0x1
 100c2fc:	lea    r8,[rip+0xffffffffffff7ead]        # 0x10041b0
 100c303:	lea    edx,[rcx+0x1]
 100c306:	mov    DWORD PTR [rbx+0x22340],ecx
 100c30c:	lea    rcx,[rip+0xaf3d]        # 0x1017250
 100c313:	call   0x1007f00
 100c318:	xor    edi,edi
 100c31a:	mov    eax,edi
 100c31c:	mov    rbx,QWORD PTR [rsp+0x40]
 100c321:	mov    rsi,QWORD PTR [rsp+0x50]
 100c326:	add    rsp,0x30
 100c32a:	pop    rdi
 100c32b:	ret    
 100c32c:	xor    edi,edi
 100c32e:	cmp    DWORD PTR [rbx+0x7830],edi
 100c334:	jbe    0x100c370
 100c336:	mov    QWORD PTR [rsi],r8
 100c339:	mov    eax,DWORD PTR [rbx+0x7830]
 100c33f:	mov    ecx,0x1
 100c344:	mov    DWORD PTR [rsi+0x8],eax
 100c347:	mov    DWORD PTR [rbx+0x7830],edi
 100c34d:	mov    eax,DWORD PTR [rsi+0x8]
 100c350:	add    QWORD PTR [rbx+0x22338],rax
 100c357:	mov    eax,ecx
 100c359:	mov    edi,ecx
 100c35b:	mov    rbx,QWORD PTR [rsp+0x40]
 100c360:	mov    rsi,QWORD PTR [rsp+0x50]
 100c365:	add    rsp,0x30
 100c369:	pop    rdi
 100c36a:	ret    
 100c36b:	nop    DWORD PTR [rax+rax*1+0x0]
 100c370:	mov    rcx,QWORD PTR [rbx+0x7810]
 100c377:	test   rcx,rcx
 100c37a:	je     0x100c444
 100c380:	mov    eax,DWORD PTR [rcx+0xc]
 100c383:	cmp    QWORD PTR [rbx+0x7818],rax
 100c38a:	jb     0x100c39d
 100c38c:	mov    rax,QWORD PTR [rcx]
 100c38f:	mov    QWORD PTR [rbx+0x7818],rdi
 100c396:	mov    QWORD PTR [rbx+0x7810],rax
 100c39d:	mov    rdx,QWORD PTR [rbx+0x7810]
 100c3a4:	test   rdx,rdx
 100c3a7:	je     0x100c444
 100c3ad:	mov    rcx,QWORD PTR [rbx+0x7818]
 100c3b4:	mov    eax,DWORD PTR [rdx+0xc]
 100c3b7:	cmp    rcx,rax
 100c3ba:	jae    0x100c444
 100c3c0:	lea    rax,[rcx+0x1]
 100c3c4:	add    rdx,0x18
 100c3c8:	shl    rcx,0x4
 100c3cc:	mov    QWORD PTR [rbx+0x7818],rax
 100c3d3:	add    rdx,rcx
 100c3d6:	je     0x100c444
 100c3d8:	cmp    QWORD PTR [rdx],rdi
 100c3db:	je     0x100c370
 100c3dd:	mov    rax,QWORD PTR [rdx+0x8]
 100c3e1:	cmp    rax,0x100000
 100c3e7:	ja     0x100c370
 100c3e9:	test   rax,rax
 100c3ec:	je     0x100c370
 100c3ee:	mov    rax,QWORD PTR [rdx]
 100c3f1:	mov    ecx,0x1
 100c3f6:	mov    QWORD PTR [rsi],rax
 100c3f9:	mov    eax,DWORD PTR [rdx+0x8]
 100c3fc:	mov    DWORD PTR [rsi+0x8],eax
 100c3ff:	mov    r9,QWORD PTR [rdx]
 100c402:	cmp    r9,r8
 100c405:	jae    0x100c426
 100c407:	mov    rax,r8
 100c40a:	sub    rax,r9
 100c40d:	cmp    rax,QWORD PTR [rdx+0x8]
 100c411:	jae    0x100c426
 100c413:	sub    r8d,r9d
 100c416:	mov    DWORD PTR [rsi+0x8],r8d
 100c41a:	mov    eax,DWORD PTR [rdx+0x8]
 100c41d:	sub    eax,r8d
 100c420:	mov    DWORD PTR [rbx+0x7830],eax
 100c426:	mov    eax,DWORD PTR [rsi+0x8]
 100c429:	mov    edi,ecx
 100c42b:	add    QWORD PTR [rbx+0x22338],rax
 100c432:	mov    eax,ecx
 100c434:	mov    rbx,QWORD PTR [rsp+0x40]
 100c439:	mov    rsi,QWORD PTR [rsp+0x50]
 100c43e:	add    rsp,0x30
 100c442:	pop    rdi
 100c443:	ret    
 100c444:	mov    ecx,edi
 100c446:	mov    DWORD PTR [rbx+0x7830],edi
 100c44c:	mov    eax,edi
 100c44e:	mov    rbx,QWORD PTR [rsp+0x40]
 100c453:	mov    rsi,QWORD PTR [rsp+0x50]
 100c458:	add    rsp,0x30
 100c45c:	pop    rdi
 100c45d:	ret    
 100c45e:	mov    r8d,0x1
 100c464:	mov    rdx,rsi
 100c467:	mov    rcx,rbx
 100c46a:	call   0x100d890
 100c46f:	mov    edi,eax
 100c471:	mov    rbx,QWORD PTR [rsp+0x40]
 100c476:	mov    rsi,QWORD PTR [rsp+0x50]
 100c47b:	add    rsp,0x30
 100c47f:	pop    rdi
 100c480:	ret    
 100c481:	mov    ecx,0x1
 100c486:	mov    DWORD PTR [rsi+0x30],ecx
 100c489:	mov    edi,ecx
 100c48b:	cmp    DWORD PTR [rbx+0x7834],ecx
 100c491:	jne    0x100c567
 100c497:	mov    rax,QWORD PTR [rsi]
 100c49a:	lea    r8,[rsp+0x58]
 100c49f:	lea    rdx,[rsp+0x48]
 100c4a4:	mov    QWORD PTR [rsp+0x48],rax
 100c4a9:	mov    rax,QWORD PTR [rsi+0x18]
 100c4ad:	mov    rcx,rbx
 100c4b0:	mov    QWORD PTR [rsp+0x58],rax
 100c4b5:	call   0x100ce90
 100c4ba:	test   eax,eax
 100c4bc:	je     0x100c4e1
 100c4be:	mov    rax,QWORD PTR [rsp+0x48]
 100c4c3:	mov    QWORD PTR [rsi],rax
 100c4c6:	mov    rax,QWORD PTR [rsp+0x58]
 100c4cb:	mov    QWORD PTR [rsi+0x18],rax
 100c4cf:	mov    eax,edi
 100c4d1:	mov    rbx,QWORD PTR [rsp+0x40]
 100c4d6:	mov    rsi,QWORD PTR [rsp+0x50]
 100c4db:	add    rsp,0x30
 100c4df:	pop    rdi
 100c4e0:	ret    
 100c4e1:	mov    eax,DWORD PTR [rbx+0x78f8]
 100c4e7:	mov    rcx,QWORD PTR [rsi+0x18]
 100c4eb:	sub    rcx,rax
 100c4ee:	add    QWORD PTR [rsi],rcx
 100c4f1:	mov    eax,DWORD PTR [rbx+0x78f8]
 100c4f7:	mov    QWORD PTR [rsi+0x18],rax
 100c4fb:	mov    eax,edi
 100c4fd:	mov    rbx,QWORD PTR [rsp+0x40]
 100c502:	mov    rsi,QWORD PTR [rsp+0x50]
 100c507:	add    rsp,0x30
 100c50b:	pop    rdi
 100c50c:	ret    
 100c50d:	test   DWORD PTR [rbx+0x66c],0x20000
 100c517:	je     0x100c562
 100c519:	xor    edi,edi
 100c51b:	lea    r8,[rip+0xffffffffffff7b9e]        # 0x10040c0
 100c522:	lea    rcx,[rip+0xad27]        # 0x1017250
 100c529:	mov    DWORD PTR [rsi],edi
 100c52b:	mov    eax,DWORD PTR [rdx+0x1c]
 100c52e:	mov    r9,QWORD PTR [rdx+0x10]
 100c532:	mov    DWORD PTR [rsp+0x28],eax
 100c536:	mov    eax,DWORD PTR [rdx+0x18]
 100c539:	lea    edx,[rdi+0x2]
 100c53c:	mov    DWORD PTR [rsp+0x20],eax
 100c540:	call   0x1007f00
 100c545:	jmp    0x100c562
 100c547:	mov    r9d,ecx
 100c54a:	lea    r8,[rip+0xffffffffffff7c07]        # 0x1004158
 100c551:	lea    rcx,[rip+0xacf8]        # 0x1017250
 100c558:	mov    edx,0x2
 100c55d:	call   0x1007f00
 100c562:	mov    edi,0x1
 100c567:	mov    rbx,QWORD PTR [rsp+0x40]
 100c56c:	mov    rsi,QWORD PTR [rsp+0x50]
 100c571:	mov    eax,edi
 100c573:	add    rsp,0x30
 100c577:	pop    rdi
 100c578:	ret    
 100c579:	nop    DWORD PTR [rax]
 100c57c:	out    0xc0,al
 100c57e:	add    BYTE PTR [rax],al
 100c580:	outs   dx,DWORD PTR ds:[rsi]
 100c581:	ret    0x0
 100c584:	outs   dx,DWORD PTR ds:[rsi]
 100c585:	ret    0x0
 100c588:	movabs ds:0xe80000c5620000c2,al
 100c591:	ret    0x0
 100c594:	(bad)  
 100c595:	ret    0x0
 100c598:	(bad)
 100c59c:	(bad)
 100c5a0:	pop    rsi
 100c5a1:	(bad)  
 100c5a2:	add    BYTE PTR [rax],al
 100c5a4:	add    esp,0xc5470000
 100c5aa:	add    BYTE PTR [rax],al
 100c5ac:	(bad)
 100c5b0:	(bad)
 100c5b4:	or     eax,0xcc0000c5
 100c5b9:	int3   
 100c5ba:	int3   
 100c5bb:	int3   
 100c5bc:	int3   
 100c5bd:	int3   
 100c5be:	int3   
 100c5bf:	int3   
 100c5c0:	mov    QWORD PTR [rsp+0x8],rbx
 100c5c5:	push   rdi
 100c5c6:	sub    rsp,0x250
 100c5cd:	mov    rax,QWORD PTR [rip+0xabcc]        # 0x10171a0
 100c5d4:	xor    rax,rsp
 100c5d7:	mov    QWORD PTR [rsp+0x240],rax
 100c5df:	mov    rbx,rcx
 100c5e2:	mov    rcx,rdx
 100c5e5:	mov    rdi,rdx
 100c5e8:	call   QWORD PTR [rip+0xffffffffffff4b22]        # 0x1001110
 100c5ee:	test   rax,rax
 100c5f1:	jne    0x100c604
 100c5f3:	lea    rdx,[rip+0xffffffffffff9f9e]        # 0x1006598
 100c5fa:	mov    rcx,rbx
 100c5fd:	call   0x100c8d0
 100c602:	jmp    0x100c65f
 100c604:	lea    rdx,[rsp+0x30]
 100c609:	mov    r8d,0x104
 100c60f:	mov    rcx,rax
 100c612:	call   QWORD PTR [rip+0xffffffffffff4af0]        # 0x1001108
 100c618:	test   eax,eax
 100c61a:	jne    0x100c62d
 100c61c:	lea    rdx,[rip+0xffffffffffff9f95]        # 0x10065b8
 100c623:	mov    rcx,rbx
 100c626:	call   0x100c8d0
 100c62b:	jmp    0x100c65f
 100c62d:	lea    rax,[rsp+0x30]
 100c632:	lea    r8,[rip+0xffffffffffff9fa7]        # 0x10065e0
 100c639:	lea    rcx,[rip+0xac10]        # 0x1017250
 100c640:	mov    r9,rdi
 100c643:	mov    edx,0x2
 100c648:	mov    QWORD PTR [rsp+0x20],rax
 100c64d:	call   0x1007f00
 100c652:	lea    rdx,[rsp+0x30]
 100c657:	mov    rcx,rbx
 100c65a:	call   0x100c690
 100c65f:	mov    rcx,QWORD PTR [rsp+0x240]
 100c667:	xor    rcx,rsp
 100c66a:	call   0x1011420
 100c66f:	mov    rbx,QWORD PTR [rsp+0x260]
 100c677:	add    rsp,0x250
 100c67e:	pop    rdi
 100c67f:	ret    
 100c680:	int3   
 100c681:	int3   
 100c682:	int3   
 100c683:	int3   
 100c684:	int3   
 100c685:	int3   
 100c686:	int3   
 100c687:	int3   
 100c688:	int3   
 100c689:	int3   
 100c68a:	int3   
 100c68b:	int3   
 100c68c:	int3   
 100c68d:	int3   
 100c68e:	int3   
 100c68f:	int3   
 100c690:	mov    QWORD PTR [rsp+0x18],rbx
 100c695:	mov    QWORD PTR [rsp+0x20],rbp
 100c69a:	push   rsi
 100c69b:	sub    rsp,0xc0
 100c6a2:	mov    rax,QWORD PTR [rip+0xaaf7]        # 0x10171a0
 100c6a9:	xor    rax,rsp
 100c6ac:	mov    QWORD PTR [rsp+0xb8],rax
 100c6b4:	xor    eax,eax
 100c6b6:	mov    rbx,rdx
 100c6b9:	mov    rbp,rcx
 100c6bc:	lea    rdx,[rsp+0x50]
 100c6c1:	mov    rcx,rbx
 100c6c4:	mov    DWORD PTR [rsp+0x40],eax
 100c6c8:	mov    DWORD PTR [rsp+0x50],eax
 100c6cc:	mov    QWORD PTR [rsp+0x48],rax
 100c6d1:	call   0x1011a9c
 100c6d6:	mov    esi,eax
 100c6d8:	test   eax,eax
 100c6da:	jne    0x100c6f0
 100c6dc:	lea    rdx,[rip+0xffffffffffff9f45]        # 0x1006628
 100c6e3:	mov    rcx,rbp
 100c6e6:	call   0x100c8d0
 100c6eb:	jmp    0x100c8a0
 100c6f0:	mov    rcx,rsi
 100c6f3:	mov    QWORD PTR [rsp+0xd0],rdi
 100c6fb:	call   0x1011184
 100c700:	mov    rdi,rax
 100c703:	test   rax,rax
 100c706:	jne    0x100c717
 100c708:	mov    r9d,esi
 100c70b:	lea    r8,[rip+0xffffffffffff9f4e]        # 0x1006660
 100c712:	jmp    0x100c887
 100c717:	mov    r9,rax
 100c71a:	mov    r8d,esi
 100c71d:	xor    edx,edx
 100c71f:	mov    rcx,rbx
 100c722:	call   0x1011aa8
 100c727:	mov    rcx,rdi
 100c72a:	test   eax,eax
 100c72c:	jne    0x100c747
 100c72e:	call   0x1011190
 100c733:	lea    rdx,[rip+0xffffffffffff9f9e]        # 0x10066d8
 100c73a:	mov    rcx,rbp
 100c73d:	call   0x100c8d0
 100c742:	jmp    0x100c898
 100c747:	lea    r9,[rsp+0x40]
 100c74c:	lea    r8,[rsp+0x48]
 100c751:	lea    rdx,[rip+0xffffffffffff9fa8]        # 0x1006700
 100c758:	call   0x1011ab4
 100c75d:	test   eax,eax
 100c75f:	jne    0x100c76a
 100c761:	lea    r8,[rip+0xffffffffffff9fa8]        # 0x1006710
 100c768:	jmp    0x100c778
 100c76a:	cmp    DWORD PTR [rsp+0x40],0x0
 100c76f:	jne    0x100c791
 100c771:	lea    r8,[rip+0xffffffffffffa028]        # 0x10067a0
 100c778:	lea    rcx,[rip+0xaad1]        # 0x1017250
 100c77f:	mov    r9,rbx
 100c782:	mov    edx,0x1
 100c787:	call   0x1007f00
 100c78c:	jmp    0x100c898
 100c791:	mov    rax,QWORD PTR [rsp+0x48]
 100c796:	lea    r8,[rip+0xffffffffffffa063]        # 0x1006800
 100c79d:	mov    edx,DWORD PTR [rax+0xc]
 100c7a0:	mov    r9d,DWORD PTR [rax+0x8]
 100c7a4:	movzx  ecx,dx
 100c7a7:	shr    edx,0x10
 100c7aa:	movzx  eax,r9w
 100c7ae:	mov    DWORD PTR [rsp+0x30],ecx
 100c7b2:	mov    DWORD PTR [rsp+0x28],edx
 100c7b6:	lea    rcx,[rsp+0x58]
 100c7bb:	shr    r9d,0x10
 100c7bf:	mov    edx,0x17
 100c7c4:	mov    DWORD PTR [rsp+0x20],eax
 100c7c8:	call   0x1007600
 100c7cd:	lea    rcx,[rip+0xaa7c]        # 0x1017250
 100c7d4:	test   eax,eax
 100c7d6:	js     0x100c7f8
 100c7d8:	lea    rax,[rsp+0x58]
 100c7dd:	lea    r8,[rip+0xffffffffffffa03c]        # 0x1006820
 100c7e4:	mov    r9,rbx
 100c7e7:	mov    edx,0x2
 100c7ec:	mov    QWORD PTR [rsp+0x20],rax
 100c7f1:	call   0x1007f00
 100c7f6:	jmp    0x100c80c
 100c7f8:	lea    r8,[rip+0xffffffffffffa071]        # 0x1006870
 100c7ff:	mov    r9d,eax
 100c802:	mov    edx,0x1
 100c807:	call   0x1007f00
 100c80c:	mov    rax,QWORD PTR [rsp+0x48]
 100c811:	lea    r8,[rip+0xffffffffffff9fe8]        # 0x1006800
 100c818:	mov    edx,0x17
 100c81d:	mov    r10d,DWORD PTR [rax+0x14]
 100c821:	mov    r9d,DWORD PTR [rax+0x10]
 100c825:	movzx  ecx,r10w
 100c829:	movzx  eax,r9w
 100c82d:	shr    r10d,0x10
 100c831:	mov    DWORD PTR [rsp+0x30],ecx
 100c835:	mov    DWORD PTR [rsp+0x28],r10d
 100c83a:	lea    rcx,[rsp+0x88]
 100c842:	shr    r9d,0x10
 100c846:	mov    DWORD PTR [rsp+0x20],eax
 100c84a:	call   0x1007600
 100c84f:	test   eax,eax
 100c851:	js     0x100c87d
 100c853:	lea    rax,[rsp+0x88]
 100c85b:	lea    r8,[rip+0xffffffffffffa06e]        # 0x10068d0
 100c862:	lea    rcx,[rip+0xa9e7]        # 0x1017250
 100c869:	mov    r9,rbx
 100c86c:	mov    edx,0x2
 100c871:	mov    QWORD PTR [rsp+0x20],rax
 100c876:	call   0x1007f00
 100c87b:	jmp    0x100c898
 100c87d:	mov    r9d,eax
 100c880:	lea    r8,[rip+0xffffffffffffa099]        # 0x1006920
 100c887:	lea    rcx,[rip+0xa9c2]        # 0x1017250
 100c88e:	mov    edx,0x1
 100c893:	call   0x1007f00
 100c898:	mov    rdi,QWORD PTR [rsp+0xd0]
 100c8a0:	mov    rcx,QWORD PTR [rsp+0xb8]
 100c8a8:	xor    rcx,rsp
 100c8ab:	call   0x1011420
 100c8b0:	lea    r11,[rsp+0xc0]
 100c8b8:	mov    rbx,QWORD PTR [r11+0x20]
 100c8bc:	mov    rbp,QWORD PTR [r11+0x28]
 100c8c0:	mov    rsp,r11
 100c8c3:	pop    rsi
 100c8c4:	ret    
 100c8c5:	int3   
 100c8c6:	int3   
 100c8c7:	int3   
 100c8c8:	int3   
 100c8c9:	int3   
 100c8ca:	int3   
 100c8cb:	int3   
 100c8cc:	int3   
 100c8cd:	int3   
 100c8ce:	int3   
 100c8cf:	int3   
 100c8d0:	mov    QWORD PTR [rsp+0x8],rbx
 100c8d5:	push   rdi
 100c8d6:	sub    rsp,0x850
 100c8dd:	mov    rax,QWORD PTR [rip+0xa8bc]        # 0x10171a0
 100c8e4:	xor    rax,rsp
 100c8e7:	mov    QWORD PTR [rsp+0x840],rax
 100c8ef:	mov    rdi,rdx
 100c8f2:	call   QWORD PTR [rip+0xffffffffffff4928]        # 0x1001220
 100c8f8:	mov    QWORD PTR [rsp+0x30],0x0
 100c901:	mov    ebx,eax
 100c903:	lea    rax,[rsp+0x40]
 100c908:	mov    r9d,0x400
 100c90e:	xor    edx,edx
 100c910:	mov    ecx,0x1000
 100c915:	mov    r8d,ebx
 100c918:	mov    DWORD PTR [rsp+0x28],0x400
 100c920:	mov    QWORD PTR [rsp+0x20],rax
 100c925:	call   QWORD PTR [rip+0xffffffffffff47bd]        # 0x10010e8
 100c92b:	mov    r9,rdi
 100c92e:	mov    edx,0x1
 100c933:	lea    rcx,[rip+0xa916]        # 0x1017250
 100c93a:	test   eax,eax
 100c93c:	je     0x100c95a
 100c93e:	lea    rax,[rsp+0x40]
 100c943:	lea    r8,[rip+0xffffffffffffa036]        # 0x1006980
 100c94a:	mov    QWORD PTR [rsp+0x28],rax
 100c94f:	mov    DWORD PTR [rsp+0x20],ebx
 100c953:	call   0x1007f00
 100c958:	jmp    0x100c96a
 100c95a:	lea    r8,[rip+0xffffffffffffa057]        # 0x10069b8
 100c961:	mov    DWORD PTR [rsp+0x20],ebx
 100c965:	call   0x1007f00
 100c96a:	mov    rcx,QWORD PTR [rsp+0x840]
 100c972:	xor    rcx,rsp
 100c975:	call   0x1011420
 100c97a:	mov    rbx,QWORD PTR [rsp+0x860]
 100c982:	add    rsp,0x850
 100c989:	pop    rdi
 100c98a:	ret    
 100c98b:	int3   
 100c98c:	int3   
 100c98d:	int3   
 100c98e:	int3   
 100c98f:	int3   
 100c990:	int3   
 100c991:	int3   
 100c992:	int3   
 100c993:	int3   
 100c994:	int3   
 100c995:	int3   
 100c996:	int3   
 100c997:	int3   
 100c998:	int3   
 100c999:	int3   
 100c99a:	int3   
 100c99b:	int3   
 100c99c:	int3   
 100c99d:	int3   
 100c99e:	int3   
 100c99f:	int3   
 100c9a0:	rex push rbx
 100c9a2:	push   rbp
 100c9a3:	push   rdi
 100c9a4:	push   r13
 100c9a6:	sub    rsp,0x68
 100c9aa:	mov    rbx,rcx
 100c9ad:	mov    rcx,QWORD PTR [rcx+0x8]
 100c9b1:	lea    r8,[rsp+0x90]
 100c9b9:	lea    rdx,[rip+0xffffffffffff7c98]        # 0x1004658
 100c9c0:	xor    r13d,r13d
 100c9c3:	mov    edi,r13d
 100c9c6:	call   0x1010990
 100c9cb:	test   rax,rax
 100c9ce:	je     0x100ca07
 100c9d0:	lea    rdx,[rip+0xffffffffffff7c91]        # 0x1004668
 100c9d7:	mov    rcx,rax
 100c9da:	call   QWORD PTR [rip+0xffffffffffff48b8]        # 0x1001298
 100c9e0:	test   rax,rax
 100c9e3:	je     0x100ca07
 100c9e5:	sub    rax,QWORD PTR [rsp+0x90]
 100c9ed:	je     0x100ca07
 100c9ef:	lea    r8,[rbx+0x7860]
 100c9f6:	lea    r9d,[r13+0x28]
 100c9fa:	mov    rdx,rax
 100c9fd:	mov    rcx,rbx
 100ca00:	call   0x100bbd0
 100ca05:	mov    edi,eax
 100ca07:	mov    rcx,QWORD PTR [rbx+0x8]
 100ca0b:	lea    r8,[rsp+0x90]
 100ca13:	lea    rdx,[rip+0xffffffffffff7c5e]        # 0x1004678
 100ca1a:	mov    ebp,r13d
 100ca1d:	call   0x1010990
 100ca22:	test   rax,rax
 100ca25:	je     0x100ca60
 100ca27:	lea    rdx,[rip+0xffffffffffff7c5a]        # 0x1004688
 100ca2e:	mov    rcx,rax
 100ca31:	call   QWORD PTR [rip+0xffffffffffff4861]        # 0x1001298
 100ca37:	test   rax,rax
 100ca3a:	je     0x100ca60
 100ca3c:	sub    rax,QWORD PTR [rsp+0x90]
 100ca44:	je     0x100ca60
 100ca46:	lea    r8,[rbx+0x7888]
 100ca4d:	mov    r9d,0x68
 100ca53:	mov    rdx,rax
 100ca56:	mov    rcx,rbx
 100ca59:	call   0x100bbd0
 100ca5e:	mov    ebp,eax
 100ca60:	and    ebp,edi
 100ca62:	jne    0x100caa6
 100ca64:	lea    rdx,[rbx+0xf60]
 100ca6b:	lea    rcx,[rbx+0x7900]
 100ca72:	call   0x1008530
 100ca77:	movzx  ebp,al
 100ca7a:	test   al,al
 100ca7c:	je     0x100ce61
 100ca82:	lea    rcx,[rsp+0x30]
 100ca87:	call   QWORD PTR [rip+0xffffffffffff4653]        # 0x10010e0
 100ca8d:	mov    eax,DWORD PTR [rsp+0x34]
 100ca91:	mov    DWORD PTR [rbx+0x7834],0x1
 100ca9b:	mov    DWORD PTR [rbx+0x78f8],eax
 100caa1:	jmp    0x100ce5d
 100caa6:	mov    rdi,QWORD PTR [rbx+0x7878]
 100caad:	mov    QWORD PTR [rsp+0x98],rsi
 100cab5:	mov    QWORD PTR [rsp+0xa0],r12
 100cabd:	mov    QWORD PTR [rsp+0xa8],r14
 100cac5:	mov    DWORD PTR [rbx+0x78f8],0x2000
 100cacf:	mov    r12d,0x8
 100cad5:	mov    QWORD PTR [rsp+0x60],r15
 100cada:	test   rdi,rdi
 100cadd:	je     0x100cb7f
 100cae3:	mov    esi,r12d
 100cae6:	lea    r14,[rbx+0x7838]
 100caed:	mov    r15,r13
 100caf0:	mov    r9d,DWORD PTR [rbx+0x14]
 100caf4:	lea    rax,[rsp+0x90]
 100cafc:	mov    r8,r14
 100caff:	lea    ecx,[r9-0x1]
 100cb03:	mov    rdx,rdi
 100cb06:	mov    QWORD PTR [rsp+0x90],r13
 100cb0e:	and    rcx,rdi
 100cb11:	mov    QWORD PTR [rsp+0x20],rax
 100cb16:	sub    r9,rcx
 100cb19:	mov    rcx,QWORD PTR [rbx+0x8]
 100cb1d:	cmp    rsi,r9
 100cb20:	cmovb  r9,rsi
 100cb24:	call   QWORD PTR [rip+0xffffffffffff46ee]        # 0x1001218
 100cb2a:	test   eax,eax
 100cb2c:	je     0x100cb46
 100cb2e:	mov    rax,QWORD PTR [rsp+0x90]
 100cb36:	add    r15,rax
 100cb39:	add    rdi,rax
 100cb3c:	add    r14,rax
 100cb3f:	sub    rsi,rax
 100cb42:	jne    0x100caf0
 100cb44:	jmp    0x100cb7f
 100cb46:	test   r15,r15
 100cb49:	jne    0x100cb7f
 100cb4b:	call   QWORD PTR [rip+0xffffffffffff46cf]        # 0x1001220
 100cb51:	test   eax,eax
 100cb53:	jle    0x100cb5f
 100cb55:	movzx  eax,ax
 100cb58:	or     eax,0x80070000
 100cb5d:	test   eax,eax
 100cb5f:	je     0x100cb7f
 100cb61:	lea    r8,[rip+0xffffffffffff76c8]        # 0x1004230
 100cb68:	lea    rcx,[rip+0xa6e1]        # 0x1017250
 100cb6f:	mov    r9d,eax
 100cb72:	mov    edx,0x1
 100cb77:	call   0x1007f00
 100cb7c:	mov    ebp,r13d
 100cb7f:	mov    rdi,QWORD PTR [rbx+0x7890]
 100cb86:	test   rdi,rdi
 100cb89:	je     0x100cc2f
 100cb8f:	mov    rsi,r12
 100cb92:	lea    r14,[rbx+0x7840]
 100cb99:	mov    r15,r13
 100cb9c:	nop    DWORD PTR [rax+0x0]
 100cba0:	mov    r9d,DWORD PTR [rbx+0x14]
 100cba4:	lea    rax,[rsp+0x90]
 100cbac:	mov    r8,r14
 100cbaf:	lea    ecx,[r9-0x1]
 100cbb3:	mov    rdx,rdi
 100cbb6:	mov    QWORD PTR [rsp+0x90],r13
 100cbbe:	and    rcx,rdi
 100cbc1:	mov    QWORD PTR [rsp+0x20],rax
 100cbc6:	sub    r9,rcx
 100cbc9:	mov    rcx,QWORD PTR [rbx+0x8]
 100cbcd:	cmp    rsi,r9
 100cbd0:	cmovb  r9,rsi
 100cbd4:	call   QWORD PTR [rip+0xffffffffffff463e]        # 0x1001218
 100cbda:	test   eax,eax
 100cbdc:	je     0x100cbf6
 100cbde:	mov    rax,QWORD PTR [rsp+0x90]
 100cbe6:	add    r15,rax
 100cbe9:	add    rdi,rax
 100cbec:	add    r14,rax
 100cbef:	sub    rsi,rax
 100cbf2:	jne    0x100cba0
 100cbf4:	jmp    0x100cc2f
 100cbf6:	test   r15,r15
 100cbf9:	jne    0x100cc2f
 100cbfb:	call   QWORD PTR [rip+0xffffffffffff461f]        # 0x1001220
 100cc01:	test   eax,eax
 100cc03:	jle    0x100cc0f
 100cc05:	movzx  eax,ax
 100cc08:	or     eax,0x80070000
 100cc0d:	test   eax,eax
 100cc0f:	je     0x100cc2f
 100cc11:	lea    r8,[rip+0xffffffffffff7658]        # 0x1004270
 100cc18:	lea    rcx,[rip+0xa631]        # 0x1017250
 100cc1f:	mov    r9d,eax
 100cc22:	mov    edx,0x1
 100cc27:	call   0x1007f00
 100cc2c:	mov    ebp,r13d
 100cc2f:	mov    rdi,QWORD PTR [rbx+0x7898]
 100cc36:	test   rdi,rdi
 100cc39:	je     0x100ccdf
 100cc3f:	mov    rsi,r12
 100cc42:	lea    r14,[rbx+0x7850]
 100cc49:	mov    r15,r13
 100cc4c:	nop    DWORD PTR [rax+0x0]
 100cc50:	mov    r9d,DWORD PTR [rbx+0x14]
 100cc54:	lea    rax,[rsp+0x90]
 100cc5c:	mov    r8,r14
 100cc5f:	lea    ecx,[r9-0x1]
 100cc63:	mov    rdx,rdi
 100cc66:	mov    QWORD PTR [rsp+0x90],r13
 100cc6e:	and    rcx,rdi
 100cc71:	mov    QWORD PTR [rsp+0x20],rax
 100cc76:	sub    r9,rcx
 100cc79:	mov    rcx,QWORD PTR [rbx+0x8]
 100cc7d:	cmp    rsi,r9
 100cc80:	cmovb  r9,rsi
 100cc84:	call   QWORD PTR [rip+0xffffffffffff458e]        # 0x1001218
 100cc8a:	test   eax,eax
 100cc8c:	je     0x100cca6
 100cc8e:	mov    rax,QWORD PTR [rsp+0x90]
 100cc96:	add    r15,rax
 100cc99:	add    rdi,rax
 100cc9c:	add    r14,rax
 100cc9f:	sub    rsi,rax
 100cca2:	jne    0x100cc50
 100cca4:	jmp    0x100ccdf
 100cca6:	test   r15,r15
 100cca9:	jne    0x100ccdf
 100ccab:	call   QWORD PTR [rip+0xffffffffffff456f]        # 0x1001220
 100ccb1:	test   eax,eax
 100ccb3:	jle    0x100ccbf
 100ccb5:	movzx  eax,ax
 100ccb8:	or     eax,0x80070000
 100ccbd:	test   eax,eax
 100ccbf:	je     0x100ccdf
 100ccc1:	lea    r8,[rip+0xffffffffffff75f8]        # 0x10042c0
 100ccc8:	lea    rcx,[rip+0xa581]        # 0x1017250
 100cccf:	mov    r9d,eax
 100ccd2:	mov    edx,0x1
 100ccd7:	call   0x1007f00
 100ccdc:	mov    ebp,r13d
 100ccdf:	mov    rdi,QWORD PTR [rbx+0x78e0]
 100cce6:	test   rdi,rdi
 100cce9:	je     0x100cd8f
 100ccef:	mov    rsi,r12
 100ccf2:	lea    r14,[rbx+0x7858]
 100ccf9:	mov    r15,r13
 100ccfc:	nop    DWORD PTR [rax+0x0]
 100cd00:	mov    r9d,DWORD PTR [rbx+0x14]
 100cd04:	lea    rax,[rsp+0x90]
 100cd0c:	mov    r8,r14
 100cd0f:	lea    ecx,[r9-0x1]
 100cd13:	mov    rdx,rdi
 100cd16:	mov    QWORD PTR [rsp+0x90],r13
 100cd1e:	and    rcx,rdi
 100cd21:	mov    QWORD PTR [rsp+0x20],rax
 100cd26:	sub    r9,rcx
 100cd29:	mov    rcx,QWORD PTR [rbx+0x8]
 100cd2d:	cmp    rsi,r9
 100cd30:	cmovb  r9,rsi
 100cd34:	call   QWORD PTR [rip+0xffffffffffff44de]        # 0x1001218
 100cd3a:	test   eax,eax
 100cd3c:	je     0x100cd56
 100cd3e:	mov    rax,QWORD PTR [rsp+0x90]
 100cd46:	add    r15,rax
 100cd49:	add    rdi,rax
 100cd4c:	add    r14,rax
 100cd4f:	sub    rsi,rax
 100cd52:	jne    0x100cd00
 100cd54:	jmp    0x100cd8f
 100cd56:	test   r15,r15
 100cd59:	jne    0x100cd8f
 100cd5b:	call   QWORD PTR [rip+0xffffffffffff44bf]        # 0x1001220
 100cd61:	test   eax,eax
 100cd63:	jle    0x100cd6f
 100cd65:	movzx  eax,ax
 100cd68:	or     eax,0x80070000
 100cd6d:	test   eax,eax
 100cd6f:	je     0x100cd8f
 100cd71:	lea    r8,[rip+0xffffffffffff75a8]        # 0x1004320
 100cd78:	lea    rcx,[rip+0xa4d1]        # 0x1017250
 100cd7f:	mov    r9d,eax
 100cd82:	mov    edx,0x1
 100cd87:	call   0x1007f00
 100cd8c:	mov    ebp,r13d
 100cd8f:	mov    rdi,QWORD PTR [rbx+0x78a0]
 100cd96:	mov    r15,QWORD PTR [rsp+0x60]
 100cd9b:	test   rdi,rdi
 100cd9e:	je     0x100ce3f
 100cda4:	lea    rsi,[rbx+0x7848]
 100cdab:	mov    r14,r13
 100cdae:	xchg   ax,ax
 100cdb0:	mov    r9d,DWORD PTR [rbx+0x14]
 100cdb4:	lea    rax,[rsp+0x90]
 100cdbc:	mov    r8,rsi
 100cdbf:	lea    ecx,[r9-0x1]
 100cdc3:	mov    rdx,rdi
 100cdc6:	mov    QWORD PTR [rsp+0x90],r13
 100cdce:	and    rcx,rdi
 100cdd1:	mov    QWORD PTR [rsp+0x20],rax
 100cdd6:	sub    r9,rcx
 100cdd9:	mov    rcx,QWORD PTR [rbx+0x8]
 100cddd:	cmp    r12,r9
 100cde0:	cmovb  r9,r12
 100cde4:	call   QWORD PTR [rip+0xffffffffffff442e]        # 0x1001218
 100cdea:	test   eax,eax
 100cdec:	je     0x100ce06
 100cdee:	mov    rax,QWORD PTR [rsp+0x90]
 100cdf6:	add    r14,rax
 100cdf9:	add    rdi,rax
 100cdfc:	add    rsi,rax
 100cdff:	sub    r12,rax
 100ce02:	jne    0x100cdb0
 100ce04:	jmp    0x100ce3f
 100ce06:	test   r14,r14
 100ce09:	jne    0x100ce3f
 100ce0b:	call   QWORD PTR [rip+0xffffffffffff440f]        # 0x1001220
 100ce11:	test   eax,eax
 100ce13:	jle    0x100ce1f
 100ce15:	movzx  eax,ax
 100ce18:	or     eax,0x80070000
 100ce1d:	test   eax,eax
 100ce1f:	je     0x100ce3f
 100ce21:	lea    r8,[rip+0xffffffffffff74f8]        # 0x1004320
 100ce28:	lea    rcx,[rip+0xa421]        # 0x1017250
 100ce2f:	mov    r9d,eax
 100ce32:	mov    edx,0x1
 100ce37:	call   0x1007f00
 100ce3c:	mov    ebp,r13d
 100ce3f:	mov    r14,QWORD PTR [rsp+0xa8]
 100ce47:	mov    r12,QWORD PTR [rsp+0xa0]
 100ce4f:	mov    rsi,QWORD PTR [rsp+0x98]
 100ce57:	mov    DWORD PTR [rbx+0x7834],ebp
 100ce5d:	test   ebp,ebp
 100ce5f:	jne    0x100ce79
 100ce61:	lea    r8,[rip+0xffffffffffff7518]        # 0x1004380
 100ce68:	lea    rcx,[rip+0xa3e1]        # 0x1017250
 100ce6f:	mov    edx,0x1
 100ce74:	call   0x1007f00
 100ce79:	mov    eax,ebp
 100ce7b:	add    rsp,0x68
 100ce7f:	pop    r13
 100ce81:	pop    rdi
 100ce82:	pop    rbp
 100ce83:	pop    rbx
 100ce84:	ret    
 100ce85:	int3   
 100ce86:	int3   
 100ce87:	int3   
 100ce88:	int3   
 100ce89:	int3   
 100ce8a:	int3   
 100ce8b:	int3   
 100ce8c:	int3   
 100ce8d:	int3   
 100ce8e:	int3   
 100ce8f:	int3   
 100ce90:	rex push rdi
 100ce92:	push   r13
 100ce94:	push   r15
 100ce96:	sub    rsp,0x30
 100ce9a:	mov    r10d,DWORD PTR [rcx+0x78f8]
 100cea1:	mov    r9,QWORD PTR [r8]
 100cea4:	mov    r15,r8
 100cea7:	mov    r13,rdx
 100ceaa:	mov    rdi,rcx
 100cead:	cmp    r9,r10
 100ceb0:	jae    0x100cec1
 100ceb2:	mov    eax,0x1
 100ceb7:	add    rsp,0x30
 100cebb:	pop    r15
 100cebd:	pop    r13
 100cebf:	pop    rdi
 100cec0:	ret    
 100cec1:	mov    ecx,DWORD PTR [rcx+0x78f8]
 100cec7:	mov    QWORD PTR [rsp+0x50],rbx
 100cecc:	mov    QWORD PTR [rsp+0x58],rbp
 100ced1:	mov    QWORD PTR [rsp+0x60],rsi
 100ced6:	mov    QWORD PTR [rsp+0x28],r12
 100cedb:	mov    QWORD PTR [rsp+0x20],r14
 100cee0:	mov    r14,QWORD PTR [rdx]
 100cee3:	xor    edx,edx
 100cee5:	xor    r12d,r12d
 100cee8:	mov    rax,r14
 100ceeb:	mov    esi,r12d
 100ceee:	mov    rbx,r14
 100cef1:	div    rcx
 100cef4:	lea    rbp,[r14+r9*1]
 100cef8:	imul   rax,rcx
 100cefc:	cmp    rax,r14
 100ceff:	je     0x100cf24
 100cf01:	lea    rbx,[r10+rax*1]
 100cf05:	mov    rsi,r14
 100cf08:	mov    rcx,rdi
 100cf0b:	mov    rdx,rbx
 100cf0e:	sub    rsi,rax
 100cf11:	call   0x100d600
 100cf16:	test   eax,eax
 100cf18:	jne    0x100cf24
 100cf1a:	lea    eax,[r12+0x1]
 100cf1f:	jmp    0x100cfbe
 100cf24:	cmp    rbx,rbp
 100cf27:	jae    0x100cf4d
 100cf29:	nop    DWORD PTR [rax+0x0]
 100cf30:	mov    rdx,rbx
 100cf33:	mov    rcx,rdi
 100cf36:	call   0x100d600
 100cf3b:	test   eax,eax
 100cf3d:	jne    0x100cf4d
 100cf3f:	mov    eax,DWORD PTR [rdi+0x78f8]
 100cf45:	add    rbx,rax
 100cf48:	cmp    rbx,rbp
 100cf4b:	jb     0x100cf30
 100cf4d:	mov    ecx,DWORD PTR [rdi+0x78f8]
 100cf53:	test   rsi,rsi
 100cf56:	mov    rax,rbp
 100cf59:	cmove  r14,rbx
 100cf5d:	shr    rcx,1
 100cf60:	sub    rax,rcx
 100cf63:	cmp    rbx,rax
 100cf66:	jae    0x100cf9f
 100cf68:	nop    DWORD PTR [rax+rax*1+0x0]
 100cf70:	mov    rdx,rbx
 100cf73:	mov    rcx,rdi
 100cf76:	call   0x100d600
 100cf7b:	test   eax,eax
 100cf7d:	je     0x100cf9f
 100cf7f:	mov    eax,DWORD PTR [rdi+0x78f8]
 100cf85:	mov    ecx,DWORD PTR [rdi+0x78f8]
 100cf8b:	add    rbx,rax
 100cf8e:	add    rsi,rax
 100cf91:	shr    rcx,1
 100cf94:	mov    rax,rbp
 100cf97:	sub    rax,rcx
 100cf9a:	cmp    rbx,rax
 100cf9d:	jb     0x100cf70
 100cf9f:	mov    ecx,DWORD PTR [rdi+0x78f8]
 100cfa5:	sub    rbp,rbx
 100cfa8:	cmp    rbp,rcx
 100cfab:	jae    0x100cfb0
 100cfad:	add    rsi,rbp
 100cfb0:	test   rsi,rsi
 100cfb3:	mov    QWORD PTR [r13+0x0],r14
 100cfb7:	setne  r12b
 100cfbb:	mov    eax,r12d
 100cfbe:	mov    r12,QWORD PTR [rsp+0x28]
 100cfc3:	mov    rbp,QWORD PTR [rsp+0x58]
 100cfc8:	mov    rbx,QWORD PTR [rsp+0x50]
 100cfcd:	mov    r14,QWORD PTR [rsp+0x20]
 100cfd2:	mov    QWORD PTR [r15],rsi
 100cfd5:	mov    rsi,QWORD PTR [rsp+0x60]
 100cfda:	add    rsp,0x30
 100cfde:	pop    r15
 100cfe0:	pop    r13
 100cfe2:	pop    rdi
 100cfe3:	ret    
 100cfe4:	int3   
 100cfe5:	int3   
 100cfe6:	int3   
 100cfe7:	int3   
 100cfe8:	int3   
 100cfe9:	int3   
 100cfea:	int3   
 100cfeb:	int3   
 100cfec:	int3   
 100cfed:	int3   
 100cfee:	int3   
 100cfef:	int3   
 100cff0:	mov    QWORD PTR [rsp+0x18],rbx
 100cff5:	push   rbp
 100cff6:	push   rsi
 100cff7:	push   rdi
 100cff8:	push   r12
 100cffa:	push   r13
 100cffc:	push   r14
 100cffe:	push   r15
 100d000:	sub    rsp,0x870
 100d007:	mov    rax,QWORD PTR [rip+0xa192]        # 0x10171a0
 100d00e:	xor    rax,rsp
 100d011:	mov    QWORD PTR [rsp+0x860],rax
 100d019:	mov    rax,rdx
 100d01c:	mov    QWORD PTR [rsp+0x50],rdx
 100d021:	xor    edx,edx
 100d023:	shr    rax,0x10
 100d027:	lea    r8,[rsp+0x48]
 100d02c:	mov    r9d,0x8
 100d032:	div    QWORD PTR [rcx+0x7840]
 100d039:	mov    eax,DWORD PTR [rcx+0x78b0]
 100d03f:	mov    r15,rcx
 100d042:	imul   edx,DWORD PTR [rcx+0x78a8]
 100d049:	mov    r13d,edx
 100d04c:	mov    edx,DWORD PTR [rcx+0x78ac]
 100d052:	add    r13,QWORD PTR [rcx+0x7850]
 100d059:	add    rax,r13
 100d05c:	add    rdx,rax
 100d05f:	call   0x100bbd0
 100d064:	test   eax,eax
 100d066:	je     0x100d231
 100d06c:	nop    DWORD PTR [rax+0x0]
 100d070:	mov    r12,QWORD PTR [rsp+0x48]
 100d075:	cmp    r13,r12
 100d078:	je     0x100d231
 100d07e:	mov    eax,DWORD PTR [r15+0x78b4]
 100d085:	mov    r14d,DWORD PTR [r15+0x78b8]
 100d08c:	mov    ebx,0x8
 100d091:	sub    r12,rax
 100d094:	lea    rbp,[rsp+0x58]
 100d099:	add    r14,r12
 100d09c:	xor    esi,esi
 100d09e:	mov    rdi,r14
 100d0a1:	data16 data16 data16 data16 data16 data16 nop WORD PTR [rax+rax*1+0x0]
 100d0b0:	mov    r9d,DWORD PTR [r15+0x14]
 100d0b4:	lea    rax,[rsp+0x40]
 100d0b9:	mov    r8,rbp
 100d0bc:	lea    ecx,[r9-0x1]
 100d0c0:	mov    rdx,rdi
 100d0c3:	mov    QWORD PTR [rsp+0x40],0x0
 100d0cc:	and    rcx,rdi
 100d0cf:	mov    QWORD PTR [rsp+0x20],rax
 100d0d4:	sub    r9,rcx
 100d0d7:	mov    rcx,QWORD PTR [r15+0x8]
 100d0db:	cmp    rbx,r9
 100d0de:	cmovb  r9,rbx
 100d0e2:	call   QWORD PTR [rip+0xffffffffffff4130]        # 0x1001218
 100d0e8:	test   eax,eax
 100d0ea:	je     0x100d141
 100d0ec:	mov    rax,QWORD PTR [rsp+0x40]
 100d0f1:	add    rsi,rax
 100d0f4:	add    rdi,rax
 100d0f7:	add    rbp,rax
 100d0fa:	sub    rbx,rax
 100d0fd:	jne    0x100d0b0
 100d0ff:	cmp    rsi,0x8
 100d103:	je     0x100d1f6
 100d109:	or     DWORD PTR [rip+0x9fed],0x20000200        # 0x1017100
 100d113:	lea    rax,[r14+0x8]
 100d117:	lea    r8,[rip+0xffffffffffff4b32]        # 0x1001c50
 100d11e:	lea    rcx,[rip+0xa12b]        # 0x1017250
 100d125:	mov    r9,r14
 100d128:	mov    edx,0x1
 100d12d:	mov    QWORD PTR [rsp+0x28],rsi
 100d132:	mov    QWORD PTR [rsp+0x20],rax
 100d137:	call   0x1007f00
 100d13c:	jmp    0x100d202
 100d141:	test   rsi,rsi
 100d144:	jne    0x100d0ff
 100d146:	call   QWORD PTR [rip+0xffffffffffff40d4]        # 0x1001220
 100d14c:	mov    ebx,eax
 100d14e:	test   eax,eax
 100d150:	jle    0x100d15b
 100d152:	movzx  ebx,ax
 100d155:	or     ebx,0x80070000
 100d15b:	test   ebx,ebx
 100d15d:	jns    0x100d109
 100d15f:	or     DWORD PTR [rip+0x9f97],0x20000200        # 0x1017100
 100d169:	lea    rax,[rsp+0x60]
 100d16e:	xor    edi,edi
 100d170:	mov    QWORD PTR [rsp+0x30],rdi
 100d175:	mov    r9d,0x400
 100d17b:	mov    r8d,ebx
 100d17e:	xor    edx,edx
 100d180:	mov    ecx,0x1000
 100d185:	mov    DWORD PTR [rsp+0x28],0x400
 100d18d:	mov    QWORD PTR [rsp+0x20],rax
 100d192:	call   QWORD PTR [rip+0xffffffffffff3f50]        # 0x10010e8
 100d198:	mov    r9,r14
 100d19b:	test   eax,eax
 100d19d:	lea    rax,[r14+0x8]
 100d1a1:	lea    edx,[rdi+0x1]
 100d1a4:	je     0x100d1d3
 100d1a6:	lea    rcx,[rsp+0x60]
 100d1ab:	lea    r8,[rip+0xffffffffffff4afe]        # 0x1001cb0
 100d1b2:	mov    QWORD PTR [rsp+0x38],rcx
 100d1b7:	mov    DWORD PTR [rsp+0x30],ebx
 100d1bb:	lea    rcx,[rip+0xa08e]        # 0x1017250
 100d1c2:	mov    QWORD PTR [rsp+0x28],rdi
 100d1c7:	mov    QWORD PTR [rsp+0x20],rax
 100d1cc:	call   0x1007f00
 100d1d1:	jmp    0x100d202
 100d1d3:	mov    DWORD PTR [rsp+0x30],ebx
 100d1d7:	lea    r8,[rip+0xffffffffffff4b52]        # 0x1001d30
 100d1de:	lea    rcx,[rip+0xa06b]        # 0x1017250
 100d1e5:	mov    QWORD PTR [rsp+0x28],rdi
 100d1ea:	mov    QWORD PTR [rsp+0x20],rax
 100d1ef:	call   0x1007f00
 100d1f4:	jmp    0x100d202
 100d1f6:	mov    rax,QWORD PTR [rsp+0x50]
 100d1fb:	cmp    QWORD PTR [rsp+0x58],rax
 100d200:	je     0x100d25e
 100d202:	mov    eax,DWORD PTR [r15+0x78b4]
 100d209:	mov    edx,DWORD PTR [r15+0x78ac]
 100d210:	lea    r8,[rsp+0x48]
 100d215:	add    rax,r12
 100d218:	mov    r9d,0x8
 100d21e:	mov    rcx,r15
 100d221:	add    rdx,rax
 100d224:	call   0x100bbd0
 100d229:	test   eax,eax
 100d22b:	jne    0x100d070
 100d231:	xor    eax,eax
 100d233:	mov    rcx,QWORD PTR [rsp+0x860]
 100d23b:	xor    rcx,rsp
 100d23e:	call   0x1011420
 100d243:	mov    rbx,QWORD PTR [rsp+0x8c0]
 100d24b:	add    rsp,0x870
 100d252:	pop    r15
 100d254:	pop    r14
 100d256:	pop    r13
 100d258:	pop    r12
 100d25a:	pop    rdi
 100d25b:	pop    rsi
 100d25c:	pop    rbp
 100d25d:	ret    
 100d25e:	mov    rax,r12
 100d261:	jmp    0x100d233
 100d263:	int3   
 100d264:	int3   
 100d265:	int3   
 100d266:	int3   
 100d267:	int3   
 100d268:	int3   
 100d269:	int3   
 100d26a:	int3   
 100d26b:	int3   
 100d26c:	int3   
 100d26d:	int3   
 100d26e:	int3   
 100d26f:	int3   
 100d270:	mov    QWORD PTR [rsp+0x18],rbx
 100d275:	push   rbp
 100d276:	push   rsi
 100d277:	push   rdi
 100d278:	push   r12
 100d27a:	push   r13
 100d27c:	push   r14
 100d27e:	push   r15
 100d280:	sub    rsp,0x870
 100d287:	mov    rax,QWORD PTR [rip+0x9f12]        # 0x10171a0
 100d28e:	xor    rax,rsp
 100d291:	mov    QWORD PTR [rsp+0x860],rax
 100d299:	mov    rdi,rdx
 100d29c:	mov    edx,DWORD PTR [rcx+0x78bc]
 100d2a2:	xor    r13d,r13d
 100d2a5:	lea    r8,[rsp+0x58]
 100d2aa:	lea    r9d,[r13+0x8]
 100d2ae:	add    rdx,rdi
 100d2b1:	mov    r15,rcx
 100d2b4:	mov    QWORD PTR [rsp+0x40],r13
 100d2b9:	call   0x100bbd0
 100d2be:	mov    ebx,eax
 100d2c0:	test   eax,eax
 100d2c2:	je     0x100d4dc
 100d2c8:	mov    rax,QWORD PTR [rsp+0x58]
 100d2cd:	test   rax,rax
 100d2d0:	je     0x100d4d0
 100d2d6:	mov    edx,DWORD PTR [r15+0x78c4]
 100d2dd:	lea    r9d,[r13+0x8]
 100d2e1:	lea    r8,[rsp+0x48]
 100d2e6:	add    rdx,rax
 100d2e9:	mov    rcx,r15
 100d2ec:	call   0x100bbd0
 100d2f1:	mov    edx,DWORD PTR [r15+0x78c0]
 100d2f8:	lea    r9d,[r13+0x8]
 100d2fc:	lea    r8,[rsp+0x40]
 100d301:	add    rdx,rdi
 100d304:	mov    rcx,r15
 100d307:	mov    ebx,eax
 100d309:	call   0x100bbd0
 100d30e:	mov    rcx,QWORD PTR [rsp+0x40]
 100d313:	mov    r12,rcx
 100d316:	and    ebx,eax
 100d318:	je     0x100d4dc
 100d31e:	xchg   ax,ax
 100d320:	mov    rax,QWORD PTR [rsp+0x48]
 100d325:	test   rax,rax
 100d328:	je     0x100d4d5
 100d32e:	mov    r14d,DWORD PTR [r15+0x78c4]
 100d335:	mov    QWORD PTR [rsp+0x58],rax
 100d33a:	mov    ebx,0x8
 100d33f:	add    r14,rax
 100d342:	lea    rbp,[rsp+0x48]
 100d347:	mov    rdi,r13
 100d34a:	mov    rsi,r14
 100d34d:	nop    DWORD PTR [rax]
 100d350:	mov    r9d,DWORD PTR [r15+0x14]
 100d354:	lea    rax,[rsp+0x50]
 100d359:	mov    r8,rbp
 100d35c:	lea    ecx,[r9-0x1]
 100d360:	mov    rdx,rsi
 100d363:	mov    QWORD PTR [rsp+0x50],r13
 100d368:	and    rcx,rsi
 100d36b:	mov    QWORD PTR [rsp+0x20],rax
 100d370:	sub    r9,rcx
 100d373:	mov    rcx,QWORD PTR [r15+0x8]
 100d377:	cmp    rbx,r9
 100d37a:	cmovb  r9,rbx
 100d37e:	call   QWORD PTR [rip+0xffffffffffff3e94]        # 0x1001218
 100d384:	test   eax,eax
 100d386:	je     0x100d3ad
 100d388:	mov    rax,QWORD PTR [rsp+0x50]
 100d38d:	add    rdi,rax
 100d390:	add    rsi,rax
 100d393:	add    rbp,rax
 100d396:	sub    rbx,rax
 100d399:	jne    0x100d350
 100d39b:	cmp    rdi,0x8
 100d39f:	jne    0x100d469
 100d3a5:	lea    esi,[rdi-0x7]
 100d3a8:	jmp    0x100d49f
 100d3ad:	test   rdi,rdi
 100d3b0:	jne    0x100d39b
 100d3b2:	call   QWORD PTR [rip+0xffffffffffff3e68]        # 0x1001220
 100d3b8:	mov    ebx,eax
 100d3ba:	test   eax,eax
 100d3bc:	jle    0x100d3c7
 100d3be:	movzx  ebx,ax
 100d3c1:	or     ebx,0x80070000
 100d3c7:	test   ebx,ebx
 100d3c9:	jns    0x100d469
 100d3cf:	or     DWORD PTR [rip+0x9d27],0x20000200        # 0x1017100
 100d3d9:	lea    rax,[rsp+0x60]
 100d3de:	mov    QWORD PTR [rsp+0x30],r13
 100d3e3:	mov    r9d,0x400
 100d3e9:	mov    r8d,ebx
 100d3ec:	xor    edx,edx
 100d3ee:	mov    ecx,0x1000
 100d3f3:	mov    DWORD PTR [rsp+0x28],0x400
 100d3fb:	mov    esi,r13d
 100d3fe:	mov    QWORD PTR [rsp+0x20],rax
 100d403:	call   QWORD PTR [rip+0xffffffffffff3cdf]        # 0x10010e8
 100d409:	mov    r9,r14
 100d40c:	test   eax,eax
 100d40e:	lea    rax,[r14+0x8]
 100d412:	mov    edx,0x1
 100d417:	je     0x100d446
 100d419:	lea    rcx,[rsp+0x60]
 100d41e:	lea    r8,[rip+0xffffffffffff488b]        # 0x1001cb0
 100d425:	mov    QWORD PTR [rsp+0x38],rcx
 100d42a:	mov    DWORD PTR [rsp+0x30],ebx
 100d42e:	lea    rcx,[rip+0x9e1b]        # 0x1017250
 100d435:	mov    QWORD PTR [rsp+0x28],r13
 100d43a:	mov    QWORD PTR [rsp+0x20],rax
 100d43f:	call   0x1007f00
 100d444:	jmp    0x100d49f
 100d446:	mov    DWORD PTR [rsp+0x30],ebx
 100d44a:	lea    r8,[rip+0xffffffffffff48df]        # 0x1001d30
 100d451:	lea    rcx,[rip+0x9df8]        # 0x1017250
 100d458:	mov    QWORD PTR [rsp+0x28],r13
 100d45d:	mov    QWORD PTR [rsp+0x20],rax
 100d462:	call   0x1007f00
 100d467:	jmp    0x100d49f
 100d469:	or     DWORD PTR [rip+0x9c8d],0x20000200        # 0x1017100
 100d473:	lea    rax,[r14+0x8]
 100d477:	lea    r8,[rip+0xffffffffffff47d2]        # 0x1001c50
 100d47e:	lea    rcx,[rip+0x9dcb]        # 0x1017250
 100d485:	mov    r9,r14
 100d488:	mov    edx,0x1
 100d48d:	mov    QWORD PTR [rsp+0x28],rdi
 100d492:	mov    esi,r13d
 100d495:	mov    QWORD PTR [rsp+0x20],rax
 100d49a:	call   0x1007f00
 100d49f:	mov    edx,DWORD PTR [r15+0x78c0]
 100d4a6:	lea    r8,[rsp+0x40]
 100d4ab:	mov    r9d,0x8
 100d4b1:	add    rdx,r12
 100d4b4:	mov    rcx,r15
 100d4b7:	call   0x100bbd0
 100d4bc:	mov    rcx,QWORD PTR [rsp+0x40]
 100d4c1:	mov    ebx,eax
 100d4c3:	mov    r12,rcx
 100d4c6:	and    ebx,esi
 100d4c8:	jne    0x100d320
 100d4ce:	jmp    0x100d4dc
 100d4d0:	mov    rcx,QWORD PTR [rsp+0x40]
 100d4d5:	mov    rax,rcx
 100d4d8:	test   ebx,ebx
 100d4da:	jne    0x100d4df
 100d4dc:	mov    rax,r13
 100d4df:	mov    rcx,QWORD PTR [rsp+0x860]
 100d4e7:	xor    rcx,rsp
 100d4ea:	call   0x1011420
 100d4ef:	mov    rbx,QWORD PTR [rsp+0x8c0]
 100d4f7:	add    rsp,0x870
 100d4fe:	pop    r15
 100d500:	pop    r14
 100d502:	pop    r13
 100d504:	pop    r12
 100d506:	pop    rdi
 100d507:	pop    rsi
 100d508:	pop    rbp
 100d509:	ret    
 100d50a:	int3   
 100d50b:	int3   
 100d50c:	int3   
 100d50d:	int3   
 100d50e:	int3   
 100d50f:	int3   
 100d510:	mov    QWORD PTR [rsp+0x10],rbx
 100d515:	push   rbp
 100d516:	push   rsi
 100d517:	push   rdi
 100d518:	sub    rsp,0x20
 100d51c:	mov    rdi,rdx
 100d51f:	mov    edx,DWORD PTR [rcx+0x78c8]
 100d525:	mov    rbp,r8
 100d528:	add    rdx,r8
 100d52b:	xor    esi,esi
 100d52d:	lea    r8,[rsp+0x58]
 100d532:	lea    r9d,[rsi+0x8]
 100d536:	mov    rbx,rcx
 100d539:	call   0x100bbd0
 100d53e:	test   eax,eax
 100d540:	je     0x100d556
 100d542:	sub    rdi,QWORD PTR [rsp+0x58]
 100d547:	xor    edx,edx
 100d549:	mov    rax,rdi
 100d54c:	div    QWORD PTR [rbx+0x7848]
 100d553:	mov    rsi,rax
 100d556:	mov    edx,DWORD PTR [rbx+0x78cc]
 100d55c:	lea    r8,[rsp+0x40]
 100d561:	mov    r9d,0x8
 100d567:	add    rdx,rbp
 100d56a:	mov    rcx,rbx
 100d56d:	call   0x100bbd0
 100d572:	test   eax,eax
 100d574:	je     0x100d5e0
 100d576:	mov    rdx,QWORD PTR [rsp+0x40]
 100d57b:	mov    eax,DWORD PTR [rbx+0x78d0]
 100d581:	lea    r8,[rsp+0x50]
 100d586:	imul   rax,rsi
 100d58a:	add    rdx,rax
 100d58d:	mov    r9d,0x8
 100d593:	mov    rcx,rbx
 100d596:	mov    QWORD PTR [rsp+0x40],rdx
 100d59b:	call   0x100bbd0
 100d5a0:	test   eax,eax
 100d5a2:	je     0x100d5e0
 100d5a4:	mov    ecx,DWORD PTR [rbx+0x78d4]
 100d5aa:	test   ecx,ecx
 100d5ac:	je     0x100d5c3
 100d5ae:	mov    rax,QWORD PTR [rsp+0x50]
 100d5b3:	shr    rax,cl
 100d5b6:	mov    rbx,QWORD PTR [rsp+0x48]
 100d5bb:	add    rsp,0x20
 100d5bf:	pop    rdi
 100d5c0:	pop    rsi
 100d5c1:	pop    rbp
 100d5c2:	ret    
 100d5c3:	mov    eax,DWORD PTR [rbx+0x78d8]
 100d5c9:	dec    eax
 100d5cb:	not    rax
 100d5ce:	and    rax,QWORD PTR [rsp+0x50]
 100d5d3:	mov    rbx,QWORD PTR [rsp+0x48]
 100d5d8:	add    rsp,0x20
 100d5dc:	pop    rdi
 100d5dd:	pop    rsi
 100d5de:	pop    rbp
 100d5df:	ret    
 100d5e0:	xor    eax,eax
 100d5e2:	mov    rbx,QWORD PTR [rsp+0x48]
 100d5e7:	add    rsp,0x20
 100d5eb:	pop    rdi
 100d5ec:	pop    rsi
 100d5ed:	pop    rbp
 100d5ee:	ret    
 100d5ef:	int3   
 100d5f0:	int3   
 100d5f1:	int3   
 100d5f2:	int3   
 100d5f3:	int3   
 100d5f4:	int3   
 100d5f5:	int3   
 100d5f6:	int3   
 100d5f7:	int3   
 100d5f8:	int3   
 100d5f9:	int3   
 100d5fa:	int3   
 100d5fb:	int3   
 100d5fc:	int3   
 100d5fd:	int3   
 100d5fe:	int3   
 100d5ff:	int3   
 100d600:	rex push rbx
 100d602:	push   rsi
 100d603:	push   rdi
 100d604:	sub    rsp,0x60
 100d608:	cmp    DWORD PTR [rcx+0x7908],0x0
 100d60f:	mov    rdi,rdx
 100d612:	mov    rbx,rcx
 100d615:	jbe    0x100d63c
 100d617:	mov    r8d,DWORD PTR [rcx+0x78f8]
 100d61e:	add    rcx,0x7900
 100d625:	call   0x1008700
 100d62a:	xor    esi,esi
 100d62c:	test   al,al
 100d62e:	sete   sil
 100d632:	mov    eax,esi
 100d634:	add    rsp,0x60
 100d638:	pop    rdi
 100d639:	pop    rsi
 100d63a:	pop    rbx
 100d63b:	ret    
 100d63c:	mov    rdx,QWORD PTR [rcx+0x7880]
 100d643:	dec    rdx
 100d646:	not    rdx
 100d649:	and    rdx,rdi
 100d64c:	je     0x100d84d
 100d652:	call   0x100cff0
 100d657:	test   rax,rax
 100d65a:	je     0x100d84d
 100d660:	mov    rdx,rax
 100d663:	mov    rcx,rbx
 100d666:	call   0x100d270
 100d66b:	test   rax,rax
 100d66e:	je     0x100d84d
 100d674:	mov    r8,rax
 100d677:	mov    rdx,rdi
 100d67a:	mov    rcx,rbx
 100d67d:	mov    QWORD PTR [rsp+0x50],r13
 100d682:	call   0x100d510
 100d687:	mov    r13,rax
 100d68a:	test   rax,rax
 100d68d:	je     0x100d85a
 100d693:	mov    edi,DWORD PTR [rbx+0x786c]
 100d699:	xor    esi,esi
 100d69b:	mov    QWORD PTR [rsp+0x88],rbp
 100d6a3:	mov    QWORD PTR [rsp+0x58],r12
 100d6a8:	mov    QWORD PTR [rsp+0x48],r14
 100d6ad:	mov    DWORD PTR [rsp+0x90],esi
 100d6b4:	add    rdi,rax
 100d6b7:	mov    QWORD PTR [rsp+0x40],r15
 100d6bc:	mov    QWORD PTR [rsp+0x30],rsi
 100d6c1:	lea    ebp,[rsi+0x4]
 100d6c4:	lea    r14,[rsp+0x90]
 100d6cc:	mov    DWORD PTR [rsp+0x80],esi
 100d6d3:	mov    r12d,esi
 100d6d6:	data16 nop WORD PTR [rax+rax*1+0x0]
 100d6e0:	mov    r9d,DWORD PTR [rbx+0x14]
 100d6e4:	lea    rax,[rsp+0x98]
 100d6ec:	mov    r8,r14
 100d6ef:	lea    ecx,[r9-0x1]
 100d6f3:	mov    rdx,rdi
 100d6f6:	mov    QWORD PTR [rsp+0x98],rsi
 100d6fe:	and    rcx,rdi
 100d701:	mov    QWORD PTR [rsp+0x20],rax
 100d706:	sub    r9,rcx
 100d709:	mov    rcx,QWORD PTR [rbx+0x8]
 100d70d:	cmp    rbp,r9
 100d710:	cmovb  r9,rbp
 100d714:	call   QWORD PTR [rip+0xffffffffffff3afe]        # 0x1001218
 100d71a:	test   eax,eax
 100d71c:	je     0x100d736
 100d71e:	mov    rax,QWORD PTR [rsp+0x98]
 100d726:	add    r12,rax
 100d729:	add    rdi,rax
 100d72c:	add    r14,rax
 100d72f:	sub    rbp,rax
 100d732:	jne    0x100d6e0
 100d734:	jmp    0x100d75b
 100d736:	test   r12,r12
 100d739:	jne    0x100d75b
 100d73b:	call   QWORD PTR [rip+0xffffffffffff3adf]        # 0x1001220
 100d741:	mov    DWORD PTR [rsp+0x80],eax
 100d748:	test   eax,eax
 100d74a:	jle    0x100d75b
 100d74c:	movzx  eax,ax
 100d74f:	or     eax,0x80070000
 100d754:	mov    DWORD PTR [rsp+0x80],eax
 100d75b:	mov    edi,DWORD PTR [rbx+0x7870]
 100d761:	mov    ebp,0x8
 100d766:	lea    r15,[rsp+0x30]
 100d76b:	add    rdi,r13
 100d76e:	mov    r13d,esi
 100d771:	mov    r14,rsi
 100d774:	data16 data16 data16 nop WORD PTR [rax+rax*1+0x0]
 100d780:	mov    r9d,DWORD PTR [rbx+0x14]
 100d784:	lea    rax,[rsp+0x98]
 100d78c:	mov    r8,r15
 100d78f:	lea    ecx,[r9-0x1]
 100d793:	mov    rdx,rdi
 100d796:	mov    QWORD PTR [rsp+0x98],rsi
 100d79e:	and    rcx,rdi
 100d7a1:	mov    QWORD PTR [rsp+0x20],rax
 100d7a6:	sub    r9,rcx
 100d7a9:	mov    rcx,QWORD PTR [rbx+0x8]
 100d7ad:	cmp    rbp,r9
 100d7b0:	cmovb  r9,rbp
 100d7b4:	call   QWORD PTR [rip+0xffffffffffff3a5e]        # 0x1001218
 100d7ba:	test   eax,eax
 100d7bc:	je     0x100d7d6
 100d7be:	mov    rax,QWORD PTR [rsp+0x98]
 100d7c6:	add    r14,rax
 100d7c9:	add    rdi,rax
 100d7cc:	add    r15,rax
 100d7cf:	sub    rbp,rax
 100d7d2:	jne    0x100d780
 100d7d4:	jmp    0x100d7f3
 100d7d6:	test   r14,r14
 100d7d9:	jne    0x100d7f3
 100d7db:	call   QWORD PTR [rip+0xffffffffffff3a3f]        # 0x1001220
 100d7e1:	mov    r13d,eax
 100d7e4:	test   eax,eax
 100d7e6:	jle    0x100d7f3
 100d7e8:	movzx  r13d,ax
 100d7ec:	or     r13d,0x80070000
 100d7f3:	mov    r15,QWORD PTR [rsp+0x40]
 100d7f8:	mov    rbp,QWORD PTR [rsp+0x88]
 100d800:	cmp    r12,0x4
 100d804:	mov    r12,QWORD PTR [rsp+0x58]
 100d809:	jne    0x100d86c
 100d80b:	cmp    r14,0x8
 100d80f:	jne    0x100d86c
 100d811:	cmp    DWORD PTR [rsp+0x80],esi
 100d818:	jne    0x100d86c
 100d81a:	test   r13d,r13d
 100d81d:	jne    0x100d86c
 100d81f:	mov    eax,DWORD PTR [rsp+0x90]
 100d826:	and    eax,0x3fffff
 100d82b:	cmp    QWORD PTR [rsp+0x30],rsi
 100d830:	jne    0x100d86c
 100d832:	test   DWORD PTR [rbx+0x7864],eax
 100d838:	je     0x100d86c
 100d83a:	test   DWORD PTR [rbx+0x7868],eax
 100d840:	jne    0x100d86c
 100d842:	inc    QWORD PTR [rbx+0x78f0]
 100d849:	mov    eax,esi
 100d84b:	jmp    0x100d871
 100d84d:	mov    eax,0x1
 100d852:	add    rsp,0x60
 100d856:	pop    rdi
 100d857:	pop    rsi
 100d858:	pop    rbx
 100d859:	ret    
 100d85a:	mov    eax,0x1
 100d85f:	mov    r13,QWORD PTR [rsp+0x50]
 100d864:	add    rsp,0x60
 100d868:	pop    rdi
 100d869:	pop    rsi
 100d86a:	pop    rbx
 100d86b:	ret    
 100d86c:	mov    eax,0x1
 100d871:	mov    r14,QWORD PTR [rsp+0x48]
 100d876:	mov    r13,QWORD PTR [rsp+0x50]
 100d87b:	add    rsp,0x60
 100d87f:	pop    rdi
 100d880:	pop    rsi
 100d881:	pop    rbx
 100d882:	ret    
 100d883:	int3   
 100d884:	int3   
 100d885:	int3   
 100d886:	int3   
 100d887:	int3   
 100d888:	int3   
 100d889:	int3   
 100d88a:	int3   
 100d88b:	int3   
 100d88c:	int3   
 100d88d:	int3   
 100d88e:	int3   
 100d88f:	int3   
 100d890:	rex push rbx
 100d892:	sub    rsp,0x20
 100d896:	mov    r10d,r8d
 100d899:	mov    rbx,rdx
 100d89c:	mov    r11d,0x80000000
 100d8a2:	test   r8d,r8d
 100d8a5:	jne    0x100d8dc
 100d8a7:	cmp    QWORD PTR [rcx+0x22338],r11
 100d8ae:	jb     0x100d8dc
 100d8b0:	mov    r9d,0x1
 100d8b6:	lea    r8,[rip+0xffffffffffff68f3]        # 0x10041b0
 100d8bd:	lea    edx,[r10+0x2]
 100d8c1:	mov    DWORD PTR [rcx+0x22340],r9d
 100d8c8:	lea    rcx,[rip+0x9981]        # 0x1017250
 100d8cf:	call   0x1007f00
 100d8d4:	xor    eax,eax
 100d8d6:	add    rsp,0x20
 100d8da:	pop    rbx
 100d8db:	ret    
 100d8dc:	xor    r9d,r9d
 100d8df:	cmp    DWORD PTR [rcx+0x7830],r9d
 100d8e6:	jbe    0x100d906
 100d8e8:	mov    QWORD PTR [rdx],r11
 100d8eb:	mov    eax,DWORD PTR [rcx+0x7830]
 100d8f1:	mov    DWORD PTR [rdx+0x8],eax
 100d8f4:	mov    DWORD PTR [rcx+0x7830],r9d
 100d8fb:	mov    r9d,0x1
 100d901:	jmp    0x100da31
 100d906:	cmp    r10d,0x1
 100d90a:	jne    0x100d96a
 100d90c:	mov    rdx,QWORD PTR [rcx+0x7820]
 100d913:	test   rdx,rdx
 100d916:	je     0x100da49
 100d91c:	mov    eax,DWORD PTR [rdx+0xc]
 100d91f:	cmp    QWORD PTR [rcx+0x7828],rax
 100d926:	jb     0x100d939
 100d928:	mov    rax,QWORD PTR [rdx]
 100d92b:	mov    QWORD PTR [rcx+0x7828],r9
 100d932:	mov    QWORD PTR [rcx+0x7820],rax
 100d939:	mov    r8,QWORD PTR [rcx+0x7820]
 100d940:	test   r8,r8
 100d943:	je     0x100da49
 100d949:	mov    rdx,QWORD PTR [rcx+0x7828]
 100d950:	mov    eax,DWORD PTR [r8+0xc]
 100d954:	cmp    rdx,rax
 100d957:	jae    0x100da49
 100d95d:	lea    rax,[rdx+0x1]
 100d961:	mov    QWORD PTR [rcx+0x7828],rax
 100d968:	jmp    0x100d9c6
 100d96a:	mov    rdx,QWORD PTR [rcx+0x7810]
 100d971:	test   rdx,rdx
 100d974:	je     0x100da49
 100d97a:	mov    eax,DWORD PTR [rdx+0xc]
 100d97d:	cmp    QWORD PTR [rcx+0x7818],rax
 100d984:	jb     0x100d997
 100d986:	mov    rax,QWORD PTR [rdx]
 100d989:	mov    QWORD PTR [rcx+0x7818],r9
 100d990:	mov    QWORD PTR [rcx+0x7810],rax
 100d997:	mov    r8,QWORD PTR [rcx+0x7810]
 100d99e:	test   r8,r8
 100d9a1:	je     0x100da49
 100d9a7:	mov    rdx,QWORD PTR [rcx+0x7818]
 100d9ae:	mov    eax,DWORD PTR [r8+0xc]
 100d9b2:	cmp    rdx,rax
 100d9b5:	jae    0x100da49
 100d9bb:	lea    rax,[rdx+0x1]
 100d9bf:	mov    QWORD PTR [rcx+0x7818],rax
 100d9c6:	shl    rdx,0x4
 100d9ca:	add    rdx,0x18
 100d9ce:	add    rdx,r8
 100d9d1:	test   rdx,rdx
 100d9d4:	je     0x100da49
 100d9d6:	cmp    QWORD PTR [rdx],r9
 100d9d9:	je     0x100d906
 100d9df:	mov    rax,QWORD PTR [rdx+0x8]
 100d9e3:	cmp    rax,0x100000
 100d9e9:	ja     0x100d906
 100d9ef:	test   rax,rax
 100d9f2:	je     0x100d906
 100d9f8:	mov    rax,QWORD PTR [rdx]
 100d9fb:	mov    r9d,0x1
 100da01:	mov    QWORD PTR [rbx],rax
 100da04:	mov    eax,DWORD PTR [rdx+0x8]
 100da07:	mov    DWORD PTR [rbx+0x8],eax
 100da0a:	mov    r8,QWORD PTR [rdx]
 100da0d:	cmp    r8,r11
 100da10:	jae    0x100da31
 100da12:	mov    rax,r11
 100da15:	sub    rax,r8
 100da18:	cmp    rax,QWORD PTR [rdx+0x8]
 100da1c:	jae    0x100da31
 100da1e:	sub    r11d,r8d
 100da21:	mov    DWORD PTR [rbx+0x8],r11d
 100da25:	mov    eax,DWORD PTR [rdx+0x8]
 100da28:	sub    eax,r11d
 100da2b:	mov    DWORD PTR [rcx+0x7830],eax
 100da31:	test   r10d,r10d
 100da34:	jne    0x100da50
 100da36:	mov    eax,DWORD PTR [rbx+0x8]
 100da39:	add    QWORD PTR [rcx+0x22338],rax
 100da40:	mov    eax,r9d
 100da43:	add    rsp,0x20
 100da47:	pop    rbx
 100da48:	ret    
 100da49:	mov    DWORD PTR [rcx+0x7830],r9d
 100da50:	mov    eax,r9d
 100da53:	add    rsp,0x20
 100da57:	pop    rbx
 100da58:	ret    
 100da59:	int3   
 100da5a:	int3   
 100da5b:	int3   
 100da5c:	int3   
 100da5d:	int3   
 100da5e:	int3   
 100da5f:	int3   
 100da60:	mov    QWORD PTR [rsp+0x10],rbx
 100da65:	mov    QWORD PTR [rsp+0x18],rbp
 100da6a:	mov    QWORD PTR [rsp+0x20],rsi
 100da6f:	push   rdi
 100da70:	push   r12
 100da72:	push   r13
 100da74:	push   r14
 100da76:	push   r15
 100da78:	sub    rsp,0x30
 100da7c:	xor    r13d,r13d
 100da7f:	mov    r12,rdx
 100da82:	mov    r14,rcx
 100da85:	mov    edi,0x6000
 100da8a:	lea    rbp,[rcx+0x7918]
 100da91:	mov    rsi,rdx
 100da94:	mov    ebx,r13d
 100da97:	nop    WORD PTR [rax+rax*1+0x0]
 100daa0:	mov    r9d,DWORD PTR [r14+0x14]
 100daa4:	mov    rcx,QWORD PTR [r14+0x8]
 100daa8:	lea    rax,[rsp+0x60]
 100daad:	lea    edx,[r9-0x1]
 100dab1:	mov    r8,rbp
 100dab4:	mov    QWORD PTR [rsp+0x60],r13
 100dab9:	and    rdx,rsi
 100dabc:	mov    QWORD PTR [rsp+0x20],rax
 100dac1:	sub    r9,rdx
 100dac4:	mov    rdx,rsi
 100dac7:	cmp    rdi,r9
 100daca:	cmovb  r9,rdi
 100dace:	call   QWORD PTR [rip+0xffffffffffff3744]        # 0x1001218
 100dad4:	test   eax,eax
 100dad6:	je     0x100daed
 100dad8:	mov    rax,QWORD PTR [rsp+0x60]
 100dadd:	add    rbx,rax
 100dae0:	add    rsi,rax
 100dae3:	add    rbp,rax
 100dae6:	sub    rdi,rax
 100dae9:	jne    0x100daa0
 100daeb:	jmp    0x100db08
 100daed:	test   rbx,rbx
 100daf0:	jne    0x100db08
 100daf2:	call   QWORD PTR [rip+0xffffffffffff3728]        # 0x1001220
 100daf8:	test   eax,eax
 100dafa:	jle    0x100db06
 100dafc:	movzx  eax,ax
 100daff:	or     eax,0x80070000
 100db04:	test   eax,eax
 100db06:	jne    0x100db13
 100db08:	shr    rbx,0x3
 100db0c:	mov    QWORD PTR [r14+0x19918],rbx
 100db13:	mov    r15d,0xc000
 100db19:	nop    DWORD PTR [rax+0x0]
 100db20:	mov    rbp,QWORD PTR [r14+0x19918]
 100db27:	mov    rbx,r12
 100db2a:	mov    rsi,r15
 100db2d:	add    rbp,0xf23
 100db34:	sub    rbx,r15
 100db37:	mov    rdi,r13
 100db3a:	lea    rbp,[r14+rbp*8]
 100db3e:	test   r15,r15
 100db41:	je     0x100dba8
 100db43:	data16 data16 data16 data16 nop WORD PTR [rax+rax*1+0x0]
 100db50:	mov    r9d,DWORD PTR [r14+0x14]
 100db54:	lea    rax,[rsp+0x60]
 100db59:	mov    r8,rbp
 100db5c:	lea    ecx,[r9-0x1]
 100db60:	mov    rdx,rbx
 100db63:	mov    QWORD PTR [rsp+0x60],r13
 100db68:	and    rcx,rbx
 100db6b:	mov    QWORD PTR [rsp+0x20],rax
 100db70:	sub    r9,rcx
 100db73:	mov    rcx,QWORD PTR [r14+0x8]
 100db77:	cmp    rsi,r9
 100db7a:	cmovb  r9,rsi
 100db7e:	call   QWORD PTR [rip+0xffffffffffff3694]        # 0x1001218
 100db84:	test   eax,eax
 100db86:	je     0x100db9d
 100db88:	mov    rax,QWORD PTR [rsp+0x60]
 100db8d:	add    rdi,rax
 100db90:	add    rbx,rax
 100db93:	add    rbp,rax
 100db96:	sub    rsi,rax
 100db99:	jne    0x100db50
 100db9b:	jmp    0x100dba8
 100db9d:	test   rdi,rdi
 100dba0:	jne    0x100dba8
 100dba2:	call   QWORD PTR [rip+0xffffffffffff3678]        # 0x1001220
 100dba8:	mov    edx,DWORD PTR [r14+0x14]
 100dbac:	mov    rax,r12
 100dbaf:	sub    rax,r15
 100dbb2:	lea    ecx,[rdx-0x1]
 100dbb5:	and    rcx,rax
 100dbb8:	mov    rax,rdi
 100dbbb:	sub    rdx,rcx
 100dbbe:	mov    rcx,r15
 100dbc1:	cmp    rdx,r15
 100dbc4:	cmovb  rcx,rdx
 100dbc8:	cmp    rcx,rdi
 100dbcb:	cmova  rax,rcx
 100dbcf:	shr    rdi,0x3
 100dbd3:	add    QWORD PTR [r14+0x19918],rdi
 100dbda:	mov    rcx,QWORD PTR [r14+0x19918]
 100dbe1:	sub    r15,rax
 100dbe4:	jne    0x100db20
 100dbea:	mov    rbx,QWORD PTR [rsp+0x68]
 100dbef:	mov    rbp,QWORD PTR [rsp+0x70]
 100dbf4:	mov    rsi,QWORD PTR [rsp+0x78]
 100dbf9:	mov    eax,0x80004005
 100dbfe:	test   rcx,rcx
 100dc01:	cmovne eax,r13d
 100dc05:	add    rsp,0x30
 100dc09:	pop    r15
 100dc0b:	pop    r14
 100dc0d:	pop    r13
 100dc0f:	pop    r12
 100dc11:	pop    rdi
 100dc12:	ret    
 100dc13:	int3   
 100dc14:	int3   
 100dc15:	int3   
 100dc16:	int3   
 100dc17:	int3   
 100dc18:	int3   
 100dc19:	int3   
 100dc1a:	int3   
 100dc1b:	int3   
 100dc1c:	int3   
 100dc1d:	int3   
 100dc1e:	int3   
 100dc1f:	int3   
 100dc20:	mov    rax,rsp
 100dc23:	push   r13
 100dc25:	sub    rsp,0x80
 100dc2c:	mov    r13,QWORD PTR [rdx+0x8]
 100dc30:	mov    QWORD PTR [rax+0x10],rbp
 100dc34:	mov    QWORD PTR [rax-0x18],r12
 100dc38:	mov    QWORD PTR [rax-0x20],r14
 100dc3c:	mov    QWORD PTR [rax-0x28],r15
 100dc40:	mov    r15,rdx
 100dc43:	mov    rbp,rcx
 100dc46:	xor    r12d,r12d
 100dc49:	lea    rdx,[rax-0x58]
 100dc4d:	lea    r8d,[r12+0x30]
 100dc52:	mov    rcx,r13
 100dc55:	call   QWORD PTR [rip+0xffffffffffff3625]        # 0x1001280
 100dc5b:	test   rax,rax
 100dc5e:	je     0x100dc88
 100dc60:	cmp    DWORD PTR [rsp+0x50],0x10000
 100dc68:	jne    0x100dc88
 100dc6a:	lea    edx,[r12+0xa]
 100dc6f:	xor    r9d,r9d
 100dc72:	mov    r8d,0x2000
 100dc78:	mov    rcx,r13
 100dc7b:	call   QWORD PTR [rip+0xffffffffffff360f]        # 0x1001290
 100dc81:	test   rax,rax
 100dc84:	setne  r12b
 100dc88:	mov    rcx,QWORD PTR [r15]
 100dc8b:	xor    edx,edx
 100dc8d:	lea    r8d,[rdx+0x1]
 100dc91:	call   QWORD PTR [rip+0xffffffffffff3469]        # 0x1001100
 100dc97:	mov    r14,rax
 100dc9a:	test   rax,rax
 100dc9d:	je     0x100dd7b
 100dca3:	mov    QWORD PTR [rsp+0x90],rbx
 100dcab:	mov    rcx,rax
 100dcae:	mov    QWORD PTR [rsp+0xa0],rsi
 100dcb6:	mov    QWORD PTR [rsp+0x78],rdi
 100dcbb:	mov    ebx,0xf8
 100dcc0:	call   QWORD PTR [rip+0xffffffffffff3852]        # 0x1001518
 100dcc6:	mov    rsi,rax
 100dcc9:	test   rax,rax
 100dccc:	je     0x100dd40
 100dcce:	movzx  edi,WORD PTR [rsi+0x6]
 100dcd2:	mov    eax,0x20b
 100dcd7:	mov    ecx,0x108
 100dcdc:	cmp    WORD PTR [rsi+0x18],ax
 100dce0:	cmove  ebx,ecx
 100dce3:	test   di,di
 100dce6:	je     0x100dd40
 100dce8:	add    rbx,rsi
 100dceb:	cmp    DWORD PTR [rsi+0xe8],0x0
 100dcf2:	jne    0x100dd5b
 100dcf4:	test   rbx,rbx
 100dcf7:	je     0x100dd5b
 100dcf9:	mov    eax,0xffff
 100dcfe:	xchg   ax,ax
 100dd00:	test   di,di
 100dd03:	je     0x100dd5b
 100dd05:	cmp    DWORD PTR [rbp+0x19920],0x0
 100dd0c:	jne    0x100dd5b
 100dd0e:	test   BYTE PTR [rbx+0x24],0x20
 100dd12:	je     0x100dd35
 100dd14:	cmp    DWORD PTR [rbx+0x18],0x0
 100dd18:	jne    0x100dd35
 100dd1a:	mov    r9,rsi
 100dd1d:	mov    r8,r15
 100dd20:	mov    rdx,r14
 100dd23:	mov    rcx,rbp
 100dd26:	mov    QWORD PTR [rsp+0x20],rbx
 100dd2b:	call   0x100dde0
 100dd30:	mov    eax,0xffff
 100dd35:	add    di,ax
 100dd38:	add    rbx,0x28
 100dd3c:	jne    0x100dd00
 100dd3e:	jmp    0x100dd5b
 100dd40:	mov    r9,QWORD PTR [r15]
 100dd43:	lea    r8,[rip+0xffffffffffff8766]        # 0x10064b0
 100dd4a:	lea    rcx,[rip+0x94ff]        # 0x1017250
 100dd51:	mov    edx,0x1
 100dd56:	call   0x1007f00
 100dd5b:	mov    rcx,r14
 100dd5e:	call   QWORD PTR [rip+0xffffffffffff355c]        # 0x10012c0
 100dd64:	mov    rdi,QWORD PTR [rsp+0x78]
 100dd69:	mov    rsi,QWORD PTR [rsp+0xa0]
 100dd71:	mov    rbx,QWORD PTR [rsp+0x90]
 100dd79:	jmp    0x100dda0
 100dd7b:	call   QWORD PTR [rip+0xffffffffffff349f]        # 0x1001220
 100dd81:	mov    r9,QWORD PTR [r15]
 100dd84:	lea    r8,[rip+0xffffffffffff87a5]        # 0x1006530
 100dd8b:	lea    rcx,[rip+0x94be]        # 0x1017250
 100dd92:	mov    edx,0x1
 100dd97:	mov    DWORD PTR [rsp+0x20],eax
 100dd9b:	call   0x1007f00
 100dda0:	mov    r15,QWORD PTR [rsp+0x60]
 100dda5:	mov    r14,QWORD PTR [rsp+0x68]
 100ddaa:	mov    rbp,QWORD PTR [rsp+0x98]
 100ddb2:	test   r12d,r12d
 100ddb5:	mov    r12,QWORD PTR [rsp+0x70]
 100ddba:	je     0x100ddcd
 100ddbc:	xor    edx,edx
 100ddbe:	mov    r8d,0x8000
 100ddc4:	mov    rcx,r13
 100ddc7:	call   QWORD PTR [rip+0xffffffffffff34bb]        # 0x1001288
 100ddcd:	add    rsp,0x80
 100ddd4:	pop    r13
 100ddd6:	ret    
 100ddd7:	int3   
 100ddd8:	int3   
 100ddd9:	int3   
 100ddda:	int3   
 100dddb:	int3   
 100dddc:	int3   
 100dddd:	int3   
 100ddde:	int3   
 100dddf:	int3   
 100dde0:	mov    r11,rsp
 100dde3:	push   rbx
 100dde4:	push   rbp
 100dde5:	push   rdi
 100dde6:	push   r13
 100dde8:	push   r14
 100ddea:	sub    rsp,0x130
 100ddf1:	mov    rax,QWORD PTR [rip+0x93a8]        # 0x10171a0
 100ddf8:	xor    rax,rsp
 100ddfb:	mov    QWORD PTR [rsp+0x100],rax
 100de03:	mov    rbx,QWORD PTR [rsp+0x180]
 100de0b:	mov    ebp,DWORD PTR [r9+0xdc]
 100de12:	mov    rax,r8
 100de15:	mov    r8d,DWORD PTR [r9+0xd8]
 100de1c:	xor    edi,edi
 100de1e:	mov    QWORD PTR [rsp+0x48],rax
 100de23:	mov    r14,rdx
 100de26:	mov    QWORD PTR [rsp+0x98],rdx
 100de2e:	mov    r13,rcx
 100de31:	mov    DWORD PTR [rsp+0x40],r8d
 100de36:	mov    QWORD PTR [rsp+0x68],rbx
 100de3b:	mov    DWORD PTR [rsp+0x60],ebp
 100de3f:	mov    QWORD PTR [rsp+0x88],rdi
 100de47:	cmp    QWORD PTR [rcx+0x19918],rdi
 100de4e:	jbe    0x100e109
 100de54:	mov    QWORD PTR [r11-0x30],rsi
 100de58:	mov    QWORD PTR [r11-0x38],r12
 100de5c:	lea    rsi,[rcx+0x7918]
 100de63:	mov    QWORD PTR [r11-0x40],r15
 100de67:	lea    r12d,[rdi+0x18]
 100de6b:	mov    QWORD PTR [rsp+0x78],rsi
 100de70:	mov    r10,QWORD PTR [rsi]
 100de73:	mov    rcx,QWORD PTR [rax+0x8]
 100de77:	cmp    r10,rcx
 100de7a:	jb     0x100e0d0
 100de80:	mov    eax,DWORD PTR [rax+0x10]
 100de83:	add    rax,rcx
 100de86:	cmp    r10,rax
 100de89:	jae    0x100e0cb
 100de8f:	mov    eax,DWORD PTR [rbx+0x10]
 100de92:	mov    r11d,DWORD PTR [rbx+0x8]
 100de96:	mov    rdx,r10
 100de99:	sub    rdx,rcx
 100de9c:	cmp    eax,r11d
 100de9f:	cmovb  r11d,eax
 100dea3:	cmp    rdx,r8
 100dea6:	jb     0x100deb9
 100dea8:	mov    rcx,rdx
 100deab:	mov    eax,ebp
 100dead:	sub    rcx,r8
 100deb0:	cmp    rcx,rax
 100deb3:	jb     0x100e0c6
 100deb9:	mov    ebx,DWORD PTR [rbx+0xc]
 100debc:	cmp    rdx,rbx
 100debf:	jb     0x100e0c1
 100dec5:	mov    r9,rdx
 100dec8:	mov    r15d,r11d
 100decb:	sub    r9,rbx
 100dece:	cmp    r9,r15
 100ded1:	jae    0x100e0c1
 100ded7:	cmp    rdx,r8
 100deda:	jb     0x100deee
 100dedc:	mov    eax,ebp
 100dede:	mov    rcx,rdx
 100dee1:	sub    rcx,rax
 100dee4:	sub    rcx,r8
 100dee7:	cmp    r9,rcx
 100deea:	cmovae r9,rcx
 100deee:	sub    r15,rdx
 100def1:	add    r15,rbx
 100def4:	cmp    rdx,r8
 100def7:	ja     0x100df03
 100def9:	sub    r8,rdx
 100defc:	cmp    r15,r8
 100deff:	cmovae r15,r8
 100df03:	cmp    r9,0x18
 100df07:	mov    rdi,r10
 100df0a:	mov    rax,r14
 100df0d:	cmova  r9,r12
 100df11:	sub    rdi,r9
 100df14:	cmp    r15,0x18
 100df18:	cmova  r15,r12
 100df1c:	sub    rax,r10
 100df1f:	xor    r12d,r12d
 100df22:	lea    rbx,[rax+rdi*1]
 100df26:	add    r15,r10
 100df29:	mov    QWORD PTR [rsp+0x50],rdi
 100df2e:	add    rax,r15
 100df31:	add    rbx,rdx
 100df34:	add    rax,rdx
 100df37:	mov    QWORD PTR [rsp+0x90],rbx
 100df3f:	sub    r15,rdi
 100df42:	mov    QWORD PTR [rsp+0x58],rax
 100df47:	nop    WORD PTR [rax+rax*1+0x0]
 100df50:	mov    QWORD PTR [rsp+0x80],0x0
 100df5c:	cmp    r15,0x30
 100df60:	jg     0x100e095
 100df66:	mov    r14,rax
 100df69:	sub    r14,rbx
 100df6c:	cmp    r14,0x30
 100df70:	jg     0x100e095
 100df76:	xor    ebp,ebp
 100df78:	mov    rbx,r15
 100df7b:	lea    rsi,[rsp+0xa0]
 100df83:	test   r15,r15
 100df86:	je     0x100e000
 100df88:	nop    DWORD PTR [rax+rax*1+0x0]
 100df90:	mov    r9d,DWORD PTR [r13+0x14]
 100df94:	lea    rax,[rsp+0x70]
 100df99:	mov    r8,rsi
 100df9c:	lea    ecx,[r9-0x1]
 100dfa0:	mov    rdx,rdi
 100dfa3:	mov    QWORD PTR [rsp+0x70],0x0
 100dfac:	and    rcx,rdi
 100dfaf:	mov    QWORD PTR [rsp+0x20],rax
 100dfb4:	sub    r9,rcx
 100dfb7:	mov    rcx,QWORD PTR [r13+0x8]
 100dfbb:	cmp    rbx,r9
 100dfbe:	cmovb  r9,rbx
 100dfc2:	call   QWORD PTR [rip+0xffffffffffff3250]        # 0x1001218
 100dfc8:	test   eax,eax
 100dfca:	je     0x100dfe1
 100dfcc:	mov    rax,QWORD PTR [rsp+0x70]
 100dfd1:	add    rbp,rax
 100dfd4:	add    rdi,rax
 100dfd7:	add    rsi,rax
 100dfda:	sub    rbx,rax
 100dfdd:	jne    0x100df90
 100dfdf:	jmp    0x100e000
 100dfe1:	test   rbp,rbp
 100dfe4:	jne    0x100e000
 100dfe6:	call   QWORD PTR [rip+0xffffffffffff3234]        # 0x1001220
 100dfec:	test   eax,eax
 100dfee:	jle    0x100dffa
 100dff0:	movzx  eax,ax
 100dff3:	or     eax,0x80070000
 100dff8:	test   eax,eax
 100dffa:	jne    0x100e083
 100e000:	call   QWORD PTR [rip+0xffffffffffff325a]        # 0x1001260
 100e006:	mov    rbx,QWORD PTR [rsp+0x90]
 100e00e:	lea    r8,[rsp+0xd0]
 100e016:	mov    rcx,rax
 100e019:	lea    rax,[rsp+0x80]
 100e021:	mov    r9,r14
 100e024:	mov    rdx,rbx
 100e027:	mov    QWORD PTR [rsp+0x20],rax
 100e02c:	call   QWORD PTR [rip+0xffffffffffff31e6]        # 0x1001218
 100e032:	mov    rdi,QWORD PTR [rsp+0x50]
 100e037:	test   eax,eax
 100e039:	je     0x100e090
 100e03b:	mov    rcx,QWORD PTR [rsp+0x80]
 100e043:	cmp    rbp,rcx
 100e046:	jne    0x100e090
 100e048:	mov    rdx,QWORD PTR [rsp+0x48]
 100e04d:	mov    rax,rdi
 100e050:	lea    r9,[rsp+0xa0]
 100e058:	mov    QWORD PTR [rsp+0x30],rdx
 100e05d:	sub    rax,rbx
 100e060:	lea    r8,[rsp+0xd0]
 100e068:	mov    QWORD PTR [rsp+0x28],rax
 100e06d:	mov    QWORD PTR [rsp+0x20],rcx
 100e072:	mov    rcx,r13
 100e075:	mov    rdx,rdi
 100e078:	call   0x100e130
 100e07d:	test   eax,eax
 100e07f:	jne    0x100e0f1
 100e081:	jmp    0x100e090
 100e083:	mov    rbx,QWORD PTR [rsp+0x90]
 100e08b:	mov    rdi,QWORD PTR [rsp+0x50]
 100e090:	mov    rax,QWORD PTR [rsp+0x58]
 100e095:	inc    r12d
 100e098:	cmp    r12d,0x14
 100e09c:	jb     0x100df50
 100e0a2:	mov    rsi,QWORD PTR [rsp+0x78]
 100e0a7:	mov    rdi,QWORD PTR [rsp+0x88]
 100e0af:	mov    ebp,DWORD PTR [rsp+0x60]
 100e0b3:	mov    r14,QWORD PTR [rsp+0x98]
 100e0bb:	mov    r12d,0x18
 100e0c1:	mov    rbx,QWORD PTR [rsp+0x68]
 100e0c6:	mov    r8d,DWORD PTR [rsp+0x40]
 100e0cb:	mov    rax,QWORD PTR [rsp+0x48]
 100e0d0:	inc    rdi
 100e0d3:	add    rsi,0x8
 100e0d7:	mov    QWORD PTR [rsp+0x88],rdi
 100e0df:	mov    QWORD PTR [rsp+0x78],rsi
 100e0e4:	cmp    rdi,QWORD PTR [r13+0x19918]
 100e0eb:	jb     0x100de70
 100e0f1:	mov    r12,QWORD PTR [rsp+0x120]
 100e0f9:	mov    rsi,QWORD PTR [rsp+0x128]
 100e101:	mov    r15,QWORD PTR [rsp+0x118]
 100e109:	mov    rcx,QWORD PTR [rsp+0x100]
 100e111:	xor    rcx,rsp
 100e114:	call   0x1011420
 100e119:	add    rsp,0x130
 100e120:	pop    r14
 100e122:	pop    r13
 100e124:	pop    rdi
 100e125:	pop    rbp
 100e126:	pop    rbx
 100e127:	ret    
 100e128:	int3   
 100e129:	int3   
 100e12a:	int3   
 100e12b:	int3   
 100e12c:	int3   
 100e12d:	int3   
 100e12e:	int3   
 100e12f:	int3   
 100e130:	mov    QWORD PTR [rsp+0x10],rbx
 100e135:	mov    QWORD PTR [rsp+0x18],rbp
 100e13a:	push   rsi
 100e13b:	push   r14
 100e13d:	push   r15
 100e13f:	sub    rsp,0x40
 100e143:	mov    rax,QWORD PTR [rsp+0x80]
 100e14b:	mov    r11d,0x8
 100e151:	mov    rbx,r9
 100e154:	lea    rsi,[rax-0x8]
 100e158:	mov    rbp,r8
 100e15b:	mov    r15,rdx
 100e15e:	mov    r14,rcx
 100e161:	cmp    rsi,r11
 100e164:	jbe    0x100e296
 100e16a:	mov    r9,QWORD PTR [rsp+0x88]
 100e172:	mov    QWORD PTR [rsp+0x60],rdi
 100e177:	mov    rdi,rbx
 100e17a:	sub    rdi,r8
 100e17d:	lea    r10,[r8+0x8]
 100e181:	movzx  eax,BYTE PTR [r10]
 100e185:	movzx  ecx,BYTE PTR [rdi+r10*1]
 100e18a:	cmp    al,cl
 100e18c:	je     0x100e283
 100e192:	cmp    al,0x90
 100e194:	jne    0x100e19f
 100e196:	cmp    cl,0xf0
 100e199:	je     0x100e283
 100e19f:	cmp    al,0xf0
 100e1a1:	jne    0x100e1ac
 100e1a3:	cmp    cl,0x90
 100e1a6:	je     0x100e283
 100e1ac:	test   r9,r9
 100e1af:	je     0x100e1ed
 100e1b1:	lea    rax,[rdi-0x8]
 100e1b5:	mov    edx,0x8
 100e1ba:	mov    r8,rbp
 100e1bd:	sub    rdx,r11
 100e1c0:	add    rax,r10
 100e1c3:	sub    r8,rbx
 100e1c6:	sub    rdx,rbx
 100e1c9:	nop    DWORD PTR [rax+0x0]
 100e1d0:	mov    rcx,QWORD PTR [rax]
 100e1d3:	sub    rcx,QWORD PTR [r8+rax*1]
 100e1d7:	cmp    rcx,r9
 100e1da:	je     0x100e283
 100e1e0:	inc    rax
 100e1e3:	lea    rcx,[rdx+rax*1]
 100e1e7:	cmp    rcx,0x10
 100e1eb:	jb     0x100e1d0
 100e1ed:	movzx  eax,BYTE PTR [r11+rbx*1]
 100e1f2:	cmp    al,0xe8
 100e1f4:	je     0x100e292
 100e1fa:	movzx  edx,BYTE PTR [r11+rbp*1]
 100e1ff:	movzx  r10d,al
 100e203:	mov    rax,QWORD PTR [rsp+0x90]
 100e20b:	mov    rcx,QWORD PTR [rax]
 100e20e:	lea    r9,[r11+r15*1]
 100e212:	lea    r8,[rip+0xffffffffffff81e7]        # 0x1006400
 100e219:	mov    QWORD PTR [rsp+0x30],rcx
 100e21e:	mov    DWORD PTR [rsp+0x28],edx
 100e222:	lea    rcx,[r14+0x19924]
 100e229:	mov    edx,0x400
 100e22e:	mov    DWORD PTR [rsp+0x20],r10d
 100e233:	call   0x1007600
 100e238:	lea    r8,[r14+0x19924]
 100e23f:	lea    rcx,[rip+0x900a]        # 0x1017250
 100e246:	mov    edx,0x1
 100e24b:	call   0x1007f00
 100e250:	or     DWORD PTR [rip+0x8ea6],0x20004000        # 0x1017100
 100e25a:	mov    DWORD PTR [r14+0x19920],0x1
 100e265:	mov    eax,0x1
 100e26a:	mov    rdi,QWORD PTR [rsp+0x60]
 100e26f:	mov    rbx,QWORD PTR [rsp+0x68]
 100e274:	mov    rbp,QWORD PTR [rsp+0x70]
 100e279:	add    rsp,0x40
 100e27d:	pop    r15
 100e27f:	pop    r14
 100e281:	pop    rsi
 100e282:	ret    
 100e283:	inc    r11
 100e286:	inc    r10
 100e289:	cmp    r11,rsi
 100e28c:	jb     0x100e181
 100e292:	xor    eax,eax
 100e294:	jmp    0x100e26a
 100e296:	xor    eax,eax
 100e298:	jmp    0x100e26f
 100e29a:	int3   
 100e29b:	int3   
 100e29c:	int3   
 100e29d:	int3   
 100e29e:	int3   
 100e29f:	int3   
 100e2a0:	rex push rbx
 100e2a2:	sub    rsp,0x30
 100e2a6:	xor    eax,eax
 100e2a8:	mov    rbx,rcx
 100e2ab:	mov    DWORD PTR [rsp+0x48],eax
 100e2af:	mov    DWORD PTR [rsp+0x40],eax
 100e2b3:	cmp    DWORD PTR [rcx+0x670],eax
 100e2b9:	jne    0x100e34b
 100e2bf:	mov    rdx,QWORD PTR [rip+0x8ec2]        # 0x1017188
 100e2c6:	lea    rax,[rsp+0x58]
 100e2cb:	mov    r9d,0x1
 100e2d1:	xor    r8d,r8d
 100e2d4:	mov    rcx,0xffffffff80000002
 100e2db:	mov    QWORD PTR [rsp+0x20],rax
 100e2e0:	call   QWORD PTR [rip+0xffffffffffff2d3a]        # 0x1001020
 100e2e6:	test   eax,eax
 100e2e8:	jne    0x100e34b
 100e2ea:	mov    rcx,QWORD PTR [rsp+0x58]
 100e2ef:	lea    rax,[rsp+0x40]
 100e2f4:	lea    r9,[rsp+0x50]
 100e2f9:	mov    QWORD PTR [rsp+0x28],rax
 100e2fe:	lea    rax,[rsp+0x48]
 100e303:	lea    rdx,[rip+0xffffffffffff72ce]        # 0x10055d8
 100e30a:	xor    r8d,r8d
 100e30d:	mov    DWORD PTR [rsp+0x40],0x4
 100e315:	mov    QWORD PTR [rsp+0x20],rax
 100e31a:	call   QWORD PTR [rip+0xffffffffffff2d08]        # 0x1001028
 100e320:	test   eax,eax
 100e322:	jne    0x100e340
 100e324:	cmp    DWORD PTR [rsp+0x50],0x4
 100e329:	jne    0x100e340
 100e32b:	cmp    DWORD PTR [rsp+0x40],0x4
 100e330:	jne    0x100e340
 100e332:	mov    eax,DWORD PTR [rsp+0x48]
 100e336:	test   eax,eax
 100e338:	je     0x100e340
 100e33a:	mov    DWORD PTR [rbx+0x670],eax
 100e340:	mov    rcx,QWORD PTR [rsp+0x58]
 100e345:	call   QWORD PTR [rip+0xffffffffffff2ccd]        # 0x1001018
 100e34b:	add    rsp,0x30
 100e34f:	pop    rbx
 100e350:	ret    
 100e351:	int3   
 100e352:	int3   
 100e353:	int3   
 100e354:	int3   
 100e355:	int3   
 100e356:	int3   
 100e357:	int3   
 100e358:	int3   
 100e359:	int3   
 100e35a:	int3   
 100e35b:	int3   
 100e35c:	int3   
 100e35d:	int3   
 100e35e:	int3   
 100e35f:	int3   
 100e360:	rex push rbx
 100e362:	push   rbp
 100e363:	sub    rsp,0x48
 100e367:	mov    rbx,rcx
 100e36a:	mov    rcx,QWORD PTR [rcx+0x8]
 100e36e:	lea    r8,[rsp+0x60]
 100e373:	lea    rdx,[rip+0xffffffffffff62de]        # 0x1004658
 100e37a:	call   0x1010990
 100e37f:	mov    rbp,rax
 100e382:	test   rax,rax
 100e385:	je     0x100e5f7
 100e38b:	mov    QWORD PTR [rsp+0x40],rsi
 100e390:	mov    QWORD PTR [rsp+0x38],rdi
 100e395:	lea    rdx,[rip+0xffffffffffff62fc]        # 0x1004698
 100e39c:	mov    QWORD PTR [rsp+0x30],r12
 100e3a1:	xor    r12d,r12d
 100e3a4:	mov    rcx,rax
 100e3a7:	mov    edi,r12d
 100e3aa:	call   QWORD PTR [rip+0xffffffffffff2ee8]        # 0x1001298
 100e3b0:	test   rax,rax
 100e3b3:	je     0x100e3bd
 100e3b5:	mov    rdi,rax
 100e3b8:	sub    rdi,QWORD PTR [rsp+0x60]
 100e3bd:	lea    rdx,[rip+0xffffffffffff62ec]        # 0x10046b0
 100e3c4:	mov    rcx,rbp
 100e3c7:	mov    rsi,r12
 100e3ca:	call   QWORD PTR [rip+0xffffffffffff2ec8]        # 0x1001298
 100e3d0:	test   rax,rax
 100e3d3:	je     0x100e3dd
 100e3d5:	mov    rsi,rax
 100e3d8:	sub    rsi,QWORD PTR [rsp+0x60]
 100e3dd:	lea    r8,[rsp+0x68]
 100e3e2:	mov    r9d,0x8
 100e3e8:	mov    rdx,rdi
 100e3eb:	mov    rcx,rbx
 100e3ee:	mov    QWORD PTR [rsp+0x28],r14
 100e3f3:	mov    QWORD PTR [rsp+0x68],r12
 100e3f8:	mov    QWORD PTR [rsp+0x70],r12
 100e3fd:	call   0x100bbd0
 100e402:	test   eax,eax
 100e404:	je     0x100e5bb
 100e40a:	mov    rdx,QWORD PTR [rsp+0x68]
 100e40f:	lea    r14,[rbx+0x22578]
 100e416:	mov    r9d,0x4
 100e41c:	mov    r8,r14
 100e41f:	mov    rcx,rbx
 100e422:	call   0x100bbd0
 100e427:	test   eax,eax
 100e429:	je     0x100e5bb
 100e42f:	lea    r8,[rsp+0x70]
 100e434:	mov    r9d,0x8
 100e43a:	mov    rdx,rsi
 100e43d:	mov    rcx,rbx
 100e440:	call   0x100bbd0
 100e445:	test   eax,eax
 100e447:	je     0x100e5bb
 100e44d:	mov    rdx,QWORD PTR [rsp+0x70]
 100e452:	lea    r8,[rbx+0x22580]
 100e459:	mov    r9d,0x4
 100e45f:	mov    rcx,rbx
 100e462:	call   0x100bbd0
 100e467:	test   eax,eax
 100e469:	je     0x100e5bb
 100e46f:	mov    eax,DWORD PTR [r14]
 100e472:	test   eax,eax
 100e474:	je     0x100e5bb
 100e47a:	cmp    eax,0x400
 100e47f:	jae    0x100e5bb
 100e485:	mov    ecx,eax
 100e487:	mov    eax,0xb3c
 100e48c:	mov    rdi,0xffffffffffffffff
 100e493:	mul    rcx
 100e496:	cmovo  rax,rdi
 100e49a:	mov    rcx,rax
 100e49d:	call   0x1011184
 100e4a2:	mov    ecx,DWORD PTR [r14]
 100e4a5:	mov    QWORD PTR [rbx+0x22570],rax
 100e4ac:	mov    eax,0x8
 100e4b1:	mul    rcx
 100e4b4:	cmovo  rax,rdi
 100e4b8:	mov    rcx,rax
 100e4bb:	call   0x1011184
 100e4c0:	lea    rdx,[rip+0xffffffffffff61f9]        # 0x10046c0
 100e4c7:	mov    rcx,rbp
 100e4ca:	mov    rsi,rax
 100e4cd:	mov    rdi,r12
 100e4d0:	call   QWORD PTR [rip+0xffffffffffff2dc2]        # 0x1001298
 100e4d6:	test   rax,rax
 100e4d9:	je     0x100e4e3
 100e4db:	mov    rdi,rax
 100e4de:	sub    rdi,QWORD PTR [rsp+0x60]
 100e4e3:	mov    QWORD PTR [rsp+0x78],r12
 100e4e8:	cmp    QWORD PTR [rbx+0x22570],r12
 100e4ef:	je     0x100e595
 100e4f5:	test   rsi,rsi
 100e4f8:	je     0x100e595
 100e4fe:	test   rdi,rdi
 100e501:	je     0x100e595
 100e507:	lea    r8,[rsp+0x78]
 100e50c:	mov    r9d,0x8
 100e512:	mov    rdx,rdi
 100e515:	mov    rcx,rbx
 100e518:	call   0x100bbd0
 100e51d:	test   eax,eax
 100e51f:	je     0x100e595
 100e521:	mov    r9d,DWORD PTR [r14]
 100e524:	mov    rdx,QWORD PTR [rsp+0x78]
 100e529:	mov    r8,rsi
 100e52c:	shl    r9,0x3
 100e530:	mov    rcx,rbx
 100e533:	call   0x100bbd0
 100e538:	test   eax,eax
 100e53a:	je     0x100e595
 100e53c:	mov    edi,r12d
 100e53f:	cmp    DWORD PTR [r14],r12d
 100e542:	jbe    0x100e5da
 100e548:	nop    DWORD PTR [rax+rax*1+0x0]
 100e550:	mov    rdx,QWORD PTR [rsi]
 100e553:	mov    r8d,edi
 100e556:	mov    r9d,0xb3c
 100e55c:	mov    rcx,rbx
 100e55f:	imul   r8,r8,0xb3c
 100e566:	add    r8,QWORD PTR [rbx+0x22570]
 100e56d:	call   0x100bbd0
 100e572:	test   eax,eax
 100e574:	je     0x100e583
 100e576:	inc    edi
 100e578:	add    rsi,0x8
 100e57c:	cmp    edi,DWORD PTR [r14]
 100e57f:	jb     0x100e550
 100e581:	jmp    0x100e5da
 100e583:	mov    DWORD PTR [r14],r12d
 100e586:	call   QWORD PTR [rip+0xffffffffffff2c94]        # 0x1001220
 100e58c:	lea    r8,[rip+0xffffffffffff613d]        # 0x10046d0
 100e593:	jmp    0x100e5a5
 100e595:	mov    DWORD PTR [r14],r12d
 100e598:	call   QWORD PTR [rip+0xffffffffffff2c82]        # 0x1001220
 100e59e:	lea    r8,[rip+0xffffffffffff617b]        # 0x1004720
 100e5a5:	lea    rcx,[rip+0x8ca4]        # 0x1017250
 100e5ac:	mov    r9d,eax
 100e5af:	mov    edx,0x1
 100e5b4:	call   0x1007f00
 100e5b9:	jmp    0x100e5da
 100e5bb:	lea    r8,[rip+0xffffffffffff61ae]        # 0x1004770
 100e5c2:	lea    rcx,[rip+0x8c87]        # 0x1017250
 100e5c9:	mov    edx,0x1
 100e5ce:	mov    DWORD PTR [rbx+0x22578],r12d
 100e5d5:	call   0x1007f00
 100e5da:	mov    rcx,rbp
 100e5dd:	call   QWORD PTR [rip+0xffffffffffff2cdd]        # 0x10012c0
 100e5e3:	mov    r14,QWORD PTR [rsp+0x28]
 100e5e8:	mov    r12,QWORD PTR [rsp+0x30]
 100e5ed:	mov    rdi,QWORD PTR [rsp+0x38]
 100e5f2:	mov    rsi,QWORD PTR [rsp+0x40]
 100e5f7:	mov    rcx,rbx
 100e5fa:	add    rsp,0x48
 100e5fe:	pop    rbp
 100e5ff:	pop    rbx
 100e600:	jmp    0x100e610
 100e605:	int3   
 100e606:	int3   
 100e607:	int3   
 100e608:	int3   
 100e609:	int3   
 100e60a:	int3   
 100e60b:	int3   
 100e60c:	int3   
 100e60d:	int3   
 100e60e:	int3   
 100e60f:	int3   
 100e610:	rex push rbx
 100e612:	push   rdi
 100e613:	sub    rsp,0x48
 100e617:	xor    ebx,ebx
 100e619:	mov    rdi,rcx
 100e61c:	cmp    DWORD PTR [rcx+0x22578],ebx
 100e622:	jbe    0x100e713
 100e628:	mov    QWORD PTR [rsp+0x60],rbp
 100e62d:	mov    QWORD PTR [rsp+0x68],rsi
 100e632:	mov    QWORD PTR [rsp+0x70],r12
 100e637:	mov    QWORD PTR [rsp+0x78],r14
 100e63c:	mov    esi,ebx
 100e63e:	lea    r12,[rip+0xffffffffffff2f5f]        # 0x10015a4
 100e645:	mov    QWORD PTR [rsp+0x40],r15
 100e64a:	nop    WORD PTR [rax+rax*1+0x0]
 100e650:	mov    r14,QWORD PTR [rdi+0x22570]
 100e657:	lea    rax,[rip+0xffffffffffff319e]        # 0x10017fc
 100e65e:	lea    r8,[rip+0xffffffffffff5deb]        # 0x1004450
 100e665:	add    r14,rsi
 100e668:	mov    edx,0x2
 100e66d:	movzx  ecx,WORD PTR [r14+0x4]
 100e672:	mov    r9d,DWORD PTR [r14]
 100e675:	lea    rbp,[r14+0x316]
 100e67c:	cmp    r9d,DWORD PTR [rdi+0x22580]
 100e683:	mov    DWORD PTR [rsp+0x38],ecx
 100e687:	mov    QWORD PTR [rsp+0x30],rbp
 100e68c:	cmove  rax,r12
 100e690:	lea    r15,[r14+0x6]
 100e694:	lea    rcx,[rip+0x8bb5]        # 0x1017250
 100e69b:	mov    QWORD PTR [rsp+0x28],rax
 100e6a0:	mov    QWORD PTR [rsp+0x20],r15
 100e6a5:	call   0x1007f00
 100e6aa:	test   BYTE PTR [rdi+0x22344],0x2
 100e6b1:	je     0x100e6e5
 100e6b3:	mov    edx,DWORD PTR [r14]
 100e6b6:	movzx  eax,WORD PTR [r14+0x4]
 100e6bb:	lea    r9,[rip+0xffffffffffff313a]        # 0x10017fc
 100e6c2:	cmp    edx,DWORD PTR [rdi+0x22580]
 100e6c8:	mov    DWORD PTR [rsp+0x28],eax
 100e6cc:	lea    rcx,[rip+0xffffffffffff5d7d]        # 0x1004450
 100e6d3:	mov    r8,r15
 100e6d6:	cmove  r9,r12
 100e6da:	mov    QWORD PTR [rsp+0x20],rbp
 100e6df:	call   QWORD PTR [rip+0xffffffffffff2d33]        # 0x1001418
 100e6e5:	inc    ebx
 100e6e7:	add    rsi,0xb3c
 100e6ee:	cmp    ebx,DWORD PTR [rdi+0x22578]
 100e6f4:	jb     0x100e650
 100e6fa:	mov    r15,QWORD PTR [rsp+0x40]
 100e6ff:	mov    r14,QWORD PTR [rsp+0x78]
 100e704:	mov    r12,QWORD PTR [rsp+0x70]
 100e709:	mov    rsi,QWORD PTR [rsp+0x68]
 100e70e:	mov    rbp,QWORD PTR [rsp+0x60]
 100e713:	add    rsp,0x48
 100e717:	pop    rdi
 100e718:	pop    rbx
 100e719:	ret    
 100e71a:	int3   
 100e71b:	int3   
 100e71c:	int3   
 100e71d:	int3   
 100e71e:	int3   
 100e71f:	int3   
 100e720:	mov    QWORD PTR [rsp+0x18],rbx
 100e725:	push   rbp
 100e726:	push   rsi
 100e727:	push   rdi
 100e728:	push   r12
 100e72a:	push   r13
 100e72c:	push   r14
 100e72e:	push   r15
 100e730:	lea    rbp,[rsp-0x1c60]
 100e738:	mov    eax,0x1d60
 100e73d:	call   0x10113c0
 100e742:	sub    rsp,rax
 100e745:	mov    rax,QWORD PTR [rip+0x8a54]        # 0x10171a0
 100e74c:	xor    rax,rsp
 100e74f:	mov    QWORD PTR [rbp+0x1c50],rax
 100e756:	xor    edi,edi
 100e758:	mov    r13,rdx
 100e75b:	mov    r14,rcx
 100e75e:	mov    esi,edi
 100e760:	lea    rcx,[r13+0x6]
 100e764:	xor    edx,edx
 100e766:	mov    r8d,0xf0000
 100e76c:	call   QWORD PTR [rip+0xffffffffffff28c6]        # 0x1001038
 100e772:	mov    r15,rax
 100e775:	test   rax,rax
 100e778:	je     0x100ee9c
 100e77e:	mov    eax,DWORD PTR [rip+0xffffffffffff62b4]        # 0x1004a38
 100e784:	movups xmm0,XMMWORD PTR [rip+0xffffffffffff629d]        # 0x1004a28
 100e78b:	lea    rcx,[rbp+0x436]
 100e792:	mov    DWORD PTR [rbp+0x430],eax
 100e798:	movzx  eax,WORD PTR [rip+0xffffffffffff629d]        # 0x1004a3c
 100e79f:	xor    edx,edx
 100e7a1:	movaps XMMWORD PTR [rbp+0x420],xmm0
 100e7a8:	mov    r8d,0x3fc
 100e7ae:	mov    WORD PTR [rbp+0x434],ax
 100e7b5:	call   0x1011452
 100e7ba:	lea    rbx,[r13+0x316]
 100e7c1:	mov    edx,0x5c
 100e7c6:	mov    rcx,rbx
 100e7c9:	call   QWORD PTR [rip+0xffffffffffff2c79]        # 0x1001448
 100e7cf:	test   rax,rax
 100e7d2:	je     0x100e7d8
 100e7d4:	lea    rbx,[rax+0x2]
 100e7d8:	mov    ecx,0x209
 100e7dd:	lea    rax,[rbp+0x420]
 100e7e4:	mov    r10d,edi
 100e7e7:	cmp    WORD PTR [rax],0x0
 100e7eb:	je     0x100e801
 100e7ed:	add    rax,0x2
 100e7f1:	dec    rcx
 100e7f4:	jne    0x100e7e7
 100e7f6:	mov    r10d,0x80070057
 100e7fc:	mov    rdx,rdi
 100e7ff:	jmp    0x100e819
 100e801:	test   rcx,rcx
 100e804:	jne    0x100e811
 100e806:	mov    r10d,0x80070057
 100e80c:	mov    rdx,rdi
 100e80f:	jmp    0x100e819
 100e811:	mov    edx,0x209
 100e816:	sub    rdx,rcx
 100e819:	test   r10d,r10d
 100e81c:	js     0x100e87b
 100e81e:	lea    rax,[rbp+0x420]
 100e825:	mov    ecx,0x209
 100e82a:	mov    r10d,edi
 100e82d:	lea    rax,[rax+rdx*2]
 100e831:	sub    rcx,rdx
 100e834:	je     0x100e86b
 100e836:	lea    r8,[rdx+0x7ffffdf6]
 100e83d:	mov    r9,rbx
 100e840:	add    r8,rcx
 100e843:	sub    r9,rax
 100e846:	test   r8,r8
 100e849:	je     0x100e866
 100e84b:	movzx  edx,WORD PTR [rax+r9*1]
 100e850:	test   dx,dx
 100e853:	je     0x100e866
 100e855:	mov    WORD PTR [rax],dx
 100e858:	add    rax,0x2
 100e85c:	dec    r8
 100e85f:	dec    rcx
 100e862:	jne    0x100e846
 100e864:	jmp    0x100e86b
 100e866:	test   rcx,rcx
 100e869:	jne    0x100e875
 100e86b:	sub    rax,0x2
 100e86f:	mov    r10d,0x8007007a
 100e875:	mov    WORD PTR [rax],di
 100e878:	test   r10d,r10d
 100e87b:	jne    0x100ee74
 100e881:	lea    rdx,[rbp+0x420]
 100e888:	mov    r8d,0x80000010
 100e88e:	mov    rcx,r15
 100e891:	call   QWORD PTR [rip+0xffffffffffff27a9]        # 0x1001040
 100e897:	mov    rsi,rax
 100e89a:	test   rax,rax
 100e89d:	jne    0x100e8c1
 100e89f:	lea    rdx,[rip+0xffffffffffff2e5a]        # 0x1001700
 100e8a6:	mov    r8d,0x80000010
 100e8ac:	mov    rcx,r15
 100e8af:	call   QWORD PTR [rip+0xffffffffffff278b]        # 0x1001040
 100e8b5:	mov    rsi,rax
 100e8b8:	test   rax,rax
 100e8bb:	je     0x100ee41
 100e8c1:	mov    eax,DWORD PTR [rip+0xffffffffffff2ce1]        # 0x10015a8
 100e8c7:	lea    rcx,[rbp+0x6]
 100e8cb:	xor    edx,edx
 100e8cd:	mov    DWORD PTR [rsp+0x50],eax
 100e8d1:	mov    eax,DWORD PTR [rip+0xffffffffffff6211]        # 0x1004ae8
 100e8d7:	mov    r8d,0x40c
 100e8dd:	mov    DWORD PTR [rbp+0x0],eax
 100e8e0:	movzx  eax,WORD PTR [rip+0xffffffffffff6205]        # 0x1004aec
 100e8e7:	mov    WORD PTR [rbp+0x4],ax
 100e8eb:	call   0x1011452
 100e8f0:	mov    r11d,0x209
 100e8f6:	lea    rax,[rbp+0x0]
 100e8fa:	mov    r9d,edi
 100e8fd:	nop    DWORD PTR [rax]
 100e900:	cmp    WORD PTR [rax],0x0
 100e904:	je     0x100e91a
 100e906:	add    rax,0x2
 100e90a:	dec    r11
 100e90d:	jne    0x100e900
 100e90f:	mov    r9d,0x80070057
 100e915:	mov    rdx,rdi
 100e918:	jmp    0x100e932
 100e91a:	test   r11,r11
 100e91d:	jne    0x100e92a
 100e91f:	mov    r9d,0x80070057
 100e925:	mov    rdx,rdi
 100e928:	jmp    0x100e932
 100e92a:	mov    edx,0x209
 100e92f:	sub    rdx,r11
 100e932:	test   r9d,r9d
 100e935:	js     0x100e994
 100e937:	lea    rax,[rbp+0x0]
 100e93b:	mov    ecx,0x209
 100e940:	mov    r9d,edi
 100e943:	lea    rax,[rax+rdx*2]
 100e947:	sub    rcx,rdx
 100e94a:	je     0x100e984
 100e94c:	lea    r8,[rdx+0x7ffffdf6]
 100e953:	add    r8,rcx
 100e956:	sub    rbx,rax
 100e959:	nop    DWORD PTR [rax+0x0]
 100e960:	test   r8,r8
 100e963:	je     0x100e97f
 100e965:	movzx  edx,WORD PTR [rax+rbx*1]
 100e969:	test   dx,dx
 100e96c:	je     0x100e97f
 100e96e:	mov    WORD PTR [rax],dx
 100e971:	add    rax,0x2
 100e975:	dec    r8
 100e978:	dec    rcx
 100e97b:	jne    0x100e960
 100e97d:	jmp    0x100e984
 100e97f:	test   rcx,rcx
 100e982:	jne    0x100e98e
 100e984:	sub    rax,0x2
 100e988:	mov    r9d,0x8007007a
 100e98e:	mov    WORD PTR [rax],di
 100e991:	test   r9d,r9d
 100e994:	jne    0x100ee6b
 100e99a:	mov    eax,DWORD PTR [r14+0x66c]
 100e9a1:	mov    r9d,DWORD PTR [r14+0x19c8]
 100e9a8:	lea    r8,[rip+0xffffffffffff49f9]        # 0x10033a8
 100e9af:	lea    rcx,[rbp-0x40]
 100e9b3:	mov    edx,0x20
 100e9b8:	mov    DWORD PTR [rsp+0x20],eax
 100e9bc:	call   0x1007600
 100e9c1:	test   eax,eax
 100e9c3:	jne    0x100ee62
 100e9c9:	movups xmm0,XMMWORD PTR [rip+0xffffffffffff6190]        # 0x1004b60
 100e9d0:	movups xmm1,XMMWORD PTR [rip+0xffffffffffff6199]        # 0x1004b70
 100e9d7:	movzx  eax,WORD PTR [rip+0xffffffffffff61ba]        # 0x1004b98
 100e9de:	lea    rcx,[rbp+0x87a]
 100e9e5:	xor    edx,edx
 100e9e7:	mov    r8d,0x7c6
 100e9ed:	mov    WORD PTR [rbp+0x878],ax
 100e9f4:	movaps XMMWORD PTR [rbp+0x840],xmm0
 100e9fb:	movaps XMMWORD PTR [rbp+0x850],xmm1
 100ea02:	movups xmm0,XMMWORD PTR [rip+0xffffffffffff6177]        # 0x1004b80
 100ea09:	movsd  xmm1,QWORD PTR [rip+0xffffffffffff617f]        # 0x1004b90
 100ea11:	movaps XMMWORD PTR [rbp+0x860],xmm0
 100ea18:	movsd  QWORD PTR [rbp+0x870],xmm1
 100ea20:	call   0x1011452
 100ea25:	lea    rcx,[r14+0x22350]
 100ea2c:	lea    rdx,[rsp+0x58]
 100ea31:	mov    QWORD PTR [rsp+0x58],rdi
 100ea36:	call   QWORD PTR [rip+0xffffffffffff2a8c]        # 0x10014c8
 100ea3c:	test   eax,eax
 100ea3e:	jne    0x100ee59
 100ea44:	mov    ecx,0x400
 100ea49:	lea    rax,[rbp+0x840]
 100ea50:	mov    ebx,edi
 100ea52:	cmp    WORD PTR [rax],0x0
 100ea56:	je     0x100ea6b
 100ea58:	add    rax,0x2
 100ea5c:	dec    rcx
 100ea5f:	jne    0x100ea52
 100ea61:	mov    ebx,0x80070057
 100ea66:	mov    rdx,rdi
 100ea69:	jmp    0x100ea82
 100ea6b:	test   rcx,rcx
 100ea6e:	jne    0x100ea7a
 100ea70:	mov    ebx,0x80070057
 100ea75:	mov    rdx,rdi
 100ea78:	jmp    0x100ea82
 100ea7a:	mov    edx,0x400
 100ea7f:	sub    rdx,rcx
 100ea82:	test   ebx,ebx
 100ea84:	js     0x100eae1
 100ea86:	lea    rax,[rbp+0x840]
 100ea8d:	mov    ecx,0x400
 100ea92:	mov    ebx,edi
 100ea94:	lea    rax,[rax+rdx*2]
 100ea98:	sub    rcx,rdx
 100ea9b:	je     0x100ead5
 100ea9d:	mov    r9,QWORD PTR [rsp+0x58]
 100eaa2:	lea    r8,[rdx+0x7ffffbff]
 100eaa9:	add    r8,rcx
 100eaac:	sub    r9,rax
 100eaaf:	nop
 100eab0:	test   r8,r8
 100eab3:	je     0x100ead0
 100eab5:	movzx  edx,WORD PTR [rax+r9*1]
 100eaba:	test   dx,dx
 100eabd:	je     0x100ead0
 100eabf:	mov    WORD PTR [rax],dx
 100eac2:	add    rax,0x2
 100eac6:	dec    r8
 100eac9:	dec    rcx
 100eacc:	jne    0x100eab0
 100eace:	jmp    0x100ead5
 100ead0:	test   rcx,rcx
 100ead3:	jne    0x100eade
 100ead5:	sub    rax,0x2
 100ead9:	mov    ebx,0x8007007a
 100eade:	mov    WORD PTR [rax],di
 100eae1:	lea    rcx,[rsp+0x58]
 100eae6:	call   QWORD PTR [rip+0xffffffffffff29ec]        # 0x10014d8
 100eaec:	test   ebx,ebx
 100eaee:	jne    0x100ee50
 100eaf4:	mov    ecx,DWORD PTR [r14+0x22344]
 100eafb:	movzx  eax,WORD PTR [r13+0x4]
 100eb00:	mov    rdx,QWORD PTR [r14+0x6e0]
 100eb07:	and    ecx,0xffffffde
 100eb0a:	lea    r9,[r14+0x22364]
 100eb11:	lea    r8,[rip+0xffffffffffff6118]        # 0x1004c30
 100eb18:	mov    DWORD PTR [rsp+0x38],ecx
 100eb1c:	mov    DWORD PTR [rsp+0x30],eax
 100eb20:	mov    eax,DWORD PTR [r14+0x22360]
 100eb27:	mov    DWORD PTR [rsp+0x28],eax
 100eb2b:	mov    QWORD PTR [rsp+0x20],rdx
 100eb30:	lea    rcx,[rbp+0x1040]
 100eb37:	mov    edx,0x208
 100eb3c:	call   0x1007600
 100eb41:	test   eax,eax
 100eb43:	jne    0x100ee50
 100eb49:	mov    ecx,0x400
 100eb4e:	lea    rax,[rbp+0x840]
 100eb55:	mov    r10d,edi
 100eb58:	cmp    WORD PTR [rax],0x0
 100eb5c:	je     0x100eb72
 100eb5e:	add    rax,0x2
 100eb62:	dec    rcx
 100eb65:	jne    0x100eb58
 100eb67:	mov    r10d,0x80070057
 100eb6d:	mov    rdx,rdi
 100eb70:	jmp    0x100eb8a
 100eb72:	test   rcx,rcx
 100eb75:	jne    0x100eb82
 100eb77:	mov    r10d,0x80070057
 100eb7d:	mov    rdx,rdi
 100eb80:	jmp    0x100eb8a
 100eb82:	mov    edx,0x400
 100eb87:	sub    rdx,rcx
 100eb8a:	test   r10d,r10d
 100eb8d:	js     0x100ebf5
 100eb8f:	lea    rax,[rbp+0x840]
 100eb96:	mov    ecx,0x400
 100eb9b:	mov    r10d,edi
 100eb9e:	lea    rax,[rax+rdx*2]
 100eba2:	sub    rcx,rdx
 100eba5:	je     0x100ebe5
 100eba7:	lea    r8,[rdx+0x7ffffbff]
 100ebae:	lea    r9,[rbp+0x1040]
 100ebb5:	add    r8,rcx
 100ebb8:	sub    r9,rax
 100ebbb:	nop    DWORD PTR [rax+rax*1+0x0]
 100ebc0:	test   r8,r8
 100ebc3:	je     0x100ebe0
 100ebc5:	movzx  edx,WORD PTR [rax+r9*1]
 100ebca:	test   dx,dx
 100ebcd:	je     0x100ebe0
 100ebcf:	mov    WORD PTR [rax],dx
 100ebd2:	add    rax,0x2
 100ebd6:	dec    r8
 100ebd9:	dec    rcx
 100ebdc:	jne    0x100ebc0
 100ebde:	jmp    0x100ebe5
 100ebe0:	test   rcx,rcx
 100ebe3:	jne    0x100ebef
 100ebe5:	sub    rax,0x2
 100ebe9:	mov    r10d,0x8007007a
 100ebef:	mov    WORD PTR [rax],di
 100ebf2:	test   r10d,r10d
 100ebf5:	jne    0x100ee50
 100ebfb:	lea    rax,[rsp+0x50]
 100ec00:	lea    rcx,[rip+0xffffffffffff5e39]        # 0x1004a40
 100ec07:	lea    r9,[r13+0x6]
 100ec0b:	mov    QWORD PTR [rsp+0x68],rax
 100ec10:	lea    rax,[rsp+0x50]
 100ec15:	mov    QWORD PTR [rbp-0x80],rcx
 100ec19:	mov    QWORD PTR [rsp+0x70],rax
 100ec1e:	lea    rax,[rbp+0x0]
 100ec22:	lea    r8,[rip+0xffffffffffff6027]        # 0x1004c50
 100ec29:	mov    QWORD PTR [rsp+0x78],rax
 100ec2e:	lea    rax,[rbp-0x40]
 100ec32:	mov    edx,0x2
 100ec37:	mov    QWORD PTR [rbp-0x78],rax
 100ec3b:	lea    rax,[rbp+0x840]
 100ec42:	mov    QWORD PTR [rbp-0x70],rax
 100ec46:	lea    rax,[rbp+0x840]
 100ec4d:	mov    QWORD PTR [rsp+0x48],rax
 100ec52:	lea    rax,[rbp-0x40]
 100ec56:	mov    QWORD PTR [rsp+0x40],rax
 100ec5b:	mov    QWORD PTR [rsp+0x38],rcx
 100ec60:	lea    rax,[rbp+0x0]
 100ec64:	mov    QWORD PTR [rsp+0x30],rax
 100ec69:	lea    rax,[rsp+0x50]
 100ec6e:	lea    rcx,[rip+0x85db]        # 0x1017250
 100ec75:	mov    QWORD PTR [rsp+0x28],rax
 100ec7a:	lea    rax,[rsp+0x50]
 100ec7f:	mov    QWORD PTR [rsp+0x20],rax
 100ec84:	call   0x1007f00
 100ec89:	lea    r8,[rsp+0x68]
 100ec8e:	mov    edx,0x6
 100ec93:	mov    rcx,rsi
 100ec96:	call   QWORD PTR [rip+0xffffffffffff23cc]        # 0x1001068
 100ec9c:	test   eax,eax
 100ec9e:	jne    0x100ece6
 100eca0:	call   QWORD PTR [rip+0xffffffffffff257a]        # 0x1001220
 100eca6:	cmp    eax,0x420
 100ecab:	jne    0x100ecd1
 100ecad:	mov    ecx,0x64
 100ecb2:	call   QWORD PTR [rip+0xffffffffffff23e8]        # 0x10010a0
 100ecb8:	lea    r8,[rsp+0x68]
 100ecbd:	mov    edx,0x6
 100ecc2:	mov    rcx,rsi
 100ecc5:	call   QWORD PTR [rip+0xffffffffffff239d]        # 0x1001068
 100eccb:	test   eax,eax
 100eccd:	je     0x100eca0
 100eccf:	jmp    0x100ece6
 100ecd1:	call   QWORD PTR [rip+0xffffffffffff2549]        # 0x1001220
 100ecd7:	lea    rdx,[rip+0xffffffffffff5fea]        # 0x1004cc8
 100ecde:	mov    rcx,r14
 100ece1:	call   0x100ef00
 100ece6:	xor    eax,eax
 100ece8:	mov    QWORD PTR [rbp-0x68],rax
 100ecec:	mov    QWORD PTR [rbp-0x60],rax
 100ecf0:	mov    QWORD PTR [rbp-0x58],rax
 100ecf4:	mov    QWORD PTR [rbp-0x50],rax
 100ecf8:	mov    DWORD PTR [rbp-0x48],eax
 100ecfb:	nop    DWORD PTR [rax+rax*1+0x0]
 100ed00:	lea    rax,[rsp+0x60]
 100ed05:	lea    r8,[rbp-0x68]
 100ed09:	mov    r9d,0x24
 100ed0f:	xor    edx,edx
 100ed11:	mov    rcx,rsi
 100ed14:	mov    DWORD PTR [rsp+0x60],edi
 100ed18:	mov    QWORD PTR [rsp+0x20],rax
 100ed1d:	call   QWORD PTR [rip+0xffffffffffff2325]        # 0x1001048
 100ed23:	test   eax,eax
 100ed25:	je     0x100ed5d
 100ed27:	mov    eax,DWORD PTR [rbp-0x64]
 100ed2a:	cmp    eax,0x2
 100ed2d:	je     0x100ed3d
 100ed2f:	cmp    eax,0x4
 100ed32:	je     0x100ed3d
 100ed34:	cmp    eax,0x10
 100ed37:	jne    0x100edf9
 100ed3d:	xor    eax,eax
 100ed3f:	mov    QWORD PTR [rbp-0x68],rax
 100ed43:	mov    QWORD PTR [rbp-0x60],rax
 100ed47:	mov    QWORD PTR [rbp-0x58],rax
 100ed4b:	lea    ecx,[rax+0x64]
 100ed4e:	mov    QWORD PTR [rbp-0x50],rax
 100ed52:	mov    DWORD PTR [rbp-0x48],eax
 100ed55:	call   QWORD PTR [rip+0xffffffffffff2345]        # 0x10010a0
 100ed5b:	jmp    0x100ed00
 100ed5d:	call   QWORD PTR [rip+0xffffffffffff24bd]        # 0x1001220
 100ed63:	mov    ebx,eax
 100ed65:	test   eax,eax
 100ed67:	jle    0x100ed72
 100ed69:	movzx  ebx,ax
 100ed6c:	or     ebx,0x80070000
 100ed72:	call   QWORD PTR [rip+0xffffffffffff24a8]        # 0x1001220
 100ed78:	mov    QWORD PTR [rsp+0x30],0x0
 100ed81:	mov    r9d,0x400
 100ed87:	mov    edi,eax
 100ed89:	lea    rax,[rbp+0x1450]
 100ed90:	xor    edx,edx
 100ed92:	mov    ecx,0x1000
 100ed97:	mov    r8d,edi
 100ed9a:	mov    DWORD PTR [rsp+0x28],0x400
 100eda2:	mov    QWORD PTR [rsp+0x20],rax
 100eda7:	call   QWORD PTR [rip+0xffffffffffff233b]        # 0x10010e8
 100edad:	lea    r9,[rip+0xffffffffffff5f44]        # 0x1004cf8
 100edb4:	mov    edx,0x1
 100edb9:	lea    rcx,[rip+0x8490]        # 0x1017250
 100edc0:	test   eax,eax
 100edc2:	je     0x100ede2
 100edc4:	lea    rax,[rbp+0x1450]
 100edcb:	lea    r8,[rip+0xffffffffffff59ee]        # 0x10047c0
 100edd2:	mov    QWORD PTR [rsp+0x28],rax
 100edd7:	mov    DWORD PTR [rsp+0x20],edi
 100eddb:	call   0x1007f00
 100ede0:	jmp    0x100edf2
 100ede2:	lea    r8,[rip+0xffffffffffff59f7]        # 0x10047e0
 100ede9:	mov    DWORD PTR [rsp+0x20],edi
 100eded:	call   0x1007f00
 100edf2:	test   ebx,ebx
 100edf4:	jne    0x100ee35
 100edf6:	mov    eax,DWORD PTR [rbp-0x64]
 100edf9:	mov    ecx,DWORD PTR [rbp-0x54]
 100edfc:	lea    r9,[r13+0x6]
 100ee00:	lea    r8,[rip+0xffffffffffff5f39]        # 0x1004d40
 100ee07:	mov    DWORD PTR [rsp+0x40],ecx
 100ee0b:	mov    ecx,DWORD PTR [rbp-0x4c]
 100ee0e:	mov    edx,0x2
 100ee13:	mov    DWORD PTR [rsp+0x38],ecx
 100ee17:	mov    ecx,DWORD PTR [rbp-0x5c]
 100ee1a:	mov    DWORD PTR [rsp+0x30],ecx
 100ee1e:	mov    DWORD PTR [rsp+0x28],eax
 100ee22:	mov    eax,DWORD PTR [rbp-0x58]
 100ee25:	lea    rcx,[rip+0x8424]        # 0x1017250
 100ee2c:	mov    DWORD PTR [rsp+0x20],eax
 100ee30:	call   0x1007f00
 100ee35:	test   rsi,rsi
 100ee38:	jne    0x100ee83
 100ee3a:	xor    edi,edi
 100ee3c:	jmp    0x100e760
 100ee41:	call   QWORD PTR [rip+0xffffffffffff23d9]        # 0x1001220
 100ee47:	lea    rdx,[rip+0xffffffffffff5c42]        # 0x1004a90
 100ee4e:	jmp    0x100ee7b
 100ee50:	lea    rdx,[rip+0xffffffffffff5d89]        # 0x1004be0
 100ee57:	jmp    0x100ee7b
 100ee59:	lea    rdx,[rip+0xffffffffffff5d40]        # 0x1004ba0
 100ee60:	jmp    0x100ee7b
 100ee62:	lea    rdx,[rip+0xffffffffffff5cb7]        # 0x1004b20
 100ee69:	jmp    0x100ee7b
 100ee6b:	lea    rdx,[rip+0xffffffffffff5c7e]        # 0x1004af0
 100ee72:	jmp    0x100ee7b
 100ee74:	lea    rdx,[rip+0xffffffffffff5be5]        # 0x1004a60
 100ee7b:	mov    rcx,r14
 100ee7e:	call   0x100ef00
 100ee83:	mov    rcx,r15
 100ee86:	call   QWORD PTR [rip+0xffffffffffff21a4]        # 0x1001030
 100ee8c:	test   rsi,rsi
 100ee8f:	je     0x100eece
 100ee91:	mov    rcx,rsi
 100ee94:	call   QWORD PTR [rip+0xffffffffffff2196]        # 0x1001030
 100ee9a:	jmp    0x100eece
 100ee9c:	call   QWORD PTR [rip+0xffffffffffff237e]        # 0x1001220
 100eea2:	mov    ebx,eax
 100eea4:	test   eax,eax
 100eea6:	jle    0x100eeb1
 100eea8:	movzx  ebx,ax
 100eeab:	or     ebx,0x80070000
 100eeb1:	lea    rdx,[rip+0xffffffffffff5b28]        # 0x10049e0
 100eeb8:	mov    rcx,r14
 100eebb:	call   0x100ef00
 100eec0:	test   ebx,ebx
 100eec2:	je     0x100eece
 100eec4:	or     DWORD PTR [rip+0x8232],0x20008000        # 0x1017100
 100eece:	mov    rcx,QWORD PTR [rbp+0x1c50]
 100eed5:	xor    rcx,rsp
 100eed8:	call   0x1011420
 100eedd:	mov    rbx,QWORD PTR [rsp+0x1db0]
 100eee5:	add    rsp,0x1d60
 100eeec:	pop    r15
 100eeee:	pop    r14
 100eef0:	pop    r13
 100eef2:	pop    r12
 100eef4:	pop    rdi
 100eef5:	pop    rsi
 100eef6:	pop    rbp
 100eef7:	ret    
 100eef8:	int3   
 100eef9:	int3   
 100eefa:	int3   
 100eefb:	int3   
 100eefc:	int3   
 100eefd:	int3   
 100eefe:	int3   
 100eeff:	int3   
 100ef00:	mov    QWORD PTR [rsp+0x8],rbx
 100ef05:	push   rdi
 100ef06:	sub    rsp,0x850
 100ef0d:	mov    rax,QWORD PTR [rip+0x828c]        # 0x10171a0
 100ef14:	xor    rax,rsp
 100ef17:	mov    QWORD PTR [rsp+0x840],rax
 100ef1f:	mov    rdi,rdx
 100ef22:	call   QWORD PTR [rip+0xffffffffffff22f8]        # 0x1001220
 100ef28:	mov    QWORD PTR [rsp+0x30],0x0
 100ef31:	mov    ebx,eax
 100ef33:	lea    rax,[rsp+0x40]
 100ef38:	mov    r9d,0x400
 100ef3e:	xor    edx,edx
 100ef40:	mov    ecx,0x1000
 100ef45:	mov    r8d,ebx
 100ef48:	mov    DWORD PTR [rsp+0x28],0x400
 100ef50:	mov    QWORD PTR [rsp+0x20],rax
 100ef55:	call   QWORD PTR [rip+0xffffffffffff218d]        # 0x10010e8
 100ef5b:	mov    r9,rdi
 100ef5e:	mov    edx,0x1
 100ef63:	lea    rcx,[rip+0x82e6]        # 0x1017250
 100ef6a:	test   eax,eax
 100ef6c:	je     0x100ef8a
 100ef6e:	lea    rax,[rsp+0x40]
 100ef73:	lea    r8,[rip+0xffffffffffff5846]        # 0x10047c0
 100ef7a:	mov    QWORD PTR [rsp+0x28],rax
 100ef7f:	mov    DWORD PTR [rsp+0x20],ebx
 100ef83:	call   0x1007f00
 100ef88:	jmp    0x100ef9a
 100ef8a:	lea    r8,[rip+0xffffffffffff584f]        # 0x10047e0
 100ef91:	mov    DWORD PTR [rsp+0x20],ebx
 100ef95:	call   0x1007f00
 100ef9a:	mov    rcx,QWORD PTR [rsp+0x840]
 100efa2:	xor    rcx,rsp
 100efa5:	call   0x1011420
 100efaa:	mov    rbx,QWORD PTR [rsp+0x860]
 100efb2:	add    rsp,0x850
 100efb9:	pop    rdi
 100efba:	ret    
 100efbb:	int3   
 100efbc:	int3   
 100efbd:	int3   
 100efbe:	int3   
 100efbf:	int3   
 100efc0:	int3   
 100efc1:	int3   
 100efc2:	int3   
 100efc3:	int3   
 100efc4:	int3   
 100efc5:	int3   
 100efc6:	int3   
 100efc7:	int3   
 100efc8:	int3   
 100efc9:	int3   
 100efca:	int3   
 100efcb:	int3   
 100efcc:	int3   
 100efcd:	int3   
 100efce:	int3   
 100efcf:	int3   
 100efd0:	rex push rbx
 100efd2:	push   rbp
 100efd3:	push   rsi
 100efd4:	push   rdi
 100efd5:	push   r14
 100efd7:	sub    rsp,0x470
 100efde:	mov    rax,QWORD PTR [rip+0x81bb]        # 0x10171a0
 100efe5:	xor    rax,rsp
 100efe8:	mov    QWORD PTR [rsp+0x460],rax
 100eff0:	mov    rax,rdx
 100eff3:	mov    rdi,rcx
 100eff6:	mov    edx,0x3a
 100effb:	mov    rcx,rax
 100effe:	call   QWORD PTR [rip+0xffffffffffff245c]        # 0x1001460
 100f004:	xor    r14d,r14d
 100f007:	lea    rcx,[rsp+0x42]
 100f00c:	xor    edx,edx
 100f00e:	mov    r8d,0x208
 100f014:	mov    esi,r14d
 100f017:	mov    rbx,rax
 100f01a:	lea    ebp,[r14+0x1]
 100f01e:	mov    WORD PTR [rsp+0x40],r14w
 100f024:	call   0x1011452
 100f029:	test   rbx,rbx
 100f02c:	je     0x100f03e
 100f02e:	lea    edx,[rbp+0x39]
 100f031:	lea    rcx,[rbx+0x2]
 100f035:	call   QWORD PTR [rip+0xffffffffffff2425]        # 0x1001460
 100f03b:	mov    rbx,rax
 100f03e:	mov    ecx,0xb3c
 100f043:	call   0x1011184
 100f048:	mov    QWORD PTR [rdi+0x22570],rax
 100f04f:	test   rax,rax
 100f052:	jne    0x100f066
 100f054:	lea    rdx,[rip+0xffffffffffff5795]        # 0x10047f0
 100f05b:	mov    rcx,rdi
 100f05e:	call   0x100ef00
 100f063:	mov    ebp,r14d
 100f066:	mov    QWORD PTR [rsp+0x4b0],r15
 100f06e:	test   rbx,rbx
 100f071:	je     0x100f283
 100f077:	lea    r15,[rip+0xffffffffffff0f82]        # 0x1000000
 100f07e:	xchg   ax,ax
 100f080:	cmp    ebp,0x1
 100f083:	jne    0x100f283
 100f089:	add    rbx,0x2
 100f08d:	lea    edx,[rbp+0x5b]
 100f090:	mov    rcx,rbx
 100f093:	call   QWORD PTR [rip+0xffffffffffff23c7]        # 0x1001460
 100f099:	mov    WORD PTR [rsp+0x40],r14w
 100f09f:	mov    r11,rax
 100f0a2:	test   rax,rax
 100f0a5:	je     0x100f128
 100f0ab:	mov    r8,rax
 100f0ae:	sub    r8,rbx
 100f0b1:	sar    r8,1
 100f0b4:	cmp    r8,0x7ffffffe
 100f0bb:	jbe    0x100f0d1
 100f0bd:	mov    r9d,0x80070057
 100f0c3:	mov    WORD PTR [rsp+0x40],r14w
 100f0c9:	mov    rbx,rax
 100f0cc:	jmp    0x100f179
 100f0d1:	lea    rax,[rsp+0x40]
 100f0d6:	add    r8,0xfffffffffffffefb
 100f0dd:	mov    edx,0x105
 100f0e2:	lea    rcx,[rsp+0x40]
 100f0e7:	mov    r9d,r14d
 100f0ea:	sub    rbx,rax
 100f0ed:	nop    DWORD PTR [rax]
 100f0f0:	lea    rax,[r8+rdx*1]
 100f0f4:	test   rax,rax
 100f0f7:	je     0x100f110
 100f0f9:	movzx  eax,WORD PTR [rbx+rcx*1]
 100f0fd:	test   ax,ax
 100f100:	je     0x100f110
 100f102:	mov    WORD PTR [rcx],ax
 100f105:	add    rcx,0x2
 100f109:	dec    rdx
 100f10c:	jne    0x100f0f0
 100f10e:	jmp    0x100f115
 100f110:	test   rdx,rdx
 100f113:	jne    0x100f11f
 100f115:	sub    rcx,0x2
 100f119:	mov    r9d,0x8007007a
 100f11f:	mov    WORD PTR [rcx],r14w
 100f123:	mov    rbx,r11
 100f126:	jmp    0x100f179
 100f128:	lea    rax,[rsp+0x40]
 100f12d:	mov    edx,0x105
 100f132:	lea    rcx,[rsp+0x40]
 100f137:	sub    rbx,rax
 100f13a:	mov    r9d,r14d
 100f13d:	nop    DWORD PTR [rax]
 100f140:	lea    rax,[rdx+0x7ffffef9]
 100f147:	test   rax,rax
 100f14a:	je     0x100f163
 100f14c:	movzx  eax,WORD PTR [rbx+rcx*1]
 100f150:	test   ax,ax
 100f153:	je     0x100f163
 100f155:	mov    WORD PTR [rcx],ax
 100f158:	add    rcx,0x2
 100f15c:	dec    rdx
 100f15f:	jne    0x100f140
 100f161:	jmp    0x100f168
 100f163:	test   rdx,rdx
 100f166:	jne    0x100f172
 100f168:	sub    rcx,0x2
 100f16c:	mov    r9d,0x8007007a
 100f172:	mov    WORD PTR [rcx],r14w
 100f176:	mov    rbx,r14
 100f179:	test   r9d,r9d
 100f17c:	jne    0x100f2a3
 100f182:	cmp    esi,0x5
 100f185:	ja     0x100f278
 100f18b:	mov    eax,esi
 100f18d:	mov    ecx,DWORD PTR [r15+rax*4+0xf34c]
 100f195:	add    rcx,r15
 100f198:	jmp    rcx
 100f19a:	lea    rdx,[rdi+0x22350]
 100f1a1:	lea    rcx,[rsp+0x40]
 100f1a6:	call   QWORD PTR [rip+0xffffffffffff2314]        # 0x10014c0
 100f1ac:	test   eax,eax
 100f1ae:	je     0x100f278
 100f1b4:	lea    rdx,[rip+0xffffffffffff56d5]        # 0x1004890
 100f1bb:	mov    rcx,rdi
 100f1be:	call   0x100ef00
 100f1c3:	mov    ebp,r14d
 100f1c6:	jmp    0x100f278
 100f1cb:	lea    rcx,[rdi+0x22364]
 100f1d2:	lea    r8,[rsp+0x40]
 100f1d7:	mov    edx,0x105
 100f1dc:	sub    r8,rcx
 100f1df:	mov    r9d,r14d
 100f1e2:	lea    rax,[rdx+0x7ffffef9]
 100f1e9:	test   rax,rax
 100f1ec:	je     0x100f206
 100f1ee:	movzx  eax,WORD PTR [r8+rcx*1]
 100f1f3:	test   ax,ax
 100f1f6:	je     0x100f206
 100f1f8:	mov    WORD PTR [rcx],ax
 100f1fb:	add    rcx,0x2
 100f1ff:	dec    rdx
 100f202:	jne    0x100f1e2
 100f204:	jmp    0x100f20b
 100f206:	test   rdx,rdx
 100f209:	jne    0x100f215
 100f20b:	sub    rcx,0x2
 100f20f:	mov    r9d,0x8007007a
 100f215:	mov    WORD PTR [rcx],r14w
 100f219:	test   r9d,r9d
 100f21c:	je     0x100f278
 100f21e:	lea    rdx,[rip+0xffffffffffff56bb]        # 0x10048e0
 100f225:	mov    rcx,rdi
 100f228:	call   0x100ef00
 100f22d:	mov    ebp,r14d
 100f230:	jmp    0x100f278
 100f232:	lea    r8,[rdi+0x6e0]
 100f239:	lea    rdx,[rip+0xffffffffffff56e0]        # 0x1004920
 100f240:	jmp    0x100f26d
 100f242:	lea    r8,[rdi+0x22360]
 100f249:	lea    rdx,[rip+0xffffffffffff56d0]        # 0x1004920
 100f250:	jmp    0x100f26d
 100f252:	mov    r8,QWORD PTR [rdi+0x22570]
 100f259:	add    r8,0x4
 100f25d:	jmp    0x100f266
 100f25f:	lea    r8,[rdi+0x22344]
 100f266:	lea    rdx,[rip+0xffffffffffff56bb]        # 0x1004928
 100f26d:	lea    rcx,[rsp+0x40]
 100f272:	call   QWORD PTR [rip+0xffffffffffff2190]        # 0x1001408
 100f278:	inc    esi
 100f27a:	test   rbx,rbx
 100f27d:	jne    0x100f080
 100f283:	test   ebp,ebp
 100f285:	je     0x100f2b5
 100f287:	cmp    esi,0x6
 100f28a:	je     0x100f2b5
 100f28c:	lea    rdx,[rip+0xffffffffffff569d]        # 0x1004930
 100f293:	mov    rcx,rdi
 100f296:	call   0x100ef00
 100f29b:	mov    eax,r14d
 100f29e:	jmp    0x100f325
 100f2a3:	lea    rdx,[rip+0xffffffffffff5586]        # 0x1004830
 100f2aa:	mov    rcx,rdi
 100f2ad:	call   0x100ef00
 100f2b2:	mov    ebp,r14d
 100f2b5:	lea    rcx,[rsp+0x250]
 100f2bd:	xor    edx,edx
 100f2bf:	mov    r8d,0x20a
 100f2c5:	call   0x1011452
 100f2ca:	lea    rdx,[rsp+0x30]
 100f2cf:	lea    rcx,[rsp+0x250]
 100f2d7:	mov    DWORD PTR [rsp+0x30],0x104
 100f2df:	call   QWORD PTR [rip+0xffffffffffff1e63]        # 0x1001148
 100f2e5:	test   eax,eax
 100f2e7:	je     0x100f314
 100f2e9:	lea    rax,[rsp+0x250]
 100f2f1:	lea    r9,[rdi+0x22364]
 100f2f8:	lea    rcx,[rdi+0x40]
 100f2fc:	lea    r8,[rip+0xffffffffffff569d]        # 0x10049a0
 100f303:	mov    edx,0x105
 100f308:	mov    QWORD PTR [rsp+0x20],rax
 100f30d:	call   0x1007600
 100f312:	jmp    0x100f323
 100f314:	lea    rdx,[rip+0xffffffffffff5695]        # 0x10049b0
 100f31b:	mov    rcx,rdi
 100f31e:	call   0x100ef00
 100f323:	mov    eax,ebp
 100f325:	mov    r15,QWORD PTR [rsp+0x4b0]
 100f32d:	mov    rcx,QWORD PTR [rsp+0x460]
 100f335:	xor    rcx,rsp
 100f338:	call   0x1011420
 100f33d:	add    rsp,0x470
 100f344:	pop    r14
 100f346:	pop    rdi
 100f347:	pop    rsi
 100f348:	pop    rbp
 100f349:	pop    rbx
 100f34a:	ret    
 100f34b:	nop
 100f34c:	(bad)  
 100f34d:	icebp  
 100f34e:	add    BYTE PTR [rax],al
 100f350:	retf   
 100f351:	icebp  
 100f352:	add    BYTE PTR [rax],al
 100f354:	xor    dh,dl
 100f356:	add    BYTE PTR [rax],al
 100f358:	rex.X
 100f359:	repnz add BYTE PTR [rax],al
 100f35c:	push   rdx
 100f35d:	repnz add BYTE PTR [rax],al
 100f360:	pop    rdi
 100f361:	repnz add BYTE PTR [rax],al
 100f364:	int3   
 100f365:	int3   
 100f366:	int3   
 100f367:	int3   
 100f368:	int3   
 100f369:	int3   
 100f36a:	int3   
 100f36b:	int3   
 100f36c:	int3   
 100f36d:	int3   
 100f36e:	int3   
 100f36f:	int3   
 100f370:	mov    r11,rsp
 100f373:	push   r14
 100f375:	push   r15
 100f377:	sub    rsp,0x278
 100f37e:	mov    rax,QWORD PTR [rip+0x7e1b]        # 0x10171a0
 100f385:	xor    rax,rsp
 100f388:	mov    QWORD PTR [rsp+0x260],rax
 100f390:	mov    rax,QWORD PTR [rcx+0x22570]
 100f397:	mov    QWORD PTR [r11+0x10],rbx
 100f39b:	mov    QWORD PTR [r11+0x18],rbp
 100f39f:	xor    r15d,r15d
 100f3a2:	mov    r14,rcx
 100f3a5:	mov    QWORD PTR [r11+0x20],rsi
 100f3a9:	mov    DWORD PTR [rsp+0x30],r15d
 100f3ae:	movzx  r9d,WORD PTR [rax+0x4]
 100f3b3:	lea    r8,[rip+0xffffffffffff5c2e]        # 0x1004fe8
 100f3ba:	lea    edx,[r15+0x2]
 100f3be:	lea    rcx,[rip+0x7e8b]        # 0x1017250
 100f3c5:	mov    QWORD PTR [r11-0x18],rdi
 100f3c9:	call   0x1007f00
 100f3ce:	lea    ecx,[r15+0x2]
 100f3d2:	call   0x1010c40
 100f3d7:	lea    ecx,[r15+0x17]
 100f3db:	mov    rsi,rax
 100f3de:	call   0x1010c40
 100f3e3:	mov    rbp,rax
 100f3e6:	test   rax,rax
 100f3e9:	je     0x100f42f
 100f3eb:	mov    edi,r15d
 100f3ee:	cmp    DWORD PTR [rax],r15d
 100f3f1:	jbe    0x100f42f
 100f3f3:	lea    rbx,[rax+0x4]
 100f3f7:	nop    WORD PTR [rax+rax*1+0x0]
 100f400:	mov    rcx,QWORD PTR [r14+0x22570]
 100f407:	movzx  ecx,WORD PTR [rcx+0x4]
 100f40b:	call   QWORD PTR [rip+0xffffffffffff20f7]        # 0x1001508
 100f411:	movzx  r11d,ax
 100f415:	cmp    r11d,DWORD PTR [rbx+0x14]
 100f419:	je     0x100f428
 100f41b:	inc    edi
 100f41d:	add    rbx,0x38
 100f421:	cmp    edi,DWORD PTR [rbp+0x0]
 100f424:	jb     0x100f400
 100f426:	jmp    0x100f42f
 100f428:	mov    eax,DWORD PTR [rbx+0x34]
 100f42b:	mov    DWORD PTR [rsp+0x30],eax
 100f42f:	cmp    DWORD PTR [rsp+0x30],r15d
 100f434:	jne    0x100f47e
 100f436:	test   rsi,rsi
 100f439:	je     0x100f47e
 100f43b:	mov    edi,r15d
 100f43e:	cmp    DWORD PTR [rsi],r15d
 100f441:	jbe    0x100f47e
 100f443:	lea    rbx,[rsi+0x4]
 100f447:	nop    WORD PTR [rax+rax*1+0x0]
 100f450:	mov    rax,QWORD PTR [r14+0x22570]
 100f457:	movzx  ecx,WORD PTR [rax+0x4]
 100f45b:	call   QWORD PTR [rip+0xffffffffffff20a7]        # 0x1001508
 100f461:	movzx  r11d,ax
 100f465:	cmp    r11d,DWORD PTR [rbx+0x8]
 100f469:	je     0x100f477
 100f46b:	inc    edi
 100f46d:	add    rbx,0x18
 100f471:	cmp    edi,DWORD PTR [rsi]
 100f473:	jb     0x100f450
 100f475:	jmp    0x100f47e
 100f477:	mov    eax,DWORD PTR [rbx+0x14]
 100f47a:	mov    DWORD PTR [rsp+0x30],eax
 100f47e:	mov    rcx,rsi
 100f481:	call   0x1011190
 100f486:	mov    rcx,rbp
 100f489:	call   0x1011190
 100f48e:	mov    rdi,QWORD PTR [rsp+0x270]
 100f496:	mov    rsi,QWORD PTR [rsp+0x2a8]
 100f49e:	mov    rbp,QWORD PTR [rsp+0x2a0]
 100f4a6:	mov    rbx,QWORD PTR [rsp+0x298]
 100f4ae:	cmp    DWORD PTR [rsp+0x30],r15d
 100f4b3:	jne    0x100f583
 100f4b9:	lea    r8,[rip+0xffffffffffff5b60]        # 0x1005020
 100f4c0:	lea    rcx,[rip+0x7d89]        # 0x1017250
 100f4c7:	mov    edx,0x2
 100f4cc:	call   0x1007f00
 100f4d1:	lea    rcx,[rsp+0x52]
 100f4d6:	xor    edx,edx
 100f4d8:	mov    r8d,0x208
 100f4de:	mov    QWORD PTR [rsp+0x38],r15
 100f4e3:	mov    WORD PTR [rsp+0x50],r15w
 100f4e9:	call   0x1011452
 100f4ee:	mov    rcx,QWORD PTR [r14+0x22570]
 100f4f5:	lea    r9,[rsp+0x40]
 100f4fa:	lea    r8,[rsp+0x50]
 100f4ff:	add    rcx,0x316
 100f506:	xor    edx,edx
 100f508:	mov    DWORD PTR [rsp+0x40],0x105
 100f510:	call   0x1011a24
 100f515:	test   eax,eax
 100f517:	je     0x100f583
 100f519:	lea    rax,[rsp+0x38]
 100f51e:	lea    rdx,[rsp+0x50]
 100f523:	mov    r9d,0x20019
 100f529:	xor    r8d,r8d
 100f52c:	mov    rcx,0xffffffff80000002
 100f533:	mov    QWORD PTR [rsp+0x20],rax
 100f538:	call   QWORD PTR [rip+0xffffffffffff1ae2]        # 0x1001020
 100f53e:	test   eax,eax
 100f540:	jne    0x100f583
 100f542:	mov    rcx,QWORD PTR [rsp+0x38]
 100f547:	lea    rax,[rsp+0x34]
 100f54c:	lea    r9,[rsp+0x44]
 100f551:	mov    QWORD PTR [rsp+0x28],rax
 100f556:	lea    rax,[rsp+0x30]
 100f55b:	lea    rdx,[rip+0xffffffffffff5afe]        # 0x1005060
 100f562:	xor    r8d,r8d
 100f565:	mov    DWORD PTR [rsp+0x34],0x4
 100f56d:	mov    QWORD PTR [rsp+0x20],rax
 100f572:	call   QWORD PTR [rip+0xffffffffffff1ab0]        # 0x1001028
 100f578:	mov    rcx,QWORD PTR [rsp+0x38]
 100f57d:	call   QWORD PTR [rip+0xffffffffffff1a95]        # 0x1001018
 100f583:	mov    r9d,DWORD PTR [rsp+0x30]
 100f588:	lea    r8,[rip+0xffffffffffff5af1]        # 0x1005080
 100f58f:	lea    rcx,[rip+0x7cba]        # 0x1017250
 100f596:	mov    edx,0x2
 100f59b:	call   0x1007f00
 100f5a0:	mov    eax,DWORD PTR [rsp+0x30]
 100f5a4:	mov    rcx,QWORD PTR [rsp+0x260]
 100f5ac:	xor    rcx,rsp
 100f5af:	call   0x1011420
 100f5b4:	add    rsp,0x278
 100f5bb:	pop    r15
 100f5bd:	pop    r14
 100f5bf:	ret    
 100f5c0:	int3   
 100f5c1:	int3   
 100f5c2:	int3   
 100f5c3:	int3   
 100f5c4:	int3   
 100f5c5:	int3   
 100f5c6:	int3   
 100f5c7:	int3   
 100f5c8:	int3   
 100f5c9:	int3   
 100f5ca:	int3   
 100f5cb:	int3   
 100f5cc:	int3   
 100f5cd:	int3   
 100f5ce:	int3   
 100f5cf:	int3   
 100f5d0:	rex push rbx
 100f5d2:	sub    rsp,0x30
 100f5d6:	xor    r9d,r9d
 100f5d9:	mov    rbx,rcx
 100f5dc:	xor    r8d,r8d
 100f5df:	lea    edx,[r9+0x1]
 100f5e3:	xor    ecx,ecx
 100f5e5:	call   QWORD PTR [rip+0xffffffffffff1b0d]        # 0x10010f8
 100f5eb:	mov    QWORD PTR [rbx+0x225b0],rax
 100f5f2:	test   rax,rax
 100f5f5:	jne    0x100f60e
 100f5f7:	lea    rdx,[rip+0xffffffffffff5e7a]        # 0x1005478
 100f5fe:	mov    rcx,rbx
 100f601:	call   0x100ef00
 100f606:	xor    eax,eax
 100f608:	add    rsp,0x30
 100f60c:	pop    rbx
 100f60d:	ret    
 100f60e:	lea    rax,[rsp+0x40]
 100f613:	lea    r8,[rip+0x1716]        # 0x1010d30
 100f61a:	mov    r9,rbx
 100f61d:	mov    QWORD PTR [rsp+0x28],rax
 100f622:	xor    edx,edx
 100f624:	xor    ecx,ecx
 100f626:	mov    DWORD PTR [rsp+0x20],0x0
 100f62e:	call   QWORD PTR [rip+0xffffffffffff1c14]        # 0x1001248
 100f634:	mov    QWORD PTR [rbx+0x225b8],rax
 100f63b:	test   rax,rax
 100f63e:	jne    0x100f676
 100f640:	call   QWORD PTR [rip+0xffffffffffff1bda]        # 0x1001220
 100f646:	lea    r8,[rip+0xffffffffffff5e73]        # 0x10054c0
 100f64d:	lea    rcx,[rip+0x7bfc]        # 0x1017250
 100f654:	mov    r9d,eax
 100f657:	mov    edx,0x1
 100f65c:	call   0x1007f00
 100f661:	mov    rcx,QWORD PTR [rbx+0x225b0]
 100f668:	call   QWORD PTR [rip+0xffffffffffff1a6a]        # 0x10010d8
 100f66e:	xor    eax,eax
 100f670:	add    rsp,0x30
 100f674:	pop    rbx
 100f675:	ret    
 100f676:	mov    eax,0x1
 100f67b:	add    rsp,0x30
 100f67f:	pop    rbx
 100f680:	ret    
 100f681:	int3   
 100f682:	int3   
 100f683:	int3   
 100f684:	int3   
 100f685:	int3   
 100f686:	int3   
 100f687:	int3   
 100f688:	int3   
 100f689:	int3   
 100f68a:	int3   
 100f68b:	int3   
 100f68c:	int3   
 100f68d:	int3   
 100f68e:	int3   
 100f68f:	int3   
 100f690:	mov    QWORD PTR [rsp+0x20],rdi
 100f695:	push   rbp
 100f696:	push   r14
 100f698:	push   r15
 100f69a:	lea    rbp,[rsp-0x800]
 100f6a2:	sub    rsp,0x900
 100f6a9:	mov    rax,QWORD PTR [rip+0x7af0]        # 0x10171a0
 100f6b0:	xor    rax,rsp
 100f6b3:	mov    QWORD PTR [rbp+0x7f0],rax
 100f6ba:	mov    r14,QWORD PTR [rcx]
 100f6bd:	mov    rdi,rcx
 100f6c0:	lea    rcx,[rsp+0x58]
 100f6c5:	xor    r15d,r15d
 100f6c8:	xor    edx,edx
 100f6ca:	mov    r8d,0x898
 100f6d0:	mov    QWORD PTR [rsp+0x40],r15
 100f6d5:	call   0x1011452
 100f6da:	mov    DWORD PTR [rsp+0x50],0x8a0
 100f6e2:	mov    rax,QWORD PTR [r14+0x8]
 100f6e6:	lea    r8,[r14+0x73f0]
 100f6ed:	mov    edx,0x104
 100f6f2:	mov    QWORD PTR [rsp+0x58],rax
 100f6f7:	lea    rax,[rbp+0x1e0]
 100f6fe:	lea    rcx,[rbp+0x1e0]
 100f705:	sub    r8,rax
 100f708:	mov    r9d,r15d
 100f70b:	nop    DWORD PTR [rax+rax*1+0x0]
 100f710:	lea    rax,[rdx+0x7ffffefa]
 100f717:	test   rax,rax
 100f71a:	je     0x100f734
 100f71c:	movzx  eax,WORD PTR [r8+rcx*1]
 100f721:	test   ax,ax
 100f724:	je     0x100f734
 100f726:	mov    WORD PTR [rcx],ax
 100f729:	add    rcx,0x2
 100f72d:	dec    rdx
 100f730:	jne    0x100f710
 100f732:	jmp    0x100f739
 100f734:	test   rdx,rdx
 100f737:	jne    0x100f743
 100f739:	sub    rcx,0x2
 100f73d:	mov    r9d,0x8007007a
 100f743:	mov    WORD PTR [rcx],r15w
 100f747:	test   r9d,r9d
 100f74a:	jns    0x100f78a
 100f74c:	lea    r8,[rip+0xffffffffffff631d]        # 0x1005a70
 100f753:	mov    edx,0x1
 100f758:	lea    rcx,[rip+0x7af1]        # 0x1017250
 100f75f:	call   0x1007f00
 100f764:	xor    eax,eax
 100f766:	mov    rcx,QWORD PTR [rbp+0x7f0]
 100f76d:	xor    rcx,rsp
 100f770:	call   0x1011420
 100f775:	mov    rdi,QWORD PTR [rsp+0x938]
 100f77d:	add    rsp,0x900
 100f784:	pop    r15
 100f786:	pop    r14
 100f788:	pop    rbp
 100f789:	ret    
 100f78a:	mov    r10,QWORD PTR [rip+0x79ff]        # 0x1017190
 100f791:	lea    r8,[r14+0x19924]
 100f798:	cmp    DWORD PTR [r14+0x19920],r15d
 100f79f:	jne    0x100f7a4
 100f7a1:	mov    r8,r10
 100f7a4:	lea    rax,[rbp+0x3e8]
 100f7ab:	mov    edx,0x200
 100f7b0:	lea    rcx,[rbp+0x3e8]
 100f7b7:	sub    r8,rax
 100f7ba:	mov    r9d,r15d
 100f7bd:	nop    DWORD PTR [rax]
 100f7c0:	lea    rax,[rdx+0x7ffffdfe]
 100f7c7:	test   rax,rax
 100f7ca:	je     0x100f7e4
 100f7cc:	movzx  eax,WORD PTR [r8+rcx*1]
 100f7d1:	test   ax,ax
 100f7d4:	je     0x100f7e4
 100f7d6:	mov    WORD PTR [rcx],ax
 100f7d9:	add    rcx,0x2
 100f7dd:	dec    rdx
 100f7e0:	jne    0x100f7c0
 100f7e2:	jmp    0x100f7e9
 100f7e4:	test   rdx,rdx
 100f7e7:	jne    0x100f7f3
 100f7e9:	sub    rcx,0x2
 100f7ed:	mov    r9d,0x8007007a
 100f7f3:	mov    WORD PTR [rcx],r15w
 100f7f7:	mov    edx,0x1
 100f7fc:	test   r9d,r9d
 100f7ff:	jns    0x100f80d
 100f801:	lea    r8,[rip+0xffffffffffff62d8]        # 0x1005ae0
 100f808:	jmp    0x100f758
 100f80d:	lea    r9,[rsp+0x40]
 100f812:	lea    r8,[rsp+0x50]
 100f817:	mov    rcx,r10
 100f81a:	call   0x1011b45
 100f81f:	lea    rcx,[rip+0x7a2a]        # 0x1017250
 100f826:	test   eax,eax
 100f828:	jns    0x100f83e
 100f82a:	mov    r9d,eax
 100f82d:	lea    r8,[rip+0xffffffffffff630c]        # 0x1005b40
 100f834:	mov    edx,0x1
 100f839:	jmp    0x100f75f
 100f83e:	lea    r8,[rip+0xffffffffffff634b]        # 0x1005b90
 100f845:	mov    edx,0x2
 100f84a:	mov    QWORD PTR [rsp+0x928],rbx
 100f852:	call   0x1007f00
 100f857:	mov    r9,QWORD PTR [rdi]
 100f85a:	mov    rcx,QWORD PTR [rsp+0x40]
 100f85f:	add    r9,0x73f0
 100f866:	xor    r8d,r8d
 100f869:	xor    edx,edx
 100f86b:	call   0x1011b5d
 100f870:	mov    ebx,eax
 100f872:	test   eax,eax
 100f874:	jns    0x100f882
 100f876:	lea    r8,[rip+0xffffffffffff6343]        # 0x1005bc0
 100f87d:	jmp    0x100f91d
 100f882:	mov    r8,QWORD PTR [rdi]
 100f885:	movzx  ecx,WORD PTR [r8+0x75fc]
 100f88d:	movzx  edx,WORD PTR [r8+0x75fe]
 100f895:	movzx  eax,WORD PTR [r8+0x75f8]
 100f89d:	movzx  r9d,WORD PTR [r8+0x75fa]
 100f8a5:	mov    DWORD PTR [rsp+0x30],ecx
 100f8a9:	mov    DWORD PTR [rsp+0x28],edx
 100f8ad:	mov    rdx,QWORD PTR [rsp+0x40]
 100f8b2:	mov    r8d,0x1
 100f8b8:	mov    rcx,rdi
 100f8bb:	mov    DWORD PTR [rsp+0x20],eax
 100f8bf:	call   0x100fd50
 100f8c4:	mov    ebx,eax
 100f8c6:	test   eax,eax
 100f8c8:	js     0x100fc14
 100f8ce:	mov    rax,QWORD PTR [rdi]
 100f8d1:	mov    rdx,QWORD PTR [rsp+0x40]
 100f8d6:	mov    r8d,0x2
 100f8dc:	mov    r9d,DWORD PTR [rax+0x71c8]
 100f8e3:	mov    rcx,rdi
 100f8e6:	call   0x100fe40
 100f8eb:	mov    ebx,eax
 100f8ed:	test   eax,eax
 100f8ef:	js     0x100fc14
 100f8f5:	mov    r9,QWORD PTR [rdi]
 100f8f8:	mov    rcx,QWORD PTR [rsp+0x40]
 100f8fd:	xor    r8d,r8d
 100f900:	lea    edx,[r8+0x3]
 100f904:	add    r9,0x7600
 100f90b:	call   0x1011b5d
 100f910:	mov    ebx,eax
 100f912:	test   eax,eax
 100f914:	jns    0x100f936
 100f916:	lea    r8,[rip+0xffffffffffff6323]        # 0x1005c40
 100f91d:	lea    rcx,[rip+0x792c]        # 0x1017250
 100f924:	mov    r9d,eax
 100f927:	mov    edx,0x1
 100f92c:	call   0x1007f00
 100f931:	jmp    0x100fc14
 100f936:	mov    r8,QWORD PTR [rdi]
 100f939:	movzx  ecx,WORD PTR [r8+0x780c]
 100f941:	movzx  edx,WORD PTR [r8+0x780e]
 100f949:	movzx  eax,WORD PTR [r8+0x7808]
 100f951:	movzx  r9d,WORD PTR [r8+0x780a]
 100f959:	mov    DWORD PTR [rsp+0x30],ecx
 100f95d:	mov    DWORD PTR [rsp+0x28],edx
 100f961:	mov    rdx,QWORD PTR [rsp+0x40]
 100f966:	mov    r8d,0x4
 100f96c:	mov    rcx,rdi
 100f96f:	mov    DWORD PTR [rsp+0x20],eax
 100f973:	call   0x100fd50
 100f978:	mov    ebx,eax
 100f97a:	test   eax,eax
 100f97c:	js     0x100fc14
 100f982:	mov    rax,QWORD PTR [rdi]
 100f985:	mov    rdx,QWORD PTR [rsp+0x40]
 100f98a:	mov    r8d,0x5
 100f990:	mov    r9d,DWORD PTR [rax+0x73e0]
 100f997:	mov    rcx,rdi
 100f99a:	call   0x100fe40
 100f99f:	mov    ebx,eax
 100f9a1:	test   eax,eax
 100f9a3:	js     0x100fc14
 100f9a9:	mov    rax,QWORD PTR [rdi]
 100f9ac:	mov    rcx,QWORD PTR [rax+0x690]
 100f9b3:	test   rcx,rcx
 100f9b6:	je     0x100f9bd
 100f9b8:	mov    r9d,DWORD PTR [rcx]
 100f9bb:	jmp    0x100f9c0
 100f9bd:	mov    r9d,r15d
 100f9c0:	mov    rdx,QWORD PTR [rsp+0x40]
 100f9c5:	mov    r8d,0x6
 100f9cb:	mov    rcx,rdi
 100f9ce:	call   0x100fc80
 100f9d3:	mov    ebx,eax
 100f9d5:	test   eax,eax
 100f9d7:	js     0x100fc14
 100f9dd:	mov    rax,QWORD PTR [rdi]
 100f9e0:	mov    r9d,0x99999999
 100f9e6:	cmp    DWORD PTR [rax+0x19920],r15d
 100f9ed:	jne    0x100f9f6
 100f9ef:	mov    r9,QWORD PTR [rax+0x73e8]
 100f9f6:	mov    rdx,QWORD PTR [rsp+0x40]
 100f9fb:	mov    r8d,0x7
 100fa01:	mov    rcx,rdi
 100fa04:	call   0x100fe40
 100fa09:	mov    ebx,eax
 100fa0b:	test   eax,eax
 100fa0d:	js     0x100fc14
 100fa13:	mov    r9,QWORD PTR [r14+0x6e0]
 100fa1a:	mov    rdx,QWORD PTR [rsp+0x40]
 100fa1f:	mov    r8d,0x8
 100fa25:	mov    rcx,rdi
 100fa28:	call   0x100fe40
 100fa2d:	mov    ebx,eax
 100fa2f:	test   eax,eax
 100fa31:	js     0x100fc14
 100fa37:	mov    rcx,QWORD PTR [rdi]
 100fa3a:	mov    QWORD PTR [rsp+0x930],rsi
 100fa42:	call   0x1009a70
 100fa47:	test   eax,eax
 100fa49:	jne    0x100fa5d
 100fa4b:	mov    rax,QWORD PTR [rdi]
 100fa4e:	mov    esi,r15d
 100fa51:	test   DWORD PTR [rax+0x668],0x80000
 100fa5b:	je     0x100fa62
 100fa5d:	mov    esi,0x1
 100fa62:	mov    rdx,QWORD PTR [rdi]
 100fa65:	add    rdx,0x24a
 100fa6c:	je     0x100fab8
 100fa6e:	mov    rcx,QWORD PTR [rsp+0x40]
 100fa73:	mov    r9d,esi
 100fa76:	mov    r8d,0x2
 100fa7c:	call   0x1011b75
 100fa81:	lea    rcx,[rip+0x77c8]        # 0x1017250
 100fa88:	mov    ebx,eax
 100fa8a:	test   eax,eax
 100fa8c:	jns    0x100faa7
 100fa8e:	lea    r8,[rip+0xffffffffffff622b]        # 0x1005cc0
 100fa95:	mov    r9d,eax
 100fa98:	mov    edx,0x1
 100fa9d:	call   0x1007f00
 100faa2:	jmp    0x100fc0c
 100faa7:	lea    r8,[rip+0xffffffffffff6282]        # 0x1005d30
 100faae:	mov    edx,0x2
 100fab3:	call   0x1007f00
 100fab8:	mov    rdx,QWORD PTR [r14+0x698]
 100fabf:	test   rdx,rdx
 100fac2:	je     0x100fb0e
 100fac4:	mov    rcx,QWORD PTR [rsp+0x40]
 100fac9:	mov    r9d,esi
 100facc:	mov    r8d,0x5
 100fad2:	call   0x1011b75
 100fad7:	lea    rcx,[rip+0x7772]        # 0x1017250
 100fade:	mov    ebx,eax
 100fae0:	test   eax,eax
 100fae2:	jns    0x100fafd
 100fae4:	lea    r8,[rip+0xffffffffffff6295]        # 0x1005d80
 100faeb:	mov    r9d,eax
 100faee:	mov    edx,0x1
 100faf3:	call   0x1007f00
 100faf8:	jmp    0x100fc0c
 100fafd:	lea    r8,[rip+0xffffffffffff62ec]        # 0x1005df0
 100fb04:	mov    edx,0x2
 100fb09:	call   0x1007f00
 100fb0e:	mov    rdx,QWORD PTR [r14+0x6f0]
 100fb15:	test   rdx,rdx
 100fb18:	je     0x100fb64
 100fb1a:	mov    rcx,QWORD PTR [rsp+0x40]
 100fb1f:	mov    r9d,esi
 100fb22:	mov    r8d,0x5
 100fb28:	call   0x1011b75
 100fb2d:	lea    rcx,[rip+0x771c]        # 0x1017250
 100fb34:	mov    ebx,eax
 100fb36:	test   eax,eax
 100fb38:	jns    0x100fb53
 100fb3a:	lea    r8,[rip+0xffffffffffff62ff]        # 0x1005e40
 100fb41:	mov    r9d,eax
 100fb44:	mov    edx,0x1
 100fb49:	call   0x1007f00
 100fb4e:	jmp    0x100fc0c
 100fb53:	lea    r8,[rip+0xffffffffffff6356]        # 0x1005eb0
 100fb5a:	mov    edx,0x2
 100fb5f:	call   0x1007f00
 100fb64:	mov    rdx,QWORD PTR [rdi]
 100fb67:	add    rdx,0x1a124
 100fb6e:	cmp    WORD PTR [rdx],r15w
 100fb72:	je     0x100fbbb
 100fb74:	mov    rcx,QWORD PTR [rsp+0x40]
 100fb79:	mov    r9d,esi
 100fb7c:	mov    r8d,0x5
 100fb82:	call   0x1011b75
 100fb87:	lea    rcx,[rip+0x76c2]        # 0x1017250
 100fb8e:	mov    ebx,eax
 100fb90:	test   eax,eax
 100fb92:	jns    0x100fbaa
 100fb94:	lea    r8,[rip+0xffffffffffff6365]        # 0x1005f00
 100fb9b:	mov    r9d,eax
 100fb9e:	mov    edx,0x1
 100fba3:	call   0x1007f00
 100fba8:	jmp    0x100fc0c
 100fbaa:	lea    r8,[rip+0xffffffffffff63bf]        # 0x1005f70
 100fbb1:	mov    edx,0x2
 100fbb6:	call   0x1007f00
 100fbbb:	mov    rcx,QWORD PTR [rsp+0x40]
 100fbc0:	lea    r9,[rsp+0x48]
 100fbc5:	mov    edx,0x2
 100fbca:	mov    r8d,0x400
 100fbd0:	call   0x1011b8d
 100fbd5:	lea    rcx,[rip+0x7674]        # 0x1017250
 100fbdc:	mov    ebx,eax
 100fbde:	test   eax,eax
 100fbe0:	jns    0x100fbf8
 100fbe2:	lea    r8,[rip+0xffffffffffff63e7]        # 0x1005fd0
 100fbe9:	mov    r9d,eax
 100fbec:	mov    edx,0x1
 100fbf1:	call   0x1007f00
 100fbf6:	jmp    0x100fc0c
 100fbf8:	lea    r8,[rip+0xffffffffffff6421]        # 0x1006020
 100fbff:	mov    edx,0x2
 100fc04:	call   0x1007f00
 100fc09:	mov    ebx,r15d
 100fc0c:	mov    rsi,QWORD PTR [rsp+0x930]
 100fc14:	mov    rcx,QWORD PTR [rsp+0x40]
 100fc19:	mov    edi,0x80004005
 100fc1e:	test   rcx,rcx
 100fc21:	je     0x100fc49
 100fc23:	call   0x1011ba5
 100fc28:	mov    edi,eax
 100fc2a:	test   eax,eax
 100fc2c:	jns    0x100fc49
 100fc2e:	lea    r8,[rip+0xffffffffffff643b]        # 0x1006070
 100fc35:	lea    rcx,[rip+0x7614]        # 0x1017250
 100fc3c:	mov    r9d,ebx
 100fc3f:	mov    edx,0x1
 100fc44:	call   0x1007f00
 100fc49:	test   ebx,ebx
 100fc4b:	mov    rbx,QWORD PTR [rsp+0x928]
 100fc53:	js     0x100f764
 100fc59:	test   edi,edi
 100fc5b:	js     0x100f764
 100fc61:	mov    eax,0x1
 100fc66:	jmp    0x100f766
 100fc6b:	int3   
 100fc6c:	int3   
 100fc6d:	int3   
 100fc6e:	int3   
 100fc6f:	int3   
 100fc70:	int3   
 100fc71:	int3   
 100fc72:	int3   
 100fc73:	int3   
 100fc74:	int3   
 100fc75:	int3   
 100fc76:	int3   
 100fc77:	int3   
 100fc78:	int3   
 100fc79:	int3   
 100fc7a:	int3   
 100fc7b:	int3   
 100fc7c:	int3   
 100fc7d:	int3   
 100fc7e:	int3   
 100fc7f:	int3   
 100fc80:	rex push rbx
 100fc82:	push   rsi
 100fc83:	push   rdi
 100fc84:	sub    rsp,0x850
 100fc8b:	mov    rax,QWORD PTR [rip+0x750e]        # 0x10171a0
 100fc92:	xor    rax,rsp
 100fc95:	mov    QWORD PTR [rsp+0x840],rax
 100fc9d:	mov    edi,r8d
 100fca0:	mov    rsi,rdx
 100fca3:	xor    eax,eax
 100fca5:	lea    rcx,[rsp+0x32]
 100fcaa:	xor    edx,edx
 100fcac:	mov    r8d,0x800
 100fcb2:	mov    ebx,r9d
 100fcb5:	mov    WORD PTR [rsp+0x30],ax
 100fcba:	call   0x1011452
 100fcbf:	lea    r8,[rip+0xffffffffffff4c62]        # 0x1004928
 100fcc6:	lea    rcx,[rsp+0x30]
 100fccb:	mov    r9d,ebx
 100fcce:	mov    edx,0x400
 100fcd3:	call   0x1007600
 100fcd8:	mov    ebx,eax
 100fcda:	test   eax,eax
 100fcdc:	jns    0x100fce7
 100fcde:	lea    r8,[rip+0xffffffffffff5a8b]        # 0x1005770
 100fce5:	jmp    0x100fd06
 100fce7:	lea    r9,[rsp+0x30]
 100fcec:	xor    r8d,r8d
 100fcef:	mov    edx,edi
 100fcf1:	mov    rcx,rsi
 100fcf4:	call   0x1011b5d
 100fcf9:	mov    ebx,eax
 100fcfb:	test   eax,eax
 100fcfd:	jns    0x100fd1e
 100fcff:	lea    r8,[rip+0xffffffffffff5ada]        # 0x10057e0
 100fd06:	lea    rcx,[rip+0x7543]        # 0x1017250
 100fd0d:	mov    r9d,edi
 100fd10:	mov    edx,0x1
 100fd15:	mov    DWORD PTR [rsp+0x20],eax
 100fd19:	call   0x1007f00
 100fd1e:	mov    eax,ebx
 100fd20:	mov    rcx,QWORD PTR [rsp+0x840]
 100fd28:	xor    rcx,rsp
 100fd2b:	call   0x1011420
 100fd30:	add    rsp,0x850
 100fd37:	pop    rdi
 100fd38:	pop    rsi
 100fd39:	pop    rbx
 100fd3a:	ret    
 100fd3b:	int3   
 100fd3c:	int3   
 100fd3d:	int3   
 100fd3e:	int3   
 100fd3f:	int3   
 100fd40:	int3   
 100fd41:	int3   
 100fd42:	int3   
 100fd43:	int3   
 100fd44:	int3   
 100fd45:	int3   
 100fd46:	int3   
 100fd47:	int3   
 100fd48:	int3   
 100fd49:	int3   
 100fd4a:	int3   
 100fd4b:	int3   
 100fd4c:	int3   
 100fd4d:	int3   
 100fd4e:	int3   
 100fd4f:	int3   
 100fd50:	rex push rbx
 100fd52:	push   rsi
 100fd53:	push   rdi
 100fd54:	sub    rsp,0x860
 100fd5b:	mov    rax,QWORD PTR [rip+0x743e]        # 0x10171a0
 100fd62:	xor    rax,rsp
 100fd65:	mov    QWORD PTR [rsp+0x850],rax
 100fd6d:	mov    edi,r8d
 100fd70:	mov    rsi,rdx
 100fd73:	xor    eax,eax
 100fd75:	lea    rcx,[rsp+0x42]
 100fd7a:	xor    edx,edx
 100fd7c:	mov    r8d,0x800
 100fd82:	mov    ebx,r9d
 100fd85:	mov    WORD PTR [rsp+0x40],ax
 100fd8a:	call   0x1011452
 100fd8f:	mov    eax,DWORD PTR [rsp+0x8a8]
 100fd96:	mov    r11d,DWORD PTR [rsp+0x8b0]
 100fd9e:	lea    r8,[rip+0xffffffffffff5ab3]        # 0x1005858
 100fda5:	mov    DWORD PTR [rsp+0x30],r11d
 100fdaa:	mov    DWORD PTR [rsp+0x28],eax
 100fdae:	mov    eax,DWORD PTR [rsp+0x8a0]
 100fdb5:	lea    rcx,[rsp+0x40]
 100fdba:	mov    r9d,ebx
 100fdbd:	mov    edx,0x400
 100fdc2:	mov    DWORD PTR [rsp+0x20],eax
 100fdc6:	call   0x1007600
 100fdcb:	mov    ebx,eax
 100fdcd:	test   eax,eax
 100fdcf:	jns    0x100fdda
 100fdd1:	lea    r8,[rip+0xffffffffffff5a98]        # 0x1005870
 100fdd8:	jmp    0x100fdf9
 100fdda:	lea    r9,[rsp+0x40]
 100fddf:	xor    r8d,r8d
 100fde2:	mov    edx,edi
 100fde4:	mov    rcx,rsi
 100fde7:	call   0x1011b5d
 100fdec:	mov    ebx,eax
 100fdee:	test   eax,eax
 100fdf0:	jns    0x100fe11
 100fdf2:	lea    r8,[rip+0xffffffffffff5af7]        # 0x10058f0
 100fdf9:	lea    rcx,[rip+0x7450]        # 0x1017250
 100fe00:	mov    r9d,edi
 100fe03:	mov    edx,0x1
 100fe08:	mov    DWORD PTR [rsp+0x20],eax
 100fe0c:	call   0x1007f00
 100fe11:	mov    eax,ebx
 100fe13:	mov    rcx,QWORD PTR [rsp+0x850]
 100fe1b:	xor    rcx,rsp
 100fe1e:	call   0x1011420
 100fe23:	add    rsp,0x860
 100fe2a:	pop    rdi
 100fe2b:	pop    rsi
 100fe2c:	pop    rbx
 100fe2d:	ret    
 100fe2e:	int3   
 100fe2f:	int3   
 100fe30:	int3   
 100fe31:	int3   
 100fe32:	int3   
 100fe33:	int3   
 100fe34:	int3   
 100fe35:	int3   
 100fe36:	int3   
 100fe37:	int3   
 100fe38:	int3   
 100fe39:	int3   
 100fe3a:	int3   
 100fe3b:	int3   
 100fe3c:	int3   
 100fe3d:	int3   
 100fe3e:	int3   
 100fe3f:	int3   
 100fe40:	rex push rbx
 100fe42:	push   rsi
 100fe43:	push   rdi
 100fe44:	sub    rsp,0x850
 100fe4b:	mov    rax,QWORD PTR [rip+0x734e]        # 0x10171a0
 100fe52:	xor    rax,rsp
 100fe55:	mov    QWORD PTR [rsp+0x840],rax
 100fe5d:	mov    edi,r8d
 100fe60:	mov    rsi,rdx
 100fe63:	xor    eax,eax
 100fe65:	lea    rcx,[rsp+0x32]
 100fe6a:	xor    edx,edx
 100fe6c:	mov    r8d,0x800
 100fe72:	mov    rbx,r9
 100fe75:	mov    WORD PTR [rsp+0x30],ax
 100fe7a:	call   0x1011452
 100fe7f:	lea    r8,[rip+0xffffffffffff3582]        # 0x1003408
 100fe86:	lea    rcx,[rsp+0x30]
 100fe8b:	mov    r9,rbx
 100fe8e:	mov    edx,0x400
 100fe93:	call   0x1007600
 100fe98:	mov    ebx,eax
 100fe9a:	test   eax,eax
 100fe9c:	jns    0x100fea7
 100fe9e:	lea    r8,[rip+0xffffffffffff5acb]        # 0x1005970
 100fea5:	jmp    0x100fec6
 100fea7:	lea    r9,[rsp+0x30]
 100feac:	xor    r8d,r8d
 100feaf:	mov    edx,edi
 100feb1:	mov    rcx,rsi
 100feb4:	call   0x1011b5d
 100feb9:	mov    ebx,eax
 100febb:	test   eax,eax
 100febd:	jns    0x100fede
 100febf:	lea    r8,[rip+0xffffffffffff5b2a]        # 0x10059f0
 100fec6:	lea    rcx,[rip+0x7383]        # 0x1017250
 100fecd:	mov    r9d,edi
 100fed0:	mov    edx,0x1
 100fed5:	mov    DWORD PTR [rsp+0x20],eax
 100fed9:	call   0x1007f00
 100fede:	mov    eax,ebx
 100fee0:	mov    rcx,QWORD PTR [rsp+0x840]
 100fee8:	xor    rcx,rsp
 100feeb:	call   0x1011420
 100fef0:	add    rsp,0x850
 100fef7:	pop    rdi
 100fef8:	pop    rsi
 100fef9:	pop    rbx
 100fefa:	ret    
 100fefb:	int3   
 100fefc:	int3   
 100fefd:	int3   
 100fefe:	int3   
 100feff:	int3   
 100ff00:	int3   
 100ff01:	int3   
 100ff02:	int3   
 100ff03:	int3   
 100ff04:	int3   
 100ff05:	int3   
 100ff06:	int3   
 100ff07:	int3   
 100ff08:	int3   
 100ff09:	int3   
 100ff0a:	int3   
 100ff0b:	int3   
 100ff0c:	int3   
 100ff0d:	int3   
 100ff0e:	int3   
 100ff0f:	int3   
 100ff10:	sub    rsp,0x58
 100ff14:	mov    rax,QWORD PTR [rip+0x7285]        # 0x10171a0
 100ff1b:	xor    rax,rsp
 100ff1e:	mov    QWORD PTR [rsp+0x48],rax
 100ff23:	call   QWORD PTR [rip+0xffffffffffff1337]        # 0x1001260
 100ff29:	lea    r8,[rsp+0x30]
 100ff2e:	mov    edx,0x28
 100ff33:	mov    rcx,rax
 100ff36:	call   QWORD PTR [rip+0xffffffffffff10c4]        # 0x1001000
 100ff3c:	test   eax,eax
 100ff3e:	je     0x100ffd9
 100ff44:	lea    r8,[rsp+0x3c]
 100ff49:	lea    rdx,[rip+0xffffffffffff19c8]        # 0x1001918
 100ff50:	xor    ecx,ecx
 100ff52:	call   QWORD PTR [rip+0xffffffffffff10b8]        # 0x1001010
 100ff58:	test   eax,eax
 100ff5a:	je     0x100ffbc
 100ff5c:	mov    rcx,QWORD PTR [rsp+0x30]
 100ff61:	xor    eax,eax
 100ff63:	lea    r8,[rsp+0x38]
 100ff68:	mov    QWORD PTR [rsp+0x28],rax
 100ff6d:	xor    r9d,r9d
 100ff70:	xor    edx,edx
 100ff72:	mov    DWORD PTR [rsp+0x38],0x1
 100ff7a:	mov    DWORD PTR [rsp+0x44],0x2
 100ff82:	mov    QWORD PTR [rsp+0x20],rax
 100ff87:	call   QWORD PTR [rip+0xffffffffffff107b]        # 0x1001008
 100ff8d:	test   eax,eax
 100ff8f:	je     0x100ff9b
 100ff91:	call   QWORD PTR [rip+0xffffffffffff1289]        # 0x1001220
 100ff97:	test   eax,eax
 100ff99:	je     0x100ffbc
 100ff9b:	call   QWORD PTR [rip+0xffffffffffff127f]        # 0x1001220
 100ffa1:	lea    r8,[rip+0xffffffffffff1998]        # 0x1001940
 100ffa8:	lea    rcx,[rip+0x72a1]        # 0x1017250
 100ffaf:	mov    r9d,eax
 100ffb2:	mov    edx,0x2
 100ffb7:	call   0x1007f00
 100ffbc:	mov    rcx,QWORD PTR [rsp+0x30]
 100ffc1:	call   QWORD PTR [rip+0xffffffffffff1111]        # 0x10010d8
 100ffc7:	mov    rcx,QWORD PTR [rsp+0x48]
 100ffcc:	xor    rcx,rsp
 100ffcf:	call   0x1011420
 100ffd4:	add    rsp,0x58
 100ffd8:	ret    
 100ffd9:	call   QWORD PTR [rip+0xffffffffffff1241]        # 0x1001220
 100ffdf:	lea    r8,[rip+0xffffffffffff19ca]        # 0x10019b0
 100ffe6:	lea    rcx,[rip+0x7263]        # 0x1017250
 100ffed:	mov    r9d,eax
 100fff0:	mov    edx,0x1
 100fff5:	call   0x1007f00
 100fffa:	mov    rcx,QWORD PTR [rsp+0x48]
 100ffff:	xor    rcx,rsp
 1010002:	call   0x1011420
 1010007:	add    rsp,0x58
 101000b:	ret    
 101000c:	int3   
 101000d:	int3   
 101000e:	int3   
 101000f:	int3   
 1010010:	int3   
 1010011:	int3   
 1010012:	int3   
 1010013:	int3   
 1010014:	int3   
 1010015:	int3   
 1010016:	int3   
 1010017:	int3   
 1010018:	int3   
 1010019:	int3   
 101001a:	int3   
 101001b:	int3   
 101001c:	int3   
 101001d:	int3   
 101001e:	int3   
 101001f:	int3   
 1010020:	mov    QWORD PTR [rsp+0x18],rbx
 1010025:	mov    QWORD PTR [rsp+0x20],rsi
 101002a:	push   rbp
 101002b:	push   rdi
 101002c:	push   r14
 101002e:	lea    rbp,[rsp-0xbe0]
 1010036:	sub    rsp,0xce0
 101003d:	mov    rax,QWORD PTR [rip+0x715c]        # 0x10171a0
 1010044:	xor    rax,rsp
 1010047:	mov    QWORD PTR [rbp+0xbd0],rax
 101004e:	mov    rsi,rcx
 1010051:	mov    ebx,r8d
 1010054:	mov    rdi,rdx
 1010057:	lea    rcx,[rbp-0x4e]
 101005b:	xor    r14d,r14d
 101005e:	xor    edx,edx
 1010060:	mov    r8d,0x208
 1010066:	mov    WORD PTR [rbp-0x50],r14w
 101006b:	call   0x1011452
 1010070:	mov    QWORD PTR [rsp+0x48],r14
 1010075:	bt     ebx,0x11
 1010079:	jae    0x1010082
 101007b:	xor    eax,eax
 101007d:	jmp    0x1010343
 1010082:	test   rsi,rsi
 1010085:	je     0x1010227
 101008b:	test   rdi,rdi
 101008e:	je     0x1010227
 1010094:	lea    rdx,[rip+0xffffffffffff195d]        # 0x10019f8
 101009b:	mov    ebx,0x104
 10100a0:	mov    rcx,rdi
 10100a3:	mov    DWORD PTR [rsp+0x40],ebx
 10100a7:	call   QWORD PTR [rip+0xffffffffffff1393]        # 0x1001440
 10100ad:	mov    edx,ebx
 10100af:	test   eax,eax
 10100b1:	lea    rax,[rbp+0x1c0]
 10100b8:	lea    rcx,[rbp+0x1c0]
 10100bf:	jne    0x10100f4
 10100c1:	lea    r8,[rip+0xffffffffffff1958]        # 0x1001a20
 10100c8:	sub    r8,rax
 10100cb:	nop    DWORD PTR [rax+rax*1+0x0]
 10100d0:	lea    rax,[rdx+0x7ffffefa]
 10100d7:	test   rax,rax
 10100da:	je     0x1010123
 10100dc:	movzx  eax,WORD PTR [r8+rcx*1]
 10100e1:	test   ax,ax
 10100e4:	je     0x1010123
 10100e6:	mov    WORD PTR [rcx],ax
 10100e9:	add    rcx,0x2
 10100ed:	dec    rdx
 10100f0:	jne    0x10100d0
 10100f2:	jmp    0x1010128
 10100f4:	sub    rdi,rax
 10100f7:	nop    WORD PTR [rax+rax*1+0x0]
 1010100:	lea    rax,[rdx+0x7ffffefa]
 1010107:	test   rax,rax
 101010a:	je     0x1010123
 101010c:	movzx  eax,WORD PTR [rdi+rcx*1]
 1010110:	test   ax,ax
 1010113:	je     0x1010123
 1010115:	mov    WORD PTR [rcx],ax
 1010118:	add    rcx,0x2
 101011c:	dec    rdx
 101011f:	jne    0x1010100
 1010121:	jmp    0x1010128
 1010123:	test   rdx,rdx
 1010126:	jne    0x101012c
 1010128:	sub    rcx,0x2
 101012c:	mov    WORD PTR [rcx],r14w
 1010130:	lea    rdx,[rsp+0x44]
 1010135:	lea    rcx,[rbp+0x1c0]
 101013c:	call   0x1011a54
 1010141:	test   eax,eax
 1010143:	je     0x1010326
 1010149:	mov    edx,DWORD PTR [rsp+0x44]
 101014d:	lea    r8,[rsp+0x50]
 1010152:	mov    rcx,rsi
 1010155:	call   0x1011a0c
 101015a:	test   eax,eax
 101015c:	je     0x1010326
 1010162:	lea    r8,[rsp+0x40]
 1010167:	lea    rdx,[rbp-0x50]
 101016b:	lea    rcx,[rsp+0x50]
 1010170:	call   0x1011a3c
 1010175:	test   eax,eax
 1010177:	je     0x1010326
 101017d:	mov    rcx,rbx
 1010180:	lea    rax,[rbp-0x50]
 1010184:	mov    r8d,r14d
 1010187:	cmp    WORD PTR [rax],r8w
 101018b:	je     0x10101a1
 101018d:	add    rax,0x2
 1010191:	dec    rcx
 1010194:	jne    0x1010187
 1010196:	mov    r8d,0x80070057
 101019c:	mov    rdx,r14
 101019f:	jmp    0x10101b7
 10101a1:	test   rcx,rcx
 10101a4:	jne    0x10101b1
 10101a6:	mov    r8d,0x80070057
 10101ac:	mov    rdx,r14
 10101af:	jmp    0x10101b7
 10101b1:	mov    rdx,rbx
 10101b4:	sub    rdx,rcx
 10101b7:	test   r8d,r8d
 10101ba:	js     0x101027a
 10101c0:	lea    rax,[rbp-0x50]
 10101c4:	mov    r8d,r14d
 10101c7:	lea    rax,[rax+rdx*2]
 10101cb:	sub    rbx,rdx
 10101ce:	je     0x1010217
 10101d0:	lea    rcx,[rdx+0x7ffffefb]
 10101d7:	lea    r9,[rip+0xffffffffffff1862]        # 0x1001a40
 10101de:	add    rcx,rbx
 10101e1:	sub    r9,rax
 10101e4:	test   rcx,rcx
 10101e7:	je     0x1010212
 10101e9:	movzx  edx,WORD PTR [r9+rax*1]
 10101ee:	test   dx,dx
 10101f1:	je     0x1010212
 10101f3:	mov    WORD PTR [rax],dx
 10101f6:	add    rax,0x2
 10101fa:	dec    rcx
 10101fd:	dec    rbx
 1010200:	jne    0x10101e4
 1010202:	sub    rax,0x2
 1010206:	mov    r8d,0x8007007a
 101020c:	mov    WORD PTR [rax],r14w
 1010210:	jmp    0x1010277
 1010212:	test   rbx,rbx
 1010215:	jne    0x1010221
 1010217:	sub    rax,0x2
 101021b:	mov    r8d,0x8007007a
 1010221:	mov    WORD PTR [rax],r14w
 1010225:	jmp    0x1010277
 1010227:	mov    rdx,QWORD PTR [rip+0x6f5a]        # 0x1017188
 101022e:	lea    rax,[rbp-0x50]
 1010232:	mov    ebx,0x104
 1010237:	lea    rcx,[rbp-0x50]
 101023b:	mov    r8d,r14d
 101023e:	sub    rdx,rax
 1010241:	lea    rax,[rbx+0x7ffffefa]
 1010248:	test   rax,rax
 101024b:	je     0x1010264
 101024d:	movzx  eax,WORD PTR [rdx+rcx*1]
 1010251:	test   ax,ax
 1010254:	je     0x1010264
 1010256:	mov    WORD PTR [rcx],ax
 1010259:	add    rcx,0x2
 101025d:	dec    rbx
 1010260:	jne    0x1010241
 1010262:	jmp    0x1010269
 1010264:	test   rbx,rbx
 1010267:	jne    0x1010273
 1010269:	sub    rcx,0x2
 101026d:	mov    r8d,0x8007007a
 1010273:	mov    WORD PTR [rcx],r14w
 1010277:	test   r8d,r8d
 101027a:	jne    0x1010326
 1010280:	lea    rax,[rsp+0x48]
 1010285:	lea    rdx,[rbp-0x50]
 1010289:	mov    r9d,0x1
 101028f:	xor    r8d,r8d
 1010292:	mov    rcx,0xffffffff80000002
 1010299:	mov    QWORD PTR [rsp+0x20],rax
 101029e:	call   QWORD PTR [rip+0xffffffffffff0d7c]        # 0x1001020
 10102a4:	mov    ebx,eax
 10102a6:	test   eax,eax
 10102a8:	je     0x101033e
 10102ae:	lea    rax,[rbp+0x3d0]
 10102b5:	mov    QWORD PTR [rsp+0x30],r14
 10102ba:	mov    r9d,0x400
 10102c0:	mov    r8d,ebx
 10102c3:	xor    edx,edx
 10102c5:	mov    ecx,0x1000
 10102ca:	mov    DWORD PTR [rsp+0x28],0x400
 10102d2:	mov    QWORD PTR [rsp+0x48],r14
 10102d7:	mov    QWORD PTR [rsp+0x20],rax
 10102dc:	call   QWORD PTR [rip+0xffffffffffff0e06]        # 0x10010e8
 10102e2:	lea    r9,[rbp-0x50]
 10102e6:	mov    edx,0x1
 10102eb:	lea    rcx,[rip+0x6f5e]        # 0x1017250
 10102f2:	test   eax,eax
 10102f4:	je     0x1010314
 10102f6:	lea    rax,[rbp+0x3d0]
 10102fd:	lea    r8,[rip+0xffffffffffff174c]        # 0x1001a50
 1010304:	mov    QWORD PTR [rsp+0x28],rax
 1010309:	mov    DWORD PTR [rsp+0x20],ebx
 101030d:	call   0x1007f00
 1010312:	jmp    0x101033e
 1010314:	lea    r8,[rip+0xffffffffffff17b5]        # 0x1001ad0
 101031b:	mov    DWORD PTR [rsp+0x20],ebx
 101031f:	call   0x1007f00
 1010324:	jmp    0x101033e
 1010326:	lea    r8,[rip+0xffffffffffff1813]        # 0x1001b40
 101032d:	lea    rcx,[rip+0x6f1c]        # 0x1017250
 1010334:	mov    edx,0x1
 1010339:	call   0x1007f00
 101033e:	mov    rax,QWORD PTR [rsp+0x48]
 1010343:	mov    rcx,QWORD PTR [rbp+0xbd0]
 101034a:	xor    rcx,rsp
 101034d:	call   0x1011420
 1010352:	lea    r11,[rsp+0xce0]
 101035a:	mov    rbx,QWORD PTR [r11+0x30]
 101035e:	mov    rsi,QWORD PTR [r11+0x38]
 1010362:	mov    rsp,r11
 1010365:	pop    r14
 1010367:	pop    rdi
 1010368:	pop    rbp
 1010369:	ret    
 101036a:	int3   
 101036b:	int3   
 101036c:	int3   
 101036d:	int3   
 101036e:	int3   
 101036f:	int3   
 1010370:	mov    QWORD PTR [rsp+0x8],rbx
 1010375:	mov    QWORD PTR [rsp+0x10],rbp
 101037a:	mov    QWORD PTR [rsp+0x18],rsi
 101037f:	push   rdi
 1010380:	sub    rsp,0x8d0
 1010387:	lea    rbp,[rip+0xb312]        # 0x101b6a0
 101038e:	mov    esi,r8d
 1010391:	mov    rbx,rdx
 1010394:	mov    QWORD PTR [rsp+0x20],rbp
 1010399:	mov    edi,ecx
 101039b:	call   0x100ff10
 10103a0:	call   0x1011bc0
 10103a5:	lea    rcx,[rip+0xb304]        # 0x101b6b0
 10103ac:	call   QWORD PTR [rip+0xffffffffffff0d2e]        # 0x10010e0
 10103b2:	mov    r8,rbx
 10103b5:	mov    edx,edi
 10103b7:	mov    rcx,rbp
 10103ba:	call   0x100a190
 10103bf:	test   eax,eax
 10103c1:	je     0x10103fb
 10103c3:	mov    rcx,rbp
 10103c6:	call   0x100ae30
 10103cb:	test   eax,eax
 10103cd:	je     0x10103fb
 10103cf:	mov    edx,esi
 10103d1:	mov    rcx,rbp
 10103d4:	call   0x100a060
 10103d9:	test   eax,eax
 10103db:	jne    0x10103fb
 10103dd:	mov    rcx,rbp
 10103e0:	call   0x100aa00
 10103e5:	mov    ecx,DWORD PTR [rip+0xb2b5]        # 0x101b6a0
 10103eb:	mov    edx,0x3
 10103f0:	test   eax,eax
 10103f2:	cmovne ecx,edx
 10103f5:	mov    DWORD PTR [rip+0xb2a5],ecx        # 0x101b6a0
 10103fb:	mov    rcx,rbp
 10103fe:	call   0x1009d60
 1010403:	mov    rcx,rbp
 1010406:	call   0x1008f20
 101040b:	mov    rcx,rbp
 101040e:	call   0x1009010
 1010413:	mov    rcx,QWORD PTR [rip+0xb8e6]        # 0x101bd00
 101041a:	cmp    rcx,0xffffffffffffffff
 101041e:	je     0x1010447
 1010420:	call   QWORD PTR [rip+0xffffffffffff0cb2]        # 0x10010d8
 1010426:	cmp    DWORD PTR [rip+0xb273],0x5        # 0x101b6a0
 101042d:	mov    QWORD PTR [rip+0xb8c8],0xffffffffffffffff        # 0x101bd00
 1010438:	jae    0x1010447
 101043a:	lea    rcx,[rip+0xb4a9]        # 0x101b8ea
 1010441:	call   QWORD PTR [rip+0xffffffffffff0ce9]        # 0x1001130
 1010447:	mov    rcx,rbp
 101044a:	call   0x1009200
 101044f:	mov    edx,0x2
 1010454:	lea    rcx,[rip+0x6df5]        # 0x1017250
 101045b:	test   eax,eax
 101045d:	je     0x1010477
 101045f:	lea    r8,[rip+0xffffffffffff1742]        # 0x1001ba8
 1010466:	call   0x1007f00
 101046b:	lea    rcx,[rsp+0x20]
 1010470:	call   0x100f690
 1010475:	jmp    0x1010483
 1010477:	lea    r8,[rip+0xffffffffffff1752]        # 0x1001bd0
 101047e:	call   0x1007f00
 1010483:	mov    rcx,QWORD PTR [rip+0xb21e]        # 0x101b6a8
 101048a:	cmp    rcx,0xffffffffffffffff
 101048e:	je     0x10104a1
 1010490:	call   QWORD PTR [rip+0xffffffffffff0c42]        # 0x10010d8
 1010496:	mov    QWORD PTR [rip+0xb207],0xffffffffffffffff        # 0x101b6a8
 10104a1:	mov    rcx,QWORD PTR [rip+0xb858]        # 0x101bd00
 10104a8:	cmp    rcx,0xffffffffffffffff
 10104ac:	je     0x10104d5
 10104ae:	call   QWORD PTR [rip+0xffffffffffff0c24]        # 0x10010d8
 10104b4:	cmp    DWORD PTR [rip+0xb1e5],0x5        # 0x101b6a0
 10104bb:	mov    QWORD PTR [rip+0xb83a],0xffffffffffffffff        # 0x101bd00
 10104c6:	jae    0x10104d5
 10104c8:	lea    rcx,[rip+0xb41b]        # 0x101b8ea
 10104cf:	call   QWORD PTR [rip+0xffffffffffff0c5b]        # 0x1001130
 10104d5:	test   DWORD PTR [rip+0xb829],0x2000        # 0x101bd08
 10104df:	mov    DWORD PTR [rip+0xb1b7],0x6        # 0x101b6a0
 10104e9:	je     0x101054f
 10104eb:	mov    rcx,rbp
 10104ee:	call   0x10096f0
 10104f3:	mov    rcx,QWORD PTR [rip+0xb1ae]        # 0x101b6a8
 10104fa:	cmp    rcx,0xffffffffffffffff
 10104fe:	je     0x1010511
 1010500:	call   QWORD PTR [rip+0xffffffffffff0bd2]        # 0x10010d8
 1010506:	mov    QWORD PTR [rip+0xb197],0xffffffffffffffff        # 0x101b6a8
 1010511:	mov    rcx,QWORD PTR [rip+0xb7e8]        # 0x101bd00
 1010518:	cmp    rcx,0xffffffffffffffff
 101051c:	je     0x1010545
 101051e:	call   QWORD PTR [rip+0xffffffffffff0bb4]        # 0x10010d8
 1010524:	cmp    DWORD PTR [rip+0xb175],0x5        # 0x101b6a0
 101052b:	mov    QWORD PTR [rip+0xb7ca],0xffffffffffffffff        # 0x101bd00
 1010536:	jae    0x1010545
 1010538:	lea    rcx,[rip+0xb3ab]        # 0x101b8ea
 101053f:	call   QWORD PTR [rip+0xffffffffffff0beb]        # 0x1001130
 1010545:	mov    DWORD PTR [rip+0xb151],0x6        # 0x101b6a0
 101054f:	mov    rax,QWORD PTR [rip+0x2d6d2]        # 0x103dc28
 1010556:	test   rax,rax
 1010559:	je     0x10105ac
 101055b:	nop    DWORD PTR [rax+rax*1+0x0]
 1010560:	mov    edx,0xea60
 1010565:	mov    rcx,rax
 1010568:	call   QWORD PTR [rip+0xffffffffffff0b2a]        # 0x1001098
 101056e:	test   eax,eax
 1010570:	je     0x101059f
 1010572:	mov    r9d,DWORD PTR [rip+0x2d6ab]        # 0x103dc24
 1010579:	lea    r8,[rip+0xffffffffffff4870]        # 0x1004df0
 1010580:	lea    rcx,[rip+0x6cc9]        # 0x1017250
 1010587:	mov    edx,0x2
 101058c:	call   0x1007f00
 1010591:	mov    rax,QWORD PTR [rip+0x2d690]        # 0x103dc28
 1010598:	test   rax,rax
 101059b:	jne    0x1010560
 101059d:	jmp    0x10105ac
 101059f:	mov    rcx,QWORD PTR [rip+0x2d682]        # 0x103dc28
 10105a6:	call   QWORD PTR [rip+0xffffffffffff0b2c]        # 0x10010d8
 10105ac:	mov    rcx,QWORD PTR [rip+0x2d69d]        # 0x103dc50
 10105b3:	test   rcx,rcx
 10105b6:	je     0x1010610
 10105b8:	call   QWORD PTR [rip+0xffffffffffff0ad2]        # 0x1001090
 10105be:	test   eax,eax
 10105c0:	jne    0x10105d3
 10105c2:	lea    rdx,[rip+0xffffffffffff4f67]        # 0x1005530
 10105c9:	mov    rcx,rbp
 10105cc:	call   0x100ef00
 10105d1:	jmp    0x1010610
 10105d3:	mov    rcx,QWORD PTR [rip+0x2d67e]        # 0x103dc58
 10105da:	or     edx,0xffffffff
 10105dd:	call   QWORD PTR [rip+0xffffffffffff0ab5]        # 0x1001098
 10105e3:	test   eax,eax
 10105e5:	je     0x10105f6
 10105e7:	lea    rdx,[rip+0xffffffffffff4f92]        # 0x1005580
 10105ee:	mov    rcx,rbp
 10105f1:	call   0x100ef00
 10105f6:	mov    rcx,QWORD PTR [rip+0x2d65b]        # 0x103dc58
 10105fd:	call   QWORD PTR [rip+0xffffffffffff0ad5]        # 0x10010d8
 1010603:	mov    rcx,QWORD PTR [rip+0x2d646]        # 0x103dc50
 101060a:	call   QWORD PTR [rip+0xffffffffffff0ac8]        # 0x10010d8
 1010610:	test   DWORD PTR [rip+0xb6ee],0x200        # 0x101bd08
 101061a:	je     0x1010629
 101061c:	xor    edx,edx
 101061e:	mov    ecx,0x3a98
 1010623:	call   QWORD PTR [rip+0xffffffffffff0ac7]        # 0x10010f0
 1010629:	mov    ecx,DWORD PTR [rip+0x6ad1]        # 0x1017100
 101062f:	call   QWORD PTR [rip+0xffffffffffff0c1b]        # 0x1001250
 1010635:	int3   
 1010636:	int3   
 1010637:	int3   
 1010638:	int3   
 1010639:	int3   
 101063a:	int3   
 101063b:	int3   
 101063c:	int3   
 101063d:	int3   
 101063e:	int3   
 101063f:	int3   
 1010640:	sub    rsp,0x48
 1010644:	mov    QWORD PTR [rsp+0x30],0x0
 101064d:	call   0x1010370
 1010652:	nop
 1010653:	mov    rax,QWORD PTR [rsp+0x30]
 1010658:	test   rax,rax
 101065b:	je     0x101068b
 101065d:	mov    rax,QWORD PTR [rax]
 1010660:	mov    r9d,DWORD PTR [rax]
 1010663:	mov    DWORD PTR [rip+0x6a96],r9d        # 0x1017100
 101066a:	mov    rax,QWORD PTR [rax+0x10]
 101066e:	mov    QWORD PTR [rsp+0x20],rax
 1010673:	lea    r8,[rip+0xffffffffffff157e]        # 0x1001bf8
 101067a:	mov    edx,0x1
 101067f:	lea    rcx,[rip+0x6bca]        # 0x1017250
 1010686:	call   0x1007f00
 101068b:	lea    rcx,[rip+0xb00e]        # 0x101b6a0
 1010692:	call   0x1009cd0
 1010697:	nop
 1010698:	mov    eax,DWORD PTR [rip+0x6a62]        # 0x1017100
 101069e:	add    rsp,0x48
 10106a2:	ret    
 10106a3:	int3   
 10106a4:	int3   
 10106a5:	int3   
 10106a6:	int3   
 10106a7:	int3   
 10106a8:	int3   
 10106a9:	int3   
 10106aa:	int3   
 10106ab:	int3   
 10106ac:	int3   
 10106ad:	int3   
 10106ae:	int3   
 10106af:	int3   
 10106b0:	mov    r8d,0x1
 10106b6:	jmp    0x1010640
 10106bb:	int3   
 10106bc:	int3   
 10106bd:	int3   
 10106be:	int3   
 10106bf:	int3   
 10106c0:	int3   
 10106c1:	int3   
 10106c2:	int3   
 10106c3:	int3   
 10106c4:	int3   
 10106c5:	int3   
 10106c6:	int3   
 10106c7:	int3   
 10106c8:	int3   
 10106c9:	int3   
 10106ca:	int3   
 10106cb:	int3   
 10106cc:	int3   
 10106cd:	int3   
 10106ce:	int3   
 10106cf:	int3   
 10106d0:	mov    QWORD PTR [rsp+0x8],rbx
 10106d5:	push   rdi
 10106d6:	sub    rsp,0x40
 10106da:	mov    ebx,ecx
 10106dc:	lea    rcx,[rip+0xffffffffffff154d]        # 0x1001c30
 10106e3:	mov    rdi,rdx
 10106e6:	call   QWORD PTR [rip+0xffffffffffff0a24]        # 0x1001110
 10106ec:	lea    rdx,[rip+0xffffffffffff1525]        # 0x1001c18
 10106f3:	mov    rcx,rax
 10106f6:	call   QWORD PTR [rip+0xffffffffffff0b9c]        # 0x1001298
 10106fc:	test   rax,rax
 10106ff:	je     0x101070f
 1010701:	xor    r9d,r9d
 1010704:	xor    r8d,r8d
 1010707:	xor    ecx,ecx
 1010709:	lea    edx,[r9+0x1]
 101070d:	call   rax
 101070f:	cmp    ebx,0x1
 1010712:	jne    0x1010750
 1010714:	lea    rax,[rip+0xffffffffffff0fe5]        # 0x1001700
 101071b:	lea    rcx,[rsp+0x20]
 1010720:	mov    QWORD PTR [rsp+0x20],rax
 1010725:	lea    rax,[rip+0xffffffffffffff84]        # 0x10106b0
 101072c:	mov    QWORD PTR [rsp+0x28],rax
 1010731:	xor    eax,eax
 1010733:	mov    QWORD PTR [rsp+0x30],rax
 1010738:	mov    QWORD PTR [rsp+0x38],rax
 101073d:	call   QWORD PTR [rip+0xffffffffffff091d]        # 0x1001060
 1010743:	test   eax,eax
 1010745:	je     0x1010750
 1010747:	or     ecx,0xffffffff
 101074a:	call   QWORD PTR [rip+0xffffffffffff0950]        # 0x10010a0
 1010750:	xor    r8d,r8d
 1010753:	mov    rdx,rdi
 1010756:	mov    ecx,ebx
 1010758:	mov    rbx,QWORD PTR [rsp+0x50]
 101075d:	add    rsp,0x40
 1010761:	pop    rdi
 1010762:	jmp    0x1010640
 1010767:	int3   
 1010768:	int3   
 1010769:	int3   
 101076a:	int3   
 101076b:	int3   
 101076c:	int3   
 101076d:	int3   
 101076e:	int3   
 101076f:	int3   
 1010770:	mov    QWORD PTR [rsp+0x10],rbx
 1010775:	mov    QWORD PTR [rsp+0x18],rbp
 101077a:	push   rdi
 101077b:	push   r12
 101077d:	push   r13
 101077f:	push   r14
 1010781:	push   r15
 1010783:	sub    rsp,0x50
 1010787:	mov    r14,rdx
 101078a:	mov    edx,DWORD PTR [rdx+0xc]
 101078d:	mov    r13,rcx
 1010790:	shl    rdx,0x4
 1010794:	xor    edi,edi
 1010796:	lea    rcx,[r14+0xc]
 101079a:	add    rdx,0xc
 101079e:	mov    r12,r8
 10107a1:	mov    r15d,edi
 10107a4:	mov    ebp,edi
 10107a6:	call   0x10118c0
 10107ab:	mov    ecx,DWORD PTR [r14+0x8]
 10107af:	cmp    eax,ecx
 10107b1:	je     0x10107e6
 10107b3:	or     DWORD PTR [rip+0x6943],0x20000400        # 0x1017100
 10107bd:	mov    DWORD PTR [rsp+0x20],ecx
 10107c1:	lea    r8,[rip+0xffffffffffff6238]        # 0x1006a00
 10107c8:	lea    rcx,[rip+0x6a81]        # 0x1017250
 10107cf:	lea    edx,[rdi+0x1]
 10107d2:	mov    r9d,eax
 10107d5:	mov    DWORD PTR [r14+0xc],edi
 10107d9:	mov    QWORD PTR [r14],rdi
 10107dc:	call   0x1007f00
 10107e1:	jmp    0x1010966
 10107e6:	mov    QWORD PTR [rsp+0x80],rsi
 10107ee:	mov    rsi,QWORD PTR [r14]
 10107f1:	mov    QWORD PTR [r14],rdi
 10107f4:	test   rsi,rsi
 10107f7:	je     0x101095e
 10107fd:	nop    DWORD PTR [rax]
 1010800:	mov    rax,rbp
 1010803:	inc    rbp
 1010806:	mov    QWORD PTR [rsp+0x30],rdi
 101080b:	mov    QWORD PTR [rsp+0x38],0x0
 1010814:	mov    QWORD PTR [rsp+0x40],0x0
 101081d:	cmp    rax,0x400
 1010823:	jae    0x1010939
 1010829:	lea    r8,[rsp+0x30]
 101082e:	mov    r9d,0x18
 1010834:	mov    rdx,rsi
 1010837:	mov    rcx,r13
 101083a:	call   0x100bbd0
 101083f:	test   eax,eax
 1010841:	je     0x101092b
 1010847:	mov    eax,DWORD PTR [rsp+0x3c]
 101084b:	mov    edi,eax
 101084d:	cmp    rax,r12
 1010850:	ja     0x10108fb
 1010856:	shl    rdi,0x4
 101085a:	add    rdi,0x18
 101085e:	mov    rcx,rdi
 1010861:	call   0x1011184
 1010866:	mov    r9,rdi
 1010869:	mov    rbx,rax
 101086c:	test   rax,rax
 101086f:	je     0x10108e1
 1010871:	mov    r8,rax
 1010874:	mov    rdx,rsi
 1010877:	mov    rcx,r13
 101087a:	call   0x100bbd0
 101087f:	test   eax,eax
 1010881:	je     0x10108d7
 1010883:	mov    edx,DWORD PTR [rbx+0xc]
 1010886:	lea    rcx,[rbx+0xc]
 101088a:	shl    rdx,0x4
 101088e:	add    rdx,0xc
 1010892:	call   0x10118c0
 1010897:	mov    ecx,DWORD PTR [rbx+0x8]
 101089a:	cmp    eax,ecx
 101089c:	jne    0x10108ae
 101089e:	mov    QWORD PTR [r14],rbx
 10108a1:	mov    r15,QWORD PTR [rbx]
 10108a4:	xor    edi,edi
 10108a6:	mov    QWORD PTR [rbx],rdi
 10108a9:	mov    r14,rbx
 10108ac:	jmp    0x101092b
 10108ae:	or     DWORD PTR [rip+0x6848],0x20000400        # 0x1017100
 10108b8:	mov    DWORD PTR [rsp+0x20],ecx
 10108bc:	lea    r8,[rip+0xffffffffffff627d]        # 0x1006b40
 10108c3:	lea    rcx,[rip+0x6986]        # 0x1017250
 10108ca:	mov    r9d,eax
 10108cd:	mov    edx,0x1
 10108d2:	call   0x1007f00
 10108d7:	mov    rcx,rbx
 10108da:	call   0x1011190
 10108df:	jmp    0x1010929
 10108e1:	lea    r8,[rip+0xffffffffffff5d78]        # 0x1006660
 10108e8:	lea    rcx,[rip+0x6961]        # 0x1017250
 10108ef:	mov    edx,0x1
 10108f4:	call   0x1007f00
 10108f9:	jmp    0x1010929
 10108fb:	or     DWORD PTR [rip+0x67fb],0x20000800        # 0x1017100
 1010905:	lea    r8,[rip+0xffffffffffff62d4]        # 0x1006be0
 101090c:	lea    rcx,[rip+0x693d]        # 0x1017250
 1010913:	mov    r9,rsi
 1010916:	mov    edx,0x1
 101091b:	mov    QWORD PTR [rsp+0x28],r12
 1010920:	mov    DWORD PTR [rsp+0x20],eax
 1010924:	call   0x1007f00
 1010929:	xor    edi,edi
 101092b:	mov    rsi,r15
 101092e:	test   r15,r15
 1010931:	jne    0x1010800
 1010937:	jmp    0x101095e
 1010939:	or     DWORD PTR [rip+0x67bd],0x20000800        # 0x1017100
 1010943:	lea    r8,[rip+0xffffffffffff6146]        # 0x1006a90
 101094a:	lea    rcx,[rip+0x68ff]        # 0x1017250
 1010951:	mov    r9,rbp
 1010954:	mov    edx,0x1
 1010959:	call   0x1007f00
 101095e:	mov    rsi,QWORD PTR [rsp+0x80]
 1010966:	lea    r11,[rsp+0x50]
 101096b:	mov    rbx,QWORD PTR [r11+0x38]
 101096f:	mov    rbp,QWORD PTR [r11+0x40]
 1010973:	mov    rsp,r11
 1010976:	pop    r15
 1010978:	pop    r14
 101097a:	pop    r13
 101097c:	pop    r12
 101097e:	pop    rdi
 101097f:	ret    
 1010980:	int3   
 1010981:	int3   
 1010982:	int3   
 1010983:	int3   
 1010984:	int3   
 1010985:	int3   
 1010986:	int3   
 1010987:	int3   
 1010988:	int3   
 1010989:	int3   
 101098a:	int3   
 101098b:	int3   
 101098c:	int3   
 101098d:	int3   
 101098e:	int3   
 101098f:	int3   
 1010990:	rex push rbp
 1010992:	push   rdi
 1010993:	push   r14
 1010995:	sub    rsp,0x6d0
 101099c:	mov    rax,QWORD PTR [rip+0x67fd]        # 0x10171a0
 10109a3:	xor    rax,rsp
 10109a6:	mov    QWORD PTR [rsp+0x6b0],rax
 10109ae:	mov    rdi,rcx
 10109b1:	mov    r14,r8
 10109b4:	mov    rbp,rdx
 10109b7:	lea    rcx,[rsp+0x70]
 10109bc:	xor    edx,edx
 10109be:	mov    r8d,0x320
 10109c4:	call   0x1011452
 10109c9:	lea    r9,[rsp+0x30]
 10109ce:	lea    rdx,[rsp+0x70]
 10109d3:	mov    r8d,0x320
 10109d9:	mov    rcx,rdi
 10109dc:	call   0x1011a60
 10109e1:	test   eax,eax
 10109e3:	je     0x1010baa
 10109e9:	mov    ecx,DWORD PTR [rsp+0x30]
 10109ed:	mov    QWORD PTR [rsp+0x6c8],rbx
 10109f5:	mov    QWORD PTR [rsp+0x6c0],rsi
 10109fd:	mov    eax,ecx
 10109ff:	and    eax,0xfffffff8
 1010a02:	cmp    eax,0x320
 1010a07:	jae    0x1010a0e
 1010a09:	shr    ecx,0x3
 1010a0c:	jmp    0x1010a13
 1010a0e:	mov    ecx,0x64
 1010a13:	xor    ebx,ebx
 1010a15:	movsxd rsi,ecx
 1010a18:	test   ecx,ecx
 1010a1a:	jle    0x1010ba3
 1010a20:	mov    rdx,QWORD PTR [rsp+rbx*8+0x70]
 1010a25:	lea    r8,[rsp+0x38]
 1010a2a:	mov    r9d,0x18
 1010a30:	mov    rcx,rdi
 1010a33:	call   0x1011a84
 1010a38:	test   eax,eax
 1010a3a:	je     0x1010b16
 1010a40:	mov    rdx,QWORD PTR [rsp+rbx*8+0x70]
 1010a45:	lea    r8,[rsp+0x4a0]
 1010a4d:	mov    r9d,0x104
 1010a53:	mov    rcx,rdi
 1010a56:	call   0x1011a78
 1010a5b:	test   eax,eax
 1010a5d:	je     0x1010b16
 1010a63:	mov    rdx,QWORD PTR [rsp+rbx*8+0x70]
 1010a68:	lea    r8,[rsp+0x390]
 1010a70:	mov    r9d,0x104
 1010a76:	mov    rcx,rdi
 1010a79:	call   0x1011a6c
 1010a7e:	test   eax,eax
 1010a80:	je     0x1010b16
 1010a86:	lea    rcx,[rsp+0x390]
 1010a8e:	mov    rdx,rbp
 1010a91:	call   QWORD PTR [rip+0xffffffffffff09d1]        # 0x1001468
 1010a97:	test   eax,eax
 1010a99:	jne    0x1010b37
 1010a9f:	lea    r8d,[rax+0x1]
 1010aa3:	lea    rcx,[rsp+0x4a0]
 1010aab:	xor    edx,edx
 1010aad:	call   QWORD PTR [rip+0xffffffffffff064d]        # 0x1001100
 1010ab3:	mov    rbx,rax
 1010ab6:	test   rax,rax
 1010ab9:	jne    0x1010b47
 1010abf:	call   QWORD PTR [rip+0xffffffffffff075b]        # 0x1001220
 1010ac5:	lea    r9,[rsp+0x4a0]
 1010acd:	lea    r8,[rip+0xffffffffffff3a74]        # 0x1004548
 1010ad4:	lea    edx,[rbx+0x1]
 1010ad7:	lea    rcx,[rip+0x6772]        # 0x1017250
 1010ade:	mov    DWORD PTR [rsp+0x20],eax
 1010ae2:	call   0x1007f00
 1010ae7:	mov    rax,rbx
 1010aea:	mov    rbx,QWORD PTR [rsp+0x6c8]
 1010af2:	mov    rsi,QWORD PTR [rsp+0x6c0]
 1010afa:	mov    rcx,QWORD PTR [rsp+0x6b0]
 1010b02:	xor    rcx,rsp
 1010b05:	call   0x1011420
 1010b0a:	add    rsp,0x6d0
 1010b11:	pop    r14
 1010b13:	pop    rdi
 1010b14:	pop    rbp
 1010b15:	ret    
 1010b16:	call   QWORD PTR [rip+0xffffffffffff0704]        # 0x1001220
 1010b1c:	lea    r8,[rip+0xffffffffffff39ad]        # 0x10044d0
 1010b23:	lea    rcx,[rip+0x6726]        # 0x1017250
 1010b2a:	mov    r9d,eax
 1010b2d:	mov    edx,0x1
 1010b32:	call   0x1007f00
 1010b37:	inc    rbx
 1010b3a:	cmp    rbx,rsi
 1010b3d:	jl     0x1010a20
 1010b43:	xor    eax,eax
 1010b45:	jmp    0x1010aea
 1010b47:	call   QWORD PTR [rip+0xffffffffffff0713]        # 0x1001260
 1010b4d:	lea    r8,[rsp+0x50]
 1010b52:	mov    r9d,0x18
 1010b58:	mov    rcx,rax
 1010b5b:	mov    rdx,rbx
 1010b5e:	call   0x1011a84
 1010b63:	test   eax,eax
 1010b65:	je     0x1010b79
 1010b67:	mov    rax,QWORD PTR [rsp+0x50]
 1010b6c:	sub    rax,QWORD PTR [rsp+0x38]
 1010b71:	mov    QWORD PTR [r14],rax
 1010b74:	jmp    0x1010ae7
 1010b79:	mov    rcx,rbx
 1010b7c:	call   QWORD PTR [rip+0xffffffffffff073e]        # 0x10012c0
 1010b82:	call   QWORD PTR [rip+0xffffffffffff0698]        # 0x1001220
 1010b88:	lea    r8,[rip+0xffffffffffff3a01]        # 0x1004590
 1010b8f:	lea    rcx,[rip+0x66ba]        # 0x1017250
 1010b96:	mov    r9d,eax
 1010b99:	mov    edx,0x1
 1010b9e:	call   0x1007f00
 1010ba3:	xor    eax,eax
 1010ba5:	jmp    0x1010aea
 1010baa:	call   QWORD PTR [rip+0xffffffffffff0670]        # 0x1001220
 1010bb0:	lea    r8,[rip+0xffffffffffff3a49]        # 0x1004600
 1010bb7:	lea    rcx,[rip+0x6692]        # 0x1017250
 1010bbe:	mov    r9d,eax
 1010bc1:	mov    edx,0x1
 1010bc6:	call   0x1007f00
 1010bcb:	xor    eax,eax
 1010bcd:	jmp    0x1010afa
 1010bd2:	int3   
 1010bd3:	int3   
 1010bd4:	int3   
 1010bd5:	int3   
 1010bd6:	int3   
 1010bd7:	int3   
 1010bd8:	int3   
 1010bd9:	int3   
 1010bda:	int3   
 1010bdb:	int3   
 1010bdc:	int3   
 1010bdd:	int3   
 1010bde:	int3   
 1010bdf:	int3   
 1010be0:	rex push rbx
 1010be2:	sub    rsp,0x20
 1010be6:	mov    rbx,rcx
 1010be9:	mov    eax,0x1
 1010bee:	lock xadd DWORD PTR [rcx+0x22590],eax
 1010bf6:	movsxd rdx,eax
 1010bf9:	imul   rdx,rdx,0xb3c
 1010c00:	add    rdx,QWORD PTR [rcx+0x22570]
 1010c07:	call   0x100e720
 1010c0c:	or     eax,0xffffffff
 1010c0f:	lock xadd DWORD PTR [rbx+0x22584],eax
 1010c17:	dec    eax
 1010c19:	jne    0x1010c28
 1010c1b:	mov    rcx,QWORD PTR [rbx+0x22588]
 1010c22:	call   QWORD PTR [rip+0xffffffffffff0468]        # 0x1001090
 1010c28:	xor    eax,eax
 1010c2a:	add    rsp,0x20
 1010c2e:	pop    rbx
 1010c2f:	ret    
 1010c30:	int3   
 1010c31:	int3   
 1010c32:	int3   
 1010c33:	int3   
 1010c34:	int3   
 1010c35:	int3   
 1010c36:	int3   
 1010c37:	int3   
 1010c38:	int3   
 1010c39:	int3   
 1010c3a:	int3   
 1010c3b:	int3   
 1010c3c:	int3   
 1010c3d:	int3   
 1010c3e:	int3   
 1010c3f:	int3   
 1010c40:	mov    QWORD PTR [rsp+0x18],rbx
 1010c45:	push   rbp
 1010c46:	push   rdi
 1010c47:	push   r14
 1010c49:	sub    rsp,0x30
 1010c4d:	xor    r14d,r14d
 1010c50:	movzx  ebp,cx
 1010c53:	mov    QWORD PTR [rsp+0x50],rsi
 1010c58:	mov    ebx,r14d
 1010c5b:	mov    edi,r14d
 1010c5e:	xchg   ax,ax
 1010c60:	lea    rdx,[rsp+0x58]
 1010c65:	mov    r9d,ebp
 1010c68:	xor    r8d,r8d
 1010c6b:	xor    ecx,ecx
 1010c6d:	mov    DWORD PTR [rsp+0x28],r14d
 1010c72:	mov    DWORD PTR [rsp+0x58],r14d
 1010c77:	mov    DWORD PTR [rsp+0x20],0x3
 1010c7f:	call   0x1011a90
 1010c84:	cmp    eax,0x7a
 1010c87:	jne    0x1010d0d
 1010c8d:	mov    ecx,DWORD PTR [rsp+0x58]
 1010c91:	call   0x1011184
 1010c96:	mov    rbx,rax
 1010c99:	test   rax,rax
 1010c9c:	je     0x1010cec
 1010c9e:	lea    rdx,[rsp+0x58]
 1010ca3:	mov    r9d,ebp
 1010ca6:	xor    r8d,r8d
 1010ca9:	mov    rcx,rax
 1010cac:	mov    DWORD PTR [rsp+0x28],r14d
 1010cb1:	mov    DWORD PTR [rsp+0x20],0x3
 1010cb9:	call   0x1011a90
 1010cbe:	mov    esi,eax
 1010cc0:	test   eax,eax
 1010cc2:	je     0x1010d0d
 1010cc4:	mov    rcx,rbx
 1010cc7:	call   0x1011190
 1010ccc:	mov    rbx,r14
 1010ccf:	cmp    esi,0x7a
 1010cd2:	jne    0x1010cdd
 1010cd4:	inc    edi
 1010cd6:	cmp    edi,0x4
 1010cd9:	jb     0x1010c60
 1010cdb:	jmp    0x1010d0d
 1010cdd:	call   QWORD PTR [rip+0xffffffffffff053d]        # 0x1001220
 1010ce3:	lea    r8,[rip+0xffffffffffff42be]        # 0x1004fa8
 1010cea:	jmp    0x1010cf9
 1010cec:	call   QWORD PTR [rip+0xffffffffffff052e]        # 0x1001220
 1010cf2:	lea    r8,[rip+0xffffffffffff4267]        # 0x1004f60
 1010cf9:	lea    rcx,[rip+0x6550]        # 0x1017250
 1010d00:	mov    r9d,eax
 1010d03:	mov    edx,0x1
 1010d08:	call   0x1007f00
 1010d0d:	mov    rsi,QWORD PTR [rsp+0x50]
 1010d12:	mov    rax,rbx
 1010d15:	mov    rbx,QWORD PTR [rsp+0x60]
 1010d1a:	add    rsp,0x30
 1010d1e:	pop    r14
 1010d20:	pop    rdi
 1010d21:	pop    rbp
 1010d22:	ret    
 1010d23:	int3   
 1010d24:	int3   
 1010d25:	int3   
 1010d26:	int3   
 1010d27:	int3   
 1010d28:	int3   
 1010d29:	int3   
 1010d2a:	int3   
 1010d2b:	int3   
 1010d2c:	int3   
 1010d2d:	int3   
 1010d2e:	int3   
 1010d2f:	int3   
 1010d30:	sub    rsp,0x28
 1010d34:	call   0x1009f50
 1010d39:	xor    eax,eax
 1010d3b:	add    rsp,0x28
 1010d3f:	ret    
 1010d40:	int3   
 1010d41:	int3   
 1010d42:	int3   
 1010d43:	int3   
 1010d44:	int3   
 1010d45:	int3   
 1010d46:	int3   
 1010d47:	int3   
 1010d48:	int3   
 1010d49:	int3   
 1010d4a:	int3   
 1010d4b:	int3   
 1010d4c:	int3   
 1010d4d:	int3   
 1010d4e:	int3   
 1010d4f:	int3   
 1010d50:	xor    eax,eax
 1010d52:	ret    
 1010d53:	int3   
 1010d54:	int3   
 1010d55:	int3   
 1010d56:	int3   
 1010d57:	int3   
 1010d58:	int3   
 1010d59:	int3   
 1010d5a:	int3   
 1010d5b:	int3   
 1010d5c:	int3   
 1010d5d:	int3   
 1010d5e:	int3   
 1010d5f:	int3   
 1010d60:	rex push rbx
 1010d62:	push   rbp
 1010d63:	push   rsi
 1010d64:	push   rdi
 1010d65:	push   r14
 1010d67:	push   r15
 1010d69:	mov    eax,0x1058
 1010d6e:	call   0x10113c0
 1010d73:	sub    rsp,rax
 1010d76:	mov    rax,QWORD PTR [rip+0x6423]        # 0x10171a0
 1010d7d:	xor    rax,rsp
 1010d80:	mov    QWORD PTR [rsp+0x1040],rax
 1010d88:	xor    r15d,r15d
 1010d8b:	mov    esi,r8d
 1010d8e:	mov    r14,rdx
 1010d91:	mov    rbp,rcx
 1010d94:	mov    ebx,0x1
 1010d99:	mov    edi,r15d
 1010d9c:	test   r8d,r8d
 1010d9f:	je     0x1010e75
 1010da5:	mov    QWORD PTR [rsp+0x1050],r12
 1010dad:	mov    r12d,0x1000
 1010db3:	cmp    ebx,0x1
 1010db6:	jne    0x1010e21
 1010db8:	mov    r8d,esi
 1010dbb:	lea    r9,[rsp+0x30]
 1010dc0:	lea    rdx,[rsp+0x40]
 1010dc5:	sub    r8d,edi
 1010dc8:	mov    rcx,r14
 1010dcb:	mov    DWORD PTR [rsp+0x30],r15d
 1010dd0:	cmp    r8d,r12d
 1010dd3:	mov    QWORD PTR [rsp+0x20],r15
 1010dd8:	cmova  r8d,r12d
 1010ddc:	call   QWORD PTR [rip+0xffffffffffff02d6]        # 0x10010b8
 1010de2:	mov    ebx,eax
 1010de4:	test   eax,eax
 1010de6:	je     0x1010e25
 1010de8:	mov    r8d,DWORD PTR [rsp+0x30]
 1010ded:	test   r8d,r8d
 1010df0:	je     0x1010e21
 1010df2:	lea    r9,[rsp+0x34]
 1010df7:	lea    rdx,[rsp+0x40]
 1010dfc:	mov    rcx,rbp
 1010dff:	mov    DWORD PTR [rsp+0x34],r15d
 1010e04:	mov    QWORD PTR [rsp+0x20],r15
 1010e09:	call   QWORD PTR [rip+0xffffffffffff02a1]        # 0x10010b0
 1010e0f:	mov    ebx,eax
 1010e11:	mov    eax,DWORD PTR [rsp+0x30]
 1010e15:	cmp    DWORD PTR [rsp+0x34],eax
 1010e19:	jne    0x1010e70
 1010e1b:	add    edi,eax
 1010e1d:	cmp    esi,edi
 1010e1f:	ja     0x1010db3
 1010e21:	test   ebx,ebx
 1010e23:	jne    0x1010e46
 1010e25:	call   QWORD PTR [rip+0xffffffffffff03f5]        # 0x1001220
 1010e2b:	lea    r8,[rip+0xffffffffffff53fe]        # 0x1006230
 1010e32:	lea    rcx,[rip+0x6417]        # 0x1017250
 1010e39:	mov    r9d,eax
 1010e3c:	mov    edx,0x1
 1010e41:	call   0x1007f00
 1010e46:	mov    r12,QWORD PTR [rsp+0x1050]
 1010e4e:	mov    eax,ebx
 1010e50:	mov    rcx,QWORD PTR [rsp+0x1040]
 1010e58:	xor    rcx,rsp
 1010e5b:	call   0x1011420
 1010e60:	add    rsp,0x1058
 1010e67:	pop    r15
 1010e69:	pop    r14
 1010e6b:	pop    rdi
 1010e6c:	pop    rsi
 1010e6d:	pop    rbp
 1010e6e:	pop    rbx
 1010e6f:	ret    
 1010e70:	mov    ebx,r15d
 1010e73:	jmp    0x1010e25
 1010e75:	mov    eax,ebx
 1010e77:	jmp    0x1010e50
 1010e79:	int3   
 1010e7a:	int3   
 1010e7b:	int3   
 1010e7c:	int3   
 1010e7d:	int3   
 1010e7e:	int3   
 1010e7f:	int3   
 1010e80:	jmp    QWORD PTR [rip+0xffffffffffff02da]        # 0x1001160
 1010e86:	int3   
 1010e87:	int3   
 1010e88:	int3   
 1010e89:	int3   
 1010e8a:	int3   
 1010e8b:	int3   
 1010e8c:	jmp    QWORD PTR [rip+0xffffffffffff02d6]        # 0x1001168
 1010e92:	int3   
 1010e93:	int3   
 1010e94:	int3   
 1010e95:	int3   
 1010e96:	int3   
 1010e97:	int3   
 1010e98:	jmp    QWORD PTR [rip+0xffffffffffff02d2]        # 0x1001170
 1010e9e:	int3   
 1010e9f:	int3   
 1010ea0:	int3   
 1010ea1:	int3   
 1010ea2:	int3   
 1010ea3:	int3   
 1010ea4:	sub    rsp,0x38
 1010ea8:	lea    rcx,[rip+0x665]        # 0x1011514
 1010eaf:	call   0x1011254
 1010eb4:	mov    r11d,DWORD PTR [rip+0x2cdd1]        # 0x103dc8c
 1010ebb:	mov    r9d,DWORD PTR [rip+0x2cdc6]        # 0x103dc88
 1010ec2:	lea    rax,[rip+0x2cdb3]        # 0x103dc7c
 1010ec9:	lea    r8,[rip+0x2cd98]        # 0x103dc68
 1010ed0:	lea    rdx,[rip+0x2cd99]        # 0x103dc70
 1010ed7:	lea    rcx,[rip+0x2cd82]        # 0x103dc60
 1010ede:	mov    DWORD PTR [rip+0x2cd97],r11d        # 0x103dc7c
 1010ee5:	mov    QWORD PTR [rsp+0x20],rax
 1010eea:	call   QWORD PTR [rip+0xffffffffffff04b0]        # 0x10013a0
 1010ef0:	mov    DWORD PTR [rip+0x2cd82],eax        # 0x103dc78
 1010ef6:	test   eax,eax
 1010ef8:	jns    0x1010f04
 1010efa:	mov    ecx,0x8
 1010eff:	call   0x10114c6
 1010f04:	add    rsp,0x38
 1010f08:	ret    
 1010f09:	int3   
 1010f0a:	int3   
 1010f0b:	int3   
 1010f0c:	int3   
 1010f0d:	int3   
 1010f0e:	int3   
 1010f0f:	int3   
 1010f10:	mov    QWORD PTR [rsp+0x8],rbx
 1010f15:	push   rdi
 1010f16:	sub    rsp,0x20
 1010f1a:	mov    rax,QWORD PTR gs:0x30
 1010f23:	mov    rbx,QWORD PTR [rax+0x8]
 1010f27:	xor    edi,edi
 1010f29:	xor    eax,eax
 1010f2b:	lock cmpxchg QWORD PTR [rip+0x2d954],rbx        # 0x103e888
 1010f34:	je     0x1010f51
 1010f36:	cmp    rax,rbx
 1010f39:	jne    0x1010f44
 1010f3b:	mov    ebx,0x1
 1010f40:	mov    edi,ebx
 1010f42:	jmp    0x1010f56
 1010f44:	mov    ecx,0x3e8
 1010f49:	call   QWORD PTR [rip+0xffffffffffff0151]        # 0x10010a0
 1010f4f:	jmp    0x1010f29
 1010f51:	mov    ebx,0x1
 1010f56:	mov    eax,DWORD PTR [rip+0x2d924]        # 0x103e880
 1010f5c:	cmp    eax,ebx
 1010f5e:	jne    0x1010f6c
 1010f60:	mov    ecx,0x1f
 1010f65:	call   0x10114c6
 1010f6a:	jmp    0x1010fa3
 1010f6c:	mov    eax,DWORD PTR [rip+0x2d90e]        # 0x103e880
 1010f72:	test   eax,eax
 1010f74:	jne    0x1010f9d
 1010f76:	mov    DWORD PTR [rip+0x2d904],ebx        # 0x103e880
 1010f7c:	lea    rdx,[rip+0xffffffffffff05f5]        # 0x1001578
 1010f83:	lea    rcx,[rip+0xffffffffffff05d6]        # 0x1001560
 1010f8a:	call   0x1011644
 1010f8f:	test   eax,eax
 1010f91:	je     0x1010fa3
 1010f93:	mov    eax,0xff
 1010f98:	jmp    0x1011085
 1010f9d:	mov    DWORD PTR [rip+0x2cce1],ebx        # 0x103dc84
 1010fa3:	mov    eax,DWORD PTR [rip+0x2d8d7]        # 0x103e880
 1010fa9:	cmp    eax,ebx
 1010fab:	jne    0x1010fca
 1010fad:	lea    rdx,[rip+0xffffffffffff05a4]        # 0x1001558
 1010fb4:	lea    rcx,[rip+0xffffffffffff0575]        # 0x1001530
 1010fbb:	call   0x1011638
 1010fc0:	mov    DWORD PTR [rip+0x2d8b6],0x2        # 0x103e880
 1010fca:	test   edi,edi
 1010fcc:	jne    0x1010fd7
 1010fce:	xor    eax,eax
 1010fd0:	xchg   QWORD PTR [rip+0x2d8b1],rax        # 0x103e888
 1010fd7:	cmp    QWORD PTR [rip+0x2d8c1],0x0        # 0x103e8a0
 1010fdf:	je     0x1011000
 1010fe1:	lea    rcx,[rip+0x2d8b8]        # 0x103e8a0
 1010fe8:	call   0x10115f0
 1010fed:	test   eax,eax
 1010fef:	je     0x1011000
 1010ff1:	xor    r8d,r8d
 1010ff4:	lea    edx,[r8+0x2]
 1010ff8:	xor    ecx,ecx
 1010ffa:	call   QWORD PTR [rip+0x2d8a0]        # 0x103e8a0
 1011000:	mov    rcx,QWORD PTR [rip+0xffffffffffff0379]        # 0x1001380
 1011007:	mov    rax,QWORD PTR [rip+0x2cc5a]        # 0x103dc68
 101100e:	mov    QWORD PTR [rcx],rax
 1011011:	mov    r8,QWORD PTR [rip+0x2cc50]        # 0x103dc68
 1011018:	mov    rdx,QWORD PTR [rip+0x2cc51]        # 0x103dc70
 101101f:	mov    ecx,DWORD PTR [rip+0x2cc3b]        # 0x103dc60
 1011025:	call   0x10106d0
 101102a:	mov    DWORD PTR [rip+0x2cc50],eax        # 0x103dc80
 1011030:	cmp    DWORD PTR [rip+0x2cc2d],0x0        # 0x103dc64
 1011037:	jne    0x1011041
 1011039:	mov    ecx,eax
 101103b:	call   QWORD PTR [rip+0xffffffffffff03af]        # 0x10013f0
 1011041:	cmp    DWORD PTR [rip+0x2cc3c],0x0        # 0x103dc84
 1011048:	jne    0x1011056
 101104a:	call   QWORD PTR [rip+0xffffffffffff0338]        # 0x1001388
 1011050:	mov    eax,DWORD PTR [rip+0x2cc2a]        # 0x103dc80
 1011056:	jmp    0x1011085
 1011058:	mov    DWORD PTR [rip+0x2cc22],eax        # 0x103dc80
 101105e:	cmp    DWORD PTR [rip+0x2cbff],0x0        # 0x103dc64
 1011065:	jne    0x1011070
 1011067:	mov    ecx,eax
 1011069:	call   QWORD PTR [rip+0xffffffffffff0321]        # 0x1001390
 101106f:	int3   
 1011070:	cmp    DWORD PTR [rip+0x2cc0d],0x0        # 0x103dc84
 1011077:	jne    0x1011085
 1011079:	call   QWORD PTR [rip+0xffffffffffff0309]        # 0x1001388
 101107f:	mov    eax,DWORD PTR [rip+0x2cbfb]        # 0x103dc80
 1011085:	mov    rbx,QWORD PTR [rsp+0x30]
 101108a:	add    rsp,0x20
 101108e:	pop    rdi
 101108f:	ret    
 1011090:	int3   
 1011091:	int3   
 1011092:	int3   
 1011093:	int3   
 1011094:	int3   
 1011095:	int3   
 1011096:	int3   
 1011097:	int3   
 1011098:	sub    rsp,0x28
 101109c:	mov    eax,0x5a4d
 10110a1:	cmp    WORD PTR [rip+0xfffffffffffeef58],ax        # 0x1000000
 10110a8:	je     0x10110ae
 10110aa:	xor    ecx,ecx
 10110ac:	jmp    0x10110e6
 10110ae:	movsxd rax,DWORD PTR [rip+0xfffffffffffeef87]        # 0x100003c
 10110b5:	lea    rcx,[rip+0xfffffffffffeef44]        # 0x1000000
 10110bc:	add    rax,rcx
 10110bf:	cmp    DWORD PTR [rax],0x4550
 10110c5:	jne    0x10110aa
 10110c7:	mov    ecx,0x20b
 10110cc:	cmp    WORD PTR [rax+0x18],cx
 10110d0:	jne    0x10110aa
 10110d2:	xor    ecx,ecx
 10110d4:	cmp    DWORD PTR [rax+0x84],0xe
 10110db:	jbe    0x10110e6
 10110dd:	cmp    DWORD PTR [rax+0xf8],ecx
 10110e3:	setne  cl
 10110e6:	mov    DWORD PTR [rip+0x2cb78],ecx        # 0x103dc64
 10110ec:	mov    ecx,0x1
 10110f1:	call   QWORD PTR [rip+0xffffffffffff0251]        # 0x1001348
 10110f7:	or     rcx,0xffffffffffffffff
 10110fb:	call   QWORD PTR [rip+0xffffffffffff00d7]        # 0x10011d8
 1011101:	mov    rcx,QWORD PTR [rip+0xffffffffffff0248]        # 0x1001350
 1011108:	mov    QWORD PTR [rip+0x2d781],rax        # 0x103e890
 101110f:	mov    QWORD PTR [rip+0x2d782],rax        # 0x103e898
 1011116:	mov    eax,DWORD PTR [rip+0x2cb78]        # 0x103dc94
 101111c:	mov    DWORD PTR [rcx],eax
 101111e:	mov    rdx,QWORD PTR [rip+0xffffffffffff0233]        # 0x1001358
 1011125:	mov    eax,DWORD PTR [rip+0x2cb65]        # 0x103dc90
 101112b:	mov    DWORD PTR [rdx],eax
 101112d:	call   0x10114d4
 1011132:	call   0x101165c
 1011137:	cmp    DWORD PTR [rip+0x607e],0x0        # 0x10171bc
 101113e:	jne    0x101114d
 1011140:	lea    rcx,[rip+0x509]        # 0x1011650
 1011147:	call   QWORD PTR [rip+0xffffffffffff0213]        # 0x1001360
 101114d:	cmp    DWORD PTR [rip+0x6064],0xffffffff        # 0x10171b8
 1011154:	jne    0x101115f
 1011156:	or     ecx,0xffffffff
 1011159:	call   QWORD PTR [rip+0xffffffffffff0209]        # 0x1001368
 101115f:	xor    eax,eax
 1011161:	add    rsp,0x28
 1011165:	ret    
 1011166:	int3   
 1011167:	int3   
 1011168:	int3   
 1011169:	int3   
 101116a:	int3   
 101116b:	int3   
 101116c:	sub    rsp,0x28
 1011170:	call   0x1011668
 1011175:	add    rsp,0x28
 1011179:	jmp    0x1010f10
 101117e:	int3   
 101117f:	int3   
 1011180:	int3   
 1011181:	int3   
 1011182:	int3   
 1011183:	int3   
 1011184:	jmp    QWORD PTR [rip+0xffffffffffff02ee]        # 0x1001478
 101118a:	int3   
 101118b:	int3   
 101118c:	int3   
 101118d:	int3   
 101118e:	int3   
 101118f:	int3   
 1011190:	jmp    QWORD PTR [rip+0xffffffffffff02da]        # 0x1001470
 1011196:	int3   
 1011197:	int3   
 1011198:	int3   
 1011199:	int3   
 101119a:	int3   
 101119b:	int3   
 101119c:	rex push rbx
 101119e:	sub    rsp,0x20
 10111a2:	mov    rbx,rcx
 10111a5:	mov    rcx,QWORD PTR [rip+0x2d6ec]        # 0x103e898
 10111ac:	call   QWORD PTR [rip+0xffffffffffff001e]        # 0x10011d0
 10111b2:	mov    QWORD PTR [rsp+0x38],rax
 10111b7:	cmp    rax,0xffffffffffffffff
 10111bb:	jne    0x10111c8
 10111bd:	mov    rcx,rbx
 10111c0:	call   QWORD PTR [rip+0xffffffffffff0162]        # 0x1001328
 10111c6:	jmp    0x1011246
 10111c8:	mov    ecx,0x8
 10111cd:	call   0x101173a
 10111d2:	nop
 10111d3:	mov    rcx,QWORD PTR [rip+0x2d6be]        # 0x103e898
 10111da:	call   QWORD PTR [rip+0xfffffffffffefff0]        # 0x10011d0
 10111e0:	mov    QWORD PTR [rsp+0x38],rax
 10111e5:	mov    rcx,QWORD PTR [rip+0x2d6a4]        # 0x103e890
 10111ec:	call   QWORD PTR [rip+0xfffffffffffeffde]        # 0x10011d0
 10111f2:	mov    QWORD PTR [rsp+0x40],rax
 10111f7:	mov    rcx,rbx
 10111fa:	call   QWORD PTR [rip+0xfffffffffffeffd8]        # 0x10011d8
 1011200:	mov    rcx,rax
 1011203:	lea    r8,[rsp+0x40]
 1011208:	lea    rdx,[rsp+0x38]
 101120d:	call   0x101172e
 1011212:	mov    rbx,rax
 1011215:	mov    rcx,QWORD PTR [rsp+0x38]
 101121a:	call   QWORD PTR [rip+0xfffffffffffeffb8]        # 0x10011d8
 1011220:	mov    QWORD PTR [rip+0x2d671],rax        # 0x103e898
 1011227:	mov    rcx,QWORD PTR [rsp+0x40]
 101122c:	call   QWORD PTR [rip+0xfffffffffffeffa6]        # 0x10011d8
 1011232:	mov    QWORD PTR [rip+0x2d657],rax        # 0x103e890
 1011239:	mov    ecx,0x8
 101123e:	call   0x1011722
 1011243:	mov    rax,rbx
 1011246:	add    rsp,0x20
 101124a:	pop    rbx
 101124b:	ret    
 101124c:	int3   
 101124d:	int3   
 101124e:	int3   
 101124f:	int3   
 1011250:	int3   
 1011251:	int3   
 1011252:	int3   
 1011253:	int3   
 1011254:	sub    rsp,0x28
 1011258:	call   0x101119c
 101125d:	neg    rax
 1011260:	sbb    eax,eax
 1011262:	neg    eax
 1011264:	dec    eax
 1011266:	add    rsp,0x28
 101126a:	ret    
 101126b:	int3   
 101126c:	int3   
 101126d:	int3   
 101126e:	int3   
 101126f:	int3   
 1011270:	int3   
 1011271:	int3   
 1011272:	jmp    QWORD PTR [rip+0xffffffffffff0148]        # 0x10013c0
 1011278:	int3   
 1011279:	int3   
 101127a:	int3   
 101127b:	int3   
 101127c:	int3   
 101127d:	int3   
 101127e:	int3   
 101127f:	int3   
 1011280:	rex push rbx
 1011282:	sub    rsp,0x20
 1011286:	mov    r11d,DWORD PTR [r8]
 1011289:	mov    rbx,rdx
 101128c:	mov    r9,rcx
 101128f:	and    r11d,0xfffffff8
 1011293:	test   BYTE PTR [r8],0x4
 1011297:	mov    r10,rcx
 101129a:	je     0x10112af
 101129c:	mov    eax,DWORD PTR [r8+0x8]
 10112a0:	movsxd r10,DWORD PTR [r8+0x4]
 10112a4:	neg    eax
 10112a6:	add    r10,rcx
 10112a9:	movsxd rcx,eax
 10112ac:	and    r10,rcx
 10112af:	movsxd rax,r11d
 10112b2:	mov    rdx,QWORD PTR [rax+r10*1]
 10112b6:	mov    rax,QWORD PTR [rbx+0x10]
 10112ba:	mov    ecx,DWORD PTR [rax+0x8]
 10112bd:	add    rcx,QWORD PTR [rbx+0x8]
 10112c1:	test   BYTE PTR [rcx+0x3],0xf
 10112c5:	je     0x10112d3
 10112c7:	movzx  eax,BYTE PTR [rcx+0x3]
 10112cb:	and    eax,0xfffffff0
 10112ce:	cdqe   
 10112d0:	add    r9,rax
 10112d3:	xor    r9,rdx
 10112d6:	mov    rcx,r9
 10112d9:	add    rsp,0x20
 10112dd:	pop    rbx
 10112de:	jmp    0x1011420
 10112e3:	int3   
 10112e4:	int3   
 10112e5:	int3   
 10112e6:	int3   
 10112e7:	int3   
 10112e8:	int3   
 10112e9:	int3   
 10112ea:	int3   
 10112eb:	int3   
 10112ec:	sub    rsp,0x28
 10112f0:	mov    r8,QWORD PTR [r9+0x38]
 10112f4:	mov    rcx,rdx
 10112f7:	mov    rdx,r9
 10112fa:	call   0x1011280
 10112ff:	mov    eax,0x1
 1011304:	add    rsp,0x28
 1011308:	ret    
 1011309:	int3   
 101130a:	int3   
 101130b:	int3   
 101130c:	int3   
 101130d:	int3   
 101130e:	int3   
 101130f:	int3   
 1011310:	mov    rax,rsp
 1011313:	mov    QWORD PTR [rax+0x8],rbx
 1011317:	mov    QWORD PTR [rax+0x10],rbp
 101131b:	mov    QWORD PTR [rax+0x18],rsi
 101131f:	mov    QWORD PTR [rax+0x20],rdi
 1011323:	push   r12
 1011325:	sub    rsp,0x20
 1011329:	mov    r10,QWORD PTR [r9+0x38]
 101132d:	mov    rsi,rdx
 1011330:	mov    r12,r8
 1011333:	mov    eax,DWORD PTR [r10]
 1011336:	mov    rbp,rcx
 1011339:	mov    rdx,r9
 101133c:	add    rax,rax
 101133f:	mov    rcx,rsi
 1011342:	mov    rdi,r9
 1011345:	lea    rbx,[r10+rax*8+0x4]
 101134a:	mov    r8,rbx
 101134d:	call   0x1011280
 1011352:	mov    r11d,DWORD PTR [rbx]
 1011355:	mov    r10d,DWORD PTR [rbp+0x4]
 1011359:	mov    eax,r11d
 101135c:	and    r11d,0x2
 1011360:	mov    edx,0x1
 1011365:	and    eax,edx
 1011367:	and    r10b,0x66
 101136b:	cmove  r11d,eax
 101136f:	test   r11d,r11d
 1011372:	je     0x1011387
 1011374:	mov    r9,rdi
 1011377:	mov    r8,r12
 101137a:	mov    rdx,rsi
 101137d:	mov    rcx,rbp
 1011380:	call   0x1011272
 1011385:	mov    edx,eax
 1011387:	mov    rbx,QWORD PTR [rsp+0x30]
 101138c:	mov    rbp,QWORD PTR [rsp+0x38]
 1011391:	mov    rsi,QWORD PTR [rsp+0x40]
 1011396:	mov    rdi,QWORD PTR [rsp+0x48]
 101139b:	mov    eax,edx
 101139d:	add    rsp,0x20
 10113a1:	pop    r12
 10113a3:	ret    
 10113a4:	int3   
 10113a5:	int3   
 10113a6:	int3   
 10113a7:	int3   
 10113a8:	int3   
 10113a9:	int3   
 10113aa:	int3   
 10113ab:	int3   
 10113ac:	int3   
 10113ad:	int3   
 10113ae:	int3   
 10113af:	int3   
 10113b0:	int3   
 10113b1:	int3   
 10113b2:	int3   
 10113b3:	int3   
 10113b4:	int3   
 10113b5:	int3   
 10113b6:	data16 nop WORD PTR [rax+rax*1+0x0]
 10113c0:	sub    rsp,0x10
 10113c4:	mov    QWORD PTR [rsp],r10
 10113c8:	mov    QWORD PTR [rsp+0x8],r11
 10113cd:	xor    r11,r11
 10113d0:	lea    r10,[rsp+0x18]
 10113d5:	sub    r10,rax
 10113d8:	cmovb  r10,r11
 10113dc:	mov    r11,QWORD PTR gs:0x10
 10113e5:	cmp    r10,r11
 10113e8:	jae    0x1011400
 10113ea:	and    r10w,0xf000
 10113f0:	lea    r11,[r11-0x1000]
 10113f7:	mov    BYTE PTR [r11],0x0
 10113fb:	cmp    r10,r11
 10113fe:	jne    0x10113f0
 1011400:	mov    r10,QWORD PTR [rsp]
 1011404:	mov    r11,QWORD PTR [rsp+0x8]
 1011409:	add    rsp,0x10
 101140d:	ret    
 101140e:	int3   
 101140f:	int3   
 1011410:	int3   
 1011411:	int3   
 1011412:	int3   
 1011413:	int3   
 1011414:	int3   
 1011415:	int3   
 1011416:	data16 nop WORD PTR [rax+rax*1+0x0]
 1011420:	cmp    rcx,QWORD PTR [rip+0x5d79]        # 0x10171a0
 1011427:	jne    0x101143a
 1011429:	rol    rcx,0x10
 101142d:	test   cx,0xffff
 1011432:	jne    0x1011436
 1011434:	repz ret 
 1011436:	ror    rcx,0x10
 101143a:	jmp    0x1011748
 101143f:	int3   
 1011440:	int3   
 1011441:	int3   
 1011442:	int3   
 1011443:	int3   
 1011444:	int3   
 1011445:	int3   
 1011446:	jmp    QWORD PTR [rip+0xfffffffffffeff6c]        # 0x10013b8
 101144c:	int3   
 101144d:	int3   
 101144e:	int3   
 101144f:	int3   
 1011450:	int3   
 1011451:	int3   
 1011452:	jmp    QWORD PTR [rip+0xfffffffffffeff58]        # 0x10013b0
 1011458:	int3   
 1011459:	int3   
 101145a:	int3   
 101145b:	int3   
 101145c:	int3   
 101145d:	int3   
 101145e:	int3   
 101145f:	int3   
 1011460:	sub    rsp,0x28
 1011464:	mov    rax,QWORD PTR [rcx]
 1011467:	cmp    DWORD PTR [rax],0xe06d7363
 101146d:	jne    0x101149a
 101146f:	cmp    DWORD PTR [rax+0x18],0x4
 1011473:	jne    0x101149a
 1011475:	mov    eax,DWORD PTR [rax+0x20]
 1011478:	cmp    eax,0x19930520
 101147d:	je     0x1011494
 101147f:	cmp    eax,0x19930521
 1011484:	je     0x1011494
 1011486:	cmp    eax,0x19930522
 101148b:	je     0x1011494
 101148d:	cmp    eax,0x1994000
 1011492:	jne    0x101149a
 1011494:	call   0x1011898
 1011499:	int3   
 101149a:	xor    eax,eax
 101149c:	add    rsp,0x28
 10114a0:	ret    
 10114a1:	int3   
 10114a2:	int3   
 10114a3:	int3   
 10114a4:	int3   
 10114a5:	int3   
 10114a6:	int3   
 10114a7:	int3   
 10114a8:	sub    rsp,0x28
 10114ac:	lea    rcx,[rip+0xffffffffffffffad]        # 0x1011460
 10114b3:	call   QWORD PTR [rip+0xfffffffffffefd0f]        # 0x10011c8
 10114b9:	xor    eax,eax
 10114bb:	add    rsp,0x28
 10114bf:	ret    
 10114c0:	int3   
 10114c1:	int3   
 10114c2:	int3   
 10114c3:	int3   
 10114c4:	int3   
 10114c5:	int3   
 10114c6:	jmp    QWORD PTR [rip+0xfffffffffffefedc]        # 0x10013a8
 10114cc:	int3   
 10114cd:	int3   
 10114ce:	int3   
 10114cf:	int3   
 10114d0:	int3   
 10114d1:	int3   
 10114d2:	int3   
 10114d3:	int3   
 10114d4:	mov    QWORD PTR [rsp+0x8],rbx
 10114d9:	push   rdi
 10114da:	sub    rsp,0x20
 10114de:	lea    rbx,[rip+0xffffffffffff5f8b]        # 0x1007470
 10114e5:	lea    rdi,[rip+0xffffffffffff5f84]        # 0x1007470
 10114ec:	jmp    0x10114fc
 10114ee:	mov    rax,QWORD PTR [rbx]
 10114f1:	test   rax,rax
 10114f4:	je     0x10114f8
 10114f6:	call   rax
 10114f8:	add    rbx,0x8
 10114fc:	cmp    rbx,rdi
 10114ff:	jb     0x10114ee
 1011501:	mov    rbx,QWORD PTR [rsp+0x30]
 1011506:	add    rsp,0x20
 101150a:	pop    rdi
 101150b:	ret    
 101150c:	int3   
 101150d:	int3   
 101150e:	int3   
 101150f:	int3   
 1011510:	int3   
 1011511:	int3   
 1011512:	int3   
 1011513:	int3   
 1011514:	mov    QWORD PTR [rsp+0x8],rbx
 1011519:	push   rdi
 101151a:	sub    rsp,0x20
 101151e:	lea    rbx,[rip+0xffffffffffff5f5b]        # 0x1007480
 1011525:	lea    rdi,[rip+0xffffffffffff5f54]        # 0x1007480
 101152c:	jmp    0x101153c
 101152e:	mov    rax,QWORD PTR [rbx]
 1011531:	test   rax,rax
 1011534:	je     0x1011538
 1011536:	call   rax
 1011538:	add    rbx,0x8
 101153c:	cmp    rbx,rdi
 101153f:	jb     0x101152e
 1011541:	mov    rbx,QWORD PTR [rsp+0x30]
 1011546:	add    rsp,0x20
 101154a:	pop    rdi
 101154b:	ret    
 101154c:	int3   
 101154d:	int3   
 101154e:	int3   
 101154f:	int3   
 1011550:	int3   
 1011551:	int3   
 1011552:	jmp    QWORD PTR [rip+0xfffffffffffefe40]        # 0x1001398
 1011558:	int3   
 1011559:	int3   
 101155a:	int3   
 101155b:	int3   
 101155c:	int3   
 101155d:	int3   
 101155e:	int3   
 101155f:	int3   
 1011560:	mov    rax,rcx
 1011563:	mov    ecx,0x5a4d
 1011568:	cmp    WORD PTR [rax],cx
 101156b:	je     0x1011570
 101156d:	xor    eax,eax
 101156f:	ret    
 1011570:	movsxd rcx,DWORD PTR [rax+0x3c]
 1011574:	add    rcx,rax
 1011577:	xor    eax,eax
 1011579:	cmp    DWORD PTR [rcx],0x4550
 101157f:	jne    0x101158d
 1011581:	mov    edx,0x20b
 1011586:	cmp    WORD PTR [rcx+0x18],dx
 101158a:	sete   al
 101158d:	repz ret 
 101158f:	int3   
 1011590:	int3   
 1011591:	int3   
 1011592:	int3   
 1011593:	int3   
 1011594:	int3   
 1011595:	int3   
 1011596:	int3   
 1011597:	int3   
 1011598:	int3   
 1011599:	int3   
 101159a:	int3   
 101159b:	int3   
 101159c:	int3   
 101159d:	int3   
 101159e:	int3   
 101159f:	int3   
 10115a0:	movsxd r8,DWORD PTR [rcx+0x3c]
 10115a4:	xor    r9d,r9d
 10115a7:	mov    r10,rdx
 10115aa:	add    r8,rcx
 10115ad:	movzx  eax,WORD PTR [r8+0x14]
 10115b2:	movzx  r11d,WORD PTR [r8+0x6]
 10115b7:	lea    rcx,[rax+r8*1+0x18]
 10115bc:	test   r11d,r11d
 10115bf:	je     0x10115df
 10115c1:	mov    edx,DWORD PTR [rcx+0xc]
 10115c4:	cmp    r10,rdx
 10115c7:	jb     0x10115d3
 10115c9:	mov    eax,DWORD PTR [rcx+0x8]
 10115cc:	add    eax,edx
 10115ce:	cmp    r10,rax
 10115d1:	jb     0x10115e2
 10115d3:	inc    r9d
 10115d6:	add    rcx,0x28
 10115da:	cmp    r9d,r11d
 10115dd:	jb     0x10115c1
 10115df:	xor    eax,eax
 10115e1:	ret    
 10115e2:	mov    rax,rcx
 10115e5:	ret    
 10115e6:	int3   
 10115e7:	int3   
 10115e8:	int3   
 10115e9:	int3   
 10115ea:	int3   
 10115eb:	int3   
 10115ec:	int3   
 10115ed:	int3   
 10115ee:	int3   
 10115ef:	int3   
 10115f0:	sub    rsp,0x28
 10115f4:	mov    r8,rcx
 10115f7:	lea    r9,[rip+0xfffffffffffeea02]        # 0x1000000
 10115fe:	mov    rcx,r9
 1011601:	call   0x1011560
 1011606:	test   eax,eax
 1011608:	je     0x101162c
 101160a:	sub    r8,r9
 101160d:	mov    rdx,r8
 1011610:	mov    rcx,r9
 1011613:	call   0x10115a0
 1011618:	test   rax,rax
 101161b:	je     0x101162c
 101161d:	mov    eax,DWORD PTR [rax+0x24]
 1011620:	shr    eax,0x1f
 1011623:	not    eax
 1011625:	and    eax,0x1
 1011628:	jmp    0x101162c
 101162a:	xor    eax,eax
 101162c:	add    rsp,0x28
 1011630:	ret    
 1011631:	int3   
 1011632:	int3   
 1011633:	int3   
 1011634:	int3   
 1011635:	int3   
 1011636:	int3   
 1011637:	int3   
 1011638:	jmp    QWORD PTR [rip+0xfffffffffffefd3a]        # 0x1001378
 101163e:	int3   
 101163f:	int3   
 1011640:	int3   
 1011641:	int3   
 1011642:	int3   
 1011643:	int3   
 1011644:	jmp    QWORD PTR [rip+0xfffffffffffefd26]        # 0x1001370
 101164a:	int3   
 101164b:	int3   
 101164c:	int3   
 101164d:	int3   
 101164e:	int3   
 101164f:	int3   
 1011650:	xor    eax,eax
 1011652:	ret    
 1011653:	int3   
 1011654:	int3   
 1011655:	int3   
 1011656:	int3   
 1011657:	int3   
 1011658:	int3   
 1011659:	int3   
 101165a:	int3   
 101165b:	int3   
 101165c:	xor    eax,eax
 101165e:	ret    
 101165f:	int3   
 1011660:	int3   
 1011661:	int3   
 1011662:	int3   
 1011663:	int3   
 1011664:	int3   
 1011665:	int3   
 1011666:	int3   
 1011667:	int3   
 1011668:	mov    QWORD PTR [rsp+0x18],rbx
 101166d:	push   rdi
 101166e:	sub    rsp,0x20
 1011672:	mov    rax,QWORD PTR [rip+0x5b27]        # 0x10171a0
 1011679:	and    QWORD PTR [rsp+0x30],0x0
 101167f:	movabs rdi,0x2b992ddfa232
 1011689:	cmp    rax,rdi
 101168c:	je     0x101169a
 101168e:	not    rax
 1011691:	mov    QWORD PTR [rip+0x5b10],rax        # 0x10171a8
 1011698:	jmp    0x1011710
 101169a:	lea    rcx,[rsp+0x30]
 101169f:	call   QWORD PTR [rip+0xfffffffffffefb0b]        # 0x10011b0
 10116a5:	mov    rbx,QWORD PTR [rsp+0x30]
 10116aa:	call   QWORD PTR [rip+0xfffffffffffefba8]        # 0x1001258
 10116b0:	mov    r11d,eax
 10116b3:	xor    rbx,r11
 10116b6:	call   QWORD PTR [rip+0xfffffffffffefb7c]        # 0x1001238
 10116bc:	mov    r11d,eax
 10116bf:	xor    rbx,r11
 10116c2:	call   QWORD PTR [rip+0xfffffffffffefaf0]        # 0x10011b8
 10116c8:	lea    rcx,[rsp+0x38]
 10116cd:	mov    r11d,eax
 10116d0:	xor    rbx,r11
 10116d3:	call   QWORD PTR [rip+0xfffffffffffefae7]        # 0x10011c0
 10116d9:	mov    r11,QWORD PTR [rsp+0x38]
 10116de:	xor    r11,rbx
 10116e1:	movabs rax,0xffffffffffff
 10116eb:	and    r11,rax
 10116ee:	movabs rax,0x2b992ddfa233
 10116f8:	cmp    r11,rdi
 10116fb:	cmove  r11,rax
 10116ff:	mov    QWORD PTR [rip+0x5a9a],r11        # 0x10171a0
 1011706:	not    r11
 1011709:	mov    QWORD PTR [rip+0x5a98],r11        # 0x10171a8
 1011710:	mov    rbx,QWORD PTR [rsp+0x40]
 1011715:	add    rsp,0x20
 1011719:	pop    rdi
 101171a:	ret    
 101171b:	int3   
 101171c:	int3   
 101171d:	int3   
 101171e:	int3   
 101171f:	int3   
 1011720:	int3   
 1011721:	int3   
 1011722:	jmp    QWORD PTR [rip+0xfffffffffffefc18]        # 0x1001340
 1011728:	int3   
 1011729:	int3   
 101172a:	int3   
 101172b:	int3   
 101172c:	int3   
 101172d:	int3   
 101172e:	jmp    QWORD PTR [rip+0xfffffffffffefc04]        # 0x1001338
 1011734:	int3   
 1011735:	int3   
 1011736:	int3   
 1011737:	int3   
 1011738:	int3   
 1011739:	int3   
 101173a:	jmp    QWORD PTR [rip+0xfffffffffffefbf0]        # 0x1001330
 1011740:	int3   
 1011741:	int3   
 1011742:	int3   
 1011743:	int3   
 1011744:	int3   
 1011745:	int3   
 1011746:	int3   
 1011747:	int3   
 1011748:	mov    QWORD PTR [rsp+0x8],rcx
 101174d:	sub    rsp,0x88
 1011754:	lea    rcx,[rip+0x2c5e5]        # 0x103dd40
 101175b:	call   QWORD PTR [rip+0xfffffffffffefa1f]        # 0x1001180
 1011761:	mov    rax,QWORD PTR [rip+0x2c6d0]        # 0x103de38
 1011768:	mov    QWORD PTR [rsp+0x58],rax
 101176d:	xor    r8d,r8d
 1011770:	lea    rdx,[rsp+0x60]
 1011775:	mov    rcx,QWORD PTR [rsp+0x58]
 101177a:	call   0x1013a18
 101177f:	mov    QWORD PTR [rsp+0x50],rax
 1011784:	cmp    QWORD PTR [rsp+0x50],0x0
 101178a:	je     0x10117cd
 101178c:	mov    QWORD PTR [rsp+0x38],0x0
 1011795:	lea    rax,[rsp+0x48]
 101179a:	mov    QWORD PTR [rsp+0x30],rax
 101179f:	lea    rax,[rsp+0x40]
 10117a4:	mov    QWORD PTR [rsp+0x28],rax
 10117a9:	lea    rax,[rip+0x2c590]        # 0x103dd40
 10117b0:	mov    QWORD PTR [rsp+0x20],rax
 10117b5:	mov    r9,QWORD PTR [rsp+0x50]
 10117ba:	mov    r8,QWORD PTR [rsp+0x58]
 10117bf:	mov    rdx,QWORD PTR [rsp+0x60]
 10117c4:	xor    ecx,ecx
 10117c6:	call   0x1013a0c
 10117cb:	jmp    0x10117ef
 10117cd:	mov    rax,QWORD PTR [rsp+0x88]
 10117d5:	mov    QWORD PTR [rip+0x2c65c],rax        # 0x103de38
 10117dc:	lea    rax,[rsp+0x88]
 10117e4:	add    rax,0x8
 10117e8:	mov    QWORD PTR [rip+0x2c5e9],rax        # 0x103ddd8
 10117ef:	mov    rax,QWORD PTR [rip+0x2c642]        # 0x103de38
 10117f6:	mov    QWORD PTR [rip+0x2c4b3],rax        # 0x103dcb0
 10117fd:	mov    rax,QWORD PTR [rsp+0x90]
 1011805:	mov    QWORD PTR [rip+0x2c5b4],rax        # 0x103ddc0
 101180c:	mov    DWORD PTR [rip+0x2c48a],0xc0000409        # 0x103dca0
 1011816:	mov    DWORD PTR [rip+0x2c484],0x1        # 0x103dca4
 1011820:	mov    rax,QWORD PTR [rip+0x5979]        # 0x10171a0
 1011827:	mov    QWORD PTR [rsp+0x68],rax
 101182c:	mov    rax,QWORD PTR [rip+0x5975]        # 0x10171a8
 1011833:	mov    QWORD PTR [rsp+0x70],rax
 1011838:	call   QWORD PTR [rip+0xfffffffffffef95a]        # 0x1001198
 101183e:	mov    DWORD PTR [rip+0x2c4f4],eax        # 0x103dd38
 1011844:	mov    ecx,0x1
 1011849:	call   0x10118a4
 101184e:	xor    ecx,ecx
 1011850:	call   QWORD PTR [rip+0xfffffffffffef972]        # 0x10011c8
 1011856:	lea    rcx,[rip+0xffffffffffff541b]        # 0x1006c78
 101185d:	call   QWORD PTR [rip+0xfffffffffffef93d]        # 0x10011a0
 1011863:	cmp    DWORD PTR [rip+0x2c4ce],0x0        # 0x103dd38
 101186a:	jne    0x1011876
 101186c:	mov    ecx,0x1
 1011871:	call   0x10118a4
 1011876:	call   QWORD PTR [rip+0xfffffffffffef9e4]        # 0x1001260
 101187c:	mov    edx,0xc0000409
 1011881:	mov    rcx,rax
 1011884:	call   QWORD PTR [rip+0xfffffffffffef91e]        # 0x10011a8
 101188a:	add    rsp,0x88
 1011891:	ret    
 1011892:	int3   
 1011893:	int3   
 1011894:	int3   
 1011895:	int3   
 1011896:	int3   
 1011897:	int3   
 1011898:	jmp    QWORD PTR [rip+0xfffffffffffefa82]        # 0x1001320
 101189e:	int3   
 101189f:	int3   
 10118a0:	int3   
 10118a1:	int3   
 10118a2:	int3   
 10118a3:	int3   
 10118a4:	jmp    QWORD PTR [rip+0xfffffffffffefa6e]        # 0x1001318
 10118aa:	int3   
 10118ab:	int3   
 10118ac:	int3   
 10118ad:	int3   
 10118ae:	int3   
 10118af:	int3   
 10118b0:	jmp    QWORD PTR [rip+0xfffffffffffefc6a]        # 0x1001520
 10118b6:	int3   
 10118b7:	int3   
 10118b8:	int3   
 10118b9:	int3   
 10118ba:	int3   
 10118bb:	int3   
 10118bc:	int3   
 10118bd:	int3   
 10118be:	int3   
 10118bf:	int3   
 10118c0:	or     r9d,0xffffffff
 10118c4:	test   rdx,rdx
 10118c7:	mov    r10,rcx
 10118ca:	je     0x1011902
 10118cc:	lea    r11,[rip+0xffffffffffff53bd]        # 0x1006c90
 10118d3:	nop
 10118d4:	data16 data16 xchg ax,ax
 10118d8:	data16 data16 xchg ax,ax
 10118dc:	data16 data16 xchg ax,ax
 10118e0:	movzx  r8d,BYTE PTR [r10]
 10118e4:	mov    ecx,r9d
 10118e7:	add    r10,0x1
 10118eb:	xor    r8b,r9b
 10118ee:	shr    ecx,0x8
 10118f1:	movzx  eax,r8b
 10118f5:	mov    r9d,DWORD PTR [r11+rax*4]
 10118f9:	xor    r9d,ecx
 10118fc:	sub    rdx,0x1
 1011900:	jne    0x10118e0
 1011902:	mov    eax,r9d
 1011905:	ret    
 1011906:	int3   
 1011907:	int3   
 1011908:	int3   
 1011909:	int3   
 101190a:	int3   
 101190b:	int3   
 101190c:	int3   
 101190d:	int3   
 101190e:	int3   
 101190f:	int3   
 1011910:	sub    rsp,0x8
 1011914:	test   rcx,rcx
 1011917:	mov    r8,rcx
 101191a:	je     0x101197a
 101191c:	mov    QWORD PTR [rsp],rdi
 1011920:	or     rcx,0xffffffffffffffff
 1011924:	xor    eax,eax
 1011926:	mov    rdi,r8
 1011929:	repnz scas ax,WORD PTR es:[rdi]
 101192c:	mov    edi,0xffffffff
 1011931:	not    rcx
 1011934:	lea    r9,[rcx-0x1]
 1011938:	add    r9,r9
 101193b:	je     0x101196f
 101193d:	lea    r10,[rip+0xffffffffffff534c]        # 0x1006c90
 1011944:	data16 data16 xchg ax,ax
 1011948:	data16 data16 xchg ax,ax
 101194c:	data16 data16 xchg ax,ax
 1011950:	movzx  edx,BYTE PTR [r8]
 1011954:	mov    eax,edi
 1011956:	add    r8,0x1
 101195a:	xor    dl,dil
 101195d:	shr    eax,0x8
 1011960:	movzx  ecx,dl
 1011963:	mov    edi,DWORD PTR [r10+rcx*4]
 1011967:	xor    edi,eax
 1011969:	sub    r9,0x1
 101196d:	jne    0x1011950
 101196f:	mov    eax,edi
 1011971:	mov    rdi,QWORD PTR [rsp]
 1011975:	add    rsp,0x8
 1011979:	ret    
 101197a:	xor    eax,eax
 101197c:	add    rsp,0x8
 1011980:	ret    
 1011981:	lea    rax,[rip+0x5880]        # 0x1017208
 1011988:	jmp    0x101198d
 101198d:	mov    QWORD PTR [rsp+0x8],rcx
 1011992:	mov    QWORD PTR [rsp+0x10],rdx
 1011997:	mov    QWORD PTR [rsp+0x18],r8
 101199c:	mov    QWORD PTR [rsp+0x20],r9
 10119a1:	sub    rsp,0x68
 10119a5:	movdqa XMMWORD PTR [rsp+0x20],xmm0
 10119ab:	movdqa XMMWORD PTR [rsp+0x30],xmm1
 10119b1:	movdqa XMMWORD PTR [rsp+0x40],xmm2
 10119b7:	movdqa XMMWORD PTR [rsp+0x50],xmm3
 10119bd:	mov    rdx,rax
 10119c0:	lea    rcx,[rip+0x3489]        # 0x1014e50
 10119c7:	call   0x1013718
 10119cc:	movdqa xmm0,XMMWORD PTR [rsp+0x20]
 10119d2:	movdqa xmm1,XMMWORD PTR [rsp+0x30]
 10119d8:	movdqa xmm2,XMMWORD PTR [rsp+0x40]
 10119de:	movdqa xmm3,XMMWORD PTR [rsp+0x50]
 10119e4:	mov    rcx,QWORD PTR [rsp+0x70]
 10119e9:	mov    rdx,QWORD PTR [rsp+0x78]
 10119ee:	mov    r8,QWORD PTR [rsp+0x80]
 10119f6:	mov    r9,QWORD PTR [rsp+0x88]
 10119fe:	add    rsp,0x68
 1011a02:	jmp    0x1011a04
 1011a04:	jmp    rax
 1011a06:	int3   
 1011a07:	int3   
 1011a08:	int3   
 1011a09:	int3   
 1011a0a:	int3   
 1011a0b:	int3   
 1011a0c:	jmp    QWORD PTR [rip+0x57f6]        # 0x1017208
 1011a12:	lea    rax,[rip+0x57d7]        # 0x10171f0
 1011a19:	jmp    0x101198d
 1011a1e:	int3   
 1011a1f:	int3   
 1011a20:	int3   
 1011a21:	int3   
 1011a22:	int3   
 1011a23:	int3   
 1011a24:	jmp    QWORD PTR [rip+0x57c6]        # 0x10171f0
 1011a2a:	lea    rax,[rip+0x57c7]        # 0x10171f8
 1011a31:	jmp    0x101198d
 1011a36:	int3   
 1011a37:	int3   
 1011a38:	int3   
 1011a39:	int3   
 1011a3a:	int3   
 1011a3b:	int3   
 1011a3c:	jmp    QWORD PTR [rip+0x57b6]        # 0x10171f8
 1011a42:	lea    rax,[rip+0x57b7]        # 0x1017200
 1011a49:	jmp    0x101198d
 1011a4e:	int3   
 1011a4f:	int3   
 1011a50:	int3   
 1011a51:	int3   
 1011a52:	int3   
 1011a53:	int3   
 1011a54:	jmp    QWORD PTR [rip+0x57a6]        # 0x1017200
 1011a5a:	int3   
 1011a5b:	int3   
 1011a5c:	int3   
 1011a5d:	int3   
 1011a5e:	int3   
 1011a5f:	int3   
 1011a60:	jmp    QWORD PTR [rip+0xfffffffffffefa4a]        # 0x10014b0
 1011a66:	int3   
 1011a67:	int3   
 1011a68:	int3   
 1011a69:	int3   
 1011a6a:	int3   
 1011a6b:	int3   
 1011a6c:	jmp    QWORD PTR [rip+0xfffffffffffefa26]        # 0x1001498
 1011a72:	int3   
 1011a73:	int3   
 1011a74:	int3   
 1011a75:	int3   
 1011a76:	int3   
 1011a77:	int3   
 1011a78:	jmp    QWORD PTR [rip+0xfffffffffffefa22]        # 0x10014a0
 1011a7e:	int3   
 1011a7f:	int3   
 1011a80:	int3   
 1011a81:	int3   
 1011a82:	int3   
 1011a83:	int3   
 1011a84:	jmp    QWORD PTR [rip+0xfffffffffffefa1e]        # 0x10014a8
 1011a8a:	int3   
 1011a8b:	int3   
 1011a8c:	int3   
 1011a8d:	int3   
 1011a8e:	int3   
 1011a8f:	int3   
 1011a90:	jmp    QWORD PTR [rip+0xfffffffffffef5ea]        # 0x1001080
 1011a96:	int3   
 1011a97:	int3   
 1011a98:	int3   
 1011a99:	int3   
 1011a9a:	int3   
 1011a9b:	int3   
 1011a9c:	jmp    QWORD PTR [rip+0xfffffffffffefa4e]        # 0x10014f0
 1011aa2:	int3   
 1011aa3:	int3   
 1011aa4:	int3   
 1011aa5:	int3   
 1011aa6:	int3   
 1011aa7:	int3   
 1011aa8:	jmp    QWORD PTR [rip+0xfffffffffffefa4a]        # 0x10014f8
 1011aae:	int3   
 1011aaf:	int3   
 1011ab0:	int3   
 1011ab1:	int3   
 1011ab2:	int3   
 1011ab3:	int3   
 1011ab4:	jmp    QWORD PTR [rip+0xfffffffffffefa2e]        # 0x10014e8
 1011aba:	lea    rax,[rip+0x5757]        # 0x1017218
 1011ac1:	jmp    0x1011ac6
 1011ac6:	mov    QWORD PTR [rsp+0x8],rcx
 1011acb:	mov    QWORD PTR [rsp+0x10],rdx
 1011ad0:	mov    QWORD PTR [rsp+0x18],r8
 1011ad5:	mov    QWORD PTR [rsp+0x20],r9
 1011ada:	sub    rsp,0x68
 1011ade:	movdqa XMMWORD PTR [rsp+0x20],xmm0
 1011ae4:	movdqa XMMWORD PTR [rsp+0x30],xmm1
 1011aea:	movdqa XMMWORD PTR [rsp+0x40],xmm2
 1011af0:	movdqa XMMWORD PTR [rsp+0x50],xmm3
 1011af6:	mov    rdx,rax
 1011af9:	lea    rcx,[rip+0x3370]        # 0x1014e70
 1011b00:	call   0x1013718
 1011b05:	movdqa xmm0,XMMWORD PTR [rsp+0x20]
 1011b0b:	movdqa xmm1,XMMWORD PTR [rsp+0x30]
 1011b11:	movdqa xmm2,XMMWORD PTR [rsp+0x40]
 1011b17:	movdqa xmm3,XMMWORD PTR [rsp+0x50]
 1011b1d:	mov    rcx,QWORD PTR [rsp+0x70]
 1011b22:	mov    rdx,QWORD PTR [rsp+0x78]
 1011b27:	mov    r8,QWORD PTR [rsp+0x80]
 1011b2f:	mov    r9,QWORD PTR [rsp+0x88]
 1011b37:	add    rsp,0x68
 1011b3b:	jmp    0x1011b3d
 1011b3d:	jmp    rax
 1011b3f:	int3   
 1011b40:	int3   
 1011b41:	int3   
 1011b42:	int3   
 1011b43:	int3   
 1011b44:	int3   
 1011b45:	jmp    QWORD PTR [rip+0x56cd]        # 0x1017218
 1011b4b:	lea    rax,[rip+0x56ce]        # 0x1017220
 1011b52:	jmp    0x1011ac6
 1011b57:	int3   
 1011b58:	int3   
 1011b59:	int3   
 1011b5a:	int3   
 1011b5b:	int3   
 1011b5c:	int3   
 1011b5d:	jmp    QWORD PTR [rip+0x56bd]        # 0x1017220
 1011b63:	lea    rax,[rip+0x56be]        # 0x1017228
 1011b6a:	jmp    0x1011ac6
 1011b6f:	int3   
 1011b70:	int3   
 1011b71:	int3   
 1011b72:	int3   
 1011b73:	int3   
 1011b74:	int3   
 1011b75:	jmp    QWORD PTR [rip+0x56ad]        # 0x1017228
 1011b7b:	lea    rax,[rip+0x56ae]        # 0x1017230
 1011b82:	jmp    0x1011ac6
 1011b87:	int3   
 1011b88:	int3   
 1011b89:	int3   
 1011b8a:	int3   
 1011b8b:	int3   
 1011b8c:	int3   
 1011b8d:	jmp    QWORD PTR [rip+0x569d]        # 0x1017230
 1011b93:	lea    rax,[rip+0x569e]        # 0x1017238
 1011b9a:	jmp    0x1011ac6
 1011b9f:	int3   
 1011ba0:	int3   
 1011ba1:	int3   
 1011ba2:	int3   
 1011ba3:	int3   
 1011ba4:	int3   
 1011ba5:	jmp    QWORD PTR [rip+0x568d]        # 0x1017238
 1011bab:	int3   
 1011bac:	int3   
 1011bad:	int3   
 1011bae:	int3   
 1011baf:	int3   
 1011bb0:	int3   
 1011bb1:	int3   
 1011bb2:	int3   
 1011bb3:	int3   
 1011bb4:	int3   
 1011bb5:	int3   
 1011bb6:	int3   
 1011bb7:	int3   
 1011bb8:	int3   
 1011bb9:	int3   
 1011bba:	int3   
 1011bbb:	int3   
 1011bbc:	int3   
 1011bbd:	int3   
 1011bbe:	int3   
 1011bbf:	int3   
 1011bc0:	sub    rsp,0x308
 1011bc7:	mov    rax,QWORD PTR [rip+0x55d2]        # 0x10171a0
 1011bce:	xor    rax,rsp
 1011bd1:	mov    QWORD PTR [rsp+0x2f8],rax
 1011bd9:	mov    QWORD PTR [rsp+0x280],0x0
 1011be5:	mov    DWORD PTR [rsp+0x250],0x104
 1011bf0:	mov    DWORD PTR [rsp+0x25c],0x0
 1011bfb:	mov    QWORD PTR [rsp+0x278],0x0
 1011c07:	mov    QWORD PTR [rsp+0x260],0x0
 1011c13:	mov    QWORD PTR [rsp+0x268],0x0
 1011c1f:	mov    QWORD PTR [rsp+0x288],0x0
 1011c2b:	mov    DWORD PTR [rsp+0x258],0x0
 1011c36:	mov    DWORD PTR [rsp+0x274],0x0
 1011c41:	mov    DWORD PTR [rsp+0x254],0x409
 1011c4c:	lea    rax,[rsp+0x280]
 1011c54:	mov    QWORD PTR [rsp+0x20],rax
 1011c59:	mov    r9d,0x20019
 1011c5f:	xor    r8d,r8d
 1011c62:	lea    rdx,[rip+0xffffffffffff54a7]        # 0x1007110
 1011c69:	mov    rcx,0xffffffff80000002
 1011c70:	call   0x1012840
 1011c75:	mov    DWORD PTR [rsp+0x270],eax
 1011c7c:	cmp    DWORD PTR [rsp+0x270],0x0
 1011c84:	je     0x1011c8b
 1011c86:	jmp    0x101237c
 1011c8b:	lea    rax,[rsp+0x250]
 1011c93:	mov    QWORD PTR [rsp+0x28],rax
 1011c98:	lea    rax,[rsp+0x40]
 1011c9d:	mov    QWORD PTR [rsp+0x20],rax
 1011ca2:	xor    r9d,r9d
 1011ca5:	xor    r8d,r8d
 1011ca8:	lea    rdx,[rip+0xffffffffffff5441]        # 0x10070f0
 1011caf:	mov    rcx,QWORD PTR [rsp+0x280]
 1011cb7:	call   0x1012880
 1011cbc:	mov    DWORD PTR [rsp+0x270],eax
 1011cc3:	cmp    DWORD PTR [rsp+0x270],0x0
 1011ccb:	je     0x1011cd2
 1011ccd:	jmp    0x101237c
 1011cd2:	lea    rcx,[rip+0xfffffffffffeff57]        # 0x1001c30
 1011cd9:	call   QWORD PTR [rip+0xfffffffffffef431]        # 0x1001110
 1011cdf:	lea    rdx,[rip+0xffffffffffff53f2]        # 0x10070d8
 1011ce6:	mov    rcx,rax
 1011ce9:	call   QWORD PTR [rip+0xfffffffffffef5a9]        # 0x1001298
 1011cef:	mov    QWORD PTR [rsp+0x268],rax
 1011cf7:	lea    rcx,[rip+0xfffffffffffeff32]        # 0x1001c30
 1011cfe:	call   QWORD PTR [rip+0xfffffffffffef40c]        # 0x1001110
 1011d04:	lea    rdx,[rip+0xffffffffffff53b5]        # 0x10070c0
 1011d0b:	mov    rcx,rax
 1011d0e:	call   QWORD PTR [rip+0xfffffffffffef584]        # 0x1001298
 1011d14:	mov    QWORD PTR [rsp+0x288],rax
 1011d1c:	cmp    QWORD PTR [rsp+0x268],0x0
 1011d25:	je     0x1011d32
 1011d27:	cmp    QWORD PTR [rsp+0x288],0x0
 1011d30:	jne    0x1011d42
 1011d32:	mov    DWORD PTR [rsp+0x274],0x1
 1011d3d:	jmp    0x1011f57
 1011d42:	xor    edx,edx
 1011d44:	xor    ecx,ecx
 1011d46:	call   QWORD PTR [rsp+0x288]
 1011d4d:	mov    DWORD PTR [rsp+0x25c],eax
 1011d54:	mov    eax,DWORD PTR [rsp+0x25c]
 1011d5b:	mov    DWORD PTR [rsp+0x250],eax
 1011d62:	lea    rcx,[rsp+0x40]
 1011d67:	call   QWORD PTR [rip+0xfffffffffffef56b]        # 0x10012d8
 1011d6d:	mov    ecx,DWORD PTR [rsp+0x250]
 1011d74:	lea    eax,[rcx+rax*1+0x2]
 1011d78:	mov    DWORD PTR [rsp+0x250],eax
 1011d7f:	cmp    QWORD PTR [rsp+0x278],0x0
 1011d88:	je     0x1011e1f
 1011d8e:	mov    QWORD PTR [rsp+0x290],0x0
 1011d9a:	mov    eax,DWORD PTR [rsp+0x250]
 1011da1:	shl    rax,1
 1011da4:	mov    QWORD PTR [rsp+0x2c8],rax
 1011dac:	call   QWORD PTR [rip+0xfffffffffffef51e]        # 0x10012d0
 1011db2:	mov    rcx,QWORD PTR [rsp+0x2c8]
 1011dba:	mov    r9,rcx
 1011dbd:	mov    r8,QWORD PTR [rsp+0x278]
 1011dc5:	mov    edx,0x8
 1011dca:	mov    rcx,rax
 1011dcd:	call   QWORD PTR [rip+0xfffffffffffef4e5]        # 0x10012b8
 1011dd3:	mov    QWORD PTR [rsp+0x290],rax
 1011ddb:	cmp    QWORD PTR [rsp+0x290],0x0
 1011de4:	jne    0x1011e0d
 1011de6:	call   QWORD PTR [rip+0xfffffffffffef4e4]        # 0x10012d0
 1011dec:	mov    r8,QWORD PTR [rsp+0x278]
 1011df4:	xor    edx,edx
 1011df6:	mov    rcx,rax
 1011df9:	call   QWORD PTR [rip+0xfffffffffffef401]        # 0x1001200
 1011dff:	mov    QWORD PTR [rsp+0x278],0x0
 1011e0b:	jmp    0x1011e1d
 1011e0d:	mov    rax,QWORD PTR [rsp+0x290]
 1011e15:	mov    QWORD PTR [rsp+0x278],rax
 1011e1d:	jmp    0x1011e58
 1011e1f:	mov    eax,DWORD PTR [rsp+0x250]
 1011e26:	shl    rax,1
 1011e29:	mov    QWORD PTR [rsp+0x2d0],rax
 1011e31:	call   QWORD PTR [rip+0xfffffffffffef499]        # 0x10012d0
 1011e37:	mov    rcx,QWORD PTR [rsp+0x2d0]
 1011e3f:	mov    r8,rcx
 1011e42:	mov    edx,0x8
 1011e47:	mov    rcx,rax
 1011e4a:	call   QWORD PTR [rip+0xfffffffffffef328]        # 0x1001178
 1011e50:	mov    QWORD PTR [rsp+0x278],rax
 1011e58:	cmp    QWORD PTR [rsp+0x278],0x0
 1011e61:	je     0x1011e80
 1011e63:	mov    rdx,QWORD PTR [rsp+0x278]
 1011e6b:	mov    ecx,DWORD PTR [rsp+0x250]
 1011e72:	call   QWORD PTR [rsp+0x288]
 1011e79:	mov    DWORD PTR [rsp+0x25c],eax
 1011e80:	cmp    QWORD PTR [rsp+0x278],0x0
 1011e89:	je     0x1011e9f
 1011e8b:	mov    eax,DWORD PTR [rsp+0x250]
 1011e92:	cmp    DWORD PTR [rsp+0x25c],eax
 1011e99:	jae    0x1011d42
 1011e9f:	cmp    QWORD PTR [rsp+0x278],0x0
 1011ea8:	je     0x1011eb9
 1011eaa:	mov    rax,QWORD PTR [rsp+0x278]
 1011eb2:	movzx  eax,WORD PTR [rax]
 1011eb5:	test   eax,eax
 1011eb7:	jne    0x1011ee3
 1011eb9:	lea    rcx,[rsp+0x40]
 1011ebe:	call   QWORD PTR [rsp+0x268]
 1011ec5:	mov    DWORD PTR [rsp+0x258],eax
 1011ecc:	cmp    DWORD PTR [rsp+0x258],0x0
 1011ed4:	jne    0x1011ee1
 1011ed6:	mov    DWORD PTR [rsp+0x274],0x1
 1011ee1:	jmp    0x1011f57
 1011ee3:	mov    DWORD PTR [rsp+0x28],0xffffffff
 1011eeb:	lea    rax,[rsp+0x40]
 1011ef0:	mov    QWORD PTR [rsp+0x20],rax
 1011ef5:	mov    r9d,0xffffffff
 1011efb:	mov    r8,QWORD PTR [rsp+0x278]
 1011f03:	mov    edx,0x1
 1011f08:	mov    ecx,DWORD PTR [rsp+0x254]
 1011f0f:	call   QWORD PTR [rip+0xfffffffffffef39b]        # 0x10012b0
 1011f15:	cmp    eax,0x2
 1011f18:	je     0x1011f4c
 1011f1a:	mov    DWORD PTR [rsp+0x274],0x1
 1011f25:	call   QWORD PTR [rip+0xfffffffffffef3a5]        # 0x10012d0
 1011f2b:	mov    r8,QWORD PTR [rsp+0x278]
 1011f33:	xor    edx,edx
 1011f35:	mov    rcx,rax
 1011f38:	call   QWORD PTR [rip+0xfffffffffffef2c2]        # 0x1001200
 1011f3e:	mov    QWORD PTR [rsp+0x278],0x0
 1011f4a:	jmp    0x1011f57
 1011f4c:	mov    DWORD PTR [rsp+0x258],0x1
 1011f57:	cmp    DWORD PTR [rsp+0x274],0x0
 1011f5f:	je     0x101237c
 1011f65:	xor    r8d,r8d
 1011f68:	xor    edx,edx
 1011f6a:	lea    rcx,[rip+0xffffffffffff513f]        # 0x10070b0
 1011f71:	call   QWORD PTR [rip+0xfffffffffffef331]        # 0x10012a8
 1011f77:	mov    DWORD PTR [rsp+0x25c],eax
 1011f7e:	mov    eax,DWORD PTR [rsp+0x25c]
 1011f85:	mov    DWORD PTR [rsp+0x250],eax
 1011f8c:	cmp    DWORD PTR [rsp+0x250],0x0
 1011f94:	jne    0x1011fb4
 1011f96:	lea    rdx,[rsp+0x40]
 1011f9b:	lea    rcx,[rip+0xffffffffffff510e]        # 0x10070b0
 1011fa2:	call   QWORD PTR [rip+0xfffffffffffef2f8]        # 0x10012a0
 1011fa8:	mov    DWORD PTR [rsp+0x258],eax
 1011faf:	jmp    0x101237c
 1011fb4:	mov    DWORD PTR [rsp+0x2a8],0x0
 1011fbf:	mov    QWORD PTR [rsp+0x2a0],0x0
 1011fcb:	mov    DWORD PTR [rsp+0x298],0x0
 1011fd6:	lea    rcx,[rsp+0x40]
 1011fdb:	call   QWORD PTR [rip+0xfffffffffffef2f7]        # 0x10012d8
 1011fe1:	add    eax,0x1
 1011fe4:	mov    DWORD PTR [rsp+0x29c],eax
 1011feb:	mov    eax,DWORD PTR [rsp+0x25c]
 1011ff2:	mov    DWORD PTR [rsp+0x250],eax
 1011ff9:	lea    rcx,[rsp+0x40]
 1011ffe:	call   QWORD PTR [rip+0xfffffffffffef2d4]        # 0x10012d8
 1012004:	mov    ecx,DWORD PTR [rsp+0x250]
 101200b:	lea    eax,[rcx+rax*1+0x2]
 101200f:	mov    DWORD PTR [rsp+0x250],eax
 1012016:	cmp    QWORD PTR [rsp+0x278],0x0
 101201f:	je     0x10120b6
 1012025:	mov    QWORD PTR [rsp+0x2b0],0x0
 1012031:	mov    eax,DWORD PTR [rsp+0x250]
 1012038:	shl    rax,1
 101203b:	mov    QWORD PTR [rsp+0x2d8],rax
 1012043:	call   QWORD PTR [rip+0xfffffffffffef287]        # 0x10012d0
 1012049:	mov    rcx,QWORD PTR [rsp+0x2d8]
 1012051:	mov    r9,rcx
 1012054:	mov    r8,QWORD PTR [rsp+0x278]
 101205c:	mov    edx,0x8
 1012061:	mov    rcx,rax
 1012064:	call   QWORD PTR [rip+0xfffffffffffef24e]        # 0x10012b8
 101206a:	mov    QWORD PTR [rsp+0x2b0],rax
 1012072:	cmp    QWORD PTR [rsp+0x2b0],0x0
 101207b:	jne    0x10120a4
 101207d:	call   QWORD PTR [rip+0xfffffffffffef24d]        # 0x10012d0
 1012083:	mov    r8,QWORD PTR [rsp+0x278]
 101208b:	xor    edx,edx
 101208d:	mov    rcx,rax
 1012090:	call   QWORD PTR [rip+0xfffffffffffef16a]        # 0x1001200
 1012096:	mov    QWORD PTR [rsp+0x278],0x0
 10120a2:	jmp    0x10120b4
 10120a4:	mov    rax,QWORD PTR [rsp+0x2b0]
 10120ac:	mov    QWORD PTR [rsp+0x278],rax
 10120b4:	jmp    0x10120ef
 10120b6:	mov    eax,DWORD PTR [rsp+0x250]
 10120bd:	shl    rax,1
 10120c0:	mov    QWORD PTR [rsp+0x2e0],rax
 10120c8:	call   QWORD PTR [rip+0xfffffffffffef202]        # 0x10012d0
 10120ce:	mov    rcx,QWORD PTR [rsp+0x2e0]
 10120d6:	mov    r8,rcx
 10120d9:	mov    edx,0x8
 10120de:	mov    rcx,rax
 10120e1:	call   QWORD PTR [rip+0xfffffffffffef091]        # 0x1001178
 10120e7:	mov    QWORD PTR [rsp+0x278],rax
 10120ef:	cmp    QWORD PTR [rsp+0x278],0x0
 10120f8:	je     0x101211e
 10120fa:	mov    r8d,DWORD PTR [rsp+0x250]
 1012102:	mov    rdx,QWORD PTR [rsp+0x278]
 101210a:	lea    rcx,[rip+0xffffffffffff4f9f]        # 0x10070b0
 1012111:	call   QWORD PTR [rip+0xfffffffffffef191]        # 0x10012a8
 1012117:	mov    DWORD PTR [rsp+0x25c],eax
 101211e:	cmp    QWORD PTR [rsp+0x278],0x0
 1012127:	je     0x101213d
 1012129:	mov    eax,DWORD PTR [rsp+0x250]
 1012130:	cmp    DWORD PTR [rsp+0x25c],eax
 1012137:	jae    0x1011feb
 101213d:	mov    rax,QWORD PTR [rsp+0x278]
 1012145:	mov    QWORD PTR [rsp+0x2a0],rax
 101214d:	mov    eax,DWORD PTR [rsp+0x25c]
 1012154:	add    eax,0x1
 1012157:	mov    DWORD PTR [rsp+0x298],eax
 101215e:	cmp    DWORD PTR [rsp+0x2a8],0x0
 1012166:	jne    0x101229a
 101216c:	mov    eax,DWORD PTR [rsp+0x29c]
 1012173:	cmp    DWORD PTR [rsp+0x298],eax
 101217a:	jb     0x101229a
 1012180:	mov    DWORD PTR [rsp+0x2bc],0x0
 101218b:	mov    DWORD PTR [rsp+0x2b8],0x0
 1012196:	mov    WORD PTR [rsp+0x2c0],0x0
 10121a0:	mov    eax,DWORD PTR [rsp+0x2bc]
 10121a7:	mov    rcx,QWORD PTR [rsp+0x2a0]
 10121af:	movzx  eax,WORD PTR [rcx+rax*2]
 10121b3:	mov    WORD PTR [rsp+0x2c0],ax
 10121bb:	movzx  eax,WORD PTR [rsp+0x2c0]
 10121c3:	mov    ecx,DWORD PTR [rsp+0x2bc]
 10121ca:	movzx  ecx,WORD PTR [rsp+rcx*2+0x40]
 10121cf:	cmp    eax,ecx
 10121d1:	jne    0x10121e0
 10121d3:	mov    DWORD PTR [rsp+0x2e8],0x1
 10121de:	jmp    0x10121eb
 10121e0:	mov    DWORD PTR [rsp+0x2e8],0x0
 10121eb:	mov    eax,DWORD PTR [rsp+0x2e8]
 10121f2:	mov    DWORD PTR [rsp+0x2b8],eax
 10121f9:	cmp    DWORD PTR [rsp+0x2b8],0x0
 1012201:	je     0x101222e
 1012203:	mov    eax,DWORD PTR [rsp+0x29c]
 101220a:	sub    eax,0x1
 101220d:	cmp    DWORD PTR [rsp+0x2bc],eax
 1012214:	jne    0x1012218
 1012216:	jmp    0x101222e
 1012218:	mov    eax,DWORD PTR [rsp+0x2bc]
 101221f:	add    eax,0x1
 1012222:	mov    DWORD PTR [rsp+0x2bc],eax
 1012229:	jmp    0x10121a0
 101222e:	cmp    DWORD PTR [rsp+0x2b8],0x0
 1012236:	je     0x1012245
 1012238:	mov    DWORD PTR [rsp+0x2a8],0x1
 1012243:	jmp    0x1012270
 1012245:	mov    eax,DWORD PTR [rsp+0x29c]
 101224c:	sub    eax,0x1
 101224f:	cmp    DWORD PTR [rsp+0x2bc],eax
 1012256:	jne    0x1012270
 1012258:	movzx  eax,WORD PTR [rsp+0x2c0]
 1012260:	cmp    eax,0x3b
 1012263:	jne    0x1012270
 1012265:	mov    DWORD PTR [rsp+0x2a8],0x1
 1012270:	mov    rax,QWORD PTR [rsp+0x2a0]
 1012278:	add    rax,0x2
 101227c:	mov    QWORD PTR [rsp+0x2a0],rax
 1012284:	mov    eax,DWORD PTR [rsp+0x298]
 101228b:	sub    eax,0x1
 101228e:	mov    DWORD PTR [rsp+0x298],eax
 1012295:	jmp    0x101215e
 101229a:	cmp    DWORD PTR [rsp+0x2a8],0x0
 10122a2:	je     0x10122b4
 10122a4:	mov    DWORD PTR [rsp+0x258],0x1
 10122af:	jmp    0x101237c
 10122b4:	mov    eax,DWORD PTR [rsp+0x250]
 10122bb:	shl    rax,1
 10122be:	mov    QWORD PTR [rsp+0x2f0],rax
 10122c6:	call   QWORD PTR [rip+0xfffffffffffef004]        # 0x10012d0
 10122cc:	mov    rcx,QWORD PTR [rsp+0x2f0]
 10122d4:	mov    r8,rcx
 10122d7:	mov    edx,0x8
 10122dc:	mov    rcx,rax
 10122df:	call   QWORD PTR [rip+0xfffffffffffeee93]        # 0x1001178
 10122e5:	mov    QWORD PTR [rsp+0x260],rax
 10122ed:	cmp    QWORD PTR [rsp+0x278],0x0
 10122f6:	je     0x101237c
 10122fc:	cmp    QWORD PTR [rsp+0x260],0x0
 1012305:	je     0x101237c
 1012307:	mov    eax,DWORD PTR [rsp+0x250]
 101230e:	lea    r8,[rsp+0x40]
 1012313:	mov    rdx,rax
 1012316:	mov    rcx,QWORD PTR [rsp+0x260]
 101231e:	call   0x10124b0
 1012323:	mov    eax,DWORD PTR [rsp+0x250]
 101232a:	lea    r8,[rip+0xffffffffffff4d77]        # 0x10070a8
 1012331:	mov    rdx,rax
 1012334:	mov    rcx,QWORD PTR [rsp+0x260]
 101233c:	call   0x1012520
 1012341:	mov    eax,DWORD PTR [rsp+0x250]
 1012348:	mov    r8,QWORD PTR [rsp+0x278]
 1012350:	mov    rdx,rax
 1012353:	mov    rcx,QWORD PTR [rsp+0x260]
 101235b:	call   0x1012520
 1012360:	mov    rdx,QWORD PTR [rsp+0x260]
 1012368:	lea    rcx,[rip+0xffffffffffff4d41]        # 0x10070b0
 101236f:	call   QWORD PTR [rip+0xfffffffffffeef2b]        # 0x10012a0
 1012375:	mov    DWORD PTR [rsp+0x258],eax
 101237c:	cmp    QWORD PTR [rsp+0x278],0x0
 1012385:	je     0x10123ac
 1012387:	call   QWORD PTR [rip+0xfffffffffffeef43]        # 0x10012d0
 101238d:	mov    r8,QWORD PTR [rsp+0x278]
 1012395:	xor    edx,edx
 1012397:	mov    rcx,rax
 101239a:	call   QWORD PTR [rip+0xfffffffffffeee60]        # 0x1001200
 10123a0:	mov    QWORD PTR [rsp+0x278],0x0
 10123ac:	cmp    QWORD PTR [rsp+0x260],0x0
 10123b5:	je     0x10123dc
 10123b7:	call   QWORD PTR [rip+0xfffffffffffeef13]        # 0x10012d0
 10123bd:	mov    r8,QWORD PTR [rsp+0x260]
 10123c5:	xor    edx,edx
 10123c7:	mov    rcx,rax
 10123ca:	call   QWORD PTR [rip+0xfffffffffffeee30]        # 0x1001200
 10123d0:	mov    QWORD PTR [rsp+0x260],0x0
 10123dc:	cmp    QWORD PTR [rsp+0x280],0x0
 10123e5:	je     0x10123f4
 10123e7:	mov    rcx,QWORD PTR [rsp+0x280]
 10123ef:	call   0x1013450
 10123f4:	mov    eax,DWORD PTR [rsp+0x258]
 10123fb:	mov    rcx,QWORD PTR [rsp+0x2f8]
 1012403:	xor    rcx,rsp
 1012406:	call   0x1011420
 101240b:	add    rsp,0x308
 1012412:	ret    
 1012413:	int3   
 1012414:	int3   
 1012415:	int3   
 1012416:	int3   
 1012417:	int3   
 1012418:	int3   
 1012419:	int3   
 101241a:	int3   
 101241b:	int3   
 101241c:	int3   
 101241d:	int3   
 101241e:	int3   
 101241f:	int3   
 1012420:	rex push rbp
 1012422:	sub    rsp,0x30
 1012426:	mov    rbp,rdx
 1012429:	cmp    QWORD PTR [rbp+0x278],0x0
 1012431:	je     0x1012456
 1012433:	call   QWORD PTR [rip+0xfffffffffffeee97]        # 0x10012d0
 1012439:	mov    r8,QWORD PTR [rbp+0x278]
 1012440:	xor    edx,edx
 1012442:	mov    rcx,rax
 1012445:	call   QWORD PTR [rip+0xfffffffffffeedb5]        # 0x1001200
 101244b:	mov    QWORD PTR [rbp+0x278],0x0
 1012456:	cmp    QWORD PTR [rbp+0x260],0x0
 101245e:	je     0x1012483
 1012460:	call   QWORD PTR [rip+0xfffffffffffeee6a]        # 0x10012d0
 1012466:	mov    r8,QWORD PTR [rbp+0x260]
 101246d:	xor    edx,edx
 101246f:	mov    rcx,rax
 1012472:	call   QWORD PTR [rip+0xfffffffffffeed88]        # 0x1001200
 1012478:	mov    QWORD PTR [rbp+0x260],0x0
 1012483:	cmp    QWORD PTR [rbp+0x280],0x0
 101248b:	je     0x1012499
 101248d:	mov    rcx,QWORD PTR [rbp+0x280]
 1012494:	call   0x1013450
 1012499:	add    rsp,0x30
 101249d:	pop    rbp
 101249e:	ret    
 101249f:	int3   
 10124a0:	int3   
 10124a1:	int3   
 10124a2:	int3   
 10124a3:	int3   
 10124a4:	int3   
 10124a5:	int3   
 10124a6:	int3   
 10124a7:	int3   
 10124a8:	int3   
 10124a9:	int3   
 10124aa:	int3   
 10124ab:	int3   
 10124ac:	int3   
 10124ad:	int3   
 10124ae:	int3   
 10124af:	int3   
 10124b0:	mov    QWORD PTR [rsp+0x18],r8
 10124b5:	mov    QWORD PTR [rsp+0x10],rdx
 10124ba:	mov    QWORD PTR [rsp+0x8],rcx
 10124bf:	sub    rsp,0x48
 10124c3:	mov    r8d,0x7fffffff
 10124c9:	mov    rdx,QWORD PTR [rsp+0x58]
 10124ce:	mov    rcx,QWORD PTR [rsp+0x50]
 10124d3:	call   0x10125b0
 10124d8:	mov    DWORD PTR [rsp+0x30],eax
 10124dc:	cmp    DWORD PTR [rsp+0x30],0x0
 10124e1:	jl     0x1012507
 10124e3:	mov    QWORD PTR [rsp+0x20],0x7ffffffe
 10124ec:	mov    r9,QWORD PTR [rsp+0x60]
 10124f1:	xor    r8d,r8d
 10124f4:	mov    rdx,QWORD PTR [rsp+0x58]
 10124f9:	mov    rcx,QWORD PTR [rsp+0x50]
 10124fe:	call   0x1012720
 1012503:	mov    DWORD PTR [rsp+0x30],eax
 1012507:	mov    eax,DWORD PTR [rsp+0x30]
 101250b:	add    rsp,0x48
 101250f:	ret    
 1012510:	int3   
 1012511:	int3   
 1012512:	int3   
 1012513:	int3   
 1012514:	int3   
 1012515:	int3   
 1012516:	int3   
 1012517:	int3   
 1012518:	int3   
 1012519:	int3   
 101251a:	int3   
 101251b:	int3   
 101251c:	int3   
 101251d:	int3   
 101251e:	int3   
 101251f:	int3   
 1012520:	mov    QWORD PTR [rsp+0x18],r8
 1012525:	mov    QWORD PTR [rsp+0x10],rdx
 101252a:	mov    QWORD PTR [rsp+0x8],rcx
 101252f:	sub    rsp,0x48
 1012533:	mov    r9d,0x7fffffff
 1012539:	lea    r8,[rsp+0x38]
 101253e:	mov    rdx,QWORD PTR [rsp+0x58]
 1012543:	mov    rcx,QWORD PTR [rsp+0x50]
 1012548:	call   0x1012600
 101254d:	mov    DWORD PTR [rsp+0x30],eax
 1012551:	cmp    DWORD PTR [rsp+0x30],0x0
 1012556:	jl     0x1012593
 1012558:	mov    rax,QWORD PTR [rsp+0x38]
 101255d:	mov    rcx,QWORD PTR [rsp+0x58]
 1012562:	sub    rcx,rax
 1012565:	mov    rax,rcx
 1012568:	mov    rcx,QWORD PTR [rsp+0x50]
 101256d:	mov    rdx,QWORD PTR [rsp+0x38]
 1012572:	lea    rcx,[rcx+rdx*2]
 1012576:	mov    QWORD PTR [rsp+0x20],0x7fffffff
 101257f:	mov    r9,QWORD PTR [rsp+0x60]
 1012584:	xor    r8d,r8d
 1012587:	mov    rdx,rax
 101258a:	call   0x1012720
 101258f:	mov    DWORD PTR [rsp+0x30],eax
 1012593:	mov    eax,DWORD PTR [rsp+0x30]
 1012597:	add    rsp,0x48
 101259b:	ret    
 101259c:	int3   
 101259d:	int3   
 101259e:	int3   
 101259f:	int3   
 10125a0:	int3   
 10125a1:	int3   
 10125a2:	int3   
 10125a3:	int3   
 10125a4:	int3   
 10125a5:	int3   
 10125a6:	int3   
 10125a7:	int3   
 10125a8:	int3   
 10125a9:	int3   
 10125aa:	int3   
 10125ab:	int3   
 10125ac:	int3   
 10125ad:	int3   
 10125ae:	int3   
 10125af:	int3   
 10125b0:	mov    QWORD PTR [rsp+0x18],r8
 10125b5:	mov    QWORD PTR [rsp+0x10],rdx
 10125ba:	mov    QWORD PTR [rsp+0x8],rcx
 10125bf:	sub    rsp,0x18
 10125c3:	mov    DWORD PTR [rsp],0x0
 10125ca:	cmp    QWORD PTR [rsp+0x28],0x0
 10125d0:	je     0x10125de
 10125d2:	mov    rax,QWORD PTR [rsp+0x30]
 10125d7:	cmp    QWORD PTR [rsp+0x28],rax
 10125dc:	jbe    0x10125e5
 10125de:	mov    DWORD PTR [rsp],0x80070057
 10125e5:	mov    eax,DWORD PTR [rsp]
 10125e8:	add    rsp,0x18
 10125ec:	ret    
 10125ed:	int3   
 10125ee:	int3   
 10125ef:	int3   
 10125f0:	int3   
 10125f1:	int3   
 10125f2:	int3   
 10125f3:	int3   
 10125f4:	int3   
 10125f5:	int3   
 10125f6:	int3   
 10125f7:	int3   
 10125f8:	int3   
 10125f9:	int3   
 10125fa:	int3   
 10125fb:	int3   
 10125fc:	int3   
 10125fd:	int3   
 10125fe:	int3   
 10125ff:	int3   
 1012600:	mov    QWORD PTR [rsp+0x20],r9
 1012605:	mov    QWORD PTR [rsp+0x18],r8
 101260a:	mov    QWORD PTR [rsp+0x10],rdx
 101260f:	mov    QWORD PTR [rsp+0x8],rcx
 1012614:	sub    rsp,0x38
 1012618:	mov    r8,QWORD PTR [rsp+0x58]
 101261d:	mov    rdx,QWORD PTR [rsp+0x48]
 1012622:	mov    rcx,QWORD PTR [rsp+0x40]
 1012627:	call   0x10125b0
 101262c:	mov    DWORD PTR [rsp+0x20],eax
 1012630:	cmp    DWORD PTR [rsp+0x20],0x0
 1012635:	jl     0x1012651
 1012637:	mov    r8,QWORD PTR [rsp+0x50]
 101263c:	mov    rdx,QWORD PTR [rsp+0x48]
 1012641:	mov    rcx,QWORD PTR [rsp+0x40]
 1012646:	call   0x1012670
 101264b:	mov    DWORD PTR [rsp+0x20],eax
 101264f:	jmp    0x101265d
 1012651:	mov    rax,QWORD PTR [rsp+0x50]
 1012656:	mov    QWORD PTR [rax],0x0
 101265d:	mov    eax,DWORD PTR [rsp+0x20]
 1012661:	add    rsp,0x38
 1012665:	ret    
 1012666:	int3   
 1012667:	int3   
 1012668:	int3   
 1012669:	int3   
 101266a:	int3   
 101266b:	int3   
 101266c:	int3   
 101266d:	int3   
 101266e:	int3   
 101266f:	int3   
 1012670:	mov    QWORD PTR [rsp+0x18],r8
 1012675:	mov    QWORD PTR [rsp+0x10],rdx
 101267a:	mov    QWORD PTR [rsp+0x8],rcx
 101267f:	sub    rsp,0x18
 1012683:	mov    DWORD PTR [rsp+0x8],0x0
 101268b:	mov    rax,QWORD PTR [rsp+0x28]
 1012690:	mov    QWORD PTR [rsp],rax
 1012694:	cmp    QWORD PTR [rsp+0x28],0x0
 101269a:	je     0x10126c6
 101269c:	mov    rax,QWORD PTR [rsp+0x20]
 10126a1:	movzx  eax,WORD PTR [rax]
 10126a4:	test   eax,eax
 10126a6:	je     0x10126c6
 10126a8:	mov    rax,QWORD PTR [rsp+0x20]
 10126ad:	add    rax,0x2
 10126b1:	mov    QWORD PTR [rsp+0x20],rax
 10126b6:	mov    rax,QWORD PTR [rsp+0x28]
 10126bb:	sub    rax,0x1
 10126bf:	mov    QWORD PTR [rsp+0x28],rax
 10126c4:	jmp    0x1012694
 10126c6:	cmp    QWORD PTR [rsp+0x28],0x0
 10126cc:	jne    0x10126d6
 10126ce:	mov    DWORD PTR [rsp+0x8],0x80070057
 10126d6:	cmp    QWORD PTR [rsp+0x30],0x0
 10126dc:	je     0x101270a
 10126de:	cmp    DWORD PTR [rsp+0x8],0x0
 10126e3:	jl     0x10126fe
 10126e5:	mov    rax,QWORD PTR [rsp+0x28]
 10126ea:	mov    rcx,QWORD PTR [rsp]
 10126ee:	sub    rcx,rax
 10126f1:	mov    rax,rcx
 10126f4:	mov    rcx,QWORD PTR [rsp+0x30]
 10126f9:	mov    QWORD PTR [rcx],rax
 10126fc:	jmp    0x101270a
 10126fe:	mov    rax,QWORD PTR [rsp+0x30]
 1012703:	mov    QWORD PTR [rax],0x0
 101270a:	mov    eax,DWORD PTR [rsp+0x8]
 101270e:	add    rsp,0x18
 1012712:	ret    
 1012713:	int3   
 1012714:	int3   
 1012715:	int3   
 1012716:	int3   
 1012717:	int3   
 1012718:	int3   
 1012719:	int3   
 101271a:	int3   
 101271b:	int3   
 101271c:	int3   
 101271d:	int3   
 101271e:	int3   
 101271f:	int3   
 1012720:	mov    QWORD PTR [rsp+0x20],r9
 1012725:	mov    QWORD PTR [rsp+0x18],r8
 101272a:	mov    QWORD PTR [rsp+0x10],rdx
 101272f:	mov    QWORD PTR [rsp+0x8],rcx
 1012734:	sub    rsp,0x18
 1012738:	mov    DWORD PTR [rsp+0x8],0x0
 1012740:	mov    QWORD PTR [rsp],0x0
 1012748:	cmp    QWORD PTR [rsp+0x28],0x0
 101274e:	je     0x10127ba
 1012750:	cmp    QWORD PTR [rsp+0x40],0x0
 1012756:	je     0x10127ba
 1012758:	mov    rax,QWORD PTR [rsp+0x38]
 101275d:	movzx  eax,WORD PTR [rax]
 1012760:	test   eax,eax
 1012762:	je     0x10127ba
 1012764:	mov    rax,QWORD PTR [rsp+0x20]
 1012769:	mov    rcx,QWORD PTR [rsp+0x38]
 101276e:	movzx  ecx,WORD PTR [rcx]
 1012771:	mov    WORD PTR [rax],cx
 1012774:	mov    rax,QWORD PTR [rsp+0x20]
 1012779:	add    rax,0x2
 101277d:	mov    QWORD PTR [rsp+0x20],rax
 1012782:	mov    rax,QWORD PTR [rsp+0x38]
 1012787:	add    rax,0x2
 101278b:	mov    QWORD PTR [rsp+0x38],rax
 1012790:	mov    rax,QWORD PTR [rsp+0x28]
 1012795:	sub    rax,0x1
 1012799:	mov    QWORD PTR [rsp+0x28],rax
 101279e:	mov    rax,QWORD PTR [rsp+0x40]
 10127a3:	sub    rax,0x1
 10127a7:	mov    QWORD PTR [rsp+0x40],rax
 10127ac:	mov    rax,QWORD PTR [rsp]
 10127b0:	add    rax,0x1
 10127b4:	mov    QWORD PTR [rsp],rax
 10127b8:	jmp    0x1012748
 10127ba:	cmp    QWORD PTR [rsp+0x28],0x0
 10127c0:	jne    0x10127e4
 10127c2:	mov    rax,QWORD PTR [rsp+0x20]
 10127c7:	sub    rax,0x2
 10127cb:	mov    QWORD PTR [rsp+0x20],rax
 10127d0:	mov    rax,QWORD PTR [rsp]
 10127d4:	sub    rax,0x1
 10127d8:	mov    QWORD PTR [rsp],rax
 10127dc:	mov    DWORD PTR [rsp+0x8],0x8007007a
 10127e4:	mov    rax,QWORD PTR [rsp+0x20]
 10127e9:	mov    WORD PTR [rax],0x0
 10127ee:	cmp    QWORD PTR [rsp+0x30],0x0
 10127f4:	je     0x1012802
 10127f6:	mov    rax,QWORD PTR [rsp+0x30]
 10127fb:	mov    rcx,QWORD PTR [rsp]
 10127ff:	mov    QWORD PTR [rax],rcx
 1012802:	mov    eax,DWORD PTR [rsp+0x8]
 1012806:	add    rsp,0x18
 101280a:	ret    
 101280b:	int3   
 101280c:	int3   
 101280d:	int3   
 101280e:	int3   
 101280f:	int3   
 1012810:	int3   
 1012811:	int3   
 1012812:	int3   
 1012813:	int3   
 1012814:	int3   
 1012815:	int3   
 1012816:	int3   
 1012817:	int3   
 1012818:	int3   
 1012819:	int3   
 101281a:	int3   
 101281b:	int3   
 101281c:	int3   
 101281d:	int3   
 101281e:	int3   
 101281f:	int3   
 1012820:	mov    QWORD PTR [rsp+0x8],rcx
 1012825:	mov    QWORD PTR [rsp+0x10],rdx
 101282a:	mov    QWORD PTR [rsp+0x18],r8
 101282f:	mov    QWORD PTR [rsp+0x20],r9
 1012834:	ret    
 1012835:	int3   
 1012836:	int3   
 1012837:	int3   
 1012838:	int3   
 1012839:	int3   
 101283a:	int3   
 101283b:	int3   
 101283c:	int3   
 101283d:	int3   
 101283e:	int3   
 101283f:	int3   
 1012840:	sub    rsp,0x38
 1012844:	cmp    DWORD PTR [rip+0x2b9e5],0x0        # 0x103e230
 101284b:	je     0x101285b
 101284d:	mov    r8,QWORD PTR [rsp+0x60]
 1012852:	add    rsp,0x38
 1012856:	jmp    0x10135f0
 101285b:	mov    rax,QWORD PTR [rsp+0x60]
 1012860:	mov    QWORD PTR [rsp+0x20],rax
 1012865:	call   QWORD PTR [rip+0xfffffffffffee7b5]        # 0x1001020
 101286b:	add    rsp,0x38
 101286f:	ret    
 1012870:	int3   
 1012871:	int3   
 1012872:	int3   
 1012873:	int3   
 1012874:	int3   
 1012875:	int3   
 1012876:	int3   
 1012877:	int3   
 1012878:	int3   
 1012879:	int3   
 101287a:	int3   
 101287b:	int3   
 101287c:	int3   
 101287d:	int3   
 101287e:	int3   
 101287f:	int3   
 1012880:	mov    QWORD PTR [rsp+0x20],r9
 1012885:	push   rbx
 1012886:	push   r14
 1012888:	sub    rsp,0x58
 101288c:	cmp    DWORD PTR [rip+0x2b99d],0x0        # 0x103e230
 1012893:	mov    r14,r9
 1012896:	mov    rbx,rdx
 1012899:	je     0x1012b7b
 101289f:	mov    QWORD PTR [rsp+0x70],rbp
 10128a4:	mov    QWORD PTR [rsp+0x78],rsi
 10128a9:	call   0x1012e70
 10128ae:	test   rbx,rbx
 10128b1:	je     0x10128b9
 10128b3:	cmp    WORD PTR [rbx],0x0
 10128b7:	jne    0x10128c0
 10128b9:	lea    rbx,[rip+0xffffffffffff4ad4]        # 0x1007394
 10128c0:	mov    rdx,rbx
 10128c3:	mov    rcx,rax
 10128c6:	call   0x1013280
 10128cb:	mov    rsi,rax
 10128ce:	test   rax,rax
 10128d1:	je     0x1012b5a
 10128d7:	mov    eax,0xffff
 10128dc:	cmp    WORD PTR [rsi],ax
 10128df:	jne    0x10128f2
 10128e1:	cmp    WORD PTR [rsi+0x2],0x0
 10128e6:	jne    0x10128f2
 10128e8:	mov    ebp,0x2
 10128ed:	jmp    0x1012b44
 10128f2:	mov    QWORD PTR [rsp+0x80],rdi
 10128fa:	mov    QWORD PTR [rsp+0x50],r12
 10128ff:	xor    ebp,ebp
 1012901:	lea    r9,[rsp+0x30]
 1012906:	lea    rdx,[rip+0xffffffffffff4a8b]        # 0x1007398
 101290d:	xor    r8d,r8d
 1012910:	mov    rcx,rsi
 1012913:	mov    QWORD PTR [rsp+0x48],r13
 1012918:	lea    r12d,[rbp+0x1]
 101291c:	mov    QWORD PTR [rsp+0x40],r15
 1012921:	mov    DWORD PTR [rsp+0x30],ebp
 1012925:	call   0x1013a24
 101292a:	lea    edi,[rbp+0x4]
 101292d:	cmp    eax,r12d
 1012930:	jne    0x101293f
 1012932:	mov    r12d,edi
 1012935:	lea    r13,[rsp+0x30]
 101293a:	jmp    0x1012af3
 101293f:	lea    rax,[rip+0xffffffffffff4a6a]        # 0x10073b0
 1012946:	mov    r9d,edi
 1012949:	mov    r8,rsi
 101294c:	mov    edx,r12d
 101294f:	mov    ecx,0x400
 1012954:	mov    DWORD PTR [rsp+0x28],edi
 1012958:	mov    QWORD PTR [rsp+0x20],rax
 101295d:	call   QWORD PTR [rip+0xfffffffffffee94d]        # 0x10012b0
 1012963:	cmp    eax,0x2
 1012966:	jne    0x101296e
 1012968:	lea    r12d,[rax+0x1]
 101296c:	jmp    0x10129e9
 101296e:	lea    rax,[rip+0xffffffffffff4a4b]        # 0x10073c0
 1012975:	mov    r9d,edi
 1012978:	mov    r8,rsi
 101297b:	mov    edx,r12d
 101297e:	mov    ecx,0x400
 1012983:	mov    DWORD PTR [rsp+0x28],edi
 1012987:	mov    QWORD PTR [rsp+0x20],rax
 101298c:	call   QWORD PTR [rip+0xfffffffffffee91e]        # 0x10012b0
 1012992:	cmp    eax,0x2
 1012995:	jne    0x1012ad5
 101299b:	lea    rbx,[rsi+0x8]
 101299f:	lea    r9,[rsp+0x34]
 10129a4:	lea    rdx,[rip+0xffffffffffff4a25]        # 0x10073d0
 10129ab:	mov    rcx,rbx
 10129ae:	xor    r8d,r8d
 10129b1:	call   0x1013a24
 10129b6:	cmp    eax,r12d
 10129b9:	jne    0x1012ad5
 10129bf:	cmp    WORD PTR [rbx],0x3a
 10129c3:	je     0x10129dc
 10129c5:	data16 data16 nop WORD PTR [rax+rax*1+0x0]
 10129d0:	add    rbx,0x2
 10129d4:	inc    edi
 10129d6:	cmp    WORD PTR [rbx],0x3a
 10129da:	jne    0x10129d0
 10129dc:	mov    r12d,DWORD PTR [rsp+0x34]
 10129e1:	inc    edi
 10129e3:	je     0x1012ad5
 10129e9:	movsxd r8,edi
 10129ec:	or     rcx,0xffffffffffffffff
 10129f0:	inc    rcx
 10129f3:	cmp    WORD PTR [rsi+rcx*2],bp
 10129f7:	jne    0x10129f0
 10129f9:	sub    rcx,r8
 10129fc:	lea    rbx,[rsi+r8*2]
 1012a00:	movabs rax,0xaaaaaaaaaaaaaaab
 1012a0a:	lea    r9,[rsp+0x30]
 1012a0f:	xor    r8d,r8d
 1012a12:	mov    r13,rsi
 1012a15:	mul    rcx
 1012a18:	mov    rdi,rdx
 1012a1b:	lea    rdx,[rip+0xffffffffffff49be]        # 0x10073e0
 1012a22:	mov    rcx,rbx
 1012a25:	shr    rdi,1
 1012a28:	mov    r15d,ebp
 1012a2b:	inc    edi
 1012a2d:	call   0x1013a24
 1012a32:	cmp    eax,0x1
 1012a35:	jne    0x1012aa5
 1012a37:	mov    r14,rsi
 1012a3a:	nop    WORD PTR [rax+rax*1+0x0]
 1012a40:	movzx  eax,WORD PTR [rbx]
 1012a43:	cmp    ax,0x2c
 1012a47:	je     0x1012a63
 1012a49:	nop    DWORD PTR [rax+0x0]
 1012a50:	test   ax,ax
 1012a53:	je     0x1012a63
 1012a55:	movzx  eax,WORD PTR [rbx+0x2]
 1012a59:	add    rbx,0x2
 1012a5d:	cmp    ax,0x2c
 1012a61:	jne    0x1012a50
 1012a63:	movzx  eax,BYTE PTR [rsp+0x30]
 1012a68:	inc    r14
 1012a6b:	inc    r15d
 1012a6e:	mov    BYTE PTR [r14-0x1],al
 1012a72:	cmp    WORD PTR [rbx],0x2c
 1012a76:	jne    0x1012a7c
 1012a78:	add    rbx,0x2
 1012a7c:	cmp    WORD PTR [rbx],bp
 1012a7f:	je     0x1012a9d
 1012a81:	lea    r9,[rsp+0x30]
 1012a86:	lea    rdx,[rip+0xffffffffffff4953]        # 0x10073e0
 1012a8d:	xor    r8d,r8d
 1012a90:	mov    rcx,rbx
 1012a93:	call   0x1013a24
 1012a98:	cmp    eax,0x1
 1012a9b:	je     0x1012a40
 1012a9d:	mov    r14,QWORD PTR [rsp+0x88]
 1012aa5:	cmp    edi,r15d
 1012aa8:	jne    0x1012ace
 1012aaa:	cmp    r12d,0x1
 1012aae:	je     0x1012abc
 1012ab0:	cmp    r12d,0x7
 1012ab4:	je     0x1012abc
 1012ab6:	cmp    r12d,0x2
 1012aba:	jne    0x1012af3
 1012abc:	test   dil,0x1
 1012ac0:	jne    0x1012ace
 1012ac2:	movsxd rax,r15d
 1012ac5:	add    edi,0x2
 1012ac8:	mov    WORD PTR [rax+rsi*1],bp
 1012acc:	jmp    0x1012af3
 1012ace:	mov    ebp,0xd
 1012ad3:	jmp    0x1012b2d
 1012ad5:	or     rcx,0xffffffffffffffff
 1012ad9:	nop    DWORD PTR [rax+0x0]
 1012ae0:	inc    rcx
 1012ae3:	cmp    WORD PTR [rsi+rcx*2],bp
 1012ae7:	jne    0x1012ae0
 1012ae9:	lea    edi,[rcx*2+0x2]
 1012af0:	mov    r13,rsi
 1012af3:	mov    rcx,QWORD PTR [rsp+0x90]
 1012afb:	mov    rbx,QWORD PTR [rsp+0x98]
 1012b03:	test   rcx,rcx
 1012b06:	je     0x1012b1e
 1012b08:	cmp    DWORD PTR [rbx],edi
 1012b0a:	jb     0x1012b19
 1012b0c:	mov    r8d,edi
 1012b0f:	mov    rdx,r13
 1012b12:	call   0x1011446
 1012b17:	jmp    0x1012b1e
 1012b19:	mov    ebp,0xea
 1012b1e:	test   r14,r14
 1012b21:	je     0x1012b26
 1012b23:	mov    DWORD PTR [r14],r12d
 1012b26:	test   rbx,rbx
 1012b29:	je     0x1012b2d
 1012b2b:	mov    DWORD PTR [rbx],edi
 1012b2d:	mov    r13,QWORD PTR [rsp+0x48]
 1012b32:	mov    r12,QWORD PTR [rsp+0x50]
 1012b37:	mov    rdi,QWORD PTR [rsp+0x80]
 1012b3f:	mov    r15,QWORD PTR [rsp+0x40]
 1012b44:	call   QWORD PTR [rip+0xfffffffffffee786]        # 0x10012d0
 1012b4a:	mov    r8,rsi
 1012b4d:	xor    edx,edx
 1012b4f:	mov    rcx,rax
 1012b52:	call   QWORD PTR [rip+0xfffffffffffee6a8]        # 0x1001200
 1012b58:	jmp    0x1012b5f
 1012b5a:	mov    ebp,0x8
 1012b5f:	mov    ecx,ebp
 1012b61:	call   QWORD PTR [rip+0xfffffffffffee779]        # 0x10012e0
 1012b67:	mov    rsi,QWORD PTR [rsp+0x78]
 1012b6c:	mov    eax,ebp
 1012b6e:	mov    rbp,QWORD PTR [rsp+0x70]
 1012b73:	add    rsp,0x58
 1012b77:	pop    r14
 1012b79:	pop    rbx
 1012b7a:	ret    
 1012b7b:	mov    rax,QWORD PTR [rsp+0x98]
 1012b83:	mov    QWORD PTR [rsp+0x28],rax
 1012b88:	mov    rax,QWORD PTR [rsp+0x90]
 1012b90:	mov    QWORD PTR [rsp+0x20],rax
 1012b95:	call   QWORD PTR [rip+0xfffffffffffee48d]        # 0x1001028
 1012b9b:	add    rsp,0x58
 1012b9f:	pop    r14
 1012ba1:	pop    rbx
 1012ba2:	ret    
 1012ba3:	int3   
 1012ba4:	int3   
 1012ba5:	int3   
 1012ba6:	int3   
 1012ba7:	int3   
 1012ba8:	int3   
 1012ba9:	int3   
 1012baa:	int3   
 1012bab:	int3   
 1012bac:	int3   
 1012bad:	int3   
 1012bae:	int3   
 1012baf:	int3   
 1012bb0:	rex push rbx
 1012bb2:	push   rsi
 1012bb3:	push   r15
 1012bb5:	sub    rsp,0x40
 1012bb9:	cmp    DWORD PTR [rip+0x2b670],0x0        # 0x103e230
 1012bc0:	mov    r15d,r8d
 1012bc3:	mov    rbx,rdx
 1012bc6:	je     0x1012bd6
 1012bc8:	mov    eax,0x1
 1012bcd:	add    rsp,0x40
 1012bd1:	pop    r15
 1012bd3:	pop    rsi
 1012bd4:	pop    rbx
 1012bd5:	ret    
 1012bd6:	mov    QWORD PTR [rsp+0x68],rdi
 1012bdb:	mov    QWORD PTR [rsp+0x70],r12
 1012be0:	mov    QWORD PTR [rsp+0x30],r14
 1012be5:	call   0x1012820
 1012bea:	or     rdi,0xffffffffffffffff
 1012bee:	test   rdx,rdx
 1012bf1:	je     0x1012c02
 1012bf3:	mov    rax,rdi
 1012bf6:	inc    rax
 1012bf9:	cmp    WORD PTR [rdx+rax*2],0x0
 1012bfe:	jne    0x1012bf6
 1012c00:	jmp    0x1012c07
 1012c02:	mov    eax,0x3
 1012c07:	lea    r14d,[rax+0x1]
 1012c0b:	mov    r8d,0x104
 1012c11:	lea    r12,[rip+0x2b638]        # 0x103e250
 1012c18:	sub    r8d,r14d
 1012c1b:	mov    rdx,r12
 1012c1e:	mov    QWORD PTR [rsp+0x60],rbp
 1012c23:	mov    QWORD PTR [rsp+0x38],r13
 1012c28:	call   QWORD PTR [rip+0xfffffffffffee4da]        # 0x1001108
 1012c2e:	mov    r11d,eax
 1012c31:	test   eax,eax
 1012c33:	je     0x1012dbf
 1012c39:	lea    rcx,[r12-0x2]
 1012c3e:	lea    rcx,[rcx+r11*2]
 1012c42:	call   0x1012820
 1012c47:	xor    r13d,r13d
 1012c4a:	mov    edx,r13d
 1012c4d:	mov    r8d,r13d
 1012c50:	cmp    rcx,r12
 1012c53:	jbe    0x1012c78
 1012c55:	test   r8,r8
 1012c58:	jne    0x1012c65
 1012c5a:	cmp    WORD PTR [rcx],0x2e
 1012c5e:	jne    0x1012c6d
 1012c60:	mov    r8,rcx
 1012c63:	jmp    0x1012c6d
 1012c65:	cmp    WORD PTR [rcx],0x5c
 1012c69:	cmove  rdx,rcx
 1012c6d:	sub    rcx,0x2
 1012c71:	test   rdx,rdx
 1012c74:	je     0x1012c50
 1012c76:	jmp    0x1012c81
 1012c78:	test   rdx,rdx
 1012c7b:	je     0x1012dbf
 1012c81:	lea    rcx,[rdx+0x2]
 1012c85:	lea    rbp,[r8+0x2]
 1012c89:	mov    esi,0x1
 1012c8e:	test   rbx,rbx
 1012c91:	je     0x1012ca1
 1012c93:	lea    r8d,[r14+r14*1]
 1012c97:	mov    rdx,rbx
 1012c9a:	call   0x1011446
 1012c9f:	jmp    0x1012cf6
 1012ca1:	mov    r9d,DWORD PTR [rip+0x4520]        # 0x10171c8
 1012ca8:	mov    r8,QWORD PTR [rip+0x4511]        # 0x10171c0
 1012caf:	mov    rax,rcx
 1012cb2:	sub    rax,r12
 1012cb5:	mov    edx,esi
 1012cb7:	sar    rax,1
 1012cba:	sub    r11d,eax
 1012cbd:	mov    DWORD PTR [rsp+0x28],r11d
 1012cc2:	mov    QWORD PTR [rsp+0x20],rcx
 1012cc7:	mov    ecx,0x400
 1012ccc:	call   QWORD PTR [rip+0xfffffffffffee5de]        # 0x10012b0
 1012cd2:	lea    r8d,[r14+r14*1]
 1012cd6:	lea    rdx,[rip+0xffffffffffff458b]        # 0x1007268
 1012cdd:	cmp    eax,0x2
 1012ce0:	mov    ebx,r13d
 1012ce3:	mov    rcx,rbp
 1012ce6:	cmove  ebx,esi
 1012ce9:	call   0x1011446
 1012cee:	test   ebx,ebx
 1012cf0:	jne    0x1012dbf
 1012cf6:	mov    rcx,r12
 1012cf9:	call   QWORD PTR [rip+0xfffffffffffee429]        # 0x1001128
 1012cff:	cmp    eax,0xffffffff
 1012d02:	je     0x1012dbf
 1012d08:	lea    rbx,[rip+0x2b961]        # 0x103e670
 1012d0f:	mov    rdx,r12
 1012d12:	mov    r8d,0x208
 1012d18:	mov    rcx,rbx
 1012d1b:	call   0x1011446
 1012d20:	mov    rax,rdi
 1012d23:	inc    rax
 1012d26:	cmp    WORD PTR [rbx+rax*2],r13w
 1012d2b:	jne    0x1012d23
 1012d2d:	dec    rax
 1012d30:	cmp    WORD PTR [rbx+rax*2],0x5c
 1012d35:	lea    rax,[rbx+rax*2]
 1012d39:	je     0x1012d4f
 1012d3b:	nop    DWORD PTR [rax+rax*1+0x0]
 1012d40:	cmp    rax,rbx
 1012d43:	jbe    0x1012d4f
 1012d45:	sub    rax,0x2
 1012d49:	cmp    WORD PTR [rax],0x5c
 1012d4d:	jne    0x1012d40
 1012d4f:	mov    WORD PTR [rax],r13w
 1012d53:	sub    rax,rbx
 1012d56:	mov    rcx,rbx
 1012d59:	sar    rax,1
 1012d5c:	inc    eax
 1012d5e:	mov    DWORD PTR [rip+0x2b4d0],eax        # 0x103e234
 1012d64:	call   0x1012820
 1012d69:	lea    rbx,[rip+0x2b6f0]        # 0x103e460
 1012d70:	mov    rcx,rbx
 1012d73:	mov    rdx,r12
 1012d76:	mov    r8d,0x208
 1012d7c:	call   0x1011446
 1012d81:	inc    rdi
 1012d84:	cmp    WORD PTR [rbx+rdi*2],r13w
 1012d89:	jne    0x1012d81
 1012d8b:	mov    eax,edi
 1012d8d:	mov    rcx,rbx
 1012d90:	lea    rdx,[rbx+rax*2]
 1012d94:	mov    rax,QWORD PTR [rip+0xffffffffffff43dd]        # 0x1007178
 1012d9b:	mov    QWORD PTR [rdx],rax
 1012d9e:	movzx  eax,WORD PTR [rip+0xffffffffffff43db]        # 0x1007180
 1012da5:	mov    WORD PTR [rdx+0x8],ax
 1012da9:	call   0x1012820
 1012dae:	mov    DWORD PTR [rip+0x2b48b],r15d        # 0x103e240
 1012db5:	mov    DWORD PTR [rip+0x2b475],esi        # 0x103e230
 1012dbb:	mov    eax,esi
 1012dbd:	jmp    0x1012dc1
 1012dbf:	xor    eax,eax
 1012dc1:	mov    r13,QWORD PTR [rsp+0x38]
 1012dc6:	mov    rbp,QWORD PTR [rsp+0x60]
 1012dcb:	mov    rdi,QWORD PTR [rsp+0x68]
 1012dd0:	mov    r12,QWORD PTR [rsp+0x70]
 1012dd5:	mov    r14,QWORD PTR [rsp+0x30]
 1012dda:	add    rsp,0x40
 1012dde:	pop    r15
 1012de0:	pop    rsi
 1012de1:	pop    rbx
 1012de2:	ret    
 1012de3:	int3   
 1012de4:	int3   
 1012de5:	int3   
 1012de6:	int3   
 1012de7:	int3   
 1012de8:	int3   
 1012de9:	int3   
 1012dea:	int3   
 1012deb:	int3   
 1012dec:	int3   
 1012ded:	int3   
 1012dee:	int3   
 1012def:	int3   
 1012df0:	sub    rsp,0x58
 1012df4:	lea    rdx,[rsp+0x20]
 1012df9:	lea    rcx,[rip+0xfffffffffffffff0]        # 0x1012df0
 1012e00:	mov    r8d,0x30
 1012e06:	call   QWORD PTR [rip+0xfffffffffffee474]        # 0x1001280
 1012e0c:	test   rax,rax
 1012e0f:	jne    0x1012e16
 1012e11:	add    rsp,0x58
 1012e15:	ret    
 1012e16:	mov    QWORD PTR [rsp+0x50],rbx
 1012e1b:	mov    rbx,QWORD PTR [rsp+0x28]
 1012e20:	xor    r8d,r8d
 1012e23:	mov    rcx,rbx
 1012e26:	xor    edx,edx
 1012e28:	call   0x1012bb0
 1012e2d:	test   eax,eax
 1012e2f:	jne    0x1012e52
 1012e31:	lea    r8d,[rax+0x1]
 1012e35:	lea    rdx,[rip+0xffffffffffff4434]        # 0x1007270
 1012e3c:	mov    rcx,rbx
 1012e3f:	call   0x1012bb0
 1012e44:	test   eax,eax
 1012e46:	jne    0x1012e52
 1012e48:	mov    rbx,QWORD PTR [rsp+0x50]
 1012e4d:	add    rsp,0x58
 1012e51:	ret    
 1012e52:	mov    eax,0x1
 1012e57:	mov    rbx,QWORD PTR [rsp+0x50]
 1012e5c:	add    rsp,0x58
 1012e60:	ret    
 1012e61:	int3   
 1012e62:	int3   
 1012e63:	int3   
 1012e64:	int3   
 1012e65:	int3   
 1012e66:	int3   
 1012e67:	int3   
 1012e68:	int3   
 1012e69:	int3   
 1012e6a:	int3   
 1012e6b:	int3   
 1012e6c:	int3   
 1012e6d:	int3   
 1012e6e:	int3   
 1012e6f:	int3   
 1012e70:	rex push rbx
 1012e72:	sub    rsp,0x20
 1012e76:	cmp    DWORD PTR [rip+0x2b3b3],0x0        # 0x103e230
 1012e7d:	mov    rbx,rcx
 1012e80:	jne    0x1012e88
 1012e82:	call   QWORD PTR [rip+0xfffffffffffee368]        # 0x10011f0
 1012e88:	cmp    rbx,0xffffffff80000000
 1012e8f:	jne    0x1012e9e
 1012e91:	lea    rax,[rip+0xffffffffffff43f8]        # 0x1007290
 1012e98:	add    rsp,0x20
 1012e9c:	pop    rbx
 1012e9d:	ret    
 1012e9e:	cmp    rbx,0xffffffff80000001
 1012ea5:	jne    0x1012eb4
 1012ea7:	lea    rax,[rip+0xffffffffffff440a]        # 0x10072b8
 1012eae:	add    rsp,0x20
 1012eb2:	pop    rbx
 1012eb3:	ret    
 1012eb4:	cmp    rbx,0xffffffff80000002
 1012ebb:	jne    0x1012eca
 1012ebd:	lea    rax,[rip+0xffffffffffff441c]        # 0x10072e0
 1012ec4:	add    rsp,0x20
 1012ec8:	pop    rbx
 1012ec9:	ret    
 1012eca:	cmp    rbx,0xffffffff80000003
 1012ed1:	jne    0x1012ee0
 1012ed3:	lea    rax,[rip+0xffffffffffff442e]        # 0x1007308
 1012eda:	add    rsp,0x20
 1012ede:	pop    rbx
 1012edf:	ret    
 1012ee0:	cmp    rbx,0xffffffff80000004
 1012ee7:	jne    0x1012ef6
 1012ee9:	lea    rax,[rip+0xffffffffffff4430]        # 0x1007320
 1012ef0:	add    rsp,0x20
 1012ef4:	pop    rbx
 1012ef5:	ret    
 1012ef6:	cmp    rbx,0xffffffff80000005
 1012efd:	jne    0x1012f0c
 1012eff:	lea    rax,[rip+0xffffffffffff444a]        # 0x1007350
 1012f06:	add    rsp,0x20
 1012f0a:	pop    rbx
 1012f0b:	ret    
 1012f0c:	lea    rax,[rip+0xffffffffffff4465]        # 0x1007378
 1012f13:	cmp    rbx,0xffffffff80000006
 1012f1a:	je     0x1012f1f
 1012f1c:	mov    rax,rbx
 1012f1f:	add    rsp,0x20
 1012f23:	pop    rbx
 1012f24:	ret    
 1012f25:	int3   
 1012f26:	int3   
 1012f27:	int3   
 1012f28:	int3   
 1012f29:	int3   
 1012f2a:	int3   
 1012f2b:	int3   
 1012f2c:	int3   
 1012f2d:	int3   
 1012f2e:	int3   
 1012f2f:	int3   
 1012f30:	mov    QWORD PTR [rsp+0x8],rbx
 1012f35:	mov    QWORD PTR [rsp+0x10],rbp
 1012f3a:	mov    QWORD PTR [rsp+0x18],rsi
 1012f3f:	push   rdi
 1012f40:	push   r14
 1012f42:	push   r15
 1012f44:	sub    rsp,0x20
 1012f48:	mov    rbp,rdx
 1012f4b:	call   0x1012e70
 1012f50:	or     rbx,0xffffffffffffffff
 1012f54:	mov    r14,rax
 1012f57:	mov    rsi,rbx
 1012f5a:	nop    WORD PTR [rax+rax*1+0x0]
 1012f60:	inc    rsi
 1012f63:	cmp    WORD PTR [rax+rsi*2],0x0
 1012f68:	jne    0x1012f60
 1012f6a:	add    rsi,rsi
 1012f6d:	nop    DWORD PTR [rax]
 1012f70:	inc    rbx
 1012f73:	cmp    WORD PTR [rbp+rbx*2+0x0],0x0
 1012f79:	jne    0x1012f70
 1012f7b:	add    rbx,rbx
 1012f7e:	lea    rdi,[rsi+0x4]
 1012f82:	call   QWORD PTR [rip+0xfffffffffffee348]        # 0x10012d0
 1012f88:	lea    r8,[rdi+rbx*1]
 1012f8c:	xor    edx,edx
 1012f8e:	mov    rcx,rax
 1012f91:	call   QWORD PTR [rip+0xfffffffffffee1e1]        # 0x1001178
 1012f97:	mov    r15,rax
 1012f9a:	test   rax,rax
 1012f9d:	je     0x1012fd8
 1012f9f:	mov    r8d,esi
 1012fa2:	mov    rdx,r14
 1012fa5:	mov    rcx,rax
 1012fa8:	call   0x1011446
 1012fad:	mov    eax,0x5c
 1012fb2:	shr    rsi,1
 1012fb5:	lea    rdi,[r15+rsi*2]
 1012fb9:	mov    r8d,ebx
 1012fbc:	mov    rdx,rbp
 1012fbf:	lea    rcx,[rdi+0x2]
 1012fc3:	mov    WORD PTR [rdi],ax
 1012fc6:	call   0x1011446
 1012fcb:	shr    rbx,1
 1012fce:	xor    eax,eax
 1012fd0:	mov    WORD PTR [rdi+rbx*2+0x2],ax
 1012fd5:	mov    rax,r15
 1012fd8:	mov    rbx,QWORD PTR [rsp+0x40]
 1012fdd:	mov    rbp,QWORD PTR [rsp+0x48]
 1012fe2:	mov    rsi,QWORD PTR [rsp+0x50]
 1012fe7:	add    rsp,0x20
 1012feb:	pop    r15
 1012fed:	pop    r14
 1012fef:	pop    rdi
 1012ff0:	ret    
 1012ff1:	int3   
 1012ff2:	int3   
 1012ff3:	int3   
 1012ff4:	int3   
 1012ff5:	int3   
 1012ff6:	int3   
 1012ff7:	int3   
 1012ff8:	int3   
 1012ff9:	int3   
 1012ffa:	int3   
 1012ffb:	int3   
 1012ffc:	int3   
 1012ffd:	int3   
 1012ffe:	int3   
 1012fff:	int3   
 1013000:	mov    QWORD PTR [rsp+0x10],rbx
 1013005:	mov    QWORD PTR [rsp+0x18],rbp
 101300a:	mov    QWORD PTR [rsp+0x20],rsi
 101300f:	push   rdi
 1013010:	push   r14
 1013012:	push   r15
 1013014:	sub    rsp,0x30
 1013018:	mov    r14,rcx
 101301b:	mov    r15d,0x80
 1013021:	or     rbx,0xffffffffffffffff
 1013025:	inc    rbx
 1013028:	cmp    WORD PTR [rcx+rbx*2],0x0
 101302d:	jne    0x1013025
 101302f:	lea    esi,[rbx+0x80]
 1013035:	mov    edi,esi
 1013037:	add    rdi,rdi
 101303a:	call   QWORD PTR [rip+0xfffffffffffee290]        # 0x10012d0
 1013040:	mov    r8,rdi
 1013043:	mov    rcx,rax
 1013046:	xor    edx,edx
 1013048:	call   QWORD PTR [rip+0xfffffffffffee12a]        # 0x1001178
 101304e:	mov    rbp,rax
 1013051:	test   rax,rax
 1013054:	je     0x1013116
 101305a:	mov    QWORD PTR [rsp+0x50],r12
 101305f:	lea    r12,[rip+0xffffffffffff4102]        # 0x1007168
 1013066:	data16 nop WORD PTR [rax+rax*1+0x0]
 1013070:	mov    r9d,ebx
 1013073:	mov    r8,r14
 1013076:	mov    edx,0x1
 101307b:	mov    ecx,0x400
 1013080:	mov    DWORD PTR [rsp+0x28],0x5
 1013088:	mov    QWORD PTR [rsp+0x20],r12
 101308d:	call   QWORD PTR [rip+0xfffffffffffee21d]        # 0x10012b0
 1013093:	cmp    eax,0x2
 1013096:	jne    0x10130b7
 1013098:	mov    edi,DWORD PTR [rip+0x2b196]        # 0x103e234
 101309e:	cmp    edi,esi
 10130a0:	ja     0x10130ca
 10130a2:	lea    r8d,[rdi+rdi*1]
 10130a6:	lea    rdx,[rip+0x2b5c3]        # 0x103e670
 10130ad:	mov    rcx,rbp
 10130b0:	call   0x1011446
 10130b5:	jmp    0x10130c8
 10130b7:	mov    r8d,esi
 10130ba:	mov    rdx,rbp
 10130bd:	mov    rcx,r14
 10130c0:	call   QWORD PTR [rip+0xfffffffffffee242]        # 0x1001308
 10130c6:	mov    edi,eax
 10130c8:	cmp    edi,esi
 10130ca:	jle    0x101310e
 10130cc:	add    r15d,r15d
 10130cf:	lea    esi,[rbx+r15*1]
 10130d3:	call   QWORD PTR [rip+0xfffffffffffee1f7]        # 0x10012d0
 10130d9:	mov    r8,rbp
 10130dc:	mov    rcx,rax
 10130df:	xor    edx,edx
 10130e1:	call   QWORD PTR [rip+0xfffffffffffee119]        # 0x1001200
 10130e7:	mov    edi,esi
 10130e9:	add    rdi,rdi
 10130ec:	call   QWORD PTR [rip+0xfffffffffffee1de]        # 0x10012d0
 10130f2:	mov    r8,rdi
 10130f5:	mov    rcx,rax
 10130f8:	xor    edx,edx
 10130fa:	call   QWORD PTR [rip+0xfffffffffffee078]        # 0x1001178
 1013100:	mov    rbp,rax
 1013103:	test   rax,rax
 1013106:	jne    0x1013070
 101310c:	jmp    0x1013111
 101310e:	mov    rax,rbp
 1013111:	mov    r12,QWORD PTR [rsp+0x50]
 1013116:	mov    rbx,QWORD PTR [rsp+0x58]
 101311b:	mov    rbp,QWORD PTR [rsp+0x60]
 1013120:	mov    rsi,QWORD PTR [rsp+0x68]
 1013125:	add    rsp,0x30
 1013129:	pop    r15
 101312b:	pop    r14
 101312d:	pop    rdi
 101312e:	ret    
 101312f:	int3   
 1013130:	int3   
 1013131:	int3   
 1013132:	int3   
 1013133:	int3   
 1013134:	int3   
 1013135:	int3   
 1013136:	int3   
 1013137:	int3   
 1013138:	int3   
 1013139:	int3   
 101313a:	int3   
 101313b:	int3   
 101313c:	int3   
 101313d:	int3   
 101313e:	int3   
 101313f:	int3   
 1013140:	mov    QWORD PTR [rsp+0x20],rbx
 1013145:	push   rbp
 1013146:	push   rsi
 1013147:	push   rdi
 1013148:	sub    rsp,0x30
 101314c:	mov    rsi,rdx
 101314f:	mov    rbp,rcx
 1013152:	mov    edi,0x80
 1013157:	call   QWORD PTR [rip+0xfffffffffffee173]        # 0x10012d0
 101315d:	xor    edx,edx
 101315f:	mov    r8d,0x100
 1013165:	mov    rcx,rax
 1013168:	call   QWORD PTR [rip+0xfffffffffffee00a]        # 0x1001178
 101316e:	mov    rbx,rax
 1013171:	test   rax,rax
 1013174:	je     0x101326b
 101317a:	mov    QWORD PTR [rsp+0x50],r12
 101317f:	mov    QWORD PTR [rsp+0x58],r14
 1013184:	mov    QWORD PTR [rsp+0x60],r15
 1013189:	lea    r15,[rip+0x2b0c0]        # 0x103e250
 1013190:	lea    r12,[rip+0x2b2c9]        # 0x103e460
 1013197:	mov    r14d,0xffff
 101319d:	nop    DWORD PTR [rax]
 10131a0:	test   rbp,rbp
 10131a3:	je     0x10131e5
 10131a5:	test   rsi,rsi
 10131a8:	je     0x10131e5
 10131aa:	lea    r8,[rip+0xffffffffffff3fc3]        # 0x1007174
 10131b1:	mov    r9,rbx
 10131b4:	mov    rdx,rsi
 10131b7:	mov    rcx,rbp
 10131ba:	mov    QWORD PTR [rsp+0x28],r12
 10131bf:	mov    DWORD PTR [rsp+0x20],edi
 10131c3:	call   QWORD PTR [rip+0xfffffffffffee137]        # 0x1001300
 10131c9:	lea    ecx,[rdi-0x1]
 10131cc:	mov    r11d,eax
 10131cf:	cmp    eax,ecx
 10131d1:	je     0x10131e0
 10131d3:	cmp    WORD PTR [rbx],r14w
 10131d7:	jne    0x10131e0
 10131d9:	cmp    WORD PTR [rbx+0x2],0x0
 10131de:	je     0x10131e5
 10131e0:	cmp    eax,0xffffffff
 10131e3:	jne    0x1013207
 10131e5:	lea    r8,[rip+0xffffffffffff3f88]        # 0x1007174
 10131ec:	mov    r9,rbx
 10131ef:	mov    rdx,rsi
 10131f2:	mov    rcx,rbp
 10131f5:	mov    QWORD PTR [rsp+0x28],r15
 10131fa:	mov    DWORD PTR [rsp+0x20],edi
 10131fe:	call   QWORD PTR [rip+0xfffffffffffee0fc]        # 0x1001300
 1013204:	mov    r11d,eax
 1013207:	test   rbp,rbp
 101320a:	je     0x1013214
 101320c:	lea    eax,[rdi-0x1]
 101320f:	test   rsi,rsi
 1013212:	jne    0x1013217
 1013214:	lea    eax,[rdi-0x2]
 1013217:	cmp    r11d,eax
 101321a:	jne    0x1013259
 101321c:	add    edi,edi
 101321e:	call   QWORD PTR [rip+0xfffffffffffee0ac]        # 0x10012d0
 1013224:	mov    r8,rbx
 1013227:	mov    rcx,rax
 101322a:	xor    edx,edx
 101322c:	call   QWORD PTR [rip+0xfffffffffffedfce]        # 0x1001200
 1013232:	mov    ebx,edi
 1013234:	add    rbx,rbx
 1013237:	call   QWORD PTR [rip+0xfffffffffffee093]        # 0x10012d0
 101323d:	mov    r8,rbx
 1013240:	mov    rcx,rax
 1013243:	xor    edx,edx
 1013245:	call   QWORD PTR [rip+0xfffffffffffedf2d]        # 0x1001178
 101324b:	mov    rbx,rax
 101324e:	test   rax,rax
 1013251:	jne    0x10131a0
 1013257:	jmp    0x101325c
 1013259:	mov    rax,rbx
 101325c:	mov    r14,QWORD PTR [rsp+0x58]
 1013261:	mov    r12,QWORD PTR [rsp+0x50]
 1013266:	mov    r15,QWORD PTR [rsp+0x60]
 101326b:	mov    rbx,QWORD PTR [rsp+0x68]
 1013270:	add    rsp,0x30
 1013274:	pop    rdi
 1013275:	pop    rsi
 1013276:	pop    rbp
 1013277:	ret    
 1013278:	int3   
 1013279:	int3   
 101327a:	int3   
 101327b:	int3   
 101327c:	int3   
 101327d:	int3   
 101327e:	int3   
 101327f:	int3   
 1013280:	rex push rdi
 1013282:	push   r12
 1013284:	push   r13
 1013286:	sub    rsp,0x40
 101328a:	mov    r13,rdx
 101328d:	mov    r12,rcx
 1013290:	call   0x1013140
 1013295:	mov    rdi,rax
 1013298:	test   rax,rax
 101329b:	je     0x10133ac
 10132a1:	test   r13,r13
 10132a4:	je     0x10133ac
 10132aa:	test   r12,r12
 10132ad:	je     0x10133ac
 10132b3:	mov    QWORD PTR [rsp+0x60],rbx
 10132b8:	mov    QWORD PTR [rsp+0x68],rbp
 10132bd:	mov    QWORD PTR [rsp+0x70],rsi
 10132c2:	mov    eax,0xffff
 10132c7:	mov    QWORD PTR [rsp+0x38],r14
 10132cc:	mov    QWORD PTR [rsp+0x30],r15
 10132d1:	cmp    WORD PTR [rdi],ax
 10132d4:	jne    0x101335d
 10132da:	cmp    WORD PTR [rdi+0x2],0x0
 10132df:	jne    0x101335d
 10132e1:	cmp    DWORD PTR [rip+0x2af58],0x0        # 0x103e240
 10132e8:	je     0x101335d
 10132ea:	or     rbp,0xffffffffffffffff
 10132ee:	mov    rbx,rbp
 10132f1:	inc    rbx
 10132f4:	cmp    WORD PTR [r12+rbx*2],0x0
 10132fa:	jne    0x10132f1
 10132fc:	mov    rsi,rbp
 10132ff:	nop
 1013300:	inc    rsi
 1013303:	cmp    WORD PTR [r13+rsi*2+0x0],0x0
 101330a:	jne    0x1013300
 101330c:	xor    r14d,r14d
 101330f:	lea    r15,[rip+0x3eba]        # 0x10171d0
 1013316:	data16 nop WORD PTR [rax+rax*1+0x0]
 1013320:	mov    rcx,QWORD PTR [r15]
 1013323:	mov    eax,DWORD PTR [r15+0x8]
 1013327:	mov    r9d,ebx
 101332a:	mov    DWORD PTR [rsp+0x28],eax
 101332e:	mov    QWORD PTR [rsp+0x20],rcx
 1013333:	mov    r8,r12
 1013336:	mov    ecx,0x400
 101333b:	mov    edx,0x1
 1013340:	call   QWORD PTR [rip+0xfffffffffffedf6a]        # 0x10012b0
 1013346:	cmp    eax,0x2
 1013349:	je     0x10133b6
 101334b:	inc    r14d
 101334e:	add    r15,0x20
 1013352:	cmp    r14d,0x1
 1013356:	jb     0x1013320
 1013358:	mov    eax,0xffff
 101335d:	test   rdi,rdi
 1013360:	je     0x1013390
 1013362:	cmp    WORD PTR [rdi],ax
 1013365:	jne    0x101336e
 1013367:	cmp    WORD PTR [rdi+0x2],0x0
 101336c:	je     0x1013390
 101336e:	mov    rcx,rdi
 1013371:	call   0x1013000
 1013376:	mov    rbx,rax
 1013379:	call   QWORD PTR [rip+0xfffffffffffedf51]        # 0x10012d0
 101337f:	mov    r8,rdi
 1013382:	mov    rcx,rax
 1013385:	xor    edx,edx
 1013387:	call   QWORD PTR [rip+0xfffffffffffede73]        # 0x1001200
 101338d:	mov    rdi,rbx
 1013390:	mov    r15,QWORD PTR [rsp+0x30]
 1013395:	mov    r14,QWORD PTR [rsp+0x38]
 101339a:	mov    rsi,QWORD PTR [rsp+0x70]
 101339f:	mov    rbp,QWORD PTR [rsp+0x68]
 10133a4:	mov    rbx,QWORD PTR [rsp+0x60]
 10133a9:	mov    rax,rdi
 10133ac:	add    rsp,0x40
 10133b0:	pop    r13
 10133b2:	pop    r12
 10133b4:	pop    rdi
 10133b5:	ret    
 10133b6:	lea    rcx,[rip+0x3e13]        # 0x10171d0
 10133bd:	movsxd rbx,r14d
 10133c0:	shl    rbx,0x5
 10133c4:	add    rbx,rcx
 10133c7:	mov    rcx,QWORD PTR [rbx+0x10]
 10133cb:	call   0x1013000
 10133d0:	test   rax,rax
 10133d3:	je     0x101342f
 10133d5:	inc    rbp
 10133d8:	cmp    WORD PTR [rax+rbp*2],0x0
 10133dd:	jne    0x10133d5
 10133df:	mov    r9d,ebp
 10133e2:	mov    r8,rax
 10133e5:	mov    edx,0x1
 10133ea:	mov    ecx,0x400
 10133ef:	mov    DWORD PTR [rsp+0x28],esi
 10133f3:	mov    QWORD PTR [rsp+0x20],r13
 10133f8:	call   QWORD PTR [rip+0xfffffffffffedeb2]        # 0x10012b0
 10133fe:	cmp    eax,0x2
 1013401:	jne    0x1013358
 1013407:	call   QWORD PTR [rip+0xfffffffffffedec3]        # 0x10012d0
 101340d:	mov    r8,rdi
 1013410:	xor    edx,edx
 1013412:	mov    rcx,rax
 1013415:	call   QWORD PTR [rip+0xfffffffffffedde5]        # 0x1001200
 101341b:	mov    rdx,QWORD PTR [rbx+0x10]
 101341f:	mov    rcx,r12
 1013422:	call   0x1013140
 1013427:	mov    rdi,rax
 101342a:	jmp    0x1013358
 101342f:	call   QWORD PTR [rip+0xfffffffffffede9b]        # 0x10012d0
 1013435:	mov    r8,rdi
 1013438:	xor    edx,edx
 101343a:	mov    rcx,rax
 101343d:	call   QWORD PTR [rip+0xfffffffffffeddbd]        # 0x1001200
 1013443:	xor    edi,edi
 1013445:	jmp    0x1013390
 101344a:	int3   
 101344b:	int3   
 101344c:	int3   
 101344d:	int3   
 101344e:	int3   
 101344f:	int3   
 1013450:	rex push rbx
 1013452:	sub    rsp,0x20
 1013456:	cmp    DWORD PTR [rip+0x2add3],0x0        # 0x103e230
 101345d:	mov    rbx,rcx
 1013460:	je     0x10134c5
 1013462:	cmp    rcx,0xffffffff80000000
 1013469:	je     0x10134b5
 101346b:	cmp    rcx,0xffffffff80000001
 1013472:	je     0x10134b5
 1013474:	cmp    rcx,0xffffffff80000002
 101347b:	je     0x10134b5
 101347d:	cmp    rcx,0xffffffff80000003
 1013484:	je     0x10134b5
 1013486:	cmp    rcx,0xffffffff80000004
 101348d:	je     0x10134b5
 101348f:	cmp    rcx,0xffffffff80000005
 1013496:	je     0x10134b5
 1013498:	cmp    rcx,0xffffffff80000006
 101349f:	je     0x10134b5
 10134a1:	call   QWORD PTR [rip+0xfffffffffffede29]        # 0x10012d0
 10134a7:	mov    r8,rbx
 10134aa:	xor    edx,edx
 10134ac:	mov    rcx,rax
 10134af:	call   QWORD PTR [rip+0xfffffffffffedd4b]        # 0x1001200
 10134b5:	xor    ecx,ecx
 10134b7:	call   QWORD PTR [rip+0xfffffffffffede23]        # 0x10012e0
 10134bd:	xor    eax,eax
 10134bf:	add    rsp,0x20
 10134c3:	pop    rbx
 10134c4:	ret    
 10134c5:	add    rsp,0x20
 10134c9:	pop    rbx
 10134ca:	rex.W jmp QWORD PTR [rip+0xfffffffffffedb47]        # 0x1001018
 10134d1:	int3   
 10134d2:	int3   
 10134d3:	int3   
 10134d4:	int3   
 10134d5:	int3   
 10134d6:	int3   
 10134d7:	int3   
 10134d8:	int3   
 10134d9:	int3   
 10134da:	int3   
 10134db:	int3   
 10134dc:	int3   
 10134dd:	int3   
 10134de:	int3   
 10134df:	int3   
 10134e0:	rex push rdi
 10134e2:	sub    rsp,0x20
 10134e6:	mov    rdi,rdx
 10134e9:	cmp    rcx,0xffffffff80000000
 10134f0:	je     0x10135cc
 10134f6:	cmp    rcx,0xffffffff80000001
 10134fd:	je     0x10135cc
 1013503:	cmp    rcx,0xffffffff80000002
 101350a:	je     0x10135cc
 1013510:	cmp    rcx,0xffffffff80000003
 1013517:	je     0x10135cc
 101351d:	cmp    rcx,0xffffffff80000004
 1013524:	je     0x10135cc
 101352a:	cmp    rcx,0xffffffff80000005
 1013531:	je     0x10135cc
 1013537:	cmp    rcx,0xffffffff80000006
 101353e:	je     0x10135cc
 1013544:	mov    QWORD PTR [rsp+0x30],rbx
 1013549:	mov    QWORD PTR [rsp+0x38],rbp
 101354e:	mov    QWORD PTR [rsp+0x40],rsi
 1013553:	call   0x1012e70
 1013558:	or     rcx,0xffffffffffffffff
 101355c:	mov    rbx,rax
 101355f:	nop
 1013560:	inc    rcx
 1013563:	cmp    WORD PTR [rax+rcx*2],0x0
 1013568:	jne    0x1013560
 101356a:	lea    rbp,[rcx*2+0x2]
 1013572:	call   QWORD PTR [rip+0xfffffffffffedd58]        # 0x10012d0
 1013578:	mov    r8,rbp
 101357b:	mov    rcx,rax
 101357e:	xor    edx,edx
 1013580:	call   QWORD PTR [rip+0xfffffffffffedbf2]        # 0x1001178
 1013586:	mov    rsi,rax
 1013589:	test   rax,rax
 101358c:	jne    0x10135af
 101358e:	lea    ecx,[rax+0x8]
 1013591:	call   QWORD PTR [rip+0xfffffffffffedd49]        # 0x10012e0
 1013597:	lea    eax,[rsi+0x8]
 101359a:	mov    rbp,QWORD PTR [rsp+0x38]
 101359f:	mov    rbx,QWORD PTR [rsp+0x30]
 10135a4:	mov    rsi,QWORD PTR [rsp+0x40]
 10135a9:	add    rsp,0x20
 10135ad:	pop    rdi
 10135ae:	ret    
 10135af:	mov    r8d,ebp
 10135b2:	mov    rdx,rbx
 10135b5:	mov    rcx,rax
 10135b8:	call   0x1011446
 10135bd:	xor    ecx,ecx
 10135bf:	mov    QWORD PTR [rdi],rsi
 10135c2:	call   QWORD PTR [rip+0xfffffffffffedd18]        # 0x10012e0
 10135c8:	xor    eax,eax
 10135ca:	jmp    0x101359a
 10135cc:	mov    QWORD PTR [rdx],rcx
 10135cf:	xor    ecx,ecx
 10135d1:	call   QWORD PTR [rip+0xfffffffffffedd09]        # 0x10012e0
 10135d7:	xor    eax,eax
 10135d9:	add    rsp,0x20
 10135dd:	pop    rdi
 10135de:	ret    
 10135df:	int3   
 10135e0:	int3   
 10135e1:	int3   
 10135e2:	int3   
 10135e3:	int3   
 10135e4:	int3   
 10135e5:	int3   
 10135e6:	int3   
 10135e7:	int3   
 10135e8:	int3   
 10135e9:	int3   
 10135ea:	int3   
 10135eb:	int3   
 10135ec:	int3   
 10135ed:	int3   
 10135ee:	int3   
 10135ef:	int3   
 10135f0:	push   r14
 10135f2:	sub    rsp,0x20
 10135f6:	cmp    DWORD PTR [rip+0x2ac33],0x0        # 0x103e230
 10135fd:	mov    r14,r8
 1013600:	je     0x1013703
 1013606:	test   rdx,rdx
 1013609:	je     0x10136f5
 101360f:	cmp    WORD PTR [rdx],0x0
 1013613:	je     0x10136f5
 1013619:	mov    QWORD PTR [rsp+0x30],rbx
 101361e:	mov    QWORD PTR [rsp+0x38],rsi
 1013623:	call   0x1012f30
 1013628:	mov    rsi,rax
 101362b:	test   rax,rax
 101362e:	jne    0x1013650
 1013630:	mov    ebx,0x8
 1013635:	mov    ecx,ebx
 1013637:	call   QWORD PTR [rip+0xfffffffffffedca3]        # 0x10012e0
 101363d:	mov    rsi,QWORD PTR [rsp+0x38]
 1013642:	mov    eax,ebx
 1013644:	mov    rbx,QWORD PTR [rsp+0x30]
 1013649:	add    rsp,0x20
 101364d:	pop    r14
 101364f:	ret    
 1013650:	xor    edx,edx
 1013652:	mov    rcx,rax
 1013655:	mov    QWORD PTR [rsp+0x40],rdi
 101365a:	call   0x1013140
 101365f:	mov    rdi,rax
 1013662:	test   rax,rax
 1013665:	je     0x10136bc
 1013667:	mov    eax,0xffff
 101366c:	cmp    WORD PTR [rdi],ax
 101366f:	jne    0x101367f
 1013671:	cmp    WORD PTR [rdi+0x2],0x0
 1013676:	jne    0x101367f
 1013678:	mov    ebx,0x2
 101367d:	jmp    0x1013681
 101367f:	xor    ebx,ebx
 1013681:	call   QWORD PTR [rip+0xfffffffffffedc49]        # 0x10012d0
 1013687:	mov    r8,rdi
 101368a:	xor    edx,edx
 101368c:	mov    rcx,rax
 101368f:	call   QWORD PTR [rip+0xfffffffffffedb6b]        # 0x1001200
 1013695:	test   ebx,ebx
 1013697:	jne    0x10136c1
 1013699:	mov    ecx,ebx
 101369b:	mov    QWORD PTR [r14],rsi
 101369e:	call   QWORD PTR [rip+0xfffffffffffedc3c]        # 0x10012e0
 10136a4:	mov    rdi,QWORD PTR [rsp+0x40]
 10136a9:	mov    rsi,QWORD PTR [rsp+0x38]
 10136ae:	mov    eax,ebx
 10136b0:	mov    rbx,QWORD PTR [rsp+0x30]
 10136b5:	add    rsp,0x20
 10136b9:	pop    r14
 10136bb:	ret    
 10136bc:	mov    ebx,0x8
 10136c1:	call   QWORD PTR [rip+0xfffffffffffedc09]        # 0x10012d0
 10136c7:	mov    r8,rsi
 10136ca:	xor    edx,edx
 10136cc:	mov    rcx,rax
 10136cf:	call   QWORD PTR [rip+0xfffffffffffedb2b]        # 0x1001200
 10136d5:	mov    ecx,ebx
 10136d7:	call   QWORD PTR [rip+0xfffffffffffedc03]        # 0x10012e0
 10136dd:	mov    rdi,QWORD PTR [rsp+0x40]
 10136e2:	mov    rsi,QWORD PTR [rsp+0x38]
 10136e7:	mov    eax,ebx
 10136e9:	mov    rbx,QWORD PTR [rsp+0x30]
 10136ee:	add    rsp,0x20
 10136f2:	pop    r14
 10136f4:	ret    
 10136f5:	mov    rdx,r8
 10136f8:	add    rsp,0x20
 10136fc:	pop    r14
 10136fe:	jmp    0x10134e0
 1013703:	add    rsp,0x20
 1013707:	pop    r14
 1013709:	rex.W jmp QWORD PTR [rip+0xfffffffffffed960]        # 0x1001070
 1013710:	int3   
 1013711:	int3   
 1013712:	int3   
 1013713:	int3   
 1013714:	int3   
 1013715:	int3   
 1013716:	int3   
 1013717:	int3   
 1013718:	mov    r11,rsp
 101371b:	mov    QWORD PTR [r11+0x20],rbx
 101371f:	push   rbp
 1013720:	push   rsi
 1013721:	push   rdi
 1013722:	push   r12
 1013724:	push   r13
 1013726:	push   r14
 1013728:	push   r15
 101372a:	sub    rsp,0x70
 101372e:	mov    eax,DWORD PTR [rcx+0x4]
 1013731:	mov    r9d,DWORD PTR [rcx]
 1013734:	mov    r12d,DWORD PTR [rcx+0x8]
 1013738:	mov    r10d,DWORD PTR [rcx+0xc]
 101373c:	mov    DWORD PTR [rsp+0x20],0x48
 1013744:	mov    rsi,rcx
 1013747:	mov    ecx,DWORD PTR [rcx+0x10]
 101374a:	mov    r14d,DWORD PTR [rsi+0x14]
 101374e:	mov    r15d,DWORD PTR [rsi+0x1c]
 1013752:	mov    r13,rdx
 1013755:	lea    rdx,[rip+0xfffffffffffec8a4]        # 0x1000000
 101375c:	mov    QWORD PTR [r11-0x80],rsi
 1013760:	add    rax,rdx
 1013763:	mov    QWORD PTR [r11-0x78],r13
 1013767:	and    r9d,0x1
 101376b:	mov    QWORD PTR [r11-0x70],rax
 101376f:	and    DWORD PTR [rsp+0x40],0x0
 1013774:	xor    eax,eax
 1013776:	and    QWORD PTR [r11-0x58],rax
 101377a:	and    QWORD PTR [r11-0x50],rax
 101377e:	mov    QWORD PTR [r11-0x60],rax
 1013782:	and    DWORD PTR [rsp+0x60],eax
 1013786:	add    r12,rdx
 1013789:	add    r10,rdx
 101378c:	add    rcx,rdx
 101378f:	add    r14,rdx
 1013792:	test   r9b,r9b
 1013795:	jne    0x10137bc
 1013797:	xor    edx,edx
 1013799:	lea    rax,[rsp+0x20]
 101379e:	lea    r9,[r11+0x8]
 10137a2:	lea    r8d,[rdx+0x1]
 10137a6:	mov    ecx,0xc06d0057
 10137ab:	mov    QWORD PTR [r11+0x8],rax
 10137af:	call   QWORD PTR [rip+0xfffffffffffedb33]        # 0x10012e8
 10137b5:	xor    eax,eax
 10137b7:	jmp    0x10139ee
 10137bc:	mov    rdi,QWORD PTR [r12]
 10137c0:	movabs rax,0x8000000000000000
 10137ca:	mov    rbp,r13
 10137cd:	sub    rbp,r10
 10137d0:	sar    rbp,0x3
 10137d4:	mov    ebp,ebp
 10137d6:	test   QWORD PTR [rcx+rbp*8],rax
 10137da:	mov    eax,0x0
 10137df:	sete   al
 10137e2:	mov    DWORD PTR [rsp+0x40],eax
 10137e6:	test   eax,eax
 10137e8:	je     0x10137fe
 10137ea:	mov    eax,DWORD PTR [rcx+rbp*8]
 10137ed:	lea    rcx,[rip+0xfffffffffffec80e]        # 0x1000002
 10137f4:	add    rax,rcx
 10137f7:	mov    QWORD PTR [rsp+0x48],rax
 10137fc:	jmp    0x1013806
 10137fe:	movzx  eax,WORD PTR [rcx+rbp*8]
 1013802:	mov    DWORD PTR [rsp+0x48],eax
 1013806:	mov    rax,QWORD PTR [rip+0xffffffffffff345b]        # 0x1006c68
 101380d:	xor    ebx,ebx
 101380f:	test   rax,rax
 1013812:	je     0x1013830
 1013814:	lea    rdx,[rsp+0x20]
 1013819:	xor    ecx,ecx
 101381b:	call   rax
 101381d:	mov    rbx,rax
 1013820:	test   rax,rax
 1013823:	jne    0x10139c4
 1013829:	mov    rax,QWORD PTR [rip+0xffffffffffff3438]        # 0x1006c68
 1013830:	test   rdi,rdi
 1013833:	jne    0x1013907
 1013839:	test   rax,rax
 101383c:	je     0x1013850
 101383e:	lea    rdx,[rsp+0x20]
 1013843:	lea    ecx,[rdi+0x1]
 1013846:	call   rax
 1013848:	mov    rdi,rax
 101384b:	test   rax,rax
 101384e:	jne    0x10138bb
 1013850:	mov    rcx,QWORD PTR [rsp+0x38]
 1013855:	call   QWORD PTR [rip+0xfffffffffffeda95]        # 0x10012f0
 101385b:	mov    rdi,rax
 101385e:	test   rax,rax
 1013861:	jne    0x10138bb
 1013863:	call   QWORD PTR [rip+0xfffffffffffed9b7]        # 0x1001220
 1013869:	mov    DWORD PTR [rsp+0x60],eax
 101386d:	mov    rax,QWORD PTR [rip+0xffffffffffff33fc]        # 0x1006c70
 1013874:	test   rax,rax
 1013877:	je     0x101388b
 1013879:	lea    rdx,[rsp+0x20]
 101387e:	lea    ecx,[rdi+0x3]
 1013881:	call   rax
 1013883:	mov    rdi,rax
 1013886:	test   rax,rax
 1013889:	jne    0x10138bb
 101388b:	xor    edx,edx
 101388d:	lea    rax,[rsp+0x20]
 1013892:	lea    r9,[rsp+0xb8]
 101389a:	lea    r8d,[rdx+0x1]
 101389e:	mov    ecx,0xc06d007e
 10138a3:	mov    QWORD PTR [rsp+0xb8],rax
 10138ab:	call   QWORD PTR [rip+0xfffffffffffeda37]        # 0x10012e8
 10138b1:	mov    rax,QWORD PTR [rsp+0x58]
 10138b6:	jmp    0x10139ee
 10138bb:	mov    rax,rdi
 10138be:	xchg   QWORD PTR [r12],rax
 10138c2:	cmp    rax,rdi
 10138c5:	je     0x10138f7
 10138c7:	cmp    DWORD PTR [rsi+0x18],0x0
 10138cb:	je     0x1013900
 10138cd:	mov    edx,0x10
 10138d2:	lea    ecx,[rdx+0x30]
 10138d5:	call   QWORD PTR [rip+0xfffffffffffeda1d]        # 0x10012f8
 10138db:	test   rax,rax
 10138de:	je     0x1013900
 10138e0:	mov    QWORD PTR [rax+0x8],rsi
 10138e4:	mov    rcx,QWORD PTR [rip+0x2af8d]        # 0x103e878
 10138eb:	mov    QWORD PTR [rax],rcx
 10138ee:	mov    QWORD PTR [rip+0x2af83],rax        # 0x103e878
 10138f5:	jmp    0x1013900
 10138f7:	mov    rcx,rdi
 10138fa:	call   QWORD PTR [rip+0xfffffffffffed9c0]        # 0x10012c0
 1013900:	mov    rax,QWORD PTR [rip+0xffffffffffff3361]        # 0x1006c68
 1013907:	mov    QWORD PTR [rsp+0x50],rdi
 101390c:	test   rax,rax
 101390f:	je     0x1013920
 1013911:	lea    rdx,[rsp+0x20]
 1013916:	mov    ecx,0x2
 101391b:	call   rax
 101391d:	mov    rbx,rax
 1013920:	test   rbx,rbx
 1013923:	jne    0x10139c0
 1013929:	cmp    DWORD PTR [rsi+0x14],ebx
 101392c:	je     0x1013957
 101392e:	cmp    DWORD PTR [rsi+0x1c],ebx
 1013931:	je     0x1013957
 1013933:	movsxd rax,DWORD PTR [rdi+0x3c]
 1013937:	cmp    DWORD PTR [rax+rdi*1],0x4550
 101393e:	jne    0x1013957
 1013940:	cmp    DWORD PTR [rax+rdi*1+0x8],r15d
 1013945:	jne    0x1013957
 1013947:	cmp    rdi,QWORD PTR [rax+rdi*1+0x30]
 101394c:	jne    0x1013957
 101394e:	mov    rbx,QWORD PTR [r14+rbp*8]
 1013952:	test   rbx,rbx
 1013955:	jne    0x10139c0
 1013957:	mov    rdx,QWORD PTR [rsp+0x48]
 101395c:	mov    rcx,rdi
 101395f:	call   QWORD PTR [rip+0xfffffffffffed933]        # 0x1001298
 1013965:	mov    rbx,rax
 1013968:	test   rax,rax
 101396b:	jne    0x10139c0
 101396d:	call   QWORD PTR [rip+0xfffffffffffed8ad]        # 0x1001220
 1013973:	mov    DWORD PTR [rsp+0x60],eax
 1013977:	mov    rax,QWORD PTR [rip+0xffffffffffff32f2]        # 0x1006c70
 101397e:	test   rax,rax
 1013981:	je     0x1013990
 1013983:	lea    rdx,[rsp+0x20]
 1013988:	lea    ecx,[rbx+0x4]
 101398b:	call   rax
 101398d:	mov    rbx,rax
 1013990:	test   rbx,rbx
 1013993:	jne    0x10139c0
 1013995:	lea    rax,[rsp+0x20]
 101399a:	lea    r9,[rsp+0xc0]
 10139a2:	lea    r8d,[rbx+0x1]
 10139a6:	xor    edx,edx
 10139a8:	mov    ecx,0xc06d007f
 10139ad:	mov    QWORD PTR [rsp+0xc0],rax
 10139b5:	call   QWORD PTR [rip+0xfffffffffffed92d]        # 0x10012e8
 10139bb:	mov    rbx,QWORD PTR [rsp+0x58]
 10139c0:	mov    QWORD PTR [r13+0x0],rbx
 10139c4:	mov    rax,QWORD PTR [rip+0xffffffffffff329d]        # 0x1006c68
 10139cb:	test   rax,rax
 10139ce:	je     0x10139eb
 10139d0:	and    DWORD PTR [rsp+0x60],0x0
 10139d5:	lea    rdx,[rsp+0x20]
 10139da:	mov    ecx,0x5
 10139df:	mov    QWORD PTR [rsp+0x50],rdi
 10139e4:	mov    QWORD PTR [rsp+0x58],rbx
 10139e9:	call   rax
 10139eb:	mov    rax,rbx
 10139ee:	mov    rbx,QWORD PTR [rsp+0xc8]
 10139f6:	add    rsp,0x70
 10139fa:	pop    r15
 10139fc:	pop    r14
 10139fe:	pop    r13
 1013a00:	pop    r12
 1013a02:	pop    rdi
 1013a03:	pop    rsi
 1013a04:	pop    rbp
 1013a05:	ret    
 1013a06:	int3   
 1013a07:	int3   
 1013a08:	int3   
 1013a09:	int3   
 1013a0a:	int3   
 1013a0b:	int3   
 1013a0c:	jmp    QWORD PTR [rip+0xfffffffffffed77e]        # 0x1001190
 1013a12:	int3   
 1013a13:	int3   
 1013a14:	int3   
 1013a15:	int3   
 1013a16:	int3   
 1013a17:	int3   
 1013a18:	jmp    QWORD PTR [rip+0xfffffffffffed76a]        # 0x1001188
 1013a1e:	int3   
 1013a1f:	int3   
 1013a20:	int3   
 1013a21:	int3   
 1013a22:	int3   
 1013a23:	int3   
 1013a24:	jmp    QWORD PTR [rip+0xfffffffffffeda5e]        # 0x1001488
 1013a2a:	int3   
 1013a2b:	int3   
 1013a2c:	int3   
 1013a2d:	int3   
 1013a2e:	int3   
 1013a2f:	int3   
 1013a30:	int3   
 1013a31:	int3   
 1013a32:	int3   
 1013a33:	int3   
 1013a34:	int3   
 1013a35:	int3   
 1013a36:	int3   
 1013a37:	int3   
 1013a38:	int3   
 1013a39:	int3   
 1013a3a:	int3   
 1013a3b:	int3   
 1013a3c:	int3   
 1013a3d:	int3   
 1013a3e:	int3   
 1013a3f:	int3   
 1013a40:	rex push rbp
 1013a42:	sub    rsp,0x30
 1013a46:	mov    rbp,rdx
 1013a49:	mov    QWORD PTR [rbp+0x38],rcx
 1013a4d:	mov    QWORD PTR [rbp+0x30],rcx
 1013a51:	mov    eax,0x1
 1013a56:	add    rsp,0x30
 1013a5a:	pop    rbp
 1013a5b:	ret    
 1013a5c:	int3   
 1013a5d:	int3   
 1013a5e:	int3   
 1013a5f:	int3   
 1013a60:	int3   
 1013a61:	int3   
 1013a62:	int3   
 1013a63:	int3   
 1013a64:	int3   
 1013a65:	int3   
 1013a66:	int3   
 1013a67:	int3   
 1013a68:	int3   
 1013a69:	int3   
 1013a6a:	int3   
 1013a6b:	int3   
 1013a6c:	int3   
 1013a6d:	int3   
 1013a6e:	int3   
 1013a6f:	int3   
 1013a70:	rex push rbp
 1013a72:	sub    rsp,0x20
 1013a76:	mov    rbp,rdx
 1013a79:	mov    rcx,QWORD PTR [rbp+0x20]
 1013a7d:	cmp    rcx,0xffffffffffffffff
 1013a81:	je     0x1013a8a
 1013a83:	call   QWORD PTR [rip+0xfffffffffffed647]        # 0x10010d0
 1013a89:	nop
 1013a8a:	add    rsp,0x20
 1013a8e:	pop    rbp
 1013a8f:	ret    
 1013a90:	int3   
 1013a91:	int3   
 1013a92:	int3   
 1013a93:	int3   
 1013a94:	int3   
 1013a95:	int3   
 1013a96:	int3   
 1013a97:	rex push rbp
 1013a99:	sub    rsp,0x20
 1013a9d:	mov    rbp,rdx
 1013aa0:	mov    rax,QWORD PTR [rcx]
 1013aa3:	mov    rdx,rcx
 1013aa6:	mov    ecx,DWORD PTR [rax]
 1013aa8:	call   0x1011552
 1013aad:	nop
 1013aae:	add    rsp,0x20
 1013ab2:	pop    rbp
 1013ab3:	ret    
 1013ab4:	int3   
 1013ab5:	int3   
 1013ab6:	int3   
 1013ab7:	int3   
 1013ab8:	int3   
 1013ab9:	int3   
 1013aba:	int3   
 1013abb:	rex push rbp
 1013abd:	sub    rsp,0x20
 1013ac1:	mov    rbp,rdx
 1013ac4:	mov    ecx,0x8
 1013ac9:	call   0x1011722
 1013ace:	nop
 1013acf:	add    rsp,0x20
 1013ad3:	pop    rbp
 1013ad4:	ret    
 1013ad5:	int3   
 1013ad6:	int3   
 1013ad7:	int3   
 1013ad8:	int3   
 1013ad9:	int3   
 1013ada:	int3   
 1013adb:	int3   
 1013adc:	int3   
 1013add:	int3   
 1013ade:	int3   
 1013adf:	int3   
 1013ae0:	rex push rbp
 1013ae2:	sub    rsp,0x20
 1013ae6:	mov    rbp,rdx
 1013ae9:	mov    rax,QWORD PTR [rcx]
 1013aec:	xor    ecx,ecx
 1013aee:	cmp    DWORD PTR [rax],0xc0000005
 1013af4:	sete   cl
 1013af7:	mov    eax,ecx
 1013af9:	mov    eax,ecx
 1013afb:	add    rsp,0x20
 1013aff:	pop    rbp
 1013b00:	ret    
 1013b01:	int3   
 1013b02:	int3   
 1013b03:	int3   
 1013b04:	int3   
 1013b05:	int3   
 1013b06:	int3   
 1013b07:	int3   
 1013b08:	int3   
 1013b09:	int3   
 1013b0a:	int3   
 1013b0b:	int3   
 1013b0c:	int3   
 1013b0d:	int3   
 1013b0e:	int3   
 1013b0f:	int3   
 1013b10:	int3   
 1013b11:	int3   
 1013b12:	int3   
 1013b13:	int3   
 1013b14:	int3   
 1013b15:	int3   
 1013b16:	int3   
 1013b17:	int3   
 1013b18:	int3   
 1013b19:	int3   
 1013b1a:	int3   
 1013b1b:	int3   
 1013b1c:	int3   
 1013b1d:	int3   
 1013b1e:	int3   
 1013b1f:	int3   
 1013b20:	sub    rsp,0x28
 1013b24:	lea    rcx,[rip+0x7b4d]        # 0x101b678
 1013b2b:	xor    edx,edx
 1013b2d:	call   QWORD PTR [rip+0xfffffffffffed5ed]        # 0x1001120
 1013b33:	lea    rcx,[rip+0x76]        # 0x1013bb0
 1013b3a:	mov    DWORD PTR [rip+0x7b34],eax        # 0x101b674
 1013b40:	add    rsp,0x28
 1013b44:	jmp    0x1011254
 1013b49:	int3   
 1013b4a:	int3   
 1013b4b:	int3   
 1013b4c:	int3   
 1013b4d:	int3   
 1013b4e:	int3   
 1013b4f:	int3   
 1013b50:	sub    rsp,0x28
 1013b54:	lea    rcx,[rip+0x7b45]        # 0x101b6a0
 1013b5b:	call   0x1008b90
 1013b60:	lea    rcx,[rip+0x79]        # 0x1013be0
 1013b67:	add    rsp,0x28
 1013b6b:	jmp    0x1011254
 1013b70:	int3   
 1013b71:	int3   
 1013b72:	int3   
 1013b73:	int3   
 1013b74:	int3   
 1013b75:	int3   
 1013b76:	int3   
 1013b77:	int3   
 1013b78:	int3   
 1013b79:	int3   
 1013b7a:	int3   
 1013b7b:	int3   
 1013b7c:	int3   
 1013b7d:	int3   
 1013b7e:	int3   
 1013b7f:	int3   
 1013b80:	sub    rsp,0x28
 1013b84:	call   0x1012df0
 1013b89:	mov    DWORD PTR [rip+0x2a6b5],eax        # 0x103e244
 1013b8f:	add    rsp,0x28
 1013b93:	ret    
 1013b94:	int3   
 1013b95:	int3   
 1013b96:	int3   
 1013b97:	int3   
 1013b98:	int3   
 1013b99:	int3   
 1013b9a:	int3   
 1013b9b:	int3   
 1013b9c:	int3   
 1013b9d:	int3   
 1013b9e:	int3   
 1013b9f:	int3   
 1013ba0:	int3   
 1013ba1:	int3   
 1013ba2:	int3   
 1013ba3:	int3   
 1013ba4:	int3   
 1013ba5:	int3   
 1013ba6:	int3   
 1013ba7:	int3   
 1013ba8:	int3   
 1013ba9:	int3   
 1013baa:	int3   
 1013bab:	int3   
 1013bac:	int3   
 1013bad:	int3   
 1013bae:	int3   
 1013baf:	int3   
 1013bb0:	sub    rsp,0x28
 1013bb4:	lea    rcx,[rip+0x3695]        # 0x1017250
 1013bbb:	call   0x10080b0
 1013bc0:	mov    rcx,QWORD PTR [rip+0x3a99]        # 0x1017660
 1013bc7:	test   rcx,rcx
 1013bca:	je     0x1013bd2
 1013bcc:	call   QWORD PTR [rip+0xfffffffffffed506]        # 0x10010d8
 1013bd2:	add    rsp,0x28
 1013bd6:	ret    
 1013bd7:	int3   
 1013bd8:	int3   
 1013bd9:	int3   
 1013bda:	int3   
 1013bdb:	int3   
 1013bdc:	int3   
 1013bdd:	int3   
 1013bde:	int3   
 1013bdf:	int3   
 1013be0:	sub    rsp,0x28
 1013be4:	mov    rcx,QWORD PTR [rip+0x7abd]        # 0x101b6a8
 1013beb:	cmp    rcx,0xffffffffffffffff
 1013bef:	je     0x1013c02
 1013bf1:	call   QWORD PTR [rip+0xfffffffffffed4e1]        # 0x10010d8
 1013bf7:	mov    QWORD PTR [rip+0x7aa6],0xffffffffffffffff        # 0x101b6a8
 1013c02:	mov    rcx,QWORD PTR [rip+0x80f7]        # 0x101bd00
 1013c09:	cmp    rcx,0xffffffffffffffff
 1013c0d:	je     0x1013c36
 1013c0f:	call   QWORD PTR [rip+0xfffffffffffed4c3]        # 0x10010d8
 1013c15:	cmp    DWORD PTR [rip+0x7a84],0x5        # 0x101b6a0
 1013c1c:	mov    QWORD PTR [rip+0x80d9],0xffffffffffffffff        # 0x101bd00
 1013c27:	jae    0x1013c36
 1013c29:	lea    rcx,[rip+0x7cba]        # 0x101b8ea
 1013c30:	call   QWORD PTR [rip+0xfffffffffffed4fa]        # 0x1001130
 1013c36:	mov    rcx,QWORD PTR [rip+0xf363]        # 0x1022fa0
 1013c3d:	mov    DWORD PTR [rip+0x7a59],0x6        # 0x101b6a0
 1013c47:	test   rcx,rcx
 1013c4a:	je     0x1013c51
 1013c4c:	call   0x1011190
 1013c51:	add    rsp,0x28
 1013c55:	ret    
 1013c56:	int3   
 1013c57:	int3   
 1013c58:	add    DWORD PTR [rdx],ecx
 1013c5a:	add    al,0x0
 1013c5c:	or     dh,BYTE PTR [rdx+rax*1+0x0]
 1013c60:	add    eax,0x1000134
 1013c65:	or     al,BYTE PTR [rax+rax*1]
 1013c68:	or     dh,BYTE PTR [rdi+rax*1]
 1013c6b:	add    BYTE PTR [rdx],cl
 1013c6d:	xor    al,BYTE PTR [rsi]
 1013c6f:	(bad)  
 1013c70:	and    DWORD PTR [rip+0x74050002],eax        # 0x75063c78
 1013c76:	(bad)  
 1013c77:	add    BYTE PTR [rax-0x57ffff8b],al
 1013c7d:	jne    0x1013c7f
 1013c7f:	add    BYTE PTR [rsp+rdi*1+0x1],ah
 1013c83:	add    BYTE PTR [rcx],ah
 1013c85:	add    BYTE PTR [rdx],al
 1013c87:	add    BYTE PTR [rax],al
 1013c89:	je     0x1013c91
 1013c8b:	add    BYTE PTR [rax-0x57ffff8b],al
 1013c91:	jne    0x1013c93
 1013c93:	add    BYTE PTR [rsp+rdi*1+0x1],ah
 1013c97:	add    BYTE PTR [rcx],ah
 1013c99:	add    BYTE PTR [rax],al
 1013c9b:	add    BYTE PTR [rax-0x57ffff8b],al
 1013ca1:	jne    0x1013ca3
 1013ca3:	add    BYTE PTR [rsp+rdi*1+0x1],ah
 1013ca7:	add    BYTE PTR [rcx],al
 1013ca9:	adc    BYTE PTR [rbx],al
 1013cab:	add    BYTE PTR [rax],dl
 1013cad:	rex.X or al,0x60
 1013cb0:	or     esi,DWORD PTR [rax]
 1013cb2:	add    BYTE PTR [rax],al
 1013cb4:	and    DWORD PTR [rip+0x74050002],eax        # 0x75063cbc
 1013cba:	add    al,0x0
 1013cbc:	add    BYTE PTR [rsi+0x0],dh
 1013cbf:	add    BYTE PTR [rsi],ch
 1013cc1:	jbe    0x1013cc3
 1013cc3:	add    BYTE PTR [rax+0x2100013c],ch
 1013cc9:	add    BYTE PTR [rdx],al
 1013ccb:	add    BYTE PTR [rax],al
 1013ccd:	je     0x1013cd3
 1013ccf:	add    BYTE PTR [rax],al
 1013cd1:	jbe    0x1013cd3
 1013cd3:	add    BYTE PTR [rsi],ch
 1013cd5:	jbe    0x1013cd7
 1013cd7:	add    BYTE PTR [rax+0x2100013c],ch
 1013cdd:	add    BYTE PTR [rax],al
 1013cdf:	add    BYTE PTR [rax],al
 1013ce1:	jbe    0x1013ce3
 1013ce3:	add    BYTE PTR [rsi],ch
 1013ce5:	jbe    0x1013ce7
 1013ce7:	add    BYTE PTR [rax+0x100013c],ch
 1013ced:	adc    al,0x8
 1013cef:	add    BYTE PTR [rsp+riz*2],dl
 1013cf2:	or     BYTE PTR [rax],al
 1013cf4:	adc    al,0x54
 1013cf6:	(bad)  
 1013cf7:	add    BYTE PTR [rsp+rsi*1],dl
 1013cfa:	(bad)  
 1013cfb:	add    BYTE PTR [rdx+rsi*1],dl
 1013cfe:	adc    BYTE PTR [rax+0x1],dh
 1013d01:	or     al,BYTE PTR [rax+rax*1]
 1013d04:	or     dh,BYTE PTR [rsi+rax*1]
 1013d07:	add    BYTE PTR [rdx],cl
 1013d09:	xor    al,BYTE PTR [rsi]
 1013d0b:	jo     0x1013d26
 1013d0d:	and    DWORD PTR [rdi],eax
 1013d0f:	add    BYTE PTR [rdi],cl
 1013d11:	xor    al,0x9b
 1013d13:	add    BYTE PTR [rdi],cl
 1013d15:	add    DWORD PTR [rax+rax*1+0x60077008],edx
 1013d1c:	(bad)  
 1013d1d:	push   rax
 1013d1e:	add    BYTE PTR [rax],al
 1013d20:	in     al,dx
 1013d21:	adc    al,BYTE PTR [rcx]
 1013d23:	add    BYTE PTR [rax+0x19000004],dl
 1013d29:	sbb    al,0x4
 1013d2b:	add    BYTE PTR [rdx],cl
 1013d2d:	add    DWORD PTR [rbx+0x2700300],edx
 1013d33:	xor    ah,ch
 1013d35:	adc    al,BYTE PTR [rcx]
 1013d37:	add    BYTE PTR [rax+0x21000004],al
 1013d3d:	or     BYTE PTR [rdx],al
 1013d3f:	add    BYTE PTR [rax],cl
 1013d41:	fs xchg edx,eax
 1013d43:	add    BYTE PTR [rax-0x4cffff86],al
 1013d49:	jp     0x1013d4b
 1013d4b:	add    BYTE PTR [rax],ch
 1013d4d:	cmp    eax,0x210001
 1013d52:	add    BYTE PTR [rax],al
 1013d54:	cmp    BYTE PTR [rdx+0x0],0x0
 1013d58:	mov    bl,0x7a
 1013d5a:	add    BYTE PTR [rax],al
 1013d5c:	sub    BYTE PTR [rip+0x1e190001],bh        # 0x1f1a3d63
 1013d62:	(bad)  
 1013d63:	add    BYTE PTR [rcx+rax*1],cl
 1013d66:	sbb    DWORD PTR [rcx],eax
 1013d68:	add    eax,0x3600470
 1013d6d:	push   rax
 1013d6e:	add    dh,BYTE PTR [rax]
 1013d70:	in     al,dx
 1013d71:	adc    al,BYTE PTR [rcx]
 1013d73:	add    BYTE PTR [rax+0x19000008],dh
 1013d79:	and    al,0x7
 1013d7b:	add    BYTE PTR [rdx],dl
 1013d7d:	fs push rdi
 1013d7f:	add    BYTE PTR [rdx],dl
 1013d81:	xor    al,0x56
 1013d83:	add    BYTE PTR [rdx],dl
 1013d85:	add    DWORD PTR [rdx+0x0],edx
 1013d88:	or     esi,DWORD PTR [rax+0x0]
 1013d8b:	add    BYTE PTR [rax],dl
 1013d8d:	adc    eax,DWORD PTR [rcx]
 1013d8f:	add    BYTE PTR [rcx],al
 1013d91:	add    BYTE PTR [rax],al
 1013d93:	add    BYTE PTR [rbp+0x1e00007d],al
 1013d99:	jle    0x1013d9b
 1013d9b:	add    BYTE PTR [rax+0x3a],dh
 1013d9e:	add    DWORD PTR [rax],eax
 1013da0:	add    BYTE PTR [rax],al
 1013da2:	add    BYTE PTR [rax],al
 1013da4:	(bad)  
 1013da5:	add    al,BYTE PTR [rax]
 1013da7:	add    BYTE PTR [rcx],al
 1013da9:	(bad)  
 1013daa:	add    al,BYTE PTR [rax]
 1013dac:	(bad)  
 1013dad:	xor    al,BYTE PTR [rdx]
 1013daf:	push   rax
 1013db0:	add    DWORD PTR [rcx+rax*1],eax
 1013db3:	add    BYTE PTR [rdx+rax*2],al
 1013db6:	add    BYTE PTR [rax],al
 1013db8:	add    DWORD PTR [rdx],ebx
 1013dba:	or     DWORD PTR [rax],eax
 1013dbc:	sbb    al,BYTE PTR [rdx+0x16]
 1013dbf:	lock adc al,0xe0
 1013dc2:	adc    dl,al
 1013dc4:	adc    al,al
 1013dc6:	(bad)  
 1013dc7:	jo     0x1013dd6
 1013dc9:	(bad)  
 1013dca:	or     al,0x50
 1013dcc:	or     esi,DWORD PTR [rax]
 1013dce:	add    BYTE PTR [rax],al
 1013dd0:	add    DWORD PTR [rsi],eax
 1013dd2:	add    al,BYTE PTR [rax]
 1013dd4:	(bad)  
 1013dd5:	push   rdx
 1013dd6:	add    dh,BYTE PTR [rax+0x21]
 1013dd9:	add    eax,0x34050002
 1013dde:	or     DWORD PTR [rax],eax
 1013de0:	mov    al,0x80
 1013de2:	add    BYTE PTR [rax],al
 1013de4:	lock add BYTE PTR [rax],0x0
 1013de8:	sar    BYTE PTR [rip+0x210001],1        # 0x1223def
 1013dee:	add    BYTE PTR [rax],al
 1013df0:	mov    al,0x80
 1013df2:	add    BYTE PTR [rax],al
 1013df4:	lock add BYTE PTR [rax],0x0
 1013df8:	sar    BYTE PTR [rip+0x29190001],1        # 0x2a1a3dff
 1013dfe:	or     DWORD PTR [rax],eax
 1013e00:	(bad)  
 1013e01:	fs push rbx
 1013e03:	add    BYTE PTR [rdi],dl
 1013e05:	push   rsp
 1013e06:	push   rdx
 1013e07:	add    BYTE PTR [rdi],dl
 1013e09:	xor    al,0x51
 1013e0b:	add    BYTE PTR [rdi],dl
 1013e0d:	add    DWORD PTR [rsi+0x0],ecx
 1013e10:	adc    BYTE PTR [rax+0x0],dh
 1013e13:	add    ah,ch
 1013e15:	adc    al,BYTE PTR [rcx]
 1013e17:	add    BYTE PTR [rax+0x2],ah
 1013e1a:	add    BYTE PTR [rax],al
 1013e1c:	sbb    DWORD PTR [rdx],ebp
 1013e1e:	or     eax,DWORD PTR [rax]
 1013e20:	sbb    al,0x34
 1013e22:	add    BYTE PTR es:[rcx+rax*1],bl
 1013e26:	sbb    al,0x0
 1013e28:	adc    al,dh
 1013e2a:	(bad)  
 1013e2b:	loopne 0x1013e39
 1013e2d:	ror    BYTE PTR [rdx],1
 1013e2f:	ror    BYTE PTR [rax],0x70
 1013e32:	(bad)  
 1013e33:	(bad)  
 1013e34:	(bad)  
 1013e35:	push   rax
 1013e36:	add    BYTE PTR [rax],al
 1013e38:	in     al,dx
 1013e39:	adc    al,BYTE PTR [rcx]
 1013e3b:	add    al,dl
 1013e3d:	add    BYTE PTR [rax],al
 1013e3f:	add    BYTE PTR [rcx],al
 1013e41:	add    al,0x1
 1013e43:	add    BYTE PTR [rdx+rax*2],al
 1013e46:	add    BYTE PTR [rax],al
 1013e48:	add    DWORD PTR [rcx+rax*1],eax
 1013e4b:	add    BYTE PTR [rdx+rax*2],al
 1013e4e:	add    BYTE PTR [rax],al
 1013e50:	add    DWORD PTR [rax],edx
 1013e52:	(bad)  
 1013e53:	add    BYTE PTR [rax],dl
 1013e55:	je     0x1013e60
 1013e57:	add    BYTE PTR [rax],dl
 1013e59:	xor    al,0x8
 1013e5b:	add    BYTE PTR [rax],dl
 1013e5d:	xor    cl,BYTE PTR [rax+riz*8]
 1013e60:	and    DWORD PTR [rip+0x64050002],eax        # 0x65063e68
 1013e66:	(bad)  
 1013e67:	add    BYTE PTR [rax],dh
 1013e69:	test   DWORD PTR [rax],eax
 1013e6b:	add    BYTE PTR [rbp+0x50000085],cl
 1013e71:	add    DWORD PTR ds:[rax],eax
 1013e74:	and    DWORD PTR [rip+0x54050002],eax        # 0x55063e7c
 1013e7a:	(bad)  
 1013e7b:	add    BYTE PTR [rbp-0x1affff7b],cl
 1013e81:	test   DWORD PTR [rax],eax
 1013e83:	add    BYTE PTR [rax+0x3e],ah
 1013e86:	add    DWORD PTR [rax],eax
 1013e88:	and    DWORD PTR [rax],eax
 1013e8a:	add    BYTE PTR [rax],al
 1013e8c:	lea    eax,[rbp-0x7a1b0000]
 1013e92:	add    BYTE PTR [rax],al
 1013e94:	(bad)  
 1013e95:	add    DWORD PTR ds:[rax],eax
 1013e98:	and    DWORD PTR [rax],eax
 1013e9a:	add    al,0x0
 1013e9c:	add    BYTE PTR [rdi+rax*1+0x0],ah
 1013ea0:	add    BYTE PTR [rsi+rax*1+0x0],dl
 1013ea4:	xor    BYTE PTR [rbp-0x7a730000],al
 1013eaa:	add    BYTE PTR [rax],al
 1013eac:	push   rax
 1013ead:	add    DWORD PTR ds:[rax],eax
 1013eb0:	add    DWORD PTR [rdx],ecx
 1013eb2:	add    al,0x0
 1013eb4:	or     dh,BYTE PTR [rdx+rax*1+0x0]
 1013eb8:	add    eax,0x1000134
 1013ebd:	(bad)  
 1013ebe:	add    al,BYTE PTR [rax]
 1013ec0:	(bad)  
 1013ec1:	xor    al,BYTE PTR [rdx]
 1013ec3:	xor    BYTE PTR [rcx],al
 1013ec5:	adc    cl,BYTE PTR [rax]
 1013ec7:	add    BYTE PTR [rdx],dl
 1013ec9:	push   rsp
 1013eca:	adc    DWORD PTR [rax],eax
 1013ecc:	adc    dh,BYTE PTR [rax+rdx*1]
 1013ecf:	add    BYTE PTR [rdx],dl
 1013ed1:	xchg   edx,eax
 1013ed2:	(bad)  
 1013ed3:	loopne 0x1013ee1
 1013ed5:	jo     0x1013ee2
 1013ed7:	(bad)  
 1013ed8:	add    DWORD PTR [rax],ecx
 1013eda:	add    eax,DWORD PTR [rax]
 1013edc:	or     BYTE PTR [rdx+0x6002e004],al
 1013ee2:	add    BYTE PTR [rax],al
 1013ee4:	and    DWORD PTR [rax+rcx*1],edx
 1013ee7:	add    BYTE PTR [rsp+rsi*8],dl
 1013eea:	(bad)  
 1013eeb:	add    BYTE PTR [rdi],cl
 1013eed:	(bad)  
 1013eee:	(bad)  
 1013eef:	add    BYTE PTR [rdx],cl
 1013ef1:	je     0x1013efb
 1013ef3:	add    BYTE PTR [rip+0xffffffffe0000c34],al        # 0xffffffffe1014b2d
 1013ef9:	mov    DWORD PTR [rax],eax
 1013efb:	add    al,ch
 1013efd:	mov    DWORD PTR [rax],eax
 1013eff:	add    al,bl
 1013f01:	add    DWORD PTR ds:[rax],eax
 1013f04:	and    DWORD PTR [rip+0x54050002],eax        # 0x55063f0c
 1013f0a:	(bad)  
 1013f0b:	add    al,ch
 1013f0d:	mov    DWORD PTR [rax],eax
 1013f0f:	add    BYTE PTR [rcx],dl
 1013f11:	mov    al,BYTE PTR [rax]
 1013f13:	add    ah,ah
 1013f15:	add    DWORD PTR ds:[rax],eax
 1013f18:	and    DWORD PTR [rax],eax
 1013f1a:	add    BYTE PTR [rax],al
 1013f1c:	call   0x12013faa
 1013f21:	mov    al,BYTE PTR [rax]
 1013f23:	add    ah,ah
 1013f25:	add    DWORD PTR ds:[rax],eax
 1013f28:	and    DWORD PTR [rax],eax
 1013f2a:	add    al,0x0
 1013f2c:	add    ah,dh
 1013f2e:	(bad)  
 1013f2f:	add    BYTE PTR [rax],al
 1013f31:	je     0x1013f3b
 1013f33:	add    al,ah
 1013f35:	mov    DWORD PTR [rax],eax
 1013f37:	add    al,ch
 1013f39:	mov    DWORD PTR [rax],eax
 1013f3b:	add    al,bl
 1013f3d:	add    DWORD PTR ds:[rax],eax
 1013f40:	and    DWORD PTR [rax],eax
 1013f42:	or     al,BYTE PTR [rax]
 1013f44:	add    ah,dh
 1013f46:	(bad)  
 1013f47:	add    BYTE PTR [rax],al
 1013f49:	(bad)  
 1013f4a:	(bad)  
 1013f4b:	add    BYTE PTR [rax],al
 1013f4d:	je     0x1013f57
 1013f4f:	add    BYTE PTR [rax],al
 1013f51:	push   rsp
 1013f52:	(bad)  
 1013f53:	add    BYTE PTR [rax],al
 1013f55:	xor    al,0xc
 1013f57:	add    al,ah
 1013f59:	mov    DWORD PTR [rax],eax
 1013f5b:	add    al,ch
 1013f5d:	mov    DWORD PTR [rax],eax
 1013f5f:	add    al,bl
 1013f61:	add    DWORD PTR ds:[rax],eax
 1013f64:	and    DWORD PTR [rax],eax
 1013f66:	add    al,0x0
 1013f68:	add    ah,dh
 1013f6a:	(bad)  
 1013f6b:	add    BYTE PTR [rax],al
 1013f6d:	je     0x1013f77
 1013f6f:	add    al,ah
 1013f71:	mov    DWORD PTR [rax],eax
 1013f73:	add    al,ch
 1013f75:	mov    DWORD PTR [rax],eax
 1013f77:	add    al,bl
 1013f79:	add    DWORD PTR ds:[rax],eax
 1013f7c:	and    DWORD PTR [rax],eax
 1013f7e:	add    BYTE PTR [rax],al
 1013f80:	loopne 0x1013f0b
 1013f82:	add    BYTE PTR [rax],al
 1013f84:	call   0xffffffffd9014012
 1013f89:	add    DWORD PTR ds:[rax],eax
 1013f8c:	add    DWORD PTR [rdx],ecx
 1013f8e:	add    al,0x0
 1013f90:	or     dh,BYTE PTR [rsi+rax*1]
 1013f93:	add    BYTE PTR [rdx],cl
 1013f95:	xor    al,BYTE PTR [rsi]
 1013f97:	jo     0x1013f9a
 1013f99:	clts   
 1013f9b:	add    BYTE PTR [rdi],cl
 1013f9d:	or     DWORD PTR fs:[rax],eax
 1013fa0:	sysenter 
 1013fa2:	or     BYTE PTR [rax],al
 1013fa4:	rsqrtps xmm1,XMMWORD PTR [rbx]
 1013fa7:	jo     0x1013faa
 1013fa9:	(bad)  
 1013faa:	add    al,BYTE PTR [rax]
 1013fac:	(bad)  
 1013fad:	xor    al,BYTE PTR [rdx]
 1013faf:	xor    BYTE PTR [rcx],ah
 1013fb1:	add    eax,0x64050002
 1013fb6:	(bad)  
 1013fb7:	add    BYTE PTR [rax],dl
 1013fb9:	nop
 1013fba:	add    BYTE PTR [rax],al
 1013fbc:	and    dl,BYTE PTR [rax+0x3fa80000]
 1013fc2:	add    DWORD PTR [rax],eax
 1013fc4:	and    DWORD PTR [rip+0x74050002],eax        # 0x75063fcc
 1013fca:	(bad)  
 1013fcb:	add    BYTE PTR [rdx],ah
 1013fcd:	nop
 1013fce:	add    BYTE PTR [rax],al
 1013fd0:	(bad)  
 1013fd1:	nop
 1013fd2:	add    BYTE PTR [rax],al
 1013fd4:	mov    al,0x3f
 1013fd6:	add    DWORD PTR [rax],eax
 1013fd8:	and    DWORD PTR [rax],eax
 1013fda:	add    BYTE PTR [rax],al
 1013fdc:	and    dl,BYTE PTR [rax-0x6fd90000]
 1013fe2:	add    BYTE PTR [rax],al
 1013fe4:	mov    al,0x3f
 1013fe6:	add    DWORD PTR [rax],eax
 1013fe8:	and    DWORD PTR [rax],eax
 1013fea:	add    BYTE PTR [rax],al
 1013fec:	adc    BYTE PTR [rax-0x6fde0000],dl
 1013ff2:	add    BYTE PTR [rax],al
 1013ff4:	test   al,0x3f
 1013ff6:	add    DWORD PTR [rax],eax
 1013ff8:	sbb    DWORD PTR [rdi],ebx
 1013ffa:	add    eax,0x31340d00
 1013fff:	add    BYTE PTR [rip+0x6002e01],cl        # 0x7016e06
 1014005:	jo     0x1014007
 1014007:	add    ah,ch
 1014009:	adc    al,BYTE PTR [rcx]
 101400b:	add    BYTE PTR [rax+0x1],ah
 101400e:	add    BYTE PTR [rax],al
 1014010:	sbb    DWORD PTR [rdi+rax*1],esp
 1014013:	add    BYTE PTR [rdx],dl
 1014015:	lgdt   fs:[rdx]
 1014019:	xor    al,0xe
 101401b:	add    DWORD PTR [rdx],edx
 101401d:	add    DWORD PTR [rdx],ecx
 101401f:	add    DWORD PTR [rbx],ecx
 1014021:	jo     0x1014023
 1014023:	add    ah,ch
 1014025:	adc    al,BYTE PTR [rcx]
 1014027:	add    BYTE PTR [rax+0x8],al
 101402a:	add    BYTE PTR [rax],al
 101402c:	sbb    DWORD PTR [rbx],esp
 101402e:	add    eax,DWORD PTR [rax]
 1014030:	adc    DWORD PTR [rcx],eax
 1014032:	adc    al,0x1
 1014034:	or     dh,BYTE PTR [rax]
 1014036:	add    BYTE PTR [rax],al
 1014038:	in     al,dx
 1014039:	adc    al,BYTE PTR [rcx]
 101403b:	add    BYTE PTR [rax+0x19000008],dl
 1014041:	and    eax,DWORD PTR [rbx]
 1014043:	add    BYTE PTR [rcx],dl
 1014045:	add    DWORD PTR [rcx+rax*1],edx
 1014048:	or     dh,BYTE PTR [rax]
 101404a:	add    BYTE PTR [rax],al
 101404c:	in     al,dx
 101404d:	adc    al,BYTE PTR [rcx]
 101404f:	add    BYTE PTR [rax+0x19000008],dl
 1014055:	adc    eax,0xb2060002
 101405a:	add    dh,BYTE PTR [rax-0x14]
 101405d:	adc    al,BYTE PTR [rcx]
 101405f:	add    BYTE PTR [rax+0x0],bl
 1014062:	add    BYTE PTR [rax],al
 1014064:	and    DWORD PTR [rip+0x34050002],eax        # 0x3506406c
 101406a:	(bad)  
 101406c:	lock xchg esi,eax
 101406e:	add    BYTE PTR [rax],al
 1014070:	xor    DWORD PTR [rdi+0x40540000],edx
 1014076:	add    DWORD PTR [rax],eax
 1014078:	and    DWORD PTR [rax],eax
 101407a:	add    BYTE PTR [rax],al
 101407c:	lock xchg esi,eax
 101407e:	add    BYTE PTR [rax],al
 1014080:	xor    DWORD PTR [rdi+0x40540000],edx
 1014086:	add    DWORD PTR [rax],eax
 1014088:	add    DWORD PTR [rbx+0xb],eax
 101408b:	add    BYTE PTR [rbx-0xc],al
 101408e:	or     BYTE PTR [rax],al
 1014090:	(bad)  
 1014091:	in     al,0xe
 1014093:	add    BYTE PTR [rdx],dh
 1014095:	je     0x10140a4
 1014097:	add    BYTE PTR [rax],ch
 1014099:	push   rsp
 101409a:	or     al,0x0
 101409c:	(bad)  
 101409d:	(bad)  
 101409e:	add    esp,DWORD PTR [rax+0x2]
 10140a1:	xor    BYTE PTR [rax],al
 10140a3:	add    BYTE PTR [rcx],al
 10140a5:	add    al,0x1
 10140a7:	add    BYTE PTR [rdx+rax*2],al
 10140aa:	add    BYTE PTR [rax],al
 10140ac:	sbb    DWORD PTR [rdx],esp
 10140ae:	or     BYTE PTR [rax],al
 10140b0:	adc    esp,DWORD PTR [rcx+rdx*1+0x0]
 10140b4:	adc    edx,DWORD PTR [rax+rdx*1+0x0]
 10140b8:	adc    edx,DWORD PTR [rdx-0x1ff20ff1]
 10140be:	or     esi,DWORD PTR [rax-0x14]
 10140c1:	adc    al,BYTE PTR [rcx]
 10140c3:	add    BYTE PTR [rax+0x0],al
 10140c6:	add    BYTE PTR [rax],al
 10140c8:	and    DWORD PTR [rip+0x34050002],eax        # 0x350640d0
 10140ce:	(bad)  
 10140d0:	mov    al,0x9a
 10140d2:	add    BYTE PTR [rax],al
 10140d4:	outs   dx,DWORD PTR ds:[rsi]
 10140d5:	fwait
 10140d6:	add    BYTE PTR [rax],al
 10140d8:	lods   al,BYTE PTR ds:[rsi]
 10140d9:	rex add DWORD PTR [rax],eax
 10140dc:	and    DWORD PTR [rax],eax
 10140de:	add    BYTE PTR [rax],al
 10140e0:	mov    al,0x9a
 10140e2:	add    BYTE PTR [rax],al
 10140e4:	outs   dx,DWORD PTR ds:[rsi]
 10140e5:	fwait
 10140e6:	add    BYTE PTR [rax],al
 10140e8:	lods   al,BYTE PTR ds:[rsi]
 10140e9:	rex add DWORD PTR [rax],eax
 10140ec:	and    DWORD PTR [rax],eax
 10140ee:	add    al,BYTE PTR [rax]
 10140f0:	add    BYTE PTR [rdi+rcx*1],dh
 10140f3:	add    BYTE PTR [rax+0x6f00009a],dh
 10140f9:	fwait
 10140fa:	add    BYTE PTR [rax],al
 10140fc:	lods   al,BYTE PTR ds:[rsi]
 10140fd:	rex add DWORD PTR [rax],eax
 1014100:	add    DWORD PTR [rsi],eax
 1014102:	add    al,BYTE PTR [rax]
 1014104:	(bad)  
 1014105:	xor    al,BYTE PTR [rdx]
 1014107:	xor    BYTE PTR [rcx],ah
 1014109:	add    eax,0x74050002
 101410e:	(bad)  
 101410f:	add    al,dl
 1014111:	pushf  
 1014112:	add    BYTE PTR [rax],al
 1014114:	loop   0x10140b2
 1014116:	add    BYTE PTR [rax],al
 1014118:	add    BYTE PTR [rcx+0x1],al
 101411b:	add    BYTE PTR [rcx],ah
 101411d:	add    BYTE PTR [rax],al
 101411f:	add    al,dl
 1014121:	pushf  
 1014122:	add    BYTE PTR [rax],al
 1014124:	loop   0x10140c2
 1014126:	add    BYTE PTR [rax],al
 1014128:	add    BYTE PTR [rcx+0x1],al
 101412b:	add    BYTE PTR [rcx],bl
 101412d:	adc    eax,0xb2060002
 1014132:	add    dh,BYTE PTR [rax]
 1014134:	in     al,dx
 1014135:	adc    al,BYTE PTR [rcx]
 1014137:	add    BYTE PTR [rax+0x0],dl
 101413a:	add    BYTE PTR [rax],al
 101413c:	and    DWORD PTR [rip+0x740d0004],ecx        # 0x750e4146
 1014142:	adc    BYTE PTR [rax],al
 1014144:	add    eax,0x60000f64
 1014149:	popf   
 101414a:	add    BYTE PTR [rax],al
 101414c:	movabs ds:0x210001412c00009d,al
 1014155:	add    BYTE PTR [rax],al
 1014157:	add    BYTE PTR [rax-0x63],ah
 101415a:	add    BYTE PTR [rax],al
 101415c:	movabs ds:0x190001412c00009d,al
 1014165:	sbb    DWORD PTR [rax+rax*1],eax
 1014168:	or     dh,BYTE PTR [rcx*1+0x6920a00]
 101416f:	jo     0x101415d
 1014171:	adc    al,BYTE PTR [rcx]
 1014173:	add    BYTE PTR [rax+0x0],al
 1014176:	add    BYTE PTR [rax],al
 1014178:	add    DWORD PTR [rsi],eax
 101417a:	add    al,BYTE PTR [rax]
 101417c:	(bad)  
 101417d:	push   rdx
 101417e:	add    dh,BYTE PTR [rax]
 1014180:	and    DWORD PTR [rip+0x74050002],eax        # 0x75064188
 1014186:	or     BYTE PTR [rax],al
 1014188:	(bad)  
 1014189:	movabs al,ds:0x41780000a0e10000
 1014192:	add    DWORD PTR [rax],eax
 1014194:	and    DWORD PTR [rax],eax
 1014196:	add    al,BYTE PTR [rax]
 1014198:	add    BYTE PTR [rax+rcx*1+0x0],dh
 101419c:	(bad)  
 101419d:	movabs al,ds:0x41780000a0e10000
 10141a6:	add    DWORD PTR [rax],eax
 10141a8:	add    DWORD PTR [rsi+rax*1],ecx
 10141ab:	add    BYTE PTR [rdx+rsi*2],cl
 10141ae:	or     al,ah
 10141b0:	(bad)  
 10141b1:	rol    BYTE PTR [rax+rsi*2],1
 10141b4:	add    edx,DWORD PTR [rax+0x2]
 10141b7:	xor    BYTE PTR [rcx],ah
 10141b9:	sub    DWORD PTR [rsi],eax
 10141bb:	add    BYTE PTR [rcx],ch
 10141bd:	hlt    
 10141be:	(bad)  
 10141bf:	add    BYTE PTR [rdx],cl
 10141c1:	(bad)  
 10141c2:	(bad)  
 10141c3:	add    BYTE PTR [rip+0xffffffff90000f64],al        # 0xffffffff9101512d
 10141c9:	movabs eax,ds:0x41a80000a1eb0000
 10141d2:	add    DWORD PTR [rax],eax
 10141d4:	and    DWORD PTR [rax],eax
 10141d6:	add    BYTE PTR [rax],al
 10141d8:	nop
 10141d9:	movabs eax,ds:0x41a80000a1eb0000
 10141e2:	add    DWORD PTR [rax],eax
 10141e4:	and    DWORD PTR [rax],eax
 10141e6:	(bad)  
 10141e7:	add    BYTE PTR [rax],al
 10141e9:	hlt    
 10141ea:	(bad)  
 10141eb:	add    BYTE PTR [rax],al
 10141ed:	(bad)  
 10141ee:	(bad)  
 10141ef:	add    BYTE PTR [rax],al
 10141f1:	lldt   WORD PTR fs:[rax-0x14ffff5f]
 10141f9:	movabs eax,ds:0x2b19000141a80000
 1014202:	or     eax,DWORD PTR [rax]
 1014204:	sbb    DWORD PTR [rsi+rdx*2+0x1],edx
 1014208:	sbb    DWORD PTR [rdx*2+0x4e011901],esi
 101420f:	add    DWORD PTR [rdx],edx
 1014211:	lock adc al,ah
 1014214:	(bad)  
 1014215:	ror    BYTE PTR [rax+rsi*2],0xb
 1014219:	(bad)  
 101421a:	add    BYTE PTR [rax],al
 101421c:	in     al,dx
 101421d:	adc    al,BYTE PTR [rcx]
 101421f:	add    BYTE PTR [rax+0xa],ah
 1014222:	add    BYTE PTR [rax],al
 1014224:	sbb    DWORD PTR [rbx],ebx
 1014226:	add    eax,DWORD PTR [rax]
 1014228:	or     DWORD PTR [rcx],eax
 101422a:	or     al,BYTE PTR [rcx]
 101422c:	add    dh,BYTE PTR [rax]
 101422e:	add    BYTE PTR [rax],al
 1014230:	in     al,dx
 1014231:	adc    al,BYTE PTR [rcx]
 1014233:	add    BYTE PTR [rax+0x8],al
 1014236:	add    BYTE PTR [rax],al
 1014238:	and    DWORD PTR [rax+0x64980004],ebx
 101423e:	(bad)  
 101423f:	add    DWORD PTR [rax],ecx
 1014241:	push   rsp
 1014242:	or     eax,0xae3001
 1014247:	add    BYTE PTR [rsi-0x52],bl
 101424a:	add    BYTE PTR [rax],al
 101424c:	and    al,0x42
 101424e:	add    DWORD PTR [rax],eax
 1014250:	and    DWORD PTR [rax],ecx
 1014252:	add    al,BYTE PTR [rax]
 1014254:	or     BYTE PTR [rdi+rcx*1+0x1],dh
 1014258:	pop    rsi
 1014259:	scas   al,BYTE PTR es:[rdi]
 101425a:	add    BYTE PTR [rax],al
 101425c:	or     al,0xaf
 101425e:	add    BYTE PTR [rax],al
 1014260:	cmp    BYTE PTR [rdx+0x1],al
 1014263:	add    BYTE PTR [rcx],ah
 1014265:	add    BYTE PTR [rax],al
 1014267:	add    BYTE PTR [rsi-0x52],bl
 101426a:	add    BYTE PTR [rax],al
 101426c:	or     al,0xaf
 101426e:	add    BYTE PTR [rax],al
 1014270:	cmp    BYTE PTR [rdx+0x1],al
 1014273:	add    BYTE PTR [rcx],ah
 1014275:	add    BYTE PTR [rax],al
 1014277:	add    BYTE PTR [rax],dh
 1014279:	scas   al,BYTE PTR es:[rdi]
 101427a:	add    BYTE PTR [rax],al
 101427c:	pop    rsi
 101427d:	scas   al,BYTE PTR es:[rdi]
 101427e:	add    BYTE PTR [rax],al
 1014280:	and    al,0x42
 1014282:	add    DWORD PTR [rax],eax
 1014284:	and    DWORD PTR [rax],eax
 1014286:	add    al,0x0
 1014288:	add    BYTE PTR [rsi+rcx*1+0x1],ah
 101428c:	add    BYTE PTR [rbp+rcx*1+0x1],dl
 1014290:	xor    BYTE PTR [rsi-0x51a20000],ch
 1014296:	add    BYTE PTR [rax],al
 1014298:	and    al,0x42
 101429a:	add    DWORD PTR [rax],eax
 101429c:	and    DWORD PTR [rax],eax
 101429e:	add    BYTE PTR [rax],al
 10142a0:	xor    BYTE PTR [rsi-0x51a20000],ch
 10142a6:	add    BYTE PTR [rax],al
 10142a8:	and    al,0x42
 10142aa:	add    DWORD PTR [rax],eax
 10142ac:	add    DWORD PTR [rdx],ecx
 10142ae:	add    al,0x0
 10142b0:	or     dh,BYTE PTR [rcx+rcx*1]
 10142b3:	add    BYTE PTR [rdx],cl
 10142b5:	xor    al,BYTE PTR [rsi]
 10142b7:	push   rax
 10142b8:	and    DWORD PTR [rdi],ecx
 10142ba:	(bad)  
 10142bb:	add    BYTE PTR [rdi],cl
 10142bd:	in     al,0x8
 10142bf:	add    BYTE PTR [rdx],cl
 10142c1:	je     0x10142ca
 10142c3:	add    BYTE PTR [rip+0xffffffffe0000664],al        # 0xffffffffe101492d
 10142c9:	mov    al,0x0
 10142cb:	add    BYTE PTR [rdx],al
 10142cd:	mov    cl,0x0
 10142cf:	add    BYTE PTR [rdx+rax*2+0x210001],ch
 10142d6:	add    BYTE PTR [rax],al
 10142d8:	loopne 0x101428a
 10142da:	add    BYTE PTR [rax],al
 10142dc:	add    dh,BYTE PTR [rcx+0x42ac0000]
 10142e2:	add    DWORD PTR [rax],eax
 10142e4:	add    DWORD PTR [rdi],ecx
 10142e6:	(bad)  
 10142e7:	add    BYTE PTR [rdi],cl
 10142e9:	or     al,BYTE PTR fs:[rax]
 10142ec:	sysenter 
 10142ee:	or     DWORD PTR [rax],eax
 10142f0:	rsqrtps xmm1,XMMWORD PTR [rbx]
 10142f3:	jo     0x1014316
 10142f5:	add    eax,0x54050002
 10142fa:	or     BYTE PTR [rax],al
 10142fc:	push   rax
 10142fd:	mov    ah,0x0
 10142ff:	add    BYTE PTR [rsi-0x1bffff4b],al
 1014305:	rex.X add DWORD PTR [rax],eax
 1014308:	sbb    DWORD PTR [rdi],ebx
 101430a:	(bad)  
 101430b:	add    BYTE PTR [rip+0x6010d01],cl        # 0x7025012
 1014311:	loopne 0x1014317
 1014313:	jo     0x1014318
 1014315:	(bad)  
 1014316:	add    dh,BYTE PTR [rax]
 1014318:	in     al,dx
 1014319:	adc    al,BYTE PTR [rcx]
 101431b:	add    BYTE PTR [rax+0x8],dl
 101431e:	add    BYTE PTR [rax],al
 1014320:	add    DWORD PTR [rax],ebx
 1014322:	or     al,BYTE PTR [rax]
 1014324:	sbb    BYTE PTR [rsp+rcx*1+0x0],ah
 1014328:	sbb    BYTE PTR [rbx+rcx*1+0x0],dl
 101432c:	sbb    BYTE PTR [rdx+rcx*1],dh
 101432f:	add    BYTE PTR [rax],bl
 1014331:	push   rdx
 1014332:	adc    al,0xf0
 1014334:	adc    ah,al
 1014336:	adc    BYTE PTR [rax+0x19],dh
 1014339:	sbb    eax,0x10b0005
 101433e:	or     al,0x1
 1014340:	add    al,0x70
 1014342:	add    esp,DWORD PTR [rax+0x2]
 1014345:	xor    BYTE PTR [rax],al
 1014347:	add    ah,ch
 1014349:	adc    al,BYTE PTR [rcx]
 101434b:	add    BYTE PTR [rax+0x8],dl
 101434e:	add    BYTE PTR [rax],al
 1014350:	sbb    DWORD PTR [rsi],ebp
 1014352:	or     DWORD PTR [rax],eax
 1014354:	sbb    eax,0x1d011c64
 1014359:	xor    al,0x1b
 101435b:	add    DWORD PTR [rip+0xe011601],ebx        # 0xf025962
 1014361:	loopne 0x101436f
 1014363:	jo     0x1014370
 1014365:	push   rax
 1014366:	add    BYTE PTR [rax],al
 1014368:	in     al,dx
 1014369:	adc    al,BYTE PTR [rcx]
 101436b:	add    BYTE PTR [rax+0x1000008],ah
 1014371:	clts   
 1014373:	add    BYTE PTR [rdi],cl
 1014375:	or     al,BYTE PTR fs:[rax]
 1014378:	sysenter 
 101437a:	or     BYTE PTR [rax],al
 101437c:	rsqrtps xmm1,XMMWORD PTR [rbx]
 101437f:	jo     0x101439a
 1014381:	(bad)  
 1014382:	add    eax,0x4c340d00
 1014387:	add    BYTE PTR [rip+0x6004a01],cl        # 0x7018d8e
 101438d:	jo     0x101438f
 101438f:	add    ah,ch
 1014391:	adc    al,BYTE PTR [rcx]
 1014393:	add    BYTE PTR [rax+0x2],al
 1014396:	add    BYTE PTR [rax],al
 1014398:	sbb    DWORD PTR [rdi+rax*1],esp
 101439b:	add    BYTE PTR [rdx],dl
 101439d:	push   rsp
 101439e:	sbb    eax,0x1c341200
 10143a3:	add    BYTE PTR [rdx],dl
 10143a5:	add    DWORD PTR [rax],ebx
 10143a7:	add    BYTE PTR [rbx],cl
 10143a9:	(bad)  
 10143aa:	add    BYTE PTR [rax],al
 10143ac:	in     al,dx
 10143ad:	adc    al,BYTE PTR [rcx]
 10143af:	add    BYTE PTR [rax+0x21000000],bh
 10143b5:	or     BYTE PTR [rdx],al
 10143b7:	add    BYTE PTR [rax],cl
 10143b9:	je     0x10143d5
 10143bb:	add    BYTE PTR [rax-0xcffff3a],dl
 10143c1:	mov    BYTE PTR [rax],0x0
 10143c4:	cwde   
 10143c5:	rex.XB add DWORD PTR [r8],eax
 10143c8:	and    DWORD PTR [rax],eax
 10143ca:	add    BYTE PTR [rax],al
 10143cc:	nop
 10143cd:	mov    BYTE PTR [rax],0x0
 10143d0:	xrelease mov BYTE PTR [rax],0x0
 10143d4:	cwde   
 10143d5:	rex.XB add DWORD PTR [r8],eax
 10143d8:	sbb    DWORD PTR [rdi],ebx
 10143da:	add    eax,0xc340d00
 10143df:	add    DWORD PTR [rip+0x6010a01],ecx        # 0x7024de6
 10143e5:	jo     0x10143e7
 10143e7:	add    ah,ch
 10143e9:	adc    al,BYTE PTR [rcx]
 10143eb:	add    BYTE PTR [rax+0x8],al
 10143ee:	add    BYTE PTR [rax],al
 10143f0:	add    DWORD PTR [rdx],ecx
 10143f2:	add    eax,0x6c20a00
 10143f7:	rol    BYTE PTR [rax+rsi*2],1
 10143fa:	add    edx,DWORD PTR [rax+0x2]
 10143fd:	xor    BYTE PTR [rax],al
 10143ff:	add    BYTE PTR [rcx],ah
 1014401:	sbb    BYTE PTR [rsi],al
 1014403:	add    BYTE PTR [rax],bl
 1014405:	in     al,0x15
 1014407:	add    BYTE PTR [rax],dl
 1014409:	(bad)  
 101440a:	adc    al,0x0
 101440c:	or     BYTE PTR [rbx+rdx*1+0x0],ah
 1014410:	movabs al,ds:0xf00000caad0000c9
 1014419:	rex.XB add DWORD PTR [r8],eax
 101441c:	and    DWORD PTR [rip+0xfffffffff4050002],eax        # 0xfffffffff5064424
 1014422:	or     al,0x0
 1014424:	lods   eax,DWORD PTR ds:[rsi]
 1014425:	retf   0x0
 1014428:	(bad)  
 1014429:	retf   0x0
 101442c:	add    BYTE PTR [rcx+rax*1+0x0],al
 1014430:	and    DWORD PTR [rax],eax
 1014432:	add    BYTE PTR [rax],al
 1014434:	lods   eax,DWORD PTR ds:[rsi]
 1014435:	retf   0x0
 1014438:	(bad)  
 1014439:	retf   0x0
 101443c:	add    BYTE PTR [rcx+rax*1+0x0],al
 1014440:	and    DWORD PTR [rax],eax
 1014442:	add    BYTE PTR [rax],al
 1014444:	movabs al,ds:0xf00000caad0000c9
 101444d:	rex.XB add DWORD PTR [r8],eax
 1014450:	add    DWORD PTR [rax+0xe],edx
 1014453:	add    BYTE PTR [rax-0x1c],dl
 1014456:	add    al,0x0
 1014458:	rex.WXB (bad) 
 101445a:	add    eax,0xc644600
 101445f:	add    BYTE PTR [rcx+0x54],al
 1014462:	or     eax,DWORD PTR [rax]
 1014464:	cmp    al,0x34
 1014466:	or     al,BYTE PTR [rax]
 1014468:	or     dl,BYTE PTR [rdx+0x6]
 101446b:	lock add al,0xd0
 101446e:	add    dh,BYTE PTR [rax+0x19]
 1014471:	sub    DWORD PTR [rbx],ecx
 1014473:	add    BYTE PTR [rdi],dl
 1014475:	xor    al,0x18
 1014477:	add    DWORD PTR [rdi],edx
 1014479:	add    DWORD PTR [rsi],ecx
 101447b:	add    DWORD PTR [rax],edx
 101447d:	lock (bad) 
 101447f:	loopne 0x101448d
 1014481:	ror    BYTE PTR [rdx],1
 1014483:	ror    BYTE PTR [rax],0x70
 1014486:	(bad)  
 1014487:	(bad)  
 1014488:	(bad)  
 1014489:	push   rax
 101448a:	add    BYTE PTR [rax],al
 101448c:	in     al,dx
 101448d:	adc    al,BYTE PTR [rcx]
 101448f:	add    BYTE PTR [rax+0x8],ah
 1014492:	add    BYTE PTR [rax],al
 1014494:	sbb    DWORD PTR [rcx],ebp
 1014496:	or     eax,DWORD PTR [rax]
 1014498:	(bad)  
 1014499:	xor    al,0x18
 101449b:	add    DWORD PTR [rdi],edx
 101449d:	add    DWORD PTR [rsi],ecx
 101449f:	add    DWORD PTR [rax],edx
 10144a1:	lock (bad) 
 10144a3:	loopne 0x10144b1
 10144a5:	ror    BYTE PTR [rdx],1
 10144a7:	ror    BYTE PTR [rax],0x70
 10144aa:	(bad)  
 10144ab:	(bad)  
 10144ac:	(bad)  
 10144ad:	push   rax
 10144ae:	add    BYTE PTR [rax],al
 10144b0:	in     al,dx
 10144b1:	adc    al,BYTE PTR [rcx]
 10144b3:	add    BYTE PTR [rax+0x8],ah
 10144b6:	add    BYTE PTR [rax],al
 10144b8:	add    DWORD PTR [rsi+rax*1],ecx
 10144bb:	add    BYTE PTR [rsp+rsi*1],cl
 10144be:	or     DWORD PTR [rax],eax
 10144c0:	or     al,0x32
 10144c2:	or     BYTE PTR [rax+0x7],dh
 10144c5:	(bad)  
 10144c6:	(bad)  
 10144c7:	push   rax
 10144c8:	add    DWORD PTR [rax],ecx
 10144ca:	add    al,0x0
 10144cc:	or     BYTE PTR [rdx+0x60037004],dh
 10144d2:	add    dh,BYTE PTR [rax]
 10144d4:	and    DWORD PTR [rip+0xffffffffd4050002],eax        # 0xffffffffd50644dc
 10144da:	or     al,BYTE PTR [rax]
 10144dc:	add    dh,dl
 10144de:	add    BYTE PTR [rax],al
 10144e0:	jge    0x10144b8
 10144e2:	add    BYTE PTR [rax],al
 10144e4:	enter  0x144,0x0
 10144e8:	and    DWORD PTR [rcx],esp
 10144ea:	or     BYTE PTR [rax],al
 10144ec:	and    esp,esi
 10144ee:	or     BYTE PTR [rax],al
 10144f0:	adc    ah,ah
 10144f2:	or     DWORD PTR [rax],eax
 10144f4:	or     eax,0x8000bc4
 10144f9:	push   rsp
 10144fa:	adc    DWORD PTR [rax],eax
 10144fc:	jge    0x10144d4
 10144fe:	add    BYTE PTR [rax],al
 1014500:	fwait
 1014501:	(bad)  
 1014502:	add    BYTE PTR [rax],al
 1014504:	(bad)  
 1014505:	add    DWORD PTR [rax],r8d
 1014508:	and    DWORD PTR [rax],eax
 101450a:	add    al,BYTE PTR [rax]
 101450c:	add    ah,ah
 101450e:	or     DWORD PTR [rax],eax
 1014510:	jge    0x10144e8
 1014512:	add    BYTE PTR [rax],al
 1014514:	fwait
 1014515:	(bad)  
 1014516:	add    BYTE PTR [rax],al
 1014518:	(bad)  
 1014519:	add    DWORD PTR [rax],r8d
 101451c:	and    DWORD PTR [rax],eax
 101451e:	add    BYTE PTR [rax],al
 1014520:	add    dh,dl
 1014522:	add    BYTE PTR [rax],al
 1014524:	jge    0x10144fc
 1014526:	add    BYTE PTR [rax],al
 1014528:	enter  0x144,0x0
 101452c:	and    DWORD PTR [rax],eax
 101452e:	add    al,BYTE PTR [rax]
 1014530:	add    ah,dl
 1014532:	or     al,BYTE PTR [rax]
 1014534:	add    dh,dl
 1014536:	add    BYTE PTR [rax],al
 1014538:	jge    0x1014510
 101453a:	add    BYTE PTR [rax],al
 101453c:	enter  0x144,0x0
 1014540:	and    DWORD PTR [rax],eax
 1014542:	add    al,0x0
 1014544:	add    ah,ah
 1014546:	or     DWORD PTR [rax],eax
 1014548:	add    ah,dl
 101454a:	or     al,BYTE PTR [rax]
 101454c:	add    dh,dl
 101454e:	add    BYTE PTR [rax],al
 1014550:	jge    0x1014528
 1014552:	add    BYTE PTR [rax],al
 1014554:	enter  0x144,0x0
 1014558:	add    DWORD PTR [rsi],eax
 101455a:	add    al,BYTE PTR [rax]
 101455c:	(bad)  
 101455d:	xor    al,BYTE PTR [rdx]
 101455f:	xor    BYTE PTR [rcx],al
 1014561:	sbb    al,0xc
 1014563:	add    BYTE PTR [rsp+riz*2],bl
 1014566:	ltr    WORD PTR [rsp+rdx*2]
 101456a:	(bad)  
 101456b:	add    BYTE PTR [rsp+rsi*1],bl
 101456e:	or     eax,0x18521c00
 1014573:	lock (bad) 
 1014575:	loopne 0x101458b
 1014577:	rcl    BYTE PTR [rdx],1
 1014579:	rcl    BYTE PTR [rax],0x70
 101457c:	add    DWORD PTR [rdx+rax*1],ecx
 101457f:	add    BYTE PTR [rdx+rsi*8],cl
 1014582:	add    eax,0x81021d0
 1014587:	add    BYTE PTR [rax],dl
 1014589:	hlt    
 101458a:	or     al,0x0
 101458c:	or     al,0xe4
 101458e:	or     eax,0xec40800
 1014593:	add    BYTE PTR [rsp+rdx*2],al
 1014596:	adc    eax,DWORD PTR [rax]
 1014598:	and    ah,bl
 101459a:	add    BYTE PTR [rax],al
 101459c:	xor    ah,bl
 101459e:	add    BYTE PTR [rax],al
 10145a0:	jl     0x10145e7
 10145a2:	add    DWORD PTR [rax],eax
 10145a4:	and    DWORD PTR [rax],ebx
 10145a6:	(bad)  
 10145a7:	add    BYTE PTR [rax],bl
 10145a9:	je     0x10145ba
 10145ab:	add    BYTE PTR [rbx],dl
 10145ad:	fs adc al,0x0
 10145b0:	or     BYTE PTR [rdx+rdx*1],dh
 10145b3:	add    BYTE PTR [rax],dh
 10145b5:	fadd   QWORD PTR [rax]
 10145b7:	add    BYTE PTR [rbx-0x7bffff24],ah
 10145bd:	add    DWORD PTR [r8],r8d
 10145c0:	and    DWORD PTR [rax],eax
 10145c2:	add    BYTE PTR [rax],al
 10145c4:	xor    ah,bl
 10145c6:	add    BYTE PTR [rax],al
 10145c8:	movabs ds:0x21000145840000dc,eax
 10145d1:	add    BYTE PTR [rax],al
 10145d3:	add    BYTE PTR [rax],ah
 10145d5:	fadd   QWORD PTR [rax]
 10145d7:	add    BYTE PTR [rax],dh
 10145d9:	fadd   QWORD PTR [rax]
 10145db:	add    BYTE PTR [rbp+rax*2+0x1],bh
 10145df:	add    BYTE PTR [rcx],bl
 10145e1:	and    eax,DWORD PTR [rdi]
 10145e3:	add    BYTE PTR [rcx],dl
 10145e5:	add    DWORD PTR [rsi],esp
 10145e7:	add    BYTE PTR [rdx],cl
 10145e9:	loopne 0x10145f3
 10145eb:	rol    BYTE PTR [rsi],1
 10145ed:	jo     0x10145f4
 10145ef:	push   rax
 10145f0:	add    al,0x30
 10145f2:	add    BYTE PTR [rax],al
 10145f4:	in     al,dx
 10145f5:	adc    al,BYTE PTR [rcx]
 10145f7:	add    BYTE PTR [rax],al
 10145f9:	add    DWORD PTR [rax],eax
 10145fb:	add    BYTE PTR [rcx],ah
 10145fd:	adc    eax,DWORD PTR [rsi]
 10145ff:	add    BYTE PTR [rbx],dl
 1014601:	hlt    
 1014602:	and    eax,DWORD PTR [rax]
 1014604:	or     ah,al
 1014606:	and    al,0x0
 1014608:	add    al,0x64
 101460a:	and    eax,0xdde000
 101460f:	add    BYTE PTR [rsi+rbx*8+0x0],dl
 1014613:	add    al,ah
 1014615:	add    DWORD PTR [r8],r8d
 1014618:	and    DWORD PTR [rax],eax
 101461a:	add    BYTE PTR [rax],al
 101461c:	loopne 0x10145fb
 101461e:	add    BYTE PTR [rax],al
 1014620:	push   rsp
 1014621:	fiadd  WORD PTR [rax]
 1014623:	add    al,ah
 1014625:	add    DWORD PTR [r8],r8d
 1014628:	add    DWORD PTR [rbx],edx
 101462a:	or     BYTE PTR [rax],al
 101462c:	adc    edx,DWORD PTR [rsi+rcx*1+0x0]
 1014630:	adc    esi,DWORD PTR [rcx*1+0xf721300]
 1014637:	lock or eax,0x21600be0
 101463d:	add    eax,0x74050002
 1014642:	or     al,0x0
 1014644:	xor    cl,ah
 1014646:	add    BYTE PTR [rax],al
 1014648:	jb     0x101462b
 101464a:	add    BYTE PTR [rax],al
 101464c:	sub    BYTE PTR [rsi+0x1],al
 101464f:	add    BYTE PTR [rcx],ah
 1014651:	add    BYTE PTR [rax],al
 1014653:	add    BYTE PTR [rax],dh
 1014655:	loope  0x1014657
 1014657:	add    BYTE PTR [rdx-0x1f],dh
 101465a:	add    BYTE PTR [rax],al
 101465c:	sub    BYTE PTR [rsi+0x1],al
 101465f:	add    BYTE PTR [rcx],ah
 1014661:	add    BYTE PTR [rdx],al
 1014663:	add    BYTE PTR [rax],al
 1014665:	je     0x1014673
 1014667:	add    BYTE PTR [rax],dh
 1014669:	loope  0x101466b
 101466b:	add    BYTE PTR [rdx-0x1f],dh
 101466e:	add    BYTE PTR [rax],al
 1014670:	sub    BYTE PTR [rsi+0x1],al
 1014673:	add    BYTE PTR [rcx],ah
 1014675:	add    BYTE PTR [rax],al
 1014677:	add    BYTE PTR [rax],dh
 1014679:	loope  0x101467b
 101467b:	add    BYTE PTR [rdx-0x1f],dh
 101467e:	add    BYTE PTR [rax],al
 1014680:	sub    BYTE PTR [rsi+0x1],al
 1014683:	add    BYTE PTR [rcx],al
 1014685:	(bad)  
 1014686:	add    al,BYTE PTR [rax]
 1014688:	(bad)  
 1014689:	push   rdx
 101468a:	add    dh,BYTE PTR [rax]
 101468c:	add    DWORD PTR [rdi],eax
 101468e:	add    eax,DWORD PTR [rax]
 1014690:	(bad)  
 1014691:	(bad)  
 1014692:	add    edx,DWORD PTR [rax+0x2]
 1014695:	xor    BYTE PTR [rax],al
 1014697:	add    BYTE PTR [rcx],ah
 1014699:	push   0xffffffffe4680008
 101469e:	add    eax,0x6c41600
 10146a3:	add    BYTE PTR [rdx],cl
 10146a5:	je     0x10146ae
 10146a7:	add    BYTE PTR [rip+0x60000864],al        # 0x61014f11
 10146ad:	jrcxz  0x10146af
 10146af:	add    BYTE PTR [rbx-0x73ffff1d],cl
 10146b5:	rex.RX add DWORD PTR [rax],r8d
 10146b8:	and    DWORD PTR [rax],eax
 10146ba:	add    BYTE PTR [rax],al
 10146bc:	(bad)  
 10146bd:	jrcxz  0x10146bf
 10146bf:	add    BYTE PTR [rbx-0x73ffff1d],cl
 10146c5:	rex.RX add DWORD PTR [rax],r8d
 10146c8:	add    DWORD PTR [rdi],eax
 10146ca:	add    eax,DWORD PTR [rax]
 10146cc:	(bad)  
 10146cd:	(bad)  
 10146ce:	add    esi,DWORD PTR [rax+0x2]
 10146d1:	xor    BYTE PTR [rax],al
 10146d3:	add    BYTE PTR [rcx],ah
 10146d5:	and    cl,BYTE PTR [rdx]
 10146d7:	add    BYTE PTR [rdx],ah
 10146d9:	hlt    
 10146da:	or     BYTE PTR [rax],al
 10146dc:	adc    al,0xe4
 10146de:	str    WORD PTR [rdi]
 10146e1:	(bad)  
 10146e2:	(bad)  
 10146e3:	add    BYTE PTR [rdx],cl
 10146e5:	fs or  eax,0xc540500
 10146eb:	add    BYTE PTR [rax],dl
 10146ed:	out    0x0,al
 10146ef:	add    BYTE PTR [rax],ch
 10146f1:	out    0x0,al
 10146f3:	add    al,cl
 10146f5:	rex.RX add DWORD PTR [rax],r8d
 10146f8:	and    DWORD PTR [rax],eax
 10146fa:	add    BYTE PTR [rax],al
 10146fc:	adc    dh,ah
 10146fe:	add    BYTE PTR [rax],al
 1014700:	sub    dh,ah
 1014702:	add    BYTE PTR [rax],al
 1014704:	enter  0x146,0x0
 1014708:	sbb    DWORD PTR [rsi],esi
 101470a:	or     eax,DWORD PTR [rax]
 101470c:	and    eax,0x2503b634
 1014711:	add    DWORD PTR [rbx+rax*1-0x1ff10ff0],ebp
 1014718:	or     al,0xd0
 101471a:	or     al,al
 101471c:	or     BYTE PTR [rax+0x7],dh
 101471f:	(bad)  
 1014720:	(bad)  
 1014721:	push   rax
 1014722:	add    BYTE PTR [rax],al
 1014724:	in     al,dx
 1014725:	adc    al,BYTE PTR [rcx]
 1014727:	add    BYTE PTR [rax+0x1d],dl
 101472a:	add    BYTE PTR [rax],al
 101472c:	sbb    DWORD PTR [rdi],ebx
 101472e:	add    eax,0xc340d00
 1014733:	add    DWORD PTR [rip+0x6010a01],ecx        # 0x702513a
 1014739:	jo     0x101473b
 101473b:	add    ah,ch
 101473d:	adc    al,BYTE PTR [rcx]
 101473f:	add    BYTE PTR [rax+0x8],al
 1014742:	add    BYTE PTR [rax],al
 1014744:	sbb    DWORD PTR [rsi-0xb61fff7],ebx
 101474a:	xchg   esi,eax
 101474b:	add    BYTE PTR [rsi],cl
 101474d:	add    DWORD PTR [rsi+0x5e00700],ecx
 1014753:	jo     0x1014759
 1014755:	(bad)  
 1014756:	add    edx,DWORD PTR [rax+0x2]
 1014759:	xor    BYTE PTR [rax],al
 101475b:	add    ah,ch
 101475d:	adc    al,BYTE PTR [rcx]
 101475f:	add    BYTE PTR [rax+0x4],ah
 1014762:	add    BYTE PTR [rax],al
 1014764:	sbb    DWORD PTR [rax],esp
 1014766:	add    al,0x0
 1014768:	(bad)  
 1014769:	add    DWORD PTR [rdi+0x0],ecx
 101476c:	(bad)  
 101476d:	lock add eax,0x112ece0
 1014773:	add    BYTE PTR [rax+0x2],ah
 1014776:	add    BYTE PTR [rax],al
 1014778:	and    DWORD PTR [rdx],esi
 101477a:	or     BYTE PTR [rax],al
 101477c:	xor    dh,BYTE PTR [rsi+rcx*2+0x0]
 1014780:	adc    ah,BYTE PTR [rbp+rdx*2+0x0]
 1014784:	or     BYTE PTR [rsp+rdx*2+0x0],dl
 1014788:	add    al,0x34
 101478a:	push   rbx
 101478b:	add    BYTE PTR [rax-0xd],dh
 101478e:	add    BYTE PTR [rax],al
 1014790:	xchg   edi,eax
 1014791:	repz add BYTE PTR [rax],al
 1014794:	rex.RXB add DWORD PTR fs:[r8],r8d
 1014798:	and    DWORD PTR [rax],eax
 101479a:	add    BYTE PTR [rax],al
 101479c:	jo     0x1014791
 101479e:	add    BYTE PTR [rax],al
 10147a0:	xchg   edi,eax
 10147a1:	repz add BYTE PTR [rax],al
 10147a4:	rex.RXB add DWORD PTR fs:[r8],r8d
 10147a8:	add    DWORD PTR [rsi],eax
 10147aa:	add    al,BYTE PTR [rax]
 10147ac:	(bad)  
 10147ad:	push   rdx
 10147ae:	add    dh,BYTE PTR [rax]
 10147b0:	sbb    DWORD PTR [rdx],ebp
 10147b2:	(bad)  
 10147b3:	add    BYTE PTR [rcx],bl
 10147b5:	je     0x10147de
 10147b7:	add    DWORD PTR [rcx],ebx
 10147b9:	add    DWORD PTR [rax],esp
 10147bb:	add    DWORD PTR [rdx],ecx
 10147bd:	lock or al,ah
 10147c0:	(bad)  
 10147c1:	push   rax
 10147c2:	add    BYTE PTR [rax],al
 10147c4:	in     al,dx
 10147c5:	adc    al,BYTE PTR [rcx]
 10147c7:	add    al,dh
 10147c9:	or     BYTE PTR [rax],al
 10147cb:	add    BYTE PTR [rcx],ah
 10147cd:	or     BYTE PTR [rdx],al
 10147cf:	add    BYTE PTR [rax],cl
 10147d1:	xor    al,0x25
 10147d3:	add    DWORD PTR [rax+0x4a0000f6],edx
 10147d9:	clc    
 10147da:	add    BYTE PTR [rax],al
 10147dc:	mov    al,0x47
 10147de:	add    DWORD PTR [rax],eax
 10147e0:	and    DWORD PTR [rax],ecx
 10147e2:	add    al,BYTE PTR [rax]
 10147e4:	or     BYTE PTR [rsi+riz*1+0x1],ah
 10147e8:	rex.WX clc 
 10147ea:	add    BYTE PTR [rax],al
 10147ec:	cmp    bh,dl
 10147ee:	add    BYTE PTR [rax],al
 10147f0:	int3   
 10147f1:	rex.RXB add DWORD PTR [r8],r8d
 10147f4:	and    DWORD PTR [rax],eax
 10147f6:	add    BYTE PTR [rax],al
 10147f8:	rex.WX clc 
 10147fa:	add    BYTE PTR [rax],al
 10147fc:	cmp    bh,dl
 10147fe:	add    BYTE PTR [rax],al
 1014800:	int3   
 1014801:	rex.RXB add DWORD PTR [r8],r8d
 1014804:	and    DWORD PTR [rax],eax
 1014806:	add    BYTE PTR [rax],al
 1014808:	nop
 1014809:	test   BYTE PTR [rax],0x0
 101480c:	rex.WX clc 
 101480e:	add    BYTE PTR [rax],al
 1014810:	mov    al,0x47
 1014812:	add    DWORD PTR [rax],eax
 1014814:	sbb    DWORD PTR [rip+0x10b0005],ebx        # 0x20c481f
 101481a:	or     al,BYTE PTR [rcx]
 101481c:	add    al,0x70
 101481e:	add    esp,DWORD PTR [rax+0x2]
 1014821:	xor    BYTE PTR [rax],al
 1014823:	add    ah,ch
 1014825:	adc    al,BYTE PTR [rcx]
 1014827:	add    BYTE PTR [rax+0x8],al
 101482a:	add    BYTE PTR [rax],al
 101482c:	sbb    DWORD PTR [rip+0x10b0005],ebx        # 0x20c4837
 1014832:	or     al,0x1
 1014834:	add    al,0x70
 1014836:	add    esp,DWORD PTR [rax+0x2]
 1014839:	xor    BYTE PTR [rax],al
 101483b:	add    ah,ch
 101483d:	adc    al,BYTE PTR [rcx]
 101483f:	add    BYTE PTR [rax+0x8],dl
 1014842:	add    BYTE PTR [rax],al
 1014844:	sbb    DWORD PTR [rip+0x10b0005],ebx        # 0x20c484f
 101484a:	or     al,BYTE PTR [rcx]
 101484c:	add    al,0x70
 101484e:	add    esp,DWORD PTR [rax+0x2]
 1014851:	xor    BYTE PTR [rax],al
 1014853:	add    ah,ch
 1014855:	adc    al,BYTE PTR [rcx]
 1014857:	add    BYTE PTR [rax+0x8],al
 101485a:	add    BYTE PTR [rax],al
 101485c:	sbb    DWORD PTR [rbx],edx
 101485e:	add    DWORD PTR [rax],eax
 1014860:	add    al,0xa2
 1014862:	add    BYTE PTR [rax],al
 1014864:	in     al,dx
 1014865:	adc    al,BYTE PTR [rcx]
 1014867:	add    BYTE PTR [rax+0x0],cl
 101486a:	add    BYTE PTR [rax],al
 101486c:	sbb    DWORD PTR [rsi],ebp
 101486e:	or     DWORD PTR [rax],eax
 1014870:	sbb    eax,0x1d01a364
 1014875:	xor    al,0xa2
 1014877:	add    DWORD PTR [rip+0xe019c01],ebx        # 0xf02e47e
 101487d:	loopne 0x101488b
 101487f:	jo     0x101488c
 1014881:	push   rax
 1014882:	add    BYTE PTR [rax],al
 1014884:	in     al,dx
 1014885:	adc    al,BYTE PTR [rcx]
 1014887:	add    al,dl
 1014889:	or     al,0x0
 101488b:	add    BYTE PTR [rcx],al
 101488d:	add    al,0x1
 101488f:	add    BYTE PTR [rdx+rax*2],al
 1014892:	add    BYTE PTR [rax],al
 1014894:	add    DWORD PTR [rcx+rax*1],eax
 1014897:	add    BYTE PTR [rdx+rax*2],al
 101489a:	add    BYTE PTR [rax],al
 101489c:	add    DWORD PTR [rdi],edx
 101489e:	or     DWORD PTR [rax],eax
 10148a0:	(bad)  
 10148a1:	fs (bad) 
 10148a3:	add    DWORD PTR [rdi],edx
 10148a5:	push   rsp
 10148a6:	sbb    eax,0x1c341701
 10148ab:	add    DWORD PTR [rdi],edx
 10148ad:	add    DWORD PTR [rdx],ebx
 10148af:	add    DWORD PTR [rax],edx
 10148b1:	jo     0x10148b3
 10148b3:	add    BYTE PTR [rcx],cl
 10148b5:	add    al,0x1
 10148b7:	add    BYTE PTR [rdx+rax*4],al
 10148ba:	add    BYTE PTR [rax],al
 10148bc:	jb     0x10148d0
 10148be:	add    DWORD PTR [rax],eax
 10148c0:	add    DWORD PTR [rax],eax
 10148c2:	add    BYTE PTR [rax],al
 10148c4:	rex.WRB (bad) 
 10148c6:	add    DWORD PTR [rax],eax
 10148c8:	push   rbx
 10148c9:	(bad)  
 10148ca:	add    DWORD PTR [rax],eax
 10148cc:	cmp    al,BYTE PTR [rcx]
 10148cf:	add    BYTE PTR [rbx+0x6],dl
 10148d2:	add    DWORD PTR [rax],eax
 10148d4:	add    DWORD PTR [rsi],eax
 10148d6:	add    al,BYTE PTR [rax]
 10148d8:	(bad)  
 10148d9:	push   rdx
 10148da:	add    dl,BYTE PTR [rax+0x1]
 10148dd:	or     al,BYTE PTR [rax+rax*1]
 10148e0:	or     dh,BYTE PTR [rdx+rcx*1]
 10148e3:	add    BYTE PTR [rdx],cl
 10148e5:	jb     0x10148ed
 10148e7:	jo     0x10148ea
 10148e9:	(bad)  
 10148ea:	or     al,BYTE PTR [rax]
 10148ec:	(bad)  
 10148ed:	push   rsp
 10148ee:	adc    al,BYTE PTR [rax]
 10148f0:	(bad)  
 10148f1:	xor    al,0x11
 10148f3:	add    BYTE PTR [rdi],dl
 10148f5:	xchg   edx,eax
 10148f6:	adc    esi,eax
 10148f8:	adc    eax,esp
 10148fa:	(bad)  
 10148fc:	or     eax,0x21700bc0
 1014901:	or     BYTE PTR [rdx],al
 1014903:	add    BYTE PTR [rax],cl
 1014905:	adc    BYTE PTR fs:[rax],al
 1014908:	jo     0x1014911
 101490a:	add    DWORD PTR [rax],eax
 101490c:	out    0x7,al
 101490e:	add    DWORD PTR [rax],eax
 1014910:	call   0x22014a5d
 1014915:	add    BYTE PTR [rax],al
 1014917:	add    BYTE PTR [rax+0x7],dh
 101491a:	add    DWORD PTR [rax],eax
 101491c:	out    0x7,al
 101491e:	add    DWORD PTR [rax],eax
 1014920:	call   0x1a014a6d
 1014925:	(bad)  
 1014926:	add    eax,0xda010c00
 101492b:	add    BYTE PTR [rip+0x27003e0],al        # 0x3714d11
 1014931:	push   rax
 1014932:	add    BYTE PTR [rax],al
 1014934:	in     al,dx
 1014935:	adc    al,BYTE PTR [rcx]
 1014937:	add    BYTE PTR [rax+0x21000006],dh
 101493d:	adc    BYTE PTR [rax+rax*1],al
 1014940:	adc    BYTE PTR [rax+rbx*8+0x0],ah
 1014944:	or     BYTE PTR [rcx+rbx*8],dh
 1014947:	add    BYTE PTR [rax-0x12fffef7],dl
 101494d:	or     DWORD PTR [rcx],eax
 101494f:	add    BYTE PTR [rcx+rcx*2],ah
 1014952:	add    DWORD PTR [rax],eax
 1014954:	and    DWORD PTR [rax],eax
 1014956:	add    BYTE PTR [rax],al
 1014958:	nop
 1014959:	or     DWORD PTR [rcx],eax
 101495b:	add    ch,ch
 101495d:	or     DWORD PTR [rcx],eax
 101495f:	add    BYTE PTR [rcx+rcx*2],ah
 1014962:	add    DWORD PTR [rax],eax
 1014964:	and    DWORD PTR [rax],eax
 1014966:	add    al,0x0
 1014968:	add    BYTE PTR [rax+rbx*8+0x0],ah
 101496c:	add    BYTE PTR [rcx+rbx*8],dh
 101496f:	add    BYTE PTR [rax-0x12fffef7],dl
 1014975:	or     DWORD PTR [rcx],eax
 1014977:	add    BYTE PTR [rcx+rcx*2],ah
 101497a:	add    DWORD PTR [rax],eax
 101497c:	and    DWORD PTR [rax],eax
 101497e:	add    BYTE PTR [rax],al
 1014980:	nop
 1014981:	or     DWORD PTR [rcx],eax
 1014983:	add    ch,ch
 1014985:	or     DWORD PTR [rcx],eax
 1014987:	add    BYTE PTR [rcx+rcx*2],ah
 101498a:	add    DWORD PTR [rax],eax
 101498c:	add    DWORD PTR [rsi],eax
 101498e:	add    al,BYTE PTR [rax]
 1014990:	(bad)  
 1014991:	xor    al,BYTE PTR [rdx]
 1014993:	xor    BYTE PTR [rcx],al
 1014995:	sbb    BYTE PTR [rax],cl
 1014997:	add    BYTE PTR [rax],bl
 1014999:	or     al,BYTE PTR fs:[rax]
 101499c:	or     eax,0xd000c34
 10149a1:	push   rdx
 10149a2:	or     eax,esp
 10149a4:	(bad)  
 10149a5:	jo     0x10149ad
 10149a7:	push   rax
 10149a8:	add    DWORD PTR [rcx+rax*1],eax
 10149ab:	add    BYTE PTR [rdx+rax*2],al
 10149ae:	add    BYTE PTR [rax],al
 10149b0:	sbb    DWORD PTR [rax],ebp
 10149b2:	or     BYTE PTR [rax],al
 10149b4:	(bad)  
 10149b5:	add    DWORD PTR [rbx],ecx
 10149b7:	add    cl,BYTE PTR [rcx]
 10149b9:	lock (bad) 
 10149bb:	loopne 0x10149c2
 10149bd:	jo     0x10149c3
 10149bf:	(bad)  
 10149c0:	add    edx,DWORD PTR [rax+0x2]
 10149c3:	xor    ah,ch
 10149c5:	adc    al,BYTE PTR [rcx]
 10149c7:	add    BYTE PTR [rax+0x10],al
 10149ca:	add    BYTE PTR [rax],al
 10149cc:	and    DWORD PTR [rax],ecx
 10149ce:	add    al,BYTE PTR [rax]
 10149d0:	or     ah,al
 10149d2:	or     al,BYTE PTR [rdx]
 10149d4:	(bad)  
 10149d5:	or     eax,0xda50001
 10149da:	add    DWORD PTR [rax],eax
 10149dc:	mov    al,0x49
 10149de:	add    DWORD PTR [rax],eax
 10149e0:	and    DWORD PTR [rax],eax
 10149e2:	add    BYTE PTR [rax],al
 10149e4:	(bad)  
 10149e5:	or     eax,0xda50001
 10149ea:	add    DWORD PTR [rax],eax
 10149ec:	mov    al,0x49
 10149ee:	add    DWORD PTR [rax],eax
 10149f0:	and    DWORD PTR [rax],eax
 10149f2:	add    al,BYTE PTR [rax]
 10149f4:	add    ah,al
 10149f6:	or     al,BYTE PTR [rdx]
 10149f8:	(bad)  
 10149f9:	or     eax,0xda50001
 10149fe:	add    DWORD PTR [rax],eax
 1014a00:	mov    al,0x49
 1014a02:	add    DWORD PTR [rax],eax
 1014a04:	and    DWORD PTR [rax],eax
 1014a06:	add    BYTE PTR [rax],al
 1014a08:	(bad)  
 1014a09:	or     eax,0xda50001
 1014a0e:	add    DWORD PTR [rax],eax
 1014a10:	mov    al,0x49
 1014a12:	add    DWORD PTR [rax],eax
 1014a14:	add    DWORD PTR [rcx+rax*1],eax
 1014a17:	add    BYTE PTR [rdx+riz*2],al
 1014a1a:	add    BYTE PTR [rax],al
 1014a1c:	add    DWORD PTR [rsi],eax
 1014a1e:	add    al,BYTE PTR [rax]
 1014a20:	(bad)  
 1014a21:	xor    al,BYTE PTR [rdx]
 1014a23:	push   rax
 1014a24:	or     DWORD PTR [rdx],ecx
 1014a26:	add    al,0x0
 1014a28:	or     dh,BYTE PTR [rsi+rax*1]
 1014a2b:	add    BYTE PTR [rdx],cl
 1014a2d:	xor    al,BYTE PTR [rsi]
 1014a2f:	jo     0x1014aa3
 1014a31:	adc    al,BYTE PTR [rcx]
 1014a33:	add    BYTE PTR [rcx],al
 1014a35:	add    BYTE PTR [rax],al
 1014a37:	add    BYTE PTR [rdx],bl
 1014a39:	sgdt   [rax]
 1014a3c:	pop    rax
 1014a3d:	adc    BYTE PTR [rcx],al
 1014a3f:	add    BYTE PTR [rdi+0x5800013a],dl
 1014a45:	adc    BYTE PTR [rcx],al
 1014a47:	add    BYTE PTR [rcx],al
 1014a49:	add    al,0x1
 1014a4b:	add    BYTE PTR [rdx+rax*2],al
 1014a4e:	add    BYTE PTR [rax],al
 1014a50:	add    DWORD PTR [rcx+rax*1],eax
 1014a53:	add    BYTE PTR [rdx+rax*2],al
 1014a56:	add    BYTE PTR [rax],al
 1014a58:	add    DWORD PTR [rsi],eax
 1014a5a:	add    al,BYTE PTR [rax]
 1014a5c:	(bad)  
 1014a5d:	xor    al,BYTE PTR [rdx]
 1014a5f:	push   rax
 1014a60:	adc    DWORD PTR [rsi],eax
 1014a62:	add    al,BYTE PTR [rax]
 1014a64:	(bad)  
 1014a65:	xor    al,BYTE PTR [rdx]
 1014a67:	xor    BYTE PTR [rdx+0x12],dh
 1014a6a:	add    DWORD PTR [rax],eax
 1014a6c:	add    DWORD PTR [rax],eax
 1014a6e:	add    BYTE PTR [rax],al
 1014a70:	rcl    DWORD PTR [rcx],cl
 1014a72:	add    DWORD PTR [rax],eax
 1014a74:	cmp    DWORD PTR [rdx],edx
 1014a76:	add    DWORD PTR [rax],eax
 1014a78:	mov    ebx,0x13a
 1014a7d:	add    BYTE PTR [rax],al
 1014a7f:	add    BYTE PTR [rcx],al
 1014a81:	add    al,0x1
 1014a83:	add    BYTE PTR [rdx+rax*2],al
 1014a86:	add    BYTE PTR [rax],al
 1014a88:	add    DWORD PTR [rsi],eax
 1014a8a:	add    al,BYTE PTR [rax]
 1014a8c:	(bad)  
 1014a8d:	xor    al,BYTE PTR [rdx]
 1014a8f:	xor    BYTE PTR [rcx],al
 1014a91:	add    al,0x1
 1014a93:	add    BYTE PTR [rdx+rax*2],al
 1014a96:	add    BYTE PTR [rax],al
 1014a98:	add    DWORD PTR [rcx],ebx
 1014a9a:	or     al,BYTE PTR [rax]
 1014a9c:	sbb    DWORD PTR [rcx+rcx*1+0x0],esi
 1014aa0:	sbb    DWORD PTR [rax+rcx*1+0x0],esp
 1014aa4:	sbb    DWORD PTR [rdi+rax*1+0x0],edx
 1014aa8:	sbb    DWORD PTR [rsi+rax*1],esi
 1014aab:	add    BYTE PTR [rcx],bl
 1014aad:	xor    dl,BYTE PTR [rip+0x10401c0]        # 0x2054c73
 1014ab3:	add    BYTE PTR [rdx+rdx*1],al
 1014ab6:	add    BYTE PTR [rax],al
 1014ab8:	add    DWORD PTR [rax],eax
 1014aba:	add    BYTE PTR [rax],al
 1014abc:	add    DWORD PTR [rcx+rax*1],eax
 1014abf:	add    BYTE PTR [rdx+rax*2],al
 1014ac2:	add    BYTE PTR [rax],al
 1014ac4:	add    DWORD PTR [rcx+rax*1],eax
 1014ac7:	add    BYTE PTR [rdx+rax*2],al
 1014aca:	add    BYTE PTR [rax],al
 1014acc:	add    DWORD PTR [rdx],ecx
 1014ace:	add    al,0x0
 1014ad0:	or     dh,BYTE PTR [rsi+rax*1]
 1014ad3:	add    BYTE PTR [rdx],cl
 1014ad5:	xor    al,BYTE PTR [rsi]
 1014ad7:	jo     0x1014ada
 1014ad9:	or     al,BYTE PTR [rax+rax*1]
 1014adc:	or     dh,BYTE PTR [rsi+rax*1]
 1014adf:	add    BYTE PTR [rdx],cl
 1014ae1:	xor    al,BYTE PTR [rsi]
 1014ae3:	jo     0x1014ae6
 1014ae5:	(bad)  
 1014ae6:	add    al,BYTE PTR [rax]
 1014ae8:	(bad)  
 1014ae9:	xor    al,BYTE PTR [rdx]
 1014aeb:	push   rax
 1014aec:	or     DWORD PTR [rcx+rax*1],eax
 1014aef:	add    BYTE PTR [rdx+rax*2],al
 1014af2:	add    BYTE PTR [rax],al
 1014af4:	jb     0x1014b08
 1014af6:	add    DWORD PTR [rax],eax
 1014af8:	add    DWORD PTR [rax],eax
 1014afa:	add    BYTE PTR [rax],al
 1014afc:	not    DWORD PTR [rip+0x162a0001]        # 0x172b4b03
 1014b02:	add    DWORD PTR [rax],eax
 1014b04:	loopne 0x1014b40
 1014b06:	add    DWORD PTR [rax],eax
 1014b08:	sub    dl,BYTE PTR [rsi]
 1014b0a:	add    DWORD PTR [rax],eax
 1014b0c:	add    DWORD PTR [rdx],ecx
 1014b0e:	add    al,0x0
 1014b10:	or     dh,BYTE PTR [rax+rcx*1]
 1014b13:	add    BYTE PTR [rdx],cl
 1014b15:	xor    al,BYTE PTR [rsi]
 1014b17:	jo     0x1014b1a
 1014b19:	or     al,0x2
 1014b1b:	add    BYTE PTR [rcx+rax*1],cl
 1014b1e:	adc    DWORD PTR [rax],eax
 1014b20:	and    DWORD PTR [rax],eax
 1014b22:	add    BYTE PTR [rax],al
 1014b24:	adc    BYTE PTR [rcx],bl
 1014b26:	add    DWORD PTR [rax],eax
 1014b28:	sbb    al,0x19
 1014b2a:	add    DWORD PTR [rax],eax
 1014b2c:	rex.R
 1014b2d:	rex.WXB add QWORD PTR [r8],rax
 1014b30:	and    DWORD PTR [rdx+rax*1],eax
 1014b33:	add    BYTE PTR [rsp+rsi*2],al
 1014b36:	add    BYTE PTR [rax],al
 1014b38:	adc    BYTE PTR [rcx],bl
 1014b3a:	add    DWORD PTR [rax],eax
 1014b3c:	sbb    al,0x19
 1014b3e:	add    DWORD PTR [rax],eax
 1014b40:	rex.R
 1014b41:	rex.WXB add QWORD PTR [r8],rax
 1014b44:	add    DWORD PTR [rcx+rax*1],eax
 1014b47:	add    BYTE PTR [rdx+rax*1],al
 1014b4a:	add    BYTE PTR [rax],al
 1014b4c:	add    DWORD PTR [rax],ebx
 1014b4e:	add    DWORD PTR [rax],eax
 1014b50:	sbb    dl,al
 1014b52:	add    BYTE PTR [rax],al
 1014b54:	add    DWORD PTR [rax],ebx
 1014b56:	add    DWORD PTR [rax],eax
 1014b58:	sbb    dl,al
 1014b5a:	add    BYTE PTR [rax],al
 1014b5c:	add    DWORD PTR [rsi],eax
 1014b5e:	add    al,BYTE PTR [rax]
 1014b60:	(bad)  
 1014b61:	push   rdx
 1014b62:	add    dl,BYTE PTR [rax+0x19]
 1014b65:	sbb    DWORD PTR [rdx],eax
 1014b67:	add    BYTE PTR [rdi],al
 1014b69:	add    DWORD PTR [rcx+0x0],esp
 1014b6c:	adc    BYTE PTR [rbx],dl
 1014b6e:	add    DWORD PTR [rax],eax
 1014b70:	add    DWORD PTR [rax],eax
 1014b72:	add    BYTE PTR [rax],al
 1014b74:	rex.WR sbb al,0x1
 1014b77:	add    BYTE PTR [rbx+riz*1+0x1],bh
 1014b7b:	add    BYTE PTR [rax],ah
 1014b7d:	and    al,0x1
 1014b7f:	add    BYTE PTR [rax],al
 1014b81:	add    BYTE PTR [rax],al
 1014b83:	add    dl,bh
 1014b85:	add    al,BYTE PTR [rax]
 1014b87:	add    BYTE PTR [rcx],al
 1014b89:	adc    eax,DWORD PTR [rcx]
 1014b8b:	add    BYTE PTR [rbx],dl
 1014b8d:	(bad)  
 1014b8e:	add    BYTE PTR [rax],al
 1014b90:	add    DWORD PTR [rbx],edx
 1014b92:	add    DWORD PTR [rax],eax
 1014b94:	adc    eax,DWORD PTR [rdx+0x13010000]
 1014b9a:	add    DWORD PTR [rax],eax
 1014b9c:	adc    esp,DWORD PTR [rdx]
 1014b9e:	add    BYTE PTR [rax],al
 1014ba0:	add    DWORD PTR [rax],ebx
 1014ba2:	add    DWORD PTR [rax],eax
 1014ba4:	sbb    BYTE PTR [rdx+0x0],ah
 1014ba7:	add    BYTE PTR [rcx],al
 1014ba9:	adc    eax,DWORD PTR [rcx]
 1014bab:	add    BYTE PTR [rbx],dl
 1014bad:	and    al,BYTE PTR [rax]
 1014baf:	add    BYTE PTR [rcx],al
 1014bb1:	sbb    BYTE PTR [rcx],al
 1014bb3:	add    BYTE PTR [rax],bl
 1014bb5:	and    al,BYTE PTR [rax]
 1014bb7:	add    BYTE PTR [rcx],al
 1014bb9:	add    al,0x1
 1014bbb:	add    BYTE PTR [rdx+riz*2],al
 1014bbe:	add    BYTE PTR [rax],al
 1014bc0:	add    DWORD PTR [rbx+rax*1],ecx
 1014bc3:	add    BYTE PTR [rdx+riz*4],cl
 1014bc6:	or     al,ah
 1014bc8:	(bad)  
 1014bc9:	xor    BYTE PTR [rax],al
 1014bcb:	add    BYTE PTR [rcx],ah
 1014bcd:	or     al,BYTE PTR [rax+rax*1]
 1014bd0:	or     ah,BYTE PTR [rdi+rcx*1+0x0]
 1014bd4:	add    eax,0x80000e54
 1014bd9:	sub    BYTE PTR [rcx],al
 1014bdb:	add    BYTE PTR [rdi-0x3ffffed8],bl
 1014be1:	rex.WXB add QWORD PTR [r8],rax
 1014be4:	and    DWORD PTR [rdi],ebp
 1014be6:	or     BYTE PTR [rax],al
 1014be8:	(bad)  
 1014be9:	hlt    
 1014bea:	or     BYTE PTR [rax],al
 1014bec:	es (bad) 
 1014bee:	or     DWORD PTR [rax],eax
 1014bf0:	or     eax,0x8000ac4
 1014bf5:	je     0x1014c07
 1014bf7:	add    BYTE PTR [rdi-0xdfffed8],bl
 1014bfd:	sub    BYTE PTR [rcx],al
 1014bff:	add    ah,cl
 1014c01:	rex.WXB add QWORD PTR [r8],rax
 1014c04:	and    DWORD PTR [rax],eax
 1014c06:	add    BYTE PTR [rax],al
 1014c08:	lahf   
 1014c09:	sub    BYTE PTR [rcx],al
 1014c0b:	add    dl,dh
 1014c0d:	sub    BYTE PTR [rcx],al
 1014c0f:	add    ah,cl
 1014c11:	rex.WXB add QWORD PTR [r8],rax
 1014c14:	and    DWORD PTR [rax],eax
 1014c16:	add    BYTE PTR [rax],al
 1014c18:	sub    BYTE PTR [rax],0x1
 1014c1b:	add    BYTE PTR [rdi-0x3ffffed8],bl
 1014c21:	rex.WXB add QWORD PTR [r8],rax
 1014c24:	add    DWORD PTR [rax+0xe],edi
 1014c27:	add    BYTE PTR [rax-0x2c],bh
 1014c2a:	(bad)  
 1014c2b:	add    BYTE PTR [rbx+0x54],dh
 1014c2e:	or     al,0x0
 1014c30:	xor    eax,0x300006e4
 1014c35:	(bad)  
 1014c36:	(bad)  
 1014c37:	add    BYTE PTR [rbx],ch
 1014c39:	je     0x1014c48
 1014c3b:	add    BYTE PTR [rcx],cl
 1014c3d:	jb     0x1014c44
 1014c3f:	lock add esp,DWORD PTR [rax+0x2]
 1014c43:	xor    BYTE PTR [rcx],al
 1014c45:	add    al,0x1
 1014c47:	add    BYTE PTR [rdx+riz*4],al
 1014c4a:	add    BYTE PTR [rax],al
 1014c4c:	and    DWORD PTR [rip+0x34050002],eax        # 0x35064c54
 1014c52:	or     al,BYTE PTR [rax]
 1014c54:	lock sub eax,0x2e160001
 1014c5a:	add    DWORD PTR [rax],eax
 1014c5c:	rex.R
 1014c5d:	add    QWORD PTR [rax],r8
 1014c60:	and    DWORD PTR [rax],eax
 1014c62:	add    al,BYTE PTR [rax]
 1014c64:	add    BYTE PTR [rdx+rcx*1],dh
 1014c67:	add    al,dh
 1014c69:	sub    eax,0x2e160001
 1014c6e:	add    DWORD PTR [rax],eax
 1014c70:	rex.R
 1014c71:	add    QWORD PTR [rax],r8
 1014c74:	add    DWORD PTR [rcx+rax*1],eax
 1014c77:	add    BYTE PTR [rdx+rax*2],al
 1014c7a:	add    BYTE PTR [rax],al
 1014c7c:	add    DWORD PTR [rsi],eax
 1014c7e:	add    al,BYTE PTR [rax]
 1014c80:	(bad)  
 1014c81:	xor    al,BYTE PTR [rdx]
 1014c83:	xor    BYTE PTR [rcx],al
 1014c85:	sbb    BYTE PTR [rdx],cl
 1014c87:	add    BYTE PTR [rax],bl
 1014c89:	or     al,BYTE PTR fs:[rax]
 1014c8c:	sbb    BYTE PTR [rcx+rcx*1+0x0],dl
 1014c90:	sbb    BYTE PTR [rax+rcx*1],dh
 1014c93:	add    BYTE PTR [rax],bl
 1014c95:	xor    dl,BYTE PTR [rax+rsi*8]
 1014c98:	adc    ah,al
 1014c9a:	adc    BYTE PTR [rax+0x1],dh
 1014c9d:	sbb    BYTE PTR [rdx],cl
 1014c9f:	add    BYTE PTR [rax],bl
 1014ca1:	fs or  eax,0xc541800
 1014ca7:	add    BYTE PTR [rax],bl
 1014ca9:	xor    al,0xb
 1014cab:	add    BYTE PTR [rax],bl
 1014cad:	push   rdx
 1014cae:	adc    al,0xf0
 1014cb0:	adc    ah,al
 1014cb2:	adc    BYTE PTR [rax+0x21],dh
 1014cb5:	add    eax,0xc4050002
 1014cba:	or     al,BYTE PTR [rax]
 1014cbc:	add    BYTE PTR [rax],dh
 1014cbe:	add    DWORD PTR [rax],eax
 1014cc0:	pop    rdx
 1014cc1:	xor    BYTE PTR [rcx],al
 1014cc3:	add    BYTE PTR [rsp+rcx*2+0x210001],bl
 1014cca:	add    BYTE PTR [rax],al
 1014ccc:	add    BYTE PTR [rax],dh
 1014cce:	add    DWORD PTR [rax],eax
 1014cd0:	pop    rdx
 1014cd1:	xor    BYTE PTR [rcx],al
 1014cd3:	add    BYTE PTR [rsp+rcx*2+0xc010001],bl
 1014cda:	(bad)  
 1014cdb:	add    BYTE PTR [rsp+rsi*1],cl
 1014cde:	or     eax,0x8520c00
 1014ce3:	jo     0x1014cec
 1014ce5:	(bad)  
 1014ce6:	(bad)  
 1014ce7:	push   rax
 1014ce8:	and    DWORD PTR [rdi],ecx
 1014cea:	(bad)  
 1014ceb:	add    BYTE PTR [rdi],cl
 1014ced:	hlt    
 1014cee:	or     al,0x0
 1014cf0:	or     ah,ah
 1014cf2:	or     eax,DWORD PTR [rax]
 1014cf4:	add    eax,0x40000ac4
 1014cf9:	xor    DWORD PTR [rcx],eax
 1014cfb:	add    BYTE PTR [rdx+0x31],bh
 1014cfe:	add    DWORD PTR [rax],eax
 1014d00:	fmul   DWORD PTR [rcx+rax*1+0x0]
 1014d04:	and    DWORD PTR [rax],eax
 1014d06:	add    BYTE PTR [rax],al
 1014d08:	rex xor DWORD PTR [rcx],eax
 1014d0b:	add    BYTE PTR [rdx+0x31],bh
 1014d0e:	add    DWORD PTR [rax],eax
 1014d10:	fmul   DWORD PTR [rcx+rax*1+0x0]
 1014d14:	add    DWORD PTR [rdx],ecx
 1014d16:	add    al,0x0
 1014d18:	or     dh,BYTE PTR [rdx+0x6]
 1014d1b:	rol    BYTE PTR [rax+rax*8],1
 1014d1e:	add    dh,BYTE PTR [rax+0x21]
 1014d21:	(bad)  
 1014d22:	or     al,BYTE PTR [rax]
 1014d24:	(bad)  
 1014d25:	hlt    
 1014d26:	(bad)  
 1014d27:	add    BYTE PTR [rcx],bl
 1014d29:	in     al,0x7
 1014d2b:	add    BYTE PTR [rdi],cl
 1014d2d:	fs (bad) 
 1014d2f:	add    BYTE PTR [rdx],cl
 1014d31:	push   rsp
 1014d32:	or     eax,0xc340500
 1014d37:	add    BYTE PTR [rax-0x4cfffece],al
 1014d3d:	xor    al,BYTE PTR [rcx]
 1014d3f:	add    BYTE PTR [rcx*2+0x210001],dl
 1014d46:	add    BYTE PTR [rax],al
 1014d48:	xor    BYTE PTR [rdx],0x1
 1014d4b:	add    BYTE PTR [rbx+0x14000132],dh
 1014d51:	add    QWORD PTR [r8],r8
 1014d54:	and    DWORD PTR [rax],eax
 1014d56:	or     al,BYTE PTR [rax]
 1014d58:	add    ah,dh
 1014d5a:	(bad)  
 1014d5b:	add    BYTE PTR [rax],al
 1014d5d:	in     al,0x7
 1014d5f:	add    BYTE PTR [rax],al
 1014d61:	fs (bad) 
 1014d63:	add    BYTE PTR [rax],al
 1014d65:	push   rsp
 1014d66:	or     eax,0xc340000
 1014d6b:	add    BYTE PTR [rax-0x4cfffece],al
 1014d71:	xor    al,BYTE PTR [rcx]
 1014d73:	add    BYTE PTR [rcx*2+0x6010001],dl
 1014d7a:	add    al,BYTE PTR [rax]
 1014d7c:	(bad)  
 1014d7d:	xor    al,BYTE PTR [rdx]
 1014d7f:	xor    BYTE PTR [rcx],al
 1014d81:	(bad)  
 1014d82:	add    al,BYTE PTR [rax]
 1014d84:	(bad)  
 1014d85:	xor    al,BYTE PTR [rdx]
 1014d87:	jo     0x1014daa
 1014d89:	clts   
 1014d8b:	add    BYTE PTR [rdi],cl
 1014d8d:	or     BYTE PTR fs:[rax],al
 1014d90:	or     dl,BYTE PTR [rdi+rax*1+0x0]
 1014d94:	add    eax,0xe0000634
 1014d99:	xor    al,0x1
 1014d9b:	add    BYTE PTR [rbp+rsi*1+0x1],al
 1014d9f:	add    BYTE PTR [rax+0x2100014d],al
 1014da5:	add    BYTE PTR [rsi],al
 1014da7:	add    BYTE PTR [rax],al
 1014da9:	or     BYTE PTR fs:[rax],al
 1014dac:	add    BYTE PTR [rdi+rax*1+0x0],dl
 1014db0:	add    BYTE PTR [rsi+rax*1],dh
 1014db3:	add    al,ah
 1014db5:	xor    al,0x1
 1014db7:	add    BYTE PTR [rbp+rsi*1+0x1],al
 1014dbb:	add    BYTE PTR [rax+0x2100014d],al
 1014dc1:	add    BYTE PTR [rax],al
 1014dc3:	add    al,ah
 1014dc5:	xor    al,0x1
 1014dc7:	add    BYTE PTR [rbp+rsi*1+0x1],al
 1014dcb:	add    BYTE PTR [rax+0x100014d],al
 1014dd1:	(bad)  
 1014dd2:	add    al,BYTE PTR [rax]
 1014dd4:	(bad)  
 1014dd5:	xor    al,BYTE PTR [rdx]
 1014dd7:	loopne 0x1014dfa
 1014dd9:	or     al,BYTE PTR [rax+rax*1]
 1014ddc:	or     ah,BYTE PTR [rdi+rax*1+0x0]
 1014de0:	add    eax,0xf0000634
 1014de5:	xor    eax,0x36190001
 1014dea:	add    DWORD PTR [rax],eax
 1014dec:	ror    BYTE PTR [rbp+0x1],1
 1014def:	add    BYTE PTR [rcx],ah
 1014df1:	or     al,BYTE PTR [rsi]
 1014df3:	add    BYTE PTR [rdx],cl
 1014df5:	je     0x1014dff
 1014df7:	add    BYTE PTR [rax],al
 1014df9:	fs (bad) 
 1014dfb:	add    BYTE PTR [rax],al
 1014dfd:	xor    al,0x6
 1014dff:	add    al,dh
 1014e01:	xor    eax,0x36190001
 1014e06:	add    DWORD PTR [rax],eax
 1014e08:	ror    BYTE PTR [rbp+0x1],1
 1014e0b:	add    BYTE PTR [rcx],ah
 1014e0d:	add    BYTE PTR [rsi],al
 1014e0f:	add    BYTE PTR [rax],al
 1014e11:	je     0x1014e1b
 1014e13:	add    BYTE PTR [rax],al
 1014e15:	fs (bad) 
 1014e17:	add    BYTE PTR [rax],al
 1014e19:	xor    al,0x6
 1014e1b:	add    al,dh
 1014e1d:	xor    eax,0x36190001
 1014e22:	add    DWORD PTR [rax],eax
 1014e24:	ror    BYTE PTR [rbp+0x1],1
 1014e27:	add    BYTE PTR [rcx],ah
 1014e29:	add    BYTE PTR [rax],al
 1014e2b:	add    al,dh
 1014e2d:	xor    eax,0x36190001
 1014e32:	add    DWORD PTR [rax],eax
 1014e34:	ror    BYTE PTR [rbp+0x1],1
 1014e37:	add    BYTE PTR [rcx],al
 1014e39:	(bad)  
 1014e3a:	or     al,BYTE PTR [rax]
 1014e3c:	(bad)  
 1014e3d:	xor    al,0x19
 1014e3f:	add    BYTE PTR [rsi],dl
 1014e41:	rcl    BYTE PTR [rdx],cl
 1014e43:	lock adc al,ah
 1014e46:	(bad)  
 1014e47:	ror    BYTE PTR [rax+rax*8],1
 1014e4a:	or     dh,BYTE PTR [rax+0x9]
 1014e4d:	(bad)  
 1014e4e:	or     BYTE PTR [rax+0x1],dl
 1014e51:	add    BYTE PTR [rax],al
 1014e53:	add    BYTE PTR [rax+0x20000070],dl
 1014e59:	loop   0x1014e5e
 1014e5b:	add    al,dh
 1014e5d:	jno    0x1014e60
 1014e5f:	add    BYTE PTR [rax-0x27fffeb2],dh
 1014e65:	rex.WRXB add QWORD PTR [r8],r8
	...
 1014e70:	add    DWORD PTR [rax],eax
 1014e72:	add    BYTE PTR [rax],al
 1014e74:	movabs al,ds:0x180003e228000070
 1014e7d:	jb     0x1014e80
 1014e7f:	add    al,bl
 1014e81:	rex.WRX add QWORD PTR [rax],r8
 1014e84:	add    BYTE PTR [rax+0x1],dl
	...
 1014eaf:	add    BYTE PTR [rdi+rcx*2],ah
 1014eb2:	add    DWORD PTR [rax],eax
 1014eb4:	add    BYTE PTR [rax],al
 1014eb6:	add    BYTE PTR [rax],al
 1014eb8:	cmp    al,0x4f
 1014eba:	add    DWORD PTR [rax],eax
 1014ebc:	add    BYTE PTR [rax],al
 1014ebe:	add    BYTE PTR [rax],al
 1014ec0:	push   rsi
 1014ec1:	rex.WRXB add QWORD PTR [r8],r8
 1014ec4:	add    BYTE PTR [rax],al
 1014ec6:	add    BYTE PTR [rax],al
 1014ec8:	or     BYTE PTR [rdi+0x1],cl
	...
 1014ed7:	add    BYTE PTR [rax+0x4f],dh
 1014eda:	add    DWORD PTR [rax],eax
 1014edc:	add    BYTE PTR [rax],al
 1014ede:	add    BYTE PTR [rax],al
 1014ee0:	(bad)  
 1014ee1:	rex.WRXB add QWORD PTR [r8],r8
 1014ee4:	add    BYTE PTR [rax],al
 1014ee6:	add    BYTE PTR [rax],al
 1014ee8:	(bad)  
 1014ee9:	rex.WRXB add QWORD PTR [r8],r8
 1014eec:	add    BYTE PTR [rax],al
 1014eee:	add    BYTE PTR [rax],al
 1014ef0:	scas   al,BYTE PTR es:[rdi]
 1014ef1:	rex.WRXB add QWORD PTR [r8],r8
 1014ef4:	add    BYTE PTR [rax],al
 1014ef6:	add    BYTE PTR [rax],al
 1014ef8:	ror    BYTE PTR [rdi+0x1],0x0
	...
 1014f08:	add    BYTE PTR [rax],al
 1014f0a:	rex.RXB
 1014f0b:	gs je  0x1014f61
 1014f0e:	jbe    0x1014f73
 1014f10:	rex.WB outs dx,BYTE PTR ds:[rsi]
 1014f12:	jae    0x1014f88
 1014f14:	(bad)  
 1014f15:	outs   dx,BYTE PTR ds:[rsi]
 1014f16:	movsxd esp,DWORD PTR [rbp+0x49]
 1014f19:	rex.R
 1014f1a:	rex.RX jb 0x1014f8c
 1014f1d:	ins    DWORD PTR es:[rdi],dx
 1014f1e:	rex.WRX (bad) 
 1014f20:	ins    DWORD PTR es:[rdi],dx
 1014f21:	add    BYTE PTR gs:[rcx],dh
 1014f24:	add    BYTE PTR [rax],al
 1014f26:	rex.RXB
 1014f27:	gs je  0x1014f73
 1014f2a:	outs   dx,BYTE PTR ds:[rsi]
 1014f2b:	jae    0x1014fa1
 1014f2d:	push   rdx
 1014f2e:	gs addr32 push rax
 1014f31:	(bad)  
 1014f32:	je     0x1014f9c
 1014f34:	rex.X jns 0x1014f85
 1014f37:	(bad)  
 1014f38:	ins    DWORD PTR es:[rdi],dx
 1014f39:	add    BYTE PTR gs:[rax+rax*1+0x0],dh
 1014f3e:	rex.RXB
 1014f3f:	gs je  0x1014f8b
 1014f42:	outs   dx,BYTE PTR ds:[rsi]
 1014f43:	jae    0x1014fb9
 1014f45:	push   rdx
 1014f46:	outs   dx,DWORD PTR ds:[rsi]
 1014f47:	outs   dx,DWORD PTR ds:[rsi]
 1014f48:	je     0x1014f9c
 1014f4a:	gs addr32 push rax
 1014f4d:	(bad)  
 1014f4e:	je     0x1014fb8
 1014f50:	rex.X jns 0x1014f9c
 1014f53:	add    BYTE PTR [rax+0x0],r14b
 1014f57:	add    BYTE PTR [rdi+0x65],al
 1014f5a:	je     0x1014faf
 1014f5c:	push   rcx
 1014f5d:	rex.WR push rbx
 1014f5f:	gs jb  0x1014fd8
 1014f62:	imul   esp,DWORD PTR [rbx+0x65],0x65707954
 1014f69:	rex.X jns 0x1014fba
 1014f6c:	(bad)  
 1014f6d:	ins    DWORD PTR es:[rdi],dx
 1014f6e:	add    BYTE PTR gs:[rax],al
 1014f71:	add    BYTE PTR [rdi+0x65],dl
 1014f74:	jb     0x1014fc8
 1014f76:	gs jo  0x1014fe8
 1014f79:	jb     0x1014fef
 1014f7b:	rex.XB jb 0x1014fe3
 1014f7e:	(bad)  
 1014f7f:	je     0x1014fe6
 1014f81:	add    BYTE PTR [rax],al
 1014f83:	add    BYTE PTR [rdi+0x65],dl
 1014f86:	jb     0x1014fda
 1014f88:	gs jo  0x1014ffa
 1014f8b:	jb     0x1015001
 1014f8d:	push   rbx
 1014f8e:	gs je  0x1014fe1
 1014f91:	(bad)  
 1014f92:	jb     0x1014ff5
 1014f94:	ins    DWORD PTR es:[rdi],dx
 1014f95:	gs je  0x1014ffd
 1014f98:	jb     0x1014f9a
 1014f9a:	add    BYTE PTR [rax],al
 1014f9c:	push   rdi
 1014f9d:	gs jb  0x1014ff2
 1014fa0:	gs jo  0x1015012
 1014fa3:	jb     0x1015019
 1014fa5:	rex.B
 1014fa6:	fs imul r13d,DWORD PTR fs:[rbp+r12*2+0x0],0x57000000
 1014fb1:	gs jb  0x1015006
 1014fb4:	gs jo  0x1015026
 1014fb7:	jb     0x101502d
 1014fb9:	push   rbx
 1014fba:	jne    0x101501e
 1014fbc:	ins    DWORD PTR es:[rdi],dx
 1014fbd:	imul   esi,DWORD PTR [rax+rax*1+0x0],0x72655700
 1014fc5:	push   rdx
 1014fc6:	gs jo  0x1015038
 1014fc9:	jb     0x101503f
 1014fcb:	rex.XB ins BYTE PTR es:[rdi],dx
 1014fcd:	outs   dx,DWORD PTR ds:[rsi]
 1014fce:	jae    0x1015035
 1014fd0:	rex.W (bad) 
 1014fd2:	outs   dx,BYTE PTR ds:[rsi]
 1014fd3:	fs ins BYTE PTR es:[rdi],dx
 1014fd5:	add    BYTE PTR gs:[rsi],ch
	...
 1015030:	clc    
 1015031:	push   rax
 1015032:	add    DWORD PTR [rax],eax
	...
 101503c:	push   rax
 101503d:	push   rdi
 101503e:	add    DWORD PTR [rax],eax
 1015040:	add    BYTE PTR [rax],dl
 1015042:	add    BYTE PTR [rax],al
 1015044:	mov    BYTE PTR [rcx+0x1],dl
	...
 101504f:	add    BYTE PTR [rdx],bl
 1015051:	pop    rbx
 1015052:	add    DWORD PTR [rax],eax
 1015054:	nop
 1015055:	adc    BYTE PTR [rax],al
 1015057:	add    BYTE PTR [rax],dl
 1015059:	push   rsp
 101505a:	add    DWORD PTR [rax],eax
	...
 1015064:	sub    al,0x5d
 1015066:	add    DWORD PTR [rax],eax
 1015068:	sbb    BYTE PTR [rbx],dl
 101506a:	add    BYTE PTR [rax],al
 101506c:	adc    BYTE PTR [rsi+0x1],dl
	...
 1015077:	add    BYTE PTR [rdx+0x1800015d],dh
 101507d:	adc    eax,0x55900000
 1015082:	add    DWORD PTR [rax],eax
	...
 101508c:	sbb    bl,BYTE PTR [rsi+0x1]
 101508f:	add    BYTE PTR [rax-0x47ffffec],bl
 1015095:	push   rbp
 1015096:	add    DWORD PTR [rax],eax
	...
 10150a0:	pop    si
 10150a2:	add    DWORD PTR [rax],eax
 10150a4:	rcl    BYTE PTR [rax+rax*1],0x0
 10150a8:	js     0x10150fb
 10150aa:	add    DWORD PTR [rax],eax
	...
 10150b4:	mov    BYTE PTR [rsi+0x1],bl
 10150b7:	add    BYTE PTR [rax+0x10],al
 10150bd:	push   rsi
 10150be:	add    DWORD PTR [rax],eax
	...
 10150c8:	xchg   esi,eax
 10150c9:	pop    rsi
 10150ca:	add    DWORD PTR [rax],eax
 10150cc:	or     BYTE PTR [rip+0x55e00000],dl        # 0x56e150d2
 10150d2:	add    DWORD PTR [rax],eax
	...
 10150dc:	in     al,0x5e
 10150de:	add    DWORD PTR [rax],eax
 10150e0:	call   0x10150f9
	...
 10150f5:	add    BYTE PTR [rax],al
 10150f7:	add    BYTE PTR [rax],ch
 10150f9:	push   rsi
 10150fa:	add    DWORD PTR [rax],eax
 10150fc:	add    BYTE PTR [rax],al
 10150fe:	add    BYTE PTR [rax],al
 1015100:	cmp    al,0x56
 1015102:	add    DWORD PTR [rax],eax
 1015104:	add    BYTE PTR [rax],al
 1015106:	add    BYTE PTR [rax],al
 1015108:	push   rsp
 1015109:	push   rsi
 101510a:	add    DWORD PTR [rax],eax
 101510c:	add    BYTE PTR [rax],al
 101510e:	add    BYTE PTR [rax],al
 1015110:	ins    BYTE PTR es:[rdi],dx
 1015111:	push   rsi
 1015112:	add    DWORD PTR [rax],eax
 1015114:	add    BYTE PTR [rax],al
 1015116:	add    BYTE PTR [rax],al
 1015118:	jp     0x1015170
 101511a:	add    DWORD PTR [rax],eax
 101511c:	add    BYTE PTR [rax],al
 101511e:	add    BYTE PTR [rax],al
 1015120:	mov    dl,BYTE PTR [rsi+0x1]
 1015123:	add    BYTE PTR [rax],al
 1015125:	add    BYTE PTR [rax],al
 1015127:	add    BYTE PTR [rsi+0x156],bl
 101512d:	add    BYTE PTR [rax],al
 101512f:	add    BYTE PTR [rsi+rdx*2+0x1],dh
 1015136:	add    BYTE PTR [rax],al
 1015138:	(bad)  
 1015139:	push   rsi
 101513a:	add    DWORD PTR [rax],eax
 101513c:	add    BYTE PTR [rax],al
 101513e:	add    BYTE PTR [rax],al
 1015140:	(bad)  
 1015141:	push   rsi
 1015142:	add    DWORD PTR [rax],eax
 1015144:	add    BYTE PTR [rax],al
 1015146:	add    BYTE PTR [rax],al
 1015148:	out    dx,al
 1015149:	push   rsi
 101514a:	add    DWORD PTR [rax],eax
 101514c:	add    BYTE PTR [rax],al
 101514e:	add    BYTE PTR [rax],al
 1015150:	(bad)  
 1015151:	push   rdi
 1015152:	add    DWORD PTR [rax],eax
 1015154:	add    BYTE PTR [rax],al
 1015156:	add    BYTE PTR [rax],al
 1015158:	and    dl,BYTE PTR [rdi+0x1]
 101515b:	add    BYTE PTR [rax],al
 101515d:	add    BYTE PTR [rax],al
 101515f:	add    BYTE PTR [rax+0x57],al
 1015162:	add    DWORD PTR [rax],eax
 1015164:	add    BYTE PTR [rax],al
 1015166:	add    BYTE PTR [rax],al
 1015168:	lock pop rsi
 101516a:	add    DWORD PTR [rax],eax
	...
 1015178:	jb     0x10151d8
 101517a:	add    DWORD PTR [rax],eax
	...
 1015188:	xor    bl,BYTE PTR [rcx+0x1]
 101518b:	add    BYTE PTR [rax],al
 101518d:	add    BYTE PTR [rax],al
 101518f:	add    BYTE PTR [rsi],bh
 1015191:	pop    rcx
 1015192:	add    DWORD PTR [rax],eax
 1015194:	add    BYTE PTR [rax],al
 1015196:	add    BYTE PTR [rax],al
 1015198:	push   rsp
 1015199:	pop    rcx
 101519a:	add    DWORD PTR [rax],eax
 101519c:	add    BYTE PTR [rax],al
 101519e:	add    BYTE PTR [rax],al
 10151a0:	pop    rsp
 10151a1:	pop    rcx
 10151a2:	add    DWORD PTR [rax],eax
 10151a4:	add    BYTE PTR [rax],al
 10151a6:	add    BYTE PTR [rax],al
 10151a8:	push   0x59
 10151aa:	add    DWORD PTR [rax],eax
 10151ac:	add    BYTE PTR [rax],al
 10151ae:	add    BYTE PTR [rax],al
 10151b0:	jbe    0x101520b
 10151b2:	add    DWORD PTR [rax],eax
 10151b4:	add    BYTE PTR [rax],al
 10151b6:	add    BYTE PTR [rax],al
 10151b8:	(bad)  
 10151b9:	pop    rcx
 10151ba:	add    DWORD PTR [rax],eax
 10151bc:	add    BYTE PTR [rax],al
 10151be:	add    BYTE PTR [rax],al
 10151c0:	xchg   esi,eax
 10151c1:	pop    rcx
 10151c2:	add    DWORD PTR [rax],eax
 10151c4:	add    BYTE PTR [rax],al
 10151c6:	add    BYTE PTR [rax],al
 10151c8:	test   al,0x59
 10151ca:	add    DWORD PTR [rax],eax
 10151cc:	add    BYTE PTR [rax],al
 10151ce:	add    BYTE PTR [rax],al
 10151d0:	mov    ah,0x59
 10151d2:	add    DWORD PTR [rax],eax
 10151d4:	add    BYTE PTR [rax],al
 10151d6:	add    BYTE PTR [rax],al
 10151d8:	ret    0x159
 10151db:	add    BYTE PTR [rax],al
 10151dd:	add    BYTE PTR [rax],al
 10151df:	add    dl,dl
 10151e1:	pop    rcx
 10151e2:	add    DWORD PTR [rax],eax
 10151e4:	add    BYTE PTR [rax],al
 10151e6:	add    BYTE PTR [rax],al
 10151e8:	in     al,0x59
 10151ea:	add    DWORD PTR [rax],eax
 10151ec:	add    BYTE PTR [rax],al
 10151ee:	add    BYTE PTR [rax],al
 10151f0:	out    dx,al
 10151f1:	pop    rcx
 10151f2:	add    DWORD PTR [rax],eax
 10151f4:	add    BYTE PTR [rax],al
 10151f6:	add    BYTE PTR [rax],al
 10151f8:	(bad)  
 10151f9:	pop    rcx
 10151fa:	add    DWORD PTR [rax],eax
 10151fc:	add    BYTE PTR [rax],al
 10151fe:	add    BYTE PTR [rax],al
 1015200:	adc    BYTE PTR [rdx+0x1],bl
 1015203:	add    BYTE PTR [rax],al
 1015205:	add    BYTE PTR [rax],al
 1015207:	add    BYTE PTR [rsi],ah
 1015209:	pop    rdx
 101520a:	add    DWORD PTR [rax],eax
 101520c:	add    BYTE PTR [rax],al
 101520e:	add    BYTE PTR [rax],al
 1015210:	cmp    bl,BYTE PTR [rdx+0x1]
 1015213:	add    BYTE PTR [rax],al
 1015215:	add    BYTE PTR [rax],al
 1015217:	add    BYTE PTR [rdx],cl
 1015219:	pop    rcx
 101521a:	add    DWORD PTR [rax],eax
 101521c:	add    BYTE PTR [rax],al
 101521e:	add    BYTE PTR [rax],al
 1015220:	pop    rsp
 1015221:	pop    rdx
 1015222:	add    DWORD PTR [rax],eax
 1015224:	add    BYTE PTR [rax],al
 1015226:	add    BYTE PTR [rax],al
 1015228:	jb     0x1015284
 101522a:	add    DWORD PTR [rax],eax
 101522c:	add    BYTE PTR [rax],al
 101522e:	add    BYTE PTR [rax],al
 1015230:	sbb    BYTE PTR [rdx+0x1],0x0
 1015234:	add    BYTE PTR [rax],al
 1015236:	add    BYTE PTR [rax],al
 1015238:	xchg   edx,eax
 1015239:	pop    rdx
 101523a:	add    DWORD PTR [rax],eax
 101523c:	add    BYTE PTR [rax],al
 101523e:	add    BYTE PTR [rax],al
 1015240:	movabs ds:0xb60000000000015a,al
 1015249:	pop    rdx
 101524a:	add    DWORD PTR [rax],eax
 101524c:	add    BYTE PTR [rax],al
 101524e:	add    BYTE PTR [rax],al
 1015250:	(bad)  
 1015251:	pop    rdx
 1015252:	add    DWORD PTR [rax],eax
 1015254:	add    BYTE PTR [rax],al
 1015256:	add    BYTE PTR [rax],al
 1015258:	ficomp WORD PTR [rdx+0x1]
 101525b:	add    BYTE PTR [rax],al
 101525d:	add    BYTE PTR [rax],al
 101525f:	add    dl,bh
 1015261:	pop    rdx
 1015262:	add    DWORD PTR [rax],eax
 1015264:	add    BYTE PTR [rax],al
 1015266:	add    BYTE PTR [rax],al
 1015268:	or     bl,BYTE PTR [rbx+0x1]
 101526b:	add    BYTE PTR [rax],al
 101526d:	add    BYTE PTR [rax],al
 101526f:	add    BYTE PTR [rsi],al
 1015271:	(bad)  
 1015272:	add    DWORD PTR [rax],eax
 1015274:	add    BYTE PTR [rax],al
 1015276:	add    BYTE PTR [rax],al
 1015278:	repnz pop rdi
 101527a:	add    DWORD PTR [rax],eax
 101527c:	add    BYTE PTR [rax],al
 101527e:	add    BYTE PTR [rax],al
 1015280:	fcomp  DWORD PTR [rdi+0x1]
 1015283:	add    BYTE PTR [rax],al
 1015285:	add    BYTE PTR [rax],al
 1015287:	add    ah,al
 1015289:	pop    rdi
 101528a:	add    DWORD PTR [rax],eax
 101528c:	add    BYTE PTR [rax],al
 101528e:	add    BYTE PTR [rax],al
 1015290:	mov    al,0x5f
 1015292:	add    DWORD PTR [rax],eax
 1015294:	add    BYTE PTR [rax],al
 1015296:	add    BYTE PTR [rax],al
 1015298:	xchg   esp,eax
 1015299:	pop    rdi
 101529a:	add    DWORD PTR [rax],eax
 101529c:	add    BYTE PTR [rax],al
 101529e:	add    BYTE PTR [rax],al
 10152a0:	sbb    BYTE PTR [rdi+0x1],0x0
 10152a4:	add    BYTE PTR [rax],al
 10152a6:	add    BYTE PTR [rax],al
 10152a8:	pop    di
 10152aa:	add    DWORD PTR [rax],eax
 10152ac:	add    BYTE PTR [rax],al
 10152ae:	add    BYTE PTR [rax],al
 10152b0:	push   rsi
 10152b1:	pop    rdi
 10152b2:	add    DWORD PTR [rax],eax
 10152b4:	add    BYTE PTR [rax],al
 10152b6:	add    BYTE PTR [rax],al
 10152b8:	cmp    al,0x5f
 10152ba:	add    DWORD PTR [rax],eax
 10152bc:	add    BYTE PTR [rax],al
 10152be:	add    BYTE PTR [rax],al
 10152c0:	(bad)  
 10152c1:	pop    rdi
 10152c2:	add    DWORD PTR [rax],eax
 10152c4:	add    BYTE PTR [rax],al
 10152c6:	add    BYTE PTR [rax],al
 10152c8:	(bad)  
 10152c9:	pop    rdi
 10152ca:	add    DWORD PTR [rax],eax
 10152cc:	add    BYTE PTR [rax],al
 10152ce:	add    BYTE PTR [rax],al
 10152d0:	(bad)  
 10152d1:	pop    rsi
 10152d2:	add    DWORD PTR [rax],eax
 10152d4:	add    BYTE PTR [rax],al
 10152d6:	add    BYTE PTR [rax],al
 10152d8:	repnz pop rax
 10152da:	add    DWORD PTR [rax],eax
 10152dc:	add    BYTE PTR [rax],al
 10152de:	add    BYTE PTR [rax],al
 10152e0:	ficomp DWORD PTR [rax+0x1]
 10152e3:	add    BYTE PTR [rax],al
 10152e5:	add    BYTE PTR [rax],al
 10152e7:	add    ah,cl
 10152e9:	pop    rax
 10152ea:	add    DWORD PTR [rax],eax
 10152ec:	add    BYTE PTR [rax],al
 10152ee:	add    BYTE PTR [rax],al
 10152f0:	mov    esp,0x158
 10152f5:	add    BYTE PTR [rax],al
 10152f7:	add    BYTE PTR [rdx],dl
 10152f9:	(bad)  
 10152fa:	add    DWORD PTR [rax],eax
 10152fc:	add    BYTE PTR [rax],al
 10152fe:	add    BYTE PTR [rax],al
 1015300:	lods   al,BYTE PTR ds:[rsi]
 1015301:	pop    rax
 1015302:	add    DWORD PTR [rax],eax
 1015304:	add    BYTE PTR [rax],al
 1015306:	add    BYTE PTR [rax],al
 1015308:	xchg   esi,eax
 1015309:	pop    rax
 101530a:	add    DWORD PTR [rax],eax
 101530c:	add    BYTE PTR [rax],al
 101530e:	add    BYTE PTR [rax],al
 1015310:	(bad)  
 1015311:	pop    rax
 1015312:	add    DWORD PTR [rax],eax
 1015314:	add    BYTE PTR [rax],al
 1015316:	add    BYTE PTR [rax],al
 1015318:	jb     0x1015372
 101531a:	add    DWORD PTR [rax],eax
 101531c:	add    BYTE PTR [rax],al
 101531e:	add    BYTE PTR [rax],al
 1015320:	pop    rsi
 1015321:	pop    rax
 1015322:	add    DWORD PTR [rax],eax
 1015324:	add    BYTE PTR [rax],al
 1015326:	add    BYTE PTR [rax],al
 1015328:	push   rax
 1015329:	pop    rax
 101532a:	add    DWORD PTR [rax],eax
 101532c:	add    BYTE PTR [rax],al
 101532e:	add    BYTE PTR [rax],al
 1015330:	cmp    bl,BYTE PTR [rax+0x1]
 1015333:	add    BYTE PTR [rax],al
 1015335:	add    BYTE PTR [rax],al
 1015337:	add    BYTE PTR [rax+rbx*2],ah
 101533a:	add    DWORD PTR [rax],eax
 101533c:	add    BYTE PTR [rax],al
 101533e:	add    BYTE PTR [rax],al
 1015340:	adc    al,0x58
 1015342:	add    DWORD PTR [rax],eax
 1015344:	add    BYTE PTR [rax],al
 1015346:	add    BYTE PTR [rax],al
 1015348:	(bad)  
 1015349:	pop    rax
 101534a:	add    DWORD PTR [rax],eax
 101534c:	add    BYTE PTR [rax],al
 101534e:	add    BYTE PTR [rax],al
 1015350:	lock push rdi
 1015352:	add    DWORD PTR [rax],eax
 1015354:	add    BYTE PTR [rax],al
 1015356:	add    BYTE PTR [rax],al
 1015358:	fcom   QWORD PTR [rdi+0x1]
 101535b:	add    BYTE PTR [rax],al
 101535d:	add    BYTE PTR [rax],al
 101535f:	add    dh,cl
 1015361:	push   rdi
 1015362:	add    DWORD PTR [rax],eax
 1015364:	add    BYTE PTR [rax],al
 1015366:	add    BYTE PTR [rax],al
 1015368:	mov    esi,0x157
 101536d:	add    BYTE PTR [rax],al
 101536f:	add    BYTE PTR [rdi+rdx*2+0x1],ch
 1015376:	add    BYTE PTR [rax],al
 1015378:	pushf  
 1015379:	push   rdi
 101537a:	add    DWORD PTR [rax],eax
 101537c:	add    BYTE PTR [rax],al
 101537e:	add    BYTE PTR [rax],al
 1015380:	mov    ss,WORD PTR [rdi+0x1]
 1015383:	add    BYTE PTR [rax],al
 1015385:	add    BYTE PTR [rax],al
 1015387:	add    BYTE PTR [rsi+0x57],bh
 101538a:	add    DWORD PTR [rax],eax
 101538c:	add    BYTE PTR [rax],al
 101538e:	add    BYTE PTR [rax],al
 1015390:	ins    BYTE PTR es:[rdi],dx
 1015391:	push   rdi
 1015392:	add    DWORD PTR [rax],eax
 1015394:	add    BYTE PTR [rax],al
 1015396:	add    BYTE PTR [rax],al
 1015398:	(bad)  
 1015399:	(bad)  
 101539a:	add    DWORD PTR [rax],eax
 101539c:	add    BYTE PTR [rax],al
 101539e:	add    BYTE PTR [rax],al
 10153a0:	cmp    BYTE PTR [rax+0x1],ah
 10153a3:	add    BYTE PTR [rax],al
 10153a5:	add    BYTE PTR [rax],al
 10153a7:	add    BYTE PTR [rdx+0x60],dl
 10153aa:	add    DWORD PTR [rax],eax
 10153ac:	add    BYTE PTR [rax],al
 10153ae:	add    BYTE PTR [rax],al
 10153b0:	fs (bad) 
 10153b2:	add    DWORD PTR [rax],eax
 10153b4:	add    BYTE PTR [rax],al
 10153b6:	add    BYTE PTR [rax],al
 10153b8:	pop    rsi
 10153b9:	push   rdi
 10153ba:	add    DWORD PTR [rax],eax
 10153bc:	add    BYTE PTR [rax],al
 10153be:	add    BYTE PTR [rax],al
 10153c0:	rex.WRX pop rdx
 10153c2:	add    DWORD PTR [rax],eax
 10153c4:	add    BYTE PTR [rax],al
 10153c6:	add    BYTE PTR [rax],al
 10153c8:	jb     0x101542a
 10153ca:	add    DWORD PTR [rax],eax
 10153cc:	add    BYTE PTR [rax],al
 10153ce:	add    BYTE PTR [rax],al
 10153d0:	test   BYTE PTR [rax+0x1],ah
 10153d3:	add    BYTE PTR [rax],al
 10153d5:	add    BYTE PTR [rax],al
 10153d7:	add    BYTE PTR [rax+0x160],dl
 10153dd:	add    BYTE PTR [rax],al
 10153df:	add    dh,dh
 10153e1:	(bad)  
 10153e2:	add    DWORD PTR [rax],eax
 10153e4:	add    BYTE PTR [rax],al
 10153e6:	add    BYTE PTR [rax],al
 10153e8:	out    0x60,al
 10153ea:	add    DWORD PTR [rax],eax
 10153ec:	add    BYTE PTR [rax],al
 10153ee:	add    BYTE PTR [rax],al
 10153f0:	fsub   DWORD PTR [rax+0x1]
 10153f3:	add    BYTE PTR [rax],al
 10153f5:	add    BYTE PTR [rax],al
 10153f7:	add    BYTE PTR [rax+riz*2+0x1],bh
 10153fe:	add    BYTE PTR [rax],al
 1015400:	movabs al,ds:0x160
 1015409:	add    BYTE PTR [rax],al
 101540b:	add    BYTE PTR [rax],al
 101540d:	add    BYTE PTR [rax],al
 101540f:	add    BYTE PTR [rax+0x5d],bh
 1015412:	add    DWORD PTR [rax],eax
 1015414:	add    BYTE PTR [rax],al
 1015416:	add    BYTE PTR [rax],al
 1015418:	fs pop rbp
 101541a:	add    DWORD PTR [rax],eax
 101541c:	add    BYTE PTR [rax],al
 101541e:	add    BYTE PTR [rax],al
 1015420:	pop    rdx
 1015421:	pop    rbp
 1015422:	add    DWORD PTR [rax],eax
 1015424:	add    BYTE PTR [rax],al
 1015426:	add    BYTE PTR [rax],al
 1015428:	push   rdx
 1015429:	pop    rbp
 101542a:	add    DWORD PTR [rax],eax
 101542c:	add    BYTE PTR [rax],al
 101542e:	add    BYTE PTR [rax],al
 1015430:	rex.R pop rbp
 1015432:	add    DWORD PTR [rax],eax
 1015434:	add    BYTE PTR [rax],al
 1015436:	add    BYTE PTR [rax],al
 1015438:	cmp    bl,BYTE PTR [rbp+0x1]
 101543b:	add    BYTE PTR [rax],al
 101543d:	add    BYTE PTR [rax],al
 101543f:	add    BYTE PTR [rdx],bl
 1015441:	pop    rbp
 1015442:	add    DWORD PTR [rax],eax
 1015444:	add    BYTE PTR [rax],al
 1015446:	add    BYTE PTR [rax],al
 1015448:	adc    BYTE PTR [rbp+0x1],bl
 101544b:	add    BYTE PTR [rax],al
 101544d:	add    BYTE PTR [rax],al
 101544f:	add    BYTE PTR [rbx*2+0x1],al
 1015456:	add    BYTE PTR [rax],al
 1015458:	lock pop rsp
 101545a:	add    DWORD PTR [rax],eax
 101545c:	add    BYTE PTR [rax],al
 101545e:	add    BYTE PTR [rax],al
 1015460:	ficomp DWORD PTR [rcx+rax*1+0x0]
 1015464:	add    BYTE PTR [rax],al
 1015466:	add    BYTE PTR [rax],al
 1015468:	int3   
 1015469:	pop    rsp
 101546a:	add    DWORD PTR [rax],eax
 101546c:	add    BYTE PTR [rax],al
 101546e:	add    BYTE PTR [rax],al
 1015470:	rcr    BYTE PTR [rcx+rax*1+0x0],0x0
 1015475:	add    BYTE PTR [rax],al
 1015477:	add    BYTE PTR [rdx+0x15c],dh
 101547d:	add    BYTE PTR [rax],al
 101547f:	add    BYTE PTR [rax+0x15c],ch
 1015485:	add    BYTE PTR [rax],al
 1015487:	add    BYTE PTR [rax+0x15c],ah
 101548d:	add    BYTE PTR [rax],al
 101548f:	add    BYTE PTR [rdx+0x15c],dl
 1015495:	add    BYTE PTR [rax],al
 1015497:	add    BYTE PTR [rax+0x15c],al
 101549d:	add    BYTE PTR [rax],al
 101549f:	add    BYTE PTR [rdx+0x5c],dh
 10154a2:	add    DWORD PTR [rax],eax
 10154a4:	add    BYTE PTR [rax],al
 10154a6:	add    BYTE PTR [rax],al
 10154a8:	push   0x15c
 10154ad:	add    BYTE PTR [rax],al
 10154af:	add    BYTE PTR [rsi+0x5c],bl
 10154b2:	add    DWORD PTR [rax],eax
 10154b4:	add    BYTE PTR [rax],al
 10154b6:	add    BYTE PTR [rax],al
 10154b8:	rex.RX pop rsp
 10154ba:	add    DWORD PTR [rax],eax
 10154bc:	add    BYTE PTR [rax],al
 10154be:	add    BYTE PTR [rax],al
 10154c0:	ss pop rsp
 10154c2:	add    DWORD PTR [rax],eax
 10154c4:	add    BYTE PTR [rax],al
 10154c6:	add    BYTE PTR [rax],al
 10154c8:	es pop rsp
 10154ca:	add    DWORD PTR [rax],eax
 10154cc:	add    BYTE PTR [rax],al
 10154ce:	add    BYTE PTR [rax],al
 10154d0:	(bad)  
 10154d1:	pop    rsp
 10154d2:	add    DWORD PTR [rax],eax
 10154d4:	add    BYTE PTR [rax],al
 10154d6:	add    BYTE PTR [rax],al
 10154d8:	adc    bl,BYTE PTR [rcx+rax*1+0x0]
 10154dc:	add    BYTE PTR [rax],al
 10154de:	add    BYTE PTR [rax],al
 10154e0:	or     BYTE PTR [rcx+rax*1+0x0],bl
 10154e4:	add    BYTE PTR [rax],al
 10154e6:	add    BYTE PTR [rax],al
 10154e8:	clc    
 10154e9:	pop    rbx
 10154ea:	add    DWORD PTR [rax],eax
 10154ec:	add    BYTE PTR [rax],al
 10154ee:	add    BYTE PTR [rax],al
 10154f0:	out    dx,al
 10154f1:	pop    rbx
 10154f2:	add    DWORD PTR [rax],eax
 10154f4:	add    BYTE PTR [rax],al
 10154f6:	add    BYTE PTR [rax],al
 10154f8:	loop   0x1015555
 10154fa:	add    DWORD PTR [rax],eax
 10154fc:	add    BYTE PTR [rax],al
 10154fe:	add    BYTE PTR [rax],al
 1015500:	(bad)  
 1015501:	pop    rbx
 1015502:	add    DWORD PTR [rax],eax
 1015504:	add    BYTE PTR [rax],al
 1015506:	add    BYTE PTR [rax],al
 1015508:	enter  0x15b,0x0
 101550c:	add    BYTE PTR [rax],al
 101550e:	add    BYTE PTR [rax],al
 1015510:	mov    esi,0x15b
 1015515:	add    BYTE PTR [rax],al
 1015517:	add    BYTE PTR [rax+0x15b],dh
 101551d:	add    BYTE PTR [rax],al
 101551f:	add    BYTE PTR [rdx+0x15b],ah
 1015525:	add    BYTE PTR [rax],al
 1015527:	add    BYTE PTR [rax+0x15b],bl
 101552d:	add    BYTE PTR [rax],al
 101552f:	add    BYTE PTR [rdx+0x15b],cl
 1015535:	add    BYTE PTR [rax],al
 1015537:	add    BYTE PTR [rsi+0x5b],bh
 101553a:	add    DWORD PTR [rax],eax
 101553c:	add    BYTE PTR [rax],al
 101553e:	add    BYTE PTR [rax],al
 1015540:	je     0x101559d
 1015542:	add    DWORD PTR [rax],eax
 1015544:	add    BYTE PTR [rax],al
 1015546:	add    BYTE PTR [rax],al
 1015548:	push   0x5b
 101554a:	add    DWORD PTR [rax],eax
 101554c:	add    BYTE PTR [rax],al
 101554e:	add    BYTE PTR [rax],al
 1015550:	(bad)  
 1015551:	pop    rbx
 1015552:	add    DWORD PTR [rax],eax
 1015554:	add    BYTE PTR [rax],al
 1015556:	add    BYTE PTR [rax],al
 1015558:	push   rsi
 1015559:	pop    rbx
 101555a:	add    DWORD PTR [rax],eax
 101555c:	add    BYTE PTR [rax],al
 101555e:	add    BYTE PTR [rax],al
 1015560:	rex.WX pop rbx
 1015562:	add    DWORD PTR [rax],eax
 1015564:	add    BYTE PTR [rax],al
 1015566:	add    BYTE PTR [rax],al
 1015568:	cmp    bl,BYTE PTR [rbx+0x1]
 101556b:	add    BYTE PTR [rax],al
 101556d:	add    BYTE PTR [rax],al
 101556f:	add    BYTE PTR [rax],ch
 1015571:	pop    rbx
 1015572:	add    DWORD PTR [rax],eax
 1015574:	add    BYTE PTR [rax],al
 1015576:	add    BYTE PTR [rax],al
 1015578:	add    BYTE PTR [rcx+rax*1+0x0],bl
 101557c:	add    BYTE PTR [rax],al
 101557e:	add    BYTE PTR [rax],al
 1015580:	or     BYTE PTR [rcx+0x1],ah
	...
 101558f:	add    ah,dl
 1015591:	pop    rbp
 1015592:	add    DWORD PTR [rax],eax
 1015594:	add    BYTE PTR [rax],al
 1015596:	add    BYTE PTR [rax],al
 1015598:	(bad)  
 1015599:	pop    rbp
 101559a:	add    DWORD PTR [rax],eax
 101559c:	add    BYTE PTR [rax],al
 101559e:	add    BYTE PTR [rax],al
 10155a0:	add    bl,BYTE PTR [rsi+0x1]
 10155a3:	add    BYTE PTR [rax],al
 10155a5:	add    BYTE PTR [rax],al
 10155a7:	add    BYTE PTR [rsi+0x15d],bh
	...
 10155b5:	add    BYTE PTR [rax],al
 10155b7:	add    BYTE PTR [rsi+rbx*2+0x1],dl
 10155bb:	add    BYTE PTR [rax],al
 10155bd:	add    BYTE PTR [rax],al
 10155bf:	add    BYTE PTR [rsi+rbx*2+0x1],al
 10155c3:	add    BYTE PTR [rax],al
 10155c5:	add    BYTE PTR [rax],al
 10155c7:	add    BYTE PTR [rsi],dh
 10155c9:	pop    rsi
 10155ca:	add    DWORD PTR [rax],eax
 10155cc:	add    BYTE PTR [rax],al
 10155ce:	add    BYTE PTR [rax],al
 10155d0:	and    al,0x5e
 10155d2:	add    DWORD PTR [rax],eax
	...
 10155e0:	rcr    BYTE PTR [rsi+0x1],cl
 10155e3:	add    BYTE PTR [rax],al
 10155e5:	add    BYTE PTR [rax],al
 10155e7:	add    BYTE PTR [rdx+0x15e],ah
 10155ed:	add    BYTE PTR [rax],al
 10155ef:	add    BYTE PTR [rsi+rbx*2+0x1],bh
	...
 10155fe:	add    BYTE PTR [rax],al
 1015600:	sldt   WORD PTR [rax]
 1015603:	add    BYTE PTR [rax],al
 1015605:	add    BYTE PTR [rax],al
 1015607:	add    BYTE PTR [rax],0x0
 101560a:	add    BYTE PTR [rax],al
 101560c:	add    BYTE PTR [rax],al
 101560e:	add    BYTE PTR [rax],al
 1015610:	mov    ds,WORD PTR [rbp+0x1]
 1015613:	add    BYTE PTR [rax],al
 1015615:	add    BYTE PTR [rax],al
 1015617:	add    BYTE PTR [rsi+0x15d],bl
	...
 1015625:	add    BYTE PTR [rax],al
 1015627:	add    bh,dh
 1015629:	add    DWORD PTR [rdi+0x70],ecx
 101562c:	outs   dx,BYTE PTR gs:[rsi]
 101562e:	push   rax
 101562f:	jb     0x10156a0
 1015631:	movsxd esp,DWORD PTR [rbp+0x73]
 1015634:	jae    0x101568a
 1015636:	outs   dx,DWORD PTR ds:[rsi]
 1015637:	imul   esp,DWORD PTR [rbp+0x6e],0x0
 101563b:	add    BYTE PTR [rdi],bl
 101563d:	add    BYTE PTR [rcx+0x64],al
 1015640:	push   0x75
 1015642:	jae    0x10156b8
 1015644:	push   rsp
 1015645:	outs   dx,DWORD PTR ds:[rsi]
 1015646:	imul   esp,DWORD PTR [rbp+0x6e],0x50
 101564a:	jb     0x10156b5
 101564c:	jbe    0x10156b7
 101564e:	ins    BYTE PTR es:[rdi],dx
 101564f:	gs addr32 gs jae 0x1015654
 1015654:	xchg   edi,eax
 1015655:	add    DWORD PTR [rdi+rbp*2+0x6f],ecx
 1015659:	imul   esi,DWORD PTR [rbp+0x70],0x50
 101565d:	jb     0x10156c8
 101565f:	jbe    0x10156ca
 1015661:	ins    BYTE PTR es:[rdi],dx
 1015662:	gs addr32 gs push rsi
 1015666:	(bad)  
 1015667:	ins    BYTE PTR es:[rdi],dx
 1015668:	jne    0x10156cf
 101566a:	push   rdi
 101566b:	add    BYTE PTR [rax],dh
 101566d:	add    dl,BYTE PTR [rdx+0x65]
 1015670:	rex.XB ins BYTE PTR es:[edi],dx
 1015673:	outs   dx,DWORD PTR ds:[rsi]
 1015674:	jae    0x10156db
 1015676:	rex.WXB
 1015677:	gs jns 0x101567a
 101567a:	(bad)  
 101567b:	add    dl,BYTE PTR [rdx+0x65]
 101567e:	addr32 rex.WRXB jo 0x10156e7
 1015682:	outs   dx,BYTE PTR ds:[rsi]
 1015683:	rex.WXB
 1015684:	gs jns 0x10156cc
 1015687:	js     0x10156e0
 1015689:	add    BYTE PTR [rsi+0x2],ch
 101568c:	push   rdx
 101568d:	gs addr32 push rcx
 1015690:	jne    0x10156f7
 1015692:	jb     0x101570d
 1015694:	push   rsi
 1015695:	(bad)  
 1015696:	ins    BYTE PTR es:[rdi],dx
 1015697:	jne    0x10156fe
 1015699:	rex.RB js 0x10156f3
 101569c:	add    BYTE PTR [rax],al
 101569e:	push   rdi
 101569f:	add    BYTE PTR [rbx+0x6c],al
 10156a2:	outs   dx,DWORD PTR ds:[rsi]
 10156a3:	jae    0x101570a
 10156a5:	push   rbx
 10156a6:	gs jb  0x101571f
 10156a9:	imul   esp,DWORD PTR [rbx+0x65],0x646e6148
 10156b0:	ins    BYTE PTR es:[rdi],dx
 10156b1:	add    BYTE PTR gs:[rax],al
 10156b4:	stc    
 10156b5:	add    DWORD PTR [rdi+0x70],ecx
 10156b8:	outs   dx,BYTE PTR gs:[rsi]
 10156ba:	push   rbx
 10156bb:	rex.XB
 10156bc:	rex.WRB (bad) 
 10156be:	outs   dx,BYTE PTR ds:[rsi]
 10156bf:	(bad)  
 10156c0:	addr32 gs jb 0x101571b
 10156c4:	add    BYTE PTR [rax],al
 10156c6:	sti    
 10156c7:	add    DWORD PTR [rdi+0x70],ecx
 10156ca:	outs   dx,BYTE PTR gs:[rsi]
 10156cc:	push   rbx
 10156cd:	gs jb  0x1015746
 10156d0:	imul   esp,DWORD PTR [rbx+0x65],0x29000057
 10156d7:	add    dl,BYTE PTR [rcx+0x75]
 10156da:	gs jb  0x1015756
 10156dd:	push   rbx
 10156de:	gs jb  0x1015757
 10156e1:	imul   esp,DWORD PTR [rbx+0x65],0x74617453
 10156e8:	jne    0x101575d
 10156ea:	rex.RB js 0x10156ed
 10156ed:	add    BYTE PTR [rdi+0x67655202],al
 10156f3:	imul   esi,DWORD PTR [rbx+0x74],0x65537265
 10156fa:	jb     0x1015772
 10156fc:	imul   esp,DWORD PTR [rbx+0x65],0x6c727443
 1015703:	rex.W (bad) 
 1015705:	outs   dx,BYTE PTR ds:[rsi]
 1015706:	fs ins BYTE PTR es:[rdi],dx
 1015708:	gs jb  0x1015750
 101570b:	js     0x1015764
 101570d:	add    al,al
 101570f:	add    dl,BYTE PTR [rbx+0x65]
 1015712:	je     0x1015767
 1015714:	gs jb  0x101578d
 1015717:	imul   esp,DWORD PTR [rbx+0x65],0x74617453
 101571e:	jne    0x1015793
 1015720:	add    BYTE PTR [rax],al
 1015722:	enter  0x5302,0x74
 1015726:	(bad)  
 1015727:	jb     0x101579d
 1015729:	push   rbx
 101572a:	gs jb  0x10157a3
 101572d:	imul   esp,DWORD PTR [rbx+0x65],0x6c727443
 1015734:	imul   r14d,DWORD PTR [rbx+0x70],0x68637461
 101573c:	gs jb  0x1015796
 101573f:	add    cl,cl
 1015741:	add    dl,BYTE PTR [rbx+0x74]
 1015744:	(bad)  
 1015745:	jb     0x10157bb
 1015747:	push   rbx
 1015748:	gs jb  0x10157c1
 101574b:	imul   esp,DWORD PTR [rbx+0x65],0x44410057
 1015752:	push   rsi
 1015753:	push   r8
 1015755:	xor    rsi,QWORD PTR [r10]
 1015758:	cs fs ins BYTE PTR es:[rdi],dx
 101575b:	ins    BYTE PTR es:[rdi],dx
 101575c:	add    BYTE PTR [rax],al
 101575e:	push   0x65724601
 1015763:	imul   r12,QWORD PTR gs:[rdx+0x72],0x797261
 101576c:	rex.WR add r8b,BYTE PTR [rdi+0x65]
 1015770:	je     0x10157c2
 1015772:	jb     0x10157e3
 1015774:	movsxd eax,DWORD PTR [rcx+0x64]
 1015777:	fs jb  0x10157df
 101577a:	jae    0x10157ef
 101577c:	add    BYTE PTR [rax],al
 101577e:	clc    
 101577f:	add    al,0x56
 1015781:	imul   esi,DWORD PTR [rdx+0x74],0x416c6175
 1015788:	ins    BYTE PTR es:[rdi],dx
 1015789:	ins    BYTE PTR es:[rdi],dx
 101578a:	outs   dx,DWORD PTR ds:[rsi]
 101578b:	movsxd eax,DWORD PTR [rax]
 101578d:	add    bl,bh
 101578f:	add    al,0x56
 1015791:	imul   esi,DWORD PTR [rdx+0x74],0x466c6175
 1015798:	jb     0x10157ff
 101579a:	add    BYTE PTR gs:[rax],al
 101579d:	add    eax,0x74726956
 10157a2:	jne    0x1015805
 10157a4:	ins    BYTE PTR es:[rdi],dx
 10157a5:	push   rcx
 10157a6:	jne    0x101580d
 10157a8:	jb     0x1015823
 10157aa:	add    BYTE PTR [rax],al
 10157ac:	stc    
 10157ad:	add    al,0x56
 10157af:	imul   esi,DWORD PTR [rdx+0x74],0x416c6175
 10157b6:	ins    BYTE PTR es:[rdi],dx
 10157b7:	ins    BYTE PTR es:[rdi],dx
 10157b8:	outs   dx,DWORD PTR ds:[rsi]
 10157b9:	movsxd eax,DWORD PTR [rbp+0x78]
 10157bc:	add    BYTE PTR [rax],al
 10157be:	cld    
 10157bf:	add    al,0x56
 10157c1:	imul   esi,DWORD PTR [rdx+0x74],0x466c6175
 10157c8:	jb     0x101582f
 10157ca:	gs rex.RB js 0x10157ce
 10157ce:	(bad)  
 10157cf:	add    ecx,DWORD PTR [rdi+0x70]
 10157d2:	outs   dx,BYTE PTR gs:[rsi]
 10157d4:	push   rax
 10157d5:	jb     0x1015846
 10157d7:	movsxd esp,DWORD PTR [rbp+0x73]
 10157da:	jae    0x10157dc
 10157dc:	mov    BYTE PTR [rcx],0x47
 10157df:	gs je  0x1015825
 10157e2:	jne    0x1015856
 10157e4:	jb     0x101584b
 10157e6:	outs   dx,BYTE PTR ds:[rsi]
 10157e7:	je     0x1015839
 10157e9:	jb     0x101585a
 10157eb:	movsxd esp,DWORD PTR [rbp+0x73]
 10157ee:	jae    0x10157f0
 10157f0:	mov    DWORD PTR [rcx],0x43746547
 10157f6:	jne    0x101586a
 10157f8:	jb     0x101585f
 10157fa:	outs   dx,BYTE PTR ds:[rsi]
 10157fb:	je     0x101584d
 10157fd:	jb     0x101586e
 10157ff:	movsxd esp,DWORD PTR [rbp+0x73]
 1015802:	jae    0x101584d
 1015804:	add    BYTE PTR fs:[rdi],bl
 1015807:	add    DWORD PTR [rbp+0x78],eax
 101580a:	imul   esi,DWORD PTR [rax+rdx*2+0x72],0x7365636f
 1015812:	jae    0x1015814
 1015814:	mov    ah,0x0
 1015816:	rex.XB jb 0x101587e
 1015819:	(bad)  
 101581a:	je     0x1015881
 101581c:	push   rsp
 101581d:	push   0x64616572
 1015822:	add    BYTE PTR [rax],al
 1015824:	test   eax,0x65724300
 1015829:	(bad)  
 101582a:	je     0x1015891
 101582c:	push   rdx
 101582d:	gs ins DWORD PTR es:[rdi],dx
 101582f:	outs   dx,DWORD PTR ds:[rsi]
 1015830:	je     0x1015897
 1015832:	push   rsp
 1015833:	push   0x64616572
 1015838:	add    BYTE PTR [rax],al
 101583a:	retf   
 101583b:	add    DWORD PTR [rdi+0x65],eax
 101583e:	je     0x1015883
 1015840:	jne    0x10158b4
 1015842:	jb     0x10158a9
 1015844:	outs   dx,BYTE PTR ds:[rsi]
 1015845:	je     0x101589b
 1015847:	push   0x64616572
 101584c:	rex.WB
 101584d:	add    BYTE PTR fs:[rax],al
 1015850:	xchg   DWORD PTR [rbx],eax
 1015852:	rex.WRXB jo 0x10158ba
 1015855:	outs   dx,BYTE PTR ds:[rsi]
 1015856:	push   rsp
 1015857:	push   0x64616572
 101585c:	add    BYTE PTR [rax],al
 101585e:	out    0x1,eax
 1015860:	rex.RXB
 1015861:	gs je  0x10158a9
 1015864:	js     0x10158cf
 1015866:	je     0x10158ab
 1015868:	outs   dx,DWORD PTR ds:[rsi]
 1015869:	fs gs push rsp
 101586c:	push   0x64616572
 1015871:	add    BYTE PTR [rax],cl
 1015873:	add    al,BYTE PTR [rdi+0x65]
 1015876:	je     0x10158c4
 1015878:	(bad)  
 1015879:	jae    0x10158ef
 101587b:	rex.RB jb 0x10158f0
 101587e:	outs   dx,DWORD PTR ds:[rsi]
 101587f:	jb     0x1015881
 1015881:	add    dh,al
 1015883:	add    edx,DWORD PTR [rdx+0x65]
 1015886:	(bad)  
 1015887:	fs push rax
 1015889:	jb     0x10158fa
 101588b:	movsxd esp,DWORD PTR [rbp+0x73]
 101588e:	jae    0x10158dd
 1015890:	gs ins DWORD PTR es:[rdi],dx
 1015892:	outs   dx,DWORD PTR ds:[rsi]
 1015893:	jb     0x101590e
 1015895:	add    BYTE PTR [rip+0x69725705],bh        # 0x6a73afa0
 101589b:	je     0x1015902
 101589d:	push   rax
 101589e:	jb     0x101590f
 10158a0:	movsxd esp,DWORD PTR [rbp+0x73]
 10158a3:	jae    0x10158f2
 10158a5:	gs ins DWORD PTR es:[rdi],dx
 10158a7:	outs   dx,DWORD PTR ds:[rsi]
 10158a8:	jb     0x1015923
 10158aa:	add    BYTE PTR [rax],al
 10158ac:	enter  0x5304,0x75
 10158b0:	jae    0x1015922
 10158b2:	outs   dx,BYTE PTR gs:[rsi]
 10158b4:	fs push rsp
 10158b6:	push   0x64616572
 10158bb:	add    BYTE PTR [rsi],dl
 10158bd:	add    al,0x52
 10158bf:	gs jae 0x1015937
 10158c2:	ins    DWORD PTR es:[rdi],dx
 10158c3:	gs push rsp
 10158c5:	push   0x64616572
 10158ca:	add    BYTE PTR [rax],al
 10158cc:	enter  0x4400,0x65
 10158d0:	(bad)  
 10158d1:	jne    0x101593a
 10158d3:	rex.X jb 0x101593b
 10158d6:	(bad)  
 10158d7:	imul   eax,DWORD PTR [rax],0x0
 10158da:	repnz add BYTE PTR [rbp+0x6e],al
 10158de:	je     0x1015945
 10158e0:	jb     0x1015925
 10158e2:	jb     0x101594d
 10158e4:	je     0x101594f
 10158e6:	movsxd esp,DWORD PTR [rcx+0x6c]
 10158e9:	push   rbx
 10158ea:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 10158ef:	outs   dx,BYTE PTR ds:[rsi]
 10158f0:	add    BYTE PTR [rax],al
 10158f2:	cmp    eax,DWORD PTR [rbx]
 10158f4:	rex.WR
 10158f5:	gs (bad) 
 10158f7:	jbe    0x101595e
 10158f9:	rex.XB jb 0x1015965
 10158fc:	je     0x1015967
 10158fe:	movsxd esp,DWORD PTR [rcx+0x6c]
 1015901:	push   rbx
 1015902:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 1015907:	outs   dx,BYTE PTR ds:[rsi]
 1015908:	add    BYTE PTR [rax],al
 101590a:	jmp    0x101590e
 101590c:	rex.WB outs dx,BYTE PTR ds:[rsi]
 101590e:	imul   esi,DWORD PTR [rcx+rbp*2+0x61],0x657a696c
 1015916:	rex.XB jb 0x1015982
 1015919:	je     0x1015984
 101591b:	movsxd esp,DWORD PTR [rcx+0x6c]
 101591e:	push   rbx
 101591f:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 1015924:	outs   dx,BYTE PTR ds:[rsi]
 1015925:	rex.B outs dx,BYTE PTR ds:[rsi]
 1015927:	fs push rbx
 1015929:	jo     0x1015994
 101592b:	outs   dx,BYTE PTR ds:[rsi]
 101592c:	rex.XB outs dx,DWORD PTR ds:[rsi]
 101592e:	jne    0x101599e
 1015930:	je     0x1015932
 1015932:	addr32 add al,0x53
 1015935:	gs je  0x101597d
 1015938:	jbe    0x101599f
 101593a:	outs   dx,BYTE PTR ds:[rsi]
 101593b:	je     0x101593d
 101593d:	add    BYTE PTR [rax],cl
 101593f:	add    eax,0x74696157
 1015944:	rex.RX outs dx,DWORD PTR ds:[rsi]
 1015946:	jb     0x101599b
 1015948:	imul   ebp,DWORD PTR [rsi+0x67],0x624f656c
 101594f:	push   0x65
 1015951:	movsxd esi,DWORD PTR [rax+rax*1-0x40]
 1015955:	add    al,0x53
 1015957:	ins    BYTE PTR es:[rdi],dx
 1015958:	gs gs jo 0x101595c
 101595c:	test   DWORD PTR [rcx],0x46746547
 1015962:	imul   ebp,DWORD PTR [rbp+riz*2+0x53],0x657a69
 101596a:	xor    al,0x5
 101596c:	push   rdi
 101596d:	jb     0x10159d8
 101596f:	je     0x10159d6
 1015971:	imul   r13d,DWORD PTR [rbp+r12*2+0x0],0x655203c3
 101597a:	(bad)  
 101597b:	imul   r13d,DWORD PTR fs:[rbp+r12*2+0x0],0x46015d00
 1015985:	ins    BYTE PTR es:[rdi],dx
 1015986:	jne    0x10159fb
 1015988:	push   0x656c6946
 101598d:	rex.X jne 0x10159f6
 1015990:	data16 gs jb 0x1015a07
 1015994:	add    BYTE PTR [rax],al
 1015996:	je     0x101599c
 1015998:	push   rbx
 1015999:	gs je  0x10159e2
 101599c:	imul   ebp,DWORD PTR [rbp+riz*2+0x50],0x746e696f
 10159a4:	gs jb  0x10159a7
 10159a7:	add    BYTE PTR [rcx+rax*1],dh
 10159aa:	rex.RX imul r13d,DWORD PTR [rsi+0x64],0x736f6c43
 10159b2:	add    BYTE PTR gs:[rdx+0x0],dl
 10159b6:	rex.XB ins BYTE PTR es:[rdi],dx
 10159b8:	outs   dx,DWORD PTR ds:[rsi]
 10159b9:	jae    0x1015a20
 10159bb:	rex.W (bad) 
 10159bd:	outs   dx,BYTE PTR ds:[rsi]
 10159be:	fs ins BYTE PTR es:[rdi],dx
 10159c0:	add    BYTE PTR gs:[rdx+0x2],bh
 10159c4:	rex.RXB
 10159c5:	gs je  0x1015a1b
 10159c8:	jns    0x1015a3d
 10159ca:	je     0x1015a31
 10159cc:	ins    DWORD PTR es:[rdi],dx
 10159cd:	rex.WB outs dx,BYTE PTR ds:[rsi]
 10159cf:	outs   dx,WORD PTR ds:[rsi]
 10159d1:	add    BYTE PTR [rcx+rax*1+0x46],ah
 10159d5:	outs   dx,DWORD PTR ds:[rsi]
 10159d6:	jb     0x1015a45
 10159d8:	(bad)  
 10159d9:	je     0x1015a28
 10159db:	gs jae 0x1015a51
 10159de:	(bad)  
 10159df:	addr32 gs push rdi
 10159e2:	add    BYTE PTR [rax],al
 10159e4:	ret    
 10159e5:	add    al,0x53
 10159e7:	ins    BYTE PTR es:[rdi],dx
 10159e8:	gs gs jo 0x1015a31
 10159ec:	js     0x10159ee
 10159ee:	test   DWORD PTR [rax],eax
 10159f0:	rex.XB jb 0x1015a58
 10159f3:	(bad)  
 10159f4:	je     0x1015a5b
 10159f6:	rex.RB jbe 0x1015a5e
 10159f9:	outs   dx,BYTE PTR ds:[rsi]
 10159fa:	je     0x1015a53
 10159fc:	add    BYTE PTR [rax],al
 10159fe:	rex add ecx,DWORD PTR [rdi+rbp*2+0x61]
 1015a03:	imul   r12,QWORD PTR fs:[rdx+0x72],0x45797261
 1015a0c:	js     0x1015a65
 1015a0e:	add    BYTE PTR [rax],al
 1015a10:	sbb    al,BYTE PTR [rdx]
 1015a12:	rex.RXB
 1015a13:	gs je  0x1015a63
 1015a16:	outs   dx,DWORD PTR ds:[rsi]
 1015a17:	fs jne 0x1015a86
 1015a1a:	imul   r13d,DWORD PTR gs:[rbp+r12*2+0x4e],0x57656d61
 1015a24:	add    BYTE PTR [rax],al
 1015a26:	(bad)  
 1015a27:	add    al,BYTE PTR [rdi+0x65]
 1015a2a:	je     0x1015a79
 1015a2c:	outs   dx,DWORD PTR ds:[rsi]
 1015a2d:	fs jne 0x1015a9c
 1015a30:	gs rex.W (bad) 
 1015a33:	outs   dx,BYTE PTR ds:[rsi]
 1015a34:	fs ins BYTE PTR es:[rdi],dx
 1015a36:	gs push rdi
 1015a38:	add    BYTE PTR [rax],al
 1015a3a:	add    DWORD PTR [rax],0x61657243
 1015a40:	je     0x1015aa7
 1015a42:	imul   r14d,DWORD PTR [rdx+0x65],0x726f7463
 1015a4a:	jns    0x1015aa3
 1015a4c:	add    BYTE PTR [rax],al
 1015a4e:	pop    QWORD PTR [rax]
 1015a50:	rex.XB jb 0x1015ab8
 1015a53:	(bad)  
 1015a54:	je     0x1015abb
 1015a56:	imul   r13d,DWORD PTR [rbp+r12*2+0x57],0x4701f100
 1015a5f:	gs je  0x1015aa8
 1015a62:	imul   ebp,DWORD PTR [rbp+riz*2+0x41],0x69727474
 1015a6a:	(bad)  
 1015a6b:	jne    0x1015ae1
 1015a6d:	gs jae 0x1015ac7
 1015a70:	add    BYTE PTR [rax],al
 1015a72:	xlat   BYTE PTR ds:[rbx]
 1015a73:	add    BYTE PTR [rbp+riz*2+0x6c],al
 1015a77:	gs je  0x1015adf
 1015a7a:	imul   r13d,DWORD PTR [rbp+r12*2+0x57],0x46013f00
 1015a83:	imul   ebp,DWORD PTR [rsi+0x64],0x73726946
 1015a8a:	je     0x1015ad2
 1015a8c:	imul   ebp,DWORD PTR [rbp+riz*2+0x57],0x14b0000
 1015a94:	rex.RX imul r13d,DWORD PTR [rsi+0x64],0x7478654e
 1015a9c:	imul   r13d,DWORD PTR [rbp+r12*2+0x57],0x47019500
 1015aa5:	gs je  0x1015aeb
 1015aa8:	outs   dx,DWORD PTR ds:[rsi]
 1015aa9:	ins    DWORD PTR es:[rdi],dx
 1015aaa:	jo     0x1015b21
 1015aac:	je     0x1015b13
 1015aae:	jb     0x1015afe
 1015ab0:	(bad)  
 1015ab1:	ins    DWORD PTR es:[rdi],dx
 1015ab2:	gs push rdi
 1015ab4:	add    BYTE PTR [rax],al
 1015ab6:	lods   al,BYTE PTR ds:[rsi]
 1015ab7:	add    al,BYTE PTR [rdi+0x65]
 1015aba:	je     0x1015b12
 1015abc:	gs jb  0x1015b32
 1015abf:	imul   ebp,DWORD PTR [rdi+0x6e],0x577845
 1015ac6:	cmp    eax,DWORD PTR [rbx+rdx*2]
 1015ac9:	gs je  0x1015b0f
 1015acc:	outs   dx,DWORD PTR ds:[rsi]
 1015acd:	outs   dx,BYTE PTR ds:[rsi]
 1015ace:	jae    0x1015b3f
 1015ad0:	ins    BYTE PTR es:[rdi],dx
 1015ad1:	gs rex.XB je 0x1015b47
 1015ad5:	ins    BYTE PTR es:[rdi],dx
 1015ad6:	rex.W (bad) 
 1015ad8:	outs   dx,BYTE PTR ds:[rsi]
 1015ad9:	fs ins BYTE PTR es:[rdi],dx
 1015adb:	gs jb  0x1015ade
 1015ade:	mov    ebp,0x65724300
 1015ae3:	(bad)  
 1015ae4:	je     0x1015b4b
 1015ae6:	push   rsp
 1015ae7:	outs   dx,DWORD PTR ds:[rsi]
 1015ae8:	outs   dx,DWORD PTR ds:[rsi]
 1015ae9:	ins    BYTE PTR es:[rdi],dx
 1015aea:	push   0x33706c65
 1015aef:	xor    dl,BYTE PTR [rbx+0x6e]
 1015af2:	(bad)  
 1015af3:	jo     0x1015b68
 1015af5:	push   0x746f
 1015afa:	rol    DWORD PTR [rsp+rdx*2],1
 1015afd:	push   0x64616572
 1015b02:	xor    esi,DWORD PTR [rdx]
 1015b04:	rex.RX imul r14d,DWORD PTR [rdx+0x73],0x4d20074
 1015b0c:	push   rsp
 1015b0d:	push   0x64616572
 1015b12:	xor    esi,DWORD PTR [rdx]
 1015b14:	rex.WRX
 1015b15:	gs js  0x1015b8c
 1015b18:	add    BYTE PTR [rax],al
 1015b1a:	rex.WXB
 1015b1b:	rex.RB push r10
 1015b1d:	rex.WRX
 1015b1e:	rex.RB
 1015b1f:	xor    r14,QWORD PTR [rdx]
 1015b22:	cs fs ins BYTE PTR es:[rdi],dx
 1015b25:	ins    BYTE PTR es:[rdi],dx
 1015b26:	add    BYTE PTR [rax],al
 1015b28:	movsxd eax,DWORD PTR [rax]
 1015b2a:	(bad)  
 1015b2b:	(bad)  
 1015b2c:	xor    al,BYTE PTR [rax+0x59]
 1015b2f:	push   r8
 1015b31:	rex.RB
 1015b32:	pop    r8
 1015b34:	pop    rdi
 1015b35:	rex.WXB
 1015b36:	rex pop rdx
 1015b38:	add    BYTE PTR [rax],al
 1015b3a:	add    BYTE PTR gs:[rdi],bh
 1015b3d:	(bad)  
 1015b3e:	xor    eax,DWORD PTR [rax+0x59]
 1015b41:	pop    r8
 1015b43:	push   rax
 1015b44:	rex.RB
 1015b45:	pop    r8
 1015b47:	rex pop rdx
 1015b49:	add    BYTE PTR [rdi],cl
 1015b4b:	add    al,0x5f
 1015b4d:	jae    0x1015bc3
 1015b4f:	jb     0x1015bba
 1015b51:	movsxd ebp,DWORD PTR [rbp+0x70]
 1015b54:	add    BYTE PTR [rax],al
 1015b56:	adc    al,BYTE PTR [rsi]
 1015b58:	ja     0x1015bbd
 1015b5a:	jae    0x1015bbf
 1015b5c:	push   0x1f000072
 1015b61:	(bad)  
 1015b62:	ja     0x1015bc7
 1015b64:	jae    0x1015bd4
 1015b66:	ins    BYTE PTR es:[rdi],dx
 1015b67:	outs   dx,BYTE PTR gs:[rsi]
 1015b69:	add    BYTE PTR [rsi+rax*1],bl
 1015b6c:	ja     0x1015bd1
 1015b6e:	jae    0x1015bde
 1015b70:	movsxd ebp,DWORD PTR [rbp+0x70]
 1015b73:	add    BYTE PTR [rcx],ah
 1015b75:	(bad)  
 1015b76:	ja     0x1015bdb
 1015b78:	jae    0x1015bec
 1015b7a:	movsxd ebp,DWORD PTR [rax+0x72]
 1015b7d:	add    BYTE PTR [rsi+0x63775f04],ah
 1015b83:	jae    0x1015bee
 1015b85:	movsxd ebp,DWORD PTR [rbp+0x70]
 1015b88:	add    BYTE PTR [rax],al
 1015b8a:	js     0x1015b8e
 1015b8c:	pop    rdi
 1015b8d:	ins    DWORD PTR es:[edi],dx
 1015b8f:	je     0x1015bfa
 1015b91:	ins    DWORD PTR es:[rdi],dx
 1015b92:	gs ss xor al,0x5f
 1015b96:	jae    0x1015b98
 1015b98:	(bad)  
 1015b99:	add    al,0x5f
 1015b9b:	je     0x1015c06
 1015b9d:	ins    DWORD PTR es:[rdi],dx
 1015b9e:	gs ss xor al,0x0
 1015ba2:	adc    eax,0x73775f05
 1015ba7:	je     0x1015c1b
 1015ba9:	fs (bad) 
 1015bab:	je     0x1015c12
 1015bad:	pop    rdi
 1015bae:	jae    0x1015bb0
 1015bb0:	(bad)  
 1015bb1:	add    eax,0x7473775f
 1015bb6:	jb     0x1015c2c
 1015bb8:	imul   ebp,DWORD PTR [rbp+0x65],0x3300735f
 1015bbf:	(bad)  
 1015bc0:	ja     0x1015c32
 1015bc2:	jb     0x1015c2d
 1015bc4:	outs   dx,BYTE PTR ds:[rsi]
 1015bc5:	je     0x1015c2d
 1015bc7:	add    BYTE PTR [rbp+0x73765f04],al
 1015bcd:	outs   dx,BYTE PTR ds:[rsi]
 1015bce:	ja     0x1015c40
 1015bd0:	jb     0x1015c3b
 1015bd2:	outs   dx,BYTE PTR ds:[rsi]
 1015bd3:	je     0x1015c3b
 1015bd5:	add    bl,dh
 1015bd7:	add    eax,0x63737773
 1015bdc:	(bad)  
 1015bdd:	outs   dx,BYTE PTR ds:[rsi]
 1015bde:	pop    di
 1015be0:	jae    0x1015be2
 1015be2:	sti    
 1015be3:	add    al,0x5f
 1015be5:	ja     0x1015c59
 1015be7:	gs ins DWORD PTR es:[rdi],dx
 1015be9:	outs   dx,DWORD PTR ds:[rsi]
 1015bea:	jbe    0x1015c51
 1015bec:	add    BYTE PTR [rax],al
 1015bee:	test   DWORD PTR [rcx],0x7272655f
 1015bf4:	outs   dx,BYTE PTR ds:[rsi]
 1015bf5:	outs   dx,DWORD PTR ds:[rsi]
 1015bf6:	add    BYTE PTR [rax],al
 1015bf8:	add    rax,0x74697865
 1015bfe:	add    BYTE PTR [rax],al
 1015c00:	mov    edx,0x6f737105
 1015c05:	jb     0x1015c7b
 1015c07:	add    BYTE PTR [rsi+rax*1],ch
 1015c0a:	ja     0x1015c6f
 1015c0c:	jae    0x1015c82
 1015c0e:	outs   dx,DWORD PTR ds:[rsi]
 1015c0f:	jne    0x1015c7d
 1015c11:	add    dl,ch
 1015c13:	add    al,0x5f
 1015c15:	ja     0x1015c7e
 1015c17:	gs je  0x1015c7f
 1015c1a:	outs   dx,BYTE PTR ds:[rsi]
 1015c1b:	jbe    0x1015c1d
 1015c1d:	add    BYTE PTR [rsi],bl
 1015c1f:	add    eax,0x6f74775f
 1015c24:	imul   eax,DWORD PTR [rax],0x775f04ed
 1015c2a:	ins    DWORD PTR es:[rdi],dx
 1015c2b:	(bad)  
 1015c2c:	imul   esp,DWORD PTR [rbp+0x70],0x61
 1015c30:	je     0x1015c9a
 1015c32:	pop    rdi
 1015c33:	jae    0x1015c35
 1015c35:	add    BYTE PTR [rdi],cl
 1015c37:	add    eax,0x7073775f
 1015c3c:	ins    BYTE PTR es:[rdi],dx
 1015c3d:	imul   esi,DWORD PTR [rax+rsi*2+0x61],0x735f6874
 1015c45:	add    BYTE PTR [rsi],bl
 1015c47:	add    DWORD PTR [rdi+0x5f],ebx
 1015c4a:	rex.XB pop r15
 1015c4c:	jae    0x1015cbe
 1015c4e:	movsxd ebp,DWORD PTR gs:[rcx+0x66]
 1015c52:	imul   esp,DWORD PTR [rbx+0x5f],0x646e6168
 1015c59:	ins    BYTE PTR es:[rdi],dx
 1015c5a:	gs jb  0x1015c5d
 1015c5d:	add    BYTE PTR [rcx+0x6d656d05],ch
 1015c63:	movsxd esi,DWORD PTR [rax+0x79]
 1015c66:	add    BYTE PTR [rax],al
 1015c68:	lods   eax,DWORD PTR ds:[rsi]
 1015c69:	add    eax,0x736d656d
 1015c6e:	gs je  0x1015c71
 1015c71:	add    BYTE PTR [rsi+0x6d615f01],bl
 1015c77:	jae    0x1015ce0
 1015c79:	pop    rdi
 1015c7a:	gs js  0x1015ce6
 1015c7d:	je     0x1015c7f
 1015c7f:	add    BYTE PTR [rax+0x775f5f01],dl
 1015c85:	addr32 gs je 0x1015cf6
 1015c89:	(bad)  
 1015c8a:	imul   ebp,DWORD PTR [rsi+0x61],0x736772
 1015c91:	add    BYTE PTR [rdx],bl
 1015c93:	add    DWORD PTR [rdi+0x58],ebx
 1015c96:	movsxd esi,DWORD PTR [rax+0x74]
 1015c99:	imul   r13d,DWORD PTR [rsp+r14*2+0x65],0x2000072
 1015ca2:	pop    rdi
 1015ca3:	gs js  0x1015d0f
 1015ca6:	je     0x1015ca8
 1015ca8:	mov    ch,0x1
 1015caa:	pop    rdi
 1015cab:	movsxd esp,DWORD PTR [rbp+0x78]
 1015cae:	imul   esi,DWORD PTR [rax+rax*1+0x0],0x5f5f0191
 1015cb6:	ja     0x1015d21
 1015cb8:	outs   dx,BYTE PTR ds:[rsi]
 1015cb9:	imul   esi,DWORD PTR [rbp+riz*2+0x6e],0x86000076
 1015cc1:	add    bl,BYTE PTR [rdi+0x69]
 1015cc4:	outs   dx,BYTE PTR ds:[rsi]
 1015cc5:	imul   esi,DWORD PTR [rsp+rsi*2+0x65],0x87006d72
 1015ccd:	add    bl,BYTE PTR [rdi+0x69]
 1015cd0:	outs   dx,BYTE PTR ds:[rsi]
 1015cd1:	imul   esi,DWORD PTR [rsp+rsi*2+0x65],0x655f6d72
 1015cd9:	add    ch,al
 1015cdb:	add    DWORD PTR [rdi+0x63],ebx
 1015cde:	outs   dx,DWORD PTR ds:[rsi]
 1015cdf:	outs   dx,BYTE PTR ds:[rsi]
 1015ce0:	imul   sp,WORD PTR [rdi+0x74],0x7268
 1015ce6:	gs (bad) 
 1015ce8:	fs ins BYTE PTR es:[rdi],dx
 1015cea:	outs   dx,DWORD PTR ds:[rsi]
 1015ceb:	movsxd esp,DWORD PTR [rcx+0x6c]
 1015cee:	add    BYTE PTR gs:[rcx+rax*1+0x5f],bh
 1015cf3:	pop    rdi
 1015cf4:	jae    0x1015d5b
 1015cf6:	je     0x1015d6d
 1015cf8:	jae    0x1015d5f
 1015cfa:	jb     0x1015d69
 1015cfc:	(bad)  
 1015cfd:	je     0x1015d67
 1015cff:	gs jb  0x1015d74
 1015d02:	add    BYTE PTR [rax],al
 1015d04:	(bad)
 1015d08:	outs   dx,DWORD PTR ds:[rsi]
 1015d09:	ins    DWORD PTR es:[rdi],dx
 1015d0a:	ins    DWORD PTR es:[rdi],dx
 1015d0b:	outs   dx,DWORD PTR ds:[rsi]
 1015d0c:	fs add BYTE PTR gs:[rax],al
 1015d10:	sbb    al,0x2
 1015d12:	pop    rdi
 1015d13:	ins    WORD PTR es:[rdi],dx
 1015d15:	outs   dx,DWORD PTR ds:[rsi]
 1015d16:	fs add BYTE PTR gs:[rax],al
 1015d1a:	jns    0x1015d1d
 1015d1c:	pop    rdi
 1015d1d:	pop    rdi
 1015d1e:	jae    0x1015d85
 1015d20:	je     0x1015d81
 1015d22:	(bad)  
 1015d23:	jo     0x1015d95
 1015d25:	pop    rdi
 1015d26:	je     0x1015da1
 1015d28:	jo     0x1015d8f
 1015d2a:	add    BYTE PTR [rax],al
 1015d2c:	rex.WRB push r11
 1015d2e:	push   rsi
 1015d2f:	rex.XB push r10
 1015d31:	xor    DWORD PTR [rax],esi
 1015d33:	xor    BYTE PTR [rsi],ch
 1015d35:	fs ins BYTE PTR es:[rdi],dx
 1015d37:	ins    BYTE PTR es:[rdi],dx
 1015d38:	add    BYTE PTR [rax],al
 1015d3a:	pop    rbx
 1015d3b:	add    al,0x5f
 1015d3d:	jne    0x1015dad
 1015d3f:	ins    BYTE PTR es:[rdi],dx
 1015d40:	outs   dx,DWORD PTR ds:[rsi]
 1015d41:	movsxd ebp,DWORD PTR [rbx+0x0]
 1015d44:	add    QWORD PTR [rdi+0x5f],rbx
 1015d48:	fs ins BYTE PTR es:[rdi],dx
 1015d4a:	ins    BYTE PTR es:[rdi],dx
 1015d4b:	outs   dx,DWORD PTR ds:[rsi]
 1015d4c:	outs   dx,BYTE PTR ds:[rsi]
 1015d4d:	gs js  0x1015db9
 1015d50:	je     0x1015d52
 1015d52:	test   BYTE PTR [rdx],0x5f
 1015d55:	ins    BYTE PTR es:[rdi],dx
 1015d56:	outs   dx,DWORD PTR ds:[rsi]
 1015d57:	movsxd ebp,DWORD PTR [rbx+0x0]
 1015d5a:	popf   
 1015d5b:	add    ebx,DWORD PTR [rdi+0x6f]
 1015d5e:	outs   dx,BYTE PTR ds:[rsi]
 1015d5f:	gs js  0x1015dcb
 1015d62:	je     0x1015d64
 1015d64:	add    BYTE PTR [rcx],al
 1015d66:	(bad)  
 1015d67:	je     0x1015dce
 1015d69:	jb     0x1015dd8
 1015d6b:	imul   ebp,DWORD PTR [rsi+0x61],0x40406574
 1015d72:	pop    rcx
 1015d73:	pop    r8
 1015d75:	pop    rax
 1015d76:	pop    rdx
 1015d77:	add    BYTE PTR [rsi+0x1],al
 1015d7a:	pop    rdi
 1015d7b:	pop    rdi
 1015d7c:	movsxd esi,DWORD PTR [rdx+0x74]
 1015d7f:	pop    rdi
 1015d80:	fs gs (bad) 
 1015d83:	jne    0x1015dec
 1015d85:	addr32 gs jb 0x1015de8
 1015d89:	push   0x6b6f6f
 1015d8e:	adc    al,BYTE PTR [rax]
 1015d90:	rex.WB ins DWORD PTR es:[rdi],dx
 1015d92:	(bad)  
 1015d93:	addr32 gs rex.WRX je 0x1015de0
 1015d98:	gs (bad) 
 1015d9a:	fs gs jb 0x1015d9e
 1015d9e:	sbb    DWORD PTR [rax],eax
 1015da0:	imul   r13,QWORD PTR [r14+0x69],0x706d7544
 1015da8:	push   rdi
 1015da9:	jb     0x1015e14
 1015dab:	je     0x1015e12
 1015dad:	rex.R jne 0x1015e1d
 1015db0:	jo     0x1015db2
 1015db2:	fs (bad) 
 1015db4:	addr32 push 0x2e706c65
 1015dba:	fs ins BYTE PTR es:[rdi],dx
 1015dbc:	ins    BYTE PTR es:[rdi],dx
 1015dbd:	add    BYTE PTR [rax+rax*1],al
 1015dc0:	rex.RB outs dx,BYTE PTR ds:[rsi]
 1015dc2:	jne    0x1015e31
 1015dc4:	push   rax
 1015dc5:	jb     0x1015e36
 1015dc7:	movsxd esp,DWORD PTR [rbp+0x73]
 1015dca:	jae    0x1015e19
 1015dcc:	outs   dx,DWORD PTR ds:[rsi]
 1015dcd:	fs jne 0x1015e3c
 1015dd0:	gs jae 0x1015dd3
 1015dd3:	add    BYTE PTR [rip+0x74654700],cl        # 0x7566a4d9
 1015dd9:	rex.WRB outs dx,DWORD PTR ds:[rsi]
 1015ddb:	fs jne 0x1015e4a
 1015dde:	gs rex.X (bad) 
 1015de1:	jae    0x1015e48
 1015de3:	rex.WRX (bad) 
 1015de5:	ins    DWORD PTR es:[rdi],dx
 1015de6:	add    BYTE PTR gs:[r8],al
 1015dea:	adc    BYTE PTR [rax],al
 1015dec:	rex.RXB
 1015ded:	gs je  0x1015e3d
 1015df0:	outs   dx,DWORD PTR ds:[rsi]
 1015df1:	fs jne 0x1015e60
 1015df4:	imul   r13d,DWORD PTR gs:[rbp+r12*2+0x4e],0x45656d61
 1015dfe:	js     0x1015e57
 1015e00:	add    BYTE PTR [rax],al
 1015e02:	adc    DWORD PTR [rax],eax
 1015e04:	rex.RXB
 1015e05:	gs je  0x1015e55
 1015e08:	outs   dx,DWORD PTR ds:[rsi]
 1015e09:	fs jne 0x1015e78
 1015e0c:	rex.WB outs dx,BYTE PTR gs:[rsi]
 1015e0f:	outs   dx,WORD PTR ds:[rsi]
 1015e11:	jb     0x1015e80
 1015e13:	(bad)  
 1015e14:	je     0x1015e7f
 1015e16:	outs   dx,DWORD PTR ds:[rsi]
 1015e17:	outs   dx,BYTE PTR ds:[rsi]
 1015e18:	add    BYTE PTR [rax],al
 1015e1a:	push   rax
 1015e1b:	push   rbx
 1015e1c:	push   r8
 1015e1e:	rex.WB
 1015e1f:	cs rex.R
 1015e21:	rex.WR
 1015e22:	rex.WR add dl,r15b
 1015e25:	add    DWORD PTR [rdx+0x70],edx
 1015e28:	movsxd edx,DWORD PTR [rbx+0x74]
 1015e2b:	jb     0x1015e96
 1015e2d:	outs   dx,BYTE PTR ds:[rsi]
 1015e2e:	addr32 rex.RX jb 0x1015e97
 1015e32:	gs push rdi
 1015e34:	add    BYTE PTR [rax],al
 1015e36:	add    eax,DWORD PTR [rdx]
 1015e38:	push   rbp
 1015e39:	jne    0x1015ea4
 1015e3b:	fs rex.XB jb 0x1015ea4
 1015e3f:	(bad)  
 1015e40:	je     0x1015ea7
 1015e42:	add    BYTE PTR [rax],al
 1015e44:	or     al,0x2
 1015e46:	push   rbp
 1015e47:	jne    0x1015eb2
 1015e49:	fs push rsp
 1015e4b:	outs   dx,DWORD PTR ds:[rsi]
 1015e4c:	push   rbx
 1015e4d:	je     0x1015ec1
 1015e4f:	imul   ebp,DWORD PTR [rsi+0x67],0x2080057
 1015e56:	push   rbp
 1015e57:	jne    0x1015ec2
 1015e59:	fs rex.RX jb 0x1015ecc
 1015e5d:	ins    DWORD PTR es:[rdi],dx
 1015e5e:	push   rbx
 1015e5f:	je     0x1015ed3
 1015e61:	imul   ebp,DWORD PTR [rsi+0x67],0x50520057
 1015e68:	rex.XB push r10
 1015e6a:	push   rsp
 1015e6b:	xor    al,0x2e
 1015e6d:	fs ins BYTE PTR es:[rdi],dx
 1015e6f:	ins    BYTE PTR es:[rdi],dx
 1015e70:	add    BYTE PTR [rax],al
 1015e72:	rex.RXB add BYTE PTR [r15+0x65],r8b
 1015e76:	je     0x1015ebd
 1015e78:	js     0x1015eee
 1015e7a:	outs   dx,BYTE PTR gs:[rsi]
 1015e7c:	fs gs fs push rsp
 1015e80:	movsxd esi,DWORD PTR [rax+0x54]
 1015e83:	(bad)  
 1015e84:	(bad)  
 1015e85:	ins    BYTE PTR es:[rdi],dx
 1015e86:	add    BYTE PTR gs:[rcx+0x50],cl
 1015e8a:	rex.W
 1015e8b:	rex.WR push rax
 1015e8d:	push   r8
 1015e8f:	rex.WB
 1015e90:	cs rex.R
 1015e92:	rex.WR
 1015e93:	rex.WR add BYTE PTR [rax],r8b
 1015e96:	push   rdi
 1015e97:	push   rbx
 1015e98:	xor    bl,BYTE PTR [rdi+0x33]
 1015e9b:	xor    ch,BYTE PTR [rsi]
 1015e9d:	fs ins BYTE PTR es:[rdi],dx
 1015e9f:	ins    BYTE PTR es:[rdi],dx
 1015ea0:	add    BYTE PTR [rax],al
 1015ea2:	add    eax,0x74654700
 1015ea7:	imul   r13d,DWORD PTR [rbp+r12*2+0x56],0x69737265
 1015eb0:	outs   dx,DWORD PTR ds:[rsi]
 1015eb1:	outs   dx,BYTE PTR ds:[rsi]
 1015eb2:	rex.WB outs dx,BYTE PTR ds:[rsi]
 1015eb4:	outs   dx,WORD PTR ds:[rsi]
 1015eb6:	push   rbx
 1015eb7:	imul   edi,DWORD PTR [rdx+0x65],0x60057
 1015ebe:	rex.RXB
 1015ebf:	gs je  0x1015f08
 1015ec2:	imul   ebp,DWORD PTR [rbp+riz*2+0x56],0x69737265
 1015eca:	outs   dx,DWORD PTR ds:[rsi]
 1015ecb:	outs   dx,BYTE PTR ds:[rsi]
 1015ecc:	rex.WB outs dx,BYTE PTR ds:[rsi]
 1015ece:	outs   dx,WORD PTR ds:[rsi]
 1015ed0:	push   rdi
 1015ed1:	add    BYTE PTR [rsi],cl
 1015ed3:	add    BYTE PTR [rsi+0x65],dl
 1015ed6:	jb     0x1015f29
 1015ed8:	jne    0x1015f3f
 1015eda:	jb     0x1015f55
 1015edc:	push   rsi
 1015edd:	(bad)  
 1015ede:	ins    BYTE PTR es:[rdi],dx
 1015edf:	jne    0x1015f46
 1015ee1:	push   rdi
 1015ee2:	add    BYTE PTR [rax],al
 1015ee4:	push   rsi
 1015ee5:	rex.RB push r10
 1015ee7:	push   rbx
 1015ee8:	rex.WB
 1015ee9:	rex.WRXB
 1015eea:	rex.WRX
 1015eeb:	cs fs ins BYTE PTR es:[rdi],dx
 1015eee:	ins    BYTE PTR es:[rdi],dx
 1015eef:	add    BYTE PTR [rdx+rax*1+0x52],ah
 1015ef3:	gs addr32 rex.WRXB jo 0x1015f5d
 1015ef8:	outs   dx,BYTE PTR ds:[rsi]
 1015ef9:	rex.WXB
 1015efa:	gs jns 0x1015f54
 1015efd:	add    dh,ch
 1015eff:	add    BYTE PTR [rbp+0x6e],al
 1015f02:	movsxd ebp,DWORD PTR [rdi+0x64]
 1015f05:	gs push rax
 1015f07:	outs   dx,DWORD PTR ds:[rsi]
 1015f08:	imul   ebp,DWORD PTR [rsi+0x74],0xcb007265
 1015f0f:	add    BYTE PTR [rbp+riz*2+0x63],al
 1015f13:	outs   dx,DWORD PTR ds:[rsi]
 1015f14:	fs gs push rax
 1015f17:	outs   dx,DWORD PTR ds:[rsi]
 1015f18:	imul   ebp,DWORD PTR [rsi+0x74],0xb3007265
 1015f1f:	add    al,0x53
 1015f21:	gs je  0x1015f79
 1015f24:	outs   dx,BYTE PTR ds:[rsi]
 1015f25:	push   0x6c646e61
 1015f2a:	gs fs rex.RB js 0x1015f92
 1015f2f:	gs jo  0x1015fa6
 1015f32:	imul   ebp,DWORD PTR [rdi+0x6e],0x746c6946
 1015f39:	gs jb  0x1015f3c
 1015f3c:	test   eax,0x65755103
 1015f41:	jb     0x1015fbc
 1015f43:	push   rax
 1015f44:	gs jb  0x1015fad
 1015f47:	outs   dx,DWORD PTR ds:[rsi]
 1015f48:	jb     0x1015fb7
 1015f4a:	(bad)  
 1015f4b:	outs   dx,BYTE PTR ds:[rsi]
 1015f4c:	movsxd esp,DWORD PTR [rbp+0x43]
 1015f4f:	outs   dx,DWORD PTR ds:[rsi]
 1015f50:	jne    0x1015fc0
 1015f52:	je     0x1015fb9
 1015f54:	jb     0x1015f56
 1015f56:	(bad)  
 1015f57:	add    al,BYTE PTR [rdi+0x65]
 1015f5a:	je     0x1015fb0
 1015f5c:	imul   esp,DWORD PTR [rbx+0x6b],0x6e756f43
 1015f63:	je     0x1015f65
 1015f65:	add    BYTE PTR [rax+0x74654702],al
 1015f6b:	push   rbx
 1015f6c:	jns    0x1015fe1
 1015f6e:	je     0x1015fd5
 1015f70:	ins    DWORD PTR es:[rdi],dx
 1015f71:	push   rsp
 1015f72:	imul   ebp,DWORD PTR [rbp+0x65],0x69467341
 1015f79:	ins    BYTE PTR es:[rdi],dx
 1015f7a:	gs push rsp
 1015f7c:	imul   ebp,DWORD PTR [rbp+0x65],0x5404ce00
 1015f83:	gs jb  0x1015ff3
 1015f86:	imul   ebp,DWORD PTR [rsi+0x61],0x72506574
 1015f8d:	outs   dx,DWORD PTR ds:[rsi]
 1015f8e:	movsxd esp,DWORD PTR [rbp+0x73]
 1015f91:	jae    0x1015f93
 1015f93:	add    dl,ah
 1015f95:	add    al,0x55
 1015f97:	outs   dx,BYTE PTR ds:[rsi]
 1015f98:	push   0x6c646e61
 1015f9d:	gs fs rex.RB js 0x1016005
 1015fa2:	gs jo  0x1016019
 1015fa5:	imul   ebp,DWORD PTR [rdi+0x6e],0x746c6946
 1015fac:	gs jb  0x1015faf
 1015faf:	add    BYTE PTR [rdx],al
 1015fb1:	add    ecx,DWORD PTR [rcx+0x73]
 1015fb4:	rex.R
 1015fb5:	gs (bad) 
 1015fb7:	jne    0x1016020
 1015fb9:	addr32 gs jb 0x101600d
 1015fbd:	jb     0x1016024
 1015fbf:	jae    0x1016026
 1015fc1:	outs   dx,BYTE PTR ds:[rsi]
 1015fc2:	je     0x1015fc4
 1015fc4:	es add al,0x52
 1015fc7:	je     0x1016035
 1015fc9:	push   rsi
 1015fca:	imul   esi,DWORD PTR [rdx+0x74],0x556c6175
 1015fd1:	outs   dx,BYTE PTR ds:[rsi]
 1015fd2:	ja     0x101603d
 1015fd4:	outs   dx,BYTE PTR ds:[rsi]
 1015fd5:	add    BYTE PTR fs:[rax],al
 1015fd8:	(bad)  
 1015fd9:	add    al,0x52
 1015fdb:	je     0x1016049
 1015fdd:	rex.WR outs dx,DWORD PTR ds:[rsi]
 1015fdf:	outs   dx,DWORD PTR ds:[rsi]
 1015fe0:	imul   esi,DWORD PTR [rbp+0x70],0x46
 1015fe4:	jne    0x1016054
 1015fe6:	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
 1015fea:	outs   dx,BYTE PTR ds:[rsi]
 1015feb:	rex.RB outs dx,BYTE PTR ds:[rsi]
 1015fed:	je     0x1016061
 1015fef:	jns    0x1015ff1
 1015ff1:	add    BYTE PTR [rax],bl
 1015ff3:	add    al,0x52
 1015ff5:	je     0x1016063
 1015ff7:	rex.XB (bad) 
 1015ff9:	jo     0x101606f
 1015ffb:	jne    0x101606f
 1015ffd:	rex.XB outs dx,DWORD PTR gs:[rsi]
 1016000:	outs   dx,BYTE PTR ds:[rsi]
 1016001:	je     0x1016068
 1016003:	js     0x1016079
 1016005:	add    bl,dl
 1016007:	add    cl,BYTE PTR [rax+0x65]
 101600a:	(bad)  
 101600b:	jo     0x101604e
 101600d:	ins    BYTE PTR es:[rdi],dx
 101600e:	ins    BYTE PTR es:[rdi],dx
 101600f:	outs   dx,DWORD PTR ds:[rsi]
 1016010:	movsxd eax,DWORD PTR [rax]
 1016012:	xlat   BYTE PTR ds:[rbx]
 1016013:	add    cl,BYTE PTR [rax+0x65]
 1016016:	(bad)  
 1016017:	jo     0x101605f
 1016019:	jb     0x1016080
 101601b:	add    BYTE PTR gs:[rax],al
 101601e:	gs add al,0x53
 1016021:	gs je  0x1016069
 1016024:	outs   dx,BYTE PTR ds:[rsi]
 1016025:	jbe    0x1016090
 1016027:	jb     0x1016098
 1016029:	outs   dx,BYTE PTR ds:[rsi]
 101602a:	ins    DWORD PTR es:[rdi],dx
 101602b:	outs   dx,BYTE PTR gs:[rsi]
 101602d:	je     0x1016085
 101602f:	(bad)  
 1016030:	jb     0x101609b
 1016032:	(bad)  
 1016033:	(bad)  
 1016034:	ins    BYTE PTR es:[rdi],dx
 1016035:	gs push rdi
 1016037:	add    bl,ah
 1016039:	add    DWORD PTR [rdi+0x65],eax
 101603c:	je     0x1016083
 101603e:	outs   dx,BYTE PTR ds:[rsi]
 101603f:	jbe    0x10160aa
 1016041:	jb     0x10160b2
 1016043:	outs   dx,BYTE PTR ds:[rsi]
 1016044:	ins    DWORD PTR es:[rdi],dx
 1016045:	outs   dx,BYTE PTR gs:[rsi]
 1016047:	je     0x101609f
 1016049:	(bad)  
 101604a:	jb     0x10160b5
 101604c:	(bad)  
 101604d:	(bad)  
 101604e:	ins    BYTE PTR es:[rdi],dx
 101604f:	gs push rdi
 1016051:	add    BYTE PTR [rax+rax*1+0x43],ah
 1016055:	outs   dx,DWORD PTR ds:[rsi]
 1016056:	ins    DWORD PTR es:[rdi],dx
 1016057:	jo     0x10160ba
 1016059:	jb     0x10160c0
 101605b:	push   rbx
 101605c:	je     0x10160d0
 101605e:	imul   ebp,DWORD PTR [rsi+0x67],0xda000057
 1016065:	add    cl,BYTE PTR [rax+0x65]
 1016068:	(bad)  
 1016069:	jo     0x10160bd
 101606b:	gs rex.B ins BYTE PTR es:[rdi],dx
 101606e:	ins    BYTE PTR es:[rdi],dx
 101606f:	outs   dx,DWORD PTR ds:[rsi]
 1016070:	movsxd eax,DWORD PTR [rax]
 1016072:	push   rcx
 1016073:	add    al,BYTE PTR [rdi+0x65]
 1016076:	je     0x10160c8
 1016078:	jb     0x10160e9
 101607a:	movsxd esp,DWORD PTR [rbp+0x73]
 101607d:	jae    0x10160c7
 101607f:	gs (bad) 
 1016081:	jo     0x1016083
 1016083:	add    BYTE PTR [rcx+0x5],ah
 1016086:	ins    BYTE PTR es:[rdi],dx
 1016087:	jae    0x10160fd
 1016089:	jb     0x10160f7
 101608b:	outs   dx,BYTE PTR gs:[rsi]
 101608d:	push   rdi
 101608e:	add    BYTE PTR [rax],al
 1016090:	add    BYTE PTR [rbx+rdx*2],0x65
 1016094:	je     0x10160e2
 1016096:	(bad)  
 1016097:	jae    0x101610d
 1016099:	rex.RB jb 0x101610e
 101609c:	outs   dx,DWORD PTR ds:[rsi]
 101609d:	jb     0x101609f
 101609f:	add    BYTE PTR [rbx],ah
 10160a1:	add    DWORD PTR [rbp+0x78],eax
 10160a4:	jo     0x1016107
 10160a6:	outs   dx,BYTE PTR ds:[rsi]
 10160a7:	rex.RB outs dx,BYTE PTR fs:[rsi]
 10160aa:	jbe    0x1016115
 10160ac:	jb     0x101611d
 10160ae:	outs   dx,BYTE PTR ds:[rsi]
 10160af:	ins    DWORD PTR es:[rdi],dx
 10160b0:	outs   dx,BYTE PTR gs:[rsi]
 10160b2:	je     0x1016107
 10160b4:	je     0x1016128
 10160b6:	imul   ebp,DWORD PTR [rsi+0x67],0x49005773
 10160bd:	add    al,BYTE PTR [rdi+0x65]
 10160c0:	je     0x1016112
 10160c2:	jb     0x101612d
 10160c4:	jbe    0x1016127
 10160c6:	je     0x101612d
 10160c8:	push   rax
 10160c9:	jb     0x101613a
 10160cb:	imul   bp,WORD PTR [rbp+riz*2+0x53],0x7274
 10160d2:	imul   ebp,DWORD PTR [rsi+0x67],0x46000057
 10160d9:	add    ecx,DWORD PTR [rdi+rbp*2+0x63]
 10160dd:	(bad)  
 10160de:	ins    BYTE PTR es:[rdi],dx
 10160df:	rex.B ins BYTE PTR es:[rdi],dx
 10160e1:	ins    BYTE PTR es:[rdi],dx
 10160e2:	outs   dx,DWORD PTR ds:[rsi]
 10160e3:	movsxd eax,DWORD PTR [rax]
 10160e5:	add    BYTE PTR [rsi],bh
 10160e7:	add    ecx,DWORD PTR [rdi+rbp*2+0x61]
 10160eb:	imul   r12,QWORD PTR fs:[rdx+0x72],0x41797261
 10160f4:	add    BYTE PTR [rax],al
 10160f6:	mov    ah,0x3
 10160f8:	push   rdx
 10160f9:	(bad)  
 10160fa:	imul   esi,DWORD PTR [rbx+0x65],0x65637845
 1016101:	jo     0x1016177
 1016103:	imul   ebp,DWORD PTR [rdi+0x6e],0x4380000
 101610a:	pop    rdi
 101610b:	jae    0x1016184
 101610d:	jae    0x1016172
 101610f:	(bad)  
 1016110:	outs   dx,BYTE PTR ds:[rsi]
 1016111:	pop    di
 1016113:	jae    0x1016174
 1016115:	ins    BYTE PTR es:[rdi],dx
	...

Disassembly of section .data:

0000000001017000 <.data>:
 1017000:	add    BYTE PTR [rax],al
 1017002:	add    BYTE PTR [rax],al
 1017004:	add    BYTE PTR [rcx],al
	...
 10170fe:	add    BYTE PTR [rax],al
 1017100:	add    DWORD PTR [rax],eax
 1017102:	add    BYTE PTR [rax],ah
 1017104:	add    BYTE PTR [rax],al
 1017106:	add    BYTE PTR [rax],al
 1017108:	pushf  
 1017109:	adc    eax,0x100
 101710e:	add    BYTE PTR [rax],al
 1017110:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 1017111:	adc    eax,0x100
 1017116:	add    BYTE PTR [rax],al
 1017118:	test   al,0x15
 101711a:	add    BYTE PTR [rcx],al
 101711c:	add    BYTE PTR [rax],al
 101711e:	add    BYTE PTR [rax],al
 1017120:	mov    al,0x15
 1017122:	add    BYTE PTR [rcx],al
 1017124:	add    BYTE PTR [rax],al
 1017126:	add    BYTE PTR [rax],al
 1017128:	rcl    BYTE PTR [rip+0x100],0x0        # 0x101722f
 101712f:	add    al,dl
 1017131:	adc    eax,0x100
 1017136:	add    BYTE PTR [rax],al
 1017138:	loopne 0x101714f
 101713a:	add    BYTE PTR [rcx],al
 101713c:	add    BYTE PTR [rax],al
 101713e:	add    BYTE PTR [rax],al
 1017140:	lock adc eax,0x100
 1017146:	add    BYTE PTR [rax],al
 1017148:	add    BYTE PTR [rsi],dl
 101714a:	add    BYTE PTR [rcx],al
 101714c:	add    BYTE PTR [rax],al
 101714e:	add    BYTE PTR [rax],al
 1017150:	adc    BYTE PTR [rsi],dl
 1017152:	add    BYTE PTR [rcx],al
 1017154:	add    BYTE PTR [rax],al
 1017156:	add    BYTE PTR [rax],al
 1017158:	and    BYTE PTR [rsi],dl
 101715a:	add    BYTE PTR [rcx],al
 101715c:	add    BYTE PTR [rax],al
 101715e:	add    BYTE PTR [rax],al
 1017160:	rex.W (bad) 
 1017162:	add    BYTE PTR [rcx],al
 1017164:	add    BYTE PTR [rax],al
 1017166:	add    BYTE PTR [rax],al
 1017168:	pop    rax
 1017169:	(bad)  
 101716a:	add    BYTE PTR [rcx],al
 101716c:	add    BYTE PTR [rax],al
 101716e:	add    BYTE PTR [rax],al
 1017170:	mov    BYTE PTR [rsi],dl
 1017172:	add    BYTE PTR [rcx],al
 1017174:	add    BYTE PTR [rax],al
 1017176:	add    BYTE PTR [rax],al
 1017178:	rcl    BYTE PTR [rsi],0x0
 101717b:	add    DWORD PTR [rax],eax
 101717d:	add    BYTE PTR [rax],al
 101717f:	add    BYTE PTR [rax],al
 1017181:	(bad)  
 1017182:	add    BYTE PTR [rcx],al
 1017184:	add    BYTE PTR [rax],al
 1017186:	add    BYTE PTR [rax],al
 1017188:	and    BYTE PTR [rdi],dl
 101718a:	add    BYTE PTR [rcx],al
 101718c:	add    BYTE PTR [rax],al
 101718e:	add    BYTE PTR [rax],al
 1017190:	js     0x10171a9
 1017192:	add    BYTE PTR [rcx],al
	...
 10171a0:	xor    ah,BYTE PTR [rdx+0x2b992ddf]
 10171a6:	add    BYTE PTR [rax],al
 10171a8:	int    0x5d
 10171aa:	and    dl,dl
 10171ac:	data16 (bad) 
 10171ae:	(bad)  
 10171af:	(bad)  
 10171b0:	(bad)  
 10171b1:	(bad)  
 10171b2:	(bad)  
 10171b3:	(bad)  
 10171b4:	(bad)  
 10171b5:	(bad)  
 10171b6:	(bad)  
 10171b7:	(bad)  
 10171b8:	(bad)  
 10171b9:	(bad)  
 10171ba:	(bad)  
 10171bb:	inc    DWORD PTR [rcx]
 10171bd:	add    BYTE PTR [rax],al
 10171bf:	add    BYTE PTR [rax+0x10071],cl
 10171c5:	add    BYTE PTR [rax],al
 10171c7:	add    BYTE PTR [rbx],cl
 10171c9:	add    BYTE PTR [rax],al
 10171cb:	add    BYTE PTR [rax],al
 10171cd:	add    BYTE PTR [rax],al
 10171cf:	add    BYTE PTR [rax+0x10071],ah
 10171d5:	add    BYTE PTR [rax],al
 10171d7:	add    BYTE PTR [rbp+0x0],cl
 10171da:	add    BYTE PTR [rax],al
 10171dc:	add    BYTE PTR [rax],al
 10171de:	add    BYTE PTR [rax],al
 10171e0:	rex jb 0x10171e3
 10171e3:	add    DWORD PTR [rax],eax
 10171e5:	add    BYTE PTR [rax],al
 10171e7:	add    BYTE PTR [rbx],dl
 10171e9:	add    BYTE PTR [rax],al
 10171eb:	add    BYTE PTR [rax],al
 10171ed:	add    BYTE PTR [rax],al
 10171ef:	add    BYTE PTR [rdx],dl
 10171f1:	sbb    al,BYTE PTR [rcx]
 10171f3:	add    DWORD PTR [rax],eax
 10171f5:	add    BYTE PTR [rax],al
 10171f7:	add    BYTE PTR [rdx],ch
 10171f9:	sbb    al,BYTE PTR [rcx]
 10171fb:	add    DWORD PTR [rax],eax
 10171fd:	add    BYTE PTR [rax],al
 10171ff:	add    BYTE PTR [rdx+0x1a],al
 1017202:	add    DWORD PTR [rcx],eax
 1017204:	add    BYTE PTR [rax],al
 1017206:	add    BYTE PTR [rax],al
 1017208:	sbb    DWORD PTR [rcx],0x101
	...
 1017216:	add    BYTE PTR [rax],al
 1017218:	mov    edx,0x1011a
 101721d:	add    BYTE PTR [rax],al
 101721f:	add    BYTE PTR [rbx+0x1b],cl
 1017222:	add    DWORD PTR [rcx],eax
 1017224:	add    BYTE PTR [rax],al
 1017226:	add    BYTE PTR [rax],al
 1017228:	movsxd ebx,DWORD PTR [rbx]
 101722a:	add    DWORD PTR [rcx],eax
 101722c:	add    BYTE PTR [rax],al
 101722e:	add    BYTE PTR [rax],al
 1017230:	jnp    0x101724d
 1017232:	add    DWORD PTR [rcx],eax
 1017234:	add    BYTE PTR [rax],al
 1017236:	add    BYTE PTR [rax],al
 1017238:	xchg   ebx,eax
 1017239:	sbb    eax,DWORD PTR [rcx]
 101723b:	add    DWORD PTR [rax],eax
	...

Disassembly of section .pdata:

000000000103f000 <.pdata>:
 103f000:	movabs al,ds:0x580000756d000074
 103f009:	cmp    al,0x1
 103f00b:	add    BYTE PTR [rax-0x57ffff8b],al
 103f011:	jne    0x103f013
 103f013:	add    BYTE PTR [rsp+rdi*1+0x1],ah
 103f017:	add    BYTE PTR [rax-0x22ffff8b],ch
 103f01d:	jne    0x103f01f
 103f01f:	add    BYTE PTR [rax+0x3c],dh
 103f022:	add    DWORD PTR [rax],eax
 103f024:	fnsave [rbp+0x0]
 103f027:	add    ch,ch
 103f029:	jne    0x103f02b
 103f02b:	add    BYTE PTR [rsp+rdi*1+0x75ed0001],al
 103f032:	add    BYTE PTR [rax],al
 103f034:	clc    
 103f035:	jne    0x103f037
 103f037:	add    BYTE PTR [rax+0x13c],bl
 103f03d:	jbe    0x103f03f
 103f03f:	add    BYTE PTR [rsi],ch
 103f041:	jbe    0x103f043
 103f043:	add    BYTE PTR [rax+0x2e00013c],ch
 103f049:	jbe    0x103f04b
 103f04b:	add    BYTE PTR [rsi+rsi*2+0x0],ah
 103f04f:	add    BYTE PTR [rsp+rdi*1+0x76640001],dh
 103f056:	add    BYTE PTR [rax],al
 103f058:	je     0x103f0d0
 103f05a:	add    BYTE PTR [rax],al
 103f05c:	enter  0x13c,0x0
 103f060:	je     0x103f0d8
 103f062:	add    BYTE PTR [rax],al
 103f064:	jnp    0x103f0dc
 103f066:	add    BYTE PTR [rax],al
 103f068:	fdivr  QWORD PTR [rcx+rax*1]
 103f06b:	add    BYTE PTR [rax-0x2ffff8a],dl
 103f071:	jbe    0x103f073
 103f073:	add    ah,ch
 103f075:	cmp    al,0x1
 103f077:	add    BYTE PTR [rax],dl
 103f079:	ja     0x103f07b
 103f07b:	add    BYTE PTR [rbx],ah
 103f07d:	js     0x103f07f
 103f07f:	add    BYTE PTR [rax],al
 103f081:	cmp    eax,0x78300001
 103f086:	add    BYTE PTR [rax],al
 103f088:	jne    0x103f104
 103f08a:	add    BYTE PTR [rax],al
 103f08c:	or     al,0x3d
 103f08e:	add    DWORD PTR [rax],eax
 103f090:	cmp    BYTE PTR [rdx+0x0],0x0
 103f094:	mov    bl,0x7a
 103f096:	add    BYTE PTR [rax],al
 103f098:	sub    BYTE PTR [rip+0x7ab30001],bh        # 0x7bb6f09f
 103f09e:	add    BYTE PTR [rax],al
 103f0a0:	(bad)  
 103f0a1:	jnp    0x103f0a3
 103f0a3:	add    BYTE PTR [rdi*1+0x7b3f0001],bh
 103f0aa:	add    BYTE PTR [rax],al
 103f0ac:	pop    rcx
 103f0ad:	jnp    0x103f0af
 103f0af:	add    BYTE PTR [rax+0x3d],dl
 103f0b2:	add    DWORD PTR [rax],eax
 103f0b4:	(bad)  
 103f0b5:	jnp    0x103f0b7
 103f0b7:	add    BYTE PTR [rbx+0x7d],al
 103f0ba:	add    BYTE PTR [rax],al
 103f0bc:	(bad)  
 103f0bd:	cmp    eax,0x7d500001
 103f0c2:	add    BYTE PTR [rax],al
 103f0c4:	push   rsp
 103f0c5:	jle    0x103f0c7
 103f0c7:	add    BYTE PTR [rax+0x3d],bh
 103f0ca:	add    DWORD PTR [rax],eax
 103f0cc:	(bad)  
 103f0cd:	jle    0x103f0cf
 103f0cf:	add    BYTE PTR [rbp+0x7e],bh
 103f0d2:	add    BYTE PTR [rax],al
 103f0d4:	mov    al,0x3d
 103f0d6:	add    DWORD PTR [rax],eax
 103f0d8:	add    BYTE PTR [rdi+0x0],bh
 103f0db:	add    BYTE PTR [rax-0x47ffff80],ch
 103f0e1:	cmp    eax,0x80b00001
 103f0e6:	add    BYTE PTR [rax],al
 103f0e8:	lock add BYTE PTR [rax],0x0
 103f0ec:	sar    BYTE PTR [rip+0xffffffff80f00001],1        # 0xffffffff81f3f0f3
 103f0f2:	add    BYTE PTR [rax],al
 103f0f4:	(bad)  
 103f0f5:	add    DWORD PTR [rax],0x13dd800
 103f0fb:	add    BYTE PTR [rax-0x7f],ah
 103f0fe:	add    BYTE PTR [rax],al
 103f100:	add    WORD PTR [rax],0xec00
 103f105:	cmp    eax,0x81700001
 103f10a:	add    BYTE PTR [rax],al
 103f10c:	js     0x103f091
 103f10e:	add    BYTE PTR [rax],al
 103f110:	cld    
 103f111:	cmp    eax,0x83800001
 103f116:	add    BYTE PTR [rax],al
 103f118:	sbb    eax,0x1c000085
 103f11d:	add    DWORD PTR ds:[rax],eax
 103f120:	xor    BYTE PTR [rbp-0x7a730000],al
 103f126:	add    BYTE PTR [rax],al
 103f128:	push   rax
 103f129:	add    DWORD PTR ds:[rax],eax
 103f12c:	lea    eax,[rbp-0x7a1b0000]
 103f132:	add    BYTE PTR [rax],al
 103f134:	(bad)  
 103f135:	add    DWORD PTR ds:[rax],eax
 103f138:	in     eax,0x85
 103f13a:	add    BYTE PTR [rax],al
 103f13c:	mov    esi,0x74000086
 103f141:	add    DWORD PTR ds:[rax],eax
 103f144:	mov    esi,0xd4000086
 103f149:	xchg   BYTE PTR [rax],al
 103f14b:	add    BYTE PTR [rax-0x2bfffec2],cl
 103f151:	xchg   BYTE PTR [rax],al
 103f153:	add    bh,dh
 103f155:	xchg   BYTE PTR [rax],al
 103f157:	add    BYTE PTR [rax+0x13e],bl
 103f15d:	xchg   DWORD PTR [rax],eax
 103f15f:	add    dl,al
 103f161:	xchg   DWORD PTR [rax],eax
 103f163:	add    BYTE PTR [rax-0x1ffffec2],dh
 103f169:	xchg   DWORD PTR [rax],eax
 103f16b:	add    BYTE PTR [rsi],bh
 103f16d:	mov    BYTE PTR [rax],al
 103f16f:	add    BYTE PTR [rsi+rdi*1-0x77afffff],bh
 103f176:	add    BYTE PTR [rax],al
 103f178:	iret   
 103f179:	mov    DWORD PTR [rax],eax
 103f17b:	add    ah,al
 103f17d:	add    DWORD PTR ds:[rax],eax
 103f180:	loopne 0x103f10b
 103f182:	add    BYTE PTR [rax],al
 103f184:	call   0xffffffffd903f212
 103f189:	add    DWORD PTR ds:[rax],eax
 103f18c:	call   0x1203f21a
 103f191:	mov    al,BYTE PTR [rax]
 103f193:	add    ah,ah
 103f195:	add    DWORD PTR ds:[rax],eax
 103f198:	adc    DWORD PTR [rdx-0x75b70000],ecx
 103f19e:	add    BYTE PTR [rax],al
 103f1a0:	add    al,0x3f
 103f1a2:	add    DWORD PTR [rax],eax
 103f1a4:	rex.WB mov al,BYTE PTR [r8]
 103f1a7:	add    BYTE PTR [rbx-0x76],dh
 103f1aa:	add    BYTE PTR [rax],al
 103f1ac:	sbb    BYTE PTR [rdi],bh
 103f1ae:	add    DWORD PTR [rax],eax
 103f1b0:	jae    0x103f13c
 103f1b2:	add    BYTE PTR [rax],al
 103f1b4:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 103f1b5:	mov    al,BYTE PTR [rax]
 103f1b7:	add    BYTE PTR [rax],ch
 103f1b9:	(bad)  
 103f1ba:	add    DWORD PTR [rax],eax
 103f1bc:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 103f1bd:	mov    al,BYTE PTR [rax]
 103f1bf:	add    bh,bh
 103f1c1:	mov    al,BYTE PTR [rax]
 103f1c3:	add    BYTE PTR [rax+0x3f],al
 103f1c6:	add    DWORD PTR [rax],eax
 103f1c8:	dec    DWORD PTR [rdx-0x74cf0000]
 103f1ce:	add    BYTE PTR [rax],al
 103f1d0:	fs (bad) 
 103f1d2:	add    DWORD PTR [rax],eax
 103f1d4:	xor    DWORD PTR [rbx-0x747e0000],ecx
 103f1da:	add    BYTE PTR [rax],al
 103f1dc:	jl     0x103f21d
 103f1de:	add    DWORD PTR [rax],eax
 103f1e0:	nop
 103f1e1:	mov    eax,DWORD PTR [rax]
 103f1e3:	add    BYTE PTR [rip+0xffffffff8c00008f],cl        # 0xffffffff8d03f278
 103f1e9:	(bad)  
 103f1ea:	add    DWORD PTR [rax],eax
 103f1ec:	and    BYTE PTR [rdi-0x6ff90000],cl
 103f1f2:	add    BYTE PTR [rax],al
 103f1f4:	cwde   
 103f1f5:	(bad)  
 103f1f6:	add    DWORD PTR [rax],eax
 103f1f8:	adc    BYTE PTR [rax-0x6fde0000],dl
 103f1fe:	add    BYTE PTR [rax],al
 103f200:	test   al,0x3f
 103f202:	add    DWORD PTR [rax],eax
 103f204:	and    dl,BYTE PTR [rax-0x6fd90000]
 103f20a:	add    BYTE PTR [rax],al
 103f20c:	mov    al,0x3f
 103f20e:	add    DWORD PTR [rax],eax
 103f210:	(bad)  
 103f211:	nop
 103f212:	add    BYTE PTR [rax],al
 103f214:	rcl    BYTE PTR [rax+0x3fc40000],1
 103f21a:	add    DWORD PTR [rax],eax
 103f21c:	rcl    BYTE PTR [rax-0x6e180000],1
 103f222:	add    BYTE PTR [rax],al
 103f224:	fdivr  DWORD PTR [rdi]
 103f226:	add    DWORD PTR [rax],eax
 103f228:	call   0xffffffffef03f2be
 103f22d:	xchg   ecx,eax
 103f22e:	add    BYTE PTR [rax],al
 103f230:	call   0x103f374
 103f235:	xchg   edx,eax
 103f236:	add    BYTE PTR [rax],al
 103f238:	push   rbp
 103f239:	xchg   ebx,eax
 103f23a:	add    BYTE PTR [rax],al
 103f23c:	clc    
 103f23d:	(bad)  
 103f23e:	add    DWORD PTR [rax],eax
 103f240:	(bad)  
 103f241:	xchg   ebx,eax
 103f242:	add    BYTE PTR [rax],al
 103f244:	and    DWORD PTR [rbp+0x40100000],edx
 103f24a:	add    DWORD PTR [rax],eax
 103f24c:	xor    BYTE PTR [rbp-0x69fb0000],dl
 103f252:	add    BYTE PTR [rax],al
 103f254:	sub    al,0x40
 103f256:	add    DWORD PTR [rax],eax
 103f258:	adc    BYTE PTR [rsi-0x691b0000],dl
 103f25e:	add    BYTE PTR [rax],al
 103f260:	rex
 103f261:	rex add DWORD PTR [rax],eax
 103f264:	lock xchg esi,eax
 103f266:	add    BYTE PTR [rax],al
 103f268:	xor    DWORD PTR [rdi+0x40540000],edx
 103f26e:	add    DWORD PTR [rax],eax
 103f270:	xor    DWORD PTR [rdi-0x67810000],edx
 103f276:	add    BYTE PTR [rax],al
 103f278:	rex add DWORD PTR fs:[rax],eax
 103f27c:	jg     0x103f216
 103f27e:	add    BYTE PTR [rax],al
 103f280:	xchg   edx,eax
 103f281:	cwde   
 103f282:	add    BYTE PTR [rax],al
 103f284:	js     0x103f2c6
 103f286:	add    DWORD PTR [rax],eax
 103f288:	movabs al,ds:0x8800009a5c000098
 103f291:	rex add DWORD PTR [rax],eax
 103f294:	jo     0x103f230
 103f296:	add    BYTE PTR [rax],al
 103f298:	movabs ds:0xb0000140a400009a,al
 103f2a1:	(bad)  
 103f2a2:	add    BYTE PTR [rax],al
 103f2a4:	outs   dx,DWORD PTR ds:[rsi]
 103f2a5:	fwait
 103f2a6:	add    BYTE PTR [rax],al
 103f2a8:	lods   al,BYTE PTR ds:[rsi]
 103f2a9:	rex add DWORD PTR [rax],eax
 103f2ac:	outs   dx,DWORD PTR ds:[rsi]
 103f2ad:	fwait
 103f2ae:	add    BYTE PTR [rax],al
 103f2b0:	sbb    al,0x9c
 103f2b2:	add    BYTE PTR [rax],al
 103f2b4:	enter  0x140,0x0
 103f2b8:	sbb    al,0x9c
 103f2ba:	add    BYTE PTR [rax],al
 103f2bc:	nop
 103f2bd:	pushf  
 103f2be:	add    BYTE PTR [rax],al
 103f2c0:	fadd   QWORD PTR [rax+0x1]
 103f2c3:	add    BYTE PTR [rax-0x3affff64],dl
 103f2c9:	pushf  
 103f2ca:	add    BYTE PTR [rax],al
 103f2cc:	in     al,dx
 103f2cd:	rex add DWORD PTR [rax],eax
 103f2d0:	rcr    BYTE PTR [rax+rax*1+0x9ce200],1
 103f2d7:	add    BYTE PTR [rax],al
 103f2d9:	add    DWORD PTR [r8],eax
 103f2dc:	loop   0x103f27a
 103f2de:	add    BYTE PTR [rax],al
 103f2e0:	rex.WX popf 
 103f2e2:	add    BYTE PTR [rax],al
 103f2e4:	or     BYTE PTR [rcx+0x1],al
 103f2e7:	add    BYTE PTR [rdx-0x63],cl
 103f2ea:	add    BYTE PTR [rax],al
 103f2ec:	push   rax
 103f2ed:	popf   
 103f2ee:	add    BYTE PTR [rax],al
 103f2f0:	sbb    al,0x41
 103f2f2:	add    DWORD PTR [rax],eax
 103f2f4:	(bad)  
 103f2f5:	popf   
 103f2f6:	add    BYTE PTR [rax],al
 103f2f8:	movabs ds:0xa20001412c00009d,al
 103f301:	popf   
 103f302:	add    BYTE PTR [rax],al
 103f304:	xor    bl,BYTE PTR [rdi+0x413c0000]
 103f30a:	add    DWORD PTR [rax],eax
 103f30c:	xor    bl,BYTE PTR [rdi-0x60bb0000]
 103f312:	add    BYTE PTR [rax],al
 103f314:	push   rsp
 103f315:	add    DWORD PTR [r8],eax
 103f318:	push   rax
 103f319:	lahf   
 103f31a:	add    BYTE PTR [rax],al
 103f31c:	rex.WRXB movabs al,ds:0xa060000141640000
 103f326:	add    BYTE PTR [rax],al
 103f328:	loope  0x103f2ca
 103f32a:	add    BYTE PTR [rax],al
 103f32c:	js     0x103f36f
 103f32e:	add    DWORD PTR [rax],eax
 103f330:	loope  0x103f2d2
 103f332:	add    BYTE PTR [rax],al
 103f334:	sub    al,0xa1
 103f336:	add    BYTE PTR [rax],al
 103f338:	add    BYTE PTR [rcx+0x1],0x0
 103f33c:	sub    al,0xa1
 103f33e:	add    BYTE PTR [rax],al
 103f340:	and    DWORD PTR [rcx+0x41940000],0xa1900001
 103f34a:	add    BYTE PTR [rax],al
 103f34c:	jmp    0x103f2ef
 103f34e:	add    BYTE PTR [rax],al
 103f350:	test   al,0x41
 103f352:	add    DWORD PTR [rax],eax
 103f354:	jmp    0x103f2f7
 103f356:	add    BYTE PTR [rax],al
 103f358:	xchg   BYTE PTR [rbp+0x41b80000],ah
 103f35e:	add    DWORD PTR [rax],eax
 103f360:	xchg   BYTE PTR [rbp-0x562c0000],ah
 103f366:	add    BYTE PTR [rax],al
 103f368:	(bad)  
 103f369:	add    DWORD PTR [r8],eax
 103f36c:	(bad)  
 103f36d:	test   eax,0xa9f80000
 103f372:	add    BYTE PTR [rax],al
 103f374:	in     al,0x41
 103f376:	add    DWORD PTR [rax],eax
 103f378:	add    BYTE PTR [rdx-0x51e30000],ch
 103f37e:	add    BYTE PTR [rax],al
 103f380:	add    BYTE PTR [rdx+0x1],al
 103f383:	add    BYTE PTR [rax],dh
 103f385:	scas   al,BYTE PTR es:[rdi]
 103f386:	add    BYTE PTR [rax],al
 103f388:	pop    rsi
 103f389:	scas   al,BYTE PTR es:[rdi]
 103f38a:	add    BYTE PTR [rax],al
 103f38c:	and    al,0x42
 103f38e:	add    DWORD PTR [rax],eax
 103f390:	pop    rsi
 103f391:	scas   al,BYTE PTR es:[rdi]
 103f392:	add    BYTE PTR [rax],al
 103f394:	or     al,0xaf
 103f396:	add    BYTE PTR [rax],al
 103f398:	cmp    BYTE PTR [rdx+0x1],al
 103f39b:	add    BYTE PTR [rdi+rbp*4],cl
 103f39e:	add    BYTE PTR [rax],al
 103f3a0:	int    0xaf
 103f3a2:	add    BYTE PTR [rax],al
 103f3a4:	push   rax
 103f3a5:	rex.X add DWORD PTR [rax],eax
 103f3a8:	int    0xaf
 103f3aa:	add    BYTE PTR [rax],al
 103f3ac:	(bad)  [rdi+0x42640000]
 103f3b2:	add    DWORD PTR [rax],eax
 103f3b4:	(bad)  [rdi-0x500a0000]
 103f3ba:	add    BYTE PTR [rax],al
 103f3bc:	je     0x103f400
 103f3be:	add    DWORD PTR [rax],eax
 103f3c0:	imul   BYTE PTR [rdi-0x4f340000]
 103f3c6:	add    BYTE PTR [rax],al
 103f3c8:	test   BYTE PTR [rdx+0x1],al
 103f3cb:	add    ah,cl
 103f3cd:	mov    al,0x0
 103f3cf:	add    dh,dl
 103f3d1:	mov    al,0x0
 103f3d3:	add    BYTE PTR [rdx+rax*2-0x4f1fffff],bl
 103f3da:	add    BYTE PTR [rax],al
 103f3dc:	add    dh,BYTE PTR [rcx+0x42ac0000]
 103f3e2:	add    DWORD PTR [rax],eax
 103f3e4:	add    dh,BYTE PTR [rcx-0x4c160000]
 103f3ea:	add    BYTE PTR [rax],al
 103f3ec:	mov    eax,0xea000142
 103f3f1:	mov    bl,0x0
 103f3f3:	add    BYTE PTR [rcx-0x4c],al
 103f3f6:	add    BYTE PTR [rax],al
 103f3f8:	(bad)  
 103f3f9:	rex.X add DWORD PTR [rax],eax
 103f3fc:	push   rax
 103f3fd:	mov    ah,0x0
 103f3ff:	add    BYTE PTR [rsi-0x1bffff4b],al
 103f405:	rex.X add DWORD PTR [rax],eax
 103f408:	xchg   BYTE PTR [rbp-0x46b00000],dh
 103f40e:	add    BYTE PTR [rax],al
 103f410:	hlt    
 103f411:	rex.X add DWORD PTR [rax],eax
 103f414:	(bad)  
 103f415:	mov    ecx,0xbafa0000
 103f41a:	add    BYTE PTR [rax],al
 103f41c:	or     BYTE PTR [rbx+0x1],al
 103f41f:	add    BYTE PTR [rax],al
 103f421:	mov    ebx,0xbbc00000
 103f426:	add    BYTE PTR [rax],al
 103f428:	and    BYTE PTR [rbx+0x1],al
 103f42b:	add    al,dl
 103f42d:	mov    ebx,0xbd1d0000
 103f432:	add    BYTE PTR [rax],al
 103f434:	cmp    BYTE PTR [rbx+0x1],al
 103f437:	add    BYTE PTR [rax],dh
 103f439:	mov    ebp,0xc0960000
 103f43e:	add    BYTE PTR [rax],al
 103f440:	push   rax
 103f441:	rex.XB add DWORD PTR [r8],eax
 103f444:	mov    al,0xc0
 103f446:	add    BYTE PTR [rax],al
 103f448:	mov    eax,0x700000c5
 103f44d:	rex.XB add DWORD PTR [r8],eax
 103f450:	rol    ch,0x0
 103f453:	add    BYTE PTR [rax-0x7fffff3a],al
 103f459:	rex.XB add DWORD PTR [r8],eax
 103f45c:	nop
 103f45d:	mov    BYTE PTR [rax],0x0
 103f460:	xrelease mov BYTE PTR [rax],0x0
 103f464:	cwde   
 103f465:	rex.XB add DWORD PTR [r8],eax
 103f468:	xrelease mov BYTE PTR [rax],0x0
 103f46c:	movabs al,ds:0xa0000143b40000c8
 103f475:	enter  0x0,0xc5
 103f479:	enter  0x0,0xc8
 103f47d:	rex.XB add DWORD PTR [r8],eax
 103f480:	ror    al,1
 103f482:	add    BYTE PTR [rax],al
 103f484:	mov    ecx,ecx
 103f486:	add    BYTE PTR [rax],al
 103f488:	fadd   DWORD PTR [rbx+0x1]
 103f48b:	add    BYTE PTR [rax-0x52ffff37],ah
 103f491:	retf   0x0
 103f494:	lock rex.XB add DWORD PTR [r8],eax
 103f498:	lods   eax,DWORD PTR ds:[rsi]
 103f499:	retf   0x0
 103f49c:	(bad)  
 103f49d:	retf   0x0
 103f4a0:	add    BYTE PTR [rcx+rax*1+0x0],al
 103f4a4:	(bad)  
 103f4a5:	retf   0x0
 103f4a8:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 103f4a9:	int    0x0
 103f4ab:	add    BYTE PTR [rsp+rax*2],bl
 103f4ae:	add    DWORD PTR [rax],eax
 103f4b0:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 103f4b1:	int    0x0
 103f4b3:	add    BYTE PTR [rbp-0x32],bl
 103f4b6:	add    BYTE PTR [rax],al
 103f4b8:	xor    BYTE PTR [rcx+rax*1+0x0],al
 103f4bc:	pop    rbp
 103f4bd:	(bad)  
 103f4be:	add    BYTE PTR [rax],al
 103f4c0:	test   esi,ecx
 103f4c2:	add    BYTE PTR [rax],al
 103f4c4:	rex
 103f4c5:	add    DWORD PTR [rax],r8d
 103f4c8:	nop
 103f4c9:	(bad)  
 103f4ca:	add    BYTE PTR [rax],al
 103f4cc:	in     al,0xcf
 103f4ce:	add    BYTE PTR [rax],al
 103f4d0:	push   rax
 103f4d1:	add    DWORD PTR [rax],r8d
 103f4d4:	lock iret 
 103f4d6:	add    BYTE PTR [rax],al
 103f4d8:	movsxd edx,edx
 103f4da:	add    BYTE PTR [rax],al
 103f4dc:	jo     0x103f522
 103f4de:	add    DWORD PTR [rax],eax
 103f4e0:	jo     0x103f4b4
 103f4e2:	add    BYTE PTR [rax],al
 103f4e4:	or     dl,ch
 103f4e6:	add    BYTE PTR [rax],al
 103f4e8:	xchg   esp,eax
 103f4e9:	add    DWORD PTR [rax],r8d
 103f4ec:	adc    ch,dl
 103f4ee:	add    BYTE PTR [rax],al
 103f4f0:	out    dx,eax
 103f4f1:	(bad)  
 103f4f2:	add    BYTE PTR [rax],al
 103f4f4:	mov    eax,0x144
 103f4f9:	(bad)  
 103f4fa:	add    BYTE PTR [rax],al
 103f4fc:	jge    0x103f4d4
 103f4fe:	add    BYTE PTR [rax],al
 103f500:	enter  0x144,0x0
 103f504:	jge    0x103f4dc
 103f506:	add    BYTE PTR [rax],al
 103f508:	fwait
 103f509:	(bad)  
 103f50a:	add    BYTE PTR [rax],al
 103f50c:	(bad)  
 103f50d:	add    DWORD PTR [rax],r8d
 103f510:	fwait
 103f511:	(bad)  
 103f512:	add    BYTE PTR [rax],al
 103f514:	or     ebx,eax
 103f516:	add    BYTE PTR [rax],al
 103f518:	call   0xc03f661
 103f51d:	fadd   DWORD PTR [rax]
 103f51f:	add    BYTE PTR [rbp-0x28],cl
 103f522:	add    BYTE PTR [rax],al
 103f524:	or     BYTE PTR [rbp+0x1],al
 103f527:	add    BYTE PTR [rbp-0x28],cl
 103f52a:	add    BYTE PTR [rax],al
 103f52c:	pop    rdx
 103f52d:	fadd   DWORD PTR [rax]
 103f52f:	add    BYTE PTR [rax*2-0x27a5ffff],bl
 103f536:	add    BYTE PTR [rax],al
 103f538:	ins    BYTE PTR es:[rdi],dx
 103f539:	fadd   DWORD PTR [rax]
 103f53b:	add    BYTE PTR [rax*2-0x2793ffff],ch
 103f542:	add    BYTE PTR [rax],al
 103f544:	sbb    eax,0x0
 103f547:	add    BYTE PTR [rax+0x45],al
 103f54a:	add    DWORD PTR [rax],eax
 103f54c:	nop
 103f54d:	fadd   DWORD PTR [rax]
 103f54f:	add    BYTE PTR [rcx-0x26],bl
 103f552:	add    BYTE PTR [rax],al
 103f554:	pop    rax
 103f555:	add    DWORD PTR [r8],r8d
 103f558:	(bad)  
 103f559:	fiadd  DWORD PTR [rax]
 103f55b:	add    BYTE PTR [rbx],dl
 103f55d:	fadd   QWORD PTR [rax]
 103f55f:	add    BYTE PTR [rax+0x45],ah
 103f562:	add    DWORD PTR [rax],eax
 103f564:	and    ah,bl
 103f566:	add    BYTE PTR [rax],al
 103f568:	xor    ah,bl
 103f56a:	add    BYTE PTR [rax],al
 103f56c:	jl     0x103f5b3
 103f56e:	add    DWORD PTR [rax],eax
 103f570:	xor    ah,bl
 103f572:	add    BYTE PTR [rax],al
 103f574:	movabs ds:0xa3000145840000dc,eax
 103f57d:	fadd   QWORD PTR [rax]
 103f57f:	add    BYTE PTR [rbx-0x23],bh
 103f582:	add    BYTE PTR [rax],al
 103f584:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 103f585:	add    DWORD PTR [r8],r8d
 103f588:	jnp    0x103f567
 103f58a:	add    BYTE PTR [rax],al
 103f58c:	mov    esp,0xc00000dd
 103f591:	add    DWORD PTR [r8],r8d
 103f594:	mov    esp,0xd70000dd
 103f599:	fld    QWORD PTR [rax]
 103f59b:	add    al,dl
 103f59d:	add    DWORD PTR [r8],r8d
 103f5a0:	loopne 0x103f57f
 103f5a2:	add    BYTE PTR [rax],al
 103f5a4:	push   rsp
 103f5a5:	fiadd  WORD PTR [rax]
 103f5a7:	add    al,ah
 103f5a9:	add    DWORD PTR [r8],r8d
 103f5ac:	push   rsp
 103f5ad:	fiadd  WORD PTR [rax]
 103f5af:	add    BYTE PTR [rcx],cl
 103f5b1:	loope  0x103f5b3
 103f5b3:	add    ah,bh
 103f5b5:	add    DWORD PTR [r8],r8d
 103f5b8:	or     ecx,esp
 103f5ba:	add    BYTE PTR [rax],al
 103f5bc:	sub    cl,ah
 103f5be:	add    BYTE PTR [rax],al
 103f5c0:	sbb    BYTE PTR [rsi+0x1],al
 103f5c3:	add    BYTE PTR [rax],dh
 103f5c5:	loope  0x103f5c7
 103f5c7:	add    BYTE PTR [rdx-0x1f],dh
 103f5ca:	add    BYTE PTR [rax],al
 103f5cc:	sub    BYTE PTR [rsi+0x1],al
 103f5cf:	add    BYTE PTR [rdx-0x1f],dh
 103f5d2:	add    BYTE PTR [rax],al
 103f5d4:	outs   dx,DWORD PTR ds:[rsi]
 103f5d5:	loop   0x103f5d7
 103f5d7:	add    BYTE PTR [rsi+rax*2],bh
 103f5da:	add    DWORD PTR [rax],eax
 103f5dc:	outs   dx,DWORD PTR ds:[rsi]
 103f5dd:	loop   0x103f5df
 103f5df:	add    BYTE PTR [rbx+0x500000e2],al
 103f5e5:	rex.RX add DWORD PTR [rax],r8d
 103f5e8:	and    edx,0x0
 103f5eb:	add    BYTE PTR [rsi+0x600000e2],dl
 103f5f1:	rex.RX add DWORD PTR [rax],r8d
 103f5f4:	xchg   esi,eax
 103f5f5:	loop   0x103f5f7
 103f5f7:	add    BYTE PTR [rdx+0x740000e2],bl
 103f5fd:	rex.RX add DWORD PTR [rax],r8d
 103f600:	movabs al,ds:0x840000e3510000e2
 103f609:	rex.RX add DWORD PTR [rax],r8d
 103f60c:	(bad)  
 103f60d:	jrcxz  0x103f60f
 103f60f:	add    BYTE PTR [rbx-0x73ffff1d],cl
 103f615:	rex.RX add DWORD PTR [rax],r8d
 103f618:	mov    esp,ebx
 103f61a:	add    BYTE PTR [rax],al
 103f61c:	mul    ebp
 103f61e:	add    BYTE PTR [rax],al
 103f620:	cwde   
 103f621:	rex.RX add DWORD PTR [rax],r8d
 103f624:	mul    ebp
 103f626:	add    BYTE PTR [rax],al
 103f628:	add    eax,0xb80000e6
 103f62d:	rex.RX add DWORD PTR [rax],r8d
 103f630:	adc    dh,ah
 103f632:	add    BYTE PTR [rax],al
 103f634:	sub    dh,ah
 103f636:	add    BYTE PTR [rax],al
 103f638:	enter  0x146,0x0
 103f63c:	sub    dh,ah
 103f63e:	add    BYTE PTR [rax],al
 103f640:	adc    esp,edi
 103f642:	add    BYTE PTR [rax],al
 103f644:	(bad)  
 103f645:	rex.RX add DWORD PTR [rax],r8d
 103f648:	adc    esp,edi
 103f64a:	add    BYTE PTR [rax],al
 103f64c:	sbb    ah,bh
 103f64e:	add    BYTE PTR [rax],al
 103f650:	clc    
 103f651:	rex.RX add DWORD PTR [rax],r8d
 103f654:	and    bh,ah
 103f656:	add    BYTE PTR [rax],al
 103f658:	clc    
 103f659:	out    dx,al
 103f65a:	add    BYTE PTR [rax],al
 103f65c:	or     BYTE PTR [rdi+0x1],al
 103f65f:	add    BYTE PTR [rax],al
 103f661:	out    dx,eax
 103f662:	add    BYTE PTR [rax],al
 103f664:	mov    ebx,0x2c0000ef
 103f669:	rex.RXB add DWORD PTR [r8],r8d
 103f66c:	shr    bh,1
 103f66e:	add    BYTE PTR [rax],al
 103f670:	repz add BYTE PTR fs:[rax],al
 103f674:	rex.R
 103f675:	rex.RXB add DWORD PTR [r8],r8d
 103f678:	jo     0x103f66d
 103f67a:	add    BYTE PTR [rax],al
 103f67c:	xchg   edi,eax
 103f67d:	repz add BYTE PTR [rax],al
 103f680:	rex.RXB add DWORD PTR fs:[r8],r8d
 103f684:	xchg   edi,eax
 103f685:	repz add BYTE PTR [rax],al
 103f688:	mov    ecx,0x780000f4
 103f68d:	rex.RXB add DWORD PTR [r8],r8d
 103f690:	mov    ecx,0xc00000f4
 103f695:	cmc    
 103f696:	add    BYTE PTR [rax],al
 103f698:	cwde   
 103f699:	rex.RXB add DWORD PTR [r8],r8d
 103f69c:	shl    ch,1
 103f69e:	add    BYTE PTR [rax],al
 103f6a0:	xor    esi,0x47a80000
 103f6a6:	add    DWORD PTR [rax],eax
 103f6a8:	nop
 103f6a9:	test   BYTE PTR [rax],0x0
 103f6ac:	rex.WX clc 
 103f6ae:	add    BYTE PTR [rax],al
 103f6b0:	mov    al,0x47
 103f6b2:	add    DWORD PTR [rax],eax
 103f6b4:	rex.WX clc 
 103f6b6:	add    BYTE PTR [rax],al
 103f6b8:	cmp    bh,dl
 103f6ba:	add    BYTE PTR [rax],al
 103f6bc:	int3   
 103f6bd:	rex.RXB add DWORD PTR [r8],r8d
 103f6c0:	cmp    bh,dl
 103f6c2:	add    BYTE PTR [rax],al
 103f6c4:	adc    al,0xfc
 103f6c6:	add    BYTE PTR [rax],al
 103f6c8:	loopne 0x103f711
 103f6ca:	add    DWORD PTR [rax],eax
 103f6cc:	adc    al,0xfc
 103f6ce:	add    BYTE PTR [rax],al
 103f6d0:	pop    rcx
 103f6d1:	cld    
 103f6d2:	add    BYTE PTR [rax],al
 103f6d4:	hlt    
 103f6d5:	rex.RXB add DWORD PTR [r8],r8d
 103f6d8:	pop    rcx
 103f6d9:	cld    
 103f6da:	add    BYTE PTR [rax],al
 103f6dc:	imul   edi,esp,0x0
 103f6df:	add    BYTE PTR [rax+rcx*2],al
 103f6e2:	add    DWORD PTR [rax],eax
 103f6e4:	cmp    ah,0x0
 103f6e7:	add    BYTE PTR [rbx],bh
 103f6e9:	std    
 103f6ea:	add    BYTE PTR [rax],al
 103f6ec:	adc    al,0x48
 103f6ee:	add    DWORD PTR [rax],eax
 103f6f0:	push   rax
 103f6f1:	std    
 103f6f2:	add    BYTE PTR [rax],al
 103f6f4:	inc    BYTE PTR cs:[rax]
 103f6f7:	add    BYTE PTR [rax+rcx*2],ch
 103f6fa:	add    DWORD PTR [rax],eax
 103f6fc:	rex inc BYTE PTR [rax]
 103f6ff:	add    bl,bh
 103f701:	inc    BYTE PTR [rax]
 103f703:	add    BYTE PTR [rax+rcx*2+0x1],al
 103f707:	add    BYTE PTR [rax],dl
 103f709:	inc    DWORD PTR [rax]
 103f70b:	add    BYTE PTR [rax+rax*1],cl
 103f70e:	add    DWORD PTR [rax],eax
 103f710:	pop    rsp
 103f711:	add    QWORD PTR [rax],rax
 103f714:	and    BYTE PTR [rax],al
 103f716:	add    DWORD PTR [rax],eax
 103f718:	push   0x3
 103f71a:	add    DWORD PTR [rax],eax
 103f71c:	ins    BYTE PTR es:[rdi],dx
 103f71d:	add    QWORD PTR [rax],rax
 103f720:	jo     0x103f725
 103f722:	add    DWORD PTR [rax],eax
 103f724:	ss (bad) 
 103f726:	add    DWORD PTR [rax],eax
 103f728:	pushf  
 103f729:	add    QWORD PTR [rax],rax
 103f72c:	rex (bad) 
 103f72e:	add    DWORD PTR [rax],eax
 103f730:	movabs ds:0xd0000148b4000106,eax
 103f739:	(bad)  
 103f73a:	add    DWORD PTR [rax],eax
 103f73c:	addr32 (bad) 
 103f73e:	add    DWORD PTR [rax],eax
 103f740:	fmul   QWORD PTR [rax+0x1]
 103f743:	add    BYTE PTR [rax+0x7],dh
 103f746:	add    DWORD PTR [rax],eax
 103f748:	out    0x7,al
 103f74a:	add    DWORD PTR [rax],eax
 103f74c:	call   0xffffffffe703f899
 103f751:	(bad)  
 103f752:	add    DWORD PTR [rax],eax
 103f754:	or     WORD PTR [rcx],ax
 103f757:	add    BYTE PTR [rax],al
 103f759:	add    QWORD PTR [r8],rax
 103f75c:	or     WORD PTR [rcx],ax
 103f75f:	add    BYTE PTR [rax+0x14000109],al
 103f765:	add    QWORD PTR [r8],rax
 103f768:	nop
 103f769:	or     DWORD PTR [rcx],eax
 103f76b:	add    ch,ch
 103f76d:	or     DWORD PTR [rcx],eax
 103f76f:	add    BYTE PTR [rcx+rcx*2],ah
 103f772:	add    DWORD PTR [rax],eax
 103f774:	in     eax,dx
 103f775:	or     DWORD PTR [rcx],eax
 103f777:	add    dl,bh
 103f779:	or     al,BYTE PTR [rcx]
 103f77b:	add    BYTE PTR [rcx+rcx*2],bh
 103f77e:	add    DWORD PTR [rax],eax
 103f780:	cli    
 103f781:	or     al,BYTE PTR [rcx]
 103f783:	add    BYTE PTR [rsi],dl
 103f785:	or     eax,DWORD PTR [rcx]
 103f787:	add    BYTE PTR [rcx+rcx*2+0x1],dl
 103f78b:	add    BYTE PTR [rsi],dl
 103f78d:	or     eax,DWORD PTR [rcx]
 103f78f:	add    BYTE PTR [rdx+0x6400010b],ch
 103f795:	add    QWORD PTR [r8],rax
 103f798:	stos   BYTE PTR es:[rdi],al
 103f799:	or     eax,DWORD PTR [rcx]
 103f79b:	add    dl,dl
 103f79d:	or     eax,DWORD PTR [rcx]
 103f79f:	add    BYTE PTR [rcx+rcx*2+0x1],bh
 103f7a3:	add    al,ah
 103f7a5:	or     eax,DWORD PTR [rcx]
 103f7a7:	add    BYTE PTR [rax],dh
 103f7a9:	or     al,0x1
 103f7ab:	add    BYTE PTR [rcx+rcx*2+0xc400001],cl
 103f7b2:	add    DWORD PTR [rax],eax
 103f7b4:	and    ecx,DWORD PTR [rip+0x49940001]        # 0x4a97f7bb
 103f7ba:	add    DWORD PTR [rax],eax
 103f7bc:	xor    BYTE PTR [rip+0xd400001],cl        # 0xe43f7c3
 103f7c2:	add    DWORD PTR [rax],eax
 103f7c4:	test   al,0x49
 103f7c6:	add    DWORD PTR [rax],eax
 103f7c8:	(bad)  
 103f7c9:	or     eax,0xda50001
 103f7ce:	add    DWORD PTR [rax],eax
 103f7d0:	mov    al,0x49
 103f7d2:	add    DWORD PTR [rax],eax
 103f7d4:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 103f7d5:	or     eax,0xe500001
 103f7da:	add    DWORD PTR [rax],eax
 103f7dc:	int3   
 103f7dd:	add    QWORD PTR [r8],rax
 103f7e0:	push   rax
 103f7e1:	(bad)  
 103f7e2:	add    DWORD PTR [rax],eax
 103f7e4:	jo     0x103f7f4
 103f7e6:	add    DWORD PTR [rax],eax
 103f7e8:	loopne 0x103f833
 103f7ea:	add    DWORD PTR [rax],eax
 103f7ec:	jo     0x103f7fc
 103f7ee:	add    DWORD PTR [rax],eax
 103f7f0:	jne    0x103f800
 103f7f2:	add    DWORD PTR [rax],eax
 103f7f4:	lock add QWORD PTR [r8],rax
 103f7f8:	jne    0x103f808
 103f7fa:	add    DWORD PTR [rax],eax
 103f7fc:	jns    0x103f80c
 103f7fe:	add    DWORD PTR [rax],eax
 103f800:	add    al,0x4a
 103f802:	add    DWORD PTR [rax],eax
 103f804:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 103f805:	(bad)  
 103f806:	add    DWORD PTR [rax],eax
 103f808:	or     DWORD PTR [rdi],ecx
 103f80a:	add    DWORD PTR [rax],eax
 103f80c:	adc    al,0x4a
 103f80e:	add    DWORD PTR [rax],eax
 103f810:	adc    BYTE PTR [rdi],cl
 103f812:	add    DWORD PTR [rax],eax
 103f814:	nop
 103f815:	adc    BYTE PTR [rcx],al
 103f817:	add    BYTE PTR [rdx+rcx*2],ah
 103f81a:	add    DWORD PTR [rax],eax
 103f81c:	cwde   
 103f81d:	adc    BYTE PTR [rcx],al
 103f81f:	add    BYTE PTR [rsi+0x11],ah
 103f822:	add    DWORD PTR [rax],eax
 103f824:	rex.W
 103f825:	rex.WX add QWORD PTR [rax],rax
 103f828:	ins    BYTE PTR es:[rdi],dx
 103f829:	adc    DWORD PTR [rcx],eax
 103f82b:	add    BYTE PTR [rsi+0x11],bh
 103f82e:	add    DWORD PTR [rax],eax
 103f830:	push   rax
 103f831:	rex.WX add QWORD PTR [rax],rax
 103f834:	pushf  
 103f835:	adc    DWORD PTR [rcx],eax
 103f837:	add    BYTE PTR [rdx+rdx*1+0x1],cl
 103f83b:	add    BYTE PTR [rax+0x4a],ah
 103f83e:	add    DWORD PTR [rax],eax
 103f840:	push   rsp
 103f841:	adc    al,BYTE PTR [rcx]
 103f843:	add    BYTE PTR [rbx+0x12],ch
 103f846:	add    DWORD PTR [rax],eax
 103f848:	or     BYTE PTR [rdx+0x1],0x0
 103f84c:	adc    BYTE PTR [rdx],0x1
 103f84f:	add    bl,ah
 103f851:	adc    al,BYTE PTR [rcx]
 103f853:	add    BYTE PTR [rax-0x13fffeb6],cl
 103f859:	adc    al,BYTE PTR [rcx]
 103f85b:	add    BYTE PTR [rcx],cl
 103f85d:	adc    eax,DWORD PTR [rcx]
 103f85f:	add    BYTE PTR [rax+0x1000014a],dl
 103f865:	adc    eax,DWORD PTR [rcx]
 103f867:	add    BYTE PTR [rbx+rdx*1+0x4a980001],ah
 103f86e:	add    DWORD PTR [rax],eax
 103f870:	rcl    BYTE PTR [rbx],0x1
 103f873:	add    BYTE PTR [rsi],cl
 103f875:	adc    al,0x1
 103f877:	add    BYTE PTR [rax+0x2000014a],dh
 103f87d:	adc    al,0x1
 103f87f:	add    BYTE PTR [rdi],bh
 103f881:	adc    al,0x1
 103f883:	add    BYTE PTR [rax+0x6000014a],bh
 103f889:	adc    al,0x1
 103f88b:	add    BYTE PTR [rcx-0x43fffeec],ah
 103f891:	rex.WX add QWORD PTR [rax],rax
 103f894:	test   al,0x14
 103f896:	add    DWORD PTR [rax],eax
 103f898:	rcl    BYTE PTR [rcx+rax*1],0x0
 103f89c:	(bad)  
 103f89d:	rex.WX add QWORD PTR [rax],rax
 103f8a0:	(bad)  
 103f8a1:	adc    al,0x1
 103f8a3:	add    BYTE PTR [rdx*1+0x4acc0001],cl
 103f8aa:	add    DWORD PTR [rax],eax
 103f8ac:	adc    al,0x15
 103f8ae:	add    DWORD PTR [rax],eax
 103f8b0:	rex.WR adc rax,0x4ad80001
 103f8b6:	add    DWORD PTR [rax],eax
 103f8b8:	lock adc eax,0x16310001
 103f8be:	add    DWORD PTR [rax],eax
 103f8c0:	in     al,dx
 103f8c1:	rex.WX add QWORD PTR [rax],rax
 103f8c4:	push   0x1b000116
 103f8c9:	(bad)  
 103f8ca:	add    DWORD PTR [rax],eax
 103f8cc:	or     al,0x4b
 103f8ce:	add    DWORD PTR [rax],eax
 103f8d0:	rex.W (bad) 
 103f8d2:	add    DWORD PTR [rax],eax
 103f8d4:	xchg   edx,eax
 103f8d5:	sbb    BYTE PTR [rcx],al
 103f8d7:	add    BYTE PTR [rax],bl
 103f8d9:	rex.WXB add QWORD PTR [r8],rax
 103f8dc:	adc    BYTE PTR [rcx],bl
 103f8de:	add    DWORD PTR [rax],eax
 103f8e0:	sbb    al,0x19
 103f8e2:	add    DWORD PTR [rax],eax
 103f8e4:	rex.R
 103f8e5:	rex.WXB add QWORD PTR [r8],rax
 103f8e8:	sbb    al,0x19
 103f8ea:	add    DWORD PTR [rax],eax
 103f8ec:	jp     0x103f907
 103f8ee:	add    DWORD PTR [rax],eax
 103f8f0:	xor    BYTE PTR [rbx+0x1],cl
 103f8f3:	add    BYTE PTR [rdx+0x19],bh
 103f8f6:	add    DWORD PTR [rax],eax
 103f8f8:	sbb    DWORD PTR [rcx],0x4b200001
 103f8fe:	add    DWORD PTR [rax],eax
 103f900:	lea    ebx,[rcx]
 103f902:	add    DWORD PTR [rax],eax
 103f904:	add    al,0x1a
 103f906:	add    DWORD PTR [rax],eax
 103f908:	rex.WR
 103f909:	rex.WXB add QWORD PTR [r8],rax
 103f90c:	(bad)  
 103f90d:	sbb    al,BYTE PTR [rcx]
 103f90f:	add    BYTE PTR [rip+0x5400011b],bh        # 0x5503fa30
 103f915:	rex.WXB add QWORD PTR [r8],rax
 103f918:	rcr    BYTE PTR [rbx],0x1
 103f91b:	add    BYTE PTR [rbx],dl
 103f91d:	and    al,0x1
 103f91f:	add    BYTE PTR [rbx+rcx*2+0x1],ah
 103f923:	add    BYTE PTR [rax],ah
 103f925:	and    al,0x1
 103f927:	add    BYTE PTR [rdi+0x5c000124],bl
 103f92d:	rex.WXB add QWORD PTR [r8],rax
 103f930:	mov    al,0x24
 103f932:	add    DWORD PTR [rax],eax
 103f934:	adc    BYTE PTR [rip+0x4b880001],ah        # 0x4c8bf93b
 103f93a:	add    DWORD PTR [rax],eax
 103f93c:	and    BYTE PTR [rip+0x259c0001],ah        # 0x269ff943
 103f942:	add    DWORD PTR [rax],eax
 103f944:	nop
 103f945:	rex.WXB add QWORD PTR [r8],rax
 103f948:	mov    al,0x25
 103f94a:	add    DWORD PTR [rax],eax
 103f94c:	in     eax,dx
 103f94d:	and    eax,0x4b980001
 103f952:	add    DWORD PTR [rax],eax
 103f954:	add    BYTE PTR [rsi],ah
 103f956:	add    DWORD PTR [rax],eax
 103f958:	add    WORD PTR es:[rax],ax
 103f95c:	movabs al,ds:0x130001267000014b
 103f965:	(bad)  
 103f966:	add    DWORD PTR [rax],eax
 103f968:	test   al,0x4b
 103f96a:	add    DWORD PTR [rax],eax
 103f96c:	and    BYTE PTR [rdi],ah
 103f96e:	add    DWORD PTR [rax],eax
 103f970:	or     ebp,DWORD PTR [rax]
 103f972:	add    DWORD PTR [rax],eax
 103f974:	mov    al,0x4b
 103f976:	add    DWORD PTR [rax],eax
 103f978:	sub    BYTE PTR [rcx],al
 103f97b:	add    BYTE PTR [rax+0x28],dh
 103f97e:	add    DWORD PTR [rax],eax
 103f980:	mov    eax,0x8000014b
 103f985:	sub    BYTE PTR [rcx],al
 103f987:	add    BYTE PTR [rdi-0x3ffffed8],bl
 103f98d:	rex.WXB add QWORD PTR [r8],rax
 103f990:	lahf   
 103f991:	sub    BYTE PTR [rcx],al
 103f993:	add    dl,dh
 103f995:	sub    BYTE PTR [rcx],al
 103f997:	add    ah,cl
 103f999:	rex.WXB add QWORD PTR [r8],rax
 103f99c:	repnz sub BYTE PTR [rcx],al
 103f99f:	add    BYTE PTR [rbx+rbp*1+0x1],al
 103f9a3:	add    ah,ah
 103f9a5:	rex.WXB add QWORD PTR [r8],rax
 103f9a8:	sub    r8d,DWORD PTR [rcx]
 103f9ab:	add    BYTE PTR [rbx+0x2b],bh
 103f9ae:	add    DWORD PTR [rax],eax
 103f9b0:	add    al,0x4c
 103f9b2:	add    DWORD PTR [rax],eax
 103f9b4:	jnp    0x103f9e1
 103f9b6:	add    DWORD PTR [rax],eax
 103f9b8:	movabs ds:0xb000014c1400012b,eax
 103f9c1:	sub    eax,DWORD PTR [rcx]
 103f9c3:	add    bl,ah
 103f9c5:	sub    eax,0x4c240001
 103f9ca:	add    DWORD PTR [rax],eax
 103f9cc:	lock sub eax,0x2e160001
 103f9d2:	add    DWORD PTR [rax],eax
 103f9d4:	rex.R
 103f9d5:	add    QWORD PTR [rax],r8
 103f9d8:	(bad)  
 103f9d9:	add    DWORD PTR cs:[rax],eax
 103f9dc:	push   rdx
 103f9dd:	add    DWORD PTR cs:[rax],eax
 103f9e0:	rex.WR
 103f9e1:	add    QWORD PTR [rax],r8
 103f9e4:	push   rdx
 103f9e5:	add    DWORD PTR cs:[rax],eax
 103f9e8:	(bad)  
 103f9e9:	add    DWORD PTR cs:[rax],eax
 103f9ec:	(bad)  
 103f9ed:	add    QWORD PTR [rax],r8
 103f9f0:	jo     0x103fa20
 103f9f2:	add    DWORD PTR [rax],eax
 103f9f4:	and    eax,0x7c00012f
 103f9f9:	add    QWORD PTR [rax],r8
 103f9fc:	xor    BYTE PTR [rdi],ch
 103f9fe:	add    DWORD PTR [rax],eax
 103fa00:	icebp  
 103fa01:	(bad)  
 103fa02:	add    DWORD PTR [rax],eax
 103fa04:	test   BYTE PTR [rcx+rax*1+0x0],cl
 103fa08:	add    BYTE PTR [rax],dh
 103fa0a:	add    DWORD PTR [rax],eax
 103fa0c:	pop    rdx
 103fa0d:	xor    BYTE PTR [rcx],al
 103fa0f:	add    BYTE PTR [rsp+rcx*2+0x305a0001],bl
 103fa16:	add    DWORD PTR [rax],eax
 103fa18:	(bad)  
 103fa19:	xor    DWORD PTR [rcx],eax
 103fa1b:	add    BYTE PTR [rsp+rcx*2+0x31160001],dh
 103fa22:	add    DWORD PTR [rax],eax
 103fa24:	(bad)  
 103fa25:	xor    DWORD PTR [rcx],eax
 103fa27:	add    al,cl
 103fa29:	add    QWORD PTR [rax],r8
 103fa2c:	rex xor DWORD PTR [rcx],eax
 103fa2f:	add    BYTE PTR [rdx+0x31],bh
 103fa32:	add    DWORD PTR [rax],eax
 103fa34:	fmul   DWORD PTR [rcx+rax*1+0x0]
 103fa38:	jp     0x103fa6b
 103fa3a:	add    DWORD PTR [rax],eax
 103fa3c:	imul   esi,DWORD PTR [rdx],0x1
 103fa3f:	add    al,ch
 103fa41:	add    QWORD PTR [rax],r8
 103fa44:	imul   esi,DWORD PTR [rdx],0x1
 103fa47:	add    BYTE PTR [rax+0x32],bh
 103fa4a:	add    DWORD PTR [rax],eax
 103fa4c:	add    al,0x4d
 103fa4e:	add    DWORD PTR [rax],eax
 103fa50:	xor    BYTE PTR [rdx],0x1
 103fa53:	add    BYTE PTR [rbx+0x14000132],dh
 103fa59:	add    QWORD PTR [r8],r8
 103fa5c:	mov    bl,0x32
 103fa5e:	add    DWORD PTR [rax],eax
 103fa60:	lods   al,BYTE PTR ds:[rsi]
 103fa61:	xor    eax,DWORD PTR [rcx]
 103fa63:	add    BYTE PTR [rax],ah
 103fa65:	add    QWORD PTR [r8],r8
 103fa68:	lods   al,BYTE PTR ds:[rsi]
 103fa69:	xor    eax,DWORD PTR [rcx]
 103fa6b:	add    BYTE PTR [rsi+0x44000133],dh
 103fa71:	add    QWORD PTR [r8],r8
 103fa74:	mov    dh,0x33
 103fa76:	add    DWORD PTR [rax],eax
 103fa78:	rex.WX xor al,0x1
 103fa7b:	add    BYTE PTR [rbp+rcx*2+0x1],dl
 103fa7f:	add    BYTE PTR [rax+0x34],dl
 103fa82:	add    DWORD PTR [rax],eax
 103fa84:	shl    DWORD PTR [rcx+rax*1],1
 103fa87:	add    BYTE PTR [rax+0x4d],bh
 103fa8a:	add    DWORD PTR [rax],eax
 103fa8c:	loopne 0x103fac2
 103fa8e:	add    DWORD PTR [rax],eax
 103fa90:	rex.R xor eax,0x4d800001
 103fa96:	add    DWORD PTR [rax],eax
 103fa98:	rex.R xor eax,0x35af0001
 103fa9e:	add    DWORD PTR [rax],eax
 103faa0:	mov    BYTE PTR [rbp+0x1],cl
 103faa3:	add    BYTE PTR [rdi-0x33fffecb],ch
 103faa9:	xor    eax,0x4da40001
 103faae:	add    DWORD PTR [rax],eax
 103fab0:	int3   
 103fab1:	xor    eax,0x35df0001
 103fab6:	add    DWORD PTR [rax],eax
 103fab8:	ror    BYTE PTR [rbp+0x1],0x0
 103fabc:	lock xor eax,0x36190001
 103fac2:	add    DWORD PTR [rax],eax
 103fac4:	ror    BYTE PTR [rbp+0x1],1
 103fac7:	add    BYTE PTR [rcx],bl
 103fac9:	add    DWORD PTR ss:[rax],eax
 103facc:	push   rax
 103facd:	add    DWORD PTR ss:[rax],eax
 103fad0:	fmul   DWORD PTR [rbp+0x1]
 103fad3:	add    BYTE PTR [rax+0x36],dl
 103fad6:	add    DWORD PTR [rax],eax
 103fad8:	mov    esp,0xf0000136
 103fadd:	add    QWORD PTR [r8],r8
 103fae0:	mov    esp,0xf5000136
 103fae5:	add    DWORD PTR ss:[rax],eax
 103fae8:	or     al,0x4e
 103faea:	add    DWORD PTR [rax],eax
 103faec:	cmc    
 103faed:	add    DWORD PTR ss:[rax],eax
 103faf0:	adc    BYTE PTR [rdi],dh
 103faf2:	add    DWORD PTR [rax],eax
 103faf4:	sub    BYTE PTR [rsi+0x1],cl
 103faf7:	add    BYTE PTR [rax],bl
 103faf9:	(bad)  
 103fafa:	add    DWORD PTR [rax],eax
 103fafc:	(bad)  
 103fafd:	cmp    al,BYTE PTR [rcx]
 103faff:	add    BYTE PTR [rax],bh
 103fb01:	rex.WRX add QWORD PTR [rax],r8
 103fb04:	cmp    al,BYTE PTR [rcx]
 103fb07:	add    BYTE PTR [rbp+0x3a],bl
 103fb0a:	add    DWORD PTR [rax],eax
 103fb0c:	(bad)  
 103fb0d:	add    QWORD PTR [rax],rax
 103fb10:	jo     0x103fb4c
 103fb12:	add    DWORD PTR [rax],eax
 103fb14:	xchg   ecx,eax
 103fb15:	cmp    al,BYTE PTR [rcx]
 103fb17:	add    BYTE PTR [rax-0x68fffec3],ch
 103fb1d:	cmp    al,BYTE PTR [rcx]
 103fb1f:	add    BYTE PTR [rbp+0x1c00013a],dh
 103fb25:	rex.WX add QWORD PTR [rax],rax
 103fb28:	mov    ebx,0xd600013a
 103fb2d:	cmp    al,BYTE PTR [rcx]
 103fb2f:	add    BYTE PTR [rax+0x4a],bl
 103fb32:	add    DWORD PTR [rax],eax
 103fb34:	loopne 0x103fb70
 103fb36:	add    DWORD PTR [rax],eax
 103fb38:	add    bh,BYTE PTR [rbx]
 103fb3a:	add    DWORD PTR [rax],eax
 103fb3c:	in     al,0x4a
 103fb3e:	add    DWORD PTR [rax],eax
 103fb40:	and    BYTE PTR [rbx],bh
 103fb42:	add    DWORD PTR [rax],eax
 103fb44:	cmp    rax,QWORD PTR [r9]
 103fb47:	add    BYTE PTR [rax+0x3e],al
 103fb4a:	add    DWORD PTR [rax],eax
 103fb4c:	push   rax
 103fb4d:	cmp    eax,DWORD PTR [rcx]
 103fb4f:	add    BYTE PTR [rax+0x3b],dh
 103fb52:	add    DWORD PTR [rax],eax
 103fb54:	mov    WORD PTR [rax+0x1],cs
 103fb57:	add    BYTE PTR [rax-0x6bfffec5],al
 103fb5d:	cmp    eax,DWORD PTR [rcx]
 103fb5f:	add    BYTE PTR [rsp+rcx*2+0x1],dh
 103fb63:	add    BYTE PTR [rax-0x28fffec5],dh
 103fb69:	cmp    eax,DWORD PTR [rcx]
 103fb6b:	add    BYTE PTR [rax+0x3e],cl
 103fb6e:	add    DWORD PTR [rax],eax
 103fb70:	loopne 0x103fbad
 103fb72:	add    DWORD PTR [rax],eax
 103fb74:	push   rsi
 103fb75:	cmp    al,0x1
 103fb77:	.byte 0x0
 103fb78:	xchg   esp,eax
 103fb79:	add    QWORD PTR [rax],rax

Disassembly of section .rsrc:

0000000001040000 <.rsrc>:
	...
 1040008:	add    al,0x0
 104000a:	add    BYTE PTR [rax],al
 104000c:	add    BYTE PTR [rax],al
 104000e:	add    al,BYTE PTR [rax]
 1040010:	adc    BYTE PTR [rax],al
 1040012:	add    BYTE PTR [rax],al
 1040014:	and    BYTE PTR [rax],al
 1040016:	add    BYTE PTR [rax+0x18],al
 104001c:	cmp    BYTE PTR [rax],al
 104001e:	add    BYTE PTR [rax+0x0],al
 1040024:	add    BYTE PTR [rax],al
 1040026:	add    BYTE PTR [rax],al
 1040028:	add    al,0x0
 104002a:	add    BYTE PTR [rax],al
 104002c:	add    BYTE PTR [rax],al
 104002e:	add    DWORD PTR [rax],eax
 1040030:	add    DWORD PTR [rax],eax
 1040032:	add    BYTE PTR [rax],al
 1040034:	push   rax
 1040035:	add    BYTE PTR [rax],al
 1040037:	add    BYTE PTR [rax],0x0
 104003a:	add    BYTE PTR [rax],al
 104003c:	add    BYTE PTR [rax],al
 104003e:	add    BYTE PTR [rax],al
 1040040:	add    al,0x0
 1040042:	add    BYTE PTR [rax],al
 1040044:	add    BYTE PTR [rax],al
 1040046:	add    DWORD PTR [rax],eax
 1040048:	add    DWORD PTR [rax],eax
 104004a:	add    BYTE PTR [rax],al
 104004c:	push   0x800000
 1040051:	add    BYTE PTR [rax],al
 1040053:	add    BYTE PTR [rax],al
 1040055:	add    BYTE PTR [rax],al
 1040057:	add    BYTE PTR [rax+rax*1],al
 104005a:	add    BYTE PTR [rax],al
 104005c:	add    BYTE PTR [rax],al
 104005e:	add    DWORD PTR [rax],eax
 1040060:	or     DWORD PTR [rax+rax*1],eax
 1040063:	add    BYTE PTR [rax+0x0],al
 1040069:	add    BYTE PTR [rax],al
 104006b:	add    BYTE PTR [rax],al
 104006d:	add    BYTE PTR [rax],al
 104006f:	add    BYTE PTR [rax+rax*1],al
 1040072:	add    BYTE PTR [rax],al
 1040074:	add    BYTE PTR [rax],al
 1040076:	add    DWORD PTR [rax],eax
 1040078:	or     DWORD PTR [rax+rax*1],eax
 104007b:	add    BYTE PTR [rax-0x60000000],dl
 1040081:	add    BYTE PTR [rax+rax*1],al
 1040084:	pushf  
 1040085:	add    al,0x0
 1040087:	add    ah,ah
 1040089:	add    al,0x0
 104008b:	add    BYTE PTR [rax],al
 104008d:	add    BYTE PTR [rax],al
 104008f:	add    BYTE PTR [rax*1+0x15a0004],bh
 1040096:	add    BYTE PTR [rax],al
 1040098:	in     al,0x4
 104009a:	add    BYTE PTR [rax],al
 104009c:	add    BYTE PTR [rax],al
 104009e:	add    BYTE PTR [rax],al
 10400a0:	pushf  
 10400a1:	add    al,0x34
 10400a3:	add    BYTE PTR [rax],al
 10400a5:	add    BYTE PTR [rsi+0x0],dl
 10400a8:	push   rbx
 10400a9:	add    BYTE PTR [rdi+0x0],bl
 10400ac:	push   rsi
 10400ad:	add    BYTE PTR [rbp+0x0],al
 10400b0:	push   rdx
 10400b1:	add    BYTE PTR [rbx+0x0],dl
 10400b4:	rex.WB add BYTE PTR [r15+0x0],cl
 10400b8:	rex.WRX add BYTE PTR [rdi+0x0],r11b
 10400bc:	rex.WB add BYTE PTR [r14+0x0],cl
 10400c0:	rex.RX add BYTE PTR [rdi+0x0],r9b
 10400c4:	add    BYTE PTR [rax],al
 10400c6:	add    BYTE PTR [rax],al
 10400c8:	mov    ebp,0xfeef04
 10400cd:	add    BYTE PTR [rcx],al
 10400cf:	add    BYTE PTR [rsi+0x0],ch
 10400d2:	fild   DWORD PTR [rdi]
 10400d4:	cmp    al,0x0
 10400d6:	xor    al,0x8
 10400d8:	add    BYTE PTR [rax],al
 10400da:	or     eax,DWORD PTR [rax]
 10400dc:	cmp    al,0x0
 10400de:	xor    al,0x8
 10400e0:	(bad)  
 10400e1:	add    BYTE PTR [rax],al
 10400e3:	add    BYTE PTR [rax],cl
 10400e5:	add    BYTE PTR [rax],al
 10400e7:	add    BYTE PTR [rax],al
 10400e9:	add    BYTE PTR [rax+rax*1],al
 10400ec:	add    DWORD PTR [rax],eax
	...
 10400fa:	add    BYTE PTR [rax],al
 10400fc:	cli    
 10400fd:	add    eax,DWORD PTR [rax]
 10400ff:	add    BYTE PTR [rcx],al
 1040101:	add    BYTE PTR [rbx+0x0],dl
 1040104:	je     0x1040106
 1040106:	jb     0x1040108
 1040108:	imul   eax,DWORD PTR [rax],0x67006e
 104010e:	rex.RX add BYTE PTR [rcx+0x0],r13b
 1040112:	ins    BYTE PTR es:[rdi],dx
 1040113:	add    BYTE PTR [rbp+0x0],ah
 1040116:	rex.WB add BYTE PTR [r14+0x0],bpl
 104011a:	data16 add BYTE PTR [rdi+0x0],ch
 104011e:	add    BYTE PTR [rax],al
 1040120:	(bad)  
 1040121:	add    eax,DWORD PTR [rax]
 1040123:	add    BYTE PTR [rcx],al
 1040125:	add    BYTE PTR [rax],dh
 1040127:	add    BYTE PTR [rax+rax*1],dh
 104012a:	xor    BYTE PTR [rax],al
 104012c:	cmp    DWORD PTR [rax],eax
 104012e:	xor    BYTE PTR [rax],al
 1040130:	xor    al,0x0
 1040132:	rex.X add BYTE PTR [rax],sil
 1040135:	add    BYTE PTR [rax],al
 1040137:	add    BYTE PTR [rsi],ah
 1040139:	add    BYTE PTR [rdi],al
 104013b:	add    BYTE PTR [rcx],al
 104013d:	add    BYTE PTR [rax+0x0],dl
 1040140:	ins    BYTE PTR es:[rdi],dx
 1040141:	add    BYTE PTR [rcx+0x0],ah
 1040144:	je     0x1040146
 1040146:	data16 add BYTE PTR [rdi+0x0],ch
 104014a:	jb     0x104014c
 104014c:	ins    DWORD PTR es:[rdi],dx
 104014d:	add    BYTE PTR [rax],al
 104014f:	add    BYTE PTR [rsi+0x0],cl
 1040152:	push   rsp
 1040153:	add    BYTE PTR [rax],ah
 1040155:	add    BYTE PTR [rax+0x0],bh
 1040158:	add    BYTE PTR ss:[rax+rax*1],dh
 104015c:	add    BYTE PTR [rax],al
 104015e:	add    BYTE PTR [rax],al
 1040160:	mov    edx,0x1004900
 1040165:	add    BYTE PTR [rax+rax*1+0x65],cl
 1040169:	add    BYTE PTR [rdi+0x0],ah
 104016c:	(bad)  
 104016d:	add    BYTE PTR [rax+rax*1+0x54],ch
 1040171:	add    BYTE PTR [rdx+0x0],dh
 1040174:	(bad)  
 1040175:	add    BYTE PTR [rax+rax*1+0x65],ah
 1040179:	add    BYTE PTR [rbp+0x0],ch
 104017c:	(bad)  
 104017d:	add    BYTE PTR [rdx+0x0],dh
 1040180:	imul   eax,DWORD PTR [rax],0x73
 1040183:	add    BYTE PTR [rax],al
 1040185:	add    BYTE PTR [rax],al
 1040187:	add    BYTE PTR [rbp+0x0],cl
 104018a:	imul   eax,DWORD PTR [rax],0x720063
 1040190:	outs   dx,DWORD PTR ds:[rsi]
 1040191:	add    BYTE PTR [rbx+0x0],dh
 1040194:	outs   dx,DWORD PTR ds:[rsi]
 1040195:	add    BYTE PTR [rsi+0x0],ah
 1040198:	je     0x104019a
 104019a:	and    BYTE PTR [rax],al
 104019c:	push   rbx
 104019d:	add    BYTE PTR [rcx+0x0],dl
 10401a0:	rex.WR add BYTE PTR [rax],r12b
 10401a3:	add    BYTE PTR [rbx+0x0],dl
 10401a6:	add    BYTE PTR gs:[rdx+0x0],dh
 10401aa:	jbe    0x10401ac
 10401ac:	add    BYTE PTR gs:[rdx+0x0],dh
 10401b0:	and    BYTE PTR [rax],al
 10401b2:	imul   eax,DWORD PTR [rax],0x200073
 10401b8:	(bad)  
 10401b9:	add    BYTE PTR [rax],ah
 10401bb:	add    BYTE PTR [rdx+0x0],dh
 10401be:	add    BYTE PTR gs:[rdi+0x0],ah
 10401c2:	imul   eax,DWORD PTR [rax],0x740073
 10401c8:	add    BYTE PTR gs:[rdx+0x0],dh
 10401cc:	add    BYTE PTR gs:[rax+rax*1+0x20],ah
 10401d1:	add    BYTE PTR [rax+rax*1+0x72],dh
 10401d5:	add    BYTE PTR [rcx+0x0],ah
 10401d8:	add    BYTE PTR fs:[rbp+0x0],ah
 10401dc:	ins    DWORD PTR es:[rdi],dx
 10401dd:	add    BYTE PTR [rcx+0x0],ah
 10401e0:	jb     0x10401e2
 10401e2:	imul   eax,DWORD PTR [rax],0x20
 10401e5:	add    BYTE PTR [rdi+0x0],ch
 10401e8:	data16 add BYTE PTR [rax],ah
 10401eb:	add    BYTE PTR [rbp+0x0],cl
 10401ee:	imul   eax,DWORD PTR [rax],0x720063
 10401f4:	outs   dx,DWORD PTR ds:[rsi]
 10401f5:	add    BYTE PTR [rbx+0x0],dh
 10401f8:	outs   dx,DWORD PTR ds:[rsi]
 10401f9:	add    BYTE PTR [rsi+0x0],ah
 10401fc:	je     0x10401fe
 10401fe:	and    BYTE PTR [rax],al
 1040200:	rex.XB add BYTE PTR [r15+0x0],bpl
 1040204:	jb     0x1040206
 1040206:	jo     0x1040208
 1040208:	outs   dx,DWORD PTR ds:[rsi]
 1040209:	add    BYTE PTR [rdx+0x0],dh
 104020c:	(bad)  
 104020d:	add    BYTE PTR [rax+rax*1+0x69],dh
 1040211:	add    BYTE PTR [rdi+0x0],ch
 1040214:	outs   dx,BYTE PTR ds:[rsi]
 1040215:	add    BYTE PTR [rsi],ch
 1040217:	add    BYTE PTR [rax],al
 1040219:	add    BYTE PTR [rax],al
 104021b:	add    BYTE PTR [rax],ah
 104021d:	add    BYTE PTR [rax+rax*1],al
 1040220:	add    DWORD PTR [rax],eax
 1040222:	rex.XB add BYTE PTR [r15+0x0],bpl
 1040226:	ins    DWORD PTR es:[rdi],dx
 1040227:	add    BYTE PTR [rbp+0x0],ch
 104022a:	add    BYTE PTR gs:[rsi+0x0],ch
 104022e:	je     0x1040230
 1040230:	jae    0x1040232
 1040232:	add    BYTE PTR [rax],al
 1040234:	push   rbx
 1040235:	add    BYTE PTR [rcx+0x0],dl
 1040238:	rex.WR add BYTE PTR [rax],r8b
 104023b:	add    BYTE PTR [rsi],ah
 104023d:	add    BYTE PTR [rip+0x47000100],al        # 0x48040343
 1040243:	add    BYTE PTR [rdi+0x0],ch
 1040246:	ins    BYTE PTR es:[rdi],dx
 1040247:	add    BYTE PTR [rax+rax*1+0x65],ah
 104024b:	add    BYTE PTR [rsi+0x0],ch
 104024e:	rex.X add BYTE PTR [rcx+0x0],bpl
 1040252:	je     0x1040254
 1040254:	jae    0x1040256
 1040256:	add    BYTE PTR [rax],al
 1040258:	push   rsp
 1040259:	add    BYTE PTR [rdx+0x0],dh
 104025c:	jne    0x104025e
 104025e:	add    BYTE PTR gs:[rax],al
 1040261:	add    BYTE PTR [rax],al
 1040263:	add    BYTE PTR [rax+rax*1+0x16],cl
 1040267:	add    BYTE PTR [rcx],al
 1040269:	add    BYTE PTR [rbx+0x0],al
 104026c:	outs   dx,DWORD PTR ds:[rsi]
 104026d:	add    BYTE PTR [rbp+0x0],ch
 1040270:	jo     0x1040272
 1040272:	(bad)  
 1040273:	add    BYTE PTR [rsi+0x0],ch
 1040276:	jns    0x1040278
 1040278:	rex.WRX add BYTE PTR [rcx+0x0],r12b
 104027c:	ins    DWORD PTR es:[rdi],dx
 104027d:	add    BYTE PTR [rbp+0x0],ah
 1040280:	add    BYTE PTR [rax],al
 1040282:	add    BYTE PTR [rax],al
 1040284:	rex.WRB add BYTE PTR [r9+0x0],r13b
 1040288:	movsxd eax,DWORD PTR [rax]
 104028a:	jb     0x104028c
 104028c:	outs   dx,DWORD PTR ds:[rsi]
 104028d:	add    BYTE PTR [rbx+0x0],dh
 1040290:	outs   dx,DWORD PTR ds:[rsi]
 1040291:	add    BYTE PTR [rsi+0x0],ah
 1040294:	je     0x1040296
 1040296:	and    BYTE PTR [rax],al
 1040298:	rex.XB add BYTE PTR [r15+0x0],bpl
 104029c:	jb     0x104029e
 104029e:	jo     0x10402a0
 10402a0:	outs   dx,DWORD PTR ds:[rsi]
 10402a1:	add    BYTE PTR [rdx+0x0],dh
 10402a4:	(bad)  
 10402a5:	add    BYTE PTR [rax+rax*1+0x69],dh
 10402a9:	add    BYTE PTR [rdi+0x0],ch
 10402ac:	outs   dx,BYTE PTR ds:[rsi]
 10402ad:	add    BYTE PTR [rax],al
 10402af:	add    BYTE PTR [rax+0x0],bl
 10402b2:	sbb    BYTE PTR [rax],al
 10402b4:	add    DWORD PTR [rax],eax
 10402b6:	rex.RX add BYTE PTR [rcx+0x0],r13b
 10402ba:	ins    BYTE PTR es:[rdi],dx
 10402bb:	add    BYTE PTR [rbp+0x0],ah
 10402be:	add    BYTE PTR [rbp+0x0],r12b
 10402c2:	jae    0x10402c4
 10402c4:	movsxd eax,DWORD PTR [rax]
 10402c6:	jb     0x10402c8
 10402c8:	imul   eax,DWORD PTR [rax],0x740070
 10402ce:	imul   eax,DWORD PTR [rax],0x6e006f
 10402d4:	add    BYTE PTR [rax],al
 10402d6:	add    BYTE PTR [rax],al
 10402d8:	push   rbx
 10402d9:	add    BYTE PTR [rcx+0x0],dl
 10402dc:	rex.WR add BYTE PTR [rax],r12b
 10402df:	add    BYTE PTR [rbp+0x0],al
 10402e2:	js     0x10402e4
 10402e4:	je     0x10402e6
 10402e6:	add    BYTE PTR gs:[rdx+0x0],dh
 10402ea:	outs   dx,BYTE PTR ds:[rsi]
 10402eb:	add    BYTE PTR [rcx+0x0],ah
 10402ee:	ins    BYTE PTR es:[rdi],dx
 10402ef:	add    BYTE PTR [rax],ah
 10402f1:	add    BYTE PTR [rbp+0x0],ch
 10402f4:	imul   eax,DWORD PTR [rax],0x69006e
 10402fa:	add    BYTE PTR fs:[rbp+0x0],dh
 10402fe:	ins    DWORD PTR es:[rdi],dx
 10402ff:	add    BYTE PTR [rax+0x0],dh
 1040302:	add    BYTE PTR gs:[rdx+0x0],dh
 1040306:	add    BYTE PTR [rax],al
 1040308:	jl     0x104030a
 104030a:	add    BYTE PTR cs:[rcx],al
 104030d:	add    BYTE PTR [rsi+0x0],al
 1040310:	imul   eax,DWORD PTR [rax],0x65006c
 1040316:	push   rsi
 1040317:	add    BYTE PTR [rbp+0x0],ah
 104031a:	jb     0x104031c
 104031c:	jae    0x104031e
 104031e:	imul   eax,DWORD PTR [rax],0x6e006f
 1040324:	add    BYTE PTR [rax],al
 1040326:	add    BYTE PTR [rax],al
 1040328:	xor    al,BYTE PTR [rax]
 104032a:	xor    BYTE PTR [rax],al
 104032c:	xor    DWORD PTR [rax],eax
 104032e:	xor    DWORD PTR [rax],eax
 1040330:	add    BYTE PTR cs:[rax],dh
 1040333:	add    BYTE PTR [rcx],dh
 1040335:	add    BYTE PTR [rcx],dh
 1040337:	add    BYTE PTR [rax],dh
 1040339:	add    BYTE PTR [rsi],ch
 104033b:	add    BYTE PTR [rdx],dh
 104033d:	add    BYTE PTR [rcx],dh
 104033f:	add    BYTE PTR [rax],dh
 1040341:	add    BYTE PTR [rax],dh
 1040343:	add    BYTE PTR [rsi],ch
 1040345:	add    BYTE PTR [rax],dh
 1040347:	add    BYTE PTR [rsi],dh
 1040349:	add    BYTE PTR [rax],dh
 104034b:	add    BYTE PTR [rax],ah
 104034d:	add    BYTE PTR [rax],ch
 104034f:	add    BYTE PTR [rax],ch
 1040351:	add    BYTE PTR [rbx+0x0],dl
 1040354:	push   rcx
 1040355:	add    BYTE PTR [rax+rax*1+0x31],cl
 1040359:	add    BYTE PTR [rcx],dh
 104035b:	add    BYTE PTR [rdi+0x0],bl
 104035e:	push   rdx
 104035f:	add    BYTE PTR [rax+rax*1+0x4d],dl
 1040363:	add    BYTE PTR [rcx],ch
 1040365:	add    BYTE PTR [rsi],ch
 1040367:	add    BYTE PTR [rcx],dh
 1040369:	add    BYTE PTR [rdx],dh
 104036b:	add    BYTE PTR [rax],dh
 104036d:	add    BYTE PTR [rdx],dh
 104036f:	add    BYTE PTR [rcx],dh
 1040371:	add    BYTE PTR [rax],dh
 1040373:	add    BYTE PTR [rip+0x39003100],ch        # 0x3a043479
 1040379:	add    BYTE PTR [rcx],dh
 104037b:	add    BYTE PTR [rdi],dh
 104037d:	add    BYTE PTR [rax],ah
 104037f:	add    BYTE PTR [rcx],ch
 1040381:	add    BYTE PTR [rax],al
 1040383:	add    BYTE PTR [rax+rax*1],dh
 1040386:	or     al,BYTE PTR [rax]
 1040388:	add    DWORD PTR [rax],eax
 104038a:	rex.WB add BYTE PTR [r14+0x0],bpl
 104038e:	je     0x1040390
 1040390:	add    BYTE PTR gs:[rdx+0x0],dh
 1040394:	outs   dx,BYTE PTR ds:[rsi]
 1040395:	add    BYTE PTR [rcx+0x0],ah
 1040398:	ins    BYTE PTR es:[rdi],dx
 1040399:	add    BYTE PTR [rsi+0x0],cl
 104039c:	(bad)  
 104039d:	add    BYTE PTR [rbp+0x0],ch
 10403a0:	add    BYTE PTR gs:[rax],al
 10403a3:	add    BYTE PTR [rbx+0x0],dl
 10403a6:	push   rcx
 10403a7:	add    BYTE PTR [rax+rax*1+0x44],cl
 10403ab:	add    BYTE PTR [rbp+0x0],dh
 10403ae:	ins    DWORD PTR es:[rdi],dx
 10403af:	add    BYTE PTR [rax+0x0],dh
 10403b2:	add    BYTE PTR gs:[rdx+0x0],dh
 10403b6:	add    BYTE PTR [rax],al
 10403b8:	outs   dx,BYTE PTR ds:[rsi]
 10403b9:	add    BYTE PTR [rip+0x4c000100],ah        # 0x4d0404bf
 10403bf:	add    BYTE PTR [rbp+0x0],ah
 10403c2:	add    BYTE PTR [ecx+0x0],ah
 10403c6:	ins    BYTE PTR es:[rdi],dx
 10403c7:	add    BYTE PTR [rbx+0x0],al
 10403ca:	outs   dx,DWORD PTR ds:[rsi]
 10403cb:	add    BYTE PTR [rax+0x0],dh
 10403ce:	jns    0x10403d0
 10403d0:	jb     0x10403d2
 10403d2:	imul   eax,DWORD PTR [rax],0x680067
 10403d8:	je     0x10403da
 10403da:	add    BYTE PTR [rax],al
 10403dc:	rex.WRB add BYTE PTR [r9+0x0],r13b
 10403e0:	movsxd eax,DWORD PTR [rax]
 10403e2:	jb     0x10403e4
 10403e4:	outs   dx,DWORD PTR ds:[rsi]
 10403e5:	add    BYTE PTR [rbx+0x0],dh
 10403e8:	outs   dx,DWORD PTR ds:[rsi]
 10403e9:	add    BYTE PTR [rsi+0x0],ah
 10403ec:	je     0x10403ee
 10403ee:	and    BYTE PTR [rax],al
 10403f0:	rex.XB add BYTE PTR [r15+0x0],bpl
 10403f4:	jb     0x10403f6
 10403f6:	jo     0x10403f8
 10403f8:	add    BYTE PTR cs:[rax],ah
 10403fb:	add    BYTE PTR [rcx+0x0],al
 10403fe:	ins    BYTE PTR es:[rdi],dx
 10403ff:	add    BYTE PTR [rax+rax*1+0x20],ch
 1040403:	add    BYTE PTR [rdx+0x0],dh
 1040406:	imul   eax,DWORD PTR [rax],0x680067
 104040c:	je     0x104040e
 104040e:	jae    0x1040410
 1040410:	and    BYTE PTR [rax],al
 1040412:	jb     0x1040414
 1040414:	add    BYTE PTR gs:[rbx+0x0],dh
 1040418:	add    BYTE PTR gs:[rdx+0x0],dh
 104041c:	jbe    0x104041e
 104041e:	add    BYTE PTR gs:[rax+rax*1+0x2e],ah
 1040423:	add    BYTE PTR [rax],al
 1040425:	add    BYTE PTR [rax],al
 1040427:	add    BYTE PTR [rax+rax*1+0xe],al
 104042b:	add    BYTE PTR [rcx],al
 104042d:	add    BYTE PTR [rdi+0x0],cl
 1040430:	jb     0x1040432
 1040432:	imul   eax,DWORD PTR [rax],0x690067
 1040438:	outs   dx,BYTE PTR ds:[rsi]
 1040439:	add    BYTE PTR [rcx+0x0],ah
 104043c:	ins    BYTE PTR es:[rdi],dx
 104043d:	add    BYTE PTR [rsi+0x0],al
 1040440:	imul   eax,DWORD PTR [rax],0x65006c
 1040446:	outs   dx,BYTE PTR ds:[rsi]
 1040447:	add    BYTE PTR [rcx+0x0],ah
 104044a:	ins    DWORD PTR es:[rdi],dx
 104044b:	add    BYTE PTR [rbp+0x0],ah
 104044e:	add    BYTE PTR [rax],al
 1040450:	push   rbx
 1040451:	add    BYTE PTR [rcx+0x0],dl
 1040454:	rex.WR add BYTE PTR [rax+rax*1+0x75],r8b
 1040459:	add    BYTE PTR [rbp+0x0],ch
 104045c:	jo     0x104045e
 104045e:	add    BYTE PTR gs:[rdx+0x0],dh
 1040462:	add    BYTE PTR cs:[rbp+0x0],ah
 1040466:	js     0x1040468
 1040468:	add    BYTE PTR gs:[rax],al
 104046b:	add    BYTE PTR [rdx+0x0],cl
 104046e:	adc    eax,0x50000100
 1040473:	add    BYTE PTR [rdx+0x0],dh
 1040476:	outs   dx,DWORD PTR ds:[rsi]
 1040477:	add    BYTE PTR [rax+rax*1+0x75],ah
 104047b:	add    BYTE PTR [rbx+0x0],ah
 104047e:	je     0x1040480
 1040480:	rex.WRX add BYTE PTR [rcx+0x0],r12b
 1040484:	ins    DWORD PTR es:[rdi],dx
 1040485:	add    BYTE PTR [rbp+0x0],ah
 1040488:	add    BYTE PTR [rax],al
 104048a:	add    BYTE PTR [rax],al
 104048c:	rex.WRB add BYTE PTR [r9+0x0],r13b
 1040490:	movsxd eax,DWORD PTR [rax]
 1040492:	jb     0x1040494
 1040494:	outs   dx,DWORD PTR ds:[rsi]
 1040495:	add    BYTE PTR [rbx+0x0],dh
 1040498:	outs   dx,DWORD PTR ds:[rsi]
 1040499:	add    BYTE PTR [rsi+0x0],ah
 104049c:	je     0x104049e
 104049e:	and    BYTE PTR [rax],al
 10404a0:	push   rbx
 10404a1:	add    BYTE PTR [rcx+0x0],dl
 10404a4:	rex.WR add BYTE PTR [rax],r12b
 10404a7:	add    BYTE PTR [rbx+0x0],dl
 10404aa:	add    BYTE PTR gs:[rdx+0x0],dh
 10404ae:	jbe    0x10404b0
 10404b0:	add    BYTE PTR gs:[rdx+0x0],dh
 10404b4:	add    BYTE PTR [rax],al
 10404b6:	add    BYTE PTR [rax],al
 10404b8:	add    BYTE PTR ds:[rip+0x50000100],cl        # 0x510405bf
 10404bf:	add    BYTE PTR [rdx+0x0],dh
 10404c2:	outs   dx,DWORD PTR ds:[rsi]
 10404c3:	add    BYTE PTR [rax+rax*1+0x75],ah
 10404c7:	add    BYTE PTR [rbx+0x0],ah
 10404ca:	je     0x10404cc
 10404cc:	push   rsi
 10404cd:	add    BYTE PTR [rbp+0x0],ah
 10404d0:	jb     0x10404d2
 10404d2:	jae    0x10404d4
 10404d4:	imul   eax,DWORD PTR [rax],0x6e006f
 10404da:	add    BYTE PTR [rax],al
 10404dc:	xor    DWORD PTR [rax],eax
 10404de:	xor    DWORD PTR [rax],eax
 10404e0:	add    BYTE PTR cs:[rax],dh
 10404e3:	add    BYTE PTR [rsi],ch
 10404e5:	add    BYTE PTR [rdx],dh
 10404e7:	add    BYTE PTR [rcx],dh
 10404e9:	add    BYTE PTR [rax],dh
 10404eb:	add    BYTE PTR [rax],dh
 10404ed:	add    BYTE PTR [rsi],ch
 10404ef:	add    BYTE PTR [rsi],dh
 10404f1:	add    BYTE PTR [rax],dh
 10404f3:	add    BYTE PTR [rax],al
 10404f5:	add    BYTE PTR [rax],al
 10404f7:	add    BYTE PTR [rax+rax*1+0x0],al
 10404fb:	add    BYTE PTR [rcx],al
 10404fd:	add    BYTE PTR [rsi+0x0],dl
 1040500:	(bad)  
 1040501:	add    BYTE PTR [rdx+0x0],dh
 1040504:	rex.RX add BYTE PTR [rcx+0x0],r13b
 1040508:	ins    BYTE PTR es:[rdi],dx
 1040509:	add    BYTE PTR [rbp+0x0],ah
 104050c:	rex.WB add BYTE PTR [r14+0x0],bpl
 1040510:	data16 add BYTE PTR [rdi+0x0],ch
 1040514:	add    BYTE PTR [rax],al
 1040516:	add    BYTE PTR [rax],al
 1040518:	and    al,0x0
 104051a:	add    al,0x0
 104051c:	add    BYTE PTR [rax],al
 104051e:	push   rsp
 104051f:	add    BYTE PTR [rdx+0x0],dh
 1040522:	(bad)  
 1040523:	add    BYTE PTR [rsi+0x0],ch
 1040526:	jae    0x1040528
 1040528:	ins    BYTE PTR es:[rdi],dx
 1040529:	add    BYTE PTR [rcx+0x0],ah
 104052c:	je     0x104052e
 104052e:	imul   eax,DWORD PTR [rax],0x6e006f
 1040534:	add    BYTE PTR [rax],al
 1040536:	add    BYTE PTR [rax],al
 1040538:	or     DWORD PTR [rax+rsi*4],eax
 104053b:	add    al,0x3c
 104053d:	(bad)  
 104053e:	jae    0x10405b3
 1040540:	gs ins DWORD PTR es:[rdi],dx
 1040542:	(bad)  
 1040543:	ins    BYTE PTR es:[rdi],dx
 1040544:	jns    0x1040566
 1040546:	js     0x10405b5
 1040548:	ins    BYTE PTR es:[rdi],dx
 1040549:	outs   dx,BYTE PTR ds:[rsi]
 104054a:	jae    0x1040589
 104054c:	and    dh,BYTE PTR [rbp+0x72]
 104054f:	outs   dx,BYTE PTR ds:[rsi]
 1040550:	cmp    dh,BYTE PTR [rbx+0x63]
 1040553:	push   0x73616d65
 1040558:	sub    eax,0x7263696d
 104055d:	outs   dx,DWORD PTR ds:[rsi]
 104055e:	jae    0x10405cf
 1040560:	data16 je 0x1040590
 1040563:	movsxd ebp,DWORD PTR [rdi+0x6d]
 1040566:	cmp    ah,BYTE PTR [rcx+0x73]
 1040569:	ins    DWORD PTR es:[rdi],dx
 104056a:	cs jbe 0x104059e
 104056d:	and    ah,BYTE PTR [rax]
 104056f:	ins    DWORD PTR es:[rdi],dx
 1040570:	(bad)  
 1040571:	outs   dx,BYTE PTR ds:[rsi]
 1040572:	imul   esp,DWORD PTR [rsi+0x65],0x65567473
 1040579:	jb     0x10405ee
 104057b:	imul   ebp,DWORD PTR [rdi+0x6e],0x2e31223d
 1040582:	xor    BYTE PTR [rdx],ah
 1040584:	ds or  eax,0x3c20200a
 104058a:	je     0x10405fe
 104058c:	jne    0x1040601
 104058e:	je     0x10405d9
 1040590:	outs   dx,BYTE PTR ds:[rsi]
 1040591:	outs   dx,WORD PTR ds:[rsi]
 1040593:	and    BYTE PTR [rax+0x6d],bh
 1040596:	ins    BYTE PTR es:[rdi],dx
 1040597:	outs   dx,BYTE PTR ds:[rsi]
 1040598:	jae    0x10405d7
 104059a:	and    dh,BYTE PTR [rbp+0x72]
 104059d:	outs   dx,BYTE PTR ds:[rsi]
 104059e:	cmp    dh,BYTE PTR [rbx+0x63]
 10405a1:	push   0x73616d65
 10405a6:	sub    eax,0x7263696d
 10405ab:	outs   dx,DWORD PTR ds:[rsi]
 10405ac:	jae    0x104061d
 10405ae:	data16 je 0x10405de
 10405b1:	movsxd ebp,DWORD PTR [rdi+0x6d]
 10405b4:	cmp    ah,BYTE PTR [rcx+0x73]
 10405b7:	ins    DWORD PTR es:[rdi],dx
 10405b8:	cs jbe 0x10405ee
 10405bb:	and    bh,BYTE PTR [rsi]
 10405bd:	or     eax,0x2020200a
 10405c2:	and    BYTE PTR [rbx+rsi*2],bh
 10405c5:	movsxd esi,DWORD PTR gs:[rbp+0x72]
 10405c9:	imul   esi,DWORD PTR [rcx+rdi*2+0x3e],0x20200a0d
 10405d1:	and    BYTE PTR [rax],ah
 10405d3:	and    BYTE PTR [rax],ah
 10405d5:	cmp    al,0x72
 10405d7:	gs jno 0x104064f
 10405da:	gs jae 0x1040651
 10405dd:	gs fs push rax
 10405e0:	jb     0x104064b
 10405e2:	jbe    0x104064d
 10405e4:	ins    BYTE PTR es:[rdi],dx
 10405e5:	gs addr32 gs jae 0x1040628
 10405ea:	or     eax,0x2020200a
 10405ef:	and    BYTE PTR [rax],ah
 10405f1:	and    BYTE PTR [rax],ah
 10405f3:	and    BYTE PTR [rdx+rsi*2],bh
 10405f6:	gs jno 0x104066e
 10405f9:	gs jae 0x1040670
 10405fc:	gs fs rex.RB js 0x1040666
 1040601:	movsxd esi,DWORD PTR [rbp+0x74]
 1040604:	imul   ebp,DWORD PTR [rdi+0x6e],0x6576654c
 104060b:	ins    BYTE PTR es:[rdi],dx
 104060c:	and    BYTE PTR [rbp+riz*2+0x76],ch
 1040610:	gs ins BYTE PTR es:[rdi],dx
 1040612:	cmp    eax,0x49736122
 1040617:	outs   dx,BYTE PTR ds:[rsi]
 1040618:	jbe    0x1040689
 104061a:	imul   esp,DWORD PTR [rbp+0x72],0x22
 104061e:	and    BYTE PTR [rbp+0x69],dh
 1040621:	movsxd esp,DWORD PTR [r11+0x65]
 1040625:	jae    0x104069a
 1040627:	cmp    eax,0x6c616622
 104062c:	jae    0x1040693
 104062e:	and    bh,BYTE PTR [rsi]
 1040630:	cmp    al,0x2f
 1040632:	jb     0x1040699
 1040634:	jno    0x10406ab
 1040636:	gs jae 0x10406ad
 1040639:	gs fs rex.RB js 0x10406a3
 104063e:	movsxd esi,DWORD PTR [rbp+0x74]
 1040641:	imul   ebp,DWORD PTR [rdi+0x6e],0x6576654c
 1040648:	ins    BYTE PTR es:[rdi],dx
 1040649:	ds or  eax,0x2020200a
 104064f:	and    BYTE PTR [rax],ah
 1040651:	and    BYTE PTR [rdi+rbp*1],bh
 1040654:	jb     0x10406bb
 1040656:	jno    0x10406cd
 1040658:	gs jae 0x10406cf
 104065b:	gs fs push rax
 104065e:	jb     0x10406c9
 1040660:	jbe    0x10406cb
 1040662:	ins    BYTE PTR es:[rdi],dx
 1040663:	gs addr32 gs jae 0x10406a6
 1040668:	or     eax,0x2020200a
 104066d:	and    BYTE PTR [rdi+rbp*1],bh
 1040670:	jae    0x10406d7
 1040672:	movsxd esi,DWORD PTR [rbp+0x72]
 1040675:	imul   esi,DWORD PTR [rcx+rdi*2+0x3e],0x20200a0d
 104067d:	cmp    al,0x2f
 104067f:	je     0x10406f3
 1040681:	jne    0x10406f6
 1040683:	je     0x10406ce
 1040685:	outs   dx,BYTE PTR ds:[rsi]
 1040686:	outs   dx,WORD PTR ds:[rsi]
 1040688:	ds or  eax,0x612f3c0a
 104068e:	jae    0x1040703
 1040690:	gs ins DWORD PTR es:[rdi],dx
 1040692:	(bad)  
 1040693:	ins    BYTE PTR es:[rdi],dx
 1040694:	jns    0x10406d4
 1040696:	push   rax
 1040697:	rex.B

Disassembly of section .reloc:

0000000001041000 <.reloc>:
 1041000:	add    BYTE PTR [rax],dl
 1041002:	add    BYTE PTR [rax],al
 1041004:	adc    al,0x0
 1041006:	add    BYTE PTR [rax],al
 1041008:	cmp    BYTE PTR [rbp-0x5ab75ac0],ah
 104100e:	push   rax
 104100f:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
 1041010:	push   0xa570a5
 1041015:	(bad)  
 1041016:	add    BYTE PTR [rax],al
 1041018:	or     al,0x0
 104101a:	add    BYTE PTR [rax],al
 104101c:	js     0x1040fca
 104101e:	sub    BYTE PTR [rax+rax*1+0x44000170],0x0
 1041026:	add    BYTE PTR [rax],al
 1041028:	or     BYTE PTR [rcx-0x5ee75ef0],ah
 104102e:	and    BYTE PTR [rcx-0x5ecf5ed8],ah
 1041034:	cmp    BYTE PTR [rcx-0x5eb75ec0],ah
 104103a:	push   rax
 104103b:	movabs eax,ds:0xa170a168a160a158
 1041044:	js     0x1040fe7
 1041046:	and    BYTE PTR [rcx-0x5e6f5e78],0xc0
 104104d:	movabs eax,ds:0xa1f8a1f0a1e0a1d0
 1041056:	add    BYTE PTR [rdx-0x5de75df8],ah
 104105c:	and    BYTE PTR [rdx-0x5dcf5dd8],ah
 1041062:	cmp    BYTE PTR [rdx+0x0],ah
	...
