
c83df1e3e21b36046c453cc3cf9a0cbe3539558ce8bc8dd0b7ebabf5b7634d5c.exe:     file format pei-x86-64


Disassembly of section .text:

0000000000401000 <.text>:
  401000:	ret    
  401001:	nop    DWORD PTR [rax+rax*1+0x0]
  401006:	nop    WORD PTR cs:[rax+rax*1+0x0]
  401010:	sub    rsp,0x28
  401014:	mov    rax,QWORD PTR [rip+0xa495]        # 0x40b4b0
  40101b:	xor    edx,edx
  40101d:	mov    DWORD PTR [rax],0x1
  401023:	mov    rax,QWORD PTR [rip+0xa496]        # 0x40b4c0
  40102a:	mov    DWORD PTR [rax],0x1
  401030:	mov    rax,QWORD PTR [rip+0xa499]        # 0x40b4d0
  401037:	mov    DWORD PTR [rax],0x1
  40103d:	mov    rax,QWORD PTR [rip+0xa45c]        # 0x40b4a0
  401044:	mov    DWORD PTR [rax],0x1
  40104a:	mov    rax,QWORD PTR [rip+0xa30f]        # 0x40b360
  401051:	cmp    WORD PTR [rax],0x5a4d
  401056:	je     0x4010d0
  401058:	mov    rax,QWORD PTR [rip+0xa431]        # 0x40b490
  40105f:	mov    DWORD PTR [rip+0xcfa3],edx        # 0x40e008
  401065:	mov    eax,DWORD PTR [rax]
  401067:	test   eax,eax
  401069:	je     0x4010c2
  40106b:	mov    ecx,0x2
  401070:	call   0x407110
  401075:	mov    rcx,0xffffffffffffffff
  40107c:	call   0x405de0
  401081:	mov    rdx,QWORD PTR [rip+0xa368]        # 0x40b3f0
  401088:	mov    QWORD PTR [rdx],rax
  40108b:	mov    rdx,QWORD PTR [rip+0xa34e]        # 0x40b3e0
  401092:	mov    QWORD PTR [rdx],rax
  401095:	mov    rax,QWORD PTR [rip+0xa3b4]        # 0x40b450
  40109c:	mov    edx,DWORD PTR [rax]
  40109e:	mov    rax,QWORD PTR [rip+0xa2eb]        # 0x40b390
  4010a5:	mov    rax,QWORD PTR [rax]
  4010a8:	mov    DWORD PTR [rax],edx
  4010aa:	call   0x4059c0
  4010af:	mov    rax,QWORD PTR [rip+0xa25a]        # 0x40b310
  4010b6:	cmp    DWORD PTR [rax],0x1
  4010b9:	je     0x401120
  4010bb:	xor    eax,eax
  4010bd:	add    rsp,0x28
  4010c1:	ret    
  4010c2:	mov    ecx,0x1
  4010c7:	call   0x407110
  4010cc:	jmp    0x401075
  4010ce:	xchg   ax,ax
  4010d0:	movsxd rcx,DWORD PTR [rax+0x3c]
  4010d4:	add    rax,rcx
  4010d7:	cmp    DWORD PTR [rax],0x4550
  4010dd:	jne    0x401058
  4010e3:	movzx  ecx,WORD PTR [rax+0x18]
  4010e7:	cmp    cx,0x10b
  4010ec:	je     0x401133
  4010ee:	cmp    cx,0x20b
  4010f3:	jne    0x401058
  4010f9:	cmp    DWORD PTR [rax+0x84],0xe
  401100:	jbe    0x401058
  401106:	mov    ecx,DWORD PTR [rax+0xf8]
  40110c:	xor    edx,edx
  40110e:	test   ecx,ecx
  401110:	setne  dl
  401113:	jmp    0x401058
  401118:	nop    DWORD PTR [rax+rax*1+0x0]
  401120:	lea    rcx,[rip+0x4b99]        # 0x405cc0
  401127:	call   0x405cb0
  40112c:	xor    eax,eax
  40112e:	add    rsp,0x28
  401132:	ret    
  401133:	cmp    DWORD PTR [rax+0x74],0xe
  401137:	jbe    0x401058
  40113d:	mov    r8d,DWORD PTR [rax+0xe8]
  401144:	xor    edx,edx
  401146:	test   r8d,r8d
  401149:	setne  dl
  40114c:	jmp    0x401058
  401151:	nop    DWORD PTR [rax+rax*1+0x0]
  401156:	nop    WORD PTR cs:[rax+rax*1+0x0]
  401160:	sub    rsp,0x38
  401164:	mov    rax,QWORD PTR [rip+0xa315]        # 0x40b480
  40116b:	lea    r8,[rip+0xcea6]        # 0x40e018
  401172:	lea    rdx,[rip+0xcea7]        # 0x40e020
  401179:	lea    rcx,[rip+0xcea8]        # 0x40e028
  401180:	mov    eax,DWORD PTR [rax]
  401182:	mov    DWORD PTR [rip+0xce78],eax        # 0x40e000
  401188:	lea    rax,[rip+0xce71]        # 0x40e000
  40118f:	mov    QWORD PTR [rsp+0x20],rax
  401194:	mov    rax,QWORD PTR [rip+0xa2a5]        # 0x40b440
  40119b:	mov    r9d,DWORD PTR [rax]
  40119e:	call   0x407128
  4011a3:	mov    DWORD PTR [rip+0xce67],eax        # 0x40e010
  4011a9:	add    rsp,0x38
  4011ad:	ret    
  4011ae:	xchg   ax,ax
  4011b0:	push   r13
  4011b2:	push   r12
  4011b4:	push   rbp
  4011b5:	push   rdi
  4011b6:	push   rsi
  4011b7:	push   rbx
  4011b8:	sub    rsp,0x98
  4011bf:	mov    rbp,QWORD PTR [rip+0xa2ca]        # 0x40b490
  4011c6:	xor    eax,eax
  4011c8:	mov    ecx,0xd
  4011cd:	lea    rdx,[rsp+0x20]
  4011d2:	mov    r9d,DWORD PTR [rbp+0x0]
  4011d6:	mov    rdi,rdx
  4011d9:	rep stos QWORD PTR es:[rdi],rax
  4011dc:	test   r9d,r9d
  4011df:	jne    0x401490
  4011e5:	mov    rax,QWORD PTR gs:0x30
  4011ee:	mov    rbx,QWORD PTR [rip+0xa1cb]        # 0x40b3c0
  4011f5:	mov    rsi,QWORD PTR [rax+0x8]
  4011f9:	xor    edi,edi
  4011fb:	mov    r12,QWORD PTR [rip+0xe31e]        # 0x40f520
  401202:	jmp    0x401215
  401204:	cmp    rsi,rax
  401207:	je     0x401430
  40120d:	mov    ecx,0x3e8
  401212:	call   r12
  401215:	mov    rax,rdi
  401218:	lock cmpxchg QWORD PTR [rbx],rsi
  40121d:	test   rax,rax
  401220:	jne    0x401204
  401222:	mov    rsi,QWORD PTR [rip+0xa1a7]        # 0x40b3d0
  401229:	xor    edi,edi
  40122b:	mov    eax,DWORD PTR [rsi]
  40122d:	cmp    eax,0x1
  401230:	je     0x401447
  401236:	mov    eax,DWORD PTR [rsi]
  401238:	test   eax,eax
  40123a:	je     0x4014a0
  401240:	mov    DWORD PTR [rip+0xcdba],0x1        # 0x40e004
  40124a:	mov    eax,DWORD PTR [rsi]
  40124c:	cmp    eax,0x1
  40124f:	je     0x40145c
  401255:	test   edi,edi
  401257:	je     0x401480
  40125d:	mov    rax,QWORD PTR [rip+0xa0ec]        # 0x40b350
  401264:	mov    rax,QWORD PTR [rax]
  401267:	test   rax,rax
  40126a:	je     0x401278
  40126c:	xor    r8d,r8d
  40126f:	mov    edx,0x2
  401274:	xor    ecx,ecx
  401276:	call   rax
  401278:	call   0x405fd0
  40127d:	lea    rcx,[rip+0x52ec]        # 0x406570
  401284:	call   QWORD PTR [rip+0xe28e]        # 0x40f518
  40128a:	mov    rdx,QWORD PTR [rip+0xa11f]        # 0x40b3b0
  401291:	mov    QWORD PTR [rdx],rax
  401294:	call   0x406480
  401299:	lea    rcx,[rip+0xfffffffffffffd60]        # 0x401000
  4012a0:	call   0x407150
  4012a5:	call   0x405dc0
  4012aa:	mov    rax,QWORD PTR [rip+0xa0af]        # 0x40b360
  4012b1:	mov    QWORD PTR [rip+0xdc10],rax        # 0x40eec8
  4012b8:	mov    rax,QWORD PTR [rip+0xa0c1]        # 0x40b380
  4012bf:	mov    rax,QWORD PTR [rax]
  4012c2:	mov    rax,QWORD PTR [rax]
  4012c5:	test   rax,rax
  4012c8:	je     0x401317
  4012ca:	xor    ecx,ecx
  4012cc:	jmp    0x4012e2
  4012ce:	xchg   ax,ax
  4012d0:	test   dl,dl
  4012d2:	je     0x401310
  4012d4:	and    ecx,0x1
  4012d7:	je     0x401304
  4012d9:	mov    ecx,0x1
  4012de:	add    rax,0x1
  4012e2:	movzx  edx,BYTE PTR [rax]
  4012e5:	cmp    dl,0x20
  4012e8:	jle    0x4012d0
  4012ea:	mov    r8d,ecx
  4012ed:	xor    r8d,0x1
  4012f1:	cmp    dl,0x22
  4012f4:	cmove  ecx,r8d
  4012f8:	jmp    0x4012de
  4012fa:	nop    WORD PTR [rax+rax*1+0x0]
  401300:	test   dl,dl
  401302:	je     0x401310
  401304:	add    rax,0x1
  401308:	movzx  edx,BYTE PTR [rax]
  40130b:	cmp    dl,0x20
  40130e:	jle    0x401300
  401310:	mov    QWORD PTR [rip+0xdba9],rax        # 0x40eec0
  401317:	mov    r8d,DWORD PTR [rbp+0x0]
  40131b:	test   r8d,r8d
  40131e:	je     0x401336
  401320:	test   BYTE PTR [rsp+0x5c],0x1
  401325:	mov    eax,0xa
  40132a:	jne    0x401421
  401330:	mov    DWORD PTR [rip+0x6cca],eax        # 0x408000
  401336:	mov    r12d,DWORD PTR [rip+0xcceb]        # 0x40e028
  40133d:	lea    r13d,[r12+0x1]
  401342:	movsxd r13,r13d
  401345:	shl    r13,0x3
  401349:	mov    rcx,r13
  40134c:	call   0x407060
  401351:	test   r12d,r12d
  401354:	mov    rbp,rax
  401357:	mov    rdi,QWORD PTR [rip+0xccc2]        # 0x40e020
  40135e:	jle    0x4014be
  401364:	xor    ebx,ebx
  401366:	nop    WORD PTR cs:[rax+rax*1+0x0]
  401370:	mov    rcx,QWORD PTR [rdi+rbx*8]
  401374:	call   0x406ff8
  401379:	lea    rsi,[rax+0x1]
  40137d:	mov    rcx,rsi
  401380:	call   0x407060
  401385:	mov    QWORD PTR [rbp+rbx*8+0x0],rax
  40138a:	mov    rdx,QWORD PTR [rdi+rbx*8]
  40138e:	mov    rcx,rax
  401391:	mov    r8,rsi
  401394:	add    rbx,0x1
  401398:	call   0x407050
  40139d:	cmp    r12d,ebx
  4013a0:	jg     0x401370
  4013a2:	sub    r13,0x8
  4013a6:	mov    QWORD PTR [rbp+r13*1+0x0],0x0
  4013af:	mov    QWORD PTR [rip+0xcc6a],rbp        # 0x40e020
  4013b6:	call   0x405990
  4013bb:	mov    rax,QWORD PTR [rip+0x9fae]        # 0x40b370
  4013c2:	mov    rdx,QWORD PTR [rip+0xcc4f]        # 0x40e018
  4013c9:	mov    ecx,DWORD PTR [rip+0xcc59]        # 0x40e028
  4013cf:	mov    rax,QWORD PTR [rax]
  4013d2:	mov    QWORD PTR [rax],rdx
  4013d5:	mov    r8,QWORD PTR [rip+0xcc3c]        # 0x40e018
  4013dc:	mov    rdx,QWORD PTR [rip+0xcc3d]        # 0x40e020
  4013e3:	call   0x407300
  4013e8:	mov    ecx,DWORD PTR [rip+0xcc1a]        # 0x40e008
  4013ee:	mov    DWORD PTR [rip+0xcc18],eax        # 0x40e00c
  4013f4:	test   ecx,ecx
  4013f6:	je     0x4014c6
  4013fc:	mov    edx,DWORD PTR [rip+0xcc02]        # 0x40e004
  401402:	test   edx,edx
  401404:	jne    0x401411
  401406:	call   0x4070f8
  40140b:	mov    eax,DWORD PTR [rip+0xcbfb]        # 0x40e00c
  401411:	add    rsp,0x98
  401418:	pop    rbx
  401419:	pop    rsi
  40141a:	pop    rdi
  40141b:	pop    rbp
  40141c:	pop    r12
  40141e:	pop    r13
  401420:	ret    
  401421:	movzx  eax,WORD PTR [rsp+0x60]
  401426:	jmp    0x401330
  40142b:	nop    DWORD PTR [rax+rax*1+0x0]
  401430:	mov    rsi,QWORD PTR [rip+0x9f99]        # 0x40b3d0
  401437:	mov    edi,0x1
  40143c:	mov    eax,DWORD PTR [rsi]
  40143e:	cmp    eax,0x1
  401441:	jne    0x401236
  401447:	mov    ecx,0x1f
  40144c:	call   0x407100
  401451:	mov    eax,DWORD PTR [rsi]
  401453:	cmp    eax,0x1
  401456:	jne    0x401255
  40145c:	mov    rdx,QWORD PTR [rip+0x9fad]        # 0x40b410
  401463:	mov    rcx,QWORD PTR [rip+0x9f96]        # 0x40b400
  40146a:	call   0x4070e8
  40146f:	test   edi,edi
  401471:	mov    DWORD PTR [rsi],0x2
  401477:	jne    0x40125d
  40147d:	nop    DWORD PTR [rax]
  401480:	xor    eax,eax
  401482:	xchg   QWORD PTR [rbx],rax
  401485:	jmp    0x40125d
  40148a:	nop    WORD PTR [rax+rax*1+0x0]
  401490:	mov    rcx,rdx
  401493:	call   QWORD PTR [rip+0xdff7]        # 0x40f490
  401499:	jmp    0x4011e5
  40149e:	xchg   ax,ax
  4014a0:	mov    rdx,QWORD PTR [rip+0x9f89]        # 0x40b430
  4014a7:	mov    rcx,QWORD PTR [rip+0x9f72]        # 0x40b420
  4014ae:	mov    DWORD PTR [rsi],0x1
  4014b4:	call   0x4070e8
  4014b9:	jmp    0x40124a
  4014be:	xor    r13d,r13d
  4014c1:	jmp    0x4013a6
  4014c6:	mov    ecx,eax
  4014c8:	call   0x4070a8
  4014cd:	nop
  4014ce:	xchg   ax,ax
  4014d0:	sub    rsp,0x28
  4014d4:	mov    rax,QWORD PTR [rip+0x9fb5]        # 0x40b490
  4014db:	mov    DWORD PTR [rax],0x1
  4014e1:	call   0x4059d0
  4014e6:	call   0x4011b0
  4014eb:	nop
  4014ec:	nop
  4014ed:	add    rsp,0x28
  4014f1:	ret    
  4014f2:	nop    DWORD PTR [rax+0x0]
  4014f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  401500:	sub    rsp,0x28
  401504:	mov    rax,QWORD PTR [rip+0x9f85]        # 0x40b490
  40150b:	mov    DWORD PTR [rax],0x0
  401511:	call   0x4059d0
  401516:	call   0x4011b0
  40151b:	nop
  40151c:	nop
  40151d:	add    rsp,0x28
  401521:	ret    
  401522:	nop
  401523:	nop
  401524:	nop
  401525:	nop
  401526:	nop
  401527:	nop
  401528:	nop
  401529:	nop
  40152a:	nop
  40152b:	nop
  40152c:	nop
  40152d:	nop
  40152e:	nop
  40152f:	nop
  401530:	sub    rsp,0x28
  401534:	test   cl,cl
  401536:	je     0x401544
  401538:	lea    rcx,[rip+0x7ac1]        # 0x409000
  40153f:	call   0x404110
  401544:	lea    rcx,[rip+0x7ac0]        # 0x40900b
  40154b:	add    rsp,0x28
  40154f:	jmp    0x404110
  401554:	xchg   ax,ax
  401556:	nop    WORD PTR cs:[rax+rax*1+0x0]
  401560:	sub    rsp,0x28
  401564:	test   cl,cl
  401566:	je     0x401574
  401568:	lea    rcx,[rip+0x7aae]        # 0x40901d
  40156f:	call   0x404110
  401574:	lea    rdx,[rip+0x7aad]        # 0x409028
  40157b:	lea    rcx,[rip+0x7adf]        # 0x409061
  401582:	add    rsp,0x28
  401586:	jmp    0x404110
  40158b:	nop    DWORD PTR [rax+rax*1+0x0]
  401590:	sub    rsp,0x28
  401594:	test   cl,cl
  401596:	je     0x4015a4
  401598:	lea    rcx,[rip+0x7ac6]        # 0x409065
  40159f:	call   0x404110
  4015a4:	lea    rdx,[rip+0x7ac8]        # 0x409073
  4015ab:	lea    rcx,[rip+0x7aaf]        # 0x409061
  4015b2:	add    rsp,0x28
  4015b6:	jmp    0x404110
  4015bb:	nop    DWORD PTR [rax+rax*1+0x0]
  4015c0:	sub    rsp,0x28
  4015c4:	test   cl,cl
  4015c6:	je     0x4015d4
  4015c8:	lea    rcx,[rip+0x7aa5]        # 0x409074
  4015cf:	call   0x404110
  4015d4:	lea    rdx,[rip+0x7a98]        # 0x409073
  4015db:	lea    rcx,[rip+0x7a7f]        # 0x409061
  4015e2:	add    rsp,0x28
  4015e6:	jmp    0x404110
  4015eb:	nop    DWORD PTR [rax+rax*1+0x0]
  4015f0:	sub    rsp,0x28
  4015f4:	test   cl,cl
  4015f6:	je     0x401604
  4015f8:	lea    rcx,[rip+0x7a83]        # 0x409082
  4015ff:	call   0x404110
  401604:	lea    rdx,[rip+0x7a85]        # 0x409090
  40160b:	lea    rcx,[rip+0x7a4f]        # 0x409061
  401612:	add    rsp,0x28
  401616:	jmp    0x404110
  40161b:	nop    DWORD PTR [rax+rax*1+0x0]
  401620:	sub    rsp,0x28
  401624:	test   cl,cl
  401626:	je     0x401634
  401628:	lea    rcx,[rip+0x7af3]        # 0x409122
  40162f:	call   0x404110
  401634:	lea    rdx,[rip+0x7a38]        # 0x409073
  40163b:	lea    rcx,[rip+0x7a1f]        # 0x409061
  401642:	add    rsp,0x28
  401646:	jmp    0x404110
  40164b:	nop    DWORD PTR [rax+rax*1+0x0]
  401650:	sub    rsp,0x28
  401654:	test   cl,cl
  401656:	je     0x401664
  401658:	lea    rcx,[rip+0x7ad0]        # 0x40912f
  40165f:	call   0x404110
  401664:	lea    rdx,[rip+0x7ad5]        # 0x409140
  40166b:	lea    rcx,[rip+0x79ef]        # 0x409061
  401672:	add    rsp,0x28
  401676:	jmp    0x404110
  40167b:	nop    DWORD PTR [rax+rax*1+0x0]
  401680:	sub    rsp,0x28
  401684:	test   cl,cl
  401686:	je     0x401694
  401688:	lea    rcx,[rip+0x7b73]        # 0x409202
  40168f:	call   0x404110
  401694:	lea    rdx,[rip+0x7b75]        # 0x409210
  40169b:	lea    rcx,[rip+0x79bf]        # 0x409061
  4016a2:	add    rsp,0x28
  4016a6:	jmp    0x404110
  4016ab:	nop    DWORD PTR [rax+rax*1+0x0]
  4016b0:	sub    rsp,0x28
  4016b4:	test   cl,cl
  4016b6:	je     0x4016c4
  4016b8:	lea    rcx,[rip+0x7b9d]        # 0x40925c
  4016bf:	call   0x404110
  4016c4:	lea    rdx,[rip+0x7b97]        # 0x409262
  4016cb:	lea    rcx,[rip+0x798f]        # 0x409061
  4016d2:	add    rsp,0x28
  4016d6:	jmp    0x404110
  4016db:	nop    DWORD PTR [rax+rax*1+0x0]
  4016e0:	sub    rsp,0x28
  4016e4:	test   cl,cl
  4016e6:	je     0x4016f4
  4016e8:	lea    rcx,[rip+0x7b8a]        # 0x409279
  4016ef:	call   0x404110
  4016f4:	lea    rdx,[rip+0x7b8d]        # 0x409288
  4016fb:	lea    rcx,[rip+0x795f]        # 0x409061
  401702:	add    rsp,0x28
  401706:	jmp    0x404110
  40170b:	nop    DWORD PTR [rax+rax*1+0x0]
  401710:	push   rbx
  401711:	sub    rsp,0x20
  401715:	mov    r8d,0x3ff
  40171b:	mov    rbx,rcx
  40171e:	mov    rdx,rcx
  401721:	call   QWORD PTR [rip+0xdd61]        # 0x40f488
  401727:	movzx  eax,BYTE PTR [rbx]
  40172a:	test   al,al
  40172c:	jne    0x40173b
  40172e:	jmp    0x40174d
  401730:	add    rbx,0x1
  401734:	movzx  eax,BYTE PTR [rbx]
  401737:	test   al,al
  401739:	je     0x40174d
  40173b:	cmp    al,0x5c
  40173d:	jne    0x401730
  40173f:	mov    BYTE PTR [rbx],0x2f
  401742:	add    rbx,0x1
  401746:	movzx  eax,BYTE PTR [rbx]
  401749:	test   al,al
  40174b:	jne    0x40173b
  40174d:	add    rsp,0x20
  401751:	pop    rbx
  401752:	ret    
  401753:	nop    DWORD PTR [rax]
  401756:	nop    WORD PTR cs:[rax+rax*1+0x0]
  401760:	push   rbx
  401761:	sub    rsp,0x420
  401768:	test   cl,cl
  40176a:	je     0x401778
  40176c:	lea    rcx,[rip+0x7dbb]        # 0x40952e
  401773:	call   0x404110
  401778:	lea    rbx,[rsp+0x20]
  40177d:	lea    rcx,[rip+0xc8bc]        # 0x40e040
  401784:	mov    rdx,rbx
  401787:	call   0x4053c0
  40178c:	lea    rdx,[rip+0x7da3]        # 0x409536
  401793:	mov    r8d,0x400
  401799:	mov    rcx,rbx
  40179c:	call   0x402cc0
  4017a1:	mov    rcx,rbx
  4017a4:	call   0x401710
  4017a9:	lea    rcx,[rip+0x78b1]        # 0x409061
  4017b0:	mov    rdx,rbx
  4017b3:	call   0x404110
  4017b8:	nop
  4017b9:	add    rsp,0x420
  4017c0:	pop    rbx
  4017c1:	ret    
  4017c2:	nop    DWORD PTR [rax+0x0]
  4017c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4017d0:	push   rbx
  4017d1:	sub    rsp,0x420
  4017d8:	test   cl,cl
  4017da:	je     0x4017e8
  4017dc:	lea    rcx,[rip+0x7d6f]        # 0x409552
  4017e3:	call   0x404110
  4017e8:	lea    rbx,[rsp+0x20]
  4017ed:	lea    rcx,[rip+0xc84c]        # 0x40e040
  4017f4:	mov    rdx,rbx
  4017f7:	call   0x4053c0
  4017fc:	mov    rcx,rbx
  4017ff:	call   0x401710
  401804:	lea    rcx,[rip+0x7856]        # 0x409061
  40180b:	mov    rdx,rbx
  40180e:	call   0x404110
  401813:	nop
  401814:	add    rsp,0x420
  40181b:	pop    rbx
  40181c:	ret    
  40181d:	nop    DWORD PTR [rax]
  401820:	push   rbx
  401821:	sub    rsp,0x420
  401828:	test   cl,cl
  40182a:	je     0x401838
  40182c:	lea    rcx,[rip+0x7d2c]        # 0x40955f
  401833:	call   0x404110
  401838:	lea    rbx,[rsp+0x20]
  40183d:	lea    rcx,[rip+0xc7fc]        # 0x40e040
  401844:	mov    rdx,rbx
  401847:	call   0x405320
  40184c:	mov    rcx,rbx
  40184f:	call   0x401710
  401854:	lea    rcx,[rip+0x7806]        # 0x409061
  40185b:	mov    rdx,rbx
  40185e:	call   0x404110
  401863:	nop
  401864:	add    rsp,0x420
  40186b:	pop    rbx
  40186c:	ret    
  40186d:	nop    DWORD PTR [rax]
  401870:	push   rbx
  401871:	sub    rsp,0x420
  401878:	test   cl,cl
  40187a:	je     0x401888
  40187c:	lea    rcx,[rip+0x7cea]        # 0x40956d
  401883:	call   0x404110
  401888:	lea    rbx,[rsp+0x20]
  40188d:	lea    rcx,[rip+0xc7ac]        # 0x40e040
  401894:	mov    rdx,rbx
  401897:	call   0x405300
  40189c:	mov    rcx,rbx
  40189f:	call   0x401710
  4018a4:	lea    rcx,[rip+0x77b6]        # 0x409061
  4018ab:	mov    rdx,rbx
  4018ae:	call   0x404110
  4018b3:	nop
  4018b4:	add    rsp,0x420
  4018bb:	pop    rbx
  4018bc:	ret    
  4018bd:	nop    DWORD PTR [rax]
  4018c0:	push   rbx
  4018c1:	sub    rsp,0x420
  4018c8:	test   cl,cl
  4018ca:	je     0x4018d8
  4018cc:	lea    rcx,[rip+0x7ca6]        # 0x409579
  4018d3:	call   0x404110
  4018d8:	lea    rbx,[rsp+0x20]
  4018dd:	lea    rcx,[rip+0xc75c]        # 0x40e040
  4018e4:	mov    rdx,rbx
  4018e7:	call   0x405440
  4018ec:	mov    rcx,rbx
  4018ef:	call   0x401710
  4018f4:	lea    rcx,[rip+0x7766]        # 0x409061
  4018fb:	mov    rdx,rbx
  4018fe:	call   0x404110
  401903:	nop
  401904:	add    rsp,0x420
  40190b:	pop    rbx
  40190c:	ret    
  40190d:	nop    DWORD PTR [rax]
  401910:	push   rbx
  401911:	sub    rsp,0x420
  401918:	test   cl,cl
  40191a:	je     0x401928
  40191c:	lea    rcx,[rip+0x7c60]        # 0x409583
  401923:	call   0x404110
  401928:	lea    rbx,[rsp+0x20]
  40192d:	lea    rcx,[rip+0xc70c]        # 0x40e040
  401934:	mov    rdx,rbx
  401937:	call   0x4053e0
  40193c:	mov    rcx,rbx
  40193f:	call   0x401710
  401944:	lea    rcx,[rip+0x7716]        # 0x409061
  40194b:	mov    rdx,rbx
  40194e:	call   0x404110
  401953:	nop
  401954:	add    rsp,0x420
  40195b:	pop    rbx
  40195c:	ret    
  40195d:	nop    DWORD PTR [rax]
  401960:	push   rbx
  401961:	sub    rsp,0x420
  401968:	test   cl,cl
  40196a:	je     0x401978
  40196c:	lea    rcx,[rip+0x7c1d]        # 0x409590
  401973:	call   0x404110
  401978:	lea    rbx,[rsp+0x20]
  40197d:	lea    rcx,[rip+0xc6bc]        # 0x40e040
  401984:	mov    rdx,rbx
  401987:	call   0x4053a0
  40198c:	mov    rcx,rbx
  40198f:	call   0x401710
  401994:	lea    rcx,[rip+0x76c6]        # 0x409061
  40199b:	mov    rdx,rbx
  40199e:	call   0x404110
  4019a3:	nop
  4019a4:	add    rsp,0x420
  4019ab:	pop    rbx
  4019ac:	ret    
  4019ad:	nop    DWORD PTR [rax]
  4019b0:	push   rbx
  4019b1:	sub    rsp,0x420
  4019b8:	test   cl,cl
  4019ba:	je     0x4019c8
  4019bc:	lea    rcx,[rip+0x7bd7]        # 0x40959a
  4019c3:	call   0x404110
  4019c8:	lea    rbx,[rsp+0x20]
  4019cd:	lea    rcx,[rip+0xc66c]        # 0x40e040
  4019d4:	mov    rdx,rbx
  4019d7:	call   0x405380
  4019dc:	mov    rcx,rbx
  4019df:	call   0x401710
  4019e4:	lea    rcx,[rip+0x7676]        # 0x409061
  4019eb:	mov    rdx,rbx
  4019ee:	call   0x404110
  4019f3:	nop
  4019f4:	add    rsp,0x420
  4019fb:	pop    rbx
  4019fc:	ret    
  4019fd:	nop    DWORD PTR [rax]
  401a00:	push   rbx
  401a01:	sub    rsp,0x420
  401a08:	test   cl,cl
  401a0a:	je     0x401a18
  401a0c:	lea    rcx,[rip+0x7b9c]        # 0x4095af
  401a13:	call   0x404110
  401a18:	lea    rbx,[rsp+0x20]
  401a1d:	lea    rcx,[rip+0xc61c]        # 0x40e040
  401a24:	mov    rdx,rbx
  401a27:	call   0x405360
  401a2c:	mov    rcx,rbx
  401a2f:	call   0x401710
  401a34:	lea    rcx,[rip+0x7626]        # 0x409061
  401a3b:	mov    rdx,rbx
  401a3e:	call   0x404110
  401a43:	nop
  401a44:	add    rsp,0x420
  401a4b:	pop    rbx
  401a4c:	ret    
  401a4d:	nop    DWORD PTR [rax]
  401a50:	push   rbx
  401a51:	sub    rsp,0x420
  401a58:	test   cl,cl
  401a5a:	je     0x401a68
  401a5c:	lea    rcx,[rip+0x7b5d]        # 0x4095c0
  401a63:	call   0x404110
  401a68:	lea    rbx,[rsp+0x20]
  401a6d:	lea    rcx,[rip+0xc5cc]        # 0x40e040
  401a74:	mov    rdx,rbx
  401a77:	call   0x405340
  401a7c:	mov    rcx,rbx
  401a7f:	call   0x401710
  401a84:	lea    rcx,[rip+0x75d6]        # 0x409061
  401a8b:	mov    rdx,rbx
  401a8e:	call   0x404110
  401a93:	nop
  401a94:	add    rsp,0x420
  401a9b:	pop    rbx
  401a9c:	ret    
  401a9d:	nop    DWORD PTR [rax]
  401aa0:	push   rbx
  401aa1:	sub    rsp,0x420
  401aa8:	test   cl,cl
  401aaa:	je     0x401ab8
  401aac:	lea    rcx,[rip+0x7b1b]        # 0x4095ce
  401ab3:	call   0x404110
  401ab8:	lea    rbx,[rsp+0x20]
  401abd:	lea    rcx,[rip+0xc57c]        # 0x40e040
  401ac4:	mov    rdx,rbx
  401ac7:	call   0x405420
  401acc:	mov    rcx,rbx
  401acf:	call   0x401710
  401ad4:	lea    rcx,[rip+0x7586]        # 0x409061
  401adb:	mov    rdx,rbx
  401ade:	call   0x404110
  401ae3:	nop
  401ae4:	add    rsp,0x420
  401aeb:	pop    rbx
  401aec:	ret    
  401aed:	nop    DWORD PTR [rax]
  401af0:	push   rbx
  401af1:	sub    rsp,0x420
  401af8:	test   cl,cl
  401afa:	je     0x401b08
  401afc:	lea    rcx,[rip+0x7ad6]        # 0x4095d9
  401b03:	call   0x404110
  401b08:	lea    rbx,[rsp+0x20]
  401b0d:	lea    rcx,[rip+0xc52c]        # 0x40e040
  401b14:	mov    rdx,rbx
  401b17:	call   0x405400
  401b1c:	mov    rcx,rbx
  401b1f:	call   0x401710
  401b24:	lea    rcx,[rip+0x7536]        # 0x409061
  401b2b:	mov    rdx,rbx
  401b2e:	call   0x404110
  401b33:	nop
  401b34:	add    rsp,0x420
  401b3b:	pop    rbx
  401b3c:	ret    
  401b3d:	nop    DWORD PTR [rax]
  401b40:	push   rbx
  401b41:	sub    rsp,0x420
  401b48:	test   cl,cl
  401b4a:	jne    0x401ba0
  401b4c:	lea    rbx,[rsp+0x20]
  401b51:	lea    rdx,[rip+0xc4e8]        # 0x40e040
  401b58:	mov    rcx,rbx
  401b5b:	call   0x407008
  401b60:	mov    edx,0x2f
  401b65:	mov    rcx,rbx
  401b68:	call   0x406fe0
  401b6d:	test   rax,rax
  401b70:	je     0x401b75
  401b72:	mov    BYTE PTR [rax],0x0
  401b75:	mov    rcx,rbx
  401b78:	call   0x401710
  401b7d:	lea    rcx,[rip+0x74dd]        # 0x409061
  401b84:	mov    rdx,rbx
  401b87:	call   0x404110
  401b8c:	nop
  401b8d:	add    rsp,0x420
  401b94:	pop    rbx
  401b95:	ret    
  401b96:	nop    WORD PTR cs:[rax+rax*1+0x0]
  401ba0:	lea    rcx,[rip+0x7a3c]        # 0x4095e3
  401ba7:	call   0x404110
  401bac:	jmp    0x401b4c
  401bae:	nop
  401baf:	nop
  401bb0:	push   rsi
  401bb1:	push   rbx
  401bb2:	sub    rsp,0x468
  401bb9:	mov    rbx,rcx
  401bbc:	call   0x406ff8
  401bc1:	cmp    rax,0x3
  401bc5:	ja     0x401c11
  401bc7:	lea    rdx,[rsp+0x20]
  401bcc:	mov    rcx,rbx
  401bcf:	call   0x404720
  401bd4:	test   eax,eax
  401bd6:	js     0x401c90
  401bdc:	movzx  edx,WORD PTR [rsp+0x26]
  401be1:	mov    eax,0xffffffff
  401be6:	mov    ecx,edx
  401be8:	and    cx,0xf000
  401bed:	cmp    cx,0x8000
  401bf2:	jne    0x401c07
  401bf4:	test   dl,0x40
  401bf7:	je     0x401c07
  401bf9:	and    dx,0x100
  401bfe:	cmp    dx,0x1
  401c02:	sbb    eax,eax
  401c04:	and    eax,0xfffffffe
  401c07:	add    rsp,0x468
  401c0e:	pop    rbx
  401c0f:	pop    rsi
  401c10:	ret    
  401c11:	lea    rcx,[rbx+rax*1-0x4]
  401c16:	lea    rdx,[rip+0x84e3]        # 0x40a100
  401c1d:	call   0x405500
  401c22:	test   eax,eax
  401c24:	je     0x401bc7
  401c26:	lea    rsi,[rsp+0x50]
  401c2b:	mov    rdx,rbx
  401c2e:	mov    r8d,0x400
  401c34:	mov    rcx,rsi
  401c37:	call   0x402d70
  401c3c:	mov    rdx,rsi
  401c3f:	mov    r8d,DWORD PTR [rdx]
  401c42:	add    rdx,0x4
  401c46:	lea    eax,[r8-0x1010101]
  401c4d:	not    r8d
  401c50:	and    eax,r8d
  401c53:	and    eax,0x80808080
  401c58:	je     0x401c3f
  401c5a:	mov    ecx,eax
  401c5c:	mov    rbx,rsi
  401c5f:	shr    ecx,0x10
  401c62:	test   eax,0x8080
  401c67:	cmove  eax,ecx
  401c6a:	lea    rcx,[rdx+0x2]
  401c6e:	cmove  rdx,rcx
  401c72:	add    al,al
  401c74:	sbb    rdx,0x3
  401c78:	mov    DWORD PTR [rdx],0x6578652e
  401c7e:	mov    BYTE PTR [rdx+0x4],0x0
  401c82:	jmp    0x401bc7
  401c87:	nop    WORD PTR [rax+rax*1+0x0]
  401c90:	mov    eax,0xffffffff
  401c95:	jmp    0x401c07
  401c9a:	nop    WORD PTR [rax+rax*1+0x0]
  401ca0:	push   r15
  401ca2:	push   r14
  401ca4:	push   r13
  401ca6:	push   r12
  401ca8:	push   rbp
  401ca9:	push   rdi
  401caa:	push   rsi
  401cab:	push   rbx
  401cac:	sub    rsp,0x838
  401cb3:	lea    rdi,[rsp+0x30]
  401cb8:	mov    rbx,rcx
  401cbb:	mov    rsi,rdx
  401cbe:	mov    edx,0x400
  401cc3:	mov    rcx,rdi
  401cc6:	call   0x406fa0
  401ccb:	test   rax,rax
  401cce:	je     0x401f51
  401cd4:	mov    rcx,rbx
  401cd7:	call   0x404970
  401cdc:	test   rax,rax
  401cdf:	je     0x401d70
  401ce5:	movzx  ecx,BYTE PTR [rbx]
  401ce8:	cmp    cl,0x5c
  401ceb:	je     0x401d50
  401ced:	cmp    cl,0x2f
  401cf0:	je     0x401d50
  401cf2:	call   QWORD PTR [rip+0xd950]        # 0x40f648
  401cf8:	test   eax,eax
  401cfa:	je     0x401d02
  401cfc:	cmp    BYTE PTR [rbx+0x1],0x3a
  401d00:	je     0x401d40
  401d02:	mov    r8,rbx
  401d05:	mov    rdx,rdi
  401d08:	mov    rcx,rsi
  401d0b:	call   0x404a50
  401d10:	mov    rcx,rsi
  401d13:	call   0x404af0
  401d18:	mov    rcx,rsi
  401d1b:	call   0x401bb0
  401d20:	test   eax,eax
  401d22:	jne    0x401eb0
  401d28:	xor    eax,eax
  401d2a:	add    rsp,0x838
  401d31:	pop    rbx
  401d32:	pop    rsi
  401d33:	pop    rdi
  401d34:	pop    rbp
  401d35:	pop    r12
  401d37:	pop    r13
  401d39:	pop    r14
  401d3b:	pop    r15
  401d3d:	ret    
  401d3e:	xchg   ax,ax
  401d40:	movzx  eax,BYTE PTR [rbx+0x2]
  401d44:	cmp    al,0x5c
  401d46:	je     0x401d50
  401d48:	cmp    al,0x2f
  401d4a:	jne    0x401d02
  401d4c:	nop    DWORD PTR [rax+0x0]
  401d50:	mov    r8d,0x400
  401d56:	mov    rdx,rbx
  401d59:	mov    rcx,rsi
  401d5c:	call   0x406fe8
  401d61:	mov    BYTE PTR [rsi+0x3ff],0x0
  401d68:	jmp    0x401d10
  401d6a:	nop    WORD PTR [rax+rax*1+0x0]
  401d70:	mov    r8,rbx
  401d73:	mov    rdx,rdi
  401d76:	mov    rcx,rsi
  401d79:	call   0x404a50
  401d7e:	mov    rcx,rsi
  401d81:	call   0x401bb0
  401d86:	test   eax,eax
  401d88:	je     0x401d28
  401d8a:	lea    rcx,[rip+0x83b4]        # 0x40a145
  401d91:	call   0x407080
  401d96:	test   rax,rax
  401d99:	mov    r14,rax
  401d9c:	je     0x401f7d
  401da2:	cmp    BYTE PTR [rax],0x0
  401da5:	je     0x401f7d
  401dab:	mov    r12,rax
  401dae:	lea    r13,[rsp+0x430]
  401db6:	mov    r15d,0x1
  401dbc:	jmp    0x401ddf
  401dbe:	xchg   ax,ax
  401dc0:	test   eax,eax
  401dc2:	je     0x401d2a
  401dc8:	cmp    BYTE PTR [rbp+0x0],0x0
  401dcc:	je     0x401f7d
  401dd2:	test   r12,r12
  401dd5:	je     0x401fb3
  401ddb:	lea    r12,[rbp+0x1]
  401ddf:	mov    rcx,r12
  401de2:	call   0x4049a0
  401de7:	test   rax,rax
  401dea:	mov    rbp,rax
  401ded:	je     0x401f40
  401df3:	mov    r9,r15
  401df6:	mov    eax,0x400
  401dfb:	sub    r9,r12
  401dfe:	add    r9,rbp
  401e01:	cmp    r9,0x400
  401e08:	cmovg  r9,rax
  401e0c:	test   r9,r9
  401e0f:	jne    0x401f13
  401e15:	movzx  ecx,BYTE PTR [rsp+0x430]
  401e1d:	cmp    cl,0x5c
  401e20:	je     0x401f00
  401e26:	cmp    cl,0x2f
  401e29:	je     0x401f00
  401e2f:	call   QWORD PTR [rip+0xd813]        # 0x40f648
  401e35:	test   eax,eax
  401e37:	je     0x401e47
  401e39:	cmp    BYTE PTR [rsp+0x431],0x3a
  401e41:	je     0x401ee6
  401e47:	mov    r8,r13
  401e4a:	mov    rdx,rdi
  401e4d:	mov    rcx,rsi
  401e50:	call   0x404a50
  401e55:	mov    r8,rbx
  401e58:	mov    rdx,rsi
  401e5b:	mov    rcx,rsi
  401e5e:	call   0x404a50
  401e63:	mov    rcx,rsi
  401e66:	call   0x404af0
  401e6b:	mov    rcx,rsi
  401e6e:	call   0x401bb0
  401e73:	cmp    eax,0xfffffffe
  401e76:	jne    0x401dc0
  401e7c:	call   QWORD PTR [rip+0xd70e]        # 0x40f590
  401e82:	lea    rdx,[rip+0x82e8]        # 0x40a171
  401e89:	lea    rcx,[rax+0x60]
  401e8d:	mov    r8,rsi
  401e90:	call   0x4040e0
  401e95:	call   QWORD PTR [rip+0xd6f5]        # 0x40f590
  401e9b:	lea    rdx,[rax+0x60]
  401e9f:	mov    ecx,0xa
  401ea4:	call   0x407098
  401ea9:	jmp    0x401dc8
  401eae:	xchg   ax,ax
  401eb0:	mov    rbx,QWORD PTR [rip+0xd6d9]        # 0x40f590
  401eb7:	call   rbx
  401eb9:	lea    rdx,[rip+0x8271]        # 0x40a131
  401ec0:	lea    rcx,[rax+0x60]
  401ec4:	mov    r8,rsi
  401ec7:	call   0x4040e0
  401ecc:	call   rbx
  401ece:	lea    rdx,[rax+0x60]
  401ed2:	mov    ecx,0xa
  401ed7:	call   0x407098
  401edc:	mov    eax,0xffffffff
  401ee1:	jmp    0x401d2a
  401ee6:	movzx  eax,BYTE PTR [rsp+0x432]
  401eee:	cmp    al,0x5c
  401ef0:	je     0x401f00
  401ef2:	cmp    al,0x2f
  401ef4:	jne    0x401e47
  401efa:	nop    WORD PTR [rax+rax*1+0x0]
  401f00:	mov    r8,rbx
  401f03:	mov    rdx,r13
  401f06:	mov    rcx,rsi
  401f09:	call   0x404a50
  401f0e:	jmp    0x401e63
  401f13:	mov    r8,r9
  401f16:	mov    rdx,r12
  401f19:	mov    rcx,r13
  401f1c:	mov    QWORD PTR [rsp+0x28],r9
  401f21:	call   0x406fe8
  401f26:	mov    r9,QWORD PTR [rsp+0x28]
  401f2b:	mov    BYTE PTR [rsp+r9*1+0x42f],0x0
  401f34:	jmp    0x401e15
  401f39:	nop    DWORD PTR [rax+0x0]
  401f40:	mov    rcx,r12
  401f43:	call   0x406ff8
  401f48:	lea    rbp,[r12+rax*1]
  401f4c:	jmp    0x401df3
  401f51:	call   QWORD PTR [rip+0xd671]        # 0x40f5c8
  401f57:	mov    ecx,DWORD PTR [rax]
  401f59:	call   0x407000
  401f5e:	mov    rsi,rax
  401f61:	mov    rbx,QWORD PTR [rip+0xd628]        # 0x40f590
  401f68:	call   rbx
  401f6a:	mov    r8,rsi
  401f6d:	lea    rcx,[rax+0x60]
  401f71:	lea    rdx,[rip+0x8190]        # 0x40a108
  401f78:	jmp    0x401ec7
  401f7d:	mov    rsi,QWORD PTR [rip+0xd60c]        # 0x40f590
  401f84:	call   rsi
  401f86:	lea    rdx,[rip+0x81c3]        # 0x40a150
  401f8d:	lea    rcx,[rax+0x60]
  401f91:	mov    r8,rbx
  401f94:	call   0x4040e0
  401f99:	call   rsi
  401f9b:	lea    rdx,[rax+0x60]
  401f9f:	mov    ecx,0xa
  401fa4:	call   0x407098
  401fa9:	mov    eax,0xffffffff
  401fae:	jmp    0x401d2a
  401fb3:	mov    r12,r14
  401fb6:	jmp    0x401ddf
  401fbb:	nop    DWORD PTR [rax+rax*1+0x0]
  401fc0:	push   r15
  401fc2:	push   r14
  401fc4:	push   r13
  401fc6:	push   r12
  401fc8:	push   rbp
  401fc9:	push   rdi
  401fca:	push   rsi
  401fcb:	push   rbx
  401fcc:	sub    rsp,0x598
  401fd3:	mov    rsi,rdx
  401fd6:	mov    rdx,r9
  401fd9:	mov    rbp,r8
  401fdc:	mov    rbx,r9
  401fdf:	call   0x401ca0
  401fe4:	test   eax,eax
  401fe6:	js     0x4021bd
  401fec:	mov    rcx,rbx
  401fef:	call   0x4049d0
  401ff4:	mov    rcx,rbx
  401ff7:	mov    BYTE PTR [rax],0x0
  401ffa:	call   0x404af0
  401fff:	mov    rcx,rbx
  402002:	call   0x406ff8
  402007:	mov    r10d,0x400
  40200d:	lea    rcx,[rbx+rax*1]
  402011:	lea    r8,[rip+0x8174]        # 0x40a18c
  402018:	mov    rdx,r10
  40201b:	mov    r9,rsi
  40201e:	sub    rdx,rax
  402021:	lea    rax,[rip+0x80d8]        # 0x40a100
  402028:	mov    QWORD PTR [rsp+0x20],rax
  40202d:	call   0x403f90
  402032:	mov    rcx,rbx
  402035:	call   0x401bb0
  40203a:	test   eax,eax
  40203c:	jne    0x4021bd
  402042:	lea    rsi,[rsp+0x190]
  40204a:	lea    r8,[rip+0x8141]        # 0x40a192
  402051:	mov    r9,rbx
  402054:	mov    edx,0x400
  402059:	mov    rcx,rsi
  40205c:	call   0x403f90
  402061:	xor    r9d,r9d
  402064:	mov    DWORD PTR [rsp+0x70],0x18
  40206c:	mov    DWORD PTR [rsp+0x80],0x1
  402077:	mov    QWORD PTR [rsp+0x78],0x0
  402080:	lea    rdx,[rsp+0x60]
  402085:	lea    rcx,[rsp+0x58]
  40208a:	lea    r8,[rsp+0x70]
  40208f:	call   QWORD PTR [rip+0xd38b]        # 0x40f420
  402095:	test   eax,eax
  402097:	je     0x4021bd
  40209d:	mov    rbx,QWORD PTR [rip+0xd3b4]        # 0x40f458
  4020a4:	call   rbx
  4020a6:	mov    rdi,QWORD PTR [rsp+0x58]
  4020ab:	mov    r12,rax
  4020ae:	call   rbx
  4020b0:	mov    DWORD PTR [rsp+0x30],0x2
  4020b8:	mov    rcx,rax
  4020bb:	mov    DWORD PTR [rsp+0x28],0x0
  4020c3:	mov    DWORD PTR [rsp+0x20],0x0
  4020cb:	lea    r9,[rsp+0x68]
  4020d0:	mov    r8,r12
  4020d3:	mov    rdx,rdi
  4020d6:	call   QWORD PTR [rip+0xd364]        # 0x40f440
  4020dc:	test   eax,eax
  4020de:	mov    rcx,QWORD PTR [rsp+0x58]
  4020e3:	je     0x4023a0
  4020e9:	mov    r12,QWORD PTR [rip+0xd318]        # 0x40f408
  4020f0:	xor    ebx,ebx
  4020f2:	call   r12
  4020f5:	lea    r8,[rsp+0x120]
  4020fd:	mov    rax,rbx
  402100:	mov    ecx,0xd
  402105:	lea    rdx,[rsp+0x90]
  40210d:	xor    r9d,r9d
  402110:	mov    QWORD PTR [rsp+0x90],0x0
  40211c:	mov    rdi,r8
  40211f:	mov    QWORD PTR [rsp+0x98],0x0
  40212b:	mov    QWORD PTR [rsp+0xa0],0x0
  402137:	rep stos QWORD PTR es:[rdi],rax
  40213a:	mov    rax,QWORD PTR [rsp+0x60]
  40213f:	mov    QWORD PTR [rsp+0x48],rdx
  402144:	mov    rdx,rsi
  402147:	mov    QWORD PTR [rsp+0x40],r8
  40214c:	mov    DWORD PTR [rsp+0x120],0x68
  402157:	xor    r8d,r8d
  40215a:	mov    DWORD PTR [rsp+0x15c],0x100
  402165:	mov    QWORD PTR [rsp+0x170],0xffffffffffffffff
  402171:	mov    QWORD PTR [rsp+0x180],rax
  402179:	mov    QWORD PTR [rsp+0x178],rax
  402181:	mov    QWORD PTR [rsp+0x38],0x0
  40218a:	mov    QWORD PTR [rsp+0x30],0x0
  402193:	mov    DWORD PTR [rsp+0x28],0x0
  40219b:	mov    DWORD PTR [rsp+0x20],0x1
  4021a3:	call   QWORD PTR [rip+0xd27f]        # 0x40f428
  4021a9:	test   eax,eax
  4021ab:	jne    0x4021e0
  4021ad:	mov    rcx,QWORD PTR [rsp+0x60]
  4021b2:	call   r12
  4021b5:	mov    rcx,QWORD PTR [rsp+0x68]
  4021ba:	call   r12
  4021bd:	mov    eax,0xffffffff
  4021c2:	add    rsp,0x598
  4021c9:	pop    rbx
  4021ca:	pop    rsi
  4021cb:	pop    rdi
  4021cc:	pop    rbp
  4021cd:	pop    r12
  4021cf:	pop    r13
  4021d1:	pop    r14
  4021d3:	pop    r15
  4021d5:	ret    
  4021d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4021e0:	lea    rsi,[rsp+0xb0]
  4021e8:	mov    rax,rbx
  4021eb:	mov    ecx,0xc
  4021f0:	lea    r14,[rsp+0x54]
  4021f5:	mov    r13,QWORD PTR [rip+0xd2e4]        # 0x40f4e0
  4021fc:	mov    rdi,rsi
  4021ff:	mov    rbx,rsi
  402202:	lea    r15,[rsi+0x63]
  402206:	rep stos QWORD PTR es:[rdi],rax
  402209:	mov    DWORD PTR [rdi],0x0
  40220f:	mov    rdi,QWORD PTR [rip+0xd342]        # 0x40f558
  402216:	jmp    0x40226f
  402218:	nop    DWORD PTR [rax+rax*1+0x0]
  402220:	mov    rax,rsi
  402223:	mov    QWORD PTR [rsp+0x20],0x0
  40222c:	mov    r9,r14
  40222f:	sub    rax,rbx
  402232:	mov    rdx,rbx
  402235:	mov    rcx,QWORD PTR [rsp+0x68]
  40223a:	lea    r8d,[rax+0x64]
  40223e:	call   r13
  402241:	test   eax,eax
  402243:	je     0x402287
  402245:	mov    rcx,rbx
  402248:	call   0x406ff8
  40224d:	mov    ecx,DWORD PTR [rsp+0x54]
  402251:	add    rbx,rax
  402254:	test   ecx,ecx
  402256:	je     0x402287
  402258:	mov    edx,0xa
  40225d:	mov    rcx,rsi
  402260:	call   0x407018
  402265:	test   rax,rax
  402268:	jne    0x402287
  40226a:	cmp    rbx,r15
  40226d:	jae    0x402287
  40226f:	mov    DWORD PTR [rsp+0x54],0x0
  402277:	mov    edx,0x2710
  40227c:	mov    rcx,QWORD PTR [rsp+0x68]
  402281:	call   rdi
  402283:	test   eax,eax
  402285:	je     0x402220
  402287:	cmp    rbx,rsi
  40228a:	je     0x402400
  402290:	mov    edx,0xa
  402295:	mov    rcx,rsi
  402298:	call   0x407018
  40229d:	test   rax,rax
  4022a0:	je     0x4022a6
  4022a2:	mov    BYTE PTR [rax+0x1],0x0
  4022a6:	mov    rax,rsi
  4022a9:	mov    ecx,DWORD PTR [rax]
  4022ab:	add    rax,0x4
  4022af:	lea    edx,[rcx-0x1010101]
  4022b5:	not    ecx
  4022b7:	and    edx,ecx
  4022b9:	and    edx,0x80808080
  4022bf:	je     0x4022a9
  4022c1:	mov    ecx,edx
  4022c3:	shr    ecx,0x10
  4022c6:	test   edx,0x8080
  4022cc:	cmove  edx,ecx
  4022cf:	lea    rcx,[rax+0x2]
  4022d3:	cmove  rax,rcx
  4022d7:	add    dl,dl
  4022d9:	sbb    rax,0x3
  4022dd:	sub    rax,rsi
  4022e0:	cmp    eax,0x1
  4022e3:	movsxd rcx,eax
  4022e6:	jle    0x4023b5
  4022ec:	cdqe   
  4022ee:	lea    rdx,[rsi+rax*1-0x2]
  4022f3:	cmp    BYTE PTR [rdx],0xd
  4022f6:	je     0x4023d0
  4022fc:	movzx  eax,BYTE PTR [rsp+rax*1+0xaf]
  402304:	cmp    al,0xa
  402306:	mov    rbx,rsi
  402309:	je     0x402351
  40230b:	mov    rax,rsi
  40230e:	mov    ecx,DWORD PTR [rax]
  402310:	add    rax,0x4
  402314:	lea    edx,[rcx-0x1010101]
  40231a:	not    ecx
  40231c:	and    edx,ecx
  40231e:	and    edx,0x80808080
  402324:	je     0x40230e
  402326:	mov    ecx,edx
  402328:	shr    ecx,0x10
  40232b:	test   edx,0x8080
  402331:	cmove  edx,ecx
  402334:	lea    rcx,[rax+0x2]
  402338:	cmove  rax,rcx
  40233c:	add    dl,dl
  40233e:	sbb    rax,0x3
  402342:	sub    rax,rsi
  402345:	mov    edx,0xa
  40234a:	mov    rbx,rsi
  40234d:	mov    WORD PTR [rsi+rax*1],dx
  402351:	mov    rcx,QWORD PTR [rsp+0x90]
  402359:	call   r12
  40235c:	mov    rcx,QWORD PTR [rsp+0x98]
  402364:	call   r12
  402367:	mov    rcx,QWORD PTR [rsp+0x60]
  40236c:	call   r12
  40236f:	mov    rcx,QWORD PTR [rsp+0x68]
  402374:	call   r12
  402377:	test   rbx,rbx
  40237a:	je     0x4021bd
  402380:	mov    rdx,rbp
  402383:	mov    rcx,rsi
  402386:	call   0x407010
  40238b:	mov    edx,0xfffffffe
  402390:	test   eax,eax
  402392:	cmovne eax,edx
  402395:	jmp    0x4021c2
  40239a:	nop    WORD PTR [rax+rax*1+0x0]
  4023a0:	mov    rbx,QWORD PTR [rip+0xd061]        # 0x40f408
  4023a7:	call   rbx
  4023a9:	mov    rcx,QWORD PTR [rsp+0x60]
  4023ae:	call   rbx
  4023b0:	jmp    0x4021bd
  4023b5:	test   eax,eax
  4023b7:	je     0x402345
  4023b9:	movzx  eax,BYTE PTR [rsp+rcx*1+0xaf]
  4023c1:	jmp    0x402304
  4023c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4023d0:	lea    rax,[rsi+rax*1-0x1]
  4023d5:	cmp    BYTE PTR [rax],0xa
  4023d8:	jne    0x40230b
  4023de:	mov    BYTE PTR [rdx],0xa
  4023e1:	mov    BYTE PTR [rax],0x0
  4023e4:	lea    eax,[rcx-0x1]
  4023e7:	cdqe   
  4023e9:	movzx  eax,BYTE PTR [rsp+rax*1+0xaf]
  4023f1:	jmp    0x402304
  4023f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  402400:	xor    ebx,ebx
  402402:	jmp    0x402351
  402407:	nop    WORD PTR [rax+rax*1+0x0]
  402410:	push   rdi
  402411:	push   rsi
  402412:	push   rbx
  402413:	sub    rsp,0x20
  402417:	call   QWORD PTR [rip+0xd1d3]        # 0x40f5f0
  40241d:	mov    ebx,eax
  40241f:	xor    eax,eax
  402421:	test   ebx,ebx
  402423:	je     0x40246a
  402425:	cmp    ebx,0xffffffff
  402428:	je     0x402472
  40242a:	mov    ecx,ebx
  40242c:	call   0x402a40
  402431:	mov    rdi,QWORD PTR [rip+0xd158]        # 0x40f590
  402438:	mov    rsi,rax
  40243b:	call   rdi
  40243d:	lea    rdx,[rip+0x7d68]        # 0x40a1ac
  402444:	lea    rcx,[rax+0x60]
  402448:	mov    r8,rsi
  40244b:	call   0x4040e0
  402450:	call   rdi
  402452:	lea    rdx,[rax+0x60]
  402456:	mov    ecx,0xa
  40245b:	call   0x407098
  402460:	mov    rcx,rsi
  402463:	call   0x407090
  402468:	mov    eax,ebx
  40246a:	add    rsp,0x20
  40246e:	pop    rbx
  40246f:	pop    rsi
  402470:	pop    rdi
  402471:	ret    
  402472:	call   QWORD PTR [rip+0xd150]        # 0x40f5c8
  402478:	mov    ecx,DWORD PTR [rax]
  40247a:	call   0x407000
  40247f:	mov    rsi,QWORD PTR [rip+0xd10a]        # 0x40f590
  402486:	mov    rdi,rax
  402489:	call   rsi
  40248b:	lea    rdx,[rip+0x7d08]        # 0x40a19a
  402492:	lea    rcx,[rax+0x60]
  402496:	mov    r8,rdi
  402499:	call   0x4040e0
  40249e:	call   rsi
  4024a0:	lea    rdx,[rax+0x60]
  4024a4:	mov    ecx,0xa
  4024a9:	call   0x407098
  4024ae:	mov    eax,ebx
  4024b0:	add    rsp,0x20
  4024b4:	pop    rbx
  4024b5:	pop    rsi
  4024b6:	pop    rdi
  4024b7:	ret    
  4024b8:	nop    DWORD PTR [rax+rax*1+0x0]
  4024c0:	push   rdi
  4024c1:	push   rsi
  4024c2:	push   rbx
  4024c3:	sub    rsp,0xc30
  4024ca:	lea    rdi,[rip+0x7cde]        # 0x40a1af
  4024d1:	mov    rbx,rcx
  4024d4:	mov    rsi,rdx
  4024d7:	mov    ecx,0xd
  4024dc:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
  4024de:	jne    0x402513
  4024e0:	lea    rsi,[rsp+0x420]
  4024e8:	mov    rcx,rbx
  4024eb:	mov    rdx,rsi
  4024ee:	call   0x401ca0
  4024f3:	test   eax,eax
  4024f5:	js     0x402508
  4024f7:	lea    rcx,[rip+0x7cbf]        # 0x40a1bd
  4024fe:	call   0x407080
  402503:	test   rax,rax
  402506:	je     0x402523
  402508:	add    rsp,0xc30
  40250f:	pop    rbx
  402510:	pop    rsi
  402511:	pop    rdi
  402512:	ret    
  402513:	lea    rdx,[rip+0x7ca2]        # 0x40a1bc
  40251a:	xor    ecx,ecx
  40251c:	call   0x403000
  402521:	jmp    0x4024e0
  402523:	lea    rdi,[rsp+0x20]
  402528:	lea    rbx,[rsp+0x820]
  402530:	mov    rcx,rsi
  402533:	mov    rdx,rdi
  402536:	call   0x405320
  40253b:	lea    r8,[rip+0x7c88]        # 0x40a1ca
  402542:	mov    r9,rdi
  402545:	mov    edx,0x40e
  40254a:	mov    rcx,rbx
  40254d:	call   0x403f90
  402552:	lea    rcx,[rbx+0xd]
  402556:	call   0x404af0
  40255b:	mov    rcx,rbx
  40255e:	call   0x406fa8
  402563:	mov    rcx,rax
  402566:	call   0x402de0
  40256b:	jmp    0x402508
  40256d:	nop    DWORD PTR [rax]
  402570:	push   r15
  402572:	push   r14
  402574:	push   r13
  402576:	push   r12
  402578:	push   rbp
  402579:	push   rdi
  40257a:	push   rsi
  40257b:	push   rbx
  40257c:	sub    rsp,0x78
  402580:	xor    r9d,r9d
  402583:	xor    r8d,r8d
  402586:	mov    edx,0x6
  40258b:	lea    r12,[rsp+0x4c]
  402590:	mov    rdi,rcx
  402593:	mov    DWORD PTR [rsp+0x4c],0x0
  40259b:	mov    rbx,QWORD PTR [rip+0xce46]        # 0x40f3e8
  4025a2:	mov    QWORD PTR [rsp+0x20],r12
  4025a7:	call   rbx
  4025a9:	test   eax,eax
  4025ab:	jne    0x402600
  4025ad:	mov    rbp,QWORD PTR [rip+0xcecc]        # 0x40f480
  4025b4:	call   rbp
  4025b6:	cmp    eax,0x7a
  4025b9:	je     0x402610
  4025bb:	call   rbp
  4025bd:	mov    rbx,QWORD PTR [rip+0xcfcc]        # 0x40f590
  4025c4:	mov    esi,eax
  4025c6:	call   rbx
  4025c8:	lea    rdx,[rip+0x7c69]        # 0x40a238
  4025cf:	lea    rcx,[rax+0x60]
  4025d3:	mov    r8d,esi
  4025d6:	call   0x4040e0
  4025db:	call   rbx
  4025dd:	lea    rdx,[rax+0x60]
  4025e1:	mov    ecx,0xa
  4025e6:	xor    ebx,ebx
  4025e8:	call   0x407098
  4025ed:	mov    eax,ebx
  4025ef:	add    rsp,0x78
  4025f3:	pop    rbx
  4025f4:	pop    rsi
  4025f5:	pop    rdi
  4025f6:	pop    rbp
  4025f7:	pop    r12
  4025f9:	pop    r13
  4025fb:	pop    r14
  4025fd:	pop    r15
  4025ff:	ret    
  402600:	mov    rax,QWORD PTR ds:0x0
  402608:	ud2    
  40260a:	nop    WORD PTR [rax+rax*1+0x0]
  402610:	mov    edx,DWORD PTR [rsp+0x4c]
  402614:	mov    ecx,0x40
  402619:	mov    r13,QWORD PTR [rip+0xce98]        # 0x40f4b8
  402620:	call   r13
  402623:	test   rax,rax
  402626:	mov    rsi,rax
  402629:	je     0x4029d3
  40262f:	mov    QWORD PTR [rsp+0x20],r12
  402634:	mov    r9d,DWORD PTR [rsp+0x4c]
  402639:	mov    r8,rax
  40263c:	mov    edx,0x6
  402641:	mov    rcx,rdi
  402644:	call   rbx
  402646:	test   eax,eax
  402648:	je     0x402900
  40264e:	lea    rdx,[rsp+0x60]
  402653:	mov    r9d,0x2
  402659:	mov    r8d,0xc
  40265f:	mov    rcx,QWORD PTR [rsi]
  402662:	call   QWORD PTR [rip+0xcd70]        # 0x40f3d8
  402668:	test   eax,eax
  40266a:	jne    0x4026b0
  40266c:	call   rbp
  40266e:	mov    rbx,QWORD PTR [rip+0xcf1b]        # 0x40f590
  402675:	mov    edi,eax
  402677:	call   rbx
  402679:	lea    rdx,[rip+0x7bf8]        # 0x40a278
  402680:	lea    rcx,[rax+0x60]
  402684:	mov    r8d,edi
  402687:	call   0x4040e0
  40268c:	call   rbx
  40268e:	lea    rdx,[rax+0x60]
  402692:	mov    ecx,0xa
  402697:	xor    ebx,ebx
  402699:	call   0x407098
  40269e:	mov    rdi,QWORD PTR [rip+0xce1b]        # 0x40f4c0
  4026a5:	mov    rcx,rsi
  4026a8:	call   rdi
  4026aa:	jmp    0x4025ed
  4026af:	nop
  4026b0:	lea    r12,[rsp+0x58]
  4026b5:	xor    r9d,r9d
  4026b8:	xor    r8d,r8d
  4026bb:	mov    edx,0x1
  4026c0:	mov    rcx,rdi
  4026c3:	mov    QWORD PTR [rsp+0x20],r12
  4026c8:	call   rbx
  4026ca:	test   eax,eax
  4026cc:	jne    0x402740
  4026ce:	call   rbp
  4026d0:	cmp    eax,0x7a
  4026d3:	je     0x4028a4
  4026d9:	call   rbp
  4026db:	mov    rbx,QWORD PTR [rip+0xceae]        # 0x40f590
  4026e2:	mov    edi,eax
  4026e4:	call   rbx
  4026e6:	lea    rdx,[rip+0x7b4b]        # 0x40a238
  4026ed:	lea    rcx,[rax+0x60]
  4026f1:	mov    r8d,edi
  4026f4:	call   0x4040e0
  4026f9:	call   rbx
  4026fb:	lea    rdx,[rax+0x60]
  4026ff:	mov    ecx,0xa
  402704:	call   0x407098
  402709:	mov    rdi,QWORD PTR [rip+0xcdb0]        # 0x40f4c0
  402710:	call   rbp
  402712:	mov    ebp,eax
  402714:	call   rbx
  402716:	lea    rdx,[rip+0x7c73]        # 0x40a390
  40271d:	lea    rcx,[rax+0x60]
  402721:	mov    r8d,ebp
  402724:	call   0x4040e0
  402729:	call   rbx
  40272b:	lea    rdx,[rax+0x60]
  40272f:	mov    ecx,0xa
  402734:	xor    ebx,ebx
  402736:	call   0x407098
  40273b:	jmp    0x4026a5
  402740:	mov    QWORD PTR [rsp+0x30],0x0
  402749:	mov    QWORD PTR [rsp+0x20],r12
  40274e:	mov    r9d,DWORD PTR [rsp+0x58]
  402753:	mov    edx,0x1
  402758:	mov    r8,QWORD PTR [rsp+0x30]
  40275d:	mov    rcx,rdi
  402760:	call   rbx
  402762:	test   eax,eax
  402764:	je     0x402860
  40276a:	mov    ebx,DWORD PTR [rsp+0x64]
  40276e:	mov    rax,QWORD PTR [rsp+0x30]
  402773:	mov    rcx,QWORD PTR [rax]
  402776:	call   QWORD PTR [rip+0xcc64]        # 0x40f3e0
  40277c:	lea    edx,[rbx+rax*1+0x8]
  402780:	mov    ecx,0x40
  402785:	mov    DWORD PTR [rsp+0x3c],edx
  402789:	call   r13
  40278c:	test   rax,rax
  40278f:	mov    r13,rax
  402792:	je     0x402990
  402798:	mov    r8d,0x2
  40279e:	mov    edx,DWORD PTR [rsp+0x3c]
  4027a2:	mov    rcx,r13
  4027a5:	call   QWORD PTR [rip+0xcc45]        # 0x40f3f0
  4027ab:	test   eax,eax
  4027ad:	je     0x4028e0
  4027b3:	mov    eax,DWORD PTR [rsp+0x60]
  4027b7:	xor    ebx,ebx
  4027b9:	mov    r14,QWORD PTR [rip+0xcc10]        # 0x40f3d0
  4027c0:	mov    r15,QWORD PTR [rip+0xcc01]        # 0x40f3c8
  4027c7:	test   eax,eax
  4027c9:	jg     0x402804
  4027cb:	jmp    0x402920
  4027d0:	mov    r9,QWORD PTR [rsp+0x58]
  4027d5:	mov    r8d,0xffffffff
  4027db:	mov    edx,0x2
  4027e0:	mov    rcx,r13
  4027e3:	movzx  eax,WORD PTR [r9+0x2]
  4027e8:	mov    DWORD PTR [rsp+0x20],eax
  4027ec:	call   r15
  4027ef:	test   eax,eax
  4027f1:	je     0x402970
  4027f7:	add    ebx,0x1
  4027fa:	cmp    DWORD PTR [rsp+0x60],ebx
  4027fe:	jle    0x402920
  402804:	mov    r8,r12
  402807:	mov    edx,ebx
  402809:	mov    rcx,QWORD PTR [rsi]
  40280c:	call   r14
  40280f:	test   eax,eax
  402811:	jne    0x4027d0
  402813:	call   rbp
  402815:	mov    rbx,QWORD PTR [rip+0xcd74]        # 0x40f590
  40281c:	mov    edi,eax
  40281e:	call   rbx
  402820:	lea    rdx,[rip+0x7ab1]        # 0x40a2d8
  402827:	lea    rcx,[rax+0x60]
  40282b:	mov    r8d,edi
  40282e:	call   0x4040e0
  402833:	call   rbx
  402835:	lea    rdx,[rax+0x60]
  402839:	mov    ecx,0xa
  40283e:	xor    ebx,ebx
  402840:	call   0x407098
  402845:	mov    rcx,QWORD PTR [rsp+0x30]
  40284a:	mov    rdi,QWORD PTR [rip+0xcc6f]        # 0x40f4c0
  402851:	call   rdi
  402853:	mov    rcx,r13
  402856:	call   rdi
  402858:	jmp    0x4026a5
  40285d:	nop    DWORD PTR [rax]
  402860:	mov    rcx,QWORD PTR [rsp+0x30]
  402865:	mov    rdi,QWORD PTR [rip+0xcc54]        # 0x40f4c0
  40286c:	call   rdi
  40286e:	call   rbp
  402870:	mov    rbx,QWORD PTR [rip+0xcd19]        # 0x40f590
  402877:	mov    r12d,eax
  40287a:	call   rbx
  40287c:	lea    rdx,[rip+0x7985]        # 0x40a208
  402883:	lea    rcx,[rax+0x60]
  402887:	mov    r8d,r12d
  40288a:	call   0x4040e0
  40288f:	call   rbx
  402891:	lea    rdx,[rax+0x60]
  402895:	mov    ecx,0xa
  40289a:	call   0x407098
  40289f:	jmp    0x402710
  4028a4:	mov    edx,DWORD PTR [rsp+0x58]
  4028a8:	mov    ecx,0x40
  4028ad:	call   r13
  4028b0:	test   rax,rax
  4028b3:	mov    QWORD PTR [rsp+0x30],rax
  4028b8:	jne    0x402749
  4028be:	mov    edi,DWORD PTR [rsp+0x58]
  4028c2:	mov    rbx,QWORD PTR [rip+0xccc7]        # 0x40f590
  4028c9:	call   rbx
  4028cb:	lea    rdx,[rip+0x790e]        # 0x40a1e0
  4028d2:	lea    rcx,[rax+0x60]
  4028d6:	mov    r8d,edi
  4028d9:	jmp    0x4026f4
  4028de:	xchg   ax,ax
  4028e0:	call   rbp
  4028e2:	mov    edi,eax
  4028e4:	mov    rbx,QWORD PTR [rip+0xcca5]        # 0x40f590
  4028eb:	call   rbx
  4028ed:	mov    r8d,edi
  4028f0:	lea    rcx,[rax+0x60]
  4028f4:	lea    rdx,[rip+0x79ad]        # 0x40a2a8
  4028fb:	jmp    0x40282e
  402900:	call   rbp
  402902:	mov    edi,eax
  402904:	mov    rbx,QWORD PTR [rip+0xcc85]        # 0x40f590
  40290b:	call   rbx
  40290d:	mov    r8d,edi
  402910:	lea    rcx,[rax+0x60]
  402914:	lea    rdx,[rip+0x78ed]        # 0x40a208
  40291b:	jmp    0x402687
  402920:	mov    rax,QWORD PTR [rsp+0x30]
  402925:	mov    r9d,0x10000000
  40292b:	mov    r8d,0x1
  402931:	mov    edx,0x2
  402936:	mov    rcx,r13
  402939:	mov    rax,QWORD PTR [rax]
  40293c:	mov    QWORD PTR [rsp+0x20],rax
  402941:	call   QWORD PTR [rip+0xca79]        # 0x40f3c0
  402947:	test   eax,eax
  402949:	jne    0x4029f3
  40294f:	call   rbp
  402951:	mov    edi,eax
  402953:	mov    rbx,QWORD PTR [rip+0xcc36]        # 0x40f590
  40295a:	call   rbx
  40295c:	mov    r8d,edi
  40295f:	lea    rcx,[rax+0x60]
  402963:	lea    rdx,[rip+0x79be]        # 0x40a328
  40296a:	jmp    0x40282e
  40296f:	nop
  402970:	call   rbp
  402972:	mov    edi,eax
  402974:	mov    rbx,QWORD PTR [rip+0xcc15]        # 0x40f590
  40297b:	call   rbx
  40297d:	mov    r8d,edi
  402980:	lea    rcx,[rax+0x60]
  402984:	lea    rdx,[rip+0x7975]        # 0x40a300
  40298b:	jmp    0x40282e
  402990:	mov    rbx,QWORD PTR [rip+0xcbf9]        # 0x40f590
  402997:	call   rbx
  402999:	mov    r8d,DWORD PTR [rsp+0x3c]
  40299e:	lea    rcx,[rax+0x60]
  4029a2:	lea    rdx,[rip+0x7837]        # 0x40a1e0
  4029a9:	call   0x4040e0
  4029ae:	call   rbx
  4029b0:	lea    rdx,[rax+0x60]
  4029b4:	mov    ecx,0xa
  4029b9:	xor    ebx,ebx
  4029bb:	call   0x407098
  4029c0:	mov    rcx,QWORD PTR [rsp+0x30]
  4029c5:	mov    rdi,QWORD PTR [rip+0xcaf4]        # 0x40f4c0
  4029cc:	call   rdi
  4029ce:	jmp    0x4026a5
  4029d3:	mov    esi,DWORD PTR [rsp+0x4c]
  4029d7:	mov    rbx,QWORD PTR [rip+0xcbb2]        # 0x40f590
  4029de:	call   rbx
  4029e0:	lea    rdx,[rip+0x77f9]        # 0x40a1e0
  4029e7:	lea    rcx,[rax+0x60]
  4029eb:	mov    r8d,esi
  4029ee:	jmp    0x4025d6
  4029f3:	mov    QWORD PTR [rsp+0x50],r13
  4029f8:	mov    r9d,DWORD PTR [rsp+0x3c]
  4029fd:	lea    r8,[rsp+0x50]
  402a02:	mov    edx,0x6
  402a07:	mov    rcx,rdi
  402a0a:	mov    ebx,0x1
  402a0f:	call   QWORD PTR [rip+0xc9e3]        # 0x40f3f8
  402a15:	test   eax,eax
  402a17:	jne    0x402845
  402a1d:	call   rbp
  402a1f:	mov    edi,eax
  402a21:	mov    rbx,QWORD PTR [rip+0xcb68]        # 0x40f590
  402a28:	call   rbx
  402a2a:	mov    r8d,edi
  402a2d:	lea    rcx,[rax+0x60]
  402a31:	lea    rdx,[rip+0x7928]        # 0x40a360
  402a38:	jmp    0x40282e
  402a3d:	nop
  402a3e:	nop
  402a3f:	nop
  402a40:	push   rbx
  402a41:	sub    rsp,0x220
  402a48:	test   ecx,0xffffff00
  402a4e:	je     0x402a80
  402a50:	lea    rbx,[rsp+0x20]
  402a55:	lea    r8,[rip+0x79bc]        # 0x40a418
  402a5c:	mov    r9d,ecx
  402a5f:	mov    edx,0x200
  402a64:	mov    rcx,rbx
  402a67:	call   0x403f90
  402a6c:	mov    rcx,rbx
  402a6f:	call   0x402ca0
  402a74:	add    rsp,0x220
  402a7b:	pop    rbx
  402a7c:	ret    
  402a7d:	nop    DWORD PTR [rax]
  402a80:	cmp    ecx,0x7e
  402a83:	je     0x402ac3
  402a85:	cmp    ecx,0x7f
  402a88:	jne    0x402aa5
  402a8a:	lea    rbx,[rsp+0x20]
  402a8f:	lea    r8,[rip+0x7941]        # 0x40a3d7
  402a96:	mov    edx,0x200
  402a9b:	mov    rcx,rbx
  402a9e:	call   0x403f90
  402aa3:	jmp    0x402a6c
  402aa5:	lea    rbx,[rsp+0x20]
  402aaa:	lea    r8,[rip+0x793f]        # 0x40a3f0
  402ab1:	mov    r9d,ecx
  402ab4:	mov    edx,0x200
  402ab9:	mov    rcx,rbx
  402abc:	call   0x403f90
  402ac1:	jmp    0x402a6c
  402ac3:	lea    rbx,[rsp+0x20]
  402ac8:	lea    r8,[rip+0x78f1]        # 0x40a3c0
  402acf:	mov    edx,0x200
  402ad4:	mov    rcx,rbx
  402ad7:	call   0x403f90
  402adc:	jmp    0x402a6c
  402ade:	nop
  402adf:	nop
  402ae0:	sub    rsp,0x28
  402ae4:	mov    eax,0x1
  402ae9:	test   rcx,rcx
  402aec:	cmove  rcx,rax
  402af0:	call   0x407060
  402af5:	test   rax,rax
  402af8:	je     0x402aff
  402afa:	add    rsp,0x28
  402afe:	ret    
  402aff:	call   QWORD PTR [rip+0xca8b]        # 0x40f590
  402b05:	lea    rdx,[rip+0x7944]        # 0x40a450
  402b0c:	lea    rcx,[rax+0x60]
  402b10:	call   0x4040e0
  402b15:	mov    ecx,0x1
  402b1a:	call   0x4070a8
  402b1f:	nop
  402b20:	push   rsi
  402b21:	push   rbx
  402b22:	sub    rsp,0x28
  402b26:	mov    rbx,rcx
  402b29:	call   0x402ae0
  402b2e:	mov    rsi,rax
  402b31:	or     rax,rbx
  402b34:	test   al,0x3
  402b36:	jne    0x402b70
  402b38:	cmp    rbx,0x400
  402b3f:	ja     0x402b70
  402b41:	add    rbx,rsi
  402b44:	mov    rdx,rsi
  402b47:	cmp    rsi,rbx
  402b4a:	jae    0x402b60
  402b4c:	nop    DWORD PTR [rax+0x0]
  402b50:	add    rdx,0x4
  402b54:	mov    DWORD PTR [rdx-0x4],0x0
  402b5b:	cmp    rbx,rdx
  402b5e:	ja     0x402b50
  402b60:	mov    rax,rsi
  402b63:	add    rsp,0x28
  402b67:	pop    rbx
  402b68:	pop    rsi
  402b69:	ret    
  402b6a:	nop    WORD PTR [rax+rax*1+0x0]
  402b70:	mov    r8,rbx
  402b73:	xor    edx,edx
  402b75:	mov    rcx,rsi
  402b78:	call   0x407040
  402b7d:	mov    rax,rsi
  402b80:	add    rsp,0x28
  402b84:	pop    rbx
  402b85:	pop    rsi
  402b86:	ret    
  402b87:	nop    WORD PTR [rax+rax*1+0x0]
  402b90:	sub    rsp,0x28
  402b94:	test   rcx,rcx
  402b97:	jne    0x402ba5
  402b99:	test   rdx,rdx
  402b9c:	mov    eax,0x1
  402ba1:	cmove  rdx,rax
  402ba5:	call   0x407038
  402baa:	test   rax,rax
  402bad:	je     0x402bb4
  402baf:	add    rsp,0x28
  402bb3:	ret    
  402bb4:	call   QWORD PTR [rip+0xc9d6]        # 0x40f590
  402bba:	lea    rdx,[rip+0x788f]        # 0x40a450
  402bc1:	lea    rcx,[rax+0x60]
  402bc5:	call   0x4040e0
  402bca:	mov    ecx,0x1
  402bcf:	call   0x4070a8
  402bd4:	nop
  402bd5:	nop
  402bd6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  402be0:	sub    rsp,0x28
  402be4:	test   rcx,rcx
  402be7:	je     0x402bf8
  402be9:	call   0x406fa8
  402bee:	test   rax,rax
  402bf1:	je     0x402c18
  402bf3:	add    rsp,0x28
  402bf7:	ret    
  402bf8:	call   QWORD PTR [rip+0xc992]        # 0x40f590
  402bfe:	lea    rdx,[rip+0x785b]        # 0x40a460
  402c05:	lea    rcx,[rax+0x60]
  402c09:	call   0x4040e0
  402c0e:	mov    ecx,0x1
  402c13:	call   0x4070a8
  402c18:	call   QWORD PTR [rip+0xc972]        # 0x40f590
  402c1e:	lea    rdx,[rip+0x782b]        # 0x40a450
  402c25:	lea    rcx,[rax+0x60]
  402c29:	call   0x4040e0
  402c2e:	mov    ecx,0x1
  402c33:	call   0x4070a8
  402c38:	nop
  402c39:	nop    DWORD PTR [rax+0x0]
  402c40:	test   rcx,rcx
  402c43:	je     0x402c50
  402c45:	jmp    0x407090
  402c4a:	nop    WORD PTR [rax+rax*1+0x0]
  402c50:	repz ret 
  402c52:	nop    DWORD PTR [rax+0x0]
  402c56:	nop    WORD PTR cs:[rax+rax*1+0x0]
  402c60:	jmp    0x402ae0
  402c65:	nop
  402c66:	nop    WORD PTR cs:[rax+rax*1+0x0]
  402c70:	jmp    0x402b20
  402c75:	nop
  402c76:	nop    WORD PTR cs:[rax+rax*1+0x0]
  402c80:	test   rcx,rcx
  402c83:	je     0x402c90
  402c85:	jmp    0x407090
  402c8a:	nop    WORD PTR [rax+rax*1+0x0]
  402c90:	repz ret 
  402c92:	nop    DWORD PTR [rax+0x0]
  402c96:	nop    WORD PTR cs:[rax+rax*1+0x0]
  402ca0:	jmp    0x402be0
  402ca5:	nop
  402ca6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  402cb0:	jmp    0x402b90
  402cb5:	nop
  402cb6:	nop
  402cb7:	nop
  402cb8:	nop
  402cb9:	nop
  402cba:	nop
  402cbb:	nop
  402cbc:	nop
  402cbd:	nop
  402cbe:	nop
  402cbf:	nop
  402cc0:	push   rbx
  402cc1:	sub    rsp,0x20
  402cc5:	test   r8,r8
  402cc8:	je     0x402d61
  402cce:	cmp    BYTE PTR [rcx],0x0
  402cd1:	je     0x402d65
  402cd7:	lea    r10,[rcx+0x1]
  402cdb:	lea    rax,[rcx+r8*1]
  402cdf:	jmp    0x402cec
  402ce1:	lea    r10,[r10+0x1]
  402ce5:	cmp    BYTE PTR [r10-0x1],0x0
  402cea:	je     0x402d40
  402cec:	cmp    r10,rax
  402cef:	mov    r9,r10
  402cf2:	jne    0x402ce1
  402cf4:	sub    rax,rcx
  402cf7:	mov    rbx,rax
  402cfa:	sub    r8,rbx
  402cfd:	je     0x402d4b
  402cff:	movzx  r11d,BYTE PTR [rdx]
  402d03:	mov    r10,rdx
  402d06:	test   r11b,r11b
  402d09:	je     0x402d5c
  402d0b:	nop    DWORD PTR [rax+rax*1+0x0]
  402d10:	cmp    r8,0x1
  402d14:	je     0x402d21
  402d16:	mov    BYTE PTR [r9],r11b
  402d19:	sub    r8,0x1
  402d1d:	add    r9,0x1
  402d21:	add    r10,0x1
  402d25:	movzx  r11d,BYTE PTR [r10]
  402d29:	test   r11b,r11b
  402d2c:	jne    0x402d10
  402d2e:	sub    r10,rdx
  402d31:	lea    rax,[r10+rbx*1]
  402d35:	mov    BYTE PTR [r9],0x0
  402d39:	add    rsp,0x20
  402d3d:	pop    rbx
  402d3e:	ret    
  402d3f:	nop
  402d40:	mov    rbx,r9
  402d43:	sub    rbx,rcx
  402d46:	sub    r8,rbx
  402d49:	jne    0x402cff
  402d4b:	mov    rcx,rdx
  402d4e:	call   0x406ff8
  402d53:	add    rax,rbx
  402d56:	add    rsp,0x20
  402d5a:	pop    rbx
  402d5b:	ret    
  402d5c:	xor    r10d,r10d
  402d5f:	jmp    0x402d31
  402d61:	xor    ebx,ebx
  402d63:	jmp    0x402d4b
  402d65:	mov    r9,rcx
  402d68:	xor    ebx,ebx
  402d6a:	jmp    0x402cff
  402d6c:	nop
  402d6d:	nop
  402d6e:	nop
  402d6f:	nop
  402d70:	test   r8,r8
  402d73:	je     0x402dc0
  402d75:	lea    rax,[rcx+r8*1-0x1]
  402d7a:	mov    r8,rdx
  402d7d:	jmp    0x402d96
  402d7f:	nop
  402d80:	add    r8,0x1
  402d84:	movzx  r9d,BYTE PTR [r8-0x1]
  402d89:	add    rcx,0x1
  402d8d:	test   r9b,r9b
  402d90:	mov    BYTE PTR [rcx-0x1],r9b
  402d94:	je     0x402db0
  402d96:	cmp    rcx,rax
  402d99:	jne    0x402d80
  402d9b:	add    r8,0x1
  402d9f:	mov    BYTE PTR [rcx],0x0
  402da2:	cmp    BYTE PTR [r8-0x1],0x0
  402da7:	jne    0x402dc3
  402da9:	nop    DWORD PTR [rax+0x0]
  402db0:	not    rdx
  402db3:	lea    rax,[r8+rdx*1]
  402db7:	ret    
  402db8:	nop    DWORD PTR [rax+rax*1+0x0]
  402dc0:	mov    r8,rdx
  402dc3:	add    r8,0x1
  402dc7:	cmp    BYTE PTR [r8-0x1],0x0
  402dcc:	jne    0x402dc3
  402dce:	not    rdx
  402dd1:	lea    rax,[r8+rdx*1]
  402dd5:	ret    
  402dd6:	nop
  402dd7:	nop
  402dd8:	nop
  402dd9:	nop
  402dda:	nop
  402ddb:	nop
  402ddc:	nop
  402ddd:	nop
  402dde:	nop
  402ddf:	nop
  402de0:	push   rsi
  402de1:	push   rbx
  402de2:	sub    rsp,0x28
  402de6:	mov    rsi,rcx
  402de9:	call   0x406fa8
  402dee:	test   rax,rax
  402df1:	mov    rbx,rax
  402df4:	je     0x402e48
  402df6:	mov    edx,0x3d
  402dfb:	mov    rcx,rax
  402dfe:	call   0x407018
  402e03:	test   rax,rax
  402e06:	je     0x402e40
  402e08:	cmp    BYTE PTR [rax+0x1],0x0
  402e0c:	mov    BYTE PTR [rax],0x0
  402e0f:	je     0x402e22
  402e11:	lea    rdx,[rax+0x1]
  402e15:	mov    rcx,rbx
  402e18:	call   QWORD PTR [rip+0xc6f2]        # 0x40f510
  402e1e:	test   eax,eax
  402e20:	je     0x402e40
  402e22:	mov    rcx,rbx
  402e25:	call   0x407090
  402e2a:	mov    rax,QWORD PTR [rip+0xc7c7]        # 0x40f5f8
  402e31:	mov    rcx,rsi
  402e34:	add    rsp,0x28
  402e38:	pop    rbx
  402e39:	pop    rsi
  402e3a:	rex.W jmp rax
  402e3d:	nop    DWORD PTR [rax]
  402e40:	mov    rcx,rbx
  402e43:	call   0x407090
  402e48:	mov    eax,0xffffffff
  402e4d:	add    rsp,0x28
  402e51:	pop    rbx
  402e52:	pop    rsi
  402e53:	ret    
  402e54:	xchg   ax,ax
  402e56:	nop    WORD PTR cs:[rax+rax*1+0x0]
  402e60:	push   rsi
  402e61:	push   rbx
  402e62:	sub    rsp,0x28
  402e66:	mov    rsi,rcx
  402e69:	call   0x406ff8
  402e6e:	lea    rcx,[rax+0x2]
  402e72:	call   0x407060
  402e77:	test   rax,rax
  402e7a:	mov    rbx,rax
  402e7d:	je     0x402eb0
  402e7f:	lea    rdx,[rip+0x760a]        # 0x40a490
  402e86:	mov    r8,rsi
  402e89:	mov    rcx,rax
  402e8c:	call   0x403fd0
  402e91:	mov    rcx,rbx
  402e94:	call   0x402de0
  402e99:	mov    rcx,rbx
  402e9c:	add    rsp,0x28
  402ea0:	pop    rbx
  402ea1:	pop    rsi
  402ea2:	jmp    0x407090
  402ea7:	nop    WORD PTR [rax+rax*1+0x0]
  402eb0:	add    rsp,0x28
  402eb4:	pop    rbx
  402eb5:	pop    rsi
  402eb6:	ret    
  402eb7:	nop
  402eb8:	nop
  402eb9:	nop
  402eba:	nop
  402ebb:	nop
  402ebc:	nop
  402ebd:	nop
  402ebe:	nop
  402ebf:	nop
  402ec0:	push   r15
  402ec2:	push   r14
  402ec4:	push   r13
  402ec6:	push   r12
  402ec8:	push   rbp
  402ec9:	push   rdi
  402eca:	push   rsi
  402ecb:	push   rbx
  402ecc:	sub    rsp,0x28
  402ed0:	mov    rsi,QWORD PTR [rcx]
  402ed3:	test   rsi,rsi
  402ed6:	je     0x402fee
  402edc:	mov    r12,rdx
  402edf:	mov    r14,rcx
  402ee2:	mov    r8,rcx
  402ee5:	xor    ebp,ebp
  402ee7:	nop    WORD PTR [rax+rax*1+0x0]
  402ef0:	mov    rdx,rsi
  402ef3:	mov    rcx,r12
  402ef6:	mov    rdi,QWORD PTR [r8+0x8]
  402efa:	mov    r13,QWORD PTR [r8+0x10]
  402efe:	call   0x406fd8
  402f03:	test   rax,rax
  402f06:	mov    rbx,rax
  402f09:	je     0x402fc1
  402f0f:	test   rdi,rdi
  402f12:	mov    rcx,rsi
  402f15:	je     0x402fe0
  402f1b:	call   0x406ff8
  402f20:	lea    rcx,[rbx+rax*1]
  402f24:	mov    rdx,rdi
  402f27:	call   0x406fd8
  402f2c:	test   rax,rax
  402f2f:	mov    rsi,rax
  402f32:	je     0x402fc1
  402f38:	mov    rcx,rdi
  402f3b:	call   0x406ff8
  402f40:	lea    rdi,[rsi+rax*1]
  402f44:	mov    rcx,r13
  402f47:	sub    rbx,r12
  402f4a:	call   0x406ff8
  402f4f:	mov    rcx,rdi
  402f52:	mov    rbp,rax
  402f55:	lea    r14d,[rbp+rbx*1+0x0]
  402f5a:	call   0x406ff8
  402f5f:	lea    esi,[rax+0x1]
  402f62:	xor    eax,eax
  402f64:	lea    r9d,[r14+rsi*1]
  402f68:	cmp    r9d,0x64
  402f6c:	jg     0x402fb0
  402f6e:	lea    r15,[rip+0xb50b]        # 0x40e480
  402f75:	movsxd rbx,ebx
  402f78:	mov    rdx,r12
  402f7b:	mov    r8,rbx
  402f7e:	mov    rcx,r15
  402f81:	call   0x407050
  402f86:	lea    rcx,[rbx+r15*1]
  402f8a:	movsxd r8,ebp
  402f8d:	mov    rdx,r13
  402f90:	call   0x407050
  402f95:	movsxd rcx,r14d
  402f98:	movsxd r8,esi
  402f9b:	mov    rdx,rdi
  402f9e:	add    rcx,r15
  402fa1:	call   0x407050
  402fa6:	mov    rax,r15
  402fa9:	nop    DWORD PTR [rax+0x0]
  402fb0:	add    rsp,0x28
  402fb4:	pop    rbx
  402fb5:	pop    rsi
  402fb6:	pop    rdi
  402fb7:	pop    rbp
  402fb8:	pop    r12
  402fba:	pop    r13
  402fbc:	pop    r14
  402fbe:	pop    r15
  402fc0:	ret    
  402fc1:	add    ebp,0x1
  402fc4:	movsxd rax,ebp
  402fc7:	lea    rax,[rax+rax*2]
  402fcb:	lea    r8,[r14+rax*8]
  402fcf:	mov    rsi,QWORD PTR [r8]
  402fd2:	test   rsi,rsi
  402fd5:	jne    0x402ef0
  402fdb:	mov    rax,r12
  402fde:	jmp    0x402fb0
  402fe0:	call   0x406ff8
  402fe5:	lea    rdi,[rbx+rax*1]
  402fe9:	jmp    0x402f44
  402fee:	mov    rax,rdx
  402ff1:	jmp    0x402fb0
  402ff3:	nop    DWORD PTR [rax]
  402ff6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403000:	push   rbx
  403001:	sub    rsp,0x20
  403005:	xor    eax,eax
  403007:	test   rdx,rdx
  40300a:	mov    ebx,ecx
  40300c:	je     0x40301a
  40300e:	lea    rcx,[rip+0x75eb]        # 0x40a600
  403015:	call   0x402ec0
  40301a:	mov    rdx,rax
  40301d:	mov    ecx,ebx
  40301f:	call   0x407030
  403024:	test   rax,rax
  403027:	je     0x403040
  403029:	lea    rcx,[rip+0x74d0]        # 0x40a500
  403030:	mov    rdx,rax
  403033:	add    rsp,0x20
  403037:	pop    rbx
  403038:	jmp    0x402ec0
  40303d:	nop    DWORD PTR [rax]
  403040:	xor    eax,eax
  403042:	add    rsp,0x20
  403046:	pop    rbx
  403047:	ret    
  403048:	nop
  403049:	nop
  40304a:	nop
  40304b:	nop
  40304c:	nop
  40304d:	nop
  40304e:	nop
  40304f:	nop
  403050:	push   rbx
  403051:	sub    rsp,0x20
  403055:	mov    rbx,rcx
  403058:	mov    rcx,QWORD PTR [rcx+0x8]
  40305c:	mov    r8,QWORD PTR [rbx]
  40305f:	sub    r8,rcx
  403062:	je     0x403079
  403064:	mov    r9,QWORD PTR [rbx+0x18]
  403068:	mov    edx,0x1
  40306d:	call   0x407088
  403072:	add    DWORD PTR [rbx+0x20],eax
  403075:	mov    rcx,QWORD PTR [rbx+0x8]
  403079:	mov    QWORD PTR [rbx],rcx
  40307c:	add    rsp,0x20
  403080:	pop    rbx
  403081:	ret    
  403082:	nop    DWORD PTR [rax+0x0]
  403086:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403090:	push   r12
  403092:	push   rbp
  403093:	push   rdi
  403094:	push   rsi
  403095:	push   rbx
  403096:	sub    rsp,0x20
  40309a:	test   edx,edx
  40309c:	mov    rbp,rcx
  40309f:	mov    edi,edx
  4030a1:	mov    rbx,r8
  4030a4:	jle    0x4030fd
  4030a6:	mov    rax,QWORD PTR [rbx+0x10]
  4030aa:	mov    rcx,QWORD PTR [rbx]
  4030ad:	test   rax,rax
  4030b0:	je     0x4030d7
  4030b2:	sub    rax,rcx
  4030b5:	test   eax,eax
  4030b7:	mov    r8d,eax
  4030ba:	jg     0x4030da
  4030bc:	cmp    QWORD PTR [rbx+0x18],0x0
  4030c1:	je     0x4030fd
  4030c3:	mov    rcx,rbx
  4030c6:	call   0x403050
  4030cb:	mov    rax,QWORD PTR [rbx+0x10]
  4030cf:	mov    rcx,QWORD PTR [rbx]
  4030d2:	test   rax,rax
  4030d5:	jne    0x4030b2
  4030d7:	mov    r8d,edi
  4030da:	cmp    r8d,edi
  4030dd:	mov    esi,r8d
  4030e0:	mov    rdx,rbp
  4030e3:	cmovg  esi,edi
  4030e6:	movsxd r12,esi
  4030e9:	sub    edi,esi
  4030eb:	mov    r8,r12
  4030ee:	add    rbp,r12
  4030f1:	call   0x407048
  4030f6:	add    QWORD PTR [rbx],r12
  4030f9:	test   edi,edi
  4030fb:	jg     0x4030a6
  4030fd:	add    rsp,0x20
  403101:	pop    rbx
  403102:	pop    rsi
  403103:	pop    rdi
  403104:	pop    rbp
  403105:	pop    r12
  403107:	ret    
  403108:	nop    DWORD PTR [rax+rax*1+0x0]
  403110:	push   rbx
  403111:	sub    rsp,0x30
  403115:	mov    r8,QWORD PTR [rdx+0x10]
  403119:	mov    rax,QWORD PTR [rdx]
  40311c:	mov    ebx,ecx
  40311e:	test   r8,r8
  403121:	je     0x403144
  403123:	cmp    r8,rax
  403126:	ja     0x403144
  403128:	cmp    QWORD PTR [rdx+0x18],0x0
  40312d:	je     0x40314d
  40312f:	mov    rcx,rdx
  403132:	mov    QWORD PTR [rsp+0x28],rdx
  403137:	call   0x403050
  40313c:	mov    rdx,QWORD PTR [rsp+0x28]
  403141:	mov    rax,QWORD PTR [rdx]
  403144:	lea    rcx,[rax+0x1]
  403148:	mov    QWORD PTR [rdx],rcx
  40314b:	mov    BYTE PTR [rax],bl
  40314d:	add    rsp,0x30
  403151:	pop    rbx
  403152:	ret    
  403153:	nop    DWORD PTR [rax]
  403156:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403160:	push   rbp
  403161:	push   rdi
  403162:	push   rsi
  403163:	push   rbx
  403164:	sub    rsp,0x28
  403168:	mov    eax,DWORD PTR [r8]
  40316b:	mov    ebp,ecx
  40316d:	mov    rdi,rdx
  403170:	mov    rbx,r8
  403173:	mov    rsi,r9
  403176:	mov    ecx,DWORD PTR [rdx]
  403178:	test   eax,eax
  40317a:	jle    0x4031c0
  40317c:	test   ebp,ebp
  40317e:	je     0x4031c0
  403180:	test   ecx,ecx
  403182:	jne    0x403215
  403188:	nop    DWORD PTR [rax+rax*1+0x0]
  403190:	mov    rdx,rsi
  403193:	mov    ecx,ebp
  403195:	call   0x403110
  40319a:	mov    eax,DWORD PTR [rbx]
  40319c:	sub    eax,0x1
  40319f:	test   eax,eax
  4031a1:	mov    DWORD PTR [rbx],eax
  4031a3:	jg     0x403190
  4031a5:	mov    ecx,DWORD PTR [rdi]
  4031a7:	test   ecx,ecx
  4031a9:	jne    0x4031f8
  4031ab:	nop    DWORD PTR [rax+rax*1+0x0]
  4031b0:	add    rsp,0x28
  4031b4:	pop    rbx
  4031b5:	pop    rsi
  4031b6:	pop    rdi
  4031b7:	pop    rbp
  4031b8:	ret    
  4031b9:	nop    DWORD PTR [rax+0x0]
  4031c0:	xor    edx,edx
  4031c2:	test   ecx,ecx
  4031c4:	setne  dl
  4031c7:	cmp    eax,edx
  4031c9:	jle    0x4031a7
  4031cb:	nop    DWORD PTR [rax+rax*1+0x0]
  4031d0:	mov    ecx,0x20
  4031d5:	mov    rdx,rsi
  4031d8:	call   0x403110
  4031dd:	mov    eax,DWORD PTR [rbx]
  4031df:	xor    r8d,r8d
  4031e2:	sub    eax,0x1
  4031e5:	mov    DWORD PTR [rbx],eax
  4031e7:	mov    ecx,DWORD PTR [rdi]
  4031e9:	test   ecx,ecx
  4031eb:	setne  r8b
  4031ef:	cmp    r8d,eax
  4031f2:	jl     0x4031d0
  4031f4:	test   ecx,ecx
  4031f6:	je     0x4031b0
  4031f8:	mov    rdx,rsi
  4031fb:	call   0x403110
  403200:	mov    eax,DWORD PTR [rbx]
  403202:	cmp    eax,0x0
  403205:	jle    0x403235
  403207:	sub    eax,0x1
  40320a:	mov    DWORD PTR [rbx],eax
  40320c:	add    rsp,0x28
  403210:	pop    rbx
  403211:	pop    rsi
  403212:	pop    rdi
  403213:	pop    rbp
  403214:	ret    
  403215:	mov    rdx,r9
  403218:	call   0x403110
  40321d:	sub    DWORD PTR [rbx],0x1
  403220:	mov    DWORD PTR [rdi],0x0
  403226:	mov    eax,DWORD PTR [rbx]
  403228:	test   eax,eax
  40322a:	jg     0x403190
  403230:	jmp    0x4031a5
  403235:	je     0x4031b0
  40323b:	add    eax,0x1
  40323e:	mov    DWORD PTR [rbx],eax
  403240:	jmp    0x4031b0
  403245:	nop
  403246:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403250:	push   rbp
  403251:	push   rdi
  403252:	push   rsi
  403253:	push   rbx
  403254:	sub    rsp,0x78
  403258:	mov    edi,DWORD PTR [rsp+0xd0]
  40325f:	mov    rsi,QWORD PTR [rsp+0xe0]
  403267:	sub    edx,0x58
  40326a:	mov    DWORD PTR [rsp+0x28],0x0
  403272:	mov    DWORD PTR [rsp+0x2c],0x0
  40327a:	cmp    dl,0x20
  40327d:	ja     0x4032c5
  40327f:	lea    rax,[rip+0x745e]        # 0x40a6e4
  403286:	movzx  edx,dl
  403289:	movsxd rdx,DWORD PTR [rax+rdx*4]
  40328d:	add    rax,rdx
  403290:	jmp    rax
  403292:	sub    ebx,0x1
  403295:	mov    rdx,rsi
  403298:	movsxd rax,ebx
  40329b:	movsx  ecx,BYTE PTR [rsp+rax*1+0x30]
  4032a0:	call   0x403110
  4032a5:	test   ebx,ebx
  4032a7:	jne    0x403292
  4032a9:	mov    eax,DWORD PTR [rsp+0x2c]
  4032ad:	test   eax,eax
  4032af:	jns    0x4032c5
  4032b1:	mov    rdx,rsi
  4032b4:	mov    ecx,0x20
  4032b9:	call   0x403110
  4032be:	add    DWORD PTR [rsp+0x2c],0x1
  4032c3:	js     0x4032b1
  4032c5:	add    rsp,0x78
  4032c9:	pop    rbx
  4032ca:	pop    rsi
  4032cb:	pop    rdi
  4032cc:	pop    rbp
  4032cd:	ret    
  4032ce:	test   rcx,rcx
  4032d1:	js     0x40337a
  4032d7:	test   r8d,r8d
  4032da:	je     0x4032e4
  4032dc:	mov    DWORD PTR [rsp+0x28],0x2b
  4032e4:	lea    r11,[rip+0x73d5]        # 0x40a6c0
  4032eb:	mov    r10d,0xa
  4032f1:	mov    edx,DWORD PTR [rsp+0xd8]
  4032f8:	test   edx,edx
  4032fa:	setne  dl
  4032fd:	test   edi,edi
  4032ff:	sete   al
  403302:	test   dl,al
  403304:	je     0x403392
  40330a:	xor    ebx,ebx
  40330c:	test   rcx,rcx
  40330f:	jne    0x403392
  403315:	mov    eax,DWORD PTR [rsp+0xc0]
  40331c:	xor    edx,edx
  40331e:	sub    edi,ebx
  403320:	mov    ebp,edi
  403322:	cmovs  ebp,edx
  403325:	sub    eax,ebx
  403327:	sub    eax,ebp
  403329:	cmovs  eax,edx
  40332c:	test   r9d,r9d
  40332f:	mov    DWORD PTR [rsp+0x2c],eax
  403333:	je     0x403339
  403335:	neg    DWORD PTR [rsp+0x2c]
  403339:	mov    ecx,DWORD PTR [rsp+0xc8]
  403340:	lea    rdx,[rsp+0x28]
  403345:	lea    r8,[rsp+0x2c]
  40334a:	mov    r9,rsi
  40334d:	lea    edi,[rbp-0x1]
  403350:	call   0x403160
  403355:	test   ebp,ebp
  403357:	je     0x4032a5
  40335d:	nop    DWORD PTR [rax]
  403360:	mov    rdx,rsi
  403363:	mov    ecx,0x30
  403368:	sub    edi,0x1
  40336b:	call   0x403110
  403370:	cmp    edi,0xffffffff
  403373:	jne    0x403360
  403375:	jmp    0x4032a5
  40337a:	lea    r11,[rip+0x733f]        # 0x40a6c0
  403381:	mov    DWORD PTR [rsp+0x28],0x2d
  403389:	neg    rcx
  40338c:	mov    r10d,0xa
  403392:	lea    r8,[rsp+0x30]
  403397:	mov    rax,rcx
  40339a:	xor    ebx,ebx
  40339c:	nop    DWORD PTR [rax+0x0]
  4033a0:	xor    edx,edx
  4033a2:	add    ebx,0x1
  4033a5:	add    r8,0x1
  4033a9:	div    r10
  4033ac:	movzx  edx,BYTE PTR [r11+rdx*1]
  4033b1:	mov    BYTE PTR [r8-0x1],dl
  4033b5:	test   rax,rax
  4033b8:	jne    0x4033a0
  4033ba:	jmp    0x403315
  4033bf:	lea    r11,[rip+0x72fa]        # 0x40a6c0
  4033c6:	mov    r10d,0x10
  4033cc:	jmp    0x4032f1
  4033d1:	lea    r11,[rip+0x72e8]        # 0x40a6c0
  4033d8:	mov    r10d,0x8
  4033de:	jmp    0x4032f1
  4033e3:	lea    r11,[rip+0x72e7]        # 0x40a6d1
  4033ea:	mov    r10d,0x10
  4033f0:	jmp    0x4032f1
  4033f5:	nop
  4033f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403400:	push   r15
  403402:	push   r14
  403404:	push   r13
  403406:	push   r12
  403408:	push   rbp
  403409:	push   rdi
  40340a:	push   rsi
  40340b:	push   rbx
  40340c:	sub    rsp,0x5c8
  403413:	movaps XMMWORD PTR [rsp+0x590],xmm6
  40341b:	movaps XMMWORD PTR [rsp+0x5a0],xmm7
  403423:	movaps XMMWORD PTR [rsp+0x5b0],xmm8
  40342c:	lea    r10,[rsp+0xb0]
  403434:	mov    rbp,rdx
  403437:	mov    r15,rcx
  40343a:	mov    r14,r8
  40343d:	lea    rdx,[r10+0x44]
  403441:	mov    rax,r10
  403444:	add    rax,0x4
  403448:	mov    DWORD PTR [rax-0x4],0x0
  40344f:	cmp    rax,rdx
  403452:	jb     0x403444
  403454:	lea    r8,[rip+0x731d]        # 0x40a778
  40345b:	mov    rax,rbp
  40345e:	xor    edi,edi
  403460:	xor    ebx,ebx
  403462:	mov    BYTE PTR [rsp+0x54],0x0
  403467:	nop    WORD PTR [rax+rax*1+0x0]
  403470:	add    rax,0x1
  403474:	movsx  edx,BYTE PTR [rax-0x1]
  403478:	test   edx,edx
  40347a:	je     0x4034d0
  40347c:	cmp    edx,0x25
  40347f:	jne    0x403470
  403481:	xor    r9d,r9d
  403484:	xor    r13d,r13d
  403487:	xor    r12d,r12d
  40348a:	xor    r11d,r11d
  40348d:	xor    esi,esi
  40348f:	add    rax,0x1
  403493:	movsx  ecx,BYTE PTR [rax-0x1]
  403497:	test   ecx,ecx
  403499:	mov    edx,ecx
  40349b:	je     0x4034d0
  40349d:	sub    edx,0x24
  4034a0:	cmp    dl,0x56
  4034a3:	ja     0x4035f0
  4034a9:	movzx  edx,dl
  4034ac:	movsxd rdx,DWORD PTR [r8+rdx*4]
  4034b0:	add    rdx,r8
  4034b3:	jmp    rdx
  4034b5:	add    rax,0x1
  4034b9:	movsx  ecx,BYTE PTR [rax-0x1]
  4034bd:	mov    r12d,0x1
  4034c3:	test   ecx,ecx
  4034c5:	mov    edx,ecx
  4034c7:	jne    0x40349d
  4034c9:	nop    DWORD PTR [rax+0x0]
  4034d0:	movzx  eax,BYTE PTR [rsp+0x54]
  4034d5:	test   bl,bl
  4034d7:	mov    BYTE PTR [rsp+0x5e],al
  4034db:	je     0x4034e5
  4034dd:	test   al,al
  4034df:	jne    0x4037b0
  4034e5:	test   edi,edi
  4034e7:	je     0x4036dc
  4034ed:	lea    rcx,[rsp+0x108]
  4034f5:	lea    r8,[rip+0x73d8]        # 0x40a8d4
  4034fc:	add    r10,0x4
  403500:	mov    edx,0x1
  403505:	cmp    DWORD PTR [r10],0x5
  403509:	ja     0x4036c9
  40350f:	mov    eax,DWORD PTR [r10]
  403512:	movsxd rax,DWORD PTR [r8+rax*4]
  403516:	add    rax,r8
  403519:	jmp    rax
  40351b:	nop    DWORD PTR [rax+rax*1+0x0]
  403520:	test   r9d,r9d
  403523:	je     0x4036b0
  403529:	movsxd rdx,r9d
  40352c:	mov    ecx,DWORD PTR [rsp+rdx*4+0xb0]
  403533:	cmp    ecx,0x5
  403536:	je     0x403540
  403538:	test   ecx,ecx
  40353a:	jne    0x4037b0
  403540:	cmp    edi,r9d
  403543:	mov    DWORD PTR [rsp+rdx*4+0xb0],0x5
  40354e:	cmovl  edi,r9d
  403552:	jmp    0x4035f0
  403557:	nop    WORD PTR [rax+rax*1+0x0]
  403560:	lea    edx,[r11-0x1]
  403564:	cmp    edx,0xf
  403567:	ja     0x4037b0
  40356d:	test   sil,sil
  403570:	je     0x4037f4
  403576:	movsxd rdx,r11d
  403579:	cmp    DWORD PTR [rsp+rdx*4+0xb0],0x1
  403581:	ja     0x4037b0
  403587:	cmp    edi,r11d
  40358a:	mov    DWORD PTR [rsp+rdx*4+0xb0],0x1
  403595:	mov    BYTE PTR [rsp+0x54],0x1
  40359a:	cmovl  edi,r11d
  40359e:	xor    r11d,r11d
  4035a1:	xor    esi,esi
  4035a3:	jmp    0x40348f
  4035a8:	nop    DWORD PTR [rax+rax*1+0x0]
  4035b0:	test   r13d,r13d
  4035b3:	jne    0x4034b5
  4035b9:	mov    r13b,0x1
  4035bc:	jmp    0x40348f
  4035c1:	test   r9d,r9d
  4035c4:	je     0x4036b0
  4035ca:	movsxd rdx,r9d
  4035cd:	test   DWORD PTR [rsp+rdx*4+0xb0],0xfffffffb
  4035d8:	jne    0x4037b0
  4035de:	cmp    edi,r9d
  4035e1:	mov    DWORD PTR [rsp+rdx*4+0xb0],0x4
  4035ec:	cmovl  edi,r9d
  4035f0:	test   sil,sil
  4035f3:	mov    edx,0x1
  4035f8:	cmovne ebx,edx
  4035fb:	jmp    0x403470
  403600:	xor    r11d,r11d
  403603:	jmp    0x40348f
  403608:	nop    DWORD PTR [rax+rax*1+0x0]
  403610:	xor    r11d,r11d
  403613:	test   sil,sil
  403616:	mov    esi,0x1
  40361b:	je     0x40348f
  403621:	mov    ebx,0x1
  403626:	jmp    0x40348f
  40362b:	nop    DWORD PTR [rax+rax*1+0x0]
  403630:	test   r9d,r9d
  403633:	je     0x4036b0
  403635:	movsxd rdx,r9d
  403638:	cmp    DWORD PTR [rsp+rdx*4+0xb0],0x1
  403640:	ja     0x4037b0
  403646:	cmp    edi,r9d
  403649:	mov    DWORD PTR [rsp+rdx*4+0xb0],0x1
  403654:	cmovl  edi,r9d
  403658:	jmp    0x4035f0
  40365a:	nop    WORD PTR [rax+rax*1+0x0]
  403660:	test   r9d,r9d
  403663:	je     0x4036b0
  403665:	test   r12d,r12d
  403668:	mov    ecx,0x3
  40366d:	je     0x403804
  403673:	movsxd rdx,r9d
  403676:	mov    r11d,DWORD PTR [rsp+rdx*4+0xb0]
  40367e:	cmp    ecx,r11d
  403681:	je     0x40368c
  403683:	test   r11d,r11d
  403686:	jne    0x4037b0
  40368c:	cmp    edi,r9d
  40368f:	mov    DWORD PTR [rsp+rdx*4+0xb0],ecx
  403696:	cmovl  edi,r9d
  40369a:	jmp    0x4035f0
  40369f:	nop
  4036a0:	lea    edx,[r11+r11*4]
  4036a4:	lea    r11d,[rcx+rdx*2-0x30]
  4036a9:	jmp    0x40348f
  4036ae:	xchg   ax,ax
  4036b0:	mov    ebx,0x1
  4036b5:	jmp    0x4035f0
  4036ba:	nop    WORD PTR [rax+rax*1+0x0]
  4036c0:	mov    eax,DWORD PTR [r14]
  4036c3:	add    r14,0x8
  4036c7:	mov    DWORD PTR [rcx],eax
  4036c9:	add    edx,0x1
  4036cc:	add    r10,0x4
  4036d0:	add    rcx,0x8
  4036d4:	cmp    edi,edx
  4036d6:	jge    0x403505
  4036dc:	lea    rax,[rsp+0x190]
  4036e4:	pxor   xmm8,xmm8
  4036e9:	movsd  xmm7,QWORD PTR [rip+0x735f]        # 0x40aa50
  4036f1:	mov    QWORD PTR [rsp+0x60],rax
  4036f6:	lea    rax,[rsp+0x8c]
  4036fe:	mov    QWORD PTR [rsp+0x70],rax
  403703:	lea    rax,[rsp+0x88]
  40370b:	mov    QWORD PTR [rsp+0x78],rax
  403710:	lea    rax,[rsp+0x90]
  403718:	mov    QWORD PTR [rsp+0x68],rax
  40371d:	nop    DWORD PTR [rax]
  403720:	movsx  ecx,BYTE PTR [rbp+0x0]
  403724:	lea    rbx,[rbp+0x1]
  403728:	test   ecx,ecx
  40372a:	je     0x403a2a
  403730:	cmp    ecx,0x25
  403733:	jne    0x403a31
  403739:	lea    rcx,[rip+0x71ac]        # 0x40a8ec
  403740:	xor    r12d,r12d
  403743:	mov    DWORD PTR [rsp+0x54],0x0
  40374b:	xor    r13d,r13d
  40374e:	xor    r9d,r9d
  403751:	xor    esi,esi
  403753:	xor    edi,edi
  403755:	xor    r10d,r10d
  403758:	mov    DWORD PTR [rsp+0x58],0x0
  403760:	xor    ebp,ebp
  403762:	xor    r8d,r8d
  403765:	mov    BYTE PTR [rsp+0x5f],0x0
  40376a:	xor    r11d,r11d
  40376d:	add    rbx,0x1
  403771:	movsx  edx,BYTE PTR [rbx-0x1]
  403775:	test   edx,edx
  403777:	mov    eax,edx
  403779:	je     0x403a2a
  40377f:	sub    eax,0x24
  403782:	cmp    al,0x56
  403784:	ja     0x403a17
  40378a:	movzx  eax,al
  40378d:	movsxd rax,DWORD PTR [rcx+rax*4]
  403791:	add    rax,rcx
  403794:	jmp    rax
  403796:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4037a0:	mov    rax,QWORD PTR [r14]
  4037a3:	add    r14,0x8
  4037a7:	mov    QWORD PTR [rcx],rax
  4037aa:	jmp    0x4036c9
  4037af:	nop
  4037b0:	mov    eax,0xffffffff
  4037b5:	movaps xmm6,XMMWORD PTR [rsp+0x590]
  4037bd:	movaps xmm7,XMMWORD PTR [rsp+0x5a0]
  4037c5:	movaps xmm8,XMMWORD PTR [rsp+0x5b0]
  4037ce:	add    rsp,0x5c8
  4037d5:	pop    rbx
  4037d6:	pop    rsi
  4037d7:	pop    rdi
  4037d8:	pop    rbp
  4037d9:	pop    r12
  4037db:	pop    r13
  4037dd:	pop    r14
  4037df:	pop    r15
  4037e1:	ret    
  4037e2:	movsd  xmm0,QWORD PTR [r14]
  4037e7:	add    r14,0x8
  4037eb:	movsd  QWORD PTR [rcx],xmm0
  4037ef:	jmp    0x4036c9
  4037f4:	mov    r9d,r11d
  4037f7:	mov    BYTE PTR [rsp+0x54],0x1
  4037fc:	xor    r11d,r11d
  4037ff:	jmp    0x40348f
  403804:	movsxd rdx,r9d
  403807:	cmp    r13d,0x1
  40380b:	mov    r11d,DWORD PTR [rsp+rdx*4+0xb0]
  403813:	sbb    ecx,ecx
  403815:	add    ecx,0x2
  403818:	cmp    ecx,r11d
  40381b:	jne    0x403683
  403821:	jmp    0x40368c
  403826:	mov    eax,r10d
  403829:	or     eax,r8d
  40382c:	mov    eax,0x30
  403831:	cmove  r13d,eax
  403835:	lea    eax,[r8+r8*4]
  403839:	lea    r8d,[rdx+rax*2-0x30]
  40383e:	jmp    0x40376d
  403843:	mov    ebp,0x1
  403848:	jmp    0x40376d
  40384d:	test   r11b,r11b
  403850:	mov    rax,r14
  403853:	jne    0x403860
  403855:	test   r10d,r10d
  403858:	cmovne r9d,r8d
  40385c:	cmove  esi,r8d
  403860:	cmp    BYTE PTR [rsp+0x5e],0x0
  403865:	je     0x403d8c
  40386b:	movsxd rax,r12d
  40386e:	movsd  xmm6,QWORD PTR [rsp+rax*8+0x100]
  403877:	test   r10d,r10d
  40387a:	mov    DWORD PTR [rsp+0x88],0x0
  403885:	mov    DWORD PTR [rsp+0x8c],0x0
  403890:	je     0x403d22
  403896:	test   r9d,r9d
  403899:	mov    ebp,0x0
  40389e:	mov    r12d,0x15e
  4038a4:	cmovns ebp,r9d
  4038a8:	mov    rcx,QWORD PTR [rsp+0x68]
  4038ad:	mov    r9d,edx
  4038b0:	cmp    ebp,0x15e
  4038b6:	lea    rdx,[rip+0x6eae]        # 0x40a76b
  4038bd:	cmovle r12d,ebp
  4038c1:	mov    r8d,r12d
  4038c4:	sub    ebp,r12d
  4038c7:	call   0x407020
  4038cc:	movq   rax,xmm6
  4038d1:	mov    edx,eax
  4038d3:	neg    edx
  4038d5:	or     edx,eax
  4038d7:	shr    rax,0x20
  4038db:	shr    edx,0x1f
  4038de:	and    eax,0x7fffffff
  4038e3:	or     eax,edx
  4038e5:	mov    edx,0x7ff00000
  4038ea:	cmp    edx,eax
  4038ec:	js     0x40390c
  4038ee:	ucomisd xmm8,xmm6
  4038f3:	ja     0x403dfc
  4038f9:	mov    edx,DWORD PTR [rsp+0x54]
  4038fd:	test   edx,edx
  4038ff:	je     0x40390c
  403901:	mov    DWORD PTR [rsp+0x88],0x2b
  40390c:	mov    rdx,QWORD PTR [rsp+0x68]
  403911:	mov    rcx,QWORD PTR [rsp+0x60]
  403916:	movq   r8,xmm6
  40391b:	movapd xmm2,xmm6
  40391f:	call   0x407020
  403924:	test   ebp,ebp
  403926:	mov    r12d,eax
  403929:	jle    0x403946
  40392b:	lea    eax,[rax-0x1]
  40392e:	cdqe   
  403930:	movzx  eax,BYTE PTR [rsp+rax*1+0x190]
  403938:	sub    eax,0x30
  40393b:	cmp    eax,0xa
  40393e:	mov    eax,0x0
  403943:	cmovae ebp,eax
  403946:	sub    esi,r12d
  403949:	mov    eax,0x0
  40394e:	sub    esi,ebp
  403950:	cmovns eax,esi
  403953:	test   edi,edi
  403955:	mov    DWORD PTR [rsp+0x8c],eax
  40395c:	je     0x403965
  40395e:	neg    DWORD PTR [rsp+0x8c]
  403965:	mov    r8,QWORD PTR [rsp+0x70]
  40396a:	mov    rdx,QWORD PTR [rsp+0x78]
  40396f:	mov    r9,r15
  403972:	mov    ecx,r13d
  403975:	call   0x403160
  40397a:	test   ebp,ebp
  40397c:	jle    0x403e10
  403982:	mov    rcx,QWORD PTR [rsp+0x60]
  403987:	mov    edx,0x65
  40398c:	call   0x406fe0
  403991:	test   rax,rax
  403994:	mov    rsi,rax
  403997:	je     0x403e25
  40399d:	mov    rax,QWORD PTR [rsp+0x60]
  4039a2:	mov    rdx,rsi
  4039a5:	mov    r8,r15
  4039a8:	sub    ebp,0x1
  4039ab:	sub    rdx,rax
  4039ae:	mov    rcx,rax
  4039b1:	call   0x403090
  4039b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4039c0:	mov    rdx,r15
  4039c3:	mov    ecx,0x30
  4039c8:	sub    ebp,0x1
  4039cb:	call   0x403110
  4039d0:	cmp    ebp,0xffffffff
  4039d3:	jne    0x4039c0
  4039d5:	mov    rdx,QWORD PTR [rsp+0x60]
  4039da:	mov    r8,r15
  4039dd:	mov    rcx,rsi
  4039e0:	sub    rdx,rsi
  4039e3:	add    edx,r12d
  4039e6:	call   0x403090
  4039eb:	mov    eax,DWORD PTR [rsp+0x8c]
  4039f2:	test   eax,eax
  4039f4:	jns    0x403a17
  4039f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403a00:	mov    rdx,r15
  403a03:	mov    ecx,0x20
  403a08:	call   0x403110
  403a0d:	add    DWORD PTR [rsp+0x8c],0x1
  403a15:	js     0x403a00
  403a17:	mov    rbp,rbx
  403a1a:	movsx  ecx,BYTE PTR [rbp+0x0]
  403a1e:	lea    rbx,[rbp+0x1]
  403a22:	test   ecx,ecx
  403a24:	jne    0x403730
  403a2a:	xor    eax,eax
  403a2c:	jmp    0x4037b5
  403a31:	mov    rdx,r15
  403a34:	mov    rbp,rbx
  403a37:	call   0x403110
  403a3c:	jmp    0x403720
  403a41:	test   r11b,r11b
  403a44:	mov    rbp,rbx
  403a47:	mov    rax,r14
  403a4a:	jne    0x403a57
  403a4c:	test   r10d,r10d
  403a4f:	cmovne r9d,r8d
  403a53:	cmove  esi,r8d
  403a57:	cmp    BYTE PTR [rsp+0x5e],0x0
  403a5c:	je     0x403d16
  403a62:	movsxd rax,r12d
  403a65:	mov    rbx,QWORD PTR [rsp+rax*8+0x100]
  403a6d:	test   r10d,r10d
  403a70:	je     0x403cc9
  403a76:	movsxd rdx,r9d
  403a79:	test   rdx,rdx
  403a7c:	je     0x403ef7
  403a82:	cmp    BYTE PTR [rbx],0x0
  403a85:	je     0x403ef7
  403a8b:	lea    rax,[rbx+0x1]
  403a8f:	add    rdx,rbx
  403a92:	jmp    0x403aa2
  403a94:	add    rax,0x1
  403a98:	cmp    BYTE PTR [rax-0x1],0x0
  403a9c:	je     0x403df4
  403aa2:	cmp    rax,rdx
  403aa5:	mov    r12,rax
  403aa8:	jne    0x403a94
  403aaa:	mov    r12d,eax
  403aad:	sub    r12d,ebx
  403ab0:	jmp    0x403cd4
  403ab5:	cmp    BYTE PTR [rsp+0x5e],0x0
  403aba:	mov    rax,r14
  403abd:	je     0x403d99
  403ac3:	movsxd rax,r12d
  403ac6:	mov    r8,QWORD PTR [rsp+rax*8+0x100]
  403ace:	mov    rsi,QWORD PTR [rsp+0x60]
  403ad3:	lea    rdx,[rip+0x6c8e]        # 0x40a768
  403ada:	mov    rbp,rbx
  403add:	mov    rcx,rsi
  403ae0:	call   0x407020
  403ae5:	mov    r8,r15
  403ae8:	mov    edx,eax
  403aea:	mov    rcx,rsi
  403aed:	call   0x403090
  403af2:	jmp    0x403720
  403af7:	mov    eax,DWORD PTR [rsp+0x58]
  403afb:	test   eax,eax
  403afd:	jne    0x403843
  403b03:	mov    DWORD PTR [rsp+0x58],0x1
  403b0b:	jmp    0x40376d
  403b10:	test   r11b,r11b
  403b13:	mov    rbp,rbx
  403b16:	mov    rax,r14
  403b19:	jne    0x403b22
  403b1b:	test   r10d,r10d
  403b1e:	cmove  esi,r8d
  403b22:	cmp    BYTE PTR [rsp+0x5e],0x0
  403b27:	je     0x403d75
  403b2d:	movsxd rax,r12d
  403b30:	movzx  ebx,BYTE PTR [rsp+rax*8+0x100]
  403b38:	sub    esi,0x1
  403b3b:	mov    eax,0x0
  403b40:	cmovns eax,esi
  403b43:	mov    edx,eax
  403b45:	mov    eax,edi
  403b47:	neg    eax
  403b49:	xor    eax,edx
  403b4b:	add    edi,eax
  403b4d:	test   edi,edi
  403b4f:	jle    0x403e9a
  403b55:	mov    rdx,r15
  403b58:	mov    ecx,0x20
  403b5d:	call   0x403110
  403b62:	sub    edi,0x1
  403b65:	jne    0x403b55
  403b67:	mov    rdx,r15
  403b6a:	mov    ecx,ebx
  403b6c:	call   0x403110
  403b71:	jmp    0x403720
  403b76:	test   r11b,r11b
  403b79:	mov    rax,r14
  403b7c:	jne    0x403b89
  403b7e:	test   r10d,r10d
  403b81:	cmovne r9d,r8d
  403b85:	cmove  esi,r8d
  403b89:	cmp    BYTE PTR [rsp+0x5e],0x0
  403b8e:	je     0x403cb5
  403b94:	test   ebp,ebp
  403b96:	movsxd rax,r12d
  403b99:	je     0x403de8
  403b9f:	mov    rcx,QWORD PTR [rsp+rax*8+0x100]
  403ba7:	mov    r8d,DWORD PTR [rsp+0x54]
  403bac:	mov    DWORD PTR [rsp+0x30],r9d
  403bb1:	mov    r9d,edi
  403bb4:	mov    QWORD PTR [rsp+0x40],r15
  403bb9:	mov    DWORD PTR [rsp+0x38],r10d
  403bbe:	mov    rbp,rbx
  403bc1:	mov    DWORD PTR [rsp+0x28],r13d
  403bc6:	mov    DWORD PTR [rsp+0x20],esi
  403bca:	call   0x403250
  403bcf:	jmp    0x403720
  403bd4:	test   r11b,r11b
  403bd7:	mov    rax,r14
  403bda:	jne    0x403be7
  403bdc:	test   r10d,r10d
  403bdf:	cmovne r9d,r8d
  403be3:	cmove  esi,r8d
  403be7:	cmp    BYTE PTR [rsp+0x5e],0x0
  403bec:	je     0x403d4e
  403bf2:	test   ebp,ebp
  403bf4:	movsxd rax,r12d
  403bf7:	jne    0x403b9f
  403bf9:	movsxd rcx,DWORD PTR [rsp+rax*8+0x100]
  403c01:	jmp    0x403ba7
  403c03:	mov    DWORD PTR [rsp+0x54],0x1
  403c0b:	jmp    0x40376d
  403c10:	test   r11b,r11b
  403c13:	jne    0x403d3d
  403c19:	mov    esi,r8d
  403c1c:	mov    r10d,0x1
  403c22:	xor    r8d,r8d
  403c25:	jmp    0x40376d
  403c2a:	mov    edi,0x1
  403c2f:	jmp    0x40376d
  403c34:	mov    rdx,r15
  403c37:	mov    ecx,0x25
  403c3c:	mov    rbp,rbx
  403c3f:	call   0x403110
  403c44:	jmp    0x403720
  403c49:	cmp    BYTE PTR [rsp+0x5f],0x0
  403c4e:	je     0x403d81
  403c54:	movsxd r8,r8d
  403c57:	test   r10d,r10d
  403c5a:	mov    eax,DWORD PTR [rsp+r8*8+0x100]
  403c62:	jne    0x403dcc
  403c68:	test   eax,eax
  403c6a:	js     0x403ee1
  403c70:	mov    esi,eax
  403c72:	xor    r8d,r8d
  403c75:	mov    BYTE PTR [rsp+0x5f],0x0
  403c7a:	jmp    0x40376d
  403c7f:	cmp    BYTE PTR [rsp+0x5e],0x0
  403c84:	jne    0x403d62
  403c8a:	test   r10d,r10d
  403c8d:	lea    rdx,[r14+0x8]
  403c91:	mov    eax,DWORD PTR [r14]
  403c94:	jne    0x403dac
  403c9a:	test   eax,eax
  403c9c:	js     0x403ec7
  403ca2:	mov    esi,eax
  403ca4:	mov    r14,rdx
  403ca7:	xor    r8d,r8d
  403caa:	mov    r11d,0x1
  403cb0:	jmp    0x40376d
  403cb5:	add    r14,0x8
  403cb9:	test   ebp,ebp
  403cbb:	je     0x403da5
  403cc1:	mov    rcx,QWORD PTR [rax]
  403cc4:	jmp    0x403ba7
  403cc9:	mov    rcx,rbx
  403ccc:	call   0x406ff8
  403cd1:	mov    r12d,eax
  403cd4:	sub    esi,r12d
  403cd7:	mov    eax,0x0
  403cdc:	cmovns eax,esi
  403cdf:	mov    edx,eax
  403ce1:	mov    eax,edi
  403ce3:	neg    eax
  403ce5:	xor    eax,edx
  403ce7:	add    edi,eax
  403ce9:	test   edi,edi
  403ceb:	jle    0x403e6d
  403cf1:	mov    rdx,r15
  403cf4:	mov    ecx,0x20
  403cf9:	call   0x403110
  403cfe:	sub    edi,0x1
  403d01:	jne    0x403cf1
  403d03:	mov    r8,r15
  403d06:	mov    edx,r12d
  403d09:	mov    rcx,rbx
  403d0c:	call   0x403090
  403d11:	jmp    0x403720
  403d16:	add    r14,0x8
  403d1a:	mov    rbx,QWORD PTR [rax]
  403d1d:	jmp    0x403a6d
  403d22:	mov    rcx,QWORD PTR [rsp+0x68]
  403d27:	mov    r8d,edx
  403d2a:	lea    rdx,[rip+0x6a42]        # 0x40a773
  403d31:	xor    ebp,ebp
  403d33:	call   0x407020
  403d38:	jmp    0x4038cc
  403d3d:	mov    r10d,0x1
  403d43:	xor    r8d,r8d
  403d46:	xor    r11d,r11d
  403d49:	jmp    0x40376d
  403d4e:	add    r14,0x8
  403d52:	test   ebp,ebp
  403d54:	jne    0x403cc1
  403d5a:	movsxd rcx,DWORD PTR [rax]
  403d5d:	jmp    0x403ba7
  403d62:	xor    r8d,r8d
  403d65:	mov    BYTE PTR [rsp+0x5f],0x1
  403d6a:	mov    r11d,0x1
  403d70:	jmp    0x40376d
  403d75:	add    r14,0x8
  403d79:	movzx  ebx,BYTE PTR [rax]
  403d7c:	jmp    0x403b38
  403d81:	mov    r12d,r8d
  403d84:	xor    r8d,r8d
  403d87:	jmp    0x40376d
  403d8c:	add    r14,0x8
  403d90:	movsd  xmm6,QWORD PTR [rax]
  403d94:	jmp    0x403877
  403d99:	add    r14,0x8
  403d9d:	mov    r8,QWORD PTR [rax]
  403da0:	jmp    0x403ace
  403da5:	mov    ecx,DWORD PTR [rax]
  403da7:	jmp    0x403ba7
  403dac:	mov    r14,rdx
  403daf:	xor    edx,edx
  403db1:	test   eax,eax
  403db3:	mov    r9d,edx
  403db6:	cmovs  r10d,edx
  403dba:	mov    r11d,0x1
  403dc0:	cmovns r9d,eax
  403dc4:	xor    r8d,r8d
  403dc7:	jmp    0x40376d
  403dcc:	xor    edx,edx
  403dce:	test   eax,eax
  403dd0:	mov    BYTE PTR [rsp+0x5f],0x0
  403dd5:	mov    r9d,edx
  403dd8:	cmovs  r10d,edx
  403ddc:	cmovns r9d,eax
  403de0:	xor    r8d,r8d
  403de3:	jmp    0x40376d
  403de8:	mov    ecx,DWORD PTR [rsp+rax*8+0x100]
  403def:	jmp    0x403ba7
  403df4:	sub    r12d,ebx
  403df7:	jmp    0x403cd4
  403dfc:	mov    DWORD PTR [rsp+0x88],0x2d
  403e07:	xorpd  xmm6,xmm7
  403e0b:	jmp    0x40390c
  403e10:	mov    rcx,QWORD PTR [rsp+0x60]
  403e15:	mov    r8,r15
  403e18:	mov    edx,r12d
  403e1b:	call   0x403090
  403e20:	jmp    0x4039eb
  403e25:	mov    rcx,QWORD PTR [rsp+0x60]
  403e2a:	mov    edx,0x45
  403e2f:	call   0x406fe0
  403e34:	test   rax,rax
  403e37:	mov    rsi,rax
  403e3a:	jne    0x40399d
  403e40:	mov    rcx,QWORD PTR [rsp+0x60]
  403e45:	mov    r8,r15
  403e48:	mov    edx,r12d
  403e4b:	sub    ebp,0x1
  403e4e:	call   0x403090
  403e53:	mov    rdx,r15
  403e56:	mov    ecx,0x30
  403e5b:	sub    ebp,0x1
  403e5e:	call   0x403110
  403e63:	cmp    ebp,0xffffffff
  403e66:	jne    0x403e53
  403e68:	jmp    0x4039eb
  403e6d:	mov    r8,r15
  403e70:	mov    edx,r12d
  403e73:	mov    rcx,rbx
  403e76:	call   0x403090
  403e7b:	test   edi,edi
  403e7d:	je     0x403720
  403e83:	mov    rdx,r15
  403e86:	mov    ecx,0x20
  403e8b:	call   0x403110
  403e90:	add    edi,0x1
  403e93:	jne    0x403e83
  403e95:	jmp    0x403720
  403e9a:	mov    rdx,r15
  403e9d:	mov    ecx,ebx
  403e9f:	call   0x403110
  403ea4:	test   edi,edi
  403ea6:	je     0x403720
  403eac:	nop    DWORD PTR [rax+0x0]
  403eb0:	mov    rdx,r15
  403eb3:	mov    ecx,0x20
  403eb8:	call   0x403110
  403ebd:	add    edi,0x1
  403ec0:	jne    0x403eb0
  403ec2:	jmp    0x403720
  403ec7:	neg    eax
  403ec9:	mov    r14,rdx
  403ecc:	mov    edi,0x1
  403ed1:	mov    esi,eax
  403ed3:	xor    r8d,r8d
  403ed6:	mov    r11d,0x1
  403edc:	jmp    0x40376d
  403ee1:	neg    eax
  403ee3:	mov    edi,0x1
  403ee8:	xor    r8d,r8d
  403eeb:	mov    esi,eax
  403eed:	mov    BYTE PTR [rsp+0x5f],0x0
  403ef2:	jmp    0x40376d
  403ef7:	xor    r12d,r12d
  403efa:	jmp    0x403cd4
  403eff:	nop
  403f00:	sub    rsp,0x58
  403f04:	lea    rdx,[rcx+rdx*1-0x1]
  403f09:	mov    rax,r8
  403f0c:	mov    QWORD PTR [rsp+0x20],rcx
  403f11:	mov    QWORD PTR [rsp+0x28],rcx
  403f16:	lea    rcx,[rsp+0x20]
  403f1b:	mov    r8,r9
  403f1e:	mov    QWORD PTR [rsp+0x30],rdx
  403f23:	mov    rdx,rax
  403f26:	mov    QWORD PTR [rsp+0x38],0x0
  403f2f:	call   0x403400
  403f34:	test   eax,eax
  403f36:	mov    rax,QWORD PTR [rsp+0x20]
  403f3b:	mov    BYTE PTR [rax],0x0
  403f3e:	jne    0x403f50
  403f40:	mov    rax,QWORD PTR [rsp+0x20]
  403f45:	sub    eax,DWORD PTR [rsp+0x28]
  403f49:	add    rsp,0x58
  403f4d:	ret    
  403f4e:	xchg   ax,ax
  403f50:	call   QWORD PTR [rip+0xb672]        # 0x40f5c8
  403f56:	mov    DWORD PTR [rax],0x16
  403f5c:	mov    eax,0xffffffff
  403f61:	jmp    0x403f49
  403f63:	nop    DWORD PTR [rax]
  403f66:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403f70:	test   rcx,rcx
  403f73:	je     0x403f80
  403f75:	test   rdx,rdx
  403f78:	je     0x403f80
  403f7a:	jmp    0x403f00
  403f7c:	nop    DWORD PTR [rax+0x0]
  403f80:	xor    eax,eax
  403f82:	ret    
  403f83:	nop    DWORD PTR [rax]
  403f86:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403f90:	sub    rsp,0x38
  403f94:	mov    QWORD PTR [rsp+0x58],r9
  403f99:	lea    r9,[rsp+0x58]
  403f9e:	test   rcx,rcx
  403fa1:	mov    QWORD PTR [rsp+0x28],r9
  403fa6:	je     0x403fc0
  403fa8:	test   rdx,rdx
  403fab:	je     0x403fc0
  403fad:	call   0x403f00
  403fb2:	add    rsp,0x38
  403fb6:	ret    
  403fb7:	nop    WORD PTR [rax+rax*1+0x0]
  403fc0:	xor    eax,eax
  403fc2:	add    rsp,0x38
  403fc6:	ret    
  403fc7:	nop    WORD PTR [rax+rax*1+0x0]
  403fd0:	sub    rsp,0x68
  403fd4:	xor    eax,eax
  403fd6:	mov    QWORD PTR [rsp+0x80],r8
  403fde:	lea    r8,[rsp+0x80]
  403fe6:	test   rcx,rcx
  403fe9:	mov    QWORD PTR [rsp+0x88],r9
  403ff1:	mov    QWORD PTR [rsp+0x28],r8
  403ff6:	je     0x404033
  403ff8:	mov    QWORD PTR [rsp+0x30],rcx
  403ffd:	mov    QWORD PTR [rsp+0x38],rcx
  404002:	lea    rcx,[rsp+0x30]
  404007:	mov    QWORD PTR [rsp+0x40],0x0
  404010:	mov    QWORD PTR [rsp+0x48],0x0
  404019:	call   0x403400
  40401e:	test   eax,eax
  404020:	mov    rax,QWORD PTR [rsp+0x30]
  404025:	mov    BYTE PTR [rax],0x0
  404028:	jne    0x404040
  40402a:	mov    rax,QWORD PTR [rsp+0x30]
  40402f:	sub    eax,DWORD PTR [rsp+0x38]
  404033:	add    rsp,0x68
  404037:	ret    
  404038:	nop    DWORD PTR [rax+rax*1+0x0]
  404040:	call   QWORD PTR [rip+0xb582]        # 0x40f5c8
  404046:	mov    DWORD PTR [rax],0x16
  40404c:	mov    eax,0xffffffff
  404051:	jmp    0x404033
  404053:	nop    DWORD PTR [rax]
  404056:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404060:	push   rbx
  404061:	sub    rsp,0x450
  404068:	test   rcx,rcx
  40406b:	je     0x4040c0
  40406d:	lea    rax,[rsp+0x50]
  404072:	lea    rbx,[rsp+0x20]
  404077:	mov    QWORD PTR [rsp+0x38],rcx
  40407c:	mov    DWORD PTR [rsp+0x40],0x0
  404084:	mov    QWORD PTR [rsp+0x20],rax
  404089:	mov    QWORD PTR [rsp+0x28],rax
  40408e:	lea    rax,[rsp+0x44f]
  404096:	mov    rcx,rbx
  404099:	mov    QWORD PTR [rsp+0x30],rax
  40409e:	call   0x403400
  4040a3:	test   eax,eax
  4040a5:	jne    0x4040c0
  4040a7:	mov    rcx,rbx
  4040aa:	call   0x403050
  4040af:	mov    eax,DWORD PTR [rsp+0x40]
  4040b3:	add    rsp,0x450
  4040ba:	pop    rbx
  4040bb:	ret    
  4040bc:	nop    DWORD PTR [rax+0x0]
  4040c0:	call   QWORD PTR [rip+0xb502]        # 0x40f5c8
  4040c6:	mov    DWORD PTR [rax],0x16
  4040cc:	mov    eax,0xffffffff
  4040d1:	jmp    0x4040b3
  4040d3:	nop    DWORD PTR [rax]
  4040d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4040e0:	sub    rsp,0x38
  4040e4:	mov    QWORD PTR [rsp+0x50],r8
  4040e9:	lea    r8,[rsp+0x50]
  4040ee:	mov    QWORD PTR [rsp+0x58],r9
  4040f3:	mov    QWORD PTR [rsp+0x28],r8
  4040f8:	call   0x404060
  4040fd:	add    rsp,0x38
  404101:	ret    
  404102:	nop    DWORD PTR [rax+0x0]
  404106:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404110:	push   rsi
  404111:	push   rbx
  404112:	sub    rsp,0x38
  404116:	lea    rbx,[rsp+0x58]
  40411b:	mov    rsi,rcx
  40411e:	mov    QWORD PTR [rsp+0x58],rdx
  404123:	mov    QWORD PTR [rsp+0x60],r8
  404128:	mov    QWORD PTR [rsp+0x68],r9
  40412d:	mov    QWORD PTR [rsp+0x28],rbx
  404132:	call   QWORD PTR [rip+0xb458]        # 0x40f590
  404138:	lea    rcx,[rax+0x30]
  40413c:	mov    r8,rbx
  40413f:	mov    rdx,rsi
  404142:	call   0x404060
  404147:	add    rsp,0x38
  40414b:	pop    rbx
  40414c:	pop    rsi
  40414d:	ret    
  40414e:	nop
  40414f:	nop
  404150:	push   r13
  404152:	push   r12
  404154:	push   rbp
  404155:	push   rdi
  404156:	push   rsi
  404157:	push   rbx
  404158:	sub    rsp,0x28
  40415c:	mov    esi,0x65
  404161:	mov    rdi,QWORD PTR [rip+0xb360]        # 0x40f4c8
  404168:	mov    r13,QWORD PTR [rip+0xb311]        # 0x40f480
  40416f:	mov    r12,rcx
  404172:	mov    rbp,rdx
  404175:	jmp    0x4041a8
  404177:	nop    WORD PTR [rax+rax*1+0x0]
  404180:	call   r13
  404183:	mov    ebx,eax
  404185:	mov    ecx,eax
  404187:	call   0x405780
  40418c:	lea    eax,[rbx-0x20]
  40418f:	cmp    eax,0x1
  404192:	jbe    0x404199
  404194:	cmp    ebx,0x5
  404197:	jne    0x4041d0
  404199:	sub    esi,0x1
  40419c:	je     0x4041d0
  40419e:	mov    ecx,0x186a0
  4041a3:	call   0x4054b0
  4041a8:	mov    r8d,0x1
  4041ae:	mov    rdx,rbp
  4041b1:	mov    rcx,r12
  4041b4:	call   rdi
  4041b6:	test   eax,eax
  4041b8:	je     0x404180
  4041ba:	xor    eax,eax
  4041bc:	add    rsp,0x28
  4041c0:	pop    rbx
  4041c1:	pop    rsi
  4041c2:	pop    rdi
  4041c3:	pop    rbp
  4041c4:	pop    r12
  4041c6:	pop    r13
  4041c8:	ret    
  4041c9:	nop    DWORD PTR [rax+0x0]
  4041d0:	mov    eax,0xffffffff
  4041d5:	add    rsp,0x28
  4041d9:	pop    rbx
  4041da:	pop    rsi
  4041db:	pop    rdi
  4041dc:	pop    rbp
  4041dd:	pop    r12
  4041df:	pop    r13
  4041e1:	ret    
  4041e2:	nop    DWORD PTR [rax+0x0]
  4041e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4041f0:	push   rdi
  4041f1:	push   rsi
  4041f2:	push   rbx
  4041f3:	sub    rsp,0x20
  4041f7:	mov    ebx,0x65
  4041fc:	mov    rdi,QWORD PTR [rip+0xb3c5]        # 0x40f5c8
  404203:	mov    rsi,rcx
  404206:	jmp    0x404226
  404208:	nop    DWORD PTR [rax+rax*1+0x0]
  404210:	call   rdi
  404212:	cmp    DWORD PTR [rax],0xd
  404215:	jne    0x404240
  404217:	sub    ebx,0x1
  40421a:	je     0x404240
  40421c:	mov    ecx,0x186a0
  404221:	call   0x4054b0
  404226:	mov    rcx,rsi
  404229:	call   0x406fb0
  40422e:	test   eax,eax
  404230:	jne    0x404210
  404232:	add    rsp,0x20
  404236:	pop    rbx
  404237:	pop    rsi
  404238:	pop    rdi
  404239:	ret    
  40423a:	nop    WORD PTR [rax+rax*1+0x0]
  404240:	mov    eax,0xffffffff
  404245:	add    rsp,0x20
  404249:	pop    rbx
  40424a:	pop    rsi
  40424b:	pop    rdi
  40424c:	ret    
  40424d:	nop    DWORD PTR [rax]
  404250:	push   rbp
  404251:	push   rdi
  404252:	push   rsi
  404253:	push   rbx
  404254:	sub    rsp,0x388
  40425b:	mov    rdi,rdx
  40425e:	mov    rbp,rcx
  404261:	xor    edx,edx
  404263:	mov    rcx,rdi
  404266:	call   QWORD PTR [rip+0xb1a4]        # 0x40f410
  40426c:	xor    r9d,r9d
  40426f:	xor    r8d,r8d
  404272:	mov    QWORD PTR [rsp+0x30],0x0
  40427b:	mov    DWORD PTR [rsp+0x28],0x2200000
  404283:	mov    DWORD PTR [rsp+0x20],0x3
  40428b:	mov    edx,0xc0000000
  404290:	mov    rcx,rdi
  404293:	call   QWORD PTR [rip+0xb17f]        # 0x40f418
  404299:	cmp    rax,0xffffffffffffffff
  40429d:	mov    rbx,rax
  4042a0:	je     0x4044b2
  4042a6:	lea    rcx,[rip+0x67b3]        # 0x40aa60
  4042ad:	mov    r8d,0x4
  4042b3:	mov    rdx,rbp
  4042b6:	lea    rsi,[rsp+0x50]
  4042bb:	call   0x407058
  4042c0:	test   eax,eax
  4042c2:	jne    0x404410
  4042c8:	mov    rdx,rbp
  4042cb:	mov    rcx,rsi
  4042ce:	call   0x407008
  4042d3:	mov    rcx,rsi
  4042d6:	jmp    0x4042e7
  4042d8:	nop    DWORD PTR [rax+rax*1+0x0]
  4042e0:	lea    rcx,[rax+0x1]
  4042e4:	mov    BYTE PTR [rax],0x5c
  4042e7:	mov    edx,0x2f
  4042ec:	call   0x407018
  4042f1:	test   rax,rax
  4042f4:	jne    0x4042e0
  4042f6:	mov    r9,rsi
  4042f9:	mov    edx,DWORD PTR [r9]
  4042fc:	add    r9,0x4
  404300:	lea    eax,[rdx-0x1010101]
  404306:	not    edx
  404308:	and    eax,edx
  40430a:	and    eax,0x80808080
  40430f:	je     0x4042f9
  404311:	mov    edx,eax
  404313:	mov    r8,rsi
  404316:	mov    DWORD PTR [rsp+0x160],0xa0000003
  404321:	shr    edx,0x10
  404324:	test   eax,0x8080
  404329:	mov    DWORD PTR [rsp+0x28],0x104
  404331:	cmove  eax,edx
  404334:	lea    rdx,[r9+0x2]
  404338:	lea    rbp,[rsp+0x160]
  404340:	cmove  r9,rdx
  404344:	add    al,al
  404346:	sbb    r9,0x3
  40434a:	xor    edx,edx
  40434c:	xor    ecx,ecx
  40434e:	sub    r9,rsi
  404351:	mov    WORD PTR [rsp+0x168],dx
  404359:	mov    WORD PTR [rsp+0x16e],cx
  404361:	add    r9d,r9d
  404364:	xor    edx,edx
  404366:	xor    ecx,ecx
  404368:	lea    eax,[r9+0xc]
  40436c:	mov    DWORD PTR [rsp+0x44],r9d
  404371:	mov    WORD PTR [rsp+0x16a],r9w
  40437a:	add    r9d,0x2
  40437e:	mov    WORD PTR [rsp+0x164],ax
  404386:	xor    eax,eax
  404388:	mov    WORD PTR [rsp+0x16c],r9w
  404391:	mov    WORD PTR [rsp+0x166],ax
  404399:	lea    rax,[rsp+0x170]
  4043a1:	mov    r9d,0xffffffff
  4043a7:	mov    QWORD PTR [rsp+0x20],rax
  4043ac:	call   QWORD PTR [rip+0xb11e]        # 0x40f4d0
  4043b2:	movzx  eax,WORD PTR [rsp+0x164]
  4043ba:	lea    rdx,[rsp+0x44]
  4043bf:	mov    QWORD PTR [rsp+0x38],0x0
  4043c8:	mov    DWORD PTR [rsp+0x28],0x0
  4043d0:	mov    QWORD PTR [rsp+0x20],0x0
  4043d9:	mov    r8,rbp
  4043dc:	mov    QWORD PTR [rsp+0x30],rdx
  4043e1:	mov    rcx,rbx
  4043e4:	mov    edx,0x900a4
  4043e9:	lea    r9d,[rax+0x8]
  4043ed:	call   QWORD PTR [rip+0xb045]        # 0x40f438
  4043f3:	test   eax,eax
  4043f5:	je     0x404427
  4043f7:	mov    rcx,rbx
  4043fa:	call   QWORD PTR [rip+0xb008]        # 0x40f408
  404400:	xor    eax,eax
  404402:	add    rsp,0x388
  404409:	pop    rbx
  40440a:	pop    rsi
  40440b:	pop    rdi
  40440c:	pop    rbp
  40440d:	ret    
  40440e:	xchg   ax,ax
  404410:	lea    rdx,[rip+0x664e]        # 0x40aa65
  404417:	mov    r8,rbp
  40441a:	mov    rcx,rsi
  40441d:	call   0x403fd0
  404422:	jmp    0x4042d3
  404427:	call   QWORD PTR [rip+0xb19b]        # 0x40f5c8
  40442d:	mov    DWORD PTR [rax],0x0
  404433:	call   QWORD PTR [rip+0xb047]        # 0x40f480
  404439:	mov    r8d,eax
  40443c:	lea    rax,[rsp+0x48]
  404441:	mov    r9d,0x409
  404447:	xor    edx,edx
  404449:	mov    ecx,0x1100
  40444e:	mov    QWORD PTR [rsp+0x30],0x0
  404457:	mov    DWORD PTR [rsp+0x28],0x0
  40445f:	mov    QWORD PTR [rsp+0x20],rax
  404464:	call   QWORD PTR [rip+0xafe6]        # 0x40f450
  40446a:	mov    rbp,QWORD PTR [rsp+0x48]
  40446f:	call   QWORD PTR [rip+0xb11b]        # 0x40f590
  404475:	lea    rdx,[rip+0x65f4]        # 0x40aa70
  40447c:	lea    rcx,[rax+0x60]
  404480:	mov    r8,rsi
  404483:	mov    r9,rbp
  404486:	call   0x4040e0
  40448b:	mov    rcx,QWORD PTR [rsp+0x48]
  404490:	call   QWORD PTR [rip+0xb02a]        # 0x40f4c0
  404496:	mov    rcx,rbx
  404499:	call   QWORD PTR [rip+0xaf69]        # 0x40f408
  40449f:	mov    rcx,rdi
  4044a2:	call   QWORD PTR [rip+0xb040]        # 0x40f4e8
  4044a8:	mov    eax,0xffffffff
  4044ad:	jmp    0x404402
  4044b2:	jmp    0x404402
  4044b7:	nop    WORD PTR [rax+rax*1+0x0]
  4044c0:	push   r12
  4044c2:	push   rbp
  4044c3:	push   rdi
  4044c4:	push   rsi
  4044c5:	push   rbx
  4044c6:	sub    rsp,0x270
  4044cd:	mov    rdi,rcx
  4044d0:	mov    r12,rdx
  4044d3:	mov    rsi,r8
  4044d6:	call   QWORD PTR [rip+0xaf94]        # 0x40f470
  4044dc:	cmp    eax,0xffffffff
  4044df:	mov    ebx,eax
  4044e1:	je     0x4046c0
  4044e7:	and    bh,0x4
  4044ea:	je     0x404611
  4044f0:	xor    r9d,r9d
  4044f3:	mov    QWORD PTR [rsp+0x30],0x0
  4044fc:	mov    DWORD PTR [rsp+0x28],0x2200000
  404504:	mov    DWORD PTR [rsp+0x20],0x3
  40450c:	mov    r8d,0x3
  404512:	mov    edx,0x80000000
  404517:	mov    rcx,rdi
  40451a:	call   QWORD PTR [rip+0xaef8]        # 0x40f418
  404520:	cmp    rax,0xffffffffffffffff
  404524:	mov    rbx,rax
  404527:	je     0x4046c0
  40452d:	lea    rax,[rsp+0x44]
  404532:	lea    rbp,[rsp+0x50]
  404537:	xor    r9d,r9d
  40453a:	xor    r8d,r8d
  40453d:	mov    QWORD PTR [rsp+0x38],0x0
  404546:	mov    DWORD PTR [rsp+0x28],0x21c
  40454e:	mov    QWORD PTR [rsp+0x30],rax
  404553:	mov    QWORD PTR [rsp+0x20],rbp
  404558:	mov    edx,0x900a8
  40455d:	mov    rcx,rbx
  404560:	call   QWORD PTR [rip+0xaed2]        # 0x40f438
  404566:	test   eax,eax
  404568:	je     0x404632
  40456e:	mov    rcx,rbx
  404571:	call   QWORD PTR [rip+0xae91]        # 0x40f408
  404577:	cmp    DWORD PTR [rsp+0x50],0xa0000003
  40457f:	jne    0x404611
  404585:	xor    edx,edx
  404587:	xor    ecx,ecx
  404589:	mov    QWORD PTR [rsp+0x38],0x0
  404592:	mov    QWORD PTR [rsp+0x30],0x0
  40459b:	mov    DWORD PTR [rsp+0x28],esi
  40459f:	mov    r9d,0xffffffff
  4045a5:	mov    QWORD PTR [rsp+0x20],r12
  4045aa:	lea    r8,[rbp+0x10]
  4045ae:	call   QWORD PTR [rip+0xafac]        # 0x40f560
  4045b4:	test   eax,eax
  4045b6:	jle    0x404611
  4045b8:	cmp    eax,0x4
  4045bb:	mov    ebx,eax
  4045bd:	jle    0x4045d2
  4045bf:	lea    rdi,[rip+0x649a]        # 0x40aa60
  4045c6:	mov    ecx,0x4
  4045cb:	mov    rsi,r12
  4045ce:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
  4045d0:	je     0x4045e2
  4045d2:	mov    eax,ebx
  4045d4:	add    rsp,0x270
  4045db:	pop    rbx
  4045dc:	pop    rsi
  4045dd:	pop    rdi
  4045de:	pop    rbp
  4045df:	pop    r12
  4045e1:	ret    
  4045e2:	lea    rsi,[r12+0x4]
  4045e7:	sub    ebx,0x4
  4045ea:	mov    rcx,rsi
  4045ed:	call   0x406ff8
  4045f2:	lea    r8,[rax+0x1]
  4045f6:	mov    rdx,rsi
  4045f9:	mov    rcx,r12
  4045fc:	call   0x407048
  404601:	mov    eax,ebx
  404603:	add    rsp,0x270
  40460a:	pop    rbx
  40460b:	pop    rsi
  40460c:	pop    rdi
  40460d:	pop    rbp
  40460e:	pop    r12
  404610:	ret    
  404611:	mov    ebx,0xffffffff
  404616:	call   QWORD PTR [rip+0xafac]        # 0x40f5c8
  40461c:	mov    DWORD PTR [rax],0x16
  404622:	mov    eax,ebx
  404624:	add    rsp,0x270
  40462b:	pop    rbx
  40462c:	pop    rsi
  40462d:	pop    rdi
  40462e:	pop    rbp
  40462f:	pop    r12
  404631:	ret    
  404632:	mov    rsi,QWORD PTR [rip+0xaf8f]        # 0x40f5c8
  404639:	call   rsi
  40463b:	mov    DWORD PTR [rax],0x0
  404641:	call   QWORD PTR [rip+0xae39]        # 0x40f480
  404647:	mov    r8d,eax
  40464a:	lea    rax,[rsp+0x48]
  40464f:	mov    r9d,0x409
  404655:	xor    edx,edx
  404657:	mov    ecx,0x1100
  40465c:	mov    QWORD PTR [rsp+0x30],0x0
  404665:	mov    DWORD PTR [rsp+0x28],0x0
  40466d:	mov    QWORD PTR [rsp+0x20],rax
  404672:	call   QWORD PTR [rip+0xadd8]        # 0x40f450
  404678:	mov    rbp,QWORD PTR [rsp+0x48]
  40467d:	call   QWORD PTR [rip+0xaf0d]        # 0x40f590
  404683:	lea    rdx,[rip+0x640e]        # 0x40aa98
  40468a:	lea    rcx,[rax+0x60]
  40468e:	mov    r8,rdi
  404691:	mov    r9,rbp
  404694:	call   0x4040e0
  404699:	mov    rcx,QWORD PTR [rsp+0x48]
  40469e:	call   QWORD PTR [rip+0xae1c]        # 0x40f4c0
  4046a4:	mov    rcx,rbx
  4046a7:	mov    ebx,0xffffffff
  4046ac:	call   QWORD PTR [rip+0xad56]        # 0x40f408
  4046b2:	call   rsi
  4046b4:	mov    DWORD PTR [rax],0x16
  4046ba:	jmp    0x4045d2
  4046bf:	nop
  4046c0:	call   QWORD PTR [rip+0xadba]        # 0x40f480
  4046c6:	mov    ecx,eax
  4046c8:	call   0x405780
  4046cd:	jmp    0x4045d2
  4046d2:	nop    DWORD PTR [rax+0x0]
  4046d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4046e0:	sub    rsp,0x28
  4046e4:	call   QWORD PTR [rip+0xad86]        # 0x40f470
  4046ea:	mov    edx,eax
  4046ec:	shr    edx,0xa
  4046ef:	and    edx,0x1
  4046f2:	cmp    eax,0xffffffff
  4046f5:	je     0x404700
  4046f7:	mov    eax,edx
  4046f9:	add    rsp,0x28
  4046fd:	ret    
  4046fe:	xchg   ax,ax
  404700:	call   QWORD PTR [rip+0xad7a]        # 0x40f480
  404706:	mov    ecx,eax
  404708:	call   0x405780
  40470d:	xor    edx,edx
  40470f:	jmp    0x4046f7
  404711:	nop    DWORD PTR [rax+rax*1+0x0]
  404716:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404720:	push   rsi
  404721:	push   rbx
  404722:	sub    rsp,0x58
  404726:	mov    rbx,rcx
  404729:	mov    rsi,rdx
  40472c:	call   0x406d80
  404731:	test   eax,eax
  404733:	js     0x404752
  404735:	xor    edx,edx
  404737:	lea    r8,[rsp+0x20]
  40473c:	mov    rcx,rbx
  40473f:	call   QWORD PTR [rip+0xad33]        # 0x40f478
  404745:	test   eax,eax
  404747:	je     0x404760
  404749:	mov    eax,DWORD PTR [rsp+0x40]
  40474d:	mov    DWORD PTR [rsi+0x14],eax
  404750:	xor    eax,eax
  404752:	add    rsp,0x58
  404756:	pop    rbx
  404757:	pop    rsi
  404758:	ret    
  404759:	nop    DWORD PTR [rax+0x0]
  404760:	call   QWORD PTR [rip+0xad1a]        # 0x40f480
  404766:	mov    ecx,eax
  404768:	call   0x405780
  40476d:	mov    eax,0xffffffff
  404772:	jmp    0x404752
  404774:	nop
  404775:	nop
  404776:	nop
  404777:	nop
  404778:	nop
  404779:	nop
  40477a:	nop
  40477b:	nop
  40477c:	nop
  40477d:	nop
  40477e:	nop
  40477f:	nop
  404780:	push   rbx
  404781:	sub    rsp,0x20
  404785:	mov    rbx,rcx
  404788:	movzx  ecx,BYTE PTR [rcx]
  40478b:	cmp    cl,0x5c
  40478e:	je     0x4047b4
  404790:	cmp    cl,0x2f
  404793:	je     0x4047b4
  404795:	call   QWORD PTR [rip+0xaead]        # 0x40f648
  40479b:	test   eax,eax
  40479d:	je     0x4047ab
  40479f:	cmp    BYTE PTR [rbx+0x1],0x3a
  4047a3:	lea    rax,[rbx+0x2]
  4047a7:	cmove  rbx,rax
  4047ab:	mov    rax,rbx
  4047ae:	add    rsp,0x20
  4047b2:	pop    rbx
  4047b3:	ret    
  4047b4:	movzx  eax,BYTE PTR [rbx+0x1]
  4047b8:	cmp    al,0x5c
  4047ba:	je     0x4047c0
  4047bc:	cmp    al,0x2f
  4047be:	jne    0x404795
  4047c0:	movzx  eax,BYTE PTR [rbx+0x2]
  4047c4:	lea    rdx,[rbx+0x2]
  4047c8:	mov    rbx,rdx
  4047cb:	test   al,al
  4047cd:	je     0x4047ab
  4047cf:	cmp    al,0x2f
  4047d1:	je     0x4047ab
  4047d3:	cmp    al,0x5c
  4047d5:	jne    0x4047e8
  4047d7:	jmp    0x4047ab
  4047d9:	nop    DWORD PTR [rax+0x0]
  4047e0:	cmp    al,0x5c
  4047e2:	je     0x4047ab
  4047e4:	cmp    al,0x2f
  4047e6:	je     0x4047ab
  4047e8:	add    rbx,0x1
  4047ec:	movzx  eax,BYTE PTR [rbx]
  4047ef:	test   al,al
  4047f1:	jne    0x4047e0
  4047f3:	mov    rax,rbx
  4047f6:	add    rsp,0x20
  4047fa:	pop    rbx
  4047fb:	ret    
  4047fc:	nop    DWORD PTR [rax+0x0]
  404800:	push   rbx
  404801:	sub    rsp,0x20
  404805:	call   0x404780
  40480a:	mov    rbx,rax
  40480d:	mov    rcx,rax
  404810:	call   0x406ff8
  404815:	add    rax,rbx
  404818:	cmp    rbx,rax
  40481b:	jae    0x40484e
  40481d:	lea    rdx,[rax-0x1]
  404821:	cmp    rbx,rdx
  404824:	jae    0x40484e
  404826:	movzx  eax,BYTE PTR [rax-0x1]
  40482a:	cmp    al,0x5c
  40482c:	je     0x404832
  40482e:	cmp    al,0x2f
  404830:	jne    0x40484e
  404832:	mov    BYTE PTR [rdx],0x0
  404835:	sub    rdx,0x1
  404839:	cmp    rdx,rbx
  40483c:	je     0x40484e
  40483e:	movzx  r8d,BYTE PTR [rdx]
  404842:	cmp    r8b,0x5c
  404846:	je     0x404832
  404848:	cmp    r8b,0x2f
  40484c:	je     0x404832
  40484e:	add    rsp,0x20
  404852:	pop    rbx
  404853:	ret    
  404854:	xchg   ax,ax
  404856:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404860:	push   rbx
  404861:	sub    rsp,0x20
  404865:	call   0x404780
  40486a:	cmp    BYTE PTR [rax],0x0
  40486d:	mov    rbx,rax
  404870:	je     0x404928
  404876:	mov    rcx,rax
  404879:	call   0x406ff8
  40487e:	lea    rdx,[rbx+rax*1-0x1]
  404883:	movzx  eax,BYTE PTR [rdx]
  404886:	cmp    rbx,rdx
  404889:	setb   r9b
  40488d:	cmp    al,0x5c
  40488f:	sete   r8b
  404893:	cmp    al,0x2f
  404895:	sete   cl
  404898:	or     r8b,cl
  40489b:	je     0x4048c4
  40489d:	test   r9b,r9b
  4048a0:	jne    0x4048b4
  4048a2:	jmp    0x4048c4
  4048a4:	cmp    al,0x5c
  4048a6:	sete   r8b
  4048aa:	cmp    al,0x2f
  4048ac:	sete   cl
  4048af:	or     r8b,cl
  4048b2:	je     0x4048c4
  4048b4:	sub    rdx,0x1
  4048b8:	movzx  eax,BYTE PTR [rdx]
  4048bb:	cmp    rbx,rdx
  4048be:	setb   r9b
  4048c2:	jb     0x4048a4
  4048c4:	cmp    al,0x2f
  4048c6:	setne  cl
  4048c9:	cmp    al,0x5c
  4048cb:	setne  al
  4048ce:	test   cl,al
  4048d0:	je     0x4048fa
  4048d2:	test   r9b,r9b
  4048d5:	jne    0x4048e5
  4048d7:	jmp    0x4048fa
  4048d9:	nop    DWORD PTR [rax+0x0]
  4048e0:	cmp    rbx,rdx
  4048e3:	jae    0x4048fa
  4048e5:	sub    rdx,0x1
  4048e9:	movzx  eax,BYTE PTR [rdx]
  4048ec:	cmp    al,0x5c
  4048ee:	setne  cl
  4048f1:	cmp    al,0x2f
  4048f3:	setne  al
  4048f6:	test   cl,al
  4048f8:	jne    0x4048e0
  4048fa:	cmp    rbx,rdx
  4048fd:	jae    0x40492e
  4048ff:	movzx  eax,BYTE PTR [rdx-0x1]
  404903:	cmp    al,0x5c
  404905:	je     0x404910
  404907:	cmp    al,0x2f
  404909:	jne    0x40492e
  40490b:	nop    DWORD PTR [rax+rax*1+0x0]
  404910:	sub    rdx,0x1
  404914:	cmp    rdx,rbx
  404917:	je     0x404933
  404919:	movzx  eax,BYTE PTR [rdx-0x1]
  40491d:	cmp    al,0x5c
  40491f:	je     0x404910
  404921:	cmp    al,0x2f
  404923:	je     0x404910
  404925:	mov    BYTE PTR [rdx],0x0
  404928:	add    rsp,0x20
  40492c:	pop    rbx
  40492d:	ret    
  40492e:	cmp    rbx,rdx
  404931:	jne    0x404925
  404933:	movzx  eax,BYTE PTR [rbx]
  404936:	cmp    al,0x5c
  404938:	je     0x404941
  40493a:	cmp    al,0x2f
  40493c:	mov    rdx,rbx
  40493f:	jne    0x404925
  404941:	lea    rdx,[rbx+0x1]
  404945:	jmp    0x404925
  404947:	nop    WORD PTR [rax+rax*1+0x0]
  404950:	push   rbx
  404951:	sub    rsp,0x20
  404955:	mov    rbx,rcx
  404958:	call   0x404780
  40495d:	cmp    rax,rbx
  404960:	setne  al
  404963:	add    rsp,0x20
  404967:	pop    rbx
  404968:	ret    
  404969:	nop    DWORD PTR [rax+0x0]
  404970:	sub    rsp,0x28
  404974:	call   0x404780
  404979:	movzx  edx,BYTE PTR [rax]
  40497c:	test   dl,dl
  40497e:	je     0x404995
  404980:	cmp    dl,0x5c
  404983:	je     0x404997
  404985:	cmp    dl,0x2f
  404988:	je     0x404997
  40498a:	add    rax,0x1
  40498e:	movzx  edx,BYTE PTR [rax]
  404991:	test   dl,dl
  404993:	jne    0x404980
  404995:	xor    eax,eax
  404997:	add    rsp,0x28
  40499b:	ret    
  40499c:	nop    DWORD PTR [rax+0x0]
  4049a0:	movzx  eax,BYTE PTR [rcx]
  4049a3:	test   al,al
  4049a5:	jne    0x4049bb
  4049a7:	jmp    0x4049c3
  4049a9:	nop    DWORD PTR [rax+0x0]
  4049b0:	add    rcx,0x1
  4049b4:	movzx  eax,BYTE PTR [rcx]
  4049b7:	test   al,al
  4049b9:	je     0x4049c3
  4049bb:	cmp    al,0x3b
  4049bd:	jne    0x4049b0
  4049bf:	mov    rax,rcx
  4049c2:	ret    
  4049c3:	xor    eax,eax
  4049c5:	ret    
  4049c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4049d0:	sub    rsp,0x28
  4049d4:	call   0x404780
  4049d9:	movzx  edx,BYTE PTR [rax]
  4049dc:	mov    rcx,rax
  4049df:	xor    eax,eax
  4049e1:	test   dl,dl
  4049e3:	jne    0x404a00
  4049e5:	jmp    0x404a13
  4049e7:	nop    WORD PTR [rax+rax*1+0x0]
  4049f0:	cmp    dl,0x2f
  4049f3:	je     0x404a05
  4049f5:	add    rcx,0x1
  4049f9:	movzx  edx,BYTE PTR [rcx]
  4049fc:	test   dl,dl
  4049fe:	je     0x404a13
  404a00:	cmp    dl,0x5c
  404a03:	jne    0x4049f0
  404a05:	mov    rax,rcx
  404a08:	add    rcx,0x1
  404a0c:	movzx  edx,BYTE PTR [rcx]
  404a0f:	test   dl,dl
  404a11:	jne    0x404a00
  404a13:	add    rsp,0x28
  404a17:	ret    
  404a18:	nop    DWORD PTR [rax+rax*1+0x0]
  404a20:	movzx  eax,BYTE PTR [rcx]
  404a23:	test   al,al
  404a25:	jne    0x404a3b
  404a27:	jmp    0x404a4d
  404a29:	nop    DWORD PTR [rax+0x0]
  404a30:	add    rcx,0x1
  404a34:	movzx  eax,BYTE PTR [rcx]
  404a37:	test   al,al
  404a39:	je     0x404a4d
  404a3b:	cmp    al,0x2f
  404a3d:	jne    0x404a30
  404a3f:	mov    BYTE PTR [rcx],0x5c
  404a42:	add    rcx,0x1
  404a46:	movzx  eax,BYTE PTR [rcx]
  404a49:	test   al,al
  404a4b:	jne    0x404a3b
  404a4d:	repz ret 
  404a4f:	nop
  404a50:	push   rdi
  404a51:	push   rsi
  404a52:	push   rbx
  404a53:	sub    rsp,0x30
  404a57:	cmp    rcx,rdx
  404a5a:	mov    rsi,rcx
  404a5d:	mov    rdi,rdx
  404a60:	mov    rbx,r8
  404a63:	je     0x404a82
  404a65:	mov    r8d,0x400
  404a6b:	call   0x402d70
  404a70:	jmp    0x404a82
  404a72:	movzx  eax,BYTE PTR [rbx+0x1]
  404a76:	cmp    al,0x5c
  404a78:	je     0x404a7e
  404a7a:	cmp    al,0x2f
  404a7c:	jne    0x404a95
  404a7e:	add    rbx,0x2
  404a82:	movzx  eax,BYTE PTR [rbx]
  404a85:	cmp    al,0x2e
  404a87:	je     0x404a72
  404a89:	test   al,al
  404a8b:	jne    0x404a95
  404a8d:	add    rsp,0x30
  404a91:	pop    rbx
  404a92:	pop    rsi
  404a93:	pop    rdi
  404a94:	ret    
  404a95:	mov    rcx,rdi
  404a98:	lea    rdi,[rip+0x6023]        # 0x40aac2
  404a9f:	call   0x404780
  404aa4:	cmp    BYTE PTR [rax],0x0
  404aa7:	lea    rax,[rip+0x6012]        # 0x40aac0
  404aae:	mov    rcx,rsi
  404ab1:	cmovne rdi,rax
  404ab5:	call   0x406ff8
  404aba:	lea    r8,[rip+0x6002]        # 0x40aac3
  404ac1:	lea    rcx,[rsi+rax*1]
  404ac5:	mov    edx,0x400
  404aca:	sub    rdx,rax
  404acd:	mov    QWORD PTR [rsp+0x20],rbx
  404ad2:	mov    r9,rdi
  404ad5:	call   0x403f90
  404ada:	nop
  404adb:	add    rsp,0x30
  404adf:	pop    rbx
  404ae0:	pop    rsi
  404ae1:	pop    rdi
  404ae2:	ret    
  404ae3:	nop    DWORD PTR [rax]
  404ae6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404af0:	push   r15
  404af2:	push   r14
  404af4:	push   r13
  404af6:	push   r12
  404af8:	push   rbp
  404af9:	push   rdi
  404afa:	push   rsi
  404afb:	push   rbx
  404afc:	sub    rsp,0x28
  404b00:	movzx  edx,BYTE PTR [rcx]
  404b03:	mov    r12,rcx
  404b06:	mov    rax,rcx
  404b09:	test   dl,dl
  404b0b:	jne    0x404b1b
  404b0d:	jmp    0x404b3d
  404b0f:	nop
  404b10:	add    rax,0x1
  404b14:	movzx  edx,BYTE PTR [rax]
  404b17:	test   dl,dl
  404b19:	je     0x404b2e
  404b1b:	cmp    dl,0x5c
  404b1e:	jne    0x404b10
  404b20:	mov    BYTE PTR [rax],0x2f
  404b23:	add    rax,0x1
  404b27:	movzx  edx,BYTE PTR [rax]
  404b2a:	test   dl,dl
  404b2c:	jne    0x404b1b
  404b2e:	cmp    r12,rax
  404b31:	jae    0x404b3d
  404b33:	cmp    BYTE PTR [rax-0x1],0x22
  404b37:	je     0x404cc6
  404b3d:	mov    rcx,r12
  404b40:	call   0x404800
  404b45:	cmp    BYTE PTR [r12],0x0
  404b4a:	mov    rcx,r12
  404b4d:	je     0x404b9b
  404b4f:	movzx  edx,BYTE PTR [r12+0x1]
  404b55:	lea    rcx,[r12+0x1]
  404b5a:	test   dl,dl
  404b5c:	je     0x404b9b
  404b5e:	mov    r8,rcx
  404b61:	xor    r9d,r9d
  404b64:	cmp    dl,0x2f
  404b67:	mov    rax,r8
  404b6a:	jne    0x404b7d
  404b6c:	test   r9b,r9b
  404b6f:	je     0x404b7d
  404b71:	add    rax,0x1
  404b75:	movzx  edx,BYTE PTR [rax]
  404b78:	cmp    dl,0x2f
  404b7b:	je     0x404b71
  404b7d:	cmp    rcx,rax
  404b80:	je     0x404b84
  404b82:	mov    BYTE PTR [rcx],dl
  404b84:	cmp    BYTE PTR [rax],0x2f
  404b87:	movzx  edx,BYTE PTR [rax+0x1]
  404b8b:	lea    r8,[rax+0x1]
  404b8f:	sete   r9b
  404b93:	add    rcx,0x1
  404b97:	test   dl,dl
  404b99:	jne    0x404b64
  404b9b:	mov    BYTE PTR [rcx],0x0
  404b9e:	lea    r15,[rip+0x5f26]        # 0x40aacb
  404ba5:	mov    rcx,r12
  404ba8:	call   0x404780
  404bad:	xor    ebp,ebp
  404baf:	mov    rbx,rax
  404bb2:	mov    r14d,0x2
  404bb8:	mov    r13d,0x3
  404bbe:	xchg   ax,ax
  404bc0:	mov    rcx,rbx
  404bc3:	call   0x406ff8
  404bc8:	cmp    eax,0x1
  404bcb:	jle    0x404be7
  404bcd:	movsxd rdx,eax
  404bd0:	lea    rdi,[rip+0x5ef1]        # 0x40aac8
  404bd7:	mov    rcx,r13
  404bda:	lea    rsi,[rbx+rdx*1-0x2]
  404bdf:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
  404be1:	je     0x404cb0
  404be7:	mov    rsi,rbx
  404bea:	mov    rdi,r15
  404bed:	mov    rcx,r14
  404bf0:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
  404bf2:	je     0x404cbd
  404bf8:	cmp    eax,0x2
  404bfb:	jle    0x404c30
  404bfd:	cdqe   
  404bff:	lea    rdi,[rip+0x5ec7]        # 0x40aacd
  404c06:	mov    ecx,0x4
  404c0b:	lea    rsi,[rbx+rax*1-0x3]
  404c10:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
  404c12:	jne    0x404c30
  404c14:	mov    rcx,r12
  404c17:	add    ebp,0x1
  404c1a:	call   0x404860
  404c1f:	mov    rcx,rbx
  404c22:	call   0x406ff8
  404c27:	cmp    eax,0x1
  404c2a:	jg     0x404bcd
  404c2c:	jmp    0x404be7
  404c2e:	xchg   ax,ax
  404c30:	lea    rdi,[rip+0x5e9a]        # 0x40aad1
  404c37:	mov    rsi,rbx
  404c3a:	mov    rcx,r13
  404c3d:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
  404c3f:	je     0x404c14
  404c41:	test   ebp,ebp
  404c43:	jle    0x404c9d
  404c45:	cmp    BYTE PTR [rbx],0x0
  404c48:	je     0x404c7d
  404c4a:	mov    rcx,r12
  404c4d:	sub    ebp,0x1
  404c50:	call   0x404860
  404c55:	cmp    BYTE PTR [rbx],0x0
  404c58:	jne    0x404bc0
  404c5e:	mov    edx,0x2e
  404c63:	mov    WORD PTR [rbx],dx
  404c66:	jmp    0x404bc0
  404c6b:	nop    DWORD PTR [rax+rax*1+0x0]
  404c70:	call   0x406ff8
  404c75:	mov    DWORD PTR [r12+rax*1],0x2f2e2e
  404c7d:	sub    ebp,0x1
  404c80:	mov    rcx,r12
  404c83:	jne    0x404c70
  404c85:	call   0x406ff8
  404c8a:	add    r12,rax
  404c8d:	mov    eax,0x2e2e
  404c92:	mov    WORD PTR [r12],ax
  404c97:	mov    BYTE PTR [r12+0x2],0x0
  404c9d:	add    rsp,0x28
  404ca1:	pop    rbx
  404ca2:	pop    rsi
  404ca3:	pop    rdi
  404ca4:	pop    rbp
  404ca5:	pop    r12
  404ca7:	pop    r13
  404ca9:	pop    r14
  404cab:	pop    r15
  404cad:	ret    
  404cae:	xchg   ax,ax
  404cb0:	mov    rcx,r12
  404cb3:	call   0x404860
  404cb8:	jmp    0x404bc0
  404cbd:	test   ebp,ebp
  404cbf:	jle    0x404c9d
  404cc1:	mov    BYTE PTR [rbx],0x0
  404cc4:	jmp    0x404c7d
  404cc6:	mov    BYTE PTR [rax-0x1],0x2f
  404cca:	jmp    0x404b3d
  404ccf:	nop
  404cd0:	push   r15
  404cd2:	push   r14
  404cd4:	push   r13
  404cd6:	push   r12
  404cd8:	push   rbp
  404cd9:	push   rdi
  404cda:	push   rsi
  404cdb:	push   rbx
  404cdc:	sub    rsp,0x28
  404ce0:	mov    rbx,rdx
  404ce3:	mov    rsi,rcx
  404ce6:	mov    rdx,r8
  404ce9:	movzx  eax,BYTE PTR [rbx]
  404cec:	test   al,al
  404cee:	je     0x404d95
  404cf4:	mov    r10d,0x1
  404cfa:	xor    edi,edi
  404cfc:	mov    r9d,0x2f
  404d02:	jmp    0x404d2e
  404d04:	cmp    al,0x2f
  404d06:	je     0x404d32
  404d08:	cmp    al,r9b
  404d0b:	jne    0x404d50
  404d0d:	movsxd r9,r10d
  404d10:	movzx  eax,BYTE PTR [rbx+r9*1]
  404d15:	test   al,al
  404d17:	je     0x404d50
  404d19:	lea    r11,[rip+0x5db8]        # 0x40aad8
  404d20:	add    r10d,0x1
  404d24:	movzx  r9d,BYTE PTR [r11+r9*1]
  404d29:	test   r9b,r9b
  404d2c:	je     0x404d50
  404d2e:	cmp    al,0x5c
  404d30:	jne    0x404d04
  404d32:	cmp    r9b,0x5c
  404d36:	je     0x404d3e
  404d38:	cmp    r9b,0x2f
  404d3c:	jne    0x404d08
  404d3e:	movsxd r9,r10d
  404d41:	movsxd rdi,r10d
  404d44:	movzx  eax,BYTE PTR [rbx+r9*1]
  404d49:	test   al,al
  404d4b:	jne    0x404d19
  404d4d:	nop    DWORD PTR [rax]
  404d50:	test   edi,edi
  404d52:	je     0x404d95
  404d54:	mov    r8d,0x400
  404d5a:	mov    rcx,rsi
  404d5d:	call   0x402d70
  404d62:	mov    rcx,rsi
  404d65:	call   0x404860
  404d6a:	mov    rcx,rsi
  404d6d:	call   0x404af0
  404d72:	mov    rcx,rsi
  404d75:	call   0x406ff8
  404d7a:	lea    r13d,[rdi+rax*1-0x3f]
  404d7f:	test   r13d,r13d
  404d82:	jle    0x404d95
  404d84:	movsxd r13,r13d
  404d87:	movzx  eax,BYTE PTR [rsi+r13*1-0x1]
  404d8d:	cmp    al,0x5c
  404d8f:	je     0x404dbe
  404d91:	cmp    al,0x2f
  404d93:	je     0x404dbe
  404d95:	mov    r8d,0x400
  404d9b:	mov    rdx,rbx
  404d9e:	mov    rcx,rsi
  404da1:	call   0x402d70
  404da6:	mov    rcx,rsi
  404da9:	add    rsp,0x28
  404dad:	pop    rbx
  404dae:	pop    rsi
  404daf:	pop    rdi
  404db0:	pop    rbp
  404db1:	pop    r12
  404db3:	pop    r13
  404db5:	pop    r14
  404db7:	pop    r15
  404db9:	jmp    0x404af0
  404dbe:	add    r13,rsi
  404dc1:	lea    r14,[rip+0x5d10]        # 0x40aad8
  404dc8:	movzx  eax,BYTE PTR [r13+0x0]
  404dcd:	add    r14,rdi
  404dd0:	test   al,al
  404dd2:	je     0x404e2e
  404dd4:	movzx  ebp,BYTE PTR [r14]
  404dd8:	test   bpl,bpl
  404ddb:	je     0x404d95
  404ddd:	mov    r12,r13
  404de0:	jmp    0x404deb
  404de2:	movzx  ebp,BYTE PTR [r14]
  404de6:	test   bpl,bpl
  404de9:	je     0x404d95
  404deb:	movzx  ecx,al
  404dee:	call   0x405710
  404df3:	movzx  ecx,bpl
  404df7:	mov    r15d,eax
  404dfa:	call   0x405710
  404dff:	cmp    r15b,al
  404e02:	je     0x404e1d
  404e04:	movzx  eax,BYTE PTR [r12]
  404e09:	cmp    al,0x5c
  404e0b:	je     0x404e11
  404e0d:	cmp    al,0x2f
  404e0f:	jne    0x404e59
  404e11:	cmp    bpl,0x5c
  404e15:	je     0x404e1d
  404e17:	cmp    bpl,0x2f
  404e1b:	jne    0x404e59
  404e1d:	add    r12,0x1
  404e21:	movzx  eax,BYTE PTR [r12]
  404e26:	add    r14,0x1
  404e2a:	test   al,al
  404e2c:	jne    0x404de2
  404e2e:	cmp    BYTE PTR [r14],0x0
  404e32:	jne    0x404d95
  404e38:	mov    rcx,rsi
  404e3b:	mov    BYTE PTR [r13+0x0],0x0
  404e40:	call   0x404800
  404e45:	lea    r8,[rbx+rdi*1]
  404e49:	mov    rdx,rsi
  404e4c:	mov    rcx,rsi
  404e4f:	call   0x404a50
  404e54:	jmp    0x404da6
  404e59:	cmp    bpl,al
  404e5c:	jne    0x404d95
  404e62:	jmp    0x404e38
  404e64:	xchg   ax,ax
  404e66:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404e70:	push   r12
  404e72:	push   rbp
  404e73:	push   rdi
  404e74:	push   rsi
  404e75:	push   rbx
  404e76:	sub    rsp,0x20
  404e7a:	lea    rdi,[rip+0x5c50]        # 0x40aad1
  404e81:	mov    ebp,0x1
  404e86:	call   0x404780
  404e8b:	mov    rbx,rax
  404e8e:	mov    rcx,rax
  404e91:	call   0x406ff8
  404e96:	mov    rsi,rbx
  404e99:	mov    ecx,0x3
  404e9e:	mov    r12,rax
  404ea1:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
  404ea3:	seta   cl
  404ea6:	setb   dl
  404ea9:	cmp    cl,dl
  404eab:	je     0x404ed4
  404ead:	lea    rdi,[rip+0x5c64]        # 0x40ab18
  404eb4:	mov    ecx,0x3
  404eb9:	mov    rsi,rbx
  404ebc:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
  404ebe:	je     0x404ed4
  404ec0:	lea    rdx,[rip+0x5c55]        # 0x40ab1c
  404ec7:	mov    rcx,rbx
  404eca:	call   0x406fd8
  404ecf:	test   rax,rax
  404ed2:	je     0x404ee1
  404ed4:	mov    eax,ebp
  404ed6:	add    rsp,0x20
  404eda:	pop    rbx
  404edb:	pop    rsi
  404edc:	pop    rdi
  404edd:	pop    rbp
  404ede:	pop    r12
  404ee0:	ret    
  404ee1:	xor    ebp,ebp
  404ee3:	cmp    r12d,0x2
  404ee7:	jle    0x404ed4
  404ee9:	movsxd r12,r12d
  404eec:	lea    rdi,[rip+0x5bda]        # 0x40aacd
  404ef3:	mov    ecx,0x4
  404ef8:	lea    rsi,[rbx+r12*1-0x3]
  404efd:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
  404eff:	sete   bpl
  404f03:	jmp    0x404ed4
  404f05:	nop
  404f06:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404f10:	push   rsi
  404f11:	push   rbx
  404f12:	sub    rsp,0x28
  404f16:	movzx  eax,BYTE PTR [rcx]
  404f19:	cmp    al,0x5c
  404f1b:	je     0x404f50
  404f1d:	cmp    al,0x2f
  404f1f:	je     0x404f50
  404f21:	mov    rbx,rcx
  404f24:	movzx  ecx,al
  404f27:	call   QWORD PTR [rip+0xa71b]        # 0x40f648
  404f2d:	test   eax,eax
  404f2f:	je     0x404f37
  404f31:	cmp    BYTE PTR [rbx+0x1],0x3a
  404f35:	je     0x404f60
  404f37:	mov    rcx,rbx
  404f3a:	call   0x404e70
  404f3f:	test   al,al
  404f41:	sete   al
  404f44:	add    rsp,0x28
  404f48:	pop    rbx
  404f49:	pop    rsi
  404f4a:	ret    
  404f4b:	nop    DWORD PTR [rax+rax*1+0x0]
  404f50:	xor    eax,eax
  404f52:	add    rsp,0x28
  404f56:	pop    rbx
  404f57:	pop    rsi
  404f58:	ret    
  404f59:	nop    DWORD PTR [rax+0x0]
  404f60:	movzx  esi,BYTE PTR [rbx+0x2]
  404f64:	cmp    sil,0x5c
  404f68:	je     0x404f50
  404f6a:	cmp    sil,0x2f
  404f6e:	je     0x404f50
  404f70:	mov    rcx,rbx
  404f73:	call   0x404e70
  404f78:	mov    edx,eax
  404f7a:	xor    eax,eax
  404f7c:	test   dl,dl
  404f7e:	jne    0x404f44
  404f80:	cmp    sil,0x5c
  404f84:	setne  dl
  404f87:	cmp    sil,0x2f
  404f8b:	setne  al
  404f8e:	and    eax,edx
  404f90:	xor    eax,0x1
  404f93:	jmp    0x404f44
  404f95:	nop
  404f96:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404fa0:	push   rdi
  404fa1:	push   rsi
  404fa2:	push   rbx
  404fa3:	sub    rsp,0x20
  404fa7:	mov    rsi,rcx
  404faa:	mov    rdi,rdx
  404fad:	call   0x406ff8
  404fb2:	movsxd rbx,eax
  404fb5:	mov    rcx,rsi
  404fb8:	mov    rdx,rdi
  404fbb:	mov    r8,rbx
  404fbe:	call   0x406ff0
  404fc3:	xor    ecx,ecx
  404fc5:	test   eax,eax
  404fc7:	jne    0x404fe2
  404fc9:	movzx  edx,BYTE PTR [rdi+rbx*1]
  404fcd:	cmp    dl,0x5c
  404fd0:	sete   cl
  404fd3:	cmp    dl,0x2f
  404fd6:	sete   al
  404fd9:	or     ecx,eax
  404fdb:	test   dl,dl
  404fdd:	sete   dl
  404fe0:	or     ecx,edx
  404fe2:	mov    eax,ecx
  404fe4:	add    rsp,0x20
  404fe8:	pop    rbx
  404fe9:	pop    rsi
  404fea:	pop    rdi
  404feb:	ret    
  404fec:	nop    DWORD PTR [rax+0x0]
  404ff0:	push   rsi
  404ff1:	push   rbx
  404ff2:	sub    rsp,0x28
  404ff6:	mov    rbx,rcx
  404ff9:	call   0x4049d0
  404ffe:	test   rax,rax
  405001:	je     0x4050d0
  405007:	lea    rsi,[rax+0x1]
  40500b:	mov    rcx,rsi
  40500e:	call   0x406fa8
  405013:	test   rax,rax
  405016:	mov    rbx,rax
  405019:	je     0x4050e0
  40501f:	mov    rcx,rax
  405022:	mov    eax,DWORD PTR [rcx]
  405024:	add    rcx,0x4
  405028:	lea    edx,[rax-0x1010101]
  40502e:	not    eax
  405030:	and    edx,eax
  405032:	and    edx,0x80808080
  405038:	je     0x405022
  40503a:	mov    eax,edx
  40503c:	shr    eax,0x10
  40503f:	test   edx,0x8080
  405045:	cmove  edx,eax
  405048:	lea    rax,[rcx+0x2]
  40504c:	cmove  rcx,rax
  405050:	add    dl,dl
  405052:	sbb    rcx,0x3
  405056:	sub    rcx,rbx
  405059:	cmp    rcx,0x4
  40505d:	ja     0x405070
  40505f:	mov    rax,rbx
  405062:	add    rsp,0x28
  405066:	pop    rbx
  405067:	pop    rsi
  405068:	ret    
  405069:	nop    DWORD PTR [rax+0x0]
  405070:	lea    rcx,[rbx+rcx*1-0x4]
  405075:	lea    rdx,[rip+0x5ab8]        # 0x40ab34
  40507c:	call   0x405500
  405081:	test   eax,eax
  405083:	jne    0x40505f
  405085:	mov    rdx,rbx
  405088:	mov    ecx,DWORD PTR [rdx]
  40508a:	add    rdx,0x4
  40508e:	lea    eax,[rcx-0x1010101]
  405094:	not    ecx
  405096:	and    eax,ecx
  405098:	and    eax,0x80808080
  40509d:	je     0x405088
  40509f:	mov    ecx,eax
  4050a1:	shr    ecx,0x10
  4050a4:	test   eax,0x8080
  4050a9:	cmove  eax,ecx
  4050ac:	lea    rcx,[rdx+0x2]
  4050b0:	cmove  rdx,rcx
  4050b4:	add    al,al
  4050b6:	mov    rax,rbx
  4050b9:	sbb    rdx,0x3
  4050bd:	mov    BYTE PTR [rdx-0x4],0x0
  4050c1:	add    rsp,0x28
  4050c5:	pop    rbx
  4050c6:	pop    rsi
  4050c7:	ret    
  4050c8:	nop    DWORD PTR [rax+rax*1+0x0]
  4050d0:	mov    rcx,rbx
  4050d3:	call   0x404780
  4050d8:	mov    rsi,rax
  4050db:	jmp    0x40500b
  4050e0:	call   QWORD PTR [rip+0xa4aa]        # 0x40f590
  4050e6:	lea    rdx,[rip+0x5a34]        # 0x40ab21
  4050ed:	lea    rcx,[rax+0x60]
  4050f1:	mov    r8,rsi
  4050f4:	call   0x4040e0
  4050f9:	call   0x4070b8
  4050fe:	nop
  4050ff:	nop
  405100:	push   r12
  405102:	push   rbp
  405103:	push   rdi
  405104:	push   rsi
  405105:	push   rbx
  405106:	sub    rsp,0x20
  40510a:	test   rcx,rcx
  40510d:	je     0x4052b4
  405113:	movzx  eax,BYTE PTR [rcx]
  405116:	mov    r12,rcx
  405119:	cmp    al,0x5c
  40511b:	je     0x405211
  405121:	cmp    al,0x2f
  405123:	je     0x405211
  405129:	movzx  ecx,al
  40512c:	mov    esi,0x400
  405131:	call   QWORD PTR [rip+0xa511]        # 0x40f648
  405137:	test   eax,eax
  405139:	jne    0x4051f3
  40513f:	mov    rcx,rsi
  405142:	mov    rbp,QWORD PTR [rip+0xa47f]        # 0x40f5c8
  405149:	call   0x407060
  40514e:	test   rax,rax
  405151:	mov    rbx,rax
  405154:	je     0x40518e
  405156:	mov    edx,esi
  405158:	mov    rcx,rax
  40515b:	call   0x406fa0
  405160:	test   rax,rax
  405163:	mov    rdi,rax
  405166:	jne    0x405240
  40516c:	call   rbp
  40516e:	cmp    DWORD PTR [rax],0x22
  405171:	jne    0x4051b0
  405173:	mov    rcx,rbx
  405176:	add    rsi,rsi
  405179:	call   0x407090
  40517e:	mov    rcx,rsi
  405181:	call   0x407060
  405186:	test   rax,rax
  405189:	mov    rbx,rax
  40518c:	jne    0x405156
  40518e:	call   QWORD PTR [rip+0xa3fc]        # 0x40f590
  405194:	lea    rdx,[rip+0x599e]        # 0x40ab39
  40519b:	lea    rcx,[rax+0x60]
  40519f:	xor    edi,edi
  4051a1:	call   0x4040e0
  4051a6:	jmp    0x4051e5
  4051a8:	nop    DWORD PTR [rax+rax*1+0x0]
  4051b0:	call   rbp
  4051b2:	mov    esi,DWORD PTR [rax]
  4051b4:	mov    rcx,rbx
  4051b7:	call   0x407090
  4051bc:	call   rbp
  4051be:	mov    DWORD PTR [rax],esi
  4051c0:	call   rbp
  4051c2:	mov    ecx,DWORD PTR [rax]
  4051c4:	call   0x407000
  4051c9:	mov    rbx,rax
  4051cc:	call   QWORD PTR [rip+0xa3be]        # 0x40f590
  4051d2:	lea    rdx,[rip+0x596f]        # 0x40ab48
  4051d9:	lea    rcx,[rax+0x60]
  4051dd:	mov    r8,rbx
  4051e0:	call   0x4040e0
  4051e5:	mov    rax,rdi
  4051e8:	add    rsp,0x20
  4051ec:	pop    rbx
  4051ed:	pop    rsi
  4051ee:	pop    rdi
  4051ef:	pop    rbp
  4051f0:	pop    r12
  4051f2:	ret    
  4051f3:	cmp    BYTE PTR [r12+0x1],0x3a
  4051f9:	jne    0x40513f
  4051ff:	movzx  eax,BYTE PTR [r12+0x2]
  405205:	cmp    al,0x5c
  405207:	je     0x405211
  405209:	cmp    al,0x2f
  40520b:	jne    0x40513f
  405211:	mov    rcx,r12
  405214:	call   0x406fa8
  405219:	test   rax,rax
  40521c:	mov    rdi,rax
  40521f:	je     0x4052bb
  405225:	mov    rcx,rdi
  405228:	call   0x404af0
  40522d:	mov    rax,rdi
  405230:	add    rsp,0x20
  405234:	pop    rbx
  405235:	pop    rsi
  405236:	pop    rdi
  405237:	pop    rbp
  405238:	pop    r12
  40523a:	ret    
  40523b:	nop    DWORD PTR [rax+rax*1+0x0]
  405240:	mov    rsi,rbx
  405243:	mov    edx,DWORD PTR [rsi]
  405245:	add    rsi,0x4
  405249:	lea    eax,[rdx-0x1010101]
  40524f:	not    edx
  405251:	and    eax,edx
  405253:	and    eax,0x80808080
  405258:	je     0x405243
  40525a:	mov    edx,eax
  40525c:	mov    rcx,r12
  40525f:	shr    edx,0x10
  405262:	test   eax,0x8080
  405267:	cmove  eax,edx
  40526a:	lea    rdx,[rsi+0x2]
  40526e:	cmove  rsi,rdx
  405272:	add    al,al
  405274:	sbb    rsi,0x3
  405278:	sub    rsi,rbx
  40527b:	call   0x406ff8
  405280:	lea    rcx,[rsi+rax*1+0x2]
  405285:	call   0x407060
  40528a:	test   rax,rax
  40528d:	mov    rdi,rax
  405290:	je     0x4052d6
  405292:	lea    rdx,[rip+0x58dc]        # 0x40ab75
  405299:	mov    r9,r12
  40529c:	mov    r8,rbx
  40529f:	mov    rcx,rax
  4052a2:	call   0x403fd0
  4052a7:	mov    rcx,rbx
  4052aa:	call   0x407090
  4052af:	jmp    0x405225
  4052b4:	xor    edi,edi
  4052b6:	jmp    0x4051e5
  4052bb:	call   QWORD PTR [rip+0xa2cf]        # 0x40f590
  4052c1:	lea    rdx,[rip+0x5871]        # 0x40ab39
  4052c8:	lea    rcx,[rax+0x60]
  4052cc:	call   0x4040e0
  4052d1:	jmp    0x4051e5
  4052d6:	mov    rcx,rbx
  4052d9:	call   0x407090
  4052de:	call   QWORD PTR [rip+0xa2ac]        # 0x40f590
  4052e4:	lea    rdx,[rip+0x584e]        # 0x40ab39
  4052eb:	lea    rcx,[rax+0x60]
  4052ef:	call   0x4040e0
  4052f4:	jmp    0x4051e5
  4052f9:	nop    DWORD PTR [rax+0x0]
  405300:	mov    r8,rcx
  405303:	mov    rcx,rdx
  405306:	lea    rdx,[rip+0x5873]        # 0x40ab80
  40530d:	jmp    0x404cd0
  405312:	nop    DWORD PTR [rax+0x0]
  405316:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405320:	mov    r8,rcx
  405323:	mov    rcx,rdx
  405326:	lea    rdx,[rip+0x58a3]        # 0x40abd0
  40532d:	jmp    0x404cd0
  405332:	nop    DWORD PTR [rax+0x0]
  405336:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405340:	mov    r8,rcx
  405343:	mov    rcx,rdx
  405346:	lea    rdx,[rip+0x58d3]        # 0x40ac20
  40534d:	jmp    0x404cd0
  405352:	nop    DWORD PTR [rax+0x0]
  405356:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405360:	mov    r8,rcx
  405363:	mov    rcx,rdx
  405366:	lea    rdx,[rip+0x58fb]        # 0x40ac68
  40536d:	jmp    0x404cd0
  405372:	nop    DWORD PTR [rax+0x0]
  405376:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405380:	mov    r8,rcx
  405383:	mov    rcx,rdx
  405386:	lea    rdx,[rip+0x592b]        # 0x40acb8
  40538d:	jmp    0x404cd0
  405392:	nop    DWORD PTR [rax+0x0]
  405396:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4053a0:	mov    r8,rcx
  4053a3:	mov    rcx,rdx
  4053a6:	lea    rdx,[rip+0x5963]        # 0x40ad10
  4053ad:	jmp    0x404cd0
  4053b2:	nop    DWORD PTR [rax+0x0]
  4053b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4053c0:	mov    r8,rcx
  4053c3:	mov    rcx,rdx
  4053c6:	lea    rdx,[rip+0x5983]        # 0x40ad50
  4053cd:	jmp    0x404cd0
  4053d2:	nop    DWORD PTR [rax+0x0]
  4053d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4053e0:	mov    r8,rcx
  4053e3:	mov    rcx,rdx
  4053e6:	lea    rdx,[rip+0x59b3]        # 0x40ada0
  4053ed:	jmp    0x404cd0
  4053f2:	nop    DWORD PTR [rax+0x0]
  4053f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405400:	mov    r8,rcx
  405403:	mov    rcx,rdx
  405406:	lea    rdx,[rip+0x59e3]        # 0x40adf0
  40540d:	jmp    0x404cd0
  405412:	nop    DWORD PTR [rax+0x0]
  405416:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405420:	mov    r8,rcx
  405423:	mov    rcx,rdx
  405426:	lea    rdx,[rip+0x59c3]        # 0x40adf0
  40542d:	jmp    0x404cd0
  405432:	nop    DWORD PTR [rax+0x0]
  405436:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405440:	mov    r8,rcx
  405443:	mov    rcx,rdx
  405446:	lea    rdx,[rip+0x59fb]        # 0x40ae48
  40544d:	jmp    0x404cd0
  405452:	nop    DWORD PTR [rax+0x0]
  405456:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405460:	push   rbx
  405461:	sub    rsp,0x20
  405465:	mov    rbx,rcx
  405468:	lea    rcx,[rip+0x5a1f]        # 0x40ae8e
  40546f:	call   0x407080
  405474:	mov    r9,rax
  405477:	xor    eax,eax
  405479:	test   r9,r9
  40547c:	je     0x405497
  40547e:	lea    r8,[rip+0x5a11]        # 0x40ae96
  405485:	mov    edx,0x400
  40548a:	mov    rcx,rbx
  40548d:	call   0x403f90
  405492:	mov    eax,0x1
  405497:	add    rsp,0x20
  40549b:	pop    rbx
  40549c:	ret    
  40549d:	nop    DWORD PTR [rax]
  4054a0:	jmp    0x404860
  4054a5:	nop
  4054a6:	nop
  4054a7:	nop
  4054a8:	nop
  4054a9:	nop
  4054aa:	nop
  4054ab:	nop
  4054ac:	nop
  4054ad:	nop
  4054ae:	nop
  4054af:	nop
  4054b0:	test   ecx,ecx
  4054b2:	mov    eax,ecx
  4054b4:	jle    0x4054f0
  4054b6:	cmp    eax,0x1f3
  4054bb:	mov    ecx,0x1
  4054c0:	jle    0x4054e0
  4054c2:	lea    r8d,[rax+0x1f4]
  4054c9:	mov    edx,0x10624dd3
  4054ce:	mov    eax,r8d
  4054d1:	imul   edx
  4054d3:	mov    eax,r8d
  4054d6:	sar    eax,0x1f
  4054d9:	sar    edx,0x6
  4054dc:	mov    ecx,edx
  4054de:	sub    ecx,eax
  4054e0:	mov    rax,QWORD PTR [rip+0xa041]        # 0x40f528
  4054e7:	xor    edx,edx
  4054e9:	rex.W jmp rax
  4054ec:	nop    DWORD PTR [rax+0x0]
  4054f0:	repz ret 
  4054f2:	nop
  4054f3:	nop
  4054f4:	nop
  4054f5:	nop
  4054f6:	nop
  4054f7:	nop
  4054f8:	nop
  4054f9:	nop
  4054fa:	nop
  4054fb:	nop
  4054fc:	nop
  4054fd:	nop
  4054fe:	nop
  4054ff:	nop
  405500:	push   r15
  405502:	push   r14
  405504:	push   r13
  405506:	push   r12
  405508:	push   rbp
  405509:	push   rdi
  40550a:	push   rsi
  40550b:	push   rbx
  40550c:	sub    rsp,0x28
  405510:	mov    r13,QWORD PTR [rip+0xa141]        # 0x40f658
  405517:	mov    r14,QWORD PTR [rip+0xa1d2]        # 0x40f6f0
  40551e:	mov    r12,rcx
  405521:	mov    r15,rdx
  405524:	jmp    0x405547
  405526:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405530:	add    ebx,0x20
  405533:	lea    eax,[rsi-0x41]
  405536:	cmp    al,0x19
  405538:	ja     0x405590
  40553a:	lea    edi,[rsi+0x20]
  40553d:	cmp    bl,dil
  405540:	jne    0x4055b0
  405542:	test   dil,dil
  405545:	je     0x4055c0
  405547:	add    r12,0x1
  40554b:	add    r15,0x1
  40554f:	movzx  esi,BYTE PTR [r15-0x1]
  405554:	movzx  ebx,BYTE PTR [r12-0x1]
  40555a:	mov    edi,esi
  40555c:	cmp    bl,sil
  40555f:	je     0x405542
  405561:	lea    eax,[rbx-0x41]
  405564:	cmp    al,0x19
  405566:	jbe    0x405530
  405568:	test   bl,bl
  40556a:	jns    0x405533
  40556c:	movzx  ebp,bl
  40556f:	mov    ecx,ebp
  405571:	call   r13
  405574:	test   eax,eax
  405576:	je     0x405533
  405578:	mov    ecx,ebp
  40557a:	call   r14
  40557d:	mov    ebx,eax
  40557f:	lea    eax,[rsi-0x41]
  405582:	cmp    al,0x19
  405584:	jbe    0x40553a
  405586:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405590:	test   sil,sil
  405593:	jns    0x40553d
  405595:	mov    ecx,esi
  405597:	call   QWORD PTR [rip+0xa0bb]        # 0x40f658
  40559d:	test   eax,eax
  40559f:	je     0x40553d
  4055a1:	mov    ecx,esi
  4055a3:	call   QWORD PTR [rip+0xa147]        # 0x40f6f0
  4055a9:	mov    edi,eax
  4055ab:	cmp    bl,dil
  4055ae:	je     0x405542
  4055b0:	movzx  eax,bl
  4055b3:	movzx  edi,dil
  4055b7:	sub    eax,edi
  4055b9:	jmp    0x4055c2
  4055bb:	nop    DWORD PTR [rax+rax*1+0x0]
  4055c0:	xor    eax,eax
  4055c2:	add    rsp,0x28
  4055c6:	pop    rbx
  4055c7:	pop    rsi
  4055c8:	pop    rdi
  4055c9:	pop    rbp
  4055ca:	pop    r12
  4055cc:	pop    r13
  4055ce:	pop    r14
  4055d0:	pop    r15
  4055d2:	ret    
  4055d3:	nop    DWORD PTR [rax]
  4055d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4055e0:	push   r15
  4055e2:	push   r14
  4055e4:	push   r13
  4055e6:	push   r12
  4055e8:	push   rbp
  4055e9:	push   rdi
  4055ea:	push   rsi
  4055eb:	push   rbx
  4055ec:	sub    rsp,0x38
  4055f0:	mov    rax,QWORD PTR [rip+0xa0f9]        # 0x40f6f0
  4055f7:	mov    r13,QWORD PTR [rip+0xa05a]        # 0x40f658
  4055fe:	mov    rbp,rcx
  405601:	mov    rdi,rdx
  405604:	lea    r12,[rdx+r8*1]
  405608:	mov    QWORD PTR [rsp+0x28],rax
  40560d:	jmp    0x405628
  40560f:	nop
  405610:	add    ebx,0x20
  405613:	lea    eax,[rsi-0x41]
  405616:	cmp    al,0x19
  405618:	ja     0x405671
  40561a:	lea    r15d,[rsi+0x20]
  40561e:	cmp    bl,r15b
  405621:	jne    0x405692
  405623:	test   r15b,r15b
  405626:	je     0x4056a0
  405628:	cmp    rdi,r12
  40562b:	je     0x4056a0
  40562d:	add    rbp,0x1
  405631:	add    rdi,0x1
  405635:	movzx  esi,BYTE PTR [rdi-0x1]
  405639:	movzx  ebx,BYTE PTR [rbp-0x1]
  40563d:	mov    r15d,esi
  405640:	cmp    bl,sil
  405643:	je     0x405623
  405645:	lea    eax,[rbx-0x41]
  405648:	cmp    al,0x19
  40564a:	jbe    0x405610
  40564c:	test   bl,bl
  40564e:	jns    0x405613
  405650:	movzx  r14d,bl
  405654:	mov    ecx,r14d
  405657:	call   r13
  40565a:	test   eax,eax
  40565c:	je     0x405613
  40565e:	mov    ecx,r14d
  405661:	mov    rax,QWORD PTR [rsp+0x28]
  405666:	call   rax
  405668:	mov    ebx,eax
  40566a:	lea    eax,[rsi-0x41]
  40566d:	cmp    al,0x19
  40566f:	jbe    0x40561a
  405671:	test   sil,sil
  405674:	jns    0x40561e
  405676:	mov    ecx,esi
  405678:	call   QWORD PTR [rip+0x9fda]        # 0x40f658
  40567e:	test   eax,eax
  405680:	je     0x40561e
  405682:	mov    ecx,esi
  405684:	call   QWORD PTR [rip+0xa066]        # 0x40f6f0
  40568a:	mov    r15d,eax
  40568d:	cmp    bl,r15b
  405690:	je     0x405623
  405692:	movzx  ebx,bl
  405695:	movzx  r15d,r15b
  405699:	mov    eax,ebx
  40569b:	sub    eax,r15d
  40569e:	jmp    0x4056a2
  4056a0:	xor    eax,eax
  4056a2:	add    rsp,0x38
  4056a6:	pop    rbx
  4056a7:	pop    rsi
  4056a8:	pop    rdi
  4056a9:	pop    rbp
  4056aa:	pop    r12
  4056ac:	pop    r13
  4056ae:	pop    r14
  4056b0:	pop    r15
  4056b2:	ret    
  4056b3:	nop    DWORD PTR [rax]
  4056b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4056c0:	push   rsi
  4056c1:	push   rbx
  4056c2:	sub    rsp,0x28
  4056c6:	lea    eax,[rcx-0x61]
  4056c9:	mov    esi,ecx
  4056cb:	cmp    al,0x19
  4056cd:	jbe    0x405702
  4056cf:	test   cl,cl
  4056d1:	js     0x4056e0
  4056d3:	mov    eax,esi
  4056d5:	add    rsp,0x28
  4056d9:	pop    rbx
  4056da:	pop    rsi
  4056db:	ret    
  4056dc:	nop    DWORD PTR [rax+0x0]
  4056e0:	movzx  ebx,cl
  4056e3:	mov    ecx,ebx
  4056e5:	call   QWORD PTR [rip+0x9f65]        # 0x40f650
  4056eb:	test   eax,eax
  4056ed:	je     0x4056d3
  4056ef:	mov    ecx,ebx
  4056f1:	call   QWORD PTR [rip+0xa001]        # 0x40f6f8
  4056f7:	mov    esi,eax
  4056f9:	mov    eax,esi
  4056fb:	add    rsp,0x28
  4056ff:	pop    rbx
  405700:	pop    rsi
  405701:	ret    
  405702:	lea    esi,[rcx-0x20]
  405705:	mov    eax,esi
  405707:	add    rsp,0x28
  40570b:	pop    rbx
  40570c:	pop    rsi
  40570d:	ret    
  40570e:	xchg   ax,ax
  405710:	push   rsi
  405711:	push   rbx
  405712:	sub    rsp,0x28
  405716:	lea    eax,[rcx-0x41]
  405719:	mov    esi,ecx
  40571b:	cmp    al,0x19
  40571d:	jbe    0x405752
  40571f:	test   cl,cl
  405721:	js     0x405730
  405723:	mov    eax,esi
  405725:	add    rsp,0x28
  405729:	pop    rbx
  40572a:	pop    rsi
  40572b:	ret    
  40572c:	nop    DWORD PTR [rax+0x0]
  405730:	movzx  ebx,cl
  405733:	mov    ecx,ebx
  405735:	call   QWORD PTR [rip+0x9f1d]        # 0x40f658
  40573b:	test   eax,eax
  40573d:	je     0x405723
  40573f:	mov    ecx,ebx
  405741:	call   QWORD PTR [rip+0x9fa9]        # 0x40f6f0
  405747:	mov    esi,eax
  405749:	mov    eax,esi
  40574b:	add    rsp,0x28
  40574f:	pop    rbx
  405750:	pop    rsi
  405751:	ret    
  405752:	lea    esi,[rcx+0x20]
  405755:	mov    eax,esi
  405757:	add    rsp,0x28
  40575b:	pop    rbx
  40575c:	pop    rsi
  40575d:	ret    
  40575e:	xchg   ax,ax
  405760:	lea    edx,[rcx-0x61]
  405763:	mov    eax,ecx
  405765:	sub    ecx,0x20
  405768:	cmp    dl,0x19
  40576b:	cmovbe eax,ecx
  40576e:	ret    
  40576f:	nop
  405770:	lea    edx,[rcx-0x41]
  405773:	lea    eax,[rcx+0x20]
  405776:	cmp    dl,0x19
  405779:	cmova  eax,ecx
  40577c:	ret    
  40577d:	nop
  40577e:	nop
  40577f:	nop
  405780:	push   rbx
  405781:	sub    rsp,0x20
  405785:	test   ecx,ecx
  405787:	mov    ebx,ecx
  405789:	je     0x405800
  40578b:	cmp    ecx,0x1
  40578e:	lea    rdx,[rip+0x5773]        # 0x40af08
  405795:	mov    eax,0x1
  40579a:	jne    0x4057ac
  40579c:	jmp    0x405812
  40579e:	xchg   ax,ax
  4057a0:	add    eax,0x1
  4057a3:	add    rdx,0x8
  4057a7:	cmp    eax,0x2e
  4057aa:	je     0x4057d0
  4057ac:	cmp    DWORD PTR [rdx],ebx
  4057ae:	jne    0x4057a0
  4057b0:	lea    rdx,[rip+0x5749]        # 0x40af00
  4057b7:	cdqe   
  4057b9:	mov    ebx,DWORD PTR [rdx+rax*8+0x4]
  4057bd:	call   QWORD PTR [rip+0x9e05]        # 0x40f5c8
  4057c3:	mov    DWORD PTR [rax],ebx
  4057c5:	add    rsp,0x20
  4057c9:	pop    rbx
  4057ca:	ret    
  4057cb:	nop    DWORD PTR [rax+rax*1+0x0]
  4057d0:	call   QWORD PTR [rip+0x9dba]        # 0x40f590
  4057d6:	lea    rdx,[rip+0x56e3]        # 0x40aec0
  4057dd:	lea    rcx,[rax+0x60]
  4057e1:	mov    r8d,ebx
  4057e4:	call   0x4040e0
  4057e9:	call   QWORD PTR [rip+0x9dd9]        # 0x40f5c8
  4057ef:	mov    DWORD PTR [rax],0x16
  4057f5:	add    rsp,0x20
  4057f9:	pop    rbx
  4057fa:	ret    
  4057fb:	nop    DWORD PTR [rax+rax*1+0x0]
  405800:	call   QWORD PTR [rip+0x9dc2]        # 0x40f5c8
  405806:	mov    DWORD PTR [rax],0x0
  40580c:	add    rsp,0x20
  405810:	pop    rbx
  405811:	ret    
  405812:	xor    eax,eax
  405814:	jmp    0x4057b0
  405816:	nop
  405817:	nop
  405818:	nop
  405819:	nop
  40581a:	nop
  40581b:	nop
  40581c:	nop
  40581d:	nop
  40581e:	nop
  40581f:	nop
  405820:	push   rbx
  405821:	sub    rsp,0x30
  405825:	mov    rbx,rcx
  405828:	mov    rcx,QWORD PTR [rip+0x96a1]        # 0x40eed0
  40582f:	call   0x405dd0
  405834:	cmp    rax,0xffffffffffffffff
  405838:	mov    QWORD PTR [rsp+0x20],rax
  40583d:	je     0x4058b5
  40583f:	mov    ecx,0x8
  405844:	call   0x4070e0
  405849:	mov    rcx,QWORD PTR [rip+0x9680]        # 0x40eed0
  405850:	call   0x405dd0
  405855:	mov    rcx,QWORD PTR [rip+0x967c]        # 0x40eed8
  40585c:	mov    QWORD PTR [rsp+0x20],rax
  405861:	call   0x405dd0
  405866:	lea    rdx,[rsp+0x20]
  40586b:	lea    r8,[rsp+0x28]
  405870:	mov    rcx,rbx
  405873:	mov    QWORD PTR [rsp+0x28],rax
  405878:	call   0x407130
  40587d:	mov    rcx,QWORD PTR [rsp+0x20]
  405882:	mov    rbx,rax
  405885:	call   0x405de0
  40588a:	mov    rcx,QWORD PTR [rsp+0x28]
  40588f:	mov    QWORD PTR [rip+0x963a],rax        # 0x40eed0
  405896:	call   0x405de0
  40589b:	mov    ecx,0x8
  4058a0:	mov    QWORD PTR [rip+0x9631],rax        # 0x40eed8
  4058a7:	call   0x4070c0
  4058ac:	mov    rax,rbx
  4058af:	add    rsp,0x30
  4058b3:	pop    rbx
  4058b4:	ret    
  4058b5:	mov    rax,QWORD PTR [rip+0x5ae4]        # 0x40b3a0
  4058bc:	mov    rcx,rbx
  4058bf:	call   QWORD PTR [rax]
  4058c1:	add    rsp,0x30
  4058c5:	pop    rbx
  4058c6:	ret    
  4058c7:	nop    WORD PTR [rax+rax*1+0x0]
  4058d0:	sub    rsp,0x28
  4058d4:	call   0x405820
  4058d9:	test   rax,rax
  4058dc:	sete   al
  4058df:	movzx  eax,al
  4058e2:	neg    eax
  4058e4:	add    rsp,0x28
  4058e8:	ret    
  4058e9:	nop
  4058ea:	nop
  4058eb:	nop
  4058ec:	nop
  4058ed:	nop
  4058ee:	nop
  4058ef:	nop
  4058f0:	sub    rsp,0x28
  4058f4:	mov    rax,QWORD PTR [rip+0x2715]        # 0x408010
  4058fb:	mov    rax,QWORD PTR [rax]
  4058fe:	test   rax,rax
  405901:	je     0x405920
  405903:	call   rax
  405905:	mov    rax,QWORD PTR [rip+0x2704]        # 0x408010
  40590c:	lea    rdx,[rax+0x8]
  405910:	mov    rax,QWORD PTR [rax+0x8]
  405914:	mov    QWORD PTR [rip+0x26f5],rdx        # 0x408010
  40591b:	test   rax,rax
  40591e:	jne    0x405903
  405920:	add    rsp,0x28
  405924:	ret    
  405925:	nop
  405926:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405930:	push   rsi
  405931:	push   rbx
  405932:	sub    rsp,0x28
  405936:	mov    rsi,QWORD PTR [rip+0x59e3]        # 0x40b320
  40593d:	mov    rax,QWORD PTR [rsi]
  405940:	cmp    eax,0xffffffff
  405943:	mov    ebx,eax
  405945:	je     0x405970
  405947:	test   ebx,ebx
  405949:	je     0x40595a
  40594b:	nop    DWORD PTR [rax+rax*1+0x0]
  405950:	mov    eax,ebx
  405952:	call   QWORD PTR [rsi+rax*8]
  405955:	sub    ebx,0x1
  405958:	jne    0x405950
  40595a:	lea    rcx,[rip+0xffffffffffffff8f]        # 0x4058f0
  405961:	add    rsp,0x28
  405965:	pop    rbx
  405966:	pop    rsi
  405967:	jmp    0x4058d0
  40596c:	nop    DWORD PTR [rax+0x0]
  405970:	xor    ebx,ebx
  405972:	jmp    0x405976
  405974:	mov    ebx,eax
  405976:	lea    edx,[rbx+0x1]
  405979:	cmp    QWORD PTR [rsi+rdx*8],0x0
  40597e:	mov    rax,rdx
  405981:	jne    0x405974
  405983:	jmp    0x405947
  405985:	nop
  405986:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405990:	mov    eax,DWORD PTR [rip+0x8b6a]        # 0x40e500
  405996:	test   eax,eax
  405998:	je     0x4059a0
  40599a:	repz ret 
  40599c:	nop    DWORD PTR [rax+0x0]
  4059a0:	mov    DWORD PTR [rip+0x8b56],0x1        # 0x40e500
  4059aa:	jmp    0x405930
  4059ac:	nop
  4059ad:	nop
  4059ae:	nop
  4059af:	nop
  4059b0:	mov    rax,QWORD PTR [rip+0x9be1]        # 0x40f598
  4059b7:	rex.W jmp rax
  4059ba:	nop
  4059bb:	nop
  4059bc:	nop
  4059bd:	nop
  4059be:	nop
  4059bf:	nop
  4059c0:	xor    eax,eax
  4059c2:	ret    
  4059c3:	nop
  4059c4:	nop
  4059c5:	nop
  4059c6:	nop
  4059c7:	nop
  4059c8:	nop
  4059c9:	nop
  4059ca:	nop
  4059cb:	nop
  4059cc:	nop
  4059cd:	nop
  4059ce:	nop
  4059cf:	nop
  4059d0:	push   r12
  4059d2:	push   rbp
  4059d3:	push   rdi
  4059d4:	push   rsi
  4059d5:	push   rbx
  4059d6:	sub    rsp,0x40
  4059da:	mov    rbx,QWORD PTR [rip+0x269f]        # 0x408080
  4059e1:	movabs rax,0x2b992ddfa232
  4059eb:	mov    QWORD PTR [rsp+0x20],0x0
  4059f4:	cmp    rbx,rax
  4059f7:	je     0x405a10
  4059f9:	not    rbx
  4059fc:	mov    QWORD PTR [rip+0x268d],rbx        # 0x408090
  405a03:	add    rsp,0x40
  405a07:	pop    rbx
  405a08:	pop    rsi
  405a09:	pop    rdi
  405a0a:	pop    rbp
  405a0b:	pop    r12
  405a0d:	ret    
  405a0e:	xchg   ax,ax
  405a10:	lea    rcx,[rsp+0x20]
  405a15:	call   QWORD PTR [rip+0x9a7d]        # 0x40f498
  405a1b:	mov    r12,QWORD PTR [rsp+0x20]
  405a20:	call   QWORD PTR [rip+0x9a3a]        # 0x40f460
  405a26:	mov    ebp,eax
  405a28:	call   QWORD PTR [rip+0x9a3a]        # 0x40f468
  405a2e:	mov    edi,eax
  405a30:	call   QWORD PTR [rip+0x9a6a]        # 0x40f4a0
  405a36:	lea    rcx,[rsp+0x30]
  405a3b:	mov    esi,eax
  405a3d:	call   QWORD PTR [rip+0x9a95]        # 0x40f4d8
  405a43:	xor    r12,QWORD PTR [rsp+0x30]
  405a48:	mov    edx,edi
  405a4a:	movabs rax,0xffffffffffff
  405a54:	xor    rbp,r12
  405a57:	mov    rdi,rbp
  405a5a:	xor    rdi,rdx
  405a5d:	mov    edx,esi
  405a5f:	xor    rdi,rdx
  405a62:	mov    rsi,rdi
  405a65:	and    rsi,rax
  405a68:	cmp    rsi,rbx
  405a6b:	je     0x405a90
  405a6d:	mov    rax,rsi
  405a70:	not    rax
  405a73:	mov    QWORD PTR [rip+0x2606],rsi        # 0x408080
  405a7a:	mov    QWORD PTR [rip+0x260f],rax        # 0x408090
  405a81:	add    rsp,0x40
  405a85:	pop    rbx
  405a86:	pop    rsi
  405a87:	pop    rdi
  405a88:	pop    rbp
  405a89:	pop    r12
  405a8b:	ret    
  405a8c:	nop    DWORD PTR [rax+0x0]
  405a90:	movabs rax,0xffffd466d2205dcc
  405a9a:	movabs rsi,0x2b992ddfa233
  405aa4:	jmp    0x405a73
  405aa6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405ab0:	push   rbp
  405ab1:	push   rsi
  405ab2:	push   rbx
  405ab3:	mov    rbp,rsp
  405ab6:	sub    rsp,0x70
  405aba:	mov    rsi,rcx
  405abd:	lea    rcx,[rip+0x8a7c]        # 0x40e540
  405ac4:	call   QWORD PTR [rip+0x9a2e]        # 0x40f4f8
  405aca:	mov    rbx,QWORD PTR [rip+0x8b67]        # 0x40e638
  405ad1:	xor    r8d,r8d
  405ad4:	lea    rdx,[rbp-0x28]
  405ad8:	mov    rcx,rbx
  405adb:	call   QWORD PTR [rip+0x9a1f]        # 0x40f500
  405ae1:	test   rax,rax
  405ae4:	mov    r9,rax
  405ae7:	je     0x405b90
  405aed:	lea    rax,[rbp-0x20]
  405af1:	mov    QWORD PTR [rsp+0x38],0x0
  405afa:	mov    r8,rbx
  405afd:	mov    rdx,QWORD PTR [rbp-0x28]
  405b01:	xor    ecx,ecx
  405b03:	mov    QWORD PTR [rsp+0x30],rax
  405b08:	lea    rax,[rbp-0x18]
  405b0c:	mov    QWORD PTR [rsp+0x28],rax
  405b11:	lea    rax,[rip+0x8a28]        # 0x40e540
  405b18:	mov    QWORD PTR [rsp+0x20],rax
  405b1d:	call   QWORD PTR [rip+0x99e5]        # 0x40f508
  405b23:	mov    rax,QWORD PTR [rip+0x8b0e]        # 0x40e638
  405b2a:	xor    ecx,ecx
  405b2c:	mov    QWORD PTR [rip+0x8a8d],rsi        # 0x40e5c0
  405b33:	mov    DWORD PTR [rip+0x8f03],0xc0000409        # 0x40ea40
  405b3d:	mov    DWORD PTR [rip+0x8efd],0x1        # 0x40ea44
  405b47:	mov    QWORD PTR [rip+0x8f02],rax        # 0x40ea50
  405b4e:	mov    rax,QWORD PTR [rip+0x252b]        # 0x408080
  405b55:	mov    QWORD PTR [rbp-0x10],rax
  405b59:	mov    rax,QWORD PTR [rip+0x2530]        # 0x408090
  405b60:	mov    QWORD PTR [rbp-0x8],rax
  405b64:	call   QWORD PTR [rip+0x99ae]        # 0x40f518
  405b6a:	lea    rcx,[rip+0x550f]        # 0x40b080
  405b71:	call   QWORD PTR [rip+0x99c9]        # 0x40f540
  405b77:	call   QWORD PTR [rip+0x98db]        # 0x40f458
  405b7d:	mov    edx,0xc0000409
  405b82:	mov    rcx,rax
  405b85:	call   QWORD PTR [rip+0x99a5]        # 0x40f530
  405b8b:	call   0x4070b8
  405b90:	mov    rax,QWORD PTR [rbp+0x18]
  405b94:	mov    QWORD PTR [rip+0x8a9d],rax        # 0x40e638
  405b9b:	lea    rax,[rbp+0x8]
  405b9f:	mov    QWORD PTR [rip+0x8a32],rax        # 0x40e5d8
  405ba6:	jmp    0x405b23
  405bab:	nop
  405bac:	nop
  405bad:	nop
  405bae:	nop
  405baf:	nop
  405bb0:	sub    rsp,0x28
  405bb4:	test   edx,edx
  405bb6:	je     0x405bd0
  405bb8:	cmp    edx,0x3
  405bbb:	je     0x405bd0
  405bbd:	mov    eax,0x1
  405bc2:	add    rsp,0x28
  405bc6:	ret    
  405bc7:	nop    WORD PTR [rax+rax*1+0x0]
  405bd0:	call   0x4068c0
  405bd5:	mov    eax,0x1
  405bda:	add    rsp,0x28
  405bde:	ret    
  405bdf:	nop
  405be0:	push   rsi
  405be1:	push   rbx
  405be2:	sub    rsp,0x28
  405be6:	mov    rax,QWORD PTR [rip+0x5713]        # 0x40b300
  405bed:	cmp    DWORD PTR [rax],0x2
  405bf0:	je     0x405bf8
  405bf2:	mov    DWORD PTR [rax],0x2
  405bf8:	cmp    edx,0x2
  405bfb:	je     0x405c10
  405bfd:	cmp    edx,0x1
  405c00:	je     0x405c42
  405c02:	mov    eax,0x1
  405c07:	add    rsp,0x28
  405c0b:	pop    rbx
  405c0c:	pop    rsi
  405c0d:	ret    
  405c0e:	xchg   ax,ax
  405c10:	lea    rbx,[rip+0xa449]        # 0x410060
  405c17:	lea    rsi,[rip+0xa442]        # 0x410060
  405c1e:	cmp    rbx,rsi
  405c21:	je     0x405c02
  405c23:	mov    rax,QWORD PTR [rbx]
  405c26:	test   rax,rax
  405c29:	je     0x405c2d
  405c2b:	call   rax
  405c2d:	add    rbx,0x8
  405c31:	cmp    rbx,rsi
  405c34:	jne    0x405c23
  405c36:	mov    eax,0x1
  405c3b:	add    rsp,0x28
  405c3f:	pop    rbx
  405c40:	pop    rsi
  405c41:	ret    
  405c42:	call   0x4068c0
  405c47:	jmp    0x405c02
  405c49:	nop    DWORD PTR [rax+0x0]
  405c50:	xor    eax,eax
  405c52:	ret    
  405c53:	nop
  405c54:	nop
  405c55:	nop
  405c56:	nop
  405c57:	nop
  405c58:	nop
  405c59:	nop
  405c5a:	nop
  405c5b:	nop
  405c5c:	nop
  405c5d:	nop
  405c5e:	nop
  405c5f:	nop
  405c60:	sub    rsp,0x58
  405c64:	mov    rax,QWORD PTR [rip+0x8eb5]        # 0x40eb20
  405c6b:	test   rax,rax
  405c6e:	je     0x405c9c
  405c70:	movsd  xmm0,QWORD PTR [rsp+0x80]
  405c79:	mov    DWORD PTR [rsp+0x20],ecx
  405c7d:	lea    rcx,[rsp+0x20]
  405c82:	mov    QWORD PTR [rsp+0x28],rdx
  405c87:	movsd  QWORD PTR [rsp+0x30],xmm2
  405c8d:	movsd  QWORD PTR [rsp+0x38],xmm3
  405c93:	movsd  QWORD PTR [rsp+0x40],xmm0
  405c99:	call   rax
  405c9b:	nop
  405c9c:	add    rsp,0x58
  405ca0:	ret    
  405ca1:	nop    DWORD PTR [rax+rax*1+0x0]
  405ca6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405cb0:	mov    QWORD PTR [rip+0x8e69],rcx        # 0x40eb20
  405cb7:	jmp    0x407108
  405cbc:	nop    DWORD PTR [rax+0x0]
  405cc0:	push   rsi
  405cc1:	push   rbx
  405cc2:	sub    rsp,0x78
  405cc6:	movaps XMMWORD PTR [rsp+0x40],xmm6
  405ccb:	movaps XMMWORD PTR [rsp+0x50],xmm7
  405cd0:	movaps XMMWORD PTR [rsp+0x60],xmm8
  405cd6:	cmp    DWORD PTR [rcx],0x6
  405cd9:	ja     0x405db0
  405cdf:	mov    edx,DWORD PTR [rcx]
  405ce1:	lea    rax,[rip+0x54dc]        # 0x40b1c4
  405ce8:	movsxd rdx,DWORD PTR [rax+rdx*4]
  405cec:	add    rax,rdx
  405cef:	jmp    rax
  405cf1:	lea    rbx,[rip+0x53a8]        # 0x40b0a0
  405cf8:	nop    DWORD PTR [rax+rax*1+0x0]
  405d00:	movsd  xmm8,QWORD PTR [rcx+0x20]
  405d06:	mov    rsi,QWORD PTR [rcx+0x8]
  405d0a:	movsd  xmm7,QWORD PTR [rcx+0x18]
  405d0f:	movsd  xmm6,QWORD PTR [rcx+0x10]
  405d14:	call   0x407120
  405d19:	movsd  QWORD PTR [rsp+0x30],xmm8
  405d20:	lea    rcx,[rax+0x60]
  405d24:	lea    rdx,[rip+0x546d]        # 0x40b198
  405d2b:	movsd  QWORD PTR [rsp+0x28],xmm7
  405d31:	mov    r9,rsi
  405d34:	mov    r8,rbx
  405d37:	movsd  QWORD PTR [rsp+0x20],xmm6
  405d3d:	call   0x4070a0
  405d42:	nop
  405d43:	movaps xmm6,XMMWORD PTR [rsp+0x40]
  405d48:	xor    eax,eax
  405d4a:	movaps xmm7,XMMWORD PTR [rsp+0x50]
  405d4f:	movaps xmm8,XMMWORD PTR [rsp+0x60]
  405d55:	add    rsp,0x78
  405d59:	pop    rbx
  405d5a:	pop    rsi
  405d5b:	ret    
  405d5c:	nop    DWORD PTR [rax+0x0]
  405d60:	lea    rbx,[rip+0x5358]        # 0x40b0bf
  405d67:	jmp    0x405d00
  405d69:	nop    DWORD PTR [rax+0x0]
  405d70:	lea    rbx,[rip+0x5369]        # 0x40b0e0
  405d77:	jmp    0x405d00
  405d79:	nop    DWORD PTR [rax+0x0]
  405d80:	lea    rbx,[rip+0x53c9]        # 0x40b150
  405d87:	jmp    0x405d00
  405d8c:	nop    DWORD PTR [rax+0x0]
  405d90:	lea    rbx,[rip+0x5391]        # 0x40b128
  405d97:	jmp    0x405d00
  405d9c:	nop    DWORD PTR [rax+0x0]
  405da0:	lea    rbx,[rip+0x5359]        # 0x40b100
  405da7:	jmp    0x405d00
  405dac:	nop    DWORD PTR [rax+0x0]
  405db0:	lea    rbx,[rip+0x53cf]        # 0x40b186
  405db7:	jmp    0x405d00
  405dbc:	nop
  405dbd:	nop
  405dbe:	nop
  405dbf:	nop
  405dc0:	fninit 
  405dc2:	ret    
  405dc3:	nop
  405dc4:	nop
  405dc5:	nop
  405dc6:	nop
  405dc7:	nop
  405dc8:	nop
  405dc9:	nop
  405dca:	nop
  405dcb:	nop
  405dcc:	nop
  405dcd:	nop
  405dce:	nop
  405dcf:	nop
  405dd0:	mov    rax,rcx
  405dd3:	ret    
  405dd4:	xchg   ax,ax
  405dd6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405de0:	mov    rax,rcx
  405de3:	ret    
  405de4:	nop
  405de5:	nop
  405de6:	nop
  405de7:	nop
  405de8:	nop
  405de9:	nop
  405dea:	nop
  405deb:	nop
  405dec:	nop
  405ded:	nop
  405dee:	nop
  405def:	nop
  405df0:	push   rsi
  405df1:	push   rbx
  405df2:	sub    rsp,0x38
  405df6:	lea    rax,[rsp+0x58]
  405dfb:	mov    rbx,rcx
  405dfe:	mov    QWORD PTR [rsp+0x58],rdx
  405e03:	mov    QWORD PTR [rsp+0x60],r8
  405e08:	mov    QWORD PTR [rsp+0x68],r9
  405e0d:	mov    QWORD PTR [rsp+0x28],rax
  405e12:	call   0x407120
  405e17:	lea    rcx,[rip+0x53c2]        # 0x40b1e0
  405e1e:	lea    r9,[rax+0x60]
  405e22:	mov    r8d,0x1b
  405e28:	mov    edx,0x1
  405e2d:	call   0x407088
  405e32:	mov    rsi,QWORD PTR [rsp+0x28]
  405e37:	call   0x407120
  405e3c:	lea    rcx,[rax+0x60]
  405e40:	mov    rdx,rbx
  405e43:	mov    r8,rsi
  405e46:	call   0x406fc0
  405e4b:	call   0x4070b8
  405e50:	nop
  405e51:	nop    DWORD PTR [rax+rax*1+0x0]
  405e56:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405e60:	push   r13
  405e62:	push   r12
  405e64:	push   rbp
  405e65:	push   rdi
  405e66:	push   rsi
  405e67:	push   rbx
  405e68:	sub    rsp,0x58
  405e6c:	movsxd rbp,DWORD PTR [rip+0x8cd1]        # 0x40eb44
  405e73:	mov    rbx,rcx
  405e76:	mov    rsi,rdx
  405e79:	mov    rdi,r8
  405e7c:	test   ebp,ebp
  405e7e:	jle    0x405f7a
  405e84:	mov    rax,QWORD PTR [rip+0x8cbd]        # 0x40eb48
  405e8b:	xor    r9d,r9d
  405e8e:	add    rax,0x8
  405e92:	mov    r10,QWORD PTR [rax]
  405e95:	cmp    rbx,r10
  405e98:	jb     0x405eae
  405e9a:	mov    rdx,QWORD PTR [rax+0x8]
  405e9e:	mov    r11d,DWORD PTR [rdx+0x8]
  405ea2:	add    r10,r11
  405ea5:	cmp    rbx,r10
  405ea8:	jb     0x405f60
  405eae:	add    r9d,0x1
  405eb2:	add    rax,0x18
  405eb6:	cmp    r9d,ebp
  405eb9:	jne    0x405e92
  405ebb:	mov    rcx,rbx
  405ebe:	call   0x406ad0
  405ec3:	test   rax,rax
  405ec6:	mov    r12,rax
  405ec9:	je     0x405fb2
  405ecf:	lea    rbp,[rbp+rbp*2+0x0]
  405ed4:	shl    rbp,0x3
  405ed8:	mov    r13,rbp
  405edb:	add    r13,QWORD PTR [rip+0x8c66]        # 0x40eb48
  405ee2:	mov    QWORD PTR [r13+0x10],rax
  405ee6:	mov    DWORD PTR [r13+0x0],0x0
  405eee:	call   0x406bf0
  405ef3:	mov    edx,DWORD PTR [r12+0xc]
  405ef8:	mov    r8d,0x30
  405efe:	add    rax,rdx
  405f01:	lea    rdx,[rsp+0x20]
  405f06:	mov    QWORD PTR [r13+0x8],rax
  405f0a:	mov    rax,QWORD PTR [rip+0x8c37]        # 0x40eb48
  405f11:	mov    rcx,QWORD PTR [rax+rbp*1+0x8]
  405f16:	call   QWORD PTR [rip+0x9634]        # 0x40f550
  405f1c:	test   rax,rax
  405f1f:	je     0x405f95
  405f21:	mov    eax,DWORD PTR [rsp+0x44]
  405f25:	lea    edx,[rax-0x4]
  405f28:	and    edx,0xfffffffb
  405f2b:	je     0x405f59
  405f2d:	sub    eax,0x40
  405f30:	and    eax,0xffffffbf
  405f33:	je     0x405f59
  405f35:	mov    r9,rbp
  405f38:	add    r9,QWORD PTR [rip+0x8c09]        # 0x40eb48
  405f3f:	mov    r8d,0x40
  405f45:	mov    rdx,QWORD PTR [rsp+0x38]
  405f4a:	mov    rcx,QWORD PTR [rsp+0x20]
  405f4f:	call   QWORD PTR [rip+0x95f3]        # 0x40f548
  405f55:	test   eax,eax
  405f57:	je     0x405f81
  405f59:	add    DWORD PTR [rip+0x8be4],0x1        # 0x40eb44
  405f60:	mov    r8,rdi
  405f63:	mov    rdx,rsi
  405f66:	mov    rcx,rbx
  405f69:	add    rsp,0x58
  405f6d:	pop    rbx
  405f6e:	pop    rsi
  405f6f:	pop    rdi
  405f70:	pop    rbp
  405f71:	pop    r12
  405f73:	pop    r13
  405f75:	jmp    0x407050
  405f7a:	xor    ebp,ebp
  405f7c:	jmp    0x405ebb
  405f81:	call   QWORD PTR [rip+0x94f9]        # 0x40f480
  405f87:	lea    rcx,[rip+0x52ca]        # 0x40b258
  405f8e:	mov    edx,eax
  405f90:	call   0x405df0
  405f95:	mov    rax,QWORD PTR [rip+0x8bac]        # 0x40eb48
  405f9c:	mov    edx,DWORD PTR [r12+0x8]
  405fa1:	lea    rcx,[rip+0x5278]        # 0x40b220
  405fa8:	mov    r8,QWORD PTR [rax+rbp*1+0x8]
  405fad:	call   0x405df0
  405fb2:	lea    rcx,[rip+0x5247]        # 0x40b200
  405fb9:	mov    rdx,rbx
  405fbc:	call   0x405df0
  405fc1:	nop
  405fc2:	nop    DWORD PTR [rax+0x0]
  405fc6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405fd0:	push   rbp
  405fd1:	push   r14
  405fd3:	push   r13
  405fd5:	push   r12
  405fd7:	push   rdi
  405fd8:	push   rsi
  405fd9:	push   rbx
  405fda:	mov    rbp,rsp
  405fdd:	sub    rsp,0x60
  405fe1:	mov    ebx,DWORD PTR [rip+0x8b59]        # 0x40eb40
  405fe7:	test   ebx,ebx
  405fe9:	je     0x406000
  405feb:	mov    rsp,rbp
  405fee:	pop    rbx
  405fef:	pop    rsi
  405ff0:	pop    rdi
  405ff1:	pop    r12
  405ff3:	pop    r13
  405ff5:	pop    r14
  405ff7:	pop    rbp
  405ff8:	ret    
  405ff9:	nop    DWORD PTR [rax+0x0]
  406000:	mov    DWORD PTR [rip+0x8b36],0x1        # 0x40eb40
  40600a:	call   0x406b20
  40600f:	cdqe   
  406011:	lea    rax,[rax+rax*2]
  406015:	lea    rax,[rax*8+0x1e]
  40601d:	and    rax,0xfffffffffffffff0
  406021:	call   0x406d40
  406026:	mov    rsi,QWORD PTR [rip+0x5303]        # 0x40b330
  40602d:	mov    rbx,QWORD PTR [rip+0x530c]        # 0x40b340
  406034:	sub    rsp,rax
  406037:	mov    DWORD PTR [rip+0x8b03],0x0        # 0x40eb44
  406041:	lea    rax,[rsp+0x20]
  406046:	mov    QWORD PTR [rip+0x8afb],rax        # 0x40eb48
  40604d:	mov    rax,rsi
  406050:	sub    rax,rbx
  406053:	cmp    rax,0x7
  406057:	jle    0x405feb
  406059:	cmp    rax,0xb
  40605d:	jle    0x406085
  40605f:	mov    r11d,DWORD PTR [rbx]
  406062:	test   r11d,r11d
  406065:	jne    0x4061b0
  40606b:	mov    r10d,DWORD PTR [rbx+0x4]
  40606f:	test   r10d,r10d
  406072:	jne    0x4061b0
  406078:	mov    r9d,DWORD PTR [rbx+0x8]
  40607c:	test   r9d,r9d
  40607f:	jne    0x40609c
  406081:	add    rbx,0xc
  406085:	mov    r8d,DWORD PTR [rbx]
  406088:	test   r8d,r8d
  40608b:	jne    0x4061b0
  406091:	mov    ecx,DWORD PTR [rbx+0x4]
  406094:	test   ecx,ecx
  406096:	jne    0x4061b0
  40609c:	mov    edx,DWORD PTR [rbx+0x8]
  40609f:	cmp    edx,0x1
  4060a2:	jne    0x4062bc
  4060a8:	add    rbx,0xc
  4060ac:	cmp    rbx,rsi
  4060af:	jae    0x405feb
  4060b5:	mov    r12,QWORD PTR [rip+0x52a4]        # 0x40b360
  4060bc:	lea    r13,[rbp-0x30]
  4060c0:	movabs r14,0xffffffff00000000
  4060ca:	mov    ecx,DWORD PTR [rbx+0x4]
  4060cd:	mov    eax,DWORD PTR [rbx]
  4060cf:	movzx  edx,BYTE PTR [rbx+0x8]
  4060d3:	add    rax,r12
  4060d6:	add    rcx,r12
  4060d9:	cmp    edx,0x10
  4060dc:	mov    r8,QWORD PTR [rax]
  4060df:	je     0x406226
  4060e5:	jbe    0x4061ed
  4060eb:	cmp    edx,0x20
  4060ee:	je     0x40626f
  4060f4:	cmp    edx,0x40
  4060f7:	jne    0x40625b
  4060fd:	sub    r8,rax
  406100:	mov    rdx,r13
  406103:	mov    rdi,r13
  406106:	mov    rax,r8
  406109:	add    rax,QWORD PTR [rcx]
  40610c:	mov    r8d,0x8
  406112:	mov    QWORD PTR [rbp-0x30],rax
  406116:	call   0x405e60
  40611b:	add    rbx,0xc
  40611f:	cmp    rbx,rsi
  406122:	jb     0x4060ca
  406124:	mov    eax,DWORD PTR [rip+0x8a1a]        # 0x40eb44
  40612a:	xor    ebx,ebx
  40612c:	xor    esi,esi
  40612e:	test   eax,eax
  406130:	jle    0x405feb
  406136:	mov    r14,QWORD PTR [rip+0x9413]        # 0x40f550
  40613d:	lea    r13,[rbp-0x34]
  406141:	mov    r12,QWORD PTR [rip+0x9400]        # 0x40f548
  406148:	jmp    0x406163
  40614a:	nop    WORD PTR [rax+rax*1+0x0]
  406150:	add    esi,0x1
  406153:	add    rbx,0x18
  406157:	cmp    esi,DWORD PTR [rip+0x89e7]        # 0x40eb44
  40615d:	jge    0x405feb
  406163:	mov    rax,rbx
  406166:	add    rax,QWORD PTR [rip+0x89db]        # 0x40eb48
  40616d:	mov    edx,DWORD PTR [rax]
  40616f:	test   edx,edx
  406171:	je     0x406150
  406173:	mov    rcx,QWORD PTR [rax+0x8]
  406177:	mov    r8d,0x30
  40617d:	mov    rdx,rdi
  406180:	call   r14
  406183:	test   rax,rax
  406186:	je     0x40629e
  40618c:	mov    rax,QWORD PTR [rip+0x89b5]        # 0x40eb48
  406193:	mov    r9,r13
  406196:	mov    rdx,QWORD PTR [rbp-0x18]
  40619a:	mov    rcx,QWORD PTR [rbp-0x30]
  40619e:	mov    r8d,DWORD PTR [rax+rbx*1]
  4061a2:	call   r12
  4061a5:	jmp    0x406150
  4061a7:	nop    WORD PTR [rax+rax*1+0x0]
  4061b0:	cmp    rbx,rsi
  4061b3:	jae    0x405feb
  4061b9:	mov    r12,QWORD PTR [rip+0x51a0]        # 0x40b360
  4061c0:	lea    rdi,[rbp-0x30]
  4061c4:	mov    ecx,DWORD PTR [rbx+0x4]
  4061c7:	mov    eax,DWORD PTR [rbx]
  4061c9:	mov    r8d,0x4
  4061cf:	mov    rdx,rdi
  4061d2:	add    rbx,0x8
  4061d6:	add    rcx,r12
  4061d9:	add    eax,DWORD PTR [rcx]
  4061db:	mov    DWORD PTR [rbp-0x30],eax
  4061de:	call   0x405e60
  4061e3:	cmp    rbx,rsi
  4061e6:	jb     0x4061c4
  4061e8:	jmp    0x406124
  4061ed:	cmp    edx,0x8
  4061f0:	jne    0x40625b
  4061f2:	movzx  edx,BYTE PTR [rcx]
  4061f5:	mov    rdi,r13
  4061f8:	mov    r10,rdx
  4061fb:	or     r10,0xffffffffffffff00
  406202:	test   dl,dl
  406204:	cmovs  rdx,r10
  406208:	sub    rdx,rax
  40620b:	lea    rax,[r8+rdx*1]
  40620f:	mov    r8d,0x1
  406215:	mov    rdx,r13
  406218:	mov    QWORD PTR [rbp-0x30],rax
  40621c:	call   0x405e60
  406221:	jmp    0x40611b
  406226:	movzx  edx,WORD PTR [rcx]
  406229:	mov    rdi,r13
  40622c:	mov    r10,rdx
  40622f:	or     r10,0xffffffffffff0000
  406236:	test   dx,dx
  406239:	cmovs  rdx,r10
  40623d:	sub    rdx,rax
  406240:	lea    rax,[r8+rdx*1]
  406244:	mov    r8d,0x2
  40624a:	mov    rdx,r13
  40624d:	mov    QWORD PTR [rbp-0x30],rax
  406251:	call   0x405e60
  406256:	jmp    0x40611b
  40625b:	lea    rcx,[rip+0x5056]        # 0x40b2b8
  406262:	mov    QWORD PTR [rbp-0x30],0x0
  40626a:	call   0x405df0
  40626f:	mov    edx,DWORD PTR [rcx]
  406271:	mov    rdi,r13
  406274:	mov    r10,rdx
  406277:	or     r10,r14
  40627a:	test   edx,edx
  40627c:	cmovs  rdx,r10
  406280:	sub    rdx,rax
  406283:	lea    rax,[r8+rdx*1]
  406287:	mov    r8d,0x4
  40628d:	mov    rdx,r13
  406290:	mov    QWORD PTR [rbp-0x30],rax
  406294:	call   0x405e60
  406299:	jmp    0x40611b
  40629e:	add    rbx,QWORD PTR [rip+0x88a3]        # 0x40eb48
  4062a5:	lea    rcx,[rip+0x4f74]        # 0x40b220
  4062ac:	mov    rax,QWORD PTR [rbx+0x10]
  4062b0:	mov    r8,QWORD PTR [rbx+0x8]
  4062b4:	mov    edx,DWORD PTR [rax+0x8]
  4062b7:	call   0x405df0
  4062bc:	lea    rcx,[rip+0x4fbd]        # 0x40b280
  4062c3:	call   0x405df0
  4062c8:	nop
  4062c9:	nop
  4062ca:	nop
  4062cb:	nop
  4062cc:	nop
  4062cd:	nop
  4062ce:	nop
  4062cf:	nop
  4062d0:	sub    rsp,0x28
  4062d4:	mov    eax,DWORD PTR [rcx]
  4062d6:	cmp    eax,0xc0000091
  4062db:	ja     0x406340
  4062dd:	cmp    eax,0xc000008d
  4062e2:	jae    0x40635f
  4062e4:	cmp    eax,0xc0000008
  4062e9:	je     0x406400
  4062ef:	ja     0x4063d0
  4062f5:	cmp    eax,0x80000002
  4062fa:	je     0x406400
  406300:	cmp    eax,0xc0000005
  406305:	jne    0x4063de
  40630b:	xor    edx,edx
  40630d:	mov    ecx,0xb
  406312:	call   0x407028
  406317:	cmp    rax,0x1
  40631b:	je     0x406460
  406321:	test   rax,rax
  406324:	je     0x406440
  40632a:	mov    ecx,0xb
  40632f:	call   rax
  406331:	xor    eax,eax
  406333:	add    rsp,0x28
  406337:	ret    
  406338:	nop    DWORD PTR [rax+rax*1+0x0]
  406340:	cmp    eax,0xc0000094
  406345:	je     0x406410
  40634b:	ja     0x406390
  40634d:	cmp    eax,0xc0000092
  406352:	je     0x406400
  406358:	cmp    eax,0xc0000093
  40635d:	jne    0x4063de
  40635f:	xor    edx,edx
  406361:	mov    ecx,0x8
  406366:	call   0x407028
  40636b:	cmp    rax,0x1
  40636f:	mov    rdx,rax
  406372:	je     0x4063e8
  406374:	test   rdx,rdx
  406377:	mov    eax,0x1
  40637c:	je     0x406333
  40637e:	mov    ecx,0x8
  406383:	call   rdx
  406385:	xor    eax,eax
  406387:	add    rsp,0x28
  40638b:	ret    
  40638c:	nop    DWORD PTR [rax+0x0]
  406390:	cmp    eax,0xc0000095
  406395:	je     0x406400
  406397:	cmp    eax,0xc0000096
  40639c:	jne    0x4063de
  40639e:	xor    edx,edx
  4063a0:	mov    ecx,0x4
  4063a5:	call   0x407028
  4063aa:	cmp    rax,0x1
  4063ae:	je     0x40644a
  4063b4:	test   rax,rax
  4063b7:	je     0x406440
  4063bd:	mov    ecx,0x4
  4063c2:	call   rax
  4063c4:	xor    eax,eax
  4063c6:	jmp    0x406333
  4063cb:	nop    DWORD PTR [rax+rax*1+0x0]
  4063d0:	cmp    eax,0xc000001d
  4063d5:	je     0x40639e
  4063d7:	cmp    eax,0xc000008c
  4063dc:	je     0x406400
  4063de:	mov    eax,0x1
  4063e3:	add    rsp,0x28
  4063e7:	ret    
  4063e8:	mov    edx,0x1
  4063ed:	mov    ecx,0x8
  4063f2:	call   0x407028
  4063f7:	call   0x405dc0
  4063fc:	nop    DWORD PTR [rax+0x0]
  406400:	xor    eax,eax
  406402:	add    rsp,0x28
  406406:	ret    
  406407:	nop    WORD PTR [rax+rax*1+0x0]
  406410:	xor    edx,edx
  406412:	mov    ecx,0x8
  406417:	call   0x407028
  40641c:	cmp    rax,0x1
  406420:	mov    rdx,rax
  406423:	jne    0x406374
  406429:	mov    edx,0x1
  40642e:	mov    ecx,0x8
  406433:	call   0x407028
  406438:	xor    eax,eax
  40643a:	jmp    0x406333
  40643f:	nop
  406440:	mov    eax,0x4
  406445:	add    rsp,0x28
  406449:	ret    
  40644a:	mov    edx,0x1
  40644f:	mov    ecx,0x4
  406454:	call   0x407028
  406459:	xor    eax,eax
  40645b:	jmp    0x406333
  406460:	mov    edx,0x1
  406465:	mov    ecx,0xb
  40646a:	call   0x407028
  40646f:	xor    eax,eax
  406471:	jmp    0x406333
  406476:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406480:	push   r12
  406482:	push   rbp
  406483:	push   rdi
  406484:	push   rsi
  406485:	push   rbx
  406486:	sub    rsp,0x20
  40648a:	call   0x406bf0
  40648f:	mov    rbp,rax
  406492:	mov    eax,DWORD PTR [rip+0x86f0]        # 0x40eb88
  406498:	test   eax,eax
  40649a:	jne    0x4064c1
  40649c:	test   rbp,rbp
  40649f:	je     0x4064c1
  4064a1:	lea    rcx,[rip+0x4e48]        # 0x40b2f0
  4064a8:	mov    DWORD PTR [rip+0x86d6],0x1        # 0x40eb88
  4064b2:	call   0x406a30
  4064b7:	test   rax,rax
  4064ba:	je     0x4064d0
  4064bc:	mov    eax,0x1
  4064c1:	add    rsp,0x20
  4064c5:	pop    rbx
  4064c6:	pop    rsi
  4064c7:	pop    rdi
  4064c8:	pop    rbp
  4064c9:	pop    r12
  4064cb:	ret    
  4064cc:	nop    DWORD PTR [rax+0x0]
  4064d0:	lea    rbx,[rip+0x87e9]        # 0x40ecc0
  4064d7:	mov    ecx,0x30
  4064dc:	lea    rdx,[rip+0x86dd]        # 0x40ebc0
  4064e3:	lea    r12,[rip+0xfffffffffffffde6]        # 0x4062d0
  4064ea:	xor    esi,esi
  4064ec:	mov    rdi,rbx
  4064ef:	rep stos QWORD PTR es:[rdi],rax
  4064f2:	mov    rdi,rdx
  4064f5:	sub    r12,rbp
  4064f8:	mov    cl,0x20
  4064fa:	rep stos QWORD PTR es:[rdi],rax
  4064fd:	mov    rdi,rdx
  406500:	jmp    0x406530
  406502:	mov    BYTE PTR [rdi],0x9
  406505:	mov    DWORD PTR [rdi+0x4],r12d
  406509:	add    rsi,0x1
  40650d:	mov    edx,DWORD PTR [rax+0xc]
  406510:	add    rbx,0xc
  406514:	mov    DWORD PTR [rbx-0xc],edx
  406517:	add    edx,DWORD PTR [rax+0x8]
  40651a:	mov    rax,rdi
  40651d:	sub    rax,rbp
  406520:	add    rdi,0x8
  406524:	mov    DWORD PTR [rbx-0x4],eax
  406527:	mov    DWORD PTR [rbx-0x8],edx
  40652a:	cmp    rsi,0x20
  40652e:	je     0x406565
  406530:	mov    rcx,rsi
  406533:	call   0x406b60
  406538:	test   rax,rax
  40653b:	jne    0x406502
  40653d:	test   rsi,rsi
  406540:	je     0x4064bc
  406546:	mov    edx,esi
  406548:	nop    DWORD PTR [rax+rax*1+0x0]
  406550:	mov    r8,rbp
  406553:	lea    rcx,[rip+0x8766]        # 0x40ecc0
  40655a:	call   QWORD PTR [rip+0x8f90]        # 0x40f4f0
  406560:	jmp    0x4064bc
  406565:	mov    edx,0x20
  40656a:	jmp    0x406550
  40656c:	nop    DWORD PTR [rax+0x0]
  406570:	push   rbx
  406571:	sub    rsp,0x20
  406575:	mov    rdx,QWORD PTR [rcx]
  406578:	mov    eax,DWORD PTR [rdx]
  40657a:	mov    r8d,eax
  40657d:	and    r8d,0x20ffffff
  406584:	cmp    r8d,0x20474343
  40658b:	je     0x406690
  406591:	cmp    eax,0xc0000091
  406596:	mov    rbx,rcx
  406599:	ja     0x406620
  40659f:	cmp    eax,0xc000008d
  4065a4:	jae    0x406637
  4065aa:	cmp    eax,0xc0000008
  4065af:	je     0x4065e3
  4065b1:	ja     0x4065f0
  4065b3:	cmp    eax,0x80000002
  4065b8:	je     0x4065e3
  4065ba:	cmp    eax,0xc0000005
  4065bf:	jne    0x406602
  4065c1:	xor    edx,edx
  4065c3:	mov    ecx,0xb
  4065c8:	call   0x407028
  4065cd:	cmp    rax,0x1
  4065d1:	je     0x406700
  4065d7:	test   rax,rax
  4065da:	je     0x406602
  4065dc:	mov    ecx,0xb
  4065e1:	call   rax
  4065e3:	mov    eax,0xffffffff
  4065e8:	add    rsp,0x20
  4065ec:	pop    rbx
  4065ed:	ret    
  4065ee:	xchg   ax,ax
  4065f0:	cmp    eax,0xc000001d
  4065f5:	je     0x4066b6
  4065fb:	cmp    eax,0xc000008c
  406600:	je     0x4065e3
  406602:	mov    rax,QWORD PTR [rip+0x8577]        # 0x40eb80
  406609:	test   rax,rax
  40660c:	je     0x4065e8
  40660e:	mov    rcx,rbx
  406611:	add    rsp,0x20
  406615:	pop    rbx
  406616:	rex.W jmp rax
  406619:	nop    DWORD PTR [rax+0x0]
  406620:	cmp    eax,0xc0000094
  406625:	je     0x406662
  406627:	ja     0x4066a0
  406629:	cmp    eax,0xc0000092
  40662e:	je     0x4065e3
  406630:	cmp    eax,0xc0000093
  406635:	jne    0x406602
  406637:	xor    edx,edx
  406639:	mov    ecx,0x8
  40663e:	call   0x407028
  406643:	cmp    rax,0x1
  406647:	jne    0x406674
  406649:	mov    edx,0x1
  40664e:	mov    ecx,0x8
  406653:	call   0x407028
  406658:	call   0x405dc0
  40665d:	jmp    0x4065e3
  406662:	xor    edx,edx
  406664:	mov    ecx,0x8
  406669:	call   0x407028
  40666e:	cmp    rax,0x1
  406672:	je     0x4066e2
  406674:	test   rax,rax
  406677:	je     0x406602
  406679:	mov    ecx,0x8
  40667e:	call   rax
  406680:	mov    eax,0xffffffff
  406685:	jmp    0x4065e8
  40668a:	nop    WORD PTR [rax+rax*1+0x0]
  406690:	test   BYTE PTR [rdx+0x4],0x1
  406694:	jne    0x406591
  40669a:	jmp    0x4065e3
  40669f:	nop
  4066a0:	cmp    eax,0xc0000095
  4066a5:	je     0x4065e3
  4066ab:	cmp    eax,0xc0000096
  4066b0:	jne    0x406602
  4066b6:	xor    edx,edx
  4066b8:	mov    ecx,0x4
  4066bd:	call   0x407028
  4066c2:	cmp    rax,0x1
  4066c6:	je     0x406714
  4066c8:	test   rax,rax
  4066cb:	je     0x406602
  4066d1:	mov    ecx,0x4
  4066d6:	call   rax
  4066d8:	mov    eax,0xffffffff
  4066dd:	jmp    0x4065e8
  4066e2:	mov    edx,0x1
  4066e7:	mov    ecx,0x8
  4066ec:	call   0x407028
  4066f1:	jmp    0x4065e3
  4066f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406700:	mov    edx,0x1
  406705:	mov    ecx,0xb
  40670a:	call   0x407028
  40670f:	jmp    0x4065e3
  406714:	mov    edx,0x1
  406719:	mov    ecx,0x4
  40671e:	call   0x407028
  406723:	jmp    0x4065e3
  406728:	nop
  406729:	nop
  40672a:	nop
  40672b:	nop
  40672c:	nop
  40672d:	nop
  40672e:	nop
  40672f:	nop
  406730:	push   rbp
  406731:	push   rdi
  406732:	push   rsi
  406733:	push   rbx
  406734:	sub    rsp,0x28
  406738:	lea    rcx,[rip+0x8721]        # 0x40ee60
  40673f:	call   QWORD PTR [rip+0x8d03]        # 0x40f448
  406745:	mov    rbx,QWORD PTR [rip+0x86f4]        # 0x40ee40
  40674c:	test   rbx,rbx
  40674f:	je     0x406784
  406751:	mov    rbp,QWORD PTR [rip+0x8de0]        # 0x40f538
  406758:	mov    rdi,QWORD PTR [rip+0x8d21]        # 0x40f480
  40675f:	nop
  406760:	mov    ecx,DWORD PTR [rbx]
  406762:	call   rbp
  406764:	mov    rsi,rax
  406767:	call   rdi
  406769:	test   eax,eax
  40676b:	jne    0x40677b
  40676d:	test   rsi,rsi
  406770:	je     0x40677b
  406772:	mov    rax,QWORD PTR [rbx+0x8]
  406776:	mov    rcx,rsi
  406779:	call   rax
  40677b:	mov    rbx,QWORD PTR [rbx+0x10]
  40677f:	test   rbx,rbx
  406782:	jne    0x406760
  406784:	mov    rax,QWORD PTR [rip+0x8d25]        # 0x40f4b0
  40678b:	lea    rcx,[rip+0x86ce]        # 0x40ee60
  406792:	add    rsp,0x28
  406796:	pop    rbx
  406797:	pop    rsi
  406798:	pop    rdi
  406799:	pop    rbp
  40679a:	rex.W jmp rax
  40679d:	nop    DWORD PTR [rax]
  4067a0:	push   rdi
  4067a1:	push   rsi
  4067a2:	push   rbx
  4067a3:	sub    rsp,0x20
  4067a7:	mov    eax,DWORD PTR [rip+0x869b]        # 0x40ee48
  4067ad:	test   eax,eax
  4067af:	jne    0x4067c0
  4067b1:	add    rsp,0x20
  4067b5:	pop    rbx
  4067b6:	pop    rsi
  4067b7:	pop    rdi
  4067b8:	ret    
  4067b9:	nop    DWORD PTR [rax+0x0]
  4067c0:	mov    rsi,rdx
  4067c3:	mov    edi,ecx
  4067c5:	mov    edx,0x18
  4067ca:	mov    ecx,0x1
  4067cf:	call   0x4070b0
  4067d4:	test   rax,rax
  4067d7:	mov    rbx,rax
  4067da:	je     0x406818
  4067dc:	mov    DWORD PTR [rax],edi
  4067de:	mov    QWORD PTR [rax+0x8],rsi
  4067e2:	lea    rcx,[rip+0x8677]        # 0x40ee60
  4067e9:	call   QWORD PTR [rip+0x8c59]        # 0x40f448
  4067ef:	mov    rax,QWORD PTR [rip+0x864a]        # 0x40ee40
  4067f6:	lea    rcx,[rip+0x8663]        # 0x40ee60
  4067fd:	mov    QWORD PTR [rip+0x863c],rbx        # 0x40ee40
  406804:	mov    QWORD PTR [rbx+0x10],rax
  406808:	call   QWORD PTR [rip+0x8ca2]        # 0x40f4b0
  40680e:	xor    eax,eax
  406810:	add    rsp,0x20
  406814:	pop    rbx
  406815:	pop    rsi
  406816:	pop    rdi
  406817:	ret    
  406818:	mov    eax,0xffffffff
  40681d:	jmp    0x4067b1
  40681f:	nop
  406820:	push   rbx
  406821:	sub    rsp,0x20
  406825:	mov    eax,DWORD PTR [rip+0x861d]        # 0x40ee48
  40682b:	test   eax,eax
  40682d:	jne    0x406840
  40682f:	xor    eax,eax
  406831:	add    rsp,0x20
  406835:	pop    rbx
  406836:	ret    
  406837:	nop    WORD PTR [rax+rax*1+0x0]
  406840:	mov    ebx,ecx
  406842:	lea    rcx,[rip+0x8617]        # 0x40ee60
  406849:	call   QWORD PTR [rip+0x8bf9]        # 0x40f448
  40684f:	mov    rdx,QWORD PTR [rip+0x85ea]        # 0x40ee40
  406856:	test   rdx,rdx
  406859:	je     0x406877
  40685b:	mov    eax,DWORD PTR [rdx]
  40685d:	cmp    eax,ebx
  40685f:	jne    0x40686e
  406861:	jmp    0x4068af
  406863:	mov    r8d,DWORD PTR [rax]
  406866:	cmp    r8d,ebx
  406869:	je     0x406890
  40686b:	mov    rdx,rax
  40686e:	mov    rax,QWORD PTR [rdx+0x10]
  406872:	test   rax,rax
  406875:	jne    0x406863
  406877:	lea    rcx,[rip+0x85e2]        # 0x40ee60
  40687e:	call   QWORD PTR [rip+0x8c2c]        # 0x40f4b0
  406884:	xor    eax,eax
  406886:	add    rsp,0x20
  40688a:	pop    rbx
  40688b:	ret    
  40688c:	nop    DWORD PTR [rax+0x0]
  406890:	mov    rcx,rax
  406893:	mov    rax,QWORD PTR [rax+0x10]
  406897:	mov    QWORD PTR [rdx+0x10],rax
  40689b:	call   0x407090
  4068a0:	lea    rcx,[rip+0x85b9]        # 0x40ee60
  4068a7:	call   QWORD PTR [rip+0x8c03]        # 0x40f4b0
  4068ad:	jmp    0x406884
  4068af:	mov    rax,QWORD PTR [rdx+0x10]
  4068b3:	mov    rcx,rdx
  4068b6:	mov    QWORD PTR [rip+0x8583],rax        # 0x40ee40
  4068bd:	jmp    0x40689b
  4068bf:	nop
  4068c0:	push   rbx
  4068c1:	sub    rsp,0x20
  4068c5:	cmp    edx,0x1
  4068c8:	je     0x406960
  4068ce:	jb     0x406900
  4068d0:	cmp    edx,0x2
  4068d3:	je     0x4068f0
  4068d5:	cmp    edx,0x3
  4068d8:	jne    0x4068f5
  4068da:	mov    eax,DWORD PTR [rip+0x8568]        # 0x40ee48
  4068e0:	test   eax,eax
  4068e2:	je     0x4068f5
  4068e4:	call   0x406730
  4068e9:	jmp    0x4068f5
  4068eb:	nop    DWORD PTR [rax+rax*1+0x0]
  4068f0:	call   0x405dc0
  4068f5:	mov    eax,0x1
  4068fa:	add    rsp,0x20
  4068fe:	pop    rbx
  4068ff:	ret    
  406900:	mov    eax,DWORD PTR [rip+0x8542]        # 0x40ee48
  406906:	test   eax,eax
  406908:	jne    0x406990
  40690e:	mov    eax,DWORD PTR [rip+0x8534]        # 0x40ee48
  406914:	cmp    eax,0x1
  406917:	jne    0x4068f5
  406919:	mov    rcx,QWORD PTR [rip+0x8520]        # 0x40ee40
  406920:	test   rcx,rcx
  406923:	je     0x406936
  406925:	mov    rbx,QWORD PTR [rcx+0x10]
  406929:	call   0x407090
  40692e:	test   rbx,rbx
  406931:	mov    rcx,rbx
  406934:	jne    0x406925
  406936:	lea    rcx,[rip+0x8523]        # 0x40ee60
  40693d:	mov    QWORD PTR [rip+0x84f8],0x0        # 0x40ee40
  406948:	mov    DWORD PTR [rip+0x84f6],0x0        # 0x40ee48
  406952:	call   QWORD PTR [rip+0x8ad8]        # 0x40f430
  406958:	jmp    0x4068f5
  40695a:	nop    WORD PTR [rax+rax*1+0x0]
  406960:	mov    eax,DWORD PTR [rip+0x84e2]        # 0x40ee48
  406966:	test   eax,eax
  406968:	je     0x406980
  40696a:	mov    eax,0x1
  40696f:	mov    DWORD PTR [rip+0x84cf],0x1        # 0x40ee48
  406979:	add    rsp,0x20
  40697d:	pop    rbx
  40697e:	ret    
  40697f:	nop
  406980:	lea    rcx,[rip+0x84d9]        # 0x40ee60
  406987:	call   QWORD PTR [rip+0x8b1b]        # 0x40f4a8
  40698d:	jmp    0x40696a
  40698f:	nop
  406990:	call   0x406730
  406995:	jmp    0x40690e
  40699a:	nop
  40699b:	nop
  40699c:	nop
  40699d:	nop
  40699e:	nop
  40699f:	nop
  4069a0:	movsxd rax,DWORD PTR [rcx+0x3c]
  4069a4:	add    rcx,rax
  4069a7:	xor    eax,eax
  4069a9:	cmp    DWORD PTR [rcx],0x4550
  4069af:	je     0x4069b3
  4069b1:	repz ret 
  4069b3:	xor    eax,eax
  4069b5:	cmp    WORD PTR [rcx+0x18],0x20b
  4069bb:	sete   al
  4069be:	ret    
  4069bf:	nop
  4069c0:	cmp    WORD PTR [rcx],0x5a4d
  4069c5:	je     0x4069d0
  4069c7:	xor    eax,eax
  4069c9:	ret    
  4069ca:	nop    WORD PTR [rax+rax*1+0x0]
  4069d0:	jmp    0x4069a0
  4069d2:	nop    DWORD PTR [rax+0x0]
  4069d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4069e0:	movsxd rax,DWORD PTR [rcx+0x3c]
  4069e4:	add    rcx,rax
  4069e7:	movzx  eax,WORD PTR [rcx+0x14]
  4069eb:	lea    rax,[rcx+rax*1+0x18]
  4069f0:	movzx  ecx,WORD PTR [rcx+0x6]
  4069f4:	test   ecx,ecx
  4069f6:	je     0x406a21
  4069f8:	sub    ecx,0x1
  4069fb:	lea    rcx,[rcx+rcx*4]
  4069ff:	lea    r9,[rax+rcx*8+0x28]
  406a04:	mov    r8d,DWORD PTR [rax+0xc]
  406a08:	cmp    r8,rdx
  406a0b:	mov    rcx,r8
  406a0e:	ja     0x406a18
  406a10:	add    ecx,DWORD PTR [rax+0x8]
  406a13:	cmp    rdx,rcx
  406a16:	jb     0x406a23
  406a18:	add    rax,0x28
  406a1c:	cmp    rax,r9
  406a1f:	jne    0x406a04
  406a21:	xor    eax,eax
  406a23:	repz ret 
  406a25:	nop
  406a26:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406a30:	push   rdi
  406a31:	push   rsi
  406a32:	push   rbx
  406a33:	sub    rsp,0x20
  406a37:	mov    rsi,rcx
  406a3a:	call   0x406ff8
  406a3f:	cmp    rax,0x8
  406a43:	ja     0x406a60
  406a45:	mov    rbx,QWORD PTR [rip+0x4914]        # 0x40b360
  406a4c:	xor    edi,edi
  406a4e:	cmp    WORD PTR [rbx],0x5a4d
  406a53:	je     0x406a70
  406a55:	mov    rax,rdi
  406a58:	add    rsp,0x20
  406a5c:	pop    rbx
  406a5d:	pop    rsi
  406a5e:	pop    rdi
  406a5f:	ret    
  406a60:	xor    edi,edi
  406a62:	mov    rax,rdi
  406a65:	add    rsp,0x20
  406a69:	pop    rbx
  406a6a:	pop    rsi
  406a6b:	pop    rdi
  406a6c:	ret    
  406a6d:	nop    DWORD PTR [rax]
  406a70:	mov    rcx,rbx
  406a73:	call   0x4069a0
  406a78:	test   eax,eax
  406a7a:	je     0x406a55
  406a7c:	movsxd rdx,DWORD PTR [rbx+0x3c]
  406a80:	add    rdx,rbx
  406a83:	movzx  eax,WORD PTR [rdx+0x14]
  406a87:	lea    rbx,[rdx+rax*1+0x18]
  406a8c:	movzx  eax,WORD PTR [rdx+0x6]
  406a90:	test   eax,eax
  406a92:	je     0x406a55
  406a94:	sub    eax,0x1
  406a97:	lea    rax,[rax+rax*4]
  406a9b:	lea    rdi,[rbx+rax*8+0x28]
  406aa0:	jmp    0x406aab
  406aa2:	add    rbx,0x28
  406aa6:	cmp    rbx,rdi
  406aa9:	je     0x406a60
  406aab:	mov    r8d,0x8
  406ab1:	mov    rdx,rsi
  406ab4:	mov    rcx,rbx
  406ab7:	call   0x406ff0
  406abc:	test   eax,eax
  406abe:	jne    0x406aa2
  406ac0:	mov    rdi,rbx
  406ac3:	mov    rax,rdi
  406ac6:	add    rsp,0x20
  406aca:	pop    rbx
  406acb:	pop    rsi
  406acc:	pop    rdi
  406acd:	ret    
  406ace:	xchg   ax,ax
  406ad0:	push   rsi
  406ad1:	push   rbx
  406ad2:	sub    rsp,0x28
  406ad6:	mov    rbx,QWORD PTR [rip+0x4883]        # 0x40b360
  406add:	cmp    WORD PTR [rbx],0x5a4d
  406ae2:	je     0x406af0
  406ae4:	xor    eax,eax
  406ae6:	add    rsp,0x28
  406aea:	pop    rbx
  406aeb:	pop    rsi
  406aec:	ret    
  406aed:	nop    DWORD PTR [rax]
  406af0:	mov    rsi,rcx
  406af3:	mov    rcx,rbx
  406af6:	call   0x4069a0
  406afb:	test   eax,eax
  406afd:	je     0x406ae4
  406aff:	sub    rsi,rbx
  406b02:	mov    rcx,rbx
  406b05:	mov    rdx,rsi
  406b08:	add    rsp,0x28
  406b0c:	pop    rbx
  406b0d:	pop    rsi
  406b0e:	jmp    0x4069e0
  406b13:	nop    DWORD PTR [rax]
  406b16:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406b20:	push   rbx
  406b21:	sub    rsp,0x20
  406b25:	mov    rbx,QWORD PTR [rip+0x4834]        # 0x40b360
  406b2c:	xor    eax,eax
  406b2e:	cmp    WORD PTR [rbx],0x5a4d
  406b33:	je     0x406b40
  406b35:	add    rsp,0x20
  406b39:	pop    rbx
  406b3a:	ret    
  406b3b:	nop    DWORD PTR [rax+rax*1+0x0]
  406b40:	mov    rcx,rbx
  406b43:	call   0x4069a0
  406b48:	test   eax,eax
  406b4a:	je     0x406b35
  406b4c:	movsxd rax,DWORD PTR [rbx+0x3c]
  406b50:	movzx  eax,WORD PTR [rax+rbx*1+0x6]
  406b55:	add    rsp,0x20
  406b59:	pop    rbx
  406b5a:	ret    
  406b5b:	nop    DWORD PTR [rax+rax*1+0x0]
  406b60:	push   rdi
  406b61:	push   rsi
  406b62:	push   rbx
  406b63:	sub    rsp,0x20
  406b67:	mov    rsi,QWORD PTR [rip+0x47f2]        # 0x40b360
  406b6e:	xor    edi,edi
  406b70:	mov    rbx,rcx
  406b73:	cmp    WORD PTR [rsi],0x5a4d
  406b78:	je     0x406b85
  406b7a:	mov    rax,rdi
  406b7d:	add    rsp,0x20
  406b81:	pop    rbx
  406b82:	pop    rsi
  406b83:	pop    rdi
  406b84:	ret    
  406b85:	mov    rcx,rsi
  406b88:	call   0x4069a0
  406b8d:	test   eax,eax
  406b8f:	je     0x406b7a
  406b91:	movsxd rax,DWORD PTR [rsi+0x3c]
  406b95:	add    rsi,rax
  406b98:	movzx  eax,WORD PTR [rsi+0x14]
  406b9c:	lea    rdx,[rsi+rax*1+0x18]
  406ba1:	movzx  eax,WORD PTR [rsi+0x6]
  406ba5:	test   eax,eax
  406ba7:	je     0x406b7a
  406ba9:	sub    eax,0x1
  406bac:	lea    rax,[rax+rax*4]
  406bb0:	lea    rax,[rdx+rax*8+0x28]
  406bb5:	test   BYTE PTR [rdx+0x27],0x20
  406bb9:	je     0x406bc4
  406bbb:	test   rbx,rbx
  406bbe:	je     0x406be0
  406bc0:	sub    rbx,0x1
  406bc4:	add    rdx,0x28
  406bc8:	cmp    rdx,rax
  406bcb:	jne    0x406bb5
  406bcd:	xor    edi,edi
  406bcf:	mov    rax,rdi
  406bd2:	add    rsp,0x20
  406bd6:	pop    rbx
  406bd7:	pop    rsi
  406bd8:	pop    rdi
  406bd9:	ret    
  406bda:	nop    WORD PTR [rax+rax*1+0x0]
  406be0:	mov    rdi,rdx
  406be3:	mov    rax,rdi
  406be6:	add    rsp,0x20
  406bea:	pop    rbx
  406beb:	pop    rsi
  406bec:	pop    rdi
  406bed:	ret    
  406bee:	xchg   ax,ax
  406bf0:	push   rsi
  406bf1:	push   rbx
  406bf2:	sub    rsp,0x28
  406bf6:	mov    rsi,QWORD PTR [rip+0x4763]        # 0x40b360
  406bfd:	xor    ebx,ebx
  406bff:	cmp    WORD PTR [rsi],0x5a4d
  406c04:	je     0x406c10
  406c06:	mov    rax,rbx
  406c09:	add    rsp,0x28
  406c0d:	pop    rbx
  406c0e:	pop    rsi
  406c0f:	ret    
  406c10:	mov    rcx,rsi
  406c13:	call   0x4069a0
  406c18:	test   eax,eax
  406c1a:	cmovne rbx,rsi
  406c1e:	mov    rax,rbx
  406c21:	add    rsp,0x28
  406c25:	pop    rbx
  406c26:	pop    rsi
  406c27:	ret    
  406c28:	nop    DWORD PTR [rax+rax*1+0x0]
  406c30:	push   rsi
  406c31:	push   rbx
  406c32:	sub    rsp,0x28
  406c36:	mov    rbx,QWORD PTR [rip+0x4723]        # 0x40b360
  406c3d:	xor    eax,eax
  406c3f:	cmp    WORD PTR [rbx],0x5a4d
  406c44:	je     0x406c50
  406c46:	add    rsp,0x28
  406c4a:	pop    rbx
  406c4b:	pop    rsi
  406c4c:	ret    
  406c4d:	nop    DWORD PTR [rax]
  406c50:	mov    rsi,rcx
  406c53:	mov    rcx,rbx
  406c56:	call   0x4069a0
  406c5b:	test   eax,eax
  406c5d:	je     0x406c46
  406c5f:	sub    rsi,rbx
  406c62:	mov    rcx,rbx
  406c65:	mov    rdx,rsi
  406c68:	call   0x4069e0
  406c6d:	test   rax,rax
  406c70:	je     0x406c81
  406c72:	mov    eax,DWORD PTR [rax+0x24]
  406c75:	not    eax
  406c77:	shr    eax,0x1f
  406c7a:	add    rsp,0x28
  406c7e:	pop    rbx
  406c7f:	pop    rsi
  406c80:	ret    
  406c81:	xor    eax,eax
  406c83:	jmp    0x406c46
  406c85:	nop
  406c86:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406c90:	push   rbp
  406c91:	push   rdi
  406c92:	push   rsi
  406c93:	push   rbx
  406c94:	sub    rsp,0x28
  406c98:	mov    rdi,QWORD PTR [rip+0x46c1]        # 0x40b360
  406c9f:	xor    ebp,ebp
  406ca1:	mov    esi,ecx
  406ca3:	cmp    WORD PTR [rdi],0x5a4d
  406ca8:	je     0x406cc0
  406caa:	mov    rax,rbp
  406cad:	add    rsp,0x28
  406cb1:	pop    rbx
  406cb2:	pop    rsi
  406cb3:	pop    rdi
  406cb4:	pop    rbp
  406cb5:	ret    
  406cb6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406cc0:	mov    rcx,rdi
  406cc3:	call   0x4069a0
  406cc8:	test   eax,eax
  406cca:	je     0x406caa
  406ccc:	movsxd rax,DWORD PTR [rdi+0x3c]
  406cd0:	mov    edx,DWORD PTR [rdi+rax*1+0x90]
  406cd7:	test   edx,edx
  406cd9:	je     0x406caa
  406cdb:	mov    ebx,edx
  406cdd:	mov    rcx,rdi
  406ce0:	mov    rdx,rbx
  406ce3:	call   0x4069e0
  406ce8:	test   rax,rax
  406ceb:	je     0x406caa
  406ced:	add    rbx,rdi
  406cf0:	mov    rdx,rbx
  406cf3:	jne    0x406d07
  406cf5:	jmp    0x406caa
  406cf7:	nop    WORD PTR [rax+rax*1+0x0]
  406d00:	sub    esi,0x1
  406d03:	add    rdx,0x14
  406d07:	mov    ecx,DWORD PTR [rdx+0x4]
  406d0a:	test   ecx,ecx
  406d0c:	jne    0x406d15
  406d0e:	mov    eax,DWORD PTR [rdx+0xc]
  406d11:	test   eax,eax
  406d13:	je     0x406d30
  406d15:	test   esi,esi
  406d17:	jg     0x406d00
  406d19:	mov    ebp,DWORD PTR [rdx+0xc]
  406d1c:	add    rbp,rdi
  406d1f:	mov    rax,rbp
  406d22:	add    rsp,0x28
  406d26:	pop    rbx
  406d27:	pop    rsi
  406d28:	pop    rdi
  406d29:	pop    rbp
  406d2a:	ret    
  406d2b:	nop    DWORD PTR [rax+rax*1+0x0]
  406d30:	xor    ebp,ebp
  406d32:	mov    rax,rbp
  406d35:	add    rsp,0x28
  406d39:	pop    rbx
  406d3a:	pop    rsi
  406d3b:	pop    rdi
  406d3c:	pop    rbp
  406d3d:	ret    
  406d3e:	nop
  406d3f:	nop
  406d40:	push   rcx
  406d41:	push   rax
  406d42:	cmp    rax,0x1000
  406d48:	lea    rcx,[rsp+0x18]
  406d4d:	jb     0x406d68
  406d4f:	sub    rcx,0x1000
  406d56:	or     QWORD PTR [rcx],0x0
  406d5a:	sub    rax,0x1000
  406d60:	cmp    rax,0x1000
  406d66:	ja     0x406d4f
  406d68:	sub    rcx,rax
  406d6b:	or     QWORD PTR [rcx],0x0
  406d6f:	pop    rax
  406d70:	pop    rcx
  406d71:	ret    
  406d72:	nop
  406d73:	nop
  406d74:	nop
  406d75:	nop
  406d76:	nop
  406d77:	nop
  406d78:	nop
  406d79:	nop
  406d7a:	nop
  406d7b:	nop
  406d7c:	nop
  406d7d:	nop
  406d7e:	nop
  406d7f:	nop
  406d80:	push   r12
  406d82:	push   rbp
  406d83:	push   rdi
  406d84:	push   rsi
  406d85:	push   rbx
  406d86:	sub    rsp,0x60
  406d8a:	test   rcx,rcx
  406d8d:	mov    rsi,rcx
  406d90:	mov    rbx,rdx
  406d93:	je     0x406de2
  406d95:	movzx  ebp,BYTE PTR [rcx]
  406d98:	test   bpl,bpl
  406d9b:	je     0x406de2
  406d9d:	call   0x406ff8
  406da2:	cmp    eax,0x1
  406da5:	mov    rdi,rax
  406da8:	jle    0x406de2
  406daa:	lea    eax,[rax-0x2]
  406dad:	cmp    eax,0x1
  406db0:	jbe    0x406f40
  406db6:	cmp    bpl,0x2f
  406dba:	je     0x406e64
  406dc0:	cmp    bpl,0x5c
  406dc4:	je     0x406e64
  406dca:	movsxd rbp,edi
  406dcd:	movzx  eax,BYTE PTR [rsi+rbp*1-0x1]
  406dd2:	cmp    al,0x5c
  406dd4:	je     0x406ef0
  406dda:	cmp    al,0x2f
  406ddc:	je     0x406ef0
  406de2:	lea    rdx,[rsp+0x20]
  406de7:	mov    rcx,rsi
  406dea:	call   0x406fb8
  406def:	mov    ebp,eax
  406df1:	cmp    ebp,0xffffffff
  406df4:	je     0x406f70
  406dfa:	mov    eax,DWORD PTR [rsp+0x20]
  406dfe:	mov    DWORD PTR [rbx],eax
  406e00:	movzx  eax,WORD PTR [rsp+0x24]
  406e05:	mov    WORD PTR [rbx+0x4],ax
  406e09:	movzx  eax,WORD PTR [rsp+0x26]
  406e0e:	mov    WORD PTR [rbx+0x6],ax
  406e12:	movzx  eax,WORD PTR [rsp+0x28]
  406e17:	mov    WORD PTR [rbx+0x8],ax
  406e1b:	movzx  eax,WORD PTR [rsp+0x2a]
  406e20:	mov    WORD PTR [rbx+0xa],ax
  406e24:	movzx  eax,WORD PTR [rsp+0x2c]
  406e29:	mov    WORD PTR [rbx+0xc],ax
  406e2d:	mov    eax,DWORD PTR [rsp+0x30]
  406e31:	mov    DWORD PTR [rbx+0x10],eax
  406e34:	mov    rax,QWORD PTR [rsp+0x38]
  406e39:	mov    DWORD PTR [rbx+0x14],eax
  406e3c:	mov    rax,QWORD PTR [rsp+0x40]
  406e41:	mov    QWORD PTR [rbx+0x18],rax
  406e45:	mov    rax,QWORD PTR [rsp+0x48]
  406e4a:	mov    QWORD PTR [rbx+0x20],rax
  406e4e:	mov    rax,QWORD PTR [rsp+0x50]
  406e53:	mov    QWORD PTR [rbx+0x28],rax
  406e57:	mov    eax,ebp
  406e59:	add    rsp,0x60
  406e5d:	pop    rbx
  406e5e:	pop    rsi
  406e5f:	pop    rdi
  406e60:	pop    rbp
  406e61:	pop    r12
  406e63:	ret    
  406e64:	movzx  eax,BYTE PTR [rsi+0x1]
  406e68:	cmp    al,0x2f
  406e6a:	je     0x406e74
  406e6c:	cmp    al,0x5c
  406e6e:	jne    0x406dca
  406e74:	movzx  ecx,BYTE PTR [rsi+0x2]
  406e78:	lea    rdx,[rsi+0x2]
  406e7c:	cmp    cl,0x5c
  406e7f:	jne    0x406ea0
  406e81:	jmp    0x406f50
  406e86:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406e90:	add    rdx,0x1
  406e94:	movzx  ecx,BYTE PTR [rdx]
  406e97:	cmp    cl,0x5c
  406e9a:	je     0x406f50
  406ea0:	test   cl,cl
  406ea2:	je     0x406f50
  406ea8:	cmp    cl,0x2f
  406eab:	jne    0x406e90
  406ead:	add    rdx,0x1
  406eb1:	movzx  eax,BYTE PTR [rdx]
  406eb4:	test   al,al
  406eb6:	je     0x406de2
  406ebc:	cmp    al,0x5c
  406ebe:	je     0x406ee1
  406ec0:	cmp    al,0x2f
  406ec2:	je     0x406ee1
  406ec4:	add    rdx,0x1
  406ec8:	movzx  ecx,BYTE PTR [rdx]
  406ecb:	cmp    cl,0x5c
  406ece:	je     0x406f60
  406ed4:	test   cl,cl
  406ed6:	je     0x406f60
  406edc:	cmp    cl,0x2f
  406edf:	jne    0x406ec4
  406ee1:	cmp    BYTE PTR [rdx+0x1],0x0
  406ee5:	jne    0x406dca
  406eeb:	jmp    0x406de2
  406ef0:	mov    rcx,rbp
  406ef3:	call   0x407060
  406ef8:	lea    r8d,[rdi-0x1]
  406efc:	mov    rdx,rsi
  406eff:	mov    rcx,rax
  406f02:	mov    r12,rax
  406f05:	movsxd r8,r8d
  406f08:	call   0x407050
  406f0d:	lea    rdx,[rsp+0x20]
  406f12:	mov    rcx,r12
  406f15:	mov    BYTE PTR [r12+rbp*1-0x1],0x0
  406f1b:	call   0x406fb8
  406f20:	cmp    rsi,r12
  406f23:	mov    ebp,eax
  406f25:	je     0x406df1
  406f2b:	mov    rcx,r12
  406f2e:	call   0x407090
  406f33:	jmp    0x406df1
  406f38:	nop    DWORD PTR [rax+rax*1+0x0]
  406f40:	cmp    BYTE PTR [rsi+0x1],0x3a
  406f44:	jne    0x406db6
  406f4a:	jmp    0x406de2
  406f4f:	nop
  406f50:	test   cl,cl
  406f52:	je     0x406eb1
  406f58:	jmp    0x406ead
  406f5d:	nop    DWORD PTR [rax]
  406f60:	test   cl,cl
  406f62:	je     0x406de2
  406f68:	jmp    0x406ee1
  406f6d:	nop    DWORD PTR [rax]
  406f70:	lea    rdi,[rbx+0x8]
  406f74:	mov    QWORD PTR [rbx],0x0
  406f7b:	mov    QWORD PTR [rbx+0x28],0x0
  406f83:	xor    eax,eax
  406f85:	and    rdi,0xfffffffffffffff8
  406f89:	sub    rbx,rdi
  406f8c:	lea    ecx,[rbx+0x30]
  406f8f:	shr    ecx,0x3
  406f92:	rep stos QWORD PTR es:[rdi],rax
  406f95:	jmp    0x406e57
  406f9a:	nop
  406f9b:	nop
  406f9c:	nop
  406f9d:	nop
  406f9e:	nop
  406f9f:	nop
  406fa0:	jmp    QWORD PTR [rip+0x877a]        # 0x40f720
  406fa6:	nop
  406fa7:	nop
  406fa8:	jmp    QWORD PTR [rip+0x876a]        # 0x40f718
  406fae:	nop
  406faf:	nop
  406fb0:	jmp    QWORD PTR [rip+0x875a]        # 0x40f710
  406fb6:	nop
  406fb7:	nop
  406fb8:	jmp    QWORD PTR [rip+0x874a]        # 0x40f708
  406fbe:	nop
  406fbf:	nop
  406fc0:	jmp    QWORD PTR [rip+0x873a]        # 0x40f700
  406fc6:	nop
  406fc7:	nop
  406fc8:	jmp    QWORD PTR [rip+0x872a]        # 0x40f6f8
  406fce:	nop
  406fcf:	nop
  406fd0:	jmp    QWORD PTR [rip+0x871a]        # 0x40f6f0
  406fd6:	nop
  406fd7:	nop
  406fd8:	jmp    QWORD PTR [rip+0x870a]        # 0x40f6e8
  406fde:	nop
  406fdf:	nop
  406fe0:	jmp    QWORD PTR [rip+0x86fa]        # 0x40f6e0
  406fe6:	nop
  406fe7:	nop
  406fe8:	jmp    QWORD PTR [rip+0x86ea]        # 0x40f6d8
  406fee:	nop
  406fef:	nop
  406ff0:	jmp    QWORD PTR [rip+0x86da]        # 0x40f6d0
  406ff6:	nop
  406ff7:	nop
  406ff8:	jmp    QWORD PTR [rip+0x86ca]        # 0x40f6c8
  406ffe:	nop
  406fff:	nop
  407000:	jmp    QWORD PTR [rip+0x86ba]        # 0x40f6c0
  407006:	nop
  407007:	nop
  407008:	jmp    QWORD PTR [rip+0x86aa]        # 0x40f6b8
  40700e:	nop
  40700f:	nop
  407010:	jmp    QWORD PTR [rip+0x869a]        # 0x40f6b0
  407016:	nop
  407017:	nop
  407018:	jmp    QWORD PTR [rip+0x868a]        # 0x40f6a8
  40701e:	nop
  40701f:	nop
  407020:	jmp    QWORD PTR [rip+0x867a]        # 0x40f6a0
  407026:	nop
  407027:	nop
  407028:	jmp    QWORD PTR [rip+0x866a]        # 0x40f698
  40702e:	nop
  40702f:	nop
  407030:	jmp    QWORD PTR [rip+0x865a]        # 0x40f690
  407036:	nop
  407037:	nop
  407038:	jmp    QWORD PTR [rip+0x864a]        # 0x40f688
  40703e:	nop
  40703f:	nop
  407040:	jmp    QWORD PTR [rip+0x863a]        # 0x40f680
  407046:	nop
  407047:	nop
  407048:	jmp    QWORD PTR [rip+0x862a]        # 0x40f678
  40704e:	nop
  40704f:	nop
  407050:	jmp    QWORD PTR [rip+0x861a]        # 0x40f670
  407056:	nop
  407057:	nop
  407058:	jmp    QWORD PTR [rip+0x860a]        # 0x40f668
  40705e:	nop
  40705f:	nop
  407060:	jmp    QWORD PTR [rip+0x85fa]        # 0x40f660
  407066:	nop
  407067:	nop
  407068:	jmp    QWORD PTR [rip+0x85ea]        # 0x40f658
  40706e:	nop
  40706f:	nop
  407070:	jmp    QWORD PTR [rip+0x85da]        # 0x40f650
  407076:	nop
  407077:	nop
  407078:	jmp    QWORD PTR [rip+0x85ca]        # 0x40f648
  40707e:	nop
  40707f:	nop
  407080:	jmp    QWORD PTR [rip+0x85ba]        # 0x40f640
  407086:	nop
  407087:	nop
  407088:	jmp    QWORD PTR [rip+0x85aa]        # 0x40f638
  40708e:	nop
  40708f:	nop
  407090:	jmp    QWORD PTR [rip+0x859a]        # 0x40f630
  407096:	nop
  407097:	nop
  407098:	jmp    QWORD PTR [rip+0x858a]        # 0x40f628
  40709e:	nop
  40709f:	nop
  4070a0:	jmp    QWORD PTR [rip+0x857a]        # 0x40f620
  4070a6:	nop
  4070a7:	nop
  4070a8:	jmp    QWORD PTR [rip+0x856a]        # 0x40f618
  4070ae:	nop
  4070af:	nop
  4070b0:	jmp    QWORD PTR [rip+0x855a]        # 0x40f610
  4070b6:	nop
  4070b7:	nop
  4070b8:	jmp    QWORD PTR [rip+0x854a]        # 0x40f608
  4070be:	nop
  4070bf:	nop
  4070c0:	jmp    QWORD PTR [rip+0x853a]        # 0x40f600
  4070c6:	nop
  4070c7:	nop
  4070c8:	jmp    QWORD PTR [rip+0x852a]        # 0x40f5f8
  4070ce:	nop
  4070cf:	nop
  4070d0:	jmp    QWORD PTR [rip+0x851a]        # 0x40f5f0
  4070d6:	nop
  4070d7:	nop
  4070d8:	jmp    QWORD PTR [rip+0x850a]        # 0x40f5e8
  4070de:	nop
  4070df:	nop
  4070e0:	jmp    QWORD PTR [rip+0x84fa]        # 0x40f5e0
  4070e6:	nop
  4070e7:	nop
  4070e8:	jmp    QWORD PTR [rip+0x84ea]        # 0x40f5d8
  4070ee:	nop
  4070ef:	nop
  4070f0:	jmp    QWORD PTR [rip+0x84d2]        # 0x40f5c8
  4070f6:	nop
  4070f7:	nop
  4070f8:	jmp    QWORD PTR [rip+0x84c2]        # 0x40f5c0
  4070fe:	nop
  4070ff:	nop
  407100:	jmp    QWORD PTR [rip+0x84b2]        # 0x40f5b8
  407106:	nop
  407107:	nop
  407108:	jmp    QWORD PTR [rip+0x849a]        # 0x40f5a8
  40710e:	nop
  40710f:	nop
  407110:	jmp    QWORD PTR [rip+0x848a]        # 0x40f5a0
  407116:	nop
  407117:	nop
  407118:	jmp    QWORD PTR [rip+0x847a]        # 0x40f598
  40711e:	nop
  40711f:	nop
  407120:	jmp    QWORD PTR [rip+0x846a]        # 0x40f590
  407126:	nop
  407127:	nop
  407128:	jmp    QWORD PTR [rip+0x8452]        # 0x40f580
  40712e:	nop
  40712f:	nop
  407130:	jmp    QWORD PTR [rip+0x8442]        # 0x40f578
  407136:	nop
  407137:	nop
  407138:	jmp    QWORD PTR [rip+0x8432]        # 0x40f570
  40713e:	nop
  40713f:	nop
  407140:	mov    rax,QWORD PTR [rip+0x7d69]        # 0x40eeb0
  407147:	ret    
  407148:	nop    DWORD PTR [rax+rax*1+0x0]
  407150:	mov    rax,rcx
  407153:	xchg   QWORD PTR [rip+0x7d56],rax        # 0x40eeb0
  40715a:	ret    
  40715b:	nop
  40715c:	nop
  40715d:	nop
  40715e:	nop
  40715f:	nop
  407160:	jmp    QWORD PTR [rip+0x8292]        # 0x40f3f8
  407166:	nop
  407167:	nop
  407168:	jmp    QWORD PTR [rip+0x8282]        # 0x40f3f0
  40716e:	nop
  40716f:	nop
  407170:	jmp    QWORD PTR [rip+0x8272]        # 0x40f3e8
  407176:	nop
  407177:	nop
  407178:	jmp    QWORD PTR [rip+0x8262]        # 0x40f3e0
  40717e:	nop
  40717f:	nop
  407180:	jmp    QWORD PTR [rip+0x8252]        # 0x40f3d8
  407186:	nop
  407187:	nop
  407188:	jmp    QWORD PTR [rip+0x8242]        # 0x40f3d0
  40718e:	nop
  40718f:	nop
  407190:	jmp    QWORD PTR [rip+0x8232]        # 0x40f3c8
  407196:	nop
  407197:	nop
  407198:	jmp    QWORD PTR [rip+0x8222]        # 0x40f3c0
  40719e:	nop
  40719f:	nop
  4071a0:	jmp    QWORD PTR [rip+0x83ba]        # 0x40f560
  4071a6:	nop
  4071a7:	nop
  4071a8:	jmp    QWORD PTR [rip+0x83aa]        # 0x40f558
  4071ae:	nop
  4071af:	nop
  4071b0:	jmp    QWORD PTR [rip+0x839a]        # 0x40f550
  4071b6:	nop
  4071b7:	nop
  4071b8:	jmp    QWORD PTR [rip+0x838a]        # 0x40f548
  4071be:	nop
  4071bf:	nop
  4071c0:	jmp    QWORD PTR [rip+0x837a]        # 0x40f540
  4071c6:	nop
  4071c7:	nop
  4071c8:	jmp    QWORD PTR [rip+0x836a]        # 0x40f538
  4071ce:	nop
  4071cf:	nop
  4071d0:	jmp    QWORD PTR [rip+0x835a]        # 0x40f530
  4071d6:	nop
  4071d7:	nop
  4071d8:	jmp    QWORD PTR [rip+0x834a]        # 0x40f528
  4071de:	nop
  4071df:	nop
  4071e0:	jmp    QWORD PTR [rip+0x833a]        # 0x40f520
  4071e6:	nop
  4071e7:	nop
  4071e8:	jmp    QWORD PTR [rip+0x832a]        # 0x40f518
  4071ee:	nop
  4071ef:	nop
  4071f0:	jmp    QWORD PTR [rip+0x831a]        # 0x40f510
  4071f6:	nop
  4071f7:	nop
  4071f8:	jmp    QWORD PTR [rip+0x830a]        # 0x40f508
  4071fe:	nop
  4071ff:	nop
  407200:	jmp    QWORD PTR [rip+0x82fa]        # 0x40f500
  407206:	nop
  407207:	nop
  407208:	jmp    QWORD PTR [rip+0x82ea]        # 0x40f4f8
  40720e:	nop
  40720f:	nop
  407210:	jmp    QWORD PTR [rip+0x82da]        # 0x40f4f0
  407216:	nop
  407217:	nop
  407218:	jmp    QWORD PTR [rip+0x82ca]        # 0x40f4e8
  40721e:	nop
  40721f:	nop
  407220:	jmp    QWORD PTR [rip+0x82ba]        # 0x40f4e0
  407226:	nop
  407227:	nop
  407228:	jmp    QWORD PTR [rip+0x82aa]        # 0x40f4d8
  40722e:	nop
  40722f:	nop
  407230:	jmp    QWORD PTR [rip+0x829a]        # 0x40f4d0
  407236:	nop
  407237:	nop
  407238:	jmp    QWORD PTR [rip+0x828a]        # 0x40f4c8
  40723e:	nop
  40723f:	nop
  407240:	jmp    QWORD PTR [rip+0x827a]        # 0x40f4c0
  407246:	nop
  407247:	nop
  407248:	jmp    QWORD PTR [rip+0x826a]        # 0x40f4b8
  40724e:	nop
  40724f:	nop
  407250:	jmp    QWORD PTR [rip+0x825a]        # 0x40f4b0
  407256:	nop
  407257:	nop
  407258:	jmp    QWORD PTR [rip+0x824a]        # 0x40f4a8
  40725e:	nop
  40725f:	nop
  407260:	jmp    QWORD PTR [rip+0x823a]        # 0x40f4a0
  407266:	nop
  407267:	nop
  407268:	jmp    QWORD PTR [rip+0x822a]        # 0x40f498
  40726e:	nop
  40726f:	nop
  407270:	jmp    QWORD PTR [rip+0x821a]        # 0x40f490
  407276:	nop
  407277:	nop
  407278:	jmp    QWORD PTR [rip+0x820a]        # 0x40f488
  40727e:	nop
  40727f:	nop
  407280:	jmp    QWORD PTR [rip+0x81fa]        # 0x40f480
  407286:	nop
  407287:	nop
  407288:	jmp    QWORD PTR [rip+0x81ea]        # 0x40f478
  40728e:	nop
  40728f:	nop
  407290:	jmp    QWORD PTR [rip+0x81da]        # 0x40f470
  407296:	nop
  407297:	nop
  407298:	jmp    QWORD PTR [rip+0x81ca]        # 0x40f468
  40729e:	nop
  40729f:	nop
  4072a0:	jmp    QWORD PTR [rip+0x81ba]        # 0x40f460
  4072a6:	nop
  4072a7:	nop
  4072a8:	jmp    QWORD PTR [rip+0x81aa]        # 0x40f458
  4072ae:	nop
  4072af:	nop
  4072b0:	jmp    QWORD PTR [rip+0x819a]        # 0x40f450
  4072b6:	nop
  4072b7:	nop
  4072b8:	jmp    QWORD PTR [rip+0x818a]        # 0x40f448
  4072be:	nop
  4072bf:	nop
  4072c0:	jmp    QWORD PTR [rip+0x817a]        # 0x40f440
  4072c6:	nop
  4072c7:	nop
  4072c8:	jmp    QWORD PTR [rip+0x816a]        # 0x40f438
  4072ce:	nop
  4072cf:	nop
  4072d0:	jmp    QWORD PTR [rip+0x815a]        # 0x40f430
  4072d6:	nop
  4072d7:	nop
  4072d8:	jmp    QWORD PTR [rip+0x814a]        # 0x40f428
  4072de:	nop
  4072df:	nop
  4072e0:	jmp    QWORD PTR [rip+0x813a]        # 0x40f420
  4072e6:	nop
  4072e7:	nop
  4072e8:	jmp    QWORD PTR [rip+0x812a]        # 0x40f418
  4072ee:	nop
  4072ef:	nop
  4072f0:	jmp    QWORD PTR [rip+0x811a]        # 0x40f410
  4072f6:	nop
  4072f7:	nop
  4072f8:	jmp    QWORD PTR [rip+0x810a]        # 0x40f408
  4072fe:	nop
  4072ff:	nop
  407300:	push   r13
  407302:	push   r12
  407304:	push   rbp
  407305:	push   rdi
  407306:	push   rsi
  407307:	push   rbx
  407308:	sub    rsp,0x28
  40730c:	mov    r13,rdx
  40730f:	mov    ebx,ecx
  407311:	call   0x405990
  407316:	mov    rcx,QWORD PTR [r13+0x0]
  40731a:	lea    rdx,[rip+0x22d5]        # 0x4095f6
  407321:	call   0x4024c0
  407326:	mov    rcx,QWORD PTR [r13+0x0]
  40732a:	call   0x404ff0
  40732f:	cmp    ebx,0x1
  407332:	mov    QWORD PTR [rip+0x7107],rax        # 0x40e440
  407339:	jle    0x40745d
  40733f:	lea    edx,[rbx-0x2]
  407342:	lea    rbp,[r13+0x8]
  407346:	mov    ebx,0x7
  40734b:	mov    r11d,0x3
  407351:	lea    r12,[r13+rdx*8+0x10]
  407356:	lea    rdx,[rip+0x22a7]        # 0x409604
  40735d:	mov    r8,rbp
  407360:	mov    r9,QWORD PTR [r8]
  407363:	mov    rdi,rdx
  407366:	mov    rcx,rbx
  407369:	mov    rsi,r9
  40736c:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
  40736e:	je     0x407495
  407374:	lea    rdi,[rip+0x2290]        # 0x40960b
  40737b:	mov    rsi,r9
  40737e:	mov    rcx,r11
  407381:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
  407383:	je     0x407495
  407389:	add    r8,0x8
  40738d:	cmp    r8,r12
  407390:	jne    0x407360
  407392:	mov    rcx,QWORD PTR [r13+0x0]
  407396:	lea    rdx,[rip+0x6ca3]        # 0x40e040
  40739d:	call   0x401ca0
  4073a2:	test   eax,eax
  4073a4:	jne    0x40760e
  4073aa:	lea    rdi,[rip+0x2bcf]        # 0x409f80
  4073b1:	mov    r13,QWORD PTR [rbp+0x0]
  4073b5:	lea    rbx,[rip+0x2bd4]        # 0x409f90
  4073bc:	lea    rdx,[rip+0x222a]        # 0x4095ed
  4073c3:	xor    esi,esi
  4073c5:	jmp    0x4073e0
  4073c7:	nop    WORD PTR [rax+rax*1+0x0]
  4073d0:	add    rbx,0x10
  4073d4:	mov    rdx,QWORD PTR [rbx-0x10]
  4073d8:	add    esi,0x1
  4073db:	test   rdx,rdx
  4073de:	je     0x407411
  4073e0:	mov    rcx,r13
  4073e3:	call   0x407010
  4073e8:	test   eax,eax
  4073ea:	jne    0x4073d0
  4073ec:	movsxd rsi,esi
  4073ef:	add    rbp,0x8
  4073f3:	xor    ecx,ecx
  4073f5:	shl    rsi,0x4
  4073f9:	call   QWORD PTR [rdi+rsi*1+0x8]
  4073fd:	cmp    rbp,r12
  407400:	jne    0x4073b1
  407402:	xor    eax,eax
  407404:	add    rsp,0x28
  407408:	pop    rbx
  407409:	pop    rsi
  40740a:	pop    rdi
  40740b:	pop    rbp
  40740c:	pop    r12
  40740e:	pop    r13
  407410:	ret    
  407411:	mov    rsi,QWORD PTR [rip+0x7028]        # 0x40e440
  407418:	mov    rbx,QWORD PTR [rip+0x8171]        # 0x40f590
  40741f:	call   rbx
  407421:	lea    rdx,[rip+0x29eb]        # 0x409e13
  407428:	lea    rcx,[rax+0x60]
  40742c:	mov    r9,r13
  40742f:	mov    r8,rsi
  407432:	call   0x4040e0
  407437:	mov    rsi,QWORD PTR [rip+0x7002]        # 0x40e440
  40743e:	call   rbx
  407440:	lea    rdx,[rip+0x29e9]        # 0x409e30
  407447:	lea    rcx,[rax+0x60]
  40744b:	mov    r8,rsi
  40744e:	call   0x4040e0
  407453:	mov    ecx,0x1
  407458:	call   0x4070a8
  40745d:	mov    rcx,QWORD PTR [r13+0x0]
  407461:	lea    rdx,[rip+0x6bd8]        # 0x40e040
  407468:	call   0x401ca0
  40746d:	test   eax,eax
  40746f:	jne    0x40760e
  407475:	lea    rbx,[rip+0x2b04]        # 0x409f80
  40747c:	add    rbx,0x10
  407480:	cmp    QWORD PTR [rbx-0x10],0x0
  407485:	je     0x407638
  40748b:	mov    ecx,0x1
  407490:	call   QWORD PTR [rbx-0x8]
  407493:	jmp    0x40747c
  407495:	lea    rcx,[rip+0x2174]        # 0x409610
  40749c:	mov    rdx,rax
  40749f:	call   0x404110
  4074a4:	lea    rcx,[rip+0x21ab]        # 0x409656
  4074ab:	call   0x404110
  4074b0:	mov    rdx,QWORD PTR [rip+0x6f89]        # 0x40e440
  4074b7:	lea    rcx,[rip+0x21a0]        # 0x40965e
  4074be:	call   0x404110
  4074c3:	lea    rcx,[rip+0x21a7]        # 0x409671
  4074ca:	call   0x404110
  4074cf:	lea    rcx,[rip+0x21aa]        # 0x409680
  4074d6:	call   0x404110
  4074db:	lea    rcx,[rip+0x21de]        # 0x4096c0
  4074e2:	call   0x404110
  4074e7:	lea    rcx,[rip+0x2212]        # 0x409700
  4074ee:	call   0x404110
  4074f3:	lea    rcx,[rip+0x224e]        # 0x409748
  4074fa:	call   0x404110
  4074ff:	lea    rcx,[rip+0x22b2]        # 0x4097b8
  407506:	call   0x404110
  40750b:	lea    rcx,[rip+0x22e6]        # 0x4097f8
  407512:	call   0x404110
  407517:	lea    rcx,[rip+0x2322]        # 0x409840
  40751e:	call   0x404110
  407523:	lea    rcx,[rip+0x2356]        # 0x409880
  40752a:	call   0x404110
  40752f:	lea    rcx,[rip+0x2392]        # 0x4098c8
  407536:	call   0x404110
  40753b:	lea    rcx,[rip+0x23c6]        # 0x409908
  407542:	call   0x404110
  407547:	lea    rcx,[rip+0x23f2]        # 0x409940
  40754e:	call   0x404110
  407553:	lea    rcx,[rip+0x243e]        # 0x409998
  40755a:	call   0x404110
  40755f:	lea    rcx,[rip+0x2482]        # 0x4099e8
  407566:	call   0x404110
  40756b:	lea    rcx,[rip+0x24b6]        # 0x409a28
  407572:	call   0x404110
  407577:	lea    rcx,[rip+0x2522]        # 0x409aa0
  40757e:	call   0x404110
  407583:	lea    rcx,[rip+0x255e]        # 0x409ae8
  40758a:	call   0x404110
  40758f:	lea    rcx,[rip+0x25a2]        # 0x409b38
  407596:	call   0x404110
  40759b:	lea    rcx,[rip+0x25e6]        # 0x409b88
  4075a2:	call   0x404110
  4075a7:	lea    rcx,[rip+0x262a]        # 0x409bd8
  4075ae:	call   0x404110
  4075b3:	lea    rcx,[rip+0x266e]        # 0x409c28
  4075ba:	call   0x404110
  4075bf:	lea    rcx,[rip+0x26b2]        # 0x409c78
  4075c6:	call   0x404110
  4075cb:	lea    rcx,[rip+0x26f6]        # 0x409cc8
  4075d2:	call   0x404110
  4075d7:	lea    rcx,[rip+0x2732]        # 0x409d10
  4075de:	call   0x404110
  4075e3:	lea    rcx,[rip+0x275e]        # 0x409d48
  4075ea:	call   0x404110
  4075ef:	lea    rcx,[rip+0x278a]        # 0x409d80
  4075f6:	call   0x404110
  4075fb:	lea    rcx,[rip+0x27b6]        # 0x409db8
  407602:	call   0x404110
  407607:	xor    ecx,ecx
  407609:	call   0x4070a8
  40760e:	mov    rbx,QWORD PTR [rip+0x6e2b]        # 0x40e440
  407615:	call   QWORD PTR [rip+0x7f75]        # 0x40f590
  40761b:	lea    rdx,[rip+0x27c6]        # 0x409de8
  407622:	lea    rcx,[rax+0x60]
  407626:	mov    r8,rbx
  407629:	call   0x4040e0
  40762e:	mov    ecx,0x1
  407633:	call   0x4070a8
  407638:	xor    ecx,ecx
  40763a:	call   0x4070a8
  40763f:	nop
  407640:	(bad)  
  407641:	(bad)  
  407642:	(bad)  
  407643:	(bad)  
  407644:	(bad)  
  407645:	(bad)  
  407646:	(bad)  
  407647:	inc    DWORD PTR [rax]
  407649:	add    BYTE PTR [rax],al
  40764b:	add    BYTE PTR [rax],al
  40764d:	add    BYTE PTR [rax],al
  40764f:	add    bh,bh
  407651:	(bad)  
  407652:	(bad)  
  407653:	(bad)  
  407654:	(bad)  
  407655:	(bad)  
  407656:	(bad)  
  407657:	inc    DWORD PTR [rax]
  407659:	add    BYTE PTR [rax],al
  40765b:	add    BYTE PTR [rax],al
  40765d:	add    BYTE PTR [rax],al
	...

Disassembly of section .data:

0000000000408000 <.data>:
  408000:	or     al,BYTE PTR [rax]
	...
  40800e:	add    BYTE PTR [rax],al
  408010:	pop    rax
  408011:	jbe    0x408053
	...
  40801f:	add    bh,bh
  408021:	(bad)  
  408022:	(bad)  
  408023:	(bad)  
  408024:	(bad)  
  408025:	(bad)  
  408026:	(bad)  
  408027:	inc    DWORD PTR [rax]
  408029:	add    BYTE PTR [rax],al
  40802b:	add    BYTE PTR [rax],al
  40802d:	add    BYTE PTR [rax],al
  40802f:	add    bh,bh
	...
  40803d:	add    BYTE PTR [rax],al
  40803f:	add    BYTE PTR [rdx],al
	...
  40804d:	add    BYTE PTR [rax],al
  40804f:	add    bh,bh
  408051:	(bad)  
  408052:	(bad)  
  408053:	inc    DWORD PTR [rax]
	...
  40805d:	add    BYTE PTR [rax],al
  40805f:	add    BYTE PTR [rax+0x406d],al
	...
  40806d:	add    BYTE PTR [rax],al
  40806f:	add    BYTE PTR [rax+0x71],al
  408072:	add    BYTE PTR [rax],al
  408075:	add    BYTE PTR [rax],al
  408077:	add    BYTE PTR [rax+0x71],dl
  40807a:	add    BYTE PTR [rax],al
  40807d:	add    BYTE PTR [rax],al
  40807f:	add    BYTE PTR [rdx],dh
  408081:	movabs ds:0x2b992ddf,al
  40808a:	add    BYTE PTR [rax],al
  40808c:	add    BYTE PTR [rax],al
  40808e:	add    BYTE PTR [rax],al
  408090:	int    0x5d
  408092:	and    dl,dl
  408094:	data16 (bad) 
  408096:	(bad)  
  408097:	inc    DWORD PTR [rax]
  408099:	add    BYTE PTR [rax],al
  40809b:	add    BYTE PTR [rax],al
  40809d:	add    BYTE PTR [rax],al
	...

Disassembly of section .rdata:

0000000000409000 <.rdata>:
  409000:	push   rsi
  409001:	rex.RB push r10
  409003:	push   rbx
  409004:	rex.WB
  409005:	rex.WRXB
  409006:	rex.WRX and BYTE PTR [rip+0x6f500020],r15b        # 0x6f90902d
  40900d:	jae    0x409083
  40900f:	addr32 jb 0x409077
  409012:	push   rbx
  409013:	push   rcx
  409014:	rex.WR and BYTE PTR [rcx],r15b
  409017:	cs xor al,0x2e
  40901a:	xor    DWORD PTR [rdx],ecx
  40901c:	add    BYTE PTR [rcx+rcx*2+0x42],cl
  409020:	push   rbx
  409021:	and    BYTE PTR [rip+0x20],bh        # 0x409047
  409027:	add    BYTE PTR [rip+0x6367706c],ch        # 0x63a80099
  40902d:	outs   dx,DWORD PTR ds:[rsi]
  40902e:	ins    DWORD PTR es:[rdi],dx
  40902f:	ins    DWORD PTR es:[rdi],dx
  409030:	outs   dx,DWORD PTR ds:[rsi]
  409031:	outs   dx,BYTE PTR ds:[rsi]
  409032:	and    BYTE PTR [rip+0x7067706c],ch        # 0x70a800a4
  409038:	outs   dx,DWORD PTR ds:[rsi]
  409039:	jb     0x4090af
  40903b:	and    BYTE PTR [rip+0x2d207a6c],ch        # 0x2d610aad
  409041:	ins    BYTE PTR es:[rdi],dx
  409042:	ja     0x4090b7
  409044:	outs   dx,DWORD PTR ds:[rsi]
  409045:	movsxd ebp,DWORD PTR [rbx+0x33]
  409048:	xor    ah,BYTE PTR [rax]
  40904a:	sub    eax,0x2d206d6c
  40904f:	ins    BYTE PTR es:[rdi],dx
  409050:	jae    0x4090b7
  409052:	movsxd esi,DWORD PTR [rbp+0x72]
  409055:	xor    esi,DWORD PTR [rdx]
  409057:	and    BYTE PTR [rip+0x3273776c],ch        # 0x32b407c9
  40905d:	pop    rdi
  40905e:	xor    esi,DWORD PTR [rdx]
  409060:	add    BYTE PTR [rip+0x4c000a73],ah        # 0x4c409ad9
  409066:	rex.R
  409067:	rex.RX
  409068:	rex.WR
  409069:	rex.B
  40906a:	rex.RXB push r11
  40906c:	pop    rdi
  40906d:	push   rbx
  40906e:	rex.WR and BYTE PTR [rip+0x4c000020],r15b        # 0x4c409095
  409075:	rex.R
  409076:	rex.RX
  409077:	rex.WR
  409078:	rex.B
  409079:	rex.RXB push r11
  40907b:	pop    rdi
  40907c:	rex.RB pop r8
  40907e:	and    BYTE PTR [rip+0x444c0020],bh        # 0x448c90a4
  409084:	rex.RX
  409085:	rex.WR
  409086:	rex.B
  409087:	rex.RXB push r11
  409089:	and    BYTE PTR [rip+0x20],bh        # 0x4090af
  40908f:	add    BYTE PTR [rip+0x2f2e2e4c],ch        # 0x2f6ebee1
  409095:	cs cs (bad) 
  409098:	cs cs (bad) 
  40909b:	jae    0x40910f
  40909d:	movsxd ebp,DWORD PTR [rdi]
  40909f:	movsxd ebp,DWORD PTR [rdi+0x6d]
  4090a2:	ins    DWORD PTR es:[rdi],dx
  4090a3:	outs   dx,DWORD PTR ds:[rsi]
  4090a4:	outs   dx,BYTE PTR ds:[rsi]
  4090a5:	and    BYTE PTR [rip+0x2d2c6c57],ch        # 0x2d6cfd02
  4090ab:	sub    eax,0x6f6c6c61
  4090b0:	ja     0x4090df
  4090b2:	ins    DWORD PTR es:[rdi],dx
  4090b3:	jne    0x409121
  4090b5:	je     0x409120
  4090b7:	jo     0x409125
  4090b9:	gs sub eax,0x69666564
  4090bf:	outs   dx,BYTE PTR ds:[rsi]
  4090c0:	imul   esi,DWORD PTR [rcx+rbp*2+0x6f],0x572d206e
  4090c8:	ins    BYTE PTR es:[rdi],dx
  4090c9:	sub    al,0x2d
  4090cb:	sub    eax,0x61736964
  4090d0:	(bad)  
  4090d1:	ins    BYTE PTR es:[rdi],dx
  4090d2:	gs sub eax,0x6f747561
  4090d8:	sub    eax,0x6f706d69
  4090dd:	jb     0x409153
  4090df:	and    BYTE PTR [rip+0x63732f4c],ch        # 0x63b3c031
  4090e5:	jb     0x409148
  4090e7:	je     0x40914c
  4090e9:	push   0x65776a2f
  4090ee:	(bad)  
  4090ef:	ins    DWORD PTR es:[rdi],dx
  4090f0:	js     0x409157
  4090f2:	sub    eax,0x6174636f
  4090f7:	jbe    0x40915e
  4090f9:	(bad)  
  4090fa:	xor    al,0x2e
  4090fc:	xor    ch,BYTE PTR [rsi]
  4090fe:	xor    DWORD PTR [rdi],ebp
  409100:	ja     0x409138
  409102:	xor    al,0x2d
  409104:	xor    esi,DWORD PTR [rdx]
  409106:	(bad)  
  409107:	jne    0x40917c
  409109:	jb     0x40913a
  40910b:	js     0x409145
  40910d:	ss pop rdi
  40910f:	ss xor al,0x2d
  409112:	ja     0x40914a
  409114:	xor    al,0x2d
  409116:	ins    DWORD PTR es:[rdi],dx
  409117:	imul   ebp,DWORD PTR [rsi+0x67],0x2f323377
  40911e:	ins    BYTE PTR es:[rdi],dx
  40911f:	imul   esp,DWORD PTR [rdx+0x0],0x414c4643
  409126:	rex.RXB push r11
  409128:	pop    rdi
  409129:	push   rbx
  40912a:	rex.WR and BYTE PTR [rip+0x46430020],r15b        # 0x46839151
  409131:	rex.WR
  409132:	rex.B
  409133:	rex.RXB push r11
  409135:	and    BYTE PTR [rip+0x20],bh        # 0x40915b
  40913b:	add    BYTE PTR [rax],al
  40913d:	add    BYTE PTR [rax],al
  40913f:	add    BYTE PTR [rip+0x6c6c6157],ch        # 0x6cacf29c
  409145:	and    BYTE PTR [rip+0x73696d57],ch        # 0x73a9fea2
  40914b:	jae    0x4091b6
  40914d:	outs   dx,BYTE PTR ds:[rsi]
  40914e:	addr32 sub eax,0x746f7270
  409154:	outs   dx,DWORD PTR ds:[rsi]
  409155:	je     0x4091d0
  409157:	jo     0x4091be
  409159:	jae    0x40917b
  40915b:	sub    eax,0x696f7057
  409160:	outs   dx,BYTE PTR ds:[rsi]
  409161:	je     0x4091c8
  409163:	jb     0x409192
  409165:	(bad)  
  409166:	jb     0x4091d1
  409168:	je     0x4091d2
  40916a:	and    BYTE PTR [rip+0x63656457],ch        # 0x63a5f5c7
  409170:	ins    BYTE PTR es:[rdi],dx
  409171:	(bad)  
  409172:	jb     0x4091d5
  409174:	je     0x4091df
  409176:	outs   dx,DWORD PTR ds:[rsi]
  409177:	outs   dx,BYTE PTR ds:[rsi]
  409178:	sub    eax,0x65746661
  40917d:	jb     0x4091ac
  40917f:	jae    0x4091f5
  409181:	(bad)  
  409182:	je     0x4091e9
  409184:	ins    DWORD PTR es:[rdi],dx
  409185:	outs   dx,BYTE PTR gs:[rsi]
  409187:	je     0x4091a9
  409189:	sub    eax,0x646e6557
  40918e:	imul   esp,DWORD PTR [rsi+0x2d],0x6562616c
  409195:	ins    BYTE PTR es:[rdi],dx
  409196:	jae    0x4091b8
  409198:	sub    eax,0x73696d57
  40919d:	jae    0x409208
  40919f:	outs   dx,BYTE PTR ds:[rsi]
  4091a0:	addr32 sub eax,0x6d726f66
  4091a6:	(bad)  
  4091a7:	je     0x4091d6
  4091a9:	(bad)  
  4091aa:	je     0x409220
  4091ac:	jb     0x409217
  4091ae:	(bad)  
  4091af:	jne    0x409225
  4091b1:	and    BYTE PTR gs:[rip+0x726f6657],ch        # 0x72aff80f
  4091b8:	ins    DWORD PTR es:[rdi],dx
  4091b9:	(bad)  
  4091ba:	je     0x4091e9
  4091bc:	jae    0x409223
  4091be:	movsxd esi,DWORD PTR [rbp+0x72]
  4091c1:	imul   esi,DWORD PTR [rcx+rdi*2+0x20],0x6f6e662d
  4091c9:	sub    eax,0x69727473
  4091ce:	movsxd esi,DWORD PTR [rbp+rbp*1+0x61]
  4091d2:	ins    BYTE PTR es:[rdi],dx
  4091d3:	imul   esp,DWORD PTR [rcx+0x73],0x20676e69
  4091da:	sub    eax,0x61727766
  4091df:	jo     0x409257
  4091e1:	and    BYTE PTR [rip+0x63786566],ch        # 0x63b8f74d
  4091e7:	gs jae 0x40925d
  4091ea:	sub    eax,0x63657270
  4091ef:	imul   esi,DWORD PTR [rbx+0x69],0x733d6e6f
  4091f6:	je     0x409259
  4091f8:	outs   dx,BYTE PTR ds:[rsi]
  4091f9:	fs (bad) 
  4091fb:	jb     0x409261
  4091fd:	and    BYTE PTR [rip+0x4300324f],ch        # 0x4340c452
  409203:	push   rax
  409204:	push   rax
  409205:	rex.RX
  409206:	rex.WR
  409207:	rex.B
  409208:	rex.RXB push r11
  40920a:	and    BYTE PTR [rip+0x20],bh        # 0x409230
  409210:	sub    eax,0x732f2e49
  409215:	jb     0x40927a
  409217:	(bad)  
  409218:	imul   ebp,DWORD PTR [rsi+0x63],0x6564756c
  40921f:	(bad)  
  409220:	jo     0x409291
  409222:	jb     0x409298
  409224:	(bad)  
  409225:	ja     0x409290
  409227:	outs   dx,BYTE PTR ds:[rsi]
  409228:	xor    esi,DWORD PTR [rdx]
  40922a:	and    BYTE PTR [rip+0x45584544],ch        # 0x4598d774
  409230:	rex.XB pop r15
  409232:	rex.X
  409233:	rex.B
  409234:	rex.XB
  409235:	rex.WXB
  409236:	rex.RB
  409237:	rex.WRX
  409238:	and    BYTE PTR [rip+0x2f2e2e49],r13b        # 0x2f6ec088
  40923f:	cs cs (bad) 
  409242:	cs cs (bad) 
  409245:	jae    0x4092b9
  409247:	movsxd ebp,DWORD PTR [rdi]
  409249:	imul   ebp,DWORD PTR [rsi+0x63],0x6564756c
  409250:	(bad)  
  409251:	jo     0x4092c2
  409253:	jb     0x4092c9
  409255:	(bad)  
  409256:	ja     0x4092c1
  409258:	outs   dx,BYTE PTR ds:[rsi]
  409259:	xor    esi,DWORD PTR [rdx]
  40925b:	add    BYTE PTR [rbx+0x43],al
  40925e:	and    BYTE PTR [rip+0x38780020],bh        # 0x38b89284
  409264:	ss pop rdi
  409266:	ss xor al,0x2d
  409269:	ja     0x4092a1
  40926b:	xor    al,0x2d
  40926d:	ins    DWORD PTR es:[rdi],dx
  40926e:	imul   ebp,DWORD PTR [rsi+0x67],0x2d323377
  409275:	movsxd esp,DWORD PTR [ebx+0x0]
  409279:	rex.XB
  40927a:	rex.WRXB
  40927b:	rex.WRX
  40927c:	rex.RX
  40927d:	rex.WB
  40927e:	rex.RXB push r13
  409280:	push   rdx
  409281:	and    BYTE PTR [rip+0x20],r15b        # 0x4092a8
  409288:	(bad)  
  409289:	(bad)  
  40928a:	movsxd ebx,DWORD PTR [rdi+0x63]
  40928d:	jbe    0x4092ee
  40928f:	data16 jne 0x409300
  409292:	movsxd ebx,DWORD PTR [rdi+0x67]
  409295:	gs je  0x4092f9
  409298:	fs fs jb 0x409305
  40929c:	outs   dx,BYTE PTR ds:[rsi]
  40929d:	outs   dx,WORD PTR ds:[rsi]
  40929f:	cmp    eax,0x20276f6e
  4092a4:	(bad)  
  4092a5:	sub    eax,0x6572702d
  4092aa:	imul   di,WORD PTR [rax+0x3d],0x732f
  4092b0:	movsxd esi,DWORD PTR [rdx+0x61]
  4092b3:	je     0x409318
  4092b5:	push   0x65776a2f
  4092ba:	(bad)  
  4092bb:	ins    DWORD PTR es:[rdi],dx
  4092bc:	js     0x409323
  4092be:	sub    eax,0x6174636f
  4092c3:	jbe    0x40932a
  4092c5:	(bad)  
  4092c6:	xor    al,0x2e
  4092c8:	xor    ch,BYTE PTR [rsi]
  4092ca:	xor    DWORD PTR [rdi],ebp
  4092cc:	ja     0x409304
  4092ce:	xor    al,0x2d
  4092d0:	xor    esi,DWORD PTR [rdx]
  4092d2:	(bad)  
  4092d3:	jne    0x409348
  4092d5:	jb     0x409306
  4092d7:	js     0x409311
  4092d9:	ss pop rdi
  4092db:	ss xor al,0x2d
  4092de:	ja     0x409316
  4092e0:	xor    al,0x2d
  4092e2:	ins    DWORD PTR es:[rdi],dx
  4092e3:	imul   ebp,DWORD PTR [rsi+0x67],0x27323377
  4092ea:	and    BYTE PTR [rdi],ah
  4092ec:	sub    eax,0x736f682d
  4092f1:	je     0x409330
  4092f3:	js     0x40932d
  4092f5:	ss pop rdi
  4092f7:	ss xor al,0x2d
  4092fa:	ja     0x409332
  4092fc:	xor    al,0x2d
  4092fe:	ins    DWORD PTR es:[rdi],dx
  4092ff:	imul   ebp,DWORD PTR [rsi+0x67],0x27323377
  409306:	and    BYTE PTR [rdi],ah
  409308:	sub    eax,0x6975622d
  40930d:	ins    BYTE PTR es:[rdi],dx
  40930e:	fs cmp eax,0x5f363878
  409314:	ss xor al,0x2d
  409317:	jne    0x409387
  409319:	imul   ebp,DWORD PTR [rsi+0x6f],0x77
  40931d:	outs   dx,BYTE PTR ds:[rsi]
  40931e:	sub    eax,0x756e696c
  409323:	js     0x409352
  409325:	outs   dx,BYTE PTR ds:[esi]
  409327:	jne    0x409350
  409329:	and    BYTE PTR [rdi],ah
  40932b:	sub    eax,0x616e652d
  409330:	(bad)  
  409331:	ins    BYTE PTR es:[rdi],dx
  409332:	gs sub eax,0x72616873
  409338:	gs fs (bad) 
  40933b:	and    BYTE PTR [rdi],ah
  40933d:	sub    eax,0x7369642d
  409342:	(bad)  
  409343:	(bad)  
  409344:	ins    BYTE PTR es:[rdi],dx
  409345:	gs sub eax,0x74617473
  40934b:	imul   esp,DWORD PTR [rbx+0x27],0x2d2d2720
  409352:	ja     0x4093bd
  409354:	je     0x4093be
  409356:	sub    eax,0x7262696c
  40935b:	(bad)  
  40935c:	jb     0x4093c7
  40935e:	gs jae 0x40939e
  409361:	(bad)  
  409362:	jae    0x4093c7
  409364:	jb     0x4093c7
  409366:	je     0x4093cb
  409368:	push   0x65776a2f
  40936d:	(bad)  
  40936e:	ins    DWORD PTR es:[rdi],dx
  40936f:	js     0x4093d6
  409371:	sub    eax,0x6174636f
  409376:	jbe    0x4093dd
  409378:	(bad)  
  409379:	xor    al,0x2e
  40937b:	xor    ch,BYTE PTR [rsi]
  40937d:	xor    DWORD PTR [rdi],ebp
  40937f:	ja     0x4093b7
  409381:	xor    al,0x2d
  409383:	xor    esi,DWORD PTR [rdx]
  409385:	(bad)  
  409386:	jne    0x4093fb
  409388:	jb     0x4093b9
  40938a:	js     0x4093c4
  40938c:	ss pop rdi
  40938e:	ss xor al,0x2d
  409391:	ja     0x4093c9
  409393:	xor    al,0x2d
  409395:	ins    DWORD PTR es:[rdi],dx
  409396:	imul   ebp,DWORD PTR [rsi+0x67],0x2f323377
  40939d:	ins    BYTE PTR es:[rdi],dx
  40939e:	imul   esp,DWORD PTR [rdx+0x27],0x2d2d2720
  4093a5:	imul   esi,DWORD PTR fs:[rbx+0x61],0x2d656c62
  4093ad:	jb     0x40941f
  4093af:	(bad)  
  4093b0:	je     0x40941a
  4093b2:	(bad)  
  4093b3:	and    BYTE PTR [rdi],ah
  4093b5:	sub    eax,0x7469772d
  4093ba:	push   0x2d74756f
  4093bf:	je     0x409424
  4093c1:	ins    BYTE PTR es:[rdi],dx
  4093c2:	(bad)  
  4093c3:	and    BYTE PTR [rdi],ah
  4093c5:	sub    eax,0x7469772d
  4093ca:	push   0x2d74756f
  4093cf:	jo     0x409436
  4093d1:	jb     0x40943f
  4093d3:	(bad)  
  4093d4:	and    BYTE PTR [rdi],ah
  4093d6:	sub    eax,0x7469772d
  4093db:	push   0x2d74756f
  4093e0:	jo     0x40945b
  4093e2:	je     0x40944c
  4093e4:	outs   dx,DWORD PTR ds:[rsi]
  4093e5:	outs   dx,BYTE PTR ds:[rsi]
  4093e6:	(bad)  
  4093e7:	and    BYTE PTR [rdi],ah
  4093e9:	sub    eax,0x7469772d
  4093ee:	push   0x2d74756f
  4093f3:	addr32 jae 0x409469
  4093f6:	(bad)  
  4093f7:	jo     0x409462
  4093f9:	(bad)  
  4093fa:	and    BYTE PTR [rdi],ah
  4093fc:	sub    eax,0x7469772d
  409401:	push   0x2d74756f
  409406:	imul   esi,DWORD PTR [rdx+0x62],0x35
  40940a:	(bad)  
  40940b:	and    BYTE PTR [rdi],ah
  40940d:	sub    eax,0x7469772d
  409412:	push   0x2d74756f
  409417:	jo     0x40947a
  409419:	ins    DWORD PTR es:[rdi],dx
  40941a:	(bad)  
  40941b:	and    BYTE PTR [rdi],ah
  40941d:	sub    eax,0x7469772d
  409422:	push   0x2d74756f
  409427:	ins    BYTE PTR es:[rdi],dx
  409428:	fs (bad) 
  40942a:	jo     0x409453
  40942c:	and    BYTE PTR [rdi],ah
  40942e:	sub    eax,0x7469772d
  409433:	push   0x2d74756f
  409438:	(bad)  
  409439:	outs   dx,DWORD PTR ds:[rsi]
  40943a:	outs   dx,BYTE PTR ds:[rsi]
  40943b:	push   0x6f
  40943d:	jne    0x4094b1
  40943f:	(bad)  
  409440:	and    BYTE PTR [rdi],ah
  409442:	sub    eax,0x7469772d
  409447:	push   0x2d74756f
  40944c:	outs   dx,DWORD PTR ds:[rsi]
  40944d:	jo     0x4094b4
  40944f:	outs   dx,BYTE PTR ds:[rsi]
  409450:	jae    0x4094c5
  409452:	ins    BYTE PTR es:[rdi],dx
  409453:	(bad)  
  409454:	and    BYTE PTR [rdi],ah
  409456:	sub    eax,0x7469772d
  40945b:	push   0x2d74756f
  409460:	jb     0x4094c7
  409462:	(bad)  
  409463:	fs ins BYTE PTR es:[rdi],dx
  409465:	imul   ebp,DWORD PTR [rsi+0x65],0x2d272027
  40946c:	sub    eax,0x68746977
  409471:	outs   dx,DWORD PTR ds:[rsi]
  409472:	jne    0x4094e8
  409474:	sub    eax,0x7073736f
  409479:	sub    eax,0x64697575
  40947e:	(bad)  
  40947f:	and    BYTE PTR [rdi],ah
  409481:	sub    eax,0x7469772d
  409486:	push   0x2d74756f
  40948b:	ins    BYTE PTR es:[rdi],dx
  40948c:	imul   esp,DWORD PTR [rdx+0x78],0x20276c6d
  409493:	(bad)  
  409494:	sub    eax,0x7469772d
  409499:	push   0x2d74756f
  40949e:	ins    BYTE PTR es:[rdi],dx
  40949f:	imul   esp,DWORD PTR [rdx+0x78],0x27746c73
  4094a6:	and    BYTE PTR [rdi],ah
  4094a8:	sub    eax,0x7469772d
  4094ad:	push   0x696c7a2d
  4094b2:	(bad)  
  4094b3:	(bad)  
  4094b4:	and    BYTE PTR [rdi],ah
  4094b6:	sub    eax,0x7469772d
  4094bb:	push   0x7379732d
  4094c0:	je     0x409527
  4094c2:	ins    DWORD PTR es:[rdi],dx
  4094c3:	sub    eax,0x61647a74
  4094c8:	je     0x40952b
  4094ca:	cmp    eax,0x7665642f
  4094cf:	(bad)  
  4094d0:	outs   dx,BYTE PTR ds:[rsi]
  4094d1:	jne    0x40953f
  4094d3:	ins    BYTE PTR es:[rdi],dx
  4094d4:	(bad)  
  4094d5:	and    BYTE PTR [rdi],ah
  4094d7:	rex.WR
  4094d8:	rex.WB
  4094d9:	rex.X push rbx
  4094db:	cmp    eax,0x65736c2d
  4094e0:	movsxd esi,DWORD PTR [rbp+0x72]
  4094e3:	xor    esi,DWORD PTR [rdx]
  4094e5:	(bad)  
  4094e6:	and    BYTE PTR [rdi],ah
  4094e8:	(bad)  
  4094e9:	jne    0x409554
  4094eb:	ins    BYTE PTR es:[rdi],dx
  4094ec:	fs pop rdi
  4094ee:	(bad)  
  4094ef:	ins    BYTE PTR es:[rdi],dx
  4094f0:	imul   esp,DWORD PTR [rcx+0x73],0x3638783d
  4094f7:	pop    rdi
  4094f8:	ss xor al,0x2d
  4094fb:	jne    0x40956b
  4094fd:	imul   ebp,DWORD PTR [rsi+0x6f],0x77
  409501:	outs   dx,BYTE PTR ds:[rsi]
  409502:	sub    eax,0x756e696c
  409507:	js     0x409536
  409509:	outs   dx,BYTE PTR ds:[esi]
  40950b:	jne    0x409534
  40950d:	and    BYTE PTR [rdi],ah
  40950f:	push   0x5f74736f
  409514:	(bad)  
  409515:	ins    BYTE PTR es:[rdi],dx
  409516:	imul   esp,DWORD PTR [rcx+0x73],0x3638783d
  40951d:	pop    rdi
  40951e:	ss xor al,0x2d
  409521:	ja     0x409559
  409523:	xor    al,0x2d
  409525:	ins    DWORD PTR es:[rdi],dx
  409526:	imul   ebp,DWORD PTR [rsi+0x67],0x27323377
  40952d:	add    BYTE PTR [rax+0x47],dl
  409530:	pop    rax
  409531:	push   rbx
  409532:	and    BYTE PTR [rip+0x702f0020],bh        # 0x706f9558
  409538:	addr32 js 0x4095ae
  40953b:	(bad)  
  40953c:	jae    0x4095b0
  40953e:	movsxd ebp,DWORD PTR [rdi]
  409540:	ins    DWORD PTR es:[rdi],dx
  409541:	(bad)  
  409542:	imul   esp,DWORD PTR [rbp+0x66],0x69
  409546:	ins    BYTE PTR es:[rdi],dx
  409547:	gs jae 0x409579
  40954a:	jo     0x4095b3
  40954c:	js     0x4095c1
  40954e:	cs ins DWORD PTR es:[rdi],dx
  409550:	imul   eax,DWORD PTR [rax],0x50
  409553:	rex.WXB
  409554:	rex.RXB
  409555:	rex.WR
  409556:	rex.WB
  409557:	rex.X
  409558:	rex.R
  409559:	rex.WB push r10
  40955b:	and    BYTE PTR [rip+0x59530020],bh        # 0x59939581
  409561:	push   rbx
  409562:	rex.XB
  409563:	rex.WRXB
  409564:	rex.WRX
  409565:	rex.RX
  409566:	rex.R
  409567:	rex.WB push r10
  409569:	and    BYTE PTR [rip+0x48530020],bh        # 0x4893958f
  40956f:	push   r10
  409571:	rex.RB
  409572:	rex.R
  409573:	rex.WB push r10
  409575:	and    BYTE PTR [rip+0x414d0020],bh        # 0x418d959b
  40957b:	rex.WRX
  40957c:	rex.R
  40957d:	rex.WB push r10
  40957f:	and    BYTE PTR [rip+0x4f4c0020],bh        # 0x4f8c95a5
  409585:	rex.XB
  409586:	rex.B
  409587:	rex.WR
  409588:	rex.RB
  409589:	rex.R
  40958a:	rex.WB push r10
  40958c:	and    BYTE PTR [rip+0x494c0020],bh        # 0x498c95b2
  409592:	rex.X
  409593:	rex.R
  409594:	rex.WB push r10
  409596:	and    BYTE PTR [rip+0x4e490020],bh        # 0x4e8995bc
  40959c:	rex.XB
  40959d:	rex.WR push rbp
  40959f:	rex.R
  4095a0:	rex.RB
  4095a1:	rex.R
  4095a2:	rex.WB push r10
  4095a4:	sub    eax,0x56524553
  4095a9:	rex.RB push r10
  4095ab:	and    BYTE PTR [rip+0x4b500020],bh        # 0x4b9095d1
  4095b1:	rex.RXB
  4095b2:	rex.WB
  4095b3:	rex.WRX
  4095b4:	rex.XB
  4095b5:	rex.WR push rbp
  4095b7:	rex.R
  4095b8:	rex.RB
  4095b9:	rex.R
  4095ba:	rex.WB push r10
  4095bc:	and    BYTE PTR [rip+0x4e490020],bh        # 0x4e8995e2
  4095c2:	rex.XB
  4095c3:	rex.WR push rbp
  4095c5:	rex.R
  4095c6:	rex.RB
  4095c7:	rex.R
  4095c8:	rex.WB push r10
  4095ca:	and    BYTE PTR [rip+0x54480020],bh        # 0x548895f0
  4095d0:	rex.WRB
  4095d1:	rex.WR
  4095d2:	rex.R
  4095d3:	rex.WB push r10
  4095d5:	and    BYTE PTR [rip+0x4f440020],bh        # 0x4f8495fb
  4095db:	rex.XB
  4095dc:	rex.R
  4095dd:	rex.WB push r10
  4095df:	and    BYTE PTR [rip+0x49420020],bh        # 0x49829605
  4095e5:	rex.WRX
  4095e6:	rex.R
  4095e7:	rex.WB push r10
  4095e9:	and    BYTE PTR [rip+0x2d2d0020],bh        # 0x2d6d960f
  4095ef:	(bad)  
  4095f0:	imul   ebp,DWORD PTR [rsi+0x64],0x70007269
  4095f7:	addr32 pop rdi
  4095f9:	movsxd ebp,DWORD PTR [rdi+0x6e]
  4095fc:	imul   sp,WORD PTR [rdi+0x2d],0x2e39
  409602:	xor    al,0x0
  409604:	sub    eax,0x6c65682d
  409609:	jo     0x40960b
  40960b:	sub    eax,0x3f
  409610:	or     ah,BYTE PTR [rip+0x72702073]        # 0x72b0b689
  409616:	outs   dx,DWORD PTR ds:[rsi]
  409617:	jbe    0x409682
  409619:	fs gs jae 0x40963d
  40961d:	imul   ebp,DWORD PTR [rsi+0x66],0x616d726f
  409624:	je     0x40968f
  409626:	outs   dx,DWORD PTR ds:[rsi]
  409627:	outs   dx,BYTE PTR ds:[rsi]
  409628:	and    BYTE PTR [rcx+0x62],ah
  40962b:	outs   dx,DWORD PTR ds:[rsi]
  40962c:	jne    0x4096a2
  40962e:	and    BYTE PTR [rax+rbp*2+0x65],dh
  409632:	and    BYTE PTR [rcx+0x6e],ch
  409635:	jae    0x4096ab
  409637:	(bad)  
  409638:	ins    BYTE PTR es:[rdi],dx
  409639:	ins    BYTE PTR es:[rdi],dx
  40963a:	gs and BYTE PTR fs:[rsi+0x65],dh
  40963f:	jb     0x4096b4
  409641:	imul   ebp,DWORD PTR [rdi+0x6e],0x20666f20
  409648:	push   rax
  409649:	outs   dx,DWORD PTR ds:[rsi]
  40964a:	jae    0x4096c0
  40964c:	addr32 jb 0x4096b4
  40964f:	push   rbx
  409650:	push   rcx
  409651:	rex.WR
  409652:	or     cl,BYTE PTR cs:[rdx]
  409655:	add    BYTE PTR [rbp+0x73],dl
  409658:	(bad)  
  409659:	cmp    cl,BYTE PTR gs:[edx]
  40965d:	add    BYTE PTR [rax],ah
  40965f:	and    BYTE PTR [rip+0x4f5b2073],ah        # 0x4f9bb6d8
  409665:	push   rax
  409666:	push   rsp
  409667:	rex.WB
  409668:	rex.WRXB
  409669:	rex.WRX pop rbp
  40966b:	cs cs or cl,BYTE PTR cs:[rdx]
  409670:	add    BYTE PTR [rdi+0x70],cl
  409673:	je     0x4096de
  409675:	outs   dx,DWORD PTR ds:[rsi]
  409676:	outs   dx,BYTE PTR ds:[rsi]
  409677:	jae    0x4096b3
  409679:	or     al,BYTE PTR [rax]
  40967b:	add    BYTE PTR [rax],al
  40967d:	add    BYTE PTR [rax],al
  40967f:	add    BYTE PTR [rax],ah
  409681:	and    BYTE PTR [rip+0x6e69622d],ch        # 0x6ea9f8b4
  409687:	imul   esi,DWORD PTR fs:[rdx+0x20],0x20202020
  40968f:	and    BYTE PTR [rax],ah
  409691:	and    BYTE PTR [rax],ah
  409693:	and    BYTE PTR [rax],ah
  409695:	and    BYTE PTR [rax],ah
  409697:	and    BYTE PTR [rbx+0x68],dh
  40969a:	outs   dx,DWORD PTR ds:[rsi]
  40969b:	ja     0x4096bd
  40969d:	ins    BYTE PTR es:[rdi],dx
  40969e:	outs   dx,DWORD PTR ds:[rsi]
  40969f:	movsxd esp,DWORD PTR [rcx+0x74]
  4096a2:	imul   ebp,DWORD PTR [rdi+0x6e],0x20666f20
  4096a9:	jne    0x40971e
  4096ab:	gs jb  0x4096ce
  4096ae:	gs js  0x409716
  4096b1:	movsxd esi,DWORD PTR [rbp+0x74]
  4096b4:	(bad)  
  4096b5:	(bad)  
  4096b6:	ins    BYTE PTR es:[rdi],dx
  4096b7:	gs jae 0x4096c4
  4096ba:	add    BYTE PTR [rax],al
  4096bc:	add    BYTE PTR [rax],al
  4096be:	add    BYTE PTR [rax],al
  4096c0:	and    BYTE PTR [rax],ah
  4096c2:	sub    eax,0x636f642d
  4096c7:	imul   esi,DWORD PTR fs:[rdx+0x20],0x20202020
  4096cf:	and    BYTE PTR [rax],ah
  4096d1:	and    BYTE PTR [rax],ah
  4096d3:	and    BYTE PTR [rax],ah
  4096d5:	and    BYTE PTR [rax],ah
  4096d7:	and    BYTE PTR [rbx+0x68],dh
  4096da:	outs   dx,DWORD PTR ds:[rsi]
  4096db:	ja     0x4096fd
  4096dd:	ins    BYTE PTR es:[rdi],dx
  4096de:	outs   dx,DWORD PTR ds:[rsi]
  4096df:	movsxd esp,DWORD PTR [rcx+0x74]
  4096e2:	imul   ebp,DWORD PTR [rdi+0x6e],0x20666f20
  4096e9:	outs   dx,DWORD PTR fs:[rsi]
  4096eb:	movsxd esi,DWORD PTR [rbp+0x6d]
  4096ee:	outs   dx,BYTE PTR gs:[rsi]
  4096f0:	je     0x409753
  4096f2:	je     0x40975d
  4096f4:	outs   dx,DWORD PTR ds:[rsi]
  4096f5:	outs   dx,BYTE PTR ds:[rsi]
  4096f6:	and    BYTE PTR [rsi+0x69],ah
  4096f9:	ins    BYTE PTR es:[rdi],dx
  4096fa:	gs jae 0x409707
  4096fd:	add    BYTE PTR [rax],al
  4096ff:	add    BYTE PTR [rax],ah
  409701:	and    BYTE PTR [rip+0x6d74682d],ch        # 0x6db4ff34
  409707:	ins    BYTE PTR es:[rdi],dx
  409708:	imul   esi,DWORD PTR fs:[rdx+0x20],0x20202020
  409710:	and    BYTE PTR [rax],ah
  409712:	and    BYTE PTR [rax],ah
  409714:	and    BYTE PTR [rax],ah
  409716:	and    BYTE PTR [rax],ah
  409718:	jae    0x409782
  40971a:	outs   dx,DWORD PTR ds:[rsi]
  40971b:	ja     0x40973d
  40971d:	ins    BYTE PTR es:[rdi],dx
  40971e:	outs   dx,DWORD PTR ds:[rsi]
  40971f:	movsxd esp,DWORD PTR [rcx+0x74]
  409722:	imul   ebp,DWORD PTR [rdi+0x6e],0x20666f20
  409729:	rex.W push rsp
  40972b:	rex.WRB
  40972c:	rex.WR and BYTE PTR [rdi+rbp*2+0x63],r12b
  409731:	jne    0x4097a0
  409733:	outs   dx,BYTE PTR gs:[rsi]
  409735:	je     0x409798
  409737:	je     0x4097a2
  409739:	outs   dx,DWORD PTR ds:[rsi]
  40973a:	outs   dx,BYTE PTR ds:[rsi]
  40973b:	and    BYTE PTR [rsi+0x69],ah
  40973e:	ins    BYTE PTR es:[rdi],dx
  40973f:	gs jae 0x40974c
  409742:	add    BYTE PTR [rax],al
  409744:	add    BYTE PTR [rax],al
  409746:	add    BYTE PTR [rax],al
  409748:	and    BYTE PTR [rax],ah
  40974a:	sub    eax,0x636e692d
  40974f:	ins    BYTE PTR es:[rdi],dx
  409750:	jne    0x4097b6
  409752:	gs imul esi,DWORD PTR fs:[rdx+0x20],0x20202020
  40975b:	and    BYTE PTR [rax],ah
  40975d:	and    BYTE PTR [rax],ah
  40975f:	and    BYTE PTR [rbx+0x68],dh
  409762:	outs   dx,DWORD PTR ds:[rsi]
  409763:	ja     0x409785
  409765:	ins    BYTE PTR es:[rdi],dx
  409766:	outs   dx,DWORD PTR ds:[rsi]
  409767:	movsxd esp,DWORD PTR [rcx+0x74]
  40976a:	imul   ebp,DWORD PTR [rdi+0x6e],0x20666f20
  409771:	rex.XB and BYTE PTR [r8+0x65],bpl
  409775:	(bad)  
  409776:	fs gs jb 0x40979a
  40977a:	imul   bp,WORD PTR [rbp+riz*2+0x73],0x6f20
  409781:	data16 and BYTE PTR [rax+rbp*2+0x65],dh
  409786:	and    BYTE PTR [rbx+0x6c],ah
  409789:	imul   esp,DWORD PTR [rbp+0x6e],0x20200a74
  409790:	and    BYTE PTR [rax],ah
  409792:	and    BYTE PTR [rax],ah
  409794:	and    BYTE PTR [rax],ah
  409796:	and    BYTE PTR [rax],ah
  409798:	and    BYTE PTR [rax],ah
  40979a:	and    BYTE PTR [rax],ah
  40979c:	and    BYTE PTR [rax],ah
  40979e:	and    BYTE PTR [rax],ah
  4097a0:	and    BYTE PTR [rax],ah
  4097a2:	and    BYTE PTR [rax],ah
  4097a4:	and    BYTE PTR [rax],ah
  4097a6:	imul   ebp,DWORD PTR [rsi+0x74],0x61667265
  4097ad:	movsxd esp,DWORD PTR [rbp+0x73]
  4097b0:	or     al,BYTE PTR [rax]
  4097b2:	add    BYTE PTR [rax],al
  4097b4:	add    BYTE PTR [rax],al
  4097b6:	add    BYTE PTR [rax],al
  4097b8:	and    BYTE PTR [rax],ah
  4097ba:	sub    eax,0x676b702d
  4097bf:	imul   ebp,DWORD PTR [rsi+0x63],0x6564756c
  4097c6:	imul   esi,DWORD PTR fs:[rdx+0x20],0x20202020
  4097ce:	and    BYTE PTR [rax],ah
  4097d0:	jae    0x40983a
  4097d2:	outs   dx,DWORD PTR ds:[rsi]
  4097d3:	ja     0x4097f5
  4097d5:	ins    BYTE PTR es:[rdi],dx
  4097d6:	outs   dx,DWORD PTR ds:[rsi]
  4097d7:	movsxd esp,DWORD PTR [rcx+0x74]
  4097da:	imul   ebp,DWORD PTR [rdi+0x6e],0x20666f20
  4097e1:	outs   dx,DWORD PTR ds:[rsi]
  4097e2:	je     0x40984c
  4097e4:	gs jb  0x409807
  4097e7:	rex.XB and BYTE PTR [r8+0x65],bpl
  4097eb:	(bad)  
  4097ec:	fs gs jb 0x409810
  4097f0:	imul   bp,WORD PTR [rbp+riz*2+0x73],0xa
  4097f7:	add    BYTE PTR [rax],ah
  4097f9:	and    BYTE PTR [rip+0x636e692d],ch        # 0x63af012c
  4097ff:	ins    BYTE PTR es:[rdi],dx
  409800:	jne    0x409866
  409802:	gs imul esi,DWORD PTR fs:[rdx+0x2d],0x76726573
  40980b:	gs jb  0x40982e
  40980e:	and    BYTE PTR [rax],ah
  409810:	jae    0x40987a
  409812:	outs   dx,DWORD PTR ds:[rsi]
  409813:	ja     0x409835
  409815:	ins    BYTE PTR es:[rdi],dx
  409816:	outs   dx,DWORD PTR ds:[rsi]
  409817:	movsxd esp,DWORD PTR [rcx+0x74]
  40981a:	imul   ebp,DWORD PTR [rdi+0x6e],0x20666f20
  409821:	rex.XB and BYTE PTR [r8+0x65],bpl
  409825:	(bad)  
  409826:	fs gs jb 0x40984a
  40982a:	imul   bp,WORD PTR [rbp+riz*2+0x73],0x6620
  409831:	outs   dx,DWORD PTR ds:[rsi]
  409832:	jb     0x409854
  409834:	je     0x40989e
  409836:	and    BYTE PTR gs:[rbx+0x65],dh
  40983a:	jb     0x4098b2
  40983c:	gs jb  0x409849
  40983f:	add    BYTE PTR [rax],ah
  409841:	and    BYTE PTR [rip+0x62696c2d],ch        # 0x62aa0474
  409847:	imul   esi,DWORD PTR fs:[rdx+0x20],0x20202020
  40984f:	and    BYTE PTR [rax],ah
  409851:	and    BYTE PTR [rax],ah
  409853:	and    BYTE PTR [rax],ah
  409855:	and    BYTE PTR [rax],ah
  409857:	and    BYTE PTR [rbx+0x68],dh
  40985a:	outs   dx,DWORD PTR ds:[rsi]
  40985b:	ja     0x40987d
  40985d:	ins    BYTE PTR es:[rdi],dx
  40985e:	outs   dx,DWORD PTR ds:[rsi]
  40985f:	movsxd esp,DWORD PTR [rcx+0x74]
  409862:	imul   ebp,DWORD PTR [rdi+0x6e],0x20666f20
  409869:	outs   dx,DWORD PTR ds:[rsi]
  40986a:	(bad)  
  40986b:	push   0x65
  40986d:	movsxd esi,DWORD PTR [rax+riz*1+0x63]
  409871:	outs   dx,DWORD PTR ds:[rsi]
  409872:	fs and BYTE PTR gs:[rcx+rbp*2+0x62],ch
  409878:	jb     0x4098db
  40987a:	jb     0x4098e5
  40987c:	gs jae 0x409889
  40987f:	add    BYTE PTR [rax],ah
  409881:	and    BYTE PTR [rip+0x676b702d],ch        # 0x67ac08b4
  409887:	ins    BYTE PTR es:[rdi],dx
  409888:	imul   esp,DWORD PTR [rdx+0x64],0x20207269
  40988f:	and    BYTE PTR [rax],ah
  409891:	and    BYTE PTR [rax],ah
  409893:	and    BYTE PTR [rax],ah
  409895:	and    BYTE PTR [rax],ah
  409897:	and    BYTE PTR [rbx+0x68],dh
  40989a:	outs   dx,DWORD PTR ds:[rsi]
  40989b:	ja     0x4098bd
  40989d:	ins    BYTE PTR es:[rdi],dx
  40989e:	outs   dx,DWORD PTR ds:[rsi]
  40989f:	movsxd esp,DWORD PTR [rcx+0x74]
  4098a2:	imul   ebp,DWORD PTR [rdi+0x6e],0x20666f20
  4098a9:	fs jns 0x40991a
  4098ac:	(bad)  
  4098ad:	ins    DWORD PTR es:[rdi],dx
  4098ae:	imul   esp,DWORD PTR [rbx+0x61],0x20796c6c
  4098b5:	ins    BYTE PTR es:[rdi],dx
  4098b6:	outs   dx,DWORD PTR ds:[rsi]
  4098b7:	(bad)  
  4098b8:	fs (bad) 
  4098ba:	(bad)  
  4098bb:	ins    BYTE PTR es:[rdi],dx
  4098bc:	and    BYTE PTR gs:[rbp+0x6f],ch
  4098c0:	fs jne 0x40992f
  4098c3:	gs jae 0x4098d0
  4098c6:	add    BYTE PTR [rax],al
  4098c8:	and    BYTE PTR [rax],ah
  4098ca:	sub    eax,0x636f6c2d
  4098cf:	(bad)  
  4098d0:	ins    BYTE PTR es:[rdi],dx
  4098d1:	gs imul esi,DWORD PTR fs:[rdx+0x20],0x20202020
  4098da:	and    BYTE PTR [rax],ah
  4098dc:	and    BYTE PTR [rax],ah
  4098de:	and    BYTE PTR [rax],ah
  4098e0:	jae    0x40994a
  4098e2:	outs   dx,DWORD PTR ds:[rsi]
  4098e3:	ja     0x409905
  4098e5:	ins    BYTE PTR es:[rdi],dx
  4098e6:	outs   dx,DWORD PTR ds:[rsi]
  4098e7:	movsxd esp,DWORD PTR [rcx+0x74]
  4098ea:	imul   ebp,DWORD PTR [rdi+0x6e],0x20666f20
  4098f1:	ins    BYTE PTR es:[rdi],dx
  4098f2:	outs   dx,DWORD PTR ds:[rsi]
  4098f3:	movsxd esp,DWORD PTR [rcx+0x6c]
  4098f6:	and    BYTE PTR gs:[rbx+0x75],dh
  4098fa:	jo     0x40996c
  4098fc:	outs   dx,DWORD PTR ds:[rsi]
  4098fd:	jb     0x409973
  4098ff:	and    BYTE PTR [rsi+0x69],ah
  409902:	ins    BYTE PTR es:[rdi],dx
  409903:	gs jae 0x409910
  409906:	add    BYTE PTR [rax],al
  409908:	and    BYTE PTR [rax],ah
  40990a:	sub    eax,0x6e616d2d
  40990f:	imul   esi,DWORD PTR fs:[rdx+0x20],0x20202020
  409917:	and    BYTE PTR [rax],ah
  409919:	and    BYTE PTR [rax],ah
  40991b:	and    BYTE PTR [rax],ah
  40991d:	and    BYTE PTR [rax],ah
  40991f:	and    BYTE PTR [rbx+0x68],dh
  409922:	outs   dx,DWORD PTR ds:[rsi]
  409923:	ja     0x409945
  409925:	ins    BYTE PTR es:[rdi],dx
  409926:	outs   dx,DWORD PTR ds:[rsi]
  409927:	movsxd esp,DWORD PTR [rcx+0x74]
  40992a:	imul   ebp,DWORD PTR [rdi+0x6e],0x20666f20
  409931:	ins    DWORD PTR es:[rdi],dx
  409932:	(bad)  
  409933:	outs   dx,BYTE PTR ds:[rsi]
  409934:	jne    0x409997
  409936:	ins    BYTE PTR es:[rdi],dx
  409937:	and    BYTE PTR [rax+0x61],dh
  40993a:	addr32 gs jae 0x409948
  40993e:	add    BYTE PTR [rax],al
  409940:	and    BYTE PTR [rax],ah
  409942:	sub    eax,0x6168732d
  409947:	jb     0x4099ae
  409949:	imul   esi,DWORD PTR fs:[rdx+0x20],0x20202020
  409951:	and    BYTE PTR [rax],ah
  409953:	and    BYTE PTR [rax],ah
  409955:	and    BYTE PTR [rax],ah
  409957:	and    BYTE PTR [rbx+0x68],dh
  40995a:	outs   dx,DWORD PTR ds:[rsi]
  40995b:	ja     0x40997d
  40995d:	ins    BYTE PTR es:[rdi],dx
  40995e:	outs   dx,DWORD PTR ds:[rsi]
  40995f:	movsxd esp,DWORD PTR [rcx+0x74]
  409962:	imul   ebp,DWORD PTR [rdi+0x6e],0x20666f20
  409969:	(bad)  
  40996a:	jb     0x4099cf
  40996c:	push   0x63657469
  409971:	je     0x4099e8
  409973:	jb     0x4099da
  409975:	sub    eax,0x65646e69
  40997a:	jo     0x4099e1
  40997c:	outs   dx,BYTE PTR ds:[rsi]
  40997d:	fs outs dx,BYTE PTR gs:[rsi]
  409980:	je     0x4099a2
  409982:	jae    0x4099f9
  409984:	jo     0x4099f6
  409986:	outs   dx,DWORD PTR ds:[rsi]
  409987:	jb     0x4099fd
  409989:	and    BYTE PTR [rsi+0x69],ah
  40998c:	ins    BYTE PTR es:[rdi],dx
  40998d:	gs jae 0x40999a
	...
  409998:	and    BYTE PTR [rax],ah
  40999a:	sub    eax,0x7379732d
  40999f:	movsxd ebp,DWORD PTR [rdi+0x6e]
  4099a2:	imul   si,WORD PTR fs:[rdx+0x20],0x2020
  4099a9:	and    BYTE PTR [rax],ah
  4099ab:	and    BYTE PTR [rax],ah
  4099ad:	and    BYTE PTR [rax],ah
  4099af:	and    BYTE PTR [rbx+0x68],dh
  4099b2:	outs   dx,DWORD PTR ds:[rsi]
  4099b3:	ja     0x4099d5
  4099b5:	ins    BYTE PTR es:[rdi],dx
  4099b6:	outs   dx,DWORD PTR ds:[rsi]
  4099b7:	movsxd esp,DWORD PTR [rcx+0x74]
  4099ba:	imul   ebp,DWORD PTR [rdi+0x6e],0x20666f20
  4099c1:	jae    0x409a3c
  4099c3:	jae    0x409a39
  4099c5:	gs ins DWORD PTR es:[rdi],dx
  4099c7:	sub    eax,0x65646977
  4099cc:	and    BYTE PTR [rbx+0x6f],ah
  4099cf:	outs   dx,BYTE PTR ds:[rsi]
  4099d0:	imul   sp,WORD PTR [rdi+0x75],0x6172
  4099d6:	je     0x409a41
  4099d8:	outs   dx,DWORD PTR ds:[rsi]
  4099d9:	outs   dx,BYTE PTR ds:[rsi]
  4099da:	and    BYTE PTR [rsi+0x69],ah
  4099dd:	ins    BYTE PTR es:[rdi],dx
  4099de:	gs jae 0x4099eb
  4099e1:	add    BYTE PTR [rax],al
  4099e3:	add    BYTE PTR [rax],al
  4099e5:	add    BYTE PTR [rax],al
  4099e7:	add    BYTE PTR [rax],ah
  4099e9:	and    BYTE PTR [rip+0x7867702d],ch        # 0x78a80a1c
  4099ef:	jae    0x409a11
  4099f1:	and    BYTE PTR [rax],ah
  4099f3:	and    BYTE PTR [rax],ah
  4099f5:	and    BYTE PTR [rax],ah
  4099f7:	and    BYTE PTR [rax],ah
  4099f9:	and    BYTE PTR [rax],ah
  4099fb:	and    BYTE PTR [rax],ah
  4099fd:	and    BYTE PTR [rax],ah
  4099ff:	and    BYTE PTR [rbx+0x68],dh
  409a02:	outs   dx,DWORD PTR ds:[rsi]
  409a03:	ja     0x409a25
  409a05:	ins    BYTE PTR es:[rdi],dx
  409a06:	outs   dx,DWORD PTR ds:[rsi]
  409a07:	movsxd esp,DWORD PTR [rcx+0x74]
  409a0a:	imul   ebp,DWORD PTR [rdi+0x6e],0x20666f20
  409a11:	gs js  0x409a88
  409a14:	outs   dx,BYTE PTR gs:[rsi]
  409a16:	jae    0x409a81
  409a18:	outs   dx,DWORD PTR ds:[rsi]
  409a19:	outs   dx,BYTE PTR ds:[rsi]
  409a1a:	and    BYTE PTR [rbp+0x61],ch
  409a1d:	imul   esp,DWORD PTR [rbp+0x66],0x69
  409a21:	ins    BYTE PTR es:[rdi],dx
  409a22:	or     al,BYTE PTR gs:[rax]
  409a25:	add    BYTE PTR [rax],al
  409a27:	add    BYTE PTR [rax],ah
  409a29:	and    BYTE PTR [rip+0x6e6f632d],ch        # 0x6eaffd5c
  409a2f:	imul   sp,WORD PTR [rdi+0x75],0x6572
  409a35:	and    BYTE PTR [rax],ah
  409a37:	and    BYTE PTR [rax],ah
  409a39:	and    BYTE PTR [rax],ah
  409a3b:	and    BYTE PTR [rax],ah
  409a3d:	and    BYTE PTR [rax],ah
  409a3f:	and    BYTE PTR [rbx+0x68],dh
  409a42:	outs   dx,DWORD PTR ds:[rsi]
  409a43:	ja     0x409a65
  409a45:	outs   dx,DWORD PTR ds:[rsi]
  409a46:	jo     0x409abc
  409a48:	imul   ebp,DWORD PTR [rdi+0x6e],0x69672073
  409a4f:	jbe    0x409ab6
  409a51:	outs   dx,BYTE PTR ds:[rsi]
  409a52:	and    BYTE PTR [rdi+rbp*2+0x20],dh
  409a56:	and    ah,BYTE PTR [rbx+0x6f]
  409a59:	outs   dx,BYTE PTR ds:[rsi]
  409a5a:	imul   sp,WORD PTR [rdi+0x75],0x6572
  409a60:	and    ah,BYTE PTR [rax]
  409a62:	jae    0x409ac7
  409a64:	jb     0x409acf
  409a66:	jo     0x409adc
  409a68:	and    BYTE PTR [rdi+0x68],dh
  409a6b:	outs   dx,BYTE PTR gs:[rsi]
  409a6d:	or     ah,BYTE PTR [rax]
  409a6f:	and    BYTE PTR [rax],ah
  409a71:	and    BYTE PTR [rax],ah
  409a73:	and    BYTE PTR [rax],ah
  409a75:	and    BYTE PTR [rax],ah
  409a77:	and    BYTE PTR [rax],ah
  409a79:	and    BYTE PTR [rax],ah
  409a7b:	and    BYTE PTR [rax],ah
  409a7d:	and    BYTE PTR [rax],ah
  409a7f:	and    BYTE PTR [rax],ah
  409a81:	and    BYTE PTR [rax],ah
  409a83:	and    BYTE PTR [rax],ah
  409a85:	and    BYTE PTR [rax+0x6f],dl
  409a88:	jae    0x409afe
  409a8a:	addr32 jb 0x409af2
  409a8d:	push   rbx
  409a8e:	push   rcx
  409a8f:	rex.WR and BYTE PTR [rdi+0x61],r14b
  409a93:	jae    0x409ab5
  409a95:	(bad)  
  409a96:	jne    0x409b01
  409a98:	ins    BYTE PTR es:[rdi],dx
  409a99:	je     0x409aa5
  409a9b:	add    BYTE PTR [rax],al
  409a9d:	add    BYTE PTR [rax],al
  409a9f:	add    BYTE PTR [rax],ah
  409aa1:	and    BYTE PTR [rip+0x2063632d],ch        # 0x20a3fdd4
  409aa7:	and    BYTE PTR [rax],ah
  409aa9:	and    BYTE PTR [rax],ah
  409aab:	and    BYTE PTR [rax],ah
  409aad:	and    BYTE PTR [rax],ah
  409aaf:	and    BYTE PTR [rax],ah
  409ab1:	and    BYTE PTR [rax],ah
  409ab3:	and    BYTE PTR [rax],ah
  409ab5:	and    BYTE PTR [rax],ah
  409ab7:	and    BYTE PTR [rbx+0x68],dh
  409aba:	outs   dx,DWORD PTR ds:[rsi]
  409abb:	ja     0x409add
  409abd:	rex.XB
  409abe:	rex.XB and BYTE PTR [r14+0x61],sil
  409ac2:	ins    BYTE PTR es:[rdi],dx
  409ac3:	jne    0x409b2a
  409ac5:	and    BYTE PTR [rbp+0x73],dh
  409ac8:	gs and BYTE PTR fs:[rdi+0x68],dh
  409acd:	outs   dx,BYTE PTR gs:[rsi]
  409acf:	and    BYTE PTR [rax+0x6f],dl
  409ad2:	jae    0x409b48
  409ad4:	addr32 jb 0x409b3c
  409ad7:	push   rbx
  409ad8:	push   rcx
  409ad9:	rex.WR and BYTE PTR [rdi+0x61],r14b
  409add:	jae    0x409aff
  409adf:	(bad)  
  409ae0:	jne    0x409b4b
  409ae2:	ins    BYTE PTR es:[rdi],dx
  409ae3:	je     0x409aef
  409ae5:	add    BYTE PTR [rax],al
  409ae7:	add    BYTE PTR [rax],ah
  409ae9:	and    BYTE PTR [rip+0x7070632d],ch        # 0x70b0fe1c
  409aef:	data16 ins BYTE PTR es:[rdi],dx
  409af1:	(bad)  
  409af2:	addr32 jae 0x409b15
  409af5:	and    BYTE PTR [rax],ah
  409af7:	and    BYTE PTR [rax],ah
  409af9:	and    BYTE PTR [rax],ah
  409afb:	and    BYTE PTR [rax],ah
  409afd:	and    BYTE PTR [rax],ah
  409aff:	and    BYTE PTR [rbx+0x68],dh
  409b02:	outs   dx,DWORD PTR ds:[rsi]
  409b03:	ja     0x409b25
  409b05:	rex.XB push r8
  409b07:	push   rax
  409b08:	rex.RX
  409b09:	rex.WR
  409b0a:	rex.B
  409b0b:	rex.RXB push r11
  409b0d:	and    BYTE PTR [rsi+0x61],dh
  409b10:	ins    BYTE PTR es:[rdi],dx
  409b11:	jne    0x409b78
  409b13:	and    BYTE PTR [rbp+0x73],dh
  409b16:	gs and BYTE PTR fs:[rdi+0x68],dh
  409b1b:	outs   dx,BYTE PTR gs:[rsi]
  409b1d:	and    BYTE PTR [rax+0x6f],dl
  409b20:	jae    0x409b96
  409b22:	addr32 jb 0x409b8a
  409b25:	push   rbx
  409b26:	push   rcx
  409b27:	rex.WR and BYTE PTR [rdi+0x61],r14b
  409b2b:	jae    0x409b4d
  409b2d:	(bad)  
  409b2e:	jne    0x409b99
  409b30:	ins    BYTE PTR es:[rdi],dx
  409b31:	je     0x409b3d
  409b33:	add    BYTE PTR [rax],al
  409b35:	add    BYTE PTR [rax],al
  409b37:	add    BYTE PTR [rax],ah
  409b39:	and    BYTE PTR [rip+0x6c66632d],ch        # 0x6ca6fe6c
  409b3f:	(bad)  
  409b40:	addr32 jae 0x409b63
  409b43:	and    BYTE PTR [rax],ah
  409b45:	and    BYTE PTR [rax],ah
  409b47:	and    BYTE PTR [rax],ah
  409b49:	and    BYTE PTR [rax],ah
  409b4b:	and    BYTE PTR [rax],ah
  409b4d:	and    BYTE PTR [rax],ah
  409b4f:	and    BYTE PTR [rbx+0x68],dh
  409b52:	outs   dx,DWORD PTR ds:[rsi]
  409b53:	ja     0x409b75
  409b55:	rex.XB
  409b56:	rex.RX
  409b57:	rex.WR
  409b58:	rex.B
  409b59:	rex.RXB push r11
  409b5b:	and    BYTE PTR [rsi+0x61],dh
  409b5e:	ins    BYTE PTR es:[rdi],dx
  409b5f:	jne    0x409bc6
  409b61:	and    BYTE PTR [rbp+0x73],dh
  409b64:	gs and BYTE PTR fs:[rdi+0x68],dh
  409b69:	outs   dx,BYTE PTR gs:[rsi]
  409b6b:	and    BYTE PTR [rax+0x6f],dl
  409b6e:	jae    0x409be4
  409b70:	addr32 jb 0x409bd8
  409b73:	push   rbx
  409b74:	push   rcx
  409b75:	rex.WR and BYTE PTR [rdi+0x61],r14b
  409b79:	jae    0x409b9b
  409b7b:	(bad)  
  409b7c:	jne    0x409be7
  409b7e:	ins    BYTE PTR es:[rdi],dx
  409b7f:	je     0x409b8b
  409b81:	add    BYTE PTR [rax],al
  409b83:	add    BYTE PTR [rax],al
  409b85:	add    BYTE PTR [rax],al
  409b87:	add    BYTE PTR [rax],ah
  409b89:	and    BYTE PTR [rip+0x6c66632d],ch        # 0x6ca6febc
  409b8f:	(bad)  
  409b90:	addr32 jae 0x409bf2
  409b93:	jae    0x409c01
  409b95:	and    BYTE PTR [rax],ah
  409b97:	and    BYTE PTR [rax],ah
  409b99:	and    BYTE PTR [rax],ah
  409b9b:	and    BYTE PTR [rax],ah
  409b9d:	and    BYTE PTR [rax],ah
  409b9f:	and    BYTE PTR [rbx+0x68],dh
  409ba2:	outs   dx,DWORD PTR ds:[rsi]
  409ba3:	ja     0x409bc5
  409ba5:	rex.XB
  409ba6:	rex.RX
  409ba7:	rex.WR
  409ba8:	rex.B
  409ba9:	rex.RXB push r11
  409bab:	pop    rdi
  409bac:	push   rbx
  409bad:	rex.WR and BYTE PTR [rsi+0x61],r14b
  409bb1:	ins    BYTE PTR es:[rdi],dx
  409bb2:	jne    0x409c19
  409bb4:	and    BYTE PTR [rbp+0x73],dh
  409bb7:	gs and BYTE PTR fs:[rdi+0x68],dh
  409bbc:	outs   dx,BYTE PTR gs:[rsi]
  409bbe:	and    BYTE PTR [rax+0x6f],dl
  409bc1:	jae    0x409c37
  409bc3:	addr32 jb 0x409c2b
  409bc6:	push   rbx
  409bc7:	push   rcx
  409bc8:	rex.WR and BYTE PTR [rdi+0x61],r14b
  409bcc:	jae    0x409bee
  409bce:	(bad)  
  409bcf:	jne    0x409c3a
  409bd1:	ins    BYTE PTR es:[rdi],dx
  409bd2:	je     0x409bde
  409bd4:	add    BYTE PTR [rax],al
  409bd6:	add    BYTE PTR [rax],al
  409bd8:	and    BYTE PTR [rax],ah
  409bda:	sub    eax,0x66646c2d
  409bdf:	ins    BYTE PTR es:[rdi],dx
  409be0:	(bad)  
  409be1:	addr32 jae 0x409c04
  409be4:	and    BYTE PTR [rax],ah
  409be6:	and    BYTE PTR [rax],ah
  409be8:	and    BYTE PTR [rax],ah
  409bea:	and    BYTE PTR [rax],ah
  409bec:	and    BYTE PTR [rax],ah
  409bee:	and    BYTE PTR [rax],ah
  409bf0:	jae    0x409c5a
  409bf2:	outs   dx,DWORD PTR ds:[rsi]
  409bf3:	ja     0x409c15
  409bf5:	rex.WR
  409bf6:	rex.R
  409bf7:	rex.RX
  409bf8:	rex.WR
  409bf9:	rex.B
  409bfa:	rex.RXB push r11
  409bfc:	and    BYTE PTR [rsi+0x61],dh
  409bff:	ins    BYTE PTR es:[rdi],dx
  409c00:	jne    0x409c67
  409c02:	and    BYTE PTR [rbp+0x73],dh
  409c05:	gs and BYTE PTR fs:[rdi+0x68],dh
  409c0a:	outs   dx,BYTE PTR gs:[rsi]
  409c0c:	and    BYTE PTR [rax+0x6f],dl
  409c0f:	jae    0x409c85
  409c11:	addr32 jb 0x409c79
  409c14:	push   rbx
  409c15:	push   rcx
  409c16:	rex.WR and BYTE PTR [rdi+0x61],r14b
  409c1a:	jae    0x409c3c
  409c1c:	(bad)  
  409c1d:	jne    0x409c88
  409c1f:	ins    BYTE PTR es:[rdi],dx
  409c20:	je     0x409c2c
  409c22:	add    BYTE PTR [rax],al
  409c24:	add    BYTE PTR [rax],al
  409c26:	add    BYTE PTR [rax],al
  409c28:	and    BYTE PTR [rax],ah
  409c2a:	sub    eax,0x66646c2d
  409c2f:	ins    BYTE PTR es:[rdi],dx
  409c30:	(bad)  
  409c31:	addr32 jae 0x409c93
  409c34:	gs js  0x409c57
  409c37:	and    BYTE PTR [rax],ah
  409c39:	and    BYTE PTR [rax],ah
  409c3b:	and    BYTE PTR [rax],ah
  409c3d:	and    BYTE PTR [rax],ah
  409c3f:	and    BYTE PTR [rbx+0x68],dh
  409c42:	outs   dx,DWORD PTR ds:[rsi]
  409c43:	ja     0x409c65
  409c45:	rex.WR
  409c46:	rex.R
  409c47:	rex.RX
  409c48:	rex.WR
  409c49:	rex.B
  409c4a:	rex.RXB push r11
  409c4c:	pop    rdi
  409c4d:	rex.RB pop r8
  409c4f:	and    BYTE PTR [rsi+0x61],dh
  409c52:	ins    BYTE PTR es:[rdi],dx
  409c53:	jne    0x409cba
  409c55:	and    BYTE PTR [rbp+0x73],dh
  409c58:	gs and BYTE PTR fs:[rdi+0x68],dh
  409c5d:	outs   dx,BYTE PTR gs:[rsi]
  409c5f:	and    BYTE PTR [rax+0x6f],dl
  409c62:	jae    0x409cd8
  409c64:	addr32 jb 0x409ccc
  409c67:	push   rbx
  409c68:	push   rcx
  409c69:	rex.WR and BYTE PTR [rdi+0x61],r14b
  409c6d:	jae    0x409c8f
  409c6f:	(bad)  
  409c70:	jne    0x409cdb
  409c72:	ins    BYTE PTR es:[rdi],dx
  409c73:	je     0x409c7f
  409c75:	add    BYTE PTR [rax],al
  409c77:	add    BYTE PTR [rax],ah
  409c79:	and    BYTE PTR [rip+0x66646c2d],ch        # 0x66a508ac
  409c7f:	ins    BYTE PTR es:[rdi],dx
  409c80:	(bad)  
  409c81:	addr32 jae 0x409ce3
  409c84:	jae    0x409cf2
  409c86:	and    BYTE PTR [rax],ah
  409c88:	and    BYTE PTR [rax],ah
  409c8a:	and    BYTE PTR [rax],ah
  409c8c:	and    BYTE PTR [rax],ah
  409c8e:	and    BYTE PTR [rax],ah
  409c90:	jae    0x409cfa
  409c92:	outs   dx,DWORD PTR ds:[rsi]
  409c93:	ja     0x409cb5
  409c95:	rex.WR
  409c96:	rex.R
  409c97:	rex.RX
  409c98:	rex.WR
  409c99:	rex.B
  409c9a:	rex.RXB push r11
  409c9c:	pop    rdi
  409c9d:	push   rbx
  409c9e:	rex.WR and BYTE PTR [rsi+0x61],r14b
  409ca2:	ins    BYTE PTR es:[rdi],dx
  409ca3:	jne    0x409d0a
  409ca5:	and    BYTE PTR [rbp+0x73],dh
  409ca8:	gs and BYTE PTR fs:[rdi+0x68],dh
  409cad:	outs   dx,BYTE PTR gs:[rsi]
  409caf:	and    BYTE PTR [rax+0x6f],dl
  409cb2:	jae    0x409d28
  409cb4:	addr32 jb 0x409d1c
  409cb7:	push   rbx
  409cb8:	push   rcx
  409cb9:	rex.WR and BYTE PTR [rdi+0x61],r14b
  409cbd:	jae    0x409cdf
  409cbf:	(bad)  
  409cc0:	jne    0x409d2b
  409cc2:	ins    BYTE PTR es:[rdi],dx
  409cc3:	je     0x409ccf
  409cc5:	add    BYTE PTR [rax],al
  409cc7:	add    BYTE PTR [rax],ah
  409cc9:	and    BYTE PTR [rip+0x62696c2d],ch        # 0x62aa08fc
  409ccf:	jae    0x409cf1
  409cd1:	and    BYTE PTR [rax],ah
  409cd3:	and    BYTE PTR [rax],ah
  409cd5:	and    BYTE PTR [rax],ah
  409cd7:	and    BYTE PTR [rax],ah
  409cd9:	and    BYTE PTR [rax],ah
  409cdb:	and    BYTE PTR [rax],ah
  409cdd:	and    BYTE PTR [rax],ah
  409cdf:	and    BYTE PTR [rbx+0x68],dh
  409ce2:	outs   dx,DWORD PTR ds:[rsi]
  409ce3:	ja     0x409d05
  409ce5:	rex.WR
  409ce6:	rex.WB
  409ce7:	rex.X push rbx
  409ce9:	and    BYTE PTR [rsi+0x61],dh
  409cec:	ins    BYTE PTR es:[rdi],dx
  409ced:	jne    0x409d54
  409cef:	and    BYTE PTR [rbp+0x73],dh
  409cf2:	gs and BYTE PTR fs:[rdi+0x68],dh
  409cf7:	outs   dx,BYTE PTR gs:[rsi]
  409cf9:	and    BYTE PTR [rax+0x6f],dl
  409cfc:	jae    0x409d72
  409cfe:	addr32 jb 0x409d66
  409d01:	push   rbx
  409d02:	push   rcx
  409d03:	rex.WR and BYTE PTR [rdi+0x61],r14b
  409d07:	jae    0x409d29
  409d09:	(bad)  
  409d0a:	jne    0x409d75
  409d0c:	ins    BYTE PTR es:[rdi],dx
  409d0d:	je     0x409d19
  409d0f:	add    BYTE PTR [rax],ah
  409d11:	and    BYTE PTR [rip+0x7265762d],ch        # 0x72a61344
  409d17:	jae    0x409d82
  409d19:	outs   dx,DWORD PTR ds:[rsi]
  409d1a:	outs   dx,BYTE PTR ds:[rsi]
  409d1b:	and    BYTE PTR [rax],ah
  409d1d:	and    BYTE PTR [rax],ah
  409d1f:	and    BYTE PTR [rax],ah
  409d21:	and    BYTE PTR [rax],ah
  409d23:	and    BYTE PTR [rax],ah
  409d25:	and    BYTE PTR [rax],ah
  409d27:	and    BYTE PTR [rbx+0x68],dh
  409d2a:	outs   dx,DWORD PTR ds:[rsi]
  409d2b:	ja     0x409d4d
  409d2d:	je     0x409d97
  409d2f:	and    BYTE PTR gs:[rax+0x6f],dl
  409d33:	jae    0x409da9
  409d35:	addr32 jb 0x409d9d
  409d38:	push   rbx
  409d39:	push   rcx
  409d3a:	rex.WR and BYTE PTR [rsi+0x65],r14b
  409d3e:	jb     0x409db3
  409d40:	imul   ebp,DWORD PTR [rdi+0x6e],0xa
  409d47:	add    BYTE PTR [rax],ah
  409d49:	and    BYTE PTR [rip+0x2d202c3f],ch        # 0x2d60c98e
  409d4f:	sub    eax,0x706c6568
  409d54:	and    BYTE PTR [rax],ah
  409d56:	and    BYTE PTR [rax],ah
  409d58:	and    BYTE PTR [rax],ah
  409d5a:	and    BYTE PTR [rax],ah
  409d5c:	and    BYTE PTR [rax],ah
  409d5e:	and    BYTE PTR [rax],ah
  409d60:	jae    0x409dca
  409d62:	outs   dx,DWORD PTR ds:[rsi]
  409d63:	ja     0x409d85
  409d65:	je     0x409dcf
  409d67:	imul   esi,DWORD PTR [rbx+0x20],0x706c6568
  409d6e:	sub    al,0x20
  409d70:	je     0x409dda
  409d72:	outs   dx,BYTE PTR gs:[rsi]
  409d74:	and    BYTE PTR [rbp+0x78],ah
  409d77:	imul   esi,DWORD PTR [rdx+rcx*1+0x0],0x0
  409d7f:	add    BYTE PTR [rdx],cl
  409d81:	push   rdi
  409d82:	imul   esi,DWORD PTR [rax+rbp*2+0x20],0x61206f6e
  409d8a:	jb     0x409df3
  409d8c:	jne    0x409dfb
  409d8e:	outs   dx,BYTE PTR gs:[rsi]
  409d90:	je     0x409e05
  409d92:	sub    al,0x20
  409d94:	(bad)  
  409d95:	ins    BYTE PTR es:[rdi],dx
  409d96:	ins    BYTE PTR es:[rdi],dx
  409d97:	and    BYTE PTR [rbx+0x6e],ch
  409d9a:	outs   dx,DWORD PTR ds:[rsi]
  409d9b:	ja     0x409e0b
  409d9d:	and    BYTE PTR [rcx+0x74],ch
  409da0:	gs ins DWORD PTR es:[rdi],dx
  409da2:	jae    0x409dc4
  409da4:	(bad)  
  409da5:	jb     0x409e0c
  409da7:	and    BYTE PTR [rbx+0x68],dh
  409daa:	outs   dx,DWORD PTR ds:[rsi]
  409dab:	ja     0x409e1b
  409dad:	or     cl,BYTE PTR cs:[rdx]
	...
  409db8:	push   rdx
  409db9:	gs jo  0x409e2b
  409dbc:	jb     0x409e32
  409dbe:	and    BYTE PTR [rdx+0x75],ah
  409dc1:	addr32 jae 0x409de4
  409dc4:	je     0x409e35
  409dc6:	and    BYTE PTR [rax+rsi*2],bh
  409dc9:	addr32 jae 0x409e3d
  409dcc:	ins    BYTE PTR es:[rdi],dx
  409dcd:	sub    eax,0x73677562
  409dd2:	rex jo 0x409e44
  409dd5:	jae    0x409e4b
  409dd7:	addr32 jb 0x409e3f
  409dda:	jae    0x409e4d
  409ddc:	ins    BYTE PTR es:[rdi],dx
  409ddd:	outs   dx,DWORD PTR cs:[rsi]
  409ddf:	jb     0x409e48
  409de1:	ds or  al,BYTE PTR cs:[rax]
  409de5:	add    BYTE PTR [rax],al
  409de7:	add    BYTE PTR [rip+0x63203a73],ah        # 0x6360d860
  409ded:	outs   dx,DWORD PTR ds:[rsi]
  409dee:	jne    0x409e5c
  409df0:	and    BYTE PTR fs:[rsi+0x6f],ch
  409df4:	je     0x409e16
  409df6:	imul   bp,WORD PTR [rsi+0x64],0x6f20
  409dfc:	ja     0x409e6c
  409dfe:	and    BYTE PTR [rax+0x72],dh
  409e01:	outs   dx,DWORD PTR ds:[rsi]
  409e02:	addr32 jb 0x409e66
  409e05:	ins    DWORD PTR es:[rdi],dx
  409e06:	and    BYTE PTR [rbp+0x78],ah
  409e09:	movsxd esi,DWORD PTR gs:[rbp+0x74]
  409e0d:	(bad)  
  409e0e:	(bad)  
  409e0f:	ins    BYTE PTR es:[rdi],dx
  409e10:	or     al,BYTE PTR gs:[rax]
  409e13:	and    eax,0x69203a73
  409e18:	outs   dx,BYTE PTR ds:[rsi]
  409e19:	jbe    0x409e7c
  409e1b:	ins    BYTE PTR es:[rdi],dx
  409e1c:	imul   esp,DWORD PTR [rax+riz*1+0x61],0x6d756772
  409e24:	outs   dx,BYTE PTR gs:[rsi]
  409e26:	je     0x409e62
  409e28:	and    BYTE PTR [rip+0xa73],ah        # 0x40a8a1
  409e2e:	add    BYTE PTR [rax],al
  409e30:	push   rsp
  409e31:	jb     0x409eac
  409e33:	and    BYTE PTR [rdx],ah
  409e35:	and    eax,0x2d2d2073
  409e3a:	push   0x22706c65
  409e3f:	and    BYTE PTR [rsi+0x6f],ah
  409e42:	jb     0x409e64
  409e44:	ins    DWORD PTR es:[rdi],dx
  409e45:	outs   dx,DWORD PTR ds:[rsi]
  409e46:	jb     0x409ead
  409e48:	and    BYTE PTR [rcx+0x6e],ch
  409e4b:	outs   dx,WORD PTR ds:[rsi]
  409e4d:	jb     0x409ebc
  409e4f:	(bad)  
  409e50:	je     0x409ebb
  409e52:	outs   dx,DWORD PTR ds:[rsi]
  409e53:	outs   dx,BYTE PTR ds:[rsi]
  409e54:	or     al,BYTE PTR cs:[rax]
  409e57:	sub    eax,0x636f642d
  409e5c:	imul   esi,DWORD PTR fs:[rdx+0x0],0x74682d2d
  409e64:	ins    DWORD PTR es:[rdi],dx
  409e65:	ins    BYTE PTR es:[rdi],dx
  409e66:	imul   esi,DWORD PTR fs:[rdx+0x0],0x6e692d2d
  409e6e:	movsxd ebp,DWORD PTR [rbp+rsi*2+0x64]
  409e72:	gs imul esi,DWORD PTR fs:[rdx+0x0],0x6b702d2d
  409e7b:	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
  409e83:	imul   esi,DWORD PTR fs:[rdx+0x0],0x6e692d2d
  409e8b:	movsxd ebp,DWORD PTR [rbp+rsi*2+0x64]
  409e8f:	gs imul esi,DWORD PTR fs:[rdx+0x2d],0x76726573
  409e98:	gs jb  0x409e9b
  409e9b:	sub    eax,0x62696c2d
  409ea0:	imul   esi,DWORD PTR fs:[rdx+0x0],0x6b702d2d
  409ea8:	ins    BYTE PTR es:[edi],dx
  409eaa:	imul   esp,DWORD PTR [rdx+0x64],0x2d007269
  409eb1:	sub    eax,0x61636f6c
  409eb6:	ins    BYTE PTR es:[rdi],dx
  409eb7:	gs imul esi,DWORD PTR fs:[rdx+0x0],0x616d2d2d
  409ec0:	outs   dx,BYTE PTR ds:[rsi]
  409ec1:	imul   esi,DWORD PTR fs:[rdx+0x0],0x68732d2d
  409ec9:	(bad)  
  409eca:	jb     0x409f31
  409ecc:	imul   esi,DWORD PTR fs:[rdx+0x0],0x79732d2d
  409ed4:	jae    0x409f39
  409ed6:	outs   dx,DWORD PTR ds:[rsi]
  409ed7:	outs   dx,BYTE PTR ds:[rsi]
  409ed8:	imul   si,WORD PTR fs:[rdx+0x0],0x2d2d
  409edf:	jo     0x409f48
  409ee1:	js     0x409f56
  409ee3:	add    BYTE PTR [rip+0x6e6f632d],ch        # 0x6eb00216
  409ee9:	imul   sp,WORD PTR [rdi+0x75],0x6572
  409eef:	add    BYTE PTR [rip+0x63632d],ch        # 0xa40222
  409ef5:	sub    eax,0x7070632d
  409efa:	data16 ins BYTE PTR es:[rdi],dx
  409efc:	(bad)  
  409efd:	addr32 jae 0x409f00
  409f00:	sub    eax,0x6c66632d
  409f05:	(bad)  
  409f06:	addr32 jae 0x409f09
  409f09:	sub    eax,0x6c66632d
  409f0e:	(bad)  
  409f0f:	addr32 jae 0x409f71
  409f12:	jae    0x409f80
  409f14:	add    BYTE PTR [rip+0x66646c2d],ch        # 0x66a50b47
  409f1a:	ins    BYTE PTR es:[rdi],dx
  409f1b:	(bad)  
  409f1c:	addr32 jae 0x409f1f
  409f1f:	sub    eax,0x66646c2d
  409f24:	ins    BYTE PTR es:[rdi],dx
  409f25:	(bad)  
  409f26:	addr32 jae 0x409f88
  409f29:	gs js  0x409f2c
  409f2c:	sub    eax,0x66646c2d
  409f31:	ins    BYTE PTR es:[rdi],dx
  409f32:	(bad)  
  409f33:	addr32 jae 0x409f95
  409f36:	jae    0x409fa4
  409f38:	add    BYTE PTR [rip+0x62696c2d],ch        # 0x62aa0b6b
  409f3e:	jae    0x409f40
  409f40:	sub    eax,0x7265762d
  409f45:	jae    0x409fb0
  409f47:	outs   dx,DWORD PTR ds:[rsi]
  409f48:	outs   dx,BYTE PTR ds:[rsi]
	...
  409f7d:	add    BYTE PTR [rax],al
  409f7f:	add    ch,ch
  409f81:	xchg   ebp,eax
  409f82:	add    BYTE PTR [rax],al
  409f85:	add    BYTE PTR [rax],al
  409f87:	add    BYTE PTR [rax+0x1b],al
  409f8a:	add    BYTE PTR [rax],al
  409f8d:	add    BYTE PTR [rax],al
  409f8f:	add    BYTE PTR [rdi-0x62],dl
  409f92:	add    BYTE PTR [rax],al
  409f95:	add    BYTE PTR [rax],al
  409f97:	add    al,dh
  409f99:	sbb    al,BYTE PTR [rax+0x0]
  409f9c:	add    BYTE PTR [rax],al
  409f9e:	add    BYTE PTR [rax],al
  409fa0:	(bad)  
  409fa1:	sahf   
  409fa2:	add    BYTE PTR [rax],al
  409fa5:	add    BYTE PTR [rax],al
  409fa7:	add    BYTE PTR [rax+0x401a],ah
  409fad:	add    BYTE PTR [rax],al
  409faf:	add    BYTE PTR [rdx-0x62],ch
  409fb2:	add    BYTE PTR [rax],al
  409fb5:	add    BYTE PTR [rax],al
  409fb7:	add    BYTE PTR [rax+0x1a],dl
  409fba:	add    BYTE PTR [rax],al
  409fbd:	add    BYTE PTR [rax],al
  409fbf:	add    BYTE PTR [rdi-0x62],dh
  409fc2:	add    BYTE PTR [rax],al
  409fc5:	add    BYTE PTR [rax],al
  409fc7:	add    BYTE PTR [rax],al
  409fc9:	sbb    al,BYTE PTR [rax+0x0]
  409fcc:	add    BYTE PTR [rax],al
  409fce:	add    BYTE PTR [rax],al
  409fd0:	xchg   DWORD PTR [rsi+0x40],ebx
  409fd6:	add    BYTE PTR [rax],al
  409fd8:	mov    al,0x19
  409fda:	add    BYTE PTR [rax],al
  409fdd:	add    BYTE PTR [rax],al
  409fdf:	add    BYTE PTR [rbx+0x409e],bl
  409fe5:	add    BYTE PTR [rax],al
  409fe7:	add    BYTE PTR [rax+0x19],ah
  409fea:	add    BYTE PTR [rax],al
  409fed:	add    BYTE PTR [rax],al
  409fef:	add    BYTE PTR [rsi+rbx*4+0x40],ah
  409ff6:	add    BYTE PTR [rax],al
  409ff8:	rcl    BYTE PTR [rdi],1
  409ffa:	add    BYTE PTR [rax],al
  409ffd:	add    BYTE PTR [rax],al
  409fff:	add    BYTE PTR [rax+0x409e],dh
  40a005:	add    BYTE PTR [rax],al
  40a007:	add    BYTE PTR [rax],dl
  40a009:	sbb    DWORD PTR [rax+0x0],eax
  40a00c:	add    BYTE PTR [rax],al
  40a00e:	add    BYTE PTR [rax],al
  40a010:	mov    esp,0x409e
  40a015:	add    BYTE PTR [rax],al
  40a017:	add    al,al
  40a019:	sbb    BYTE PTR [rax+0x0],al
  40a01c:	add    BYTE PTR [rax],al
  40a01e:	add    BYTE PTR [rax],al
  40a020:	(bad)
  40a023:	add    BYTE PTR [rax],al
  40a025:	add    BYTE PTR [rax],al
  40a027:	add    BYTE PTR [rax+0x18],dh
  40a02a:	add    BYTE PTR [rax],al
  40a02d:	add    BYTE PTR [rax],al
  40a02f:	add    al,dl
  40a031:	sahf   
  40a032:	add    BYTE PTR [rax],al
  40a035:	add    BYTE PTR [rax],al
  40a037:	add    BYTE PTR [rax],ah
  40a039:	sbb    BYTE PTR [rax+0x0],al
  40a03c:	add    BYTE PTR [rax],al
  40a03e:	add    BYTE PTR [rax],al
  40a040:	fstp   QWORD PTR [rsi+0x40]
  40a046:	add    BYTE PTR [rax],al
  40a048:	(bad)  
  40a049:	(bad)  
  40a04a:	add    BYTE PTR [rax],al
  40a04d:	add    BYTE PTR [rax],al
  40a04f:	add    ah,ah
  40a051:	sahf   
  40a052:	add    BYTE PTR [rax],al
  40a055:	add    BYTE PTR [rax],al
  40a057:	add    al,ah
  40a059:	(bad)  
  40a05a:	add    BYTE PTR [rax],al
  40a05d:	add    BYTE PTR [rax],al
  40a05f:	add    al,dh
  40a061:	sahf   
  40a062:	add    BYTE PTR [rax],al
  40a065:	add    BYTE PTR [rax],al
  40a067:	add    BYTE PTR [rax+0x4016],dh
  40a06d:	add    BYTE PTR [rax],al
  40a06f:	add    ch,dh
  40a071:	sahf   
  40a072:	add    BYTE PTR [rax],al
  40a075:	add    BYTE PTR [rax],al
  40a077:	add    BYTE PTR [rax+0x4016],al
  40a07d:	add    BYTE PTR [rax],al
  40a07f:	add    BYTE PTR [rax],al
  40a081:	lahf   
  40a082:	add    BYTE PTR [rax],al
  40a085:	add    BYTE PTR [rax],al
  40a087:	add    BYTE PTR [rax+0x16],dl
  40a08a:	add    BYTE PTR [rax],al
  40a08d:	add    BYTE PTR [rax],al
  40a08f:	add    BYTE PTR [rcx],cl
  40a091:	lahf   
  40a092:	add    BYTE PTR [rax],al
  40a095:	add    BYTE PTR [rax],al
  40a097:	add    BYTE PTR [rax],ah
  40a099:	(bad)  
  40a09a:	add    BYTE PTR [rax],al
  40a09d:	add    BYTE PTR [rax],al
  40a09f:	add    BYTE PTR [rip+0x409f],dl        # 0x40e144
  40a0a5:	add    BYTE PTR [rax],al
  40a0a7:	add    al,dh
  40a0a9:	adc    eax,0x40
  40a0ae:	add    BYTE PTR [rax],al
  40a0b0:	(bad)  
  40a0b1:	lahf   
  40a0b2:	add    BYTE PTR [rax],al
  40a0b5:	add    BYTE PTR [rax],al
  40a0b7:	add    al,al
  40a0b9:	adc    eax,0x40
  40a0be:	add    BYTE PTR [rax],al
  40a0c0:	sub    al,0x9f
  40a0c2:	add    BYTE PTR [rax],al
  40a0c5:	add    BYTE PTR [rax],al
  40a0c7:	add    BYTE PTR [rax+0x4015],dl
  40a0cd:	add    BYTE PTR [rax],al
  40a0cf:	add    BYTE PTR [rcx],bh
  40a0d1:	lahf   
  40a0d2:	add    BYTE PTR [rax],al
  40a0d5:	add    BYTE PTR [rax],al
  40a0d7:	add    BYTE PTR [rax+0x15],ah
  40a0da:	add    BYTE PTR [rax],al
  40a0dd:	add    BYTE PTR [rax],al
  40a0df:	add    BYTE PTR [rax-0x61],al
  40a0e2:	add    BYTE PTR [rax],al
  40a0e5:	add    BYTE PTR [rax],al
  40a0e7:	add    BYTE PTR [rax],dh
  40a0e9:	adc    eax,0x40
	...
  40a0fe:	add    BYTE PTR [rax],al
  40a100:	cs gs js 0x40a169
  40a104:	add    BYTE PTR [rax],al
  40a106:	add    BYTE PTR [rax],al
  40a108:	movsxd ebp,DWORD PTR [rdi+0x75]
  40a10b:	ins    BYTE PTR es:[rdi],dx
  40a10c:	and    BYTE PTR fs:[rsi+0x6f],ch
  40a110:	je     0x40a132
  40a112:	imul   esp,DWORD PTR [rbp+riz*2+0x6e],0x79666974
  40a11a:	and    BYTE PTR [rbx+0x75],ah
  40a11d:	jb     0x40a191
  40a11f:	outs   dx,BYTE PTR gs:[rsi]
  40a121:	je     0x40a143
  40a123:	imul   esi,DWORD PTR fs:[rdx+0x65],0x726f7463
  40a12b:	jns    0x40a167
  40a12d:	and    BYTE PTR [rip+0x6e690073],ah        # 0x6ea9a1a6
  40a133:	jbe    0x40a196
  40a135:	ins    BYTE PTR es:[rdi],dx
  40a136:	imul   esp,DWORD PTR [rax+riz*1+0x62],0x72616e69
  40a13e:	jns    0x40a160
  40a140:	and    ah,BYTE PTR [rip+0x50002273]        # 0x5040c3b9
  40a146:	push   r12
  40a148:	rex.W add BYTE PTR [rax],al
  40a14b:	add    BYTE PTR [rax],al
  40a14d:	add    BYTE PTR [rax],al
  40a14f:	add    BYTE PTR [rbx+0x6f],ah
  40a152:	jne    0x40a1c0
  40a154:	and    BYTE PTR fs:[rsi+0x6f],ch
  40a158:	je     0x40a17a
  40a15a:	imul   bp,WORD PTR [rsi+0x64],0x6120
  40a160:	and    BYTE PTR [rdx],ah
  40a162:	and    eax,0x74202273
  40a167:	outs   dx,DWORD PTR ds:[rsi]
  40a168:	and    BYTE PTR [rbp+0x78],ah
  40a16b:	movsxd esi,DWORD PTR gs:[rbp+0x74]
  40a16f:	add    BYTE PTR gs:[rbx+0x6f],ah
  40a173:	jne    0x40a1e1
  40a175:	and    BYTE PTR fs:[rsi+0x6f],ch
  40a179:	je     0x40a19b
  40a17b:	jb     0x40a1e2
  40a17d:	(bad)  
  40a17e:	and    BYTE PTR fs:[rdx+0x69],ah
  40a182:	outs   dx,BYTE PTR ds:[rsi]
  40a183:	(bad)  
  40a184:	jb     0x40a1ff
  40a186:	and    BYTE PTR [rdx],ah
  40a188:	and    eax,0x2f002273
  40a18d:	and    eax,0x732573
  40a192:	and    ah,BYTE PTR [rip+0x2d202273]        # 0x2d60c40b
  40a198:	push   rsi
  40a199:	add    BYTE PTR [rax+0x63],dh
  40a19c:	ins    BYTE PTR es:[rdi],dx
  40a19d:	outs   dx,DWORD PTR ds:[rsi]
  40a19e:	jae    0x40a205
  40a1a0:	and    BYTE PTR [rsi+0x61],ah
  40a1a3:	imul   ebp,DWORD PTR [rbp+riz*2+0x64],0x7325203a
  40a1ab:	add    BYTE PTR [rip+0x6f700073],ah        # 0x6fb0a224
  40a1b1:	jae    0x40a227
  40a1b3:	addr32 jb 0x40a21b
  40a1b6:	jae    0x40a1e5
  40a1b8:	cmp    DWORD PTR [rsi],ebp
  40a1ba:	xor    al,0x0
  40a1bc:	add    BYTE PTR [rax+0x47],dl
  40a1bf:	push   rbx
  40a1c0:	pop    rcx
  40a1c1:	push   rbx
  40a1c2:	rex.XB
  40a1c3:	rex.WRXB
  40a1c4:	rex.WRX
  40a1c5:	rex.RX
  40a1c6:	rex.R
  40a1c7:	rex.WB push r10
  40a1c9:	add    BYTE PTR [rax+0x47],dl
  40a1cc:	push   rbx
  40a1cd:	pop    rcx
  40a1ce:	push   rbx
  40a1cf:	rex.XB
  40a1d0:	rex.WRXB
  40a1d1:	rex.WRX
  40a1d2:	rex.RX
  40a1d3:	rex.R
  40a1d4:	rex.WB push r10
  40a1d6:	cmp    eax,0x7325
  40a1db:	add    BYTE PTR [rax],al
  40a1dd:	add    BYTE PTR [rax],al
  40a1df:	add    BYTE PTR [rbx+0x6f],ah
  40a1e2:	jne    0x40a250
  40a1e4:	and    BYTE PTR fs:[rsi+0x6f],ch
  40a1e8:	je     0x40a20a
  40a1ea:	(bad)  
  40a1eb:	ins    BYTE PTR es:[rdi],dx
  40a1ec:	ins    BYTE PTR es:[rdi],dx
  40a1ed:	outs   dx,DWORD PTR ds:[rsi]
  40a1ee:	movsxd esp,DWORD PTR [rcx+0x74]
  40a1f1:	and    BYTE PTR gs:[rip+0x6220756c],ah        # 0x62611764
  40a1f8:	jns    0x40a26e
  40a1fa:	gs jae 0x40a21d
  40a1fd:	outs   dx,DWORD PTR ds:[rsi]
  40a1fe:	data16 and BYTE PTR [rbp+0x65],ch
  40a202:	ins    DWORD PTR es:[rdi],dx
  40a203:	outs   dx,DWORD PTR ds:[rsi]
  40a204:	jb     0x40a27f
  40a206:	add    BYTE PTR [rax],al
  40a208:	movsxd ebp,DWORD PTR [rdi+0x75]
  40a20b:	ins    BYTE PTR es:[rdi],dx
  40a20c:	and    BYTE PTR fs:[rsi+0x6f],ch
  40a210:	je     0x40a232
  40a212:	addr32 gs je 0x40a236
  40a216:	je     0x40a287
  40a218:	imul   esp,DWORD PTR [rbp+0x6e],0x20
  40a21c:	imul   ebp,DWORD PTR [rsi+0x66],0x616d726f
  40a223:	je     0x40a28e
  40a225:	outs   dx,DWORD PTR ds:[rsi]
  40a226:	outs   dx,BYTE PTR ds:[rsi]
  40a227:	cmp    ah,BYTE PTR [rax]
  40a229:	gs jb  0x40a29e
  40a22c:	outs   dx,DWORD PTR ds:[rsi]
  40a22d:	jb     0x40a24f
  40a22f:	movsxd ebp,DWORD PTR [rdi+0x64]
  40a232:	and    BYTE PTR gs:[rip+0x6300756c],ah        # 0x634117a5
  40a239:	outs   dx,DWORD PTR ds:[rsi]
  40a23a:	jne    0x40a2a8
  40a23c:	and    BYTE PTR fs:[rsi+0x6f],ch
  40a240:	je     0x40a262
  40a242:	addr32 gs je 0x40a266
  40a246:	je     0x40a2b7
  40a248:	imul   esp,DWORD PTR [rbp+0x6e],0x20
  40a24c:	imul   ebp,DWORD PTR [rsi+0x66],0x616d726f
  40a253:	je     0x40a2be
  40a255:	outs   dx,DWORD PTR ds:[rsi]
  40a256:	outs   dx,BYTE PTR ds:[rsi]
  40a257:	and    BYTE PTR [rdx+0x75],ah
  40a25a:	data16 data16 gs jb 0x40a27f
  40a25f:	jae    0x40a2ca
  40a261:	jp     0x40a2c8
  40a263:	cmp    ah,BYTE PTR [rax]
  40a265:	gs jb  0x40a2da
  40a268:	outs   dx,DWORD PTR ds:[rsi]
  40a269:	jb     0x40a28b
  40a26b:	movsxd ebp,DWORD PTR [rdi+0x64]
  40a26e:	and    BYTE PTR gs:[rip+0x756c],ah        # 0x4117e1
  40a275:	add    BYTE PTR [rax],al
  40a277:	add    BYTE PTR [rbx+0x6f],ah
  40a27a:	jne    0x40a2e8
  40a27c:	and    BYTE PTR fs:[rsi+0x6f],ch
  40a280:	je     0x40a2a2
  40a282:	addr32 gs je 0x40a2a6
  40a286:	rex.B
  40a287:	rex.XB
  40a288:	rex.WR and BYTE PTR [rcx+0x6e],r13b
  40a28c:	outs   dx,WORD PTR ds:[rsi]
  40a28e:	jb     0x40a2fd
  40a290:	(bad)  
  40a291:	je     0x40a2fc
  40a293:	outs   dx,DWORD PTR ds:[rsi]
  40a294:	outs   dx,BYTE PTR ds:[rsi]
  40a295:	cmp    ah,BYTE PTR [rax]
  40a297:	gs jb  0x40a30c
  40a29a:	outs   dx,DWORD PTR ds:[rsi]
  40a29b:	jb     0x40a2bd
  40a29d:	movsxd ebp,DWORD PTR [rdi+0x64]
  40a2a0:	and    BYTE PTR gs:[rip+0x756c],ah        # 0x411813
  40a2a7:	add    BYTE PTR [rbx+0x6f],ah
  40a2aa:	jne    0x40a318
  40a2ac:	and    BYTE PTR fs:[rsi+0x6f],ch
  40a2b0:	je     0x40a2d2
  40a2b2:	imul   ebp,DWORD PTR [rsi+0x69],0x6c616974
  40a2b9:	imul   edi,DWORD PTR [rdx+0x65],0x4c434120
  40a2c0:	cmp    ah,BYTE PTR [rax]
  40a2c2:	gs jb  0x40a337
  40a2c5:	outs   dx,DWORD PTR ds:[rsi]
  40a2c6:	jb     0x40a2e8
  40a2c8:	movsxd ebp,DWORD PTR [rdi+0x64]
  40a2cb:	and    BYTE PTR gs:[rip+0x756c],ah        # 0x41183e
  40a2d2:	add    BYTE PTR [rax],al
  40a2d4:	add    BYTE PTR [rax],al
  40a2d6:	add    BYTE PTR [rax],al
  40a2d8:	movsxd ebp,DWORD PTR [rdi+0x75]
  40a2db:	ins    BYTE PTR es:[rdi],dx
  40a2dc:	and    BYTE PTR fs:[rsi+0x6f],ch
  40a2e0:	je     0x40a302
  40a2e2:	addr32 gs je 0x40a306
  40a2e6:	rex.B
  40a2e7:	rex.XB
  40a2e8:	cmp    r12b,BYTE PTR [r8]
  40a2eb:	gs jb  0x40a360
  40a2ee:	outs   dx,DWORD PTR ds:[rsi]
  40a2ef:	jb     0x40a311
  40a2f1:	movsxd ebp,DWORD PTR [rdi+0x64]
  40a2f4:	and    BYTE PTR gs:[rip+0x756c],ah        # 0x411867
  40a2fb:	add    BYTE PTR [rax],al
  40a2fd:	add    BYTE PTR [rax],al
  40a2ff:	add    BYTE PTR [rbx+0x6f],ah
  40a302:	jne    0x40a370
  40a304:	and    BYTE PTR fs:[rsi+0x6f],ch
  40a308:	je     0x40a32a
  40a30a:	(bad)  
  40a30b:	fs and BYTE PTR fs:[rcx+0x43],al
  40a310:	cmp    r12b,BYTE PTR [r8]
  40a313:	gs jb  0x40a388
  40a316:	outs   dx,DWORD PTR ds:[rsi]
  40a317:	jb     0x40a339
  40a319:	movsxd ebp,DWORD PTR [rdi+0x64]
  40a31c:	and    BYTE PTR gs:[rip+0x756c],ah        # 0x41188f
  40a323:	add    BYTE PTR [rax],al
  40a325:	add    BYTE PTR [rax],al
  40a327:	add    BYTE PTR [rbx+0x6f],ah
  40a32a:	jne    0x40a398
  40a32c:	and    BYTE PTR fs:[rsi+0x6f],ch
  40a330:	je     0x40a352
  40a332:	(bad)  
  40a333:	fs and BYTE PTR fs:[rcx+0x63],ah
  40a338:	movsxd esp,DWORD PTR [rbp+0x73]
  40a33b:	jae    0x40a35d
  40a33d:	(bad)  
  40a33e:	ins    BYTE PTR es:[rdi],dx
  40a33f:	ins    BYTE PTR es:[rdi],dx
  40a340:	outs   dx,DWORD PTR ds:[rsi]
  40a341:	ja     0x40a3a8
  40a343:	and    BYTE PTR fs:[rcx+0x43],al
  40a347:	cmp    r12b,BYTE PTR [r8]
  40a34a:	gs jb  0x40a3bf
  40a34d:	outs   dx,DWORD PTR ds:[rsi]
  40a34e:	jb     0x40a370
  40a350:	movsxd ebp,DWORD PTR [rdi+0x64]
  40a353:	and    BYTE PTR gs:[rip+0x756c],ah        # 0x4118c6
  40a35a:	add    BYTE PTR [rax],al
  40a35c:	add    BYTE PTR [rax],al
  40a35e:	add    BYTE PTR [rax],al
  40a360:	movsxd ebp,DWORD PTR [rdi+0x75]
  40a363:	ins    BYTE PTR es:[rdi],dx
  40a364:	and    BYTE PTR fs:[rsi+0x6f],ch
  40a368:	je     0x40a38a
  40a36a:	jae    0x40a3d1
  40a36c:	je     0x40a38e
  40a36e:	je     0x40a3df
  40a370:	imul   esp,DWORD PTR [rbp+0x6e],0x20
  40a374:	imul   ebp,DWORD PTR [rsi+0x66],0x616d726f
  40a37b:	je     0x40a3e6
  40a37d:	outs   dx,DWORD PTR ds:[rsi]
  40a37e:	outs   dx,BYTE PTR ds:[rsi]
  40a37f:	cmp    ah,BYTE PTR [rax]
  40a381:	gs jb  0x40a3f6
  40a384:	outs   dx,DWORD PTR ds:[rsi]
  40a385:	jb     0x40a3a7
  40a387:	movsxd ebp,DWORD PTR [rdi+0x64]
  40a38a:	and    BYTE PTR gs:[rip+0x6300756c],ah        # 0x634118fd
  40a391:	outs   dx,DWORD PTR ds:[rsi]
  40a392:	jne    0x40a400
  40a394:	and    BYTE PTR fs:[rsi+0x6f],ch
  40a398:	je     0x40a3ba
  40a39a:	addr32 gs je 0x40a3be
  40a39e:	jne    0x40a413
  40a3a0:	gs jb  0x40a3c3
  40a3a3:	je     0x40a414
  40a3a5:	imul   esp,DWORD PTR [rbp+0x6e],0x3a
  40a3a9:	and    BYTE PTR [rbp+0x72],ah
  40a3ac:	jb     0x40a41d
  40a3ae:	jb     0x40a3d0
  40a3b0:	movsxd ebp,DWORD PTR [rdi+0x64]
  40a3b3:	and    BYTE PTR gs:[rip+0x756c],ah        # 0x411926
  40a3ba:	add    BYTE PTR [rax],al
  40a3bc:	add    BYTE PTR [rax],al
  40a3be:	add    BYTE PTR [rax],al
  40a3c0:	movsxd ebp,DWORD PTR [rdi+0x6d]
  40a3c3:	ins    DWORD PTR es:[rdi],dx
  40a3c4:	(bad)  
  40a3c5:	outs   dx,BYTE PTR ds:[rsi]
  40a3c6:	and    BYTE PTR fs:[rsi+0x6f],ch
  40a3ca:	je     0x40a3ec
  40a3cc:	gs js  0x40a434
  40a3cf:	movsxd esi,DWORD PTR [rbp+0x74]
  40a3d2:	(bad)  
  40a3d3:	(bad)  
  40a3d4:	ins    BYTE PTR es:[rdi],dx
  40a3d5:	add    BYTE PTR gs:[rbx+0x6f],ah
  40a3d9:	ins    DWORD PTR es:[rdi],dx
  40a3da:	ins    DWORD PTR es:[rdi],dx
  40a3db:	(bad)  
  40a3dc:	outs   dx,BYTE PTR ds:[rsi]
  40a3dd:	and    BYTE PTR fs:[rsi+0x6f],ch
  40a3e1:	je     0x40a403
  40a3e3:	outs   dx,WORD PTR ds:[rsi]
  40a3e5:	jne    0x40a455
  40a3e7:	add    BYTE PTR fs:[rax],al
  40a3ea:	add    BYTE PTR [rax],al
  40a3ec:	add    BYTE PTR [rax],al
  40a3ee:	add    BYTE PTR [rax],al
  40a3f0:	movsxd ebp,DWORD PTR [rax+0x69]
  40a3f3:	ins    BYTE PTR es:[rdi],dx
  40a3f4:	and    BYTE PTR fs:[rax+0x72],dh
  40a3f8:	outs   dx,DWORD PTR ds:[rsi]
  40a3f9:	movsxd esp,DWORD PTR [rbp+0x73]
  40a3fc:	jae    0x40a41e
  40a3fe:	gs js  0x40a46a
  40a401:	je     0x40a468
  40a403:	and    BYTE PTR fs:[rdi+0x69],dh
  40a407:	je     0x40a471
  40a409:	and    BYTE PTR [rbp+0x78],ah
  40a40c:	imul   esi,DWORD PTR [rax+riz*1+0x63],0x2065646f
  40a414:	and    eax,0x63000064
  40a419:	push   0x20646c69
  40a41e:	jo     0x40a492
  40a420:	outs   dx,DWORD PTR ds:[rsi]
  40a421:	movsxd esp,DWORD PTR [rbp+0x73]
  40a424:	jae    0x40a446
  40a426:	ja     0x40a489
  40a428:	jae    0x40a44a
  40a42a:	je     0x40a491
  40a42c:	jb     0x40a49b
  40a42e:	imul   ebp,DWORD PTR [rsi+0x61],0x20646574
  40a435:	(bad)  
  40a436:	jns    0x40a458
  40a438:	gs js  0x40a49e
  40a43b:	gs jo  0x40a4b2
  40a43e:	imul   ebp,DWORD PTR [rdi+0x6e],0x25783020
  40a445:	pop    rax
	...
  40a44e:	add    BYTE PTR [rax],al
  40a450:	outs   dx,DWORD PTR ds:[rsi]
  40a451:	jne    0x40a4c7
  40a453:	and    BYTE PTR [rdi+0x66],ch
  40a456:	and    BYTE PTR [rbp+0x65],ch
  40a459:	ins    DWORD PTR es:[rdi],dx
  40a45a:	outs   dx,DWORD PTR ds:[rsi]
  40a45b:	jb     0x40a4d6
  40a45d:	or     al,BYTE PTR [rax]
  40a45f:	add    BYTE PTR [rbx+0x61],ah
  40a462:	outs   dx,BYTE PTR ds:[rsi]
  40a463:	outs   dx,BYTE PTR ds:[rsi]
  40a464:	outs   dx,DWORD PTR ds:[rsi]
  40a465:	je     0x40a487
  40a467:	fs jne 0x40a4da
  40a46a:	ins    BYTE PTR es:[rdi],dx
  40a46b:	imul   esp,DWORD PTR [rbx+0x61],0x6e206574
  40a472:	jne    0x40a4e0
  40a474:	ins    BYTE PTR es:[rdi],dx
  40a475:	and    BYTE PTR [rax+0x6f],dh
  40a478:	imul   ebp,DWORD PTR [rsi+0x74],0x28207265
  40a47f:	imul   ebp,DWORD PTR [rsi+0x74],0x616e7265
  40a486:	ins    BYTE PTR es:[rdi],dx
  40a487:	and    BYTE PTR [rbp+0x72],ah
  40a48a:	jb     0x40a4fb
  40a48c:	jb     0x40a4b7
  40a48e:	or     al,BYTE PTR [rax]
  40a490:	and    eax,0x3d73
	...
  40a4bd:	add    BYTE PTR [rax],al
  40a4bf:	add    BYTE PTR [rsi+0x6f],cl
  40a4c2:	jb     0x40a53b
  40a4c4:	imul   esp,DWORD PTR gs:[ecx+0x6e],0x6f422820
  40a4cd:	imul   ebp,DWORD PTR [rbp+0x0],0x6c
  40a4d1:	sub    DWORD PTR [rdi+0x4e],ebx
  40a4d4:	outs   dx,DWORD PTR ds:[rsi]
  40a4d5:	jb     0x40a54e
  40a4d7:	(bad)  
  40a4d8:	jns    0x40a4da
  40a4da:	rex.WRX outs dx,DWORD PTR ds:[rsi]
  40a4dc:	jb     0x40a555
  40a4de:	imul   esp,DWORD PTR gs:[ecx+0x6e],0x726f4e5f
  40a4e7:	ja     0x40a54a
  40a4e9:	jns    0x40a4eb
	...
  40a4ff:	add    al,al
  40a501:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
  40a502:	add    BYTE PTR [rax],al
  40a505:	add    BYTE PTR [rax],al
  40a507:	add    al,dl
  40a509:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
  40a50a:	add    BYTE PTR [rax],al
  40a50d:	add    BYTE PTR [rax],al
  40a50f:	add    dl,bl
  40a511:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
  40a512:	add    BYTE PTR [rax],al
	...
  40a52d:	add    BYTE PTR [rax],al
  40a52f:	add    BYTE PTR [rax+0x6f],cl
  40a532:	outs   dx,BYTE PTR ds:[rsi]
  40a533:	and    BYTE PTR [ebx+0x6f],cl
  40a537:	outs   dx,BYTE PTR ds:[rsi]
  40a538:	and    BYTE PTR [ebx+0x2e],dl
  40a53c:	rex.B
  40a53d:	cs push rdx
  40a53f:	add    BYTE PTR cs:[rax+0x4b],cl
  40a543:	rex.RXB add BYTE PTR [r13+0x2e],r10b
  40a547:	rex.B
  40a548:	cs rex.RB
  40a54a:	add    BYTE PTR cs:[rcx+0x52],al
  40a54e:	add    BYTE PTR [r11+0x68],r8b
  40a552:	imul   ebp,DWORD PTR [rsi+0x65],0x28206573
  40a559:	push   rsp
  40a55a:	jb     0x40a5bd
  40a55c:	imul   esi,DWORD PTR fs:[rcx+rbp*2+0x6f],0x296c616e
  40a565:	pop    rdi
  40a566:	rex.WRB (bad) 
  40a568:	movsxd esp,DWORD PTR [rcx+0x75]
  40a56b:	and    BYTE PTR [rbx+0x2e],dl
  40a56e:	rex.B
  40a56f:	cs push rdx
  40a571:	cs cmp DWORD PTR cs:[rip+0x485a0030],esi        # 0x489aa5a9
  40a579:	rex.WRB add BYTE PTR [r11+0x68],r8b
  40a57d:	imul   ebp,DWORD PTR [rsi+0x65],0x4d5f6573
  40a584:	(bad)  
  40a585:	movsxd esp,DWORD PTR [rcx+0x75]
  40a588:	and    BYTE PTR [rbx+0x2e],dl
  40a58b:	rex.B
  40a58c:	cs push rdx
  40a58e:	cs cmp DWORD PTR cs:[rip+0x30],esi        # 0x40a5c6
  40a596:	add    BYTE PTR [rax],al
  40a598:	rex.XB push 0x73656e69
  40a59e:	and    BYTE PTR gs:[rax],ch
  40a5a1:	push   rsp
  40a5a2:	jb     0x40a605
  40a5a4:	imul   esi,DWORD PTR fs:[rcx+rbp*2+0x6f],0x296c616e
  40a5ad:	pop    rdi
  40a5ae:	rex.WRB (bad) 
  40a5b0:	movsxd esp,DWORD PTR [rcx+0x6f]
  40a5b3:	and    BYTE PTR [rbx+0x2e],dl
  40a5b6:	rex.B
  40a5b7:	cs push rdx
  40a5b9:	cs cmp DWORD PTR cs:[rip+0x68430030],esi        # 0x6883a5f1
  40a5c1:	imul   ebp,DWORD PTR [rsi+0x65],0x4d5f6573
  40a5c8:	(bad)  
  40a5c9:	movsxd esp,DWORD PTR [rcx+0x6f]
  40a5cc:	and    BYTE PTR [rbx+0x2e],dl
  40a5cf:	rex.B
  40a5d0:	cs push rdx
  40a5d2:	cs cmp DWORD PTR cs:[rip+0x30],esi        # 0x40a60a
	...
  40a5fe:	add    BYTE PTR [rax],al
  40a600:	xor    BYTE PTR [rbp+0x40],ah
	...
  40a60e:	add    BYTE PTR [rax],al
  40a610:	rex.B movs DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
  40a612:	add    BYTE PTR [rax],al
  40a615:	add    BYTE PTR [rax],al
  40a617:	add    BYTE PTR [rbp-0x5b],al
  40a61a:	add    BYTE PTR [rax],al
	...
  40a625:	add    BYTE PTR [rax],al
  40a627:	add    BYTE PTR [rbp+riz*4+0x40],cl
  40a62b:	add    BYTE PTR [rax],al
  40a62d:	add    BYTE PTR [rax],al
  40a62f:	add    BYTE PTR [rax-0x5b],dl
  40a632:	add    BYTE PTR [rax],al
	...
  40a63d:	add    BYTE PTR [rax],al
  40a63f:	add    BYTE PTR [rdi-0x5b],dh
  40a642:	add    BYTE PTR [rax],al
  40a645:	add    BYTE PTR [rax],al
  40a647:	add    BYTE PTR [rbx-0x5b],bh
  40a64a:	add    BYTE PTR [rax],al
	...
  40a655:	add    BYTE PTR [rax],al
  40a657:	add    BYTE PTR [rdi-0x5b],dh
  40a65a:	add    BYTE PTR [rax],al
  40a65d:	add    BYTE PTR [rax],al
  40a65f:	add    BYTE PTR [rax+0x40a5],bl
	...
  40a66d:	add    BYTE PTR [rax],al
  40a66f:	add    BYTE PTR [rdi-0x5b],dh
  40a672:	add    BYTE PTR [rax],al
  40a675:	add    BYTE PTR [rax],al
  40a677:	add    BYTE PTR [rdi+0x40a5],bh
	...
  40a685:	add    BYTE PTR [rax],al
  40a687:	add    BYTE PTR [rdi-0x5b],dh
  40a68a:	add    BYTE PTR [rax],al
	...
  40a6bd:	add    BYTE PTR [rax],al
  40a6bf:	add    BYTE PTR [rax],dh
  40a6c1:	xor    DWORD PTR [rdx],esi
  40a6c3:	xor    esi,DWORD PTR [rsi*1+0x39383736]
  40a6ca:	(bad)  
  40a6cb:	(bad)
  40a6d0:	add    BYTE PTR [rax],dh
  40a6d2:	xor    DWORD PTR [rdx],esi
  40a6d4:	xor    esi,DWORD PTR [rsi*1+0x39383736]
  40a6db:	rex.B
  40a6dc:	rex.X
  40a6dd:	rex.XB
  40a6de:	rex.R
  40a6df:	rex.RB
  40a6e0:	rex.RX add BYTE PTR [rax],r8b
  40a6e3:	add    bh,bh
  40a6e5:	mov    edi,?
  40a6e7:	jmp    rcx
  40a6e9:	mov    edi,edi
  40a6eb:	jmp    rcx
  40a6ed:	mov    edi,edi
  40a6ef:	jmp    rcx
  40a6f1:	mov    edi,edi
  40a6f3:	jmp    rcx
  40a6f5:	mov    edi,edi
  40a6f7:	jmp    rcx
  40a6f9:	mov    edi,edi
  40a6fb:	jmp    rcx
  40a6fd:	mov    edi,edi
  40a6ff:	jmp    rcx
  40a701:	mov    edi,edi
  40a703:	jmp    rcx
  40a705:	mov    edi,edi
  40a707:	jmp    rcx
  40a709:	mov    edi,edi
  40a70b:	jmp    rcx
  40a70d:	mov    edi,edi
  40a70f:	jmp    rcx
  40a711:	mov    edi,edi
  40a713:	(bad)  
  40a714:	(bad)  
  40a715:	mov    edi,edi
  40a717:	jmp    rcx
  40a719:	mov    edi,edi
  40a71b:	jmp    rcx
  40a71d:	mov    edi,edi
  40a71f:	jmp    rcx
  40a721:	mov    edi,edi
  40a723:	jmp    rcx
  40a725:	mov    edi,edi
  40a727:	(bad)  
  40a728:	(bad)  
  40a729:	mov    edi,edi
  40a72b:	jmp    rcx
  40a72d:	mov    edi,edi
  40a72f:	jmp    rcx
  40a731:	mov    edi,edi
  40a733:	jmp    rcx
  40a735:	mov    edi,edi
  40a737:	jmp    rcx
  40a739:	mov    edi,edi
  40a73b:	jmp    rcx
  40a73d:	mov    edi,edi
  40a73f:	(bad)  
  40a740:	in     eax,dx
  40a741:	mov    edi,?
  40a743:	jmp    rcx
  40a745:	mov    edi,edi
  40a747:	jmp    rcx
  40a749:	mov    edi,edi
  40a74b:	jmp    rcx
  40a74d:	mov    edi,edi
  40a74f:	jmp    rcx
  40a751:	mov    edi,edi
  40a753:	jmp    rcx
  40a755:	mov    edi,edi
  40a757:	inc    DWORD PTR [rax]
  40a759:	mov    edi,?
  40a75b:	jmp    rcx
  40a75d:	mov    edi,edi
  40a75f:	jmp    rcx
  40a761:	mov    edi,edi
  40a763:	(bad)  
  40a764:	fisttp DWORD PTR [rdi+rdi*8+0x7025ff]
  40a76b:	and    eax,0x64252e25
  40a770:	and    eax,0x25250063
  40a775:	and    eax,0x8de80063
  40a77a:	(bad)  
  40a77b:	(bad)  
  40a77c:	js     0x40a70c
  40a77e:	(bad)  
  40a77f:	(bad)  
  40a780:	js     0x40a710
  40a782:	(bad)  
  40a783:	call   QWORD PTR [rdi]
  40a785:	(bad)  
  40a786:	(bad)  
  40a787:	(bad)  
  40a788:	js     0x40a718
  40a78a:	(bad)  
  40a78b:	(bad)  
  40a78c:	js     0x40a71c
  40a78e:	(bad)  
  40a78f:	call   FWORD PTR [rax+0x17ffff8e]
  40a795:	(bad)  
  40a796:	(bad)  
  40a797:	(bad)  
  40a798:	js     0x40a728
  40a79a:	(bad)  
  40a79b:	call   QWORD PTR [rdi]
  40a79d:	(bad)  
  40a79e:	(bad)  
  40a79f:	dec    DWORD PTR [rax+0x78ffff8e]
  40a7a5:	mov    ?,edi
  40a7a7:	jmp    FWORD PTR [rax]
  40a7a9:	(bad)  
  40a7aa:	(bad)  
  40a7ab:	jmp    FWORD PTR [rax]
  40a7ad:	(bad)  
  40a7ae:	(bad)  
  40a7af:	jmp    FWORD PTR [rax]
  40a7b1:	(bad)  
  40a7b2:	(bad)  
  40a7b3:	jmp    FWORD PTR [rax]
  40a7b5:	(bad)  
  40a7b6:	(bad)  
  40a7b7:	jmp    FWORD PTR [rax]
  40a7b9:	(bad)  
  40a7ba:	(bad)  
  40a7bb:	jmp    FWORD PTR [rax]
  40a7bd:	(bad)  
  40a7be:	(bad)  
  40a7bf:	jmp    FWORD PTR [rax]
  40a7c1:	(bad)  
  40a7c2:	(bad)  
  40a7c3:	jmp    FWORD PTR [rax]
  40a7c5:	(bad)  
  40a7c6:	(bad)  
  40a7c7:	jmp    FWORD PTR [rax]
  40a7c9:	(bad)  
  40a7ca:	(bad)  
  40a7cb:	jmp    FWORD PTR [rax]
  40a7cd:	(bad)  
  40a7ce:	(bad)  
  40a7cf:	(bad)  
  40a7d0:	js     0x40a760
  40a7d2:	(bad)  
  40a7d3:	(bad)  
  40a7d4:	js     0x40a764
  40a7d6:	(bad)  
  40a7d7:	(bad)  
  40a7d8:	js     0x40a768
  40a7da:	(bad)  
  40a7db:	(bad)  
  40a7dc:	js     0x40a76c
  40a7de:	(bad)  
  40a7df:	(bad)  
  40a7e0:	js     0x40a770
  40a7e2:	(bad)  
  40a7e3:	(bad)  
  40a7e4:	js     0x40a774
  40a7e6:	(bad)  
  40a7e7:	(bad)  
  40a7e8:	js     0x40a778
  40a7ea:	(bad)  
  40a7eb:	(bad)  
  40a7ec:	js     0x40a77c
  40a7ee:	(bad)  
  40a7ef:	(bad)  
  40a7f0:	js     0x40a780
  40a7f2:	(bad)  
  40a7f3:	(bad)  
  40a7f4:	js     0x40a784
  40a7f6:	(bad)  
  40a7f7:	(bad)  
  40a7f8:	js     0x40a788
  40a7fa:	(bad)  
  40a7fb:	dec    DWORD PTR [rcx-0x72]
  40a7fe:	(bad)  
  40a7ff:	(bad)  
  40a800:	js     0x40a790
  40a802:	(bad)  
  40a803:	dec    DWORD PTR [rcx-0x72]
  40a806:	(bad)  
  40a807:	(bad)  
  40a808:	js     0x40a798
  40a80a:	(bad)  
  40a80b:	(bad)  
  40a80c:	js     0x40a79c
  40a80e:	(bad)  
  40a80f:	(bad)  
  40a810:	js     0x40a7a0
  40a812:	(bad)  
  40a813:	(bad)  
  40a814:	js     0x40a7a4
  40a816:	(bad)  
  40a817:	(bad)  
  40a818:	js     0x40a7a8
  40a81a:	(bad)  
  40a81b:	(bad)  
  40a81c:	js     0x40a7ac
  40a81e:	(bad)  
  40a81f:	(bad)  
  40a820:	js     0x40a7b0
  40a822:	(bad)  
  40a823:	(bad)  
  40a824:	js     0x40a7b4
  40a826:	(bad)  
  40a827:	(bad)  
  40a828:	js     0x40a7b8
  40a82a:	(bad)  
  40a82b:	(bad)  
  40a82c:	js     0x40a7bc
  40a82e:	(bad)  
  40a82f:	(bad)  
  40a830:	js     0x40a7c0
  40a832:	(bad)  
  40a833:	(bad)  
  40a834:	js     0x40a7c4
  40a836:	(bad)  
  40a837:	(bad)  
  40a838:	js     0x40a7c8
  40a83a:	(bad)  
  40a83b:	(bad)  
  40a83c:	js     0x40a7cc
  40a83e:	(bad)  
  40a83f:	(bad)  
  40a840:	js     0x40a7d0
  40a842:	(bad)  
  40a843:	(bad)  
  40a844:	js     0x40a7d4
  40a846:	(bad)  
  40a847:	(bad)  
  40a848:	call   0x7940a7db
  40a84d:	mov    ?,edi
  40a84f:	(bad)  
  40a850:	js     0x40a7e0
  40a852:	(bad)  
  40a853:	(bad)  
  40a854:	js     0x40a7e4
  40a856:	(bad)  
  40a857:	(bad)  
  40a858:	js     0x40a7e8
  40a85a:	(bad)  
  40a85b:	(bad)  
  40a85c:	js     0x40a7ec
  40a85e:	(bad)  
  40a85f:	(bad)  
  40a860:	js     0x40a7f0
  40a862:	(bad)  
  40a863:	(bad)  
  40a864:	js     0x40a7f4
  40a866:	(bad)  
  40a867:	(bad)  
  40a868:	js     0x40a7f8
  40a86a:	(bad)  
  40a86b:	(bad)  
  40a86c:	js     0x40a7fc
  40a86e:	(bad)  
  40a86f:	(bad)  
  40a870:	js     0x40a800
  40a872:	(bad)  
  40a873:	(bad)  
  40a874:	mov    eax,0xe8ffff8e
  40a879:	mov    ?,edi
  40a87b:	dec    DWORD PTR [rcx-0x72]
  40a87e:	(bad)  
  40a87f:	dec    DWORD PTR [rcx-0x72]
  40a882:	(bad)  
  40a883:	dec    DWORD PTR [rcx-0x72]
  40a886:	(bad)  
  40a887:	call   QWORD PTR [rdi]
  40a889:	(bad)  
  40a88a:	(bad)  
  40a88b:	(bad)  
  40a88c:	call   0x7940a81f
  40a891:	mov    ?,edi
  40a893:	(bad)  
  40a894:	js     0x40a824
  40a896:	(bad)  
  40a897:	(bad)  
  40a898:	cmp    BYTE PTR [rsi-0x71870001],cl
  40a89e:	(bad)  
  40a89f:	(bad)  
  40a8a0:	js     0x40a830
  40a8a2:	(bad)  
  40a8a3:	(bad)  
  40a8a4:	call   0xffffffffa940a837
  40a8a9:	(bad)  
  40a8aa:	(bad)  
  40a8ab:	(bad)  
  40a8ac:	js     0x40a83c
  40a8ae:	(bad)  
  40a8af:	(bad)  
  40a8b0:	js     0x40a840
  40a8b2:	(bad)  
  40a8b3:	jmp    FWORD PTR [rax+0x78ffff8d]
  40a8b9:	mov    ?,edi
  40a8bb:	(bad)  
  40a8bc:	call   0x7940a84f
  40a8c1:	mov    ?,edi
  40a8c3:	(bad)  
  40a8c4:	js     0x40a854
  40a8c6:	(bad)  
  40a8c7:	(bad)  
  40a8c8:	call   0x7940a85b
  40a8cd:	mov    ?,edi
  40a8cf:	(bad)  
  40a8d0:	cmp    eax,0xdcffff8d
  40a8d5:	mov    ?,edi
  40a8d7:	(bad)  
  40a8d8:	in     al,dx
  40a8d9:	(bad)  
  40a8da:	(bad)  
  40a8db:	(bad)  
  40a8dc:	in     al,dx
  40a8dd:	(bad)  
  40a8de:	(bad)  
  40a8df:	dec    esp
  40a8e1:	mov    ?,edi
  40a8e3:	dec    DWORD PTR [rsi]
  40a8e5:	(bad)  
  40a8e6:	(bad)  
  40a8e7:	dec    esp
  40a8e9:	mov    ?,edi
  40a8eb:	call   FWORD PTR [rbp-0x6d]
  40a8ee:	(bad)  
  40a8ef:	dec    DWORD PTR [rax-0x6d]
  40a8f2:	(bad)  
  40a8f3:	jmp    FWORD PTR [rbx]
  40a8f5:	xchg   ecx,eax
  40a8f6:	(bad)  
  40a8f7:	inc    DWORD PTR [rcx+0x2bffff8e]
  40a8fd:	xchg   ecx,eax
  40a8fe:	(bad)  
  40a8ff:	jmp    FWORD PTR [rbx]
  40a901:	xchg   ecx,eax
  40a902:	(bad)  
  40a903:	call   QWORD PTR [rbx+0x17ffff93]
  40a909:	xchg   ebx,eax
  40a90a:	(bad)  
  40a90b:	jmp    FWORD PTR [rbx]
  40a90d:	xchg   ecx,eax
  40a90e:	(bad)  
  40a90f:	(bad)  
  40a910:	ds xchg ebx,eax
  40a912:	(bad)  
  40a913:	jmp    QWORD PTR [rbx+rdx*4]
  40a916:	(bad)  
  40a917:	jmp    FWORD PTR [rbx]
  40a919:	xchg   ecx,eax
  40a91a:	(bad)  
  40a91b:	(bad)  
  40a91c:	cmp    cl,BYTE PTR [rdi-0x70b60001]
  40a922:	(bad)  
  40a923:	dec    DWORD PTR [rcx-0x71]
  40a926:	(bad)  
  40a927:	dec    DWORD PTR [rcx-0x71]
  40a92a:	(bad)  
  40a92b:	dec    DWORD PTR [rcx-0x71]
  40a92e:	(bad)  
  40a92f:	dec    DWORD PTR [rcx-0x71]
  40a932:	(bad)  
  40a933:	dec    DWORD PTR [rcx-0x71]
  40a936:	(bad)  
  40a937:	dec    DWORD PTR [rcx-0x71]
  40a93a:	(bad)  
  40a93b:	dec    DWORD PTR [rcx-0x71]
  40a93e:	(bad)  
  40a93f:	dec    DWORD PTR [rcx-0x71]
  40a942:	(bad)  
  40a943:	jmp    FWORD PTR [rbx]
  40a945:	xchg   ecx,eax
  40a946:	(bad)  
  40a947:	jmp    FWORD PTR [rbx]
  40a949:	xchg   ecx,eax
  40a94a:	(bad)  
  40a94b:	jmp    FWORD PTR [rbx]
  40a94d:	xchg   ecx,eax
  40a94e:	(bad)  
  40a94f:	jmp    FWORD PTR [rbx]
  40a951:	xchg   ecx,eax
  40a952:	(bad)  
  40a953:	jmp    FWORD PTR [rbx]
  40a955:	xchg   ecx,eax
  40a956:	(bad)  
  40a957:	jmp    FWORD PTR [rbx]
  40a959:	xchg   ecx,eax
  40a95a:	(bad)  
  40a95b:	jmp    FWORD PTR [rbx]
  40a95d:	xchg   ecx,eax
  40a95e:	(bad)  
  40a95f:	jmp    FWORD PTR [rbx]
  40a961:	xchg   ecx,eax
  40a962:	(bad)  
  40a963:	jmp    FWORD PTR [rbx]
  40a965:	xchg   ecx,eax
  40a966:	(bad)  
  40a967:	jmp    FWORD PTR [rbx]
  40a969:	xchg   ecx,eax
  40a96a:	(bad)  
  40a96b:	jmp    FWORD PTR [rbx]
  40a96d:	xchg   ecx,eax
  40a96e:	(bad)  
  40a96f:	jmp    QWORD PTR [rcx-0x71]
  40a972:	(bad)  
  40a973:	jmp    FWORD PTR [rbx]
  40a975:	xchg   ecx,eax
  40a976:	(bad)  
  40a977:	jmp    QWORD PTR [rcx-0x71]
  40a97a:	(bad)  
  40a97b:	jmp    FWORD PTR [rbx]
  40a97d:	xchg   ecx,eax
  40a97e:	(bad)  
  40a97f:	jmp    FWORD PTR [rbx]
  40a981:	xchg   ecx,eax
  40a982:	(bad)  
  40a983:	jmp    FWORD PTR [rbx]
  40a985:	xchg   ecx,eax
  40a986:	(bad)  
  40a987:	jmp    FWORD PTR [rbx]
  40a989:	xchg   ecx,eax
  40a98a:	(bad)  
  40a98b:	jmp    FWORD PTR [rbx]
  40a98d:	xchg   ecx,eax
  40a98e:	(bad)  
  40a98f:	jmp    FWORD PTR [rbx]
  40a991:	xchg   ecx,eax
  40a992:	(bad)  
  40a993:	jmp    FWORD PTR [rbx]
  40a995:	xchg   ecx,eax
  40a996:	(bad)  
  40a997:	jmp    FWORD PTR [rbx]
  40a999:	xchg   ecx,eax
  40a99a:	(bad)  
  40a99b:	jmp    FWORD PTR [rbx]
  40a99d:	xchg   ecx,eax
  40a99e:	(bad)  
  40a99f:	jmp    FWORD PTR [rbx]
  40a9a1:	xchg   ecx,eax
  40a9a2:	(bad)  
  40a9a3:	jmp    FWORD PTR [rbx]
  40a9a5:	xchg   ecx,eax
  40a9a6:	(bad)  
  40a9a7:	jmp    FWORD PTR [rbx]
  40a9a9:	xchg   ecx,eax
  40a9aa:	(bad)  
  40a9ab:	jmp    FWORD PTR [rbx]
  40a9ad:	xchg   ecx,eax
  40a9ae:	(bad)  
  40a9af:	jmp    FWORD PTR [rbx]
  40a9b1:	xchg   ecx,eax
  40a9b2:	(bad)  
  40a9b3:	jmp    FWORD PTR [rbx]
  40a9b5:	xchg   ecx,eax
  40a9b6:	(bad)  
  40a9b7:	jmp    FWORD PTR [rbx]
  40a9b9:	xchg   ecx,eax
  40a9ba:	(bad)  
  40a9bb:	dec    DWORD PTR [rdx+0x2bffff92]
  40a9c1:	xchg   ecx,eax
  40a9c2:	(bad)  
  40a9c3:	jmp    FWORD PTR [rbx]
  40a9c5:	xchg   ecx,eax
  40a9c6:	(bad)  
  40a9c7:	jmp    FWORD PTR [rbx]
  40a9c9:	xchg   ecx,eax
  40a9ca:	(bad)  
  40a9cb:	jmp    FWORD PTR [rbx]
  40a9cd:	xchg   ecx,eax
  40a9ce:	(bad)  
  40a9cf:	jmp    FWORD PTR [rbx]
  40a9d1:	xchg   ecx,eax
  40a9d2:	(bad)  
  40a9d3:	jmp    FWORD PTR [rbx]
  40a9d5:	xchg   ecx,eax
  40a9d6:	(bad)  
  40a9d7:	jmp    FWORD PTR [rbx]
  40a9d9:	xchg   ecx,eax
  40a9da:	(bad)  
  40a9db:	jmp    FWORD PTR [rbx]
  40a9dd:	xchg   ecx,eax
  40a9de:	(bad)  
  40a9df:	jmp    FWORD PTR [rbx]
  40a9e1:	xchg   ecx,eax
  40a9e2:	(bad)  
  40a9e3:	jmp    FWORD PTR [rbx]
  40a9e5:	xchg   ecx,eax
  40a9e6:	(bad)  
  40a9e7:	jmp    QWORD PTR [rdx+rdx*4]
  40a9ea:	(bad)  
  40a9eb:	(bad)  
  40a9ec:	call   0x6240a983
  40a9f1:	(bad)  
  40a9f2:	(bad)  
  40a9f3:	jmp    QWORD PTR [rcx-0x71]
  40a9f6:	(bad)  
  40a9f7:	jmp    QWORD PTR [rcx-0x71]
  40a9fa:	(bad)  
  40a9fb:	inc    DWORD PTR [rcx-0x17000072]
  40aa01:	xchg   edx,eax
  40aa02:	(bad)  
  40aa03:	jmp    FWORD PTR [rbx]
  40aa05:	xchg   ecx,eax
  40aa06:	(bad)  
  40aa07:	jmp    FWORD PTR [rbx]
  40aa09:	xchg   ecx,eax
  40aa0a:	(bad)  
  40aa0b:	dec    DWORD PTR [rbx]
  40aa0d:	xchg   edx,eax
  40aa0e:	(bad)  
  40aa0f:	jmp    FWORD PTR [rbx]
  40aa11:	xchg   ecx,eax
  40aa12:	(bad)  
  40aa13:	jmp    FWORD PTR [rbx]
  40aa15:	xchg   ecx,eax
  40aa16:	(bad)  
  40aa17:	dec    DWORD PTR [rdx-0x3600006e]
  40aa1d:	xchg   ecx,eax
  40aa1e:	(bad)  
  40aa1f:	jmp    FWORD PTR [rbx]
  40aa21:	xchg   ecx,eax
  40aa22:	(bad)  
  40aa23:	jmp    FWORD PTR [rbx]
  40aa25:	xchg   ecx,eax
  40aa26:	(bad)  
  40aa27:	call   QWORD PTR [rbp-0x6f]
  40aa2a:	(bad)  
  40aa2b:	jmp    FWORD PTR [rbx]
  40aa2d:	xchg   ecx,eax
  40aa2e:	(bad)  
  40aa2f:	dec    DWORD PTR [rdx+0x2bffff92]
  40aa35:	xchg   ecx,eax
  40aa36:	(bad)  
  40aa37:	jmp    FWORD PTR [rbx]
  40aa39:	xchg   ecx,eax
  40aa3a:	(bad)  
  40aa3b:	dec    DWORD PTR [rdx+0x2bffff92]
  40aa41:	xchg   ecx,eax
  40aa42:	(bad)  
  40aa43:	call   QWORD PTR [rdi-0x71]
  40aa46:	(bad)  
  40aa47:	inc    DWORD PTR [rax]
	...
  40aa55:	add    BYTE PTR [rax],al
  40aa57:	add    BYTE PTR [rax],0x0
  40aa5a:	add    BYTE PTR [rax],al
  40aa5c:	add    BYTE PTR [rax],al
  40aa5e:	add    BYTE PTR [rax],al
  40aa60:	pop    rsp
  40aa61:	(bad)  
  40aa62:	(bad)  
  40aa63:	pop    rsp
  40aa64:	add    BYTE PTR [rdi+rdi*1+0x3f],bl
  40aa68:	pop    rsp
  40aa69:	and    eax,0x73
  40aa6e:	add    BYTE PTR [rax],al
  40aa70:	movsxd ebp,DWORD PTR [rdi+0x75]
  40aa73:	ins    BYTE PTR es:[rdi],dx
  40aa74:	and    BYTE PTR fs:[rsi+0x6f],ch
  40aa78:	je     0x40aa9a
  40aa7a:	jae    0x40aae1
  40aa7c:	je     0x40aa9e
  40aa7e:	push   0x75
  40aa80:	outs   dx,BYTE PTR ds:[rsi]
  40aa81:	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
  40aa85:	outs   dx,BYTE PTR ds:[rsi]
  40aa86:	and    BYTE PTR [rsi+0x6f],ah
  40aa89:	jb     0x40aaab
  40aa8b:	and    ah,BYTE PTR [rip+0x203a2273]        # 0x207acd04
  40aa91:	and    eax,0xa73
  40aa96:	add    BYTE PTR [rax],al
  40aa98:	movsxd ebp,DWORD PTR [rdi+0x75]
  40aa9b:	ins    BYTE PTR es:[rdi],dx
  40aa9c:	and    BYTE PTR fs:[rsi+0x6f],ch
  40aaa0:	je     0x40aac2
  40aaa2:	addr32 gs je 0x40aac6
  40aaa6:	push   0x75
  40aaa8:	outs   dx,BYTE PTR ds:[rsi]
  40aaa9:	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
  40aaad:	outs   dx,BYTE PTR ds:[rsi]
  40aaae:	and    BYTE PTR [rsi+0x6f],ah
  40aab1:	jb     0x40aad3
  40aab3:	and    ah,BYTE PTR [rip+0x203a2273]        # 0x207acd2c
  40aab9:	and    eax,0xa73
  40aabe:	add    BYTE PTR [rax],al
  40aac0:	(bad)  
  40aac1:	add    BYTE PTR [rax],al
  40aac3:	and    eax,0x732573
  40aac8:	(bad)  
  40aac9:	add    BYTE PTR cs:[rsi],ch
  40aacc:	add    BYTE PTR [rdi],ch
  40aace:	cs add BYTE PTR cs:[rsi],ch
  40aad2:	add    BYTE PTR cs:[rax],al
  40aad5:	add    BYTE PTR [rax],al
  40aad7:	add    BYTE PTR [rdi],ch
  40aad9:	jae    0x40ab3e
  40aadb:	jb     0x40ab3e
  40aadd:	je     0x40ab42
  40aadf:	push   0x65776a2f
  40aae4:	(bad)  
  40aae5:	ins    DWORD PTR es:[rdi],dx
  40aae6:	js     0x40ab4d
  40aae8:	sub    eax,0x6174636f
  40aaed:	jbe    0x40ab54
  40aaef:	(bad)  
  40aaf0:	xor    al,0x2e
  40aaf2:	xor    ch,BYTE PTR [rsi]
  40aaf4:	xor    DWORD PTR [rdi],ebp
  40aaf6:	ja     0x40ab2e
  40aaf8:	xor    al,0x2d
  40aafa:	xor    esi,DWORD PTR [rdx]
  40aafc:	(bad)  
  40aafd:	jne    0x40ab72
  40aaff:	jb     0x40ab30
  40ab01:	js     0x40ab3b
  40ab03:	ss pop rdi
  40ab05:	ss xor al,0x2d
  40ab08:	ja     0x40ab40
  40ab0a:	xor    al,0x2d
  40ab0c:	ins    DWORD PTR es:[rdi],dx
  40ab0d:	imul   ebp,DWORD PTR [rsi+0x67],0x2f323377
  40ab14:	(bad)  
  40ab15:	imul   ebp,DWORD PTR [rsi+0x0],0x2f2e2e
  40ab1c:	(bad)  
  40ab1d:	cs cs (bad) 
  40ab20:	add    BYTE PTR [rip+0x6f203a73],ah        # 0x6f60e599
  40ab26:	jne    0x40ab9c
  40ab28:	and    BYTE PTR [rdi+0x66],ch
  40ab2b:	and    BYTE PTR [rbp+0x65],ch
  40ab2e:	ins    DWORD PTR es:[rdi],dx
  40ab2f:	outs   dx,DWORD PTR ds:[rsi]
  40ab30:	jb     0x40abab
  40ab32:	or     al,BYTE PTR [rax]
  40ab34:	cs gs js 0x40ab9d
  40ab38:	add    BYTE PTR [rdi+0x75],ch
  40ab3b:	je     0x40ab5d
  40ab3d:	outs   dx,DWORD PTR ds:[rsi]
  40ab3e:	data16 and BYTE PTR [rbp+0x65],ch
  40ab42:	ins    DWORD PTR es:[rdi],dx
  40ab43:	outs   dx,DWORD PTR ds:[rsi]
  40ab44:	jb     0x40abbf
  40ab46:	or     al,BYTE PTR [rax]
  40ab48:	movsxd ebp,DWORD PTR [rdi+0x75]
  40ab4b:	ins    BYTE PTR es:[rdi],dx
  40ab4c:	and    BYTE PTR fs:[rsi+0x6f],ch
  40ab50:	je     0x40ab72
  40ab52:	addr32 gs je 0x40ab76
  40ab56:	movsxd esi,DWORD PTR [rbp+0x72]
  40ab59:	jb     0x40abc0
  40ab5b:	outs   dx,BYTE PTR ds:[rsi]
  40ab5c:	je     0x40ab7e
  40ab5e:	ja     0x40abcf
  40ab60:	jb     0x40abcd
  40ab62:	imul   ebp,DWORD PTR [rsi+0x67],0x72696420
  40ab69:	movsxd esi,DWORD PTR gs:[rdi+rbp*2+0x72]
  40ab6e:	jns    0x40abaa
  40ab70:	and    BYTE PTR [rip+0x25000a73],ah        # 0x2540b5e9
  40ab76:	jae    0x40aba7
  40ab78:	and    eax,0x73
  40ab7d:	add    BYTE PTR [rax],al
  40ab7f:	add    BYTE PTR [rdi],ch
  40ab81:	jae    0x40abe6
  40ab83:	jb     0x40abe6
  40ab85:	je     0x40abea
  40ab87:	push   0x65776a2f
  40ab8c:	(bad)  
  40ab8d:	ins    DWORD PTR es:[rdi],dx
  40ab8e:	js     0x40abf5
  40ab90:	sub    eax,0x6174636f
  40ab95:	jbe    0x40abfc
  40ab97:	(bad)  
  40ab98:	xor    al,0x2e
  40ab9a:	xor    ch,BYTE PTR [rsi]
  40ab9c:	xor    DWORD PTR [rdi],ebp
  40ab9e:	ja     0x40abd6
  40aba0:	xor    al,0x2d
  40aba2:	xor    esi,DWORD PTR [rdx]
  40aba4:	(bad)  
  40aba5:	jne    0x40ac1a
  40aba7:	jb     0x40abd8
  40aba9:	js     0x40abe3
  40abab:	ss pop rdi
  40abad:	ss xor al,0x2d
  40abb0:	ja     0x40abe8
  40abb2:	xor    al,0x2d
  40abb4:	ins    DWORD PTR es:[rdi],dx
  40abb5:	imul   ebp,DWORD PTR [rsi+0x67],0x2f323377
  40abbc:	jae    0x40ac26
  40abbe:	(bad)  
  40abbf:	jb     0x40ac26
  40abc1:	(bad)  
  40abc2:	jo     0x40ac33
  40abc4:	jae    0x40ac3a
  40abc6:	addr32 jb 0x40ac2e
  40abc9:	jae    0x40ac3c
  40abcb:	ins    BYTE PTR es:[rdi],dx
  40abcc:	add    BYTE PTR [rax],al
  40abce:	add    BYTE PTR [rax],al
  40abd0:	(bad)  
  40abd1:	jae    0x40ac36
  40abd3:	jb     0x40ac36
  40abd5:	je     0x40ac3a
  40abd7:	push   0x65776a2f
  40abdc:	(bad)  
  40abdd:	ins    DWORD PTR es:[rdi],dx
  40abde:	js     0x40ac45
  40abe0:	sub    eax,0x6174636f
  40abe5:	jbe    0x40ac4c
  40abe7:	(bad)  
  40abe8:	xor    al,0x2e
  40abea:	xor    ch,BYTE PTR [rsi]
  40abec:	xor    DWORD PTR [rdi],ebp
  40abee:	ja     0x40ac26
  40abf0:	xor    al,0x2d
  40abf2:	xor    esi,DWORD PTR [rdx]
  40abf4:	(bad)  
  40abf5:	jne    0x40ac6a
  40abf7:	jb     0x40ac28
  40abf9:	js     0x40ac33
  40abfb:	ss pop rdi
  40abfd:	ss xor al,0x2d
  40ac00:	ja     0x40ac38
  40ac02:	xor    al,0x2d
  40ac04:	ins    DWORD PTR es:[rdi],dx
  40ac05:	imul   ebp,DWORD PTR [rsi+0x67],0x2f323377
  40ac0c:	gs je  0x40ac72
  40ac0f:	(bad)  
  40ac10:	jo     0x40ac81
  40ac12:	jae    0x40ac88
  40ac14:	addr32 jb 0x40ac7c
  40ac17:	jae    0x40ac8a
  40ac19:	ins    BYTE PTR es:[rdi],dx
  40ac1a:	add    BYTE PTR [rax],al
  40ac1c:	add    BYTE PTR [rax],al
  40ac1e:	add    BYTE PTR [rax],al
  40ac20:	(bad)  
  40ac21:	jae    0x40ac86
  40ac23:	jb     0x40ac86
  40ac25:	je     0x40ac8a
  40ac27:	push   0x65776a2f
  40ac2c:	(bad)  
  40ac2d:	ins    DWORD PTR es:[rdi],dx
  40ac2e:	js     0x40ac95
  40ac30:	sub    eax,0x6174636f
  40ac35:	jbe    0x40ac9c
  40ac37:	(bad)  
  40ac38:	xor    al,0x2e
  40ac3a:	xor    ch,BYTE PTR [rsi]
  40ac3c:	xor    DWORD PTR [rdi],ebp
  40ac3e:	ja     0x40ac76
  40ac40:	xor    al,0x2d
  40ac42:	xor    esi,DWORD PTR [rdx]
  40ac44:	(bad)  
  40ac45:	jne    0x40acba
  40ac47:	jb     0x40ac78
  40ac49:	js     0x40ac83
  40ac4b:	ss pop rdi
  40ac4d:	ss xor al,0x2d
  40ac50:	ja     0x40ac88
  40ac52:	xor    al,0x2d
  40ac54:	ins    DWORD PTR es:[rdi],dx
  40ac55:	imul   ebp,DWORD PTR [rsi+0x67],0x2f323377
  40ac5c:	imul   ebp,DWORD PTR [rsi+0x63],0x6564756c
  40ac63:	add    BYTE PTR [rax],al
  40ac65:	add    BYTE PTR [rax],al
  40ac67:	add    BYTE PTR [rdi],ch
  40ac69:	jae    0x40acce
  40ac6b:	jb     0x40acce
  40ac6d:	je     0x40acd2
  40ac6f:	push   0x65776a2f
  40ac74:	(bad)  
  40ac75:	ins    DWORD PTR es:[rdi],dx
  40ac76:	js     0x40acdd
  40ac78:	sub    eax,0x6174636f
  40ac7d:	jbe    0x40ace4
  40ac7f:	(bad)  
  40ac80:	xor    al,0x2e
  40ac82:	xor    ch,BYTE PTR [rsi]
  40ac84:	xor    DWORD PTR [rdi],ebp
  40ac86:	ja     0x40acbe
  40ac88:	xor    al,0x2d
  40ac8a:	xor    esi,DWORD PTR [rdx]
  40ac8c:	(bad)  
  40ac8d:	jne    0x40ad02
  40ac8f:	jb     0x40acc0
  40ac91:	js     0x40accb
  40ac93:	ss pop rdi
  40ac95:	ss xor al,0x2d
  40ac98:	ja     0x40acd0
  40ac9a:	xor    al,0x2d
  40ac9c:	ins    DWORD PTR es:[rdi],dx
  40ac9d:	imul   ebp,DWORD PTR [rsi+0x67],0x2f323377
  40aca4:	imul   ebp,DWORD PTR [rsi+0x63],0x6564756c
  40acab:	(bad)  
  40acac:	jo     0x40ad1d
  40acae:	jae    0x40ad24
  40acb0:	addr32 jb 0x40ad18
  40acb3:	jae    0x40ad26
  40acb5:	ins    BYTE PTR es:[rdi],dx
  40acb6:	add    BYTE PTR [rax],al
  40acb8:	(bad)  
  40acb9:	jae    0x40ad1e
  40acbb:	jb     0x40ad1e
  40acbd:	je     0x40ad22
  40acbf:	push   0x65776a2f
  40acc4:	(bad)  
  40acc5:	ins    DWORD PTR es:[rdi],dx
  40acc6:	js     0x40ad2d
  40acc8:	sub    eax,0x6174636f
  40accd:	jbe    0x40ad34
  40accf:	(bad)  
  40acd0:	xor    al,0x2e
  40acd2:	xor    ch,BYTE PTR [rsi]
  40acd4:	xor    DWORD PTR [rdi],ebp
  40acd6:	ja     0x40ad0e
  40acd8:	xor    al,0x2d
  40acda:	xor    esi,DWORD PTR [rdx]
  40acdc:	(bad)  
  40acdd:	jne    0x40ad52
  40acdf:	jb     0x40ad10
  40ace1:	js     0x40ad1b
  40ace3:	ss pop rdi
  40ace5:	ss xor al,0x2d
  40ace8:	ja     0x40ad20
  40acea:	xor    al,0x2d
  40acec:	ins    DWORD PTR es:[rdi],dx
  40aced:	imul   ebp,DWORD PTR [rsi+0x67],0x2f323377
  40acf4:	imul   ebp,DWORD PTR [rsi+0x63],0x6564756c
  40acfb:	(bad)  
  40acfc:	jo     0x40ad6d
  40acfe:	jae    0x40ad74
  40ad00:	addr32 jb 0x40ad68
  40ad03:	jae    0x40ad76
  40ad05:	ins    BYTE PTR es:[rdi],dx
  40ad06:	(bad)  
  40ad07:	jae    0x40ad6e
  40ad09:	jb     0x40ad81
  40ad0b:	gs jb  0x40ad0e
  40ad0e:	add    BYTE PTR [rax],al
  40ad10:	(bad)  
  40ad11:	jae    0x40ad76
  40ad13:	jb     0x40ad76
  40ad15:	je     0x40ad7a
  40ad17:	push   0x65776a2f
  40ad1c:	(bad)  
  40ad1d:	ins    DWORD PTR es:[rdi],dx
  40ad1e:	js     0x40ad85
  40ad20:	sub    eax,0x6174636f
  40ad25:	jbe    0x40ad8c
  40ad27:	(bad)  
  40ad28:	xor    al,0x2e
  40ad2a:	xor    ch,BYTE PTR [rsi]
  40ad2c:	xor    DWORD PTR [rdi],ebp
  40ad2e:	ja     0x40ad66
  40ad30:	xor    al,0x2d
  40ad32:	xor    esi,DWORD PTR [rdx]
  40ad34:	(bad)  
  40ad35:	jne    0x40adaa
  40ad37:	jb     0x40ad68
  40ad39:	js     0x40ad73
  40ad3b:	ss pop rdi
  40ad3d:	ss xor al,0x2d
  40ad40:	ja     0x40ad78
  40ad42:	xor    al,0x2d
  40ad44:	ins    DWORD PTR es:[rdi],dx
  40ad45:	imul   ebp,DWORD PTR [rsi+0x67],0x2f323377
  40ad4c:	ins    BYTE PTR es:[rdi],dx
  40ad4d:	imul   esp,DWORD PTR [rdx+0x0],0x7263732f
  40ad54:	(bad)  
  40ad55:	je     0x40adba
  40ad57:	push   0x65776a2f
  40ad5c:	(bad)  
  40ad5d:	ins    DWORD PTR es:[rdi],dx
  40ad5e:	js     0x40adc5
  40ad60:	sub    eax,0x6174636f
  40ad65:	jbe    0x40adcc
  40ad67:	(bad)  
  40ad68:	xor    al,0x2e
  40ad6a:	xor    ch,BYTE PTR [rsi]
  40ad6c:	xor    DWORD PTR [rdi],ebp
  40ad6e:	ja     0x40ada6
  40ad70:	xor    al,0x2d
  40ad72:	xor    esi,DWORD PTR [rdx]
  40ad74:	(bad)  
  40ad75:	jne    0x40adea
  40ad77:	jb     0x40ada8
  40ad79:	js     0x40adb3
  40ad7b:	ss pop rdi
  40ad7d:	ss xor al,0x2d
  40ad80:	ja     0x40adb8
  40ad82:	xor    al,0x2d
  40ad84:	ins    DWORD PTR es:[rdi],dx
  40ad85:	imul   ebp,DWORD PTR [rsi+0x67],0x2f323377
  40ad8c:	ins    BYTE PTR es:[rdi],dx
  40ad8d:	imul   esp,DWORD PTR [rdx+0x2f],0x74736f70
  40ad94:	addr32 jb 0x40adfc
  40ad97:	jae    0x40ae0a
  40ad99:	ins    BYTE PTR es:[rdi],dx
  40ad9a:	add    BYTE PTR [rax],al
  40ad9c:	add    BYTE PTR [rax],al
  40ad9e:	add    BYTE PTR [rax],al
  40ada0:	(bad)  
  40ada1:	jae    0x40ae06
  40ada3:	jb     0x40ae06
  40ada5:	je     0x40ae0a
  40ada7:	push   0x65776a2f
  40adac:	(bad)  
  40adad:	ins    DWORD PTR es:[rdi],dx
  40adae:	js     0x40ae15
  40adb0:	sub    eax,0x6174636f
  40adb5:	jbe    0x40ae1c
  40adb7:	(bad)  
  40adb8:	xor    al,0x2e
  40adba:	xor    ch,BYTE PTR [rsi]
  40adbc:	xor    DWORD PTR [rdi],ebp
  40adbe:	ja     0x40adf6
  40adc0:	xor    al,0x2d
  40adc2:	xor    esi,DWORD PTR [rdx]
  40adc4:	(bad)  
  40adc5:	jne    0x40ae3a
  40adc7:	jb     0x40adf8
  40adc9:	js     0x40ae03
  40adcb:	ss pop rdi
  40adcd:	ss xor al,0x2d
  40add0:	ja     0x40ae08
  40add2:	xor    al,0x2d
  40add4:	ins    DWORD PTR es:[rdi],dx
  40add5:	imul   ebp,DWORD PTR [rsi+0x67],0x2f323377
  40addc:	jae    0x40ae46
  40adde:	(bad)  
  40addf:	jb     0x40ae46
  40ade1:	(bad)  
  40ade2:	ins    BYTE PTR es:[rdi],dx
  40ade3:	outs   dx,DWORD PTR ds:[rsi]
  40ade4:	movsxd esp,DWORD PTR [rcx+0x6c]
  40ade7:	add    BYTE PTR gs:[rax],al
  40adea:	add    BYTE PTR [rax],al
  40adec:	add    BYTE PTR [rax],al
  40adee:	add    BYTE PTR [rax],al
  40adf0:	(bad)  
  40adf1:	jae    0x40ae56
  40adf3:	jb     0x40ae56
  40adf5:	je     0x40ae5a
  40adf7:	push   0x65776a2f
  40adfc:	(bad)  
  40adfd:	ins    DWORD PTR es:[rdi],dx
  40adfe:	js     0x40ae65
  40ae00:	sub    eax,0x6174636f
  40ae05:	jbe    0x40ae6c
  40ae07:	(bad)  
  40ae08:	xor    al,0x2e
  40ae0a:	xor    ch,BYTE PTR [rsi]
  40ae0c:	xor    DWORD PTR [rdi],ebp
  40ae0e:	ja     0x40ae46
  40ae10:	xor    al,0x2d
  40ae12:	xor    esi,DWORD PTR [rdx]
  40ae14:	(bad)  
  40ae15:	jne    0x40ae8a
  40ae17:	jb     0x40ae48
  40ae19:	js     0x40ae53
  40ae1b:	ss pop rdi
  40ae1d:	ss xor al,0x2d
  40ae20:	ja     0x40ae58
  40ae22:	xor    al,0x2d
  40ae24:	ins    DWORD PTR es:[rdi],dx
  40ae25:	imul   ebp,DWORD PTR [rsi+0x67],0x2f323377
  40ae2c:	jae    0x40ae96
  40ae2e:	(bad)  
  40ae2f:	jb     0x40ae96
  40ae31:	(bad)  
  40ae32:	outs   dx,DWORD PTR fs:[rsi]
  40ae34:	movsxd ebp,DWORD PTR [rdi]
  40ae36:	(bad)  
  40ae37:	jo     0x40aea8
  40ae39:	jae    0x40aeaf
  40ae3b:	addr32 jb 0x40aea3
  40ae3e:	jae    0x40aeb1
  40ae40:	ins    BYTE PTR es:[rdi],dx
  40ae41:	add    BYTE PTR [rax],al
  40ae43:	add    BYTE PTR [rax],al
  40ae45:	add    BYTE PTR [rax],al
  40ae47:	add    BYTE PTR [rdi],ch
  40ae49:	jae    0x40aeae
  40ae4b:	jb     0x40aeae
  40ae4d:	je     0x40aeb2
  40ae4f:	push   0x65776a2f
  40ae54:	(bad)  
  40ae55:	ins    DWORD PTR es:[rdi],dx
  40ae56:	js     0x40aebd
  40ae58:	sub    eax,0x6174636f
  40ae5d:	jbe    0x40aec4
  40ae5f:	(bad)  
  40ae60:	xor    al,0x2e
  40ae62:	xor    ch,BYTE PTR [rsi]
  40ae64:	xor    DWORD PTR [rdi],ebp
  40ae66:	ja     0x40ae9e
  40ae68:	xor    al,0x2d
  40ae6a:	xor    esi,DWORD PTR [rdx]
  40ae6c:	(bad)  
  40ae6d:	jne    0x40aee2
  40ae6f:	jb     0x40aea0
  40ae71:	js     0x40aeab
  40ae73:	ss pop rdi
  40ae75:	ss xor al,0x2d
  40ae78:	ja     0x40aeb0
  40ae7a:	xor    al,0x2d
  40ae7c:	ins    DWORD PTR es:[rdi],dx
  40ae7d:	imul   ebp,DWORD PTR [rsi+0x67],0x2f323377
  40ae84:	jae    0x40aeee
  40ae86:	(bad)  
  40ae87:	jb     0x40aeee
  40ae89:	(bad)  
  40ae8a:	ins    DWORD PTR es:[rdi],dx
  40ae8b:	(bad)  
  40ae8c:	outs   dx,BYTE PTR ds:[rsi]
  40ae8d:	add    BYTE PTR [rcx+0x50],al
  40ae90:	push   rax
  40ae91:	rex.R
  40ae92:	push   r12
  40ae94:	add    BYTE PTR [rip+0x6f702f73],spl        # 0x6fb0de0e
  40ae9b:	jae    0x40af11
  40ae9d:	addr32 jb 0x40af05
  40aea0:	jae    0x40af13
  40aea2:	ins    BYTE PTR es:[rdi],dx
	...
  40aebf:	add    BYTE PTR [rbp+0x6e],dh
  40aec2:	jb     0x40af29
  40aec4:	movsxd ebp,DWORD PTR [rdi+0x67]
  40aec7:	outs   dx,BYTE PTR ds:[rsi]
  40aec8:	imul   edi,DWORD PTR [rdx+0x65],0x69772064
  40aecf:	outs   dx,BYTE PTR ds:[rsi]
  40aed0:	xor    esi,DWORD PTR [rdx]
  40aed2:	and    BYTE PTR [rbp+0x72],ah
  40aed5:	jb     0x40af46
  40aed7:	jb     0x40aef9
  40aed9:	movsxd ebp,DWORD PTR [rdi+0x64]
  40aedc:	cmp    ah,BYTE PTR gs:[rax]
  40aedf:	and    eax,0x756c
	...
  40af00:	add    DWORD PTR [rax],eax
  40af02:	add    BYTE PTR [rax],al
  40af04:	(bad)  
  40af05:	add    BYTE PTR [rax],al
  40af07:	add    BYTE PTR [rdx],al
  40af09:	add    BYTE PTR [rax],al
  40af0b:	add    BYTE PTR [rdx],al
  40af0d:	add    BYTE PTR [rax],al
  40af0f:	add    BYTE PTR [rbx],al
  40af11:	add    BYTE PTR [rax],al
  40af13:	add    BYTE PTR [rdx],al
  40af15:	add    BYTE PTR [rax],al
  40af17:	add    BYTE PTR [rax+rax*1],al
  40af1a:	add    BYTE PTR [rax],al
  40af1c:	sbb    BYTE PTR [rax],al
  40af1e:	add    BYTE PTR [rax],al
  40af20:	add    eax,0xd000000
  40af25:	add    BYTE PTR [rax],al
  40af27:	add    BYTE PTR [rsi],al
  40af29:	add    BYTE PTR [rax],al
  40af2b:	add    BYTE PTR [rcx],cl
  40af2d:	add    BYTE PTR [rax],al
  40af2f:	add    BYTE PTR [rdi],al
  40af31:	add    BYTE PTR [rax],al
  40af33:	add    BYTE PTR [rax+rax*1],cl
  40af36:	add    BYTE PTR [rax],al
  40af38:	or     BYTE PTR [rax],al
  40af3a:	add    BYTE PTR [rax],al
  40af3c:	or     al,0x0
  40af3e:	add    BYTE PTR [rax],al
  40af40:	or     DWORD PTR [rax],eax
  40af42:	add    BYTE PTR [rax],al
  40af44:	or     al,0x0
  40af46:	add    BYTE PTR [rax],al
  40af48:	or     al,BYTE PTR [rax]
  40af4a:	add    BYTE PTR [rax],al
  40af4c:	(bad)  
  40af4d:	add    BYTE PTR [rax],al
  40af4f:	add    BYTE PTR [rbx],cl
  40af51:	add    BYTE PTR [rax],al
  40af53:	add    BYTE PTR [rax],cl
  40af55:	add    BYTE PTR [rax],al
  40af57:	add    BYTE PTR [rax+rax*1],cl
  40af5a:	add    BYTE PTR [rax],al
  40af5c:	(bad)  
  40af5d:	add    BYTE PTR [rax],al
  40af5f:	add    BYTE PTR [rip+0x16000000],cl        # 0x1640af65
  40af65:	add    BYTE PTR [rax],al
  40af67:	add    BYTE PTR [rdi],cl
  40af69:	add    BYTE PTR [rax],al
  40af6b:	add    BYTE PTR [rdx],al
  40af6d:	add    BYTE PTR [rax],al
  40af6f:	add    BYTE PTR [rax],dl
  40af71:	add    BYTE PTR [rax],al
  40af73:	add    BYTE PTR [rip+0x11000000],cl        # 0x1140af79
  40af79:	add    BYTE PTR [rax],al
  40af7b:	add    BYTE PTR [rdx],dl
  40af7d:	add    BYTE PTR [rax],al
  40af7f:	add    BYTE PTR [rdx],dl
  40af81:	add    BYTE PTR [rax],al
  40af83:	add    BYTE PTR [rdx],al
  40af85:	add    BYTE PTR [rax],al
  40af87:	add    BYTE PTR [rcx],ah
  40af89:	add    BYTE PTR [rax],al
  40af8b:	add    BYTE PTR [rip+0x20000000],cl        # 0x2040af91
  40af91:	add    BYTE PTR [rax],al
  40af93:	add    BYTE PTR [rip+0x35000000],cl        # 0x3540af99
  40af99:	add    BYTE PTR [rax],al
  40af9b:	add    BYTE PTR [rdx],al
  40af9d:	add    BYTE PTR [rax],al
  40af9f:	add    BYTE PTR [rcx+0x0],al
  40afa2:	add    BYTE PTR [rax],al
  40afa4:	or     eax,0x43000000
  40afa9:	add    BYTE PTR [rax],al
  40afab:	add    BYTE PTR [rdx],al
  40afad:	add    BYTE PTR [rax],al
  40afaf:	add    BYTE PTR [rax+0x0],dl
  40afb2:	add    BYTE PTR [rax],al
  40afb4:	adc    DWORD PTR [rax],eax
  40afb6:	add    BYTE PTR [rax],al
  40afb8:	push   rdx
  40afb9:	add    BYTE PTR [rax],al
  40afbb:	add    BYTE PTR [rip+0x53000000],cl        # 0x5340afc1
  40afc1:	add    BYTE PTR [rax],al
  40afc3:	add    BYTE PTR [rip+0x57000000],cl        # 0x5740afc9
  40afc9:	add    BYTE PTR [rax],al
  40afcb:	add    BYTE PTR [rsi],dl
  40afcd:	add    BYTE PTR [rax],al
  40afcf:	add    BYTE PTR [rcx+0x0],bl
  40afd2:	add    BYTE PTR [rax],al
  40afd4:	xor    esp,DWORD PTR [rdi]
  40afd6:	add    BYTE PTR [rax],al
  40afd8:	ins    BYTE PTR es:[rdi],dx
  40afd9:	add    BYTE PTR [rax],al
  40afdb:	add    BYTE PTR [rip+0x6d000000],cl        # 0x6d40afe1
  40afe1:	add    BYTE PTR [rax],al
  40afe3:	add    BYTE PTR [rax],ah
  40afe5:	add    BYTE PTR [rax],al
  40afe7:	add    BYTE PTR [rax+0x0],dh
  40afea:	add    BYTE PTR [rax],al
  40afec:	sbb    al,0x0
  40afee:	add    BYTE PTR [rax],al
  40aff0:	jb     0x40aff2
  40aff2:	add    BYTE PTR [rax],al
  40aff4:	or     DWORD PTR [rax],eax
  40aff6:	add    BYTE PTR [rax],al
  40aff8:	(bad)  
  40aff9:	add    BYTE PTR [rax],al
  40affb:	add    BYTE PTR [rsi],dl
  40affd:	add    BYTE PTR [rax],al
  40afff:	add    BYTE PTR [rax+0xa000000],al
  40b005:	add    BYTE PTR [rax],al
  40b007:	add    BYTE PTR [rcx+0xa000000],al
  40b00d:	add    BYTE PTR [rax],al
  40b00f:	add    BYTE PTR [rdx+0x9000000],al
  40b015:	add    BYTE PTR [rax],al
  40b017:	add    BYTE PTR [rbx+0x16000000],al
  40b01d:	add    BYTE PTR [rax],al
  40b01f:	add    BYTE PTR [rax+rax*1+0xd0000],al
  40b026:	add    BYTE PTR [rax],al
  40b028:	xchg   ecx,eax
  40b029:	add    BYTE PTR [rax],al
  40b02b:	add    BYTE PTR [rcx],ch
  40b02d:	add    BYTE PTR [rax],al
  40b02f:	add    BYTE PTR [rsi+0xd000000],bl
  40b035:	add    BYTE PTR [rax],al
  40b037:	add    BYTE PTR [rcx+0x2000000],ah
  40b03d:	add    BYTE PTR [rax],al
  40b03f:	add    BYTE PTR [rax+rax*1+0x27330000],ah
  40b046:	add    BYTE PTR [rax],al
  40b048:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
  40b049:	add    BYTE PTR [rax],al
  40b04b:	add    BYTE PTR [rip+0xffffffffb7000000],cl        # 0xffffffffb740b051
  40b051:	add    BYTE PTR [rax],al
  40b053:	add    BYTE PTR [rcx],dl
  40b055:	add    BYTE PTR [rax],al
  40b057:	add    dh,cl
  40b059:	add    BYTE PTR [rax],al
  40b05b:	add    BYTE PTR [rdx],al
  40b05d:	add    BYTE PTR [rax],al
  40b05f:	add    bh,dl
  40b061:	add    BYTE PTR [rax],al
  40b063:	add    BYTE PTR [rbx],dh
  40b065:	(bad)  
  40b066:	add    BYTE PTR [rax],al
  40b068:	sbb    BYTE PTR [rdi],al
  40b06a:	add    BYTE PTR [rax],al
  40b06c:	or     al,0x0
	...
  40b07e:	add    BYTE PTR [rax],al
  40b080:	rex (bad) 
  40b082:	add    BYTE PTR [rax],al
  40b085:	add    BYTE PTR [rax],al
  40b087:	add    BYTE PTR [rax-0x1b],al
  40b08a:	add    BYTE PTR [rax],al
  40b08d:	add    BYTE PTR [rax],al
  40b08f:	add    al,ah
  40b091:	pop    rbx
  40b092:	add    BYTE PTR [rax],al
	...
  40b09d:	add    BYTE PTR [rax],al
  40b09f:	add    BYTE PTR [rcx+0x72],al
  40b0a2:	addr32 jne 0x40b112
  40b0a5:	outs   dx,BYTE PTR gs:[rsi]
  40b0a7:	je     0x40b0c9
  40b0a9:	outs   dx,DWORD PTR fs:[rsi]
  40b0ab:	ins    DWORD PTR es:[rdi],dx
  40b0ac:	(bad)  
  40b0ad:	imul   ebp,DWORD PTR [rsi+0x20],0x6f727265
  40b0b4:	jb     0x40b0d6
  40b0b6:	sub    BYTE PTR [rdi+rcx*2+0x4d],al
  40b0ba:	rex.B
  40b0bb:	rex.WB
  40b0bc:	rex.WRX sub QWORD PTR [rax],r8
  40b0bf:	rex.B jb 0x40b129
  40b0c2:	jne    0x40b131
  40b0c4:	outs   dx,BYTE PTR gs:[rsi]
  40b0c6:	je     0x40b0e8
  40b0c8:	jae    0x40b133
  40b0ca:	outs   dx,BYTE PTR ds:[rsi]
  40b0cb:	addr32 jne 0x40b13a
  40b0ce:	(bad)  
  40b0cf:	jb     0x40b13a
  40b0d1:	je     0x40b14c
  40b0d3:	and    BYTE PTR [rax],ch
  40b0d5:	push   rbx
  40b0d6:	rex.WB
  40b0d7:	rex.RXB
  40b0d8:	rex.WRX sub QWORD PTR [rax],r8
  40b0db:	add    BYTE PTR [rax],al
  40b0dd:	add    BYTE PTR [rax],al
  40b0df:	add    BYTE PTR [rdi+0x76],cl
  40b0e2:	gs jb  0x40b14b
  40b0e5:	ins    BYTE PTR es:[rdi],dx
  40b0e6:	outs   dx,DWORD PTR ds:[rsi]
  40b0e7:	ja     0x40b109
  40b0e9:	jb     0x40b14c
  40b0eb:	outs   dx,BYTE PTR ds:[rsi]
  40b0ec:	and    BYTE PTR gs:[ebp+0x72],ah
  40b0f1:	jb     0x40b162
  40b0f3:	jb     0x40b115
  40b0f5:	sub    BYTE PTR [rdi+0x56],cl
  40b0f8:	rex.RB push r10
  40b0fa:	rex.RX
  40b0fb:	rex.WR
  40b0fc:	rex.WRXB push r15
  40b0fe:	sub    DWORD PTR [rax],eax
  40b100:	push   rax
  40b101:	(bad)  
  40b102:	jb     0x40b178
  40b104:	imul   esp,DWORD PTR [rcx+0x6c],0x736f6c20
  40b10b:	jae    0x40b12d
  40b10d:	outs   dx,DWORD PTR ds:[rsi]
  40b10e:	data16 and BYTE PTR [rbx+0x69],dh
  40b112:	outs   dx,BYTE PTR ds:[esi]
  40b114:	imul   esp,DWORD PTR [rsi+0x69],0x636e6163
  40b11b:	and    BYTE PTR gs:[rax],ch
  40b11e:	push   rax
  40b11f:	rex.WR
  40b120:	rex.WRXB push r11
  40b122:	push   rbx
  40b123:	sub    DWORD PTR [rax],eax
  40b125:	add    BYTE PTR [rax],al
  40b127:	add    BYTE PTR [rdi+rbp*2+0x74],dl
  40b12b:	(bad)  
  40b12c:	ins    BYTE PTR es:[rdi],dx
  40b12d:	and    BYTE PTR [rdi+rbp*2+0x73],ch
  40b131:	jae    0x40b153
  40b133:	outs   dx,DWORD PTR ds:[rsi]
  40b134:	data16 and BYTE PTR [rbx+0x69],dh
  40b138:	outs   dx,BYTE PTR ds:[esi]
  40b13a:	imul   esp,DWORD PTR [rsi+0x69],0x636e6163
  40b141:	and    BYTE PTR gs:[rax],ch
  40b144:	push   rsp
  40b145:	rex.WR
  40b146:	rex.WRXB push r11
  40b148:	push   rbx
  40b149:	sub    DWORD PTR [rax],eax
  40b14b:	add    BYTE PTR [rax],al
  40b14d:	add    BYTE PTR [rax],al
  40b14f:	add    BYTE PTR [rax+rbp*2+0x65],dl
  40b153:	and    BYTE PTR [rdx+0x65],dh
  40b156:	jae    0x40b1cd
  40b158:	ins    BYTE PTR es:[rdi],dx
  40b159:	je     0x40b17b
  40b15b:	imul   esi,DWORD PTR [rbx+0x20],0x206f6f74
  40b162:	jae    0x40b1d1
  40b164:	(bad)  
  40b165:	ins    BYTE PTR es:[rdi],dx
  40b166:	ins    BYTE PTR es:[rdi],dx
  40b167:	and    BYTE PTR [rdi+rbp*2+0x20],dh
  40b16b:	(bad)  
  40b16c:	and    BYTE PTR gs:[rdx+0x65],dh
  40b170:	jo     0x40b1e4
  40b172:	gs jae 0x40b1da
  40b175:	outs   dx,BYTE PTR ds:[rsi]
  40b176:	je     0x40b1dd
  40b178:	and    BYTE PTR fs:[rax],ch
  40b17b:	push   rbp
  40b17c:	rex.WRX
  40b17d:	rex.R
  40b17e:	rex.RB push r10
  40b180:	rex.RX
  40b181:	rex.WR
  40b182:	rex.WRXB push r15
  40b184:	sub    DWORD PTR [rax],eax
  40b186:	push   rbp
  40b187:	outs   dx,BYTE PTR ds:[rsi]
  40b188:	imul   ebp,DWORD PTR [rsi+0x6f],0x77
  40b18c:	outs   dx,BYTE PTR ds:[rsi]
  40b18d:	and    BYTE PTR [rbp+0x72],ah
  40b190:	jb     0x40b201
  40b192:	jb     0x40b194
  40b194:	add    BYTE PTR [rax],al
  40b196:	add    BYTE PTR [rax],al
  40b198:	pop    rdi
  40b199:	ins    DWORD PTR es:[rdi],dx
  40b19a:	(bad)  
  40b19b:	je     0x40b205
  40b19d:	gs jb  0x40b212
  40b1a0:	sub    BYTE PTR [rcx],ch
  40b1a2:	cmp    ah,BYTE PTR [rax]
  40b1a4:	and    eax,0x6e692073
  40b1a9:	and    BYTE PTR [rip+0x67252873],ah        # 0x6765da22
  40b1af:	sub    al,0x20
  40b1b1:	and    eax,0x20202967
  40b1b6:	sub    BYTE PTR [rdx+0x65],dh
  40b1b9:	je     0x40b231
  40b1bb:	(bad)  
  40b1bc:	ins    BYTE PTR es:[rdi],dx
  40b1bd:	cmp    eax,0xa296725
  40b1c2:	add    BYTE PTR [rax],al
  40b1c4:	in     al,dx
  40b1c5:	stos   DWORD PTR es:[rdi],eax
  40b1c6:	(bad)  
  40b1c7:	jmp    FWORD PTR [rip+0xffffffff9cffffab]        # 0xffffffff9d40b178
  40b1cd:	stos   DWORD PTR es:[rdi],eax
  40b1ce:	(bad)  
  40b1cf:	jmp    FWORD PTR [rbx+rbp*4-0x54430001]
  40b1d6:	(bad)  
  40b1d7:	dec    esp
  40b1d9:	stos   DWORD PTR es:[rdi],eax
  40b1da:	(bad)  
  40b1db:	(bad)  
  40b1dc:	fsubr  QWORD PTR [rbx+0x694dffff]
  40b1e2:	outs   dx,BYTE PTR ds:[rsi]
  40b1e3:	addr32 ja 0x40b213
  40b1e6:	ja     0x40b21e
  40b1e8:	xor    al,0x20
  40b1ea:	jb     0x40b261
  40b1ec:	outs   dx,BYTE PTR ds:[rsi]
  40b1ed:	je     0x40b258
  40b1ef:	ins    DWORD PTR es:[rdi],dx
  40b1f0:	and    BYTE PTR gs:[rsi+0x61],ah
  40b1f4:	imul   ebp,DWORD PTR [rbp+rsi*2+0x72],0xa3a65
  40b1fc:	add    BYTE PTR [rax],al
  40b1fe:	add    BYTE PTR [rax],al
  40b200:	rex.B
  40b201:	fs fs jb 0x40b26a
  40b205:	jae    0x40b27a
  40b207:	and    BYTE PTR [rip+0x61682070],ah        # 0x61a8d27d
  40b20d:	jae    0x40b22f
  40b20f:	outs   dx,BYTE PTR ds:[rsi]
  40b210:	outs   dx,DWORD PTR ds:[rsi]
  40b211:	and    BYTE PTR [rcx+0x6d],ch
  40b214:	(bad)  
  40b215:	addr32 gs sub eax,0x74636573
  40b21c:	imul   ebp,DWORD PTR [rdi+0x6e],0x56202000
  40b223:	imul   esi,DWORD PTR [rdx+0x74],0x516c6175
  40b22a:	jne    0x40b291
  40b22c:	jb     0x40b2a7
  40b22e:	and    BYTE PTR [rsi+0x61],ah
  40b231:	imul   ebp,DWORD PTR [rbp+riz*2+0x64],0x726f6620
  40b239:	and    BYTE PTR [rip+0x79622064],ah        # 0x79a2d2a3
  40b23f:	je     0x40b2a6
  40b241:	jae    0x40b263
  40b243:	(bad)  
  40b244:	je     0x40b266
  40b246:	(bad)  
  40b247:	fs fs jb 0x40b2b0
  40b24b:	jae    0x40b2c0
  40b24d:	and    BYTE PTR [rip+0x70],ah        # 0x40b2c3
  40b253:	add    BYTE PTR [rax],al
  40b255:	add    BYTE PTR [rax],al
  40b257:	add    BYTE PTR [rax],ah
  40b259:	and    BYTE PTR [rsi+0x69],dl
  40b25c:	jb     0x40b2d2
  40b25e:	jne    0x40b2c1
  40b260:	ins    BYTE PTR es:[rdi],dx
  40b261:	push   rax
  40b262:	jb     0x40b2d3
  40b264:	je     0x40b2cb
  40b266:	movsxd esi,DWORD PTR [rax+riz*1+0x66]
  40b26a:	(bad)  
  40b26b:	imul   ebp,DWORD PTR [rbp+riz*2+0x64],0x74697720
  40b273:	push   0x646f6320
  40b278:	and    BYTE PTR gs:[rax],dh
  40b27b:	js     0x40b2a2
  40b27d:	js     0x40b27f
  40b27f:	add    BYTE PTR [rax],ah
  40b281:	and    BYTE PTR [rbp+0x6e],dl
  40b284:	imul   ebp,DWORD PTR [rsi+0x6f],0x77
  40b288:	outs   dx,BYTE PTR ds:[rsi]
  40b289:	and    BYTE PTR [rax+0x73],dh
  40b28c:	gs jne 0x40b2f3
  40b28f:	outs   dx,DWORD PTR ds:[rsi]
  40b290:	and    BYTE PTR [rdx+0x65],dh
  40b293:	ins    BYTE PTR es:[rdi],dx
  40b294:	outs   dx,DWORD PTR ds:[rsi]
  40b295:	movsxd esp,DWORD PTR [rcx+0x74]
  40b298:	imul   ebp,DWORD PTR [rdi+0x6e],0x6f727020
  40b29f:	je     0x40b310
  40b2a1:	movsxd ebp,DWORD PTR [rdi+0x6c]
  40b2a4:	and    BYTE PTR [rsi+0x65],dh
  40b2a7:	jb     0x40b31c
  40b2a9:	imul   ebp,DWORD PTR [rdi+0x6e],0x2e642520
  40b2b0:	or     al,BYTE PTR [rax]
  40b2b2:	add    BYTE PTR [rax],al
  40b2b4:	add    BYTE PTR [rax],al
  40b2b6:	add    BYTE PTR [rax],al
  40b2b8:	and    BYTE PTR [rax],ah
  40b2ba:	push   rbp
  40b2bb:	outs   dx,BYTE PTR ds:[rsi]
  40b2bc:	imul   ebp,DWORD PTR [rsi+0x6f],0x77
  40b2c0:	outs   dx,BYTE PTR ds:[rsi]
  40b2c1:	and    BYTE PTR [rax+0x73],dh
  40b2c4:	gs jne 0x40b32b
  40b2c7:	outs   dx,DWORD PTR ds:[rsi]
  40b2c8:	and    BYTE PTR [rdx+0x65],dh
  40b2cb:	ins    BYTE PTR es:[rdi],dx
  40b2cc:	outs   dx,DWORD PTR ds:[rsi]
  40b2cd:	movsxd esp,DWORD PTR [rcx+0x74]
  40b2d0:	imul   ebp,DWORD PTR [rdi+0x6e],0x74696220
  40b2d7:	and    BYTE PTR [rbx+0x69],dh
  40b2da:	jp     0x40b341
  40b2dc:	and    BYTE PTR [rip+0xa2e64],ah        # 0x4ae146
	...
  40b2ee:	add    BYTE PTR [rax],al
  40b2f0:	cs jo  0x40b357
  40b2f3:	(bad)  
  40b2f4:	je     0x40b357
	...
  40b2fe:	add    BYTE PTR [rax],al
  40b300:	rex add BYTE PTR [rax+0x0],0x0
	...
  40b30d:	add    BYTE PTR [rax],al
  40b30f:	add    BYTE PTR [rax-0x80],dl
  40b312:	add    BYTE PTR [rax],al
	...
  40b31d:	add    BYTE PTR [rax],al
  40b31f:	add    BYTE PTR [rax+0x76],al
  40b322:	add    BYTE PTR [rax],al
	...
  40b331:	mov    edx,0x40
	...
  40b33e:	add    BYTE PTR [rax],al
  40b340:	add    BYTE PTR [rdx+0x40],bh
	...
  40b34e:	add    BYTE PTR [rax],al
  40b350:	nop
  40b351:	mov    al,0x40
	...
  40b35f:	add    BYTE PTR [rax],al
  40b361:	add    BYTE PTR [rax+0x0],al
	...
  40b370:	mov    ch,dh
  40b372:	add    BYTE PTR [rax],al
	...
  40b37d:	add    BYTE PTR [rax],al
  40b37f:	add    BYTE PTR [rax+0x40f5],dh
	...
  40b38d:	add    BYTE PTR [rax],al
  40b38f:	add    al,dl
  40b391:	cmc    
  40b392:	add    BYTE PTR [rax],al
	...
  40b39d:	add    BYTE PTR [rax],al
  40b39f:	add    al,ch
  40b3a1:	cmc    
  40b3a2:	add    BYTE PTR [rax],al
	...
  40b3ad:	add    BYTE PTR [rax],al
  40b3af:	add    BYTE PTR [rax+0x40eb],al
	...
  40b3bd:	add    BYTE PTR [rax],al
  40b3bf:	add    al,ch
  40b3c1:	out    dx,al
  40b3c2:	add    BYTE PTR [rax],al
	...
  40b3cd:	add    BYTE PTR [rax],al
  40b3cf:	add    al,ah
  40b3d1:	out    dx,al
  40b3d2:	add    BYTE PTR [rax],al
	...
  40b3dd:	add    BYTE PTR [rax],al
  40b3df:	add    al,dl
  40b3e1:	out    dx,al
  40b3e2:	add    BYTE PTR [rax],al
	...
  40b3ed:	add    BYTE PTR [rax],al
  40b3ef:	add    al,bl
  40b3f1:	out    dx,al
  40b3f2:	add    BYTE PTR [rax],al
	...
  40b401:	add    BYTE PTR [rcx+0x0],al
	...
  40b410:	adc    BYTE PTR [rax],al
  40b412:	add    BYTE PTR [r8],al
	...
  40b41d:	add    BYTE PTR [rax],al
  40b41f:	add    BYTE PTR [rax],bl
  40b421:	add    BYTE PTR [rcx+0x0],al
	...
  40b430:	xor    BYTE PTR [rax],al
  40b432:	add    BYTE PTR [r8],al
	...
  40b43d:	add    BYTE PTR [rax],al
  40b43f:	add    BYTE PTR [rax],dl
  40b441:	in     eax,0x40
	...
  40b44f:	add    BYTE PTR [rax-0x15],dl
  40b452:	add    BYTE PTR [rax],al
	...
  40b45d:	add    BYTE PTR [rax],al
  40b45f:	add    BYTE PTR [rax+0x65],dh
  40b462:	add    BYTE PTR [rax],al
	...
  40b46d:	add    BYTE PTR [rax],al
  40b46f:	add    al,al
  40b471:	pop    rsp
  40b472:	add    BYTE PTR [rax],al
	...
  40b481:	jmp    0x40b4c3
	...
  40b48f:	add    BYTE PTR [rax],dh
  40b491:	jmp    0x40b4d3
	...
  40b49f:	add    BYTE PTR [rax],ah
  40b4a1:	in     eax,0x40
	...
  40b4af:	add    BYTE PTR [rax],bl
  40b4b1:	jmp    0x40b4f3
	...
  40b4bf:	add    BYTE PTR [rbx+rbp*8],dl
  40b4c2:	add    BYTE PTR [rax],al
	...
  40b4cd:	add    BYTE PTR [rax],al
  40b4cf:	add    BYTE PTR [rax],dl
  40b4d1:	jmp    0x40b513
	...
  40b4df:	add    BYTE PTR [rdi+0x43],al
  40b4e2:	rex.XB cmp spl,BYTE PTR [r8]
  40b4e5:	sub    BYTE PTR [rdi+0x4e],al
  40b4e8:	push   rbp
  40b4e9:	sub    DWORD PTR [rax],esp
  40b4eb:	xor    al,0x2e
  40b4ed:	cmp    DWORD PTR [rsi],ebp
  40b4ef:	xor    al,0x0
	...
  40b4fd:	add    BYTE PTR [rax],al
  40b4ff:	add    BYTE PTR [rdi+0x43],al
  40b502:	rex.XB cmp spl,BYTE PTR [r8]
  40b505:	sub    BYTE PTR [rdi+0x4e],al
  40b508:	push   rbp
  40b509:	sub    DWORD PTR [rax],esp
  40b50b:	xor    al,0x2e
  40b50d:	cmp    DWORD PTR [rsi],ebp
  40b50f:	xor    al,0x0
	...
  40b51d:	add    BYTE PTR [rax],al
  40b51f:	add    BYTE PTR [rdi+0x43],al
  40b522:	rex.XB cmp spl,BYTE PTR [r8]
  40b525:	sub    BYTE PTR [rdi+0x4e],al
  40b528:	push   rbp
  40b529:	sub    DWORD PTR [rax],esp
  40b52b:	xor    al,0x2e
  40b52d:	cmp    DWORD PTR [rsi],ebp
  40b52f:	xor    al,0x0
	...
  40b53d:	add    BYTE PTR [rax],al
  40b53f:	add    BYTE PTR [rdi+0x43],al
  40b542:	rex.XB cmp spl,BYTE PTR [r8]
  40b545:	sub    BYTE PTR [rdi+0x4e],al
  40b548:	push   rbp
  40b549:	sub    DWORD PTR [rax],esp
  40b54b:	xor    al,0x2e
  40b54d:	cmp    DWORD PTR [rsi],ebp
  40b54f:	xor    al,0x0
	...
  40b55d:	add    BYTE PTR [rax],al
  40b55f:	add    BYTE PTR [rdi+0x43],al
  40b562:	rex.XB cmp spl,BYTE PTR [r8]
  40b565:	sub    BYTE PTR [rdi+0x4e],al
  40b568:	push   rbp
  40b569:	sub    DWORD PTR [rax],esp
  40b56b:	xor    al,0x2e
  40b56d:	cmp    DWORD PTR [rsi],ebp
  40b56f:	xor    al,0x0
	...
  40b57d:	add    BYTE PTR [rax],al
  40b57f:	add    BYTE PTR [rdi+0x43],al
  40b582:	rex.XB cmp spl,BYTE PTR [r8]
  40b585:	sub    BYTE PTR [rdi+0x4e],al
  40b588:	push   rbp
  40b589:	sub    DWORD PTR [rax],esp
  40b58b:	xor    al,0x2e
  40b58d:	cmp    DWORD PTR [rsi],ebp
  40b58f:	xor    al,0x0
	...
  40b59d:	add    BYTE PTR [rax],al
  40b59f:	add    BYTE PTR [rdi+0x43],al
  40b5a2:	rex.XB cmp spl,BYTE PTR [r8]
  40b5a5:	sub    BYTE PTR [rdi+0x4e],al
  40b5a8:	push   rbp
  40b5a9:	sub    DWORD PTR [rax],esp
  40b5ab:	xor    al,0x2e
  40b5ad:	cmp    DWORD PTR [rsi],ebp
  40b5af:	xor    al,0x0
	...
  40b5bd:	add    BYTE PTR [rax],al
  40b5bf:	add    BYTE PTR [rdi+0x43],al
  40b5c2:	rex.XB cmp spl,BYTE PTR [r8]
  40b5c5:	sub    BYTE PTR [rdi+0x4e],al
  40b5c8:	push   rbp
  40b5c9:	sub    DWORD PTR [rax],esp
  40b5cb:	xor    al,0x2e
  40b5cd:	cmp    DWORD PTR [rsi],ebp
  40b5cf:	xor    al,0x0
	...
  40b5dd:	add    BYTE PTR [rax],al
  40b5df:	add    BYTE PTR [rdi+0x43],al
  40b5e2:	rex.XB cmp spl,BYTE PTR [r8]
  40b5e5:	sub    BYTE PTR [rdi+0x4e],al
  40b5e8:	push   rbp
  40b5e9:	sub    DWORD PTR [rax],esp
  40b5eb:	xor    al,0x2e
  40b5ed:	cmp    DWORD PTR [rsi],ebp
  40b5ef:	xor    al,0x0
	...
  40b5fd:	add    BYTE PTR [rax],al
  40b5ff:	add    BYTE PTR [rdi+0x43],al
  40b602:	rex.XB cmp spl,BYTE PTR [r8]
  40b605:	sub    BYTE PTR [rdi+0x4e],al
  40b608:	push   rbp
  40b609:	sub    DWORD PTR [rax],esp
  40b60b:	xor    al,0x2e
  40b60d:	cmp    DWORD PTR [rsi],ebp
  40b60f:	xor    al,0x0
	...
  40b61d:	add    BYTE PTR [rax],al
  40b61f:	add    BYTE PTR [rdi+0x43],al
  40b622:	rex.XB cmp spl,BYTE PTR [r8]
  40b625:	sub    BYTE PTR [rdi+0x4e],al
  40b628:	push   rbp
  40b629:	sub    DWORD PTR [rax],esp
  40b62b:	xor    al,0x2e
  40b62d:	cmp    DWORD PTR [rsi],ebp
  40b62f:	xor    al,0x0
	...
  40b63d:	add    BYTE PTR [rax],al
  40b63f:	add    BYTE PTR [rdi+0x43],al
  40b642:	rex.XB cmp spl,BYTE PTR [r8]
  40b645:	sub    BYTE PTR [rdi+0x4e],al
  40b648:	push   rbp
  40b649:	sub    DWORD PTR [rax],esp
  40b64b:	xor    al,0x2e
  40b64d:	cmp    DWORD PTR [rsi],ebp
  40b64f:	xor    al,0x0
	...
  40b65d:	add    BYTE PTR [rax],al
  40b65f:	add    BYTE PTR [rdi+0x43],al
  40b662:	rex.XB cmp spl,BYTE PTR [r8]
  40b665:	sub    BYTE PTR [rdi+0x4e],al
  40b668:	push   rbp
  40b669:	sub    DWORD PTR [rax],esp
  40b66b:	xor    al,0x2e
  40b66d:	cmp    DWORD PTR [rsi],ebp
  40b66f:	xor    al,0x0
	...
  40b67d:	add    BYTE PTR [rax],al
  40b67f:	add    BYTE PTR [rdi+0x43],al
  40b682:	rex.XB cmp spl,BYTE PTR [r8]
  40b685:	sub    BYTE PTR [rdi+0x4e],al
  40b688:	push   rbp
  40b689:	sub    DWORD PTR [rax],esp
  40b68b:	xor    al,0x2e
  40b68d:	cmp    DWORD PTR [rsi],ebp
  40b68f:	xor    al,0x0
	...
  40b69d:	add    BYTE PTR [rax],al
  40b69f:	add    BYTE PTR [rdi+0x43],al
  40b6a2:	rex.XB cmp spl,BYTE PTR [r8]
  40b6a5:	sub    BYTE PTR [rdi+0x4e],al
  40b6a8:	push   rbp
  40b6a9:	sub    DWORD PTR [rax],esp
  40b6ab:	xor    al,0x2e
  40b6ad:	cmp    DWORD PTR [rsi],ebp
  40b6af:	xor    al,0x0
	...
  40b6bd:	add    BYTE PTR [rax],al
  40b6bf:	add    BYTE PTR [rdi+0x43],al
  40b6c2:	rex.XB cmp spl,BYTE PTR [r8]
  40b6c5:	sub    BYTE PTR [rdi+0x4e],al
  40b6c8:	push   rbp
  40b6c9:	sub    DWORD PTR [rax],esp
  40b6cb:	xor    al,0x2e
  40b6cd:	cmp    DWORD PTR [rsi],ebp
  40b6cf:	xor    al,0x0
	...
  40b6dd:	add    BYTE PTR [rax],al
  40b6df:	add    BYTE PTR [rdi+0x43],al
  40b6e2:	rex.XB cmp spl,BYTE PTR [r8]
  40b6e5:	sub    BYTE PTR [rdi+0x4e],al
  40b6e8:	push   rbp
  40b6e9:	sub    DWORD PTR [rax],esp
  40b6eb:	xor    al,0x2e
  40b6ed:	cmp    DWORD PTR [rsi],ebp
  40b6ef:	xor    al,0x0
	...
  40b6fd:	add    BYTE PTR [rax],al
  40b6ff:	add    BYTE PTR [rdi+0x43],al
  40b702:	rex.XB cmp spl,BYTE PTR [r8]
  40b705:	sub    BYTE PTR [rdi+0x4e],al
  40b708:	push   rbp
  40b709:	sub    DWORD PTR [rax],esp
  40b70b:	xor    al,0x2e
  40b70d:	cmp    DWORD PTR [rsi],ebp
  40b70f:	xor    al,0x0
	...
  40b71d:	add    BYTE PTR [rax],al
  40b71f:	add    BYTE PTR [rdi+0x43],al
  40b722:	rex.XB cmp spl,BYTE PTR [r8]
  40b725:	sub    BYTE PTR [rdi+0x4e],al
  40b728:	push   rbp
  40b729:	sub    DWORD PTR [rax],esp
  40b72b:	xor    al,0x2e
  40b72d:	cmp    DWORD PTR [rsi],ebp
  40b72f:	xor    al,0x0
	...
  40b73d:	add    BYTE PTR [rax],al
  40b73f:	add    BYTE PTR [rdi+0x43],al
  40b742:	rex.XB cmp spl,BYTE PTR [r8]
  40b745:	sub    BYTE PTR [rdi+0x4e],al
  40b748:	push   rbp
  40b749:	sub    DWORD PTR [rax],esp
  40b74b:	xor    al,0x2e
  40b74d:	cmp    DWORD PTR [rsi],ebp
  40b74f:	xor    al,0x0
	...
  40b75d:	add    BYTE PTR [rax],al
  40b75f:	add    BYTE PTR [rdi+0x43],al
  40b762:	rex.XB cmp spl,BYTE PTR [r8]
  40b765:	sub    BYTE PTR [rdi+0x4e],al
  40b768:	push   rbp
  40b769:	sub    DWORD PTR [rax],esp
  40b76b:	xor    al,0x2e
  40b76d:	cmp    DWORD PTR [rsi],ebp
  40b76f:	xor    al,0x0
	...
  40b77d:	add    BYTE PTR [rax],al
  40b77f:	add    BYTE PTR [rdi+0x43],al
  40b782:	rex.XB cmp spl,BYTE PTR [r8]
  40b785:	sub    BYTE PTR [rdi+0x4e],al
  40b788:	push   rbp
  40b789:	sub    DWORD PTR [rax],esp
  40b78b:	xor    al,0x2e
  40b78d:	cmp    DWORD PTR [rsi],ebp
  40b78f:	xor    al,0x0
	...
  40b79d:	add    BYTE PTR [rax],al
  40b79f:	add    BYTE PTR [rdi+0x43],al
  40b7a2:	rex.XB cmp spl,BYTE PTR [r8]
  40b7a5:	sub    BYTE PTR [rdi+0x4e],al
  40b7a8:	push   rbp
  40b7a9:	sub    DWORD PTR [rax],esp
  40b7ab:	xor    al,0x2e
  40b7ad:	cmp    DWORD PTR [rsi],ebp
  40b7af:	xor    al,0x0
	...
  40b7bd:	add    BYTE PTR [rax],al
  40b7bf:	add    BYTE PTR [rdi+0x43],al
  40b7c2:	rex.XB cmp spl,BYTE PTR [r8]
  40b7c5:	sub    BYTE PTR [rdi+0x4e],al
  40b7c8:	push   rbp
  40b7c9:	sub    DWORD PTR [rax],esp
  40b7cb:	xor    al,0x2e
  40b7cd:	cmp    DWORD PTR [rsi],ebp
  40b7cf:	xor    al,0x0
	...
  40b7dd:	add    BYTE PTR [rax],al
  40b7df:	add    BYTE PTR [rdi+0x43],al
  40b7e2:	rex.XB cmp spl,BYTE PTR [r8]
  40b7e5:	sub    BYTE PTR [rdi+0x4e],al
  40b7e8:	push   rbp
  40b7e9:	sub    DWORD PTR [rax],esp
  40b7eb:	xor    al,0x2e
  40b7ed:	cmp    DWORD PTR [rsi],ebp
  40b7ef:	xor    al,0x0
	...
  40b7fd:	add    BYTE PTR [rax],al
  40b7ff:	add    BYTE PTR [rdi+0x43],al
  40b802:	rex.XB cmp spl,BYTE PTR [r8]
  40b805:	sub    BYTE PTR [rdi+0x4e],al
  40b808:	push   rbp
  40b809:	sub    DWORD PTR [rax],esp
  40b80b:	xor    al,0x2e
  40b80d:	cmp    DWORD PTR [rsi],ebp
  40b80f:	xor    al,0x0
	...
  40b81d:	add    BYTE PTR [rax],al
  40b81f:	add    BYTE PTR [rdi+0x43],al
  40b822:	rex.XB cmp spl,BYTE PTR [r8]
  40b825:	sub    BYTE PTR [rdi+0x4e],al
  40b828:	push   rbp
  40b829:	sub    DWORD PTR [rax],esp
  40b82b:	xor    al,0x2e
  40b82d:	cmp    DWORD PTR [rsi],ebp
  40b82f:	xor    al,0x0
	...
  40b83d:	add    BYTE PTR [rax],al
  40b83f:	add    BYTE PTR [rdi+0x43],al
  40b842:	rex.XB cmp spl,BYTE PTR [r8]
  40b845:	sub    BYTE PTR [rdi+0x4e],al
  40b848:	push   rbp
  40b849:	sub    DWORD PTR [rax],esp
  40b84b:	xor    al,0x2e
  40b84d:	cmp    DWORD PTR [rsi],ebp
  40b84f:	xor    al,0x0
	...
  40b85d:	add    BYTE PTR [rax],al
  40b85f:	add    BYTE PTR [rdi+0x43],al
  40b862:	rex.XB cmp spl,BYTE PTR [r8]
  40b865:	sub    BYTE PTR [rdi+0x4e],al
  40b868:	push   rbp
  40b869:	sub    DWORD PTR [rax],esp
  40b86b:	xor    al,0x2e
  40b86d:	cmp    DWORD PTR [rsi],ebp
  40b86f:	xor    al,0x0
	...
  40b87d:	add    BYTE PTR [rax],al
  40b87f:	add    BYTE PTR [rdi+0x43],al
  40b882:	rex.XB cmp spl,BYTE PTR [r8]
  40b885:	sub    BYTE PTR [rdi+0x4e],al
  40b888:	push   rbp
  40b889:	sub    DWORD PTR [rax],esp
  40b88b:	xor    al,0x2e
  40b88d:	cmp    DWORD PTR [rsi],ebp
  40b88f:	xor    al,0x0
	...
  40b89d:	add    BYTE PTR [rax],al
  40b89f:	add    BYTE PTR [rdi+0x43],al
  40b8a2:	rex.XB cmp spl,BYTE PTR [r8]
  40b8a5:	sub    BYTE PTR [rdi+0x4e],al
  40b8a8:	push   rbp
  40b8a9:	sub    DWORD PTR [rax],esp
  40b8ab:	xor    al,0x2e
  40b8ad:	cmp    DWORD PTR [rsi],ebp
  40b8af:	xor    al,0x0
	...
  40b8bd:	add    BYTE PTR [rax],al
  40b8bf:	add    BYTE PTR [rdi+0x43],al
  40b8c2:	rex.XB cmp spl,BYTE PTR [r8]
  40b8c5:	sub    BYTE PTR [rdi+0x4e],al
  40b8c8:	push   rbp
  40b8c9:	sub    DWORD PTR [rax],esp
  40b8cb:	xor    al,0x2e
  40b8cd:	cmp    DWORD PTR [rsi],ebp
  40b8cf:	xor    al,0x0
	...
  40b8dd:	add    BYTE PTR [rax],al
  40b8df:	add    BYTE PTR [rdi+0x43],al
  40b8e2:	rex.XB cmp spl,BYTE PTR [r8]
  40b8e5:	sub    BYTE PTR [rdi+0x4e],al
  40b8e8:	push   rbp
  40b8e9:	sub    DWORD PTR [rax],esp
  40b8eb:	xor    al,0x2e
  40b8ed:	cmp    DWORD PTR [rsi],ebp
  40b8ef:	xor    al,0x0
	...
  40b8fd:	add    BYTE PTR [rax],al
  40b8ff:	add    BYTE PTR [rdi+0x43],al
  40b902:	rex.XB cmp spl,BYTE PTR [r8]
  40b905:	sub    BYTE PTR [rdi+0x4e],al
  40b908:	push   rbp
  40b909:	sub    DWORD PTR [rax],esp
  40b90b:	xor    al,0x2e
  40b90d:	cmp    DWORD PTR [rsi],ebp
  40b90f:	xor    al,0x0
	...
  40b91d:	add    BYTE PTR [rax],al
  40b91f:	add    BYTE PTR [rdi+0x43],al
  40b922:	rex.XB cmp spl,BYTE PTR [r8]
  40b925:	sub    BYTE PTR [rdi+0x4e],al
  40b928:	push   rbp
  40b929:	sub    DWORD PTR [rax],esp
  40b92b:	xor    al,0x2e
  40b92d:	cmp    DWORD PTR [rsi],ebp
  40b92f:	xor    al,0x0
	...
  40b93d:	add    BYTE PTR [rax],al
  40b93f:	add    BYTE PTR [rdi+0x43],al
  40b942:	rex.XB cmp spl,BYTE PTR [r8]
  40b945:	sub    BYTE PTR [rdi+0x4e],al
  40b948:	push   rbp
  40b949:	sub    DWORD PTR [rax],esp
  40b94b:	xor    al,0x2e
  40b94d:	cmp    DWORD PTR [rsi],ebp
  40b94f:	xor    al,0x0
	...
  40b95d:	add    BYTE PTR [rax],al
  40b95f:	add    BYTE PTR [rdi+0x43],al
  40b962:	rex.XB cmp spl,BYTE PTR [r8]
  40b965:	sub    BYTE PTR [rdi+0x4e],al
  40b968:	push   rbp
  40b969:	sub    DWORD PTR [rax],esp
  40b96b:	xor    al,0x2e
  40b96d:	cmp    DWORD PTR [rsi],ebp
  40b96f:	xor    al,0x0
	...
  40b97d:	add    BYTE PTR [rax],al
  40b97f:	add    BYTE PTR [rdi+0x43],al
  40b982:	rex.XB cmp spl,BYTE PTR [r8]
  40b985:	sub    BYTE PTR [rdi+0x4e],al
  40b988:	push   rbp
  40b989:	sub    DWORD PTR [rax],esp
  40b98b:	xor    al,0x2e
  40b98d:	cmp    DWORD PTR [rsi],ebp
  40b98f:	xor    al,0x0
	...
  40b99d:	add    BYTE PTR [rax],al
  40b99f:	add    BYTE PTR [rdi+0x43],al
  40b9a2:	rex.XB cmp spl,BYTE PTR [r8]
  40b9a5:	sub    BYTE PTR [rdi+0x4e],al
  40b9a8:	push   rbp
  40b9a9:	sub    DWORD PTR [rax],esp
  40b9ab:	xor    al,0x2e
  40b9ad:	cmp    DWORD PTR [rsi],ebp
  40b9af:	xor    al,0x0
	...
  40b9bd:	add    BYTE PTR [rax],al
  40b9bf:	add    BYTE PTR [rdi+0x43],al
  40b9c2:	rex.XB cmp spl,BYTE PTR [r8]
  40b9c5:	sub    BYTE PTR [rdi+0x4e],al
  40b9c8:	push   rbp
  40b9c9:	sub    DWORD PTR [rax],esp
  40b9cb:	xor    al,0x2e
  40b9cd:	cmp    DWORD PTR [rsi],ebp
  40b9cf:	xor    al,0x0
	...
  40b9dd:	add    BYTE PTR [rax],al
  40b9df:	add    BYTE PTR [rdi+0x43],al
  40b9e2:	rex.XB cmp spl,BYTE PTR [r8]
  40b9e5:	sub    BYTE PTR [rdi+0x4e],al
  40b9e8:	push   rbp
  40b9e9:	sub    DWORD PTR [rax],esp
  40b9eb:	xor    al,0x2e
  40b9ed:	cmp    DWORD PTR [rsi],ebp
  40b9ef:	xor    al,0x0
	...

Disassembly of section .pdata:

000000000040c000 <.pdata>:
  40c000:	add    BYTE PTR [rax],dl
  40c002:	add    BYTE PTR [rax],al
  40c004:	add    DWORD PTR [rax],edx
  40c006:	add    BYTE PTR [rax],al
  40c008:	add    al,dl
  40c00a:	add    BYTE PTR [rax],al
  40c00c:	adc    BYTE PTR [rax],dl
  40c00e:	add    BYTE PTR [rax],al
  40c010:	push   rcx
  40c011:	adc    DWORD PTR [rax],eax
  40c013:	add    BYTE PTR [rax+rdx*8],al
  40c016:	add    BYTE PTR [rax],al
  40c018:	(bad)  
  40c019:	adc    DWORD PTR [rax],eax
  40c01b:	add    BYTE PTR [rsi+0xc000011],ch
  40c021:	rol    BYTE PTR [rax],1
  40c023:	add    BYTE PTR [rax-0x31ffffef],dh
  40c029:	adc    al,0x0
  40c02b:	add    BYTE PTR [rax+rdx*8],dl
  40c02e:	add    BYTE PTR [rax],al
  40c030:	rcl    BYTE PTR [rax+rax*1],1
  40c033:	add    dl,dh
  40c035:	adc    al,0x0
  40c037:	add    BYTE PTR [rax],ch
  40c039:	rol    BYTE PTR [rax],1
  40c03b:	add    BYTE PTR [rax],al
  40c03d:	adc    eax,0x15220000
  40c042:	add    BYTE PTR [rax],al
  40c044:	rex.W rol BYTE PTR [rax],1
  40c047:	add    BYTE PTR [rax],dh
  40c049:	adc    eax,0x15540000
  40c04e:	add    BYTE PTR [rax],al
  40c050:	push   0x600000d0
  40c055:	adc    eax,0x158b0000
  40c05a:	add    BYTE PTR [rax],al
  40c05c:	jo     0x40c02e
  40c05e:	add    BYTE PTR [rax],al
  40c060:	nop
  40c061:	adc    eax,0x15bb0000
  40c066:	add    BYTE PTR [rax],al
  40c068:	js     0x40c03a
  40c06a:	add    BYTE PTR [rax],al
  40c06c:	rcl    BYTE PTR [rip+0x15eb0000],0x0        # 0x162bc073
  40c073:	add    BYTE PTR [rax-0xfffff30],al
  40c079:	adc    eax,0x161b0000
  40c07e:	add    BYTE PTR [rax],al
  40c080:	mov    al,dl
  40c082:	add    BYTE PTR [rax],al
  40c084:	and    BYTE PTR [rsi],dl
  40c086:	add    BYTE PTR [rax],al
  40c088:	rex.WXB (bad) 
  40c08a:	add    BYTE PTR [rax],al
  40c08c:	nop
  40c08d:	rol    BYTE PTR [rax],1
  40c08f:	add    BYTE PTR [rax+0x16],dl
  40c092:	add    BYTE PTR [rax],al
  40c094:	jnp    0x40c0ac
  40c096:	add    BYTE PTR [rax],al
  40c098:	cwde   
  40c099:	rol    BYTE PTR [rax],1
  40c09b:	add    BYTE PTR [rax-0x54ffffea],al
  40c0a1:	(bad)  
  40c0a2:	add    BYTE PTR [rax],al
  40c0a4:	movabs al,ds:0xdb000016b00000d0
  40c0ad:	(bad)  
  40c0ae:	add    BYTE PTR [rax],al
  40c0b0:	test   al,0xd0
  40c0b2:	add    BYTE PTR [rax],al
  40c0b4:	loopne 0x40c0cc
  40c0b6:	add    BYTE PTR [rax],al
  40c0b8:	or     edx,DWORD PTR [rdi]
  40c0ba:	add    BYTE PTR [rax],al
  40c0bc:	mov    al,0xd0
  40c0be:	add    BYTE PTR [rax],al
  40c0c0:	adc    BYTE PTR [rdi],dl
  40c0c2:	add    BYTE PTR [rax],al
  40c0c4:	push   rbx
  40c0c5:	(bad)  
  40c0c6:	add    BYTE PTR [rax],al
  40c0c8:	mov    eax,0x600000d0
  40c0cd:	(bad)  
  40c0ce:	add    BYTE PTR [rax],al
  40c0d0:	ret    0x17
  40c0d3:	add    al,al
  40c0d5:	rol    BYTE PTR [rax],1
  40c0d7:	add    al,dl
  40c0d9:	(bad)  
  40c0da:	add    BYTE PTR [rax],al
  40c0dc:	sbb    eax,0xcc000018
  40c0e1:	rol    BYTE PTR [rax],1
  40c0e3:	add    BYTE PTR [rax],ah
  40c0e5:	sbb    BYTE PTR [rax],al
  40c0e7:	add    BYTE PTR [rbp+0x18],ch
  40c0ea:	add    BYTE PTR [rax],al
  40c0ec:	fcom   st(0)
  40c0ee:	add    BYTE PTR [rax],al
  40c0f0:	jo     0x40c10a
  40c0f2:	add    BYTE PTR [rax],al
  40c0f4:	mov    ebp,0xe4000018
  40c0f9:	rol    BYTE PTR [rax],1
  40c0fb:	add    al,al
  40c0fd:	sbb    BYTE PTR [rax],al
  40c0ff:	add    BYTE PTR [rip+0xfffffffff0000019],cl        # 0xfffffffff040c11e
  40c105:	rol    BYTE PTR [rax],1
  40c107:	add    BYTE PTR [rax],dl
  40c109:	sbb    DWORD PTR [rax],eax
  40c10b:	add    BYTE PTR [rbp+0x19],bl
  40c10e:	add    BYTE PTR [rax],al
  40c110:	cld    
  40c111:	rol    BYTE PTR [rax],1
  40c113:	add    BYTE PTR [rax+0x19],ah
  40c116:	add    BYTE PTR [rax],al
  40c118:	lods   eax,DWORD PTR ds:[rsi]
  40c119:	sbb    DWORD PTR [rax],eax
  40c11b:	add    BYTE PTR [rax],cl
  40c11d:	rol    DWORD PTR [rax],1
  40c11f:	add    BYTE PTR [rax-0x2ffffe7],dh
  40c125:	sbb    DWORD PTR [rax],eax
  40c127:	add    BYTE PTR [rcx+rdx*8],dl
  40c12a:	add    BYTE PTR [rax],al
  40c12c:	add    BYTE PTR [rdx],bl
  40c12e:	add    BYTE PTR [rax],al
  40c130:	rex.WRB sbb r8b,BYTE PTR [r8]
  40c133:	add    BYTE PTR [rax],ah
  40c135:	rol    DWORD PTR [rax],1
  40c137:	add    BYTE PTR [rax+0x1a],dl
  40c13a:	add    BYTE PTR [rax],al
  40c13c:	popf   
  40c13d:	sbb    al,BYTE PTR [rax]
  40c13f:	add    BYTE PTR [rcx+rdx*8],ch
  40c142:	add    BYTE PTR [rax],al
  40c144:	movabs al,ds:0x3800001aed00001a
  40c14d:	rol    DWORD PTR [rax],1
  40c14f:	add    al,dh
  40c151:	sbb    al,BYTE PTR [rax]
  40c153:	add    BYTE PTR [rip+0x4400001b],bh        # 0x4440c174
  40c159:	rol    DWORD PTR [rax],1
  40c15b:	add    BYTE PTR [rax+0x1b],al
  40c15e:	add    BYTE PTR [rax],al
  40c160:	scas   al,BYTE PTR es:[rdi]
  40c161:	sbb    eax,DWORD PTR [rax]
  40c163:	add    BYTE PTR [rax-0x2f],dl
  40c166:	add    BYTE PTR [rax],al
  40c168:	mov    al,0x1b
  40c16a:	add    BYTE PTR [rax],al
  40c16c:	(bad)  
  40c16d:	sbb    al,0x0
  40c16f:	add    BYTE PTR [rax-0x2f],dh
  40c172:	add    BYTE PTR [rax],al
  40c174:	movabs al,ds:0x7c00001fbb00001c
  40c17d:	rol    DWORD PTR [rax],1
  40c17f:	add    al,al
  40c181:	(bad)  
  40c182:	add    BYTE PTR [rax],al
  40c184:	(bad)  
  40c185:	and    al,0x0
  40c187:	add    BYTE PTR [rcx+rdx*8+0x24100000],dl
  40c18e:	add    BYTE PTR [rax],al
  40c190:	mov    eax,0xac000024
  40c195:	rol    DWORD PTR [rax],1
  40c197:	add    al,al
  40c199:	and    al,0x0
  40c19b:	add    BYTE PTR [rbp+0x25],ch
  40c19e:	add    BYTE PTR [rax],al
  40c1a0:	mov    eax,0x700000d1
  40c1a5:	and    eax,0x2a3d0000
  40c1aa:	add    BYTE PTR [rax],al
  40c1ac:	enter  0xd1,0x0
  40c1b0:	sub    al,BYTE PTR [rax]
  40c1b3:	add    dh,bl
  40c1b5:	sub    al,BYTE PTR [rax]
  40c1b7:	add    al,ah
  40c1b9:	rol    DWORD PTR [rax],1
  40c1bb:	add    al,ah
  40c1bd:	sub    al,BYTE PTR [rax]
  40c1bf:	add    BYTE PTR [rax],ah
  40c1c1:	sub    eax,DWORD PTR [rax]
  40c1c3:	add    ah,ch
  40c1c5:	rol    DWORD PTR [rax],1
  40c1c7:	add    BYTE PTR [rax],ah
  40c1c9:	sub    eax,DWORD PTR [rax]
  40c1cb:	add    BYTE PTR [rdi-0xbffffd5],al
  40c1d1:	rol    DWORD PTR [rax],1
  40c1d3:	add    BYTE PTR [rax-0x2affffd5],dl
  40c1d9:	sub    eax,DWORD PTR [rax]
  40c1db:	add    BYTE PTR [rax],al
  40c1dd:	rol    BYTE PTR [rax],cl
  40c1df:	add    al,ah
  40c1e1:	sub    eax,DWORD PTR [rax]
  40c1e3:	add    BYTE PTR [rcx],bh
  40c1e5:	sub    al,0x0
  40c1e7:	add    BYTE PTR [rax],cl
  40c1e9:	rol    BYTE PTR [rax],cl
  40c1eb:	add    BYTE PTR [rax+0x2c],al
  40c1ee:	add    BYTE PTR [rax],al
  40c1f0:	push   rdx
  40c1f1:	sub    al,0x0
  40c1f3:	add    BYTE PTR [rax],dl
  40c1f5:	rol    BYTE PTR [rax],cl
  40c1f7:	add    BYTE PTR [rax+0x2c],ah
  40c1fa:	add    BYTE PTR [rax],al
  40c1fc:	gs sub al,0x0
  40c1ff:	add    BYTE PTR [rdx+rdx*8],dl
  40c202:	add    BYTE PTR [rax],al
  40c204:	jo     0x40c232
  40c206:	add    BYTE PTR [rax],al
  40c208:	jne    0x40c236
  40c20a:	add    BYTE PTR [rax],al
  40c20c:	sbb    dl,dl
  40c20e:	add    BYTE PTR [rax],al
  40c210:	sub    BYTE PTR [rax+rax*1],0x0
  40c214:	xchg   edx,eax
  40c215:	sub    al,0x0
  40c217:	add    BYTE PTR [rdx+rdx*8],bl
  40c21a:	add    BYTE PTR [rax],al
  40c21c:	movabs al,ds:0x2000002ca500002c
  40c225:	rol    BYTE PTR [rax],cl
  40c227:	add    BYTE PTR [rax-0x4affffd4],dh
  40c22d:	sub    al,0x0
  40c22f:	add    BYTE PTR [rdx+rdx*8],ah
  40c232:	add    BYTE PTR [rax],al
  40c234:	shr    BYTE PTR [rax+rax*1],0x0
  40c238:	ins    BYTE PTR es:[rdi],dx
  40c239:	sub    eax,0xd2280000
  40c23e:	add    BYTE PTR [rax],al
  40c240:	jo     0x40c26f
  40c242:	add    BYTE PTR [rax],al
  40c244:	(bad)  
  40c245:	sub    eax,0xd2300000
  40c24a:	add    BYTE PTR [rax],al
  40c24c:	loopne 0x40c27b
  40c24e:	add    BYTE PTR [rax],al
  40c250:	push   rsp
  40c251:	add    BYTE PTR cs:[rax],al
  40c254:	xor    al,0xd2
  40c256:	add    BYTE PTR [rax],al
  40c258:	(bad)  
  40c259:	add    BYTE PTR cs:[rax],al
  40c25c:	mov    bh,0x2e
  40c25e:	add    BYTE PTR [rax],al
  40c260:	rol    BYTE PTR [rax],cl
  40c263:	add    al,al
  40c265:	add    BYTE PTR cs:[rax],al
  40c268:	repz (bad) 
  40c26a:	add    BYTE PTR [rax],al
  40c26c:	rex.WR rol BYTE PTR [rax],cl
  40c26f:	add    BYTE PTR [rax],al
  40c271:	xor    BYTE PTR [rax],al
  40c273:	add    BYTE PTR [rax+0x30],cl
  40c276:	add    BYTE PTR [rax],al
  40c278:	rol    BYTE PTR fs:[rax],cl
  40c27b:	add    BYTE PTR [rax+0x30],dl
  40c27e:	add    BYTE PTR [rax],al
  40c280:	(bad)  
  40c281:	xor    BYTE PTR [rax],al
  40c283:	add    BYTE PTR [rdx+rdx*8+0x0],ch
  40c287:	add    BYTE PTR [rax+0x8000030],dl
  40c28d:	xor    DWORD PTR [rax],eax
  40c28f:	add    BYTE PTR [rdx+rdx*8+0x0],dh
  40c293:	add    BYTE PTR [rax],dl
  40c295:	xor    DWORD PTR [rax],eax
  40c297:	add    BYTE PTR [rbx+0x31],dl
  40c29a:	add    BYTE PTR [rax],al
  40c29c:	test   dl,dl
  40c29e:	add    BYTE PTR [rax],al
  40c2a0:	(bad)  
  40c2a1:	xor    DWORD PTR [rax],eax
  40c2a3:	add    BYTE PTR [rbp+0x32],al
  40c2a6:	add    BYTE PTR [rax],al
  40c2a8:	mov    edx,ss
  40c2aa:	add    BYTE PTR [rax],al
  40c2ac:	push   rax
  40c2ad:	xor    al,BYTE PTR [rax]
  40c2af:	add    ch,dh
  40c2b1:	xor    eax,DWORD PTR [rax]
  40c2b3:	add    BYTE PTR [rdx+rdx*8+0x34000000],bl
  40c2ba:	add    BYTE PTR [rax],al
  40c2bc:	(bad)  
  40c2bd:	add    BYTE PTR ds:[rax],al
  40c2c0:	lods   al,BYTE PTR ds:[rsi]
  40c2c1:	rol    BYTE PTR [rax],cl
  40c2c3:	add    BYTE PTR [rax],al
  40c2c5:	(bad)  
  40c2c6:	add    BYTE PTR [rax],al
  40c2c8:	movsxd edi,DWORD PTR [rdi]
  40c2ca:	add    BYTE PTR [rax],al
  40c2cc:	rcl    dl,1
  40c2ce:	add    BYTE PTR [rax],al
  40c2d0:	jo     0x40c311
  40c2d2:	add    BYTE PTR [rax],al
  40c2d4:	cmp    DWORD PTR [rdi],0x0
  40c2d7:	add    al,bl
  40c2d9:	rol    BYTE PTR [rax],cl
  40c2db:	add    BYTE PTR [rax-0x38ffffc1],dl
  40c2e1:	(bad)  
  40c2e2:	add    BYTE PTR [rax],al
  40c2e4:	(bad)  
  40c2e6:	add    BYTE PTR [rax],al
  40c2e8:	sar    BYTE PTR [rdi],1
  40c2ea:	add    BYTE PTR [rax],al
  40c2ec:	push   rbx
  40c2ed:	add    BYTE PTR [rax],al
  40c2f0:	in     al,0xd2
  40c2f2:	add    BYTE PTR [rax],al
  40c2f4:	(bad)  
  40c2f5:	add    BYTE PTR [rax],al
  40c2f8:	rol    DWORD PTR [rax+0x0],cl
  40c2fb:	add    ah,ch
  40c2fd:	rol    BYTE PTR [rax],cl
  40c2ff:	add    al,ah
  40c301:	add    BYTE PTR [rax],al
  40c304:	add    al,BYTE PTR [rcx+0x0]
  40c307:	add    al,bh
  40c309:	rol    BYTE PTR [rax],cl
  40c30b:	add    BYTE PTR [rax],dl
  40c30d:	add    BYTE PTR [r8],al
  40c310:	rex.WRX
  40c311:	add    BYTE PTR [r8],al
  40c314:	add    bl,dl
  40c316:	add    BYTE PTR [rax],al
  40c318:	push   rax
  40c319:	add    BYTE PTR [r8],al
  40c31c:	loop   0x40c35f
  40c31e:	add    BYTE PTR [rax],al
  40c320:	or     al,0xd3
  40c322:	add    BYTE PTR [rax],al
  40c324:	lock add BYTE PTR [r8],al
  40c328:	rex.WRB
  40c329:	rex.X add BYTE PTR [rax],al
  40c32c:	and    bl,dl
  40c32e:	add    BYTE PTR [rax],al
  40c330:	push   rax
  40c331:	rex.X add BYTE PTR [rax],al
  40c334:	mov    bh,0x44
  40c336:	add    BYTE PTR [rax],al
  40c338:	sub    al,0xd3
  40c33a:	add    BYTE PTR [rax],al
  40c33c:	rol    BYTE PTR [rax+rax*1+0x0],0xd2
  40c341:	rex.RX add BYTE PTR [rax],r8b
  40c344:	cmp    al,0xd3
  40c346:	add    BYTE PTR [rax],al
  40c348:	loopne 0x40c390
  40c34a:	add    BYTE PTR [rax],al
  40c34c:	adc    DWORD PTR [rdi+0x0],eax
  40c34f:	add    BYTE PTR [rax-0x2d],dl
  40c352:	add    BYTE PTR [rax],al
  40c354:	and    BYTE PTR [rdi+0x0],al
  40c357:	add    BYTE PTR [rdi+rax*2+0x0],dh
  40c35b:	add    BYTE PTR [rax-0x2d],bl
  40c35e:	add    BYTE PTR [rax],al
  40c360:	add    BYTE PTR [rdi+0x0],0x0
  40c364:	cld    
  40c365:	rex.RXB add BYTE PTR [r8],r8b
  40c368:	rol    DWORD PTR fs:[rax],cl
  40c36b:	add    BYTE PTR [rax],al
  40c36d:	rex.W add BYTE PTR [rax],al
  40c370:	push   rsp
  40c371:	rex.W add BYTE PTR [rax],al
  40c374:	ins    BYTE PTR es:[rdi],dx
  40c375:	rol    DWORD PTR [rax],cl
  40c377:	add    BYTE PTR [rax+0x48],ah
  40c37a:	add    BYTE PTR [rax],al
  40c37c:	rex.RXB
  40c37d:	rex.WB add BYTE PTR [r8],al
  40c380:	je     0x40c355
  40c382:	add    BYTE PTR [rax],al
  40c384:	push   rax
  40c385:	rex.WB add BYTE PTR [r8],al
  40c388:	imul   ecx,DWORD PTR [rcx+0x0],0xd37c00
  40c38f:	add    BYTE PTR [rax+0x49],dh
  40c392:	add    BYTE PTR [rax],al
  40c394:	pushf  
  40c395:	rex.WB add BYTE PTR [r8],al
  40c398:	test   bl,dl
  40c39a:	add    BYTE PTR [rax],al
  40c39c:	movabs al,ds:0x8c000049c6000049
  40c3a5:	rol    DWORD PTR [rax],cl
  40c3a7:	add    al,dl
  40c3a9:	rex.WB add BYTE PTR [r8],al
  40c3ac:	sbb    BYTE PTR [rdx+0x0],cl
  40c3af:	add    BYTE PTR [rax+0x200000d3],dl
  40c3b5:	rex.WX add BYTE PTR [rax],al
  40c3b8:	rex.WRXB
  40c3b9:	rex.WX add BYTE PTR [rax],al
  40c3bc:	cwde   
  40c3bd:	rol    DWORD PTR [rax],cl
  40c3bf:	add    BYTE PTR [rax+0x4a],dl
  40c3c2:	add    BYTE PTR [rax],al
  40c3c4:	jrcxz  0x40c410
  40c3c6:	add    BYTE PTR [rax],al
  40c3c8:	pushf  
  40c3c9:	rol    DWORD PTR [rax],cl
  40c3cb:	add    al,dh
  40c3cd:	rex.WX add BYTE PTR [rax],al
  40c3d0:	iret   
  40c3d1:	rex.WR add BYTE PTR [rax],r8b
  40c3d4:	test   al,0xd3
  40c3d6:	add    BYTE PTR [rax],al
  40c3d8:	ror    BYTE PTR [rax+rax*1+0x0],1
  40c3dc:	rex.WRX add BYTE PTR fs:[rax],r8b
  40c3e0:	rcl    bl,0x0
  40c3e3:	add    BYTE PTR [rax+0x4e],dh
  40c3e6:	add    BYTE PTR [rax],al
  40c3e8:	add    eax,0xd800004f
  40c3ed:	rol    DWORD PTR [rax],cl
  40c3ef:	add    BYTE PTR [rax],dl
  40c3f1:	rex.WRXB add BYTE PTR [r8],r8b
  40c3f4:	xchg   ebp,eax
  40c3f5:	rex.WRXB add BYTE PTR [r8],r8b
  40c3f8:	call   0xffffffffa040c4d0
  40c3fd:	rex.WRXB add BYTE PTR [r8],r8b
  40c400:	in     al,dx
  40c401:	rex.WRXB add BYTE PTR [r8],r8b
  40c404:	hlt    
  40c405:	rol    DWORD PTR [rax],cl
  40c407:	add    al,dh
  40c409:	rex.WRXB add BYTE PTR [r8],r8b
  40c40c:	call   QWORD PTR [rax+0x0]
  40c40f:	add    BYTE PTR [rax],al
  40c411:	(bad)  
  40c412:	add    BYTE PTR [rax],al
  40c414:	add    BYTE PTR [rcx+0x0],dl
  40c417:	add    cl,bh
  40c419:	push   rdx
  40c41a:	add    BYTE PTR [rax],al
  40c41c:	or     al,0xd4
  40c41e:	add    BYTE PTR [rax],al
  40c420:	add    BYTE PTR [rbx+0x0],dl
  40c423:	add    BYTE PTR [rdx],dl
  40c425:	push   rbx
  40c426:	add    BYTE PTR [rax],al
  40c428:	sbb    al,0xd4
  40c42a:	add    BYTE PTR [rax],al
  40c42c:	and    BYTE PTR [rbx+0x0],dl
  40c42f:	add    BYTE PTR [rdx],dh
  40c431:	push   rbx
  40c432:	add    BYTE PTR [rax],al
  40c434:	and    ah,dl
  40c436:	add    BYTE PTR [rax],al
  40c438:	rex push rbx
  40c43a:	add    BYTE PTR [rax],al
  40c43c:	push   rdx
  40c43d:	push   rbx
  40c43e:	add    BYTE PTR [rax],al
  40c440:	and    al,0xd4
  40c442:	add    BYTE PTR [rax],al
  40c444:	(bad)  
  40c445:	push   rbx
  40c446:	add    BYTE PTR [rax],al
  40c448:	jb     0x40c49d
  40c44a:	add    BYTE PTR [rax],al
  40c44c:	sub    ah,dl
  40c44e:	add    BYTE PTR [rax],al
  40c450:	adc    BYTE PTR [rbx+0x0],0x0
  40c454:	xchg   edx,eax
  40c455:	push   rbx
  40c456:	add    BYTE PTR [rax],al
  40c458:	sub    al,0xd4
  40c45a:	add    BYTE PTR [rax],al
  40c45c:	movabs al,ds:0x30000053b2000053
  40c465:	(bad)  
  40c466:	add    BYTE PTR [rax],al
  40c468:	rcl    BYTE PTR [rbx+0x0],0x0
  40c46c:	rcl    BYTE PTR [rbx+0x0],cl
  40c46f:	add    BYTE PTR [rsp+rdx*8],dh
  40c472:	add    BYTE PTR [rax],al
  40c474:	loopne 0x40c4c9
  40c476:	add    BYTE PTR [rax],al
  40c478:	repnz push rbx
  40c47a:	add    BYTE PTR [rax],al
  40c47c:	cmp    ah,dl
  40c47e:	add    BYTE PTR [rax],al
  40c480:	add    BYTE PTR [rax+rax*1+0x0],dl
  40c484:	adc    dl,BYTE PTR [rax+rax*1+0x0]
  40c488:	cmp    al,0xd4
  40c48a:	add    BYTE PTR [rax],al
  40c48c:	and    BYTE PTR [rax+rax*1+0x0],dl
  40c490:	xor    dl,BYTE PTR [rax+rax*1+0x0]
  40c494:	rex (bad) 
  40c496:	add    BYTE PTR [rax],al
  40c498:	rex push rsp
  40c49a:	add    BYTE PTR [rax],al
  40c49c:	push   rdx
  40c49d:	push   rsp
  40c49e:	add    BYTE PTR [rax],al
  40c4a0:	rex.R (bad) 
  40c4a2:	add    BYTE PTR [rax],al
  40c4a4:	(bad)  
  40c4a5:	push   rsp
  40c4a6:	add    BYTE PTR [rax],al
  40c4a8:	popf   
  40c4a9:	push   rsp
  40c4aa:	add    BYTE PTR [rax],al
  40c4ac:	rex.W (bad) 
  40c4ae:	add    BYTE PTR [rax],al
  40c4b0:	movabs al,ds:0x50000054a5000054
  40c4b9:	(bad)  
  40c4ba:	add    BYTE PTR [rax],al
  40c4bc:	mov    al,0x54
  40c4be:	add    BYTE PTR [rax],al
  40c4c0:	repnz push rsp
  40c4c2:	add    BYTE PTR [rax],al
  40c4c4:	push   rsp
  40c4c5:	(bad)  
  40c4c6:	add    BYTE PTR [rax],al
  40c4c8:	add    BYTE PTR [rbp+0x0],dl
  40c4cb:	add    bl,dl
  40c4cd:	push   rbp
  40c4ce:	add    BYTE PTR [rax],al
  40c4d0:	pop    rax
  40c4d1:	(bad)  
  40c4d2:	add    BYTE PTR [rax],al
  40c4d4:	loopne 0x40c52b
  40c4d6:	add    BYTE PTR [rax],al
  40c4d8:	mov    bl,0x56
  40c4da:	add    BYTE PTR [rax],al
  40c4dc:	jo     0x40c4b2
  40c4de:	add    BYTE PTR [rax],al
  40c4e0:	rcl    BYTE PTR [rsi+0x0],0x0
  40c4e4:	(bad)  
  40c4e5:	push   rdi
  40c4e6:	add    BYTE PTR [rax],al
  40c4e8:	mov    ah,dl
  40c4ea:	add    BYTE PTR [rax],al
  40c4ec:	adc    BYTE PTR [rdi+0x0],dl
  40c4ef:	add    BYTE PTR [rsi+0x57],bl
  40c4f2:	add    BYTE PTR [rax],al
  40c4f4:	xchg   esp,eax
  40c4f5:	(bad)  
  40c4f6:	add    BYTE PTR [rax],al
  40c4f8:	(bad)  
  40c4f9:	push   rdi
  40c4fa:	add    BYTE PTR [rax],al
  40c4fc:	outs   dx,DWORD PTR ds:[rsi]
  40c4fd:	push   rdi
  40c4fe:	add    BYTE PTR [rax],al
  40c500:	movabs al,ds:0x7d000057700000d4
  40c509:	push   rdi
  40c50a:	add    BYTE PTR [rax],al
  40c50c:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
  40c50d:	(bad)  
  40c50e:	add    BYTE PTR [rax],al
  40c510:	adc    BYTE PTR [rdi+0x0],0x0
  40c514:	(bad)  
  40c515:	pop    rax
  40c516:	add    BYTE PTR [rax],al
  40c518:	test   al,0xd4
  40c51a:	add    BYTE PTR [rax],al
  40c51c:	and    BYTE PTR [rax+0x0],bl
  40c51f:	add    bh,al
  40c521:	pop    rax
  40c522:	add    BYTE PTR [rax],al
  40c524:	mov    al,0xd4
  40c526:	add    BYTE PTR [rax],al
  40c528:	rcr    BYTE PTR [rax+0x0],1
  40c52b:	add    cl,ch
  40c52d:	pop    rax
  40c52e:	add    BYTE PTR [rax],al
  40c530:	mov    eax,0xf00000d4
  40c535:	pop    rax
  40c536:	add    BYTE PTR [rax],al
  40c538:	and    eax,0xc0000059
  40c53d:	(bad)  
  40c53e:	add    BYTE PTR [rax],al
  40c540:	xor    BYTE PTR [rcx+0x0],bl
  40c543:	add    BYTE PTR [rbp-0x37ffffa7],al
  40c549:	(bad)  
  40c54a:	add    BYTE PTR [rax],al
  40c54c:	nop
  40c54d:	pop    rcx
  40c54e:	add    BYTE PTR [rax],al
  40c550:	lods   al,BYTE PTR ds:[rsi]
  40c551:	pop    rcx
  40c552:	add    BYTE PTR [rax],al
  40c554:	(bad)  
  40c555:	(bad)  
  40c556:	add    BYTE PTR [rax],al
  40c558:	mov    al,0x59
  40c55a:	add    BYTE PTR [rax],al
  40c55c:	mov    edx,0xd8000059
  40c561:	(bad)  
  40c562:	add    BYTE PTR [rax],al
  40c564:	rcr    BYTE PTR [rcx+0x0],0x0
  40c568:	ret    
  40c569:	pop    rcx
  40c56a:	add    BYTE PTR [rax],al
  40c56c:	(bad)  
  40c56e:	add    BYTE PTR [rax],al
  40c570:	rcr    BYTE PTR [rcx+0x0],1
  40c573:	add    BYTE PTR [rsi-0x1fffffa6],ah
  40c579:	(bad)  
  40c57a:	add    BYTE PTR [rax],al
  40c57c:	mov    al,0x5a
  40c57e:	add    BYTE PTR [rax],al
  40c580:	stos   DWORD PTR es:[rdi],eax
  40c581:	pop    rbx
  40c582:	add    BYTE PTR [rax],al
  40c584:	lock (bad) 
  40c586:	add    BYTE PTR [rax],al
  40c588:	mov    al,0x5b
  40c58a:	add    BYTE PTR [rax],al
  40c58c:	fistp  WORD PTR [rbx+0x0]
  40c58f:	add    BYTE PTR [rax],al
  40c591:	(bad)  
  40c592:	add    BYTE PTR [rax],al
  40c594:	loopne 0x40c5f1
  40c596:	add    BYTE PTR [rax],al
  40c598:	rex.WB pop r12
  40c59a:	add    BYTE PTR [rax],al
  40c59c:	or     ch,dl
  40c59e:	add    BYTE PTR [rax],al
  40c5a0:	push   rax
  40c5a1:	pop    rsp
  40c5a2:	add    BYTE PTR [rax],al
  40c5a4:	push   rbx
  40c5a5:	pop    rsp
  40c5a6:	add    BYTE PTR [rax],al
  40c5a8:	adc    al,0xd5
  40c5aa:	add    BYTE PTR [rax],al
  40c5ac:	(bad)  
  40c5ad:	pop    rsp
  40c5ae:	add    BYTE PTR [rax],al
  40c5b0:	movabs eax,ds:0xb00000d51800005c
  40c5b9:	pop    rsp
  40c5ba:	add    BYTE PTR [rax],al
  40c5bc:	mov    esp,0x2000005c
  40c5c1:	(bad)  
  40c5c2:	add    BYTE PTR [rax],al
  40c5c4:	rcr    BYTE PTR [rax+rax*1+0x0],0xbc
  40c5c9:	pop    rbp
  40c5ca:	add    BYTE PTR [rax],al
  40c5cc:	and    al,0xd5
  40c5ce:	add    BYTE PTR [rax],al
  40c5d0:	rcr    BYTE PTR [rbp+0x0],0x0
  40c5d4:	ret    
  40c5d5:	pop    rbp
  40c5d6:	add    BYTE PTR [rax],al
  40c5d8:	cmp    al,0xd5
  40c5da:	add    BYTE PTR [rax],al
  40c5dc:	rcr    BYTE PTR [rbp+0x0],1
  40c5df:	add    ah,dl
  40c5e1:	pop    rbp
  40c5e2:	add    BYTE PTR [rax],al
  40c5e4:	rex (bad) 
  40c5e6:	add    BYTE PTR [rax],al
  40c5e8:	loopne 0x40c647
  40c5ea:	add    BYTE PTR [rax],al
  40c5ec:	in     al,0x5d
  40c5ee:	add    BYTE PTR [rax],al
  40c5f0:	rex.R (bad) 
  40c5f2:	add    BYTE PTR [rax],al
  40c5f4:	lock pop rbp
  40c5f6:	add    BYTE PTR [rax],al
  40c5f8:	push   rcx
  40c5f9:	pop    rsi
  40c5fa:	add    BYTE PTR [rax],al
  40c5fc:	rex.W (bad) 
  40c5fe:	add    BYTE PTR [rax],al
  40c600:	(bad)  
  40c601:	pop    rsi
  40c602:	add    BYTE PTR [rax],al
  40c604:	ret    0x5f
  40c607:	add    BYTE PTR [rbp+rdx*8+0x0],dl
  40c60b:	add    al,dl
  40c60d:	pop    rdi
  40c60e:	add    BYTE PTR [rax],al
  40c610:	leave  
  40c611:	(bad)  
  40c612:	add    BYTE PTR [rax],al
  40c614:	push   0xffffffffd00000d5
  40c619:	(bad)  
  40c61a:	add    BYTE PTR [rax],al
  40c61c:	jbe    0x40c682
  40c61e:	add    BYTE PTR [rax],al
  40c620:	adc    ch,0x0
  40c623:	add    BYTE PTR [rax+0x6c000064],al
  40c629:	add    BYTE PTR gs:[rax],al
  40c62c:	mov    ch,dl
  40c62e:	add    BYTE PTR [rax],al
  40c630:	jo     0x40c697
  40c632:	add    BYTE PTR [rax],al
  40c634:	sub    BYTE PTR [rdi+0x0],ah
  40c637:	add    BYTE PTR [rax+0x300000d5],bl
  40c63d:	add    BYTE PTR [eax],al
  40c640:	popf   
  40c641:	add    BYTE PTR [eax],al
  40c644:	movabs al,ds:0x1f000067a00000d5
  40c64d:	push   0xffffffffd5b00000
  40c652:	add    BYTE PTR [rax],al
  40c654:	and    BYTE PTR [rax+0x0],ch
  40c657:	add    BYTE PTR [rdi-0x43ffff98],bh
  40c65d:	(bad)  
  40c65e:	add    BYTE PTR [rax],al
  40c660:	shr    BYTE PTR [rax+0x0],0x0
  40c664:	(bad)  
  40c665:	imul   eax,DWORD PTR [rax],0xd5c400
  40c66b:	add    BYTE PTR [rax-0x40ffff97],ah
  40c671:	imul   eax,DWORD PTR [rax],0xd5cc00
  40c677:	add    al,al
  40c679:	imul   eax,DWORD PTR [rax],0x69d200
  40c67f:	add    al,dl
  40c681:	(bad)  
  40c682:	add    BYTE PTR [rax],al
  40c684:	loopne 0x40c6ef
  40c686:	add    BYTE PTR [rax],al
  40c688:	and    eax,0xd400006a
  40c68d:	(bad)  
  40c68e:	add    BYTE PTR [rax],al
  40c690:	xor    BYTE PTR [rdx+0x0],ch
  40c693:	add    dh,cl
  40c695:	push   0x0
  40c697:	add    al,bl
  40c699:	(bad)  
  40c69a:	add    BYTE PTR [rax],al
  40c69c:	shr    BYTE PTR [rdx+0x0],1
  40c69f:	add    BYTE PTR [rbx],dl
  40c6a1:	imul   eax,DWORD PTR [rax],0x0
  40c6a4:	in     al,0xd5
  40c6a6:	add    BYTE PTR [rax],al
  40c6a8:	and    BYTE PTR [rbx+0x0],ch
  40c6ab:	add    BYTE PTR [rbx+0x6b],bl
  40c6ae:	add    BYTE PTR [rax],al
  40c6b0:	lock (bad) 
  40c6b2:	add    BYTE PTR [rax],al
  40c6b4:	(bad)  
  40c6b5:	imul   eax,DWORD PTR [rax],0x0
  40c6b8:	out    dx,al
  40c6b9:	imul   eax,DWORD PTR [rax],0x0
  40c6bc:	clc    
  40c6bd:	(bad)  
  40c6be:	add    BYTE PTR [rax],al
  40c6c0:	lock imul eax,DWORD PTR [rax],0x0
  40c6c4:	sub    BYTE PTR [rax+rax*1+0x0],ch
  40c6c8:	add    al,0xd6
  40c6ca:	add    BYTE PTR [rax],al
  40c6cc:	xor    BYTE PTR [rax+rax*1+0x0],ch
  40c6d0:	test   DWORD PTR [rax+rax*1+0x0],ebp
  40c6d4:	adc    dh,dl
  40c6d6:	add    BYTE PTR [rax],al
  40c6d8:	nop
  40c6d9:	ins    BYTE PTR es:[rdi],dx
  40c6da:	add    BYTE PTR [rax],al
  40c6dc:	ds ins DWORD PTR es:[rdi],dx
  40c6de:	add    BYTE PTR [rax],al
  40c6e0:	sbb    al,0xd6
  40c6e2:	add    BYTE PTR [rax],al
  40c6e4:	sub    BYTE PTR [rbp+0x0],0x0
  40c6e8:	(bad)  
  40c6e9:	outs   dx,DWORD PTR ds:[rsi]
  40c6ea:	add    BYTE PTR [rax],al
  40c6ec:	sub    al,0xd6
  40c6ee:	add    BYTE PTR [rax],al
  40c6f0:	rex jno 0x40c6f3
  40c6f3:	add    BYTE PTR [rax+0x71],cl
  40c6f6:	add    BYTE PTR [rax],al
  40c6f8:	cmp    al,0xd6
  40c6fa:	add    BYTE PTR [rax],al
  40c6fc:	push   rax
  40c6fd:	jno    0x40c6ff
  40c6ff:	add    BYTE PTR [rbx+0x71],bl
  40c702:	add    BYTE PTR [rax],al
  40c704:	rex (bad) 
  40c706:	add    BYTE PTR [rax],al
  40c708:	add    BYTE PTR [rbx+0x0],dh
  40c70b:	add    BYTE PTR [rax+0x76],al
  40c70e:	add    BYTE PTR [rax],al
  40c710:	pop    rsp
  40c711:	rol    DWORD PTR [rax],1
	...

Disassembly of section .xdata:

000000000040d000 <.xdata>:
  40d000:	add    DWORD PTR [rax],eax
  40d002:	add    BYTE PTR [rax],al
  40d004:	add    DWORD PTR [rcx+rax*1],eax
  40d007:	add    BYTE PTR [rdx+rax*2],al
  40d00a:	add    BYTE PTR [rax],al
  40d00c:	add    DWORD PTR [rcx+rax*1],eax
  40d00f:	add    BYTE PTR [rdx+riz*2],al
  40d012:	add    BYTE PTR [rax],al
  40d014:	add    DWORD PTR [rdi],ecx
  40d016:	or     BYTE PTR [rax],al
  40d018:	lgdt   [rbx]
  40d01b:	add    BYTE PTR [rax],cl
  40d01d:	xor    BYTE PTR [rdi],al
  40d01f:	(bad)  
  40d020:	(bad)  
  40d021:	jo     0x40d028
  40d023:	push   rax
  40d024:	add    al,0xc0
  40d026:	add    dl,al
  40d028:	or     DWORD PTR [rcx+rax*1],eax
  40d02b:	add    BYTE PTR [rdx+rax*2],al
  40d02e:	add    BYTE PTR [rax],al
  40d030:	cmp    BYTE PTR [rcx+0x0],dh
  40d033:	add    BYTE PTR [rcx],al
  40d035:	add    BYTE PTR [rax],al
  40d037:	add    ah,dl
  40d039:	adc    al,0x0
  40d03b:	add    ah,ch
  40d03d:	adc    al,0x0
  40d03f:	add    BYTE PTR [rax+0x65],dh
  40d042:	add    BYTE PTR [rax],al
  40d044:	in     al,dx
  40d045:	adc    al,0x0
  40d047:	add    BYTE PTR [rcx],cl
  40d049:	add    al,0x1
  40d04b:	add    BYTE PTR [rdx+rax*2],al
  40d04e:	add    BYTE PTR [rax],al
  40d050:	cmp    BYTE PTR [rcx+0x0],dh
  40d053:	add    BYTE PTR [rcx],al
  40d055:	add    BYTE PTR [rax],al
  40d057:	add    BYTE PTR [rdx*1+0x151c0000],al
  40d05e:	add    BYTE PTR [rax],al
  40d060:	jo     0x40d0c7
  40d062:	add    BYTE PTR [rax],al
  40d064:	sbb    al,0x15
  40d066:	add    BYTE PTR [rax],al
  40d068:	add    DWORD PTR [rcx+rax*1],eax
  40d06b:	add    BYTE PTR [rdx+rax*2],al
  40d06e:	add    BYTE PTR [rax],al
  40d070:	add    DWORD PTR [rcx+rax*1],eax
  40d073:	add    BYTE PTR [rdx+rax*2],al
  40d076:	add    BYTE PTR [rax],al
  40d078:	add    DWORD PTR [rcx+rax*1],eax
  40d07b:	add    BYTE PTR [rdx+rax*2],al
  40d07e:	add    BYTE PTR [rax],al
  40d080:	add    DWORD PTR [rcx+rax*1],eax
  40d083:	add    BYTE PTR [rdx+rax*2],al
  40d086:	add    BYTE PTR [rax],al
  40d088:	add    DWORD PTR [rcx+rax*1],eax
  40d08b:	add    BYTE PTR [rdx+rax*2],al
  40d08e:	add    BYTE PTR [rax],al
  40d090:	add    DWORD PTR [rcx+rax*1],eax
  40d093:	add    BYTE PTR [rdx+rax*2],al
  40d096:	add    BYTE PTR [rax],al
  40d098:	add    DWORD PTR [rcx+rax*1],eax
  40d09b:	add    BYTE PTR [rdx+rax*2],al
  40d09e:	add    BYTE PTR [rax],al
  40d0a0:	add    DWORD PTR [rcx+rax*1],eax
  40d0a3:	add    BYTE PTR [rdx+rax*2],al
  40d0a6:	add    BYTE PTR [rax],al
  40d0a8:	add    DWORD PTR [rcx+rax*1],eax
  40d0ab:	add    BYTE PTR [rdx+rax*2],al
  40d0ae:	add    BYTE PTR [rax],al
  40d0b0:	add    DWORD PTR [rcx+rax*1],eax
  40d0b3:	add    BYTE PTR [rdx+rax*2],al
  40d0b6:	add    BYTE PTR [rax],al
  40d0b8:	add    DWORD PTR [rip+0x32050002],eax        # 0x3245d0c0
  40d0be:	add    DWORD PTR [rax],esi
  40d0c0:	add    DWORD PTR [rax],ecx
  40d0c2:	add    eax,DWORD PTR [rax]
  40d0c4:	or     BYTE PTR [rcx],al
  40d0c6:	test   BYTE PTR [rax],al
  40d0c8:	add    DWORD PTR [rax],esi
  40d0ca:	add    BYTE PTR [rax],al
  40d0cc:	add    DWORD PTR [rax],ecx
  40d0ce:	add    eax,DWORD PTR [rax]
  40d0d0:	or     BYTE PTR [rcx],al
  40d0d2:	test   BYTE PTR [rax],al
  40d0d4:	add    DWORD PTR [rax],esi
  40d0d6:	add    BYTE PTR [rax],al
  40d0d8:	add    DWORD PTR [rax],ecx
  40d0da:	add    eax,DWORD PTR [rax]
  40d0dc:	or     BYTE PTR [rcx],al
  40d0de:	test   BYTE PTR [rax],al
  40d0e0:	add    DWORD PTR [rax],esi
  40d0e2:	add    BYTE PTR [rax],al
  40d0e4:	add    DWORD PTR [rax],ecx
  40d0e6:	add    eax,DWORD PTR [rax]
  40d0e8:	or     BYTE PTR [rcx],al
  40d0ea:	test   BYTE PTR [rax],al
  40d0ec:	add    DWORD PTR [rax],esi
  40d0ee:	add    BYTE PTR [rax],al
  40d0f0:	add    DWORD PTR [rax],ecx
  40d0f2:	add    eax,DWORD PTR [rax]
  40d0f4:	or     BYTE PTR [rcx],al
  40d0f6:	test   BYTE PTR [rax],al
  40d0f8:	add    DWORD PTR [rax],esi
  40d0fa:	add    BYTE PTR [rax],al
  40d0fc:	add    DWORD PTR [rax],ecx
  40d0fe:	add    eax,DWORD PTR [rax]
  40d100:	or     BYTE PTR [rcx],al
  40d102:	test   BYTE PTR [rax],al
  40d104:	add    DWORD PTR [rax],esi
  40d106:	add    BYTE PTR [rax],al
  40d108:	add    DWORD PTR [rax],ecx
  40d10a:	add    eax,DWORD PTR [rax]
  40d10c:	or     BYTE PTR [rcx],al
  40d10e:	test   BYTE PTR [rax],al
  40d110:	add    DWORD PTR [rax],esi
  40d112:	add    BYTE PTR [rax],al
  40d114:	add    DWORD PTR [rax],ecx
  40d116:	add    eax,DWORD PTR [rax]
  40d118:	or     BYTE PTR [rcx],al
  40d11a:	test   BYTE PTR [rax],al
  40d11c:	add    DWORD PTR [rax],esi
  40d11e:	add    BYTE PTR [rax],al
  40d120:	add    DWORD PTR [rax],ecx
  40d122:	add    eax,DWORD PTR [rax]
  40d124:	or     BYTE PTR [rcx],al
  40d126:	test   BYTE PTR [rax],al
  40d128:	add    DWORD PTR [rax],esi
  40d12a:	add    BYTE PTR [rax],al
  40d12c:	add    DWORD PTR [rax],ecx
  40d12e:	add    eax,DWORD PTR [rax]
  40d130:	or     BYTE PTR [rcx],al
  40d132:	test   BYTE PTR [rax],al
  40d134:	add    DWORD PTR [rax],esi
  40d136:	add    BYTE PTR [rax],al
  40d138:	add    DWORD PTR [rax],ecx
  40d13a:	add    eax,DWORD PTR [rax]
  40d13c:	or     BYTE PTR [rcx],al
  40d13e:	test   BYTE PTR [rax],al
  40d140:	add    DWORD PTR [rax],esi
  40d142:	add    BYTE PTR [rax],al
  40d144:	add    DWORD PTR [rax],ecx
  40d146:	add    eax,DWORD PTR [rax]
  40d148:	or     BYTE PTR [rcx],al
  40d14a:	test   BYTE PTR [rax],al
  40d14c:	add    DWORD PTR [rax],esi
  40d14e:	add    BYTE PTR [rax],al
  40d150:	add    DWORD PTR [rax],ecx
  40d152:	add    eax,DWORD PTR [rax]
  40d154:	or     BYTE PTR [rcx],al
  40d156:	test   BYTE PTR [rax],al
  40d158:	add    DWORD PTR [rax],esi
  40d15a:	add    BYTE PTR [rax],al
  40d15c:	add    DWORD PTR [rdi+rax*1],ecx
  40d15f:	add    BYTE PTR [rdx+rax*2],cl
  40d162:	or     BYTE PTR [rax],dh
  40d164:	(bad)  
  40d165:	(bad)  
  40d166:	(bad)  
  40d167:	jo     0x40d16e
  40d169:	push   rax
  40d16a:	add    al,0xc0
  40d16c:	add    dl,al
  40d16e:	add    BYTE PTR [rax],al
  40d170:	add    DWORD PTR [rcx],ecx
  40d172:	add    al,0x0
  40d174:	or     DWORD PTR [rcx],eax
  40d176:	lea    eax,[rax]
  40d178:	add    dh,BYTE PTR [rax]
  40d17a:	add    DWORD PTR [rax+0x1],esp
  40d17d:	adc    ecx,DWORD PTR [rdx]
  40d17f:	add    BYTE PTR [rbx],dl
  40d181:	add    DWORD PTR [rdi],eax
  40d183:	add    DWORD PTR [rax+rsi*1],ecx
  40d186:	or     esp,DWORD PTR [rax+0xa]
  40d189:	jo     0x40d194
  40d18b:	push   rax
  40d18c:	or     al,al
  40d18e:	(bad)  
  40d18f:	rol    BYTE PTR [rax+riz*8],1
  40d192:	add    dh,al
  40d194:	add    DWORD PTR [rbx],edx
  40d196:	or     al,BYTE PTR [rax]
  40d198:	adc    eax,DWORD PTR [rcx]
  40d19a:	mov    bl,0x0
  40d19c:	or     al,0x30
  40d19e:	or     esp,DWORD PTR [rax+0xa]
  40d1a1:	jo     0x40d1ac
  40d1a3:	push   rax
  40d1a4:	or     al,al
  40d1a6:	(bad)  
  40d1a7:	rol    BYTE PTR [rax+riz*8],1
  40d1aa:	add    dh,al
  40d1ac:	add    DWORD PTR [rdi],eax
  40d1ae:	add    al,0x0
  40d1b0:	(bad)  
  40d1b1:	xor    al,BYTE PTR [rbx]
  40d1b3:	xor    BYTE PTR [rdx],al
  40d1b5:	(bad)  
  40d1b6:	add    DWORD PTR [rax+0x1],esi
  40d1b9:	or     al,BYTE PTR [rip+0xffffffff86010a00]        # 0xffffffff8641dbbf
  40d1bf:	add    DWORD PTR [rbx],eax
  40d1c1:	xor    BYTE PTR [rdx],al
  40d1c3:	(bad)  
  40d1c4:	add    DWORD PTR [rax+0x0],esi
  40d1c7:	add    BYTE PTR [rcx],al
  40d1c9:	adc    BYTE PTR [rcx],cl
  40d1cb:	add    BYTE PTR [rax],dl
  40d1cd:	loop   0x40d1db
  40d1cf:	xor    BYTE PTR [rbx],cl
  40d1d1:	(bad)  
  40d1d2:	or     dh,BYTE PTR [rax+0x9]
  40d1d5:	push   rax
  40d1d6:	or     al,al
  40d1d8:	(bad)  
  40d1d9:	rol    BYTE PTR [rax+riz*8],1
  40d1dc:	add    dh,al
  40d1de:	add    BYTE PTR [rax],al
  40d1e0:	add    DWORD PTR [rax],ecx
  40d1e2:	add    eax,DWORD PTR [rax]
  40d1e4:	or     BYTE PTR [rcx],al
  40d1e6:	add    BYTE PTR [rcx],r8b
  40d1e9:	xor    BYTE PTR [rax],al
  40d1eb:	add    BYTE PTR [rcx],al
  40d1ed:	add    al,0x1
  40d1ef:	add    BYTE PTR [rdx+rax*2],al
  40d1f2:	add    BYTE PTR [rax],al
  40d1f4:	add    DWORD PTR [rsi],eax
  40d1f6:	add    eax,DWORD PTR [rax]
  40d1f8:	(bad)  
  40d1f9:	rex.X add sil,BYTE PTR [rax]
  40d1fc:	add    DWORD PTR [rax+0x0],esp
  40d1ff:	add    BYTE PTR [rcx],al
  40d201:	add    al,0x1
  40d203:	add    BYTE PTR [rdx+rax*2],al
  40d206:	add    BYTE PTR [rax],al
  40d208:	add    DWORD PTR [rcx+rax*1],eax
  40d20b:	add    BYTE PTR [rdx+rax*2],al
  40d20e:	add    BYTE PTR [rax],al
  40d210:	add    DWORD PTR [rax],eax
  40d212:	add    BYTE PTR [rax],al
  40d214:	add    DWORD PTR [rax],eax
  40d216:	add    BYTE PTR [rax],al
  40d218:	add    DWORD PTR [rax],eax
  40d21a:	add    BYTE PTR [rax],al
  40d21c:	add    DWORD PTR [rax],eax
  40d21e:	add    BYTE PTR [rax],al
  40d220:	add    DWORD PTR [rax],eax
  40d222:	add    BYTE PTR [rax],al
  40d224:	add    DWORD PTR [rax],eax
  40d226:	add    BYTE PTR [rax],al
  40d228:	add    DWORD PTR [rip+0x32050002],eax        # 0x3245d230
  40d22e:	add    DWORD PTR [rax],esi
  40d230:	add    DWORD PTR [rax],eax
  40d232:	add    BYTE PTR [rax],al
  40d234:	add    DWORD PTR [rsi],eax
  40d236:	add    eax,DWORD PTR [rax]
  40d238:	(bad)  
  40d239:	rex.X add sil,BYTE PTR [rax]
  40d23c:	add    DWORD PTR [rax+0x0],esp
  40d23f:	add    BYTE PTR [rcx],al
  40d241:	(bad)  
  40d242:	add    eax,DWORD PTR [rax]
  40d244:	(bad)  
  40d245:	rex.X add sil,BYTE PTR [rax]
  40d248:	add    DWORD PTR [rax+0x0],esp
  40d24b:	add    BYTE PTR [rcx],al
  40d24d:	adc    BYTE PTR [rcx],cl
  40d24f:	add    BYTE PTR [rax],dl
  40d251:	rex.X or al,0x30
  40d254:	or     esp,DWORD PTR [rax+0xa]
  40d257:	jo     0x40d262
  40d259:	push   rax
  40d25a:	or     al,al
  40d25c:	(bad)  
  40d25d:	rol    BYTE PTR [rax+riz*8],1
  40d260:	add    dh,al
  40d262:	add    BYTE PTR [rax],al
  40d264:	add    DWORD PTR [rip+0x32050002],eax        # 0x3245d26c
  40d26a:	add    DWORD PTR [rax],esi
  40d26c:	add    DWORD PTR [rip+0x32050002],eax        # 0x3245d274
  40d272:	add    DWORD PTR [rax],esi
  40d274:	add    DWORD PTR [rdx],ecx
  40d276:	(bad)  
  40d277:	add    BYTE PTR [rdx],cl
  40d279:	xor    al,BYTE PTR [rsi]
  40d27b:	xor    BYTE PTR [rip+0x3700460],al        # 0x3b0d6e1
  40d281:	push   rax
  40d282:	add    al,al
  40d284:	add    DWORD PTR [rip+0x52050002],eax        # 0x5245d28c
  40d28a:	add    DWORD PTR [rax],esi
  40d28c:	add    DWORD PTR [rax],ecx
  40d28e:	add    eax,0x4420800
  40d293:	xor    BYTE PTR [rbx],al
  40d295:	(bad)  
  40d296:	add    dh,BYTE PTR [rax+0x1]
  40d299:	push   rax
  40d29a:	add    BYTE PTR [rax],al
  40d29c:	add    DWORD PTR [rax],ecx
  40d29e:	add    eax,0x4e20800
  40d2a3:	xor    BYTE PTR [rbx],al
  40d2a5:	(bad)  
  40d2a6:	add    dh,BYTE PTR [rax+0x1]
  40d2a9:	push   rax
  40d2aa:	add    BYTE PTR [rax],al
  40d2ac:	add    DWORD PTR [rax+rdx*1],ebp
  40d2af:	add    BYTE PTR [rax+rcx*4],ch
  40d2b2:	pop    rbx
  40d2b3:	add    BYTE PTR [rbx],ah
  40d2b5:	js     0x40d311
  40d2b7:	add    BYTE PTR [rbx],bl
  40d2b9:	push   0x1130059
  40d2be:	mov    ecx,0xb300c00
  40d2c3:	(bad)  
  40d2c4:	or     dh,BYTE PTR [rax+0x9]
  40d2c7:	push   rax
  40d2c8:	or     al,al
  40d2ca:	(bad)  
  40d2cb:	rol    BYTE PTR [rax+riz*8],1
  40d2ce:	add    dh,al
  40d2d0:	add    DWORD PTR [rcx+rax*1],eax
  40d2d3:	add    BYTE PTR [rdx+riz*4],al
  40d2d6:	add    BYTE PTR [rax],al
  40d2d8:	add    DWORD PTR [rax],eax
  40d2da:	add    BYTE PTR [rax],al
  40d2dc:	add    DWORD PTR [rcx+rax*1],eax
  40d2df:	add    BYTE PTR [rdx+riz*2],al
  40d2e2:	add    BYTE PTR [rax],al
  40d2e4:	add    DWORD PTR [rcx+rax*1],eax
  40d2e7:	add    BYTE PTR [rdx+rax*8],al
  40d2ea:	add    BYTE PTR [rax],al
  40d2ec:	add    DWORD PTR [rax],ecx
  40d2ee:	add    eax,DWORD PTR [rax]
  40d2f0:	or     BYTE PTR [rcx],al
  40d2f2:	mov    al,BYTE PTR [rax]
  40d2f4:	add    DWORD PTR [rax],esi
  40d2f6:	add    BYTE PTR [rax],al
  40d2f8:	add    DWORD PTR [rcx+rax*1],eax
  40d2fb:	add    BYTE PTR [rdx+riz*2],al
  40d2fe:	add    BYTE PTR [rax],al
  40d300:	add    DWORD PTR [rsi],eax
  40d302:	add    eax,DWORD PTR [rax]
  40d304:	(bad)  
  40d305:	(bad)  
  40d307:	xor    BYTE PTR [rcx],al
  40d309:	(bad)  
  40d30a:	add    BYTE PTR [rax],al
  40d30c:	add    DWORD PTR [rdi+rax*1],ecx
  40d30f:	add    BYTE PTR [rdx+rax*2],cl
  40d312:	or     BYTE PTR [rax],dh
  40d314:	(bad)  
  40d315:	(bad)  
  40d316:	(bad)  
  40d317:	jo     0x40d31e
  40d319:	push   rax
  40d31a:	add    al,0xc0
  40d31c:	add    dl,al
  40d31e:	add    BYTE PTR [rax],al
  40d320:	add    DWORD PTR [rdi],eax
  40d322:	add    al,0x0
  40d324:	(bad)  
  40d325:	xor    al,BYTE PTR [rbx]
  40d327:	xor    BYTE PTR [rdx],al
  40d329:	(bad)  
  40d32a:	add    DWORD PTR [rax+0x1],esi
  40d32d:	or     eax,DWORD PTR [rsi]
  40d32f:	add    BYTE PTR [rbx],cl
  40d331:	add    DWORD PTR [rcx+0x0],esi
  40d334:	add    al,0x30
  40d336:	add    esp,DWORD PTR [rax+0x2]
  40d339:	jo     0x40d33c
  40d33b:	push   rax
  40d33c:	add    DWORD PTR [rip+0x10d0007],ecx        # 0x14dd349
  40d342:	rex.WRX add BYTE PTR [rsi],r8b
  40d345:	xor    BYTE PTR [rip+0x3700460],al        # 0x3b0d7ab
  40d34b:	push   rax
  40d34c:	add    al,al
  40d34e:	add    BYTE PTR [rax],al
  40d350:	add    DWORD PTR [rcx+rax*1],eax
  40d353:	add    BYTE PTR [rdx+rax*2],al
  40d356:	add    BYTE PTR [rax],al
  40d358:	add    DWORD PTR [rsi],eax
  40d35a:	add    eax,DWORD PTR [rax]
  40d35c:	(bad)  
  40d35d:	movabs ds:0x501000060013002,al
  40d366:	add    al,BYTE PTR [rax]
  40d368:	add    eax,0x1300132
  40d36d:	add    eax,0x32050002
  40d372:	add    DWORD PTR [rax],esi
  40d374:	add    DWORD PTR [rip+0x32050002],eax        # 0x3245d37c
  40d37a:	add    DWORD PTR [rax],esi
  40d37c:	add    DWORD PTR [rip+0x32050002],eax        # 0x3245d384
  40d382:	add    DWORD PTR [rax],esi
  40d384:	add    DWORD PTR [rcx+rax*1],eax
  40d387:	add    BYTE PTR [rdx+rax*2],al
  40d38a:	add    BYTE PTR [rax],al
  40d38c:	add    DWORD PTR [rax],eax
  40d38e:	add    BYTE PTR [rax],al
  40d390:	add    DWORD PTR [rcx+rax*1],eax
  40d393:	add    BYTE PTR [rdx+rax*2],al
  40d396:	add    BYTE PTR [rax],al
  40d398:	add    DWORD PTR [rax],eax
  40d39a:	add    BYTE PTR [rax],al
  40d39c:	add    DWORD PTR [rdi],eax
  40d39e:	add    al,0x0
  40d3a0:	(bad)  
  40d3a1:	push   rdx
  40d3a2:	add    esi,DWORD PTR [rax]
  40d3a4:	add    ah,BYTE PTR [rax+0x1]
  40d3a7:	jo     0x40d3aa
  40d3a9:	adc    BYTE PTR [rcx],cl
  40d3ab:	add    BYTE PTR [rax],dl
  40d3ad:	rex.X or al,0x30
  40d3b0:	or     esp,DWORD PTR [rax+0xa]
  40d3b3:	jo     0x40d3be
  40d3b5:	push   rax
  40d3b6:	or     al,al
  40d3b8:	(bad)  
  40d3b9:	rol    BYTE PTR [rax+riz*8],1
  40d3bc:	add    dh,al
  40d3be:	add    BYTE PTR [rax],al
  40d3c0:	add    DWORD PTR [rax],edx
  40d3c2:	or     DWORD PTR [rax],eax
  40d3c4:	adc    BYTE PTR [rdx+0xc],al
  40d3c7:	xor    BYTE PTR [rbx],cl
  40d3c9:	(bad)  
  40d3ca:	or     dh,BYTE PTR [rax+0x9]
  40d3cd:	push   rax
  40d3ce:	or     al,al
  40d3d0:	(bad)  
  40d3d1:	rol    BYTE PTR [rax+riz*8],1
  40d3d4:	add    dh,al
  40d3d6:	add    BYTE PTR [rax],al
  40d3d8:	add    DWORD PTR [rdx],ecx
  40d3da:	(bad)  
  40d3db:	add    BYTE PTR [rdx],cl
  40d3dd:	xor    al,BYTE PTR [rsi]
  40d3df:	xor    BYTE PTR [rip+0x3700460],al        # 0x3b0d845
  40d3e5:	push   rax
  40d3e6:	add    al,al
  40d3e8:	add    DWORD PTR [rsi],eax
  40d3ea:	add    eax,DWORD PTR [rax]
  40d3ec:	(bad)  
  40d3ed:	rex.X add sil,BYTE PTR [rax]
  40d3f0:	add    DWORD PTR [rax+0x0],esp
  40d3f3:	add    BYTE PTR [rcx],al
  40d3f5:	(bad)  
  40d3f6:	add    al,0x0
  40d3f8:	(bad)  
  40d3f9:	xor    al,BYTE PTR [rbx]
  40d3fb:	xor    BYTE PTR [rdx],al
  40d3fd:	(bad)  
  40d3fe:	add    DWORD PTR [rax+0x1],esi
  40d401:	(bad)  
  40d402:	add    eax,DWORD PTR [rax]
  40d404:	(bad)  
  40d405:	rex.X add sil,BYTE PTR [rax]
  40d408:	add    DWORD PTR [rax+0x0],esp
  40d40b:	add    BYTE PTR [rcx],al
  40d40d:	or     al,BYTE PTR [rsi]
  40d40f:	add    BYTE PTR [rdx],cl
  40d411:	xor    al,BYTE PTR [rsi]
  40d413:	xor    BYTE PTR [rip+0x3700460],al        # 0x3b0d879
  40d419:	push   rax
  40d41a:	add    al,al
  40d41c:	add    DWORD PTR [rax],eax
  40d41e:	add    BYTE PTR [rax],al
  40d420:	add    DWORD PTR [rax],eax
  40d422:	add    BYTE PTR [rax],al
  40d424:	add    DWORD PTR [rax],eax
  40d426:	add    BYTE PTR [rax],al
  40d428:	add    DWORD PTR [rax],eax
  40d42a:	add    BYTE PTR [rax],al
  40d42c:	add    DWORD PTR [rax],eax
  40d42e:	add    BYTE PTR [rax],al
  40d430:	add    DWORD PTR [rax],eax
  40d432:	add    BYTE PTR [rax],al
  40d434:	add    DWORD PTR [rax],eax
  40d436:	add    BYTE PTR [rax],al
  40d438:	add    DWORD PTR [rax],eax
  40d43a:	add    BYTE PTR [rax],al
  40d43c:	add    DWORD PTR [rax],eax
  40d43e:	add    BYTE PTR [rax],al
  40d440:	add    DWORD PTR [rax],eax
  40d442:	add    BYTE PTR [rax],al
  40d444:	add    DWORD PTR [rax],eax
  40d446:	add    BYTE PTR [rax],al
  40d448:	add    DWORD PTR [rip+0x32050002],eax        # 0x3245d450
  40d44e:	add    DWORD PTR [rax],esi
  40d450:	add    DWORD PTR [rax],eax
  40d452:	add    BYTE PTR [rax],al
  40d454:	add    DWORD PTR [rax],eax
  40d456:	add    BYTE PTR [rax],al
  40d458:	add    DWORD PTR [rax],edx
  40d45a:	or     DWORD PTR [rax],eax
  40d45c:	adc    BYTE PTR [rdx+0xc],al
  40d45f:	xor    BYTE PTR [rbx],cl
  40d461:	(bad)  
  40d462:	or     dh,BYTE PTR [rax+0x9]
  40d465:	push   rax
  40d466:	or     al,al
  40d468:	(bad)  
  40d469:	rol    BYTE PTR [rax+riz*8],1
  40d46c:	add    dh,al
  40d46e:	add    BYTE PTR [rax],al
  40d470:	add    DWORD PTR [rax],edx
  40d472:	or     DWORD PTR [rax],eax
  40d474:	adc    BYTE PTR [rdx+0xc],ah
  40d477:	xor    BYTE PTR [rbx],cl
  40d479:	(bad)  
  40d47a:	or     dh,BYTE PTR [rax+0x9]
  40d47d:	push   rax
  40d47e:	or     al,al
  40d480:	(bad)  
  40d481:	rol    BYTE PTR [rax+riz*8],1
  40d484:	add    dh,al
  40d486:	add    BYTE PTR [rax],al
  40d488:	add    DWORD PTR [rsi],eax
  40d48a:	add    eax,DWORD PTR [rax]
  40d48c:	(bad)  
  40d48d:	rex.X add sil,BYTE PTR [rax]
  40d490:	add    DWORD PTR [rax+0x0],esp
  40d493:	add    BYTE PTR [rcx],al
  40d495:	(bad)  
  40d496:	add    eax,DWORD PTR [rax]
  40d498:	(bad)  
  40d499:	rex.X add sil,BYTE PTR [rax]
  40d49c:	add    DWORD PTR [rax+0x0],esp
  40d49f:	add    BYTE PTR [rcx],al
  40d4a1:	add    BYTE PTR [rax],al
  40d4a3:	add    BYTE PTR [rcx],al
  40d4a5:	add    BYTE PTR [rax],al
  40d4a7:	add    BYTE PTR [rcx],al
  40d4a9:	add    eax,0x32050002
  40d4ae:	add    DWORD PTR [rax],esi
  40d4b0:	add    DWORD PTR [rip+0x52050002],eax        # 0x5245d4b8
  40d4b6:	add    DWORD PTR [rax],esi
  40d4b8:	add    DWORD PTR [rcx+rax*1],eax
  40d4bb:	add    BYTE PTR [rdx+rax*2],al
  40d4be:	add    BYTE PTR [rax],al
  40d4c0:	add    DWORD PTR [rcx+rax*1],eax
  40d4c3:	add    BYTE PTR [rdx+rax*2],al
  40d4c6:	add    BYTE PTR [rax],al
  40d4c8:	add    DWORD PTR [rsi],eax
  40d4ca:	add    eax,DWORD PTR [rax]
  40d4cc:	(bad)  
  40d4cd:	rex.X add sil,BYTE PTR [rax]
  40d4d0:	add    DWORD PTR [rax+0x0],esp
  40d4d3:	add    BYTE PTR [rcx],al
  40d4d5:	add    BYTE PTR [rax],al
  40d4d7:	add    BYTE PTR [rcx],al
  40d4d9:	add    BYTE PTR [rax],al
  40d4db:	add    BYTE PTR [rcx],al
  40d4dd:	add    BYTE PTR [rax],al
  40d4df:	add    BYTE PTR [rcx],al
  40d4e1:	or     al,BYTE PTR [rsi]
  40d4e3:	add    BYTE PTR [rdx],cl
  40d4e5:	jb     0x40d4ed
  40d4e7:	xor    BYTE PTR [rip+0x3700460],al        # 0x3b0d94d
  40d4ed:	push   rax
  40d4ee:	add    al,al
  40d4f0:	add    DWORD PTR [rdx],ecx
  40d4f2:	add    eax,0x6d20a05
  40d4f7:	add    eax,DWORD PTR [rbx]
  40d4f9:	xor    BYTE PTR [rdx],al
  40d4fb:	(bad)  
  40d4fc:	add    DWORD PTR [rax+0x0],edx
  40d4ff:	add    BYTE PTR [rcx],al
  40d501:	add    al,0x1
  40d503:	add    BYTE PTR [rdx+rax*2],al
  40d506:	add    BYTE PTR [rax],al
  40d508:	add    DWORD PTR [rsi],eax
  40d50a:	add    eax,DWORD PTR [rax]
  40d50c:	(bad)  
  40d50d:	rex.X add sil,BYTE PTR [rax]
  40d510:	add    DWORD PTR [rax+0x0],esp
  40d513:	add    BYTE PTR [rcx],al
  40d515:	add    BYTE PTR [rax],al
  40d517:	add    BYTE PTR [rcx],al
  40d519:	add    al,0x1
  40d51b:	add    BYTE PTR [rdx+riz*4],al
  40d51e:	add    BYTE PTR [rax],al
  40d520:	add    DWORD PTR [rax],eax
  40d522:	add    BYTE PTR [rax],al
  40d524:	add    DWORD PTR [rsi],edx
  40d526:	or     DWORD PTR [rax],eax
  40d528:	(bad)  
  40d529:	mov    BYTE PTR [rsi],al
  40d52b:	add    BYTE PTR [rax],dl
  40d52d:	js     0x40d534
  40d52f:	add    BYTE PTR [rbx],cl
  40d531:	push   0xffffffffe2060004
  40d536:	add    dh,BYTE PTR [rax]
  40d538:	add    DWORD PTR [rax+0x0],esp
  40d53b:	add    BYTE PTR [rcx],al
  40d53d:	add    BYTE PTR [rax],al
  40d53f:	add    BYTE PTR [rcx],al
  40d541:	add    BYTE PTR [rax],al
  40d543:	add    BYTE PTR [rcx],al
  40d545:	add    BYTE PTR [rax],al
  40d547:	add    BYTE PTR [rcx],al
  40d549:	(bad)  
  40d54a:	add    eax,DWORD PTR [rax]
  40d54c:	(bad)  
  40d54d:	(bad)  
  40d54f:	xor    BYTE PTR [rcx],al
  40d551:	(bad)  
  40d552:	add    BYTE PTR [rax],al
  40d554:	add    DWORD PTR [rdi+rax*1],ecx
  40d557:	add    BYTE PTR [rdx+riz*4],cl
  40d55a:	or     BYTE PTR [rax],dh
  40d55c:	(bad)  
  40d55d:	(bad)  
  40d55e:	(bad)  
  40d55f:	jo     0x40d566
  40d561:	push   rax
  40d562:	add    al,0xc0
  40d564:	add    dl,al
  40d566:	add    BYTE PTR [rax],al
  40d568:	add    DWORD PTR [rcx],edx
  40d56a:	or     DWORD PTR [rip+0x30db211],eax        # 0x34e8781
  40d570:	or     dh,BYTE PTR [rax]
  40d572:	or     DWORD PTR [rax+0x8],esp
  40d575:	jo     0x40d57e
  40d577:	rol    BYTE PTR [rip+0x1e003d0],0x50        # 0x220d94e
  40d57e:	add    BYTE PTR [rax],al
  40d580:	add    DWORD PTR [rcx+rax*1],eax
  40d583:	add    BYTE PTR [rdx+rax*2],al
  40d586:	add    BYTE PTR [rax],al
  40d588:	add    DWORD PTR [rdx],ecx
  40d58a:	(bad)  
  40d58b:	add    BYTE PTR [rdx],cl
  40d58d:	xor    al,BYTE PTR [rsi]
  40d58f:	xor    BYTE PTR [rip+0x3700460],al        # 0x3b0d9f5
  40d595:	push   rax
  40d596:	add    al,al
  40d598:	add    DWORD PTR [rip+0x32050002],eax        # 0x3245d5a0
  40d59e:	add    DWORD PTR [rax],esi
  40d5a0:	add    DWORD PTR [rax],ecx
  40d5a2:	add    eax,0x4420800
  40d5a7:	xor    BYTE PTR [rbx],al
  40d5a9:	(bad)  
  40d5aa:	add    dh,BYTE PTR [rax+0x1]
  40d5ad:	push   rax
  40d5ae:	add    BYTE PTR [rax],al
  40d5b0:	add    DWORD PTR [rdi],eax
  40d5b2:	add    al,0x0
  40d5b4:	(bad)  
  40d5b5:	xor    al,BYTE PTR [rbx]
  40d5b7:	xor    BYTE PTR [rdx],al
  40d5b9:	(bad)  
  40d5ba:	add    DWORD PTR [rax+0x1],esi
  40d5bd:	add    eax,0x32050002
  40d5c2:	add    DWORD PTR [rax],esi
  40d5c4:	add    DWORD PTR [rip+0x32050002],eax        # 0x3245d5cc
  40d5ca:	add    DWORD PTR [rax],esi
  40d5cc:	add    DWORD PTR [rax],eax
  40d5ce:	add    BYTE PTR [rax],al
  40d5d0:	add    DWORD PTR [rax],eax
  40d5d2:	add    BYTE PTR [rax],al
  40d5d4:	add    DWORD PTR [rax],eax
  40d5d6:	add    BYTE PTR [rax],al
  40d5d8:	add    DWORD PTR [rdi],eax
  40d5da:	add    al,0x0
  40d5dc:	(bad)  
  40d5dd:	xor    al,BYTE PTR [rbx]
  40d5df:	xor    BYTE PTR [rdx],al
  40d5e1:	(bad)  
  40d5e2:	add    DWORD PTR [rax+0x1],esi
  40d5e5:	(bad)  
  40d5e6:	add    eax,DWORD PTR [rax]
  40d5e8:	(bad)  
  40d5e9:	rex.X add sil,BYTE PTR [rax]
  40d5ec:	add    DWORD PTR [rax+0x0],esp
  40d5ef:	add    BYTE PTR [rcx],al
  40d5f1:	add    eax,0x32050002
  40d5f6:	add    DWORD PTR [rax],esi
  40d5f8:	add    DWORD PTR [rdi],eax
  40d5fa:	add    al,0x0
  40d5fc:	(bad)  
  40d5fd:	xor    al,BYTE PTR [rbx]
  40d5ff:	xor    BYTE PTR [rdx],al
  40d601:	(bad)  
  40d602:	add    DWORD PTR [rax+0x1],esi
  40d605:	(bad)  
  40d606:	add    eax,DWORD PTR [rax]
  40d608:	(bad)  
  40d609:	rex.X add sil,BYTE PTR [rax]
  40d60c:	add    DWORD PTR [rax+0x0],esp
  40d60f:	add    BYTE PTR [rcx],al
  40d611:	(bad)  
  40d612:	add    eax,DWORD PTR [rax]
  40d614:	(bad)  
  40d615:	rex.X add sil,BYTE PTR [rax]
  40d618:	add    DWORD PTR [rax+0x0],esp
  40d61b:	add    BYTE PTR [rcx],al
  40d61d:	or     BYTE PTR [rip+0x4420800],al        # 0x482de23
  40d623:	xor    BYTE PTR [rbx],al
  40d625:	(bad)  
  40d626:	add    dh,BYTE PTR [rax+0x1]
  40d629:	push   rax
  40d62a:	add    BYTE PTR [rax],al
  40d62c:	add    DWORD PTR [rdx],ecx
  40d62e:	(bad)  
  40d62f:	add    BYTE PTR [rdx],cl
  40d631:	mov    dl,0x6
  40d633:	xor    BYTE PTR [rip+0x3700460],al        # 0x3b0da99
  40d639:	push   rax
  40d63a:	add    al,al
  40d63c:	add    DWORD PTR [rax],eax
  40d63e:	add    BYTE PTR [rax],al
  40d640:	add    DWORD PTR [rax],eax
	...

Disassembly of section .bss:

000000000040e000 <.bss>:
	...

Disassembly of section .idata:

000000000040f000 <.idata>:
  40f000:	push   rax
  40f001:	lock add BYTE PTR [rax],al
	...
  40f00c:	cwde   
  40f00d:	std    
  40f00e:	add    BYTE PTR [rax],al
  40f010:	shl    bl,0x0
  40f013:	add    BYTE PTR [rax+0xf0],bl
  40f019:	add    BYTE PTR [rax],al
  40f01b:	add    BYTE PTR [rax],al
  40f01d:	add    BYTE PTR [rax],al
  40f01f:	add    BYTE PTR [rax-0x2],bl
  40f022:	add    BYTE PTR [rax],al
  40f024:	or     ah,dh
  40f026:	add    BYTE PTR [rax],al
  40f028:	add    dl,dh
	...
  40f032:	add    BYTE PTR [rax],al
  40f034:	rex.R inc DWORD PTR [rax]
  40f037:	add    BYTE PTR [rax-0xb],dh
	...
  40f04e:	add    BYTE PTR [rax],al
  40f050:	xor    bh,dh
  40f052:	add    BYTE PTR [rax],al
  40f054:	add    BYTE PTR [rax],al
  40f056:	add    BYTE PTR [rax],al
  40f058:	test   QWORD PTR [rax],0x0
  40f05f:	add    BYTE PTR [rdx-0x9],dl
  40f062:	add    BYTE PTR [rax],al
  40f064:	add    BYTE PTR [rax],al
  40f066:	add    BYTE PTR [rax],al
  40f068:	pop    rsp
  40f069:	test   DWORD PTR [rax],0x0
  40f06f:	add    BYTE PTR [rax-0x9],dh
  40f072:	add    BYTE PTR [rax],al
  40f074:	add    BYTE PTR [rax],al
  40f076:	add    BYTE PTR [rax],al
  40f078:	xor    bh,0x0
  40f07b:	add    BYTE PTR [rax],al
  40f07d:	add    BYTE PTR [rax],al
  40f07f:	add    BYTE PTR [rsi+0xf7],dl
  40f085:	add    BYTE PTR [rax],al
  40f087:	add    BYTE PTR [rsi+0xf7],ah
	...
  40f095:	add    BYTE PTR [rax],al
  40f097:	add    BYTE PTR [rdi+rsi*8+0x0],bh
  40f09e:	add    BYTE PTR [rax],al
  40f0a0:	retf   0xf7
  40f0a3:	add    BYTE PTR [rax],al
  40f0a5:	add    BYTE PTR [rax],al
  40f0a7:	add    dh,bl
  40f0a9:	test   DWORD PTR [rax],0x0
  40f0af:	add    ah,ch
  40f0b1:	test   DWORD PTR [rax],0x0
  40f0b7:	add    dl,bh
  40f0b9:	test   DWORD PTR [rax],0x0
  40f0bf:	add    BYTE PTR [rax+rdi*8],cl
  40f0c2:	add    BYTE PTR [rax],al
  40f0c4:	add    BYTE PTR [rax],al
  40f0c6:	add    BYTE PTR [rax],al
  40f0c8:	and    al,0xf8
  40f0ca:	add    BYTE PTR [rax],al
  40f0cc:	add    BYTE PTR [rax],al
  40f0ce:	add    BYTE PTR [rax],al
  40f0d0:	ss clc 
  40f0d2:	add    BYTE PTR [rax],al
  40f0d4:	add    BYTE PTR [rax],al
  40f0d6:	add    BYTE PTR [rax],al
  40f0d8:	rex.W clc 
  40f0da:	add    BYTE PTR [rax],al
  40f0dc:	add    BYTE PTR [rax],al
  40f0de:	add    BYTE PTR [rax],al
  40f0e0:	(bad)  
  40f0e1:	clc    
  40f0e2:	add    BYTE PTR [rax],al
  40f0e4:	add    BYTE PTR [rax],al
  40f0e6:	add    BYTE PTR [rax],al
  40f0e8:	jb     0x40f0e2
  40f0ea:	add    BYTE PTR [rax],al
  40f0ec:	add    BYTE PTR [rax],al
  40f0ee:	add    BYTE PTR [rax],al
  40f0f0:	xchg   al,bh
  40f0f2:	add    BYTE PTR [rax],al
  40f0f4:	add    BYTE PTR [rax],al
  40f0f6:	add    BYTE PTR [rax],al
  40f0f8:	pushf  
  40f0f9:	clc    
  40f0fa:	add    BYTE PTR [rax],al
  40f0fc:	add    BYTE PTR [rax],al
  40f0fe:	add    BYTE PTR [rax],al
  40f100:	mov    dl,0xf8
  40f102:	add    BYTE PTR [rax],al
  40f104:	add    BYTE PTR [rax],al
  40f106:	add    BYTE PTR [rax],al
  40f108:	enter  0xf8,0x0
  40f10c:	add    BYTE PTR [rax],al
  40f10e:	add    BYTE PTR [rax],al
  40f110:	loopne 0x40f10a
  40f112:	add    BYTE PTR [rax],al
  40f114:	add    BYTE PTR [rax],al
  40f116:	add    BYTE PTR [rax],al
  40f118:	lock clc 
  40f11a:	add    BYTE PTR [rax],al
  40f11c:	add    BYTE PTR [rax],al
  40f11e:	add    BYTE PTR [rax],al
  40f120:	add    al,0xf9
  40f122:	add    BYTE PTR [rax],al
  40f124:	add    BYTE PTR [rax],al
  40f126:	add    BYTE PTR [rax],al
  40f128:	(bad)  
  40f129:	stc    
  40f12a:	add    BYTE PTR [rax],al
  40f12c:	add    BYTE PTR [rax],al
  40f12e:	add    BYTE PTR [rax],al
  40f130:	xor    cl,bh
  40f132:	add    BYTE PTR [rax],al
  40f134:	add    BYTE PTR [rax],al
  40f136:	add    BYTE PTR [rax],al
  40f138:	rex stc 
  40f13a:	add    BYTE PTR [rax],al
  40f13c:	add    BYTE PTR [rax],al
  40f13e:	add    BYTE PTR [rax],al
  40f140:	pop    rsp
  40f141:	stc    
  40f142:	add    BYTE PTR [rax],al
  40f144:	add    BYTE PTR [rax],al
  40f146:	add    BYTE PTR [rax],al
  40f148:	je     0x40f143
  40f14a:	add    BYTE PTR [rax],al
  40f14c:	add    BYTE PTR [rax],al
  40f14e:	add    BYTE PTR [rax],al
  40f150:	(bad)  
  40f151:	stc    
  40f152:	add    BYTE PTR [rax],al
  40f154:	add    BYTE PTR [rax],al
  40f156:	add    BYTE PTR [rax],al
  40f158:	mov    ?,ecx
  40f15a:	add    BYTE PTR [rax],al
  40f15c:	add    BYTE PTR [rax],al
  40f15e:	add    BYTE PTR [rax],al
  40f160:	pushf  
  40f161:	stc    
  40f162:	add    BYTE PTR [rax],al
  40f164:	add    BYTE PTR [rax],al
  40f166:	add    BYTE PTR [rax],al
  40f168:	mov    dl,0xf9
  40f16a:	add    BYTE PTR [rax],al
  40f16c:	add    BYTE PTR [rax],al
  40f16e:	add    BYTE PTR [rax],al
  40f170:	int3   
  40f171:	stc    
  40f172:	add    BYTE PTR [rax],al
  40f174:	add    BYTE PTR [rax],al
  40f176:	add    BYTE PTR [rax],al
  40f178:	fdivr  st,st(1)
  40f17a:	add    BYTE PTR [rax],al
  40f17c:	add    BYTE PTR [rax],al
  40f17e:	add    BYTE PTR [rax],al
  40f180:	in     al,dx
  40f181:	stc    
  40f182:	add    BYTE PTR [rax],al
  40f184:	add    BYTE PTR [rax],al
  40f186:	add    BYTE PTR [rax],al
  40f188:	add    bh,dl
  40f18a:	add    BYTE PTR [rax],al
  40f18c:	add    BYTE PTR [rax],al
  40f18e:	add    BYTE PTR [rax],al
  40f190:	(bad)  
  40f191:	cli    
  40f192:	add    BYTE PTR [rax],al
  40f194:	add    BYTE PTR [rax],al
  40f196:	add    BYTE PTR [rax],al
  40f198:	xor    dl,bh
  40f19a:	add    BYTE PTR [rax],al
  40f19c:	add    BYTE PTR [rax],al
  40f19e:	add    BYTE PTR [rax],al
  40f1a0:	rex.R cli 
  40f1a2:	add    BYTE PTR [rax],al
  40f1a4:	add    BYTE PTR [rax],al
  40f1a6:	add    BYTE PTR [rax],al
  40f1a8:	pop    rsi
  40f1a9:	cli    
  40f1aa:	add    BYTE PTR [rax],al
  40f1ac:	add    BYTE PTR [rax],al
  40f1ae:	add    BYTE PTR [rax],al
  40f1b0:	jl     0x40f1ac
  40f1b2:	add    BYTE PTR [rax],al
  40f1b4:	add    BYTE PTR [rax],al
  40f1b6:	add    BYTE PTR [rax],al
  40f1b8:	test   dl,bh
  40f1ba:	add    BYTE PTR [rax],al
  40f1bc:	add    BYTE PTR [rax],al
  40f1be:	add    BYTE PTR [rax],al
  40f1c0:	mov    ?,edx
  40f1c2:	add    BYTE PTR [rax],al
  40f1c4:	add    BYTE PTR [rax],al
  40f1c6:	add    BYTE PTR [rax],al
  40f1c8:	movabs ds:0xb0000000000000fa,al
  40f1d1:	cli    
  40f1d2:	add    BYTE PTR [rax],al
  40f1d4:	add    BYTE PTR [rax],al
  40f1d6:	add    BYTE PTR [rax],al
  40f1d8:	int3   
  40f1d9:	cli    
  40f1da:	add    BYTE PTR [rax],al
  40f1dc:	add    BYTE PTR [rax],al
  40f1de:	add    BYTE PTR [rax],al
  40f1e0:	fdivp  st(2),st
  40f1e2:	add    BYTE PTR [rax],al
  40f1e4:	add    BYTE PTR [rax],al
  40f1e6:	add    BYTE PTR [rax],al
  40f1e8:	out    dx,al
  40f1e9:	cli    
  40f1ea:	add    BYTE PTR [rax],al
  40f1ec:	add    BYTE PTR [rax],al
  40f1ee:	add    BYTE PTR [rax],al
  40f1f0:	add    al,0xfb
	...
  40f1fe:	add    BYTE PTR [rax],al
  40f200:	sbb    bh,bl
  40f202:	add    BYTE PTR [rax],al
  40f204:	add    BYTE PTR [rax],al
  40f206:	add    BYTE PTR [rax],al
  40f208:	xor    bh,bl
  40f20a:	add    BYTE PTR [rax],al
  40f20c:	add    BYTE PTR [rax],al
  40f20e:	add    BYTE PTR [rax],al
  40f210:	rex sti 
  40f212:	add    BYTE PTR [rax],al
  40f214:	add    BYTE PTR [rax],al
  40f216:	add    BYTE PTR [rax],al
  40f218:	push   rax
  40f219:	sti    
  40f21a:	add    BYTE PTR [rax],al
  40f21c:	add    BYTE PTR [rax],al
  40f21e:	add    BYTE PTR [rax],al
  40f220:	pop    rsp
  40f221:	sti    
  40f222:	add    BYTE PTR [rax],al
  40f224:	add    BYTE PTR [rax],al
  40f226:	add    BYTE PTR [rax],al
  40f228:	push   0xfffffffffffffffb
  40f22a:	add    BYTE PTR [rax],al
  40f22c:	add    BYTE PTR [rax],al
  40f22e:	add    BYTE PTR [rax],al
  40f230:	jp     0x40f22d
  40f232:	add    BYTE PTR [rax],al
  40f234:	add    BYTE PTR [rax],al
  40f236:	add    BYTE PTR [rax],al
  40f238:	mov    ebx,?
  40f23a:	add    BYTE PTR [rax],al
  40f23c:	add    BYTE PTR [rax],al
  40f23e:	add    BYTE PTR [rax],al
  40f240:	movabs al,ds:0xaa000000000000fb
  40f249:	sti    
  40f24a:	add    BYTE PTR [rax],al
  40f24c:	add    BYTE PTR [rax],al
  40f24e:	add    BYTE PTR [rax],al
  40f250:	mov    eax,0xfb
  40f255:	add    BYTE PTR [rax],al
  40f257:	add    dl,al
  40f259:	sti    
  40f25a:	add    BYTE PTR [rax],al
  40f25c:	add    BYTE PTR [rax],al
  40f25e:	add    BYTE PTR [rax],al
  40f260:	int3   
  40f261:	sti    
  40f262:	add    BYTE PTR [rax],al
  40f264:	add    BYTE PTR [rax],al
  40f266:	add    BYTE PTR [rax],al
  40f268:	(bad)  
  40f269:	sti    
  40f26a:	add    BYTE PTR [rax],al
  40f26c:	add    BYTE PTR [rax],al
  40f26e:	add    BYTE PTR [rax],al
  40f270:	loop   0x40f26d
  40f272:	add    BYTE PTR [rax],al
  40f274:	add    BYTE PTR [rax],al
  40f276:	add    BYTE PTR [rax],al
  40f278:	(bad)  
  40f279:	sti    
  40f27a:	add    BYTE PTR [rax],al
  40f27c:	add    BYTE PTR [rax],al
  40f27e:	add    BYTE PTR [rax],al
  40f280:	hlt    
  40f281:	sti    
  40f282:	add    BYTE PTR [rax],al
  40f284:	add    BYTE PTR [rax],al
  40f286:	add    BYTE PTR [rax],al
  40f288:	(bad)  
  40f289:	sti    
  40f28a:	add    BYTE PTR [rax],al
  40f28c:	add    BYTE PTR [rax],al
  40f28e:	add    BYTE PTR [rax],al
  40f290:	or     ah,bh
  40f292:	add    BYTE PTR [rax],al
  40f294:	add    BYTE PTR [rax],al
  40f296:	add    BYTE PTR [rax],al
  40f298:	adc    bh,ah
  40f29a:	add    BYTE PTR [rax],al
  40f29c:	add    BYTE PTR [rax],al
  40f29e:	add    BYTE PTR [rax],al
  40f2a0:	sbb    bh,ah
  40f2a2:	add    BYTE PTR [rax],al
  40f2a4:	add    BYTE PTR [rax],al
  40f2a6:	add    BYTE PTR [rax],al
  40f2a8:	and    al,0xfc
  40f2aa:	add    BYTE PTR [rax],al
  40f2ac:	add    BYTE PTR [rax],al
  40f2ae:	add    BYTE PTR [rax],al
  40f2b0:	sub    al,0xfc
  40f2b2:	add    BYTE PTR [rax],al
  40f2b4:	add    BYTE PTR [rax],al
  40f2b6:	add    BYTE PTR [rax],al
  40f2b8:	ss cld 
  40f2ba:	add    BYTE PTR [rax],al
  40f2bc:	add    BYTE PTR [rax],al
  40f2be:	add    BYTE PTR [rax],al
  40f2c0:	ds cld 
  40f2c2:	add    BYTE PTR [rax],al
  40f2c4:	add    BYTE PTR [rax],al
  40f2c6:	add    BYTE PTR [rax],al
  40f2c8:	rex.RX cld 
  40f2ca:	add    BYTE PTR [rax],al
  40f2cc:	add    BYTE PTR [rax],al
  40f2ce:	add    BYTE PTR [rax],al
  40f2d0:	push   rax
  40f2d1:	cld    
  40f2d2:	add    BYTE PTR [rax],al
  40f2d4:	add    BYTE PTR [rax],al
  40f2d6:	add    BYTE PTR [rax],al
  40f2d8:	pop    rdx
  40f2d9:	cld    
  40f2da:	add    BYTE PTR [rax],al
  40f2dc:	add    BYTE PTR [rax],al
  40f2de:	add    BYTE PTR [rax],al
  40f2e0:	fs cld 
  40f2e2:	add    BYTE PTR [rax],al
  40f2e4:	add    BYTE PTR [rax],al
  40f2e6:	add    BYTE PTR [rax],al
  40f2e8:	outs   dx,BYTE PTR ds:[rsi]
  40f2e9:	cld    
  40f2ea:	add    BYTE PTR [rax],al
  40f2ec:	add    BYTE PTR [rax],al
  40f2ee:	add    BYTE PTR [rax],al
  40f2f0:	js     0x40f2ee
  40f2f2:	add    BYTE PTR [rax],al
  40f2f4:	add    BYTE PTR [rax],al
  40f2f6:	add    BYTE PTR [rax],al
  40f2f8:	(bad)  
  40f2f9:	cld    
  40f2fa:	add    BYTE PTR [rax],al
  40f2fc:	add    BYTE PTR [rax],al
  40f2fe:	add    BYTE PTR [rax],al
  40f300:	mov    esp,?
  40f302:	add    BYTE PTR [rax],al
  40f304:	add    BYTE PTR [rax],al
  40f306:	add    BYTE PTR [rax],al
  40f308:	xchg   esi,eax
  40f309:	cld    
  40f30a:	add    BYTE PTR [rax],al
  40f30c:	add    BYTE PTR [rax],al
  40f30e:	add    BYTE PTR [rax],al
  40f310:	movabs al,ds:0xaa000000000000fc
  40f319:	cld    
  40f31a:	add    BYTE PTR [rax],al
  40f31c:	add    BYTE PTR [rax],al
  40f31e:	add    BYTE PTR [rax],al
  40f320:	mov    ah,0xfc
  40f322:	add    BYTE PTR [rax],al
  40f324:	add    BYTE PTR [rax],al
  40f326:	add    BYTE PTR [rax],al
  40f328:	sar    ah,0x0
  40f32b:	add    BYTE PTR [rax],al
  40f32d:	add    BYTE PTR [rax],al
  40f32f:	add    dl,cl
  40f331:	cld    
  40f332:	add    BYTE PTR [rax],al
  40f334:	add    BYTE PTR [rax],al
  40f336:	add    BYTE PTR [rax],al
  40f338:	(bad)  
  40f339:	cld    
  40f33a:	add    BYTE PTR [rax],al
  40f33c:	add    BYTE PTR [rax],al
  40f33e:	add    BYTE PTR [rax],al
  40f340:	fdivp  st(4),st
  40f342:	add    BYTE PTR [rax],al
  40f344:	add    BYTE PTR [rax],al
  40f346:	add    BYTE PTR [rax],al
  40f348:	call   0x40f449
  40f34d:	add    BYTE PTR [rax],al
  40f34f:	add    dl,dh
  40f351:	cld    
  40f352:	add    BYTE PTR [rax],al
  40f354:	add    BYTE PTR [rax],al
  40f356:	add    BYTE PTR [rax],al
  40f358:	(bad)  
  40f359:	cld    
  40f35a:	add    BYTE PTR [rax],al
  40f35c:	add    BYTE PTR [rax],al
  40f35e:	add    BYTE PTR [rax],al
  40f360:	or     ch,bh
  40f362:	add    BYTE PTR [rax],al
  40f364:	add    BYTE PTR [rax],al
  40f366:	add    BYTE PTR [rax],al
  40f368:	adc    bh,ch
  40f36a:	add    BYTE PTR [rax],al
  40f36c:	add    BYTE PTR [rax],al
  40f36e:	add    BYTE PTR [rax],al
  40f370:	sbb    al,0xfd
  40f372:	add    BYTE PTR [rax],al
  40f374:	add    BYTE PTR [rax],al
  40f376:	add    BYTE PTR [rax],al
  40f378:	es std 
  40f37a:	add    BYTE PTR [rax],al
  40f37c:	add    BYTE PTR [rax],al
  40f37e:	add    BYTE PTR [rax],al
  40f380:	xor    ch,bh
  40f382:	add    BYTE PTR [rax],al
  40f384:	add    BYTE PTR [rax],al
  40f386:	add    BYTE PTR [rax],al
  40f388:	cmp    bh,ch
  40f38a:	add    BYTE PTR [rax],al
  40f38c:	add    BYTE PTR [rax],al
  40f38e:	add    BYTE PTR [rax],al
  40f390:	rex.R std 
  40f392:	add    BYTE PTR [rax],al
  40f394:	add    BYTE PTR [rax],al
  40f396:	add    BYTE PTR [rax],al
  40f398:	push   rax
  40f399:	std    
  40f39a:	add    BYTE PTR [rax],al
  40f39c:	add    BYTE PTR [rax],al
  40f39e:	add    BYTE PTR [rax],al
  40f3a0:	pop    rdx
  40f3a1:	std    
  40f3a2:	add    BYTE PTR [rax],al
  40f3a4:	add    BYTE PTR [rax],al
  40f3a6:	add    BYTE PTR [rax],al
  40f3a8:	fs std 
  40f3aa:	add    BYTE PTR [rax],al
  40f3ac:	add    BYTE PTR [rax],al
  40f3ae:	add    BYTE PTR [rax],al
  40f3b0:	outs   dx,BYTE PTR ds:[rsi]
  40f3b1:	std    
	...
  40f3be:	add    BYTE PTR [rax],al
  40f3c0:	xor    bh,dh
  40f3c2:	add    BYTE PTR [rax],al
  40f3c4:	add    BYTE PTR [rax],al
  40f3c6:	add    BYTE PTR [rax],al
  40f3c8:	test   QWORD PTR [rax],0x0
  40f3cf:	add    BYTE PTR [rdx-0x9],dl
  40f3d2:	add    BYTE PTR [rax],al
  40f3d4:	add    BYTE PTR [rax],al
  40f3d6:	add    BYTE PTR [rax],al
  40f3d8:	pop    rsp
  40f3d9:	test   DWORD PTR [rax],0x0
  40f3df:	add    BYTE PTR [rax-0x9],dh
  40f3e2:	add    BYTE PTR [rax],al
  40f3e4:	add    BYTE PTR [rax],al
  40f3e6:	add    BYTE PTR [rax],al
  40f3e8:	xor    bh,0x0
  40f3eb:	add    BYTE PTR [rax],al
  40f3ed:	add    BYTE PTR [rax],al
  40f3ef:	add    BYTE PTR [rsi+0xf7],dl
  40f3f5:	add    BYTE PTR [rax],al
  40f3f7:	add    BYTE PTR [rsi+0xf7],ah
	...
  40f405:	add    BYTE PTR [rax],al
  40f407:	add    BYTE PTR [rdi+rsi*8+0x0],bh
  40f40e:	add    BYTE PTR [rax],al
  40f410:	retf   0xf7
  40f413:	add    BYTE PTR [rax],al
  40f415:	add    BYTE PTR [rax],al
  40f417:	add    dh,bl
  40f419:	test   DWORD PTR [rax],0x0
  40f41f:	add    ah,ch
  40f421:	test   DWORD PTR [rax],0x0
  40f427:	add    dl,bh
  40f429:	test   DWORD PTR [rax],0x0
  40f42f:	add    BYTE PTR [rax+rdi*8],cl
  40f432:	add    BYTE PTR [rax],al
  40f434:	add    BYTE PTR [rax],al
  40f436:	add    BYTE PTR [rax],al
  40f438:	and    al,0xf8
  40f43a:	add    BYTE PTR [rax],al
  40f43c:	add    BYTE PTR [rax],al
  40f43e:	add    BYTE PTR [rax],al
  40f440:	ss clc 
  40f442:	add    BYTE PTR [rax],al
  40f444:	add    BYTE PTR [rax],al
  40f446:	add    BYTE PTR [rax],al
  40f448:	rex.W clc 
  40f44a:	add    BYTE PTR [rax],al
  40f44c:	add    BYTE PTR [rax],al
  40f44e:	add    BYTE PTR [rax],al
  40f450:	(bad)  
  40f451:	clc    
  40f452:	add    BYTE PTR [rax],al
  40f454:	add    BYTE PTR [rax],al
  40f456:	add    BYTE PTR [rax],al
  40f458:	jb     0x40f452
  40f45a:	add    BYTE PTR [rax],al
  40f45c:	add    BYTE PTR [rax],al
  40f45e:	add    BYTE PTR [rax],al
  40f460:	xchg   al,bh
  40f462:	add    BYTE PTR [rax],al
  40f464:	add    BYTE PTR [rax],al
  40f466:	add    BYTE PTR [rax],al
  40f468:	pushf  
  40f469:	clc    
  40f46a:	add    BYTE PTR [rax],al
  40f46c:	add    BYTE PTR [rax],al
  40f46e:	add    BYTE PTR [rax],al
  40f470:	mov    dl,0xf8
  40f472:	add    BYTE PTR [rax],al
  40f474:	add    BYTE PTR [rax],al
  40f476:	add    BYTE PTR [rax],al
  40f478:	enter  0xf8,0x0
  40f47c:	add    BYTE PTR [rax],al
  40f47e:	add    BYTE PTR [rax],al
  40f480:	loopne 0x40f47a
  40f482:	add    BYTE PTR [rax],al
  40f484:	add    BYTE PTR [rax],al
  40f486:	add    BYTE PTR [rax],al
  40f488:	lock clc 
  40f48a:	add    BYTE PTR [rax],al
  40f48c:	add    BYTE PTR [rax],al
  40f48e:	add    BYTE PTR [rax],al
  40f490:	add    al,0xf9
  40f492:	add    BYTE PTR [rax],al
  40f494:	add    BYTE PTR [rax],al
  40f496:	add    BYTE PTR [rax],al
  40f498:	(bad)  
  40f499:	stc    
  40f49a:	add    BYTE PTR [rax],al
  40f49c:	add    BYTE PTR [rax],al
  40f49e:	add    BYTE PTR [rax],al
  40f4a0:	xor    cl,bh
  40f4a2:	add    BYTE PTR [rax],al
  40f4a4:	add    BYTE PTR [rax],al
  40f4a6:	add    BYTE PTR [rax],al
  40f4a8:	rex stc 
  40f4aa:	add    BYTE PTR [rax],al
  40f4ac:	add    BYTE PTR [rax],al
  40f4ae:	add    BYTE PTR [rax],al
  40f4b0:	pop    rsp
  40f4b1:	stc    
  40f4b2:	add    BYTE PTR [rax],al
  40f4b4:	add    BYTE PTR [rax],al
  40f4b6:	add    BYTE PTR [rax],al
  40f4b8:	je     0x40f4b3
  40f4ba:	add    BYTE PTR [rax],al
  40f4bc:	add    BYTE PTR [rax],al
  40f4be:	add    BYTE PTR [rax],al
  40f4c0:	(bad)  
  40f4c1:	stc    
  40f4c2:	add    BYTE PTR [rax],al
  40f4c4:	add    BYTE PTR [rax],al
  40f4c6:	add    BYTE PTR [rax],al
  40f4c8:	mov    ?,ecx
  40f4ca:	add    BYTE PTR [rax],al
  40f4cc:	add    BYTE PTR [rax],al
  40f4ce:	add    BYTE PTR [rax],al
  40f4d0:	pushf  
  40f4d1:	stc    
  40f4d2:	add    BYTE PTR [rax],al
  40f4d4:	add    BYTE PTR [rax],al
  40f4d6:	add    BYTE PTR [rax],al
  40f4d8:	mov    dl,0xf9
  40f4da:	add    BYTE PTR [rax],al
  40f4dc:	add    BYTE PTR [rax],al
  40f4de:	add    BYTE PTR [rax],al
  40f4e0:	int3   
  40f4e1:	stc    
  40f4e2:	add    BYTE PTR [rax],al
  40f4e4:	add    BYTE PTR [rax],al
  40f4e6:	add    BYTE PTR [rax],al
  40f4e8:	fdivr  st,st(1)
  40f4ea:	add    BYTE PTR [rax],al
  40f4ec:	add    BYTE PTR [rax],al
  40f4ee:	add    BYTE PTR [rax],al
  40f4f0:	in     al,dx
  40f4f1:	stc    
  40f4f2:	add    BYTE PTR [rax],al
  40f4f4:	add    BYTE PTR [rax],al
  40f4f6:	add    BYTE PTR [rax],al
  40f4f8:	add    bh,dl
  40f4fa:	add    BYTE PTR [rax],al
  40f4fc:	add    BYTE PTR [rax],al
  40f4fe:	add    BYTE PTR [rax],al
  40f500:	(bad)  
  40f501:	cli    
  40f502:	add    BYTE PTR [rax],al
  40f504:	add    BYTE PTR [rax],al
  40f506:	add    BYTE PTR [rax],al
  40f508:	xor    dl,bh
  40f50a:	add    BYTE PTR [rax],al
  40f50c:	add    BYTE PTR [rax],al
  40f50e:	add    BYTE PTR [rax],al
  40f510:	rex.R cli 
  40f512:	add    BYTE PTR [rax],al
  40f514:	add    BYTE PTR [rax],al
  40f516:	add    BYTE PTR [rax],al
  40f518:	pop    rsi
  40f519:	cli    
  40f51a:	add    BYTE PTR [rax],al
  40f51c:	add    BYTE PTR [rax],al
  40f51e:	add    BYTE PTR [rax],al
  40f520:	jl     0x40f51c
  40f522:	add    BYTE PTR [rax],al
  40f524:	add    BYTE PTR [rax],al
  40f526:	add    BYTE PTR [rax],al
  40f528:	test   dl,bh
  40f52a:	add    BYTE PTR [rax],al
  40f52c:	add    BYTE PTR [rax],al
  40f52e:	add    BYTE PTR [rax],al
  40f530:	mov    ?,edx
  40f532:	add    BYTE PTR [rax],al
  40f534:	add    BYTE PTR [rax],al
  40f536:	add    BYTE PTR [rax],al
  40f538:	movabs ds:0xb0000000000000fa,al
  40f541:	cli    
  40f542:	add    BYTE PTR [rax],al
  40f544:	add    BYTE PTR [rax],al
  40f546:	add    BYTE PTR [rax],al
  40f548:	int3   
  40f549:	cli    
  40f54a:	add    BYTE PTR [rax],al
  40f54c:	add    BYTE PTR [rax],al
  40f54e:	add    BYTE PTR [rax],al
  40f550:	fdivp  st(2),st
  40f552:	add    BYTE PTR [rax],al
  40f554:	add    BYTE PTR [rax],al
  40f556:	add    BYTE PTR [rax],al
  40f558:	out    dx,al
  40f559:	cli    
  40f55a:	add    BYTE PTR [rax],al
  40f55c:	add    BYTE PTR [rax],al
  40f55e:	add    BYTE PTR [rax],al
  40f560:	add    al,0xfb
	...
  40f56e:	add    BYTE PTR [rax],al
  40f570:	sbb    bh,bl
  40f572:	add    BYTE PTR [rax],al
  40f574:	add    BYTE PTR [rax],al
  40f576:	add    BYTE PTR [rax],al
  40f578:	xor    bh,bl
  40f57a:	add    BYTE PTR [rax],al
  40f57c:	add    BYTE PTR [rax],al
  40f57e:	add    BYTE PTR [rax],al
  40f580:	rex sti 
  40f582:	add    BYTE PTR [rax],al
  40f584:	add    BYTE PTR [rax],al
  40f586:	add    BYTE PTR [rax],al
  40f588:	push   rax
  40f589:	sti    
  40f58a:	add    BYTE PTR [rax],al
  40f58c:	add    BYTE PTR [rax],al
  40f58e:	add    BYTE PTR [rax],al
  40f590:	pop    rsp
  40f591:	sti    
  40f592:	add    BYTE PTR [rax],al
  40f594:	add    BYTE PTR [rax],al
  40f596:	add    BYTE PTR [rax],al
  40f598:	push   0xfffffffffffffffb
  40f59a:	add    BYTE PTR [rax],al
  40f59c:	add    BYTE PTR [rax],al
  40f59e:	add    BYTE PTR [rax],al
  40f5a0:	jp     0x40f59d
  40f5a2:	add    BYTE PTR [rax],al
  40f5a4:	add    BYTE PTR [rax],al
  40f5a6:	add    BYTE PTR [rax],al
  40f5a8:	mov    ebx,?
  40f5aa:	add    BYTE PTR [rax],al
  40f5ac:	add    BYTE PTR [rax],al
  40f5ae:	add    BYTE PTR [rax],al
  40f5b0:	movabs al,ds:0xaa000000000000fb
  40f5b9:	sti    
  40f5ba:	add    BYTE PTR [rax],al
  40f5bc:	add    BYTE PTR [rax],al
  40f5be:	add    BYTE PTR [rax],al
  40f5c0:	mov    eax,0xfb
  40f5c5:	add    BYTE PTR [rax],al
  40f5c7:	add    dl,al
  40f5c9:	sti    
  40f5ca:	add    BYTE PTR [rax],al
  40f5cc:	add    BYTE PTR [rax],al
  40f5ce:	add    BYTE PTR [rax],al
  40f5d0:	int3   
  40f5d1:	sti    
  40f5d2:	add    BYTE PTR [rax],al
  40f5d4:	add    BYTE PTR [rax],al
  40f5d6:	add    BYTE PTR [rax],al
  40f5d8:	(bad)  
  40f5d9:	sti    
  40f5da:	add    BYTE PTR [rax],al
  40f5dc:	add    BYTE PTR [rax],al
  40f5de:	add    BYTE PTR [rax],al
  40f5e0:	loop   0x40f5dd
  40f5e2:	add    BYTE PTR [rax],al
  40f5e4:	add    BYTE PTR [rax],al
  40f5e6:	add    BYTE PTR [rax],al
  40f5e8:	(bad)  
  40f5e9:	sti    
  40f5ea:	add    BYTE PTR [rax],al
  40f5ec:	add    BYTE PTR [rax],al
  40f5ee:	add    BYTE PTR [rax],al
  40f5f0:	hlt    
  40f5f1:	sti    
  40f5f2:	add    BYTE PTR [rax],al
  40f5f4:	add    BYTE PTR [rax],al
  40f5f6:	add    BYTE PTR [rax],al
  40f5f8:	(bad)  
  40f5f9:	sti    
  40f5fa:	add    BYTE PTR [rax],al
  40f5fc:	add    BYTE PTR [rax],al
  40f5fe:	add    BYTE PTR [rax],al
  40f600:	or     ah,bh
  40f602:	add    BYTE PTR [rax],al
  40f604:	add    BYTE PTR [rax],al
  40f606:	add    BYTE PTR [rax],al
  40f608:	adc    bh,ah
  40f60a:	add    BYTE PTR [rax],al
  40f60c:	add    BYTE PTR [rax],al
  40f60e:	add    BYTE PTR [rax],al
  40f610:	sbb    bh,ah
  40f612:	add    BYTE PTR [rax],al
  40f614:	add    BYTE PTR [rax],al
  40f616:	add    BYTE PTR [rax],al
  40f618:	and    al,0xfc
  40f61a:	add    BYTE PTR [rax],al
  40f61c:	add    BYTE PTR [rax],al
  40f61e:	add    BYTE PTR [rax],al
  40f620:	sub    al,0xfc
  40f622:	add    BYTE PTR [rax],al
  40f624:	add    BYTE PTR [rax],al
  40f626:	add    BYTE PTR [rax],al
  40f628:	ss cld 
  40f62a:	add    BYTE PTR [rax],al
  40f62c:	add    BYTE PTR [rax],al
  40f62e:	add    BYTE PTR [rax],al
  40f630:	ds cld 
  40f632:	add    BYTE PTR [rax],al
  40f634:	add    BYTE PTR [rax],al
  40f636:	add    BYTE PTR [rax],al
  40f638:	rex.RX cld 
  40f63a:	add    BYTE PTR [rax],al
  40f63c:	add    BYTE PTR [rax],al
  40f63e:	add    BYTE PTR [rax],al
  40f640:	push   rax
  40f641:	cld    
  40f642:	add    BYTE PTR [rax],al
  40f644:	add    BYTE PTR [rax],al
  40f646:	add    BYTE PTR [rax],al
  40f648:	pop    rdx
  40f649:	cld    
  40f64a:	add    BYTE PTR [rax],al
  40f64c:	add    BYTE PTR [rax],al
  40f64e:	add    BYTE PTR [rax],al
  40f650:	fs cld 
  40f652:	add    BYTE PTR [rax],al
  40f654:	add    BYTE PTR [rax],al
  40f656:	add    BYTE PTR [rax],al
  40f658:	outs   dx,BYTE PTR ds:[rsi]
  40f659:	cld    
  40f65a:	add    BYTE PTR [rax],al
  40f65c:	add    BYTE PTR [rax],al
  40f65e:	add    BYTE PTR [rax],al
  40f660:	js     0x40f65e
  40f662:	add    BYTE PTR [rax],al
  40f664:	add    BYTE PTR [rax],al
  40f666:	add    BYTE PTR [rax],al
  40f668:	(bad)  
  40f669:	cld    
  40f66a:	add    BYTE PTR [rax],al
  40f66c:	add    BYTE PTR [rax],al
  40f66e:	add    BYTE PTR [rax],al
  40f670:	mov    esp,?
  40f672:	add    BYTE PTR [rax],al
  40f674:	add    BYTE PTR [rax],al
  40f676:	add    BYTE PTR [rax],al
  40f678:	xchg   esi,eax
  40f679:	cld    
  40f67a:	add    BYTE PTR [rax],al
  40f67c:	add    BYTE PTR [rax],al
  40f67e:	add    BYTE PTR [rax],al
  40f680:	movabs al,ds:0xaa000000000000fc
  40f689:	cld    
  40f68a:	add    BYTE PTR [rax],al
  40f68c:	add    BYTE PTR [rax],al
  40f68e:	add    BYTE PTR [rax],al
  40f690:	mov    ah,0xfc
  40f692:	add    BYTE PTR [rax],al
  40f694:	add    BYTE PTR [rax],al
  40f696:	add    BYTE PTR [rax],al
  40f698:	sar    ah,0x0
  40f69b:	add    BYTE PTR [rax],al
  40f69d:	add    BYTE PTR [rax],al
  40f69f:	add    dl,cl
  40f6a1:	cld    
  40f6a2:	add    BYTE PTR [rax],al
  40f6a4:	add    BYTE PTR [rax],al
  40f6a6:	add    BYTE PTR [rax],al
  40f6a8:	(bad)  
  40f6a9:	cld    
  40f6aa:	add    BYTE PTR [rax],al
  40f6ac:	add    BYTE PTR [rax],al
  40f6ae:	add    BYTE PTR [rax],al
  40f6b0:	fdivp  st(4),st
  40f6b2:	add    BYTE PTR [rax],al
  40f6b4:	add    BYTE PTR [rax],al
  40f6b6:	add    BYTE PTR [rax],al
  40f6b8:	call   0x40f7b9
  40f6bd:	add    BYTE PTR [rax],al
  40f6bf:	add    dl,dh
  40f6c1:	cld    
  40f6c2:	add    BYTE PTR [rax],al
  40f6c4:	add    BYTE PTR [rax],al
  40f6c6:	add    BYTE PTR [rax],al
  40f6c8:	(bad)  
  40f6c9:	cld    
  40f6ca:	add    BYTE PTR [rax],al
  40f6cc:	add    BYTE PTR [rax],al
  40f6ce:	add    BYTE PTR [rax],al
  40f6d0:	or     ch,bh
  40f6d2:	add    BYTE PTR [rax],al
  40f6d4:	add    BYTE PTR [rax],al
  40f6d6:	add    BYTE PTR [rax],al
  40f6d8:	adc    bh,ch
  40f6da:	add    BYTE PTR [rax],al
  40f6dc:	add    BYTE PTR [rax],al
  40f6de:	add    BYTE PTR [rax],al
  40f6e0:	sbb    al,0xfd
  40f6e2:	add    BYTE PTR [rax],al
  40f6e4:	add    BYTE PTR [rax],al
  40f6e6:	add    BYTE PTR [rax],al
  40f6e8:	es std 
  40f6ea:	add    BYTE PTR [rax],al
  40f6ec:	add    BYTE PTR [rax],al
  40f6ee:	add    BYTE PTR [rax],al
  40f6f0:	xor    ch,bh
  40f6f2:	add    BYTE PTR [rax],al
  40f6f4:	add    BYTE PTR [rax],al
  40f6f6:	add    BYTE PTR [rax],al
  40f6f8:	cmp    bh,ch
  40f6fa:	add    BYTE PTR [rax],al
  40f6fc:	add    BYTE PTR [rax],al
  40f6fe:	add    BYTE PTR [rax],al
  40f700:	rex.R std 
  40f702:	add    BYTE PTR [rax],al
  40f704:	add    BYTE PTR [rax],al
  40f706:	add    BYTE PTR [rax],al
  40f708:	push   rax
  40f709:	std    
  40f70a:	add    BYTE PTR [rax],al
  40f70c:	add    BYTE PTR [rax],al
  40f70e:	add    BYTE PTR [rax],al
  40f710:	pop    rdx
  40f711:	std    
  40f712:	add    BYTE PTR [rax],al
  40f714:	add    BYTE PTR [rax],al
  40f716:	add    BYTE PTR [rax],al
  40f718:	fs std 
  40f71a:	add    BYTE PTR [rax],al
  40f71c:	add    BYTE PTR [rax],al
  40f71e:	add    BYTE PTR [rax],al
  40f720:	outs   dx,BYTE PTR ds:[rsi]
  40f721:	std    
	...
  40f72e:	add    BYTE PTR [rax],al
  40f730:	adc    DWORD PTR [rax],eax
  40f732:	rex.B
  40f733:	fs movsxd esp,DWORD PTR fs:[r11+0x65]
  40f739:	jae    0x40f7ae
  40f73b:	rex.B ins BYTE PTR es:[rdi],dx
  40f73d:	ins    BYTE PTR es:[rdi],dx
  40f73e:	outs   dx,DWORD PTR ds:[rsi]
  40f73f:	ja     0x40f7a6
  40f741:	movsxd esp,DWORD PTR fs:[r13+0x45]
  40f746:	js     0x40f748
  40f748:	(bad)  
  40f749:	add    BYTE PTR [rcx+0x64],al
  40f74c:	movsxd esp,DWORD PTR fs:[r13+0x0]
  40f751:	add    BYTE PTR [rbx],ah
  40f753:	add    DWORD PTR [rdi+0x65],eax
  40f756:	je     0x40f799
  40f758:	movsxd esp,DWORD PTR [rbp+0x0]
  40f75b:	add    BYTE PTR [rcx+rax*1],ah
  40f75e:	rex.RXB
  40f75f:	gs je  0x40f7a3
  40f762:	movsxd ebp,DWORD PTR [rcx+rcx*2+0x6e]
  40f766:	outs   dx,WORD PTR ds:[rsi]
  40f768:	jb     0x40f7d7
  40f76a:	(bad)  
  40f76b:	je     0x40f7d6
  40f76d:	outs   dx,DWORD PTR ds:[rsi]
  40f76e:	outs   dx,BYTE PTR ds:[rsi]
  40f76f:	add    BYTE PTR [rsi],dh
  40f771:	add    DWORD PTR [rdi+0x65],eax
  40f774:	je     0x40f7c2
  40f776:	outs   dx,BYTE PTR gs:[rsi]
  40f778:	addr32 je 0x40f7e3
  40f77b:	push   rbx
  40f77c:	imul   esp,DWORD PTR [rax+rax*1+0x0],0x6547015a
  40f784:	je     0x40f7da
  40f786:	outs   dx,DWORD PTR ds:[rsi]
  40f787:	imul   esp,DWORD PTR [rbp+0x6e],0x49
  40f78b:	outs   dx,BYTE PTR ds:[rsi]
  40f78c:	outs   dx,WORD PTR ds:[rsi]
  40f78e:	jb     0x40f7fd
  40f790:	(bad)  
  40f791:	je     0x40f7fc
  40f793:	outs   dx,DWORD PTR ds:[rsi]
  40f794:	outs   dx,BYTE PTR ds:[rsi]
  40f795:	add    BYTE PTR [rsi+0x1],dh
  40f798:	rex.WB outs dx,BYTE PTR ds:[rsi]
  40f79a:	imul   esi,DWORD PTR [rcx+rbp*2+0x61],0x657a696c
  40f7a2:	movsxd ebp,DWORD PTR [r8+rax*1-0x3d]
  40f7a7:	add    dl,BYTE PTR [rbx+0x65]
  40f7aa:	je     0x40f800
  40f7ac:	outs   dx,DWORD PTR ds:[rsi]
  40f7ad:	imul   esp,DWORD PTR [rbp+0x6e],0x49
  40f7b1:	outs   dx,BYTE PTR ds:[rsi]
  40f7b2:	outs   dx,WORD PTR ds:[rsi]
  40f7b4:	jb     0x40f823
  40f7b6:	(bad)  
  40f7b7:	je     0x40f822
  40f7b9:	outs   dx,DWORD PTR ds:[rsi]
  40f7ba:	outs   dx,BYTE PTR ds:[rsi]
  40f7bb:	add    BYTE PTR [rbp+0x0],dl
  40f7be:	rex.XB ins BYTE PTR es:[rdi],dx
  40f7c0:	outs   dx,DWORD PTR ds:[rsi]
  40f7c1:	jae    0x40f828
  40f7c3:	rex.W (bad) 
  40f7c5:	outs   dx,BYTE PTR ds:[rsi]
  40f7c6:	fs ins BYTE PTR es:[rdi],dx
  40f7c8:	add    BYTE PTR gs:[rax+0x65724300],al
  40f7cf:	(bad)  
  40f7d0:	je     0x40f837
  40f7d2:	imul   r14d,DWORD PTR [rdx+0x65],0x726f7463
  40f7da:	jns    0x40f81d
  40f7dc:	add    BYTE PTR [rax],al
  40f7de:	lea    eax,[rax]
  40f7e0:	rex.XB jb 0x40f848
  40f7e3:	(bad)  
  40f7e4:	je     0x40f84b
  40f7e6:	imul   r13d,DWORD PTR [rbp+r12*2+0x41],0x4300a700
  40f7ef:	jb     0x40f856
  40f7f1:	(bad)  
  40f7f2:	je     0x40f859
  40f7f4:	push   rax
  40f7f5:	imul   esi,DWORD PTR [rax+0x65],0xaa0000
  40f7fc:	rex.XB jb 0x40f864
  40f7ff:	(bad)  
  40f800:	je     0x40f867
  40f802:	push   rax
  40f803:	jb     0x40f874
  40f805:	movsxd esp,DWORD PTR [rbp+0x73]
  40f808:	jae    0x40f84b
  40f80a:	add    BYTE PTR [rax],al
  40f80c:	fadd   DWORD PTR [rax]
  40f80e:	rex.R
  40f80f:	gs ins BYTE PTR es:[rdi],dx
  40f811:	gs je  0x40f879
  40f814:	rex.XB jb 0x40f880
  40f817:	je     0x40f882
  40f819:	movsxd esp,DWORD PTR [rcx+0x6c]
  40f81c:	push   rbx
  40f81d:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
  40f822:	outs   dx,BYTE PTR ds:[rsi]
  40f823:	add    bh,ah
  40f825:	add    BYTE PTR [rbp+riz*2+0x76],al
  40f829:	imul   esp,DWORD PTR [rbx+0x65],0x6f436f49
  40f830:	outs   dx,BYTE PTR ds:[rsi]
  40f831:	je     0x40f8a5
  40f833:	outs   dx,DWORD PTR ds:[rsi]
  40f834:	ins    BYTE PTR es:[rdi],dx
  40f835:	add    dl,dh
  40f837:	add    BYTE PTR [rbp+rsi*2+0x70],al
  40f83b:	ins    BYTE PTR es:[rdi],dx
  40f83c:	imul   esp,DWORD PTR [rbx+0x61],0x61486574
  40f843:	outs   dx,BYTE PTR ds:[rsi]
  40f844:	fs ins BYTE PTR es:[rdi],dx
  40f846:	gs add al,bh
  40f849:	add    BYTE PTR [rbp+0x6e],al
  40f84c:	je     0x40f8b3
  40f84e:	jb     0x40f893
  40f850:	jb     0x40f8bb
  40f852:	je     0x40f8bd
  40f854:	movsxd esp,DWORD PTR [rcx+0x6c]
  40f857:	push   rbx
  40f858:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
  40f85d:	outs   dx,BYTE PTR ds:[rsi]
  40f85e:	add    BYTE PTR [rax],al
  40f860:	imul   eax,DWORD PTR [rcx],0x6d726f46
  40f866:	(bad)  
  40f867:	je     0x40f8b6
  40f869:	gs jae 0x40f8df
  40f86c:	(bad)  
  40f86d:	add    BYTE PTR gs:[r8d],al
  40f872:	int    0x1
  40f874:	rex.RXB
  40f875:	gs je  0x40f8bb
  40f878:	jne    0x40f8ec
  40f87a:	jb     0x40f8e1
  40f87c:	outs   dx,BYTE PTR ds:[rsi]
  40f87d:	je     0x40f8cf
  40f87f:	jb     0x40f8f0
  40f881:	movsxd esp,DWORD PTR [rbp+0x73]
  40f884:	jae    0x40f886
  40f886:	(bad)  
  40f887:	add    DWORD PTR [rdi+0x65],eax
  40f88a:	je     0x40f8cf
  40f88c:	jne    0x40f900
  40f88e:	jb     0x40f8f5
  40f890:	outs   dx,BYTE PTR ds:[rsi]
  40f891:	je     0x40f8e3
  40f893:	jb     0x40f904
  40f895:	movsxd esp,DWORD PTR [rbp+0x73]
  40f898:	jae    0x40f8e3
  40f89a:	fs add dl,dl
  40f89d:	add    DWORD PTR [rdi+0x65],eax
  40f8a0:	je     0x40f8e5
  40f8a2:	jne    0x40f916
  40f8a4:	jb     0x40f90b
  40f8a6:	outs   dx,BYTE PTR ds:[rsi]
  40f8a7:	je     0x40f8fd
  40f8a9:	push   0x64616572
  40f8ae:	rex.WB
  40f8af:	add    BYTE PTR fs:[rax],al
  40f8b2:	hlt    
  40f8b3:	add    DWORD PTR [rdi+0x65],eax
  40f8b6:	je     0x40f8fe
  40f8b8:	imul   ebp,DWORD PTR [rbp+riz*2+0x41],0x69727474
  40f8c0:	(bad)  
  40f8c1:	jne    0x40f937
  40f8c3:	gs jae 0x40f907
  40f8c6:	add    BYTE PTR [rax],al
  40f8c8:	cmc    
  40f8c9:	add    DWORD PTR [rdi+0x65],eax
  40f8cc:	je     0x40f914
  40f8ce:	imul   ebp,DWORD PTR [rbp+riz*2+0x41],0x69727474
  40f8d6:	(bad)  
  40f8d7:	jne    0x40f94d
  40f8d9:	gs jae 0x40f921
  40f8dc:	js     0x40f91f
  40f8de:	add    BYTE PTR [rax],al
  40f8e0:	adc    BYTE PTR [rdx],al
  40f8e2:	rex.RXB
  40f8e3:	gs je  0x40f932
  40f8e6:	(bad)  
  40f8e7:	jae    0x40f95d
  40f8e9:	rex.RB jb 0x40f95e
  40f8ec:	outs   dx,DWORD PTR ds:[rsi]
  40f8ed:	jb     0x40f8ef
  40f8ef:	add    BYTE PTR [rcx+0x2],dh
  40f8f2:	rex.RXB
  40f8f3:	gs je  0x40f949
  40f8f6:	push   0x5074726f
  40f8fb:	(bad)  
  40f8fc:	je     0x40f966
  40f8fe:	rex.WRX (bad) 
  40f900:	ins    DWORD PTR es:[rdi],dx
  40f901:	add    BYTE PTR gs:[r11+0x2],sil
  40f906:	rex.RXB
  40f907:	gs je  0x40f95d
  40f90a:	je     0x40f96d
  40f90c:	jb     0x40f982
  40f90e:	jne    0x40f980
  40f910:	rex.WB outs dx,BYTE PTR ds:[rsi]
  40f912:	outs   dx,WORD PTR ds:[rsi]
  40f914:	add    BYTE PTR [r10+0x74654702],cl
  40f91b:	push   rbx
  40f91c:	jns    0x40f991
  40f91e:	je     0x40f985
  40f920:	ins    DWORD PTR es:[rdi],dx
  40f921:	push   rsp
  40f922:	imul   ebp,DWORD PTR [rbp+0x65],0x69467341
  40f929:	ins    BYTE PTR es:[rdi],dx
  40f92a:	gs push rsp
  40f92c:	imul   ebp,DWORD PTR [rbp+0x65],0x4702a500
  40f933:	gs je  0x40f98a
  40f936:	imul   esp,DWORD PTR [rbx+0x6b],0x6e756f43
  40f93d:	je     0x40f93f
  40f93f:	add    cl,bh
  40f941:	add    cl,BYTE PTR [rcx+0x6e]
  40f944:	imul   esi,DWORD PTR [rcx+rbp*2+0x61],0x657a696c
  40f94c:	rex.XB jb 0x40f9b8
  40f94f:	je     0x40f9ba
  40f951:	movsxd esp,DWORD PTR [rcx+0x6c]
  40f954:	push   rbx
  40f955:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
  40f95a:	outs   dx,BYTE PTR ds:[rsi]
  40f95b:	add    BYTE PTR [rbx+0x3],cl
  40f95e:	rex.WR
  40f95f:	gs (bad) 
  40f961:	jbe    0x40f9c8
  40f963:	rex.XB jb 0x40f9cf
  40f966:	je     0x40f9d1
  40f968:	movsxd esp,DWORD PTR [rcx+0x6c]
  40f96b:	push   rbx
  40f96c:	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
  40f971:	outs   dx,BYTE PTR ds:[rsi]
  40f972:	add    BYTE PTR [rax],al
  40f974:	push   rdi
  40f975:	add    ecx,DWORD PTR [rdi+rbp*2+0x63]
  40f979:	(bad)  
  40f97a:	ins    BYTE PTR es:[rdi],dx
  40f97b:	rex.B ins BYTE PTR es:[rdi],dx
  40f97d:	ins    BYTE PTR es:[rdi],dx
  40f97e:	outs   dx,DWORD PTR ds:[rsi]
  40f97f:	movsxd eax,DWORD PTR [rax]
  40f981:	add    BYTE PTR [rbx+0x3],bl
  40f984:	rex.WR outs dx,DWORD PTR ds:[rsi]
  40f986:	movsxd esp,DWORD PTR [rcx+0x6c]
  40f989:	rex.RX jb 0x40f9f1
  40f98c:	add    BYTE PTR gs:[rdx+0x3],dh
  40f990:	rex.WRB outs dx,DWORD PTR ds:[rsi]
  40f992:	jbe    0x40f9f9
  40f994:	imul   r13d,DWORD PTR [rbp+r12*2+0x45],0x7a004178
  40f99d:	add    ecx,DWORD PTR [rbp+0x75]
  40f9a0:	ins    BYTE PTR es:[rdi],dx
  40f9a1:	je     0x40fa0c
  40f9a3:	rex.X jns 0x40fa1a
  40f9a6:	gs push rsp
  40f9a8:	outs   dx,DWORD PTR ds:[rsi]
  40f9a9:	push   rdi
  40f9aa:	imul   esp,DWORD PTR [rbp+riz*2+0x43],0x726168
  40f9b2:	mov    ebx,0x65755103
  40f9b7:	jb     0x40fa32
  40f9b9:	push   rax
  40f9ba:	gs jb  0x40fa23
  40f9bd:	outs   dx,DWORD PTR ds:[rsi]
  40f9be:	jb     0x40fa2d
  40f9c0:	(bad)  
  40f9c1:	outs   dx,BYTE PTR ds:[rsi]
  40f9c2:	movsxd esp,DWORD PTR [rbp+0x43]
  40f9c5:	outs   dx,DWORD PTR ds:[rsi]
  40f9c6:	jne    0x40fa36
  40f9c8:	je     0x40fa2f
  40f9ca:	jb     0x40f9cc
  40f9cc:	(bad)  
  40f9cd:	add    edx,DWORD PTR [rdx+0x65]
  40f9d0:	(bad)  
  40f9d1:	imul   r13d,DWORD PTR fs:[rbp+r12*2+0x0],0x5203ed00
  40f9db:	gs ins DWORD PTR es:[rdi],dx
  40f9dd:	outs   dx,DWORD PTR ds:[rsi]
  40f9de:	jbe    0x40fa45
  40f9e0:	imul   r14d,DWORD PTR [rdx+0x65],0x726f7463
  40f9e8:	jns    0x40fa2b
  40f9ea:	add    BYTE PTR [rax],al
  40f9ec:	add    DWORD PTR [rdx+rdx*2],eax
  40f9ef:	je     0x40fa5d
  40f9f1:	rex.B
  40f9f2:	fs fs rex.RX jne 0x40fa65
  40f9f7:	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
  40f9fb:	outs   dx,BYTE PTR ds:[rsi]
  40f9fc:	push   rsp
  40f9fd:	(bad)  
  40f9fe:	(bad)  
  40f9ff:	ins    BYTE PTR es:[rdi],dx
  40fa00:	add    BYTE PTR gs:[rdx],al
  40fa03:	add    al,0x52
  40fa05:	je     0x40fa73
  40fa07:	rex.XB (bad) 
  40fa09:	jo     0x40fa7f
  40fa0b:	jne    0x40fa7f
  40fa0d:	rex.XB outs dx,DWORD PTR gs:[rsi]
  40fa10:	outs   dx,BYTE PTR ds:[rsi]
  40fa11:	je     0x40fa78
  40fa13:	js     0x40fa89
  40fa15:	add    BYTE PTR [rcx],cl
  40fa17:	add    al,0x52
  40fa19:	je     0x40fa87
  40fa1b:	rex.WR outs dx,DWORD PTR ds:[rsi]
  40fa1d:	outs   dx,DWORD PTR ds:[rsi]
  40fa1e:	imul   esi,DWORD PTR [rbp+0x70],0x46
  40fa22:	jne    0x40fa92
  40fa24:	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
  40fa28:	outs   dx,BYTE PTR ds:[rsi]
  40fa29:	rex.RB outs dx,BYTE PTR ds:[rsi]
  40fa2b:	je     0x40fa9f
  40fa2d:	jns    0x40fa2f
  40fa2f:	add    BYTE PTR [rax],dl
  40fa31:	add    al,0x52
  40fa33:	je     0x40faa1
  40fa35:	push   rsi
  40fa36:	imul   esi,DWORD PTR [rdx+0x74],0x556c6175
  40fa3d:	outs   dx,BYTE PTR ds:[rsi]
  40fa3e:	ja     0x40faa9
  40fa40:	outs   dx,BYTE PTR ds:[rsi]
  40fa41:	add    BYTE PTR fs:[rax],al
  40fa44:	push   rax
  40fa45:	add    al,0x53
  40fa47:	gs je  0x40fa8f
  40fa4a:	outs   dx,BYTE PTR ds:[rsi]
  40fa4b:	jbe    0x40fab6
  40fa4d:	jb     0x40fabe
  40fa4f:	outs   dx,BYTE PTR ds:[rsi]
  40fa50:	ins    DWORD PTR es:[rdi],dx
  40fa51:	outs   dx,BYTE PTR gs:[rsi]
  40fa53:	je     0x40faab
  40fa55:	(bad)  
  40fa56:	jb     0x40fac1
  40fa58:	(bad)  
  40fa59:	(bad)  
  40fa5a:	ins    BYTE PTR es:[rdi],dx
  40fa5b:	add    BYTE PTR gs:[r15+0x74655304],bl
  40fa63:	push   rbp
  40fa64:	outs   dx,BYTE PTR ds:[rsi]
  40fa65:	push   0x6c646e61
  40fa6a:	gs fs rex.RB js 0x40fad2
  40fa6f:	gs jo  0x40fae6
  40fa72:	imul   ebp,DWORD PTR [rdi+0x6e],0x746c6946
  40fa79:	gs jb  0x40fa7c
  40fa7c:	lods   al,BYTE PTR ds:[rsi]
  40fa7d:	add    al,0x53
  40fa7f:	ins    BYTE PTR es:[rdi],dx
  40fa80:	gs gs jo 0x40fa84
  40fa84:	scas   eax,DWORD PTR es:[rdi]
  40fa85:	add    al,0x53
  40fa87:	ins    BYTE PTR es:[rdi],dx
  40fa88:	gs gs jo 0x40fad1
  40fa8c:	js     0x40fa8e
  40fa8e:	mov    edx,0x72655404
  40fa93:	ins    DWORD PTR es:[rdi],dx
  40fa94:	imul   ebp,DWORD PTR [rsi+0x61],0x72506574
  40fa9b:	outs   dx,DWORD PTR ds:[rsi]
  40fa9c:	movsxd esp,DWORD PTR [rbp+0x73]
  40fa9f:	jae    0x40faa1
  40faa1:	add    cl,al
  40faa3:	add    al,0x54
  40faa5:	ins    BYTE PTR es:[rdi],dx
  40faa6:	jae    0x40faef
  40faa8:	gs je  0x40fb01
  40faab:	(bad)  
  40faac:	ins    BYTE PTR es:[rdi],dx
  40faad:	jne    0x40fb14
  40faaf:	add    dh,cl
  40fab1:	add    al,0x55
  40fab3:	outs   dx,BYTE PTR ds:[rsi]
  40fab4:	push   0x6c646e61
  40fab9:	gs fs rex.RB js 0x40fb21
  40fabe:	gs jo  0x40fb35
  40fac1:	imul   ebp,DWORD PTR [rdi+0x6e],0x746c6946
  40fac8:	gs jb  0x40facb
  40facb:	add    ah,ch
  40facd:	add    al,0x56
  40facf:	imul   esi,DWORD PTR [rdx+0x74],0x506c6175
  40fad6:	jb     0x40fb47
  40fad8:	je     0x40fb3f
  40fada:	movsxd esi,DWORD PTR [rax+rax*1+0x0]
  40fade:	out    dx,al
  40fadf:	add    al,0x56
  40fae1:	imul   esi,DWORD PTR [rdx+0x74],0x516c6175
  40fae8:	jne    0x40fb4f
  40faea:	jb     0x40fb65
  40faec:	add    BYTE PTR [rax],al
  40faee:	test   BYTE PTR [rdi+rdx*2],0x61
  40faf2:	imul   esi,DWORD PTR [rsi+rax*2+0x6f],0x6e695372
  40fafa:	ins    BYTE PTR es:[edi],dx
  40fafc:	gs rex.WRXB (bad) 
  40faff:	push   0x65
  40fb01:	movsxd esi,DWORD PTR [rax+rax*1+0xe]
  40fb05:	add    eax,0x65646957
  40fb0a:	rex.XB push 0x6f547261
  40fb10:	rex.WRB jne 0x40fb7f
  40fb13:	je     0x40fb7e
  40fb15:	rex.X jns 0x40fb8c
  40fb18:	add    BYTE PTR gs:[rdi],dh
  40fb1b:	add    BYTE PTR [rdi+0x5f],bl
  40fb1e:	rex.XB pop r15
  40fb20:	jae    0x40fb92
  40fb22:	movsxd ebp,DWORD PTR gs:[rcx+0x66]
  40fb26:	imul   esp,DWORD PTR [rbx+0x5f],0x646e6168
  40fb2d:	ins    BYTE PTR es:[rdi],dx
  40fb2e:	gs jb  0x40fb31
  40fb31:	add    BYTE PTR [rsi+0x0],cl
  40fb34:	pop    rdi
  40fb35:	pop    rdi
  40fb36:	fs ins BYTE PTR es:[rdi],dx
  40fb38:	ins    BYTE PTR es:[rdi],dx
  40fb39:	outs   dx,DWORD PTR ds:[rsi]
  40fb3a:	outs   dx,BYTE PTR ds:[rsi]
  40fb3b:	gs js  0x40fba7
  40fb3e:	je     0x40fb40
  40fb40:	push   rcx
  40fb41:	add    BYTE PTR [rdi+0x5f],bl
  40fb44:	addr32 gs je 0x40fbb5
  40fb48:	(bad)  
  40fb49:	imul   ebp,DWORD PTR [rsi+0x61],0x736772
  40fb50:	push   rdx
  40fb51:	add    BYTE PTR [rdi+0x5f],bl
  40fb54:	imul   ebp,DWORD PTR [rsi+0x69],0x766e6574
  40fb5b:	add    BYTE PTR [rbx+0x0],dl
  40fb5e:	pop    rdi
  40fb5f:	pop    rdi
  40fb60:	imul   ebp,DWORD PTR [rdi+0x62],0x6e75665f
  40fb67:	movsxd eax,DWORD PTR [rax]
  40fb69:	add    BYTE PTR [rdx+0x0],bl
  40fb6c:	pop    rdi
  40fb6d:	pop    rdi
  40fb6e:	ins    BYTE PTR es:[rdi],dx
  40fb6f:	movsxd ebp,DWORD PTR [rdi+0x6e]
  40fb72:	jbe    0x40fbd3
  40fb74:	imul   ebp,DWORD PTR [rsi+0x69],0x60000074
  40fb7b:	add    BYTE PTR [rdi+0x5f],bl
  40fb7e:	jae    0x40fbe5
  40fb80:	je     0x40fbe1
  40fb82:	(bad)  
  40fb83:	jo     0x40fbf5
  40fb85:	pop    rdi
  40fb86:	je     0x40fc01
  40fb88:	jo     0x40fbef
  40fb8a:	add    BYTE PTR [rax],al
  40fb8c:	(bad)  
  40fb8d:	add    BYTE PTR [rdi+0x5f],bl
  40fb90:	jae    0x40fbf7
  40fb92:	je     0x40fc09
  40fb94:	jae    0x40fbfb
  40fb96:	jb     0x40fc05
  40fb98:	(bad)  
  40fb99:	je     0x40fc03
  40fb9b:	gs jb  0x40fc10
  40fb9e:	add    BYTE PTR [rax],al
  40fba0:	jno    0x40fba2
  40fba2:	pop    rdi
  40fba3:	(bad)  
  40fba4:	movsxd ebp,DWORD PTR [rbp+0x64]
  40fba7:	ins    BYTE PTR es:[rdi],dx
  40fba8:	outs   dx,BYTE PTR ds:[rsi]
  40fba9:	add    BYTE PTR [rax+0x0],bh
  40fbac:	pop    rdi
  40fbad:	(bad)  
  40fbae:	ins    DWORD PTR es:[rdi],dx
  40fbaf:	jae    0x40fc18
  40fbb1:	pop    rdi
  40fbb2:	gs js  0x40fc1e
  40fbb5:	je     0x40fbb7
  40fbb7:	add    BYTE PTR [rdx+0x65635f00],cl
  40fbbd:	js     0x40fc28
  40fbbf:	je     0x40fbc1
  40fbc1:	add    BYTE PTR [rdx+0x72655f00],bh
  40fbc7:	jb     0x40fc37
  40fbc9:	outs   dx,DWORD PTR ds:[rsi]
  40fbca:	add    BYTE PTR [rax],al
  40fbcc:	fiadd  DWORD PTR [rax]
  40fbce:	pop    rdi
  40fbcf:	ins    WORD PTR es:[rdi],dx
  40fbd1:	outs   dx,DWORD PTR ds:[rsi]
  40fbd2:	fs add BYTE PTR gs:[rax],al
  40fbd6:	sbb    al,BYTE PTR [rcx]
  40fbd8:	pop    rdi
  40fbd9:	imul   ebp,DWORD PTR [rsi+0x69],0x72657474
  40fbe0:	ins    DWORD PTR es:[rdi],dx
  40fbe1:	add    BYTE PTR [rax+0x6f6c5f01],al
  40fbe7:	movsxd ebp,DWORD PTR [rbx+0x0]
  40fbea:	and    eax,0x6e6f5f02
  40fbef:	gs js  0x40fc5b
  40fbf2:	je     0x40fbf4
  40fbf4:	sub    al,BYTE PTR [rdx]
  40fbf6:	pop    rdi
  40fbf7:	jo     0x40fc5c
  40fbf9:	ins    BYTE PTR es:[rdi],dx
  40fbfa:	outs   dx,DWORD PTR ds:[rsi]
  40fbfb:	jae    0x40fc62
  40fbfd:	add    BYTE PTR [rip+0x75705f02],dh        # 0x75b15b05
  40fc03:	je     0x40fc6a
  40fc05:	outs   dx,BYTE PTR ds:[rsi]
  40fc06:	jbe    0x40fc08
  40fc08:	(bad)
  40fc0c:	outs   dx,BYTE PTR ds:[rsi]
  40fc0d:	ins    BYTE PTR es:[rdi],dx
  40fc0e:	outs   dx,DWORD PTR ds:[rsi]
  40fc0f:	movsxd ebp,DWORD PTR [rbx+0x0]
  40fc12:	jg     0x40fc17
  40fc14:	(bad)  
  40fc15:	(bad)  
  40fc16:	outs   dx,DWORD PTR ds:[rsi]
  40fc17:	jb     0x40fc8d
  40fc19:	add    BYTE PTR [rax+0x6c616303],dl
  40fc1f:	ins    BYTE PTR es:[rdi],dx
  40fc20:	outs   dx,DWORD PTR ds:[rsi]
  40fc21:	movsxd eax,DWORD PTR [rax]
  40fc23:	add    BYTE PTR [rbp+0x69786503],bl
  40fc29:	je     0x40fc2b
  40fc2b:	add    BYTE PTR [rax+0x72706603],dh
  40fc31:	imul   ebp,DWORD PTR [rsi+0x74],0x3b20066
  40fc38:	data16 jo 0x40fcb0
  40fc3b:	je     0x40fca0
  40fc3d:	add    BYTE PTR [rdi+0x65726603],dh
  40fc43:	add    BYTE PTR gs:[rax],al
  40fc46:	ret    0x6603
  40fc49:	ja     0x40fcbd
  40fc4b:	imul   esi,DWORD PTR [rbp+riz*2+0x0],0x6703c700
  40fc53:	gs je  0x40fcbb
  40fc56:	outs   dx,BYTE PTR ds:[rsi]
  40fc57:	jbe    0x40fc59
  40fc59:	add    bh,cl
  40fc5b:	add    ebp,DWORD PTR [rcx+0x73]
  40fc5e:	(bad)  
  40fc5f:	ins    BYTE PTR es:[rdi],dx
  40fc60:	jo     0x40fcca
  40fc62:	(bad)  
  40fc63:	add    ah,dl
  40fc65:	add    ebp,DWORD PTR [rcx+0x73]
  40fc68:	ins    BYTE PTR es:[rdi],dx
  40fc69:	outs   dx,DWORD PTR ds:[rsi]
  40fc6a:	ja     0x40fcd1
  40fc6c:	jb     0x40fc6e
  40fc6e:	fadd   DWORD PTR [rbx]
  40fc70:	imul   esi,DWORD PTR [rbx+0x75],0x72657070
  40fc77:	add    al,dh
  40fc79:	add    ebp,DWORD PTR [rbp+0x61]
  40fc7c:	ins    BYTE PTR es:[rdi],dx
  40fc7d:	ins    BYTE PTR es:[rdi],dx
  40fc7e:	outs   dx,DWORD PTR ds:[rsi]
  40fc7f:	movsxd eax,DWORD PTR [rax]
  40fc81:	add    bh,dh
  40fc83:	add    ebp,DWORD PTR [rbp+0x65]
  40fc86:	ins    DWORD PTR es:[rdi],dx
  40fc87:	movsxd ebp,DWORD PTR [rbp+0x70]
  40fc8a:	add    BYTE PTR [rax],al
  40fc8c:	clc    
  40fc8d:	add    ebp,DWORD PTR [rbp+0x65]
  40fc90:	ins    DWORD PTR es:[rdi],dx
  40fc91:	movsxd esi,DWORD PTR [rax+0x79]
  40fc94:	add    BYTE PTR [rax],al
  40fc96:	stc    
  40fc97:	add    ebp,DWORD PTR [rbp+0x65]
  40fc9a:	ins    DWORD PTR es:[rdi],dx
  40fc9b:	ins    DWORD PTR es:[rdi],dx
  40fc9c:	outs   dx,DWORD PTR ds:[rsi]
  40fc9d:	jbe    0x40fd04
  40fc9f:	add    dl,bh
  40fca1:	add    ebp,DWORD PTR [rbp+0x65]
  40fca4:	ins    DWORD PTR es:[rdi],dx
  40fca5:	jae    0x40fd0c
  40fca7:	je     0x40fca9
  40fca9:	add    BYTE PTR [rsp+rax*1],cl
  40fcac:	jb     0x40fd13
  40fcae:	(bad)  
  40fcaf:	ins    BYTE PTR es:[rdi],dx
  40fcb0:	ins    BYTE PTR es:[rdi],dx
  40fcb1:	outs   dx,DWORD PTR ds:[rsi]
  40fcb2:	movsxd eax,DWORD PTR [rax]
  40fcb4:	adc    al,0x4
  40fcb6:	jae    0x40fd1d
  40fcb8:	je     0x40fd26
  40fcba:	outs   dx,DWORD PTR ds:[rsi]
  40fcbb:	movsxd esp,DWORD PTR [rcx+0x6c]
  40fcbe:	add    BYTE PTR gs:[rsi],dl
  40fcc1:	add    al,0x73
  40fcc3:	imul   esp,DWORD PTR [rdi+0x6e],0x6c61
  40fcca:	sbb    eax,DWORD PTR [rbx+rsi*2]
  40fccd:	jo     0x40fd41
  40fccf:	imul   ebp,DWORD PTR [rsi+0x74],0x4230066
  40fcd6:	jae    0x40fd4c
  40fcd8:	jb     0x40fd3d
  40fcda:	push   0x24000072
  40fcdf:	add    al,0x73
  40fce1:	je     0x40fd55
  40fce3:	movsxd ebp,DWORD PTR [rbp+0x70]
  40fce6:	add    BYTE PTR [rax],al
  40fce8:	es add al,0x73
  40fceb:	je     0x40fd5f
  40fced:	movsxd esi,DWORD PTR [rax+0x79]
  40fcf0:	add    BYTE PTR [rax],al
  40fcf2:	sub    DWORD PTR [rbx+rsi*2],eax
  40fcf5:	je     0x40fd69
  40fcf7:	gs jb  0x40fd6c
  40fcfa:	outs   dx,DWORD PTR ds:[rsi]
  40fcfb:	jb     0x40fcfd
  40fcfd:	add    BYTE PTR [rbx],ch
  40fcff:	add    al,0x73
  40fd01:	je     0x40fd75
  40fd03:	ins    BYTE PTR es:[rdi],dx
  40fd04:	outs   dx,BYTE PTR gs:[rsi]
  40fd06:	add    BYTE PTR [rax],al
  40fd08:	cs add al,0x73
  40fd0b:	je     0x40fd7f
  40fd0d:	outs   dx,BYTE PTR ds:[rsi]
  40fd0e:	movsxd ebp,DWORD PTR [rbp+0x70]
  40fd11:	add    BYTE PTR [rdi],ch
  40fd13:	add    al,0x73
  40fd15:	je     0x40fd89
  40fd17:	outs   dx,BYTE PTR ds:[rsi]
  40fd18:	movsxd esi,DWORD PTR [rax+0x79]
  40fd1b:	add    BYTE PTR [rdx],dh
  40fd1d:	add    al,0x73
  40fd1f:	je     0x40fd93
  40fd21:	jb     0x40fd86
  40fd23:	push   0x4340072
  40fd28:	jae    0x40fd9e
  40fd2a:	jb     0x40fd9f
  40fd2c:	je     0x40fda0
  40fd2e:	add    BYTE PTR [rax],al
  40fd30:	rex.W add al,0x74
  40fd33:	outs   dx,DWORD PTR ds:[rsi]
  40fd34:	ins    BYTE PTR es:[rdi],dx
  40fd35:	outs   dx,DWORD PTR ds:[rsi]
  40fd36:	ja     0x40fd9d
  40fd38:	jb     0x40fd3a
  40fd3a:	rex.WB add al,0x74
  40fd3d:	outs   dx,DWORD PTR ds:[rsi]
  40fd3e:	jne    0x40fdb0
  40fd40:	jo     0x40fda7
  40fd42:	jb     0x40fd44
  40fd44:	rex.WRX add al,0x76
  40fd47:	data16 jo 0x40fdbc
  40fd4a:	imul   ebp,DWORD PTR [rsi+0x74],0x89000066
  40fd51:	add    al,0x5f
  40fd53:	jae    0x40fdc9
  40fd55:	(bad)  
  40fd56:	je     0x40fd8e
  40fd58:	xor    al,0x0
  40fd5a:	scas   eax,DWORD PTR es:[rdi]
  40fd5b:	add    al,0x5f
  40fd5d:	jne    0x40fdcd
  40fd5f:	ins    BYTE PTR es:[rdi],dx
  40fd60:	imul   ebp,DWORD PTR [rsi+0x6b],0x5f04be00
  40fd67:	jae    0x40fddd
  40fd69:	jb     0x40fdcf
  40fd6b:	jne    0x40fddd
  40fd6d:	add    dl,ah
  40fd6f:	add    al,0x5f
  40fd71:	addr32 gs je 0x40fdd8
  40fd75:	ja     0x40fddb
  40fd77:	add    BYTE PTR [rax],al
  40fd79:	lock add BYTE PTR [rax],al
  40fd7c:	add    al,dh
  40fd7e:	add    BYTE PTR [rax],al
  40fd80:	add    al,dh
  40fd82:	add    BYTE PTR [rax],al
  40fd84:	add    al,dh
  40fd86:	add    BYTE PTR [rax],al
  40fd88:	add    al,dh
  40fd8a:	add    BYTE PTR [rax],al
  40fd8c:	add    al,dh
  40fd8e:	add    BYTE PTR [rax],al
  40fd90:	add    al,dh
  40fd92:	add    BYTE PTR [rax],al
  40fd94:	add    al,dh
  40fd96:	add    BYTE PTR [rax],al
  40fd98:	rex.B
  40fd99:	rex.R push rsi
  40fd9b:	push   r8
  40fd9d:	xor    rsi,QWORD PTR [r10]
  40fda0:	cs fs ins BYTE PTR es:[rdi],dx
  40fda3:	ins    BYTE PTR es:[rdi],dx
  40fda4:	add    BYTE PTR [rax],al
  40fda6:	add    BYTE PTR [rax],al
  40fda8:	adc    al,0xf0
  40fdaa:	add    BYTE PTR [rax],al
  40fdac:	adc    al,0xf0
  40fdae:	add    BYTE PTR [rax],al
  40fdb0:	adc    al,0xf0
  40fdb2:	add    BYTE PTR [rax],al
  40fdb4:	adc    al,0xf0
  40fdb6:	add    BYTE PTR [rax],al
  40fdb8:	adc    al,0xf0
  40fdba:	add    BYTE PTR [rax],al
  40fdbc:	adc    al,0xf0
  40fdbe:	add    BYTE PTR [rax],al
  40fdc0:	adc    al,0xf0
  40fdc2:	add    BYTE PTR [rax],al
  40fdc4:	adc    al,0xf0
  40fdc6:	add    BYTE PTR [rax],al
  40fdc8:	adc    al,0xf0
  40fdca:	add    BYTE PTR [rax],al
  40fdcc:	adc    al,0xf0
  40fdce:	add    BYTE PTR [rax],al
  40fdd0:	adc    al,0xf0
  40fdd2:	add    BYTE PTR [rax],al
  40fdd4:	adc    al,0xf0
  40fdd6:	add    BYTE PTR [rax],al
  40fdd8:	adc    al,0xf0
  40fdda:	add    BYTE PTR [rax],al
  40fddc:	adc    al,0xf0
  40fdde:	add    BYTE PTR [rax],al
  40fde0:	adc    al,0xf0
  40fde2:	add    BYTE PTR [rax],al
  40fde4:	adc    al,0xf0
  40fde6:	add    BYTE PTR [rax],al
  40fde8:	adc    al,0xf0
  40fdea:	add    BYTE PTR [rax],al
  40fdec:	adc    al,0xf0
  40fdee:	add    BYTE PTR [rax],al
  40fdf0:	adc    al,0xf0
  40fdf2:	add    BYTE PTR [rax],al
  40fdf4:	adc    al,0xf0
  40fdf6:	add    BYTE PTR [rax],al
  40fdf8:	adc    al,0xf0
  40fdfa:	add    BYTE PTR [rax],al
  40fdfc:	adc    al,0xf0
  40fdfe:	add    BYTE PTR [rax],al
  40fe00:	adc    al,0xf0
  40fe02:	add    BYTE PTR [rax],al
  40fe04:	adc    al,0xf0
  40fe06:	add    BYTE PTR [rax],al
  40fe08:	adc    al,0xf0
  40fe0a:	add    BYTE PTR [rax],al
  40fe0c:	adc    al,0xf0
  40fe0e:	add    BYTE PTR [rax],al
  40fe10:	adc    al,0xf0
  40fe12:	add    BYTE PTR [rax],al
  40fe14:	adc    al,0xf0
  40fe16:	add    BYTE PTR [rax],al
  40fe18:	adc    al,0xf0
  40fe1a:	add    BYTE PTR [rax],al
  40fe1c:	adc    al,0xf0
  40fe1e:	add    BYTE PTR [rax],al
  40fe20:	adc    al,0xf0
  40fe22:	add    BYTE PTR [rax],al
  40fe24:	adc    al,0xf0
  40fe26:	add    BYTE PTR [rax],al
  40fe28:	adc    al,0xf0
  40fe2a:	add    BYTE PTR [rax],al
  40fe2c:	adc    al,0xf0
  40fe2e:	add    BYTE PTR [rax],al
  40fe30:	adc    al,0xf0
  40fe32:	add    BYTE PTR [rax],al
  40fe34:	adc    al,0xf0
  40fe36:	add    BYTE PTR [rax],al
  40fe38:	adc    al,0xf0
  40fe3a:	add    BYTE PTR [rax],al
  40fe3c:	adc    al,0xf0
  40fe3e:	add    BYTE PTR [rax],al
  40fe40:	adc    al,0xf0
  40fe42:	add    BYTE PTR [rax],al
  40fe44:	adc    al,0xf0
  40fe46:	add    BYTE PTR [rax],al
  40fe48:	adc    al,0xf0
  40fe4a:	add    BYTE PTR [rax],al
  40fe4c:	adc    al,0xf0
  40fe4e:	add    BYTE PTR [rax],al
  40fe50:	adc    al,0xf0
  40fe52:	add    BYTE PTR [rax],al
  40fe54:	adc    al,0xf0
  40fe56:	add    BYTE PTR [rax],al
  40fe58:	rex.WXB
  40fe59:	rex.RB push r10
  40fe5b:	rex.WRX
  40fe5c:	rex.RB
  40fe5d:	xor    r14,QWORD PTR [rdx]
  40fe60:	cs fs ins BYTE PTR es:[rdi],dx
  40fe63:	ins    BYTE PTR es:[rdi],dx
  40fe64:	add    BYTE PTR [rax],al
  40fe66:	add    BYTE PTR [rax],al
  40fe68:	sub    al,dh
  40fe6a:	add    BYTE PTR [rax],al
  40fe6c:	sub    al,dh
  40fe6e:	add    BYTE PTR [rax],al
  40fe70:	sub    al,dh
  40fe72:	add    BYTE PTR [rax],al
  40fe74:	sub    al,dh
  40fe76:	add    BYTE PTR [rax],al
  40fe78:	sub    al,dh
  40fe7a:	add    BYTE PTR [rax],al
  40fe7c:	sub    al,dh
  40fe7e:	add    BYTE PTR [rax],al
  40fe80:	sub    al,dh
  40fe82:	add    BYTE PTR [rax],al
  40fe84:	sub    al,dh
  40fe86:	add    BYTE PTR [rax],al
  40fe88:	sub    al,dh
  40fe8a:	add    BYTE PTR [rax],al
  40fe8c:	sub    al,dh
  40fe8e:	add    BYTE PTR [rax],al
  40fe90:	sub    al,dh
  40fe92:	add    BYTE PTR [rax],al
  40fe94:	sub    al,dh
  40fe96:	add    BYTE PTR [rax],al
  40fe98:	sub    al,dh
  40fe9a:	add    BYTE PTR [rax],al
  40fe9c:	sub    al,dh
  40fe9e:	add    BYTE PTR [rax],al
  40fea0:	sub    al,dh
  40fea2:	add    BYTE PTR [rax],al
  40fea4:	sub    al,dh
  40fea6:	add    BYTE PTR [rax],al
  40fea8:	sub    al,dh
  40feaa:	add    BYTE PTR [rax],al
  40feac:	sub    al,dh
  40feae:	add    BYTE PTR [rax],al
  40feb0:	sub    al,dh
  40feb2:	add    BYTE PTR [rax],al
  40feb4:	sub    al,dh
  40feb6:	add    BYTE PTR [rax],al
  40feb8:	sub    al,dh
  40feba:	add    BYTE PTR [rax],al
  40febc:	sub    al,dh
  40febe:	add    BYTE PTR [rax],al
  40fec0:	sub    al,dh
  40fec2:	add    BYTE PTR [rax],al
  40fec4:	sub    al,dh
  40fec6:	add    BYTE PTR [rax],al
  40fec8:	sub    al,dh
  40feca:	add    BYTE PTR [rax],al
  40fecc:	sub    al,dh
  40fece:	add    BYTE PTR [rax],al
  40fed0:	sub    al,dh
  40fed2:	add    BYTE PTR [rax],al
  40fed4:	sub    al,dh
  40fed6:	add    BYTE PTR [rax],al
  40fed8:	sub    al,dh
  40feda:	add    BYTE PTR [rax],al
  40fedc:	sub    al,dh
  40fede:	add    BYTE PTR [rax],al
  40fee0:	sub    al,dh
  40fee2:	add    BYTE PTR [rax],al
  40fee4:	sub    al,dh
  40fee6:	add    BYTE PTR [rax],al
  40fee8:	sub    al,dh
  40feea:	add    BYTE PTR [rax],al
  40feec:	sub    al,dh
  40feee:	add    BYTE PTR [rax],al
  40fef0:	sub    al,dh
  40fef2:	add    BYTE PTR [rax],al
  40fef4:	sub    al,dh
  40fef6:	add    BYTE PTR [rax],al
  40fef8:	sub    al,dh
  40fefa:	add    BYTE PTR [rax],al
  40fefc:	sub    al,dh
  40fefe:	add    BYTE PTR [rax],al
  40ff00:	sub    al,dh
  40ff02:	add    BYTE PTR [rax],al
  40ff04:	sub    al,dh
  40ff06:	add    BYTE PTR [rax],al
  40ff08:	sub    al,dh
  40ff0a:	add    BYTE PTR [rax],al
  40ff0c:	sub    al,dh
  40ff0e:	add    BYTE PTR [rax],al
  40ff10:	sub    al,dh
  40ff12:	add    BYTE PTR [rax],al
  40ff14:	sub    al,dh
  40ff16:	add    BYTE PTR [rax],al
  40ff18:	sub    al,dh
  40ff1a:	add    BYTE PTR [rax],al
  40ff1c:	sub    al,dh
  40ff1e:	add    BYTE PTR [rax],al
  40ff20:	sub    al,dh
  40ff22:	add    BYTE PTR [rax],al
  40ff24:	sub    al,dh
  40ff26:	add    BYTE PTR [rax],al
  40ff28:	sub    al,dh
  40ff2a:	add    BYTE PTR [rax],al
  40ff2c:	sub    al,dh
  40ff2e:	add    BYTE PTR [rax],al
  40ff30:	sub    al,dh
  40ff32:	add    BYTE PTR [rax],al
  40ff34:	sub    al,dh
  40ff36:	add    BYTE PTR [rax],al
  40ff38:	sub    al,dh
  40ff3a:	add    BYTE PTR [rax],al
  40ff3c:	sub    al,dh
  40ff3e:	add    BYTE PTR [rax],al
  40ff40:	sub    al,dh
  40ff42:	add    BYTE PTR [rax],al
  40ff44:	ins    DWORD PTR es:[rdi],dx
  40ff45:	jae    0x40ffbd
  40ff47:	movsxd esi,DWORD PTR [rdx+0x74]
  40ff4a:	cs fs ins BYTE PTR es:[rdi],dx
  40ff4d:	ins    BYTE PTR es:[rdi],dx
	...

Disassembly of section .CRT:

0000000000410000 <.CRT>:
	...
  410008:	(bad)  
  410009:	adc    DWORD PTR [rax+0x0],eax
	...
  410020:	adc    BYTE PTR [rax],dl
  410022:	add    BYTE PTR [rax],al
  410025:	add    BYTE PTR [rax],al
  410027:	add    BYTE PTR [rax+0x4059],dh
	...
  41003d:	add    BYTE PTR [rax],al
  41003f:	add    al,ah
  410041:	pop    rbx
  410042:	add    BYTE PTR [rax],al
  410045:	add    BYTE PTR [rax],al
  410047:	add    BYTE PTR [rax+0x405b],dh
	...

Disassembly of section .tls:

0000000000411000 <.tls>:
	...
  411020:	add    BYTE PTR [rax],dl
  411022:	add    BYTE PTR [r8],al
  411025:	add    BYTE PTR [rax],al
  411027:	add    BYTE PTR [rax+0x10],ah
  41102a:	add    BYTE PTR [r8],al
  41102d:	add    BYTE PTR [rax],al
  41102f:	add    BYTE PTR [rbx+rbp*8],bl
  411032:	add    BYTE PTR [rax],al
  411035:	add    BYTE PTR [rax],al
  411037:	add    BYTE PTR [rax+0x0],al
  41103a:	add    BYTE PTR [r8],al
	...

Disassembly of section .rsrc:

0000000000412000 <.rsrc>:
	...
  41200c:	add    BYTE PTR [rax],al
  41200e:	add    eax,DWORD PTR [rax]
  412010:	add    eax,DWORD PTR [rax]
  412012:	add    BYTE PTR [rax],al
  412014:	sub    BYTE PTR [rax],al
  412016:	add    BYTE PTR [rax+0xe],al
  41201c:	clc    
  41201d:	add    BYTE PTR [rax],al
  41201f:	adc    BYTE PTR [rax],0x0
  412022:	add    BYTE PTR [rax],al
  412024:	sub    BYTE PTR [rcx],al
  412026:	add    BYTE PTR [rax+0x0],al
	...
  412034:	add    BYTE PTR [rax],al
  412036:	(bad)  
  412037:	add    BYTE PTR [rcx],al
  412039:	add    BYTE PTR [rax],al
  41203b:	add    BYTE PTR [rax+0x0],ch
  41203e:	add    BYTE PTR [rax+0x2],al
  412044:	add    BYTE PTR [rax],0x0
  412047:	add    BYTE PTR [rbx],0x0
  41204a:	add    BYTE PTR [rax],al
  41204c:	cwde   
  41204d:	add    BYTE PTR [rax],al
  41204f:	add    BYTE PTR [rax+rax*1],0x0
  412053:	add    BYTE PTR [rax+0x5800000],dh
  412059:	add    BYTE PTR [rax],al
  41205b:	add    al,cl
  41205d:	add    BYTE PTR [rax],al
  41205f:	add    BYTE PTR [rsi],0x0
  412062:	add    BYTE PTR [rax],al
  412064:	loopne 0x412066
  412066:	add    BYTE PTR [rax+0x0],al
	...
  412074:	add    BYTE PTR [rax],al
  412076:	add    DWORD PTR [rax],eax
  412078:	or     DWORD PTR [rax+rax*1],eax
  41207b:	add    BYTE PTR [rax+0x1],dh
	...
  41208e:	add    DWORD PTR [rax],eax
  412090:	or     DWORD PTR [rax+rax*1],eax
  412093:	add    BYTE PTR [rax+0x1],al
	...
  4120a5:	add    BYTE PTR [rcx],al
  4120a7:	add    BYTE PTR [rcx],cl
  4120a9:	add    al,0x0
  4120ab:	add    BYTE PTR [rax+0x1],dl
	...
  4120bd:	add    BYTE PTR [rcx],al
  4120bf:	add    BYTE PTR [rcx],cl
  4120c1:	add    al,0x0
  4120c3:	add    BYTE PTR [rax+0x1],ah
	...
  4120d5:	add    BYTE PTR [rcx],al
  4120d7:	add    BYTE PTR [rcx],cl
  4120d9:	add    al,0x0
  4120db:	add    BYTE PTR [rax+0x1],dh
	...
  4120ed:	add    BYTE PTR [rcx],al
  4120ef:	add    BYTE PTR [rcx],cl
  4120f1:	add    al,0x0
  4120f3:	add    al,al
  4120f5:	add    DWORD PTR [rax],eax
	...
  412103:	add    BYTE PTR [rcx],al
  412105:	add    BYTE PTR [rax],al
  412107:	add    BYTE PTR [rax+0x1],bl
  41210a:	add    BYTE PTR [rax-0x7ffffef0],al
	...
  41211c:	add    BYTE PTR [rax],al
  41211e:	add    DWORD PTR [rax],eax
  412120:	or     DWORD PTR [rax+rax*1],eax
  412123:	add    al,dl
  412125:	add    DWORD PTR [rax],eax
	...
  412133:	add    BYTE PTR [rax],al
  412135:	add    BYTE PTR [rcx],al
  412137:	add    BYTE PTR [rcx],al
  412139:	add    BYTE PTR [rax],al
  41213b:	add    BYTE PTR [rax+0x1],al
  41213e:	add    BYTE PTR [rax+0x0],al
	...
  41214c:	add    BYTE PTR [rax],al
  41214e:	add    DWORD PTR [rax],eax
  412150:	or     DWORD PTR [rax+rax*1],eax
  412153:	add    al,ah
  412155:	add    DWORD PTR [rax],eax
  412157:	add    BYTE PTR [rax],cl
  412159:	add    BYTE PTR [rcx+0x0],cl
  41215c:	add    BYTE PTR [rcx+0x0],r9b
  412160:	pop    rdi
  412161:	add    BYTE PTR [rcx+0x0],cl
  412164:	rex.XB add BYTE PTR [r15+0x0],cl
  412168:	rex.WRX add BYTE PTR [rax],r8b
  41216b:	add    BYTE PTR [rax],al
  41216d:	add    BYTE PTR [rax],al
  41216f:	add    al,dh
  412171:	and    DWORD PTR [rcx],eax
  412173:	add    BYTE PTR [rax+0x5],ch
	...
  41217e:	add    BYTE PTR [rax],al
  412180:	pop    rax
  412181:	(bad)  
  412182:	add    DWORD PTR [rax],eax
  412184:	test   al,0x8
	...
  41218e:	add    BYTE PTR [rax],al
  412190:	add    BYTE PTR [rax],dh
  412192:	add    DWORD PTR [rax],eax
  412194:	test   al,0xe
	...
  41219e:	add    BYTE PTR [rax],al
  4121a0:	test   al,0x3e
  4121a2:	add    DWORD PTR [rax],eax
  4121a4:	push   0x4
  4121a9:	add    BYTE PTR [rax],al
  4121ab:	add    BYTE PTR [rax],al
  4121ad:	add    BYTE PTR [rax],al
  4121af:	add    BYTE PTR [rax],dl
  4121b1:	rex.XB add DWORD PTR [r8],eax
  4121b4:	test   al,0x10
	...
  4121be:	add    BYTE PTR [rax],al
  4121c0:	mov    eax,0xa8000153
  4121c5:	and    eax,0x0
  4121ca:	add    BYTE PTR [rax],al
  4121cc:	add    BYTE PTR [rax],al
  4121ce:	add    BYTE PTR [rax],al
  4121d0:	(bad)  
  4121d1:	jns    0x4121d4
  4121d3:	add    BYTE PTR [rdx+0x0],bl
	...
  4121de:	add    BYTE PTR [rax],al
  4121e0:	sar    BYTE PTR [rcx+0x1],0x0
  4121e4:	pushf  
  4121e5:	add    eax,DWORD PTR [rax]
	...
  4121ef:	add    BYTE PTR [rax],ch
  4121f1:	add    BYTE PTR [rax],al
  4121f3:	add    BYTE PTR [rax],dl
  4121f5:	add    BYTE PTR [rax],al
  4121f7:	add    BYTE PTR [rax],ah
  4121f9:	add    BYTE PTR [rax],al
  4121fb:	add    BYTE PTR [rcx],al
  4121fd:	add    BYTE PTR [rax],cl
  4121ff:	add    BYTE PTR [rax],al
  412201:	add    BYTE PTR [rax],al
  412203:	add    BYTE PTR [rax],al
  412205:	add    DWORD PTR [rax],eax
	...
  41220f:	add    BYTE PTR [rax],al
  412211:	add    DWORD PTR [rax],eax
  412213:	add    BYTE PTR [rax],al
  412215:	add    DWORD PTR [rax],eax
  412217:	add    BYTE PTR [rax],al
  412219:	add    BYTE PTR [rax],al
  41221b:	add    BYTE PTR [rdi+0x69],bh
  41221e:	add    BYTE PTR [r8-0x71ffd19f],r9b
  412225:	(bad)  
  412226:	(bad)  
  412227:	add    BYTE PTR [rbx-0x71ffd099],cl
  41222d:	data16 (bad) 
  41222f:	add    BYTE PTR [rbx-0x6effd198],cl
  412235:	gs (bad) 
  412237:	add    BYTE PTR [rbx-0x7affcd9f],al
  41223d:	(bad)  
  41223e:	xor    eax,0x34648300
  412243:	add    BYTE PTR [rsi-0x77ffc999],al
  412249:	(bad)  
  41224b:	add    BYTE PTR [rbp-0x75ffcd9e],cl
  412251:	xor    al,BYTE PTR fs:[rax]
  412254:	mov    fs,WORD PTR [rcx+rsi*1+0x0]
  412258:	mov    DWORD PTR [rdx+0x35],esp
  41225b:	add    BYTE PTR [rbx+riz*2+0x648e0035],cl
  412262:	add    BYTE PTR ss:[rcx-0x7bffc79f],al
  412269:	(bad)  
  41226a:	cmp    DWORD PTR [rax],eax
  41226c:	test   DWORD PTR [rcx+rdi*1+0x0],esp
  412270:	mov    ah,BYTE PTR [rbx+0x39]
  412273:	add    BYTE PTR [rdx-0x78ffc69b],cl
  412279:	imul   edi,DWORD PTR [rdi],0x38688900
  41227f:	add    BYTE PTR [rdi-0x76ffc598],cl
  412285:	push   0x6290003d
  41228a:	xor    al,BYTE PTR [rax]
  41228c:	xchg   ecx,eax
  41228d:	xor    DWORD PTR gs:[rax],eax
  412290:	xchg   esp,eax
  412291:	xor    BYTE PTR gs:[rax],al
  412294:	xchg   ecx,eax
  412295:	movsxd esi,DWORD PTR [rax+rax*1]
  412298:	nop
  412299:	push   0x6589003f
  41229e:	add    BYTE PTR [r9-0x75ffb993],cl
  4122a5:	imul   ecx,DWORD PTR [rax+0x0],0xffffff8a
  4122a9:	jo     0x4122f6
  4122ab:	add    BYTE PTR [rbp-0x66ffb78f],cl
  4122b1:	jb     0x4122fd
  4122b3:	add    BYTE PTR [rax-0x67ffa88a],cl
  4122b9:	jbe    0x412311
  4122bb:	add    BYTE PTR [rsi-0x67ffa684],dl
  4122c1:	jge    0x41231b
  4122c3:	add    BYTE PTR [rsi-0x63ffa283],bl
  4122c9:	sbb    BYTE PTR [rbp+0x0],0xa3
  4122cd:	sbb    DWORD PTR [rsi+0x0],0x608592
  4122d4:	pushf  
  4122d5:	and    DWORD PTR [rcx+0x0],0xffffffa2
  4122d9:	test   BYTE PTR [rcx+0x0],ah
  4122dc:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
  4122dd:	mov    BYTE PTR [rcx+0x0],ah
  4122e0:	movabs eax,ds:0xaa006e8ea0006b8e
  4122e9:	xchg   esi,eax
  4122ea:	outs   dx,BYTE PTR ds:[rsi]
  4122eb:	add    BYTE PTR [rcx-0x5aff8a70],ah
  4122f1:	xchg   esp,eax
  4122f2:	ja     0x4122f4
  4122f4:	stos   DWORD PTR es:[rdi],eax
  4122f5:	xchg   edi,eax
  4122f6:	jne    0x4122f8
  4122f8:	lods   eax,DWORD PTR ds:[rsi]
  4122f9:	xchg   esi,eax
  4122fa:	jne    0x4122fc
  4122fc:	mov    dl,0x9d
  4122fe:	jge    0x412300
  412300:	mov    ah,0xa1
  412302:	jl     0x412304
  412304:	movabs ds:0xad008aa1ae008495,eax
  41230d:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
  41230e:	mov    eax,DWORD PTR [rax]
  412310:	lods   al,BYTE PTR ds:[rsi]
  412311:	movabs ds:0xa9bd0086a9ba008f,eax
  41231a:	test   DWORD PTR [rax],eax
  41231c:	mov    dh,0xa4
  41231e:	mov    eax,DWORD PTR [rax]
  412320:	mov    eax,0xb4008da6
  412325:	stos   BYTE PTR es:[rdi],al
  412326:	pop    QWORD PTR [rax]
  412328:	mov    ebp,0xb4008ca9
  41232d:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
  41232e:	xchg   ebx,eax
  41232f:	add    BYTE PTR [rdi-0x47ff6e55],dh
  412335:	stos   BYTE PTR es:[rdi],al
  412336:	xchg   ecx,eax
  412337:	add    BYTE PTR [rbx-0x41ff6e54],bh
  41233d:	scas   eax,DWORD PTR es:[rdi]
  41233e:	xchg   ebp,eax
  41233f:	add    BYTE PTR [rbp-0x40ff6553],bh
  412345:	mov    al,0x92
  412347:	add    BYTE PTR [rax-0x43ff6a50],bh
  41234d:	mov    dl,0x95
  41234f:	add    al,al
  412351:	lods   al,BYTE PTR ds:[rsi]
  412352:	mov    WORD PTR [rax],es
  412354:	shr    DWORD PTR [rdi-0x4e3bff70],0x91
  41235b:	add    ah,al
  41235d:	mov    ch,0x93
  41235f:	add    al,al
  412361:	mov    ah,0x95
  412363:	add    ch,al
  412365:	mov    bh,0x94
  412367:	add    al,cl
  412369:	mov    ah,0x97
  41236b:	add    dl,al
  41236d:	mov    ch,0x98
  41236f:	add    ah,al
  412371:	mov    eax,0xb7c5009b
  412376:	movabs al,ds:0xa8bac700a7bfc700
  41237f:	add    bh,al
  412381:	mov    esi,0xbfc800a9
  412386:	scas   eax,DWORD PTR es:[rdi]
  412387:	add    cl,cl
  412389:	shl    BYTE PTR [rax+rax*1+0xb6c5c9],0xcb
  412391:	(bad)
  412394:	iret   
  412395:	leave  
  412396:	mov    esp,0xbbc9d300
  41239b:	add    ah,dl
  41239d:	int3   
  41239e:	mov    ebx,0xc1c6ca00
  4123a3:	add    bl,dl
  4123a5:	iret   
  4123a6:	ret    0xd500
  4123a9:	iret   
  4123aa:	rol    BYTE PTR [rax],0xdc
  4123ad:	(bad)  
  4123ae:	ret    
  4123af:	add    cl,bl
  4123b1:	rol    edi,1
  4123b3:	add    bh,bl
  4123b5:	(bad)  
  4123b7:	add    cl,ah
  4123b9:	fxch   st(6)
  4123bb:	add    cl,ah
  4123bd:	(bad)  
  4123bf:	add    ch,ah
  4123c1:	(bad)  
  4123c3:	add    dh,ah
  4123c5:	loope  0x41239e
  4123c7:	add    bl,ah
  4123c9:	loope  0x4123a4
  4123cb:	add    dh,ch
  4123cd:	jmp    0x4123b5
  4123cf:	add    dh,ch
  4123d1:	out    dx,al
  4123d2:	in     al,dx
  4123d3:	add    cl,dh
  4123d5:	in     eax,dx
  4123d6:	out    0x0,eax
  4123d8:	icebp  
  4123d9:	out    dx,al
  4123da:	jmp    0xffffffffeb3216df
  4123df:	add    ah,dh
  4123e1:	repnz out dx,al
	...
  41261f:	add    BYTE PTR [rbx+riz*1+0x29],ah
  412623:	imul   eax,DWORD PTR [rax],0x0
	...
  41262e:	add    BYTE PTR [rax],al
  412630:	nop    DWORD PTR ss:[rdi]
	...
  412640:	xor    BYTE PTR [rdi],cl
  412642:	add    al,0x26
	...
  412650:	sub    eax,0x20041e
  412655:	add    BYTE PTR [rax],al
  412657:	add    BYTE PTR [rax],al
  412659:	add    BYTE PTR [rax],al
  41265b:	data16 add BYTE PTR [rcx+0x3e],ch
  41265f:	pop    rbp
  412660:	sub    ebx,DWORD PTR [rip+0x6f1606]        # 0xb03c6c
  412666:	add    BYTE PTR [rax],al
  412668:	add    BYTE PTR [rax],al
  41266a:	maxps  xmm0,XMMWORD PTR [r8]
  41266e:	ins    BYTE PTR es:[rdi],dx
  41266f:	sub    BYTE PTR ds:[rip+0x3b590f04],bl        # 0x3b9a357a
  412676:	(bad)  
  412677:	add    BYTE PTR [rax],al
  412679:	addr32 adc eax,0x415f220f
  41267f:	rex.WR (bad)         # 0xaf6990
  412681:	nop    DWORD PTR [rdi]
  412684:	rex.XB outs dx,BYTE PTR ds:[rsi]
  412686:	add    BYTE PTR [rax],al
  412688:	add    BYTE PTR [rdx+0x1d],al
  41268b:	cmove  esp,DWORD PTR [rdx]
  41268e:	or     DWORD PTR [rdx+0xf],edx
  412691:	nop    DWORD PTR [rax]
  412694:	pop    rcx
  412695:	pop    rsi
  412696:	add    BYTE PTR [rax],al
  412698:	add    BYTE PTR [rsi+rbx*1],ch
  41269b:	rsqrtps xmm1,XMMWORD PTR [rcx]
  41269e:	(bad)  
  4126a0:	(bad)  
  4126a1:	sbb    eax,0x4627341d
  4126a6:	imul   eax,DWORD PTR [rax],0x1d0f0f71
  4126ac:	rex.WRX (bad) 
  4126ae:	getsec 
  4126b0:	and    DWORD PTR [rip+0x3a255215],ebx        # 0x3a6678cb
  4126b6:	xor    eax,DWORD PTR [rax]
  4126b8:	nop    DWORD PTR fs:[rdi]
  4126bc:	push   rdx
  4126bd:	add    DWORD PTR [rdi],esi
  4126bf:	rex.WRB movlps xmm10,QWORD PTR [r14]
  4126c3:	rex.WRB
  4126c4:	rex str WORD PTR cs:[rdx+0xf]
  4126ca:	sbb    eax,0x56524e1d
  4126cf:	cmp    DWORD PTR [rdi],ecx
  4126d1:	sbb    eax,0x5659440f
  4126d6:	pcmpgtd mm0,QWORD PTR [rsi+0x1d]
  4126da:	(bad)  
  4126db:	(bad)  
  4126de:	add    cl,BYTE PTR [rdi]
  4126e0:	(bad)  
  4126e1:	nop    DWORD PTR [rdi]
  4126e4:	xor    eax,0x69561d30
  4126e9:	adc    ebx,DWORD PTR [rip+0x952010f]        # 0x99327fe
  4126ef:	(bad)  
  4126f0:	(bad)  
  4126f1:	(bad)          # 0x5f563638
  4126f2:	(bad)  
  4126f4:	rex.RX unpckhps xmm11,XMMWORD PTR [rdi+0x0]
  4126f9:	rex.RX (bad) 
  4126fb:	or     DWORD PTR [rcx],ecx
  4126fd:	rex.RB
  4126fe:	rex.XB adc eax,0x53331509
  412704:	or     DWORD PTR [rip+0x4a],edx        # 0x412754
  41270a:	jb     0x41277e
  41270c:	add    BYTE PTR [rax],al
  41270e:	add    BYTE PTR [rdx+0x6d],dh
  412711:	add    BYTE PTR [rax],al
  412713:	pop    rbp
  412714:	pop    rbx
  412715:	jb     0x412717
  412717:	add    bh,bh
  412719:	sldt   WORD PTR [rax]
  41271c:	dec    DWORD PTR [rdi]
  41271e:	add    BYTE PTR [rax],al
  412720:	dec    DWORD PTR [rdi]
  412722:	add    BYTE PTR [rax],al
  412724:	dec    DWORD PTR [rdi]
  412726:	add    BYTE PTR [rax],al
  412728:	call   0xffffffffc4412734
  41272d:	add    DWORD PTR [rax],eax
  41272f:	add    BYTE PTR [rax-0x7ffffffd],al
  412735:	add    eax,DWORD PTR [rax]
  412737:	add    BYTE PTR [rax+0x1],al
  41273d:	add    DWORD PTR [rax],eax
  41273f:	add    BYTE PTR [rax],al
  412741:	add    DWORD PTR [rax],eax
	...
  41274f:	add    BYTE PTR [rax-0x31ffffff],al
  412755:	movsxd eax,DWORD PTR [rax]
  412757:	add    BYTE PTR [rax],ch
  412759:	add    BYTE PTR [rax],al
  41275b:	add    BYTE PTR [rax],ah
  41275d:	add    BYTE PTR [rax],al
  41275f:	add    BYTE PTR [rax+0x0],al
  412762:	add    BYTE PTR [rax],al
  412764:	add    DWORD PTR [rax],eax
  412766:	or     BYTE PTR [rax],al
  412768:	add    BYTE PTR [rax],al
  41276a:	add    BYTE PTR [rax],al
  41276c:	add    BYTE PTR [rax+rax*1],al
	...
  412777:	add    BYTE PTR [rax],al
  412779:	add    DWORD PTR [rax],eax
  41277b:	add    BYTE PTR [rax],al
  41277d:	add    DWORD PTR [rax],eax
  41277f:	add    BYTE PTR [rax],al
  412781:	add    BYTE PTR [rax],al
  412783:	add    BYTE PTR [rcx+rbx*2+0x37],dh
  412787:	add    BYTE PTR [rsi+0x5a],bh
  41278a:	xor    al,BYTE PTR [rax]
  41278c:	jp     0x4127ed
  41278e:	xor    al,BYTE PTR [rax]
  412790:	jle    0x4127f1
  412792:	xor    BYTE PTR [rax],al
  412794:	jge    0x4127f1
  412796:	xor    al,0x0
  412798:	jge    0x4127f7
  41279a:	xor    eax,0x3a5d7400
  41279f:	add    BYTE PTR [rdx+0x5f],bh
  4127a2:	cmp    al,BYTE PTR [rax]
  4127a4:	jge    0x412807
  4127a6:	xor    eax,DWORD PTR [rax]
  4127a8:	ja     0x41280c
  4127aa:	cmp    al,0x0
  4127ac:	jl     0x412811
  4127ae:	cmp    eax,DWORD PTR [rax]
  4127b0:	ja     0x412811
  4127b2:	add    BYTE PTR [rbx+0x63],bpl
  4127b6:	add    BYTE PTR [r10+r12*2+0x46],r14b
  4127bb:	add    BYTE PTR [rbp+0x65],bh
  4127be:	add    BYTE PTR [r10+0x66],sil
  4127c2:	rex.WR add BYTE PTR [rax+0x64],r15b
  4127c6:	rex.WRX add BYTE PTR [rbp+0x6b],r15b
  4127ca:	rex.WXB add BYTE PTR [r13+r13*2+0x52],dil
  4127cf:	add    BYTE PTR [rsi+0x70],bh
  4127d2:	push   rdx
  4127d3:	add    BYTE PTR [rbx-0x7cffd0a2],al
  4127d9:	pop    rdi
  4127da:	xor    DWORD PTR [rax],eax
  4127dc:	xchg   BYTE PTR [rdi+0x31],bl
  4127df:	add    BYTE PTR [rcx-0x7effcaa5],al
  4127e5:	pop    rbp
  4127e6:	add    BYTE PTR ss:[rsi-0x73ffcaa4],al
  4127ed:	pop    rsi
  4127ee:	xor    eax,DWORD PTR [rax]
  4127f0:	mov    ebx,DWORD PTR [rdi+0x36]
  4127f3:	add    BYTE PTR [rdi-0x7affc8a1],cl
  4127f9:	pop    rsi
  4127fa:	cmp    al,BYTE PTR [rax]
  4127fc:	(bad)  
  4127fd:	pop    rsi
  4127fe:	cmp    eax,DWORD PTR [rax]
  412800:	nop
  412801:	pop    rsi
  412802:	xor    al,0x0
  412804:	and    DWORD PTR [rcx+0x2d],0x0
  412808:	(bad)  
  412809:	sub    eax,DWORD PTR fs:[rax]
  41280c:	mov    BYTE PTR [rax+0x2f],ah
  41280f:	add    BYTE PTR [rbp-0x76ffd39d],cl
  412815:	gs add BYTE PTR cs:[rbp-0x76ffd19a],cl
  41281d:	push   0x688c002e
  412822:	sub    eax,0x2e639100
  412827:	add    BYTE PTR [rbp-0x6effd09d],dl
  41282d:	gs add BYTE PTR cs:[rsi-0x66ffd19a],dl
  412835:	fs (bad) 
  412837:	add    BYTE PTR [rax-0x6bffd198],dl
  41283d:	push   0x6181002f
  412842:	xor    al,BYTE PTR [rax]
  412844:	test   DWORD PTR [rcx+0x31],esp
  412847:	add    BYTE PTR [rsp+riz*2+0x61820032],al
  41284e:	add    BYTE PTR ss:[rbp-0x79ffca9f],al
  412855:	gs (bad) 
  412857:	add    BYTE PTR [rcx-0x72ffce9e],cl
  41285d:	(bad)  
  41285f:	add    BYTE PTR [rdx-0x72ffcd9c],cl
  412865:	xor    DWORD PTR gs:[rax],eax
  412868:	mov    DWORD PTR [rcx+0x35],esp
  41286b:	add    BYTE PTR [rbp-0x76ffca9f],cl
  412871:	fs xor al,0x0
  412874:	lea    esp,[rsp+rsi*1+0x0]
  412878:	(bad)  
  412879:	movsxd edi,DWORD PTR [rcx]
  41287b:	add    BYTE PTR [rdx+riz*2+0x65830039],al
  412882:	cmp    DWORD PTR [rax],eax
  412884:	test   BYTE PTR [rbx+rdi*1+0x0],ah
  412888:	test   BYTE PTR [rbp+0x3e],ah
  41288b:	add    BYTE PTR [rdx-0x79ffc79e],cl
  412891:	push   0x688b003f
  412896:	cmp    eax,DWORD PTR [rax]
  412898:	xchg   ecx,eax
  412899:	(bad)  
  41289b:	add    BYTE PTR [rbx+riz*2+0x65910032],dl
  4128a2:	xor    DWORD PTR [rax],eax
  4128a4:	xchg   esp,eax
  4128a5:	xor    BYTE PTR gs:[rax],al
  4128a8:	xchg   edx,eax
  4128a9:	(bad)  
  4128aa:	xor    eax,0x35629500
  4128af:	add    BYTE PTR [rax-0x6affcb9c],dl
  4128b5:	gs add BYTE PTR ss:[rax-0x69ffce9d],bl
  4128bd:	push   0x62900032
  4128c2:	cmp    BYTE PTR [rax],al
  4128c4:	and    DWORD PTR [rbx+rax*2+0x0],0xffffff84
  4128c9:	imul   eax,DWORD PTR [rsi+0x0],0xffffff88
  4128cd:	imul   eax,DWORD PTR [rbx+0x0],0xffffff84
  4128d1:	imul   ecx,DWORD PTR [rax+rax*1-0x77],0x6c
  4128d6:	rex.WB add BYTE PTR [r14-0x72ffbe8f],cl
  4128dd:	jae    0x41292b
  4128df:	add    BYTE PTR [rax-0x6cffb68a],dl
  4128e5:	jae    0x412936
  4128e7:	add    BYTE PTR [rbx-0x63ffb18c],dl
  4128ed:	jp     0x41293e
  4128ef:	add    BYTE PTR [rcx-0x74ffaf91],al
  4128f5:	jbe    0x41294a
  4128f7:	add    BYTE PTR [rcx-0x73ffab8f],cl
  4128fd:	jno    0x412956
  4128ff:	add    BYTE PTR [rdi-0x7cffa78c],cl
  412905:	jge    0x412965
  412907:	add    BYTE PTR [rdx-0x6bffa485],cl
  41290d:	jnp    0x412964
  41290f:	add    BYTE PTR [rdx-0x6bffaa82],bl
  412915:	jbe    0x412970
  412917:	add    BYTE PTR [rcx-0x5effa482],bl
  41291d:	jg     0x41297b
  41291f:	add    BYTE PTR [rsi-0x75ff9f8b],al
  412925:	jne    0x412989
  412927:	add    BYTE PTR [rsi-0x70ff9f85],cl
  41292d:	jnp    0x412998
  41292f:	add    BYTE PTR [rsi-0x69ff9f81],bl
  412935:	sbb    DWORD PTR [rdx+0x0],0x5b829c
  41293c:	movabs eax,ds:0x93005984a5005680
  412945:	(bad)  
  412946:	add    BYTE PTR fs:[rcx-0x68ff9c7b],bl
  41294d:	xchg   BYTE PTR [rax+rax*1-0x67],ch
  412951:	(bad)  
  412952:	push   0x0
  412954:	pushf  
  412955:	sub    DWORD PTR [rcx+0x0],0x6a859a
  41295c:	popf   
  41295d:	test   DWORD PTR [rcx+0x0],ebp
  412960:	mov    al,BYTE PTR [rsi-0x766dff8d]
  412966:	jo     0x412968
  412968:	pushf  
  412969:	mov    esi,DWORD PTR [rax+0x0]
  41296c:	cwde   
  41296d:	mov    dh,BYTE PTR [rbp+0x0]
  412970:	cdq    
  412971:	mov    edi,DWORD PTR [rcx+0x0]
  412974:	sahf   
  412975:	xchg   ebx,eax
  412976:	ja     0x412978
  412978:	cwde   
  412979:	nop
  41297a:	jge    0x41297c
  41297c:	movabs eax,ds:0xa8006789a5006587
  412985:	mov    WORD PTR [rbx+0x0],fs
  412988:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
  412989:	mov    WORD PTR [rbx+0x0],gs
  41298c:	stos   DWORD PTR es:[rdi],eax
  41298d:	xchg   ecx,eax
  41298e:	outs   dx,BYTE PTR ds:[rsi]
  41298f:	add    BYTE PTR [rdx-0x5aff8c72],ah
  412995:	mov    ?,WORD PTR [rax+0x0]
  412998:	movabs al,ds:0xab007494aa007392
  4129a1:	cwde   
  4129a2:	jno    0x4129a4
  4129a4:	movabs ds:0xac007d97aa007c92,eax
  4129ad:	cdq    
  4129ae:	jl     0x4129b0
  4129b0:	mov    dh,0xa4
  4129b2:	jle    0x4129b4
  4129b4:	cdq    
  4129b5:	xchg   edx,eax
  4129b6:	xchg   BYTE PTR [rax],al
  4129b8:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
  4129b9:	xchg   esi,eax
  4129ba:	add    DWORD PTR [rax],0xffffffa2
  4129bd:	sahf   
  4129be:	xchg   DWORD PTR [rax],eax
  4129c0:	stos   BYTE PTR es:[rdi],al
  4129c1:	fwait
  4129c2:	add    DWORD PTR [rax],0xffffffa5
  4129c5:	cdq    
  4129c6:	mov    al,BYTE PTR [rax]
  4129c8:	mov    dl,0x9c
  4129ca:	(bad)  
  4129cb:	add    BYTE PTR [rsi-0x53ff7c5c],ch
  4129d1:	movabs al,ds:0xa3b80086a5b6008e
  4129da:	xchg   BYTE PTR [rax],al
  4129dc:	mov    eax,0xb30085a8
  4129e1:	movabs ds:0xa8b40088a6bb008c,eax
  4129ea:	pop    QWORD PTR [rax]
  4129ec:	mov    eax,0xbf008ba8
  4129f1:	scas   al,BYTE PTR es:[rdi]
  4129f2:	mov    BYTE PTR [rax],al
  4129f4:	mov    esp,0xbe008daa
  4129f9:	mov    bl,0x8f
  4129fb:	add    BYTE PTR [rdi-0x4fff6e5f],ch
  412a01:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
  412a02:	xchg   ebx,eax
  412a03:	add    BYTE PTR [rbp-0x44ff6c54],dh
  412a09:	lods   al,BYTE PTR ds:[rsi]
  412a0a:	xchg   edx,eax
  412a0b:	add    BYTE PTR [rbx-0x43ff6b56],bh
  412a11:	scas   eax,DWORD PTR es:[rdi]
  412a12:	xchg   esp,eax
  412a13:	add    BYTE PTR [rsi-0x45ff6351],bh
  412a19:	mov    bl,0x96
  412a1b:	add    BYTE PTR [rax-0x4cff674d],bh
  412a21:	scas   eax,DWORD PTR es:[rdi]
  412a22:	stos   DWORD PTR es:[rdi],eax
  412a23:	add    BYTE PTR [rbx-0x3cff5d4c],bh
  412a29:	scas   eax,DWORD PTR es:[rdi]
  412a2a:	mov    eax,DWORD PTR [rax]
  412a2c:	(bad)  
  412a2d:	mov    ah,0x95
  412a2f:	add    bh,al
  412a31:	mov    edx,0xb7c10095
  412a36:	pushf  
  412a37:	add    dh,cl
  412a39:	mov    ebx,0xb6c5009b
  412a3e:	movabs eax,ds:0xa0bdc500a1b7c800
  412a47:	add    bh,al
  412a49:	ret    
  412a4a:	lods   al,BYTE PTR ds:[rsi]
  412a4b:	add    dl,cl
  412a4d:	shr    BYTE PTR [rsi-0x5b3c2f00],0x0
  412a54:	(bad)  
  412a55:	(bad)  
  412a56:	stos   DWORD PTR es:[rdi],eax
  412a57:	add    bl,dl
  412a59:	leave  
  412a5a:	stos   DWORD PTR es:[rdi],eax
  412a5b:	add    cl,bl
  412a5d:	(bad)  
  412a5e:	lods   eax,DWORD PTR ds:[rsi]
  412a5f:	add    bh,dl
  412a61:	shr    BYTE PTR [rax+rax*1+0xadd2db],1
  412a68:	int3   
  412a69:	ret    0xb1
  412a6c:	retf   
  412a6d:	(bad)
  412a70:	ror    cl,1
  412a72:	mov    ch,0x0
  412a74:	fcmove st,st(3)
  412a76:	mov    dl,0x0
  412a78:	ror    ecx,1
  412a7a:	mov    ecx,0xb9cdd400
  412a7f:	add    cl,dl
  412a81:	enter  0xbc,0xd5
  412a85:	retf   0xbc
  412a88:	(bad)  
  412a89:	(bad)  
  412a8a:	mov    edi,0xbbccd800
  412a8f:	add    dl,bl
  412a91:	shl    DWORD PTR [rdx-0x432c2400],1
  412a97:	add    bh,bl
  412a99:	fdivr  QWORD PTR [rdi-0x4b2a1e00]
  412a9f:	add    cl,ah
  412aa1:	fdiv   DWORD PTR [rdx-0x432a1f00]
  412aa7:	add    ch,ah
  412aa9:	fdivr  QWORD PTR [rdi-0x401f1a00]
  412aaf:	add    ch,cl
  412ab1:	(bad)  
  412ab2:	(bad)
  412ab5:	rol    edx,1
  412ab7:	add    bl,bl
  412ab9:	(bad)  
  412aba:	ret    
  412abb:	add    cl,bl
  412abd:	rol    edi,cl
  412abf:	add    bh,bl
  412ac1:	rol    ebp,cl
  412ac3:	add    ch,bl
  412ac5:	xlat   BYTE PTR ds:[rbx]
  412ac6:	mov    DWORD PTR [rax],0xcbd2d4
  412acc:	fcmovbe st,st(3)
  412ace:	retf   
  412acf:	add    ah,bl
  412ad1:	fcmove st,st(1)
  412ad3:	add    bh,bl
  412ad5:	fcmovbe st,st(1)
  412ad7:	add    bh,bl
  412ad9:	fstp   st(1)
  412adb:	add    dl,ah
  412add:	xlat   BYTE PTR ds:[rbx]
  412ade:	ret    
  412adf:	add    bl,ah
  412ae1:	fld    st(3)
  412ae3:	add    al,ch
  412ae5:	fcmovb st,st(0)
  412ae7:	add    ah,ah
  412ae9:	fmul   st(4),st
  412aeb:	add    cl,ah
  412aed:	(bad)  
  412aef:	add    ah,ah
  412af1:	(bad)  
  412af3:	add    dl,ah
  412af5:	(bad)  
  412af7:	add    al,ch
  412af9:	(bad)  
  412afb:	add    al,ah
  412afd:	(bad)  
  412aff:	add    bh,ah
  412b01:	loopne 0x412ac5
  412b03:	add    bl,ch
  412b05:	loopne 0x412ac9
  412b07:	add    ah,ah
  412b09:	loope  0x412ad6
  412b0b:	add    ah,ch
  412b0d:	in     al,0xcb
  412b0f:	add    ah,ah
  412b11:	loopne 0x412ae6
  412b13:	add    dl,ch
  412b15:	in     al,0xd3
  412b17:	add    ah,ah
  412b19:	jrcxz  0x412af9
  412b1b:	add    bl,ch
  412b1d:	in     eax,0xdb
  412b1f:	add    bh,ch
  412b21:	jmp    0xffffffffe92c2c00
  412b26:	fild   WORD PTR [rax]
  412b28:	in     eax,dx
  412b29:	jmp    0xffffffffed332c0d
  412b2e:	fild   WORD PTR [rax]
  412b30:	(bad)  
  412b32:	loopne 0x412b34
  412b34:	out    0xe4,eax
  412b36:	loopne 0x412b38
  412b38:	jmp    0xffffffffec421225
  412b3d:	(bad)  
  412b3e:	in     eax,0x0
  412b40:	out    dx,al
  412b41:	in     al,dx
  412b42:	in     al,0x0
  412b44:	jmp    0x412b31
  412b46:	jmp    0xffffffffe92d184b
  412b4b:	add    dh,ch
  412b4d:	in     eax,dx
  412b4e:	(bad)  
  412b4f:	add    al,dh
  412b51:	(bad)  
  412b52:	loope  0x412b54
  412b54:	lock out dx,eax
  412b56:	loopne 0x412b58
  412b58:	icebp  
  412b59:	out    dx,eax
  412b5a:	in     al,0x0
  412b5c:	icebp  
  412b5d:	in     eax,dx
  412b5e:	(bad)  
  412b5f:	add    ch,dh
  412b61:	icebp  
  412b62:	(bad)  
  412b63:	add    dl,dh
  412b65:	repz in al,dx
  412b67:	add    dl,bh
  412b69:	hlt    
  412b6a:	jmp    0x412b6c
  412b6c:	cmc    
  412b6d:	repz repnz add al,bh
  412b71:	div    cl
  412b73:	add    bl,bh
  412b75:	clc    
  412b76:	repnz add cl,bh
  412b79:	clc    
  412b7a:	hlt    
  412b7b:	add    ah,bh
  412b7d:	cld    
  412b7e:	hlt    
	...
  412b8f:	add    bl,dh
  412b91:	shl    DWORD PTR [rsi+rbx*2+0x74],1
  412b95:	movabs ds:0xf4,eax
	...
  412bae:	add    BYTE PTR [rax],al
  412bb0:	fdivr  QWORD PTR [rdx+0x2]
  412bb3:	(bad)  
  412bb4:	(bad)  
  412bb5:	xor    eax,DWORD PTR [rcx+rbp*8+0x0]
	...
  412bd0:	mov    edi,0x4839480f
  412bd5:	rex.W
  412bd6:	rex.B movs DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
	...
  412bf0:	lods   eax,DWORD PTR ds:[rsi]
  412bf1:	cmovs  edi,DWORD PTR [rcx]
  412bf4:	cmp    DWORD PTR [rdi],ebp
  412bf6:	(bad)  
  412bf7:	mov    dh,bl
	...
  412c0d:	add    BYTE PTR [rax],al
  412c0f:	add    BYTE PTR [rbp+0x39393941],bl
  412c15:	(bad)  
  412c16:	cmp    DWORD PTR [rax+0xef],eax
	...
  412c30:	cdq    
  412c31:	sbb    al,0x25
  412c33:	cmp    QWORD PTR [rdi],rsp
  412c36:	and    BYTE PTR [rdi-0x7],ah
	...
  412c4d:	add    BYTE PTR [rax],al
  412c4f:	fist   WORD PTR [rsi+0x27483939]
  412c55:	(bad)  
  412c56:	rex.W pop rcx
  412c58:	std    
	...
  412c69:	add    BYTE PTR [rax],al
  412c6b:	repz out 0xef,al
  412c6e:	add    dl,dl
  412c70:	xchg   ebp,eax
  412c71:	(bad)  
  412c72:	sub    rax,0x55202748
  412c78:	out    0x0,eax
	...
  412c86:	sti    
  412c87:	add    BYTE PTR [rax],al
  412c89:	add    BYTE PTR [rax],al
  412c8b:	mov    ebx,0xccd5bfa9
  412c90:	xchg   edx,eax
  412c91:	and    BYTE PTR [rax+0x2d],cl
  412c94:	es es rex.W push rbx
  412c98:	(bad)  
	...
  412ca5:	fidiv  WORD PTR [rbp+rdx*4+0x0]
  412ca9:	add    bh,ch
  412cab:	mov    ebx,0xe2791391
  412cb0:	xchg   edx,eax
  412cb1:	(bad)  
  412cb2:	rex.W
  412cb3:	rex.W
  412cb4:	es cmp DWORD PTR es:[rsi],ebx
  412cb8:	fdiv   st(6),st
  412cba:	cli    
  412cbb:	cli    
	...
  412cc4:	out    0x72,eax
  412cc6:	(bad)  
  412cc7:	mov    r11b,0x0
  412cca:	add    bl,dh
  412ccc:	(bad)  
  412ccd:	mov    edi,0x1e95900d
  412cd2:	rex.W (bad) 
  412cd4:	(bad)  
  412cd5:	cmp    DWORD PTR es:[rdi],edx
  412cd8:	mov    edi,0x8d68119f
  412cdd:	test   al,0x0
  412cdf:	add    BYTE PTR [rax],al
  412ce1:	add    BYTE PTR [rax],al
  412ce3:	repz mov al,0x41
  412ce6:	and    al,0x39
  412ce8:	push   rsp
  412ce9:	ret    0x0
  412cec:	add    dh,ah
  412cee:	mov    dl,0xc3
  412cf0:	ins    BYTE PTR es:[rdi],dx
  412cf1:	(bad)  
  412cf2:	cmp    QWORD PTR [rdi],rsp
  412cf5:	(bad)  
  412cf6:	cmp    DWORD PTR [rcx],ebx
  412cf8:	scas   eax,DWORD PTR es:[rdi]
  412cf9:	mov    esp,0xe6e6d194
  412cfe:	add    BYTE PTR [rax],al
  412d00:	add    BYTE PTR [rax],al
  412d02:	sti    
  412d03:	fcom   QWORD PTR [rbx+0x39]
  412d06:	rex.W
  412d07:	rex.W (bad) 
  412d09:	adc    bl,dl
  412d0b:	out    0xd2,eax
  412d0d:	mov    edi,0x50397de2
  412d12:	push   rax
  412d13:	push   rax
  412d14:	rex.W
  412d15:	rex.W
  412d16:	cmp    QWORD PTR [rbx],rdx
  412d19:	mov    esp,0x0
  412d1e:	add    BYTE PTR [rax],al
  412d20:	add    BYTE PTR [rax],al
  412d22:	(bad)  
  412d23:	test   eax,0x2f394106
  412d28:	(bad)  
  412d29:	(bad)  
  412d2a:	fdivr  DWORD PTR [rdx+0xe]
  412d2d:	movsxd ebx,eax
  412d2f:	adc    al,0x50
  412d31:	rex.W
  412d32:	rex.W push rax
  412d34:	push   rax
  412d35:	sub    eax,0xe572392f
  412d3a:	(bad)  
  412d3c:	add    BYTE PTR [rax],al
  412d3e:	add    BYTE PTR [rax],al
  412d40:	add    BYTE PTR [rax],al
  412d42:	shl    BYTE PTR [rcx+rdi*1+0x2b],1
  412d46:	cmp    QWORD PTR [rdi-0x3d],rdx
  412d4a:	jge    0x412d65
  412d4c:	rex.B
  412d4d:	mov    r13d,0x392d2593
  412d53:	push   rax
  412d54:	rex.W
  412d55:	rex.W
  412d56:	rex.W push rax
  412d58:	mov    esp,0xd2d2c3
  412d5d:	add    BYTE PTR [rax],al
  412d5f:	add    BYTE PTR [rax],al
  412d61:	(bad)  
  412d62:	leave  
  412d63:	push   rbp
  412d64:	sub    rbp,QWORD PTR [rbx]
  412d67:	cmp    DWORD PTR [rdi-0x28],edi
  412d6a:	push   rcx
  412d6b:	(bad)  
  412d6c:	(bad)  
  412d6d:	(bad)  
  412d6e:	xchg   edx,eax
  412d6f:	mov    dh,0x4
  412d71:	sub    eax,0x2d483939
  412d76:	cmp    DWORD PTR [rdx-0x28],ebx
  412d79:	js     0x412d4f
  412d7b:	xchg   ecx,eax
  412d7c:	std    
  412d7d:	add    BYTE PTR [rax],al
  412d7f:	add    BYTE PTR [rax],al
  412d81:	rep stos DWORD PTR es:[rdi],eax
  412d83:	rex.B
  412d84:	sub    rbp,QWORD PTR [rbx]
  412d87:	cmp    DWORD PTR [rbx+0x393933c5],eax
  412d8d:	pop    r14
  412d8f:	(bad)
  412d92:	rex.W
  412d93:	sub    rax,0xffffffff8b9d4148
  412d99:	adc    dl,ah
  412d9b:	imul   eax,edx,0x0
  412da1:	stc    
  412da2:	add    BYTE PTR [rcx+0x2b],0x2b
  412da6:	sub    edi,DWORD PTR [rcx]
  412da8:	(bad)  
  412da9:	leave  
  412daa:	or     edx,DWORD PTR [rdi]
  412dac:	cmp    DWORD PTR [rcx],edi
  412dae:	push   rsp
  412daf:	mov    ah,0x51
  412db1:	push   rax
  412db2:	rex.W
  412db3:	rex.W
  412db4:	rex.W push rax
  412db6:	pop    rsi
  412db7:	mov    ecx,0x5fe05c51
  412dbc:	test   ebp,edi
  412dbe:	add    BYTE PTR [rax],al
  412dc0:	add    ch,ah
  412dc2:	push   rbp
  412dc3:	(bad)  
  412dc4:	sub    ebp,DWORD PTR [rbx]
  412dc6:	(bad)  
  412dc7:	cmp    DWORD PTR [rsi-0x27],esp
  412dca:	cmp    DWORD PTR [rax+0x50],r9d
  412dce:	push   rcx
  412dcf:	mov    ah,0x54
  412dd1:	(bad)  
  412dd2:	sub    rdx,QWORD PTR [rax+0xa]
  412dd6:	xchg   edi,eax
  412dd7:	mov    ah,0x2
  412dd9:	ins    DWORD PTR es:[rdi],dx
  412dda:	enter  0x5455,0xd2
  412dde:	add    BYTE PTR [rax],al
  412de0:	add    BYTE PTR [rdi+0x2b484818],bh
  412de6:	sub    edi,DWORD PTR [rcx]
  412de8:	movsxd ebx,ecx
  412dea:	push   rbx
  412deb:	cmp    DWORD PTR [rcx],edi
  412ded:	cmp    DWORD PTR [rbp-0x4b],edx
  412df0:	push   rbx
  412df1:	push   rax
  412df2:	cmp    DWORD PTR [rcx],edi
  412df4:	or     r8d,r13d
  412df7:	mov    BYTE PTR [rip+0x1745c572],ah        # 0x1786f36f
  412dfd:	xchg   BYTE PTR [rax],al
  412dff:	add    BYTE PTR [rax],al
  412e01:	lahf   
  412e02:	(bad)  
  412e03:	and    al,0x39
  412e05:	sub    rdi,QWORD PTR [rcx]
  412e08:	outs   dx,BYTE PTR ds:[rsi]
  412e09:	fmul   DWORD PTR [rdi]
  412e0b:	add    dl,BYTE PTR [rbx+0x6e]
  412e0e:	push   0xffffffffffffffb7
  412e10:	push   rax
  412e11:	cmp    DWORD PTR [rax+0x48],edx
  412e14:	(bad)  
  412e15:	push   rsp
  412e16:	loope  0x412e7a
  412e18:	xor    esp,DWORD PTR [rdx-0x38]
  412e1b:	push   rsi
  412e1c:	(bad)  
  412e1d:	push   rcx
  412e1e:	out    dx,eax
  412e1f:	add    ch,ch
  412e21:	mov    DWORD PTR [rcx],edi
  412e23:	cmp    DWORD PTR [rax+0x48],ecx
  412e26:	sub    edi,DWORD PTR [rcx]
  412e28:	outs   dx,BYTE PTR ds:[rsi]
  412e29:	jrcxz  0x412e9c
  412e2b:	or     al,BYTE PTR [rsi+0x17b8a7d8]
  412e31:	cmp    DWORD PTR [rax+0x48],edx
  412e34:	cmp    DWORD PTR [rbx-0x36],edx
  412e37:	jle    0x412dd7
  412e39:	(bad)  
  412e3a:	jrcxz  0x412e97
  412e3c:	sub    ebx,DWORD PTR [rcx]
  412e3e:	ret    
  412e3f:	add    bl,bl
  412e41:	je     0x412e93
  412e43:	and    al,0x48
  412e45:	sub    rdi,QWORD PTR [rcx]
  412e48:	outs   dx,BYTE PTR ds:[rsi]
  412e49:	jrcxz  0x412e15
  412e4b:	mov    dh,0xa6
  412e4d:	test   eax,0x48178cd8
  412e52:	rex.W
  412e53:	rex.W
  412e54:	rex.W (bad) 
  412e56:	lods   al,BYTE PTR ds:[rsi]
  412e57:	int    0xb1
  412e59:	(bad)  
  412e5a:	in     eax,0x70
  412e5c:	rex.W sbb al,0x9d
  412e5f:	add    bl,bl
  412e61:	gs rex.W (bad) 
  412e64:	cmp    DWORD PTR [rax+0x2b],ecx
  412e67:	cmp    DWORD PTR [rbx-0x27],esp
  412e6a:	jae    0x412df4
  412e6c:	scas   al,BYTE PTR es:[rdi]
  412e6d:	scas   al,BYTE PTR es:[rdi]
  412e6e:	xchg   DWORD PTR [rbx+0x39],edx
  412e71:	cmp    QWORD PTR [rcx],rdi
  412e74:	cmp    DWORD PTR [rcx],edi
  412e76:	push   rsi
  412e77:	xchg   edi,eax
  412e78:	(bad)
  412e7b:	jo     0x412ea8
  412e7d:	cmp    DWORD PTR [rdx+0x5065e3fd],eax
  412e83:	(bad)  
  412e84:	cmp    DWORD PTR [rax+0x39],ecx
  412e87:	cmp    DWORD PTR [rbx-0x30],edx
  412e8a:	jb     0x412e92
  412e8c:	(bad)  
  412e8d:	sbb    DWORD PTR [rcx],edi
  412e8f:	(bad)  
  412e90:	cmp    DWORD PTR [rcx],edi
  412e92:	cmp    DWORD PTR [rdi],edx
  412e94:	cmp    DWORD PTR [rdi+0x2b],ecx
  412e97:	and    eax,0x45b78e07
  412e9c:	cmp    DWORD PTR [rcx],edi
  412e9e:	pop    rbx
  412e9f:	out    dx,eax
  412ea0:	fidiv  DWORD PTR [rdx+0x39]
  412ea3:	sub    eax,0x17393939
  412ea8:	(bad)  
  412ea9:	lods   al,BYTE PTR ds:[rsi]
  412eaa:	stos   BYTE PTR es:[rdi],al
  412eab:	rex.B and al,0x24
  412eae:	cmp    DWORD PTR [rcx],edi
  412eb0:	cmp    DWORD PTR [rcx],edi
  412eb2:	push   rax
  412eb3:	(bad)  
  412eb4:	sub    rax,0xffffffffc3623948
  412eba:	cmp    DWORD PTR [rcx],0xe7633948
  412ec0:	jmp    0x507a355a
  412ec5:	push   rax
  412ec6:	cmp    DWORD PTR [rax+0x50],ecx
  412ec9:	(bad)  
  412eca:	loopne 0x412f2a
  412ecc:	(bad)  
  412ecd:	cmp    QWORD PTR [rcx],rdi
  412ed0:	cmp    DWORD PTR [rax+0x39],edx
  412ed3:	sub    rax,0xffffffffc30b4150
  412ed9:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
  412eda:	(bad)  
  412edb:	cmp    DWORD PTR [rax+0x50],ecx
  412ede:	push   0xffffffffffffffe7
  412ee0:	add    dl,al
  412ee2:	or     al,0x41
  412ee4:	cmp    DWORD PTR [rax+0x50],ecx
  412ee7:	cmp    DWORD PTR [rax+0xa],edx
  412eea:	mov    dh,0xa6
  412eec:	(bad)  
  412eed:	(bad)  
  412eee:	cmp    DWORD PTR [rax+0x39],edx
  412ef1:	(bad)  
  412ef2:	cmp    DWORD PTR [rax+0x2f],ecx
  412ef5:	rex.B (bad) 
  412ef7:	xchg   edx,eax
  412ef8:	mov    dh,0x54
  412efa:	rex.B (bad) 
  412efc:	push   rax
  412efd:	add    DWORD PTR [rdi-0x6008ff02],ebx
  412f03:	or     edi,DWORD PTR [rcx]
  412f05:	cmp    DWORD PTR [rcx],edi
  412f07:	cmp    DWORD PTR [rcx],edi
  412f09:	rex.B push 0xffffffffffffffd0
  412f0c:	xchg   BYTE PTR [rdi],cl
  412f0e:	(bad)  
  412f0f:	xor    eax,0x41391739
  412f14:	(bad)  
  412f15:	pop    rsp
  412f16:	lods   al,BYTE PTR ds:[rsi]
  412f17:	(bad)
  412f1a:	xor    eax,0xfe925141
  412f1f:	add    BYTE PTR [rax],al
  412f21:	add    bl,bl
  412f23:	mov    cl,0x57
  412f25:	xor    eax,DWORD PTR [rbx]
  412f27:	add    ecx,DWORD PTR [rbx]
  412f29:	push   rcx
  412f2a:	imul   edi,DWORD PTR [rdi+0x1752a6ef],0x33
  412f31:	xor    esi,DWORD PTR [rbx]
  412f33:	push   rcx
  412f34:	mov    eax,ebp
  412f36:	mov    ah,0x6e
  412f38:	add    al,0x32
  412f3a:	add    al,0x5c
  412f3c:	lods   eax,DWORD PTR ds:[rsi]
  412f3d:	test   DWORD PTR [rax],0x0
  412f43:	add    ah,dh
  412f45:	(bad)  
  412f46:	ret    0xd3c0
  412f49:	out    dx,eax
  412f4a:	add    BYTE PTR [rax],al
  412f4c:	add    BYTE PTR [rax],al
  412f4e:	jmp    0xffffffffdaf3e212
  412f53:	cmc    
  412f54:	(bad)  
  412f55:	loop   0x412fd1
  412f57:	jns    0x412edf
  412f59:	(bad)  
  412f5a:	mov    esp,0xf4
	...
  412f73:	add    BYTE PTR [rax],al
  412f75:	add    bl,bh
  412f77:	(bad)  
  412f79:	out    dx,eax
  412f7a:	add    BYTE PTR [rax],al
  412f7c:	add    BYTE PTR [rax],al
  412f7e:	add    BYTE PTR [rax],al
  412f80:	(bad)  
  412f81:	inc    DWORD PTR [rcx]
  412f83:	(bad)  
  412f84:	(bad)  
  412f85:	inc    DWORD PTR [rax]
  412f87:	(bad)  
  412f88:	(bad)  
  412f89:	inc    DWORD PTR [rax]
  412f8b:	(bad)  
  412f8c:	(bad)  
  412f8d:	inc    DWORD PTR [rax]
  412f8f:	jg     0x412f90
  412f91:	inc    DWORD PTR [rax]
  412f93:	jg     0x412f94
  412f95:	inc    DWORD PTR [rax]
  412f97:	jg     0x412f98
  412f99:	inc    BYTE PTR [rax]
  412f9b:	jg     0x412f9c
  412f9d:	loop   0x412f9f
  412f9f:	jg     0x412f9e
  412fa1:	loopne 0x412fa3
  412fa3:	jg     0x412f9d
  412fa5:	rol    BYTE PTR [rax],0xf
  412fa8:	lock (bad) 
  412faa:	add    BYTE PTR [rbx],al
  412fac:	loopne 0x412fe6
  412fae:	add    BYTE PTR [rbx],al
  412fb0:	rol    BYTE PTR [rax],0x0
  412fb3:	(bad)  
  412fb4:	rol    BYTE PTR [rax],0x0
  412fb7:	xadd   BYTE PTR [rax],al
  412fba:	add    BYTE PTR [rdi],cl
  412fbc:	add    BYTE PTR [rax],0x0
  412fbf:	(bad)  
  412fc0:	add    BYTE PTR [rax],0x0
  412fc3:	(bad)  
  412fc4:	add    BYTE PTR [rax],0x0
  412fc7:	add    eax,DWORD PTR [rax-0x7ffd0000]
  412fcd:	add    BYTE PTR [rax],al
  412fcf:	add    eax,DWORD PTR [rax+0x10000]
  412fd5:	add    BYTE PTR [rax],al
  412fd7:	add    DWORD PTR [rax],eax
  412fd9:	add    BYTE PTR [rax],al
  412fdb:	add    DWORD PTR [rax],eax
	...
  412fe9:	add    BYTE PTR [rax],al
  412feb:	add    BYTE PTR [rax-0x80000000],al
  412ff1:	add    BYTE PTR [rax],al
  412ff3:	add    eax,eax
  412ff5:	add    BYTE PTR [rax],al
  412ff7:	add    esi,eax
  412ff9:	cmp    al,0x0
  412ffb:	ud0    edi,edi
  412ffe:	cld    
  412fff:	(bad)  
  413000:	sub    BYTE PTR [rax],al
  413002:	add    BYTE PTR [rax],al
  413004:	xor    BYTE PTR [rax],al
  413006:	add    BYTE PTR [rax],al
  413008:	(bad)  
  413009:	add    BYTE PTR [rax],al
  41300b:	add    BYTE PTR [rcx],al
  41300d:	add    BYTE PTR [rax],cl
  41300f:	add    BYTE PTR [rax],al
  413011:	add    BYTE PTR [rax],al
  413013:	add    BYTE PTR [rax],al
  413015:	or     DWORD PTR [rax],eax
	...
  41301f:	add    BYTE PTR [rax],al
  413021:	add    DWORD PTR [rax],eax
  413023:	add    BYTE PTR [rax],al
  413025:	add    DWORD PTR [rax],eax
  413027:	add    BYTE PTR [rax],al
  413029:	add    BYTE PTR [rax],al
  41302b:	add    BYTE PTR [rsi+0x4d],bl
  41302e:	cmp    BYTE PTR [rax],al
  413030:	pop    rcx
  413031:	push   rbx
  413032:	xor    eax,0x2c5b7900
  413037:	add    BYTE PTR [rdi+0x53],ah
  41303a:	xor    eax,DWORD PTR [rax]
  41303c:	ins    DWORD PTR es:[rdi],dx
  41303d:	push   rbx
  41303e:	xor    eax,DWORD PTR [rax]
  413040:	ins    BYTE PTR es:[rdi],dx
  413041:	pop    rcx
  413042:	add    BYTE PTR ss:[rdi+rdx*2+0x38],ah
  413047:	add    BYTE PTR [rbx+0x55],ch
  41304a:	cmp    al,BYTE PTR [rax]
  41304c:	pop    dx
  41304e:	cmp    eax,0x395b6e00
  413053:	add    BYTE PTR [rbx+0x56],dh
  413056:	xor    al,BYTE PTR [rax]
  413058:	jge    0x4130b0
  41305a:	xor    al,0x0
  41305c:	je     0x4130b9
  41305e:	xor    al,0x0
  413060:	jp     0x4130bd
  413062:	xor    eax,DWORD PTR [rax]
  413064:	je     0x4130bc
  413066:	cmp    eax,DWORD PTR [rax]
  413068:	jnp    0x4130c0
  41306a:	cmp    DWORD PTR [rax],eax
  41306c:	je     0x4130cb
  41306e:	cmp    eax,DWORD PTR [rax]
  413070:	jnp    0x4130ce
  413072:	cmp    al,BYTE PTR [rax]
  413074:	jge    0x4130d8
  413076:	sub    al,0x0
  413078:	outs   dx,BYTE PTR ds:[rsi]
  413079:	movsxd esi,DWORD PTR [rax+rax*1]
  41307c:	jbe    0x4130e1
  41307e:	add    BYTE PTR ss:[rax+riz*2+0x33],bh
  413083:	add    BYTE PTR [rbp+0x61],dh
  413086:	cmp    eax,0x3b627b00
  41308b:	add    BYTE PTR [rdi+0x68],bh
  41308e:	cmp    eax,DWORD PTR [rax]
  413090:	imul   ebx,DWORD PTR [rax+0x41],0x425b7700
  413097:	add    BYTE PTR [rbx+0x60],ch
  41309a:	add    BYTE PTR [r9+r12*2+0x41],r14b
  41309f:	add    BYTE PTR [rbx+riz*2+0x43],bh
  4130a3:	add    BYTE PTR [rsi+0x69],bh
  4130a6:	rex.XB add BYTE PTR [r15+0x63],sil
  4130aa:	rex.WB add BYTE PTR [r11+rbp*2+0x4b],dil
  4130af:	add    BYTE PTR [rcx+rsi*2+0x4e],bh
  4130b3:	add    BYTE PTR [rsi+0x6a],ch
  4130b6:	push   rsp
  4130b7:	add    BYTE PTR [rbx+rbp*2+0x55],bh
  4130bb:	add    BYTE PTR [rdx+0x71],bh
  4130be:	pop    rcx
  4130bf:	add    BYTE PTR [rsi+rsi*2+0x64],bh
  4130c3:	add    BYTE PTR [rbp+rbx*2+0x5c80002c],al
  4130ca:	xor    al,BYTE PTR [rax]
  4130cc:	mov    DWORD PTR [rbx+0x33],ebx
  4130cf:	add    BYTE PTR [rax-0x7cffc6aa],al
  4130d5:	pop    rsp
  4130d6:	cmp    al,BYTE PTR [rax]
  4130d8:	lea    ebx,[rdi+0x3a]
  4130db:	add    BYTE PTR [rdi+rbx*2+0x62830036],dl
  4130e2:	add    BYTE PTR cs:[rdx+riz*2+0x6986002d],cl
  4130ea:	sub    eax,0x2d698b00
  4130ef:	add    BYTE PTR [rdx-0x65ffd29b],dl
  4130f5:	movsxd ebp,DWORD PTR [rsi]
  4130f7:	add    BYTE PTR [rax+rbp*2+0x6284002e],dl
  4130fe:	xor    al,0x0
  413100:	mov    esp,DWORD PTR [rbx+rsi*1+0x0]
  413104:	test   BYTE PTR [rax+0x31],ch
  413107:	add    BYTE PTR [rbx-0x7cffce98],cl
  41310d:	movsxd edi,DWORD PTR [rdx]
  41310f:	add    BYTE PTR [rbx-0x73ffc69d],cl
  413115:	imul   edi,DWORD PTR [rip+0x32649200],0x31649900        # 0x32a5c31f
  41311f:	add    BYTE PTR [rbx-0x66ffcd98],dl
  413125:	imul   esi,DWORD PTR [rbx],0x39619300
  41312b:	add    BYTE PTR [rax-0x6dffc69e],bl
  413131:	push   0x39
  413133:	add    BYTE PTR [rcx-0x7bffc796],bl
  413139:	push   0x46
  41313b:	add    BYTE PTR [rbx-0x7effb990],cl
  413141:	jo     0x41318b
  413143:	add    BYTE PTR [rax+rsi*2+0x6781004c],cl
  41314a:	push   rdx
  41314b:	add    BYTE PTR [rdx-0x73ffac94],al
  413151:	outs   dx,DWORD PTR ds:[rsi]
  413152:	push   rax
  413153:	add    BYTE PTR [rcx+rsi*2+0x738b0054],al
  41315a:	push   rdx
  41315b:	add    BYTE PTR [rsp+rdi*2+0x758c0055],cl
  413162:	pop    rbp
  413163:	add    BYTE PTR [rcx-0x6dffa484],cl
  413169:	jnp    0x4131bf
  41316b:	add    BYTE PTR [rsi+rdi*2+0x7c930051],bl
  413172:	pop    rdx
  413173:	add    BYTE PTR [rcx-0x78ffa582],bl
  413179:	jbe    0x4131df
  41317b:	add    BYTE PTR [rbx-0x70ff9d84],dl
  413181:	sbb    DWORD PTR [rsi+0x0],0x5d8294
  413188:	fwait
  413189:	sbb    DWORD PTR [rsi+0x0],0xffffffa2
  41318d:	test   DWORD PTR [rbp+0x0],ebx
  413190:	mov    al,BYTE PTR [rcx-0x7d6dff9b]
  413196:	add    BYTE PTR gs:[rbp-0x61ff9c7e],bl
  41319d:	mov    ah,BYTE PTR [rdi+0x0]
  4131a0:	xchg   ebx,eax
  4131a1:	sub    BYTE PTR [rdi+0x0],0x9b
  4131a5:	(bad)  
  4131a6:	push   0x0
  4131a8:	xchg   ebx,eax
  4131a9:	mov    ch,BYTE PTR [rdx+0x0]
  4131ac:	popf   
  4131ad:	mov    DWORD PTR [rax+rax*1-0x63],ebp
  4131b1:	xchg   edx,eax
  4131b2:	imul   eax,DWORD PTR [rax],0xffffff88
  4131b5:	xchg   BYTE PTR [rcx+0x0],bh
  4131b8:	xchg   ebx,eax
  4131b9:	test   BYTE PTR [rdx+0x0],dh
  4131bc:	xchg   esp,eax
  4131bd:	mov    esi,DWORD PTR [rbx+0x0]
  4131c0:	fwait
  4131c1:	mov    WORD PTR [rax+rax*1-0x70],?
  4131c5:	mov    DWORD PTR [rax+rax*1-0x61],edi
  4131c9:	lea    edi,[rbx+0x0]
  4131cc:	cwde   
  4131cd:	xchg   edx,eax
  4131ce:	jns    0x4131d0
  4131d0:	movabs eax,ds:0xa9006d8aa200648b
  4131d9:	(bad)  
  4131da:	outs   dx,BYTE PTR ds:[rsi]
  4131db:	add    BYTE PTR [rdx-0x5cff926d],ch
  4131e1:	lea    esi,[rax+rax*1-0x57]
  4131e5:	xchg   esp,eax
  4131e6:	jae    0x4131e8
  4131e8:	stos   DWORD PTR es:[rdi],eax
  4131e9:	fwait
  4131ea:	jno    0x4131ec
  4131ec:	movabs ds:0xa6007a94aa007a94,eax
  4131f5:	(bad)  
  4131f6:	jl     0x4131f8
  4131f8:	stos   DWORD PTR es:[rdi],eax
  4131f9:	(bad)  
  4131fa:	jl     0x4131fc
  4131fc:	mov    al,0x96
  4131fe:	jno    0x413200
  413200:	mov    ah,0x9c
  413202:	jnp    0x413204
  413204:	lods   al,BYTE PTR ds:[rsi]
  413205:	movabs al,ds:0x888b007da5b0007b
  41320e:	xchg   BYTE PTR [rax],al
  413210:	cwde   
  413211:	pop    QWORD PTR [rcx-0x796b6600]
  413217:	add    BYTE PTR [rbp-0x48ff7e67],ah
  41321d:	lahf   
  41321e:	mov    DWORD PTR [rax],eax
  413220:	test   eax,0xae00929c
  413225:	movabs eax,ds:0xa4bf0086a3b20089
  41322e:	add    DWORD PTR [rax],0xffffffb5
  413231:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
  413232:	lea    eax,[rax]
  413234:	mov    eax,0xb50088a4
  413239:	test   al,0x8a
  41323b:	add    BYTE PTR [rdx-0x50ff7458],bh
  413241:	movabs ds:0xabbc0093aab30096,al
  41324a:	xchg   ebx,eax
  41324b:	add    BYTE PTR [rdi-0x41ff6052],dh
  413251:	scas   eax,DWORD PTR es:[rdi]
  413252:	(bad)  
  413253:	add    BYTE PTR [rbp-0x4cff6e50],bh
  413259:	mov    bl,0x9d
  41325b:	add    BYTE PTR [rcx+rsi*4-0x4741ff64],bh
  413262:	popf   
  413263:	add    BYTE PTR [rax-0x4dff5e5a],ch
  413269:	lods   eax,DWORD PTR ds:[rsi]
  41326a:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
  41326b:	add    BYTE PTR [rsi-0x42ff5c4d],dh
  413271:	mov    ch,0xa0
  413273:	add    BYTE PTR [rdx-0x48ff554d],dh
  413279:	mov    edx,0xb4b600af
  41327e:	mov    cl,0x0
  413280:	mov    ecx,0xbe00b2b4
  413285:	mov    ebx,0xabc200b7
  41328a:	mov    DWORD PTR [rax],eax
  41328c:	shr    DWORD PTR [rdi-0x4d3bff69],0x91
  413293:	add    cl,cl
  413295:	mov    bl,0x91
  413297:	add    bl,al
  413299:	mov    bl,0x9c
  41329b:	add    dh,cl
  41329d:	mov    dh,0x9c
  41329f:	add    dl,al
  4132a1:	mov    eax,0xbaca009d
  4132a6:	pushf  
  4132a7:	add    cl,dl
  4132a9:	mov    esp,0xbbc8009e
  4132ae:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
  4132af:	add    al,dl
  4132b1:	mov    ebp,0xbfc100a6
  4132b6:	mov    ebp,0xbbbccb00
  4132bb:	add    dh,cl
  4132bd:	ret    0x9c
  4132c0:	rol    ah,cl
  4132c2:	lahf   
  4132c3:	add    ah,cl
  4132c5:	ret    
  4132c6:	test   al,0x0
  4132c8:	(bad)  
  4132c9:	ret    0xa5
  4132cc:	rol    ebp,cl
  4132ce:	test   eax,0xaac6d900
  4132d3:	add    bl,dl
  4132d5:	enter  0xad,0xdb
  4132d9:	int3   
  4132da:	lods   al,BYTE PTR ds:[rsi]
  4132db:	add    ah,cl
  4132dd:	leave  
  4132de:	mov    bl,0x0
  4132e0:	(bad)
  4132e4:	int    0xc8
  4132e6:	mov    ecx,0xb2c3d300
  4132eb:	add    dl,bl
  4132ed:	(bad)  
  4132ee:	mov    cl,0x0
  4132f0:	(bad)  
  4132f1:	retf   
  4132f2:	mov    dl,0x0
  4132f4:	fcmove st,st(4)
  4132f6:	mov    dl,0x0
  4132f8:	(bad)  
  4132f9:	(bad)  
  4132fa:	mov    edi,0xbbccd300
  4132ff:	add    ah,bl
  413301:	int    0xbb
  413303:	add    bl,dl
  413305:	shl    DWORD PTR [rdi-0x4a2d2400],1
  41330b:	add    al,dl
  41330d:	sar    DWORD PTR [rbx-0x412e2500],1
  413313:	add    bl,bl
  413315:	fnstcw WORD PTR [rbp-0x4d311e00]
  41331b:	add    al,ah
  41331d:	shl    DWORD PTR [rbp-0x4b251c00],cl
  413323:	add    al,ch
  413325:	fidiv  DWORD PTR [rdi-0x442a1e00]
  41332b:	add    dl,ah
  41332d:	fnstcw WORD PTR [rbx-0x431e1600]
  413333:	add    dh,al
  413335:	ret    0xc5
  413338:	(bad)  
  413339:	mov    bl,0x0
  41333c:	int3   
  41333d:	retf   0xc4
  413340:	(bad)  
  413341:	iret   
  413342:	retf   0xd100
  413345:	retf   
  413346:	(bad)
  413349:	(bad)  
  41334a:	retf   
  41334b:	add    ah,bl
  41334d:	rol    ebx,cl
  41334f:	add    ah,dl
  413351:	ror    esp,1
  413353:	add    bl,bl
  413355:	(bad)  
  413356:	retf   0xda00
  413359:	fxch   st(3)
  41335b:	add    ch,dl
  41335d:	(bad)  
  41335e:	rol    DWORD PTR [rax],cl
  413360:	(bad)  
  413362:	rol    BYTE PTR [rax],1
  413364:	fstp   st(2)
  413366:	rol    BYTE PTR [rax],cl
  413368:	(bad)  
  413369:	xlat   BYTE PTR ds:[rbx]
  41336a:	fadd   DWORD PTR [rax]
  41336c:	(bad)  
  41336e:	fild   DWORD PTR [rax]
  413370:	loopne 0x413348
  413372:	rol    DWORD PTR [rax],0xe4
  413375:	fcmovb st,st(2)
  413377:	add    bl,ch
  413379:	fcmovnb st,st(1)
  41337b:	add    bl,ah
  41337d:	xlat   BYTE PTR ds:[rbx]
  41337e:	enter  0xe200,0xda
  413382:	retf   
  413383:	add    bl,ch
  413385:	fmul   st(1),st
  413387:	add    bl,dh
  413389:	(bad)  
  41338b:	add    dl,ah
  41338d:	fst    st(3)
  41338f:	add    dh,bl
  413391:	jrcxz  0x41336f
  413393:	add    bl,ch
  413395:	jrcxz  0x41335b
  413397:	add    cl,ch
  413399:	jrcxz  0x413365
  41339b:	add    bh,ch
  41339d:	call   0xffffffffe9343471
  4133a2:	retf   0xe400
  4133a5:	in     al,0xd4
  4133a7:	add    bl,ch
  4133a9:	in     al,0xd2
  4133ab:	add    ch,ch
  4133ad:	jmp    0xffffffffe4253485
  4133b2:	fild   DWORD PTR [rax]
  4133b4:	jmp    0x41339b
  4133b6:	fild   DWORD PTR [rax]
  4133b8:	jmp    0xfffffffff44211a8
  4133bd:	out    0xd0,al
  4133bf:	add    ah,dh
  4133c1:	jmp    0x413397
  4133c3:	add    al,bh
  4133c5:	out    dx,al
  4133c6:	rol    DWORD PTR [rax],cl
  4133c8:	repz in al,dx
  4133ca:	fadd   QWORD PTR [rax]
  4133cc:	stc    
  4133cd:	in     eax,dx
  4133ce:	fiadd  WORD PTR [rax]
  4133d0:	in     al,dx
  4133d1:	lock (bad) 
  4133d3:	add    ah,bh
  4133d5:	neg    edx
  4133d7:	add    dh,ah
  4133d9:	in     al,0xe3
  4133db:	add    dl,ch
  4133dd:	out    0xe2,al
  4133df:	add    ah,ch
  4133e1:	in     eax,dx
  4133e2:	out    0x0,al
  4133e4:	jmp    0x4133d0
  4133e6:	jmp    0xffffffffe22e25eb
  4133eb:	add    cl,dh
  4133ed:	out    dx,al
  4133ee:	jmp    0x4133f0
  4133f0:	stc    
  4133f1:	out    dx,eax
  4133f2:	out    dx,al
  4133f3:	add    ah,ch
  4133f5:	icebp  
  4133f6:	jrcxz  0x4133f8
  4133f8:	cmc    
  4133f9:	repnz in al,0x0
  4133fc:	cli    
  4133fd:	hlt    
  4133fe:	jrcxz  0x413400
  413400:	std    
  413401:	cli    
  413402:	jrcxz  0x413404
  413404:	hlt    
  413405:	bnd jmp 0x413408
  413408:	cli    
  413409:	cmc    
  41340a:	(bad)  
  41340b:	add    bl,dh
  41340d:	clc    
  41340e:	call   0xffffffffec3f3113
  413413:	add    ah,dh
  413415:	repz repnz add cl,bh
  413419:	cmc    
  41341a:	repnz add dh,dh
  41341d:	stc    
  41341e:	repnz add ch,bh
  413421:	sti    
  413422:	hlt    
  413423:	add    ch,bh
  413425:	cld    
  413426:	cli    
	...
  41343f:	add    BYTE PTR [rax],al
  413441:	iret   
  413442:	clc    
  413443:	mov    BYTE PTR [rbp+0x55],dl
  413446:	jno    0x4133d2
  413448:	loopne 0x413442
	...
  41346e:	add    BYTE PTR [rax],al
  413470:	(bad)  
  413471:	cmc    
  413472:	add    ax,0xe10
  413476:	(bad)  
  413477:	or     ebx,DWORD PTR [rsi]
  413479:	(bad)  
  41347a:	clc    
	...
  41349f:	add    bh,dh
  4134a1:	mov    ss,WORD PTR [rcx]
  4134a3:	sub    BYTE PTR [rsi],dh
  4134a5:	ss ss sub BYTE PTR ss:[rip+0xf788],cl        # 0x422c36
	...
  4134ce:	add    BYTE PTR [rax],al
  4134d0:	clc    
  4134d1:	pop    rbx
  4134d2:	or     eax,0x3c363d36
  4134d7:	cmp    al,0x3c
  4134d9:	xor    eax,0xd649
	...
  4134fe:	add    BYTE PTR [rax],al
  413500:	fmul   QWORD PTR [rbx+0xe]
  413503:	cmp    al,0x32
  413505:	ss ss ds ds ss (bad) 
  41350b:	mov    al,0xec
	...
  41352d:	add    BYTE PTR [rax],al
  41352f:	add    dl,dl
  413531:	and    DWORD PTR [rsi],ebx
  413533:	ss cmp eax,0x343e3a2b
  413539:	or     ecx,DWORD PTR ss:[rax+0xc7]
	...
  413560:	mov    eax,0x3136361e
  413565:	ss cmp BYTE PTR ss:[rsp+rdi*1],dh
  41356a:	sub    BYTE PTR [rbx+0xcb],al
	...
  413590:	mov    bl,0x3a
  413592:	sub    BYTE PTR [rax],bh
  413594:	xor    BYTE PTR [rip+0x3c30303c],bh        # 0x3c7165d6
  41359a:	sub    DWORD PTR [rsi-0x34],esi
	...
  4135bd:	add    BYTE PTR [rax],al
  4135bf:	loop   0x41356c
  4135c1:	sub    edi,DWORD PTR [rsi+rsi*1]
  4135c4:	xor    BYTE PTR [rip+0x3d383031],bh        # 0x3d7965fb
  4135ca:	sub    DWORD PTR [rsp+riz*8+0x0],ebp
	...
  4135ee:	add    BYTE PTR [rsi+0x31402bab],ch
  4135f4:	xor    DWORD PTR [rip+0x3c38303c],edi        # 0x3c796636
  4135fa:	sub    DWORD PTR [rax-0x8],ebx
	...
  41361d:	add    BYTE PTR [rax],al
  41361f:	xchg   ebx,eax
  413620:	test   eax,0x3c3c3c2b
  413625:	xor    edi,DWORD PTR [rax+rsi*1]
  413628:	cmp    BYTE PTR [rip+0xfffffffff7f85229],bh        # 0xfffffffff8398857
	...
  413646:	add    BYTE PTR [rax],al
  413648:	icebp  
  413649:	(bad)
  41364c:	(bad)  
  41364d:	add    bh,bh
  41364f:	xchg   ebx,eax
  413650:	stos   DWORD PTR es:[rdi],eax
  413651:	sub    eax,DWORD PTR [rcx+0x3c]
  413654:	xor    al,0x3d
  413656:	xor    al,0x30
  413658:	cmp    BYTE PTR [rcx+rbp*1],bh
  41365b:	rex.WX call 0x413705
	...
  413675:	add    ah,ch
  413677:	add    ch,ch
  413679:	jrcxz  0x413646
  41367b:	loope  0x413677
  41367d:	cld    
  41367e:	xchg   esi,eax
  41367f:	xchg   esp,eax
  413680:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
  413681:	sub    edi,DWORD PTR [rdi*1+0x30363d3e]
  413688:	xor    DWORD PTR [rax+rax*2],edi
  41368b:	rex.R loopne 0x413652
	...
  41369e:	add    bh,ch
  4136a0:	repnz (bad) 
  4136a2:	xchg   esi,eax
  4136a3:	out    dx,eax
  4136a4:	add    BYTE PTR [rax],al
  4136a6:	rol    DWORD PTR [rax],1
  4136a8:	nop
  4136a9:	and    ebx,DWORD PTR es:[rbx+rbx*2]
  4136ad:	(bad)  
  4136ae:	std    
  4136af:	cld    
  4136b0:	mov    ?,WORD PTR [rdx]
  4136b2:	sub    eax,0x34333e3d
  4136b7:	xor    BYTE PTR [rsi],dh
  4136b9:	cmp    al,0x40
  4136bb:	(bad)  
  4136bc:	retf   
  4136bd:	out    dx,eax
	...
  4136ce:	add    bh,dh
  4136d0:	test   al,0x45
  4136d2:	adc    BYTE PTR [rdi-0x4],ch
  4136d5:	add    bh,ch
  4136d7:	jrcxz  0x4136ca
  4136d9:	loop   0x413690
  4136db:	data16 or BYTE PTR [rdi],al
  4136de:	imul   esi,esi,0x402c1ba2
  4136e4:	cmp    BYTE PTR ds:[rax],dh
  4136e7:	xor    BYTE PTR [rcx+rsi*1],dh
  4136ea:	cmp    bh,BYTE PTR [rdx]
  4136ec:	mov    al,0x0
  4136ee:	hlt    
  4136ef:	fsub   st,st(5)
  4136f1:	clc    
  4136f2:	cli    
	...
  4136fb:	add    BYTE PTR [rax],al
  4136fd:	add    cl,dh
  4136ff:	(bad)  
  413700:	sub    BYTE PTR [rcx],r14b
  413703:	sbb    BYTE PTR [rcx-0x11000000],ah
  413709:	scas   al,BYTE PTR es:[rdi]
  41370a:	retf   
  41370b:	clc    
  41370c:	jg     0x413717
  41370e:	add    ah,BYTE PTR [rdi+0x363a1bb1]
  413714:	cmp    al,0x38
  413716:	xor    BYTE PTR [rdx+rsi*1],dh
  413719:	xor    DWORD PTR [rdx],edi
  41371b:	sbb    BYTE PTR [rdx+0x494964f0],ah
  413721:	push   rsp
  413722:	jp     0x4136b4
  413724:	retf   0x0
  413727:	add    BYTE PTR [rax],al
  413729:	add    BYTE PTR [rax],al
  41372b:	add    BYTE PTR [rax],al
  41372d:	(bad)  
  41372e:	cld    
  41372f:	(bad)  
  413730:	(bad)  
  413731:	sub    DWORD PTR [rsi],esi
  413733:	sub    BYTE PTR [rax-0x4e],cl
  413736:	add    BYTE PTR [rax],al
  413738:	add    BYTE PTR [rax],al
  41373a:	out    dx,eax
  41373b:	scas   al,BYTE PTR es:[rdi]
  41373c:	imul   DWORD PTR [rcx+0x2]
  41373f:	mov    dl,0x9d
  413741:	sbb    BYTE PTR [rbx],ch
  413743:	cmp    al,0x3e
  413745:	cmp    BYTE PTR [rax],bh
  413747:	xor    BYTE PTR [rdi+rbp*1],dh
  41374a:	sub    BYTE PTR [rip+0x125f09c],dh        # 0x16727ec
  413750:	and    al,0x5e
  413752:	movsxd edi,DWORD PTR [ecx-0x5d]
  413756:	add    BYTE PTR [rax],al
  413758:	add    BYTE PTR [rax],al
  41375a:	add    BYTE PTR [rax],al
  41375c:	add    bh,dh
  41375e:	lods   al,BYTE PTR ds:[rsi]
  41375f:	sbb    BYTE PTR [rdx],bh
  413761:	xor    DWORD PTR [rdx],esi
  413763:	sbb    BYTE PTR ds:[rdx-0x2e],cl
  413767:	add    BYTE PTR [rax],al
  413769:	add    BYTE PTR [rax],al
  41376b:	retf   0xe8ee
  41376e:	mov    ebx,0x3a2a5ce7
  413773:	cmp    al,0x36
  413776:	ss cmp al,0x34
  413779:	ds sub BYTE PTR ss:[rsi-0x8],ch
  41377e:	shl    BYTE PTR [rcx+0xffd6],cl
	...
  41378c:	(bad)  
  41378d:	hlt    
  41378e:	pop    rax
  41378f:	adc    BYTE PTR [rdx+rsi*1],bh
  413792:	xor    bh,BYTE PTR [rsi*1-0x1f33b7e2]
  413799:	add    BYTE PTR [rax],al
  41379b:	fxtract 
  41379d:	stc    
  41379e:	mov    bh,0x74
  4137a0:	sub    BYTE PTR [rax+0x3c],al
  4137a3:	cmp    al,0x38
  4137a5:	cmp    BYTE PTR [rsi],dil
  4137a8:	cmp    al,0x3c
  4137aa:	cmp    BYTE PTR [rip+0xe0691e],dh        # 0x121a0ce
  4137b0:	in     al,dx
	...
  4137b9:	add    BYTE PTR [rax],al
  4137bb:	div    edi
  4137bd:	xchg   edx,eax
  4137be:	(bad)  
  4137bf:	ss ss cmp al,0x34
  4137c3:	xor    DWORD PTR ds:[rsi],ecx
  4137c6:	and    ebx,edx
  4137c8:	stc    
  4137c9:	pushf  
  4137ca:	es sbb al,0x98
  4137cd:	stc    
  4137ce:	rex.WRXB or BYTE PTR [r10],r15b
  4137d1:	cmp    al,0x3c
  4137d3:	cmp    dil,BYTE PTR [rdx]
  4137d6:	cmp    al,0x3c
  4137d8:	cmp    eax,0xd363c3e
  4137dd:	(bad)  
  4137de:	call   0x13038da
	...
  4137eb:	xchg   esi,eax
  4137ec:	cld    
  4137ed:	pop    rdx
  4137ee:	or     edi,DWORD PTR [rdx]
  4137f0:	xor    eax,0x313c3636
  4137f5:	cmp    ah,BYTE PTR [rcx+0x1d1a72f6]
  4137fb:	or     edx,DWORD PTR [rcx-0x15]
  4137fe:	mov    WORD PTR [rdx],cs
  413800:	rex.X cmp eax,0x40363e3c
  413806:	cmp    al,0x3d
  413809:	(bad)  
  41380a:	ds ss rex.RB sar r12b,cl
  41380f:	(bad)  
  413810:	rcl    al,1
	...
  41381a:	std    
  41381b:	(bad)  
  41381c:	fcomp  DWORD PTR [rbx]
  41381e:	ss cmp BYTE PTR ss:[rsi],bh
  413822:	cmp    al,0x36
  413824:	(bad)  
  413825:	imul   ebp,ebx,0xffffff9f
  413828:	(bad)  
  413829:	sbb    BYTE PTR [rdx],bh
  41382b:	(bad)  
  41382c:	cmp    edi,DWORD PTR [rcx+riz*8+0x33333546]
  413833:	cmp    bh,BYTE PTR ss:[rdx]
  413836:	rex.X cmp eax,0x283c3f34
  41383c:	cmp    ecx,0xfd8fdfe1
	...
  41384a:	(bad)  
  41384b:	call   0x347d50db
  413850:	xor    dh,BYTE PTR [rdx+rsi*1]
  413853:	ss (bad) 
  413855:	lahf   
  413856:	clc    
  413857:	push   rdx
  413858:	(bad)  
  413859:	ss ss adc BYTE PTR ss:[rcx+rdi*8+0x77],ch
  413860:	add    esi,DWORD PTR [rbx+rsi*1]
  413863:	cmp    al,0x37
  413865:	ss cmp al,0x34
  413868:	xor    al,0x33
  41386a:	ss rex.RB fcom st(2)
  41386e:	addr32 stc 
  413870:	jnp    0x413836
  413872:	test   DWORD PTR [rax],0x0
  413878:	add    BYTE PTR [rax],al
  41387a:	xchg   edi,eax
  41387b:	clc    
  41387c:	pop    rsp
  41387d:	(bad)  
  41387e:	xor    dh,BYTE PTR ss:[rsp+rsi*1]
  413882:	ss ss rex.R (bad) 
  413886:	mov    edx,0x36363517
  41388b:	cmp    cl,BYTE PTR [rsi]
  41388d:	rex.R fsub DWORD PTR [rdi+0x3c3d3c13]
  413894:	xor    eax,0x3d3d3c3c
  413899:	sub    BYTE PTR ds:[rdx-0x7],ch
  41389d:	outs   dx,BYTE PTR ds:[rsi]
  41389e:	and    edi,ecx
  4138a0:	lea    edx,[rax+rdi*8+0x0]
  4138a4:	add    BYTE PTR [rax],al
  4138a6:	add    BYTE PTR [rax],al
  4138a8:	add    BYTE PTR [rax],al
  4138aa:	retf   
  4138ab:	fadd   DWORD PTR [rdx+rdi*1+0x3c]
  4138af:	cmp    al,0x34
  4138b1:	xor    al,0x32
  4138b3:	rex.RB fsub DWORD PTR ss:[r15+0x36363a11]
  4138bb:	sub    ecx,DWORD PTR ss:[rdi]
  4138be:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
  4138bf:	ret    0x3619
  4138c2:	cmp    eax,0x3d3d353e
  4138c7:	(bad)  
  4138c8:	cmp    al,0x35
  4138ca:	(bad)  
  4138cb:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
  4138cc:	mov    esp,0xa1ea231d
  4138d1:	sbb    dh,BYTE PTR [rsp+rdi*8+0x0]
  4138d8:	add    BYTE PTR [rax],al
  4138da:	jrcxz  0x41387d
  4138dc:	sbb    BYTE PTR [rdx],bh
  4138de:	cmp    BYTE PTR [rdx],dh
  4138e0:	xor    dh,BYTE PTR [rsp+rdi*1]
  4138e3:	ss cmp eax,ebx
  4138e6:	mov    bl,0x11
  4138e8:	xor    eax,0x3a403136
  4138ed:	(bad)  
  4138ef:	fild   DWORD PTR [rsi+0x29]
  4138f2:	cmp    eax,0x3d3d383d
  4138f7:	cmp    al,0x3a
  4138f9:	(bad)  
  4138fa:	push   rdx
  4138fb:	fisubr WORD PTR [rbx+0xf]
  4138fe:	and    eax,0x5e0f9df9
  413903:	jmp    0x413908
  413908:	add    BYTE PTR [rax],al
  41390a:	jmp    0x3c774781
  41390f:	xor    dh,BYTE PTR [rdx]
  413911:	xor    bh,BYTE PTR [rsi+rsi*1]
  413914:	cmp    al,al
  413916:	rcr    BYTE PTR [rsi],cl
  413918:	xor    eax,0x3a363c32
  41391d:	sbb    BYTE PTR [rbx+rbx*8+0x21],bl
  413921:	sub    al,0x40
  413923:	cmp    al,0x3c
  413925:	cmp    eax,0xd3a403c
  41392a:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
  41392b:	ret    0xd44
  41392e:	rex.WRB neg BYTE PTR [r8+0xb31b0f]
  413935:	add    BYTE PTR [rax],al
  413937:	add    BYTE PTR [rax],al
  413939:	in     eax,dx
  41393a:	call   0x327d618f
  41393f:	xor    dh,BYTE PTR [rdx]
  413941:	xor    al,0x3c
  413943:	xor    eax,0x44dea81e
  413948:	cs (bad) 
  41394a:	ds cmp al,0x36
  41394d:	adc    BYTE PTR [rbp-0x24],dl
  413950:	rex.WXB sub rax,QWORD PTR [r9+0x3d]
  413954:	xor    al,0x32
  413956:	cmp    bl,BYTE PTR ss:[rip+0xea5e721]        # 0xee7207e
  41395d:	(bad)  
  41395e:	(bad)  
  41395f:	jmp    0x4139ce
  413961:	sub    ebx,DWORD PTR [rbx]
  413963:	jb     0x413961
  413965:	add    BYTE PTR [rax],al
  413967:	add    BYTE PTR [rax],al
  413969:	in     eax,dx
  41396a:	mov    dh,0x18
  41396c:	xor    bh,BYTE PTR ss:[rsi]
  41396f:	xor    dh,BYTE PTR [rdx]
  413971:	xor    al,0x3e
  413973:	ss (bad) 
  413975:	lahf   
  413976:	out    0x47,eax
  413978:	xor    bh,BYTE PTR ss:[rip+0x5c2a3a3c]        # 0x5c6b73bb
  41397f:	fsub   DWORD PTR [rip+0x3c3c402b]        # 0x3c7d79b0
  413985:	ds (bad) 
  413987:	(bad)  
  413988:	or     bl,BYTE PTR [rax+0x282859f6]
  41398e:	jo     0x41397b
  413990:	pop    rcx
  413991:	sub    edi,DWORD PTR [rdx]
  413993:	rex.RX mov ecx,0x0
  413999:	std    
  41399a:	(bad)  
  41399b:	adc    BYTE PTR [rdx+rsi*1],bh
  41399e:	cmp    al,0x3c
  4139a0:	cmp    al,0x34
  4139a2:	xor    DWORD PTR [rsi],esi
  4139a4:	(bad)  
  4139a5:	movabs al,ds:0xb2f3636362b45e5
  4139ae:	jno    0x41398b
  4139b0:	rex.RB
  4139b1:	cmp    bh,BYTE PTR ss:[rdx]
  4139b4:	cmp    bh,BYTE PTR [rsi]
  4139b6:	rex.X xor eax,0x19bfc11e
  4139bc:	cmp    BYTE PTR [rax],ch
  4139be:	je     0x4139b6
  4139c0:	push   rdi
  4139c1:	adc    ebp,DWORD PTR [rsi]
  4139c3:	add    edi,DWORD PTR [rsp+rdi*8+0x0]
  4139c7:	add    BYTE PTR [rax],al
  4139c9:	out    dx,al
  4139ca:	data16 sub bh,BYTE PTR [rcx+rsi*1]
  4139ce:	cmp    al,0x3c
  4139d0:	cmp    al,0x33
  4139d2:	xor    dh,BYTE PTR [rsi]
  4139d4:	(bad)  
  4139d5:	test   al,0xe5
  4139d7:	sbb    BYTE PTR [rax],r13b
  4139da:	sub    BYTE PTR [rip+0xffffffffc284043a],dh        # 0xffffffffc2c53e1a
  4139e0:	rex.X
  4139e1:	cmp    al,BYTE PTR ss:[rax+0x3a]
  4139e5:	cmp    BYTE PTR ds:[rsi],cl
  4139e8:	rex.RXB out 0xa5,eax
  4139eb:	or     dl,BYTE PTR [rsi]
  4139ed:	sub    BYTE PTR [rcx-0xa],dh
  4139f0:	push   0x2e
  4139f2:	xor    BYTE PTR [rax],ch
  4139f4:	rex.WXB
  4139f5:	lock add BYTE PTR [rax],al
  4139f8:	add    bh,bl
  4139fa:	rex.WRX sub BYTE PTR [rax+0x36],r8b
  4139fe:	cmp    al,0x3c
  413a00:	ds xor al,0x31
  413a03:	xor    eax,0x1de5a635
  413a08:	(bad)  
  413a09:	(bad)  
  413a0a:	mov    r8d,eax
  413a0d:	pop    rdx
  413a0e:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
  413a0f:	shl    DWORD PTR [rip+0x40403c36],0x32        # 0x4081764c
  413a16:	cmp    al,0x3a
  413a18:	push   rdi
  413a19:	test   BYTE PTR [rbp+0x5a144d09],0xf9
  413a20:	jbe    0x413a50
  413a22:	xor    dh,BYTE PTR [rcx]
  413a24:	sbb    BYTE PTR [rbp-0x2925ff12],dh
  413a2a:	rex.R sub al,0x3c
  413a2d:	xor    BYTE PTR [rax+0x3e],al
  413a30:	cmp    al,0x32
  413a32:	xor    dh,BYTE PTR [rsi]
  413a34:	cmp    dh,BYTE PTR [rbx+0x42185f9]
  413a3a:	rex.WRB movabs r11,0x3d3c3c28a5dc87e1
  413a44:	xor    dil,BYTE PTR [rsi*1+0x67a7d845]
  413a4c:	fidivr WORD PTR [rax+0x23]
  413a4f:	stc    
  413a50:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
  413a51:	(bad)  
  413a52:	xor    bh,BYTE PTR [rax+rdx*1]
  413a55:	mov    al,bh
  413a57:	add    dl,ah
  413a59:	shl    BYTE PTR [rax],cl
  413a5b:	sub    eax,0x3c3c303c
  413a60:	xor    al,0x34
  413a62:	xor    dh,BYTE PTR [rip+0xfffffffff6f9ac16]        # 0xfffffffff73ae67e
  413a68:	ret    0x628d
  413a6b:	imul   edi,DWORD PTR [rbx-0x53],0x3c2770f6
  413a72:	cmp    al,0x3c
  413a74:	cmp    eax,0x16353e3c
  413a79:	mov    edi,ecx
  413a7b:	xchg   edx,eax
  413a7c:	mov    fs,WORD PTR [rdx+0x25]
  413a7f:	cmc    
  413a80:	stos   DWORD PTR es:[rdi],eax
  413a81:	(bad)  
  413a82:	cmp    eax,0xf86b2a3d
  413a87:	add    bh,dh
  413a89:	movabs eax,ds:0x343c3c3c303e2d10
  413a92:	xor    dh,BYTE PTR [rsi]
  413a94:	sub    BYTE PTR [rdi-0x18427f19],bl
  413a9a:	div    dh
  413a9c:	stc    
  413a9d:	neg    BYTE PTR [rax+0x3c3c3135]
  413aa3:	cmp    al,0x3c
  413aa5:	xor    DWORD PTR ss:[rsi+rsi*1],edi
  413aa9:	rex.RB lods al,BYTE PTR ds:[rsi]
  413aab:	stc    
  413aac:	fcmovnu st,st(3)
  413aae:	(bad)  
  413ab0:	stos   DWORD PTR es:[rdi],eax
  413ab1:	cmp    al,0x3c
  413ab3:	cmp    eax,0xdd453c
  413ab8:	test   DWORD PTR [rbp+0x343e402a],0x34323e3e
  413ac2:	xor    al,0x36
  413ac4:	(bad)  
  413ac5:	mov    edi,eax
  413ac7:	rex.WXB (bad) 
  413ac9:	push   rax
  413aca:	jne    0x413a4d
  413acc:	jbe    0x413b1f
  413ace:	(bad)  
  413acf:	sub    BYTE PTR [rsi+rsi*1],bh
  413ad2:	cmp    BYTE PTR [rax],bh
  413ad4:	xor    eax,0x34363c36
  413ad9:	cs (bad) 
  413adb:	jo     0x413a83
  413add:	lods   eax,DWORD PTR ds:[rsi]
  413ade:	sar    bh,cl
  413ae0:	lahf   
  413ae1:	xor    DWORD PTR [rdx],esi
  413ae3:	sub    DWORD PTR ss:[rsi],esi
  413ae6:	mov    ebx,0x2a8afa00
  413aeb:	rex.B
  413aec:	xor    DWORD PTR ds:[rax],edi
  413aef:	cmp    al,0x3e
  413af1:	xor    al,0x38
  413af3:	sub    BYTE PTR ss:[rax+rdi*8+0x72],dh
  413af8:	or     esi,DWORD PTR [rip+0x28282828]        # 0x28696326
  413afe:	sub    al,0x3a
  413b00:	cmp    al,0x3e
  413b02:	cmp    BYTE PTR ss:[rdi],dh
  413b05:	ss ss ds xor al,0x32
  413b0a:	ss (bad) 
  413b0c:	sbb    BYTE PTR [rax],cl
  413b0e:	jle    0x413b08
  413b10:	imul   ebp,DWORD PTR [rax],0x32
  413b13:	xor    DWORD PTR ss:[rax],ebp
  413b16:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
  413b17:	push   rsp
  413b19:	lahf   
  413b1a:	(bad)  
  413b1b:	cmp    esi,DWORD PTR [rbx]
  413b1d:	xor    edi,DWORD PTR [rax]
  413b1f:	cmp    BYTE PTR [rsi],dh
  413b21:	xor    eax,0x582e3736
  413b26:	out    0x9b,eax
  413b28:	add    esi,DWORD PTR [rip+0x3e2f3230]        # 0x3e706d5e
  413b2e:	cmp    al,0x42
  413b31:	ss cmp al,0x38
  413b34:	cmp    al,0x3a
  413b36:	ss cmp eax,0x3c32333d
  413b3c:	or     eax,0x3abfdc48
  413b41:	ss ss rex
  413b44:	sub    BYTE PTR ss:[rcx+0x1eb8e3f7],ah
  413b4b:	xor    eax,0x3a3e333c
  413b50:	ss cmp BYTE PTR ss:[rsi],dh
  413b54:	xor    DWORD PTR [rdx],edi
  413b56:	mov    bh,0xdb
  413b58:	rex.R xor eax,0x32323131
  413b5e:	cmp    BYTE PTR [rdx],bh
  413b60:	cmp    al,0x3c
  413b62:	ss cmp al,0x3a
  413b65:	ds cmp al,0x3d
  413b68:	cmp    eax,0x1d37403c
  413b6d:	lods   eax,DWORD PTR ds:[rsi]
  413b6e:	out    0x59,eax
  413b70:	sub    DWORD PTR [rsp+rdi*1],edi
  413b73:	ds ss (bad) 
  413b76:	mov    edi,esp
  413b78:	iret   
  413b79:	in     eax,0x4b
  413b7b:	(bad)  
  413b7c:	cmp    al,0x36
  413b7e:	cmp    al,0x3c
  413b80:	ss cmp al,0x36
  413b83:	cmp    al,0x3c
  413b85:	adc    DWORD PTR [rsi+rsi*8+0x76],esi
  413b89:	add    eax,0x3c333c35
  413b8e:	ss ss ss rex.X
  413b92:	ss cmp al,0x36
  413b95:	xor    al,0x33
  413b97:	cmp    al,0x3c
  413b99:	cmp    bh,BYTE PTR [rdx]
  413b9b:	or     eax,0xe83fa84
  413ba0:	ss ss cmp al,0x3c
  413ba4:	adc    DWORD PTR ss:[rcx+0x71fa00fd],esp
  413bab:	or     edi,DWORD PTR [rdx]
  413bad:	ss cmp al,0x3c
  413bb0:	cmp    al,0x3c
  413bb3:	cmp    al,0x40
  413bb5:	(bad)  
  413bb6:	and    bl,dh
  413bb8:	mov    esi,0x313a0e17
  413bbd:	cmp    al,0x36
  413bbf:	cmp    al,0x36
  413bc1:	ss ss ss cmp al,0x32
  413bc6:	(bad)  
  413bc7:	cmp    bh,BYTE PTR ds:[rdx]
  413bca:	or     dl,BYTE PTR [rdx-0x7]
  413bcd:	mov    bl,0x11
  413bcf:	sbb    BYTE PTR [rsi],dh
  413bd1:	ds cmp al,0x29
  413bd4:	cmp    cl,BYTE PTR [rcx]
  413bd6:	sar    ch,cl
  413bd8:	add    cl,bl
  413bda:	(bad)  
  413bdb:	and    BYTE PTR [rip+0x363c363a],bl        # 0x367d721b
  413be1:	cmp    al,0x40
  413be4:	ds xor eax,0x82fa7414
  413bea:	or     BYTE PTR [rsi],cl
  413bec:	cmp    dh,BYTE PTR [rsi]
  413bee:	cmp    esi,DWORD PTR ss:[rsi]
  413bf1:	ss ss ss ss rex.XB cmp al,0x3a
  413bf8:	(bad)  
  413bf9:	add    al,0x46
  413bfb:	sar    DWORD PTR [rdi+0x3a351e49],cl
  413c01:	xor    eax,0x7b083a36
  413c06:	clc    
  413c07:	add    BYTE PTR [rax],al
  413c09:	in     al,dx
  413c0a:	cld    
  413c0b:	mov    BYTE PTR [rsp+rdx*1],al
  413c0e:	ss ss cmp BYTE PTR ss:[rax],bh
  413c13:	cmp    BYTE PTR ss:[rdx],bh
  413c16:	sbb    BYTE PTR [rsi],bl
  413c18:	mov    edx,0x1e0565e8
  413c1d:	xor    eax,0x36383638
  413c22:	xor    eax,0x3a3a3636
  413c27:	(bad)  
  413c28:	adc    al,0x59
  413c2a:	rcr    esi,0x52
  413c2d:	sub    BYTE PTR [rbx],dl
  413c2f:	cmp    esi,DWORD PTR [rip+0x6e0f183b]        # 0x6e505470
  413c35:	cmc    
  413c36:	add    BYTE PTR [rax],al
  413c38:	add    BYTE PTR [rax],al
  413c3a:	xabort 0x78
  413c3d:	(bad)  
  413c3e:	(bad)  
  413c3f:	cmp    BYTE PTR [rax],bh
  413c41:	ss cmp BYTE PTR ss:[rsi],dh
  413c45:	cmp    cl,BYTE PTR ss:[rax]
  413c48:	push   rsp
  413c49:	in     al,0xdc
  413c4b:	(bad)  
  413c4c:	adc    al,0x13
  413c4e:	cmp    BYTE PTR ss:[rsi],dh
  413c51:	ss cs cs sbb BYTE PTR ss:[rdi],cl
  413c57:	rex.RX je 0x413c38
  413c5a:	jmp    0x413cc9
  413c5c:	(bad)  
  413c5d:	xor    BYTE PTR [rsi+rbp*1],bh
  413c60:	ss (bad) 
  413c62:	(bad)  
  413c63:	jge    0x413c4d
  413c65:	add    BYTE PTR [rax],al
  413c67:	add    BYTE PTR [rax],al
  413c69:	add    bh,bh
  413c6b:	(bad)  
  413c6c:	cli    
  413c6d:	stos   DWORD PTR es:[rdi],eax
  413c6e:	push   0x44
  413c70:	or     eax,0x140d140d
  413c75:	sbb    ecx,DWORD PTR [rax+0x5e]
  413c78:	(bad)  
  413c79:	fld    DWORD PTR [rax]
  413c7b:	stc    
  413c7c:	mov    ss,WORD PTR [rdi+0x35]
  413c7f:	(bad)  
  413c80:	(bad)  
  413c81:	add    edx,DWORD PTR [rsi]
  413c83:	(bad)  
  413c84:	xor    eax,0xf6d3804d
  413c89:	mov    esi,0x1335144d
  413c8e:	sub    BYTE PTR [rbx],dl
  413c90:	(bad)  
  413c91:	pop    rbx
  413c92:	mov    al,0xf8
	...
  413c9c:	add    ch,bh
  413c9e:	jmp    0x413c7c
  413ca0:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
  413ca1:	pushf  
  413ca2:	xchg   DWORD PTR [rdi-0x72e4a5f],eax
  413ca8:	push   rcx
  413caa:	add    BYTE PTR [rax],al
  413cac:	cld    
  413cad:	clc    
  413cae:	mov    eax,0x807c7c98
  413cb3:	lahf   
  413cb4:	mov    bl,0xe4
  413cb6:	stc    
  413cb7:	cli    
  413cb8:	mov    cs,WORD PTR [rax+0x1c]
  413cbb:	(bad)  
  413cbc:	(bad)  
  413cbd:	rex.RB
  413cbe:	rex.WRXB jl 0x413c73
  413cc1:	idiv   edi
	...
  413ccb:	add    BYTE PTR [rax],al
  413ccd:	add    ch,bh
  413ccf:	(bad)  
  413cd0:	icebp  
  413cd1:	(bad)  
  413cd2:	(bad)  
  413cd3:	(bad)  
  413cd4:	cld    
	...
  413cdd:	shl    edx,1
  413cdf:	cld    
  413ce0:	cld    
  413ce1:	(bad)  
  413ce2:	(bad)  
  413ce3:	inc    DWORD PTR [rax]
  413ce5:	add    BYTE PTR [rax],al
  413ce7:	add    al,dh
  413ce9:	retf   
  413cea:	rcl    dl,cl
  413cec:	fsub   st(0),st
  413cee:	cli    
  413cef:	cld    
  413cf0:	test   DWORD PTR [rax],0x0
	...
  413d1a:	add    bl,cl
  413d1c:	mov    bl,0xf1
	...
  413d27:	add    bh,bh
  413d29:	(bad)  
  413d2a:	inc    DWORD PTR [rax+0xff3f]
  413d30:	(bad)  
  413d31:	(bad)  
  413d32:	inc    DWORD PTR [rax]
  413d34:	(bad)  
  413d35:	inc    DWORD PTR [rax]
  413d37:	add    bh,bh
  413d39:	(bad)  
  413d3a:	inc    DWORD PTR [rax]
  413d3c:	ud0    eax,DWORD PTR [rax]
  413d3f:	add    bh,bh
  413d41:	(bad)  
  413d42:	inc    DWORD PTR [rax]
  413d44:	ud0    eax,DWORD PTR [rax]
  413d47:	add    bh,bh
  413d49:	(bad)  
  413d4a:	inc    DWORD PTR [rax]
  413d4c:	(bad)  
  413d4d:	inc    DWORD PTR [rax]
  413d4f:	add    bh,bh
  413d51:	(bad)  
  413d52:	inc    DWORD PTR [rax]
  413d54:	(bad)  
  413d55:	inc    DWORD PTR [rax]
  413d57:	add    bh,bh
  413d59:	(bad)  
  413d5a:	inc    DWORD PTR [rax]
  413d5c:	(bad)  
  413d5d:	inc    DWORD PTR [rax]
  413d5f:	add    bh,bh
  413d61:	(bad)  
  413d62:	inc    DWORD PTR [rax]
  413d64:	(bad)  
  413d65:	inc    DWORD PTR [rax]
  413d67:	add    bh,bh
  413d69:	(bad)  
  413d6a:	inc    BYTE PTR [rax]
  413d6c:	(bad)  
  413d6d:	inc    DWORD PTR [rax]
  413d6f:	add    bh,bh
  413d71:	(bad)  
  413d72:	inc    BYTE PTR [rax]
  413d74:	(bad)  
  413d75:	inc    DWORD PTR [rax]
  413d77:	add    bh,bh
  413d79:	(bad)  
  413d7a:	inc    BYTE PTR [rax]
  413d7c:	add    edi,edi
  413d7e:	add    BYTE PTR [rax],al
  413d80:	(bad)  
  413d81:	inc    DWORD PTR [rax+rax*1]
  413d84:	add    edi,edi
  413d86:	add    BYTE PTR [rax],al
  413d88:	(bad)  
  413d89:	std    
  413d8a:	add    BYTE PTR [rax],al
  413d8c:	add    edi,edi
  413d8e:	add    BYTE PTR [rax],al
  413d90:	dec    BYTE PTR [rip+0xffffffffff030000]        # 0xffffffffff443d96
  413d96:	add    BYTE PTR [rax],al
  413d98:	inc    BYTE PTR [rax+rax*1]
  413d9b:	add    BYTE PTR [rdi+rbx*1],al
  413d9e:	add    BYTE PTR [rax],al
  413da0:	cld    
  413da1:	(bad)  
  413da2:	add    BYTE PTR [rax],al
  413da4:	add    BYTE PTR [rdi],al
  413da6:	add    BYTE PTR [rax],al
  413da8:	clc    
  413da9:	add    eax,eax
  413dab:	add    BYTE PTR [rax],al
  413dad:	add    eax,DWORD PTR [rax]
  413daf:	add    al,bh
  413db1:	add    eax,esp
  413db3:	add    BYTE PTR [rax],al
  413db5:	(bad)  
  413db6:	add    BYTE PTR [rax],al
  413db8:	lock add BYTE PTR [rax+0x0],ah
  413dbc:	add    DWORD PTR [rdi+0x0],edi
  413dbf:	add    al,ah
  413dc1:	add    BYTE PTR [rax],al
  413dc3:	add    BYTE PTR [rax],al
  413dc5:	mov    edi,0xe00000
  413dca:	add    BYTE PTR [rax],al
  413dcc:	add    BYTE PTR [rdi],bh
  413dce:	add    BYTE PTR [rax],al
  413dd0:	rol    BYTE PTR [rax],0x0
  413dd3:	add    BYTE PTR [rax],al
  413dd5:	(bad)  
  413dd6:	add    BYTE PTR [rax],al
  413dd8:	rol    BYTE PTR [rax],0x0
  413ddb:	add    BYTE PTR [rax],al
  413ddd:	(bad)  
  413dde:	add    BYTE PTR [rax],al
  413de0:	rol    BYTE PTR [rax],0x0
  413de3:	add    BYTE PTR [rax],al
  413de5:	(bad)  
  413de6:	add    BYTE PTR [rax],al
  413de8:	rol    BYTE PTR [rax],0x0
  413deb:	add    BYTE PTR [rax],al
  413ded:	sldt   WORD PTR [rax]
  413df0:	rol    BYTE PTR [rax],0x0
  413df3:	add    BYTE PTR [rax],al
  413df5:	sldt   WORD PTR [rax]
  413df8:	rol    BYTE PTR [rax],0x0
  413dfb:	add    BYTE PTR [rax],al
  413dfd:	sldt   WORD PTR [rax]
  413e00:	add    BYTE PTR [rax],0x0
  413e03:	add    BYTE PTR [rax],al
  413e05:	(bad)  
  413e06:	add    BYTE PTR [rax],al
  413e08:	add    BYTE PTR [rax],0x0
  413e0b:	add    BYTE PTR [rax],al
  413e0d:	(bad)  
  413e0e:	add    BYTE PTR [rax],al
  413e10:	add    BYTE PTR [rax],0x0
  413e13:	add    BYTE PTR [rax],al
  413e15:	add    eax,DWORD PTR [rax]
  413e17:	add    BYTE PTR [rax+0x0],al
  413e1d:	add    eax,DWORD PTR [rax]
  413e1f:	add    BYTE PTR [rax+0x0],al
  413e25:	add    DWORD PTR [rax],eax
  413e27:	add    BYTE PTR [rax],al
  413e29:	add    BYTE PTR [rax],al
  413e2b:	add    BYTE PTR [rax],al
  413e2d:	add    DWORD PTR [rax],eax
  413e2f:	add    BYTE PTR [rax],al
  413e31:	add    BYTE PTR [rax],al
  413e33:	add    BYTE PTR [rax],al
  413e35:	add    DWORD PTR [rax],eax
  413e37:	add    BYTE PTR [rax],al
  413e39:	add    BYTE PTR [rax],al
  413e3b:	add    BYTE PTR [rax],al
  413e3d:	add    DWORD PTR [rax],eax
  413e3f:	add    BYTE PTR [rax],al
  413e41:	add    BYTE PTR [rax],al
  413e43:	add    BYTE PTR [rax],al
  413e45:	add    DWORD PTR [rax],eax
	...
  413e67:	add    BYTE PTR [rax+0x0],al
  413e6d:	add    BYTE PTR [rax],al
  413e6f:	add    BYTE PTR [rax+0x0],al
  413e75:	add    DWORD PTR [rax],eax
  413e77:	add    BYTE PTR [rax+0x0],al
  413e7d:	add    eax,DWORD PTR [rax]
  413e7f:	add    al,al
  413e81:	add    BYTE PTR [rax],al
  413e83:	add    BYTE PTR [rax],al
  413e85:	(bad)  
  413e86:	add    BYTE PTR [rax],al
  413e88:	rol    BYTE PTR [rax],0x20
  413e8b:	add    BYTE PTR [rax],al
  413e8d:	sldt   WORD PTR [rax]
  413e90:	clc    
  413e91:	add    BYTE PTR [rax],dh
  413e93:	add    BYTE PTR [rax],al
  413e95:	(bad)  
  413e96:	add    BYTE PTR [rax],al
  413e98:	cld    
  413e99:	(bad)  
  413e9a:	clc    
  413e9b:	(bad)  
  413e9d:	jg     0x413e9f
  413e9f:	add    bh,bh
  413ea1:	(bad)  
  413ea2:	(bad)  
  413ea3:	jmp    rcx
  413ea5:	inc    DWORD PTR [rax]
  413ea7:	add    BYTE PTR [rax],ch
  413ea9:	add    BYTE PTR [rax],al
  413eab:	add    BYTE PTR [rax],dl
  413ead:	add    BYTE PTR [rax],al
  413eaf:	add    BYTE PTR [rax],ah
  413eb1:	add    BYTE PTR [rax],al
  413eb3:	add    BYTE PTR [rcx],al
  413eb5:	add    BYTE PTR [rax],ah
  413eb7:	add    BYTE PTR [rax],al
  413eb9:	add    BYTE PTR [rax],al
  413ebb:	add    BYTE PTR [rax+0x4],al
	...
  413eee:	add    BYTE PTR [rax],al
  413ef0:	ror    cl,1
  413ef2:	mov    eax,0x486b8ae2
  413ef7:	call   QWORD PTR [rsi-0x2400a684]
  413efd:	rol    ebp,cl
  413eff:	lods   eax,DWORD PTR ds:[rsi]
	...
  413f2c:	(bad)  
  413f2d:	(bad)  
  413f2e:	inc    BYTE PTR [rsi]
  413f30:	movabs ds:0x90ff32638ef87492,eax
  413f39:	xor    di,di
  413f3c:	pushf  
  413f3d:	and    DWORD PTR [rcx-0x1],0xfffffff6
  413f41:	cmc    
  413f42:	hlt    
  413f43:	rex.X add BYTE PTR [rax],al
	...
  413f6a:	add    BYTE PTR [rax],al
  413f6c:	clc    
  413f6d:	clc    
  413f6e:	imul   BYTE PTR [rdi]
  413f70:	movabs ds:0x8bff30658dff6184,al
  413f79:	addr32 (bad) 
  413f7b:	call   FWORD PTR [rcx-0xc00b58e]
  413f81:	repnz in eax,dx
  413f83:	pop    rax
	...
  413fa4:	div    dh
  413fa6:	cmc    
  413fa7:	xor    ch,bh
  413fa9:	out    dx,al
  413faa:	in     al,dx
  413fab:	addr32 out 0xe7,eax
  413fae:	in     al,0x6e
  413fb0:	movabs ds:0x8bff2f6693ff5e81,eax
  413fb9:	addr32 (bad) 
  413fbb:	call   QWORD PTR [rax-0xb00c098]
  413fc1:	out    dx,eax
  413fc2:	(bad)  
  413fc3:	jle    0x413fc5
	...
  413fd5:	add    BYTE PTR [rax],al
  413fd7:	add    bl,dh
  413fd9:	out    dx,al
  413fda:	(bad)  
  413fdb:	pop    rbx
  413fdc:	retf   0xb0be
  413fdf:	mov    bl,0xef
  413fe1:	out    dx,al
  413fe2:	in     eax,dx
  413fe3:	rex.WRX fcmovbe st,st(6)
  413fe6:	(bad)  
  413fe7:	int3   
  413fe8:	stos   BYTE PTR es:[rdi],al
  413fe9:	movabs eax,ds:0x7d9ef8b4c4c8f88c
  413ff2:	pop    rbp
  413ff3:	call   QWORD PTR [rsi+riz*2+0x688bff31]
  413ffa:	dec    DWORD PTR cs:[rdx-0x1500c69d]
  414001:	in     eax,0xdc
  414003:	stos   BYTE PTR es:[rdi],al
  414004:	cld    
  414005:	div    eax
  414007:	push   rcx
  414008:	std    
  414009:	std    
  41400a:	sti    
  41400b:	and    al,BYTE PTR [rax]
  41400d:	add    BYTE PTR [rax],al
  41400f:	add    BYTE PTR [rax],al
  414011:	add    BYTE PTR [rax],al
  414013:	add    ch,dh
  414015:	hlt    
  414016:	repnz rex.W mov dl,0x9e
  41401a:	test   bh,ch
  41401c:	mov    BYTE PTR [rdx+0x32],ah
  41401f:	inc    ebp
  414021:	mov    eax,0xf1f2c0a5
  414026:	out    dx,al
  414027:	(bad)  
  414028:	(bad)  
  41402a:	rcr    ecx,cl
  41402c:	lods   eax,DWORD PTR ds:[rsi]
  41402d:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
  41402e:	mov    edi,edi
  414030:	cwde   
  414031:	jbe    0x414089
  414033:	dec    DWORD PTR [rdi-0x7100cc9a]
  414039:	addr32 (bad) 
  41403b:	dec    DWORD PTR [rax-0x3800cc9e]
  414041:	mov    edx,0x909fffa8
  414046:	jle    0x41403a
  414048:	mov    ebx,0xeec6b0b6
  41404d:	in     al,dx
  41404e:	jmp    0x413f9e
  414053:	or     al,0xd8
  414055:	(bad)  
  414056:	retf   0x86cc
  414059:	fs cmp edi,edi
  41405c:	nop
  41405d:	data16 xor bh,bh
  414060:	mov    ch,BYTE PTR [rsi+0x47]
  414063:	call   rcx
  414065:	enter  0xecb6,0xa9
  414069:	fwait
  41406a:	sub    edi,0xffffffb8
  41406d:	mov    al,0x95
  41406f:	call   QWORD PTR [rax-0x7100ca9d]
  414075:	fs call QWORD PTR ss:[rbx-0x7000cd9c]
  41407d:	gs xor bh,bh
  414080:	mov    ch,0xaa
  414082:	(bad)  
  414083:	jmp    rbx
  414085:	jrcxz  0x414067
  414087:	xchg   edi,eax
	...
  414090:	lock out dx,eax
  414092:	out    dx,eax
  414093:	pop    rax
  414094:	mov    eax,0x90ff8da6
  414099:	gs xor bh,bh
  41409c:	mov    fs,WORD PTR [rbp+0x31]
  41409f:	(bad)  
  4140a0:	mov    ebp,0x89ff8ca9
  4140a5:	ins    DWORD PTR es:[rdi],dx
  4140a6:	rex.RX inc DWORD PTR [rsi-0x3d00c89e]
  4140ad:	mov    ch,0x98
  4140af:	dec    DWORD PTR [rsi-0x7400d09e]
  4140b5:	fs xor edi,edi
  4140b8:	xchg   ebp,eax
  4140b9:	gs xor bh,bh
  4140bc:	(bad)
  4140c0:	(bad)  
  4140c1:	mov    esi,0xc4caffa9
  4140c6:	mov    ecx,0xf4f6f8f8
  4140cb:	xor    al,BYTE PTR [rax]
  4140cd:	add    BYTE PTR [rax],al
  4140cf:	add    ch,dh
  4140d1:	repz out dx,eax
  4140d3:	(bad)  
  4140d4:	pushf  
  4140d5:	sbb    BYTE PTR [rbp-0x1],0x91
  4140d9:	gs (bad) 
  4140db:	dec    DWORD PTR [rdi-0x3b00cf9b]
  4140e1:	mov    al,0x93
  4140e3:	inc    DWORD PTR [rdx+riz*2+0x638bff36]
  4140ea:	xor    al,0xff
  4140ec:	mov    cl,0x9d
  4140ee:	jle    0x4140ef
  4140f0:	mov    esp,DWORD PTR [rdx+rdi*1-0x1]
  4140f4:	xchg   ebx,eax
  4140f5:	fs xor edi,edi
  4140f8:	xchg   ecx,eax
  4140f9:	movsxd esi,DWORD PTR [rdi+rdi*8]
  4140fc:	stos   BYTE PTR es:[rdi],al
  4140fd:	xchg   esi,eax
  4140fe:	outs   dx,BYTE PTR ds:[rsi]
  4140ff:	dec    DWORD PTR [rax-0x4700a88a]
  414105:	stos   BYTE PTR es:[rdi],al
  414106:	xchg   ecx,eax
  414107:	(bad)  
  414108:	fxch   st(7)
  41410a:	shr    DWORD PTR [rdx+0x0],0xeb
  414111:	out    0xdd,al
  414113:	(bad)  
  414114:	mov    DWORD PTR [rbx+0x36],esp
  414117:	call   QWORD PTR [rcx-0x7000d09b]
  41411d:	gs xor bh,bh
  414120:	shr    BYTE PTR [rsp+rcx*4+0x39668aff],0xff
  414128:	mov    fs,WORD PTR [rbx+0x32]
  41412b:	jmp    FWORD PTR [rbp+rdx*4+0x6589ff77]
  414132:	call   QWORD PTR [r8-0x7d00ce9b]
  414139:	movsxd edi,DWORD PTR [rcx]
  41413b:	inc    esp
  41413d:	mov    ch,0x93
  41413f:	dec    DWORD PTR [rbp-0x4b00b78f]
  414145:	movabs eax,ds:0xfefef5698a9dff7c
  41414e:	std    
  41414f:	sbb    al,0xca
  414151:	(bad)  
  414152:	mov    ch,0xcf
  414154:	mov    WORD PTR [rdx+0x33],fs
  414157:	call   QWORD PTR [rdx-0x7100cd9b]
  41415d:	gs (bad) 
  41415f:	inc    esp
  414161:	mov    dl,0x90
  414163:	(bad)  
  414164:	jg     0x4141cf
  414166:	rex.RB jmp FWORD PTR [r11-0x42008a69]
  41416d:	mov    bl,0x94
  41416f:	dec    DWORD PTR [rbx+riz*2+0x6393ff34]
  414176:	xor    al,0xff
  414178:	mov    DWORD PTR [rax+0x3d],ebp
  41417b:	(bad)  
  41417c:	mov    esp,0x92ff97b2
  414181:	test   DWORD PTR [rax-0x1],esp
  414184:	mov    ebp,0x88ff85a9
  414189:	(bad)  
  41418a:	xor    eax,0xe0e9ecff
  41418f:	jle    0x41414e
  414191:	lods   eax,DWORD PTR ds:[rsi]
  414192:	(bad)  
  414193:	call   QWORD PTR [rax-0x6d00ce9a]
  414199:	gs xor bh,bh
  41419c:	(bad)  
  41419d:	data16 xor bh,bh
  4141a0:	shr    DWORD PTR [rdi-0x4f400070],0x92
  4141a7:	inc    esp
  4141a9:	mov    eax,0x9eb3ff9b
  4141ae:	jge    0x4141af
  4141b0:	mov    fs,WORD PTR [rax+rsi*1-0x1]
  4141b4:	(bad)  
  4141b5:	fs xor bh,bh
  4141b8:	mov    esp,DWORD PTR [rdx+rsi*1-0x1]
  4141bc:	mov    edx,0xc7ff86a9
  4141c1:	mov    edi,0xb4c8ffa7
  4141c6:	xchg   edi,eax
  4141c7:	call   QWORD PTR [rax-0x2e00ce9e]
  4141cd:	(bad)
  4141d0:	mov    esi,0x93ff95af
  4141d5:	fs xor bh,bh
  4141d8:	mov    WORD PTR [rbp+0x33],fs
  4141db:	dec    DWORD PTR [rdx-0x5100cd9b]
  4141e1:	xchg   edi,eax
  4141e2:	je     0x4141e3
  4141e4:	cwde   
  4141e5:	jge    0x41423f
  4141e7:	dec    DWORD PTR [rax-0x7200d19f]
  4141ed:	movsxd esi,DWORD PTR [rsi]
  4141ef:	dec    DWORD PTR [rdi-0x7400cc9b]
  4141f5:	gs xor edi,edi
  4141f8:	xchg   esp,eax
  4141f9:	fs xor edi,edi
  4141fc:	lea    esp,[rcx+rsi*1-0x1]
  414200:	movabs eax,ds:0x8dff6188a6ff7590
  414209:	fs xor edi,edi
  41420c:	mov    esi,0xd9e294ae
  414211:	rol    dl,1
  414213:	leave  
  414214:	and    BYTE PTR [rax+0x38],0xff
  414218:	nop
  414219:	movsxd esi,DWORD PTR [rbx]
  41421b:	call   QWORD PTR [rax-0x7800cc9d]
  414221:	imul   edi,DWORD PTR [rdi],0x95b4c0ff
  414227:	inc    DWORD PTR [rbp-0x7200caa0]
  41422d:	fs xor edi,edi
  414230:	mov    WORD PTR [rbx+rsi*1-0x1],fs
  414234:	nop
  414235:	gs xor bh,bh
  414238:	(bad)  
  414239:	gs xor edi,edi
  41423c:	mov    dh,BYTE PTR [rax+0x4b]
  41423f:	(bad)  
  414240:	mov    ebx,0x86ff91ac
  414245:	(bad)  
  414246:	xor    eax,0x356189ff
  41424b:	inc    ebp
  41424d:	mov    ebp,0xf2f4cfad
  414252:	icebp  
  414253:	pop    rax
  414254:	mov    ch,0xa9
  414256:	mov    ?,eax
  414258:	mov    DWORD PTR [rax+0x38],ebp
  41425b:	inc    DWORD PTR [rbx-0x7b00cc9e]
  414261:	(bad)  
  414262:	cmp    edi,edi
  414264:	mov    bl,0xa4
  414266:	xchg   edx,eax
  414267:	sti    
  414268:	scas   al,BYTE PTR es:[rdi]
  414269:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
  41426a:	xchg   esp,ebp
  41426c:	xchg   BYTE PTR [rdi+0x36],ah
  41426f:	inc    DWORD PTR [rbx-0x7a00ce9f]
  414275:	fs cmp bh,bh
  414278:	movabs eax,ds:0x83ff94b7c5ff6b8e
  414281:	fs xor al,0xff
  414284:	test   DWORD PTR [rsi+0x3a],esp
  414287:	(bad)  
  414288:	mov    eax,0xfbe991a6
  41428d:	sti    
  41428e:	clc    
  41428f:	xor    al,BYTE PTR [rax]
  414291:	add    BYTE PTR [rax],al
  414293:	add    dl,bh
  414295:	cli    
  414296:	cli    
  414297:	(bad)  
  414298:	out    dx,al
  414299:	(bad)  
  41429a:	loope  0x41422c
  41429c:	out    0xe1,al
  41429e:	(bad)  [rbp+0x71e5ebee]
  4142a4:	sti    
  4142a5:	stc    
  4142a6:	div    BYTE PTR [rip+0x1cf6f7f8]        # 0x1d383aa4
  4142ac:	jmp    0x414294
  4142ae:	fcom   QWORD PTR [rdx+riz*8-0xe722d24]
  4142b5:	out    dx,eax
  4142b6:	in     al,0x74
  4142b8:	hlt    
  4142b9:	icebp  
  4142ba:	jmp    0xffffffffa7f80324
  4142bf:	fld    st(3)
  4142c1:	mov    ecx,0xe6eae9a8
  4142c6:	fiadd  WORD PTR [rcx+0x13fefefe]
  4142cc:	add    BYTE PTR [rax],al
  4142ce:	add    BYTE PTR [rax],al
  4142d0:	dec    DWORD PTR [rdi]
  4142d2:	add    BYTE PTR [rax],al
  4142d4:	inc    BYTE PTR [rdi]
  4142d6:	add    BYTE PTR [rax],al
  4142d8:	inc    BYTE PTR [rdi]
  4142da:	add    BYTE PTR [rax],al
  4142dc:	clc    
  4142dd:	(bad)  
  4142de:	add    BYTE PTR [rax],al
  4142e0:	rol    BYTE PTR [rcx],0x0
  4142e3:	add    BYTE PTR [rax+0x0],al
  4142e9:	add    eax,DWORD PTR [rax]
  4142eb:	add    BYTE PTR [rax],al
  4142ed:	add    DWORD PTR [rax],eax
  4142ef:	add    BYTE PTR [rax],al
  4142f1:	add    DWORD PTR [rax],eax
	...
  41430b:	add    BYTE PTR [rax+0x28000001],al
  414311:	add    BYTE PTR [rax],al
  414313:	add    BYTE PTR [rax],ah
  414315:	add    BYTE PTR [rax],al
  414317:	add    BYTE PTR [rax+0x0],al
  41431a:	add    BYTE PTR [rax],al
  41431c:	add    DWORD PTR [rax],eax
  41431e:	and    BYTE PTR [rax],al
  414320:	add    BYTE PTR [rax],al
  414322:	add    BYTE PTR [rax],al
  414324:	adc    BYTE PTR [rax],0x0
	...
  414377:	add    al,ch
  414379:	out    0xe0,al
  41437b:	mov    bl,0xdd
  41437d:	xlat   BYTE PTR ds:[rbx]
  41437e:	(bad)  
  41437f:	call   FWORD PTR [rcx-0x7600957e]
  414385:	jno    0x4143db
  414387:	call   FWORD PTR [rdx-0x4400957b]
  41438d:	stos   BYTE PTR es:[rdi],al
  41438e:	xchg   esp,eax
  41438f:	(bad)  
  414390:	jmp    0x414376
  414392:	xlat   BYTE PTR ds:[rbx]
  414393:	mov    ebp,0x3ff6fafb
	...
  4143f8:	(bad)  
  4143fa:	retf   0x9cd9
  4143fd:	mov    esi,DWORD PTR [rax-0x1]
  414400:	jle    0x41445c
  414402:	xor    bh,bh
  414404:	xchg   BYTE PTR [rdi+0x31],bl
  414407:	inc    DWORD PTR [rax+riz*2+0x5f80ff32]
  41440e:	jmp    QWORD PTR ss:[rcx-0x1a048e73]
  414415:	loopne 0x4143ec
  414417:	mov    ebp,0x0
	...
  414478:	ror    al,1
  41447a:	mov    cl,0xe6
  41447c:	jle    0x4144e4
  41447e:	rex.X call QWORD PTR [rcx-0x7000cd9b]
  414485:	fs xor bh,bh
  414488:	xchg   ecx,eax
  414489:	xor    di,di
  41448c:	xchg   ecx,eax
  41448d:	xor    di,di
  414490:	test   BYTE PTR [rbx+rdi*1-0x1],ah
  414494:	mov    esi,0xf6ff9caf
  414499:	cmc    
  41449a:	cmc    
  41449b:	pop    rax
	...
  4144f4:	(bad)  
  4144f5:	std    
  4144f6:	sti    
  4144f7:	sbb    ecx,eax
  4144f9:	mov    bh,0x9c
  4144fb:	(bad)  
  4144fc:	jl     0x414562
  4144fe:	rex call QWORD PTR [rax-0x7700cd9c]
  414505:	(bad)  
  414506:	xor    al,0xff
  414508:	mov    WORD PTR [rbp+0x34],fs
  41450b:	call   QWORD PTR [rax+rbp*2+0x6084ff2f]
  414512:	xor    bh,bh
  414514:	stos   BYTE PTR es:[rdi],al
  414515:	xchg   edi,eax
  414516:	jge    0x414517
  414518:	in     al,0xe1
  41451a:	(bad)  [rdx+0x6ffffff]
	...
  414574:	cmc    
  414575:	hlt    
  414576:	icebp  
  414577:	(bad)  
  414578:	mov    esp,0x85ff8daa
  41457d:	(bad)  
  41457e:	cmp    edi,edi
  414580:	mov    ah,BYTE PTR [rsi+0x31]
  414583:	dec    DWORD PTR [rbp-0x7400ce9d]
  414589:	data16 xor bh,bh
  41458c:	mov    WORD PTR [rax+0x2f],gs
  41458f:	dec    DWORD PTR [rbp-0x5a00cda0]
  414595:	mov    DWORD PTR [rdi-0x1],esp
  414598:	in     al,0xe3
  41459a:	fnstenv [rbx+0x9fdfdfd]
	...
  4145f4:	out    dx,eax
  4145f5:	out    dx,al
  4145f6:	jmp    0xffffffff88e80179
  4145fb:	dec    DWORD PTR [rbx-0x7600c9a1]
  414601:	addr32 (bad) 
  414603:	call   QWORD PTR [rbx-0x7200d09a]
  414609:	addr32 (bad) 
  41460b:	dec    DWORD PTR [rcx-0x6f00d098]
  414611:	(bad)  
  414612:	xor    edi,edi
  414614:	movabs eax,ds:0xfea0e1ecebff5c7f
  41461d:	(bad)  
  41461e:	inc    BYTE PTR [rbx]
	...
  414664:	(bad)  
  414665:	(bad)  
  414666:	dec    DWORD PTR [rdi+rdi*8]
  414669:	(bad)  
  41466a:	call   FWORD PTR [rdi+rdi*8]
  41466d:	(bad)  
  41466e:	dec    DWORD PTR [rcx]
  414670:	(bad)  
  414671:	(bad)  
  414672:	dec    DWORD PTR [rcx]
  414674:	rcl    edx,cl
  414676:	int    0xb3
  414678:	mov    eax,0x8eff86a3
  41467d:	(bad)  
  41467e:	(bad)  
  41467f:	dec    DWORD PTR [rbp-0x6a00d19b]
  414685:	data16 xor bh,bh
  414688:	lea    esp,[rdi+0x2f]
  41468b:	dec    DWORD PTR [rdx-0x6e00d097]
  414691:	(bad)  
  414692:	xor    edi,edi
  414694:	xchg   ebx,eax
  414695:	jae    0x4146e6
  414697:	(bad)  
  414698:	clc    
  414699:	repz call 0xfffffffffd3e442c
  41469f:	sldt   WORD PTR [rax]
	...
  4146de:	add    BYTE PTR [rax],al
  4146e0:	stc    
  4146e1:	stc    
  4146e2:	clc    
  4146e3:	(bad)  
  4146e4:	jrcxz  0x4146c7
  4146e6:	fistp  WORD PTR [rbp-0x39282423]
  4146ec:	loopne 0x4146cd
  4146ee:	fdiv   QWORD PTR [rbx+0x29ffffff]
  4146f4:	retf   
  4146f5:	int3   
  4146f6:	(bad)  
  4146f7:	shl    DWORD PTR [rdi-0x7000795c],cl
  4146fd:	pop    rdi
  4146fe:	(bad)  
  4146ff:	call   QWORD PTR [rdx-0x6900cf99]
  414705:	gs (bad) 
  414707:	dec    DWORD PTR [rbp-0x7600d099]
  41470d:	push   0x5f90ff2e
  414712:	xor    bh,bh
  414714:	mov    WORD PTR [rax+rcx*2-0x1],gs
  414718:	in     al,dx
  414719:	loope  0x4146f1
  41471b:	in     al,dx
  41471c:	icebp  
  41471d:	in     eax,dx
  41471e:	in     eax,dx
  41471f:	outs   dx,BYTE PTR ds:[rsi]
	...
  414748:	sti    
  414749:	cli    
  41474a:	cli    
  41474b:	psubd  mm6,mm6
  41474e:	idiv   BYTE PTR [rsp+rbp*8]
  414751:	call   0xfffffffff031c93b
  414756:	in     eax,dx
  414757:	pop    rbx
  414758:	cli    
  414759:	cli    
  41475a:	stc    
  41475b:	(bad)  
  41475c:	in     al,0xe2
  41475e:	jrcxz  0x4147d7
  414760:	jmp    0x41474a
  414762:	in     al,0x6e
  414764:	int3   
  414765:	(bad)  
  414766:	mov    ebx,0xa2b3b9f8
  41476b:	call   rcx
  41476d:	retf   0xe6b3
  414770:	(bad)  
  414772:	int    0xe6
  414774:	int    0xce
  414776:	(bad)  
  414779:	lahf   
  41477a:	cmp    bh,0x90
  41477d:	pop    rsi
  41477e:	(bad)  
  41477f:	call   QWORD PTR [rsi-0x6800cf9a]
  414785:	gs xor bh,bh
  414788:	lea    esp,[rdi+0x2f]
  41478b:	dec    DWORD PTR [rcx-0x6c00d198]
  414791:	movsxd esi,DWORD PTR [rsi]
  414793:	inc    DWORD PTR [rdi-0x2000bd9a]
  414799:	fmul   st,st(6)
  41479b:	cmc    
  41479c:	icebp  
  41479d:	out    dx,eax
  41479e:	out    dx,al
  41479f:	pop    rax
	...
  4147c8:	icebp  
  4147c9:	out    dx,eax
  4147ca:	in     eax,dx
  4147cb:	rex.W in eax,0xd7
  4147ce:	leave  
  4147cf:	fstp   DWORD PTR [rbp-0x5100947a]
  4147d5:	pushf  
  4147d6:	test   edx,esi
  4147d8:	div    ebp
  4147da:	icebp  
  4147db:	rex.RB call 0xffffffffe8b92fc8
  4147e1:	in     eax,0xde
  4147e3:	int3   
  4147e4:	retf   0xbcc6
  4147e7:	jmp    QWORD PTR [rdx+rbx*4+0x6d7cff88]
  4147ee:	push   rdx
  4147ef:	call   QWORD PTR [rdx-0x1b008f77]
  4147f5:	loope  0x4147c5
  4147f7:	push   QWORD PTR [rcx-0x79007d65]
  4147fd:	pop    rbp
  4147fe:	cmp    edi,edi
  414800:	xchg   esp,eax
  414801:	gs xor edi,edi
  414804:	nop
  414805:	addr32 xor bh,bh
  414808:	mov    ebp,DWORD PTR [rax+0x2e]
  41480b:	dec    DWORD PTR [rax+rbp*2+0x628bff2e]
  414812:	xor    edi,edi
  414814:	test   BYTE PTR [rbx+0x3b],ah
  414817:	jmp    rcx
  414819:	fxch   st(3)
  41481b:	(bad)  
  41481c:	div    bl
  41481e:	(bad)  
  41481f:	test   dh,dh
  414821:	in     al,dx
  414822:	fisubr WORD PTR [rdx-0x621a0c05]
  414828:	std    
  414829:	sti    
  41482a:	hlt    
  41482b:	pop    rsi
  41482c:	sti    
  41482d:	sti    
  41482e:	stc    
  41482f:	sub    al,0x0
	...
  41483d:	add    BYTE PTR [rax],al
  41483f:	add    bh,bh
  414841:	(bad)  
  414842:	dec    DWORD PTR [rcx]
  414844:	icebp  
  414845:	out    dx,eax
  414846:	out    dx,al
  414847:	pop    rbx
  414848:	in     eax,0xdd
  41484a:	ror    ah,cl
  41484c:	cwde   
  41484d:	(bad)  
  41484e:	inc    DWORD PTR gs:[rbp-0x7c00cfa0]
  414855:	(bad)  
  414856:	(bad)  
  414857:	inc    ebx
  414859:	mov    eax,0xf5f8dfa5
  41485e:	out    dx,al
  41485f:	div    rdi
  414862:	neg    DWORD PTR [rdi]
  414864:	fstp   st(4)
  414866:	fst    DWORD PTR [rax-0x132b2221]
  41486c:	ror    dl,cl
  41486e:	mov    ecx,0x47636bff
  414873:	jmp    FWORD PTR [rcx-0x48007a61]
  414879:	sahf   
  41487a:	xchg   bh,bh
  41487c:	(bad)  
  41487d:	pop    rsi
  41487e:	cmp    edi,edi
  414880:	xchg   ecx,eax
  414881:	gs xor al,0xff
  414884:	mov    WORD PTR [rdi+0x30],fs
  414887:	dec    DWORD PTR [rbx-0x6f00d198]
  41488d:	push   0x6289ff2e
  414892:	xor    bh,bh
  414894:	test   BYTE PTR [rcx+0x36],ah
  414897:	(bad)  
  414898:	fxch   st(2)
  41489a:	mov    eax,0x91a1afff
  41489f:	(bad)  
  4148a0:	js     0x414906
  4148a2:	rex.WRX inc QWORD PTR [rsi-0x66009f8b]
  4148a9:	xchg   edx,eax
  4148aa:	xchg   bh,bh
  4148ac:	mov    bl,0xaf
  4148ae:	stos   DWORD PTR es:[rdi],eax
  4148af:	(bad)  
  4148b0:	out    dx,eax
  4148b1:	in     al,dx
  4148b2:	in     al,dx
  4148b3:	je     0x4148af
  4148b5:	clc    
  4148b6:	test   DWORD PTR [rdi],0x0
  4148bc:	add    BYTE PTR [rax],al
  4148be:	add    BYTE PTR [rax],al
  4148c0:	sti    
  4148c1:	sti    
  4148c2:	sti    
  4148c3:	(bad)  
  4148c4:	call   0xffffffffc6e92aaf
  4148c9:	mov    ah,0x9c
  4148cb:	repnz test BYTE PTR [rbp+0x3e],ah
  4148cf:	dec    DWORD PTR [rbp-0x7200d39d]
  4148d5:	gs xor bh,bh
  4148d8:	xchg   DWORD PTR [rsi+0x4f],ebp
  4148db:	call   rdx
  4148dd:	(bad)  
  4148de:	mov    cl,0xd9
  4148e0:	stc    
  4148e1:	div    eax
  4148e3:	(bad)  
  4148e4:	stc    
  4148e5:	stc    
  4148e6:	stc    
  4148e7:	or     al,0xe6
  4148e9:	out    0xe4,al
  4148eb:	jp     0x4148d2
  4148ed:	in     al,0xdd
  4148ef:	inc    edi
  4148f1:	ret    
  4148f2:	lods   al,BYTE PTR ds:[rsi]
  4148f3:	(bad)  
  4148f4:	fcom   st(0)
  4148f6:	mov    ch,0xff
  4148f8:	sahf   
  4148f9:	jg     0x41495b
  4148fb:	inc    DWORD PTR [rdi-0x6e00c7a1]
  414901:	gs xor al,0xff
  414904:	mov    WORD PTR [rsi+0x32],fs
  414907:	dec    DWORD PTR [rbp-0x6e00cf9a]
  41490d:	dec    DWORD PTR cs:[esi-0x7c00cd9b]
  414915:	pop    rdi
  414916:	xor    edi,edi
  414918:	(bad)
  41491b:	call   rax
  41491d:	enter  0xffb6,0xac
  414921:	movabs al,ds:0xcfd4ccbac8d0ff8e
  41492a:	enter  0xce8d,0xc9
  41492e:	(bad)  
  41492f:	(bad)  
  414930:	jrcxz  0x414913
  414932:	fnstsw WORD PTR [rbx-0x13]
  414935:	jmp    0x417920
  41493a:	add    BYTE PTR [rax],al
  41493c:	(bad)  
  41493d:	(bad)  
  41493e:	inc    DWORD PTR [rsi]
  414940:	in     eax,dx
  414941:	in     al,dx
  414942:	(bad)  
  414943:	xchg   edi,ebx
  414945:	(bad)  
  414947:	in     al,dx
  414948:	mov    ch,BYTE PTR [rbp+rax*2-0x1]
  41494c:	mov    DWORD PTR [rsp+rsi*1-0x1],esp
  414950:	xchg   edx,eax
  414951:	sub    ax,0x92ff
  414955:	addr32 (bad) 
  414957:	inc    DWORD PTR [rdx+riz*2+0x687cff35]
  41495e:	rex.WB jmp r13
  414961:	fmul   st(1),st
  414963:	clc    
  414964:	jrcxz  0x414945
  414966:	(bad)  
  414967:	mov    edx,0xc0b6c2c8
  41496c:	(bad)  
  41496d:	int3   
  41496e:	mov    ebx,0xcce2e4ff
  414973:	jmp    QWORD PTR [rcx-0x7700886c]
  414979:	(bad)  
  41497a:	(bad)  
  41497b:	call   QWORD PTR [rcx-0x7000c99d]
  414981:	fs xor al,0xff
  414984:	lea    esp,[rsi+rsi*1-0x1]
  414988:	nop
  414989:	gs xor edi,edi
  41498c:	xchg   esp,eax
  41498d:	gs xor bh,bh
  414990:	xchg   ecx,eax
  414991:	gs xor bh,bh
  414994:	mov    DWORD PTR [rbx+0x33],esp
  414997:	inc    DWORD PTR [rcx-0x2e00af91]
  41499d:	retf   0xffb5
  4149a0:	repnz icebp 
  4149a2:	in     eax,dx
  4149a3:	pop    rsi
  4149a4:	jmp    0x9a3092
	...
  4149b9:	add    BYTE PTR [rax],al
  4149bb:	add    bh,bh
  4149bd:	(bad)  
  4149be:	jmp    FWORD PTR [rcx+rbx*8]
  4149c1:	(bad)  
  4149c2:	rcl    bl,1
  4149c4:	mov    edx,0x7dec9eb0
  4149c9:	pop    rbp
  4149ca:	xor    al,0xff
  4149cc:	mov    BYTE PTR [rbp+rsi*1-0x1],ah
  4149d0:	mov    fs,WORD PTR [rcx+rsi*1-0x1]
  4149d4:	nop
  4149d5:	addr32 xor edi,edi
  4149d8:	mov    BYTE PTR [rdx+0x31],ah
  4149db:	jmp    QWORD PTR [rcx-0x1b009474]
  4149e1:	fcmovnb st,st(4)
  4149e3:	call   FWORD PTR [rax+0x74ff758a]
  4149e9:	(bad)  
  4149ea:	rex.RX call QWORD PTR [rbp-0x2000a884]
  4149f1:	fdivr  QWORD PTR [rdi+0x52707eff]
  4149f7:	call   QWORD PTR [rdx-0x6a00c99b]
  4149fd:	fs xor edi,edi
  414a00:	(bad)  
  414a01:	fs xor al,0xff
  414a04:	mov    fs,WORD PTR [rdx+0x38]
  414a07:	call   QWORD PTR [rbx-0x6900ca9d]
  414a0d:	fs xor bh,bh
  414a10:	xchg   esi,eax
  414a11:	push   0x648bff32
  414a16:	xor    bh,bh
  414a18:	cdq    
  414a19:	xchg   DWORD PTR [rbx-0x1],esp
  414a1c:	jmp    0xffffffffdb411e07
  414a21:	(bad)  
  414a23:	(bad)  
  414a24:	fcomp  st(0)
  414a26:	fxch   st(7)
	...
  414a38:	(bad)  
  414a39:	(bad)  
  414a3a:	inc    DWORD PTR [rsi]
  414a3c:	in     eax,dx
  414a3d:	in     al,dx
  414a3e:	in     al,dx
  414a3f:	jle    0x414a20
  414a41:	rol    ebp,cl
  414a43:	call   FWORD PTR [rbx-0x7400987c]
  414a49:	fs xor bh,bh
  414a4c:	(bad)  
  414a4d:	gs xor bh,bh
  414a50:	xchg   edx,eax
  414a51:	addr32 xor edi,edi
  414a54:	mov    esp,DWORD PTR [rbx+rsi*1-0x1]
  414a58:	mov    ?,WORD PTR [rcx+0x4a]
  414a5b:	jmp    rax
  414a5d:	(bad)  
  414a5e:	mov    ebp,0x6e8ea3ff
  414a63:	(bad)  
  414a64:	jle    0x414ac5
  414a66:	(bad)  
  414a67:	inc    DWORD PTR [rbp-0x7a00c79d]
  414a6d:	movsxd edi,DWORD PTR [rdx]
  414a6f:	(bad)  
  414a70:	fcmove st,st(3)
  414a72:	mov    al,0xff
  414a74:	scas   al,BYTE PTR es:[rdi]
  414a75:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
  414a76:	cmp    edi,0xffffff86
  414a79:	(bad)  
  414a7a:	sub    eax,0x2f6499ff
  414a7f:	dec    DWORD PTR [rsp+riz*2+0x6489ff32]
  414a86:	call   QWORD PTR ss:[rdx-0x6800cd9b]
  414a8d:	call   WORD PTR cs:[rsi+riz*2+0x6188ff32]
  414a96:	ss (bad) 
  414a98:	fcmove st,st(0)
  414a9a:	mov    al,0xff
  414a9c:	(bad)  
  414a9d:	rol    al,cl
  414a9f:	call   rcx
  414aa1:	rol    esi,1
  414aa3:	call   rsp
  414aa5:	int    0xc8
  414aa7:	out    0xef,al
  414aa9:	in     eax,dx
  414aaa:	in     al,dx
  414aab:	(bad)  
	...
  414ab8:	(bad)  
  414ab9:	(bad)  
  414aba:	call   FWORD PTR [rcx]
  414abc:	(bad)  
  414abd:	(bad)  
  414abe:	rol    bl,cl
  414ac0:	(bad)  
  414ac2:	mov    esi,0x4a6d88ff
  414ac7:	call   QWORD PTR [rcx-0x6b00cf9b]
  414acd:	call   WORD PTR cs:[rdx-0x7500d19a]
  414ad5:	movsxd esi,DWORD PTR [rbx]
  414ad7:	jmp    QWORD PTR [rcx-0x1c009a79]
  414add:	fadd   st,st(3)
  414adf:	(bad)  
  414ae0:	jle    0x414b48
  414ae2:	rex.XB inc DWORD PTR [r15-0x7400cd9e]
  414ae9:	gs xor eax,0x365c80ff
  414aef:	push   QWORD PTR [rax-0x2d007e66]
  414af5:	retf   0xffab
  414af8:	and    DWORD PTR [rcx+0x2e],0x306399ff
  414aff:	dec    DWORD PTR [rbp+riz*2+0x648bff32]
  414b06:	xor    al,0xff
  414b08:	xchg   esp,eax
  414b09:	gs xor edi,edi
  414b0c:	xchg   esi,eax
  414b0d:	data16 (bad) 
  414b0f:	dec    DWORD PTR [rsi-0x6c00cd9d]
  414b15:	je     0x414b65
  414b17:	jmp    rdx
  414b19:	xlat   BYTE PTR ds:[rbx]
  414b1a:	ret    
  414b1b:	dec    DWORD PTR [rdx-0x23008c7a]
  414b21:	fmul   st(3),st
  414b23:	jmp    QWORD PTR [rsi-0x8007368]
  414b29:	icebp  
  414b2a:	jmp    0x414ab0
  414b2c:	cld    
  414b2d:	cld    
  414b2e:	sti    
  414b2f:	(bad)  
	...
  414b38:	(bad)  
  414b39:	(bad)  
  414b3a:	call   QWORD PTR [rdx]
  414b3c:	jmp    0xffffffffc3fe2b26
  414b41:	mov    al,0x96
  414b43:	inc    DWORD PTR [rbx-0x6e00c49d]
  414b49:	xor    di,di
  414b4c:	xchg   ebx,eax
  414b4d:	call   WORD PTR cs:[rbx-0x7500d19a]
  414b55:	movsxd esi,DWORD PTR [rdx]
  414b57:	jmp    FWORD PTR [rbx-0x2300916f]
  414b5d:	(bad)  
  414b5e:	mov    bh,0xff
  414b60:	jp     0x414bc1
  414b62:	cmp    bh,bh
  414b64:	mov    WORD PTR [rbp+0x34],fs
  414b67:	dec    DWORD PTR [rbx+riz*2+0x6185ff31]
  414b6e:	(bad)  
  414b6f:	dec    DWORD PTR [rdi-0x2400a78c]
  414b75:	shl    DWORD PTR [rax+0x396583ff],1
  414b7b:	call   QWORD PTR [rsi-0x6f00cb9d]
  414b81:	gs xor bh,bh
  414b84:	xchg   ebx,eax
  414b85:	movsxd esi,DWORD PTR [rax]
  414b87:	call   FWORD PTR [rax-0x6f00cd9c]
  414b8d:	fs xor edi,edi
  414b90:	(bad)  
  414b91:	movsxd esi,DWORD PTR [rdi]
  414b93:	(bad)  
  414b94:	mov    edi,0xaeff88ae
  414b99:	cwde   
  414b9a:	jle    0x414b9b
  414b9c:	jb     0x414c04
  414b9e:	rex.WR jmp rsp
  414ba1:	loopne 0x414b6b
  414ba3:	dec    DWORD PTR [rdx-0x2d009d8b]
  414ba9:	(bad)  
  414baa:	mov    ch,0xe2
  414bac:	cli    
  414bad:	cli    
  414bae:	cmc    
  414baf:	(bad)  
	...
  414bb8:	sti    
  414bb9:	sti    
  414bba:	cli    
  414bbb:	(bad)  
  414bbc:	repz in eax,dx
  414bbe:	jrcxz  0x414b70
  414bc0:	movabs ds:0x90ff356387ff6c8b,eax
  414bc9:	gs (bad) 
  414bcb:	call   QWORD PTR [rdx-0x6c00d29b]
  414bd1:	dec    WORD PTR cs:[rdx-0x5900cc9d]
  414bd9:	mov    ebp,DWORD PTR [rax-0x1]
  414bdc:	in     al,0xd6
  414bde:	mov    ebp,0x3b627eff
  414be3:	dec    DWORD PTR [rbx+riz*2+0x6490ff31]
  414bea:	xor    edi,edi
  414bec:	mov    ah,BYTE PTR [rdi+rsi*1-0x1]
  414bf0:	mov    BYTE PTR [rax+0x4a],ch
  414bf3:	call   rdx
  414bf5:	(bad)
  414bf8:	and    DWORD PTR [rdi+0x43],0x376092ff
  414bff:	call   QWORD PTR [rdx-0x6a00ce9b]
  414c05:	movsxd ebp,DWORD PTR [rdi]
  414c07:	call   QWORD PTR [rbx-0x7700cc9d]
  414c0d:	movsxd edi,DWORD PTR [rcx]
  414c0f:	dec    DWORD PTR [rbp+rsi*2-0x2d2400b1]
  414c16:	lods   eax,DWORD PTR ds:[rsi]
  414c17:	inc    DWORD PTR [rbx+0x7fff4769]
  414c1d:	outs   dx,DWORD PTR ds:[rsi]
  414c1e:	rex.WRB jmp r15
  414c21:	loopne 0x414be5
  414c23:	dec    DWORD PTR [rcx+rsi*2-0x725b00a9]
  414c2a:	jbe    0x414c27
  414c2c:	repz lock in al,0x8b
	...
  414c38:	div    esi
  414c3a:	hlt    
  414c3b:	rex.WXB (bad) 
  414c3d:	loop   0x414c14
  414c3f:	cmc    
  414c40:	xchg   BYTE PTR [rcx+0x45],ch
  414c43:	dec    DWORD PTR [rbp-0x6f00cf9d]
  414c49:	gs (bad) 
  414c4b:	call   QWORD PTR [rcx-0x6c00d39c]
  414c51:	addr32 (bad) 
  414c53:	dec    DWORD PTR [rbx-0x6600cc9c]
  414c59:	jle    0x414cb6
  414c5b:	(bad)  
  414c5c:	call   0xffffffff87410d3c
  414c61:	push   0x658fff3f
  414c66:	xor    bh,bh
  414c68:	xchg   esp,eax
  414c69:	xor    di,di
  414c6c:	mov    esp,DWORD PTR [rbx+0x35]
  414c6f:	inc    DWORD PTR [rdi-0x2f00ba9c]
  414c75:	ret    0xffa6
  414c78:	sub    DWORD PTR [rdx+0x4d],0x3b5e8fff
  414c7f:	call   QWORD PTR [rbp+riz*2+0x6690ff31]
  414c86:	dec    DWORD PTR cs:[rax+0x7aff3564]
  414c8d:	(bad)  
  414c8e:	cmp    edi,edi
  414c90:	mov    dh,0xa6
  414c92:	xchg   bh,bh
  414c94:	rol    esp,cl
  414c96:	movabs al,ds:0x588096ff345b7dff
  414c9f:	jmp    rcx
  414ca1:	fdiv   DWORD PTR [rdx+0x4b6d8dff]
  414ca7:	inc    DWORD PTR [rsi-0x2f00b596]
  414cad:	retf   
  414cae:	mov    bh,0xd9
  414cb0:	(bad)  
  414cb1:	(bad)  
  414cb2:	(bad)  
  414cb3:	adc    al,BYTE PTR [rax]
  414cb5:	add    BYTE PTR [rax],al
  414cb7:	add    cl,bh
  414cb9:	cli    
  414cba:	idiv   DWORD PTR [rdi]
  414cbc:	rol    edi,1
  414cbe:	mov    dh,0xe9
  414cc0:	sbb    DWORD PTR [rbx+0x35],0x306590ff
  414cc7:	call   QWORD PTR [rcx-0x6d00cd9b]
  414ccd:	gs (bad) 
  414ccf:	call   QWORD PTR [rbx-0x7500d19a]
  414cd5:	movsxd esi,DWORD PTR [rcx]
  414cd7:	call   QWORD PTR [rsi-0x1600a984]
  414cdd:	fld    st(0)
  414cdf:	dec    DWORD PTR [rcx-0x7600ba96]
  414ce5:	(bad)  {k6}{z}
  414cea:	xor    bh,bh
  414cec:	mov    WORD PTR [rdx+0x31],fs
  414cef:	inc    DWORD PTR [rbp-0x2b00b697]
  414cf5:	(bad)  
  414cf6:	test   al,0xff
  414cf8:	mov    BYTE PTR [rdx+0x44],ch
  414cfb:	dec    DWORD PTR [rbx-0x7200c69f]
  414d01:	fs xor eax,0x32668fff
  414d07:	dec    DWORD PTR [rcx+0x7bff3868]
  414d0d:	(bad)  
  414d0e:	cmp    eax,0xb4d3deff
  414d13:	jmp    FWORD PTR [rbx-0x7b008e68]
  414d19:	(bad)  {k5}{z}
  414d1e:	(bad)  
  414d1f:	(bad)  
  414d20:	(bad)  
  414d22:	mov    bl,0xff
  414d24:	mov    BYTE PTR [rbx+0x40],ch
  414d27:	(bad)  
  414d28:	jg     0x414d8c
  414d2a:	xor    bh,bh
  414d2c:	movabs al,ds:0x5ef9fcfcff7291
  414d35:	add    BYTE PTR [rax],al
  414d37:	add    dl,dh
  414d39:	cmc    
  414d3a:	out    dx,al
  414d3b:	push   0xfffffffff892a7b3
  414d40:	xchg   BYTE PTR [rbp+rsi*1-0x1],bl
  414d44:	mov    fs,WORD PTR [rbp+0x30]
  414d47:	call   QWORD PTR [rax-0x6c00cb9c]
  414d4d:	gs xor bh,bh
  414d50:	xchg   edx,eax
  414d51:	dec    WORD PTR cs:[rdx-0x6400ce9c]
  414d59:	(bad)  
  414d5a:	pop    rdx
  414d5b:	(bad)  
  414d5c:	call   0x7d410e3c
  414d61:	fs rex.X (bad) 
  414d64:	jl     0x414dc5
  414d66:	dec    DWORD PTR ss:[rcx-0x6000bd94]
  414d6d:	sbb    DWORD PTR [rsi-0x1],0xffffff8a
  414d71:	jl     0x414dd1
  414d73:	(bad)  
  414d74:	fcmove st,st(7)
  414d76:	lods   eax,DWORD PTR ds:[rsi]
  414d77:	dec    DWORD PTR [rcx-0x7200c79a]
  414d7d:	movsxd esi,DWORD PTR [rip+0x386290ff]        # 0x38a3de82
  414d83:	call   QWORD PTR [rdx-0x7700cd9c]
  414d89:	movsxd esi,DWORD PTR [rbx]
  414d8b:	dec    DWORD PTR [rax-0x1400b692]
  414d91:	loopne 0x414d55
  414d93:	dec    DWORD PTR [rax+0x7dff5c7a]
  414d99:	gs cmp bh,bh
  414d9c:	mov    WORD PTR [rbp+0x5b],?
  414d9f:	jmp    rax
  414da1:	(bad)  
  414da2:	mov    ebx,0x42718eff
  414da7:	dec    DWORD PTR [rcx-0x7d00d19c]
  414dad:	data16 rex.X (bad) 
  414db0:	(bad)  
  414db1:	in     eax,0xdb
  414db3:	mov    edx,0x1cf8fafa
  414db8:	loope  0x414d9e
  414dba:	fcmovu st,st(7)
  414dbc:	movabs ds:0x8eff37608cff7c92,eax
  414dc5:	addr32 (bad) 
  414dc7:	call   QWORD PTR [rax-0x6c00cb9b]
  414dcd:	gs xor bh,bh
  414dd0:	xchg   edx,eax
  414dd1:	sub    ax,0x8aff
  414dd5:	fs xor edi,edi
  414dd8:	sahf   
  414dd9:	test   BYTE PTR [rdi+rdi*8-0x12],bl
  414ddd:	in     eax,0xca
  414ddf:	call   QWORD PTR [rbx+0x72ff6283]
  414de5:	pop    rdi
  414de6:	cmp    edi,edi
  414de8:	movabs al,ds:0xb8ffc2dae3ff7292
  414df1:	mov    bl,0x98
  414df3:	call   rdi
  414df5:	shr    BYTE PTR [rdi+rdi*8-0xce9f7b],1
  414dfc:	xchg   ebx,eax
  414dfd:	movsxd esi,DWORD PTR [rdi+rdi*8]
  414e00:	xchg   esi,eax
  414e01:	(bad)  
  414e02:	call   QWORD PTR ss:[rsp+riz*2+0x648bff30]
  414e0a:	xor    edi,edi
  414e0c:	mov    DWORD PTR [rbp+0x45],ebp
  414e0f:	jmp    rbp
  414e11:	fadd   st(2),st
  414e13:	call   FWORD PTR [rax-0x41008270]
  414e19:	mov    bl,0x8f
  414e1b:	inc    DWORD PTR [rbx-0x1600a183]
  414e21:	loop   0x414dec
  414e23:	call   FWORD PTR [rdx+rdi*2+0x6392ff4f]
  414e2a:	(bad)  
  414e2b:	inc    DWORD PTR [rbx-0x2c00c9a4]
  414e31:	retf   0xe5b8
  414e34:	cli    
  414e35:	cli    
  414e36:	cmc    
  414e37:	cmp    esp,ecx
  414e39:	(bad)  
  414e3b:	call   FWORD PTR [rcx+rax*4+0x6190ff69]
  414e42:	xor    eax,0x2c688dff
  414e47:	call   QWORD PTR [rax-0x6c00cc9c]
  414e4d:	gs xor bh,bh
  414e50:	xchg   edx,eax
  414e51:	dec    WORD PTR cs:[rdx-0x6500ce9c]
  414e59:	sbb    DWORD PTR [rdx-0x1],0xffcfe6ee
  414e60:	in     eax,0xdc
  414e62:	mov    edi,0xaeced9ff
  414e67:	(bad)  
  414e68:	mov    edx,0xbaff96b3
  414e6d:	mov    ch,0xa1
  414e6f:	jmp    rcx
  414e71:	fcmovnb st,st(0)
  414e73:	push   QWORD PTR [rsi-0x7700815c]
  414e79:	(bad)  
  414e7a:	(bad)  
  414e7b:	call   QWORD PTR [rdx-0x6c00ce9c]
  414e81:	fs xor edi,edi
  414e84:	xchg   ecx,eax
  414e85:	movsxd esi,DWORD PTR [rax]
  414e87:	dec    DWORD PTR [rsi-0x7a00ce9b]
  414e8d:	(bad)  
  414e8e:	xor    eax,0x94b5c6ff
  414e93:	(bad)  
  414e94:	(bad)  
  414e96:	mov    edi,0xa0bec5ff
  414e9b:	jmp    QWORD PTR [rdx-0x14007862]
  414ea1:	in     eax,0xd2
  414ea3:	jmp    QWORD PTR [rbp-0x6800a67c]
  414ea9:	fs xor bh,bh
  414eac:	mov    WORD PTR [rsi+0x33],ds
  414eaf:	push   QWORD PTR [rdi-0xe07775a]
  414eb5:	out    dx,eax
  414eb6:	out    0x6e,al
  414eb8:	in     al,0xdf
  414eba:	sar    edi,1
  414ebc:	xchg   ebp,eax
  414ebd:	jne    0x414f1a
  414ebf:	call   QWORD PTR [rbx+riz*2+0x6b8eff35]
  414ec6:	sub    eax,0x336590ff
  414ecb:	call   QWORD PTR [rbx-0x6c00cf9b]
  414ed1:	dec    DWORD PTR cs:[ebp+eiz*2+0x7b94ff32]
  414eda:	push   rsp
  414edb:	jmp    rdi
  414edd:	fld    st(5)
  414edf:	call   QWORD PTR [rbx-0x5500997e]
  414ee5:	xchg   esi,eax
  414ee6:	je     0x414ee7
  414ee8:	int    0xba
  414eea:	cwde   
  414eeb:	dec    edi
  414eed:	mov    esp,0x93abff9f
  414ef2:	je     0x414ef3
  414ef4:	mov    ch,BYTE PTR [rax+0x42]
  414ef7:	dec    DWORD PTR [rsi-0x7000ce9b]
  414efd:	data16 xor bh,bh
  414f00:	mov    esp,DWORD PTR [rsi+0x32]
  414f03:	dec    DWORD PTR [rbx-0x7100cc9c]
  414f09:	gs xor bh,bh
  414f0c:	lea    esp,[rsi+0x30]
  414f0f:	dec    DWORD PTR [rdi-0x4700be8f]
  414f15:	test   al,0x85
  414f17:	(bad)  
  414f18:	fmul   st,st(5)
  414f1a:	mov    dl,0xff
  414f1c:	fcmovnbe st,st(4)
  414f1e:	ret    
  414f1f:	(bad)  
  414f20:	out    dx,eax
  414f21:	jmp    0xffffffff80e34f00
  414f26:	push   rsi
  414f27:	call   QWORD PTR [rcx-0x7200d19d]
  414f2d:	(bad)  {k7}{z}
  414f32:	push   0xffffffffffffffff
  414f34:	hlt    
  414f35:	icebp  
  414f36:	out    0x8d,al
  414f38:	out    0xdf,al
  414f3a:	iret   
  414f3b:	call   QWORD PTR [rdi+rsi*2+0x6595ff58]
  414f42:	call   QWORD PTR ss:[rdx-0x7200d399]
  414f49:	gs xor edi,edi
  414f4c:	mov    fs,WORD PTR [rbp+0x31]
  414f4f:	dec    DWORD PTR [rsi-0x7600cf9a]
  414f55:	gs xor bh,bh
  414f58:	mov    ch,BYTE PTR [rsi+0x44]
  414f5b:	jmp    rcx
  414f5d:	(bad)  
  414f5e:	mov    ebp,0x68859dff
  414f63:	(bad)  
  414f64:	jle    0x414fc4
  414f66:	inc    DWORD PTR ss:[rbx-0x7c00cfa1]
  414f6d:	pop    rsi
  414f6e:	(bad)  
  414f6f:	dec    DWORD PTR [rax-0x7200c79f]
  414f75:	(bad)  
  414f76:	cmp    bh,bh
  414f78:	nop
  414f79:	data16 xor bh,bh
  414f7c:	mov    fs,WORD PTR [rsi+0x31]
  414f7f:	dec    DWORD PTR [rax-0x7700cd99]
  414f85:	fs xor al,0xff
  414f88:	(bad)  
  414f89:	fs xor bh,bh
  414f8c:	xchg   edi,eax
  414f8d:	call   QWORD PTR cs:[ecx-0x7b00d19b]
  414f95:	movsxd esi,DWORD PTR [rcx]
  414f97:	push   QWORD PTR [rbp+0x5c]
  414f9a:	cmp    al,0xff
  414f9c:	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
  414f9d:	xchg   esi,eax
  414f9e:	cmp    edi,0xffffffd7
  414fa1:	(bad)  
  414fa2:	scas   eax,DWORD PTR es:[rdi]
  414fa3:	dec    DWORD PTR [rbp-0x7200c197]
  414fa9:	gs xor edi,edi
  414fac:	mov    ah,BYTE PTR [rbx+0x31]
  414faf:	call   FWORD PTR [rdx-0x1700aa82]
  414fb5:	jrcxz  0x414f8d
  414fb7:	(bad)  
  414fb8:	out    0xdf,al
  414fba:	int    0xff
  414fbc:	cwde   
  414fbd:	test   DWORD PTR [rax-0x1],esp
  414fc0:	lea    esp,[rbx+0x34]
  414fc3:	call   FWORD PTR [rcx-0x7300cf9e]
  414fc9:	addr32 xor al,0xff
  414fcc:	mov    ah,BYTE PTR [rbp+0x33]
  414fcf:	dec    DWORD PTR [rcx-0x7500cd9c]
  414fd5:	gs xor edi,edi
  414fd8:	mov    BYTE PTR [rbp+0x36],ah
  414fdb:	inc    ebp
  414fdd:	mov    bh,0x96
  414fdf:	inc    ebx
  414fe1:	scas   eax,DWORD PTR es:[rdi]
  414fe2:	mov    edi,edi
  414fe4:	and    DWORD PTR [rdx+0x36],0x2f648bff
  414feb:	dec    DWORD PTR [rdi-0x6e00d49c]
  414ff1:	gs xor bh,bh
  414ff4:	(bad)  
  414ff5:	fs xor al,0xff
  414ff8:	(bad)  
  414ff9:	gs xor al,0xff
  414ffc:	(bad)  
  414ffd:	gs xor al,0xff
  415000:	(bad)  
  415001:	gs xor al,0xff
  415004:	(bad)  
  415005:	gs xor bh,bh
  415008:	xchg   ebx,eax
  415009:	fs xor bh,bh
  41500c:	cwde   
  41500d:	movsxd esi,DWORD PTR [rdx]
  41500f:	call   QWORD PTR [rbx+riz*2+0x658cff32]
  415016:	xor    edi,edi
  415018:	mov    bh,BYTE PTR [rcx+0x59]
  41501b:	(bad)  
  41501c:	(bad)  
  41501e:	mov    edx,0x638ca8ff
  415023:	dec    DWORD PTR [rsp+riz*2+0x6590ff34]
  41502a:	xor    al,0xff
  41502c:	mov    WORD PTR [rbx+rsi*1-0x1],fs
  415030:	xchg   esp,eax
  415031:	jl     0x415088
  415033:	jmp    rsp
  415035:	fst    st(0)
  415037:	(bad)  
  415038:	out    0xe3,eax
  41503a:	fcom   st(3)
  41503c:	mov    dl,0xa2
  41503e:	mov    al,bh
  415040:	jge    0x41509f
  415042:	dec    DWORD PTR ss:[rdx+riz*2+0x6491ff32]
  41504a:	xor    al,0xff
  41504c:	xchg   ecx,eax
  41504d:	fs xor al,0xff
  415050:	(bad)  
  415051:	(bad)  {z}
  415056:	xor    edi,edi
  415058:	mov    ah,BYTE PTR [rdx+0x33]
  41505b:	dec    DWORD PTR [rbp-0x1900a583]
  415061:	loopne 0x415022
  415063:	dec    DWORD PTR [rbx-0x7a00ac8a]
  415069:	(bad)  
  41506a:	call   QWORD PTR ss:[rdx-0x7000ce9d]
  415071:	movsxd esi,DWORD PTR [rcx]
  415073:	dec    DWORD PTR [rbp+riz*2+0x648dff34]
  41507a:	xor    edi,edi
  41507c:	lea    esp,[rbx+rsi*1-0x1]
  415080:	lea    esp,[rbx+rsi*1-0x1]
  415084:	xchg   ebx,eax
  415085:	gs (bad) 
  415087:	call   QWORD PTR [rsi-0x6f00d09a]
  41508d:	fs xor edi,edi
  415090:	and    DWORD PTR [rax+0x37],0xffffffff
  415094:	jg     0x4150fa
  415096:	ds (bad) 
  415098:	fnop   
  41509a:	mov    ecx,0x92acbbff
  41509f:	(bad)  
  4150a0:	jle    0x415100
  4150a2:	xor    eax,0x32638bff
  4150a7:	call   QWORD PTR [rdx-0x7500ce9c]
  4150ad:	movsxd esi,DWORD PTR [rdi+rdi*8]
  4150b0:	mov    ?,WORD PTR [rbp+0x60]
  4150b3:	jmp    rbp
  4150b5:	(bad)  
  4150b7:	(bad)  
  4150b8:	repz lock in al,dx
  4150bb:	(bad)  
  4150bc:	fmul   st,st(4)
  4150be:	mov    ebp,0x405f77f8
  4150c3:	inc    DWORD PTR [rdx-0x6f00c79d]
  4150c9:	movsxd esi,DWORD PTR [rdx]
  4150cb:	call   QWORD PTR [rax-0x6e00cc9d]
  4150d1:	fs xor al,0xff
  4150d4:	nop
  4150d5:	fs xor edi,edi
  4150d8:	lea    esp,[rbx+0x34]
  4150db:	push   QWORD PTR [rdi+0x62]
  4150de:	cmp    al,0xff
  4150e0:	ror    ebx,cl
  4150e2:	scas   al,BYTE PTR es:[rdi]
  4150e3:	(bad)  
  4150e4:	mov    esp,0x74ff94af
  4150e9:	pop    rcx
  4150ea:	(bad)  
  4150eb:	inc    DWORD PTR [rdi-0x7400ca9f]
  4150f1:	fs xor bh,bh
  4150f4:	mov    WORD PTR [rbp+0x34],fs
  4150f7:	dec    DWORD PTR [rbx-0x7500cc9c]
  4150fd:	movsxd esi,DWORD PTR [rdx]
  4150ff:	dec    DWORD PTR [rbx-0x6b00cd9d]
  415105:	addr32 xor edi,edi
  415108:	nop
  415109:	gs xor edi,edi
  41510c:	xchg   BYTE PTR [rbp+0x37],ah
  41510f:	push   QWORD PTR [rdi+0x5e]
  415112:	cmp    edi,edi
  415114:	lods   eax,DWORD PTR ds:[rsi]
  415115:	pushf  
  415116:	jge    0x415117
  415118:	(bad)  
  415119:	enter  0xffad,0x84
  41511d:	outs   dx,BYTE PTR ds:[rsi]
  41511e:	rex.WRB inc QWORD PTR [r11-0x7500c89d]
  415125:	fs xor al,0xff
  415128:	mov    esp,DWORD PTR [rdx+0x36]
  41512b:	(bad)  
  41512c:	jge    0x41518a
  41512e:	(bad)  
  41512f:	jmp    FWORD PTR [rsi-0xa076f5c]
  415135:	repz in eax,dx
  415137:	xor    edi,0xec2cf5f6
  41513d:	out    0xe2,eax
  41513f:	mov    bh,0xb4
  415141:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
  415142:	mov    ?,edi
  415144:	jp     0x4151ad
  415146:	cmp    eax,0x316388ff
  41514b:	dec    DWORD PTR [rbx-0x7400cc9b]
  415151:	fs xor bh,bh
  415154:	mov    WORD PTR [rsi+0x33],fs
  415157:	dec    DWORD PTR [rbx-0x7b00cb9b]
  41515d:	(bad)  
  41515e:	cmp    bh,bh
  415160:	mov    ?,WORD PTR [rcx+0x60]
  415163:	jmp    rax
  415165:	fadd   st,st(6)
  415167:	call   FWORD PTR [rsi+0x79ff7793]
  41516d:	addr32 cmp eax,0x326484ff
  415173:	dec    DWORD PTR [rdx-0x7600cc9b]
  415179:	gs xor edi,edi
  41517c:	xchg   DWORD PTR [rbx+0x31],esp
  41517f:	inc    DWORD PTR [rdi-0x7800ce9d]
  415185:	(bad)  
  415186:	ss (bad) 
  415188:	jg     0x4151ea
  41518a:	cmp    bh,bh
  41518c:	sub    DWORD PTR [rdi+0x47],0xffffffff
  415190:	(bad)  
  415191:	mov    edx,0xd5e2ff95
  415196:	mov    ah,0xff
  415198:	mov    BYTE PTR [rdx+0x40],ch
  41519b:	inc    DWORD PTR [rbx-0x7600cd9e]
  4151a1:	gs xor eax,0x386386ff
  4151a7:	inc    DWORD PTR [rcx-0x5300bb9d]
  4151ad:	cwde   
  4151ae:	(bad)  
  4151af:	push   rsi
  4151b1:	repz (bad) 
  4151b3:	popf   
  4151b4:	cld    
  4151b5:	cld    
  4151b6:	sti    
  4151b7:	sbb    edi,edi
  4151b9:	(bad)  
  4151ba:	inc    DWORD PTR [rsi]
  4151bc:	icebp  
  4151bd:	out    dx,eax
  4151be:	out    dx,al
  4151bf:	ja     0x4151a3
  4151c1:	(bad)  
  4151c3:	in     al,dx
  4151c4:	(bad)  
  4151c5:	mov    ebx,0x7690f89e
  4151ca:	rex.WB (bad) 
  4151cc:	jg     0x415231
  4151ce:	xor    eax,0x325f7aff
  4151d3:	(bad)  
  4151d4:	jnp    0x415236
  4151d6:	xor    edi,edi
  4151d8:	jge    0x41523a
  4151da:	xor    eax,0x456383ff
  4151df:	dec    DWORD PTR [rdi-0x30009685]
  4151e5:	(bad)  
  4151e6:	mov    ecx,0xdaeaecf2
  4151eb:	mov    edx,0xf88fadb4
  4151f0:	mov    BYTE PTR [rdi+0x43],ch
  4151f3:	inc    DWORD PTR [rcx+0x7eff3262]
  4151f9:	pop    rdi
  4151fa:	xor    bh,bh
  4151fc:	jle    0x41525d
  4151fe:	xor    bh,bh
  415200:	and    DWORD PTR [rcx+0x33],0x476b86ff
  415207:	jmp    FWORD PTR [rdx-0x26008567]
  41520d:	shl    BYTE PTR [rax-0x57352a01],1
  415213:	call   QWORD PTR [rsi-0x7f00a27e]
  415219:	(bad)  
  41521a:	xor    edi,edi
  41521c:	(bad)  
  41521d:	(bad)  
  41521e:	cs (bad) 
  415220:	jle    0x415282
  415222:	xor    edi,edi
  415224:	mov    BYTE PTR [rdi+0x4b],ch
  415227:	inc    esp
  415229:	mov    ah,0xa0
  41522b:	clc    
  41522c:	out    dx,eax
  41522d:	jmp    0xfffffffffe3f0012
  415232:	cld    
  415233:	adc    al,BYTE PTR [rax]
	...
  41523d:	add    BYTE PTR [rax],al
  41523f:	add    dl,bh
  415241:	cli    
  415242:	cli    
  415243:	(bad)  
  415244:	icebp  
  415245:	icebp  
  415246:	lock push rdx
  415248:	lock jmp 0xffffffffd61d2c28
  41524e:	(bad)  
  41524f:	in     al,dx
  415250:	ror    eax,1
  415252:	mov    bh,0xe2
  415254:	int3   
  415255:	ret    
  415256:	mov    bl,0xe2
  415258:	(bad)  
  41525a:	ret    0xe6d9
  41525d:	jrcxz  0x41523c
  41525f:	mov    bl,0xf9
  415261:	cmc    
  415262:	lock jno 0x415259
  415265:	icebp  
  415266:	in     al,dx
  415267:	fs stc 
  415269:	stc    
  41526a:	clc    
  41526b:	or     al,0xef
  41526d:	in     al,dx
  41526e:	(bad)  
  41526f:	pop    rsi
  415270:	jmp    0x415256
  415272:	(bad)  
  415273:	(bad)  
  415275:	enter  0xe9b4,0xc4
  415279:	mov    ecx,0xbdc8e2a4
  41527e:	test   eax,0xc0d4dee2
  415283:	shr    esp,cl
  415285:	jmp    0x41525e
  415287:	sar    dl,0xfb
  41528a:	jmp    0x415213
  41528c:	fst    st(6)
  41528e:	(bad)  
  41528f:	rcr    DWORD PTR [rcx-0x68008675],cl
  415295:	xchg   BYTE PTR [rdi+rdi*8-0x5f],ch
  415299:	xchg   ecx,eax
  41529a:	jno    0x41529b
  41529c:	scas   al,BYTE PTR es:[rdi]
  41529d:	movabs ds:0xe7eae2b0c2cbec86,al
  4152a6:	fadd   st(3),st
  4152a8:	std    
  4152a9:	std    
  4152aa:	sti    
  4152ab:	rex.RB (bad) 
  4152ad:	(bad)  
  4152ae:	inc    BYTE PTR [rsi]
	...
  4152c8:	div    ebp
  4152ca:	repz cmp esi,esi
  4152cd:	cmc    
  4152ce:	hlt    
  4152cf:	rex.X (bad) 
  4152d1:	std    
  4152d2:	cld    
  4152d3:	cmp    dh,bh
  4152d5:	std    
  4152d6:	cld    
  4152d7:	cmp    ah,bh
  4152d9:	cli    
  4152da:	stc    
  4152db:	(bad)  
  4152dc:	(bad)  
  4152dd:	(bad)  
  4152de:	dec    BYTE PTR [rcx]
	...
  4152ec:	stc    
  4152ed:	stc    
  4152ee:	clc    
  4152ef:	(bad)  
  4152f0:	repz repnz icebp 
  4152f3:	rex.WXB cli 
  4152f5:	cli    
  4152f6:	clc    
  4152f7:	(bad)  
  4152f8:	(bad)  
  4152f9:	(bad)  
  4152fa:	cld    
  4152fb:	cmp    dh,bh
  4152fd:	(bad)  
  4152fe:	std    
  4152ff:	cmp    dh,bh
  415301:	(bad)  
  415302:	std    
  415303:	sub    esp,edi
  415305:	std    
  415306:	sti    
  415307:	(bad)  
  415308:	(bad)  
  415309:	std    
  41530a:	cld    
  41530b:	add    edi,ecx
  41530d:	div    ebp
  41530f:	xor    eax,0x87e8ecf0
  415314:	loopne 0x4152f0
  415316:	rcr    bh,1
  415318:	(bad)  
  41531a:	retf   
  41531b:	jmp    rbp
  41531d:	loopne 0x4152fc
  41531f:	mov    ecx,0x38f7f9fc
  415324:	clc    
  415325:	div    esi
  415327:	and    eax,0x0
	...
  415338:	(bad)  
  415339:	inc    DWORD PTR [rax]
  41533b:	(bad)  
  41533c:	(bad)  
  41533d:	inc    DWORD PTR [rax]
  41533f:	(bad)  
  415340:	(bad)  
  415341:	inc    DWORD PTR [rax]
  415343:	jg     0x415344
  415345:	inc    BYTE PTR [rax]
  415347:	(bad)  
  415348:	(bad)  
  415349:	inc    BYTE PTR [rax]
  41534b:	(bad)  
  41534c:	(bad)  
  41534d:	inc    BYTE PTR [rax]
  41534f:	(bad)  
  415350:	jmp    rax
  415352:	add    BYTE PTR [rdi],bh
  415354:	inc    eax
  415356:	add    BYTE PTR [rdi],bh
  415358:	lock add BYTE PTR [rax],al
  41535b:	(bad)  
  41535c:	lock add BYTE PTR [rax],al
  41535f:	add    eax,eax
  415361:	add    BYTE PTR [rax],al
  415363:	add    al,al
  415365:	add    BYTE PTR [rax],al
  415367:	add    BYTE PTR [rax-0x7ff10000],al
  41536d:	add    BYTE PTR [rax],al
  41536f:	sldt   WORD PTR [rax]
  415372:	add    BYTE PTR [rdi],al
  415374:	add    BYTE PTR [rax],al
  415376:	add    BYTE PTR [rbx],al
  415378:	add    BYTE PTR [rax],al
  41537a:	add    BYTE PTR [rbx],al
  41537c:	add    BYTE PTR [rax],al
  41537e:	add    BYTE PTR [rbx],al
  415380:	add    BYTE PTR [rax],al
  415382:	add    BYTE PTR [rcx],al
  415384:	add    BYTE PTR [rax],al
  415386:	add    BYTE PTR [rcx],al
	...
  4153ac:	add    BYTE PTR [rax],al
  4153ae:	add    BYTE PTR [rcx],al
  4153b0:	rol    BYTE PTR [rax],0x0
  4153b3:	add    esi,eax
  4153b5:	cmp    BYTE PTR [rax],al
  4153b7:	movaps xmm0,XMMWORD PTR [rax]
  4153ba:	add    BYTE PTR [rax],al
  4153bc:	xor    BYTE PTR [rax],al
  4153be:	add    BYTE PTR [rax],al
  4153c0:	(bad)  
  4153c1:	add    BYTE PTR [rax],al
  4153c3:	add    BYTE PTR [rcx],al
  4153c5:	add    BYTE PTR [rax],ah
  4153c7:	add    BYTE PTR [rax],al
  4153c9:	add    BYTE PTR [rax],al
  4153cb:	add    BYTE PTR [rax+0x25],al
	...
  41543d:	add    BYTE PTR [rax],al
  41543f:	add    al,bh
  415441:	div    edi
  415443:	push   rbp
  415444:	fcmovnu st,st(2)
  415446:	iret   
  415447:	(bad)  
  415448:	stc    
  415449:	cmc    
  41544a:	call   0xffffffff96eb104e
  41544f:	call   QWORD PTR [rcx-0x6e009b87]
  415455:	jle    0x4154bd
  415457:	jmp    QWORD PTR [rbx-0x4000826e]
  41545d:	mov    al,0x9b
  41545f:	(bad)  
  415460:	in     al,dx
  415461:	loope  0x415435
  415463:	(bad)  
  415464:	stc    
  415465:	cmc    
  415466:	jmp    0xfffffffff83d5132
  41546b:	push   rbp
	...
  415500:	ror    dh,1
  415502:	(bad)  
  415505:	repnz loopne 0x415507
  415508:	pushf  
  415509:	mov    esi,DWORD PTR [rbx-0x1]
  41550c:	outs   dx,DWORD PTR ds:[rsi]
  41550d:	push   rdx
  41550e:	xor    edi,edi
  415510:	jnp    0x41556a
  415512:	xor    al,0xff
  415514:	jl     0x415572
  415516:	xor    al,0xff
  415518:	jns    0x415574
  41551a:	xor    edi,edi
  41551c:	jae    0x415574
  41551e:	xor    bh,bh
  415520:	jp     0x415584
  415522:	rex.XB push QWORD PTR [r15-0x6007059]
  415529:	repnz jrcxz 0x41550f
  41552c:	cmc    
  41552d:	repz lock push rbp
	...
  4155c0:	lock in eax,dx
  4155c2:	fisubr WORD PTR [rdx-0x60483f]
  4155c8:	je     0x415626
  4155ca:	cmp    al,0xff
  4155cc:	sbb    BYTE PTR [rdx+rsi*1-0x1],0x8e
  4155d1:	(bad)  
  4155d2:	xor    bh,bh
  4155d4:	mov    esp,DWORD PTR [rbx+0x30]
  4155d7:	dec    DWORD PTR [rbx-0x7200cf9d]
  4155dd:	xor    ax,0x80ff
  4155e1:	pop    rsi
  4155e2:	xor    bh,bh
  4155e4:	je     0x41563e
  4155e6:	xor    eax,0x95acbdff
  4155eb:	(bad)  
  4155ec:	out    dx,al
  4155ed:	in     al,dx
  4155ee:	in     al,0xc7
	...
  415680:	clc    
  415681:	repz loope 0x41564b
  415684:	xchg   ecx,eax
  415685:	(bad)  
  415686:	push   WORD PTR [rbp+0x59]
  41568a:	xor    edi,edi
  41568c:	(bad)  
  41568d:	xor    ax,0x95ff
  415691:	gs xor bh,bh
  415694:	(bad)  
  415695:	gs xor edi,edi
  415698:	xchg   ecx,eax
  415699:	xor    di,di
  41569c:	xchg   ebx,eax
  41569d:	addr32 xor edi,edi
  4156a0:	(bad)  
  4156a1:	data16 xor bh,bh
  4156a4:	and    DWORD PTR [rcx+0x35],0xffffffff
  4156a8:	test   DWORD PTR [rsi+0x50],ebp
  4156ab:	jmp    rsp
  4156ad:	fcmovne st,st(7)
  4156af:	(bad)  
  4156b0:	cli    
  4156b1:	stc    
  4156b2:	stc    
  4156b3:	push   rbp
	...
  415740:	jmp    0xffffffff85412528
  415745:	jb     0x41579b
  415747:	(bad)  
  415748:	jnp    0x4157a8
  41574a:	(bad)  
  41574b:	call   QWORD PTR [rax-0x6b00cc9b]
  415751:	(bad)  
  415752:	sub    eax,0x336288ff
  415757:	dec    DWORD PTR [rsi-0x6c00cc9a]
  41575d:	push   0x6794ff31
  415762:	(bad)  
  415763:	dec    DWORD PTR [rbx+0x7cff3364]
  415769:	(bad)  
  41576a:	notrack call rax
  41576d:	ret    
  41576e:	mov    cl,0xff
  415770:	jrcxz  0x415753
  415772:	fsubrp st(3),st
	...
  4157fc:	(bad)  
  4157fd:	sti    
  4157fe:	idiv   DWORD PTR [rcx]
  415800:	loopne 0x4157db
  415802:	mov    edi,0x4b6a7aff
  415807:	(bad)  
  415808:	jge    0x41586b
  41580a:	cmp    bh,bh
  41580c:	mov    fs,WORD PTR [rbx+rsi*1-0x1]
  415810:	xchg   esi,eax
  415811:	gs xor bh,bh
  415814:	jg     0x415876
  415816:	cmp    edi,edi
  415818:	xchg   DWORD PTR [rax+rdi*1-0x1],esp
  41581c:	xchg   edx,eax
  41581d:	addr32 xor bh,bh
  415820:	xchg   edi,eax
  415821:	imul   ebp,DWORD PTR [rdi],0x31648cff
  415827:	push   QWORD PTR [rdi+rdx*2+0x30]
  41582b:	(bad)  
  41582c:	mov    esi,0xd1ff9aaf
  415831:	retf   
  415832:	(bad)  
  415835:	(bad)  
  415836:	call   FWORD PTR [rip+0x0]        # 0x41583c
	...
  4158bc:	repnz lock in al,dx
  4158bf:	push   rbp
  4158c0:	fcmovbe st,st(0)
  4158c2:	mov    ch,0xff
  4158c4:	jle    0x41592a
  4158c6:	rex.XB inc DWORD PTR [r15-0x7200c69e]
  4158cd:	addr32 xor al,0xff
  4158d0:	mov    ah,BYTE PTR [rbp+0x2e]
  4158d3:	dec    DWORD PTR [rbx-0x7400ca9f]
  4158d9:	gs xor eax,0x31688bff
  4158df:	call   QWORD PTR [rcx-0x6e00d098]
  4158e5:	fs xor bh,bh
  4158e8:	jg     0x415942
  4158ea:	xor    bh,bh
  4158ec:	mov    ecx,0xdaff88a5
  4158f1:	(bad)  
  4158f2:	retf   0xfcff
  4158f5:	cld    
  4158f6:	cld    
  4158f7:	sbb    eax,0x0
	...
  41597c:	out    dx,eax
  41597d:	in     eax,dx
  41597e:	out    0x72,eax
  415980:	fcmove st,st(4)
  415982:	mov    al,0xff
  415984:	test   DWORD PTR [rcx+0x3e],esp
  415987:	dec    DWORD PTR [rbx-0x7400cfa3]
  41598d:	addr32 xor bh,bh
  415990:	(bad)  
  415991:	imul   ebp,DWORD PTR [rip+0x30649bff],0x2f6691ff        # 0x30a5f59a
  41599b:	inc    DWORD PTR [rsi-0x7500d197]
  4159a1:	push   0x6596ff2f
  4159a6:	xor    eax,0x315889ff
  4159ab:	push   QWORD PTR [rbp-0x26008765]
  4159b1:	fxch   st(0)
  4159b3:	(bad)  
  4159b4:	stc    
  4159b5:	stc    
  4159b6:	stc    
  4159b7:	sbb    eax,0x0
	...
  415a3c:	jrcxz  0x415a20
  415a3e:	(bad)  
  415a40:	(bad)  
  415a41:	enter  0xffad,0x84
  415a45:	(bad)  
  415a46:	cmp    eax,0x346190ff
  415a4b:	dec    DWORD PTR [rbp+riz*2+0x6a88ff2f]
  415a52:	(bad)  
  415a53:	call   FWORD PTR [rdx-0x6f00ce9b]
  415a59:	data16 xor bh,bh
  415a5c:	xchg   DWORD PTR [rcx+0x2e],ebp
  415a5f:	dec    DWORD PTR [rax+rbp*2+0x6494ff30]
  415a66:	xor    al,0xff
  415a68:	mov    DWORD PTR [rcx+0x33],ebx
  415a6b:	jmp    FWORD PTR [rcx-0x18009171]
  415a71:	jmp    0x423e4f
	...
  415afa:	add    BYTE PTR [rax],al
  415afc:	ret    0xb9c1
  415aff:	call   rsp
  415b01:	enter  0xffad,0x83
  415b05:	pop    rbp
  415b06:	cmp    edi,edi
  415b08:	xchg   esp,eax
  415b09:	(bad)  
  415b0a:	dec    DWORD PTR ss:[rdx+riz*2+0x6a8bff2d]
  415b12:	(bad)  
  415b13:	call   FWORD PTR [rdx-0x6f00ce9b]
  415b19:	data16 xor bh,bh
  415b1c:	xchg   DWORD PTR [rcx+0x2e],ebp
  415b1f:	dec    DWORD PTR [rcx+rbp*2+0x6394ff30]
  415b26:	xor    edi,edi
  415b28:	mov    ebx,DWORD PTR [rbx+0x35]
  415b2b:	call   FWORD PTR [rdx-0x900a07f]
  415b31:	repnz loope 0x415ade
	...
  415ba4:	(bad)  
  415ba5:	(bad)  
  415ba6:	(bad)  
  415ba7:	cmp    edi,edi
  415ba9:	(bad)  
  415baa:	call   QWORD PTR [rbp-0x1]
  415bad:	(bad)  
  415bae:	call   QWORD PTR [rbp+0x0]
  415bb1:	add    BYTE PTR [rax],al
  415bb3:	add    BYTE PTR [rax],al
  415bb5:	add    BYTE PTR [rax],al
  415bb7:	add    bh,bh
  415bb9:	(bad)  
  415bba:	call   QWORD PTR [rbp-0x4d]
  415bbd:	mov    bl,0xaa
  415bbf:	call   rax
  415bc1:	(bad)
  415bc4:	sbb    DWORD PTR [rsi+0x3c],0xffffffff
  415bc8:	xchg   esp,eax
  415bc9:	(bad)  
  415bca:	xor    eax,0x316693ff
  415bcf:	dec    DWORD PTR [rsi-0x6600d097]
  415bd5:	fs xor bh,bh
  415bd8:	nop
  415bd9:	data16 xor bh,bh
  415bdc:	xchg   DWORD PTR [rcx+0x2e],ebp
  415bdf:	dec    DWORD PTR [rcx+rbp*2+0x6595ff30]
  415be6:	xor    al,0xff
  415be8:	mov    DWORD PTR [rcx+0x33],ebx
  415beb:	call   QWORD PTR [rbp+rdi*2-0xd0300a6]
  415bf2:	loope  0x415bd7
  415bf4:	in     eax,dx
  415bf5:	out    0xe6,al
  415bf7:	mov    es,WORD PTR [rax]
	...
  415c5d:	add    BYTE PTR [rax],al
  415c5f:	add    al,ch
  415c61:	in     al,0xe1
  415c63:	mov    cs,ebp
  415c65:	retf   0xffc6
  415c68:	ror    ch,1
  415c6a:	(bad)  
  415c6b:	inc    edi
  415c6d:	(bad)
  415c70:	xlat   BYTE PTR ds:[rbx]
  415c71:	(bad)  
  415c72:	sar    edi,1
  415c74:	add    BYTE PTR [rax],al
  415c76:	add    BYTE PTR [rax],al
  415c78:	(bad)  
  415c79:	(bad)  
  415c7a:	dec    DWORD PTR [rsi-0x554b4e]
  415c80:	ror    cl,cl
  415c82:	lods   eax,DWORD PTR ds:[rsi]
  415c83:	inc    DWORD PTR [rbp+rbx*2+0x6096ff3b]
  415c8a:	xor    eax,0x316695ff
  415c8f:	call   QWORD PTR [rcx-0x6500cf97]
  415c95:	fs xor bh,bh
  415c98:	nop
  415c99:	data16 xor bh,bh
  415c9c:	xchg   DWORD PTR [rcx+0x2e],ebp
  415c9f:	dec    DWORD PTR [rbx-0x6d00d098]
  415ca5:	(bad)  
  415ca6:	xor    edi,edi
  415ca8:	mov    ebx,DWORD PTR [rbp+rsi*1-0x1]
  415cac:	mov    esi,DWORD PTR [rdx+0x4f]
  415caf:	push   rbp
  415cb1:	(bad)  
  415cb2:	(bad)  
  415cb4:	retf   
  415cb5:	mov    esp,0xffffffbb
  415cba:	call   QWORD PTR [rbp+0x0]
	...
  415d01:	add    BYTE PTR [rax],al
  415d03:	add    ah,bh
  415d05:	stc    
  415d06:	idiv   DWORD PTR [rcx]
  415d08:	clc    
  415d09:	div    bl
  415d0b:	push   rbp
	...
  415d18:	fcom   st(5)
  415d1a:	(bad)  
  415d1b:	stos   BYTE PTR es:[rdi],al
  415d1c:	lock in eax,dx
  415d1e:	jmp    0x415d3d
  415d20:	(bad)  
  415d21:	in     eax,0xdf
  415d23:	jrcxz  0x415d11
  415d25:	in     al,0xda
  415d27:	(bad)  
  415d28:	fcmovnbe st,st(7)
  415d2a:	leave  
  415d2b:	(bad)  
  415d2c:	jmp    0x415d14
  415d2e:	(bad)  
  415d2f:	(bad)  
  415d30:	(bad)  
  415d31:	cld    
  415d32:	out    0xc7,eax
  415d34:	cli    
  415d35:	cmc    
  415d36:	jmp    0x415cff
  415d38:	mov    dh,0xb4
  415d3a:	mov    cl,0xff
  415d3c:	mov    bh,0xba
  415d3e:	scas   eax,DWORD PTR es:[rdi]
  415d3f:	dec    ebp
  415d41:	(bad)  
  415d42:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
  415d43:	inc    DWORD PTR [rbp+rbx*2+0x6096ff3b]
  415d4a:	xor    eax,0x316597ff
  415d4f:	call   QWORD PTR [rbx-0x6500cf97]
  415d55:	fs xor bh,bh
  415d58:	nop
  415d59:	data16 xor bh,bh
  415d5c:	xchg   DWORD PTR [rcx+0x2e],ebp
  415d5f:	dec    DWORD PTR [rbx-0x6b00d098]
  415d65:	fs xor al,0xff
  415d68:	xchg   edx,eax
  415d69:	(bad)  
  415d6a:	cmp    edi,edi
  415d6c:	test   BYTE PTR [rbx+0x48],ch
  415d6f:	(bad)  
  415d70:	jmp    0xffffffffd2412e54
  415d75:	enter  0xffc7,0xff
  415d79:	(bad)  
  415d7a:	call   FWORD PTR [rip+0x0]        # 0x415d80
	...
  415dbc:	loope  0x415d97
  415dbe:	fimul  DWORD PTR [rsi-0x38151408]
  415dc4:	(bad)  
  415dc6:	sar    bh,1
  415dc8:	mov    edx,0xe6ffb2b5
  415dcd:	in     eax,0xe2
  415dcf:	(bad)  
  415dd0:	(bad)  
  415dd1:	jmp    0x417bbe
  415dd6:	add    BYTE PTR [rax],al
  415dd8:	(bad)  
  415dd9:	rcl    ebp,cl
  415ddb:	(bad)  
  415ddc:	(bad)  
  415ddd:	(bad)  
  415dde:	cld    
  415ddf:	push   rbp
  415de0:	mov    ah,0xae
  415de2:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
  415de3:	(bad)  
  415de4:	jnp    0x415e58
  415de6:	jmp    DWORD PTR [rsi+0x65]
  415dea:	push   rdx
  415deb:	jmp    FWORD PTR [rbx+0x60]
  415dee:	rex.RXB dec DWORD PTR [r14-0x45009b7e]
  415df5:	mov    cl,0x9f
  415df7:	push   rbp
  415df9:	cmc    
  415dfa:	out    dx,eax
  415dfb:	(bad)  
  415dfc:	std    
  415dfd:	push   rbx
  415dff:	inc    edx
  415e01:	mov    eax,0x5d84ff9d
  415e06:	cmp    al,0xff
  415e08:	xchg   esi,eax
  415e09:	pop    rdi
  415e0a:	xor    eax,0x316598ff
  415e0f:	call   QWORD PTR [rax+rbp*2+0x6499ff30]
  415e16:	xor    bh,bh
  415e18:	nop
  415e19:	data16 xor bh,bh
  415e1c:	xchg   DWORD PTR [rcx+0x2e],ebp
  415e1f:	dec    DWORD PTR [rbx-0x6b00d098]
  415e25:	fs xor al,0xff
  415e28:	(bad)  
  415e29:	(bad)  
  415e2a:	cmp    edi,edi
  415e2c:	jg     0x415e93
  415e2e:	rex.XB (bad) 
  415e30:	fcmovnu st,st(1)
  415e32:	leave  
  415e33:	(bad)  
  415e34:	(bad)  
  415e36:	fisubr WORD PTR [rdx+0x0]
	...
  415e78:	in     eax,dx
  415e79:	in     eax,dx
  415e7a:	in     eax,dx
  415e7b:	sbb    eax,0xc7e7f0f3
  415e80:	xlat   BYTE PTR ds:[rbx]
  415e81:	ret    0xffa7
  415e84:	mov    ebp,DWORD PTR [rbx+0x45]
  415e87:	(bad)  
  415e88:	jp     0x415ee3
  415e8a:	xor    bh,bh
  415e8c:	test   eax,0xf9ff7693
  415e91:	cmc    
  415e92:	jmp    0x415e22
  415e94:	add    BYTE PTR [rax],al
  415e96:	add    BYTE PTR [rax],al
  415e98:	loop   0x415e7b
  415e9a:	fisubr WORD PTR [rdx-0x1c251c1a]
  415ea0:	lock out dx,eax
  415ea2:	in     eax,0xff
  415ea4:	out    0xe3,al
  415ea6:	fcos   
  415ea8:	ror    esp,cl
  415eaa:	mov    esp,0x778c99ff
  415eaf:	jmp    FWORD PTR [rdx+0x57]
  415eb2:	cmp    bh,bh
  415eb4:	fs push rdi
  415eb6:	cmp    bh,bh
  415eb8:	xchg   esi,eax
  415eb9:	xchg   ecx,eax
  415eba:	jne    0x415ebb
  415ebc:	cld    
  415ebd:	mul    cl
  415ebf:	call   rax
  415ec1:	mov    esp,0x5b79ffa7
  415ec6:	rex.X inc DWORD PTR [rdi-0x6d00c3a1]
  415ecd:	fs call QWORD PTR ss:[rbp-0x7600ce99]
  415ed5:	imul   esi,DWORD PTR [rax],0x2e6989ff
  415edb:	dec    DWORD PTR [rbp-0x7000d297]
  415ee1:	push   0x6289ff2f
  415ee6:	sub    al,0xff
  415ee8:	mov    BYTE PTR [rsi+rsi*1-0x1],ah
  415eec:	(bad)  
  415eed:	(bad)  
  415eee:	cmp    al,0xff
  415ef0:	xlat   BYTE PTR ds:[rbx]
  415ef1:	(bad)
  415ef4:	(bad)  
  415ef5:	push   rdi
  415ef7:	jb     0x415eed
  415ef9:	in     eax,dx
  415efa:	ffree  st(7)
  415efc:	icebp  
  415efd:	loop   0x415ecc
  415eff:	push   rbp
  415f01:	out    0xd0,eax
  415f03:	(bad)  
  415f04:	cld    
  415f05:	repnz fucom st(3)
  415f08:	(bad)  
  415f09:	stc    
  415f0a:	in     eax,dx
  415f0b:	stos   BYTE PTR es:[rdi],al
  415f0c:	cli    
  415f0d:	stc    
  415f0e:	hlt    
  415f0f:	push   rbp
  415f10:	cli    
  415f11:	stc    
  415f12:	stc    
  415f13:	cmp    DWORD PTR [rax],eax
	...
  415f31:	add    BYTE PTR [rax],al
  415f33:	add    cl,bh
  415f35:	clc    
  415f36:	idiv   DWORD PTR [rcx]
  415f38:	in     al,dx
  415f39:	out    0xe3,eax
  415f3b:	stos   BYTE PTR es:[rdi],al
  415f3c:	loop   0x415f17
  415f3e:	leave  
  415f3f:	inc    DWORD PTR [rdx-0x7e00b797]
  415f45:	pop    rbp
  415f46:	xor    bh,bh
  415f48:	mov    BYTE PTR [rdx+0x33],ah
  415f4b:	(bad)  
  415f4c:	jg     0x415fb0
  415f4e:	ds inc esi
  415f51:	mov    ebx,0xf9fcffab
  415f56:	in     al,dx
  415f57:	jb     0x415f59
  415f59:	add    BYTE PTR [rax],al
  415f5b:	add    BYTE PTR [rax],al
  415f5d:	add    BYTE PTR [rax],al
  415f5f:	add    bh,bl
  415f61:	fstp   st(3)
  415f63:	mov    es,ebx
  415f65:	ret    0xffbd
  415f68:	fcmovu st,st(0)
  415f6a:	(bad)  
  415f6b:	(bad)  
  415f6c:	cld    
  415f6d:	mul    ch
  415f6f:	jmp    FWORD PTR [rsi+0x65ff8ba1]
  415f75:	pop    rsp
  415f76:	(bad)  
  415f77:	call   QWORD PTR [rsi+0x50]
  415f7a:	xor    bh,bh
  415f7c:	rol    ah,1
  415f7e:	lods   al,BYTE PTR ds:[rsi]
  415f7f:	(bad)  
  415f80:	fcmovb st,st(6)
  415f82:	mov    cl,0xff
  415f84:	jp     0x415fe0
  415f86:	rex inc DWORD PTR [rbp-0x6e00c4a0]
  415f8d:	fs call QWORD PTR ss:[rsi+riz*2+0x6988ff32]
  415f96:	xor    bh,bh
  415f98:	mov    ch,BYTE PTR [rcx+0x2e]
  415f9b:	dec    DWORD PTR [rdi-0x6e00d298]
  415fa1:	push   0x638bff2f
  415fa6:	dec    DWORD PTR cs:[rcx-0x7d00c99c]
  415fad:	(bad)  
  415fae:	cmp    edi,edi
  415fb0:	sar    BYTE PTR [rbp-0x150c0057],1
  415fb6:	loopne 0x415fb7
  415fb8:	xchg   ebp,eax
  415fb9:	test   DWORD PTR [rdx-0x1],esi
  415fbc:	(bad)  
  415fbd:	ins    DWORD PTR es:[rdi],dx
  415fbe:	push   rdi
  415fbf:	inc    DWORD PTR [rcx-0x7700ab95]
  415fc5:	ja     0x416029
  415fc7:	call   FWORD PTR [rax-0x4f007e71]
  415fcd:	lods   al,BYTE PTR ds:[rsi]
  415fce:	movabs ds:0xf8f8fbffced1d5ff,eax
  415fd7:	jb     0x415fd9
	...
  415fed:	add    BYTE PTR [rax],al
  415fef:	add    bh,bh
  415ff1:	(bad)  
  415ff2:	call   QWORD PTR [rbp-0x32]
  415ff5:	mov    bl,0xff
  415ff8:	(bad)  
  415ff9:	stc    
  415ffa:	in     al,dx
  415ffb:	(bad)  
  415ffc:	pushf  
  415ffd:	mov    BYTE PTR [rdi-0x1],ch
  416000:	jl     0x41605f
  416002:	dec    DWORD PTR ss:[rcx-0x7100cf9e]
  416009:	gs xor bh,bh
  41600c:	sbb    DWORD PTR [rdi+0x34],0x4e697eff
  416013:	call   rdi
  416015:	retf   0xffb5
  416018:	clc    
  416019:	cmc    
  41601a:	jmp    0x416071
	...
  416028:	(bad)  
  41602a:	fld    TBYTE PTR [rdx-0x433d3c]
  416030:	clc    
  416031:	hlt    
  416032:	jmp    0x76cff536
  416037:	call   FWORD PTR [rbp+0x57]
  41603a:	cmp    edi,edi
  41603c:	(bad)  
  41603d:	retf   
  41603e:	mov    al,0xff
  416040:	(bad)  
  416041:	mov    dh,0x9c
  416043:	(bad)  
  416044:	jl     0x4160a0
  416046:	cmp    edi,edi
  416048:	mov    DWORD PTR [rcx+0x39],esp
  41604b:	call   QWORD PTR [rcx-0x6c00c99b]
  416051:	addr32 xor bh,bh
  416054:	mov    DWORD PTR [rdi+0x31],esp
  416057:	dec    DWORD PTR [rbx-0x7000cf98]
  41605d:	push   0x6890ff2e
  416062:	dec    DWORD PTR cs:[rdx-0x7800d29e]
  416069:	(bad)  
  41606a:	xor    bh,bh
  41606c:	(bad)  
  41606d:	(bad)  
  41606e:	ss inc ebp
  416071:	mov    bl,0x9c
  416073:	push   rbp
  416075:	out    dx,al
  416076:	loopne 0x416077
  416078:	jl     0x4160e7
  41607a:	pop    rbx
  41607b:	call   FWORD PTR [rsi+0x4d]
  41607e:	cmp    bh,bh
  416080:	js     0x4160e9
  416082:	push   rcx
  416083:	call   QWORD PTR [rcx-0x6f008d7d]
  416089:	mov    BYTE PTR [rbp-0x1],bh
  41608c:	test   DWORD PTR [rcx-0x77740087],eax
  416092:	xchg   bh,bh
  416094:	sar    DWORD PTR [rdi-0x8030043],0xf4
  41609b:	push   rbp
  41609c:	jmp    0x416084
  41609e:	in     al,0x1d
	...
  4160b0:	lock lock out dx,eax
  4160b3:	cmp    ebp,ebp
  4160b5:	in     al,dx
  4160b6:	jrcxz  0x41607f
  4160b8:	fcmove st,st(0)
  4160ba:	mov    al,0xff
  4160bc:	jp     0x41611c
  4160be:	cmp    eax,0x376589ff
  4160c3:	dec    DWORD PTR [rbp-0x6c00d49e]
  4160c9:	gs sub edi,edi
  4160cc:	nop
  4160cd:	imul   esi,DWORD PTR [rdi],0x355a79ff
  4160d3:	dec    DWORD PTR [rax-0x1b00ab8f]
  4160d9:	fld    st(3)
  4160db:	(bad)  
  4160dc:	std    
  4160dd:	stc    
  4160de:	in     al,dx
  4160df:	jb     0x4160c9
  4160e1:	out    0xe5,eax
  4160e3:	cmp    DWORD PTR [rax],eax
  4160e5:	add    BYTE PTR [rax],al
  4160e7:	add    BYTE PTR [rax],al
  4160e9:	add    BYTE PTR [rax],al
  4160eb:	add    al,dl
  4160ed:	ror    ch,1
  4160ef:	push   rax
  4160f1:	out    dx,eax
  4160f2:	call   0xffffffffde3052f6
  4160f7:	(bad)  
  4160f8:	fcmovnu st,st(1)
  4160fa:	mov    ebp,0xd3eef8ff
  4160ff:	call   FWORD PTR [rsi-0x7d009e80]
  416105:	pop    rsp
  416106:	cmp    bh,bh
  416108:	mov    WORD PTR [rcx+0x38],fs
  41610b:	call   QWORD PTR [rcx-0x6e00c99b]
  416111:	xor    di,di
  416114:	mov    esp,DWORD PTR [rsi+0x34]
  416117:	dec    DWORD PTR [rsi+riz*2+0x6690ff32]
  41611e:	xor    bh,bh
  416120:	xchg   ebx,eax
  416121:	push   0x6994ff2f
  416126:	xor    al,0xff
  416128:	mov    esp,DWORD PTR [rbp+0x35]
  41612b:	inc    DWORD PTR [rax-0x5e00cda3]
  416131:	lea    esi,[rax-0x1]
  416134:	stc    
  416135:	cmc    
  416136:	in     al,0xff
  416138:	(bad)  
  41613a:	ret    
  41613b:	inc    esi
  41613d:	mov    edx,0xdce4ffa9
  416142:	(bad)  
  416143:	(bad)  
  416144:	std    
  416145:	cli    
  416146:	lock mov ?,ebx
  416149:	stc    
  41614a:	repnz push rbp
  41614c:	hlt    
  41614d:	in     eax,dx
  41614e:	jmp    0xffffffffe92c50a8
  416153:	push   rbp
  416154:	in     al,0xe3
  416156:	fbstp  TBYTE PTR [rdx-0x7]
  416159:	div    cl
  41615b:	sbb    eax,0x39dee2e6
	...
  41616c:	(bad)  
  41616d:	(bad)  
  41616e:	(bad)  
  41616f:	cmp    esi,ecx
  416171:	iret   
  416172:	retf   0xf3ff
  416175:	hlt    
  416176:	out    0xe3,al
  416178:	cdq    
  416179:	jle    0x4161d6
  41617b:	(bad)  
  41617c:	jg     0x4161da
  41617e:	xor    bh,bh
  416180:	mov    fs,WORD PTR [rdi+0x35]
  416183:	call   QWORD PTR [rcx-0x6a00d39b]
  416189:	addr32 sub al,0xff
  41618c:	xchg   ecx,eax
  41618d:	addr32 xor bh,bh
  416190:	mov    DWORD PTR [rbp+0x36],esp
  416193:	(bad)  
  416194:	jns    0x4161f5
  416196:	cmp    edi,edi
  416198:	jg     0x416208
  41619a:	push   rbx
  41619b:	jmp    rax
  41619d:	(bad)  
  41619e:	sar    edi,0xe7
  4161a1:	jrcxz  0x416179
  4161a3:	jrcxz  0x416194
  4161a5:	out    dx,eax
  4161a6:	jmp    0x41621a
  4161a8:	stc    
  4161a9:	div    ecx
  4161ab:	jb     0x41618d
  4161ad:	fcmovnbe st,st(2)
  4161af:	push   rsp
  4161b1:	lock in al,0xff
  4161b4:	cli    
  4161b5:	clc    
  4161b6:	out    0xff,al
  4161b8:	rcl    ecx,cl
  4161ba:	mov    bh,0xff
  4161bc:	lods   al,BYTE PTR ds:[rsi]
  4161bd:	fwait
  4161be:	jge    0x4161bf
  4161c0:	jg     0x41621d
  4161c2:	dec    DWORD PTR ss:[rdi-0x6e00c69d]
  4161c9:	movsxd esi,DWORD PTR [rdi]
  4161cb:	call   QWORD PTR [rax-0x6f00ca9c]
  4161d1:	gs xor al,0xff
  4161d4:	lea    esp,[rbp+0x36]
  4161d7:	dec    DWORD PTR [rsi-0x6d00cb9b]
  4161dd:	data16 xor bh,bh
  4161e0:	xchg   esp,eax
  4161e1:	data16 xor bh,bh
  4161e4:	xchg   ecx,eax
  4161e5:	gs (bad) 
  4161e7:	dec    DWORD PTR [rsi-0x7900cb9a]
  4161ed:	(bad)  
  4161ee:	xor    al,0xff
  4161f0:	ja     0x416253
  4161f2:	rex call FWORD PTR [rbx-0x1300856f]
  4161f9:	out    0xd4,eax
  4161fb:	(bad)  
  4161fc:	(bad)  
  4161fd:	(bad)  
  4161fe:	(bad)  
  4161ff:	sbb    eax,0xaad5dadc
  416204:	div    dh
  416206:	hlt    
  416207:	sbb    eax,0x0
	...
  416228:	(bad)  
  416229:	(bad)  
  41622a:	call   FWORD PTR [rip+0xffffffff8ee4e5e5]        # 0xffffffff8f264815
  416230:	cmc    
  416231:	lock jrcxz 0x4161fb
  416234:	mov    ebp,0x79ffa0b5
  416239:	pop    rbx
  41623a:	xor    edi,edi
  41623c:	mov    ah,BYTE PTR [rsi+0x39]
  41623f:	dec    DWORD PTR [rbp+riz*2+0x6792ff34]
  416246:	xor    bh,bh
  416248:	xchg   ebx,eax
  416249:	addr32 xor bh,bh
  41624c:	xchg   ecx,eax
  41624d:	addr32 xor edi,edi
  416250:	(bad)  
  416251:	gs xor edi,edi
  416254:	js     0x4162b1
  416256:	xor    edi,edi
  416258:	jle    0x4162c6
  41625a:	push   rax
  41625b:	jmp    rcx
  41625d:	xlat   BYTE PTR ds:[rbx]
  41625e:	mov    edi,0xe5f8feff
  416263:	(bad)  
  416264:	mov    ebp,0x7eff9fb1
  416269:	jae    0x4162c9
  41626b:	jmp    FWORD PTR [rsp+rbx*2+0x42]
  41626f:	(bad)  
  416270:	mov    edi,0xfeff90ad
  416275:	cld    
  416276:	loop   0x416277
  416278:	jle    0x4162f5
  41627a:	(bad)  
  41627b:	jmp    FWORD PTR [rbx+0x58]
  41627e:	(bad)  
  41627f:	dec    DWORD PTR [rsi-0x6b00c59a]
  416285:	movsxd esi,DWORD PTR [rbx]
  416287:	call   QWORD PTR [rsp+riz*2+0x6590ff33]
  41628e:	xor    al,0xff
  416290:	lea    esp,[rsi+rsi*1-0x1]
  416294:	mov    fs,WORD PTR [rbx+0x38]
  416297:	call   QWORD PTR [rcx-0x6a00c99c]
  41629d:	gs xor bh,bh
  4162a0:	xchg   esi,eax
  4162a1:	gs xor bh,bh
  4162a4:	xchg   esi,eax
  4162a5:	addr32 xor edi,edi
  4162a8:	nop
  4162a9:	data16 xor bh,bh
  4162ac:	mov    ah,BYTE PTR [rbx+rsi*1-0x1]
  4162b0:	jbe    0x416311
  4162b2:	cmp    edi,edi
  4162b4:	xchg   ebx,eax
  4162b5:	mov    DWORD PTR [rbp-0x1],ebp
  4162b8:	repnz in eax,dx
  4162ba:	(bad)  
  4162bc:	lock out dx,eax
  4162be:	in     eax,0xaa
  4162c0:	lock out dx,eax
  4162c2:	jmp    0x4162fd
  4162c4:	(bad)  
  4162c6:	fisttp DWORD PTR [rsi+0x0]
	...
  4162e8:	(bad)  
  4162e9:	(bad)  
  4162ea:	call   QWORD PTR [rbp-0x47]
  4162ed:	mov    bl,0xb2
  4162ef:	(bad)  
  4162f0:	(bad)  
  4162f1:	std    
  4162f2:	repnz (bad) 
  4162f4:	mov    DWORD PTR [rax+0x62],edi
  4162f7:	(bad)  
  4162f8:	js     0x416353
  4162fa:	xor    bh,bh
  4162fc:	mov    BYTE PTR [rsi+0x3a],ah
  4162ff:	inc    DWORD PTR [rsi-0x7400cb9e]
  416305:	movsxd esi,DWORD PTR [rdx]
  416307:	dec    DWORD PTR [rsi-0x6f00ce9b]
  41630d:	push   0x628bff33
  416312:	sub    eax,0x3b6584ff
  416317:	dec    ebp
  416319:	mov    ebp,0xfaffffa0
  41631e:	loop   0x41631f
  416320:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
  416321:	xchg   esi,eax
  416322:	jg     0x416323
  416324:	addr32 push rdi
  416326:	rex push QWORD PTR [rdx+0x60]
  41632a:	rex.XB push QWORD PTR [r11+0x5b]
  41632e:	(bad)  
  41632f:	call   FWORD PTR [rsi+rdi*2-0x60000af]
  416336:	xlat   BYTE PTR ds:[rbx]
  416337:	push   QWORD PTR [rbx+0x6eff9db3]
  41633d:	pop    rcx
  41633e:	(bad)  
  41633f:	call   QWORD PTR [rbx-0x6900c598]
  416345:	movsxd ebp,DWORD PTR [rdi]
  416347:	call   QWORD PTR [rsi-0x6f00ce9b]
  41634d:	gs xor edi,edi
  416350:	lea    esp,[rdi+rsi*1-0x1]
  416354:	(bad)  
  416355:	(bad)  
  416356:	cmp    edi,edi
  416358:	xchg   edx,eax
  416359:	(bad)  
  41635a:	cmp    bh,bh
  41635c:	xchg   esi,eax
  41635d:	fs xor edi,edi
  416360:	cwde   
  416361:	gs xor bh,bh
  416364:	cdq    
  416365:	push   0x34
  416367:	call   QWORD PTR [rbx-0x7700cc97]
  41636d:	(bad)  
  41636e:	dec    DWORD PTR cs:[rax-0x1d00b98f]
  416375:	faddp  st(2),st
  416377:	(bad)  
  416378:	(bad)  
  416379:	push   rdx
  41637b:	dec    esp
  41637d:	retf   
  41637e:	sar    edi,0xd5
  416381:	xlat   BYTE PTR ds:[rbx]
  416382:	fdivr  st,st(7)
  416384:	rcl    ebx,cl
  416386:	(bad)  
  416387:	inc    DWORD PTR [rax]
	...
  4163a5:	add    BYTE PTR [rax],al
  4163a7:	add    dl,dh
  4163a9:	icebp  
  4163aa:	icebp  
  4163ab:	mov    ss,esi
  4163ad:	retf   
  4163ae:	(bad)  
  4163af:	(bad)  
  4163b0:	jmp    0x41638e
  4163b2:	leave  
  4163b3:	(bad)  
  4163b4:	jnp    0x416418
  4163b6:	rex.RB inc DWORD PTR [r15-0x7400cb9d]
  4163bd:	fs xor edi,edi
  4163c0:	mov    fs,WORD PTR [rsi+0x32]
  4163c3:	call   QWORD PTR [rbx-0x7000cc98]
  4163c9:	xor    di,di
  4163cc:	mov    esp,DWORD PTR [rsp+rsi*1-0x1]
  4163d0:	sbb    BYTE PTR [rbp+0x30],0xff
  4163d4:	movabs ds:0xcbffdef3faff6b8b,eax
  4163dd:	mov    edx,0x5f77ff9e
  4163e2:	cmp    al,0xff
  4163e4:	jl     0x416445
  4163e6:	cmp    bh,bh
  4163e8:	test   DWORD PTR [rsi+0x3d],esp
  4163eb:	inc    DWORD PTR [rbx-0x7300c69e]
  4163f1:	imul   edi,DWORD PTR [rdi],0xb0cee2ff
  4163f7:	(bad)  
  4163f8:	in     al,dx
  4163f9:	jmp    0x4163cf
  4163fb:	(bad)  
  4163fc:	jle    0x41646c
  4163fe:	inc    QWORD PTR [rbx-0x6800d09f]
  416405:	gs xor bh,bh
  416408:	(bad)  
  416409:	fs (bad) 
  41640b:	dec    DWORD PTR [rdi-0x7800cd9c]
  416411:	gs dec DWORD PTR ss:[rbx+riz*2+0x6491ff38]
  41641a:	call   QWORD PTR ss:[rsi-0x6700cf9b]
  416421:	call   DWORD PTR cs:[rbx-0x7100cb96]
  416429:	movsxd esi,DWORD PTR [rcx]
  41642b:	inc    DWORD PTR [rdx-0x4000cea4]
  416431:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
  416432:	xchg   bh,bh
  416434:	sti    
  416435:	mul    cl
  416437:	jmp    rsi
  416439:	in     al,0xd2
  41643b:	jmp    rdx
  41643d:	in     al,0xd8
  41643f:	jmp    FWORD PTR [rax-0x8005e5a]
  416445:	repnz icebp 
  416447:	(bad)  
  416448:	in     eax,0xe3
  41644a:	loop   0x416485
	...
  416464:	(bad)  
  416465:	(bad)  
  416466:	(bad)  
  416467:	cmp    ebx,ecx
  416469:	leave  
  41646a:	(bad)  
  41646b:	push   rdi
  41646d:	icebp  
  41646e:	(bad)  
  416470:	mov    edi,0x79ff91ad
  416475:	pop    rsp
  416476:	cmp    bh,bh
  416478:	xchg   edx,eax
  416479:	addr32 xor bh,bh
  41647c:	xchg   esp,eax
  41647d:	data16 (bad) 
  41647f:	call   QWORD PTR [rbp-0x6a00d299]
  416485:	push   0x658fff2e
  41648a:	(bad)  
  41648b:	dec    DWORD PTR [rcx+0x7bff3664]
  416491:	pop    rbp
  416492:	ss inc esi
  416495:	mov    dh,0x9f
  416497:	(bad)  
  416498:	cli    
  416499:	repz loopne 0x41649b
  41649c:	xchg   ebx,eax
  41649d:	jg     0x4164ff
  41649f:	(bad)  
  4164a0:	jl     0x416500
  4164a2:	xor    edi,edi
  4164a4:	mov    esp,DWORD PTR [rbx+0x31]
  4164a7:	dec    DWORD PTR [rcx-0x7600d09f]
  4164ad:	movsxd edi,DWORD PTR [rcx]
  4164af:	(bad)  
  4164b0:	jnp    0x41650a
  4164b2:	xor    eax,0x758da7ff
  4164b7:	(bad)  
  4164b8:	(bad)  
  4164b9:	(bad)  
  4164ba:	in     eax,0xff
  4164bc:	test   eax,0x75ff78a0
  4164c1:	pop    rsi
  4164c2:	sub    edi,edi
  4164c4:	xchg   ebp,eax
  4164c5:	gs (bad) 
  4164c7:	call   FWORD PTR [rsi-0x6f00d09d]
  4164cd:	fs xor edi,edi
  4164d0:	(bad)  
  4164d1:	addr32 xor al,0xff
  4164d4:	mov    WORD PTR [rbp+0x35],fs
  4164d7:	call   QWORD PTR [rcx-0x6900cd9a]
  4164dd:	call   FWORD PTR cs:[ecx-0x6b00d299]
  4164e5:	movsxd ebp,DWORD PTR [rsi]
  4164e7:	dec    DWORD PTR [rdx+riz*2+0x6c8fff36]
  4164ee:	rex.W push rbx
  4164f1:	(bad)  
  4164f3:	(bad)  
  4164f4:	fcmovbe st,st(3)
  4164f6:	ret    
  4164f7:	dec    DWORD PTR [rbx-0xc008574]
  4164fd:	clc    
  4164fe:	call   0xffffffff88d70302
  416503:	call   rsi
  416505:	(bad)  
  416506:	mov    edi,0xe5eaeeff
  41650b:	stos   BYTE PTR es:[rdi],al
	...
  416524:	(bad)  
  416525:	(bad)  
  416526:	call   QWORD PTR [rbp-0x42]
  416529:	mov    ebx,0xf6feffb7
  41652e:	in     al,0xff
  416530:	popf   
  416531:	test   DWORD PTR [rax-0x1],ebp
  416534:	jns    0x416591
  416536:	xor    al,0xff
  416538:	(bad)  
  416539:	gs xor edi,edi
  41653c:	xchg   ebx,eax
  41653d:	data16 xor bh,bh
  416540:	xchg   esp,eax
  416541:	call   QWORD PTR cs:[edi+eiz*2+0x638eff2e]
  41654a:	dec    DWORD PTR cs:[rcx-0x7900c99c]
  416551:	addr32 rex (bad) 
  416554:	jmp    0x416530
  416556:	sar    edi,0xdc
  416559:	rol    eax,cl
  41655b:	push   QWORD PTR [rbp+0x60]
  41655e:	rex (bad) 
  416560:	jg     0x4165c2
  416562:	xor    eax,0x33658cff
  416567:	dec    DWORD PTR [rsi-0x7300ca99]
  41656d:	cmp    di,di
  416570:	jl     0x4165cb
  416572:	xor    al,0xff
  416574:	and    BYTE PTR [rcx+rcx*2-0x1],0xf2
  416579:	in     al,0xcd
  41657b:	dec    esp
  41657d:	(bad)  
  41657e:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
  41657f:	(bad)  
  416580:	jp     0x4165e3
  416582:	xor    bh,bh
  416584:	xchg   edx,eax
  416585:	movsxd esi,DWORD PTR [rcx]
  416587:	call   FWORD PTR [rbp-0x6d00ce9c]
  41658d:	data16 xor bh,bh
  416590:	test   BYTE PTR [rsi+0x32],ah
  416593:	call   QWORD PTR [rdx-0x6a00ca9d]
  416599:	gs xor bh,bh
  41659c:	xchg   edi,eax
  41659d:	gs xor bh,bh
  4165a0:	xchg   esi,eax
  4165a1:	data16 xor bh,bh
  4165a4:	xchg   ebx,eax
  4165a5:	push   0x5d81ff35
  4165aa:	xor    bh,bh
  4165ac:	movabs eax,ds:0x9fffe3f9ffff658a
  4165b5:	lea    edi,[rbx-0x1]
  4165b8:	ins    DWORD PTR es:[rdi],dx
  4165b9:	ins    DWORD PTR es:[rdi],dx
  4165ba:	pop    rax
  4165bb:	push   rsp
  4165bd:	mul    esp
  4165bf:	push   QWORD PTR [rdi-0x76006052]
  4165c5:	ja     0x416631
  4165c7:	(bad)  
  4165c8:	sti    
  4165c9:	icebp  
  4165ca:	out    0xc7,al
  4165cc:	hlt    
  4165cd:	repz icebp 
  4165cf:	sbb    eax,0x0
	...
  4165e4:	(bad)  
  4165e5:	(bad)  
  4165e6:	call   QWORD PTR [rbp-0x29]
  4165e9:	ror    ebx,cl
  4165eb:	push   rbx
  4165ed:	out    0xd1,al
  4165ef:	(bad)  
  4165f0:	jg     0x416657
  4165f2:	inc    DWORD PTR [r11+r12*2+0x6791ff3a]
  4165fa:	xor    bh,bh
  4165fc:	xchg   edx,eax
  4165fd:	data16 xor bh,bh
  416600:	xchg   esp,eax
  416601:	call   QWORD PTR cs:[ebp-0x7000d198]
  416609:	fs (bad) 
  41660b:	dec    DWORD PTR [rcx-0x7500ca9d]
  416611:	imul   eax,DWORD PTR [rdi+rdi*8-0xd],0xffffffe0
  416616:	(bad)  
  416617:	dec    edi
  416619:	(bad)  
  41661a:	scas   al,BYTE PTR es:[rdi]
  41661b:	push   QWORD PTR [rsi+rbx*2+0x3d]
  41661f:	inc    DWORD PTR [rbx+riz*2+0x6790ff37]
  416626:	xor    al,0xff
  416628:	lea    esp,[rax+rsi*1-0x1]
  41662c:	mov    DWORD PTR [rdx+0x36],esp
  41662f:	inc    DWORD PTR [rcx+0x76ff365e]
  416635:	push   rdi
  416636:	cmp    bh,bh
  416638:	retf   0xa1bc
  41663b:	jmp    rdi
  41663d:	loop   0x4165fb
  41663f:	(bad)  
  416640:	jg     0x4166aa
  416642:	cmp    edi,edi
  416644:	lea    esp,[rax+0x31]
  416647:	call   FWORD PTR [rbp-0x6b00ca9b]
  41664d:	addr32 xor al,0xff
  416650:	xchg   BYTE PTR [rdi+rbp*1-0x1],ah
  416654:	cdq    
  416655:	movsxd esi,DWORD PTR [rdx]
  416657:	call   FWORD PTR [rdx-0x6800cd9c]
  41665d:	gs xor bh,bh
  416660:	nop
  416661:	fs xor edi,edi
  416664:	xchg   DWORD PTR [rbx+0x33],esp
  416667:	(bad)  
  416668:	jnp    0x4166c9
  41666a:	xor    al,0xff
  41666c:	rol    ah,cl
  41666e:	lahf   
  41666f:	jmp    rdx
  416671:	iret   
  416672:	mov    ch,0xff
  416674:	jno    0x4166d0
  416676:	rex.XB jmp FWORD PTR [r14+0x6b]
  41667a:	push   rcx
  41667b:	push   rax
  41667d:	lock fdivr st,st(7)
  416680:	leave  
  416681:	mov    edi,0x526affab
  416686:	rex.X call rsi
  416689:	ret    
  41668a:	mov    ah,0xff
  41668c:	repz hlt 
  41668e:	jmp    0x41661e
	...
  4166a8:	out    dx,al
  4166a9:	out    0xdb,al
  4166ab:	dec    esi
  4166ad:	mov    ebx,0x5e7bffa3
  4166b2:	cmp    edi,edi
  4166b4:	mov    esp,DWORD PTR [rdi+0x39]
  4166b7:	call   QWORD PTR [rax-0x6d00ce9a]
  4166bd:	gs (bad) 
  4166bf:	call   QWORD PTR [rbx-0x6a00d29a]
  4166c5:	push   0x6590ff2f
  4166ca:	xor    bh,bh
  4166cc:	mov    BYTE PTR [rbx+0x34],ah
  4166cf:	inc    DWORD PTR [rdi-0x1100be98]
  4166d5:	ffree  st(3)
  4166d7:	(bad)  
  4166d8:	fmul   st,st(4)
  4166da:	mov    ch,0xff
  4166dc:	ja     0x41673d
  4166de:	cmp    al,0xff
  4166e0:	test   BYTE PTR [rdx+0x34],ah
  4166e3:	call   QWORD PTR [rax-0x7200cd9b]
  4166e9:	(bad)  
  4166ea:	dec    DWORD PTR cs:[rsi-0x7700c89b]
  4166f1:	fs cmp edi,edi
  4166f4:	js     0x41674d
  4166f6:	cmp    bh,bh
  4166f8:	lods   al,BYTE PTR ds:[rsi]
  4166f9:	xchg   ebp,eax
  4166fa:	jp     0x4166fb
  4166fc:	in     eax,dx
  4166fd:	in     eax,0xc3
  4166ff:	(bad)  
  416700:	jle    0x41676c
  416702:	rex.X dec DWORD PTR [rcx-0x6600cba1]
  416709:	fs call QWORD PTR ss:[rbp-0x7400cc9a]
  416711:	gs xor bh,bh
  416714:	pushf  
  416715:	movsxd esi,DWORD PTR [rcx]
  416717:	call   FWORD PTR [rcx-0x6c00cd9c]
  41671d:	movsxd esi,DWORD PTR [rip+0x37648bff]        # 0x37a5f322
  416723:	(bad)  
  416724:	jnp    0x416782
  416726:	xor    edi,edi
  416728:	xchg   edx,eax
  416729:	jge    0x416780
  41672b:	push   rbp
  41672d:	in     eax,dx
  41672e:	enter  0xa2ff,0x8c
  416732:	ins    DWORD PTR es:[rdi],dx
  416733:	push   QWORD PTR [rbx+0x57]
  416736:	cmp    edi,edi
  416738:	jnp    0x4167ad
  41673a:	push   rsp
  41673b:	(bad)  
  41673c:	sti    
  41673d:	stc    
  41673e:	fdivp  st(7),st
  416740:	(bad)  
  416741:	mov    ch,0x9d
  416743:	push   QWORD PTR [rax+0x54]
  416746:	(bad)  
  416747:	call   FWORD PTR [rdx-0xa009280]
  41674d:	lock (bad) 
  416750:	cld    
  416751:	cld    
  416752:	cli    
  416753:	sbb    eax,0x0
	...
  416764:	out    dx,al
  416765:	in     eax,dx
  416766:	jmp    0x416785
  416768:	imul   ebp
  41676a:	fdivp  st(7),st
  41676c:	stos   DWORD PTR es:[rdi],eax
  41676d:	xchg   ebp,eax
  41676e:	jp     0x41676f
  416770:	jle    0x4167d0
  416772:	xor    eax,0x33658dff
  416777:	dec    DWORD PTR [rdi-0x6e00cf9b]
  41677d:	gs call QWORD PTR cs:[rdx-0x6a00d29b]
  416785:	call   QWORD PTR cs:[eax-0x7700cf9b]
  41678d:	movsxd esi,DWORD PTR [rip+0x3c6483ff]        # 0x3ca5eb92
  416793:	jmp    rdi
  416795:	(bad)  
  416796:	mov    edx,0xc3dbe6ff
  41679b:	(bad)  
  41679c:	jge    0x416802
  41679e:	rex inc DWORD PTR [rsi-0x6e00cb9d]
  4167a5:	fs (bad) 
  4167a7:	call   QWORD PTR [rbx-0x7100cf9a]
  4167ad:	fs xor al,0xff
  4167b0:	mov    DWORD PTR [rax+rdi*1-0x1],esp
  4167b4:	jle    0x416810
  4167b6:	cmp    bh,bh
  4167b8:	(bad)  
  4167b9:	and    DWORD PTR [rsi-0x1],0xffc6e5eb
  4167c0:	sub    BYTE PTR [rdi+0x4d],0xff
  4167c4:	xchg   BYTE PTR [rax+rdi*1-0x1],bl
  4167c8:	cwde   
  4167c9:	(bad)  
  4167ca:	cmp    bh,bh
  4167cc:	xchg   ebp,eax
  4167cd:	fs xor bh,bh
  4167d0:	nop
  4167d1:	xor    di,di
  4167d4:	cwde   
  4167d5:	movsxd ebp,DWORD PTR [rsi]
  4167d7:	call   QWORD PTR [rbp-0x7200cd9d]
  4167dd:	fs cmp bh,bh
  4167e0:	and    DWORD PTR [rbx+0x3c],0xffffffff
  4167e4:	je     0x416842
  4167e6:	(bad)  
  4167e7:	dec    ebx
  4167e9:	mov    esp,0xe5eaff98
  4167ee:	sar    bh,0x7e
  4167f1:	gs rex (bad) 
  4167f4:	js     0x41684f
  4167f6:	(bad)  
  4167f7:	dec    DWORD PTR [rcx-0x200a482]
  4167fd:	sti    
  4167fe:	(bad)  
  416800:	mov    ebx,0x76ff8aa8
  416805:	push   rbp
  416806:	cmp    bh,bh
  416808:	jnp    0x416867
  41680a:	rex.R (bad) 
  41680c:	fmul   st,st(4)
  41680e:	mov    dl,0xff
  416810:	cld    
  416811:	cld    
  416812:	hlt    
  416813:	jb     0x416815
	...
  416821:	add    BYTE PTR [rax],al
  416823:	add    bh,ah
  416825:	in     al,0xe1
  416827:	jrcxz  0x41681d
  416829:	jmp    0x416806
  41682b:	dec    DWORD PTR [rbp-0x7b00a88b]
  416831:	(bad)  
  416832:	xor    edi,edi
  416834:	nop
  416835:	gs (bad) 
  416837:	call   QWORD PTR [rax-0x6e00cf9b]
  41683d:	gs call QWORD PTR cs:[rdx-0x6a00d39b]
  416845:	push   0x6691ff2f
  41684a:	xor    edi,edi
  41684c:	mov    DWORD PTR [rbp+rsi*1-0x1],esp
  416850:	jle    0x4168b1
  416852:	cmp    bh,bh
  416854:	fld    st(6)
  416856:	stos   BYTE PTR es:[rdi],al
  416857:	push   rax
  416859:	in     eax,0xcb
  41685b:	inc    DWORD PTR [rdx+rbp*2+0x6084ff45]
  416862:	call   QWORD PTR cs:[rsi-0x6900cd97]
  416869:	push   0x6490ff31
  41686e:	xor    edi,edi
  416870:	mov    BYTE PTR [rdx+0x36],ah
  416873:	(bad)  
  416874:	jge    0x4168cd
  416876:	call   QWORD PTR ss:[rdi-0x13009e85]
  41687d:	in     eax,0xc8
  41687f:	inc    DWORD PTR [rdx-0x7c00a98d]
  416885:	pop    rbx
  416886:	cmp    al,0xff
  416888:	xchg   edi,eax
  416889:	(bad)  
  41688a:	cmp    edi,edi
  41688c:	xchg   esi,eax
  41688d:	fs xor bh,bh
  416890:	xchg   ecx,eax
  416891:	call   QWORD PTR cs:[ecx-0x7200d29c]
  416899:	movsxd esi,DWORD PTR [rdx]
  41689b:	inc    DWORD PTR [rsi+0x79ff3a65]
  4168a1:	(bad)  
  4168a2:	cmp    eax,0x4c6c82ff
  4168a7:	(bad)  
  4168a8:	cli    
  4168a9:	out    dx,al
  4168aa:	int    0xff
  4168ac:	iret   
  4168ad:	ret    0xff9c
  4168b0:	jns    0x41690c
  4168b2:	xor    al,0xff
  4168b4:	jle    0x416911
  4168b6:	call   FWORD PTR ss:[rsi-0x9770]
  4168bd:	(bad)  
  4168be:	xlat   BYTE PTR ds:[rbx]
  4168bf:	jmp    FWORD PTR [rbx-0x7e008e6c]
  4168c5:	pop    rsp
  4168c6:	cmp    eax,0x3c5a7bff
  4168cb:	jmp    QWORD PTR [rdi-0x4008769]
  4168d1:	std    
  4168d2:	repnz stos BYTE PTR es:[rdi],al
	...
  4168e4:	call   0xffffffffdd2547cd
  4168e9:	int    0xbb
  4168eb:	(bad)  
  4168ec:	jp     0x41694d
  4168ee:	dec    DWORD PTR ds:[rax-0x6b00ce9f]
  4168f5:	addr32 (bad) 
  4168f7:	call   QWORD PTR [rdx-0x6f00cd99]
  4168fd:	fs call QWORD PTR cs:[rdx-0x6a00d39b]
  416905:	push   0x6691ff2f
  41690a:	xor    edi,edi
  41690c:	mov    DWORD PTR [rsi+rsi*1-0x1],esp
  416910:	js     0x41696b
  416912:	xor    bh,bh
  416914:	int    0xbb
  416916:	sahf   
  416917:	push   rsi
  416919:	in     eax,dx
  41691a:	sar    bh,cl
  41691c:	mov    WORD PTR [rax+0x4b],?
  41691f:	dec    DWORD PTR [rax-0x6c00ce9e]
  416925:	gs call QWORD PTR cs:[rsi-0x6d00cf99]
  41692d:	gs xor edi,edi
  416930:	mov    WORD PTR [rsi+rsi*1-0x1],fs
  416934:	sbb    BYTE PTR [rcx+0x37],0xff
  416938:	lahf   
  416939:	and    DWORD PTR [rsi-0x1],0xffffffeb
  41693d:	in     al,0xc8
  41693f:	(bad)  
  416940:	jg     0x4169b2
  416942:	push   rbp
  416943:	inc    DWORD PTR [rdx-0x6a00c0a5]
  416949:	(bad)  
  41694a:	cmp    al,0xff
  41694c:	xchg   esi,eax
  41694d:	fs xor edi,edi
  416950:	xchg   ebx,eax
  416951:	addr32 (bad) 
  416953:	dec    DWORD PTR [rdi-0x7700cf96]
  416959:	push   0x647dff35
  41695e:	cmp    edi,edi
  416960:	outs   dx,DWORD PTR ds:[rsi]
  416961:	pop    rbx
  416962:	cmp    bh,bh
  416964:	mov    bh,0xa8
  416966:	mov    edi,edi
  416968:	(bad)  
  416969:	cld    
  41696a:	fdivp  st(7),st
  41696c:	sahf   
  41696d:	test   DWORD PTR [rax-0x1],esp
  416970:	sbb    DWORD PTR [rsi+0x34],0xffffffff
  416974:	sbb    BYTE PTR [rbx+0x31],0xff
  416978:	stos   DWORD PTR es:[rdi],eax
  416979:	fwait
  41697a:	jno    0x41697b
  41697c:	(bad)  
  41697d:	cld    
  41697e:	(bad)  
  41697f:	call   FWORD PTR [rbp-0x7e00a17b]
  416985:	pop    rsp
  416986:	cmp    bh,bh
  416988:	(bad)  
  416989:	pop    rdi
  41698a:	cmp    eax,0x42677bff
  41698f:	call   rax
  416991:	sar    DWORD PTR [rbx-0x3010301],1
  416997:	push   rbp
	...
  4169a4:	repnz imul esp
  4169a7:	stos   BYTE PTR es:[rdi],al
  4169a8:	mov    dh,0xa6
  4169aa:	(bad)  
  4169ab:	(bad)  
  4169ac:	jl     0x416a03
  4169ae:	xor    edi,edi
  4169b0:	nop
  4169b1:	fs xor al,0xff
  4169b4:	nop
  4169b5:	data16 (bad) 
  4169b7:	call   QWORD PTR [rcx-0x6d00ca9b]
  4169bd:	gs xor bh,bh
  4169c0:	xchg   esp,eax
  4169c1:	data16 xor bh,bh
  4169c4:	xchg   ebp,eax
  4169c5:	dec    DWORD PTR cs:[esi-0x7700d29c]
  4169cd:	movsxd esi,DWORD PTR [rdx]
  4169cf:	(bad)  
  4169d0:	jnp    0x416a30
  4169d2:	xor    bh,bh
  4169d4:	sar    DWORD PTR [rdi+rbx*4-0x2f180901],1
  4169db:	dec    DWORD PTR [rdi+rbp*2+0x5f82ff50]
  4169e2:	(bad)  
  4169e3:	dec    DWORD PTR [rcx-0x7300cd9e]
  4169e9:	(bad)  
  4169ea:	xor    bh,bh
  4169ec:	mov    esp,DWORD PTR [rcx+0x30]
  4169ef:	dec    DWORD PTR [rcx+riz*2+0x5875ff30]
  4169f6:	xor    eax,0x7892a0ff
  4169fb:	push   rax
  4169fd:	jrcxz  0x4169c1
  4169ff:	dec    DWORD PTR [rdi-0x7800b990]
  416a05:	(bad)  
  416a06:	xor    eax,0x38648cff
  416a0b:	dec    DWORD PTR [rdx-0x7500c79c]
  416a11:	movsxd edi,DWORD PTR [rax]
  416a13:	call   QWORD PTR [rdx-0x6d00ce99]
  416a19:	ins    BYTE PTR es:[rdi],dx
  416a1a:	cmp    edi,edi
  416a1c:	(bad)  
  416a1d:	(bad)  
  416a1e:	cmp    edi,edi
  416a20:	jg     0x416a87
  416a22:	rex.XB jmp r11
  416a25:	fnstcw WORD PTR [rdx-0x431f1401]
  416a2b:	(bad)  
  416a2c:	jge    0x416a93
  416a2e:	cmp    bh,bh
  416a30:	mov    DWORD PTR [rax+0x35],ebp
  416a33:	(bad)  
  416a34:	jg     0x416a94
  416a36:	(bad)  
  416a37:	jmp    FWORD PTR [rbp-0x8163]
  416a3d:	sti    
  416a3e:	jrcxz  0x416a3f
  416a40:	xchg   ebp,eax
  416a41:	sbb    DWORD PTR [rdi-0x1],0xffffff80
  416a45:	(bad)  
  416a46:	sub    eax,0x2f6685ff
  416a4b:	push   QWORD PTR [rsi+0x5c]
  416a4e:	sub    edi,edi
  416a50:	test   al,0x98
  416a52:	cmp    bh,0xfb
  416a55:	stc    
  416a56:	hlt    
  416a57:	stos   BYTE PTR es:[rdi],al
	...
  416a64:	(bad)  
  416a65:	lock loopne 0x416a4b
  416a68:	lahf   
  416a69:	mov    WORD PTR [rsi-0x1],?
  416a6c:	jg     0x416ac4
  416a6e:	xor    edi,edi
  416a70:	xchg   ecx,eax
  416a71:	fs xor eax,0x2d648cff
  416a77:	call   QWORD PTR [rax-0x6d00ca9c]
  416a7d:	gs xor bh,bh
  416a80:	xchg   esp,eax
  416a81:	data16 xor bh,bh
  416a84:	xchg   ebp,eax
  416a85:	call   QWORD PTR cs:[eax-0x7600d09a]
  416a8d:	gs xor al,0xff
  416a90:	jle    0x416af4
  416a92:	xor    eax,0xa5c3d7ff
  416a97:	push   rbx
  416a99:	out    0xcf,eax
  416a9b:	inc    DWORD PTR [rbp+rbp*2+0x5c79ff4c]
  416aa2:	inc    DWORD PTR ss:[rdx-0x7e00cba0]
  416aa9:	(bad)  
  416aaa:	xor    edi,edi
  416aac:	test   BYTE PTR [rbx+0x37],ah
  416aaf:	inc    DWORD PTR [rdx+0x67ff3861]
  416ab5:	push   rcx
  416ab6:	xor    bh,bh
  416ab8:	mov    ah,0xa8
  416aba:	(bad)  
  416abb:	(bad)  
  416abc:	out    dx,al
  416abd:	loope  0x416a7c
  416abf:	dec    DWORD PTR [rdx+rbp*2+0x6389ff3e]
  416ac6:	xor    edi,edi
  416ac8:	mov    fs,WORD PTR [rdi+rsi*1-0x1]
  416acc:	mov    fs,WORD PTR [rbx+0x38]
  416acf:	dec    DWORD PTR [rsi-0x6b00c69d]
  416ad5:	xor    di,di
  416ad8:	lea    esp,[rsi+0x33]
  416adb:	(bad)  
  416adc:	jge    0x416b3b
  416ade:	xor    al,0xff
  416ae0:	mov    dh,BYTE PTR [rdx+0x50]
  416ae3:	(bad)  
  416ae4:	(bad)  
  416ae5:	lock sar edi,1
  416ae8:	retf   
  416ae9:	shl    DWORD PTR [rbx+0x365a6cff],0xff
  416af0:	jnp    0x416b52
  416af2:	xor    edi,edi
  416af4:	js     0x416b52
  416af6:	sub    eax,0x7894a1ff
  416afb:	(bad)  
  416afc:	(bad)  
  416afd:	clc    
  416afe:	loope  0x416aff
  416b00:	sahf   
  416b01:	mov    ah,BYTE PTR [rdi-0x1]
  416b04:	test   BYTE PTR [rbx+0x2e],ah
  416b07:	dec    DWORD PTR [rbx+0x7dff3068]
  416b0d:	pop    rsi
  416b0e:	sub    bh,bh
  416b10:	xchg   DWORD PTR [rax+0x55],esi
  416b13:	push   rax
  416b15:	(bad)  
  416b16:	fsubrp st(3),st
  416b18:	cmc    
  416b19:	cmc    
  416b1a:	repz sbb eax,0x0
  416b20:	(bad)  
  416b21:	out    dx,al
  416b22:	jmp    0xffffffffd6274e99
  416b27:	dec    DWORD PTR [rbp+rsi*2+0x5c86ff5d]
  416b2e:	cmp    edi,edi
  416b30:	xchg   ebx,eax
  416b31:	dec    DWORD PTR ss:[esi-0x6f00d198]
  416b39:	gs xor eax,0x326592ff
  416b3f:	call   QWORD PTR [rsi+riz*2+0x6794ff30]
  416b46:	dec    DWORD PTR cs:[rsi-0x7800d29c]
  416b4d:	movsxd esi,DWORD PTR [rdx]
  416b4f:	(bad)  
  416b50:	jle    0x416bb3
  416b52:	xor    al,0xff
  416b54:	(bad)  
  416b55:	ret    
  416b56:	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
  416b57:	(bad)  
  416b58:	out    dx,eax
  416b59:	call   0x60b56b2d
  416b5e:	rex push QWORD PTR [rsi+0x60]
  416b62:	cmp    edi,edi
  416b64:	jp     0x416bc8
  416b66:	cmp    edi,edi
  416b68:	sub    DWORD PTR [rdi+rax*2-0x1],0xff90b1c3
  416b70:	jrcxz  0x416b46
  416b72:	mov    eax,0x66828dff
  416b77:	inc    esp
  416b79:	(bad)  
  416b7a:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
  416b7b:	jmp    rsp
  416b7d:	fidiv  DWORD PTR [rdi+rdi*8-0xc99c7b]
  416b84:	lea    esp,[rbx+0x33]
  416b87:	call   QWORD PTR [rdx-0x6b00ca9d]
  416b8d:	movsxd esi,DWORD PTR [rdi]
  416b8f:	call   QWORD PTR [rdx+riz*2+0x6493ff38]
  416b96:	sub    eax,0x30648dff
  416b9b:	inc    DWORD PTR [rbx-0x6a00c89f]
  416ba1:	jle    0x416bfe
  416ba3:	(bad)  
  416ba4:	(bad)  
  416ba5:	cli    
  416ba6:	fdiv   st(7),st
  416ba8:	mov    ebx,0x66ff98b1
  416bad:	pop    rbx
  416bae:	rex.R dec DWORD PTR [rsp+rdi*2+0x6476ff55]
  416bb6:	(bad)  
  416bb7:	inc    DWORD PTR [rbp-0x9a80]
  416bbd:	sti    
  416bbe:	jrcxz  0x416bbf
  416bc0:	mov    ch,0x9f
  416bc2:	jle    0x416bc3
  416bc4:	(bad)  
  416bc5:	pop    rbp
  416bc6:	sub    edi,edi
  416bc8:	nop
  416bc9:	gs xor bh,bh
  416bcc:	mov    fs,WORD PTR [rdx+rsi*1-0x1]
  416bd0:	jp     0x416c2e
  416bd2:	notrack call rsi
  416bd5:	int3   
  416bd6:	mov    esp,0xe0e8e7ff
  416bdb:	mov    DWORD PTR [rax],0xde000000
  416be1:	jrcxz  0x416bbf
  416be3:	jmp    rax
  416be5:	fmul   st(3),st
  416be7:	inc    DWORD PTR [rdx-0x7400b199]
  416bed:	pop    rdi
  416bee:	cmp    bh,bh
  416bf0:	xchg   ecx,eax
  416bf1:	fs xor edi,edi
  416bf4:	lea    ebp,[rcx+0x2e]
  416bf7:	call   QWORD PTR [rax-0x6d00ca9b]
  416bfd:	gs xor bh,bh
  416c00:	xchg   esp,eax
  416c01:	data16 xor bh,bh
  416c04:	xchg   esp,eax
  416c05:	call   QWORD PTR cs:[eax-0x7600d19a]
  416c0d:	gs xor al,0xff
  416c10:	and    DWORD PTR [rbx+0x37],0xadcdddff
  416c17:	(bad)  
  416c18:	(bad)  
  416c19:	cli    
  416c1a:	loopne 0x416c1b
  416c1c:	mov    dh,0xa8
  416c1e:	mov    bh,bh
  416c20:	jg     0x416c90
  416c22:	rex.WRB jmp QWORD PTR [r15+0x56]
  416c26:	xor    al,0xff
  416c28:	mov    BYTE PTR [rbx+0x5b],bh
  416c2b:	jmp    rax
  416c2d:	fdivr  DWORD PTR [rsi-0x29161201]
  416c33:	push   QWORD PTR [rbx-0x17006952]
  416c39:	out    0xc8,al
  416c3b:	dec    esi
  416c3d:	ret    
  416c3e:	pushf  
  416c3f:	(bad)  
  416c40:	jg     0x416c9e
  416c42:	sub    eax,0x356691ff
  416c47:	call   QWORD PTR [rsi-0x6800cb9d]
  416c4d:	movsxd esi,DWORD PTR [rip+0x376297ff]        # 0x37a40452
  416c53:	call   QWORD PTR [rbp-0x6e00d19a]
  416c59:	addr32 xor edi,edi
  416c5c:	test   BYTE PTR [rcx+0x33],ah
  416c5f:	dec    DWORD PTR [rcx-0xe00b791]
  416c65:	out    0xcc,al
  416c67:	dec    edx
  416c69:	ret    0xffad
  416c6c:	xchg   ecx,eax
  416c6d:	mov    edi,DWORD PTR [rdi+rdi*8-0x10]
  416c71:	(bad)  
  416c72:	int    0xff
  416c74:	mov    al,0xa7
  416c76:	jl     0x416c77
  416c78:	outs   dx,DWORD PTR ds:[rsi]
  416c79:	outs   dx,BYTE PTR ds:[rsi]
  416c7a:	push   rsi
  416c7b:	(bad)  
  416c7c:	stc    
  416c7d:	stc    
  416c7e:	in     eax,0xff
  416c80:	sar    DWORD PTR [rbp+0x5f89ff9e],1
  416c86:	call   QWORD PTR cs:[rbx-0x6900d29e]
  416c8d:	data16 xor al,0xff
  416c90:	jl     0x416ce9
  416c92:	xor    eax,0x96adbdff
  416c97:	push   rbp
  416c99:	hlt    
  416c9a:	in     al,0xaa
  416c9c:	add    BYTE PTR [rax],al
  416c9e:	add    BYTE PTR [rax],al
  416ca0:	in     al,0xe6
  416ca2:	(bad)  
  416ca4:	(bad)  
  416ca6:	mov    esi,0x466082ff
  416cab:	dec    DWORD PTR [rdi-0x6f00c5a1]
  416cb1:	fs dec DWORD PTR cs:[rdx-0x6f00d598]
  416cb9:	fs xor al,0xff
  416cbc:	xchg   edx,eax
  416cbd:	gs xor bh,bh
  416cc0:	xchg   esp,eax
  416cc1:	data16 xor bh,bh
  416cc4:	xchg   ebp,eax
  416cc5:	push   0x648eff2e
  416cca:	sub    eax,0x346589ff
  416ccf:	inc    DWORD PTR [rax-0x2800c89d]
  416cd5:	(bad)  
  416cd6:	test   al,0xff
  416cd8:	(bad)  
  416cd9:	(bad)  
  416cda:	(bad)  
  416cdb:	(bad)  
  416cdc:	(bad)  
  416cdd:	cli    
  416cde:	fdivp  st(7),st
  416ce0:	jmp    0x416cc3
  416ce2:	sar    edi,0xbd
  416ce5:	mov    al,0x91
  416ce7:	call   FWORD PTR [rax-0x66008f72]
  416ced:	xchg   esp,eax
  416cee:	jl     0x416cef
  416cf0:	cwde   
  416cf1:	xchg   esp,eax
  416cf2:	test   bh,bh
  416cf4:	int3   
  416cf5:	leave  
  416cf6:	mov    bl,0xff
  416cf8:	(bad)  
  416cf9:	(bad)  
  416cfa:	(bad)  
  416cfc:	stos   BYTE PTR es:[rdi],al
  416cfd:	xchg   ebp,eax
  416cfe:	ins    DWORD PTR es:[rdi],dx
  416cff:	inc    DWORD PTR [rcx-0x6e00d3a4]
  416d05:	gs xor bh,bh
  416d08:	xchg   ebp,eax
  416d09:	fs xor bh,bh
  416d0c:	xchg   ebp,eax
  416d0d:	fs xor al,0xff
  416d10:	xchg   ebp,eax
  416d11:	movsxd esi,DWORD PTR [rip+0x2f6593ff]        # 0x2fa70116
  416d17:	call   QWORD PTR [rax-0x7500cf9a]
  416d1d:	fs xor al,0xff
  416d20:	jg     0x416d82
  416d22:	(bad)  
  416d23:	inc    esi
  416d25:	mov    ah,0x93
  416d27:	(bad)  
  416d28:	sti    
  416d29:	neg    dh
  416d2b:	push   QWORD PTR [rsi-0x41005c4d]
  416d31:	mov    eax,0x949dff9c
  416d36:	outs   dx,DWORD PTR ds:[rsi]
  416d37:	push   QWORD PTR [rcx+0x70]
  416d3a:	pop    rbp
  416d3b:	push   rax
  416d3d:	out    dx,eax
  416d3e:	(bad)  
  416d40:	fmul   st,st(2)
  416d42:	lods   eax,DWORD PTR ds:[rsi]
  416d43:	dec    DWORD PTR [rbx-0x6600d0a0]
  416d49:	gs xor bh,bh
  416d4c:	xchg   edi,eax
  416d4d:	vaddsd xmm14{k2}{z},xmm16,QWORD PTR [rcx]
  416d53:	call   FWORD PTR [rdi-0x7009576]
  416d59:	cmc    
  416d5a:	loopne 0x416d3f
  416d5c:	jmp    0x416d49
  416d5e:	jmp    0xffffffffea366080
  416d63:	inc    ebp
  416d65:	mov    ecx,0x5a7fffa5
  416d6a:	notrack call QWORD PTR [rdx-0x6c00c8a1]
  416d71:	push   0x6c8dff30
  416d76:	sub    al,0xff
  416d78:	nop
  416d79:	gs xor al,0xff
  416d7c:	xchg   edx,eax
  416d7d:	gs xor bh,bh
  416d80:	xchg   esp,eax
  416d81:	data16 xor bh,bh
  416d84:	xchg   ebp,eax
  416d85:	push   0x6690ff2f
  416d8a:	dec    DWORD PTR cs:[rax+0x79ff3264]
  416d91:	pop    rsp
  416d92:	(bad)  
  416d93:	dec    edi
  416d95:	mov    esi,0xecf4ffa1
  416d9a:	xlat   BYTE PTR ds:[rbx]
  416d9b:	jmp    FWORD PTR [rdi-0x1f00785e]
  416da1:	shl    DWORD PTR [rbp-0x2a0a0201],cl
  416da7:	(bad)  
  416da8:	(bad)  
  416da9:	cld    
  416daa:	fdiv   st(7),st
  416dac:	push   rdi
  416dae:	fdiv   st(7),st
  416db0:	(bad)  
  416db1:	cli    
  416db2:	in     eax,0xff
  416db4:	std    
  416db5:	cmc    
  416db6:	fdiv   st(7),st
  416db8:	ret    0x89ab
  416dbb:	inc    DWORD PTR [rbx-0x7400c29b]
  416dc1:	fs xor bh,bh
  416dc4:	nop
  416dc5:	data16 xor bh,bh
  416dc8:	xchg   edx,eax
  416dc9:	xor    di,di
  416dcc:	nop
  416dcd:	gs xor bh,bh
  416dd0:	nop
  416dd1:	gs xor al,0xff
  416dd4:	mov    WORD PTR [rcx+0x2e],fs
  416dd7:	dec    DWORD PTR [rsi-0x6f00d09c]
  416ddd:	addr32 xor al,0xff
  416de0:	mov    BYTE PTR [rsp+rsi*1-0x1],ah
  416de4:	mov    DWORD PTR [rbp+0x41],ebp
  416de7:	(bad)  
  416de8:	fmulp  st(7),st
  416dea:	lods   al,BYTE PTR ds:[rsi]
  416deb:	(bad)  
  416dec:	(bad)  
  416ded:	sti    
  416dee:	in     al,0xff
  416df0:	(bad)  
  416df1:	loop   0x416dba
  416df3:	(bad)  
  416df4:	in     eax,dx
  416df5:	jrcxz  0x416dbb
  416df7:	jmp    rbp
  416df9:	jrcxz  0x416dd0
  416dfb:	(bad)  
  416dfc:	(bad)  
  416dfd:	push   rbp
  416dff:	call   rsi
  416e01:	(bad)  
  416e02:	stos   BYTE PTR es:[rdi],al
  416e03:	dec    DWORD PTR [rdi-0x6800cb9b]
  416e09:	gs xor bh,bh
  416e0c:	xchg   esi,eax
  416e0d:	gs xor edi,edi
  416e10:	xchg   ecx,eax
  416e11:	gs cmp edi,edi
  416e14:	mov    ?,WORD PTR [rax+0x4a]
  416e17:	(bad)  
  416e18:	out    dx,eax
  416e19:	call   0xfffffffff83a6dee
  416e1e:	repz push rbp
  416e20:	div    edi
  416e22:	in     al,dx
  416e23:	inc    eax
  416e25:	mov    al,0x9b
  416e27:	(bad)  
  416e28:	jg     0x416e80
  416e2a:	cmp    edi,edi
  416e2c:	xchg   ebp,eax
  416e2d:	(bad)  
  416e2e:	(bad)  
  416e2f:	call   QWORD PTR [rbp-0x7400cd96]
  416e35:	ins    DWORD PTR es:[rdi],dx
  416e36:	sub    al,0xff
  416e38:	nop
  416e39:	gs xor al,0xff
  416e3c:	xchg   edx,eax
  416e3d:	gs xor bh,bh
  416e40:	xchg   esp,eax
  416e41:	data16 xor bh,bh
  416e44:	xchg   ebp,eax
  416e45:	push   0x6690ff2e
  416e4a:	(bad)  
  416e4b:	dec    DWORD PTR [rbx+0x7dff3566]
  416e51:	(bad)  
  416e52:	xor    al,0xff
  416e54:	ret    0x95af
  416e57:	(bad)  
  416e58:	stc    
  416e59:	in     eax,dx
  416e5a:	fdivp  st(7),st
  416e5c:	xor    DWORD PTR [rax+0x57],0x3e5e75ff
  416e63:	dec    DWORD PTR [rdi-0x4f00af8b]
  416e69:	xchg   esi,eax
  416e6a:	jno    0x416e6b
  416e6c:	mov    edi,0xb4ff81a4
  416e71:	fwait
  416e72:	jl     0x416e73
  416e74:	xchg   esp,eax
  416e75:	js     0x416ecf
  416e77:	(bad)  
  416e78:	jle    0x416ed5
  416e7a:	cmp    bh,bh
  416e7c:	xchg   BYTE PTR [rax+0x37],ah
  416e7f:	dec    DWORD PTR [rsi-0x6f00cd9b]
  416e85:	addr32 xor bh,bh
  416e88:	mov    fs,WORD PTR [rdi+0x30]
  416e8b:	dec    DWORD PTR [rbx-0x7800cd99]
  416e91:	data16 xor al,0xff
  416e94:	mov    WORD PTR [rbp+0x35],fs
  416e97:	dec    DWORD PTR [rsi-0x7000cd9a]
  416e9d:	data16 (bad) 
  416e9f:	dec    DWORD PTR [rdi-0x7a00d099]
  416ea5:	(bad)  
  416ea6:	sub    al,0xff
  416ea8:	(bad)  
  416ea9:	data16 cmp bh,bh
  416eac:	test   al,0x97
  416eae:	jae    0x416eaf
  416eb0:	iret   
  416eb1:	(bad)  
  416eb2:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
  416eb3:	dec    esi
  416eb5:	ret    0xffaa
  416eb8:	fcmovbe st,st(2)
  416eba:	(bad)  
  416ebb:	(bad)  
  416ebc:	(bad)  
  416ebd:	push   rdi
  416ebf:	dec    esp
  416ec1:	mov    eax,0x6088ff9d
  416ec6:	(bad)  
  416ec7:	call   QWORD PTR [rax-0x7100d39d]
  416ecd:	fs xor bh,bh
  416ed0:	mov    ah,BYTE PTR [rax+0x31]
  416ed3:	inc    DWORD PTR [rdi-0x1f00c79c]
  416ed9:	xlat   BYTE PTR ds:[rbx]
  416eda:	mov    ebx,0xfcffffff
  416edf:	push   rbp
  416ee0:	clc    
  416ee1:	imul   ah
  416ee3:	inc    eax
  416ee5:	scas   eax,DWORD PTR es:[rdi]
  416ee6:	(bad)  
  416ee7:	inc    DWORD PTR [rax-0x6700c6aa]
  416eed:	movsxd edi,DWORD PTR [rdx]
  416eef:	call   QWORD PTR [rsi-0x7500ce95]
  416ef5:	push   0x29
  416ef7:	dec    DWORD PTR [rdi-0x6e00cb9c]
  416efd:	gs xor bh,bh
  416f00:	xchg   ebx,eax
  416f01:	data16 xor bh,bh
  416f04:	xchg   esp,eax
  416f05:	push   0x6790ff2f
  416f0a:	xor    bh,bh
  416f0c:	mov    DWORD PTR [rbp+0x34],esp
  416f0f:	(bad)  
  416f10:	jns    0x416f6e
  416f12:	jmp    FWORD PTR cs:[rax+rbx*4-0x8000082]
  416f1a:	call   0x7cd5181e
  416f1f:	push   QWORD PTR [rdx+0x56]
  416f22:	inc    DWORD PTR ss:[rcx-0x7f00c59f]
  416f29:	pop    rbp
  416f2a:	xor    bh,bh
  416f2c:	jle    0x416f89
  416f2e:	xor    edi,edi
  416f30:	jg     0x416f8e
  416f32:	xor    edi,edi
  416f34:	sbb    DWORD PTR [rax+rdi*1-0x1],0xff3f628a
  416f3c:	lea    esp,[rdx+0x39]
  416f3f:	call   QWORD PTR [rcx-0x6f00cc9a]
  416f45:	addr32 xor bh,bh
  416f48:	mov    WORD PTR [rdi+0x30],fs
  416f4b:	inc    DWORD PTR [rsi-0x7c00ce97]
  416f51:	push   0x6388ff32
  416f56:	xor    eax,0x32638dff
  416f5b:	call   QWORD PTR [rbx-0x6900d098]
  416f61:	imul   ebp,DWORD PTR [rdi+rdi*8],0xff2c6790
  416f68:	mov    DWORD PTR [rsi+0x32],esp
  416f6b:	(bad)  
  416f6c:	js     0x416fcd
  416f6e:	xor    edi,edi
  416f70:	js     0x416fd0
  416f72:	cmp    al,0xff
  416f74:	outs   dx,BYTE PTR ds:[rsi]
  416f75:	push   rbx
  416f76:	cmp    eax,0x929ca9ff
  416f7b:	(bad)  
  416f7c:	std    
  416f7d:	hlt    
  416f7e:	(bad)  
  416f7f:	jmp    QWORD PTR [rbx-0x7a009077]
  416f85:	pop    rsi
  416f86:	call   QWORD PTR cs:[rax-0x7300d09a]
  416f8d:	data16 xor bh,bh
  416f90:	mov    DWORD PTR [rcx+0x2f],esp
  416f93:	inc    DWORD PTR [rdx-0x3100d1a2]
  416f99:	ret    
  416f9a:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
  416f9b:	(bad)  
  416f9c:	clc    
  416f9d:	clc    
  416f9e:	rep stos BYTE PTR es:[rdi],al
  416fa0:	div    ah
  416fa2:	out    0xff,al
  416fa4:	retf   0x9ebf
  416fa7:	(bad)  
  416fa8:	js     0x417009
  416faa:	xor    eax,0x37678fff
  416faf:	call   FWORD PTR [rax-0x6000d09d]
  416fb5:	(bad)  
  416fb6:	(bad)  
  416fb7:	dec    DWORD PTR [rdx-0x7700cb99]
  416fbd:	addr32 xor eax,0x336587ff
  416fc3:	inc    DWORD PTR [rsi-0x7900cd9c]
  416fc9:	gs xor bh,bh
  416fcc:	xchg   BYTE PTR [rbp+0x33],ah
  416fcf:	inc    DWORD PTR [rbx-0x6600d19f]
  416fd5:	jg     0x417031
  416fd7:	(bad)  
  416fd8:	push   rbp
  416fda:	(bad)  
  416fdc:	leave  
  416fdd:	mov    bl,0x91
  416fdf:	push   QWORD PTR [rsi+0x57]
  416fe2:	dec    DWORD PTR cs:[rax-0x7300ca9a]
  416fe9:	addr32 (bad) 
  416feb:	dec    DWORD PTR [rbp-0x7200d49c]
  416ff1:	fs sub bh,bh
  416ff4:	xchg   ebx,eax
  416ff5:	imul   esi,DWORD PTR [rdi+rdi*8],0xff366590
  416ffc:	nop
  416ffd:	fs xor al,0xff
  417000:	xchg   ecx,eax
  417001:	xor    ax,0x90ff
  417005:	gs xor al,0xff
  417008:	nop
  417009:	gs xor al,0xff
  41700c:	nop
  41700d:	gs xor al,0xff
  417010:	(bad)  
  417011:	gs xor al,0xff
  417014:	mov    esp,DWORD PTR [rbp+rsi*1-0x1]
  417018:	(bad)  
  417019:	fs xor eax,0x346497ff
  41701f:	call   FWORD PTR [rbp-0x6400cd9c]
  417025:	movsxd ebp,DWORD PTR [rdi]
  417027:	call   QWORD PTR [rdi-0x6f00cf9b]
  41702d:	push   QWORD PTR cs:[ebp+0x5e]
  417032:	xor    al,0xff
  417034:	js     0x41709f
  417036:	rex.WRXB (bad) 
  417038:	in     al,dx
  417039:	in     eax,0xc7
  41703b:	(bad)  
  41703c:	call   0xffffffff8b41281b
  417041:	gs (bad) 
  417043:	dec    DWORD PTR [rbx+riz*2+0x628bff34]
  41704a:	xor    edi,edi
  41704c:	mov    fs,WORD PTR [rbp+0x39]
  41704f:	dec    DWORD PTR [rsp+riz*2+0x5d7cff34]
  417056:	sub    al,0xff
  417058:	sar    BYTE PTR [rsi-0x1110005e],1
  41705e:	call   0xffffffffda275a0d
  417063:	(bad)  
  417064:	(bad)  
  417066:	mov    ah,0xff
  417068:	jp     0x4170cf
  41706a:	inc    DWORD PTR ds:[rbp-0x6900ca9f]
  417071:	fs xor al,0xff
  417074:	cdq    
  417075:	(bad)  
  417076:	xor    bh,bh
  417078:	mov    fs,WORD PTR [rdi+0x34]
  41707b:	dec    DWORD PTR [rdi+riz*2+0x658bff35]
  417082:	xor    edi,edi
  417084:	mov    ah,BYTE PTR [rdx+rsi*1-0x1]
  417088:	lea    esp,[rdi+0x35]
  41708b:	dec    DWORD PTR [rsi+riz*2+0x628bff34]
  417092:	(bad)  
  417093:	inc    DWORD PTR [rcx-0x2800c19a]
  417099:	iret   
  41709a:	mov    cl,0xff
  41709c:	repz out 0xc3,eax
  41709f:	inc    DWORD PTR [rbx+rbp*2+0x607fff44]
  4170a6:	xor    edi,edi
  4170a8:	mov    ah,BYTE PTR [rcx+rsi*1-0x1]
  4170ac:	mov    fs,WORD PTR [rbp+0x2e]
  4170af:	call   QWORD PTR [rbx-0x6d00d39b]
  4170b5:	gs xor bh,bh
  4170b8:	(bad)  
  4170b9:	gs xor eax,0x34658fff
  4170bf:	dec    DWORD PTR [rdi-0x7000cb9b]
  4170c5:	gs xor al,0xff
  4170c8:	(bad)  
  4170c9:	gs xor al,0xff
  4170cc:	(bad)  
  4170cd:	gs xor al,0xff
  4170d0:	(bad)  
  4170d1:	gs xor al,0xff
  4170d4:	xchg   edx,eax
  4170d5:	data16 xor bh,bh
  4170d8:	xchg   ebx,eax
  4170d9:	gs xor edi,edi
  4170dc:	xchg   edi,eax
  4170dd:	fs xor bh,bh
  4170e0:	cwde   
  4170e1:	movsxd esi,DWORD PTR [rdx]
  4170e3:	call   QWORD PTR [rdx+riz*2+0x658fff33]
  4170ea:	inc    DWORD PTR ss:[rsi+0x77ff3264]
  4170f1:	gs rex.XB call r9
  4170f5:	enter  0xffb3,0xfa
  4170f9:	icebp  
  4170fa:	sar    edi,cl
  4170fc:	movabs ds:0x92ff316085ff5d85,al
  417105:	addr32 xor eax,0x346692ff
  41710b:	call   QWORD PTR [rbx-0x7500ca99]
  417111:	movsxd esi,DWORD PTR [rdx]
  417113:	(bad)  
  417114:	jp     0x417176
  417116:	xor    eax,0x98b2c3ff
  41711b:	push   rsp
  41711d:	repnz in al,dx
  41711f:	stos   BYTE PTR es:[rdi],al
  417120:	fstp   st(2)
  417122:	sar    bh,cl
  417124:	repz (bad) 
  417126:	sar    edi,cl
  417128:	xchg   BYTE PTR [rcx+0x52],dh
  41712b:	(bad)  
  41712c:	jnp    0x41718a
  41712e:	dec    DWORD PTR ss:[rbx+riz*2+0x608fff35]
  417136:	(bad)  
  417137:	call   QWORD PTR [rdx-0x6e00ca9a]
  41713d:	gs xor eax,0x33638fff
  417143:	dec    DWORD PTR [rsi-0x6f00cd9e]
  417149:	fs xor al,0xff
  41714c:	nop
  41714d:	fs xor edi,edi
  417150:	xchg   edx,eax
  417151:	fs xor bh,bh
  417154:	jns    0x4171b4
  417156:	jmp    QWORD PTR ss:[rbp-0x8364]
  41715d:	(bad)  
  41715e:	(bad)  
  417160:	lods   eax,DWORD PTR ds:[rsi]
  417161:	pushf  
  417162:	jns    0x417163
  417164:	jo     0x4171bc
  417166:	(bad)  
  417167:	inc    DWORD PTR [rbp-0x7000c89e]
  41716d:	fs xor edi,edi
  417170:	cwde   
  417171:	gs xor edi,edi
  417174:	xchg   ecx,eax
  417175:	movsxd esi,DWORD PTR [rax]
  417177:	dec    DWORD PTR [rbp+riz*2+0x658dff34]
  41717e:	xor    al,0xff
  417180:	lea    esp,[rbp+0x34]
  417183:	dec    DWORD PTR [rsi-0x7100cb9b]
  417189:	gs xor al,0xff
  41718c:	mov    fs,WORD PTR [rbp+0x34]
  41718f:	dec    DWORD PTR [rdi-0x6800cb9b]
  417195:	addr32 sub eax,0x2e6696ff
  41719b:	call   QWORD PTR [rsi-0x6d00cf9b]
  4171a1:	fs xor al,0xff
  4171a4:	mov    DWORD PTR [rcx+0x36],esp
  4171a7:	inc    DWORD PTR [rsi+0x76ff3c64]
  4171ad:	pop    rsp
  4171ae:	xor    al,0xff
  4171b0:	mov    ah,0xa7
  4171b2:	(bad)  
  4171b3:	(bad)  
  4171b4:	(bad)  
  4171b5:	cld    
  4171b6:	(bad)  
  4171b7:	(bad)  
  4171b8:	mov    eax,0x78ff88a4
  4171bd:	pop    rdx
  4171be:	xor    eax,0x346388ff
  4171c3:	dec    DWORD PTR [rbx-0x6b00d19f]
  4171c9:	addr32 xor edi,edi
  4171cc:	xchg   ebx,eax
  4171cd:	fs xor bh,bh
  4171d0:	mov    DWORD PTR [rbp+rsi*1-0x1],esp
  4171d4:	jno    0x417232
  4171d6:	cmp    edi,edi
  4171d8:	leave  
  4171d9:	mov    edx,0xedf0ffa4
  4171de:	call   0xffffffffe4295b8d
  4171e3:	push   rbp
  4171e4:	sti    
  4171e5:	hlt    
  4171e6:	in     al,0xc7
  4171e8:	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
  4171e9:	xchg   esp,eax
  4171ea:	jge    0x4171eb
  4171ec:	outs   dx,BYTE PTR ds:[rsi]
  4171ed:	push   rbp
  4171ee:	xor    eax,0x3c6586ff
  4171f3:	dec    DWORD PTR [rdx-0x6e00cb9c]
  4171f9:	(bad)  {k4}{z}
  4171fe:	xor    al,0xff
  417200:	xchg   esp,eax
  417201:	gs xor eax,0x336392ff
  417207:	call   QWORD PTR [rcx-0x6c00cd9e]
  41720d:	movsxd esi,DWORD PTR [rdi+rdi*8]
  417210:	xchg   edi,eax
  417211:	gs xor eax,0x335d7aff
  417217:	(bad)  
  417218:	jl     0x41728b
  41721a:	rex.WRX push rbx
  41721d:	out    dx,al
  41721e:	int    0xff
  417220:	(bad)  
  417222:	mov    bh,0xff
  417224:	jns    0x417289
  417226:	rex.XB (bad) 
  417228:	jp     0x417287
  41722a:	cmp    bh,bh
  41722c:	mov    esp,DWORD PTR [rcx+rdi*1-0x1]
  417230:	(bad)  
  417231:	(bad)  
  417232:	(bad)  
  417233:	call   QWORD PTR [rax-0x7200cd9c]
  417239:	gs xor al,0xff
  41723c:	lea    esp,[rbp+0x34]
  41723f:	dec    DWORD PTR [rbp-0x7300cb9b]
  417245:	fs xor edi,edi
  417248:	mov    WORD PTR [rbx+rsi*1-0x1],fs
  41724c:	mov    WORD PTR [rbx+rsi*1-0x1],fs
  417250:	lea    esp,[rbx+rsi*1-0x1]
  417254:	xchg   esi,eax
  417255:	gs sub al,0xff
  417258:	cdq    
  417259:	imul   esi,DWORD PTR [rdx],0x336792ff
  41725f:	dec    DWORD PTR [rcx-0x7f00c99d]
  417265:	(bad)  
  417266:	cmp    edi,edi
  417268:	jno    0x4172c2
  41726a:	xor    al,0xff
  41726c:	xchg   ecx,eax
  41726d:	jl     0x4172cb
  41726f:	(bad)  
  417270:	(bad)  
  417271:	cli    
  417272:	in     al,0xff
  417274:	(bad)  
  417275:	retf   0xffb4
  417278:	jae    0x4172d8
  41727a:	(bad)  
  41727b:	(bad)  
  41727c:	jge    0x4172dd
  41727e:	cmp    bh,bh
  417280:	mov    ah,BYTE PTR [rsi+0x37]
  417283:	call   QWORD PTR [rcx-0x6f00c998]
  417289:	fs xor edi,edi
  41728c:	mov    WORD PTR [rdi+0x2e],ds
  41728f:	inc    DWORD PTR [rsp+riz*2+0x5867ff3c]
  417296:	cmp    al,0xff
  417298:	(bad)  
  41729a:	ret    0xefff
  41729d:	out    dx,al
  41729e:	(bad)  
  41729f:	stos   BYTE PTR es:[rdi],al
  4172a0:	add    BYTE PTR [rax],al
  4172a2:	add    BYTE PTR [rax],al
  4172a4:	loope  0x417281
  4172a6:	(bad)  
  4172a7:	jmp    rsp
  4172a9:	fmul   st,st(1)
  4172ab:	push   QWORD PTR [rdi+0x63]
  4172ae:	rex.WB (bad) 
  4172b0:	jp     0x417314
  4172b2:	cmp    eax,0x376481ff
  4172b7:	call   QWORD PTR [rax-0x7100cc9c]
  4172bd:	(bad)  {k7}{z}
  4172c2:	xor    edi,edi
  4172c4:	xchg   edx,eax
  4172c5:	call   WORD PTR ss:[rax-0x6f00cb9b]
  4172cd:	gs xor al,0xff
  4172d0:	xchg   edx,eax
  4172d1:	fs xor edi,edi
  4172d4:	test   DWORD PTR [rbp+0x38],esp
  4172d7:	jmp    FWORD PTR [rsi+0x5b]
  4172da:	cmp    bh,bh
  4172dc:	stos   DWORD PTR es:[rdi],eax
  4172dd:	popf   
  4172de:	jg     0x4172df
  4172e0:	(bad)  
  4172e1:	(bad)  
  4172e2:	jmp    0xffffffff8be627e6
  4172e7:	jmp    FWORD PTR [rdx+0x55]
  4172ea:	cmp    bh,bh
  4172ec:	jns    0x417349
  4172ee:	dec    DWORD PTR ss:[rbx-0x7600c89b]
  4172f5:	movsxd esi,DWORD PTR [rcx]
  4172f7:	dec    DWORD PTR [rsi+riz*2+0x668cff34]
  4172fe:	xor    al,0xff
  417300:	mov    WORD PTR [rsi+0x34],fs
  417303:	dec    DWORD PTR [rdx-0x7500cd9d]
  417309:	movsxd esi,DWORD PTR [rdx]
  41730b:	dec    DWORD PTR [rdx-0x7300cd9d]
  417311:	gs xor edi,edi
  417314:	cdq    
  417315:	push   0x38
  417317:	dec    DWORD PTR [rdi-0x7500cc9d]
  41731d:	addr32 cmp bh,bh
  417320:	and    DWORD PTR [rbp+0x39],0x335a71ff
  417327:	(bad)  
  417328:	jg     0x417394
  41732a:	rex.W jmp rbx
  41732d:	fdivr  DWORD PTR [rbx-0x3f231701]
  417333:	inc    DWORD PTR [rdx+0x7bff4d6e]
  417339:	(bad)  
  41733a:	cmp    edi,edi
  41733c:	(bad)  
  41733d:	movsxd edi,DWORD PTR [rax]
  41733f:	dec    DWORD PTR [rdx-0x7700c799]
  417345:	(bad)  
  417346:	xor    bh,bh
  417348:	mov    BYTE PTR [rcx+0x37],ah
  41734b:	dec    DWORD PTR [rbp+0x6fff3d65]
  417351:	push   rbx
  417352:	xor    al,0xff
  417354:	movabs eax,ds:0xfde3e8f4f9ff8397
  41735d:	std    
  41735e:	std    
  41735f:	sbb    eax,0x0
  417364:	fcmovnbe st,st(7)
  417366:	(bad)  
  417367:	stos   BYTE PTR es:[rdi],al
  417368:	(bad)  
  417369:	clc    
  41736a:	lock (bad) 
  41736c:	mov    eax,0x68ff95a9
  417371:	push   rbp
  417372:	xor    bh,bh
  417374:	ja     0x4173d8
  417376:	dec    DWORD PTR ss:[rbx-0x7300cb9a]
  41737d:	gs xor edi,edi
  417380:	mov    WORD PTR [rbp+0x34],fs
  417383:	dec    DWORD PTR [rbp+riz*2+0x668dff33]
  41738a:	xor    al,0xff
  41738c:	lea    esp,[rsi+0x34]
  41738f:	dec    DWORD PTR [rsi-0x7800cb9a]
  417395:	movsxd esi,DWORD PTR [rip+0x395d7cff]        # 0x399ef09a
  41739b:	(bad)  
  41739c:	jp     0x417400
  41739e:	rex.RX (bad) 
  4173a0:	fst    st(2)
  4173a2:	mov    esi,0xd9ecf1ff
  4173a7:	call   QWORD PTR [rcx+rcx*4+0x596cff70]
  4173ae:	ss (bad) 
  4173b0:	jg     0x41741a
  4173b2:	cmp    edi,edi
  4173b4:	test   BYTE PTR [rbp+0x33],ah
  4173b7:	dec    DWORD PTR [rbx-0x7500cb9a]
  4173bd:	data16 xor al,0xff
  4173c0:	mov    ah,BYTE PTR [rsi+0x34]
  4173c3:	dec    DWORD PTR [rax-0x7700cd9c]
  4173c9:	fs xor bh,bh
  4173cc:	mov    BYTE PTR [rdx+rsi*1-0x1],ah
  4173d0:	mov    BYTE PTR [rbx+rsi*1-0x1],ah
  4173d4:	mov    ah,BYTE PTR [rdx+0x39]
  4173d7:	inc    DWORD PTR [rdi+0x7aff3c63]
  4173dd:	pop    rdi
  4173de:	push   QWORD PTR ss:[rbx+0x5f]
  4173e2:	call   QWORD PTR ss:[rdx+rax*4-0x241a00a4]
  4173ea:	mov    eax,0xceedf6ff
  4173ef:	call   QWORD PTR [rbx+0x78ff5479]
  4173f5:	pop    rsp
  4173f6:	xor    bh,bh
  4173f8:	and    DWORD PTR [rcx+0x34],0x3a698cff
  4173ff:	dec    DWORD PTR [rax-0x7600ca9d]
  417405:	addr32 cmp al,0xff
  417408:	jnp    0x417465
  41740a:	cmp    bh,bh
  41740c:	jbe    0x417465
  41740e:	cmp    bh,bh
  417410:	movabs eax,ds:0xf4ffdfeef3ff788f
  417419:	repnz in eax,dx
  41741b:	jb     0x41741d
  41741d:	add    BYTE PTR [rax],al
  41741f:	add    BYTE PTR [rax],al
  417421:	add    BYTE PTR [rax],al
  417423:	add    bh,bh
  417425:	(bad)  
  417426:	(bad)  
  417427:	cmp    eax,edx
  417429:	leave  
  41742a:	(bad)  
  41742b:	jrcxz  0x417428
  41742d:	cmc    
  41742e:	out    0xff,al
  417430:	scas   eax,DWORD PTR es:[rdi]
  417431:	movabs eax,ds:0x5d81ff376678ff7e
  41743a:	sub    bh,bh
  41743c:	mov    ah,BYTE PTR [rsi+0x32]
  41743f:	dec    DWORD PTR [rbx-0x7700cc99]
  417445:	movsxd esi,DWORD PTR [rax]
  417447:	dec    DWORD PTR [rdx-0x7500cc9a]
  41744d:	xor    di,di
  417450:	mov    DWORD PTR [rsi+0x32],esp
  417453:	dec    DWORD PTR [rdi-0x7100c99a]
  417459:	(bad)  
  41745a:	cmp    edi,edi
  41745c:	outs   dx,DWORD PTR ds:[rsi]
  41745d:	push   rcx
  41745e:	xor    eax,0x637385ff
  417463:	push   rax
  417465:	jmp    0x417443
  417467:	(bad)  
  417468:	(bad)  
  417469:	in     eax,0xd1
  41746b:	call   QWORD PTR [rbx+rcx*4+0x636eff68]
  417472:	xor    al,0xff
  417474:	jge    0x4174d8
  417476:	dec    DWORD PTR cs:[rdx-0x7500cd9b]
  41747d:	xor    di,di
  417480:	mov    ah,BYTE PTR [rsi+0x33]
  417483:	dec    DWORD PTR [rax-0x7800ce9c]
  417489:	movsxd esi,DWORD PTR [rax]
  41748b:	inc    DWORD PTR [rdi-0x7800cf9c]
  417491:	vmulsd xmm15{z},xmm16,QWORD PTR [rcx]
  417497:	(bad)  
  417498:	js     0x4174f3
  41749a:	cmp    bh,bh
  41749c:	jle    0x417506
  41749e:	rex.RB push QWORD PTR [r8-0x900815d]
  4174a5:	out    dx,eax
  4174a6:	leave  
  4174a7:	(bad)  
  4174a8:	cld    
  4174a9:	not    dl
  4174ab:	jmp    FWORD PTR [rdx+0x7fff6d92]
  4174b1:	pop    rsp
  4174b2:	xor    bh,bh
  4174b4:	mov    gs,WORD PTR [rax+0x34]
  4174b7:	dec    DWORD PTR [rsi-0x7800cd99]
  4174bd:	pop    rdi
  4174be:	sub    edi,edi
  4174c0:	mov    esp,DWORD PTR [rbp+0x35]
  4174c3:	(bad)  
  4174c4:	jg     0x417523
  4174c6:	ss (bad) 
  4174c8:	jg     0x41752b
  4174ca:	rex.RB push QWORD PTR [r15-0xc007661]
  4174d1:	(bad)  
  4174d2:	fdiv   st(7),st
  4174d4:	cli    
  4174d5:	stc    
  4174d6:	cmc    
  4174d7:	push   rbp
	...
  4174e8:	div    esi
  4174ea:	test   BYTE PTR [rsi-0x1c342d2b],0xff
  4174f1:	(bad)  
  4174f2:	in     eax,dx
  4174f3:	jrcxz  0x4174c7
  4174f5:	int3   
  4174f6:	mov    bl,0xff
  4174f8:	movabs eax,ds:0x75ff406b83ff638c
  417501:	pop    rbp
  417502:	xor    edi,edi
  417504:	je     0x417563
  417506:	xor    edi,edi
  417508:	je     0x417567
  41750a:	xor    edi,edi
  41750c:	jne    0x41756c
  41750e:	xor    al,0xff
  417510:	jne    0x417570
  417512:	xor    edi,edi
  417514:	jns    0x417575
  417516:	inc    DWORD PTR ds:[rcx-0x6c00ad99]
  41751d:	sub    BYTE PTR [rdi-0x1],0xaf
  417521:	movabs ds:0xffffe3cfdbe1ff96,al
  41752a:	stc    
  41752b:	jb     0x417525
  41752d:	cmc    
  41752e:	loop   0x417513
  417530:	mov    esi,0x93ff9eb8
  417535:	jg     0x417591
  417537:	inc    DWORD PTR [rax+0x7cff3362]
  41753d:	(bad)  
  41753e:	xor    bh,bh
  417540:	jp     0x41759f
  417542:	xor    bh,bh
  417544:	js     0x4175a1
  417546:	cs (bad) 
  417548:	jnp    0x4175a8
  41754a:	xor    edi,edi
  41754c:	jl     0x4175ad
  41754e:	xor    bh,bh
  417550:	(bad)  
  417551:	gs cmp edi,edi
  417554:	mov    edi,DWORD PTR [rbx+0x5b]
  417557:	push   QWORD PTR [rbx-0x1b00785a]
  41755d:	fstp   TBYTE PTR [rbp-0x20040001]
  417563:	(bad)  
  417564:	(bad)  
  417566:	mov    ah,0xff
  417568:	xchg   ebx,eax
  417569:	sbb    DWORD PTR [rsi-0x1],0xff395e76
  417570:	and    BYTE PTR [rbx+0x34],0xff
  417574:	jle    0x4175d8
  417576:	sub    edi,edi
  417578:	jnp    0x4175d8
  41757a:	sub    al,0xff
  41757c:	jp     0x4175de
  41757e:	xor    edi,edi
  417580:	js     0x4175e3
  417582:	cmp    edi,edi
  417584:	xchg   esp,eax
  417585:	(bad)  
  417586:	fs call rcx
  417589:	(bad)  
  41758a:	mov    al,0xff
  41758c:	clc    
  41758d:	repz call 0xfffffffff5396d76
  417593:	push   rbp
	...
  4175b0:	(bad)  
  4175b1:	(bad)  
  4175b2:	jmp    0xffffffffea2d5fd4
  4175b7:	stos   BYTE PTR es:[rdi],al
  4175b8:	sti    
  4175b9:	repz (bad) 
  4175bc:	jmp    0xffffffffcd4142a4
  4175c1:	(bad)
  4175c4:	mov    edi,0xb5ff9bb3
  4175c9:	stos   BYTE PTR es:[rdi],al
  4175ca:	xchg   ebx,eax
  4175cb:	push   QWORD PTR [rbx-0x35006e58]
  4175d1:	mov    edi,0xc8cdffa6
  4175d6:	mov    ecx,0xd8dee0ff
  4175db:	push   rdx
  4175dd:	in     al,dx
  4175de:	in     al,0xaa
  4175e0:	(bad)  
  4175e1:	cli    
  4175e2:	rep stos BYTE PTR es:[rdi],al
  4175e4:	call   0xd051cb
  4175e9:	add    BYTE PTR [rax],al
  4175eb:	add    dh,ah
  4175ed:	in     al,0xe2
  4175ef:	cmp    ebp,esi
  4175f1:	icebp  
  4175f2:	in     eax,dx
  4175f3:	stos   BYTE PTR es:[rdi],al
  4175f4:	std    
  4175f5:	mul    ch
  4175f7:	(bad)  
  4175f8:	fmul   st(7),st
  4175fa:	mov    dl,0xff
  4175fc:	mov    ecx,0xa8ff8ca8
  417601:	cwde   
  417602:	jl     0x417603
  417604:	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
  417605:	cwde   
  417606:	jl     0x417607
  417608:	mov    cl,0xa1
  41760a:	test   edi,edi
  41760c:	enter  0x9cb9,0xff
  417610:	(bad)  
  417612:	mov    ah,0xff
  417614:	in     al,dx
  417615:	lock (bad) 
  417617:	(bad)  
  417618:	clc    
  417619:	sti    
  41761a:	jrcxz  0x4175e3
  41761c:	cld    
  41761d:	cli    
  41761e:	call   0xffffffffa4f937ea
  417623:	(bad)  
  417624:	jl     0x417693
  417626:	pop    rdx
  417627:	jmp    FWORD PTR [rbp+0x5a]
  41762a:	push   QWORD PTR [r11+0x60]
  41762e:	(bad)  
  41762f:	push   QWORD PTR [rdi+0x64]
  417632:	cmp    eax,0x487081ff
  417637:	dec    DWORD PTR [rdi-0x5800a17f]
  41763d:	pushf  
  41763e:	cmp    bh,0xd2
  417641:	(bad)  
  417642:	mov    edx,0xe7f3f6ff
  417647:	jrcxz  0x417645
  417649:	std    
  41764a:	test   DWORD PTR [rsi+0x1dfefefe],0x0
	...
  417678:	out    dx,al
  417679:	jmp    0xffffffffd51c0561
  41767e:	sar    bh,1
  417680:	in     eax,dx
  417681:	call   0xfffffffffb40216b
  417686:	imul   BYTE PTR [rdx-0x55060401]
  41768c:	std    
  41768d:	stc    
  41768e:	imul   BYTE PTR [rdx-0x5517130e]
  417694:	(bad)  
  417695:	cld    
  417696:	clc    
  417697:	push   rbp
	...
  4176b0:	out    0xe4,al
  4176b2:	jrcxz  0x4176d1
  4176b4:	(bad)  
  4176b6:	(bad)  
  4176b7:	jrcxz  0x417698
  4176b9:	(bad)  
  4176bb:	jrcxz  0x4176b9
  4176bd:	stc    
  4176be:	rep stos BYTE PTR es:[rdi],al
  4176c0:	std    
  4176c1:	sti    
  4176c2:	cmc    
  4176c3:	stos   BYTE PTR es:[rdi],al
  4176c4:	(bad)  
  4176c5:	(bad)  
  4176c6:	cli    
  4176c7:	stos   BYTE PTR es:[rdi],al
  4176c8:	(bad)  
  4176c9:	cld    
  4176ca:	stc    
  4176cb:	stos   BYTE PTR es:[rdi],al
  4176cc:	(bad)  
  4176cd:	cld    
  4176ce:	stc    
  4176cf:	mov    ?,edi
  4176d1:	(bad)  
  4176d2:	sti    
  4176d3:	push   rbp
  4176d4:	cmc    
  4176d5:	imul   edi
  4176d7:	cmp    DWORD PTR [rax],eax
  4176d9:	add    BYTE PTR [rax],al
  4176db:	add    bh,dh
  4176dd:	cmc    
  4176de:	in     al,dx
  4176df:	sbb    eax,0xe3dce3ec
  4176e4:	fst    st(4)
  4176e6:	retf   
  4176e7:	jmp    rbx
  4176e9:	xlat   BYTE PTR ds:[rbx]
  4176ea:	enter  0xe5ff,0xd9
  4176ee:	ret    
  4176ef:	(bad)  
  4176f0:	(bad)  
  4176f1:	loopne 0x4176c0
  4176f3:	push   rdi
  4176f5:	jmp    0x4176d6
  4176f7:	(bad)  
  4176f8:	clc    
  4176f9:	repz jmp 0xffffffffee3673a9
  4176ff:	stos   BYTE PTR es:[rdi],al
  417700:	in     al,dx
  417701:	in     al,0xe2
  417703:	stos   BYTE PTR es:[rdi],al
  417704:	in     eax,dx
  417705:	(bad)  
  417706:	jmp    0x417760
	...
  4177a3:	add    bh,bh
  4177a5:	(bad)  
  4177a6:	(bad)  
  4177a7:	cmp    ebp,ebp
  4177a9:	in     al,dx
  4177aa:	jmp    0xffffffffcd154f21
  4177af:	call   rbx
  4177b1:	(bad)  
  4177b2:	retf   0xc6ff
  4177b5:	ret    0xffc5
  4177b8:	call   0xd05ba0
	...
  4177dd:	add    BYTE PTR [rax],al
  4177df:	add    bh,bh
  4177e1:	(bad)  
  4177e2:	inc    DWORD PTR [rax]
  4177e4:	(bad)  
  4177e5:	inc    DWORD PTR [rax]
  4177e7:	add    bh,bh
  4177e9:	(bad)  
  4177ea:	inc    DWORD PTR [rax]
  4177ec:	ud0    eax,DWORD PTR [rax]
  4177ef:	add    bh,bh
  4177f1:	(bad)  
  4177f2:	inc    DWORD PTR [rax]
  4177f4:	ud0    eax,DWORD PTR [rax]
  4177f7:	add    bh,bh
  4177f9:	(bad)  
  4177fa:	inc    DWORD PTR [rax]
  4177fc:	(bad)  
  4177fd:	inc    DWORD PTR [rax]
  4177ff:	add    bh,bh
  417801:	(bad)  
  417802:	inc    DWORD PTR [rax]
  417804:	(bad)  
  417805:	inc    DWORD PTR [rax]
  417807:	add    bh,bh
  417809:	(bad)  
  41780a:	inc    BYTE PTR [rax]
  41780c:	add    edi,edi
  41780e:	add    BYTE PTR [rax],al
  417810:	(bad)  
  417811:	(bad)  
  417812:	inc    BYTE PTR [rax]
  417814:	add    edi,edi
  417816:	add    BYTE PTR [rax],al
  417818:	(bad)  
  417819:	(bad)  
  41781a:	inc    BYTE PTR [rax]
  41781c:	add    edi,edi
  41781e:	add    BYTE PTR [rax],al
  417820:	(bad)  
  417821:	(bad)  
  417822:	inc    BYTE PTR [rax]
  417824:	(bad)  
  417825:	inc    DWORD PTR [rax]
  417827:	add    bh,bh
  417829:	(bad)  
  41782a:	inc    BYTE PTR [rax]
  41782c:	(bad)  
  41782d:	inc    DWORD PTR [rax]
  41782f:	add    bh,bh
  417831:	dec    DWORD PTR [rax+rax*1+0xff03]
  417838:	(bad)  
  417839:	inc    DWORD PTR [rax+rax*1]
  41783c:	add    edi,edi
  41783e:	add    BYTE PTR [rax],al
  417840:	call   FWORD PTR [rax+rax*1+0xff0100]
  417847:	add    dh,bh
  417849:	add    al,0x0
  41784b:	add    BYTE PTR [rbx],al
  41784d:	inc    DWORD PTR [rax]
  41784f:	add    ah,bh
  417851:	add    al,0x0
  417853:	add    BYTE PTR [rax],al
  417855:	(bad)  
  417856:	add    BYTE PTR [rax],al
  417858:	clc    
  417859:	add    eax,DWORD PTR [rax]
  41785b:	add    BYTE PTR [rax],al
  41785d:	add    eax,DWORD PTR [rax]
  41785f:	add    al,dh
  417861:	add    eax,eax
  417863:	add    BYTE PTR [rax],al
  417865:	add    BYTE PTR [rax],al
  417867:	add    al,dh
  417869:	add    BYTE PTR [rax+0x0],ah
  41786c:	add    BYTE PTR [rax],al
  41786e:	add    BYTE PTR [rax],al
  417870:	loopne 0x417872
  417872:	add    BYTE PTR [rax],al
  417874:	add    BYTE PTR [rdi],bh
  417876:	add    BYTE PTR [rax],al
  417878:	rol    BYTE PTR [rax],0x0
  41787b:	add    BYTE PTR [rax],al
  41787d:	(bad)  
  41787e:	add    BYTE PTR [rax],al
  417880:	rol    BYTE PTR [rax],0x0
  417883:	add    BYTE PTR [rax],al
  417885:	(bad)  
  417886:	add    BYTE PTR [rax],al
  417888:	rol    BYTE PTR [rax],0x0
  41788b:	add    BYTE PTR [rax],al
  41788d:	(bad)  
  41788e:	add    BYTE PTR [rax],al
  417890:	add    BYTE PTR [rax],0x0
  417893:	add    BYTE PTR [rax],al
  417895:	(bad)  
  417896:	add    BYTE PTR [rax],al
  417898:	add    BYTE PTR [rax],0x0
  41789b:	add    BYTE PTR [rax],al
  41789d:	sldt   WORD PTR [rax]
  4178a0:	add    BYTE PTR [rax],0x0
  4178a3:	add    BYTE PTR [rax],al
  4178a5:	sldt   WORD PTR [rax]
  4178a8:	rol    BYTE PTR [rax],0x0
  4178ab:	add    BYTE PTR [rax],al
  4178ad:	(bad)  
  4178ae:	add    BYTE PTR [rax],al
  4178b0:	add    BYTE PTR [rax],0x0
  4178b3:	add    BYTE PTR [rax],al
  4178b5:	(bad)  
  4178b6:	add    BYTE PTR [rax],al
  4178b8:	add    BYTE PTR [rax],0x0
  4178bb:	add    BYTE PTR [rax],al
  4178bd:	(bad)  
  4178be:	add    BYTE PTR [rax],al
  4178c0:	add    BYTE PTR [rax],0x0
  4178c3:	add    BYTE PTR [rax],al
  4178c5:	add    eax,DWORD PTR [rax]
  4178c7:	add    BYTE PTR [rax+0x0],al
  4178cd:	add    eax,DWORD PTR [rax]
  4178cf:	add    BYTE PTR [rax+0x0],al
  4178d5:	add    DWORD PTR [rax],eax
  4178d7:	add    BYTE PTR [rax],al
  4178d9:	add    BYTE PTR [rax],al
  4178db:	add    BYTE PTR [rax],al
  4178dd:	add    DWORD PTR [rax],eax
  4178df:	add    BYTE PTR [rax],al
  4178e1:	add    BYTE PTR [rax],al
  4178e3:	add    BYTE PTR [rax],al
  4178e5:	add    DWORD PTR [rax],eax
	...
  417927:	add    BYTE PTR [rax+0x0],al
  41792d:	add    BYTE PTR [rax],al
  41792f:	add    BYTE PTR [rax+0x0],al
  417935:	add    DWORD PTR [rax],eax
  417937:	add    BYTE PTR [rax+0x0],al
  41793d:	add    eax,DWORD PTR [rax]
  41793f:	add    al,al
  417941:	add    BYTE PTR [rax],al
  417943:	add    BYTE PTR [rax],al
  417945:	(bad)  
  417946:	add    BYTE PTR [rax],al
  417948:	lock add BYTE PTR [rax],ah
  41794b:	add    BYTE PTR [rax],al
  41794d:	sldt   WORD PTR [rax]
  417950:	cld    
  417951:	add    esi,eax
  417953:	add    al,BYTE PTR [rax]
  417955:	(bad)  
  417956:	add    BYTE PTR [rax],al
  417958:	(bad)  
  417959:	(bad)  
  41795a:	(bad)  
  41795b:	inc    DWORD PTR [rcx+0xff]
  417961:	add    BYTE PTR [rcx],al
  417963:	add    BYTE PTR [rsi],al
  417965:	add    BYTE PTR [rax],dl
  417967:	adc    BYTE PTR [rax],al
  417969:	add    BYTE PTR [rcx],al
  41796b:	add    BYTE PTR [rax],cl
  41796d:	add    BYTE PTR [rax+0x5],ch
  417970:	add    BYTE PTR [rax],al
  417972:	add    DWORD PTR [rax],eax
  417974:	and    BYTE PTR [rax],ah
  417976:	add    BYTE PTR [rax],al
  417978:	add    DWORD PTR [rax],eax
  41797a:	or     BYTE PTR [rax],al
  41797c:	test   al,0x8
  41797e:	add    BYTE PTR [rax],al
  417980:	add    al,BYTE PTR [rax]
  417982:	xor    BYTE PTR [rax],dh
  417984:	add    BYTE PTR [rax],al
  417986:	add    DWORD PTR [rax],eax
  417988:	or     BYTE PTR [rax],al
  41798a:	test   al,0xe
  41798c:	add    BYTE PTR [rax],al
  41798e:	add    eax,DWORD PTR [rax]
  417990:	adc    BYTE PTR [rax],dl
  417992:	add    BYTE PTR [rax],al
  417994:	add    DWORD PTR [rax],eax
  417996:	and    BYTE PTR [rax],al
  417998:	push   0x4000004
  41799d:	add    BYTE PTR [rax],ah
  41799f:	and    BYTE PTR [rax],al
  4179a1:	add    BYTE PTR [rcx],al
  4179a3:	add    BYTE PTR [rax],ah
  4179a5:	add    BYTE PTR [rax+0x5000010],ch
  4179ab:	add    BYTE PTR [rax],dh
  4179ad:	xor    BYTE PTR [rax],al
  4179af:	add    BYTE PTR [rcx],al
  4179b1:	add    BYTE PTR [rax],ah
  4179b3:	add    BYTE PTR [rax+0x6000025],ch
  4179b9:	add    BYTE PTR [rax],al
  4179bb:	add    BYTE PTR [rax],al
  4179bd:	add    BYTE PTR [rax],al
  4179bf:	add    BYTE PTR [rbx+rax*1+0x34],bl
  4179c6:	push   rsi
  4179c7:	add    BYTE PTR [rbx+0x0],dl
  4179ca:	pop    rdi
  4179cb:	add    BYTE PTR [rsi+0x0],dl
  4179ce:	add    BYTE PTR [r10+0x0],r10b
  4179d2:	push   rbx
  4179d3:	add    BYTE PTR [rcx+0x0],cl
  4179d6:	rex.WRXB add BYTE PTR [r14+0x0],r9b
  4179da:	pop    rdi
  4179db:	add    BYTE PTR [rcx+0x0],cl
  4179de:	rex.WRX add BYTE PTR [rsi+0x0],r8b
  4179e2:	rex.WRXB add BYTE PTR [r8],r8b
  4179e5:	add    BYTE PTR [rax],al
  4179e7:	add    BYTE PTR [rbp+0xfeef04],bh
  4179ed:	add    BYTE PTR [rcx],al
  4179ef:	add    BYTE PTR [rax+rax*1],al
  4179f2:	or     DWORD PTR [rax],eax
  4179f4:	sahf   
  4179f5:	rex.X add DWORD PTR [rax],eax
  4179f8:	add    al,0x0
  4179fa:	or     DWORD PTR [rax],eax
  4179fc:	sahf   
  4179fd:	rex.X add DWORD PTR [rax],eax
  417a00:	(bad)  
  417a01:	add    BYTE PTR [rax],al
  417a03:	add    BYTE PTR [rax],al
  417a05:	add    BYTE PTR [rax],al
  417a07:	add    BYTE PTR [rax+rax*1],al
  417a0a:	add    al,0x0
  417a0c:	add    DWORD PTR [rax],eax
	...
  417a1a:	add    BYTE PTR [rax],al
  417a1c:	cld    
  417a1d:	add    al,BYTE PTR [rax]
  417a1f:	add    BYTE PTR [rcx],al
  417a21:	add    BYTE PTR [rbx+0x0],dl
  417a24:	je     0x417a26
  417a26:	jb     0x417a28
  417a28:	imul   eax,DWORD PTR [rax],0x67006e
  417a2e:	rex.RX add BYTE PTR [rcx+0x0],r13b
  417a32:	ins    BYTE PTR es:[rdi],dx
  417a33:	add    BYTE PTR [rbp+0x0],ah
  417a36:	rex.WB add BYTE PTR [r14+0x0],bpl
  417a3a:	data16 add BYTE PTR [rdi+0x0],ch
  417a3e:	add    BYTE PTR [rax],al
  417a40:	fadd   DWORD PTR [rdx]
  417a42:	add    BYTE PTR [rax],al
  417a44:	add    DWORD PTR [rax],eax
  417a46:	xor    BYTE PTR [rax],al
  417a48:	xor    BYTE PTR [rax],al
  417a4a:	xor    BYTE PTR [rax],al
  417a4c:	xor    BYTE PTR [rax],al
  417a4e:	xor    BYTE PTR [rax],al
  417a50:	xor    al,0x0
  417a52:	(bad)  
  417a53:	add    BYTE PTR [rax],dh
  417a55:	add    BYTE PTR [rax],al
  417a57:	add    BYTE PTR [rax+0x0],ch
  417a5a:	and    al,0x0
  417a5c:	add    DWORD PTR [rax],eax
  417a5e:	rex.XB add BYTE PTR [r15+0x0],bpl
  417a62:	ins    DWORD PTR es:[rdi],dx
  417a63:	add    BYTE PTR [rax+0x0],dh
  417a66:	(bad)  
  417a67:	add    BYTE PTR [rsi+0x0],ch
  417a6a:	jns    0x417a6c
  417a6c:	rex.WRX add BYTE PTR [rcx+0x0],r12b
  417a70:	ins    DWORD PTR es:[rdi],dx
  417a71:	add    BYTE PTR [rbp+0x0],ah
  417a74:	add    BYTE PTR [rax],al
  417a76:	add    BYTE PTR [rax],al
  417a78:	push   rax
  417a79:	add    BYTE PTR [rdi+0x0],ch
  417a7c:	jae    0x417a7e
  417a7e:	je     0x417a80
  417a80:	add    BYTE PTR [edx+0x0],dh
  417a84:	add    BYTE PTR gs:[rbx+0x0],dl
  417a88:	push   rcx
  417a89:	add    BYTE PTR [rax+rax*1+0x20],cl
  417a8d:	add    BYTE PTR [rdi+0x0],al
  417a90:	ins    BYTE PTR es:[rdi],dx
  417a91:	add    BYTE PTR [rdi+0x0],ch
  417a94:	(bad)  
  417a95:	add    BYTE PTR [rcx+0x0],ah
  417a98:	ins    BYTE PTR es:[rdi],dx
  417a99:	add    BYTE PTR [rax],ah
  417a9b:	add    BYTE PTR [rax+rax*1+0x65],al
  417a9f:	add    BYTE PTR [rsi+0x0],dh
  417aa2:	add    BYTE PTR gs:[rax+rax*1+0x6f],ch
  417aa7:	add    BYTE PTR [rax+0x0],dh
  417aaa:	ins    DWORD PTR es:[rdi],dx
  417aab:	add    BYTE PTR [rbp+0x0],ah
  417aae:	outs   dx,BYTE PTR ds:[rsi]
  417aaf:	add    BYTE PTR [rax+rax*1+0x20],dh
  417ab3:	add    BYTE PTR [rdi+0x0],al
  417ab6:	jb     0x417ab8
  417ab8:	outs   dx,DWORD PTR ds:[rsi]
  417ab9:	add    BYTE PTR [rbp+0x0],dh
  417abc:	jo     0x417abe
  417abe:	add    BYTE PTR [rax],al
  417ac0:	(bad)  
  417ac1:	add    BYTE PTR [rip+0x46000100],ch        # 0x46417bc7
  417ac7:	add    BYTE PTR [rcx+0x0],ch
  417aca:	ins    BYTE PTR es:[rdi],dx
  417acb:	add    BYTE PTR [rbp+0x0],ah
  417ace:	add    BYTE PTR [rbp+0x0],r12b
  417ad2:	jae    0x417ad4
  417ad4:	movsxd eax,DWORD PTR [rax]
  417ad6:	jb     0x417ad8
  417ad8:	imul   eax,DWORD PTR [rax],0x740070
  417ade:	imul   eax,DWORD PTR [rax],0x6e006f
  417ae4:	add    BYTE PTR [rax],al
  417ae6:	add    BYTE PTR [rax],al
  417ae8:	jo     0x417aea
  417aea:	add    BYTE PTR [edi+0x0],bl
  417aee:	movsxd eax,DWORD PTR [rax]
  417af0:	outs   dx,DWORD PTR ds:[rsi]
  417af1:	add    BYTE PTR [rsi+0x0],ch
  417af4:	data16 add BYTE PTR [rcx+0x0],ch
  417af8:	add    BYTE PTR [eax],ah
  417afb:	add    BYTE PTR [rip+0x72002000],ch        # 0x72419b01
  417b01:	add    BYTE PTR [rbp+0x0],ah
  417b04:	jo     0x417b06
  417b06:	outs   dx,DWORD PTR ds:[rsi]
  417b07:	add    BYTE PTR [rdx+0x0],dh
  417b0a:	je     0x417b0c
  417b0c:	and    BYTE PTR [rax],al
  417b0e:	movsxd eax,DWORD PTR [rax]
  417b10:	outs   dx,DWORD PTR ds:[rsi]
  417b11:	add    BYTE PTR [rsi+0x0],ch
  417b14:	data16 add BYTE PTR [rcx+0x0],ch
  417b18:	add    BYTE PTR [ebp+0x0],dh
  417b1c:	jb     0x417b1e
  417b1e:	(bad)  
  417b1f:	add    BYTE PTR [rax+rax*1+0x69],dh
  417b23:	add    BYTE PTR [rdi+0x0],ch
  417b26:	outs   dx,BYTE PTR ds:[rsi]
  417b27:	add    BYTE PTR [rax],ah
  417b29:	add    BYTE PTR [rcx+0x0],ch
  417b2c:	outs   dx,BYTE PTR ds:[rsi]
  417b2d:	add    BYTE PTR [rsi+0x0],ah
  417b30:	outs   dx,DWORD PTR ds:[rsi]
  417b31:	add    BYTE PTR [rdx+0x0],dh
  417b34:	ins    DWORD PTR es:[rdi],dx
  417b35:	add    BYTE PTR [rcx+0x0],ah
  417b38:	je     0x417b3a
  417b3a:	imul   eax,DWORD PTR [rax],0x6e006f
  417b40:	add    BYTE PTR [rax],al
  417b42:	add    BYTE PTR [rax],al
  417b44:	sub    al,0x0
  417b46:	(bad)  
  417b47:	add    BYTE PTR [rcx],al
  417b49:	add    BYTE PTR [rsi+0x0],al
  417b4c:	imul   eax,DWORD PTR [rax],0x65006c
  417b52:	push   rsi
  417b53:	add    BYTE PTR [rbp+0x0],ah
  417b56:	jb     0x417b58
  417b58:	jae    0x417b5a
  417b5a:	imul   eax,DWORD PTR [rax],0x6e006f
  417b60:	add    BYTE PTR [rax],al
  417b62:	add    BYTE PTR [rax],al
  417b64:	cmp    DWORD PTR [rax],eax
  417b66:	add    BYTE PTR cs:[rax+rax*1],dh
  417b6a:	add    BYTE PTR cs:[rcx],dh
  417b6d:	add    BYTE PTR [rax],al
  417b6f:	add    BYTE PTR [rsi],bh
  417b71:	add    DWORD PTR [rbp+0x4c000100],ecx
  417b77:	add    BYTE PTR [rbp+0x0],ah
  417b7a:	add    BYTE PTR [ecx+0x0],ah
  417b7e:	ins    BYTE PTR es:[rdi],dx
  417b7f:	add    BYTE PTR [rbx+0x0],al
  417b82:	outs   dx,DWORD PTR ds:[rsi]
  417b83:	add    BYTE PTR [rax+0x0],dh
  417b86:	jns    0x417b88
  417b88:	jb     0x417b8a
  417b8a:	imul   eax,DWORD PTR [rax],0x680067
  417b90:	je     0x417b92
  417b92:	add    BYTE PTR [rax],al
  417b94:	push   rax
  417b95:	add    BYTE PTR [rdi+0x0],ch
  417b98:	jb     0x417b9a
  417b9a:	je     0x417b9c
  417b9c:	imul   eax,DWORD PTR [rax],0x6e006f
  417ba2:	jae    0x417ba4
  417ba4:	and    BYTE PTR [rax],al
  417ba6:	rex.XB add BYTE PTR [r15+0x0],bpl
  417baa:	jo     0x417bac
  417bac:	jns    0x417bae
  417bae:	jb     0x417bb0
  417bb0:	imul   eax,DWORD PTR [rax],0x680067
  417bb6:	je     0x417bb8
  417bb8:	and    BYTE PTR [rax],al
  417bba:	sub    BYTE PTR [rax],al
  417bbc:	movsxd eax,DWORD PTR [rax]
  417bbe:	sub    DWORD PTR [rax],eax
  417bc0:	and    BYTE PTR [rax],al
  417bc2:	xor    DWORD PTR [rax],eax
  417bc4:	cmp    DWORD PTR [rax],eax
  417bc6:	cmp    DWORD PTR [rax],eax
  417bc8:	add    BYTE PTR ss:[rip+0x30003200],ch        # 0x3041adcf
  417bcf:	add    BYTE PTR [rcx],dh
  417bd1:	add    BYTE PTR [rax+rax*1],dh
  417bd4:	sub    al,0x0
  417bd6:	and    BYTE PTR [rax],al
  417bd8:	push   rax
  417bd9:	add    BYTE PTR [rdi+0x0],ch
  417bdc:	jae    0x417bde
  417bde:	je     0x417be0
  417be0:	add    BYTE PTR [edx+0x0],dh
  417be4:	add    BYTE PTR gs:[rbx+0x0],dl
  417be8:	push   rcx
  417be9:	add    BYTE PTR [rax+rax*1+0x20],cl
  417bed:	add    BYTE PTR [rdi+0x0],al
  417bf0:	ins    BYTE PTR es:[rdi],dx
  417bf1:	add    BYTE PTR [rdi+0x0],ch
  417bf4:	(bad)  
  417bf5:	add    BYTE PTR [rcx+0x0],ah
  417bf8:	ins    BYTE PTR es:[rdi],dx
  417bf9:	add    BYTE PTR [rax],ah
  417bfb:	add    BYTE PTR [rax+rax*1+0x65],al
  417bff:	add    BYTE PTR [rsi+0x0],dh
  417c02:	add    BYTE PTR gs:[rax+rax*1+0x6f],ch
  417c07:	add    BYTE PTR [rax+0x0],dh
  417c0a:	ins    DWORD PTR es:[rdi],dx
  417c0b:	add    BYTE PTR [rbp+0x0],ah
  417c0e:	outs   dx,BYTE PTR ds:[rsi]
  417c0f:	add    BYTE PTR [rax+rax*1+0x20],dh
  417c13:	add    BYTE PTR [rdi+0x0],al
  417c16:	jb     0x417c18
  417c18:	outs   dx,DWORD PTR ds:[rsi]
  417c19:	add    BYTE PTR [rbp+0x0],dh
  417c1c:	jo     0x417c1e
  417c1e:	add    BYTE PTR cs:[rax],ah
  417c21:	add    BYTE PTR [rax+0x0],dl
  417c24:	outs   dx,DWORD PTR ds:[rsi]
  417c25:	add    BYTE PTR [rdx+0x0],dh
  417c28:	je     0x417c2a
  417c2a:	imul   eax,DWORD PTR [rax],0x6e006f
  417c30:	jae    0x417c32
  417c32:	and    BYTE PTR [rax],al
  417c34:	rex.XB add BYTE PTR [r15+0x0],bpl
  417c38:	jo     0x417c3a
  417c3a:	jns    0x417c3c
  417c3c:	jb     0x417c3e
  417c3e:	imul   eax,DWORD PTR [rax],0x680067
  417c44:	je     0x417c46
  417c46:	and    BYTE PTR [rax],al
  417c48:	sub    BYTE PTR [rax],al
  417c4a:	movsxd eax,DWORD PTR [rax]
  417c4c:	sub    DWORD PTR [rax],eax
  417c4e:	and    BYTE PTR [rax],al
  417c50:	xor    DWORD PTR [rax],eax
  417c52:	cmp    DWORD PTR [rax],eax
  417c54:	cmp    DWORD PTR [rax],eax
  417c56:	xor    al,0x0
  417c58:	sub    al,0x0
  417c5a:	and    BYTE PTR [rax],al
  417c5c:	push   rdx
  417c5d:	add    BYTE PTR [rbp+0x0],ah
  417c60:	add    BYTE PTR [ebp+0x0],ah
  417c64:	outs   dx,BYTE PTR ds:[rsi]
  417c65:	add    BYTE PTR [rax+rax*1+0x73],dh
  417c69:	add    BYTE PTR [rax],ah
  417c6b:	add    BYTE PTR [rdi+0x0],ch
  417c6e:	data16 add BYTE PTR [rax],ah
  417c71:	add    BYTE PTR [rax+rax*1+0x68],dh
  417c75:	add    BYTE PTR [rbp+0x0],ah
  417c78:	and    BYTE PTR [rax],al
  417c7a:	push   rbp
  417c7b:	add    BYTE PTR [rsi+0x0],ch
  417c7e:	imul   eax,DWORD PTR [rax],0x650076
  417c84:	jb     0x417c86
  417c86:	jae    0x417c88
  417c88:	imul   eax,DWORD PTR [rax],0x790074
  417c8e:	and    BYTE PTR [rax],al
  417c90:	outs   dx,DWORD PTR ds:[rsi]
  417c91:	add    BYTE PTR [rsi+0x0],ah
  417c94:	and    BYTE PTR [rax],al
  417c96:	rex.XB add BYTE PTR [r9+0x0],spl
  417c9a:	ins    BYTE PTR es:[rdi],dx
  417c9b:	add    BYTE PTR [rcx+0x0],ch
  417c9e:	data16 add BYTE PTR [rdi+0x0],ch
  417ca2:	jb     0x417ca4
  417ca4:	outs   dx,BYTE PTR ds:[rsi]
  417ca5:	add    BYTE PTR [rcx+0x0],ch
  417ca8:	(bad)  
  417ca9:	add    BYTE PTR [rsi],ch
  417cab:	add    BYTE PTR [rax],al
  417cad:	add    BYTE PTR [rax],al
  417caf:	add    BYTE PTR [rsi],dh
  417cb1:	add    BYTE PTR [rbx],cl
  417cb3:	add    BYTE PTR [rcx],al
  417cb5:	add    BYTE PTR [rax+0x0],dl
  417cb8:	jb     0x417cba
  417cba:	outs   dx,DWORD PTR ds:[rsi]
  417cbb:	add    BYTE PTR [rax+rax*1+0x75],ah
  417cbf:	add    BYTE PTR [rbx+0x0],ah
  417cc2:	je     0x417cc4
  417cc4:	rex.WRX add BYTE PTR [rcx+0x0],r12b
  417cc8:	ins    DWORD PTR es:[rdi],dx
  417cc9:	add    BYTE PTR [rbp+0x0],ah
  417ccc:	add    BYTE PTR [rax],al
  417cce:	add    BYTE PTR [rax],al
  417cd0:	push   rax
  417cd1:	add    BYTE PTR [rdi+0x0],ch
  417cd4:	jae    0x417cd6
  417cd6:	je     0x417cd8
  417cd8:	add    BYTE PTR [edx+0x0],dh
  417cdc:	add    BYTE PTR gs:[rbx+0x0],dl
  417ce0:	push   rcx
  417ce1:	add    BYTE PTR [rax+rax*1+0x0],cl
  417ce5:	add    BYTE PTR [rax],al
  417ce7:	add    BYTE PTR [rax],dh
  417ce9:	add    BYTE PTR [rsi],al
  417ceb:	add    BYTE PTR [rcx],al
  417ced:	add    BYTE PTR [rax+0x0],dl
  417cf0:	jb     0x417cf2
  417cf2:	outs   dx,DWORD PTR ds:[rsi]
  417cf3:	add    BYTE PTR [rax+rax*1+0x75],ah
  417cf7:	add    BYTE PTR [rbx+0x0],ah
  417cfa:	je     0x417cfc
  417cfc:	push   rsi
  417cfd:	add    BYTE PTR [rbp+0x0],ah
  417d00:	jb     0x417d02
  417d02:	jae    0x417d04
  417d04:	imul   eax,DWORD PTR [rax],0x6e006f
  417d0a:	add    BYTE PTR [rax],al
  417d0c:	cmp    DWORD PTR [rax],eax
  417d0e:	add    BYTE PTR cs:[rax+rax*1],dh
  417d12:	add    BYTE PTR cs:[rcx],dh
  417d15:	add    BYTE PTR [rax],al
  417d17:	add    BYTE PTR [rax+rax*1+0x0],al
  417d1b:	add    BYTE PTR [rcx],al
  417d1d:	add    BYTE PTR [rsi+0x0],dl
  417d20:	(bad)  
  417d21:	add    BYTE PTR [rdx+0x0],dh
  417d24:	rex.RX add BYTE PTR [rcx+0x0],r13b
  417d28:	ins    BYTE PTR es:[rdi],dx
  417d29:	add    BYTE PTR [rbp+0x0],ah
  417d2c:	rex.WB add BYTE PTR [r14+0x0],bpl
  417d30:	data16 add BYTE PTR [rdi+0x0],ch
  417d34:	add    BYTE PTR [rax],al
  417d36:	add    BYTE PTR [rax],al
  417d38:	and    al,0x0
  417d3a:	add    al,0x0
  417d3c:	add    BYTE PTR [rax],al
  417d3e:	push   rsp
  417d3f:	add    BYTE PTR [rdx+0x0],dh
  417d42:	(bad)  
  417d43:	add    BYTE PTR [rsi+0x0],ch
  417d46:	jae    0x417d48
  417d48:	ins    BYTE PTR es:[rdi],dx
  417d49:	add    BYTE PTR [rcx+0x0],ah
  417d4c:	je     0x417d4e
  417d4e:	imul   eax,DWORD PTR [rax],0x6e006f
  417d54:	add    BYTE PTR [rax],al
  417d56:	add    BYTE PTR [rax],al
  417d58:	add    BYTE PTR [rax],al
  417d5a:	mov    al,0x4
  417d5c:	add    BYTE PTR [rax],al
	...
